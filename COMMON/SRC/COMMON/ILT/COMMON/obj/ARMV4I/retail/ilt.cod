; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\ILT\COMMON\ilt.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|g_oalILT|, 0x1c


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALIoCtlHalILTiming|
	EXPORT	|??_C@_1GA@HKIKBELC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAL?$AAT?$AAi?$AAm?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|NKSetLastError|
	IMPORT	|g_oalTimer|
	IMPORT	|INTERRUPTS_ENABLE|
	IMPORT	|OALTimerCountsSinceSysTick|

  00000			 AREA	 |.bss|, NOINIT
|g_ilt|	%	0xc
|g_ilt|	%	0xc
; File c:\wince600\platform\common\src\common\ilt\common\ilt.c

  00000			 AREA	 |.pdata|, PDATA
|$T43186| DCD	|$LN21@OALIoCtlHa|
	DCD	0x40006301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@HKIKBELC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAL?$AAT?$AAi?$AAm?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "L", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlHalILTiming| PROC

; 49   : {

  00000		 |$LN21@OALIoCtlHa|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43183|

; 50   :     BOOL rc = FALSE;
; 51   :     BOOL enabled;
; 52   :     ILTIMING_MESSAGE *pITM = (ILTIMING_MESSAGE*)pInpBuffer;
; 53   : 
; 54   :     if (pOutSize) {

  00004	e59d3014	 ldr         r3, [sp, #0x14]
  00008	e3530000	 cmp         r3, #0

; 55   :         *pOutSize = 0;

  0000c	13a00000	 movne       r0, #0
  00010	15830000	 strne       r0, [r3]

; 56   :     }
; 57   : 
; 58   :     // Check message size
; 59   :     if (inpSize < sizeof(ILTIMING_MESSAGE) || pInpBuffer == NULL) {

  00014	e3520018	 cmp         r2, #0x18
  00018	3a00004b	 bcc         |$LN8@OALIoCtlHa|
  0001c	e3510000	 cmp         r1, #0
  00020	0a000049	 beq         |$LN8@OALIoCtlHa|

; 65   :         goto cleanUp;
; 66   :     }
; 67   :  
; 68   :     switch (pITM->wMsg) {

  00024	e1d130b0	 ldrh        r3, [r1]
  00028	e3530001	 cmp         r3, #1
  0002c	0a000028	 beq         |$LN5@OALIoCtlHa|
  00030	e3530002	 cmp         r3, #2
  00034	0a000018	 beq         |$LN4@OALIoCtlHa|
  00038	e3530003	 cmp         r3, #3
  0003c	0a000006	 beq         |$LN3@OALIoCtlHa|
  00040	e3530004	 cmp         r3, #4

; 114  :         break;
; 115  : 
; 116  :     case ILTIMING_MSG_GET_PFN:
; 117  :         pITM->pfnPerfCountSinceTick = OALTimerCountsSinceSysTick;
; 118  :         rc = TRUE;
; 119  :         break;
; 120  : 
; 121  :     default:
; 122  :         // Error, didn't match any known parameters
; 123  :         NKSetLastError(ERROR_INVALID_PARAMETER);
; 124  :         OALMSG(OAL_ERROR, (
; 125  :             L"ERROR: OALIoCtlHalILTiming: Invalid parameter\r\n"
; 126  :         ));
; 127  :         rc = FALSE;
; 128  :         break;

  00044	1a000040	 bne         |$LN8@OALIoCtlHa|
  00048	e59f3138	 ldr         r3, [pc, #0x138]
  0004c	e3a00001	 mov         r0, #1
  00050	e5813014	 str         r3, [r1, #0x14]

; 129  :     }
; 130  : 
; 131  : cleanUp:
; 132  :     return rc;
; 133  : }

  00054	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$LN3@OALIoCtlHa|

; 105  : 
; 106  :     case ILTIMING_MSG_GET_TIMES:
; 107  :         pITM->dwIsrTime1 = g_oalILT.isrTime1;

  0005c	e59f2120	 ldr         r2, [pc, #0x120]

; 108  :         pITM->dwIsrTime2 = g_oalILT.isrTime2;
; 109  :         pITM->wNumInterrupts = g_oalILT.interrupts;
; 110  :         pITM->dwSPC = g_oalILT.savedPC;
; 111  :         pITM->dwFrequency = g_oalILT.counterSet;
; 112  :         g_oalILT.interrupts = 0;

  00060	e3a0e000	 mov         lr, #0

; 113  :         rc = TRUE;

  00064	e3a00001	 mov         r0, #1
  00068	e5923008	 ldr         r3, [r2, #8]
  0006c	e5813004	 str         r3, [r1, #4]
  00070	e592300c	 ldr         r3, [r2, #0xC]
  00074	e5813008	 str         r3, [r1, #8]
  00078	e1d230b4	 ldrh        r3, [r2, #4]
  0007c	e1c130b2	 strh        r3, [r1, #2]
  00080	e5923010	 ldr         r3, [r2, #0x10]
  00084	e581300c	 str         r3, [r1, #0xC]
  00088	e5923018	 ldr         r3, [r2, #0x18]
  0008c	e5813010	 str         r3, [r1, #0x10]
  00090	e1c2e0b4	 strh        lr, [r2, #4]

; 129  :     }
; 130  : 
; 131  : cleanUp:
; 132  :     return rc;
; 133  : }

  00094	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN4@OALIoCtlHa|

; 90   :         break;
; 91   : 
; 92   :     case ILTIMING_MSG_DISABLE:
; 93   :         // We don't want interrupt just now
; 94   :         enabled = INTERRUPTS_ENABLE(FALSE);

  0009c	e3a00000	 mov         r0, #0
  000a0	eb000000	 bl          INTERRUPTS_ENABLE

; 95   :         // Restore original timer values
; 96   :         g_oalTimer.msecPerSysTick = g_ilt.msecPerSysTick;

  000a4	e59f10d0	 ldr         r1, [pc, #0xD0]
  000a8	e59fe0d0	 ldr         lr, [pc, #0xD0]

; 97   :         g_oalTimer.countsPerSysTick = g_ilt.countsPerSysTick;
; 98   :         g_oalTimer.maxPeriodMSec = g_ilt.maxPeriodMSec;
; 99   :         // ITL is inactive
; 100  :         g_oalILT.active = FALSE;

  000ac	e59f40d0	 ldr         r4, [pc, #0xD0]
  000b0	e5913000	 ldr         r3, [r1]
  000b4	e5912004	 ldr         r2, [r1, #4]
  000b8	e5911008	 ldr         r1, [r1, #8]
  000bc	e58e300c	 str         r3, [lr, #0xC]
  000c0	e3a03000	 mov         r3, #0
  000c4	e58e2010	 str         r2, [lr, #0x10]

; 101  :         // We are done with critical part
; 102  :         INTERRUPTS_ENABLE(enabled);

  000c8	e5843000	 str         r3, [r4]
  000cc	e58e1008	 str         r1, [lr, #8]

; 103  :         rc = TRUE;
; 104  :         break;

  000d0	ea000019	 b           |$LN18@OALIoCtlHa|
  000d4		 |$LN5@OALIoCtlHa|

; 69   : 
; 70   :     case ILTIMING_MSG_ENABLE:
; 71   :         g_oalILT.counter = g_oalILT.counterSet = pITM->dwFrequency;

  000d4	e59f60a8	 ldr         r6, [pc, #0xA8]
  000d8	e5913010	 ldr         r3, [r1, #0x10]

; 72   :         g_oalILT.interrupts = 0;

  000dc	e3a02000	 mov         r2, #0

; 73   :         g_oalILT.isrTime1 = 0xFFFFFFFF;

  000e0	e3e01000	 mvn         r1, #0
  000e4	e5863018	 str         r3, [r6, #0x18]
  000e8	e5863014	 str         r3, [r6, #0x14]
  000ec	e1c620b4	 strh        r2, [r6, #4]

; 74   :         // We don't want interrupt just now
; 75   :         enabled = INTERRUPTS_ENABLE(FALSE);

  000f0	e3a00000	 mov         r0, #0
  000f4	e5861008	 str         r1, [r6, #8]
  000f8	eb000000	 bl          INTERRUPTS_ENABLE

; 76   :         // Save original timer values
; 77   :         g_ilt.msecPerSysTick = g_oalTimer.msecPerSysTick;

  000fc	e59f407c	 ldr         r4, [pc, #0x7C]

; 78   :         g_ilt.countsPerSysTick = g_oalTimer.countsPerSysTick;
; 79   :         //variable tick works off of maxPeriodMSec. The next line essentially changes variable tick timer into 1 ms fix tick timer.
; 80   :         g_ilt.maxPeriodMSec = g_oalTimer.maxPeriodMSec;         
; 81   :         // For timing we need period 1 ms
; 82   :         g_oalTimer.msecPerSysTick = 1;

  00100	e3a03001	 mov         r3, #1
  00104	e59f5070	 ldr         r5, [pc, #0x70]
  00108	e594200c	 ldr         r2, [r4, #0xC]
  0010c	e5941010	 ldr         r1, [r4, #0x10]
  00110	e594e008	 ldr         lr, [r4, #8]
  00114	e584300c	 str         r3, [r4, #0xC]

; 83   :         g_oalTimer.countsPerSysTick = g_oalTimer.countsPerMSec;

  00118	e5943000	 ldr         r3, [r4]
  0011c	e5852000	 str         r2, [r5]

; 84   :         g_oalTimer.maxPeriodMSec = 1;
; 85   :         // ILT is active now        
; 86   :         g_oalILT.active = TRUE;

  00120	e3a02001	 mov         r2, #1
  00124	e5843010	 str         r3, [r4, #0x10]
  00128	e3a03001	 mov         r3, #1
  0012c	e5851004	 str         r1, [r5, #4]
  00130	e5843008	 str         r3, [r4, #8]

; 87   :         // We are done with critical part
; 88   :         INTERRUPTS_ENABLE(enabled);

  00134	e585e008	 str         lr, [r5, #8]
  00138	e5862000	 str         r2, [r6]
  0013c		 |$LN18@OALIoCtlHa|
  0013c	eb000000	 bl          INTERRUPTS_ENABLE

; 89   :         rc = TRUE;

  00140	e3a00001	 mov         r0, #1

; 129  :     }
; 130  : 
; 131  : cleanUp:
; 132  :     return rc;
; 133  : }

  00144	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00148	e12fff1e	 bx          lr
  0014c		 |$LN8@OALIoCtlHa|

; 60   :         NKSetLastError(ERROR_INVALID_PARAMETER);

  0014c	e3a00057	 mov         r0, #0x57
  00150	eb000000	 bl          NKSetLastError

; 61   :         OALMSG(OAL_ERROR, (
; 62   :             L"ERROR: OALIoCtlHalILTiming: Invalid parameter\r\n"
; 63   :         ));

  00154	e59f301c	 ldr         r3, [pc, #0x1C]
  00158	e5933440	 ldr         r3, [r3, #0x440]
  0015c	e3130001	 tst         r3, #1
  00160	159f000c	 ldrne       r0, [pc, #0xC]
  00164	1b000000	 blne        NKDbgPrintfW

; 64   :         rc = FALSE;

  00168	e3a00000	 mov         r0, #0
  0016c		 |$cleanUp$43143|

; 129  :     }
; 130  : 
; 131  : cleanUp:
; 132  :     return rc;
; 133  : }

  0016c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00170	e12fff1e	 bx          lr
  00174		 |$LN22@OALIoCtlHa|
  00174		 |$LN23@OALIoCtlHa|
  00174	00000000	 DCD         |??_C@_1GA@HKIKBELC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAL?$AAT?$AAi?$AAm?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa@|
  00178		 |$LN24@OALIoCtlHa|
  00178	00000000	 DCD         |dpCurSettings|
  0017c		 |$LN25@OALIoCtlHa|
  0017c	00000000	 DCD         |g_ilt|
  00180		 |$LN26@OALIoCtlHa|
  00180	00000000	 DCD         |g_oalTimer|
  00184		 |$LN27@OALIoCtlHa|
  00184	00000000	 DCD         |g_oalILT|
  00188		 |$LN28@OALIoCtlHa|
  00188	00000000	 DCD         |OALTimerCountsSinceSysTick|
  0018c		 |$M43184|

			 ENDP  ; |OALIoCtlHalILTiming|

	END
