; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\ILT\COMMON\ilt.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|g_oalILT|, 0x1c


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1GA@HKIKBELC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAL?$AAT?$AAi?$AAm?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa@| [ DATA ] ; `string'
	EXPORT	|OALIoCtlHalILTiming|
	IMPORT	|OALTimerCountsSinceSysTick|
	IMPORT	|g_oalTimer|
	IMPORT	|INTERRUPTS_ENABLE|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|NKSetLastError|

  00000			 AREA	 |.bss|, NOINIT
|g_ilt|	%	0xc

  00000			 AREA	 |.pdata|, PDATA
|$T43154| DCD	|$LN25@OALIoCtlHa|
	DCD	0x4000c204
; File c:\wince600\platform\common\src\common\ilt\common\ilt.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@HKIKBELC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAL?$AAT?$AAi?$AAm?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "L", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlHalILTiming| PROC

; 49   : {

  00000		 |$LN25@OALIoCtlHa|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd024	 sub         sp, sp, #0x24
  00010		 |$M43151|

; 50   :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 51   :     BOOL enabled;
; 52   :     ILTIMING_MESSAGE *pITM = (ILTIMING_MESSAGE*)pInpBuffer;

  00018	e59d3030	 ldr         r3, [sp, #0x30]
  0001c	e58d3004	 str         r3, [sp, #4]

; 53   : 
; 54   :     if (pOutSize) {

  00020	e59d3040	 ldr         r3, [sp, #0x40]
  00024	e3530000	 cmp         r3, #0
  00028	0a000002	 beq         |$LN10@OALIoCtlHa|

; 55   :         *pOutSize = 0;

  0002c	e59d2040	 ldr         r2, [sp, #0x40]
  00030	e3a03000	 mov         r3, #0
  00034	e5823000	 str         r3, [r2]
  00038		 |$LN10@OALIoCtlHa|

; 56   :     }
; 57   : 
; 58   :     // Check message size
; 59   :     if (inpSize < sizeof(ILTIMING_MESSAGE) || pInpBuffer == NULL) {

  00038	e59d3034	 ldr         r3, [sp, #0x34]
  0003c	e3530018	 cmp         r3, #0x18
  00040	3a000002	 bcc         |$LN8@OALIoCtlHa|
  00044	e59d3030	 ldr         r3, [sp, #0x30]
  00048	e3530000	 cmp         r3, #0
  0004c	1a00000f	 bne         |$LN9@OALIoCtlHa|
  00050		 |$LN8@OALIoCtlHa|

; 60   :         NKSetLastError(ERROR_INVALID_PARAMETER);

  00050	e3a00057	 mov         r0, #0x57
  00054	eb000000	 bl          NKSetLastError

; 61   :         OALMSG(OAL_ERROR, (
; 62   :             L"ERROR: OALIoCtlHalILTiming: Invalid parameter\r\n"
; 63   :         ));

  00058	e59f3294	 ldr         r3, [pc, #0x294]
  0005c	e5933440	 ldr         r3, [r3, #0x440]
  00060	e3130001	 tst         r3, #1
  00064	0a000004	 beq         |$LN13@OALIoCtlHa|
  00068	e59f0280	 ldr         r0, [pc, #0x280]
  0006c	eb000000	 bl          NKDbgPrintfW
  00070	e3a03001	 mov         r3, #1
  00074	e58d3010	 str         r3, [sp, #0x10]
  00078	ea000001	 b           |$LN14@OALIoCtlHa|
  0007c		 |$LN13@OALIoCtlHa|
  0007c	e3a03000	 mov         r3, #0
  00080	e58d3010	 str         r3, [sp, #0x10]
  00084		 |$LN14@OALIoCtlHa|

; 64   :         rc = FALSE;

  00084	e3a03000	 mov         r3, #0
  00088	e58d3000	 str         r3, [sp]

; 65   :         goto cleanUp;

  0008c	ea000091	 b           |$cleanUp$43119|
  00090		 |$LN9@OALIoCtlHa|

; 66   :     }
; 67   :  
; 68   :     switch (pITM->wMsg) {

  00090	e59d3004	 ldr         r3, [sp, #4]
  00094	e1d330b0	 ldrh        r3, [r3]
  00098	e58d3014	 str         r3, [sp, #0x14]
  0009c	e59d3014	 ldr         r3, [sp, #0x14]
  000a0	e2433001	 sub         r3, r3, #1
  000a4	e58d3014	 str         r3, [sp, #0x14]
  000a8	e59d3014	 ldr         r3, [sp, #0x14]
  000ac	e3530003	 cmp         r3, #3
  000b0	8a000079	 bhi         |$LN1@OALIoCtlHa|
  000b4	e59d2014	 ldr         r2, [sp, #0x14]
  000b8	e1a03102	 mov         r3, r2, lsl #2
  000bc	e083300f	 add         r3, r3, pc
  000c0	e5933004	 ldr         r3, [r3, #4]
  000c4	e08ff003	 add         pc, pc, r3
  000c8		 |$LN18@OALIoCtlHa|
  000c8		 |$LN17@OALIoCtlHa|
  000c8		 |$LN19@OALIoCtlHa|
  000c8	0000000c	 DCD         0xc
  000cc		 |$LN20@OALIoCtlHa|
  000cc	000000d4	 DCD         0xd4
  000d0		 |$LN21@OALIoCtlHa|
  000d0	00000138	 DCD         0x138
  000d4		 |$LN22@OALIoCtlHa|
  000d4	000001b4	 DCD         0x1b4
  000d8		 |$LN5@OALIoCtlHa|

; 69   : 
; 70   :     case ILTIMING_MSG_ENABLE:
; 71   :         g_oalILT.counter = g_oalILT.counterSet = pITM->dwFrequency;

  000d8	e59d3004	 ldr         r3, [sp, #4]
  000dc	e2833010	 add         r3, r3, #0x10
  000e0	e5932000	 ldr         r2, [r3]
  000e4	e59f3210	 ldr         r3, [pc, #0x210]
  000e8	e5832018	 str         r2, [r3, #0x18]
  000ec	e59f3208	 ldr         r3, [pc, #0x208]
  000f0	e5932018	 ldr         r2, [r3, #0x18]
  000f4	e59f3200	 ldr         r3, [pc, #0x200]
  000f8	e5832014	 str         r2, [r3, #0x14]

; 72   :         g_oalILT.interrupts = 0;

  000fc	e59f21f8	 ldr         r2, [pc, #0x1F8]
  00100	e3a03000	 mov         r3, #0
  00104	e1c230b4	 strh        r3, [r2, #4]

; 73   :         g_oalILT.isrTime1 = 0xFFFFFFFF;

  00108	e59f21ec	 ldr         r2, [pc, #0x1EC]
  0010c	e3e03000	 mvn         r3, #0
  00110	e5823008	 str         r3, [r2, #8]

; 74   :         // We don't want interrupt just now
; 75   :         enabled = INTERRUPTS_ENABLE(FALSE);

  00114	e3a00000	 mov         r0, #0
  00118	eb000000	 bl          INTERRUPTS_ENABLE
  0011c	e58d0018	 str         r0, [sp, #0x18]
  00120	e59d3018	 ldr         r3, [sp, #0x18]
  00124	e58d3008	 str         r3, [sp, #8]

; 76   :         // Save original timer values
; 77   :         g_ilt.msecPerSysTick = g_oalTimer.msecPerSysTick;

  00128	e59f31d0	 ldr         r3, [pc, #0x1D0]
  0012c	e593200c	 ldr         r2, [r3, #0xC]
  00130	e59f31cc	 ldr         r3, [pc, #0x1CC]
  00134	e5832000	 str         r2, [r3]

; 78   :         g_ilt.countsPerSysTick = g_oalTimer.countsPerSysTick;

  00138	e59f31c0	 ldr         r3, [pc, #0x1C0]
  0013c	e5932010	 ldr         r2, [r3, #0x10]
  00140	e59f31bc	 ldr         r3, [pc, #0x1BC]
  00144	e5832004	 str         r2, [r3, #4]

; 79   :         //variable tick works off of maxPeriodMSec. The next line essentially changes variable tick timer into 1 ms fix tick timer.
; 80   :         g_ilt.maxPeriodMSec = g_oalTimer.maxPeriodMSec;         

  00148	e59f31b0	 ldr         r3, [pc, #0x1B0]
  0014c	e5932008	 ldr         r2, [r3, #8]
  00150	e59f31ac	 ldr         r3, [pc, #0x1AC]
  00154	e5832008	 str         r2, [r3, #8]

; 81   :         // For timing we need period 1 ms
; 82   :         g_oalTimer.msecPerSysTick = 1;

  00158	e59f21a0	 ldr         r2, [pc, #0x1A0]
  0015c	e3a03001	 mov         r3, #1
  00160	e582300c	 str         r3, [r2, #0xC]

; 83   :         g_oalTimer.countsPerSysTick = g_oalTimer.countsPerMSec;

  00164	e59f3194	 ldr         r3, [pc, #0x194]
  00168	e5932000	 ldr         r2, [r3]
  0016c	e59f318c	 ldr         r3, [pc, #0x18C]
  00170	e5832010	 str         r2, [r3, #0x10]

; 84   :         g_oalTimer.maxPeriodMSec = 1;

  00174	e59f2184	 ldr         r2, [pc, #0x184]
  00178	e3a03001	 mov         r3, #1
  0017c	e5823008	 str         r3, [r2, #8]

; 85   :         // ILT is active now        
; 86   :         g_oalILT.active = TRUE;

  00180	e59f2174	 ldr         r2, [pc, #0x174]
  00184	e3a03001	 mov         r3, #1
  00188	e5823000	 str         r3, [r2]

; 87   :         // We are done with critical part
; 88   :         INTERRUPTS_ENABLE(enabled);

  0018c	e59d0008	 ldr         r0, [sp, #8]
  00190	eb000000	 bl          INTERRUPTS_ENABLE

; 89   :         rc = TRUE;

  00194	e3a03001	 mov         r3, #1
  00198	e58d3000	 str         r3, [sp]

; 90   :         break;

  0019c	ea00004d	 b           |$LN6@OALIoCtlHa|
  001a0		 |$LN4@OALIoCtlHa|

; 91   : 
; 92   :     case ILTIMING_MSG_DISABLE:
; 93   :         // We don't want interrupt just now
; 94   :         enabled = INTERRUPTS_ENABLE(FALSE);

  001a0	e3a00000	 mov         r0, #0
  001a4	eb000000	 bl          INTERRUPTS_ENABLE
  001a8	e58d001c	 str         r0, [sp, #0x1C]
  001ac	e59d301c	 ldr         r3, [sp, #0x1C]
  001b0	e58d3008	 str         r3, [sp, #8]

; 95   :         // Restore original timer values
; 96   :         g_oalTimer.msecPerSysTick = g_ilt.msecPerSysTick;

  001b4	e59f3148	 ldr         r3, [pc, #0x148]
  001b8	e5932000	 ldr         r2, [r3]
  001bc	e59f313c	 ldr         r3, [pc, #0x13C]
  001c0	e583200c	 str         r2, [r3, #0xC]

; 97   :         g_oalTimer.countsPerSysTick = g_ilt.countsPerSysTick;

  001c4	e59f3138	 ldr         r3, [pc, #0x138]
  001c8	e5932004	 ldr         r2, [r3, #4]
  001cc	e59f312c	 ldr         r3, [pc, #0x12C]
  001d0	e5832010	 str         r2, [r3, #0x10]

; 98   :         g_oalTimer.maxPeriodMSec = g_ilt.maxPeriodMSec;

  001d4	e59f3128	 ldr         r3, [pc, #0x128]
  001d8	e5932008	 ldr         r2, [r3, #8]
  001dc	e59f311c	 ldr         r3, [pc, #0x11C]
  001e0	e5832008	 str         r2, [r3, #8]

; 99   :         // ITL is inactive
; 100  :         g_oalILT.active = FALSE;

  001e4	e59f2110	 ldr         r2, [pc, #0x110]
  001e8	e3a03000	 mov         r3, #0
  001ec	e5823000	 str         r3, [r2]

; 101  :         // We are done with critical part
; 102  :         INTERRUPTS_ENABLE(enabled);

  001f0	e59d0008	 ldr         r0, [sp, #8]
  001f4	eb000000	 bl          INTERRUPTS_ENABLE

; 103  :         rc = TRUE;

  001f8	e3a03001	 mov         r3, #1
  001fc	e58d3000	 str         r3, [sp]

; 104  :         break;

  00200	ea000034	 b           |$LN6@OALIoCtlHa|
  00204		 |$LN3@OALIoCtlHa|

; 105  : 
; 106  :     case ILTIMING_MSG_GET_TIMES:
; 107  :         pITM->dwIsrTime1 = g_oalILT.isrTime1;

  00204	e59d3004	 ldr         r3, [sp, #4]
  00208	e2832004	 add         r2, r3, #4
  0020c	e59f30e8	 ldr         r3, [pc, #0xE8]
  00210	e5933008	 ldr         r3, [r3, #8]
  00214	e5823000	 str         r3, [r2]

; 108  :         pITM->dwIsrTime2 = g_oalILT.isrTime2;

  00218	e59d3004	 ldr         r3, [sp, #4]
  0021c	e2832008	 add         r2, r3, #8
  00220	e59f30d4	 ldr         r3, [pc, #0xD4]
  00224	e593300c	 ldr         r3, [r3, #0xC]
  00228	e5823000	 str         r3, [r2]

; 109  :         pITM->wNumInterrupts = g_oalILT.interrupts;

  0022c	e59d3004	 ldr         r3, [sp, #4]
  00230	e2832002	 add         r2, r3, #2
  00234	e59f30c0	 ldr         r3, [pc, #0xC0]
  00238	e1d330b4	 ldrh        r3, [r3, #4]
  0023c	e1c230b0	 strh        r3, [r2]

; 110  :         pITM->dwSPC = g_oalILT.savedPC;

  00240	e59d3004	 ldr         r3, [sp, #4]
  00244	e283200c	 add         r2, r3, #0xC
  00248	e59f30ac	 ldr         r3, [pc, #0xAC]
  0024c	e5933010	 ldr         r3, [r3, #0x10]
  00250	e5823000	 str         r3, [r2]

; 111  :         pITM->dwFrequency = g_oalILT.counterSet;

  00254	e59d3004	 ldr         r3, [sp, #4]
  00258	e2832010	 add         r2, r3, #0x10
  0025c	e59f3098	 ldr         r3, [pc, #0x98]
  00260	e5933018	 ldr         r3, [r3, #0x18]
  00264	e5823000	 str         r3, [r2]

; 112  :         g_oalILT.interrupts = 0;

  00268	e59f208c	 ldr         r2, [pc, #0x8C]
  0026c	e3a03000	 mov         r3, #0
  00270	e1c230b4	 strh        r3, [r2, #4]

; 113  :         rc = TRUE;

  00274	e3a03001	 mov         r3, #1
  00278	e58d3000	 str         r3, [sp]

; 114  :         break;

  0027c	ea000015	 b           |$LN6@OALIoCtlHa|
  00280		 |$LN2@OALIoCtlHa|

; 115  : 
; 116  :     case ILTIMING_MSG_GET_PFN:
; 117  :         pITM->pfnPerfCountSinceTick = OALTimerCountsSinceSysTick;

  00280	e59d3004	 ldr         r3, [sp, #4]
  00284	e2832014	 add         r2, r3, #0x14
  00288	e59f3068	 ldr         r3, [pc, #0x68]
  0028c	e5823000	 str         r3, [r2]

; 118  :         rc = TRUE;

  00290	e3a03001	 mov         r3, #1
  00294	e58d3000	 str         r3, [sp]

; 119  :         break;

  00298	ea00000e	 b           |$LN6@OALIoCtlHa|
  0029c		 |$LN1@OALIoCtlHa|

; 120  : 
; 121  :     default:
; 122  :         // Error, didn't match any known parameters
; 123  :         NKSetLastError(ERROR_INVALID_PARAMETER);

  0029c	e3a00057	 mov         r0, #0x57
  002a0	eb000000	 bl          NKSetLastError

; 124  :         OALMSG(OAL_ERROR, (
; 125  :             L"ERROR: OALIoCtlHalILTiming: Invalid parameter\r\n"
; 126  :         ));

  002a4	e59f3048	 ldr         r3, [pc, #0x48]
  002a8	e5933440	 ldr         r3, [r3, #0x440]
  002ac	e3130001	 tst         r3, #1
  002b0	0a000004	 beq         |$LN15@OALIoCtlHa|
  002b4	e59f0034	 ldr         r0, [pc, #0x34]
  002b8	eb000000	 bl          NKDbgPrintfW
  002bc	e3a03001	 mov         r3, #1
  002c0	e58d3020	 str         r3, [sp, #0x20]
  002c4	ea000001	 b           |$LN16@OALIoCtlHa|
  002c8		 |$LN15@OALIoCtlHa|
  002c8	e3a03000	 mov         r3, #0
  002cc	e58d3020	 str         r3, [sp, #0x20]
  002d0		 |$LN16@OALIoCtlHa|

; 127  :         rc = FALSE;

  002d0	e3a03000	 mov         r3, #0
  002d4	e58d3000	 str         r3, [sp]
  002d8		 |$LN6@OALIoCtlHa|
  002d8		 |$cleanUp$43119|

; 128  :         break;
; 129  :     }
; 130  : 
; 131  : cleanUp:
; 132  :     return rc;

  002d8	e59d3000	 ldr         r3, [sp]
  002dc	e58d300c	 str         r3, [sp, #0xC]

; 133  : }

  002e0	e59d000c	 ldr         r0, [sp, #0xC]
  002e4	e28dd024	 add         sp, sp, #0x24
  002e8	e89d6000	 ldmia       sp, {sp, lr}
  002ec	e12fff1e	 bx          lr
  002f0		 |$LN26@OALIoCtlHa|
  002f0		 |$LN27@OALIoCtlHa|
  002f0	00000000	 DCD         |??_C@_1GA@HKIKBELC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAL?$AAT?$AAi?$AAm?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa@|
  002f4		 |$LN28@OALIoCtlHa|
  002f4	00000000	 DCD         |dpCurSettings|
  002f8		 |$LN29@OALIoCtlHa|
  002f8	00000000	 DCD         |OALTimerCountsSinceSysTick|
  002fc		 |$LN30@OALIoCtlHa|
  002fc	00000000	 DCD         |g_oalILT|
  00300		 |$LN31@OALIoCtlHa|
  00300	00000000	 DCD         |g_oalTimer|
  00304		 |$LN32@OALIoCtlHa|
  00304	00000000	 DCD         |g_ilt|
  00308		 |$M43152|

			 ENDP  ; |OALIoCtlHalILTiming|

	END
