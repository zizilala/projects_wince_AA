; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\BOOT\BLNK\format.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
|?upch@?1??NKwvsprintfW@@9@9| DCB "0", 0x0, "1", 0x0, "2", 0x0, "3", 0x0, "4"
	DCB	0x0, "5", 0x0, "6", 0x0, "7", 0x0, "8", 0x0, "9", 0x0, "A"
	DCB	0x0, "B", 0x0, "C", 0x0, "D", 0x0, "E", 0x0, "F", 0x0, 0x0
	DCB	0x0					; `NKwvsprintfW'::`2'::upch
	%	2
|?lowch@?1??NKwvsprintfW@@9@9| DCB "0", 0x0, "1", 0x0, "2", 0x0, "3", 0x0
	DCB	"4", 0x0, "5", 0x0, "6", 0x0, "7", 0x0, "8", 0x0, "9", 0x0
	DCB	"a", 0x0, "b", 0x0, "c", 0x0, "d", 0x0, "e", 0x0, "f", 0x0
	DCB	0x0, 0x0				; `NKwvsprintfW'::`2'::lowch

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1O@INIEDEDF@?$AA?$CI?$AAN?$AAU?$AAL?$AAL?$AA?$CJ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_06LHGEHABH@?$CINULL?$CJ?$AA@| [ DATA ] ; `string'
	EXPORT	|NKwvsprintfW|
	IMPORT	|__rt_udiv64by64|
	IMPORT	|__rt_urem64by64|

  00000			 AREA	 |.pdata|, PDATA
|$T43353| DCD	|$LN177@NKwvsprint|
	DCD	0x40047304
; File c:\wince600\platform\common\src\common\boot\blnk\format.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@INIEDEDF@?$AA?$CI?$AAN?$AAU?$AAL?$AAL?$AA?$CJ?$AA?$AA@| DCB "(", 0x0
	DCB	"N", 0x0, "U", 0x0, "L", 0x0, "L", 0x0, ")", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_06LHGEHABH@?$CINULL?$CJ?$AA@| DCB "(NULL)", 0x0	; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NKwvsprintfW| PROC

; 35   : ) {

  00000		 |$LN177@NKwvsprint|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd084	 sub         sp, sp, #0x84
  00010		 |$M43350|

; 36   :     static WCHAR upch[]  = L"0123456789ABCDEF";
; 37   :     static WCHAR lowch[] = L"0123456789abcdef";
; 38   :     enum { typeNone = 0, typeNumber, typeCh, typeString } type;
; 39   :     enum { modeNone = 0, modeH, modeL, modeX } mode;
; 40   :     BOOL padLeft, prefix, sign, upper;
; 41   :     INT32 width, precision, radix, chars;
; 42   :     WCHAR ch, fillCh;
; 43   :     LPWSTR szPos, szW;
; 44   :     LPSTR szC;
; 45   :     UINT64 value;
; 46   : 
; 47   : 
; 48   :     // First check input params
; 49   :     if (szBuffer == NULL || szFormat == NULL || maxChars < 1) return 0;

  00010	e59d308c	 ldr         r3, [sp, #0x8C]
  00014	e3530000	 cmp         r3, #0
  00018	0a000005	 beq         |$LN141@NKwvsprint|
  0001c	e59d3090	 ldr         r3, [sp, #0x90]
  00020	e3530000	 cmp         r3, #0
  00024	0a000002	 beq         |$LN141@NKwvsprint|
  00028	e59d3098	 ldr         r3, [sp, #0x98]
  0002c	e3530001	 cmp         r3, #1
  00030	aa000002	 bge         |$LN142@NKwvsprint|
  00034		 |$LN141@NKwvsprint|
  00034	e3a03000	 mov         r3, #0
  00038	e58d3044	 str         r3, [sp, #0x44]
  0003c	ea00045a	 b           |$LN143@NKwvsprint|
  00040		 |$LN142@NKwvsprint|

; 50   : 
; 51   :     // Set actual possition
; 52   :     szPos = szBuffer;

  00040	e59d308c	 ldr         r3, [sp, #0x8C]
  00044	e58d3034	 str         r3, [sp, #0x34]
  00048		 |$LN155@NKwvsprint|
  00048		 |$LN140@NKwvsprint|

; 53   :     
; 54   :     // While there is format strings
; 55   :     while (*szFormat != L'\0' && maxChars > 0) {

  00048	e59d3090	 ldr         r3, [sp, #0x90]
  0004c	e1d330b0	 ldrh        r3, [r3]
  00050	e3530000	 cmp         r3, #0
  00054	0a00044c	 beq         |$LN139@NKwvsprint|
  00058	e59d3098	 ldr         r3, [sp, #0x98]
  0005c	e3530000	 cmp         r3, #0
  00060	da000449	 ble         |$LN139@NKwvsprint|

; 56   : 
; 57   :         // If it is other than format prefix, print it and move to next one
; 58   :         if (*szFormat != L'%') {

  00064	e59d3090	 ldr         r3, [sp, #0x90]
  00068	e1d330b0	 ldrh        r3, [r3]
  0006c	e3530025	 cmp         r3, #0x25
  00070	0a000011	 beq         |$LN138@NKwvsprint|

; 59   :             if (--maxChars <= 0) goto cleanUp;

  00074	e59d3098	 ldr         r3, [sp, #0x98]
  00078	e2433001	 sub         r3, r3, #1
  0007c	e58d3098	 str         r3, [sp, #0x98]
  00080	e59d3098	 ldr         r3, [sp, #0x98]
  00084	e3530000	 cmp         r3, #0
  00088	ca000000	 bgt         |$LN137@NKwvsprint|
  0008c	ea00043e	 b           |$cleanUp$43044|
  00090		 |$LN137@NKwvsprint|

; 60   :             *szPos++ = *szFormat++;

  00090	e59d3090	 ldr         r3, [sp, #0x90]
  00094	e1d320b0	 ldrh        r2, [r3]
  00098	e59d3034	 ldr         r3, [sp, #0x34]
  0009c	e1c320b0	 strh        r2, [r3]
  000a0	e59d3034	 ldr         r3, [sp, #0x34]
  000a4	e2833002	 add         r3, r3, #2
  000a8	e58d3034	 str         r3, [sp, #0x34]
  000ac	e59d3090	 ldr         r3, [sp, #0x90]
  000b0	e2833002	 add         r3, r3, #2
  000b4	e58d3090	 str         r3, [sp, #0x90]

; 61   :             continue;

  000b8	eaffffe2	 b           |$LN140@NKwvsprint|
  000bc		 |$LN138@NKwvsprint|

; 62   :         }
; 63   : 
; 64   :         // Set flags to default values        
; 65   :         padLeft = FALSE;

  000bc	e3a03000	 mov         r3, #0
  000c0	e58d3020	 str         r3, [sp, #0x20]

; 66   :         prefix = FALSE;

  000c4	e3a03000	 mov         r3, #0
  000c8	e58d301c	 str         r3, [sp, #0x1C]

; 67   :         sign = FALSE;

  000cc	e3a03000	 mov         r3, #0
  000d0	e58d302c	 str         r3, [sp, #0x2C]

; 68   :         upper = FALSE;

  000d4	e3a03000	 mov         r3, #0
  000d8	e58d3028	 str         r3, [sp, #0x28]

; 69   :         fillCh = L' ';

  000dc	e3a03020	 mov         r3, #0x20
  000e0	e1cd30b0	 strh        r3, [sp]

; 70   :         width = 0;

  000e4	e3a03000	 mov         r3, #0
  000e8	e58d3030	 str         r3, [sp, #0x30]

; 71   :         precision = -1;

  000ec	e3e03000	 mvn         r3, #0
  000f0	e58d3038	 str         r3, [sp, #0x38]

; 72   :         type = typeNone;

  000f4	e3a03000	 mov         r3, #0
  000f8	e58d3024	 str         r3, [sp, #0x24]

; 73   :         mode = modeNone;

  000fc	e3a03000	 mov         r3, #0
  00100	e58d3018	 str         r3, [sp, #0x18]
  00104		 |$LN136@NKwvsprint|

; 74   : 
; 75   :         // read pad left and prefix flags
; 76   :         while (*++szFormat != L'\0') {

  00104	e59d3090	 ldr         r3, [sp, #0x90]
  00108	e2833002	 add         r3, r3, #2
  0010c	e58d3090	 str         r3, [sp, #0x90]
  00110	e59d3090	 ldr         r3, [sp, #0x90]
  00114	e1d330b0	 ldrh        r3, [r3]
  00118	e3530000	 cmp         r3, #0
  0011c	0a00000f	 beq         |$LN135@NKwvsprint|

; 77   :             if (*szFormat == L'-') {

  00120	e59d3090	 ldr         r3, [sp, #0x90]
  00124	e1d330b0	 ldrh        r3, [r3]
  00128	e353002d	 cmp         r3, #0x2D
  0012c	1a000002	 bne         |$LN134@NKwvsprint|

; 78   :                 padLeft = TRUE;

  00130	e3a03001	 mov         r3, #1
  00134	e58d3020	 str         r3, [sp, #0x20]
  00138	ea000007	 b           |$LN133@NKwvsprint|
  0013c		 |$LN134@NKwvsprint|

; 79   :             } else if (*szFormat == L'#') {

  0013c	e59d3090	 ldr         r3, [sp, #0x90]
  00140	e1d330b0	 ldrh        r3, [r3]
  00144	e3530023	 cmp         r3, #0x23
  00148	1a000002	 bne         |$LN132@NKwvsprint|

; 80   :                 prefix = TRUE;

  0014c	e3a03001	 mov         r3, #1
  00150	e58d301c	 str         r3, [sp, #0x1C]

; 81   :             } else {

  00154	ea000000	 b           |$LN131@NKwvsprint|
  00158		 |$LN132@NKwvsprint|

; 82   :                 break;

  00158	ea000000	 b           |$LN135@NKwvsprint|
  0015c		 |$LN131@NKwvsprint|
  0015c		 |$LN133@NKwvsprint|

; 83   :             }
; 84   :         }

  0015c	eaffffe8	 b           |$LN136@NKwvsprint|
  00160		 |$LN135@NKwvsprint|

; 85   : 
; 86   :         // find fill character
; 87   :         if (*szFormat == L'0') {

  00160	e59d3090	 ldr         r3, [sp, #0x90]
  00164	e1d330b0	 ldrh        r3, [r3]
  00168	e3530030	 cmp         r3, #0x30
  0016c	1a000004	 bne         |$LN130@NKwvsprint|

; 88   :             fillCh = L'0';

  00170	e3a03030	 mov         r3, #0x30
  00174	e1cd30b0	 strh        r3, [sp]

; 89   :             szFormat++;

  00178	e59d3090	 ldr         r3, [sp, #0x90]
  0017c	e2833002	 add         r3, r3, #2
  00180	e58d3090	 str         r3, [sp, #0x90]
  00184		 |$LN130@NKwvsprint|

; 90   :         }
; 91   :             
; 92   :         // read the width specification 
; 93   :         GetFormatValue(&szFormat, &width, &pArgList);

  00184	e28d2094	 add         r2, sp, #0x94
  00188	e28d1030	 add         r1, sp, #0x30
  0018c	e28d0090	 add         r0, sp, #0x90
  00190	eb000000	 bl          GetFormatValue

; 94   : 
; 95   :         // read the precision
; 96   :         if (*szFormat == L'.') {

  00194	e59d3090	 ldr         r3, [sp, #0x90]
  00198	e1d330b0	 ldrh        r3, [r3]
  0019c	e353002e	 cmp         r3, #0x2E
  001a0	1a000006	 bne         |$LN129@NKwvsprint|

; 97   :             szFormat++;

  001a4	e59d3090	 ldr         r3, [sp, #0x90]
  001a8	e2833002	 add         r3, r3, #2
  001ac	e58d3090	 str         r3, [sp, #0x90]

; 98   :             GetFormatValue(&szFormat, &precision, &pArgList);

  001b0	e28d2094	 add         r2, sp, #0x94
  001b4	e28d1038	 add         r1, sp, #0x38
  001b8	e28d0090	 add         r0, sp, #0x90
  001bc	eb000000	 bl          GetFormatValue
  001c0		 |$LN129@NKwvsprint|

; 99   :         }                
; 100  : 
; 101  :         // get the operand size
; 102  :         if (*szFormat == L'l') {

  001c0	e59d3090	 ldr         r3, [sp, #0x90]
  001c4	e1d330b0	 ldrh        r3, [r3]
  001c8	e353006c	 cmp         r3, #0x6C
  001cc	1a000005	 bne         |$LN128@NKwvsprint|

; 103  :             mode = modeL;

  001d0	e3a03002	 mov         r3, #2
  001d4	e58d3018	 str         r3, [sp, #0x18]

; 104  :             szFormat++;

  001d8	e59d3090	 ldr         r3, [sp, #0x90]
  001dc	e2833002	 add         r3, r3, #2
  001e0	e58d3090	 str         r3, [sp, #0x90]
  001e4	ea00003a	 b           |$LN127@NKwvsprint|
  001e8		 |$LN128@NKwvsprint|

; 105  :         } else if (*szFormat == L'w') {

  001e8	e59d3090	 ldr         r3, [sp, #0x90]
  001ec	e1d330b0	 ldrh        r3, [r3]
  001f0	e3530077	 cmp         r3, #0x77
  001f4	1a000005	 bne         |$LN126@NKwvsprint|

; 106  :             mode = modeL;

  001f8	e3a03002	 mov         r3, #2
  001fc	e58d3018	 str         r3, [sp, #0x18]

; 107  :             szFormat++;

  00200	e59d3090	 ldr         r3, [sp, #0x90]
  00204	e2833002	 add         r3, r3, #2
  00208	e58d3090	 str         r3, [sp, #0x90]

; 108  :         } else if (

  0020c	ea000030	 b           |$LN125@NKwvsprint|
  00210		 |$LN126@NKwvsprint|

; 109  :             szFormat[0] == L'I' && szFormat[1] == L'3' && szFormat[2] == L'2'
; 110  :         ) {                

  00210	e59d3090	 ldr         r3, [sp, #0x90]
  00214	e1d330b0	 ldrh        r3, [r3]
  00218	e3530049	 cmp         r3, #0x49
  0021c	1a00000f	 bne         |$LN124@NKwvsprint|
  00220	e59d3090	 ldr         r3, [sp, #0x90]
  00224	e2833002	 add         r3, r3, #2
  00228	e1d330b0	 ldrh        r3, [r3]
  0022c	e3530033	 cmp         r3, #0x33
  00230	1a00000a	 bne         |$LN124@NKwvsprint|
  00234	e59d3090	 ldr         r3, [sp, #0x90]
  00238	e2833004	 add         r3, r3, #4
  0023c	e1d330b0	 ldrh        r3, [r3]
  00240	e3530032	 cmp         r3, #0x32
  00244	1a000005	 bne         |$LN124@NKwvsprint|

; 111  :             mode = modeL;

  00248	e3a03002	 mov         r3, #2
  0024c	e58d3018	 str         r3, [sp, #0x18]

; 112  :             szFormat += 3;

  00250	e59d3090	 ldr         r3, [sp, #0x90]
  00254	e2833006	 add         r3, r3, #6
  00258	e58d3090	 str         r3, [sp, #0x90]
  0025c	ea00001c	 b           |$LN123@NKwvsprint|
  00260		 |$LN124@NKwvsprint|

; 113  :         } else if (*szFormat == L'h') {

  00260	e59d3090	 ldr         r3, [sp, #0x90]
  00264	e1d330b0	 ldrh        r3, [r3]
  00268	e3530068	 cmp         r3, #0x68
  0026c	1a000005	 bne         |$LN122@NKwvsprint|

; 114  :             mode = modeH;

  00270	e3a03001	 mov         r3, #1
  00274	e58d3018	 str         r3, [sp, #0x18]

; 115  :             szFormat++;

  00278	e59d3090	 ldr         r3, [sp, #0x90]
  0027c	e2833002	 add         r3, r3, #2
  00280	e58d3090	 str         r3, [sp, #0x90]

; 116  :         } else if (

  00284	ea000012	 b           |$LN121@NKwvsprint|
  00288		 |$LN122@NKwvsprint|

; 117  :             szFormat[0] == L'I' && szFormat[1] == L'6' && szFormat[2] == L'4'
; 118  :         ) {

  00288	e59d3090	 ldr         r3, [sp, #0x90]
  0028c	e1d330b0	 ldrh        r3, [r3]
  00290	e3530049	 cmp         r3, #0x49
  00294	1a00000e	 bne         |$LN120@NKwvsprint|
  00298	e59d3090	 ldr         r3, [sp, #0x90]
  0029c	e2833002	 add         r3, r3, #2
  002a0	e1d330b0	 ldrh        r3, [r3]
  002a4	e3530036	 cmp         r3, #0x36
  002a8	1a000009	 bne         |$LN120@NKwvsprint|
  002ac	e59d3090	 ldr         r3, [sp, #0x90]
  002b0	e2833004	 add         r3, r3, #4
  002b4	e1d330b0	 ldrh        r3, [r3]
  002b8	e3530034	 cmp         r3, #0x34
  002bc	1a000004	 bne         |$LN120@NKwvsprint|

; 119  :             mode = modeX;

  002c0	e3a03003	 mov         r3, #3
  002c4	e58d3018	 str         r3, [sp, #0x18]

; 120  :             szFormat += 3;

  002c8	e59d3090	 ldr         r3, [sp, #0x90]
  002cc	e2833006	 add         r3, r3, #6
  002d0	e58d3090	 str         r3, [sp, #0x90]
  002d4		 |$LN120@NKwvsprint|
  002d4		 |$LN121@NKwvsprint|
  002d4		 |$LN123@NKwvsprint|
  002d4		 |$LN125@NKwvsprint|
  002d4		 |$LN127@NKwvsprint|

; 121  :         }
; 122  : 
; 123  :         // break if there is unexpected format string end
; 124  :         if (*szFormat == L'\0') break;

  002d4	e59d3090	 ldr         r3, [sp, #0x90]
  002d8	e1d330b0	 ldrh        r3, [r3]
  002dc	e3530000	 cmp         r3, #0
  002e0	1a000000	 bne         |$LN119@NKwvsprint|
  002e4	ea0003a8	 b           |$LN139@NKwvsprint|
  002e8		 |$LN119@NKwvsprint|

; 125  :             
; 126  :         switch (*szFormat) {

  002e8	e59d3090	 ldr         r3, [sp, #0x90]
  002ec	e1d330b0	 ldrh        r3, [r3]
  002f0	e58d3048	 str         r3, [sp, #0x48]
  002f4	e59d3048	 ldr         r3, [sp, #0x48]
  002f8	e3530064	 cmp         r3, #0x64
  002fc	ca000016	 bgt         |$LN145@NKwvsprint|
  00300	e59d3048	 ldr         r3, [sp, #0x48]
  00304	e3530064	 cmp         r3, #0x64
  00308	0a00002e	 beq         |$LN116@NKwvsprint|
  0030c	e59d3048	 ldr         r3, [sp, #0x48]
  00310	e3530058	 cmp         r3, #0x58
  00314	ca000009	 bgt         |$LN146@NKwvsprint|
  00318	e59d3048	 ldr         r3, [sp, #0x48]
  0031c	e3530058	 cmp         r3, #0x58
  00320	0a000034	 beq         |$LN113@NKwvsprint|
  00324	e59d3048	 ldr         r3, [sp, #0x48]
  00328	e3530043	 cmp         r3, #0x43
  0032c	0a000045	 beq         |$LN108@NKwvsprint|
  00330	e59d3048	 ldr         r3, [sp, #0x48]
  00334	e3530053	 cmp         r3, #0x53
  00338	0a00004f	 beq         |$LN105@NKwvsprint|
  0033c	ea00005e	 b           |$LN101@NKwvsprint|
  00340		 |$LN146@NKwvsprint|
  00340	e59d3048	 ldr         r3, [sp, #0x48]
  00344	e3530061	 cmp         r3, #0x61
  00348	0a000046	 beq         |$LN106@NKwvsprint|
  0034c	e59d3048	 ldr         r3, [sp, #0x48]
  00350	e3530063	 cmp         r3, #0x63
  00354	0a000033	 beq         |$LN110@NKwvsprint|
  00358	ea000057	 b           |$LN101@NKwvsprint|
  0035c		 |$LN145@NKwvsprint|
  0035c	e59d3048	 ldr         r3, [sp, #0x48]
  00360	e2433069	 sub         r3, r3, #0x69
  00364	e58d3048	 str         r3, [sp, #0x48]
  00368	e59d3048	 ldr         r3, [sp, #0x48]
  0036c	e353000f	 cmp         r3, #0xF
  00370	8a000051	 bhi         |$LN101@NKwvsprint|
  00374	e59d2048	 ldr         r2, [sp, #0x48]
  00378	e1a03102	 mov         r3, r2, lsl #2
  0037c	e083300f	 add         r3, r3, pc
  00380	e5933004	 ldr         r3, [r3, #4]
  00384	e08ff003	 add         pc, pc, r3
  00388		 |$LN158@NKwvsprint|
  00388		 |$LN157@NKwvsprint|
  00388		 |$LN159@NKwvsprint|
  00388	0000003c	 DCD         0x3c
  0038c		 |$LN160@NKwvsprint|
  0038c	00000130	 DCD         0x130
  00390		 |$LN161@NKwvsprint|
  00390	00000130	 DCD         0x130
  00394		 |$LN162@NKwvsprint|
  00394	00000130	 DCD         0x130
  00398		 |$LN163@NKwvsprint|
  00398	00000130	 DCD         0x130
  0039c		 |$LN164@NKwvsprint|
  0039c	00000130	 DCD         0x130
  003a0		 |$LN165@NKwvsprint|
  003a0	00000130	 DCD         0x130
  003a4		 |$LN166@NKwvsprint|
  003a4	00000074	 DCD         0x74
  003a8		 |$LN167@NKwvsprint|
  003a8	00000130	 DCD         0x130
  003ac		 |$LN168@NKwvsprint|
  003ac	00000130	 DCD         0x130
  003b0		 |$LN169@NKwvsprint|
  003b0	00000110	 DCD         0x110
  003b4		 |$LN170@NKwvsprint|
  003b4	00000130	 DCD         0x130
  003b8		 |$LN171@NKwvsprint|
  003b8	00000044	 DCD         0x44
  003bc		 |$LN172@NKwvsprint|
  003bc	00000130	 DCD         0x130
  003c0		 |$LN173@NKwvsprint|
  003c0	00000130	 DCD         0x130
  003c4		 |$LN174@NKwvsprint|
  003c4	00000074	 DCD         0x74
  003c8		 |$LN116@NKwvsprint|

; 127  : 
; 128  :         case L'i':
; 129  :         case L'd':
; 130  :             sign = TRUE;

  003c8	e3a03001	 mov         r3, #1
  003cc	e58d302c	 str         r3, [sp, #0x2C]
  003d0		 |$LN115@NKwvsprint|

; 131  :         case L'u':
; 132  :             radix = 10;

  003d0	e3a0300a	 mov         r3, #0xA
  003d4	e58d3010	 str         r3, [sp, #0x10]

; 133  :             type = typeNumber;

  003d8	e3a03001	 mov         r3, #1
  003dc	e58d3024	 str         r3, [sp, #0x24]

; 134  :             if (mode == modeNone) mode = modeL;

  003e0	e59d3018	 ldr         r3, [sp, #0x18]
  003e4	e3530000	 cmp         r3, #0
  003e8	1a000001	 bne         |$LN114@NKwvsprint|
  003ec	e3a03002	 mov         r3, #2
  003f0	e58d3018	 str         r3, [sp, #0x18]
  003f4		 |$LN114@NKwvsprint|

; 135  :             break;

  003f4	ea00003e	 b           |$LN117@NKwvsprint|
  003f8		 |$LN113@NKwvsprint|

; 136  : 
; 137  :         case L'X':
; 138  :             upper = TRUE;

  003f8	e3a03001	 mov         r3, #1
  003fc	e58d3028	 str         r3, [sp, #0x28]
  00400		 |$LN112@NKwvsprint|

; 139  :         case L'p':
; 140  :         case L'x':
; 141  :             radix = 16;

  00400	e3a03010	 mov         r3, #0x10
  00404	e58d3010	 str         r3, [sp, #0x10]

; 142  :             type = typeNumber;

  00408	e3a03001	 mov         r3, #1
  0040c	e58d3024	 str         r3, [sp, #0x24]

; 143  :             if (mode == modeNone) mode = modeL;

  00410	e59d3018	 ldr         r3, [sp, #0x18]
  00414	e3530000	 cmp         r3, #0
  00418	1a000001	 bne         |$LN111@NKwvsprint|
  0041c	e3a03002	 mov         r3, #2
  00420	e58d3018	 str         r3, [sp, #0x18]
  00424		 |$LN111@NKwvsprint|

; 144  :             break;

  00424	ea000032	 b           |$LN117@NKwvsprint|
  00428		 |$LN110@NKwvsprint|

; 145  : 
; 146  :         case L'c':
; 147  :             if (mode == modeNone) mode = modeL;

  00428	e59d3018	 ldr         r3, [sp, #0x18]
  0042c	e3530000	 cmp         r3, #0
  00430	1a000001	 bne         |$LN109@NKwvsprint|
  00434	e3a03002	 mov         r3, #2
  00438	e58d3018	 str         r3, [sp, #0x18]
  0043c		 |$LN109@NKwvsprint|

; 148  :             type = typeCh;

  0043c	e3a03002	 mov         r3, #2
  00440	e58d3024	 str         r3, [sp, #0x24]

; 149  :             break;

  00444	ea00002a	 b           |$LN117@NKwvsprint|
  00448		 |$LN108@NKwvsprint|

; 150  :                 
; 151  :         case L'C':
; 152  :             if (mode == modeNone) mode = modeH;

  00448	e59d3018	 ldr         r3, [sp, #0x18]
  0044c	e3530000	 cmp         r3, #0
  00450	1a000001	 bne         |$LN107@NKwvsprint|
  00454	e3a03001	 mov         r3, #1
  00458	e58d3018	 str         r3, [sp, #0x18]
  0045c		 |$LN107@NKwvsprint|

; 153  :             type = typeCh;

  0045c	e3a03002	 mov         r3, #2
  00460	e58d3024	 str         r3, [sp, #0x24]

; 154  :             break;

  00464	ea000022	 b           |$LN117@NKwvsprint|
  00468		 |$LN106@NKwvsprint|

; 155  : 
; 156  :         case L'a':
; 157  :             mode = modeH;

  00468	e3a03001	 mov         r3, #1
  0046c	e58d3018	 str         r3, [sp, #0x18]

; 158  :             type = typeString;

  00470	e3a03003	 mov         r3, #3
  00474	e58d3024	 str         r3, [sp, #0x24]

; 159  :             break;

  00478	ea00001d	 b           |$LN117@NKwvsprint|
  0047c		 |$LN105@NKwvsprint|

; 160  :             
; 161  :         case L'S':
; 162  :             if (mode == modeNone) mode = modeH;

  0047c	e59d3018	 ldr         r3, [sp, #0x18]
  00480	e3530000	 cmp         r3, #0
  00484	1a000001	 bne         |$LN104@NKwvsprint|
  00488	e3a03001	 mov         r3, #1
  0048c	e58d3018	 str         r3, [sp, #0x18]
  00490		 |$LN104@NKwvsprint|

; 163  :             type = typeString;

  00490	e3a03003	 mov         r3, #3
  00494	e58d3024	 str         r3, [sp, #0x24]

; 164  :             break;

  00498	ea000015	 b           |$LN117@NKwvsprint|
  0049c		 |$LN103@NKwvsprint|

; 165  : 
; 166  :         case 's':
; 167  :             if (mode == modeNone) mode = modeL;

  0049c	e59d3018	 ldr         r3, [sp, #0x18]
  004a0	e3530000	 cmp         r3, #0
  004a4	1a000001	 bne         |$LN102@NKwvsprint|
  004a8	e3a03002	 mov         r3, #2
  004ac	e58d3018	 str         r3, [sp, #0x18]
  004b0		 |$LN102@NKwvsprint|

; 168  :             type = typeString;

  004b0	e3a03003	 mov         r3, #3
  004b4	e58d3024	 str         r3, [sp, #0x24]

; 169  :             break;

  004b8	ea00000d	 b           |$LN117@NKwvsprint|
  004bc		 |$LN101@NKwvsprint|

; 170  : 
; 171  :         default:
; 172  :             if (--maxChars <= 0) goto cleanUp;

  004bc	e59d3098	 ldr         r3, [sp, #0x98]
  004c0	e2433001	 sub         r3, r3, #1
  004c4	e58d3098	 str         r3, [sp, #0x98]
  004c8	e59d3098	 ldr         r3, [sp, #0x98]
  004cc	e3530000	 cmp         r3, #0
  004d0	ca000000	 bgt         |$LN100@NKwvsprint|
  004d4	ea00032c	 b           |$cleanUp$43044|
  004d8		 |$LN100@NKwvsprint|

; 173  :             *szPos++ = *szFormat;

  004d8	e59d3090	 ldr         r3, [sp, #0x90]
  004dc	e1d320b0	 ldrh        r2, [r3]
  004e0	e59d3034	 ldr         r3, [sp, #0x34]
  004e4	e1c320b0	 strh        r2, [r3]
  004e8	e59d3034	 ldr         r3, [sp, #0x34]
  004ec	e2833002	 add         r3, r3, #2
  004f0	e58d3034	 str         r3, [sp, #0x34]
  004f4		 |$LN117@NKwvsprint|

; 174  :         }
; 175  : 
; 176  :         // Move to next format character
; 177  :         szFormat++;

  004f4	e59d3090	 ldr         r3, [sp, #0x90]
  004f8	e2833002	 add         r3, r3, #2
  004fc	e58d3090	 str         r3, [sp, #0x90]

; 178  : 
; 179  :         switch (type) {

  00500	e59d3024	 ldr         r3, [sp, #0x24]
  00504	e58d304c	 str         r3, [sp, #0x4C]
  00508	e59d304c	 ldr         r3, [sp, #0x4C]
  0050c	e3530001	 cmp         r3, #1
  00510	0a000006	 beq         |$LN97@NKwvsprint|
  00514	e59d304c	 ldr         r3, [sp, #0x4C]
  00518	e3530002	 cmp         r3, #2
  0051c	0a0001d9	 beq         |$LN47@NKwvsprint|
  00520	e59d304c	 ldr         r3, [sp, #0x4C]
  00524	e3530003	 cmp         r3, #3
  00528	0a0001fd	 beq         |$LN41@NKwvsprint|
  0052c	ea000315	 b           |$LN98@NKwvsprint|
  00530		 |$LN97@NKwvsprint|

; 180  :         case typeNumber:
; 181  :             // Special cases to act like MSC v5.10
; 182  :             if (padLeft || precision >= 0) fillCh = L' ';

  00530	e59d3020	 ldr         r3, [sp, #0x20]
  00534	e3530000	 cmp         r3, #0
  00538	1a000002	 bne         |$LN95@NKwvsprint|
  0053c	e59d3038	 ldr         r3, [sp, #0x38]
  00540	e3530000	 cmp         r3, #0
  00544	ba000001	 blt         |$LN96@NKwvsprint|
  00548		 |$LN95@NKwvsprint|
  00548	e3a03020	 mov         r3, #0x20
  0054c	e1cd30b0	 strh        r3, [sp]
  00550		 |$LN96@NKwvsprint|

; 183  :             // Fix possible prefix
; 184  :             if (radix != 16) prefix = FALSE;

  00550	e59d3010	 ldr         r3, [sp, #0x10]
  00554	e3530010	 cmp         r3, #0x10
  00558	0a000001	 beq         |$LN94@NKwvsprint|
  0055c	e3a03000	 mov         r3, #0
  00560	e58d301c	 str         r3, [sp, #0x1C]
  00564		 |$LN94@NKwvsprint|

; 185  :             // Depending on mode obtain value
; 186  :             if (mode == modeH) {

  00564	e59d3018	 ldr         r3, [sp, #0x18]
  00568	e3530001	 cmp         r3, #1
  0056c	1a00001c	 bne         |$LN93@NKwvsprint|

; 187  :                 if (sign) {

  00570	e59d302c	 ldr         r3, [sp, #0x2C]
  00574	e3530000	 cmp         r3, #0
  00578	0a00000c	 beq         |$LN92@NKwvsprint|

; 188  :                     value = (INT64)va_arg(pArgList, INT16);

  0057c	e59d3094	 ldr         r3, [sp, #0x94]
  00580	e2833004	 add         r3, r3, #4
  00584	e58d3094	 str         r3, [sp, #0x94]
  00588	e59d3094	 ldr         r3, [sp, #0x94]
  0058c	e2433004	 sub         r3, r3, #4
  00590	e1d330f0	 ldrsh       r3, [r3]
  00594	e58d3050	 str         r3, [sp, #0x50]
  00598	e59d2050	 ldr         r2, [sp, #0x50]
  0059c	e59d3050	 ldr         r3, [sp, #0x50]
  005a0	e1a03fc3	 mov         r3, r3, asr #31
  005a4	e58d2004	 str         r2, [sp, #4]
  005a8	e58d3008	 str         r3, [sp, #8]

; 189  :                 } else {

  005ac	ea00000b	 b           |$LN91@NKwvsprint|
  005b0		 |$LN92@NKwvsprint|

; 190  :                     value = (UINT64)va_arg(pArgList, UINT16);

  005b0	e59d3094	 ldr         r3, [sp, #0x94]
  005b4	e2833004	 add         r3, r3, #4
  005b8	e58d3094	 str         r3, [sp, #0x94]
  005bc	e59d3094	 ldr         r3, [sp, #0x94]
  005c0	e2433004	 sub         r3, r3, #4
  005c4	e1d330b0	 ldrh        r3, [r3]
  005c8	e58d3054	 str         r3, [sp, #0x54]
  005cc	e59d2054	 ldr         r2, [sp, #0x54]
  005d0	e59d3054	 ldr         r3, [sp, #0x54]
  005d4	e1a03fc3	 mov         r3, r3, asr #31
  005d8	e58d2004	 str         r2, [sp, #4]
  005dc	e58d3008	 str         r3, [sp, #8]
  005e0		 |$LN91@NKwvsprint|

; 191  :                 }                    

  005e0	ea00002d	 b           |$LN90@NKwvsprint|
  005e4		 |$LN93@NKwvsprint|

; 192  :             } else if (mode == modeL) {

  005e4	e59d3018	 ldr         r3, [sp, #0x18]
  005e8	e3530002	 cmp         r3, #2
  005ec	1a000019	 bne         |$LN89@NKwvsprint|

; 193  :                 if (sign) {

  005f0	e59d302c	 ldr         r3, [sp, #0x2C]
  005f4	e3530000	 cmp         r3, #0
  005f8	0a00000c	 beq         |$LN88@NKwvsprint|

; 194  :                     value = (INT64)va_arg(pArgList, INT32);

  005fc	e59d3094	 ldr         r3, [sp, #0x94]
  00600	e2833004	 add         r3, r3, #4
  00604	e58d3094	 str         r3, [sp, #0x94]
  00608	e59d3094	 ldr         r3, [sp, #0x94]
  0060c	e2433004	 sub         r3, r3, #4
  00610	e5933000	 ldr         r3, [r3]
  00614	e58d3058	 str         r3, [sp, #0x58]
  00618	e59d2058	 ldr         r2, [sp, #0x58]
  0061c	e59d3058	 ldr         r3, [sp, #0x58]
  00620	e1a03fc3	 mov         r3, r3, asr #31
  00624	e58d2004	 str         r2, [sp, #4]
  00628	e58d3008	 str         r3, [sp, #8]

; 195  :                 } else {

  0062c	ea000008	 b           |$LN87@NKwvsprint|
  00630		 |$LN88@NKwvsprint|

; 196  :                     value = (UINT64)va_arg(pArgList, UINT32);

  00630	e59d3094	 ldr         r3, [sp, #0x94]
  00634	e2833004	 add         r3, r3, #4
  00638	e58d3094	 str         r3, [sp, #0x94]
  0063c	e59d3094	 ldr         r3, [sp, #0x94]
  00640	e2433004	 sub         r3, r3, #4
  00644	e5933000	 ldr         r3, [r3]
  00648	e58d3004	 str         r3, [sp, #4]
  0064c	e3a03000	 mov         r3, #0
  00650	e58d3008	 str         r3, [sp, #8]
  00654		 |$LN87@NKwvsprint|

; 197  :                 }                    

  00654	ea000010	 b           |$LN86@NKwvsprint|
  00658		 |$LN89@NKwvsprint|

; 198  :             } else if (mode == modeX) {

  00658	e59d3018	 ldr         r3, [sp, #0x18]
  0065c	e3530003	 cmp         r3, #3
  00660	1a00000c	 bne         |$LN85@NKwvsprint|

; 199  :                 value = va_arg(pArgList, UINT64);

  00664	e59d3094	 ldr         r3, [sp, #0x94]
  00668	e2833008	 add         r3, r3, #8
  0066c	e58d3094	 str         r3, [sp, #0x94]
  00670	e59d3094	 ldr         r3, [sp, #0x94]
  00674	e2433008	 sub         r3, r3, #8
  00678	e58d305c	 str         r3, [sp, #0x5C]
  0067c	e59d305c	 ldr         r3, [sp, #0x5C]
  00680	e5933000	 ldr         r3, [r3]
  00684	e58d3004	 str         r3, [sp, #4]
  00688	e59d305c	 ldr         r3, [sp, #0x5C]
  0068c	e5933004	 ldr         r3, [r3, #4]
  00690	e58d3008	 str         r3, [sp, #8]

; 200  :             } else {

  00694	ea000000	 b           |$LN84@NKwvsprint|
  00698		 |$LN85@NKwvsprint|

; 201  :                 goto cleanUp;

  00698	ea0002bb	 b           |$cleanUp$43044|
  0069c		 |$LN84@NKwvsprint|
  0069c		 |$LN86@NKwvsprint|
  0069c		 |$LN90@NKwvsprint|

; 202  :             }
; 203  :             // Should sign be printed?
; 204  :             if (sign && (INT64)value < 0) {

  0069c	e59d302c	 ldr         r3, [sp, #0x2C]
  006a0	e3530000	 cmp         r3, #0
  006a4	0a000013	 beq         |$LN83@NKwvsprint|
  006a8	e59d3004	 ldr         r3, [sp, #4]
  006ac	e58d3060	 str         r3, [sp, #0x60]
  006b0	e59d3008	 ldr         r3, [sp, #8]
  006b4	e58d3064	 str         r3, [sp, #0x64]
  006b8	e59d3060	 ldr         r3, [sp, #0x60]
  006bc	e58d3068	 str         r3, [sp, #0x68]
  006c0	e59d3064	 ldr         r3, [sp, #0x64]
  006c4	e3530000	 cmp         r3, #0
  006c8	ca00000a	 bgt         |$LN83@NKwvsprint|
  006cc	ba000002	 blt         |$LN156@NKwvsprint|
  006d0	e59d3068	 ldr         r3, [sp, #0x68]
  006d4	e3530000	 cmp         r3, #0
  006d8	2a000006	 bcs         |$LN83@NKwvsprint|
  006dc		 |$LN156@NKwvsprint|

; 205  :                 (INT64)value = -(INT64)value;

  006dc	e59d2004	 ldr         r2, [sp, #4]
  006e0	e59d3008	 ldr         r3, [sp, #8]
  006e4	e2722000	 rsbs        r2, r2, #0
  006e8	e2e33000	 rsc         r3, r3, #0
  006ec	e58d2004	 str         r2, [sp, #4]
  006f0	e58d3008	 str         r3, [sp, #8]

; 206  :             } else {

  006f4	ea000001	 b           |$LN82@NKwvsprint|
  006f8		 |$LN83@NKwvsprint|

; 207  :                 sign = FALSE;

  006f8	e3a03000	 mov         r3, #0
  006fc	e58d302c	 str         r3, [sp, #0x2C]
  00700		 |$LN82@NKwvsprint|

; 208  :             }
; 209  :             // Start with reverse string
; 210  :             szW = szPos;

  00700	e59d3034	 ldr         r3, [sp, #0x34]
  00704	e58d300c	 str         r3, [sp, #0xC]

; 211  :             chars = 0;

  00708	e3a03000	 mov         r3, #0
  0070c	e58d3040	 str         r3, [sp, #0x40]
  00710		 |$LN81@NKwvsprint|

; 212  :             do {
; 213  :                 if (--maxChars <= 0) goto cleanUp;

  00710	e59d3098	 ldr         r3, [sp, #0x98]
  00714	e2433001	 sub         r3, r3, #1
  00718	e58d3098	 str         r3, [sp, #0x98]
  0071c	e59d3098	 ldr         r3, [sp, #0x98]
  00720	e3530000	 cmp         r3, #0
  00724	ca000000	 bgt         |$LN78@NKwvsprint|
  00728	ea000297	 b           |$cleanUp$43044|
  0072c		 |$LN78@NKwvsprint|

; 214  :                 *szW++ = upper ? upch[value%radix] : lowch[value%radix];

  0072c	e59d3028	 ldr         r3, [sp, #0x28]
  00730	e3530000	 cmp         r3, #0
  00734	0a00000b	 beq         |$LN147@NKwvsprint|
  00738	e59d2010	 ldr         r2, [sp, #0x10]
  0073c	e59d3010	 ldr         r3, [sp, #0x10]
  00740	e1a03fc3	 mov         r3, r3, asr #31
  00744	e59d0004	 ldr         r0, [sp, #4]
  00748	e59d1008	 ldr         r1, [sp, #8]
  0074c	eb000000	 bl          __rt_urem64by64
  00750	e1a02080	 mov         r2, r0, lsl #1
  00754	e59f3a6c	 ldr         r3, [pc, #0xA6C]
  00758	e0833002	 add         r3, r3, r2
  0075c	e1d330b0	 ldrh        r3, [r3]
  00760	e58d306c	 str         r3, [sp, #0x6C]
  00764	ea00000a	 b           |$LN148@NKwvsprint|
  00768		 |$LN147@NKwvsprint|
  00768	e59d2010	 ldr         r2, [sp, #0x10]
  0076c	e59d3010	 ldr         r3, [sp, #0x10]
  00770	e1a03fc3	 mov         r3, r3, asr #31
  00774	e59d0004	 ldr         r0, [sp, #4]
  00778	e59d1008	 ldr         r1, [sp, #8]
  0077c	eb000000	 bl          __rt_urem64by64
  00780	e1a02080	 mov         r2, r0, lsl #1
  00784	e59f3a38	 ldr         r3, [pc, #0xA38]
  00788	e0833002	 add         r3, r3, r2
  0078c	e1d330b0	 ldrh        r3, [r3]
  00790	e58d306c	 str         r3, [sp, #0x6C]
  00794		 |$LN148@NKwvsprint|
  00794	e59d306c	 ldr         r3, [sp, #0x6C]
  00798	e1a02803	 mov         r2, r3, lsl #16
  0079c	e1a02822	 mov         r2, r2, lsr #16
  007a0	e59d300c	 ldr         r3, [sp, #0xC]
  007a4	e1c320b0	 strh        r2, [r3]
  007a8	e59d300c	 ldr         r3, [sp, #0xC]
  007ac	e2833002	 add         r3, r3, #2
  007b0	e58d300c	 str         r3, [sp, #0xC]

; 215  :                 chars++;

  007b4	e59d3040	 ldr         r3, [sp, #0x40]
  007b8	e2833001	 add         r3, r3, #1
  007bc	e58d3040	 str         r3, [sp, #0x40]

; 216  :             } while ((value /= radix) != 0 && maxChars > 0);

  007c0	e59d2010	 ldr         r2, [sp, #0x10]
  007c4	e59d3010	 ldr         r3, [sp, #0x10]
  007c8	e1a03fc3	 mov         r3, r3, asr #31
  007cc	e59d0004	 ldr         r0, [sp, #4]
  007d0	e59d1008	 ldr         r1, [sp, #8]
  007d4	eb000000	 bl          __rt_udiv64by64
  007d8	e58d0004	 str         r0, [sp, #4]
  007dc	e58d1008	 str         r1, [sp, #8]
  007e0	e59d3004	 ldr         r3, [sp, #4]
  007e4	e58d3070	 str         r3, [sp, #0x70]
  007e8	e59d3008	 ldr         r3, [sp, #8]
  007ec	e58d3074	 str         r3, [sp, #0x74]
  007f0	e59d2074	 ldr         r2, [sp, #0x74]
  007f4	e59d3070	 ldr         r3, [sp, #0x70]
  007f8	e1933002	 orrs        r3, r3, r2
  007fc	0a000002	 beq         |$LN77@NKwvsprint|
  00800	e59d3098	 ldr         r3, [sp, #0x98]
  00804	e3530000	 cmp         r3, #0
  00808	caffffc0	 bgt         |$LN81@NKwvsprint|
  0080c		 |$LN77@NKwvsprint|

; 217  :             // Fix sizes
; 218  :             width -= chars;

  0080c	e59d2030	 ldr         r2, [sp, #0x30]
  00810	e59d3040	 ldr         r3, [sp, #0x40]
  00814	e0423003	 sub         r3, r2, r3
  00818	e58d3030	 str         r3, [sp, #0x30]

; 219  :             precision -= chars;

  0081c	e59d2038	 ldr         r2, [sp, #0x38]
  00820	e59d3040	 ldr         r3, [sp, #0x40]
  00824	e0423003	 sub         r3, r2, r3
  00828	e58d3038	 str         r3, [sp, #0x38]

; 220  :             if (precision > 0) width -= precision;

  0082c	e59d3038	 ldr         r3, [sp, #0x38]
  00830	e3530000	 cmp         r3, #0
  00834	da000003	 ble         |$LN76@NKwvsprint|
  00838	e59d2030	 ldr         r2, [sp, #0x30]
  0083c	e59d3038	 ldr         r3, [sp, #0x38]
  00840	e0423003	 sub         r3, r2, r3
  00844	e58d3030	 str         r3, [sp, #0x30]
  00848		 |$LN76@NKwvsprint|
  00848		 |$LN75@NKwvsprint|

; 221  :             // Fill to the field precision
; 222  :             while (precision-- > 0) {

  00848	e59d3038	 ldr         r3, [sp, #0x38]
  0084c	e3530000	 cmp         r3, #0
  00850	e59d3038	 ldr         r3, [sp, #0x38]
  00854	e2433001	 sub         r3, r3, #1
  00858	e58d3038	 str         r3, [sp, #0x38]
  0085c	da00000d	 ble         |$LN74@NKwvsprint|

; 223  :                 if (--maxChars <= 0) goto cleanUp;

  00860	e59d3098	 ldr         r3, [sp, #0x98]
  00864	e2433001	 sub         r3, r3, #1
  00868	e58d3098	 str         r3, [sp, #0x98]
  0086c	e59d3098	 ldr         r3, [sp, #0x98]
  00870	e3530000	 cmp         r3, #0
  00874	ca000000	 bgt         |$LN73@NKwvsprint|
  00878	ea000243	 b           |$cleanUp$43044|
  0087c		 |$LN73@NKwvsprint|

; 224  :                 *szW++ = L'0';

  0087c	e59d200c	 ldr         r2, [sp, #0xC]
  00880	e3a03030	 mov         r3, #0x30
  00884	e1c230b0	 strh        r3, [r2]
  00888	e59d300c	 ldr         r3, [sp, #0xC]
  0088c	e2833002	 add         r3, r3, #2
  00890	e58d300c	 str         r3, [sp, #0xC]

; 225  :             }

  00894	eaffffeb	 b           |$LN75@NKwvsprint|
  00898		 |$LN74@NKwvsprint|

; 226  :             if (width > 0 && !padLeft) {

  00898	e59d3030	 ldr         r3, [sp, #0x30]
  0089c	e3530000	 cmp         r3, #0
  008a0	da0000a2	 ble         |$LN72@NKwvsprint|
  008a4	e59d3020	 ldr         r3, [sp, #0x20]
  008a8	e3530000	 cmp         r3, #0
  008ac	1a00009f	 bne         |$LN72@NKwvsprint|

; 227  :                 // If we're filling with spaces, put sign first
; 228  :                 if (fillCh != L'0') {

  008b0	e1dd30b0	 ldrh        r3, [sp]
  008b4	e3530030	 cmp         r3, #0x30
  008b8	0a000040	 beq         |$LN71@NKwvsprint|

; 229  :                     if (sign) {

  008bc	e59d302c	 ldr         r3, [sp, #0x2C]
  008c0	e3530000	 cmp         r3, #0
  008c4	0a000011	 beq         |$LN70@NKwvsprint|

; 230  :                         if (--maxChars <= 0) goto cleanUp;

  008c8	e59d3098	 ldr         r3, [sp, #0x98]
  008cc	e2433001	 sub         r3, r3, #1
  008d0	e58d3098	 str         r3, [sp, #0x98]
  008d4	e59d3098	 ldr         r3, [sp, #0x98]
  008d8	e3530000	 cmp         r3, #0
  008dc	ca000000	 bgt         |$LN69@NKwvsprint|
  008e0	ea000229	 b           |$cleanUp$43044|
  008e4		 |$LN69@NKwvsprint|

; 231  :                         *szW++ = L'-';

  008e4	e59d200c	 ldr         r2, [sp, #0xC]
  008e8	e3a0302d	 mov         r3, #0x2D
  008ec	e1c230b0	 strh        r3, [r2]
  008f0	e59d300c	 ldr         r3, [sp, #0xC]
  008f4	e2833002	 add         r3, r3, #2
  008f8	e58d300c	 str         r3, [sp, #0xC]

; 232  :                         width--;

  008fc	e59d3030	 ldr         r3, [sp, #0x30]
  00900	e2433001	 sub         r3, r3, #1
  00904	e58d3030	 str         r3, [sp, #0x30]

; 233  :                         sign = FALSE;

  00908	e3a03000	 mov         r3, #0
  0090c	e58d302c	 str         r3, [sp, #0x2C]
  00910		 |$LN70@NKwvsprint|

; 234  :                     }
; 235  :                     if (prefix && radix == 16) {

  00910	e59d301c	 ldr         r3, [sp, #0x1C]
  00914	e3530000	 cmp         r3, #0
  00918	0a000028	 beq         |$LN68@NKwvsprint|
  0091c	e59d3010	 ldr         r3, [sp, #0x10]
  00920	e3530010	 cmp         r3, #0x10
  00924	1a000025	 bne         |$LN68@NKwvsprint|

; 236  :                         if (--maxChars <= 0) goto cleanUp;

  00928	e59d3098	 ldr         r3, [sp, #0x98]
  0092c	e2433001	 sub         r3, r3, #1
  00930	e58d3098	 str         r3, [sp, #0x98]
  00934	e59d3098	 ldr         r3, [sp, #0x98]
  00938	e3530000	 cmp         r3, #0
  0093c	ca000000	 bgt         |$LN67@NKwvsprint|
  00940	ea000211	 b           |$cleanUp$43044|
  00944		 |$LN67@NKwvsprint|

; 237  :                         *szW++ = upper ? L'X' : L'x';

  00944	e59d3028	 ldr         r3, [sp, #0x28]
  00948	e3530000	 cmp         r3, #0
  0094c	0a000002	 beq         |$LN149@NKwvsprint|
  00950	e3a03058	 mov         r3, #0x58
  00954	e58d3078	 str         r3, [sp, #0x78]
  00958	ea000001	 b           |$LN150@NKwvsprint|
  0095c		 |$LN149@NKwvsprint|
  0095c	e3a03078	 mov         r3, #0x78
  00960	e58d3078	 str         r3, [sp, #0x78]
  00964		 |$LN150@NKwvsprint|
  00964	e59d3078	 ldr         r3, [sp, #0x78]
  00968	e1a02803	 mov         r2, r3, lsl #16
  0096c	e1a02822	 mov         r2, r2, lsr #16
  00970	e59d300c	 ldr         r3, [sp, #0xC]
  00974	e1c320b0	 strh        r2, [r3]
  00978	e59d300c	 ldr         r3, [sp, #0xC]
  0097c	e2833002	 add         r3, r3, #2
  00980	e58d300c	 str         r3, [sp, #0xC]

; 238  :                         if (--maxChars <= 0) goto cleanUp;

  00984	e59d3098	 ldr         r3, [sp, #0x98]
  00988	e2433001	 sub         r3, r3, #1
  0098c	e58d3098	 str         r3, [sp, #0x98]
  00990	e59d3098	 ldr         r3, [sp, #0x98]
  00994	e3530000	 cmp         r3, #0
  00998	ca000000	 bgt         |$LN66@NKwvsprint|
  0099c	ea0001fa	 b           |$cleanUp$43044|
  009a0		 |$LN66@NKwvsprint|

; 239  :                         *szW++ = L'0';

  009a0	e59d200c	 ldr         r2, [sp, #0xC]
  009a4	e3a03030	 mov         r3, #0x30
  009a8	e1c230b0	 strh        r3, [r2]
  009ac	e59d300c	 ldr         r3, [sp, #0xC]
  009b0	e2833002	 add         r3, r3, #2
  009b4	e58d300c	 str         r3, [sp, #0xC]

; 240  :                         prefix = FALSE;

  009b8	e3a03000	 mov         r3, #0
  009bc	e58d301c	 str         r3, [sp, #0x1C]
  009c0		 |$LN68@NKwvsprint|
  009c0		 |$LN71@NKwvsprint|

; 241  :                     }
; 242  :                 }
; 243  :                 // Leave place for sign
; 244  :                 if (sign) width--;

  009c0	e59d302c	 ldr         r3, [sp, #0x2C]
  009c4	e3530000	 cmp         r3, #0
  009c8	0a000002	 beq         |$LN65@NKwvsprint|
  009cc	e59d3030	 ldr         r3, [sp, #0x30]
  009d0	e2433001	 sub         r3, r3, #1
  009d4	e58d3030	 str         r3, [sp, #0x30]
  009d8		 |$LN65@NKwvsprint|
  009d8		 |$LN64@NKwvsprint|

; 245  :                 // Fill to the field width
; 246  :                 while (width-- > 0) {

  009d8	e59d3030	 ldr         r3, [sp, #0x30]
  009dc	e3530000	 cmp         r3, #0
  009e0	e59d3030	 ldr         r3, [sp, #0x30]
  009e4	e2433001	 sub         r3, r3, #1
  009e8	e58d3030	 str         r3, [sp, #0x30]
  009ec	da00000d	 ble         |$LN63@NKwvsprint|

; 247  :                     if (--maxChars <= 0) goto cleanUp;

  009f0	e59d3098	 ldr         r3, [sp, #0x98]
  009f4	e2433001	 sub         r3, r3, #1
  009f8	e58d3098	 str         r3, [sp, #0x98]
  009fc	e59d3098	 ldr         r3, [sp, #0x98]
  00a00	e3530000	 cmp         r3, #0
  00a04	ca000000	 bgt         |$LN62@NKwvsprint|
  00a08	ea0001df	 b           |$cleanUp$43044|
  00a0c		 |$LN62@NKwvsprint|

; 248  :                     *szW++ = fillCh;

  00a0c	e1dd20b0	 ldrh        r2, [sp]
  00a10	e59d300c	 ldr         r3, [sp, #0xC]
  00a14	e1c320b0	 strh        r2, [r3]
  00a18	e59d300c	 ldr         r3, [sp, #0xC]
  00a1c	e2833002	 add         r3, r3, #2
  00a20	e58d300c	 str         r3, [sp, #0xC]

; 249  :                 }

  00a24	eaffffeb	 b           |$LN64@NKwvsprint|
  00a28		 |$LN63@NKwvsprint|

; 250  :                 // Still have sign?
; 251  :                 if (sign) {

  00a28	e59d302c	 ldr         r3, [sp, #0x2C]
  00a2c	e3530000	 cmp         r3, #0
  00a30	0a00000e	 beq         |$LN61@NKwvsprint|

; 252  :                     if (--maxChars <= 0) goto cleanUp;

  00a34	e59d3098	 ldr         r3, [sp, #0x98]
  00a38	e2433001	 sub         r3, r3, #1
  00a3c	e58d3098	 str         r3, [sp, #0x98]
  00a40	e59d3098	 ldr         r3, [sp, #0x98]
  00a44	e3530000	 cmp         r3, #0
  00a48	ca000000	 bgt         |$LN60@NKwvsprint|
  00a4c	ea0001ce	 b           |$cleanUp$43044|
  00a50		 |$LN60@NKwvsprint|

; 253  :                     *szW++ = L'-';

  00a50	e59d200c	 ldr         r2, [sp, #0xC]
  00a54	e3a0302d	 mov         r3, #0x2D
  00a58	e1c230b0	 strh        r3, [r2]
  00a5c	e59d300c	 ldr         r3, [sp, #0xC]
  00a60	e2833002	 add         r3, r3, #2
  00a64	e58d300c	 str         r3, [sp, #0xC]

; 254  :                     sign = FALSE;

  00a68	e3a03000	 mov         r3, #0
  00a6c	e58d302c	 str         r3, [sp, #0x2C]
  00a70		 |$LN61@NKwvsprint|

; 255  :                 }
; 256  :                 // Or prefix?
; 257  :                 if (prefix) {

  00a70	e59d301c	 ldr         r3, [sp, #0x1C]
  00a74	e3530000	 cmp         r3, #0
  00a78	0a000025	 beq         |$LN59@NKwvsprint|

; 258  :                     if (--maxChars <= 0) goto cleanUp;

  00a7c	e59d3098	 ldr         r3, [sp, #0x98]
  00a80	e2433001	 sub         r3, r3, #1
  00a84	e58d3098	 str         r3, [sp, #0x98]
  00a88	e59d3098	 ldr         r3, [sp, #0x98]
  00a8c	e3530000	 cmp         r3, #0
  00a90	ca000000	 bgt         |$LN58@NKwvsprint|
  00a94	ea0001bc	 b           |$cleanUp$43044|
  00a98		 |$LN58@NKwvsprint|

; 259  :                     *szW++ = upper ? L'X' : L'x';

  00a98	e59d3028	 ldr         r3, [sp, #0x28]
  00a9c	e3530000	 cmp         r3, #0
  00aa0	0a000002	 beq         |$LN151@NKwvsprint|
  00aa4	e3a03058	 mov         r3, #0x58
  00aa8	e58d307c	 str         r3, [sp, #0x7C]
  00aac	ea000001	 b           |$LN152@NKwvsprint|
  00ab0		 |$LN151@NKwvsprint|
  00ab0	e3a03078	 mov         r3, #0x78
  00ab4	e58d307c	 str         r3, [sp, #0x7C]
  00ab8		 |$LN152@NKwvsprint|
  00ab8	e59d307c	 ldr         r3, [sp, #0x7C]
  00abc	e1a02803	 mov         r2, r3, lsl #16
  00ac0	e1a02822	 mov         r2, r2, lsr #16
  00ac4	e59d300c	 ldr         r3, [sp, #0xC]
  00ac8	e1c320b0	 strh        r2, [r3]
  00acc	e59d300c	 ldr         r3, [sp, #0xC]
  00ad0	e2833002	 add         r3, r3, #2
  00ad4	e58d300c	 str         r3, [sp, #0xC]

; 260  :                     if (--maxChars <= 0) goto cleanUp;

  00ad8	e59d3098	 ldr         r3, [sp, #0x98]
  00adc	e2433001	 sub         r3, r3, #1
  00ae0	e58d3098	 str         r3, [sp, #0x98]
  00ae4	e59d3098	 ldr         r3, [sp, #0x98]
  00ae8	e3530000	 cmp         r3, #0
  00aec	ca000000	 bgt         |$LN57@NKwvsprint|
  00af0	ea0001a5	 b           |$cleanUp$43044|
  00af4		 |$LN57@NKwvsprint|

; 261  :                     *szW++ = L'0';

  00af4	e59d200c	 ldr         r2, [sp, #0xC]
  00af8	e3a03030	 mov         r3, #0x30
  00afc	e1c230b0	 strh        r3, [r2]
  00b00	e59d300c	 ldr         r3, [sp, #0xC]
  00b04	e2833002	 add         r3, r3, #2
  00b08	e58d300c	 str         r3, [sp, #0xC]

; 262  :                     prefix = FALSE;

  00b0c	e3a03000	 mov         r3, #0
  00b10	e58d301c	 str         r3, [sp, #0x1C]
  00b14		 |$LN59@NKwvsprint|

; 263  :                 }
; 264  :                 // Now reverse the string in place
; 265  :                 Reverse(szPos, szW - 1);

  00b14	e59d300c	 ldr         r3, [sp, #0xC]
  00b18	e2431002	 sub         r1, r3, #2
  00b1c	e59d0034	 ldr         r0, [sp, #0x34]
  00b20	eb000000	 bl          Reverse

; 266  :                 szPos = szW;

  00b24	e59d300c	 ldr         r3, [sp, #0xC]
  00b28	e58d3034	 str         r3, [sp, #0x34]

; 267  :             } else {

  00b2c	ea000054	 b           |$LN56@NKwvsprint|
  00b30		 |$LN72@NKwvsprint|

; 268  :                 // Add the sign character
; 269  :                 if (sign) {

  00b30	e59d302c	 ldr         r3, [sp, #0x2C]
  00b34	e3530000	 cmp         r3, #0
  00b38	0a00000e	 beq         |$LN55@NKwvsprint|

; 270  :                     if (--maxChars <= 0) goto cleanUp;

  00b3c	e59d3098	 ldr         r3, [sp, #0x98]
  00b40	e2433001	 sub         r3, r3, #1
  00b44	e58d3098	 str         r3, [sp, #0x98]
  00b48	e59d3098	 ldr         r3, [sp, #0x98]
  00b4c	e3530000	 cmp         r3, #0
  00b50	ca000000	 bgt         |$LN54@NKwvsprint|
  00b54	ea00018c	 b           |$cleanUp$43044|
  00b58		 |$LN54@NKwvsprint|

; 271  :                     *szW++ = L'-';

  00b58	e59d200c	 ldr         r2, [sp, #0xC]
  00b5c	e3a0302d	 mov         r3, #0x2D
  00b60	e1c230b0	 strh        r3, [r2]
  00b64	e59d300c	 ldr         r3, [sp, #0xC]
  00b68	e2833002	 add         r3, r3, #2
  00b6c	e58d300c	 str         r3, [sp, #0xC]

; 272  :                     sign = FALSE;

  00b70	e3a03000	 mov         r3, #0
  00b74	e58d302c	 str         r3, [sp, #0x2C]
  00b78		 |$LN55@NKwvsprint|

; 273  :                 }
; 274  :                 if (prefix) {

  00b78	e59d301c	 ldr         r3, [sp, #0x1C]
  00b7c	e3530000	 cmp         r3, #0
  00b80	0a000025	 beq         |$LN53@NKwvsprint|

; 275  :                     if (--maxChars <= 0) goto cleanUp;

  00b84	e59d3098	 ldr         r3, [sp, #0x98]
  00b88	e2433001	 sub         r3, r3, #1
  00b8c	e58d3098	 str         r3, [sp, #0x98]
  00b90	e59d3098	 ldr         r3, [sp, #0x98]
  00b94	e3530000	 cmp         r3, #0
  00b98	ca000000	 bgt         |$LN52@NKwvsprint|
  00b9c	ea00017a	 b           |$cleanUp$43044|
  00ba0		 |$LN52@NKwvsprint|

; 276  :                     *szW++ = upper ? L'X' : L'x';

  00ba0	e59d3028	 ldr         r3, [sp, #0x28]
  00ba4	e3530000	 cmp         r3, #0
  00ba8	0a000002	 beq         |$LN153@NKwvsprint|
  00bac	e3a03058	 mov         r3, #0x58
  00bb0	e58d3080	 str         r3, [sp, #0x80]
  00bb4	ea000001	 b           |$LN154@NKwvsprint|
  00bb8		 |$LN153@NKwvsprint|
  00bb8	e3a03078	 mov         r3, #0x78
  00bbc	e58d3080	 str         r3, [sp, #0x80]
  00bc0		 |$LN154@NKwvsprint|
  00bc0	e59d3080	 ldr         r3, [sp, #0x80]
  00bc4	e1a02803	 mov         r2, r3, lsl #16
  00bc8	e1a02822	 mov         r2, r2, lsr #16
  00bcc	e59d300c	 ldr         r3, [sp, #0xC]
  00bd0	e1c320b0	 strh        r2, [r3]
  00bd4	e59d300c	 ldr         r3, [sp, #0xC]
  00bd8	e2833002	 add         r3, r3, #2
  00bdc	e58d300c	 str         r3, [sp, #0xC]

; 277  :                     if (--maxChars <= 0) goto cleanUp;

  00be0	e59d3098	 ldr         r3, [sp, #0x98]
  00be4	e2433001	 sub         r3, r3, #1
  00be8	e58d3098	 str         r3, [sp, #0x98]
  00bec	e59d3098	 ldr         r3, [sp, #0x98]
  00bf0	e3530000	 cmp         r3, #0
  00bf4	ca000000	 bgt         |$LN51@NKwvsprint|
  00bf8	ea000163	 b           |$cleanUp$43044|
  00bfc		 |$LN51@NKwvsprint|

; 278  :                     *szW++ = L'0';

  00bfc	e59d200c	 ldr         r2, [sp, #0xC]
  00c00	e3a03030	 mov         r3, #0x30
  00c04	e1c230b0	 strh        r3, [r2]
  00c08	e59d300c	 ldr         r3, [sp, #0xC]
  00c0c	e2833002	 add         r3, r3, #2
  00c10	e58d300c	 str         r3, [sp, #0xC]

; 279  :                     prefix = FALSE;

  00c14	e3a03000	 mov         r3, #0
  00c18	e58d301c	 str         r3, [sp, #0x1C]
  00c1c		 |$LN53@NKwvsprint|

; 280  :                 }
; 281  :                 // Reverse the string in place
; 282  :                 Reverse(szPos, szW - 1);

  00c1c	e59d300c	 ldr         r3, [sp, #0xC]
  00c20	e2431002	 sub         r1, r3, #2
  00c24	e59d0034	 ldr         r0, [sp, #0x34]
  00c28	eb000000	 bl          Reverse

; 283  :                 szPos = szW;

  00c2c	e59d300c	 ldr         r3, [sp, #0xC]
  00c30	e58d3034	 str         r3, [sp, #0x34]
  00c34		 |$LN50@NKwvsprint|

; 284  :                 // Pad to the right of the string in case left aligned
; 285  :                 while (width-- > 0) {

  00c34	e59d3030	 ldr         r3, [sp, #0x30]
  00c38	e3530000	 cmp         r3, #0
  00c3c	e59d3030	 ldr         r3, [sp, #0x30]
  00c40	e2433001	 sub         r3, r3, #1
  00c44	e58d3030	 str         r3, [sp, #0x30]
  00c48	da00000d	 ble         |$LN49@NKwvsprint|

; 286  :                     if (--maxChars <= 0) goto cleanUp;

  00c4c	e59d3098	 ldr         r3, [sp, #0x98]
  00c50	e2433001	 sub         r3, r3, #1
  00c54	e58d3098	 str         r3, [sp, #0x98]
  00c58	e59d3098	 ldr         r3, [sp, #0x98]
  00c5c	e3530000	 cmp         r3, #0
  00c60	ca000000	 bgt         |$LN48@NKwvsprint|
  00c64	ea000148	 b           |$cleanUp$43044|
  00c68		 |$LN48@NKwvsprint|

; 287  :                     *szPos++ = fillCh;

  00c68	e1dd20b0	 ldrh        r2, [sp]
  00c6c	e59d3034	 ldr         r3, [sp, #0x34]
  00c70	e1c320b0	 strh        r2, [r3]
  00c74	e59d3034	 ldr         r3, [sp, #0x34]
  00c78	e2833002	 add         r3, r3, #2
  00c7c	e58d3034	 str         r3, [sp, #0x34]

; 288  :                 }                    

  00c80	eaffffeb	 b           |$LN50@NKwvsprint|
  00c84		 |$LN49@NKwvsprint|
  00c84		 |$LN56@NKwvsprint|

; 289  :             }
; 290  :             break;

  00c84	ea00013f	 b           |$LN98@NKwvsprint|
  00c88		 |$LN47@NKwvsprint|

; 291  : 
; 292  :         case typeCh:
; 293  :             // Depending on size obtain value
; 294  :             if (mode == modeH) {

  00c88	e59d3018	 ldr         r3, [sp, #0x18]
  00c8c	e3530001	 cmp         r3, #1
  00c90	1a000009	 bne         |$LN46@NKwvsprint|

; 295  :                 ch = (WCHAR)va_arg(pArgList, CHAR);

  00c94	e59d3094	 ldr         r3, [sp, #0x94]
  00c98	e2833004	 add         r3, r3, #4
  00c9c	e58d3094	 str         r3, [sp, #0x94]
  00ca0	e59d3094	 ldr         r3, [sp, #0x94]
  00ca4	e2433004	 sub         r3, r3, #4
  00ca8	e1d330d0	 ldrsb       r3, [r3]
  00cac	e1a03803	 mov         r3, r3, lsl #16
  00cb0	e1a03823	 mov         r3, r3, lsr #16
  00cb4	e1cd33bc	 strh        r3, [sp, #0x3C]
  00cb8	ea00000b	 b           |$LN45@NKwvsprint|
  00cbc		 |$LN46@NKwvsprint|

; 296  :             } else if (mode == modeL) {

  00cbc	e59d3018	 ldr         r3, [sp, #0x18]
  00cc0	e3530002	 cmp         r3, #2
  00cc4	1a000007	 bne         |$LN44@NKwvsprint|

; 297  :                 ch = va_arg(pArgList, WCHAR);

  00cc8	e59d3094	 ldr         r3, [sp, #0x94]
  00ccc	e2833004	 add         r3, r3, #4
  00cd0	e58d3094	 str         r3, [sp, #0x94]
  00cd4	e59d3094	 ldr         r3, [sp, #0x94]
  00cd8	e2433004	 sub         r3, r3, #4
  00cdc	e1d330b0	 ldrh        r3, [r3]
  00ce0	e1cd33bc	 strh        r3, [sp, #0x3C]

; 298  :             } else {

  00ce4	ea000000	 b           |$LN43@NKwvsprint|
  00ce8		 |$LN44@NKwvsprint|

; 299  :                 goto cleanUp;

  00ce8	ea000127	 b           |$cleanUp$43044|
  00cec		 |$LN43@NKwvsprint|
  00cec		 |$LN45@NKwvsprint|

; 300  :             }
; 301  :             if (--maxChars <= 0) goto cleanUp;

  00cec	e59d3098	 ldr         r3, [sp, #0x98]
  00cf0	e2433001	 sub         r3, r3, #1
  00cf4	e58d3098	 str         r3, [sp, #0x98]
  00cf8	e59d3098	 ldr         r3, [sp, #0x98]
  00cfc	e3530000	 cmp         r3, #0
  00d00	ca000000	 bgt         |$LN42@NKwvsprint|
  00d04	ea000120	 b           |$cleanUp$43044|
  00d08		 |$LN42@NKwvsprint|

; 302  :             *szPos++ = ch;

  00d08	e1dd23bc	 ldrh        r2, [sp, #0x3C]
  00d0c	e59d3034	 ldr         r3, [sp, #0x34]
  00d10	e1c320b0	 strh        r2, [r3]
  00d14	e59d3034	 ldr         r3, [sp, #0x34]
  00d18	e2833002	 add         r3, r3, #2
  00d1c	e58d3034	 str         r3, [sp, #0x34]

; 303  :             break;

  00d20	ea000118	 b           |$LN98@NKwvsprint|
  00d24		 |$LN41@NKwvsprint|

; 304  : 
; 305  :         case typeString:
; 306  :             if (mode == modeH) {

  00d24	e59d3018	 ldr         r3, [sp, #0x18]
  00d28	e3530001	 cmp         r3, #1
  00d2c	1a000089	 bne         |$LN40@NKwvsprint|

; 307  :                 // It is ascii string
; 308  :                 szC = va_arg(pArgList, LPSTR);

  00d30	e59d3094	 ldr         r3, [sp, #0x94]
  00d34	e2833004	 add         r3, r3, #4
  00d38	e58d3094	 str         r3, [sp, #0x94]
  00d3c	e59d3094	 ldr         r3, [sp, #0x94]
  00d40	e2433004	 sub         r3, r3, #4
  00d44	e5933000	 ldr         r3, [r3]
  00d48	e58d3014	 str         r3, [sp, #0x14]

; 309  :                 if (szC == NULL) szC = "(NULL)";

  00d4c	e59d3014	 ldr         r3, [sp, #0x14]
  00d50	e3530000	 cmp         r3, #0
  00d54	1a000001	 bne         |$LN39@NKwvsprint|
  00d58	e59f3460	 ldr         r3, [pc, #0x460]
  00d5c	e58d3014	 str         r3, [sp, #0x14]
  00d60		 |$LN39@NKwvsprint|

; 310  :                 // Get string size
; 311  :                 chars = 0;

  00d60	e3a03000	 mov         r3, #0
  00d64	e58d3040	 str         r3, [sp, #0x40]
  00d68		 |$LN38@NKwvsprint|

; 312  :                 while (chars < maxChars && szC[chars] != '\0') chars++;

  00d68	e59d2040	 ldr         r2, [sp, #0x40]
  00d6c	e59d3098	 ldr         r3, [sp, #0x98]
  00d70	e1520003	 cmp         r2, r3
  00d74	aa000009	 bge         |$LN37@NKwvsprint|
  00d78	e59d2014	 ldr         r2, [sp, #0x14]
  00d7c	e59d3040	 ldr         r3, [sp, #0x40]
  00d80	e0823003	 add         r3, r2, r3
  00d84	e1d330d0	 ldrsb       r3, [r3]
  00d88	e3530000	 cmp         r3, #0
  00d8c	0a000003	 beq         |$LN37@NKwvsprint|
  00d90	e59d3040	 ldr         r3, [sp, #0x40]
  00d94	e2833001	 add         r3, r3, #1
  00d98	e58d3040	 str         r3, [sp, #0x40]
  00d9c	eafffff1	 b           |$LN38@NKwvsprint|
  00da0		 |$LN37@NKwvsprint|

; 313  :                 // Fix string size
; 314  :                 if (precision >= 0 && chars > precision) chars = precision;

  00da0	e59d3038	 ldr         r3, [sp, #0x38]
  00da4	e3530000	 cmp         r3, #0
  00da8	ba000005	 blt         |$LN36@NKwvsprint|
  00dac	e59d2040	 ldr         r2, [sp, #0x40]
  00db0	e59d3038	 ldr         r3, [sp, #0x38]
  00db4	e1520003	 cmp         r2, r3
  00db8	da000001	 ble         |$LN36@NKwvsprint|
  00dbc	e59d3038	 ldr         r3, [sp, #0x38]
  00dc0	e58d3040	 str         r3, [sp, #0x40]
  00dc4		 |$LN36@NKwvsprint|

; 315  :                 width -= chars;

  00dc4	e59d2030	 ldr         r2, [sp, #0x30]
  00dc8	e59d3040	 ldr         r3, [sp, #0x40]
  00dcc	e0423003	 sub         r3, r2, r3
  00dd0	e58d3030	 str         r3, [sp, #0x30]

; 316  :                 if (padLeft) {

  00dd4	e59d3020	 ldr         r3, [sp, #0x20]
  00dd8	e3530000	 cmp         r3, #0
  00ddc	0a00002e	 beq         |$LN35@NKwvsprint|
  00de0		 |$LN34@NKwvsprint|

; 317  :                     while (chars-- > 0) {

  00de0	e59d3040	 ldr         r3, [sp, #0x40]
  00de4	e3530000	 cmp         r3, #0
  00de8	e59d3040	 ldr         r3, [sp, #0x40]
  00dec	e2433001	 sub         r3, r3, #1
  00df0	e58d3040	 str         r3, [sp, #0x40]
  00df4	da000013	 ble         |$LN33@NKwvsprint|

; 318  :                         if (--maxChars <= 0) goto cleanUp;

  00df8	e59d3098	 ldr         r3, [sp, #0x98]
  00dfc	e2433001	 sub         r3, r3, #1
  00e00	e58d3098	 str         r3, [sp, #0x98]
  00e04	e59d3098	 ldr         r3, [sp, #0x98]
  00e08	e3530000	 cmp         r3, #0
  00e0c	ca000000	 bgt         |$LN32@NKwvsprint|
  00e10	ea0000dd	 b           |$cleanUp$43044|
  00e14		 |$LN32@NKwvsprint|

; 319  :                         *szPos++ = (WCHAR)*szC++;

  00e14	e59d3014	 ldr         r3, [sp, #0x14]
  00e18	e1d330d0	 ldrsb       r3, [r3]
  00e1c	e1a02803	 mov         r2, r3, lsl #16
  00e20	e1a02822	 mov         r2, r2, lsr #16
  00e24	e59d3034	 ldr         r3, [sp, #0x34]
  00e28	e1c320b0	 strh        r2, [r3]
  00e2c	e59d3034	 ldr         r3, [sp, #0x34]
  00e30	e2833002	 add         r3, r3, #2
  00e34	e58d3034	 str         r3, [sp, #0x34]
  00e38	e59d3014	 ldr         r3, [sp, #0x14]
  00e3c	e2833001	 add         r3, r3, #1
  00e40	e58d3014	 str         r3, [sp, #0x14]

; 320  :                     }                        

  00e44	eaffffe5	 b           |$LN34@NKwvsprint|
  00e48		 |$LN33@NKwvsprint|
  00e48		 |$LN31@NKwvsprint|

; 321  :                     while (width-- > 0) {

  00e48	e59d3030	 ldr         r3, [sp, #0x30]
  00e4c	e3530000	 cmp         r3, #0
  00e50	e59d3030	 ldr         r3, [sp, #0x30]
  00e54	e2433001	 sub         r3, r3, #1
  00e58	e58d3030	 str         r3, [sp, #0x30]
  00e5c	da00000d	 ble         |$LN30@NKwvsprint|

; 322  :                         if (--maxChars <= 0) goto cleanUp;

  00e60	e59d3098	 ldr         r3, [sp, #0x98]
  00e64	e2433001	 sub         r3, r3, #1
  00e68	e58d3098	 str         r3, [sp, #0x98]
  00e6c	e59d3098	 ldr         r3, [sp, #0x98]
  00e70	e3530000	 cmp         r3, #0
  00e74	ca000000	 bgt         |$LN29@NKwvsprint|
  00e78	ea0000c3	 b           |$cleanUp$43044|
  00e7c		 |$LN29@NKwvsprint|

; 323  :                         *szPos++ = fillCh;

  00e7c	e1dd20b0	 ldrh        r2, [sp]
  00e80	e59d3034	 ldr         r3, [sp, #0x34]
  00e84	e1c320b0	 strh        r2, [r3]
  00e88	e59d3034	 ldr         r3, [sp, #0x34]
  00e8c	e2833002	 add         r3, r3, #2
  00e90	e58d3034	 str         r3, [sp, #0x34]

; 324  :                     }                        

  00e94	eaffffeb	 b           |$LN31@NKwvsprint|
  00e98		 |$LN30@NKwvsprint|

; 325  :                 } else {

  00e98	ea00002d	 b           |$LN28@NKwvsprint|
  00e9c		 |$LN35@NKwvsprint|
  00e9c		 |$LN27@NKwvsprint|

; 326  :                     while (width-- > 0) {

  00e9c	e59d3030	 ldr         r3, [sp, #0x30]
  00ea0	e3530000	 cmp         r3, #0
  00ea4	e59d3030	 ldr         r3, [sp, #0x30]
  00ea8	e2433001	 sub         r3, r3, #1
  00eac	e58d3030	 str         r3, [sp, #0x30]
  00eb0	da00000d	 ble         |$LN26@NKwvsprint|

; 327  :                         if (--maxChars <= 0) goto cleanUp;

  00eb4	e59d3098	 ldr         r3, [sp, #0x98]
  00eb8	e2433001	 sub         r3, r3, #1
  00ebc	e58d3098	 str         r3, [sp, #0x98]
  00ec0	e59d3098	 ldr         r3, [sp, #0x98]
  00ec4	e3530000	 cmp         r3, #0
  00ec8	ca000000	 bgt         |$LN25@NKwvsprint|
  00ecc	ea0000ae	 b           |$cleanUp$43044|
  00ed0		 |$LN25@NKwvsprint|

; 328  :                         *szPos++ = fillCh;

  00ed0	e1dd20b0	 ldrh        r2, [sp]
  00ed4	e59d3034	 ldr         r3, [sp, #0x34]
  00ed8	e1c320b0	 strh        r2, [r3]
  00edc	e59d3034	 ldr         r3, [sp, #0x34]
  00ee0	e2833002	 add         r3, r3, #2
  00ee4	e58d3034	 str         r3, [sp, #0x34]

; 329  :                     }                        

  00ee8	eaffffeb	 b           |$LN27@NKwvsprint|
  00eec		 |$LN26@NKwvsprint|
  00eec		 |$LN24@NKwvsprint|

; 330  :                     while (chars-- > 0) {

  00eec	e59d3040	 ldr         r3, [sp, #0x40]
  00ef0	e3530000	 cmp         r3, #0
  00ef4	e59d3040	 ldr         r3, [sp, #0x40]
  00ef8	e2433001	 sub         r3, r3, #1
  00efc	e58d3040	 str         r3, [sp, #0x40]
  00f00	da000013	 ble         |$LN23@NKwvsprint|

; 331  :                         if (--maxChars <= 0) goto cleanUp;

  00f04	e59d3098	 ldr         r3, [sp, #0x98]
  00f08	e2433001	 sub         r3, r3, #1
  00f0c	e58d3098	 str         r3, [sp, #0x98]
  00f10	e59d3098	 ldr         r3, [sp, #0x98]
  00f14	e3530000	 cmp         r3, #0
  00f18	ca000000	 bgt         |$LN22@NKwvsprint|
  00f1c	ea00009a	 b           |$cleanUp$43044|
  00f20		 |$LN22@NKwvsprint|

; 332  :                         *szPos++ = (WCHAR)*szC++;

  00f20	e59d3014	 ldr         r3, [sp, #0x14]
  00f24	e1d330d0	 ldrsb       r3, [r3]
  00f28	e1a02803	 mov         r2, r3, lsl #16
  00f2c	e1a02822	 mov         r2, r2, lsr #16
  00f30	e59d3034	 ldr         r3, [sp, #0x34]
  00f34	e1c320b0	 strh        r2, [r3]
  00f38	e59d3034	 ldr         r3, [sp, #0x34]
  00f3c	e2833002	 add         r3, r3, #2
  00f40	e58d3034	 str         r3, [sp, #0x34]
  00f44	e59d3014	 ldr         r3, [sp, #0x14]
  00f48	e2833001	 add         r3, r3, #1
  00f4c	e58d3014	 str         r3, [sp, #0x14]

; 333  :                     }                        

  00f50	eaffffe5	 b           |$LN24@NKwvsprint|
  00f54		 |$LN23@NKwvsprint|
  00f54		 |$LN28@NKwvsprint|

; 334  :                 }

  00f54	ea00008b	 b           |$LN21@NKwvsprint|
  00f58		 |$LN40@NKwvsprint|

; 335  :             } else if (mode == modeL) {

  00f58	e59d3018	 ldr         r3, [sp, #0x18]
  00f5c	e3530002	 cmp         r3, #2
  00f60	1a000087	 bne         |$LN20@NKwvsprint|

; 336  :                 // It is unicode string
; 337  :                 szW = va_arg(pArgList, LPWSTR);

  00f64	e59d3094	 ldr         r3, [sp, #0x94]
  00f68	e2833004	 add         r3, r3, #4
  00f6c	e58d3094	 str         r3, [sp, #0x94]
  00f70	e59d3094	 ldr         r3, [sp, #0x94]
  00f74	e2433004	 sub         r3, r3, #4
  00f78	e5933000	 ldr         r3, [r3]
  00f7c	e58d300c	 str         r3, [sp, #0xC]

; 338  :                 if (szW == NULL) szW = L"(NULL)";

  00f80	e59d300c	 ldr         r3, [sp, #0xC]
  00f84	e3530000	 cmp         r3, #0
  00f88	1a000001	 bne         |$LN19@NKwvsprint|
  00f8c	e59f3228	 ldr         r3, [pc, #0x228]
  00f90	e58d300c	 str         r3, [sp, #0xC]
  00f94		 |$LN19@NKwvsprint|

; 339  :                 // Get string size
; 340  :                 chars = 0;

  00f94	e3a03000	 mov         r3, #0
  00f98	e58d3040	 str         r3, [sp, #0x40]
  00f9c		 |$LN18@NKwvsprint|

; 341  :                 while (chars < maxChars && szW[chars] != L'\0') chars++;

  00f9c	e59d2040	 ldr         r2, [sp, #0x40]
  00fa0	e59d3098	 ldr         r3, [sp, #0x98]
  00fa4	e1520003	 cmp         r2, r3
  00fa8	aa00000b	 bge         |$LN17@NKwvsprint|
  00fac	e59d1040	 ldr         r1, [sp, #0x40]
  00fb0	e3a03002	 mov         r3, #2
  00fb4	e0020391	 mul         r2, r1, r3
  00fb8	e59d300c	 ldr         r3, [sp, #0xC]
  00fbc	e0833002	 add         r3, r3, r2
  00fc0	e1d330b0	 ldrh        r3, [r3]
  00fc4	e3530000	 cmp         r3, #0
  00fc8	0a000003	 beq         |$LN17@NKwvsprint|
  00fcc	e59d3040	 ldr         r3, [sp, #0x40]
  00fd0	e2833001	 add         r3, r3, #1
  00fd4	e58d3040	 str         r3, [sp, #0x40]
  00fd8	eaffffef	 b           |$LN18@NKwvsprint|
  00fdc		 |$LN17@NKwvsprint|

; 342  :                 // Fix string size
; 343  :                 if (precision >= 0 && chars > precision) chars = precision;

  00fdc	e59d3038	 ldr         r3, [sp, #0x38]
  00fe0	e3530000	 cmp         r3, #0
  00fe4	ba000005	 blt         |$LN16@NKwvsprint|
  00fe8	e59d2040	 ldr         r2, [sp, #0x40]
  00fec	e59d3038	 ldr         r3, [sp, #0x38]
  00ff0	e1520003	 cmp         r2, r3
  00ff4	da000001	 ble         |$LN16@NKwvsprint|
  00ff8	e59d3038	 ldr         r3, [sp, #0x38]
  00ffc	e58d3040	 str         r3, [sp, #0x40]
  01000		 |$LN16@NKwvsprint|

; 344  :                 width -= chars;

  01000	e59d2030	 ldr         r2, [sp, #0x30]
  01004	e59d3040	 ldr         r3, [sp, #0x40]
  01008	e0423003	 sub         r3, r2, r3
  0100c	e58d3030	 str         r3, [sp, #0x30]

; 345  :                 if (padLeft) {

  01010	e59d3020	 ldr         r3, [sp, #0x20]
  01014	e3530000	 cmp         r3, #0
  01018	0a00002c	 beq         |$LN15@NKwvsprint|
  0101c		 |$LN14@NKwvsprint|

; 346  :                     while (chars-- > 0) {

  0101c	e59d3040	 ldr         r3, [sp, #0x40]
  01020	e3530000	 cmp         r3, #0
  01024	e59d3040	 ldr         r3, [sp, #0x40]
  01028	e2433001	 sub         r3, r3, #1
  0102c	e58d3040	 str         r3, [sp, #0x40]
  01030	da000011	 ble         |$LN13@NKwvsprint|

; 347  :                         if (--maxChars <= 0) goto cleanUp;

  01034	e59d3098	 ldr         r3, [sp, #0x98]
  01038	e2433001	 sub         r3, r3, #1
  0103c	e58d3098	 str         r3, [sp, #0x98]
  01040	e59d3098	 ldr         r3, [sp, #0x98]
  01044	e3530000	 cmp         r3, #0
  01048	ca000000	 bgt         |$LN12@NKwvsprint|
  0104c	ea00004e	 b           |$cleanUp$43044|
  01050		 |$LN12@NKwvsprint|

; 348  :                         *szPos++ = *szW++;

  01050	e59d300c	 ldr         r3, [sp, #0xC]
  01054	e1d320b0	 ldrh        r2, [r3]
  01058	e59d3034	 ldr         r3, [sp, #0x34]
  0105c	e1c320b0	 strh        r2, [r3]
  01060	e59d3034	 ldr         r3, [sp, #0x34]
  01064	e2833002	 add         r3, r3, #2
  01068	e58d3034	 str         r3, [sp, #0x34]
  0106c	e59d300c	 ldr         r3, [sp, #0xC]
  01070	e2833002	 add         r3, r3, #2
  01074	e58d300c	 str         r3, [sp, #0xC]

; 349  :                     }                        

  01078	eaffffe7	 b           |$LN14@NKwvsprint|
  0107c		 |$LN13@NKwvsprint|
  0107c		 |$LN11@NKwvsprint|

; 350  :                     while (width-- > 0) {

  0107c	e59d3030	 ldr         r3, [sp, #0x30]
  01080	e3530000	 cmp         r3, #0
  01084	e59d3030	 ldr         r3, [sp, #0x30]
  01088	e2433001	 sub         r3, r3, #1
  0108c	e58d3030	 str         r3, [sp, #0x30]
  01090	da00000d	 ble         |$LN10@NKwvsprint|

; 351  :                         if (--maxChars <= 0) goto cleanUp;

  01094	e59d3098	 ldr         r3, [sp, #0x98]
  01098	e2433001	 sub         r3, r3, #1
  0109c	e58d3098	 str         r3, [sp, #0x98]
  010a0	e59d3098	 ldr         r3, [sp, #0x98]
  010a4	e3530000	 cmp         r3, #0
  010a8	ca000000	 bgt         |$LN9@NKwvsprint|
  010ac	ea000036	 b           |$cleanUp$43044|
  010b0		 |$LN9@NKwvsprint|

; 352  :                         *szPos++ = fillCh;

  010b0	e1dd20b0	 ldrh        r2, [sp]
  010b4	e59d3034	 ldr         r3, [sp, #0x34]
  010b8	e1c320b0	 strh        r2, [r3]
  010bc	e59d3034	 ldr         r3, [sp, #0x34]
  010c0	e2833002	 add         r3, r3, #2
  010c4	e58d3034	 str         r3, [sp, #0x34]

; 353  :                     }                        

  010c8	eaffffeb	 b           |$LN11@NKwvsprint|
  010cc		 |$LN10@NKwvsprint|

; 354  :                 } else {

  010cc	ea00002b	 b           |$LN8@NKwvsprint|
  010d0		 |$LN15@NKwvsprint|
  010d0		 |$LN7@NKwvsprint|

; 355  :                     while (width-- > 0) {

  010d0	e59d3030	 ldr         r3, [sp, #0x30]
  010d4	e3530000	 cmp         r3, #0
  010d8	e59d3030	 ldr         r3, [sp, #0x30]
  010dc	e2433001	 sub         r3, r3, #1
  010e0	e58d3030	 str         r3, [sp, #0x30]
  010e4	da00000d	 ble         |$LN6@NKwvsprint|

; 356  :                         if (--maxChars <= 0) goto cleanUp;

  010e8	e59d3098	 ldr         r3, [sp, #0x98]
  010ec	e2433001	 sub         r3, r3, #1
  010f0	e58d3098	 str         r3, [sp, #0x98]
  010f4	e59d3098	 ldr         r3, [sp, #0x98]
  010f8	e3530000	 cmp         r3, #0
  010fc	ca000000	 bgt         |$LN5@NKwvsprint|
  01100	ea000021	 b           |$cleanUp$43044|
  01104		 |$LN5@NKwvsprint|

; 357  :                         *szPos++ = fillCh;

  01104	e1dd20b0	 ldrh        r2, [sp]
  01108	e59d3034	 ldr         r3, [sp, #0x34]
  0110c	e1c320b0	 strh        r2, [r3]
  01110	e59d3034	 ldr         r3, [sp, #0x34]
  01114	e2833002	 add         r3, r3, #2
  01118	e58d3034	 str         r3, [sp, #0x34]

; 358  :                     }                        

  0111c	eaffffeb	 b           |$LN7@NKwvsprint|
  01120		 |$LN6@NKwvsprint|
  01120		 |$LN4@NKwvsprint|

; 359  :                     while (chars-- > 0) {

  01120	e59d3040	 ldr         r3, [sp, #0x40]
  01124	e3530000	 cmp         r3, #0
  01128	e59d3040	 ldr         r3, [sp, #0x40]
  0112c	e2433001	 sub         r3, r3, #1
  01130	e58d3040	 str         r3, [sp, #0x40]
  01134	da000011	 ble         |$LN3@NKwvsprint|

; 360  :                         if (--maxChars <= 0) goto cleanUp;

  01138	e59d3098	 ldr         r3, [sp, #0x98]
  0113c	e2433001	 sub         r3, r3, #1
  01140	e58d3098	 str         r3, [sp, #0x98]
  01144	e59d3098	 ldr         r3, [sp, #0x98]
  01148	e3530000	 cmp         r3, #0
  0114c	ca000000	 bgt         |$LN2@NKwvsprint|
  01150	ea00000d	 b           |$cleanUp$43044|
  01154		 |$LN2@NKwvsprint|

; 361  :                         *szPos++ = *szW++;

  01154	e59d300c	 ldr         r3, [sp, #0xC]
  01158	e1d320b0	 ldrh        r2, [r3]
  0115c	e59d3034	 ldr         r3, [sp, #0x34]
  01160	e1c320b0	 strh        r2, [r3]
  01164	e59d3034	 ldr         r3, [sp, #0x34]
  01168	e2833002	 add         r3, r3, #2
  0116c	e58d3034	 str         r3, [sp, #0x34]
  01170	e59d300c	 ldr         r3, [sp, #0xC]
  01174	e2833002	 add         r3, r3, #2
  01178	e58d300c	 str         r3, [sp, #0xC]

; 362  :                     }                        

  0117c	eaffffe7	 b           |$LN4@NKwvsprint|
  01180		 |$LN3@NKwvsprint|
  01180		 |$LN8@NKwvsprint|

; 363  :                 }
; 364  :             } else {

  01180	ea000000	 b           |$LN1@NKwvsprint|
  01184		 |$LN20@NKwvsprint|

; 365  :                 goto cleanUp;

  01184	ea000000	 b           |$cleanUp$43044|
  01188		 |$LN1@NKwvsprint|
  01188		 |$LN21@NKwvsprint|
  01188		 |$LN98@NKwvsprint|

; 366  :             }
; 367  :             break;
; 368  :         }
; 369  :             
; 370  :     }

  01188	eafffbae	 b           |$LN155@NKwvsprint|
  0118c		 |$LN139@NKwvsprint|
  0118c		 |$cleanUp$43044|

; 371  : 
; 372  : cleanUp:
; 373  :     *szPos = L'\0';

  0118c	e59d2034	 ldr         r2, [sp, #0x34]
  01190	e3a03000	 mov         r3, #0
  01194	e1c230b0	 strh        r3, [r2]

; 374  :     return (szPos - szBuffer);

  01198	e59d2034	 ldr         r2, [sp, #0x34]
  0119c	e59d308c	 ldr         r3, [sp, #0x8C]
  011a0	e0423003	 sub         r3, r2, r3
  011a4	e1a030c3	 mov         r3, r3, asr #1
  011a8	e58d3044	 str         r3, [sp, #0x44]
  011ac		 |$LN143@NKwvsprint|

; 375  : }

  011ac	e59d0044	 ldr         r0, [sp, #0x44]
  011b0	e28dd084	 add         sp, sp, #0x84
  011b4	e89d6000	 ldmia       sp, {sp, lr}
  011b8	e12fff1e	 bx          lr
  011bc		 |$LN178@NKwvsprint|
  011bc		 |$LN179@NKwvsprint|
  011bc	00000000	 DCD         |??_C@_1O@INIEDEDF@?$AA?$CI?$AAN?$AAU?$AAL?$AAL?$AA?$CJ?$AA?$AA@|
  011c0		 |$LN180@NKwvsprint|
  011c0	00000000	 DCD         |??_C@_06LHGEHABH@?$CINULL?$CJ?$AA@|
  011c4		 |$LN181@NKwvsprint|
  011c4	00000000	 DCD         |?lowch@?1??NKwvsprintfW@@9@9|
  011c8		 |$LN182@NKwvsprint|
  011c8	00000000	 DCD         |?upch@?1??NKwvsprintfW@@9@9|
  011cc		 |$M43351|

			 ENDP  ; |NKwvsprintfW|


  00008			 AREA	 |.pdata|, PDATA
|$T43363| DCD	|$LN9@GetFormatV|
	DCD	0x40003b04
; Function compile flags: /Odtp

  011cc			 AREA	 |.text|, CODE, ARM

  011cc		 |GetFormatValue| PROC

; 380  : {

  011cc		 |$LN9@GetFormatV|
  011cc	e1a0c00d	 mov         r12, sp
  011d0	e92d0007	 stmdb       sp!, {r0 - r2}
  011d4	e92d5000	 stmdb       sp!, {r12, lr}
  011d8	e24dd004	 sub         sp, sp, #4
  011dc		 |$M43360|

; 381  :     LONG width = 0;

  011dc	e3a03000	 mov         r3, #0
  011e0	e58d3000	 str         r3, [sp]

; 382  :     
; 383  :     if (**pszFormat == L'*') {

  011e4	e59d300c	 ldr         r3, [sp, #0xC]
  011e8	e5933000	 ldr         r3, [r3]
  011ec	e1d330b0	 ldrh        r3, [r3]
  011f0	e353002a	 cmp         r3, #0x2A
  011f4	1a000010	 bne         |$LN4@GetFormatV|

; 384  :         *pWidth = va_arg(*ppArgList, int);

  011f8	e59d3014	 ldr         r3, [sp, #0x14]
  011fc	e5933000	 ldr         r3, [r3]
  01200	e2832004	 add         r2, r3, #4
  01204	e59d3014	 ldr         r3, [sp, #0x14]
  01208	e5832000	 str         r2, [r3]
  0120c	e59d3014	 ldr         r3, [sp, #0x14]
  01210	e5933000	 ldr         r3, [r3]
  01214	e2433004	 sub         r3, r3, #4
  01218	e5932000	 ldr         r2, [r3]
  0121c	e59d3010	 ldr         r3, [sp, #0x10]
  01220	e5832000	 str         r2, [r3]

; 385  :         (*pszFormat)++;

  01224	e59d300c	 ldr         r3, [sp, #0xC]
  01228	e5933000	 ldr         r3, [r3]
  0122c	e2832002	 add         r2, r3, #2
  01230	e59d300c	 ldr         r3, [sp, #0xC]
  01234	e5832000	 str         r2, [r3]

; 386  :     } else {

  01238	ea00001b	 b           |$LN3@GetFormatV|
  0123c		 |$LN4@GetFormatV|
  0123c		 |$LN2@GetFormatV|

; 387  :         while (**pszFormat >= L'0' && **pszFormat <= L'9') {

  0123c	e59d300c	 ldr         r3, [sp, #0xC]
  01240	e5933000	 ldr         r3, [r3]
  01244	e1d330b0	 ldrh        r3, [r3]
  01248	e3530030	 cmp         r3, #0x30
  0124c	ba000013	 blt         |$LN1@GetFormatV|
  01250	e59d300c	 ldr         r3, [sp, #0xC]
  01254	e5933000	 ldr         r3, [r3]
  01258	e1d330b0	 ldrh        r3, [r3]
  0125c	e3530039	 cmp         r3, #0x39
  01260	ca00000e	 bgt         |$LN1@GetFormatV|

; 388  :             width = width * 10 + (**pszFormat - L'0');

  01264	e59d1000	 ldr         r1, [sp]
  01268	e3a0300a	 mov         r3, #0xA
  0126c	e0020391	 mul         r2, r1, r3
  01270	e59d300c	 ldr         r3, [sp, #0xC]
  01274	e5933000	 ldr         r3, [r3]
  01278	e1d330b0	 ldrh        r3, [r3]
  0127c	e2433030	 sub         r3, r3, #0x30
  01280	e0823003	 add         r3, r2, r3
  01284	e58d3000	 str         r3, [sp]

; 389  :             (*pszFormat)++;

  01288	e59d300c	 ldr         r3, [sp, #0xC]
  0128c	e5933000	 ldr         r3, [r3]
  01290	e2832002	 add         r2, r3, #2
  01294	e59d300c	 ldr         r3, [sp, #0xC]
  01298	e5832000	 str         r2, [r3]

; 390  :         }

  0129c	eaffffe6	 b           |$LN2@GetFormatV|
  012a0		 |$LN1@GetFormatV|

; 391  :         *pWidth = width;

  012a0	e59d2000	 ldr         r2, [sp]
  012a4	e59d3010	 ldr         r3, [sp, #0x10]
  012a8	e5832000	 str         r2, [r3]
  012ac		 |$LN3@GetFormatV|

; 392  :     }
; 393  : }

  012ac	e28dd004	 add         sp, sp, #4
  012b0	e89d6000	 ldmia       sp, {sp, lr}
  012b4	e12fff1e	 bx          lr
  012b8		 |$M43361|

			 ENDP  ; |GetFormatValue|


  00010			 AREA	 |.pdata|, PDATA
|$T43368| DCD	|$LN7@Reverse|
	DCD	0x40002504
; Function compile flags: /Odtp

  012b8			 AREA	 |.text|, CODE, ARM

  012b8		 |Reverse| PROC

; 398  : {

  012b8		 |$LN7@Reverse|
  012b8	e1a0c00d	 mov         r12, sp
  012bc	e92d0003	 stmdb       sp!, {r0, r1}
  012c0	e92d5000	 stmdb       sp!, {r12, lr}
  012c4	e24dd008	 sub         sp, sp, #8
  012c8		 |$M43365|

; 399  :     INT swaps;
; 400  :     WCHAR ch;
; 401  : 
; 402  :     swaps = (pLast - pFirst + 1) >> 1;

  012c8	e59d2014	 ldr         r2, [sp, #0x14]
  012cc	e59d3010	 ldr         r3, [sp, #0x10]
  012d0	e0423003	 sub         r3, r2, r3
  012d4	e1a030c3	 mov         r3, r3, asr #1
  012d8	e2833001	 add         r3, r3, #1
  012dc	e1a030c3	 mov         r3, r3, asr #1
  012e0	e58d3000	 str         r3, [sp]
  012e4		 |$LN2@Reverse|

; 403  :     while (swaps--) {

  012e4	e59d3000	 ldr         r3, [sp]
  012e8	e3530000	 cmp         r3, #0
  012ec	e59d3000	 ldr         r3, [sp]
  012f0	e2433001	 sub         r3, r3, #1
  012f4	e58d3000	 str         r3, [sp]
  012f8	0a000010	 beq         |$LN1@Reverse|

; 404  :         ch = *pFirst;

  012fc	e59d3010	 ldr         r3, [sp, #0x10]
  01300	e1d330b0	 ldrh        r3, [r3]
  01304	e1cd30b4	 strh        r3, [sp, #4]

; 405  :         *pFirst++ = *pLast;

  01308	e59d3014	 ldr         r3, [sp, #0x14]
  0130c	e1d320b0	 ldrh        r2, [r3]
  01310	e59d3010	 ldr         r3, [sp, #0x10]
  01314	e1c320b0	 strh        r2, [r3]
  01318	e59d3010	 ldr         r3, [sp, #0x10]
  0131c	e2833002	 add         r3, r3, #2
  01320	e58d3010	 str         r3, [sp, #0x10]

; 406  :         *pLast-- = ch;

  01324	e1dd20b4	 ldrh        r2, [sp, #4]
  01328	e59d3014	 ldr         r3, [sp, #0x14]
  0132c	e1c320b0	 strh        r2, [r3]
  01330	e59d3014	 ldr         r3, [sp, #0x14]
  01334	e2433002	 sub         r3, r3, #2
  01338	e58d3014	 str         r3, [sp, #0x14]

; 407  :     }

  0133c	eaffffe8	 b           |$LN2@Reverse|
  01340		 |$LN1@Reverse|

; 408  : }

  01340	e28dd008	 add         sp, sp, #8
  01344	e89d6000	 ldmia       sp, {sp, lr}
  01348	e12fff1e	 bx          lr
  0134c		 |$M43366|

			 ENDP  ; |Reverse|

	END
