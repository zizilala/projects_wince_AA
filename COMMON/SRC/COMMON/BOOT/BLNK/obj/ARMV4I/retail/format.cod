; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\BOOT\BLNK\format.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
|?upch@?1??NKwvsprintfW@@9@9| DCB "0", 0x0, "1", 0x0, "2", 0x0, "3", 0x0, "4"
	DCB	0x0, "5", 0x0, "6", 0x0, "7", 0x0, "8", 0x0, "9", 0x0, "A"
	DCB	0x0, "B", 0x0, "C", 0x0, "D", 0x0, "E", 0x0, "F", 0x0, 0x0
	DCB	0x0					; `NKwvsprintfW'::`2'::upch
	%	2
|?lowch@?1??NKwvsprintfW@@9@9| DCB "0", 0x0, "1", 0x0, "2", 0x0, "3", 0x0
	DCB	"4", 0x0, "5", 0x0, "6", 0x0, "7", 0x0, "8", 0x0, "9", 0x0
	DCB	"a", 0x0, "b", 0x0, "c", 0x0, "d", 0x0, "e", 0x0, "f", 0x0
	DCB	0x0, 0x0				; `NKwvsprintfW'::`2'::lowch

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
; File c:\wince600\platform\common\src\common\boot\blnk\format.c

  00000			 AREA	 |.pdata|, PDATA
|$T43362| DCD	|$LN12@GetFormatV|
	DCD	0x40002201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetFormatValue| PROC

; 380  : {

  00000		 |$LN12@GetFormatV|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43359|

; 381  :     LONG width = 0;
; 382  :     
; 383  :     if (**pszFormat == L'*') {

  00004	e5903000	 ldr         r3, [r0]
  00008	e3a04000	 mov         r4, #0
  0000c	e1d330b0	 ldrh        r3, [r3]
  00010	e353002a	 cmp         r3, #0x2A
  00014	1a000009	 bne         |$LN7@GetFormatV|

; 384  :         *pWidth = va_arg(*ppArgList, int);

  00018	e592e000	 ldr         lr, [r2]
  0001c	e28e3004	 add         r3, lr, #4
  00020	e5823000	 str         r3, [r2]
  00024	e59e3000	 ldr         r3, [lr]
  00028	e5813000	 str         r3, [r1]

; 385  :         (*pszFormat)++;

  0002c	e5903000	 ldr         r3, [r0]
  00030	e2833002	 add         r3, r3, #2
  00034	e5803000	 str         r3, [r0]

; 392  :     }
; 393  : }

  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN7@GetFormatV|

; 386  :     } else {
; 387  :         while (**pszFormat >= L'0' && **pszFormat <= L'9') {

  00040	e3530030	 cmp         r3, #0x30
  00044	3a00000c	 bcc         |$LN9@GetFormatV|
  00048		 |$LL2@GetFormatV|
  00048	e5903000	 ldr         r3, [r0]
  0004c	e1d3e0b0	 ldrh        lr, [r3]
  00050	e35e0039	 cmp         lr, #0x39
  00054	8a000008	 bhi         |$LN9@GetFormatV|

; 388  :             width = width * 10 + (**pszFormat - L'0');
; 389  :             (*pszFormat)++;

  00058	e2833002	 add         r3, r3, #2
  0005c	e1a02003	 mov         r2, r3
  00060	e5803000	 str         r3, [r0]
  00064	e1d220b0	 ldrh        r2, [r2]
  00068	e0843104	 add         r3, r4, r4, lsl #2
  0006c	e08e3083	 add         r3, lr, r3, lsl #1
  00070	e3520030	 cmp         r2, #0x30
  00074	e2434030	 sub         r4, r3, #0x30
  00078	2afffff2	 bcs         |$LL2@GetFormatV|
  0007c		 |$LN9@GetFormatV|

; 390  :         }
; 391  :         *pWidth = width;

  0007c	e5814000	 str         r4, [r1]

; 392  :     }
; 393  : }

  00080	e8bd4010	 ldmia       sp!, {r4, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$M43360|

			 ENDP  ; |GetFormatValue|


  00000			 AREA	 |.pdata|, PDATA
|$T43376| DCD	|$LN10@Reverse|
	DCD	0x40000e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Reverse| PROC

; 398  : {

  00000		 |$LN10@Reverse|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43373|

; 399  :     INT swaps;
; 400  :     WCHAR ch;
; 401  : 
; 402  :     swaps = (pLast - pFirst + 1) >> 1;

  00004	e0413000	 sub         r3, r1, r0
  00008	e1a030c3	 mov         r3, r3, asr #1
  0000c	e2833001	 add         r3, r3, #1
  00010	e1b0e0c3	 movs        lr, r3, asr #1

; 403  :     while (swaps--) {

  00014	0a000005	 beq         |$LN6@Reverse|
  00018		 |$LL2@Reverse|

; 404  :         ch = *pFirst;
; 405  :         *pFirst++ = *pLast;

  00018	e1d130b0	 ldrh        r3, [r1]
  0001c	e1d020b0	 ldrh        r2, [r0]
  00020	e25ee001	 subs        lr, lr, #1
  00024	e0c030b2	 strh        r3, [r0], #2

; 406  :         *pLast-- = ch;

  00028	e04120b2	 strh        r2, [r1], #-2
  0002c	1afffff9	 bne         |$LL2@Reverse|
  00030		 |$LN6@Reverse|

; 407  :     }
; 408  : }

  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$M43374|

			 ENDP  ; |Reverse|

	EXPORT	|NKwvsprintfW|
	EXPORT	|??_C@_1O@INIEDEDF@?$AA?$CI?$AAN?$AAU?$AAL?$AAL?$AA?$CJ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_06LHGEHABH@?$CINULL?$CJ?$AA@| [ DATA ] ; `string'
	IMPORT	|__rt_urem64by64|
	IMPORT	|__rt_udiv64by64|

  00000			 AREA	 |.pdata|, PDATA
|$T43578| DCD	|$LN269@NKwvsprint|
	DCD	0x40025104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@INIEDEDF@?$AA?$CI?$AAN?$AAU?$AAL?$AAL?$AA?$CJ?$AA?$AA@| DCB "(", 0x0
	DCB	"N", 0x0, "U", 0x0, "L", 0x0, "L", 0x0, ")", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_06LHGEHABH@?$CINULL?$CJ?$AA@| DCB "(NULL)", 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NKwvsprintfW| PROC

; 35   : ) {

  00000		 |$LN269@NKwvsprint|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5ff0	 stmdb       sp!, {r4 - r12, lr}
  0000c	e24dd034	 sub         sp, sp, #0x34
  00010		 |$M43575|
  00010	e1a04003	 mov         r4, r3
  00014	e1a03001	 mov         r3, r1
  00018	e1b01000	 movs        r1, r0
  0001c	e58d1028	 str         r1, [sp, #0x28]
  00020	e58d3004	 str         r3, [sp, #4]

; 36   :     static WCHAR upch[]  = L"0123456789ABCDEF";
; 37   :     static WCHAR lowch[] = L"0123456789abcdef";
; 38   :     enum { typeNone = 0, typeNumber, typeCh, typeString } type;
; 39   :     enum { modeNone = 0, modeH, modeL, modeX } mode;
; 40   :     BOOL padLeft, prefix, sign, upper;
; 41   :     INT32 width, precision, radix, chars;
; 42   :     WCHAR ch, fillCh;
; 43   :     LPWSTR szPos, szW;
; 44   :     LPSTR szC;
; 45   :     UINT64 value;
; 46   : 
; 47   : 
; 48   :     // First check input params
; 49   :     if (szBuffer == NULL || szFormat == NULL || maxChars < 1) return 0;

  00024	0a00023f	 beq         |$LN141@NKwvsprint|
  00028	e3530000	 cmp         r3, #0
  0002c	0a00023d	 beq         |$LN141@NKwvsprint|
  00030	e3540001	 cmp         r4, #1
  00034	ba00023b	 blt         |$LN141@NKwvsprint|

; 50   : 
; 51   :     // Set actual possition
; 52   :     szPos = szBuffer;
; 53   :     
; 54   :     // While there is format strings
; 55   :     while (*szFormat != L'\0' && maxChars > 0) {

  00038	e1d330b0	 ldrh        r3, [r3]
  0003c	e1a06001	 mov         r6, r1
  00040	e1b02003	 movs        r2, r3
  00044	0a000233	 beq         |$cleanUp$43068|
  00048	e59f18e8	 ldr         r1, [pc, #0x8E8]
  0004c	e59d7028	 ldr         r7, [sp, #0x28]
  00050	e3a00000	 mov         r0, #0
  00054	e2811024	 add         r1, r1, #0x24
  00058	e58d1024	 str         r1, [sp, #0x24]
  0005c	e58d7008	 str         r7, [sp, #8]
  00060		 |$LL140@NKwvsprint|
  00060	e3540000	 cmp         r4, #0
  00064	da00022a	 ble         |$LN238@NKwvsprint|

; 56   : 
; 57   :         // If it is other than format prefix, print it and move to next one
; 58   :         if (*szFormat != L'%') {

  00068	e3520025	 cmp         r2, #0x25
  0006c	0a000007	 beq         |$LN138@NKwvsprint|

; 59   :             if (--maxChars <= 0) goto cleanUp;

  00070	e2444001	 sub         r4, r4, #1
  00074	e3540000	 cmp         r4, #0
  00078	da000225	 ble         |$LN238@NKwvsprint|

; 60   :             *szPos++ = *szFormat++;

  0007c	e0c630b2	 strh        r3, [r6], #2
  00080	e59d3004	 ldr         r3, [sp, #4]
  00084	e2833002	 add         r3, r3, #2
  00088	e58d3004	 str         r3, [sp, #4]

; 61   :             continue;

  0008c	ea00021d	 b           |$LN232@NKwvsprint|
  00090		 |$LN138@NKwvsprint|

; 62   :         }
; 63   : 
; 64   :         // Set flags to default values        
; 65   :         padLeft = FALSE;
; 66   :         prefix = FALSE;
; 67   :         sign = FALSE;
; 68   :         upper = FALSE;
; 69   :         fillCh = L' ';
; 70   :         width = 0;
; 71   :         precision = -1;
; 72   :         type = typeNone;
; 73   :         mode = modeNone;
; 74   : 
; 75   :         // read pad left and prefix flags
; 76   :         while (*++szFormat != L'\0') {

  00090	e59d2004	 ldr         r2, [sp, #4]
  00094	e3a09000	 mov         r9, #0
  00098	e58d9014	 str         r9, [sp, #0x14]
  0009c	e1f230b2	 ldrh        r3, [r2, #2]!
  000a0	e3a09000	 mov         r9, #0
  000a4	e3e08000	 mvn         r8, #0
  000a8	e58d900c	 str         r9, [sp, #0xC]
  000ac	e3a0b000	 mov         r11, #0
  000b0	e3a0a000	 mov         r10, #0
  000b4	e3a09020	 mov         r9, #0x20
  000b8	e58d8004	 str         r8, [sp, #4]
  000bc	e3530000	 cmp         r3, #0
  000c0	e58d2060	 str         r2, [sp, #0x60]
  000c4	e58d801c	 str         r8, [sp, #0x1C]
  000c8	e58db020	 str         r11, [sp, #0x20]
  000cc	e58da010	 str         r10, [sp, #0x10]
  000d0	e1cd90b0	 strh        r9, [sp]
  000d4	e58d0018	 str         r0, [sp, #0x18]
  000d8	e3a07000	 mov         r7, #0
  000dc	e3a05000	 mov         r5, #0
  000e0	0a00000b	 beq         |$LN132@NKwvsprint|
  000e4		 |$LL136@NKwvsprint|

; 77   :             if (*szFormat == L'-') {

  000e4	e353002d	 cmp         r3, #0x2D

; 78   :                 padLeft = TRUE;

  000e8	03a0b001	 moveq       r11, #1
  000ec	0a000003	 beq         |$LN131@NKwvsprint|

; 79   :             } else if (*szFormat == L'#') {

  000f0	e3530023	 cmp         r3, #0x23
  000f4	1a000005	 bne         |$LN235@NKwvsprint|

; 80   :                 prefix = TRUE;

  000f8	e3a03001	 mov         r3, #1
  000fc	e58d3014	 str         r3, [sp, #0x14]
  00100		 |$LN131@NKwvsprint|
  00100	e1f230b2	 ldrh        r3, [r2, #2]!
  00104	e58d2060	 str         r2, [sp, #0x60]
  00108	e3530000	 cmp         r3, #0
  0010c	1afffff4	 bne         |$LL136@NKwvsprint|
  00110		 |$LN235@NKwvsprint|

; 78   :                 padLeft = TRUE;

  00110	e58db020	 str         r11, [sp, #0x20]
  00114		 |$LN132@NKwvsprint|

; 81   :             } else {
; 82   :                 break;
; 83   :             }
; 84   :         }
; 85   : 
; 86   :         // find fill character
; 87   :         if (*szFormat == L'0') {

  00114	e1d230b0	 ldrh        r3, [r2]

; 88   :             fillCh = L'0';
; 89   :             szFormat++;
; 90   :         }
; 91   :             
; 92   :         // read the width specification 
; 93   :         GetFormatValue(&szFormat, &width, &pArgList);

  00118	e28d1018	 add         r1, sp, #0x18
  0011c	e28d0060	 add         r0, sp, #0x60
  00120	e3530030	 cmp         r3, #0x30
  00124	02823002	 addeq       r3, r2, #2
  00128	03a09030	 moveq       r9, #0x30
  0012c	e28d2064	 add         r2, sp, #0x64
  00130	058d3060	 streq       r3, [sp, #0x60]
  00134	01cd90b0	 streqh      r9, [sp]
  00138	eb000000	 bl          GetFormatValue

; 94   : 
; 95   :         // read the precision
; 96   :         if (*szFormat == L'.') {

  0013c	e59d2060	 ldr         r2, [sp, #0x60]
  00140	e1d230b0	 ldrh        r3, [r2]
  00144	e353002e	 cmp         r3, #0x2E
  00148	1a000008	 bne         |$LN129@NKwvsprint|

; 97   :             szFormat++;

  0014c	e2823002	 add         r3, r2, #2

; 98   :             GetFormatValue(&szFormat, &precision, &pArgList);

  00150	e28d2064	 add         r2, sp, #0x64
  00154	e28d1004	 add         r1, sp, #4
  00158	e28d0060	 add         r0, sp, #0x60
  0015c	e58d3060	 str         r3, [sp, #0x60]
  00160	eb000000	 bl          GetFormatValue
  00164	e59d8004	 ldr         r8, [sp, #4]
  00168	e59d2060	 ldr         r2, [sp, #0x60]
  0016c	e58d801c	 str         r8, [sp, #0x1C]
  00170		 |$LN129@NKwvsprint|

; 99   :         }                
; 100  : 
; 101  :         // get the operand size
; 102  :         if (*szFormat == L'l') {

  00170	e1d210b0	 ldrh        r1, [r2]
  00174	e351006c	 cmp         r1, #0x6C

; 103  :             mode = modeL;
; 104  :             szFormat++;

  00178	0a000001	 beq         |$LN262@NKwvsprint|

; 105  :         } else if (*szFormat == L'w') {

  0017c	e3510077	 cmp         r1, #0x77
  00180	1a000002	 bne         |$LN126@NKwvsprint|
  00184		 |$LN262@NKwvsprint|

; 106  :             mode = modeL;

  00184	e3a05002	 mov         r5, #2

; 115  :             szFormat++;

  00188	e2822002	 add         r2, r2, #2

; 116  :         } else if (

  0018c	ea000015	 b           |$LN120@NKwvsprint|
  00190		 |$LN126@NKwvsprint|

; 107  :             szFormat++;
; 108  :         } else if (
; 109  :             szFormat[0] == L'I' && szFormat[1] == L'3' && szFormat[2] == L'2'
; 110  :         ) {                

  00190	e3510049	 cmp         r1, #0x49
  00194	1a000005	 bne         |$LN124@NKwvsprint|
  00198	e1d230b2	 ldrh        r3, [r2, #2]
  0019c	e3530033	 cmp         r3, #0x33
  001a0	01d230b4	 ldreqh      r3, [r2, #4]
  001a4	03530032	 cmpeq       r3, #0x32

; 111  :             mode = modeL;

  001a8	03a05002	 moveq       r5, #2
  001ac	0a00000c	 beq         |$LN250@NKwvsprint|
  001b0		 |$LN124@NKwvsprint|

; 112  :             szFormat += 3;
; 113  :         } else if (*szFormat == L'h') {

  001b0	e3510068	 cmp         r1, #0x68

; 114  :             mode = modeH;

  001b4	03a05001	 moveq       r5, #1

; 115  :             szFormat++;

  001b8	02822002	 addeq       r2, r2, #2
  001bc	0a000009	 beq         |$LN120@NKwvsprint|

; 117  :             szFormat[0] == L'I' && szFormat[1] == L'6' && szFormat[2] == L'4'
; 118  :         ) {

  001c0	e3510049	 cmp         r1, #0x49
  001c4	1a000007	 bne         |$LN120@NKwvsprint|
  001c8	e1d230b2	 ldrh        r3, [r2, #2]
  001cc	e3530036	 cmp         r3, #0x36
  001d0	1a000004	 bne         |$LN120@NKwvsprint|
  001d4	e1d230b4	 ldrh        r3, [r2, #4]
  001d8	e3530034	 cmp         r3, #0x34
  001dc	1a000001	 bne         |$LN120@NKwvsprint|

; 119  :             mode = modeX;

  001e0	e3a05003	 mov         r5, #3
  001e4		 |$LN250@NKwvsprint|

; 120  :             szFormat += 3;

  001e4	e2822006	 add         r2, r2, #6
  001e8		 |$LN120@NKwvsprint|

; 121  :         }
; 122  : 
; 123  :         // break if there is unexpected format string end
; 124  :         if (*szFormat == L'\0') break;

  001e8	e1d230b0	 ldrh        r3, [r2]
  001ec	e3530000	 cmp         r3, #0
  001f0	0a0001c7	 beq         |$LN238@NKwvsprint|

; 125  :             
; 126  :         switch (*szFormat) {

  001f4	e3530064	 cmp         r3, #0x64
  001f8	ca00001e	 bgt         |$LN145@NKwvsprint|
  001fc	0a000031	 beq         |$LN116@NKwvsprint|
  00200	e3530043	 cmp         r3, #0x43
  00204	0a000017	 beq         |$LN108@NKwvsprint|
  00208	e3530053	 cmp         r3, #0x53
  0020c	0a000012	 beq         |$LN105@NKwvsprint|
  00210	e3530058	 cmp         r3, #0x58
  00214	0a00000c	 beq         |$LN113@NKwvsprint|
  00218	e3530061	 cmp         r3, #0x61
  0021c	0a000006	 beq         |$LN106@NKwvsprint|
  00220	e3530063	 cmp         r3, #0x63
  00224	1a00001d	 bne         |$LN101@NKwvsprint|

; 145  : 
; 146  :         case L'c':
; 147  :             if (mode == modeNone) mode = modeL;

  00228	e3550000	 cmp         r5, #0
  0022c	03a05002	 moveq       r5, #2
  00230		 |$LN109@NKwvsprint|

; 173  :             *szPos++ = *szFormat;

  00230	e59de008	 ldr         lr, [sp, #8]
  00234	e3a07002	 mov         r7, #2
  00238	ea000029	 b           |$LN114@NKwvsprint|
  0023c		 |$LN106@NKwvsprint|

; 155  : 
; 156  :         case L'a':
; 157  :             mode = modeH;

  0023c	e3a05001	 mov         r5, #1
  00240		 |$LN104@NKwvsprint|

; 173  :             *szPos++ = *szFormat;

  00240	e59de008	 ldr         lr, [sp, #8]
  00244	e3a07003	 mov         r7, #3
  00248	ea000025	 b           |$LN114@NKwvsprint|
  0024c		 |$LN113@NKwvsprint|

; 135  :             break;
; 136  : 
; 137  :         case L'X':
; 138  :             upper = TRUE;

  0024c	e3a03001	 mov         r3, #1
  00250	e58d300c	 str         r3, [sp, #0xC]
  00254		 |$LN112@NKwvsprint|

; 139  :         case L'p':
; 140  :         case L'x':
; 141  :             radix = 16;

  00254	e3a0e010	 mov         lr, #0x10

; 142  :             type = typeNumber;
; 143  :             if (mode == modeNone) mode = modeL;
; 144  :             break;

  00258	ea00001d	 b           |$LN252@NKwvsprint|
  0025c		 |$LN105@NKwvsprint|

; 158  :             type = typeString;
; 159  :             break;
; 160  :             
; 161  :         case L'S':
; 162  :             if (mode == modeNone) mode = modeH;

  0025c	e3550000	 cmp         r5, #0
  00260	1afffff6	 bne         |$LN104@NKwvsprint|

; 163  :             type = typeString;
; 164  :             break;

  00264	eafffff4	 b           |$LN106@NKwvsprint|
  00268		 |$LN108@NKwvsprint|

; 148  :             type = typeCh;
; 149  :             break;
; 150  :                 
; 151  :         case L'C':
; 152  :             if (mode == modeNone) mode = modeH;

  00268	e3550000	 cmp         r5, #0
  0026c	1affffef	 bne         |$LN109@NKwvsprint|
  00270	e3a05001	 mov         r5, #1

; 153  :             type = typeCh;
; 154  :             break;

  00274	eaffffed	 b           |$LN109@NKwvsprint|
  00278		 |$LN145@NKwvsprint|

; 125  :             
; 126  :         switch (*szFormat) {

  00278	e3530069	 cmp         r3, #0x69
  0027c	0a000011	 beq         |$LN116@NKwvsprint|
  00280	e3530070	 cmp         r3, #0x70
  00284	0afffff2	 beq         |$LN112@NKwvsprint|
  00288	e3530073	 cmp         r3, #0x73
  0028c	0a000009	 beq         |$LN103@NKwvsprint|
  00290	e3530075	 cmp         r3, #0x75
  00294	0a00000d	 beq         |$LN115@NKwvsprint|
  00298	e3530078	 cmp         r3, #0x78
  0029c	0affffec	 beq         |$LN112@NKwvsprint|
  002a0		 |$LN101@NKwvsprint|

; 170  : 
; 171  :         default:
; 172  :             if (--maxChars <= 0) goto cleanUp;

  002a0	e2444001	 sub         r4, r4, #1
  002a4	e3540000	 cmp         r4, #0
  002a8	da000199	 ble         |$LN238@NKwvsprint|

; 173  :             *szPos++ = *szFormat;

  002ac	e59de008	 ldr         lr, [sp, #8]
  002b0	e0c630b2	 strh        r3, [r6], #2
  002b4	ea00000a	 b           |$LN114@NKwvsprint|
  002b8		 |$LN103@NKwvsprint|

; 165  : 
; 166  :         case 's':
; 167  :             if (mode == modeNone) mode = modeL;

  002b8	e3550000	 cmp         r5, #0
  002bc	1affffdf	 bne         |$LN104@NKwvsprint|
  002c0	e3a05002	 mov         r5, #2

; 168  :             type = typeString;
; 169  :             break;

  002c4	eaffffdd	 b           |$LN104@NKwvsprint|
  002c8		 |$LN116@NKwvsprint|

; 127  : 
; 128  :         case L'i':
; 129  :         case L'd':
; 130  :             sign = TRUE;

  002c8	e3a0a001	 mov         r10, #1
  002cc	e58da010	 str         r10, [sp, #0x10]
  002d0		 |$LN115@NKwvsprint|

; 131  :         case L'u':
; 132  :             radix = 10;

  002d0	e3a0e00a	 mov         lr, #0xA
  002d4		 |$LN252@NKwvsprint|

; 133  :             type = typeNumber;
; 134  :             if (mode == modeNone) mode = modeL;

  002d4	e3550000	 cmp         r5, #0
  002d8	03a05002	 moveq       r5, #2
  002dc	e3a07001	 mov         r7, #1
  002e0	e58de008	 str         lr, [sp, #8]
  002e4		 |$LN114@NKwvsprint|

; 174  :         }
; 175  : 
; 176  :         // Move to next format character
; 177  :         szFormat++;

  002e4	e2823002	 add         r3, r2, #2
  002e8	e58d3004	 str         r3, [sp, #4]

; 178  : 
; 179  :         switch (type) {

  002ec	e3570001	 cmp         r7, #1
  002f0	0a00008e	 beq         |$LN97@NKwvsprint|
  002f4	e3570002	 cmp         r7, #2
  002f8	0a000079	 beq         |$LN47@NKwvsprint|
  002fc	e3570003	 cmp         r7, #3
  00300	1a00017f	 bne         |$LN249@NKwvsprint|

; 304  : 
; 305  :         case typeString:
; 306  :             if (mode == modeH) {

  00304	e3550001	 cmp         r5, #1
  00308	1a000038	 bne         |$LN40@NKwvsprint|

; 307  :                 // It is ascii string
; 308  :                 szC = va_arg(pArgList, LPSTR);

  0030c	e59d3064	 ldr         r3, [sp, #0x64]

; 309  :                 if (szC == NULL) szC = "(NULL)";
; 310  :                 // Get string size
; 311  :                 chars = 0;

  00310	e3a02000	 mov         r2, #0
  00314	e2833004	 add         r3, r3, #4
  00318	e58d3064	 str         r3, [sp, #0x64]
  0031c	e5133004	 ldr         r3, [r3, #-4]
  00320	e1b00003	 movs        r0, r3
  00324	059f0614	 ldreq       r0, [pc, #0x614]

; 312  :                 while (chars < maxChars && szC[chars] != '\0') chars++;

  00328	e3540000	 cmp         r4, #0
  0032c	da000005	 ble         |$LN236@NKwvsprint|
  00330		 |$LL38@NKwvsprint|
  00330	e19030d2	 ldrsb       r3, [r0, +r2]
  00334	e3530000	 cmp         r3, #0
  00338	0a000002	 beq         |$LN236@NKwvsprint|
  0033c	e2822001	 add         r2, r2, #1
  00340	e1520004	 cmp         r2, r4
  00344	bafffff9	 blt         |$LL38@NKwvsprint|
  00348		 |$LN236@NKwvsprint|

; 313  :                 // Fix string size
; 314  :                 if (precision >= 0 && chars > precision) chars = precision;

  00348	e3580000	 cmp         r8, #0

; 315  :                 width -= chars;

  0034c	e59d3018	 ldr         r3, [sp, #0x18]
  00350	51520008	 cmppl       r2, r8
  00354	c1a02008	 movgt       r2, r8
  00358	e0431002	 sub         r1, r3, r2

; 316  :                 if (padLeft) {

  0035c	e35b0000	 cmp         r11, #0
  00360	0a000016	 beq         |$LN255@NKwvsprint|
  00364	ea000005	 b           |$LN254@NKwvsprint|
  00368		 |$LL34@NKwvsprint|

; 317  :                     while (chars-- > 0) {
; 318  :                         if (--maxChars <= 0) goto cleanUp;

  00368	e2444001	 sub         r4, r4, #1
  0036c	e3540000	 cmp         r4, #0
  00370	e2422001	 sub         r2, r2, #1
  00374	da000166	 ble         |$LN238@NKwvsprint|

; 319  :                         *szPos++ = (WCHAR)*szC++;

  00378	e0d030d1	 ldrsb       r3, [r0], #1
  0037c	e0c630b2	 strh        r3, [r6], #2
  00380		 |$LN254@NKwvsprint|
  00380	e3520000	 cmp         r2, #0
  00384	cafffff7	 bgt         |$LL34@NKwvsprint|
  00388	ea000004	 b           |$LN263@NKwvsprint|
  0038c		 |$LL31@NKwvsprint|

; 320  :                     }                        
; 321  :                     while (width-- > 0) {
; 322  :                         if (--maxChars <= 0) goto cleanUp;

  0038c	e2444001	 sub         r4, r4, #1
  00390	e3540000	 cmp         r4, #0
  00394	e2411001	 sub         r1, r1, #1
  00398	da00015d	 ble         |$LN238@NKwvsprint|

; 323  :                         *szPos++ = fillCh;

  0039c	e0c690b2	 strh        r9, [r6], #2
  003a0		 |$LN263@NKwvsprint|
  003a0	e3510000	 cmp         r1, #0
  003a4	cafffff8	 bgt         |$LL31@NKwvsprint|

; 324  :                     }                        
; 325  :                 } else {

  003a8	ea000154	 b           |$LN243@NKwvsprint|
  003ac		 |$LL27@NKwvsprint|

; 326  :                     while (width-- > 0) {
; 327  :                         if (--maxChars <= 0) goto cleanUp;

  003ac	e2444001	 sub         r4, r4, #1
  003b0	e3540000	 cmp         r4, #0
  003b4	e2411001	 sub         r1, r1, #1
  003b8	da000155	 ble         |$LN238@NKwvsprint|

; 328  :                         *szPos++ = fillCh;

  003bc	e0c690b2	 strh        r9, [r6], #2
  003c0		 |$LN255@NKwvsprint|
  003c0	e3510000	 cmp         r1, #0
  003c4	cafffff8	 bgt         |$LL27@NKwvsprint|
  003c8	ea000005	 b           |$LN264@NKwvsprint|
  003cc		 |$LL24@NKwvsprint|

; 329  :                     }                        
; 330  :                     while (chars-- > 0) {
; 331  :                         if (--maxChars <= 0) goto cleanUp;

  003cc	e2444001	 sub         r4, r4, #1
  003d0	e3540000	 cmp         r4, #0
  003d4	e2422001	 sub         r2, r2, #1
  003d8	da00014d	 ble         |$LN238@NKwvsprint|

; 332  :                         *szPos++ = (WCHAR)*szC++;

  003dc	e0d030d1	 ldrsb       r3, [r0], #1
  003e0	e0c630b2	 strh        r3, [r6], #2
  003e4		 |$LN264@NKwvsprint|
  003e4	e3520000	 cmp         r2, #0
  003e8	cafffff7	 bgt         |$LL24@NKwvsprint|

; 333  :                     }                        
; 334  :                 }

  003ec	ea000143	 b           |$LN243@NKwvsprint|
  003f0		 |$LN40@NKwvsprint|

; 335  :             } else if (mode == modeL) {

  003f0	e3550002	 cmp         r5, #2
  003f4	1a000146	 bne         |$LN238@NKwvsprint|

; 336  :                 // It is unicode string
; 337  :                 szW = va_arg(pArgList, LPWSTR);

  003f8	e59d3064	 ldr         r3, [sp, #0x64]

; 338  :                 if (szW == NULL) szW = L"(NULL)";
; 339  :                 // Get string size
; 340  :                 chars = 0;

  003fc	e3a02000	 mov         r2, #0
  00400	e2833004	 add         r3, r3, #4
  00404	e58d3064	 str         r3, [sp, #0x64]
  00408	e5133004	 ldr         r3, [r3, #-4]
  0040c	e1b00003	 movs        r0, r3
  00410	059f0524	 ldreq       r0, [pc, #0x524]

; 341  :                 while (chars < maxChars && szW[chars] != L'\0') chars++;

  00414	e3540000	 cmp         r4, #0
  00418	da000007	 ble         |$LN237@NKwvsprint|

; 338  :                 if (szW == NULL) szW = L"(NULL)";
; 339  :                 // Get string size
; 340  :                 chars = 0;

  0041c	e1a01000	 mov         r1, r0
  00420		 |$LL18@NKwvsprint|

; 341  :                 while (chars < maxChars && szW[chars] != L'\0') chars++;

  00420	e1d130b0	 ldrh        r3, [r1]
  00424	e3530000	 cmp         r3, #0
  00428	0a000003	 beq         |$LN237@NKwvsprint|
  0042c	e2822001	 add         r2, r2, #1
  00430	e1520004	 cmp         r2, r4
  00434	e2811002	 add         r1, r1, #2
  00438	bafffff8	 blt         |$LL18@NKwvsprint|
  0043c		 |$LN237@NKwvsprint|

; 342  :                 // Fix string size
; 343  :                 if (precision >= 0 && chars > precision) chars = precision;

  0043c	e3580000	 cmp         r8, #0

; 344  :                 width -= chars;

  00440	e59d3018	 ldr         r3, [sp, #0x18]
  00444	51520008	 cmppl       r2, r8
  00448	c1a02008	 movgt       r2, r8
  0044c	e0431002	 sub         r1, r3, r2

; 345  :                 if (padLeft) {

  00450	e35b0000	 cmp         r11, #0
  00454	0a000016	 beq         |$LN257@NKwvsprint|
  00458	ea000005	 b           |$LN256@NKwvsprint|
  0045c		 |$LL14@NKwvsprint|

; 346  :                     while (chars-- > 0) {
; 347  :                         if (--maxChars <= 0) goto cleanUp;

  0045c	e2444001	 sub         r4, r4, #1
  00460	e3540000	 cmp         r4, #0
  00464	e2422001	 sub         r2, r2, #1
  00468	da000129	 ble         |$LN238@NKwvsprint|

; 348  :                         *szPos++ = *szW++;

  0046c	e0d030b2	 ldrh        r3, [r0], #2
  00470	e0c630b2	 strh        r3, [r6], #2
  00474		 |$LN256@NKwvsprint|
  00474	e3520000	 cmp         r2, #0
  00478	cafffff7	 bgt         |$LL14@NKwvsprint|
  0047c	ea000004	 b           |$LN265@NKwvsprint|
  00480		 |$LL11@NKwvsprint|

; 349  :                     }                        
; 350  :                     while (width-- > 0) {
; 351  :                         if (--maxChars <= 0) goto cleanUp;

  00480	e2444001	 sub         r4, r4, #1
  00484	e3540000	 cmp         r4, #0
  00488	e2411001	 sub         r1, r1, #1
  0048c	da000120	 ble         |$LN238@NKwvsprint|

; 352  :                         *szPos++ = fillCh;

  00490	e0c690b2	 strh        r9, [r6], #2
  00494		 |$LN265@NKwvsprint|
  00494	e3510000	 cmp         r1, #0
  00498	cafffff8	 bgt         |$LL11@NKwvsprint|

; 353  :                     }                        
; 354  :                 } else {

  0049c	ea000117	 b           |$LN243@NKwvsprint|
  004a0		 |$LL7@NKwvsprint|

; 355  :                     while (width-- > 0) {
; 356  :                         if (--maxChars <= 0) goto cleanUp;

  004a0	e2444001	 sub         r4, r4, #1
  004a4	e3540000	 cmp         r4, #0
  004a8	e2411001	 sub         r1, r1, #1
  004ac	da000118	 ble         |$LN238@NKwvsprint|

; 357  :                         *szPos++ = fillCh;

  004b0	e0c690b2	 strh        r9, [r6], #2
  004b4		 |$LN257@NKwvsprint|
  004b4	e3510000	 cmp         r1, #0
  004b8	cafffff8	 bgt         |$LL7@NKwvsprint|
  004bc	ea000005	 b           |$LN266@NKwvsprint|
  004c0		 |$LL4@NKwvsprint|

; 358  :                     }                        
; 359  :                     while (chars-- > 0) {
; 360  :                         if (--maxChars <= 0) goto cleanUp;

  004c0	e2444001	 sub         r4, r4, #1
  004c4	e3540000	 cmp         r4, #0
  004c8	e2422001	 sub         r2, r2, #1
  004cc	da000110	 ble         |$LN238@NKwvsprint|

; 361  :                         *szPos++ = *szW++;

  004d0	e0d030b2	 ldrh        r3, [r0], #2
  004d4	e0c630b2	 strh        r3, [r6], #2
  004d8		 |$LN266@NKwvsprint|
  004d8	e3520000	 cmp         r2, #0
  004dc	cafffff7	 bgt         |$LL4@NKwvsprint|

; 362  :                     }                        
; 363  :                 }
; 364  :             } else {
; 365  :                 goto cleanUp;
; 366  :             }
; 367  :             break;

  004e0	ea000106	 b           |$LN243@NKwvsprint|
  004e4		 |$LN47@NKwvsprint|

; 288  :                 }                    
; 289  :             }
; 290  :             break;
; 291  : 
; 292  :         case typeCh:
; 293  :             // Depending on size obtain value
; 294  :             if (mode == modeH) {

  004e4	e3550001	 cmp         r5, #1

; 295  :                 ch = (WCHAR)va_arg(pArgList, CHAR);

  004e8	059d3064	 ldreq       r3, [sp, #0x64]
  004ec	02833004	 addeq       r3, r3, #4
  004f0	058d3064	 streq       r3, [sp, #0x64]
  004f4	015330d4	 ldreqsb     r3, [r3, #-4]
  004f8	01a03803	 moveq       r3, r3, lsl #16
  004fc	01a03823	 moveq       r3, r3, lsr #16
  00500	0a000005	 beq         |$LN43@NKwvsprint|

; 296  :             } else if (mode == modeL) {

  00504	e3550002	 cmp         r5, #2
  00508	1a000101	 bne         |$LN238@NKwvsprint|

; 297  :                 ch = va_arg(pArgList, WCHAR);

  0050c	e59d3064	 ldr         r3, [sp, #0x64]
  00510	e2833004	 add         r3, r3, #4
  00514	e58d3064	 str         r3, [sp, #0x64]
  00518	e15330b4	 ldrh        r3, [r3, #-4]
  0051c		 |$LN43@NKwvsprint|

; 298  :             } else {
; 299  :                 goto cleanUp;
; 300  :             }
; 301  :             if (--maxChars <= 0) goto cleanUp;

  0051c	e2444001	 sub         r4, r4, #1
  00520	e3540000	 cmp         r4, #0
  00524	da0000fa	 ble         |$LN238@NKwvsprint|

; 302  :             *szPos++ = ch;

  00528	e0c630b2	 strh        r3, [r6], #2

; 303  :             break;

  0052c	ea0000f3	 b           |$LN243@NKwvsprint|
  00530		 |$LN97@NKwvsprint|

; 180  :         case typeNumber:
; 181  :             // Special cases to act like MSC v5.10
; 182  :             if (padLeft || precision >= 0) fillCh = L' ';

  00530	e35b0000	 cmp         r11, #0
  00534	1a000001	 bne         |$LN95@NKwvsprint|
  00538	e3580000	 cmp         r8, #0
  0053c	4a000001	 bmi         |$LN96@NKwvsprint|
  00540		 |$LN95@NKwvsprint|
  00540	e3a03020	 mov         r3, #0x20
  00544	e1cd30b0	 strh        r3, [sp]
  00548		 |$LN96@NKwvsprint|

; 183  :             // Fix possible prefix
; 184  :             if (radix != 16) prefix = FALSE;

  00548	e35e0010	 cmp         lr, #0x10
  0054c	13a03000	 movne       r3, #0
  00550	158d3014	 strne       r3, [sp, #0x14]

; 185  :             // Depending on mode obtain value
; 186  :             if (mode == modeH) {

  00554	e3550001	 cmp         r5, #1
  00558	1a000009	 bne         |$LN93@NKwvsprint|

; 187  :                 if (sign) {
; 188  :                     value = (INT64)va_arg(pArgList, INT16);

  0055c	e59d3064	 ldr         r3, [sp, #0x64]
  00560	e35a0000	 cmp         r10, #0
  00564	e2833004	 add         r3, r3, #4
  00568	115370f4	 ldrnesh     r7, [r3, #-4]
  0056c	e58d3064	 str         r3, [sp, #0x64]
  00570	11a08fc7	 movne       r8, r7, asr #31
  00574	1a000017	 bne         |$LN84@NKwvsprint|

; 189  :                 } else {
; 190  :                     value = (UINT64)va_arg(pArgList, UINT16);

  00578	e15370b4	 ldrh        r7, [r3, #-4]
  0057c	e3a08000	 mov         r8, #0

; 191  :                 }                    

  00580	ea000014	 b           |$LN84@NKwvsprint|
  00584		 |$LN93@NKwvsprint|

; 192  :             } else if (mode == modeL) {

  00584	e3550002	 cmp         r5, #2
  00588	1a00000b	 bne         |$LN89@NKwvsprint|

; 193  :                 if (sign) {
; 194  :                     value = (INT64)va_arg(pArgList, INT32);

  0058c	e59d3064	 ldr         r3, [sp, #0x64]
  00590	e35a0000	 cmp         r10, #0
  00594	12832004	 addne       r2, r3, #4
  00598	15123004	 ldrne       r3, [r2, #-4]
  0059c	158d2064	 strne       r2, [sp, #0x64]
  005a0	11a07003	 movne       r7, r3
  005a4	11a08fc3	 movne       r8, r3, asr #31
  005a8	1a00000a	 bne         |$LN84@NKwvsprint|

; 195  :                 } else {
; 196  :                     value = (UINT64)va_arg(pArgList, UINT32);

  005ac	e2833004	 add         r3, r3, #4
  005b0	e5137004	 ldr         r7, [r3, #-4]
  005b4	e3a08000	 mov         r8, #0

; 197  :                 }                    

  005b8	ea000005	 b           |$LN258@NKwvsprint|
  005bc		 |$LN89@NKwvsprint|

; 198  :             } else if (mode == modeX) {

  005bc	e3550003	 cmp         r5, #3
  005c0	1a0000d3	 bne         |$LN238@NKwvsprint|

; 199  :                 value = va_arg(pArgList, UINT64);

  005c4	e59d3064	 ldr         r3, [sp, #0x64]
  005c8	e2833008	 add         r3, r3, #8
  005cc	e5137008	 ldr         r7, [r3, #-8]
  005d0	e5138004	 ldr         r8, [r3, #-4]
  005d4		 |$LN258@NKwvsprint|
  005d4	e58d3064	 str         r3, [sp, #0x64]
  005d8		 |$LN84@NKwvsprint|

; 200  :             } else {
; 201  :                 goto cleanUp;
; 202  :             }
; 203  :             // Should sign be printed?
; 204  :             if (sign && (INT64)value < 0) {

  005d8	e35a0000	 cmp         r10, #0
  005dc	0a000006	 beq         |$LN83@NKwvsprint|
  005e0	e58d702c	 str         r7, [sp, #0x2C]
  005e4	e3580000	 cmp         r8, #0
  005e8	ca000003	 bgt         |$LN83@NKwvsprint|
  005ec	aa000002	 bge         |$LN83@NKwvsprint|

; 205  :                 (INT64)value = -(INT64)value;

  005f0	e2777000	 rsbs        r7, r7, #0
  005f4	e2e88000	 rsc         r8, r8, #0

; 206  :             } else {

  005f8	ea000001	 b           |$LN82@NKwvsprint|
  005fc		 |$LN83@NKwvsprint|

; 207  :                 sign = FALSE;

  005fc	e3a03000	 mov         r3, #0
  00600	e58d3010	 str         r3, [sp, #0x10]
  00604		 |$LN82@NKwvsprint|

; 208  :             }
; 209  :             // Start with reverse string
; 210  :             szW = szPos;

  00604	e1a05006	 mov         r5, r6

; 211  :             chars = 0;

  00608	e3a09000	 mov         r9, #0
  0060c	ea000000	 b           |$LN81@NKwvsprint|
  00610		 |$LL247@NKwvsprint|

; 131  :         case L'u':
; 132  :             radix = 10;

  00610	e59de008	 ldr         lr, [sp, #8]

; 211  :             chars = 0;

  00614		 |$LN81@NKwvsprint|

; 212  :             do {
; 213  :                 if (--maxChars <= 0) goto cleanUp;

  00614	e2444001	 sub         r4, r4, #1
  00618	e3540000	 cmp         r4, #0
  0061c	da0000bc	 ble         |$LN238@NKwvsprint|

; 214  :                 *szW++ = upper ? upch[value%radix] : lowch[value%radix];

  00620	e59d300c	 ldr         r3, [sp, #0xC]
  00624	e1a00007	 mov         r0, r7
  00628	e1a01008	 mov         r1, r8
  0062c	e3530000	 cmp         r3, #0
  00630	e1a03fce	 mov         r3, lr, asr #31
  00634	e1a0200e	 mov         r2, lr
  00638	0a00000a	 beq         |$LN146@NKwvsprint|
  0063c	eb000000	 bl          __rt_udiv64by64
  00640	e59d3008	 ldr         r3, [sp, #8]
  00644	e1a0a001	 mov         r10, r1
  00648	e1a0b000	 mov         r11, r0
  0064c	e1a02003	 mov         r2, r3
  00650	e1a03fc3	 mov         r3, r3, asr #31
  00654	e1a00007	 mov         r0, r7
  00658	e1a01008	 mov         r1, r8
  0065c	eb000000	 bl          __rt_urem64by64
  00660	e59f32d0	 ldr         r3, [pc, #0x2D0]
  00664	ea000009	 b           |$LN259@NKwvsprint|
  00668		 |$LN146@NKwvsprint|
  00668	eb000000	 bl          __rt_udiv64by64
  0066c	e59d3008	 ldr         r3, [sp, #8]
  00670	e1a0a001	 mov         r10, r1
  00674	e1a0b000	 mov         r11, r0
  00678	e1a02003	 mov         r2, r3
  0067c	e1a03fc3	 mov         r3, r3, asr #31
  00680	e1a00007	 mov         r0, r7
  00684	e1a01008	 mov         r1, r8
  00688	eb000000	 bl          __rt_urem64by64
  0068c	e59d3024	 ldr         r3, [sp, #0x24]
  00690		 |$LN259@NKwvsprint|
  00690	e0833080	 add         r3, r3, r0, lsl #1
  00694	e1d320b0	 ldrh        r2, [r3]

; 215  :                 chars++;
; 216  :             } while ((value /= radix) != 0 && maxChars > 0);

  00698	e19b300a	 orrs        r3, r11, r10
  0069c	e2899001	 add         r9, r9, #1
  006a0	e0c520b2	 strh        r2, [r5], #2
  006a4	e1a0700b	 mov         r7, r11
  006a8	e1a0800a	 mov         r8, r10
  006ac	1affffd7	 bne         |$LL247@NKwvsprint|

; 217  :             // Fix sizes
; 218  :             width -= chars;
; 219  :             precision -= chars;

  006b0	e59d201c	 ldr         r2, [sp, #0x1C]
  006b4	e59d3018	 ldr         r3, [sp, #0x18]
  006b8	e3a08030	 mov         r8, #0x30
  006bc	e0422009	 sub         r2, r2, r9

; 220  :             if (precision > 0) width -= precision;

  006c0	e3520000	 cmp         r2, #0
  006c4	e0431009	 sub         r1, r3, r9
  006c8	da000007	 ble         |$LN224@NKwvsprint|
  006cc	e0411002	 sub         r1, r1, r2
  006d0		 |$LL75@NKwvsprint|

; 221  :             // Fill to the field precision
; 222  :             while (precision-- > 0) {
; 223  :                 if (--maxChars <= 0) goto cleanUp;

  006d0	e2444001	 sub         r4, r4, #1
  006d4	e3540000	 cmp         r4, #0
  006d8	e2422001	 sub         r2, r2, #1
  006dc	da00008c	 ble         |$LN238@NKwvsprint|

; 224  :                 *szW++ = L'0';

  006e0	e0c580b2	 strh        r8, [r5], #2
  006e4	e3520000	 cmp         r2, #0
  006e8	cafffff8	 bgt         |$LL75@NKwvsprint|
  006ec		 |$LN224@NKwvsprint|

; 225  :             }
; 226  :             if (width > 0 && !padLeft) {

  006ec	e3510000	 cmp         r1, #0
  006f0	da000054	 ble         |$LN72@NKwvsprint|
  006f4	e59d3020	 ldr         r3, [sp, #0x20]
  006f8	e3530000	 cmp         r3, #0
  006fc	1a000051	 bne         |$LN72@NKwvsprint|

; 227  :                 // If we're filling with spaces, put sign first
; 228  :                 if (fillCh != L'0') {

  00700	e1dde0b0	 ldrh        lr, [sp]
  00704	e35e0030	 cmp         lr, #0x30
  00708	0a00001e	 beq         |$LN244@NKwvsprint|

; 229  :                     if (sign) {

  0070c	e59d3010	 ldr         r3, [sp, #0x10]
  00710	e3530000	 cmp         r3, #0
  00714	0a000007	 beq         |$LN70@NKwvsprint|

; 230  :                         if (--maxChars <= 0) goto cleanUp;

  00718	e2444001	 sub         r4, r4, #1
  0071c	e3540000	 cmp         r4, #0
  00720	da00007b	 ble         |$LN238@NKwvsprint|

; 231  :                         *szW++ = L'-';

  00724	e3a0302d	 mov         r3, #0x2D
  00728	e0c530b2	 strh        r3, [r5], #2

; 232  :                         width--;
; 233  :                         sign = FALSE;

  0072c	e3a03000	 mov         r3, #0
  00730	e58d3010	 str         r3, [sp, #0x10]
  00734	e2411001	 sub         r1, r1, #1
  00738		 |$LN70@NKwvsprint|

; 234  :                     }
; 235  :                     if (prefix && radix == 16) {

  00738	e59d2014	 ldr         r2, [sp, #0x14]
  0073c	e3520000	 cmp         r2, #0
  00740	0a000011	 beq         |$LN246@NKwvsprint|
  00744	e59d7008	 ldr         r7, [sp, #8]
  00748	e3570010	 cmp         r7, #0x10
  0074c	1a00000e	 bne         |$LN246@NKwvsprint|

; 236  :                         if (--maxChars <= 0) goto cleanUp;

  00750	e2442001	 sub         r2, r4, #1
  00754	e3520000	 cmp         r2, #0
  00758	da00006d	 ble         |$LN238@NKwvsprint|

; 237  :                         *szW++ = upper ? L'X' : L'x';

  0075c	e59d000c	 ldr         r0, [sp, #0xC]

; 238  :                         if (--maxChars <= 0) goto cleanUp;

  00760	e2424001	 sub         r4, r2, #1
  00764	e3500000	 cmp         r0, #0
  00768	13a03058	 movne       r3, #0x58
  0076c	03a03078	 moveq       r3, #0x78
  00770	e0c530b2	 strh        r3, [r5], #2
  00774	e3540000	 cmp         r4, #0
  00778	da000065	 ble         |$LN238@NKwvsprint|

; 239  :                         *szW++ = L'0';

  0077c	e0c580b2	 strh        r8, [r5], #2

; 240  :                         prefix = FALSE;

  00780	e3a02000	 mov         r2, #0
  00784	ea000001	 b           |$LN68@NKwvsprint|
  00788		 |$LN244@NKwvsprint|

; 183  :             // Fix possible prefix
; 184  :             if (radix != 16) prefix = FALSE;

  00788	e59d2014	 ldr         r2, [sp, #0x14]
  0078c		 |$LN246@NKwvsprint|
  0078c	e59d000c	 ldr         r0, [sp, #0xC]

; 240  :                         prefix = FALSE;

  00790		 |$LN68@NKwvsprint|

; 241  :                     }
; 242  :                 }
; 243  :                 // Leave place for sign
; 244  :                 if (sign) width--;

  00790	e59d3010	 ldr         r3, [sp, #0x10]
  00794	e3530000	 cmp         r3, #0
  00798	0a000006	 beq         |$LN260@NKwvsprint|
  0079c	e2411001	 sub         r1, r1, #1

; 248  :                     *szW++ = fillCh;

  007a0	ea000004	 b           |$LN260@NKwvsprint|
  007a4		 |$LL64@NKwvsprint|

; 245  :                 // Fill to the field width
; 246  :                 while (width-- > 0) {
; 247  :                     if (--maxChars <= 0) goto cleanUp;

  007a4	e2444001	 sub         r4, r4, #1
  007a8	e3540000	 cmp         r4, #0
  007ac	e2411001	 sub         r1, r1, #1
  007b0	da000057	 ble         |$LN238@NKwvsprint|

; 248  :                     *szW++ = fillCh;

  007b4	e0c5e0b2	 strh        lr, [r5], #2
  007b8		 |$LN260@NKwvsprint|
  007b8	e3510000	 cmp         r1, #0
  007bc	cafffff8	 bgt         |$LL64@NKwvsprint|

; 249  :                 }
; 250  :                 // Still have sign?
; 251  :                 if (sign) {

  007c0	e3530000	 cmp         r3, #0
  007c4	0a000004	 beq         |$LN61@NKwvsprint|

; 252  :                     if (--maxChars <= 0) goto cleanUp;

  007c8	e2444001	 sub         r4, r4, #1
  007cc	e3540000	 cmp         r4, #0
  007d0	da00004f	 ble         |$LN238@NKwvsprint|

; 253  :                     *szW++ = L'-';

  007d4	e3a0302d	 mov         r3, #0x2D
  007d8	e0c530b2	 strh        r3, [r5], #2
  007dc		 |$LN61@NKwvsprint|

; 254  :                     sign = FALSE;
; 255  :                 }
; 256  :                 // Or prefix?
; 257  :                 if (prefix) {

  007dc	e3520000	 cmp         r2, #0
  007e0	0a00000a	 beq         |$LN59@NKwvsprint|

; 258  :                     if (--maxChars <= 0) goto cleanUp;

  007e4	e2442001	 sub         r2, r4, #1
  007e8	e3520000	 cmp         r2, #0
  007ec	da000048	 ble         |$LN238@NKwvsprint|

; 259  :                     *szW++ = upper ? L'X' : L'x';

  007f0	e3500000	 cmp         r0, #0
  007f4	13a03058	 movne       r3, #0x58
  007f8	03a03078	 moveq       r3, #0x78

; 260  :                     if (--maxChars <= 0) goto cleanUp;

  007fc	e2424001	 sub         r4, r2, #1
  00800	e0c530b2	 strh        r3, [r5], #2
  00804	e3540000	 cmp         r4, #0
  00808	da000041	 ble         |$LN238@NKwvsprint|

; 261  :                     *szW++ = L'0';

  0080c	e0c580b2	 strh        r8, [r5], #2
  00810		 |$LN59@NKwvsprint|

; 262  :                     prefix = FALSE;
; 263  :                 }
; 264  :                 // Now reverse the string in place
; 265  :                 Reverse(szPos, szW - 1);

  00810	e2451002	 sub         r1, r5, #2
  00814	e0413006	 sub         r3, r1, r6
  00818	e1a030c3	 mov         r3, r3, asr #1
  0081c	e2833001	 add         r3, r3, #1
  00820	e1b000c3	 movs        r0, r3, asr #1
  00824	0a000005	 beq         |$LN228@NKwvsprint|
  00828		 |$LL155@NKwvsprint|
  00828	e1d130b0	 ldrh        r3, [r1]
  0082c	e1d620b0	 ldrh        r2, [r6]
  00830	e2500001	 subs        r0, r0, #1
  00834	e0c630b2	 strh        r3, [r6], #2
  00838	e04120b2	 strh        r2, [r1], #-2
  0083c	1afffff9	 bne         |$LL155@NKwvsprint|
  00840		 |$LN228@NKwvsprint|

; 266  :                 szPos = szW;

  00840	e1a06005	 mov         r6, r5

; 267  :             } else {

  00844	ea00002d	 b           |$LN243@NKwvsprint|
  00848		 |$LN72@NKwvsprint|

; 268  :                 // Add the sign character
; 269  :                 if (sign) {

  00848	e59d3010	 ldr         r3, [sp, #0x10]
  0084c	e3530000	 cmp         r3, #0
  00850	0a000004	 beq         |$LN55@NKwvsprint|

; 270  :                     if (--maxChars <= 0) goto cleanUp;

  00854	e2444001	 sub         r4, r4, #1
  00858	e3540000	 cmp         r4, #0
  0085c	da00002c	 ble         |$LN238@NKwvsprint|

; 271  :                     *szW++ = L'-';

  00860	e3a0302d	 mov         r3, #0x2D
  00864	e0c530b2	 strh        r3, [r5], #2
  00868		 |$LN55@NKwvsprint|

; 272  :                     sign = FALSE;
; 273  :                 }
; 274  :                 if (prefix) {

  00868	e59d3014	 ldr         r3, [sp, #0x14]
  0086c	e3530000	 cmp         r3, #0
  00870	0a00000b	 beq         |$LN53@NKwvsprint|

; 275  :                     if (--maxChars <= 0) goto cleanUp;

  00874	e2442001	 sub         r2, r4, #1
  00878	e3520000	 cmp         r2, #0
  0087c	da000024	 ble         |$LN238@NKwvsprint|

; 276  :                     *szW++ = upper ? L'X' : L'x';

  00880	e59d300c	 ldr         r3, [sp, #0xC]

; 277  :                     if (--maxChars <= 0) goto cleanUp;

  00884	e2424001	 sub         r4, r2, #1
  00888	e3530000	 cmp         r3, #0
  0088c	13a03058	 movne       r3, #0x58
  00890	03a03078	 moveq       r3, #0x78
  00894	e0c530b2	 strh        r3, [r5], #2
  00898	e3540000	 cmp         r4, #0
  0089c	da00001c	 ble         |$LN238@NKwvsprint|

; 278  :                     *szW++ = L'0';

  008a0	e0c580b2	 strh        r8, [r5], #2
  008a4		 |$LN53@NKwvsprint|

; 279  :                     prefix = FALSE;
; 280  :                 }
; 281  :                 // Reverse the string in place
; 282  :                 Reverse(szPos, szW - 1);

  008a4	e2450002	 sub         r0, r5, #2
  008a8	e0403006	 sub         r3, r0, r6
  008ac	e1a030c3	 mov         r3, r3, asr #1
  008b0	e2833001	 add         r3, r3, #1
  008b4	e1b0e0c3	 movs        lr, r3, asr #1
  008b8	0a000005	 beq         |$LN230@NKwvsprint|
  008bc		 |$LL159@NKwvsprint|
  008bc	e1d030b0	 ldrh        r3, [r0]
  008c0	e1d620b0	 ldrh        r2, [r6]
  008c4	e25ee001	 subs        lr, lr, #1
  008c8	e0c630b2	 strh        r3, [r6], #2
  008cc	e04020b2	 strh        r2, [r0], #-2
  008d0	1afffff9	 bne         |$LL159@NKwvsprint|
  008d4		 |$LN230@NKwvsprint|

; 283  :                 szPos = szW;

  008d4	e1a06005	 mov         r6, r5

; 284  :                 // Pad to the right of the string in case left aligned
; 285  :                 while (width-- > 0) {

  008d8	e3510000	 cmp         r1, #0
  008dc	da000007	 ble         |$LN243@NKwvsprint|

; 62   :         }
; 63   : 
; 64   :         // Set flags to default values        
; 65   :         padLeft = FALSE;
; 66   :         prefix = FALSE;
; 67   :         sign = FALSE;
; 68   :         upper = FALSE;
; 69   :         fillCh = L' ';
; 70   :         width = 0;
; 71   :         precision = -1;
; 72   :         type = typeNone;
; 73   :         mode = modeNone;
; 74   : 
; 75   :         // read pad left and prefix flags
; 76   :         while (*++szFormat != L'\0') {

  008e0	e1dde0b0	 ldrh        lr, [sp]
  008e4		 |$LL50@NKwvsprint|

; 286  :                     if (--maxChars <= 0) goto cleanUp;

  008e4	e2444001	 sub         r4, r4, #1
  008e8	e3540000	 cmp         r4, #0
  008ec	e2411001	 sub         r1, r1, #1
  008f0	da000007	 ble         |$LN238@NKwvsprint|

; 287  :                     *szPos++ = fillCh;

  008f4	e0c6e0b2	 strh        lr, [r6], #2
  008f8	e3510000	 cmp         r1, #0
  008fc	cafffff8	 bgt         |$LL50@NKwvsprint|
  00900		 |$LN243@NKwvsprint|

; 267  :             } else {

  00900	e59d3004	 ldr         r3, [sp, #4]
  00904		 |$LN249@NKwvsprint|

; 224  :                 *szW++ = L'0';

  00904	e3a00000	 mov         r0, #0
  00908		 |$LN232@NKwvsprint|

; 50   : 
; 51   :     // Set actual possition
; 52   :     szPos = szBuffer;
; 53   :     
; 54   :     // While there is format strings
; 55   :     while (*szFormat != L'\0' && maxChars > 0) {

  00908	e1d330b0	 ldrh        r3, [r3]
  0090c	e1b02003	 movs        r2, r3
  00910	1afffdd2	 bne         |$LL140@NKwvsprint|
  00914		 |$LN238@NKwvsprint|

; 35   : ) {

  00914	e59d1028	 ldr         r1, [sp, #0x28]
  00918		 |$cleanUp$43068|

; 368  :         }
; 369  :             
; 370  :     }
; 371  : 
; 372  : cleanUp:
; 373  :     *szPos = L'\0';

  00918	e3a03000	 mov         r3, #0

; 374  :     return (szPos - szBuffer);

  0091c	e00630b1	 strh        r3, [r6], -r1
  00920	e1a000c6	 mov         r0, r6, asr #1
  00924	ea000000	 b           |$LN143@NKwvsprint|
  00928		 |$LN141@NKwvsprint|

; 36   :     static WCHAR upch[]  = L"0123456789ABCDEF";
; 37   :     static WCHAR lowch[] = L"0123456789abcdef";
; 38   :     enum { typeNone = 0, typeNumber, typeCh, typeString } type;
; 39   :     enum { modeNone = 0, modeH, modeL, modeX } mode;
; 40   :     BOOL padLeft, prefix, sign, upper;
; 41   :     INT32 width, precision, radix, chars;
; 42   :     WCHAR ch, fillCh;
; 43   :     LPWSTR szPos, szW;
; 44   :     LPSTR szC;
; 45   :     UINT64 value;
; 46   : 
; 47   : 
; 48   :     // First check input params
; 49   :     if (szBuffer == NULL || szFormat == NULL || maxChars < 1) return 0;

  00928	e3a00000	 mov         r0, #0
  0092c		 |$LN143@NKwvsprint|

; 375  : }

  0092c	e28dd034	 add         sp, sp, #0x34
  00930	e89d6ff0	 ldmia       sp, {r4 - r11, sp, lr}
  00934	e12fff1e	 bx          lr
  00938		 |$LN270@NKwvsprint|
  00938		 |$LN271@NKwvsprint|
  00938	00000000	 DCD         |?upch@?1??NKwvsprintfW@@9@9|
  0093c		 |$LN272@NKwvsprint|
  0093c	00000000	 DCD         |??_C@_1O@INIEDEDF@?$AA?$CI?$AAN?$AAU?$AAL?$AAL?$AA?$CJ?$AA?$AA@|
  00940		 |$LN273@NKwvsprint|
  00940	00000000	 DCD         |??_C@_06LHGEHABH@?$CINULL?$CJ?$AA@|
  00944		 |$M43576|

			 ENDP  ; |NKwvsprintfW|

	END
