; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\BOOT\BLSERIAL\serfuncs.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?g_buffer@@3PAEA| [ DATA ]		; g_buffer

  00000			 AREA	 |.bss|, NOINIT
|?g_buffer@@3PAEA| % 0x5f0				; g_buffer

  00000			 AREA	 |.rdata|, DATA, READONLY
|packetHeaderSig| DCB 0x6b
	DCB	0x49
	DCB	0x54
	DCB	0x4c
	EXPORT	|??_C@_0CJ@CHGIGMLG@received?5non?9download?5packet?5typ@| [ DATA ] ; `string'
	EXPORT	|SerialSendBlockAck|
	EXPORT	|??_C@_0BE@KEIPDPMM@Expected?5block?5?$CFu?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CE@HOCBBCP@Received?5out?5of?5sequence?5block?5?$CF@| [ DATA ] ; `string'
	EXPORT	|?RecvPacket@@YAHPAUtagSERIAL_PACKET_HEADER@@PAEPAGE@Z| ; RecvPacket
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|SerialReadData|
	IMPORT	|memmove|
	IMPORT	|memcpy|
	IMPORT	|KITLOutputDebugString|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|
; File c:\wince600\platform\common\src\common\boot\blserial\serfuncs.cpp

  00000			 AREA	 |.bss|, NOINIT
|?dwBlockNumber@?1??SerialReadData@@9@4KA| % 0x4	; `SerialReadData'::`2'::dwBlockNumber

  00000			 AREA	 |.bss|, NOINIT
|?dataBuffer@?1??SerialReadData@@9@4PAEA| % 0x5f0	; `SerialReadData'::`2'::dataBuffer

  00000			 AREA	 |.bss|, NOINIT
|?cbDataBuffer@?1??SerialReadData@@9@4GA| % 0x2		; `SerialReadData'::`2'::cbDataBuffer

  00000			 AREA	 |.pdata|, PDATA
|$T32467| DCD	|$LN17@SerialRead|
	DCD	0xc0009404

  00000			 AREA	 |.data|, DATA
|?pBlock@?1??SerialReadData@@9@4PAEA| DCD |?dataBuffer@?1??SerialReadData@@9@4PAEA|+4 ; `SerialReadData'::`2'::pBlock

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@CHGIGMLG@received?5non?9download?5packet?5typ@| DCB "received "
	DCB	"non-download packet type 0x%X", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BE@KEIPDPMM@Expected?5block?5?$CFu?$AN?6?$AA@| DCB "Expected bloc"
	DCB	"k %u", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CE@HOCBBCP@Received?5out?5of?5sequence?5block?5?$CF@| DCB "Receiv"
	DCB	"ed out of sequence block %u", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|?pBlockHeader@?1??SerialReadData@@9@4PAUtagSERIAL_BLOCK_HEADER@@A| DCD |?dataBuffer@?1??SerialReadData@@9@4PAEA| ; `SerialReadData'::`2'::pBlockHeader

  00000			 AREA	 |.xdata|, DATA
|$T32463| DCD	0xffffffe4
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T32463|

  00008		 |SerialReadData| PROC

; 30   : {

  00008		 |$LN17@SerialRead|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0003	 stmdb       sp!, {r0, r1}
  00010	e92d5000	 stmdb       sp!, {r12, lr}
  00014	e24dd020	 sub         sp, sp, #0x20
  00018		 |$M32464|
  00018	e59f3234	 ldr         r3, [pc, #0x234]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3014	 str         r3, [sp, #0x14]

; 31   :     static DWORD dwBlockNumber = 0;
; 32   :     static USHORT cbDataBuffer = 0;
; 33   :     static BYTE dataBuffer[KITL_MTU] = {0};
; 34   : 
; 35   :     // the first DWORD in the local buffer is the block header which contains
; 36   :     // the sequence number of the block received
; 37   :     static PSERIAL_BLOCK_HEADER pBlockHeader = (PSERIAL_BLOCK_HEADER)dataBuffer;
; 38   :     static PBYTE pBlock = dataBuffer + sizeof(PSERIAL_BLOCK_HEADER);
; 39   : 
; 40   :     SERIAL_PACKET_HEADER header;
; 41   :     USHORT cbPacket;
; 42   : 
; 43   :     LPBYTE pOutBuffer = pbData;

  00024	e59d302c	 ldr         r3, [sp, #0x2C]
  00028	e58d3000	 str         r3, [sp]
  0002c		 |$LN12@SerialRead|

; 44   : 
; 45   :     while(cbData)

  0002c	e59d3028	 ldr         r3, [sp, #0x28]
  00030	e3530000	 cmp         r3, #0
  00034	0a000076	 beq         |$LN11@SerialRead|
  00038		 |$LN10@SerialRead|

; 46   :     {
; 47   :         // if there is no data in the local buffer, read some
; 48   :         //
; 49   :         while(0 == cbDataBuffer)

  00038	e59f31f4	 ldr         r3, [pc, #0x1F4]
  0003c	e1d330b0	 ldrh        r3, [r3]
  00040	e3530000	 cmp         r3, #0
  00044	1a00003c	 bne         |$LN9@SerialRead|

; 50   :         {
; 51   :              // read from port
; 52   :              cbPacket = sizeof(dataBuffer);

  00048	e3a03e5f	 mov         r3, #0x5F, 28
  0004c	e1cd30b4	 strh        r3, [sp, #4]

; 53   :              if(RecvPacket(&header, dataBuffer, &cbPacket, TRUE))

  00050	e3a03001	 mov         r3, #1
  00054	e28d2004	 add         r2, sp, #4
  00058	e59f11f0	 ldr         r1, [pc, #0x1F0]
  0005c	e28d0008	 add         r0, sp, #8
  00060	eb000000	 bl          |?RecvPacket@@YAHPAUtagSERIAL_PACKET_HEADER@@PAEPAGE@Z|
  00064	e58d001c	 str         r0, [sp, #0x1C]
  00068	e59d301c	 ldr         r3, [sp, #0x1C]
  0006c	e3530000	 cmp         r3, #0
  00070	0a000030	 beq         |$LN8@SerialRead|

; 54   :              {
; 55   :                 // ignore non-download packet types
; 56   :                 if(KS_PKT_DLPKT == header.pktType)

  00074	e5dd300c	 ldrb        r3, [sp, #0xC]
  00078	e35300cc	 cmp         r3, #0xCC
  0007c	1a000024	 bne         |$LN7@SerialRead|

; 57   :                 {
; 58   :                     // make sure we received the correct block in the sequence
; 59   :                     if(dwBlockNumber == pBlockHeader->uBlockNum)

  00080	e59f31b8	 ldr         r3, [pc, #0x1B8]
  00084	e5932000	 ldr         r2, [r3]
  00088	e59f31bc	 ldr         r3, [pc, #0x1BC]
  0008c	e5933000	 ldr         r3, [r3]
  00090	e5933000	 ldr         r3, [r3]
  00094	e1520003	 cmp         r2, r3
  00098	1a00000b	 bne         |$LN6@SerialRead|

; 60   :                     {
; 61   :                         cbDataBuffer = header.payloadSize - sizeof(SERIAL_BLOCK_HEADER);

  0009c	e1dd30be	 ldrh        r3, [sp, #0xE]
  000a0	e2433004	 sub         r3, r3, #4
  000a4	e1a02803	 mov         r2, r3, lsl #16
  000a8	e1a02822	 mov         r2, r2, lsr #16
  000ac	e59f3180	 ldr         r3, [pc, #0x180]
  000b0	e1c320b0	 strh        r2, [r3]

; 62   :                         dwBlockNumber++;

  000b4	e59f3184	 ldr         r3, [pc, #0x184]
  000b8	e5933000	 ldr         r3, [r3]
  000bc	e2832001	 add         r2, r3, #1
  000c0	e59f3178	 ldr         r3, [pc, #0x178]
  000c4	e5832000	 str         r2, [r3]

; 63   :                     }
; 64   :                     else

  000c8	ea000008	 b           |$LN5@SerialRead|
  000cc		 |$LN6@SerialRead|

; 65   :                     {
; 66   :                         KITLOutputDebugString("Received out of sequence block %u\r\n", pBlockHeader->uBlockNum);

  000cc	e59f3178	 ldr         r3, [pc, #0x178]
  000d0	e5933000	 ldr         r3, [r3]
  000d4	e5931000	 ldr         r1, [r3]
  000d8	e59f0168	 ldr         r0, [pc, #0x168]
  000dc	eb000000	 bl          KITLOutputDebugString

; 67   :                         KITLOutputDebugString("Expected block %u\r\n", dwBlockNumber);

  000e0	e59f3158	 ldr         r3, [pc, #0x158]
  000e4	e5931000	 ldr         r1, [r3]
  000e8	e59f0154	 ldr         r0, [pc, #0x154]
  000ec	eb000000	 bl          KITLOutputDebugString
  000f0		 |$LN5@SerialRead|

; 68   :                     }
; 69   : 
; 70   :                     // ack, or re-ack the sender
; 71   :                     if(dwBlockNumber > 0)

  000f0	e59f3148	 ldr         r3, [pc, #0x148]
  000f4	e5933000	 ldr         r3, [r3]
  000f8	e3530000	 cmp         r3, #0
  000fc	9a000003	 bls         |$LN4@SerialRead|

; 72   :                     {
; 73   :                         // block number has already been incremented when appropriate
; 74   :                         SerialSendBlockAck(dwBlockNumber - 1);

  00100	e59f3138	 ldr         r3, [pc, #0x138]
  00104	e5933000	 ldr         r3, [r3]
  00108	e2430001	 sub         r0, r3, #1
  0010c	eb000000	 bl          SerialSendBlockAck
  00110		 |$LN4@SerialRead|

; 75   :                     }
; 76   :                 }
; 77   :                 else

  00110	ea000008	 b           |$LN3@SerialRead|
  00114		 |$LN7@SerialRead|

; 78   :                 {
; 79   :                     //Error received non-download packet type
; 80   :                     KITLOutputDebugString("received non-download packet type 0x%X\r\n", header.pktType);

  00114	e5dd300c	 ldrb        r3, [sp, #0xC]
  00118	e1a01003	 mov         r1, r3
  0011c	e59f0118	 ldr         r0, [pc, #0x118]
  00120	eb000000	 bl          KITLOutputDebugString

; 81   :                     return FALSE;

  00124	e59d0014	 ldr         r0, [sp, #0x14]
  00128	eb000000	 bl          __security_check_cookie
  0012c	e3a03000	 mov         r3, #0
  00130	e58d3018	 str         r3, [sp, #0x18]
  00134	ea00003a	 b           |$LN13@SerialRead|
  00138		 |$LN3@SerialRead|
  00138		 |$LN8@SerialRead|

; 82   :                 }
; 83   :              }
; 84   :         }

  00138	eaffffbe	 b           |$LN10@SerialRead|
  0013c		 |$LN9@SerialRead|

; 85   : 
; 86   :         // copy from local buffer into output buffer
; 87   :         //
; 88   : 
; 89   :         // if there are more than the requested bytes, copy and shift
; 90   :         // the local data buffer
; 91   :         if(cbDataBuffer > cbData)

  0013c	e59f30f0	 ldr         r3, [pc, #0xF0]
  00140	e1d320b0	 ldrh        r2, [r3]
  00144	e59d3028	 ldr         r3, [sp, #0x28]
  00148	e1520003	 cmp         r2, r3
  0014c	9a00001b	 bls         |$LN2@SerialRead|

; 92   :         {
; 93   :             // copy requested bytes from local buffer into output buffer
; 94   :             memcpy(pOutBuffer, pBlock, cbData);

  00150	e59d2028	 ldr         r2, [sp, #0x28]
  00154	e59f30dc	 ldr         r3, [pc, #0xDC]
  00158	e5931000	 ldr         r1, [r3]
  0015c	e59d0000	 ldr         r0, [sp]
  00160	eb000000	 bl          memcpy

; 95   :             cbDataBuffer -= (USHORT)cbData;

  00164	e59d3028	 ldr         r3, [sp, #0x28]
  00168	e1a03803	 mov         r3, r3, lsl #16
  0016c	e1a03823	 mov         r3, r3, lsr #16
  00170	e1a02003	 mov         r2, r3
  00174	e59f30b8	 ldr         r3, [pc, #0xB8]
  00178	e1d330b0	 ldrh        r3, [r3]
  0017c	e0433002	 sub         r3, r3, r2
  00180	e1a02803	 mov         r2, r3, lsl #16
  00184	e1a02822	 mov         r2, r2, lsr #16
  00188	e59f30a4	 ldr         r3, [pc, #0xA4]
  0018c	e1c320b0	 strh        r2, [r3]

; 96   : 
; 97   :             // shift the local buffer accordingly because not all data was used
; 98   :             memmove(pBlock, pBlock + cbData, cbDataBuffer);

  00190	e59f309c	 ldr         r3, [pc, #0x9C]
  00194	e1d320b0	 ldrh        r2, [r3]
  00198	e59f3098	 ldr         r3, [pc, #0x98]
  0019c	e5931000	 ldr         r1, [r3]
  001a0	e59d3028	 ldr         r3, [sp, #0x28]
  001a4	e0811003	 add         r1, r1, r3
  001a8	e59f3088	 ldr         r3, [pc, #0x88]
  001ac	e5930000	 ldr         r0, [r3]
  001b0	eb000000	 bl          memmove

; 99   :             cbData = 0;

  001b4	e3a03000	 mov         r3, #0
  001b8	e58d3028	 str         r3, [sp, #0x28]

; 100  :         }
; 101  :         else // cbDataBuffer <= cbData

  001bc	ea000013	 b           |$LN1@SerialRead|
  001c0		 |$LN2@SerialRead|

; 102  :         {
; 103  :             // copy all bytes in local buffer to output buffer
; 104  :             memcpy(pOutBuffer, pBlock, cbDataBuffer);

  001c0	e59f306c	 ldr         r3, [pc, #0x6C]
  001c4	e1d320b0	 ldrh        r2, [r3]
  001c8	e59f3068	 ldr         r3, [pc, #0x68]
  001cc	e5931000	 ldr         r1, [r3]
  001d0	e59d0000	 ldr         r0, [sp]
  001d4	eb000000	 bl          memcpy

; 105  :             cbData -= cbDataBuffer;

  001d8	e59f3054	 ldr         r3, [pc, #0x54]
  001dc	e1d320b0	 ldrh        r2, [r3]
  001e0	e59d3028	 ldr         r3, [sp, #0x28]
  001e4	e0433002	 sub         r3, r3, r2
  001e8	e58d3028	 str         r3, [sp, #0x28]

; 106  :             pOutBuffer += cbDataBuffer;

  001ec	e59f3040	 ldr         r3, [pc, #0x40]
  001f0	e1d330b0	 ldrh        r3, [r3]
  001f4	e1a02003	 mov         r2, r3
  001f8	e59d3000	 ldr         r3, [sp]
  001fc	e0833002	 add         r3, r3, r2
  00200	e58d3000	 str         r3, [sp]

; 107  :             cbDataBuffer = 0;

  00204	e59f2028	 ldr         r2, [pc, #0x28]
  00208	e3a03000	 mov         r3, #0
  0020c	e1c230b0	 strh        r3, [r2]
  00210		 |$LN1@SerialRead|

; 108  :         }
; 109  :     }

  00210	eaffff85	 b           |$LN12@SerialRead|
  00214		 |$LN11@SerialRead|

; 110  : 
; 111  :     return TRUE;

  00214	e59d0014	 ldr         r0, [sp, #0x14]
  00218	eb000000	 bl          __security_check_cookie
  0021c	e3a03001	 mov         r3, #1
  00220	e58d3018	 str         r3, [sp, #0x18]
  00224		 |$LN13@SerialRead|

; 112  : }

  00224	e59d0018	 ldr         r0, [sp, #0x18]
  00228	e28dd020	 add         sp, sp, #0x20
  0022c	e89d6000	 ldmia       sp, {sp, lr}
  00230	e12fff1e	 bx          lr
  00234		 |$LN18@SerialRead|
  00234		 |$LN19@SerialRead|
  00234	00000000	 DCD         |?cbDataBuffer@?1??SerialReadData@@9@4GA|
  00238		 |$LN20@SerialRead|
  00238	00000000	 DCD         |?pBlock@?1??SerialReadData@@9@4PAEA|
  0023c		 |$LN21@SerialRead|
  0023c	00000000	 DCD         |??_C@_0CJ@CHGIGMLG@received?5non?9download?5packet?5typ@|
  00240		 |$LN22@SerialRead|
  00240	00000000	 DCD         |?dwBlockNumber@?1??SerialReadData@@9@4KA|
  00244		 |$LN23@SerialRead|
  00244	00000000	 DCD         |??_C@_0BE@KEIPDPMM@Expected?5block?5?$CFu?$AN?6?$AA@|
  00248		 |$LN24@SerialRead|
  00248	00000000	 DCD         |??_C@_0CE@HOCBBCP@Received?5out?5of?5sequence?5block?5?$CF@|
  0024c		 |$LN25@SerialRead|
  0024c	00000000	 DCD         |?pBlockHeader@?1??SerialReadData@@9@4PAUtagSERIAL_BLOCK_HEADER@@A|
  00250		 |$LN26@SerialRead|
  00250	00000000	 DCD         |?dataBuffer@?1??SerialReadData@@9@4PAEA|
  00254		 |$LN27@SerialRead|
  00254	00000000	 DCD         |__security_cookie|
  00258		 |$M32465|

			 ENDP  ; |SerialReadData|

	EXPORT	|?CalcChksum@@YAEPAEG@Z|		; CalcChksum

  00008			 AREA	 |.pdata|, PDATA
|$T32486| DCD	|$LN8@CalcChksum|
	DCD	0x40002604
; Function compile flags: /Odtp

  00258			 AREA	 |.text|, CODE, ARM

  00258		 |?CalcChksum@@YAEPAEG@Z| PROC		; CalcChksum

; 121  : {

  00258		 |$LN8@CalcChksum|
  00258	e1a0c00d	 mov         r12, sp
  0025c	e92d0003	 stmdb       sp!, {r0, r1}
  00260	e92d5000	 stmdb       sp!, {r12, lr}
  00264	e24dd008	 sub         sp, sp, #8
  00268		 |$M32483|

; 122  :     USHORT s = 0;

  00268	e3a03000	 mov         r3, #0
  0026c	e1cd30b0	 strh        r3, [sp]

; 123  :     UCHAR csum = 0;

  00270	e3a03000	 mov         r3, #0
  00274	e5cd3002	 strb        r3, [sp, #2]

; 124  : 
; 125  :     for(s = 0; s < len; s++)

  00278	e3a03000	 mov         r3, #0
  0027c	e1cd30b0	 strh        r3, [sp]
  00280	ea000004	 b           |$LN3@CalcChksum|
  00284		 |$LN2@CalcChksum|
  00284	e1dd30b0	 ldrh        r3, [sp]
  00288	e2833001	 add         r3, r3, #1
  0028c	e1a03803	 mov         r3, r3, lsl #16
  00290	e1a03823	 mov         r3, r3, lsr #16
  00294	e1cd30b0	 strh        r3, [sp]
  00298		 |$LN3@CalcChksum|
  00298	e1dd30b0	 ldrh        r3, [sp]
  0029c	e1a02003	 mov         r2, r3
  002a0	e1dd31b4	 ldrh        r3, [sp, #0x14]
  002a4	e1520003	 cmp         r2, r3
  002a8	aa00000a	 bge         |$LN1@CalcChksum|

; 126  :         csum += *(pBuf + s);

  002ac	e1dd30b0	 ldrh        r3, [sp]
  002b0	e1a02003	 mov         r2, r3
  002b4	e59d3010	 ldr         r3, [sp, #0x10]
  002b8	e0833002	 add         r3, r3, r2
  002bc	e5d33000	 ldrb        r3, [r3]
  002c0	e1a02003	 mov         r2, r3
  002c4	e5dd3002	 ldrb        r3, [sp, #2]
  002c8	e0833002	 add         r3, r3, r2
  002cc	e20330ff	 and         r3, r3, #0xFF
  002d0	e5cd3002	 strb        r3, [sp, #2]
  002d4	eaffffea	 b           |$LN2@CalcChksum|
  002d8		 |$LN1@CalcChksum|

; 127  : 
; 128  :     return csum;

  002d8	e5dd3002	 ldrb        r3, [sp, #2]
  002dc	e5cd3004	 strb        r3, [sp, #4]

; 129  : }

  002e0	e5dd0004	 ldrb        r0, [sp, #4]
  002e4	e28dd008	 add         sp, sp, #8
  002e8	e89d6000	 ldmia       sp, {sp, lr}
  002ec	e12fff1e	 bx          lr
  002f0		 |$M32484|

			 ENDP  ; |?CalcChksum@@YAEPAEG@Z|, CalcChksum

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|SerialSendBootRequest|
	IMPORT	|OEMSerialSendRaw|
	IMPORT	|strncpy|
	IMPORT	|memset|

  00010			 AREA	 |.pdata|, PDATA
|$T32495| DCD	|$LN5@SerialSend|
	DCD	0xc0004504

  00004			 AREA	 |.xdata|, DATA
|$T32491| DCD	0xffffffe8
; Function compile flags: /Odtp

  002f0			 AREA	 |.text|, CODE, ARM

  002f0	00000000	 DCD         |__GSHandlerCheck|
  002f4	00000000	 DCD         |$T32491|

  002f8		 |SerialSendBootRequest| PROC

; 137  : {

  002f8		 |$LN5@SerialSend|
  002f8	e1a0c00d	 mov         r12, sp
  002fc	e92d0001	 stmdb       sp!, {r0}
  00300	e92d5000	 stmdb       sp!, {r12, lr}
  00304	e24dd044	 sub         sp, sp, #0x44
  00308		 |$M32492|
  00308	e59f30f8	 ldr         r3, [pc, #0xF8]
  0030c	e5933000	 ldr         r3, [r3]
  00310	e58d3038	 str         r3, [sp, #0x38]

; 138  :     BYTE buffer[sizeof(SERIAL_PACKET_HEADER) + sizeof(SERIAL_BOOT_REQUEST)] = {0};

  00314	e3a03000	 mov         r3, #0
  00318	e5cd3008	 strb        r3, [sp, #8]
  0031c	e3a0202d	 mov         r2, #0x2D
  00320	e3a01000	 mov         r1, #0
  00324	e28d0009	 add         r0, sp, #9
  00328	eb000000	 bl          memset

; 139  :     PSERIAL_PACKET_HEADER pHeader = (PSERIAL_PACKET_HEADER)buffer;

  0032c	e28d3008	 add         r3, sp, #8
  00330	e58d3000	 str         r3, [sp]

; 140  :     PSERIAL_BOOT_REQUEST pBootReq = (PSERIAL_BOOT_REQUEST)(buffer + sizeof(SERIAL_PACKET_HEADER));

  00334	e28d3008	 add         r3, sp, #8
  00338	e283300a	 add         r3, r3, #0xA
  0033c	e58d3004	 str         r3, [sp, #4]

; 141  : 
; 142  :     // create boot request
; 143  :     strncpy((char *)pBootReq->PlatformId, platformString, sizeof(pBootReq->PlatformId));

  00340	e3a02011	 mov         r2, #0x11
  00344	e59d104c	 ldr         r1, [sp, #0x4C]
  00348	e59d0004	 ldr         r0, [sp, #4]
  0034c	eb000000	 bl          strncpy

; 144  :     pBootReq->PlatformId[ sizeof(pBootReq->PlatformId) - 1 ] = '\0';

  00350	e59d3004	 ldr         r3, [sp, #4]
  00354	e2832010	 add         r2, r3, #0x10
  00358	e3a03000	 mov         r3, #0
  0035c	e5c23000	 strb        r3, [r2]

; 145  : 
; 146  :     // create header
; 147  :     memcpy(pHeader->headerSig, packetHeaderSig, HEADER_SIG_BYTES);

  00360	e3a02004	 mov         r2, #4
  00364	e59f1098	 ldr         r1, [pc, #0x98]
  00368	e59d0000	 ldr         r0, [sp]
  0036c	eb000000	 bl          memcpy

; 148  :     pHeader->pktType = KS_PKT_DLREQ;

  00370	e59d3000	 ldr         r3, [sp]
  00374	e2832004	 add         r2, r3, #4
  00378	e3a030bb	 mov         r3, #0xBB
  0037c	e5c23000	 strb        r3, [r2]

; 149  :     pHeader->payloadSize = sizeof(SERIAL_BOOT_REQUEST);

  00380	e59d3000	 ldr         r3, [sp]
  00384	e2832006	 add         r2, r3, #6
  00388	e3a03024	 mov         r3, #0x24
  0038c	e5c23000	 strb        r3, [r2]
  00390	e1a03423	 mov         r3, r3, lsr #8
  00394	e5c23001	 strb        r3, [r2, #1]

; 150  :     pHeader->crcData = CalcChksum((PBYTE)pBootReq, sizeof(SERIAL_BOOT_REQUEST));

  00398	e3a01024	 mov         r1, #0x24
  0039c	e59d0004	 ldr         r0, [sp, #4]
  003a0	eb000000	 bl          |?CalcChksum@@YAEPAEG@Z|
  003a4	e5cd0040	 strb        r0, [sp, #0x40]
  003a8	e59d3000	 ldr         r3, [sp]
  003ac	e2832008	 add         r2, r3, #8
  003b0	e5dd3040	 ldrb        r3, [sp, #0x40]
  003b4	e5c23000	 strb        r3, [r2]

; 151  :     pHeader->crcHdr = CalcChksum((PBYTE)pHeader,
; 152  :         sizeof(SERIAL_PACKET_HEADER) - sizeof(pHeader->crcHdr));

  003b8	e3a01009	 mov         r1, #9
  003bc	e59d0000	 ldr         r0, [sp]
  003c0	eb000000	 bl          |?CalcChksum@@YAEPAEG@Z|
  003c4	e5cd0041	 strb        r0, [sp, #0x41]
  003c8	e59d3000	 ldr         r3, [sp]
  003cc	e2832009	 add         r2, r3, #9
  003d0	e5dd3041	 ldrb        r3, [sp, #0x41]
  003d4	e5c23000	 strb        r3, [r2]

; 153  : 
; 154  :     OEMSerialSendRaw(buffer, sizeof(SERIAL_PACKET_HEADER) + sizeof(SERIAL_BOOT_REQUEST));

  003d8	e3a0102e	 mov         r1, #0x2E
  003dc	e28d0008	 add         r0, sp, #8
  003e0	eb000000	 bl          OEMSerialSendRaw

; 155  : 
; 156  :     return TRUE;

  003e4	e59d0038	 ldr         r0, [sp, #0x38]
  003e8	eb000000	 bl          __security_check_cookie
  003ec	e3a03001	 mov         r3, #1
  003f0	e58d303c	 str         r3, [sp, #0x3C]

; 157  : }

  003f4	e59d003c	 ldr         r0, [sp, #0x3C]
  003f8	e28dd044	 add         sp, sp, #0x44
  003fc	e89d6000	 ldmia       sp, {sp, lr}
  00400	e12fff1e	 bx          lr
  00404		 |$LN6@SerialSend|
  00404		 |$LN7@SerialSend|
  00404	00000000	 DCD         |packetHeaderSig|
  00408		 |$LN8@SerialSend|
  00408	00000000	 DCD         |__security_cookie|
  0040c		 |$M32493|

			 ENDP  ; |SerialSendBootRequest|

	EXPORT	|__$ArrayPad$| [ DATA ]

  00018			 AREA	 |.pdata|, PDATA
|$T32506| DCD	|$LN5@SerialSend@2|
	DCD	0xc0005504

  00008			 AREA	 |.xdata|, DATA
|$T32502| DCD	0xffffffe8
; Function compile flags: /Odtp

  0040c			 AREA	 |.text|, CODE, ARM

  0040c	00000000	 DCD         |__GSHandlerCheck|
  00410	00000000	 DCD         |$T32502|

  00414		 |SerialSendBlockAck| PROC

; 166  : {

  00414		 |$LN5@SerialSend@2|
  00414	e1a0c00d	 mov         r12, sp
  00418	e92d0001	 stmdb       sp!, {r0}
  0041c	e92d5000	 stmdb       sp!, {r12, lr}
  00420	e24dd024	 sub         sp, sp, #0x24
  00424		 |$M32503|
  00424	e59f3138	 ldr         r3, [pc, #0x138]
  00428	e5933000	 ldr         r3, [r3]
  0042c	e58d3018	 str         r3, [sp, #0x18]

; 167  :     BYTE buffer[sizeof(SERIAL_PACKET_HEADER) + sizeof(SERIAL_BLOCK_HEADER)];
; 168  :     PSERIAL_PACKET_HEADER pHeader = (PSERIAL_PACKET_HEADER)buffer;

  00430	e28d3008	 add         r3, sp, #8
  00434	e58d3004	 str         r3, [sp, #4]

; 169  :     PBYTE pBlockAck = (buffer + sizeof(SERIAL_PACKET_HEADER));

  00438	e28d3008	 add         r3, sp, #8
  0043c	e283300a	 add         r3, r3, #0xA
  00440	e58d3000	 str         r3, [sp]

; 170  : 
; 171  :     // create block ack
; 172  :     pBlockAck[0] = (BYTE)(uBlockNumber >> 0) & 0xFF;

  00444	e59d302c	 ldr         r3, [sp, #0x2C]
  00448	e20330ff	 and         r3, r3, #0xFF
  0044c	e20330ff	 and         r3, r3, #0xFF
  00450	e20320ff	 and         r2, r3, #0xFF
  00454	e59d3000	 ldr         r3, [sp]
  00458	e5c32000	 strb        r2, [r3]

; 173  :     pBlockAck[1] = (BYTE)(uBlockNumber >> 8) & 0xFF;

  0045c	e59d302c	 ldr         r3, [sp, #0x2C]
  00460	e1a03423	 mov         r3, r3, lsr #8
  00464	e20330ff	 and         r3, r3, #0xFF
  00468	e20330ff	 and         r3, r3, #0xFF
  0046c	e20320ff	 and         r2, r3, #0xFF
  00470	e59d3000	 ldr         r3, [sp]
  00474	e2833001	 add         r3, r3, #1
  00478	e5c32000	 strb        r2, [r3]

; 174  :     pBlockAck[2] = (BYTE)(uBlockNumber >> 16) & 0xFF;

  0047c	e59d302c	 ldr         r3, [sp, #0x2C]
  00480	e1a03823	 mov         r3, r3, lsr #16
  00484	e20330ff	 and         r3, r3, #0xFF
  00488	e20330ff	 and         r3, r3, #0xFF
  0048c	e20320ff	 and         r2, r3, #0xFF
  00490	e59d3000	 ldr         r3, [sp]
  00494	e2833002	 add         r3, r3, #2
  00498	e5c32000	 strb        r2, [r3]

; 175  :     pBlockAck[3] = (BYTE)(uBlockNumber >> 24) & 0xFF;

  0049c	e59d302c	 ldr         r3, [sp, #0x2C]
  004a0	e1a03c23	 mov         r3, r3, lsr #24
  004a4	e20330ff	 and         r3, r3, #0xFF
  004a8	e20330ff	 and         r3, r3, #0xFF
  004ac	e20320ff	 and         r2, r3, #0xFF
  004b0	e59d3000	 ldr         r3, [sp]
  004b4	e2833003	 add         r3, r3, #3
  004b8	e5c32000	 strb        r2, [r3]

; 176  : 
; 177  :     // create header
; 178  :     memcpy(pHeader->headerSig, packetHeaderSig, HEADER_SIG_BYTES);

  004bc	e3a02004	 mov         r2, #4
  004c0	e59f1098	 ldr         r1, [pc, #0x98]
  004c4	e59d0004	 ldr         r0, [sp, #4]
  004c8	eb000000	 bl          memcpy

; 179  :     pHeader->pktType = KS_PKT_DLACK;

  004cc	e59d3004	 ldr         r3, [sp, #4]
  004d0	e2832004	 add         r2, r3, #4
  004d4	e3a030dd	 mov         r3, #0xDD
  004d8	e5c23000	 strb        r3, [r2]

; 180  :     pHeader->payloadSize = sizeof(SERIAL_BLOCK_HEADER);

  004dc	e59d3004	 ldr         r3, [sp, #4]
  004e0	e2832006	 add         r2, r3, #6
  004e4	e3a03004	 mov         r3, #4
  004e8	e5c23000	 strb        r3, [r2]
  004ec	e1a03423	 mov         r3, r3, lsr #8
  004f0	e5c23001	 strb        r3, [r2, #1]

; 181  :     pHeader->crcData = CalcChksum((PBYTE)pBlockAck, sizeof(SERIAL_BLOCK_HEADER));

  004f4	e3a01004	 mov         r1, #4
  004f8	e59d0000	 ldr         r0, [sp]
  004fc	eb000000	 bl          |?CalcChksum@@YAEPAEG@Z|
  00500	e5cd0020	 strb        r0, [sp, #0x20]
  00504	e59d3004	 ldr         r3, [sp, #4]
  00508	e2832008	 add         r2, r3, #8
  0050c	e5dd3020	 ldrb        r3, [sp, #0x20]
  00510	e5c23000	 strb        r3, [r2]

; 182  :     pHeader->crcHdr = CalcChksum((PBYTE)pHeader,
; 183  :         sizeof(SERIAL_PACKET_HEADER) - sizeof(pHeader->crcHdr));

  00514	e3a01009	 mov         r1, #9
  00518	e59d0004	 ldr         r0, [sp, #4]
  0051c	eb000000	 bl          |?CalcChksum@@YAEPAEG@Z|
  00520	e5cd0021	 strb        r0, [sp, #0x21]
  00524	e59d3004	 ldr         r3, [sp, #4]
  00528	e2832009	 add         r2, r3, #9
  0052c	e5dd3021	 ldrb        r3, [sp, #0x21]
  00530	e5c23000	 strb        r3, [r2]

; 184  : 
; 185  :     OEMSerialSendRaw(buffer, sizeof(SERIAL_PACKET_HEADER) + sizeof(SERIAL_BLOCK_HEADER));

  00534	e3a0100e	 mov         r1, #0xE
  00538	e28d0008	 add         r0, sp, #8
  0053c	eb000000	 bl          OEMSerialSendRaw

; 186  : 
; 187  :     return TRUE;

  00540	e59d0018	 ldr         r0, [sp, #0x18]
  00544	eb000000	 bl          __security_check_cookie
  00548	e3a03001	 mov         r3, #1
  0054c	e58d301c	 str         r3, [sp, #0x1C]

; 188  : }

  00550	e59d001c	 ldr         r0, [sp, #0x1C]
  00554	e28dd024	 add         sp, sp, #0x24
  00558	e89d6000	 ldmia       sp, {sp, lr}
  0055c	e12fff1e	 bx          lr
  00560		 |$LN6@SerialSend@2|
  00560		 |$LN7@SerialSend@2|
  00560	00000000	 DCD         |packetHeaderSig|
  00564		 |$LN8@SerialSend@2|
  00564	00000000	 DCD         |__security_cookie|
  00568		 |$M32504|

			 ENDP  ; |SerialSendBlockAck|

	EXPORT	|??_C@_0BK@IPKIMKPH@Waiting?5for?5boot?5ack?4?4?4?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|SerialWaitForBootAck|

  00020			 AREA	 |.pdata|, PDATA
|$T32517| DCD	|$LN7@SerialWait|
	DCD	0xc0003904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BK@IPKIMKPH@Waiting?5for?5boot?5ack?4?4?4?$AN?6?$AA@| DCB "Waitin"
	DCB	"g for boot ack...", 0xd, 0xa, 0x0	; `string'

  0000c			 AREA	 |.xdata|, DATA
|$T32513| DCD	0xffffffe8
; Function compile flags: /Odtp

  00568			 AREA	 |.text|, CODE, ARM

  00568	00000000	 DCD         |__GSHandlerCheck|
  0056c	00000000	 DCD         |$T32513|

  00570		 |SerialWaitForBootAck| PROC

; 199  : {

  00570		 |$LN7@SerialWait|
  00570	e1a0c00d	 mov         r12, sp
  00574	e92d0001	 stmdb       sp!, {r0}
  00578	e92d5000	 stmdb       sp!, {r12, lr}
  0057c	e24dd024	 sub         sp, sp, #0x24
  00580		 |$M32514|
  00580	e59f30c8	 ldr         r3, [pc, #0xC8]
  00584	e5933000	 ldr         r3, [r3]
  00588	e58d3018	 str         r3, [sp, #0x18]

; 200  :     BOOL fRet = FALSE;

  0058c	e3a03000	 mov         r3, #0
  00590	e58d3008	 str         r3, [sp, #8]

; 201  :     USHORT cbBuffer = KITL_MTU;

  00594	e3a03e5f	 mov         r3, #0x5F, 28
  00598	e1cd30b4	 strh        r3, [sp, #4]

; 202  :     SERIAL_PACKET_HEADER header = {0};

  0059c	e3a03000	 mov         r3, #0
  005a0	e5cd300c	 strb        r3, [sp, #0xC]
  005a4	e3a02003	 mov         r2, #3
  005a8	e3a01000	 mov         r1, #0
  005ac	e28d000d	 add         r0, sp, #0xD
  005b0	eb000000	 bl          memset
  005b4	e3a02006	 mov         r2, #6
  005b8	e3a01000	 mov         r1, #0
  005bc	e28d0010	 add         r0, sp, #0x10
  005c0	eb000000	 bl          memset

; 203  :     PSERIAL_BOOT_ACK pBootAck = (PSERIAL_BOOT_ACK)g_buffer;

  005c4	e59f307c	 ldr         r3, [pc, #0x7C]
  005c8	e58d3000	 str         r3, [sp]

; 204  : 
; 205  :     KITLOutputDebugString("Waiting for boot ack...\r\n");

  005cc	e59f0078	 ldr         r0, [pc, #0x78]
  005d0	eb000000	 bl          KITLOutputDebugString

; 206  :     if(RecvPacket(&header, g_buffer, &cbBuffer, FALSE))

  005d4	e3a03000	 mov         r3, #0
  005d8	e28d2004	 add         r2, sp, #4
  005dc	e59f1064	 ldr         r1, [pc, #0x64]
  005e0	e28d000c	 add         r0, sp, #0xC
  005e4	eb000000	 bl          |?RecvPacket@@YAHPAUtagSERIAL_PACKET_HEADER@@PAEPAGE@Z|
  005e8	e58d0020	 str         r0, [sp, #0x20]
  005ec	e59d3020	 ldr         r3, [sp, #0x20]
  005f0	e3530000	 cmp         r3, #0
  005f4	0a00000b	 beq         |$LN2@SerialWait|

; 207  :     {
; 208  :         // header checksum already verified
; 209  :         if(KS_PKT_DLACK == header.pktType &&
; 210  :             sizeof(SERIAL_BOOT_ACK) == header.payloadSize)

  005f8	e5dd3010	 ldrb        r3, [sp, #0x10]
  005fc	e35300dd	 cmp         r3, #0xDD
  00600	1a000008	 bne         |$LN1@SerialWait|
  00604	e1dd31b2	 ldrh        r3, [sp, #0x12]
  00608	e3530004	 cmp         r3, #4
  0060c	1a000005	 bne         |$LN1@SerialWait|

; 211  :         {
; 212  :             *pfJump = pBootAck->fJumping;

  00610	e59d3000	 ldr         r3, [sp]
  00614	e5932000	 ldr         r2, [r3]
  00618	e59d302c	 ldr         r3, [sp, #0x2C]
  0061c	e5832000	 str         r2, [r3]

; 213  :             fRet = TRUE;

  00620	e3a03001	 mov         r3, #1
  00624	e58d3008	 str         r3, [sp, #8]
  00628		 |$LN1@SerialWait|
  00628		 |$LN2@SerialWait|

; 214  :         }
; 215  :     }
; 216  : 
; 217  :     return fRet;

  00628	e59d0018	 ldr         r0, [sp, #0x18]
  0062c	eb000000	 bl          __security_check_cookie
  00630	e59d3008	 ldr         r3, [sp, #8]
  00634	e58d301c	 str         r3, [sp, #0x1C]

; 218  : }

  00638	e59d001c	 ldr         r0, [sp, #0x1C]
  0063c	e28dd024	 add         sp, sp, #0x24
  00640	e89d6000	 ldmia       sp, {sp, lr}
  00644	e12fff1e	 bx          lr
  00648		 |$LN8@SerialWait|
  00648		 |$LN9@SerialWait|
  00648	00000000	 DCD         |?g_buffer@@3PAEA|
  0064c		 |$LN10@SerialWait|
  0064c	00000000	 DCD         |??_C@_0BK@IPKIMKPH@Waiting?5for?5boot?5ack?4?4?4?$AN?6?$AA@|
  00650		 |$LN11@SerialWait|
  00650	00000000	 DCD         |__security_cookie|
  00654		 |$M32515|

			 ENDP  ; |SerialWaitForBootAck|

	EXPORT	|??_C@_0CK@DMEOPGMB@Got?5jump?5request?0?5KITL?5transport@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|SerialWaitForJump|

  00028			 AREA	 |.pdata|, PDATA
|$T32529| DCD	|$LN9@SerialWait@2|
	DCD	0xc0003a02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CK@DMEOPGMB@Got?5jump?5request?0?5KITL?5transport@| DCB "Got jump"
	DCB	" request, KITL transport = 0x%x", 0xd, 0xa, 0x0 ; `string'

  00010			 AREA	 |.xdata|, DATA
|$T32525| DCD	0xfffffff0
; Function compile flags: /Odtp

  00654			 AREA	 |.text|, CODE, ARM

  00654	00000000	 DCD         |__GSHandlerCheck|
  00658	00000000	 DCD         |$T32525|

  0065c		 |SerialWaitForJump| PROC

; 230  : {

  0065c		 |$LN9@SerialWait@2|
  0065c	e52de004	 str         lr, [sp, #-4]!
  00660	e24dd020	 sub         sp, sp, #0x20
  00664		 |$M32526|
  00664	e59f30d4	 ldr         r3, [pc, #0xD4]
  00668	e5933000	 ldr         r3, [r3]
  0066c	e58d3014	 str         r3, [sp, #0x14]

; 231  :     USHORT cbBuffer = KITL_MTU;

  00670	e3a03e5f	 mov         r3, #0x5F, 28
  00674	e1cd30b0	 strh        r3, [sp]

; 232  :     SERIAL_PACKET_HEADER header = {0};

  00678	e3a03000	 mov         r3, #0
  0067c	e5cd3008	 strb        r3, [sp, #8]
  00680	e3a02003	 mov         r2, #3
  00684	e3a01000	 mov         r1, #0
  00688	e28d0009	 add         r0, sp, #9
  0068c	eb000000	 bl          memset
  00690	e3a02006	 mov         r2, #6
  00694	e3a01000	 mov         r1, #0
  00698	e28d000c	 add         r0, sp, #0xC
  0069c	eb000000	 bl          memset

; 233  :     PSERIAL_JUMP_REQUEST pJumpReq = (PSERIAL_JUMP_REQUEST)g_buffer;

  006a0	e59f3094	 ldr         r3, [pc, #0x94]
  006a4	e58d3004	 str         r3, [sp, #4]
  006a8		 |$LN4@SerialWait@2|

; 234  : 
; 235  :     // wait indefinitely for a jump request
; 236  :     while(1)
; 237  :     {
; 238  :         if(RecvPacket(&header, g_buffer, &cbBuffer, TRUE))

  006a8	e3a03001	 mov         r3, #1
  006ac	e28d2000	 add         r2, sp, #0
  006b0	e59f1084	 ldr         r1, [pc, #0x84]
  006b4	e28d0008	 add         r0, sp, #8
  006b8	eb000000	 bl          |?RecvPacket@@YAHPAUtagSERIAL_PACKET_HEADER@@PAEPAGE@Z|
  006bc	e58d001c	 str         r0, [sp, #0x1C]
  006c0	e59d301c	 ldr         r3, [sp, #0x1C]
  006c4	e3530000	 cmp         r3, #0
  006c8	0a000011	 beq         |$LN2@SerialWait@2|

; 239  :         {
; 240  :             // header & checksum already verified
; 241  :             if(KS_PKT_JUMP == header.pktType &&
; 242  :                 sizeof(SERIAL_JUMP_REQUEST) == header.payloadSize)

  006cc	e5dd300c	 ldrb        r3, [sp, #0xC]
  006d0	e35300ee	 cmp         r3, #0xEE
  006d4	1a00000e	 bne         |$LN1@SerialWait@2|
  006d8	e1dd30be	 ldrh        r3, [sp, #0xE]
  006dc	e3530004	 cmp         r3, #4
  006e0	1a00000b	 bne         |$LN1@SerialWait@2|

; 243  :             {
; 244  :                 SerialSendBlockAck(0);

  006e4	e3a00000	 mov         r0, #0
  006e8	eb000000	 bl          SerialSendBlockAck

; 245  :                 KITLOutputDebugString("Got jump request, KITL transport = 0x%x\r\n",
; 246  :                     pJumpReq->dwKitlTransport);

  006ec	e59d3004	 ldr         r3, [sp, #4]
  006f0	e5931000	 ldr         r1, [r3]
  006f4	e59f003c	 ldr         r0, [pc, #0x3C]
  006f8	eb000000	 bl          KITLOutputDebugString

; 247  :                 return pJumpReq->dwKitlTransport;

  006fc	e59d0014	 ldr         r0, [sp, #0x14]
  00700	eb000000	 bl          __security_check_cookie
  00704	e59d3004	 ldr         r3, [sp, #4]
  00708	e5933000	 ldr         r3, [r3]
  0070c	e58d3018	 str         r3, [sp, #0x18]
  00710	ea000004	 b           |$LN5@SerialWait@2|
  00714		 |$LN1@SerialWait@2|
  00714		 |$LN2@SerialWait@2|

; 248  :             }
; 249  :         }
; 250  :     }

  00714	eaffffe3	 b           |$LN4@SerialWait@2|

; 251  : 
; 252  :     // never reached
; 253  :     return KTS_NONE;

  00718	e59d0014	 ldr         r0, [sp, #0x14]
  0071c	eb000000	 bl          __security_check_cookie
  00720	e3a0303f	 mov         r3, #0x3F
  00724	e58d3018	 str         r3, [sp, #0x18]
  00728		 |$LN5@SerialWait@2|

; 254  : }

  00728	e59d0018	 ldr         r0, [sp, #0x18]
  0072c	e28dd020	 add         sp, sp, #0x20
  00730	e49de004	 ldr         lr, [sp], #4
  00734	e12fff1e	 bx          lr
  00738		 |$LN10@SerialWait@2|
  00738		 |$LN11@SerialWait@2|
  00738	00000000	 DCD         |??_C@_0CK@DMEOPGMB@Got?5jump?5request?0?5KITL?5transport@|
  0073c		 |$LN12@SerialWait@2|
  0073c	00000000	 DCD         |?g_buffer@@3PAEA|
  00740		 |$LN13@SerialWait@2|
  00740	00000000	 DCD         |__security_cookie|
  00744		 |$M32527|

			 ENDP  ; |SerialWaitForJump|

	EXPORT	|??_C@_0DG@MLEBFPEB@data?5checksum?5failure?4?5expected?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BN@FEFEJPIP@failed?5to?5read?5packet?5data?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CM@DECDFMCF@insufficient?5buffer?5size?$DL?5ignori@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BK@JKGMIDGI@header?5checksum?5failure?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BL@MMGBDAGN@failed?5to?5receive?5header?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|?RecvHeader@@YAHPAUtagSERIAL_PACKET_HEADER@@E@Z| ; RecvHeader
	IMPORT	|OEMSerialRecvRaw|

  00030			 AREA	 |.pdata|, PDATA
|$T32539| DCD	|$LN11@RecvPacket|
	DCD	0x40008904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DG@MLEBFPEB@data?5checksum?5failure?4?5expected?5@| DCB "data che"
	DCB	"cksum failure. expected 0x%X, received 0x%X", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BN@FEFEJPIP@failed?5to?5read?5packet?5data?$AN?6?$AA@| DCB "faile"
	DCB	"d to read packet data", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CM@DECDFMCF@insufficient?5buffer?5size?$DL?5ignori@| DCB "insuffi"
	DCB	"cient buffer size; ignoring packet", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BK@JKGMIDGI@header?5checksum?5failure?$AN?6?$AA@| DCB "header che"
	DCB	"cksum failure", 0xd, 0xa, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BL@MMGBDAGN@failed?5to?5receive?5header?$AN?6?$AA@| DCB "failed t"
	DCB	"o receive header", 0xd, 0xa, 0x0	; `string'
; Function compile flags: /Odtp

  00744			 AREA	 |.text|, CODE, ARM

  00744		 |?RecvPacket@@YAHPAUtagSERIAL_PACKET_HEADER@@PAEPAGE@Z| PROC ; RecvPacket

; 264  : {

  00744		 |$LN11@RecvPacket|
  00744	e1a0c00d	 mov         r12, sp
  00748	e92d000f	 stmdb       sp!, {r0 - r3}
  0074c	e92d5000	 stmdb       sp!, {r12, lr}
  00750	e24dd014	 sub         sp, sp, #0x14
  00754		 |$M32536|

; 265  :     // receive header
; 266  :     if(!RecvHeader(pHeader, bWaitInfinite))

  00754	e5dd1028	 ldrb        r1, [sp, #0x28]
  00758	e59d001c	 ldr         r0, [sp, #0x1C]
  0075c	eb000000	 bl          |?RecvHeader@@YAHPAUtagSERIAL_PACKET_HEADER@@E@Z|
  00760	e58d0004	 str         r0, [sp, #4]
  00764	e59d3004	 ldr         r3, [sp, #4]
  00768	e3530000	 cmp         r3, #0
  0076c	1a000004	 bne         |$LN6@RecvPacket|

; 267  :     {
; 268  :         KITLOutputDebugString("failed to receive header\r\n");

  00770	e59f01ec	 ldr         r0, [pc, #0x1EC]
  00774	eb000000	 bl          KITLOutputDebugString

; 269  :         return FALSE;

  00778	e3a03000	 mov         r3, #0
  0077c	e58d3000	 str         r3, [sp]
  00780	ea00006e	 b           |$LN7@RecvPacket|
  00784		 |$LN6@RecvPacket|

; 270  :     }
; 271  : 
; 272  :     // verify packet checksum
; 273  :     if(pHeader->crcHdr != CalcChksum((PBYTE)pHeader,
; 274  :         sizeof(SERIAL_PACKET_HEADER) - sizeof(pHeader->crcHdr)))

  00784	e3a01009	 mov         r1, #9
  00788	e59d001c	 ldr         r0, [sp, #0x1C]
  0078c	eb000000	 bl          |?CalcChksum@@YAEPAEG@Z|
  00790	e5cd0008	 strb        r0, [sp, #8]
  00794	e59d301c	 ldr         r3, [sp, #0x1C]
  00798	e2833009	 add         r3, r3, #9
  0079c	e5d33000	 ldrb        r3, [r3]
  007a0	e1a02003	 mov         r2, r3
  007a4	e5dd3008	 ldrb        r3, [sp, #8]
  007a8	e1520003	 cmp         r2, r3
  007ac	0a000004	 beq         |$LN5@RecvPacket|

; 275  :     {
; 276  :         KITLOutputDebugString("header checksum failure\r\n");

  007b0	e59f01a8	 ldr         r0, [pc, #0x1A8]
  007b4	eb000000	 bl          KITLOutputDebugString

; 277  :         return FALSE;

  007b8	e3a03000	 mov         r3, #0
  007bc	e58d3000	 str         r3, [sp]
  007c0	ea00005e	 b           |$LN7@RecvPacket|
  007c4		 |$LN5@RecvPacket|

; 278  :     }
; 279  : 
; 280  :     // make sure sufficient buffer is provided
; 281  :     if(*pcbFrame < pHeader->payloadSize)

  007c4	e59d3024	 ldr         r3, [sp, #0x24]
  007c8	e1d330b0	 ldrh        r3, [r3]
  007cc	e1a00003	 mov         r0, r3
  007d0	e59d301c	 ldr         r3, [sp, #0x1C]
  007d4	e2831006	 add         r1, r3, #6
  007d8	e5d13001	 ldrb        r3, [r1, #1]
  007dc	e1a03403	 mov         r3, r3, lsl #8
  007e0	e1a02803	 mov         r2, r3, lsl #16
  007e4	e1a02822	 mov         r2, r2, lsr #16
  007e8	e5d13000	 ldrb        r3, [r1]
  007ec	e1833002	 orr         r3, r3, r2
  007f0	e1500003	 cmp         r0, r3
  007f4	aa000004	 bge         |$LN4@RecvPacket|

; 282  :     {
; 283  :         KITLOutputDebugString("insufficient buffer size; ignoring packet\r\n");

  007f8	e59f015c	 ldr         r0, [pc, #0x15C]
  007fc	eb000000	 bl          KITLOutputDebugString

; 284  :         return FALSE;

  00800	e3a03000	 mov         r3, #0
  00804	e58d3000	 str         r3, [sp]
  00808	ea00004c	 b           |$LN7@RecvPacket|
  0080c		 |$LN4@RecvPacket|

; 285  :     }
; 286  : 
; 287  :     // receive data
; 288  :     *pcbFrame = pHeader->payloadSize;

  0080c	e59d301c	 ldr         r3, [sp, #0x1C]
  00810	e2831006	 add         r1, r3, #6
  00814	e5d13001	 ldrb        r3, [r1, #1]
  00818	e1a03403	 mov         r3, r3, lsl #8
  0081c	e1a02803	 mov         r2, r3, lsl #16
  00820	e1a02822	 mov         r2, r2, lsr #16
  00824	e5d13000	 ldrb        r3, [r1]
  00828	e1832002	 orr         r2, r3, r2
  0082c	e59d3024	 ldr         r3, [sp, #0x24]
  00830	e1c320b0	 strh        r2, [r3]

; 289  :     if(!OEMSerialRecvRaw(pbFrame, pcbFrame, bWaitInfinite))

  00834	e5dd2028	 ldrb        r2, [sp, #0x28]
  00838	e59d1024	 ldr         r1, [sp, #0x24]
  0083c	e59d0020	 ldr         r0, [sp, #0x20]
  00840	eb000000	 bl          OEMSerialRecvRaw
  00844	e58d000c	 str         r0, [sp, #0xC]
  00848	e59d300c	 ldr         r3, [sp, #0xC]
  0084c	e3530000	 cmp         r3, #0
  00850	1a000004	 bne         |$LN3@RecvPacket|

; 290  :     {
; 291  :         KITLOutputDebugString("failed to read packet data\r\n");

  00854	e59f00fc	 ldr         r0, [pc, #0xFC]
  00858	eb000000	 bl          KITLOutputDebugString

; 292  :         return FALSE;

  0085c	e3a03000	 mov         r3, #0
  00860	e58d3000	 str         r3, [sp]
  00864	ea000035	 b           |$LN7@RecvPacket|
  00868		 |$LN3@RecvPacket|

; 293  :     }
; 294  : 
; 295  :     // verify data checksum
; 296  :     if(pHeader->crcData != CalcChksum(pbFrame, *pcbFrame))

  00868	e59d3024	 ldr         r3, [sp, #0x24]
  0086c	e1d310b0	 ldrh        r1, [r3]
  00870	e59d0020	 ldr         r0, [sp, #0x20]
  00874	eb000000	 bl          |?CalcChksum@@YAEPAEG@Z|
  00878	e5cd0010	 strb        r0, [sp, #0x10]
  0087c	e59d301c	 ldr         r3, [sp, #0x1C]
  00880	e2833008	 add         r3, r3, #8
  00884	e5d33000	 ldrb        r3, [r3]
  00888	e1a02003	 mov         r2, r3
  0088c	e5dd3010	 ldrb        r3, [sp, #0x10]
  00890	e1520003	 cmp         r2, r3
  00894	0a00000f	 beq         |$LN2@RecvPacket|

; 297  :     {
; 298  :         KITLOutputDebugString("data checksum failure. expected 0x%X, received 0x%X\r\n",pHeader->crcData,CalcChksum(pbFrame,*pcbFrame));

  00898	e59d3024	 ldr         r3, [sp, #0x24]
  0089c	e1d310b0	 ldrh        r1, [r3]
  008a0	e59d0020	 ldr         r0, [sp, #0x20]
  008a4	eb000000	 bl          |?CalcChksum@@YAEPAEG@Z|
  008a8	e5cd0011	 strb        r0, [sp, #0x11]
  008ac	e5dd3011	 ldrb        r3, [sp, #0x11]
  008b0	e1a02003	 mov         r2, r3
  008b4	e59d301c	 ldr         r3, [sp, #0x1C]
  008b8	e2833008	 add         r3, r3, #8
  008bc	e5d33000	 ldrb        r3, [r3]
  008c0	e1a01003	 mov         r1, r3
  008c4	e59f0088	 ldr         r0, [pc, #0x88]
  008c8	eb000000	 bl          KITLOutputDebugString

; 299  :         return FALSE;

  008cc	e3a03000	 mov         r3, #0
  008d0	e58d3000	 str         r3, [sp]
  008d4	ea000019	 b           |$LN7@RecvPacket|
  008d8		 |$LN2@RecvPacket|

; 300  :     }
; 301  : 
; 302  :     // verify packet type -- don't return any packet that is not
; 303  :     // a type the bootloader expects to receive
; 304  :     if(KS_PKT_DLPKT != pHeader->pktType &&
; 305  :        KS_PKT_DLACK != pHeader->pktType &&
; 306  :        KS_PKT_JUMP != pHeader->pktType)

  008d8	e59d301c	 ldr         r3, [sp, #0x1C]
  008dc	e2833004	 add         r3, r3, #4
  008e0	e5d33000	 ldrb        r3, [r3]
  008e4	e35300cc	 cmp         r3, #0xCC
  008e8	0a000012	 beq         |$LN1@RecvPacket|
  008ec	e59d301c	 ldr         r3, [sp, #0x1C]
  008f0	e2833004	 add         r3, r3, #4
  008f4	e5d33000	 ldrb        r3, [r3]
  008f8	e35300dd	 cmp         r3, #0xDD
  008fc	0a00000d	 beq         |$LN1@RecvPacket|
  00900	e59d301c	 ldr         r3, [sp, #0x1C]
  00904	e2833004	 add         r3, r3, #4
  00908	e5d33000	 ldrb        r3, [r3]
  0090c	e35300ee	 cmp         r3, #0xEE
  00910	0a000008	 beq         |$LN1@RecvPacket|

; 307  :     {
; 308  :         KITLOutputDebugString("received non-download packet type 0x%X\r\n", pHeader->pktType);

  00914	e59d301c	 ldr         r3, [sp, #0x1C]
  00918	e2833004	 add         r3, r3, #4
  0091c	e5d33000	 ldrb        r3, [r3]
  00920	e1a01003	 mov         r1, r3
  00924	e59f0024	 ldr         r0, [pc, #0x24]
  00928	eb000000	 bl          KITLOutputDebugString

; 309  :         return FALSE;

  0092c	e3a03000	 mov         r3, #0
  00930	e58d3000	 str         r3, [sp]
  00934	ea000001	 b           |$LN7@RecvPacket|
  00938		 |$LN1@RecvPacket|

; 310  :     }
; 311  : 
; 312  :     return TRUE;

  00938	e3a03001	 mov         r3, #1
  0093c	e58d3000	 str         r3, [sp]
  00940		 |$LN7@RecvPacket|

; 313  : }

  00940	e59d0000	 ldr         r0, [sp]
  00944	e28dd014	 add         sp, sp, #0x14
  00948	e89d6000	 ldmia       sp, {sp, lr}
  0094c	e12fff1e	 bx          lr
  00950		 |$LN12@RecvPacket|
  00950		 |$LN13@RecvPacket|
  00950	00000000	 DCD         |??_C@_0CJ@CHGIGMLG@received?5non?9download?5packet?5typ@|
  00954		 |$LN14@RecvPacket|
  00954	00000000	 DCD         |??_C@_0DG@MLEBFPEB@data?5checksum?5failure?4?5expected?5@|
  00958		 |$LN15@RecvPacket|
  00958	00000000	 DCD         |??_C@_0BN@FEFEJPIP@failed?5to?5read?5packet?5data?$AN?6?$AA@|
  0095c		 |$LN16@RecvPacket|
  0095c	00000000	 DCD         |??_C@_0CM@DECDFMCF@insufficient?5buffer?5size?$DL?5ignori@|
  00960		 |$LN17@RecvPacket|
  00960	00000000	 DCD         |??_C@_0BK@JKGMIDGI@header?5checksum?5failure?$AN?6?$AA@|
  00964		 |$LN18@RecvPacket|
  00964	00000000	 DCD         |??_C@_0BL@MMGBDAGN@failed?5to?5receive?5header?$AN?6?$AA@|
  00968		 |$M32537|

			 ENDP  ; |?RecvPacket@@YAHPAUtagSERIAL_PACKET_HEADER@@PAEPAGE@Z|, RecvPacket

	EXPORT	|??_C@_0BH@MJPKDDID@header?5checksum?5fail?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CA@LIHOEDHI@failed?5to?5receive?5header?5data?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CF@PODCGAIM@failed?5to?5receive?5header?5signatu@| [ DATA ] ; `string'

  00038			 AREA	 |.pdata|, PDATA
|$T32552| DCD	|$LN14@RecvHeader|
	DCD	0x40005c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BH@MJPKDDID@header?5checksum?5fail?$AN?6?$AA@| DCB "header checks"
	DCB	"um fail", 0xd, 0xa, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@LIHOEDHI@failed?5to?5receive?5header?5data?$AN?6?$AA@| DCB "fa"
	DCB	"iled to receive header data", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CF@PODCGAIM@failed?5to?5receive?5header?5signatu@| DCB "failed to"
	DCB	" receive header signature", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  00968			 AREA	 |.text|, CODE, ARM

  00968		 |?RecvHeader@@YAHPAUtagSERIAL_PACKET_HEADER@@E@Z| PROC ; RecvHeader

; 323  : {

  00968		 |$LN14@RecvHeader|
  00968	e1a0c00d	 mov         r12, sp
  0096c	e92d0003	 stmdb       sp!, {r0, r1}
  00970	e92d5000	 stmdb       sp!, {r12, lr}
  00974	e24dd018	 sub         sp, sp, #0x18
  00978		 |$M32549|

; 324  :     USHORT cbRead;
; 325  :     UINT i = 0;

  00978	e3a03000	 mov         r3, #0
  0097c	e58d3000	 str         r3, [sp]

; 326  :     cbRead = sizeof(UCHAR);

  00980	e3a03001	 mov         r3, #1
  00984	e1cd30b4	 strh        r3, [sp, #4]
  00988		 |$LN9@RecvHeader|

; 327  : 
; 328  :     // read the header bytes
; 329  :     while(i < HEADER_SIG_BYTES)

  00988	e59d3000	 ldr         r3, [sp]
  0098c	e3530004	 cmp         r3, #4
  00990	2a000023	 bcs         |$LN8@RecvHeader|

; 330  :     {
; 331  :         if(!OEMSerialRecvRaw((PBYTE)&(pHeader->headerSig[i]), &cbRead, bWaitInfinite) || sizeof(UCHAR) != cbRead)

  00994	e5dd2024	 ldrb        r2, [sp, #0x24]
  00998	e28d1004	 add         r1, sp, #4
  0099c	e59d0020	 ldr         r0, [sp, #0x20]
  009a0	e59d3000	 ldr         r3, [sp]
  009a4	e0800003	 add         r0, r0, r3
  009a8	eb000000	 bl          OEMSerialRecvRaw
  009ac	e58d000c	 str         r0, [sp, #0xC]
  009b0	e59d300c	 ldr         r3, [sp, #0xC]
  009b4	e3530000	 cmp         r3, #0
  009b8	0a000002	 beq         |$LN6@RecvHeader|
  009bc	e1dd30b4	 ldrh        r3, [sp, #4]
  009c0	e3530001	 cmp         r3, #1
  009c4	0a000004	 beq         |$LN7@RecvHeader|
  009c8		 |$LN6@RecvHeader|

; 332  :         {
; 333  :             KITLOutputDebugString("failed to receive header signature\r\n");

  009c8	e59f0104	 ldr         r0, [pc, #0x104]
  009cc	eb000000	 bl          KITLOutputDebugString

; 334  :             return FALSE;

  009d0	e3a03000	 mov         r3, #0
  009d4	e58d3008	 str         r3, [sp, #8]
  009d8	ea000036	 b           |$LN10@RecvHeader|
  009dc		 |$LN7@RecvHeader|

; 335  :         }
; 336  : 
; 337  :         if(pHeader->headerSig[i] == packetHeaderSig[i])

  009dc	e59d2020	 ldr         r2, [sp, #0x20]
  009e0	e59d3000	 ldr         r3, [sp]
  009e4	e0823003	 add         r3, r2, r3
  009e8	e5d33000	 ldrb        r3, [r3]
  009ec	e1a01003	 mov         r1, r3
  009f0	e59f20d8	 ldr         r2, [pc, #0xD8]
  009f4	e59d3000	 ldr         r3, [sp]
  009f8	e0823003	 add         r3, r2, r3
  009fc	e5d33000	 ldrb        r3, [r3]
  00a00	e1510003	 cmp         r1, r3
  00a04	1a000003	 bne         |$LN5@RecvHeader|

; 338  :         {
; 339  :             i++;

  00a08	e59d3000	 ldr         r3, [sp]
  00a0c	e2833001	 add         r3, r3, #1
  00a10	e58d3000	 str         r3, [sp]

; 340  :         }
; 341  : 
; 342  :         else

  00a14	ea000001	 b           |$LN4@RecvHeader|
  00a18		 |$LN5@RecvHeader|

; 343  :         {
; 344  :             i = 0;

  00a18	e3a03000	 mov         r3, #0
  00a1c	e58d3000	 str         r3, [sp]
  00a20		 |$LN4@RecvHeader|

; 345  :         }
; 346  :     }

  00a20	eaffffd8	 b           |$LN9@RecvHeader|
  00a24		 |$LN8@RecvHeader|

; 347  : 
; 348  :     // read the remaining header
; 349  :     cbRead = sizeof(SERIAL_PACKET_HEADER) - HEADER_SIG_BYTES;

  00a24	e3a03006	 mov         r3, #6
  00a28	e1cd30b4	 strh        r3, [sp, #4]

; 350  :     if(!OEMSerialRecvRaw((PUCHAR)pHeader + HEADER_SIG_BYTES, &cbRead, bWaitInfinite) ||
; 351  :         sizeof(SERIAL_PACKET_HEADER) - HEADER_SIG_BYTES != cbRead)

  00a2c	e5dd2024	 ldrb        r2, [sp, #0x24]
  00a30	e28d1004	 add         r1, sp, #4
  00a34	e59d3020	 ldr         r3, [sp, #0x20]
  00a38	e2830004	 add         r0, r3, #4
  00a3c	eb000000	 bl          OEMSerialRecvRaw
  00a40	e58d0010	 str         r0, [sp, #0x10]
  00a44	e59d3010	 ldr         r3, [sp, #0x10]
  00a48	e3530000	 cmp         r3, #0
  00a4c	0a000002	 beq         |$LN2@RecvHeader|
  00a50	e1dd30b4	 ldrh        r3, [sp, #4]
  00a54	e3530006	 cmp         r3, #6
  00a58	0a000004	 beq         |$LN3@RecvHeader|
  00a5c		 |$LN2@RecvHeader|

; 352  :     {
; 353  :         KITLOutputDebugString("failed to receive header data\r\n");

  00a5c	e59f0068	 ldr         r0, [pc, #0x68]
  00a60	eb000000	 bl          KITLOutputDebugString

; 354  :         return FALSE;

  00a64	e3a03000	 mov         r3, #0
  00a68	e58d3008	 str         r3, [sp, #8]
  00a6c	ea000011	 b           |$LN10@RecvHeader|
  00a70		 |$LN3@RecvHeader|

; 355  :     }
; 356  : 
; 357  :     // verify the header checksum
; 358  :     if(pHeader->crcHdr != CalcChksum((PUCHAR)pHeader,
; 359  :         sizeof(SERIAL_PACKET_HEADER) - sizeof(pHeader->crcHdr)))

  00a70	e3a01009	 mov         r1, #9
  00a74	e59d0020	 ldr         r0, [sp, #0x20]
  00a78	eb000000	 bl          |?CalcChksum@@YAEPAEG@Z|
  00a7c	e5cd0014	 strb        r0, [sp, #0x14]
  00a80	e59d3020	 ldr         r3, [sp, #0x20]
  00a84	e2833009	 add         r3, r3, #9
  00a88	e5d33000	 ldrb        r3, [r3]
  00a8c	e1a02003	 mov         r2, r3
  00a90	e5dd3014	 ldrb        r3, [sp, #0x14]
  00a94	e1520003	 cmp         r2, r3
  00a98	0a000004	 beq         |$LN1@RecvHeader|

; 360  :     {
; 361  :         KITLOutputDebugString("header checksum fail\r\n");

  00a9c	e59f0024	 ldr         r0, [pc, #0x24]
  00aa0	eb000000	 bl          KITLOutputDebugString

; 362  :         return FALSE;

  00aa4	e3a03000	 mov         r3, #0
  00aa8	e58d3008	 str         r3, [sp, #8]
  00aac	ea000001	 b           |$LN10@RecvHeader|
  00ab0		 |$LN1@RecvHeader|

; 363  :     }
; 364  : 
; 365  :     return TRUE;

  00ab0	e3a03001	 mov         r3, #1
  00ab4	e58d3008	 str         r3, [sp, #8]
  00ab8		 |$LN10@RecvHeader|

; 366  : }

  00ab8	e59d0008	 ldr         r0, [sp, #8]
  00abc	e28dd018	 add         sp, sp, #0x18
  00ac0	e89d6000	 ldmia       sp, {sp, lr}
  00ac4	e12fff1e	 bx          lr
  00ac8		 |$LN15@RecvHeader|
  00ac8		 |$LN16@RecvHeader|
  00ac8	00000000	 DCD         |??_C@_0BH@MJPKDDID@header?5checksum?5fail?$AN?6?$AA@|
  00acc		 |$LN17@RecvHeader|
  00acc	00000000	 DCD         |??_C@_0CA@LIHOEDHI@failed?5to?5receive?5header?5data?$AN?6?$AA@|
  00ad0		 |$LN18@RecvHeader|
  00ad0	00000000	 DCD         |packetHeaderSig|
  00ad4		 |$LN19@RecvHeader|
  00ad4	00000000	 DCD         |??_C@_0CF@PODCGAIM@failed?5to?5receive?5header?5signatu@|
  00ad8		 |$M32550|

			 ENDP  ; |?RecvHeader@@YAHPAUtagSERIAL_PACKET_HEADER@@E@Z|, RecvHeader

	END
