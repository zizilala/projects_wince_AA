; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\BOOT\BLCOMMON\blcommon.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|pTOC| [ DATA ]
	EXPORT	|NKSignon| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|g_pOEMCheckSignature|, 0x4

	 COMMON	|g_pOEMMultiBINNotify|, 0x4

	 COMMON	|g_pOEMReportError|, 0x4

	 COMMON	|g_dwROMOffset|, 0x4

	 COMMON	|g_pOEMVerifyMemory|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|g_fOEMNotified| % 0x4

  00000			 AREA	 |.data|, DATA
|g_bBINDownload| DCB 0x1
|g_downloadFilesRemaining| DCB 0x1

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|pTOC|	DCD	0xffffffff
	%	4
|NKSignon| DCB	0xa, "Microsoft Windows CE Bootloader Common Library Vers"
	DCB	"ion %d.%d Built May  8 2013 13:48:37", 0xd, 0xa, 0x0
	EXPORT	|??_C@_0BI@OCFAEGPK@ROMHDR?5at?5Address?5?$CFXh?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CL@NOFKHKJC@System?5ready?$CB?$AN?6Preparing?5for?5dow@| [ DATA ] ; `string'
	EXPORT	|BootloaderMain|
	IMPORT	|OEMLaunch|
	IMPORT	|OEMMapMemAddr|
	IMPORT	|OEMPreDownload|
	IMPORT	|OEMPlatformInit|
	IMPORT	|KITLOutputDebugString|
	IMPORT	|OEMDebugInit|

  00000			 AREA	 |.pdata|, PDATA
|$T40799| DCD	|$LN19@Bootloader|
	DCD	0x40008902
; File c:\wince600\platform\common\src\common\boot\blcommon\blcommon.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BI@OCFAEGPK@ROMHDR?5at?5Address?5?$CFXh?$AN?6?$AA@| DCB "ROMHDR a"
	DCB	"t Address %Xh", 0xd, 0xa, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CL@NOFKHKJC@System?5ready?$CB?$AN?6Preparing?5for?5dow@| DCB "Sys"
	DCB	"tem ready!", 0xd, 0xa, "Preparing for download...", 0xd, 0xa
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BootloaderMain| PROC

; 155  : {

  00000		 |$LN19@Bootloader|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd040	 sub         sp, sp, #0x40
  00008		 |$M40796|

; 156  :     DWORD dwAction;   
; 157  :     DWORD dwpToc = 0;

  00008	e3a03000	 mov         r3, #0
  0000c	e58d3004	 str         r3, [sp, #4]

; 158  :     DWORD dwImageStart = 0, dwImageLength = 0, dwLaunchAddr = 0;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018	e3a03000	 mov         r3, #0
  0001c	e58d300c	 str         r3, [sp, #0xC]
  00020	e3a03000	 mov         r3, #0
  00024	e58d3008	 str         r3, [sp, #8]

; 159  :     BOOL bDownloaded = FALSE;

  00028	e3a03000	 mov         r3, #0
  0002c	e58d3014	 str         r3, [sp, #0x14]

; 160  : 
; 161  :     // relocate globals to RAM
; 162  :     if (!KernelRelocate (pTOC))

  00030	e59f31e8	 ldr         r3, [pc, #0x1E8]
  00034	e5930000	 ldr         r0, [r3]
  00038	eb000000	 bl          KernelRelocate
  0003c	e58d0018	 str         r0, [sp, #0x18]
  00040	e59d3018	 ldr         r3, [sp, #0x18]
  00044	e3530000	 cmp         r3, #0
  00048	1a000001	 bne         |$LN14@Bootloader|

; 163  :     {
; 164  :         // spin forever
; 165  :         HALT (BLERR_KERNELRELOCATE);

  0004c	e3e00000	 mvn         r0, #0
  00050	eb000000	 bl          HALT
  00054		 |$LN14@Bootloader|

; 166  :     }
; 167  : 
; 168  :     // (1) Init debug support. We can use OEMWriteDebugString afterward.
; 169  :     if (!OEMDebugInit ())

  00054	eb000000	 bl          OEMDebugInit
  00058	e58d001c	 str         r0, [sp, #0x1C]
  0005c	e59d301c	 ldr         r3, [sp, #0x1C]
  00060	e3530000	 cmp         r3, #0
  00064	1a000001	 bne         |$LN13@Bootloader|

; 170  :     {
; 171  :         // spin forever
; 172  :         HALT (BLERR_DBGINIT);

  00068	e3e00001	 mvn         r0, #1
  0006c	eb000000	 bl          HALT
  00070		 |$LN13@Bootloader|

; 173  :     }
; 174  : 
; 175  :     // output banner
; 176  :     KITLOutputDebugString (NKSignon, CURRENT_VERSION_MAJOR, CURRENT_VERSION_MINOR);

  00070	e3a02004	 mov         r2, #4
  00074	e3a01001	 mov         r1, #1
  00078	e59f019c	 ldr         r0, [pc, #0x19C]
  0007c	eb000000	 bl          KITLOutputDebugString

; 177  : 
; 178  :     // (3) initialize platform (clock, drivers, transports, etc)
; 179  :     if (!OEMPlatformInit ())

  00080	eb000000	 bl          OEMPlatformInit
  00084	e58d0020	 str         r0, [sp, #0x20]
  00088	e59d3020	 ldr         r3, [sp, #0x20]
  0008c	e3530000	 cmp         r3, #0
  00090	1a000001	 bne         |$LN12@Bootloader|

; 180  :     {
; 181  :         // spin forever
; 182  :         HALT (BLERR_PLATINIT);

  00094	e3e00002	 mvn         r0, #2
  00098	eb000000	 bl          HALT
  0009c		 |$LN12@Bootloader|

; 183  :     }
; 184  : 
; 185  :     // system ready, preparing for download
; 186  :     KITLOutputDebugString ("System ready!\r\nPreparing for download...\r\n");

  0009c	e59f0174	 ldr         r0, [pc, #0x174]
  000a0	eb000000	 bl          KITLOutputDebugString

; 187  : 
; 188  :     // (4) call OEM specific pre-download function
; 189  :     switch (dwAction = OEMPreDownload ())

  000a4	eb000000	 bl          OEMPreDownload
  000a8	e58d0024	 str         r0, [sp, #0x24]
  000ac	e59d3024	 ldr         r3, [sp, #0x24]
  000b0	e58d3010	 str         r3, [sp, #0x10]
  000b4	e59d3010	 ldr         r3, [sp, #0x10]
  000b8	e58d3028	 str         r3, [sp, #0x28]
  000bc	e59d3028	 ldr         r3, [sp, #0x28]
  000c0	e3530000	 cmp         r3, #0
  000c4	0a000003	 beq         |$LN9@Bootloader|
  000c8	e59d3028	 ldr         r3, [sp, #0x28]
  000cc	e3530001	 cmp         r3, #1
  000d0	0a00002a	 beq         |$LN4@Bootloader|
  000d4	ea000045	 b           |$LN1@Bootloader|
  000d8		 |$LN9@Bootloader|

; 190  :     {
; 191  :     case BL_DOWNLOAD:
; 192  :         // (5) download image
; 193  :         if (!DownloadImage (&dwImageStart, &dwImageLength, &dwLaunchAddr))

  000d8	e28d2008	 add         r2, sp, #8
  000dc	e28d100c	 add         r1, sp, #0xC
  000e0	e28d0000	 add         r0, sp, #0
  000e4	eb000000	 bl          DownloadImage
  000e8	e58d002c	 str         r0, [sp, #0x2C]
  000ec	e59d302c	 ldr         r3, [sp, #0x2C]
  000f0	e3530000	 cmp         r3, #0
  000f4	1a000000	 bne         |$LN8@Bootloader|
  000f8		 |$LN7@Bootloader|

; 194  :         {
; 195  :             // error already reported in DownloadImage
; 196  :             SPIN_FOREVER;

  000f8	eafffffe	 b           |$LN7@Bootloader|
  000fc		 |$LN8@Bootloader|

; 197  :         }
; 198  :         bDownloaded = TRUE;

  000fc	e3a03001	 mov         r3, #1
  00100	e58d3014	 str         r3, [sp, #0x14]

; 199  : 
; 200  :         // Check for pTOC signature ("CECE") here, after image in place
; 201  :         if (*(LPDWORD) OEMMapMemAddr (dwImageStart, dwImageStart + ROM_SIGNATURE_OFFSET) == ROM_SIGNATURE)

  00104	e59d3000	 ldr         r3, [sp]
  00108	e2831040	 add         r1, r3, #0x40
  0010c	e59d0000	 ldr         r0, [sp]
  00110	eb000000	 bl          OEMMapMemAddr
  00114	e58d0030	 str         r0, [sp, #0x30]
  00118	e59d3030	 ldr         r3, [sp, #0x30]
  0011c	e5932000	 ldr         r2, [r3]
  00120	e59f30ec	 ldr         r3, [pc, #0xEC]
  00124	e1520003	 cmp         r2, r3
  00128	1a000014	 bne         |$LN5@Bootloader|

; 202  :         {
; 203  :             dwpToc = *(LPDWORD) OEMMapMemAddr (dwImageStart, dwImageStart + ROM_SIGNATURE_OFFSET + sizeof(ULONG));

  0012c	e59d3000	 ldr         r3, [sp]
  00130	e2831044	 add         r1, r3, #0x44
  00134	e59d0000	 ldr         r0, [sp]
  00138	eb000000	 bl          OEMMapMemAddr
  0013c	e58d0034	 str         r0, [sp, #0x34]
  00140	e59d3034	 ldr         r3, [sp, #0x34]
  00144	e5933000	 ldr         r3, [r3]
  00148	e58d3004	 str         r3, [sp, #4]

; 204  :             // need to map the content again since the pointer is going to be in a fixup address
; 205  :             dwpToc = (DWORD) OEMMapMemAddr (dwImageStart, dwpToc + g_dwROMOffset);

  0014c	e59d2004	 ldr         r2, [sp, #4]
  00150	e59f30b0	 ldr         r3, [pc, #0xB0]
  00154	e5933000	 ldr         r3, [r3]
  00158	e0821003	 add         r1, r2, r3
  0015c	e59d0000	 ldr         r0, [sp]
  00160	eb000000	 bl          OEMMapMemAddr
  00164	e58d0038	 str         r0, [sp, #0x38]
  00168	e59d3038	 ldr         r3, [sp, #0x38]
  0016c	e58d3004	 str         r3, [sp, #4]

; 206  : 
; 207  :             KITLOutputDebugString ("ROMHDR at Address %Xh\r\n", dwImageStart + ROM_SIGNATURE_OFFSET + sizeof (DWORD)); // right after signature

  00170	e59d3000	 ldr         r3, [sp]
  00174	e2831044	 add         r1, r3, #0x44
  00178	e59f0090	 ldr         r0, [pc, #0x90]
  0017c	eb000000	 bl          KITLOutputDebugString
  00180		 |$LN5@Bootloader|
  00180		 |$LN4@Bootloader|

; 208  :         }
; 209  : 
; 210  :         // fall through
; 211  :     case BL_JUMP:
; 212  :         // Before jumping to the image, optionally check the image signature.
; 213  :         // NOTE: if we haven't downloaded the image by now, we assume that it'll be loaded from local storage in OEMLaunch (or it
; 214  :         // already resides in RAM from an earlier download), and in this case, the image start address might be 0.  This means 
; 215  :         // that the image signature routine will need to find the image in storage or in RAM to validate it.  Since the OEM"s 
; 216  :         // OEMLaunch function will need to do this anyways, we trust that it's within their abilities to do it here.
; 217  :         //
; 218  :         if (g_bBINDownload && g_pOEMCheckSignature)

  00180	e59f3084	 ldr         r3, [pc, #0x84]
  00184	e5d33000	 ldrb        r3, [r3]
  00188	e3530000	 cmp         r3, #0
  0018c	0a000012	 beq         |$LN3@Bootloader|
  00190	e59f306c	 ldr         r3, [pc, #0x6C]
  00194	e5933000	 ldr         r3, [r3]
  00198	e3530000	 cmp         r3, #0
  0019c	0a00000e	 beq         |$LN3@Bootloader|

; 219  :         {
; 220  :             if (!g_pOEMCheckSignature(dwImageStart, g_dwROMOffset, dwLaunchAddr, bDownloaded))

  001a0	e59d3014	 ldr         r3, [sp, #0x14]
  001a4	e59d2008	 ldr         r2, [sp, #8]
  001a8	e59f1058	 ldr         r1, [pc, #0x58]
  001ac	e5911000	 ldr         r1, [r1]
  001b0	e59d0000	 ldr         r0, [sp]
  001b4	e59fe048	 ldr         lr, [pc, #0x48]
  001b8	e59e4000	 ldr         r4, [lr]
  001bc	e1a0e00f	 mov         lr, pc
  001c0	e12fff14	 bx          r4
  001c4	e58d003c	 str         r0, [sp, #0x3C]
  001c8	e59d303c	 ldr         r3, [sp, #0x3C]
  001cc	e3530000	 cmp         r3, #0
  001d0	1a000001	 bne         |$LN2@Bootloader|

; 221  :                 HALT(BLERR_CAT_SIGNATURE);

  001d4	e3e0000c	 mvn         r0, #0xC
  001d8	eb000000	 bl          HALT
  001dc		 |$LN2@Bootloader|
  001dc		 |$LN3@Bootloader|

; 222  :         }
; 223  :         // (5) final call to launch the image. never returned
; 224  :         OEMLaunch (dwImageStart, dwImageLength, dwLaunchAddr, (const ROMHDR *)dwpToc);

  001dc	e59d3004	 ldr         r3, [sp, #4]
  001e0	e59d2008	 ldr         r2, [sp, #8]
  001e4	e59d100c	 ldr         r1, [sp, #0xC]
  001e8	e59d0000	 ldr         r0, [sp]
  001ec	eb000000	 bl          OEMLaunch
  001f0		 |$LN1@Bootloader|

; 225  :         // should never return
; 226  :         // fall through
; 227  :     default:
; 228  :         // ERROR! spin forever
; 229  :         HALT (BLERR_INVALIDCMD);

  001f0	e3e00005	 mvn         r0, #5
  001f4	eb000000	 bl          HALT

; 230  :     }
; 231  : }

  001f8	e28dd040	 add         sp, sp, #0x40
  001fc	e8bd4010	 ldmia       sp!, {r4, lr}
  00200	e12fff1e	 bx          lr
  00204		 |$LN20@Bootloader|
  00204		 |$LN21@Bootloader|
  00204	00000000	 DCD         |g_pOEMCheckSignature|
  00208		 |$LN22@Bootloader|
  00208	00000000	 DCD         |g_dwROMOffset|
  0020c		 |$LN23@Bootloader|
  0020c	00000000	 DCD         |g_bBINDownload|
  00210		 |$LN24@Bootloader|
  00210	00000000	 DCD         |??_C@_0BI@OCFAEGPK@ROMHDR?5at?5Address?5?$CFXh?$AN?6?$AA@|
  00214		 |$LN25@Bootloader|
  00214	43454345	 DCD         0x43454345
  00218		 |$LN26@Bootloader|
  00218	00000000	 DCD         |??_C@_0CL@NOFKHKJC@System?5ready?$CB?$AN?6Preparing?5for?5dow@|
  0021c		 |$LN27@Bootloader|
  0021c	00000000	 DCD         |NKSignon|
  00220		 |$LN28@Bootloader|
  00220	00000000	 DCD         |pTOC|
  00224		 |$M40797|

			 ENDP  ; |BootloaderMain|


  00008			 AREA	 |.pdata|, PDATA
|$T40813| DCD	|$LN8@HALT|
	DCD	0x40001103
; Function compile flags: /Odtp

  00224			 AREA	 |.text|, CODE, ARM

  00224		 |HALT|	 PROC

; 145  : {

  00224		 |$LN8@HALT|
  00224	e1a0c00d	 mov         r12, sp
  00228	e92d0001	 stmdb       sp!, {r0}
  0022c	e92d5000	 stmdb       sp!, {r12, lr}
  00230		 |$M40810|

; 146  :     if (g_pOEMReportError)

  00230	e59f302c	 ldr         r3, [pc, #0x2C]
  00234	e5933000	 ldr         r3, [r3]
  00238	e3530000	 cmp         r3, #0
  0023c	0a000005	 beq         |$LN3@HALT|

; 147  :     {
; 148  :         g_pOEMReportError (dwReason, 0);

  00240	e3a01000	 mov         r1, #0
  00244	e59d0008	 ldr         r0, [sp, #8]
  00248	e59f3014	 ldr         r3, [pc, #0x14]
  0024c	e5933000	 ldr         r3, [r3]
  00250	e1a0e00f	 mov         lr, pc
  00254	e12fff13	 bx          r3
  00258		 |$LN3@HALT|
  00258		 |$LN2@HALT|

; 149  :     }
; 150  :     SPIN_FOREVER;

  00258	eafffffe	 b           |$LN2@HALT|

; 151  : }

  0025c	e89d6000	 ldmia       sp, {sp, lr}
  00260	e12fff1e	 bx          lr
  00264		 |$LN9@HALT|
  00264		 |$LN10@HALT|
  00264	00000000	 DCD         |g_pOEMReportError|
  00268		 |$M40811|

			 ENDP  ; |HALT|

	IMPORT	|memset|
	IMPORT	|memcpy|

  00010			 AREA	 |.pdata|, PDATA
|$T40821| DCD	|$LN11@KernelRelo|
	DCD	0x40004b04
; Function compile flags: /Odtp

  00268			 AREA	 |.text|, CODE, ARM

  00268		 |KernelRelocate| PROC

; 238  : {

  00268		 |$LN11@KernelRelo|
  00268	e1a0c00d	 mov         r12, sp
  0026c	e92d0001	 stmdb       sp!, {r0}
  00270	e92d5000	 stmdb       sp!, {r12, lr}
  00274	e24dd00c	 sub         sp, sp, #0xC
  00278		 |$M40818|

; 239  :     ULONG loop;
; 240  :     COPYentry *cptr;
; 241  :     if (pTOC == (ROMHDR *const) -1)

  00278	e59d3014	 ldr         r3, [sp, #0x14]
  0027c	e3730001	 cmn         r3, #1
  00280	1a000002	 bne         |$LN6@KernelRelo|

; 242  :     {
; 243  :         return (FALSE); // spin forever!

  00284	e3a03000	 mov         r3, #0
  00288	e58d3008	 str         r3, [sp, #8]
  0028c	ea00003c	 b           |$LN7@KernelRelo|
  00290		 |$LN6@KernelRelo|

; 244  :     }
; 245  :     // This is where the data sections become valid... don't read globals until after this
; 246  :     for (loop = 0; loop < pTOC->ulCopyEntries; loop++)

  00290	e3a03000	 mov         r3, #0
  00294	e58d3000	 str         r3, [sp]
  00298	ea000002	 b           |$LN5@KernelRelo|
  0029c		 |$LN4@KernelRelo|
  0029c	e59d3000	 ldr         r3, [sp]
  002a0	e2833001	 add         r3, r3, #1
  002a4	e58d3000	 str         r3, [sp]
  002a8		 |$LN5@KernelRelo|
  002a8	e59d3014	 ldr         r3, [sp, #0x14]
  002ac	e2833020	 add         r3, r3, #0x20
  002b0	e59d2000	 ldr         r2, [sp]
  002b4	e5933000	 ldr         r3, [r3]
  002b8	e1520003	 cmp         r2, r3
  002bc	2a00002e	 bcs         |$LN3@KernelRelo|

; 247  :     {
; 248  :         cptr = (COPYentry *)(pTOC->ulCopyOffset + loop*sizeof(COPYentry));

  002c0	e59d3014	 ldr         r3, [sp, #0x14]
  002c4	e2830024	 add         r0, r3, #0x24
  002c8	e59d1000	 ldr         r1, [sp]
  002cc	e3a03010	 mov         r3, #0x10
  002d0	e0020391	 mul         r2, r1, r3
  002d4	e5903000	 ldr         r3, [r0]
  002d8	e0833002	 add         r3, r3, r2
  002dc	e58d3004	 str         r3, [sp, #4]

; 249  :         if (cptr->ulCopyLen)

  002e0	e59d3004	 ldr         r3, [sp, #4]
  002e4	e2833008	 add         r3, r3, #8
  002e8	e5933000	 ldr         r3, [r3]
  002ec	e3530000	 cmp         r3, #0
  002f0	0a000008	 beq         |$LN2@KernelRelo|

; 250  :             memcpy((LPVOID)cptr->ulDest,(LPVOID)cptr->ulSource,cptr->ulCopyLen);

  002f4	e59d3004	 ldr         r3, [sp, #4]
  002f8	e2833008	 add         r3, r3, #8
  002fc	e5932000	 ldr         r2, [r3]
  00300	e59d3004	 ldr         r3, [sp, #4]
  00304	e5931000	 ldr         r1, [r3]
  00308	e59d3004	 ldr         r3, [sp, #4]
  0030c	e2833004	 add         r3, r3, #4
  00310	e5930000	 ldr         r0, [r3]
  00314	eb000000	 bl          memcpy
  00318		 |$LN2@KernelRelo|

; 251  :         if (cptr->ulCopyLen != cptr->ulDestLen)

  00318	e59d3004	 ldr         r3, [sp, #4]
  0031c	e2832008	 add         r2, r3, #8
  00320	e59d3004	 ldr         r3, [sp, #4]
  00324	e283300c	 add         r3, r3, #0xC
  00328	e5922000	 ldr         r2, [r2]
  0032c	e5933000	 ldr         r3, [r3]
  00330	e1520003	 cmp         r2, r3
  00334	0a00000f	 beq         |$LN1@KernelRelo|

; 252  :             memset((LPVOID)(cptr->ulDest+cptr->ulCopyLen),0,cptr->ulDestLen-cptr->ulCopyLen);

  00338	e59d3004	 ldr         r3, [sp, #4]
  0033c	e283200c	 add         r2, r3, #0xC
  00340	e59d3004	 ldr         r3, [sp, #4]
  00344	e2833008	 add         r3, r3, #8
  00348	e5922000	 ldr         r2, [r2]
  0034c	e5933000	 ldr         r3, [r3]
  00350	e0422003	 sub         r2, r2, r3
  00354	e3a01000	 mov         r1, #0
  00358	e59d3004	 ldr         r3, [sp, #4]
  0035c	e2830004	 add         r0, r3, #4
  00360	e59d3004	 ldr         r3, [sp, #4]
  00364	e2833008	 add         r3, r3, #8
  00368	e5900000	 ldr         r0, [r0]
  0036c	e5933000	 ldr         r3, [r3]
  00370	e0800003	 add         r0, r0, r3
  00374	eb000000	 bl          memset
  00378		 |$LN1@KernelRelo|

; 253  :     }

  00378	eaffffc7	 b           |$LN4@KernelRelo|
  0037c		 |$LN3@KernelRelo|

; 254  :     return (TRUE);

  0037c	e3a03001	 mov         r3, #1
  00380	e58d3008	 str         r3, [sp, #8]
  00384		 |$LN7@KernelRelo|

; 255  : }

  00384	e59d0008	 ldr         r0, [sp, #8]
  00388	e28dd00c	 add         sp, sp, #0xC
  0038c	e89d6000	 ldmia       sp, {sp, lr}
  00390	e12fff1e	 bx          lr
  00394		 |$M40819|

			 ENDP  ; |KernelRelocate|

	EXPORT	|??_C@_0FO@KDFAPMNM@?$CK?$CK?5Please?5update?5your?5Platform?5B@| [ DATA ] ; `string'
	EXPORT	|??_C@_0GI@NIAHKKOO@?$CK?$CK?5ERROR?3?5The?5X000FF?5packet?5is?5a@| [ DATA ] ; `string'
	EXPORT	|??_C@_0EC@MIGFFFAC@?$CK?$CK?5ERROR?3?5This?5boot?5loader?5does?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_04IPBEALME@?$CK?$CK?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0EC@NABDPCJO@?$CK?$CK?5ERROR?3?5This?5boot?5loader?5does?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_06BEBGGBAB@?$AN?6?$CK?$CK?$AN?6?$AA@| [ DATA ] ; `string'

  00004			 AREA	 |.bss|, NOINIT
|g_DownloadManifest| % 0x1a30

  00018			 AREA	 |.pdata|, PDATA
|$T40836| DCD	|$LN27@DownloadIm|
	DCD	0x40008e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0FO@KDFAPMNM@?$CK?$CK?5Please?5update?5your?5Platform?5B@| DCB "**"
	DCB	" Please update your Platform Builder installation in you"
	DCB	" want to download multiple files.", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0GI@NIAHKKOO@?$CK?$CK?5ERROR?3?5The?5X000FF?5packet?5is?5a@| DCB "*"
	DCB	"* ERROR: The X000FF packet is an old-style multi-bin dow"
	DCB	"nload manifest and it's no longer supported.", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EC@MIGFFFAC@?$CK?$CK?5ERROR?3?5This?5boot?5loader?5does?5@| DCB "*"
	DCB	"* ERROR: This boot loader does not support signed .nb0 i"
	DCB	"mages.", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04IPBEALME@?$CK?$CK?$AN?6?$AA@| DCB "**", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EC@NABDPCJO@?$CK?$CK?5ERROR?3?5This?5boot?5loader?5does?5@| DCB "*"
	DCB	"* ERROR: This boot loader does not support signed .bin i"
	DCB	"mages.", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_06BEBGGBAB@?$AN?6?$CK?$CK?$AN?6?$AA@| DCB 0xd, 0xa, "**", 0xd, 0xa
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00394			 AREA	 |.text|, CODE, ARM

  00394		 |DownloadImage| PROC

; 360  : {

  00394		 |$LN27@DownloadIm|
  00394	e1a0c00d	 mov         r12, sp
  00398	e92d0007	 stmdb       sp!, {r0 - r2}
  0039c	e92d5000	 stmdb       sp!, {r12, lr}
  003a0	e24dd024	 sub         sp, sp, #0x24
  003a4		 |$M40833|

; 361  :     BOOL        rval = TRUE;

  003a4	e3a03001	 mov         r3, #1
  003a8	e58d3004	 str         r3, [sp, #4]

; 362  :     DWORD       dwImageType;
; 363  : 
; 364  :     *pdwImageStart = *pdwImageLength = *pdwLaunchAddr = 0;

  003ac	e59d2034	 ldr         r2, [sp, #0x34]
  003b0	e3a03000	 mov         r3, #0
  003b4	e5823000	 str         r3, [r2]
  003b8	e59d2030	 ldr         r2, [sp, #0x30]
  003bc	e3a03000	 mov         r3, #0
  003c0	e5823000	 str         r3, [r2]
  003c4	e59d202c	 ldr         r2, [sp, #0x2C]
  003c8	e3a03000	 mov         r3, #0
  003cc	e5823000	 str         r3, [r2]
  003d0		 |$LN13@DownloadIm|

; 365  : 
; 366  : #ifdef SECURE_BOOTLOADER
; 367  :     InitSecureBootLoader();
; 368  : #endif
; 369  : 
; 370  : 
; 371  :     //
; 372  :     // Download each region (multiple can be sent)
; 373  :     //
; 374  :     do
; 375  :     {
; 376  :         dwImageType = GetImageType();

  003d0	eb000000	 bl          GetImageType
  003d4	e58d000c	 str         r0, [sp, #0xC]
  003d8	e59d300c	 ldr         r3, [sp, #0xC]
  003dc	e58d3000	 str         r3, [sp]

; 377  :         
; 378  :         switch(dwImageType) 

  003e0	e59d3000	 ldr         r3, [sp]
  003e4	e58d3010	 str         r3, [sp, #0x10]
  003e8	e59d3010	 ldr         r3, [sp, #0x10]
  003ec	e3530006	 cmp         r3, #6
  003f0	8a000053	 bhi         |$LN1@DownloadIm|
  003f4	e59d2010	 ldr         r2, [sp, #0x10]
  003f8	e1a03102	 mov         r3, r2, lsl #2
  003fc	e083300f	 add         r3, r3, pc
  00400	e5933004	 ldr         r3, [r3, #4]
  00404	e08ff003	 add         pc, pc, r3
  00408		 |$LN17@DownloadIm|
  00408		 |$LN16@DownloadIm|
  00408		 |$LN18@DownloadIm|
  00408	00000018	 DCD         0x18
  0040c		 |$LN19@DownloadIm|
  0040c	0000005c	 DCD         0x5c
  00410		 |$LN20@DownloadIm|
  00410	00000138	 DCD         0x138
  00414		 |$LN21@DownloadIm|
  00414	00000084	 DCD         0x84
  00418		 |$LN22@DownloadIm|
  00418	000000b0	 DCD         0xb0
  0041c		 |$LN23@DownloadIm|
  0041c	000000dc	 DCD         0xdc
  00420		 |$LN24@DownloadIm|
  00420	00000110	 DCD         0x110
  00424		 |$LN8@DownloadIm|

; 379  :         {
; 380  :             case BL_IMAGE_TYPE_MANIFEST:
; 381  :                 // Platform Builder sends a manifest to indicate the following 
; 382  :                 // data consists of multiple .bin files /OR/ one .nb0 file.
; 383  :                 if (!CheckImageManifest()) {

  00424	eb000000	 bl          CheckImageManifest
  00428	e58d0014	 str         r0, [sp, #0x14]
  0042c	e59d3014	 ldr         r3, [sp, #0x14]
  00430	e3530000	 cmp         r3, #0
  00434	1a000004	 bne         |$LN7@DownloadIm|

; 384  :                     HALT (BLERR_MAGIC);

  00438	e3e00007	 mvn         r0, #7
  0043c	eb000000	 bl          HALT

; 385  :                     return (FALSE);   

  00440	e3a03000	 mov         r3, #0
  00444	e58d3008	 str         r3, [sp, #8]
  00448	ea000053	 b           |$LN14@DownloadIm|
  0044c		 |$LN7@DownloadIm|

; 386  :                 }
; 387  : 
; 388  :                 // Continue with download of next file
; 389  :                 // +1 to account for the manifest
; 390  :                 g_downloadFilesRemaining = (BYTE)(g_DownloadManifest.dwNumRegions + 1);

  0044c	e59f3174	 ldr         r3, [pc, #0x174]
  00450	e5933000	 ldr         r3, [r3]
  00454	e2833001	 add         r3, r3, #1
  00458	e20320ff	 and         r2, r3, #0xFF
  0045c	e59f3148	 ldr         r3, [pc, #0x148]
  00460	e5c32000	 strb        r2, [r3]

; 391  :                 continue;

  00464	ea000039	 b           |$LN12@DownloadIm|
  00468		 |$LN6@DownloadIm|

; 392  : 
; 393  : #ifdef SECURE_BOOTLOADER
; 394  :             case BL_IMAGE_TYPE_BIN:
; 395  :                 KITLOutputDebugString("\r\n**\r\n");
; 396  :                 KITLOutputDebugString("** ERROR: This boot loader does not support unsigned .bin images.\r\n");
; 397  :                 KITLOutputDebugString("**        Image must be signed with a recognized private key.\r\n");
; 398  :                 KITLOutputDebugString("**\r\n");
; 399  :                 HALT (BLERR_SIGNATURE);
; 400  :                 return (FALSE);
; 401  : 
; 402  :             case BL_IMAGE_TYPE_SIGNED_BIN:
; 403  :                 rval &= DownloadSignedBin( pdwImageStart, pdwImageLength, pdwLaunchAddr );
; 404  :                 break;
; 405  : 
; 406  :             case BL_IMAGE_TYPE_SIGNED_NB0:
; 407  :                 rval &= DownloadSignedNB0( pdwImageStart, pdwImageLength, pdwLaunchAddr );
; 408  :                 break;
; 409  : 
; 410  : #else // not SECURE_BOOTLOADER
; 411  : 
; 412  :             case BL_IMAGE_TYPE_BIN:
; 413  :                 rval &= DownloadBin( pdwImageStart, pdwImageLength, pdwLaunchAddr );

  00468	e59d2034	 ldr         r2, [sp, #0x34]
  0046c	e59d1030	 ldr         r1, [sp, #0x30]
  00470	e59d002c	 ldr         r0, [sp, #0x2C]
  00474	eb000000	 bl          DownloadBin
  00478	e58d0018	 str         r0, [sp, #0x18]
  0047c	e59d2004	 ldr         r2, [sp, #4]
  00480	e59d3018	 ldr         r3, [sp, #0x18]
  00484	e0023003	 and         r3, r2, r3
  00488	e58d3004	 str         r3, [sp, #4]

; 414  :                 break;

  0048c	ea00002f	 b           |$LN9@DownloadIm|
  00490		 |$LN5@DownloadIm|

; 415  : 
; 416  :             case BL_IMAGE_TYPE_SIGNED_BIN:
; 417  :                 KITLOutputDebugString("\r\n**\r\n");

  00490	e59f0124	 ldr         r0, [pc, #0x124]
  00494	eb000000	 bl          KITLOutputDebugString

; 418  :                 KITLOutputDebugString("** ERROR: This boot loader does not support signed .bin images.\r\n");

  00498	e59f0124	 ldr         r0, [pc, #0x124]
  0049c	eb000000	 bl          KITLOutputDebugString

; 419  :                 KITLOutputDebugString("**\r\n");

  004a0	e59f0108	 ldr         r0, [pc, #0x108]
  004a4	eb000000	 bl          KITLOutputDebugString

; 420  :                 HALT (BLERR_SIGNATURE);

  004a8	e3e00004	 mvn         r0, #4
  004ac	eb000000	 bl          HALT

; 421  :                 return (FALSE);

  004b0	e3a03000	 mov         r3, #0
  004b4	e58d3008	 str         r3, [sp, #8]
  004b8	ea000037	 b           |$LN14@DownloadIm|
  004bc		 |$LN4@DownloadIm|

; 422  : 
; 423  :             case BL_IMAGE_TYPE_SIGNED_NB0:
; 424  :                 KITLOutputDebugString("\r\n**\r\n");

  004bc	e59f00f8	 ldr         r0, [pc, #0xF8]
  004c0	eb000000	 bl          KITLOutputDebugString

; 425  :                 KITLOutputDebugString("** ERROR: This boot loader does not support signed .nb0 images.\r\n");

  004c4	e59f00f4	 ldr         r0, [pc, #0xF4]
  004c8	eb000000	 bl          KITLOutputDebugString

; 426  :                 KITLOutputDebugString("**\r\n");

  004cc	e59f00dc	 ldr         r0, [pc, #0xDC]
  004d0	eb000000	 bl          KITLOutputDebugString

; 427  :                 HALT (BLERR_SIGNATURE);

  004d4	e3e00004	 mvn         r0, #4
  004d8	eb000000	 bl          HALT

; 428  :                 return (FALSE);

  004dc	e3a03000	 mov         r3, #0
  004e0	e58d3008	 str         r3, [sp, #8]
  004e4	ea00002c	 b           |$LN14@DownloadIm|
  004e8		 |$LN3@DownloadIm|

; 429  : #endif // SECURE_BOOTLOADER
; 430  : 
; 431  :             case BL_IMAGE_TYPE_MULTIXIP:
; 432  :                 KITLOutputDebugString("\r\n**\r\n");

  004e8	e59f00cc	 ldr         r0, [pc, #0xCC]
  004ec	eb000000	 bl          KITLOutputDebugString

; 433  :                 KITLOutputDebugString("** ERROR: The X000FF packet is an old-style multi-bin download manifest and it's no longer supported.\r\n");

  004f0	e59f00c0	 ldr         r0, [pc, #0xC0]
  004f4	eb000000	 bl          KITLOutputDebugString

; 434  :                 KITLOutputDebugString("** Please update your Platform Builder installation in you want to download multiple files.\r\n");

  004f8	e59f00b4	 ldr         r0, [pc, #0xB4]
  004fc	eb000000	 bl          KITLOutputDebugString

; 435  :                 KITLOutputDebugString("**\r\n");

  00500	e59f00a8	 ldr         r0, [pc, #0xA8]
  00504	eb000000	 bl          KITLOutputDebugString

; 436  :                 HALT (BLERR_MAGIC);

  00508	e3e00007	 mvn         r0, #7
  0050c	eb000000	 bl          HALT

; 437  :                 return (FALSE);

  00510	e3a03000	 mov         r3, #0
  00514	e58d3008	 str         r3, [sp, #8]
  00518	ea00001f	 b           |$LN14@DownloadIm|
  0051c		 |$LN2@DownloadIm|

; 438  : 
; 439  :             case BL_IMAGE_TYPE_UNKNOWN:
; 440  : #ifdef SECURE_BOOTLOADER
; 441  :                 KITLOutputDebugString("\r\n**\r\n");
; 442  :                 KITLOutputDebugString("** ERROR: Unrecognized image type (possibly unsigned .nb0).\r\n");
; 443  :                 KITLOutputDebugString("**        This boot loader does not support unsigned images.\r\n");
; 444  :                 KITLOutputDebugString("**        Image must be signed with a recognized private key.\r\n");
; 445  :                 KITLOutputDebugString("**\r\n");
; 446  :                 HALT (BLERR_MAGIC);
; 447  :                 return (FALSE);
; 448  : #else
; 449  :                 // Assume files without a "type" header (e.g. raw data) are unsigned .nb0
; 450  :                 rval &= DownloadNB0( pdwImageStart, pdwImageLength, pdwLaunchAddr );

  0051c	e59d2034	 ldr         r2, [sp, #0x34]
  00520	e59d1030	 ldr         r1, [sp, #0x30]
  00524	e59d002c	 ldr         r0, [sp, #0x2C]
  00528	eb000000	 bl          DownloadNB0
  0052c	e58d001c	 str         r0, [sp, #0x1C]
  00530	e59d2004	 ldr         r2, [sp, #4]
  00534	e59d301c	 ldr         r3, [sp, #0x1C]
  00538	e0023003	 and         r3, r2, r3
  0053c	e58d3004	 str         r3, [sp, #4]

; 451  :                 break;

  00540	ea000002	 b           |$LN9@DownloadIm|
  00544		 |$LN1@DownloadIm|

; 452  : #endif                
; 453  : 
; 454  :             default:
; 455  :                 // should never get here
; 456  :                 return (FALSE);

  00544	e3a03000	 mov         r3, #0
  00548	e58d3008	 str         r3, [sp, #8]
  0054c	ea000012	 b           |$LN14@DownloadIm|
  00550		 |$LN9@DownloadIm|
  00550		 |$LN12@DownloadIm|

; 457  :                 
; 458  :         }
; 459  :     }
; 460  :     while (--g_downloadFilesRemaining);

  00550	e59f3054	 ldr         r3, [pc, #0x54]
  00554	e5d33000	 ldrb        r3, [r3]
  00558	e2433001	 sub         r3, r3, #1
  0055c	e20320ff	 and         r2, r3, #0xFF
  00560	e59f3044	 ldr         r3, [pc, #0x44]
  00564	e5c32000	 strb        r2, [r3]
  00568	e59f303c	 ldr         r3, [pc, #0x3C]
  0056c	e5d33000	 ldrb        r3, [r3]
  00570	e3530000	 cmp         r3, #0
  00574	1affff95	 bne         |$LN13@DownloadIm|

; 461  : 
; 462  :     ComputeChecksum();

  00578	eb000000	 bl          ComputeChecksum

; 463  :     rval &= WriteImageToFlash();

  0057c	eb000000	 bl          WriteImageToFlash
  00580	e58d0020	 str         r0, [sp, #0x20]
  00584	e59d2004	 ldr         r2, [sp, #4]
  00588	e59d3020	 ldr         r3, [sp, #0x20]
  0058c	e0023003	 and         r3, r2, r3
  00590	e58d3004	 str         r3, [sp, #4]

; 464  : 
; 465  :     return rval;

  00594	e59d3004	 ldr         r3, [sp, #4]
  00598	e58d3008	 str         r3, [sp, #8]
  0059c		 |$LN14@DownloadIm|

; 466  : }

  0059c	e59d0008	 ldr         r0, [sp, #8]
  005a0	e28dd024	 add         sp, sp, #0x24
  005a4	e89d6000	 ldmia       sp, {sp, lr}
  005a8	e12fff1e	 bx          lr
  005ac		 |$LN28@DownloadIm|
  005ac		 |$LN29@DownloadIm|
  005ac	00000000	 DCD         |g_downloadFilesRemaining|
  005b0		 |$LN30@DownloadIm|
  005b0	00000000	 DCD         |??_C@_04IPBEALME@?$CK?$CK?$AN?6?$AA@|
  005b4		 |$LN31@DownloadIm|
  005b4	00000000	 DCD         |??_C@_0FO@KDFAPMNM@?$CK?$CK?5Please?5update?5your?5Platform?5B@|
  005b8		 |$LN32@DownloadIm|
  005b8	00000000	 DCD         |??_C@_0GI@NIAHKKOO@?$CK?$CK?5ERROR?3?5The?5X000FF?5packet?5is?5a@|
  005bc		 |$LN33@DownloadIm|
  005bc	00000000	 DCD         |??_C@_06BEBGGBAB@?$AN?6?$CK?$CK?$AN?6?$AA@|
  005c0		 |$LN34@DownloadIm|
  005c0	00000000	 DCD         |??_C@_0EC@MIGFFFAC@?$CK?$CK?5ERROR?3?5This?5boot?5loader?5does?5@|
  005c4		 |$LN35@DownloadIm|
  005c4	00000000	 DCD         |??_C@_0EC@NABDPCJO@?$CK?$CK?5ERROR?3?5This?5boot?5loader?5does?5@|
  005c8		 |$LN36@DownloadIm|
  005c8	00000000	 DCD         |g_DownloadManifest|
  005cc		 |$M40834|

			 ENDP  ; |DownloadImage|

	EXPORT	|??_C@_0BM@DKIOIAMD@?$AN?6BL_IMAGE_TYPE_UNKNOWN?$AN?6?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BP@KNNCEABF@?$AN?6BL_IMAGE_TYPE_SIGNED_NB0?$AN?6?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_07LAGBNAEN@R000FF?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BP@MJFCGNBB@?$AN?6BL_IMAGE_TYPE_SIGNED_BIN?$AN?6?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_07HMMLNAND@S000FF?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BI@HBMHAEFD@?$AN?6BL_IMAGE_TYPE_BIN?$AN?6?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_07MMNKOBGG@B000FF?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BN@IHLEHBEK@?$AN?6BL_IMAGE_TYPE_MULTIXIP?$AN?6?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_07CBKBMMIF@X000FF?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BN@GCKOHOON@?$AN?6BL_IMAGE_TYPE_MANIFEST?$AN?6?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_07JLHFPECJ@N000FF?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CL@OKMIEAHJ@?$AN?6ERROR?3?5Unable?5to?5read?5image?5si@| [ DATA ] ; `string'
	IMPORT	|memcmp|
	IMPORT	|OEMReadData|

  01a34			 AREA	 |.bss|, NOINIT
|g_hdr|	%	0x7

  00020			 AREA	 |.pdata|, PDATA
|$T40851| DCD	|$LN16@GetImageTy|
	DCD	0x40006702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BM@DKIOIAMD@?$AN?6BL_IMAGE_TYPE_UNKNOWN?$AN?6?$AN?6?$AA@| DCB 0xd
	DCB	0xa, "BL_IMAGE_TYPE_UNKNOWN", 0xd, 0xa, 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BP@KNNCEABF@?$AN?6BL_IMAGE_TYPE_SIGNED_NB0?$AN?6?$AN?6?$AA@| DCB 0xd
	DCB	0xa, "BL_IMAGE_TYPE_SIGNED_NB0", 0xd, 0xa, 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_07LAGBNAEN@R000FF?6?$AA@| DCB "R000FF", 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BP@MJFCGNBB@?$AN?6BL_IMAGE_TYPE_SIGNED_BIN?$AN?6?$AN?6?$AA@| DCB 0xd
	DCB	0xa, "BL_IMAGE_TYPE_SIGNED_BIN", 0xd, 0xa, 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_07HMMLNAND@S000FF?6?$AA@| DCB "S000FF", 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BI@HBMHAEFD@?$AN?6BL_IMAGE_TYPE_BIN?$AN?6?$AN?6?$AA@| DCB 0xd, 0xa
	DCB	"BL_IMAGE_TYPE_BIN", 0xd, 0xa, 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_07MMNKOBGG@B000FF?6?$AA@| DCB "B000FF", 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BN@IHLEHBEK@?$AN?6BL_IMAGE_TYPE_MULTIXIP?$AN?6?$AN?6?$AA@| DCB 0xd
	DCB	0xa, "BL_IMAGE_TYPE_MULTIXIP", 0xd, 0xa, 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_07CBKBMMIF@X000FF?6?$AA@| DCB "X000FF", 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BN@GCKOHOON@?$AN?6BL_IMAGE_TYPE_MANIFEST?$AN?6?$AN?6?$AA@| DCB 0xd
	DCB	0xa, "BL_IMAGE_TYPE_MANIFEST", 0xd, 0xa, 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_07JLHFPECJ@N000FF?6?$AA@| DCB "N000FF", 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CL@OKMIEAHJ@?$AN?6ERROR?3?5Unable?5to?5read?5image?5si@| DCB 0xd, 0xa
	DCB	"ERROR: Unable to read image signature.", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  005cc			 AREA	 |.text|, CODE, ARM

  005cc		 |GetImageType| PROC

; 273  : {

  005cc		 |$LN16@GetImageTy|
  005cc	e52de004	 str         lr, [sp, #-4]!
  005d0	e24dd020	 sub         sp, sp, #0x20
  005d4		 |$M40848|

; 274  :     BL_IMAGE_TYPE rval = BL_IMAGE_TYPE_UNKNOWN;

  005d4	e3a03006	 mov         r3, #6
  005d8	e58d3000	 str         r3, [sp]

; 275  : 
; 276  :     // read the 7 byte "magic number"
; 277  :     //
; 278  :     if (!OEMReadData (BL_HDRSIG_SIZE, g_hdr))

  005dc	e59f1158	 ldr         r1, [pc, #0x158]
  005e0	e3a00007	 mov         r0, #7
  005e4	eb000000	 bl          OEMReadData
  005e8	e58d0008	 str         r0, [sp, #8]
  005ec	e59d3008	 ldr         r3, [sp, #8]
  005f0	e3530000	 cmp         r3, #0
  005f4	1a000003	 bne         |$LN11@GetImageTy|

; 279  :     {
; 280  :         KITLOutputDebugString ("\r\nERROR: Unable to read image signature.\r\n");

  005f8	e59f0164	 ldr         r0, [pc, #0x164]
  005fc	eb000000	 bl          KITLOutputDebugString

; 281  :         rval =  BL_IMAGE_TYPE_NOT_FOUND;

  00600	e3a03007	 mov         r3, #7
  00604	e58d3000	 str         r3, [sp]
  00608		 |$LN11@GetImageTy|

; 282  :     }
; 283  : 
; 284  :     
; 285  :     // The N000FF packet indicates a manifest, which is constructed by Platform 
; 286  :     // Builder when we're downloading multiple .bin files or an .nb0 file.
; 287  :     //
; 288  :     if (!memcmp (g_hdr, "N000FF\x0A", BL_HDRSIG_SIZE))

  00608	e3a02007	 mov         r2, #7
  0060c	e59f114c	 ldr         r1, [pc, #0x14C]
  00610	e59f0124	 ldr         r0, [pc, #0x124]
  00614	eb000000	 bl          memcmp
  00618	e58d000c	 str         r0, [sp, #0xC]
  0061c	e59d300c	 ldr         r3, [sp, #0xC]
  00620	e3530000	 cmp         r3, #0
  00624	1a000004	 bne         |$LN10@GetImageTy|

; 289  :     {
; 290  :         KITLOutputDebugString("\r\nBL_IMAGE_TYPE_MANIFEST\r\n\r\n");

  00628	e59f012c	 ldr         r0, [pc, #0x12C]
  0062c	eb000000	 bl          KITLOutputDebugString

; 291  :         rval =  BL_IMAGE_TYPE_MANIFEST;

  00630	e3a03000	 mov         r3, #0
  00634	e58d3000	 str         r3, [sp]
  00638	ea000037	 b           |$LN9@GetImageTy|
  0063c		 |$LN10@GetImageTy|

; 292  :     }
; 293  :     else if (!memcmp (g_hdr, "X000FF\x0A", BL_HDRSIG_SIZE))

  0063c	e3a02007	 mov         r2, #7
  00640	e59f1110	 ldr         r1, [pc, #0x110]
  00644	e59f00f0	 ldr         r0, [pc, #0xF0]
  00648	eb000000	 bl          memcmp
  0064c	e58d0010	 str         r0, [sp, #0x10]
  00650	e59d3010	 ldr         r3, [sp, #0x10]
  00654	e3530000	 cmp         r3, #0
  00658	1a000004	 bne         |$LN8@GetImageTy|

; 294  :     {
; 295  :         KITLOutputDebugString("\r\nBL_IMAGE_TYPE_MULTIXIP\r\n\r\n");

  0065c	e59f00f0	 ldr         r0, [pc, #0xF0]
  00660	eb000000	 bl          KITLOutputDebugString

; 296  :         rval =  BL_IMAGE_TYPE_MULTIXIP;

  00664	e3a03005	 mov         r3, #5
  00668	e58d3000	 str         r3, [sp]
  0066c	ea00002a	 b           |$LN7@GetImageTy|
  00670		 |$LN8@GetImageTy|

; 297  :     }
; 298  :     else if (!memcmp (g_hdr, "B000FF\x0A", BL_HDRSIG_SIZE))

  00670	e3a02007	 mov         r2, #7
  00674	e59f10d4	 ldr         r1, [pc, #0xD4]
  00678	e59f00bc	 ldr         r0, [pc, #0xBC]
  0067c	eb000000	 bl          memcmp
  00680	e58d0014	 str         r0, [sp, #0x14]
  00684	e59d3014	 ldr         r3, [sp, #0x14]
  00688	e3530000	 cmp         r3, #0
  0068c	1a000004	 bne         |$LN6@GetImageTy|

; 299  :     {
; 300  :         KITLOutputDebugString("\r\nBL_IMAGE_TYPE_BIN\r\n\r\n");

  00690	e59f00b4	 ldr         r0, [pc, #0xB4]
  00694	eb000000	 bl          KITLOutputDebugString

; 301  :         rval =  BL_IMAGE_TYPE_BIN;

  00698	e3a03001	 mov         r3, #1
  0069c	e58d3000	 str         r3, [sp]
  006a0	ea00001d	 b           |$LN5@GetImageTy|
  006a4		 |$LN6@GetImageTy|

; 302  :     }
; 303  :     else if (!memcmp (g_hdr, "S000FF\x0A", BL_HDRSIG_SIZE))

  006a4	e3a02007	 mov         r2, #7
  006a8	e59f1098	 ldr         r1, [pc, #0x98]
  006ac	e59f0088	 ldr         r0, [pc, #0x88]
  006b0	eb000000	 bl          memcmp
  006b4	e58d0018	 str         r0, [sp, #0x18]
  006b8	e59d3018	 ldr         r3, [sp, #0x18]
  006bc	e3530000	 cmp         r3, #0
  006c0	1a000004	 bne         |$LN4@GetImageTy|

; 304  :     {
; 305  :         KITLOutputDebugString("\r\nBL_IMAGE_TYPE_SIGNED_BIN\r\n\r\n");

  006c4	e59f0078	 ldr         r0, [pc, #0x78]
  006c8	eb000000	 bl          KITLOutputDebugString

; 306  :         rval =  BL_IMAGE_TYPE_SIGNED_BIN;

  006cc	e3a03003	 mov         r3, #3
  006d0	e58d3000	 str         r3, [sp]
  006d4	ea000010	 b           |$LN3@GetImageTy|
  006d8		 |$LN4@GetImageTy|

; 307  :     }
; 308  :     else if (!memcmp (g_hdr, "R000FF\x0A", BL_HDRSIG_SIZE))

  006d8	e3a02007	 mov         r2, #7
  006dc	e59f105c	 ldr         r1, [pc, #0x5C]
  006e0	e59f0054	 ldr         r0, [pc, #0x54]
  006e4	eb000000	 bl          memcmp
  006e8	e58d001c	 str         r0, [sp, #0x1C]
  006ec	e59d301c	 ldr         r3, [sp, #0x1C]
  006f0	e3530000	 cmp         r3, #0
  006f4	1a000004	 bne         |$LN2@GetImageTy|

; 309  :     {
; 310  :         KITLOutputDebugString("\r\nBL_IMAGE_TYPE_SIGNED_NB0\r\n\r\n");

  006f8	e59f0038	 ldr         r0, [pc, #0x38]
  006fc	eb000000	 bl          KITLOutputDebugString

; 311  :         rval =  BL_IMAGE_TYPE_SIGNED_NB0;

  00700	e3a03004	 mov         r3, #4
  00704	e58d3000	 str         r3, [sp]

; 312  :     }
; 313  :     else

  00708	ea000003	 b           |$LN1@GetImageTy|
  0070c		 |$LN2@GetImageTy|

; 314  :     {
; 315  :         KITLOutputDebugString("\r\nBL_IMAGE_TYPE_UNKNOWN\r\n\r\n");

  0070c	e59f0020	 ldr         r0, [pc, #0x20]
  00710	eb000000	 bl          KITLOutputDebugString

; 316  :         rval =  BL_IMAGE_TYPE_UNKNOWN;

  00714	e3a03006	 mov         r3, #6
  00718	e58d3000	 str         r3, [sp]
  0071c		 |$LN1@GetImageTy|
  0071c		 |$LN3@GetImageTy|
  0071c		 |$LN5@GetImageTy|
  0071c		 |$LN7@GetImageTy|
  0071c		 |$LN9@GetImageTy|

; 317  :     }
; 318  : 
; 319  :     return rval;  

  0071c	e59d3000	 ldr         r3, [sp]
  00720	e58d3004	 str         r3, [sp, #4]

; 320  : }

  00724	e59d0004	 ldr         r0, [sp, #4]
  00728	e28dd020	 add         sp, sp, #0x20
  0072c	e49de004	 ldr         lr, [sp], #4
  00730	e12fff1e	 bx          lr
  00734		 |$LN17@GetImageTy|
  00734		 |$LN18@GetImageTy|
  00734	00000000	 DCD         |??_C@_0BM@DKIOIAMD@?$AN?6BL_IMAGE_TYPE_UNKNOWN?$AN?6?$AN?6?$AA@|
  00738		 |$LN19@GetImageTy|
  00738	00000000	 DCD         |??_C@_0BP@KNNCEABF@?$AN?6BL_IMAGE_TYPE_SIGNED_NB0?$AN?6?$AN?6?$AA@|
  0073c		 |$LN20@GetImageTy|
  0073c	00000000	 DCD         |g_hdr|
  00740		 |$LN21@GetImageTy|
  00740	00000000	 DCD         |??_C@_07LAGBNAEN@R000FF?6?$AA@|
  00744		 |$LN22@GetImageTy|
  00744	00000000	 DCD         |??_C@_0BP@MJFCGNBB@?$AN?6BL_IMAGE_TYPE_SIGNED_BIN?$AN?6?$AN?6?$AA@|
  00748		 |$LN23@GetImageTy|
  00748	00000000	 DCD         |??_C@_07HMMLNAND@S000FF?6?$AA@|
  0074c		 |$LN24@GetImageTy|
  0074c	00000000	 DCD         |??_C@_0BI@HBMHAEFD@?$AN?6BL_IMAGE_TYPE_BIN?$AN?6?$AN?6?$AA@|
  00750		 |$LN25@GetImageTy|
  00750	00000000	 DCD         |??_C@_07MMNKOBGG@B000FF?6?$AA@|
  00754		 |$LN26@GetImageTy|
  00754	00000000	 DCD         |??_C@_0BN@IHLEHBEK@?$AN?6BL_IMAGE_TYPE_MULTIXIP?$AN?6?$AN?6?$AA@|
  00758		 |$LN27@GetImageTy|
  00758	00000000	 DCD         |??_C@_07CBKBMMIF@X000FF?6?$AA@|
  0075c		 |$LN28@GetImageTy|
  0075c	00000000	 DCD         |??_C@_0BN@GCKOHOON@?$AN?6BL_IMAGE_TYPE_MANIFEST?$AN?6?$AN?6?$AA@|
  00760		 |$LN29@GetImageTy|
  00760	00000000	 DCD         |??_C@_07JLHFPECJ@N000FF?6?$AA@|
  00764		 |$LN30@GetImageTy|
  00764	00000000	 DCD         |??_C@_0CL@OKMIEAHJ@?$AN?6ERROR?3?5Unable?5to?5read?5image?5si@|
  00768		 |$M40849|

			 ENDP  ; |GetImageType|

	EXPORT	|??_C@_0EC@LAKEOKID@?$AN?6ERROR?3?5Download?5manifest?5packe@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DJ@PIPLIHFI@?$AN?6ERROR?3?5Unable?5to?5read?5download@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DG@DBBGHEAG@?$AN?6ERROR?3?5Unable?5to?5read?5download@| [ DATA ] ; `string'

  00028			 AREA	 |.pdata|, PDATA
|$T40871| DCD	|$LN9@CheckImage|
	DCD	0x40004602

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EC@LAKEOKID@?$AN?6ERROR?3?5Download?5manifest?5packe@| DCB 0xd, 0xa
	DCB	"ERROR: Download manifest packet failed checksum verifica"
	DCB	"tion.", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DJ@PIPLIHFI@?$AN?6ERROR?3?5Unable?5to?5read?5download@| DCB 0xd, 0xa
	DCB	"ERROR: Unable to read download manifest information.", 0xd
	DCB	0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DG@DBBGHEAG@?$AN?6ERROR?3?5Unable?5to?5read?5download@| DCB 0xd, 0xa
	DCB	"ERROR: Unable to read download manifest checksum.", 0xd, 0xa
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00768			 AREA	 |.text|, CODE, ARM

  00768		 |CheckImageManifest| PROC

; 324  : {

  00768		 |$LN9@CheckImage|
  00768	e52de004	 str         lr, [sp, #-4]!
  0076c	e24dd018	 sub         sp, sp, #0x18
  00770		 |$M40868|

; 325  :     DWORD dwRecChk;
; 326  : 
; 327  :     // read the packet checksum.
; 328  :     //
; 329  :     if (!OEMReadData (sizeof (DWORD), (LPBYTE) &dwRecChk))

  00770	e28d1000	 add         r1, sp, #0
  00774	e3a00004	 mov         r0, #4
  00778	eb000000	 bl          OEMReadData
  0077c	e58d0008	 str         r0, [sp, #8]
  00780	e59d3008	 ldr         r3, [sp, #8]
  00784	e3530000	 cmp         r3, #0
  00788	1a000006	 bne         |$LN4@CheckImage|

; 330  :     {
; 331  :         KITLOutputDebugString("\r\nERROR: Unable to read download manifest checksum.\r\n");

  0078c	e59f00e8	 ldr         r0, [pc, #0xE8]
  00790	eb000000	 bl          KITLOutputDebugString

; 332  :         HALT (BLERR_MAGIC);

  00794	e3e00007	 mvn         r0, #7
  00798	eb000000	 bl          HALT

; 333  :         return FALSE;

  0079c	e3a03000	 mov         r3, #0
  007a0	e58d3004	 str         r3, [sp, #4]
  007a4	ea00002d	 b           |$LN5@CheckImage|
  007a8		 |$LN4@CheckImage|

; 334  :     }
; 335  : 
; 336  :     // read region descriptions (start address and length).
; 337  :     //
; 338  :     if (!OEMReadData (sizeof (DWORD), (LPBYTE) &g_DownloadManifest.dwNumRegions) ||
; 339  :         !OEMReadData ((g_DownloadManifest.dwNumRegions * sizeof(RegionInfo)), (LPBYTE) &g_DownloadManifest.Region[0]))

  007a8	e59f10c4	 ldr         r1, [pc, #0xC4]
  007ac	e3a00004	 mov         r0, #4
  007b0	eb000000	 bl          OEMReadData
  007b4	e58d000c	 str         r0, [sp, #0xC]
  007b8	e59d300c	 ldr         r3, [sp, #0xC]
  007bc	e3530000	 cmp         r3, #0
  007c0	0a00000a	 beq         |$LN2@CheckImage|
  007c4	e59f30a8	 ldr         r3, [pc, #0xA8]
  007c8	e2831004	 add         r1, r3, #4
  007cc	e59f30a0	 ldr         r3, [pc, #0xA0]
  007d0	e5932000	 ldr         r2, [r3]
  007d4	e3a03f43	 mov         r3, #0x43, 30
  007d8	e0000392	 mul         r0, r2, r3
  007dc	eb000000	 bl          OEMReadData
  007e0	e58d0010	 str         r0, [sp, #0x10]
  007e4	e59d3010	 ldr         r3, [sp, #0x10]
  007e8	e3530000	 cmp         r3, #0
  007ec	1a000006	 bne         |$LN3@CheckImage|
  007f0		 |$LN2@CheckImage|

; 340  :     {
; 341  :         KITLOutputDebugString("\r\nERROR: Unable to read download manifest information.\r\n");

  007f0	e59f0080	 ldr         r0, [pc, #0x80]
  007f4	eb000000	 bl          KITLOutputDebugString

; 342  :         HALT (BLERR_MAGIC);

  007f8	e3e00007	 mvn         r0, #7
  007fc	eb000000	 bl          HALT

; 343  :         return FALSE;

  00800	e3a03000	 mov         r3, #0
  00804	e58d3004	 str         r3, [sp, #4]
  00808	ea000014	 b           |$LN5@CheckImage|
  0080c		 |$LN3@CheckImage|

; 344  :     }
; 345  : 
; 346  :     // verify the packet checksum.
; 347  :     //
; 348  :     if (!VerifyChecksum((g_DownloadManifest.dwNumRegions * sizeof(RegionInfo)), (LPBYTE) &g_DownloadManifest.Region[0], dwRecChk))

  0080c	e59d2000	 ldr         r2, [sp]
  00810	e59f305c	 ldr         r3, [pc, #0x5C]
  00814	e2831004	 add         r1, r3, #4
  00818	e59f3054	 ldr         r3, [pc, #0x54]
  0081c	e593e000	 ldr         lr, [r3]
  00820	e3a03f43	 mov         r3, #0x43, 30
  00824	e000039e	 mul         r0, lr, r3
  00828	eb000000	 bl          VerifyChecksum
  0082c	e58d0014	 str         r0, [sp, #0x14]
  00830	e59d3014	 ldr         r3, [sp, #0x14]
  00834	e3530000	 cmp         r3, #0
  00838	1a000006	 bne         |$LN1@CheckImage|

; 349  :     {
; 350  :         KITLOutputDebugString ("\r\nERROR: Download manifest packet failed checksum verification.\r\n");

  0083c	e59f002c	 ldr         r0, [pc, #0x2C]
  00840	eb000000	 bl          KITLOutputDebugString

; 351  :         HALT (BLERR_CHECKSUM);

  00844	e3e00006	 mvn         r0, #6
  00848	eb000000	 bl          HALT

; 352  :         return FALSE;

  0084c	e3a03000	 mov         r3, #0
  00850	e58d3004	 str         r3, [sp, #4]
  00854	ea000001	 b           |$LN5@CheckImage|
  00858		 |$LN1@CheckImage|

; 353  :     }
; 354  : 
; 355  :     return TRUE;

  00858	e3a03001	 mov         r3, #1
  0085c	e58d3004	 str         r3, [sp, #4]
  00860		 |$LN5@CheckImage|

; 356  : }

  00860	e59d0004	 ldr         r0, [sp, #4]
  00864	e28dd018	 add         sp, sp, #0x18
  00868	e49de004	 ldr         lr, [sp], #4
  0086c	e12fff1e	 bx          lr
  00870		 |$LN10@CheckImage|
  00870		 |$LN11@CheckImage|
  00870	00000000	 DCD         |??_C@_0EC@LAKEOKID@?$AN?6ERROR?3?5Download?5manifest?5packe@|
  00874		 |$LN12@CheckImage|
  00874	00000000	 DCD         |g_DownloadManifest|
  00878		 |$LN13@CheckImage|
  00878	00000000	 DCD         |??_C@_0DJ@PIPLIHFI@?$AN?6ERROR?3?5Unable?5to?5read?5download@|
  0087c		 |$LN14@CheckImage|
  0087c	00000000	 DCD         |??_C@_0DG@DBBGHEAG@?$AN?6ERROR?3?5Unable?5to?5read?5download@|
  00880		 |$M40869|

			 ENDP  ; |CheckImageManifest|

	EXPORT	|??_C@_0DJ@LFHEGALA@ERROR?3?5Checksum?5failure?5?$CIexpecte@| [ DATA ] ; `string'

  00030			 AREA	 |.pdata|, PDATA
|$T40884| DCD	|$LN11@VerifyChec|
	DCD	0x40003104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DJ@LFHEGALA@ERROR?3?5Checksum?5failure?5?$CIexpecte@| DCB "ERROR:"
	DCB	" Checksum failure (expected=0x%x  computed=0x%x)", 0xd, 0xa
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00880			 AREA	 |.text|, CODE, ARM

  00880		 |VerifyChecksum| PROC

; 258  : {

  00880		 |$LN11@VerifyChec|
  00880	e1a0c00d	 mov         r12, sp
  00884	e92d0007	 stmdb       sp!, {r0 - r2}
  00888	e92d5000	 stmdb       sp!, {r12, lr}
  0088c	e24dd010	 sub         sp, sp, #0x10
  00890		 |$M40881|

; 259  :     // Check the CRC
; 260  :     DWORD dwCRC = 0;

  00890	e3a03000	 mov         r3, #0
  00894	e58d3004	 str         r3, [sp, #4]

; 261  :     DWORD i;
; 262  :     for (i = 0; i < cbRecord; i++)

  00898	e3a03000	 mov         r3, #0
  0089c	e58d3000	 str         r3, [sp]
  008a0	ea000002	 b           |$LN4@VerifyChec|
  008a4		 |$LN3@VerifyChec|
  008a4	e59d3000	 ldr         r3, [sp]
  008a8	e2833001	 add         r3, r3, #1
  008ac	e58d3000	 str         r3, [sp]
  008b0		 |$LN4@VerifyChec|
  008b0	e59d2000	 ldr         r2, [sp]
  008b4	e59d3018	 ldr         r3, [sp, #0x18]
  008b8	e1520003	 cmp         r2, r3
  008bc	2a000008	 bcs         |$LN2@VerifyChec|

; 263  :         dwCRC += *pbRecord ++;

  008c0	e59d301c	 ldr         r3, [sp, #0x1C]
  008c4	e5d32000	 ldrb        r2, [r3]
  008c8	e59d3004	 ldr         r3, [sp, #4]
  008cc	e0833002	 add         r3, r3, r2
  008d0	e58d3004	 str         r3, [sp, #4]
  008d4	e59d301c	 ldr         r3, [sp, #0x1C]
  008d8	e2833001	 add         r3, r3, #1
  008dc	e58d301c	 str         r3, [sp, #0x1C]
  008e0	eaffffef	 b           |$LN3@VerifyChec|
  008e4		 |$LN2@VerifyChec|

; 264  : 
; 265  :     if (dwCRC != dwChksum)

  008e4	e59d2004	 ldr         r2, [sp, #4]
  008e8	e59d3020	 ldr         r3, [sp, #0x20]
  008ec	e1520003	 cmp         r2, r3
  008f0	0a000003	 beq         |$LN1@VerifyChec|

; 266  :         KITLOutputDebugString ("ERROR: Checksum failure (expected=0x%x  computed=0x%x)\r\n", dwChksum, dwCRC);

  008f4	e59d2004	 ldr         r2, [sp, #4]
  008f8	e59d1020	 ldr         r1, [sp, #0x20]
  008fc	e59f003c	 ldr         r0, [pc, #0x3C]
  00900	eb000000	 bl          KITLOutputDebugString
  00904		 |$LN1@VerifyChec|

; 267  : 
; 268  :     return (dwCRC == dwChksum);

  00904	e59d2004	 ldr         r2, [sp, #4]
  00908	e59d3020	 ldr         r3, [sp, #0x20]
  0090c	e1520003	 cmp         r2, r3
  00910	1a000002	 bne         |$LN7@VerifyChec|
  00914	e3a03001	 mov         r3, #1
  00918	e58d300c	 str         r3, [sp, #0xC]
  0091c	ea000001	 b           |$LN8@VerifyChec|
  00920		 |$LN7@VerifyChec|
  00920	e3a03000	 mov         r3, #0
  00924	e58d300c	 str         r3, [sp, #0xC]
  00928		 |$LN8@VerifyChec|
  00928	e59d300c	 ldr         r3, [sp, #0xC]
  0092c	e58d3008	 str         r3, [sp, #8]

; 269  : }

  00930	e59d0008	 ldr         r0, [sp, #8]
  00934	e28dd010	 add         sp, sp, #0x10
  00938	e89d6000	 ldmia       sp, {sp, lr}
  0093c	e12fff1e	 bx          lr
  00940		 |$LN12@VerifyChec|
  00940		 |$LN13@VerifyChec|
  00940	00000000	 DCD         |??_C@_0DJ@LFHEGALA@ERROR?3?5Checksum?5failure?5?$CIexpecte@|
  00944		 |$M40882|

			 ENDP  ; |VerifyChecksum|

	EXPORT	|??_C@_0DL@DCHMDHHD@ImageStart?5?$DN?50x?$CFx?0?5ImageLength?5?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BD@PHLGNLDI@rom_offset?$DN0x?$CFx?4?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DI@FDIIHFBA@?$CK?$CK?$CK?$CK?$CK?$CK?5Checksum?5failure?5on?5recor@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DD@KHJBCIED@?$CK?$CK?$CK?$CK?$CK?$CK?5Data?5record?5?$CFd?5corrupted?0@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DG@MINKPHJL@?5?$DM?$DO?5Record?5?$FL?5?$CFd?5?$FN?5dwRecAddr?5?$DN?50x@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BP@EOFEMPOO@Invalid?5flash?5address?1length?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CC@DNECAMLM@?$CBOEMVERIFYMEMORY?3?5Invalid?5image?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CE@NKAMCDHO@Unable?5to?5read?5image?5start?1lengt@| [ DATA ] ; `string'
	IMPORT	|OEMFinishEraseFlash|
	IMPORT	|OEMContinueEraseFlash|
	IMPORT	|OEMShowProgress|
	IMPORT	|OEMStartEraseFlash|
	IMPORT	|OEMIsFlashAddr|

  00038			 AREA	 |.pdata|, PDATA
|$T40896| DCD	|$LN30@DownloadBi|
	DCD	0x40019b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DL@DCHMDHHD@ImageStart?5?$DN?50x?$CFx?0?5ImageLength?5?$DN@| DCB "I"
	DCB	"mageStart = 0x%x, ImageLength = 0x%x, LaunchAddr = 0x%x", 0xd
	DCB	0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BD@PHLGNLDI@rom_offset?$DN0x?$CFx?4?$AN?6?$AA@| DCB "rom_offset=0"
	DCB	"x%x.", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DI@FDIIHFBA@?$CK?$CK?$CK?$CK?$CK?$CK?5Checksum?5failure?5on?5recor@| DCB "*"
	DCB	"***** Checksum failure on record %d, ABORT!!! ******", 0xd
	DCB	0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DD@KHJBCIED@?$CK?$CK?$CK?$CK?$CK?$CK?5Data?5record?5?$CFd?5corrupted?0@| DCB "*"
	DCB	"***** Data record %d corrupted, ABORT!!! ******", 0xd, 0xa
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DG@MINKPHJL@?5?$DM?$DO?5Record?5?$FL?5?$CFd?5?$FN?5dwRecAddr?5?$DN?50x@| DCB " "
	DCB	"<> Record [ %d ] dwRecAddr = 0x%x, dwRecLen = 0x%x", 0xd
	DCB	0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BP@EOFEMPOO@Invalid?5flash?5address?1length?$AN?6?$AA@| DCB "Inva"
	DCB	"lid flash address/length", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CC@DNECAMLM@?$CBOEMVERIFYMEMORY?3?5Invalid?5image?$AN@| DCB "!OEM"
	DCB	"VERIFYMEMORY: Invalid image", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CE@NKAMCDHO@Unable?5to?5read?5image?5start?1lengt@| DCB "Unable t"
	DCB	"o read image start/length", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  00944			 AREA	 |.text|, CODE, ARM

  00944		 |DownloadBin| PROC

; 1050 : {

  00944		 |$LN30@DownloadBi|
  00944	e1a0c00d	 mov         r12, sp
  00948	e92d0007	 stmdb       sp!, {r0 - r2}
  0094c	e92d5000	 stmdb       sp!, {r12, lr}
  00950	e24dd080	 sub         sp, sp, #0x80
  00954		 |$M40893|

; 1051 :     RegionInfo *pCurDownloadFile;
; 1052 :     BOOL        fIsFlash = FALSE;

  00954	e3a03000	 mov         r3, #0
  00958	e58d300c	 str         r3, [sp, #0xC]

; 1053 :     LPBYTE      lpDest = NULL;

  0095c	e3a03000	 mov         r3, #0
  00960	e58d3000	 str         r3, [sp]

; 1054 :     DWORD       dwImageStart, dwImageLength, dwRecAddr, dwRecLen, dwRecChk;
; 1055 :     DWORD       dwRecNum = 0;

  00964	e3a03000	 mov         r3, #0
  00968	e58d3020	 str         r3, [sp, #0x20]

; 1056 : 
; 1057 :     g_bBINDownload = TRUE;

  0096c	e59f2638	 ldr         r2, [pc, #0x638]
  00970	e3a03001	 mov         r3, #1
  00974	e5c23000	 strb        r3, [r2]

; 1058 : 
; 1059 :     if (!OEMReadData (sizeof (DWORD), (LPBYTE) &dwImageStart)
; 1060 :         || !OEMReadData (sizeof (DWORD), (LPBYTE) &dwImageLength))

  00978	e28d1004	 add         r1, sp, #4
  0097c	e3a00004	 mov         r0, #4
  00980	eb000000	 bl          OEMReadData
  00984	e58d0030	 str         r0, [sp, #0x30]
  00988	e59d3030	 ldr         r3, [sp, #0x30]
  0098c	e3530000	 cmp         r3, #0
  00990	0a000006	 beq         |$LN20@DownloadBi|
  00994	e28d1014	 add         r1, sp, #0x14
  00998	e3a00004	 mov         r0, #4
  0099c	eb000000	 bl          OEMReadData
  009a0	e58d0034	 str         r0, [sp, #0x34]
  009a4	e59d3034	 ldr         r3, [sp, #0x34]
  009a8	e3530000	 cmp         r3, #0
  009ac	1a000006	 bne         |$LN21@DownloadBi|
  009b0		 |$LN20@DownloadBi|

; 1061 :     {
; 1062 :         KITLOutputDebugString ("Unable to read image start/length\r\n");

  009b0	e59f05f0	 ldr         r0, [pc, #0x5F0]
  009b4	eb000000	 bl          KITLOutputDebugString

; 1063 :         HALT (BLERR_MAGIC);

  009b8	e3e00007	 mvn         r0, #7
  009bc	eb000000	 bl          HALT

; 1064 :         return (FALSE);

  009c0	e3a03000	 mov         r3, #0
  009c4	e58d302c	 str         r3, [sp, #0x2C]
  009c8	ea000164	 b           |$LN22@DownloadBi|
  009cc		 |$LN21@DownloadBi|

; 1065 :     }
; 1066 : 
; 1067 :     // If Platform Builder didn't provide a manifest (i.e., we're only 
; 1068 :     // downloading a single .bin file), manufacture a manifest so we
; 1069 :     // can notify the OEM.
; 1070 :     //
; 1071 :     if (!g_DownloadManifest.dwNumRegions)

  009cc	e59f35a0	 ldr         r3, [pc, #0x5A0]
  009d0	e5933000	 ldr         r3, [r3]
  009d4	e3530000	 cmp         r3, #0
  009d8	1a000008	 bne         |$LN19@DownloadBi|

; 1072 :     {
; 1073 :         g_DownloadManifest.dwNumRegions             = 1;

  009dc	e59f2590	 ldr         r2, [pc, #0x590]
  009e0	e3a03001	 mov         r3, #1
  009e4	e5823000	 str         r3, [r2]

; 1074 :         g_DownloadManifest.Region[0].dwRegionStart  = dwImageStart;

  009e8	e59d2004	 ldr         r2, [sp, #4]
  009ec	e59f3580	 ldr         r3, [pc, #0x580]
  009f0	e5832004	 str         r2, [r3, #4]

; 1075 :         g_DownloadManifest.Region[0].dwRegionLength = dwImageLength;

  009f4	e59d2014	 ldr         r2, [sp, #0x14]
  009f8	e59f3574	 ldr         r3, [pc, #0x574]
  009fc	e5832008	 str         r2, [r3, #8]
  00a00		 |$LN19@DownloadBi|

; 1076 :     }
; 1077 : 
; 1078 :     // Provide the download manifest to the OEM.
; 1079 :     //
; 1080 :     if (!g_fOEMNotified && g_pOEMMultiBINNotify)

  00a00	e59f3598	 ldr         r3, [pc, #0x598]
  00a04	e5933000	 ldr         r3, [r3]
  00a08	e3530000	 cmp         r3, #0
  00a0c	1a00000b	 bne         |$LN18@DownloadBi|
  00a10	e59f358c	 ldr         r3, [pc, #0x58C]
  00a14	e5933000	 ldr         r3, [r3]
  00a18	e3530000	 cmp         r3, #0
  00a1c	0a000007	 beq         |$LN18@DownloadBi|

; 1081 :     {
; 1082 :         g_pOEMMultiBINNotify((PDownloadManifest)&g_DownloadManifest);

  00a20	e59f054c	 ldr         r0, [pc, #0x54C]
  00a24	e59f3578	 ldr         r3, [pc, #0x578]
  00a28	e5933000	 ldr         r3, [r3]
  00a2c	e1a0e00f	 mov         lr, pc
  00a30	e12fff13	 bx          r3

; 1083 :         g_fOEMNotified = TRUE;

  00a34	e59f2564	 ldr         r2, [pc, #0x564]
  00a38	e3a03001	 mov         r3, #1
  00a3c	e5823000	 str         r3, [r2]
  00a40		 |$LN18@DownloadBi|

; 1084 :     }
; 1085 : 
; 1086 :     // Locate the current download manifest entry (current download file).
; 1087 :     //
; 1088 :     pCurDownloadFile = &g_DownloadManifest.Region[g_DownloadManifest.dwNumRegions - g_downloadFilesRemaining];

  00a40	e59f3554	 ldr         r3, [pc, #0x554]
  00a44	e5d32000	 ldrb        r2, [r3]
  00a48	e59f3524	 ldr         r3, [pc, #0x524]
  00a4c	e5933000	 ldr         r3, [r3]
  00a50	e0431002	 sub         r1, r3, r2
  00a54	e3a03f43	 mov         r3, #0x43, 30
  00a58	e0020391	 mul         r2, r1, r3
  00a5c	e59f3510	 ldr         r3, [pc, #0x510]
  00a60	e2833004	 add         r3, r3, #4
  00a64	e0833002	 add         r3, r3, r2
  00a68	e58d301c	 str         r3, [sp, #0x1C]

; 1089 : 
; 1090 :     // give the OEM a chance to verify memory
; 1091 :     if (g_pOEMVerifyMemory && !g_pOEMVerifyMemory (pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionLength))

  00a6c	e59f3524	 ldr         r3, [pc, #0x524]
  00a70	e5933000	 ldr         r3, [r3]
  00a74	e3530000	 cmp         r3, #0
  00a78	0a000013	 beq         |$LN17@DownloadBi|
  00a7c	e59d301c	 ldr         r3, [sp, #0x1C]
  00a80	e2833004	 add         r3, r3, #4
  00a84	e5931000	 ldr         r1, [r3]
  00a88	e59d301c	 ldr         r3, [sp, #0x1C]
  00a8c	e5930000	 ldr         r0, [r3]
  00a90	e59f3500	 ldr         r3, [pc, #0x500]
  00a94	e5933000	 ldr         r3, [r3]
  00a98	e1a0e00f	 mov         lr, pc
  00a9c	e12fff13	 bx          r3
  00aa0	e58d0038	 str         r0, [sp, #0x38]
  00aa4	e59d3038	 ldr         r3, [sp, #0x38]
  00aa8	e3530000	 cmp         r3, #0
  00aac	1a000006	 bne         |$LN17@DownloadBi|

; 1092 :     {
; 1093 :         KITLOutputDebugString ("!OEMVERIFYMEMORY: Invalid image\r\n");

  00ab0	e59f04dc	 ldr         r0, [pc, #0x4DC]
  00ab4	eb000000	 bl          KITLOutputDebugString

; 1094 :         HALT (BLERR_OEMVERIFY);

  00ab8	e3e00008	 mvn         r0, #8
  00abc	eb000000	 bl          HALT

; 1095 :         return (FALSE);

  00ac0	e3a03000	 mov         r3, #0
  00ac4	e58d302c	 str         r3, [sp, #0x2C]
  00ac8	ea000124	 b           |$LN22@DownloadBi|
  00acc		 |$LN17@DownloadBi|

; 1096 :     }
; 1097 : 
; 1098 :     // check for flash image. Start erasing if it is.
; 1099 :     if ((fIsFlash = OEMIsFlashAddr (pCurDownloadFile->dwRegionStart)) 
; 1100 :         && !OEMStartEraseFlash (pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionLength))

  00acc	e59d301c	 ldr         r3, [sp, #0x1C]
  00ad0	e5930000	 ldr         r0, [r3]
  00ad4	eb000000	 bl          OEMIsFlashAddr
  00ad8	e58d003c	 str         r0, [sp, #0x3C]
  00adc	e59d303c	 ldr         r3, [sp, #0x3C]
  00ae0	e58d300c	 str         r3, [sp, #0xC]
  00ae4	e59d300c	 ldr         r3, [sp, #0xC]
  00ae8	e3530000	 cmp         r3, #0
  00aec	0a000010	 beq         |$LN16@DownloadBi|
  00af0	e59d301c	 ldr         r3, [sp, #0x1C]
  00af4	e2833004	 add         r3, r3, #4
  00af8	e5931000	 ldr         r1, [r3]
  00afc	e59d301c	 ldr         r3, [sp, #0x1C]
  00b00	e5930000	 ldr         r0, [r3]
  00b04	eb000000	 bl          OEMStartEraseFlash
  00b08	e58d0040	 str         r0, [sp, #0x40]
  00b0c	e59d3040	 ldr         r3, [sp, #0x40]
  00b10	e3530000	 cmp         r3, #0
  00b14	1a000006	 bne         |$LN16@DownloadBi|

; 1101 :     {
; 1102 :         KITLOutputDebugString ("Invalid flash address/length\r\n");

  00b18	e59f0470	 ldr         r0, [pc, #0x470]
  00b1c	eb000000	 bl          KITLOutputDebugString

; 1103 :         HALT (BLERR_FLASHADDR);

  00b20	e3e00009	 mvn         r0, #9
  00b24	eb000000	 bl          HALT

; 1104 :         return (FALSE);

  00b28	e3a03000	 mov         r3, #0
  00b2c	e58d302c	 str         r3, [sp, #0x2C]
  00b30	ea00010a	 b           |$LN22@DownloadBi|
  00b34		 |$LN16@DownloadBi|

; 1105 :     }
; 1106 : 
; 1107 : #ifdef DEBUG
; 1108 :     // Clearing memory ensures no garbage between sparse .bin records, so that 
; 1109 :     // our post-download checksum will be accurate.
; 1110 :     memset( (LPVOID) OEMMapMemAddr(pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionStart),
; 1111 :                 0, pCurDownloadFile->dwRegionLength );

  00b34	e59d301c	 ldr         r3, [sp, #0x1C]
  00b38	e5931000	 ldr         r1, [r3]
  00b3c	e59d301c	 ldr         r3, [sp, #0x1C]
  00b40	e5930000	 ldr         r0, [r3]
  00b44	eb000000	 bl          OEMMapMemAddr
  00b48	e58d0044	 str         r0, [sp, #0x44]
  00b4c	e59d301c	 ldr         r3, [sp, #0x1C]
  00b50	e2833004	 add         r3, r3, #4
  00b54	e5932000	 ldr         r2, [r3]
  00b58	e3a01000	 mov         r1, #0
  00b5c	e59d0044	 ldr         r0, [sp, #0x44]
  00b60	eb000000	 bl          memset
  00b64		 |$LN15@DownloadBi|

; 1112 : #endif
; 1113 : 
; 1114 : 
; 1115 :     //------------------------------------------------------------------------
; 1116 :     //  Download .bin records
; 1117 :     //------------------------------------------------------------------------
; 1118 : 
; 1119 :     while ( OEMReadData (sizeof (DWORD), (LPBYTE) &dwRecAddr)  &&
; 1120 :             OEMReadData (sizeof (DWORD), (LPBYTE) &dwRecLen)   &&
; 1121 :             OEMReadData (sizeof (DWORD), (LPBYTE) &dwRecChk) )

  00b64	e28d1018	 add         r1, sp, #0x18
  00b68	e3a00004	 mov         r0, #4
  00b6c	eb000000	 bl          OEMReadData
  00b70	e58d0048	 str         r0, [sp, #0x48]
  00b74	e59d3048	 ldr         r3, [sp, #0x48]
  00b78	e3530000	 cmp         r3, #0
  00b7c	0a0000ad	 beq         |$LN14@DownloadBi|
  00b80	e28d1008	 add         r1, sp, #8
  00b84	e3a00004	 mov         r0, #4
  00b88	eb000000	 bl          OEMReadData
  00b8c	e58d004c	 str         r0, [sp, #0x4C]
  00b90	e59d304c	 ldr         r3, [sp, #0x4C]
  00b94	e3530000	 cmp         r3, #0
  00b98	0a0000a6	 beq         |$LN14@DownloadBi|
  00b9c	e28d1010	 add         r1, sp, #0x10
  00ba0	e3a00004	 mov         r0, #4
  00ba4	eb000000	 bl          OEMReadData
  00ba8	e58d0050	 str         r0, [sp, #0x50]
  00bac	e59d3050	 ldr         r3, [sp, #0x50]
  00bb0	e3530000	 cmp         r3, #0
  00bb4	0a00009f	 beq         |$LN14@DownloadBi|

; 1122 :     {
; 1123 : #ifdef DEBUG
; 1124 :         KITLOutputDebugString(" <> Record [ %d ] dwRecAddr = 0x%x, dwRecLen = 0x%x\r\n", 
; 1125 :             dwRecNum, dwRecAddr, dwRecLen);

  00bb8	e59d3008	 ldr         r3, [sp, #8]
  00bbc	e59d2018	 ldr         r2, [sp, #0x18]
  00bc0	e59d1020	 ldr         r1, [sp, #0x20]
  00bc4	e59f03c0	 ldr         r0, [pc, #0x3C0]
  00bc8	eb000000	 bl          KITLOutputDebugString

; 1126 : #endif
; 1127 : 
; 1128 :         // last record of .bin file uses sentinel values for address and checksum.
; 1129 :         if (!dwRecAddr && !dwRecChk)

  00bcc	e59d3018	 ldr         r3, [sp, #0x18]
  00bd0	e3530000	 cmp         r3, #0
  00bd4	1a000003	 bne         |$LN13@DownloadBi|
  00bd8	e59d3010	 ldr         r3, [sp, #0x10]
  00bdc	e3530000	 cmp         r3, #0
  00be0	1a000000	 bne         |$LN13@DownloadBi|

; 1130 :         {
; 1131 :             break;

  00be4	ea000093	 b           |$LN14@DownloadBi|
  00be8		 |$LN13@DownloadBi|

; 1132 :         }
; 1133 : 
; 1134 :         // map the record address (FLASH data is cached, for example)
; 1135 :         lpDest = OEMMapMemAddr (pCurDownloadFile->dwRegionStart, dwRecAddr);

  00be8	e59d1018	 ldr         r1, [sp, #0x18]
  00bec	e59d301c	 ldr         r3, [sp, #0x1C]
  00bf0	e5930000	 ldr         r0, [r3]
  00bf4	eb000000	 bl          OEMMapMemAddr
  00bf8	e58d0054	 str         r0, [sp, #0x54]
  00bfc	e59d3054	 ldr         r3, [sp, #0x54]
  00c00	e58d3000	 str         r3, [sp]

; 1136 : 
; 1137 :         // read data block
; 1138 :         if (!OEMReadData (dwRecLen, lpDest))

  00c04	e59d1000	 ldr         r1, [sp]
  00c08	e59d0008	 ldr         r0, [sp, #8]
  00c0c	eb000000	 bl          OEMReadData
  00c10	e58d0058	 str         r0, [sp, #0x58]
  00c14	e59d3058	 ldr         r3, [sp, #0x58]
  00c18	e3530000	 cmp         r3, #0
  00c1c	1a000007	 bne         |$LN12@DownloadBi|

; 1139 :         {
; 1140 :             KITLOutputDebugString ("****** Data record %d corrupted, ABORT!!! ******\r\n", dwRecNum);

  00c20	e59d1020	 ldr         r1, [sp, #0x20]
  00c24	e59f035c	 ldr         r0, [pc, #0x35C]
  00c28	eb000000	 bl          KITLOutputDebugString

; 1141 :             HALT (BLERR_CORRUPTED_DATA);

  00c2c	e3e00003	 mvn         r0, #3
  00c30	eb000000	 bl          HALT

; 1142 :             return (FALSE);

  00c34	e3a03000	 mov         r3, #0
  00c38	e58d302c	 str         r3, [sp, #0x2C]
  00c3c	ea0000c7	 b           |$LN22@DownloadBi|
  00c40		 |$LN12@DownloadBi|

; 1143 :         }
; 1144 : 
; 1145 :         if (!VerifyChecksum (dwRecLen, lpDest, dwRecChk))

  00c40	e59d2010	 ldr         r2, [sp, #0x10]
  00c44	e59d1000	 ldr         r1, [sp]
  00c48	e59d0008	 ldr         r0, [sp, #8]
  00c4c	eb000000	 bl          VerifyChecksum
  00c50	e58d005c	 str         r0, [sp, #0x5C]
  00c54	e59d305c	 ldr         r3, [sp, #0x5C]
  00c58	e3530000	 cmp         r3, #0
  00c5c	1a000007	 bne         |$LN11@DownloadBi|

; 1146 :         {
; 1147 :             KITLOutputDebugString ("****** Checksum failure on record %d, ABORT!!! ******\r\n", dwRecNum);

  00c60	e59d1020	 ldr         r1, [sp, #0x20]
  00c64	e59f0318	 ldr         r0, [pc, #0x318]
  00c68	eb000000	 bl          KITLOutputDebugString

; 1148 :             HALT (BLERR_CHECKSUM);

  00c6c	e3e00006	 mvn         r0, #6
  00c70	eb000000	 bl          HALT

; 1149 :             return (FALSE);

  00c74	e3a03000	 mov         r3, #0
  00c78	e58d302c	 str         r3, [sp, #0x2C]
  00c7c	ea0000b7	 b           |$LN22@DownloadBi|
  00c80		 |$LN11@DownloadBi|

; 1150 :         }
; 1151 : 
; 1152 :         // Look for ROMHDR to compute ROM offset.  NOTE: romimage guarantees that the record containing
; 1153 :         // the TOC signature and pointer will always come before the record that contains the ROMHDR contents.
; 1154 :         //
; 1155 :         if (dwRecLen == sizeof(ROMHDR) && (*(LPDWORD) OEMMapMemAddr(pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionStart + ROM_SIGNATURE_OFFSET) == ROM_SIGNATURE))

  00c80	e59d3008	 ldr         r3, [sp, #8]
  00c84	e3530054	 cmp         r3, #0x54
  00c88	1a00005e	 bne         |$LN10@DownloadBi|
  00c8c	e59d301c	 ldr         r3, [sp, #0x1C]
  00c90	e5933000	 ldr         r3, [r3]
  00c94	e2831040	 add         r1, r3, #0x40
  00c98	e59d301c	 ldr         r3, [sp, #0x1C]
  00c9c	e5930000	 ldr         r0, [r3]
  00ca0	eb000000	 bl          OEMMapMemAddr
  00ca4	e58d0060	 str         r0, [sp, #0x60]
  00ca8	e59d3060	 ldr         r3, [sp, #0x60]
  00cac	e5932000	 ldr         r2, [r3]
  00cb0	e59f32c0	 ldr         r3, [pc, #0x2C0]
  00cb4	e1520003	 cmp         r2, r3
  00cb8	1a000052	 bne         |$LN10@DownloadBi|

; 1156 :         {
; 1157 :             DWORD dwTempOffset = (dwRecAddr - *(LPDWORD)OEMMapMemAddr(pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionStart + ROM_SIGNATURE_OFFSET + sizeof(ULONG)));

  00cbc	e59d301c	 ldr         r3, [sp, #0x1C]
  00cc0	e5933000	 ldr         r3, [r3]
  00cc4	e2831044	 add         r1, r3, #0x44
  00cc8	e59d301c	 ldr         r3, [sp, #0x1C]
  00ccc	e5930000	 ldr         r0, [r3]
  00cd0	eb000000	 bl          OEMMapMemAddr
  00cd4	e58d0064	 str         r0, [sp, #0x64]
  00cd8	e59d2018	 ldr         r2, [sp, #0x18]
  00cdc	e59d3064	 ldr         r3, [sp, #0x64]
  00ce0	e5933000	 ldr         r3, [r3]
  00ce4	e0423003	 sub         r3, r2, r3
  00ce8	e58d3028	 str         r3, [sp, #0x28]

; 1158 :             ROMHDR *pROMHdr = (ROMHDR *)lpDest;

  00cec	e59d3000	 ldr         r3, [sp]
  00cf0	e58d3024	 str         r3, [sp, #0x24]

; 1159 : 
; 1160 :             // Check to make sure this record really contains the ROMHDR.
; 1161 :             //
; 1162 :             if ((pROMHdr->physfirst == (pCurDownloadFile->dwRegionStart - dwTempOffset)) &&
; 1163 :                 (pROMHdr->physlast  == (pCurDownloadFile->dwRegionStart - dwTempOffset + pCurDownloadFile->dwRegionLength)) &&
; 1164 :                 (DWORD)(HIWORD(pROMHdr->dllfirst << 16) <= pROMHdr->dlllast) &&
; 1165 :                 (DWORD)(LOWORD(pROMHdr->dllfirst << 16) <= pROMHdr->dlllast))

  00cf4	e59d3024	 ldr         r3, [sp, #0x24]
  00cf8	e2831008	 add         r1, r3, #8
  00cfc	e59d301c	 ldr         r3, [sp, #0x1C]
  00d00	e5932000	 ldr         r2, [r3]
  00d04	e59d3028	 ldr         r3, [sp, #0x28]
  00d08	e0422003	 sub         r2, r2, r3
  00d0c	e5913000	 ldr         r3, [r1]
  00d10	e1530002	 cmp         r3, r2
  00d14	1a00003b	 bne         |$LN9@DownloadBi|
  00d18	e59d3024	 ldr         r3, [sp, #0x24]
  00d1c	e283100c	 add         r1, r3, #0xC
  00d20	e59d301c	 ldr         r3, [sp, #0x1C]
  00d24	e5932000	 ldr         r2, [r3]
  00d28	e59d3028	 ldr         r3, [sp, #0x28]
  00d2c	e0422003	 sub         r2, r2, r3
  00d30	e59d301c	 ldr         r3, [sp, #0x1C]
  00d34	e2833004	 add         r3, r3, #4
  00d38	e5933000	 ldr         r3, [r3]
  00d3c	e0822003	 add         r2, r2, r3
  00d40	e5913000	 ldr         r3, [r1]
  00d44	e1530002	 cmp         r3, r2
  00d48	1a00002e	 bne         |$LN9@DownloadBi|
  00d4c	e59d3024	 ldr         r3, [sp, #0x24]
  00d50	e5933000	 ldr         r3, [r3]
  00d54	e1a03803	 mov         r3, r3, lsl #16
  00d58	e1a02823	 mov         r2, r3, lsr #16
  00d5c	e3a03cff	 mov         r3, #0xFF, 24
  00d60	e38330ff	 orr         r3, r3, #0xFF
  00d64	e0023003	 and         r3, r2, r3
  00d68	e1a02803	 mov         r2, r3, lsl #16
  00d6c	e1a02822	 mov         r2, r2, lsr #16
  00d70	e59d3024	 ldr         r3, [sp, #0x24]
  00d74	e2833004	 add         r3, r3, #4
  00d78	e5933000	 ldr         r3, [r3]
  00d7c	e1520003	 cmp         r2, r3
  00d80	8a000002	 bhi         |$LN24@DownloadBi|
  00d84	e3a03001	 mov         r3, #1
  00d88	e58d3068	 str         r3, [sp, #0x68]
  00d8c	ea000001	 b           |$LN25@DownloadBi|
  00d90		 |$LN24@DownloadBi|
  00d90	e3a03000	 mov         r3, #0
  00d94	e58d3068	 str         r3, [sp, #0x68]
  00d98		 |$LN25@DownloadBi|
  00d98	e59d3068	 ldr         r3, [sp, #0x68]
  00d9c	e3530000	 cmp         r3, #0
  00da0	0a000018	 beq         |$LN9@DownloadBi|
  00da4	e59d3024	 ldr         r3, [sp, #0x24]
  00da8	e5933000	 ldr         r3, [r3]
  00dac	e1a03803	 mov         r3, r3, lsl #16
  00db0	e1a02803	 mov         r2, r3, lsl #16
  00db4	e1a02822	 mov         r2, r2, lsr #16
  00db8	e59d3024	 ldr         r3, [sp, #0x24]
  00dbc	e2833004	 add         r3, r3, #4
  00dc0	e5933000	 ldr         r3, [r3]
  00dc4	e1520003	 cmp         r2, r3
  00dc8	8a000002	 bhi         |$LN26@DownloadBi|
  00dcc	e3a03001	 mov         r3, #1
  00dd0	e58d306c	 str         r3, [sp, #0x6C]
  00dd4	ea000001	 b           |$LN27@DownloadBi|
  00dd8		 |$LN26@DownloadBi|
  00dd8	e3a03000	 mov         r3, #0
  00ddc	e58d306c	 str         r3, [sp, #0x6C]
  00de0		 |$LN27@DownloadBi|
  00de0	e59d306c	 ldr         r3, [sp, #0x6C]
  00de4	e3530000	 cmp         r3, #0
  00de8	0a000006	 beq         |$LN9@DownloadBi|

; 1166 :             {
; 1167 :                 g_dwROMOffset = dwTempOffset;

  00dec	e59d2028	 ldr         r2, [sp, #0x28]
  00df0	e59f3188	 ldr         r3, [pc, #0x188]
  00df4	e5832000	 str         r2, [r3]

; 1168 :                 KITLOutputDebugString("rom_offset=0x%x.\r\n", g_dwROMOffset); 

  00df8	e59f3180	 ldr         r3, [pc, #0x180]
  00dfc	e5931000	 ldr         r1, [r3]
  00e00	e59f0174	 ldr         r0, [pc, #0x174]
  00e04	eb000000	 bl          KITLOutputDebugString
  00e08		 |$LN9@DownloadBi|
  00e08		 |$LN10@DownloadBi|

; 1169 :             }
; 1170 :         }
; 1171 : 
; 1172 :         // verify partial checksum
; 1173 :         OEMShowProgress (dwRecNum++);

  00e08	e59d3020	 ldr         r3, [sp, #0x20]
  00e0c	e58d3070	 str         r3, [sp, #0x70]
  00e10	e59d0070	 ldr         r0, [sp, #0x70]
  00e14	eb000000	 bl          OEMShowProgress
  00e18	e59d3020	 ldr         r3, [sp, #0x20]
  00e1c	e2833001	 add         r3, r3, #1
  00e20	e58d3020	 str         r3, [sp, #0x20]

; 1174 : 
; 1175 :         if (fIsFlash)

  00e24	e59d300c	 ldr         r3, [sp, #0xC]
  00e28	e3530000	 cmp         r3, #0
  00e2c	0a000000	 beq         |$LN8@DownloadBi|

; 1176 :         {
; 1177 :             OEMContinueEraseFlash ();

  00e30	eb000000	 bl          OEMContinueEraseFlash
  00e34		 |$LN8@DownloadBi|

; 1178 :         }
; 1179 :     }  // while( records remaining )

  00e34	eaffff4a	 b           |$LN15@DownloadBi|
  00e38		 |$LN14@DownloadBi|

; 1180 :     
; 1181 : 
; 1182 :     //------------------------------------------------------------------------
; 1183 :     //  Determine the image entry point
; 1184 :     //------------------------------------------------------------------------
; 1185 : 
; 1186 :     // Does this .bin file contain a TOC?
; 1187 :     if (*(LPDWORD) OEMMapMemAddr(pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionStart + ROM_SIGNATURE_OFFSET) == ROM_SIGNATURE)

  00e38	e59d301c	 ldr         r3, [sp, #0x1C]
  00e3c	e5933000	 ldr         r3, [r3]
  00e40	e2831040	 add         r1, r3, #0x40
  00e44	e59d301c	 ldr         r3, [sp, #0x1C]
  00e48	e5930000	 ldr         r0, [r3]
  00e4c	eb000000	 bl          OEMMapMemAddr
  00e50	e58d0074	 str         r0, [sp, #0x74]
  00e54	e59d3074	 ldr         r3, [sp, #0x74]
  00e58	e5932000	 ldr         r2, [r3]
  00e5c	e59f3114	 ldr         r3, [pc, #0x114]
  00e60	e1520003	 cmp         r2, r3
  00e64	1a000016	 bne         |$LN7@DownloadBi|

; 1188 :     {
; 1189 :         // Contain the kernel?
; 1190 :         if (IsKernelRegion(pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionLength))

  00e68	e59d301c	 ldr         r3, [sp, #0x1C]
  00e6c	e2833004	 add         r3, r3, #4
  00e70	e5931000	 ldr         r1, [r3]
  00e74	e59d301c	 ldr         r3, [sp, #0x1C]
  00e78	e5930000	 ldr         r0, [r3]
  00e7c	eb000000	 bl          IsKernelRegion
  00e80	e58d0078	 str         r0, [sp, #0x78]
  00e84	e59d3078	 ldr         r3, [sp, #0x78]
  00e88	e3530000	 cmp         r3, #0
  00e8c	0a00000b	 beq         |$LN6@DownloadBi|

; 1191 :         {
; 1192 :             *pdwImageStart  = pCurDownloadFile->dwRegionStart;

  00e90	e59d301c	 ldr         r3, [sp, #0x1C]
  00e94	e5932000	 ldr         r2, [r3]
  00e98	e59d3088	 ldr         r3, [sp, #0x88]
  00e9c	e5832000	 str         r2, [r3]

; 1193 :             *pdwImageLength = pCurDownloadFile->dwRegionLength;

  00ea0	e59d301c	 ldr         r3, [sp, #0x1C]
  00ea4	e2833004	 add         r3, r3, #4
  00ea8	e5932000	 ldr         r2, [r3]
  00eac	e59d308c	 ldr         r3, [sp, #0x8C]
  00eb0	e5832000	 str         r2, [r3]

; 1194 :             *pdwLaunchAddr  = dwRecLen;

  00eb4	e59d2008	 ldr         r2, [sp, #8]
  00eb8	e59d3090	 ldr         r3, [sp, #0x90]
  00ebc	e5832000	 str         r2, [r3]
  00ec0		 |$LN6@DownloadBi|

; 1195 :         }

  00ec0	ea00000f	 b           |$LN5@DownloadBi|
  00ec4		 |$LN7@DownloadBi|

; 1196 :     }
; 1197 :     // No TOC - not made by romimage.  
; 1198 :     else if (g_DownloadManifest.dwNumRegions == 1)

  00ec4	e59f30a8	 ldr         r3, [pc, #0xA8]
  00ec8	e5933000	 ldr         r3, [r3]
  00ecc	e3530001	 cmp         r3, #1
  00ed0	1a00000b	 bne         |$LN4@DownloadBi|

; 1199 :     {
; 1200 :         *pdwImageStart  = pCurDownloadFile->dwRegionStart;

  00ed4	e59d301c	 ldr         r3, [sp, #0x1C]
  00ed8	e5932000	 ldr         r2, [r3]
  00edc	e59d3088	 ldr         r3, [sp, #0x88]
  00ee0	e5832000	 str         r2, [r3]

; 1201 :         *pdwImageLength = pCurDownloadFile->dwRegionLength;

  00ee4	e59d301c	 ldr         r3, [sp, #0x1C]
  00ee8	e2833004	 add         r3, r3, #4
  00eec	e5932000	 ldr         r2, [r3]
  00ef0	e59d308c	 ldr         r3, [sp, #0x8C]
  00ef4	e5832000	 str         r2, [r3]

; 1202 :         *pdwLaunchAddr  = dwRecLen;

  00ef8	e59d2008	 ldr         r2, [sp, #8]
  00efc	e59d3090	 ldr         r3, [sp, #0x90]
  00f00	e5832000	 str         r2, [r3]
  00f04		 |$LN4@DownloadBi|
  00f04		 |$LN5@DownloadBi|

; 1203 :     }
; 1204 :     else
; 1205 :     {
; 1206 :         // If we're downloading more than one .bin file, it's probably 
; 1207 :         // chain.bin which doesn't have a TOC (and which isn't
; 1208 :         // going to be downloaded on its own) and we should ignore it.
; 1209 :     }
; 1210 : 
; 1211 : 
; 1212 :     if (fIsFlash)

  00f04	e59d300c	 ldr         r3, [sp, #0xC]
  00f08	e3530000	 cmp         r3, #0
  00f0c	0a000009	 beq         |$LN2@DownloadBi|

; 1213 :     {
; 1214 :         // finish the flash erase
; 1215 :         if (!OEMFinishEraseFlash())

  00f10	eb000000	 bl          OEMFinishEraseFlash
  00f14	e58d007c	 str         r0, [sp, #0x7C]
  00f18	e59d307c	 ldr         r3, [sp, #0x7C]
  00f1c	e3530000	 cmp         r3, #0
  00f20	1a000004	 bne         |$LN1@DownloadBi|

; 1216 :         {
; 1217 :             HALT (BLERR_FLASH_ERASE);

  00f24	e3e0000a	 mvn         r0, #0xA
  00f28	eb000000	 bl          HALT

; 1218 :             return (FALSE);

  00f2c	e3a03000	 mov         r3, #0
  00f30	e58d302c	 str         r3, [sp, #0x2C]
  00f34	ea000009	 b           |$LN22@DownloadBi|
  00f38		 |$LN1@DownloadBi|
  00f38		 |$LN2@DownloadBi|

; 1219 :         }
; 1220 : 
; 1221 :     }
; 1222 : 
; 1223 :     KITLOutputDebugString("ImageStart = 0x%x, ImageLength = 0x%x, LaunchAddr = 0x%x\r\n",
; 1224 :         *pdwImageStart, *pdwImageLength, *pdwLaunchAddr);

  00f38	e59d3090	 ldr         r3, [sp, #0x90]
  00f3c	e5933000	 ldr         r3, [r3]
  00f40	e59d208c	 ldr         r2, [sp, #0x8C]
  00f44	e5922000	 ldr         r2, [r2]
  00f48	e59d1088	 ldr         r1, [sp, #0x88]
  00f4c	e5911000	 ldr         r1, [r1]
  00f50	e59f0018	 ldr         r0, [pc, #0x18]
  00f54	eb000000	 bl          KITLOutputDebugString

; 1225 : 
; 1226 :     return TRUE;

  00f58	e3a03001	 mov         r3, #1
  00f5c	e58d302c	 str         r3, [sp, #0x2C]
  00f60		 |$LN22@DownloadBi|

; 1227 : }

  00f60	e59d002c	 ldr         r0, [sp, #0x2C]
  00f64	e28dd080	 add         sp, sp, #0x80
  00f68	e89d6000	 ldmia       sp, {sp, lr}
  00f6c	e12fff1e	 bx          lr
  00f70		 |$LN31@DownloadBi|
  00f70		 |$LN32@DownloadBi|
  00f70	00000000	 DCD         |??_C@_0DL@DCHMDHHD@ImageStart?5?$DN?50x?$CFx?0?5ImageLength?5?$DN@|
  00f74		 |$LN33@DownloadBi|
  00f74	00000000	 DCD         |g_DownloadManifest|
  00f78		 |$LN34@DownloadBi|
  00f78	43454345	 DCD         0x43454345
  00f7c		 |$LN35@DownloadBi|
  00f7c	00000000	 DCD         |??_C@_0BD@PHLGNLDI@rom_offset?$DN0x?$CFx?4?$AN?6?$AA@|
  00f80		 |$LN36@DownloadBi|
  00f80	00000000	 DCD         |g_dwROMOffset|
  00f84		 |$LN37@DownloadBi|
  00f84	00000000	 DCD         |??_C@_0DI@FDIIHFBA@?$CK?$CK?$CK?$CK?$CK?$CK?5Checksum?5failure?5on?5recor@|
  00f88		 |$LN38@DownloadBi|
  00f88	00000000	 DCD         |??_C@_0DD@KHJBCIED@?$CK?$CK?$CK?$CK?$CK?$CK?5Data?5record?5?$CFd?5corrupted?0@|
  00f8c		 |$LN39@DownloadBi|
  00f8c	00000000	 DCD         |??_C@_0DG@MINKPHJL@?5?$DM?$DO?5Record?5?$FL?5?$CFd?5?$FN?5dwRecAddr?5?$DN?50x@|
  00f90		 |$LN40@DownloadBi|
  00f90	00000000	 DCD         |??_C@_0BP@EOFEMPOO@Invalid?5flash?5address?1length?$AN?6?$AA@|
  00f94		 |$LN41@DownloadBi|
  00f94	00000000	 DCD         |??_C@_0CC@DNECAMLM@?$CBOEMVERIFYMEMORY?3?5Invalid?5image?$AN@|
  00f98		 |$LN42@DownloadBi|
  00f98	00000000	 DCD         |g_pOEMVerifyMemory|
  00f9c		 |$LN43@DownloadBi|
  00f9c	00000000	 DCD         |g_downloadFilesRemaining|
  00fa0		 |$LN44@DownloadBi|
  00fa0	00000000	 DCD         |g_fOEMNotified|
  00fa4		 |$LN45@DownloadBi|
  00fa4	00000000	 DCD         |g_pOEMMultiBINNotify|
  00fa8		 |$LN46@DownloadBi|
  00fa8	00000000	 DCD         |??_C@_0CE@NKAMCDHO@Unable?5to?5read?5image?5start?1lengt@|
  00fac		 |$LN47@DownloadBi|
  00fac	00000000	 DCD         |g_bBINDownload|
  00fb0		 |$M40894|

			 ENDP  ; |DownloadBin|

	EXPORT	|??_C@_0CO@PFLGIDFG@ERROR?3?5failed?5when?5reading?5raw?5b@| [ DATA ] ; `string'

  00040			 AREA	 |.pdata|, PDATA
|$T40919| DCD	|$LN11@DownloadNB|
	DCD	0x4000ab04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CO@PFLGIDFG@ERROR?3?5failed?5when?5reading?5raw?5b@| DCB "ERROR: "
	DCB	"failed when reading raw binary file.", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  00fb0			 AREA	 |.text|, CODE, ARM

  00fb0		 |DownloadNB0| PROC

; 1231 : {

  00fb0		 |$LN11@DownloadNB|
  00fb0	e1a0c00d	 mov         r12, sp
  00fb4	e92d0007	 stmdb       sp!, {r0 - r2}
  00fb8	e92d5000	 stmdb       sp!, {r12, lr}
  00fbc	e24dd028	 sub         sp, sp, #0x28
  00fc0		 |$M40916|

; 1232 :     RegionInfo *pCurDownloadFile;
; 1233 :     BOOL        fIsFlash = FALSE;

  00fc0	e3a03000	 mov         r3, #0
  00fc4	e58d3004	 str         r3, [sp, #4]

; 1234 :     LPBYTE      lpDest = NULL;

  00fc8	e3a03000	 mov         r3, #0
  00fcc	e58d3000	 str         r3, [sp]

; 1235 : 
; 1236 :     g_bBINDownload = FALSE;

  00fd0	e59f2280	 ldr         r2, [pc, #0x280]
  00fd4	e3a03000	 mov         r3, #0
  00fd8	e5c23000	 strb        r3, [r2]

; 1237 : 
; 1238 : 
; 1239 :     // Provide the download manifest to the OEM.  This gives the OEM the
; 1240 :     // opportunity to provide start addresses for the .nb0 files (which 
; 1241 :     // don't contain placement information like .bin files do).
; 1242 :     if (!g_fOEMNotified && g_pOEMMultiBINNotify)

  00fdc	e59f326c	 ldr         r3, [pc, #0x26C]
  00fe0	e5933000	 ldr         r3, [r3]
  00fe4	e3530000	 cmp         r3, #0
  00fe8	1a00000b	 bne         |$LN6@DownloadNB|
  00fec	e59f3260	 ldr         r3, [pc, #0x260]
  00ff0	e5933000	 ldr         r3, [r3]
  00ff4	e3530000	 cmp         r3, #0
  00ff8	0a000007	 beq         |$LN6@DownloadNB|

; 1243 :     {
; 1244 :         g_pOEMMultiBINNotify((PDownloadManifest)&g_DownloadManifest);

  00ffc	e59f0244	 ldr         r0, [pc, #0x244]
  01000	e59f324c	 ldr         r3, [pc, #0x24C]
  01004	e5933000	 ldr         r3, [r3]
  01008	e1a0e00f	 mov         lr, pc
  0100c	e12fff13	 bx          r3

; 1245 :         g_fOEMNotified = TRUE;

  01010	e59f2238	 ldr         r2, [pc, #0x238]
  01014	e3a03001	 mov         r3, #1
  01018	e5823000	 str         r3, [r2]
  0101c		 |$LN6@DownloadNB|

; 1246 :     }
; 1247 : 
; 1248 :     // Locate the current download manifest entry (current download file).
; 1249 :     //
; 1250 :     pCurDownloadFile = &g_DownloadManifest.Region[g_DownloadManifest.dwNumRegions - g_downloadFilesRemaining];

  0101c	e59f3228	 ldr         r3, [pc, #0x228]
  01020	e5d32000	 ldrb        r2, [r3]
  01024	e59f321c	 ldr         r3, [pc, #0x21C]
  01028	e5933000	 ldr         r3, [r3]
  0102c	e0431002	 sub         r1, r3, r2
  01030	e3a03f43	 mov         r3, #0x43, 30
  01034	e0020391	 mul         r2, r1, r3
  01038	e59f3208	 ldr         r3, [pc, #0x208]
  0103c	e2833004	 add         r3, r3, #4
  01040	e0833002	 add         r3, r3, r2
  01044	e58d3008	 str         r3, [sp, #8]

; 1251 : 
; 1252 :     // give the OEM a chance to verify memory
; 1253 :     if (g_pOEMVerifyMemory && !g_pOEMVerifyMemory (pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionLength))

  01048	e59f31f4	 ldr         r3, [pc, #0x1F4]
  0104c	e5933000	 ldr         r3, [r3]
  01050	e3530000	 cmp         r3, #0
  01054	0a000013	 beq         |$LN5@DownloadNB|
  01058	e59d3008	 ldr         r3, [sp, #8]
  0105c	e2833004	 add         r3, r3, #4
  01060	e5931000	 ldr         r1, [r3]
  01064	e59d3008	 ldr         r3, [sp, #8]
  01068	e5930000	 ldr         r0, [r3]
  0106c	e59f31d0	 ldr         r3, [pc, #0x1D0]
  01070	e5933000	 ldr         r3, [r3]
  01074	e1a0e00f	 mov         lr, pc
  01078	e12fff13	 bx          r3
  0107c	e58d0010	 str         r0, [sp, #0x10]
  01080	e59d3010	 ldr         r3, [sp, #0x10]
  01084	e3530000	 cmp         r3, #0
  01088	1a000006	 bne         |$LN5@DownloadNB|

; 1254 :     {
; 1255 :         KITLOutputDebugString ("!OEMVERIFYMEMORY: Invalid image\r\n");

  0108c	e59f01ac	 ldr         r0, [pc, #0x1AC]
  01090	eb000000	 bl          KITLOutputDebugString

; 1256 :         HALT (BLERR_OEMVERIFY);

  01094	e3e00008	 mvn         r0, #8
  01098	eb000000	 bl          HALT

; 1257 :         return (FALSE);

  0109c	e3a03000	 mov         r3, #0
  010a0	e58d300c	 str         r3, [sp, #0xC]
  010a4	ea00005d	 b           |$LN7@DownloadNB|
  010a8		 |$LN5@DownloadNB|

; 1258 :     }
; 1259 : 
; 1260 :     // check for flash image. Start erasing if it is.
; 1261 :     if ((fIsFlash = OEMIsFlashAddr (pCurDownloadFile->dwRegionStart)) 
; 1262 :         && !OEMStartEraseFlash (pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionLength))

  010a8	e59d3008	 ldr         r3, [sp, #8]
  010ac	e5930000	 ldr         r0, [r3]
  010b0	eb000000	 bl          OEMIsFlashAddr
  010b4	e58d0014	 str         r0, [sp, #0x14]
  010b8	e59d3014	 ldr         r3, [sp, #0x14]
  010bc	e58d3004	 str         r3, [sp, #4]
  010c0	e59d3004	 ldr         r3, [sp, #4]
  010c4	e3530000	 cmp         r3, #0
  010c8	0a000010	 beq         |$LN4@DownloadNB|
  010cc	e59d3008	 ldr         r3, [sp, #8]
  010d0	e2833004	 add         r3, r3, #4
  010d4	e5931000	 ldr         r1, [r3]
  010d8	e59d3008	 ldr         r3, [sp, #8]
  010dc	e5930000	 ldr         r0, [r3]
  010e0	eb000000	 bl          OEMStartEraseFlash
  010e4	e58d0018	 str         r0, [sp, #0x18]
  010e8	e59d3018	 ldr         r3, [sp, #0x18]
  010ec	e3530000	 cmp         r3, #0
  010f0	1a000006	 bne         |$LN4@DownloadNB|

; 1263 :     {
; 1264 :         KITLOutputDebugString ("Invalid flash address/length\r\n");

  010f4	e59f0140	 ldr         r0, [pc, #0x140]
  010f8	eb000000	 bl          KITLOutputDebugString

; 1265 :         HALT (BLERR_FLASHADDR);

  010fc	e3e00009	 mvn         r0, #9
  01100	eb000000	 bl          HALT

; 1266 :         return (FALSE);

  01104	e3a03000	 mov         r3, #0
  01108	e58d300c	 str         r3, [sp, #0xC]
  0110c	ea000043	 b           |$LN7@DownloadNB|
  01110		 |$LN4@DownloadNB|

; 1267 :     }
; 1268 : 
; 1269 : 
; 1270 :     //------------------------------------------------------------------------
; 1271 :     //  Download the file
; 1272 :     //
; 1273 :     //  If we're downloading an UNSIGNED .nb0 file, we've already read the 
; 1274 :     //  start of the file in GetImageType().
; 1275 :     //  Copy what we've read so far to the destination, then finish downloading.
; 1276 :     //------------------------------------------------------------------------
; 1277 :     lpDest = OEMMapMemAddr (pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionStart);

  01110	e59d3008	 ldr         r3, [sp, #8]
  01114	e5931000	 ldr         r1, [r3]
  01118	e59d3008	 ldr         r3, [sp, #8]
  0111c	e5930000	 ldr         r0, [r3]
  01120	eb000000	 bl          OEMMapMemAddr
  01124	e58d001c	 str         r0, [sp, #0x1C]
  01128	e59d301c	 ldr         r3, [sp, #0x1C]
  0112c	e58d3000	 str         r3, [sp]

; 1278 :     memcpy(lpDest, g_hdr, BL_HDRSIG_SIZE);

  01130	e3a02007	 mov         r2, #7
  01134	e59f10fc	 ldr         r1, [pc, #0xFC]
  01138	e59d0000	 ldr         r0, [sp]
  0113c	eb000000	 bl          memcpy

; 1279 :     lpDest += BL_HDRSIG_SIZE;

  01140	e59d3000	 ldr         r3, [sp]
  01144	e2833007	 add         r3, r3, #7
  01148	e58d3000	 str         r3, [sp]

; 1280 : 
; 1281 :     if (!OEMReadData ((pCurDownloadFile->dwRegionLength - BL_HDRSIG_SIZE), lpDest))

  0114c	e59d1000	 ldr         r1, [sp]
  01150	e59d3008	 ldr         r3, [sp, #8]
  01154	e2833004	 add         r3, r3, #4
  01158	e5933000	 ldr         r3, [r3]
  0115c	e2430007	 sub         r0, r3, #7
  01160	eb000000	 bl          OEMReadData
  01164	e58d0020	 str         r0, [sp, #0x20]
  01168	e59d3020	 ldr         r3, [sp, #0x20]
  0116c	e3530000	 cmp         r3, #0
  01170	1a000006	 bne         |$LN3@DownloadNB|

; 1282 :     {
; 1283 :         KITLOutputDebugString ("ERROR: failed when reading raw binary file.\r\n");

  01174	e59f00b8	 ldr         r0, [pc, #0xB8]
  01178	eb000000	 bl          KITLOutputDebugString

; 1284 :         HALT (BLERR_CORRUPTED_DATA);

  0117c	e3e00003	 mvn         r0, #3
  01180	eb000000	 bl          HALT

; 1285 :         return (FALSE);

  01184	e3a03000	 mov         r3, #0
  01188	e58d300c	 str         r3, [sp, #0xC]
  0118c	ea000023	 b           |$LN7@DownloadNB|
  01190		 |$LN3@DownloadNB|

; 1286 :     }
; 1287 : 
; 1288 : 
; 1289 :     //------------------------------------------------------------------------
; 1290 :     //  Determine the image entry point
; 1291 :     //------------------------------------------------------------------------
; 1292 : 
; 1293 :     *pdwImageStart  = pCurDownloadFile->dwRegionStart;

  01190	e59d3008	 ldr         r3, [sp, #8]
  01194	e5932000	 ldr         r2, [r3]
  01198	e59d3030	 ldr         r3, [sp, #0x30]
  0119c	e5832000	 str         r2, [r3]

; 1294 :     *pdwLaunchAddr  = pCurDownloadFile->dwRegionStart;

  011a0	e59d3008	 ldr         r3, [sp, #8]
  011a4	e5932000	 ldr         r2, [r3]
  011a8	e59d3038	 ldr         r3, [sp, #0x38]
  011ac	e5832000	 str         r2, [r3]

; 1295 :     *pdwImageLength = pCurDownloadFile->dwRegionLength;

  011b0	e59d3008	 ldr         r3, [sp, #8]
  011b4	e2833004	 add         r3, r3, #4
  011b8	e5932000	 ldr         r2, [r3]
  011bc	e59d3034	 ldr         r3, [sp, #0x34]
  011c0	e5832000	 str         r2, [r3]

; 1296 : 
; 1297 : 
; 1298 :     if (fIsFlash)

  011c4	e59d3004	 ldr         r3, [sp, #4]
  011c8	e3530000	 cmp         r3, #0
  011cc	0a000009	 beq         |$LN2@DownloadNB|

; 1299 :     {
; 1300 :         // finish the flash erase
; 1301 :         if (!OEMFinishEraseFlash())

  011d0	eb000000	 bl          OEMFinishEraseFlash
  011d4	e58d0024	 str         r0, [sp, #0x24]
  011d8	e59d3024	 ldr         r3, [sp, #0x24]
  011dc	e3530000	 cmp         r3, #0
  011e0	1a000004	 bne         |$LN1@DownloadNB|

; 1302 :         {
; 1303 :             HALT (BLERR_FLASH_ERASE);

  011e4	e3e0000a	 mvn         r0, #0xA
  011e8	eb000000	 bl          HALT

; 1304 :             return (FALSE);

  011ec	e3a03000	 mov         r3, #0
  011f0	e58d300c	 str         r3, [sp, #0xC]
  011f4	ea000009	 b           |$LN7@DownloadNB|
  011f8		 |$LN1@DownloadNB|
  011f8		 |$LN2@DownloadNB|

; 1305 :         }
; 1306 :     }
; 1307 : 
; 1308 :     KITLOutputDebugString("ImageStart = 0x%x, ImageLength = 0x%x, LaunchAddr = 0x%x\r\n",
; 1309 :         *pdwImageStart, *pdwImageLength, *pdwLaunchAddr);

  011f8	e59d3038	 ldr         r3, [sp, #0x38]
  011fc	e5933000	 ldr         r3, [r3]
  01200	e59d2034	 ldr         r2, [sp, #0x34]
  01204	e5922000	 ldr         r2, [r2]
  01208	e59d1030	 ldr         r1, [sp, #0x30]
  0120c	e5911000	 ldr         r1, [r1]
  01210	e59f0018	 ldr         r0, [pc, #0x18]
  01214	eb000000	 bl          KITLOutputDebugString

; 1310 : 
; 1311 :     return TRUE;

  01218	e3a03001	 mov         r3, #1
  0121c	e58d300c	 str         r3, [sp, #0xC]
  01220		 |$LN7@DownloadNB|

; 1312 : }

  01220	e59d000c	 ldr         r0, [sp, #0xC]
  01224	e28dd028	 add         sp, sp, #0x28
  01228	e89d6000	 ldmia       sp, {sp, lr}
  0122c	e12fff1e	 bx          lr
  01230		 |$LN12@DownloadNB|
  01230		 |$LN13@DownloadNB|
  01230	00000000	 DCD         |??_C@_0DL@DCHMDHHD@ImageStart?5?$DN?50x?$CFx?0?5ImageLength?5?$DN@|
  01234		 |$LN14@DownloadNB|
  01234	00000000	 DCD         |??_C@_0CO@PFLGIDFG@ERROR?3?5failed?5when?5reading?5raw?5b@|
  01238		 |$LN15@DownloadNB|
  01238	00000000	 DCD         |g_hdr|
  0123c		 |$LN16@DownloadNB|
  0123c	00000000	 DCD         |??_C@_0BP@EOFEMPOO@Invalid?5flash?5address?1length?$AN?6?$AA@|
  01240		 |$LN17@DownloadNB|
  01240	00000000	 DCD         |??_C@_0CC@DNECAMLM@?$CBOEMVERIFYMEMORY?3?5Invalid?5image?$AN@|
  01244		 |$LN18@DownloadNB|
  01244	00000000	 DCD         |g_pOEMVerifyMemory|
  01248		 |$LN19@DownloadNB|
  01248	00000000	 DCD         |g_DownloadManifest|
  0124c		 |$LN20@DownloadNB|
  0124c	00000000	 DCD         |g_downloadFilesRemaining|
  01250		 |$LN21@DownloadNB|
  01250	00000000	 DCD         |g_fOEMNotified|
  01254		 |$LN22@DownloadNB|
  01254	00000000	 DCD         |g_pOEMMultiBINNotify|
  01258		 |$LN23@DownloadNB|
  01258	00000000	 DCD         |g_bBINDownload|
  0125c		 |$M40917|

			 ENDP  ; |DownloadNB0|

	EXPORT	|??_C@_0DH@GJCJAHAP@?$FL?$CFd?$FN?3?5Address?$DN0x?$CFx?5?5Length?$DN0x?$CFx?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_03ILDADBHF@RAM?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_05HPMNGINJ@FLASH?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_0FC@PGPOMBFM@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BH@FIOKDOBJ@?$AN?6Completed?5file?$CIs?$CJ?3?$AN?6?$AA@| [ DATA ] ; `string'
	IMPORT	|OEMWriteFlash|

  00048			 AREA	 |.pdata|, PDATA
|$T40941| DCD	|$LN12@WriteImage|
	DCD	0x40005202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DH@GJCJAHAP@?$FL?$CFd?$FN?3?5Address?$DN0x?$CFx?5?5Length?$DN0x?$CFx?5@| DCB "["
	DCB	"%d]: Address=0x%x  Length=0x%x  Name=""%s"" Target=%s", 0xd
	DCB	0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_03ILDADBHF@RAM?$AA@| DCB "RAM", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_05HPMNGINJ@FLASH?$AA@| DCB "FLASH", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0FC@PGPOMBFM@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@| DCB "-"
	DCB	"--------------------------------------------------------"
	DCB	"----------------------", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BH@FIOKDOBJ@?$AN?6Completed?5file?$CIs?$CJ?3?$AN?6?$AA@| DCB 0xd, 0xa
	DCB	"Completed file(s):", 0xd, 0xa, 0x0	; `string'
; Function compile flags: /Odtp

  0125c			 AREA	 |.text|, CODE, ARM

  0125c		 |WriteImageToFlash| PROC

; 1316 : {

  0125c		 |$LN12@WriteImage|
  0125c	e52de004	 str         lr, [sp, #-4]!
  01260	e24dd02c	 sub         sp, sp, #0x2C
  01264		 |$M40938|

; 1317 :     BOOL  bFlash;
; 1318 :     DWORD i;
; 1319 :     
; 1320 :     KITLOutputDebugString("\r\nCompleted file(s):\r\n");

  01264	e59f0134	 ldr         r0, [pc, #0x134]
  01268	eb000000	 bl          KITLOutputDebugString

; 1321 :     KITLOutputDebugString("-------------------------------------------------------------------------------\r\n");

  0126c	e59f0128	 ldr         r0, [pc, #0x128]
  01270	eb000000	 bl          KITLOutputDebugString

; 1322 : 
; 1323 :     for (i = 0; i < g_DownloadManifest.dwNumRegions; i++)

  01274	e3a03000	 mov         r3, #0
  01278	e58d3008	 str         r3, [sp, #8]
  0127c	ea000002	 b           |$LN5@WriteImage|
  01280		 |$LN4@WriteImage|
  01280	e59d3008	 ldr         r3, [sp, #8]
  01284	e2833001	 add         r3, r3, #1
  01288	e58d3008	 str         r3, [sp, #8]
  0128c		 |$LN5@WriteImage|
  0128c	e59d2008	 ldr         r2, [sp, #8]
  01290	e59f3100	 ldr         r3, [pc, #0x100]
  01294	e5933000	 ldr         r3, [r3]
  01298	e1520003	 cmp         r2, r3
  0129c	2a000034	 bcs         |$LN3@WriteImage|

; 1324 :     {
; 1325 :         RegionInfo *pRegion = &g_DownloadManifest.Region[i];

  012a0	e59d1008	 ldr         r1, [sp, #8]
  012a4	e3a03f43	 mov         r3, #0x43, 30
  012a8	e0020391	 mul         r2, r1, r3
  012ac	e59f30e4	 ldr         r3, [pc, #0xE4]
  012b0	e2833004	 add         r3, r3, #4
  012b4	e0833002	 add         r3, r3, r2
  012b8	e58d3010	 str         r3, [sp, #0x10]

; 1326 : 
; 1327 :         bFlash = OEMIsFlashAddr( pRegion->dwRegionStart );

  012bc	e59d3010	 ldr         r3, [sp, #0x10]
  012c0	e5930000	 ldr         r0, [r3]
  012c4	eb000000	 bl          OEMIsFlashAddr
  012c8	e58d0020	 str         r0, [sp, #0x20]
  012cc	e59d3020	 ldr         r3, [sp, #0x20]
  012d0	e58d300c	 str         r3, [sp, #0xC]

; 1328 :         
; 1329 :         KITLOutputDebugString("[%d]: Address=0x%x  Length=0x%x  Name=\"%s\" Target=%s\r\n",
; 1330 :             i, 
; 1331 :             pRegion->dwRegionStart, 
; 1332 :             pRegion->dwRegionLength, 
; 1333 :             pRegion->szFileName,
; 1334 :             (bFlash ? "FLASH" : "RAM"));

  012d4	e59d300c	 ldr         r3, [sp, #0xC]
  012d8	e3530000	 cmp         r3, #0
  012dc	0a000002	 beq         |$LN8@WriteImage|
  012e0	e59f30ac	 ldr         r3, [pc, #0xAC]
  012e4	e58d3024	 str         r3, [sp, #0x24]
  012e8	ea000001	 b           |$LN9@WriteImage|
  012ec		 |$LN8@WriteImage|
  012ec	e59f309c	 ldr         r3, [pc, #0x9C]
  012f0	e58d3024	 str         r3, [sp, #0x24]
  012f4		 |$LN9@WriteImage|
  012f4	e59d3024	 ldr         r3, [sp, #0x24]
  012f8	e58d3004	 str         r3, [sp, #4]
  012fc	e59d3010	 ldr         r3, [sp, #0x10]
  01300	e2833008	 add         r3, r3, #8
  01304	e58d3000	 str         r3, [sp]
  01308	e59d3010	 ldr         r3, [sp, #0x10]
  0130c	e2833004	 add         r3, r3, #4
  01310	e5933000	 ldr         r3, [r3]
  01314	e59d2010	 ldr         r2, [sp, #0x10]
  01318	e5922000	 ldr         r2, [r2]
  0131c	e59d1008	 ldr         r1, [sp, #8]
  01320	e59f0064	 ldr         r0, [pc, #0x64]
  01324	eb000000	 bl          KITLOutputDebugString

; 1335 : 
; 1336 :         if (bFlash) 

  01328	e59d300c	 ldr         r3, [sp, #0xC]
  0132c	e3530000	 cmp         r3, #0
  01330	0a00000e	 beq         |$LN2@WriteImage|

; 1337 :         {
; 1338 :             if (!OEMWriteFlash (pRegion->dwRegionStart, pRegion->dwRegionLength))

  01334	e59d3010	 ldr         r3, [sp, #0x10]
  01338	e2833004	 add         r3, r3, #4
  0133c	e5931000	 ldr         r1, [r3]
  01340	e59d3010	 ldr         r3, [sp, #0x10]
  01344	e5930000	 ldr         r0, [r3]
  01348	eb000000	 bl          OEMWriteFlash
  0134c	e58d0028	 str         r0, [sp, #0x28]
  01350	e59d3028	 ldr         r3, [sp, #0x28]
  01354	e3530000	 cmp         r3, #0
  01358	1a000004	 bne         |$LN1@WriteImage|

; 1339 :             {
; 1340 :                 HALT (BLERR_FLASH_WRITE);

  0135c	e3e0000b	 mvn         r0, #0xB
  01360	eb000000	 bl          HALT

; 1341 :                 return FALSE;

  01364	e3a03000	 mov         r3, #0
  01368	e58d301c	 str         r3, [sp, #0x1C]
  0136c	ea000002	 b           |$LN6@WriteImage|
  01370		 |$LN1@WriteImage|
  01370		 |$LN2@WriteImage|

; 1342 :             }
; 1343 :         }
; 1344 :     }

  01370	eaffffc2	 b           |$LN4@WriteImage|
  01374		 |$LN3@WriteImage|

; 1345 : 
; 1346 :     return TRUE;    

  01374	e3a03001	 mov         r3, #1
  01378	e58d301c	 str         r3, [sp, #0x1C]
  0137c		 |$LN6@WriteImage|

; 1347 : }

  0137c	e59d001c	 ldr         r0, [sp, #0x1C]
  01380	e28dd02c	 add         sp, sp, #0x2C
  01384	e49de004	 ldr         lr, [sp], #4
  01388	e12fff1e	 bx          lr
  0138c		 |$LN13@WriteImage|
  0138c		 |$LN14@WriteImage|
  0138c	00000000	 DCD         |??_C@_0DH@GJCJAHAP@?$FL?$CFd?$FN?3?5Address?$DN0x?$CFx?5?5Length?$DN0x?$CFx?5@|
  01390		 |$LN15@WriteImage|
  01390	00000000	 DCD         |??_C@_03ILDADBHF@RAM?$AA@|
  01394		 |$LN16@WriteImage|
  01394	00000000	 DCD         |??_C@_05HPMNGINJ@FLASH?$AA@|
  01398		 |$LN17@WriteImage|
  01398	00000000	 DCD         |g_DownloadManifest|
  0139c		 |$LN18@WriteImage|
  0139c	00000000	 DCD         |??_C@_0FC@PGPOMBFM@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@|
  013a0		 |$LN19@WriteImage|
  013a0	00000000	 DCD         |??_C@_0BH@FIOKDOBJ@?$AN?6Completed?5file?$CIs?$CJ?3?$AN?6?$AA@|
  013a4		 |$M40939|

			 ENDP  ; |WriteImageToFlash|

	EXPORT	|??_C@_0BP@GDIKDNGH@Checksum?5?$DN?50x?$CFx?5?$CI0x?$CFx?5bytes?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DF@LEIPBNDI@Computing?5checksum?3?5image?5start?5@| [ DATA ] ; `string'

  00050			 AREA	 |.pdata|, PDATA
|$T40953| DCD	|$LN10@ComputeChe|
	DCD	0x40004202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BP@GDIKDNGH@Checksum?5?$DN?50x?$CFx?5?$CI0x?$CFx?5bytes?$CJ?$AN?6?$AA@| DCB "C"
	DCB	"hecksum = 0x%x (0x%x bytes)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DF@LEIPBNDI@Computing?5checksum?3?5image?5start?5@| DCB "Computin"
	DCB	"g checksum: image start = 0x%x, len = 0x%x", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  013a4			 AREA	 |.text|, CODE, ARM

  013a4		 |ComputeChecksum| PROC

; 1391 : {

  013a4		 |$LN10@ComputeChe|
  013a4	e52de004	 str         lr, [sp, #-4]!
  013a8	e24dd018	 sub         sp, sp, #0x18
  013ac		 |$M40950|

; 1392 : #ifdef DEBUG
; 1393 :     RegionInfo *pRegion;
; 1394 :     DWORD       dwRegionLength;
; 1395 :     DWORD       dwChecksum;
; 1396 :     BYTE       *pbCache;
; 1397 :     DWORD       i;
; 1398 :     
; 1399 :     for (i = 0; i < g_DownloadManifest.dwNumRegions; i++)

  013ac	e3a03000	 mov         r3, #0
  013b0	e58d3000	 str         r3, [sp]
  013b4	ea000002	 b           |$LN5@ComputeChe|
  013b8		 |$LN4@ComputeChe|
  013b8	e59d3000	 ldr         r3, [sp]
  013bc	e2833001	 add         r3, r3, #1
  013c0	e58d3000	 str         r3, [sp]
  013c4		 |$LN5@ComputeChe|
  013c4	e59d2000	 ldr         r2, [sp]
  013c8	e59f30d8	 ldr         r3, [pc, #0xD8]
  013cc	e5933000	 ldr         r3, [r3]
  013d0	e1520003	 cmp         r2, r3
  013d4	2a00002e	 bcs         |$LN3@ComputeChe|

; 1400 :     {
; 1401 :         pRegion         = &g_DownloadManifest.Region[i];

  013d8	e59d1000	 ldr         r1, [sp]
  013dc	e3a03f43	 mov         r3, #0x43, 30
  013e0	e0020391	 mul         r2, r1, r3
  013e4	e59f30bc	 ldr         r3, [pc, #0xBC]
  013e8	e2833004	 add         r3, r3, #4
  013ec	e0833002	 add         r3, r3, r2
  013f0	e58d300c	 str         r3, [sp, #0xC]

; 1402 :         pbCache         = (LPBYTE) OEMMapMemAddr( pRegion->dwRegionStart, pRegion->dwRegionStart );

  013f4	e59d300c	 ldr         r3, [sp, #0xC]
  013f8	e5931000	 ldr         r1, [r3]
  013fc	e59d300c	 ldr         r3, [sp, #0xC]
  01400	e5930000	 ldr         r0, [r3]
  01404	eb000000	 bl          OEMMapMemAddr
  01408	e58d0014	 str         r0, [sp, #0x14]
  0140c	e59d3014	 ldr         r3, [sp, #0x14]
  01410	e58d3008	 str         r3, [sp, #8]

; 1403 :         dwRegionLength  = pRegion->dwRegionLength;

  01414	e59d300c	 ldr         r3, [sp, #0xC]
  01418	e2833004	 add         r3, r3, #4
  0141c	e5933000	 ldr         r3, [r3]
  01420	e58d3004	 str         r3, [sp, #4]

; 1404 :         dwChecksum      = 0;

  01424	e3a03000	 mov         r3, #0
  01428	e58d3010	 str         r3, [sp, #0x10]

; 1405 : 
; 1406 :         KITLOutputDebugString("Computing checksum: image start = 0x%x, len = 0x%x\r\n", 
; 1407 :             pbCache, dwRegionLength);

  0142c	e59d2004	 ldr         r2, [sp, #4]
  01430	e59d1008	 ldr         r1, [sp, #8]
  01434	e59f0068	 ldr         r0, [pc, #0x68]
  01438	eb000000	 bl          KITLOutputDebugString
  0143c		 |$LN2@ComputeChe|

; 1408 : 
; 1409 :         while(dwRegionLength--) {

  0143c	e59d3004	 ldr         r3, [sp, #4]
  01440	e3530000	 cmp         r3, #0
  01444	e59d3004	 ldr         r3, [sp, #4]
  01448	e2433001	 sub         r3, r3, #1
  0144c	e58d3004	 str         r3, [sp, #4]
  01450	0a000008	 beq         |$LN1@ComputeChe|

; 1410 :             dwChecksum += *pbCache++;

  01454	e59d3008	 ldr         r3, [sp, #8]
  01458	e5d32000	 ldrb        r2, [r3]
  0145c	e59d3010	 ldr         r3, [sp, #0x10]
  01460	e0833002	 add         r3, r3, r2
  01464	e58d3010	 str         r3, [sp, #0x10]
  01468	e59d3008	 ldr         r3, [sp, #8]
  0146c	e2833001	 add         r3, r3, #1
  01470	e58d3008	 str         r3, [sp, #8]

; 1411 :         }

  01474	eafffff0	 b           |$LN2@ComputeChe|
  01478		 |$LN1@ComputeChe|

; 1412 : 
; 1413 :         KITLOutputDebugString("Checksum = 0x%x (0x%x bytes)\r\n", dwChecksum, pRegion->dwRegionLength);

  01478	e59d300c	 ldr         r3, [sp, #0xC]
  0147c	e2833004	 add         r3, r3, #4
  01480	e5932000	 ldr         r2, [r3]
  01484	e59d1010	 ldr         r1, [sp, #0x10]
  01488	e59f0010	 ldr         r0, [pc, #0x10]
  0148c	eb000000	 bl          KITLOutputDebugString

; 1414 :     }

  01490	eaffffc8	 b           |$LN4@ComputeChe|
  01494		 |$LN3@ComputeChe|

; 1415 : #endif
; 1416 : }

  01494	e28dd018	 add         sp, sp, #0x18
  01498	e49de004	 ldr         lr, [sp], #4
  0149c	e12fff1e	 bx          lr
  014a0		 |$LN11@ComputeChe|
  014a0		 |$LN12@ComputeChe|
  014a0	00000000	 DCD         |??_C@_0BP@GDIKDNGH@Checksum?5?$DN?50x?$CFx?5?$CI0x?$CFx?5bytes?$CJ?$AN?6?$AA@|
  014a4		 |$LN13@ComputeChe|
  014a4	00000000	 DCD         |??_C@_0DF@LEIPBNDI@Computing?5checksum?3?5image?5start?5@|
  014a8		 |$LN14@ComputeChe|
  014a8	00000000	 DCD         |g_DownloadManifest|
  014ac		 |$M40951|

			 ENDP  ; |ComputeChecksum|

	EXPORT	|??_C@_06OLEINIPO@nk?4exe?$AA@| [ DATA ] ; `string'
	IMPORT	|strcmp|

  00058			 AREA	 |.pdata|, PDATA
|$T40963| DCD	|$LN12@IsKernelRe|
	DCD	0x40006404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_06OLEINIPO@nk?4exe?$AA@| DCB "nk.exe", 0x0	; `string'
; Function compile flags: /Odtp

  014ac			 AREA	 |.text|, CODE, ARM

  014ac		 |IsKernelRegion| PROC

; 1431 : {

  014ac		 |$LN12@IsKernelRe|
  014ac	e1a0c00d	 mov         r12, sp
  014b0	e92d0003	 stmdb       sp!, {r0, r1}
  014b4	e92d5000	 stmdb       sp!, {r12, lr}
  014b8	e24dd02c	 sub         sp, sp, #0x2C
  014bc		 |$M40960|

; 1432 : 	DWORD dwCacheAddress = 0;

  014bc	e3a03000	 mov         r3, #0
  014c0	e58d3004	 str         r3, [sp, #4]

; 1433 : 	ROMHDR *pROMHeader;
; 1434 : 	DWORD dwNumModules = 0;

  014c4	e3a03000	 mov         r3, #0
  014c8	e58d3008	 str         r3, [sp, #8]

; 1435 : 	TOCentry *plTOC;
; 1436 : 
; 1437 :     if (dwRegionStart == 0 || dwRegionLength == 0)

  014cc	e59d3034	 ldr         r3, [sp, #0x34]
  014d0	e3530000	 cmp         r3, #0
  014d4	0a000002	 beq         |$LN6@IsKernelRe|
  014d8	e59d3038	 ldr         r3, [sp, #0x38]
  014dc	e3530000	 cmp         r3, #0
  014e0	1a000002	 bne         |$LN7@IsKernelRe|
  014e4		 |$LN6@IsKernelRe|

; 1438 :         return(FALSE);

  014e4	e3a03000	 mov         r3, #0
  014e8	e58d3014	 str         r3, [sp, #0x14]
  014ec	ea00004b	 b           |$LN8@IsKernelRe|
  014f0		 |$LN7@IsKernelRe|

; 1439 : 
; 1440 :     if (*(LPDWORD) OEMMapMemAddr (dwRegionStart, dwRegionStart + ROM_SIGNATURE_OFFSET) != ROM_SIGNATURE)

  014f0	e59d3034	 ldr         r3, [sp, #0x34]
  014f4	e2831040	 add         r1, r3, #0x40
  014f8	e59d0034	 ldr         r0, [sp, #0x34]
  014fc	eb000000	 bl          OEMMapMemAddr
  01500	e58d0018	 str         r0, [sp, #0x18]
  01504	e59d3018	 ldr         r3, [sp, #0x18]
  01508	e5932000	 ldr         r2, [r3]
  0150c	e59f3124	 ldr         r3, [pc, #0x124]
  01510	e1520003	 cmp         r2, r3
  01514	0a000002	 beq         |$LN5@IsKernelRe|

; 1441 :         return (FALSE);

  01518	e3a03000	 mov         r3, #0
  0151c	e58d3014	 str         r3, [sp, #0x14]
  01520	ea00003e	 b           |$LN8@IsKernelRe|
  01524		 |$LN5@IsKernelRe|

; 1442 : 
; 1443 :     // A pointer to the ROMHDR structure lives just past the ROM_SIGNATURE (which is a longword value).  Note that
; 1444 :     // this pointer is remapped since it might be a flash address (image destined for flash), but is actually cached
; 1445 :     // in RAM.
; 1446 :     //
; 1447 :     dwCacheAddress = *(LPDWORD) OEMMapMemAddr (dwRegionStart, dwRegionStart + ROM_SIGNATURE_OFFSET + sizeof(ULONG));

  01524	e59d3034	 ldr         r3, [sp, #0x34]
  01528	e2831044	 add         r1, r3, #0x44
  0152c	e59d0034	 ldr         r0, [sp, #0x34]
  01530	eb000000	 bl          OEMMapMemAddr
  01534	e58d001c	 str         r0, [sp, #0x1C]
  01538	e59d301c	 ldr         r3, [sp, #0x1C]
  0153c	e5933000	 ldr         r3, [r3]
  01540	e58d3004	 str         r3, [sp, #4]

; 1448 :     pROMHeader     = (ROMHDR *) OEMMapMemAddr (dwRegionStart, dwCacheAddress + g_dwROMOffset);

  01544	e59d2004	 ldr         r2, [sp, #4]
  01548	e59f30e4	 ldr         r3, [pc, #0xE4]
  0154c	e5933000	 ldr         r3, [r3]
  01550	e0821003	 add         r1, r2, r3
  01554	e59d0034	 ldr         r0, [sp, #0x34]
  01558	eb000000	 bl          OEMMapMemAddr
  0155c	e58d0020	 str         r0, [sp, #0x20]
  01560	e59d3020	 ldr         r3, [sp, #0x20]
  01564	e58d3000	 str         r3, [sp]

; 1449 : 
; 1450 :     // Make sure sure are some modules in the table of contents.
; 1451 :     //
; 1452 :     if ((dwNumModules = pROMHeader->nummods) == 0)

  01568	e59d3000	 ldr         r3, [sp]
  0156c	e2833010	 add         r3, r3, #0x10
  01570	e5933000	 ldr         r3, [r3]
  01574	e58d3008	 str         r3, [sp, #8]
  01578	e59d3008	 ldr         r3, [sp, #8]
  0157c	e3530000	 cmp         r3, #0
  01580	1a000002	 bne         |$LN4@IsKernelRe|

; 1453 :         return (FALSE);

  01584	e3a03000	 mov         r3, #0
  01588	e58d3014	 str         r3, [sp, #0x14]
  0158c	ea000023	 b           |$LN8@IsKernelRe|
  01590		 |$LN4@IsKernelRe|

; 1454 : 
; 1455 : 	// Locate the table of contents and search for the kernel executable and the TOC immediately follows the ROMHDR.
; 1456 : 	//
; 1457 :     plTOC = (TOCentry *)(pROMHeader + 1);

  01590	e59d3000	 ldr         r3, [sp]
  01594	e2833054	 add         r3, r3, #0x54
  01598	e58d300c	 str         r3, [sp, #0xC]
  0159c		 |$LN3@IsKernelRe|

; 1458 : 
; 1459 : 	while(dwNumModules--) {

  0159c	e59d3008	 ldr         r3, [sp, #8]
  015a0	e3530000	 cmp         r3, #0
  015a4	e59d3008	 ldr         r3, [sp, #8]
  015a8	e2433001	 sub         r3, r3, #1
  015ac	e58d3008	 str         r3, [sp, #8]
  015b0	0a000018	 beq         |$LN2@IsKernelRe|

; 1460 : 		LPBYTE pFileName = OEMMapMemAddr(dwRegionStart, (DWORD)plTOC->lpszFileName + g_dwROMOffset);

  015b4	e59d300c	 ldr         r3, [sp, #0xC]
  015b8	e2833010	 add         r3, r3, #0x10
  015bc	e5932000	 ldr         r2, [r3]
  015c0	e59f306c	 ldr         r3, [pc, #0x6C]
  015c4	e5933000	 ldr         r3, [r3]
  015c8	e0821003	 add         r1, r2, r3
  015cc	e59d0034	 ldr         r0, [sp, #0x34]
  015d0	eb000000	 bl          OEMMapMemAddr
  015d4	e58d0024	 str         r0, [sp, #0x24]
  015d8	e59d3024	 ldr         r3, [sp, #0x24]
  015dc	e58d3010	 str         r3, [sp, #0x10]

; 1461 : 		if (!strcmp(pFileName, "nk.exe")) {

  015e0	e59f1048	 ldr         r1, [pc, #0x48]
  015e4	e59d0010	 ldr         r0, [sp, #0x10]
  015e8	eb000000	 bl          strcmp
  015ec	e58d0028	 str         r0, [sp, #0x28]
  015f0	e59d3028	 ldr         r3, [sp, #0x28]
  015f4	e3530000	 cmp         r3, #0
  015f8	1a000002	 bne         |$LN1@IsKernelRe|

; 1462 : 			return TRUE;

  015fc	e3a03001	 mov         r3, #1
  01600	e58d3014	 str         r3, [sp, #0x14]
  01604	ea000005	 b           |$LN8@IsKernelRe|
  01608		 |$LN1@IsKernelRe|

; 1463 : 		}
; 1464 : 		++plTOC;

  01608	e59d300c	 ldr         r3, [sp, #0xC]
  0160c	e2833020	 add         r3, r3, #0x20
  01610	e58d300c	 str         r3, [sp, #0xC]

; 1465 : 	}

  01614	eaffffe0	 b           |$LN3@IsKernelRe|
  01618		 |$LN2@IsKernelRe|

; 1466 : 	return FALSE;

  01618	e3a03000	 mov         r3, #0
  0161c	e58d3014	 str         r3, [sp, #0x14]
  01620		 |$LN8@IsKernelRe|

; 1467 : }

  01620	e59d0014	 ldr         r0, [sp, #0x14]
  01624	e28dd02c	 add         sp, sp, #0x2C
  01628	e89d6000	 ldmia       sp, {sp, lr}
  0162c	e12fff1e	 bx          lr
  01630		 |$LN13@IsKernelRe|
  01630		 |$LN14@IsKernelRe|
  01630	00000000	 DCD         |??_C@_06OLEINIPO@nk?4exe?$AA@|
  01634		 |$LN15@IsKernelRe|
  01634	00000000	 DCD         |g_dwROMOffset|
  01638		 |$LN16@IsKernelRe|
  01638	43454345	 DCD         0x43454345
  0163c		 |$M40961|

			 ENDP  ; |IsKernelRegion|

	EXPORT	|Nib2HexChar|

  00060			 AREA	 |.pdata|, PDATA
|$T40973| DCD	|$LN9@Nib2HexCha|
	DCD	0x40001f04
; Function compile flags: /Odtp

  0163c			 AREA	 |.text|, CODE, ARM

  0163c		 |Nib2HexChar| PROC

; 1472 : {

  0163c		 |$LN9@Nib2HexCha|
  0163c	e1a0c00d	 mov         r12, sp
  01640	e92d0001	 stmdb       sp!, {r0}
  01644	e92d5000	 stmdb       sp!, {r12, lr}
  01648	e24dd004	 sub         sp, sp, #4
  0164c		 |$M40970|

; 1473 :     if (Nibble < 0x0a) {

  0164c	e5dd300c	 ldrb        r3, [sp, #0xC]
  01650	e353000a	 cmp         r3, #0xA
  01654	aa000006	 bge         |$LN4@Nib2HexCha|

; 1474 : 		return Nibble+'0';

  01658	e5dd300c	 ldrb        r3, [sp, #0xC]
  0165c	e2833030	 add         r3, r3, #0x30
  01660	e1a03c03	 mov         r3, r3, lsl #24
  01664	e1a03c43	 mov         r3, r3, asr #24
  01668	e5cd3000	 strb        r3, [sp]
  0166c	ea00000d	 b           |$LN5@Nib2HexCha|
  01670	ea00000c	 b           |$LN3@Nib2HexCha|
  01674		 |$LN4@Nib2HexCha|

; 1475 :     } else if (Nibble < 0x10) {

  01674	e5dd300c	 ldrb        r3, [sp, #0xC]
  01678	e3530010	 cmp         r3, #0x10
  0167c	aa000007	 bge         |$LN2@Nib2HexCha|

; 1476 : 		return Nibble-0x0a+'A';

  01680	e5dd300c	 ldrb        r3, [sp, #0xC]
  01684	e243300a	 sub         r3, r3, #0xA
  01688	e2833041	 add         r3, r3, #0x41
  0168c	e1a03c03	 mov         r3, r3, lsl #24
  01690	e1a03c43	 mov         r3, r3, asr #24
  01694	e5cd3000	 strb        r3, [sp]
  01698	ea000002	 b           |$LN5@Nib2HexCha|

; 1477 :     } else {

  0169c	ea000001	 b           |$LN1@Nib2HexCha|
  016a0		 |$LN2@Nib2HexCha|

; 1478 : 		return '?';

  016a0	e3a0303f	 mov         r3, #0x3F
  016a4	e5cd3000	 strb        r3, [sp]
  016a8		 |$LN1@Nib2HexCha|
  016a8		 |$LN3@Nib2HexCha|
  016a8		 |$LN5@Nib2HexCha|

; 1479 :     }
; 1480 : }

  016a8	e1dd00d0	 ldrsb       r0, [sp]
  016ac	e28dd004	 add         sp, sp, #4
  016b0	e89d6000	 ldmia       sp, {sp, lr}
  016b4	e12fff1e	 bx          lr
  016b8		 |$M40971|

			 ENDP  ; |Nib2HexChar|

	END
