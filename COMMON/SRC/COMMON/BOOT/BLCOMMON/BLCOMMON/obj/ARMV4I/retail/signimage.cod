; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\BOOT\BLCOMMON\signimage.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|CatSigExtName| [ DATA ]
	EXPORT	|rgbOID_Attr| [ DATA ]
	EXPORT	|rgbManufacturerTag| [ DATA ]
	EXPORT	|rgbModelTag| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|g_hashCtx|, 0xc8

	 COMMON	|g_hHash|, 0x4

|rgbOID_Attr| DCB 0x2b
	DCB	0x6
	DCB	0x1
	DCB	0x4
	DCB	0x1
	DCB	0x82
	DCB	0x37
	DCB	0xc
	DCB	0x2
	DCB	0x1
	%	2
|rgbManufacturerTag| DCB 0x0
	DCB	0x4d
	DCB	0x0
	DCB	0x61
	DCB	0x0
	DCB	0x6e
	DCB	0x0
	DCB	0x75
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x61
	DCB	0x0
	DCB	0x63
	DCB	0x0
	DCB	0x74
	DCB	0x0
	DCB	0x75
	DCB	0x0
	DCB	0x72
	DCB	0x0
	DCB	0x65
	DCB	0x0
	DCB	0x72
|rgbModelTag| DCB 0x0
	DCB	0x4d
	DCB	0x0
	DCB	0x6f
	DCB	0x0
	DCB	0x64
	DCB	0x0
	DCB	0x65
	DCB	0x0
	DCB	0x6c

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|CatSigExtName| DCB "cat_sig", 0x0
	EXPORT	|UpdateHash|
	IMPORT	|MinCryptUpdateHashMemory|
; File c:\wince600\platform\common\src\common\boot\blcommon\signimage.c

  00000			 AREA	 |.pdata|, PDATA
|$T45323| DCD	|$LN6@UpdateHash|
	DCD	0x40001402
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UpdateHash| PROC

; 42   : {

  00000		 |$LN6@UpdateHash|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M45320|
  00008	e1a0e001	 mov         lr, r1
  0000c	e1a04000	 mov         r4, r0

; 43   :     CRYPT_DER_BLOB ScratchBlob;
; 44   : 
; 45   :     ScratchBlob.cbData = dwSize;
; 46   :     ScratchBlob.pbData = (BYTE *)dwAddr;
; 47   : 
; 48   :     if (MinCryptUpdateHashMemory(CALG_SHA1, g_hHash, 1, &ScratchBlob))

  00010	e59f2034	 ldr         r2, [pc, #0x34]
  00014	e3a00902	 mov         r0, #2, 18
  00018	e28d3000	 add         r3, sp, #0
  0001c	e5921000	 ldr         r1, [r2]
  00020	e3a02001	 mov         r2, #1
  00024	e3800004	 orr         r0, r0, #4
  00028	e58de000	 str         lr, [sp]
  0002c	e58d4004	 str         r4, [sp, #4]
  00030	eb000000	 bl          MinCryptUpdateHashMemory
  00034	e3500000	 cmp         r0, #0

; 49   :     {
; 50   :         return(FALSE);

  00038	13a00000	 movne       r0, #0

; 51   :     }
; 52   : 
; 53   :     return(TRUE);

  0003c	03a00001	 moveq       r0, #1

; 54   : }

  00040	e28dd008	 add         sp, sp, #8
  00044	e8bd4010	 ldmia       sp!, {r4, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN7@UpdateHash|
  0004c		 |$LN8@UpdateHash|
  0004c	00000000	 DCD         |g_hHash|
  00050		 |$M45321|

			 ENDP  ; |UpdateHash|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|CheckSignature|
	EXPORT	|??_C@_0ED@EKFNLABC@ERROR?3?5MinCryptVerifyHashInCatal@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CA@CJAKEIDB@INFO?3?5Signature?5check?5passed?$CB?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DI@JLFAGPEN@ERROR?3?5MinCryptVerifyExtension?5f@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DP@JAPCEMMG@ERROR?3?5MinCryptVerifyExtension?5f@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DF@HLPIFOJI@INFO?3?5Found?5signature?5?$CIAddress?$DN0@| [ DATA ] ; `string'
	EXPORT	|??_C@_0EN@CGKICGAI@ERROR?3?5Signature?5length?5is?5zero?4@| [ DATA ] ; `string'
	EXPORT	|??_C@_0GJ@DEHFEOBE@ERROR?3?5No?5signature?5record?5in?5ex@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CM@IEOABDFO@ERROR?3?5No?5extensions?5list?5?$CINULL?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DF@PDEEFBOO@?$CB?5ERROR?3?5Did?5not?5find?5pTOC?5signa@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DF@PDKEKFNJ@?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB@| [ DATA ] ; `string'
	IMPORT	|MinCryptVerifyExtension|
	IMPORT	|MinCryptVerifyHashInCatalogBlob|
	IMPORT	|MinCryptGetHashParam|
	IMPORT	|SigProcessImage|
	IMPORT	|MinCryptCreateHashMemoryMTH|
	IMPORT	|KITLOutputDebugString|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|memcpy|
	IMPORT	|memset|
	IMPORT	|memcmp|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T45376| DCD	|$LN26@CheckSigna|
	DCD	0xc000bc02

  00000			 AREA	 |.xdata|, DATA
|$T45372| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0ED@EKFNLABC@ERROR?3?5MinCryptVerifyHashInCatal@| DCB "ERROR: MinC"
	DCB	"ryptVerifyHashInCatalogs returned 0x%x (rglErr=0x%x).", 0xd
	DCB	0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@CJAKEIDB@INFO?3?5Signature?5check?5passed?$CB?$AN?6?$AA@| DCB "I"
	DCB	"NFO: Signature check passed!", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DI@JLFAGPEN@ERROR?3?5MinCryptVerifyExtension?5f@| DCB "ERROR: Min"
	DCB	"CryptVerifyExtension failed to verify Model", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DP@JAPCEMMG@ERROR?3?5MinCryptVerifyExtension?5f@| DCB "ERROR: Min"
	DCB	"CryptVerifyExtension failed to verify manufacturer", 0xd
	DCB	0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DF@HLPIFOJI@INFO?3?5Found?5signature?5?$CIAddress?$DN0@| DCB "INF"
	DCB	"O: Found signature (Address=0x%x  Length=0x%x).", 0xd, 0xa
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EN@CGKICGAI@ERROR?3?5Signature?5length?5is?5zero?4@| DCB "ERROR: "
	DCB	"Signature length is zero.  Was this image stamped with a"
	DCB	" signature?", 0xd, 0xa, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0GJ@DEHFEOBE@ERROR?3?5No?5signature?5record?5in?5ex@| DCB "ERROR: "
	DCB	"No signature record in extensions list (an extension blo"
	DCB	"ck hasn't been reserved in this image)?", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CM@IEOABDFO@ERROR?3?5No?5extensions?5list?5?$CINULL?5@| DCB "ERRO"
	DCB	"R: No extensions list (NULL pointer).", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DF@PDEEFBOO@?$CB?5ERROR?3?5Did?5not?5find?5pTOC?5signa@| DCB "! E"
	DCB	"RROR: Did not find pTOC signature.  ABORTING. !", 0xd, 0xa
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DF@PDKEKFNJ@?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB@| DCB "!"
	DCB	"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", 0xd, 0xa
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T45372|

  00008		 |CheckSignature| PROC

; 60   : {

  00008		 |$LN26@CheckSigna|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dd07c	 sub         sp, sp, #0x7C
  00010		 |$M45373|
  00010	e1a08003	 mov         r8, r3
  00014	e58d2034	 str         r2, [sp, #0x34]
  00018	e1a06001	 mov         r6, r1
  0001c	e1a05000	 mov         r5, r0
  00020	e59fe2cc	 ldr         lr, [pc, #0x2CC]
  00024	e59ee000	 ldr         lr, [lr]
  00028	e58de078	 str         lr, [sp, #0x78]

; 61   : #define REBASE_ADDR(x)   (x + (dwStoreBase - dwRunBase))
; 62   :     DWORD dwpTOC = 0;
; 63   :     ROMHDR *pROMHdr = NULL;
; 64   :     EXTENSION *pExt = NULL;
; 65   :     BYTE *pSig = NULL;
; 66   :     DWORD dwSigLen = 0;
; 67   :     DWORD cbHash = 0;
; 68   :     DWORD cbAttr = 0;
; 69   :     LONG rglErr = 0;
; 70   :     LONG lStatus = 0;
; 71   :     BYTE rgbHash[MINCRYPT_MAX_HASH_LEN];
; 72   :     CRYPT_HASH_BLOB rgHashBlob;
; 73   :     MAP_CAT_INFO rgMapCatInfo;
; 74   :     CRYPT_DATA_BLOB rgExtensionTagName;
; 75   :     CRYPT_DATA_BLOB rgExtensionValue;
; 76   :     CRYPT_DATA_BLOB rgAttrEncodedOIDBlob;
; 77   : 
; 78   : 
; 79   :     // Check for TOC signature.
; 80   :     //
; 81   :     if (*(LPDWORD)(dwStoreBase + ROM_SIGNATURE_OFFSET) != ROM_SIGNATURE)

  0002c	e5954040	 ldr         r4, [r5, #0x40]
  00030	e59fe2b8	 ldr         lr, [pc, #0x2B8]
  00034	e3a03000	 mov         r3, #0
  00038	e3a02000	 mov         r2, #0
  0003c	e59d90a4	 ldr         r9, [sp, #0xA4]
  00040	e154000e	 cmp         r4, lr
  00044	e58d302c	 str         r3, [sp, #0x2C]
  00048	e58d2030	 str         r2, [sp, #0x30]
  0004c	0a000005	 beq         |$LN14@CheckSigna|

; 82   :     {
; 83   :         KITLOutputDebugString ("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");

  00050	e59f0290	 ldr         r0, [pc, #0x290]
  00054	eb000000	 bl          KITLOutputDebugString

; 84   :         KITLOutputDebugString ("! ERROR: Did not find pTOC signature.  ABORTING. !\r\n");

  00058	e59f028c	 ldr         r0, [pc, #0x28C]
  0005c	eb000000	 bl          KITLOutputDebugString

; 85   :         KITLOutputDebugString ("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");

  00060	e59f0280	 ldr         r0, [pc, #0x280]

; 86   : 
; 87   :         return(FALSE);

  00064	ea000014	 b           |$LN21@CheckSigna|
  00068		 |$LN14@CheckSigna|

; 88   :     }
; 89   : 
; 90   :     // Get pointer to TOC.
; 91   :     //
; 92   :     dwpTOC = *(LPDWORD)(dwStoreBase + ROM_SIGNATURE_OFFSET + sizeof(ULONG));

  00068	e5957044	 ldr         r7, [r5, #0x44]

; 93   : 
; 94   :     // Locate the catalog file signature record via the ROMHDR extension pointer.
; 95   :     //
; 96   :     pROMHdr = (ROMHDR *)REBASE_ADDR(dwpTOC);

  0006c	e0473006	 sub         r3, r7, r6
  00070	e0833005	 add         r3, r3, r5

; 97   : 
; 98   :     if (!pROMHdr->pExtensions)

  00074	e5933048	 ldr         r3, [r3, #0x48]
  00078	e3530000	 cmp         r3, #0
  0007c	1a00000a	 bne         |$LN13@CheckSigna|

; 99   :     {
; 100  :         KITLOutputDebugString("ERROR: No extensions list (NULL pointer).\r\n");

  00080	e59f025c	 ldr         r0, [pc, #0x25C]

; 101  :         return(FALSE);

  00084	ea00000c	 b           |$LN21@CheckSigna|
  00088		 |$LL12@CheckSigna|

; 102  :     }
; 103  : 
; 104  :     pExt = (EXTENSION *)REBASE_ADDR((DWORD)pROMHdr->pExtensions);
; 105  : 
; 106  :     while(pExt && memcmp(pExt->name, CatSigExtName, strlen(CatSigExtName)))

  00088	e59f1250	 ldr         r1, [pc, #0x250]
  0008c	e3a02007	 mov         r2, #7
  00090	e1a00004	 mov         r0, r4
  00094	eb000000	 bl          memcmp
  00098	e3500000	 cmp         r0, #0
  0009c	0a00000e	 beq         |$LN11@CheckSigna|

; 107  :     {
; 108  :         if (!pExt->pNextExt)

  000a0	e5943028	 ldr         r3, [r4, #0x28]
  000a4	e3530000	 cmp         r3, #0
  000a8	0a00000a	 beq         |$LN18@CheckSigna|
  000ac		 |$LN13@CheckSigna|

; 111  :             break;
; 112  :         }
; 113  : 
; 114  :         pExt = (EXTENSION *)REBASE_ADDR((DWORD)pExt->pNextExt);

  000ac	e0433006	 sub         r3, r3, r6
  000b0	e0934005	 adds        r4, r3, r5
  000b4	1afffff3	 bne         |$LL12@CheckSigna|
  000b8		 |$LN20@CheckSigna|

; 118  :     {
; 119  :         KITLOutputDebugString("ERROR: No signature record in extensions list (an extension block hasn't been reserved in this image)?\r\n");

  000b8	e59f021c	 ldr         r0, [pc, #0x21C]
  000bc		 |$LN21@CheckSigna|
  000bc	eb000000	 bl          KITLOutputDebugString
  000c0		 |$LN23@CheckSigna|

; 120  :         return(FALSE);

  000c0	e59d0078	 ldr         r0, [sp, #0x78]
  000c4	eb000000	 bl          __security_check_cookie
  000c8	e3a00000	 mov         r0, #0

; 178  :         return(FALSE);

  000cc		 |$LN15@CheckSigna|

; 219  : }

  000cc	e28dd07c	 add         sp, sp, #0x7C
  000d0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000d4	e12fff1e	 bx          lr
  000d8		 |$LN18@CheckSigna|

; 109  :         {
; 110  :             pExt = NULL;

  000d8	e3a04000	 mov         r4, #0
  000dc		 |$LN11@CheckSigna|

; 115  :     }
; 116  : 
; 117  :     if (!pExt)

  000dc	e3540000	 cmp         r4, #0
  000e0	0afffff4	 beq         |$LN20@CheckSigna|

; 121  :     }
; 122  : 
; 123  :     // Get location and length of the signature.
; 124  :     //
; 125  :     dwSigLen = pExt->length;
; 126  :     pSig     = (BYTE *)REBASE_ADDR((DWORD)pExt->pdata);

  000e4	e594301c	 ldr         r3, [r4, #0x1C]
  000e8	e5942020	 ldr         r2, [r4, #0x20]
  000ec	e0433006	 sub         r3, r3, r6
  000f0	e1b0b002	 movs        r11, r2

; 127  :     if (!dwSigLen)
; 128  :     {
; 129  :         KITLOutputDebugString("ERROR: Signature length is zero.  Was this image stamped with a signature?\r\n");

  000f4	059f01dc	 ldreq       r0, [pc, #0x1DC]
  000f8	e083a005	 add         r10, r3, r5
  000fc	0affffee	 beq         |$LN21@CheckSigna|

; 130  :         return(FALSE);
; 131  :     }
; 132  :     
; 133  :     KITLOutputDebugString("INFO: Found signature (Address=0x%x  Length=0x%x).\r\n", (DWORD)pSig, dwSigLen);

  00100	e59f01cc	 ldr         r0, [pc, #0x1CC]
  00104	e1a0200b	 mov         r2, r11
  00108	e1a0100a	 mov         r1, r10
  0010c	eb000000	 bl          KITLOutputDebugString

; 134  : 
; 135  :     // Hash memory initialization.
; 136  :     //
; 137  :     // MinCryptCreateHashMemoryMTH() is the thread-safe version of 
; 138  :     // MinCryptCreateHashMemory().  We're running in a boot loader without 
; 139  :     // threading, but it's recommended to use this API to be future-proof.
; 140  :     //
; 141  :     // The other MinCrypt APIs were thread-safe to begin with, so there are no 
; 142  :     // xxxMTH() equivalents.
; 143  :     //
; 144  :     // The hash context is filled in by MinCrypt and used for its own purposes; 
; 145  :     // just make sure it doesn't get modified/invalidated until we're finished 
; 146  :     // using g_hHash.
; 147  :     //
; 148  :     MinCryptCreateHashMemoryMTH(CALG_SHA1, g_hashCtx, &g_hHash);

  00110	e59f41b8	 ldr         r4, [pc, #0x1B8]
  00114	e59f11b0	 ldr         r1, [pc, #0x1B0]
  00118	e3a03902	 mov         r3, #2, 18
  0011c	e1a02004	 mov         r2, r4
  00120	e3830004	 orr         r0, r3, #4
  00124	eb000000	 bl          MinCryptCreateHashMemoryMTH

; 149  : 
; 150  :     // Traverse the image and compute the hash.
; 151  :     //
; 152  :     if (!SigProcessImage((ROMHDR *)dwpTOC, (dwStoreBase - dwRunBase), UpdateHash))

  00128	e59f2198	 ldr         r2, [pc, #0x198]
  0012c	e0451006	 sub         r1, r5, r6
  00130	e1a00007	 mov         r0, r7
  00134	eb000000	 bl          SigProcessImage
  00138	e3500000	 cmp         r0, #0

; 153  :     {
; 154  :         return(FALSE);

  0013c	0affffdf	 beq         |$LN23@CheckSigna|

; 155  :     }
; 156  : 
; 157  :     // Finish computing the hash.
; 158  :     //
; 159  :     MinCryptGetHashParam(CALG_SHA1, g_hHash, rgbHash, &cbHash);

  00140	e5941000	 ldr         r1, [r4]
  00144	e3a04902	 mov         r4, #2, 18
  00148	e3840004	 orr         r0, r4, #4
  0014c	e28d302c	 add         r3, sp, #0x2C
  00150	e28d2064	 add         r2, sp, #0x64
  00154	eb000000	 bl          MinCryptGetHashParam

; 160  :     
; 161  :     rgHashBlob.cbData = cbHash;

  00158	e59d302c	 ldr         r3, [sp, #0x2C]

; 162  :     rgHashBlob.pbData = rgbHash;

  0015c	e28de064	 add         lr, sp, #0x64

; 163  : 
; 164  :     memset(&rgMapCatInfo, 0, sizeof(MAP_CAT_INFO));

  00160	e3a02024	 mov         r2, #0x24
  00164	e3a01000	 mov         r1, #0
  00168	e28d0038	 add         r0, sp, #0x38
  0016c	e58d305c	 str         r3, [sp, #0x5C]
  00170	e58de060	 str         lr, [sp, #0x60]
  00174	eb000000	 bl          memset

; 165  :     
; 166  :     rgMapCatInfo.FileBlob.cbData = dwSigLen;
; 167  :     rgMapCatInfo.FileBlob.pbData = pSig;
; 168  : 
; 169  :     rgAttrEncodedOIDBlob.cbData = sizeof(rgbOID_Attr);
; 170  :     rgAttrEncodedOIDBlob.pbData = rgbOID_Attr;
; 171  : 
; 172  :     // Compute a CAT record for the hashed data and compare against the CAT record stamped in the image.
; 173  :     //
; 174  :     lStatus = MinCryptVerifyHashInCatalogBlob(CALG_SHA1, 1, &rgHashBlob, 1, &rgMapCatInfo, fTestSignature, &rglErr);

  00178	e59de034	 ldr         lr, [sp, #0x34]
  0017c	e28d3030	 add         r3, sp, #0x30
  00180	e28d2038	 add         r2, sp, #0x38
  00184	e58d3008	 str         r3, [sp, #8]
  00188	e58d2000	 str         r2, [sp]
  0018c	e3a03001	 mov         r3, #1
  00190	e28d205c	 add         r2, sp, #0x5C
  00194	e3a01001	 mov         r1, #1
  00198	e3840004	 orr         r0, r4, #4
  0019c	e59f4120	 ldr         r4, [pc, #0x120]
  001a0	e58de004	 str         lr, [sp, #4]
  001a4	e58db03c	 str         r11, [sp, #0x3C]
  001a8	e58da040	 str         r10, [sp, #0x40]
  001ac	e3a0500a	 mov         r5, #0xA
  001b0	eb000000	 bl          MinCryptVerifyHashInCatalogBlob
  001b4	e59d2030	 ldr         r2, [sp, #0x30]
  001b8	e1b01000	 movs        r1, r0

; 175  :     if (lStatus || rglErr)

  001bc	1a000039	 bne         |$LN5@CheckSigna|
  001c0	e3520000	 cmp         r2, #0
  001c4	1a000037	 bne         |$LN5@CheckSigna|

; 179  :     }
; 180  : 
; 181  :     // Optionally verify the Make attribute.    
; 182  :     if (pbDeviceMakeData && dwDeviceMakeSize)

  001c8	e3580000	 cmp         r8, #0
  001cc	0a000016	 beq         |$LN3@CheckSigna|
  001d0	e59de0a0	 ldr         lr, [sp, #0xA0]
  001d4	e35e0000	 cmp         lr, #0
  001d8	0a000013	 beq         |$LN3@CheckSigna|

; 183  :     {
; 184  :         // Now check the Make string
; 185  :         rgExtensionTagName.cbData = sizeof(rgbManufacturerTag);

  001dc	e3a02018	 mov         r2, #0x18

; 186  :         rgExtensionTagName.pbData = rgbManufacturerTag;
; 187  :        
; 188  :         rgExtensionValue.cbData = dwDeviceMakeSize;
; 189  :         rgExtensionValue.pbData = pbDeviceMakeData;
; 190  :         
; 191  :         lStatus = MinCryptVerifyExtension(rgMapCatInfo, rgAttrEncodedOIDBlob, rgExtensionTagName, rgExtensionValue);

  001e0	e58d201c	 str         r2, [sp, #0x1C]
  001e4	e284300c	 add         r3, r4, #0xC
  001e8	e3a02014	 mov         r2, #0x14
  001ec	e28d0000	 add         r0, sp, #0
  001f0	e28d1048	 add         r1, sp, #0x48
  001f4	e58d3020	 str         r3, [sp, #0x20]
  001f8	e58de024	 str         lr, [sp, #0x24]
  001fc	e58d8028	 str         r8, [sp, #0x28]
  00200	e58d5014	 str         r5, [sp, #0x14]
  00204	e58d4018	 str         r4, [sp, #0x18]
  00208	eb000000	 bl          memcpy
  0020c	e59d0038	 ldr         r0, [sp, #0x38]
  00210	e59d103c	 ldr         r1, [sp, #0x3C]
  00214	e59d2040	 ldr         r2, [sp, #0x40]
  00218	e59d3044	 ldr         r3, [sp, #0x44]
  0021c	eb000000	 bl          MinCryptVerifyExtension
  00220	e3500000	 cmp         r0, #0

; 192  :         if (lStatus)
; 193  :         {
; 194  :             KITLOutputDebugString("ERROR: MinCryptVerifyExtension failed to verify manufacturer\r\n");

  00224	159f0094	 ldrne       r0, [pc, #0x94]
  00228	1affffa3	 bne         |$LN21@CheckSigna|
  0022c		 |$LN3@CheckSigna|

; 195  :             return (FALSE);
; 196  :         }
; 197  :     }
; 198  :     
; 199  :     // Optionally verify the Model attribute.    
; 200  :     if (pbDeviceModelData && dwDeviceModelSize)

  0022c	e3590000	 cmp         r9, #0
  00230	0a000016	 beq         |$LN1@CheckSigna|
  00234	e59de0a8	 ldr         lr, [sp, #0xA8]
  00238	e35e0000	 cmp         lr, #0
  0023c	0a000013	 beq         |$LN1@CheckSigna|

; 201  :     {
; 202  :         rgExtensionTagName.cbData = sizeof(rgbModelTag);

  00240	e3a0200a	 mov         r2, #0xA

; 203  :         rgExtensionTagName.pbData = rgbModelTag;
; 204  :        
; 205  :         rgExtensionValue.cbData = dwDeviceModelSize;
; 206  :         rgExtensionValue.pbData = pbDeviceModelData;
; 207  :     
; 208  :         lStatus = MinCryptVerifyExtension(rgMapCatInfo, rgAttrEncodedOIDBlob, rgExtensionTagName, rgExtensionValue);

  00244	e58d201c	 str         r2, [sp, #0x1C]
  00248	e2843024	 add         r3, r4, #0x24
  0024c	e3a02014	 mov         r2, #0x14
  00250	e28d0000	 add         r0, sp, #0
  00254	e28d1048	 add         r1, sp, #0x48
  00258	e58d3020	 str         r3, [sp, #0x20]
  0025c	e58de024	 str         lr, [sp, #0x24]
  00260	e58d9028	 str         r9, [sp, #0x28]
  00264	e58d5014	 str         r5, [sp, #0x14]
  00268	e58d4018	 str         r4, [sp, #0x18]
  0026c	eb000000	 bl          memcpy
  00270	e59d0038	 ldr         r0, [sp, #0x38]
  00274	e59d103c	 ldr         r1, [sp, #0x3C]
  00278	e59d2040	 ldr         r2, [sp, #0x40]
  0027c	e59d3044	 ldr         r3, [sp, #0x44]
  00280	eb000000	 bl          MinCryptVerifyExtension
  00284	e3500000	 cmp         r0, #0

; 209  :         if (lStatus)
; 210  :         {
; 211  :             KITLOutputDebugString("ERROR: MinCryptVerifyExtension failed to verify Model\r\n");

  00288	159f002c	 ldrne       r0, [pc, #0x2C]
  0028c	1affff8a	 bne         |$LN21@CheckSigna|
  00290		 |$LN1@CheckSigna|

; 212  :             return (FALSE);
; 213  :         }
; 214  :     }
; 215  : 
; 216  :     KITLOutputDebugString("INFO: Signature check passed!\r\n");

  00290	e59f0020	 ldr         r0, [pc, #0x20]
  00294	eb000000	 bl          KITLOutputDebugString

; 217  :     
; 218  :     return(TRUE);

  00298	e59d0078	 ldr         r0, [sp, #0x78]
  0029c	eb000000	 bl          __security_check_cookie
  002a0	e3a00001	 mov         r0, #1
  002a4	eaffff88	 b           |$LN15@CheckSigna|
  002a8		 |$LN5@CheckSigna|

; 176  :     {
; 177  :         KITLOutputDebugString("ERROR: MinCryptVerifyHashInCatalogs returned 0x%x (rglErr=0x%x).\r\n", lStatus, rglErr);

  002a8	e59f0004	 ldr         r0, [pc, #4]
  002ac	eb000000	 bl          KITLOutputDebugString

; 178  :         return(FALSE);

  002b0	eaffff82	 b           |$LN23@CheckSigna|
  002b4		 |$LN27@CheckSigna|
  002b4		 |$LN28@CheckSigna|
  002b4	00000000	 DCD         |??_C@_0ED@EKFNLABC@ERROR?3?5MinCryptVerifyHashInCatal@|
  002b8		 |$LN29@CheckSigna|
  002b8	00000000	 DCD         |??_C@_0CA@CJAKEIDB@INFO?3?5Signature?5check?5passed?$CB?$AN?6?$AA@|
  002bc		 |$LN30@CheckSigna|
  002bc	00000000	 DCD         |??_C@_0DI@JLFAGPEN@ERROR?3?5MinCryptVerifyExtension?5f@|
  002c0		 |$LN31@CheckSigna|
  002c0	00000000	 DCD         |??_C@_0DP@JAPCEMMG@ERROR?3?5MinCryptVerifyExtension?5f@|
  002c4		 |$LN32@CheckSigna|
  002c4	00000000	 DCD         |rgbOID_Attr|
  002c8		 |$LN33@CheckSigna|
  002c8	00000000	 DCD         |UpdateHash|
  002cc		 |$LN34@CheckSigna|
  002cc	00000000	 DCD         |g_hashCtx|
  002d0		 |$LN35@CheckSigna|
  002d0	00000000	 DCD         |g_hHash|
  002d4		 |$LN36@CheckSigna|
  002d4	00000000	 DCD         |??_C@_0DF@HLPIFOJI@INFO?3?5Found?5signature?5?$CIAddress?$DN0@|
  002d8		 |$LN37@CheckSigna|
  002d8	00000000	 DCD         |??_C@_0EN@CGKICGAI@ERROR?3?5Signature?5length?5is?5zero?4@|
  002dc		 |$LN38@CheckSigna|
  002dc	00000000	 DCD         |??_C@_0GJ@DEHFEOBE@ERROR?3?5No?5signature?5record?5in?5ex@|
  002e0		 |$LN39@CheckSigna|
  002e0	00000000	 DCD         |CatSigExtName|
  002e4		 |$LN40@CheckSigna|
  002e4	00000000	 DCD         |??_C@_0CM@IEOABDFO@ERROR?3?5No?5extensions?5list?5?$CINULL?5@|
  002e8		 |$LN41@CheckSigna|
  002e8	00000000	 DCD         |??_C@_0DF@PDKEKFNJ@?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB?$CB@|
  002ec		 |$LN42@CheckSigna|
  002ec	00000000	 DCD         |??_C@_0DF@PDEEFBOO@?$CB?5ERROR?3?5Did?5not?5find?5pTOC?5signa@|
  002f0		 |$LN43@CheckSigna|
  002f0	43454345	 DCD         0x43454345
  002f4		 |$LN44@CheckSigna|
  002f4	00000000	 DCD         |__security_cookie|
  002f8		 |$M45374|

			 ENDP  ; |CheckSignature|

	END
