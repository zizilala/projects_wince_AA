; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\BOOT\BLCOMMON\format.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|szSprintf|, 0x4

	IMPORT	|OEMWriteDebugByte|
; File c:\wince600\platform\common\src\common\boot\blcommon\format.c

  00000			 AREA	 |.pdata|, PDATA
|$T39611| DCD	|$LN7@pOutputByt|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |pOutputByte| PROC

; 242  : {

  00000		 |$LN7@pOutputByt|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M39608|

; 243  :     if (szSprintf)

  00004	e59f2020	 ldr         r2, [pc, #0x20]
  00008	e5923000	 ldr         r3, [r2]
  0000c	e3530000	 cmp         r3, #0

; 244  :         *szSprintf++ = c;

  00010	14c30001	 strneb      r0, [r3], #1
  00014	15823000	 strne       r3, [r2]

; 247  : }

  00018	149de004	 ldrne       lr, [sp], #4
  0001c	112fff1e	 bxne        lr

; 245  :     else
; 246  :         OEMWriteDebugByte(c);

  00020	eb000000	 bl          OEMWriteDebugByte

; 247  : }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$LN8@pOutputByt|
  0002c		 |$LN9@pOutputByt|
  0002c	00000000	 DCD         |szSprintf|
  00030		 |$M39609|

			 ENDP  ; |pOutputByte|


  00000			 AREA	 |.pdata|, PDATA
|$T39623| DCD	|$LN11@pOutputNum|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |pOutputNumHex| PROC

; 265  : {

  00000		 |$LN11@pOutputNum|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39620|
  00004	e3510000	 cmp         r1, #0
  00008	e1a04000	 mov         r4, r0

; 266  :     if (depth) {
; 267  :         depth--;

  0000c	12411001	 subne       r1, r1, #1

; 268  :     }
; 269  :     
; 270  :     if ((n & ~0xf) || depth) {

  00010	e3d4c00f	 bics        r12, r4, #0xF
  00014	1a000001	 bne         |$LN3@pOutputNum|
  00018	e3510000	 cmp         r1, #0
  0001c	0a000002	 beq         |$LN4@pOutputNum|
  00020		 |$LN3@pOutputNum|

; 271  :         pOutputNumHex(n >> 4, depth);

  00020	e1a00224	 mov         r0, r4, lsr #4
  00024	eb000000	 bl          pOutputNumHex

; 272  :         n &= 0xf;

  00028	e204400f	 and         r4, r4, #0xF
  0002c		 |$LN4@pOutputNum|

; 273  :     }
; 274  :     
; 275  :     if (n < 10) {

  0002c	e354000a	 cmp         r4, #0xA

; 276  :         pOutputByte((unsigned char)(n + '0'));

  00030	32843030	 addcc       r3, r4, #0x30

; 277  :     } else { 
; 278  :     pOutputByte((unsigned char)(n - 10 + 'A'));

  00034	22843037	 addcs       r3, r4, #0x37
  00038	e20300ff	 and         r0, r3, #0xFF
  0003c	eb000000	 bl          pOutputByte

; 279  : }
; 280  : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M39621|

			 ENDP  ; |pOutputNumHex|


  00000			 AREA	 |.pdata|, PDATA
|$T39631| DCD	|$LN6@pOutputNum@2|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |pOutputNumDecimal| PROC

; 295  : {

  00000		 |$LN6@pOutputNum@2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M39628|
  00004	e1a05000	 mov         r5, r0

; 296  :     if (n >= 10) {

  00008	e355000a	 cmp         r5, #0xA
  0000c	3a000006	 bcc         |$LN1@pOutputNum@2|

; 297  :         pOutputNumDecimal(n / 10);

  00010	e59f3028	 ldr         r3, [pc, #0x28]
  00014	e0832395	 umull       r2, r3, r5, r3
  00018	e1a041a3	 mov         r4, r3, lsr #3
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          pOutputNumDecimal

; 298  :         n %= 10;

  00024	e0843104	 add         r3, r4, r4, lsl #2
  00028	e0455083	 sub         r5, r5, r3, lsl #1
  0002c		 |$LN1@pOutputNum@2|

; 299  :     }
; 300  :     pOutputByte((unsigned char)(n + '0'));

  0002c	e2853030	 add         r3, r5, #0x30
  00030	e20300ff	 and         r0, r3, #0xFF
  00034	eb000000	 bl          pOutputByte

; 301  : }

  00038	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN7@pOutputNum@2|
  00040		 |$LN8@pOutputNum@2|
  00040	cccccccd	 DCD         0xcccccccd
  00044		 |$M39629|

			 ENDP  ; |pOutputNumDecimal|


  00000			 AREA	 |.pdata|, PDATA
|$T39645| DCD	|$LN12@OutputStri|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OutputString| PROC

; 317  : {

  00000		 |$LN12@OutputStri|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39642|
  00004	e1a04000	 mov         r4, r0

; 318  :     while (*s) {        

  00008	ea000004	 b           |$LN9@OutputStri|
  0000c		 |$LL3@OutputStri|

; 319  :         if (*s == '\n') {

  0000c	e353000a	 cmp         r3, #0xA

; 320  :             OEMWriteDebugByte('\r');

  00010	03a0000d	 moveq       r0, #0xD
  00014	0b000000	 bleq        OEMWriteDebugByte

; 321  :         }
; 322  :         OEMWriteDebugByte(*s++);

  00018	e4d40001	 ldrb        r0, [r4], #1
  0001c	eb000000	 bl          OEMWriteDebugByte
  00020		 |$LN9@OutputStri|
  00020	e5d43000	 ldrb        r3, [r4]
  00024	e3530000	 cmp         r3, #0
  00028	1afffff7	 bne         |$LL3@OutputStri|

; 323  :     }
; 324  : }

  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M39643|

			 ENDP  ; |OutputString|

	EXPORT	|inet_addr|
	IMPORT	|atoi|

  00000			 AREA	 |.pdata|, PDATA
|$T39664| DCD	|$LN18@inet_addr|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |inet_addr| PROC

; 339  : DWORD inet_addr( char *pszDottedD ) {

  00000		 |$LN18@inet_addr|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M39661|
  00004	e1a04000	 mov         r4, r0

; 340  : 
; 341  :     DWORD dwIP = 0;

  00008	e3a05000	 mov         r5, #0

; 342  :     DWORD cBytes;
; 343  :     char *pszLastNum;
; 344  :     int atoi (const char *s);
; 345  :     
; 346  :     // Replace the dots with NULL terminators
; 347  :     pszLastNum = pszDottedD;

  0000c	e3a06000	 mov         r6, #0
  00010	e3a07000	 mov         r7, #0
  00014		 |$LL6@inet_addr|

; 348  :     for( cBytes = 0; cBytes < 4; cBytes++ ) {
; 349  :         while(*pszDottedD != '.' && *pszDottedD != '\0')

  00014	e1d430d0	 ldrsb       r3, [r4]
  00018	ea000003	 b           |$LN15@inet_addr|
  0001c		 |$LL3@inet_addr|
  0001c	e1d430d0	 ldrsb       r3, [r4]
  00020	e3530000	 cmp         r3, #0
  00024	0a000002	 beq         |$LN14@inet_addr|
  00028	e1f430d1	 ldrsb       r3, [r4, #1]!
  0002c		 |$LN15@inet_addr|
  0002c	e353002e	 cmp         r3, #0x2E
  00030	1afffff9	 bne         |$LL3@inet_addr|
  00034		 |$LN14@inet_addr|

; 350  :             pszDottedD++;
; 351  :         if (pszDottedD == '\0' && cBytes != 3)
; 352  :             return 0;
; 353  :         *pszDottedD = '\0';
; 354  :         dwIP |= (atoi(pszLastNum) & 0xFF) << (8*cBytes);

  00034	e4c47001	 strb        r7, [r4], #1
  00038	eb000000	 bl          atoi
  0003c	e20030ff	 and         r3, r0, #0xFF
  00040	e1855613	 orr         r5, r5, r3, lsl r6
  00044	e2866008	 add         r6, r6, #8
  00048	e3560020	 cmp         r6, #0x20

; 355  :         pszLastNum = ++pszDottedD;

  0004c	e1a00004	 mov         r0, r4
  00050	3affffef	 bcc         |$LL6@inet_addr|

; 356  :     }
; 357  : 
; 358  :     return dwIP;
; 359  : 
; 360  : } // inet_ntoa()

  00054	e1a00005	 mov         r0, r5
  00058	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M39662|

			 ENDP  ; |inet_addr|

	EXPORT	|KITLOutputDebugString|

  00000			 AREA	 |.pdata|, PDATA
|$T39695| DCD	|$LN43@KITLOutput|
	DCD	0x40005c03
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |KITLOutputDebugString| PROC

; 53   : {

  00000		 |$LN43@KITLOutput|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5070	 stmdb       sp!, {r4 - r6, r12, lr}
  0000c		 |$M39692|
  0000c	e1a05000	 mov         r5, r0

; 54   :     unsigned char    c;
; 55   :     va_list         vl;
; 56   :     
; 57   :     va_start(vl, sz);
; 58   :     
; 59   :     while (*sz) {

  00010	e28d4018	 add         r4, sp, #0x18
  00014	ea000050	 b           |$LN19@KITLOutput|
  00018		 |$LL22@KITLOutput|

; 60   :         c = *sz++;

  00018	e20360ff	 and         r6, r3, #0xFF

; 61   :         switch (c) {

  0001c	e356000a	 cmp         r6, #0xA
  00020	e2855001	 add         r5, r5, #1
  00024	0a000048	 beq         |$LN2@KITLOutput|
  00028	e356000d	 cmp         r6, #0xD
  0002c	0a000042	 beq         |$LN4@KITLOutput|
  00030	e3560025	 cmp         r6, #0x25
  00034	1a000046	 bne         |$LN1@KITLOutput|

; 62   :         case '%':
; 63   :             c = *sz++;

  00038	e4d53001	 ldrb        r3, [r5], #1
  0003c	e58d5014	 str         r5, [sp, #0x14]

; 64   :             switch (c) { 

  00040	e3530063	 cmp         r3, #0x63
  00044	ca000013	 bgt         |$LN25@KITLOutput|
  00048	0a00000f	 beq         |$LN6@KITLOutput|
  0004c	e3530025	 cmp         r3, #0x25
  00050	0a00000b	 beq         |$LN7@KITLOutput|
  00054	e3530042	 cmp         r3, #0x42
  00058	0a000007	 beq         |$LN14@KITLOutput|
  0005c	e3530048	 cmp         r3, #0x48
  00060	0a000003	 beq         |$LN13@KITLOutput|
  00064	e3530058	 cmp         r3, #0x58
  00068	1a000012	 bne         |$LN5@KITLOutput|

; 74   :             case 'X':
; 75   :                 pOutputNumHex(va_arg(vl, unsigned long), 8);

  0006c	e3a01008	 mov         r1, #8

; 76   :                 break;

  00070	ea000013	 b           |$LN40@KITLOutput|
  00074		 |$LN13@KITLOutput|

; 71   :             case 'H':
; 72   :                 pOutputNumHex(va_arg(vl, unsigned long), 4);

  00074	e3a01004	 mov         r1, #4

; 73   :                 break;

  00078	ea000011	 b           |$LN40@KITLOutput|
  0007c		 |$LN14@KITLOutput|

; 68   :             case 'B':
; 69   :                 pOutputNumHex(va_arg(vl, unsigned long), 2);

  0007c	e3a01002	 mov         r1, #2

; 70   :                 break;

  00080	ea00000f	 b           |$LN40@KITLOutput|
  00084		 |$LN7@KITLOutput|

; 95   :             case '%':
; 96   :                 pOutputByte('%');

  00084	e3a00025	 mov         r0, #0x25

; 97   :                 break;

  00088	ea000032	 b           |$LN35@KITLOutput|
  0008c		 |$LN6@KITLOutput|

; 98   :             case 'c':
; 99   :                 c = va_arg(vl, unsigned char);

  0008c	e2844004	 add         r4, r4, #4

; 100  :                 pOutputByte(c);

  00090	e5540004	 ldrb        r0, [r4, #-4]

; 101  :                 break;

  00094	ea00002f	 b           |$LN35@KITLOutput|
  00098		 |$LN25@KITLOutput|

; 64   :             switch (c) { 

  00098	e3530064	 cmp         r3, #0x64
  0009c	0a00001c	 beq         |$LN11@KITLOutput|
  000a0	e3530073	 cmp         r3, #0x73
  000a4	0a00000e	 beq         |$LN8@KITLOutput|
  000a8	e3530075	 cmp         r3, #0x75
  000ac	0a000008	 beq         |$LN9@KITLOutput|
  000b0	e3530078	 cmp         r3, #0x78
  000b4	0a000001	 beq         |$LN15@KITLOutput|
  000b8		 |$LN5@KITLOutput|

; 102  :                 
; 103  :             default:
; 104  :                 pOutputByte(' ');

  000b8	e3a00020	 mov         r0, #0x20

; 105  :                 break;

  000bc	ea000025	 b           |$LN35@KITLOutput|
  000c0		 |$LN15@KITLOutput|

; 65   :             case 'x':
; 66   :                 pOutputNumHex(va_arg(vl, unsigned long), 0);

  000c0	e3a01000	 mov         r1, #0
  000c4		 |$LN40@KITLOutput|
  000c4	e2844004	 add         r4, r4, #4
  000c8	e5140004	 ldr         r0, [r4, #-4]
  000cc	eb000000	 bl          pOutputNumHex

; 67   :                 break;

  000d0	ea000021	 b           |$LN19@KITLOutput|
  000d4		 |$LN9@KITLOutput|

; 87   :                 }
; 88   :                 break;
; 89   :             case 'u':
; 90   :                 pOutputNumDecimal(va_arg(vl, unsigned long));

  000d4	e2844004	 add         r4, r4, #4
  000d8	e5140004	 ldr         r0, [r4, #-4]
  000dc	eb000000	 bl          pOutputNumDecimal

; 106  :             }
; 107  :             break;

  000e0	ea00001d	 b           |$LN19@KITLOutput|
  000e4		 |$LN8@KITLOutput|

; 91   :                 break;
; 92   :             case 's':
; 93   :                 OutputString(va_arg(vl, char *));

  000e4	e2844004	 add         r4, r4, #4
  000e8	e5146004	 ldr         r6, [r4, #-4]
  000ec	ea000004	 b           |$LN37@KITLOutput|
  000f0		 |$LL28@KITLOutput|
  000f0	e353000a	 cmp         r3, #0xA
  000f4	03a0000d	 moveq       r0, #0xD
  000f8	0b000000	 bleq        OEMWriteDebugByte
  000fc	e4d60001	 ldrb        r0, [r6], #1
  00100	eb000000	 bl          OEMWriteDebugByte
  00104		 |$LN37@KITLOutput|
  00104	e5d63000	 ldrb        r3, [r6]
  00108	e3530000	 cmp         r3, #0
  0010c	1afffff7	 bne         |$LL28@KITLOutput|

; 94   :                 break;

  00110	ea000011	 b           |$LN19@KITLOutput|
  00114		 |$LN11@KITLOutput|

; 77   :             case 'd':
; 78   :                 {
; 79   :                     long    l;
; 80   :                 
; 81   :                     l = va_arg(vl, long);

  00114	e2844004	 add         r4, r4, #4
  00118	e5143004	 ldr         r3, [r4, #-4]
  0011c	e1b06003	 movs        r6, r3

; 82   :                     if (l < 0) { 

  00120	5a000002	 bpl         |$LN10@KITLOutput|

; 83   :                         pOutputByte('-');

  00124	e3a0002d	 mov         r0, #0x2D
  00128	eb000000	 bl          pOutputByte

; 84   :                         l = - l;

  0012c	e2666000	 rsb         r6, r6, #0
  00130		 |$LN10@KITLOutput|

; 85   :                     }
; 86   :                     pOutputNumDecimal((unsigned long)l);

  00130	e1a00006	 mov         r0, r6
  00134	eb000000	 bl          pOutputNumDecimal

; 106  :             }
; 107  :             break;

  00138	ea000007	 b           |$LN19@KITLOutput|
  0013c		 |$LN4@KITLOutput|

; 108  :         case '\r':
; 109  :             if (*sz == '\n')

  0013c	e1d530d0	 ldrsb       r3, [r5]

; 110  :                 sz ++;
; 111  :             c = '\n';

  00140	e3a0600a	 mov         r6, #0xA
  00144	e353000a	 cmp         r3, #0xA
  00148	02855001	 addeq       r5, r5, #1
  0014c		 |$LN2@KITLOutput|

; 112  :             // fall through
; 113  :         case '\n':
; 114  :             pOutputByte('\r');

  0014c	e3a0000d	 mov         r0, #0xD
  00150	eb000000	 bl          pOutputByte
  00154		 |$LN1@KITLOutput|

; 115  :             // fall through
; 116  :         default:
; 117  :             pOutputByte(c);

  00154	e1a00006	 mov         r0, r6
  00158		 |$LN35@KITLOutput|
  00158	eb000000	 bl          pOutputByte
  0015c		 |$LN19@KITLOutput|
  0015c	e1d530d0	 ldrsb       r3, [r5]
  00160	e3530000	 cmp         r3, #0
  00164	1affffab	 bne         |$LL22@KITLOutput|

; 118  :         }
; 119  :     }
; 120  :     
; 121  :     va_end(vl);
; 122  : }

  00168	e89d6070	 ldmia       sp, {r4 - r6, sp, lr}
  0016c	e12fff1e	 bx          lr
  00170		 |$M39693|

			 ENDP  ; |KITLOutputDebugString|

	EXPORT	|FormatString|

  00000			 AREA	 |.pdata|, PDATA
|$T39730| DCD	|$LN43@FormatStri|
	DCD	0x40006603
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FormatString| PROC

; 152  : {

  00000		 |$LN43@FormatStri|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d51f0	 stmdb       sp!, {r4 - r8, r12, lr}
  0000c		 |$M39727|
  0000c	e1a06001	 mov         r6, r1
  00010	e1a08000	 mov         r8, r0

; 153  :     unsigned char    c;
; 154  :     va_list         vl;
; 155  :     
; 156  :     va_start(vl, sz);
; 157  :     
; 158  :     szSprintf = pBuf;

  00014	e59f7178	 ldr         r7, [pc, #0x178]
  00018	e28d4024	 add         r4, sp, #0x24
  0001c	e5878000	 str         r8, [r7]

; 159  :     while (*sz) {

  00020	ea00004f	 b           |$LN19@FormatStri|
  00024		 |$LL22@FormatStri|

; 160  :         c = *sz++;

  00024	e2866001	 add         r6, r6, #1

; 161  :         switch (c) {

  00028	e355000a	 cmp         r5, #0xA
  0002c	0a000048	 beq         |$LN2@FormatStri|
  00030	e355000d	 cmp         r5, #0xD
  00034	0a000042	 beq         |$LN4@FormatStri|
  00038	e3550025	 cmp         r5, #0x25
  0003c	1a000046	 bne         |$LN1@FormatStri|

; 162  :         case '%':
; 163  :             c = *sz++;

  00040	e4d63001	 ldrb        r3, [r6], #1
  00044	e58d6020	 str         r6, [sp, #0x20]

; 164  :             switch (c) { 

  00048	e3530063	 cmp         r3, #0x63
  0004c	ca000013	 bgt         |$LN25@FormatStri|
  00050	0a00000f	 beq         |$LN6@FormatStri|
  00054	e3530025	 cmp         r3, #0x25
  00058	0a00000b	 beq         |$LN7@FormatStri|
  0005c	e3530042	 cmp         r3, #0x42
  00060	0a000007	 beq         |$LN14@FormatStri|
  00064	e3530048	 cmp         r3, #0x48
  00068	0a000003	 beq         |$LN13@FormatStri|
  0006c	e3530058	 cmp         r3, #0x58
  00070	1a000012	 bne         |$LN5@FormatStri|

; 174  :             case 'X':
; 175  :                 pOutputNumHex(va_arg(vl, unsigned long), 8);

  00074	e3a01008	 mov         r1, #8

; 176  :                 break;

  00078	ea000013	 b           |$LN40@FormatStri|
  0007c		 |$LN13@FormatStri|

; 171  :             case 'H':
; 172  :                 pOutputNumHex(va_arg(vl, unsigned long), 4);

  0007c	e3a01004	 mov         r1, #4

; 173  :                 break;

  00080	ea000011	 b           |$LN40@FormatStri|
  00084		 |$LN14@FormatStri|

; 168  :             case 'B':
; 169  :                 pOutputNumHex(va_arg(vl, unsigned long), 2);

  00084	e3a01002	 mov         r1, #2

; 170  :                 break;

  00088	ea00000f	 b           |$LN40@FormatStri|
  0008c		 |$LN7@FormatStri|

; 195  :             case '%':
; 196  :                 pOutputByte('%');

  0008c	e3a00025	 mov         r0, #0x25

; 197  :                 break;

  00090	ea000032	 b           |$LN35@FormatStri|
  00094		 |$LN6@FormatStri|

; 198  :             case 'c':
; 199  :                 c = va_arg(vl, unsigned char);

  00094	e2844004	 add         r4, r4, #4

; 200  :                 pOutputByte(c);

  00098	e5540004	 ldrb        r0, [r4, #-4]

; 201  :                 break;

  0009c	ea00002f	 b           |$LN35@FormatStri|
  000a0		 |$LN25@FormatStri|

; 164  :             switch (c) { 

  000a0	e3530064	 cmp         r3, #0x64
  000a4	0a00001c	 beq         |$LN11@FormatStri|
  000a8	e3530073	 cmp         r3, #0x73
  000ac	0a00000e	 beq         |$LN8@FormatStri|
  000b0	e3530075	 cmp         r3, #0x75
  000b4	0a000008	 beq         |$LN9@FormatStri|
  000b8	e3530078	 cmp         r3, #0x78
  000bc	0a000001	 beq         |$LN15@FormatStri|
  000c0		 |$LN5@FormatStri|

; 202  :                 
; 203  :             default:
; 204  :                 pOutputByte(' ');

  000c0	e3a00020	 mov         r0, #0x20

; 205  :                 break;

  000c4	ea000025	 b           |$LN35@FormatStri|
  000c8		 |$LN15@FormatStri|

; 165  :             case 'x':
; 166  :                 pOutputNumHex(va_arg(vl, unsigned long), 0);

  000c8	e3a01000	 mov         r1, #0
  000cc		 |$LN40@FormatStri|
  000cc	e2844004	 add         r4, r4, #4
  000d0	e5140004	 ldr         r0, [r4, #-4]
  000d4	eb000000	 bl          pOutputNumHex

; 167  :                 break;

  000d8	ea000021	 b           |$LN19@FormatStri|
  000dc		 |$LN9@FormatStri|

; 187  :                 }
; 188  :                 break;
; 189  :             case 'u':
; 190  :                 pOutputNumDecimal(va_arg(vl, unsigned long));

  000dc	e2844004	 add         r4, r4, #4
  000e0	e5140004	 ldr         r0, [r4, #-4]
  000e4	eb000000	 bl          pOutputNumDecimal

; 206  :             }
; 207  :             break;

  000e8	ea00001d	 b           |$LN19@FormatStri|
  000ec		 |$LN8@FormatStri|

; 191  :                 break;
; 192  :             case 's':
; 193  :                 OutputString(va_arg(vl, char *));

  000ec	e2844004	 add         r4, r4, #4
  000f0	e5145004	 ldr         r5, [r4, #-4]
  000f4	ea000004	 b           |$LN37@FormatStri|
  000f8		 |$LL28@FormatStri|
  000f8	e353000a	 cmp         r3, #0xA
  000fc	03a0000d	 moveq       r0, #0xD
  00100	0b000000	 bleq        OEMWriteDebugByte
  00104	e4d50001	 ldrb        r0, [r5], #1
  00108	eb000000	 bl          OEMWriteDebugByte
  0010c		 |$LN37@FormatStri|
  0010c	e5d53000	 ldrb        r3, [r5]
  00110	e3530000	 cmp         r3, #0
  00114	1afffff7	 bne         |$LL28@FormatStri|

; 194  :                 break;

  00118	ea000011	 b           |$LN19@FormatStri|
  0011c		 |$LN11@FormatStri|

; 177  :             case 'd':
; 178  :                 {
; 179  :                     long    l;
; 180  :                 
; 181  :                     l = va_arg(vl, long);

  0011c	e2844004	 add         r4, r4, #4
  00120	e5143004	 ldr         r3, [r4, #-4]
  00124	e1b05003	 movs        r5, r3

; 182  :                     if (l < 0) { 

  00128	5a000002	 bpl         |$LN10@FormatStri|

; 183  :                         pOutputByte('-');

  0012c	e3a0002d	 mov         r0, #0x2D
  00130	eb000000	 bl          pOutputByte

; 184  :                         l = - l;

  00134	e2655000	 rsb         r5, r5, #0
  00138		 |$LN10@FormatStri|

; 185  :                     }
; 186  :                     pOutputNumDecimal((unsigned long)l);

  00138	e1a00005	 mov         r0, r5
  0013c	eb000000	 bl          pOutputNumDecimal

; 206  :             }
; 207  :             break;

  00140	ea000007	 b           |$LN19@FormatStri|
  00144		 |$LN4@FormatStri|

; 208  :         case '\r':
; 209  :             if (*sz == '\n')

  00144	e5d63000	 ldrb        r3, [r6]

; 210  :                 sz ++;
; 211  :             c = '\n';

  00148	e3a0500a	 mov         r5, #0xA
  0014c	e353000a	 cmp         r3, #0xA
  00150	02866001	 addeq       r6, r6, #1
  00154		 |$LN2@FormatStri|

; 212  :             // fall through
; 213  :         case '\n':
; 214  :             pOutputByte('\r');

  00154	e3a0000d	 mov         r0, #0xD
  00158	eb000000	 bl          pOutputByte
  0015c		 |$LN1@FormatStri|

; 215  :             // fall through
; 216  :         default:
; 217  :             pOutputByte(c);

  0015c	e1a00005	 mov         r0, r5
  00160		 |$LN35@FormatStri|
  00160	eb000000	 bl          pOutputByte
  00164		 |$LN19@FormatStri|
  00164	e5d65000	 ldrb        r5, [r6]
  00168	e3550000	 cmp         r5, #0
  0016c	1affffac	 bne         |$LL22@FormatStri|

; 218  :         }
; 219  :     }
; 220  :     pOutputByte(0);

  00170	e3a00000	 mov         r0, #0
  00174	eb000000	 bl          pOutputByte

; 221  :     c = szSprintf - pBuf;

  00178	e5973000	 ldr         r3, [r7]

; 222  :     szSprintf = 0;

  0017c	e3a02000	 mov         r2, #0
  00180	e5872000	 str         r2, [r7]
  00184	e0433008	 sub         r3, r3, r8
  00188	e20300ff	 and         r0, r3, #0xFF

; 223  :     va_end(vl);
; 224  :     return (c);
; 225  : }

  0018c	e89d61f0	 ldmia       sp, {r4 - r8, sp, lr}
  00190	e12fff1e	 bx          lr
  00194		 |$LN44@FormatStri|
  00194		 |$LN45@FormatStri|
  00194	00000000	 DCD         |szSprintf|
  00198		 |$M39728|

			 ENDP  ; |FormatString|

	EXPORT	|inet_ntoa|
	EXPORT	|??_C@_0M@CDHNGIPM@?$CFu?4?$CFu?4?$CFu?4?$CFu?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.bss|, NOINIT
|?szDottedD@?1??inet_ntoa@@9@9| % 0x10			; `inet_ntoa'::`2'::szDottedD
|?szDottedD@?1??inet_ntoa@@9@9| % 0x10			; `inet_ntoa'::`2'::szDottedD

  00000			 AREA	 |.pdata|, PDATA
|$T39742| DCD	|$LN5@inet_ntoa|
	DCD	0x40001402

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0M@CDHNGIPM@?$CFu?4?$CFu?4?$CFu?4?$CFu?$AA@| DCB "%u.%u.%u.%u", 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |inet_ntoa| PROC

; 327  : char *inet_ntoa( DWORD dwIP ) {

  00000		 |$LN5@inet_ntoa|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M39739|
  00008	e1a05000	 mov         r5, r0

; 328  : 
; 329  :     static char szDottedD[16];
; 330  : 
; 331  :     FormatString( szDottedD, "%u.%u.%u.%u",
; 332  :         (BYTE)dwIP, (BYTE)(dwIP >> 8), (BYTE)(dwIP >> 16), (BYTE)(dwIP >> 24) );

  0000c	e1a03825	 mov         r3, r5, lsr #16
  00010	e59f1034	 ldr         r1, [pc, #0x34]
  00014	e59f002c	 ldr         r0, [pc, #0x2C]
  00018	e1a02425	 mov         r2, r5, lsr #8
  0001c	e20340ff	 and         r4, r3, #0xFF
  00020	e20230ff	 and         r3, r2, #0xFF
  00024	e1a0ec25	 mov         lr, r5, lsr #24
  00028	e20520ff	 and         r2, r5, #0xFF
  0002c	e58de004	 str         lr, [sp, #4]
  00030	e58d4000	 str         r4, [sp]
  00034	eb000000	 bl          FormatString

; 333  : 
; 334  :     return szDottedD;
; 335  : 
; 336  : } // inet_ntoa()

  00038	e59f0008	 ldr         r0, [pc, #8]
  0003c	e28dd008	 add         sp, sp, #8
  00040	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN6@inet_ntoa|
  00048		 |$LN7@inet_ntoa|
  00048	00000000	 DCD         |?szDottedD@?1??inet_ntoa@@9@9|
  0004c		 |$LN8@inet_ntoa|
  0004c	00000000	 DCD         |??_C@_0M@CDHNGIPM@?$CFu?4?$CFu?4?$CFu?4?$CFu?$AA@|
  00050		 |$M39740|

			 ENDP  ; |inet_ntoa|

	END
