; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\BOOT\BLCOMMON\blcommon.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|pTOC| [ DATA ]
	EXPORT	|NKSignon| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|g_pOEMCheckSignature|, 0x4

	 COMMON	|g_pOEMMultiBINNotify|, 0x4

	 COMMON	|g_pOEMReportError|, 0x4

	 COMMON	|g_dwROMOffset|, 0x4

	 COMMON	|g_pOEMVerifyMemory|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|g_fOEMNotified| % 0x4

  00000			 AREA	 |.data|, DATA
|g_bBINDownload| DCB 0x1
|g_downloadFilesRemaining| DCB 0x1

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|pTOC|	DCD	0xffffffff
	%	4
|NKSignon| DCB	0xa, "Microsoft Windows CE Secure Bootloader Common Libra"
	DCB	"ry Version %d.%d Built May  8 2013 13:48:39", 0xd, 0xa, 0x0
	EXPORT	|??_C@_0BI@OCFAEGPK@ROMHDR?5at?5Address?5?$CFXh?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CL@NOFKHKJC@System?5ready?$CB?$AN?6Preparing?5for?5dow@| [ DATA ] ; `string'
	EXPORT	|BootloaderMain|
	IMPORT	|OEMLaunch|
	IMPORT	|OEMMapMemAddr|
	IMPORT	|OEMPreDownload|
	IMPORT	|OEMPlatformInit|
	IMPORT	|KITLOutputDebugString|
	IMPORT	|OEMDebugInit|

  00000			 AREA	 |.pdata|, PDATA
|$T41099| DCD	|$LN19@Bootloader|
	DCD	0x40008902
; File c:\wince600\platform\common\src\common\boot\blcommon\blcommon.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BI@OCFAEGPK@ROMHDR?5at?5Address?5?$CFXh?$AN?6?$AA@| DCB "ROMHDR a"
	DCB	"t Address %Xh", 0xd, 0xa, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CL@NOFKHKJC@System?5ready?$CB?$AN?6Preparing?5for?5dow@| DCB "Sys"
	DCB	"tem ready!", 0xd, 0xa, "Preparing for download...", 0xd, 0xa
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BootloaderMain| PROC

; 155  : {

  00000		 |$LN19@Bootloader|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd040	 sub         sp, sp, #0x40
  00008		 |$M41096|

; 156  :     DWORD dwAction;   
; 157  :     DWORD dwpToc = 0;

  00008	e3a03000	 mov         r3, #0
  0000c	e58d3004	 str         r3, [sp, #4]

; 158  :     DWORD dwImageStart = 0, dwImageLength = 0, dwLaunchAddr = 0;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018	e3a03000	 mov         r3, #0
  0001c	e58d300c	 str         r3, [sp, #0xC]
  00020	e3a03000	 mov         r3, #0
  00024	e58d3008	 str         r3, [sp, #8]

; 159  :     BOOL bDownloaded = FALSE;

  00028	e3a03000	 mov         r3, #0
  0002c	e58d3014	 str         r3, [sp, #0x14]

; 160  : 
; 161  :     // relocate globals to RAM
; 162  :     if (!KernelRelocate (pTOC))

  00030	e59f31e8	 ldr         r3, [pc, #0x1E8]
  00034	e5930000	 ldr         r0, [r3]
  00038	eb000000	 bl          KernelRelocate
  0003c	e58d0018	 str         r0, [sp, #0x18]
  00040	e59d3018	 ldr         r3, [sp, #0x18]
  00044	e3530000	 cmp         r3, #0
  00048	1a000001	 bne         |$LN14@Bootloader|

; 163  :     {
; 164  :         // spin forever
; 165  :         HALT (BLERR_KERNELRELOCATE);

  0004c	e3e00000	 mvn         r0, #0
  00050	eb000000	 bl          HALT
  00054		 |$LN14@Bootloader|

; 166  :     }
; 167  : 
; 168  :     // (1) Init debug support. We can use OEMWriteDebugString afterward.
; 169  :     if (!OEMDebugInit ())

  00054	eb000000	 bl          OEMDebugInit
  00058	e58d001c	 str         r0, [sp, #0x1C]
  0005c	e59d301c	 ldr         r3, [sp, #0x1C]
  00060	e3530000	 cmp         r3, #0
  00064	1a000001	 bne         |$LN13@Bootloader|

; 170  :     {
; 171  :         // spin forever
; 172  :         HALT (BLERR_DBGINIT);

  00068	e3e00001	 mvn         r0, #1
  0006c	eb000000	 bl          HALT
  00070		 |$LN13@Bootloader|

; 173  :     }
; 174  : 
; 175  :     // output banner
; 176  :     KITLOutputDebugString (NKSignon, CURRENT_VERSION_MAJOR, CURRENT_VERSION_MINOR);

  00070	e3a02004	 mov         r2, #4
  00074	e3a01001	 mov         r1, #1
  00078	e59f019c	 ldr         r0, [pc, #0x19C]
  0007c	eb000000	 bl          KITLOutputDebugString

; 177  : 
; 178  :     // (3) initialize platform (clock, drivers, transports, etc)
; 179  :     if (!OEMPlatformInit ())

  00080	eb000000	 bl          OEMPlatformInit
  00084	e58d0020	 str         r0, [sp, #0x20]
  00088	e59d3020	 ldr         r3, [sp, #0x20]
  0008c	e3530000	 cmp         r3, #0
  00090	1a000001	 bne         |$LN12@Bootloader|

; 180  :     {
; 181  :         // spin forever
; 182  :         HALT (BLERR_PLATINIT);

  00094	e3e00002	 mvn         r0, #2
  00098	eb000000	 bl          HALT
  0009c		 |$LN12@Bootloader|

; 183  :     }
; 184  : 
; 185  :     // system ready, preparing for download
; 186  :     KITLOutputDebugString ("System ready!\r\nPreparing for download...\r\n");

  0009c	e59f0174	 ldr         r0, [pc, #0x174]
  000a0	eb000000	 bl          KITLOutputDebugString

; 187  : 
; 188  :     // (4) call OEM specific pre-download function
; 189  :     switch (dwAction = OEMPreDownload ())

  000a4	eb000000	 bl          OEMPreDownload
  000a8	e58d0024	 str         r0, [sp, #0x24]
  000ac	e59d3024	 ldr         r3, [sp, #0x24]
  000b0	e58d3010	 str         r3, [sp, #0x10]
  000b4	e59d3010	 ldr         r3, [sp, #0x10]
  000b8	e58d3028	 str         r3, [sp, #0x28]
  000bc	e59d3028	 ldr         r3, [sp, #0x28]
  000c0	e3530000	 cmp         r3, #0
  000c4	0a000003	 beq         |$LN9@Bootloader|
  000c8	e59d3028	 ldr         r3, [sp, #0x28]
  000cc	e3530001	 cmp         r3, #1
  000d0	0a00002a	 beq         |$LN4@Bootloader|
  000d4	ea000045	 b           |$LN1@Bootloader|
  000d8		 |$LN9@Bootloader|

; 190  :     {
; 191  :     case BL_DOWNLOAD:
; 192  :         // (5) download image
; 193  :         if (!DownloadImage (&dwImageStart, &dwImageLength, &dwLaunchAddr))

  000d8	e28d2008	 add         r2, sp, #8
  000dc	e28d100c	 add         r1, sp, #0xC
  000e0	e28d0000	 add         r0, sp, #0
  000e4	eb000000	 bl          DownloadImage
  000e8	e58d002c	 str         r0, [sp, #0x2C]
  000ec	e59d302c	 ldr         r3, [sp, #0x2C]
  000f0	e3530000	 cmp         r3, #0
  000f4	1a000000	 bne         |$LN8@Bootloader|
  000f8		 |$LN7@Bootloader|

; 194  :         {
; 195  :             // error already reported in DownloadImage
; 196  :             SPIN_FOREVER;

  000f8	eafffffe	 b           |$LN7@Bootloader|
  000fc		 |$LN8@Bootloader|

; 197  :         }
; 198  :         bDownloaded = TRUE;

  000fc	e3a03001	 mov         r3, #1
  00100	e58d3014	 str         r3, [sp, #0x14]

; 199  : 
; 200  :         // Check for pTOC signature ("CECE") here, after image in place
; 201  :         if (*(LPDWORD) OEMMapMemAddr (dwImageStart, dwImageStart + ROM_SIGNATURE_OFFSET) == ROM_SIGNATURE)

  00104	e59d3000	 ldr         r3, [sp]
  00108	e2831040	 add         r1, r3, #0x40
  0010c	e59d0000	 ldr         r0, [sp]
  00110	eb000000	 bl          OEMMapMemAddr
  00114	e58d0030	 str         r0, [sp, #0x30]
  00118	e59d3030	 ldr         r3, [sp, #0x30]
  0011c	e5932000	 ldr         r2, [r3]
  00120	e59f30ec	 ldr         r3, [pc, #0xEC]
  00124	e1520003	 cmp         r2, r3
  00128	1a000014	 bne         |$LN5@Bootloader|

; 202  :         {
; 203  :             dwpToc = *(LPDWORD) OEMMapMemAddr (dwImageStart, dwImageStart + ROM_SIGNATURE_OFFSET + sizeof(ULONG));

  0012c	e59d3000	 ldr         r3, [sp]
  00130	e2831044	 add         r1, r3, #0x44
  00134	e59d0000	 ldr         r0, [sp]
  00138	eb000000	 bl          OEMMapMemAddr
  0013c	e58d0034	 str         r0, [sp, #0x34]
  00140	e59d3034	 ldr         r3, [sp, #0x34]
  00144	e5933000	 ldr         r3, [r3]
  00148	e58d3004	 str         r3, [sp, #4]

; 204  :             // need to map the content again since the pointer is going to be in a fixup address
; 205  :             dwpToc = (DWORD) OEMMapMemAddr (dwImageStart, dwpToc + g_dwROMOffset);

  0014c	e59d2004	 ldr         r2, [sp, #4]
  00150	e59f30b0	 ldr         r3, [pc, #0xB0]
  00154	e5933000	 ldr         r3, [r3]
  00158	e0821003	 add         r1, r2, r3
  0015c	e59d0000	 ldr         r0, [sp]
  00160	eb000000	 bl          OEMMapMemAddr
  00164	e58d0038	 str         r0, [sp, #0x38]
  00168	e59d3038	 ldr         r3, [sp, #0x38]
  0016c	e58d3004	 str         r3, [sp, #4]

; 206  : 
; 207  :             KITLOutputDebugString ("ROMHDR at Address %Xh\r\n", dwImageStart + ROM_SIGNATURE_OFFSET + sizeof (DWORD)); // right after signature

  00170	e59d3000	 ldr         r3, [sp]
  00174	e2831044	 add         r1, r3, #0x44
  00178	e59f0090	 ldr         r0, [pc, #0x90]
  0017c	eb000000	 bl          KITLOutputDebugString
  00180		 |$LN5@Bootloader|
  00180		 |$LN4@Bootloader|

; 208  :         }
; 209  : 
; 210  :         // fall through
; 211  :     case BL_JUMP:
; 212  :         // Before jumping to the image, optionally check the image signature.
; 213  :         // NOTE: if we haven't downloaded the image by now, we assume that it'll be loaded from local storage in OEMLaunch (or it
; 214  :         // already resides in RAM from an earlier download), and in this case, the image start address might be 0.  This means 
; 215  :         // that the image signature routine will need to find the image in storage or in RAM to validate it.  Since the OEM"s 
; 216  :         // OEMLaunch function will need to do this anyways, we trust that it's within their abilities to do it here.
; 217  :         //
; 218  :         if (g_bBINDownload && g_pOEMCheckSignature)

  00180	e59f3084	 ldr         r3, [pc, #0x84]
  00184	e5d33000	 ldrb        r3, [r3]
  00188	e3530000	 cmp         r3, #0
  0018c	0a000012	 beq         |$LN3@Bootloader|
  00190	e59f306c	 ldr         r3, [pc, #0x6C]
  00194	e5933000	 ldr         r3, [r3]
  00198	e3530000	 cmp         r3, #0
  0019c	0a00000e	 beq         |$LN3@Bootloader|

; 219  :         {
; 220  :             if (!g_pOEMCheckSignature(dwImageStart, g_dwROMOffset, dwLaunchAddr, bDownloaded))

  001a0	e59d3014	 ldr         r3, [sp, #0x14]
  001a4	e59d2008	 ldr         r2, [sp, #8]
  001a8	e59f1058	 ldr         r1, [pc, #0x58]
  001ac	e5911000	 ldr         r1, [r1]
  001b0	e59d0000	 ldr         r0, [sp]
  001b4	e59fe048	 ldr         lr, [pc, #0x48]
  001b8	e59e4000	 ldr         r4, [lr]
  001bc	e1a0e00f	 mov         lr, pc
  001c0	e12fff14	 bx          r4
  001c4	e58d003c	 str         r0, [sp, #0x3C]
  001c8	e59d303c	 ldr         r3, [sp, #0x3C]
  001cc	e3530000	 cmp         r3, #0
  001d0	1a000001	 bne         |$LN2@Bootloader|

; 221  :                 HALT(BLERR_CAT_SIGNATURE);

  001d4	e3e0000c	 mvn         r0, #0xC
  001d8	eb000000	 bl          HALT
  001dc		 |$LN2@Bootloader|
  001dc		 |$LN3@Bootloader|

; 222  :         }
; 223  :         // (5) final call to launch the image. never returned
; 224  :         OEMLaunch (dwImageStart, dwImageLength, dwLaunchAddr, (const ROMHDR *)dwpToc);

  001dc	e59d3004	 ldr         r3, [sp, #4]
  001e0	e59d2008	 ldr         r2, [sp, #8]
  001e4	e59d100c	 ldr         r1, [sp, #0xC]
  001e8	e59d0000	 ldr         r0, [sp]
  001ec	eb000000	 bl          OEMLaunch
  001f0		 |$LN1@Bootloader|

; 225  :         // should never return
; 226  :         // fall through
; 227  :     default:
; 228  :         // ERROR! spin forever
; 229  :         HALT (BLERR_INVALIDCMD);

  001f0	e3e00005	 mvn         r0, #5
  001f4	eb000000	 bl          HALT

; 230  :     }
; 231  : }

  001f8	e28dd040	 add         sp, sp, #0x40
  001fc	e8bd4010	 ldmia       sp!, {r4, lr}
  00200	e12fff1e	 bx          lr
  00204		 |$LN20@Bootloader|
  00204		 |$LN21@Bootloader|
  00204	00000000	 DCD         |g_pOEMCheckSignature|
  00208		 |$LN22@Bootloader|
  00208	00000000	 DCD         |g_dwROMOffset|
  0020c		 |$LN23@Bootloader|
  0020c	00000000	 DCD         |g_bBINDownload|
  00210		 |$LN24@Bootloader|
  00210	00000000	 DCD         |??_C@_0BI@OCFAEGPK@ROMHDR?5at?5Address?5?$CFXh?$AN?6?$AA@|
  00214		 |$LN25@Bootloader|
  00214	43454345	 DCD         0x43454345
  00218		 |$LN26@Bootloader|
  00218	00000000	 DCD         |??_C@_0CL@NOFKHKJC@System?5ready?$CB?$AN?6Preparing?5for?5dow@|
  0021c		 |$LN27@Bootloader|
  0021c	00000000	 DCD         |NKSignon|
  00220		 |$LN28@Bootloader|
  00220	00000000	 DCD         |pTOC|
  00224		 |$M41097|

			 ENDP  ; |BootloaderMain|


  00008			 AREA	 |.pdata|, PDATA
|$T41113| DCD	|$LN8@HALT|
	DCD	0x40001103
; Function compile flags: /Odtp

  00224			 AREA	 |.text|, CODE, ARM

  00224		 |HALT|	 PROC

; 145  : {

  00224		 |$LN8@HALT|
  00224	e1a0c00d	 mov         r12, sp
  00228	e92d0001	 stmdb       sp!, {r0}
  0022c	e92d5000	 stmdb       sp!, {r12, lr}
  00230		 |$M41110|

; 146  :     if (g_pOEMReportError)

  00230	e59f302c	 ldr         r3, [pc, #0x2C]
  00234	e5933000	 ldr         r3, [r3]
  00238	e3530000	 cmp         r3, #0
  0023c	0a000005	 beq         |$LN3@HALT|

; 147  :     {
; 148  :         g_pOEMReportError (dwReason, 0);

  00240	e3a01000	 mov         r1, #0
  00244	e59d0008	 ldr         r0, [sp, #8]
  00248	e59f3014	 ldr         r3, [pc, #0x14]
  0024c	e5933000	 ldr         r3, [r3]
  00250	e1a0e00f	 mov         lr, pc
  00254	e12fff13	 bx          r3
  00258		 |$LN3@HALT|
  00258		 |$LN2@HALT|

; 149  :     }
; 150  :     SPIN_FOREVER;

  00258	eafffffe	 b           |$LN2@HALT|

; 151  : }

  0025c	e89d6000	 ldmia       sp, {sp, lr}
  00260	e12fff1e	 bx          lr
  00264		 |$LN9@HALT|
  00264		 |$LN10@HALT|
  00264	00000000	 DCD         |g_pOEMReportError|
  00268		 |$M41111|

			 ENDP  ; |HALT|

	IMPORT	|memset|
	IMPORT	|memcpy|

  00010			 AREA	 |.pdata|, PDATA
|$T41121| DCD	|$LN11@KernelRelo|
	DCD	0x40004b04
; Function compile flags: /Odtp

  00268			 AREA	 |.text|, CODE, ARM

  00268		 |KernelRelocate| PROC

; 238  : {

  00268		 |$LN11@KernelRelo|
  00268	e1a0c00d	 mov         r12, sp
  0026c	e92d0001	 stmdb       sp!, {r0}
  00270	e92d5000	 stmdb       sp!, {r12, lr}
  00274	e24dd00c	 sub         sp, sp, #0xC
  00278		 |$M41118|

; 239  :     ULONG loop;
; 240  :     COPYentry *cptr;
; 241  :     if (pTOC == (ROMHDR *const) -1)

  00278	e59d3014	 ldr         r3, [sp, #0x14]
  0027c	e3730001	 cmn         r3, #1
  00280	1a000002	 bne         |$LN6@KernelRelo|

; 242  :     {
; 243  :         return (FALSE); // spin forever!

  00284	e3a03000	 mov         r3, #0
  00288	e58d3008	 str         r3, [sp, #8]
  0028c	ea00003c	 b           |$LN7@KernelRelo|
  00290		 |$LN6@KernelRelo|

; 244  :     }
; 245  :     // This is where the data sections become valid... don't read globals until after this
; 246  :     for (loop = 0; loop < pTOC->ulCopyEntries; loop++)

  00290	e3a03000	 mov         r3, #0
  00294	e58d3000	 str         r3, [sp]
  00298	ea000002	 b           |$LN5@KernelRelo|
  0029c		 |$LN4@KernelRelo|
  0029c	e59d3000	 ldr         r3, [sp]
  002a0	e2833001	 add         r3, r3, #1
  002a4	e58d3000	 str         r3, [sp]
  002a8		 |$LN5@KernelRelo|
  002a8	e59d3014	 ldr         r3, [sp, #0x14]
  002ac	e2833020	 add         r3, r3, #0x20
  002b0	e59d2000	 ldr         r2, [sp]
  002b4	e5933000	 ldr         r3, [r3]
  002b8	e1520003	 cmp         r2, r3
  002bc	2a00002e	 bcs         |$LN3@KernelRelo|

; 247  :     {
; 248  :         cptr = (COPYentry *)(pTOC->ulCopyOffset + loop*sizeof(COPYentry));

  002c0	e59d3014	 ldr         r3, [sp, #0x14]
  002c4	e2830024	 add         r0, r3, #0x24
  002c8	e59d1000	 ldr         r1, [sp]
  002cc	e3a03010	 mov         r3, #0x10
  002d0	e0020391	 mul         r2, r1, r3
  002d4	e5903000	 ldr         r3, [r0]
  002d8	e0833002	 add         r3, r3, r2
  002dc	e58d3004	 str         r3, [sp, #4]

; 249  :         if (cptr->ulCopyLen)

  002e0	e59d3004	 ldr         r3, [sp, #4]
  002e4	e2833008	 add         r3, r3, #8
  002e8	e5933000	 ldr         r3, [r3]
  002ec	e3530000	 cmp         r3, #0
  002f0	0a000008	 beq         |$LN2@KernelRelo|

; 250  :             memcpy((LPVOID)cptr->ulDest,(LPVOID)cptr->ulSource,cptr->ulCopyLen);

  002f4	e59d3004	 ldr         r3, [sp, #4]
  002f8	e2833008	 add         r3, r3, #8
  002fc	e5932000	 ldr         r2, [r3]
  00300	e59d3004	 ldr         r3, [sp, #4]
  00304	e5931000	 ldr         r1, [r3]
  00308	e59d3004	 ldr         r3, [sp, #4]
  0030c	e2833004	 add         r3, r3, #4
  00310	e5930000	 ldr         r0, [r3]
  00314	eb000000	 bl          memcpy
  00318		 |$LN2@KernelRelo|

; 251  :         if (cptr->ulCopyLen != cptr->ulDestLen)

  00318	e59d3004	 ldr         r3, [sp, #4]
  0031c	e2832008	 add         r2, r3, #8
  00320	e59d3004	 ldr         r3, [sp, #4]
  00324	e283300c	 add         r3, r3, #0xC
  00328	e5922000	 ldr         r2, [r2]
  0032c	e5933000	 ldr         r3, [r3]
  00330	e1520003	 cmp         r2, r3
  00334	0a00000f	 beq         |$LN1@KernelRelo|

; 252  :             memset((LPVOID)(cptr->ulDest+cptr->ulCopyLen),0,cptr->ulDestLen-cptr->ulCopyLen);

  00338	e59d3004	 ldr         r3, [sp, #4]
  0033c	e283200c	 add         r2, r3, #0xC
  00340	e59d3004	 ldr         r3, [sp, #4]
  00344	e2833008	 add         r3, r3, #8
  00348	e5922000	 ldr         r2, [r2]
  0034c	e5933000	 ldr         r3, [r3]
  00350	e0422003	 sub         r2, r2, r3
  00354	e3a01000	 mov         r1, #0
  00358	e59d3004	 ldr         r3, [sp, #4]
  0035c	e2830004	 add         r0, r3, #4
  00360	e59d3004	 ldr         r3, [sp, #4]
  00364	e2833008	 add         r3, r3, #8
  00368	e5900000	 ldr         r0, [r0]
  0036c	e5933000	 ldr         r3, [r3]
  00370	e0800003	 add         r0, r0, r3
  00374	eb000000	 bl          memset
  00378		 |$LN1@KernelRelo|

; 253  :     }

  00378	eaffffc7	 b           |$LN4@KernelRelo|
  0037c		 |$LN3@KernelRelo|

; 254  :     return (TRUE);

  0037c	e3a03001	 mov         r3, #1
  00380	e58d3008	 str         r3, [sp, #8]
  00384		 |$LN7@KernelRelo|

; 255  : }

  00384	e59d0008	 ldr         r0, [sp, #8]
  00388	e28dd00c	 add         sp, sp, #0xC
  0038c	e89d6000	 ldmia       sp, {sp, lr}
  00390	e12fff1e	 bx          lr
  00394		 |$M41119|

			 ENDP  ; |KernelRelocate|

	EXPORT	|??_C@_0DP@EIBIBKOO@?$CK?$CK?5?5?5?5?5?5?5?5This?5boot?5loader?5does?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DO@LEKCKELG@?$CK?$CK?5ERROR?3?5Unrecognized?5image?5typ@| [ DATA ] ; `string'
	EXPORT	|??_C@_0FO@KDFAPMNM@?$CK?$CK?5Please?5update?5your?5Platform?5B@| [ DATA ] ; `string'
	EXPORT	|??_C@_0GI@NIAHKKOO@?$CK?$CK?5ERROR?3?5The?5X000FF?5packet?5is?5a@| [ DATA ] ; `string'
	EXPORT	|??_C@_04IPBEALME@?$CK?$CK?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0EA@GKNACHAG@?$CK?$CK?5?5?5?5?5?5?5?5Image?5must?5be?5signed?5w@| [ DATA ] ; `string'
	EXPORT	|??_C@_0EE@IODHDMIJ@?$CK?$CK?5ERROR?3?5This?5boot?5loader?5does?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_06BEBGGBAB@?$AN?6?$CK?$CK?$AN?6?$AA@| [ DATA ] ; `string'

  00004			 AREA	 |.bss|, NOINIT
|g_DownloadManifest| % 0x1a30

  00018			 AREA	 |.pdata|, PDATA
|$T41136| DCD	|$LN27@DownloadIm|
	DCD	0x40009704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DP@EIBIBKOO@?$CK?$CK?5?5?5?5?5?5?5?5This?5boot?5loader?5does?5@| DCB "*"
	DCB	"*        This boot loader does not support unsigned imag"
	DCB	"es.", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DO@LEKCKELG@?$CK?$CK?5ERROR?3?5Unrecognized?5image?5typ@| DCB "**"
	DCB	" ERROR: Unrecognized image type (possibly unsigned .nb0)"
	DCB	".", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0FO@KDFAPMNM@?$CK?$CK?5Please?5update?5your?5Platform?5B@| DCB "**"
	DCB	" Please update your Platform Builder installation in you"
	DCB	" want to download multiple files.", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0GI@NIAHKKOO@?$CK?$CK?5ERROR?3?5The?5X000FF?5packet?5is?5a@| DCB "*"
	DCB	"* ERROR: The X000FF packet is an old-style multi-bin dow"
	DCB	"nload manifest and it's no longer supported.", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04IPBEALME@?$CK?$CK?$AN?6?$AA@| DCB "**", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EA@GKNACHAG@?$CK?$CK?5?5?5?5?5?5?5?5Image?5must?5be?5signed?5w@| DCB "*"
	DCB	"*        Image must be signed with a recognized private "
	DCB	"key.", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EE@IODHDMIJ@?$CK?$CK?5ERROR?3?5This?5boot?5loader?5does?5@| DCB "*"
	DCB	"* ERROR: This boot loader does not support unsigned .bin"
	DCB	" images.", 0xd, 0xa, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_06BEBGGBAB@?$AN?6?$CK?$CK?$AN?6?$AA@| DCB 0xd, 0xa, "**", 0xd, 0xa
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00394			 AREA	 |.text|, CODE, ARM

  00394		 |DownloadImage| PROC

; 360  : {

  00394		 |$LN27@DownloadIm|
  00394	e1a0c00d	 mov         r12, sp
  00398	e92d0007	 stmdb       sp!, {r0 - r2}
  0039c	e92d5000	 stmdb       sp!, {r12, lr}
  003a0	e24dd024	 sub         sp, sp, #0x24
  003a4		 |$M41133|

; 361  :     BOOL        rval = TRUE;

  003a4	e3a03001	 mov         r3, #1
  003a8	e58d3004	 str         r3, [sp, #4]

; 362  :     DWORD       dwImageType;
; 363  : 
; 364  :     *pdwImageStart = *pdwImageLength = *pdwLaunchAddr = 0;

  003ac	e59d2034	 ldr         r2, [sp, #0x34]
  003b0	e3a03000	 mov         r3, #0
  003b4	e5823000	 str         r3, [r2]
  003b8	e59d2030	 ldr         r2, [sp, #0x30]
  003bc	e3a03000	 mov         r3, #0
  003c0	e5823000	 str         r3, [r2]
  003c4	e59d202c	 ldr         r2, [sp, #0x2C]
  003c8	e3a03000	 mov         r3, #0
  003cc	e5823000	 str         r3, [r2]

; 365  : 
; 366  : #ifdef SECURE_BOOTLOADER
; 367  :     InitSecureBootLoader();

  003d0	eb000000	 bl          InitSecureBootLoader
  003d4		 |$LN13@DownloadIm|

; 368  : #endif
; 369  : 
; 370  : 
; 371  :     //
; 372  :     // Download each region (multiple can be sent)
; 373  :     //
; 374  :     do
; 375  :     {
; 376  :         dwImageType = GetImageType();

  003d4	eb000000	 bl          GetImageType
  003d8	e58d000c	 str         r0, [sp, #0xC]
  003dc	e59d300c	 ldr         r3, [sp, #0xC]
  003e0	e58d3000	 str         r3, [sp]

; 377  :         
; 378  :         switch(dwImageType) 

  003e4	e59d3000	 ldr         r3, [sp]
  003e8	e58d3010	 str         r3, [sp, #0x10]
  003ec	e59d3010	 ldr         r3, [sp, #0x10]
  003f0	e3530006	 cmp         r3, #6
  003f4	8a000059	 bhi         |$LN1@DownloadIm|
  003f8	e59d2010	 ldr         r2, [sp, #0x10]
  003fc	e1a03102	 mov         r3, r2, lsl #2
  00400	e083300f	 add         r3, r3, pc
  00404	e5933004	 ldr         r3, [r3, #4]
  00408	e08ff003	 add         pc, pc, r3
  0040c		 |$LN17@DownloadIm|
  0040c		 |$LN16@DownloadIm|
  0040c		 |$LN18@DownloadIm|
  0040c	00000018	 DCD         0x18
  00410		 |$LN19@DownloadIm|
  00410	0000005c	 DCD         0x5c
  00414		 |$LN20@DownloadIm|
  00414	00000150	 DCD         0x150
  00418		 |$LN21@DownloadIm|
  00418	00000090	 DCD         0x90
  0041c		 |$LN22@DownloadIm|
  0041c	000000b8	 DCD         0xb8
  00420		 |$LN23@DownloadIm|
  00420	000000e0	 DCD         0xe0
  00424		 |$LN24@DownloadIm|
  00424	00000114	 DCD         0x114
  00428		 |$LN8@DownloadIm|

; 379  :         {
; 380  :             case BL_IMAGE_TYPE_MANIFEST:
; 381  :                 // Platform Builder sends a manifest to indicate the following 
; 382  :                 // data consists of multiple .bin files /OR/ one .nb0 file.
; 383  :                 if (!CheckImageManifest()) {

  00428	eb000000	 bl          CheckImageManifest
  0042c	e58d0014	 str         r0, [sp, #0x14]
  00430	e59d3014	 ldr         r3, [sp, #0x14]
  00434	e3530000	 cmp         r3, #0
  00438	1a000004	 bne         |$LN7@DownloadIm|

; 384  :                     HALT (BLERR_MAGIC);

  0043c	e3e00007	 mvn         r0, #7
  00440	eb000000	 bl          HALT

; 385  :                     return (FALSE);   

  00444	e3a03000	 mov         r3, #0
  00448	e58d3008	 str         r3, [sp, #8]
  0044c	ea000059	 b           |$LN14@DownloadIm|
  00450		 |$LN7@DownloadIm|

; 386  :                 }
; 387  : 
; 388  :                 // Continue with download of next file
; 389  :                 // +1 to account for the manifest
; 390  :                 g_downloadFilesRemaining = (BYTE)(g_DownloadManifest.dwNumRegions + 1);

  00450	e59f3194	 ldr         r3, [pc, #0x194]
  00454	e5933000	 ldr         r3, [r3]
  00458	e2833001	 add         r3, r3, #1
  0045c	e20320ff	 and         r2, r3, #0xFF
  00460	e59f3160	 ldr         r3, [pc, #0x160]
  00464	e5c32000	 strb        r2, [r3]

; 391  :                 continue;

  00468	ea00003f	 b           |$LN12@DownloadIm|
  0046c		 |$LN6@DownloadIm|

; 392  : 
; 393  : #ifdef SECURE_BOOTLOADER
; 394  :             case BL_IMAGE_TYPE_BIN:
; 395  :                 KITLOutputDebugString("\r\n**\r\n");

  0046c	e59f0168	 ldr         r0, [pc, #0x168]
  00470	eb000000	 bl          KITLOutputDebugString

; 396  :                 KITLOutputDebugString("** ERROR: This boot loader does not support unsigned .bin images.\r\n");

  00474	e59f016c	 ldr         r0, [pc, #0x16C]
  00478	eb000000	 bl          KITLOutputDebugString

; 397  :                 KITLOutputDebugString("**        Image must be signed with a recognized private key.\r\n");

  0047c	e59f014c	 ldr         r0, [pc, #0x14C]
  00480	eb000000	 bl          KITLOutputDebugString

; 398  :                 KITLOutputDebugString("**\r\n");

  00484	e59f0140	 ldr         r0, [pc, #0x140]
  00488	eb000000	 bl          KITLOutputDebugString

; 399  :                 HALT (BLERR_SIGNATURE);

  0048c	e3e00004	 mvn         r0, #4
  00490	eb000000	 bl          HALT

; 400  :                 return (FALSE);

  00494	e3a03000	 mov         r3, #0
  00498	e58d3008	 str         r3, [sp, #8]
  0049c	ea000045	 b           |$LN14@DownloadIm|
  004a0		 |$LN5@DownloadIm|

; 401  : 
; 402  :             case BL_IMAGE_TYPE_SIGNED_BIN:
; 403  :                 rval &= DownloadSignedBin( pdwImageStart, pdwImageLength, pdwLaunchAddr );

  004a0	e59d2034	 ldr         r2, [sp, #0x34]
  004a4	e59d1030	 ldr         r1, [sp, #0x30]
  004a8	e59d002c	 ldr         r0, [sp, #0x2C]
  004ac	eb000000	 bl          DownloadSignedBin
  004b0	e58d0018	 str         r0, [sp, #0x18]
  004b4	e59d2004	 ldr         r2, [sp, #4]
  004b8	e59d3018	 ldr         r3, [sp, #0x18]
  004bc	e0023003	 and         r3, r2, r3
  004c0	e58d3004	 str         r3, [sp, #4]

; 404  :                 break;

  004c4	ea000028	 b           |$LN9@DownloadIm|
  004c8		 |$LN4@DownloadIm|

; 405  : 
; 406  :             case BL_IMAGE_TYPE_SIGNED_NB0:
; 407  :                 rval &= DownloadSignedNB0( pdwImageStart, pdwImageLength, pdwLaunchAddr );

  004c8	e59d2034	 ldr         r2, [sp, #0x34]
  004cc	e59d1030	 ldr         r1, [sp, #0x30]
  004d0	e59d002c	 ldr         r0, [sp, #0x2C]
  004d4	eb000000	 bl          DownloadSignedNB0
  004d8	e58d001c	 str         r0, [sp, #0x1C]
  004dc	e59d2004	 ldr         r2, [sp, #4]
  004e0	e59d301c	 ldr         r3, [sp, #0x1C]
  004e4	e0023003	 and         r3, r2, r3
  004e8	e58d3004	 str         r3, [sp, #4]

; 408  :                 break;

  004ec	ea00001e	 b           |$LN9@DownloadIm|
  004f0		 |$LN3@DownloadIm|

; 409  : 
; 410  : #else // not SECURE_BOOTLOADER
; 411  : 
; 412  :             case BL_IMAGE_TYPE_BIN:
; 413  :                 rval &= DownloadBin( pdwImageStart, pdwImageLength, pdwLaunchAddr );
; 414  :                 break;
; 415  : 
; 416  :             case BL_IMAGE_TYPE_SIGNED_BIN:
; 417  :                 KITLOutputDebugString("\r\n**\r\n");
; 418  :                 KITLOutputDebugString("** ERROR: This boot loader does not support signed .bin images.\r\n");
; 419  :                 KITLOutputDebugString("**\r\n");
; 420  :                 HALT (BLERR_SIGNATURE);
; 421  :                 return (FALSE);
; 422  : 
; 423  :             case BL_IMAGE_TYPE_SIGNED_NB0:
; 424  :                 KITLOutputDebugString("\r\n**\r\n");
; 425  :                 KITLOutputDebugString("** ERROR: This boot loader does not support signed .nb0 images.\r\n");
; 426  :                 KITLOutputDebugString("**\r\n");
; 427  :                 HALT (BLERR_SIGNATURE);
; 428  :                 return (FALSE);
; 429  : #endif // SECURE_BOOTLOADER
; 430  : 
; 431  :             case BL_IMAGE_TYPE_MULTIXIP:
; 432  :                 KITLOutputDebugString("\r\n**\r\n");

  004f0	e59f00e4	 ldr         r0, [pc, #0xE4]
  004f4	eb000000	 bl          KITLOutputDebugString

; 433  :                 KITLOutputDebugString("** ERROR: The X000FF packet is an old-style multi-bin download manifest and it's no longer supported.\r\n");

  004f8	e59f00e4	 ldr         r0, [pc, #0xE4]
  004fc	eb000000	 bl          KITLOutputDebugString

; 434  :                 KITLOutputDebugString("** Please update your Platform Builder installation in you want to download multiple files.\r\n");

  00500	e59f00d8	 ldr         r0, [pc, #0xD8]
  00504	eb000000	 bl          KITLOutputDebugString

; 435  :                 KITLOutputDebugString("**\r\n");

  00508	e59f00bc	 ldr         r0, [pc, #0xBC]
  0050c	eb000000	 bl          KITLOutputDebugString

; 436  :                 HALT (BLERR_MAGIC);

  00510	e3e00007	 mvn         r0, #7
  00514	eb000000	 bl          HALT

; 437  :                 return (FALSE);

  00518	e3a03000	 mov         r3, #0
  0051c	e58d3008	 str         r3, [sp, #8]
  00520	ea000024	 b           |$LN14@DownloadIm|
  00524		 |$LN2@DownloadIm|

; 438  : 
; 439  :             case BL_IMAGE_TYPE_UNKNOWN:
; 440  : #ifdef SECURE_BOOTLOADER
; 441  :                 KITLOutputDebugString("\r\n**\r\n");

  00524	e59f00b0	 ldr         r0, [pc, #0xB0]
  00528	eb000000	 bl          KITLOutputDebugString

; 442  :                 KITLOutputDebugString("** ERROR: Unrecognized image type (possibly unsigned .nb0).\r\n");

  0052c	e59f00a4	 ldr         r0, [pc, #0xA4]
  00530	eb000000	 bl          KITLOutputDebugString

; 443  :                 KITLOutputDebugString("**        This boot loader does not support unsigned images.\r\n");

  00534	e59f0098	 ldr         r0, [pc, #0x98]
  00538	eb000000	 bl          KITLOutputDebugString

; 444  :                 KITLOutputDebugString("**        Image must be signed with a recognized private key.\r\n");

  0053c	e59f008c	 ldr         r0, [pc, #0x8C]
  00540	eb000000	 bl          KITLOutputDebugString

; 445  :                 KITLOutputDebugString("**\r\n");

  00544	e59f0080	 ldr         r0, [pc, #0x80]
  00548	eb000000	 bl          KITLOutputDebugString

; 446  :                 HALT (BLERR_MAGIC);

  0054c	e3e00007	 mvn         r0, #7
  00550	eb000000	 bl          HALT

; 447  :                 return (FALSE);

  00554	e3a03000	 mov         r3, #0
  00558	e58d3008	 str         r3, [sp, #8]
  0055c	ea000015	 b           |$LN14@DownloadIm|
  00560		 |$LN1@DownloadIm|

; 448  : #else
; 449  :                 // Assume files without a "type" header (e.g. raw data) are unsigned .nb0
; 450  :                 rval &= DownloadNB0( pdwImageStart, pdwImageLength, pdwLaunchAddr );
; 451  :                 break;
; 452  : #endif                
; 453  : 
; 454  :             default:
; 455  :                 // should never get here
; 456  :                 return (FALSE);

  00560	e3a03000	 mov         r3, #0
  00564	e58d3008	 str         r3, [sp, #8]
  00568	ea000012	 b           |$LN14@DownloadIm|
  0056c		 |$LN9@DownloadIm|
  0056c		 |$LN12@DownloadIm|

; 457  :                 
; 458  :         }
; 459  :     }
; 460  :     while (--g_downloadFilesRemaining);

  0056c	e59f3054	 ldr         r3, [pc, #0x54]
  00570	e5d33000	 ldrb        r3, [r3]
  00574	e2433001	 sub         r3, r3, #1
  00578	e20320ff	 and         r2, r3, #0xFF
  0057c	e59f3044	 ldr         r3, [pc, #0x44]
  00580	e5c32000	 strb        r2, [r3]
  00584	e59f303c	 ldr         r3, [pc, #0x3C]
  00588	e5d33000	 ldrb        r3, [r3]
  0058c	e3530000	 cmp         r3, #0
  00590	1affff8f	 bne         |$LN13@DownloadIm|

; 461  : 
; 462  :     ComputeChecksum();

  00594	eb000000	 bl          ComputeChecksum

; 463  :     rval &= WriteImageToFlash();

  00598	eb000000	 bl          WriteImageToFlash
  0059c	e58d0020	 str         r0, [sp, #0x20]
  005a0	e59d2004	 ldr         r2, [sp, #4]
  005a4	e59d3020	 ldr         r3, [sp, #0x20]
  005a8	e0023003	 and         r3, r2, r3
  005ac	e58d3004	 str         r3, [sp, #4]

; 464  : 
; 465  :     return rval;

  005b0	e59d3004	 ldr         r3, [sp, #4]
  005b4	e58d3008	 str         r3, [sp, #8]
  005b8		 |$LN14@DownloadIm|

; 466  : }

  005b8	e59d0008	 ldr         r0, [sp, #8]
  005bc	e28dd024	 add         sp, sp, #0x24
  005c0	e89d6000	 ldmia       sp, {sp, lr}
  005c4	e12fff1e	 bx          lr
  005c8		 |$LN28@DownloadIm|
  005c8		 |$LN29@DownloadIm|
  005c8	00000000	 DCD         |g_downloadFilesRemaining|
  005cc		 |$LN30@DownloadIm|
  005cc	00000000	 DCD         |??_C@_04IPBEALME@?$CK?$CK?$AN?6?$AA@|
  005d0		 |$LN31@DownloadIm|
  005d0	00000000	 DCD         |??_C@_0EA@GKNACHAG@?$CK?$CK?5?5?5?5?5?5?5?5Image?5must?5be?5signed?5w@|
  005d4		 |$LN32@DownloadIm|
  005d4	00000000	 DCD         |??_C@_0DP@EIBIBKOO@?$CK?$CK?5?5?5?5?5?5?5?5This?5boot?5loader?5does?5@|
  005d8		 |$LN33@DownloadIm|
  005d8	00000000	 DCD         |??_C@_0DO@LEKCKELG@?$CK?$CK?5ERROR?3?5Unrecognized?5image?5typ@|
  005dc		 |$LN34@DownloadIm|
  005dc	00000000	 DCD         |??_C@_06BEBGGBAB@?$AN?6?$CK?$CK?$AN?6?$AA@|
  005e0		 |$LN35@DownloadIm|
  005e0	00000000	 DCD         |??_C@_0FO@KDFAPMNM@?$CK?$CK?5Please?5update?5your?5Platform?5B@|
  005e4		 |$LN36@DownloadIm|
  005e4	00000000	 DCD         |??_C@_0GI@NIAHKKOO@?$CK?$CK?5ERROR?3?5The?5X000FF?5packet?5is?5a@|
  005e8		 |$LN37@DownloadIm|
  005e8	00000000	 DCD         |??_C@_0EE@IODHDMIJ@?$CK?$CK?5ERROR?3?5This?5boot?5loader?5does?5@|
  005ec		 |$LN38@DownloadIm|
  005ec	00000000	 DCD         |g_DownloadManifest|
  005f0		 |$M41134|

			 ENDP  ; |DownloadImage|

	EXPORT	|??_C@_0BM@DKIOIAMD@?$AN?6BL_IMAGE_TYPE_UNKNOWN?$AN?6?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BP@KNNCEABF@?$AN?6BL_IMAGE_TYPE_SIGNED_NB0?$AN?6?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_07LAGBNAEN@R000FF?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BP@MJFCGNBB@?$AN?6BL_IMAGE_TYPE_SIGNED_BIN?$AN?6?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_07HMMLNAND@S000FF?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BI@HBMHAEFD@?$AN?6BL_IMAGE_TYPE_BIN?$AN?6?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_07MMNKOBGG@B000FF?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BN@IHLEHBEK@?$AN?6BL_IMAGE_TYPE_MULTIXIP?$AN?6?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_07CBKBMMIF@X000FF?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BN@GCKOHOON@?$AN?6BL_IMAGE_TYPE_MANIFEST?$AN?6?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_07JLHFPECJ@N000FF?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CL@OKMIEAHJ@?$AN?6ERROR?3?5Unable?5to?5read?5image?5si@| [ DATA ] ; `string'
	IMPORT	|memcmp|
	IMPORT	|OEMReadData|

  01a34			 AREA	 |.bss|, NOINIT
|g_hdr|	%	0x7

  00020			 AREA	 |.pdata|, PDATA
|$T41153| DCD	|$LN16@GetImageTy|
	DCD	0x40006702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BM@DKIOIAMD@?$AN?6BL_IMAGE_TYPE_UNKNOWN?$AN?6?$AN?6?$AA@| DCB 0xd
	DCB	0xa, "BL_IMAGE_TYPE_UNKNOWN", 0xd, 0xa, 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BP@KNNCEABF@?$AN?6BL_IMAGE_TYPE_SIGNED_NB0?$AN?6?$AN?6?$AA@| DCB 0xd
	DCB	0xa, "BL_IMAGE_TYPE_SIGNED_NB0", 0xd, 0xa, 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_07LAGBNAEN@R000FF?6?$AA@| DCB "R000FF", 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BP@MJFCGNBB@?$AN?6BL_IMAGE_TYPE_SIGNED_BIN?$AN?6?$AN?6?$AA@| DCB 0xd
	DCB	0xa, "BL_IMAGE_TYPE_SIGNED_BIN", 0xd, 0xa, 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_07HMMLNAND@S000FF?6?$AA@| DCB "S000FF", 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BI@HBMHAEFD@?$AN?6BL_IMAGE_TYPE_BIN?$AN?6?$AN?6?$AA@| DCB 0xd, 0xa
	DCB	"BL_IMAGE_TYPE_BIN", 0xd, 0xa, 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_07MMNKOBGG@B000FF?6?$AA@| DCB "B000FF", 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BN@IHLEHBEK@?$AN?6BL_IMAGE_TYPE_MULTIXIP?$AN?6?$AN?6?$AA@| DCB 0xd
	DCB	0xa, "BL_IMAGE_TYPE_MULTIXIP", 0xd, 0xa, 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_07CBKBMMIF@X000FF?6?$AA@| DCB "X000FF", 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BN@GCKOHOON@?$AN?6BL_IMAGE_TYPE_MANIFEST?$AN?6?$AN?6?$AA@| DCB 0xd
	DCB	0xa, "BL_IMAGE_TYPE_MANIFEST", 0xd, 0xa, 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_07JLHFPECJ@N000FF?6?$AA@| DCB "N000FF", 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CL@OKMIEAHJ@?$AN?6ERROR?3?5Unable?5to?5read?5image?5si@| DCB 0xd, 0xa
	DCB	"ERROR: Unable to read image signature.", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  005f0			 AREA	 |.text|, CODE, ARM

  005f0		 |GetImageType| PROC

; 273  : {

  005f0		 |$LN16@GetImageTy|
  005f0	e52de004	 str         lr, [sp, #-4]!
  005f4	e24dd020	 sub         sp, sp, #0x20
  005f8		 |$M41150|

; 274  :     BL_IMAGE_TYPE rval = BL_IMAGE_TYPE_UNKNOWN;

  005f8	e3a03006	 mov         r3, #6
  005fc	e58d3000	 str         r3, [sp]

; 275  : 
; 276  :     // read the 7 byte "magic number"
; 277  :     //
; 278  :     if (!OEMReadData (BL_HDRSIG_SIZE, g_hdr))

  00600	e59f1158	 ldr         r1, [pc, #0x158]
  00604	e3a00007	 mov         r0, #7
  00608	eb000000	 bl          OEMReadData
  0060c	e58d0008	 str         r0, [sp, #8]
  00610	e59d3008	 ldr         r3, [sp, #8]
  00614	e3530000	 cmp         r3, #0
  00618	1a000003	 bne         |$LN11@GetImageTy|

; 279  :     {
; 280  :         KITLOutputDebugString ("\r\nERROR: Unable to read image signature.\r\n");

  0061c	e59f0164	 ldr         r0, [pc, #0x164]
  00620	eb000000	 bl          KITLOutputDebugString

; 281  :         rval =  BL_IMAGE_TYPE_NOT_FOUND;

  00624	e3a03007	 mov         r3, #7
  00628	e58d3000	 str         r3, [sp]
  0062c		 |$LN11@GetImageTy|

; 282  :     }
; 283  : 
; 284  :     
; 285  :     // The N000FF packet indicates a manifest, which is constructed by Platform 
; 286  :     // Builder when we're downloading multiple .bin files or an .nb0 file.
; 287  :     //
; 288  :     if (!memcmp (g_hdr, "N000FF\x0A", BL_HDRSIG_SIZE))

  0062c	e3a02007	 mov         r2, #7
  00630	e59f114c	 ldr         r1, [pc, #0x14C]
  00634	e59f0124	 ldr         r0, [pc, #0x124]
  00638	eb000000	 bl          memcmp
  0063c	e58d000c	 str         r0, [sp, #0xC]
  00640	e59d300c	 ldr         r3, [sp, #0xC]
  00644	e3530000	 cmp         r3, #0
  00648	1a000004	 bne         |$LN10@GetImageTy|

; 289  :     {
; 290  :         KITLOutputDebugString("\r\nBL_IMAGE_TYPE_MANIFEST\r\n\r\n");

  0064c	e59f012c	 ldr         r0, [pc, #0x12C]
  00650	eb000000	 bl          KITLOutputDebugString

; 291  :         rval =  BL_IMAGE_TYPE_MANIFEST;

  00654	e3a03000	 mov         r3, #0
  00658	e58d3000	 str         r3, [sp]
  0065c	ea000037	 b           |$LN9@GetImageTy|
  00660		 |$LN10@GetImageTy|

; 292  :     }
; 293  :     else if (!memcmp (g_hdr, "X000FF\x0A", BL_HDRSIG_SIZE))

  00660	e3a02007	 mov         r2, #7
  00664	e59f1110	 ldr         r1, [pc, #0x110]
  00668	e59f00f0	 ldr         r0, [pc, #0xF0]
  0066c	eb000000	 bl          memcmp
  00670	e58d0010	 str         r0, [sp, #0x10]
  00674	e59d3010	 ldr         r3, [sp, #0x10]
  00678	e3530000	 cmp         r3, #0
  0067c	1a000004	 bne         |$LN8@GetImageTy|

; 294  :     {
; 295  :         KITLOutputDebugString("\r\nBL_IMAGE_TYPE_MULTIXIP\r\n\r\n");

  00680	e59f00f0	 ldr         r0, [pc, #0xF0]
  00684	eb000000	 bl          KITLOutputDebugString

; 296  :         rval =  BL_IMAGE_TYPE_MULTIXIP;

  00688	e3a03005	 mov         r3, #5
  0068c	e58d3000	 str         r3, [sp]
  00690	ea00002a	 b           |$LN7@GetImageTy|
  00694		 |$LN8@GetImageTy|

; 297  :     }
; 298  :     else if (!memcmp (g_hdr, "B000FF\x0A", BL_HDRSIG_SIZE))

  00694	e3a02007	 mov         r2, #7
  00698	e59f10d4	 ldr         r1, [pc, #0xD4]
  0069c	e59f00bc	 ldr         r0, [pc, #0xBC]
  006a0	eb000000	 bl          memcmp
  006a4	e58d0014	 str         r0, [sp, #0x14]
  006a8	e59d3014	 ldr         r3, [sp, #0x14]
  006ac	e3530000	 cmp         r3, #0
  006b0	1a000004	 bne         |$LN6@GetImageTy|

; 299  :     {
; 300  :         KITLOutputDebugString("\r\nBL_IMAGE_TYPE_BIN\r\n\r\n");

  006b4	e59f00b4	 ldr         r0, [pc, #0xB4]
  006b8	eb000000	 bl          KITLOutputDebugString

; 301  :         rval =  BL_IMAGE_TYPE_BIN;

  006bc	e3a03001	 mov         r3, #1
  006c0	e58d3000	 str         r3, [sp]
  006c4	ea00001d	 b           |$LN5@GetImageTy|
  006c8		 |$LN6@GetImageTy|

; 302  :     }
; 303  :     else if (!memcmp (g_hdr, "S000FF\x0A", BL_HDRSIG_SIZE))

  006c8	e3a02007	 mov         r2, #7
  006cc	e59f1098	 ldr         r1, [pc, #0x98]
  006d0	e59f0088	 ldr         r0, [pc, #0x88]
  006d4	eb000000	 bl          memcmp
  006d8	e58d0018	 str         r0, [sp, #0x18]
  006dc	e59d3018	 ldr         r3, [sp, #0x18]
  006e0	e3530000	 cmp         r3, #0
  006e4	1a000004	 bne         |$LN4@GetImageTy|

; 304  :     {
; 305  :         KITLOutputDebugString("\r\nBL_IMAGE_TYPE_SIGNED_BIN\r\n\r\n");

  006e8	e59f0078	 ldr         r0, [pc, #0x78]
  006ec	eb000000	 bl          KITLOutputDebugString

; 306  :         rval =  BL_IMAGE_TYPE_SIGNED_BIN;

  006f0	e3a03003	 mov         r3, #3
  006f4	e58d3000	 str         r3, [sp]
  006f8	ea000010	 b           |$LN3@GetImageTy|
  006fc		 |$LN4@GetImageTy|

; 307  :     }
; 308  :     else if (!memcmp (g_hdr, "R000FF\x0A", BL_HDRSIG_SIZE))

  006fc	e3a02007	 mov         r2, #7
  00700	e59f105c	 ldr         r1, [pc, #0x5C]
  00704	e59f0054	 ldr         r0, [pc, #0x54]
  00708	eb000000	 bl          memcmp
  0070c	e58d001c	 str         r0, [sp, #0x1C]
  00710	e59d301c	 ldr         r3, [sp, #0x1C]
  00714	e3530000	 cmp         r3, #0
  00718	1a000004	 bne         |$LN2@GetImageTy|

; 309  :     {
; 310  :         KITLOutputDebugString("\r\nBL_IMAGE_TYPE_SIGNED_NB0\r\n\r\n");

  0071c	e59f0038	 ldr         r0, [pc, #0x38]
  00720	eb000000	 bl          KITLOutputDebugString

; 311  :         rval =  BL_IMAGE_TYPE_SIGNED_NB0;

  00724	e3a03004	 mov         r3, #4
  00728	e58d3000	 str         r3, [sp]

; 312  :     }
; 313  :     else

  0072c	ea000003	 b           |$LN1@GetImageTy|
  00730		 |$LN2@GetImageTy|

; 314  :     {
; 315  :         KITLOutputDebugString("\r\nBL_IMAGE_TYPE_UNKNOWN\r\n\r\n");

  00730	e59f0020	 ldr         r0, [pc, #0x20]
  00734	eb000000	 bl          KITLOutputDebugString

; 316  :         rval =  BL_IMAGE_TYPE_UNKNOWN;

  00738	e3a03006	 mov         r3, #6
  0073c	e58d3000	 str         r3, [sp]
  00740		 |$LN1@GetImageTy|
  00740		 |$LN3@GetImageTy|
  00740		 |$LN5@GetImageTy|
  00740		 |$LN7@GetImageTy|
  00740		 |$LN9@GetImageTy|

; 317  :     }
; 318  : 
; 319  :     return rval;  

  00740	e59d3000	 ldr         r3, [sp]
  00744	e58d3004	 str         r3, [sp, #4]

; 320  : }

  00748	e59d0004	 ldr         r0, [sp, #4]
  0074c	e28dd020	 add         sp, sp, #0x20
  00750	e49de004	 ldr         lr, [sp], #4
  00754	e12fff1e	 bx          lr
  00758		 |$LN17@GetImageTy|
  00758		 |$LN18@GetImageTy|
  00758	00000000	 DCD         |??_C@_0BM@DKIOIAMD@?$AN?6BL_IMAGE_TYPE_UNKNOWN?$AN?6?$AN?6?$AA@|
  0075c		 |$LN19@GetImageTy|
  0075c	00000000	 DCD         |??_C@_0BP@KNNCEABF@?$AN?6BL_IMAGE_TYPE_SIGNED_NB0?$AN?6?$AN?6?$AA@|
  00760		 |$LN20@GetImageTy|
  00760	00000000	 DCD         |g_hdr|
  00764		 |$LN21@GetImageTy|
  00764	00000000	 DCD         |??_C@_07LAGBNAEN@R000FF?6?$AA@|
  00768		 |$LN22@GetImageTy|
  00768	00000000	 DCD         |??_C@_0BP@MJFCGNBB@?$AN?6BL_IMAGE_TYPE_SIGNED_BIN?$AN?6?$AN?6?$AA@|
  0076c		 |$LN23@GetImageTy|
  0076c	00000000	 DCD         |??_C@_07HMMLNAND@S000FF?6?$AA@|
  00770		 |$LN24@GetImageTy|
  00770	00000000	 DCD         |??_C@_0BI@HBMHAEFD@?$AN?6BL_IMAGE_TYPE_BIN?$AN?6?$AN?6?$AA@|
  00774		 |$LN25@GetImageTy|
  00774	00000000	 DCD         |??_C@_07MMNKOBGG@B000FF?6?$AA@|
  00778		 |$LN26@GetImageTy|
  00778	00000000	 DCD         |??_C@_0BN@IHLEHBEK@?$AN?6BL_IMAGE_TYPE_MULTIXIP?$AN?6?$AN?6?$AA@|
  0077c		 |$LN27@GetImageTy|
  0077c	00000000	 DCD         |??_C@_07CBKBMMIF@X000FF?6?$AA@|
  00780		 |$LN28@GetImageTy|
  00780	00000000	 DCD         |??_C@_0BN@GCKOHOON@?$AN?6BL_IMAGE_TYPE_MANIFEST?$AN?6?$AN?6?$AA@|
  00784		 |$LN29@GetImageTy|
  00784	00000000	 DCD         |??_C@_07JLHFPECJ@N000FF?6?$AA@|
  00788		 |$LN30@GetImageTy|
  00788	00000000	 DCD         |??_C@_0CL@OKMIEAHJ@?$AN?6ERROR?3?5Unable?5to?5read?5image?5si@|
  0078c		 |$M41151|

			 ENDP  ; |GetImageType|

	EXPORT	|??_C@_0EC@LAKEOKID@?$AN?6ERROR?3?5Download?5manifest?5packe@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DJ@PIPLIHFI@?$AN?6ERROR?3?5Unable?5to?5read?5download@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DG@DBBGHEAG@?$AN?6ERROR?3?5Unable?5to?5read?5download@| [ DATA ] ; `string'

  00028			 AREA	 |.pdata|, PDATA
|$T41173| DCD	|$LN9@CheckImage|
	DCD	0x40004602

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EC@LAKEOKID@?$AN?6ERROR?3?5Download?5manifest?5packe@| DCB 0xd, 0xa
	DCB	"ERROR: Download manifest packet failed checksum verifica"
	DCB	"tion.", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DJ@PIPLIHFI@?$AN?6ERROR?3?5Unable?5to?5read?5download@| DCB 0xd, 0xa
	DCB	"ERROR: Unable to read download manifest information.", 0xd
	DCB	0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DG@DBBGHEAG@?$AN?6ERROR?3?5Unable?5to?5read?5download@| DCB 0xd, 0xa
	DCB	"ERROR: Unable to read download manifest checksum.", 0xd, 0xa
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  0078c			 AREA	 |.text|, CODE, ARM

  0078c		 |CheckImageManifest| PROC

; 324  : {

  0078c		 |$LN9@CheckImage|
  0078c	e52de004	 str         lr, [sp, #-4]!
  00790	e24dd018	 sub         sp, sp, #0x18
  00794		 |$M41170|

; 325  :     DWORD dwRecChk;
; 326  : 
; 327  :     // read the packet checksum.
; 328  :     //
; 329  :     if (!OEMReadData (sizeof (DWORD), (LPBYTE) &dwRecChk))

  00794	e28d1000	 add         r1, sp, #0
  00798	e3a00004	 mov         r0, #4
  0079c	eb000000	 bl          OEMReadData
  007a0	e58d0008	 str         r0, [sp, #8]
  007a4	e59d3008	 ldr         r3, [sp, #8]
  007a8	e3530000	 cmp         r3, #0
  007ac	1a000006	 bne         |$LN4@CheckImage|

; 330  :     {
; 331  :         KITLOutputDebugString("\r\nERROR: Unable to read download manifest checksum.\r\n");

  007b0	e59f00e8	 ldr         r0, [pc, #0xE8]
  007b4	eb000000	 bl          KITLOutputDebugString

; 332  :         HALT (BLERR_MAGIC);

  007b8	e3e00007	 mvn         r0, #7
  007bc	eb000000	 bl          HALT

; 333  :         return FALSE;

  007c0	e3a03000	 mov         r3, #0
  007c4	e58d3004	 str         r3, [sp, #4]
  007c8	ea00002d	 b           |$LN5@CheckImage|
  007cc		 |$LN4@CheckImage|

; 334  :     }
; 335  : 
; 336  :     // read region descriptions (start address and length).
; 337  :     //
; 338  :     if (!OEMReadData (sizeof (DWORD), (LPBYTE) &g_DownloadManifest.dwNumRegions) ||
; 339  :         !OEMReadData ((g_DownloadManifest.dwNumRegions * sizeof(RegionInfo)), (LPBYTE) &g_DownloadManifest.Region[0]))

  007cc	e59f10c4	 ldr         r1, [pc, #0xC4]
  007d0	e3a00004	 mov         r0, #4
  007d4	eb000000	 bl          OEMReadData
  007d8	e58d000c	 str         r0, [sp, #0xC]
  007dc	e59d300c	 ldr         r3, [sp, #0xC]
  007e0	e3530000	 cmp         r3, #0
  007e4	0a00000a	 beq         |$LN2@CheckImage|
  007e8	e59f30a8	 ldr         r3, [pc, #0xA8]
  007ec	e2831004	 add         r1, r3, #4
  007f0	e59f30a0	 ldr         r3, [pc, #0xA0]
  007f4	e5932000	 ldr         r2, [r3]
  007f8	e3a03f43	 mov         r3, #0x43, 30
  007fc	e0000392	 mul         r0, r2, r3
  00800	eb000000	 bl          OEMReadData
  00804	e58d0010	 str         r0, [sp, #0x10]
  00808	e59d3010	 ldr         r3, [sp, #0x10]
  0080c	e3530000	 cmp         r3, #0
  00810	1a000006	 bne         |$LN3@CheckImage|
  00814		 |$LN2@CheckImage|

; 340  :     {
; 341  :         KITLOutputDebugString("\r\nERROR: Unable to read download manifest information.\r\n");

  00814	e59f0080	 ldr         r0, [pc, #0x80]
  00818	eb000000	 bl          KITLOutputDebugString

; 342  :         HALT (BLERR_MAGIC);

  0081c	e3e00007	 mvn         r0, #7
  00820	eb000000	 bl          HALT

; 343  :         return FALSE;

  00824	e3a03000	 mov         r3, #0
  00828	e58d3004	 str         r3, [sp, #4]
  0082c	ea000014	 b           |$LN5@CheckImage|
  00830		 |$LN3@CheckImage|

; 344  :     }
; 345  : 
; 346  :     // verify the packet checksum.
; 347  :     //
; 348  :     if (!VerifyChecksum((g_DownloadManifest.dwNumRegions * sizeof(RegionInfo)), (LPBYTE) &g_DownloadManifest.Region[0], dwRecChk))

  00830	e59d2000	 ldr         r2, [sp]
  00834	e59f305c	 ldr         r3, [pc, #0x5C]
  00838	e2831004	 add         r1, r3, #4
  0083c	e59f3054	 ldr         r3, [pc, #0x54]
  00840	e593e000	 ldr         lr, [r3]
  00844	e3a03f43	 mov         r3, #0x43, 30
  00848	e000039e	 mul         r0, lr, r3
  0084c	eb000000	 bl          VerifyChecksum
  00850	e58d0014	 str         r0, [sp, #0x14]
  00854	e59d3014	 ldr         r3, [sp, #0x14]
  00858	e3530000	 cmp         r3, #0
  0085c	1a000006	 bne         |$LN1@CheckImage|

; 349  :     {
; 350  :         KITLOutputDebugString ("\r\nERROR: Download manifest packet failed checksum verification.\r\n");

  00860	e59f002c	 ldr         r0, [pc, #0x2C]
  00864	eb000000	 bl          KITLOutputDebugString

; 351  :         HALT (BLERR_CHECKSUM);

  00868	e3e00006	 mvn         r0, #6
  0086c	eb000000	 bl          HALT

; 352  :         return FALSE;

  00870	e3a03000	 mov         r3, #0
  00874	e58d3004	 str         r3, [sp, #4]
  00878	ea000001	 b           |$LN5@CheckImage|
  0087c		 |$LN1@CheckImage|

; 353  :     }
; 354  : 
; 355  :     return TRUE;

  0087c	e3a03001	 mov         r3, #1
  00880	e58d3004	 str         r3, [sp, #4]
  00884		 |$LN5@CheckImage|

; 356  : }

  00884	e59d0004	 ldr         r0, [sp, #4]
  00888	e28dd018	 add         sp, sp, #0x18
  0088c	e49de004	 ldr         lr, [sp], #4
  00890	e12fff1e	 bx          lr
  00894		 |$LN10@CheckImage|
  00894		 |$LN11@CheckImage|
  00894	00000000	 DCD         |??_C@_0EC@LAKEOKID@?$AN?6ERROR?3?5Download?5manifest?5packe@|
  00898		 |$LN12@CheckImage|
  00898	00000000	 DCD         |g_DownloadManifest|
  0089c		 |$LN13@CheckImage|
  0089c	00000000	 DCD         |??_C@_0DJ@PIPLIHFI@?$AN?6ERROR?3?5Unable?5to?5read?5download@|
  008a0		 |$LN14@CheckImage|
  008a0	00000000	 DCD         |??_C@_0DG@DBBGHEAG@?$AN?6ERROR?3?5Unable?5to?5read?5download@|
  008a4		 |$M41171|

			 ENDP  ; |CheckImageManifest|

	EXPORT	|??_C@_0DJ@LFHEGALA@ERROR?3?5Checksum?5failure?5?$CIexpecte@| [ DATA ] ; `string'

  00030			 AREA	 |.pdata|, PDATA
|$T41186| DCD	|$LN11@VerifyChec|
	DCD	0x40003104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DJ@LFHEGALA@ERROR?3?5Checksum?5failure?5?$CIexpecte@| DCB "ERROR:"
	DCB	" Checksum failure (expected=0x%x  computed=0x%x)", 0xd, 0xa
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  008a4			 AREA	 |.text|, CODE, ARM

  008a4		 |VerifyChecksum| PROC

; 258  : {

  008a4		 |$LN11@VerifyChec|
  008a4	e1a0c00d	 mov         r12, sp
  008a8	e92d0007	 stmdb       sp!, {r0 - r2}
  008ac	e92d5000	 stmdb       sp!, {r12, lr}
  008b0	e24dd010	 sub         sp, sp, #0x10
  008b4		 |$M41183|

; 259  :     // Check the CRC
; 260  :     DWORD dwCRC = 0;

  008b4	e3a03000	 mov         r3, #0
  008b8	e58d3004	 str         r3, [sp, #4]

; 261  :     DWORD i;
; 262  :     for (i = 0; i < cbRecord; i++)

  008bc	e3a03000	 mov         r3, #0
  008c0	e58d3000	 str         r3, [sp]
  008c4	ea000002	 b           |$LN4@VerifyChec|
  008c8		 |$LN3@VerifyChec|
  008c8	e59d3000	 ldr         r3, [sp]
  008cc	e2833001	 add         r3, r3, #1
  008d0	e58d3000	 str         r3, [sp]
  008d4		 |$LN4@VerifyChec|
  008d4	e59d2000	 ldr         r2, [sp]
  008d8	e59d3018	 ldr         r3, [sp, #0x18]
  008dc	e1520003	 cmp         r2, r3
  008e0	2a000008	 bcs         |$LN2@VerifyChec|

; 263  :         dwCRC += *pbRecord ++;

  008e4	e59d301c	 ldr         r3, [sp, #0x1C]
  008e8	e5d32000	 ldrb        r2, [r3]
  008ec	e59d3004	 ldr         r3, [sp, #4]
  008f0	e0833002	 add         r3, r3, r2
  008f4	e58d3004	 str         r3, [sp, #4]
  008f8	e59d301c	 ldr         r3, [sp, #0x1C]
  008fc	e2833001	 add         r3, r3, #1
  00900	e58d301c	 str         r3, [sp, #0x1C]
  00904	eaffffef	 b           |$LN3@VerifyChec|
  00908		 |$LN2@VerifyChec|

; 264  : 
; 265  :     if (dwCRC != dwChksum)

  00908	e59d2004	 ldr         r2, [sp, #4]
  0090c	e59d3020	 ldr         r3, [sp, #0x20]
  00910	e1520003	 cmp         r2, r3
  00914	0a000003	 beq         |$LN1@VerifyChec|

; 266  :         KITLOutputDebugString ("ERROR: Checksum failure (expected=0x%x  computed=0x%x)\r\n", dwChksum, dwCRC);

  00918	e59d2004	 ldr         r2, [sp, #4]
  0091c	e59d1020	 ldr         r1, [sp, #0x20]
  00920	e59f003c	 ldr         r0, [pc, #0x3C]
  00924	eb000000	 bl          KITLOutputDebugString
  00928		 |$LN1@VerifyChec|

; 267  : 
; 268  :     return (dwCRC == dwChksum);

  00928	e59d2004	 ldr         r2, [sp, #4]
  0092c	e59d3020	 ldr         r3, [sp, #0x20]
  00930	e1520003	 cmp         r2, r3
  00934	1a000002	 bne         |$LN7@VerifyChec|
  00938	e3a03001	 mov         r3, #1
  0093c	e58d300c	 str         r3, [sp, #0xC]
  00940	ea000001	 b           |$LN8@VerifyChec|
  00944		 |$LN7@VerifyChec|
  00944	e3a03000	 mov         r3, #0
  00948	e58d300c	 str         r3, [sp, #0xC]
  0094c		 |$LN8@VerifyChec|
  0094c	e59d300c	 ldr         r3, [sp, #0xC]
  00950	e58d3008	 str         r3, [sp, #8]

; 269  : }

  00954	e59d0008	 ldr         r0, [sp, #8]
  00958	e28dd010	 add         sp, sp, #0x10
  0095c	e89d6000	 ldmia       sp, {sp, lr}
  00960	e12fff1e	 bx          lr
  00964		 |$LN12@VerifyChec|
  00964		 |$LN13@VerifyChec|
  00964	00000000	 DCD         |??_C@_0DJ@LFHEGALA@ERROR?3?5Checksum?5failure?5?$CIexpecte@|
  00968		 |$M41184|

			 ENDP  ; |VerifyChecksum|

	EXPORT	|??_C@_0CN@MMIJIGEN@Secure?5Boot?5Loader?5includes?5?$CFd?5p@| [ DATA ] ; `string'
	IMPORT	|g_wNumPublicKeys|
	IMPORT	|g_rgdwKeyLengths|
	IMPORT	|g_rgpbPublicKeys|

  01a3b			 AREA	 |.bss|, NOINIT
|g_keyData| %	0x10

  00038			 AREA	 |.pdata|, PDATA
|$T41194| DCD	|$LN5@InitSecure|
	DCD	0x40002502

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CN@MMIJIGEN@Secure?5Boot?5Loader?5includes?5?$CFd?5p@| DCB "Secur"
	DCB	"e Boot Loader includes %d public keys", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  00968			 AREA	 |.text|, CODE, ARM

  00968		 |InitSecureBootLoader| PROC

; 471  : {

  00968		 |$LN5@InitSecure|
  00968	e52de004	 str         lr, [sp, #-4]!
  0096c	e24dd004	 sub         sp, sp, #4
  00970		 |$M41191|

; 472  :     // Initialize public keys for signature validation
; 473  :     g_keyData.rgpbPublicKeys  = g_rgpbPublicKeys;       // pointer to array of public keys        

  00970	e59f2080	 ldr         r2, [pc, #0x80]
  00974	e59f3070	 ldr         r3, [pc, #0x70]
  00978	e5832000	 str         r2, [r3]

; 474  :     g_keyData.rgdwKeyLengths  = g_rgdwKeyLengths;       // pointer to array of public key lengths 

  0097c	e59f2070	 ldr         r2, [pc, #0x70]
  00980	e59f3064	 ldr         r3, [pc, #0x64]
  00984	e5832004	 str         r2, [r3, #4]

; 475  :     g_keyData.wNumPublicKeys  = g_wNumPublicKeys;       // number of public keys in rgpbPublicKeys

  00988	e59f3060	 ldr         r3, [pc, #0x60]
  0098c	e1d320b0	 ldrh        r2, [r3]
  00990	e59f3054	 ldr         r3, [pc, #0x54]
  00994	e1c320b8	 strh        r2, [r3, #8]

; 476  :     g_keyData.wMinSearchIndex = 0;                      // starting array index of search         

  00998	e59f204c	 ldr         r2, [pc, #0x4C]
  0099c	e3a03000	 mov         r3, #0
  009a0	e1c230ba	 strh        r3, [r2, #0xA]

; 477  :     g_keyData.wMaxSearchIndex = g_wNumPublicKeys - 1;   // ending array index of search           

  009a4	e59f3044	 ldr         r3, [pc, #0x44]
  009a8	e1d330b0	 ldrh        r3, [r3]
  009ac	e2433001	 sub         r3, r3, #1
  009b0	e1a02803	 mov         r2, r3, lsl #16
  009b4	e1a02822	 mov         r2, r2, lsr #16
  009b8	e59f302c	 ldr         r3, [pc, #0x2C]
  009bc	e1c320bc	 strh        r2, [r3, #0xC]

; 478  : 
; 479  :     KITLOutputDebugString("Secure Boot Loader includes %d public keys\r\n",
; 480  :         g_keyData.wNumPublicKeys);

  009c0	e59f3024	 ldr         r3, [pc, #0x24]
  009c4	e1d310b8	 ldrh        r1, [r3, #8]
  009c8	e59f0018	 ldr         r0, [pc, #0x18]
  009cc	eb000000	 bl          KITLOutputDebugString

; 481  :         
; 482  :     return TRUE;

  009d0	e3a03001	 mov         r3, #1
  009d4	e58d3000	 str         r3, [sp]

; 483  : }

  009d8	e59d0000	 ldr         r0, [sp]
  009dc	e28dd004	 add         sp, sp, #4
  009e0	e49de004	 ldr         lr, [sp], #4
  009e4	e12fff1e	 bx          lr
  009e8		 |$LN6@InitSecure|
  009e8		 |$LN7@InitSecure|
  009e8	00000000	 DCD         |??_C@_0CN@MMIJIGEN@Secure?5Boot?5Loader?5includes?5?$CFd?5p@|
  009ec		 |$LN8@InitSecure|
  009ec	00000000	 DCD         |g_keyData|
  009f0		 |$LN9@InitSecure|
  009f0	00000000	 DCD         |g_wNumPublicKeys|
  009f4		 |$LN10@InitSecure|
  009f4	00000000	 DCD         |g_rgdwKeyLengths|
  009f8		 |$LN11@InitSecure|
  009f8	00000000	 DCD         |g_rgpbPublicKeys|
  009fc		 |$M41192|

			 ENDP  ; |InitSecureBootLoader|

	EXPORT	|??_C@_0DL@DCHMDHHD@ImageStart?5?$DN?50x?$CFx?0?5ImageLength?5?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BI@KDBHNKIE@Downloaded?5?$CFd?5records?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0EF@CGJFHBCJ@?5?5?5?5?5?5?5?5?5?5?5?5?$CK?5?5?5This?5image?5was?5s@| [ DATA ] ; `string'
	EXPORT	|??_C@_0EF@DMPBGGIN@?5?5?5?5?5?5?5?5?5?5?5?5?$CK?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0EF@KMGGNDPA@?5?5?5?5?5?5?5?5?5?5?5?5?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@| [ DATA ] ; `string'
	EXPORT	|??_C@_02PCIJFNDE@?$AN?6?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_0EL@FPJHPAOD@ERROR?3?5Signature?5validation?5fail@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DI@HDMNFPHA@ERROR?3?5Failed?5to?5read?5signature?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BD@PHLGNLDI@rom_offset?$DN0x?$CFx?4?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CI@JBLMDHKB@dwChunksRemaining?5?$DN?5?$CFd?0?5offset?5?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DJ@IIBDPHPA@Read?50x?$CFx?5bytes?5into?5cache?3?50x?$CFx@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CK@FKELKNBC@ERROR?3?5Data?5packet?5?$CFd?5corrupted?0@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CK@MHLPBKBP@Reached?5last?5record?5of?5signed?5?4b@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KG@EIOKEHIP@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_0EH@FMDCFBLP@?5?$DM?$DO?5Record?5?$FL?5?$CFd?5?$FN?5dwRecAddr?5?$DN?50x@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DG@FCKPNIAC@ERROR?3?5Failed?5to?5read?5?4bin?5recor@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DI@NMKBLNAC@ERROR?3?5Failed?5to?5read?5signed?5pac@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CM@HDMMPKFG@?5?$DM?$DO?5Record?5chunk?5?$CIdwChunksRemain@| [ DATA ] ; `string'
	EXPORT	|??_C@_0EO@LDJAOKIA@?5?$DM?$DO?5Packet?5?$FL?5?$CFd?5?$FN?5dwSignedDataLe@| [ DATA ] ; `string'
	EXPORT	|??_C@_0FD@KBPPNIMB@?$AN?6?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_0EB@CGKACAF@ERROR?3?5Failed?5to?5read?5random?5see@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BP@EOFEMPOO@Invalid?5flash?5address?1length?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CC@DNECAMLM@?$CBOEMVERIFYMEMORY?3?5Invalid?5image?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CE@NKAMCDHO@Unable?5to?5read?5image?5start?1lengt@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|OEMFinishEraseFlash|
	IMPORT	|OEMContinueEraseFlash|
	IMPORT	|OEMShowProgress|
	IMPORT	|SBL_VerifyPacket|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|OEMStartEraseFlash|
	IMPORT	|OEMIsFlashAddr|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|memcpy|
	IMPORT	|__security_check_cookie|

  01a4b			 AREA	 |.bss|, NOINIT
|g_rgpbSignature| % 0x80

  00040			 AREA	 |.pdata|, PDATA
|$T41225| DCD	|$LN49@DownloadSi|
	DCD	0xc002db04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DL@DCHMDHHD@ImageStart?5?$DN?50x?$CFx?0?5ImageLength?5?$DN@| DCB "I"
	DCB	"mageStart = 0x%x, ImageLength = 0x%x, LaunchAddr = 0x%x", 0xd
	DCB	0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BI@KDBHNKIE@Downloaded?5?$CFd?5records?$AN?6?$AA@| DCB "Downloade"
	DCB	"d %d records", 0xd, 0xa, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EF@CGJFHBCJ@?5?5?5?5?5?5?5?5?5?5?5?5?$CK?5?5?5This?5image?5was?5s@| DCB " "
	DCB	"           *   This image was signed with a valid privat"
	DCB	"e key   *", 0xd, 0xa, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EF@DMPBGGIN@?5?5?5?5?5?5?5?5?5?5?5?5?$CK?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@| DCB " "
	DCB	"           *                                            "
	DCB	"        *", 0xd, 0xa, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EF@KMGGNDPA@?5?5?5?5?5?5?5?5?5?5?5?5?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@| DCB " "
	DCB	"           *********************************************"
	DCB	"*********", 0xd, 0xa, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_02PCIJFNDE@?$AN?6?$AA@| DCB 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EL@FPJHPAOD@ERROR?3?5Signature?5validation?5fail@| DCB "ERROR: Si"
	DCB	"gnature validation failed for packet %d with error 0x%x,"
	DCB	" ABORT!", 0xd, 0xa, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DI@HDMNFPHA@ERROR?3?5Failed?5to?5read?5signature?5@| DCB "ERROR: "
	DCB	"Failed to read signature for packet %d, ABORT!", 0xd, 0xa
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BD@PHLGNLDI@rom_offset?$DN0x?$CFx?4?$AN?6?$AA@| DCB "rom_offset=0"
	DCB	"x%x.", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CI@JBLMDHKB@dwChunksRemaining?5?$DN?5?$CFd?0?5offset?5?$DN@| DCB "d"
	DCB	"wChunksRemaining = %d, offset = 0x%x", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DJ@IIBDPHPA@Read?50x?$CFx?5bytes?5into?5cache?3?50x?$CFx@| DCB "R"
	DCB	"ead 0x%x bytes into cache: 0x%x (final address: 0x%x)", 0xd
	DCB	0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CK@FKELKNBC@ERROR?3?5Data?5packet?5?$CFd?5corrupted?0@| DCB "ERRO"
	DCB	"R: Data packet %d corrupted, ABORT!", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CK@MHLPBKBP@Reached?5last?5record?5of?5signed?5?4b@| DCB "Reached"
	DCB	" last record of signed .bin file", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KG@EIOKEHIP@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O"
	DCB	0x0, "N", 0x0, "\\", 0x0, "B", 0x0, "O", 0x0, "O", 0x0, "T"
	DCB	0x0, "\\", 0x0, "B", 0x0, "L", 0x0, "C", 0x0, "O", 0x0, "M"
	DCB	0x0, "M", 0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "B", 0x0, "L"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "C", 0x0, "U", 0x0, "R"
	DCB	0x0, "E", 0x0, "\\", 0x0, ".", 0x0, ".", 0x0, "\\", 0x0, "b"
	DCB	0x0, "l", 0x0, "c", 0x0, "o", 0x0, "m", 0x0, "m", 0x0, "o"
	DCB	0x0, "n", 0x0, ".", 0x0, "c", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EH@FMDCFBLP@?5?$DM?$DO?5Record?5?$FL?5?$CFd?5?$FN?5dwRecAddr?5?$DN?50x@| DCB " "
	DCB	"<> Record [ %d ] dwRecAddr = 0x%x, dwRecLen = 0x%x, dwRe"
	DCB	"cChk = 0x%x", 0xd, 0xa, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DG@FCKPNIAC@ERROR?3?5Failed?5to?5read?5?4bin?5recor@| DCB "ERROR:"
	DCB	" Failed to read .bin record header %d, ABORT!", 0xd, 0xa
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DI@NMKBLNAC@ERROR?3?5Failed?5to?5read?5signed?5pac@| DCB "ERROR: "
	DCB	"Failed to read signed packet header %d, ABORT!", 0xd, 0xa
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CM@HDMMPKFG@?5?$DM?$DO?5Record?5chunk?5?$CIdwChunksRemain@| DCB " "
	DCB	"<> Record chunk (dwChunksRemaining = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EO@LDJAOKIA@?5?$DM?$DO?5Packet?5?$FL?5?$CFd?5?$FN?5dwSignedDataLe@| DCB " "
	DCB	"<> Packet [ %d ] dwSignedDataLength = 0x%x, dwSigLen = 0"
	DCB	"x%x, bFlags = 0x%x", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0FD@KBPPNIMB@?$AN?6?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@| DCB 0xd
	DCB	0xa, "---------------------------------------------------"
	DCB	"---------------------------", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EB@CGKACAF@ERROR?3?5Failed?5to?5read?5random?5see@| DCB "ERROR: F"
	DCB	"ailed to read random seed at start of signed .bin file", 0xd
	DCB	0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BP@EOFEMPOO@Invalid?5flash?5address?1length?$AN?6?$AA@| DCB "Inva"
	DCB	"lid flash address/length", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CC@DNECAMLM@?$CBOEMVERIFYMEMORY?3?5Invalid?5image?$AN@| DCB "!OEM"
	DCB	"VERIFYMEMORY: Invalid image", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CE@NKAMCDHO@Unable?5to?5read?5image?5start?1lengt@| DCB "Unable t"
	DCB	"o read image start/length", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T41221| DCD	0xffffff54
; Function compile flags: /Odtp

  009fc			 AREA	 |.text|, CODE, ARM

  009fc	00000000	 DCD         |__GSHandlerCheck|
  00a00	00000000	 DCD         |$T41221|

  00a04		 |DownloadSignedBin| PROC

; 489  : {

  00a04		 |$LN49@DownloadSi|
  00a04	e1a0c00d	 mov         r12, sp
  00a08	e92d0007	 stmdb       sp!, {r0 - r2}
  00a0c	e92d5000	 stmdb       sp!, {r12, lr}
  00a10	e24ddf4f	 sub         sp, sp, #0x4F, 30
  00a14		 |$M41222|
  00a14	e59f3b50	 ldr         r3, [pc, #0xB50]
  00a18	e5933000	 ldr         r3, [r3]
  00a1c	e58d30a4	 str         r3, [sp, #0xA4]

; 490  :     RegionInfo *pCurDownloadFile;
; 491  :     BOOL        fIsFlash = FALSE;

  00a20	e3a03000	 mov         r3, #0
  00a24	e58d3070	 str         r3, [sp, #0x70]

; 492  :     LPBYTE      lpDest = NULL;

  00a28	e3a03000	 mov         r3, #0
  00a2c	e58d3058	 str         r3, [sp, #0x58]

; 493  :     DWORD       dwImageStart, dwImageLength;
; 494  :     DWORD       dwSignedDataLength, dwSigLength;
; 495  :     BYTE        bFlags;
; 496  :     DWORD       dwRecNum = 0;

  00a30	e3a03000	 mov         r3, #0
  00a34	e58d3094	 str         r3, [sp, #0x94]

; 497  :     DWORD       dwRecAddr, dwRecLen, dwRecChk;
; 498  :     DWORD       dwPacketNum = 1;

  00a38	e3a03001	 mov         r3, #1
  00a3c	e58d3074	 str         r3, [sp, #0x74]

; 499  :     DWORD       dwChunksRemaining = 0;

  00a40	e3a03000	 mov         r3, #0
  00a44	e58d3064	 str         r3, [sp, #0x64]

; 500  :     DWORD       dwChunkOffset = 0;

  00a48	e3a03000	 mov         r3, #0
  00a4c	e58d3080	 str         r3, [sp, #0x80]

; 501  :     HRESULT     hr;
; 502  :     PACKETDATA  packetData;
; 503  : 
; 504  :     g_bBINDownload = TRUE;

  00a50	e59f2b10	 ldr         r2, [pc, #0xB10]
  00a54	e3a03001	 mov         r3, #1
  00a58	e5c23000	 strb        r3, [r2]

; 505  : 
; 506  : 
; 507  :     if (!OEMReadData (sizeof (DWORD), (LPBYTE) &dwImageStart)   ||
; 508  :         !OEMReadData (sizeof (DWORD), (LPBYTE) &dwImageLength))

  00a5c	e28d105c	 add         r1, sp, #0x5C
  00a60	e3a00004	 mov         r0, #4
  00a64	eb000000	 bl          OEMReadData
  00a68	e58d00b8	 str         r0, [sp, #0xB8]
  00a6c	e59d30b8	 ldr         r3, [sp, #0xB8]
  00a70	e3530000	 cmp         r3, #0
  00a74	0a000006	 beq         |$LN33@DownloadSi|
  00a78	e28d1084	 add         r1, sp, #0x84
  00a7c	e3a00004	 mov         r0, #4
  00a80	eb000000	 bl          OEMReadData
  00a84	e58d00bc	 str         r0, [sp, #0xBC]
  00a88	e59d30bc	 ldr         r3, [sp, #0xBC]
  00a8c	e3530000	 cmp         r3, #0
  00a90	1a000008	 bne         |$LN34@DownloadSi|
  00a94		 |$LN33@DownloadSi|

; 509  :     {
; 510  :         KITLOutputDebugString ("Unable to read image start/length\r\n");

  00a94	e59f0ac8	 ldr         r0, [pc, #0xAC8]
  00a98	eb000000	 bl          KITLOutputDebugString

; 511  :         HALT (BLERR_MAGIC);

  00a9c	e3e00007	 mvn         r0, #7
  00aa0	eb000000	 bl          HALT

; 512  :         return (FALSE);

  00aa4	e59d00a4	 ldr         r0, [sp, #0xA4]
  00aa8	eb000000	 bl          __security_check_cookie
  00aac	e3a03000	 mov         r3, #0
  00ab0	e58d30a8	 str         r3, [sp, #0xA8]
  00ab4	ea000284	 b           |$LN35@DownloadSi|
  00ab8		 |$LN34@DownloadSi|

; 513  :     }
; 514  : 
; 515  : 
; 516  :     // If Platform Builder didn't provide a manifest (i.e., we're
; 517  :     // only downloading a single .bin file), manufacture a manifest so we
; 518  :     // can notify the OEM.
; 519  :     //
; 520  :     if (!g_DownloadManifest.dwNumRegions)

  00ab8	e59f3a34	 ldr         r3, [pc, #0xA34]
  00abc	e5933000	 ldr         r3, [r3]
  00ac0	e3530000	 cmp         r3, #0
  00ac4	1a000008	 bne         |$LN32@DownloadSi|

; 521  :     {
; 522  :         g_DownloadManifest.dwNumRegions             = 1;

  00ac8	e59f2a24	 ldr         r2, [pc, #0xA24]
  00acc	e3a03001	 mov         r3, #1
  00ad0	e5823000	 str         r3, [r2]

; 523  :         g_DownloadManifest.Region[0].dwRegionStart  = dwImageStart;

  00ad4	e59d205c	 ldr         r2, [sp, #0x5C]
  00ad8	e59f3a14	 ldr         r3, [pc, #0xA14]
  00adc	e5832004	 str         r2, [r3, #4]

; 524  :         g_DownloadManifest.Region[0].dwRegionLength = dwImageLength;

  00ae0	e59d2084	 ldr         r2, [sp, #0x84]
  00ae4	e59f3a08	 ldr         r3, [pc, #0xA08]
  00ae8	e5832008	 str         r2, [r3, #8]
  00aec		 |$LN32@DownloadSi|

; 525  :     }
; 526  : 
; 527  :     // Provide the download manifest to the OEM.
; 528  :     //
; 529  :     if (!g_fOEMNotified && g_pOEMMultiBINNotify)

  00aec	e59f3a68	 ldr         r3, [pc, #0xA68]
  00af0	e5933000	 ldr         r3, [r3]
  00af4	e3530000	 cmp         r3, #0
  00af8	1a00000b	 bne         |$LN31@DownloadSi|
  00afc	e59f3a5c	 ldr         r3, [pc, #0xA5C]
  00b00	e5933000	 ldr         r3, [r3]
  00b04	e3530000	 cmp         r3, #0
  00b08	0a000007	 beq         |$LN31@DownloadSi|

; 530  :     {
; 531  :         g_pOEMMultiBINNotify((PDownloadManifest)&g_DownloadManifest);

  00b0c	e59f09e0	 ldr         r0, [pc, #0x9E0]
  00b10	e59f3a48	 ldr         r3, [pc, #0xA48]
  00b14	e5933000	 ldr         r3, [r3]
  00b18	e1a0e00f	 mov         lr, pc
  00b1c	e12fff13	 bx          r3

; 532  :         g_fOEMNotified = TRUE;

  00b20	e59f2a34	 ldr         r2, [pc, #0xA34]
  00b24	e3a03001	 mov         r3, #1
  00b28	e5823000	 str         r3, [r2]
  00b2c		 |$LN31@DownloadSi|

; 533  :     }
; 534  : 
; 535  : 
; 536  :     // Locate the current download manifest entry (current download file).
; 537  :     //
; 538  :     pCurDownloadFile = &g_DownloadManifest.Region[g_DownloadManifest.dwNumRegions - g_downloadFilesRemaining];

  00b2c	e59f3a24	 ldr         r3, [pc, #0xA24]
  00b30	e5d32000	 ldrb        r2, [r3]
  00b34	e59f39b8	 ldr         r3, [pc, #0x9B8]
  00b38	e5933000	 ldr         r3, [r3]
  00b3c	e0431002	 sub         r1, r3, r2
  00b40	e3a03f43	 mov         r3, #0x43, 30
  00b44	e0020391	 mul         r2, r1, r3
  00b48	e59f39a4	 ldr         r3, [pc, #0x9A4]
  00b4c	e2833004	 add         r3, r3, #4
  00b50	e0833002	 add         r3, r3, r2
  00b54	e58d3090	 str         r3, [sp, #0x90]

; 539  : 
; 540  :     // give the OEM a chance to verify memory
; 541  :     if (g_pOEMVerifyMemory && !g_pOEMVerifyMemory (pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionLength))

  00b58	e59f39f4	 ldr         r3, [pc, #0x9F4]
  00b5c	e5933000	 ldr         r3, [r3]
  00b60	e3530000	 cmp         r3, #0
  00b64	0a000015	 beq         |$LN30@DownloadSi|
  00b68	e59d3090	 ldr         r3, [sp, #0x90]
  00b6c	e2833004	 add         r3, r3, #4
  00b70	e5931000	 ldr         r1, [r3]
  00b74	e59d3090	 ldr         r3, [sp, #0x90]
  00b78	e5930000	 ldr         r0, [r3]
  00b7c	e59f39d0	 ldr         r3, [pc, #0x9D0]
  00b80	e5933000	 ldr         r3, [r3]
  00b84	e1a0e00f	 mov         lr, pc
  00b88	e12fff13	 bx          r3
  00b8c	e58d00c0	 str         r0, [sp, #0xC0]
  00b90	e59d30c0	 ldr         r3, [sp, #0xC0]
  00b94	e3530000	 cmp         r3, #0
  00b98	1a000008	 bne         |$LN30@DownloadSi|

; 542  :     {
; 543  :         KITLOutputDebugString ("!OEMVERIFYMEMORY: Invalid image\r\n");

  00b9c	e59f09ac	 ldr         r0, [pc, #0x9AC]
  00ba0	eb000000	 bl          KITLOutputDebugString

; 544  :         HALT (BLERR_OEMVERIFY);

  00ba4	e3e00008	 mvn         r0, #8
  00ba8	eb000000	 bl          HALT

; 545  :         return (FALSE);

  00bac	e59d00a4	 ldr         r0, [sp, #0xA4]
  00bb0	eb000000	 bl          __security_check_cookie
  00bb4	e3a03000	 mov         r3, #0
  00bb8	e58d30a8	 str         r3, [sp, #0xA8]
  00bbc	ea000242	 b           |$LN35@DownloadSi|
  00bc0		 |$LN30@DownloadSi|

; 546  :     }
; 547  : 
; 548  : #ifdef DEBUG
; 549  :     // Clearing memory ensures no garbage between sparse .bin records, so that 
; 550  :     // our post-download checksum will be accurate.
; 551  :     memset( (LPVOID) OEMMapMemAddr(pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionStart),
; 552  :                 0, pCurDownloadFile->dwRegionLength );

  00bc0	e59d3090	 ldr         r3, [sp, #0x90]
  00bc4	e5931000	 ldr         r1, [r3]
  00bc8	e59d3090	 ldr         r3, [sp, #0x90]
  00bcc	e5930000	 ldr         r0, [r3]
  00bd0	eb000000	 bl          OEMMapMemAddr
  00bd4	e58d00c4	 str         r0, [sp, #0xC4]
  00bd8	e59d3090	 ldr         r3, [sp, #0x90]
  00bdc	e2833004	 add         r3, r3, #4
  00be0	e5932000	 ldr         r2, [r3]
  00be4	e3a01000	 mov         r1, #0
  00be8	e59d00c4	 ldr         r0, [sp, #0xC4]
  00bec	eb000000	 bl          memset

; 553  : #endif
; 554  : 
; 555  :     // Check for flash image. Start erasing if it is.
; 556  :     // This is risky iff:
; 557  :     //      We're downloading the bootloader
; 558  :     //      OEM has implemented OEMStartEraseFlash()/OEMContinueEraseFlash()
; 559  :     //      Download fails (e.g. image has been tampered with)
; 560  :     //
; 561  :     // In this scenario only, the device will be unbootable and require
; 562  :     // JTAG recovery.
; 563  :     //
; 564  :     // The OEM should implement the flash functions to skip erase if the image
; 565  :     // is a bootloader (i.e. defer erase until OEMFinishEraseFlash()). 
; 566  :     // That prevents bricking the device.  
; 567  :     //
; 568  :     // It's safe to erase flash and/or flush RAM to flash when download the OS.
; 569  :     // In fact this improves download speed, and lets you download images
; 570  :     // much larger than available RAM.
; 571  :     if ((fIsFlash = OEMIsFlashAddr (pCurDownloadFile->dwRegionStart)) 
; 572  :         && !OEMStartEraseFlash (pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionLength))

  00bf0	e59d3090	 ldr         r3, [sp, #0x90]
  00bf4	e5930000	 ldr         r0, [r3]
  00bf8	eb000000	 bl          OEMIsFlashAddr
  00bfc	e58d00c8	 str         r0, [sp, #0xC8]
  00c00	e59d30c8	 ldr         r3, [sp, #0xC8]
  00c04	e58d3070	 str         r3, [sp, #0x70]
  00c08	e59d3070	 ldr         r3, [sp, #0x70]
  00c0c	e3530000	 cmp         r3, #0
  00c10	0a000012	 beq         |$LN29@DownloadSi|
  00c14	e59d3090	 ldr         r3, [sp, #0x90]
  00c18	e2833004	 add         r3, r3, #4
  00c1c	e5931000	 ldr         r1, [r3]
  00c20	e59d3090	 ldr         r3, [sp, #0x90]
  00c24	e5930000	 ldr         r0, [r3]
  00c28	eb000000	 bl          OEMStartEraseFlash
  00c2c	e58d00cc	 str         r0, [sp, #0xCC]
  00c30	e59d30cc	 ldr         r3, [sp, #0xCC]
  00c34	e3530000	 cmp         r3, #0
  00c38	1a000008	 bne         |$LN29@DownloadSi|

; 573  :     {
; 574  :         KITLOutputDebugString ("Invalid flash address/length\r\n");

  00c3c	e59f0908	 ldr         r0, [pc, #0x908]
  00c40	eb000000	 bl          KITLOutputDebugString

; 575  :         HALT (BLERR_FLASHADDR);

  00c44	e3e00009	 mvn         r0, #9
  00c48	eb000000	 bl          HALT

; 576  :         return (FALSE);

  00c4c	e59d00a4	 ldr         r0, [sp, #0xA4]
  00c50	eb000000	 bl          __security_check_cookie
  00c54	e3a03000	 mov         r3, #0
  00c58	e58d30a8	 str         r3, [sp, #0xA8]
  00c5c	ea00021a	 b           |$LN35@DownloadSi|
  00c60		 |$LN29@DownloadSi|

; 577  :     }
; 578  : 
; 579  :     //------------------------------------------------------------------------
; 580  :     //  Signed files are prefixed with a 16-byte random seed, which
; 581  :     //  is included in the hash.
; 582  :     //------------------------------------------------------------------------
; 583  :     if (!OEMReadData (RANDOM_SEED_LENGTH, (LPBYTE) &packetData.bRandomSeed))

  00c60	e28d1040	 add         r1, sp, #0x40
  00c64	e3a00010	 mov         r0, #0x10
  00c68	eb000000	 bl          OEMReadData
  00c6c	e58d00d0	 str         r0, [sp, #0xD0]
  00c70	e59d30d0	 ldr         r3, [sp, #0xD0]
  00c74	e3530000	 cmp         r3, #0
  00c78	1a000008	 bne         |$LN28@DownloadSi|

; 584  :     {
; 585  :         KITLOutputDebugString ("ERROR: Failed to read random seed at start of signed .bin file\r\n");

  00c7c	e59f08c4	 ldr         r0, [pc, #0x8C4]
  00c80	eb000000	 bl          KITLOutputDebugString

; 586  :         HALT (BLERR_MAGIC);

  00c84	e3e00007	 mvn         r0, #7
  00c88	eb000000	 bl          HALT

; 587  :         return (FALSE);

  00c8c	e59d00a4	 ldr         r0, [sp, #0xA4]
  00c90	eb000000	 bl          __security_check_cookie
  00c94	e3a03000	 mov         r3, #0
  00c98	e58d30a8	 str         r3, [sp, #0xA8]
  00c9c	ea00020a	 b           |$LN35@DownloadSi|
  00ca0		 |$LN28@DownloadSi|
  00ca0		 |$LN27@DownloadSi|

; 588  :     }
; 589  : 
; 590  : 
; 591  :     //------------------------------------------------------------------------
; 592  :     //  Download signed packets (.bin records or record chunks)
; 593  :     //------------------------------------------------------------------------
; 594  : 
; 595  :     while ( OEMReadData (sizeof (DWORD), (LPBYTE) &dwSignedDataLength) &&
; 596  :             OEMReadData (sizeof (DWORD), (LPBYTE) &dwSigLength)        &&
; 597  :             OEMReadData (sizeof (BYTE),  (LPBYTE) &bFlags) )

  00ca0	e28d1068	 add         r1, sp, #0x68
  00ca4	e3a00004	 mov         r0, #4
  00ca8	eb000000	 bl          OEMReadData
  00cac	e58d00d4	 str         r0, [sp, #0xD4]
  00cb0	e59d30d4	 ldr         r3, [sp, #0xD4]
  00cb4	e3530000	 cmp         r3, #0
  00cb8	0a0001a4	 beq         |$LN26@DownloadSi|
  00cbc	e28d106c	 add         r1, sp, #0x6C
  00cc0	e3a00004	 mov         r0, #4
  00cc4	eb000000	 bl          OEMReadData
  00cc8	e58d00d8	 str         r0, [sp, #0xD8]
  00ccc	e59d30d8	 ldr         r3, [sp, #0xD8]
  00cd0	e3530000	 cmp         r3, #0
  00cd4	0a00019d	 beq         |$LN26@DownloadSi|
  00cd8	e28d107c	 add         r1, sp, #0x7C
  00cdc	e3a00001	 mov         r0, #1
  00ce0	eb000000	 bl          OEMReadData
  00ce4	e58d00dc	 str         r0, [sp, #0xDC]
  00ce8	e59d30dc	 ldr         r3, [sp, #0xDC]
  00cec	e3530000	 cmp         r3, #0
  00cf0	0a000196	 beq         |$LN26@DownloadSi|

; 598  :     {
; 599  : #ifdef DEBUG
; 600  :         KITLOutputDebugString("\r\n------------------------------------------------------------------------------\r\n");

  00cf4	e59f0848	 ldr         r0, [pc, #0x848]
  00cf8	eb000000	 bl          KITLOutputDebugString

; 601  :         KITLOutputDebugString(" <> Packet [ %d ] dwSignedDataLength = 0x%x, dwSigLen = 0x%x, bFlags = 0x%x\r\n", 
; 602  :             dwPacketNum, dwSignedDataLength, dwSigLength, bFlags);

  00cfc	e5dd307c	 ldrb        r3, [sp, #0x7C]
  00d00	e58d3000	 str         r3, [sp]
  00d04	e59d306c	 ldr         r3, [sp, #0x6C]
  00d08	e59d2068	 ldr         r2, [sp, #0x68]
  00d0c	e59d1074	 ldr         r1, [sp, #0x74]
  00d10	e59f0820	 ldr         r0, [pc, #0x820]
  00d14	eb000000	 bl          KITLOutputDebugString

; 603  : #endif
; 604  : 
; 605  :         // Check if what we just read was a chunk header instead of a
; 606  :         // signed packet header.
; 607  :         //
; 608  :         // If a .bin record is larger than the <packet size> parameter to 
; 609  :         // ImageHash.exe, it will be broken into multiple chunks.
; 610  :         //
; 611  :         // This theoretically allows download of .bin records that are larger
; 612  :         // than the bootloader's available RAM.  However BLCommon doesn't 
; 613  :         // implement that.  The OEM can do it by creatively using 
; 614  :         // OEMMapMemAddr() and OEMContinueEraseFlash() to periodically flush 
; 615  :         // the RAM buffer to flash.
; 616  : 
; 617  :         if (bFlags & SBL_FLAG_CHUNK_HEADER)

  00d18	e5dd307c	 ldrb        r3, [sp, #0x7C]
  00d1c	e3130004	 tst         r3, #4
  00d20	0a00002c	 beq         |$LN25@DownloadSi|

; 618  :         {
; 619  :             // It's a chunk header; we must reinterpret the data we just read:
; 620  :             //
; 621  :             //  field 0: ignore             (always zero for a chunk header)
; 622  :             //  field 1: dwChunksRemaining  (multiple chunks = one .bin record)
; 623  :             //  field 2: bFlags             (no change)
; 624  :             dwChunksRemaining = dwSigLength;

  00d24	e59d306c	 ldr         r3, [sp, #0x6C]
  00d28	e58d3064	 str         r3, [sp, #0x64]

; 625  :             dwChunkOffset     = 0;

  00d2c	e3a03000	 mov         r3, #0
  00d30	e58d3080	 str         r3, [sp, #0x80]

; 626  : #ifdef DEBUG
; 627  :             KITLOutputDebugString(" <> Record chunk (dwChunksRemaining = %d)\r\n", dwChunksRemaining);

  00d34	e59d1064	 ldr         r1, [sp, #0x64]
  00d38	e59f0800	 ldr         r0, [pc, #0x800]
  00d3c	eb000000	 bl          KITLOutputDebugString

; 628  : #endif             
; 629  :             
; 630  :             // Read the signed packet header
; 631  :             if ( !(OEMReadData (sizeof (DWORD), (LPBYTE) &dwSignedDataLength) &&
; 632  :                    OEMReadData (sizeof (DWORD), (LPBYTE) &dwSigLength)        &&
; 633  :                    OEMReadData (sizeof (BYTE),  (LPBYTE) &bFlags)))

  00d40	e28d1068	 add         r1, sp, #0x68
  00d44	e3a00004	 mov         r0, #4
  00d48	eb000000	 bl          OEMReadData
  00d4c	e58d00e0	 str         r0, [sp, #0xE0]
  00d50	e59d30e0	 ldr         r3, [sp, #0xE0]
  00d54	e3530000	 cmp         r3, #0
  00d58	0a00000d	 beq         |$LN23@DownloadSi|
  00d5c	e28d106c	 add         r1, sp, #0x6C
  00d60	e3a00004	 mov         r0, #4
  00d64	eb000000	 bl          OEMReadData
  00d68	e58d00e4	 str         r0, [sp, #0xE4]
  00d6c	e59d30e4	 ldr         r3, [sp, #0xE4]
  00d70	e3530000	 cmp         r3, #0
  00d74	0a000006	 beq         |$LN23@DownloadSi|
  00d78	e28d107c	 add         r1, sp, #0x7C
  00d7c	e3a00001	 mov         r0, #1
  00d80	eb000000	 bl          OEMReadData
  00d84	e58d00e8	 str         r0, [sp, #0xE8]
  00d88	e59d30e8	 ldr         r3, [sp, #0xE8]
  00d8c	e3530000	 cmp         r3, #0
  00d90	1a000009	 bne         |$LN24@DownloadSi|
  00d94		 |$LN23@DownloadSi|

; 634  :             {
; 635  :                 KITLOutputDebugString ("ERROR: Failed to read signed packet header %d, ABORT!\r\n", dwPacketNum);

  00d94	e59d1074	 ldr         r1, [sp, #0x74]
  00d98	e59f079c	 ldr         r0, [pc, #0x79C]
  00d9c	eb000000	 bl          KITLOutputDebugString

; 636  :                 HALT (BLERR_CORRUPTED_DATA);

  00da0	e3e00003	 mvn         r0, #3
  00da4	eb000000	 bl          HALT

; 637  :                 return (FALSE);

  00da8	e59d00a4	 ldr         r0, [sp, #0xA4]
  00dac	eb000000	 bl          __security_check_cookie
  00db0	e3a03000	 mov         r3, #0
  00db4	e58d30a8	 str         r3, [sp, #0xA8]
  00db8	ea0001c3	 b           |$LN35@DownloadSi|
  00dbc		 |$LN24@DownloadSi|

; 638  :             }
; 639  : #ifdef DEBUG
; 640  :             KITLOutputDebugString(" <> Packet [ %d ] dwSignedDataLength = 0x%x, dwSigLen = 0x%x, bFlags = 0x%x\r\n", 
; 641  :                 dwPacketNum, dwSignedDataLength, dwSigLength, bFlags);

  00dbc	e5dd307c	 ldrb        r3, [sp, #0x7C]
  00dc0	e58d3000	 str         r3, [sp]
  00dc4	e59d306c	 ldr         r3, [sp, #0x6C]
  00dc8	e59d2068	 ldr         r2, [sp, #0x68]
  00dcc	e59d1074	 ldr         r1, [sp, #0x74]
  00dd0	e59f0760	 ldr         r0, [pc, #0x760]
  00dd4	eb000000	 bl          KITLOutputDebugString
  00dd8		 |$LN25@DownloadSi|

; 642  : #endif            
; 643  :         }
; 644  : 
; 645  : 
; 646  :         // Read the .bin record header
; 647  :         if ( !(OEMReadData (sizeof (DWORD), (LPBYTE) &dwRecAddr) &&
; 648  :                OEMReadData (sizeof (DWORD), (LPBYTE) &dwRecLen)  &&
; 649  :                OEMReadData (sizeof (DWORD), (LPBYTE) &dwRecChk)) )

  00dd8	e28d108c	 add         r1, sp, #0x8C
  00ddc	e3a00004	 mov         r0, #4
  00de0	eb000000	 bl          OEMReadData
  00de4	e58d00ec	 str         r0, [sp, #0xEC]
  00de8	e59d30ec	 ldr         r3, [sp, #0xEC]
  00dec	e3530000	 cmp         r3, #0
  00df0	0a00000d	 beq         |$LN21@DownloadSi|
  00df4	e28d1060	 add         r1, sp, #0x60
  00df8	e3a00004	 mov         r0, #4
  00dfc	eb000000	 bl          OEMReadData
  00e00	e58d00f0	 str         r0, [sp, #0xF0]
  00e04	e59d30f0	 ldr         r3, [sp, #0xF0]
  00e08	e3530000	 cmp         r3, #0
  00e0c	0a000006	 beq         |$LN21@DownloadSi|
  00e10	e28d1078	 add         r1, sp, #0x78
  00e14	e3a00004	 mov         r0, #4
  00e18	eb000000	 bl          OEMReadData
  00e1c	e58d00f4	 str         r0, [sp, #0xF4]
  00e20	e59d30f4	 ldr         r3, [sp, #0xF4]
  00e24	e3530000	 cmp         r3, #0
  00e28	1a000009	 bne         |$LN22@DownloadSi|
  00e2c		 |$LN21@DownloadSi|

; 650  :         {
; 651  :             KITLOutputDebugString ("ERROR: Failed to read .bin record header %d, ABORT!\r\n", dwPacketNum);

  00e2c	e59d1074	 ldr         r1, [sp, #0x74]
  00e30	e59f06fc	 ldr         r0, [pc, #0x6FC]
  00e34	eb000000	 bl          KITLOutputDebugString

; 652  :             HALT (BLERR_CORRUPTED_DATA);

  00e38	e3e00003	 mvn         r0, #3
  00e3c	eb000000	 bl          HALT

; 653  :             return (FALSE);

  00e40	e59d00a4	 ldr         r0, [sp, #0xA4]
  00e44	eb000000	 bl          __security_check_cookie
  00e48	e3a03000	 mov         r3, #0
  00e4c	e58d30a8	 str         r3, [sp, #0xA8]
  00e50	ea00019d	 b           |$LN35@DownloadSi|
  00e54		 |$LN22@DownloadSi|

; 654  :         }
; 655  : #ifdef DEBUG
; 656  :         KITLOutputDebugString(" <> Record [ %d ] dwRecAddr = 0x%x, dwRecLen = 0x%x, dwRecChk = 0x%x\r\n", 
; 657  :             dwRecNum, dwRecAddr, dwRecLen, dwRecChk);

  00e54	e59d3078	 ldr         r3, [sp, #0x78]
  00e58	e58d3000	 str         r3, [sp]
  00e5c	e59d3060	 ldr         r3, [sp, #0x60]
  00e60	e59d208c	 ldr         r2, [sp, #0x8C]
  00e64	e59d1094	 ldr         r1, [sp, #0x94]
  00e68	e59f06c0	 ldr         r0, [pc, #0x6C0]
  00e6c	eb000000	 bl          KITLOutputDebugString

; 658  : #endif
; 659  : 
; 660  :         if (bFlags & SBL_FLAG_END_FILE)

  00e70	e5dd307c	 ldrb        r3, [sp, #0x7C]
  00e74	e3130002	 tst         r3, #2
  00e78	0a000022	 beq         |$LN20@DownloadSi|

; 661  :         {
; 662  :             // last packet always has unused signature block, read it!
; 663  :             ASSERT(dwSignedDataLength == 0);

  00e7c	e59d3068	 ldr         r3, [sp, #0x68]
  00e80	e3530000	 cmp         r3, #0
  00e84	1a000002	 bne         |$LN37@DownloadSi|
  00e88	e3a03001	 mov         r3, #1
  00e8c	e58d30f8	 str         r3, [sp, #0xF8]
  00e90	ea000008	 b           |$LN38@DownloadSi|
  00e94		 |$LN37@DownloadSi|
  00e94	e3a03c02	 mov         r3, #2, 24
  00e98	e3833097	 orr         r3, r3, #0x97
  00e9c	e59f2670	 ldr         r2, [pc, #0x670]
  00ea0	e59f1668	 ldr         r1, [pc, #0x668]
  00ea4	e59f0660	 ldr         r0, [pc, #0x660]
  00ea8	eb000000	 bl          NKDbgPrintfW
  00eac	e6000010	 __debugbreak_ce
  00eb0	e3a03000	 mov         r3, #0
  00eb4	e58d30f8	 str         r3, [sp, #0xF8]
  00eb8		 |$LN38@DownloadSi|

; 664  :             ASSERT(dwSigLength <= sizeof(g_rgpbSignature));

  00eb8	e59d306c	 ldr         r3, [sp, #0x6C]
  00ebc	e3530080	 cmp         r3, #0x80
  00ec0	8a000002	 bhi         |$LN39@DownloadSi|
  00ec4	e3a03001	 mov         r3, #1
  00ec8	e58d30fc	 str         r3, [sp, #0xFC]
  00ecc	ea000007	 b           |$LN40@DownloadSi|
  00ed0		 |$LN39@DownloadSi|
  00ed0	e3a03fa6	 mov         r3, #0xA6, 30
  00ed4	e59f2638	 ldr         r2, [pc, #0x638]
  00ed8	e59f1630	 ldr         r1, [pc, #0x630]
  00edc	e59f0628	 ldr         r0, [pc, #0x628]
  00ee0	eb000000	 bl          NKDbgPrintfW
  00ee4	e6000010	 __debugbreak_ce
  00ee8	e3a03000	 mov         r3, #0
  00eec	e58d30fc	 str         r3, [sp, #0xFC]
  00ef0		 |$LN40@DownloadSi|

; 665  :             OEMReadData(dwSigLength, (LPBYTE) &g_rgpbSignature);

  00ef0	e59f160c	 ldr         r1, [pc, #0x60C]
  00ef4	e59d006c	 ldr         r0, [sp, #0x6C]
  00ef8	eb000000	 bl          OEMReadData

; 666  :             KITLOutputDebugString("Reached last record of signed .bin file\r\n");

  00efc	e59f0628	 ldr         r0, [pc, #0x628]
  00f00	eb000000	 bl          KITLOutputDebugString

; 667  :             break;

  00f04	ea000111	 b           |$LN26@DownloadSi|
  00f08		 |$LN20@DownloadSi|

; 668  :         }
; 669  : 
; 670  :         // map the record address (FLASH data is cached, for example)
; 671  :         // add offset if this is a record chunk
; 672  :         lpDest = OEMMapMemAddr (pCurDownloadFile->dwRegionStart, dwRecAddr + dwChunkOffset);

  00f08	e59d208c	 ldr         r2, [sp, #0x8C]
  00f0c	e59d3080	 ldr         r3, [sp, #0x80]
  00f10	e0821003	 add         r1, r2, r3
  00f14	e59d3090	 ldr         r3, [sp, #0x90]
  00f18	e5930000	 ldr         r0, [r3]
  00f1c	eb000000	 bl          OEMMapMemAddr
  00f20	e58d0100	 str         r0, [sp, #0x100]
  00f24	e59d3100	 ldr         r3, [sp, #0x100]
  00f28	e58d3058	 str         r3, [sp, #0x58]

; 673  : 
; 674  :         // read record (or record chunk)
; 675  :         if (!OEMReadData (dwSignedDataLength, lpDest))

  00f2c	e59d1058	 ldr         r1, [sp, #0x58]
  00f30	e59d0068	 ldr         r0, [sp, #0x68]
  00f34	eb000000	 bl          OEMReadData
  00f38	e58d0104	 str         r0, [sp, #0x104]
  00f3c	e59d3104	 ldr         r3, [sp, #0x104]
  00f40	e3530000	 cmp         r3, #0
  00f44	1a00000a	 bne         |$LN19@DownloadSi|

; 676  :         {
; 677  :             KITLOutputDebugString ("ERROR: Data packet %d corrupted, ABORT!\r\n", dwPacketNum);

  00f48	e59d1074	 ldr         r1, [sp, #0x74]
  00f4c	e59f05d4	 ldr         r0, [pc, #0x5D4]
  00f50	eb000000	 bl          KITLOutputDebugString

; 678  :             HALT (BLERR_CORRUPTED_DATA);

  00f54	e3e00003	 mvn         r0, #3
  00f58	eb000000	 bl          HALT

; 679  :             return (FALSE);

  00f5c	e59d00a4	 ldr         r0, [sp, #0xA4]
  00f60	eb000000	 bl          __security_check_cookie
  00f64	e3a03000	 mov         r3, #0
  00f68	e58d30a8	 str         r3, [sp, #0xA8]
  00f6c	ea000156	 b           |$LN35@DownloadSi|

; 680  :         }
; 681  : #ifdef DEBUG
; 682  :         else

  00f70	ea000009	 b           |$LN18@DownloadSi|
  00f74		 |$LN19@DownloadSi|

; 683  :         {
; 684  :             KITLOutputDebugString ("Read 0x%x bytes into cache: 0x%x (final address: 0x%x)\r\n", 
; 685  :                 dwSignedDataLength,
; 686  :                 lpDest,
; 687  :                 dwRecAddr + dwChunkOffset);   

  00f74	e59d208c	 ldr         r2, [sp, #0x8C]
  00f78	e59d3080	 ldr         r3, [sp, #0x80]
  00f7c	e0823003	 add         r3, r2, r3
  00f80	e59d2058	 ldr         r2, [sp, #0x58]
  00f84	e59d1068	 ldr         r1, [sp, #0x68]
  00f88	e59f0594	 ldr         r0, [pc, #0x594]
  00f8c	eb000000	 bl          KITLOutputDebugString

; 688  :                 
; 689  :             DumpMem( lpDest, 64 );                

  00f90	e3a01040	 mov         r1, #0x40
  00f94	e59d0058	 ldr         r0, [sp, #0x58]
  00f98	eb000000	 bl          DumpMem
  00f9c		 |$LN18@DownloadSi|

; 690  :         }
; 691  : #endif
; 692  :         
; 693  :         
; 694  :         // Check for last chunk in a fragmented .bin record
; 695  :         if (0 != dwChunksRemaining) 

  00f9c	e59d3064	 ldr         r3, [sp, #0x64]
  00fa0	e3530000	 cmp         r3, #0
  00fa4	0a000010	 beq         |$LN17@DownloadSi|

; 696  :         {
; 697  :             if (--dwChunksRemaining > 0) 

  00fa8	e59d3064	 ldr         r3, [sp, #0x64]
  00fac	e2433001	 sub         r3, r3, #1
  00fb0	e58d3064	 str         r3, [sp, #0x64]
  00fb4	e59d3064	 ldr         r3, [sp, #0x64]
  00fb8	e3530000	 cmp         r3, #0
  00fbc	9a000004	 bls         |$LN16@DownloadSi|

; 698  :             {
; 699  :                 dwChunkOffset += dwSignedDataLength;

  00fc0	e59d2080	 ldr         r2, [sp, #0x80]
  00fc4	e59d3068	 ldr         r3, [sp, #0x68]
  00fc8	e0823003	 add         r3, r2, r3
  00fcc	e58d3080	 str         r3, [sp, #0x80]

; 700  :             } 
; 701  :             else 

  00fd0	ea000001	 b           |$LN15@DownloadSi|
  00fd4		 |$LN16@DownloadSi|

; 702  :             {
; 703  :                 dwChunkOffset = 0;  

  00fd4	e3a03000	 mov         r3, #0
  00fd8	e58d3080	 str         r3, [sp, #0x80]
  00fdc		 |$LN15@DownloadSi|

; 704  :             }
; 705  : #ifdef DEBUG
; 706  :             KITLOutputDebugString("dwChunksRemaining = %d, offset = 0x%x\r\n", 
; 707  :                 dwChunksRemaining, dwChunkOffset);

  00fdc	e59d2080	 ldr         r2, [sp, #0x80]
  00fe0	e59d1064	 ldr         r1, [sp, #0x64]
  00fe4	e59f0534	 ldr         r0, [pc, #0x534]
  00fe8	eb000000	 bl          KITLOutputDebugString
  00fec		 |$LN17@DownloadSi|

; 708  : #endif            
; 709  :         }
; 710  :         
; 711  : 
; 712  :         if (0 == dwChunksRemaining) 

  00fec	e59d3064	 ldr         r3, [sp, #0x64]
  00ff0	e3530000	 cmp         r3, #0
  00ff4	1a000018	 bne         |$LN14@DownloadSi|

; 713  :         {
; 714  :             LPBYTE cacheAddress = OEMMapMemAddr (pCurDownloadFile->dwRegionStart, dwRecAddr);

  00ff8	e59d108c	 ldr         r1, [sp, #0x8C]
  00ffc	e59d3090	 ldr         r3, [sp, #0x90]
  01000	e5930000	 ldr         r0, [r3]
  01004	eb000000	 bl          OEMMapMemAddr
  01008	e58d0108	 str         r0, [sp, #0x108]
  0100c	e59d3108	 ldr         r3, [sp, #0x108]
  01010	e58d3098	 str         r3, [sp, #0x98]

; 715  :             
; 716  :             // The packet signature makes this redundant, but we check anyway.
; 717  :             if (!VerifyChecksum (dwRecLen, cacheAddress, dwRecChk))

  01014	e59d2078	 ldr         r2, [sp, #0x78]
  01018	e59d1098	 ldr         r1, [sp, #0x98]
  0101c	e59d0060	 ldr         r0, [sp, #0x60]
  01020	eb000000	 bl          VerifyChecksum
  01024	e58d010c	 str         r0, [sp, #0x10C]
  01028	e59d310c	 ldr         r3, [sp, #0x10C]
  0102c	e3530000	 cmp         r3, #0
  01030	1a000006	 bne         |$LN13@DownloadSi|

; 718  :             {
; 719  :                 HALT (BLERR_CHECKSUM);

  01034	e3e00006	 mvn         r0, #6
  01038	eb000000	 bl          HALT

; 720  :                 return (FALSE);

  0103c	e59d00a4	 ldr         r0, [sp, #0xA4]
  01040	eb000000	 bl          __security_check_cookie
  01044	e3a03000	 mov         r3, #0
  01048	e58d30a8	 str         r3, [sp, #0xA8]
  0104c	ea00011e	 b           |$LN35@DownloadSi|
  01050		 |$LN13@DownloadSi|

; 721  :             }
; 722  : 
; 723  :             dwRecNum++; 

  01050	e59d3094	 ldr         r3, [sp, #0x94]
  01054	e2833001	 add         r3, r3, #1
  01058	e58d3094	 str         r3, [sp, #0x94]
  0105c		 |$LN14@DownloadSi|

; 724  :         }
; 725  : 
; 726  :         // Look for ROMHDR to compute ROM offset.  NOTE: romimage guarantees that the record containing
; 727  :         // the TOC signature and pointer will always come before the record that contains the ROMHDR contents.
; 728  :         //
; 729  :         if (dwRecLen == sizeof(ROMHDR) && (*(LPDWORD) OEMMapMemAddr(pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionStart + ROM_SIGNATURE_OFFSET) == ROM_SIGNATURE))

  0105c	e59d3060	 ldr         r3, [sp, #0x60]
  01060	e3530054	 cmp         r3, #0x54
  01064	1a00005e	 bne         |$LN12@DownloadSi|
  01068	e59d3090	 ldr         r3, [sp, #0x90]
  0106c	e5933000	 ldr         r3, [r3]
  01070	e2831040	 add         r1, r3, #0x40
  01074	e59d3090	 ldr         r3, [sp, #0x90]
  01078	e5930000	 ldr         r0, [r3]
  0107c	eb000000	 bl          OEMMapMemAddr
  01080	e58d0110	 str         r0, [sp, #0x110]
  01084	e59d3110	 ldr         r3, [sp, #0x110]
  01088	e5932000	 ldr         r2, [r3]
  0108c	e59f3464	 ldr         r3, [pc, #0x464]
  01090	e1520003	 cmp         r2, r3
  01094	1a000052	 bne         |$LN12@DownloadSi|

; 730  :         {
; 731  :             DWORD dwTempOffset = (dwRecAddr - *(LPDWORD)OEMMapMemAddr(pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionStart + ROM_SIGNATURE_OFFSET + sizeof(ULONG)));

  01098	e59d3090	 ldr         r3, [sp, #0x90]
  0109c	e5933000	 ldr         r3, [r3]
  010a0	e2831044	 add         r1, r3, #0x44
  010a4	e59d3090	 ldr         r3, [sp, #0x90]
  010a8	e5930000	 ldr         r0, [r3]
  010ac	eb000000	 bl          OEMMapMemAddr
  010b0	e58d0114	 str         r0, [sp, #0x114]
  010b4	e59d208c	 ldr         r2, [sp, #0x8C]
  010b8	e59d3114	 ldr         r3, [sp, #0x114]
  010bc	e5933000	 ldr         r3, [r3]
  010c0	e0423003	 sub         r3, r2, r3
  010c4	e58d30a0	 str         r3, [sp, #0xA0]

; 732  :             ROMHDR *pROMHdr = (ROMHDR *)lpDest;

  010c8	e59d3058	 ldr         r3, [sp, #0x58]
  010cc	e58d309c	 str         r3, [sp, #0x9C]

; 733  : 
; 734  :             // Check to make sure this record really contains the ROMHDR.
; 735  :             //
; 736  :             if ((pROMHdr->physfirst == (pCurDownloadFile->dwRegionStart - dwTempOffset)) &&
; 737  :                 (pROMHdr->physlast  == (pCurDownloadFile->dwRegionStart - dwTempOffset + pCurDownloadFile->dwRegionLength)) &&
; 738  :                 (DWORD)(HIWORD(pROMHdr->dllfirst << 16) <= pROMHdr->dlllast) &&
; 739  :                 (DWORD)(LOWORD(pROMHdr->dllfirst << 16) <= pROMHdr->dlllast))

  010d0	e59d309c	 ldr         r3, [sp, #0x9C]
  010d4	e2831008	 add         r1, r3, #8
  010d8	e59d3090	 ldr         r3, [sp, #0x90]
  010dc	e5932000	 ldr         r2, [r3]
  010e0	e59d30a0	 ldr         r3, [sp, #0xA0]
  010e4	e0422003	 sub         r2, r2, r3
  010e8	e5913000	 ldr         r3, [r1]
  010ec	e1530002	 cmp         r3, r2
  010f0	1a00003b	 bne         |$LN11@DownloadSi|
  010f4	e59d309c	 ldr         r3, [sp, #0x9C]
  010f8	e283100c	 add         r1, r3, #0xC
  010fc	e59d3090	 ldr         r3, [sp, #0x90]
  01100	e5932000	 ldr         r2, [r3]
  01104	e59d30a0	 ldr         r3, [sp, #0xA0]
  01108	e0422003	 sub         r2, r2, r3
  0110c	e59d3090	 ldr         r3, [sp, #0x90]
  01110	e2833004	 add         r3, r3, #4
  01114	e5933000	 ldr         r3, [r3]
  01118	e0822003	 add         r2, r2, r3
  0111c	e5913000	 ldr         r3, [r1]
  01120	e1530002	 cmp         r3, r2
  01124	1a00002e	 bne         |$LN11@DownloadSi|
  01128	e59d309c	 ldr         r3, [sp, #0x9C]
  0112c	e5933000	 ldr         r3, [r3]
  01130	e1a03803	 mov         r3, r3, lsl #16
  01134	e1a02823	 mov         r2, r3, lsr #16
  01138	e3a03cff	 mov         r3, #0xFF, 24
  0113c	e38330ff	 orr         r3, r3, #0xFF
  01140	e0023003	 and         r3, r2, r3
  01144	e1a02803	 mov         r2, r3, lsl #16
  01148	e1a02822	 mov         r2, r2, lsr #16
  0114c	e59d309c	 ldr         r3, [sp, #0x9C]
  01150	e2833004	 add         r3, r3, #4
  01154	e5933000	 ldr         r3, [r3]
  01158	e1520003	 cmp         r2, r3
  0115c	8a000002	 bhi         |$LN41@DownloadSi|
  01160	e3a03001	 mov         r3, #1
  01164	e58d3118	 str         r3, [sp, #0x118]
  01168	ea000001	 b           |$LN42@DownloadSi|
  0116c		 |$LN41@DownloadSi|
  0116c	e3a03000	 mov         r3, #0
  01170	e58d3118	 str         r3, [sp, #0x118]
  01174		 |$LN42@DownloadSi|
  01174	e59d3118	 ldr         r3, [sp, #0x118]
  01178	e3530000	 cmp         r3, #0
  0117c	0a000018	 beq         |$LN11@DownloadSi|
  01180	e59d309c	 ldr         r3, [sp, #0x9C]
  01184	e5933000	 ldr         r3, [r3]
  01188	e1a03803	 mov         r3, r3, lsl #16
  0118c	e1a02803	 mov         r2, r3, lsl #16
  01190	e1a02822	 mov         r2, r2, lsr #16
  01194	e59d309c	 ldr         r3, [sp, #0x9C]
  01198	e2833004	 add         r3, r3, #4
  0119c	e5933000	 ldr         r3, [r3]
  011a0	e1520003	 cmp         r2, r3
  011a4	8a000002	 bhi         |$LN43@DownloadSi|
  011a8	e3a03001	 mov         r3, #1
  011ac	e58d311c	 str         r3, [sp, #0x11C]
  011b0	ea000001	 b           |$LN44@DownloadSi|
  011b4		 |$LN43@DownloadSi|
  011b4	e3a03000	 mov         r3, #0
  011b8	e58d311c	 str         r3, [sp, #0x11C]
  011bc		 |$LN44@DownloadSi|
  011bc	e59d311c	 ldr         r3, [sp, #0x11C]
  011c0	e3530000	 cmp         r3, #0
  011c4	0a000006	 beq         |$LN11@DownloadSi|

; 740  :             {
; 741  :                 g_dwROMOffset = dwTempOffset;

  011c8	e59d20a0	 ldr         r2, [sp, #0xA0]
  011cc	e59f3348	 ldr         r3, [pc, #0x348]
  011d0	e5832000	 str         r2, [r3]

; 742  :                 KITLOutputDebugString("rom_offset=0x%x.\r\n", g_dwROMOffset); 

  011d4	e59f3340	 ldr         r3, [pc, #0x340]
  011d8	e5931000	 ldr         r1, [r3]
  011dc	e59f0334	 ldr         r0, [pc, #0x334]
  011e0	eb000000	 bl          KITLOutputDebugString
  011e4		 |$LN11@DownloadSi|
  011e4		 |$LN12@DownloadSi|

; 743  :             }
; 744  :         }
; 745  : 
; 746  :         // read packet signature
; 747  :         ASSERT(dwSigLength <= sizeof(g_rgpbSignature));

  011e4	e59d306c	 ldr         r3, [sp, #0x6C]
  011e8	e3530080	 cmp         r3, #0x80
  011ec	8a000002	 bhi         |$LN45@DownloadSi|
  011f0	e3a03001	 mov         r3, #1
  011f4	e58d3120	 str         r3, [sp, #0x120]
  011f8	ea000008	 b           |$LN46@DownloadSi|
  011fc		 |$LN45@DownloadSi|
  011fc	e3a03c02	 mov         r3, #2, 24
  01200	e38330eb	 orr         r3, r3, #0xEB
  01204	e59f2308	 ldr         r2, [pc, #0x308]
  01208	e59f1300	 ldr         r1, [pc, #0x300]
  0120c	e59f02f8	 ldr         r0, [pc, #0x2F8]
  01210	eb000000	 bl          NKDbgPrintfW
  01214	e6000010	 __debugbreak_ce
  01218	e3a03000	 mov         r3, #0
  0121c	e58d3120	 str         r3, [sp, #0x120]
  01220		 |$LN46@DownloadSi|

; 748  :         if (!OEMReadData (dwSigLength, (LPBYTE) &g_rgpbSignature))

  01220	e59f12dc	 ldr         r1, [pc, #0x2DC]
  01224	e59d006c	 ldr         r0, [sp, #0x6C]
  01228	eb000000	 bl          OEMReadData
  0122c	e58d0124	 str         r0, [sp, #0x124]
  01230	e59d3124	 ldr         r3, [sp, #0x124]
  01234	e3530000	 cmp         r3, #0
  01238	1a000009	 bne         |$LN10@DownloadSi|

; 749  :         {
; 750  :             KITLOutputDebugString ("ERROR: Failed to read signature for packet %d, ABORT!\r\n", dwPacketNum);

  0123c	e59d1074	 ldr         r1, [sp, #0x74]
  01240	e59f02c0	 ldr         r0, [pc, #0x2C0]
  01244	eb000000	 bl          KITLOutputDebugString

; 751  :             HALT (BLERR_SIGNATURE);

  01248	e3e00004	 mvn         r0, #4
  0124c	eb000000	 bl          HALT

; 752  :             return (FALSE);

  01250	e59d00a4	 ldr         r0, [sp, #0xA4]
  01254	eb000000	 bl          __security_check_cookie
  01258	e3a03000	 mov         r3, #0
  0125c	e58d30a8	 str         r3, [sp, #0xA8]
  01260	ea000099	 b           |$LN35@DownloadSi|
  01264		 |$LN10@DownloadSi|

; 753  :         }
; 754  :     
; 755  :         //------------------------------------------------------------------------
; 756  :         //  Validate signature for this record or chunk
; 757  :         //------------------------------------------------------------------------
; 758  : 
; 759  :         packetData.pbData       = lpDest;               // data to verify               

  01264	e59d3058	 ldr         r3, [sp, #0x58]
  01268	e58d3024	 str         r3, [sp, #0x24]

; 760  :         packetData.dwDataLength = dwSignedDataLength;   // length of data in bytes              

  0126c	e59d3068	 ldr         r3, [sp, #0x68]
  01270	e58d3028	 str         r3, [sp, #0x28]

; 761  :         packetData.pbSig        = g_rgpbSignature;      // signature to verify               

  01274	e59f3288	 ldr         r3, [pc, #0x288]
  01278	e58d302c	 str         r3, [sp, #0x2C]

; 762  :         packetData.dwSigLength  = dwSigLength;          // length of signature in bytes                

  0127c	e59d306c	 ldr         r3, [sp, #0x6C]
  01280	e58d3030	 str         r3, [sp, #0x30]

; 763  :         packetData.dwRecAddress = dwRecAddr;            // record address              

  01284	e59d308c	 ldr         r3, [sp, #0x8C]
  01288	e58d3034	 str         r3, [sp, #0x34]

; 764  :         packetData.dwRecLength  = dwRecLen;             // record length   

  0128c	e59d3060	 ldr         r3, [sp, #0x60]
  01290	e58d3038	 str         r3, [sp, #0x38]

; 765  :         packetData.dwRecCheck   = dwRecChk;             // record checksum  

  01294	e59d3078	 ldr         r3, [sp, #0x78]
  01298	e58d303c	 str         r3, [sp, #0x3C]

; 766  :         packetData.dwSequenceNumber = dwPacketNum;      // packet sequence number           

  0129c	e59d3074	 ldr         r3, [sp, #0x74]
  012a0	e58d3050	 str         r3, [sp, #0x50]

; 767  :         packetData.bFlags       = bFlags;               // Flags

  012a4	e5dd307c	 ldrb        r3, [sp, #0x7C]
  012a8	e5cd3054	 strb        r3, [sp, #0x54]

; 768  : 
; 769  :         PrintPacketData( packetData );

  012ac	e28d0000	 add         r0, sp, #0
  012b0	e28d1034	 add         r1, sp, #0x34
  012b4	e3a02024	 mov         r2, #0x24
  012b8	eb000000	 bl          memcpy
  012bc	e59d0024	 ldr         r0, [sp, #0x24]
  012c0	e59d1028	 ldr         r1, [sp, #0x28]
  012c4	e59d202c	 ldr         r2, [sp, #0x2C]
  012c8	e59d3030	 ldr         r3, [sp, #0x30]
  012cc	eb000000	 bl          PrintPacketData

; 770  : 
; 771  :         hr = SBL_VerifyPacket( &packetData, &g_keyData );

  012d0	e59f1228	 ldr         r1, [pc, #0x228]
  012d4	e28d0024	 add         r0, sp, #0x24
  012d8	eb000000	 bl          SBL_VerifyPacket
  012dc	e58d0128	 str         r0, [sp, #0x128]
  012e0	e59d3128	 ldr         r3, [sp, #0x128]
  012e4	e58d3088	 str         r3, [sp, #0x88]

; 772  : 
; 773  :         if (FAILED(hr)) {

  012e8	e59d3088	 ldr         r3, [sp, #0x88]
  012ec	e3530000	 cmp         r3, #0
  012f0	aa00000a	 bge         |$LN9@DownloadSi|

; 774  :             KITLOutputDebugString("ERROR: Signature validation failed for packet %d with error 0x%x, ABORT!\r\n", dwPacketNum, hr);

  012f4	e59d2088	 ldr         r2, [sp, #0x88]
  012f8	e59d1074	 ldr         r1, [sp, #0x74]
  012fc	e59f01f8	 ldr         r0, [pc, #0x1F8]
  01300	eb000000	 bl          KITLOutputDebugString

; 775  :             HALT (BLERR_SIGNATURE);

  01304	e3e00004	 mvn         r0, #4
  01308	eb000000	 bl          HALT

; 776  :             return (FALSE);

  0130c	e59d00a4	 ldr         r0, [sp, #0xA4]
  01310	eb000000	 bl          __security_check_cookie
  01314	e3a03000	 mov         r3, #0
  01318	e58d30a8	 str         r3, [sp, #0xA8]
  0131c	ea00006a	 b           |$LN35@DownloadSi|
  01320		 |$LN9@DownloadSi|

; 777  :         }
; 778  :         
; 779  :         OEMShowProgress (dwPacketNum++);

  01320	e59d3074	 ldr         r3, [sp, #0x74]
  01324	e58d312c	 str         r3, [sp, #0x12C]
  01328	e59d012c	 ldr         r0, [sp, #0x12C]
  0132c	eb000000	 bl          OEMShowProgress
  01330	e59d3074	 ldr         r3, [sp, #0x74]
  01334	e2833001	 add         r3, r3, #1
  01338	e58d3074	 str         r3, [sp, #0x74]

; 780  : 
; 781  :         if (fIsFlash)

  0133c	e59d3070	 ldr         r3, [sp, #0x70]
  01340	e3530000	 cmp         r3, #0
  01344	0a000000	 beq         |$LN8@DownloadSi|

; 782  :         {
; 783  :             OEMContinueEraseFlash ();

  01348	eb000000	 bl          OEMContinueEraseFlash
  0134c		 |$LN8@DownloadSi|

; 784  :         }
; 785  :     }  // while( signed packets remaining )

  0134c	eafffe53	 b           |$LN27@DownloadSi|
  01350		 |$LN26@DownloadSi|

; 786  :     
; 787  : 
; 788  :     //------------------------------------------------------------------------
; 789  :     //  Determine the image entry point
; 790  :     //------------------------------------------------------------------------
; 791  : 
; 792  :     // Does this .bin file contain a TOC?
; 793  :     if (*(LPDWORD) OEMMapMemAddr(pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionStart + ROM_SIGNATURE_OFFSET) == ROM_SIGNATURE)

  01350	e59d3090	 ldr         r3, [sp, #0x90]
  01354	e5933000	 ldr         r3, [r3]
  01358	e2831040	 add         r1, r3, #0x40
  0135c	e59d3090	 ldr         r3, [sp, #0x90]
  01360	e5930000	 ldr         r0, [r3]
  01364	eb000000	 bl          OEMMapMemAddr
  01368	e58d0130	 str         r0, [sp, #0x130]
  0136c	e59d3130	 ldr         r3, [sp, #0x130]
  01370	e5932000	 ldr         r2, [r3]
  01374	e59f317c	 ldr         r3, [pc, #0x17C]
  01378	e1520003	 cmp         r2, r3
  0137c	1a000016	 bne         |$LN7@DownloadSi|

; 794  :     {
; 795  :         // Contain the kernel?
; 796  :         if (IsKernelRegion(pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionLength))

  01380	e59d3090	 ldr         r3, [sp, #0x90]
  01384	e2833004	 add         r3, r3, #4
  01388	e5931000	 ldr         r1, [r3]
  0138c	e59d3090	 ldr         r3, [sp, #0x90]
  01390	e5930000	 ldr         r0, [r3]
  01394	eb000000	 bl          IsKernelRegion
  01398	e58d0134	 str         r0, [sp, #0x134]
  0139c	e59d3134	 ldr         r3, [sp, #0x134]
  013a0	e3530000	 cmp         r3, #0
  013a4	0a00000b	 beq         |$LN6@DownloadSi|

; 797  :         {
; 798  :             *pdwImageStart  = pCurDownloadFile->dwRegionStart;

  013a8	e59d3090	 ldr         r3, [sp, #0x90]
  013ac	e5932000	 ldr         r2, [r3]
  013b0	e59d3144	 ldr         r3, [sp, #0x144]
  013b4	e5832000	 str         r2, [r3]

; 799  :             *pdwImageLength = pCurDownloadFile->dwRegionLength;

  013b8	e59d3090	 ldr         r3, [sp, #0x90]
  013bc	e2833004	 add         r3, r3, #4
  013c0	e5932000	 ldr         r2, [r3]
  013c4	e59d3148	 ldr         r3, [sp, #0x148]
  013c8	e5832000	 str         r2, [r3]

; 800  :             *pdwLaunchAddr  = dwRecLen;

  013cc	e59d2060	 ldr         r2, [sp, #0x60]
  013d0	e59d314c	 ldr         r3, [sp, #0x14C]
  013d4	e5832000	 str         r2, [r3]
  013d8		 |$LN6@DownloadSi|

; 801  :         }

  013d8	ea00000f	 b           |$LN5@DownloadSi|
  013dc		 |$LN7@DownloadSi|

; 802  :     }
; 803  :     // No TOC - not made by romimage.  
; 804  :     else if (g_DownloadManifest.dwNumRegions == 1)

  013dc	e59f3110	 ldr         r3, [pc, #0x110]
  013e0	e5933000	 ldr         r3, [r3]
  013e4	e3530001	 cmp         r3, #1
  013e8	1a00000b	 bne         |$LN4@DownloadSi|

; 805  :     {
; 806  :         *pdwImageStart  = pCurDownloadFile->dwRegionStart;

  013ec	e59d3090	 ldr         r3, [sp, #0x90]
  013f0	e5932000	 ldr         r2, [r3]
  013f4	e59d3144	 ldr         r3, [sp, #0x144]
  013f8	e5832000	 str         r2, [r3]

; 807  :         *pdwImageLength = pCurDownloadFile->dwRegionLength;

  013fc	e59d3090	 ldr         r3, [sp, #0x90]
  01400	e2833004	 add         r3, r3, #4
  01404	e5932000	 ldr         r2, [r3]
  01408	e59d3148	 ldr         r3, [sp, #0x148]
  0140c	e5832000	 str         r2, [r3]

; 808  :         *pdwLaunchAddr  = dwRecLen;

  01410	e59d2060	 ldr         r2, [sp, #0x60]
  01414	e59d314c	 ldr         r3, [sp, #0x14C]
  01418	e5832000	 str         r2, [r3]
  0141c		 |$LN4@DownloadSi|
  0141c		 |$LN5@DownloadSi|

; 809  :     }
; 810  :     else
; 811  :     {
; 812  :         // If we're downloading more than one .bin file, it's probably 
; 813  :         // chain.bin which doesn't have a TOC (and which isn't
; 814  :         // going to be downloaded on its own) and we should ignore it.
; 815  :     }
; 816  : 
; 817  : 
; 818  :     KITLOutputDebugString("\r\n");

  0141c	e59f00c0	 ldr         r0, [pc, #0xC0]
  01420	eb000000	 bl          KITLOutputDebugString

; 819  :     KITLOutputDebugString("            ******************************************************\r\n");

  01424	e59f00bc	 ldr         r0, [pc, #0xBC]
  01428	eb000000	 bl          KITLOutputDebugString

; 820  :     KITLOutputDebugString("            *                                                    *\r\n");

  0142c	e59f00b8	 ldr         r0, [pc, #0xB8]
  01430	eb000000	 bl          KITLOutputDebugString

; 821  :     KITLOutputDebugString("            *   This image was signed with a valid private key   *\r\n");

  01434	e59f00b4	 ldr         r0, [pc, #0xB4]
  01438	eb000000	 bl          KITLOutputDebugString

; 822  :     KITLOutputDebugString("            *                                                    *\r\n");

  0143c	e59f00a8	 ldr         r0, [pc, #0xA8]
  01440	eb000000	 bl          KITLOutputDebugString

; 823  :     KITLOutputDebugString("            ******************************************************\r\n");

  01444	e59f009c	 ldr         r0, [pc, #0x9C]
  01448	eb000000	 bl          KITLOutputDebugString

; 824  :     KITLOutputDebugString("\r\n");

  0144c	e59f0090	 ldr         r0, [pc, #0x90]
  01450	eb000000	 bl          KITLOutputDebugString

; 825  : 
; 826  :     KITLOutputDebugString("Downloaded %d records\r\n", dwRecNum);

  01454	e59d1094	 ldr         r1, [sp, #0x94]
  01458	e59f0080	 ldr         r0, [pc, #0x80]
  0145c	eb000000	 bl          KITLOutputDebugString

; 827  : 
; 828  :     if (fIsFlash)

  01460	e59d3070	 ldr         r3, [sp, #0x70]
  01464	e3530000	 cmp         r3, #0
  01468	0a00000b	 beq         |$LN2@DownloadSi|

; 829  :     {
; 830  :         // finish the flash erase
; 831  :         if (!OEMFinishEraseFlash())

  0146c	eb000000	 bl          OEMFinishEraseFlash
  01470	e58d0138	 str         r0, [sp, #0x138]
  01474	e59d3138	 ldr         r3, [sp, #0x138]
  01478	e3530000	 cmp         r3, #0
  0147c	1a000006	 bne         |$LN1@DownloadSi|

; 832  :         {
; 833  :             HALT (BLERR_FLASH_ERASE);

  01480	e3e0000a	 mvn         r0, #0xA
  01484	eb000000	 bl          HALT

; 834  :             return (FALSE);

  01488	e59d00a4	 ldr         r0, [sp, #0xA4]
  0148c	eb000000	 bl          __security_check_cookie
  01490	e3a03000	 mov         r3, #0
  01494	e58d30a8	 str         r3, [sp, #0xA8]
  01498	ea00000b	 b           |$LN35@DownloadSi|
  0149c		 |$LN1@DownloadSi|
  0149c		 |$LN2@DownloadSi|

; 835  :         }
; 836  : 
; 837  :     }
; 838  : 
; 839  :     KITLOutputDebugString("ImageStart = 0x%x, ImageLength = 0x%x, LaunchAddr = 0x%x\r\n",
; 840  :         *pdwImageStart, *pdwImageLength, *pdwLaunchAddr);

  0149c	e59d314c	 ldr         r3, [sp, #0x14C]
  014a0	e5933000	 ldr         r3, [r3]
  014a4	e59d2148	 ldr         r2, [sp, #0x148]
  014a8	e5922000	 ldr         r2, [r2]
  014ac	e59d1144	 ldr         r1, [sp, #0x144]
  014b0	e5911000	 ldr         r1, [r1]
  014b4	e59f0020	 ldr         r0, [pc, #0x20]
  014b8	eb000000	 bl          KITLOutputDebugString

; 841  : 
; 842  : 
; 843  :     return TRUE;

  014bc	e59d00a4	 ldr         r0, [sp, #0xA4]
  014c0	eb000000	 bl          __security_check_cookie
  014c4	e3a03001	 mov         r3, #1
  014c8	e58d30a8	 str         r3, [sp, #0xA8]
  014cc		 |$LN35@DownloadSi|

; 844  : }

  014cc	e59d00a8	 ldr         r0, [sp, #0xA8]
  014d0	e28ddf4f	 add         sp, sp, #0x4F, 30
  014d4	e89d6000	 ldmia       sp, {sp, lr}
  014d8	e12fff1e	 bx          lr
  014dc		 |$LN50@DownloadSi|
  014dc		 |$LN51@DownloadSi|
  014dc	00000000	 DCD         |??_C@_0DL@DCHMDHHD@ImageStart?5?$DN?50x?$CFx?0?5ImageLength?5?$DN@|
  014e0		 |$LN52@DownloadSi|
  014e0	00000000	 DCD         |??_C@_0BI@KDBHNKIE@Downloaded?5?$CFd?5records?$AN?6?$AA@|
  014e4		 |$LN53@DownloadSi|
  014e4	00000000	 DCD         |??_C@_02PCIJFNDE@?$AN?6?$AA@|
  014e8		 |$LN54@DownloadSi|
  014e8	00000000	 DCD         |??_C@_0EF@KMGGNDPA@?5?5?5?5?5?5?5?5?5?5?5?5?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@|
  014ec		 |$LN55@DownloadSi|
  014ec	00000000	 DCD         |??_C@_0EF@DMPBGGIN@?5?5?5?5?5?5?5?5?5?5?5?5?$CK?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@|
  014f0		 |$LN56@DownloadSi|
  014f0	00000000	 DCD         |??_C@_0EF@CGJFHBCJ@?5?5?5?5?5?5?5?5?5?5?5?5?$CK?5?5?5This?5image?5was?5s@|
  014f4		 |$LN57@DownloadSi|
  014f4	00000000	 DCD         |g_DownloadManifest|
  014f8		 |$LN58@DownloadSi|
  014f8	43454345	 DCD         0x43454345
  014fc		 |$LN59@DownloadSi|
  014fc	00000000	 DCD         |??_C@_0EL@FPJHPAOD@ERROR?3?5Signature?5validation?5fail@|
  01500		 |$LN60@DownloadSi|
  01500	00000000	 DCD         |g_keyData|
  01504		 |$LN61@DownloadSi|
  01504	00000000	 DCD         |g_rgpbSignature|
  01508		 |$LN62@DownloadSi|
  01508	00000000	 DCD         |??_C@_0DI@HDMNFPHA@ERROR?3?5Failed?5to?5read?5signature?5@|
  0150c		 |$LN63@DownloadSi|
  0150c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01510		 |$LN64@DownloadSi|
  01510	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01514		 |$LN65@DownloadSi|
  01514	00000000	 DCD         |??_C@_1KG@EIOKEHIP@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01518		 |$LN66@DownloadSi|
  01518	00000000	 DCD         |??_C@_0BD@PHLGNLDI@rom_offset?$DN0x?$CFx?4?$AN?6?$AA@|
  0151c		 |$LN67@DownloadSi|
  0151c	00000000	 DCD         |g_dwROMOffset|
  01520		 |$LN68@DownloadSi|
  01520	00000000	 DCD         |??_C@_0CI@JBLMDHKB@dwChunksRemaining?5?$DN?5?$CFd?0?5offset?5?$DN@|
  01524		 |$LN69@DownloadSi|
  01524	00000000	 DCD         |??_C@_0DJ@IIBDPHPA@Read?50x?$CFx?5bytes?5into?5cache?3?50x?$CFx@|
  01528		 |$LN70@DownloadSi|
  01528	00000000	 DCD         |??_C@_0CK@FKELKNBC@ERROR?3?5Data?5packet?5?$CFd?5corrupted?0@|
  0152c		 |$LN71@DownloadSi|
  0152c	00000000	 DCD         |??_C@_0CK@MHLPBKBP@Reached?5last?5record?5of?5signed?5?4b@|
  01530		 |$LN72@DownloadSi|
  01530	00000000	 DCD         |??_C@_0EH@FMDCFBLP@?5?$DM?$DO?5Record?5?$FL?5?$CFd?5?$FN?5dwRecAddr?5?$DN?50x@|
  01534		 |$LN73@DownloadSi|
  01534	00000000	 DCD         |??_C@_0DG@FCKPNIAC@ERROR?3?5Failed?5to?5read?5?4bin?5recor@|
  01538		 |$LN74@DownloadSi|
  01538	00000000	 DCD         |??_C@_0EO@LDJAOKIA@?5?$DM?$DO?5Packet?5?$FL?5?$CFd?5?$FN?5dwSignedDataLe@|
  0153c		 |$LN75@DownloadSi|
  0153c	00000000	 DCD         |??_C@_0DI@NMKBLNAC@ERROR?3?5Failed?5to?5read?5signed?5pac@|
  01540		 |$LN76@DownloadSi|
  01540	00000000	 DCD         |??_C@_0CM@HDMMPKFG@?5?$DM?$DO?5Record?5chunk?5?$CIdwChunksRemain@|
  01544		 |$LN77@DownloadSi|
  01544	00000000	 DCD         |??_C@_0FD@KBPPNIMB@?$AN?6?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@|
  01548		 |$LN78@DownloadSi|
  01548	00000000	 DCD         |??_C@_0EB@CGKACAF@ERROR?3?5Failed?5to?5read?5random?5see@|
  0154c		 |$LN79@DownloadSi|
  0154c	00000000	 DCD         |??_C@_0BP@EOFEMPOO@Invalid?5flash?5address?1length?$AN?6?$AA@|
  01550		 |$LN80@DownloadSi|
  01550	00000000	 DCD         |??_C@_0CC@DNECAMLM@?$CBOEMVERIFYMEMORY?3?5Invalid?5image?$AN@|
  01554		 |$LN81@DownloadSi|
  01554	00000000	 DCD         |g_pOEMVerifyMemory|
  01558		 |$LN82@DownloadSi|
  01558	00000000	 DCD         |g_downloadFilesRemaining|
  0155c		 |$LN83@DownloadSi|
  0155c	00000000	 DCD         |g_fOEMNotified|
  01560		 |$LN84@DownloadSi|
  01560	00000000	 DCD         |g_pOEMMultiBINNotify|
  01564		 |$LN85@DownloadSi|
  01564	00000000	 DCD         |??_C@_0CE@NKAMCDHO@Unable?5to?5read?5image?5start?1lengt@|
  01568		 |$LN86@DownloadSi|
  01568	00000000	 DCD         |g_bBINDownload|
  0156c		 |$LN87@DownloadSi|
  0156c	00000000	 DCD         |__security_cookie|
  01570		 |$M41223|

			 ENDP  ; |DownloadSignedBin|

	EXPORT	|??_C@_0DJ@KBLPDGCA@Invalid?5flash?5address?1length?5or?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0EJ@PDNPMPAK@Image?5size?5after?5stripping?5signe@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CO@PFLGIDFG@ERROR?3?5failed?5when?5reading?5raw?5b@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CB@EOPJODDD@ERROR?3?5bad?5bFlags?50x?$CFx?0?5ABORT?$CB?$AN?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_0EF@ONLEIMCC@?5?$DM?$DO?5Packet?5?$FL?5?$CFd?5?$FN?5dwDataLen?5?$DN?50x@| [ DATA ] ; `string'
	EXPORT	|??_C@_04FMMHFHOO@?$AN?6?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_03IGDBGCKF@?$CFx?5?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BN@BKIPIKBJ@?$AN?6Signed?5file?5random?5seed?5?$DN?5?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DO@DKOHJKOF@ERROR?3?5Didn?8t?5find?5random?5seed?5a@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]

  00048			 AREA	 |.pdata|, PDATA
|$T41278| DCD	|$LN28@DownloadSi@2|
	DCD	0xc001c204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DJ@KBLPDGCA@Invalid?5flash?5address?1length?5or?5@| DCB "Invalid "
	DCB	"flash address/length or flash operation failed", 0xd, 0xa
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EJ@PDNPMPAK@Image?5size?5after?5stripping?5signe@| DCB "Image siz"
	DCB	"e after stripping signed headers/footers for %d packets:"
	DCB	" 0x%x", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CO@PFLGIDFG@ERROR?3?5failed?5when?5reading?5raw?5b@| DCB "ERROR: "
	DCB	"failed when reading raw binary file.", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CB@EOPJODDD@ERROR?3?5bad?5bFlags?50x?$CFx?0?5ABORT?$CB?$AN?6@| DCB "E"
	DCB	"RROR: bad bFlags 0x%x, ABORT!", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EF@ONLEIMCC@?5?$DM?$DO?5Packet?5?$FL?5?$CFd?5?$FN?5dwDataLen?5?$DN?50x@| DCB " "
	DCB	"<> Packet [ %d ] dwDataLen = 0x%x, dwSigLen = 0x%x, bFla"
	DCB	"gs = 0x%x", 0xd, 0xa, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04FMMHFHOO@?$AN?6?$AN?6?$AA@| DCB 0xd, 0xa, 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_03IGDBGCKF@?$CFx?5?$AA@| DCB "%x ", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BN@BKIPIKBJ@?$AN?6Signed?5file?5random?5seed?5?$DN?5?$AA@| DCB 0xd
	DCB	0xa, "Signed file random seed = ", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DO@DKOHJKOF@ERROR?3?5Didn?8t?5find?5random?5seed?5a@| DCB "ERROR:"
	DCB	" Didn't find random seed at start of signed .nb0 file", 0xd
	DCB	0xa, 0x0				; `string'

  00004			 AREA	 |.xdata|, DATA
|$T41274| DCD	0xffffffa0
; Function compile flags: /Odtp

  01570			 AREA	 |.text|, CODE, ARM

  01570	00000000	 DCD         |__GSHandlerCheck|
  01574	00000000	 DCD         |$T41274|

  01578		 |DownloadSignedNB0| PROC

; 851  : {

  01578		 |$LN28@DownloadSi@2|
  01578	e1a0c00d	 mov         r12, sp
  0157c	e92d0007	 stmdb       sp!, {r0 - r2}
  01580	e92d5000	 stmdb       sp!, {r12, lr}
  01584	e24dd0c8	 sub         sp, sp, #0xC8
  01588		 |$M41275|
  01588	e59f36ec	 ldr         r3, [pc, #0x6EC]
  0158c	e5933000	 ldr         r3, [r3]
  01590	e58d307c	 str         r3, [sp, #0x7C]

; 852  :     RegionInfo *pCurDownloadFile;
; 853  :     LPBYTE      lpDest = NULL;

  01594	e3a03000	 mov         r3, #0
  01598	e58d3058	 str         r3, [sp, #0x58]

; 854  :     DWORD       dwPacketNum = 1;

  0159c	e3a03001	 mov         r3, #1
  015a0	e58d3068	 str         r3, [sp, #0x68]

; 855  :     DWORD       dwSignedDataLength, dwSigLength;
; 856  :     BYTE        bFlags;
; 857  :     PACKETDATA  packetData;
; 858  :     HRESULT     hr;
; 859  :             
; 860  :     g_bBINDownload = FALSE;

  015a4	e59f26cc	 ldr         r2, [pc, #0x6CC]
  015a8	e3a03000	 mov         r3, #0
  015ac	e5c23000	 strb        r3, [r2]

; 861  :     
; 862  : 
; 863  :     // Provide the download manifest to the OEM.  This gives the OEM the
; 864  :     // opportunity to provide start addresses for the .nb0 files (which 
; 865  :     // don't contain placement information like .bin files do).
; 866  :     if (!g_fOEMNotified && g_pOEMMultiBINNotify)

  015b0	e59f36b8	 ldr         r3, [pc, #0x6B8]
  015b4	e5933000	 ldr         r3, [r3]
  015b8	e3530000	 cmp         r3, #0
  015bc	1a00000b	 bne         |$LN17@DownloadSi@2|
  015c0	e59f36ac	 ldr         r3, [pc, #0x6AC]
  015c4	e5933000	 ldr         r3, [r3]
  015c8	e3530000	 cmp         r3, #0
  015cc	0a000007	 beq         |$LN17@DownloadSi@2|

; 867  :     {
; 868  :         g_pOEMMultiBINNotify((PDownloadManifest)&g_DownloadManifest);

  015d0	e59f0690	 ldr         r0, [pc, #0x690]
  015d4	e59f3698	 ldr         r3, [pc, #0x698]
  015d8	e5933000	 ldr         r3, [r3]
  015dc	e1a0e00f	 mov         lr, pc
  015e0	e12fff13	 bx          r3

; 869  :         g_fOEMNotified = TRUE;

  015e4	e59f2684	 ldr         r2, [pc, #0x684]
  015e8	e3a03001	 mov         r3, #1
  015ec	e5823000	 str         r3, [r2]
  015f0		 |$LN17@DownloadSi@2|

; 870  :     }
; 871  : 
; 872  :     // Locate the current download manifest entry (current download file).
; 873  :     //
; 874  :     pCurDownloadFile = &g_DownloadManifest.Region[g_DownloadManifest.dwNumRegions - g_downloadFilesRemaining];

  015f0	e59f3674	 ldr         r3, [pc, #0x674]
  015f4	e5d32000	 ldrb        r2, [r3]
  015f8	e59f3668	 ldr         r3, [pc, #0x668]
  015fc	e5933000	 ldr         r3, [r3]
  01600	e0431002	 sub         r1, r3, r2
  01604	e3a03f43	 mov         r3, #0x43, 30
  01608	e0020391	 mul         r2, r1, r3
  0160c	e59f3654	 ldr         r3, [pc, #0x654]
  01610	e2833004	 add         r3, r3, #4
  01614	e0833002	 add         r3, r3, r2
  01618	e58d3070	 str         r3, [sp, #0x70]

; 875  : 
; 876  :     // give the OEM a chance to verify memory
; 877  :     if (g_pOEMVerifyMemory && !g_pOEMVerifyMemory (pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionLength))

  0161c	e59f3640	 ldr         r3, [pc, #0x640]
  01620	e5933000	 ldr         r3, [r3]
  01624	e3530000	 cmp         r3, #0
  01628	0a000015	 beq         |$LN16@DownloadSi@2|
  0162c	e59d3070	 ldr         r3, [sp, #0x70]
  01630	e2833004	 add         r3, r3, #4
  01634	e5931000	 ldr         r1, [r3]
  01638	e59d3070	 ldr         r3, [sp, #0x70]
  0163c	e5930000	 ldr         r0, [r3]
  01640	e59f361c	 ldr         r3, [pc, #0x61C]
  01644	e5933000	 ldr         r3, [r3]
  01648	e1a0e00f	 mov         lr, pc
  0164c	e12fff13	 bx          r3
  01650	e58d0088	 str         r0, [sp, #0x88]
  01654	e59d3088	 ldr         r3, [sp, #0x88]
  01658	e3530000	 cmp         r3, #0
  0165c	1a000008	 bne         |$LN16@DownloadSi@2|

; 878  :     {
; 879  :         KITLOutputDebugString ("!OEMVERIFYMEMORY: Invalid image\r\n");

  01660	e59f05f8	 ldr         r0, [pc, #0x5F8]
  01664	eb000000	 bl          KITLOutputDebugString

; 880  :         HALT (BLERR_OEMVERIFY);

  01668	e3e00008	 mvn         r0, #8
  0166c	eb000000	 bl          HALT

; 881  :         return (FALSE);

  01670	e59d007c	 ldr         r0, [sp, #0x7C]
  01674	eb000000	 bl          __security_check_cookie
  01678	e3a03000	 mov         r3, #0
  0167c	e58d3080	 str         r3, [sp, #0x80]
  01680	ea00015c	 b           |$LN18@DownloadSi@2|
  01684		 |$LN16@DownloadSi@2|

; 882  :     }
; 883  : 
; 884  : 
; 885  :     //------------------------------------------------------------------------
; 886  :     //  Signed files are prefixed with a 16-byte random seed, which
; 887  :     //  is included in the hash.
; 888  :     //------------------------------------------------------------------------
; 889  : 
; 890  :     if (!OEMReadData (RANDOM_SEED_LENGTH, (LPBYTE) &packetData.bRandomSeed))

  01684	e28d1040	 add         r1, sp, #0x40
  01688	e3a00010	 mov         r0, #0x10
  0168c	eb000000	 bl          OEMReadData
  01690	e58d008c	 str         r0, [sp, #0x8C]
  01694	e59d308c	 ldr         r3, [sp, #0x8C]
  01698	e3530000	 cmp         r3, #0
  0169c	1a000009	 bne         |$LN15@DownloadSi@2|

; 891  :     {
; 892  :         KITLOutputDebugString ("ERROR: Didn't find random seed at start of signed .nb0 file\r\n");

  016a0	e59f05b4	 ldr         r0, [pc, #0x5B4]
  016a4	eb000000	 bl          KITLOutputDebugString

; 893  :         HALT (BLERR_MAGIC);

  016a8	e3e00007	 mvn         r0, #7
  016ac	eb000000	 bl          HALT

; 894  :         return (FALSE);

  016b0	e59d007c	 ldr         r0, [sp, #0x7C]
  016b4	eb000000	 bl          __security_check_cookie
  016b8	e3a03000	 mov         r3, #0
  016bc	e58d3080	 str         r3, [sp, #0x80]
  016c0	ea00014c	 b           |$LN18@DownloadSi@2|

; 895  :     } else {

  016c4	ea000013	 b           |$LN14@DownloadSi@2|
  016c8		 |$LN15@DownloadSi@2|

; 896  : #ifdef DEBUG
; 897  :         int i;
; 898  :         KITLOutputDebugString("\r\nSigned file random seed = ");

  016c8	e59f0588	 ldr         r0, [pc, #0x588]
  016cc	eb000000	 bl          KITLOutputDebugString

; 899  :         for (i = 0; i < RANDOM_SEED_LENGTH; i++) {

  016d0	e3a03000	 mov         r3, #0
  016d4	e58d3074	 str         r3, [sp, #0x74]
  016d8	ea000002	 b           |$LN13@DownloadSi@2|
  016dc		 |$LN12@DownloadSi@2|
  016dc	e59d3074	 ldr         r3, [sp, #0x74]
  016e0	e2833001	 add         r3, r3, #1
  016e4	e58d3074	 str         r3, [sp, #0x74]
  016e8		 |$LN13@DownloadSi@2|
  016e8	e59d3074	 ldr         r3, [sp, #0x74]
  016ec	e3530010	 cmp         r3, #0x10
  016f0	aa000006	 bge         |$LN11@DownloadSi@2|

; 900  :             KITLOutputDebugString("%x ", packetData.bRandomSeed[i]);   

  016f4	e28d2040	 add         r2, sp, #0x40
  016f8	e59d3074	 ldr         r3, [sp, #0x74]
  016fc	e0823003	 add         r3, r2, r3
  01700	e5d31000	 ldrb        r1, [r3]
  01704	e59f0548	 ldr         r0, [pc, #0x548]
  01708	eb000000	 bl          KITLOutputDebugString

; 901  :         }

  0170c	eafffff2	 b           |$LN12@DownloadSi@2|
  01710		 |$LN11@DownloadSi@2|

; 902  :         KITLOutputDebugString("\r\n\r\n");

  01710	e59f0538	 ldr         r0, [pc, #0x538]
  01714	eb000000	 bl          KITLOutputDebugString
  01718		 |$LN14@DownloadSi@2|

; 903  : #endif        
; 904  :     }
; 905  : 
; 906  : 
; 907  :     //------------------------------------------------------------------------
; 908  :     //  Download signed packets of raw data (.nb0)
; 909  :     //------------------------------------------------------------------------
; 910  : 
; 911  :     lpDest = OEMMapMemAddr (pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionStart);

  01718	e59d3070	 ldr         r3, [sp, #0x70]
  0171c	e5931000	 ldr         r1, [r3]
  01720	e59d3070	 ldr         r3, [sp, #0x70]
  01724	e5930000	 ldr         r0, [r3]
  01728	eb000000	 bl          OEMMapMemAddr
  0172c	e58d0090	 str         r0, [sp, #0x90]
  01730	e59d3090	 ldr         r3, [sp, #0x90]
  01734	e58d3058	 str         r3, [sp, #0x58]
  01738		 |$LN10@DownloadSi@2|

; 912  : 
; 913  :     while ( OEMReadData (sizeof (DWORD), (LPBYTE) &dwSignedDataLength) &&
; 914  :             OEMReadData (sizeof (DWORD), (LPBYTE) &dwSigLength)        &&
; 915  :             OEMReadData (sizeof (BYTE),  (LPBYTE) &bFlags) )

  01738	e28d105c	 add         r1, sp, #0x5C
  0173c	e3a00004	 mov         r0, #4
  01740	eb000000	 bl          OEMReadData
  01744	e58d0094	 str         r0, [sp, #0x94]
  01748	e59d3094	 ldr         r3, [sp, #0x94]
  0174c	e3530000	 cmp         r3, #0
  01750	0a0000b2	 beq         |$LN9@DownloadSi@2|
  01754	e28d1060	 add         r1, sp, #0x60
  01758	e3a00004	 mov         r0, #4
  0175c	eb000000	 bl          OEMReadData
  01760	e58d0098	 str         r0, [sp, #0x98]
  01764	e59d3098	 ldr         r3, [sp, #0x98]
  01768	e3530000	 cmp         r3, #0
  0176c	0a0000ab	 beq         |$LN9@DownloadSi@2|
  01770	e28d1064	 add         r1, sp, #0x64
  01774	e3a00001	 mov         r0, #1
  01778	eb000000	 bl          OEMReadData
  0177c	e58d009c	 str         r0, [sp, #0x9C]
  01780	e59d309c	 ldr         r3, [sp, #0x9C]
  01784	e3530000	 cmp         r3, #0
  01788	0a0000a4	 beq         |$LN9@DownloadSi@2|

; 916  :     {
; 917  : #ifdef DEBUG
; 918  :         KITLOutputDebugString("\r\n------------------------------------------------------------------------------\r\n");

  0178c	e59f04b8	 ldr         r0, [pc, #0x4B8]
  01790	eb000000	 bl          KITLOutputDebugString

; 919  :         KITLOutputDebugString(" <> Packet [ %d ] dwDataLen = 0x%x, dwSigLen = 0x%x, bFlags = 0x%x\r\n", 
; 920  :             dwPacketNum, dwSignedDataLength, dwSigLength, bFlags);

  01794	e5dd3064	 ldrb        r3, [sp, #0x64]
  01798	e58d3000	 str         r3, [sp]
  0179c	e59d3060	 ldr         r3, [sp, #0x60]
  017a0	e59d205c	 ldr         r2, [sp, #0x5C]
  017a4	e59d1068	 ldr         r1, [sp, #0x68]
  017a8	e59f0498	 ldr         r0, [pc, #0x498]
  017ac	eb000000	 bl          KITLOutputDebugString

; 921  : #endif
; 922  : 
; 923  :         // check bFlags
; 924  :         if (bFlags & SBL_FLAG_END_FILE) 

  017b0	e5dd3064	 ldrb        r3, [sp, #0x64]
  017b4	e3130002	 tst         r3, #2
  017b8	0a000021	 beq         |$LN8@DownloadSi@2|

; 925  :         {
; 926  :             // last packet always has unused signature block, read it!
; 927  :             ASSERT(dwSignedDataLength == 0);

  017bc	e59d305c	 ldr         r3, [sp, #0x5C]
  017c0	e3530000	 cmp         r3, #0
  017c4	1a000002	 bne         |$LN20@DownloadSi@2|
  017c8	e3a03001	 mov         r3, #1
  017cc	e58d30a0	 str         r3, [sp, #0xA0]
  017d0	ea000008	 b           |$LN21@DownloadSi@2|
  017d4		 |$LN20@DownloadSi@2|
  017d4	e3a03c03	 mov         r3, #3, 24
  017d8	e383309f	 orr         r3, r3, #0x9F
  017dc	e59f2458	 ldr         r2, [pc, #0x458]
  017e0	e59f1450	 ldr         r1, [pc, #0x450]
  017e4	e59f0448	 ldr         r0, [pc, #0x448]
  017e8	eb000000	 bl          NKDbgPrintfW
  017ec	e6000010	 __debugbreak_ce
  017f0	e3a03000	 mov         r3, #0
  017f4	e58d30a0	 str         r3, [sp, #0xA0]
  017f8		 |$LN21@DownloadSi@2|

; 928  :             ASSERT(dwSigLength <= sizeof(g_rgpbSignature));

  017f8	e59d3060	 ldr         r3, [sp, #0x60]
  017fc	e3530080	 cmp         r3, #0x80
  01800	8a000002	 bhi         |$LN22@DownloadSi@2|
  01804	e3a03001	 mov         r3, #1
  01808	e58d30a4	 str         r3, [sp, #0xA4]
  0180c	ea000007	 b           |$LN23@DownloadSi@2|
  01810		 |$LN22@DownloadSi@2|
  01810	e3a03e3a	 mov         r3, #0x3A, 28
  01814	e59f2420	 ldr         r2, [pc, #0x420]
  01818	e59f1418	 ldr         r1, [pc, #0x418]
  0181c	e59f0410	 ldr         r0, [pc, #0x410]
  01820	eb000000	 bl          NKDbgPrintfW
  01824	e6000010	 __debugbreak_ce
  01828	e3a03000	 mov         r3, #0
  0182c	e58d30a4	 str         r3, [sp, #0xA4]
  01830		 |$LN23@DownloadSi@2|

; 929  :             OEMReadData (dwSigLength, (LPBYTE) &g_rgpbSignature);

  01830	e59f13f4	 ldr         r1, [pc, #0x3F4]
  01834	e59d0060	 ldr         r0, [sp, #0x60]
  01838	eb000000	 bl          OEMReadData
  0183c	ea000077	 b           |$LN9@DownloadSi@2|

; 930  :             break;

  01840	ea00000c	 b           |$LN7@DownloadSi@2|
  01844		 |$LN8@DownloadSi@2|

; 931  :         } 
; 932  :         else if (!(bFlags & SBL_FLAG_NORMAL)) 

  01844	e5dd3064	 ldrb        r3, [sp, #0x64]
  01848	e3130001	 tst         r3, #1
  0184c	1a000009	 bne         |$LN6@DownloadSi@2|

; 933  :         {
; 934  :             KITLOutputDebugString("ERROR: bad bFlags 0x%x, ABORT!\r\n", bFlags);

  01850	e5dd1064	 ldrb        r1, [sp, #0x64]
  01854	e59f03e8	 ldr         r0, [pc, #0x3E8]
  01858	eb000000	 bl          KITLOutputDebugString

; 935  :             HALT (BLERR_CORRUPTED_DATA);

  0185c	e3e00003	 mvn         r0, #3
  01860	eb000000	 bl          HALT

; 936  :             return (FALSE);

  01864	e59d007c	 ldr         r0, [sp, #0x7C]
  01868	eb000000	 bl          __security_check_cookie
  0186c	e3a03000	 mov         r3, #0
  01870	e58d3080	 str         r3, [sp, #0x80]
  01874	ea0000df	 b           |$LN18@DownloadSi@2|
  01878		 |$LN6@DownloadSi@2|
  01878		 |$LN7@DownloadSi@2|

; 937  :         }
; 938  :         
; 939  :         // read packet data
; 940  :         if (!OEMReadData (dwSignedDataLength, lpDest))

  01878	e59d1058	 ldr         r1, [sp, #0x58]
  0187c	e59d005c	 ldr         r0, [sp, #0x5C]
  01880	eb000000	 bl          OEMReadData
  01884	e58d00a8	 str         r0, [sp, #0xA8]
  01888	e59d30a8	 ldr         r3, [sp, #0xA8]
  0188c	e3530000	 cmp         r3, #0
  01890	1a000008	 bne         |$LN5@DownloadSi@2|

; 941  :         {
; 942  :             KITLOutputDebugString ("ERROR: failed when reading raw binary file.\r\n");

  01894	e59f03a4	 ldr         r0, [pc, #0x3A4]
  01898	eb000000	 bl          KITLOutputDebugString

; 943  :             HALT (BLERR_CORRUPTED_DATA);

  0189c	e3e00003	 mvn         r0, #3
  018a0	eb000000	 bl          HALT

; 944  :             return (FALSE);

  018a4	e59d007c	 ldr         r0, [sp, #0x7C]
  018a8	eb000000	 bl          __security_check_cookie
  018ac	e3a03000	 mov         r3, #0
  018b0	e58d3080	 str         r3, [sp, #0x80]
  018b4	ea0000cf	 b           |$LN18@DownloadSi@2|
  018b8		 |$LN5@DownloadSi@2|

; 945  :         }
; 946  :         
; 947  :         // read packet signature
; 948  :         ASSERT(dwSigLength <= sizeof(g_rgpbSignature));

  018b8	e59d3060	 ldr         r3, [sp, #0x60]
  018bc	e3530080	 cmp         r3, #0x80
  018c0	8a000002	 bhi         |$LN24@DownloadSi@2|
  018c4	e3a03001	 mov         r3, #1
  018c8	e58d30ac	 str         r3, [sp, #0xAC]
  018cc	ea000007	 b           |$LN25@DownloadSi@2|
  018d0		 |$LN24@DownloadSi@2|
  018d0	e3a03fed	 mov         r3, #0xED, 30
  018d4	e59f2360	 ldr         r2, [pc, #0x360]
  018d8	e59f1358	 ldr         r1, [pc, #0x358]
  018dc	e59f0350	 ldr         r0, [pc, #0x350]
  018e0	eb000000	 bl          NKDbgPrintfW
  018e4	e6000010	 __debugbreak_ce
  018e8	e3a03000	 mov         r3, #0
  018ec	e58d30ac	 str         r3, [sp, #0xAC]
  018f0		 |$LN25@DownloadSi@2|

; 949  :         if (!OEMReadData (dwSigLength, (LPBYTE) &g_rgpbSignature))

  018f0	e59f1334	 ldr         r1, [pc, #0x334]
  018f4	e59d0060	 ldr         r0, [sp, #0x60]
  018f8	eb000000	 bl          OEMReadData
  018fc	e58d00b0	 str         r0, [sp, #0xB0]
  01900	e59d30b0	 ldr         r3, [sp, #0xB0]
  01904	e3530000	 cmp         r3, #0
  01908	1a000009	 bne         |$LN4@DownloadSi@2|

; 950  :         {
; 951  :             KITLOutputDebugString ("ERROR: Failed to read signature for packet %d, ABORT!\r\n", dwPacketNum);

  0190c	e59d1068	 ldr         r1, [sp, #0x68]
  01910	e59f0318	 ldr         r0, [pc, #0x318]
  01914	eb000000	 bl          KITLOutputDebugString

; 952  :             HALT (BLERR_SIGNATURE);

  01918	e3e00004	 mvn         r0, #4
  0191c	eb000000	 bl          HALT

; 953  :             return (FALSE);

  01920	e59d007c	 ldr         r0, [sp, #0x7C]
  01924	eb000000	 bl          __security_check_cookie
  01928	e3a03000	 mov         r3, #0
  0192c	e58d3080	 str         r3, [sp, #0x80]
  01930	ea0000b0	 b           |$LN18@DownloadSi@2|
  01934		 |$LN4@DownloadSi@2|

; 954  :         }
; 955  :     
; 956  :         //------------------------------------------------------------------------
; 957  :         //  Validate the signature for this packet
; 958  :         //------------------------------------------------------------------------
; 959  : 
; 960  :         packetData.pbData       = lpDest;               // data to verify               

  01934	e59d3058	 ldr         r3, [sp, #0x58]
  01938	e58d3024	 str         r3, [sp, #0x24]

; 961  :         packetData.dwDataLength = dwSignedDataLength;   // length of data in bytes              

  0193c	e59d305c	 ldr         r3, [sp, #0x5C]
  01940	e58d3028	 str         r3, [sp, #0x28]

; 962  :         packetData.pbSig        = g_rgpbSignature;      // signature to verify               

  01944	e59f32e0	 ldr         r3, [pc, #0x2E0]
  01948	e58d302c	 str         r3, [sp, #0x2C]

; 963  :         packetData.dwSigLength  = dwSigLength;          // length of signature in bytes                

  0194c	e59d3060	 ldr         r3, [sp, #0x60]
  01950	e58d3030	 str         r3, [sp, #0x30]

; 964  :         packetData.dwRecAddress = 0;                    // record address              

  01954	e3a03000	 mov         r3, #0
  01958	e58d3034	 str         r3, [sp, #0x34]

; 965  :         packetData.dwRecLength  = 0;                    // record length   

  0195c	e3a03000	 mov         r3, #0
  01960	e58d3038	 str         r3, [sp, #0x38]

; 966  :         packetData.dwRecCheck   = 0;                    // record checksum  

  01964	e3a03000	 mov         r3, #0
  01968	e58d303c	 str         r3, [sp, #0x3C]

; 967  :         packetData.dwSequenceNumber = dwPacketNum;      // packet sequence number           

  0196c	e59d3068	 ldr         r3, [sp, #0x68]
  01970	e58d3050	 str         r3, [sp, #0x50]

; 968  :         packetData.bFlags       = bFlags;               // Flags

  01974	e5dd3064	 ldrb        r3, [sp, #0x64]
  01978	e5cd3054	 strb        r3, [sp, #0x54]

; 969  : 
; 970  :         PrintPacketData( packetData );

  0197c	e28d0000	 add         r0, sp, #0
  01980	e28d1034	 add         r1, sp, #0x34
  01984	e3a02024	 mov         r2, #0x24
  01988	eb000000	 bl          memcpy
  0198c	e59d0024	 ldr         r0, [sp, #0x24]
  01990	e59d1028	 ldr         r1, [sp, #0x28]
  01994	e59d202c	 ldr         r2, [sp, #0x2C]
  01998	e59d3030	 ldr         r3, [sp, #0x30]
  0199c	eb000000	 bl          PrintPacketData

; 971  : 
; 972  :         hr = SBL_VerifyPacket( &packetData, &g_keyData );

  019a0	e59f1280	 ldr         r1, [pc, #0x280]
  019a4	e28d0024	 add         r0, sp, #0x24
  019a8	eb000000	 bl          SBL_VerifyPacket
  019ac	e58d00b4	 str         r0, [sp, #0xB4]
  019b0	e59d30b4	 ldr         r3, [sp, #0xB4]
  019b4	e58d306c	 str         r3, [sp, #0x6C]

; 973  : 
; 974  :         if (FAILED(hr)) {

  019b8	e59d306c	 ldr         r3, [sp, #0x6C]
  019bc	e3530000	 cmp         r3, #0
  019c0	aa00000a	 bge         |$LN3@DownloadSi@2|

; 975  :             KITLOutputDebugString("ERROR: Signature validation failed for packet %d with error 0x%x, ABORT!\r\n", dwPacketNum, hr);

  019c4	e59d206c	 ldr         r2, [sp, #0x6C]
  019c8	e59d1068	 ldr         r1, [sp, #0x68]
  019cc	e59f0250	 ldr         r0, [pc, #0x250]
  019d0	eb000000	 bl          KITLOutputDebugString

; 976  :             HALT (BLERR_SIGNATURE);

  019d4	e3e00004	 mvn         r0, #4
  019d8	eb000000	 bl          HALT

; 977  :             return (FALSE);

  019dc	e59d007c	 ldr         r0, [sp, #0x7C]
  019e0	eb000000	 bl          __security_check_cookie
  019e4	e3a03000	 mov         r3, #0
  019e8	e58d3080	 str         r3, [sp, #0x80]
  019ec	ea000081	 b           |$LN18@DownloadSi@2|
  019f0		 |$LN3@DownloadSi@2|

; 978  :         }
; 979  : 
; 980  :         lpDest += dwSignedDataLength;

  019f0	e59d2058	 ldr         r2, [sp, #0x58]
  019f4	e59d305c	 ldr         r3, [sp, #0x5C]
  019f8	e0823003	 add         r3, r2, r3
  019fc	e58d3058	 str         r3, [sp, #0x58]

; 981  :         
; 982  :         OEMShowProgress (dwPacketNum++);

  01a00	e59d3068	 ldr         r3, [sp, #0x68]
  01a04	e58d30b8	 str         r3, [sp, #0xB8]
  01a08	e59d00b8	 ldr         r0, [sp, #0xB8]
  01a0c	eb000000	 bl          OEMShowProgress
  01a10	e59d3068	 ldr         r3, [sp, #0x68]
  01a14	e2833001	 add         r3, r3, #1
  01a18	e58d3068	 str         r3, [sp, #0x68]

; 983  : 
; 984  :     } // end while(packets remaining)

  01a1c	eaffff45	 b           |$LN10@DownloadSi@2|
  01a20		 |$LN9@DownloadSi@2|

; 985  : 
; 986  : 
; 987  :     KITLOutputDebugString("\r\n");

  01a20	e59f01ec	 ldr         r0, [pc, #0x1EC]
  01a24	eb000000	 bl          KITLOutputDebugString

; 988  :     KITLOutputDebugString("            ******************************************************\r\n");

  01a28	e59f01e8	 ldr         r0, [pc, #0x1E8]
  01a2c	eb000000	 bl          KITLOutputDebugString

; 989  :     KITLOutputDebugString("            *                                                    *\r\n");

  01a30	e59f01e4	 ldr         r0, [pc, #0x1E4]
  01a34	eb000000	 bl          KITLOutputDebugString

; 990  :     KITLOutputDebugString("            *   This image was signed with a valid private key   *\r\n");

  01a38	e59f01e0	 ldr         r0, [pc, #0x1E0]
  01a3c	eb000000	 bl          KITLOutputDebugString

; 991  :     KITLOutputDebugString("            *                                                    *\r\n");

  01a40	e59f01d4	 ldr         r0, [pc, #0x1D4]
  01a44	eb000000	 bl          KITLOutputDebugString

; 992  :     KITLOutputDebugString("            ******************************************************\r\n");

  01a48	e59f01c8	 ldr         r0, [pc, #0x1C8]
  01a4c	eb000000	 bl          KITLOutputDebugString

; 993  :     KITLOutputDebugString("\r\n");

  01a50	e59f01bc	 ldr         r0, [pc, #0x1BC]
  01a54	eb000000	 bl          KITLOutputDebugString

; 994  : 
; 995  :     //------------------------------------------------------------------------
; 996  :     // PB sends the file size for .nb0 files (headers and all).
; 997  :     // Subtract the overhead of headers/footers; this is the true image size.
; 998  :     //------------------------------------------------------------------------
; 999  : 
; 1000 :     pCurDownloadFile->dwRegionLength -= BL_HDRSIG_SIZE;

  01a58	e59d3070	 ldr         r3, [sp, #0x70]
  01a5c	e2833004	 add         r3, r3, #4
  01a60	e5933000	 ldr         r3, [r3]
  01a64	e2432007	 sub         r2, r3, #7
  01a68	e59d3070	 ldr         r3, [sp, #0x70]
  01a6c	e2833004	 add         r3, r3, #4
  01a70	e5832000	 str         r2, [r3]

; 1001 :     pCurDownloadFile->dwRegionLength -= RANDOM_SEED_LENGTH;

  01a74	e59d3070	 ldr         r3, [sp, #0x70]
  01a78	e2833004	 add         r3, r3, #4
  01a7c	e5933000	 ldr         r3, [r3]
  01a80	e2432010	 sub         r2, r3, #0x10
  01a84	e59d3070	 ldr         r3, [sp, #0x70]
  01a88	e2833004	 add         r3, r3, #4
  01a8c	e5832000	 str         r2, [r3]

; 1002 :     pCurDownloadFile->dwRegionLength -= (dwPacketNum) * SBL_PACKET_HEADER_SIZE;

  01a90	e59d3070	 ldr         r3, [sp, #0x70]
  01a94	e2830004	 add         r0, r3, #4
  01a98	e59d1068	 ldr         r1, [sp, #0x68]
  01a9c	e3a03009	 mov         r3, #9
  01aa0	e0020391	 mul         r2, r1, r3
  01aa4	e5903000	 ldr         r3, [r0]
  01aa8	e0432002	 sub         r2, r3, r2
  01aac	e59d3070	 ldr         r3, [sp, #0x70]
  01ab0	e2833004	 add         r3, r3, #4
  01ab4	e5832000	 str         r2, [r3]

; 1003 :     pCurDownloadFile->dwRegionLength -= (dwPacketNum) * dwSigLength;

  01ab8	e59d3070	 ldr         r3, [sp, #0x70]
  01abc	e2830004	 add         r0, r3, #4
  01ac0	e59d1068	 ldr         r1, [sp, #0x68]
  01ac4	e59d3060	 ldr         r3, [sp, #0x60]
  01ac8	e0020391	 mul         r2, r1, r3
  01acc	e5903000	 ldr         r3, [r0]
  01ad0	e0432002	 sub         r2, r3, r2
  01ad4	e59d3070	 ldr         r3, [sp, #0x70]
  01ad8	e2833004	 add         r3, r3, #4
  01adc	e5832000	 str         r2, [r3]

; 1004 : 
; 1005 :     KITLOutputDebugString("Image size after stripping signed headers/footers for %d packets: 0x%x\r\n",
; 1006 :         dwPacketNum,
; 1007 :         pCurDownloadFile->dwRegionLength);

  01ae0	e59d3070	 ldr         r3, [sp, #0x70]
  01ae4	e2833004	 add         r3, r3, #4
  01ae8	e5932000	 ldr         r2, [r3]
  01aec	e59d1068	 ldr         r1, [sp, #0x68]
  01af0	e59f0118	 ldr         r0, [pc, #0x118]
  01af4	eb000000	 bl          KITLOutputDebugString

; 1008 : 
; 1009 : 
; 1010 :     //------------------------------------------------------------------------
; 1011 :     //  Determine the image entry point
; 1012 :     //------------------------------------------------------------------------
; 1013 : 
; 1014 :     *pdwImageStart  = pCurDownloadFile->dwRegionStart;

  01af8	e59d3070	 ldr         r3, [sp, #0x70]
  01afc	e5932000	 ldr         r2, [r3]
  01b00	e59d30d0	 ldr         r3, [sp, #0xD0]
  01b04	e5832000	 str         r2, [r3]

; 1015 :     *pdwLaunchAddr  = pCurDownloadFile->dwRegionStart;

  01b08	e59d3070	 ldr         r3, [sp, #0x70]
  01b0c	e5932000	 ldr         r2, [r3]
  01b10	e59d30d8	 ldr         r3, [sp, #0xD8]
  01b14	e5832000	 str         r2, [r3]

; 1016 :     *pdwImageLength = pCurDownloadFile->dwRegionLength;

  01b18	e59d3070	 ldr         r3, [sp, #0x70]
  01b1c	e2833004	 add         r3, r3, #4
  01b20	e5932000	 ldr         r2, [r3]
  01b24	e59d30d4	 ldr         r3, [sp, #0xD4]
  01b28	e5832000	 str         r2, [r3]

; 1017 : 
; 1018 :     KITLOutputDebugString("ImageStart = 0x%x, ImageLength = 0x%x, LaunchAddr = 0x%x\r\n",
; 1019 :         *pdwImageStart, *pdwImageLength, *pdwLaunchAddr);

  01b2c	e59d30d8	 ldr         r3, [sp, #0xD8]
  01b30	e5933000	 ldr         r3, [r3]
  01b34	e59d20d4	 ldr         r2, [sp, #0xD4]
  01b38	e5922000	 ldr         r2, [r2]
  01b3c	e59d10d0	 ldr         r1, [sp, #0xD0]
  01b40	e5911000	 ldr         r1, [r1]
  01b44	e59f00c0	 ldr         r0, [pc, #0xC0]
  01b48	eb000000	 bl          KITLOutputDebugString

; 1020 : 
; 1021 : 
; 1022 :     //------------------------------------------------------------------------
; 1023 :     // If this is a flash image, erase flash.
; 1024 :     // For signed images, we don't do this until the entire image has been
; 1025 :     // validated.
; 1026 :     //------------------------------------------------------------------------
; 1027 :     if (OEMIsFlashAddr(pCurDownloadFile->dwRegionStart))

  01b4c	e59d3070	 ldr         r3, [sp, #0x70]
  01b50	e5930000	 ldr         r0, [r3]
  01b54	eb000000	 bl          OEMIsFlashAddr
  01b58	e58d00bc	 str         r0, [sp, #0xBC]
  01b5c	e59d30bc	 ldr         r3, [sp, #0xBC]
  01b60	e3530000	 cmp         r3, #0
  01b64	0a00001f	 beq         |$LN2@DownloadSi@2|

; 1028 :     {
; 1029 :         BOOL rval = TRUE;

  01b68	e3a03001	 mov         r3, #1
  01b6c	e58d3078	 str         r3, [sp, #0x78]

; 1030 : 
; 1031 :         rval &= OEMStartEraseFlash(pCurDownloadFile->dwRegionStart, pCurDownloadFile->dwRegionLength);

  01b70	e59d3070	 ldr         r3, [sp, #0x70]
  01b74	e2833004	 add         r3, r3, #4
  01b78	e5931000	 ldr         r1, [r3]
  01b7c	e59d3070	 ldr         r3, [sp, #0x70]
  01b80	e5930000	 ldr         r0, [r3]
  01b84	eb000000	 bl          OEMStartEraseFlash
  01b88	e58d00c0	 str         r0, [sp, #0xC0]
  01b8c	e59d2078	 ldr         r2, [sp, #0x78]
  01b90	e59d30c0	 ldr         r3, [sp, #0xC0]
  01b94	e0023003	 and         r3, r2, r3
  01b98	e58d3078	 str         r3, [sp, #0x78]

; 1032 :                 OEMContinueEraseFlash();

  01b9c	eb000000	 bl          OEMContinueEraseFlash

; 1033 :         rval &= OEMFinishEraseFlash();

  01ba0	eb000000	 bl          OEMFinishEraseFlash
  01ba4	e58d00c4	 str         r0, [sp, #0xC4]
  01ba8	e59d2078	 ldr         r2, [sp, #0x78]
  01bac	e59d30c4	 ldr         r3, [sp, #0xC4]
  01bb0	e0023003	 and         r3, r2, r3
  01bb4	e58d3078	 str         r3, [sp, #0x78]

; 1034 : 
; 1035 :         if (!rval)

  01bb8	e59d3078	 ldr         r3, [sp, #0x78]
  01bbc	e3530000	 cmp         r3, #0
  01bc0	1a000008	 bne         |$LN1@DownloadSi@2|

; 1036 :         {
; 1037 :             KITLOutputDebugString ("Invalid flash address/length or flash operation failed\r\n");

  01bc4	e59f003c	 ldr         r0, [pc, #0x3C]
  01bc8	eb000000	 bl          KITLOutputDebugString

; 1038 :             HALT (BLERR_FLASHADDR);

  01bcc	e3e00009	 mvn         r0, #9
  01bd0	eb000000	 bl          HALT

; 1039 :             return (FALSE);

  01bd4	e59d007c	 ldr         r0, [sp, #0x7C]
  01bd8	eb000000	 bl          __security_check_cookie
  01bdc	e3a03000	 mov         r3, #0
  01be0	e58d3080	 str         r3, [sp, #0x80]
  01be4	ea000003	 b           |$LN18@DownloadSi@2|
  01be8		 |$LN1@DownloadSi@2|
  01be8		 |$LN2@DownloadSi@2|

; 1040 :         }
; 1041 :     }
; 1042 :     
; 1043 :     return TRUE;

  01be8	e59d007c	 ldr         r0, [sp, #0x7C]
  01bec	eb000000	 bl          __security_check_cookie
  01bf0	e3a03001	 mov         r3, #1
  01bf4	e58d3080	 str         r3, [sp, #0x80]
  01bf8		 |$LN18@DownloadSi@2|

; 1044 : }

  01bf8	e59d0080	 ldr         r0, [sp, #0x80]
  01bfc	e28dd0c8	 add         sp, sp, #0xC8
  01c00	e89d6000	 ldmia       sp, {sp, lr}
  01c04	e12fff1e	 bx          lr
  01c08		 |$LN29@DownloadSi@2|
  01c08		 |$LN30@DownloadSi@2|
  01c08	00000000	 DCD         |??_C@_0DJ@KBLPDGCA@Invalid?5flash?5address?1length?5or?5@|
  01c0c		 |$LN31@DownloadSi@2|
  01c0c	00000000	 DCD         |??_C@_0DL@DCHMDHHD@ImageStart?5?$DN?50x?$CFx?0?5ImageLength?5?$DN@|
  01c10		 |$LN32@DownloadSi@2|
  01c10	00000000	 DCD         |??_C@_0EJ@PDNPMPAK@Image?5size?5after?5stripping?5signe@|
  01c14		 |$LN33@DownloadSi@2|
  01c14	00000000	 DCD         |??_C@_02PCIJFNDE@?$AN?6?$AA@|
  01c18		 |$LN34@DownloadSi@2|
  01c18	00000000	 DCD         |??_C@_0EF@KMGGNDPA@?5?5?5?5?5?5?5?5?5?5?5?5?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@|
  01c1c		 |$LN35@DownloadSi@2|
  01c1c	00000000	 DCD         |??_C@_0EF@DMPBGGIN@?5?5?5?5?5?5?5?5?5?5?5?5?$CK?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5?5@|
  01c20		 |$LN36@DownloadSi@2|
  01c20	00000000	 DCD         |??_C@_0EF@CGJFHBCJ@?5?5?5?5?5?5?5?5?5?5?5?5?$CK?5?5?5This?5image?5was?5s@|
  01c24		 |$LN37@DownloadSi@2|
  01c24	00000000	 DCD         |??_C@_0EL@FPJHPAOD@ERROR?3?5Signature?5validation?5fail@|
  01c28		 |$LN38@DownloadSi@2|
  01c28	00000000	 DCD         |g_keyData|
  01c2c		 |$LN39@DownloadSi@2|
  01c2c	00000000	 DCD         |g_rgpbSignature|
  01c30		 |$LN40@DownloadSi@2|
  01c30	00000000	 DCD         |??_C@_0DI@HDMNFPHA@ERROR?3?5Failed?5to?5read?5signature?5@|
  01c34		 |$LN41@DownloadSi@2|
  01c34	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01c38		 |$LN42@DownloadSi@2|
  01c38	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01c3c		 |$LN43@DownloadSi@2|
  01c3c	00000000	 DCD         |??_C@_1KG@EIOKEHIP@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01c40		 |$LN44@DownloadSi@2|
  01c40	00000000	 DCD         |??_C@_0CO@PFLGIDFG@ERROR?3?5failed?5when?5reading?5raw?5b@|
  01c44		 |$LN45@DownloadSi@2|
  01c44	00000000	 DCD         |??_C@_0CB@EOPJODDD@ERROR?3?5bad?5bFlags?50x?$CFx?0?5ABORT?$CB?$AN?6@|
  01c48		 |$LN46@DownloadSi@2|
  01c48	00000000	 DCD         |??_C@_0EF@ONLEIMCC@?5?$DM?$DO?5Packet?5?$FL?5?$CFd?5?$FN?5dwDataLen?5?$DN?50x@|
  01c4c		 |$LN47@DownloadSi@2|
  01c4c	00000000	 DCD         |??_C@_0FD@KBPPNIMB@?$AN?6?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@|
  01c50		 |$LN48@DownloadSi@2|
  01c50	00000000	 DCD         |??_C@_04FMMHFHOO@?$AN?6?$AN?6?$AA@|
  01c54		 |$LN49@DownloadSi@2|
  01c54	00000000	 DCD         |??_C@_03IGDBGCKF@?$CFx?5?$AA@|
  01c58		 |$LN50@DownloadSi@2|
  01c58	00000000	 DCD         |??_C@_0BN@BKIPIKBJ@?$AN?6Signed?5file?5random?5seed?5?$DN?5?$AA@|
  01c5c		 |$LN51@DownloadSi@2|
  01c5c	00000000	 DCD         |??_C@_0DO@DKOHJKOF@ERROR?3?5Didn?8t?5find?5random?5seed?5a@|
  01c60		 |$LN52@DownloadSi@2|
  01c60	00000000	 DCD         |??_C@_0CC@DNECAMLM@?$CBOEMVERIFYMEMORY?3?5Invalid?5image?$AN@|
  01c64		 |$LN53@DownloadSi@2|
  01c64	00000000	 DCD         |g_pOEMVerifyMemory|
  01c68		 |$LN54@DownloadSi@2|
  01c68	00000000	 DCD         |g_DownloadManifest|
  01c6c		 |$LN55@DownloadSi@2|
  01c6c	00000000	 DCD         |g_downloadFilesRemaining|
  01c70		 |$LN56@DownloadSi@2|
  01c70	00000000	 DCD         |g_fOEMNotified|
  01c74		 |$LN57@DownloadSi@2|
  01c74	00000000	 DCD         |g_pOEMMultiBINNotify|
  01c78		 |$LN58@DownloadSi@2|
  01c78	00000000	 DCD         |g_bBINDownload|
  01c7c		 |$LN59@DownloadSi@2|
  01c7c	00000000	 DCD         |__security_cookie|
  01c80		 |$M41276|

			 ENDP  ; |DownloadSignedNB0|

	EXPORT	|??_C@_0DH@GJCJAHAP@?$FL?$CFd?$FN?3?5Address?$DN0x?$CFx?5?5Length?$DN0x?$CFx?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_03ILDADBHF@RAM?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_05HPMNGINJ@FLASH?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_0FC@PGPOMBFM@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BH@FIOKDOBJ@?$AN?6Completed?5file?$CIs?$CJ?3?$AN?6?$AA@| [ DATA ] ; `string'
	IMPORT	|OEMWriteFlash|

  00050			 AREA	 |.pdata|, PDATA
|$T41319| DCD	|$LN12@WriteImage|
	DCD	0x40005202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DH@GJCJAHAP@?$FL?$CFd?$FN?3?5Address?$DN0x?$CFx?5?5Length?$DN0x?$CFx?5@| DCB "["
	DCB	"%d]: Address=0x%x  Length=0x%x  Name=""%s"" Target=%s", 0xd
	DCB	0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_03ILDADBHF@RAM?$AA@| DCB "RAM", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_05HPMNGINJ@FLASH?$AA@| DCB "FLASH", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0FC@PGPOMBFM@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@| DCB "-"
	DCB	"--------------------------------------------------------"
	DCB	"----------------------", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BH@FIOKDOBJ@?$AN?6Completed?5file?$CIs?$CJ?3?$AN?6?$AA@| DCB 0xd, 0xa
	DCB	"Completed file(s):", 0xd, 0xa, 0x0	; `string'
; Function compile flags: /Odtp

  01c80			 AREA	 |.text|, CODE, ARM

  01c80		 |WriteImageToFlash| PROC

; 1316 : {

  01c80		 |$LN12@WriteImage|
  01c80	e52de004	 str         lr, [sp, #-4]!
  01c84	e24dd02c	 sub         sp, sp, #0x2C
  01c88		 |$M41316|

; 1317 :     BOOL  bFlash;
; 1318 :     DWORD i;
; 1319 :     
; 1320 :     KITLOutputDebugString("\r\nCompleted file(s):\r\n");

  01c88	e59f0134	 ldr         r0, [pc, #0x134]
  01c8c	eb000000	 bl          KITLOutputDebugString

; 1321 :     KITLOutputDebugString("-------------------------------------------------------------------------------\r\n");

  01c90	e59f0128	 ldr         r0, [pc, #0x128]
  01c94	eb000000	 bl          KITLOutputDebugString

; 1322 : 
; 1323 :     for (i = 0; i < g_DownloadManifest.dwNumRegions; i++)

  01c98	e3a03000	 mov         r3, #0
  01c9c	e58d3008	 str         r3, [sp, #8]
  01ca0	ea000002	 b           |$LN5@WriteImage|
  01ca4		 |$LN4@WriteImage|
  01ca4	e59d3008	 ldr         r3, [sp, #8]
  01ca8	e2833001	 add         r3, r3, #1
  01cac	e58d3008	 str         r3, [sp, #8]
  01cb0		 |$LN5@WriteImage|
  01cb0	e59d2008	 ldr         r2, [sp, #8]
  01cb4	e59f3100	 ldr         r3, [pc, #0x100]
  01cb8	e5933000	 ldr         r3, [r3]
  01cbc	e1520003	 cmp         r2, r3
  01cc0	2a000034	 bcs         |$LN3@WriteImage|

; 1324 :     {
; 1325 :         RegionInfo *pRegion = &g_DownloadManifest.Region[i];

  01cc4	e59d1008	 ldr         r1, [sp, #8]
  01cc8	e3a03f43	 mov         r3, #0x43, 30
  01ccc	e0020391	 mul         r2, r1, r3
  01cd0	e59f30e4	 ldr         r3, [pc, #0xE4]
  01cd4	e2833004	 add         r3, r3, #4
  01cd8	e0833002	 add         r3, r3, r2
  01cdc	e58d3010	 str         r3, [sp, #0x10]

; 1326 : 
; 1327 :         bFlash = OEMIsFlashAddr( pRegion->dwRegionStart );

  01ce0	e59d3010	 ldr         r3, [sp, #0x10]
  01ce4	e5930000	 ldr         r0, [r3]
  01ce8	eb000000	 bl          OEMIsFlashAddr
  01cec	e58d0020	 str         r0, [sp, #0x20]
  01cf0	e59d3020	 ldr         r3, [sp, #0x20]
  01cf4	e58d300c	 str         r3, [sp, #0xC]

; 1328 :         
; 1329 :         KITLOutputDebugString("[%d]: Address=0x%x  Length=0x%x  Name=\"%s\" Target=%s\r\n",
; 1330 :             i, 
; 1331 :             pRegion->dwRegionStart, 
; 1332 :             pRegion->dwRegionLength, 
; 1333 :             pRegion->szFileName,
; 1334 :             (bFlash ? "FLASH" : "RAM"));

  01cf8	e59d300c	 ldr         r3, [sp, #0xC]
  01cfc	e3530000	 cmp         r3, #0
  01d00	0a000002	 beq         |$LN8@WriteImage|
  01d04	e59f30ac	 ldr         r3, [pc, #0xAC]
  01d08	e58d3024	 str         r3, [sp, #0x24]
  01d0c	ea000001	 b           |$LN9@WriteImage|
  01d10		 |$LN8@WriteImage|
  01d10	e59f309c	 ldr         r3, [pc, #0x9C]
  01d14	e58d3024	 str         r3, [sp, #0x24]
  01d18		 |$LN9@WriteImage|
  01d18	e59d3024	 ldr         r3, [sp, #0x24]
  01d1c	e58d3004	 str         r3, [sp, #4]
  01d20	e59d3010	 ldr         r3, [sp, #0x10]
  01d24	e2833008	 add         r3, r3, #8
  01d28	e58d3000	 str         r3, [sp]
  01d2c	e59d3010	 ldr         r3, [sp, #0x10]
  01d30	e2833004	 add         r3, r3, #4
  01d34	e5933000	 ldr         r3, [r3]
  01d38	e59d2010	 ldr         r2, [sp, #0x10]
  01d3c	e5922000	 ldr         r2, [r2]
  01d40	e59d1008	 ldr         r1, [sp, #8]
  01d44	e59f0064	 ldr         r0, [pc, #0x64]
  01d48	eb000000	 bl          KITLOutputDebugString

; 1335 : 
; 1336 :         if (bFlash) 

  01d4c	e59d300c	 ldr         r3, [sp, #0xC]
  01d50	e3530000	 cmp         r3, #0
  01d54	0a00000e	 beq         |$LN2@WriteImage|

; 1337 :         {
; 1338 :             if (!OEMWriteFlash (pRegion->dwRegionStart, pRegion->dwRegionLength))

  01d58	e59d3010	 ldr         r3, [sp, #0x10]
  01d5c	e2833004	 add         r3, r3, #4
  01d60	e5931000	 ldr         r1, [r3]
  01d64	e59d3010	 ldr         r3, [sp, #0x10]
  01d68	e5930000	 ldr         r0, [r3]
  01d6c	eb000000	 bl          OEMWriteFlash
  01d70	e58d0028	 str         r0, [sp, #0x28]
  01d74	e59d3028	 ldr         r3, [sp, #0x28]
  01d78	e3530000	 cmp         r3, #0
  01d7c	1a000004	 bne         |$LN1@WriteImage|

; 1339 :             {
; 1340 :                 HALT (BLERR_FLASH_WRITE);

  01d80	e3e0000b	 mvn         r0, #0xB
  01d84	eb000000	 bl          HALT

; 1341 :                 return FALSE;

  01d88	e3a03000	 mov         r3, #0
  01d8c	e58d301c	 str         r3, [sp, #0x1C]
  01d90	ea000002	 b           |$LN6@WriteImage|
  01d94		 |$LN1@WriteImage|
  01d94		 |$LN2@WriteImage|

; 1342 :             }
; 1343 :         }
; 1344 :     }

  01d94	eaffffc2	 b           |$LN4@WriteImage|
  01d98		 |$LN3@WriteImage|

; 1345 : 
; 1346 :     return TRUE;    

  01d98	e3a03001	 mov         r3, #1
  01d9c	e58d301c	 str         r3, [sp, #0x1C]
  01da0		 |$LN6@WriteImage|

; 1347 : }

  01da0	e59d001c	 ldr         r0, [sp, #0x1C]
  01da4	e28dd02c	 add         sp, sp, #0x2C
  01da8	e49de004	 ldr         lr, [sp], #4
  01dac	e12fff1e	 bx          lr
  01db0		 |$LN13@WriteImage|
  01db0		 |$LN14@WriteImage|
  01db0	00000000	 DCD         |??_C@_0DH@GJCJAHAP@?$FL?$CFd?$FN?3?5Address?$DN0x?$CFx?5?5Length?$DN0x?$CFx?5@|
  01db4		 |$LN15@WriteImage|
  01db4	00000000	 DCD         |??_C@_03ILDADBHF@RAM?$AA@|
  01db8		 |$LN16@WriteImage|
  01db8	00000000	 DCD         |??_C@_05HPMNGINJ@FLASH?$AA@|
  01dbc		 |$LN17@WriteImage|
  01dbc	00000000	 DCD         |g_DownloadManifest|
  01dc0		 |$LN18@WriteImage|
  01dc0	00000000	 DCD         |??_C@_0FC@PGPOMBFM@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@|
  01dc4		 |$LN19@WriteImage|
  01dc4	00000000	 DCD         |??_C@_0BH@FIOKDOBJ@?$AN?6Completed?5file?$CIs?$CJ?3?$AN?6?$AA@|
  01dc8		 |$M41317|

			 ENDP  ; |WriteImageToFlash|

	EXPORT	|??_C@_0O@FELGHAPO@Signature?5?$DN?5?$FL?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CC@OIPHKJAB@packetData?4bFlags?5?5?5?5?5?5?5?5?$DN?50x?$CFx?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CC@HKPEILAG@packetData?4dwSeqNum?5?5?5?5?5?5?$DN?50x?$CFx?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CC@NCIIICLA@packetData?4dwRecCheck?5?5?5?5?$DN?50x?$CFx?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CC@DBEGABEI@packetData?4dwRecLength?5?5?5?$DN?50x?$CFx?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CC@CFILNCJH@packetData?4dwRecAddress?5?5?$DN?50x?$CFx?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CC@JEMCLCNP@packetData?4dwSigLength?5?5?5?$DN?50x?$CFx?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CC@KDGHGCNF@packetData?4pbSig?5?5?5?5?5?5?5?5?5?$DN?50x?$CFx?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CC@FEFOHHMM@packetData?4dwDataLength?5?5?$DN?50x?$CFx?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_05JLDHBKHJ@?$FN?$AN?6?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_03KHICJKCI@?4?4?4?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_0L@FJHKNPED@pbData?5?$DN?5?$FL?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CC@PJHEFLPB@packetData?4pbData?5?5?5?5?5?5?5?5?$DN?50x?$CFx?$AN@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]

  00058			 AREA	 |.pdata|, PDATA
|$T41333| DCD	|$LN12@PrintPacke|
	DCD	0xc0006d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0O@FELGHAPO@Signature?5?$DN?5?$FL?$AA@| DCB "Signature = [", 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CC@OIPHKJAB@packetData?4bFlags?5?5?5?5?5?5?5?5?$DN?50x?$CFx?$AN@| DCB "p"
	DCB	"acketData.bFlags        = 0x%x", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CC@HKPEILAG@packetData?4dwSeqNum?5?5?5?5?5?5?$DN?50x?$CFx?$AN@| DCB "p"
	DCB	"acketData.dwSeqNum      = 0x%x", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CC@NCIIICLA@packetData?4dwRecCheck?5?5?5?5?$DN?50x?$CFx?$AN@| DCB "p"
	DCB	"acketData.dwRecCheck    = 0x%x", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CC@DBEGABEI@packetData?4dwRecLength?5?5?5?$DN?50x?$CFx?$AN@| DCB "p"
	DCB	"acketData.dwRecLength   = 0x%x", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CC@CFILNCJH@packetData?4dwRecAddress?5?5?$DN?50x?$CFx?$AN@| DCB "p"
	DCB	"acketData.dwRecAddress  = 0x%x", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CC@JEMCLCNP@packetData?4dwSigLength?5?5?5?$DN?50x?$CFx?$AN@| DCB "p"
	DCB	"acketData.dwSigLength   = 0x%x", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CC@KDGHGCNF@packetData?4pbSig?5?5?5?5?5?5?5?5?5?$DN?50x?$CFx?$AN@| DCB "p"
	DCB	"acketData.pbSig         = 0x%x", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CC@FEFOHHMM@packetData?4dwDataLength?5?5?$DN?50x?$CFx?$AN@| DCB "p"
	DCB	"acketData.dwDataLength  = 0x%x", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_05JLDHBKHJ@?$FN?$AN?6?$AN?6?$AA@| DCB "]", 0xd, 0xa, 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_03KHICJKCI@?4?4?4?$AA@| DCB "...", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0L@FJHKNPED@pbData?5?$DN?5?$FL?$AA@| DCB "pbData = [", 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CC@PJHEFLPB@packetData?4pbData?5?5?5?5?5?5?5?5?$DN?50x?$CFx?$AN@| DCB "p"
	DCB	"acketData.pbData        = 0x%x", 0xd, 0xa, 0x0 ; `string'

  00008			 AREA	 |.xdata|, DATA
|$T41329| DCD	0xffffffe0
; Function compile flags: /Odtp

  01dc8			 AREA	 |.text|, CODE, ARM

  01dc8	00000000	 DCD         |__GSHandlerCheck|
  01dcc	00000000	 DCD         |$T41329|

  01dd0		 |PrintPacketData| PROC

; 1352 : {

  01dd0		 |$LN12@PrintPacke|
  01dd0	e1a0c00d	 mov         r12, sp
  01dd4	e92d000f	 stmdb       sp!, {r0 - r3}
  01dd8	e92d5000	 stmdb       sp!, {r12, lr}
  01ddc	e24dd008	 sub         sp, sp, #8
  01de0		 |$M41330|
  01de0	e59f3198	 ldr         r3, [pc, #0x198]
  01de4	e5933000	 ldr         r3, [r3]
  01de8	e58d3000	 str         r3, [sp]

; 1353 : #ifdef DEBUG
; 1354 :     DWORD i;
; 1355 :     
; 1356 :     KITLOutputDebugString("packetData.pbData        = 0x%x\r\n", packetData.pbData);

  01dec	e59d1010	 ldr         r1, [sp, #0x10]
  01df0	e59f0184	 ldr         r0, [pc, #0x184]
  01df4	eb000000	 bl          KITLOutputDebugString

; 1357 :     
; 1358 :     KITLOutputDebugString("pbData = [");

  01df8	e59f0178	 ldr         r0, [pc, #0x178]
  01dfc	eb000000	 bl          KITLOutputDebugString

; 1359 :     for (i = 0; i < packetData.dwDataLength; i++) {

  01e00	e3a03000	 mov         r3, #0
  01e04	e58d3004	 str         r3, [sp, #4]
  01e08	ea000002	 b           |$LN7@PrintPacke|
  01e0c		 |$LN6@PrintPacke|
  01e0c	e59d3004	 ldr         r3, [sp, #4]
  01e10	e2833001	 add         r3, r3, #1
  01e14	e58d3004	 str         r3, [sp, #4]
  01e18		 |$LN7@PrintPacke|
  01e18	e59d2004	 ldr         r2, [sp, #4]
  01e1c	e59d3014	 ldr         r3, [sp, #0x14]
  01e20	e1520003	 cmp         r2, r3
  01e24	2a000010	 bcs         |$LN5@PrintPacke|

; 1360 :         KITLOutputDebugString("%x ", packetData.pbData[i]);   

  01e28	e59d2010	 ldr         r2, [sp, #0x10]
  01e2c	e59d3004	 ldr         r3, [sp, #4]
  01e30	e0823003	 add         r3, r2, r3
  01e34	e5d31000	 ldrb        r1, [r3]
  01e38	e59f0104	 ldr         r0, [pc, #0x104]
  01e3c	eb000000	 bl          KITLOutputDebugString

; 1361 :         
; 1362 :         if (20 < i && i < packetData.dwDataLength) {

  01e40	e59d3004	 ldr         r3, [sp, #4]
  01e44	e3530014	 cmp         r3, #0x14
  01e48	9a000006	 bls         |$LN4@PrintPacke|
  01e4c	e59d2004	 ldr         r2, [sp, #4]
  01e50	e59d3014	 ldr         r3, [sp, #0x14]
  01e54	e1520003	 cmp         r2, r3
  01e58	2a000002	 bcs         |$LN4@PrintPacke|

; 1363 :             KITLOutputDebugString("...");

  01e5c	e59f0110	 ldr         r0, [pc, #0x110]
  01e60	eb000000	 bl          KITLOutputDebugString

; 1364 :             break;

  01e64	ea000000	 b           |$LN5@PrintPacke|
  01e68		 |$LN4@PrintPacke|

; 1365 :         }
; 1366 :     }

  01e68	eaffffe7	 b           |$LN6@PrintPacke|
  01e6c		 |$LN5@PrintPacke|

; 1367 :     KITLOutputDebugString("]\r\n\r\n");

  01e6c	e59f00cc	 ldr         r0, [pc, #0xCC]
  01e70	eb000000	 bl          KITLOutputDebugString

; 1368 :     
; 1369 :     KITLOutputDebugString("packetData.dwDataLength  = 0x%x\r\n", packetData.dwDataLength);

  01e74	e59d1014	 ldr         r1, [sp, #0x14]
  01e78	e59f00f0	 ldr         r0, [pc, #0xF0]
  01e7c	eb000000	 bl          KITLOutputDebugString

; 1370 :     KITLOutputDebugString("packetData.pbSig         = 0x%x\r\n", packetData.pbSig       );

  01e80	e59d1018	 ldr         r1, [sp, #0x18]
  01e84	e59f00e0	 ldr         r0, [pc, #0xE0]
  01e88	eb000000	 bl          KITLOutputDebugString

; 1371 :     KITLOutputDebugString("packetData.dwSigLength   = 0x%x\r\n", packetData.dwSigLength );

  01e8c	e59d101c	 ldr         r1, [sp, #0x1C]
  01e90	e59f00d0	 ldr         r0, [pc, #0xD0]
  01e94	eb000000	 bl          KITLOutputDebugString

; 1372 :     KITLOutputDebugString("packetData.dwRecAddress  = 0x%x\r\n", packetData.dwRecAddress);

  01e98	e59d1020	 ldr         r1, [sp, #0x20]
  01e9c	e59f00c0	 ldr         r0, [pc, #0xC0]
  01ea0	eb000000	 bl          KITLOutputDebugString

; 1373 :     KITLOutputDebugString("packetData.dwRecLength   = 0x%x\r\n", packetData.dwRecLength );

  01ea4	e59d1024	 ldr         r1, [sp, #0x24]
  01ea8	e59f00b0	 ldr         r0, [pc, #0xB0]
  01eac	eb000000	 bl          KITLOutputDebugString

; 1374 :     KITLOutputDebugString("packetData.dwRecCheck    = 0x%x\r\n", packetData.dwRecCheck  );

  01eb0	e59d1028	 ldr         r1, [sp, #0x28]
  01eb4	e59f00a0	 ldr         r0, [pc, #0xA0]
  01eb8	eb000000	 bl          KITLOutputDebugString

; 1375 :     KITLOutputDebugString("packetData.dwSeqNum      = 0x%x\r\n", packetData.dwSequenceNumber);

  01ebc	e59d103c	 ldr         r1, [sp, #0x3C]
  01ec0	e59f0090	 ldr         r0, [pc, #0x90]
  01ec4	eb000000	 bl          KITLOutputDebugString

; 1376 :     KITLOutputDebugString("packetData.bFlags        = 0x%x\r\n", packetData.bFlags      );

  01ec8	e5dd1040	 ldrb        r1, [sp, #0x40]
  01ecc	e59f0080	 ldr         r0, [pc, #0x80]
  01ed0	eb000000	 bl          KITLOutputDebugString

; 1377 :     KITLOutputDebugString("\r\n");

  01ed4	e59f0074	 ldr         r0, [pc, #0x74]
  01ed8	eb000000	 bl          KITLOutputDebugString

; 1378 :     
; 1379 :     KITLOutputDebugString("Signature = [");

  01edc	e59f0068	 ldr         r0, [pc, #0x68]
  01ee0	eb000000	 bl          KITLOutputDebugString

; 1380 :     for (i = 0; i < sizeof(g_rgpbSignature); i++) {

  01ee4	e3a03000	 mov         r3, #0
  01ee8	e58d3004	 str         r3, [sp, #4]
  01eec	ea000002	 b           |$LN3@PrintPacke|
  01ef0		 |$LN2@PrintPacke|
  01ef0	e59d3004	 ldr         r3, [sp, #4]
  01ef4	e2833001	 add         r3, r3, #1
  01ef8	e58d3004	 str         r3, [sp, #4]
  01efc		 |$LN3@PrintPacke|
  01efc	e59d3004	 ldr         r3, [sp, #4]
  01f00	e3530080	 cmp         r3, #0x80
  01f04	2a000006	 bcs         |$LN1@PrintPacke|

; 1381 :         KITLOutputDebugString("%x ", g_rgpbSignature[i]);   

  01f08	e59f2038	 ldr         r2, [pc, #0x38]
  01f0c	e59d3004	 ldr         r3, [sp, #4]
  01f10	e0823003	 add         r3, r2, r3
  01f14	e5d31000	 ldrb        r1, [r3]
  01f18	e59f0024	 ldr         r0, [pc, #0x24]
  01f1c	eb000000	 bl          KITLOutputDebugString

; 1382 :     }

  01f20	eafffff2	 b           |$LN2@PrintPacke|
  01f24		 |$LN1@PrintPacke|

; 1383 :     KITLOutputDebugString("]\r\n\r\n");

  01f24	e59f0014	 ldr         r0, [pc, #0x14]
  01f28	eb000000	 bl          KITLOutputDebugString

; 1352 : {

  01f2c	e59d0000	 ldr         r0, [sp]
  01f30	eb000000	 bl          __security_check_cookie

; 1384 : #endif
; 1385 : }

  01f34	e28dd008	 add         sp, sp, #8
  01f38	e89d6000	 ldmia       sp, {sp, lr}
  01f3c	e12fff1e	 bx          lr
  01f40		 |$LN13@PrintPacke|
  01f40		 |$LN14@PrintPacke|
  01f40	00000000	 DCD         |??_C@_05JLDHBKHJ@?$FN?$AN?6?$AN?6?$AA@|
  01f44		 |$LN15@PrintPacke|
  01f44	00000000	 DCD         |??_C@_03IGDBGCKF@?$CFx?5?$AA@|
  01f48		 |$LN16@PrintPacke|
  01f48	00000000	 DCD         |g_rgpbSignature|
  01f4c		 |$LN17@PrintPacke|
  01f4c	00000000	 DCD         |??_C@_0O@FELGHAPO@Signature?5?$DN?5?$FL?$AA@|
  01f50		 |$LN18@PrintPacke|
  01f50	00000000	 DCD         |??_C@_02PCIJFNDE@?$AN?6?$AA@|
  01f54		 |$LN19@PrintPacke|
  01f54	00000000	 DCD         |??_C@_0CC@OIPHKJAB@packetData?4bFlags?5?5?5?5?5?5?5?5?$DN?50x?$CFx?$AN@|
  01f58		 |$LN20@PrintPacke|
  01f58	00000000	 DCD         |??_C@_0CC@HKPEILAG@packetData?4dwSeqNum?5?5?5?5?5?5?$DN?50x?$CFx?$AN@|
  01f5c		 |$LN21@PrintPacke|
  01f5c	00000000	 DCD         |??_C@_0CC@NCIIICLA@packetData?4dwRecCheck?5?5?5?5?$DN?50x?$CFx?$AN@|
  01f60		 |$LN22@PrintPacke|
  01f60	00000000	 DCD         |??_C@_0CC@DBEGABEI@packetData?4dwRecLength?5?5?5?$DN?50x?$CFx?$AN@|
  01f64		 |$LN23@PrintPacke|
  01f64	00000000	 DCD         |??_C@_0CC@CFILNCJH@packetData?4dwRecAddress?5?5?$DN?50x?$CFx?$AN@|
  01f68		 |$LN24@PrintPacke|
  01f68	00000000	 DCD         |??_C@_0CC@JEMCLCNP@packetData?4dwSigLength?5?5?5?$DN?50x?$CFx?$AN@|
  01f6c		 |$LN25@PrintPacke|
  01f6c	00000000	 DCD         |??_C@_0CC@KDGHGCNF@packetData?4pbSig?5?5?5?5?5?5?5?5?5?$DN?50x?$CFx?$AN@|
  01f70		 |$LN26@PrintPacke|
  01f70	00000000	 DCD         |??_C@_0CC@FEFOHHMM@packetData?4dwDataLength?5?5?$DN?50x?$CFx?$AN@|
  01f74		 |$LN27@PrintPacke|
  01f74	00000000	 DCD         |??_C@_03KHICJKCI@?4?4?4?$AA@|
  01f78		 |$LN28@PrintPacke|
  01f78	00000000	 DCD         |??_C@_0L@FJHKNPED@pbData?5?$DN?5?$FL?$AA@|
  01f7c		 |$LN29@PrintPacke|
  01f7c	00000000	 DCD         |??_C@_0CC@PJHEFLPB@packetData?4pbData?5?5?5?5?5?5?5?5?$DN?50x?$CFx?$AN@|
  01f80		 |$LN30@PrintPacke|
  01f80	00000000	 DCD         |__security_cookie|
  01f84		 |$M41331|

			 ENDP  ; |PrintPacketData|

	EXPORT	|??_C@_0BP@GDIKDNGH@Checksum?5?$DN?50x?$CFx?5?$CI0x?$CFx?5bytes?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DF@LEIPBNDI@Computing?5checksum?3?5image?5start?5@| [ DATA ] ; `string'

  00060			 AREA	 |.pdata|, PDATA
|$T41356| DCD	|$LN10@ComputeChe|
	DCD	0x40004202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BP@GDIKDNGH@Checksum?5?$DN?50x?$CFx?5?$CI0x?$CFx?5bytes?$CJ?$AN?6?$AA@| DCB "C"
	DCB	"hecksum = 0x%x (0x%x bytes)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DF@LEIPBNDI@Computing?5checksum?3?5image?5start?5@| DCB "Computin"
	DCB	"g checksum: image start = 0x%x, len = 0x%x", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  01f84			 AREA	 |.text|, CODE, ARM

  01f84		 |ComputeChecksum| PROC

; 1391 : {

  01f84		 |$LN10@ComputeChe|
  01f84	e52de004	 str         lr, [sp, #-4]!
  01f88	e24dd018	 sub         sp, sp, #0x18
  01f8c		 |$M41353|

; 1392 : #ifdef DEBUG
; 1393 :     RegionInfo *pRegion;
; 1394 :     DWORD       dwRegionLength;
; 1395 :     DWORD       dwChecksum;
; 1396 :     BYTE       *pbCache;
; 1397 :     DWORD       i;
; 1398 :     
; 1399 :     for (i = 0; i < g_DownloadManifest.dwNumRegions; i++)

  01f8c	e3a03000	 mov         r3, #0
  01f90	e58d3000	 str         r3, [sp]
  01f94	ea000002	 b           |$LN5@ComputeChe|
  01f98		 |$LN4@ComputeChe|
  01f98	e59d3000	 ldr         r3, [sp]
  01f9c	e2833001	 add         r3, r3, #1
  01fa0	e58d3000	 str         r3, [sp]
  01fa4		 |$LN5@ComputeChe|
  01fa4	e59d2000	 ldr         r2, [sp]
  01fa8	e59f30d8	 ldr         r3, [pc, #0xD8]
  01fac	e5933000	 ldr         r3, [r3]
  01fb0	e1520003	 cmp         r2, r3
  01fb4	2a00002e	 bcs         |$LN3@ComputeChe|

; 1400 :     {
; 1401 :         pRegion         = &g_DownloadManifest.Region[i];

  01fb8	e59d1000	 ldr         r1, [sp]
  01fbc	e3a03f43	 mov         r3, #0x43, 30
  01fc0	e0020391	 mul         r2, r1, r3
  01fc4	e59f30bc	 ldr         r3, [pc, #0xBC]
  01fc8	e2833004	 add         r3, r3, #4
  01fcc	e0833002	 add         r3, r3, r2
  01fd0	e58d300c	 str         r3, [sp, #0xC]

; 1402 :         pbCache         = (LPBYTE) OEMMapMemAddr( pRegion->dwRegionStart, pRegion->dwRegionStart );

  01fd4	e59d300c	 ldr         r3, [sp, #0xC]
  01fd8	e5931000	 ldr         r1, [r3]
  01fdc	e59d300c	 ldr         r3, [sp, #0xC]
  01fe0	e5930000	 ldr         r0, [r3]
  01fe4	eb000000	 bl          OEMMapMemAddr
  01fe8	e58d0014	 str         r0, [sp, #0x14]
  01fec	e59d3014	 ldr         r3, [sp, #0x14]
  01ff0	e58d3008	 str         r3, [sp, #8]

; 1403 :         dwRegionLength  = pRegion->dwRegionLength;

  01ff4	e59d300c	 ldr         r3, [sp, #0xC]
  01ff8	e2833004	 add         r3, r3, #4
  01ffc	e5933000	 ldr         r3, [r3]
  02000	e58d3004	 str         r3, [sp, #4]

; 1404 :         dwChecksum      = 0;

  02004	e3a03000	 mov         r3, #0
  02008	e58d3010	 str         r3, [sp, #0x10]

; 1405 : 
; 1406 :         KITLOutputDebugString("Computing checksum: image start = 0x%x, len = 0x%x\r\n", 
; 1407 :             pbCache, dwRegionLength);

  0200c	e59d2004	 ldr         r2, [sp, #4]
  02010	e59d1008	 ldr         r1, [sp, #8]
  02014	e59f0068	 ldr         r0, [pc, #0x68]
  02018	eb000000	 bl          KITLOutputDebugString
  0201c		 |$LN2@ComputeChe|

; 1408 : 
; 1409 :         while(dwRegionLength--) {

  0201c	e59d3004	 ldr         r3, [sp, #4]
  02020	e3530000	 cmp         r3, #0
  02024	e59d3004	 ldr         r3, [sp, #4]
  02028	e2433001	 sub         r3, r3, #1
  0202c	e58d3004	 str         r3, [sp, #4]
  02030	0a000008	 beq         |$LN1@ComputeChe|

; 1410 :             dwChecksum += *pbCache++;

  02034	e59d3008	 ldr         r3, [sp, #8]
  02038	e5d32000	 ldrb        r2, [r3]
  0203c	e59d3010	 ldr         r3, [sp, #0x10]
  02040	e0833002	 add         r3, r3, r2
  02044	e58d3010	 str         r3, [sp, #0x10]
  02048	e59d3008	 ldr         r3, [sp, #8]
  0204c	e2833001	 add         r3, r3, #1
  02050	e58d3008	 str         r3, [sp, #8]

; 1411 :         }

  02054	eafffff0	 b           |$LN2@ComputeChe|
  02058		 |$LN1@ComputeChe|

; 1412 : 
; 1413 :         KITLOutputDebugString("Checksum = 0x%x (0x%x bytes)\r\n", dwChecksum, pRegion->dwRegionLength);

  02058	e59d300c	 ldr         r3, [sp, #0xC]
  0205c	e2833004	 add         r3, r3, #4
  02060	e5932000	 ldr         r2, [r3]
  02064	e59d1010	 ldr         r1, [sp, #0x10]
  02068	e59f0010	 ldr         r0, [pc, #0x10]
  0206c	eb000000	 bl          KITLOutputDebugString

; 1414 :     }

  02070	eaffffc8	 b           |$LN4@ComputeChe|
  02074		 |$LN3@ComputeChe|

; 1415 : #endif
; 1416 : }

  02074	e28dd018	 add         sp, sp, #0x18
  02078	e49de004	 ldr         lr, [sp], #4
  0207c	e12fff1e	 bx          lr
  02080		 |$LN11@ComputeChe|
  02080		 |$LN12@ComputeChe|
  02080	00000000	 DCD         |??_C@_0BP@GDIKDNGH@Checksum?5?$DN?50x?$CFx?5?$CI0x?$CFx?5bytes?$CJ?$AN?6?$AA@|
  02084		 |$LN13@ComputeChe|
  02084	00000000	 DCD         |??_C@_0DF@LEIPBNDI@Computing?5checksum?3?5image?5start?5@|
  02088		 |$LN14@ComputeChe|
  02088	00000000	 DCD         |g_DownloadManifest|
  0208c		 |$M41354|

			 ENDP  ; |ComputeChecksum|

	EXPORT	|??_C@_06OLEINIPO@nk?4exe?$AA@| [ DATA ] ; `string'
	IMPORT	|strcmp|

  00068			 AREA	 |.pdata|, PDATA
|$T41366| DCD	|$LN12@IsKernelRe|
	DCD	0x40006404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_06OLEINIPO@nk?4exe?$AA@| DCB "nk.exe", 0x0	; `string'
; Function compile flags: /Odtp

  0208c			 AREA	 |.text|, CODE, ARM

  0208c		 |IsKernelRegion| PROC

; 1431 : {

  0208c		 |$LN12@IsKernelRe|
  0208c	e1a0c00d	 mov         r12, sp
  02090	e92d0003	 stmdb       sp!, {r0, r1}
  02094	e92d5000	 stmdb       sp!, {r12, lr}
  02098	e24dd02c	 sub         sp, sp, #0x2C
  0209c		 |$M41363|

; 1432 : 	DWORD dwCacheAddress = 0;

  0209c	e3a03000	 mov         r3, #0
  020a0	e58d3004	 str         r3, [sp, #4]

; 1433 : 	ROMHDR *pROMHeader;
; 1434 : 	DWORD dwNumModules = 0;

  020a4	e3a03000	 mov         r3, #0
  020a8	e58d3008	 str         r3, [sp, #8]

; 1435 : 	TOCentry *plTOC;
; 1436 : 
; 1437 :     if (dwRegionStart == 0 || dwRegionLength == 0)

  020ac	e59d3034	 ldr         r3, [sp, #0x34]
  020b0	e3530000	 cmp         r3, #0
  020b4	0a000002	 beq         |$LN6@IsKernelRe|
  020b8	e59d3038	 ldr         r3, [sp, #0x38]
  020bc	e3530000	 cmp         r3, #0
  020c0	1a000002	 bne         |$LN7@IsKernelRe|
  020c4		 |$LN6@IsKernelRe|

; 1438 :         return(FALSE);

  020c4	e3a03000	 mov         r3, #0
  020c8	e58d3014	 str         r3, [sp, #0x14]
  020cc	ea00004b	 b           |$LN8@IsKernelRe|
  020d0		 |$LN7@IsKernelRe|

; 1439 : 
; 1440 :     if (*(LPDWORD) OEMMapMemAddr (dwRegionStart, dwRegionStart + ROM_SIGNATURE_OFFSET) != ROM_SIGNATURE)

  020d0	e59d3034	 ldr         r3, [sp, #0x34]
  020d4	e2831040	 add         r1, r3, #0x40
  020d8	e59d0034	 ldr         r0, [sp, #0x34]
  020dc	eb000000	 bl          OEMMapMemAddr
  020e0	e58d0018	 str         r0, [sp, #0x18]
  020e4	e59d3018	 ldr         r3, [sp, #0x18]
  020e8	e5932000	 ldr         r2, [r3]
  020ec	e59f3124	 ldr         r3, [pc, #0x124]
  020f0	e1520003	 cmp         r2, r3
  020f4	0a000002	 beq         |$LN5@IsKernelRe|

; 1441 :         return (FALSE);

  020f8	e3a03000	 mov         r3, #0
  020fc	e58d3014	 str         r3, [sp, #0x14]
  02100	ea00003e	 b           |$LN8@IsKernelRe|
  02104		 |$LN5@IsKernelRe|

; 1442 : 
; 1443 :     // A pointer to the ROMHDR structure lives just past the ROM_SIGNATURE (which is a longword value).  Note that
; 1444 :     // this pointer is remapped since it might be a flash address (image destined for flash), but is actually cached
; 1445 :     // in RAM.
; 1446 :     //
; 1447 :     dwCacheAddress = *(LPDWORD) OEMMapMemAddr (dwRegionStart, dwRegionStart + ROM_SIGNATURE_OFFSET + sizeof(ULONG));

  02104	e59d3034	 ldr         r3, [sp, #0x34]
  02108	e2831044	 add         r1, r3, #0x44
  0210c	e59d0034	 ldr         r0, [sp, #0x34]
  02110	eb000000	 bl          OEMMapMemAddr
  02114	e58d001c	 str         r0, [sp, #0x1C]
  02118	e59d301c	 ldr         r3, [sp, #0x1C]
  0211c	e5933000	 ldr         r3, [r3]
  02120	e58d3004	 str         r3, [sp, #4]

; 1448 :     pROMHeader     = (ROMHDR *) OEMMapMemAddr (dwRegionStart, dwCacheAddress + g_dwROMOffset);

  02124	e59d2004	 ldr         r2, [sp, #4]
  02128	e59f30e4	 ldr         r3, [pc, #0xE4]
  0212c	e5933000	 ldr         r3, [r3]
  02130	e0821003	 add         r1, r2, r3
  02134	e59d0034	 ldr         r0, [sp, #0x34]
  02138	eb000000	 bl          OEMMapMemAddr
  0213c	e58d0020	 str         r0, [sp, #0x20]
  02140	e59d3020	 ldr         r3, [sp, #0x20]
  02144	e58d3000	 str         r3, [sp]

; 1449 : 
; 1450 :     // Make sure sure are some modules in the table of contents.
; 1451 :     //
; 1452 :     if ((dwNumModules = pROMHeader->nummods) == 0)

  02148	e59d3000	 ldr         r3, [sp]
  0214c	e2833010	 add         r3, r3, #0x10
  02150	e5933000	 ldr         r3, [r3]
  02154	e58d3008	 str         r3, [sp, #8]
  02158	e59d3008	 ldr         r3, [sp, #8]
  0215c	e3530000	 cmp         r3, #0
  02160	1a000002	 bne         |$LN4@IsKernelRe|

; 1453 :         return (FALSE);

  02164	e3a03000	 mov         r3, #0
  02168	e58d3014	 str         r3, [sp, #0x14]
  0216c	ea000023	 b           |$LN8@IsKernelRe|
  02170		 |$LN4@IsKernelRe|

; 1454 : 
; 1455 : 	// Locate the table of contents and search for the kernel executable and the TOC immediately follows the ROMHDR.
; 1456 : 	//
; 1457 :     plTOC = (TOCentry *)(pROMHeader + 1);

  02170	e59d3000	 ldr         r3, [sp]
  02174	e2833054	 add         r3, r3, #0x54
  02178	e58d300c	 str         r3, [sp, #0xC]
  0217c		 |$LN3@IsKernelRe|

; 1458 : 
; 1459 : 	while(dwNumModules--) {

  0217c	e59d3008	 ldr         r3, [sp, #8]
  02180	e3530000	 cmp         r3, #0
  02184	e59d3008	 ldr         r3, [sp, #8]
  02188	e2433001	 sub         r3, r3, #1
  0218c	e58d3008	 str         r3, [sp, #8]
  02190	0a000018	 beq         |$LN2@IsKernelRe|

; 1460 : 		LPBYTE pFileName = OEMMapMemAddr(dwRegionStart, (DWORD)plTOC->lpszFileName + g_dwROMOffset);

  02194	e59d300c	 ldr         r3, [sp, #0xC]
  02198	e2833010	 add         r3, r3, #0x10
  0219c	e5932000	 ldr         r2, [r3]
  021a0	e59f306c	 ldr         r3, [pc, #0x6C]
  021a4	e5933000	 ldr         r3, [r3]
  021a8	e0821003	 add         r1, r2, r3
  021ac	e59d0034	 ldr         r0, [sp, #0x34]
  021b0	eb000000	 bl          OEMMapMemAddr
  021b4	e58d0024	 str         r0, [sp, #0x24]
  021b8	e59d3024	 ldr         r3, [sp, #0x24]
  021bc	e58d3010	 str         r3, [sp, #0x10]

; 1461 : 		if (!strcmp(pFileName, "nk.exe")) {

  021c0	e59f1048	 ldr         r1, [pc, #0x48]
  021c4	e59d0010	 ldr         r0, [sp, #0x10]
  021c8	eb000000	 bl          strcmp
  021cc	e58d0028	 str         r0, [sp, #0x28]
  021d0	e59d3028	 ldr         r3, [sp, #0x28]
  021d4	e3530000	 cmp         r3, #0
  021d8	1a000002	 bne         |$LN1@IsKernelRe|

; 1462 : 			return TRUE;

  021dc	e3a03001	 mov         r3, #1
  021e0	e58d3014	 str         r3, [sp, #0x14]
  021e4	ea000005	 b           |$LN8@IsKernelRe|
  021e8		 |$LN1@IsKernelRe|

; 1463 : 		}
; 1464 : 		++plTOC;

  021e8	e59d300c	 ldr         r3, [sp, #0xC]
  021ec	e2833020	 add         r3, r3, #0x20
  021f0	e58d300c	 str         r3, [sp, #0xC]

; 1465 : 	}

  021f4	eaffffe0	 b           |$LN3@IsKernelRe|
  021f8		 |$LN2@IsKernelRe|

; 1466 : 	return FALSE;

  021f8	e3a03000	 mov         r3, #0
  021fc	e58d3014	 str         r3, [sp, #0x14]
  02200		 |$LN8@IsKernelRe|

; 1467 : }

  02200	e59d0014	 ldr         r0, [sp, #0x14]
  02204	e28dd02c	 add         sp, sp, #0x2C
  02208	e89d6000	 ldmia       sp, {sp, lr}
  0220c	e12fff1e	 bx          lr
  02210		 |$LN13@IsKernelRe|
  02210		 |$LN14@IsKernelRe|
  02210	00000000	 DCD         |??_C@_06OLEINIPO@nk?4exe?$AA@|
  02214		 |$LN15@IsKernelRe|
  02214	00000000	 DCD         |g_dwROMOffset|
  02218		 |$LN16@IsKernelRe|
  02218	43454345	 DCD         0x43454345
  0221c		 |$M41364|

			 ENDP  ; |IsKernelRegion|

	EXPORT	|Nib2HexChar|

  00070			 AREA	 |.pdata|, PDATA
|$T41376| DCD	|$LN9@Nib2HexCha|
	DCD	0x40001f04
; Function compile flags: /Odtp

  0221c			 AREA	 |.text|, CODE, ARM

  0221c		 |Nib2HexChar| PROC

; 1472 : {

  0221c		 |$LN9@Nib2HexCha|
  0221c	e1a0c00d	 mov         r12, sp
  02220	e92d0001	 stmdb       sp!, {r0}
  02224	e92d5000	 stmdb       sp!, {r12, lr}
  02228	e24dd004	 sub         sp, sp, #4
  0222c		 |$M41373|

; 1473 :     if (Nibble < 0x0a) {

  0222c	e5dd300c	 ldrb        r3, [sp, #0xC]
  02230	e353000a	 cmp         r3, #0xA
  02234	aa000006	 bge         |$LN4@Nib2HexCha|

; 1474 : 		return Nibble+'0';

  02238	e5dd300c	 ldrb        r3, [sp, #0xC]
  0223c	e2833030	 add         r3, r3, #0x30
  02240	e1a03c03	 mov         r3, r3, lsl #24
  02244	e1a03c43	 mov         r3, r3, asr #24
  02248	e5cd3000	 strb        r3, [sp]
  0224c	ea00000d	 b           |$LN5@Nib2HexCha|
  02250	ea00000c	 b           |$LN3@Nib2HexCha|
  02254		 |$LN4@Nib2HexCha|

; 1475 :     } else if (Nibble < 0x10) {

  02254	e5dd300c	 ldrb        r3, [sp, #0xC]
  02258	e3530010	 cmp         r3, #0x10
  0225c	aa000007	 bge         |$LN2@Nib2HexCha|

; 1476 : 		return Nibble-0x0a+'A';

  02260	e5dd300c	 ldrb        r3, [sp, #0xC]
  02264	e243300a	 sub         r3, r3, #0xA
  02268	e2833041	 add         r3, r3, #0x41
  0226c	e1a03c03	 mov         r3, r3, lsl #24
  02270	e1a03c43	 mov         r3, r3, asr #24
  02274	e5cd3000	 strb        r3, [sp]
  02278	ea000002	 b           |$LN5@Nib2HexCha|

; 1477 :     } else {

  0227c	ea000001	 b           |$LN1@Nib2HexCha|
  02280		 |$LN2@Nib2HexCha|

; 1478 : 		return '?';

  02280	e3a0303f	 mov         r3, #0x3F
  02284	e5cd3000	 strb        r3, [sp]
  02288		 |$LN1@Nib2HexCha|
  02288		 |$LN3@Nib2HexCha|
  02288		 |$LN5@Nib2HexCha|

; 1479 :     }
; 1480 : }

  02288	e1dd00d0	 ldrsb       r0, [sp]
  0228c	e28dd004	 add         sp, sp, #4
  02290	e89d6000	 ldmia       sp, {sp, lr}
  02294	e12fff1e	 bx          lr
  02298		 |$M41374|

			 ENDP  ; |Nib2HexChar|

	EXPORT	|??_C@_04LLEBNMDN@?$CFs?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_05NLGPLALJ@0x?$CFx?5?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0O@HOAMAPGJ@0x?$CFx?5?9?50x?$CFx?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]

  00078			 AREA	 |.pdata|, PDATA
|$T41383| DCD	|$LN26@DumpMem|
	DCD	0xc000de04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04LLEBNMDN@?$CFs?$AN?6?$AA@| DCB "%s", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_05NLGPLALJ@0x?$CFx?5?$AA@| DCB "0x%x ", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0O@HOAMAPGJ@0x?$CFx?5?9?50x?$CFx?$AN?6?$AA@| DCB "0x%x - 0x%x", 0xd
	DCB	0xa, 0x0				; `string'

  0000c			 AREA	 |.xdata|, DATA
|$T41379| DCD	0xffffffe8
; Function compile flags: /Odtp

  02298			 AREA	 |.text|, CODE, ARM

  02298	00000000	 DCD         |__GSHandlerCheck|
  0229c	00000000	 DCD         |$T41379|

  022a0		 |DumpMem| PROC

; 1484 : {

  022a0		 |$LN26@DumpMem|
  022a0	e1a0c00d	 mov         r12, sp
  022a4	e92d0003	 stmdb       sp!, {r0, r1}
  022a8	e92d5000	 stmdb       sp!, {r12, lr}
  022ac	e24ddf45	 sub         sp, sp, #0x45, 30
  022b0		 |$M41380|
  022b0	e59f335c	 ldr         r3, [pc, #0x35C]
  022b4	e5933000	 ldr         r3, [r3]
  022b8	e58d310c	 str         r3, [sp, #0x10C]

; 1485 : #ifdef DEBUG
; 1486 : 	ULONG i,j;
; 1487 : 	char OutString[256];
; 1488 : 	int Index;
; 1489 : 
; 1490 :     KITLOutputDebugString("0x%x - 0x%x\r\n", Ptr, Ptr + Len);

  022bc	e59d211c	 ldr         r2, [sp, #0x11C]
  022c0	e59d3120	 ldr         r3, [sp, #0x120]
  022c4	e0822003	 add         r2, r2, r3
  022c8	e59d111c	 ldr         r1, [sp, #0x11C]
  022cc	e59f033c	 ldr         r0, [pc, #0x33C]
  022d0	eb000000	 bl          KITLOutputDebugString

; 1491 : 	for (j=0; j < Len; j+= 16) {

  022d4	e3a03000	 mov         r3, #0
  022d8	e58d3108	 str         r3, [sp, #0x108]
  022dc	ea000002	 b           |$LN21@DumpMem|
  022e0		 |$LN20@DumpMem|
  022e0	e59d3108	 ldr         r3, [sp, #0x108]
  022e4	e2833010	 add         r3, r3, #0x10
  022e8	e58d3108	 str         r3, [sp, #0x108]
  022ec		 |$LN21@DumpMem|
  022ec	e59d2108	 ldr         r2, [sp, #0x108]
  022f0	e59d3120	 ldr         r3, [sp, #0x120]
  022f4	e1520003	 cmp         r2, r3
  022f8	2a0000bd	 bcs         |$LN19@DumpMem|

; 1492 : 		Index = 0;

  022fc	e3a03000	 mov         r3, #0
  02300	e58d3000	 str         r3, [sp]

; 1493 : 		// Print out a leader
; 1494 :         KITLOutputDebugString("0x%x ", j);

  02304	e59d1108	 ldr         r1, [sp, #0x108]
  02308	e59f02fc	 ldr         r0, [pc, #0x2FC]
  0230c	eb000000	 bl          KITLOutputDebugString

; 1495 :         Index = 0;        

  02310	e3a03000	 mov         r3, #0
  02314	e58d3000	 str         r3, [sp]

; 1496 : 		
; 1497 : 		for (i=0; i < 16; i++) {

  02318	e3a03000	 mov         r3, #0
  0231c	e58d3104	 str         r3, [sp, #0x104]
  02320	ea000002	 b           |$LN18@DumpMem|
  02324		 |$LN17@DumpMem|
  02324	e59d3104	 ldr         r3, [sp, #0x104]
  02328	e2833001	 add         r3, r3, #1
  0232c	e58d3104	 str         r3, [sp, #0x104]
  02330		 |$LN18@DumpMem|
  02330	e59d3104	 ldr         r3, [sp, #0x104]
  02334	e3530010	 cmp         r3, #0x10
  02338	2a000051	 bcs         |$LN16@DumpMem|

; 1498 : 			if (i+j < Len) {

  0233c	e59d2104	 ldr         r2, [sp, #0x104]
  02340	e59d3108	 ldr         r3, [sp, #0x108]
  02344	e0822003	 add         r2, r2, r3
  02348	e59d3120	 ldr         r3, [sp, #0x120]
  0234c	e1520003	 cmp         r2, r3
  02350	2a000026	 bcs         |$LN15@DumpMem|

; 1499 : 				OutString[Index++] = Nib2HexChar ((BYTE)(Ptr[i+j]>>4));

  02354	e59d2104	 ldr         r2, [sp, #0x104]
  02358	e59d3108	 ldr         r3, [sp, #0x108]
  0235c	e0822003	 add         r2, r2, r3
  02360	e59d311c	 ldr         r3, [sp, #0x11C]
  02364	e0833002	 add         r3, r3, r2
  02368	e5d33000	 ldrb        r3, [r3]
  0236c	e1a03243	 mov         r3, r3, asr #4
  02370	e20300ff	 and         r0, r3, #0xFF
  02374	eb000000	 bl          Nib2HexChar
  02378	e5cd0110	 strb        r0, [sp, #0x110]
  0237c	e28d2004	 add         r2, sp, #4
  02380	e59d3000	 ldr         r3, [sp]
  02384	e0822003	 add         r2, r2, r3
  02388	e28d3c01	 add         r3, sp, #1, 24
  0238c	e1d331d0	 ldrsb       r3, [r3, #0x10]
  02390	e5c23000	 strb        r3, [r2]
  02394	e59d3000	 ldr         r3, [sp]
  02398	e2833001	 add         r3, r3, #1
  0239c	e58d3000	 str         r3, [sp]

; 1500 : 				OutString[Index++] = Nib2HexChar ((BYTE)(Ptr[i+j] & 0x0f));

  023a0	e59d2104	 ldr         r2, [sp, #0x104]
  023a4	e59d3108	 ldr         r3, [sp, #0x108]
  023a8	e0822003	 add         r2, r2, r3
  023ac	e59d311c	 ldr         r3, [sp, #0x11C]
  023b0	e0833002	 add         r3, r3, r2
  023b4	e5d33000	 ldrb        r3, [r3]
  023b8	e203300f	 and         r3, r3, #0xF
  023bc	e20300ff	 and         r0, r3, #0xFF
  023c0	eb000000	 bl          Nib2HexChar
  023c4	e5cd0111	 strb        r0, [sp, #0x111]
  023c8	e28d2004	 add         r2, sp, #4
  023cc	e59d3000	 ldr         r3, [sp]
  023d0	e0822003	 add         r2, r2, r3
  023d4	e28d3c01	 add         r3, sp, #1, 24
  023d8	e1d331d1	 ldrsb       r3, [r3, #0x11]
  023dc	e5c23000	 strb        r3, [r2]
  023e0	e59d3000	 ldr         r3, [sp]
  023e4	e2833001	 add         r3, r3, #1
  023e8	e58d3000	 str         r3, [sp]

; 1501 : 			} else {

  023ec	ea00000f	 b           |$LN14@DumpMem|
  023f0		 |$LN15@DumpMem|

; 1502 : 				OutString[Index++] = ' ';

  023f0	e28d2004	 add         r2, sp, #4
  023f4	e59d3000	 ldr         r3, [sp]
  023f8	e0822003	 add         r2, r2, r3
  023fc	e3a03020	 mov         r3, #0x20
  02400	e5c23000	 strb        r3, [r2]
  02404	e59d3000	 ldr         r3, [sp]
  02408	e2833001	 add         r3, r3, #1
  0240c	e58d3000	 str         r3, [sp]

; 1503 : 				OutString[Index++] = ' ';

  02410	e28d2004	 add         r2, sp, #4
  02414	e59d3000	 ldr         r3, [sp]
  02418	e0822003	 add         r2, r2, r3
  0241c	e3a03020	 mov         r3, #0x20
  02420	e5c23000	 strb        r3, [r2]
  02424	e59d3000	 ldr         r3, [sp]
  02428	e2833001	 add         r3, r3, #1
  0242c	e58d3000	 str         r3, [sp]
  02430		 |$LN14@DumpMem|

; 1504 : 			}
; 1505 : 			if (i == 7) {

  02430	e59d3104	 ldr         r3, [sp, #0x104]
  02434	e3530007	 cmp         r3, #7
  02438	1a000008	 bne         |$LN13@DumpMem|

; 1506 : 				OutString[Index++] = '-';

  0243c	e28d2004	 add         r2, sp, #4
  02440	e59d3000	 ldr         r3, [sp]
  02444	e0822003	 add         r2, r2, r3
  02448	e3a0302d	 mov         r3, #0x2D
  0244c	e5c23000	 strb        r3, [r2]
  02450	e59d3000	 ldr         r3, [sp]
  02454	e2833001	 add         r3, r3, #1
  02458	e58d3000	 str         r3, [sp]

; 1507 : 			} else {

  0245c	ea000007	 b           |$LN12@DumpMem|
  02460		 |$LN13@DumpMem|

; 1508 : 				OutString[Index++] = ' ';

  02460	e28d2004	 add         r2, sp, #4
  02464	e59d3000	 ldr         r3, [sp]
  02468	e0822003	 add         r2, r2, r3
  0246c	e3a03020	 mov         r3, #0x20
  02470	e5c23000	 strb        r3, [r2]
  02474	e59d3000	 ldr         r3, [sp]
  02478	e2833001	 add         r3, r3, #1
  0247c	e58d3000	 str         r3, [sp]
  02480		 |$LN12@DumpMem|

; 1509 : 			}
; 1510 : 		}

  02480	eaffffa7	 b           |$LN17@DumpMem|
  02484		 |$LN16@DumpMem|

; 1511 : 		for (i=0; i < 2; i++)

  02484	e3a03000	 mov         r3, #0
  02488	e58d3104	 str         r3, [sp, #0x104]
  0248c	ea000002	 b           |$LN11@DumpMem|
  02490		 |$LN10@DumpMem|
  02490	e59d3104	 ldr         r3, [sp, #0x104]
  02494	e2833001	 add         r3, r3, #1
  02498	e58d3104	 str         r3, [sp, #0x104]
  0249c		 |$LN11@DumpMem|
  0249c	e59d3104	 ldr         r3, [sp, #0x104]
  024a0	e3530002	 cmp         r3, #2
  024a4	2a000008	 bcs         |$LN9@DumpMem|

; 1512 : 			OutString[Index++] = ' ';

  024a8	e28d2004	 add         r2, sp, #4
  024ac	e59d3000	 ldr         r3, [sp]
  024b0	e0822003	 add         r2, r2, r3
  024b4	e3a03020	 mov         r3, #0x20
  024b8	e5c23000	 strb        r3, [r2]
  024bc	e59d3000	 ldr         r3, [sp]
  024c0	e2833001	 add         r3, r3, #1
  024c4	e58d3000	 str         r3, [sp]
  024c8	eafffff0	 b           |$LN10@DumpMem|
  024cc		 |$LN9@DumpMem|

; 1513 : 
; 1514 : 		for (i=0; i < 16; i++) {

  024cc	e3a03000	 mov         r3, #0
  024d0	e58d3104	 str         r3, [sp, #0x104]
  024d4	ea000002	 b           |$LN8@DumpMem|
  024d8		 |$LN7@DumpMem|
  024d8	e59d3104	 ldr         r3, [sp, #0x104]
  024dc	e2833001	 add         r3, r3, #1
  024e0	e58d3104	 str         r3, [sp, #0x104]
  024e4		 |$LN8@DumpMem|
  024e4	e59d3104	 ldr         r3, [sp, #0x104]
  024e8	e3530010	 cmp         r3, #0x10
  024ec	2a000037	 bcs         |$LN6@DumpMem|

; 1515 : 			if ((i+j) >=  Len) {

  024f0	e59d2104	 ldr         r2, [sp, #0x104]
  024f4	e59d3108	 ldr         r3, [sp, #0x108]
  024f8	e0822003	 add         r2, r2, r3
  024fc	e59d3120	 ldr         r3, [sp, #0x120]
  02500	e1520003	 cmp         r2, r3
  02504	3a000008	 bcc         |$LN5@DumpMem|

; 1516 : 				OutString[Index++] = ' ';

  02508	e28d2004	 add         r2, sp, #4
  0250c	e59d3000	 ldr         r3, [sp]
  02510	e0822003	 add         r2, r2, r3
  02514	e3a03020	 mov         r3, #0x20
  02518	e5c23000	 strb        r3, [r2]
  0251c	e59d3000	 ldr         r3, [sp]
  02520	e2833001	 add         r3, r3, #1
  02524	e58d3000	 str         r3, [sp]
  02528	ea000027	 b           |$LN4@DumpMem|
  0252c		 |$LN5@DumpMem|

; 1517 : 			} else if ((Ptr[i+j] < ' ') || (Ptr[i+j] >= 0x7f)) {

  0252c	e59d2104	 ldr         r2, [sp, #0x104]
  02530	e59d3108	 ldr         r3, [sp, #0x108]
  02534	e0822003	 add         r2, r2, r3
  02538	e59d311c	 ldr         r3, [sp, #0x11C]
  0253c	e0833002	 add         r3, r3, r2
  02540	e5d33000	 ldrb        r3, [r3]
  02544	e3530020	 cmp         r3, #0x20
  02548	ba000007	 blt         |$LN2@DumpMem|
  0254c	e59d2104	 ldr         r2, [sp, #0x104]
  02550	e59d3108	 ldr         r3, [sp, #0x108]
  02554	e0822003	 add         r2, r2, r3
  02558	e59d311c	 ldr         r3, [sp, #0x11C]
  0255c	e0833002	 add         r3, r3, r2
  02560	e5d33000	 ldrb        r3, [r3]
  02564	e353007f	 cmp         r3, #0x7F
  02568	ba000008	 blt         |$LN3@DumpMem|
  0256c		 |$LN2@DumpMem|

; 1518 : 				OutString[Index++] = '.';

  0256c	e28d2004	 add         r2, sp, #4
  02570	e59d3000	 ldr         r3, [sp]
  02574	e0822003	 add         r2, r2, r3
  02578	e3a0302e	 mov         r3, #0x2E
  0257c	e5c23000	 strb        r3, [r2]
  02580	e59d3000	 ldr         r3, [sp]
  02584	e2833001	 add         r3, r3, #1
  02588	e58d3000	 str         r3, [sp]

; 1519 : 			} else {

  0258c	ea00000e	 b           |$LN1@DumpMem|
  02590		 |$LN3@DumpMem|

; 1520 : 				OutString[Index++] = (CHAR)Ptr[i+j];

  02590	e59d2104	 ldr         r2, [sp, #0x104]
  02594	e59d3108	 ldr         r3, [sp, #0x108]
  02598	e0822003	 add         r2, r2, r3
  0259c	e59d311c	 ldr         r3, [sp, #0x11C]
  025a0	e0833002	 add         r3, r3, r2
  025a4	e5d33000	 ldrb        r3, [r3]
  025a8	e1a01c03	 mov         r1, r3, lsl #24
  025ac	e1a01c41	 mov         r1, r1, asr #24
  025b0	e28d2004	 add         r2, sp, #4
  025b4	e59d3000	 ldr         r3, [sp]
  025b8	e0823003	 add         r3, r2, r3
  025bc	e5c31000	 strb        r1, [r3]
  025c0	e59d3000	 ldr         r3, [sp]
  025c4	e2833001	 add         r3, r3, #1
  025c8	e58d3000	 str         r3, [sp]
  025cc		 |$LN1@DumpMem|
  025cc		 |$LN4@DumpMem|

; 1521 : 			}
; 1522 : 		}

  025cc	eaffffc1	 b           |$LN7@DumpMem|
  025d0		 |$LN6@DumpMem|

; 1523 : 		OutString[Index] = '\0';

  025d0	e28d2004	 add         r2, sp, #4
  025d4	e59d3000	 ldr         r3, [sp]
  025d8	e0822003	 add         r2, r2, r3
  025dc	e3a03000	 mov         r3, #0
  025e0	e5c23000	 strb        r3, [r2]

; 1524 : 		KITLOutputDebugString("%s\r\n", OutString);

  025e4	e28d1004	 add         r1, sp, #4
  025e8	e59f0018	 ldr         r0, [pc, #0x18]
  025ec	eb000000	 bl          KITLOutputDebugString

; 1525 : 	}

  025f0	eaffff3a	 b           |$LN20@DumpMem|
  025f4		 |$LN19@DumpMem|

; 1484 : {

  025f4	e59d010c	 ldr         r0, [sp, #0x10C]
  025f8	eb000000	 bl          __security_check_cookie

; 1526 : #endif DEBUG	
; 1527 : }

  025fc	e28ddf45	 add         sp, sp, #0x45, 30
  02600	e89d6000	 ldmia       sp, {sp, lr}
  02604	e12fff1e	 bx          lr
  02608		 |$LN27@DumpMem|
  02608		 |$LN28@DumpMem|
  02608	00000000	 DCD         |??_C@_04LLEBNMDN@?$CFs?$AN?6?$AA@|
  0260c		 |$LN29@DumpMem|
  0260c	00000000	 DCD         |??_C@_05NLGPLALJ@0x?$CFx?5?$AA@|
  02610		 |$LN30@DumpMem|
  02610	00000000	 DCD         |??_C@_0O@HOAMAPGJ@0x?$CFx?5?9?50x?$CFx?$AN?6?$AA@|
  02614		 |$LN31@DumpMem|
  02614	00000000	 DCD         |__security_cookie|
  02618		 |$M41381|

			 ENDP  ; |DumpMem|

	END
