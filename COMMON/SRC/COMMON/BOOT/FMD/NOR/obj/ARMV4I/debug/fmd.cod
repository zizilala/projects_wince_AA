; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\BOOT\FMD\NOR\fmd.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
|s_blockSign| DCD 0xc1552106
	DCD	0xdf9c29d5
	DCD	0xbab8eab8
	DCD	0x82d3f9f3
	DCD	0x3b438a47
	DCD	0xa9d92ae6
	DCD	0x9396731
	DCD	0x12bf6753

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|FMD_Deinit|
	EXPORT	|??_C@_1GE@OBLKJMLF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAb?$AAu?$AAi?$AAl?$AAd?$AA?5?$AAf?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@DCCBGMCI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAf?$AAl?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_08GODGKFDB@MSFLSH50?$AA@| [ DATA ] ; `string'
	EXPORT	|FMD_Init|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|memcmp|
	IMPORT	|OALPAtoVA|
	IMPORT	|memset|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.bss|, NOINIT
|s_fmd|	%	0x324

  00000			 AREA	 |.pdata|, PDATA
|$T43733| DCD	|$LN22@FMD_Init|
	DCD	0x4000b804
; File c:\wince600\platform\common\src\common\boot\fmd\nor\fmd.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@OBLKJMLF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAb?$AAu?$AAi?$AAl?$AAd?$AA?5?$AAf?$AAl@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "i", 0x0, "l", 0x0, "d", 0x0, " ", 0x0, "f"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@DCCBGMCI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAf?$AAl?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "f"
	DCB	0x0, "i", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "l", 0x0, "a"
	DCB	0x0, "y", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "s"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08GODGKFDB@MSFLSH50?$AA@| DCB "MSFLSH50", 0x0	; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FMD_Init| PROC

; 368  : {

  00000		 |$LN22@FMD_Init|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd030	 sub         sp, sp, #0x30
  00010		 |$M43730|

; 369  :     HANDLE hFMD = NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3008	 str         r3, [sp, #8]

; 370  :     UCHAR *pLayoutSector;
; 371  :     UCHAR *pAddress;
; 372  :     ULONG sectors;
; 373  : 
; 374  : 
; 375  :     memset(&s_fmd, 0, sizeof(s_fmd));

  00018	e3a02fc9	 mov         r2, #0xC9, 30
  0001c	e3a01000	 mov         r1, #0
  00020	e59f02a4	 ldr         r0, [pc, #0x2A4]
  00024	eb000000	 bl          memset

; 376  : 
; 377  :     // This must not be NULL
; 378  :     if (pRegIn == NULL) goto cleanUp;

  00028	e59d303c	 ldr         r3, [sp, #0x3C]
  0002c	e3530000	 cmp         r3, #0
  00030	1a000000	 bne         |$LN12@FMD_Init|
  00034	ea000099	 b           |$cleanUp$43510|
  00038		 |$LN12@FMD_Init|

; 379  :     
; 380  :     // Map NAND registers
; 381  :     s_fmd.memBase = pRegIn->MemBase.Reg[0];

  00038	e59d303c	 ldr         r3, [sp, #0x3C]
  0003c	e2833e31	 add         r3, r3, #0x31, 28
  00040	e5932000	 ldr         r2, [r3]
  00044	e59f3280	 ldr         r3, [pc, #0x280]
  00048	e5832000	 str         r2, [r3]

; 382  :     s_fmd.memLen = pRegIn->MemLen.Reg[0];

  0004c	e59d303c	 ldr         r3, [sp, #0x3C]
  00050	e2833fcb	 add         r3, r3, #0xCB, 30
  00054	e5932000	 ldr         r2, [r3]
  00058	e59f326c	 ldr         r3, [pc, #0x26C]
  0005c	e5832004	 str         r2, [r3, #4]

; 383  : 
; 384  :     // Map base address    
; 385  :     s_fmd.pBase = OALPAtoUA(s_fmd.memBase);

  00060	e3a01000	 mov         r1, #0
  00064	e59f3260	 ldr         r3, [pc, #0x260]
  00068	e5930000	 ldr         r0, [r3]
  0006c	eb000000	 bl          OALPAtoVA
  00070	e58d0018	 str         r0, [sp, #0x18]
  00074	e59d2018	 ldr         r2, [sp, #0x18]
  00078	e59f324c	 ldr         r3, [pc, #0x24C]
  0007c	e5832010	 str         r2, [r3, #0x10]

; 386  : 
; 387  :     // Find block size
; 388  :     s_fmd.blockSize = FindBlockSize(s_fmd.pBase, s_fmd.memLen);

  00080	e59f3244	 ldr         r3, [pc, #0x244]
  00084	e5931004	 ldr         r1, [r3, #4]
  00088	e59f323c	 ldr         r3, [pc, #0x23C]
  0008c	e5930010	 ldr         r0, [r3, #0x10]
  00090	eb000000	 bl          FindBlockSize
  00094	e58d001c	 str         r0, [sp, #0x1C]
  00098	e59d201c	 ldr         r2, [sp, #0x1C]
  0009c	e59f3228	 ldr         r3, [pc, #0x228]
  000a0	e583200c	 str         r2, [r3, #0xC]

; 389  : 
; 390  :     // Calculate number of blocks on device
; 391  :     s_fmd.blocks = s_fmd.memLen / s_fmd.blockSize;

  000a4	e59f3220	 ldr         r3, [pc, #0x220]
  000a8	e5931004	 ldr         r1, [r3, #4]
  000ac	e59f3218	 ldr         r3, [pc, #0x218]
  000b0	e593000c	 ldr         r0, [r3, #0xC]
  000b4	eb000000	 bl          __rt_udiv
  000b8	e59f320c	 ldr         r3, [pc, #0x20C]
  000bc	e5830014	 str         r0, [r3, #0x14]

; 392  : 
; 393  :     //----------------------------------------------------------------------
; 394  :     //  Get volume/device layout
; 395  :     //----------------------------------------------------------------------
; 396  : 
; 397  :     s_fmd.reservedRegions = 0;

  000c0	e59f2204	 ldr         r2, [pc, #0x204]
  000c4	e3a03000	 mov         r3, #0
  000c8	e5823018	 str         r3, [r2, #0x18]

; 398  :     s_fmd.regions = 0;

  000cc	e59f21f8	 ldr         r2, [pc, #0x1F8]
  000d0	e3a03000	 mov         r3, #0
  000d4	e582311c	 str         r3, [r2, #0x11C]

; 399  :     pLayoutSector = NULL;

  000d8	e3a03000	 mov         r3, #0
  000dc	e58d3000	 str         r3, [sp]

; 400  : 
; 401  :     // Set sector size to 512 bytes, we can modify it later
; 402  :     s_fmd.sectorSize = 512;

  000e0	e59f21e4	 ldr         r2, [pc, #0x1E4]
  000e4	e3a03c02	 mov         r3, #2, 24
  000e8	e5823008	 str         r3, [r2, #8]

; 403  : 
; 404  :     // Now we have to try find boot sector & flash partition table
; 405  :     pAddress = s_fmd.pBase;

  000ec	e59f31d8	 ldr         r3, [pc, #0x1D8]
  000f0	e5933010	 ldr         r3, [r3, #0x10]
  000f4	e58d3004	 str         r3, [sp, #4]

; 406  :     sectors = s_fmd.memLen / s_fmd.sectorSize;

  000f8	e59f31cc	 ldr         r3, [pc, #0x1CC]
  000fc	e5931004	 ldr         r1, [r3, #4]
  00100	e59f31c4	 ldr         r3, [pc, #0x1C4]
  00104	e5930008	 ldr         r0, [r3, #8]
  00108	eb000000	 bl          __rt_udiv
  0010c	e58d000c	 str         r0, [sp, #0xC]
  00110		 |$LN19@FMD_Init|
  00110		 |$LN11@FMD_Init|

; 407  : 
; 408  :     while (sectors-- > 0)

  00110	e59d300c	 ldr         r3, [sp, #0xC]
  00114	e3530000	 cmp         r3, #0
  00118	e59d300c	 ldr         r3, [sp, #0xC]
  0011c	e2433001	 sub         r3, r3, #1
  00120	e58d300c	 str         r3, [sp, #0xC]
  00124	9a00003b	 bls         |$LN10@FMD_Init|

; 409  :         {
; 410  :         UINT32 sectorSize;
; 411  :         
; 412  :         // Check for boot sector
; 413  :         if (!IS_VALID_BOOTSEC(pAddress))

  00128	e59d3004	 ldr         r3, [sp, #4]
  0012c	e2833c02	 add         r3, r3, #2, 24
  00130	e2433002	 sub         r3, r3, #2
  00134	e1d330b0	 ldrh        r3, [r3]
  00138	e1a02003	 mov         r2, r3
  0013c	e3a03caa	 mov         r3, #0xAA, 24
  00140	e3833055	 orr         r3, r3, #0x55
  00144	e1520003	 cmp         r2, r3
  00148	1a000007	 bne         |$LN8@FMD_Init|
  0014c	e59d3004	 ldr         r3, [sp, #4]
  00150	e5d33000	 ldrb        r3, [r3]
  00154	e35300eb	 cmp         r3, #0xEB
  00158	0a000009	 beq         |$LN9@FMD_Init|
  0015c	e59d3004	 ldr         r3, [sp, #4]
  00160	e5d33000	 ldrb        r3, [r3]
  00164	e35300e9	 cmp         r3, #0xE9
  00168	0a000005	 beq         |$LN9@FMD_Init|
  0016c		 |$LN8@FMD_Init|

; 414  :             {
; 415  :             // Move to next sector
; 416  :             pAddress += s_fmd.sectorSize;

  0016c	e59d2004	 ldr         r2, [sp, #4]
  00170	e59f3154	 ldr         r3, [pc, #0x154]
  00174	e5933008	 ldr         r3, [r3, #8]
  00178	e0823003	 add         r3, r2, r3
  0017c	e58d3004	 str         r3, [sp, #4]

; 417  :             continue;

  00180	eaffffe2	 b           |$LN11@FMD_Init|
  00184		 |$LN9@FMD_Init|

; 418  :             }
; 419  : 
; 420  :         // Look for flash layout
; 421  :         sectorSize = 512;

  00184	e3a03c02	 mov         r3, #2, 24
  00188	e58d3010	 str         r3, [sp, #0x10]
  0018c		 |$LN7@FMD_Init|

; 422  :         while (sectorSize <= s_fmd.blockSize)

  0018c	e59d2010	 ldr         r2, [sp, #0x10]
  00190	e59f3134	 ldr         r3, [pc, #0x134]
  00194	e593300c	 ldr         r3, [r3, #0xC]
  00198	e1520003	 cmp         r2, r3
  0019c	8a000010	 bhi         |$LN6@FMD_Init|

; 423  :             {
; 424  :             if (IS_VALID_FLS(pAddress + sectorSize))

  001a0	e3a02008	 mov         r2, #8
  001a4	e59f1130	 ldr         r1, [pc, #0x130]
  001a8	e59d0004	 ldr         r0, [sp, #4]
  001ac	e59d3010	 ldr         r3, [sp, #0x10]
  001b0	e0800003	 add         r0, r0, r3
  001b4	eb000000	 bl          memcmp
  001b8	e58d0020	 str         r0, [sp, #0x20]
  001bc	e59d3020	 ldr         r3, [sp, #0x20]
  001c0	e3530000	 cmp         r3, #0
  001c4	1a000002	 bne         |$LN5@FMD_Init|

; 425  :                 {
; 426  :                 pLayoutSector = pAddress;

  001c8	e59d3004	 ldr         r3, [sp, #4]
  001cc	e58d3000	 str         r3, [sp]

; 427  :                 break;

  001d0	ea000003	 b           |$LN6@FMD_Init|
  001d4		 |$LN5@FMD_Init|

; 428  :                 }
; 429  :             // Multiply by two
; 430  :             sectorSize <<= 1;

  001d4	e59d3010	 ldr         r3, [sp, #0x10]
  001d8	e1a03083	 mov         r3, r3, lsl #1
  001dc	e58d3010	 str         r3, [sp, #0x10]

; 431  :             }

  001e0	eaffffe9	 b           |$LN7@FMD_Init|
  001e4		 |$LN6@FMD_Init|

; 432  : 
; 433  :         // Did we find flash layout sector?
; 434  :         if (pLayoutSector != NULL)

  001e4	e59d3000	 ldr         r3, [sp]
  001e8	e3530000	 cmp         r3, #0
  001ec	0a000003	 beq         |$LN4@FMD_Init|

; 435  :             {
; 436  :             // Update sector size
; 437  :             s_fmd.sectorSize = sectorSize;

  001f0	e59d2010	 ldr         r2, [sp, #0x10]
  001f4	e59f30d0	 ldr         r3, [pc, #0xD0]
  001f8	e5832008	 str         r2, [r3, #8]

; 438  :             break;

  001fc	ea000005	 b           |$LN10@FMD_Init|
  00200		 |$LN4@FMD_Init|

; 439  :             }
; 440  :         
; 441  :         // Move to next sector and check for region table
; 442  :         pAddress += s_fmd.sectorSize;

  00200	e59d2004	 ldr         r2, [sp, #4]
  00204	e59f30c0	 ldr         r3, [pc, #0xC0]
  00208	e5933008	 ldr         r3, [r3, #8]
  0020c	e0823003	 add         r3, r2, r3
  00210	e58d3004	 str         r3, [sp, #4]

; 443  : 
; 444  :         }

  00214	eaffffbd	 b           |$LN19@FMD_Init|
  00218		 |$LN10@FMD_Init|

; 445  : 
; 446  :     if (pLayoutSector == 0)

  00218	e59d3000	 ldr         r3, [sp]
  0021c	e3530000	 cmp         r3, #0
  00220	1a00000a	 bne         |$LN3@FMD_Init|

; 447  :         {
; 448  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_Init: "
; 449  :             L"Failed find flash layout sector\r\n"
; 450  :             ));

  00224	e59f30a8	 ldr         r3, [pc, #0xA8]
  00228	e5933440	 ldr         r3, [r3, #0x440]
  0022c	e3130001	 tst         r3, #1
  00230	0a000004	 beq         |$LN15@FMD_Init|
  00234	e59f009c	 ldr         r0, [pc, #0x9C]
  00238	eb000000	 bl          NKDbgPrintfW
  0023c	e3a03001	 mov         r3, #1
  00240	e58d3024	 str         r3, [sp, #0x24]
  00244	ea000001	 b           |$LN16@FMD_Init|
  00248		 |$LN15@FMD_Init|
  00248	e3a03000	 mov         r3, #0
  0024c	e58d3024	 str         r3, [sp, #0x24]
  00250		 |$LN16@FMD_Init|
  00250		 |$LN3@FMD_Init|

; 451  :         }
; 452  :     
; 453  :     // Read flash layout sector and make local copy...
; 454  :     if (!BuildLayoutInfo(pLayoutSector))

  00250	e59d0000	 ldr         r0, [sp]
  00254	eb000000	 bl          BuildLayoutInfo
  00258	e58d0028	 str         r0, [sp, #0x28]
  0025c	e59d3028	 ldr         r3, [sp, #0x28]
  00260	e3530000	 cmp         r3, #0
  00264	1a00000b	 bne         |$LN2@FMD_Init|

; 455  :         {
; 456  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_Init: "
; 457  :             L"Failed build flash layout info\r\n"
; 458  :             ));

  00268	e59f3064	 ldr         r3, [pc, #0x64]
  0026c	e5933440	 ldr         r3, [r3, #0x440]
  00270	e3130001	 tst         r3, #1
  00274	0a000004	 beq         |$LN17@FMD_Init|
  00278	e59f0050	 ldr         r0, [pc, #0x50]
  0027c	eb000000	 bl          NKDbgPrintfW
  00280	e3a03001	 mov         r3, #1
  00284	e58d302c	 str         r3, [sp, #0x2C]
  00288	ea000001	 b           |$LN18@FMD_Init|
  0028c		 |$LN17@FMD_Init|
  0028c	e3a03000	 mov         r3, #0
  00290	e58d302c	 str         r3, [sp, #0x2C]
  00294		 |$LN18@FMD_Init|

; 459  :         goto cleanUp;

  00294	ea000001	 b           |$cleanUp$43510|
  00298		 |$LN2@FMD_Init|

; 460  :         }
; 461  : 
; 462  :     // Done
; 463  :     hFMD = &s_fmd;

  00298	e59f302c	 ldr         r3, [pc, #0x2C]
  0029c	e58d3008	 str         r3, [sp, #8]
  002a0		 |$cleanUp$43510|

; 464  : 
; 465  : cleanUp:
; 466  :     if (hFMD == NULL) FMD_Deinit(&s_fmd);

  002a0	e59d3008	 ldr         r3, [sp, #8]
  002a4	e3530000	 cmp         r3, #0
  002a8	1a000001	 bne         |$LN1@FMD_Init|
  002ac	e59f0018	 ldr         r0, [pc, #0x18]
  002b0	eb000000	 bl          FMD_Deinit
  002b4		 |$LN1@FMD_Init|

; 467  :     return hFMD;

  002b4	e59d3008	 ldr         r3, [sp, #8]
  002b8	e58d3014	 str         r3, [sp, #0x14]

; 468  : }

  002bc	e59d0014	 ldr         r0, [sp, #0x14]
  002c0	e28dd030	 add         sp, sp, #0x30
  002c4	e89d6000	 ldmia       sp, {sp, lr}
  002c8	e12fff1e	 bx          lr
  002cc		 |$LN23@FMD_Init|
  002cc		 |$LN24@FMD_Init|
  002cc	00000000	 DCD         |s_fmd|
  002d0		 |$LN25@FMD_Init|
  002d0	00000000	 DCD         |??_C@_1GE@OBLKJMLF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAb?$AAu?$AAi?$AAl?$AAd?$AA?5?$AAf?$AAl@|
  002d4		 |$LN26@FMD_Init|
  002d4	00000000	 DCD         |dpCurSettings|
  002d8		 |$LN27@FMD_Init|
  002d8	00000000	 DCD         |??_C@_1GG@DCCBGMCI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAf?$AAl?$AAa@|
  002dc		 |$LN28@FMD_Init|
  002dc	00000000	 DCD         |??_C@_08GODGKFDB@MSFLSH50?$AA@|
  002e0		 |$M43731|

			 ENDP  ; |FMD_Init|

	IMPORT	|OALFlashInfo|

  00008			 AREA	 |.pdata|, PDATA
|$T43745| DCD	|$LN17@FindBlockS|
	DCD	0x40006704
; Function compile flags: /Odtp

  002e0			 AREA	 |.text|, CODE, ARM

  002e0		 |FindBlockSize| PROC

; 144  : {

  002e0		 |$LN17@FindBlockS|
  002e0	e1a0c00d	 mov         r12, sp
  002e4	e92d0003	 stmdb       sp!, {r0, r1}
  002e8	e92d5000	 stmdb       sp!, {r12, lr}
  002ec	e24dd06c	 sub         sp, sp, #0x6C
  002f0		 |$M43742|

; 145  :     OAL_FLASH_INFO flashInfo;
; 146  :     ULONG blockSize = 0;

  002f0	e3a03000	 mov         r3, #0
  002f4	e58d3060	 str         r3, [sp, #0x60]
  002f8		 |$LN12@FindBlockS|

; 147  :     ULONG region;
; 148  :     ULONG flashSize;
; 149  : 
; 150  :     while (size > 0)

  002f8	e59d3078	 ldr         r3, [sp, #0x78]
  002fc	e3530000	 cmp         r3, #0
  00300	9a000057	 bls         |$LN11@FindBlockS|

; 151  :         {
; 152  :         if (!OALFlashInfo(pBase, &flashInfo))

  00304	e28d1004	 add         r1, sp, #4
  00308	e59d0074	 ldr         r0, [sp, #0x74]
  0030c	eb000000	 bl          OALFlashInfo
  00310	e58d0068	 str         r0, [sp, #0x68]
  00314	e59d3068	 ldr         r3, [sp, #0x68]
  00318	e3530000	 cmp         r3, #0
  0031c	1a000002	 bne         |$LN10@FindBlockS|

; 153  :             {
; 154  :             blockSize = 0;

  00320	e3a03000	 mov         r3, #0
  00324	e58d3060	 str         r3, [sp, #0x60]

; 155  :             goto cleanUp;

  00328	ea00004d	 b           |$cleanUp$43410|
  0032c		 |$LN10@FindBlockS|

; 156  :             }
; 157  :         for (region = 0; region < flashInfo.regions; region++)

  0032c	e3a03000	 mov         r3, #0
  00330	e58d305c	 str         r3, [sp, #0x5C]
  00334	ea000002	 b           |$LN9@FindBlockS|
  00338		 |$LN8@FindBlockS|
  00338	e59d305c	 ldr         r3, [sp, #0x5C]
  0033c	e2833001	 add         r3, r3, #1
  00340	e58d305c	 str         r3, [sp, #0x5C]
  00344		 |$LN9@FindBlockS|
  00344	e59d205c	 ldr         r2, [sp, #0x5C]
  00348	e59d3018	 ldr         r3, [sp, #0x18]
  0034c	e1520003	 cmp         r2, r3
  00350	2a000031	 bcs         |$LN7@FindBlockS|

; 158  :             {
; 159  :             if (flashInfo.aBlockSize[region] > blockSize)

  00354	e59d105c	 ldr         r1, [sp, #0x5C]
  00358	e3a03004	 mov         r3, #4
  0035c	e0020391	 mul         r2, r1, r3
  00360	e28d301c	 add         r3, sp, #0x1C
  00364	e0833002	 add         r3, r3, r2
  00368	e5932000	 ldr         r2, [r3]
  0036c	e59d3060	 ldr         r3, [sp, #0x60]
  00370	e1520003	 cmp         r2, r3
  00374	9a000017	 bls         |$LN6@FindBlockS|

; 160  :                 {
; 161  :                     if ( (blockSize > 0) &&
; 162  :                         ((flashInfo.aBlockSize[region] % blockSize) != 0) )

  00378	e59d3060	 ldr         r3, [sp, #0x60]
  0037c	e3530000	 cmp         r3, #0
  00380	9a00000c	 bls         |$LN5@FindBlockS|
  00384	e59d105c	 ldr         r1, [sp, #0x5C]
  00388	e3a03004	 mov         r3, #4
  0038c	e0020391	 mul         r2, r1, r3
  00390	e28d301c	 add         r3, sp, #0x1C
  00394	e0833002	 add         r3, r3, r2
  00398	e5931000	 ldr         r1, [r3]
  0039c	e59d0060	 ldr         r0, [sp, #0x60]
  003a0	eb000000	 bl          __rt_udiv
  003a4	e3510000	 cmp         r1, #0
  003a8	0a000002	 beq         |$LN5@FindBlockS|

; 163  :                         {
; 164  :                         blockSize = 0;

  003ac	e3a03000	 mov         r3, #0
  003b0	e58d3060	 str         r3, [sp, #0x60]

; 165  :                         goto cleanUp;

  003b4	ea00002a	 b           |$cleanUp$43410|
  003b8		 |$LN5@FindBlockS|

; 166  :                         }
; 167  :                     blockSize = flashInfo.aBlockSize[region];

  003b8	e59d105c	 ldr         r1, [sp, #0x5C]
  003bc	e3a03004	 mov         r3, #4
  003c0	e0020391	 mul         r2, r1, r3
  003c4	e28d301c	 add         r3, sp, #0x1C
  003c8	e0833002	 add         r3, r3, r2
  003cc	e5933000	 ldr         r3, [r3]
  003d0	e58d3060	 str         r3, [sp, #0x60]
  003d4	ea00000f	 b           |$LN4@FindBlockS|
  003d8		 |$LN6@FindBlockS|

; 168  :                 }
; 169  :             else if (blockSize > 0)

  003d8	e59d3060	 ldr         r3, [sp, #0x60]
  003dc	e3530000	 cmp         r3, #0
  003e0	9a00000c	 bls         |$LN3@FindBlockS|

; 170  :                 {
; 171  :                 if ((blockSize % flashInfo.aBlockSize[region]) != 0)

  003e4	e59d105c	 ldr         r1, [sp, #0x5C]
  003e8	e3a03004	 mov         r3, #4
  003ec	e0020391	 mul         r2, r1, r3
  003f0	e28d301c	 add         r3, sp, #0x1C
  003f4	e0833002	 add         r3, r3, r2
  003f8	e59d1060	 ldr         r1, [sp, #0x60]
  003fc	e5930000	 ldr         r0, [r3]
  00400	eb000000	 bl          __rt_udiv
  00404	e3510000	 cmp         r1, #0
  00408	0a000002	 beq         |$LN2@FindBlockS|

; 172  :                     {
; 173  :                     blockSize = 0;

  0040c	e3a03000	 mov         r3, #0
  00410	e58d3060	 str         r3, [sp, #0x60]

; 174  :                     goto cleanUp;

  00414	ea000012	 b           |$cleanUp$43410|
  00418		 |$LN2@FindBlockS|
  00418		 |$LN3@FindBlockS|
  00418		 |$LN4@FindBlockS|

; 175  :                     }
; 176  :                 }
; 177  :             }

  00418	eaffffc6	 b           |$LN8@FindBlockS|
  0041c		 |$LN7@FindBlockS|

; 178  :         flashSize = flashInfo.size * flashInfo.parallel;

  0041c	e59d2010	 ldr         r2, [sp, #0x10]
  00420	e59d3008	 ldr         r3, [sp, #8]
  00424	e0030392	 mul         r3, r2, r3
  00428	e58d3000	 str         r3, [sp]

; 179  :         pBase = (UCHAR*)pBase + flashSize;

  0042c	e59d2074	 ldr         r2, [sp, #0x74]
  00430	e59d3000	 ldr         r3, [sp]
  00434	e0823003	 add         r3, r2, r3
  00438	e58d3074	 str         r3, [sp, #0x74]

; 180  :         if (flashSize > size) break;

  0043c	e59d2000	 ldr         r2, [sp]
  00440	e59d3078	 ldr         r3, [sp, #0x78]
  00444	e1520003	 cmp         r2, r3
  00448	9a000000	 bls         |$LN1@FindBlockS|
  0044c	ea000004	 b           |$LN11@FindBlockS|
  00450		 |$LN1@FindBlockS|

; 181  :         size -= flashSize;

  00450	e59d2078	 ldr         r2, [sp, #0x78]
  00454	e59d3000	 ldr         r3, [sp]
  00458	e0423003	 sub         r3, r2, r3
  0045c	e58d3078	 str         r3, [sp, #0x78]

; 182  :         }

  00460	eaffffa4	 b           |$LN12@FindBlockS|
  00464		 |$LN11@FindBlockS|
  00464		 |$cleanUp$43410|

; 183  : 
; 184  : cleanUp:
; 185  :     return blockSize;

  00464	e59d3060	 ldr         r3, [sp, #0x60]
  00468	e58d3064	 str         r3, [sp, #0x64]

; 186  : }

  0046c	e59d0064	 ldr         r0, [sp, #0x64]
  00470	e28dd06c	 add         sp, sp, #0x6C
  00474	e89d6000	 ldmia       sp, {sp, lr}
  00478	e12fff1e	 bx          lr
  0047c		 |$M43743|

			 ENDP  ; |FindBlockSize|

	EXPORT	|??_C@_1JI@COJGLHJL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@JOBMFFAJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@OGLDKI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@| [ DATA ] ; `string'
	IMPORT	|memcpy|

  00010			 AREA	 |.pdata|, PDATA
|$T43759| DCD	|$LN28@BuildLayou|
	DCD	0x4000e804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@COJGLHJL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "!", 0x0, "B", 0x0, "u", 0x0, "i"
	DCB	0x0, "l", 0x0, "d", 0x0, "L", 0x0, "a", 0x0, "y", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, "i", 0x0, "f", 0x0, "y", 0x0, " ", 0x0, "b", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "s", 0x0, "i"
	DCB	0x0, "g", 0x0, "n", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "e", 0x0, " ", 0x0, "(", 0x0, "b", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@JOBMFFAJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "!", 0x0, "B", 0x0, "u", 0x0, "i"
	DCB	0x0, "l", 0x0, "d", 0x0, "L", 0x0, "a", 0x0, "y", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, ":", 0x0, " ", 0x0, "T", 0x0, "o", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "y", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "s", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@OGLDKI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "!", 0x0, "B", 0x0, "u", 0x0, "i"
	DCB	0x0, "l", 0x0, "d", 0x0, "L", 0x0, "a", 0x0, "y", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, ":", 0x0, " ", 0x0, "T", 0x0, "o", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "y", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "e", 0x0, "r", 0x0, "v", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0047c			 AREA	 |.text|, CODE, ARM

  0047c		 |BuildLayoutInfo| PROC

; 221  : {

  0047c		 |$LN28@BuildLayou|
  0047c	e1a0c00d	 mov         r12, sp
  00480	e92d0001	 stmdb       sp!, {r0}
  00484	e92d5000	 stmdb       sp!, {r12, lr}
  00488	e24dd038	 sub         sp, sp, #0x38
  0048c		 |$M43756|

; 222  :     BOOL rc = FALSE;

  0048c	e3a03000	 mov         r3, #0
  00490	e58d3004	 str         r3, [sp, #4]

; 223  :     FlashLayoutSector *pSector = (FlashLayoutSector*)pLayoutSector;

  00494	e59d3040	 ldr         r3, [sp, #0x40]
  00498	e58d3000	 str         r3, [sp]

; 224  :     UCHAR *pInfo = (UCHAR*)&pSector[1];

  0049c	e59d3000	 ldr         r3, [sp]
  004a0	e2833010	 add         r3, r3, #0x10
  004a4	e58d300c	 str         r3, [sp, #0xC]

; 225  :     FlashRegion *pRegion;
; 226  :     ULONG sector;
; 227  :     ULONG region;
; 228  : 
; 229  :     s_fmd.reservedRegions = pSector->cbReservedEntries/sizeof(ReservedEntry);

  004a8	e59d3000	 ldr         r3, [sp]
  004ac	e2833008	 add         r3, r3, #8
  004b0	e5931000	 ldr         r1, [r3]
  004b4	e3a00010	 mov         r0, #0x10
  004b8	eb000000	 bl          __rt_udiv
  004bc	e59f334c	 ldr         r3, [pc, #0x34C]
  004c0	e5830018	 str         r0, [r3, #0x18]

; 230  :     if (s_fmd.reservedRegions > dimof(s_fmd.reservedRegion))

  004c4	e59f3344	 ldr         r3, [pc, #0x344]
  004c8	e5933018	 ldr         r3, [r3, #0x18]
  004cc	e3530010	 cmp         r3, #0x10
  004d0	9a00000d	 bls         |$LN15@BuildLayou|

; 231  :         {
; 232  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_Init!BuildLayoutInfo: "
; 233  :             L"To many reserved regions (%d)\r\n", s_fmd.reservedRegions
; 234  :             ));

  004d4	e59f3330	 ldr         r3, [pc, #0x330]
  004d8	e5933440	 ldr         r3, [r3, #0x440]
  004dc	e3130001	 tst         r3, #1
  004e0	0a000006	 beq         |$LN18@BuildLayou|
  004e4	e59f3324	 ldr         r3, [pc, #0x324]
  004e8	e5931018	 ldr         r1, [r3, #0x18]
  004ec	e59f0324	 ldr         r0, [pc, #0x324]
  004f0	eb000000	 bl          NKDbgPrintfW
  004f4	e3a03001	 mov         r3, #1
  004f8	e58d3024	 str         r3, [sp, #0x24]
  004fc	ea000001	 b           |$LN19@BuildLayou|
  00500		 |$LN18@BuildLayou|
  00500	e3a03000	 mov         r3, #0
  00504	e58d3024	 str         r3, [sp, #0x24]
  00508		 |$LN19@BuildLayou|

; 235  :         goto cleanUp;

  00508	ea0000b8	 b           |$cleanUp$43445|
  0050c		 |$LN15@BuildLayou|

; 236  :         }
; 237  :     if (s_fmd.reservedRegions > 0)

  0050c	e59f32fc	 ldr         r3, [pc, #0x2FC]
  00510	e5933018	 ldr         r3, [r3, #0x18]
  00514	e3530000	 cmp         r3, #0
  00518	9a000007	 bls         |$LN14@BuildLayou|

; 238  :         {
; 239  :         memcpy(
; 240  :             s_fmd.reservedRegion, pInfo,
; 241  :             s_fmd.reservedRegions * sizeof(ReservedEntry)
; 242  :             );

  0051c	e59f32ec	 ldr         r3, [pc, #0x2EC]
  00520	e5931018	 ldr         r1, [r3, #0x18]
  00524	e3a03010	 mov         r3, #0x10
  00528	e0020391	 mul         r2, r1, r3
  0052c	e59d100c	 ldr         r1, [sp, #0xC]
  00530	e59f32d8	 ldr         r3, [pc, #0x2D8]
  00534	e283001c	 add         r0, r3, #0x1C
  00538	eb000000	 bl          memcpy
  0053c		 |$LN14@BuildLayou|

; 243  :         }
; 244  : 
; 245  :     s_fmd.regions = pSector->cbRegionEntries/sizeof(FlashRegion);

  0053c	e59d3000	 ldr         r3, [sp]
  00540	e283300c	 add         r3, r3, #0xC
  00544	e5931000	 ldr         r1, [r3]
  00548	e3a0001c	 mov         r0, #0x1C
  0054c	eb000000	 bl          __rt_udiv
  00550	e59f32b8	 ldr         r3, [pc, #0x2B8]
  00554	e583011c	 str         r0, [r3, #0x11C]

; 246  :     if (s_fmd.regions > dimof(s_fmd.region))

  00558	e59f32b0	 ldr         r3, [pc, #0x2B0]
  0055c	e593311c	 ldr         r3, [r3, #0x11C]
  00560	e3530010	 cmp         r3, #0x10
  00564	9a00000d	 bls         |$LN13@BuildLayou|

; 247  :         {
; 248  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_Init!BuildLayoutInfo: "
; 249  :             L"To many regions (%d)\r\n", s_fmd.regions
; 250  :             ));

  00568	e59f329c	 ldr         r3, [pc, #0x29C]
  0056c	e5933440	 ldr         r3, [r3, #0x440]
  00570	e3130001	 tst         r3, #1
  00574	0a000006	 beq         |$LN20@BuildLayou|
  00578	e59f3290	 ldr         r3, [pc, #0x290]
  0057c	e593111c	 ldr         r1, [r3, #0x11C]
  00580	e59f028c	 ldr         r0, [pc, #0x28C]
  00584	eb000000	 bl          NKDbgPrintfW
  00588	e3a03001	 mov         r3, #1
  0058c	e58d3028	 str         r3, [sp, #0x28]
  00590	ea000001	 b           |$LN21@BuildLayou|
  00594		 |$LN20@BuildLayou|
  00594	e3a03000	 mov         r3, #0
  00598	e58d3028	 str         r3, [sp, #0x28]
  0059c		 |$LN21@BuildLayou|

; 251  :         goto cleanUp;

  0059c	ea000093	 b           |$cleanUp$43445|
  005a0		 |$LN13@BuildLayou|

; 252  :         }
; 253  : 
; 254  :     if (s_fmd.regions > 0)

  005a0	e59f3268	 ldr         r3, [pc, #0x268]
  005a4	e593311c	 ldr         r3, [r3, #0x11C]
  005a8	e3530000	 cmp         r3, #0
  005ac	9a00000b	 bls         |$LN12@BuildLayou|

; 255  :        {
; 256  :         memcpy(
; 257  :             s_fmd.region, pInfo + pSector->cbReservedEntries,
; 258  :             s_fmd.regions * sizeof(FlashRegion)
; 259  :             );

  005b0	e59f3258	 ldr         r3, [pc, #0x258]
  005b4	e593111c	 ldr         r1, [r3, #0x11C]
  005b8	e3a0301c	 mov         r3, #0x1C
  005bc	e0020391	 mul         r2, r1, r3
  005c0	e59d3000	 ldr         r3, [sp]
  005c4	e2833008	 add         r3, r3, #8
  005c8	e59d100c	 ldr         r1, [sp, #0xC]
  005cc	e5933000	 ldr         r3, [r3]
  005d0	e0811003	 add         r1, r1, r3
  005d4	e59f3234	 ldr         r3, [pc, #0x234]
  005d8	e2830e12	 add         r0, r3, #0x12, 28
  005dc	eb000000	 bl          memcpy
  005e0		 |$LN12@BuildLayou|

; 260  :         }
; 261  : 
; 262  :     // Build region first sector table
; 263  :     if ((s_fmd.regions + 1) > dimof(s_fmd.firstSector))

  005e0	e59f3228	 ldr         r3, [pc, #0x228]
  005e4	e593311c	 ldr         r3, [r3, #0x11C]
  005e8	e2833001	 add         r3, r3, #1
  005ec	e3530011	 cmp         r3, #0x11
  005f0	9a00000d	 bls         |$LN11@BuildLayou|

; 264  :         {
; 265  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_Init!BuildLayoutInfo: "
; 266  :             L"To many regions (%d)\r\n", s_fmd.regions
; 267  :             ));

  005f4	e59f3210	 ldr         r3, [pc, #0x210]
  005f8	e5933440	 ldr         r3, [r3, #0x440]
  005fc	e3130001	 tst         r3, #1
  00600	0a000006	 beq         |$LN22@BuildLayou|
  00604	e59f3204	 ldr         r3, [pc, #0x204]
  00608	e593111c	 ldr         r1, [r3, #0x11C]
  0060c	e59f0200	 ldr         r0, [pc, #0x200]
  00610	eb000000	 bl          NKDbgPrintfW
  00614	e3a03001	 mov         r3, #1
  00618	e58d302c	 str         r3, [sp, #0x2C]
  0061c	ea000001	 b           |$LN23@BuildLayou|
  00620		 |$LN22@BuildLayou|
  00620	e3a03000	 mov         r3, #0
  00624	e58d302c	 str         r3, [sp, #0x2C]
  00628		 |$LN23@BuildLayou|

; 268  :         goto cleanUp;

  00628	ea000070	 b           |$cleanUp$43445|
  0062c		 |$LN11@BuildLayou|

; 269  :         }
; 270  :     
; 271  :     pRegion = &s_fmd.region[0];

  0062c	e59f31dc	 ldr         r3, [pc, #0x1DC]
  00630	e2833e12	 add         r3, r3, #0x12, 28
  00634	e58d3010	 str         r3, [sp, #0x10]

; 272  :     sector = pRegion->dwStartPhysBlock * pRegion->dwSectorsPerBlock;

  00638	e59d3010	 ldr         r3, [sp, #0x10]
  0063c	e2832004	 add         r2, r3, #4
  00640	e59d3010	 ldr         r3, [sp, #0x10]
  00644	e2833010	 add         r3, r3, #0x10
  00648	e5922000	 ldr         r2, [r2]
  0064c	e5933000	 ldr         r3, [r3]
  00650	e0030392	 mul         r3, r2, r3
  00654	e58d3014	 str         r3, [sp, #0x14]

; 273  :     for (region = 0; region < s_fmd.regions; region++)

  00658	e3a03000	 mov         r3, #0
  0065c	e58d3008	 str         r3, [sp, #8]
  00660	ea000002	 b           |$LN10@BuildLayou|
  00664		 |$LN9@BuildLayou|
  00664	e59d3008	 ldr         r3, [sp, #8]
  00668	e2833001	 add         r3, r3, #1
  0066c	e58d3008	 str         r3, [sp, #8]
  00670		 |$LN10@BuildLayou|
  00670	e59d2008	 ldr         r2, [sp, #8]
  00674	e59f3194	 ldr         r3, [pc, #0x194]
  00678	e593311c	 ldr         r3, [r3, #0x11C]
  0067c	e1520003	 cmp         r2, r3
  00680	2a000015	 bcs         |$LN8@BuildLayou|

; 274  :         {
; 275  :         s_fmd.firstSector[region] = sector;

  00684	e59d1008	 ldr         r1, [sp, #8]
  00688	e3a03004	 mov         r3, #4
  0068c	e0020391	 mul         r2, r1, r3
  00690	e59f3178	 ldr         r3, [pc, #0x178]
  00694	e2833e2e	 add         r3, r3, #0x2E, 28
  00698	e0832002	 add         r2, r3, r2
  0069c	e59d3014	 ldr         r3, [sp, #0x14]
  006a0	e5823000	 str         r3, [r2]

; 276  :         sector += pRegion->dwNumPhysBlocks * pRegion->dwSectorsPerBlock;

  006a4	e59d3010	 ldr         r3, [sp, #0x10]
  006a8	e2832008	 add         r2, r3, #8
  006ac	e59d3010	 ldr         r3, [sp, #0x10]
  006b0	e2833010	 add         r3, r3, #0x10
  006b4	e5921000	 ldr         r1, [r2]
  006b8	e5933000	 ldr         r3, [r3]
  006bc	e0020391	 mul         r2, r1, r3
  006c0	e59d3014	 ldr         r3, [sp, #0x14]
  006c4	e0833002	 add         r3, r3, r2
  006c8	e58d3014	 str         r3, [sp, #0x14]

; 277  :         pRegion++;

  006cc	e59d3010	 ldr         r3, [sp, #0x10]
  006d0	e283301c	 add         r3, r3, #0x1C
  006d4	e58d3010	 str         r3, [sp, #0x10]

; 278  :         }

  006d8	eaffffe1	 b           |$LN9@BuildLayou|
  006dc		 |$LN8@BuildLayou|

; 279  :     s_fmd.firstSector[region] = sector;

  006dc	e59d1008	 ldr         r1, [sp, #8]
  006e0	e3a03004	 mov         r3, #4
  006e4	e0020391	 mul         r2, r1, r3
  006e8	e59f3120	 ldr         r3, [pc, #0x120]
  006ec	e2833e2e	 add         r3, r3, #0x2E, 28
  006f0	e0832002	 add         r2, r3, r2
  006f4	e59d3014	 ldr         r3, [sp, #0x14]
  006f8	e5823000	 str         r3, [r2]

; 280  : 
; 281  :     // Verify block signatures
; 282  :     pRegion = &s_fmd.region[0];

  006fc	e59f310c	 ldr         r3, [pc, #0x10C]
  00700	e2833e12	 add         r3, r3, #0x12, 28
  00704	e58d3010	 str         r3, [sp, #0x10]

; 283  :     for (region = 0; region < s_fmd.regions; region++, pRegion++)

  00708	e3a03000	 mov         r3, #0
  0070c	e58d3008	 str         r3, [sp, #8]
  00710	ea000005	 b           |$LN7@BuildLayou|
  00714		 |$LN6@BuildLayou|
  00714	e59d3008	 ldr         r3, [sp, #8]
  00718	e2833001	 add         r3, r3, #1
  0071c	e58d3008	 str         r3, [sp, #8]
  00720	e59d3010	 ldr         r3, [sp, #0x10]
  00724	e283301c	 add         r3, r3, #0x1C
  00728	e58d3010	 str         r3, [sp, #0x10]
  0072c		 |$LN7@BuildLayou|
  0072c	e59d2008	 ldr         r2, [sp, #8]
  00730	e59f30d8	 ldr         r3, [pc, #0xD8]
  00734	e593311c	 ldr         r3, [r3, #0x11C]
  00738	e1520003	 cmp         r2, r3
  0073c	2a000029	 bcs         |$LN5@BuildLayou|

; 284  :         {
; 285  :         ULONG block, count;
; 286  : 
; 287  :         if (pRegion->regionType == XIP) continue;

  00740	e59d3010	 ldr         r3, [sp, #0x10]
  00744	e5933000	 ldr         r3, [r3]
  00748	e3530000	 cmp         r3, #0
  0074c	1a000000	 bne         |$LN4@BuildLayou|
  00750	eaffffef	 b           |$LN6@BuildLayou|
  00754		 |$LN4@BuildLayou|

; 288  : 
; 289  :         block = pRegion->dwStartPhysBlock;

  00754	e59d3010	 ldr         r3, [sp, #0x10]
  00758	e2833004	 add         r3, r3, #4
  0075c	e5933000	 ldr         r3, [r3]
  00760	e58d301c	 str         r3, [sp, #0x1C]

; 290  :         count = pRegion->dwNumPhysBlocks;

  00764	e59d3010	 ldr         r3, [sp, #0x10]
  00768	e2833008	 add         r3, r3, #8
  0076c	e5933000	 ldr         r3, [r3]
  00770	e58d3018	 str         r3, [sp, #0x18]
  00774		 |$LN3@BuildLayou|

; 291  :         while (count-- > 0)

  00774	e59d3018	 ldr         r3, [sp, #0x18]
  00778	e3530000	 cmp         r3, #0
  0077c	e59d3018	 ldr         r3, [sp, #0x18]
  00780	e2433001	 sub         r3, r3, #1
  00784	e58d3018	 str         r3, [sp, #0x18]
  00788	9a000015	 bls         |$LN2@BuildLayou|

; 292  :             {
; 293  :             if (!VerifyBlockSignature(block))

  0078c	e59d001c	 ldr         r0, [sp, #0x1C]
  00790	eb000000	 bl          VerifyBlockSignature
  00794	e58d0030	 str         r0, [sp, #0x30]
  00798	e59d3030	 ldr         r3, [sp, #0x30]
  0079c	e3530000	 cmp         r3, #0
  007a0	1a00000b	 bne         |$LN1@BuildLayou|

; 294  :                 {
; 295  :                 OALMSG(OAL_ERROR, (L"ERROR: FMD_Init!BuildLayoutInfo: "
; 296  :                     L"Failed verify block signature (block %d)\r\n", block
; 297  :                     ));

  007a4	e59f3060	 ldr         r3, [pc, #0x60]
  007a8	e5933440	 ldr         r3, [r3, #0x440]
  007ac	e3130001	 tst         r3, #1
  007b0	0a000005	 beq         |$LN24@BuildLayou|
  007b4	e59d101c	 ldr         r1, [sp, #0x1C]
  007b8	e59f0048	 ldr         r0, [pc, #0x48]
  007bc	eb000000	 bl          NKDbgPrintfW
  007c0	e3a03001	 mov         r3, #1
  007c4	e58d3034	 str         r3, [sp, #0x34]
  007c8	ea000001	 b           |$LN25@BuildLayou|
  007cc		 |$LN24@BuildLayou|
  007cc	e3a03000	 mov         r3, #0
  007d0	e58d3034	 str         r3, [sp, #0x34]
  007d4		 |$LN25@BuildLayou|
  007d4		 |$LN1@BuildLayou|

; 298  :                 //goto cleanUp;
; 299  :                 }
; 300  :             block++;

  007d4	e59d301c	 ldr         r3, [sp, #0x1C]
  007d8	e2833001	 add         r3, r3, #1
  007dc	e58d301c	 str         r3, [sp, #0x1C]

; 301  :             }

  007e0	eaffffe3	 b           |$LN3@BuildLayou|
  007e4		 |$LN2@BuildLayou|

; 302  :         }

  007e4	eaffffca	 b           |$LN6@BuildLayou|
  007e8		 |$LN5@BuildLayou|

; 303  : 
; 304  :     rc = TRUE;

  007e8	e3a03001	 mov         r3, #1
  007ec	e58d3004	 str         r3, [sp, #4]
  007f0		 |$cleanUp$43445|

; 305  : 
; 306  : cleanUp:
; 307  :     return rc;

  007f0	e59d3004	 ldr         r3, [sp, #4]
  007f4	e58d3020	 str         r3, [sp, #0x20]

; 308  : }

  007f8	e59d0020	 ldr         r0, [sp, #0x20]
  007fc	e28dd038	 add         sp, sp, #0x38
  00800	e89d6000	 ldmia       sp, {sp, lr}
  00804	e12fff1e	 bx          lr
  00808		 |$LN29@BuildLayou|
  00808		 |$LN30@BuildLayou|
  00808	00000000	 DCD         |??_C@_1JI@COJGLHJL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@|
  0080c		 |$LN31@BuildLayou|
  0080c	00000000	 DCD         |dpCurSettings|
  00810		 |$LN32@BuildLayou|
  00810	00000000	 DCD         |s_fmd|
  00814		 |$LN33@BuildLayou|
  00814	00000000	 DCD         |??_C@_1HA@JOBMFFAJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@|
  00818		 |$LN34@BuildLayou|
  00818	00000000	 DCD         |??_C@_1IC@OGLDKI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@|
  0081c		 |$M43757|

			 ENDP  ; |BuildLayoutInfo|

	EXPORT	|FMD_GetBlockStatus|

  00018			 AREA	 |.pdata|, PDATA
|$T43773| DCD	|$LN8@VerifyBloc|
	DCD	0x40002e04
; Function compile flags: /Odtp

  0081c			 AREA	 |.text|, CODE, ARM

  0081c		 |VerifyBlockSignature| PROC

; 194  : {

  0081c		 |$LN8@VerifyBloc|
  0081c	e1a0c00d	 mov         r12, sp
  00820	e92d0001	 stmdb       sp!, {r0}
  00824	e92d5000	 stmdb       sp!, {r12, lr}
  00828	e24dd018	 sub         sp, sp, #0x18
  0082c		 |$M43770|

; 195  :     int rc;
; 196  :     UCHAR *pBlock;
; 197  : 
; 198  :     // There is no block signature on reserved blocks
; 199  :     if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_RESERVED) != 0)

  0082c	e59d0020	 ldr         r0, [sp, #0x20]
  00830	eb000000	 bl          FMD_GetBlockStatus
  00834	e58d000c	 str         r0, [sp, #0xC]
  00838	e59d300c	 ldr         r3, [sp, #0xC]
  0083c	e3130008	 tst         r3, #8
  00840	0a000002	 beq         |$LN1@VerifyBloc|

; 200  :         {
; 201  :         rc = 0;

  00844	e3a03000	 mov         r3, #0
  00848	e58d3000	 str         r3, [sp]

; 202  :         goto cleanUp;

  0084c	ea000010	 b           |$cleanUp$43428|
  00850		 |$LN1@VerifyBloc|

; 203  :         }
; 204  : 
; 205  :     // Get block end address
; 206  :     pBlock = s_fmd.pBase + (block + 1) * s_fmd.blockSize;

  00850	e59d3020	 ldr         r3, [sp, #0x20]
  00854	e2831001	 add         r1, r3, #1
  00858	e59f3070	 ldr         r3, [pc, #0x70]
  0085c	e593300c	 ldr         r3, [r3, #0xC]
  00860	e0020391	 mul         r2, r1, r3
  00864	e59f3064	 ldr         r3, [pc, #0x64]
  00868	e5933010	 ldr         r3, [r3, #0x10]
  0086c	e0833002	 add         r3, r3, r2
  00870	e58d3004	 str         r3, [sp, #4]

; 207  : 
; 208  :     // Compare signature
; 209  :     rc = memcmp(pBlock - sizeof(s_blockSign), s_blockSign, sizeof(s_blockSign));

  00874	e3a02020	 mov         r2, #0x20
  00878	e59f104c	 ldr         r1, [pc, #0x4C]
  0087c	e59d3004	 ldr         r3, [sp, #4]
  00880	e2430020	 sub         r0, r3, #0x20
  00884	eb000000	 bl          memcmp
  00888	e58d0010	 str         r0, [sp, #0x10]
  0088c	e59d3010	 ldr         r3, [sp, #0x10]
  00890	e58d3000	 str         r3, [sp]
  00894		 |$cleanUp$43428|

; 210  : 
; 211  : cleanUp:
; 212  :     return (rc == 0);

  00894	e59d3000	 ldr         r3, [sp]
  00898	e3530000	 cmp         r3, #0
  0089c	1a000002	 bne         |$LN4@VerifyBloc|
  008a0	e3a03001	 mov         r3, #1
  008a4	e58d3014	 str         r3, [sp, #0x14]
  008a8	ea000001	 b           |$LN5@VerifyBloc|
  008ac		 |$LN4@VerifyBloc|
  008ac	e3a03000	 mov         r3, #0
  008b0	e58d3014	 str         r3, [sp, #0x14]
  008b4		 |$LN5@VerifyBloc|
  008b4	e59d3014	 ldr         r3, [sp, #0x14]
  008b8	e58d3008	 str         r3, [sp, #8]

; 213  : }

  008bc	e59d0008	 ldr         r0, [sp, #8]
  008c0	e28dd018	 add         sp, sp, #0x18
  008c4	e89d6000	 ldmia       sp, {sp, lr}
  008c8	e12fff1e	 bx          lr
  008cc		 |$LN9@VerifyBloc|
  008cc		 |$LN10@VerifyBloc|
  008cc	00000000	 DCD         |s_blockSign|
  008d0		 |$LN11@VerifyBloc|
  008d0	00000000	 DCD         |s_fmd|
  008d4		 |$M43771|

			 ENDP  ; |VerifyBlockSignature|


  00020			 AREA	 |.pdata|, PDATA
|$T43782| DCD	|$LN5@FMD_Deinit|
	DCD	0x40000a04
; Function compile flags: /Odtp

  008d4			 AREA	 |.text|, CODE, ARM

  008d4		 |FMD_Deinit| PROC

; 478  : {

  008d4		 |$LN5@FMD_Deinit|
  008d4	e1a0c00d	 mov         r12, sp
  008d8	e92d0001	 stmdb       sp!, {r0}
  008dc	e92d5000	 stmdb       sp!, {r12, lr}
  008e0	e24dd004	 sub         sp, sp, #4
  008e4		 |$M43779|

; 479  :     return TRUE;

  008e4	e3a03001	 mov         r3, #1
  008e8	e58d3000	 str         r3, [sp]

; 480  : }

  008ec	e59d0000	 ldr         r0, [sp]
  008f0	e28dd004	 add         sp, sp, #4
  008f4	e89d6000	 ldmia       sp, {sp, lr}
  008f8	e12fff1e	 bx          lr
  008fc		 |$M43780|

			 ENDP  ; |FMD_Deinit|

	EXPORT	|FMD_GetInfo|

  00028			 AREA	 |.pdata|, PDATA
|$T43788| DCD	|$LN5@FMD_GetInf|
	DCD	0x40002604
; Function compile flags: /Odtp

  008fc			 AREA	 |.text|, CODE, ARM

  008fc		 |FMD_GetInfo| PROC

; 490  : {

  008fc		 |$LN5@FMD_GetInf|
  008fc	e1a0c00d	 mov         r12, sp
  00900	e92d0001	 stmdb       sp!, {r0}
  00904	e92d5000	 stmdb       sp!, {r12, lr}
  00908	e24dd004	 sub         sp, sp, #4
  0090c		 |$M43785|

; 491  :     pInfo->flashType           = NOR;

  0090c	e59d200c	 ldr         r2, [sp, #0xC]
  00910	e3a03001	 mov         r3, #1
  00914	e5823000	 str         r3, [r2]

; 492  :     pInfo->dwNumBlocks         = s_fmd.blocks;

  00918	e59d300c	 ldr         r3, [sp, #0xC]
  0091c	e2832004	 add         r2, r3, #4
  00920	e59f3068	 ldr         r3, [pc, #0x68]
  00924	e5933014	 ldr         r3, [r3, #0x14]
  00928	e5823000	 str         r3, [r2]

; 493  :     pInfo->dwBytesPerBlock     = s_fmd.blockSize;

  0092c	e59d300c	 ldr         r3, [sp, #0xC]
  00930	e2832008	 add         r2, r3, #8
  00934	e59f3054	 ldr         r3, [pc, #0x54]
  00938	e593300c	 ldr         r3, [r3, #0xC]
  0093c	e5823000	 str         r3, [r2]

; 494  :     pInfo->wDataBytesPerSector = (WORD)s_fmd.sectorSize;

  00940	e59f3048	 ldr         r3, [pc, #0x48]
  00944	e5933008	 ldr         r3, [r3, #8]
  00948	e1a02803	 mov         r2, r3, lsl #16
  0094c	e1a02822	 mov         r2, r2, lsr #16
  00950	e59d300c	 ldr         r3, [sp, #0xC]
  00954	e283300e	 add         r3, r3, #0xE
  00958	e1c320b0	 strh        r2, [r3]

; 495  :     pInfo->wSectorsPerBlock    = (WORD)s_fmd.region[0].dwSectorsPerBlock;

  0095c	e59f302c	 ldr         r3, [pc, #0x2C]
  00960	e5933130	 ldr         r3, [r3, #0x130]
  00964	e1a02803	 mov         r2, r3, lsl #16
  00968	e1a02822	 mov         r2, r2, lsr #16
  0096c	e59d300c	 ldr         r3, [sp, #0xC]
  00970	e283300c	 add         r3, r3, #0xC
  00974	e1c320b0	 strh        r2, [r3]

; 496  : 
; 497  :     return TRUE;

  00978	e3a03001	 mov         r3, #1
  0097c	e58d3000	 str         r3, [sp]

; 498  : }

  00980	e59d0000	 ldr         r0, [sp]
  00984	e28dd004	 add         sp, sp, #4
  00988	e89d6000	 ldmia       sp, {sp, lr}
  0098c	e12fff1e	 bx          lr
  00990		 |$LN6@FMD_GetInf|
  00990		 |$LN7@FMD_GetInf|
  00990	00000000	 DCD         |s_fmd|
  00994		 |$M43786|

			 ENDP  ; |FMD_GetInfo|

	EXPORT	|FMD_GetInfoEx|

  00030			 AREA	 |.pdata|, PDATA
|$T43796| DCD	|$LN8@FMD_GetInf@2|
	DCD	0x40004a04
; Function compile flags: /Odtp

  00994			 AREA	 |.text|, CODE, ARM

  00994		 |FMD_GetInfoEx| PROC

; 509  : {

  00994		 |$LN8@FMD_GetInf@2|
  00994	e1a0c00d	 mov         r12, sp
  00998	e92d0003	 stmdb       sp!, {r0, r1}
  0099c	e92d5000	 stmdb       sp!, {r12, lr}
  009a0	e24dd008	 sub         sp, sp, #8
  009a4		 |$M43793|

; 510  :     BOOL rc = FALSE;

  009a4	e3a03000	 mov         r3, #0
  009a8	e58d3000	 str         r3, [sp]

; 511  : 
; 512  :     if (pRegions == NULL) goto cleanUp;

  009ac	e59d3014	 ldr         r3, [sp, #0x14]
  009b0	e3530000	 cmp         r3, #0
  009b4	1a000000	 bne         |$LN3@FMD_GetInf@2|
  009b8	ea000038	 b           |$cleanUp$43550|
  009bc		 |$LN3@FMD_GetInf@2|

; 513  : 
; 514  :     if (pInfo == NULL)

  009bc	e59d3010	 ldr         r3, [sp, #0x10]
  009c0	e3530000	 cmp         r3, #0
  009c4	1a000006	 bne         |$LN2@FMD_GetInf@2|

; 515  :         {
; 516  :         // Return required buffer size to caller
; 517  :         *pRegions = s_fmd.regions;

  009c8	e59f30e8	 ldr         r3, [pc, #0xE8]
  009cc	e593211c	 ldr         r2, [r3, #0x11C]
  009d0	e59d3014	 ldr         r3, [sp, #0x14]
  009d4	e5832000	 str         r2, [r3]

; 518  :         rc = TRUE;

  009d8	e3a03001	 mov         r3, #1
  009dc	e58d3000	 str         r3, [sp]

; 519  :         goto cleanUp;

  009e0	ea00002e	 b           |$cleanUp$43550|
  009e4		 |$LN2@FMD_GetInf@2|

; 520  :         }
; 521  : 
; 522  :     if (*pRegions < s_fmd.regions)

  009e4	e59d3014	 ldr         r3, [sp, #0x14]
  009e8	e5932000	 ldr         r2, [r3]
  009ec	e59f30c4	 ldr         r3, [pc, #0xC4]
  009f0	e593311c	 ldr         r3, [r3, #0x11C]
  009f4	e1520003	 cmp         r2, r3
  009f8	2a000000	 bcs         |$LN1@FMD_GetInf@2|

; 523  :         {
; 524  :         goto cleanUp;

  009fc	ea000027	 b           |$cleanUp$43550|
  00a00		 |$LN1@FMD_GetInf@2|

; 525  :         }
; 526  : 
; 527  :     // Copy region table
; 528  :     PREFAST_SUPPRESS(386, "Warning is result of API");
; 529  :     memcpy(pInfo->region, s_fmd.region, s_fmd.regions * sizeof(FlashRegion));

  00a00	e59f30b0	 ldr         r3, [pc, #0xB0]
  00a04	e593111c	 ldr         r1, [r3, #0x11C]
  00a08	e3a0301c	 mov         r3, #0x1C
  00a0c	e0020391	 mul         r2, r1, r3
  00a10	e59f30a0	 ldr         r3, [pc, #0xA0]
  00a14	e2831e12	 add         r1, r3, #0x12, 28
  00a18	e59d3010	 ldr         r3, [sp, #0x10]
  00a1c	e2830014	 add         r0, r3, #0x14
  00a20	eb000000	 bl          memcpy

; 530  :     *pRegions = s_fmd.regions;

  00a24	e59f308c	 ldr         r3, [pc, #0x8C]
  00a28	e593211c	 ldr         r2, [r3, #0x11C]
  00a2c	e59d3014	 ldr         r3, [sp, #0x14]
  00a30	e5832000	 str         r2, [r3]

; 531  : 
; 532  :     pInfo->cbSize               = sizeof(FlashInfoEx);

  00a34	e59d2010	 ldr         r2, [sp, #0x10]
  00a38	e3a03030	 mov         r3, #0x30
  00a3c	e5823000	 str         r3, [r2]

; 533  :     pInfo->flashType            = NOR;

  00a40	e59d3010	 ldr         r3, [sp, #0x10]
  00a44	e2832004	 add         r2, r3, #4
  00a48	e3a03001	 mov         r3, #1
  00a4c	e5823000	 str         r3, [r2]

; 534  :     pInfo->dwNumBlocks          = s_fmd.blocks;

  00a50	e59d3010	 ldr         r3, [sp, #0x10]
  00a54	e2832008	 add         r2, r3, #8
  00a58	e59f3058	 ldr         r3, [pc, #0x58]
  00a5c	e5933014	 ldr         r3, [r3, #0x14]
  00a60	e5823000	 str         r3, [r2]

; 535  :     pInfo->dwDataBytesPerSector = (WORD)s_fmd.sectorSize;

  00a64	e59f304c	 ldr         r3, [pc, #0x4C]
  00a68	e5933008	 ldr         r3, [r3, #8]
  00a6c	e1a01803	 mov         r1, r3, lsl #16
  00a70	e1a01821	 mov         r1, r1, lsr #16
  00a74	e59d3010	 ldr         r3, [sp, #0x10]
  00a78	e283200c	 add         r2, r3, #0xC
  00a7c	e1a03001	 mov         r3, r1
  00a80	e5823000	 str         r3, [r2]

; 536  :     pInfo->dwNumRegions         = s_fmd.regions;

  00a84	e59d3010	 ldr         r3, [sp, #0x10]
  00a88	e2832010	 add         r2, r3, #0x10
  00a8c	e59f3024	 ldr         r3, [pc, #0x24]
  00a90	e593311c	 ldr         r3, [r3, #0x11C]
  00a94	e5823000	 str         r3, [r2]

; 537  : 
; 538  :     rc = TRUE;

  00a98	e3a03001	 mov         r3, #1
  00a9c	e58d3000	 str         r3, [sp]
  00aa0		 |$cleanUp$43550|

; 539  : 
; 540  : cleanUp:
; 541  :     return rc;

  00aa0	e59d3000	 ldr         r3, [sp]
  00aa4	e58d3004	 str         r3, [sp, #4]

; 542  : }

  00aa8	e59d0004	 ldr         r0, [sp, #4]
  00aac	e28dd008	 add         sp, sp, #8
  00ab0	e89d6000	 ldmia       sp, {sp, lr}
  00ab4	e12fff1e	 bx          lr
  00ab8		 |$LN9@FMD_GetInf@2|
  00ab8		 |$LN10@FMD_GetInf@2|
  00ab8	00000000	 DCD         |s_fmd|
  00abc		 |$M43794|

			 ENDP  ; |FMD_GetInfoEx|

	EXPORT	|FMD_GetPhysSectorAddr|

  00038			 AREA	 |.pdata|, PDATA
|$T43803| DCD	|$LN5@FMD_GetPhy|
	DCD	0x40000b04
; Function compile flags: /Odtp

  00abc			 AREA	 |.text|, CODE, ARM

  00abc		 |FMD_GetPhysSectorAddr| PROC

; 553  : {

  00abc		 |$LN5@FMD_GetPhy|
  00abc	e1a0c00d	 mov         r12, sp
  00ac0	e92d000f	 stmdb       sp!, {r0 - r3}
  00ac4	e92d5000	 stmdb       sp!, {r12, lr}
  00ac8	e24dd004	 sub         sp, sp, #4
  00acc		 |$M43800|

; 554  :     VOID *pInfo;
; 555  : 
; 556  :     GetSectorAddresses(sector, &pSector, &pInfo);

  00acc	e28d2000	 add         r2, sp, #0
  00ad0	e28d1010	 add         r1, sp, #0x10
  00ad4	e59d000c	 ldr         r0, [sp, #0xC]
  00ad8	eb000000	 bl          GetSectorAddresses

; 557  : }

  00adc	e28dd004	 add         sp, sp, #4
  00ae0	e89d6000	 ldmia       sp, {sp, lr}
  00ae4	e12fff1e	 bx          lr
  00ae8		 |$M43801|

			 ENDP  ; |FMD_GetPhysSectorAddr|


  00040			 AREA	 |.pdata|, PDATA
|$T43808| DCD	|$LN11@GetSectorA|
	DCD	0x40007a04
; Function compile flags: /Odtp

  00ae8			 AREA	 |.text|, CODE, ARM

  00ae8		 |GetSectorAddresses| PROC

; 315  : {

  00ae8		 |$LN11@GetSectorA|
  00ae8	e1a0c00d	 mov         r12, sp
  00aec	e92d0007	 stmdb       sp!, {r0 - r2}
  00af0	e92d5000	 stmdb       sp!, {r12, lr}
  00af4	e24dd020	 sub         sp, sp, #0x20
  00af8		 |$M43805|

; 316  :     UCHAR *pSector = NULL;

  00af8	e3a03000	 mov         r3, #0
  00afc	e58d3000	 str         r3, [sp]

; 317  :     UCHAR *pInfo = NULL;

  00b00	e3a03000	 mov         r3, #0
  00b04	e58d300c	 str         r3, [sp, #0xC]

; 318  :     UCHAR *pBlock;
; 319  :     ULONG region;
; 320  :     FlashRegion *pRegion;
; 321  :     ULONG sectorInRegion;
; 322  :     ULONG sectorInBlock;
; 323  :     ULONG block;
; 324  : 
; 325  : 
; 326  :     for (region = 0; region < s_fmd.regions; region++)

  00b08	e3a03000	 mov         r3, #0
  00b0c	e58d3008	 str         r3, [sp, #8]
  00b10	ea000002	 b           |$LN6@GetSectorA|
  00b14		 |$LN5@GetSectorA|
  00b14	e59d3008	 ldr         r3, [sp, #8]
  00b18	e2833001	 add         r3, r3, #1
  00b1c	e58d3008	 str         r3, [sp, #8]
  00b20		 |$LN6@GetSectorA|
  00b20	e59d2008	 ldr         r2, [sp, #8]
  00b24	e59f31a0	 ldr         r3, [pc, #0x1A0]
  00b28	e593311c	 ldr         r3, [r3, #0x11C]
  00b2c	e1520003	 cmp         r2, r3
  00b30	2a00005c	 bcs         |$LN4@GetSectorA|

; 327  :         {
; 328  :         // Try next region in sector isn't in range
; 329  :         if ( (sector < s_fmd.firstSector[region]) ||
; 330  :              (sector >= s_fmd.firstSector[region + 1]) )

  00b34	e59d1008	 ldr         r1, [sp, #8]
  00b38	e3a03004	 mov         r3, #4
  00b3c	e0020391	 mul         r2, r1, r3
  00b40	e59f3184	 ldr         r3, [pc, #0x184]
  00b44	e2833e2e	 add         r3, r3, #0x2E, 28
  00b48	e0833002	 add         r3, r3, r2
  00b4c	e59d2028	 ldr         r2, [sp, #0x28]
  00b50	e5933000	 ldr         r3, [r3]
  00b54	e1520003	 cmp         r2, r3
  00b58	3a00000a	 bcc         |$LN2@GetSectorA|
  00b5c	e59d3008	 ldr         r3, [sp, #8]
  00b60	e2831001	 add         r1, r3, #1
  00b64	e3a03004	 mov         r3, #4
  00b68	e0020391	 mul         r2, r1, r3
  00b6c	e59f3158	 ldr         r3, [pc, #0x158]
  00b70	e2833e2e	 add         r3, r3, #0x2E, 28
  00b74	e0833002	 add         r3, r3, r2
  00b78	e59d2028	 ldr         r2, [sp, #0x28]
  00b7c	e5933000	 ldr         r3, [r3]
  00b80	e1520003	 cmp         r2, r3
  00b84	3a000000	 bcc         |$LN3@GetSectorA|
  00b88		 |$LN2@GetSectorA|

; 331  :             {
; 332  :             continue;

  00b88	eaffffe1	 b           |$LN5@GetSectorA|
  00b8c		 |$LN3@GetSectorA|

; 333  :             }
; 334  :         pRegion = &s_fmd.region[region];

  00b8c	e59d1008	 ldr         r1, [sp, #8]
  00b90	e3a0301c	 mov         r3, #0x1C
  00b94	e0020391	 mul         r2, r1, r3
  00b98	e59f312c	 ldr         r3, [pc, #0x12C]
  00b9c	e2833e12	 add         r3, r3, #0x12, 28
  00ba0	e0833002	 add         r3, r3, r2
  00ba4	e58d3010	 str         r3, [sp, #0x10]

; 335  : 
; 336  :         // Calculate block, sector position in region and inblock
; 337  :         sectorInRegion = sector - s_fmd.firstSector[region];

  00ba8	e59d1008	 ldr         r1, [sp, #8]
  00bac	e3a03004	 mov         r3, #4
  00bb0	e0020391	 mul         r2, r1, r3
  00bb4	e59f3110	 ldr         r3, [pc, #0x110]
  00bb8	e2833e2e	 add         r3, r3, #0x2E, 28
  00bbc	e0833002	 add         r3, r3, r2
  00bc0	e59d2028	 ldr         r2, [sp, #0x28]
  00bc4	e5933000	 ldr         r3, [r3]
  00bc8	e0423003	 sub         r3, r2, r3
  00bcc	e58d3004	 str         r3, [sp, #4]

; 338  :         block = sectorInRegion / pRegion->dwSectorsPerBlock;

  00bd0	e59d3010	 ldr         r3, [sp, #0x10]
  00bd4	e2833010	 add         r3, r3, #0x10
  00bd8	e59d1004	 ldr         r1, [sp, #4]
  00bdc	e5930000	 ldr         r0, [r3]
  00be0	eb000000	 bl          __rt_udiv
  00be4	e58d001c	 str         r0, [sp, #0x1C]

; 339  :         block += pRegion->dwStartPhysBlock;

  00be8	e59d3010	 ldr         r3, [sp, #0x10]
  00bec	e2833004	 add         r3, r3, #4
  00bf0	e59d201c	 ldr         r2, [sp, #0x1C]
  00bf4	e5933000	 ldr         r3, [r3]
  00bf8	e0823003	 add         r3, r2, r3
  00bfc	e58d301c	 str         r3, [sp, #0x1C]

; 340  :         sectorInBlock = sectorInRegion % pRegion->dwSectorsPerBlock;

  00c00	e59d3010	 ldr         r3, [sp, #0x10]
  00c04	e2833010	 add         r3, r3, #0x10
  00c08	e59d1004	 ldr         r1, [sp, #4]
  00c0c	e5930000	 ldr         r0, [r3]
  00c10	eb000000	 bl          __rt_udiv
  00c14	e58d1018	 str         r1, [sp, #0x18]

; 341  :         // Block address
; 342  :         pBlock = s_fmd.pBase + block * s_fmd.blockSize;

  00c18	e59d101c	 ldr         r1, [sp, #0x1C]
  00c1c	e59f30a8	 ldr         r3, [pc, #0xA8]
  00c20	e593300c	 ldr         r3, [r3, #0xC]
  00c24	e0020391	 mul         r2, r1, r3
  00c28	e59f309c	 ldr         r3, [pc, #0x9C]
  00c2c	e5933010	 ldr         r3, [r3, #0x10]
  00c30	e0833002	 add         r3, r3, r2
  00c34	e58d3014	 str         r3, [sp, #0x14]

; 343  :         // Sector address
; 344  :         pSector = pBlock + sectorInBlock * s_fmd.sectorSize;

  00c38	e59d1018	 ldr         r1, [sp, #0x18]
  00c3c	e59f3088	 ldr         r3, [pc, #0x88]
  00c40	e5933008	 ldr         r3, [r3, #8]
  00c44	e0020391	 mul         r2, r1, r3
  00c48	e59d3014	 ldr         r3, [sp, #0x14]
  00c4c	e0833002	 add         r3, r3, r2
  00c50	e58d3000	 str         r3, [sp]

; 345  :         // If this is a region with SectorInfo, return the address
; 346  :         // of the start of sector info, which is located immediatly
; 347  :         // after the sector data for all the sectors in the block.
; 348  :         if (pRegion->regionType != XIP)

  00c54	e59d3010	 ldr         r3, [sp, #0x10]
  00c58	e5933000	 ldr         r3, [r3]
  00c5c	e3530000	 cmp         r3, #0
  00c60	0a00000e	 beq         |$LN1@GetSectorA|

; 349  :             {
; 350  :             pInfo = pBlock + pRegion->dwSectorsPerBlock * s_fmd.sectorSize;

  00c64	e59d3010	 ldr         r3, [sp, #0x10]
  00c68	e2833010	 add         r3, r3, #0x10
  00c6c	e5931000	 ldr         r1, [r3]
  00c70	e59f3054	 ldr         r3, [pc, #0x54]
  00c74	e5933008	 ldr         r3, [r3, #8]
  00c78	e0020391	 mul         r2, r1, r3
  00c7c	e59d3014	 ldr         r3, [sp, #0x14]
  00c80	e0833002	 add         r3, r3, r2
  00c84	e58d300c	 str         r3, [sp, #0xC]

; 351  :             pInfo += sectorInBlock * sizeof(SectorInfo);

  00c88	e59d1018	 ldr         r1, [sp, #0x18]
  00c8c	e3a03008	 mov         r3, #8
  00c90	e0020391	 mul         r2, r1, r3
  00c94	e59d300c	 ldr         r3, [sp, #0xC]
  00c98	e0833002	 add         r3, r3, r2
  00c9c	e58d300c	 str         r3, [sp, #0xC]
  00ca0		 |$LN1@GetSectorA|

; 352  :             }
; 353  :         break;

  00ca0	ea000000	 b           |$LN4@GetSectorA|

; 354  :         }

  00ca4	eaffff9a	 b           |$LN5@GetSectorA|
  00ca8		 |$LN4@GetSectorA|

; 355  : 
; 356  :     *ppSector = pSector;

  00ca8	e59d2000	 ldr         r2, [sp]
  00cac	e59d302c	 ldr         r3, [sp, #0x2C]
  00cb0	e5832000	 str         r2, [r3]

; 357  :     *ppSectorInfo = pInfo;

  00cb4	e59d200c	 ldr         r2, [sp, #0xC]
  00cb8	e59d3030	 ldr         r3, [sp, #0x30]
  00cbc	e5832000	 str         r2, [r3]

; 358  : }

  00cc0	e28dd020	 add         sp, sp, #0x20
  00cc4	e89d6000	 ldmia       sp, {sp, lr}
  00cc8	e12fff1e	 bx          lr
  00ccc		 |$LN12@GetSectorA|
  00ccc		 |$LN13@GetSectorA|
  00ccc	00000000	 DCD         |s_fmd|
  00cd0		 |$M43806|

			 ENDP  ; |GetSectorAddresses|

	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@NDBEPPBH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@BIKPKLCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IK@JOKCAGGI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp@| [ DATA ] ; `string'
	EXPORT	|FMD_ReadSector|

  00048			 AREA	 |.pdata|, PDATA
|$T43823| DCD	|$LN20@FMD_ReadSe|
	DCD	0x40007e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@NDBEPPBH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O"
	DCB	0x0, "N", 0x0, "\\", 0x0, "B", 0x0, "O", 0x0, "O", 0x0, "T"
	DCB	0x0, "\\", 0x0, "F", 0x0, "M", 0x0, "D", 0x0, "\\", 0x0, "N"
	DCB	0x0, "O", 0x0, "R", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "f"
	DCB	0x0, "m", 0x0, "d", 0x0, ".", 0x0, "c", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@BIKPKLCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAs@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "n", 0x0, "u", 0x0, "m", 0x0, "b", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IK@JOKCAGGI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00cd0			 AREA	 |.text|, CODE, ARM

  00cd0		 |FMD_ReadSector| PROC

; 570  : {

  00cd0		 |$LN20@FMD_ReadSe|
  00cd0	e1a0c00d	 mov         r12, sp
  00cd4	e92d000f	 stmdb       sp!, {r0 - r3}
  00cd8	e92d5000	 stmdb       sp!, {r12, lr}
  00cdc	e24dd024	 sub         sp, sp, #0x24
  00ce0		 |$M43820|

; 571  :     BOOL rc = FALSE;

  00ce0	e3a03000	 mov         r3, #0
  00ce4	e58d3008	 str         r3, [sp, #8]

; 572  :     VOID *pSector;
; 573  :     VOID *pInfo;
; 574  : 
; 575  : 
; 576  :     if (sectors == 0 || ((pBuffer == NULL) &&  (pSectorInfo == NULL)))

  00ce8	e59d3038	 ldr         r3, [sp, #0x38]
  00cec	e3530000	 cmp         r3, #0
  00cf0	0a000005	 beq         |$LN8@FMD_ReadSe|
  00cf4	e59d3030	 ldr         r3, [sp, #0x30]
  00cf8	e3530000	 cmp         r3, #0
  00cfc	1a000013	 bne         |$LN9@FMD_ReadSe|
  00d00	e59d3034	 ldr         r3, [sp, #0x34]
  00d04	e3530000	 cmp         r3, #0
  00d08	1a000010	 bne         |$LN9@FMD_ReadSe|
  00d0c		 |$LN8@FMD_ReadSe|

; 577  :         {
; 578  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_ReadSector: "
; 579  :             L"Invalid parameters (%d, 0x%08x, 0x%08x, %d)\r\n",
; 580  :             sector, pBuffer, pSectorInfo, sectors
; 581  :             ));

  00d0c	e59f31ac	 ldr         r3, [pc, #0x1AC]
  00d10	e5933440	 ldr         r3, [r3, #0x440]
  00d14	e3130001	 tst         r3, #1
  00d18	0a000009	 beq         |$LN12@FMD_ReadSe|
  00d1c	e59d3038	 ldr         r3, [sp, #0x38]
  00d20	e58d3000	 str         r3, [sp]
  00d24	e59d3034	 ldr         r3, [sp, #0x34]
  00d28	e59d2030	 ldr         r2, [sp, #0x30]
  00d2c	e59d102c	 ldr         r1, [sp, #0x2C]
  00d30	e59f018c	 ldr         r0, [pc, #0x18C]
  00d34	eb000000	 bl          NKDbgPrintfW
  00d38	e3a03001	 mov         r3, #1
  00d3c	e58d3018	 str         r3, [sp, #0x18]
  00d40	ea000001	 b           |$LN13@FMD_ReadSe|
  00d44		 |$LN12@FMD_ReadSe|
  00d44	e3a03000	 mov         r3, #0
  00d48	e58d3018	 str         r3, [sp, #0x18]
  00d4c		 |$LN13@FMD_ReadSe|

; 582  :         goto cleanUp;

  00d4c	ea000041	 b           |$cleanUp$43582|
  00d50		 |$LN9@FMD_ReadSe|
  00d50		 |$LN7@FMD_ReadSe|

; 583  :         }
; 584  : 
; 585  :     while (sectors-- > 0)

  00d50	e59d3038	 ldr         r3, [sp, #0x38]
  00d54	e3530000	 cmp         r3, #0
  00d58	e59d3038	 ldr         r3, [sp, #0x38]
  00d5c	e2433001	 sub         r3, r3, #1
  00d60	e58d3038	 str         r3, [sp, #0x38]
  00d64	9a000039	 bls         |$LN6@FMD_ReadSe|

; 586  :         {
; 587  :         // Get sector and info location, NULL for sector means error
; 588  :         GetSectorAddresses(sector, &pSector, &pInfo);

  00d68	e28d200c	 add         r2, sp, #0xC
  00d6c	e28d1004	 add         r1, sp, #4
  00d70	e59d002c	 ldr         r0, [sp, #0x2C]
  00d74	eb000000	 bl          GetSectorAddresses

; 589  :         if (pSector == NULL)

  00d78	e59d3004	 ldr         r3, [sp, #4]
  00d7c	e3530000	 cmp         r3, #0
  00d80	1a00000c	 bne         |$LN5@FMD_ReadSe|

; 590  :             {
; 591  :             OALMSG(OAL_ERROR, (L"ERROR: FMD_ReadSector: "
; 592  :                 L"Invalid sector number (%d)\r\n", sector
; 593  :                 ));

  00d84	e59f3134	 ldr         r3, [pc, #0x134]
  00d88	e5933440	 ldr         r3, [r3, #0x440]
  00d8c	e3130001	 tst         r3, #1
  00d90	0a000005	 beq         |$LN14@FMD_ReadSe|
  00d94	e59d102c	 ldr         r1, [sp, #0x2C]
  00d98	e59f011c	 ldr         r0, [pc, #0x11C]
  00d9c	eb000000	 bl          NKDbgPrintfW
  00da0	e3a03001	 mov         r3, #1
  00da4	e58d301c	 str         r3, [sp, #0x1C]
  00da8	ea000001	 b           |$LN15@FMD_ReadSe|
  00dac		 |$LN14@FMD_ReadSe|
  00dac	e3a03000	 mov         r3, #0
  00db0	e58d301c	 str         r3, [sp, #0x1C]
  00db4		 |$LN15@FMD_ReadSe|

; 594  :             goto cleanUp;

  00db4	ea000027	 b           |$cleanUp$43582|
  00db8		 |$LN5@FMD_ReadSe|

; 595  :             }
; 596  : 
; 597  :         // Read sector data
; 598  :         if (pBuffer != NULL)

  00db8	e59d3030	 ldr         r3, [sp, #0x30]
  00dbc	e3530000	 cmp         r3, #0
  00dc0	0a000009	 beq         |$LN4@FMD_ReadSe|

; 599  :             {
; 600  :             memcpy(pBuffer, pSector, s_fmd.sectorSize);

  00dc4	e59f30ec	 ldr         r3, [pc, #0xEC]
  00dc8	e5932008	 ldr         r2, [r3, #8]
  00dcc	e59d1004	 ldr         r1, [sp, #4]
  00dd0	e59d0030	 ldr         r0, [sp, #0x30]
  00dd4	eb000000	 bl          memcpy

; 601  :             pBuffer += s_fmd.sectorSize;

  00dd8	e59d2030	 ldr         r2, [sp, #0x30]
  00ddc	e59f30d4	 ldr         r3, [pc, #0xD4]
  00de0	e5933008	 ldr         r3, [r3, #8]
  00de4	e0823003	 add         r3, r2, r3
  00de8	e58d3030	 str         r3, [sp, #0x30]
  00dec		 |$LN4@FMD_ReadSe|

; 602  :             }
; 603  : 
; 604  :         // Read sector info
; 605  :         if (pSectorInfo != NULL)

  00dec	e59d3034	 ldr         r3, [sp, #0x34]
  00df0	e3530000	 cmp         r3, #0
  00df4	0a000011	 beq         |$LN3@FMD_ReadSe|

; 606  :             {
; 607  :             if (pInfo != NULL)

  00df8	e59d300c	 ldr         r3, [sp, #0xC]
  00dfc	e3530000	 cmp         r3, #0
  00e00	0a000004	 beq         |$LN2@FMD_ReadSe|

; 608  :                 {
; 609  :                 memcpy(pSectorInfo, pInfo, sizeof(SectorInfo));

  00e04	e3a02008	 mov         r2, #8
  00e08	e59d100c	 ldr         r1, [sp, #0xC]
  00e0c	e59d0034	 ldr         r0, [sp, #0x34]
  00e10	eb000000	 bl          memcpy

; 610  :                 }
; 611  :             else

  00e14	ea000006	 b           |$LN1@FMD_ReadSe|
  00e18		 |$LN2@FMD_ReadSe|

; 612  :                 {
; 613  :                 memset(pSectorInfo, 0xff, sizeof(SectorInfo));

  00e18	e3a02008	 mov         r2, #8
  00e1c	e3a010ff	 mov         r1, #0xFF
  00e20	e59d0034	 ldr         r0, [sp, #0x34]
  00e24	eb000000	 bl          memset

; 614  :                 pSectorInfo->dwReserved1 = sector;

  00e28	e59d202c	 ldr         r2, [sp, #0x2C]
  00e2c	e59d3034	 ldr         r3, [sp, #0x34]
  00e30	e5832000	 str         r2, [r3]
  00e34		 |$LN1@FMD_ReadSe|

; 615  :                 }
; 616  :             pSectorInfo++;

  00e34	e59d3034	 ldr         r3, [sp, #0x34]
  00e38	e2833008	 add         r3, r3, #8
  00e3c	e58d3034	 str         r3, [sp, #0x34]
  00e40		 |$LN3@FMD_ReadSe|

; 617  :         }
; 618  : 
; 619  :         sector++;

  00e40	e59d302c	 ldr         r3, [sp, #0x2C]
  00e44	e2833001	 add         r3, r3, #1
  00e48	e58d302c	 str         r3, [sp, #0x2C]

; 620  :     }

  00e4c	eaffffbf	 b           |$LN7@FMD_ReadSe|
  00e50		 |$LN6@FMD_ReadSe|

; 621  : 
; 622  :     rc = TRUE;

  00e50	e3a03001	 mov         r3, #1
  00e54	e58d3008	 str         r3, [sp, #8]
  00e58		 |$cleanUp$43582|

; 623  : 
; 624  : cleanUp:
; 625  :     ASSERT(rc);

  00e58	e59d3008	 ldr         r3, [sp, #8]
  00e5c	e3530000	 cmp         r3, #0
  00e60	0a000002	 beq         |$LN16@FMD_ReadSe|
  00e64	e3a03001	 mov         r3, #1
  00e68	e58d3020	 str         r3, [sp, #0x20]
  00e6c	ea000008	 b           |$LN17@FMD_ReadSe|
  00e70		 |$LN16@FMD_ReadSe|
  00e70	e3a03c02	 mov         r3, #2, 24
  00e74	e3833071	 orr         r3, r3, #0x71
  00e78	e59f2034	 ldr         r2, [pc, #0x34]
  00e7c	e59f102c	 ldr         r1, [pc, #0x2C]
  00e80	e59f0024	 ldr         r0, [pc, #0x24]
  00e84	eb000000	 bl          NKDbgPrintfW
  00e88	e6000010	 __debugbreak_ce
  00e8c	e3a03000	 mov         r3, #0
  00e90	e58d3020	 str         r3, [sp, #0x20]
  00e94		 |$LN17@FMD_ReadSe|

; 626  :     return rc;

  00e94	e59d3008	 ldr         r3, [sp, #8]
  00e98	e58d3014	 str         r3, [sp, #0x14]

; 627  : }

  00e9c	e59d0014	 ldr         r0, [sp, #0x14]
  00ea0	e28dd024	 add         sp, sp, #0x24
  00ea4	e89d6000	 ldmia       sp, {sp, lr}
  00ea8	e12fff1e	 bx          lr
  00eac		 |$LN21@FMD_ReadSe|
  00eac		 |$LN22@FMD_ReadSe|
  00eac	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00eb0		 |$LN23@FMD_ReadSe|
  00eb0	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00eb4		 |$LN24@FMD_ReadSe|
  00eb4	00000000	 DCD         |??_C@_1HI@NDBEPPBH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00eb8		 |$LN25@FMD_ReadSe|
  00eb8	00000000	 DCD         |s_fmd|
  00ebc		 |$LN26@FMD_ReadSe|
  00ebc	00000000	 DCD         |??_C@_1GI@BIKPKLCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAs@|
  00ec0		 |$LN27@FMD_ReadSe|
  00ec0	00000000	 DCD         |dpCurSettings|
  00ec4		 |$LN28@FMD_ReadSe|
  00ec4	00000000	 DCD         |??_C@_1IK@JOKCAGGI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp@|
  00ec8		 |$M43821|

			 ENDP  ; |FMD_ReadSector|

	EXPORT	|FMD_WriteSector|

  00050			 AREA	 |.pdata|, PDATA
|$T43837| DCD	|$LN5@FMD_WriteS|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00ec8			 AREA	 |.text|, CODE, ARM

  00ec8		 |FMD_WriteSector| PROC

; 640  : {

  00ec8		 |$LN5@FMD_WriteS|
  00ec8	e1a0c00d	 mov         r12, sp
  00ecc	e92d000f	 stmdb       sp!, {r0 - r3}
  00ed0	e92d5000	 stmdb       sp!, {r12, lr}
  00ed4	e24dd004	 sub         sp, sp, #4
  00ed8		 |$M43834|

; 641  :     return FALSE;

  00ed8	e3a03000	 mov         r3, #0
  00edc	e58d3000	 str         r3, [sp]

; 642  : }

  00ee0	e59d0000	 ldr         r0, [sp]
  00ee4	e28dd004	 add         sp, sp, #4
  00ee8	e89d6000	 ldmia       sp, {sp, lr}
  00eec	e12fff1e	 bx          lr
  00ef0		 |$M43835|

			 ENDP  ; |FMD_WriteSector|

	EXPORT	|FMD_EraseBlock|

  00058			 AREA	 |.pdata|, PDATA
|$T43843| DCD	|$LN5@FMD_EraseB|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00ef0			 AREA	 |.text|, CODE, ARM

  00ef0		 |FMD_EraseBlock| PROC

; 652  : {

  00ef0		 |$LN5@FMD_EraseB|
  00ef0	e1a0c00d	 mov         r12, sp
  00ef4	e92d0001	 stmdb       sp!, {r0}
  00ef8	e92d5000	 stmdb       sp!, {r12, lr}
  00efc	e24dd004	 sub         sp, sp, #4
  00f00		 |$M43840|

; 653  :     return FALSE;

  00f00	e3a03000	 mov         r3, #0
  00f04	e58d3000	 str         r3, [sp]

; 654  : }

  00f08	e59d0000	 ldr         r0, [sp]
  00f0c	e28dd004	 add         sp, sp, #4
  00f10	e89d6000	 ldmia       sp, {sp, lr}
  00f14	e12fff1e	 bx          lr
  00f18		 |$M43841|

			 ENDP  ; |FMD_EraseBlock|


  00060			 AREA	 |.pdata|, PDATA
|$T43849| DCD	|$LN16@FMD_GetBlo|
	DCD	0x40008d04
; Function compile flags: /Odtp

  00f18			 AREA	 |.text|, CODE, ARM

  00f18		 |FMD_GetBlockStatus| PROC

; 663  : {

  00f18		 |$LN16@FMD_GetBlo|
  00f18	e1a0c00d	 mov         r12, sp
  00f1c	e92d0001	 stmdb       sp!, {r0}
  00f20	e92d5000	 stmdb       sp!, {r12, lr}
  00f24	e24dd024	 sub         sp, sp, #0x24
  00f28		 |$M43846|

; 664  :     DWORD status = 0;

  00f28	e3a03000	 mov         r3, #0
  00f2c	e58d3004	 str         r3, [sp, #4]

; 665  :     ULONG region;
; 666  :     SECTOR_ADDR sector;
; 667  :     SectorInfo sectorInfo;
; 668  : 
; 669  : 
; 670  :     // First check for reserved block
; 671  :     for (region = 0; region < s_fmd.reservedRegions; region++)

  00f30	e3a03000	 mov         r3, #0
  00f34	e58d3000	 str         r3, [sp]
  00f38	ea000002	 b           |$LN11@FMD_GetBlo|
  00f3c		 |$LN10@FMD_GetBlo|
  00f3c	e59d3000	 ldr         r3, [sp]
  00f40	e2833001	 add         r3, r3, #1
  00f44	e58d3000	 str         r3, [sp]
  00f48		 |$LN11@FMD_GetBlo|
  00f48	e59d2000	 ldr         r2, [sp]
  00f4c	e59f31f4	 ldr         r3, [pc, #0x1F4]
  00f50	e5933018	 ldr         r3, [r3, #0x18]
  00f54	e1520003	 cmp         r2, r3
  00f58	2a00001a	 bcs         |$LN9@FMD_GetBlo|

; 672  :         {
; 673  :         ReservedEntry *pRegion = &s_fmd.reservedRegion[region];

  00f5c	e59d1000	 ldr         r1, [sp]
  00f60	e3a03010	 mov         r3, #0x10
  00f64	e0020391	 mul         r2, r1, r3
  00f68	e59f31d8	 ldr         r3, [pc, #0x1D8]
  00f6c	e283301c	 add         r3, r3, #0x1C
  00f70	e0833002	 add         r3, r3, r2
  00f74	e58d3014	 str         r3, [sp, #0x14]

; 674  :         if ( (block >= pRegion->dwStartBlock) &&
; 675  :              (block < (pRegion->dwStartBlock +  pRegion->dwNumBlocks)) )

  00f78	e59d3014	 ldr         r3, [sp, #0x14]
  00f7c	e2833008	 add         r3, r3, #8
  00f80	e59d202c	 ldr         r2, [sp, #0x2C]
  00f84	e5933000	 ldr         r3, [r3]
  00f88	e1520003	 cmp         r2, r3
  00f8c	3a00000c	 bcc         |$LN8@FMD_GetBlo|
  00f90	e59d3014	 ldr         r3, [sp, #0x14]
  00f94	e2832008	 add         r2, r3, #8
  00f98	e59d3014	 ldr         r3, [sp, #0x14]
  00f9c	e283300c	 add         r3, r3, #0xC
  00fa0	e5922000	 ldr         r2, [r2]
  00fa4	e5933000	 ldr         r3, [r3]
  00fa8	e0822003	 add         r2, r2, r3
  00fac	e59d302c	 ldr         r3, [sp, #0x2C]
  00fb0	e1530002	 cmp         r3, r2
  00fb4	2a000002	 bcs         |$LN8@FMD_GetBlo|

; 676  :             {
; 677  :             status = BLOCK_STATUS_RESERVED;

  00fb8	e3a03008	 mov         r3, #8
  00fbc	e58d3004	 str         r3, [sp, #4]

; 678  :             goto cleanUp;

  00fc0	ea00005a	 b           |$cleanUp$43628|
  00fc4		 |$LN8@FMD_GetBlo|

; 679  :             }
; 680  :         }

  00fc4	eaffffdc	 b           |$LN10@FMD_GetBlo|
  00fc8		 |$LN9@FMD_GetBlo|

; 681  : 
; 682  : 
; 683  :     // Now find block region
; 684  :     for (region = 0; region < s_fmd.regions; region++)

  00fc8	e3a03000	 mov         r3, #0
  00fcc	e58d3000	 str         r3, [sp]
  00fd0	ea000002	 b           |$LN7@FMD_GetBlo|
  00fd4		 |$LN6@FMD_GetBlo|
  00fd4	e59d3000	 ldr         r3, [sp]
  00fd8	e2833001	 add         r3, r3, #1
  00fdc	e58d3000	 str         r3, [sp]
  00fe0		 |$LN7@FMD_GetBlo|
  00fe0	e59d2000	 ldr         r2, [sp]
  00fe4	e59f315c	 ldr         r3, [pc, #0x15C]
  00fe8	e593311c	 ldr         r3, [r3, #0x11C]
  00fec	e1520003	 cmp         r2, r3
  00ff0	2a000018	 bcs         |$LN5@FMD_GetBlo|

; 685  :         {
; 686  :         FlashRegion *pRegion = &s_fmd.region[region];

  00ff4	e59d1000	 ldr         r1, [sp]
  00ff8	e3a0301c	 mov         r3, #0x1C
  00ffc	e0020391	 mul         r2, r1, r3
  01000	e59f3140	 ldr         r3, [pc, #0x140]
  01004	e2833e12	 add         r3, r3, #0x12, 28
  01008	e0833002	 add         r3, r3, r2
  0100c	e58d3018	 str         r3, [sp, #0x18]

; 687  :         if ( (block >= pRegion->dwStartPhysBlock) &&
; 688  :              (block < (pRegion->dwStartPhysBlock +  pRegion->dwNumPhysBlocks)) )

  01010	e59d3018	 ldr         r3, [sp, #0x18]
  01014	e2833004	 add         r3, r3, #4
  01018	e59d202c	 ldr         r2, [sp, #0x2C]
  0101c	e5933000	 ldr         r3, [r3]
  01020	e1520003	 cmp         r2, r3
  01024	3a00000a	 bcc         |$LN4@FMD_GetBlo|
  01028	e59d3018	 ldr         r3, [sp, #0x18]
  0102c	e2832004	 add         r2, r3, #4
  01030	e59d3018	 ldr         r3, [sp, #0x18]
  01034	e2833008	 add         r3, r3, #8
  01038	e5922000	 ldr         r2, [r2]
  0103c	e5933000	 ldr         r3, [r3]
  01040	e0822003	 add         r2, r2, r3
  01044	e59d302c	 ldr         r3, [sp, #0x2C]
  01048	e1530002	 cmp         r3, r2
  0104c	2a000000	 bcs         |$LN4@FMD_GetBlo|

; 689  :             {
; 690  :             break;

  01050	ea000000	 b           |$LN5@FMD_GetBlo|
  01054		 |$LN4@FMD_GetBlo|

; 691  :             }
; 692  :         }

  01054	eaffffde	 b           |$LN6@FMD_GetBlo|
  01058		 |$LN5@FMD_GetBlo|

; 693  : 
; 694  :     // If we don't find it return error
; 695  :     if (region >= s_fmd.regions)

  01058	e59d2000	 ldr         r2, [sp]
  0105c	e59f30e4	 ldr         r3, [pc, #0xE4]
  01060	e593311c	 ldr         r3, [r3, #0x11C]
  01064	e1520003	 cmp         r2, r3
  01068	3a000002	 bcc         |$LN3@FMD_GetBlo|

; 696  :         {
; 697  :         status = BLOCK_STATUS_UNKNOWN;

  0106c	e3a03001	 mov         r3, #1
  01070	e58d3004	 str         r3, [sp, #4]

; 698  :         goto cleanUp;

  01074	ea00002d	 b           |$cleanUp$43628|
  01078		 |$LN3@FMD_GetBlo|

; 699  :         }
; 700  : 
; 701  :     // Get first block sector number
; 702  :     sector = s_fmd.firstSector[region] +
; 703  :         (block - s_fmd.region[region].dwStartPhysBlock) *
; 704  :         s_fmd.region[region].dwSectorsPerBlock;

  01078	e59d1000	 ldr         r1, [sp]
  0107c	e3a03004	 mov         r3, #4
  01080	e0020391	 mul         r2, r1, r3
  01084	e59f30bc	 ldr         r3, [pc, #0xBC]
  01088	e2833e2e	 add         r3, r3, #0x2E, 28
  0108c	e083e002	 add         lr, r3, r2
  01090	e59d1000	 ldr         r1, [sp]
  01094	e3a0301c	 mov         r3, #0x1C
  01098	e0020391	 mul         r2, r1, r3
  0109c	e59f30a4	 ldr         r3, [pc, #0xA4]
  010a0	e2833e12	 add         r3, r3, #0x12, 28
  010a4	e0833002	 add         r3, r3, r2
  010a8	e2833004	 add         r3, r3, #4
  010ac	e59d202c	 ldr         r2, [sp, #0x2C]
  010b0	e5933000	 ldr         r3, [r3]
  010b4	e0420003	 sub         r0, r2, r3
  010b8	e59d1000	 ldr         r1, [sp]
  010bc	e3a0301c	 mov         r3, #0x1C
  010c0	e0020391	 mul         r2, r1, r3
  010c4	e59f307c	 ldr         r3, [pc, #0x7C]
  010c8	e2833e12	 add         r3, r3, #0x12, 28
  010cc	e0833002	 add         r3, r3, r2
  010d0	e2833010	 add         r3, r3, #0x10
  010d4	e5933000	 ldr         r3, [r3]
  010d8	e0020390	 mul         r2, r0, r3
  010dc	e59e3000	 ldr         r3, [lr]
  010e0	e0833002	 add         r3, r3, r2
  010e4	e58d3008	 str         r3, [sp, #8]

; 705  : 
; 706  :     // Read sector info
; 707  :     if (!FMD_ReadSector(sector, NULL, &sectorInfo, 1))

  010e8	e3a03001	 mov         r3, #1
  010ec	e28d200c	 add         r2, sp, #0xC
  010f0	e3a01000	 mov         r1, #0
  010f4	e59d0008	 ldr         r0, [sp, #8]
  010f8	eb000000	 bl          FMD_ReadSector
  010fc	e58d0020	 str         r0, [sp, #0x20]
  01100	e59d3020	 ldr         r3, [sp, #0x20]
  01104	e3530000	 cmp         r3, #0
  01108	1a000002	 bne         |$LN2@FMD_GetBlo|

; 708  :         {
; 709  :         status = BLOCK_STATUS_UNKNOWN;

  0110c	e3a03001	 mov         r3, #1
  01110	e58d3004	 str         r3, [sp, #4]

; 710  :         goto cleanUp;

  01114	ea000005	 b           |$cleanUp$43628|
  01118		 |$LN2@FMD_GetBlo|

; 711  :         }
; 712  : 
; 713  :     // Note that we invert status bit
; 714  :     if ((sectorInfo.bOEMReserved & OEM_BLOCK_RESERVED) == 0)

  01118	e5dd3010	 ldrb        r3, [sp, #0x10]
  0111c	e3130001	 tst         r3, #1
  01120	1a000002	 bne         |$LN1@FMD_GetBlo|

; 715  :         {
; 716  :         status |= BLOCK_STATUS_RESERVED;

  01124	e59d3004	 ldr         r3, [sp, #4]
  01128	e3833008	 orr         r3, r3, #8
  0112c	e58d3004	 str         r3, [sp, #4]
  01130		 |$LN1@FMD_GetBlo|
  01130		 |$cleanUp$43628|

; 717  :         }
; 718  : 
; 719  : cleanUp:
; 720  :     return status;

  01130	e59d3004	 ldr         r3, [sp, #4]
  01134	e58d301c	 str         r3, [sp, #0x1C]

; 721  : }

  01138	e59d001c	 ldr         r0, [sp, #0x1C]
  0113c	e28dd024	 add         sp, sp, #0x24
  01140	e89d6000	 ldmia       sp, {sp, lr}
  01144	e12fff1e	 bx          lr
  01148		 |$LN17@FMD_GetBlo|
  01148		 |$LN18@FMD_GetBlo|
  01148	00000000	 DCD         |s_fmd|
  0114c		 |$M43847|

			 ENDP  ; |FMD_GetBlockStatus|

	EXPORT	|FMD_SetBlockStatus|

  00068			 AREA	 |.pdata|, PDATA
|$T43857| DCD	|$LN5@FMD_SetBlo|
	DCD	0x40000a04
; Function compile flags: /Odtp

  0114c			 AREA	 |.text|, CODE, ARM

  0114c		 |FMD_SetBlockStatus| PROC

; 729  : {

  0114c		 |$LN5@FMD_SetBlo|
  0114c	e1a0c00d	 mov         r12, sp
  01150	e92d0003	 stmdb       sp!, {r0, r1}
  01154	e92d5000	 stmdb       sp!, {r12, lr}
  01158	e24dd004	 sub         sp, sp, #4
  0115c		 |$M43854|

; 730  :     return FALSE;

  0115c	e3a03000	 mov         r3, #0
  01160	e58d3000	 str         r3, [sp]

; 731  : }

  01164	e59d0000	 ldr         r0, [sp]
  01168	e28dd004	 add         sp, sp, #4
  0116c	e89d6000	 ldmia       sp, {sp, lr}
  01170	e12fff1e	 bx          lr
  01174		 |$M43855|

			 ENDP  ; |FMD_SetBlockStatus|

	EXPORT	|FMD_PowerUp|

  00070			 AREA	 |.pdata|, PDATA
|$T43862| DCD	|$LN5@FMD_PowerU|
	DCD	0x40000100
; Function compile flags: /Odtp

  01174			 AREA	 |.text|, CODE, ARM

  01174		 |FMD_PowerUp| PROC

; 741  : {

  01174		 |$LN5@FMD_PowerU|
  01174		 |$M43859|

; 742  : }

  01174	e12fff1e	 bx          lr
  01178		 |$M43860|

			 ENDP  ; |FMD_PowerUp|

	EXPORT	|FMD_PowerDown|

  00078			 AREA	 |.pdata|, PDATA
|$T43867| DCD	|$LN5@FMD_PowerD|
	DCD	0x40000100
; Function compile flags: /Odtp

  01178			 AREA	 |.text|, CODE, ARM

  01178		 |FMD_PowerDown| PROC

; 752  : {

  01178		 |$LN5@FMD_PowerD|
  01178		 |$M43864|

; 753  : }

  01178	e12fff1e	 bx          lr
  0117c		 |$M43865|

			 ENDP  ; |FMD_PowerDown|

	EXPORT	|FMD_OEMIoControl|

  00080			 AREA	 |.pdata|, PDATA
|$T43874| DCD	|$LN25@FMD_OEMIoC|
	DCD	0x4000d704
; Function compile flags: /Odtp

  0117c			 AREA	 |.text|, CODE, ARM

  0117c		 |FMD_OEMIoControl| PROC

; 766  : {

  0117c		 |$LN25@FMD_OEMIoC|
  0117c	e1a0c00d	 mov         r12, sp
  01180	e92d000f	 stmdb       sp!, {r0 - r3}
  01184	e92d5000	 stmdb       sp!, {r12, lr}
  01188	e24dd01c	 sub         sp, sp, #0x1C
  0118c		 |$M43871|

; 767  :     BOOL rc = TRUE;

  0118c	e3a03001	 mov         r3, #1
  01190	e58d3000	 str         r3, [sp]

; 768  : 
; 769  :     switch(code)

  01194	e59d3024	 ldr         r3, [sp, #0x24]
  01198	e58d3018	 str         r3, [sp, #0x18]
  0119c	e59d2018	 ldr         r2, [sp, #0x18]
  011a0	e3a03a72	 mov         r3, #0x72, 20
  011a4	e2433054	 sub         r3, r3, #0x54
  011a8	e1520003	 cmp         r2, r3
  011ac	8a00000f	 bhi         |$LN22@FMD_OEMIoC|
  011b0	e59d2018	 ldr         r2, [sp, #0x18]
  011b4	e3a03a72	 mov         r3, #0x72, 20
  011b8	e2433054	 sub         r3, r3, #0x54
  011bc	e1520003	 cmp         r2, r3
  011c0	0a00007b	 beq         |$LN8@FMD_OEMIoC|
  011c4	e59d2018	 ldr         r2, [sp, #0x18]
  011c8	e3a03a72	 mov         r3, #0x72, 20
  011cc	e2433074	 sub         r3, r3, #0x74
  011d0	e1520003	 cmp         r2, r3
  011d4	0a00000b	 beq         |$LN17@FMD_OEMIoC|
  011d8	e59d2018	 ldr         r2, [sp, #0x18]
  011dc	e3a03a72	 mov         r3, #0x72, 20
  011e0	e2433064	 sub         r3, r3, #0x64
  011e4	e1520003	 cmp         r2, r3
  011e8	0a00004f	 beq         |$LN13@FMD_OEMIoC|
  011ec	ea0000a3	 b           |$LN1@FMD_OEMIoC|
  011f0		 |$LN22@FMD_OEMIoC|
  011f0	e59d2018	 ldr         r2, [sp, #0x18]
  011f4	e3a03a71	 mov         r3, #0x71, 20
  011f8	e3833efb	 orr         r3, r3, #0xFB, 28
  011fc	e1520003	 cmp         r2, r3
  01200	0a00007f	 beq         |$LN4@FMD_OEMIoC|
  01204	ea00009d	 b           |$LN1@FMD_OEMIoC|
  01208		 |$LN17@FMD_OEMIoC|

; 770  :         {
; 771  :         case IOCTL_FMD_GET_INTERFACE:
; 772  :             {
; 773  :             FMDInterface *pInterface = (FMDInterface*)pOutBuffer;

  01208	e59d3030	 ldr         r3, [sp, #0x30]
  0120c	e58d3004	 str         r3, [sp, #4]

; 774  :             if (pOutSize != NULL) *pOutSize = sizeof(FMDInterface);

  01210	e59d3038	 ldr         r3, [sp, #0x38]
  01214	e3530000	 cmp         r3, #0
  01218	0a000002	 beq         |$LN16@FMD_OEMIoC|
  0121c	e59d2038	 ldr         r2, [sp, #0x38]
  01220	e3a03038	 mov         r3, #0x38
  01224	e5823000	 str         r3, [r2]
  01228		 |$LN16@FMD_OEMIoC|

; 775  :             if ((pOutBuffer == NULL) || (outSize < sizeof(FMDInterface)))

  01228	e59d3030	 ldr         r3, [sp, #0x30]
  0122c	e3530000	 cmp         r3, #0
  01230	0a000002	 beq         |$LN14@FMD_OEMIoC|
  01234	e59d3034	 ldr         r3, [sp, #0x34]
  01238	e3530038	 cmp         r3, #0x38
  0123c	2a000002	 bcs         |$LN15@FMD_OEMIoC|
  01240		 |$LN14@FMD_OEMIoC|

; 776  :                 {
; 777  :                 rc = FALSE;

  01240	e3a03000	 mov         r3, #0
  01244	e58d3000	 str         r3, [sp]

; 778  :                 break;

  01248	ea00008e	 b           |$LN18@FMD_OEMIoC|
  0124c		 |$LN15@FMD_OEMIoC|

; 779  :                 }
; 780  :             pInterface->cbSize = sizeof(FMDInterface);

  0124c	e59d2004	 ldr         r2, [sp, #4]
  01250	e3a03038	 mov         r3, #0x38
  01254	e5823000	 str         r3, [r2]

; 781  :             pInterface->pInit = FMD_Init;

  01258	e59d3004	 ldr         r3, [sp, #4]
  0125c	e2832004	 add         r2, r3, #4
  01260	e59f326c	 ldr         r3, [pc, #0x26C]
  01264	e5823000	 str         r3, [r2]

; 782  :             pInterface->pDeInit = FMD_Deinit;

  01268	e59d3004	 ldr         r3, [sp, #4]
  0126c	e2832008	 add         r2, r3, #8
  01270	e59f3258	 ldr         r3, [pc, #0x258]
  01274	e5823000	 str         r3, [r2]

; 783  :             pInterface->pGetInfo = FMD_GetInfo;

  01278	e59d3004	 ldr         r3, [sp, #4]
  0127c	e283200c	 add         r2, r3, #0xC
  01280	e59f3244	 ldr         r3, [pc, #0x244]
  01284	e5823000	 str         r3, [r2]

; 784  :             pInterface->pGetInfoEx = FMD_GetInfoEx;

  01288	e59d3004	 ldr         r3, [sp, #4]
  0128c	e2832030	 add         r2, r3, #0x30
  01290	e59f3230	 ldr         r3, [pc, #0x230]
  01294	e5823000	 str         r3, [r2]

; 785  :             pInterface->pGetBlockStatus = FMD_GetBlockStatus;

  01298	e59d3004	 ldr         r3, [sp, #4]
  0129c	e2832010	 add         r2, r3, #0x10
  012a0	e59f321c	 ldr         r3, [pc, #0x21C]
  012a4	e5823000	 str         r3, [r2]

; 786  :             pInterface->pSetBlockStatus = FMD_SetBlockStatus;

  012a8	e59d3004	 ldr         r3, [sp, #4]
  012ac	e2832014	 add         r2, r3, #0x14
  012b0	e59f3208	 ldr         r3, [pc, #0x208]
  012b4	e5823000	 str         r3, [r2]

; 787  :             pInterface->pReadSector = FMD_ReadSector;

  012b8	e59d3004	 ldr         r3, [sp, #4]
  012bc	e2832018	 add         r2, r3, #0x18
  012c0	e59f31f4	 ldr         r3, [pc, #0x1F4]
  012c4	e5823000	 str         r3, [r2]

; 788  :             pInterface->pWriteSector = FMD_WriteSector;

  012c8	e59d3004	 ldr         r3, [sp, #4]
  012cc	e283201c	 add         r2, r3, #0x1C
  012d0	e59f31e0	 ldr         r3, [pc, #0x1E0]
  012d4	e5823000	 str         r3, [r2]

; 789  :             pInterface->pEraseBlock = FMD_EraseBlock;

  012d8	e59d3004	 ldr         r3, [sp, #4]
  012dc	e2832020	 add         r2, r3, #0x20
  012e0	e59f31cc	 ldr         r3, [pc, #0x1CC]
  012e4	e5823000	 str         r3, [r2]

; 790  :             pInterface->pPowerUp = FMD_PowerUp;

  012e8	e59d3004	 ldr         r3, [sp, #4]
  012ec	e2832024	 add         r2, r3, #0x24
  012f0	e59f31b8	 ldr         r3, [pc, #0x1B8]
  012f4	e5823000	 str         r3, [r2]

; 791  :             pInterface->pPowerDown = FMD_PowerDown;

  012f8	e59d3004	 ldr         r3, [sp, #4]
  012fc	e2832028	 add         r2, r3, #0x28
  01300	e59f31a4	 ldr         r3, [pc, #0x1A4]
  01304	e5823000	 str         r3, [r2]

; 792  :             pInterface->pGetPhysSectorAddr = FMD_GetPhysSectorAddr;

  01308	e59d3004	 ldr         r3, [sp, #4]
  0130c	e283202c	 add         r2, r3, #0x2C
  01310	e59f3190	 ldr         r3, [pc, #0x190]
  01314	e5823000	 str         r3, [r2]

; 793  :             pInterface->pOEMIoControl = FMD_OEMIoControl;

  01318	e59d3004	 ldr         r3, [sp, #4]
  0131c	e2832034	 add         r2, r3, #0x34
  01320	e59f317c	 ldr         r3, [pc, #0x17C]
  01324	e5823000	 str         r3, [r2]

; 794  :             }
; 795  :             break;

  01328	ea000056	 b           |$LN18@FMD_OEMIoC|
  0132c		 |$LN13@FMD_OEMIoC|

; 796  : 
; 797  :         case IOCTL_FMD_GET_RESERVED_TABLE:
; 798  :             {
; 799  :             ULONG regions = s_fmd.reservedRegions;

  0132c	e59f316c	 ldr         r3, [pc, #0x16C]
  01330	e5933018	 ldr         r3, [r3, #0x18]
  01334	e58d300c	 str         r3, [sp, #0xC]

; 800  :             ULONG size;
; 801  :             if (regions > dimof(s_fmd.reservedRegion))

  01338	e59d300c	 ldr         r3, [sp, #0xC]
  0133c	e3530010	 cmp         r3, #0x10
  01340	9a000001	 bls         |$LN12@FMD_OEMIoC|

; 802  :                 {
; 803  :                 regions = dimof(s_fmd.reservedRegion);

  01344	e3a03010	 mov         r3, #0x10
  01348	e58d300c	 str         r3, [sp, #0xC]
  0134c		 |$LN12@FMD_OEMIoC|

; 804  :                 }
; 805  :             size = regions * sizeof(ReservedEntry);

  0134c	e59d200c	 ldr         r2, [sp, #0xC]
  01350	e3a03010	 mov         r3, #0x10
  01354	e0030392	 mul         r3, r2, r3
  01358	e58d3008	 str         r3, [sp, #8]

; 806  :             if (pOutSize != NULL) *pOutSize = size;

  0135c	e59d3038	 ldr         r3, [sp, #0x38]
  01360	e3530000	 cmp         r3, #0
  01364	0a000002	 beq         |$LN11@FMD_OEMIoC|
  01368	e59d2008	 ldr         r2, [sp, #8]
  0136c	e59d3038	 ldr         r3, [sp, #0x38]
  01370	e5832000	 str         r2, [r3]
  01374		 |$LN11@FMD_OEMIoC|

; 807  :             if ((pOutBuffer == NULL) || (outSize < size))

  01374	e59d3030	 ldr         r3, [sp, #0x30]
  01378	e3530000	 cmp         r3, #0
  0137c	0a000003	 beq         |$LN9@FMD_OEMIoC|
  01380	e59d2034	 ldr         r2, [sp, #0x34]
  01384	e59d3008	 ldr         r3, [sp, #8]
  01388	e1520003	 cmp         r2, r3
  0138c	2a000002	 bcs         |$LN10@FMD_OEMIoC|
  01390		 |$LN9@FMD_OEMIoC|

; 808  :                 {
; 809  :                 rc = FALSE;

  01390	e3a03000	 mov         r3, #0
  01394	e58d3000	 str         r3, [sp]

; 810  :                 break;

  01398	ea00003a	 b           |$LN18@FMD_OEMIoC|
  0139c		 |$LN10@FMD_OEMIoC|

; 811  :                 }
; 812  :             memcpy(pOutBuffer, s_fmd.reservedRegion, size);

  0139c	e59d2008	 ldr         r2, [sp, #8]
  013a0	e59f30f8	 ldr         r3, [pc, #0xF8]
  013a4	e283101c	 add         r1, r3, #0x1C
  013a8	e59d0030	 ldr         r0, [sp, #0x30]
  013ac	eb000000	 bl          memcpy

; 813  :             }
; 814  :             break;

  013b0	ea000034	 b           |$LN18@FMD_OEMIoC|
  013b4		 |$LN8@FMD_OEMIoC|

; 815  : 
; 816  :         case IOCTL_FMD_GET_RAW_BLOCK_SIZE:
; 817  :             if (pOutSize != NULL) *pOutSize = sizeof(DWORD);

  013b4	e59d3038	 ldr         r3, [sp, #0x38]
  013b8	e3530000	 cmp         r3, #0
  013bc	0a000002	 beq         |$LN7@FMD_OEMIoC|
  013c0	e59d2038	 ldr         r2, [sp, #0x38]
  013c4	e3a03004	 mov         r3, #4
  013c8	e5823000	 str         r3, [r2]
  013cc		 |$LN7@FMD_OEMIoC|

; 818  :             if ((pOutBuffer == NULL) || (outSize < sizeof(DWORD)))

  013cc	e59d3030	 ldr         r3, [sp, #0x30]
  013d0	e3530000	 cmp         r3, #0
  013d4	0a000002	 beq         |$LN5@FMD_OEMIoC|
  013d8	e59d3034	 ldr         r3, [sp, #0x34]
  013dc	e3530004	 cmp         r3, #4
  013e0	2a000002	 bcs         |$LN6@FMD_OEMIoC|
  013e4		 |$LN5@FMD_OEMIoC|

; 819  :                 {
; 820  :                 rc = FALSE;

  013e4	e3a03000	 mov         r3, #0
  013e8	e58d3000	 str         r3, [sp]

; 821  :                 break;

  013ec	ea000025	 b           |$LN18@FMD_OEMIoC|
  013f0		 |$LN6@FMD_OEMIoC|

; 822  :                 }
; 823  :             *((DWORD*)pOutBuffer) = s_fmd.blockSize;

  013f0	e59f30a8	 ldr         r3, [pc, #0xA8]
  013f4	e593200c	 ldr         r2, [r3, #0xC]
  013f8	e59d3030	 ldr         r3, [sp, #0x30]
  013fc	e5832000	 str         r2, [r3]

; 824  :             break;

  01400	ea000020	 b           |$LN18@FMD_OEMIoC|
  01404		 |$LN4@FMD_OEMIoC|

; 825  : 
; 826  :         case IOCTL_FMD_GET_INFO:
; 827  :             {
; 828  :             FMDInfo *pInfo = (FMDInfo*)pOutBuffer;

  01404	e59d3030	 ldr         r3, [sp, #0x30]
  01408	e58d3010	 str         r3, [sp, #0x10]

; 829  :             if ((pOutBuffer == NULL) || (outSize < sizeof(FMDInfo)))

  0140c	e59d3030	 ldr         r3, [sp, #0x30]
  01410	e3530000	 cmp         r3, #0
  01414	0a000002	 beq         |$LN2@FMD_OEMIoC|
  01418	e59d3034	 ldr         r3, [sp, #0x34]
  0141c	e3530014	 cmp         r3, #0x14
  01420	2a000002	 bcs         |$LN3@FMD_OEMIoC|
  01424		 |$LN2@FMD_OEMIoC|

; 830  :                 {
; 831  :                 rc = FALSE;

  01424	e3a03000	 mov         r3, #0
  01428	e58d3000	 str         r3, [sp]

; 832  :                 break;

  0142c	ea000015	 b           |$LN18@FMD_OEMIoC|
  01430		 |$LN3@FMD_OEMIoC|

; 833  :                 }
; 834  :             pInfo->flashType = NOR;

  01430	e59d3010	 ldr         r3, [sp, #0x10]
  01434	e2832004	 add         r2, r3, #4
  01438	e3a03001	 mov         r3, #1
  0143c	e5823000	 str         r3, [r2]

; 835  :             pInfo->dwBaseAddress = s_fmd.memBase;

  01440	e59d3010	 ldr         r3, [sp, #0x10]
  01444	e2832008	 add         r2, r3, #8
  01448	e59f3050	 ldr         r3, [pc, #0x50]
  0144c	e5933000	 ldr         r3, [r3]
  01450	e5823000	 str         r3, [r2]

; 836  :             pInfo->dwNumRegions = s_fmd.regions;

  01454	e59d3010	 ldr         r3, [sp, #0x10]
  01458	e283200c	 add         r2, r3, #0xC
  0145c	e59f303c	 ldr         r3, [pc, #0x3C]
  01460	e593311c	 ldr         r3, [r3, #0x11C]
  01464	e5823000	 str         r3, [r2]

; 837  :             pInfo->dwNumReserved = s_fmd.reservedRegions;

  01468	e59d3010	 ldr         r3, [sp, #0x10]
  0146c	e2832010	 add         r2, r3, #0x10
  01470	e59f3028	 ldr         r3, [pc, #0x28]
  01474	e5933018	 ldr         r3, [r3, #0x18]
  01478	e5823000	 str         r3, [r2]

; 838  :             }
; 839  :             break;

  0147c	ea000001	 b           |$LN18@FMD_OEMIoC|
  01480		 |$LN1@FMD_OEMIoC|

; 840  : 
; 841  :         default:
; 842  :             rc = FALSE;

  01480	e3a03000	 mov         r3, #0
  01484	e58d3000	 str         r3, [sp]
  01488		 |$LN18@FMD_OEMIoC|

; 843  :             break;
; 844  :     }
; 845  : 
; 846  :     return rc;

  01488	e59d3000	 ldr         r3, [sp]
  0148c	e58d3014	 str         r3, [sp, #0x14]

; 847  : }

  01490	e59d0014	 ldr         r0, [sp, #0x14]
  01494	e28dd01c	 add         sp, sp, #0x1C
  01498	e89d6000	 ldmia       sp, {sp, lr}
  0149c	e12fff1e	 bx          lr
  014a0		 |$LN26@FMD_OEMIoC|
  014a0		 |$LN27@FMD_OEMIoC|
  014a0	00000000	 DCD         |s_fmd|
  014a4		 |$LN28@FMD_OEMIoC|
  014a4	00000000	 DCD         |FMD_OEMIoControl|
  014a8		 |$LN29@FMD_OEMIoC|
  014a8	00000000	 DCD         |FMD_GetPhysSectorAddr|
  014ac		 |$LN30@FMD_OEMIoC|
  014ac	00000000	 DCD         |FMD_PowerDown|
  014b0		 |$LN31@FMD_OEMIoC|
  014b0	00000000	 DCD         |FMD_PowerUp|
  014b4		 |$LN32@FMD_OEMIoC|
  014b4	00000000	 DCD         |FMD_EraseBlock|
  014b8		 |$LN33@FMD_OEMIoC|
  014b8	00000000	 DCD         |FMD_WriteSector|
  014bc		 |$LN34@FMD_OEMIoC|
  014bc	00000000	 DCD         |FMD_ReadSector|
  014c0		 |$LN35@FMD_OEMIoC|
  014c0	00000000	 DCD         |FMD_SetBlockStatus|
  014c4		 |$LN36@FMD_OEMIoC|
  014c4	00000000	 DCD         |FMD_GetBlockStatus|
  014c8		 |$LN37@FMD_OEMIoC|
  014c8	00000000	 DCD         |FMD_GetInfoEx|
  014cc		 |$LN38@FMD_OEMIoC|
  014cc	00000000	 DCD         |FMD_GetInfo|
  014d0		 |$LN39@FMD_OEMIoC|
  014d0	00000000	 DCD         |FMD_Deinit|
  014d4		 |$LN40@FMD_OEMIoC|
  014d4	00000000	 DCD         |FMD_Init|
  014d8		 |$M43872|

			 ENDP  ; |FMD_OEMIoControl|

	END
