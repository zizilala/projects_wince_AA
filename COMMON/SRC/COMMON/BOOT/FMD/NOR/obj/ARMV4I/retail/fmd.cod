; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\BOOT\FMD\NOR\fmd.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
|s_blockSign| DCD 0xc1552106
	DCD	0xdf9c29d5
	DCD	0xbab8eab8
	DCD	0x82d3f9f3
	DCD	0x3b438a47
	DCD	0xa9d92ae6
	DCD	0x9396731
	DCD	0x12bf6753

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	IMPORT	|OALFlashInfo|
	IMPORT	|__rt_udiv|
; File c:\wince600\platform\common\src\common\boot\fmd\nor\fmd.c

  00000			 AREA	 |.pdata|, PDATA
|$T43815| DCD	|$LN27@FindBlockS|
	DCD	0x40003502
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FindBlockSize| PROC

; 144  : {

  00000		 |$LN27@FindBlockS|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd058	 sub         sp, sp, #0x58
  00008		 |$M43812|
  00008	e1b06001	 movs        r6, r1
  0000c	e1a09000	 mov         r9, r0

; 145  :     OAL_FLASH_INFO flashInfo;
; 146  :     ULONG blockSize = 0;

  00010	e3a04000	 mov         r4, #0

; 147  :     ULONG region;
; 148  :     ULONG flashSize;
; 149  : 
; 150  :     while (size > 0)

  00014	0a00002a	 beq         |$cleanUp$43434|
  00018		 |$LL12@FindBlockS|

; 151  :         {
; 152  :         if (!OALFlashInfo(pBase, &flashInfo))

  00018	e28d1000	 add         r1, sp, #0
  0001c	e1a00009	 mov         r0, r9
  00020	eb000000	 bl          OALFlashInfo
  00024	e3500000	 cmp         r0, #0
  00028	0a000024	 beq         |$LN19@FindBlockS|

; 155  :             goto cleanUp;
; 156  :             }
; 157  :         for (region = 0; region < flashInfo.regions; region++)

  0002c	e59da014	 ldr         r10, [sp, #0x14]
  00030	e3a08000	 mov         r8, #0
  00034	e35a0000	 cmp         r10, #0
  00038	0a000017	 beq         |$LN7@FindBlockS|
  0003c	e28d5000	 add         r5, sp, #0
  00040		 |$LL9@FindBlockS|

; 158  :             {
; 159  :             if (flashInfo.aBlockSize[region] > blockSize)

  00040	e5957018	 ldr         r7, [r5, #0x18]
  00044	e1570004	 cmp         r7, r4
  00048	9a000008	 bls         |$LN6@FindBlockS|

; 160  :                 {
; 161  :                     if ( (blockSize > 0) &&
; 162  :                         ((flashInfo.aBlockSize[region] % blockSize) != 0) )

  0004c	e3540000	 cmp         r4, #0
  00050	0a000004	 beq         |$LN5@FindBlockS|
  00054	e1a00004	 mov         r0, r4
  00058	e1a01007	 mov         r1, r7
  0005c	eb000000	 bl          __rt_udiv
  00060	e3510000	 cmp         r1, #0
  00064	1a000015	 bne         |$LN19@FindBlockS|
  00068		 |$LN5@FindBlockS|

; 166  :                         }
; 167  :                     blockSize = flashInfo.aBlockSize[region];

  00068	e1a04007	 mov         r4, r7
  0006c	ea000006	 b           |$LN8@FindBlockS|
  00070		 |$LN6@FindBlockS|

; 168  :                 }
; 169  :             else if (blockSize > 0)

  00070	e3540000	 cmp         r4, #0
  00074	0a000004	 beq         |$LN8@FindBlockS|

; 170  :                 {
; 171  :                 if ((blockSize % flashInfo.aBlockSize[region]) != 0)

  00078	e1a00007	 mov         r0, r7
  0007c	e1a01004	 mov         r1, r4
  00080	eb000000	 bl          __rt_udiv
  00084	e3510000	 cmp         r1, #0
  00088	1a00000c	 bne         |$LN19@FindBlockS|
  0008c		 |$LN8@FindBlockS|

; 155  :             goto cleanUp;
; 156  :             }
; 157  :         for (region = 0; region < flashInfo.regions; region++)

  0008c	e2888001	 add         r8, r8, #1
  00090	e158000a	 cmp         r8, r10
  00094	e2855004	 add         r5, r5, #4
  00098	3affffe8	 bcc         |$LL9@FindBlockS|
  0009c		 |$LN7@FindBlockS|

; 172  :                     {
; 173  :                     blockSize = 0;
; 174  :                     goto cleanUp;
; 175  :                     }
; 176  :                 }
; 177  :             }
; 178  :         flashSize = flashInfo.size * flashInfo.parallel;

  0009c	e59d200c	 ldr         r2, [sp, #0xC]
  000a0	e59d3004	 ldr         r3, [sp, #4]
  000a4	e0020293	 mul         r2, r3, r2

; 179  :         pBase = (UCHAR*)pBase + flashSize;

  000a8	e0899002	 add         r9, r9, r2

; 180  :         if (flashSize > size) break;

  000ac	e1520006	 cmp         r2, r6
  000b0	8a000003	 bhi         |$cleanUp$43434|

; 181  :         size -= flashSize;

  000b4	e0566002	 subs        r6, r6, r2

; 147  :     ULONG region;
; 148  :     ULONG flashSize;
; 149  : 
; 150  :     while (size > 0)

  000b8	1affffd6	 bne         |$LL12@FindBlockS|

; 163  :                         {
; 164  :                         blockSize = 0;
; 165  :                         goto cleanUp;

  000bc	ea000000	 b           |$cleanUp$43434|
  000c0		 |$LN19@FindBlockS|

; 153  :             {
; 154  :             blockSize = 0;

  000c0	e3a04000	 mov         r4, #0
  000c4		 |$cleanUp$43434|

; 182  :         }
; 183  : 
; 184  : cleanUp:
; 185  :     return blockSize;
; 186  : }

  000c4	e1a00004	 mov         r0, r4
  000c8	e28dd058	 add         sp, sp, #0x58
  000cc	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$M43813|

			 ENDP  ; |FindBlockSize|


  00000			 AREA	 |.bss|, NOINIT
|s_fmd|	%	0x324
|s_fmd|	%	0x324

  00000			 AREA	 |.pdata|, PDATA
|$T43835| DCD	|$LN14@GetSectorA|
	DCD	0x40003101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetSectorAddresses| PROC

; 315  : {

  00000		 |$LN14@GetSectorA|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M43832|
  00004	e1a09002	 mov         r9, r2
  00008	e1a0a001	 mov         r10, r1
  0000c	e1a08000	 mov         r8, r0

; 317  :     UCHAR *pInfo = NULL;
; 318  :     UCHAR *pBlock;
; 319  :     ULONG region;
; 320  :     FlashRegion *pRegion;
; 321  :     ULONG sectorInRegion;
; 322  :     ULONG sectorInBlock;
; 323  :     ULONG block;
; 324  : 
; 325  : 
; 326  :     for (region = 0; region < s_fmd.regions; region++)

  00010	e59f60a8	 ldr         r6, [pc, #0xA8]
  00014	e3a04000	 mov         r4, #0
  00018	e3a07000	 mov         r7, #0
  0001c	e596011c	 ldr         r0, [r6, #0x11C]
  00020	e3a05000	 mov         r5, #0
  00024	e3500000	 cmp         r0, #0
  00028	0a000020	 beq         |$LN11@GetSectorA|

; 316  :     UCHAR *pSector = NULL;

  0002c	e1a0e006	 mov         lr, r6
  00030		 |$LL6@GetSectorA|

; 327  :         {
; 328  :         // Try next region in sector isn't in range
; 329  :         if ( (sector < s_fmd.firstSector[region]) ||
; 330  :              (sector >= s_fmd.firstSector[region + 1]) )

  00030	e59e32e0	 ldr         r3, [lr, #0x2E0]
  00034	e1580003	 cmp         r8, r3
  00038	3a000002	 bcc         |$LN5@GetSectorA|
  0003c	e59e32e4	 ldr         r3, [lr, #0x2E4]
  00040	e1580003	 cmp         r8, r3
  00044	3a000004	 bcc         |$LN3@GetSectorA|
  00048		 |$LN5@GetSectorA|

; 317  :     UCHAR *pInfo = NULL;
; 318  :     UCHAR *pBlock;
; 319  :     ULONG region;
; 320  :     FlashRegion *pRegion;
; 321  :     ULONG sectorInRegion;
; 322  :     ULONG sectorInBlock;
; 323  :     ULONG block;
; 324  : 
; 325  : 
; 326  :     for (region = 0; region < s_fmd.regions; region++)

  00048	e2855001	 add         r5, r5, #1
  0004c	e1550000	 cmp         r5, r0
  00050	e28ee004	 add         lr, lr, #4
  00054	3afffff5	 bcc         |$LL6@GetSectorA|
  00058	ea000014	 b           |$LN11@GetSectorA|
  0005c		 |$LN3@GetSectorA|

; 331  :             {
; 332  :             continue;
; 333  :             }
; 334  :         pRegion = &s_fmd.region[region];

  0005c	e0652185	 rsb         r2, r5, r5, lsl #3
  00060	e2863e12	 add         r3, r6, #0x12, 28
  00064	e0834102	 add         r4, r3, r2, lsl #2

; 335  : 
; 336  :         // Calculate block, sector position in region and inblock
; 337  :         sectorInRegion = sector - s_fmd.firstSector[region];

  00068	e0863105	 add         r3, r6, r5, lsl #2

; 338  :         block = sectorInRegion / pRegion->dwSectorsPerBlock;
; 339  :         block += pRegion->dwStartPhysBlock;
; 340  :         sectorInBlock = sectorInRegion % pRegion->dwSectorsPerBlock;

  0006c	e59332e0	 ldr         r3, [r3, #0x2E0]
  00070	e5945010	 ldr         r5, [r4, #0x10]
  00074	e0481003	 sub         r1, r8, r3
  00078	e1a00005	 mov         r0, r5
  0007c	eb000000	 bl          __rt_udiv
  00080	e5943004	 ldr         r3, [r4, #4]

; 341  :         // Block address
; 342  :         pBlock = s_fmd.pBase + block * s_fmd.blockSize;

  00084	e596e00c	 ldr         lr, [r6, #0xC]
  00088	e5962010	 ldr         r2, [r6, #0x10]
  0008c	e0833000	 add         r3, r3, r0

; 343  :         // Sector address
; 344  :         pSector = pBlock + sectorInBlock * s_fmd.sectorSize;

  00090	e5960008	 ldr         r0, [r6, #8]
  00094	e0222e93	 mla         r2, r3, lr, r2

; 345  :         // If this is a region with SectorInfo, return the address
; 346  :         // of the start of sector info, which is located immediatly
; 347  :         // after the sector data for all the sectors in the block.
; 348  :         if (pRegion->regionType != XIP)

  00098	e5943000	 ldr         r3, [r4]
  0009c	e0242190	 mla         r4, r0, r1, r2
  000a0	e3530000	 cmp         r3, #0

; 349  :             {
; 350  :             pInfo = pBlock + pRegion->dwSectorsPerBlock * s_fmd.sectorSize;

  000a4	10030095	 mulne       r3, r5, r0
  000a8	10833181	 addne       r3, r3, r1, lsl #3

; 351  :             pInfo += sectorInBlock * sizeof(SectorInfo);

  000ac	10837002	 addne       r7, r3, r2
  000b0		 |$LN11@GetSectorA|

; 352  :             }
; 353  :         break;
; 354  :         }
; 355  : 
; 356  :     *ppSector = pSector;

  000b0	e58a4000	 str         r4, [r10]

; 357  :     *ppSectorInfo = pInfo;

  000b4	e5897000	 str         r7, [r9]

; 358  : }

  000b8	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN15@GetSectorA|
  000c0		 |$LN16@GetSectorA|
  000c0	00000000	 DCD         |s_fmd|
  000c4		 |$M43833|

			 ENDP  ; |GetSectorAddresses|

	EXPORT	|FMD_Deinit|

  00000			 AREA	 |.pdata|, PDATA
|$T43846| DCD	|$LN5@FMD_Deinit|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FMD_Deinit| PROC

; 478  : {

  00000		 |$LN5@FMD_Deinit|
  00000		 |$M43843|

; 479  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 480  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43844|

			 ENDP  ; |FMD_Deinit|

	EXPORT	|FMD_GetInfo|

  00000			 AREA	 |.pdata|, PDATA
|$T43856| DCD	|$LN5@FMD_GetInf|
	DCD	0x40000f00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FMD_GetInfo| PROC

; 490  : {

  00000		 |$LN5@FMD_GetInf|
  00000		 |$M43853|
  00000	e1a01000	 mov         r1, r0

; 491  :     pInfo->flashType           = NOR;
; 492  :     pInfo->dwNumBlocks         = s_fmd.blocks;

  00004	e59f202c	 ldr         r2, [pc, #0x2C]
  00008	e3a03001	 mov         r3, #1
  0000c	e5813000	 str         r3, [r1]
  00010	e5923014	 ldr         r3, [r2, #0x14]

; 493  :     pInfo->dwBytesPerBlock     = s_fmd.blockSize;
; 494  :     pInfo->wDataBytesPerSector = (WORD)s_fmd.sectorSize;
; 495  :     pInfo->wSectorsPerBlock    = (WORD)s_fmd.region[0].dwSectorsPerBlock;
; 496  : 
; 497  :     return TRUE;

  00014	e3a00001	 mov         r0, #1
  00018	e5813004	 str         r3, [r1, #4]
  0001c	e592300c	 ldr         r3, [r2, #0xC]
  00020	e5813008	 str         r3, [r1, #8]
  00024	e5923008	 ldr         r3, [r2, #8]
  00028	e1c130be	 strh        r3, [r1, #0xE]
  0002c	e5923130	 ldr         r3, [r2, #0x130]
  00030	e1c130bc	 strh        r3, [r1, #0xC]

; 498  : }

  00034	e12fff1e	 bx          lr
  00038		 |$LN6@FMD_GetInf|
  00038		 |$LN7@FMD_GetInf|
  00038	00000000	 DCD         |s_fmd|
  0003c		 |$M43854|

			 ENDP  ; |FMD_GetInfo|

	EXPORT	|FMD_GetInfoEx|
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T43872| DCD	|$LN9@FMD_GetInf@2|
	DCD	0x40002401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FMD_GetInfoEx| PROC

; 509  : {

  00000		 |$LN9@FMD_GetInf@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43869|
  00004	e1b04001	 movs        r4, r1
  00008	e1a05000	 mov         r5, r0

; 510  :     BOOL rc = FALSE;

  0000c	e3a00000	 mov         r0, #0

; 511  : 
; 512  :     if (pRegions == NULL) goto cleanUp;

  00010	0a00001b	 beq         |$cleanUp$43574|

; 513  : 
; 514  :     if (pInfo == NULL)

  00014	e3550000	 cmp         r5, #0

; 515  :         {
; 516  :         // Return required buffer size to caller
; 517  :         *pRegions = s_fmd.regions;

  00018	059f306c	 ldreq       r3, [pc, #0x6C]

; 518  :         rc = TRUE;

  0001c	0593311c	 ldreq       r3, [r3, #0x11C]
  00020	05843000	 streq       r3, [r4]
  00024	0a000015	 beq         |$LN6@FMD_GetInf@2|

; 519  :         goto cleanUp;
; 520  :         }
; 521  : 
; 522  :     if (*pRegions < s_fmd.regions)

  00028	e59f605c	 ldr         r6, [pc, #0x5C]
  0002c	e5943000	 ldr         r3, [r4]
  00030	e596211c	 ldr         r2, [r6, #0x11C]
  00034	e1530002	 cmp         r3, r2
  00038	3a000011	 bcc         |$cleanUp$43574|

; 523  :         {
; 524  :         goto cleanUp;
; 525  :         }
; 526  : 
; 527  :     // Copy region table
; 528  :     PREFAST_SUPPRESS(386, "Warning is result of API");
; 529  :     memcpy(pInfo->region, s_fmd.region, s_fmd.regions * sizeof(FlashRegion));

  0003c	e0623182	 rsb         r3, r2, r2, lsl #3
  00040	e1a02103	 mov         r2, r3, lsl #2
  00044	e2861e12	 add         r1, r6, #0x12, 28
  00048	e2850014	 add         r0, r5, #0x14
  0004c	eb000000	 bl          memcpy

; 530  :     *pRegions = s_fmd.regions;

  00050	e596311c	 ldr         r3, [r6, #0x11C]

; 531  : 
; 532  :     pInfo->cbSize               = sizeof(FlashInfoEx);

  00054	e3a02030	 mov         r2, #0x30

; 533  :     pInfo->flashType            = NOR;

  00058	e3a01001	 mov         r1, #1
  0005c	e5843000	 str         r3, [r4]
  00060	e5852000	 str         r2, [r5]
  00064	e5851004	 str         r1, [r5, #4]

; 534  :     pInfo->dwNumBlocks          = s_fmd.blocks;

  00068	e5963014	 ldr         r3, [r6, #0x14]

; 535  :     pInfo->dwDataBytesPerSector = (WORD)s_fmd.sectorSize;
; 536  :     pInfo->dwNumRegions         = s_fmd.regions;
; 537  : 
; 538  :     rc = TRUE;

  0006c	e5853008	 str         r3, [r5, #8]
  00070	e1d630b8	 ldrh        r3, [r6, #8]
  00074	e585300c	 str         r3, [r5, #0xC]
  00078	e596311c	 ldr         r3, [r6, #0x11C]
  0007c	e5853010	 str         r3, [r5, #0x10]
  00080		 |$LN6@FMD_GetInf@2|
  00080	e3a00001	 mov         r0, #1
  00084		 |$cleanUp$43574|

; 539  : 
; 540  : cleanUp:
; 541  :     return rc;
; 542  : }

  00084	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN10@FMD_GetInf@2|
  0008c		 |$LN11@FMD_GetInf@2|
  0008c	00000000	 DCD         |s_fmd|
  00090		 |$M43870|

			 ENDP  ; |FMD_GetInfoEx|

	EXPORT	|FMD_GetPhysSectorAddr|

  00000			 AREA	 |.pdata|, PDATA
|$T43882| DCD	|$LN5@FMD_GetPhy|
	DCD	0x40000a04
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FMD_GetPhysSectorAddr| PROC

; 553  : {

  00000		 |$LN5@FMD_GetPhy|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43879|

; 554  :     VOID *pInfo;
; 555  : 
; 556  :     GetSectorAddresses(sector, &pSector, &pInfo);

  00010	e28d2000	 add         r2, sp, #0
  00014	e28d1010	 add         r1, sp, #0x10
  00018	eb000000	 bl          GetSectorAddresses

; 557  : }

  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M43880|

			 ENDP  ; |FMD_GetPhysSectorAddr|

	EXPORT	|FMD_ReadSector|
	EXPORT	|??_C@_1IK@JOKCAGGI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@BIKPKLCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAs@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T43906| DCD	|$LN22@FMD_ReadSe|
	DCD	0x40004902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IK@JOKCAGGI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@BIKPKLCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAs@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "n", 0x0, "u", 0x0, "m", 0x0, "b", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FMD_ReadSector| PROC

; 570  : {

  00000		 |$LN22@FMD_ReadSe|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M43903|
  00008	e1b07003	 movs        r7, r3
  0000c	e1a04002	 mov         r4, r2
  00010	e1a06001	 mov         r6, r1
  00014	e1a05000	 mov         r5, r0

; 571  :     BOOL rc = FALSE;

  00018	e3a08000	 mov         r8, #0

; 572  :     VOID *pSector;
; 573  :     VOID *pInfo;
; 574  : 
; 575  : 
; 576  :     if (sectors == 0 || ((pBuffer == NULL) &&  (pSectorInfo == NULL)))

  0001c	0a00002f	 beq         |$LN8@FMD_ReadSe|
  00020	e3560000	 cmp         r6, #0
  00024	1a000001	 bne         |$LN16@FMD_ReadSe|
  00028	e3540000	 cmp         r4, #0
  0002c	0a00002b	 beq         |$LN8@FMD_ReadSe|
  00030		 |$LN16@FMD_ReadSe|

; 582  :         goto cleanUp;
; 583  :         }
; 584  : 
; 585  :     while (sectors-- > 0)

  00030	e3570000	 cmp         r7, #0
  00034	0a00001f	 beq         |$LN18@FMD_ReadSe|
  00038	e59f90e0	 ldr         r9, [pc, #0xE0]
  0003c	e3e0a000	 mvn         r10, #0
  00040		 |$LL7@FMD_ReadSe|

; 586  :         {
; 587  :         // Get sector and info location, NULL for sector means error
; 588  :         GetSectorAddresses(sector, &pSector, &pInfo);

  00040	e28d2008	 add         r2, sp, #8
  00044	e28d1004	 add         r1, sp, #4
  00048	e1a00005	 mov         r0, r5
  0004c	e2477001	 sub         r7, r7, #1
  00050	eb000000	 bl          GetSectorAddresses

; 589  :         if (pSector == NULL)

  00054	e59d1004	 ldr         r1, [sp, #4]
  00058	e3510000	 cmp         r1, #0
  0005c	0a000017	 beq         |$LN17@FMD_ReadSe|

; 595  :             }
; 596  : 
; 597  :         // Read sector data
; 598  :         if (pBuffer != NULL)

  00060	e3560000	 cmp         r6, #0
  00064	0a000004	 beq         |$LN4@FMD_ReadSe|
  00068	e5992008	 ldr         r2, [r9, #8]

; 599  :             {
; 600  :             memcpy(pBuffer, pSector, s_fmd.sectorSize);

  0006c	e1a00006	 mov         r0, r6
  00070	eb000000	 bl          memcpy
  00074	e5993008	 ldr         r3, [r9, #8]

; 601  :             pBuffer += s_fmd.sectorSize;

  00078	e0866003	 add         r6, r6, r3
  0007c		 |$LN4@FMD_ReadSe|

; 602  :             }
; 603  : 
; 604  :         // Read sector info
; 605  :         if (pSectorInfo != NULL)

  0007c	e3540000	 cmp         r4, #0
  00080	0a000009	 beq         |$LN3@FMD_ReadSe|

; 606  :             {
; 607  :             if (pInfo != NULL)

  00084	e59d1008	 ldr         r1, [sp, #8]
  00088	e3510000	 cmp         r1, #0
  0008c	0a000003	 beq         |$LN2@FMD_ReadSe|

; 608  :                 {
; 609  :                 memcpy(pSectorInfo, pInfo, sizeof(SectorInfo));

  00090	e3a02008	 mov         r2, #8
  00094	e1a00004	 mov         r0, r4
  00098	eb000000	 bl          memcpy

; 610  :                 }
; 611  :             else

  0009c	ea000001	 b           |$LN1@FMD_ReadSe|
  000a0		 |$LN2@FMD_ReadSe|

; 612  :                 {
; 613  :                 memset(pSectorInfo, 0xff, sizeof(SectorInfo));

  000a0	e584a000	 str         r10, [r4]

; 614  :                 pSectorInfo->dwReserved1 = sector;

  000a4	e8840420	 stmia       r4, {r5, r10}
  000a8		 |$LN1@FMD_ReadSe|

; 615  :                 }
; 616  :             pSectorInfo++;

  000a8	e2844008	 add         r4, r4, #8
  000ac		 |$LN3@FMD_ReadSe|

; 617  :         }
; 618  : 
; 619  :         sector++;

  000ac	e2855001	 add         r5, r5, #1
  000b0	e3570000	 cmp         r7, #0
  000b4	1affffe1	 bne         |$LL7@FMD_ReadSe|
  000b8		 |$LN18@FMD_ReadSe|

; 620  :     }
; 621  : 
; 622  :     rc = TRUE;

  000b8	e3a08001	 mov         r8, #1
  000bc	ea000010	 b           |$cleanUp$43606|
  000c0		 |$LN17@FMD_ReadSe|

; 590  :             {
; 591  :             OALMSG(OAL_ERROR, (L"ERROR: FMD_ReadSector: "
; 592  :                 L"Invalid sector number (%d)\r\n", sector
; 593  :                 ));

  000c0	e59f3050	 ldr         r3, [pc, #0x50]
  000c4	e5933440	 ldr         r3, [r3, #0x440]
  000c8	e3130001	 tst         r3, #1
  000cc	0a00000c	 beq         |$cleanUp$43606|
  000d0	e59f0044	 ldr         r0, [pc, #0x44]
  000d4	e1a01005	 mov         r1, r5
  000d8	eb000000	 bl          NKDbgPrintfW

; 594  :             goto cleanUp;

  000dc	ea000008	 b           |$cleanUp$43606|
  000e0		 |$LN8@FMD_ReadSe|

; 577  :         {
; 578  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_ReadSector: "
; 579  :             L"Invalid parameters (%d, 0x%08x, 0x%08x, %d)\r\n",
; 580  :             sector, pBuffer, pSectorInfo, sectors
; 581  :             ));

  000e0	e59f3030	 ldr         r3, [pc, #0x30]
  000e4	e5933440	 ldr         r3, [r3, #0x440]
  000e8	e3130001	 tst         r3, #1
  000ec	159f0020	 ldrne       r0, [pc, #0x20]
  000f0	11a03004	 movne       r3, r4
  000f4	11a02006	 movne       r2, r6
  000f8	11a01005	 movne       r1, r5
  000fc	158d7000	 strne       r7, [sp]
  00100	1b000000	 blne        NKDbgPrintfW
  00104		 |$cleanUp$43606|

; 623  : 
; 624  : cleanUp:
; 625  :     ASSERT(rc);
; 626  :     return rc;
; 627  : }

  00104	e1a00008	 mov         r0, r8
  00108	e28dd00c	 add         sp, sp, #0xC
  0010c	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00110	e12fff1e	 bx          lr
  00114		 |$LN23@FMD_ReadSe|
  00114		 |$LN24@FMD_ReadSe|
  00114	00000000	 DCD         |??_C@_1IK@JOKCAGGI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp@|
  00118		 |$LN25@FMD_ReadSe|
  00118	00000000	 DCD         |dpCurSettings|
  0011c		 |$LN26@FMD_ReadSe|
  0011c	00000000	 DCD         |??_C@_1GI@BIKPKLCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAR?$AAe?$AAa?$AAd?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAs@|
  00120		 |$LN27@FMD_ReadSe|
  00120	00000000	 DCD         |s_fmd|
  00124		 |$M43904|

			 ENDP  ; |FMD_ReadSector|

	EXPORT	|FMD_WriteSector|

  00000			 AREA	 |.pdata|, PDATA
|$T43920| DCD	|$LN5@FMD_WriteS|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FMD_WriteSector| PROC

; 640  : {

  00000		 |$LN5@FMD_WriteS|
  00000		 |$M43917|

; 641  :     return FALSE;

  00000	e3a00000	 mov         r0, #0

; 642  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43918|

			 ENDP  ; |FMD_WriteSector|

	EXPORT	|FMD_EraseBlock|

  00000			 AREA	 |.pdata|, PDATA
|$T43929| DCD	|$LN5@FMD_EraseB|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FMD_EraseBlock| PROC

; 652  : {

  00000		 |$LN5@FMD_EraseB|
  00000		 |$M43926|

; 653  :     return FALSE;

  00000	e3a00000	 mov         r0, #0

; 654  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43927|

			 ENDP  ; |FMD_EraseBlock|

	EXPORT	|FMD_GetBlockStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T43951| DCD	|$LN24@FMD_GetBlo|
	DCD	0x40004002
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FMD_GetBlockStatus| PROC

; 663  : {

  00000		 |$LN24@FMD_GetBlo|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M43948|
  00008	e1a05000	 mov         r5, r0

; 665  :     ULONG region;
; 666  :     SECTOR_ADDR sector;
; 667  :     SectorInfo sectorInfo;
; 668  : 
; 669  : 
; 670  :     // First check for reserved block
; 671  :     for (region = 0; region < s_fmd.reservedRegions; region++)

  0000c	e59fe0e8	 ldr         lr, [pc, #0xE8]
  00010	e3a04000	 mov         r4, #0
  00014	e3a01000	 mov         r1, #0
  00018	e59e6018	 ldr         r6, [lr, #0x18]
  0001c	e3560000	 cmp         r6, #0
  00020	0a00000b	 beq         |$LN21@FMD_GetBlo|

; 664  :     DWORD status = 0;

  00024	e28e201c	 add         r2, lr, #0x1C
  00028		 |$LL11@FMD_GetBlo|

; 672  :         {
; 673  :         ReservedEntry *pRegion = &s_fmd.reservedRegion[region];
; 674  :         if ( (block >= pRegion->dwStartBlock) &&
; 675  :              (block < (pRegion->dwStartBlock +  pRegion->dwNumBlocks)) )

  00028	e5920008	 ldr         r0, [r2, #8]
  0002c	e1550000	 cmp         r5, r0
  00030	3a000003	 bcc         |$LN10@FMD_GetBlo|
  00034	e592300c	 ldr         r3, [r2, #0xC]
  00038	e0803003	 add         r3, r0, r3
  0003c	e1550003	 cmp         r5, r3
  00040	3a000026	 bcc         |$LN16@FMD_GetBlo|
  00044		 |$LN10@FMD_GetBlo|

; 665  :     ULONG region;
; 666  :     SECTOR_ADDR sector;
; 667  :     SectorInfo sectorInfo;
; 668  : 
; 669  : 
; 670  :     // First check for reserved block
; 671  :     for (region = 0; region < s_fmd.reservedRegions; region++)

  00044	e2811001	 add         r1, r1, #1
  00048	e1510006	 cmp         r1, r6
  0004c	e2822010	 add         r2, r2, #0x10
  00050	3afffff4	 bcc         |$LL11@FMD_GetBlo|
  00054		 |$LN21@FMD_GetBlo|

; 679  :             }
; 680  :         }
; 681  : 
; 682  : 
; 683  :     // Now find block region
; 684  :     for (region = 0; region < s_fmd.regions; region++)

  00054	e59e111c	 ldr         r1, [lr, #0x11C]
  00058	e3a00000	 mov         r0, #0
  0005c	e3510000	 cmp         r1, #0
  00060	0a000020	 beq         |$LN20@FMD_GetBlo|
  00064	e28e2e12	 add         r2, lr, #0x12, 28
  00068		 |$LL7@FMD_GetBlo|

; 685  :         {
; 686  :         FlashRegion *pRegion = &s_fmd.region[region];
; 687  :         if ( (block >= pRegion->dwStartPhysBlock) &&
; 688  :              (block < (pRegion->dwStartPhysBlock +  pRegion->dwNumPhysBlocks)) )

  00068	e5926004	 ldr         r6, [r2, #4]
  0006c	e1550006	 cmp         r5, r6
  00070	3a000003	 bcc         |$LN6@FMD_GetBlo|
  00074	e5923008	 ldr         r3, [r2, #8]
  00078	e0863003	 add         r3, r6, r3
  0007c	e1550003	 cmp         r5, r3
  00080	3a000003	 bcc         |$LN17@FMD_GetBlo|
  00084		 |$LN6@FMD_GetBlo|

; 679  :             }
; 680  :         }
; 681  : 
; 682  : 
; 683  :     // Now find block region
; 684  :     for (region = 0; region < s_fmd.regions; region++)

  00084	e2800001	 add         r0, r0, #1
  00088	e1500001	 cmp         r0, r1
  0008c	e282201c	 add         r2, r2, #0x1C
  00090	3afffff4	 bcc         |$LL7@FMD_GetBlo|
  00094		 |$LN17@FMD_GetBlo|

; 689  :             {
; 690  :             break;
; 691  :             }
; 692  :         }
; 693  : 
; 694  :     // If we don't find it return error
; 695  :     if (region >= s_fmd.regions)

  00094	e1500001	 cmp         r0, r1
  00098	2a000012	 bcs         |$LN20@FMD_GetBlo|

; 698  :         goto cleanUp;
; 699  :         }
; 700  : 
; 701  :     // Get first block sector number
; 702  :     sector = s_fmd.firstSector[region] +
; 703  :         (block - s_fmd.region[region].dwStartPhysBlock) *
; 704  :         s_fmd.region[region].dwSectorsPerBlock;

  0009c	e0603180	 rsb         r3, r0, r0, lsl #3
  000a0	e08e2103	 add         r2, lr, r3, lsl #2
  000a4	e5921124	 ldr         r1, [r2, #0x124]
  000a8	e08e3100	 add         r3, lr, r0, lsl #2
  000ac	e592e130	 ldr         lr, [r2, #0x130]
  000b0	e59302e0	 ldr         r0, [r3, #0x2E0]
  000b4	e0451001	 sub         r1, r5, r1

; 705  : 
; 706  :     // Read sector info
; 707  :     if (!FMD_ReadSector(sector, NULL, &sectorInfo, 1))

  000b8	e3a03001	 mov         r3, #1
  000bc	e0200e91	 mla         r0, r1, lr, r0
  000c0	e28d2000	 add         r2, sp, #0
  000c4	e3a01000	 mov         r1, #0
  000c8	eb000000	 bl          FMD_ReadSector
  000cc	e3500000	 cmp         r0, #0

; 708  :         {
; 709  :         status = BLOCK_STATUS_UNKNOWN;
; 710  :         goto cleanUp;

  000d0	0a000004	 beq         |$LN20@FMD_GetBlo|

; 711  :         }
; 712  : 
; 713  :     // Note that we invert status bit
; 714  :     if ((sectorInfo.bOEMReserved & OEM_BLOCK_RESERVED) == 0)

  000d4	e5dd3004	 ldrb        r3, [sp, #4]
  000d8	e3130001	 tst         r3, #1
  000dc	1a000002	 bne         |$cleanUp$43648|
  000e0		 |$LN16@FMD_GetBlo|

; 676  :             {
; 677  :             status = BLOCK_STATUS_RESERVED;

  000e0	e3a04008	 mov         r4, #8

; 678  :             goto cleanUp;

  000e4	ea000000	 b           |$cleanUp$43648|
  000e8		 |$LN20@FMD_GetBlo|

; 696  :         {
; 697  :         status = BLOCK_STATUS_UNKNOWN;

  000e8	e3a04001	 mov         r4, #1
  000ec		 |$cleanUp$43648|

; 715  :         {
; 716  :         status |= BLOCK_STATUS_RESERVED;
; 717  :         }
; 718  : 
; 719  : cleanUp:
; 720  :     return status;
; 721  : }

  000ec	e1a00004	 mov         r0, r4
  000f0	e28dd008	 add         sp, sp, #8
  000f4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000f8	e12fff1e	 bx          lr
  000fc		 |$LN25@FMD_GetBlo|
  000fc		 |$LN26@FMD_GetBlo|
  000fc	00000000	 DCD         |s_fmd|
  00100		 |$M43949|

			 ENDP  ; |FMD_GetBlockStatus|

	EXPORT	|FMD_SetBlockStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T43962| DCD	|$LN5@FMD_SetBlo|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FMD_SetBlockStatus| PROC

; 729  : {

  00000		 |$LN5@FMD_SetBlo|
  00000		 |$M43959|

; 730  :     return FALSE;

  00000	e3a00000	 mov         r0, #0

; 731  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43960|

			 ENDP  ; |FMD_SetBlockStatus|

	EXPORT	|FMD_PowerUp|

  00000			 AREA	 |.pdata|, PDATA
|$T43969| DCD	|$LN5@FMD_PowerU|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FMD_PowerUp| PROC

; 741  : {

  00000		 |$LN5@FMD_PowerU|
  00000		 |$M43966|

; 742  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M43967|

			 ENDP  ; |FMD_PowerUp|

	EXPORT	|FMD_PowerDown|

  00000			 AREA	 |.pdata|, PDATA
|$T43976| DCD	|$LN5@FMD_PowerD|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FMD_PowerDown| PROC

; 752  : {

  00000		 |$LN5@FMD_PowerD|
  00000		 |$M43973|

; 753  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M43974|

			 ENDP  ; |FMD_PowerDown|

	IMPORT	|memcmp|

  00000			 AREA	 |.pdata|, PDATA
|$T43990| DCD	|$LN9@VerifyBloc|
	DCD	0x40001701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |VerifyBlockSignature| PROC

; 194  : {

  00000		 |$LN9@VerifyBloc|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43987|
  00004	e1a04000	 mov         r4, r0

; 195  :     int rc;
; 196  :     UCHAR *pBlock;
; 197  : 
; 198  :     // There is no block signature on reserved blocks
; 199  :     if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_RESERVED) != 0)

  00008	eb000000	 bl          FMD_GetBlockStatus
  0000c	e3100008	 tst         r0, #8

; 200  :         {
; 201  :         rc = 0;
; 202  :         goto cleanUp;

  00010	1a00000c	 bne         |$LN6@VerifyBloc|

; 203  :         }
; 204  : 
; 205  :     // Get block end address
; 206  :     pBlock = s_fmd.pBase + (block + 1) * s_fmd.blockSize;
; 207  : 
; 208  :     // Compare signature
; 209  :     rc = memcmp(pBlock - sizeof(s_blockSign), s_blockSign, sizeof(s_blockSign));

  00014	e59f303c	 ldr         r3, [pc, #0x3C]
  00018	e284e001	 add         lr, r4, #1
  0001c	e59f1030	 ldr         r1, [pc, #0x30]
  00020	e593000c	 ldr         r0, [r3, #0xC]
  00024	e5933010	 ldr         r3, [r3, #0x10]
  00028	e3a02020	 mov         r2, #0x20
  0002c	e023309e	 mla         r3, lr, r0, r3
  00030	e2430020	 sub         r0, r3, #0x20
  00034	eb000000	 bl          memcmp
  00038	e3500000	 cmp         r0, #0

; 210  : 
; 211  : cleanUp:
; 212  :     return (rc == 0);

  0003c	13a00000	 movne       r0, #0
  00040		 |$cleanUp$43452|

; 213  : }

  00040	18bd4010	 ldmneia     sp!, {r4, lr}
  00044	112fff1e	 bxne        lr
  00048		 |$LN6@VerifyBloc|

; 210  : 
; 211  : cleanUp:
; 212  :     return (rc == 0);

  00048	e3a00001	 mov         r0, #1

; 213  : }

  0004c	e8bd4010	 ldmia       sp!, {r4, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN10@VerifyBloc|
  00054		 |$LN11@VerifyBloc|
  00054	00000000	 DCD         |s_blockSign|
  00058		 |$LN12@VerifyBloc|
  00058	00000000	 DCD         |s_fmd|
  0005c		 |$M43988|

			 ENDP  ; |VerifyBlockSignature|

	EXPORT	|??_C@_1JI@COJGLHJL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@JOBMFFAJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@OGLDKI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44041| DCD	|$LN43@BuildLayou|
	DCD	0x40007c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@COJGLHJL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "!", 0x0, "B", 0x0, "u", 0x0, "i"
	DCB	0x0, "l", 0x0, "d", 0x0, "L", 0x0, "a", 0x0, "y", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, "i", 0x0, "f", 0x0, "y", 0x0, " ", 0x0, "b", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "s", 0x0, "i"
	DCB	0x0, "g", 0x0, "n", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "e", 0x0, " ", 0x0, "(", 0x0, "b", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@JOBMFFAJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "!", 0x0, "B", 0x0, "u", 0x0, "i"
	DCB	0x0, "l", 0x0, "d", 0x0, "L", 0x0, "a", 0x0, "y", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, ":", 0x0, " ", 0x0, "T", 0x0, "o", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "y", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "s", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@OGLDKI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "!", 0x0, "B", 0x0, "u", 0x0, "i"
	DCB	0x0, "l", 0x0, "d", 0x0, "L", 0x0, "a", 0x0, "y", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, ":", 0x0, " ", 0x0, "T", 0x0, "o", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "y", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "e", 0x0, "r", 0x0, "v", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BuildLayoutInfo| PROC

; 221  : {

  00000		 |$LN43@BuildLayou|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M44038|
  00004	e1a06000	 mov         r6, r0

; 222  :     BOOL rc = FALSE;
; 223  :     FlashLayoutSector *pSector = (FlashLayoutSector*)pLayoutSector;
; 224  :     UCHAR *pInfo = (UCHAR*)&pSector[1];
; 225  :     FlashRegion *pRegion;
; 226  :     ULONG sector;
; 227  :     ULONG region;
; 228  : 
; 229  :     s_fmd.reservedRegions = pSector->cbReservedEntries/sizeof(ReservedEntry);

  00008	e5963008	 ldr         r3, [r6, #8]
  0000c	e59f41d8	 ldr         r4, [pc, #0x1D8]
  00010	e3a07000	 mov         r7, #0
  00014	e1a02223	 mov         r2, r3, lsr #4
  00018	e5842018	 str         r2, [r4, #0x18]

; 230  :     if (s_fmd.reservedRegions > dimof(s_fmd.reservedRegion))

  0001c	e3520010	 cmp         r2, #0x10
  00020	e2868010	 add         r8, r6, #0x10
  00024	9a000007	 bls         |$LN15@BuildLayou|

; 231  :         {
; 232  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_Init!BuildLayoutInfo: "
; 233  :             L"To many reserved regions (%d)\r\n", s_fmd.reservedRegions
; 234  :             ));

  00028	e59f31ac	 ldr         r3, [pc, #0x1AC]
  0002c	e5933440	 ldr         r3, [r3, #0x440]
  00030	e3130001	 tst         r3, #1
  00034	0a000063	 beq         |$cleanUp$43469|
  00038	e59f01a8	 ldr         r0, [pc, #0x1A8]
  0003c	e1a01002	 mov         r1, r2
  00040	eb000000	 bl          NKDbgPrintfW

; 235  :         goto cleanUp;

  00044	ea00005f	 b           |$cleanUp$43469|
  00048		 |$LN15@BuildLayou|

; 236  :         }
; 237  :     if (s_fmd.reservedRegions > 0)

  00048	e3520000	 cmp         r2, #0

; 238  :         {
; 239  :         memcpy(
; 240  :             s_fmd.reservedRegion, pInfo,
; 241  :             s_fmd.reservedRegions * sizeof(ReservedEntry)
; 242  :             );

  0004c	11a02202	 movne       r2, r2, lsl #4
  00050	11a01008	 movne       r1, r8
  00054	1284001c	 addne       r0, r4, #0x1C
  00058	1b000000	 blne        memcpy

; 243  :         }
; 244  : 
; 245  :     s_fmd.regions = pSector->cbRegionEntries/sizeof(FlashRegion);

  0005c	e596e00c	 ldr         lr, [r6, #0xC]
  00060	e59f317c	 ldr         r3, [pc, #0x17C]
  00064	e082039e	 umull       r0, r2, lr, r3
  00068	e04e3002	 sub         r3, lr, r2
  0006c	e08230a3	 add         r3, r2, r3, lsr #1
  00070	e1a05223	 mov         r5, r3, lsr #4
  00074	e584511c	 str         r5, [r4, #0x11C]

; 246  :     if (s_fmd.regions > dimof(s_fmd.region))

  00078	e3550010	 cmp         r5, #0x10
  0007c	9a000007	 bls         |$LN13@BuildLayou|
  00080		 |$LN40@BuildLayou|

; 247  :         {
; 248  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_Init!BuildLayoutInfo: "
; 249  :             L"To many regions (%d)\r\n", s_fmd.regions
; 250  :             ));

  00080	e59f3154	 ldr         r3, [pc, #0x154]
  00084	e5933440	 ldr         r3, [r3, #0x440]
  00088	e3130001	 tst         r3, #1
  0008c	0a00004d	 beq         |$cleanUp$43469|
  00090	e59f0148	 ldr         r0, [pc, #0x148]
  00094	e1a01005	 mov         r1, r5
  00098	eb000000	 bl          NKDbgPrintfW
  0009c	ea000049	 b           |$cleanUp$43469|
  000a0		 |$LN13@BuildLayou|

; 251  :         goto cleanUp;
; 252  :         }
; 253  : 
; 254  :     if (s_fmd.regions > 0)

  000a0	e3550000	 cmp         r5, #0
  000a4	0a000006	 beq         |$LN12@BuildLayou|

; 255  :        {
; 256  :         memcpy(
; 257  :             s_fmd.region, pInfo + pSector->cbReservedEntries,
; 258  :             s_fmd.regions * sizeof(FlashRegion)
; 259  :             );

  000a8	e5961008	 ldr         r1, [r6, #8]
  000ac	e0653185	 rsb         r3, r5, r5, lsl #3
  000b0	e1a02103	 mov         r2, r3, lsl #2
  000b4	e0811008	 add         r1, r1, r8
  000b8	e2840e12	 add         r0, r4, #0x12, 28
  000bc	eb000000	 bl          memcpy
  000c0	e594511c	 ldr         r5, [r4, #0x11C]
  000c4		 |$LN12@BuildLayou|

; 260  :         }
; 261  : 
; 262  :     // Build region first sector table
; 263  :     if ((s_fmd.regions + 1) > dimof(s_fmd.firstSector))

  000c4	e2853001	 add         r3, r5, #1
  000c8	e3530011	 cmp         r3, #0x11

; 264  :         {
; 265  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_Init!BuildLayoutInfo: "
; 266  :             L"To many regions (%d)\r\n", s_fmd.regions
; 267  :             ));
; 268  :         goto cleanUp;

  000cc	8affffeb	 bhi         |$LN40@BuildLayou|

; 272  :     sector = pRegion->dwStartPhysBlock * pRegion->dwSectorsPerBlock;

  000d0	e5942124	 ldr         r2, [r4, #0x124]
  000d4	e5943130	 ldr         r3, [r4, #0x130]
  000d8	e2846e12	 add         r6, r4, #0x12, 28

; 273  :     for (region = 0; region < s_fmd.regions; region++)

  000dc	e3a00000	 mov         r0, #0
  000e0	e00e0392	 mul         lr, r2, r3
  000e4	e3550000	 cmp         r5, #0
  000e8	0a00000a	 beq         |$LN8@BuildLayou|

; 269  :         }
; 270  :     
; 271  :     pRegion = &s_fmd.region[0];

  000ec	e1a05004	 mov         r5, r4
  000f0		 |$LL10@BuildLayou|

; 274  :         {
; 275  :         s_fmd.firstSector[region] = sector;

  000f0	e585e2e0	 str         lr, [r5, #0x2E0]

; 276  :         sector += pRegion->dwNumPhysBlocks * pRegion->dwSectorsPerBlock;

  000f4	e5961010	 ldr         r1, [r6, #0x10]
  000f8	e5963008	 ldr         r3, [r6, #8]
  000fc	e594211c	 ldr         r2, [r4, #0x11C]
  00100	e2800001	 add         r0, r0, #1
  00104	e02ee391	 mla         lr, r1, r3, lr
  00108	e1500002	 cmp         r0, r2

; 277  :         pRegion++;

  0010c	e286601c	 add         r6, r6, #0x1C
  00110	e2855004	 add         r5, r5, #4
  00114	3afffff5	 bcc         |$LL10@BuildLayou|
  00118		 |$LN8@BuildLayou|

; 278  :         }
; 279  :     s_fmd.firstSector[region] = sector;

  00118	e0843100	 add         r3, r4, r0, lsl #2
  0011c	e583e2e0	 str         lr, [r3, #0x2E0]

; 280  : 
; 281  :     // Verify block signatures
; 282  :     pRegion = &s_fmd.region[0];
; 283  :     for (region = 0; region < s_fmd.regions; region++, pRegion++)

  00120	e594211c	 ldr         r2, [r4, #0x11C]
  00124	e2846e12	 add         r6, r4, #0x12, 28
  00128	e3a07000	 mov         r7, #0
  0012c	e3520000	 cmp         r2, #0
  00130	0a000023	 beq         |$LN5@BuildLayou|
  00134	e59fa0a0	 ldr         r10, [pc, #0xA0]
  00138		 |$LL7@BuildLayou|

; 284  :         {
; 285  :         ULONG block, count;
; 286  : 
; 287  :         if (pRegion->regionType == XIP) continue;

  00138	e5963000	 ldr         r3, [r6]
  0013c	e3530000	 cmp         r3, #0
  00140	0a00001b	 beq         |$LN6@BuildLayou|

; 290  :         count = pRegion->dwNumPhysBlocks;

  00144	e5963008	 ldr         r3, [r6, #8]
  00148	e5965004	 ldr         r5, [r6, #4]
  0014c	e1b08003	 movs        r8, r3

; 291  :         while (count-- > 0)

  00150	0a000017	 beq         |$LN6@BuildLayou|

; 288  : 
; 289  :         block = pRegion->dwStartPhysBlock;

  00154	e2859001	 add         r9, r5, #1
  00158		 |$LL3@BuildLayou|

; 292  :             {
; 293  :             if (!VerifyBlockSignature(block))

  00158	e1a00005	 mov         r0, r5
  0015c	e2488001	 sub         r8, r8, #1
  00160	eb000000	 bl          FMD_GetBlockStatus
  00164	e3100008	 tst         r0, #8
  00168	1a00000c	 bne         |$LN24@BuildLayou|
  0016c	e594000c	 ldr         r0, [r4, #0xC]
  00170	e5943010	 ldr         r3, [r4, #0x10]
  00174	e59f105c	 ldr         r1, [pc, #0x5C]
  00178	e3a02020	 mov         r2, #0x20
  0017c	e0233099	 mla         r3, r9, r0, r3
  00180	e2430020	 sub         r0, r3, #0x20
  00184	eb000000	 bl          memcmp
  00188	e3500000	 cmp         r0, #0

; 294  :                 {
; 295  :                 OALMSG(OAL_ERROR, (L"ERROR: FMD_Init!BuildLayoutInfo: "
; 296  :                     L"Failed verify block signature (block %d)\r\n", block
; 297  :                     ));

  0018c	159a3440	 ldrne       r3, [r10, #0x440]
  00190		 |$cleanUp$44012|
  00190	13130001	 tstne       r3, #1
  00194	159f0038	 ldrne       r0, [pc, #0x38]
  00198	11a01005	 movne       r1, r5
  0019c	1b000000	 blne        NKDbgPrintfW
  001a0		 |$LN24@BuildLayou|

; 298  :                 //goto cleanUp;
; 299  :                 }
; 300  :             block++;

  001a0	e2855001	 add         r5, r5, #1
  001a4	e2899001	 add         r9, r9, #1
  001a8	e3580000	 cmp         r8, #0
  001ac	1affffe9	 bne         |$LL3@BuildLayou|

; 291  :         while (count-- > 0)

  001b0	e594211c	 ldr         r2, [r4, #0x11C]
  001b4		 |$LN6@BuildLayou|

; 280  : 
; 281  :     // Verify block signatures
; 282  :     pRegion = &s_fmd.region[0];
; 283  :     for (region = 0; region < s_fmd.regions; region++, pRegion++)

  001b4	e2877001	 add         r7, r7, #1
  001b8	e1570002	 cmp         r7, r2
  001bc	e286601c	 add         r6, r6, #0x1C
  001c0	3affffdc	 bcc         |$LL7@BuildLayou|
  001c4		 |$LN5@BuildLayou|

; 301  :             }
; 302  :         }
; 303  : 
; 304  :     rc = TRUE;

  001c4	e3a07001	 mov         r7, #1
  001c8		 |$cleanUp$43469|

; 305  : 
; 306  : cleanUp:
; 307  :     return rc;
; 308  : }

  001c8	e1a00007	 mov         r0, r7
  001cc	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  001d0	e12fff1e	 bx          lr
  001d4		 |$LN44@BuildLayou|
  001d4		 |$LN45@BuildLayou|
  001d4	00000000	 DCD         |??_C@_1JI@COJGLHJL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@|
  001d8		 |$LN46@BuildLayou|
  001d8	00000000	 DCD         |s_blockSign|
  001dc		 |$LN47@BuildLayou|
  001dc	00000000	 DCD         |dpCurSettings|
  001e0		 |$LN48@BuildLayou|
  001e0	00000000	 DCD         |??_C@_1HA@JOBMFFAJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@|
  001e4		 |$LN49@BuildLayou|
  001e4	24924925	 DCD         0x24924925
  001e8		 |$LN50@BuildLayou|
  001e8	00000000	 DCD         |??_C@_1IC@OGLDKI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CB?$AAB?$AAu?$AAi?$AAl?$AAd?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt?$AAI?$AAn?$AAf?$AAo?$AA?3@|
  001ec		 |$LN51@BuildLayou|
  001ec	00000000	 DCD         |s_fmd|
  001f0		 |$M44039|

			 ENDP  ; |BuildLayoutInfo|

	EXPORT	|FMD_Init|
	EXPORT	|??_C@_1GE@OBLKJMLF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAb?$AAu?$AAi?$AAl?$AAd?$AA?5?$AAf?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@DCCBGMCI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAf?$AAl?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_08GODGKFDB@MSFLSH50?$AA@| [ DATA ] ; `string'
	IMPORT	|OALPAtoVA|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T44083| DCD	|$LN34@FMD_Init|
	DCD	0x40005d02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@OBLKJMLF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAb?$AAu?$AAi?$AAl?$AAd?$AA?5?$AAf?$AAl@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "i", 0x0, "l", 0x0, "d", 0x0, " ", 0x0, "f"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@DCCBGMCI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAf?$AAl?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "f"
	DCB	0x0, "i", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "l", 0x0, "a"
	DCB	0x0, "y", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "s"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08GODGKFDB@MSFLSH50?$AA@| DCB "MSFLSH50", 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FMD_Init| PROC

; 368  : {

  00000		 |$LN34@FMD_Init|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M44080|
  00008	e1a04001	 mov         r4, r1

; 369  :     HANDLE hFMD = NULL;
; 370  :     UCHAR *pLayoutSector;
; 371  :     UCHAR *pAddress;
; 372  :     ULONG sectors;
; 373  : 
; 374  : 
; 375  :     memset(&s_fmd, 0, sizeof(s_fmd));

  0000c	e59f615c	 ldr         r6, [pc, #0x15C]
  00010	e3a02fc9	 mov         r2, #0xC9, 30
  00014	e3a01000	 mov         r1, #0
  00018	e1a00006	 mov         r0, r6
  0001c	e3a07000	 mov         r7, #0
  00020	eb000000	 bl          memset

; 376  : 
; 377  :     // This must not be NULL
; 378  :     if (pRegIn == NULL) goto cleanUp;

  00024	e3540000	 cmp         r4, #0
  00028	0a000048	 beq         |$cleanUp$43534|

; 379  :     
; 380  :     // Map NAND registers
; 381  :     s_fmd.memBase = pRegIn->MemBase.Reg[0];

  0002c	e5940310	 ldr         r0, [r4, #0x310]

; 382  :     s_fmd.memLen = pRegIn->MemLen.Reg[0];
; 383  : 
; 384  :     // Map base address    
; 385  :     s_fmd.pBase = OALPAtoUA(s_fmd.memBase);

  00030	e3a01000	 mov         r1, #0
  00034	e5860000	 str         r0, [r6]
  00038	e594332c	 ldr         r3, [r4, #0x32C]
  0003c	e5863004	 str         r3, [r6, #4]
  00040	eb000000	 bl          OALPAtoVA
  00044	e5860010	 str         r0, [r6, #0x10]

; 386  : 
; 387  :     // Find block size
; 388  :     s_fmd.blockSize = FindBlockSize(s_fmd.pBase, s_fmd.memLen);

  00048	e5961004	 ldr         r1, [r6, #4]
  0004c	eb000000	 bl          FindBlockSize
  00050	e1a0b000	 mov         r11, r0
  00054	e586b00c	 str         r11, [r6, #0xC]

; 389  : 
; 390  :     // Calculate number of blocks on device
; 391  :     s_fmd.blocks = s_fmd.memLen / s_fmd.blockSize;

  00058	e5964004	 ldr         r4, [r6, #4]
  0005c	e1a01004	 mov         r1, r4
  00060	eb000000	 bl          __rt_udiv

; 392  : 
; 393  :     //----------------------------------------------------------------------
; 394  :     //  Get volume/device layout
; 395  :     //----------------------------------------------------------------------
; 396  : 
; 397  :     s_fmd.reservedRegions = 0;

  00064	e3a03000	 mov         r3, #0
  00068	e5860014	 str         r0, [r6, #0x14]
  0006c	e5863018	 str         r3, [r6, #0x18]

; 398  :     s_fmd.regions = 0;

  00070	e3a03000	 mov         r3, #0
  00074	e586311c	 str         r3, [r6, #0x11C]

; 399  :     pLayoutSector = NULL;
; 400  : 
; 401  :     // Set sector size to 512 bytes, we can modify it later
; 402  :     s_fmd.sectorSize = 512;

  00078	e3a03c02	 mov         r3, #2, 24

; 403  : 
; 404  :     // Now we have to try find boot sector & flash partition table
; 405  :     pAddress = s_fmd.pBase;
; 406  :     sectors = s_fmd.memLen / s_fmd.sectorSize;

  0007c	e59f90e8	 ldr         r9, [pc, #0xE8]
  00080	e5863008	 str         r3, [r6, #8]
  00084	e5965010	 ldr         r5, [r6, #0x10]
  00088	e3a0a000	 mov         r10, #0
  0008c	e1b084a4	 movs        r8, r4, lsr #9

; 407  : 
; 408  :     while (sectors-- > 0)

  00090	0a00001c	 beq         |$LN29@FMD_Init|
  00094	e3a03caa	 mov         r3, #0xAA, 24
  00098	e3832055	 orr         r2, r3, #0x55
  0009c	e58d2000	 str         r2, [sp]
  000a0		 |$LL11@FMD_Init|

; 409  :         {
; 410  :         UINT32 sectorSize;
; 411  :         
; 412  :         // Check for boot sector
; 413  :         if (!IS_VALID_BOOTSEC(pAddress))

  000a0	e2853c01	 add         r3, r5, #1, 24
  000a4	e1d33fbe	 ldrh        r3, [r3, #0xFE]
  000a8	e2488001	 sub         r8, r8, #1
  000ac	e1530002	 cmp         r3, r2
  000b0	1a000011	 bne         |$LN8@FMD_Init|
  000b4	e5d53000	 ldrb        r3, [r5]
  000b8	e35300eb	 cmp         r3, #0xEB
  000bc	0a000001	 beq         |$LN9@FMD_Init|
  000c0	e35300e9	 cmp         r3, #0xE9
  000c4	1a00000c	 bne         |$LN8@FMD_Init|
  000c8		 |$LN9@FMD_Init|

; 417  :             continue;
; 418  :             }
; 419  : 
; 420  :         // Look for flash layout
; 421  :         sectorSize = 512;

  000c8	e3a04c02	 mov         r4, #2, 24

; 422  :         while (sectorSize <= s_fmd.blockSize)

  000cc	e35b0c02	 cmp         r11, #2, 24
  000d0	3a000009	 bcc         |$LN8@FMD_Init|
  000d4		 |$LL7@FMD_Init|

; 423  :             {
; 424  :             if (IS_VALID_FLS(pAddress + sectorSize))

  000d4	e59f108c	 ldr         r1, [pc, #0x8C]
  000d8	e3a02008	 mov         r2, #8
  000dc	e0840005	 add         r0, r4, r5
  000e0	eb000000	 bl          memcmp
  000e4	e3500000	 cmp         r0, #0
  000e8	0a000014	 beq         |$LN24@FMD_Init|

; 427  :                 break;
; 428  :                 }
; 429  :             // Multiply by two
; 430  :             sectorSize <<= 1;

  000ec	e1a04084	 mov         r4, r4, lsl #1
  000f0	e154000b	 cmp         r4, r11
  000f4	9afffff6	 bls         |$LL7@FMD_Init|

; 407  : 
; 408  :     while (sectors-- > 0)

  000f8	e59d2000	 ldr         r2, [sp]
  000fc		 |$LN8@FMD_Init|

; 414  :             {
; 415  :             // Move to next sector
; 416  :             pAddress += s_fmd.sectorSize;

  000fc	e2855c02	 add         r5, r5, #2, 24
  00100	e3580000	 cmp         r8, #0
  00104	1affffe5	 bne         |$LL11@FMD_Init|
  00108		 |$LN29@FMD_Init|

; 447  :         {
; 448  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_Init: "
; 449  :             L"Failed find flash layout sector\r\n"
; 450  :             ));

  00108	e5993440	 ldr         r3, [r9, #0x440]
  0010c	e3130001	 tst         r3, #1
  00110	159f004c	 ldrne       r0, [pc, #0x4C]
  00114	1b000000	 blne        NKDbgPrintfW
  00118		 |$LN15@FMD_Init|

; 451  :         }
; 452  :     
; 453  :     // Read flash layout sector and make local copy...
; 454  :     if (!BuildLayoutInfo(pLayoutSector))

  00118	e1a0000a	 mov         r0, r10
  0011c	eb000000	 bl          BuildLayoutInfo
  00120	e3500000	 cmp         r0, #0
  00124	1a000008	 bne         |$LN2@FMD_Init|

; 455  :         {
; 456  :         OALMSG(OAL_ERROR, (L"ERROR: FMD_Init: "
; 457  :             L"Failed build flash layout info\r\n"
; 458  :             ));

  00128	e5993440	 ldr         r3, [r9, #0x440]
  0012c	e3130001	 tst         r3, #1
  00130	0a000006	 beq         |$cleanUp$43534|
  00134	e59f0024	 ldr         r0, [pc, #0x24]
  00138	eb000000	 bl          NKDbgPrintfW

; 459  :         goto cleanUp;

  0013c	ea000003	 b           |$cleanUp$43534|
  00140		 |$LN24@FMD_Init|

; 425  :                 {
; 426  :                 pLayoutSector = pAddress;

  00140	e1a0a005	 mov         r10, r5

; 431  :             }
; 432  : 
; 433  :         // Did we find flash layout sector?
; 434  :         if (pLayoutSector != NULL)
; 435  :             {
; 436  :             // Update sector size
; 437  :             s_fmd.sectorSize = sectorSize;

  00144	e5864008	 str         r4, [r6, #8]

; 438  :             break;
; 439  :             }
; 440  :         
; 441  :         // Move to next sector and check for region table
; 442  :         pAddress += s_fmd.sectorSize;
; 443  : 
; 444  :         }
; 445  : 
; 446  :     if (pLayoutSector == 0)

  00148	eafffff2	 b           |$LN15@FMD_Init|
  0014c		 |$LN2@FMD_Init|

; 460  :         }
; 461  : 
; 462  :     // Done
; 463  :     hFMD = &s_fmd;

  0014c	e1a07006	 mov         r7, r6
  00150		 |$cleanUp$43534|

; 464  : 
; 465  : cleanUp:
; 466  :     if (hFMD == NULL) FMD_Deinit(&s_fmd);
; 467  :     return hFMD;
; 468  : }

  00150	e1a00007	 mov         r0, r7
  00154	e28dd004	 add         sp, sp, #4
  00158	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0015c	e12fff1e	 bx          lr
  00160		 |$LN35@FMD_Init|
  00160		 |$LN36@FMD_Init|
  00160	00000000	 DCD         |??_C@_1GE@OBLKJMLF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAb?$AAu?$AAi?$AAl?$AAd?$AA?5?$AAf?$AAl@|
  00164		 |$LN37@FMD_Init|
  00164	00000000	 DCD         |??_C@_1GG@DCCBGMCI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5?$AAf?$AAl?$AAa@|
  00168		 |$LN38@FMD_Init|
  00168	00000000	 DCD         |??_C@_08GODGKFDB@MSFLSH50?$AA@|
  0016c		 |$LN39@FMD_Init|
  0016c	00000000	 DCD         |dpCurSettings|
  00170		 |$LN40@FMD_Init|
  00170	00000000	 DCD         |s_fmd|
  00174		 |$M44081|

			 ENDP  ; |FMD_Init|

	EXPORT	|FMD_OEMIoControl|

  00000			 AREA	 |.pdata|, PDATA
|$T44107| DCD	|$LN25@FMD_OEMIoC|
	DCD	0x40007a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FMD_OEMIoControl| PROC

; 766  : {

  00000		 |$LN25@FMD_OEMIoC|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M44104|
  00008	e1a0e003	 mov         lr, r3
  0000c	e58de000	 str         lr, [sp]
  00010	e3a03a72	 mov         r3, #0x72, 20

; 767  :     BOOL rc = TRUE;
; 768  : 
; 769  :     switch(code)

  00014	e2432074	 sub         r2, r3, #0x74
  00018	e1500002	 cmp         r0, r2
  0001c	0a00003b	 beq         |$LN17@FMD_OEMIoC|
  00020	e3a03a72	 mov         r3, #0x72, 20
  00024	e2432064	 sub         r2, r3, #0x64
  00028	e1500002	 cmp         r0, r2
  0002c	0a000025	 beq         |$LN13@FMD_OEMIoC|
  00030	e3a03a72	 mov         r3, #0x72, 20
  00034	e2432054	 sub         r2, r3, #0x54
  00038	e1500002	 cmp         r0, r2
  0003c	0a000013	 beq         |$LN8@FMD_OEMIoC|
  00040	e3a03a71	 mov         r3, #0x71, 20
  00044	e3832efb	 orr         r2, r3, #0xFB, 28
  00048	e1500002	 cmp         r0, r2

; 838  :             }
; 839  :             break;
; 840  : 
; 841  :         default:
; 842  :             rc = FALSE;
; 843  :             break;

  0004c	1a000053	 bne         |$LN14@FMD_OEMIoC|

; 824  :             break;
; 825  : 
; 826  :         case IOCTL_FMD_GET_INFO:
; 827  :             {
; 828  :             FMDInfo *pInfo = (FMDInfo*)pOutBuffer;
; 829  :             if ((pOutBuffer == NULL) || (outSize < sizeof(FMDInfo)))

  00050	e35e0000	 cmp         lr, #0
  00054	0a000051	 beq         |$LN14@FMD_OEMIoC|
  00058	e59d3028	 ldr         r3, [sp, #0x28]
  0005c	e3530014	 cmp         r3, #0x14
  00060	3a00004e	 bcc         |$LN14@FMD_OEMIoC|

; 830  :                 {
; 831  :                 rc = FALSE;
; 832  :                 break;
; 833  :                 }
; 834  :             pInfo->flashType = NOR;
; 835  :             pInfo->dwBaseAddress = s_fmd.memBase;

  00064	e59f2178	 ldr         r2, [pc, #0x178]
  00068	e3a03001	 mov         r3, #1
  0006c	e58e3004	 str         r3, [lr, #4]
  00070	e5923000	 ldr         r3, [r2]
  00074	e3a00001	 mov         r0, #1
  00078	e58e3008	 str         r3, [lr, #8]

; 836  :             pInfo->dwNumRegions = s_fmd.regions;

  0007c	e592311c	 ldr         r3, [r2, #0x11C]
  00080	e58e300c	 str         r3, [lr, #0xC]

; 837  :             pInfo->dwNumReserved = s_fmd.reservedRegions;

  00084	e5923018	 ldr         r3, [r2, #0x18]
  00088	e58e3010	 str         r3, [lr, #0x10]
  0008c	ea000044	 b           |$LN18@FMD_OEMIoC|
  00090		 |$LN8@FMD_OEMIoC|

; 813  :             }
; 814  :             break;
; 815  : 
; 816  :         case IOCTL_FMD_GET_RAW_BLOCK_SIZE:
; 817  :             if (pOutSize != NULL) *pOutSize = sizeof(DWORD);

  00090	e59d302c	 ldr         r3, [sp, #0x2C]
  00094	e3530000	 cmp         r3, #0
  00098	13a02004	 movne       r2, #4
  0009c	15832000	 strne       r2, [r3]

; 818  :             if ((pOutBuffer == NULL) || (outSize < sizeof(DWORD)))

  000a0	e35e0000	 cmp         lr, #0
  000a4	0a00003d	 beq         |$LN14@FMD_OEMIoC|
  000a8	e59d3028	 ldr         r3, [sp, #0x28]
  000ac	e3530004	 cmp         r3, #4
  000b0	3a00003a	 bcc         |$LN14@FMD_OEMIoC|

; 819  :                 {
; 820  :                 rc = FALSE;
; 821  :                 break;
; 822  :                 }
; 823  :             *((DWORD*)pOutBuffer) = s_fmd.blockSize;

  000b4	e59f3128	 ldr         r3, [pc, #0x128]
  000b8	e3a00001	 mov         r0, #1
  000bc	e593300c	 ldr         r3, [r3, #0xC]
  000c0	e58e3000	 str         r3, [lr]
  000c4	ea000036	 b           |$LN18@FMD_OEMIoC|
  000c8		 |$LN13@FMD_OEMIoC|

; 796  : 
; 797  :         case IOCTL_FMD_GET_RESERVED_TABLE:
; 798  :             {
; 799  :             ULONG regions = s_fmd.reservedRegions;

  000c8	e59f0114	 ldr         r0, [pc, #0x114]

; 800  :             ULONG size;
; 801  :             if (regions > dimof(s_fmd.reservedRegion))
; 802  :                 {
; 803  :                 regions = dimof(s_fmd.reservedRegion);
; 804  :                 }
; 805  :             size = regions * sizeof(ReservedEntry);
; 806  :             if (pOutSize != NULL) *pOutSize = size;

  000cc	e59d102c	 ldr         r1, [sp, #0x2C]
  000d0	e5903018	 ldr         r3, [r0, #0x18]
  000d4	e3530010	 cmp         r3, #0x10
  000d8	83a03010	 movhi       r3, #0x10
  000dc	e1a02203	 mov         r2, r3, lsl #4
  000e0	e3510000	 cmp         r1, #0
  000e4	15812000	 strne       r2, [r1]

; 807  :             if ((pOutBuffer == NULL) || (outSize < size))

  000e8	e35e0000	 cmp         lr, #0
  000ec	0a00002b	 beq         |$LN14@FMD_OEMIoC|
  000f0	e59d3028	 ldr         r3, [sp, #0x28]
  000f4	e1530002	 cmp         r3, r2
  000f8	3a000028	 bcc         |$LN14@FMD_OEMIoC|

; 808  :                 {
; 809  :                 rc = FALSE;
; 810  :                 break;
; 811  :                 }
; 812  :             memcpy(pOutBuffer, s_fmd.reservedRegion, size);

  000fc	e280101c	 add         r1, r0, #0x1C
  00100	e1a0000e	 mov         r0, lr
  00104	eb000000	 bl          memcpy
  00108	e3a00001	 mov         r0, #1
  0010c	ea000024	 b           |$LN18@FMD_OEMIoC|
  00110		 |$LN17@FMD_OEMIoC|

; 770  :         {
; 771  :         case IOCTL_FMD_GET_INTERFACE:
; 772  :             {
; 773  :             FMDInterface *pInterface = (FMDInterface*)pOutBuffer;
; 774  :             if (pOutSize != NULL) *pOutSize = sizeof(FMDInterface);

  00110	e59d302c	 ldr         r3, [sp, #0x2C]
  00114	e3a02038	 mov         r2, #0x38
  00118	e3530000	 cmp         r3, #0
  0011c	15832000	 strne       r2, [r3]

; 775  :             if ((pOutBuffer == NULL) || (outSize < sizeof(FMDInterface)))

  00120	e35e0000	 cmp         lr, #0
  00124	0a00001d	 beq         |$LN14@FMD_OEMIoC|
  00128	e59d3028	 ldr         r3, [sp, #0x28]
  0012c	e3530038	 cmp         r3, #0x38
  00130	3a00001a	 bcc         |$LN14@FMD_OEMIoC|

; 778  :                 break;
; 779  :                 }
; 780  :             pInterface->cbSize = sizeof(FMDInterface);
; 781  :             pInterface->pInit = FMD_Init;

  00134	e59f30a4	 ldr         r3, [pc, #0xA4]

; 782  :             pInterface->pDeInit = FMD_Deinit;
; 783  :             pInterface->pGetInfo = FMD_GetInfo;
; 784  :             pInterface->pGetInfoEx = FMD_GetInfoEx;
; 785  :             pInterface->pGetBlockStatus = FMD_GetBlockStatus;
; 786  :             pInterface->pSetBlockStatus = FMD_SetBlockStatus;
; 787  :             pInterface->pReadSector = FMD_ReadSector;
; 788  :             pInterface->pWriteSector = FMD_WriteSector;
; 789  :             pInterface->pEraseBlock = FMD_EraseBlock;
; 790  :             pInterface->pPowerUp = FMD_PowerUp;
; 791  :             pInterface->pPowerDown = FMD_PowerDown;
; 792  :             pInterface->pGetPhysSectorAddr = FMD_GetPhysSectorAddr;
; 793  :             pInterface->pOEMIoControl = FMD_OEMIoControl;

  00138	e59d2000	 ldr         r2, [sp]
  0013c	e59f0098	 ldr         r0, [pc, #0x98]
  00140	e59fb090	 ldr         r11, [pc, #0x90]
  00144	e5823004	 str         r3, [r2, #4]
  00148	e59f2084	 ldr         r2, [pc, #0x84]
  0014c	e59d3000	 ldr         r3, [sp]
  00150	e59f1078	 ldr         r1, [pc, #0x78]
  00154	e59fe070	 ldr         lr, [pc, #0x70]
  00158	e59f4068	 ldr         r4, [pc, #0x68]
  0015c	e59f5060	 ldr         r5, [pc, #0x60]
  00160	e59f6058	 ldr         r6, [pc, #0x58]
  00164	e59f7050	 ldr         r7, [pc, #0x50]
  00168	e59f8048	 ldr         r8, [pc, #0x48]
  0016c	e59f9040	 ldr         r9, [pc, #0x40]
  00170	e59fa038	 ldr         r10, [pc, #0x38]
  00174	e5832008	 str         r2, [r3, #8]
  00178	e3a02038	 mov         r2, #0x38
  0017c	e283c030	 add         r12, r3, #0x30
  00180	e88c0801	 stmia       r12, {r0, r11}

; 794  :             }
; 795  :             break;

  00184	e3a00001	 mov         r0, #1
  00188	e5832000	 str         r2, [r3]
  0018c	e283c00c	 add         r12, r3, #0xC
  00190	e88c4002	 stmia       r12, {r1, lr}
  00194	e283c014	 add         r12, r3, #0x14
  00198	e88c07f0	 stmia       r12, {r4 - r10}
  0019c	ea000000	 b           |$LN18@FMD_OEMIoC|
  001a0		 |$LN14@FMD_OEMIoC|

; 776  :                 {
; 777  :                 rc = FALSE;

  001a0	e3a00000	 mov         r0, #0
  001a4		 |$LN18@FMD_OEMIoC|

; 844  :     }
; 845  : 
; 846  :     return rc;
; 847  : }

  001a4	e28dd004	 add         sp, sp, #4
  001a8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001ac	e12fff1e	 bx          lr
  001b0		 |$LN26@FMD_OEMIoC|
  001b0		 |$LN27@FMD_OEMIoC|
  001b0	00000000	 DCD         |FMD_GetPhysSectorAddr|
  001b4		 |$LN28@FMD_OEMIoC|
  001b4	00000000	 DCD         |FMD_PowerDown|
  001b8		 |$LN29@FMD_OEMIoC|
  001b8	00000000	 DCD         |FMD_PowerUp|
  001bc		 |$LN30@FMD_OEMIoC|
  001bc	00000000	 DCD         |FMD_EraseBlock|
  001c0		 |$LN31@FMD_OEMIoC|
  001c0	00000000	 DCD         |FMD_WriteSector|
  001c4		 |$LN32@FMD_OEMIoC|
  001c4	00000000	 DCD         |FMD_ReadSector|
  001c8		 |$LN33@FMD_OEMIoC|
  001c8	00000000	 DCD         |FMD_SetBlockStatus|
  001cc		 |$LN34@FMD_OEMIoC|
  001cc	00000000	 DCD         |FMD_GetBlockStatus|
  001d0		 |$LN35@FMD_OEMIoC|
  001d0	00000000	 DCD         |FMD_GetInfo|
  001d4		 |$LN36@FMD_OEMIoC|
  001d4	00000000	 DCD         |FMD_Deinit|
  001d8		 |$LN37@FMD_OEMIoC|
  001d8	00000000	 DCD         |FMD_OEMIoControl|
  001dc		 |$LN38@FMD_OEMIoC|
  001dc	00000000	 DCD         |FMD_GetInfoEx|
  001e0		 |$LN39@FMD_OEMIoC|
  001e0	00000000	 DCD         |FMD_Init|
  001e4		 |$LN40@FMD_OEMIoC|
  001e4	00000000	 DCD         |s_fmd|
  001e8		 |$M44105|

			 ENDP  ; |FMD_OEMIoControl|

	END
