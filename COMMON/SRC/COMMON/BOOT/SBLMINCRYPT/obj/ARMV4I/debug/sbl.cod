; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\BOOT\SBLMINCRYPT\sbl.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|bFoundCorrectKey| % 0x4
	EXPORT	|??_C@_1M@JBODAGLA@?$AA?$FN?$AA?$AN?$AA?6?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17GMAIGMDG@?$AA?$CF?$AAx?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@FAHELGEJ@?$AAH?$AAa?$AAs?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$FL?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SBL_VerifyPacket|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|MinCryptGetHashParam|
	IMPORT	|MinCryptUpdateHashMemory|
	IMPORT	|MinCryptCreateHashMemory|

  00004			 AREA	 |.bss|, NOINIT
|gdwPublicKeyLen| % 0x4
|gpbPublicKey| % 0x4
|bHash|	%	0x14

  00000			 AREA	 |.pdata|, PDATA
|$T36908| DCD	|$LN40@SBL_Verify|
	DCD	0x40016404
; File c:\wince600\platform\common\src\common\boot\sblmincrypt\sbl.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@JBODAGLA@?$AA?$FN?$AA?$AN?$AA?6?$AA?$AN?$AA?6?$AA?$AA@| DCB "]", 0x0
	DCB	0xd, 0x0, 0xa, 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17GMAIGMDG@?$AA?$CF?$AAx?$AA?5?$AA?$AA@| DCB "%", 0x0, "x", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@FAHELGEJ@?$AAH?$AAa?$AAs?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$FL?$AA?$AA@| DCB "H"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "[", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SBL_VerifyPacket| PROC

; 82   : {

  00000		 |$LN40@SBL_Verify|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd070	 sub         sp, sp, #0x70
  00010		 |$M36905|

; 83   :     
; 84   :     DWORD i, hHash, dwHashLen = 0;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3014	 str         r3, [sp, #0x14]

; 85   :     HRESULT hr = S_OK;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3024	 str         r3, [sp, #0x24]

; 86   :     LONG lReturn;
; 87   :     BOOL bVerified = FALSE;

  00020	e3a03000	 mov         r3, #0
  00024	e58d3010	 str         r3, [sp, #0x10]

; 88   :     CRYPT_DER_BLOB blob;
; 89   :     
; 90   :     lReturn = MinCryptCreateHashMemory(CALG_SHA1, &hHash);

  00028	e28d100c	 add         r1, sp, #0xC
  0002c	e3a00902	 mov         r0, #2, 18
  00030	e3800004	 orr         r0, r0, #4
  00034	eb000000	 bl          MinCryptCreateHashMemory
  00038	e58d003c	 str         r0, [sp, #0x3C]
  0003c	e59d303c	 ldr         r3, [sp, #0x3C]
  00040	e58d3020	 str         r3, [sp, #0x20]

; 91   :     CBR(ERROR_SUCCESS == lReturn);

  00044	e59d3020	 ldr         r3, [sp, #0x20]
  00048	e3530000	 cmp         r3, #0
  0004c	0a000004	 beq         |$LN31@SBL_Verify|
  00050	e3a03116	 mov         r3, #0x16, 2
  00054	e3833901	 orr         r3, r3, #1, 18
  00058	e58d3024	 str         r3, [sp, #0x24]
  0005c	ea00013e	 b           |$LN30@SBL_Verify|
  00060	ea00013d	 b           |$Error$36831|
  00064		 |$LN31@SBL_Verify|

; 92   :     
; 93   :     // See if this packet contains any data
; 94   :     // If so hash that data
; 95   :     
; 96   :     if (0 != pPacketData->dwDataLength) 

  00064	e59d3078	 ldr         r3, [sp, #0x78]
  00068	e2833004	 add         r3, r3, #4
  0006c	e5933000	 ldr         r3, [r3]
  00070	e3530000	 cmp         r3, #0
  00074	0a000017	 beq         |$LN29@SBL_Verify|

; 97   :     {
; 98   :         blob.cbData = pPacketData->dwDataLength;

  00078	e59d3078	 ldr         r3, [sp, #0x78]
  0007c	e2833004	 add         r3, r3, #4
  00080	e5933000	 ldr         r3, [r3]
  00084	e58d3018	 str         r3, [sp, #0x18]

; 99   :         blob.pbData = const_cast <BYTE *> (pPacketData->pbData);

  00088	e59d3078	 ldr         r3, [sp, #0x78]
  0008c	e5933000	 ldr         r3, [r3]
  00090	e58d301c	 str         r3, [sp, #0x1C]

; 100  : 
; 101  :         lReturn = MinCryptUpdateHashMemory(CALG_SHA1, hHash, 1, &blob);

  00094	e28d3018	 add         r3, sp, #0x18
  00098	e3a02001	 mov         r2, #1
  0009c	e59d100c	 ldr         r1, [sp, #0xC]
  000a0	e3a00902	 mov         r0, #2, 18
  000a4	e3800004	 orr         r0, r0, #4
  000a8	eb000000	 bl          MinCryptUpdateHashMemory
  000ac	e58d0040	 str         r0, [sp, #0x40]
  000b0	e59d3040	 ldr         r3, [sp, #0x40]
  000b4	e58d3020	 str         r3, [sp, #0x20]

; 102  :         CBR(ERROR_SUCCESS == lReturn);

  000b8	e59d3020	 ldr         r3, [sp, #0x20]
  000bc	e3530000	 cmp         r3, #0
  000c0	0a000004	 beq         |$LN28@SBL_Verify|
  000c4	e3a03116	 mov         r3, #0x16, 2
  000c8	e3833901	 orr         r3, r3, #1, 18
  000cc	e58d3024	 str         r3, [sp, #0x24]
  000d0	ea000121	 b           |$LN27@SBL_Verify|
  000d4	ea000120	 b           |$Error$36831|
  000d8		 |$LN28@SBL_Verify|
  000d8		 |$LN29@SBL_Verify|

; 103  :     }
; 104  : 
; 105  :     // Store RecAddress, RecLength, RecCheck in the hash
; 106  :     // Allows verification of these elements
; 107  : 
; 108  :     blob.cbData = sizeof(pPacketData->dwRecAddress);

  000d8	e3a03004	 mov         r3, #4
  000dc	e58d3018	 str         r3, [sp, #0x18]

; 109  :     blob.pbData = (BYTE *) &pPacketData->dwRecAddress;

  000e0	e59d3078	 ldr         r3, [sp, #0x78]
  000e4	e2833010	 add         r3, r3, #0x10
  000e8	e58d301c	 str         r3, [sp, #0x1C]

; 110  :     lReturn = MinCryptUpdateHashMemory(CALG_SHA1, hHash, 1, &blob);

  000ec	e28d3018	 add         r3, sp, #0x18
  000f0	e3a02001	 mov         r2, #1
  000f4	e59d100c	 ldr         r1, [sp, #0xC]
  000f8	e3a00902	 mov         r0, #2, 18
  000fc	e3800004	 orr         r0, r0, #4
  00100	eb000000	 bl          MinCryptUpdateHashMemory
  00104	e58d0044	 str         r0, [sp, #0x44]
  00108	e59d3044	 ldr         r3, [sp, #0x44]
  0010c	e58d3020	 str         r3, [sp, #0x20]

; 111  :     CBR(ERROR_SUCCESS == lReturn);

  00110	e59d3020	 ldr         r3, [sp, #0x20]
  00114	e3530000	 cmp         r3, #0
  00118	0a000004	 beq         |$LN26@SBL_Verify|
  0011c	e3a03116	 mov         r3, #0x16, 2
  00120	e3833901	 orr         r3, r3, #1, 18
  00124	e58d3024	 str         r3, [sp, #0x24]
  00128	ea00010b	 b           |$LN25@SBL_Verify|
  0012c	ea00010a	 b           |$Error$36831|
  00130		 |$LN26@SBL_Verify|

; 112  : 
; 113  :     blob.cbData = sizeof(pPacketData->dwRecLength);

  00130	e3a03004	 mov         r3, #4
  00134	e58d3018	 str         r3, [sp, #0x18]

; 114  :     blob.pbData = (BYTE *) &pPacketData->dwRecLength;

  00138	e59d3078	 ldr         r3, [sp, #0x78]
  0013c	e2833014	 add         r3, r3, #0x14
  00140	e58d301c	 str         r3, [sp, #0x1C]

; 115  :     lReturn = MinCryptUpdateHashMemory(CALG_SHA1, hHash, 1, &blob);

  00144	e28d3018	 add         r3, sp, #0x18
  00148	e3a02001	 mov         r2, #1
  0014c	e59d100c	 ldr         r1, [sp, #0xC]
  00150	e3a00902	 mov         r0, #2, 18
  00154	e3800004	 orr         r0, r0, #4
  00158	eb000000	 bl          MinCryptUpdateHashMemory
  0015c	e58d0048	 str         r0, [sp, #0x48]
  00160	e59d3048	 ldr         r3, [sp, #0x48]
  00164	e58d3020	 str         r3, [sp, #0x20]

; 116  :     CBR(ERROR_SUCCESS == lReturn);

  00168	e59d3020	 ldr         r3, [sp, #0x20]
  0016c	e3530000	 cmp         r3, #0
  00170	0a000004	 beq         |$LN24@SBL_Verify|
  00174	e3a03116	 mov         r3, #0x16, 2
  00178	e3833901	 orr         r3, r3, #1, 18
  0017c	e58d3024	 str         r3, [sp, #0x24]
  00180	ea0000f5	 b           |$LN23@SBL_Verify|
  00184	ea0000f4	 b           |$Error$36831|
  00188		 |$LN24@SBL_Verify|

; 117  : 
; 118  :     blob.cbData = sizeof(pPacketData->dwRecCheck);

  00188	e3a03004	 mov         r3, #4
  0018c	e58d3018	 str         r3, [sp, #0x18]

; 119  :     blob.pbData = (BYTE *) &pPacketData->dwRecCheck;

  00190	e59d3078	 ldr         r3, [sp, #0x78]
  00194	e2833018	 add         r3, r3, #0x18
  00198	e58d301c	 str         r3, [sp, #0x1C]

; 120  :     lReturn = MinCryptUpdateHashMemory(CALG_SHA1, hHash, 1, &blob);

  0019c	e28d3018	 add         r3, sp, #0x18
  001a0	e3a02001	 mov         r2, #1
  001a4	e59d100c	 ldr         r1, [sp, #0xC]
  001a8	e3a00902	 mov         r0, #2, 18
  001ac	e3800004	 orr         r0, r0, #4
  001b0	eb000000	 bl          MinCryptUpdateHashMemory
  001b4	e58d004c	 str         r0, [sp, #0x4C]
  001b8	e59d304c	 ldr         r3, [sp, #0x4C]
  001bc	e58d3020	 str         r3, [sp, #0x20]

; 121  :     CBR(ERROR_SUCCESS == lReturn);

  001c0	e59d3020	 ldr         r3, [sp, #0x20]
  001c4	e3530000	 cmp         r3, #0
  001c8	0a000004	 beq         |$LN22@SBL_Verify|
  001cc	e3a03116	 mov         r3, #0x16, 2
  001d0	e3833901	 orr         r3, r3, #1, 18
  001d4	e58d3024	 str         r3, [sp, #0x24]
  001d8	ea0000df	 b           |$LN21@SBL_Verify|
  001dc	ea0000de	 b           |$Error$36831|
  001e0		 |$LN22@SBL_Verify|

; 122  : 
; 123  :     blob.cbData = sizeof(pPacketData->bFlags);

  001e0	e3a03001	 mov         r3, #1
  001e4	e58d3018	 str         r3, [sp, #0x18]

; 124  :     blob.pbData = (BYTE *) &pPacketData->bFlags;

  001e8	e59d3078	 ldr         r3, [sp, #0x78]
  001ec	e2833030	 add         r3, r3, #0x30
  001f0	e58d301c	 str         r3, [sp, #0x1C]

; 125  :     lReturn = MinCryptUpdateHashMemory(CALG_SHA1, hHash, 1, &blob);

  001f4	e28d3018	 add         r3, sp, #0x18
  001f8	e3a02001	 mov         r2, #1
  001fc	e59d100c	 ldr         r1, [sp, #0xC]
  00200	e3a00902	 mov         r0, #2, 18
  00204	e3800004	 orr         r0, r0, #4
  00208	eb000000	 bl          MinCryptUpdateHashMemory
  0020c	e58d0050	 str         r0, [sp, #0x50]
  00210	e59d3050	 ldr         r3, [sp, #0x50]
  00214	e58d3020	 str         r3, [sp, #0x20]

; 126  :     CBR(ERROR_SUCCESS == lReturn);

  00218	e59d3020	 ldr         r3, [sp, #0x20]
  0021c	e3530000	 cmp         r3, #0
  00220	0a000004	 beq         |$LN20@SBL_Verify|
  00224	e3a03116	 mov         r3, #0x16, 2
  00228	e3833901	 orr         r3, r3, #1, 18
  0022c	e58d3024	 str         r3, [sp, #0x24]
  00230	ea0000c9	 b           |$LN19@SBL_Verify|
  00234	ea0000c8	 b           |$Error$36831|
  00238		 |$LN20@SBL_Verify|

; 127  : 
; 128  :     // Hash the global file random seed
; 129  : 
; 130  :     blob.cbData = RANDOM_SEED_LENGTH;

  00238	e3a03010	 mov         r3, #0x10
  0023c	e58d3018	 str         r3, [sp, #0x18]

; 131  :     blob.pbData = (BYTE *) pPacketData->bRandomSeed;

  00240	e59d3078	 ldr         r3, [sp, #0x78]
  00244	e283301c	 add         r3, r3, #0x1C
  00248	e58d301c	 str         r3, [sp, #0x1C]

; 132  :     lReturn = MinCryptUpdateHashMemory(CALG_SHA1, hHash, 1, &blob);

  0024c	e28d3018	 add         r3, sp, #0x18
  00250	e3a02001	 mov         r2, #1
  00254	e59d100c	 ldr         r1, [sp, #0xC]
  00258	e3a00902	 mov         r0, #2, 18
  0025c	e3800004	 orr         r0, r0, #4
  00260	eb000000	 bl          MinCryptUpdateHashMemory
  00264	e58d0054	 str         r0, [sp, #0x54]
  00268	e59d3054	 ldr         r3, [sp, #0x54]
  0026c	e58d3020	 str         r3, [sp, #0x20]

; 133  :     CBR(ERROR_SUCCESS == lReturn);

  00270	e59d3020	 ldr         r3, [sp, #0x20]
  00274	e3530000	 cmp         r3, #0
  00278	0a000004	 beq         |$LN18@SBL_Verify|
  0027c	e3a03116	 mov         r3, #0x16, 2
  00280	e3833901	 orr         r3, r3, #1, 18
  00284	e58d3024	 str         r3, [sp, #0x24]
  00288	ea0000b3	 b           |$LN17@SBL_Verify|
  0028c	ea0000b2	 b           |$Error$36831|
  00290		 |$LN18@SBL_Verify|

; 134  : 
; 135  :     // Hash the sequence number
; 136  : 
; 137  :     blob.cbData = sizeof(pPacketData->dwSequenceNumber);

  00290	e3a03004	 mov         r3, #4
  00294	e58d3018	 str         r3, [sp, #0x18]

; 138  :     blob.pbData = (BYTE *) &pPacketData->dwSequenceNumber;

  00298	e59d3078	 ldr         r3, [sp, #0x78]
  0029c	e283302c	 add         r3, r3, #0x2C
  002a0	e58d301c	 str         r3, [sp, #0x1C]

; 139  :     lReturn = MinCryptUpdateHashMemory(CALG_SHA1, hHash, 1, &blob);

  002a4	e28d3018	 add         r3, sp, #0x18
  002a8	e3a02001	 mov         r2, #1
  002ac	e59d100c	 ldr         r1, [sp, #0xC]
  002b0	e3a00902	 mov         r0, #2, 18
  002b4	e3800004	 orr         r0, r0, #4
  002b8	eb000000	 bl          MinCryptUpdateHashMemory
  002bc	e58d0058	 str         r0, [sp, #0x58]
  002c0	e59d3058	 ldr         r3, [sp, #0x58]
  002c4	e58d3020	 str         r3, [sp, #0x20]

; 140  :     CBR(ERROR_SUCCESS == lReturn);

  002c8	e59d3020	 ldr         r3, [sp, #0x20]
  002cc	e3530000	 cmp         r3, #0
  002d0	0a000004	 beq         |$LN16@SBL_Verify|
  002d4	e3a03116	 mov         r3, #0x16, 2
  002d8	e3833901	 orr         r3, r3, #1, 18
  002dc	e58d3024	 str         r3, [sp, #0x24]
  002e0	ea00009d	 b           |$LN15@SBL_Verify|
  002e4	ea00009c	 b           |$Error$36831|
  002e8		 |$LN16@SBL_Verify|

; 141  : 
; 142  :     lReturn = MinCryptGetHashParam(CALG_SHA1, hHash, bHash, &dwHashLen);

  002e8	e28d3014	 add         r3, sp, #0x14
  002ec	e59f2288	 ldr         r2, [pc, #0x288]
  002f0	e59d100c	 ldr         r1, [sp, #0xC]
  002f4	e3a00902	 mov         r0, #2, 18
  002f8	e3800004	 orr         r0, r0, #4
  002fc	eb000000	 bl          MinCryptGetHashParam
  00300	e58d005c	 str         r0, [sp, #0x5C]
  00304	e59d305c	 ldr         r3, [sp, #0x5C]
  00308	e58d3020	 str         r3, [sp, #0x20]

; 143  :     CBR(ERROR_SUCCESS == lReturn);

  0030c	e59d3020	 ldr         r3, [sp, #0x20]
  00310	e3530000	 cmp         r3, #0
  00314	0a000004	 beq         |$LN14@SBL_Verify|
  00318	e3a03116	 mov         r3, #0x16, 2
  0031c	e3833901	 orr         r3, r3, #1, 18
  00320	e58d3024	 str         r3, [sp, #0x24]
  00324	ea00008c	 b           |$LN13@SBL_Verify|
  00328	ea00008b	 b           |$Error$36831|
  0032c		 |$LN14@SBL_Verify|

; 144  : 
; 145  : #ifdef DEBUG
; 146  :     NKDbgPrintfW(L"Hash = [");

  0032c	e59f0258	 ldr         r0, [pc, #0x258]
  00330	eb000000	 bl          NKDbgPrintfW

; 147  :     for (i = 0; i < dwHashLen; i++)

  00334	e3a03000	 mov         r3, #0
  00338	e58d3008	 str         r3, [sp, #8]
  0033c	ea000002	 b           |$LN12@SBL_Verify|
  00340		 |$LN11@SBL_Verify|
  00340	e59d3008	 ldr         r3, [sp, #8]
  00344	e2833001	 add         r3, r3, #1
  00348	e58d3008	 str         r3, [sp, #8]
  0034c		 |$LN12@SBL_Verify|
  0034c	e59d2008	 ldr         r2, [sp, #8]
  00350	e59d3014	 ldr         r3, [sp, #0x14]
  00354	e1520003	 cmp         r2, r3
  00358	2a000007	 bcs         |$LN10@SBL_Verify|

; 148  :     {
; 149  :         NKDbgPrintfW(L"%x ", bHash[i]);

  0035c	e59f2218	 ldr         r2, [pc, #0x218]
  00360	e59d3008	 ldr         r3, [sp, #8]
  00364	e0823003	 add         r3, r2, r3
  00368	e5d33000	 ldrb        r3, [r3]
  0036c	e1a01003	 mov         r1, r3
  00370	e59f0210	 ldr         r0, [pc, #0x210]
  00374	eb000000	 bl          NKDbgPrintfW

; 150  :     }

  00378	eafffff0	 b           |$LN11@SBL_Verify|
  0037c		 |$LN10@SBL_Verify|

; 151  :     NKDbgPrintfW(L"]\r\n\r\n");

  0037c	e59f0200	 ldr         r0, [pc, #0x200]
  00380	eb000000	 bl          NKDbgPrintfW

; 152  : #endif
; 153  : 
; 154  :     // This is an optimization. We could have many public keys and we don't know
; 155  :     // which one this image was signed with. However once we find one that works
; 156  :     // this will be the key that every packet is signed with so we don't have to
; 157  :     // search again. After finding a key that works just verify each packet with
; 158  :     // that key.
; 159  : 
; 160  :     if (!bFoundCorrectKey) 

  00384	e59f31f4	 ldr         r3, [pc, #0x1F4]
  00388	e5933000	 ldr         r3, [r3]
  0038c	e3530000	 cmp         r3, #0
  00390	1a000051	 bne         |$LN9@SBL_Verify|

; 161  :     {
; 162  :         for (i = pKeyData->wMinSearchIndex; i <= pKeyData->wMaxSearchIndex; i++) 

  00394	e59d307c	 ldr         r3, [sp, #0x7C]
  00398	e283300a	 add         r3, r3, #0xA
  0039c	e1d330b0	 ldrh        r3, [r3]
  003a0	e58d3008	 str         r3, [sp, #8]
  003a4	ea000002	 b           |$LN8@SBL_Verify|
  003a8		 |$LN7@SBL_Verify|
  003a8	e59d3008	 ldr         r3, [sp, #8]
  003ac	e2833001	 add         r3, r3, #1
  003b0	e58d3008	 str         r3, [sp, #8]
  003b4		 |$LN8@SBL_Verify|
  003b4	e59d307c	 ldr         r3, [sp, #0x7C]
  003b8	e283300c	 add         r3, r3, #0xC
  003bc	e1d320b0	 ldrh        r2, [r3]
  003c0	e59d3008	 ldr         r3, [sp, #8]
  003c4	e1530002	 cmp         r3, r2
  003c8	8a00003c	 bhi         |$LN6@SBL_Verify|

; 163  :         {
; 164  :             bVerified = (S_OK == Verify(pPacketData->pbSig, pPacketData->dwSigLength, pKeyData->rgpbPublicKeys[i], pKeyData->rgdwKeyLengths[i], bHash, dwHashLen));

  003cc	e59d3014	 ldr         r3, [sp, #0x14]
  003d0	e58d3004	 str         r3, [sp, #4]
  003d4	e59f31a0	 ldr         r3, [pc, #0x1A0]
  003d8	e58d3000	 str         r3, [sp]
  003dc	e59d307c	 ldr         r3, [sp, #0x7C]
  003e0	e2830004	 add         r0, r3, #4
  003e4	e59d1008	 ldr         r1, [sp, #8]
  003e8	e3a03004	 mov         r3, #4
  003ec	e0020391	 mul         r2, r1, r3
  003f0	e5903000	 ldr         r3, [r0]
  003f4	e0833002	 add         r3, r3, r2
  003f8	e5933000	 ldr         r3, [r3]
  003fc	e59d0008	 ldr         r0, [sp, #8]
  00400	e3a02004	 mov         r2, #4
  00404	e0010290	 mul         r1, r0, r2
  00408	e59d207c	 ldr         r2, [sp, #0x7C]
  0040c	e5922000	 ldr         r2, [r2]
  00410	e0822001	 add         r2, r2, r1
  00414	e5922000	 ldr         r2, [r2]
  00418	e59d1078	 ldr         r1, [sp, #0x78]
  0041c	e281100c	 add         r1, r1, #0xC
  00420	e5911000	 ldr         r1, [r1]
  00424	e59d0078	 ldr         r0, [sp, #0x78]
  00428	e2800008	 add         r0, r0, #8
  0042c	e5900000	 ldr         r0, [r0]
  00430	eb000000	 bl          |?Verify@@YAJPBEK0KPAEK@Z|
  00434	e58d0060	 str         r0, [sp, #0x60]
  00438	e59d3060	 ldr         r3, [sp, #0x60]
  0043c	e3530000	 cmp         r3, #0
  00440	1a000002	 bne         |$LN34@SBL_Verify|
  00444	e3a03001	 mov         r3, #1
  00448	e58d3064	 str         r3, [sp, #0x64]
  0044c	ea000001	 b           |$LN35@SBL_Verify|
  00450		 |$LN34@SBL_Verify|
  00450	e3a03000	 mov         r3, #0
  00454	e58d3064	 str         r3, [sp, #0x64]
  00458		 |$LN35@SBL_Verify|
  00458	e59d3064	 ldr         r3, [sp, #0x64]
  0045c	e58d3010	 str         r3, [sp, #0x10]

; 165  :             gpbPublicKey = pKeyData->rgpbPublicKeys[i];

  00460	e59d1008	 ldr         r1, [sp, #8]
  00464	e3a03004	 mov         r3, #4
  00468	e0020391	 mul         r2, r1, r3
  0046c	e59d307c	 ldr         r3, [sp, #0x7C]
  00470	e5933000	 ldr         r3, [r3]
  00474	e0833002	 add         r3, r3, r2
  00478	e5932000	 ldr         r2, [r3]
  0047c	e59f30f0	 ldr         r3, [pc, #0xF0]
  00480	e5832000	 str         r2, [r3]

; 166  :             gdwPublicKeyLen = pKeyData->rgdwKeyLengths[i];

  00484	e59d307c	 ldr         r3, [sp, #0x7C]
  00488	e2830004	 add         r0, r3, #4
  0048c	e59d1008	 ldr         r1, [sp, #8]
  00490	e3a03004	 mov         r3, #4
  00494	e0020391	 mul         r2, r1, r3
  00498	e5903000	 ldr         r3, [r0]
  0049c	e0833002	 add         r3, r3, r2
  004a0	e5932000	 ldr         r2, [r3]
  004a4	e59f30cc	 ldr         r3, [pc, #0xCC]
  004a8	e5832000	 str         r2, [r3]

; 167  :             
; 168  :             if (bVerified) 

  004ac	e59d3010	 ldr         r3, [sp, #0x10]
  004b0	e3530000	 cmp         r3, #0
  004b4	0a000000	 beq         |$LN5@SBL_Verify|

; 169  :             {
; 170  :                 break;

  004b8	ea000000	 b           |$LN6@SBL_Verify|
  004bc		 |$LN5@SBL_Verify|

; 171  :             }
; 172  :         }

  004bc	eaffffb9	 b           |$LN7@SBL_Verify|
  004c0		 |$LN6@SBL_Verify|

; 173  : 
; 174  :         if (bVerified) 

  004c0	e59d3010	 ldr         r3, [sp, #0x10]
  004c4	e3530000	 cmp         r3, #0
  004c8	0a000002	 beq         |$LN4@SBL_Verify|

; 175  :         {
; 176  :             bFoundCorrectKey = TRUE;

  004cc	e59f20ac	 ldr         r2, [pc, #0xAC]
  004d0	e3a03001	 mov         r3, #1
  004d4	e5823000	 str         r3, [r2]
  004d8		 |$LN4@SBL_Verify|

; 177  :         }
; 178  :     } 
; 179  :     else 

  004d8	ea000019	 b           |$LN3@SBL_Verify|
  004dc		 |$LN9@SBL_Verify|

; 180  :     {
; 181  :         bVerified = (S_OK == Verify(pPacketData->pbSig, pPacketData->dwSigLength, gpbPublicKey, gdwPublicKeyLen, bHash, dwHashLen));

  004dc	e59d3014	 ldr         r3, [sp, #0x14]
  004e0	e58d3004	 str         r3, [sp, #4]
  004e4	e59f3090	 ldr         r3, [pc, #0x90]
  004e8	e58d3000	 str         r3, [sp]
  004ec	e59f3084	 ldr         r3, [pc, #0x84]
  004f0	e5933000	 ldr         r3, [r3]
  004f4	e59f2078	 ldr         r2, [pc, #0x78]
  004f8	e5922000	 ldr         r2, [r2]
  004fc	e59d1078	 ldr         r1, [sp, #0x78]
  00500	e281100c	 add         r1, r1, #0xC
  00504	e5911000	 ldr         r1, [r1]
  00508	e59d0078	 ldr         r0, [sp, #0x78]
  0050c	e2800008	 add         r0, r0, #8
  00510	e5900000	 ldr         r0, [r0]
  00514	eb000000	 bl          |?Verify@@YAJPBEK0KPAEK@Z|
  00518	e58d0068	 str         r0, [sp, #0x68]
  0051c	e59d3068	 ldr         r3, [sp, #0x68]
  00520	e3530000	 cmp         r3, #0
  00524	1a000002	 bne         |$LN36@SBL_Verify|
  00528	e3a03001	 mov         r3, #1
  0052c	e58d306c	 str         r3, [sp, #0x6C]
  00530	ea000001	 b           |$LN37@SBL_Verify|
  00534		 |$LN36@SBL_Verify|
  00534	e3a03000	 mov         r3, #0
  00538	e58d306c	 str         r3, [sp, #0x6C]
  0053c		 |$LN37@SBL_Verify|
  0053c	e59d306c	 ldr         r3, [sp, #0x6C]
  00540	e58d3010	 str         r3, [sp, #0x10]
  00544		 |$LN3@SBL_Verify|

; 182  :     }
; 183  : 
; 184  :     CBR(bVerified);

  00544	e59d3010	 ldr         r3, [sp, #0x10]
  00548	e3530000	 cmp         r3, #0
  0054c	1a000002	 bne         |$LN2@SBL_Verify|
  00550	e3a03116	 mov         r3, #0x16, 2
  00554	e3833901	 orr         r3, r3, #1, 18
  00558	e58d3024	 str         r3, [sp, #0x24]
  0055c		 |$LN2@SBL_Verify|
  0055c		 |$LN13@SBL_Verify|
  0055c		 |$LN15@SBL_Verify|
  0055c		 |$LN17@SBL_Verify|
  0055c		 |$LN19@SBL_Verify|
  0055c		 |$LN21@SBL_Verify|
  0055c		 |$LN23@SBL_Verify|
  0055c		 |$LN25@SBL_Verify|
  0055c		 |$LN27@SBL_Verify|
  0055c		 |$LN30@SBL_Verify|
  0055c		 |$Error$36831|

; 185  :     
; 186  : Error:
; 187  :     return hr;

  0055c	e59d3024	 ldr         r3, [sp, #0x24]
  00560	e58d3038	 str         r3, [sp, #0x38]

; 188  : }

  00564	e59d0038	 ldr         r0, [sp, #0x38]
  00568	e28dd070	 add         sp, sp, #0x70
  0056c	e89d6000	 ldmia       sp, {sp, lr}
  00570	e12fff1e	 bx          lr
  00574		 |$LN41@SBL_Verify|
  00574		 |$LN42@SBL_Verify|
  00574	00000000	 DCD         |gpbPublicKey|
  00578		 |$LN43@SBL_Verify|
  00578	00000000	 DCD         |gdwPublicKeyLen|
  0057c		 |$LN44@SBL_Verify|
  0057c	00000000	 DCD         |bHash|
  00580		 |$LN45@SBL_Verify|
  00580	00000000	 DCD         |bFoundCorrectKey|
  00584		 |$LN46@SBL_Verify|
  00584	00000000	 DCD         |??_C@_1M@JBODAGLA@?$AA?$FN?$AA?$AN?$AA?6?$AA?$AN?$AA?6?$AA?$AA@|
  00588		 |$LN47@SBL_Verify|
  00588	00000000	 DCD         |??_C@_17GMAIGMDG@?$AA?$CF?$AAx?$AA?5?$AA?$AA@|
  0058c		 |$LN48@SBL_Verify|
  0058c	00000000	 DCD         |??_C@_1BC@FAHELGEJ@?$AAH?$AAa?$AAs?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$FL?$AA?$AA@|
  00590		 |$M36906|

			 ENDP  ; |SBL_VerifyPacket|

	EXPORT	|??_C@_1FG@HMLADEKA@?$AAM?$AAi?$AAn?$AAC?$AAr?$AAy?$AAp?$AAt?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AAS?$AAi?$AAg?$AAn?$AAe?$AAd?$AAH?$AAa?$AAs?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr@| [ DATA ] ; `string'
	IMPORT	|MinCryptVerifySignedHash|

  00008			 AREA	 |.pdata|, PDATA
|$T36923| DCD	|$LN7@Verify|
	DCD	0x40002904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@HMLADEKA@?$AAM?$AAi?$AAn?$AAC?$AAr?$AAy?$AAp?$AAt?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AAS?$AAi?$AAg?$AAn?$AAe?$AAd?$AAH?$AAa?$AAs?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr@| DCB "M"
	DCB	0x0, "i", 0x0, "n", 0x0, "C", 0x0, "r", 0x0, "y", 0x0, "p"
	DCB	0x0, "t", 0x0, "V", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "f"
	DCB	0x0, "y", 0x0, "S", 0x0, "i", 0x0, "g", 0x0, "n", 0x0, "e"
	DCB	0x0, "d", 0x0, "H", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "("
	DCB	0x0, ")", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "n", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00590			 AREA	 |.text|, CODE, ARM

  00590		 |?Verify@@YAJPBEK0KPAEK@Z| PROC	; Verify

; 45   : {

  00590		 |$LN7@Verify|
  00590	e1a0c00d	 mov         r12, sp
  00594	e92d000f	 stmdb       sp!, {r0 - r3}
  00598	e92d5000	 stmdb       sp!, {r12, lr}
  0059c	e24dd028	 sub         sp, sp, #0x28
  005a0		 |$M36920|

; 46   :     
; 47   :     HRESULT hr = S_OK;

  005a0	e3a03000	 mov         r3, #0
  005a4	e58d3018	 str         r3, [sp, #0x18]

; 48   :     LONG lResult;
; 49   : 
; 50   :     CRYPT_DER_BLOB blobSig;
; 51   :     CRYPT_DER_BLOB blobKey;
; 52   : 
; 53   :     blobSig.cbData = dwSigLen;

  005a8	e59d3034	 ldr         r3, [sp, #0x34]
  005ac	e58d3004	 str         r3, [sp, #4]

; 54   :     blobSig.pbData = const_cast <BYTE *> (pbSig);

  005b0	e59d3030	 ldr         r3, [sp, #0x30]
  005b4	e58d3008	 str         r3, [sp, #8]

; 55   : 
; 56   :     blobKey.cbData = dwKeyLen;

  005b8	e59d303c	 ldr         r3, [sp, #0x3C]
  005bc	e58d3010	 str         r3, [sp, #0x10]

; 57   :     blobKey.pbData = const_cast <BYTE *> (pbKey);

  005c0	e59d3038	 ldr         r3, [sp, #0x38]
  005c4	e58d3014	 str         r3, [sp, #0x14]

; 58   : 
; 59   :     lResult = MinCryptVerifySignedHash(
; 60   :         CALG_SHA1,
; 61   :         pbHash,
; 62   :         dwHashLen,
; 63   :         &blobSig,
; 64   :         &blobKey);

  005c8	e28d3010	 add         r3, sp, #0x10
  005cc	e58d3000	 str         r3, [sp]
  005d0	e28d3004	 add         r3, sp, #4
  005d4	e59d2044	 ldr         r2, [sp, #0x44]
  005d8	e59d1040	 ldr         r1, [sp, #0x40]
  005dc	e3a00902	 mov         r0, #2, 18
  005e0	e3800004	 orr         r0, r0, #4
  005e4	eb000000	 bl          MinCryptVerifySignedHash
  005e8	e58d0024	 str         r0, [sp, #0x24]
  005ec	e59d3024	 ldr         r3, [sp, #0x24]
  005f0	e58d300c	 str         r3, [sp, #0xC]

; 65   : 
; 66   : #ifdef DEBUG
; 67   :     NKDbgPrintfW(L"MinCryptVerifySignedHash() returned 0x%x\r\n", lResult);

  005f4	e59d100c	 ldr         r1, [sp, #0xC]
  005f8	e59f0030	 ldr         r0, [pc, #0x30]
  005fc	eb000000	 bl          NKDbgPrintfW

; 68   : #endif 
; 69   : 
; 70   :     CBR(ERROR_SUCCESS == lResult);

  00600	e59d300c	 ldr         r3, [sp, #0xC]
  00604	e3530000	 cmp         r3, #0
  00608	0a000002	 beq         |$LN2@Verify|
  0060c	e3a03116	 mov         r3, #0x16, 2
  00610	e3833901	 orr         r3, r3, #1, 18
  00614	e58d3018	 str         r3, [sp, #0x18]
  00618		 |$LN2@Verify|
  00618		 |$Error$36815|

; 71   : 
; 72   : Error:
; 73   :     return hr;

  00618	e59d3018	 ldr         r3, [sp, #0x18]
  0061c	e58d3020	 str         r3, [sp, #0x20]

; 74   : }

  00620	e59d0020	 ldr         r0, [sp, #0x20]
  00624	e28dd028	 add         sp, sp, #0x28
  00628	e89d6000	 ldmia       sp, {sp, lr}
  0062c	e12fff1e	 bx          lr
  00630		 |$LN8@Verify|
  00630		 |$LN9@Verify|
  00630	00000000	 DCD         |??_C@_1FG@HMLADEKA@?$AAM?$AAi?$AAn?$AAC?$AAr?$AAy?$AAp?$AAt?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AAS?$AAi?$AAg?$AAn?$AAe?$AAd?$AAH?$AAa?$AAs?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr@|
  00634		 |$M36921|

			 ENDP  ; |?Verify@@YAJPBEK0KPAEK@Z|, Verify

	END
