; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\CEDDK\DDK_BUS\data.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|HalGetBusDataByOffset|
	IMPORT	|KernelIoControl|

  00000			 AREA	 |.pdata|, PDATA
|$T43047| DCD	|$LN9@HalGetBusD|
	DCD	0x40004304
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\common\ceddk\ddk_bus\data.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HalGetBusDataByOffset| PROC

; 31   : ) {

  00000		 |$LN9@HalGetBusD|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd04c	 sub         sp, sp, #0x4C
  00010		 |$M43044|

; 32   :     OAL_DDK_PARAMS params;
; 33   :     PCI_SLOT_NUMBER slot;
; 34   :     UINT32 outSize, rc = 0;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3008	 str         r3, [sp, #8]

; 35   : 
; 36   :     params.function = IOCTL_OAL_READBUSDATA;

  00018	e3a03003	 mov         r3, #3
  0001c	e58d300c	 str         r3, [sp, #0xC]

; 37   :     params.rc = 0;

  00020	e3a03000	 mov         r3, #0
  00024	e58d3010	 str         r3, [sp, #0x10]

; 38   :     switch (busDataType) {

  00028	e59d3054	 ldr         r3, [sp, #0x54]
  0002c	e3530004	 cmp         r3, #4
  00030	0a000000	 beq         |$LN2@HalGetBusD|
  00034	ea000018	 b           |$LN3@HalGetBusD|
  00038		 |$LN2@HalGetBusD|

; 39   :     case PCIConfiguration:
; 40   :         params.busData.devLoc.IfcType = PCIBus;

  00038	e3a03005	 mov         r3, #5
  0003c	e58d3014	 str         r3, [sp, #0x14]

; 41   :         slot.u.AsULONG = slotNumber;

  00040	e59d305c	 ldr         r3, [sp, #0x5C]
  00044	e58d3034	 str         r3, [sp, #0x34]

; 42   :         params.busData.devLoc.BusNumber = busNumber >> 8;

  00048	e59d3058	 ldr         r3, [sp, #0x58]
  0004c	e1a03423	 mov         r3, r3, lsr #8
  00050	e58d3018	 str         r3, [sp, #0x18]

; 43   :         params.busData.devLoc.LogicalLoc = (busNumber & 0xFF) << 16;

  00054	e59d3058	 ldr         r3, [sp, #0x58]
  00058	e20330ff	 and         r3, r3, #0xFF
  0005c	e1a03803	 mov         r3, r3, lsl #16
  00060	e58d301c	 str         r3, [sp, #0x1C]

; 44   :         params.busData.devLoc.LogicalLoc |= slot.u.bits.DeviceNumber << 8;

  00064	e59d3034	 ldr         r3, [sp, #0x34]
  00068	e203301f	 and         r3, r3, #0x1F
  0006c	e1a02403	 mov         r2, r3, lsl #8
  00070	e59d301c	 ldr         r3, [sp, #0x1C]
  00074	e1833002	 orr         r3, r3, r2
  00078	e58d301c	 str         r3, [sp, #0x1C]

; 45   :         params.busData.devLoc.LogicalLoc |= slot.u.bits.FunctionNumber;

  0007c	e59d3034	 ldr         r3, [sp, #0x34]
  00080	e1a03c03	 mov         r3, r3, lsl #24
  00084	e1a02ea3	 mov         r2, r3, lsr #29
  00088	e59d301c	 ldr         r3, [sp, #0x1C]
  0008c	e1833002	 orr         r3, r3, r2
  00090	e58d301c	 str         r3, [sp, #0x1C]

; 46   :         rc = TRUE;

  00094	e3a03001	 mov         r3, #1
  00098	e58d3008	 str         r3, [sp, #8]
  0009c		 |$LN3@HalGetBusD|

; 47   :         break;
; 48   :     }
; 49   :     params.busData.offset = offset;

  0009c	e59d3064	 ldr         r3, [sp, #0x64]
  000a0	e58d3028	 str         r3, [sp, #0x28]

; 50   :     params.busData.length = length;

  000a4	e59d3068	 ldr         r3, [sp, #0x68]
  000a8	e58d302c	 str         r3, [sp, #0x2C]

; 51   :     params.busData.pBuffer = pBuffer;

  000ac	e59d3060	 ldr         r3, [sp, #0x60]
  000b0	e58d3030	 str         r3, [sp, #0x30]

; 52   : 
; 53   :     if (KernelIoControl(
; 54   :         IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, &outSize
; 55   :     )) {

  000b4	e28d3038	 add         r3, sp, #0x38
  000b8	e58d3004	 str         r3, [sp, #4]
  000bc	e3a03000	 mov         r3, #0
  000c0	e58d3000	 str         r3, [sp]
  000c4	e3a03000	 mov         r3, #0
  000c8	e3a02028	 mov         r2, #0x28
  000cc	e28d100c	 add         r1, sp, #0xC
  000d0	e59f0030	 ldr         r0, [pc, #0x30]
  000d4	eb000000	 bl          KernelIoControl
  000d8	e58d0048	 str         r0, [sp, #0x48]
  000dc	e59d3048	 ldr         r3, [sp, #0x48]
  000e0	e3530000	 cmp         r3, #0
  000e4	0a000001	 beq         |$LN1@HalGetBusD|

; 56   :         rc = params.rc;

  000e8	e59d3010	 ldr         r3, [sp, #0x10]
  000ec	e58d3008	 str         r3, [sp, #8]
  000f0		 |$LN1@HalGetBusD|

; 57   :     }
; 58   : 
; 59   :     return rc;

  000f0	e59d3008	 ldr         r3, [sp, #8]
  000f4	e58d3044	 str         r3, [sp, #0x44]

; 60   : }

  000f8	e59d0044	 ldr         r0, [sp, #0x44]
  000fc	e28dd04c	 add         sp, sp, #0x4C
  00100	e89d6000	 ldmia       sp, {sp, lr}
  00104	e12fff1e	 bx          lr
  00108		 |$LN10@HalGetBusD|
  00108		 |$LN11@HalGetBusD|
  00108	01010014	 DCD         0x1010014
  0010c		 |$M43045|

			 ENDP  ; |HalGetBusDataByOffset|

	EXPORT	|HalSetBusDataByOffset|

  00008			 AREA	 |.pdata|, PDATA
|$T43057| DCD	|$LN9@HalSetBusD|
	DCD	0x40004304
; Function compile flags: /Odtp

  0010c			 AREA	 |.text|, CODE, ARM

  0010c		 |HalSetBusDataByOffset| PROC

; 72   : ) {

  0010c		 |$LN9@HalSetBusD|
  0010c	e1a0c00d	 mov         r12, sp
  00110	e92d000f	 stmdb       sp!, {r0 - r3}
  00114	e92d5000	 stmdb       sp!, {r12, lr}
  00118	e24dd04c	 sub         sp, sp, #0x4C
  0011c		 |$M43054|

; 73   :     OAL_DDK_PARAMS params;
; 74   :     PCI_SLOT_NUMBER slot;
; 75   :     UINT32 outSize, rc = 0;

  0011c	e3a03000	 mov         r3, #0
  00120	e58d3008	 str         r3, [sp, #8]

; 76   : 
; 77   :     params.function = IOCTL_OAL_WRITEBUSDATA;

  00124	e3a03004	 mov         r3, #4
  00128	e58d300c	 str         r3, [sp, #0xC]

; 78   :     params.rc = 0;

  0012c	e3a03000	 mov         r3, #0
  00130	e58d3010	 str         r3, [sp, #0x10]

; 79   :     switch (busDataType) {

  00134	e59d3054	 ldr         r3, [sp, #0x54]
  00138	e3530004	 cmp         r3, #4
  0013c	0a000000	 beq         |$LN2@HalSetBusD|
  00140	ea000018	 b           |$LN3@HalSetBusD|
  00144		 |$LN2@HalSetBusD|

; 80   :     case PCIConfiguration:
; 81   :         params.busData.devLoc.IfcType = PCIBus;

  00144	e3a03005	 mov         r3, #5
  00148	e58d3014	 str         r3, [sp, #0x14]

; 82   :         slot.u.AsULONG = slotNumber;

  0014c	e59d305c	 ldr         r3, [sp, #0x5C]
  00150	e58d3034	 str         r3, [sp, #0x34]

; 83   :         params.busData.devLoc.BusNumber = busNumber >> 8;

  00154	e59d3058	 ldr         r3, [sp, #0x58]
  00158	e1a03423	 mov         r3, r3, lsr #8
  0015c	e58d3018	 str         r3, [sp, #0x18]

; 84   :         params.busData.devLoc.LogicalLoc = (busNumber & 0xFF) << 16;

  00160	e59d3058	 ldr         r3, [sp, #0x58]
  00164	e20330ff	 and         r3, r3, #0xFF
  00168	e1a03803	 mov         r3, r3, lsl #16
  0016c	e58d301c	 str         r3, [sp, #0x1C]

; 85   :         params.busData.devLoc.LogicalLoc |= slot.u.bits.DeviceNumber << 8;

  00170	e59d3034	 ldr         r3, [sp, #0x34]
  00174	e203301f	 and         r3, r3, #0x1F
  00178	e1a02403	 mov         r2, r3, lsl #8
  0017c	e59d301c	 ldr         r3, [sp, #0x1C]
  00180	e1833002	 orr         r3, r3, r2
  00184	e58d301c	 str         r3, [sp, #0x1C]

; 86   :         params.busData.devLoc.LogicalLoc |= slot.u.bits.FunctionNumber;

  00188	e59d3034	 ldr         r3, [sp, #0x34]
  0018c	e1a03c03	 mov         r3, r3, lsl #24
  00190	e1a02ea3	 mov         r2, r3, lsr #29
  00194	e59d301c	 ldr         r3, [sp, #0x1C]
  00198	e1833002	 orr         r3, r3, r2
  0019c	e58d301c	 str         r3, [sp, #0x1C]

; 87   :         rc = TRUE;

  001a0	e3a03001	 mov         r3, #1
  001a4	e58d3008	 str         r3, [sp, #8]
  001a8		 |$LN3@HalSetBusD|

; 88   :         break;
; 89   :     }
; 90   :     params.busData.offset = offset;

  001a8	e59d3064	 ldr         r3, [sp, #0x64]
  001ac	e58d3028	 str         r3, [sp, #0x28]

; 91   :     params.busData.length = length;

  001b0	e59d3068	 ldr         r3, [sp, #0x68]
  001b4	e58d302c	 str         r3, [sp, #0x2C]

; 92   :     params.busData.pBuffer = pBuffer;

  001b8	e59d3060	 ldr         r3, [sp, #0x60]
  001bc	e58d3030	 str         r3, [sp, #0x30]

; 93   : 
; 94   :     if (KernelIoControl(
; 95   :         IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, &outSize
; 96   :     )) {

  001c0	e28d3038	 add         r3, sp, #0x38
  001c4	e58d3004	 str         r3, [sp, #4]
  001c8	e3a03000	 mov         r3, #0
  001cc	e58d3000	 str         r3, [sp]
  001d0	e3a03000	 mov         r3, #0
  001d4	e3a02028	 mov         r2, #0x28
  001d8	e28d100c	 add         r1, sp, #0xC
  001dc	e59f0030	 ldr         r0, [pc, #0x30]
  001e0	eb000000	 bl          KernelIoControl
  001e4	e58d0048	 str         r0, [sp, #0x48]
  001e8	e59d3048	 ldr         r3, [sp, #0x48]
  001ec	e3530000	 cmp         r3, #0
  001f0	0a000001	 beq         |$LN1@HalSetBusD|

; 97   :         rc = params.rc;

  001f4	e59d3010	 ldr         r3, [sp, #0x10]
  001f8	e58d3008	 str         r3, [sp, #8]
  001fc		 |$LN1@HalSetBusD|

; 98   :     }
; 99   : 
; 100  :     return rc;

  001fc	e59d3008	 ldr         r3, [sp, #8]
  00200	e58d3044	 str         r3, [sp, #0x44]

; 101  : }

  00204	e59d0044	 ldr         r0, [sp, #0x44]
  00208	e28dd04c	 add         sp, sp, #0x4C
  0020c	e89d6000	 ldmia       sp, {sp, lr}
  00210	e12fff1e	 bx          lr
  00214		 |$LN10@HalSetBusD|
  00214		 |$LN11@HalSetBusD|
  00214	01010014	 DCD         0x1010014
  00218		 |$M43055|

			 ENDP  ; |HalSetBusDataByOffset|

	END
