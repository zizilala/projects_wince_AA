; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\CEDDK\DDK_BUS\data.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|HalGetBusDataByOffset|
	IMPORT	|KernelIoControl|
; File c:\wince600\platform\common\src\common\ceddk\ddk_bus\data.c

  00000			 AREA	 |.pdata|, PDATA
|$T43083| DCD	|$LN9@HalGetBusD|
	DCD	0x40002b02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HalGetBusDataByOffset| PROC

; 31   : ) {

  00000		 |$LN9@HalGetBusD|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M43080|
  00008	e1a05003	 mov         r5, r3

; 32   :     OAL_DDK_PARAMS params;
; 33   :     PCI_SLOT_NUMBER slot;
; 34   :     UINT32 outSize, rc = 0;
; 35   : 
; 36   :     params.function = IOCTL_OAL_READBUSDATA;

  0000c	e3a03003	 mov         r3, #3

; 37   :     params.rc = 0;

  00010	e3a0e000	 mov         lr, #0
  00014	e58d300c	 str         r3, [sp, #0xC]
  00018	e58de010	 str         lr, [sp, #0x10]
  0001c	e3a04000	 mov         r4, #0

; 38   :     switch (busDataType) {

  00020	e3500004	 cmp         r0, #4
  00024	1a00000b	 bne         |$LN3@HalGetBusD|

; 39   :     case PCIConfiguration:
; 40   :         params.busData.devLoc.IfcType = PCIBus;
; 41   :         slot.u.AsULONG = slotNumber;
; 42   :         params.busData.devLoc.BusNumber = busNumber >> 8;
; 43   :         params.busData.devLoc.LogicalLoc = (busNumber & 0xFF) << 16;
; 44   :         params.busData.devLoc.LogicalLoc |= slot.u.bits.DeviceNumber << 8;
; 45   :         params.busData.devLoc.LogicalLoc |= slot.u.bits.FunctionNumber;

  00028	e201e0ff	 and         lr, r1, #0xFF
  0002c	e202001f	 and         r0, r2, #0x1F
  00030	e180040e	 orr         r0, r0, lr, lsl #8
  00034	e1a00400	 mov         r0, r0, lsl #8
  00038	e1a02c02	 mov         r2, r2, lsl #24
  0003c	e1802ea2	 orr         r2, r0, r2, lsr #29
  00040	e3a03005	 mov         r3, #5
  00044	e1a01421	 mov         r1, r1, lsr #8
  00048	e58d201c	 str         r2, [sp, #0x1C]
  0004c	e58d3014	 str         r3, [sp, #0x14]
  00050	e58d1018	 str         r1, [sp, #0x18]

; 46   :         rc = TRUE;

  00054	e3a04001	 mov         r4, #1
  00058		 |$LN3@HalGetBusD|

; 47   :         break;
; 48   :     }
; 49   :     params.busData.offset = offset;

  00058	e59d3044	 ldr         r3, [sp, #0x44]

; 50   :     params.busData.length = length;

  0005c	e59d2048	 ldr         r2, [sp, #0x48]

; 51   :     params.busData.pBuffer = pBuffer;
; 52   : 
; 53   :     if (KernelIoControl(
; 54   :         IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, &outSize
; 55   :     )) {

  00060	e59f0040	 ldr         r0, [pc, #0x40]
  00064	e58d3028	 str         r3, [sp, #0x28]
  00068	e58d202c	 str         r2, [sp, #0x2C]
  0006c	e28de008	 add         lr, sp, #8
  00070	e3a06000	 mov         r6, #0
  00074	e3a03000	 mov         r3, #0
  00078	e3a02028	 mov         r2, #0x28
  0007c	e28d100c	 add         r1, sp, #0xC
  00080	e58d5030	 str         r5, [sp, #0x30]
  00084	e58de004	 str         lr, [sp, #4]
  00088	e58d6000	 str         r6, [sp]
  0008c	eb000000	 bl          KernelIoControl
  00090	e3500000	 cmp         r0, #0

; 56   :         rc = params.rc;

  00094	159d4010	 ldrne       r4, [sp, #0x10]

; 57   :     }
; 58   : 
; 59   :     return rc;
; 60   : }

  00098	e1a00004	 mov         r0, r4
  0009c	e28dd034	 add         sp, sp, #0x34
  000a0	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$LN10@HalGetBusD|
  000a8		 |$LN11@HalGetBusD|
  000a8	01010014	 DCD         0x1010014
  000ac		 |$M43081|

			 ENDP  ; |HalGetBusDataByOffset|

	EXPORT	|HalSetBusDataByOffset|

  00000			 AREA	 |.pdata|, PDATA
|$T43099| DCD	|$LN9@HalSetBusD|
	DCD	0x40002b02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HalSetBusDataByOffset| PROC

; 72   : ) {

  00000		 |$LN9@HalSetBusD|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M43096|
  00008	e1a05003	 mov         r5, r3

; 73   :     OAL_DDK_PARAMS params;
; 74   :     PCI_SLOT_NUMBER slot;
; 75   :     UINT32 outSize, rc = 0;
; 76   : 
; 77   :     params.function = IOCTL_OAL_WRITEBUSDATA;

  0000c	e3a03004	 mov         r3, #4

; 78   :     params.rc = 0;

  00010	e3a0e000	 mov         lr, #0
  00014	e58d300c	 str         r3, [sp, #0xC]
  00018	e58de010	 str         lr, [sp, #0x10]
  0001c	e3a04000	 mov         r4, #0

; 79   :     switch (busDataType) {

  00020	e3500004	 cmp         r0, #4
  00024	1a00000b	 bne         |$LN3@HalSetBusD|

; 80   :     case PCIConfiguration:
; 81   :         params.busData.devLoc.IfcType = PCIBus;
; 82   :         slot.u.AsULONG = slotNumber;
; 83   :         params.busData.devLoc.BusNumber = busNumber >> 8;
; 84   :         params.busData.devLoc.LogicalLoc = (busNumber & 0xFF) << 16;
; 85   :         params.busData.devLoc.LogicalLoc |= slot.u.bits.DeviceNumber << 8;
; 86   :         params.busData.devLoc.LogicalLoc |= slot.u.bits.FunctionNumber;

  00028	e201e0ff	 and         lr, r1, #0xFF
  0002c	e202001f	 and         r0, r2, #0x1F
  00030	e180040e	 orr         r0, r0, lr, lsl #8
  00034	e1a00400	 mov         r0, r0, lsl #8
  00038	e1a02c02	 mov         r2, r2, lsl #24
  0003c	e1802ea2	 orr         r2, r0, r2, lsr #29
  00040	e3a03005	 mov         r3, #5
  00044	e1a01421	 mov         r1, r1, lsr #8
  00048	e58d201c	 str         r2, [sp, #0x1C]
  0004c	e58d3014	 str         r3, [sp, #0x14]
  00050	e58d1018	 str         r1, [sp, #0x18]

; 87   :         rc = TRUE;

  00054	e3a04001	 mov         r4, #1
  00058		 |$LN3@HalSetBusD|

; 88   :         break;
; 89   :     }
; 90   :     params.busData.offset = offset;

  00058	e59d3044	 ldr         r3, [sp, #0x44]

; 91   :     params.busData.length = length;

  0005c	e59d2048	 ldr         r2, [sp, #0x48]

; 92   :     params.busData.pBuffer = pBuffer;
; 93   : 
; 94   :     if (KernelIoControl(
; 95   :         IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, &outSize
; 96   :     )) {

  00060	e59f0040	 ldr         r0, [pc, #0x40]
  00064	e58d3028	 str         r3, [sp, #0x28]
  00068	e58d202c	 str         r2, [sp, #0x2C]
  0006c	e28de008	 add         lr, sp, #8
  00070	e3a06000	 mov         r6, #0
  00074	e3a03000	 mov         r3, #0
  00078	e3a02028	 mov         r2, #0x28
  0007c	e28d100c	 add         r1, sp, #0xC
  00080	e58d5030	 str         r5, [sp, #0x30]
  00084	e58de004	 str         lr, [sp, #4]
  00088	e58d6000	 str         r6, [sp]
  0008c	eb000000	 bl          KernelIoControl
  00090	e3500000	 cmp         r0, #0

; 97   :         rc = params.rc;

  00094	159d4010	 ldrne       r4, [sp, #0x10]

; 98   :     }
; 99   : 
; 100  :     return rc;
; 101  : }

  00098	e1a00004	 mov         r0, r4
  0009c	e28dd034	 add         sp, sp, #0x34
  000a0	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$LN10@HalSetBusD|
  000a8		 |$LN11@HalSetBusD|
  000a8	01010014	 DCD         0x1010014
  000ac		 |$M43097|

			 ENDP  ; |HalSetBusDataByOffset|

	END
