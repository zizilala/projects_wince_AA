; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\IOCTL\securekeys.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1FA@KIKMJANO@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAG?$AAe?$AAt?$AAR?$AAe?$AAg?$AAS?$AAe?$AAc?$AAu?$AAr?$AAe?$AAK?$AAe?$AAy?$AAs?$AA?$CI?$AAr?$AAc?$AA?5@| [ DATA ] ; `string'
	EXPORT	|OALIoCtlHalGetRegSecureKeys|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|NKSetLastError|

  00000			 AREA	 |.pdata|, PDATA
|$T43023| DCD	|$LN10@OALIoCtlHa|
	DCD	0x40003804
; File c:\wince600\platform\common\src\common\ioctl\securekeys.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@KIKMJANO@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAG?$AAe?$AAt?$AAR?$AAe?$AAg?$AAS?$AAe?$AAc?$AAu?$AAr?$AAe?$AAK?$AAe?$AAy?$AAs?$AA?$CI?$AAr?$AAc?$AA?5@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "S"
	DCB	0x0, "e", 0x0, "c", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, "K"
	DCB	0x0, "e", 0x0, "y", 0x0, "s", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlHalGetRegSecureKeys| PROC

; 31   : {

  00000		 |$LN10@OALIoCtlHa|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M43020|

; 32   : 
; 33   :     BOOL rc;
; 34   : 
; 35   : #if defined ( project_smartfon ) || defined ( project_wpc )  // Smartphone or PocketPC build
; 36   :     // List of Secure registry keys
; 37   :     RegSecureKey OEMSecNames[] = {
; 38   :         { REGSEC_HKLM | REGSEC_HKCU, 8,  L"security" },
; 39   :         { REGSEC_HKLM, 6, L"loader" }
; 40   :     };
; 41   : 
; 42   :     RegSecureKeyList OEMSecList = {
; 43   :         sizeof(OEMSecNames) / sizeof(RegSecureKey),
; 44   :         OEMSecNames,
; 45   :     };
; 46   : 
; 47   :     DWORD dwName;
; 48   :     DWORD dwBufSize;
; 49   : 
; 50   :     // size of structs without names
; 51   :     dwBufSize = sizeof(OEMSecList) + sizeof(OEMSecNames);
; 52   : 
; 53   :     for (dwName = 0; dwName < OEMSecList.dwNumKeys; dwName++) 
; 54   :     {
; 55   :         dwBufSize += OEMSecNames[dwName].wLen * sizeof(WCHAR); // no nulls
; 56   :     }
; 57   : 
; 58   :     // First call: return the required buffer size
; 59   :     if (!lpInBuf && !nInBufSize && lpOutBuf && (nOutBufSize == sizeof(DWORD))) 
; 60   :     {
; 61   :         *((DWORD*)lpOutBuf) = dwBufSize;
; 62   :         if (lpBytesReturned)
; 63   :         {
; 64   :             *lpBytesReturned = sizeof(dwBufSize);
; 65   :         }
; 66   :         
; 67   :         rc = TRUE;
; 68   :     }
; 69   :     // Second call: fill the provided buffer
; 70   :     // nOutBufSize should be the same as returned on first call
; 71   :     else if (!lpInBuf && !nInBufSize && lpOutBuf && (nOutBufSize >= dwBufSize)) 
; 72   :     {                
; 73   :         RegSecureKeyList *pKeys = (RegSecureKeyList*)lpOutBuf;
; 74   : 
; 75   :         // pStr moves through the buffer as strings are written
; 76   :         LPWSTR pStr = (LPWSTR)((LPBYTE)lpOutBuf + sizeof(OEMSecList) + sizeof(OEMSecNames));
; 77   : 
; 78   :         pKeys->dwNumKeys = OEMSecList.dwNumKeys;
; 79   :         pKeys->pList = (RegSecureKey*) ((LPBYTE)lpOutBuf + sizeof(OEMSecList));
; 80   : 
; 81   :         for (dwName = 0; dwName < OEMSecList.dwNumKeys; dwName++) 
; 82   :         {
; 83   :             pKeys->pList[dwName].wRoots = OEMSecNames[dwName].wRoots;
; 84   :             pKeys->pList[dwName].wLen = OEMSecNames[dwName].wLen;
; 85   :             pKeys->pList[dwName].pName = pStr;
; 86   :             memcpy(pStr, OEMSecNames[dwName].pName, OEMSecNames[dwName].wLen * sizeof(WCHAR));
; 87   : 
; 88   :             pStr += OEMSecNames[dwName].wLen;
; 89   :         }
; 90   : 
; 91   :         if (lpBytesReturned)
; 92   :         {
; 93   :             *lpBytesReturned = dwBufSize;
; 94   :         }
; 95   : 
; 96   :         rc = TRUE;
; 97   :     } 
; 98   : #else  // Not Smartphone or PocketPC build; we have no registry keys to secure
; 99   :     // First call: return buffer size of 0.  We should not be called again.
; 100  :     if (!lpInBuf && !nInBufSize && lpOutBuf && (nOutBufSize == sizeof(DWORD))) 

  00010	e59d3018	 ldr         r3, [sp, #0x18]
  00014	e3530000	 cmp         r3, #0
  00018	1a000014	 bne         |$LN3@OALIoCtlHa|
  0001c	e59d301c	 ldr         r3, [sp, #0x1C]
  00020	e3530000	 cmp         r3, #0
  00024	1a000011	 bne         |$LN3@OALIoCtlHa|
  00028	e59d3020	 ldr         r3, [sp, #0x20]
  0002c	e3530000	 cmp         r3, #0
  00030	0a00000e	 beq         |$LN3@OALIoCtlHa|
  00034	e59d3024	 ldr         r3, [sp, #0x24]
  00038	e3530004	 cmp         r3, #4
  0003c	1a00000b	 bne         |$LN3@OALIoCtlHa|

; 101  :     {
; 102  :         *((DWORD*)lpOutBuf) = (DWORD)0;

  00040	e59d2020	 ldr         r2, [sp, #0x20]
  00044	e3a03000	 mov         r3, #0
  00048	e5823000	 str         r3, [r2]

; 103  :         if (lpBytesReturned)

  0004c	e59d3028	 ldr         r3, [sp, #0x28]
  00050	e3530000	 cmp         r3, #0
  00054	0a000002	 beq         |$LN2@OALIoCtlHa|

; 104  :         {
; 105  :             *lpBytesReturned = sizeof(DWORD);

  00058	e59d2028	 ldr         r2, [sp, #0x28]
  0005c	e3a03004	 mov         r3, #4
  00060	e5823000	 str         r3, [r2]
  00064		 |$LN2@OALIoCtlHa|

; 106  :         }
; 107  : 
; 108  :         rc = TRUE;

  00064	e3a03001	 mov         r3, #1
  00068	e58d3000	 str         r3, [sp]

; 109  :     }
; 110  : #endif
; 111  :     else 

  0006c	ea000003	 b           |$LN1@OALIoCtlHa|
  00070		 |$LN3@OALIoCtlHa|

; 112  :     {
; 113  :         // Invalid args
; 114  :         NKSetLastError(ERROR_INVALID_PARAMETER);

  00070	e3a00057	 mov         r0, #0x57
  00074	eb000000	 bl          NKSetLastError

; 115  :         rc = FALSE;

  00078	e3a03000	 mov         r3, #0
  0007c	e58d3000	 str         r3, [sp]
  00080		 |$LN1@OALIoCtlHa|

; 116  :     }
; 117  : 
; 118  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"-OALIoCtlHalGetRegSecureKeys(rc = %d)\r\n", rc));

  00080	e59f3054	 ldr         r3, [pc, #0x54]
  00084	e5933440	 ldr         r3, [r3, #0x440]
  00088	e3130a01	 tst         r3, #1, 20
  0008c	0a000009	 beq         |$LN6@OALIoCtlHa|
  00090	e59f3044	 ldr         r3, [pc, #0x44]
  00094	e5933440	 ldr         r3, [r3, #0x440]
  00098	e3130004	 tst         r3, #4
  0009c	0a000005	 beq         |$LN6@OALIoCtlHa|
  000a0	e59d1000	 ldr         r1, [sp]
  000a4	e59f002c	 ldr         r0, [pc, #0x2C]
  000a8	eb000000	 bl          NKDbgPrintfW
  000ac	e3a03001	 mov         r3, #1
  000b0	e58d3008	 str         r3, [sp, #8]
  000b4	ea000001	 b           |$LN7@OALIoCtlHa|
  000b8		 |$LN6@OALIoCtlHa|
  000b8	e3a03000	 mov         r3, #0
  000bc	e58d3008	 str         r3, [sp, #8]
  000c0		 |$LN7@OALIoCtlHa|

; 119  :     return (rc);

  000c0	e59d3000	 ldr         r3, [sp]
  000c4	e58d3004	 str         r3, [sp, #4]

; 120  : }

  000c8	e59d0004	 ldr         r0, [sp, #4]
  000cc	e28dd00c	 add         sp, sp, #0xC
  000d0	e89d6000	 ldmia       sp, {sp, lr}
  000d4	e12fff1e	 bx          lr
  000d8		 |$LN11@OALIoCtlHa|
  000d8		 |$LN12@OALIoCtlHa|
  000d8	00000000	 DCD         |??_C@_1FA@KIKMJANO@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAG?$AAe?$AAt?$AAR?$AAe?$AAg?$AAS?$AAe?$AAc?$AAu?$AAr?$AAe?$AAK?$AAe?$AAy?$AAs?$AA?$CI?$AAr?$AAc?$AA?5@|
  000dc		 |$LN13@OALIoCtlHa|
  000dc	00000000	 DCD         |dpCurSettings|
  000e0		 |$M43021|

			 ENDP  ; |OALIoCtlHalGetRegSecureKeys|

	END
