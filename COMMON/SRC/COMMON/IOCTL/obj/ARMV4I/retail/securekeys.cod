; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\IOCTL\securekeys.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALIoCtlHalGetRegSecureKeys|
	EXPORT	|??_C@_1FA@KIKMJANO@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAG?$AAe?$AAt?$AAR?$AAe?$AAg?$AAS?$AAe?$AAc?$AAu?$AAr?$AAe?$AAK?$AAe?$AAy?$AAs?$AA?$CI?$AAr?$AAc?$AA?5@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|NKSetLastError|
; File c:\wince600\platform\common\src\common\ioctl\securekeys.c

  00000			 AREA	 |.pdata|, PDATA
|$T43058| DCD	|$LN10@OALIoCtlHa|
	DCD	0x40002101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@KIKMJANO@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAG?$AAe?$AAt?$AAR?$AAe?$AAg?$AAS?$AAe?$AAc?$AAu?$AAr?$AAe?$AAK?$AAe?$AAy?$AAs?$AA?$CI?$AAr?$AAc?$AA?5@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "S"
	DCB	0x0, "e", 0x0, "c", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, "K"
	DCB	0x0, "e", 0x0, "y", 0x0, "s", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlHalGetRegSecureKeys| PROC

; 31   : {

  00000		 |$LN10@OALIoCtlHa|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43055|
  00004	e3510000	 cmp         r1, #0

; 32   : 
; 33   :     BOOL rc;
; 34   : 
; 35   : #if defined ( project_smartfon ) || defined ( project_wpc )  // Smartphone or PocketPC build
; 36   :     // List of Secure registry keys
; 37   :     RegSecureKey OEMSecNames[] = {
; 38   :         { REGSEC_HKLM | REGSEC_HKCU, 8,  L"security" },
; 39   :         { REGSEC_HKLM, 6, L"loader" }
; 40   :     };
; 41   : 
; 42   :     RegSecureKeyList OEMSecList = {
; 43   :         sizeof(OEMSecNames) / sizeof(RegSecureKey),
; 44   :         OEMSecNames,
; 45   :     };
; 46   : 
; 47   :     DWORD dwName;
; 48   :     DWORD dwBufSize;
; 49   : 
; 50   :     // size of structs without names
; 51   :     dwBufSize = sizeof(OEMSecList) + sizeof(OEMSecNames);
; 52   : 
; 53   :     for (dwName = 0; dwName < OEMSecList.dwNumKeys; dwName++) 
; 54   :     {
; 55   :         dwBufSize += OEMSecNames[dwName].wLen * sizeof(WCHAR); // no nulls
; 56   :     }
; 57   : 
; 58   :     // First call: return the required buffer size
; 59   :     if (!lpInBuf && !nInBufSize && lpOutBuf && (nOutBufSize == sizeof(DWORD))) 
; 60   :     {
; 61   :         *((DWORD*)lpOutBuf) = dwBufSize;
; 62   :         if (lpBytesReturned)
; 63   :         {
; 64   :             *lpBytesReturned = sizeof(dwBufSize);
; 65   :         }
; 66   :         
; 67   :         rc = TRUE;
; 68   :     }
; 69   :     // Second call: fill the provided buffer
; 70   :     // nOutBufSize should be the same as returned on first call
; 71   :     else if (!lpInBuf && !nInBufSize && lpOutBuf && (nOutBufSize >= dwBufSize)) 
; 72   :     {                
; 73   :         RegSecureKeyList *pKeys = (RegSecureKeyList*)lpOutBuf;
; 74   : 
; 75   :         // pStr moves through the buffer as strings are written
; 76   :         LPWSTR pStr = (LPWSTR)((LPBYTE)lpOutBuf + sizeof(OEMSecList) + sizeof(OEMSecNames));
; 77   : 
; 78   :         pKeys->dwNumKeys = OEMSecList.dwNumKeys;
; 79   :         pKeys->pList = (RegSecureKey*) ((LPBYTE)lpOutBuf + sizeof(OEMSecList));
; 80   : 
; 81   :         for (dwName = 0; dwName < OEMSecList.dwNumKeys; dwName++) 
; 82   :         {
; 83   :             pKeys->pList[dwName].wRoots = OEMSecNames[dwName].wRoots;
; 84   :             pKeys->pList[dwName].wLen = OEMSecNames[dwName].wLen;
; 85   :             pKeys->pList[dwName].pName = pStr;
; 86   :             memcpy(pStr, OEMSecNames[dwName].pName, OEMSecNames[dwName].wLen * sizeof(WCHAR));
; 87   : 
; 88   :             pStr += OEMSecNames[dwName].wLen;
; 89   :         }
; 90   : 
; 91   :         if (lpBytesReturned)
; 92   :         {
; 93   :             *lpBytesReturned = dwBufSize;
; 94   :         }
; 95   : 
; 96   :         rc = TRUE;
; 97   :     } 
; 98   : #else  // Not Smartphone or PocketPC build; we have no registry keys to secure
; 99   :     // First call: return buffer size of 0.  We should not be called again.
; 100  :     if (!lpInBuf && !nInBufSize && lpOutBuf && (nOutBufSize == sizeof(DWORD))) 

  00008	1a00000e	 bne         |$LN3@OALIoCtlHa|
  0000c	e3520000	 cmp         r2, #0
  00010	1a00000c	 bne         |$LN3@OALIoCtlHa|
  00014	e3530000	 cmp         r3, #0
  00018	0a00000a	 beq         |$LN3@OALIoCtlHa|
  0001c	e59d2008	 ldr         r2, [sp, #8]
  00020	e3520004	 cmp         r2, #4
  00024	1a000007	 bne         |$LN3@OALIoCtlHa|

; 101  :     {
; 102  :         *((DWORD*)lpOutBuf) = (DWORD)0;
; 103  :         if (lpBytesReturned)

  00028	e59d200c	 ldr         r2, [sp, #0xC]
  0002c	e3a01000	 mov         r1, #0
  00030	e5831000	 str         r1, [r3]
  00034	e3520000	 cmp         r2, #0

; 104  :         {
; 105  :             *lpBytesReturned = sizeof(DWORD);

  00038	13a03004	 movne       r3, #4
  0003c	15823000	 strne       r3, [r2]

; 106  :         }
; 107  : 
; 108  :         rc = TRUE;

  00040	e3a04001	 mov         r4, #1

; 109  :     }
; 110  : #endif
; 111  :     else 

  00044	ea000002	 b           |$LN1@OALIoCtlHa|
  00048		 |$LN3@OALIoCtlHa|

; 112  :     {
; 113  :         // Invalid args
; 114  :         NKSetLastError(ERROR_INVALID_PARAMETER);

  00048	e3a00057	 mov         r0, #0x57
  0004c	eb000000	 bl          NKSetLastError

; 115  :         rc = FALSE;

  00050	e3a04000	 mov         r4, #0
  00054		 |$LN1@OALIoCtlHa|

; 116  :     }
; 117  : 
; 118  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"-OALIoCtlHalGetRegSecureKeys(rc = %d)\r\n", rc));

  00054	e59f3024	 ldr         r3, [pc, #0x24]
  00058	e5933440	 ldr         r3, [r3, #0x440]
  0005c	e3130a01	 tst         r3, #1, 20
  00060	13130004	 tstne       r3, #4
  00064	159f0010	 ldrne       r0, [pc, #0x10]
  00068	11a01004	 movne       r1, r4
  0006c	1b000000	 blne        NKDbgPrintfW

; 119  :     return (rc);
; 120  : }

  00070	e1a00004	 mov         r0, r4
  00074	e8bd4010	 ldmia       sp!, {r4, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN11@OALIoCtlHa|
  0007c		 |$LN12@OALIoCtlHa|
  0007c	00000000	 DCD         |??_C@_1FA@KIKMJANO@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAG?$AAe?$AAt?$AAR?$AAe?$AAg?$AAS?$AAe?$AAc?$AAu?$AAr?$AAe?$AAK?$AAe?$AAy?$AAs?$AA?$CI?$AAr?$AAc?$AA?5@|
  00080		 |$LN13@OALIoCtlHa|
  00080	00000000	 DCD         |dpCurSettings|
  00084		 |$M43056|

			 ENDP  ; |OALIoCtlHalGetRegSecureKeys|

	END
