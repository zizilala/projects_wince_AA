; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\ETHDRV\LAN91C\lan91c.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|?bAllocRequest@?1??LAN91CSendFrame@@9@9| % 0x1		; `LAN91CSendFrame'::`2'::bAllocRequest

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1HI@OALEOGIF@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAm?$AAa?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@LHBCNPPI@?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAx?$AAx?$AAx?$AA?3?$AA?5?$AAC?$AAh?$AAi?$AAp?$AA?5?$AAI?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAR?$AAe?$AAv?$AAi?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@GHEPFGKN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAN?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AA?5?$AAC?$AAh?$AAi?$AAp?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@LKNBEDJA@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| [ DATA ] ; `string'
	EXPORT	|LAN91CInit|
	IMPORT	|WRITE_PORT_USHORT|
	IMPORT	|READ_PORT_USHORT|
	IMPORT	|OALStall|
	IMPORT	|OALLogSerial|
	IMPORT	|dpCurSettings|

  00001			 AREA	 |.bss|, NOINIT
|g_chipRevision| % 0x2
|g_pLAN91C| %	0x4

  00000			 AREA	 |.pdata|, PDATA
|$T43382| DCD	|$LN18@LAN91CInit|
	DCD	0x40011504
; File c:\wince600\platform\common\src\common\ethdrv\lan91c\lan91c.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@OALEOGIF@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAm?$AAa?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx@| DCB "-"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "m"
	DCB	0x0, "a", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x"
	DCB	0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, ":"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@LHBCNPPI@?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAx?$AAx?$AAx?$AA?3?$AA?5?$AAC?$AAh?$AAi?$AAp?$AA?5?$AAI?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAR?$AAe?$AAv?$AAi?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA?$CF@| DCB "L"
	DCB	0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C", 0x0, "x"
	DCB	0x0, "x", 0x0, "x", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "h"
	DCB	0x0, "i", 0x0, "p", 0x0, " ", 0x0, "I", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "s", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@GHEPFGKN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAN?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AA?5?$AAC?$AAh?$AAi?$AAp?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "e", 0x0, "t", 0x0, "w", 0x0, "o", 0x0, "r"
	DCB	0x0, "k", 0x0, " ", 0x0, "C", 0x0, "h", 0x0, "i", 0x0, "p"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "u", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "t", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@LKNBEDJA@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| DCB "+"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN91CInit| PROC

; 191  : {

  00000		 |$LN18@LAN91CInit|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd044	 sub         sp, sp, #0x44
  00010		 |$M43379|

; 192  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3010	 str         r3, [sp, #0x10]

; 193  : 
; 194  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 195  :         L"+LAN91CInit(0x%08x, 0x%08x, 0x%08x)\r\n", pAddress, offset, mac
; 196  :     ));

  00018	e59f341c	 ldr         r3, [pc, #0x41C]
  0001c	e5933440	 ldr         r3, [r3, #0x440]
  00020	e3130a02	 tst         r3, #2, 20
  00024	0a00000b	 beq         |$LN10@LAN91CInit|
  00028	e59f340c	 ldr         r3, [pc, #0x40C]
  0002c	e5933440	 ldr         r3, [r3, #0x440]
  00030	e3130004	 tst         r3, #4
  00034	0a000007	 beq         |$LN10@LAN91CInit|
  00038	e59d3054	 ldr         r3, [sp, #0x54]
  0003c	e59d2050	 ldr         r2, [sp, #0x50]
  00040	e59d104c	 ldr         r1, [sp, #0x4C]
  00044	e59f0404	 ldr         r0, [pc, #0x404]
  00048	eb000000	 bl          OALLogSerial
  0004c	e3a03001	 mov         r3, #1
  00050	e58d3028	 str         r3, [sp, #0x28]
  00054	ea000001	 b           |$LN11@LAN91CInit|
  00058		 |$LN10@LAN91CInit|
  00058	e3a03000	 mov         r3, #0
  0005c	e58d3028	 str         r3, [sp, #0x28]
  00060		 |$LN11@LAN91CInit|

; 197  : 
; 198  :     // Save address
; 199  :     g_pLAN91C = (LAN91C_REGS*)pAddress;

  00060	e59d204c	 ldr         r2, [sp, #0x4C]
  00064	e59f33d4	 ldr         r3, [pc, #0x3D4]
  00068	e5832000	 str         r2, [r3]

; 200  : 
; 201  :     // Chip settle time.
; 202  :     OALStall(750);

  0006c	e3a00c02	 mov         r0, #2, 24
  00070	e38000ee	 orr         r0, r0, #0xEE
  00074	eb000000	 bl          OALStall

; 203  : 
; 204  :     // Verify that network chip can be detected
; 205  :     if ((INPORT16(&g_pLAN91C->BANKSEL) & 0xFF00) != 0x3300) {

  00078	e59f33c0	 ldr         r3, [pc, #0x3C0]
  0007c	e5933000	 ldr         r3, [r3]
  00080	e283000e	 add         r0, r3, #0xE
  00084	eb000000	 bl          READ_PORT_USHORT
  00088	e1a03800	 mov         r3, r0, lsl #16
  0008c	e1a03823	 mov         r3, r3, lsr #16
  00090	e1cd32bc	 strh        r3, [sp, #0x2C]
  00094	e1dd32bc	 ldrh        r3, [sp, #0x2C]
  00098	e2033cff	 and         r3, r3, #0xFF, 24
  0009c	e3530c33	 cmp         r3, #0x33, 24
  000a0	0a00000c	 beq         |$LN7@LAN91CInit|

; 206  : 
; 207  :         OALMSGS(OAL_ERROR, (
; 208  :             L"ERROR: LAN91CInit: Network Chip not found at 0x%08x\r\n", pAddress
; 209  :         ));

  000a4	e59f3390	 ldr         r3, [pc, #0x390]
  000a8	e5933440	 ldr         r3, [r3, #0x440]
  000ac	e3130001	 tst         r3, #1
  000b0	0a000005	 beq         |$LN12@LAN91CInit|
  000b4	e59d104c	 ldr         r1, [sp, #0x4C]
  000b8	e59f038c	 ldr         r0, [pc, #0x38C]
  000bc	eb000000	 bl          OALLogSerial
  000c0	e3a03001	 mov         r3, #1
  000c4	e58d3030	 str         r3, [sp, #0x30]
  000c8	ea000001	 b           |$LN13@LAN91CInit|
  000cc		 |$LN12@LAN91CInit|
  000cc	e3a03000	 mov         r3, #0
  000d0	e58d3030	 str         r3, [sp, #0x30]
  000d4		 |$LN13@LAN91CInit|

; 210  :         goto cleanUp;

  000d4	ea0000a7	 b           |$cleanUp$43042|
  000d8		 |$LN7@LAN91CInit|

; 211  :     }
; 212  : 
; 213  :     // Select bank 3 and read the chip ID and revision.
; 214  :     OUTPORT16(&g_pLAN91C->BANKSEL, 3);

  000d8	e3a01003	 mov         r1, #3
  000dc	e59f335c	 ldr         r3, [pc, #0x35C]
  000e0	e5933000	 ldr         r3, [r3]
  000e4	e283000e	 add         r0, r3, #0xE
  000e8	eb000000	 bl          WRITE_PORT_USHORT

; 215  :     g_chipRevision = INPORT16(&g_pLAN91C->REV);

  000ec	e59f334c	 ldr         r3, [pc, #0x34C]
  000f0	e5933000	 ldr         r3, [r3]
  000f4	e283000a	 add         r0, r3, #0xA
  000f8	eb000000	 bl          READ_PORT_USHORT
  000fc	e1a03800	 mov         r3, r0, lsl #16
  00100	e1a03823	 mov         r3, r3, lsr #16
  00104	e1cd33b4	 strh        r3, [sp, #0x34]
  00108	e1dd23b4	 ldrh        r2, [sp, #0x34]
  0010c	e59f3330	 ldr         r3, [pc, #0x330]
  00110	e1c320b0	 strh        r2, [r3]

; 216  :     OALMSGS(TRUE, (
; 217  :         L"LAN91Cxxx: Chip Id %d Revision %d\r\n", 
; 218  :         GET_CHIP_ID(g_chipRevision), GET_REV_ID(g_chipRevision)
; 219  :     ));

  00114	e59f3328	 ldr         r3, [pc, #0x328]
  00118	e1d330b0	 ldrh        r3, [r3]
  0011c	e203200f	 and         r2, r3, #0xF
  00120	e59f331c	 ldr         r3, [pc, #0x31C]
  00124	e1d330b0	 ldrh        r3, [r3]
  00128	e1a03243	 mov         r3, r3, asr #4
  0012c	e203100f	 and         r1, r3, #0xF
  00130	e59f0310	 ldr         r0, [pc, #0x310]
  00134	eb000000	 bl          OALLogSerial

; 220  :            
; 221  :     // Select bank 1    
; 222  :     OUTPORT16(&g_pLAN91C->BANKSEL, 1);

  00138	e3a01001	 mov         r1, #1
  0013c	e59f32fc	 ldr         r3, [pc, #0x2FC]
  00140	e5933000	 ldr         r3, [r3]
  00144	e283000e	 add         r0, r3, #0xE
  00148	eb000000	 bl          WRITE_PORT_USHORT

; 223  : 
; 224  :     // Wait until reset & EEPROM load is done
; 225  :     OUTPORT16(&g_pLAN91C->CTR, CTR_RELOAD);

  0014c	e3a01002	 mov         r1, #2
  00150	e59f32e8	 ldr         r3, [pc, #0x2E8]
  00154	e5933000	 ldr         r3, [r3]
  00158	e283000c	 add         r0, r3, #0xC
  0015c	eb000000	 bl          WRITE_PORT_USHORT
  00160		 |$LN6@LAN91CInit|

; 226  :     while ((INPORT16(&g_pLAN91C->CTR) & (CTR_RELOAD|CTR_STORE)) != 0);

  00160	e59f32d8	 ldr         r3, [pc, #0x2D8]
  00164	e5933000	 ldr         r3, [r3]
  00168	e283000c	 add         r0, r3, #0xC
  0016c	eb000000	 bl          READ_PORT_USHORT
  00170	e1a03800	 mov         r3, r0, lsl #16
  00174	e1a03823	 mov         r3, r3, lsr #16
  00178	e1cd33b6	 strh        r3, [sp, #0x36]
  0017c	e1dd33b6	 ldrh        r3, [sp, #0x36]
  00180	e3130003	 tst         r3, #3
  00184	0a000000	 beq         |$LN5@LAN91CInit|
  00188	eafffff4	 b           |$LN6@LAN91CInit|
  0018c		 |$LN5@LAN91CInit|

; 227  : 
; 228  :     // Get MAC address from chip
; 229  :     mac[0] = INPORT16(&g_pLAN91C->IAR0);

  0018c	e59f32ac	 ldr         r3, [pc, #0x2AC]
  00190	e5933000	 ldr         r3, [r3]
  00194	e2830004	 add         r0, r3, #4
  00198	eb000000	 bl          READ_PORT_USHORT
  0019c	e1a03800	 mov         r3, r0, lsl #16
  001a0	e1a03823	 mov         r3, r3, lsr #16
  001a4	e1cd33b8	 strh        r3, [sp, #0x38]
  001a8	e1dd23b8	 ldrh        r2, [sp, #0x38]
  001ac	e59d3054	 ldr         r3, [sp, #0x54]
  001b0	e1c320b0	 strh        r2, [r3]

; 230  :     mac[1] = INPORT16(&g_pLAN91C->IAR1);

  001b4	e59f3284	 ldr         r3, [pc, #0x284]
  001b8	e5933000	 ldr         r3, [r3]
  001bc	e2830006	 add         r0, r3, #6
  001c0	eb000000	 bl          READ_PORT_USHORT
  001c4	e1a03800	 mov         r3, r0, lsl #16
  001c8	e1a03823	 mov         r3, r3, lsr #16
  001cc	e1cd33ba	 strh        r3, [sp, #0x3A]
  001d0	e59d3054	 ldr         r3, [sp, #0x54]
  001d4	e2832002	 add         r2, r3, #2
  001d8	e1dd33ba	 ldrh        r3, [sp, #0x3A]
  001dc	e1c230b0	 strh        r3, [r2]

; 231  :     mac[2] = INPORT16(&g_pLAN91C->IAR2);

  001e0	e59f3258	 ldr         r3, [pc, #0x258]
  001e4	e5933000	 ldr         r3, [r3]
  001e8	e2830008	 add         r0, r3, #8
  001ec	eb000000	 bl          READ_PORT_USHORT
  001f0	e1a03800	 mov         r3, r0, lsl #16
  001f4	e1a03823	 mov         r3, r3, lsr #16
  001f8	e1cd33bc	 strh        r3, [sp, #0x3C]
  001fc	e59d3054	 ldr         r3, [sp, #0x54]
  00200	e2832004	 add         r2, r3, #4
  00204	e1dd33bc	 ldrh        r3, [sp, #0x3C]
  00208	e1c230b0	 strh        r3, [r2]

; 232  : 
; 233  :     // Initialize the control register
; 234  :     switch (GET_CHIP_ID(g_chipRevision)) {

  0020c	e59f3230	 ldr         r3, [pc, #0x230]
  00210	e1d330b0	 ldrh        r3, [r3]
  00214	e1a03243	 mov         r3, r3, asr #4
  00218	e203300f	 and         r3, r3, #0xF
  0021c	e3530009	 cmp         r3, #9
  00220	0a000000	 beq         |$LN2@LAN91CInit|
  00224	ea000013	 b           |$LN1@LAN91CInit|
  00228		 |$LN2@LAN91CInit|

; 235  :     case CHIP_ID_LAN91C111:
; 236  :         OUTPORT16(&g_pLAN91C->CTR, CTR_TEEN);

  00228	e3a01020	 mov         r1, #0x20
  0022c	e59f320c	 ldr         r3, [pc, #0x20C]
  00230	e5933000	 ldr         r3, [r3]
  00234	e283000c	 add         r0, r3, #0xC
  00238	eb000000	 bl          WRITE_PORT_USHORT

; 237  :         // The LAN91C111's internal PHY is disabled at boot time - enable it.
; 238  :         PhyWrite(0, 0, CONTROL_MII_DIS);

  0023c	e3a02a03	 mov         r2, #3, 20
  00240	e3a01000	 mov         r1, #0
  00244	e3a00000	 mov         r0, #0
  00248	eb000000	 bl          PhyWrite

; 239  :         // Enable auto-negotiation of link speed.
; 240  :         OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  0024c	e3a01000	 mov         r1, #0
  00250	e59f31e8	 ldr         r3, [pc, #0x1E8]
  00254	e5933000	 ldr         r3, [r3]
  00258	e283000e	 add         r0, r3, #0xE
  0025c	eb000000	 bl          WRITE_PORT_USHORT

; 241  :         OUTPORT16(&g_pLAN91C->MCRPCR, 0x0800);

  00260	e3a01b02	 mov         r1, #2, 22
  00264	e59f31d4	 ldr         r3, [pc, #0x1D4]
  00268	e5933000	 ldr         r3, [r3]
  0026c	e283000a	 add         r0, r3, #0xA
  00270	eb000000	 bl          WRITE_PORT_USHORT

; 242  :         break;

  00274	ea000020	 b           |$LN3@LAN91CInit|
  00278		 |$LN1@LAN91CInit|

; 243  :     default:
; 244  :         // Set SQUELCH & NO WAIT bits
; 245  :         OUTPORT16(&g_pLAN91C->BANKSEL, 1);

  00278	e3a01001	 mov         r1, #1
  0027c	e59f31bc	 ldr         r3, [pc, #0x1BC]
  00280	e5933000	 ldr         r3, [r3]
  00284	e283000e	 add         r0, r3, #0xE
  00288	eb000000	 bl          WRITE_PORT_USHORT

; 246  :         SETPORT16(&g_pLAN91C->CR, CR_SETSQLCH|CR_NOWAIT);

  0028c	e59f31ac	 ldr         r3, [pc, #0x1AC]
  00290	e5930000	 ldr         r0, [r3]
  00294	eb000000	 bl          READ_PORT_USHORT
  00298	e1a03800	 mov         r3, r0, lsl #16
  0029c	e1a03823	 mov         r3, r3, lsr #16
  002a0	e1cd33be	 strh        r3, [sp, #0x3E]
  002a4	e1dd33be	 ldrh        r3, [sp, #0x3E]
  002a8	e3833c12	 orr         r3, r3, #0x12, 24
  002ac	e1a01803	 mov         r1, r3, lsl #16
  002b0	e1a01821	 mov         r1, r1, lsr #16
  002b4	e59f3184	 ldr         r3, [pc, #0x184]
  002b8	e5930000	 ldr         r0, [r3]
  002bc	eb000000	 bl          WRITE_PORT_USHORT

; 247  :         OUTPORT16(&g_pLAN91C->CTR, CTR_BIT8|CTR_TEEN);

  002c0	e3a01e12	 mov         r1, #0x12, 28
  002c4	e59f3174	 ldr         r3, [pc, #0x174]
  002c8	e5933000	 ldr         r3, [r3]
  002cc	e283000c	 add         r0, r3, #0xC
  002d0	eb000000	 bl          WRITE_PORT_USHORT

; 248  :         // Memory configuration register value.
; 249  :         OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  002d4	e3a01000	 mov         r1, #0
  002d8	e59f3160	 ldr         r3, [pc, #0x160]
  002dc	e5933000	 ldr         r3, [r3]
  002e0	e283000e	 add         r0, r3, #0xE
  002e4	eb000000	 bl          WRITE_PORT_USHORT

; 250  :         OUTPORT16(&g_pLAN91C->MCRPCR, 0x0006);

  002e8	e3a01006	 mov         r1, #6
  002ec	e59f314c	 ldr         r3, [pc, #0x14C]
  002f0	e5933000	 ldr         r3, [r3]
  002f4	e283000a	 add         r0, r3, #0xA
  002f8	eb000000	 bl          WRITE_PORT_USHORT
  002fc		 |$LN3@LAN91CInit|

; 251  :     }
; 252  : 
; 253  :     // Initialize transmit control register
; 254  :     OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  002fc	e3a01000	 mov         r1, #0
  00300	e59f3138	 ldr         r3, [pc, #0x138]
  00304	e5933000	 ldr         r3, [r3]
  00308	e283000e	 add         r0, r3, #0xE
  0030c	eb000000	 bl          WRITE_PORT_USHORT

; 255  :     OUTPORT16(&g_pLAN91C->TCR, TCR_PADEN|TCR_TXEN);

  00310	e3a01081	 mov         r1, #0x81
  00314	e59f3124	 ldr         r3, [pc, #0x124]
  00318	e5930000	 ldr         r0, [r3]
  0031c	eb000000	 bl          WRITE_PORT_USHORT

; 256  : 
; 257  :     // Initialize interrupt mask register (all ints disabled to start)
; 258  :     OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  00320	e3a01002	 mov         r1, #2
  00324	e59f3114	 ldr         r3, [pc, #0x114]
  00328	e5933000	 ldr         r3, [r3]
  0032c	e283000e	 add         r0, r3, #0xE
  00330	eb000000	 bl          WRITE_PORT_USHORT

; 259  :     OUTPORT16(&g_pLAN91C->INTR, 0);

  00334	e3a01000	 mov         r1, #0
  00338	e59f3100	 ldr         r3, [pc, #0x100]
  0033c	e5933000	 ldr         r3, [r3]
  00340	e283000c	 add         r0, r3, #0xC
  00344	eb000000	 bl          WRITE_PORT_USHORT

; 260  : 
; 261  :     // Initialize the Receive Control Register
; 262  :     OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  00348	e3a01000	 mov         r1, #0
  0034c	e59f30ec	 ldr         r3, [pc, #0xEC]
  00350	e5933000	 ldr         r3, [r3]
  00354	e283000e	 add         r0, r3, #0xE
  00358	eb000000	 bl          WRITE_PORT_USHORT

; 263  :     OUTPORT16(&g_pLAN91C->RCR, RCR_RXEN|RCR_STRIP_CRC);

  0035c	e3a01c03	 mov         r1, #3, 24
  00360	e59f30d8	 ldr         r3, [pc, #0xD8]
  00364	e5933000	 ldr         r3, [r3]
  00368	e2830004	 add         r0, r3, #4
  0036c	eb000000	 bl          WRITE_PORT_USHORT

; 264  : 
; 265  :     // We are done
; 266  :     rc = TRUE;

  00370	e3a03001	 mov         r3, #1
  00374	e58d3010	 str         r3, [sp, #0x10]
  00378		 |$cleanUp$43042|

; 267  : 
; 268  : cleanUp:
; 269  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 270  :         L"-LAN91CInit(mac = %02x:%02x:%02x:%02x:%02x:%02x, rc = %d)\r\n",
; 271  :         mac[0]&0xFF, mac[0]>>8, mac[1]&0xFF, mac[1]>>8, mac[2]&0xFF, mac[2]>>8,
; 272  :         rc
; 273  :     ));

  00378	e59f30bc	 ldr         r3, [pc, #0xBC]
  0037c	e5933440	 ldr         r3, [r3, #0x440]
  00380	e3130a02	 tst         r3, #2, 20
  00384	0a000023	 beq         |$LN14@LAN91CInit|
  00388	e59f30ac	 ldr         r3, [pc, #0xAC]
  0038c	e5933440	 ldr         r3, [r3, #0x440]
  00390	e3130004	 tst         r3, #4
  00394	0a00001f	 beq         |$LN14@LAN91CInit|
  00398	e59d3010	 ldr         r3, [sp, #0x10]
  0039c	e58d300c	 str         r3, [sp, #0xC]
  003a0	e59d3054	 ldr         r3, [sp, #0x54]
  003a4	e2833004	 add         r3, r3, #4
  003a8	e1d330b0	 ldrh        r3, [r3]
  003ac	e1a03443	 mov         r3, r3, asr #8
  003b0	e58d3008	 str         r3, [sp, #8]
  003b4	e59d3054	 ldr         r3, [sp, #0x54]
  003b8	e2833004	 add         r3, r3, #4
  003bc	e1d330b0	 ldrh        r3, [r3]
  003c0	e20330ff	 and         r3, r3, #0xFF
  003c4	e58d3004	 str         r3, [sp, #4]
  003c8	e59d3054	 ldr         r3, [sp, #0x54]
  003cc	e2833002	 add         r3, r3, #2
  003d0	e1d330b0	 ldrh        r3, [r3]
  003d4	e1a03443	 mov         r3, r3, asr #8
  003d8	e58d3000	 str         r3, [sp]
  003dc	e59d3054	 ldr         r3, [sp, #0x54]
  003e0	e2833002	 add         r3, r3, #2
  003e4	e1d330b0	 ldrh        r3, [r3]
  003e8	e20330ff	 and         r3, r3, #0xFF
  003ec	e59d2054	 ldr         r2, [sp, #0x54]
  003f0	e1d220b0	 ldrh        r2, [r2]
  003f4	e1a02442	 mov         r2, r2, asr #8
  003f8	e59d1054	 ldr         r1, [sp, #0x54]
  003fc	e1d110b0	 ldrh        r1, [r1]
  00400	e20110ff	 and         r1, r1, #0xFF
  00404	e59f002c	 ldr         r0, [pc, #0x2C]
  00408	eb000000	 bl          OALLogSerial
  0040c	e3a03001	 mov         r3, #1
  00410	e58d3040	 str         r3, [sp, #0x40]
  00414	ea000001	 b           |$LN15@LAN91CInit|
  00418		 |$LN14@LAN91CInit|
  00418	e3a03000	 mov         r3, #0
  0041c	e58d3040	 str         r3, [sp, #0x40]
  00420		 |$LN15@LAN91CInit|

; 274  : 
; 275  :     return rc;

  00420	e59d3010	 ldr         r3, [sp, #0x10]
  00424	e58d3024	 str         r3, [sp, #0x24]

; 276  : }

  00428	e59d0024	 ldr         r0, [sp, #0x24]
  0042c	e28dd044	 add         sp, sp, #0x44
  00430	e89d6000	 ldmia       sp, {sp, lr}
  00434	e12fff1e	 bx          lr
  00438		 |$LN19@LAN91CInit|
  00438		 |$LN20@LAN91CInit|
  00438	00000000	 DCD         |??_C@_1HI@OALEOGIF@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAm?$AAa?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx@|
  0043c		 |$LN21@LAN91CInit|
  0043c	00000000	 DCD         |dpCurSettings|
  00440		 |$LN22@LAN91CInit|
  00440	00000000	 DCD         |g_pLAN91C|
  00444		 |$LN23@LAN91CInit|
  00444	00000000	 DCD         |g_chipRevision|
  00448		 |$LN24@LAN91CInit|
  00448	00000000	 DCD         |??_C@_1EI@LHBCNPPI@?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAx?$AAx?$AAx?$AA?3?$AA?5?$AAC?$AAh?$AAi?$AAp?$AA?5?$AAI?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAR?$AAe?$AAv?$AAi?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA?$CF@|
  0044c		 |$LN25@LAN91CInit|
  0044c	00000000	 DCD         |??_C@_1GM@GHEPFGKN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAN?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AA?5?$AAC?$AAh?$AAi?$AAp?$AA?5@|
  00450		 |$LN26@LAN91CInit|
  00450	00000000	 DCD         |??_C@_1EM@LKNBEDJA@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@|
  00454		 |$M43380|

			 ENDP  ; |LAN91CInit|

	EXPORT	|??_C@_17KPMHKKFB@?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@LOBBLJNF@?$AA1?$AA6?$AAC?$AAO?$AAL?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@CEELOPKH@?$AAL?$AAA?$AAT?$AAC?$AAO?$AAL?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@EFNCOOHA@?$AAL?$AAO?$AAS?$AAT?$AAC?$AAA?$AAR?$AAR?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@MPEJHFEM@?$AAS?$AAQ?$AAE?$AAT?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LNLGMPHE@?$AAT?$AAX?$AAU?$AAN?$AAR?$AAN?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@PLHGEHHE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JE@LLHOKEHL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@PPLHHMGG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@FLGHILHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu@| [ DATA ] ; `string'
	EXPORT	|LAN91CSendFrame|
	IMPORT	|OALGetTickCount|

  00008			 AREA	 |.pdata|, PDATA
|$T43416| DCD	|$LN64@LAN91CSend|
	DCD	0x40021804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17KPMHKKFB@?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB ")", 0x0, 0xd, 0x0
	DCB	0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@LOBBLJNF@?$AA1?$AA6?$AAC?$AAO?$AAL?$AA?5?$AA?$AA@| DCB "1", 0x0
	DCB	"6", 0x0, "C", 0x0, "O", 0x0, "L", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@CEELOPKH@?$AAL?$AAA?$AAT?$AAC?$AAO?$AAL?$AA?5?$AA?$AA@| DCB "L"
	DCB	0x0, "A", 0x0, "T", 0x0, "C", 0x0, "O", 0x0, "L", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@EFNCOOHA@?$AAL?$AAO?$AAS?$AAT?$AAC?$AAA?$AAR?$AAR?$AA?5?$AA?$AA@| DCB "L"
	DCB	0x0, "O", 0x0, "S", 0x0, "T", 0x0, "C", 0x0, "A", 0x0, "R"
	DCB	0x0, "R", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@MPEJHFEM@?$AAS?$AAQ?$AAE?$AAT?$AA?5?$AA?$AA@| DCB "S", 0x0, "Q", 0x0
	DCB	"E", 0x0, "T", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LNLGMPHE@?$AAT?$AAX?$AAU?$AAN?$AAR?$AAN?$AA?5?$AA?$AA@| DCB "T"
	DCB	0x0, "X", 0x0, "U", 0x0, "N", 0x0, "R", 0x0, "N", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@PLHGEHHE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "F", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "(", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@LLHOKEHL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "F", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@PPLHHMGG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "F", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@FLGHILHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "F", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "a", 0x0, "m"
	DCB	0x0, "e", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00454			 AREA	 |.text|, CODE, ARM

  00454		 |LAN91CSendFrame| PROC

; 282  : {

  00454		 |$LN64@LAN91CSend|
  00454	e1a0c00d	 mov         r12, sp
  00458	e92d0003	 stmdb       sp!, {r0, r1}
  0045c	e92d5000	 stmdb       sp!, {r12, lr}
  00460	e24dd068	 sub         sp, sp, #0x68
  00464		 |$M43413|

; 283  :     UINT16 rc = 0;

  00464	e3a03000	 mov         r3, #0
  00468	e1cd30b0	 strh        r3, [sp]

; 284  :     UINT16 bufferSize, frameHandle;
; 285  :     UINT16 packetNumber;
; 286  :     UINT32 startTime;
; 287  :     static BOOLEAN bAllocRequest = FALSE;
; 288  : 
; 289  :     // Calculate the amount of memory needed (must be an even number)
; 290  :     bufferSize = 2 + 2 + (UINT16)length + 1;

  0046c	e59d3074	 ldr         r3, [sp, #0x74]
  00470	e1a03803	 mov         r3, r3, lsl #16
  00474	e1a03823	 mov         r3, r3, lsr #16
  00478	e2833005	 add         r3, r3, #5
  0047c	e1a03803	 mov         r3, r3, lsl #16
  00480	e1a03823	 mov         r3, r3, lsr #16
  00484	e1cd30bc	 strh        r3, [sp, #0xC]

; 291  :     if ((bufferSize & 1) != 0) bufferSize++;

  00488	e1dd30bc	 ldrh        r3, [sp, #0xC]
  0048c	e3130001	 tst         r3, #1
  00490	0a000004	 beq         |$LN39@LAN91CSend|
  00494	e1dd30bc	 ldrh        r3, [sp, #0xC]
  00498	e2833001	 add         r3, r3, #1
  0049c	e1a03803	 mov         r3, r3, lsl #16
  004a0	e1a03823	 mov         r3, r3, lsr #16
  004a4	e1cd30bc	 strh        r3, [sp, #0xC]
  004a8		 |$LN39@LAN91CSend|

; 292  : 
; 293  :     switch (GET_CHIP_ID(g_chipRevision)) {

  004a8	e59f37f0	 ldr         r3, [pc, #0x7F0]
  004ac	e1d330b0	 ldrh        r3, [r3]
  004b0	e1a03243	 mov         r3, r3, asr #4
  004b4	e203300f	 and         r3, r3, #0xF
  004b8	e3530009	 cmp         r3, #9
  004bc	0a000000	 beq         |$LN36@LAN91CSend|
  004c0	ea000035	 b           |$LN31@LAN91CSend|
  004c4		 |$LN36@LAN91CSend|

; 294  :     case CHIP_ID_LAN91C111:
; 295  :         // Make sure there's enough free Tx memory.
; 296  :         OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  004c4	e3a01000	 mov         r1, #0
  004c8	e59f37ac	 ldr         r3, [pc, #0x7AC]
  004cc	e5933000	 ldr         r3, [r3]
  004d0	e283000e	 add         r0, r3, #0xE
  004d4	eb000000	 bl          WRITE_PORT_USHORT

; 297  :         if ((INPORT16(&g_pLAN91C->MIR) >> 8) == 0) {

  004d8	e59f379c	 ldr         r3, [pc, #0x79C]
  004dc	e5933000	 ldr         r3, [r3]
  004e0	e2830008	 add         r0, r3, #8
  004e4	eb000000	 bl          READ_PORT_USHORT
  004e8	e1a03800	 mov         r3, r0, lsl #16
  004ec	e1a03823	 mov         r3, r3, lsr #16
  004f0	e1cd31b4	 strh        r3, [sp, #0x14]
  004f4	e1dd31b4	 ldrh        r3, [sp, #0x14]
  004f8	e1b03443	 movs        r3, r3, asr #8
  004fc	1a000015	 bne         |$LN35@LAN91CSend|

; 298  :             // No memory?  Reset the MMU.
; 299  :             OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  00500	e3a01002	 mov         r1, #2
  00504	e59f3770	 ldr         r3, [pc, #0x770]
  00508	e5933000	 ldr         r3, [r3]
  0050c	e283000e	 add         r0, r3, #0xE
  00510	eb000000	 bl          WRITE_PORT_USHORT

; 300  :             OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_111_RESET_MMU);

  00514	e3a01040	 mov         r1, #0x40
  00518	e59f375c	 ldr         r3, [pc, #0x75C]
  0051c	e5930000	 ldr         r0, [r3]
  00520	eb000000	 bl          WRITE_PORT_USHORT
  00524		 |$LN34@LAN91CSend|

; 301  :             while ((INPORT16(&g_pLAN91C->MMUCR) & MMUCR_BUSY) != 0);

  00524	e59f3750	 ldr         r3, [pc, #0x750]
  00528	e5930000	 ldr         r0, [r3]
  0052c	eb000000	 bl          READ_PORT_USHORT
  00530	e1a03800	 mov         r3, r0, lsl #16
  00534	e1a03823	 mov         r3, r3, lsr #16
  00538	e1cd31b6	 strh        r3, [sp, #0x16]
  0053c	e1dd31b6	 ldrh        r3, [sp, #0x16]
  00540	e3130001	 tst         r3, #1
  00544	0a000000	 beq         |$LN33@LAN91CSend|
  00548	eafffff5	 b           |$LN34@LAN91CSend|
  0054c		 |$LN33@LAN91CSend|

; 302  : 
; 303  :             bAllocRequest = FALSE;

  0054c	e59f2758	 ldr         r2, [pc, #0x758]
  00550	e3a03000	 mov         r3, #0
  00554	e5c23000	 strb        r3, [r2]
  00558		 |$LN35@LAN91CSend|

; 304  :         }
; 305  :         // Allocate memory in the buffer for the frame
; 306  :         OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  00558	e3a01002	 mov         r1, #2
  0055c	e59f3718	 ldr         r3, [pc, #0x718]
  00560	e5933000	 ldr         r3, [r3]
  00564	e283000e	 add         r0, r3, #0xE
  00568	eb000000	 bl          WRITE_PORT_USHORT

; 307  :         if (!bAllocRequest)

  0056c	e59f3738	 ldr         r3, [pc, #0x738]
  00570	e5d33000	 ldrb        r3, [r3]
  00574	e3530000	 cmp         r3, #0
  00578	1a000006	 bne         |$LN32@LAN91CSend|

; 308  :         {
; 309  :             OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_111_ALLOC_TX);

  0057c	e3a01020	 mov         r1, #0x20
  00580	e59f36f4	 ldr         r3, [pc, #0x6F4]
  00584	e5930000	 ldr         r0, [r3]
  00588	eb000000	 bl          WRITE_PORT_USHORT

; 310  :             bAllocRequest = TRUE;

  0058c	e59f2718	 ldr         r2, [pc, #0x718]
  00590	e3a03001	 mov         r3, #1
  00594	e5c23000	 strb        r3, [r2]
  00598		 |$LN32@LAN91CSend|

; 311  :         }
; 312  :         break;

  00598	ea00000c	 b           |$LN37@LAN91CSend|
  0059c		 |$LN31@LAN91CSend|

; 313  :     default:
; 314  :         // Allocate memory in the buffer for the frame
; 315  :         OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  0059c	e3a01002	 mov         r1, #2
  005a0	e59f36d4	 ldr         r3, [pc, #0x6D4]
  005a4	e5933000	 ldr         r3, [r3]
  005a8	e283000e	 add         r0, r3, #0xE
  005ac	eb000000	 bl          WRITE_PORT_USHORT

; 316  :         OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_ALLOC|(bufferSize >> 8));

  005b0	e1dd30bc	 ldrh        r3, [sp, #0xC]
  005b4	e1a03443	 mov         r3, r3, asr #8
  005b8	e3833020	 orr         r3, r3, #0x20
  005bc	e1a01803	 mov         r1, r3, lsl #16
  005c0	e1a01821	 mov         r1, r1, lsr #16
  005c4	e59f36b0	 ldr         r3, [pc, #0x6B0]
  005c8	e5930000	 ldr         r0, [r3]
  005cc	eb000000	 bl          WRITE_PORT_USHORT
  005d0		 |$LN37@LAN91CSend|

; 317  :     }
; 318  : 
; 319  :     // Loop until the request is satisfied
; 320  :     startTime = OALGetTickCount();

  005d0	eb000000	 bl          OALGetTickCount
  005d4	e58d0018	 str         r0, [sp, #0x18]
  005d8	e59d3018	 ldr         r3, [sp, #0x18]
  005dc	e58d3008	 str         r3, [sp, #8]
  005e0		 |$LN30@LAN91CSend|

; 321  :     while ((OALGetTickCount() - startTime) < TIMEOUT_VALUE)

  005e0	eb000000	 bl          OALGetTickCount
  005e4	e58d001c	 str         r0, [sp, #0x1C]
  005e8	e59d201c	 ldr         r2, [sp, #0x1C]
  005ec	e59d3008	 ldr         r3, [sp, #8]
  005f0	e0422003	 sub         r2, r2, r3
  005f4	e3a03c75	 mov         r3, #0x75, 24
  005f8	e3833030	 orr         r3, r3, #0x30
  005fc	e1520003	 cmp         r2, r3
  00600	2a00000b	 bcs         |$LN29@LAN91CSend|

; 322  :     {
; 323  :         if (INPORT16(&g_pLAN91C->INTR) & INTR_ALLOC)

  00604	e59f3670	 ldr         r3, [pc, #0x670]
  00608	e5933000	 ldr         r3, [r3]
  0060c	e283000c	 add         r0, r3, #0xC
  00610	eb000000	 bl          READ_PORT_USHORT
  00614	e1a03800	 mov         r3, r0, lsl #16
  00618	e1a03823	 mov         r3, r3, lsr #16
  0061c	e1cd32b0	 strh        r3, [sp, #0x20]
  00620	e1dd32b0	 ldrh        r3, [sp, #0x20]
  00624	e3130008	 tst         r3, #8
  00628	0a000000	 beq         |$LN28@LAN91CSend|

; 324  :         {
; 325  :             break;

  0062c	ea000000	 b           |$LN29@LAN91CSend|
  00630		 |$LN28@LAN91CSend|

; 326  :         }
; 327  :     }

  00630	eaffffea	 b           |$LN30@LAN91CSend|
  00634		 |$LN29@LAN91CSend|

; 328  :     // If we couldn't satisfy the allocation, abort - we'll give the
; 329  :     // receive side time to free up some space in the MMU, then we'll
; 330  :     // re-check whether the allocation succeeded on the next call.
; 331  :     if ((INPORT16(&g_pLAN91C->INTR) & INTR_ALLOC) == 0)

  00634	e59f3640	 ldr         r3, [pc, #0x640]
  00638	e5933000	 ldr         r3, [r3]
  0063c	e283000c	 add         r0, r3, #0xC
  00640	eb000000	 bl          READ_PORT_USHORT
  00644	e1a03800	 mov         r3, r0, lsl #16
  00648	e1a03823	 mov         r3, r3, lsr #16
  0064c	e1cd32b2	 strh        r3, [sp, #0x22]
  00650	e1dd32b2	 ldrh        r3, [sp, #0x22]
  00654	e3130008	 tst         r3, #8
  00658	1a00000d	 bne         |$LN27@LAN91CSend|

; 332  :     {
; 333  :         OALMSGS(OAL_ERROR, (L"ERROR: LAN91CSendFrame: Timed out allocating frame.\r\n"));

  0065c	e59f3620	 ldr         r3, [pc, #0x620]
  00660	e5933440	 ldr         r3, [r3, #0x440]
  00664	e3130001	 tst         r3, #1
  00668	0a000004	 beq         |$LN42@LAN91CSend|
  0066c	e59f063c	 ldr         r0, [pc, #0x63C]
  00670	eb000000	 bl          OALLogSerial
  00674	e3a03001	 mov         r3, #1
  00678	e58d3024	 str         r3, [sp, #0x24]
  0067c	ea000001	 b           |$LN43@LAN91CSend|
  00680		 |$LN42@LAN91CSend|
  00680	e3a03000	 mov         r3, #0
  00684	e58d3024	 str         r3, [sp, #0x24]
  00688		 |$LN43@LAN91CSend|

; 334  :         return(1);

  00688	e3a03001	 mov         r3, #1
  0068c	e1cd31b0	 strh        r3, [sp, #0x10]
  00690	ea000175	 b           |$LN40@LAN91CSend|
  00694		 |$LN27@LAN91CSend|

; 335  :     }
; 336  : 
; 337  :     bAllocRequest = FALSE;

  00694	e59f2610	 ldr         r2, [pc, #0x610]
  00698	e3a03000	 mov         r3, #0
  0069c	e5c23000	 strb        r3, [r2]

; 338  : 
; 339  :     // Make sure the allocation didn't fail.
; 340  :     if (INPORT16(&g_pLAN91C->PNRARR) & 0x8000)

  006a0	e59f35d4	 ldr         r3, [pc, #0x5D4]
  006a4	e5933000	 ldr         r3, [r3]
  006a8	e2830002	 add         r0, r3, #2
  006ac	eb000000	 bl          READ_PORT_USHORT
  006b0	e1a03800	 mov         r3, r0, lsl #16
  006b4	e1a03823	 mov         r3, r3, lsr #16
  006b8	e1cd32b8	 strh        r3, [sp, #0x28]
  006bc	e1dd32b8	 ldrh        r3, [sp, #0x28]
  006c0	e3130902	 tst         r3, #2, 18
  006c4	0a00000d	 beq         |$LN26@LAN91CSend|

; 341  :     {
; 342  :         OALMSGS(OAL_ERROR, (L"ERROR: LAN91CSendFrame: Failed to allocate frame.\r\n"));

  006c8	e59f35b4	 ldr         r3, [pc, #0x5B4]
  006cc	e5933440	 ldr         r3, [r3, #0x440]
  006d0	e3130001	 tst         r3, #1
  006d4	0a000004	 beq         |$LN44@LAN91CSend|
  006d8	e59f05c8	 ldr         r0, [pc, #0x5C8]
  006dc	eb000000	 bl          OALLogSerial
  006e0	e3a03001	 mov         r3, #1
  006e4	e58d302c	 str         r3, [sp, #0x2C]
  006e8	ea000001	 b           |$LN45@LAN91CSend|
  006ec		 |$LN44@LAN91CSend|
  006ec	e3a03000	 mov         r3, #0
  006f0	e58d302c	 str         r3, [sp, #0x2C]
  006f4		 |$LN45@LAN91CSend|

; 343  :         return(1);

  006f4	e3a03001	 mov         r3, #1
  006f8	e1cd31b0	 strh        r3, [sp, #0x10]
  006fc	ea00015a	 b           |$LN40@LAN91CSend|
  00700		 |$LN26@LAN91CSend|

; 344  :     }
; 345  : 
; 346  :     // Get frame handle
; 347  :     frameHandle = (0x3f00 & INPORT16(&g_pLAN91C->PNRARR)) >> 8;

  00700	e59f3574	 ldr         r3, [pc, #0x574]
  00704	e5933000	 ldr         r3, [r3]
  00708	e2830002	 add         r0, r3, #2
  0070c	eb000000	 bl          READ_PORT_USHORT
  00710	e1a03800	 mov         r3, r0, lsl #16
  00714	e1a03823	 mov         r3, r3, lsr #16
  00718	e1cd33b0	 strh        r3, [sp, #0x30]
  0071c	e1dd33b0	 ldrh        r3, [sp, #0x30]
  00720	e2033c3f	 and         r3, r3, #0x3F, 24
  00724	e1a03443	 mov         r3, r3, asr #8
  00728	e1a03803	 mov         r3, r3, lsl #16
  0072c	e1a03823	 mov         r3, r3, lsr #16
  00730	e1cd30b2	 strh        r3, [sp, #2]

; 348  : 
; 349  :     // Now write the frame into the buffer
; 350  :     OUTPORT16(&g_pLAN91C->PNRARR, frameHandle);

  00734	e1dd10b2	 ldrh        r1, [sp, #2]
  00738	e59f353c	 ldr         r3, [pc, #0x53C]
  0073c	e5933000	 ldr         r3, [r3]
  00740	e2830002	 add         r0, r3, #2
  00744	eb000000	 bl          WRITE_PORT_USHORT

; 351  :     OUTPORT16(&g_pLAN91C->PTR, PTR_AUTOINC);

  00748	e3a01901	 mov         r1, #1, 18
  0074c	e59f3528	 ldr         r3, [pc, #0x528]
  00750	e5933000	 ldr         r3, [r3]
  00754	e2830006	 add         r0, r3, #6
  00758	eb000000	 bl          WRITE_PORT_USHORT

; 352  : 
; 353  :     // Write status word
; 354  :     OUTPORT16(&g_pLAN91C->DATA, 0);

  0075c	e3a01000	 mov         r1, #0
  00760	e59f3514	 ldr         r3, [pc, #0x514]
  00764	e5933000	 ldr         r3, [r3]
  00768	e2830008	 add         r0, r3, #8
  0076c	eb000000	 bl          WRITE_PORT_USHORT

; 355  :     // Write the buffer size
; 356  :     OUTPORT16(&g_pLAN91C->DATA, bufferSize);

  00770	e1dd10bc	 ldrh        r1, [sp, #0xC]
  00774	e59f3500	 ldr         r3, [pc, #0x500]
  00778	e5933000	 ldr         r3, [r3]
  0077c	e2830008	 add         r0, r3, #8
  00780	eb000000	 bl          WRITE_PORT_USHORT
  00784		 |$LN25@LAN91CSend|

; 357  : 
; 358  :     // Now write all except possibly the last data byte
; 359  :     while (length > 1) {

  00784	e59d3074	 ldr         r3, [sp, #0x74]
  00788	e3530001	 cmp         r3, #1
  0078c	9a00000c	 bls         |$LN24@LAN91CSend|

; 360  :         OUTPORT16(&g_pLAN91C->DATA, *(UINT16*)pBuffer);

  00790	e59d3070	 ldr         r3, [sp, #0x70]
  00794	e1d310b0	 ldrh        r1, [r3]
  00798	e59f34dc	 ldr         r3, [pc, #0x4DC]
  0079c	e5933000	 ldr         r3, [r3]
  007a0	e2830008	 add         r0, r3, #8
  007a4	eb000000	 bl          WRITE_PORT_USHORT

; 361  :         pBuffer += sizeof(UINT16);

  007a8	e59d3070	 ldr         r3, [sp, #0x70]
  007ac	e2833002	 add         r3, r3, #2
  007b0	e58d3070	 str         r3, [sp, #0x70]

; 362  :         length -= sizeof(UINT16);

  007b4	e59d3074	 ldr         r3, [sp, #0x74]
  007b8	e2433002	 sub         r3, r3, #2
  007bc	e58d3074	 str         r3, [sp, #0x74]

; 363  :     }

  007c0	eaffffef	 b           |$LN25@LAN91CSend|
  007c4		 |$LN24@LAN91CSend|

; 364  : 
; 365  :     if (length > 0) {

  007c4	e59d3074	 ldr         r3, [sp, #0x74]
  007c8	e3530000	 cmp         r3, #0
  007cc	9a00000a	 bls         |$LN23@LAN91CSend|

; 366  :         // If length was odd we can put that just before the control byte
; 367  :         OUTPORT16(&g_pLAN91C->DATA, *pBuffer|CTRL_ODD|CTRL_CRC);

  007d0	e59d3070	 ldr         r3, [sp, #0x70]
  007d4	e5d33000	 ldrb        r3, [r3]
  007d8	e3833a02	 orr         r3, r3, #2, 20
  007dc	e3833a01	 orr         r3, r3, #1, 20
  007e0	e1a01803	 mov         r1, r3, lsl #16
  007e4	e1a01821	 mov         r1, r1, lsr #16
  007e8	e59f348c	 ldr         r3, [pc, #0x48C]
  007ec	e5933000	 ldr         r3, [r3]
  007f0	e2830008	 add         r0, r3, #8
  007f4	eb000000	 bl          WRITE_PORT_USHORT

; 368  :     } else {

  007f8	ea000004	 b           |$LN22@LAN91CSend|
  007fc		 |$LN23@LAN91CSend|

; 369  :         // Otherwise just pad the last byte with 0
; 370  :         OUTPORT16(&g_pLAN91C->DATA, CTRL_CRC);

  007fc	e3a01a01	 mov         r1, #1, 20
  00800	e59f3474	 ldr         r3, [pc, #0x474]
  00804	e5933000	 ldr         r3, [r3]
  00808	e2830008	 add         r0, r3, #8
  0080c	eb000000	 bl          WRITE_PORT_USHORT
  00810		 |$LN22@LAN91CSend|

; 371  :     }        
; 372  : 
; 373  :     // Enqueue Frame number into TX FIFO
; 374  :     switch (GET_CHIP_ID(g_chipRevision)) {

  00810	e59f3488	 ldr         r3, [pc, #0x488]
  00814	e1d330b0	 ldrh        r3, [r3]
  00818	e1a03243	 mov         r3, r3, asr #4
  0081c	e203300f	 and         r3, r3, #0xF
  00820	e3530009	 cmp         r3, #9
  00824	0a000000	 beq         |$LN19@LAN91CSend|
  00828	ea000004	 b           |$LN18@LAN91CSend|
  0082c		 |$LN19@LAN91CSend|

; 375  :     case CHIP_ID_LAN91C111:
; 376  :         OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_111_ENQUEUE);

  0082c	e3a010c0	 mov         r1, #0xC0
  00830	e59f3444	 ldr         r3, [pc, #0x444]
  00834	e5930000	 ldr         r0, [r3]
  00838	eb000000	 bl          WRITE_PORT_USHORT

; 377  :         break;

  0083c	ea000003	 b           |$LN20@LAN91CSend|
  00840		 |$LN18@LAN91CSend|

; 378  :     default:        
; 379  :         OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_ENQ_TX);

  00840	e3a010c0	 mov         r1, #0xC0
  00844	e59f3430	 ldr         r3, [pc, #0x430]
  00848	e5930000	 ldr         r0, [r3]
  0084c	eb000000	 bl          WRITE_PORT_USHORT
  00850		 |$LN20@LAN91CSend|

; 380  :     }
; 381  : 
; 382  :     // Wait until it is sent or an error is generated.
; 383  :     startTime = OALGetTickCount();

  00850	eb000000	 bl          OALGetTickCount
  00854	e58d0034	 str         r0, [sp, #0x34]
  00858	e59d3034	 ldr         r3, [sp, #0x34]
  0085c	e58d3008	 str         r3, [sp, #8]
  00860		 |$LN17@LAN91CSend|

; 384  :     while ((OALGetTickCount() - startTime) < TIMEOUT_VALUE)

  00860	eb000000	 bl          OALGetTickCount
  00864	e58d0038	 str         r0, [sp, #0x38]
  00868	e59d2038	 ldr         r2, [sp, #0x38]
  0086c	e59d3008	 ldr         r3, [sp, #8]
  00870	e0422003	 sub         r2, r2, r3
  00874	e3a03c75	 mov         r3, #0x75, 24
  00878	e3833030	 orr         r3, r3, #0x30
  0087c	e1520003	 cmp         r2, r3
  00880	2a00000b	 bcs         |$LN16@LAN91CSend|

; 385  :     {
; 386  :         if (INPORT16(&g_pLAN91C->INTR) & INTR_TX)

  00884	e59f33f0	 ldr         r3, [pc, #0x3F0]
  00888	e5933000	 ldr         r3, [r3]
  0088c	e283000c	 add         r0, r3, #0xC
  00890	eb000000	 bl          READ_PORT_USHORT
  00894	e1a03800	 mov         r3, r0, lsl #16
  00898	e1a03823	 mov         r3, r3, lsr #16
  0089c	e1cd33bc	 strh        r3, [sp, #0x3C]
  008a0	e1dd33bc	 ldrh        r3, [sp, #0x3C]
  008a4	e3130002	 tst         r3, #2
  008a8	0a000000	 beq         |$LN15@LAN91CSend|

; 387  :         {
; 388  :             break;

  008ac	ea000000	 b           |$LN16@LAN91CSend|
  008b0		 |$LN15@LAN91CSend|

; 389  :         }
; 390  :     }

  008b0	eaffffea	 b           |$LN17@LAN91CSend|
  008b4		 |$LN16@LAN91CSend|

; 391  : 
; 392  :     if ((INPORT16(&g_pLAN91C->INTR) & INTR_TX) == 0)

  008b4	e59f33c0	 ldr         r3, [pc, #0x3C0]
  008b8	e5933000	 ldr         r3, [r3]
  008bc	e283000c	 add         r0, r3, #0xC
  008c0	eb000000	 bl          READ_PORT_USHORT
  008c4	e1a03800	 mov         r3, r0, lsl #16
  008c8	e1a03823	 mov         r3, r3, lsr #16
  008cc	e1cd33be	 strh        r3, [sp, #0x3E]
  008d0	e1dd33be	 ldrh        r3, [sp, #0x3E]
  008d4	e3130002	 tst         r3, #2
  008d8	1a00000d	 bne         |$LN14@LAN91CSend|

; 393  :     {
; 394  :         OALMSGS(OAL_ERROR, (L"ERROR: LAN91CSendFrame: Timed out waiting for the transfer to complete.\r\n"));

  008dc	e59f33a0	 ldr         r3, [pc, #0x3A0]
  008e0	e5933440	 ldr         r3, [r3, #0x440]
  008e4	e3130001	 tst         r3, #1
  008e8	0a000004	 beq         |$LN46@LAN91CSend|
  008ec	e59f03b0	 ldr         r0, [pc, #0x3B0]
  008f0	eb000000	 bl          OALLogSerial
  008f4	e3a03001	 mov         r3, #1
  008f8	e58d3040	 str         r3, [sp, #0x40]
  008fc	ea000001	 b           |$LN47@LAN91CSend|
  00900		 |$LN46@LAN91CSend|
  00900	e3a03000	 mov         r3, #0
  00904	e58d3040	 str         r3, [sp, #0x40]
  00908		 |$LN47@LAN91CSend|

; 395  :         return(1);

  00908	e3a03001	 mov         r3, #1
  0090c	e1cd31b0	 strh        r3, [sp, #0x10]
  00910	ea0000d5	 b           |$LN40@LAN91CSend|
  00914		 |$LN14@LAN91CSend|

; 396  :     }
; 397  : 
; 398  : 	// Read TXDONE Pkt# from FIFO Port Register
; 399  :     OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  00914	e3a01002	 mov         r1, #2
  00918	e59f335c	 ldr         r3, [pc, #0x35C]
  0091c	e5933000	 ldr         r3, [r3]
  00920	e283000e	 add         r0, r3, #0xE
  00924	eb000000	 bl          WRITE_PORT_USHORT

; 400  :     packetNumber = (INPORT16(&g_pLAN91C->FIFO) & 0x3F);

  00928	e59f334c	 ldr         r3, [pc, #0x34C]
  0092c	e5933000	 ldr         r3, [r3]
  00930	e2830004	 add         r0, r3, #4
  00934	eb000000	 bl          READ_PORT_USHORT
  00938	e1a03800	 mov         r3, r0, lsl #16
  0093c	e1a03823	 mov         r3, r3, lsr #16
  00940	e1cd34b4	 strh        r3, [sp, #0x44]
  00944	e1dd34b4	 ldrh        r3, [sp, #0x44]
  00948	e203303f	 and         r3, r3, #0x3F
  0094c	e1a03803	 mov         r3, r3, lsl #16
  00950	e1a03823	 mov         r3, r3, lsr #16
  00954	e1cd30b4	 strh        r3, [sp, #4]

; 401  : 
; 402  : 	// Write to Packet Number Register
; 403  :     OUTPORT16(&g_pLAN91C->PNRARR, packetNumber);

  00958	e1dd10b4	 ldrh        r1, [sp, #4]
  0095c	e59f3318	 ldr         r3, [pc, #0x318]
  00960	e5933000	 ldr         r3, [r3]
  00964	e2830002	 add         r0, r3, #2
  00968	eb000000	 bl          WRITE_PORT_USHORT

; 404  : 
; 405  : 	// Retrieve packet status
; 406  :     OUTPORT16(&g_pLAN91C->PTR, (PTR_AUTOINC | PTR_READ));

  0096c	e3a01a06	 mov         r1, #6, 20
  00970	e59f3304	 ldr         r3, [pc, #0x304]
  00974	e5933000	 ldr         r3, [r3]
  00978	e2830006	 add         r0, r3, #6
  0097c	eb000000	 bl          WRITE_PORT_USHORT

; 407  :     OALStall(100);

  00980	e3a00064	 mov         r0, #0x64
  00984	eb000000	 bl          OALStall

; 408  : 
; 409  :     rc = INPORT16(&g_pLAN91C->DATA);

  00988	e59f32ec	 ldr         r3, [pc, #0x2EC]
  0098c	e5933000	 ldr         r3, [r3]
  00990	e2830008	 add         r0, r3, #8
  00994	eb000000	 bl          READ_PORT_USHORT
  00998	e1a03800	 mov         r3, r0, lsl #16
  0099c	e1a03823	 mov         r3, r3, lsr #16
  009a0	e1cd34b6	 strh        r3, [sp, #0x46]
  009a4	e1dd34b6	 ldrh        r3, [sp, #0x46]
  009a8	e1cd30b0	 strh        r3, [sp]

; 410  :     // SQET bit always set on lan91c111 and lan100FD (so mask it) on all plats
; 411  :     rc &= ~EPH_STAT_SQET;

  009ac	e1dd30b0	 ldrh        r3, [sp]
  009b0	e1a02003	 mov         r2, r3
  009b4	e3e03020	 mvn         r3, #0x20
  009b8	e0023003	 and         r3, r2, r3
  009bc	e1a03803	 mov         r3, r3, lsl #16
  009c0	e1a03823	 mov         r3, r3, lsr #16
  009c4	e1cd30b0	 strh        r3, [sp]

; 412  : 
; 413  : 	// Release the packet
; 414  :     switch (GET_CHIP_ID(g_chipRevision)) {

  009c8	e59f32d0	 ldr         r3, [pc, #0x2D0]
  009cc	e1d330b0	 ldrh        r3, [r3]
  009d0	e1a03243	 mov         r3, r3, asr #4
  009d4	e203300f	 and         r3, r3, #0xF
  009d8	e3530009	 cmp         r3, #9
  009dc	0a000000	 beq         |$LN11@LAN91CSend|
  009e0	ea000004	 b           |$LN10@LAN91CSend|
  009e4		 |$LN11@LAN91CSend|

; 415  :     case CHIP_ID_LAN91C111:
; 416  :         OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_111_RELEASE_TX);

  009e4	e3a010a0	 mov         r1, #0xA0
  009e8	e59f328c	 ldr         r3, [pc, #0x28C]
  009ec	e5930000	 ldr         r0, [r3]
  009f0	eb000000	 bl          WRITE_PORT_USHORT

; 417  :         break;

  009f4	ea000003	 b           |$LN12@LAN91CSend|
  009f8		 |$LN10@LAN91CSend|

; 418  :     default:            
; 419  :         OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_REL_SPEC);

  009f8	e3a010a0	 mov         r1, #0xA0
  009fc	e59f3278	 ldr         r3, [pc, #0x278]
  00a00	e5930000	 ldr         r0, [r3]
  00a04	eb000000	 bl          WRITE_PORT_USHORT
  00a08		 |$LN12@LAN91CSend|
  00a08		 |$LN9@LAN91CSend|

; 420  :     }
; 421  :     while ((INPORT16(&g_pLAN91C->MMUCR) & MMUCR_BUSY) != 0);

  00a08	e59f326c	 ldr         r3, [pc, #0x26C]
  00a0c	e5930000	 ldr         r0, [r3]
  00a10	eb000000	 bl          READ_PORT_USHORT
  00a14	e1a03800	 mov         r3, r0, lsl #16
  00a18	e1a03823	 mov         r3, r3, lsr #16
  00a1c	e1cd34b8	 strh        r3, [sp, #0x48]
  00a20	e1dd34b8	 ldrh        r3, [sp, #0x48]
  00a24	e3130001	 tst         r3, #1
  00a28	0a000000	 beq         |$LN8@LAN91CSend|
  00a2c	eafffff5	 b           |$LN9@LAN91CSend|
  00a30		 |$LN8@LAN91CSend|

; 422  : 
; 423  : 	// Clear the tx interrupt status
; 424  :     SETPORT16(&g_pLAN91C->INTR, INTR_TX);

  00a30	e59f3244	 ldr         r3, [pc, #0x244]
  00a34	e5933000	 ldr         r3, [r3]
  00a38	e283000c	 add         r0, r3, #0xC
  00a3c	eb000000	 bl          READ_PORT_USHORT
  00a40	e1a03800	 mov         r3, r0, lsl #16
  00a44	e1a03823	 mov         r3, r3, lsr #16
  00a48	e1cd34ba	 strh        r3, [sp, #0x4A]
  00a4c	e1dd34ba	 ldrh        r3, [sp, #0x4A]
  00a50	e3833002	 orr         r3, r3, #2
  00a54	e1a01803	 mov         r1, r3, lsl #16
  00a58	e1a01821	 mov         r1, r1, lsr #16
  00a5c	e59f3218	 ldr         r3, [pc, #0x218]
  00a60	e5933000	 ldr         r3, [r3]
  00a64	e283000c	 add         r0, r3, #0xC
  00a68	eb000000	 bl          WRITE_PORT_USHORT

; 425  : 
; 426  :     // Tx error?
; 427  :     if (rc & (EPH_STAT_TXUNRN | EPH_STAT_SQET | EPH_STAT_LOSTCARR | EPH_STAT_LATCOL | EPH_STAT_16COL))

  00a6c	e1dd30b0	 ldrh        r3, [sp]
  00a70	e1a02003	 mov         r2, r3
  00a74	e3a03c86	 mov         r3, #0x86, 24
  00a78	e3833030	 orr         r3, r3, #0x30
  00a7c	e1120003	 tst         r2, r3
  00a80	0a000067	 beq         |$LN7@LAN91CSend|

; 428  :     {
; 429  :         // Display error status.
; 430  :         OALMSGS(OAL_ERROR, (L"ERROR: LAN91CSendFrame: status = ( "));

  00a84	e59f31f8	 ldr         r3, [pc, #0x1F8]
  00a88	e5933440	 ldr         r3, [r3, #0x440]
  00a8c	e3130001	 tst         r3, #1
  00a90	0a000004	 beq         |$LN48@LAN91CSend|
  00a94	e59f0200	 ldr         r0, [pc, #0x200]
  00a98	eb000000	 bl          OALLogSerial
  00a9c	e3a03001	 mov         r3, #1
  00aa0	e58d304c	 str         r3, [sp, #0x4C]
  00aa4	ea000001	 b           |$LN49@LAN91CSend|
  00aa8		 |$LN48@LAN91CSend|
  00aa8	e3a03000	 mov         r3, #0
  00aac	e58d304c	 str         r3, [sp, #0x4C]
  00ab0		 |$LN49@LAN91CSend|

; 431  :         if (rc & EPH_STAT_TXUNRN)

  00ab0	e1dd30b0	 ldrh        r3, [sp]
  00ab4	e3130902	 tst         r3, #2, 18
  00ab8	0a00000a	 beq         |$LN6@LAN91CSend|

; 432  :         {
; 433  :             OALMSGS(OAL_ERROR, (L"TXUNRN "));

  00abc	e59f31c0	 ldr         r3, [pc, #0x1C0]
  00ac0	e5933440	 ldr         r3, [r3, #0x440]
  00ac4	e3130001	 tst         r3, #1
  00ac8	0a000004	 beq         |$LN50@LAN91CSend|
  00acc	e59f01c4	 ldr         r0, [pc, #0x1C4]
  00ad0	eb000000	 bl          OALLogSerial
  00ad4	e3a03001	 mov         r3, #1
  00ad8	e58d3050	 str         r3, [sp, #0x50]
  00adc	ea000001	 b           |$LN51@LAN91CSend|
  00ae0		 |$LN50@LAN91CSend|
  00ae0	e3a03000	 mov         r3, #0
  00ae4	e58d3050	 str         r3, [sp, #0x50]
  00ae8		 |$LN51@LAN91CSend|
  00ae8		 |$LN6@LAN91CSend|

; 434  :         }
; 435  :         if (rc & EPH_STAT_SQET)

  00ae8	e1dd30b0	 ldrh        r3, [sp]
  00aec	e3130020	 tst         r3, #0x20
  00af0	0a00000a	 beq         |$LN5@LAN91CSend|

; 436  :         {
; 437  :             OALMSGS(OAL_ERROR, (L"SQET "));

  00af4	e59f3188	 ldr         r3, [pc, #0x188]
  00af8	e5933440	 ldr         r3, [r3, #0x440]
  00afc	e3130001	 tst         r3, #1
  00b00	0a000004	 beq         |$LN52@LAN91CSend|
  00b04	e59f0188	 ldr         r0, [pc, #0x188]
  00b08	eb000000	 bl          OALLogSerial
  00b0c	e3a03001	 mov         r3, #1
  00b10	e58d3054	 str         r3, [sp, #0x54]
  00b14	ea000001	 b           |$LN53@LAN91CSend|
  00b18		 |$LN52@LAN91CSend|
  00b18	e3a03000	 mov         r3, #0
  00b1c	e58d3054	 str         r3, [sp, #0x54]
  00b20		 |$LN53@LAN91CSend|
  00b20		 |$LN5@LAN91CSend|

; 438  :         }
; 439  :         if (rc & EPH_STAT_LOSTCARR)

  00b20	e1dd30b0	 ldrh        r3, [sp]
  00b24	e3130b01	 tst         r3, #1, 22
  00b28	0a00000a	 beq         |$LN4@LAN91CSend|

; 440  :         {
; 441  :             OALMSGS(OAL_ERROR, (L"LOSTCARR "));

  00b2c	e59f3150	 ldr         r3, [pc, #0x150]
  00b30	e5933440	 ldr         r3, [r3, #0x440]
  00b34	e3130001	 tst         r3, #1
  00b38	0a000004	 beq         |$LN54@LAN91CSend|
  00b3c	e59f014c	 ldr         r0, [pc, #0x14C]
  00b40	eb000000	 bl          OALLogSerial
  00b44	e3a03001	 mov         r3, #1
  00b48	e58d3058	 str         r3, [sp, #0x58]
  00b4c	ea000001	 b           |$LN55@LAN91CSend|
  00b50		 |$LN54@LAN91CSend|
  00b50	e3a03000	 mov         r3, #0
  00b54	e58d3058	 str         r3, [sp, #0x58]
  00b58		 |$LN55@LAN91CSend|
  00b58		 |$LN4@LAN91CSend|

; 442  :         }
; 443  :         if (rc & EPH_STAT_LATCOL)

  00b58	e1dd30b0	 ldrh        r3, [sp]
  00b5c	e3130c02	 tst         r3, #2, 24
  00b60	0a00000a	 beq         |$LN3@LAN91CSend|

; 444  :         {
; 445  :             OALMSGS(OAL_ERROR, (L"LATCOL "));

  00b64	e59f3118	 ldr         r3, [pc, #0x118]
  00b68	e5933440	 ldr         r3, [r3, #0x440]
  00b6c	e3130001	 tst         r3, #1
  00b70	0a000004	 beq         |$LN56@LAN91CSend|
  00b74	e59f0110	 ldr         r0, [pc, #0x110]
  00b78	eb000000	 bl          OALLogSerial
  00b7c	e3a03001	 mov         r3, #1
  00b80	e58d305c	 str         r3, [sp, #0x5C]
  00b84	ea000001	 b           |$LN57@LAN91CSend|
  00b88		 |$LN56@LAN91CSend|
  00b88	e3a03000	 mov         r3, #0
  00b8c	e58d305c	 str         r3, [sp, #0x5C]
  00b90		 |$LN57@LAN91CSend|
  00b90		 |$LN3@LAN91CSend|

; 446  :         }
; 447  :         if (rc & EPH_STAT_16COL)

  00b90	e1dd30b0	 ldrh        r3, [sp]
  00b94	e3130010	 tst         r3, #0x10
  00b98	0a00000a	 beq         |$LN2@LAN91CSend|

; 448  :         {
; 449  :             OALMSGS(OAL_ERROR, (L"16COL "));

  00b9c	e59f30e0	 ldr         r3, [pc, #0xE0]
  00ba0	e5933440	 ldr         r3, [r3, #0x440]
  00ba4	e3130001	 tst         r3, #1
  00ba8	0a000004	 beq         |$LN58@LAN91CSend|
  00bac	e59f00d4	 ldr         r0, [pc, #0xD4]
  00bb0	eb000000	 bl          OALLogSerial
  00bb4	e3a03001	 mov         r3, #1
  00bb8	e58d3060	 str         r3, [sp, #0x60]
  00bbc	ea000001	 b           |$LN59@LAN91CSend|
  00bc0		 |$LN58@LAN91CSend|
  00bc0	e3a03000	 mov         r3, #0
  00bc4	e58d3060	 str         r3, [sp, #0x60]
  00bc8		 |$LN59@LAN91CSend|
  00bc8		 |$LN2@LAN91CSend|

; 450  :         }
; 451  :         OALMSGS(OAL_ERROR, (L")\r\n"));

  00bc8	e59f30b4	 ldr         r3, [pc, #0xB4]
  00bcc	e5933440	 ldr         r3, [r3, #0x440]
  00bd0	e3130001	 tst         r3, #1
  00bd4	0a000004	 beq         |$LN60@LAN91CSend|
  00bd8	e59f00a0	 ldr         r0, [pc, #0xA0]
  00bdc	eb000000	 bl          OALLogSerial
  00be0	e3a03001	 mov         r3, #1
  00be4	e58d3064	 str         r3, [sp, #0x64]
  00be8	ea000001	 b           |$LN61@LAN91CSend|
  00bec		 |$LN60@LAN91CSend|
  00bec	e3a03000	 mov         r3, #0
  00bf0	e58d3064	 str         r3, [sp, #0x64]
  00bf4		 |$LN61@LAN91CSend|

; 452  :             
; 453  :         // Re-enable TXENA
; 454  :         OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  00bf4	e3a01000	 mov         r1, #0
  00bf8	e59f307c	 ldr         r3, [pc, #0x7C]
  00bfc	e5933000	 ldr         r3, [r3]
  00c00	e283000e	 add         r0, r3, #0xE
  00c04	eb000000	 bl          WRITE_PORT_USHORT

; 455  :         OUTPORT16(&g_pLAN91C->TCR, TCR_PADEN|TCR_TXEN);

  00c08	e3a01081	 mov         r1, #0x81
  00c0c	e59f3068	 ldr         r3, [pc, #0x68]
  00c10	e5930000	 ldr         r0, [r3]
  00c14	eb000000	 bl          WRITE_PORT_USHORT

; 456  : 
; 457  :         // Failure.
; 458  :         rc = 1;

  00c18	e3a03001	 mov         r3, #1
  00c1c	e1cd30b0	 strh        r3, [sp]

; 459  :     }
; 460  :     else

  00c20	ea000001	 b           |$LN1@LAN91CSend|
  00c24		 |$LN7@LAN91CSend|

; 461  :     {
; 462  :         // Success.
; 463  :         rc = 0;

  00c24	e3a03000	 mov         r3, #0
  00c28	e1cd30b0	 strh        r3, [sp]
  00c2c		 |$LN1@LAN91CSend|

; 464  :     }
; 465  : 
; 466  :     // Clear the statistics registers
; 467  :     OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  00c2c	e3a01000	 mov         r1, #0
  00c30	e59f3044	 ldr         r3, [pc, #0x44]
  00c34	e5933000	 ldr         r3, [r3]
  00c38	e283000e	 add         r0, r3, #0xE
  00c3c	eb000000	 bl          WRITE_PORT_USHORT

; 468  :     INPORT16(&g_pLAN91C->ECR);

  00c40	e59f3034	 ldr         r3, [pc, #0x34]
  00c44	e5933000	 ldr         r3, [r3]
  00c48	e2830006	 add         r0, r3, #6
  00c4c	eb000000	 bl          READ_PORT_USHORT

; 469  : 
; 470  :     // Set back bank 2
; 471  :     OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  00c50	e3a01002	 mov         r1, #2
  00c54	e59f3020	 ldr         r3, [pc, #0x20]
  00c58	e5933000	 ldr         r3, [r3]
  00c5c	e283000e	 add         r0, r3, #0xE
  00c60	eb000000	 bl          WRITE_PORT_USHORT

; 472  : 
; 473  :     return rc;

  00c64	e1dd30b0	 ldrh        r3, [sp]
  00c68	e1cd31b0	 strh        r3, [sp, #0x10]
  00c6c		 |$LN40@LAN91CSend|

; 474  : }

  00c6c	e1dd01b0	 ldrh        r0, [sp, #0x10]
  00c70	e28dd068	 add         sp, sp, #0x68
  00c74	e89d6000	 ldmia       sp, {sp, lr}
  00c78	e12fff1e	 bx          lr
  00c7c		 |$LN65@LAN91CSend|
  00c7c		 |$LN66@LAN91CSend|
  00c7c	00000000	 DCD         |g_pLAN91C|
  00c80		 |$LN67@LAN91CSend|
  00c80	00000000	 DCD         |??_C@_17KPMHKKFB@?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00c84		 |$LN68@LAN91CSend|
  00c84	00000000	 DCD         |dpCurSettings|
  00c88		 |$LN69@LAN91CSend|
  00c88	00000000	 DCD         |??_C@_1O@LOBBLJNF@?$AA1?$AA6?$AAC?$AAO?$AAL?$AA?5?$AA?$AA@|
  00c8c		 |$LN70@LAN91CSend|
  00c8c	00000000	 DCD         |??_C@_1BA@CEELOPKH@?$AAL?$AAA?$AAT?$AAC?$AAO?$AAL?$AA?5?$AA?$AA@|
  00c90		 |$LN71@LAN91CSend|
  00c90	00000000	 DCD         |??_C@_1BE@EFNCOOHA@?$AAL?$AAO?$AAS?$AAT?$AAC?$AAA?$AAR?$AAR?$AA?5?$AA?$AA@|
  00c94		 |$LN72@LAN91CSend|
  00c94	00000000	 DCD         |??_C@_1M@MPEJHFEM@?$AAS?$AAQ?$AAE?$AAT?$AA?5?$AA?$AA@|
  00c98		 |$LN73@LAN91CSend|
  00c98	00000000	 DCD         |??_C@_1BA@LNLGMPHE@?$AAT?$AAX?$AAU?$AAN?$AAR?$AAN?$AA?5?$AA?$AA@|
  00c9c		 |$LN74@LAN91CSend|
  00c9c	00000000	 DCD         |??_C@_1EI@PLHGEHHE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN@|
  00ca0		 |$LN75@LAN91CSend|
  00ca0	00000000	 DCD         |g_chipRevision|
  00ca4		 |$LN76@LAN91CSend|
  00ca4	00000000	 DCD         |??_C@_1JE@LLHOKEHL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu@|
  00ca8		 |$LN77@LAN91CSend|
  00ca8	00000000	 DCD         |??_C@_1GI@PPLHHMGG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@|
  00cac		 |$LN78@LAN91CSend|
  00cac	00000000	 DCD         |?bAllocRequest@?1??LAN91CSendFrame@@9@9|
  00cb0		 |$LN79@LAN91CSend|
  00cb0	00000000	 DCD         |??_C@_1GM@FLGHILHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu@|
  00cb4		 |$M43414|

			 ENDP  ; |LAN91CSendFrame|

	EXPORT	|??_C@_1HM@PHDCLFGM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAs?$AAi@| [ DATA ] ; `string'
	EXPORT	|LAN91CGetFrame|

  00010			 AREA	 |.pdata|, PDATA
|$T43439| DCD	|$LN23@LAN91CGetF|
	DCD	0x4000d104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@PHDCLFGM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAs?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "F", 0x0, "r", 0x0, "a"
	DCB	0x0, "m", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "s"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, " ", 0x0, ">", 0x0, " ", 0x0, "t"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, " ", 0x0, "b", 0x0, "u"
	DCB	0x0, "f", 0x0, " ", 0x0, "l", 0x0, "e", 0x0, "n", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00cb4			 AREA	 |.text|, CODE, ARM

  00cb4		 |LAN91CGetFrame| PROC

; 479  : {

  00cb4		 |$LN23@LAN91CGetF|
  00cb4	e1a0c00d	 mov         r12, sp
  00cb8	e92d0003	 stmdb       sp!, {r0, r1}
  00cbc	e92d5000	 stmdb       sp!, {r12, lr}
  00cc0	e24dd030	 sub         sp, sp, #0x30
  00cc4		 |$M43436|

; 480  :     UINT8 *pos = pBuffer;

  00cc4	e59d3038	 ldr         r3, [sp, #0x38]
  00cc8	e58d3014	 str         r3, [sp, #0x14]

; 481  :     UINT16 code, pointer;
; 482  :     UINT32 length, count;
; 483  :     BOOL   bErr = FALSE; 

  00ccc	e3a03000	 mov         r3, #0
  00cd0	e58d300c	 str         r3, [sp, #0xC]

; 484  : 
; 485  :     // Make sure that bank 2 is actual
; 486  :     OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  00cd4	e3a01002	 mov         r1, #2
  00cd8	e59f3308	 ldr         r3, [pc, #0x308]
  00cdc	e5933000	 ldr         r3, [r3]
  00ce0	e283000e	 add         r0, r3, #0xE
  00ce4	eb000000	 bl          WRITE_PORT_USHORT

; 487  : 
; 488  :     length = 0;

  00ce8	e3a03000	 mov         r3, #0
  00cec	e58d3004	 str         r3, [sp, #4]
  00cf0		 |$LN16@LAN91CGetF|

; 489  :     while ((INPORT16(&g_pLAN91C->INTR) & INTR_RX) != 0) {

  00cf0	e59f32f0	 ldr         r3, [pc, #0x2F0]
  00cf4	e5933000	 ldr         r3, [r3]
  00cf8	e283000c	 add         r0, r3, #0xC
  00cfc	eb000000	 bl          READ_PORT_USHORT
  00d00	e1a03800	 mov         r3, r0, lsl #16
  00d04	e1a03823	 mov         r3, r3, lsr #16
  00d08	e1cd31bc	 strh        r3, [sp, #0x1C]
  00d0c	e1dd31bc	 ldrh        r3, [sp, #0x1C]
  00d10	e3130001	 tst         r3, #1
  00d14	0a0000a7	 beq         |$LN15@LAN91CGetF|

; 490  : 
; 491  :         // Setup pointer address register
; 492  :         pointer = PTR_RCV | PTR_READ;

  00d18	e3a03a0a	 mov         r3, #0xA, 20
  00d1c	e1cd31b0	 strh        r3, [sp, #0x10]

; 493  : 
; 494  :         // Read status
; 495  :         OUTPORT16(&g_pLAN91C->PTR, pointer);

  00d20	e1dd11b0	 ldrh        r1, [sp, #0x10]
  00d24	e59f32bc	 ldr         r3, [pc, #0x2BC]
  00d28	e5933000	 ldr         r3, [r3]
  00d2c	e2830006	 add         r0, r3, #6
  00d30	eb000000	 bl          WRITE_PORT_USHORT

; 496  :         code = INPORT16(&g_pLAN91C->DATA);

  00d34	e59f32ac	 ldr         r3, [pc, #0x2AC]
  00d38	e5933000	 ldr         r3, [r3]
  00d3c	e2830008	 add         r0, r3, #8
  00d40	eb000000	 bl          READ_PORT_USHORT
  00d44	e1a03800	 mov         r3, r0, lsl #16
  00d48	e1a03823	 mov         r3, r3, lsr #16
  00d4c	e1cd31be	 strh        r3, [sp, #0x1E]
  00d50	e1dd31be	 ldrh        r3, [sp, #0x1E]
  00d54	e1cd30b8	 strh        r3, [sp, #8]

; 497  :         pointer += sizeof(UINT16);

  00d58	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00d5c	e2833002	 add         r3, r3, #2
  00d60	e1a03803	 mov         r3, r3, lsl #16
  00d64	e1a03823	 mov         r3, r3, lsr #16
  00d68	e1cd31b0	 strh        r3, [sp, #0x10]

; 498  : 
; 499  :         if ((code & (STAT_ALGNERR|STAT_BADCRC|STAT_LONG|STAT_SHORT)) == 0) {

  00d6c	e1dd30b8	 ldrh        r3, [sp, #8]
  00d70	e3130b2b	 tst         r3, #0x2B, 22
  00d74	1a00006c	 bne         |$LN14@LAN91CGetF|

; 500  :         
; 501  : 
; 502  :             // Get packet size
; 503  :             OUTPORT16(&g_pLAN91C->PTR, pointer);

  00d78	e1dd11b0	 ldrh        r1, [sp, #0x10]
  00d7c	e59f3264	 ldr         r3, [pc, #0x264]
  00d80	e5933000	 ldr         r3, [r3]
  00d84	e2830006	 add         r0, r3, #6
  00d88	eb000000	 bl          WRITE_PORT_USHORT

; 504  :             length = (INPORT16(&g_pLAN91C->DATA) & 0x07FF) - 6;

  00d8c	e59f3254	 ldr         r3, [pc, #0x254]
  00d90	e5933000	 ldr         r3, [r3]
  00d94	e2830008	 add         r0, r3, #8
  00d98	eb000000	 bl          READ_PORT_USHORT
  00d9c	e1a03800	 mov         r3, r0, lsl #16
  00da0	e1a03823	 mov         r3, r3, lsr #16
  00da4	e1cd32b0	 strh        r3, [sp, #0x20]
  00da8	e1dd32b0	 ldrh        r3, [sp, #0x20]
  00dac	e1a02003	 mov         r2, r3
  00db0	e3a03c07	 mov         r3, #7, 24
  00db4	e38330ff	 orr         r3, r3, #0xFF
  00db8	e0023003	 and         r3, r2, r3
  00dbc	e2433006	 sub         r3, r3, #6
  00dc0	e58d3004	 str         r3, [sp, #4]

; 505  :             pointer += sizeof(UINT16);

  00dc4	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00dc8	e2833002	 add         r3, r3, #2
  00dcc	e1a03803	 mov         r3, r3, lsl #16
  00dd0	e1a03823	 mov         r3, r3, lsr #16
  00dd4	e1cd31b0	 strh        r3, [sp, #0x10]

; 506  : 
; 507  :             //  Check packet size
; 508  :             if( length <= *pLength )

  00dd8	e59d303c	 ldr         r3, [sp, #0x3C]
  00ddc	e1d320b0	 ldrh        r2, [r3]
  00de0	e59d3004	 ldr         r3, [sp, #4]
  00de4	e1530002	 cmp         r3, r2
  00de8	8a00003d	 bhi         |$LN13@LAN91CGetF|

; 509  :             {
; 510  :                 // Copy packet
; 511  :                 count = length;

  00dec	e59d3004	 ldr         r3, [sp, #4]
  00df0	e58d3000	 str         r3, [sp]
  00df4		 |$LN12@LAN91CGetF|

; 512  :                 while (count > 1) {

  00df4	e59d3000	 ldr         r3, [sp]
  00df8	e3530001	 cmp         r3, #1
  00dfc	9a00001a	 bls         |$LN11@LAN91CGetF|

; 513  :                     OUTPORT16(&g_pLAN91C->PTR, pointer);

  00e00	e1dd11b0	 ldrh        r1, [sp, #0x10]
  00e04	e59f31dc	 ldr         r3, [pc, #0x1DC]
  00e08	e5933000	 ldr         r3, [r3]
  00e0c	e2830006	 add         r0, r3, #6
  00e10	eb000000	 bl          WRITE_PORT_USHORT

; 514  :                     *(UINT16*)pos = INPORT16(&g_pLAN91C->DATA);

  00e14	e59f31cc	 ldr         r3, [pc, #0x1CC]
  00e18	e5933000	 ldr         r3, [r3]
  00e1c	e2830008	 add         r0, r3, #8
  00e20	eb000000	 bl          READ_PORT_USHORT
  00e24	e1a03800	 mov         r3, r0, lsl #16
  00e28	e1a03823	 mov         r3, r3, lsr #16
  00e2c	e1cd32b2	 strh        r3, [sp, #0x22]
  00e30	e1dd22b2	 ldrh        r2, [sp, #0x22]
  00e34	e59d3014	 ldr         r3, [sp, #0x14]
  00e38	e1c320b0	 strh        r2, [r3]

; 515  :                     pointer += sizeof(UINT16);

  00e3c	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00e40	e2833002	 add         r3, r3, #2
  00e44	e1a03803	 mov         r3, r3, lsl #16
  00e48	e1a03823	 mov         r3, r3, lsr #16
  00e4c	e1cd31b0	 strh        r3, [sp, #0x10]

; 516  :                     pos += sizeof(UINT16);

  00e50	e59d3014	 ldr         r3, [sp, #0x14]
  00e54	e2833002	 add         r3, r3, #2
  00e58	e58d3014	 str         r3, [sp, #0x14]

; 517  :                     count -= sizeof(UINT16);

  00e5c	e59d3000	 ldr         r3, [sp]
  00e60	e2433002	 sub         r3, r3, #2
  00e64	e58d3000	 str         r3, [sp]

; 518  :                 }

  00e68	eaffffe1	 b           |$LN12@LAN91CGetF|
  00e6c		 |$LN11@LAN91CGetF|

; 519  : 
; 520  : 
; 521  :                 // Get control word (which can contain last byte)
; 522  :                 OUTPORT16(&g_pLAN91C->PTR, pointer);

  00e6c	e1dd11b0	 ldrh        r1, [sp, #0x10]
  00e70	e59f3170	 ldr         r3, [pc, #0x170]
  00e74	e5933000	 ldr         r3, [r3]
  00e78	e2830006	 add         r0, r3, #6
  00e7c	eb000000	 bl          WRITE_PORT_USHORT

; 523  :                 code = INPORT16(&g_pLAN91C->DATA);

  00e80	e59f3160	 ldr         r3, [pc, #0x160]
  00e84	e5933000	 ldr         r3, [r3]
  00e88	e2830008	 add         r0, r3, #8
  00e8c	eb000000	 bl          READ_PORT_USHORT
  00e90	e1a03800	 mov         r3, r0, lsl #16
  00e94	e1a03823	 mov         r3, r3, lsr #16
  00e98	e1cd32b4	 strh        r3, [sp, #0x24]
  00e9c	e1dd32b4	 ldrh        r3, [sp, #0x24]
  00ea0	e1cd30b8	 strh        r3, [sp, #8]

; 524  :                 pointer += sizeof(UINT16);

  00ea4	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00ea8	e2833002	 add         r3, r3, #2
  00eac	e1a03803	 mov         r3, r3, lsl #16
  00eb0	e1a03823	 mov         r3, r3, lsr #16
  00eb4	e1cd31b0	 strh        r3, [sp, #0x10]

; 525  :                 if ((code & CTRL_ODD) != 0) {

  00eb8	e1dd30b8	 ldrh        r3, [sp, #8]
  00ebc	e3130a02	 tst         r3, #2, 20
  00ec0	0a000006	 beq         |$LN10@LAN91CGetF|

; 526  :                     length++;

  00ec4	e59d3004	 ldr         r3, [sp, #4]
  00ec8	e2833001	 add         r3, r3, #1
  00ecc	e58d3004	 str         r3, [sp, #4]

; 527  :                     *pos = (UINT8)code;

  00ed0	e1dd30b8	 ldrh        r3, [sp, #8]
  00ed4	e20320ff	 and         r2, r3, #0xFF
  00ed8	e59d3014	 ldr         r3, [sp, #0x14]
  00edc	e5c32000	 strb        r2, [r3]
  00ee0		 |$LN10@LAN91CGetF|

; 528  :                 }
; 529  :             }
; 530  :             else

  00ee0	ea000011	 b           |$LN9@LAN91CGetF|
  00ee4		 |$LN13@LAN91CGetF|

; 531  :             {
; 532  :                 //  Error getting the packet size
; 533  :                 OALMSGS(OAL_ERROR, (L"ERROR: LAN91CGetFrame: packet size (%d) > than buf len (%d)\r\n", length, *pLength ));

  00ee4	e59f3108	 ldr         r3, [pc, #0x108]
  00ee8	e5933440	 ldr         r3, [r3, #0x440]
  00eec	e3130001	 tst         r3, #1
  00ef0	0a000007	 beq         |$LN19@LAN91CGetF|
  00ef4	e59d303c	 ldr         r3, [sp, #0x3C]
  00ef8	e1d320b0	 ldrh        r2, [r3]
  00efc	e59d1004	 ldr         r1, [sp, #4]
  00f00	e59f00e8	 ldr         r0, [pc, #0xE8]
  00f04	eb000000	 bl          OALLogSerial
  00f08	e3a03001	 mov         r3, #1
  00f0c	e58d3028	 str         r3, [sp, #0x28]
  00f10	ea000001	 b           |$LN20@LAN91CGetF|
  00f14		 |$LN19@LAN91CGetF|
  00f14	e3a03000	 mov         r3, #0
  00f18	e58d3028	 str         r3, [sp, #0x28]
  00f1c		 |$LN20@LAN91CGetF|

; 534  :                 length = 0;

  00f1c	e3a03000	 mov         r3, #0
  00f20	e58d3004	 str         r3, [sp, #4]

; 535  :                 bErr = TRUE;

  00f24	e3a03001	 mov         r3, #1
  00f28	e58d300c	 str         r3, [sp, #0xC]
  00f2c		 |$LN9@LAN91CGetF|
  00f2c		 |$LN14@LAN91CGetF|

; 536  :             }
; 537  :         }
; 538  : 
; 539  :         // Release the memory for the received frame
; 540  :         switch (GET_CHIP_ID(g_chipRevision)) {

  00f2c	e59f30b8	 ldr         r3, [pc, #0xB8]
  00f30	e1d330b0	 ldrh        r3, [r3]
  00f34	e1a03243	 mov         r3, r3, asr #4
  00f38	e203300f	 and         r3, r3, #0xF
  00f3c	e3530009	 cmp         r3, #9
  00f40	0a000000	 beq         |$LN6@LAN91CGetF|
  00f44	ea000004	 b           |$LN5@LAN91CGetF|
  00f48		 |$LN6@LAN91CGetF|

; 541  : 
; 542  :             case CHIP_ID_LAN91C111:
; 543  :                 OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_111_REM_REL_RX);

  00f48	e3a01080	 mov         r1, #0x80
  00f4c	e59f3094	 ldr         r3, [pc, #0x94]
  00f50	e5930000	 ldr         r0, [r3]
  00f54	eb000000	 bl          WRITE_PORT_USHORT

; 544  :                 break;

  00f58	ea000003	 b           |$LN7@LAN91CGetF|
  00f5c		 |$LN5@LAN91CGetF|

; 545  : 
; 546  :             default:            
; 547  :                 OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_REM_REL_TOP);

  00f5c	e3a01080	 mov         r1, #0x80
  00f60	e59f3080	 ldr         r3, [pc, #0x80]
  00f64	e5930000	 ldr         r0, [r3]
  00f68	eb000000	 bl          WRITE_PORT_USHORT
  00f6c		 |$LN7@LAN91CGetF|
  00f6c		 |$LN4@LAN91CGetF|

; 548  :         }
; 549  : 
; 550  :         while ((INPORT16(&g_pLAN91C->MMUCR) & MMUCR_BUSY) != 0);

  00f6c	e59f3074	 ldr         r3, [pc, #0x74]
  00f70	e5930000	 ldr         r0, [r3]
  00f74	eb000000	 bl          READ_PORT_USHORT
  00f78	e1a03800	 mov         r3, r0, lsl #16
  00f7c	e1a03823	 mov         r3, r3, lsr #16
  00f80	e1cd32bc	 strh        r3, [sp, #0x2C]
  00f84	e1dd32bc	 ldrh        r3, [sp, #0x2C]
  00f88	e3130001	 tst         r3, #1
  00f8c	0a000000	 beq         |$LN3@LAN91CGetF|
  00f90	eafffff5	 b           |$LN4@LAN91CGetF|
  00f94		 |$LN3@LAN91CGetF|

; 551  : 
; 552  : 
; 553  :         // If error, break
; 554  :         if( bErr ) break;

  00f94	e59d300c	 ldr         r3, [sp, #0xC]
  00f98	e3530000	 cmp         r3, #0
  00f9c	0a000000	 beq         |$LN2@LAN91CGetF|
  00fa0	ea000004	 b           |$LN15@LAN91CGetF|
  00fa4		 |$LN2@LAN91CGetF|

; 555  : 
; 556  :         // If length is non zero we get a packet
; 557  :         if (length > 0) break;

  00fa4	e59d3004	 ldr         r3, [sp, #4]
  00fa8	e3530000	 cmp         r3, #0
  00fac	9a000000	 bls         |$LN1@LAN91CGetF|
  00fb0	ea000000	 b           |$LN15@LAN91CGetF|
  00fb4		 |$LN1@LAN91CGetF|

; 558  : 
; 559  :     }        

  00fb4	eaffff4d	 b           |$LN16@LAN91CGetF|
  00fb8		 |$LN15@LAN91CGetF|

; 560  : 
; 561  :     *pLength = (UINT16)length;

  00fb8	e59d3004	 ldr         r3, [sp, #4]
  00fbc	e1a02803	 mov         r2, r3, lsl #16
  00fc0	e1a02822	 mov         r2, r2, lsr #16
  00fc4	e59d303c	 ldr         r3, [sp, #0x3C]
  00fc8	e1c320b0	 strh        r2, [r3]

; 562  :     return (*pLength);

  00fcc	e59d303c	 ldr         r3, [sp, #0x3C]
  00fd0	e1d330b0	 ldrh        r3, [r3]
  00fd4	e1cd31b8	 strh        r3, [sp, #0x18]

; 563  : }

  00fd8	e1dd01b8	 ldrh        r0, [sp, #0x18]
  00fdc	e28dd030	 add         sp, sp, #0x30
  00fe0	e89d6000	 ldmia       sp, {sp, lr}
  00fe4	e12fff1e	 bx          lr
  00fe8		 |$LN24@LAN91CGetF|
  00fe8		 |$LN25@LAN91CGetF|
  00fe8	00000000	 DCD         |g_pLAN91C|
  00fec		 |$LN26@LAN91CGetF|
  00fec	00000000	 DCD         |g_chipRevision|
  00ff0		 |$LN27@LAN91CGetF|
  00ff0	00000000	 DCD         |??_C@_1HM@PHDCLFGM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAs?$AAi@|
  00ff4		 |$LN28@LAN91CGetF|
  00ff4	00000000	 DCD         |dpCurSettings|
  00ff8		 |$M43437|

			 ENDP  ; |LAN91CGetFrame|

	EXPORT	|??_C@_1CI@OMABAGF@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@FLLJHBHF@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|LAN91CEnableInts|

  00018			 AREA	 |.pdata|, PDATA
|$T43453| DCD	|$LN9@LAN91CEnab|
	DCD	0x40003102

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OMABAGF@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@FLLJHBHF@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00ff8			 AREA	 |.text|, CODE, ARM

  00ff8		 |LAN91CEnableInts| PROC

; 569  : {

  00ff8		 |$LN9@LAN91CEnab|
  00ff8	e52de004	 str         lr, [sp, #-4]!
  00ffc	e24dd008	 sub         sp, sp, #8
  01000		 |$M43450|

; 570  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"+LAN91CEnableInts\r\n"));

  01000	e59f30a8	 ldr         r3, [pc, #0xA8]
  01004	e5933440	 ldr         r3, [r3, #0x440]
  01008	e3130a02	 tst         r3, #2, 20
  0100c	0a000008	 beq         |$LN3@LAN91CEnab|
  01010	e59f3098	 ldr         r3, [pc, #0x98]
  01014	e5933440	 ldr         r3, [r3, #0x440]
  01018	e3130004	 tst         r3, #4
  0101c	0a000004	 beq         |$LN3@LAN91CEnab|
  01020	e59f0090	 ldr         r0, [pc, #0x90]
  01024	eb000000	 bl          OALLogSerial
  01028	e3a03001	 mov         r3, #1
  0102c	e58d3000	 str         r3, [sp]
  01030	ea000001	 b           |$LN4@LAN91CEnab|
  01034		 |$LN3@LAN91CEnab|
  01034	e3a03000	 mov         r3, #0
  01038	e58d3000	 str         r3, [sp]
  0103c		 |$LN4@LAN91CEnab|

; 571  : 
; 572  :     // Only enable receive interrupts (we poll for Tx completion)
; 573  :     OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  0103c	e3a01002	 mov         r1, #2
  01040	e59f306c	 ldr         r3, [pc, #0x6C]
  01044	e5933000	 ldr         r3, [r3]
  01048	e283000e	 add         r0, r3, #0xE
  0104c	eb000000	 bl          WRITE_PORT_USHORT

; 574  :     OUTPORT16(&g_pLAN91C->INTR, INTR_RX_MASK);

  01050	e3a01c01	 mov         r1, #1, 24
  01054	e59f3058	 ldr         r3, [pc, #0x58]
  01058	e5933000	 ldr         r3, [r3]
  0105c	e283000c	 add         r0, r3, #0xC
  01060	eb000000	 bl          WRITE_PORT_USHORT

; 575  : 
; 576  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-LAN91CEnableInts\r\n"));

  01064	e59f3044	 ldr         r3, [pc, #0x44]
  01068	e5933440	 ldr         r3, [r3, #0x440]
  0106c	e3130a02	 tst         r3, #2, 20
  01070	0a000008	 beq         |$LN5@LAN91CEnab|
  01074	e59f3034	 ldr         r3, [pc, #0x34]
  01078	e5933440	 ldr         r3, [r3, #0x440]
  0107c	e3130004	 tst         r3, #4
  01080	0a000004	 beq         |$LN5@LAN91CEnab|
  01084	e59f0020	 ldr         r0, [pc, #0x20]
  01088	eb000000	 bl          OALLogSerial
  0108c	e3a03001	 mov         r3, #1
  01090	e58d3004	 str         r3, [sp, #4]
  01094	ea000001	 b           |$LN6@LAN91CEnab|
  01098		 |$LN5@LAN91CEnab|
  01098	e3a03000	 mov         r3, #0
  0109c	e58d3004	 str         r3, [sp, #4]
  010a0		 |$LN6@LAN91CEnab|

; 577  : }

  010a0	e28dd008	 add         sp, sp, #8
  010a4	e49de004	 ldr         lr, [sp], #4
  010a8	e12fff1e	 bx          lr
  010ac		 |$LN10@LAN91CEnab|
  010ac		 |$LN11@LAN91CEnab|
  010ac	00000000	 DCD         |??_C@_1CI@OMABAGF@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  010b0		 |$LN12@LAN91CEnab|
  010b0	00000000	 DCD         |dpCurSettings|
  010b4		 |$LN13@LAN91CEnab|
  010b4	00000000	 DCD         |g_pLAN91C|
  010b8		 |$LN14@LAN91CEnab|
  010b8	00000000	 DCD         |??_C@_1CI@FLLJHBHF@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  010bc		 |$M43451|

			 ENDP  ; |LAN91CEnableInts|

	EXPORT	|??_C@_1CK@HFLNHNLC@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@FMKGLFE@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|LAN91CDisableInts|

  00020			 AREA	 |.pdata|, PDATA
|$T43467| DCD	|$LN9@LAN91CDisa|
	DCD	0x40003102

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@HFLNHNLC@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@FMKGLFE@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  010bc			 AREA	 |.text|, CODE, ARM

  010bc		 |LAN91CDisableInts| PROC

; 582  : {

  010bc		 |$LN9@LAN91CDisa|
  010bc	e52de004	 str         lr, [sp, #-4]!
  010c0	e24dd008	 sub         sp, sp, #8
  010c4		 |$M43464|

; 583  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"+LAN91CDisableInts\r\n"));

  010c4	e59f30a8	 ldr         r3, [pc, #0xA8]
  010c8	e5933440	 ldr         r3, [r3, #0x440]
  010cc	e3130a02	 tst         r3, #2, 20
  010d0	0a000008	 beq         |$LN3@LAN91CDisa|
  010d4	e59f3098	 ldr         r3, [pc, #0x98]
  010d8	e5933440	 ldr         r3, [r3, #0x440]
  010dc	e3130004	 tst         r3, #4
  010e0	0a000004	 beq         |$LN3@LAN91CDisa|
  010e4	e59f0090	 ldr         r0, [pc, #0x90]
  010e8	eb000000	 bl          OALLogSerial
  010ec	e3a03001	 mov         r3, #1
  010f0	e58d3000	 str         r3, [sp]
  010f4	ea000001	 b           |$LN4@LAN91CDisa|
  010f8		 |$LN3@LAN91CDisa|
  010f8	e3a03000	 mov         r3, #0
  010fc	e58d3000	 str         r3, [sp]
  01100		 |$LN4@LAN91CDisa|

; 584  : 
; 585  :     // Disable all interrupts
; 586  :     OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  01100	e3a01002	 mov         r1, #2
  01104	e59f306c	 ldr         r3, [pc, #0x6C]
  01108	e5933000	 ldr         r3, [r3]
  0110c	e283000e	 add         r0, r3, #0xE
  01110	eb000000	 bl          WRITE_PORT_USHORT

; 587  :     OUTPORT16(&g_pLAN91C->INTR, 0);

  01114	e3a01000	 mov         r1, #0
  01118	e59f3058	 ldr         r3, [pc, #0x58]
  0111c	e5933000	 ldr         r3, [r3]
  01120	e283000c	 add         r0, r3, #0xC
  01124	eb000000	 bl          WRITE_PORT_USHORT

; 588  : 
; 589  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-LAN91CDisableInts\r\n"));

  01128	e59f3044	 ldr         r3, [pc, #0x44]
  0112c	e5933440	 ldr         r3, [r3, #0x440]
  01130	e3130a02	 tst         r3, #2, 20
  01134	0a000008	 beq         |$LN5@LAN91CDisa|
  01138	e59f3034	 ldr         r3, [pc, #0x34]
  0113c	e5933440	 ldr         r3, [r3, #0x440]
  01140	e3130004	 tst         r3, #4
  01144	0a000004	 beq         |$LN5@LAN91CDisa|
  01148	e59f0020	 ldr         r0, [pc, #0x20]
  0114c	eb000000	 bl          OALLogSerial
  01150	e3a03001	 mov         r3, #1
  01154	e58d3004	 str         r3, [sp, #4]
  01158	ea000001	 b           |$LN6@LAN91CDisa|
  0115c		 |$LN5@LAN91CDisa|
  0115c	e3a03000	 mov         r3, #0
  01160	e58d3004	 str         r3, [sp, #4]
  01164		 |$LN6@LAN91CDisa|

; 590  : }

  01164	e28dd008	 add         sp, sp, #8
  01168	e49de004	 ldr         lr, [sp], #4
  0116c	e12fff1e	 bx          lr
  01170		 |$LN10@LAN91CDisa|
  01170		 |$LN11@LAN91CDisa|
  01170	00000000	 DCD         |??_C@_1CK@HFLNHNLC@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  01174		 |$LN12@LAN91CDisa|
  01174	00000000	 DCD         |dpCurSettings|
  01178		 |$LN13@LAN91CDisa|
  01178	00000000	 DCD         |g_pLAN91C|
  0117c		 |$LN14@LAN91CDisa|
  0117c	00000000	 DCD         |??_C@_1CK@FMKGLFE@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  01180		 |$M43465|

			 ENDP  ; |LAN91CDisableInts|

	EXPORT	|??_C@_1DK@DHIOCIKP@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@DKKEPGHP@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	EXPORT	|LAN91CCurrentPacketFilter|

  00028			 AREA	 |.pdata|, PDATA
|$T43481| DCD	|$LN11@LAN91CCurr|
	DCD	0x40004604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@DHIOCIKP@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e"
	DCB	0x0, "t", 0x0, "F", 0x0, "i", 0x0, "l", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@DKKEPGHP@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "+"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e"
	DCB	0x0, "t", 0x0, "F", 0x0, "i", 0x0, "l", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  01180			 AREA	 |.text|, CODE, ARM

  01180		 |LAN91CCurrentPacketFilter| PROC

; 595  : {

  01180		 |$LN11@LAN91CCurr|
  01180	e1a0c00d	 mov         r12, sp
  01184	e92d0001	 stmdb       sp!, {r0}
  01188	e92d5000	 stmdb       sp!, {r12, lr}
  0118c	e24dd00c	 sub         sp, sp, #0xC
  01190		 |$M43478|

; 596  :     UINT16 rcr = RCR_RXEN|RCR_STRIP_CRC;

  01190	e3a03c03	 mov         r3, #3, 24
  01194	e1cd30b0	 strh        r3, [sp]

; 597  : 
; 598  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 599  :         L"+LAN91CCurrentPacketFilter(0x%08x)\r\n", filter
; 600  :     ));

  01198	e59f30ec	 ldr         r3, [pc, #0xEC]
  0119c	e5933440	 ldr         r3, [r3, #0x440]
  011a0	e3130a02	 tst         r3, #2, 20
  011a4	0a000009	 beq         |$LN5@LAN91CCurr|
  011a8	e59f30dc	 ldr         r3, [pc, #0xDC]
  011ac	e5933440	 ldr         r3, [r3, #0x440]
  011b0	e3130004	 tst         r3, #4
  011b4	0a000005	 beq         |$LN5@LAN91CCurr|
  011b8	e59d1014	 ldr         r1, [sp, #0x14]
  011bc	e59f00d0	 ldr         r0, [pc, #0xD0]
  011c0	eb000000	 bl          OALLogSerial
  011c4	e3a03001	 mov         r3, #1
  011c8	e58d3004	 str         r3, [sp, #4]
  011cc	ea000001	 b           |$LN6@LAN91CCurr|
  011d0		 |$LN5@LAN91CCurr|
  011d0	e3a03000	 mov         r3, #0
  011d4	e58d3004	 str         r3, [sp, #4]
  011d8		 |$LN6@LAN91CCurr|

; 601  : 
; 602  :     if ((filter & PACKET_TYPE_ALL_MULTICAST) != 0) rcr |= RCR_ALMUL;

  011d8	e59d3014	 ldr         r3, [sp, #0x14]
  011dc	e3130004	 tst         r3, #4
  011e0	0a000004	 beq         |$LN2@LAN91CCurr|
  011e4	e1dd30b0	 ldrh        r3, [sp]
  011e8	e3833004	 orr         r3, r3, #4
  011ec	e1a03803	 mov         r3, r3, lsl #16
  011f0	e1a03823	 mov         r3, r3, lsr #16
  011f4	e1cd30b0	 strh        r3, [sp]
  011f8		 |$LN2@LAN91CCurr|

; 603  :     if ((filter & PACKET_TYPE_PROMISCUOUS) != 0) rcr |= RCR_PRMS;

  011f8	e59d3014	 ldr         r3, [sp, #0x14]
  011fc	e3130020	 tst         r3, #0x20
  01200	0a000004	 beq         |$LN1@LAN91CCurr|
  01204	e1dd30b0	 ldrh        r3, [sp]
  01208	e3833002	 orr         r3, r3, #2
  0120c	e1a03803	 mov         r3, r3, lsl #16
  01210	e1a03823	 mov         r3, r3, lsr #16
  01214	e1cd30b0	 strh        r3, [sp]
  01218		 |$LN1@LAN91CCurr|

; 604  : 
; 605  :     OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  01218	e3a01000	 mov         r1, #0
  0121c	e59f306c	 ldr         r3, [pc, #0x6C]
  01220	e5933000	 ldr         r3, [r3]
  01224	e283000e	 add         r0, r3, #0xE
  01228	eb000000	 bl          WRITE_PORT_USHORT

; 606  :     OUTPORT16(&g_pLAN91C->RCR, rcr);

  0122c	e1dd10b0	 ldrh        r1, [sp]
  01230	e59f3058	 ldr         r3, [pc, #0x58]
  01234	e5933000	 ldr         r3, [r3]
  01238	e2830004	 add         r0, r3, #4
  0123c	eb000000	 bl          WRITE_PORT_USHORT

; 607  : 
; 608  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-LAN91CCurrentPacketFilter\r\n"));

  01240	e59f3044	 ldr         r3, [pc, #0x44]
  01244	e5933440	 ldr         r3, [r3, #0x440]
  01248	e3130a02	 tst         r3, #2, 20
  0124c	0a000008	 beq         |$LN7@LAN91CCurr|
  01250	e59f3034	 ldr         r3, [pc, #0x34]
  01254	e5933440	 ldr         r3, [r3, #0x440]
  01258	e3130004	 tst         r3, #4
  0125c	0a000004	 beq         |$LN7@LAN91CCurr|
  01260	e59f0020	 ldr         r0, [pc, #0x20]
  01264	eb000000	 bl          OALLogSerial
  01268	e3a03001	 mov         r3, #1
  0126c	e58d3008	 str         r3, [sp, #8]
  01270	ea000001	 b           |$LN8@LAN91CCurr|
  01274		 |$LN7@LAN91CCurr|
  01274	e3a03000	 mov         r3, #0
  01278	e58d3008	 str         r3, [sp, #8]
  0127c		 |$LN8@LAN91CCurr|

; 609  : }

  0127c	e28dd00c	 add         sp, sp, #0xC
  01280	e89d6000	 ldmia       sp, {sp, lr}
  01284	e12fff1e	 bx          lr
  01288		 |$LN12@LAN91CCurr|
  01288		 |$LN13@LAN91CCurr|
  01288	00000000	 DCD         |??_C@_1DK@DHIOCIKP@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  0128c		 |$LN14@LAN91CCurr|
  0128c	00000000	 DCD         |dpCurSettings|
  01290		 |$LN15@LAN91CCurr|
  01290	00000000	 DCD         |g_pLAN91C|
  01294		 |$LN16@LAN91CCurr|
  01294	00000000	 DCD         |??_C@_1EK@DKKEPGHP@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  01298		 |$M43479|

			 ENDP  ; |LAN91CCurrentPacketFilter|

	EXPORT	|??_C@_1DO@CJJDCGJJ@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@GJCLLOK@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|LAN91CMulticastList|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00030			 AREA	 |.pdata|, PDATA
|$T43501| DCD	|$LN12@LAN91CMult|
	DCD	0xc0007d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@CJJDCGJJ@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "c"
	DCB	0x0, "a", 0x0, "s", 0x0, "t", 0x0, "L", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "1", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@GJCLLOK@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@| DCB "+"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "c"
	DCB	0x0, "a", 0x0, "s", 0x0, "t", 0x0, "L", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T43497| DCD	0xffffffdc
; Function compile flags: /Odtp

  01298			 AREA	 |.text|, CODE, ARM

  01298	00000000	 DCD         |__GSHandlerCheck|
  0129c	00000000	 DCD         |$T43497|

  012a0		 |LAN91CMulticastList| PROC

; 614  : {

  012a0		 |$LN12@LAN91CMult|
  012a0	e1a0c00d	 mov         r12, sp
  012a4	e92d0003	 stmdb       sp!, {r0, r1}
  012a8	e92d5000	 stmdb       sp!, {r12, lr}
  012ac	e24dd024	 sub         sp, sp, #0x24
  012b0		 |$M43498|
  012b0	e59f31d8	 ldr         r3, [pc, #0x1D8]
  012b4	e5933000	 ldr         r3, [r3]
  012b8	e58d3010	 str         r3, [sp, #0x10]

; 615  :     UINT32 crc, i;
; 616  :     UINT16 h[4];
; 617  : 
; 618  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 619  :         L"+LAN91CMulticastList(0x%08x, %d)\r\n", pAddresses, count
; 620  :     ));

  012bc	e59f31c0	 ldr         r3, [pc, #0x1C0]
  012c0	e5933440	 ldr         r3, [r3, #0x440]
  012c4	e3130a02	 tst         r3, #2, 20
  012c8	0a00000a	 beq         |$LN6@LAN91CMult|
  012cc	e59f31b0	 ldr         r3, [pc, #0x1B0]
  012d0	e5933440	 ldr         r3, [r3, #0x440]
  012d4	e3130004	 tst         r3, #4
  012d8	0a000006	 beq         |$LN6@LAN91CMult|
  012dc	e59d2030	 ldr         r2, [sp, #0x30]
  012e0	e59d102c	 ldr         r1, [sp, #0x2C]
  012e4	e59f01a0	 ldr         r0, [pc, #0x1A0]
  012e8	eb000000	 bl          OALLogSerial
  012ec	e3a03001	 mov         r3, #1
  012f0	e58d3018	 str         r3, [sp, #0x18]
  012f4	ea000001	 b           |$LN7@LAN91CMult|
  012f8		 |$LN6@LAN91CMult|
  012f8	e3a03000	 mov         r3, #0
  012fc	e58d3018	 str         r3, [sp, #0x18]
  01300		 |$LN7@LAN91CMult|

; 621  : 
; 622  :     // Calculate hash bits       
; 623  :     h[0] = h[1] = h[2] = h[3] = 0;

  01300	e3a03000	 mov         r3, #0
  01304	e1cd30b6	 strh        r3, [sp, #6]
  01308	e1dd30b6	 ldrh        r3, [sp, #6]
  0130c	e1cd30b4	 strh        r3, [sp, #4]
  01310	e1dd30b4	 ldrh        r3, [sp, #4]
  01314	e1cd30b2	 strh        r3, [sp, #2]
  01318	e1dd30b2	 ldrh        r3, [sp, #2]
  0131c	e1cd30b0	 strh        r3, [sp]

; 624  :     for (i = 0; i < count; i++) {

  01320	e3a03000	 mov         r3, #0
  01324	e58d300c	 str         r3, [sp, #0xC]
  01328	ea000002	 b           |$LN3@LAN91CMult|
  0132c		 |$LN2@LAN91CMult|
  0132c	e59d300c	 ldr         r3, [sp, #0xC]
  01330	e2833001	 add         r3, r3, #1
  01334	e58d300c	 str         r3, [sp, #0xC]
  01338		 |$LN3@LAN91CMult|
  01338	e59d200c	 ldr         r2, [sp, #0xC]
  0133c	e59d3030	 ldr         r3, [sp, #0x30]
  01340	e1520003	 cmp         r2, r3
  01344	2a00001e	 bcs         |$LN1@LAN91CMult|

; 625  :         crc = Crc(pAddresses);

  01348	e59d002c	 ldr         r0, [sp, #0x2C]
  0134c	eb000000	 bl          Crc
  01350	e58d001c	 str         r0, [sp, #0x1C]
  01354	e59d301c	 ldr         r3, [sp, #0x1C]
  01358	e58d3008	 str         r3, [sp, #8]

; 626  :         h[crc >> 30] |= 1 << ((crc >> 26) & 0x0F);

  0135c	e59d3008	 ldr         r3, [sp, #8]
  01360	e1a01f23	 mov         r1, r3, lsr #30
  01364	e3a03002	 mov         r3, #2
  01368	e0020391	 mul         r2, r1, r3
  0136c	e28d3000	 add         r3, sp, #0
  01370	e0831002	 add         r1, r3, r2
  01374	e59d3008	 ldr         r3, [sp, #8]
  01378	e1a03103	 mov         r3, r3, lsl #2
  0137c	e1a02e23	 mov         r2, r3, lsr #28
  01380	e3a03001	 mov         r3, #1
  01384	e1a02213	 mov         r2, r3, lsl r2
  01388	e1d130b0	 ldrh        r3, [r1]
  0138c	e1830002	 orr         r0, r3, r2
  01390	e59d3008	 ldr         r3, [sp, #8]
  01394	e1a01f23	 mov         r1, r3, lsr #30
  01398	e3a03002	 mov         r3, #2
  0139c	e0020391	 mul         r2, r1, r3
  013a0	e28d3000	 add         r3, sp, #0
  013a4	e0832002	 add         r2, r3, r2
  013a8	e1a03800	 mov         r3, r0, lsl #16
  013ac	e1a03823	 mov         r3, r3, lsr #16
  013b0	e1c230b0	 strh        r3, [r2]

; 627  :         pAddresses += 6;

  013b4	e59d302c	 ldr         r3, [sp, #0x2C]
  013b8	e2833006	 add         r3, r3, #6
  013bc	e58d302c	 str         r3, [sp, #0x2C]

; 628  :     }

  013c0	eaffffd9	 b           |$LN2@LAN91CMult|
  013c4		 |$LN1@LAN91CMult|

; 629  : 
; 630  :     // Write it to hardware
; 631  :     OUTPORT16(&g_pLAN91C->BANKSEL, 3);

  013c4	e3a01003	 mov         r1, #3
  013c8	e59f30b8	 ldr         r3, [pc, #0xB8]
  013cc	e5933000	 ldr         r3, [r3]
  013d0	e283000e	 add         r0, r3, #0xE
  013d4	eb000000	 bl          WRITE_PORT_USHORT

; 632  :     OUTPORT16(&g_pLAN91C->MT[0], h[0]);

  013d8	e1dd10b0	 ldrh        r1, [sp]
  013dc	e59f30a4	 ldr         r3, [pc, #0xA4]
  013e0	e5930000	 ldr         r0, [r3]
  013e4	eb000000	 bl          WRITE_PORT_USHORT

; 633  :     OUTPORT16(&g_pLAN91C->MT[1], h[1]);

  013e8	e1dd10b2	 ldrh        r1, [sp, #2]
  013ec	e59f3094	 ldr         r3, [pc, #0x94]
  013f0	e5933000	 ldr         r3, [r3]
  013f4	e2830002	 add         r0, r3, #2
  013f8	eb000000	 bl          WRITE_PORT_USHORT

; 634  :     OUTPORT16(&g_pLAN91C->MT[2], h[2]);

  013fc	e1dd10b4	 ldrh        r1, [sp, #4]
  01400	e59f3080	 ldr         r3, [pc, #0x80]
  01404	e5933000	 ldr         r3, [r3]
  01408	e2830004	 add         r0, r3, #4
  0140c	eb000000	 bl          WRITE_PORT_USHORT

; 635  :     OUTPORT16(&g_pLAN91C->MT[3], h[3]);

  01410	e1dd10b6	 ldrh        r1, [sp, #6]
  01414	e59f306c	 ldr         r3, [pc, #0x6C]
  01418	e5933000	 ldr         r3, [r3]
  0141c	e2830006	 add         r0, r3, #6
  01420	eb000000	 bl          WRITE_PORT_USHORT

; 636  : 
; 637  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-LAN91CMulticastList(rc = 1)\r\n"));

  01424	e59f3058	 ldr         r3, [pc, #0x58]
  01428	e5933440	 ldr         r3, [r3, #0x440]
  0142c	e3130a02	 tst         r3, #2, 20
  01430	0a000008	 beq         |$LN8@LAN91CMult|
  01434	e59f3048	 ldr         r3, [pc, #0x48]
  01438	e5933440	 ldr         r3, [r3, #0x440]
  0143c	e3130004	 tst         r3, #4
  01440	0a000004	 beq         |$LN8@LAN91CMult|
  01444	e59f0034	 ldr         r0, [pc, #0x34]
  01448	eb000000	 bl          OALLogSerial
  0144c	e3a03001	 mov         r3, #1
  01450	e58d3020	 str         r3, [sp, #0x20]
  01454	ea000001	 b           |$LN9@LAN91CMult|
  01458		 |$LN8@LAN91CMult|
  01458	e3a03000	 mov         r3, #0
  0145c	e58d3020	 str         r3, [sp, #0x20]
  01460		 |$LN9@LAN91CMult|

; 638  :     return TRUE;

  01460	e59d0010	 ldr         r0, [sp, #0x10]
  01464	eb000000	 bl          __security_check_cookie
  01468	e3a03001	 mov         r3, #1
  0146c	e58d3014	 str         r3, [sp, #0x14]

; 639  : }

  01470	e59d0014	 ldr         r0, [sp, #0x14]
  01474	e28dd024	 add         sp, sp, #0x24
  01478	e89d6000	 ldmia       sp, {sp, lr}
  0147c	e12fff1e	 bx          lr
  01480		 |$LN13@LAN91CMult|
  01480		 |$LN14@LAN91CMult|
  01480	00000000	 DCD         |??_C@_1DO@CJJDCGJJ@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01484		 |$LN15@LAN91CMult|
  01484	00000000	 DCD         |dpCurSettings|
  01488		 |$LN16@LAN91CMult|
  01488	00000000	 DCD         |g_pLAN91C|
  0148c		 |$LN17@LAN91CMult|
  0148c	00000000	 DCD         |??_C@_1EG@GJCLLOK@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@|
  01490		 |$LN18@LAN91CMult|
  01490	00000000	 DCD         |__security_cookie|
  01494		 |$M43499|

			 ENDP  ; |LAN91CMulticastList|


  00038			 AREA	 |.pdata|, PDATA
|$T43515| DCD	|$LN14@Crc|
	DCD	0x40004304
; Function compile flags: /Odtp

  01494			 AREA	 |.text|, CODE, ARM

  01494		 |Crc|	 PROC

; 644  : {

  01494		 |$LN14@Crc|
  01494	e1a0c00d	 mov         r12, sp
  01498	e92d0001	 stmdb       sp!, {r0}
  0149c	e92d5000	 stmdb       sp!, {r12, lr}
  014a0	e24dd01c	 sub         sp, sp, #0x1C
  014a4		 |$M43512|

; 645  :     UINT32 crc, carry;
; 646  :     UINT32 i, j;
; 647  :     UINT8 uc;
; 648  : 
; 649  :     crc = 0xFFFFFFFF;

  014a4	e3e03000	 mvn         r3, #0
  014a8	e58d3000	 str         r3, [sp]

; 650  :     for (i = 0; i < 6; i++) {

  014ac	e3a03000	 mov         r3, #0
  014b0	e58d3004	 str         r3, [sp, #4]
  014b4	ea000002	 b           |$LN7@Crc|
  014b8		 |$LN6@Crc|
  014b8	e59d3004	 ldr         r3, [sp, #4]
  014bc	e2833001	 add         r3, r3, #1
  014c0	e58d3004	 str         r3, [sp, #4]
  014c4		 |$LN7@Crc|
  014c4	e59d3004	 ldr         r3, [sp, #4]
  014c8	e3530006	 cmp         r3, #6
  014cc	2a00002c	 bcs         |$LN5@Crc|

; 651  :         uc = pAddress[i];

  014d0	e59d2024	 ldr         r2, [sp, #0x24]
  014d4	e59d3004	 ldr         r3, [sp, #4]
  014d8	e0823003	 add         r3, r2, r3
  014dc	e5d33000	 ldrb        r3, [r3]
  014e0	e5cd3008	 strb        r3, [sp, #8]

; 652  :         for (j = 0; j < 8; j++) {

  014e4	e3a03000	 mov         r3, #0
  014e8	e58d3010	 str         r3, [sp, #0x10]
  014ec	ea000002	 b           |$LN4@Crc|
  014f0		 |$LN3@Crc|
  014f0	e59d3010	 ldr         r3, [sp, #0x10]
  014f4	e2833001	 add         r3, r3, #1
  014f8	e58d3010	 str         r3, [sp, #0x10]
  014fc		 |$LN4@Crc|
  014fc	e59d3010	 ldr         r3, [sp, #0x10]
  01500	e3530008	 cmp         r3, #8
  01504	2a00001d	 bcs         |$LN2@Crc|

; 653  :             carry = ((crc & 0x80000000) ? 1 : 0) ^ (uc & 0x01);

  01508	e59d3000	 ldr         r3, [sp]
  0150c	e3130102	 tst         r3, #2, 2
  01510	0a000002	 beq         |$LN10@Crc|
  01514	e3a03001	 mov         r3, #1
  01518	e58d3018	 str         r3, [sp, #0x18]
  0151c	ea000001	 b           |$LN11@Crc|
  01520		 |$LN10@Crc|
  01520	e3a03000	 mov         r3, #0
  01524	e58d3018	 str         r3, [sp, #0x18]
  01528		 |$LN11@Crc|
  01528	e5dd3008	 ldrb        r3, [sp, #8]
  0152c	e2032001	 and         r2, r3, #1
  01530	e59d3018	 ldr         r3, [sp, #0x18]
  01534	e0233002	 eor         r3, r3, r2
  01538	e58d300c	 str         r3, [sp, #0xC]

; 654  :             crc <<= 1;

  0153c	e59d3000	 ldr         r3, [sp]
  01540	e1a03083	 mov         r3, r3, lsl #1
  01544	e58d3000	 str         r3, [sp]

; 655  :             uc >>= 1;

  01548	e5dd3008	 ldrb        r3, [sp, #8]
  0154c	e1a030a3	 mov         r3, r3, lsr #1
  01550	e20330ff	 and         r3, r3, #0xFF
  01554	e5cd3008	 strb        r3, [sp, #8]

; 656  :             if (carry) crc = (crc ^ 0x04c11db6) | carry;

  01558	e59d300c	 ldr         r3, [sp, #0xC]
  0155c	e3530000	 cmp         r3, #0
  01560	0a000005	 beq         |$LN1@Crc|
  01564	e59d2000	 ldr         r2, [sp]
  01568	e59f302c	 ldr         r3, [pc, #0x2C]
  0156c	e0222003	 eor         r2, r2, r3
  01570	e59d300c	 ldr         r3, [sp, #0xC]
  01574	e1823003	 orr         r3, r2, r3
  01578	e58d3000	 str         r3, [sp]
  0157c		 |$LN1@Crc|

; 657  :         }

  0157c	eaffffdb	 b           |$LN3@Crc|
  01580		 |$LN2@Crc|

; 658  :     }

  01580	eaffffcc	 b           |$LN6@Crc|
  01584		 |$LN5@Crc|

; 659  :     return crc;

  01584	e59d3000	 ldr         r3, [sp]
  01588	e58d3014	 str         r3, [sp, #0x14]

; 660  : }

  0158c	e59d0014	 ldr         r0, [sp, #0x14]
  01590	e28dd01c	 add         sp, sp, #0x1C
  01594	e89d6000	 ldmia       sp, {sp, lr}
  01598	e12fff1e	 bx          lr
  0159c		 |$LN15@Crc|
  0159c		 |$LN16@Crc|
  0159c	04c11db6	 DCD         0x4c11db6
  015a0		 |$M43513|

			 ENDP  ; |Crc|

	EXPORT	|__$ArrayPad$| [ DATA ]

  00040			 AREA	 |.pdata|, PDATA
|$T43524| DCD	|$LN26@PhyWrite|
	DCD	0xc0012704

  00004			 AREA	 |.xdata|, DATA
|$T43520| DCD	0xffffffe4
; Function compile flags: /Odtp

  015a0			 AREA	 |.text|, CODE, ARM

  015a0	00000000	 DCD         |__GSHandlerCheck|
  015a4	00000000	 DCD         |$T43520|

  015a8		 |PhyWrite| PROC

; 665  : {

  015a8		 |$LN26@PhyWrite|
  015a8	e1a0c00d	 mov         r12, sp
  015ac	e92d0007	 stmdb       sp!, {r0 - r2}
  015b0	e92d5000	 stmdb       sp!, {r12, lr}
  015b4	e24dd058	 sub         sp, sp, #0x58
  015b8		 |$M43521|
  015b8	e59f3480	 ldr         r3, [pc, #0x480]
  015bc	e5933000	 ldr         r3, [r3]
  015c0	e58d3050	 str         r3, [sp, #0x50]

; 666  :     INT32 i;
; 667  :     UINT16 mask;
; 668  :     UINT16 mii_reg;
; 669  :     UINT8 bits[65];
; 670  :     INT32 clk_idx = 0;

  015c4	e3a03000	 mov         r3, #0
  015c8	e58d3008	 str         r3, [sp, #8]

; 671  : 
; 672  :     // 32 consecutive ones on MDO to establish sync.
; 673  :     //
; 674  :     for (i = 0; i < 32; ++i)

  015cc	e3a03000	 mov         r3, #0
  015d0	e58d3000	 str         r3, [sp]
  015d4	ea000002	 b           |$LN21@PhyWrite|
  015d8		 |$LN20@PhyWrite|
  015d8	e59d3000	 ldr         r3, [sp]
  015dc	e2833001	 add         r3, r3, #1
  015e0	e58d3000	 str         r3, [sp]
  015e4		 |$LN21@PhyWrite|
  015e4	e59d3000	 ldr         r3, [sp]
  015e8	e3530020	 cmp         r3, #0x20
  015ec	aa000008	 bge         |$LN19@PhyWrite|

; 675  :     {
; 676  :         bits[clk_idx++] = MGMT_MDOE | MGMT_MDO;

  015f0	e28d200c	 add         r2, sp, #0xC
  015f4	e59d3008	 ldr         r3, [sp, #8]
  015f8	e0822003	 add         r2, r2, r3
  015fc	e3a03009	 mov         r3, #9
  01600	e5c23000	 strb        r3, [r2]
  01604	e59d3008	 ldr         r3, [sp, #8]
  01608	e2833001	 add         r3, r3, #1
  0160c	e58d3008	 str         r3, [sp, #8]

; 677  :     }

  01610	eafffff0	 b           |$LN20@PhyWrite|
  01614		 |$LN19@PhyWrite|

; 678  : 
; 679  :     // Start code <01>.
; 680  :     //
; 681  :     bits[clk_idx++] = MGMT_MDOE;

  01614	e28d200c	 add         r2, sp, #0xC
  01618	e59d3008	 ldr         r3, [sp, #8]
  0161c	e0822003	 add         r2, r2, r3
  01620	e3a03008	 mov         r3, #8
  01624	e5c23000	 strb        r3, [r2]
  01628	e59d3008	 ldr         r3, [sp, #8]
  0162c	e2833001	 add         r3, r3, #1
  01630	e58d3008	 str         r3, [sp, #8]

; 682  :     bits[clk_idx++] = MGMT_MDOE | MGMT_MDO;

  01634	e28d200c	 add         r2, sp, #0xC
  01638	e59d3008	 ldr         r3, [sp, #8]
  0163c	e0822003	 add         r2, r2, r3
  01640	e3a03009	 mov         r3, #9
  01644	e5c23000	 strb        r3, [r2]
  01648	e59d3008	 ldr         r3, [sp, #8]
  0164c	e2833001	 add         r3, r3, #1
  01650	e58d3008	 str         r3, [sp, #8]

; 683  : 
; 684  :     // Write command <01>.
; 685  :     //
; 686  :     bits[clk_idx++] = MGMT_MDOE;

  01654	e28d200c	 add         r2, sp, #0xC
  01658	e59d3008	 ldr         r3, [sp, #8]
  0165c	e0822003	 add         r2, r2, r3
  01660	e3a03008	 mov         r3, #8
  01664	e5c23000	 strb        r3, [r2]
  01668	e59d3008	 ldr         r3, [sp, #8]
  0166c	e2833001	 add         r3, r3, #1
  01670	e58d3008	 str         r3, [sp, #8]

; 687  :     bits[clk_idx++] = MGMT_MDOE | MGMT_MDO;

  01674	e28d200c	 add         r2, sp, #0xC
  01678	e59d3008	 ldr         r3, [sp, #8]
  0167c	e0822003	 add         r2, r2, r3
  01680	e3a03009	 mov         r3, #9
  01684	e5c23000	 strb        r3, [r2]
  01688	e59d3008	 ldr         r3, [sp, #8]
  0168c	e2833001	 add         r3, r3, #1
  01690	e58d3008	 str         r3, [sp, #8]

; 688  : 
; 689  :     // Output the PHY address, msb first.
; 690  :     //
; 691  :     mask = (UINT8)0x10;

  01694	e3a03010	 mov         r3, #0x10
  01698	e1cd30b4	 strh        r3, [sp, #4]

; 692  :     for (i = 0; i < 5; ++i)

  0169c	e3a03000	 mov         r3, #0
  016a0	e58d3000	 str         r3, [sp]
  016a4	ea000002	 b           |$LN18@PhyWrite|
  016a8		 |$LN17@PhyWrite|
  016a8	e59d3000	 ldr         r3, [sp]
  016ac	e2833001	 add         r3, r3, #1
  016b0	e58d3000	 str         r3, [sp]
  016b4		 |$LN18@PhyWrite|
  016b4	e59d3000	 ldr         r3, [sp]
  016b8	e3530005	 cmp         r3, #5
  016bc	aa00001b	 bge         |$LN16@PhyWrite|

; 693  :     {
; 694  :         if (PHYaddr & mask)

  016c0	e5dd3060	 ldrb        r3, [sp, #0x60]
  016c4	e1a02003	 mov         r2, r3
  016c8	e1dd30b4	 ldrh        r3, [sp, #4]
  016cc	e1120003	 tst         r2, r3
  016d0	0a000008	 beq         |$LN15@PhyWrite|

; 695  :             bits[clk_idx++] = MGMT_MDOE | MGMT_MDO;

  016d4	e28d200c	 add         r2, sp, #0xC
  016d8	e59d3008	 ldr         r3, [sp, #8]
  016dc	e0822003	 add         r2, r2, r3
  016e0	e3a03009	 mov         r3, #9
  016e4	e5c23000	 strb        r3, [r2]
  016e8	e59d3008	 ldr         r3, [sp, #8]
  016ec	e2833001	 add         r3, r3, #1
  016f0	e58d3008	 str         r3, [sp, #8]

; 696  :         else

  016f4	ea000007	 b           |$LN14@PhyWrite|
  016f8		 |$LN15@PhyWrite|

; 697  :             bits[clk_idx++] = MGMT_MDOE;

  016f8	e28d200c	 add         r2, sp, #0xC
  016fc	e59d3008	 ldr         r3, [sp, #8]
  01700	e0822003	 add         r2, r2, r3
  01704	e3a03008	 mov         r3, #8
  01708	e5c23000	 strb        r3, [r2]
  0170c	e59d3008	 ldr         r3, [sp, #8]
  01710	e2833001	 add         r3, r3, #1
  01714	e58d3008	 str         r3, [sp, #8]
  01718		 |$LN14@PhyWrite|

; 698  : 
; 699  :         // Shift to next lowest bit.
; 700  :         mask >>= 1;

  01718	e1dd30b4	 ldrh        r3, [sp, #4]
  0171c	e1a030a3	 mov         r3, r3, lsr #1
  01720	e1a03803	 mov         r3, r3, lsl #16
  01724	e1a03823	 mov         r3, r3, lsr #16
  01728	e1cd30b4	 strh        r3, [sp, #4]

; 701  :     }

  0172c	eaffffdd	 b           |$LN17@PhyWrite|
  01730		 |$LN16@PhyWrite|

; 702  : 
; 703  :     // Output the PHY register number, msb first.
; 704  :     //
; 705  :     mask = (UINT8)0x10;

  01730	e3a03010	 mov         r3, #0x10
  01734	e1cd30b4	 strh        r3, [sp, #4]

; 706  :     for (i = 0; i < 5; ++i)

  01738	e3a03000	 mov         r3, #0
  0173c	e58d3000	 str         r3, [sp]
  01740	ea000002	 b           |$LN13@PhyWrite|
  01744		 |$LN12@PhyWrite|
  01744	e59d3000	 ldr         r3, [sp]
  01748	e2833001	 add         r3, r3, #1
  0174c	e58d3000	 str         r3, [sp]
  01750		 |$LN13@PhyWrite|
  01750	e59d3000	 ldr         r3, [sp]
  01754	e3530005	 cmp         r3, #5
  01758	aa00001b	 bge         |$LN11@PhyWrite|

; 707  :     {
; 708  :         if (PHYreg & mask)

  0175c	e5dd3064	 ldrb        r3, [sp, #0x64]
  01760	e1a02003	 mov         r2, r3
  01764	e1dd30b4	 ldrh        r3, [sp, #4]
  01768	e1120003	 tst         r2, r3
  0176c	0a000008	 beq         |$LN10@PhyWrite|

; 709  :             bits[clk_idx++] = MGMT_MDOE | MGMT_MDO;

  01770	e28d200c	 add         r2, sp, #0xC
  01774	e59d3008	 ldr         r3, [sp, #8]
  01778	e0822003	 add         r2, r2, r3
  0177c	e3a03009	 mov         r3, #9
  01780	e5c23000	 strb        r3, [r2]
  01784	e59d3008	 ldr         r3, [sp, #8]
  01788	e2833001	 add         r3, r3, #1
  0178c	e58d3008	 str         r3, [sp, #8]

; 710  :         else

  01790	ea000007	 b           |$LN9@PhyWrite|
  01794		 |$LN10@PhyWrite|

; 711  :             bits[clk_idx++] = MGMT_MDOE;

  01794	e28d200c	 add         r2, sp, #0xC
  01798	e59d3008	 ldr         r3, [sp, #8]
  0179c	e0822003	 add         r2, r2, r3
  017a0	e3a03008	 mov         r3, #8
  017a4	e5c23000	 strb        r3, [r2]
  017a8	e59d3008	 ldr         r3, [sp, #8]
  017ac	e2833001	 add         r3, r3, #1
  017b0	e58d3008	 str         r3, [sp, #8]
  017b4		 |$LN9@PhyWrite|

; 712  : 
; 713  :         // Shift to next lowest bit.
; 714  :         mask >>= 1;

  017b4	e1dd30b4	 ldrh        r3, [sp, #4]
  017b8	e1a030a3	 mov         r3, r3, lsr #1
  017bc	e1a03803	 mov         r3, r3, lsl #16
  017c0	e1a03823	 mov         r3, r3, lsr #16
  017c4	e1cd30b4	 strh        r3, [sp, #4]

; 715  :     }

  017c8	eaffffdd	 b           |$LN12@PhyWrite|
  017cc		 |$LN11@PhyWrite|

; 716  : 
; 717  :     // Tristate and turnaround (2 bit times).
; 718  :     //
; 719  :     bits[clk_idx++] = 0;

  017cc	e28d200c	 add         r2, sp, #0xC
  017d0	e59d3008	 ldr         r3, [sp, #8]
  017d4	e0822003	 add         r2, r2, r3
  017d8	e3a03000	 mov         r3, #0
  017dc	e5c23000	 strb        r3, [r2]
  017e0	e59d3008	 ldr         r3, [sp, #8]
  017e4	e2833001	 add         r3, r3, #1
  017e8	e58d3008	 str         r3, [sp, #8]

; 720  :     bits[clk_idx++] = 0;

  017ec	e28d200c	 add         r2, sp, #0xC
  017f0	e59d3008	 ldr         r3, [sp, #8]
  017f4	e0822003	 add         r2, r2, r3
  017f8	e3a03000	 mov         r3, #0
  017fc	e5c23000	 strb        r3, [r2]
  01800	e59d3008	 ldr         r3, [sp, #8]
  01804	e2833001	 add         r3, r3, #1
  01808	e58d3008	 str         r3, [sp, #8]

; 721  : 
; 722  :     // Write out 16 bits of data, msb first.
; 723  :     //
; 724  :     mask = 0x8000;

  0180c	e3a03902	 mov         r3, #2, 18
  01810	e1cd30b4	 strh        r3, [sp, #4]

; 725  :     for (i = 0; i < 16; ++i)

  01814	e3a03000	 mov         r3, #0
  01818	e58d3000	 str         r3, [sp]
  0181c	ea000002	 b           |$LN8@PhyWrite|
  01820		 |$LN7@PhyWrite|
  01820	e59d3000	 ldr         r3, [sp]
  01824	e2833001	 add         r3, r3, #1
  01828	e58d3000	 str         r3, [sp]
  0182c		 |$LN8@PhyWrite|
  0182c	e59d3000	 ldr         r3, [sp]
  01830	e3530010	 cmp         r3, #0x10
  01834	aa00001b	 bge         |$LN6@PhyWrite|

; 726  :     {
; 727  :         if (PHYdata & mask)

  01838	e1dd36b8	 ldrh        r3, [sp, #0x68]
  0183c	e1a02003	 mov         r2, r3
  01840	e1dd30b4	 ldrh        r3, [sp, #4]
  01844	e1120003	 tst         r2, r3
  01848	0a000008	 beq         |$LN5@PhyWrite|

; 728  :             bits[clk_idx++] = MGMT_MDOE | MGMT_MDO;

  0184c	e28d200c	 add         r2, sp, #0xC
  01850	e59d3008	 ldr         r3, [sp, #8]
  01854	e0822003	 add         r2, r2, r3
  01858	e3a03009	 mov         r3, #9
  0185c	e5c23000	 strb        r3, [r2]
  01860	e59d3008	 ldr         r3, [sp, #8]
  01864	e2833001	 add         r3, r3, #1
  01868	e58d3008	 str         r3, [sp, #8]

; 729  :         else

  0186c	ea000007	 b           |$LN4@PhyWrite|
  01870		 |$LN5@PhyWrite|

; 730  :             bits[clk_idx++] = MGMT_MDOE;

  01870	e28d200c	 add         r2, sp, #0xC
  01874	e59d3008	 ldr         r3, [sp, #8]
  01878	e0822003	 add         r2, r2, r3
  0187c	e3a03008	 mov         r3, #8
  01880	e5c23000	 strb        r3, [r2]
  01884	e59d3008	 ldr         r3, [sp, #8]
  01888	e2833001	 add         r3, r3, #1
  0188c	e58d3008	 str         r3, [sp, #8]
  01890		 |$LN4@PhyWrite|

; 731  : 
; 732  :         // Shift to next lowest bit.
; 733  :         mask >>= 1;

  01890	e1dd30b4	 ldrh        r3, [sp, #4]
  01894	e1a030a3	 mov         r3, r3, lsr #1
  01898	e1a03803	 mov         r3, r3, lsl #16
  0189c	e1a03823	 mov         r3, r3, lsr #16
  018a0	e1cd30b4	 strh        r3, [sp, #4]

; 734  :     }

  018a4	eaffffdd	 b           |$LN7@PhyWrite|
  018a8		 |$LN6@PhyWrite|

; 735  : 
; 736  :     // Final clock bit (tristate).
; 737  :     //
; 738  :     bits[clk_idx++] = 0;

  018a8	e28d200c	 add         r2, sp, #0xC
  018ac	e59d3008	 ldr         r3, [sp, #8]
  018b0	e0822003	 add         r2, r2, r3
  018b4	e3a03000	 mov         r3, #0
  018b8	e5c23000	 strb        r3, [r2]
  018bc	e59d3008	 ldr         r3, [sp, #8]
  018c0	e2833001	 add         r3, r3, #1
  018c4	e58d3008	 str         r3, [sp, #8]

; 739  : 
; 740  :     // Select bank 3.
; 741  :     //
; 742  :     OUTPORT16(&g_pLAN91C->BANKSEL, 3);

  018c8	e3a01003	 mov         r1, #3
  018cc	e59f3168	 ldr         r3, [pc, #0x168]
  018d0	e5933000	 ldr         r3, [r3]
  018d4	e283000e	 add         r0, r3, #0xE
  018d8	eb000000	 bl          WRITE_PORT_USHORT

; 743  : 
; 744  :     // Get the current MII register value.
; 745  :     //
; 746  :     mii_reg = INPORT16(&g_pLAN91C->MGMT);

  018dc	e59f3158	 ldr         r3, [pc, #0x158]
  018e0	e5933000	 ldr         r3, [r3]
  018e4	e2830008	 add         r0, r3, #8
  018e8	eb000000	 bl          READ_PORT_USHORT
  018ec	e1a03800	 mov         r3, r0, lsl #16
  018f0	e1a03823	 mov         r3, r3, lsr #16
  018f4	e1cd35b4	 strh        r3, [sp, #0x54]
  018f8	e1dd35b4	 ldrh        r3, [sp, #0x54]
  018fc	e1cd34be	 strh        r3, [sp, #0x4E]

; 747  : 
; 748  :     // Turn off all MII Interface bits.
; 749  :     //
; 750  :     mii_reg &= ~(MGMT_MDOE | MGMT_MCLK | 
; 751  :                  MGMT_MDI  | MGMT_MDO);

  01900	e1dd34be	 ldrh        r3, [sp, #0x4E]
  01904	e1a02003	 mov         r2, r3
  01908	e3e0300f	 mvn         r3, #0xF
  0190c	e0023003	 and         r3, r2, r3
  01910	e1a03803	 mov         r3, r3, lsl #16
  01914	e1a03823	 mov         r3, r3, lsr #16
  01918	e1cd34be	 strh        r3, [sp, #0x4E]

; 752  : 
; 753  :     // Clock all cycles.
; 754  :     //
; 755  :     for (i = 0; i < sizeof bits; ++i)

  0191c	e3a03000	 mov         r3, #0
  01920	e58d3000	 str         r3, [sp]
  01924	ea000002	 b           |$LN3@PhyWrite|
  01928		 |$LN2@PhyWrite|
  01928	e59d3000	 ldr         r3, [sp]
  0192c	e2833001	 add         r3, r3, #1
  01930	e58d3000	 str         r3, [sp]
  01934		 |$LN3@PhyWrite|
  01934	e59d3000	 ldr         r3, [sp]
  01938	e3530041	 cmp         r3, #0x41
  0193c	2a000032	 bcs         |$LN1@PhyWrite|

; 756  :     {
; 757  :         // Clock Low - output data.
; 758  :         //
; 759  :         OUTPORT16(&g_pLAN91C->MGMT, mii_reg | bits[i]);

  01940	e1dd34be	 ldrh        r3, [sp, #0x4E]
  01944	e1a01003	 mov         r1, r3
  01948	e28d200c	 add         r2, sp, #0xC
  0194c	e59d3000	 ldr         r3, [sp]
  01950	e0823003	 add         r3, r2, r3
  01954	e5d33000	 ldrb        r3, [r3]
  01958	e1813003	 orr         r3, r1, r3
  0195c	e1a01803	 mov         r1, r3, lsl #16
  01960	e1a01821	 mov         r1, r1, lsr #16
  01964	e59f30d0	 ldr         r3, [pc, #0xD0]
  01968	e5933000	 ldr         r3, [r3]
  0196c	e2830008	 add         r0, r3, #8
  01970	eb000000	 bl          WRITE_PORT_USHORT

; 760  :         OALStall(50);

  01974	e3a00032	 mov         r0, #0x32
  01978	eb000000	 bl          OALStall

; 761  : 
; 762  :         // Clock Hi - input data.
; 763  :         //
; 764  :         OUTPORT16(&g_pLAN91C->MGMT, (UINT16)(mii_reg | bits[i] | MGMT_MCLK));

  0197c	e1dd34be	 ldrh        r3, [sp, #0x4E]
  01980	e1a01003	 mov         r1, r3
  01984	e28d200c	 add         r2, sp, #0xC
  01988	e59d3000	 ldr         r3, [sp]
  0198c	e0823003	 add         r3, r2, r3
  01990	e5d33000	 ldrb        r3, [r3]
  01994	e1813003	 orr         r3, r1, r3
  01998	e3833004	 orr         r3, r3, #4
  0199c	e1a01803	 mov         r1, r3, lsl #16
  019a0	e1a01821	 mov         r1, r1, lsr #16
  019a4	e59f3090	 ldr         r3, [pc, #0x90]
  019a8	e5933000	 ldr         r3, [r3]
  019ac	e2830008	 add         r0, r3, #8
  019b0	eb000000	 bl          WRITE_PORT_USHORT

; 765  :         OALStall(50);

  019b4	e3a00032	 mov         r0, #0x32
  019b8	eb000000	 bl          OALStall

; 766  : 
; 767  :         bits[i] |= INPORT16(&g_pLAN91C->MGMT) & MGMT_MDI;

  019bc	e59f3078	 ldr         r3, [pc, #0x78]
  019c0	e5933000	 ldr         r3, [r3]
  019c4	e2830008	 add         r0, r3, #8
  019c8	eb000000	 bl          READ_PORT_USHORT
  019cc	e1a03800	 mov         r3, r0, lsl #16
  019d0	e1a03823	 mov         r3, r3, lsr #16
  019d4	e1cd35b6	 strh        r3, [sp, #0x56]
  019d8	e28d200c	 add         r2, sp, #0xC
  019dc	e59d3000	 ldr         r3, [sp]
  019e0	e0821003	 add         r1, r2, r3
  019e4	e1dd35b6	 ldrh        r3, [sp, #0x56]
  019e8	e2032002	 and         r2, r3, #2
  019ec	e5d13000	 ldrb        r3, [r1]
  019f0	e1831002	 orr         r1, r3, r2
  019f4	e28d200c	 add         r2, sp, #0xC
  019f8	e59d3000	 ldr         r3, [sp]
  019fc	e0822003	 add         r2, r2, r3
  01a00	e20130ff	 and         r3, r1, #0xFF
  01a04	e5c23000	 strb        r3, [r2]

; 768  :     }

  01a08	eaffffc6	 b           |$LN2@PhyWrite|
  01a0c		 |$LN1@PhyWrite|

; 769  : 
; 770  :     // Return to idle state.  Set clock to low, data to low, and output tristated.
; 771  :     //
; 772  :     OUTPORT16(&g_pLAN91C->MGMT, mii_reg);

  01a0c	e1dd14be	 ldrh        r1, [sp, #0x4E]
  01a10	e59f3024	 ldr         r3, [pc, #0x24]
  01a14	e5933000	 ldr         r3, [r3]
  01a18	e2830008	 add         r0, r3, #8
  01a1c	eb000000	 bl          WRITE_PORT_USHORT

; 773  :     OALStall(50);

  01a20	e3a00032	 mov         r0, #0x32
  01a24	eb000000	 bl          OALStall

; 665  : {

  01a28	e59d0050	 ldr         r0, [sp, #0x50]
  01a2c	eb000000	 bl          __security_check_cookie

; 774  : 
; 775  : }

  01a30	e28dd058	 add         sp, sp, #0x58
  01a34	e89d6000	 ldmia       sp, {sp, lr}
  01a38	e12fff1e	 bx          lr
  01a3c		 |$LN27@PhyWrite|
  01a3c		 |$LN28@PhyWrite|
  01a3c	00000000	 DCD         |g_pLAN91C|
  01a40		 |$LN29@PhyWrite|
  01a40	00000000	 DCD         |__security_cookie|
  01a44		 |$M43522|

			 ENDP  ; |PhyWrite|

	END
