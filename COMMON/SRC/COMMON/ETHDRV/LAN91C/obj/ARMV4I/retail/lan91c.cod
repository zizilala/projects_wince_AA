; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\ETHDRV\LAN91C\lan91c.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|?bAllocRequest@?1??LAN91CSendFrame@@9@9| % 0x1		; `LAN91CSendFrame'::`2'::bAllocRequest

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|LAN91CSendFrame|
	EXPORT	|??_C@_17KPMHKKFB@?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@LOBBLJNF@?$AA1?$AA6?$AAC?$AAO?$AAL?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@CEELOPKH@?$AAL?$AAA?$AAT?$AAC?$AAO?$AAL?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@EFNCOOHA@?$AAL?$AAO?$AAS?$AAT?$AAC?$AAA?$AAR?$AAR?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@MPEJHFEM@?$AAS?$AAQ?$AAE?$AAT?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LNLGMPHE@?$AAT?$AAX?$AAU?$AAN?$AAR?$AAN?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@PLHGEHHE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JE@LLHOKEHL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@PPLHHMGG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@FLGHILHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu@| [ DATA ] ; `string'
	IMPORT	|OALStall|
	IMPORT	|OALLogSerial|
	IMPORT	|dpCurSettings|
	IMPORT	|OALGetTickCount|
	IMPORT	|READ_PORT_USHORT|
	IMPORT	|WRITE_PORT_USHORT|

  00001			 AREA	 |.bss|, NOINIT
|g_pLAN91C| %	0x4
|g_pLAN91C| %	0x4
|g_chipRevision| % 0x2
; File c:\wince600\platform\common\src\common\ethdrv\lan91c\lan91c.c

  00000			 AREA	 |.pdata|, PDATA
|$T43473| DCD	|$LN84@LAN91CSend|
	DCD	0x40013901

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17KPMHKKFB@?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB ")", 0x0, 0xd, 0x0
	DCB	0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@LOBBLJNF@?$AA1?$AA6?$AAC?$AAO?$AAL?$AA?5?$AA?$AA@| DCB "1", 0x0
	DCB	"6", 0x0, "C", 0x0, "O", 0x0, "L", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@CEELOPKH@?$AAL?$AAA?$AAT?$AAC?$AAO?$AAL?$AA?5?$AA?$AA@| DCB "L"
	DCB	0x0, "A", 0x0, "T", 0x0, "C", 0x0, "O", 0x0, "L", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@EFNCOOHA@?$AAL?$AAO?$AAS?$AAT?$AAC?$AAA?$AAR?$AAR?$AA?5?$AA?$AA@| DCB "L"
	DCB	0x0, "O", 0x0, "S", 0x0, "T", 0x0, "C", 0x0, "A", 0x0, "R"
	DCB	0x0, "R", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@MPEJHFEM@?$AAS?$AAQ?$AAE?$AAT?$AA?5?$AA?$AA@| DCB "S", 0x0, "Q", 0x0
	DCB	"E", 0x0, "T", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LNLGMPHE@?$AAT?$AAX?$AAU?$AAN?$AAR?$AAN?$AA?5?$AA?$AA@| DCB "T"
	DCB	0x0, "X", 0x0, "U", 0x0, "N", 0x0, "R", 0x0, "N", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@PLHGEHHE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "F", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "(", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@LLHOKEHL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "F", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@PPLHHMGG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "F", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@FLGHILHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "F", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "a", 0x0, "m"
	DCB	0x0, "e", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN91CSendFrame| PROC

; 282  : {

  00000		 |$LN84@LAN91CSend|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M43470|
  00004	e1a05001	 mov         r5, r1
  00008	e1a07000	 mov         r7, r0

; 283  :     UINT16 rc = 0;
; 284  :     UINT16 bufferSize, frameHandle;
; 285  :     UINT16 packetNumber;
; 286  :     UINT32 startTime;
; 287  :     static BOOLEAN bAllocRequest = FALSE;
; 288  : 
; 289  :     // Calculate the amount of memory needed (must be an even number)
; 290  :     bufferSize = 2 + 2 + (UINT16)length + 1;

  0000c	e2853005	 add         r3, r5, #5
  00010	e1a06803	 mov         r6, r3, lsl #16
  00014	e1a06826	 mov         r6, r6, lsr #16

; 291  :     if ((bufferSize & 1) != 0) bufferSize++;
; 292  : 
; 293  :     switch (GET_CHIP_ID(g_chipRevision)) {

  00018	e59f44c0	 ldr         r4, [pc, #0x4C0]
  0001c	e3160001	 tst         r6, #1
  00020	12863001	 addne       r3, r6, #1
  00024	11a06803	 movne       r6, r3, lsl #16
  00028	e1d430b4	 ldrh        r3, [r4, #4]
  0002c	11a06826	 movne       r6, r6, lsr #16
  00030	e20330f0	 and         r3, r3, #0xF0
  00034	e3530090	 cmp         r3, #0x90

; 311  :         }
; 312  :         break;
; 313  :     default:
; 314  :         // Allocate memory in the buffer for the frame
; 315  :         OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  00038	e5943000	 ldr         r3, [r4]
  0003c	e283000e	 add         r0, r3, #0xE
  00040	0a000006	 beq         |$LN36@LAN91CSend|
  00044	e3a01002	 mov         r1, #2
  00048	eb000000	 bl          WRITE_PORT_USHORT

; 316  :         OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_ALLOC|(bufferSize >> 8));

  0004c	e5940000	 ldr         r0, [r4]
  00050	e3863a02	 orr         r3, r6, #2, 20
  00054	e1a01423	 mov         r1, r3, lsr #8
  00058	eb000000	 bl          WRITE_PORT_USHORT
  0005c	ea000023	 b           |$LN32@LAN91CSend|
  00060		 |$LN36@LAN91CSend|

; 294  :     case CHIP_ID_LAN91C111:
; 295  :         // Make sure there's enough free Tx memory.
; 296  :         OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  00060	e3a01000	 mov         r1, #0
  00064	eb000000	 bl          WRITE_PORT_USHORT

; 297  :         if ((INPORT16(&g_pLAN91C->MIR) >> 8) == 0) {

  00068	e5943000	 ldr         r3, [r4]
  0006c	e2830008	 add         r0, r3, #8
  00070	eb000000	 bl          READ_PORT_USHORT
  00074	e1a03800	 mov         r3, r0, lsl #16
  00078	e1a03823	 mov         r3, r3, lsr #16
  0007c	e3d3c0ff	 bics        r12, r3, #0xFF
  00080	1a00000e	 bne         |$LN35@LAN91CSend|

; 298  :             // No memory?  Reset the MMU.
; 299  :             OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  00084	e5943000	 ldr         r3, [r4]
  00088	e3a01002	 mov         r1, #2
  0008c	e283000e	 add         r0, r3, #0xE
  00090	eb000000	 bl          WRITE_PORT_USHORT

; 300  :             OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_111_RESET_MMU);

  00094	e5940000	 ldr         r0, [r4]
  00098	e3a01040	 mov         r1, #0x40
  0009c	eb000000	 bl          WRITE_PORT_USHORT
  000a0		 |$LL34@LAN91CSend|

; 301  :             while ((INPORT16(&g_pLAN91C->MMUCR) & MMUCR_BUSY) != 0);

  000a0	e5940000	 ldr         r0, [r4]
  000a4	eb000000	 bl          READ_PORT_USHORT
  000a8	e1a03800	 mov         r3, r0, lsl #16
  000ac	e1a03823	 mov         r3, r3, lsr #16
  000b0	e3130001	 tst         r3, #1
  000b4	1afffff9	 bne         |$LL34@LAN91CSend|

; 302  : 
; 303  :             bAllocRequest = FALSE;

  000b8	e3a03000	 mov         r3, #0
  000bc	e5c43006	 strb        r3, [r4, #6]
  000c0		 |$LN35@LAN91CSend|

; 304  :         }
; 305  :         // Allocate memory in the buffer for the frame
; 306  :         OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  000c0	e5943000	 ldr         r3, [r4]
  000c4	e3a01002	 mov         r1, #2
  000c8	e283000e	 add         r0, r3, #0xE
  000cc	eb000000	 bl          WRITE_PORT_USHORT

; 307  :         if (!bAllocRequest)

  000d0	e5d43006	 ldrb        r3, [r4, #6]
  000d4	e3530000	 cmp         r3, #0
  000d8	1a000004	 bne         |$LN32@LAN91CSend|

; 308  :         {
; 309  :             OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_111_ALLOC_TX);

  000dc	e5940000	 ldr         r0, [r4]
  000e0	e3a01020	 mov         r1, #0x20
  000e4	eb000000	 bl          WRITE_PORT_USHORT

; 310  :             bAllocRequest = TRUE;

  000e8	e3a03001	 mov         r3, #1
  000ec	e5c43006	 strb        r3, [r4, #6]
  000f0		 |$LN32@LAN91CSend|

; 317  :     }
; 318  : 
; 319  :     // Loop until the request is satisfied
; 320  :     startTime = OALGetTickCount();

  000f0	eb000000	 bl          OALGetTickCount
  000f4	e1a09000	 mov         r9, r0

; 321  :     while ((OALGetTickCount() - startTime) < TIMEOUT_VALUE)

  000f8	eb000000	 bl          OALGetTickCount
  000fc	e3a02c75	 mov         r2, #0x75, 24
  00100	e3828030	 orr         r8, r2, #0x30
  00104	ea000007	 b           |$LN77@LAN91CSend|
  00108		 |$LL30@LAN91CSend|

; 322  :     {
; 323  :         if (INPORT16(&g_pLAN91C->INTR) & INTR_ALLOC)

  00108	e5943000	 ldr         r3, [r4]
  0010c	e283000c	 add         r0, r3, #0xC
  00110	eb000000	 bl          READ_PORT_USHORT
  00114	e1a03800	 mov         r3, r0, lsl #16
  00118	e1a03823	 mov         r3, r3, lsr #16
  0011c	e3130008	 tst         r3, #8
  00120	1a000003	 bne         |$LN74@LAN91CSend|
  00124	eb000000	 bl          OALGetTickCount
  00128		 |$LN77@LAN91CSend|
  00128	e0403009	 sub         r3, r0, r9
  0012c	e1530008	 cmp         r3, r8
  00130	3afffff4	 bcc         |$LL30@LAN91CSend|
  00134		 |$LN74@LAN91CSend|

; 324  :         {
; 325  :             break;
; 326  :         }
; 327  :     }
; 328  :     // If we couldn't satisfy the allocation, abort - we'll give the
; 329  :     // receive side time to free up some space in the MMU, then we'll
; 330  :     // re-check whether the allocation succeeded on the next call.
; 331  :     if ((INPORT16(&g_pLAN91C->INTR) & INTR_ALLOC) == 0)

  00134	e5943000	 ldr         r3, [r4]
  00138	e283000c	 add         r0, r3, #0xC
  0013c	eb000000	 bl          READ_PORT_USHORT
  00140	e1a03800	 mov         r3, r0, lsl #16
  00144	e1a03823	 mov         r3, r3, lsr #16
  00148	e3130008	 tst         r3, #8
  0014c	1a000007	 bne         |$LN27@LAN91CSend|

; 332  :     {
; 333  :         OALMSGS(OAL_ERROR, (L"ERROR: LAN91CSendFrame: Timed out allocating frame.\r\n"));

  00150	e59f3378	 ldr         r3, [pc, #0x378]
  00154	e5933440	 ldr         r3, [r3, #0x440]
  00158	e3130001	 tst         r3, #1
  0015c	0a000001	 beq         |$LN42@LAN91CSend|
  00160	e59f0374	 ldr         r0, [pc, #0x374]
  00164		 |$LN81@LAN91CSend|
  00164	eb000000	 bl          OALLogSerial
  00168		 |$LN42@LAN91CSend|

; 334  :         return(1);

  00168	e3a05001	 mov         r5, #1
  0016c	ea0000cd	 b           |$LN40@LAN91CSend|
  00170		 |$LN27@LAN91CSend|

; 335  :     }
; 336  : 
; 337  :     bAllocRequest = FALSE;
; 338  : 
; 339  :     // Make sure the allocation didn't fail.
; 340  :     if (INPORT16(&g_pLAN91C->PNRARR) & 0x8000)

  00170	e5943000	 ldr         r3, [r4]
  00174	e3a02000	 mov         r2, #0
  00178	e5c42006	 strb        r2, [r4, #6]
  0017c	e2830002	 add         r0, r3, #2
  00180	eb000000	 bl          READ_PORT_USHORT
  00184	e1a03800	 mov         r3, r0, lsl #16
  00188	e1a03823	 mov         r3, r3, lsr #16
  0018c	e3130902	 tst         r3, #2, 18
  00190	0a000005	 beq         |$LN26@LAN91CSend|

; 341  :     {
; 342  :         OALMSGS(OAL_ERROR, (L"ERROR: LAN91CSendFrame: Failed to allocate frame.\r\n"));

  00194	e59f3334	 ldr         r3, [pc, #0x334]
  00198	e5933440	 ldr         r3, [r3, #0x440]
  0019c	e3130001	 tst         r3, #1
  001a0	0afffff0	 beq         |$LN42@LAN91CSend|
  001a4	e59f032c	 ldr         r0, [pc, #0x32C]

; 343  :         return(1);

  001a8	eaffffed	 b           |$LN81@LAN91CSend|
  001ac		 |$LN26@LAN91CSend|

; 344  :     }
; 345  : 
; 346  :     // Get frame handle
; 347  :     frameHandle = (0x3f00 & INPORT16(&g_pLAN91C->PNRARR)) >> 8;

  001ac	e5943000	 ldr         r3, [r4]
  001b0	e2830002	 add         r0, r3, #2
  001b4	eb000000	 bl          READ_PORT_USHORT
  001b8	e1a03800	 mov         r3, r0, lsl #16

; 348  : 
; 349  :     // Now write the frame into the buffer
; 350  :     OUTPORT16(&g_pLAN91C->PNRARR, frameHandle);

  001bc	e5942000	 ldr         r2, [r4]
  001c0	e1a03823	 mov         r3, r3, lsr #16
  001c4	e2033c3f	 and         r3, r3, #0x3F, 24
  001c8	e1a01423	 mov         r1, r3, lsr #8
  001cc	e2820002	 add         r0, r2, #2
  001d0	eb000000	 bl          WRITE_PORT_USHORT

; 351  :     OUTPORT16(&g_pLAN91C->PTR, PTR_AUTOINC);

  001d4	e5943000	 ldr         r3, [r4]
  001d8	e3a01901	 mov         r1, #1, 18
  001dc	e2830006	 add         r0, r3, #6
  001e0	eb000000	 bl          WRITE_PORT_USHORT

; 352  : 
; 353  :     // Write status word
; 354  :     OUTPORT16(&g_pLAN91C->DATA, 0);

  001e4	e5943000	 ldr         r3, [r4]
  001e8	e3a01000	 mov         r1, #0
  001ec	e2830008	 add         r0, r3, #8
  001f0	eb000000	 bl          WRITE_PORT_USHORT

; 355  :     // Write the buffer size
; 356  :     OUTPORT16(&g_pLAN91C->DATA, bufferSize);

  001f4	e5943000	 ldr         r3, [r4]
  001f8	e1a01006	 mov         r1, r6
  001fc	e2830008	 add         r0, r3, #8
  00200	eb000000	 bl          WRITE_PORT_USHORT

; 357  : 
; 358  :     // Now write all except possibly the last data byte
; 359  :     while (length > 1) {

  00204	e3550001	 cmp         r5, #1
  00208	9a000009	 bls         |$LN24@LAN91CSend|
  0020c	e2453002	 sub         r3, r5, #2
  00210	e1a030a3	 mov         r3, r3, lsr #1
  00214	e2836001	 add         r6, r3, #1
  00218		 |$LL25@LAN91CSend|

; 360  :         OUTPORT16(&g_pLAN91C->DATA, *(UINT16*)pBuffer);

  00218	e5943000	 ldr         r3, [r4]
  0021c	e0d710b2	 ldrh        r1, [r7], #2
  00220	e2830008	 add         r0, r3, #8
  00224	eb000000	 bl          WRITE_PORT_USHORT

; 361  :         pBuffer += sizeof(UINT16);
; 362  :         length -= sizeof(UINT16);

  00228	e2455002	 sub         r5, r5, #2
  0022c	e2566001	 subs        r6, r6, #1
  00230	1afffff8	 bne         |$LL25@LAN91CSend|
  00234		 |$LN24@LAN91CSend|

; 363  :     }
; 364  : 
; 365  :     if (length > 0) {

  00234	e3550000	 cmp         r5, #0

; 366  :         // If length was odd we can put that just before the control byte
; 367  :         OUTPORT16(&g_pLAN91C->DATA, *pBuffer|CTRL_ODD|CTRL_CRC);

  00238	15d73000	 ldrneb      r3, [r7]
  0023c	15942000	 ldrne       r2, [r4]
  00240	13831a03	 orrne       r1, r3, #3, 20

; 368  :     } else {
; 369  :         // Otherwise just pad the last byte with 0
; 370  :         OUTPORT16(&g_pLAN91C->DATA, CTRL_CRC);

  00244	05943000	 ldreq       r3, [r4]
  00248	12820008	 addne       r0, r2, #8
  0024c	03a01a01	 moveq       r1, #1, 20
  00250	02830008	 addeq       r0, r3, #8
  00254	eb000000	 bl          WRITE_PORT_USHORT

; 371  :     }        
; 372  : 
; 373  :     // Enqueue Frame number into TX FIFO
; 374  :     switch (GET_CHIP_ID(g_chipRevision)) {

  00258	e1d430b4	 ldrh        r3, [r4, #4]

; 375  :     case CHIP_ID_LAN91C111:
; 376  :         OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_111_ENQUEUE);
; 377  :         break;
; 378  :     default:        
; 379  :         OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_ENQ_TX);

  0025c	e5940000	 ldr         r0, [r4]
  00260	e3a010c0	 mov         r1, #0xC0
  00264	e20330f0	 and         r3, r3, #0xF0
  00268	eb000000	 bl          WRITE_PORT_USHORT

; 380  :     }
; 381  : 
; 382  :     // Wait until it is sent or an error is generated.
; 383  :     startTime = OALGetTickCount();

  0026c	eb000000	 bl          OALGetTickCount
  00270	e1a05000	 mov         r5, r0

; 384  :     while ((OALGetTickCount() - startTime) < TIMEOUT_VALUE)

  00274	ea000006	 b           |$LN80@LAN91CSend|
  00278		 |$LL17@LAN91CSend|

; 385  :     {
; 386  :         if (INPORT16(&g_pLAN91C->INTR) & INTR_TX)

  00278	e5943000	 ldr         r3, [r4]
  0027c	e283000c	 add         r0, r3, #0xC
  00280	eb000000	 bl          READ_PORT_USHORT
  00284	e1a03800	 mov         r3, r0, lsl #16
  00288	e1a03823	 mov         r3, r3, lsr #16
  0028c	e3130002	 tst         r3, #2
  00290	1a000003	 bne         |$LN75@LAN91CSend|
  00294		 |$LN80@LAN91CSend|
  00294	eb000000	 bl          OALGetTickCount
  00298	e0403005	 sub         r3, r0, r5
  0029c	e1530008	 cmp         r3, r8
  002a0	3afffff4	 bcc         |$LL17@LAN91CSend|
  002a4		 |$LN75@LAN91CSend|

; 387  :         {
; 388  :             break;
; 389  :         }
; 390  :     }
; 391  : 
; 392  :     if ((INPORT16(&g_pLAN91C->INTR) & INTR_TX) == 0)

  002a4	e5943000	 ldr         r3, [r4]
  002a8	e283000c	 add         r0, r3, #0xC
  002ac	eb000000	 bl          READ_PORT_USHORT
  002b0	e1a03800	 mov         r3, r0, lsl #16
  002b4	e1a03823	 mov         r3, r3, lsr #16
  002b8	e3130002	 tst         r3, #2
  002bc	1a000005	 bne         |$LN14@LAN91CSend|

; 393  :     {
; 394  :         OALMSGS(OAL_ERROR, (L"ERROR: LAN91CSendFrame: Timed out waiting for the transfer to complete.\r\n"));

  002c0	e59f3208	 ldr         r3, [pc, #0x208]
  002c4	e5933440	 ldr         r3, [r3, #0x440]
  002c8	e3130001	 tst         r3, #1
  002cc	0affffa5	 beq         |$LN42@LAN91CSend|
  002d0	e59f01fc	 ldr         r0, [pc, #0x1FC]

; 395  :         return(1);

  002d4	eaffffa2	 b           |$LN81@LAN91CSend|
  002d8		 |$LN14@LAN91CSend|

; 396  :     }
; 397  : 
; 398  : 	// Read TXDONE Pkt# from FIFO Port Register
; 399  :     OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  002d8	e5943000	 ldr         r3, [r4]
  002dc	e3a01002	 mov         r1, #2
  002e0	e283000e	 add         r0, r3, #0xE
  002e4	eb000000	 bl          WRITE_PORT_USHORT

; 400  :     packetNumber = (INPORT16(&g_pLAN91C->FIFO) & 0x3F);

  002e8	e5943000	 ldr         r3, [r4]
  002ec	e2830004	 add         r0, r3, #4
  002f0	eb000000	 bl          READ_PORT_USHORT

; 401  : 
; 402  : 	// Write to Packet Number Register
; 403  :     OUTPORT16(&g_pLAN91C->PNRARR, packetNumber);

  002f4	e5942000	 ldr         r2, [r4]
  002f8	e1a03800	 mov         r3, r0, lsl #16
  002fc	e1a03823	 mov         r3, r3, lsr #16
  00300	e203103f	 and         r1, r3, #0x3F
  00304	e2820002	 add         r0, r2, #2
  00308	eb000000	 bl          WRITE_PORT_USHORT

; 404  : 
; 405  : 	// Retrieve packet status
; 406  :     OUTPORT16(&g_pLAN91C->PTR, (PTR_AUTOINC | PTR_READ));

  0030c	e5943000	 ldr         r3, [r4]
  00310	e3a01a06	 mov         r1, #6, 20
  00314	e2830006	 add         r0, r3, #6
  00318	eb000000	 bl          WRITE_PORT_USHORT

; 407  :     OALStall(100);

  0031c	e3a00064	 mov         r0, #0x64
  00320	eb000000	 bl          OALStall

; 408  : 
; 409  :     rc = INPORT16(&g_pLAN91C->DATA);

  00324	e5943000	 ldr         r3, [r4]
  00328	e2830008	 add         r0, r3, #8
  0032c	eb000000	 bl          READ_PORT_USHORT

; 410  :     // SQET bit always set on lan91c111 and lan100FD (so mask it) on all plats
; 411  :     rc &= ~EPH_STAT_SQET;
; 412  : 
; 413  : 	// Release the packet
; 414  :     switch (GET_CHIP_ID(g_chipRevision)) {

  00330	e3a02cff	 mov         r2, #0xFF, 24
  00334	e1d430b4	 ldrh        r3, [r4, #4]
  00338	e38220df	 orr         r2, r2, #0xDF
  0033c	e1a01800	 mov         r1, r0, lsl #16

; 415  :     case CHIP_ID_LAN91C111:
; 416  :         OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_111_RELEASE_TX);
; 417  :         break;
; 418  :     default:            
; 419  :         OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_REL_SPEC);

  00340	e5940000	 ldr         r0, [r4]
  00344	e0026821	 and         r6, r2, r1, lsr #16
  00348	e3a010a0	 mov         r1, #0xA0
  0034c	e20330f0	 and         r3, r3, #0xF0
  00350	eb000000	 bl          WRITE_PORT_USHORT
  00354		 |$LL9@LAN91CSend|

; 420  :     }
; 421  :     while ((INPORT16(&g_pLAN91C->MMUCR) & MMUCR_BUSY) != 0);

  00354	e5940000	 ldr         r0, [r4]
  00358	eb000000	 bl          READ_PORT_USHORT
  0035c	e1a03800	 mov         r3, r0, lsl #16
  00360	e1a03823	 mov         r3, r3, lsr #16
  00364	e3130001	 tst         r3, #1
  00368	1afffff9	 bne         |$LL9@LAN91CSend|

; 422  : 
; 423  : 	// Clear the tx interrupt status
; 424  :     SETPORT16(&g_pLAN91C->INTR, INTR_TX);

  0036c	e5943000	 ldr         r3, [r4]
  00370	e283000c	 add         r0, r3, #0xC
  00374	eb000000	 bl          READ_PORT_USHORT
  00378	e5942000	 ldr         r2, [r4]
  0037c	e1a03800	 mov         r3, r0, lsl #16
  00380	e1a03823	 mov         r3, r3, lsr #16
  00384	e3831002	 orr         r1, r3, #2
  00388	e282000c	 add         r0, r2, #0xC
  0038c	eb000000	 bl          WRITE_PORT_USHORT
  00390	e3a03c86	 mov         r3, #0x86, 24

; 425  : 
; 426  :     // Tx error?
; 427  :     if (rc & (EPH_STAT_TXUNRN | EPH_STAT_SQET | EPH_STAT_LOSTCARR | EPH_STAT_LATCOL | EPH_STAT_16COL))

  00394	e3833030	 orr         r3, r3, #0x30
  00398	e1160003	 tst         r6, r3
  0039c	0a000035	 beq         |$LN7@LAN91CSend|

; 428  :     {
; 429  :         // Display error status.
; 430  :         OALMSGS(OAL_ERROR, (L"ERROR: LAN91CSendFrame: status = ( "));

  003a0	e59f5128	 ldr         r5, [pc, #0x128]
  003a4	e5953440	 ldr         r3, [r5, #0x440]
  003a8	e3130001	 tst         r3, #1
  003ac	0a000002	 beq         |$LN48@LAN91CSend|
  003b0	e59f0114	 ldr         r0, [pc, #0x114]
  003b4	eb000000	 bl          OALLogSerial
  003b8	e5953440	 ldr         r3, [r5, #0x440]
  003bc		 |$LN48@LAN91CSend|

; 431  :         if (rc & EPH_STAT_TXUNRN)

  003bc	e3160902	 tst         r6, #2, 18
  003c0	0a000004	 beq         |$LN50@LAN91CSend|

; 432  :         {
; 433  :             OALMSGS(OAL_ERROR, (L"TXUNRN "));

  003c4	e3130001	 tst         r3, #1
  003c8	0a000002	 beq         |$LN50@LAN91CSend|
  003cc	e59f00f4	 ldr         r0, [pc, #0xF4]
  003d0	eb000000	 bl          OALLogSerial
  003d4	e5953440	 ldr         r3, [r5, #0x440]
  003d8		 |$LN50@LAN91CSend|

; 434  :         }
; 435  :         if (rc & EPH_STAT_SQET)

  003d8	e3160020	 tst         r6, #0x20
  003dc	0a000004	 beq         |$LN52@LAN91CSend|

; 436  :         {
; 437  :             OALMSGS(OAL_ERROR, (L"SQET "));

  003e0	e3130001	 tst         r3, #1
  003e4	0a000002	 beq         |$LN52@LAN91CSend|
  003e8	e59f00d4	 ldr         r0, [pc, #0xD4]
  003ec	eb000000	 bl          OALLogSerial
  003f0	e5953440	 ldr         r3, [r5, #0x440]
  003f4		 |$LN52@LAN91CSend|

; 438  :         }
; 439  :         if (rc & EPH_STAT_LOSTCARR)

  003f4	e3160b01	 tst         r6, #1, 22
  003f8	0a000004	 beq         |$LN54@LAN91CSend|

; 440  :         {
; 441  :             OALMSGS(OAL_ERROR, (L"LOSTCARR "));

  003fc	e3130001	 tst         r3, #1
  00400	0a000002	 beq         |$LN54@LAN91CSend|
  00404	e59f00b4	 ldr         r0, [pc, #0xB4]
  00408	eb000000	 bl          OALLogSerial
  0040c	e5953440	 ldr         r3, [r5, #0x440]
  00410		 |$LN54@LAN91CSend|

; 442  :         }
; 443  :         if (rc & EPH_STAT_LATCOL)

  00410	e3160c02	 tst         r6, #2, 24
  00414	0a000004	 beq         |$LN56@LAN91CSend|

; 444  :         {
; 445  :             OALMSGS(OAL_ERROR, (L"LATCOL "));

  00418	e3130001	 tst         r3, #1
  0041c	0a000002	 beq         |$LN56@LAN91CSend|
  00420	e59f0094	 ldr         r0, [pc, #0x94]
  00424	eb000000	 bl          OALLogSerial
  00428	e5953440	 ldr         r3, [r5, #0x440]
  0042c		 |$LN56@LAN91CSend|

; 446  :         }
; 447  :         if (rc & EPH_STAT_16COL)

  0042c	e3160010	 tst         r6, #0x10
  00430	0a000004	 beq         |$LN58@LAN91CSend|

; 448  :         {
; 449  :             OALMSGS(OAL_ERROR, (L"16COL "));

  00434	e3130001	 tst         r3, #1
  00438	0a000002	 beq         |$LN58@LAN91CSend|
  0043c	e59f0074	 ldr         r0, [pc, #0x74]
  00440	eb000000	 bl          OALLogSerial
  00444	e5953440	 ldr         r3, [r5, #0x440]
  00448		 |$LN58@LAN91CSend|

; 450  :         }
; 451  :         OALMSGS(OAL_ERROR, (L")\r\n"));

  00448	e3130001	 tst         r3, #1
  0044c	159f0060	 ldrne       r0, [pc, #0x60]
  00450	1b000000	 blne        OALLogSerial

; 452  :             
; 453  :         // Re-enable TXENA
; 454  :         OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  00454	e5943000	 ldr         r3, [r4]
  00458	e3a01000	 mov         r1, #0
  0045c	e283000e	 add         r0, r3, #0xE
  00460	eb000000	 bl          WRITE_PORT_USHORT

; 455  :         OUTPORT16(&g_pLAN91C->TCR, TCR_PADEN|TCR_TXEN);

  00464	e5940000	 ldr         r0, [r4]
  00468	e3a01081	 mov         r1, #0x81
  0046c	eb000000	 bl          WRITE_PORT_USHORT

; 456  : 
; 457  :         // Failure.
; 458  :         rc = 1;

  00470	e3a05001	 mov         r5, #1

; 459  :     }
; 460  :     else

  00474	ea000000	 b           |$LN1@LAN91CSend|
  00478		 |$LN7@LAN91CSend|

; 461  :     {
; 462  :         // Success.
; 463  :         rc = 0;

  00478	e3a05000	 mov         r5, #0
  0047c		 |$LN1@LAN91CSend|

; 464  :     }
; 465  : 
; 466  :     // Clear the statistics registers
; 467  :     OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  0047c	e5943000	 ldr         r3, [r4]
  00480	e3a01000	 mov         r1, #0
  00484	e283000e	 add         r0, r3, #0xE
  00488	eb000000	 bl          WRITE_PORT_USHORT

; 468  :     INPORT16(&g_pLAN91C->ECR);

  0048c	e5943000	 ldr         r3, [r4]
  00490	e2830006	 add         r0, r3, #6
  00494	eb000000	 bl          READ_PORT_USHORT

; 469  : 
; 470  :     // Set back bank 2
; 471  :     OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  00498	e5943000	 ldr         r3, [r4]
  0049c	e3a01002	 mov         r1, #2
  004a0	e283000e	 add         r0, r3, #0xE
  004a4	eb000000	 bl          WRITE_PORT_USHORT

; 472  : 
; 473  :     return rc;

  004a8		 |$LN40@LAN91CSend|

; 474  : }

  004a8	e1a00005	 mov         r0, r5
  004ac	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  004b0	e12fff1e	 bx          lr
  004b4		 |$LN85@LAN91CSend|
  004b4		 |$LN86@LAN91CSend|
  004b4	00000000	 DCD         |??_C@_17KPMHKKFB@?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  004b8		 |$LN87@LAN91CSend|
  004b8	00000000	 DCD         |??_C@_1O@LOBBLJNF@?$AA1?$AA6?$AAC?$AAO?$AAL?$AA?5?$AA?$AA@|
  004bc		 |$LN88@LAN91CSend|
  004bc	00000000	 DCD         |??_C@_1BA@CEELOPKH@?$AAL?$AAA?$AAT?$AAC?$AAO?$AAL?$AA?5?$AA?$AA@|
  004c0		 |$LN89@LAN91CSend|
  004c0	00000000	 DCD         |??_C@_1BE@EFNCOOHA@?$AAL?$AAO?$AAS?$AAT?$AAC?$AAA?$AAR?$AAR?$AA?5?$AA?$AA@|
  004c4		 |$LN90@LAN91CSend|
  004c4	00000000	 DCD         |??_C@_1M@MPEJHFEM@?$AAS?$AAQ?$AAE?$AAT?$AA?5?$AA?$AA@|
  004c8		 |$LN91@LAN91CSend|
  004c8	00000000	 DCD         |??_C@_1BA@LNLGMPHE@?$AAT?$AAX?$AAU?$AAN?$AAR?$AAN?$AA?5?$AA?$AA@|
  004cc		 |$LN92@LAN91CSend|
  004cc	00000000	 DCD         |??_C@_1EI@PLHGEHHE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN@|
  004d0		 |$LN93@LAN91CSend|
  004d0	00000000	 DCD         |dpCurSettings|
  004d4		 |$LN94@LAN91CSend|
  004d4	00000000	 DCD         |??_C@_1JE@LLHOKEHL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu@|
  004d8		 |$LN95@LAN91CSend|
  004d8	00000000	 DCD         |??_C@_1GI@PPLHHMGG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@|
  004dc		 |$LN96@LAN91CSend|
  004dc	00000000	 DCD         |??_C@_1GM@FLGHILHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAT?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu@|
  004e0		 |$LN97@LAN91CSend|
  004e0	00000000	 DCD         |g_pLAN91C|
  004e4		 |$M43471|

			 ENDP  ; |LAN91CSendFrame|

	EXPORT	|LAN91CGetFrame|
	EXPORT	|??_C@_1HM@PHDCLFGM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAs?$AAi@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43515| DCD	|$LN34@LAN91CGetF|
	DCD	0x40007702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@PHDCLFGM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAs?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "F", 0x0, "r", 0x0, "a"
	DCB	0x0, "m", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "s"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, " ", 0x0, ">", 0x0, " ", 0x0, "t"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, " ", 0x0, "b", 0x0, "u"
	DCB	0x0, "f", 0x0, " ", 0x0, "l", 0x0, "e", 0x0, "n", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN91CGetFrame| PROC

; 479  : {

  00000		 |$LN34@LAN91CGetF|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43512|
  00008	e1a09001	 mov         r9, r1
  0000c	e1a0b000	 mov         r11, r0

; 480  :     UINT8 *pos = pBuffer;
; 481  :     UINT16 code, pointer;
; 482  :     UINT32 length, count;
; 483  :     BOOL   bErr = FALSE; 
; 484  : 
; 485  :     // Make sure that bank 2 is actual
; 486  :     OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  00010	e59f51c0	 ldr         r5, [pc, #0x1C0]
  00014	e3a01002	 mov         r1, #2
  00018	e3a07000	 mov         r7, #0
  0001c	e5953000	 ldr         r3, [r5]
  00020	e283000e	 add         r0, r3, #0xE
  00024	eb000000	 bl          WRITE_PORT_USHORT

; 487  : 
; 488  :     length = 0;
; 489  :     while ((INPORT16(&g_pLAN91C->INTR) & INTR_RX) != 0) {

  00028	e5953000	 ldr         r3, [r5]
  0002c	e3a04000	 mov         r4, #0
  00030	e283000c	 add         r0, r3, #0xC
  00034	eb000000	 bl          READ_PORT_USHORT
  00038	e1a03800	 mov         r3, r0, lsl #16
  0003c	e1a03823	 mov         r3, r3, lsr #16
  00040	e3130001	 tst         r3, #1
  00044	0a00005b	 beq         |$LN31@LAN91CGetF|
  00048	e3a03c07	 mov         r3, #7, 24
  0004c	e38360ff	 orr         r6, r3, #0xFF
  00050	e59fa17c	 ldr         r10, [pc, #0x17C]
  00054	e58d6000	 str         r6, [sp]
  00058		 |$LL16@LAN91CGetF|

; 490  : 
; 491  :         // Setup pointer address register
; 492  :         pointer = PTR_RCV | PTR_READ;
; 493  : 
; 494  :         // Read status
; 495  :         OUTPORT16(&g_pLAN91C->PTR, pointer);

  00058	e5953000	 ldr         r3, [r5]
  0005c	e3a01a0a	 mov         r1, #0xA, 20
  00060	e2830006	 add         r0, r3, #6
  00064	eb000000	 bl          WRITE_PORT_USHORT

; 496  :         code = INPORT16(&g_pLAN91C->DATA);

  00068	e5953000	 ldr         r3, [r5]
  0006c	e2830008	 add         r0, r3, #8
  00070	eb000000	 bl          READ_PORT_USHORT
  00074	e1a03800	 mov         r3, r0, lsl #16
  00078	e1a03823	 mov         r3, r3, lsr #16

; 497  :         pointer += sizeof(UINT16);
; 498  : 
; 499  :         if ((code & (STAT_ALGNERR|STAT_BADCRC|STAT_LONG|STAT_SHORT)) == 0) {

  0007c	e3130b2b	 tst         r3, #0x2B, 22
  00080	1a000036	 bne         |$LN9@LAN91CGetF|

; 500  :         
; 501  : 
; 502  :             // Get packet size
; 503  :             OUTPORT16(&g_pLAN91C->PTR, pointer);

  00084	e5953000	 ldr         r3, [r5]
  00088	e3a08a0a	 mov         r8, #0xA, 20
  0008c	e3881002	 orr         r1, r8, #2
  00090	e2830006	 add         r0, r3, #6
  00094	eb000000	 bl          WRITE_PORT_USHORT

; 504  :             length = (INPORT16(&g_pLAN91C->DATA) & 0x07FF) - 6;

  00098	e5953000	 ldr         r3, [r5]
  0009c	e2830008	 add         r0, r3, #8
  000a0	eb000000	 bl          READ_PORT_USHORT
  000a4	e1a03800	 mov         r3, r0, lsl #16

; 505  :             pointer += sizeof(UINT16);
; 506  : 
; 507  :             //  Check packet size
; 508  :             if( length <= *pLength )

  000a8	e1d920b0	 ldrh        r2, [r9]
  000ac	e0063823	 and         r3, r6, r3, lsr #16
  000b0	e2434006	 sub         r4, r3, #6
  000b4	e1540002	 cmp         r4, r2
  000b8	e3888004	 orr         r8, r8, #4
  000bc	8a000020	 bhi         |$LN13@LAN91CGetF|

; 509  :             {
; 510  :                 // Copy packet
; 511  :                 count = length;
; 512  :                 while (count > 1) {

  000c0	e3540001	 cmp         r4, #1
  000c4	9a000010	 bls         |$LN11@LAN91CGetF|
  000c8	e2443002	 sub         r3, r4, #2
  000cc	e1a030a3	 mov         r3, r3, lsr #1
  000d0	e2836001	 add         r6, r3, #1
  000d4		 |$LL12@LAN91CGetF|

; 513  :                     OUTPORT16(&g_pLAN91C->PTR, pointer);

  000d4	e5953000	 ldr         r3, [r5]
  000d8	e1a01008	 mov         r1, r8
  000dc	e2830006	 add         r0, r3, #6
  000e0	eb000000	 bl          WRITE_PORT_USHORT

; 514  :                     *(UINT16*)pos = INPORT16(&g_pLAN91C->DATA);

  000e4	e5953000	 ldr         r3, [r5]
  000e8	e2830008	 add         r0, r3, #8
  000ec	eb000000	 bl          READ_PORT_USHORT

; 515  :                     pointer += sizeof(UINT16);

  000f0	e2883002	 add         r3, r8, #2
  000f4	e1a08803	 mov         r8, r3, lsl #16
  000f8	e1a08828	 mov         r8, r8, lsr #16
  000fc	e0cb00b2	 strh        r0, [r11], #2
  00100	e2566001	 subs        r6, r6, #1
  00104	1afffff2	 bne         |$LL12@LAN91CGetF|

; 487  : 
; 488  :     length = 0;
; 489  :     while ((INPORT16(&g_pLAN91C->INTR) & INTR_RX) != 0) {

  00108	e59d6000	 ldr         r6, [sp]
  0010c		 |$LN11@LAN91CGetF|

; 516  :                     pos += sizeof(UINT16);
; 517  :                     count -= sizeof(UINT16);
; 518  :                 }
; 519  : 
; 520  : 
; 521  :                 // Get control word (which can contain last byte)
; 522  :                 OUTPORT16(&g_pLAN91C->PTR, pointer);

  0010c	e5953000	 ldr         r3, [r5]
  00110	e1a01008	 mov         r1, r8
  00114	e2830006	 add         r0, r3, #6
  00118	eb000000	 bl          WRITE_PORT_USHORT

; 523  :                 code = INPORT16(&g_pLAN91C->DATA);

  0011c	e5953000	 ldr         r3, [r5]
  00120	e2830008	 add         r0, r3, #8
  00124	eb000000	 bl          READ_PORT_USHORT
  00128	e1a03800	 mov         r3, r0, lsl #16
  0012c	e1a03823	 mov         r3, r3, lsr #16

; 524  :                 pointer += sizeof(UINT16);
; 525  :                 if ((code & CTRL_ODD) != 0) {

  00130	e3130a02	 tst         r3, #2, 20
  00134	0a000009	 beq         |$LN9@LAN91CGetF|

; 526  :                     length++;

  00138	e2844001	 add         r4, r4, #1

; 527  :                     *pos = (UINT8)code;

  0013c	e5cb3000	 strb        r3, [r11]

; 528  :                 }
; 529  :             }
; 530  :             else

  00140	ea000006	 b           |$LN9@LAN91CGetF|
  00144		 |$LN13@LAN91CGetF|

; 531  :             {
; 532  :                 //  Error getting the packet size
; 533  :                 OALMSGS(OAL_ERROR, (L"ERROR: LAN91CGetFrame: packet size (%d) > than buf len (%d)\r\n", length, *pLength ));

  00144	e59a3440	 ldr         r3, [r10, #0x440]
  00148	e3130001	 tst         r3, #1
  0014c	159f007c	 ldrne       r0, [pc, #0x7C]
  00150	11a01004	 movne       r1, r4
  00154	1b000000	 blne        OALLogSerial

; 534  :                 length = 0;

  00158	e3a04000	 mov         r4, #0

; 535  :                 bErr = TRUE;

  0015c	e3a07001	 mov         r7, #1
  00160		 |$LN9@LAN91CGetF|

; 536  :             }
; 537  :         }
; 538  : 
; 539  :         // Release the memory for the received frame
; 540  :         switch (GET_CHIP_ID(g_chipRevision)) {

  00160	e1d530b4	 ldrh        r3, [r5, #4]

; 541  : 
; 542  :             case CHIP_ID_LAN91C111:
; 543  :                 OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_111_REM_REL_RX);
; 544  :                 break;
; 545  : 
; 546  :             default:            
; 547  :                 OUTPORT16(&g_pLAN91C->MMUCR, MMUCR_REM_REL_TOP);

  00164	e5950000	 ldr         r0, [r5]
  00168	e3a01080	 mov         r1, #0x80
  0016c	e20330f0	 and         r3, r3, #0xF0
  00170	eb000000	 bl          WRITE_PORT_USHORT
  00174		 |$LL4@LAN91CGetF|

; 548  :         }
; 549  : 
; 550  :         while ((INPORT16(&g_pLAN91C->MMUCR) & MMUCR_BUSY) != 0);

  00174	e5950000	 ldr         r0, [r5]
  00178	eb000000	 bl          READ_PORT_USHORT
  0017c	e1a03800	 mov         r3, r0, lsl #16
  00180	e1a03823	 mov         r3, r3, lsr #16
  00184	e3130001	 tst         r3, #1
  00188	1afffff9	 bne         |$LL4@LAN91CGetF|

; 551  : 
; 552  : 
; 553  :         // If error, break
; 554  :         if( bErr ) break;

  0018c	e3570000	 cmp         r7, #0
  00190	1a000008	 bne         |$LN31@LAN91CGetF|

; 555  : 
; 556  :         // If length is non zero we get a packet
; 557  :         if (length > 0) break;

  00194	e3540000	 cmp         r4, #0
  00198	1a000006	 bne         |$LN31@LAN91CGetF|
  0019c	e5953000	 ldr         r3, [r5]
  001a0	e283000c	 add         r0, r3, #0xC
  001a4	eb000000	 bl          READ_PORT_USHORT
  001a8	e1a03800	 mov         r3, r0, lsl #16
  001ac	e1a03823	 mov         r3, r3, lsr #16
  001b0	e3130001	 tst         r3, #1
  001b4	1affffa7	 bne         |$LL16@LAN91CGetF|
  001b8		 |$LN31@LAN91CGetF|

; 558  : 
; 559  :     }        
; 560  : 
; 561  :     *pLength = (UINT16)length;

  001b8	e1a00804	 mov         r0, r4, lsl #16
  001bc	e1a00820	 mov         r0, r0, lsr #16
  001c0	e1c900b0	 strh        r0, [r9]

; 562  :     return (*pLength);
; 563  : }

  001c4	e28dd004	 add         sp, sp, #4
  001c8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001cc	e12fff1e	 bx          lr
  001d0		 |$LN35@LAN91CGetF|
  001d0		 |$LN36@LAN91CGetF|
  001d0	00000000	 DCD         |??_C@_1HM@PHDCLFGM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAs?$AAi@|
  001d4		 |$LN37@LAN91CGetF|
  001d4	00000000	 DCD         |dpCurSettings|
  001d8		 |$LN38@LAN91CGetF|
  001d8	00000000	 DCD         |g_pLAN91C|
  001dc		 |$M43513|

			 ENDP  ; |LAN91CGetFrame|

	EXPORT	|LAN91CEnableInts|
	EXPORT	|??_C@_1CI@OMABAGF@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@FLLJHBHF@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43530| DCD	|$LN9@LAN91CEnab|
	DCD	0x40001b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OMABAGF@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@FLLJHBHF@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN91CEnableInts| PROC

; 569  : {

  00000		 |$LN9@LAN91CEnab|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43527|

; 570  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"+LAN91CEnableInts\r\n"));

  00004	e59f505c	 ldr         r5, [pc, #0x5C]
  00008	e5953440	 ldr         r3, [r5, #0x440]
  0000c	e3130a02	 tst         r3, #2, 20
  00010	13130004	 tstne       r3, #4
  00014	159f0048	 ldrne       r0, [pc, #0x48]
  00018	1b000000	 blne        OALLogSerial

; 571  : 
; 572  :     // Only enable receive interrupts (we poll for Tx completion)
; 573  :     OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  0001c	e59f403c	 ldr         r4, [pc, #0x3C]
  00020	e3a01002	 mov         r1, #2
  00024	e5943000	 ldr         r3, [r4]
  00028	e283000e	 add         r0, r3, #0xE
  0002c	eb000000	 bl          WRITE_PORT_USHORT

; 574  :     OUTPORT16(&g_pLAN91C->INTR, INTR_RX_MASK);

  00030	e5943000	 ldr         r3, [r4]
  00034	e3a01c01	 mov         r1, #1, 24
  00038	e283000c	 add         r0, r3, #0xC
  0003c	eb000000	 bl          WRITE_PORT_USHORT

; 575  : 
; 576  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-LAN91CEnableInts\r\n"));

  00040	e5953440	 ldr         r3, [r5, #0x440]
  00044	e3130a02	 tst         r3, #2, 20
  00048	13130004	 tstne       r3, #4
  0004c	159f0008	 ldrne       r0, [pc, #8]
  00050	1b000000	 blne        OALLogSerial

; 577  : }

  00054	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$LN10@LAN91CEnab|
  0005c		 |$LN11@LAN91CEnab|
  0005c	00000000	 DCD         |??_C@_1CI@OMABAGF@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00060		 |$LN12@LAN91CEnab|
  00060	00000000	 DCD         |g_pLAN91C|
  00064		 |$LN13@LAN91CEnab|
  00064	00000000	 DCD         |??_C@_1CI@FLLJHBHF@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00068		 |$LN14@LAN91CEnab|
  00068	00000000	 DCD         |dpCurSettings|
  0006c		 |$M43528|

			 ENDP  ; |LAN91CEnableInts|

	EXPORT	|LAN91CDisableInts|
	EXPORT	|??_C@_1CK@HFLNHNLC@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@FMKGLFE@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43546| DCD	|$LN9@LAN91CDisa|
	DCD	0x40001b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@HFLNHNLC@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@FMKGLFE@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN91CDisableInts| PROC

; 582  : {

  00000		 |$LN9@LAN91CDisa|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43543|

; 583  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"+LAN91CDisableInts\r\n"));

  00004	e59f505c	 ldr         r5, [pc, #0x5C]
  00008	e5953440	 ldr         r3, [r5, #0x440]
  0000c	e3130a02	 tst         r3, #2, 20
  00010	13130004	 tstne       r3, #4
  00014	159f0048	 ldrne       r0, [pc, #0x48]
  00018	1b000000	 blne        OALLogSerial

; 584  : 
; 585  :     // Disable all interrupts
; 586  :     OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  0001c	e59f403c	 ldr         r4, [pc, #0x3C]
  00020	e3a01002	 mov         r1, #2
  00024	e5943000	 ldr         r3, [r4]
  00028	e283000e	 add         r0, r3, #0xE
  0002c	eb000000	 bl          WRITE_PORT_USHORT

; 587  :     OUTPORT16(&g_pLAN91C->INTR, 0);

  00030	e5943000	 ldr         r3, [r4]
  00034	e3a01000	 mov         r1, #0
  00038	e283000c	 add         r0, r3, #0xC
  0003c	eb000000	 bl          WRITE_PORT_USHORT

; 588  : 
; 589  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-LAN91CDisableInts\r\n"));

  00040	e5953440	 ldr         r3, [r5, #0x440]
  00044	e3130a02	 tst         r3, #2, 20
  00048	13130004	 tstne       r3, #4
  0004c	159f0008	 ldrne       r0, [pc, #8]
  00050	1b000000	 blne        OALLogSerial

; 590  : }

  00054	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$LN10@LAN91CDisa|
  0005c		 |$LN11@LAN91CDisa|
  0005c	00000000	 DCD         |??_C@_1CK@HFLNHNLC@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00060		 |$LN12@LAN91CDisa|
  00060	00000000	 DCD         |g_pLAN91C|
  00064		 |$LN13@LAN91CDisa|
  00064	00000000	 DCD         |??_C@_1CK@FMKGLFE@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00068		 |$LN14@LAN91CDisa|
  00068	00000000	 DCD         |dpCurSettings|
  0006c		 |$M43544|

			 ENDP  ; |LAN91CDisableInts|

	EXPORT	|LAN91CCurrentPacketFilter|
	EXPORT	|??_C@_1DK@DHIOCIKP@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@DKKEPGHP@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43564| DCD	|$LN11@LAN91CCurr|
	DCD	0x40002201

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@DHIOCIKP@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e"
	DCB	0x0, "t", 0x0, "F", 0x0, "i", 0x0, "l", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@DKKEPGHP@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "+"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e"
	DCB	0x0, "t", 0x0, "F", 0x0, "i", 0x0, "l", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN91CCurrentPacketFilter| PROC

; 595  : {

  00000		 |$LN11@LAN91CCurr|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43561|
  00004	e1a04000	 mov         r4, r0

; 596  :     UINT16 rcr = RCR_RXEN|RCR_STRIP_CRC;
; 597  : 
; 598  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 599  :         L"+LAN91CCurrentPacketFilter(0x%08x)\r\n", filter
; 600  :     ));

  00008	e59f6074	 ldr         r6, [pc, #0x74]
  0000c	e3a05c03	 mov         r5, #3, 24
  00010	e5963440	 ldr         r3, [r6, #0x440]
  00014	e3130a02	 tst         r3, #2, 20
  00018	13130004	 tstne       r3, #4
  0001c	159f005c	 ldrne       r0, [pc, #0x5C]
  00020	11a01004	 movne       r1, r4
  00024	1b000000	 blne        OALLogSerial

; 601  : 
; 602  :     if ((filter & PACKET_TYPE_ALL_MULTICAST) != 0) rcr |= RCR_ALMUL;

  00028	e3140004	 tst         r4, #4
  0002c	13a05fc1	 movne       r5, #0xC1, 30

; 603  :     if ((filter & PACKET_TYPE_PROMISCUOUS) != 0) rcr |= RCR_PRMS;

  00030	e3140020	 tst         r4, #0x20

; 604  : 
; 605  :     OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  00034	e59f4040	 ldr         r4, [pc, #0x40]
  00038	e3a01000	 mov         r1, #0
  0003c	13855002	 orrne       r5, r5, #2
  00040	e5943000	 ldr         r3, [r4]
  00044	e283000e	 add         r0, r3, #0xE
  00048	eb000000	 bl          WRITE_PORT_USHORT

; 606  :     OUTPORT16(&g_pLAN91C->RCR, rcr);

  0004c	e5943000	 ldr         r3, [r4]
  00050	e1a01005	 mov         r1, r5
  00054	e2830004	 add         r0, r3, #4
  00058	eb000000	 bl          WRITE_PORT_USHORT

; 607  : 
; 608  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-LAN91CCurrentPacketFilter\r\n"));

  0005c	e5963440	 ldr         r3, [r6, #0x440]
  00060	e3130a02	 tst         r3, #2, 20
  00064	13130004	 tstne       r3, #4
  00068	159f0008	 ldrne       r0, [pc, #8]
  0006c	1b000000	 blne        OALLogSerial

; 609  : }

  00070	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$LN12@LAN91CCurr|
  00078		 |$LN13@LAN91CCurr|
  00078	00000000	 DCD         |??_C@_1DK@DHIOCIKP@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  0007c		 |$LN14@LAN91CCurr|
  0007c	00000000	 DCD         |g_pLAN91C|
  00080		 |$LN15@LAN91CCurr|
  00080	00000000	 DCD         |??_C@_1EK@DKKEPGHP@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  00084		 |$LN16@LAN91CCurr|
  00084	00000000	 DCD         |dpCurSettings|
  00088		 |$M43562|

			 ENDP  ; |LAN91CCurrentPacketFilter|


  00000			 AREA	 |.pdata|, PDATA
|$T43589| DCD	|$LN18@Crc|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Crc|	 PROC

; 644  : {

  00000		 |$LN18@Crc|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43586|
  00004	e1a05000	 mov         r5, r0

; 645  :     UINT32 crc, carry;
; 646  :     UINT32 i, j;
; 647  :     UINT8 uc;
; 648  : 
; 649  :     crc = 0xFFFFFFFF;
; 650  :     for (i = 0; i < 6; i++) {

  00008	e59f6050	 ldr         r6, [pc, #0x50]
  0000c	e3e00000	 mvn         r0, #0
  00010	e3a01000	 mov         r1, #0
  00014		 |$LL7@Crc|

; 651  :         uc = pAddress[i];

  00014	e7d12005	 ldrb        r2, [r1, +r5]
  00018	e3a0e008	 mov         lr, #8
  0001c		 |$LL4@Crc|

; 652  :         for (j = 0; j < 8; j++) {
; 653  :             carry = ((crc & 0x80000000) ? 1 : 0) ^ (uc & 0x01);

  0001c	e3100102	 tst         r0, #2, 2
  00020	13a04001	 movne       r4, #1
  00024	03a04000	 moveq       r4, #0
  00028	e2023001	 and         r3, r2, #1

; 654  :             crc <<= 1;
; 655  :             uc >>= 1;

  0002c	e0334004	 eors        r4, r3, r4
  00030	e1a00080	 mov         r0, r0, lsl #1

; 656  :             if (carry) crc = (crc ^ 0x04c11db6) | carry;

  00034	10203006	 eorne       r3, r0, r6
  00038	e1a020a2	 mov         r2, r2, lsr #1
  0003c	11830004	 orrne       r0, r3, r4
  00040	e25ee001	 subs        lr, lr, #1
  00044	e20220ff	 and         r2, r2, #0xFF
  00048	1afffff3	 bne         |$LL4@Crc|
  0004c	e2811001	 add         r1, r1, #1
  00050	e3510006	 cmp         r1, #6
  00054	3affffee	 bcc         |$LL7@Crc|

; 657  :         }
; 658  :     }
; 659  :     return crc;
; 660  : }

  00058	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN19@Crc|
  00060		 |$LN20@Crc|
  00060	04c11db6	 DCD         0x4c11db6
  00064		 |$M43587|

			 ENDP  ; |Crc|

	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T43629| DCD	|$LN41@PhyWrite|
	DCD	0xc0007f02

  00000			 AREA	 |.xdata|, DATA
|$T43625| DCD	0xffffffdc
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T43625|

  00008		 |PhyWrite| PROC

; 665  : {

  00008		 |$LN41@PhyWrite|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24dd048	 sub         sp, sp, #0x48
  00010		 |$M43626|
  00010	e1a06002	 mov         r6, r2
  00014	e1a05001	 mov         r5, r1
  00018	e1a04000	 mov         r4, r0
  0001c	e59f31dc	 ldr         r3, [pc, #0x1DC]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d3044	 str         r3, [sp, #0x44]

; 666  :     INT32 i;
; 667  :     UINT16 mask;
; 668  :     UINT16 mii_reg;
; 669  :     UINT8 bits[65];
; 670  :     INT32 clk_idx = 0;
; 671  : 
; 672  :     // 32 consecutive ones on MDO to establish sync.
; 673  :     //
; 674  :     for (i = 0; i < 32; ++i)
; 675  :     {
; 676  :         bits[clk_idx++] = MGMT_MDOE | MGMT_MDO;

  00028	e28d3000	 add         r3, sp, #0
  0002c	e283e020	 add         lr, r3, #0x20
  00030	e3a02009	 mov         r2, #9
  00034		 |$LN34@PhyWrite|
  00034	e4c32001	 strb        r2, [r3], #1
  00038	e153000e	 cmp         r3, lr
  0003c	1afffffc	 bne         |$LN34@PhyWrite|

; 677  :     }
; 678  : 
; 679  :     // Start code <01>.
; 680  :     //
; 681  :     bits[clk_idx++] = MGMT_MDOE;

  00040	e3a03008	 mov         r3, #8

; 682  :     bits[clk_idx++] = MGMT_MDOE | MGMT_MDO;

  00044	e3a02009	 mov         r2, #9

; 683  : 
; 684  :     // Write command <01>.
; 685  :     //
; 686  :     bits[clk_idx++] = MGMT_MDOE;

  00048	e3a01008	 mov         r1, #8

; 687  :     bits[clk_idx++] = MGMT_MDOE | MGMT_MDO;

  0004c	e3a00009	 mov         r0, #9
  00050	e5cd3020	 strb        r3, [sp, #0x20]
  00054	e5cd2021	 strb        r2, [sp, #0x21]
  00058	e5cd1022	 strb        r1, [sp, #0x22]
  0005c	e5cd0023	 strb        r0, [sp, #0x23]
  00060	e3a02024	 mov         r2, #0x24

; 688  : 
; 689  :     // Output the PHY address, msb first.
; 690  :     //
; 691  :     mask = (UINT8)0x10;

  00064	e3a03010	 mov         r3, #0x10
  00068	e3a01005	 mov         r1, #5
  0006c	e28d0000	 add         r0, sp, #0
  00070	e3a07009	 mov         r7, #9
  00074	e3a08008	 mov         r8, #8
  00078	e28de000	 add         lr, sp, #0
  0007c		 |$LL18@PhyWrite|

; 692  :     for (i = 0; i < 5; ++i)
; 693  :     {
; 694  :         if (PHYaddr & mask)

  0007c	e1130004	 tst         r3, r4

; 695  :             bits[clk_idx++] = MGMT_MDOE | MGMT_MDO;
; 696  :         else
; 697  :             bits[clk_idx++] = MGMT_MDOE;
; 698  : 
; 699  :         // Shift to next lowest bit.
; 700  :         mask >>= 1;

  00080	e1a030a3	 mov         r3, r3, lsr #1
  00084	e1a03803	 mov         r3, r3, lsl #16
  00088	17c27000	 strneb      r7, [r2, +r0]
  0008c	07c2800e	 streqb      r8, [r2, +lr]
  00090	e1a03823	 mov         r3, r3, lsr #16
  00094	e2822001	 add         r2, r2, #1
  00098	e2511001	 subs        r1, r1, #1
  0009c	1afffff6	 bne         |$LL18@PhyWrite|

; 701  :     }
; 702  : 
; 703  :     // Output the PHY register number, msb first.
; 704  :     //
; 705  :     mask = (UINT8)0x10;

  000a0	e3a03010	 mov         r3, #0x10
  000a4	e3a01005	 mov         r1, #5
  000a8	e28d0000	 add         r0, sp, #0
  000ac	e28de000	 add         lr, sp, #0
  000b0		 |$LL13@PhyWrite|

; 706  :     for (i = 0; i < 5; ++i)
; 707  :     {
; 708  :         if (PHYreg & mask)

  000b0	e1130005	 tst         r3, r5

; 709  :             bits[clk_idx++] = MGMT_MDOE | MGMT_MDO;
; 710  :         else
; 711  :             bits[clk_idx++] = MGMT_MDOE;
; 712  : 
; 713  :         // Shift to next lowest bit.
; 714  :         mask >>= 1;

  000b4	e1a030a3	 mov         r3, r3, lsr #1
  000b8	e1a03803	 mov         r3, r3, lsl #16
  000bc	17c27000	 strneb      r7, [r2, +r0]
  000c0	07c2800e	 streqb      r8, [r2, +lr]
  000c4	e1a03823	 mov         r3, r3, lsr #16
  000c8	e2822001	 add         r2, r2, #1
  000cc	e2511001	 subs        r1, r1, #1
  000d0	1afffff6	 bne         |$LL13@PhyWrite|

; 715  :     }
; 716  : 
; 717  :     // Tristate and turnaround (2 bit times).
; 718  :     //
; 719  :     bits[clk_idx++] = 0;

  000d4	e28d3000	 add         r3, sp, #0
  000d8	e3a04000	 mov         r4, #0
  000dc	e7c24003	 strb        r4, [r2, +r3]
  000e0	e2822001	 add         r2, r2, #1

; 720  :     bits[clk_idx++] = 0;

  000e4	e28d3000	 add         r3, sp, #0
  000e8	e7c24003	 strb        r4, [r2, +r3]
  000ec	e2820001	 add         r0, r2, #1

; 721  : 
; 722  :     // Write out 16 bits of data, msb first.
; 723  :     //
; 724  :     mask = 0x8000;

  000f0	e3a03902	 mov         r3, #2, 18
  000f4	e3a02010	 mov         r2, #0x10
  000f8	e28d1000	 add         r1, sp, #0
  000fc	e28de000	 add         lr, sp, #0
  00100		 |$LL8@PhyWrite|

; 725  :     for (i = 0; i < 16; ++i)
; 726  :     {
; 727  :         if (PHYdata & mask)

  00100	e1130006	 tst         r3, r6

; 728  :             bits[clk_idx++] = MGMT_MDOE | MGMT_MDO;
; 729  :         else
; 730  :             bits[clk_idx++] = MGMT_MDOE;
; 731  : 
; 732  :         // Shift to next lowest bit.
; 733  :         mask >>= 1;

  00104	e1a030a3	 mov         r3, r3, lsr #1
  00108	e1a03803	 mov         r3, r3, lsl #16
  0010c	17c07001	 strneb      r7, [r0, +r1]
  00110	07c0800e	 streqb      r8, [r0, +lr]
  00114	e1a03823	 mov         r3, r3, lsr #16
  00118	e2800001	 add         r0, r0, #1
  0011c	e2522001	 subs        r2, r2, #1
  00120	1afffff6	 bne         |$LL8@PhyWrite|

; 734  :     }
; 735  : 
; 736  :     // Final clock bit (tristate).
; 737  :     //
; 738  :     bits[clk_idx++] = 0;
; 739  : 
; 740  :     // Select bank 3.
; 741  :     //
; 742  :     OUTPORT16(&g_pLAN91C->BANKSEL, 3);

  00124	e59f70d0	 ldr         r7, [pc, #0xD0]
  00128	e28d2000	 add         r2, sp, #0
  0012c	e7c04002	 strb        r4, [r0, +r2]
  00130	e5973000	 ldr         r3, [r7]
  00134	e3a01003	 mov         r1, #3
  00138	e283000e	 add         r0, r3, #0xE
  0013c	eb000000	 bl          WRITE_PORT_USHORT

; 743  : 
; 744  :     // Get the current MII register value.
; 745  :     //
; 746  :     mii_reg = INPORT16(&g_pLAN91C->MGMT);

  00140	e5973000	 ldr         r3, [r7]
  00144	e2830008	 add         r0, r3, #8
  00148	eb000000	 bl          READ_PORT_USHORT
  0014c	e3a03cff	 mov         r3, #0xFF, 24

; 747  : 
; 748  :     // Turn off all MII Interface bits.
; 749  :     //
; 750  :     mii_reg &= ~(MGMT_MDOE | MGMT_MCLK | 
; 751  :                  MGMT_MDI  | MGMT_MDO);

  00150	e38320f0	 orr         r2, r3, #0xF0
  00154	e1a03800	 mov         r3, r0, lsl #16
  00158	e0028823	 and         r8, r2, r3, lsr #16

; 752  : 
; 753  :     // Clock all cycles.
; 754  :     //
; 755  :     for (i = 0; i < sizeof bits; ++i)

  0015c	e3a09000	 mov         r9, #0
  00160	e28da000	 add         r10, sp, #0
  00164		 |$LL3@PhyWrite|

; 756  :     {
; 757  :         // Clock Low - output data.
; 758  :         //
; 759  :         OUTPORT16(&g_pLAN91C->MGMT, mii_reg | bits[i]);

  00164	e1a06009	 mov         r6, r9
  00168	e7f6500a	 ldrb        r5, [r6, +r10]!
  0016c	e5973000	 ldr         r3, [r7]
  00170	e1884005	 orr         r4, r8, r5
  00174	e1a01804	 mov         r1, r4, lsl #16
  00178	e1a01821	 mov         r1, r1, lsr #16
  0017c	e2830008	 add         r0, r3, #8
  00180	eb000000	 bl          WRITE_PORT_USHORT

; 760  :         OALStall(50);

  00184	e3a00032	 mov         r0, #0x32
  00188	eb000000	 bl          OALStall

; 761  : 
; 762  :         // Clock Hi - input data.
; 763  :         //
; 764  :         OUTPORT16(&g_pLAN91C->MGMT, (UINT16)(mii_reg | bits[i] | MGMT_MCLK));

  0018c	e5972000	 ldr         r2, [r7]
  00190	e3843004	 orr         r3, r4, #4
  00194	e1a01803	 mov         r1, r3, lsl #16
  00198	e1a01821	 mov         r1, r1, lsr #16
  0019c	e2820008	 add         r0, r2, #8
  001a0	eb000000	 bl          WRITE_PORT_USHORT

; 765  :         OALStall(50);

  001a4	e3a00032	 mov         r0, #0x32
  001a8	eb000000	 bl          OALStall

; 766  : 
; 767  :         bits[i] |= INPORT16(&g_pLAN91C->MGMT) & MGMT_MDI;

  001ac	e5973000	 ldr         r3, [r7]
  001b0	e2830008	 add         r0, r3, #8
  001b4	eb000000	 bl          READ_PORT_USHORT
  001b8	e2003002	 and         r3, r0, #2
  001bc	e1833005	 orr         r3, r3, r5
  001c0	e2899001	 add         r9, r9, #1
  001c4	e5c63000	 strb        r3, [r6]
  001c8	e3590041	 cmp         r9, #0x41
  001cc	3affffe4	 bcc         |$LL3@PhyWrite|

; 768  :     }
; 769  : 
; 770  :     // Return to idle state.  Set clock to low, data to low, and output tristated.
; 771  :     //
; 772  :     OUTPORT16(&g_pLAN91C->MGMT, mii_reg);

  001d0	e5973000	 ldr         r3, [r7]
  001d4	e1a01008	 mov         r1, r8
  001d8	e2830008	 add         r0, r3, #8
  001dc	eb000000	 bl          WRITE_PORT_USHORT

; 773  :     OALStall(50);

  001e0	e3a00032	 mov         r0, #0x32
  001e4	eb000000	 bl          OALStall
  001e8	e59d0044	 ldr         r0, [sp, #0x44]
  001ec	eb000000	 bl          __security_check_cookie

; 774  : 
; 775  : }

  001f0	e28dd048	 add         sp, sp, #0x48
  001f4	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  001f8	e12fff1e	 bx          lr
  001fc		 |$LN42@PhyWrite|
  001fc		 |$LN43@PhyWrite|
  001fc	00000000	 DCD         |g_pLAN91C|
  00200		 |$LN44@PhyWrite|
  00200	00000000	 DCD         |__security_cookie|
  00204		 |$M43627|

			 ENDP  ; |PhyWrite|

	EXPORT	|LAN91CInit|
	EXPORT	|??_C@_1HI@OALEOGIF@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAm?$AAa?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@LHBCNPPI@?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAx?$AAx?$AAx?$AA?3?$AA?5?$AAC?$AAh?$AAi?$AAp?$AA?5?$AAI?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAR?$AAe?$AAv?$AAi?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@GHEPFGKN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAN?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AA?5?$AAC?$AAh?$AAi?$AAp?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@LKNBEDJA@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43655| DCD	|$LN21@LAN91CInit|
	DCD	0x4000aa02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@OALEOGIF@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAm?$AAa?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx@| DCB "-"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "m"
	DCB	0x0, "a", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x"
	DCB	0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, ":"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@LHBCNPPI@?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAx?$AAx?$AAx?$AA?3?$AA?5?$AAC?$AAh?$AAi?$AAp?$AA?5?$AAI?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAR?$AAe?$AAv?$AAi?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA?$CF@| DCB "L"
	DCB	0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C", 0x0, "x"
	DCB	0x0, "x", 0x0, "x", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "h"
	DCB	0x0, "i", 0x0, "p", 0x0, " ", 0x0, "I", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "s", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@GHEPFGKN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAN?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AA?5?$AAC?$AAh?$AAi?$AAp?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "e", 0x0, "t", 0x0, "w", 0x0, "o", 0x0, "r"
	DCB	0x0, "k", 0x0, " ", 0x0, "C", 0x0, "h", 0x0, "i", 0x0, "p"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "u", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "t", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@LKNBEDJA@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| DCB "+"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN91CInit| PROC

; 191  : {

  00000		 |$LN21@LAN91CInit|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M43652|
  00008	e1a05002	 mov         r5, r2
  0000c	e1a06000	 mov         r6, r0

; 192  :     BOOL rc = FALSE;
; 193  : 
; 194  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 195  :         L"+LAN91CInit(0x%08x, 0x%08x, 0x%08x)\r\n", pAddress, offset, mac
; 196  :     ));

  00010	e59f728c	 ldr         r7, [pc, #0x28C]
  00014	e3a08000	 mov         r8, #0
  00018	e5973440	 ldr         r3, [r7, #0x440]
  0001c	e3130a02	 tst         r3, #2, 20
  00020	13130004	 tstne       r3, #4
  00024	159f0274	 ldrne       r0, [pc, #0x274]
  00028	11a02001	 movne       r2, r1
  0002c	11a03005	 movne       r3, r5
  00030	11a01006	 movne       r1, r6
  00034	1b000000	 blne        OALLogSerial

; 197  : 
; 198  :     // Save address
; 199  :     g_pLAN91C = (LAN91C_REGS*)pAddress;

  00038	e59f425c	 ldr         r4, [pc, #0x25C]
  0003c	e3a03c02	 mov         r3, #2, 24

; 200  : 
; 201  :     // Chip settle time.
; 202  :     OALStall(750);

  00040	e38300ee	 orr         r0, r3, #0xEE
  00044	e5846000	 str         r6, [r4]
  00048	eb000000	 bl          OALStall

; 203  : 
; 204  :     // Verify that network chip can be detected
; 205  :     if ((INPORT16(&g_pLAN91C->BANKSEL) & 0xFF00) != 0x3300) {

  0004c	e5943000	 ldr         r3, [r4]
  00050	e283000e	 add         r0, r3, #0xE
  00054	eb000000	 bl          READ_PORT_USHORT
  00058	e1a03800	 mov         r3, r0, lsl #16
  0005c	e1a03823	 mov         r3, r3, lsr #16
  00060	e2033cff	 and         r3, r3, #0xFF, 24
  00064	e3530c33	 cmp         r3, #0x33, 24
  00068	0a000006	 beq         |$LN7@LAN91CInit|

; 206  : 
; 207  :         OALMSGS(OAL_ERROR, (
; 208  :             L"ERROR: LAN91CInit: Network Chip not found at 0x%08x\r\n", pAddress
; 209  :         ));

  0006c	e5973440	 ldr         r3, [r7, #0x440]
  00070	e3130001	 tst         r3, #1
  00074	0a00006e	 beq         |$cleanUp$43066|
  00078	e59f0218	 ldr         r0, [pc, #0x218]
  0007c	e1a01006	 mov         r1, r6
  00080	eb000000	 bl          OALLogSerial

; 210  :         goto cleanUp;

  00084	ea000069	 b           |$LN17@LAN91CInit|
  00088		 |$LN7@LAN91CInit|

; 211  :     }
; 212  : 
; 213  :     // Select bank 3 and read the chip ID and revision.
; 214  :     OUTPORT16(&g_pLAN91C->BANKSEL, 3);

  00088	e5943000	 ldr         r3, [r4]
  0008c	e3a01003	 mov         r1, #3
  00090	e283000e	 add         r0, r3, #0xE
  00094	eb000000	 bl          WRITE_PORT_USHORT

; 215  :     g_chipRevision = INPORT16(&g_pLAN91C->REV);

  00098	e5943000	 ldr         r3, [r4]
  0009c	e283000a	 add         r0, r3, #0xA
  000a0	eb000000	 bl          READ_PORT_USHORT
  000a4	e1a0e800	 mov         lr, r0, lsl #16
  000a8	e1a0e82e	 mov         lr, lr, lsr #16

; 216  :     OALMSGS(TRUE, (
; 217  :         L"LAN91Cxxx: Chip Id %d Revision %d\r\n", 
; 218  :         GET_CHIP_ID(g_chipRevision), GET_REV_ID(g_chipRevision)
; 219  :     ));

  000ac	e59f01e0	 ldr         r0, [pc, #0x1E0]
  000b0	e1a03c0e	 mov         r3, lr, lsl #24
  000b4	e1a01e23	 mov         r1, r3, lsr #28
  000b8	e20e200f	 and         r2, lr, #0xF
  000bc	e1c4e0b4	 strh        lr, [r4, #4]
  000c0	eb000000	 bl          OALLogSerial

; 220  :            
; 221  :     // Select bank 1    
; 222  :     OUTPORT16(&g_pLAN91C->BANKSEL, 1);

  000c4	e5943000	 ldr         r3, [r4]
  000c8	e3a01001	 mov         r1, #1
  000cc	e283000e	 add         r0, r3, #0xE
  000d0	eb000000	 bl          WRITE_PORT_USHORT

; 223  : 
; 224  :     // Wait until reset & EEPROM load is done
; 225  :     OUTPORT16(&g_pLAN91C->CTR, CTR_RELOAD);

  000d4	e5943000	 ldr         r3, [r4]
  000d8	e3a01002	 mov         r1, #2
  000dc	e283000c	 add         r0, r3, #0xC
  000e0	eb000000	 bl          WRITE_PORT_USHORT
  000e4		 |$LL6@LAN91CInit|

; 226  :     while ((INPORT16(&g_pLAN91C->CTR) & (CTR_RELOAD|CTR_STORE)) != 0);

  000e4	e5943000	 ldr         r3, [r4]
  000e8	e283000c	 add         r0, r3, #0xC
  000ec	eb000000	 bl          READ_PORT_USHORT
  000f0	e1a03800	 mov         r3, r0, lsl #16
  000f4	e1a03823	 mov         r3, r3, lsr #16
  000f8	e3130003	 tst         r3, #3
  000fc	1afffff8	 bne         |$LL6@LAN91CInit|

; 227  : 
; 228  :     // Get MAC address from chip
; 229  :     mac[0] = INPORT16(&g_pLAN91C->IAR0);

  00100	e5943000	 ldr         r3, [r4]
  00104	e2830004	 add         r0, r3, #4
  00108	eb000000	 bl          READ_PORT_USHORT

; 230  :     mac[1] = INPORT16(&g_pLAN91C->IAR1);

  0010c	e5943000	 ldr         r3, [r4]
  00110	e1c500b0	 strh        r0, [r5]
  00114	e2830006	 add         r0, r3, #6
  00118	eb000000	 bl          READ_PORT_USHORT

; 231  :     mac[2] = INPORT16(&g_pLAN91C->IAR2);

  0011c	e5943000	 ldr         r3, [r4]
  00120	e1c500b2	 strh        r0, [r5, #2]
  00124	e2830008	 add         r0, r3, #8
  00128	eb000000	 bl          READ_PORT_USHORT

; 232  : 
; 233  :     // Initialize the control register
; 234  :     switch (GET_CHIP_ID(g_chipRevision)) {

  0012c	e1d430b4	 ldrh        r3, [r4, #4]
  00130	e1c500b4	 strh        r0, [r5, #4]
  00134	e20330f0	 and         r3, r3, #0xF0
  00138	e3530090	 cmp         r3, #0x90

; 242  :         break;
; 243  :     default:
; 244  :         // Set SQUELCH & NO WAIT bits
; 245  :         OUTPORT16(&g_pLAN91C->BANKSEL, 1);

  0013c	e5943000	 ldr         r3, [r4]
  00140	0a000013	 beq         |$LN2@LAN91CInit|
  00144	e3a01001	 mov         r1, #1
  00148	e283000e	 add         r0, r3, #0xE
  0014c	eb000000	 bl          WRITE_PORT_USHORT

; 246  :         SETPORT16(&g_pLAN91C->CR, CR_SETSQLCH|CR_NOWAIT);

  00150	e5940000	 ldr         r0, [r4]
  00154	eb000000	 bl          READ_PORT_USHORT
  00158	e1a03800	 mov         r3, r0, lsl #16
  0015c	e5940000	 ldr         r0, [r4]
  00160	e1a03823	 mov         r3, r3, lsr #16
  00164	e3831c12	 orr         r1, r3, #0x12, 24
  00168	eb000000	 bl          WRITE_PORT_USHORT

; 247  :         OUTPORT16(&g_pLAN91C->CTR, CTR_BIT8|CTR_TEEN);

  0016c	e5943000	 ldr         r3, [r4]
  00170	e3a01e12	 mov         r1, #0x12, 28
  00174	e283000c	 add         r0, r3, #0xC
  00178	eb000000	 bl          WRITE_PORT_USHORT

; 248  :         // Memory configuration register value.
; 249  :         OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  0017c	e5943000	 ldr         r3, [r4]
  00180	e3a01000	 mov         r1, #0
  00184	e283000e	 add         r0, r3, #0xE
  00188	eb000000	 bl          WRITE_PORT_USHORT

; 250  :         OUTPORT16(&g_pLAN91C->MCRPCR, 0x0006);

  0018c	e3a01006	 mov         r1, #6
  00190	ea00000b	 b           |$LN18@LAN91CInit|
  00194		 |$LN2@LAN91CInit|

; 235  :     case CHIP_ID_LAN91C111:
; 236  :         OUTPORT16(&g_pLAN91C->CTR, CTR_TEEN);

  00194	e3a01020	 mov         r1, #0x20
  00198	e283000c	 add         r0, r3, #0xC
  0019c	eb000000	 bl          WRITE_PORT_USHORT

; 237  :         // The LAN91C111's internal PHY is disabled at boot time - enable it.
; 238  :         PhyWrite(0, 0, CONTROL_MII_DIS);

  001a0	e3a02a03	 mov         r2, #3, 20
  001a4	e3a01000	 mov         r1, #0
  001a8	e3a00000	 mov         r0, #0
  001ac	eb000000	 bl          PhyWrite

; 239  :         // Enable auto-negotiation of link speed.
; 240  :         OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  001b0	e5943000	 ldr         r3, [r4]
  001b4	e3a01000	 mov         r1, #0
  001b8	e283000e	 add         r0, r3, #0xE
  001bc	eb000000	 bl          WRITE_PORT_USHORT

; 241  :         OUTPORT16(&g_pLAN91C->MCRPCR, 0x0800);

  001c0	e3a01b02	 mov         r1, #2, 22
  001c4		 |$LN18@LAN91CInit|
  001c4	e5943000	 ldr         r3, [r4]
  001c8	e283000a	 add         r0, r3, #0xA
  001cc	eb000000	 bl          WRITE_PORT_USHORT

; 251  :     }
; 252  : 
; 253  :     // Initialize transmit control register
; 254  :     OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  001d0	e5943000	 ldr         r3, [r4]
  001d4	e3a01000	 mov         r1, #0
  001d8	e283000e	 add         r0, r3, #0xE
  001dc	eb000000	 bl          WRITE_PORT_USHORT

; 255  :     OUTPORT16(&g_pLAN91C->TCR, TCR_PADEN|TCR_TXEN);

  001e0	e5940000	 ldr         r0, [r4]
  001e4	e3a01081	 mov         r1, #0x81
  001e8	eb000000	 bl          WRITE_PORT_USHORT

; 256  : 
; 257  :     // Initialize interrupt mask register (all ints disabled to start)
; 258  :     OUTPORT16(&g_pLAN91C->BANKSEL, 2);

  001ec	e5943000	 ldr         r3, [r4]
  001f0	e3a01002	 mov         r1, #2
  001f4	e283000e	 add         r0, r3, #0xE
  001f8	eb000000	 bl          WRITE_PORT_USHORT

; 259  :     OUTPORT16(&g_pLAN91C->INTR, 0);

  001fc	e5943000	 ldr         r3, [r4]
  00200	e3a01000	 mov         r1, #0
  00204	e283000c	 add         r0, r3, #0xC
  00208	eb000000	 bl          WRITE_PORT_USHORT

; 260  : 
; 261  :     // Initialize the Receive Control Register
; 262  :     OUTPORT16(&g_pLAN91C->BANKSEL, 0);

  0020c	e5943000	 ldr         r3, [r4]
  00210	e3a01000	 mov         r1, #0
  00214	e283000e	 add         r0, r3, #0xE
  00218	eb000000	 bl          WRITE_PORT_USHORT

; 263  :     OUTPORT16(&g_pLAN91C->RCR, RCR_RXEN|RCR_STRIP_CRC);

  0021c	e5943000	 ldr         r3, [r4]
  00220	e3a01c03	 mov         r1, #3, 24
  00224	e2830004	 add         r0, r3, #4
  00228	eb000000	 bl          WRITE_PORT_USHORT

; 264  : 
; 265  :     // We are done
; 266  :     rc = TRUE;

  0022c	e3a08001	 mov         r8, #1
  00230		 |$LN17@LAN91CInit|
  00230	e5973440	 ldr         r3, [r7, #0x440]
  00234		 |$cleanUp$43066|

; 267  : 
; 268  : cleanUp:
; 269  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 270  :         L"-LAN91CInit(mac = %02x:%02x:%02x:%02x:%02x:%02x, rc = %d)\r\n",
; 271  :         mac[0]&0xFF, mac[0]>>8, mac[1]&0xFF, mac[1]>>8, mac[2]&0xFF, mac[2]>>8,
; 272  :         rc
; 273  :     ));

  00234	e3130a02	 tst         r3, #2, 20
  00238	0a000010	 beq         |$LN14@LAN91CInit|
  0023c	e3130004	 tst         r3, #4
  00240	0a00000e	 beq         |$LN14@LAN91CInit|
  00244	e1d520b4	 ldrh        r2, [r5, #4]
  00248	e1d5e0b2	 ldrh        lr, [r5, #2]
  0024c	e1d540b0	 ldrh        r4, [r5]
  00250	e1a03422	 mov         r3, r2, lsr #8
  00254	e59f0034	 ldr         r0, [pc, #0x34]
  00258	e20220ff	 and         r2, r2, #0xFF
  0025c	e1a0142e	 mov         r1, lr, lsr #8
  00260	e58d2004	 str         r2, [sp, #4]
  00264	e58d3008	 str         r3, [sp, #8]
  00268	e58d1000	 str         r1, [sp]
  0026c	e1a02424	 mov         r2, r4, lsr #8
  00270	e20e30ff	 and         r3, lr, #0xFF
  00274	e20410ff	 and         r1, r4, #0xFF
  00278	e58d800c	 str         r8, [sp, #0xC]
  0027c	eb000000	 bl          OALLogSerial
  00280		 |$LN14@LAN91CInit|

; 274  : 
; 275  :     return rc;
; 276  : }

  00280	e1a00008	 mov         r0, r8
  00284	e28dd010	 add         sp, sp, #0x10
  00288	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0028c	e12fff1e	 bx          lr
  00290		 |$LN22@LAN91CInit|
  00290		 |$LN23@LAN91CInit|
  00290	00000000	 DCD         |??_C@_1HI@OALEOGIF@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAm?$AAa?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx@|
  00294		 |$LN24@LAN91CInit|
  00294	00000000	 DCD         |??_C@_1EI@LHBCNPPI@?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAx?$AAx?$AAx?$AA?3?$AA?5?$AAC?$AAh?$AAi?$AAp?$AA?5?$AAI?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAR?$AAe?$AAv?$AAi?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA?$CF@|
  00298		 |$LN25@LAN91CInit|
  00298	00000000	 DCD         |??_C@_1GM@GHEPFGKN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAN?$AAe?$AAt?$AAw?$AAo?$AAr?$AAk?$AA?5?$AAC?$AAh?$AAi?$AAp?$AA?5@|
  0029c		 |$LN26@LAN91CInit|
  0029c	00000000	 DCD         |g_pLAN91C|
  002a0		 |$LN27@LAN91CInit|
  002a0	00000000	 DCD         |??_C@_1EM@LKNBEDJA@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@|
  002a4		 |$LN28@LAN91CInit|
  002a4	00000000	 DCD         |dpCurSettings|
  002a8		 |$M43653|

			 ENDP  ; |LAN91CInit|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|LAN91CMulticastList|
	EXPORT	|??_C@_1DO@CJJDCGJJ@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@GJCLLOK@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43714| DCD	|$LN29@LAN91CMult|
	DCD	0xc0006202

  00000			 AREA	 |.xdata|, DATA
|$T43710| DCD	0xffffffdc

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@CJJDCGJJ@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "c"
	DCB	0x0, "a", 0x0, "s", 0x0, "t", 0x0, "L", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "1", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@GJCLLOK@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@| DCB "+"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "C"
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "c"
	DCB	0x0, "a", 0x0, "s", 0x0, "t", 0x0, "L", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T43710|

  00008		 |LAN91CMulticastList| PROC

; 614  : {

  00008		 |$LN29@LAN91CMult|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M43711|
  00010	e1a05001	 mov         r5, r1
  00014	e1a04000	 mov         r4, r0
  00018	e59f316c	 ldr         r3, [pc, #0x16C]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3008	 str         r3, [sp, #8]

; 615  :     UINT32 crc, i;
; 616  :     UINT16 h[4];
; 617  : 
; 618  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 619  :         L"+LAN91CMulticastList(0x%08x, %d)\r\n", pAddresses, count
; 620  :     ));

  00024	e59fa15c	 ldr         r10, [pc, #0x15C]
  00028	e59a3440	 ldr         r3, [r10, #0x440]
  0002c	e3130a02	 tst         r3, #2, 20
  00030	13130004	 tstne       r3, #4
  00034	159f0148	 ldrne       r0, [pc, #0x148]
  00038	11a02005	 movne       r2, r5
  0003c	11a01004	 movne       r1, r4
  00040	1b000000	 blne        OALLogSerial

; 621  : 
; 622  :     // Calculate hash bits       
; 623  :     h[0] = h[1] = h[2] = h[3] = 0;

  00044	e3a06000	 mov         r6, #0
  00048	e3a07000	 mov         r7, #0
  0004c	e3a08000	 mov         r8, #0
  00050	e3a09000	 mov         r9, #0
  00054	e1cd60b6	 strh        r6, [sp, #6]
  00058	e1cd70b4	 strh        r7, [sp, #4]
  0005c	e1cd80b2	 strh        r8, [sp, #2]
  00060	e1cd90b0	 strh        r9, [sp]

; 624  :     for (i = 0; i < count; i++) {

  00064	e3550000	 cmp         r5, #0
  00068	0a000023	 beq         |$LN1@LAN91CMult|
  0006c	e59f710c	 ldr         r7, [pc, #0x10C]
  00070	e28d8000	 add         r8, sp, #0
  00074	e3a09001	 mov         r9, #1
  00078		 |$LL3@LAN91CMult|

; 625  :         crc = Crc(pAddresses);

  00078	e3e00000	 mvn         r0, #0
  0007c	e3a01000	 mov         r1, #0
  00080		 |$LL16@LAN91CMult|
  00080	e7d12004	 ldrb        r2, [r1, +r4]
  00084	e3a06008	 mov         r6, #8
  00088		 |$LL13@LAN91CMult|
  00088	e3100102	 tst         r0, #2, 2
  0008c	13a0e001	 movne       lr, #1
  00090	03a0e000	 moveq       lr, #0
  00094	e2023001	 and         r3, r2, #1
  00098	e033e00e	 eors        lr, r3, lr
  0009c	e1a00080	 mov         r0, r0, lsl #1
  000a0	10203007	 eorne       r3, r0, r7
  000a4	e1a020a2	 mov         r2, r2, lsr #1
  000a8	1183000e	 orrne       r0, r3, lr
  000ac	e2566001	 subs        r6, r6, #1
  000b0	e20220ff	 and         r2, r2, #0xFF
  000b4	1afffff3	 bne         |$LL13@LAN91CMult|
  000b8	e2811001	 add         r1, r1, #1
  000bc	e3510006	 cmp         r1, #6
  000c0	3affffee	 bcc         |$LL16@LAN91CMult|

; 626  :         h[crc >> 30] |= 1 << ((crc >> 26) & 0x0F);

  000c4	e1a03f20	 mov         r3, r0, lsr #30
  000c8	e0881083	 add         r1, r8, r3, lsl #1
  000cc	e1d120b0	 ldrh        r2, [r1]
  000d0	e1a03100	 mov         r3, r0, lsl #2
  000d4	e1a03e23	 mov         r3, r3, lsr #28
  000d8	e1823319	 orr         r3, r2, r9, lsl r3

; 627  :         pAddresses += 6;

  000dc	e2844006	 add         r4, r4, #6
  000e0	e1c130b0	 strh        r3, [r1]
  000e4	e2555001	 subs        r5, r5, #1
  000e8	1affffe2	 bne         |$LL3@LAN91CMult|
  000ec	e1dd60b6	 ldrh        r6, [sp, #6]
  000f0	e1dd70b4	 ldrh        r7, [sp, #4]
  000f4	e1dd80b2	 ldrh        r8, [sp, #2]
  000f8	e1dd90b0	 ldrh        r9, [sp]
  000fc		 |$LN1@LAN91CMult|

; 628  :     }
; 629  : 
; 630  :     // Write it to hardware
; 631  :     OUTPORT16(&g_pLAN91C->BANKSEL, 3);

  000fc	e59f4078	 ldr         r4, [pc, #0x78]
  00100	e3a01003	 mov         r1, #3
  00104	e5943000	 ldr         r3, [r4]
  00108	e283000e	 add         r0, r3, #0xE
  0010c	eb000000	 bl          WRITE_PORT_USHORT

; 632  :     OUTPORT16(&g_pLAN91C->MT[0], h[0]);

  00110	e5940000	 ldr         r0, [r4]
  00114	e1a01009	 mov         r1, r9
  00118	eb000000	 bl          WRITE_PORT_USHORT

; 633  :     OUTPORT16(&g_pLAN91C->MT[1], h[1]);

  0011c	e5943000	 ldr         r3, [r4]
  00120	e1a01008	 mov         r1, r8
  00124	e2830002	 add         r0, r3, #2
  00128	eb000000	 bl          WRITE_PORT_USHORT

; 634  :     OUTPORT16(&g_pLAN91C->MT[2], h[2]);

  0012c	e5943000	 ldr         r3, [r4]
  00130	e1a01007	 mov         r1, r7
  00134	e2830004	 add         r0, r3, #4
  00138	eb000000	 bl          WRITE_PORT_USHORT

; 635  :     OUTPORT16(&g_pLAN91C->MT[3], h[3]);

  0013c	e5943000	 ldr         r3, [r4]
  00140	e1a01006	 mov         r1, r6
  00144	e2830006	 add         r0, r3, #6
  00148	eb000000	 bl          WRITE_PORT_USHORT

; 636  : 
; 637  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-LAN91CMulticastList(rc = 1)\r\n"));

  0014c	e59a3440	 ldr         r3, [r10, #0x440]
  00150	e3130a02	 tst         r3, #2, 20
  00154	13130004	 tstne       r3, #4
  00158	159f0018	 ldrne       r0, [pc, #0x18]
  0015c	1b000000	 blne        OALLogSerial

; 638  :     return TRUE;

  00160	e59d0008	 ldr         r0, [sp, #8]
  00164	eb000000	 bl          __security_check_cookie
  00168	e3a00001	 mov         r0, #1

; 639  : }

  0016c	e28dd00c	 add         sp, sp, #0xC
  00170	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00174	e12fff1e	 bx          lr
  00178		 |$LN30@LAN91CMult|
  00178		 |$LN31@LAN91CMult|
  00178	00000000	 DCD         |??_C@_1DO@CJJDCGJJ@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0017c		 |$LN32@LAN91CMult|
  0017c	00000000	 DCD         |g_pLAN91C|
  00180		 |$LN33@LAN91CMult|
  00180	04c11db6	 DCD         0x4c11db6
  00184		 |$LN34@LAN91CMult|
  00184	00000000	 DCD         |??_C@_1EG@GJCLLOK@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AAC?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@|
  00188		 |$LN35@LAN91CMult|
  00188	00000000	 DCD         |dpCurSettings|
  0018c		 |$LN36@LAN91CMult|
  0018c	00000000	 DCD         |__security_cookie|
  00190		 |$M43712|

			 ENDP  ; |LAN91CMulticastList|

	END
