; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\ETHDRV\AM79C973\am79c973.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|g_base| %	0x4
|g_dmaAddress| % 0x4
|g_dmaSize| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	IMPORT	|READ_REGISTER_ULONG|
	IMPORT	|WRITE_REGISTER_ULONG|
; File c:\wince600\platform\common\src\common\ethdrv\am79c973\am79c973.c

  00000			 AREA	 |.pdata|, PDATA
|$T43373| DCD	|$LN5@ReadCSR|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReadCSR| PROC

; 117  : {

  00000		 |$LN5@ReadCSR|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43370|
  00004	e1a01000	 mov         r1, r0

; 118  :    OUTREG32((UINT32*)(g_base + RAP), address);

  00008	e59f401c	 ldr         r4, [pc, #0x1C]
  0000c	e5943000	 ldr         r3, [r4]
  00010	e2830014	 add         r0, r3, #0x14
  00014	eb000000	 bl          WRITE_REGISTER_ULONG

; 119  :    return INREG32((UINT32*)(g_base + RDP));

  00018	e5943000	 ldr         r3, [r4]
  0001c	e2830010	 add         r0, r3, #0x10
  00020	eb000000	 bl          READ_REGISTER_ULONG

; 120  : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$LN6@ReadCSR|
  0002c		 |$LN7@ReadCSR|
  0002c	00000000	 DCD         |g_base|
  00030		 |$M43371|

			 ENDP  ; |ReadCSR|


  00000			 AREA	 |.pdata|, PDATA
|$T43384| DCD	|$LN5@WriteCSR|
	DCD	0x40000e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WriteCSR| PROC

; 125  : {

  00000		 |$LN5@WriteCSR|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43381|
  00004	e1a05001	 mov         r5, r1
  00008	e1a01000	 mov         r1, r0

; 126  :    OUTREG32((UINT32*)(g_base + RAP), address);

  0000c	e59f4020	 ldr         r4, [pc, #0x20]
  00010	e5943000	 ldr         r3, [r4]
  00014	e2830014	 add         r0, r3, #0x14
  00018	eb000000	 bl          WRITE_REGISTER_ULONG

; 127  :    OUTREG32((UINT32*)(g_base + RDP), data);

  0001c	e5943000	 ldr         r3, [r4]
  00020	e1a01005	 mov         r1, r5
  00024	e2830010	 add         r0, r3, #0x10
  00028	eb000000	 bl          WRITE_REGISTER_ULONG

; 128  : }

  0002c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN6@WriteCSR|
  00034		 |$LN7@WriteCSR|
  00034	00000000	 DCD         |g_base|
  00038		 |$M43382|

			 ENDP  ; |WriteCSR|


  00000			 AREA	 |.pdata|, PDATA
|$T43395| DCD	|$LN5@WriteBCR|
	DCD	0x40000e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WriteBCR| PROC

; 141  : {

  00000		 |$LN5@WriteBCR|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43392|
  00004	e1a05001	 mov         r5, r1
  00008	e1a01000	 mov         r1, r0

; 142  :    OUTREG32((UINT32*)(g_base + RAP), address);

  0000c	e59f4020	 ldr         r4, [pc, #0x20]
  00010	e5943000	 ldr         r3, [r4]
  00014	e2830014	 add         r0, r3, #0x14
  00018	eb000000	 bl          WRITE_REGISTER_ULONG

; 143  :    OUTREG32((UINT32*)(g_base + BDP), data);

  0001c	e5943000	 ldr         r3, [r4]
  00020	e1a01005	 mov         r1, r5
  00024	e283001c	 add         r0, r3, #0x1C
  00028	eb000000	 bl          WRITE_REGISTER_ULONG

; 144  : }

  0002c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN6@WriteBCR|
  00034		 |$LN7@WriteBCR|
  00034	00000000	 DCD         |g_base|
  00038		 |$M43393|

			 ENDP  ; |WriteBCR|


  00000			 AREA	 |.pdata|, PDATA
|$T43408| DCD	|$LN5@ReadPhy|
	DCD	0x40001e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReadPhy| PROC

; 149  : {

  00000		 |$LN5@ReadPhy|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43405|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 150  :     UINT32 address;
; 151  :     
; 152  :     OUTREG32((UINT32*)(g_base + RAP), 33);

  0000c	e59f6060	 ldr         r6, [pc, #0x60]
  00010	e3a01021	 mov         r1, #0x21
  00014	e5963000	 ldr         r3, [r6]
  00018	e2830014	 add         r0, r3, #0x14
  0001c	eb000000	 bl          WRITE_REGISTER_ULONG

; 153  :     address = INREG32((UINT32*)(g_base + BDP));

  00020	e5963000	 ldr         r3, [r6]
  00024	e283001c	 add         r0, r3, #0x1C
  00028	eb000000	 bl          READ_REGISTER_ULONG

; 154  :     OUTREG32((UINT32*)(g_base + BDP), (UINT16)((id << 5)|(reg & 0x1F)));

  0002c	e596e000	 ldr         lr, [r6]
  00030	e1a03284	 mov         r3, r4, lsl #5
  00034	e1a02803	 mov         r2, r3, lsl #16
  00038	e205301f	 and         r3, r5, #0x1F
  0003c	e1831822	 orr         r1, r3, r2, lsr #16
  00040	e28e001c	 add         r0, lr, #0x1C
  00044	eb000000	 bl          WRITE_REGISTER_ULONG

; 155  :     OUTREG32((UINT32*)(g_base + RAP), 34);

  00048	e5963000	 ldr         r3, [r6]
  0004c	e3a01022	 mov         r1, #0x22
  00050	e2830014	 add         r0, r3, #0x14
  00054	eb000000	 bl          WRITE_REGISTER_ULONG

; 156  :     return (UINT16)INREG32((UINT32*)(g_base + BDP));

  00058	e5963000	 ldr         r3, [r6]
  0005c	e283001c	 add         r0, r3, #0x1C
  00060	eb000000	 bl          READ_REGISTER_ULONG
  00064	e1a00800	 mov         r0, r0, lsl #16
  00068	e1a00820	 mov         r0, r0, lsr #16

; 157  : }

  0006c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN6@ReadPhy|
  00074		 |$LN7@ReadPhy|
  00074	00000000	 DCD         |g_base|
  00078		 |$M43406|

			 ENDP  ; |ReadPhy|


  00000			 AREA	 |.pdata|, PDATA
|$T43430| DCD	|$LN18@HashAddres|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HashAddress| PROC

; 175  : {

  00000		 |$LN18@HashAddres|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43427|
  00004	e1a05000	 mov         r5, r0

; 176  :    ULONG crc, carry;
; 177  :    UINT i, j;
; 178  :    UCHAR uc;
; 179  :    
; 180  :    crc = 0xFFFFFFFF;
; 181  :    for (i = 0; i < ADDR_SIZE; i++) {

  00008	e59f6050	 ldr         r6, [pc, #0x50]
  0000c	e3e00000	 mvn         r0, #0
  00010	e3a01000	 mov         r1, #0
  00014		 |$LL7@HashAddres|

; 182  :       uc = pAddress[i];

  00014	e7d12005	 ldrb        r2, [r1, +r5]
  00018	e3a0e008	 mov         lr, #8
  0001c		 |$LL4@HashAddres|

; 183  :       for (j = 0; j < 8; j++) {
; 184  :          carry = ((crc & 0x80000000) ? 1 : 0) ^ (uc & 0x01);

  0001c	e3100102	 tst         r0, #2, 2
  00020	13a04001	 movne       r4, #1
  00024	03a04000	 moveq       r4, #0
  00028	e2023001	 and         r3, r2, #1

; 185  :          crc <<= 1;
; 186  :          uc >>= 1;

  0002c	e0334004	 eors        r4, r3, r4
  00030	e1a00080	 mov         r0, r0, lsl #1

; 187  :          if (carry) crc = (crc ^ 0x04c11db6) | carry;

  00034	10203006	 eorne       r3, r0, r6
  00038	e1a020a2	 mov         r2, r2, lsr #1
  0003c	11830004	 orrne       r0, r3, r4
  00040	e25ee001	 subs        lr, lr, #1
  00044	e20220ff	 and         r2, r2, #0xFF
  00048	1afffff3	 bne         |$LL4@HashAddres|
  0004c	e2811001	 add         r1, r1, #1
  00050	e3510006	 cmp         r1, #6
  00054	3affffee	 bcc         |$LL7@HashAddres|

; 188  :       }
; 189  :    }
; 190  :    return crc;
; 191  : }

  00058	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN19@HashAddres|
  00060		 |$LN20@HashAddres|
  00060	04c11db6	 DCD         0x4c11db6
  00064		 |$M43428|

			 ENDP  ; |HashAddress|

	EXPORT	|??_C@_1CC@FCPIDOII@?$AA?5?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@OCDGALGD@?$AAA?$AAm?$AA7?$AA9?$AAc?$AA9?$AA7?$AA3?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAl?$AAi?$AAn?$AAk?$AA?4?$AA?4?$AA?4?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALLogSerial|
	IMPORT	|dpCurSettings|
	IMPORT	|OALVAtoPA|
	IMPORT	|OALStall|

  0000c			 AREA	 |.bss|, NOINIT
|g_rxPos| %	0x4
|g_txPos| %	0x4
|g_rxPos| %	0x4
|g_pRxBuffer| %	0x4
|g_pTxBuffer| %	0x4
|g_pRxRing| %	0x4
|g_pTxRing| %	0x4
|g_pInit| %	0x4

  00000			 AREA	 |.pdata|, PDATA
|$T43472| DCD	|$LN43@HWInit|
	DCD	0x4000a701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@FCPIDOII@?$AA?5?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "L", 0x0, "i", 0x0, "n", 0x0, "k", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@OCDGALGD@?$AAA?$AAm?$AA7?$AA9?$AAc?$AA9?$AA7?$AA3?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAl?$AAi?$AAn?$AAk?$AA?4?$AA?4?$AA?4?$AA?$AA@| DCB "A"
	DCB	0x0, "m", 0x0, "7", 0x0, "9", 0x0, "c", 0x0, "9", 0x0, "7"
	DCB	0x0, "3", 0x0, ":", 0x0, " ", 0x0, "W", 0x0, "a", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "l", 0x0, "i", 0x0, "n", 0x0, "k", 0x0, ".", 0x0, "."
	DCB	0x0, ".", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HWInit| PROC

; 196  : {

  00000		 |$LN43@HWInit|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M43469|

; 197  :     UINT32 i, pos;
; 198  : 
; 199  :     // Wait for while...
; 200  :     OALStall(1000000);

  00004	e3a0993d	 mov         r9, #0x3D, 18
  00008	e3890d09	 orr         r0, r9, #9, 26
  0000c	eb000000	 bl          OALStall

; 201  : 
; 202  :     // Switch to DWIO mode
; 203  :     OUTREG32((UINT32*)(g_base + RDP), 0);

  00010	e59f4280	 ldr         r4, [pc, #0x280]
  00014	e3a01000	 mov         r1, #0
  00018	e594301c	 ldr         r3, [r4, #0x1C]
  0001c	e2830010	 add         r0, r3, #0x10
  00020	eb000000	 bl          WRITE_REGISTER_ULONG

; 204  : 
; 205  :     // Reset    
; 206  :     INREG32((UINT32*)(g_base + RESET));

  00024	e594301c	 ldr         r3, [r4, #0x1C]
  00028	e2830018	 add         r0, r3, #0x18
  0002c	eb000000	 bl          READ_REGISTER_ULONG

; 207  :     
; 208  :     // Wait 2ms
; 209  :     OALStall(2000);

  00030	e3a00e7d	 mov         r0, #0x7D, 28
  00034	eb000000	 bl          OALStall

; 210  :     
; 211  :     // Set software style to 3 (32bit software structure)
; 212  :     WriteBCR(20, 0x0503);

  00038	e594301c	 ldr         r3, [r4, #0x1C]
  0003c	e3a01014	 mov         r1, #0x14
  00040	e2830014	 add         r0, r3, #0x14
  00044	eb000000	 bl          WRITE_REGISTER_ULONG
  00048	e594301c	 ldr         r3, [r4, #0x1C]
  0004c	e3a02c05	 mov         r2, #5, 24
  00050	e3821003	 orr         r1, r2, #3
  00054	e283001c	 add         r0, r3, #0x1C
  00058	eb000000	 bl          WRITE_REGISTER_ULONG

; 213  : 
; 214  :     // Stop adapter
; 215  :     WriteCSR(0, 0x0004);

  0005c	e3a01004	 mov         r1, #4
  00060	e3a00000	 mov         r0, #0
  00064	eb000000	 bl          WriteCSR

; 216  : 
; 217  :     // Divide DMA buffer
; 218  :     pos = g_dmaAddress;
; 219  :     g_pInit = (UINT32*)pos;

  00068	e594e020	 ldr         lr, [r4, #0x20]

; 220  :     pos += INIT_SIZE;
; 221  :     g_pRxRing = (UINT32*)pos;
; 222  :     pos += RX_BUFFERS * DESC_SIZE;
; 223  :     g_pTxRing = (UINT32*)pos;
; 224  :     pos += TX_BUFFERS * DESC_SIZE;
; 225  :     g_pRxBuffer = (UINT8*)pos;
; 226  :     pos += RX_BUFFERS * BUFFER_SIZE;
; 227  :     g_pTxBuffer = (UINT8*)pos;
; 228  : 
; 229  :     // Prepare initialization block
; 230  :     g_pInit[0] = 0x20500180;

  0006c	e59f1220	 ldr         r1, [pc, #0x220]

; 231  :     g_pInit[1] = INREG32((UINT32*)g_base);

  00070	e594001c	 ldr         r0, [r4, #0x1C]
  00074	e28e3020	 add         r3, lr, #0x20
  00078	e5843004	 str         r3, [r4, #4]
  0007c	e2833c02	 add         r3, r3, #2, 24
  00080	e2832040	 add         r2, r3, #0x40
  00084	e5843008	 str         r3, [r4, #8]
  00088	e2823903	 add         r3, r2, #3, 18
  0008c	e284c00c	 add         r12, r4, #0xC
  00090	e88c400c	 stmia       r12, {r2, r3, lr}
  00094	e58e1000	 str         r1, [lr]
  00098	eb000000	 bl          READ_REGISTER_ULONG

; 232  :     g_pInit[2] = INREG32((UINT32*)(g_base + 4));

  0009c	e594101c	 ldr         r1, [r4, #0x1C]
  000a0	e5942014	 ldr         r2, [r4, #0x14]
  000a4	e1a03000	 mov         r3, r0
  000a8	e2810004	 add         r0, r1, #4
  000ac	e5823004	 str         r3, [r2, #4]
  000b0	eb000000	 bl          READ_REGISTER_ULONG
  000b4	e5942014	 ldr         r2, [r4, #0x14]
  000b8	e1a03000	 mov         r3, r0

; 233  :     g_pInit[3] = 0;
; 234  :     g_pInit[4] = 0;
; 235  :     g_pInit[5] = OALVAtoPA(g_pRxRing);

  000bc	e5940004	 ldr         r0, [r4, #4]
  000c0	e3a08000	 mov         r8, #0
  000c4	e5823008	 str         r3, [r2, #8]
  000c8	e582800c	 str         r8, [r2, #0xC]
  000cc	e5828010	 str         r8, [r2, #0x10]
  000d0	eb000000	 bl          OALVAtoPA
  000d4	e5943014	 ldr         r3, [r4, #0x14]
  000d8	e1a02000	 mov         r2, r0

; 236  :     g_pInit[6] = OALVAtoPA(g_pTxRing);

  000dc	e5940008	 ldr         r0, [r4, #8]
  000e0	e5832014	 str         r2, [r3, #0x14]
  000e4	eb000000	 bl          OALVAtoPA
  000e8	e5943014	 ldr         r3, [r4, #0x14]
  000ec	e5941004	 ldr         r1, [r4, #4]
  000f0	e594e00c	 ldr         lr, [r4, #0xC]
  000f4	e5830018	 str         r0, [r3, #0x18]
  000f8	e3a03102	 mov         r3, #2, 2
  000fc	e3837cfa	 orr         r7, r3, #0xFA, 24
  00100	e3a06000	 mov         r6, #0
  00104	e3a05000	 mov         r5, #0
  00108		 |$LL12@HWInit|

; 237  : 
; 238  :     // Initialize RX ring   
; 239  :     for (i = 0; i < RX_BUFFERS; i++) {
; 240  :         g_pRxRing[4 * i + 0] = 0;

  00108	e1a03006	 mov         r3, r6
  0010c	e7a38001	 str         r8, [r3, +r1]!

; 241  :         g_pRxRing[4 * i + 1] = RMD1_OWN | RMD1_ONES | (4096 - BUFFER_SIZE);
; 242  :         g_pRxRing[4 * i + 2] = OALVAtoPA(g_pRxBuffer + i * BUFFER_SIZE);

  00110	e085000e	 add         r0, r5, lr
  00114	e5837004	 str         r7, [r3, #4]
  00118	eb000000	 bl          OALVAtoPA

; 243  :         g_pRxRing[4 * i + 3] = (UINT32)(g_pRxBuffer + i * BUFFER_SIZE);

  0011c	e594e00c	 ldr         lr, [r4, #0xC]
  00120	e5941004	 ldr         r1, [r4, #4]
  00124	e085200e	 add         r2, r5, lr
  00128	e2855c06	 add         r5, r5, #6, 24
  0012c	e0863001	 add         r3, r6, r1
  00130	e3550903	 cmp         r5, #3, 18
  00134	e5830008	 str         r0, [r3, #8]
  00138	e583200c	 str         r2, [r3, #0xC]
  0013c	e2866010	 add         r6, r6, #0x10
  00140	3afffff0	 bcc         |$LL12@HWInit|

; 244  :     }
; 245  :     g_rxPos = 0;

  00144	e3a03000	 mov         r3, #0
  00148	e5941008	 ldr         r1, [r4, #8]
  0014c	e594e010	 ldr         lr, [r4, #0x10]
  00150	e5843000	 str         r3, [r4]
  00154	e3a06000	 mov         r6, #0
  00158	e3a05000	 mov         r5, #0
  0015c		 |$LL9@HWInit|

; 246  :    
; 247  :     // Initialize TX ring   
; 248  :     for (i = 0; i < TX_BUFFERS; i++) {
; 249  :         g_pTxRing[4 * i + 0] = 0;

  0015c	e1a03006	 mov         r3, r6
  00160	e7a38001	 str         r8, [r3, +r1]!

; 250  :         g_pTxRing[4 * i + 1] = 0;
; 251  :         g_pTxRing[4 * i + 2] = OALVAtoPA(g_pTxBuffer + i * BUFFER_SIZE);

  00164	e085000e	 add         r0, r5, lr
  00168	e5838004	 str         r8, [r3, #4]
  0016c	eb000000	 bl          OALVAtoPA

; 252  :         g_pTxRing[4 * i + 3] = (UINT32)(g_pTxBuffer + i * BUFFER_SIZE);

  00170	e594e010	 ldr         lr, [r4, #0x10]
  00174	e5941008	 ldr         r1, [r4, #8]
  00178	e085200e	 add         r2, r5, lr
  0017c	e2855c06	 add         r5, r5, #6, 24
  00180	e0863001	 add         r3, r6, r1
  00184	e3550b06	 cmp         r5, #6, 22
  00188	e5830008	 str         r0, [r3, #8]
  0018c	e583200c	 str         r2, [r3, #0xC]
  00190	e2866010	 add         r6, r6, #0x10
  00194	3afffff0	 bcc         |$LL9@HWInit|

; 253  :     }
; 254  :     g_txPos = 0;
; 255  :    
; 256  :     // Set initialization block address
; 257  :     pos = OALVAtoPA(g_pInit);

  00198	e5940014	 ldr         r0, [r4, #0x14]
  0019c	e3a03000	 mov         r3, #0
  001a0	e5843018	 str         r3, [r4, #0x18]
  001a4	eb000000	 bl          OALVAtoPA
  001a8	e3a03cff	 mov         r3, #0xFF, 24

; 258  :     WriteCSR(1, pos & 0xFFFF);

  001ac	e38330ff	 orr         r3, r3, #0xFF
  001b0	e1a04000	 mov         r4, r0
  001b4	e0041003	 and         r1, r4, r3
  001b8	e3a00001	 mov         r0, #1
  001bc	eb000000	 bl          WriteCSR

; 259  :     WriteCSR(2, pos >> 16);

  001c0	e1a01824	 mov         r1, r4, lsr #16
  001c4	e3a00002	 mov         r0, #2
  001c8	eb000000	 bl          WriteCSR

; 260  : 
; 261  :     // Mask everything
; 262  :     WriteCSR(3, 0x1F40); // Enable DXSUFLO to let it recover from underflow

  001cc	e3a01d7d	 mov         r1, #0x7D, 26
  001d0	e3a00003	 mov         r0, #3
  001d4	eb000000	 bl          WriteCSR
  001d8	e3a03c09	 mov         r3, #9, 24

; 263  :     WriteCSR(4, 0x0914);

  001dc	e3831014	 orr         r1, r3, #0x14
  001e0	e3a00004	 mov         r0, #4
  001e4	eb000000	 bl          WriteCSR

; 264  : 
; 265  :     // Start initialization
; 266  :     WriteCSR(0, 0x0001);

  001e8	e3a01001	 mov         r1, #1
  001ec	e3a00000	 mov         r0, #0
  001f0	eb000000	 bl          WriteCSR

; 267  : 
; 268  :     // Wait for initialization complete
; 269  :     while ((ReadCSR(0) & 0x0100) == 0) OALStall(10);

  001f4	ea000001	 b           |$LN40@HWInit|
  001f8		 |$LL6@HWInit|
  001f8	e3a0000a	 mov         r0, #0xA
  001fc	eb000000	 bl          OALStall
  00200		 |$LN40@HWInit|
  00200	e3a00000	 mov         r0, #0
  00204	eb000000	 bl          ReadCSR
  00208	e3100c01	 tst         r0, #1, 24
  0020c	0afffff9	 beq         |$LL6@HWInit|

; 270  : 
; 271  :     // Wait for link
; 272  :     OALMSGS(OAL_WARN, (L"Am79c973: Wait for link..."));

  00210	e59f4078	 ldr         r4, [pc, #0x78]
  00214	e5943440	 ldr         r3, [r4, #0x440]
  00218	e3130002	 tst         r3, #2
  0021c	159f0068	 ldrne       r0, [pc, #0x68]
  00220	1b000000	 blne        OALLogSerial
  00224		 |$LL4@HWInit|

; 273  :     // First we must be out of reset
; 274  :     while ((ReadPhy(0x1E, MAC_PHY_BMCR) & MAC_PHY_BMCR_RST) != 0);

  00224	e3a01000	 mov         r1, #0
  00228	e3a0001e	 mov         r0, #0x1E
  0022c	eb000000	 bl          ReadPhy
  00230	e3100902	 tst         r0, #2, 18
  00234	1afffffa	 bne         |$LL4@HWInit|

; 275  :     // Link status is lock low bit, so read it first time...
; 276  :     ReadPhy(0x1E, MAC_PHY_BMSR);

  00238	e3a01001	 mov         r1, #1
  0023c	e3a0001e	 mov         r0, #0x1E
  00240	eb000000	 bl          ReadPhy
  00244		 |$LL2@HWInit|

; 277  :     while ((ReadPhy(0x1E, MAC_PHY_BMSR) & MAC_PHY_BMSR_LINK) == 0);

  00244	e3a01001	 mov         r1, #1
  00248	e3a0001e	 mov         r0, #0x1E
  0024c	eb000000	 bl          ReadPhy
  00250	e3100004	 tst         r0, #4
  00254	0afffffa	 beq         |$LL2@HWInit|

; 278  :     OALMSGS(OAL_WARN, (L" Link detected\r\n"));

  00258	e5943440	 ldr         r3, [r4, #0x440]
  0025c	e3130002	 tst         r3, #2
  00260	159f0020	 ldrne       r0, [pc, #0x20]
  00264	1b000000	 blne        OALLogSerial

; 279  : 
; 280  :     // Wait for while...
; 281  :     OALStall(1000000);

  00268	e3890d09	 orr         r0, r9, #9, 26
  0026c	eb000000	 bl          OALStall

; 282  : 
; 283  :     // Enable Tx/Rx
; 284  :     WriteCSR(0, 0x0002);

  00270	e3a01002	 mov         r1, #2
  00274	e3a00000	 mov         r0, #0
  00278	eb000000	 bl          WriteCSR

; 285  : 
; 286  :     // Done
; 287  :     return TRUE;

  0027c	e3a00001	 mov         r0, #1

; 288  : }

  00280	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00284	e12fff1e	 bx          lr
  00288		 |$LN44@HWInit|
  00288		 |$LN45@HWInit|
  00288	00000000	 DCD         |??_C@_1CC@FCPIDOII@?$AA?5?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0028c		 |$LN46@HWInit|
  0028c	00000000	 DCD         |??_C@_1DG@OCDGALGD@?$AAA?$AAm?$AA7?$AA9?$AAc?$AA9?$AA7?$AA3?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAl?$AAi?$AAn?$AAk?$AA?4?$AA?4?$AA?4?$AA?$AA@|
  00290		 |$LN47@HWInit|
  00290	00000000	 DCD         |dpCurSettings|
  00294		 |$LN48@HWInit|
  00294	20500180	 DCD         0x20500180
  00298		 |$LN49@HWInit|
  00298	00000000	 DCD         |g_rxPos|
  0029c		 |$M43470|

			 ENDP  ; |HWInit|

	EXPORT	|AM79C973InitDMABuffer|
	EXPORT	|??_C@_1EE@IINMMICI@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@MMJNNGBB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAB?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@MJNPLCHG@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43497| DCD	|$LN13@AM79C973In|
	DCD	0x40002f01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@IINMMICI@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN@| DCB "-"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, "B", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@MMJNNGBB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAB?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, "B", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "B"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, "o", 0x0, " ", 0x0, "s", 0x0, "m"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@MJNPLCHG@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, "B", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AM79C973InitDMABuffer| PROC

; 293  : {

  00000		 |$LN13@AM79C973In|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M43494|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 294  :     BOOL rc = FALSE;
; 295  :     UINT32 offset, buffers;
; 296  : 
; 297  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 298  :         L"+AM79C973InitDMABuffer(0x%08x, 0x%08x)\r\n", address, size
; 299  :     ));

  0000c	e59f70a4	 ldr         r7, [pc, #0xA4]
  00010	e3a04000	 mov         r4, #0
  00014	e597e440	 ldr         lr, [r7, #0x440]
  00018	e31e0a02	 tst         lr, #2, 20
  0001c	0a000006	 beq         |$LN5@AM79C973In|
  00020	e31e0004	 tst         lr, #4
  00024	0a000004	 beq         |$LN5@AM79C973In|
  00028	e59f0084	 ldr         r0, [pc, #0x84]
  0002c	e1a02006	 mov         r2, r6
  00030	e1a01005	 mov         r1, r5
  00034	eb000000	 bl          OALLogSerial
  00038	e597e440	 ldr         lr, [r7, #0x440]
  0003c		 |$LN5@AM79C973In|

; 300  : 
; 301  :     // Buffers must be aligned to 32 bytes boundary
; 302  :     offset = address & 0x1F;

  0003c	e215201f	 ands        r2, r5, #0x1F

; 303  :     if (offset != 0) {
; 304  :         address = address + 0x20 - offset;

  00040	10453002	 subne       r3, r5, r2

; 305  :         size = size + 0x20 - offset;

  00044	12835020	 addne       r5, r3, #0x20
  00048	e3a03cda	 mov         r3, #0xDA, 24
  0004c	10462002	 subne       r2, r6, r2

; 306  :     }
; 307  : 
; 308  :     // Check if buffer is big enough to accomodate all
; 309  :     buffers = TX_BUFFERS + RX_BUFFERS;
; 310  :     if (size < ((BUFFER_SIZE + DESC_SIZE) * buffers + INIT_SIZE)) {

  00050	e3833060	 orr         r3, r3, #0x60
  00054	12826020	 addne       r6, r2, #0x20
  00058	e1560003	 cmp         r6, r3
  0005c	2a000005	 bcs         |$LN1@AM79C973In|

; 311  :         OALMSGS(OAL_ERROR, (
; 312  :             L"ERROR: AM79C973InitDMABuffer: Buffer too small\r\n"
; 313  :         ));

  00060	e31e0001	 tst         lr, #1
  00064	0a000007	 beq         |$cleanUp$43153|
  00068	e59f0040	 ldr         r0, [pc, #0x40]
  0006c	eb000000	 bl          OALLogSerial

; 314  :         goto cleanUp;

  00070	e597e440	 ldr         lr, [r7, #0x440]
  00074	ea000003	 b           |$cleanUp$43153|
  00078		 |$LN1@AM79C973In|

; 315  :     }
; 316  : 
; 317  :     // Store address and size
; 318  :     g_dmaAddress = (UINT32)OALCAtoUA(address);

  00078	e59f202c	 ldr         r2, [pc, #0x2C]
  0007c	e3853202	 orr         r3, r5, #2, 4

; 319  :     g_dmaSize = size;
; 320  : 
; 321  :     // Done
; 322  :     rc = TRUE;

  00080	e3a04001	 mov         r4, #1
  00084	e8820048	 stmia       r2, {r3, r6}
  00088		 |$cleanUp$43153|

; 323  : 
; 324  : cleanUp:    
; 325  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-AM79C973InitDMABuffer(rc = %d)\r\n", rc));

  00088	e31e0a02	 tst         lr, #2, 20
  0008c	131e0004	 tstne       lr, #4
  00090	159f0010	 ldrne       r0, [pc, #0x10]
  00094	11a01004	 movne       r1, r4
  00098	1b000000	 blne        OALLogSerial

; 326  :     return rc;
; 327  : }

  0009c	e1a00004	 mov         r0, r4
  000a0	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$LN14@AM79C973In|
  000a8		 |$LN15@AM79C973In|
  000a8	00000000	 DCD         |??_C@_1EE@IINMMICI@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN@|
  000ac		 |$LN16@AM79C973In|
  000ac	00000000	 DCD         |g_dmaAddress|
  000b0		 |$LN17@AM79C973In|
  000b0	00000000	 DCD         |??_C@_1GC@MMJNNGBB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAB?$AAu@|
  000b4		 |$LN18@AM79C973In|
  000b4	00000000	 DCD         |??_C@_1FC@MJNPLCHG@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@|
  000b8		 |$LN19@AM79C973In|
  000b8	00000000	 DCD         |dpCurSettings|
  000bc		 |$M43495|

			 ENDP  ; |AM79C973InitDMABuffer|

	EXPORT	|AM79C973Init|
	EXPORT	|??_C@_1DC@BMNNHAKF@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@LBLFNACI@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43520| DCD	|$LN10@AM79C973In@2|
	DCD	0x40002601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@BMNNHAKF@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@LBLFNACI@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AM79C973Init| PROC

; 332  : {

  00000		 |$LN10@AM79C973In@2|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M43517|
  00004	e1a05002	 mov         r5, r2
  00008	e1a07000	 mov         r7, r0

; 333  :     BOOL rc = FALSE;
; 334  : 
; 335  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 336  :         L"+AM79C973Init(0x%08x, 0x%08x, 0x%08x)\r\n", pAddress, offset, mac
; 337  :     ));

  0000c	e59f8080	 ldr         r8, [pc, #0x80]
  00010	e3a04000	 mov         r4, #0
  00014	e5983440	 ldr         r3, [r8, #0x440]
  00018	e3130a02	 tst         r3, #2, 20
  0001c	13130004	 tstne       r3, #4
  00020	159f0068	 ldrne       r0, [pc, #0x68]
  00024	11a02001	 movne       r2, r1
  00028	11a03005	 movne       r3, r5
  0002c	11a01007	 movne       r1, r7
  00030	1b000000	 blne        OALLogSerial

; 338  :    
; 339  :     g_base = (UINT32)pAddress;

  00034	e59f6050	 ldr         r6, [pc, #0x50]
  00038	e5867008	 str         r7, [r6, #8]

; 340  : 
; 341  :     if (!HWInit()) goto cleanUp;

  0003c	eb000000	 bl          HWInit
  00040	e3500000	 cmp         r0, #0

; 342  :     
; 343  :     // Set mac parameters 
; 344  :     mac[0] = g_pInit[1] & 0xFFFF;

  00044	15962000	 ldrne       r2, [r6]

; 345  :     mac[1] = g_pInit[1] >> 16;
; 346  :     mac[2] = g_pInit[2] & 0xFFFF;
; 347  : 
; 348  :     // Done
; 349  :     rc = TRUE;

  00048	13a04001	 movne       r4, #1
  0004c	15923004	 ldrne       r3, [r2, #4]
  00050	11c530b0	 strneh      r3, [r5]
  00054	11d230b6	 ldrneh      r3, [r2, #6]
  00058	11c530b2	 strneh      r3, [r5, #2]
  0005c	15923008	 ldrne       r3, [r2, #8]
  00060	11c530b4	 strneh      r3, [r5, #4]
  00064		 |$cleanUp$43171|

; 350  : 
; 351  : cleanUp:    
; 352  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-AM79C973Init(rc = %d)\r\n", rc));

  00064	e5983440	 ldr         r3, [r8, #0x440]
  00068	e3130a02	 tst         r3, #2, 20
  0006c	13130004	 tstne       r3, #4
  00070	159f0010	 ldrne       r0, [pc, #0x10]
  00074	11a01004	 movne       r1, r4
  00078	1b000000	 blne        OALLogSerial

; 353  :     return rc;
; 354  : }

  0007c	e1a00004	 mov         r0, r4
  00080	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN11@AM79C973In@2|
  00088		 |$LN12@AM79C973In@2|
  00088	00000000	 DCD         |??_C@_1DC@BMNNHAKF@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0008c		 |$LN13@AM79C973In@2|
  0008c	00000000	 DCD         |g_pInit|
  00090		 |$LN14@AM79C973In@2|
  00090	00000000	 DCD         |??_C@_1FA@LBLFNACI@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx@|
  00094		 |$LN15@AM79C973In@2|
  00094	00000000	 DCD         |dpCurSettings|
  00098		 |$M43518|

			 ENDP  ; |AM79C973Init|

	EXPORT	|AM79C973PowerOff|

  00000			 AREA	 |.pdata|, PDATA
|$T43537| DCD	|$LN11@AM79C973Po|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AM79C973PowerOff| PROC

; 359  : {

  00000		 |$LN11@AM79C973Po|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43534|

; 360  :     UINT32 exCtrl;
; 361  : 
; 362  :     // First we must go to suspend mode
; 363  :     exCtrl = ReadCSR(5);

  00004	e3a00005	 mov         r0, #5
  00008	eb000000	 bl          ReadCSR

; 364  :     exCtrl |= 0x0001;

  0000c	e3801001	 orr         r1, r0, #1

; 365  :     WriteCSR(5, exCtrl);

  00010	e3a00005	 mov         r0, #5
  00014	eb000000	 bl          WriteCSR

; 366  :     
; 367  :     // Wait until we get there
; 368  :     while ((ReadCSR(5) & 0x0001) == 0) OALStall(10);

  00018	ea000001	 b           |$LN8@AM79C973Po|
  0001c		 |$LL2@AM79C973Po|
  0001c	e3a0000a	 mov         r0, #0xA
  00020	eb000000	 bl          OALStall
  00024		 |$LN8@AM79C973Po|
  00024	e3a00005	 mov         r0, #5
  00028	eb000000	 bl          ReadCSR
  0002c	e3100001	 tst         r0, #1
  00030	0afffff9	 beq         |$LL2@AM79C973Po|

; 369  : 
; 370  :     // Res
; 371  : }

  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$M43535|

			 ENDP  ; |AM79C973PowerOff|

	EXPORT	|AM79C973PowerOn|

  00000			 AREA	 |.pdata|, PDATA
|$T43544| DCD	|$LN5@AM79C973Po@2|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AM79C973PowerOn| PROC

; 376  : {

  00000		 |$LN5@AM79C973Po@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43541|

; 377  :     HWInit();

  00004	eb000000	 bl          HWInit

; 378  : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M43542|

			 ENDP  ; |AM79C973PowerOn|

	EXPORT	|AM79C973SendFrame|
	EXPORT	|??_C@_1DM@MBGHOHIF@?$AA?9?$AAR?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@KFFOOLAP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAS?$AAe?$AAn?$AAd?$AA?5?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@PCPJMOOH@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	IMPORT	|OALGetTickCount|
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T43568| DCD	|$LN20@AM79C973Se|
	DCD	0x40004801

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@MBGHOHIF@?$AA?9?$AAR?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "R", 0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C"
	DCB	0x0, "9", 0x0, "7", 0x0, "3", 0x0, "S", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "F", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@KFFOOLAP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAS?$AAe?$AAn?$AAd?$AA?5?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "F", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@PCPJMOOH@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "F", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AM79C973SendFrame| PROC

; 383  : {

  00000		 |$LN20@AM79C973Se|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M43565|
  00004	e1a06001	 mov         r6, r1
  00008	e1a08000	 mov         r8, r0

; 384  :     UINT32 start;
; 385  :     volatile UINT32 *pos;
; 386  : 
; 387  :     OALMSGS(OAL_ETHER&&OAL_VERBOSE, (
; 388  :         L"+AM79C973SendFrame(0x%08x, %d)\r\n", pData, length
; 389  :     ));

  0000c	e59f4108	 ldr         r4, [pc, #0x108]
  00010	e5943440	 ldr         r3, [r4, #0x440]
  00014	e3130a02	 tst         r3, #2, 20
  00018	13130902	 tstne       r3, #2, 18
  0001c	159f00f4	 ldrne       r0, [pc, #0xF4]
  00020	11a02006	 movne       r2, r6
  00024	11a01008	 movne       r1, r8
  00028	1b000000	 blne        OALLogSerial

; 390  : 
; 391  :     // Check if packet fit to buffer    
; 392  :     if (length > BUFFER_SIZE) return 1;

  0002c	e3560c06	 cmp         r6, #6, 24
  00030	9a000002	 bls         |$LN5@AM79C973Se|

; 401  :             OALMSGS(OAL_ERROR, (L"ERROR: AM79C973SendFrame: Send timeout\r\n"));

  00034		 |$LN10@AM79C973Se|

; 390  : 
; 391  :     // Check if packet fit to buffer    
; 392  :     if (length > BUFFER_SIZE) return 1;

  00034	e3a00001	 mov         r0, #1

; 419  : }

  00038	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN5@AM79C973Se|

; 393  : 
; 394  :     // Wait until buffer is done
; 395  :     pos = (volatile UINT32*)&g_pTxRing[g_txPos << 2];

  00040	e59f50cc	 ldr         r5, [pc, #0xCC]
  00044	e5952000	 ldr         r2, [r5]
  00048	e5953010	 ldr         r3, [r5, #0x10]
  0004c	e0827203	 add         r7, r2, r3, lsl #4

; 396  : 
; 397  :     // Wait for transmit buffer available
; 398  :     start = OALGetTickCount();

  00050	eb000000	 bl          OALGetTickCount

; 399  :     while ((pos[1] & TMD1_OWN) != 0) {

  00054	e1a09000	 mov         r9, r0
  00058	ea000003	 b           |$LN17@AM79C973Se|
  0005c		 |$LL4@AM79C973Se|

; 400  :         if ((OALGetTickCount() - start) > 2000) {

  0005c	eb000000	 bl          OALGetTickCount
  00060	e0403009	 sub         r3, r0, r9
  00064	e3530e7d	 cmp         r3, #0x7D, 28
  00068	8a000021	 bhi         |$LN15@AM79C973Se|
  0006c		 |$LN17@AM79C973Se|
  0006c	e5973004	 ldr         r3, [r7, #4]
  00070	e3130102	 tst         r3, #2, 2
  00074	1afffff8	 bne         |$LL4@AM79C973Se|

; 403  :         }
; 404  :     }
; 405  : 
; 406  :     // Copy data to buffer
; 407  :     memcpy((VOID*)pos[3], pData, length);

  00078	e597000c	 ldr         r0, [r7, #0xC]
  0007c	e1a02006	 mov         r2, r6
  00080	e1a01008	 mov         r1, r8
  00084	eb000000	 bl          memcpy
  00088	e3a03483	 mov         r3, #0x83, 8

; 408  :     pos[0] = 0;
; 409  :     pos[1] = TMD1_OWN|TMD1_STP|TMD1_ENP|TMD1_ONES|(4096 - length);

  0008c	e3832a0f	 orr         r2, r3, #0xF, 20
  00090	e2663a01	 rsb         r3, r6, #1, 20
  00094	e3a01000	 mov         r1, #0
  00098	e1833002	 orr         r3, r3, r2
  0009c	e5871000	 str         r1, [r7]

; 410  : 
; 411  :     // Force controller to read tx descriptor
; 412  :     WriteCSR(0, (ReadCSR(0) & 0x0040) | 0x0008);

  000a0	e3a00000	 mov         r0, #0
  000a4	e5873004	 str         r3, [r7, #4]
  000a8	eb000000	 bl          ReadCSR
  000ac	e2003040	 and         r3, r0, #0x40
  000b0	e3831008	 orr         r1, r3, #8
  000b4	e3a00000	 mov         r0, #0
  000b8	eb000000	 bl          WriteCSR

; 413  : 
; 414  :     // Move to next possition
; 415  :     if (++g_txPos == TX_BUFFERS) g_txPos = 0;

  000bc	e5953010	 ldr         r3, [r5, #0x10]
  000c0	e2833001	 add         r3, r3, #1
  000c4	e3530004	 cmp         r3, #4
  000c8	e5853010	 str         r3, [r5, #0x10]
  000cc	03a03000	 moveq       r3, #0
  000d0	05853010	 streq       r3, [r5, #0x10]

; 416  : 
; 417  :     OALMSGS(OAL_ETHER&&OAL_VERBOSE, (L"-RAM79C973SendFrame(rc = 0)\r\n"));

  000d4	e5943440	 ldr         r3, [r4, #0x440]
  000d8	e3130a02	 tst         r3, #2, 20
  000dc	13130902	 tstne       r3, #2, 18
  000e0	159f0028	 ldrne       r0, [pc, #0x28]
  000e4	1b000000	 blne        OALLogSerial

; 418  :     return 0;

  000e8	e3a00000	 mov         r0, #0

; 419  : }

  000ec	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000f0	e12fff1e	 bx          lr
  000f4		 |$LN15@AM79C973Se|

; 401  :             OALMSGS(OAL_ERROR, (L"ERROR: AM79C973SendFrame: Send timeout\r\n"));

  000f4	e5943440	 ldr         r3, [r4, #0x440]
  000f8	e3130001	 tst         r3, #1
  000fc	0affffcc	 beq         |$LN10@AM79C973Se|
  00100	e59f0004	 ldr         r0, [pc, #4]
  00104	eb000000	 bl          OALLogSerial

; 402  :             return 1;

  00108	eaffffc9	 b           |$LN10@AM79C973Se|
  0010c		 |$LN21@AM79C973Se|
  0010c		 |$LN22@AM79C973Se|
  0010c	00000000	 DCD         |??_C@_1FC@KFFOOLAP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAS?$AAe?$AAn?$AAd?$AA?5?$AAt@|
  00110		 |$LN23@AM79C973Se|
  00110	00000000	 DCD         |??_C@_1DM@MBGHOHIF@?$AA?9?$AAR?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00114		 |$LN24@AM79C973Se|
  00114	00000000	 DCD         |g_pTxRing|
  00118		 |$LN25@AM79C973Se|
  00118	00000000	 DCD         |??_C@_1EC@PCPJMOOH@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@|
  0011c		 |$LN26@AM79C973Se|
  0011c	00000000	 DCD         |dpCurSettings|
  00120		 |$M43566|

			 ENDP  ; |AM79C973SendFrame|

	EXPORT	|AM79C973GetFrame|
	EXPORT	|??_C@_1EC@JNGDDHCD@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@DJBOIHGF@?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CF?$AAX?$AA?1?$AA?$CF?$AAX?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@CEHNLBBI@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43598| DCD	|$LN23@AM79C973Ge|
	DCD	0x40005e02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@JNGDDHCD@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@| DCB "-"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "F"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "l"
	DCB	0x0, "e", 0x0, "n", 0x0, "g", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@DJBOIHGF@?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CF?$AAX?$AA?1?$AA?$CF?$AAX?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| DCB "A"
	DCB	0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9", 0x0, "7"
	DCB	0x0, "3", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "F", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "%", 0x0, "X", 0x0, "/", 0x0, "%", 0x0, "X", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@CEHNLBBI@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "F"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AM79C973GetFrame| PROC

; 424  : {

  00000		 |$LN23@AM79C973Ge|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43595|
  00008	e1a07001	 mov         r7, r1
  0000c	e1a0a000	 mov         r10, r0

; 425  :     UINT32 rmd1, rmd2, length;
; 426  :     volatile UINT32 *pos;
; 427  : 
; 428  :     OALMSGS(OAL_ETHER&&OAL_VERBOSE, (
; 429  :         L"+AM79C973GetFrame(0x%08x, %d)\r\n", pData, *pLength
; 430  :     ));

  00010	e59f915c	 ldr         r9, [pc, #0x15C]
  00014	e5993440	 ldr         r3, [r9, #0x440]
  00018	e3130a02	 tst         r3, #2, 20
  0001c	13130902	 tstne       r3, #2, 18
  00020	11d720b0	 ldrneh      r2, [r7]
  00024	159f0144	 ldrne       r0, [pc, #0x144]
  00028	11a0100a	 movne       r1, r10
  0002c	1b000000	 blne        OALLogSerial

; 431  : 
; 432  :     pos = (volatile UINT32 *)&g_pRxRing[g_rxPos << 2];

  00030	e59f8134	 ldr         r8, [pc, #0x134]

; 433  :     length = 0;
; 434  : 
; 435  :     // Check if there is received frame 
; 436  :     if ((ReadCSR(0) & 0x0400) != 0) {

  00034	e3a00000	 mov         r0, #0
  00038	e3a04000	 mov         r4, #0
  0003c	e5982004	 ldr         r2, [r8, #4]
  00040	e5983000	 ldr         r3, [r8]
  00044	e0826203	 add         r6, r2, r3, lsl #4
  00048	eb000000	 bl          ReadCSR
  0004c	e3100b01	 tst         r0, #1, 22
  00050	0a000038	 beq         |$LN20@AM79C973Ge|

; 437  :         
; 438  :         // When packet is in buffer hardware doesn own descriptor
; 439  :         while (((rmd1 = pos[1]) & RMD1_OWN) == 0) {

  00054	e5961004	 ldr         r1, [r6, #4]
  00058	e3110102	 tst         r1, #2, 2
  0005c	1a000035	 bne         |$LN20@AM79C973Ge|
  00060	e3a03c0f	 mov         r3, #0xF, 24
  00064	e38330ff	 orr         r3, r3, #0xFF
  00068	e5985000	 ldr         r5, [r8]
  0006c	e3a02102	 mov         r2, #2, 2
  00070	e58d3000	 str         r3, [sp]
  00074	e382bcfa	 orr         r11, r2, #0xFA, 24
  00078		 |$LL8@AM79C973Ge|

; 440  :             rmd2 = pos[0];

  00078	e5962000	 ldr         r2, [r6]

; 441  :             // Is packet received ok?
; 442  :             length = rmd2 & 0x0FFF;

  0007c	e0024003	 and         r4, r2, r3

; 443  :             if (length > 4) length -= 4; 

  00080	e3540004	 cmp         r4, #4
  00084	82444004	 subhi       r4, r4, #4

; 444  :             if ((rmd1 & RMD1_ERR) == 0 && length < *pLength) {

  00088	e3110101	 tst         r1, #1, 2
  0008c	1a000007	 bne         |$LN5@AM79C973Ge|
  00090	e1d730b0	 ldrh        r3, [r7]
  00094	e1540003	 cmp         r4, r3
  00098	2a000004	 bcs         |$LN5@AM79C973Ge|

; 445  :                 // Copy packet if there is no problem
; 446  :                 memcpy(pData, (VOID*)pos[3], length);

  0009c	e596100c	 ldr         r1, [r6, #0xC]
  000a0	e1a02004	 mov         r2, r4
  000a4	e1a0000a	 mov         r0, r10
  000a8	eb000000	 bl          memcpy

; 447  :             } else {

  000ac	ea000007	 b           |$LN4@AM79C973Ge|
  000b0		 |$LN5@AM79C973Ge|

; 448  :                 OALMSGS(OAL_WARN, (
; 449  :                     L"AM79C973GetFrame - %X/%X %d\n", rmd1, rmd2, *pLength
; 450  :                 ));

  000b0	e5993440	 ldr         r3, [r9, #0x440]
  000b4	e3130002	 tst         r3, #2
  000b8	0a000003	 beq         |$LN14@AM79C973Ge|
  000bc	e1d730b0	 ldrh        r3, [r7]
  000c0	e59f00a0	 ldr         r0, [pc, #0xA0]
  000c4	eb000000	 bl          OALLogSerial
  000c8	e5985000	 ldr         r5, [r8]
  000cc		 |$LN14@AM79C973Ge|

; 451  :                 length = 0;

  000cc	e3a04000	 mov         r4, #0
  000d0		 |$LN4@AM79C973Ge|

; 452  :             }
; 453  :             // Reinitialize descriptor
; 454  :             pos[0] = 0;
; 455  :             pos[1] = RMD1_OWN | RMD1_ONES | (4096 - BUFFER_SIZE);
; 456  :             // Move to next possition
; 457  :             if (++g_rxPos == RX_BUFFERS) g_rxPos = 0;

  000d0	e3a03000	 mov         r3, #0
  000d4	e2855001	 add         r5, r5, #1
  000d8	e5863000	 str         r3, [r6]
  000dc	e5983004	 ldr         r3, [r8, #4]
  000e0	e3550020	 cmp         r5, #0x20
  000e4	e5885000	 str         r5, [r8]
  000e8	03a05000	 moveq       r5, #0
  000ec	e586b004	 str         r11, [r6, #4]

; 458  :             // Calculate position
; 459  :             pos = (volatile UINT32 *)&g_pRxRing[g_rxPos << 2];

  000f0	e0836205	 add         r6, r3, r5, lsl #4

; 460  :             // If this descriptor is owned by hardware clear interrupt
; 461  :             if ((pos[1] & RMD1_OWN) != 0) {

  000f4	e5963004	 ldr         r3, [r6, #4]
  000f8	05885000	 streq       r5, [r8]
  000fc	e3130102	 tst         r3, #2, 2
  00100	0a000006	 beq         |$LN2@AM79C973Ge|

; 462  :                 WriteCSR (0, (ReadCSR(0) & 0x0040) | 0x0400);

  00104	e3a00000	 mov         r0, #0
  00108	eb000000	 bl          ReadCSR
  0010c	e2003040	 and         r3, r0, #0x40
  00110	e3831b01	 orr         r1, r3, #1, 22
  00114	e3a00000	 mov         r0, #0
  00118	eb000000	 bl          WriteCSR
  0011c	e5985000	 ldr         r5, [r8]
  00120		 |$LN2@AM79C973Ge|

; 463  :             }         
; 464  :             // If we get a packet break loop
; 465  :             if (length > 0) break;

  00120	e3540000	 cmp         r4, #0
  00124	1a000003	 bne         |$LN20@AM79C973Ge|
  00128	e5961004	 ldr         r1, [r6, #4]
  0012c	e59d3000	 ldr         r3, [sp]
  00130	e3110102	 tst         r1, #2, 2
  00134	0affffcf	 beq         |$LL8@AM79C973Ge|
  00138		 |$LN20@AM79C973Ge|

; 466  :         }
; 467  : 
; 468  :     }
; 469  : 
; 470  :     // Return size
; 471  :     *pLength = (USHORT)length;

  00138	e1c740b0	 strh        r4, [r7]

; 472  : 
; 473  :     OALMSGS(OAL_ETHER&&OAL_VERBOSE, (
; 474  :         L"-AM79C973GetFrame(length = %d)\r\n", length
; 475  :     ));

  0013c	e5993440	 ldr         r3, [r9, #0x440]
  00140	e3130a02	 tst         r3, #2, 20
  00144	13130902	 tstne       r3, #2, 18
  00148	159f0014	 ldrne       r0, [pc, #0x14]
  0014c	11a01004	 movne       r1, r4
  00150	1b000000	 blne        OALLogSerial

; 476  :     return *pLength;

  00154	e1d700b0	 ldrh        r0, [r7]

; 477  : }

  00158	e28dd004	 add         sp, sp, #4
  0015c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00160	e12fff1e	 bx          lr
  00164		 |$LN24@AM79C973Ge|
  00164		 |$LN25@AM79C973Ge|
  00164	00000000	 DCD         |??_C@_1EC@JNGDDHCD@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@|
  00168		 |$LN26@AM79C973Ge|
  00168	00000000	 DCD         |??_C@_1DK@DJBOIHGF@?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CF?$AAX?$AA?1?$AA?$CF?$AAX?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@|
  0016c		 |$LN27@AM79C973Ge|
  0016c	00000000	 DCD         |g_rxPos|
  00170		 |$LN28@AM79C973Ge|
  00170	00000000	 DCD         |??_C@_1EA@CEHNLBBI@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00174		 |$LN29@AM79C973Ge|
  00174	00000000	 DCD         |dpCurSettings|
  00178		 |$M43596|

			 ENDP  ; |AM79C973GetFrame|

	EXPORT	|AM79C973EnableInts|
	EXPORT	|??_C@_1CM@OMHGDEHD@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@BAIGKFDP@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43615| DCD	|$LN9@AM79C973En|
	DCD	0x40001b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@OMHGDEHD@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@BAIGKFDP@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AM79C973EnableInts| PROC

; 482  : {

  00000		 |$LN9@AM79C973En|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43612|

; 483  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"+AM79C973EnableInts\r\n"));

  00004	e59f405c	 ldr         r4, [pc, #0x5C]
  00008	e5943440	 ldr         r3, [r4, #0x440]
  0000c	e3130a02	 tst         r3, #2, 20
  00010	13130004	 tstne       r3, #4
  00014	159f0048	 ldrne       r0, [pc, #0x48]
  00018	1b000000	 blne        OALLogSerial

; 484  :     WriteCSR(3, ReadCSR(3) & 0xFBFF);  // clear RINT mask

  0001c	e3a00003	 mov         r0, #3
  00020	eb000000	 bl          ReadCSR
  00024	e3a03cfb	 mov         r3, #0xFB, 24
  00028	e38330ff	 orr         r3, r3, #0xFF
  0002c	e0001003	 and         r1, r0, r3
  00030	e3a00003	 mov         r0, #3
  00034	eb000000	 bl          WriteCSR

; 485  :     WriteCSR(0, 0x40);

  00038	e3a01040	 mov         r1, #0x40
  0003c	e3a00000	 mov         r0, #0
  00040	eb000000	 bl          WriteCSR

; 486  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-AM79C973EnableInts\r\n"));

  00044	e5943440	 ldr         r3, [r4, #0x440]
  00048	e3130a02	 tst         r3, #2, 20
  0004c	13130004	 tstne       r3, #4
  00050	159f0008	 ldrne       r0, [pc, #8]
  00054	1b000000	 blne        OALLogSerial

; 487  : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN10@AM79C973En|
  00060		 |$LN11@AM79C973En|
  00060	00000000	 DCD         |??_C@_1CM@OMHGDEHD@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00064		 |$LN12@AM79C973En|
  00064	00000000	 DCD         |??_C@_1CM@BAIGKFDP@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00068		 |$LN13@AM79C973En|
  00068	00000000	 DCD         |dpCurSettings|
  0006c		 |$M43613|

			 ENDP  ; |AM79C973EnableInts|

	EXPORT	|AM79C973DisableInts|
	EXPORT	|??_C@_1CO@FFCGMOAC@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@IOOCJBCJ@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43630| DCD	|$LN9@AM79C973Di|
	DCD	0x40001401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@FFCGMOAC@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@IOOCJBCJ@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AM79C973DisableInts| PROC

; 492  : {

  00000		 |$LN9@AM79C973Di|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43627|

; 493  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"+AM79C973DisableInts\r\n"));

  00004	e59f4040	 ldr         r4, [pc, #0x40]
  00008	e5943440	 ldr         r3, [r4, #0x440]
  0000c	e3130a02	 tst         r3, #2, 20
  00010	13130004	 tstne       r3, #4
  00014	159f002c	 ldrne       r0, [pc, #0x2C]
  00018	1b000000	 blne        OALLogSerial

; 494  :     WriteCSR(0, 0);

  0001c	e3a01000	 mov         r1, #0
  00020	e3a00000	 mov         r0, #0
  00024	eb000000	 bl          WriteCSR

; 495  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-AM79C973DisableInts\r\n"));

  00028	e5943440	 ldr         r3, [r4, #0x440]
  0002c	e3130a02	 tst         r3, #2, 20
  00030	13130004	 tstne       r3, #4
  00034	159f0008	 ldrne       r0, [pc, #8]
  00038	1b000000	 blne        OALLogSerial

; 496  : }

  0003c	e8bd4010	 ldmia       sp!, {r4, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$LN10@AM79C973Di|
  00044		 |$LN11@AM79C973Di|
  00044	00000000	 DCD         |??_C@_1CO@FFCGMOAC@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00048		 |$LN12@AM79C973Di|
  00048	00000000	 DCD         |??_C@_1CO@IOOCJBCJ@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  0004c		 |$LN13@AM79C973Di|
  0004c	00000000	 DCD         |dpCurSettings|
  00050		 |$M43628|

			 ENDP  ; |AM79C973DisableInts|

	EXPORT	|AM79C973CurrentPacketFilter|
	EXPORT	|??_C@_1DO@BALBBIDN@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@KGFMCPEM@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43659| DCD	|$LN27@AM79C973Cu|
	DCD	0x40004e01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@BALBBIDN@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, "P", 0x0, "a", 0x0, "c"
	DCB	0x0, "k", 0x0, "e", 0x0, "t", 0x0, "F", 0x0, "i", 0x0, "l"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@KGFMCPEM@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, "P", 0x0, "a", 0x0, "c"
	DCB	0x0, "k", 0x0, "e", 0x0, "t", 0x0, "F", 0x0, "i", 0x0, "l"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AM79C973CurrentPacketFilter| PROC

; 501  : {

  00000		 |$LN27@AM79C973Cu|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43656|
  00004	e1a04000	 mov         r4, r0

; 502  :     UINT32 exCtrl, mode;
; 503  : 
; 504  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 505  :        L"+AM79C973CurrentPacketFilter(0x%08x)\r\n", filter
; 506  :     ));

  00008	e59f5124	 ldr         r5, [pc, #0x124]
  0000c	e5953440	 ldr         r3, [r5, #0x440]
  00010	e3130a02	 tst         r3, #2, 20
  00014	13130004	 tstne       r3, #4
  00018	159f0110	 ldrne       r0, [pc, #0x110]
  0001c	11a01004	 movne       r1, r4
  00020	1b000000	 blne        OALLogSerial

; 507  : 
; 508  :     // First we must go to suspend mode
; 509  :     exCtrl = ReadCSR(5);

  00024	e3a00005	 mov         r0, #5
  00028	eb000000	 bl          ReadCSR

; 510  :     exCtrl |= 0x0001;

  0002c	e3801001	 orr         r1, r0, #1

; 511  :     WriteCSR(5, exCtrl);

  00030	e3a00005	 mov         r0, #5
  00034	eb000000	 bl          WriteCSR

; 512  :     
; 513  :     // Wait until we get there
; 514  :     while ((ReadCSR(5) & 0x0001) == 0) OALStall(10);

  00038	ea000001	 b           |$LN21@AM79C973Cu|
  0003c		 |$LL9@AM79C973Cu|
  0003c	e3a0000a	 mov         r0, #0xA
  00040	eb000000	 bl          OALStall
  00044		 |$LN21@AM79C973Cu|
  00044	e3a00005	 mov         r0, #5
  00048	eb000000	 bl          ReadCSR
  0004c	e3100001	 tst         r0, #1
  00050	0afffff9	 beq         |$LL9@AM79C973Cu|

; 515  : 
; 516  :     // Just assume that we always receive direct & broadcast packets
; 517  :     if ((filter & PACKET_TYPE_ALL_MULTICAST) != 0) {

  00054	e3140004	 tst         r4, #4
  00058	0a00000b	 beq         |$LN7@AM79C973Cu|

; 518  :         WriteCSR(8, 0xFFFF);

  0005c	e3a06cff	 mov         r6, #0xFF, 24
  00060	e38610ff	 orr         r1, r6, #0xFF
  00064	e3a00008	 mov         r0, #8
  00068	eb000000	 bl          WriteCSR

; 519  :         WriteCSR(9, 0xFFFF);

  0006c	e38610ff	 orr         r1, r6, #0xFF
  00070	e3a00009	 mov         r0, #9
  00074	eb000000	 bl          WriteCSR

; 520  :         WriteCSR(10, 0xFFFF);

  00078	e38610ff	 orr         r1, r6, #0xFF
  0007c	e3a0000a	 mov         r0, #0xA
  00080	eb000000	 bl          WriteCSR

; 521  :         WriteCSR(11, 0xFFFF);

  00084	e38610ff	 orr         r1, r6, #0xFF
  00088	ea00000b	 b           |$LN22@AM79C973Cu|
  0008c		 |$LN7@AM79C973Cu|

; 522  :     } else if ((filter & PACKET_TYPE_MULTICAST) == 0) {

  0008c	e3140002	 tst         r4, #2
  00090	1a00000b	 bne         |$LN5@AM79C973Cu|

; 523  :         WriteCSR(8, 0);

  00094	e3a01000	 mov         r1, #0
  00098	e3a00008	 mov         r0, #8
  0009c	eb000000	 bl          WriteCSR

; 524  :         WriteCSR(9, 0);

  000a0	e3a01000	 mov         r1, #0
  000a4	e3a00009	 mov         r0, #9
  000a8	eb000000	 bl          WriteCSR

; 525  :         WriteCSR(10, 0);

  000ac	e3a01000	 mov         r1, #0
  000b0	e3a0000a	 mov         r0, #0xA
  000b4	eb000000	 bl          WriteCSR

; 526  :         WriteCSR(11, 0);

  000b8	e3a01000	 mov         r1, #0
  000bc		 |$LN22@AM79C973Cu|
  000bc	e3a0000b	 mov         r0, #0xB
  000c0	eb000000	 bl          WriteCSR
  000c4		 |$LN5@AM79C973Cu|

; 527  :     }
; 528  : 
; 529  :     mode = ReadCSR(15);

  000c4	e3a0000f	 mov         r0, #0xF
  000c8	eb000000	 bl          ReadCSR

; 530  :     if ((filter & PACKET_TYPE_PROMISCUOUS) != 0) {

  000cc	e3140020	 tst         r4, #0x20

; 531  :         mode |= MODE_PROM;

  000d0	13801902	 orrne       r1, r0, #2, 18

; 532  :     } else {
; 533  :         mode &= ~MODE_PROM;

  000d4	03c01902	 biceq       r1, r0, #2, 18

; 534  :     }
; 535  :     WriteCSR(15, mode);

  000d8	e3a0000f	 mov         r0, #0xF
  000dc	eb000000	 bl          WriteCSR

; 536  :     
; 537  :     // It is time to leave suspend mode
; 538  :     exCtrl = ReadCSR(5);

  000e0	e3a00005	 mov         r0, #5
  000e4	eb000000	 bl          ReadCSR

; 539  :     exCtrl &= ~0x0001;

  000e8	e3c01001	 bic         r1, r0, #1

; 540  :     WriteCSR(5, exCtrl);

  000ec	e3a00005	 mov         r0, #5
  000f0	eb000000	 bl          WriteCSR

; 541  : 
; 542  :     // Wait until we get there
; 543  :     while ((ReadCSR(5) & 0x0001) != 0) OALStall(10);

  000f4	ea000001	 b           |$LN24@AM79C973Cu|
  000f8		 |$LL2@AM79C973Cu|
  000f8	e3a0000a	 mov         r0, #0xA
  000fc	eb000000	 bl          OALStall
  00100		 |$LN24@AM79C973Cu|
  00100	e3a00005	 mov         r0, #5
  00104	eb000000	 bl          ReadCSR
  00108	e3100001	 tst         r0, #1
  0010c	1afffff9	 bne         |$LL2@AM79C973Cu|

; 544  : 
; 545  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-AM79C973CurrentPacketFilter\r\n"));

  00110	e5953440	 ldr         r3, [r5, #0x440]
  00114	e3130a02	 tst         r3, #2, 20
  00118	13130004	 tstne       r3, #4
  0011c	159f0008	 ldrne       r0, [pc, #8]
  00120	1b000000	 blne        OALLogSerial

; 546  : }

  00124	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00128	e12fff1e	 bx          lr
  0012c		 |$LN28@AM79C973Cu|
  0012c		 |$LN29@AM79C973Cu|
  0012c	00000000	 DCD         |??_C@_1DO@BALBBIDN@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00130		 |$LN30@AM79C973Cu|
  00130	00000000	 DCD         |??_C@_1EO@KGFMCPEM@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF@|
  00134		 |$LN31@AM79C973Cu|
  00134	00000000	 DCD         |dpCurSettings|
  00138		 |$M43657|

			 ENDP  ; |AM79C973CurrentPacketFilter|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|AM79C973MulticastList|
	EXPORT	|??_C@_1EC@OHGFHFHB@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@ODGCAAII@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T43732| DCD	|$LN46@AM79C973Mu|
	DCD	0xc0007802

  00000			 AREA	 |.xdata|, DATA
|$T43728| DCD	0xffffffdc

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@OHGFHFHB@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6@| DCB "-"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "s", 0x0, "t", 0x0, "L"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "1", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@ODGCAAII@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "s", 0x0, "t", 0x0, "L"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T43728|

  00008		 |AM79C973MulticastList| PROC

; 551  : {

  00008		 |$LN46@AM79C973Mu|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M43729|
  00010	e1a05001	 mov         r5, r1
  00014	e1a04000	 mov         r4, r0
  00018	e59f31c4	 ldr         r3, [pc, #0x1C4]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3008	 str         r3, [sp, #8]

; 552  :    ULONG exCtrl, crc;
; 553  :    ULONG i, j, bit;
; 554  :    USHORT h[4];
; 555  : 
; 556  :    OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 557  :        L"+AM79C973MulticastList(0x%08x, %d)\r\n", pAddresses, count
; 558  :    ));

  00024	e59fa1b4	 ldr         r10, [pc, #0x1B4]
  00028	e59a3440	 ldr         r3, [r10, #0x440]
  0002c	e3130a02	 tst         r3, #2, 20
  00030	13130004	 tstne       r3, #4
  00034	159f01a0	 ldrne       r0, [pc, #0x1A0]
  00038	11a02005	 movne       r2, r5
  0003c	11a01004	 movne       r1, r4
  00040	1b000000	 blne        OALLogSerial

; 559  : 
; 560  :    // Calculate hash bits       
; 561  :    h[0] = h[1] = h[2] = h[3] = 0;

  00044	e3a06000	 mov         r6, #0
  00048	e3a07000	 mov         r7, #0
  0004c	e3a08000	 mov         r8, #0
  00050	e3a09000	 mov         r9, #0
  00054	e1cd60b6	 strh        r6, [sp, #6]
  00058	e1cd70b4	 strh        r7, [sp, #4]
  0005c	e1cd80b2	 strh        r8, [sp, #2]
  00060	e1cd90b0	 strh        r9, [sp]

; 562  :    for (i = 0; i < count; i++) {

  00064	e3550000	 cmp         r5, #0
  00068	0a00002a	 beq         |$LN8@AM79C973Mu|
  0006c	e59f7164	 ldr         r7, [pc, #0x164]
  00070	e28d8000	 add         r8, sp, #0
  00074	e3a09001	 mov         r9, #1
  00078		 |$LL10@AM79C973Mu|

; 563  :       crc = HashAddress(pAddresses);

  00078	e3e00000	 mvn         r0, #0
  0007c	e3a01000	 mov         r1, #0
  00080		 |$LL23@AM79C973Mu|
  00080	e7d12004	 ldrb        r2, [r1, +r4]
  00084	e3a06008	 mov         r6, #8
  00088		 |$LL20@AM79C973Mu|
  00088	e3100102	 tst         r0, #2, 2
  0008c	13a0e001	 movne       lr, #1
  00090	03a0e000	 moveq       lr, #0
  00094	e2023001	 and         r3, r2, #1
  00098	e033e00e	 eors        lr, r3, lr
  0009c	e1a00080	 mov         r0, r0, lsl #1
  000a0	10203007	 eorne       r3, r0, r7
  000a4	e1a020a2	 mov         r2, r2, lsr #1
  000a8	1183000e	 orrne       r0, r3, lr
  000ac	e2566001	 subs        r6, r6, #1
  000b0	e20220ff	 and         r2, r2, #0xFF
  000b4	1afffff3	 bne         |$LL20@AM79C973Mu|
  000b8	e2811001	 add         r1, r1, #1
  000bc	e3510006	 cmp         r1, #6
  000c0	3affffee	 bcc         |$LL23@AM79C973Mu|

; 564  :       bit = 0;

  000c4	e3a0e000	 mov         lr, #0

; 565  :       for (j = 0; j < 6; j++) bit = (bit << 1) + ((crc >> j) & 0x01);

  000c8	e3a02000	 mov         r2, #0
  000cc		 |$LL7@AM79C973Mu|
  000cc	e1a03230	 mov         r3, r0, lsr r2
  000d0	e2822001	 add         r2, r2, #1
  000d4	e2033001	 and         r3, r3, #1
  000d8	e083e08e	 add         lr, r3, lr, lsl #1
  000dc	e3520006	 cmp         r2, #6
  000e0	3afffff9	 bcc         |$LL7@AM79C973Mu|

; 566  :       h[bit >> 4] |= 1 << (bit & 0x0F);

  000e4	e1a0322e	 mov         r3, lr, lsr #4
  000e8	e0881083	 add         r1, r8, r3, lsl #1
  000ec	e1d120b0	 ldrh        r2, [r1]
  000f0	e20e300f	 and         r3, lr, #0xF

; 567  :       pAddresses += ADDR_SIZE;

  000f4	e2844006	 add         r4, r4, #6
  000f8	e1823319	 orr         r3, r2, r9, lsl r3
  000fc	e2555001	 subs        r5, r5, #1
  00100	e1c130b0	 strh        r3, [r1]
  00104	1affffdb	 bne         |$LL10@AM79C973Mu|
  00108	e1dd60b6	 ldrh        r6, [sp, #6]
  0010c	e1dd70b4	 ldrh        r7, [sp, #4]
  00110	e1dd80b2	 ldrh        r8, [sp, #2]
  00114	e1dd90b0	 ldrh        r9, [sp]
  00118		 |$LN8@AM79C973Mu|

; 568  :    }
; 569  : 
; 570  :    // Go to suspend mode
; 571  :    exCtrl = ReadCSR(5);

  00118	e3a00005	 mov         r0, #5
  0011c	eb000000	 bl          ReadCSR

; 572  :    exCtrl |= 0x0001;

  00120	e3801001	 orr         r1, r0, #1

; 573  :    WriteCSR(5, exCtrl);

  00124	e3a00005	 mov         r0, #5
  00128	eb000000	 bl          WriteCSR

; 574  : 
; 575  :    // Wait until we get there
; 576  :    while ((ReadCSR(5) & 0x0001) == 0) OALStall(10);

  0012c	ea000001	 b           |$LN41@AM79C973Mu|
  00130		 |$LL4@AM79C973Mu|
  00130	e3a0000a	 mov         r0, #0xA
  00134	eb000000	 bl          OALStall
  00138		 |$LN41@AM79C973Mu|
  00138	e3a00005	 mov         r0, #5
  0013c	eb000000	 bl          ReadCSR
  00140	e3100001	 tst         r0, #1
  00144	0afffff9	 beq         |$LL4@AM79C973Mu|

; 577  : 
; 578  :    // And set hardware   
; 579  :    WriteCSR(8, h[0]);

  00148	e1a01009	 mov         r1, r9
  0014c	e3a00008	 mov         r0, #8
  00150	eb000000	 bl          WriteCSR

; 580  :    WriteCSR(9, h[1]);

  00154	e1a01008	 mov         r1, r8
  00158	e3a00009	 mov         r0, #9
  0015c	eb000000	 bl          WriteCSR

; 581  :    WriteCSR(10, h[2]);

  00160	e1a01007	 mov         r1, r7
  00164	e3a0000a	 mov         r0, #0xA
  00168	eb000000	 bl          WriteCSR

; 582  :    WriteCSR(11, h[3]);

  0016c	e1a01006	 mov         r1, r6
  00170	e3a0000b	 mov         r0, #0xB
  00174	eb000000	 bl          WriteCSR

; 583  : 
; 584  :    // Leave suspend mode
; 585  :    exCtrl = ReadCSR(5);

  00178	e3a00005	 mov         r0, #5
  0017c	eb000000	 bl          ReadCSR

; 586  :    exCtrl &= ~0x0001;

  00180	e3c01001	 bic         r1, r0, #1

; 587  :    WriteCSR(5, exCtrl);

  00184	e3a00005	 mov         r0, #5
  00188	eb000000	 bl          WriteCSR

; 588  : 
; 589  :    // Wait until we get there
; 590  :    while ((ReadCSR(5) & 0x0001) != 0) OALStall(10);

  0018c	ea000001	 b           |$LN43@AM79C973Mu|
  00190		 |$LL2@AM79C973Mu|
  00190	e3a0000a	 mov         r0, #0xA
  00194	eb000000	 bl          OALStall
  00198		 |$LN43@AM79C973Mu|
  00198	e3a00005	 mov         r0, #5
  0019c	eb000000	 bl          ReadCSR
  001a0	e3100001	 tst         r0, #1
  001a4	1afffff9	 bne         |$LL2@AM79C973Mu|

; 591  :    
; 592  :    OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-AM79C973MulticastList(rc = 1)\r\n"));

  001a8	e59a3440	 ldr         r3, [r10, #0x440]
  001ac	e3130a02	 tst         r3, #2, 20
  001b0	13130004	 tstne       r3, #4
  001b4	159f0018	 ldrne       r0, [pc, #0x18]
  001b8	1b000000	 blne        OALLogSerial

; 593  :    return TRUE;

  001bc	e59d0008	 ldr         r0, [sp, #8]
  001c0	eb000000	 bl          __security_check_cookie
  001c4	e3a00001	 mov         r0, #1

; 594  : }

  001c8	e28dd00c	 add         sp, sp, #0xC
  001cc	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  001d0	e12fff1e	 bx          lr
  001d4		 |$LN47@AM79C973Mu|
  001d4		 |$LN48@AM79C973Mu|
  001d4	00000000	 DCD         |??_C@_1EC@OHGFHFHB@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6@|
  001d8		 |$LN49@AM79C973Mu|
  001d8	04c11db6	 DCD         0x4c11db6
  001dc		 |$LN50@AM79C973Mu|
  001dc	00000000	 DCD         |??_C@_1EK@ODGCAAII@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF@|
  001e0		 |$LN51@AM79C973Mu|
  001e0	00000000	 DCD         |dpCurSettings|
  001e4		 |$LN52@AM79C973Mu|
  001e4	00000000	 DCD         |__security_cookie|
  001e8		 |$M43730|

			 ENDP  ; |AM79C973MulticastList|

	END
