; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\ETHDRV\AM79C973\am79c973.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|g_base| %	0x4
|g_dmaAddress| % 0x4
|g_dmaSize| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1EE@IINMMICI@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@MMJNNGBB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAB?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@MJNPLCHG@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|AM79C973InitDMABuffer|
	IMPORT	|OALLogSerial|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T43303| DCD	|$LN13@AM79C973In|
	DCD	0x40006104
; File c:\wince600\platform\common\src\common\ethdrv\am79c973\am79c973.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@IINMMICI@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN@| DCB "-"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, "B", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@MMJNNGBB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAB?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, "B", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "B"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, "o", 0x0, " ", 0x0, "s", 0x0, "m"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@MJNPLCHG@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, "B", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |AM79C973InitDMABuffer| PROC

; 293  : {

  00000		 |$LN13@AM79C973In|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M43300|

; 294  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 295  :     UINT32 offset, buffers;
; 296  : 
; 297  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 298  :         L"+AM79C973InitDMABuffer(0x%08x, 0x%08x)\r\n", address, size
; 299  :     ));

  00018	e59f3150	 ldr         r3, [pc, #0x150]
  0001c	e5933440	 ldr         r3, [r3, #0x440]
  00020	e3130a02	 tst         r3, #2, 20
  00024	0a00000a	 beq         |$LN5@AM79C973In|
  00028	e59f3140	 ldr         r3, [pc, #0x140]
  0002c	e5933440	 ldr         r3, [r3, #0x440]
  00030	e3130004	 tst         r3, #4
  00034	0a000006	 beq         |$LN5@AM79C973In|
  00038	e59d2028	 ldr         r2, [sp, #0x28]
  0003c	e59d1024	 ldr         r1, [sp, #0x24]
  00040	e59f0138	 ldr         r0, [pc, #0x138]
  00044	eb000000	 bl          OALLogSerial
  00048	e3a03001	 mov         r3, #1
  0004c	e58d3010	 str         r3, [sp, #0x10]
  00050	ea000001	 b           |$LN6@AM79C973In|
  00054		 |$LN5@AM79C973In|
  00054	e3a03000	 mov         r3, #0
  00058	e58d3010	 str         r3, [sp, #0x10]
  0005c		 |$LN6@AM79C973In|

; 300  : 
; 301  :     // Buffers must be aligned to 32 bytes boundary
; 302  :     offset = address & 0x1F;

  0005c	e59d3024	 ldr         r3, [sp, #0x24]
  00060	e203301f	 and         r3, r3, #0x1F
  00064	e58d3008	 str         r3, [sp, #8]

; 303  :     if (offset != 0) {

  00068	e59d3008	 ldr         r3, [sp, #8]
  0006c	e3530000	 cmp         r3, #0
  00070	0a000009	 beq         |$LN2@AM79C973In|

; 304  :         address = address + 0x20 - offset;

  00074	e59d3024	 ldr         r3, [sp, #0x24]
  00078	e2832020	 add         r2, r3, #0x20
  0007c	e59d3008	 ldr         r3, [sp, #8]
  00080	e0423003	 sub         r3, r2, r3
  00084	e58d3024	 str         r3, [sp, #0x24]

; 305  :         size = size + 0x20 - offset;

  00088	e59d3028	 ldr         r3, [sp, #0x28]
  0008c	e2832020	 add         r2, r3, #0x20
  00090	e59d3008	 ldr         r3, [sp, #8]
  00094	e0423003	 sub         r3, r2, r3
  00098	e58d3028	 str         r3, [sp, #0x28]
  0009c		 |$LN2@AM79C973In|

; 306  :     }
; 307  : 
; 308  :     // Check if buffer is big enough to accomodate all
; 309  :     buffers = TX_BUFFERS + RX_BUFFERS;

  0009c	e3a03024	 mov         r3, #0x24
  000a0	e58d3004	 str         r3, [sp, #4]

; 310  :     if (size < ((BUFFER_SIZE + DESC_SIZE) * buffers + INIT_SIZE)) {

  000a4	e59d2004	 ldr         r2, [sp, #4]
  000a8	e3a03e61	 mov         r3, #0x61, 28
  000ac	e0030392	 mul         r3, r2, r3
  000b0	e2832020	 add         r2, r3, #0x20
  000b4	e59d3028	 ldr         r3, [sp, #0x28]
  000b8	e1530002	 cmp         r3, r2
  000bc	2a00000b	 bcs         |$LN1@AM79C973In|

; 311  :         OALMSGS(OAL_ERROR, (
; 312  :             L"ERROR: AM79C973InitDMABuffer: Buffer too small\r\n"
; 313  :         ));

  000c0	e59f30a8	 ldr         r3, [pc, #0xA8]
  000c4	e5933440	 ldr         r3, [r3, #0x440]
  000c8	e3130001	 tst         r3, #1
  000cc	0a000004	 beq         |$LN7@AM79C973In|
  000d0	e59f00a4	 ldr         r0, [pc, #0xA4]
  000d4	eb000000	 bl          OALLogSerial
  000d8	e3a03001	 mov         r3, #1
  000dc	e58d3014	 str         r3, [sp, #0x14]
  000e0	ea000001	 b           |$LN8@AM79C973In|
  000e4		 |$LN7@AM79C973In|
  000e4	e3a03000	 mov         r3, #0
  000e8	e58d3014	 str         r3, [sp, #0x14]
  000ec		 |$LN8@AM79C973In|

; 314  :         goto cleanUp;

  000ec	ea000008	 b           |$cleanUp$43129|
  000f0		 |$LN1@AM79C973In|

; 315  :     }
; 316  : 
; 317  :     // Store address and size
; 318  :     g_dmaAddress = (UINT32)OALCAtoUA(address);

  000f0	e59d3024	 ldr         r3, [sp, #0x24]
  000f4	e3832202	 orr         r2, r3, #2, 4
  000f8	e59f3078	 ldr         r3, [pc, #0x78]
  000fc	e5832000	 str         r2, [r3]

; 319  :     g_dmaSize = size;

  00100	e59d2028	 ldr         r2, [sp, #0x28]
  00104	e59f3068	 ldr         r3, [pc, #0x68]
  00108	e5832000	 str         r2, [r3]

; 320  : 
; 321  :     // Done
; 322  :     rc = TRUE;

  0010c	e3a03001	 mov         r3, #1
  00110	e58d3000	 str         r3, [sp]
  00114		 |$cleanUp$43129|

; 323  : 
; 324  : cleanUp:    
; 325  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-AM79C973InitDMABuffer(rc = %d)\r\n", rc));

  00114	e59f3054	 ldr         r3, [pc, #0x54]
  00118	e5933440	 ldr         r3, [r3, #0x440]
  0011c	e3130a02	 tst         r3, #2, 20
  00120	0a000009	 beq         |$LN9@AM79C973In|
  00124	e59f3044	 ldr         r3, [pc, #0x44]
  00128	e5933440	 ldr         r3, [r3, #0x440]
  0012c	e3130004	 tst         r3, #4
  00130	0a000005	 beq         |$LN9@AM79C973In|
  00134	e59d1000	 ldr         r1, [sp]
  00138	e59f002c	 ldr         r0, [pc, #0x2C]
  0013c	eb000000	 bl          OALLogSerial
  00140	e3a03001	 mov         r3, #1
  00144	e58d3018	 str         r3, [sp, #0x18]
  00148	ea000001	 b           |$LN10@AM79C973In|
  0014c		 |$LN9@AM79C973In|
  0014c	e3a03000	 mov         r3, #0
  00150	e58d3018	 str         r3, [sp, #0x18]
  00154		 |$LN10@AM79C973In|

; 326  :     return rc;

  00154	e59d3000	 ldr         r3, [sp]
  00158	e58d300c	 str         r3, [sp, #0xC]

; 327  : }

  0015c	e59d000c	 ldr         r0, [sp, #0xC]
  00160	e28dd01c	 add         sp, sp, #0x1C
  00164	e89d6000	 ldmia       sp, {sp, lr}
  00168	e12fff1e	 bx          lr
  0016c		 |$LN14@AM79C973In|
  0016c		 |$LN15@AM79C973In|
  0016c	00000000	 DCD         |??_C@_1EE@IINMMICI@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN@|
  00170		 |$LN16@AM79C973In|
  00170	00000000	 DCD         |dpCurSettings|
  00174		 |$LN17@AM79C973In|
  00174	00000000	 DCD         |g_dmaSize|
  00178		 |$LN18@AM79C973In|
  00178	00000000	 DCD         |g_dmaAddress|
  0017c		 |$LN19@AM79C973In|
  0017c	00000000	 DCD         |??_C@_1GC@MMJNNGBB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAB?$AAu@|
  00180		 |$LN20@AM79C973In|
  00180	00000000	 DCD         |??_C@_1FC@MJNPLCHG@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@|
  00184		 |$M43301|

			 ENDP  ; |AM79C973InitDMABuffer|

	EXPORT	|??_C@_1DC@BMNNHAKF@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@LBLFNACI@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|AM79C973Init|

  0000c			 AREA	 |.bss|, NOINIT
|g_pInit| %	0x4

  00008			 AREA	 |.pdata|, PDATA
|$T43320| DCD	|$LN10@AM79C973In@2|
	DCD	0x40005f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@BMNNHAKF@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@LBLFNACI@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00184			 AREA	 |.text|, CODE, ARM

  00184		 |AM79C973Init| PROC

; 332  : {

  00184		 |$LN10@AM79C973In@2|
  00184	e1a0c00d	 mov         r12, sp
  00188	e92d0007	 stmdb       sp!, {r0 - r2}
  0018c	e92d5000	 stmdb       sp!, {r12, lr}
  00190	e24dd014	 sub         sp, sp, #0x14
  00194		 |$M43317|

; 333  :     BOOL rc = FALSE;

  00194	e3a03000	 mov         r3, #0
  00198	e58d3000	 str         r3, [sp]

; 334  : 
; 335  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 336  :         L"+AM79C973Init(0x%08x, 0x%08x, 0x%08x)\r\n", pAddress, offset, mac
; 337  :     ));

  0019c	e59f314c	 ldr         r3, [pc, #0x14C]
  001a0	e5933440	 ldr         r3, [r3, #0x440]
  001a4	e3130a02	 tst         r3, #2, 20
  001a8	0a00000b	 beq         |$LN4@AM79C973In@2|
  001ac	e59f313c	 ldr         r3, [pc, #0x13C]
  001b0	e5933440	 ldr         r3, [r3, #0x440]
  001b4	e3130004	 tst         r3, #4
  001b8	0a000007	 beq         |$LN4@AM79C973In@2|
  001bc	e59d3024	 ldr         r3, [sp, #0x24]
  001c0	e59d2020	 ldr         r2, [sp, #0x20]
  001c4	e59d101c	 ldr         r1, [sp, #0x1C]
  001c8	e59f012c	 ldr         r0, [pc, #0x12C]
  001cc	eb000000	 bl          OALLogSerial
  001d0	e3a03001	 mov         r3, #1
  001d4	e58d3008	 str         r3, [sp, #8]
  001d8	ea000001	 b           |$LN5@AM79C973In@2|
  001dc		 |$LN4@AM79C973In@2|
  001dc	e3a03000	 mov         r3, #0
  001e0	e58d3008	 str         r3, [sp, #8]
  001e4		 |$LN5@AM79C973In@2|

; 338  :    
; 339  :     g_base = (UINT32)pAddress;

  001e4	e59d201c	 ldr         r2, [sp, #0x1C]
  001e8	e59f3108	 ldr         r3, [pc, #0x108]
  001ec	e5832000	 str         r2, [r3]

; 340  : 
; 341  :     if (!HWInit()) goto cleanUp;

  001f0	eb000000	 bl          HWInit
  001f4	e58d000c	 str         r0, [sp, #0xC]
  001f8	e59d300c	 ldr         r3, [sp, #0xC]
  001fc	e3530000	 cmp         r3, #0
  00200	1a000000	 bne         |$LN1@AM79C973In@2|
  00204	ea000022	 b           |$cleanUp$43147|
  00208		 |$LN1@AM79C973In@2|

; 342  :     
; 343  :     // Set mac parameters 
; 344  :     mac[0] = g_pInit[1] & 0xFFFF;

  00208	e59f30e4	 ldr         r3, [pc, #0xE4]
  0020c	e5933000	 ldr         r3, [r3]
  00210	e2833004	 add         r3, r3, #4
  00214	e5932000	 ldr         r2, [r3]
  00218	e3a03cff	 mov         r3, #0xFF, 24
  0021c	e38330ff	 orr         r3, r3, #0xFF
  00220	e0023003	 and         r3, r2, r3
  00224	e1a02803	 mov         r2, r3, lsl #16
  00228	e1a02822	 mov         r2, r2, lsr #16
  0022c	e59d3024	 ldr         r3, [sp, #0x24]
  00230	e1c320b0	 strh        r2, [r3]

; 345  :     mac[1] = g_pInit[1] >> 16;

  00234	e59f30b8	 ldr         r3, [pc, #0xB8]
  00238	e5933000	 ldr         r3, [r3]
  0023c	e2833004	 add         r3, r3, #4
  00240	e5933000	 ldr         r3, [r3]
  00244	e1a01823	 mov         r1, r3, lsr #16
  00248	e59d3024	 ldr         r3, [sp, #0x24]
  0024c	e2832002	 add         r2, r3, #2
  00250	e1a03801	 mov         r3, r1, lsl #16
  00254	e1a03823	 mov         r3, r3, lsr #16
  00258	e1c230b0	 strh        r3, [r2]

; 346  :     mac[2] = g_pInit[2] & 0xFFFF;

  0025c	e59f3090	 ldr         r3, [pc, #0x90]
  00260	e5933000	 ldr         r3, [r3]
  00264	e2833008	 add         r3, r3, #8
  00268	e5932000	 ldr         r2, [r3]
  0026c	e3a03cff	 mov         r3, #0xFF, 24
  00270	e38330ff	 orr         r3, r3, #0xFF
  00274	e0021003	 and         r1, r2, r3
  00278	e59d3024	 ldr         r3, [sp, #0x24]
  0027c	e2832004	 add         r2, r3, #4
  00280	e1a03801	 mov         r3, r1, lsl #16
  00284	e1a03823	 mov         r3, r3, lsr #16
  00288	e1c230b0	 strh        r3, [r2]

; 347  : 
; 348  :     // Done
; 349  :     rc = TRUE;

  0028c	e3a03001	 mov         r3, #1
  00290	e58d3000	 str         r3, [sp]
  00294		 |$cleanUp$43147|

; 350  : 
; 351  : cleanUp:    
; 352  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-AM79C973Init(rc = %d)\r\n", rc));

  00294	e59f3054	 ldr         r3, [pc, #0x54]
  00298	e5933440	 ldr         r3, [r3, #0x440]
  0029c	e3130a02	 tst         r3, #2, 20
  002a0	0a000009	 beq         |$LN6@AM79C973In@2|
  002a4	e59f3044	 ldr         r3, [pc, #0x44]
  002a8	e5933440	 ldr         r3, [r3, #0x440]
  002ac	e3130004	 tst         r3, #4
  002b0	0a000005	 beq         |$LN6@AM79C973In@2|
  002b4	e59d1000	 ldr         r1, [sp]
  002b8	e59f002c	 ldr         r0, [pc, #0x2C]
  002bc	eb000000	 bl          OALLogSerial
  002c0	e3a03001	 mov         r3, #1
  002c4	e58d3010	 str         r3, [sp, #0x10]
  002c8	ea000001	 b           |$LN7@AM79C973In@2|
  002cc		 |$LN6@AM79C973In@2|
  002cc	e3a03000	 mov         r3, #0
  002d0	e58d3010	 str         r3, [sp, #0x10]
  002d4		 |$LN7@AM79C973In@2|

; 353  :     return rc;

  002d4	e59d3000	 ldr         r3, [sp]
  002d8	e58d3004	 str         r3, [sp, #4]

; 354  : }

  002dc	e59d0004	 ldr         r0, [sp, #4]
  002e0	e28dd014	 add         sp, sp, #0x14
  002e4	e89d6000	 ldmia       sp, {sp, lr}
  002e8	e12fff1e	 bx          lr
  002ec		 |$LN11@AM79C973In@2|
  002ec		 |$LN12@AM79C973In@2|
  002ec	00000000	 DCD         |??_C@_1DC@BMNNHAKF@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  002f0		 |$LN13@AM79C973In@2|
  002f0	00000000	 DCD         |dpCurSettings|
  002f4		 |$LN14@AM79C973In@2|
  002f4	00000000	 DCD         |g_pInit|
  002f8		 |$LN15@AM79C973In@2|
  002f8	00000000	 DCD         |g_base|
  002fc		 |$LN16@AM79C973In@2|
  002fc	00000000	 DCD         |??_C@_1FA@LBLFNACI@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx@|
  00300		 |$M43318|

			 ENDP  ; |AM79C973Init|

	EXPORT	|??_C@_1CC@FCPIDOII@?$AA?5?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@OCDGALGD@?$AAA?$AAm?$AA7?$AA9?$AAc?$AA9?$AA7?$AA3?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAl?$AAi?$AAn?$AAk?$AA?4?$AA?4?$AA?4?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALVAtoPA|
	IMPORT	|READ_REGISTER_ULONG|
	IMPORT	|WRITE_REGISTER_ULONG|
	IMPORT	|OALStall|

  00010			 AREA	 |.bss|, NOINIT
|g_txPos| %	0x4
|g_rxPos| %	0x4
|g_pTxBuffer| %	0x4
|g_pRxBuffer| %	0x4
|g_pTxRing| %	0x4
|g_pRxRing| %	0x4

  00010			 AREA	 |.pdata|, PDATA
|$T43336| DCD	|$LN21@HWInit|
	DCD	0x40015c02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@FCPIDOII@?$AA?5?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "L", 0x0, "i", 0x0, "n", 0x0, "k", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@OCDGALGD@?$AAA?$AAm?$AA7?$AA9?$AAc?$AA9?$AA7?$AA3?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAl?$AAi?$AAn?$AAk?$AA?4?$AA?4?$AA?4?$AA?$AA@| DCB "A"
	DCB	0x0, "m", 0x0, "7", 0x0, "9", 0x0, "c", 0x0, "9", 0x0, "7"
	DCB	0x0, "3", 0x0, ":", 0x0, " ", 0x0, "W", 0x0, "a", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "l", 0x0, "i", 0x0, "n", 0x0, "k", 0x0, ".", 0x0, "."
	DCB	0x0, ".", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00300			 AREA	 |.text|, CODE, ARM

  00300		 |HWInit| PROC

; 196  : {

  00300		 |$LN21@HWInit|
  00300	e52de004	 str         lr, [sp, #-4]!
  00304	e24dd038	 sub         sp, sp, #0x38
  00308		 |$M43333|

; 197  :     UINT32 i, pos;
; 198  : 
; 199  :     // Wait for while...
; 200  :     OALStall(1000000);

  00308	e3a0093d	 mov         r0, #0x3D, 18
  0030c	e3800d09	 orr         r0, r0, #9, 26
  00310	eb000000	 bl          OALStall

; 201  : 
; 202  :     // Switch to DWIO mode
; 203  :     OUTREG32((UINT32*)(g_base + RDP), 0);

  00314	e3a01000	 mov         r1, #0
  00318	e59f3544	 ldr         r3, [pc, #0x544]
  0031c	e5933000	 ldr         r3, [r3]
  00320	e2830010	 add         r0, r3, #0x10
  00324	eb000000	 bl          WRITE_REGISTER_ULONG

; 204  : 
; 205  :     // Reset    
; 206  :     INREG32((UINT32*)(g_base + RESET));

  00328	e59f3534	 ldr         r3, [pc, #0x534]
  0032c	e5933000	 ldr         r3, [r3]
  00330	e2830018	 add         r0, r3, #0x18
  00334	eb000000	 bl          READ_REGISTER_ULONG

; 207  :     
; 208  :     // Wait 2ms
; 209  :     OALStall(2000);

  00338	e3a00e7d	 mov         r0, #0x7D, 28
  0033c	eb000000	 bl          OALStall

; 210  :     
; 211  :     // Set software style to 3 (32bit software structure)
; 212  :     WriteBCR(20, 0x0503);

  00340	e3a01c05	 mov         r1, #5, 24
  00344	e3811003	 orr         r1, r1, #3
  00348	e3a00014	 mov         r0, #0x14
  0034c	eb000000	 bl          WriteBCR

; 213  : 
; 214  :     // Stop adapter
; 215  :     WriteCSR(0, 0x0004);

  00350	e3a01004	 mov         r1, #4
  00354	e3a00000	 mov         r0, #0
  00358	eb000000	 bl          WriteCSR

; 216  : 
; 217  :     // Divide DMA buffer
; 218  :     pos = g_dmaAddress;

  0035c	e59f3508	 ldr         r3, [pc, #0x508]
  00360	e5933000	 ldr         r3, [r3]
  00364	e58d3004	 str         r3, [sp, #4]

; 219  :     g_pInit = (UINT32*)pos;

  00368	e59d2004	 ldr         r2, [sp, #4]
  0036c	e59f34d4	 ldr         r3, [pc, #0x4D4]
  00370	e5832000	 str         r2, [r3]

; 220  :     pos += INIT_SIZE;

  00374	e59d3004	 ldr         r3, [sp, #4]
  00378	e2833020	 add         r3, r3, #0x20
  0037c	e58d3004	 str         r3, [sp, #4]

; 221  :     g_pRxRing = (UINT32*)pos;

  00380	e59d2004	 ldr         r2, [sp, #4]
  00384	e59f34d0	 ldr         r3, [pc, #0x4D0]
  00388	e5832000	 str         r2, [r3]

; 222  :     pos += RX_BUFFERS * DESC_SIZE;

  0038c	e59d3004	 ldr         r3, [sp, #4]
  00390	e2833c02	 add         r3, r3, #2, 24
  00394	e58d3004	 str         r3, [sp, #4]

; 223  :     g_pTxRing = (UINT32*)pos;

  00398	e59d2004	 ldr         r2, [sp, #4]
  0039c	e59f34ac	 ldr         r3, [pc, #0x4AC]
  003a0	e5832000	 str         r2, [r3]

; 224  :     pos += TX_BUFFERS * DESC_SIZE;

  003a4	e59d3004	 ldr         r3, [sp, #4]
  003a8	e2833040	 add         r3, r3, #0x40
  003ac	e58d3004	 str         r3, [sp, #4]

; 225  :     g_pRxBuffer = (UINT8*)pos;

  003b0	e59d2004	 ldr         r2, [sp, #4]
  003b4	e59f34a4	 ldr         r3, [pc, #0x4A4]
  003b8	e5832000	 str         r2, [r3]

; 226  :     pos += RX_BUFFERS * BUFFER_SIZE;

  003bc	e59d3004	 ldr         r3, [sp, #4]
  003c0	e2833903	 add         r3, r3, #3, 18
  003c4	e58d3004	 str         r3, [sp, #4]

; 227  :     g_pTxBuffer = (UINT8*)pos;

  003c8	e59d2004	 ldr         r2, [sp, #4]
  003cc	e59f3480	 ldr         r3, [pc, #0x480]
  003d0	e5832000	 str         r2, [r3]

; 228  : 
; 229  :     // Prepare initialization block
; 230  :     g_pInit[0] = 0x20500180;

  003d4	e59f346c	 ldr         r3, [pc, #0x46C]
  003d8	e5932000	 ldr         r2, [r3]
  003dc	e59f3484	 ldr         r3, [pc, #0x484]
  003e0	e5823000	 str         r3, [r2]

; 231  :     g_pInit[1] = INREG32((UINT32*)g_base);

  003e4	e59f3478	 ldr         r3, [pc, #0x478]
  003e8	e5930000	 ldr         r0, [r3]
  003ec	eb000000	 bl          READ_REGISTER_ULONG
  003f0	e58d000c	 str         r0, [sp, #0xC]
  003f4	e59f344c	 ldr         r3, [pc, #0x44C]
  003f8	e5933000	 ldr         r3, [r3]
  003fc	e2832004	 add         r2, r3, #4
  00400	e59d300c	 ldr         r3, [sp, #0xC]
  00404	e5823000	 str         r3, [r2]

; 232  :     g_pInit[2] = INREG32((UINT32*)(g_base + 4));

  00408	e59f3454	 ldr         r3, [pc, #0x454]
  0040c	e5933000	 ldr         r3, [r3]
  00410	e2830004	 add         r0, r3, #4
  00414	eb000000	 bl          READ_REGISTER_ULONG
  00418	e58d0010	 str         r0, [sp, #0x10]
  0041c	e59f3424	 ldr         r3, [pc, #0x424]
  00420	e5933000	 ldr         r3, [r3]
  00424	e2832008	 add         r2, r3, #8
  00428	e59d3010	 ldr         r3, [sp, #0x10]
  0042c	e5823000	 str         r3, [r2]

; 233  :     g_pInit[3] = 0;

  00430	e59f3410	 ldr         r3, [pc, #0x410]
  00434	e5933000	 ldr         r3, [r3]
  00438	e283200c	 add         r2, r3, #0xC
  0043c	e3a03000	 mov         r3, #0
  00440	e5823000	 str         r3, [r2]

; 234  :     g_pInit[4] = 0;

  00444	e59f33fc	 ldr         r3, [pc, #0x3FC]
  00448	e5933000	 ldr         r3, [r3]
  0044c	e2832010	 add         r2, r3, #0x10
  00450	e3a03000	 mov         r3, #0
  00454	e5823000	 str         r3, [r2]

; 235  :     g_pInit[5] = OALVAtoPA(g_pRxRing);

  00458	e59f33fc	 ldr         r3, [pc, #0x3FC]
  0045c	e5930000	 ldr         r0, [r3]
  00460	eb000000	 bl          OALVAtoPA
  00464	e58d0014	 str         r0, [sp, #0x14]
  00468	e59f33d8	 ldr         r3, [pc, #0x3D8]
  0046c	e5933000	 ldr         r3, [r3]
  00470	e2832014	 add         r2, r3, #0x14
  00474	e59d3014	 ldr         r3, [sp, #0x14]
  00478	e5823000	 str         r3, [r2]

; 236  :     g_pInit[6] = OALVAtoPA(g_pTxRing);

  0047c	e59f33cc	 ldr         r3, [pc, #0x3CC]
  00480	e5930000	 ldr         r0, [r3]
  00484	eb000000	 bl          OALVAtoPA
  00488	e58d0018	 str         r0, [sp, #0x18]
  0048c	e59f33b4	 ldr         r3, [pc, #0x3B4]
  00490	e5933000	 ldr         r3, [r3]
  00494	e2832018	 add         r2, r3, #0x18
  00498	e59d3018	 ldr         r3, [sp, #0x18]
  0049c	e5823000	 str         r3, [r2]

; 237  : 
; 238  :     // Initialize RX ring   
; 239  :     for (i = 0; i < RX_BUFFERS; i++) {

  004a0	e3a03000	 mov         r3, #0
  004a4	e58d3000	 str         r3, [sp]
  004a8	ea000002	 b           |$LN12@HWInit|
  004ac		 |$LN11@HWInit|
  004ac	e59d3000	 ldr         r3, [sp]
  004b0	e2833001	 add         r3, r3, #1
  004b4	e58d3000	 str         r3, [sp]
  004b8		 |$LN12@HWInit|
  004b8	e59d3000	 ldr         r3, [sp]
  004bc	e3530020	 cmp         r3, #0x20
  004c0	2a000039	 bcs         |$LN10@HWInit|

; 240  :         g_pRxRing[4 * i + 0] = 0;

  004c4	e59d2000	 ldr         r2, [sp]
  004c8	e3a03004	 mov         r3, #4
  004cc	e0010392	 mul         r1, r2, r3
  004d0	e3a03004	 mov         r3, #4
  004d4	e0020391	 mul         r2, r1, r3
  004d8	e59f337c	 ldr         r3, [pc, #0x37C]
  004dc	e5933000	 ldr         r3, [r3]
  004e0	e0832002	 add         r2, r3, r2
  004e4	e3a03000	 mov         r3, #0
  004e8	e5823000	 str         r3, [r2]

; 241  :         g_pRxRing[4 * i + 1] = RMD1_OWN | RMD1_ONES | (4096 - BUFFER_SIZE);

  004ec	e59d2000	 ldr         r2, [sp]
  004f0	e3a03004	 mov         r3, #4
  004f4	e0030392	 mul         r3, r2, r3
  004f8	e2831001	 add         r1, r3, #1
  004fc	e3a03004	 mov         r3, #4
  00500	e0020391	 mul         r2, r1, r3
  00504	e59f3350	 ldr         r3, [pc, #0x350]
  00508	e5933000	 ldr         r3, [r3]
  0050c	e0832002	 add         r2, r3, r2
  00510	e3a03102	 mov         r3, #2, 2
  00514	e3833cfa	 orr         r3, r3, #0xFA, 24
  00518	e5823000	 str         r3, [r2]

; 242  :         g_pRxRing[4 * i + 2] = OALVAtoPA(g_pRxBuffer + i * BUFFER_SIZE);

  0051c	e59d1000	 ldr         r1, [sp]
  00520	e3a03c06	 mov         r3, #6, 24
  00524	e0020391	 mul         r2, r1, r3
  00528	e59f3330	 ldr         r3, [pc, #0x330]
  0052c	e5933000	 ldr         r3, [r3]
  00530	e0830002	 add         r0, r3, r2
  00534	eb000000	 bl          OALVAtoPA
  00538	e58d001c	 str         r0, [sp, #0x1C]
  0053c	e59d2000	 ldr         r2, [sp]
  00540	e3a03004	 mov         r3, #4
  00544	e0030392	 mul         r3, r2, r3
  00548	e2831002	 add         r1, r3, #2
  0054c	e3a03004	 mov         r3, #4
  00550	e0020391	 mul         r2, r1, r3
  00554	e59f3300	 ldr         r3, [pc, #0x300]
  00558	e5933000	 ldr         r3, [r3]
  0055c	e0832002	 add         r2, r3, r2
  00560	e59d301c	 ldr         r3, [sp, #0x1C]
  00564	e5823000	 str         r3, [r2]

; 243  :         g_pRxRing[4 * i + 3] = (UINT32)(g_pRxBuffer + i * BUFFER_SIZE);

  00568	e59d1000	 ldr         r1, [sp]
  0056c	e3a03c06	 mov         r3, #6, 24
  00570	e0020391	 mul         r2, r1, r3
  00574	e59f32e4	 ldr         r3, [pc, #0x2E4]
  00578	e5933000	 ldr         r3, [r3]
  0057c	e0830002	 add         r0, r3, r2
  00580	e59d2000	 ldr         r2, [sp]
  00584	e3a03004	 mov         r3, #4
  00588	e0030392	 mul         r3, r2, r3
  0058c	e2831003	 add         r1, r3, #3
  00590	e3a03004	 mov         r3, #4
  00594	e0020391	 mul         r2, r1, r3
  00598	e59f32bc	 ldr         r3, [pc, #0x2BC]
  0059c	e5933000	 ldr         r3, [r3]
  005a0	e0833002	 add         r3, r3, r2
  005a4	e5830000	 str         r0, [r3]

; 244  :     }

  005a8	eaffffbf	 b           |$LN11@HWInit|
  005ac		 |$LN10@HWInit|

; 245  :     g_rxPos = 0;

  005ac	e59f22a4	 ldr         r2, [pc, #0x2A4]
  005b0	e3a03000	 mov         r3, #0
  005b4	e5823000	 str         r3, [r2]

; 246  :    
; 247  :     // Initialize TX ring   
; 248  :     for (i = 0; i < TX_BUFFERS; i++) {

  005b8	e3a03000	 mov         r3, #0
  005bc	e58d3000	 str         r3, [sp]
  005c0	ea000002	 b           |$LN9@HWInit|
  005c4		 |$LN8@HWInit|
  005c4	e59d3000	 ldr         r3, [sp]
  005c8	e2833001	 add         r3, r3, #1
  005cc	e58d3000	 str         r3, [sp]
  005d0		 |$LN9@HWInit|
  005d0	e59d3000	 ldr         r3, [sp]
  005d4	e3530004	 cmp         r3, #4
  005d8	2a000038	 bcs         |$LN7@HWInit|

; 249  :         g_pTxRing[4 * i + 0] = 0;

  005dc	e59d2000	 ldr         r2, [sp]
  005e0	e3a03004	 mov         r3, #4
  005e4	e0010392	 mul         r1, r2, r3
  005e8	e3a03004	 mov         r3, #4
  005ec	e0020391	 mul         r2, r1, r3
  005f0	e59f3258	 ldr         r3, [pc, #0x258]
  005f4	e5933000	 ldr         r3, [r3]
  005f8	e0832002	 add         r2, r3, r2
  005fc	e3a03000	 mov         r3, #0
  00600	e5823000	 str         r3, [r2]

; 250  :         g_pTxRing[4 * i + 1] = 0;

  00604	e59d2000	 ldr         r2, [sp]
  00608	e3a03004	 mov         r3, #4
  0060c	e0030392	 mul         r3, r2, r3
  00610	e2831001	 add         r1, r3, #1
  00614	e3a03004	 mov         r3, #4
  00618	e0020391	 mul         r2, r1, r3
  0061c	e59f322c	 ldr         r3, [pc, #0x22C]
  00620	e5933000	 ldr         r3, [r3]
  00624	e0832002	 add         r2, r3, r2
  00628	e3a03000	 mov         r3, #0
  0062c	e5823000	 str         r3, [r2]

; 251  :         g_pTxRing[4 * i + 2] = OALVAtoPA(g_pTxBuffer + i * BUFFER_SIZE);

  00630	e59d1000	 ldr         r1, [sp]
  00634	e3a03c06	 mov         r3, #6, 24
  00638	e0020391	 mul         r2, r1, r3
  0063c	e59f3210	 ldr         r3, [pc, #0x210]
  00640	e5933000	 ldr         r3, [r3]
  00644	e0830002	 add         r0, r3, r2
  00648	eb000000	 bl          OALVAtoPA
  0064c	e58d0020	 str         r0, [sp, #0x20]
  00650	e59d2000	 ldr         r2, [sp]
  00654	e3a03004	 mov         r3, #4
  00658	e0030392	 mul         r3, r2, r3
  0065c	e2831002	 add         r1, r3, #2
  00660	e3a03004	 mov         r3, #4
  00664	e0020391	 mul         r2, r1, r3
  00668	e59f31e0	 ldr         r3, [pc, #0x1E0]
  0066c	e5933000	 ldr         r3, [r3]
  00670	e0832002	 add         r2, r3, r2
  00674	e59d3020	 ldr         r3, [sp, #0x20]
  00678	e5823000	 str         r3, [r2]

; 252  :         g_pTxRing[4 * i + 3] = (UINT32)(g_pTxBuffer + i * BUFFER_SIZE);

  0067c	e59d1000	 ldr         r1, [sp]
  00680	e3a03c06	 mov         r3, #6, 24
  00684	e0020391	 mul         r2, r1, r3
  00688	e59f31c4	 ldr         r3, [pc, #0x1C4]
  0068c	e5933000	 ldr         r3, [r3]
  00690	e0830002	 add         r0, r3, r2
  00694	e59d2000	 ldr         r2, [sp]
  00698	e3a03004	 mov         r3, #4
  0069c	e0030392	 mul         r3, r2, r3
  006a0	e2831003	 add         r1, r3, #3
  006a4	e3a03004	 mov         r3, #4
  006a8	e0020391	 mul         r2, r1, r3
  006ac	e59f319c	 ldr         r3, [pc, #0x19C]
  006b0	e5933000	 ldr         r3, [r3]
  006b4	e0833002	 add         r3, r3, r2
  006b8	e5830000	 str         r0, [r3]

; 253  :     }

  006bc	eaffffc0	 b           |$LN8@HWInit|
  006c0		 |$LN7@HWInit|

; 254  :     g_txPos = 0;

  006c0	e59f2184	 ldr         r2, [pc, #0x184]
  006c4	e3a03000	 mov         r3, #0
  006c8	e5823000	 str         r3, [r2]

; 255  :    
; 256  :     // Set initialization block address
; 257  :     pos = OALVAtoPA(g_pInit);

  006cc	e59f3174	 ldr         r3, [pc, #0x174]
  006d0	e5930000	 ldr         r0, [r3]
  006d4	eb000000	 bl          OALVAtoPA
  006d8	e58d0024	 str         r0, [sp, #0x24]
  006dc	e59d3024	 ldr         r3, [sp, #0x24]
  006e0	e58d3004	 str         r3, [sp, #4]

; 258  :     WriteCSR(1, pos & 0xFFFF);

  006e4	e59d2004	 ldr         r2, [sp, #4]
  006e8	e3a03cff	 mov         r3, #0xFF, 24
  006ec	e38330ff	 orr         r3, r3, #0xFF
  006f0	e0021003	 and         r1, r2, r3
  006f4	e3a00001	 mov         r0, #1
  006f8	eb000000	 bl          WriteCSR

; 259  :     WriteCSR(2, pos >> 16);

  006fc	e59d3004	 ldr         r3, [sp, #4]
  00700	e1a01823	 mov         r1, r3, lsr #16
  00704	e3a00002	 mov         r0, #2
  00708	eb000000	 bl          WriteCSR

; 260  : 
; 261  :     // Mask everything
; 262  :     WriteCSR(3, 0x1F40); // Enable DXSUFLO to let it recover from underflow

  0070c	e3a01d7d	 mov         r1, #0x7D, 26
  00710	e3a00003	 mov         r0, #3
  00714	eb000000	 bl          WriteCSR

; 263  :     WriteCSR(4, 0x0914);

  00718	e3a01c09	 mov         r1, #9, 24
  0071c	e3811014	 orr         r1, r1, #0x14
  00720	e3a00004	 mov         r0, #4
  00724	eb000000	 bl          WriteCSR

; 264  : 
; 265  :     // Start initialization
; 266  :     WriteCSR(0, 0x0001);

  00728	e3a01001	 mov         r1, #1
  0072c	e3a00000	 mov         r0, #0
  00730	eb000000	 bl          WriteCSR
  00734		 |$LN6@HWInit|

; 267  : 
; 268  :     // Wait for initialization complete
; 269  :     while ((ReadCSR(0) & 0x0100) == 0) OALStall(10);

  00734	e3a00000	 mov         r0, #0
  00738	eb000000	 bl          ReadCSR
  0073c	e58d0028	 str         r0, [sp, #0x28]
  00740	e59d3028	 ldr         r3, [sp, #0x28]
  00744	e3130c01	 tst         r3, #1, 24
  00748	1a000002	 bne         |$LN5@HWInit|
  0074c	e3a0000a	 mov         r0, #0xA
  00750	eb000000	 bl          OALStall
  00754	eafffff6	 b           |$LN6@HWInit|
  00758		 |$LN5@HWInit|

; 270  : 
; 271  :     // Wait for link
; 272  :     OALMSGS(OAL_WARN, (L"Am79c973: Wait for link..."));

  00758	e59f30e0	 ldr         r3, [pc, #0xE0]
  0075c	e5933440	 ldr         r3, [r3, #0x440]
  00760	e3130002	 tst         r3, #2
  00764	0a000004	 beq         |$LN15@HWInit|
  00768	e59f00d4	 ldr         r0, [pc, #0xD4]
  0076c	eb000000	 bl          OALLogSerial
  00770	e3a03001	 mov         r3, #1
  00774	e58d302c	 str         r3, [sp, #0x2C]
  00778	ea000001	 b           |$LN16@HWInit|
  0077c		 |$LN15@HWInit|
  0077c	e3a03000	 mov         r3, #0
  00780	e58d302c	 str         r3, [sp, #0x2C]
  00784		 |$LN16@HWInit|
  00784		 |$LN4@HWInit|

; 273  :     // First we must be out of reset
; 274  :     while ((ReadPhy(0x1E, MAC_PHY_BMCR) & MAC_PHY_BMCR_RST) != 0);

  00784	e3a01000	 mov         r1, #0
  00788	e3a0001e	 mov         r0, #0x1E
  0078c	eb000000	 bl          ReadPhy
  00790	e1a03800	 mov         r3, r0, lsl #16
  00794	e1a03823	 mov         r3, r3, lsr #16
  00798	e1cd33b0	 strh        r3, [sp, #0x30]
  0079c	e1dd33b0	 ldrh        r3, [sp, #0x30]
  007a0	e3130902	 tst         r3, #2, 18
  007a4	0a000000	 beq         |$LN3@HWInit|
  007a8	eafffff5	 b           |$LN4@HWInit|
  007ac		 |$LN3@HWInit|

; 275  :     // Link status is lock low bit, so read it first time...
; 276  :     ReadPhy(0x1E, MAC_PHY_BMSR);

  007ac	e3a01001	 mov         r1, #1
  007b0	e3a0001e	 mov         r0, #0x1E
  007b4	eb000000	 bl          ReadPhy
  007b8		 |$LN2@HWInit|

; 277  :     while ((ReadPhy(0x1E, MAC_PHY_BMSR) & MAC_PHY_BMSR_LINK) == 0);

  007b8	e3a01001	 mov         r1, #1
  007bc	e3a0001e	 mov         r0, #0x1E
  007c0	eb000000	 bl          ReadPhy
  007c4	e1a03800	 mov         r3, r0, lsl #16
  007c8	e1a03823	 mov         r3, r3, lsr #16
  007cc	e1cd33b2	 strh        r3, [sp, #0x32]
  007d0	e1dd33b2	 ldrh        r3, [sp, #0x32]
  007d4	e3130004	 tst         r3, #4
  007d8	1a000000	 bne         |$LN1@HWInit|
  007dc	eafffff5	 b           |$LN2@HWInit|
  007e0		 |$LN1@HWInit|

; 278  :     OALMSGS(OAL_WARN, (L" Link detected\r\n"));

  007e0	e59f3058	 ldr         r3, [pc, #0x58]
  007e4	e5933440	 ldr         r3, [r3, #0x440]
  007e8	e3130002	 tst         r3, #2
  007ec	0a000004	 beq         |$LN17@HWInit|
  007f0	e59f0044	 ldr         r0, [pc, #0x44]
  007f4	eb000000	 bl          OALLogSerial
  007f8	e3a03001	 mov         r3, #1
  007fc	e58d3034	 str         r3, [sp, #0x34]
  00800	ea000001	 b           |$LN18@HWInit|
  00804		 |$LN17@HWInit|
  00804	e3a03000	 mov         r3, #0
  00808	e58d3034	 str         r3, [sp, #0x34]
  0080c		 |$LN18@HWInit|

; 279  : 
; 280  :     // Wait for while...
; 281  :     OALStall(1000000);

  0080c	e3a0093d	 mov         r0, #0x3D, 18
  00810	e3800d09	 orr         r0, r0, #9, 26
  00814	eb000000	 bl          OALStall

; 282  : 
; 283  :     // Enable Tx/Rx
; 284  :     WriteCSR(0, 0x0002);

  00818	e3a01002	 mov         r1, #2
  0081c	e3a00000	 mov         r0, #0
  00820	eb000000	 bl          WriteCSR

; 285  : 
; 286  :     // Done
; 287  :     return TRUE;

  00824	e3a03001	 mov         r3, #1
  00828	e58d3008	 str         r3, [sp, #8]

; 288  : }

  0082c	e59d0008	 ldr         r0, [sp, #8]
  00830	e28dd038	 add         sp, sp, #0x38
  00834	e49de004	 ldr         lr, [sp], #4
  00838	e12fff1e	 bx          lr
  0083c		 |$LN22@HWInit|
  0083c		 |$LN23@HWInit|
  0083c	00000000	 DCD         |??_C@_1CC@FCPIDOII@?$AA?5?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00840		 |$LN24@HWInit|
  00840	00000000	 DCD         |dpCurSettings|
  00844		 |$LN25@HWInit|
  00844	00000000	 DCD         |??_C@_1DG@OCDGALGD@?$AAA?$AAm?$AA7?$AA9?$AAc?$AA9?$AA7?$AA3?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAl?$AAi?$AAn?$AAk?$AA?4?$AA?4?$AA?4?$AA?$AA@|
  00848		 |$LN26@HWInit|
  00848	00000000	 DCD         |g_pInit|
  0084c		 |$LN27@HWInit|
  0084c	00000000	 DCD         |g_txPos|
  00850		 |$LN28@HWInit|
  00850	00000000	 DCD         |g_pTxRing|
  00854		 |$LN29@HWInit|
  00854	00000000	 DCD         |g_pTxBuffer|
  00858		 |$LN30@HWInit|
  00858	00000000	 DCD         |g_rxPos|
  0085c		 |$LN31@HWInit|
  0085c	00000000	 DCD         |g_pRxRing|
  00860		 |$LN32@HWInit|
  00860	00000000	 DCD         |g_pRxBuffer|
  00864		 |$LN33@HWInit|
  00864	00000000	 DCD         |g_base|
  00868		 |$LN34@HWInit|
  00868	20500180	 DCD         0x20500180
  0086c		 |$LN35@HWInit|
  0086c	00000000	 DCD         |g_dmaAddress|
  00870		 |$M43334|

			 ENDP  ; |HWInit|


  00018			 AREA	 |.pdata|, PDATA
|$T43356| DCD	|$LN5@ReadCSR|
	DCD	0x40001504
; Function compile flags: /Odtp

  00870			 AREA	 |.text|, CODE, ARM

  00870		 |ReadCSR| PROC

; 117  : {

  00870		 |$LN5@ReadCSR|
  00870	e1a0c00d	 mov         r12, sp
  00874	e92d0001	 stmdb       sp!, {r0}
  00878	e92d5000	 stmdb       sp!, {r12, lr}
  0087c	e24dd008	 sub         sp, sp, #8
  00880		 |$M43353|

; 118  :    OUTREG32((UINT32*)(g_base + RAP), address);

  00880	e59d1010	 ldr         r1, [sp, #0x10]
  00884	e59f3034	 ldr         r3, [pc, #0x34]
  00888	e5933000	 ldr         r3, [r3]
  0088c	e2830014	 add         r0, r3, #0x14
  00890	eb000000	 bl          WRITE_REGISTER_ULONG

; 119  :    return INREG32((UINT32*)(g_base + RDP));

  00894	e59f3024	 ldr         r3, [pc, #0x24]
  00898	e5933000	 ldr         r3, [r3]
  0089c	e2830010	 add         r0, r3, #0x10
  008a0	eb000000	 bl          READ_REGISTER_ULONG
  008a4	e58d0004	 str         r0, [sp, #4]
  008a8	e59d3004	 ldr         r3, [sp, #4]
  008ac	e58d3000	 str         r3, [sp]

; 120  : }

  008b0	e59d0000	 ldr         r0, [sp]
  008b4	e28dd008	 add         sp, sp, #8
  008b8	e89d6000	 ldmia       sp, {sp, lr}
  008bc	e12fff1e	 bx          lr
  008c0		 |$LN6@ReadCSR|
  008c0		 |$LN7@ReadCSR|
  008c0	00000000	 DCD         |g_base|
  008c4		 |$M43354|

			 ENDP  ; |ReadCSR|


  00020			 AREA	 |.pdata|, PDATA
|$T43363| DCD	|$LN5@WriteCSR|
	DCD	0x40001003
; Function compile flags: /Odtp

  008c4			 AREA	 |.text|, CODE, ARM

  008c4		 |WriteCSR| PROC

; 125  : {

  008c4		 |$LN5@WriteCSR|
  008c4	e1a0c00d	 mov         r12, sp
  008c8	e92d0003	 stmdb       sp!, {r0, r1}
  008cc	e92d5000	 stmdb       sp!, {r12, lr}
  008d0		 |$M43360|

; 126  :    OUTREG32((UINT32*)(g_base + RAP), address);

  008d0	e59d1008	 ldr         r1, [sp, #8]
  008d4	e59f3024	 ldr         r3, [pc, #0x24]
  008d8	e5933000	 ldr         r3, [r3]
  008dc	e2830014	 add         r0, r3, #0x14
  008e0	eb000000	 bl          WRITE_REGISTER_ULONG

; 127  :    OUTREG32((UINT32*)(g_base + RDP), data);

  008e4	e59d100c	 ldr         r1, [sp, #0xC]
  008e8	e59f3010	 ldr         r3, [pc, #0x10]
  008ec	e5933000	 ldr         r3, [r3]
  008f0	e2830010	 add         r0, r3, #0x10
  008f4	eb000000	 bl          WRITE_REGISTER_ULONG

; 128  : }

  008f8	e89d6000	 ldmia       sp, {sp, lr}
  008fc	e12fff1e	 bx          lr
  00900		 |$LN6@WriteCSR|
  00900		 |$LN7@WriteCSR|
  00900	00000000	 DCD         |g_base|
  00904		 |$M43361|

			 ENDP  ; |WriteCSR|


  00028			 AREA	 |.pdata|, PDATA
|$T43370| DCD	|$LN5@WriteBCR|
	DCD	0x40001003
; Function compile flags: /Odtp

  00904			 AREA	 |.text|, CODE, ARM

  00904		 |WriteBCR| PROC

; 141  : {

  00904		 |$LN5@WriteBCR|
  00904	e1a0c00d	 mov         r12, sp
  00908	e92d0003	 stmdb       sp!, {r0, r1}
  0090c	e92d5000	 stmdb       sp!, {r12, lr}
  00910		 |$M43367|

; 142  :    OUTREG32((UINT32*)(g_base + RAP), address);

  00910	e59d1008	 ldr         r1, [sp, #8]
  00914	e59f3024	 ldr         r3, [pc, #0x24]
  00918	e5933000	 ldr         r3, [r3]
  0091c	e2830014	 add         r0, r3, #0x14
  00920	eb000000	 bl          WRITE_REGISTER_ULONG

; 143  :    OUTREG32((UINT32*)(g_base + BDP), data);

  00924	e59d100c	 ldr         r1, [sp, #0xC]
  00928	e59f3010	 ldr         r3, [pc, #0x10]
  0092c	e5933000	 ldr         r3, [r3]
  00930	e283001c	 add         r0, r3, #0x1C
  00934	eb000000	 bl          WRITE_REGISTER_ULONG

; 144  : }

  00938	e89d6000	 ldmia       sp, {sp, lr}
  0093c	e12fff1e	 bx          lr
  00940		 |$LN6@WriteBCR|
  00940		 |$LN7@WriteBCR|
  00940	00000000	 DCD         |g_base|
  00944		 |$M43368|

			 ENDP  ; |WriteBCR|


  00030			 AREA	 |.pdata|, PDATA
|$T43378| DCD	|$LN5@ReadPhy|
	DCD	0x40002e04
; Function compile flags: /Odtp

  00944			 AREA	 |.text|, CODE, ARM

  00944		 |ReadPhy| PROC

; 149  : {

  00944		 |$LN5@ReadPhy|
  00944	e1a0c00d	 mov         r12, sp
  00948	e92d0003	 stmdb       sp!, {r0, r1}
  0094c	e92d5000	 stmdb       sp!, {r12, lr}
  00950	e24dd010	 sub         sp, sp, #0x10
  00954		 |$M43375|

; 150  :     UINT32 address;
; 151  :     
; 152  :     OUTREG32((UINT32*)(g_base + RAP), 33);

  00954	e3a01021	 mov         r1, #0x21
  00958	e59f3098	 ldr         r3, [pc, #0x98]
  0095c	e5933000	 ldr         r3, [r3]
  00960	e2830014	 add         r0, r3, #0x14
  00964	eb000000	 bl          WRITE_REGISTER_ULONG

; 153  :     address = INREG32((UINT32*)(g_base + BDP));

  00968	e59f3088	 ldr         r3, [pc, #0x88]
  0096c	e5933000	 ldr         r3, [r3]
  00970	e283001c	 add         r0, r3, #0x1C
  00974	eb000000	 bl          READ_REGISTER_ULONG
  00978	e58d0008	 str         r0, [sp, #8]
  0097c	e59d3008	 ldr         r3, [sp, #8]
  00980	e58d3000	 str         r3, [sp]

; 154  :     OUTREG32((UINT32*)(g_base + BDP), (UINT16)((id << 5)|(reg & 0x1F)));

  00984	e1dd31b8	 ldrh        r3, [sp, #0x18]
  00988	e1a02283	 mov         r2, r3, lsl #5
  0098c	e1dd31bc	 ldrh        r3, [sp, #0x1C]
  00990	e203301f	 and         r3, r3, #0x1F
  00994	e1823003	 orr         r3, r2, r3
  00998	e1a01803	 mov         r1, r3, lsl #16
  0099c	e1a01821	 mov         r1, r1, lsr #16
  009a0	e59f3050	 ldr         r3, [pc, #0x50]
  009a4	e5933000	 ldr         r3, [r3]
  009a8	e283001c	 add         r0, r3, #0x1C
  009ac	eb000000	 bl          WRITE_REGISTER_ULONG

; 155  :     OUTREG32((UINT32*)(g_base + RAP), 34);

  009b0	e3a01022	 mov         r1, #0x22
  009b4	e59f303c	 ldr         r3, [pc, #0x3C]
  009b8	e5933000	 ldr         r3, [r3]
  009bc	e2830014	 add         r0, r3, #0x14
  009c0	eb000000	 bl          WRITE_REGISTER_ULONG

; 156  :     return (UINT16)INREG32((UINT32*)(g_base + BDP));

  009c4	e59f302c	 ldr         r3, [pc, #0x2C]
  009c8	e5933000	 ldr         r3, [r3]
  009cc	e283001c	 add         r0, r3, #0x1C
  009d0	eb000000	 bl          READ_REGISTER_ULONG
  009d4	e58d000c	 str         r0, [sp, #0xC]
  009d8	e59d300c	 ldr         r3, [sp, #0xC]
  009dc	e1a03803	 mov         r3, r3, lsl #16
  009e0	e1a03823	 mov         r3, r3, lsr #16
  009e4	e1cd30b4	 strh        r3, [sp, #4]

; 157  : }

  009e8	e1dd00b4	 ldrh        r0, [sp, #4]
  009ec	e28dd010	 add         sp, sp, #0x10
  009f0	e89d6000	 ldmia       sp, {sp, lr}
  009f4	e12fff1e	 bx          lr
  009f8		 |$LN6@ReadPhy|
  009f8		 |$LN7@ReadPhy|
  009f8	00000000	 DCD         |g_base|
  009fc		 |$M43376|

			 ENDP  ; |ReadPhy|

	EXPORT	|AM79C973PowerOff|

  00038			 AREA	 |.pdata|, PDATA
|$T43385| DCD	|$LN7@AM79C973Po|
	DCD	0x40001902
; Function compile flags: /Odtp

  009fc			 AREA	 |.text|, CODE, ARM

  009fc		 |AM79C973PowerOff| PROC

; 359  : {

  009fc		 |$LN7@AM79C973Po|
  009fc	e52de004	 str         lr, [sp, #-4]!
  00a00	e24dd00c	 sub         sp, sp, #0xC
  00a04		 |$M43382|

; 360  :     UINT32 exCtrl;
; 361  : 
; 362  :     // First we must go to suspend mode
; 363  :     exCtrl = ReadCSR(5);

  00a04	e3a00005	 mov         r0, #5
  00a08	eb000000	 bl          ReadCSR
  00a0c	e58d0004	 str         r0, [sp, #4]
  00a10	e59d3004	 ldr         r3, [sp, #4]
  00a14	e58d3000	 str         r3, [sp]

; 364  :     exCtrl |= 0x0001;

  00a18	e59d3000	 ldr         r3, [sp]
  00a1c	e3833001	 orr         r3, r3, #1
  00a20	e58d3000	 str         r3, [sp]

; 365  :     WriteCSR(5, exCtrl);

  00a24	e59d1000	 ldr         r1, [sp]
  00a28	e3a00005	 mov         r0, #5
  00a2c	eb000000	 bl          WriteCSR
  00a30		 |$LN2@AM79C973Po|

; 366  :     
; 367  :     // Wait until we get there
; 368  :     while ((ReadCSR(5) & 0x0001) == 0) OALStall(10);

  00a30	e3a00005	 mov         r0, #5
  00a34	eb000000	 bl          ReadCSR
  00a38	e58d0008	 str         r0, [sp, #8]
  00a3c	e59d3008	 ldr         r3, [sp, #8]
  00a40	e3130001	 tst         r3, #1
  00a44	1a000002	 bne         |$LN1@AM79C973Po|
  00a48	e3a0000a	 mov         r0, #0xA
  00a4c	eb000000	 bl          OALStall
  00a50	eafffff6	 b           |$LN2@AM79C973Po|
  00a54		 |$LN1@AM79C973Po|

; 369  : 
; 370  :     // Res
; 371  : }

  00a54	e28dd00c	 add         sp, sp, #0xC
  00a58	e49de004	 ldr         lr, [sp], #4
  00a5c	e12fff1e	 bx          lr
  00a60		 |$M43383|

			 ENDP  ; |AM79C973PowerOff|

	EXPORT	|AM79C973PowerOn|

  00040			 AREA	 |.pdata|, PDATA
|$T43390| DCD	|$LN5@AM79C973Po@2|
	DCD	0x40000401
; Function compile flags: /Odtp

  00a60			 AREA	 |.text|, CODE, ARM

  00a60		 |AM79C973PowerOn| PROC

; 376  : {

  00a60		 |$LN5@AM79C973Po@2|
  00a60	e52de004	 str         lr, [sp, #-4]!
  00a64		 |$M43387|

; 377  :     HWInit();

  00a64	eb000000	 bl          HWInit

; 378  : }

  00a68	e49de004	 ldr         lr, [sp], #4
  00a6c	e12fff1e	 bx          lr
  00a70		 |$M43388|

			 ENDP  ; |AM79C973PowerOn|

	EXPORT	|??_C@_1DM@MBGHOHIF@?$AA?9?$AAR?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@KFFOOLAP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAS?$AAe?$AAn?$AAd?$AA?5?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@PCPJMOOH@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|AM79C973SendFrame|
	IMPORT	|memcpy|
	IMPORT	|OALGetTickCount|

  00048			 AREA	 |.pdata|, PDATA
|$T43402| DCD	|$LN16@AM79C973Se|
	DCD	0x40008304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@MBGHOHIF@?$AA?9?$AAR?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "R", 0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C"
	DCB	0x0, "9", 0x0, "7", 0x0, "3", 0x0, "S", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "F", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@KFFOOLAP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAS?$AAe?$AAn?$AAd?$AA?5?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "F", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@PCPJMOOH@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "F", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00a70			 AREA	 |.text|, CODE, ARM

  00a70		 |AM79C973SendFrame| PROC

; 383  : {

  00a70		 |$LN16@AM79C973Se|
  00a70	e1a0c00d	 mov         r12, sp
  00a74	e92d0003	 stmdb       sp!, {r0, r1}
  00a78	e92d5000	 stmdb       sp!, {r12, lr}
  00a7c	e24dd024	 sub         sp, sp, #0x24
  00a80		 |$M43399|

; 384  :     UINT32 start;
; 385  :     volatile UINT32 *pos;
; 386  : 
; 387  :     OALMSGS(OAL_ETHER&&OAL_VERBOSE, (
; 388  :         L"+AM79C973SendFrame(0x%08x, %d)\r\n", pData, length
; 389  :     ));

  00a80	e59f31e0	 ldr         r3, [pc, #0x1E0]
  00a84	e5933440	 ldr         r3, [r3, #0x440]
  00a88	e3130a02	 tst         r3, #2, 20
  00a8c	0a00000a	 beq         |$LN8@AM79C973Se|
  00a90	e59f31d0	 ldr         r3, [pc, #0x1D0]
  00a94	e5933440	 ldr         r3, [r3, #0x440]
  00a98	e3130902	 tst         r3, #2, 18
  00a9c	0a000006	 beq         |$LN8@AM79C973Se|
  00aa0	e59d2030	 ldr         r2, [sp, #0x30]
  00aa4	e59d102c	 ldr         r1, [sp, #0x2C]
  00aa8	e59f01c8	 ldr         r0, [pc, #0x1C8]
  00aac	eb000000	 bl          OALLogSerial
  00ab0	e3a03001	 mov         r3, #1
  00ab4	e58d300c	 str         r3, [sp, #0xC]
  00ab8	ea000001	 b           |$LN9@AM79C973Se|
  00abc		 |$LN8@AM79C973Se|
  00abc	e3a03000	 mov         r3, #0
  00ac0	e58d300c	 str         r3, [sp, #0xC]
  00ac4		 |$LN9@AM79C973Se|

; 390  : 
; 391  :     // Check if packet fit to buffer    
; 392  :     if (length > BUFFER_SIZE) return 1;

  00ac4	e59d3030	 ldr         r3, [sp, #0x30]
  00ac8	e3530c06	 cmp         r3, #6, 24
  00acc	9a000002	 bls         |$LN5@AM79C973Se|
  00ad0	e3a03001	 mov         r3, #1
  00ad4	e1cd30b8	 strh        r3, [sp, #8]
  00ad8	ea00005d	 b           |$LN6@AM79C973Se|
  00adc		 |$LN5@AM79C973Se|

; 393  : 
; 394  :     // Wait until buffer is done
; 395  :     pos = (volatile UINT32*)&g_pTxRing[g_txPos << 2];

  00adc	e59f3188	 ldr         r3, [pc, #0x188]
  00ae0	e5933000	 ldr         r3, [r3]
  00ae4	e1a01103	 mov         r1, r3, lsl #2
  00ae8	e3a03004	 mov         r3, #4
  00aec	e0020391	 mul         r2, r1, r3
  00af0	e59f317c	 ldr         r3, [pc, #0x17C]
  00af4	e5933000	 ldr         r3, [r3]
  00af8	e0833002	 add         r3, r3, r2
  00afc	e58d3004	 str         r3, [sp, #4]

; 396  : 
; 397  :     // Wait for transmit buffer available
; 398  :     start = OALGetTickCount();

  00b00	eb000000	 bl          OALGetTickCount
  00b04	e58d0010	 str         r0, [sp, #0x10]
  00b08	e59d3010	 ldr         r3, [sp, #0x10]
  00b0c	e58d3000	 str         r3, [sp]
  00b10		 |$LN4@AM79C973Se|

; 399  :     while ((pos[1] & TMD1_OWN) != 0) {

  00b10	e59d3004	 ldr         r3, [sp, #4]
  00b14	e2833004	 add         r3, r3, #4
  00b18	e5933000	 ldr         r3, [r3]
  00b1c	e3130102	 tst         r3, #2, 2
  00b20	0a000015	 beq         |$LN3@AM79C973Se|

; 400  :         if ((OALGetTickCount() - start) > 2000) {

  00b24	eb000000	 bl          OALGetTickCount
  00b28	e58d0014	 str         r0, [sp, #0x14]
  00b2c	e59d2014	 ldr         r2, [sp, #0x14]
  00b30	e59d3000	 ldr         r3, [sp]
  00b34	e0423003	 sub         r3, r2, r3
  00b38	e3530e7d	 cmp         r3, #0x7D, 28
  00b3c	9a00000d	 bls         |$LN2@AM79C973Se|

; 401  :             OALMSGS(OAL_ERROR, (L"ERROR: AM79C973SendFrame: Send timeout\r\n"));

  00b40	e59f3120	 ldr         r3, [pc, #0x120]
  00b44	e5933440	 ldr         r3, [r3, #0x440]
  00b48	e3130001	 tst         r3, #1
  00b4c	0a000004	 beq         |$LN10@AM79C973Se|
  00b50	e59f0118	 ldr         r0, [pc, #0x118]
  00b54	eb000000	 bl          OALLogSerial
  00b58	e3a03001	 mov         r3, #1
  00b5c	e58d3018	 str         r3, [sp, #0x18]
  00b60	ea000001	 b           |$LN11@AM79C973Se|
  00b64		 |$LN10@AM79C973Se|
  00b64	e3a03000	 mov         r3, #0
  00b68	e58d3018	 str         r3, [sp, #0x18]
  00b6c		 |$LN11@AM79C973Se|

; 402  :             return 1;

  00b6c	e3a03001	 mov         r3, #1
  00b70	e1cd30b8	 strh        r3, [sp, #8]
  00b74	ea000036	 b           |$LN6@AM79C973Se|
  00b78		 |$LN2@AM79C973Se|

; 403  :         }
; 404  :     }

  00b78	eaffffe4	 b           |$LN4@AM79C973Se|
  00b7c		 |$LN3@AM79C973Se|

; 405  : 
; 406  :     // Copy data to buffer
; 407  :     memcpy((VOID*)pos[3], pData, length);

  00b7c	e59d2030	 ldr         r2, [sp, #0x30]
  00b80	e59d102c	 ldr         r1, [sp, #0x2C]
  00b84	e59d3004	 ldr         r3, [sp, #4]
  00b88	e283300c	 add         r3, r3, #0xC
  00b8c	e5930000	 ldr         r0, [r3]
  00b90	eb000000	 bl          memcpy

; 408  :     pos[0] = 0;

  00b94	e59d2004	 ldr         r2, [sp, #4]
  00b98	e3a03000	 mov         r3, #0
  00b9c	e5823000	 str         r3, [r2]

; 409  :     pos[1] = TMD1_OWN|TMD1_STP|TMD1_ENP|TMD1_ONES|(4096 - length);

  00ba0	e59d3030	 ldr         r3, [sp, #0x30]
  00ba4	e2632a01	 rsb         r2, r3, #1, 20
  00ba8	e3a03483	 mov         r3, #0x83, 8
  00bac	e3833a0f	 orr         r3, r3, #0xF, 20
  00bb0	e1822003	 orr         r2, r2, r3
  00bb4	e59d3004	 ldr         r3, [sp, #4]
  00bb8	e2833004	 add         r3, r3, #4
  00bbc	e5832000	 str         r2, [r3]

; 410  : 
; 411  :     // Force controller to read tx descriptor
; 412  :     WriteCSR(0, (ReadCSR(0) & 0x0040) | 0x0008);

  00bc0	e3a00000	 mov         r0, #0
  00bc4	eb000000	 bl          ReadCSR
  00bc8	e58d001c	 str         r0, [sp, #0x1C]
  00bcc	e59d301c	 ldr         r3, [sp, #0x1C]
  00bd0	e2033040	 and         r3, r3, #0x40
  00bd4	e3831008	 orr         r1, r3, #8
  00bd8	e3a00000	 mov         r0, #0
  00bdc	eb000000	 bl          WriteCSR

; 413  : 
; 414  :     // Move to next possition
; 415  :     if (++g_txPos == TX_BUFFERS) g_txPos = 0;

  00be0	e59f3084	 ldr         r3, [pc, #0x84]
  00be4	e5933000	 ldr         r3, [r3]
  00be8	e2832001	 add         r2, r3, #1
  00bec	e59f3078	 ldr         r3, [pc, #0x78]
  00bf0	e5832000	 str         r2, [r3]
  00bf4	e59f3070	 ldr         r3, [pc, #0x70]
  00bf8	e5933000	 ldr         r3, [r3]
  00bfc	e3530004	 cmp         r3, #4
  00c00	1a000002	 bne         |$LN1@AM79C973Se|
  00c04	e59f2060	 ldr         r2, [pc, #0x60]
  00c08	e3a03000	 mov         r3, #0
  00c0c	e5823000	 str         r3, [r2]
  00c10		 |$LN1@AM79C973Se|

; 416  : 
; 417  :     OALMSGS(OAL_ETHER&&OAL_VERBOSE, (L"-RAM79C973SendFrame(rc = 0)\r\n"));

  00c10	e59f3050	 ldr         r3, [pc, #0x50]
  00c14	e5933440	 ldr         r3, [r3, #0x440]
  00c18	e3130a02	 tst         r3, #2, 20
  00c1c	0a000008	 beq         |$LN12@AM79C973Se|
  00c20	e59f3040	 ldr         r3, [pc, #0x40]
  00c24	e5933440	 ldr         r3, [r3, #0x440]
  00c28	e3130902	 tst         r3, #2, 18
  00c2c	0a000004	 beq         |$LN12@AM79C973Se|
  00c30	e59f002c	 ldr         r0, [pc, #0x2C]
  00c34	eb000000	 bl          OALLogSerial
  00c38	e3a03001	 mov         r3, #1
  00c3c	e58d3020	 str         r3, [sp, #0x20]
  00c40	ea000001	 b           |$LN13@AM79C973Se|
  00c44		 |$LN12@AM79C973Se|
  00c44	e3a03000	 mov         r3, #0
  00c48	e58d3020	 str         r3, [sp, #0x20]
  00c4c		 |$LN13@AM79C973Se|

; 418  :     return 0;

  00c4c	e3a03000	 mov         r3, #0
  00c50	e1cd30b8	 strh        r3, [sp, #8]
  00c54		 |$LN6@AM79C973Se|

; 419  : }

  00c54	e1dd00b8	 ldrh        r0, [sp, #8]
  00c58	e28dd024	 add         sp, sp, #0x24
  00c5c	e89d6000	 ldmia       sp, {sp, lr}
  00c60	e12fff1e	 bx          lr
  00c64		 |$LN17@AM79C973Se|
  00c64		 |$LN18@AM79C973Se|
  00c64	00000000	 DCD         |??_C@_1DM@MBGHOHIF@?$AA?9?$AAR?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00c68		 |$LN19@AM79C973Se|
  00c68	00000000	 DCD         |dpCurSettings|
  00c6c		 |$LN20@AM79C973Se|
  00c6c	00000000	 DCD         |g_txPos|
  00c70		 |$LN21@AM79C973Se|
  00c70	00000000	 DCD         |??_C@_1FC@KFFOOLAP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?3?$AA?5?$AAS?$AAe?$AAn?$AAd?$AA?5?$AAt@|
  00c74		 |$LN22@AM79C973Se|
  00c74	00000000	 DCD         |g_pTxRing|
  00c78		 |$LN23@AM79C973Se|
  00c78	00000000	 DCD         |??_C@_1EC@PCPJMOOH@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAS?$AAe?$AAn?$AAd?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@|
  00c7c		 |$M43400|

			 ENDP  ; |AM79C973SendFrame|

	EXPORT	|??_C@_1EC@JNGDDHCD@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@DJBOIHGF@?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CF?$AAX?$AA?1?$AA?$CF?$AAX?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@CEHNLBBI@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|AM79C973GetFrame|

  00050			 AREA	 |.pdata|, PDATA
|$T43421| DCD	|$LN20@AM79C973Ge|
	DCD	0x4000ad04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@JNGDDHCD@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@| DCB "-"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "F"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "l"
	DCB	0x0, "e", 0x0, "n", 0x0, "g", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@DJBOIHGF@?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CF?$AAX?$AA?1?$AA?$CF?$AAX?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| DCB "A"
	DCB	0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9", 0x0, "7"
	DCB	0x0, "3", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "F", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "%", 0x0, "X", 0x0, "/", 0x0, "%", 0x0, "X", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@CEHNLBBI@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "F"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00c7c			 AREA	 |.text|, CODE, ARM

  00c7c		 |AM79C973GetFrame| PROC

; 424  : {

  00c7c		 |$LN20@AM79C973Ge|
  00c7c	e1a0c00d	 mov         r12, sp
  00c80	e92d0003	 stmdb       sp!, {r0, r1}
  00c84	e92d5000	 stmdb       sp!, {r12, lr}
  00c88	e24dd028	 sub         sp, sp, #0x28
  00c8c		 |$M43418|

; 425  :     UINT32 rmd1, rmd2, length;
; 426  :     volatile UINT32 *pos;
; 427  : 
; 428  :     OALMSGS(OAL_ETHER&&OAL_VERBOSE, (
; 429  :         L"+AM79C973GetFrame(0x%08x, %d)\r\n", pData, *pLength
; 430  :     ));

  00c8c	e59f3288	 ldr         r3, [pc, #0x288]
  00c90	e5933440	 ldr         r3, [r3, #0x440]
  00c94	e3130a02	 tst         r3, #2, 20
  00c98	0a00000b	 beq         |$LN12@AM79C973Ge|
  00c9c	e59f3278	 ldr         r3, [pc, #0x278]
  00ca0	e5933440	 ldr         r3, [r3, #0x440]
  00ca4	e3130902	 tst         r3, #2, 18
  00ca8	0a000007	 beq         |$LN12@AM79C973Ge|
  00cac	e59d3034	 ldr         r3, [sp, #0x34]
  00cb0	e1d320b0	 ldrh        r2, [r3]
  00cb4	e59d1030	 ldr         r1, [sp, #0x30]
  00cb8	e59f026c	 ldr         r0, [pc, #0x26C]
  00cbc	eb000000	 bl          OALLogSerial
  00cc0	e3a03001	 mov         r3, #1
  00cc4	e58d3014	 str         r3, [sp, #0x14]
  00cc8	ea000001	 b           |$LN13@AM79C973Ge|
  00ccc		 |$LN12@AM79C973Ge|
  00ccc	e3a03000	 mov         r3, #0
  00cd0	e58d3014	 str         r3, [sp, #0x14]
  00cd4		 |$LN13@AM79C973Ge|

; 431  : 
; 432  :     pos = (volatile UINT32 *)&g_pRxRing[g_rxPos << 2];

  00cd4	e59f3248	 ldr         r3, [pc, #0x248]
  00cd8	e5933000	 ldr         r3, [r3]
  00cdc	e1a01103	 mov         r1, r3, lsl #2
  00ce0	e3a03004	 mov         r3, #4
  00ce4	e0020391	 mul         r2, r1, r3
  00ce8	e59f3230	 ldr         r3, [pc, #0x230]
  00cec	e5933000	 ldr         r3, [r3]
  00cf0	e0833002	 add         r3, r3, r2
  00cf4	e58d300c	 str         r3, [sp, #0xC]

; 433  :     length = 0;

  00cf8	e3a03000	 mov         r3, #0
  00cfc	e58d3000	 str         r3, [sp]

; 434  : 
; 435  :     // Check if there is received frame 
; 436  :     if ((ReadCSR(0) & 0x0400) != 0) {

  00d00	e3a00000	 mov         r0, #0
  00d04	eb000000	 bl          ReadCSR
  00d08	e58d0018	 str         r0, [sp, #0x18]
  00d0c	e59d3018	 ldr         r3, [sp, #0x18]
  00d10	e3130b01	 tst         r3, #1, 22
  00d14	0a000063	 beq         |$LN9@AM79C973Ge|
  00d18		 |$LN8@AM79C973Ge|

; 437  :         
; 438  :         // When packet is in buffer hardware doesn own descriptor
; 439  :         while (((rmd1 = pos[1]) & RMD1_OWN) == 0) {

  00d18	e59d300c	 ldr         r3, [sp, #0xC]
  00d1c	e2833004	 add         r3, r3, #4
  00d20	e5933000	 ldr         r3, [r3]
  00d24	e58d3004	 str         r3, [sp, #4]
  00d28	e59d3004	 ldr         r3, [sp, #4]
  00d2c	e3130102	 tst         r3, #2, 2
  00d30	1a00005c	 bne         |$LN7@AM79C973Ge|

; 440  :             rmd2 = pos[0];

  00d34	e59d300c	 ldr         r3, [sp, #0xC]
  00d38	e5933000	 ldr         r3, [r3]
  00d3c	e58d3008	 str         r3, [sp, #8]

; 441  :             // Is packet received ok?
; 442  :             length = rmd2 & 0x0FFF;

  00d40	e59d2008	 ldr         r2, [sp, #8]
  00d44	e3a03c0f	 mov         r3, #0xF, 24
  00d48	e38330ff	 orr         r3, r3, #0xFF
  00d4c	e0023003	 and         r3, r2, r3
  00d50	e58d3000	 str         r3, [sp]

; 443  :             if (length > 4) length -= 4; 

  00d54	e59d3000	 ldr         r3, [sp]
  00d58	e3530004	 cmp         r3, #4
  00d5c	9a000002	 bls         |$LN6@AM79C973Ge|
  00d60	e59d3000	 ldr         r3, [sp]
  00d64	e2433004	 sub         r3, r3, #4
  00d68	e58d3000	 str         r3, [sp]
  00d6c		 |$LN6@AM79C973Ge|

; 444  :             if ((rmd1 & RMD1_ERR) == 0 && length < *pLength) {

  00d6c	e59d3004	 ldr         r3, [sp, #4]
  00d70	e3130101	 tst         r3, #1, 2
  00d74	1a00000b	 bne         |$LN5@AM79C973Ge|
  00d78	e59d3034	 ldr         r3, [sp, #0x34]
  00d7c	e1d320b0	 ldrh        r2, [r3]
  00d80	e59d3000	 ldr         r3, [sp]
  00d84	e1530002	 cmp         r3, r2
  00d88	2a000006	 bcs         |$LN5@AM79C973Ge|

; 445  :                 // Copy packet if there is no problem
; 446  :                 memcpy(pData, (VOID*)pos[3], length);

  00d8c	e59d2000	 ldr         r2, [sp]
  00d90	e59d300c	 ldr         r3, [sp, #0xC]
  00d94	e283300c	 add         r3, r3, #0xC
  00d98	e5931000	 ldr         r1, [r3]
  00d9c	e59d0030	 ldr         r0, [sp, #0x30]
  00da0	eb000000	 bl          memcpy

; 447  :             } else {

  00da4	ea000010	 b           |$LN4@AM79C973Ge|
  00da8		 |$LN5@AM79C973Ge|

; 448  :                 OALMSGS(OAL_WARN, (
; 449  :                     L"AM79C973GetFrame - %X/%X %d\n", rmd1, rmd2, *pLength
; 450  :                 ));

  00da8	e59f316c	 ldr         r3, [pc, #0x16C]
  00dac	e5933440	 ldr         r3, [r3, #0x440]
  00db0	e3130002	 tst         r3, #2
  00db4	0a000008	 beq         |$LN14@AM79C973Ge|
  00db8	e59d3034	 ldr         r3, [sp, #0x34]
  00dbc	e1d330b0	 ldrh        r3, [r3]
  00dc0	e59d2008	 ldr         r2, [sp, #8]
  00dc4	e59d1004	 ldr         r1, [sp, #4]
  00dc8	e59f0158	 ldr         r0, [pc, #0x158]
  00dcc	eb000000	 bl          OALLogSerial
  00dd0	e3a03001	 mov         r3, #1
  00dd4	e58d301c	 str         r3, [sp, #0x1C]
  00dd8	ea000001	 b           |$LN15@AM79C973Ge|
  00ddc		 |$LN14@AM79C973Ge|
  00ddc	e3a03000	 mov         r3, #0
  00de0	e58d301c	 str         r3, [sp, #0x1C]
  00de4		 |$LN15@AM79C973Ge|

; 451  :                 length = 0;

  00de4	e3a03000	 mov         r3, #0
  00de8	e58d3000	 str         r3, [sp]
  00dec		 |$LN4@AM79C973Ge|

; 452  :             }
; 453  :             // Reinitialize descriptor
; 454  :             pos[0] = 0;

  00dec	e59d200c	 ldr         r2, [sp, #0xC]
  00df0	e3a03000	 mov         r3, #0
  00df4	e5823000	 str         r3, [r2]

; 455  :             pos[1] = RMD1_OWN | RMD1_ONES | (4096 - BUFFER_SIZE);

  00df8	e59d300c	 ldr         r3, [sp, #0xC]
  00dfc	e2832004	 add         r2, r3, #4
  00e00	e3a03102	 mov         r3, #2, 2
  00e04	e3833cfa	 orr         r3, r3, #0xFA, 24
  00e08	e5823000	 str         r3, [r2]

; 456  :             // Move to next possition
; 457  :             if (++g_rxPos == RX_BUFFERS) g_rxPos = 0;

  00e0c	e59f3110	 ldr         r3, [pc, #0x110]
  00e10	e5933000	 ldr         r3, [r3]
  00e14	e2832001	 add         r2, r3, #1
  00e18	e59f3104	 ldr         r3, [pc, #0x104]
  00e1c	e5832000	 str         r2, [r3]
  00e20	e59f30fc	 ldr         r3, [pc, #0xFC]
  00e24	e5933000	 ldr         r3, [r3]
  00e28	e3530020	 cmp         r3, #0x20
  00e2c	1a000002	 bne         |$LN3@AM79C973Ge|
  00e30	e59f20ec	 ldr         r2, [pc, #0xEC]
  00e34	e3a03000	 mov         r3, #0
  00e38	e5823000	 str         r3, [r2]
  00e3c		 |$LN3@AM79C973Ge|

; 458  :             // Calculate position
; 459  :             pos = (volatile UINT32 *)&g_pRxRing[g_rxPos << 2];

  00e3c	e59f30e0	 ldr         r3, [pc, #0xE0]
  00e40	e5933000	 ldr         r3, [r3]
  00e44	e1a01103	 mov         r1, r3, lsl #2
  00e48	e3a03004	 mov         r3, #4
  00e4c	e0020391	 mul         r2, r1, r3
  00e50	e59f30c8	 ldr         r3, [pc, #0xC8]
  00e54	e5933000	 ldr         r3, [r3]
  00e58	e0833002	 add         r3, r3, r2
  00e5c	e58d300c	 str         r3, [sp, #0xC]

; 460  :             // If this descriptor is owned by hardware clear interrupt
; 461  :             if ((pos[1] & RMD1_OWN) != 0) {

  00e60	e59d300c	 ldr         r3, [sp, #0xC]
  00e64	e2833004	 add         r3, r3, #4
  00e68	e5933000	 ldr         r3, [r3]
  00e6c	e3130102	 tst         r3, #2, 2
  00e70	0a000007	 beq         |$LN2@AM79C973Ge|

; 462  :                 WriteCSR (0, (ReadCSR(0) & 0x0040) | 0x0400);

  00e74	e3a00000	 mov         r0, #0
  00e78	eb000000	 bl          ReadCSR
  00e7c	e58d0020	 str         r0, [sp, #0x20]
  00e80	e59d3020	 ldr         r3, [sp, #0x20]
  00e84	e2033040	 and         r3, r3, #0x40
  00e88	e3831b01	 orr         r1, r3, #1, 22
  00e8c	e3a00000	 mov         r0, #0
  00e90	eb000000	 bl          WriteCSR
  00e94		 |$LN2@AM79C973Ge|

; 463  :             }         
; 464  :             // If we get a packet break loop
; 465  :             if (length > 0) break;

  00e94	e59d3000	 ldr         r3, [sp]
  00e98	e3530000	 cmp         r3, #0
  00e9c	9a000000	 bls         |$LN1@AM79C973Ge|
  00ea0	ea000000	 b           |$LN7@AM79C973Ge|
  00ea4		 |$LN1@AM79C973Ge|

; 466  :         }

  00ea4	eaffff9b	 b           |$LN8@AM79C973Ge|
  00ea8		 |$LN7@AM79C973Ge|
  00ea8		 |$LN9@AM79C973Ge|

; 467  : 
; 468  :     }
; 469  : 
; 470  :     // Return size
; 471  :     *pLength = (USHORT)length;

  00ea8	e59d3000	 ldr         r3, [sp]
  00eac	e1a02803	 mov         r2, r3, lsl #16
  00eb0	e1a02822	 mov         r2, r2, lsr #16
  00eb4	e59d3034	 ldr         r3, [sp, #0x34]
  00eb8	e1c320b0	 strh        r2, [r3]

; 472  : 
; 473  :     OALMSGS(OAL_ETHER&&OAL_VERBOSE, (
; 474  :         L"-AM79C973GetFrame(length = %d)\r\n", length
; 475  :     ));

  00ebc	e59f3058	 ldr         r3, [pc, #0x58]
  00ec0	e5933440	 ldr         r3, [r3, #0x440]
  00ec4	e3130a02	 tst         r3, #2, 20
  00ec8	0a000009	 beq         |$LN16@AM79C973Ge|
  00ecc	e59f3048	 ldr         r3, [pc, #0x48]
  00ed0	e5933440	 ldr         r3, [r3, #0x440]
  00ed4	e3130902	 tst         r3, #2, 18
  00ed8	0a000005	 beq         |$LN16@AM79C973Ge|
  00edc	e59d1000	 ldr         r1, [sp]
  00ee0	e59f0030	 ldr         r0, [pc, #0x30]
  00ee4	eb000000	 bl          OALLogSerial
  00ee8	e3a03001	 mov         r3, #1
  00eec	e58d3024	 str         r3, [sp, #0x24]
  00ef0	ea000001	 b           |$LN17@AM79C973Ge|
  00ef4		 |$LN16@AM79C973Ge|
  00ef4	e3a03000	 mov         r3, #0
  00ef8	e58d3024	 str         r3, [sp, #0x24]
  00efc		 |$LN17@AM79C973Ge|

; 476  :     return *pLength;

  00efc	e59d3034	 ldr         r3, [sp, #0x34]
  00f00	e1d330b0	 ldrh        r3, [r3]
  00f04	e1cd31b0	 strh        r3, [sp, #0x10]

; 477  : }

  00f08	e1dd01b0	 ldrh        r0, [sp, #0x10]
  00f0c	e28dd028	 add         sp, sp, #0x28
  00f10	e89d6000	 ldmia       sp, {sp, lr}
  00f14	e12fff1e	 bx          lr
  00f18		 |$LN21@AM79C973Ge|
  00f18		 |$LN22@AM79C973Ge|
  00f18	00000000	 DCD         |??_C@_1EC@JNGDDHCD@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6@|
  00f1c		 |$LN23@AM79C973Ge|
  00f1c	00000000	 DCD         |dpCurSettings|
  00f20		 |$LN24@AM79C973Ge|
  00f20	00000000	 DCD         |g_pRxRing|
  00f24		 |$LN25@AM79C973Ge|
  00f24	00000000	 DCD         |g_rxPos|
  00f28		 |$LN26@AM79C973Ge|
  00f28	00000000	 DCD         |??_C@_1DK@DJBOIHGF@?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CF?$AAX?$AA?1?$AA?$CF?$AAX?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@|
  00f2c		 |$LN27@AM79C973Ge|
  00f2c	00000000	 DCD         |??_C@_1EA@CEHNLBBI@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAG?$AAe?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00f30		 |$M43419|

			 ENDP  ; |AM79C973GetFrame|

	EXPORT	|??_C@_1CM@OMHGDEHD@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@BAIGKFDP@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|AM79C973EnableInts|

  00058			 AREA	 |.pdata|, PDATA
|$T43437| DCD	|$LN9@AM79C973En|
	DCD	0x40003202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@OMHGDEHD@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@BAIGKFDP@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00f30			 AREA	 |.text|, CODE, ARM

  00f30		 |AM79C973EnableInts| PROC

; 482  : {

  00f30		 |$LN9@AM79C973En|
  00f30	e52de004	 str         lr, [sp, #-4]!
  00f34	e24dd00c	 sub         sp, sp, #0xC
  00f38		 |$M43434|

; 483  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"+AM79C973EnableInts\r\n"));

  00f38	e59f30b0	 ldr         r3, [pc, #0xB0]
  00f3c	e5933440	 ldr         r3, [r3, #0x440]
  00f40	e3130a02	 tst         r3, #2, 20
  00f44	0a000008	 beq         |$LN3@AM79C973En|
  00f48	e59f30a0	 ldr         r3, [pc, #0xA0]
  00f4c	e5933440	 ldr         r3, [r3, #0x440]
  00f50	e3130004	 tst         r3, #4
  00f54	0a000004	 beq         |$LN3@AM79C973En|
  00f58	e59f0094	 ldr         r0, [pc, #0x94]
  00f5c	eb000000	 bl          OALLogSerial
  00f60	e3a03001	 mov         r3, #1
  00f64	e58d3000	 str         r3, [sp]
  00f68	ea000001	 b           |$LN4@AM79C973En|
  00f6c		 |$LN3@AM79C973En|
  00f6c	e3a03000	 mov         r3, #0
  00f70	e58d3000	 str         r3, [sp]
  00f74		 |$LN4@AM79C973En|

; 484  :     WriteCSR(3, ReadCSR(3) & 0xFBFF);  // clear RINT mask

  00f74	e3a00003	 mov         r0, #3
  00f78	eb000000	 bl          ReadCSR
  00f7c	e58d0004	 str         r0, [sp, #4]
  00f80	e59d2004	 ldr         r2, [sp, #4]
  00f84	e3a03cfb	 mov         r3, #0xFB, 24
  00f88	e38330ff	 orr         r3, r3, #0xFF
  00f8c	e0021003	 and         r1, r2, r3
  00f90	e3a00003	 mov         r0, #3
  00f94	eb000000	 bl          WriteCSR

; 485  :     WriteCSR(0, 0x40);

  00f98	e3a01040	 mov         r1, #0x40
  00f9c	e3a00000	 mov         r0, #0
  00fa0	eb000000	 bl          WriteCSR

; 486  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-AM79C973EnableInts\r\n"));

  00fa4	e59f3044	 ldr         r3, [pc, #0x44]
  00fa8	e5933440	 ldr         r3, [r3, #0x440]
  00fac	e3130a02	 tst         r3, #2, 20
  00fb0	0a000008	 beq         |$LN5@AM79C973En|
  00fb4	e59f3034	 ldr         r3, [pc, #0x34]
  00fb8	e5933440	 ldr         r3, [r3, #0x440]
  00fbc	e3130004	 tst         r3, #4
  00fc0	0a000004	 beq         |$LN5@AM79C973En|
  00fc4	e59f0020	 ldr         r0, [pc, #0x20]
  00fc8	eb000000	 bl          OALLogSerial
  00fcc	e3a03001	 mov         r3, #1
  00fd0	e58d3008	 str         r3, [sp, #8]
  00fd4	ea000001	 b           |$LN6@AM79C973En|
  00fd8		 |$LN5@AM79C973En|
  00fd8	e3a03000	 mov         r3, #0
  00fdc	e58d3008	 str         r3, [sp, #8]
  00fe0		 |$LN6@AM79C973En|

; 487  : }

  00fe0	e28dd00c	 add         sp, sp, #0xC
  00fe4	e49de004	 ldr         lr, [sp], #4
  00fe8	e12fff1e	 bx          lr
  00fec		 |$LN10@AM79C973En|
  00fec		 |$LN11@AM79C973En|
  00fec	00000000	 DCD         |??_C@_1CM@OMHGDEHD@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00ff0		 |$LN12@AM79C973En|
  00ff0	00000000	 DCD         |dpCurSettings|
  00ff4		 |$LN13@AM79C973En|
  00ff4	00000000	 DCD         |??_C@_1CM@BAIGKFDP@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00ff8		 |$M43435|

			 ENDP  ; |AM79C973EnableInts|

	EXPORT	|??_C@_1CO@FFCGMOAC@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@IOOCJBCJ@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|AM79C973DisableInts|

  00060			 AREA	 |.pdata|, PDATA
|$T43450| DCD	|$LN9@AM79C973Di|
	DCD	0x40002902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@FFCGMOAC@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@IOOCJBCJ@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00ff8			 AREA	 |.text|, CODE, ARM

  00ff8		 |AM79C973DisableInts| PROC

; 492  : {

  00ff8		 |$LN9@AM79C973Di|
  00ff8	e52de004	 str         lr, [sp, #-4]!
  00ffc	e24dd008	 sub         sp, sp, #8
  01000		 |$M43447|

; 493  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"+AM79C973DisableInts\r\n"));

  01000	e59f308c	 ldr         r3, [pc, #0x8C]
  01004	e5933440	 ldr         r3, [r3, #0x440]
  01008	e3130a02	 tst         r3, #2, 20
  0100c	0a000008	 beq         |$LN3@AM79C973Di|
  01010	e59f307c	 ldr         r3, [pc, #0x7C]
  01014	e5933440	 ldr         r3, [r3, #0x440]
  01018	e3130004	 tst         r3, #4
  0101c	0a000004	 beq         |$LN3@AM79C973Di|
  01020	e59f0070	 ldr         r0, [pc, #0x70]
  01024	eb000000	 bl          OALLogSerial
  01028	e3a03001	 mov         r3, #1
  0102c	e58d3000	 str         r3, [sp]
  01030	ea000001	 b           |$LN4@AM79C973Di|
  01034		 |$LN3@AM79C973Di|
  01034	e3a03000	 mov         r3, #0
  01038	e58d3000	 str         r3, [sp]
  0103c		 |$LN4@AM79C973Di|

; 494  :     WriteCSR(0, 0);

  0103c	e3a01000	 mov         r1, #0
  01040	e3a00000	 mov         r0, #0
  01044	eb000000	 bl          WriteCSR

; 495  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-AM79C973DisableInts\r\n"));

  01048	e59f3044	 ldr         r3, [pc, #0x44]
  0104c	e5933440	 ldr         r3, [r3, #0x440]
  01050	e3130a02	 tst         r3, #2, 20
  01054	0a000008	 beq         |$LN5@AM79C973Di|
  01058	e59f3034	 ldr         r3, [pc, #0x34]
  0105c	e5933440	 ldr         r3, [r3, #0x440]
  01060	e3130004	 tst         r3, #4
  01064	0a000004	 beq         |$LN5@AM79C973Di|
  01068	e59f0020	 ldr         r0, [pc, #0x20]
  0106c	eb000000	 bl          OALLogSerial
  01070	e3a03001	 mov         r3, #1
  01074	e58d3004	 str         r3, [sp, #4]
  01078	ea000001	 b           |$LN6@AM79C973Di|
  0107c		 |$LN5@AM79C973Di|
  0107c	e3a03000	 mov         r3, #0
  01080	e58d3004	 str         r3, [sp, #4]
  01084		 |$LN6@AM79C973Di|

; 496  : }

  01084	e28dd008	 add         sp, sp, #8
  01088	e49de004	 ldr         lr, [sp], #4
  0108c	e12fff1e	 bx          lr
  01090		 |$LN10@AM79C973Di|
  01090		 |$LN11@AM79C973Di|
  01090	00000000	 DCD         |??_C@_1CO@FFCGMOAC@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  01094		 |$LN12@AM79C973Di|
  01094	00000000	 DCD         |dpCurSettings|
  01098		 |$LN13@AM79C973Di|
  01098	00000000	 DCD         |??_C@_1CO@IOOCJBCJ@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAn?$AAt?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  0109c		 |$M43448|

			 ENDP  ; |AM79C973DisableInts|

	EXPORT	|??_C@_1DO@BALBBIDN@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@KGFMCPEM@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|AM79C973CurrentPacketFilter|

  00068			 AREA	 |.pdata|, PDATA
|$T43463| DCD	|$LN18@AM79C973Cu|
	DCD	0x40008804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@BALBBIDN@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, "P", 0x0, "a", 0x0, "c"
	DCB	0x0, "k", 0x0, "e", 0x0, "t", 0x0, "F", 0x0, "i", 0x0, "l"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@KGFMCPEM@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, "P", 0x0, "a", 0x0, "c"
	DCB	0x0, "k", 0x0, "e", 0x0, "t", 0x0, "F", 0x0, "i", 0x0, "l"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0109c			 AREA	 |.text|, CODE, ARM

  0109c		 |AM79C973CurrentPacketFilter| PROC

; 501  : {

  0109c		 |$LN18@AM79C973Cu|
  0109c	e1a0c00d	 mov         r12, sp
  010a0	e92d0001	 stmdb       sp!, {r0}
  010a4	e92d5000	 stmdb       sp!, {r12, lr}
  010a8	e24dd024	 sub         sp, sp, #0x24
  010ac		 |$M43460|

; 502  :     UINT32 exCtrl, mode;
; 503  : 
; 504  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 505  :        L"+AM79C973CurrentPacketFilter(0x%08x)\r\n", filter
; 506  :     ));

  010ac	e59f3200	 ldr         r3, [pc, #0x200]
  010b0	e5933440	 ldr         r3, [r3, #0x440]
  010b4	e3130a02	 tst         r3, #2, 20
  010b8	0a000009	 beq         |$LN12@AM79C973Cu|
  010bc	e59f31f0	 ldr         r3, [pc, #0x1F0]
  010c0	e5933440	 ldr         r3, [r3, #0x440]
  010c4	e3130004	 tst         r3, #4
  010c8	0a000005	 beq         |$LN12@AM79C973Cu|
  010cc	e59d102c	 ldr         r1, [sp, #0x2C]
  010d0	e59f01e0	 ldr         r0, [pc, #0x1E0]
  010d4	eb000000	 bl          OALLogSerial
  010d8	e3a03001	 mov         r3, #1
  010dc	e58d3008	 str         r3, [sp, #8]
  010e0	ea000001	 b           |$LN13@AM79C973Cu|
  010e4		 |$LN12@AM79C973Cu|
  010e4	e3a03000	 mov         r3, #0
  010e8	e58d3008	 str         r3, [sp, #8]
  010ec		 |$LN13@AM79C973Cu|

; 507  : 
; 508  :     // First we must go to suspend mode
; 509  :     exCtrl = ReadCSR(5);

  010ec	e3a00005	 mov         r0, #5
  010f0	eb000000	 bl          ReadCSR
  010f4	e58d000c	 str         r0, [sp, #0xC]
  010f8	e59d300c	 ldr         r3, [sp, #0xC]
  010fc	e58d3004	 str         r3, [sp, #4]

; 510  :     exCtrl |= 0x0001;

  01100	e59d3004	 ldr         r3, [sp, #4]
  01104	e3833001	 orr         r3, r3, #1
  01108	e58d3004	 str         r3, [sp, #4]

; 511  :     WriteCSR(5, exCtrl);

  0110c	e59d1004	 ldr         r1, [sp, #4]
  01110	e3a00005	 mov         r0, #5
  01114	eb000000	 bl          WriteCSR
  01118		 |$LN9@AM79C973Cu|

; 512  :     
; 513  :     // Wait until we get there
; 514  :     while ((ReadCSR(5) & 0x0001) == 0) OALStall(10);

  01118	e3a00005	 mov         r0, #5
  0111c	eb000000	 bl          ReadCSR
  01120	e58d0010	 str         r0, [sp, #0x10]
  01124	e59d3010	 ldr         r3, [sp, #0x10]
  01128	e3130001	 tst         r3, #1
  0112c	1a000002	 bne         |$LN8@AM79C973Cu|
  01130	e3a0000a	 mov         r0, #0xA
  01134	eb000000	 bl          OALStall
  01138	eafffff6	 b           |$LN9@AM79C973Cu|
  0113c		 |$LN8@AM79C973Cu|

; 515  : 
; 516  :     // Just assume that we always receive direct & broadcast packets
; 517  :     if ((filter & PACKET_TYPE_ALL_MULTICAST) != 0) {

  0113c	e59d302c	 ldr         r3, [sp, #0x2C]
  01140	e3130004	 tst         r3, #4
  01144	0a000010	 beq         |$LN7@AM79C973Cu|

; 518  :         WriteCSR(8, 0xFFFF);

  01148	e3a01cff	 mov         r1, #0xFF, 24
  0114c	e38110ff	 orr         r1, r1, #0xFF
  01150	e3a00008	 mov         r0, #8
  01154	eb000000	 bl          WriteCSR

; 519  :         WriteCSR(9, 0xFFFF);

  01158	e3a01cff	 mov         r1, #0xFF, 24
  0115c	e38110ff	 orr         r1, r1, #0xFF
  01160	e3a00009	 mov         r0, #9
  01164	eb000000	 bl          WriteCSR

; 520  :         WriteCSR(10, 0xFFFF);

  01168	e3a01cff	 mov         r1, #0xFF, 24
  0116c	e38110ff	 orr         r1, r1, #0xFF
  01170	e3a0000a	 mov         r0, #0xA
  01174	eb000000	 bl          WriteCSR

; 521  :         WriteCSR(11, 0xFFFF);

  01178	e3a01cff	 mov         r1, #0xFF, 24
  0117c	e38110ff	 orr         r1, r1, #0xFF
  01180	e3a0000b	 mov         r0, #0xB
  01184	eb000000	 bl          WriteCSR
  01188	ea00000e	 b           |$LN6@AM79C973Cu|
  0118c		 |$LN7@AM79C973Cu|

; 522  :     } else if ((filter & PACKET_TYPE_MULTICAST) == 0) {

  0118c	e59d302c	 ldr         r3, [sp, #0x2C]
  01190	e3130002	 tst         r3, #2
  01194	1a00000b	 bne         |$LN5@AM79C973Cu|

; 523  :         WriteCSR(8, 0);

  01198	e3a01000	 mov         r1, #0
  0119c	e3a00008	 mov         r0, #8
  011a0	eb000000	 bl          WriteCSR

; 524  :         WriteCSR(9, 0);

  011a4	e3a01000	 mov         r1, #0
  011a8	e3a00009	 mov         r0, #9
  011ac	eb000000	 bl          WriteCSR

; 525  :         WriteCSR(10, 0);

  011b0	e3a01000	 mov         r1, #0
  011b4	e3a0000a	 mov         r0, #0xA
  011b8	eb000000	 bl          WriteCSR

; 526  :         WriteCSR(11, 0);

  011bc	e3a01000	 mov         r1, #0
  011c0	e3a0000b	 mov         r0, #0xB
  011c4	eb000000	 bl          WriteCSR
  011c8		 |$LN5@AM79C973Cu|
  011c8		 |$LN6@AM79C973Cu|

; 527  :     }
; 528  : 
; 529  :     mode = ReadCSR(15);

  011c8	e3a0000f	 mov         r0, #0xF
  011cc	eb000000	 bl          ReadCSR
  011d0	e58d0014	 str         r0, [sp, #0x14]
  011d4	e59d3014	 ldr         r3, [sp, #0x14]
  011d8	e58d3000	 str         r3, [sp]

; 530  :     if ((filter & PACKET_TYPE_PROMISCUOUS) != 0) {

  011dc	e59d302c	 ldr         r3, [sp, #0x2C]
  011e0	e3130020	 tst         r3, #0x20
  011e4	0a000003	 beq         |$LN4@AM79C973Cu|

; 531  :         mode |= MODE_PROM;

  011e8	e59d3000	 ldr         r3, [sp]
  011ec	e3833902	 orr         r3, r3, #2, 18
  011f0	e58d3000	 str         r3, [sp]

; 532  :     } else {

  011f4	ea000003	 b           |$LN3@AM79C973Cu|
  011f8		 |$LN4@AM79C973Cu|

; 533  :         mode &= ~MODE_PROM;

  011f8	e59d2000	 ldr         r2, [sp]
  011fc	e3e03902	 mvn         r3, #2, 18
  01200	e0023003	 and         r3, r2, r3
  01204	e58d3000	 str         r3, [sp]
  01208		 |$LN3@AM79C973Cu|

; 534  :     }
; 535  :     WriteCSR(15, mode);

  01208	e59d1000	 ldr         r1, [sp]
  0120c	e3a0000f	 mov         r0, #0xF
  01210	eb000000	 bl          WriteCSR

; 536  :     
; 537  :     // It is time to leave suspend mode
; 538  :     exCtrl = ReadCSR(5);

  01214	e3a00005	 mov         r0, #5
  01218	eb000000	 bl          ReadCSR
  0121c	e58d0018	 str         r0, [sp, #0x18]
  01220	e59d3018	 ldr         r3, [sp, #0x18]
  01224	e58d3004	 str         r3, [sp, #4]

; 539  :     exCtrl &= ~0x0001;

  01228	e59d2004	 ldr         r2, [sp, #4]
  0122c	e3e03001	 mvn         r3, #1
  01230	e0023003	 and         r3, r2, r3
  01234	e58d3004	 str         r3, [sp, #4]

; 540  :     WriteCSR(5, exCtrl);

  01238	e59d1004	 ldr         r1, [sp, #4]
  0123c	e3a00005	 mov         r0, #5
  01240	eb000000	 bl          WriteCSR
  01244		 |$LN2@AM79C973Cu|

; 541  : 
; 542  :     // Wait until we get there
; 543  :     while ((ReadCSR(5) & 0x0001) != 0) OALStall(10);

  01244	e3a00005	 mov         r0, #5
  01248	eb000000	 bl          ReadCSR
  0124c	e58d001c	 str         r0, [sp, #0x1C]
  01250	e59d301c	 ldr         r3, [sp, #0x1C]
  01254	e3130001	 tst         r3, #1
  01258	0a000002	 beq         |$LN1@AM79C973Cu|
  0125c	e3a0000a	 mov         r0, #0xA
  01260	eb000000	 bl          OALStall
  01264	eafffff6	 b           |$LN2@AM79C973Cu|
  01268		 |$LN1@AM79C973Cu|

; 544  : 
; 545  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-AM79C973CurrentPacketFilter\r\n"));

  01268	e59f3044	 ldr         r3, [pc, #0x44]
  0126c	e5933440	 ldr         r3, [r3, #0x440]
  01270	e3130a02	 tst         r3, #2, 20
  01274	0a000008	 beq         |$LN14@AM79C973Cu|
  01278	e59f3034	 ldr         r3, [pc, #0x34]
  0127c	e5933440	 ldr         r3, [r3, #0x440]
  01280	e3130004	 tst         r3, #4
  01284	0a000004	 beq         |$LN14@AM79C973Cu|
  01288	e59f0020	 ldr         r0, [pc, #0x20]
  0128c	eb000000	 bl          OALLogSerial
  01290	e3a03001	 mov         r3, #1
  01294	e58d3020	 str         r3, [sp, #0x20]
  01298	ea000001	 b           |$LN15@AM79C973Cu|
  0129c		 |$LN14@AM79C973Cu|
  0129c	e3a03000	 mov         r3, #0
  012a0	e58d3020	 str         r3, [sp, #0x20]
  012a4		 |$LN15@AM79C973Cu|

; 546  : }

  012a4	e28dd024	 add         sp, sp, #0x24
  012a8	e89d6000	 ldmia       sp, {sp, lr}
  012ac	e12fff1e	 bx          lr
  012b0		 |$LN19@AM79C973Cu|
  012b0		 |$LN20@AM79C973Cu|
  012b0	00000000	 DCD         |??_C@_1DO@BALBBIDN@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  012b4		 |$LN21@AM79C973Cu|
  012b4	00000000	 DCD         |dpCurSettings|
  012b8		 |$LN22@AM79C973Cu|
  012b8	00000000	 DCD         |??_C@_1EO@KGFMCPEM@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF@|
  012bc		 |$M43461|

			 ENDP  ; |AM79C973CurrentPacketFilter|

	EXPORT	|??_C@_1EC@OHGFHFHB@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@ODGCAAII@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|AM79C973MulticastList|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00070			 AREA	 |.pdata|, PDATA
|$T43482| DCD	|$LN19@AM79C973Mu|
	DCD	0xc000ac04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@OHGFHFHB@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6@| DCB "-"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "s", 0x0, "t", 0x0, "L"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "1", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@ODGCAAII@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF@| DCB "+"
	DCB	0x0, "A", 0x0, "M", 0x0, "7", 0x0, "9", 0x0, "C", 0x0, "9"
	DCB	0x0, "7", 0x0, "3", 0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "s", 0x0, "t", 0x0, "L"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.xdata|, DATA
|$T43478| DCD	0xffffffcc
; Function compile flags: /Odtp

  012bc			 AREA	 |.text|, CODE, ARM

  012bc	00000000	 DCD         |__GSHandlerCheck|
  012c0	00000000	 DCD         |$T43478|

  012c4		 |AM79C973MulticastList| PROC

; 551  : {

  012c4		 |$LN19@AM79C973Mu|
  012c4	e1a0c00d	 mov         r12, sp
  012c8	e92d0003	 stmdb       sp!, {r0, r1}
  012cc	e92d5000	 stmdb       sp!, {r12, lr}
  012d0	e24dd040	 sub         sp, sp, #0x40
  012d4		 |$M43479|
  012d4	e59f3294	 ldr         r3, [pc, #0x294]
  012d8	e5933000	 ldr         r3, [r3]
  012dc	e58d301c	 str         r3, [sp, #0x1C]

; 552  :    ULONG exCtrl, crc;
; 553  :    ULONG i, j, bit;
; 554  :    USHORT h[4];
; 555  : 
; 556  :    OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 557  :        L"+AM79C973MulticastList(0x%08x, %d)\r\n", pAddresses, count
; 558  :    ));

  012e0	e59f3280	 ldr         r3, [pc, #0x280]
  012e4	e5933440	 ldr         r3, [r3, #0x440]
  012e8	e3130a02	 tst         r3, #2, 20
  012ec	0a00000a	 beq         |$LN13@AM79C973Mu|
  012f0	e59f3270	 ldr         r3, [pc, #0x270]
  012f4	e5933440	 ldr         r3, [r3, #0x440]
  012f8	e3130004	 tst         r3, #4
  012fc	0a000006	 beq         |$LN13@AM79C973Mu|
  01300	e59d204c	 ldr         r2, [sp, #0x4C]
  01304	e59d1048	 ldr         r1, [sp, #0x48]
  01308	e59f025c	 ldr         r0, [pc, #0x25C]
  0130c	eb000000	 bl          OALLogSerial
  01310	e3a03001	 mov         r3, #1
  01314	e58d3024	 str         r3, [sp, #0x24]
  01318	ea000001	 b           |$LN14@AM79C973Mu|
  0131c		 |$LN13@AM79C973Mu|
  0131c	e3a03000	 mov         r3, #0
  01320	e58d3024	 str         r3, [sp, #0x24]
  01324		 |$LN14@AM79C973Mu|

; 559  : 
; 560  :    // Calculate hash bits       
; 561  :    h[0] = h[1] = h[2] = h[3] = 0;

  01324	e3a03000	 mov         r3, #0
  01328	e1cd30b6	 strh        r3, [sp, #6]
  0132c	e1dd30b6	 ldrh        r3, [sp, #6]
  01330	e1cd30b4	 strh        r3, [sp, #4]
  01334	e1dd30b4	 ldrh        r3, [sp, #4]
  01338	e1cd30b2	 strh        r3, [sp, #2]
  0133c	e1dd30b2	 ldrh        r3, [sp, #2]
  01340	e1cd30b0	 strh        r3, [sp]

; 562  :    for (i = 0; i < count; i++) {

  01344	e3a03000	 mov         r3, #0
  01348	e58d300c	 str         r3, [sp, #0xC]
  0134c	ea000002	 b           |$LN10@AM79C973Mu|
  01350		 |$LN9@AM79C973Mu|
  01350	e59d300c	 ldr         r3, [sp, #0xC]
  01354	e2833001	 add         r3, r3, #1
  01358	e58d300c	 str         r3, [sp, #0xC]
  0135c		 |$LN10@AM79C973Mu|
  0135c	e59d200c	 ldr         r2, [sp, #0xC]
  01360	e59d304c	 ldr         r3, [sp, #0x4C]
  01364	e1520003	 cmp         r2, r3
  01368	2a000031	 bcs         |$LN8@AM79C973Mu|

; 563  :       crc = HashAddress(pAddresses);

  0136c	e59d0048	 ldr         r0, [sp, #0x48]
  01370	eb000000	 bl          HashAddress
  01374	e58d0028	 str         r0, [sp, #0x28]
  01378	e59d3028	 ldr         r3, [sp, #0x28]
  0137c	e58d3008	 str         r3, [sp, #8]

; 564  :       bit = 0;

  01380	e3a03000	 mov         r3, #0
  01384	e58d3014	 str         r3, [sp, #0x14]

; 565  :       for (j = 0; j < 6; j++) bit = (bit << 1) + ((crc >> j) & 0x01);

  01388	e3a03000	 mov         r3, #0
  0138c	e58d3018	 str         r3, [sp, #0x18]
  01390	ea000002	 b           |$LN7@AM79C973Mu|
  01394		 |$LN6@AM79C973Mu|
  01394	e59d3018	 ldr         r3, [sp, #0x18]
  01398	e2833001	 add         r3, r3, #1
  0139c	e58d3018	 str         r3, [sp, #0x18]
  013a0		 |$LN7@AM79C973Mu|
  013a0	e59d3018	 ldr         r3, [sp, #0x18]
  013a4	e3530006	 cmp         r3, #6
  013a8	2a000008	 bcs         |$LN5@AM79C973Mu|
  013ac	e59d3014	 ldr         r3, [sp, #0x14]
  013b0	e1a01083	 mov         r1, r3, lsl #1
  013b4	e59d2008	 ldr         r2, [sp, #8]
  013b8	e59d3018	 ldr         r3, [sp, #0x18]
  013bc	e1a03332	 mov         r3, r2, lsr r3
  013c0	e2033001	 and         r3, r3, #1
  013c4	e0813003	 add         r3, r1, r3
  013c8	e58d3014	 str         r3, [sp, #0x14]
  013cc	eafffff0	 b           |$LN6@AM79C973Mu|
  013d0		 |$LN5@AM79C973Mu|

; 566  :       h[bit >> 4] |= 1 << (bit & 0x0F);

  013d0	e59d3014	 ldr         r3, [sp, #0x14]
  013d4	e1a01223	 mov         r1, r3, lsr #4
  013d8	e3a03002	 mov         r3, #2
  013dc	e0020391	 mul         r2, r1, r3
  013e0	e28d3000	 add         r3, sp, #0
  013e4	e0831002	 add         r1, r3, r2
  013e8	e59d3014	 ldr         r3, [sp, #0x14]
  013ec	e203200f	 and         r2, r3, #0xF
  013f0	e3a03001	 mov         r3, #1
  013f4	e1a02213	 mov         r2, r3, lsl r2
  013f8	e1d130b0	 ldrh        r3, [r1]
  013fc	e1830002	 orr         r0, r3, r2
  01400	e59d3014	 ldr         r3, [sp, #0x14]
  01404	e1a01223	 mov         r1, r3, lsr #4
  01408	e3a03002	 mov         r3, #2
  0140c	e0020391	 mul         r2, r1, r3
  01410	e28d3000	 add         r3, sp, #0
  01414	e0832002	 add         r2, r3, r2
  01418	e1a03800	 mov         r3, r0, lsl #16
  0141c	e1a03823	 mov         r3, r3, lsr #16
  01420	e1c230b0	 strh        r3, [r2]

; 567  :       pAddresses += ADDR_SIZE;

  01424	e59d3048	 ldr         r3, [sp, #0x48]
  01428	e2833006	 add         r3, r3, #6
  0142c	e58d3048	 str         r3, [sp, #0x48]

; 568  :    }

  01430	eaffffc6	 b           |$LN9@AM79C973Mu|
  01434		 |$LN8@AM79C973Mu|

; 569  : 
; 570  :    // Go to suspend mode
; 571  :    exCtrl = ReadCSR(5);

  01434	e3a00005	 mov         r0, #5
  01438	eb000000	 bl          ReadCSR
  0143c	e58d002c	 str         r0, [sp, #0x2C]
  01440	e59d302c	 ldr         r3, [sp, #0x2C]
  01444	e58d3010	 str         r3, [sp, #0x10]

; 572  :    exCtrl |= 0x0001;

  01448	e59d3010	 ldr         r3, [sp, #0x10]
  0144c	e3833001	 orr         r3, r3, #1
  01450	e58d3010	 str         r3, [sp, #0x10]

; 573  :    WriteCSR(5, exCtrl);

  01454	e59d1010	 ldr         r1, [sp, #0x10]
  01458	e3a00005	 mov         r0, #5
  0145c	eb000000	 bl          WriteCSR
  01460		 |$LN4@AM79C973Mu|

; 574  : 
; 575  :    // Wait until we get there
; 576  :    while ((ReadCSR(5) & 0x0001) == 0) OALStall(10);

  01460	e3a00005	 mov         r0, #5
  01464	eb000000	 bl          ReadCSR
  01468	e58d0030	 str         r0, [sp, #0x30]
  0146c	e59d3030	 ldr         r3, [sp, #0x30]
  01470	e3130001	 tst         r3, #1
  01474	1a000002	 bne         |$LN3@AM79C973Mu|
  01478	e3a0000a	 mov         r0, #0xA
  0147c	eb000000	 bl          OALStall
  01480	eafffff6	 b           |$LN4@AM79C973Mu|
  01484		 |$LN3@AM79C973Mu|

; 577  : 
; 578  :    // And set hardware   
; 579  :    WriteCSR(8, h[0]);

  01484	e1dd10b0	 ldrh        r1, [sp]
  01488	e3a00008	 mov         r0, #8
  0148c	eb000000	 bl          WriteCSR

; 580  :    WriteCSR(9, h[1]);

  01490	e1dd10b2	 ldrh        r1, [sp, #2]
  01494	e3a00009	 mov         r0, #9
  01498	eb000000	 bl          WriteCSR

; 581  :    WriteCSR(10, h[2]);

  0149c	e1dd10b4	 ldrh        r1, [sp, #4]
  014a0	e3a0000a	 mov         r0, #0xA
  014a4	eb000000	 bl          WriteCSR

; 582  :    WriteCSR(11, h[3]);

  014a8	e1dd10b6	 ldrh        r1, [sp, #6]
  014ac	e3a0000b	 mov         r0, #0xB
  014b0	eb000000	 bl          WriteCSR

; 583  : 
; 584  :    // Leave suspend mode
; 585  :    exCtrl = ReadCSR(5);

  014b4	e3a00005	 mov         r0, #5
  014b8	eb000000	 bl          ReadCSR
  014bc	e58d0034	 str         r0, [sp, #0x34]
  014c0	e59d3034	 ldr         r3, [sp, #0x34]
  014c4	e58d3010	 str         r3, [sp, #0x10]

; 586  :    exCtrl &= ~0x0001;

  014c8	e59d2010	 ldr         r2, [sp, #0x10]
  014cc	e3e03001	 mvn         r3, #1
  014d0	e0023003	 and         r3, r2, r3
  014d4	e58d3010	 str         r3, [sp, #0x10]

; 587  :    WriteCSR(5, exCtrl);

  014d8	e59d1010	 ldr         r1, [sp, #0x10]
  014dc	e3a00005	 mov         r0, #5
  014e0	eb000000	 bl          WriteCSR
  014e4		 |$LN2@AM79C973Mu|

; 588  : 
; 589  :    // Wait until we get there
; 590  :    while ((ReadCSR(5) & 0x0001) != 0) OALStall(10);

  014e4	e3a00005	 mov         r0, #5
  014e8	eb000000	 bl          ReadCSR
  014ec	e58d0038	 str         r0, [sp, #0x38]
  014f0	e59d3038	 ldr         r3, [sp, #0x38]
  014f4	e3130001	 tst         r3, #1
  014f8	0a000002	 beq         |$LN1@AM79C973Mu|
  014fc	e3a0000a	 mov         r0, #0xA
  01500	eb000000	 bl          OALStall
  01504	eafffff6	 b           |$LN2@AM79C973Mu|
  01508		 |$LN1@AM79C973Mu|

; 591  :    
; 592  :    OALMSGS(OAL_ETHER&&OAL_FUNC, (L"-AM79C973MulticastList(rc = 1)\r\n"));

  01508	e59f3058	 ldr         r3, [pc, #0x58]
  0150c	e5933440	 ldr         r3, [r3, #0x440]
  01510	e3130a02	 tst         r3, #2, 20
  01514	0a000008	 beq         |$LN15@AM79C973Mu|
  01518	e59f3048	 ldr         r3, [pc, #0x48]
  0151c	e5933440	 ldr         r3, [r3, #0x440]
  01520	e3130004	 tst         r3, #4
  01524	0a000004	 beq         |$LN15@AM79C973Mu|
  01528	e59f0034	 ldr         r0, [pc, #0x34]
  0152c	eb000000	 bl          OALLogSerial
  01530	e3a03001	 mov         r3, #1
  01534	e58d303c	 str         r3, [sp, #0x3C]
  01538	ea000001	 b           |$LN16@AM79C973Mu|
  0153c		 |$LN15@AM79C973Mu|
  0153c	e3a03000	 mov         r3, #0
  01540	e58d303c	 str         r3, [sp, #0x3C]
  01544		 |$LN16@AM79C973Mu|

; 593  :    return TRUE;

  01544	e59d001c	 ldr         r0, [sp, #0x1C]
  01548	eb000000	 bl          __security_check_cookie
  0154c	e3a03001	 mov         r3, #1
  01550	e58d3020	 str         r3, [sp, #0x20]

; 594  : }

  01554	e59d0020	 ldr         r0, [sp, #0x20]
  01558	e28dd040	 add         sp, sp, #0x40
  0155c	e89d6000	 ldmia       sp, {sp, lr}
  01560	e12fff1e	 bx          lr
  01564		 |$LN20@AM79C973Mu|
  01564		 |$LN21@AM79C973Mu|
  01564	00000000	 DCD         |??_C@_1EC@OHGFHFHB@?$AA?9?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6@|
  01568		 |$LN22@AM79C973Mu|
  01568	00000000	 DCD         |dpCurSettings|
  0156c		 |$LN23@AM79C973Mu|
  0156c	00000000	 DCD         |??_C@_1EK@ODGCAAII@?$AA?$CL?$AAA?$AAM?$AA7?$AA9?$AAC?$AA9?$AA7?$AA3?$AAM?$AAu?$AAl?$AAt?$AAi?$AAc?$AAa?$AAs?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF@|
  01570		 |$LN24@AM79C973Mu|
  01570	00000000	 DCD         |__security_cookie|
  01574		 |$M43480|

			 ENDP  ; |AM79C973MulticastList|


  00078			 AREA	 |.pdata|, PDATA
|$T43495| DCD	|$LN14@HashAddres|
	DCD	0x40004304
; Function compile flags: /Odtp

  01574			 AREA	 |.text|, CODE, ARM

  01574		 |HashAddress| PROC

; 175  : {

  01574		 |$LN14@HashAddres|
  01574	e1a0c00d	 mov         r12, sp
  01578	e92d0001	 stmdb       sp!, {r0}
  0157c	e92d5000	 stmdb       sp!, {r12, lr}
  01580	e24dd01c	 sub         sp, sp, #0x1C
  01584		 |$M43492|

; 176  :    ULONG crc, carry;
; 177  :    UINT i, j;
; 178  :    UCHAR uc;
; 179  :    
; 180  :    crc = 0xFFFFFFFF;

  01584	e3e03000	 mvn         r3, #0
  01588	e58d3000	 str         r3, [sp]

; 181  :    for (i = 0; i < ADDR_SIZE; i++) {

  0158c	e3a03000	 mov         r3, #0
  01590	e58d3004	 str         r3, [sp, #4]
  01594	ea000002	 b           |$LN7@HashAddres|
  01598		 |$LN6@HashAddres|
  01598	e59d3004	 ldr         r3, [sp, #4]
  0159c	e2833001	 add         r3, r3, #1
  015a0	e58d3004	 str         r3, [sp, #4]
  015a4		 |$LN7@HashAddres|
  015a4	e59d3004	 ldr         r3, [sp, #4]
  015a8	e3530006	 cmp         r3, #6
  015ac	2a00002c	 bcs         |$LN5@HashAddres|

; 182  :       uc = pAddress[i];

  015b0	e59d2024	 ldr         r2, [sp, #0x24]
  015b4	e59d3004	 ldr         r3, [sp, #4]
  015b8	e0823003	 add         r3, r2, r3
  015bc	e5d33000	 ldrb        r3, [r3]
  015c0	e5cd3008	 strb        r3, [sp, #8]

; 183  :       for (j = 0; j < 8; j++) {

  015c4	e3a03000	 mov         r3, #0
  015c8	e58d3010	 str         r3, [sp, #0x10]
  015cc	ea000002	 b           |$LN4@HashAddres|
  015d0		 |$LN3@HashAddres|
  015d0	e59d3010	 ldr         r3, [sp, #0x10]
  015d4	e2833001	 add         r3, r3, #1
  015d8	e58d3010	 str         r3, [sp, #0x10]
  015dc		 |$LN4@HashAddres|
  015dc	e59d3010	 ldr         r3, [sp, #0x10]
  015e0	e3530008	 cmp         r3, #8
  015e4	2a00001d	 bcs         |$LN2@HashAddres|

; 184  :          carry = ((crc & 0x80000000) ? 1 : 0) ^ (uc & 0x01);

  015e8	e59d3000	 ldr         r3, [sp]
  015ec	e3130102	 tst         r3, #2, 2
  015f0	0a000002	 beq         |$LN10@HashAddres|
  015f4	e3a03001	 mov         r3, #1
  015f8	e58d3018	 str         r3, [sp, #0x18]
  015fc	ea000001	 b           |$LN11@HashAddres|
  01600		 |$LN10@HashAddres|
  01600	e3a03000	 mov         r3, #0
  01604	e58d3018	 str         r3, [sp, #0x18]
  01608		 |$LN11@HashAddres|
  01608	e5dd3008	 ldrb        r3, [sp, #8]
  0160c	e2032001	 and         r2, r3, #1
  01610	e59d3018	 ldr         r3, [sp, #0x18]
  01614	e0233002	 eor         r3, r3, r2
  01618	e58d300c	 str         r3, [sp, #0xC]

; 185  :          crc <<= 1;

  0161c	e59d3000	 ldr         r3, [sp]
  01620	e1a03083	 mov         r3, r3, lsl #1
  01624	e58d3000	 str         r3, [sp]

; 186  :          uc >>= 1;

  01628	e5dd3008	 ldrb        r3, [sp, #8]
  0162c	e1a030a3	 mov         r3, r3, lsr #1
  01630	e20330ff	 and         r3, r3, #0xFF
  01634	e5cd3008	 strb        r3, [sp, #8]

; 187  :          if (carry) crc = (crc ^ 0x04c11db6) | carry;

  01638	e59d300c	 ldr         r3, [sp, #0xC]
  0163c	e3530000	 cmp         r3, #0
  01640	0a000005	 beq         |$LN1@HashAddres|
  01644	e59d2000	 ldr         r2, [sp]
  01648	e59f302c	 ldr         r3, [pc, #0x2C]
  0164c	e0222003	 eor         r2, r2, r3
  01650	e59d300c	 ldr         r3, [sp, #0xC]
  01654	e1823003	 orr         r3, r2, r3
  01658	e58d3000	 str         r3, [sp]
  0165c		 |$LN1@HashAddres|

; 188  :       }

  0165c	eaffffdb	 b           |$LN3@HashAddres|
  01660		 |$LN2@HashAddres|

; 189  :    }

  01660	eaffffcc	 b           |$LN6@HashAddres|
  01664		 |$LN5@HashAddres|

; 190  :    return crc;

  01664	e59d3000	 ldr         r3, [sp]
  01668	e58d3014	 str         r3, [sp, #0x14]

; 191  : }

  0166c	e59d0014	 ldr         r0, [sp, #0x14]
  01670	e28dd01c	 add         sp, sp, #0x1C
  01674	e89d6000	 ldmia       sp, {sp, lr}
  01678	e12fff1e	 bx          lr
  0167c		 |$LN15@HashAddres|
  0167c		 |$LN16@HashAddres|
  0167c	04c11db6	 DCD         0x4c11db6
  01680		 |$M43493|

			 ENDP  ; |HashAddress|

	END
