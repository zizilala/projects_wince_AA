; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\FLASH\flash.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	IMPORT	|READ_REGISTER_UCHAR|
	IMPORT	|READ_REGISTER_USHORT|
	IMPORT	|READ_REGISTER_ULONG|
; File c:\wince600\platform\common\src\common\flash\flash.c

  00000			 AREA	 |.pdata|, PDATA
|$T43820| DCD	|$LN20@BitsOr|
	DCD	0x40002c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BitsOr| PROC

; 40   : {

  00000		 |$LN20@BitsOr|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43817|

; 41   :     UCHAR bits = 0;
; 42   :     DWORD data;    
; 43   :     ULONG width = pInfo->width;
; 44   :     ULONG parallel = pInfo->parallel;
; 45   : 
; 46   :     switch (width)

  00004	e5903000	 ldr         r3, [r0]
  00008	e5905004	 ldr         r5, [r0, #4]
  0000c	e3a04000	 mov         r4, #0
  00010	e3530001	 cmp         r3, #1
  00014	0a00001f	 beq         |$LN1@BitsOr|
  00018	e3530002	 cmp         r3, #2
  0001c	0a000014	 beq         |$LN6@BitsOr|
  00020	e3530004	 cmp         r3, #4
  00024	1a00001e	 bne         |$LN13@BitsOr|

; 47   :         {
; 48   :         case 4:
; 49   :             data = INREG32((UINT32*)(base + (offset << 2)));

  00028	e0810102	 add         r0, r1, r2, lsl #2
  0002c	eb000000	 bl          READ_REGISTER_ULONG

; 50   :             switch (parallel)

  00030	e3550001	 cmp         r5, #1
  00034	0a00000c	 beq         |$LN7@BitsOr|
  00038	e3550002	 cmp         r5, #2
  0003c	0a000007	 beq         |$LN8@BitsOr|
  00040	e3550004	 cmp         r5, #4
  00044	1a000016	 bne         |$LN13@BitsOr|

; 51   :                 {
; 52   :                 case 4:
; 53   :                     bits  = (UCHAR)(((data >> 24)&0xFF) | ((data >> 16)&0xFF));

  00048	e1a03c20	 mov         r3, r0, lsr #24
  0004c	e1833820	 orr         r3, r3, r0, lsr #16

; 54   :                     bits |= (UCHAR)(((data >>  8)&0xFF) | ((data >>  0)&0xFF));

  00050	e1833420	 orr         r3, r3, r0, lsr #8
  00054	e1833000	 orr         r3, r3, r0
  00058	e20340ff	 and         r4, r3, #0xFF

; 55   :                     break;

  0005c	ea000010	 b           |$LN13@BitsOr|
  00060		 |$LN8@BitsOr|

; 56   :                 case 2:
; 57   :                     bits  = (UCHAR)(((data >> 16)&0xFF) | ((data >> 0)&0xFF));

  00060	e1803820	 orr         r3, r0, r0, lsr #16
  00064	e20340ff	 and         r4, r3, #0xFF
  00068	ea00000d	 b           |$LN13@BitsOr|
  0006c		 |$LN7@BitsOr|

; 58   :                     break;                    
; 59   :                 case 1:
; 60   :                     bits = (UCHAR)(data&0xFF);

  0006c	e20040ff	 and         r4, r0, #0xFF

; 61   :                     break;
; 62   :                 }
; 63   :             break;

  00070	ea00000b	 b           |$LN13@BitsOr|
  00074		 |$LN6@BitsOr|

; 64   :         case 2:
; 65   :             data = INREG16((UINT16*)(base + (offset << 1)));

  00074	e0810082	 add         r0, r1, r2, lsl #1
  00078	eb000000	 bl          READ_REGISTER_USHORT

; 66   :             switch (parallel)

  0007c	e3550001	 cmp         r5, #1
  00080	0afffff9	 beq         |$LN7@BitsOr|
  00084	e3550002	 cmp         r5, #2
  00088	1a000005	 bne         |$LN13@BitsOr|

; 67   :                 {
; 68   :                 case 2:
; 69   :                     bits = (UCHAR)(((data >> 8)&0xFF) | ((data >> 0)&0xFF));

  0008c	e1803420	 orr         r3, r0, r0, lsr #8
  00090	e20340ff	 and         r4, r3, #0xFF
  00094	ea000002	 b           |$LN13@BitsOr|
  00098		 |$LN1@BitsOr|

; 70   :                     break;                    
; 71   :                 case 1:
; 72   :                     bits = (UCHAR)(data&0xFF);
; 73   :                     break;
; 74   :                 }
; 75   :             break;
; 76   :         case 1:
; 77   :             bits = INREG8((UINT8*)(base + offset));

  00098	e0810002	 add         r0, r1, r2
  0009c	eb000000	 bl          READ_REGISTER_UCHAR
  000a0	e1a04000	 mov         r4, r0
  000a4		 |$LN13@BitsOr|

; 78   :             break;
; 79   :         }            
; 80   : 
; 81   :     return bits;   
; 82   : }

  000a4	e1a00004	 mov         r0, r4
  000a8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$M43818|

			 ENDP  ; |BitsOr|


  00000			 AREA	 |.pdata|, PDATA
|$T43837| DCD	|$LN20@BitsAnd|
	DCD	0x40002b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BitsAnd| PROC

; 92   : {

  00000		 |$LN20@BitsAnd|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43834|

; 93   :     UINT8 bits = 0;
; 94   :     UINT32 data;    
; 95   :     ULONG width = pInfo->width;
; 96   :     ULONG parallel = pInfo->parallel;
; 97   : 
; 98   :     switch (width)

  00004	e5903000	 ldr         r3, [r0]
  00008	e5905004	 ldr         r5, [r0, #4]
  0000c	e3a04000	 mov         r4, #0
  00010	e3530001	 cmp         r3, #1
  00014	0a00001e	 beq         |$LN1@BitsAnd|
  00018	e3530002	 cmp         r3, #2
  0001c	0a000013	 beq         |$LN6@BitsAnd|
  00020	e3530004	 cmp         r3, #4
  00024	1a00001d	 bne         |$LN13@BitsAnd|

; 99   :         {
; 100  :         case 4:
; 101  :             data = INREG32((UINT32*)(base + (offset << 2)));

  00028	e0810102	 add         r0, r1, r2, lsl #2
  0002c	eb000000	 bl          READ_REGISTER_ULONG

; 102  :             switch (parallel)

  00030	e3550001	 cmp         r5, #1
  00034	0a00000b	 beq         |$LN7@BitsAnd|
  00038	e3550002	 cmp         r5, #2
  0003c	0a000006	 beq         |$LN8@BitsAnd|
  00040	e3550004	 cmp         r5, #4
  00044	1a000015	 bne         |$LN13@BitsAnd|

; 103  :                 {
; 104  :                 case 4:
; 105  :                     bits  = (UCHAR)(((data >> 24)&0xFF) & ((data >> 16)&0xFF));

  00048	e1a03c20	 mov         r3, r0, lsr #24
  0004c	e0033820	 and         r3, r3, r0, lsr #16

; 106  :                     bits &= (UCHAR)(((data >>  8)&0xFF) & ((data >>  0)&0xFF));

  00050	e0033420	 and         r3, r3, r0, lsr #8
  00054	e0034000	 and         r4, r3, r0

; 107  :                     break;

  00058	ea000010	 b           |$LN13@BitsAnd|
  0005c		 |$LN8@BitsAnd|

; 108  :                 case 2:
; 109  :                     bits = (UCHAR)(((data >> 16)&0xFF) & ((data >> 0)&0xFF));

  0005c	e0003820	 and         r3, r0, r0, lsr #16
  00060	e20340ff	 and         r4, r3, #0xFF

; 110  :                     break;                    

  00064	ea00000d	 b           |$LN13@BitsAnd|
  00068		 |$LN7@BitsAnd|

; 111  :                 case 1:
; 112  :                     bits = (UCHAR)(data&0xFF);

  00068	e20040ff	 and         r4, r0, #0xFF

; 113  :                     break;
; 114  :                 }
; 115  :             break;

  0006c	ea00000b	 b           |$LN13@BitsAnd|
  00070		 |$LN6@BitsAnd|

; 116  :         case 2:
; 117  :             data = INREG16((UINT16*)base);

  00070	e1a00001	 mov         r0, r1
  00074	eb000000	 bl          READ_REGISTER_USHORT

; 118  :             switch (parallel)

  00078	e3550001	 cmp         r5, #1
  0007c	0afffff9	 beq         |$LN7@BitsAnd|
  00080	e3550002	 cmp         r5, #2
  00084	1a000005	 bne         |$LN13@BitsAnd|

; 119  :                 {
; 120  :                 case 2:
; 121  :                     bits  = (UCHAR)(((data >> 8)&0xFF) & ((data >> 0) & 0xFF));

  00088	e0003420	 and         r3, r0, r0, lsr #8
  0008c	e20340ff	 and         r4, r3, #0xFF
  00090	ea000002	 b           |$LN13@BitsAnd|
  00094		 |$LN1@BitsAnd|

; 122  :                     break;                    
; 123  :                 case 1:
; 124  :                     bits = (UCHAR)(data&0xFF);
; 125  :                     break;
; 126  :                 }
; 127  :             break;
; 128  :         case 1:
; 129  :             bits = INREG8((UINT8*)base);

  00094	e1a00001	 mov         r0, r1
  00098	eb000000	 bl          READ_REGISTER_UCHAR
  0009c	e1a04000	 mov         r4, r0
  000a0		 |$LN13@BitsAnd|

; 130  :             break;
; 131  :         }            
; 132  : 
; 133  :     return bits;   
; 134  : }

  000a0	e1a00004	 mov         r0, r4
  000a4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$M43835|

			 ENDP  ; |BitsAnd|


  00000			 AREA	 |.pdata|, PDATA
|$T43862| DCD	|$LN27@ReadInfo|
	DCD	0x40003901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReadInfo| PROC

; 146  : {

  00000		 |$LN27@ReadInfo|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43859|
  00004	e1a0e003	 mov         lr, r3

; 147  :     DWORD data = 0;
; 148  :     ULONG count = (INT32)size;
; 149  :     
; 150  :     switch (pInfo->width)

  00008	e5903000	 ldr         r3, [r0]
  0000c	e59d4010	 ldr         r4, [sp, #0x10]
  00010	e3a05000	 mov         r5, #0
  00014	e3530001	 cmp         r3, #1
  00018	0a000025	 beq         |$LN18@ReadInfo|
  0001c	e3530002	 cmp         r3, #2
  00020	0a000011	 beq         |$LN7@ReadInfo|
  00024	e3530004	 cmp         r3, #4
  00028	1a00002a	 bne         |$LN23@ReadInfo|

; 151  :         {
; 152  :         case 4:        
; 153  :             if (shift >= 4) shift = 0;

  0002c	e35e0004	 cmp         lr, #4
  00030	23a0e000	 movcs       lr, #0

; 154  :             while (count-- > 0)

  00034	e3540000	 cmp         r4, #0
  00038	0a000026	 beq         |$LN23@ReadInfo|
  0003c	e0823004	 add         r3, r2, r4
  00040	e0813103	 add         r3, r1, r3, lsl #2
  00044	e083600e	 add         r6, r3, lr
  00048		 |$LL9@ReadInfo|
  00048	e2466004	 sub         r6, r6, #4

; 155  :                 {
; 156  :                 data <<= 8;
; 157  :                 data |= INREG32(
; 158  :                         (UINT32*)(base + ((offset + count) << 2) + shift)
; 159  :                     ) & 0xFF;

  0004c	e1a00006	 mov         r0, r6
  00050	e2444001	 sub         r4, r4, #1
  00054	eb000000	 bl          READ_REGISTER_ULONG
  00058	e20030ff	 and         r3, r0, #0xFF
  0005c	e1835405	 orr         r5, r3, r5, lsl #8
  00060	e3540000	 cmp         r4, #0
  00064	1afffff7	 bne         |$LL9@ReadInfo|

; 160  :                 }
; 161  :             break;

  00068	ea00001a	 b           |$LN23@ReadInfo|
  0006c		 |$LN7@ReadInfo|

; 162  :         case 2:        
; 163  :             if (shift >= 2) shift = 0;

  0006c	e35e0002	 cmp         lr, #2
  00070	23a0e000	 movcs       lr, #0

; 164  :             while (count-- > 0)

  00074	e3540000	 cmp         r4, #0
  00078	0a000016	 beq         |$LN23@ReadInfo|
  0007c	e0823004	 add         r3, r2, r4
  00080	e0813083	 add         r3, r1, r3, lsl #1
  00084	e083600e	 add         r6, r3, lr
  00088		 |$LL5@ReadInfo|
  00088	e2466002	 sub         r6, r6, #2

; 165  :                 {
; 166  :                 data <<= 8;
; 167  :                 data |= INREG16(
; 168  :                         (UINT16*)(base + ((offset + count) << 1) + shift)
; 169  :                     ) & 0xFF;

  0008c	e1a00006	 mov         r0, r6
  00090	e2444001	 sub         r4, r4, #1
  00094	eb000000	 bl          READ_REGISTER_USHORT
  00098	e1a03800	 mov         r3, r0, lsl #16
  0009c	e1a03823	 mov         r3, r3, lsr #16
  000a0	e20330ff	 and         r3, r3, #0xFF
  000a4	e1835405	 orr         r5, r3, r5, lsl #8
  000a8	e3540000	 cmp         r4, #0
  000ac	1afffff5	 bne         |$LL5@ReadInfo|

; 170  :                 }
; 171  :             break;

  000b0	ea000008	 b           |$LN23@ReadInfo|
  000b4		 |$LN18@ReadInfo|

; 172  :         case 1:
; 173  :             while (count-- > 0)

  000b4	e3540000	 cmp         r4, #0
  000b8	0a000006	 beq         |$LN23@ReadInfo|
  000bc	e0816002	 add         r6, r1, r2
  000c0		 |$LL2@ReadInfo|
  000c0	e2444001	 sub         r4, r4, #1
  000c4	e0860004	 add         r0, r6, r4

; 174  :                 {
; 175  :                 data <<= 8;
; 176  :                 data |= INREG8((UINT8*)(base + offset + count));

  000c8	eb000000	 bl          READ_REGISTER_UCHAR
  000cc	e1805405	 orr         r5, r0, r5, lsl #8
  000d0	e3540000	 cmp         r4, #0
  000d4	1afffff9	 bne         |$LL2@ReadInfo|
  000d8		 |$LN23@ReadInfo|

; 177  :                 }
; 178  :             break;
; 179  :         }
; 180  : 
; 181  :     return data;            
; 182  : }

  000d8	e1a00005	 mov         r0, r5
  000dc	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000e0	e12fff1e	 bx          lr
  000e4		 |$M43860|

			 ENDP  ; |ReadInfo|

	IMPORT	|WRITE_REGISTER_UCHAR|
	IMPORT	|WRITE_REGISTER_USHORT|
	IMPORT	|WRITE_REGISTER_ULONG|

  00000			 AREA	 |.pdata|, PDATA
|$T43876| DCD	|$LN21@WriteComma|
	DCD	0x40002b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WriteCommand| PROC

; 193  : {

  00000		 |$LN21@WriteComma|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43873|
  00004	e1a0e003	 mov         lr, r3
  00008	e1a04001	 mov         r4, r1

; 194  :     DWORD code;
; 195  :     ULONG width = pInfo->width;
; 196  :     ULONG parallel = pInfo->parallel;
; 197  :         
; 198  :     switch (width)

  0000c	e5901000	 ldr         r1, [r0]
  00010	e5903004	 ldr         r3, [r0, #4]
  00014	e3510001	 cmp         r1, #1
  00018	0a00001d	 beq         |$LN2@WriteComma|
  0001c	e3510002	 cmp         r1, #2
  00020	0a000010	 beq         |$LN7@WriteComma|
  00024	e3510004	 cmp         r1, #4
  00028	1a00001d	 bne         |$LN15@WriteComma|

; 199  :         {
; 200  :         case 4:
; 201  :             if (parallel == 4)

  0002c	e3530004	 cmp         r3, #4

; 202  :                 {
; 203  :                 code = cmd | (cmd << 8) | (cmd << 16) | (cmd << 24);

  00030	018e340e	 orreq       r3, lr, lr, lsl #8
  00034	018e3403	 orreq       r3, lr, r3, lsl #8
  00038	018ee403	 orreq       lr, lr, r3, lsl #8
  0003c	0a000004	 beq         |$LN8@WriteComma|

; 204  :                 }
; 205  :             else if (parallel == 2) 

  00040	e3530002	 cmp         r3, #2

; 206  :                 {
; 207  :                 code = cmd | (cmd << 16);

  00044	018ee80e	 orreq       lr, lr, lr, lsl #16
  00048	0a000001	 beq         |$LN8@WriteComma|

; 208  :                 }
; 209  :             else if (parallel == 1)

  0004c	e3530001	 cmp         r3, #1
  00050	1a000013	 bne         |$LN15@WriteComma|
  00054		 |$LN8@WriteComma|

; 210  :                 {
; 211  :                 code = cmd;
; 212  :                 }
; 213  :             else
; 214  :                 {
; 215  :                 break;
; 216  :                 }
; 217  :             OUTREG32((UINT32*)(base + (offset << 2)), code);

  00054	e1a0100e	 mov         r1, lr
  00058	e0840102	 add         r0, r4, r2, lsl #2
  0005c	eb000000	 bl          WRITE_REGISTER_ULONG

; 238  :             break;
; 239  :         }
; 240  : }

  00060	e8bd4010	 ldmia       sp!, {r4, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$LN7@WriteComma|

; 218  :             break;
; 219  :         case 2:
; 220  :             if (parallel == 2)

  00068	e3530002	 cmp         r3, #2

; 221  :                 {
; 222  :                 code = cmd | (cmd << 8);

  0006c	018ee40e	 orreq       lr, lr, lr, lsl #8
  00070	0a000001	 beq         |$LN3@WriteComma|

; 223  :                 }
; 224  :             else if (parallel == 1)

  00074	e3530001	 cmp         r3, #1
  00078	1a000009	 bne         |$LN15@WriteComma|
  0007c		 |$LN3@WriteComma|

; 225  :                 {
; 226  :                 code = cmd;
; 227  :                 }
; 228  :             else
; 229  :                 {
; 230  :                 break;
; 231  :                 }
; 232  :             OUTREG16((UINT16*)(base + (offset << 1)), code);

  0007c	e1a0180e	 mov         r1, lr, lsl #16
  00080	e1a01821	 mov         r1, r1, lsr #16
  00084	e0840082	 add         r0, r4, r2, lsl #1
  00088	eb000000	 bl          WRITE_REGISTER_USHORT

; 238  :             break;
; 239  :         }
; 240  : }

  0008c	e8bd4010	 ldmia       sp!, {r4, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$LN2@WriteComma|

; 233  :             break;
; 234  :         case 1:
; 235  :             if (parallel != 1) break;

  00094	e3530001	 cmp         r3, #1

; 236  :             code = cmd;
; 237  :             OUTREG8((UINT8*)(base + offset), code);

  00098	01a0100e	 moveq       r1, lr
  0009c	00840002	 addeq       r0, r4, r2
  000a0	0b000000	 bleq        WRITE_REGISTER_UCHAR
  000a4		 |$LN15@WriteComma|

; 238  :             break;
; 239  :         }
; 240  : }

  000a4	e8bd4010	 ldmia       sp!, {r4, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$M43874|

			 ENDP  ; |WriteCommand|


  00000			 AREA	 |.pdata|, PDATA
|$T43896| DCD	|$LN14@LockBlock1|
	DCD	0x40002c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LockBlock1| PROC

; 257  : {

  00000		 |$LN14@LockBlock1|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M43893|
  00004	e1b07003	 movs        r7, r3
  00008	e1a04002	 mov         r4, r2
  0000c	e1a05000	 mov         r5, r0

; 258  :     UCHAR command;
; 259  :     UCHAR bits;
; 260  : 
; 261  :     command = lock ? 0x01 : 0xD0;

  00010	13a06001	 movne       r6, #1

; 262  :     
; 263  :     // Set block lock
; 264  :     WriteCommand(pInfo, block, 0, 0x60);

  00014	e3a03060	 mov         r3, #0x60
  00018	e3a02000	 mov         r2, #0
  0001c	e1a01004	 mov         r1, r4
  00020	e1a00005	 mov         r0, r5
  00024	03a060d0	 moveq       r6, #0xD0
  00028	eb000000	 bl          WriteCommand

; 265  :     WriteCommand(pInfo, block, 0, command);

  0002c	e20630ff	 and         r3, r6, #0xFF
  00030	e3a02000	 mov         r2, #0
  00034	e1a01004	 mov         r1, r4
  00038	e1a00005	 mov         r0, r5
  0003c	eb000000	 bl          WriteCommand

; 266  : 
; 267  :     // Verify it is correct
; 268  :     WriteCommand(pInfo, block, 0x02, 0x90);

  00040	e3a03090	 mov         r3, #0x90
  00044	e3a02002	 mov         r2, #2
  00048	e1a01004	 mov         r1, r4
  0004c	e1a00005	 mov         r0, r5
  00050	eb000000	 bl          WriteCommand

; 269  :     if (lock)

  00054	e3570000	 cmp         r7, #0

; 270  :         {
; 271  :         bits = BitsAnd(pInfo, block, 0x02);

  00058	e3a02002	 mov         r2, #2
  0005c	e1a01004	 mov         r1, r4
  00060	e1a00005	 mov         r0, r5
  00064	0a000001	 beq         |$LN2@LockBlock1|
  00068	eb000000	 bl          BitsAnd

; 272  :         }
; 273  :     else

  0006c	ea000000	 b           |$LN11@LockBlock1|
  00070		 |$LN2@LockBlock1|

; 274  :         {
; 275  :         bits = BitsOr(pInfo, block, 0x02);

  00070	eb000000	 bl          BitsOr
  00074		 |$LN11@LockBlock1|
  00074	e1a06000	 mov         r6, r0

; 276  :         }
; 277  :     
; 278  :     // Reset memory back to normal state
; 279  :     WriteCommand(pInfo, block, 0, 0xFF);

  00078	e1a00005	 mov         r0, r5
  0007c	e3a030ff	 mov         r3, #0xFF
  00080	e3a02000	 mov         r2, #0
  00084	e1a01004	 mov         r1, r4
  00088	eb000000	 bl          WriteCommand

; 280  : 
; 281  :     return (((bits & (1 << 0)) != 0) == lock);

  0008c	e3160001	 tst         r6, #1
  00090	13a03001	 movne       r3, #1
  00094	03a03000	 moveq       r3, #0
  00098	e1530007	 cmp         r3, r7
  0009c	03a00001	 moveq       r0, #1

; 282  : }

  000a0	08bd40f0	 ldmeqia     sp!, {r4 - r7, lr}

; 280  : 
; 281  :     return (((bits & (1 << 0)) != 0) == lock);

  000a4	13a00000	 movne       r0, #0

; 282  : }

  000a8	18bd40f0	 ldmneia     sp!, {r4 - r7, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$M43894|

			 ENDP  ; |LockBlock1|


  00000			 AREA	 |.pdata|, PDATA
|$T43910| DCD	|$LN7@LockDownBl|
	DCD	0x40002101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LockDownBlock1| PROC

; 292  : {

  00000		 |$LN7@LockDownBl|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43907|
  00004	e1a06002	 mov         r6, r2
  00008	e1a05000	 mov         r5, r0

; 293  :     UCHAR bits;
; 294  : 
; 295  :     // Set block lock-down
; 296  :     WriteCommand(pInfo, block, 0, 0x60);

  0000c	e3a03060	 mov         r3, #0x60
  00010	e3a02000	 mov         r2, #0
  00014	e1a01006	 mov         r1, r6
  00018	eb000000	 bl          WriteCommand

; 297  :     WriteCommand(pInfo, block, 0, 0x2F);

  0001c	e3a0302f	 mov         r3, #0x2F
  00020	e3a02000	 mov         r2, #0
  00024	e1a01006	 mov         r1, r6
  00028	e1a00005	 mov         r0, r5
  0002c	eb000000	 bl          WriteCommand

; 298  : 
; 299  :     // Verify it is correct
; 300  :     WriteCommand(pInfo, block, 0x02, 0x90);

  00030	e3a03090	 mov         r3, #0x90
  00034	e3a02002	 mov         r2, #2
  00038	e1a01006	 mov         r1, r6
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          WriteCommand

; 301  :     bits = BitsAnd(pInfo, block, 0x02);

  00044	e3a02002	 mov         r2, #2
  00048	e1a01006	 mov         r1, r6
  0004c	e1a00005	 mov         r0, r5
  00050	eb000000	 bl          BitsAnd
  00054	e1a04000	 mov         r4, r0

; 302  :     
; 303  :     // Reset memory back to normal state
; 304  :     WriteCommand(pInfo, block, 0, 0xFF);

  00058	e1a00005	 mov         r0, r5
  0005c	e3a030ff	 mov         r3, #0xFF
  00060	e3a02000	 mov         r2, #0
  00064	e1a01006	 mov         r1, r6
  00068	eb000000	 bl          WriteCommand

; 305  : 
; 306  :     return ((bits & (1 << 1)) != 0);

  0006c	e3140002	 tst         r4, #2
  00070	13a00001	 movne       r0, #1

; 307  : }

  00074	18bd4070	 ldmneia     sp!, {r4 - r6, lr}

; 305  : 
; 306  :     return ((bits & (1 << 1)) != 0);

  00078	03a00000	 moveq       r0, #0

; 307  : }

  0007c	08bd4070	 ldmeqia     sp!, {r4 - r6, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$M43908|

			 ENDP  ; |LockDownBlock1|


  00000			 AREA	 |.pdata|, PDATA
|$T43926| DCD	|$LN11@EraseBlock|
	DCD	0x40003501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EraseBlock1| PROC

; 317  : {

  00000		 |$LN11@EraseBlock|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43923|
  00004	e1a04002	 mov         r4, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a05000	 mov         r5, r0

; 318  :     BOOL rc;
; 319  :     UCHAR bits;
; 320  : 
; 321  :     // Start block reset
; 322  :     WriteCommand(pInfo, base, 0, 0x50);

  00010	e3a03050	 mov         r3, #0x50
  00014	e3a02000	 mov         r2, #0
  00018	eb000000	 bl          WriteCommand

; 323  :     WriteCommand(pInfo, block, 0, 0x20);

  0001c	e3a03020	 mov         r3, #0x20
  00020	e3a02000	 mov         r2, #0
  00024	e1a01004	 mov         r1, r4
  00028	e1a00005	 mov         r0, r5
  0002c	eb000000	 bl          WriteCommand

; 324  :     WriteCommand(pInfo, block, 0, 0xD0);

  00030	e3a030d0	 mov         r3, #0xD0
  00034	e3a02000	 mov         r2, #0
  00038	e1a01004	 mov         r1, r4
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          WriteCommand
  00044		 |$LL3@EraseBlock|

; 325  : 
; 326  :     // Wait until it is done
; 327  :     do {
; 328  :         WriteCommand(pInfo, base, 0, 0x70);

  00044	e3a03070	 mov         r3, #0x70
  00048	e3a02000	 mov         r2, #0
  0004c	e1a01006	 mov         r1, r6
  00050	e1a00005	 mov         r0, r5
  00054	eb000000	 bl          WriteCommand

; 329  :         bits = BitsAnd(pInfo, base, 0);

  00058	e3a02000	 mov         r2, #0
  0005c	e1a01006	 mov         r1, r6
  00060	e1a00005	 mov         r0, r5
  00064	eb000000	 bl          BitsAnd

; 330  :        }
; 331  :     while ((bits & (1 << 7)) == 0);

  00068	e3100080	 tst         r0, #0x80
  0006c	0afffff4	 beq         |$LL3@EraseBlock|

; 332  : 
; 333  :     // Reset memory back to normal state
; 334  :     WriteCommand(pInfo, base, 0, 0xFF);

  00070	e3a030ff	 mov         r3, #0xFF
  00074	e3a02000	 mov         r2, #0
  00078	e1a01006	 mov         r1, r6
  0007c	e1a00005	 mov         r0, r5
  00080	eb000000	 bl          WriteCommand

; 335  : 
; 336  :     // Bit 5 is zero if erase succeeded
; 337  :     WriteCommand(pInfo, base, 0, 0x70);

  00084	e3a03070	 mov         r3, #0x70
  00088	e3a02000	 mov         r2, #0
  0008c	e1a01006	 mov         r1, r6
  00090	e1a00005	 mov         r0, r5
  00094	eb000000	 bl          WriteCommand

; 338  :     bits = BitsOr(pInfo, base, 0);

  00098	e3a02000	 mov         r2, #0
  0009c	e1a01006	 mov         r1, r6
  000a0	e1a00005	 mov         r0, r5
  000a4	eb000000	 bl          BitsOr

; 339  :     rc = (bits & (1 << 5)) == 0;

  000a8	e3100020	 tst         r0, #0x20
  000ac	03a04001	 moveq       r4, #1

; 340  :     
; 341  :     // Switch back to read mode
; 342  :     WriteCommand(pInfo, base, 0, 0xFF);

  000b0	e3a030ff	 mov         r3, #0xFF
  000b4	e3a02000	 mov         r2, #0
  000b8	e1a01006	 mov         r1, r6
  000bc	e1a00005	 mov         r0, r5
  000c0	13a04000	 movne       r4, #0
  000c4	eb000000	 bl          WriteCommand

; 343  : 
; 344  :     return rc;
; 345  : }

  000c8	e1a00004	 mov         r0, r4
  000cc	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$M43924|

			 ENDP  ; |EraseBlock1|


  00000			 AREA	 |.pdata|, PDATA
|$T43937| DCD	|$LN5@StartErase|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |StartEraseBlock1| PROC

; 355  : {

  00000		 |$LN5@StartErase|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43934|
  00004	e1a04002	 mov         r4, r2
  00008	e1a05000	 mov         r5, r0

; 356  :     // Erase status register
; 357  :     WriteCommand(pInfo, block, 0, 0x50);

  0000c	e3a03050	 mov         r3, #0x50
  00010	e3a02000	 mov         r2, #0
  00014	e1a01004	 mov         r1, r4
  00018	eb000000	 bl          WriteCommand

; 358  : 
; 359  :     // Start block reset
; 360  :     WriteCommand(pInfo, block, 0, 0x20);

  0001c	e3a03020	 mov         r3, #0x20
  00020	e3a02000	 mov         r2, #0
  00024	e1a01004	 mov         r1, r4
  00028	e1a00005	 mov         r0, r5
  0002c	eb000000	 bl          WriteCommand

; 361  :     WriteCommand(pInfo, block, 0, 0xD0);

  00030	e3a030d0	 mov         r3, #0xD0
  00034	e3a02000	 mov         r2, #0
  00038	e1a01004	 mov         r1, r4
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          WriteCommand

; 362  : 
; 363  :     return TRUE;

  00044	e3a00001	 mov         r0, #1

; 364  : }

  00048	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M43935|

			 ENDP  ; |StartEraseBlock1|


  00000			 AREA	 |.pdata|, PDATA
|$T43952| DCD	|$LN8@ContinueEr|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ContinueEraseBlock1| PROC

; 374  : {

  00000		 |$LN8@ContinueEr|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43949|
  00004	e1a05002	 mov         r5, r2
  00008	e1a06000	 mov         r6, r0

; 375  :     UINT32 rc = OAL_FLASH_ERASE_PENDING;
; 376  :     UINT8 bits;
; 377  : 
; 378  :     // Check if erase is done
; 379  :     WriteCommand(pInfo, block, 0, 0x70);

  0000c	e3a03070	 mov         r3, #0x70
  00010	e3a02000	 mov         r2, #0
  00014	e1a01005	 mov         r1, r5
  00018	e3a04000	 mov         r4, #0
  0001c	eb000000	 bl          WriteCommand

; 380  :     bits = BitsAnd(pInfo, block, 0);

  00020	e3a02000	 mov         r2, #0
  00024	e1a01005	 mov         r1, r5
  00028	e1a00006	 mov         r0, r6
  0002c	eb000000	 bl          BitsAnd

; 381  :     if ((bits & (1 << 7)) == 0) goto cleanUp;

  00030	e3100080	 tst         r0, #0x80
  00034	0a000002	 beq         |$cleanUp$43227|

; 382  :         
; 383  :     // Bit 5 is zero if erase succeeded
; 384  :     rc = (bits & (1 << 5)) == 0 ? OAL_FLASH_ERASE_DONE : OAL_FLASH_ERASE_FAILED;

  00038	e3100020	 tst         r0, #0x20
  0003c	03a04001	 moveq       r4, #1
  00040	13e04000	 mvnne       r4, #0
  00044		 |$cleanUp$43227|

; 385  :     
; 386  : cleanUp:
; 387  :     // Switch back to read mode
; 388  :     WriteCommand(pInfo, block, 0, 0xFF);

  00044	e3a030ff	 mov         r3, #0xFF
  00048	e3a02000	 mov         r2, #0
  0004c	e1a01005	 mov         r1, r5
  00050	e1a00006	 mov         r0, r6
  00054	eb000000	 bl          WriteCommand

; 389  :     return rc;
; 390  : }

  00058	e1a00004	 mov         r0, r4
  0005c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$M43950|

			 ENDP  ; |ContinueEraseBlock1|


  00000			 AREA	 |.pdata|, PDATA
|$T43970| DCD	|$LN16@WriteData1|
	DCD	0x40003001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WriteData1| PROC

; 401  : {

  00000		 |$LN16@WriteData1|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M43967|
  00004	e1a05003	 mov         r5, r3
  00008	e1a04002	 mov         r4, r2
  0000c	e1a08001	 mov         r8, r1
  00010	e1a06000	 mov         r6, r0

; 402  :     UINT32 size = 0;
; 403  :     UINT8 bits;
; 404  : 
; 405  :     // Issue write command
; 406  :     WriteCommand(pInfo, base, 0, 0x40);

  00014	e3a03040	 mov         r3, #0x40
  00018	e3a02000	 mov         r2, #0
  0001c	e3a07000	 mov         r7, #0
  00020	eb000000	 bl          WriteCommand

; 407  :    
; 408  :     // Now write info and wait until it is done
; 409  :     switch (pInfo->width)

  00024	e5963000	 ldr         r3, [r6]
  00028	e3530001	 cmp         r3, #1
  0002c	0a00000b	 beq         |$LN4@WriteData1|
  00030	e3530002	 cmp         r3, #2
  00034	0a000005	 beq         |$LN5@WriteData1|
  00038	e3530004	 cmp         r3, #4
  0003c	1a00000a	 bne         |$LL3@WriteData1|

; 410  :         {
; 411  :         case 4:
; 412  :             OUTREG32((UINT32*)pos, *(UINT32*)pBuffer);

  00040	e5951000	 ldr         r1, [r5]
  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          WRITE_REGISTER_ULONG

; 413  :             break;

  0004c	ea000006	 b           |$LL3@WriteData1|
  00050		 |$LN5@WriteData1|

; 414  :         case 2:
; 415  :             OUTREG16((UINT16*)pos, *(UINT16*)pBuffer);

  00050	e1d510b0	 ldrh        r1, [r5]
  00054	e1a00004	 mov         r0, r4
  00058	eb000000	 bl          WRITE_REGISTER_USHORT

; 416  :             break;

  0005c	ea000002	 b           |$LL3@WriteData1|
  00060		 |$LN4@WriteData1|

; 417  :         case 1:
; 418  :             OUTREG8((UINT8*)pos, *(UINT8*)pBuffer);

  00060	e5d51000	 ldrb        r1, [r5]
  00064	e1a00004	 mov         r0, r4
  00068	eb000000	 bl          WRITE_REGISTER_UCHAR
  0006c		 |$LL3@WriteData1|

; 419  :             break;
; 420  :         }
; 421  : 
; 422  :     // Wait until write is done
; 423  :     WriteCommand(pInfo, base, 0, 0x70);
; 424  :     bits = BitsAnd(pInfo, pos, 0);
; 425  :     while ((bits & (1 << 7)) == 0)
; 426  :         {
; 427  :         WriteCommand(pInfo, base, 0, 0x70);

  0006c	e3a03070	 mov         r3, #0x70
  00070	e3a02000	 mov         r2, #0
  00074	e1a01008	 mov         r1, r8
  00078	e1a00006	 mov         r0, r6
  0007c	eb000000	 bl          WriteCommand

; 428  :         bits = BitsAnd(pInfo, pos, 0);

  00080	e3a02000	 mov         r2, #0
  00084	e1a01004	 mov         r1, r4
  00088	e1a00006	 mov         r0, r6
  0008c	eb000000	 bl          BitsAnd
  00090	e3100080	 tst         r0, #0x80
  00094	0afffff4	 beq         |$LL3@WriteData1|

; 429  :         }
; 430  :     
; 431  :     // Bit 4 is zero if write succeeded
; 432  :     if ((bits & (1 << 4)) == 0) size = pInfo->width;

  00098	e3100010	 tst         r0, #0x10
  0009c	05967000	 ldreq       r7, [r6]

; 433  : 
; 434  :     // Reset memory back to normal state
; 435  :     WriteCommand(pInfo, base, 0, 0xFF);

  000a0	e1a00006	 mov         r0, r6
  000a4	e3a030ff	 mov         r3, #0xFF
  000a8	e3a02000	 mov         r2, #0
  000ac	e1a01008	 mov         r1, r8
  000b0	eb000000	 bl          WriteCommand

; 436  : 
; 437  :     // Return result
; 438  :     return size;
; 439  : }

  000b4	e1a00007	 mov         r0, r7
  000b8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$M43968|

			 ENDP  ; |WriteData1|


  00000			 AREA	 |.pdata|, PDATA
|$T43979| DCD	|$LN5@LockBlock2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LockBlock2| PROC

; 458  : {

  00000		 |$LN5@LockBlock2|
  00000		 |$M43976|

; 459  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 460  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43977|

			 ENDP  ; |LockBlock2|


  00000			 AREA	 |.pdata|, PDATA
|$T43988| DCD	|$LN5@LockDownBl@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LockDownBlock2| PROC

; 470  : {

  00000		 |$LN5@LockDownBl@2|
  00000		 |$M43985|

; 471  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 472  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43986|

			 ENDP  ; |LockDownBlock2|


  00000			 AREA	 |.pdata|, PDATA
|$T44004| DCD	|$LN12@EraseBlock@2|
	DCD	0x40003601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EraseBlock2| PROC

; 482  : {

  00000		 |$LN12@EraseBlock@2|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M44001|
  00004	e1a04002	 mov         r4, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a05000	 mov         r5, r0

; 483  :     UINT32 code;
; 484  :     UINT8 bits;
; 485  :    
; 486  :     // Start block reset
; 487  :     WriteCommand(pInfo, base, 0x0555, 0xAA);

  00010	e3a08c05	 mov         r8, #5, 24
  00014	e3882055	 orr         r2, r8, #0x55
  00018	e3a030aa	 mov         r3, #0xAA
  0001c	eb000000	 bl          WriteCommand

; 488  :     WriteCommand(pInfo, base, 0x02AA, 0x55);

  00020	e3a07c02	 mov         r7, #2, 24
  00024	e38720aa	 orr         r2, r7, #0xAA
  00028	e3a03055	 mov         r3, #0x55
  0002c	e1a01006	 mov         r1, r6
  00030	e1a00005	 mov         r0, r5
  00034	eb000000	 bl          WriteCommand

; 489  :     WriteCommand(pInfo, base, 0x0555, 0x80);

  00038	e3a03080	 mov         r3, #0x80
  0003c	e3882055	 orr         r2, r8, #0x55
  00040	e1a01006	 mov         r1, r6
  00044	e1a00005	 mov         r0, r5
  00048	eb000000	 bl          WriteCommand

; 490  :     WriteCommand(pInfo, base, 0x0555, 0xAA);

  0004c	e3a030aa	 mov         r3, #0xAA
  00050	e3882055	 orr         r2, r8, #0x55
  00054	e1a01006	 mov         r1, r6
  00058	e1a00005	 mov         r0, r5
  0005c	eb000000	 bl          WriteCommand

; 491  :     WriteCommand(pInfo, base, 0x02AA, 0x55);

  00060	e3a03055	 mov         r3, #0x55
  00064	e38720aa	 orr         r2, r7, #0xAA
  00068	e1a01006	 mov         r1, r6
  0006c	e1a00005	 mov         r0, r5
  00070	eb000000	 bl          WriteCommand

; 492  :     WriteCommand(pInfo, block, 0, 0x30);

  00074	e3a03030	 mov         r3, #0x30
  00078	e3a02000	 mov         r2, #0
  0007c	e1a01004	 mov         r1, r4
  00080	e1a00005	 mov         r0, r5
  00084	eb000000	 bl          WriteCommand
  00088		 |$LL4@EraseBlock@2|

; 493  :    
; 494  :     // Wait until it is done
; 495  :     while (TRUE)
; 496  :         {
; 497  :         bits = BitsAnd(pInfo, block, 0);

  00088	e3a02000	 mov         r2, #0
  0008c	e1a01004	 mov         r1, r4
  00090	e1a00005	 mov         r0, r5
  00094	eb000000	 bl          BitsAnd

; 498  :         if ((bits & (1 << 5)) == 0) continue;

  00098	e3100020	 tst         r0, #0x20
  0009c	0afffff9	 beq         |$LL4@EraseBlock@2|

; 499  :         code = INREG32((UINT32*)block);

  000a0	e1a00004	 mov         r0, r4
  000a4	eb000000	 bl          READ_REGISTER_ULONG
  000a8	e1a04000	 mov         r4, r0

; 500  :         if (code == 0xFFFFFFFF) break;
; 501  :         break;
; 502  :         }
; 503  : 
; 504  :     // Switch back to read mode
; 505  :     WriteCommand(pInfo, base, 0, 0xF0);

  000ac	e1a00005	 mov         r0, r5
  000b0	e3a030f0	 mov         r3, #0xF0
  000b4	e3a02000	 mov         r2, #0
  000b8	e1a01006	 mov         r1, r6
  000bc	eb000000	 bl          WriteCommand

; 506  : 
; 507  :     return (code == 0xFFFFFFFF);

  000c0	e3740001	 cmn         r4, #1
  000c4	03a00001	 moveq       r0, #1

; 508  : }

  000c8	08bd41f0	 ldmeqia     sp!, {r4 - r8, lr}

; 506  : 
; 507  :     return (code == 0xFFFFFFFF);

  000cc	13a00000	 movne       r0, #0

; 508  : }

  000d0	18bd41f0	 ldmneia     sp!, {r4 - r8, lr}
  000d4	e12fff1e	 bx          lr
  000d8		 |$M44002|

			 ENDP  ; |EraseBlock2|


  00000			 AREA	 |.pdata|, PDATA
|$T44013| DCD	|$LN5@StartErase@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |StartEraseBlock2| PROC

; 518  : {

  00000		 |$LN5@StartErase@2|
  00000		 |$M44010|

; 519  :     return FALSE;

  00000	e3a00000	 mov         r0, #0

; 520  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M44011|

			 ENDP  ; |StartEraseBlock2|


  00000			 AREA	 |.pdata|, PDATA
|$T44022| DCD	|$LN5@ContinueEr@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ContinueEraseBlock2| PROC

; 530  : {

  00000		 |$LN5@ContinueEr@2|
  00000		 |$M44019|

; 531  :     return OAL_FLASH_ERASE_FAILED;

  00000	e3e00000	 mvn         r0, #0

; 532  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M44020|

			 ENDP  ; |ContinueEraseBlock2|


  00000			 AREA	 |.pdata|, PDATA
|$T44040| DCD	|$LN25@WriteData2|
	DCD	0x40004e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WriteData2| PROC

; 543  : {

  00000		 |$LN25@WriteData2|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M44037|
  00004	e1a06003	 mov         r6, r3
  00008	e1a05002	 mov         r5, r2
  0000c	e1a04001	 mov         r4, r1
  00010	e1a08000	 mov         r8, r0

; 544  :     UINT32 size = 0;
; 545  :     UINT32 code;
; 546  :     UINT8 bits;
; 547  : 
; 548  :     // Set flash memory to write mode
; 549  :     WriteCommand(pInfo, base, 0x555, 0xAA);

  00014	e3a09c05	 mov         r9, #5, 24
  00018	e3892055	 orr         r2, r9, #0x55
  0001c	e3a030aa	 mov         r3, #0xAA
  00020	e3a07000	 mov         r7, #0
  00024	eb000000	 bl          WriteCommand
  00028	e3a03c02	 mov         r3, #2, 24

; 550  :     WriteCommand(pInfo, base, 0x2AA, 0x55);

  0002c	e38320aa	 orr         r2, r3, #0xAA
  00030	e3a03055	 mov         r3, #0x55
  00034	e1a01004	 mov         r1, r4
  00038	e1a00008	 mov         r0, r8
  0003c	eb000000	 bl          WriteCommand

; 551  :     WriteCommand(pInfo, base, 0x555, 0xA0);

  00040	e3a030a0	 mov         r3, #0xA0
  00044	e3892055	 orr         r2, r9, #0x55
  00048	e1a01004	 mov         r1, r4
  0004c	e1a00008	 mov         r0, r8
  00050	eb000000	 bl          WriteCommand

; 552  : 
; 553  :     // Now write info and wait until it is done
; 554  :     switch (pInfo->width)

  00054	e5983000	 ldr         r3, [r8]
  00058	e3530001	 cmp         r3, #1
  0005c	0a000024	 beq         |$LN5@WriteData2|
  00060	e3530002	 cmp         r3, #2
  00064	0a000011	 beq         |$LN10@WriteData2|
  00068	e3530004	 cmp         r3, #4
  0006c	1a00002e	 bne         |$LN1@WriteData2|

; 555  :         {
; 556  :         case 4:
; 557  :             OUTREG32((UINT32*)pos, *(UINT32*)pBuffer);

  00070	e5961000	 ldr         r1, [r6]
  00074	e1a00005	 mov         r0, r5
  00078	eb000000	 bl          WRITE_REGISTER_ULONG
  0007c		 |$LL14@WriteData2|

; 558  :             while (TRUE)
; 559  :                 {
; 560  :                 bits = BitsAnd(pInfo, pos, 0);

  0007c	e3a02000	 mov         r2, #0
  00080	e1a01005	 mov         r1, r5
  00084	e1a00008	 mov         r0, r8
  00088	eb000000	 bl          BitsAnd

; 561  :                 if ((bits & (1 << 5)) == 0) continue;

  0008c	e3100020	 tst         r0, #0x20
  00090	0afffff9	 beq         |$LL14@WriteData2|

; 562  :                 code = INREG32((UINT32*)pos);

  00094	e1a00005	 mov         r0, r5
  00098	eb000000	 bl          READ_REGISTER_ULONG

; 563  :                 break;
; 564  :                 }
; 565  :             if (code == *(UINT32*)pBuffer) size = sizeof(UINT32);

  0009c	e5963000	 ldr         r3, [r6]
  000a0	e1500003	 cmp         r0, r3
  000a4	1a000020	 bne         |$LN1@WriteData2|
  000a8	e3a07004	 mov         r7, #4

; 566  :             break;

  000ac	ea00001e	 b           |$LN1@WriteData2|
  000b0		 |$LN10@WriteData2|

; 567  :         case 2:
; 568  :             OUTREG16((UINT16*)pos, *(UINT16*)pBuffer);

  000b0	e1d610b0	 ldrh        r1, [r6]
  000b4	e1a00005	 mov         r0, r5
  000b8	eb000000	 bl          WRITE_REGISTER_USHORT
  000bc		 |$LL9@WriteData2|

; 569  :             while (TRUE)
; 570  :                 {
; 571  :                 bits = BitsAnd(pInfo, pos, 0);

  000bc	e3a02000	 mov         r2, #0
  000c0	e1a01005	 mov         r1, r5
  000c4	e1a00008	 mov         r0, r8
  000c8	eb000000	 bl          BitsAnd

; 572  :                 if ((bits & (1 << 5)) == 0) continue;

  000cc	e3100020	 tst         r0, #0x20
  000d0	0afffff9	 beq         |$LL9@WriteData2|

; 573  :                 code = INREG16((UINT16*)pos);

  000d4	e1a00005	 mov         r0, r5
  000d8	eb000000	 bl          READ_REGISTER_USHORT

; 574  :                 break;
; 575  :                 }
; 576  :             if (code == *(UINT16*)pBuffer) size = sizeof(UINT16);

  000dc	e1d620b0	 ldrh        r2, [r6]
  000e0	e1a03800	 mov         r3, r0, lsl #16
  000e4	e1520823	 cmp         r2, r3, lsr #16
  000e8	1a00000f	 bne         |$LN1@WriteData2|
  000ec	e3a07002	 mov         r7, #2

; 577  :             break;

  000f0	ea00000d	 b           |$LN1@WriteData2|
  000f4		 |$LN5@WriteData2|

; 578  :         case 1:
; 579  :             OUTREG8((UINT8*)pos, *(UINT8*)pBuffer);

  000f4	e5d61000	 ldrb        r1, [r6]
  000f8	e1a00005	 mov         r0, r5
  000fc	eb000000	 bl          WRITE_REGISTER_UCHAR
  00100		 |$LL4@WriteData2|

; 580  :             while (TRUE)
; 581  :                 {
; 582  :                 bits = BitsAnd(pInfo, pos, 0);

  00100	e3a02000	 mov         r2, #0
  00104	e1a01005	 mov         r1, r5
  00108	e1a00008	 mov         r0, r8
  0010c	eb000000	 bl          BitsAnd

; 583  :                 if ((bits & (1 << 5)) == 0) continue;

  00110	e3100020	 tst         r0, #0x20
  00114	0afffff9	 beq         |$LL4@WriteData2|

; 584  :                 code = INREG8((UINT8*)pos);

  00118	e1a00005	 mov         r0, r5
  0011c	eb000000	 bl          READ_REGISTER_UCHAR

; 585  :                 break;
; 586  :                 }
; 587  :             if (code == *(UINT8*)pBuffer) size = sizeof(UINT8);

  00120	e5d63000	 ldrb        r3, [r6]
  00124	e1500003	 cmp         r0, r3
  00128	03a07001	 moveq       r7, #1
  0012c		 |$LN1@WriteData2|

; 588  :             break;
; 589  :         }
; 590  : 
; 591  :     return size;
; 592  : }

  0012c	e1a00007	 mov         r0, r7
  00130	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00134	e12fff1e	 bx          lr
  00138		 |$M44038|

			 ENDP  ; |WriteData2|

	EXPORT	|OALFlashInfo|
	EXPORT	|??_C@_1DC@LLEMLIAM@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@HABCIMDF@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T44073| DCD	|$LN42@OALFlashIn|
	DCD	0x40010502

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@LLEMLIAM@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@HABCIMDF@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, ".", 0x0, ".", 0x0, "."
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashInfo| PROC

; 613  : {

  00000		 |$LN42@OALFlashIn|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M44070|
  00008	e1a05001	 mov         r5, r1
  0000c	e1a06000	 mov         r6, r0

; 614  :     BOOL rc = FALSE;
; 615  :     UINT32 base = (UINT32)pBase;
; 616  :     UINT32 code1, code2, code3;
; 617  :     UINT32 i;
; 618  :     
; 619  :     OALMSG(OAL_FUNC, (L"+OALFlashInfo(0x%08x, ...)\r\n", pBase));

  00010	e59fb3e4	 ldr         r11, [pc, #0x3E4]
  00014	e3a07000	 mov         r7, #0
  00018	e59b3440	 ldr         r3, [r11, #0x440]
  0001c	e3130004	 tst         r3, #4
  00020	159f03e8	 ldrne       r0, [pc, #0x3E8]
  00024	11a01006	 movne       r1, r6
  00028	1b000000	 blne        NKDbgPrintfW

; 620  : 
; 621  :     // Just to avoid possible problems
; 622  :     memset(pInfo, 0, sizeof(*pInfo));

  0002c	e3a02058	 mov         r2, #0x58
  00030	e3a01000	 mov         r1, #0
  00034	e1a00005	 mov         r0, r5
  00038	eb000000	 bl          memset

; 623  : 
; 624  :     // Try 32-bit geometry
; 625  :     OUTREG32((UINT32*)(base + 4 * 0x55), 0x98989898);

  0003c	e59f13c8	 ldr         r1, [pc, #0x3C8]
  00040	e2860f55	 add         r0, r6, #0x55, 30
  00044	eb000000	 bl          WRITE_REGISTER_ULONG

; 626  :     code1 = INREG32((UINT32*)(base + 4 * 0x10));

  00048	e2860040	 add         r0, r6, #0x40
  0004c	eb000000	 bl          READ_REGISTER_ULONG
  00050	e1a08000	 mov         r8, r0

; 627  :     code2 = INREG32((UINT32*)(base + 4 * 0x11));

  00054	e2860044	 add         r0, r6, #0x44
  00058	eb000000	 bl          READ_REGISTER_ULONG
  0005c	e1a04000	 mov         r4, r0

; 628  :     code3 = INREG32((UINT32*)(base + 4 * 0x12));

  00060	e2860048	 add         r0, r6, #0x48
  00064	eb000000	 bl          READ_REGISTER_ULONG

; 629  :     if (code1 == 'QQQQ' && code2 == 'RRRR' && code3 == 'YYYY')

  00068	e59f3398	 ldr         r3, [pc, #0x398]
  0006c	e3a02004	 mov         r2, #4
  00070	e3a09001	 mov         r9, #1
  00074	e1580003	 cmp         r8, r3
  00078	1a000008	 bne         |$LN26@OALFlashIn|
  0007c	e59f3380	 ldr         r3, [pc, #0x380]
  00080	e1540003	 cmp         r4, r3
  00084	1a00001b	 bne         |$LN22@OALFlashIn|
  00088	e59f3370	 ldr         r3, [pc, #0x370]
  0008c	e1500003	 cmp         r0, r3
  00090	1a000018	 bne         |$LN22@OALFlashIn|

; 630  :         {
; 631  :         pInfo->width = 4;

  00094	e5852000	 str         r2, [r5]

; 632  :         pInfo->parallel = 4;

  00098	e5852004	 str         r2, [r5, #4]
  0009c	ea00004e	 b           |$LN15@OALFlashIn|
  000a0		 |$LN26@OALFlashIn|
  000a0	e3a03851	 mov         r3, #0x51, 16

; 633  :         }
; 634  :     else if (code1 == 'Q\0Q\0' && code2 == 'R\0R\0' && code3 == 'Y\0Y\0')

  000a4	e3833051	 orr         r3, r3, #0x51
  000a8	e1580003	 cmp         r8, r3
  000ac	1a00000b	 bne         |$LN24@OALFlashIn|
  000b0	e3a03852	 mov         r3, #0x52, 16
  000b4	e3833052	 orr         r3, r3, #0x52
  000b8	e1540003	 cmp         r4, r3
  000bc	1a00000d	 bne         |$LN22@OALFlashIn|
  000c0	e3a03859	 mov         r3, #0x59, 16
  000c4	e3833059	 orr         r3, r3, #0x59
  000c8	e1500003	 cmp         r0, r3
  000cc	1a000009	 bne         |$LN22@OALFlashIn|

; 635  :         {
; 636  :         pInfo->width = 4;
; 637  :         pInfo->parallel = 2;

  000d0	e3a03002	 mov         r3, #2
  000d4	e5853004	 str         r3, [r5, #4]
  000d8	e5852000	 str         r2, [r5]
  000dc	ea00003e	 b           |$LN15@OALFlashIn|
  000e0		 |$LN24@OALFlashIn|

; 638  :         }
; 639  :     else if (code1 == 'Q\0\0\0' && code2 == 'R\0\0\0' && code3 == 'Y\0\0\0')

  000e0	e3580c51	 cmp         r8, #0x51, 24
  000e4	1a000003	 bne         |$LN22@OALFlashIn|
  000e8	e3540c52	 cmp         r4, #0x52, 24
  000ec	03500c59	 cmpeq       r0, #0x59, 24

; 640  :         {
; 641  :         pInfo->width = 4;

  000f0	05852000	 streq       r2, [r5]
  000f4	0a000037	 beq         |$LN38@OALFlashIn|
  000f8		 |$LN22@OALFlashIn|

; 642  :         pInfo->parallel = 1;
; 643  :         }
; 644  :     else 
; 645  :         {
; 646  :         // Now try luck with 16-bit geometry
; 647  :         OUTREG16((UINT16*)(base + 2 * 0x55), 0x0098);

  000f8	e3a01098	 mov         r1, #0x98
  000fc	e28600aa	 add         r0, r6, #0xAA
  00100	eb000000	 bl          WRITE_REGISTER_USHORT

; 648  :         code1 = INREG16((UINT16*)(base + 2 * 0x10));

  00104	e2860020	 add         r0, r6, #0x20
  00108	eb000000	 bl          READ_REGISTER_USHORT
  0010c	e1a08800	 mov         r8, r0, lsl #16

; 649  :         code2 = INREG16((UINT16*)(base + 2 * 0x11));

  00110	e2860022	 add         r0, r6, #0x22
  00114	e1a08828	 mov         r8, r8, lsr #16
  00118	eb000000	 bl          READ_REGISTER_USHORT
  0011c	e1a04800	 mov         r4, r0, lsl #16

; 650  :         code3 = INREG16((UINT16*)(base + 2 * 0x12));

  00120	e2860024	 add         r0, r6, #0x24
  00124	e1a04824	 mov         r4, r4, lsr #16
  00128	eb000000	 bl          READ_REGISTER_USHORT
  0012c	e3a03c51	 mov         r3, #0x51, 24

; 651  :         if (code1 == 'QQ' && code2 == 'RR' && code3 == 'YY')

  00130	e3833051	 orr         r3, r3, #0x51
  00134	e1a02800	 mov         r2, r0, lsl #16
  00138	e1580003	 cmp         r8, r3
  0013c	e1a02822	 mov         r2, r2, lsr #16
  00140	1a00000b	 bne         |$LN20@OALFlashIn|
  00144	e3a03c52	 mov         r3, #0x52, 24
  00148	e3833052	 orr         r3, r3, #0x52
  0014c	e1540003	 cmp         r4, r3
  00150	1a00000e	 bne         |$LN18@OALFlashIn|
  00154	e3a03c59	 mov         r3, #0x59, 24
  00158	e3833059	 orr         r3, r3, #0x59
  0015c	e1520003	 cmp         r2, r3
  00160	1a00000a	 bne         |$LN18@OALFlashIn|

; 652  :             {
; 653  :             pInfo->width = 2;

  00164	e3a03002	 mov         r3, #2
  00168	e5853000	 str         r3, [r5]

; 654  :             pInfo->parallel = 2;

  0016c	e5853004	 str         r3, [r5, #4]
  00170	ea000019	 b           |$LN15@OALFlashIn|
  00174		 |$LN20@OALFlashIn|

; 655  :             }
; 656  :         else if (code1 == '\0Q' && code2 == '\0R' && code3 == '\0Y')

  00174	e3580051	 cmp         r8, #0x51
  00178	1a000004	 bne         |$LN18@OALFlashIn|
  0017c	e3540052	 cmp         r4, #0x52
  00180	03520059	 cmpeq       r2, #0x59

; 657  :             {
; 658  :             pInfo->width = 2;

  00184	03a03002	 moveq       r3, #2
  00188	05853000	 streq       r3, [r5]
  0018c	0a000011	 beq         |$LN38@OALFlashIn|
  00190		 |$LN18@OALFlashIn|

; 659  :             pInfo->parallel = 1;
; 660  :             }
; 661  :         else 
; 662  :             {
; 663  :             // So last opportunity is 8-bit mode
; 664  :             OUTREG8((UINT8*)(base + 0x55), 0x98);

  00190	e3a01098	 mov         r1, #0x98
  00194	e2860055	 add         r0, r6, #0x55
  00198	eb000000	 bl          WRITE_REGISTER_UCHAR

; 665  :             code1 = INREG8((UINT8*)(base + 0x10));

  0019c	e2860010	 add         r0, r6, #0x10
  001a0	eb000000	 bl          READ_REGISTER_UCHAR
  001a4	e1a04000	 mov         r4, r0

; 666  :             code2 = INREG8((UINT8*)(base + 0x11));

  001a8	e2860011	 add         r0, r6, #0x11
  001ac	eb000000	 bl          READ_REGISTER_UCHAR
  001b0	e1a08000	 mov         r8, r0

; 667  :             code3 = INREG8((UINT8*)(base + 0x12));

  001b4	e2860012	 add         r0, r6, #0x12
  001b8	eb000000	 bl          READ_REGISTER_UCHAR

; 668  :             if (code1 == 'Q' && code2 == 'R' && code3 == 'Y')

  001bc	e3540051	 cmp         r4, #0x51
  001c0	1a000081	 bne         |$cleanUp$43404|
  001c4	e3580052	 cmp         r8, #0x52
  001c8	1a00007f	 bne         |$cleanUp$43404|
  001cc	e3500059	 cmp         r0, #0x59
  001d0	1a00007d	 bne         |$cleanUp$43404|

; 669  :                 {
; 670  :                 pInfo->width = 1;

  001d4	e5859000	 str         r9, [r5]
  001d8		 |$LN38@OALFlashIn|

; 671  :                 pInfo->parallel = 1;

  001d8	e5859004	 str         r9, [r5, #4]
  001dc		 |$LN15@OALFlashIn|

; 672  :                 }
; 673  :             else 
; 674  :                 {
; 675  :                 goto cleanUp;
; 676  :                 }                
; 677  :             }
; 678  :         }        
; 679  : 
; 680  :     // Read primary command set, size, burst size and number of regions
; 681  :     pInfo->set = ReadInfo(pInfo, base, 0x13, 0, 1);

  001dc	e3a03000	 mov         r3, #0
  001e0	e3a02013	 mov         r2, #0x13
  001e4	e1a01006	 mov         r1, r6
  001e8	e1a00005	 mov         r0, r5
  001ec	e58d9000	 str         r9, [sp]
  001f0	eb000000	 bl          ReadInfo
  001f4	e1a03000	 mov         r3, r0

; 682  :     pInfo->size = 1 << ReadInfo(pInfo, base, 0x27, 0, 1);

  001f8	e5853008	 str         r3, [r5, #8]
  001fc	e3a03000	 mov         r3, #0
  00200	e1a00005	 mov         r0, r5
  00204	e3a02027	 mov         r2, #0x27
  00208	e1a01006	 mov         r1, r6
  0020c	e58d9000	 str         r9, [sp]
  00210	eb000000	 bl          ReadInfo
  00214	e3a03001	 mov         r3, #1
  00218	e1a02013	 mov         r2, r3, lsl r0

; 683  :     pInfo->burst = 1 << ReadInfo(pInfo, base, 0x2A, 0, 1);

  0021c	e3a03000	 mov         r3, #0
  00220	e585200c	 str         r2, [r5, #0xC]
  00224	e3a0202a	 mov         r2, #0x2A
  00228	e1a01006	 mov         r1, r6
  0022c	e1a00005	 mov         r0, r5
  00230	e58d9000	 str         r9, [sp]
  00234	eb000000	 bl          ReadInfo
  00238	e3a03001	 mov         r3, #1
  0023c	e1a02013	 mov         r2, r3, lsl r0

; 684  :     pInfo->regions = ReadInfo(pInfo, base, 0x2C, 0, 1);

  00240	e3a03000	 mov         r3, #0
  00244	e5852010	 str         r2, [r5, #0x10]
  00248	e3a0202c	 mov         r2, #0x2C
  0024c	e1a01006	 mov         r1, r6
  00250	e1a00005	 mov         r0, r5
  00254	e58d9000	 str         r9, [sp]
  00258	eb000000	 bl          ReadInfo

; 685  : 
; 686  :     // Verify that parallel chips are same
; 687  :     for (i = 1; i < pInfo->parallel; i++)

  0025c	e5953004	 ldr         r3, [r5, #4]
  00260	e5850014	 str         r0, [r5, #0x14]
  00264	e3a04001	 mov         r4, #1
  00268	e3530001	 cmp         r3, #1
  0026c	9a000029	 bls         |$LN12@OALFlashIn|
  00270	e3a08001	 mov         r8, #1
  00274	e3a0a001	 mov         r10, #1
  00278		 |$LL14@OALFlashIn|

; 688  :         {
; 689  :             if ( (pInfo->set != ReadInfo(pInfo, base, 0x13, i, 1)) ||
; 690  :                  (pInfo->size != (1 << ReadInfo(pInfo, base, 0x27, 0, 1))) ||
; 691  :                  (pInfo->burst != (1 << ReadInfo(pInfo, base, 0x2A, 0, 1))) ||
; 692  :                  (pInfo->regions != ReadInfo(pInfo, base, 0x2C, 0, 1)) )

  00278	e1a03004	 mov         r3, r4
  0027c	e3a02013	 mov         r2, #0x13
  00280	e1a01006	 mov         r1, r6
  00284	e1a00005	 mov         r0, r5
  00288	e58d9000	 str         r9, [sp]
  0028c	eb000000	 bl          ReadInfo
  00290	e5953008	 ldr         r3, [r5, #8]
  00294	e1530000	 cmp         r3, r0
  00298	1a00004b	 bne         |$cleanUp$43404|
  0029c	e3a03000	 mov         r3, #0
  002a0	e3a02027	 mov         r2, #0x27
  002a4	e1a01006	 mov         r1, r6
  002a8	e1a00005	 mov         r0, r5
  002ac	e58d9000	 str         r9, [sp]
  002b0	eb000000	 bl          ReadInfo
  002b4	e595300c	 ldr         r3, [r5, #0xC]
  002b8	e1530018	 cmp         r3, r8, lsl r0
  002bc	1a000042	 bne         |$cleanUp$43404|
  002c0	e3a03000	 mov         r3, #0
  002c4	e3a0202a	 mov         r2, #0x2A
  002c8	e1a01006	 mov         r1, r6
  002cc	e1a00005	 mov         r0, r5
  002d0	e58d9000	 str         r9, [sp]
  002d4	eb000000	 bl          ReadInfo
  002d8	e5953010	 ldr         r3, [r5, #0x10]
  002dc	e153001a	 cmp         r3, r10, lsl r0
  002e0	1a000039	 bne         |$cleanUp$43404|
  002e4	e3a03000	 mov         r3, #0
  002e8	e3a0202c	 mov         r2, #0x2C
  002ec	e1a01006	 mov         r1, r6
  002f0	e1a00005	 mov         r0, r5
  002f4	e58d9000	 str         r9, [sp]
  002f8	eb000000	 bl          ReadInfo
  002fc	e5953014	 ldr         r3, [r5, #0x14]
  00300	e1530000	 cmp         r3, r0
  00304	1a000030	 bne         |$cleanUp$43404|
  00308	e5953004	 ldr         r3, [r5, #4]
  0030c	e2844001	 add         r4, r4, #1
  00310	e1540003	 cmp         r4, r3
  00314	3affffd7	 bcc         |$LL14@OALFlashIn|
  00318		 |$LN12@OALFlashIn|

; 693  :                 {
; 694  :                     goto cleanUp;
; 695  :                 }
; 696  :             
; 697  :         }
; 698  :     
; 699  :     // If there is more regions than expected
; 700  :     if (pInfo->regions > 8) goto cleanUp;

  00318	e5953014	 ldr         r3, [r5, #0x14]
  0031c	e3530008	 cmp         r3, #8
  00320	8a000029	 bhi         |$cleanUp$43404|

; 701  :    
; 702  :     // Read region info
; 703  :     for (i = 0; i < pInfo->regions; i++)

  00324	e3a07000	 mov         r7, #0
  00328	e3530000	 cmp         r3, #0
  0032c	0a000019	 beq         |$LN6@OALFlashIn|
  00330	e3a03cff	 mov         r3, #0xFF, 24
  00334	e3e024ff	 mvn         r2, #0xFF, 8
  00338	e38390ff	 orr         r9, r3, #0xFF
  0033c	e222a0ff	 eor         r10, r2, #0xFF
  00340	e1a04005	 mov         r4, r5
  00344	e265802d	 rsb         r8, r5, #0x2D
  00348	e3a0b004	 mov         r11, #4
  0034c		 |$LL8@OALFlashIn|

; 704  :         {
; 705  :         code1 = ReadInfo(pInfo, base, 0x2d + (i << 2), 0, 4);

  0034c	e3a03000	 mov         r3, #0
  00350	e0882004	 add         r2, r8, r4
  00354	e1a01006	 mov         r1, r6
  00358	e1a00005	 mov         r0, r5
  0035c	e58db000	 str         r11, [sp]
  00360	eb000000	 bl          ReadInfo

; 706  :         pInfo->aBlocks[i] = (code1 & 0xFFFF) + 1;

  00364	e0003009	 and         r3, r0, r9
  00368	e2833001	 add         r3, r3, #1

; 707  :         pInfo->aBlockSize[i] = (code1 >> 8) & 0x00FFFF00;

  0036c	e01a2420	 ands        r2, r10, r0, lsr #8
  00370	e5843038	 str         r3, [r4, #0x38]

; 708  :         if (pInfo->aBlockSize[i] == 0) pInfo->aBlockSize[i] = 128;

  00374	03a03080	 moveq       r3, #0x80
  00378	e5842018	 str         r2, [r4, #0x18]
  0037c	05843018	 streq       r3, [r4, #0x18]
  00380	e5953014	 ldr         r3, [r5, #0x14]
  00384	e2877001	 add         r7, r7, #1
  00388	e2844004	 add         r4, r4, #4
  0038c	e1570003	 cmp         r7, r3
  00390	3affffed	 bcc         |$LL8@OALFlashIn|
  00394	e59fb060	 ldr         r11, [pc, #0x60]
  00398		 |$LN6@OALFlashIn|

; 709  :         }
; 710  : 
; 711  :     // Switch back to read mode
; 712  :     switch (pInfo->set)

  00398	e5953008	 ldr         r3, [r5, #8]
  0039c	e3530001	 cmp         r3, #1
  003a0	0a000003	 beq         |$LN2@OALFlashIn|
  003a4	e3530002	 cmp         r3, #2
  003a8	0a000010	 beq         |$LN1@OALFlashIn|
  003ac	e3530003	 cmp         r3, #3
  003b0	1a000004	 bne         |$LN3@OALFlashIn|
  003b4		 |$LN2@OALFlashIn|

; 713  :         {
; 714  :         case 1:  // Intel/Sharp
; 715  :         case 3:
; 716  :             WriteCommand(pInfo, base, 0, 0xFF);

  003b4	e3a030ff	 mov         r3, #0xFF
  003b8		 |$LN39@OALFlashIn|
  003b8	e3a02000	 mov         r2, #0
  003bc	e1a01006	 mov         r1, r6
  003c0	e1a00005	 mov         r0, r5
  003c4	eb000000	 bl          WriteCommand
  003c8		 |$LN3@OALFlashIn|

; 721  :         }      
; 722  : 
; 723  :     rc = TRUE;

  003c8	e3a07001	 mov         r7, #1
  003cc		 |$cleanUp$43404|

; 724  : 
; 725  : cleanUp:
; 726  :     OALMSG(OAL_FUNC, (L"-OALFlashInfo(rc = %d)\r\n", rc));

  003cc	e59b3440	 ldr         r3, [r11, #0x440]
  003d0	e3130004	 tst         r3, #4
  003d4	159f001c	 ldrne       r0, [pc, #0x1C]
  003d8	11a01007	 movne       r1, r7
  003dc	1b000000	 blne        NKDbgPrintfW

; 727  :     return rc;
; 728  : }

  003e0	e1a00007	 mov         r0, r7
  003e4	e28dd004	 add         sp, sp, #4
  003e8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  003ec	e12fff1e	 bx          lr
  003f0		 |$LN1@OALFlashIn|

; 717  :             break;
; 718  :         case 2:  // AMD/Fujitsu
; 719  :             WriteCommand(pInfo, base, 0, 0xF0);

  003f0	e3a030f0	 mov         r3, #0xF0

; 720  :             break;

  003f4	eaffffef	 b           |$LN39@OALFlashIn|
  003f8		 |$LN43@OALFlashIn|
  003f8		 |$LN44@OALFlashIn|
  003f8	00000000	 DCD         |??_C@_1DC@LLEMLIAM@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  003fc		 |$LN45@OALFlashIn|
  003fc	00000000	 DCD         |dpCurSettings|
  00400		 |$LN46@OALFlashIn|
  00400	59595959	 DCD         0x59595959
  00404		 |$LN47@OALFlashIn|
  00404	52525252	 DCD         0x52525252
  00408		 |$LN48@OALFlashIn|
  00408	51515151	 DCD         0x51515151
  0040c		 |$LN49@OALFlashIn|
  0040c	98989898	 DCD         0x98989898
  00410		 |$LN50@OALFlashIn|
  00410	00000000	 DCD         |??_C@_1DK@HABCIMDF@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00414		 |$M44071|

			 ENDP  ; |OALFlashInfo|

	EXPORT	|OALFlashTiming|

  00000			 AREA	 |.pdata|, PDATA
|$T44095| DCD	|$LN11@OALFlashTi|
	DCD	0x40005102
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashTiming| PROC

; 737  : {

  00000		 |$LN11@OALFlashTi|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd05c	 sub         sp, sp, #0x5C
  00008		 |$M44092|
  00008	e1a06001	 mov         r6, r1
  0000c	e1a04000	 mov         r4, r0

; 738  :     BOOL rc = FALSE;
; 739  :     UINT32 base = (UINT32)pBase;
; 740  :     OAL_FLASH_INFO info;
; 741  : 
; 742  :     // Ther read first chip info
; 743  :     if (!OALFlashInfo((VOID*)base, &info)) goto cleanUp;

  00010	e28d1004	 add         r1, sp, #4
  00014	e3a05000	 mov         r5, #0
  00018	eb000000	 bl          OALFlashInfo
  0001c	e3500000	 cmp         r0, #0
  00020	0a000041	 beq         |$cleanUp$43434|

; 744  : 
; 745  :     // Switch to CFI Query
; 746  :     WriteCommand(&info, base, 0x55, 0x98);

  00024	e3a03098	 mov         r3, #0x98
  00028	e3a02055	 mov         r2, #0x55
  0002c	e1a01004	 mov         r1, r4
  00030	e28d0004	 add         r0, sp, #4
  00034	eb000000	 bl          WriteCommand

; 747  :     
; 748  :     // Read timeout parameters
; 749  :     pTimingInfo->writeDelay    = ReadInfo(&info, base, 0x1F, 0, 1);

  00038	e3a05001	 mov         r5, #1
  0003c	e3a03000	 mov         r3, #0
  00040	e3a0201f	 mov         r2, #0x1F
  00044	e1a01004	 mov         r1, r4
  00048	e28d0004	 add         r0, sp, #4
  0004c	e58d5000	 str         r5, [sp]
  00050	eb000000	 bl          ReadInfo
  00054	e1a03000	 mov         r3, r0

; 750  :     pTimingInfo->writeTimeout  = ReadInfo(&info, base, 0x23, 0, 1);

  00058	e5863000	 str         r3, [r6]
  0005c	e3a03000	 mov         r3, #0
  00060	e28d0004	 add         r0, sp, #4
  00064	e3a02023	 mov         r2, #0x23
  00068	e1a01004	 mov         r1, r4
  0006c	e58d5000	 str         r5, [sp]
  00070	eb000000	 bl          ReadInfo
  00074	e1a03000	 mov         r3, r0

; 751  :     pTimingInfo->bufferDelay   = ReadInfo(&info, base, 0x20, 0, 1);

  00078	e5863004	 str         r3, [r6, #4]
  0007c	e3a03000	 mov         r3, #0
  00080	e28d0004	 add         r0, sp, #4
  00084	e3a02020	 mov         r2, #0x20
  00088	e1a01004	 mov         r1, r4
  0008c	e58d5000	 str         r5, [sp]
  00090	eb000000	 bl          ReadInfo
  00094	e1a03000	 mov         r3, r0

; 752  :     pTimingInfo->bufferTimeout = ReadInfo(&info, base, 0x24, 0, 1);

  00098	e5863008	 str         r3, [r6, #8]
  0009c	e3a03000	 mov         r3, #0
  000a0	e28d0004	 add         r0, sp, #4
  000a4	e3a02024	 mov         r2, #0x24
  000a8	e1a01004	 mov         r1, r4
  000ac	e58d5000	 str         r5, [sp]
  000b0	eb000000	 bl          ReadInfo
  000b4	e1a03000	 mov         r3, r0

; 753  :     pTimingInfo->eraseDelay    = ReadInfo(&info, base, 0x21, 0, 1);

  000b8	e586300c	 str         r3, [r6, #0xC]
  000bc	e3a03000	 mov         r3, #0
  000c0	e28d0004	 add         r0, sp, #4
  000c4	e3a02021	 mov         r2, #0x21
  000c8	e1a01004	 mov         r1, r4
  000cc	e58d5000	 str         r5, [sp]
  000d0	eb000000	 bl          ReadInfo
  000d4	e1a03000	 mov         r3, r0

; 754  :     pTimingInfo->eraseTimeout  = ReadInfo(&info, base, 0x25, 0, 1);

  000d8	e5863010	 str         r3, [r6, #0x10]
  000dc	e3a03000	 mov         r3, #0
  000e0	e28d0004	 add         r0, sp, #4
  000e4	e3a02025	 mov         r2, #0x25
  000e8	e1a01004	 mov         r1, r4
  000ec	e58d5000	 str         r5, [sp]
  000f0	eb000000	 bl          ReadInfo

; 755  : 
; 756  :     // Switch back to read mode
; 757  :     switch (info.set)

  000f4	e59d300c	 ldr         r3, [sp, #0xC]
  000f8	e5860014	 str         r0, [r6, #0x14]
  000fc	e3530001	 cmp         r3, #1
  00100	0a000003	 beq         |$LN2@OALFlashTi|
  00104	e3530002	 cmp         r3, #2
  00108	0a00000b	 beq         |$LN1@OALFlashTi|
  0010c	e3530003	 cmp         r3, #3
  00110	1a000004	 bne         |$LN3@OALFlashTi|
  00114		 |$LN2@OALFlashTi|

; 758  :         {
; 759  :         case 1:  // Intel/Sharp
; 760  :         case 3:
; 761  :             WriteCommand(&info, base, 0, 0xFF);

  00114	e3a030ff	 mov         r3, #0xFF
  00118		 |$LN8@OALFlashTi|
  00118	e3a02000	 mov         r2, #0
  0011c	e1a01004	 mov         r1, r4
  00120	e28d0004	 add         r0, sp, #4
  00124	eb000000	 bl          WriteCommand
  00128		 |$LN3@OALFlashTi|

; 766  :         }      
; 767  : 
; 768  :     rc = TRUE;

  00128	e3a05001	 mov         r5, #1
  0012c		 |$cleanUp$43434|

; 769  :     
; 770  : cleanUp:
; 771  :     return rc;
; 772  : }

  0012c	e1a00005	 mov         r0, r5
  00130	e28dd05c	 add         sp, sp, #0x5C
  00134	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00138	e12fff1e	 bx          lr
  0013c		 |$LN1@OALFlashTi|

; 762  :             break;
; 763  :         case 2:  // AMD/Fujitsu
; 764  :             WriteCommand(&info, base, 0, 0xF0);

  0013c	e3a030f0	 mov         r3, #0xF0

; 765  :             break;

  00140	eafffff4	 b           |$LN8@OALFlashTi|
  00144		 |$M44093|

			 ENDP  ; |OALFlashTiming|

	EXPORT	|OALFlashLock|

  00000			 AREA	 |.pdata|, PDATA
|$T44148| DCD	|$LN40@OALFlashLo|
	DCD	0x40006602
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashLock| PROC

; 787  : {

  00000		 |$LN40@OALFlashLo|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd064	 sub         sp, sp, #0x64
  00008		 |$M44145|
  00008	e1a07003	 mov         r7, r3
  0000c	e1a03001	 mov         r3, r1
  00010	e58d3004	 str         r3, [sp, #4]
  00014	e58d7000	 str         r7, [sp]
  00018	e1a04000	 mov         r4, r0

; 788  :     BOOL rc = FALSE;
; 789  :     OAL_FLASH_INFO info;
; 790  :     UINT32 base = (UINT32)pBase;
; 791  :     UINT32 start = (UINT32)pStart;
; 792  :     UINT32 end, chip, blockStart, blockEnd;
; 793  :     UINT32 region, block;
; 794  : 
; 795  : 
; 796  :     // First get end addresss
; 797  :     end = start + size;
; 798  :    
; 799  :     // Ther read first chip info
; 800  :     if (!OALFlashInfo((VOID*)base, &info))

  0001c	e28d100c	 add         r1, sp, #0xC
  00020	e3a08000	 mov         r8, #0
  00024	e083a002	 add         r10, r3, r2
  00028	eb000000	 bl          OALFlashInfo
  0002c	e3500000	 cmp         r0, #0
  00030	0a000054	 beq         |$cleanUp$43464|

; 801  :         {
; 802  :             goto cleanUp;
; 803  :         }
; 804  : 
; 805  :     region = block = 0;

  00034	e3a06000	 mov         r6, #0
  00038	e3a05000	 mov         r5, #0

; 806  :     blockStart = chip = base;
; 807  :     while (blockStart < end)

  0003c	e154000a	 cmp         r4, r10
  00040	2a00004f	 bcs         |$LN34@OALFlashLo|
  00044		 |$LN37@OALFlashLo|
  00044	e59d0010	 ldr         r0, [sp, #0x10]
  00048	e59d9014	 ldr         r9, [sp, #0x14]
  0004c	e59d1020	 ldr         r1, [sp, #0x20]
  00050	e28d300c	 add         r3, sp, #0xC
  00054		 |$LL14@OALFlashLo|

; 808  :         {
; 809  : 
; 810  :         // Block end
; 811  :         blockEnd = blockStart + info.aBlockSize[region] * info.parallel;

  00054	e0832105	 add         r2, r3, r5, lsl #2
  00058	e5923018	 ldr         r3, [r2, #0x18]
  0005c	e58d2008	 str         r2, [sp, #8]
  00060	e02b4390	 mla         r11, r0, r3, r4

; 812  : 
; 813  :         // Should block be erased?
; 814  :         if (start < blockEnd && end >= blockStart)

  00064	e59d3004	 ldr         r3, [sp, #4]
  00068	e153000b	 cmp         r3, r11
  0006c	2a000031	 bcs         |$LN8@OALFlashLo|
  00070	e15a0004	 cmp         r10, r4
  00074	3a00002f	 bcc         |$LN8@OALFlashLo|

; 815  :             {
; 816  :             switch (info.set)

  00078	e3590001	 cmp         r9, #1
  0007c	0a000003	 beq         |$LN9@OALFlashLo|
  00080	e3590002	 cmp         r9, #2
  00084	0a00002b	 beq         |$LN8@OALFlashLo|
  00088	e3590003	 cmp         r9, #3
  0008c	1a00003d	 bne         |$cleanUp$43464|
  00090		 |$LN9@OALFlashLo|

; 817  :                 {
; 818  : 
; 819  : #ifndef OAL_FLASH_NO_COMMAND_SET_1                
; 820  :                 case 1: // Intel/Sharp
; 821  :                 case 3:
; 822  :                     if (!LockBlock1(&info, chip, blockStart, lock))

  00090	e3570000	 cmp         r7, #0
  00094	13a07001	 movne       r7, #1
  00098	e3a03060	 mov         r3, #0x60
  0009c	e3a02000	 mov         r2, #0
  000a0	e1a01004	 mov         r1, r4
  000a4	e28d000c	 add         r0, sp, #0xC
  000a8	03a070d0	 moveq       r7, #0xD0
  000ac	eb000000	 bl          WriteCommand
  000b0	e20730ff	 and         r3, r7, #0xFF
  000b4	e3a02000	 mov         r2, #0
  000b8	e1a01004	 mov         r1, r4
  000bc	e28d000c	 add         r0, sp, #0xC
  000c0	eb000000	 bl          WriteCommand
  000c4	e3a03090	 mov         r3, #0x90
  000c8	e3a02002	 mov         r2, #2
  000cc	e1a01004	 mov         r1, r4
  000d0	e28d000c	 add         r0, sp, #0xC
  000d4	eb000000	 bl          WriteCommand
  000d8	e59d3000	 ldr         r3, [sp]
  000dc	e3a02002	 mov         r2, #2
  000e0	e1a01004	 mov         r1, r4
  000e4	e3530000	 cmp         r3, #0
  000e8	e28d000c	 add         r0, sp, #0xC
  000ec	0a000001	 beq         |$LN19@OALFlashLo|
  000f0	eb000000	 bl          BitsAnd
  000f4	ea000000	 b           |$LN36@OALFlashLo|
  000f8		 |$LN19@OALFlashLo|
  000f8	eb000000	 bl          BitsOr
  000fc		 |$LN36@OALFlashLo|
  000fc	e1a07000	 mov         r7, r0
  00100	e28d000c	 add         r0, sp, #0xC
  00104	e3a030ff	 mov         r3, #0xFF
  00108	e3a02000	 mov         r2, #0
  0010c	e1a01004	 mov         r1, r4
  00110	eb000000	 bl          WriteCommand
  00114	e3170001	 tst         r7, #1
  00118	e59d7000	 ldr         r7, [sp]
  0011c	13a03001	 movne       r3, #1
  00120	03a03000	 moveq       r3, #0
  00124	e1530007	 cmp         r3, r7
  00128	1a000016	 bne         |$cleanUp$43464|
  0012c	e59d2008	 ldr         r2, [sp, #8]
  00130	e59d1020	 ldr         r1, [sp, #0x20]
  00134	e59d0010	 ldr         r0, [sp, #0x10]
  00138		 |$LN8@OALFlashLo|

; 823  :                         {
; 824  :                         goto cleanUp;
; 825  :                         }
; 826  :                     break;
; 827  : #endif OAL_FLASH_NO_COMMAND_SET_1                
; 828  :                     
; 829  : #ifndef OAL_FLASH_NO_COMMAND_SET_2
; 830  :                 case 2: // AMD
; 831  :                     if (!LockBlock2(&info, chip, blockStart, lock))
; 832  :                         {
; 833  :                         goto cleanUp;
; 834  :                         }                    
; 835  :                     break;
; 836  : #endif OAL_FLASH_NO_COMMAND_SET_2
; 837  :                 default:
; 838  :                     goto cleanUp;
; 839  :                 }
; 840  :             }         
; 841  : 
; 842  :         // Move to next block
; 843  :         blockStart = blockEnd;

  00138	e1a0400b	 mov         r4, r11

; 844  :         if (blockStart >= end) break;

  0013c	e15b000a	 cmp         r11, r10
  00140	2a00000f	 bcs         |$LN34@OALFlashLo|

; 845  :         if (++block >= info.aBlocks[region])

  00144	e5923038	 ldr         r3, [r2, #0x38]
  00148	e2866001	 add         r6, r6, #1
  0014c	e1560003	 cmp         r6, r3
  00150	e28d300c	 add         r3, sp, #0xC
  00154	3affffbe	 bcc         |$LL14@OALFlashLo|

; 846  :             {
; 847  :             block = 0;
; 848  :             if (++region >= info.regions)

  00158	e2855001	 add         r5, r5, #1
  0015c	e1550001	 cmp         r5, r1
  00160	e3a06000	 mov         r6, #0
  00164	e28d300c	 add         r3, sp, #0xC
  00168	3affffb9	 bcc         |$LL14@OALFlashLo|

; 849  :                 {
; 850  :                 // Try read next chip layout
; 851  :                 if (!OALFlashInfo((VOID*)block, &info)) break;

  0016c	e28d100c	 add         r1, sp, #0xC
  00170	e3a00000	 mov         r0, #0
  00174	eb000000	 bl          OALFlashInfo
  00178	e3500000	 cmp         r0, #0

; 852  :                 region = 0;

  0017c	13a05000	 movne       r5, #0
  00180	1affffaf	 bne         |$LN37@OALFlashLo|
  00184		 |$LN34@OALFlashLo|

; 853  :                 chip = block;
; 854  :                 }
; 855  :             }
; 856  :         }
; 857  : 
; 858  :     rc = TRUE;

  00184	e3a08001	 mov         r8, #1
  00188		 |$cleanUp$43464|

; 859  :    
; 860  : cleanUp:
; 861  :     return rc;
; 862  : }

  00188	e1a00008	 mov         r0, r8
  0018c	e28dd064	 add         sp, sp, #0x64
  00190	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00194	e12fff1e	 bx          lr
  00198		 |$M44146|

			 ENDP  ; |OALFlashLock|

	EXPORT	|OALFlashErase|
	EXPORT	|??_C@_1DE@HNBCKGCA@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@JKEJJFHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@CMIOIPEM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAg?$AAe?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@JNEIGENB@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44188| DCD	|$LN38@OALFlashEr|
	DCD	0x40007102

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@HNBCKGCA@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "E", 0x0, "r", 0x0, "a", 0x0, "s"
	DCB	0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@JKEJJFHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " "
	DCB	0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, "n", 0x0, "'"
	DCB	0x0, "t", 0x0, " ", 0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p"
	DCB	0x0, "o", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@CMIOIPEM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAg?$AAe?$AAt?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "E", 0x0, "r", 0x0, "a", 0x0, "s"
	DCB	0x0, "e", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "f", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h"
	DCB	0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@JNEIGENB@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "E", 0x0, "r", 0x0, "a", 0x0, "s"
	DCB	0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashErase| PROC

; 875  : {

  00000		 |$LN38@OALFlashEr|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd064	 sub         sp, sp, #0x64
  00008		 |$M44185|
  00008	e1a0b001	 mov         r11, r1
  0000c	e1a04000	 mov         r4, r0

; 876  :     BOOL rc = FALSE;
; 877  :     OAL_FLASH_INFO info;
; 878  :     UINT32 base = (UINT32)pBase;
; 879  :     UINT32 start = (UINT32)pStart;
; 880  :     UINT32 end = start + size;
; 881  :     UINT32 chip, blockStart, blockEnd;
; 882  :     UINT32 region, block;
; 883  : 
; 884  :     OALMSG(OAL_FUNC, (
; 885  :         L"+OALFlashErase(0x%08x, 0x%08x, 0x%08x)\r\n", pBase, pStart, size
; 886  :     ));

  00010	e59f51a8	 ldr         r5, [pc, #0x1A8]
  00014	e08b7002	 add         r7, r11, r2
  00018	e3a06000	 mov         r6, #0
  0001c	e5953440	 ldr         r3, [r5, #0x440]
  00020	e58d7004	 str         r7, [sp, #4]
  00024	e3130004	 tst         r3, #4
  00028	159f018c	 ldrne       r0, [pc, #0x18C]
  0002c	11a03002	 movne       r3, r2
  00030	11a0200b	 movne       r2, r11
  00034	11a01004	 movne       r1, r4
  00038	1b000000	 blne        NKDbgPrintfW

; 887  : 
; 888  :     // Read first chip layout
; 889  :     if (!OALFlashInfo((VOID*)base, &info))

  0003c	e28d100c	 add         r1, sp, #0xC
  00040	e1a00004	 mov         r0, r4
  00044	eb000000	 bl          OALFlashInfo
  00048	e3500000	 cmp         r0, #0
  0004c	1a000005	 bne         |$LN15@OALFlashEr|

; 890  :     {
; 891  :         OALMSG(OAL_ERROR, (
; 892  :             L"ERROR: OALFlashErase failed get flash memory info\r\n"
; 893  :         ));

  00050	e5953440	 ldr         r3, [r5, #0x440]
  00054	e3130001	 tst         r3, #1
  00058	0a00004b	 beq         |$cleanUp$43508|
  0005c	e59f0154	 ldr         r0, [pc, #0x154]
  00060	eb000000	 bl          NKDbgPrintfW

; 894  :             goto cleanUp;

  00064	ea000048	 b           |$cleanUp$43508|
  00068		 |$LN15@OALFlashEr|

; 895  :     }
; 896  : 
; 897  :     region = block = 0;

  00068	e3a02000	 mov         r2, #0
  0006c	e58d2000	 str         r2, [sp]
  00070	e3a08000	 mov         r8, #0

; 898  :     blockStart = chip = base;

  00074	e1a0a004	 mov         r10, r4

; 899  :     while (blockStart < end)

  00078	e1540007	 cmp         r4, r7
  0007c	2a000041	 bcs         |$LN30@OALFlashEr|
  00080		 |$LN34@OALFlashEr|
  00080	e59de010	 ldr         lr, [sp, #0x10]
  00084	e59d7014	 ldr         r7, [sp, #0x14]
  00088	e59d0020	 ldr         r0, [sp, #0x20]
  0008c	e28d300c	 add         r3, sp, #0xC
  00090		 |$LL14@OALFlashEr|

; 900  :         {
; 901  : 
; 902  :         // Block end (+1)
; 903  :         blockEnd = blockStart + info.aBlockSize[region] * info.parallel;

  00090	e0831108	 add         r1, r3, r8, lsl #2
  00094	e5913018	 ldr         r3, [r1, #0x18]
  00098	e58d1008	 str         r1, [sp, #8]
  0009c	e029a39e	 mla         r9, lr, r3, r10

; 904  : 
; 905  :         // Should block be erased?
; 906  :         if (start < blockEnd && end >= blockStart)

  000a0	e59d3004	 ldr         r3, [sp, #4]
  000a4	e15b0009	 cmp         r11, r9
  000a8	2a000012	 bcs         |$LN8@OALFlashEr|
  000ac	e153000a	 cmp         r3, r10
  000b0	3a000010	 bcc         |$LN8@OALFlashEr|

; 907  :             {
; 908  :             switch (info.set)

  000b4	e3570001	 cmp         r7, #1
  000b8	0a000003	 beq         |$LN9@OALFlashEr|
  000bc	e3570002	 cmp         r7, #2
  000c0	0a000024	 beq         |$LN7@OALFlashEr|
  000c4	e3570003	 cmp         r7, #3
  000c8	1a000027	 bne         |$LN27@OALFlashEr|
  000cc		 |$LN9@OALFlashEr|

; 909  :                 {
; 910  : 
; 911  : #ifndef OAL_FLASH_NO_COMMAND_SET_1                
; 912  :                 case 1: // Intel/Sharp
; 913  :                 case 3:
; 914  :                     if (!EraseBlock1(&info, chip, blockStart))

  000cc	e1a0200a	 mov         r2, r10
  000d0	e1a01004	 mov         r1, r4
  000d4	e28d000c	 add         r0, sp, #0xC
  000d8	eb000000	 bl          EraseBlock1
  000dc		 |$LN35@OALFlashEr|
  000dc	e3500000	 cmp         r0, #0
  000e0	0a000029	 beq         |$cleanUp$43508|

; 935  :                 }
; 936  :             }         
; 937  : 
; 938  :         // Move to next block
; 939  :         blockStart = blockEnd;
; 940  :         if (blockStart >= end) break;
; 941  :         if (++block >= info.aBlocks[region])
; 942  :             {
; 943  :             block = 0;
; 944  :             if (++region >= info.regions)
; 945  :                 {
; 946  :                 // Try read next chip info
; 947  :                 if (!OALFlashInfo((VOID*)blockStart, &info)) break;
; 948  :                 region = 0;
; 949  :                 chip = blockStart;

  000e4	e59de010	 ldr         lr, [sp, #0x10]
  000e8	e59d0020	 ldr         r0, [sp, #0x20]
  000ec	e59d1008	 ldr         r1, [sp, #8]
  000f0	e59d3004	 ldr         r3, [sp, #4]
  000f4	e59d2000	 ldr         r2, [sp]
  000f8		 |$LN8@OALFlashEr|
  000f8	e1a0a009	 mov         r10, r9
  000fc	e1590003	 cmp         r9, r3
  00100	2a000020	 bcs         |$LN30@OALFlashEr|
  00104	e5913038	 ldr         r3, [r1, #0x38]
  00108	e2822001	 add         r2, r2, #1
  0010c	e58d2000	 str         r2, [sp]
  00110	e1520003	 cmp         r2, r3
  00114	e28d300c	 add         r3, sp, #0xC
  00118	3affffdc	 bcc         |$LL14@OALFlashEr|
  0011c	e2888001	 add         r8, r8, #1
  00120	e3a02000	 mov         r2, #0
  00124	e1580000	 cmp         r8, r0
  00128	e58d2000	 str         r2, [sp]
  0012c	e28d300c	 add         r3, sp, #0xC
  00130	3affffd6	 bcc         |$LL14@OALFlashEr|
  00134	e28d100c	 add         r1, sp, #0xC
  00138	e1a00009	 mov         r0, r9
  0013c	eb000000	 bl          OALFlashInfo
  00140	e3500000	 cmp         r0, #0
  00144	0a00000f	 beq         |$LN30@OALFlashEr|
  00148	e59d2000	 ldr         r2, [sp]
  0014c	e3a08000	 mov         r8, #0
  00150	e1a04009	 mov         r4, r9
  00154	eaffffc9	 b           |$LN34@OALFlashEr|
  00158		 |$LN7@OALFlashEr|

; 915  :                         {
; 916  :                         goto cleanUp;
; 917  :                         }
; 918  :                     break;
; 919  : #endif OAL_FLASH_NO_COMMAND_SET_1                
; 920  : 
; 921  : #ifndef OAL_FLASH_NO_COMMAND_SET_2
; 922  :                 case 2: // AMD
; 923  :                     if (!EraseBlock2(&info, chip, blockStart))

  00158	e1a0200a	 mov         r2, r10
  0015c	e1a01004	 mov         r1, r4
  00160	e28d000c	 add         r0, sp, #0xC
  00164	eb000000	 bl          EraseBlock2

; 924  :                         {
; 925  :                         goto cleanUp;
; 926  :                         }                    
; 927  :                     break;

  00168	eaffffdb	 b           |$LN35@OALFlashEr|
  0016c		 |$LN27@OALFlashEr|

; 890  :     {
; 891  :         OALMSG(OAL_ERROR, (
; 892  :             L"ERROR: OALFlashErase failed get flash memory info\r\n"
; 893  :         ));

  0016c	e5953440	 ldr         r3, [r5, #0x440]

; 928  : #endif OAL_FLASH_NO_COMMAND_SET_2
; 929  : 
; 930  :                 default:
; 931  :                 OALMSG(OAL_ERROR, (
; 932  :                     L"ERROR: Flash type %d isn't supported\r\n", info.set
; 933  :                 ));

  00170	e3130001	 tst         r3, #1
  00174	0a000004	 beq         |$cleanUp$43508|
  00178	e59f0034	 ldr         r0, [pc, #0x34]
  0017c	e1a01007	 mov         r1, r7
  00180	eb000000	 bl          NKDbgPrintfW

; 934  :                     goto cleanUp;

  00184	ea000000	 b           |$cleanUp$43508|
  00188		 |$LN30@OALFlashEr|

; 950  :                 }
; 951  :             }
; 952  :         }
; 953  : 
; 954  :     rc = TRUE;

  00188	e3a06001	 mov         r6, #1
  0018c		 |$cleanUp$43508|

; 890  :     {
; 891  :         OALMSG(OAL_ERROR, (
; 892  :             L"ERROR: OALFlashErase failed get flash memory info\r\n"
; 893  :         ));

  0018c	e5953440	 ldr         r3, [r5, #0x440]

; 955  :    
; 956  : cleanUp:
; 957  :     OALMSG(OAL_FUNC, (L"-OALFlashErase(rc = %d)\r\n", rc));

  00190	e3130004	 tst         r3, #4
  00194	159f0014	 ldrne       r0, [pc, #0x14]
  00198	11a01006	 movne       r1, r6
  0019c	1b000000	 blne        NKDbgPrintfW

; 958  :     return rc;
; 959  : }

  001a0	e1a00006	 mov         r0, r6
  001a4	e28dd064	 add         sp, sp, #0x64
  001a8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001ac	e12fff1e	 bx          lr
  001b0		 |$LN39@OALFlashEr|
  001b0		 |$LN40@OALFlashEr|
  001b0	00000000	 DCD         |??_C@_1DE@HNBCKGCA@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  001b4		 |$LN41@OALFlashEr|
  001b4	00000000	 DCD         |??_C@_1EO@JKEJJFHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo@|
  001b8		 |$LN42@OALFlashEr|
  001b8	00000000	 DCD         |??_C@_1GI@CMIOIPEM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAg?$AAe?$AAt?$AA?5@|
  001bc		 |$LN43@OALFlashEr|
  001bc	00000000	 DCD         |??_C@_1FC@JNEIGENB@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@|
  001c0		 |$LN44@OALFlashEr|
  001c0	00000000	 DCD         |dpCurSettings|
  001c4		 |$M44186|

			 ENDP  ; |OALFlashErase|

	EXPORT	|OALFlashEraseStart|
	IMPORT	|memcpy|

  00000			 AREA	 |.bss|, NOINIT
|s_erase| %	0x70
|s_erase| %	0x70

  00000			 AREA	 |.pdata|, PDATA
|$T44228| DCD	|$LN30@OALFlashEr@2|
	DCD	0x40005902
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashEraseStart| PROC

; 969  : {

  00000		 |$LN30@OALFlashEr@2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd058	 sub         sp, sp, #0x58
  00008		 |$M44225|
  00008	e1a09001	 mov         r9, r1
  0000c	e1a05000	 mov         r5, r0

; 970  :     BOOL rc = FALSE;
; 971  :     OAL_FLASH_INFO info;
; 972  :     UINT32 base = (UINT32)pBase;
; 973  :     UINT32 start = (UINT32)pStart;
; 974  :     UINT32 end = start + size;
; 975  :     UINT32 chip, blockStart, blockEnd;
; 976  :     UINT32 region, block;
; 977  : 
; 978  :     // There can be only one pending erase
; 979  :     if (s_erase.pending) goto cleanUp;

  00010	e59fb148	 ldr         r11, [pc, #0x148]
  00014	e3a0a000	 mov         r10, #0
  00018	e0898002	 add         r8, r9, r2
  0001c	e59b3000	 ldr         r3, [r11]
  00020	e3530000	 cmp         r3, #0
  00024	1a000049	 bne         |$cleanUp$43551|

; 980  : 
; 981  :     // First detect flash at base
; 982  :     if (!OALFlashInfo((VOID*)base, &info))

  00028	e28d1000	 add         r1, sp, #0
  0002c	eb000000	 bl          OALFlashInfo
  00030	e3500000	 cmp         r0, #0
  00034	0a000045	 beq         |$cleanUp$43551|

; 983  :         {
; 984  :         goto cleanUp;
; 985  :         }
; 986  : 
; 987  :     // Find first block to be erased
; 988  :     region = block = 0;

  00038	e3a06000	 mov         r6, #0
  0003c	e3a04000	 mov         r4, #0

; 989  :     blockStart = chip = base;

  00040	e1a07005	 mov         r7, r5

; 990  :     while (blockStart < end)

  00044	e1550008	 cmp         r5, r8
  00048	2a00001e	 bcs         |$LN13@OALFlashEr@2|
  0004c		 |$LN27@OALFlashEr@2|
  0004c	e59de004	 ldr         lr, [sp, #4]
  00050	e59d1014	 ldr         r1, [sp, #0x14]
  00054	e28d3000	 add         r3, sp, #0
  00058		 |$LL14@OALFlashEr@2|

; 991  :         {
; 992  : 
; 993  :         // Block end (+1)
; 994  :         blockEnd  = blockStart + info.aBlockSize[region] * info.parallel;

  00058	e0830104	 add         r0, r3, r4, lsl #2
  0005c	e5903018	 ldr         r3, [r0, #0x18]
  00060	e0227e93	 mla         r2, r3, lr, r7

; 995  : 
; 996  :         // Should block be erased?
; 997  :         if (start < blockEnd && end >= blockStart) break;

  00064	e1590002	 cmp         r9, r2
  00068	2a000001	 bcs         |$LN12@OALFlashEr@2|
  0006c	e1580007	 cmp         r8, r7
  00070	2a000014	 bcs         |$LN13@OALFlashEr@2|
  00074		 |$LN12@OALFlashEr@2|

; 998  : 
; 999  :         // This should not happen...
; 1000 :         if (blockEnd >= end) goto cleanUp;

  00074	e1520008	 cmp         r2, r8
  00078	2a000034	 bcs         |$cleanUp$43551|

; 1001 : 
; 1002 :         // Move to next block
; 1003 :         blockStart = blockEnd;
; 1004 :         if (++block >= info.aBlocks[region])

  0007c	e5903038	 ldr         r3, [r0, #0x38]
  00080	e2866001	 add         r6, r6, #1
  00084	e1a07002	 mov         r7, r2
  00088	e1560003	 cmp         r6, r3
  0008c	e28d3000	 add         r3, sp, #0
  00090	3afffff0	 bcc         |$LL14@OALFlashEr@2|

; 1005 :             {
; 1006 :             block = 0;
; 1007 :             if (++region >= info.regions)

  00094	e2844001	 add         r4, r4, #1
  00098	e1540001	 cmp         r4, r1
  0009c	e3a06000	 mov         r6, #0
  000a0	e28d3000	 add         r3, sp, #0
  000a4	3affffeb	 bcc         |$LL14@OALFlashEr@2|

; 1008 :                 {
; 1009 :                 // Try read next chip info
; 1010 :                 if (!OALFlashInfo((VOID*)block, &info)) goto cleanUp;

  000a8	e28d1000	 add         r1, sp, #0
  000ac	e3a00000	 mov         r0, #0
  000b0	eb000000	 bl          OALFlashInfo
  000b4	e3500000	 cmp         r0, #0
  000b8	0a000024	 beq         |$cleanUp$43551|

; 1011 :                 region = 0;

  000bc	e3a04000	 mov         r4, #0

; 1012 :                 chip = block;

  000c0	e3a05000	 mov         r5, #0
  000c4	eaffffe0	 b           |$LN27@OALFlashEr@2|
  000c8		 |$LN13@OALFlashEr@2|

; 1013 :                 }
; 1014 :             }
; 1015 :         }
; 1016 : 
; 1017 :     // Start erase
; 1018 :     switch (info.set)

  000c8	e59d3008	 ldr         r3, [sp, #8]
  000cc	e3530001	 cmp         r3, #1
  000d0	0a000003	 beq         |$LN5@OALFlashEr@2|
  000d4	e3530002	 cmp         r3, #2
  000d8	0a00001c	 beq         |$cleanUp$43551|
  000dc	e3530003	 cmp         r3, #3

; 1025 :                 {
; 1026 :                 goto cleanUp;
; 1027 :                 }
; 1028 :             break;
; 1029 : #endif OAL_FLASH_NO_COMMAND_SET_1                
; 1030 : 
; 1031 : #ifndef OAL_FLASH_NO_COMMAND_SET_2
; 1032 :         case 2: // AMD
; 1033 :             if (!StartEraseBlock2(&info, chip, blockStart))
; 1034 :                 {
; 1035 :                 goto cleanUp;
; 1036 :                 }                    
; 1037 :             break;
; 1038 : #endif OAL_FLASH_NO_COMMAND_SET_2
; 1039 : 
; 1040 :         default:
; 1041 :             goto cleanUp;

  000e0	1a00001a	 bne         |$cleanUp$43551|
  000e4		 |$LN5@OALFlashEr@2|

; 1019 :         {
; 1020 : 
; 1021 : #ifndef OAL_FLASH_NO_COMMAND_SET_1                
; 1022 :         case 1: // Intel/Sharp
; 1023 :         case 3:
; 1024 :             if (!StartEraseBlock1(&info, chip, blockStart))

  000e4	e3a03050	 mov         r3, #0x50
  000e8	e3a02000	 mov         r2, #0
  000ec	e1a01007	 mov         r1, r7
  000f0	e28d0000	 add         r0, sp, #0
  000f4	eb000000	 bl          WriteCommand
  000f8	e3a03020	 mov         r3, #0x20
  000fc	e3a02000	 mov         r2, #0
  00100	e1a01007	 mov         r1, r7
  00104	e28d0000	 add         r0, sp, #0
  00108	eb000000	 bl          WriteCommand
  0010c	e3a030d0	 mov         r3, #0xD0
  00110	e3a02000	 mov         r2, #0
  00114	e1a01007	 mov         r1, r7
  00118	e28d0000	 add         r0, sp, #0
  0011c	eb000000	 bl          WriteCommand

; 1042 :         }
; 1043 : 
; 1044 : 
; 1045 :     // Save context for continue...
; 1046 :     s_erase.info = info;

  00120	e28b0004	 add         r0, r11, #4
  00124	e28d1000	 add         r1, sp, #0
  00128	e3a02058	 mov         r2, #0x58
  0012c	eb000000	 bl          memcpy

; 1047 :     s_erase.base = chip;

  00130	e58b505c	 str         r5, [r11, #0x5C]

; 1048 :     s_erase.end = end;

  00134	e58b8060	 str         r8, [r11, #0x60]

; 1049 :     s_erase.pos = blockStart;

  00138	e58b7064	 str         r7, [r11, #0x64]

; 1050 :     s_erase.region = region;

  0013c	e58b4068	 str         r4, [r11, #0x68]

; 1051 :     s_erase.block = block;
; 1052 :     s_erase.pending = TRUE;

  00140	e3a03001	 mov         r3, #1
  00144	e58b606c	 str         r6, [r11, #0x6C]
  00148	e58b3000	 str         r3, [r11]

; 1053 :     
; 1054 :     rc = TRUE;

  0014c	e3a0a001	 mov         r10, #1
  00150		 |$cleanUp$43551|

; 1055 : 
; 1056 : cleanUp:
; 1057 :     return rc;
; 1058 : }

  00150	e1a0000a	 mov         r0, r10
  00154	e28dd058	 add         sp, sp, #0x58
  00158	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0015c	e12fff1e	 bx          lr
  00160		 |$LN31@OALFlashEr@2|
  00160		 |$LN32@OALFlashEr@2|
  00160	00000000	 DCD         |s_erase|
  00164		 |$M44226|

			 ENDP  ; |OALFlashEraseStart|

	EXPORT	|OALFlashEraseContinue|

  00000			 AREA	 |.pdata|, PDATA
|$T44260| DCD	|$LN25@OALFlashEr@3|
	DCD	0x40004d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashEraseContinue| PROC

; 1065 : {

  00000		 |$LN25@OALFlashEr@3|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M44257|

; 1066 :     UINT32 rc = OAL_FLASH_ERASE_FAILED;
; 1067 :     OAL_FLASH_INFO *pInfo = &s_erase.info;
; 1068 :     
; 1069 :     // There must be pending erase
; 1070 :     if (!s_erase.pending) goto cleanUp;

  00004	e59f4124	 ldr         r4, [pc, #0x124]
  00008	e3e05000	 mvn         r5, #0
  0000c	e5943000	 ldr         r3, [r4]
  00010	e3530000	 cmp         r3, #0
  00014	0a000040	 beq         |$LN22@OALFlashEr@3|

; 1071 : 
; 1072 :     // Look if erase is done
; 1073 :     switch (s_erase.info.set)

  00018	e594300c	 ldr         r3, [r4, #0xC]
  0001c	e3530001	 cmp         r3, #1
  00020	0a000003	 beq         |$LN9@OALFlashEr@3|
  00024	e3530002	 cmp         r3, #2
  00028	0a00003b	 beq         |$LN22@OALFlashEr@3|
  0002c	e3530003	 cmp         r3, #3

; 1080 :             break;
; 1081 : #endif OAL_FLASH_NO_COMMAND_SET_1                
; 1082 : 
; 1083 : #ifndef OAL_FLASH_NO_COMMAND_SET_2
; 1084 :         case 2: // AMD
; 1085 :             rc = ContinueEraseBlock2(&s_erase.info, s_erase.base, s_erase.pos);
; 1086 :             break;
; 1087 : #endif OAL_FLASH_NO_COMMAND_SET_2
; 1088 : 
; 1089 :         default:
; 1090 :             goto cleanUp;

  00030	1a000039	 bne         |$LN22@OALFlashEr@3|
  00034		 |$LN9@OALFlashEr@3|

; 1074 :         {
; 1075 : 
; 1076 : #ifndef OAL_FLASH_NO_COMMAND_SET_1                
; 1077 :         case 1: // Intel/Sharp
; 1078 :         case 3:
; 1079 :             rc = ContinueEraseBlock1(&s_erase.info, s_erase.base, s_erase.pos);

  00034	e5947064	 ldr         r7, [r4, #0x64]
  00038	e3a03070	 mov         r3, #0x70
  0003c	e3a02000	 mov         r2, #0
  00040	e1a01007	 mov         r1, r7
  00044	e2840004	 add         r0, r4, #4
  00048	e3a06000	 mov         r6, #0
  0004c	eb000000	 bl          WriteCommand
  00050	e3a02000	 mov         r2, #0
  00054	e1a01007	 mov         r1, r7
  00058	e2840004	 add         r0, r4, #4
  0005c	eb000000	 bl          BitsAnd
  00060	e3100080	 tst         r0, #0x80
  00064	0a000002	 beq         |$cleanUp$44244|
  00068	e3100020	 tst         r0, #0x20
  0006c	03a06001	 moveq       r6, #1
  00070	11a06005	 movne       r6, r5
  00074		 |$cleanUp$44244|
  00074	e3a030ff	 mov         r3, #0xFF
  00078	e3a02000	 mov         r2, #0
  0007c	e1a01007	 mov         r1, r7
  00080	e2840004	 add         r0, r4, #4
  00084	eb000000	 bl          WriteCommand
  00088	e1a05006	 mov         r5, r6

; 1091 :         }
; 1092 : 
; 1093 :     // If erase is pending or failed we are done
; 1094 :     if (rc != OAL_FLASH_ERASE_DONE) goto cleanUp;

  0008c	e3560001	 cmp         r6, #1
  00090	1a00001f	 bne         |$cleanUp$43576|

; 1095 : 
; 1096 :     // Move to next block
; 1097 :     s_erase.pos += pInfo->aBlockSize[s_erase.region] * pInfo->parallel;

  00094	e5947068	 ldr         r7, [r4, #0x68]
  00098	e2843004	 add         r3, r4, #4
  0009c	e5941008	 ldr         r1, [r4, #8]
  000a0	e0830107	 add         r0, r3, r7, lsl #2
  000a4	e5902018	 ldr         r2, [r0, #0x18]
  000a8	e5943064	 ldr         r3, [r4, #0x64]
  000ac	e02e3192	 mla         lr, r2, r1, r3
  000b0	e584e064	 str         lr, [r4, #0x64]

; 1098 :     // Are we done?
; 1099 :     if (s_erase.pos >= s_erase.end) goto cleanUp;

  000b4	e5943060	 ldr         r3, [r4, #0x60]
  000b8	e15e0003	 cmp         lr, r3
  000bc	2a000016	 bcs         |$LN22@OALFlashEr@3|

; 1100 : 
; 1101 :     // Is is next chip?
; 1102 :     if (++s_erase.block >= pInfo->aBlocks[s_erase.region])

  000c0	e594306c	 ldr         r3, [r4, #0x6C]
  000c4	e2832001	 add         r2, r3, #1
  000c8	e584206c	 str         r2, [r4, #0x6C]
  000cc	e5903038	 ldr         r3, [r0, #0x38]
  000d0	e1520003	 cmp         r2, r3
  000d4	3a000010	 bcc         |$LN22@OALFlashEr@3|

; 1103 :         {
; 1104 :         s_erase.block = 0;

  000d8	e3a03000	 mov         r3, #0

; 1105 :         if (++s_erase.region >= pInfo->regions)

  000dc	e2872001	 add         r2, r7, #1
  000e0	e584306c	 str         r3, [r4, #0x6C]
  000e4	e5842068	 str         r2, [r4, #0x68]
  000e8	e5943018	 ldr         r3, [r4, #0x18]
  000ec	e1520003	 cmp         r2, r3
  000f0	3a000009	 bcc         |$LN22@OALFlashEr@3|

; 1106 :             {
; 1107 :             s_erase.base = s_erase.pos;
; 1108 :             // Try read next chip info
; 1109 :             if (!OALFlashInfo((VOID*)s_erase.base, pInfo)) goto cleanUp;

  000f4	e2841004	 add         r1, r4, #4
  000f8	e1a0000e	 mov         r0, lr
  000fc	e584e05c	 str         lr, [r4, #0x5C]
  00100	eb000000	 bl          OALFlashInfo
  00104	e3500000	 cmp         r0, #0
  00108	0a000003	 beq         |$LN22@OALFlashEr@3|

; 1110 :             s_erase.region = 0;

  0010c	e3a03000	 mov         r3, #0
  00110	e5843068	 str         r3, [r4, #0x68]
  00114		 |$cleanUp$43576|

; 1111 :             }
; 1112 :         }
; 1113 :     
; 1114 : cleanUp:
; 1115 :     if (rc != OAL_FLASH_ERASE_PENDING) s_erase.pending = FALSE;    

  00114	e3560000	 cmp         r6, #0
  00118	0a000001	 beq         |$LN1@OALFlashEr@3|
  0011c		 |$LN22@OALFlashEr@3|
  0011c	e3a03000	 mov         r3, #0
  00120	e5843000	 str         r3, [r4]
  00124		 |$LN1@OALFlashEr@3|

; 1116 :     return rc;
; 1117 : }

  00124	e1a00005	 mov         r0, r5
  00128	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0012c	e12fff1e	 bx          lr
  00130		 |$LN26@OALFlashEr@3|
  00130		 |$LN27@OALFlashEr@3|
  00130	00000000	 DCD         |s_erase|
  00134		 |$M44258|

			 ENDP  ; |OALFlashEraseContinue|

	EXPORT	|OALFlashWrite|
	EXPORT	|??_C@_1DA@LONNECBI@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@GHJADINJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?9?$AA?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@LDCAJBDO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAa?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAf?$AAa?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@JDIFMGOM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAg?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@GHFGCNFL@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44369| DCD	|$LN106@OALFlashWr|
	DCD	0x40011d02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@LONNECBI@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@GHJADINJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?9?$AA?9@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, " ", 0x0, "-"
	DCB	0x0, "-", 0x0, " ", 0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "b", 0x0, "u"
	DCB	0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@LDCAJBDO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAa?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAf?$AAa?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " "
	DCB	0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@JDIFMGOM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAg?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "g"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "f"
	DCB	0x0, "o", 0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@GHFGCNFL@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashWrite| PROC

; 1132 : {

  00000		 |$LN106@OALFlashWr|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd068	 sub         sp, sp, #0x68
  00008		 |$M44366|
  00008	e1a09003	 mov         r9, r3
  0000c	e1a04001	 mov         r4, r1
  00010	e1a05000	 mov         r5, r0

; 1133 :     BOOL rc = FALSE;
; 1134 :     OAL_FLASH_INFO info;
; 1135 :     DWORD base = (DWORD)pBase;
; 1136 :     DWORD start = (DWORD)pStart;
; 1137 :     DWORD end = start + size;
; 1138 :     DWORD chipStart;
; 1139 :     DWORD chipEnd;
; 1140 :     DWORD pos, count;
; 1141 :     UCHAR *pPos;
; 1142 : 
; 1143 :     OALMSG(OAL_FUNC, (
; 1144 :         L"+OALFlashWrite(0x%08x, 0x%08x, 0x%08x, 0x%08x)\r\n", 
; 1145 :         pBase, pStart, size, pBuffer
; 1146 :     ));

  00014	e59f8454	 ldr         r8, [pc, #0x454]
  00018	e0846002	 add         r6, r4, r2
  0001c	e3a0a000	 mov         r10, #0
  00020	e5981440	 ldr         r1, [r8, #0x440]
  00024	e58d600c	 str         r6, [sp, #0xC]
  00028	e3110004	 tst         r1, #4
  0002c	159f0438	 ldrne       r0, [pc, #0x438]
  00030	11a03002	 movne       r3, r2
  00034	11a02004	 movne       r2, r4
  00038	11a01005	 movne       r1, r5
  0003c	158d9000	 strne       r9, [sp]
  00040	1b000000	 blne        NKDbgPrintfW

; 1147 : 
; 1148 :     chipStart = base;
; 1149 :     pPos = (UCHAR*)pBuffer;
; 1150 : 
; 1151 :     // First read first chip info
; 1152 :     while (TRUE)
; 1153 :     {
; 1154 :         if (!OALFlashInfo((VOID*)chipStart, &info))

  00044	e1a00005	 mov         r0, r5
  00048	e58d9004	 str         r9, [sp, #4]
  0004c	ea000008	 b           |$LN96@OALFlashWr|
  00050		 |$LL29@OALFlashWr|

; 1160 :                 goto cleanUp;
; 1161 :         }
; 1162 :         chipEnd = chipStart + info.size * info.parallel;

  00050	e59d201c	 ldr         r2, [sp, #0x1C]
  00054	e59d3014	 ldr         r3, [sp, #0x14]

; 1163 :         // Is start address on this chip
; 1164 :         if (start >= chipStart && start < chipEnd) break;

  00058	e1540005	 cmp         r4, r5
  0005c	e02b5293	 mla         r11, r3, r2, r5
  00060	3a000001	 bcc         |$LN26@OALFlashWr|
  00064	e154000b	 cmp         r4, r11
  00068	3a000014	 bcc         |$LN84@OALFlashWr|
  0006c		 |$LN26@OALFlashWr|

; 1147 : 
; 1148 :     chipStart = base;
; 1149 :     pPos = (UCHAR*)pBuffer;
; 1150 : 
; 1151 :     // First read first chip info
; 1152 :     while (TRUE)
; 1153 :     {
; 1154 :         if (!OALFlashInfo((VOID*)chipStart, &info))

  0006c	e1a0000b	 mov         r0, r11

; 1165 :         // Move to next chip
; 1166 :         chipStart = chipEnd;

  00070	e1a0500b	 mov         r5, r11
  00074		 |$LN96@OALFlashWr|
  00074	e28d1010	 add         r1, sp, #0x10
  00078	eb000000	 bl          OALFlashInfo
  0007c	e3500000	 cmp         r0, #0
  00080	1afffff2	 bne         |$LL29@OALFlashWr|
  00084	e5983440	 ldr         r3, [r8, #0x440]
  00088	e3130001	 tst         r3, #1
  0008c	0a000002	 beq         |$cleanUp$43622|
  00090	e59f03d0	 ldr         r0, [pc, #0x3D0]
  00094	e1a01005	 mov         r1, r5
  00098		 |$LN101@OALFlashWr|

; 1155 :         {
; 1156 :                 OALMSG(OAL_ERROR, (
; 1157 :                     L"ERROR: OALFlashWrite - failed get flash info at 0x%08x\r\n",
; 1158 :                     chipStart
; 1159 :                 ));

  00098	eb000000	 bl          NKDbgPrintfW

; 1263 :     OALMSG(!rc&&OAL_ERROR, (
; 1264 :         L"ERROR: Flash failed at 0x%08x -- write 0x%08x, but read 0x%08x\r\n",
; 1265 :         pos, *(UINT32*)pPos, *(UINT32*)pos
; 1266 :     ));

  0009c		 |$cleanUp$43622|
  0009c	e5983440	 ldr         r3, [r8, #0x440]

; 1267 :     
; 1268 : cleanUp:
; 1269 :     OALMSG(OAL_FUNC, (L"-OALFlashWrite(rc = %d)", rc));

  000a0	e3130004	 tst         r3, #4
  000a4	159f03b8	 ldrne       r0, [pc, #0x3B8]
  000a8	11a0100a	 movne       r1, r10
  000ac	1b000000	 blne        NKDbgPrintfW

; 1270 :     return rc;
; 1271 : }

  000b0	e1a0000a	 mov         r0, r10
  000b4	e28dd068	 add         sp, sp, #0x68
  000b8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN84@OALFlashWr|

; 1167 :     }
; 1168 :    
; 1169 :     pos = start;

  000c0	e1a07004	 mov         r7, r4

; 1170 :     while (pos < end)

  000c4	e1540006	 cmp         r4, r6
  000c8	2a0000bc	 bcs         |$LN93@OALFlashWr|
  000cc		 |$LN100@OALFlashWr|
  000cc	e59d6018	 ldr         r6, [sp, #0x18]
  000d0	e3a02c05	 mov         r2, #5, 24
  000d4		 |$LL25@OALFlashWr|

; 1171 :         {
; 1172 : 
; 1173 :         // How many data we can write
; 1174 :         if (end > chipEnd)
; 1175 :             {
; 1176 :             count = chipEnd - pos;
; 1177 :             }
; 1178 :         else
; 1179 :             {
; 1180 :             count = end - pos;
; 1181 :             }
; 1182 :         
; 1183 :         // Program data chunk
; 1184 :         switch (info.set)

  000d4	e3560001	 cmp         r6, #1
  000d8	0a000003	 beq         |$LN19@OALFlashWr|
  000dc	e3560002	 cmp         r6, #2
  000e0	0a000014	 beq         |$LN18@OALFlashWr|
  000e4	e3560003	 cmp         r6, #3
  000e8	1a0000a7	 bne         |$LN85@OALFlashWr|
  000ec		 |$LN19@OALFlashWr|

; 1185 :             {
; 1186 : 
; 1187 : #ifndef OAL_FLASH_NO_COMMAND_SET_1                
; 1188 :             case 1:
; 1189 :             case 3:
; 1190 :                 count = WriteData1(&info, chipStart, pos, pPos);

  000ec	e3a0e000	 mov         lr, #0
  000f0	e3a03040	 mov         r3, #0x40
  000f4	e3a02000	 mov         r2, #0
  000f8	e1a01005	 mov         r1, r5
  000fc	e28d0010	 add         r0, sp, #0x10
  00100	e58de008	 str         lr, [sp, #8]
  00104	eb000000	 bl          WriteCommand
  00108	e59d3010	 ldr         r3, [sp, #0x10]
  0010c	e3530001	 cmp         r3, #1
  00110	0a000061	 beq         |$LN49@OALFlashWr|
  00114	e3530002	 cmp         r3, #2
  00118	0a00005a	 beq         |$LN50@OALFlashWr|
  0011c	e3530004	 cmp         r3, #4
  00120	1a000061	 bne         |$LL48@OALFlashWr|
  00124	e59d3004	 ldr         r3, [sp, #4]
  00128	e1a00007	 mov         r0, r7
  0012c	e5931000	 ldr         r1, [r3]
  00130	eb000000	 bl          WRITE_REGISTER_ULONG
  00134	ea00005c	 b           |$LL48@OALFlashWr|
  00138		 |$LN18@OALFlashWr|

; 1191 :                 break;
; 1192 : #endif OAL_FLASH_NO_COMMAND_SET_1
; 1193 : 
; 1194 : #ifndef OAL_FLASH_NO_COMMAND_SET_2
; 1195 :             case 2:
; 1196 :                 count = WriteData2(&info, chipStart, pos, pPos);

  00138	e3a0e000	 mov         lr, #0
  0013c	e3a030aa	 mov         r3, #0xAA
  00140	e3822055	 orr         r2, r2, #0x55
  00144	e1a01005	 mov         r1, r5
  00148	e28d0010	 add         r0, sp, #0x10
  0014c	e58de008	 str         lr, [sp, #8]
  00150	eb000000	 bl          WriteCommand
  00154	e3a02c02	 mov         r2, #2, 24
  00158	e38220aa	 orr         r2, r2, #0xAA
  0015c	e3a03055	 mov         r3, #0x55
  00160	e1a01005	 mov         r1, r5
  00164	e28d0010	 add         r0, sp, #0x10
  00168	eb000000	 bl          WriteCommand
  0016c	e3a02c05	 mov         r2, #5, 24
  00170	e3822055	 orr         r2, r2, #0x55
  00174	e3a030a0	 mov         r3, #0xA0
  00178	e1a01005	 mov         r1, r5
  0017c	e28d0010	 add         r0, sp, #0x10
  00180	eb000000	 bl          WriteCommand
  00184	e59d3010	 ldr         r3, [sp, #0x10]
  00188	e3530001	 cmp         r3, #1
  0018c	0a00002a	 beq         |$LN60@OALFlashWr|
  00190	e3530002	 cmp         r3, #2
  00194	0a000014	 beq         |$LN65@OALFlashWr|
  00198	e3530004	 cmp         r3, #4
  0019c	1a000055	 bne         |$LN20@OALFlashWr|
  001a0	e59d3004	 ldr         r3, [sp, #4]
  001a4	e1a00007	 mov         r0, r7
  001a8	e5931000	 ldr         r1, [r3]
  001ac	eb000000	 bl          WRITE_REGISTER_ULONG
  001b0		 |$LL69@OALFlashWr|
  001b0	e3a02000	 mov         r2, #0
  001b4	e1a01007	 mov         r1, r7
  001b8	e28d0010	 add         r0, sp, #0x10
  001bc	eb000000	 bl          BitsAnd
  001c0	e3100020	 tst         r0, #0x20
  001c4	0afffff9	 beq         |$LL69@OALFlashWr|
  001c8	e1a00007	 mov         r0, r7
  001cc	eb000000	 bl          READ_REGISTER_ULONG
  001d0	e59d2004	 ldr         r2, [sp, #4]
  001d4	e5923000	 ldr         r3, [r2]
  001d8	e1500003	 cmp         r0, r3
  001dc	1a000045	 bne         |$LN20@OALFlashWr|
  001e0	e3a03004	 mov         r3, #4
  001e4	e58d3008	 str         r3, [sp, #8]
  001e8	ea000042	 b           |$LN20@OALFlashWr|
  001ec		 |$LN65@OALFlashWr|
  001ec	e59d3004	 ldr         r3, [sp, #4]
  001f0	e1a00007	 mov         r0, r7
  001f4	e1d310b0	 ldrh        r1, [r3]
  001f8	eb000000	 bl          WRITE_REGISTER_USHORT
  001fc		 |$LL64@OALFlashWr|
  001fc	e3a02000	 mov         r2, #0
  00200	e1a01007	 mov         r1, r7
  00204	e28d0010	 add         r0, sp, #0x10
  00208	eb000000	 bl          BitsAnd
  0020c	e3100020	 tst         r0, #0x20
  00210	0afffff9	 beq         |$LL64@OALFlashWr|
  00214	e1a00007	 mov         r0, r7
  00218	eb000000	 bl          READ_REGISTER_USHORT
  0021c	e59d3004	 ldr         r3, [sp, #4]
  00220	e1d320b0	 ldrh        r2, [r3]
  00224	e1a03800	 mov         r3, r0, lsl #16
  00228	e1520823	 cmp         r2, r3, lsr #16
  0022c	1a000031	 bne         |$LN20@OALFlashWr|
  00230	e3a0e002	 mov         lr, #2
  00234	e58de008	 str         lr, [sp, #8]

; 1197 :                 break;

  00238	ea00002e	 b           |$LN20@OALFlashWr|

; 1191 :                 break;
; 1192 : #endif OAL_FLASH_NO_COMMAND_SET_1
; 1193 : 
; 1194 : #ifndef OAL_FLASH_NO_COMMAND_SET_2
; 1195 :             case 2:
; 1196 :                 count = WriteData2(&info, chipStart, pos, pPos);

  0023c		 |$LN60@OALFlashWr|
  0023c	e59d3004	 ldr         r3, [sp, #4]
  00240	e1a00007	 mov         r0, r7
  00244	e5d31000	 ldrb        r1, [r3]
  00248	eb000000	 bl          WRITE_REGISTER_UCHAR
  0024c		 |$LL59@OALFlashWr|
  0024c	e3a02000	 mov         r2, #0
  00250	e1a01007	 mov         r1, r7
  00254	e28d0010	 add         r0, sp, #0x10
  00258	eb000000	 bl          BitsAnd
  0025c	e3100020	 tst         r0, #0x20
  00260	0afffff9	 beq         |$LL59@OALFlashWr|
  00264	e1a00007	 mov         r0, r7
  00268	eb000000	 bl          READ_REGISTER_UCHAR
  0026c	e59d2004	 ldr         r2, [sp, #4]
  00270	e5d23000	 ldrb        r3, [r2]
  00274	e1500003	 cmp         r0, r3
  00278	1a00001e	 bne         |$LN20@OALFlashWr|
  0027c	e3a0e001	 mov         lr, #1
  00280	e58de008	 str         lr, [sp, #8]

; 1197 :                 break;

  00284	ea00001b	 b           |$LN20@OALFlashWr|

; 1185 :             {
; 1186 : 
; 1187 : #ifndef OAL_FLASH_NO_COMMAND_SET_1                
; 1188 :             case 1:
; 1189 :             case 3:
; 1190 :                 count = WriteData1(&info, chipStart, pos, pPos);

  00288		 |$LN50@OALFlashWr|
  00288	e59d3004	 ldr         r3, [sp, #4]
  0028c	e1a00007	 mov         r0, r7
  00290	e1d310b0	 ldrh        r1, [r3]
  00294	eb000000	 bl          WRITE_REGISTER_USHORT
  00298	ea000003	 b           |$LL48@OALFlashWr|
  0029c		 |$LN49@OALFlashWr|
  0029c	e59d3004	 ldr         r3, [sp, #4]
  002a0	e1a00007	 mov         r0, r7
  002a4	e5d31000	 ldrb        r1, [r3]
  002a8	eb000000	 bl          WRITE_REGISTER_UCHAR
  002ac		 |$LL48@OALFlashWr|
  002ac	e3a03070	 mov         r3, #0x70
  002b0	e3a02000	 mov         r2, #0
  002b4	e1a01005	 mov         r1, r5
  002b8	e28d0010	 add         r0, sp, #0x10
  002bc	eb000000	 bl          WriteCommand
  002c0	e3a02000	 mov         r2, #0
  002c4	e1a01007	 mov         r1, r7
  002c8	e28d0010	 add         r0, sp, #0x10
  002cc	eb000000	 bl          BitsAnd
  002d0	e3100080	 tst         r0, #0x80
  002d4	0afffff4	 beq         |$LL48@OALFlashWr|
  002d8	e3100010	 tst         r0, #0x10
  002dc	059de010	 ldreq       lr, [sp, #0x10]
  002e0	e3a030ff	 mov         r3, #0xFF
  002e4	e3a02000	 mov         r2, #0
  002e8	e1a01005	 mov         r1, r5
  002ec	e28d0010	 add         r0, sp, #0x10
  002f0	058de008	 streq       lr, [sp, #8]
  002f4	eb000000	 bl          WriteCommand
  002f8		 |$LN20@OALFlashWr|

; 1205 :             }
; 1206 : 
; 1207 :         // If we write nothing something wrong happen
; 1208 :         if (count == 0)

  002f8	e59d3008	 ldr         r3, [sp, #8]
  002fc	e3530000	 cmp         r3, #0
  00300	0a000027	 beq         |$LN86@OALFlashWr|

; 1215 :             }
; 1216 :       
; 1217 :         // Move position
; 1218 :         pos += count;
; 1219 :         pPos += count;
; 1220 : 
; 1221 :         // Break when we are done
; 1222 :         if (pos >= end) break;

  00304	e59d200c	 ldr         r2, [sp, #0xC]
  00308	e0877003	 add         r7, r7, r3
  0030c	e1570002	 cmp         r7, r2
  00310	e59d2004	 ldr         r2, [sp, #4]
  00314	e0822003	 add         r2, r2, r3
  00318	e58d2004	 str         r2, [sp, #4]
  0031c	2a000028	 bcs         |$LN87@OALFlashWr|

; 1223 :         
; 1224 :         // If we run out of chip move to next one
; 1225 :         if (pos > chipEnd)

  00320	e157000b	 cmp         r7, r11
  00324	e3a02c05	 mov         r2, #5, 24
  00328	9affff69	 bls         |$LL25@OALFlashWr|

; 1226 :             {
; 1227 :             switch(info.set) {

  0032c	e3560001	 cmp         r6, #1
  00330	0a000003	 beq         |$LN11@OALFlashWr|
  00334	e3560002	 cmp         r6, #2
  00338	0a000011	 beq         |$LN10@OALFlashWr|
  0033c	e3560003	 cmp         r6, #3
  00340	1a000004	 bne         |$LN12@OALFlashWr|
  00344		 |$LN11@OALFlashWr|

; 1228 :                 case 1:
; 1229 :                 case 3:
; 1230 :                     WriteCommand(&info, chipStart, 0, 0xFF);

  00344	e3a030ff	 mov         r3, #0xFF
  00348		 |$LN99@OALFlashWr|
  00348	e3a02000	 mov         r2, #0
  0034c	e1a01005	 mov         r1, r5
  00350	e28d0010	 add         r0, sp, #0x10
  00354	eb000000	 bl          WriteCommand
  00358		 |$LN12@OALFlashWr|

; 1235 :                 }
; 1236 :             chipStart = chipEnd;
; 1237 :             if (!OALFlashInfo((VOID*)chipStart, &info)) break;

  00358	e28d1010	 add         r1, sp, #0x10
  0035c	e1a0000b	 mov         r0, r11
  00360	e1a0500b	 mov         r5, r11
  00364	eb000000	 bl          OALFlashInfo
  00368	e3500000	 cmp         r0, #0
  0036c	0a000013	 beq         |$LN93@OALFlashWr|

; 1238 :             chipEnd = chipStart + info.size * info.parallel;

  00370	e59d201c	 ldr         r2, [sp, #0x1C]
  00374	e59d3014	 ldr         r3, [sp, #0x14]
  00378	e59de010	 ldr         lr, [sp, #0x10]
  0037c	e02bb293	 mla         r11, r3, r2, r11
  00380	eaffff51	 b           |$LN100@OALFlashWr|
  00384		 |$LN10@OALFlashWr|

; 1231 :                     break;
; 1232 :                 case 2:
; 1233 :                     WriteCommand(&info, chipStart, 0, 0xF0);

  00384	e3a030f0	 mov         r3, #0xF0

; 1234 :                     break;

  00388	eaffffee	 b           |$LN99@OALFlashWr|
  0038c		 |$LN85@OALFlashWr|

; 1155 :         {
; 1156 :                 OALMSG(OAL_ERROR, (
; 1157 :                     L"ERROR: OALFlashWrite - failed get flash info at 0x%08x\r\n",
; 1158 :                     chipStart
; 1159 :                 ));

  0038c	e5983440	 ldr         r3, [r8, #0x440]

; 1198 : #endif OAL_FLASH_NO_COMMAND_SET_2
; 1199 : 
; 1200 :             default:
; 1201 :             OALMSG(OAL_ERROR, (
; 1202 :                 L"ERROR: Flash type %d isn't supported\r\n", info.set
; 1203 :             ));

  00390	e3130001	 tst         r3, #1
  00394	0affff40	 beq         |$cleanUp$43622|
  00398	e59f00c0	 ldr         r0, [pc, #0xC0]
  0039c	e1a01006	 mov         r1, r6

; 1204 :                 goto cleanUp;

  003a0	eaffff3c	 b           |$LN101@OALFlashWr|
  003a4		 |$LN86@OALFlashWr|

; 1155 :         {
; 1156 :                 OALMSG(OAL_ERROR, (
; 1157 :                     L"ERROR: OALFlashWrite - failed get flash info at 0x%08x\r\n",
; 1158 :                     chipStart
; 1159 :                 ));

  003a4	e5983440	 ldr         r3, [r8, #0x440]

; 1209 :             {
; 1210 :             rc = FALSE;

  003a8	e3a0a000	 mov         r10, #0

; 1211 :             OALMSG(OAL_ERROR, (
; 1212 :                 L"ERROR: Flash write at 0x%08x failed\r\n", pos
; 1213 :             ));

  003ac	e3130001	 tst         r3, #1
  003b0	0affff39	 beq         |$cleanUp$43622|
  003b4	e59f00a0	 ldr         r0, [pc, #0xA0]
  003b8	e1a01007	 mov         r1, r7

; 1214 :             goto cleanUp;

  003bc	eaffff35	 b           |$LN101@OALFlashWr|
  003c0		 |$LN93@OALFlashWr|
  003c0	e59d6018	 ldr         r6, [sp, #0x18]
  003c4		 |$LN87@OALFlashWr|

; 1239 :             }         
; 1240 :         }
; 1241 : 
; 1242 :     // Done
; 1243 :     //rc = TRUE;
; 1244 :     switch (info.set) {

  003c4	e3560001	 cmp         r6, #1
  003c8	0a000003	 beq         |$LN6@OALFlashWr|
  003cc	e3560002	 cmp         r6, #2
  003d0	0a000009	 beq         |$LN5@OALFlashWr|
  003d4	e3560003	 cmp         r6, #3
  003d8	1a000004	 bne         |$LN7@OALFlashWr|
  003dc		 |$LN6@OALFlashWr|

; 1245 :     case 1:
; 1246 :     case 3:
; 1247 :         WriteCommand(&info, chipStart, 0, 0xFF);

  003dc	e3a030ff	 mov         r3, #0xFF
  003e0		 |$LN102@OALFlashWr|
  003e0	e3a02000	 mov         r2, #0
  003e4	e1a01005	 mov         r1, r5
  003e8	e28d0010	 add         r0, sp, #0x10
  003ec	eb000000	 bl          WriteCommand
  003f0		 |$LN7@OALFlashWr|

; 1252 :     }
; 1253 : 
; 1254 :     // Do final check
; 1255 :     pPos = (UINT8*)pBuffer;
; 1256 :     for (pos = start; pos < end - sizeof(UINT32) + 1; pos += sizeof(UINT32)) {

  003f0	e59d300c	 ldr         r3, [sp, #0xC]
  003f4	e2431003	 sub         r1, r3, #3
  003f8	ea000007	 b           |$LN103@OALFlashWr|
  003fc		 |$LN5@OALFlashWr|

; 1248 :         break;
; 1249 :     case 2:
; 1250 :         WriteCommand(&info, chipStart, 0, 0xF0);

  003fc	e3a030f0	 mov         r3, #0xF0

; 1251 :         break;

  00400	eafffff6	 b           |$LN102@OALFlashWr|
  00404		 |$LL4@OALFlashWr|

; 1257 :         if (*(UINT32*)pPos != *(UINT32*)pos) break;

  00404	e5992000	 ldr         r2, [r9]
  00408	e5943000	 ldr         r3, [r4]
  0040c	e1520003	 cmp         r2, r3
  00410	1a000003	 bne         |$LN94@OALFlashWr|
  00414	e2844004	 add         r4, r4, #4

; 1258 :         pPos += sizeof(UINT32);

  00418	e2899004	 add         r9, r9, #4
  0041c		 |$LN103@OALFlashWr|

; 1257 :         if (*(UINT32*)pPos != *(UINT32*)pos) break;

  0041c	e1540001	 cmp         r4, r1

; 1258 :         pPos += sizeof(UINT32);

  00420	3afffff7	 bcc         |$LL4@OALFlashWr|
  00424		 |$LN94@OALFlashWr|

; 1259 :     }
; 1260 : 
; 1261 :     // If we reach end, all is ok
; 1262 :     rc = (pos >= end - sizeof(UINT32) + 1);

  00424	e1540001	 cmp         r4, r1
  00428	23a0a001	 movcs       r10, #1
  0042c	2affff1a	 bcs         |$cleanUp$43622|
  00430	e5983440	 ldr         r3, [r8, #0x440]
  00434	e3a0a000	 mov         r10, #0

; 1263 :     OALMSG(!rc&&OAL_ERROR, (
; 1264 :         L"ERROR: Flash failed at 0x%08x -- write 0x%08x, but read 0x%08x\r\n",
; 1265 :         pos, *(UINT32*)pPos, *(UINT32*)pos
; 1266 :     ));

  00438	e3130001	 tst         r3, #1
  0043c	0affff16	 beq         |$cleanUp$43622|
  00440	e5943000	 ldr         r3, [r4]
  00444	e5992000	 ldr         r2, [r9]
  00448	e59f0008	 ldr         r0, [pc, #8]
  0044c	e1a01004	 mov         r1, r4
  00450	eb000000	 bl          NKDbgPrintfW
  00454	eaffff10	 b           |$cleanUp$43622|
  00458		 |$LN107@OALFlashWr|
  00458		 |$LN108@OALFlashWr|
  00458	00000000	 DCD         |??_C@_1IC@GHJADINJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?9?$AA?9@|
  0045c		 |$LN109@OALFlashWr|
  0045c	00000000	 DCD         |??_C@_1EM@LDCAJBDO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAa?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAf?$AAa?$AAi@|
  00460		 |$LN110@OALFlashWr|
  00460	00000000	 DCD         |??_C@_1EO@JKEJJFHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo@|
  00464		 |$LN111@OALFlashWr|
  00464	00000000	 DCD         |??_C@_1DA@LONNECBI@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@|
  00468		 |$LN112@OALFlashWr|
  00468	00000000	 DCD         |??_C@_1HC@JDIFMGOM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAg?$AAe@|
  0046c		 |$LN113@OALFlashWr|
  0046c	00000000	 DCD         |??_C@_1GC@GHFGCNFL@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@|
  00470		 |$LN114@OALFlashWr|
  00470	00000000	 DCD         |dpCurSettings|
  00474		 |$M44367|

			 ENDP  ; |OALFlashWrite|

	EXPORT	|OALFlashLockDown|

  00000			 AREA	 |.pdata|, PDATA
|$T44417| DCD	|$LN33@OALFlashLo@2|
	DCD	0x40005802
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashLockDown| PROC

; 1281 : {

  00000		 |$LN33@OALFlashLo@2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd060	 sub         sp, sp, #0x60
  00008		 |$M44414|
  00008	e1a04001	 mov         r4, r1
  0000c	e58d4004	 str         r4, [sp, #4]
  00010	e1a05000	 mov         r5, r0

; 1282 :     BOOL rc = FALSE;
; 1283 :     OAL_FLASH_INFO info;
; 1284 :     UINT32 base = (UINT32)pBase;
; 1285 :     UINT32 start = (UINT32)pStart;
; 1286 :     UINT32 end = start + size;
; 1287 :     UINT32 chip, blockStart, blockEnd;
; 1288 :     UINT32 region, block;
; 1289 : 
; 1290 : 
; 1291 :     // Ther read first chip info
; 1292 :     if (!OALFlashInfo((VOID*)base, &info))

  00014	e28d1008	 add         r1, sp, #8
  00018	e3a0a000	 mov         r10, #0
  0001c	e0849002	 add         r9, r4, r2
  00020	eb000000	 bl          OALFlashInfo
  00024	e3500000	 cmp         r0, #0
  00028	0a000048	 beq         |$cleanUp$43694|

; 1293 :         {
; 1294 :             goto cleanUp;
; 1295 :         }
; 1296 : 
; 1297 :     region = block = 0;

  0002c	e3a07000	 mov         r7, #0
  00030	e3a06000	 mov         r6, #0

; 1298 :     blockStart = chip = base;
; 1299 :     while (blockStart < end)

  00034	e1550009	 cmp         r5, r9
  00038	2a000043	 bcs         |$LN28@OALFlashLo@2|
  0003c		 |$LN30@OALFlashLo@2|
  0003c	e59d000c	 ldr         r0, [sp, #0xC]
  00040	e59d8010	 ldr         r8, [sp, #0x10]
  00044	e59d101c	 ldr         r1, [sp, #0x1C]
  00048	e28d3008	 add         r3, sp, #8
  0004c		 |$LL14@OALFlashLo@2|

; 1300 :         {
; 1301 : 
; 1302 :         // Block end (+1)
; 1303 :         blockEnd = blockStart + info.aBlockSize[region] * info.parallel;

  0004c	e0832106	 add         r2, r3, r6, lsl #2
  00050	e5923018	 ldr         r3, [r2, #0x18]
  00054	e58d2000	 str         r2, [sp]
  00058	e02b5390	 mla         r11, r0, r3, r5

; 1304 : 
; 1305 :         // Should block be erased?
; 1306 :         if (start < blockEnd && end >= blockStart)

  0005c	e154000b	 cmp         r4, r11
  00060	2a000026	 bcs         |$LN8@OALFlashLo@2|
  00064	e1590005	 cmp         r9, r5
  00068	3a000024	 bcc         |$LN8@OALFlashLo@2|

; 1307 :             {
; 1308 :             switch (info.set)

  0006c	e3580001	 cmp         r8, #1
  00070	0a000003	 beq         |$LN9@OALFlashLo@2|
  00074	e3580002	 cmp         r8, #2
  00078	0a000020	 beq         |$LN8@OALFlashLo@2|
  0007c	e3580003	 cmp         r8, #3
  00080	1a000032	 bne         |$cleanUp$43694|
  00084		 |$LN9@OALFlashLo@2|

; 1309 :                 {
; 1310 : 
; 1311 : #ifndef OAL_FLASH_NO_COMMAND_SET_1
; 1312 :                 case 1: // Intel/Sharp
; 1313 :                 case 3:
; 1314 :                     if (!LockDownBlock1(&info, chip, blockStart))

  00084	e3a03060	 mov         r3, #0x60
  00088	e3a02000	 mov         r2, #0
  0008c	e1a01005	 mov         r1, r5
  00090	e28d0008	 add         r0, sp, #8
  00094	eb000000	 bl          WriteCommand
  00098	e3a0302f	 mov         r3, #0x2F
  0009c	e3a02000	 mov         r2, #0
  000a0	e1a01005	 mov         r1, r5
  000a4	e28d0008	 add         r0, sp, #8
  000a8	eb000000	 bl          WriteCommand
  000ac	e3a03090	 mov         r3, #0x90
  000b0	e3a02002	 mov         r2, #2
  000b4	e1a01005	 mov         r1, r5
  000b8	e28d0008	 add         r0, sp, #8
  000bc	eb000000	 bl          WriteCommand
  000c0	e3a02002	 mov         r2, #2
  000c4	e1a01005	 mov         r1, r5
  000c8	e28d0008	 add         r0, sp, #8
  000cc	eb000000	 bl          BitsAnd
  000d0	e1a04000	 mov         r4, r0
  000d4	e28d0008	 add         r0, sp, #8
  000d8	e3a030ff	 mov         r3, #0xFF
  000dc	e3a02000	 mov         r2, #0
  000e0	e1a01005	 mov         r1, r5
  000e4	eb000000	 bl          WriteCommand
  000e8	e3140002	 tst         r4, #2
  000ec	0a000017	 beq         |$cleanUp$43694|
  000f0	e59d2000	 ldr         r2, [sp]
  000f4	e59d4004	 ldr         r4, [sp, #4]
  000f8	e59d101c	 ldr         r1, [sp, #0x1C]
  000fc	e59d000c	 ldr         r0, [sp, #0xC]
  00100		 |$LN8@OALFlashLo@2|

; 1315 :                         {
; 1316 :                         goto cleanUp;
; 1317 :                         }
; 1318 :                     break;
; 1319 : #endif OAL_FLASH_NO_COMMAND_SET_1
; 1320 : 
; 1321 : #ifndef OAL_FLASH_NO_COMMAND_SET_2
; 1322 :                 case 2: // AMD
; 1323 :                     if (!LockDownBlock2(&info, chip, blockStart))
; 1324 :                         {
; 1325 :                         goto cleanUp;
; 1326 :                         }                    
; 1327 :                     break;
; 1328 : #endif OAL_FLASH_NO_COMMAND_SET_2
; 1329 : 
; 1330 :                 default:
; 1331 :                     goto cleanUp;
; 1332 :                 }
; 1333 :             }         
; 1334 : 
; 1335 :         // Move to next block
; 1336 :         blockStart = blockEnd;

  00100	e1a0500b	 mov         r5, r11

; 1337 :         if (blockStart >= end) break;

  00104	e15b0009	 cmp         r11, r9
  00108	2a00000f	 bcs         |$LN28@OALFlashLo@2|

; 1338 :         if (++block >= info.aBlocks[region])

  0010c	e5923038	 ldr         r3, [r2, #0x38]
  00110	e2877001	 add         r7, r7, #1
  00114	e1570003	 cmp         r7, r3
  00118	e28d3008	 add         r3, sp, #8
  0011c	3affffca	 bcc         |$LL14@OALFlashLo@2|

; 1339 :             {
; 1340 :             block = 0;
; 1341 :             if (++region >= info.regions)

  00120	e2866001	 add         r6, r6, #1
  00124	e1560001	 cmp         r6, r1
  00128	e3a07000	 mov         r7, #0
  0012c	e28d3008	 add         r3, sp, #8
  00130	3affffc5	 bcc         |$LL14@OALFlashLo@2|

; 1342 :                 {
; 1343 :                 // Try read next chip info
; 1344 :                 if (!OALFlashInfo((VOID*)block, &info)) break;

  00134	e28d1008	 add         r1, sp, #8
  00138	e3a00000	 mov         r0, #0
  0013c	eb000000	 bl          OALFlashInfo
  00140	e3500000	 cmp         r0, #0

; 1345 :                 region = 0;

  00144	13a06000	 movne       r6, #0
  00148	1affffbb	 bne         |$LN30@OALFlashLo@2|
  0014c		 |$LN28@OALFlashLo@2|

; 1346 :                 chip = block;
; 1347 :                 }
; 1348 :             }
; 1349 :         }
; 1350 : 
; 1351 :     rc = TRUE;

  0014c	e3a0a001	 mov         r10, #1
  00150		 |$cleanUp$43694|

; 1352 :    
; 1353 : cleanUp:
; 1354 :     return rc;
; 1355 : }

  00150	e1a0000a	 mov         r0, r10
  00154	e28dd060	 add         sp, sp, #0x60
  00158	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0015c	e12fff1e	 bx          lr
  00160		 |$M44415|

			 ENDP  ; |OALFlashLockDown|

	END
