; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\TIMER\VARTICK\vartick.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALTimerUpdateRescheduleTime|
	IMPORT	|OALTimerUpdate|
	IMPORT	|OALTimerCountsSinceSysTick|
	IMPORT	|g_oalTimer|
	IMPORT	|g_pNKGlobal|

  00000			 AREA	 |.pdata|, PDATA
|$T43106| DCD	|$LN10@OALTimerUp|
	DCD	0x40004a04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\common\timer\vartick\vartick.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerUpdateRescheduleTime| PROC

; 25   : {

  00000		 |$LN10@OALTimerUp|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M43103|

; 26   :     UINT32 baseMSec, diffMSec, diffCounts;
; 27   :     INT32 counts;
; 28   : 
; 29   :     // Get current system timer counter
; 30   :     baseMSec = CurMSec;

  00010	e59f310c	 ldr         r3, [pc, #0x10C]
  00014	e5933000	 ldr         r3, [r3]
  00018	e28330c8	 add         r3, r3, #0xC8
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3004	 str         r3, [sp, #4]

; 31   : 
; 32   :     // Return if we are already setup correctly
; 33   :     if (time == (baseMSec + g_oalTimer.actualMSecPerSysTick)) goto cleanUp;

  00024	e59d2004	 ldr         r2, [sp, #4]
  00028	e59f30f0	 ldr         r3, [pc, #0xF0]
  0002c	e5933014	 ldr         r3, [r3, #0x14]
  00030	e0822003	 add         r2, r2, r3
  00034	e59d301c	 ldr         r3, [sp, #0x1C]
  00038	e1530002	 cmp         r3, r2
  0003c	1a000000	 bne         |$LN5@OALTimerUp|
  00040	ea000033	 b           |$cleanUp$43087|
  00044		 |$LN5@OALTimerUp|

; 34   : 
; 35   :     // How far we are from next tick
; 36   :     counts = g_oalTimer.actualCountsPerSysTick - OALTimerCountsSinceSysTick();

  00044	eb000000	 bl          OALTimerCountsSinceSysTick
  00048	e58d0010	 str         r0, [sp, #0x10]
  0004c	e59f30cc	 ldr         r3, [pc, #0xCC]
  00050	e5932018	 ldr         r2, [r3, #0x18]
  00054	e59d3010	 ldr         r3, [sp, #0x10]
  00058	e0423003	 sub         r3, r2, r3
  0005c	e58d3000	 str         r3, [sp]

; 37   : 
; 38   :     // If timer interrupts occurs, or we are within 1 ms of the scheduled
; 39   :     // interrupt, just return - timer ISR will take care of it.
; 40   :     if (baseMSec != CurMSec || counts < (INT32)g_oalTimer.countsPerMSec) {

  00060	e59f30bc	 ldr         r3, [pc, #0xBC]
  00064	e5933000	 ldr         r3, [r3]
  00068	e28330c8	 add         r3, r3, #0xC8
  0006c	e5932000	 ldr         r2, [r3]
  00070	e59d3004	 ldr         r3, [sp, #4]
  00074	e1530002	 cmp         r3, r2
  00078	1a000004	 bne         |$LN3@OALTimerUp|
  0007c	e59d2000	 ldr         r2, [sp]
  00080	e59f3098	 ldr         r3, [pc, #0x98]
  00084	e5933000	 ldr         r3, [r3]
  00088	e1520003	 cmp         r2, r3
  0008c	aa000000	 bge         |$LN4@OALTimerUp|
  00090		 |$LN3@OALTimerUp|

; 41   :         goto cleanUp;

  00090	ea00001f	 b           |$cleanUp$43087|
  00094		 |$LN4@OALTimerUp|

; 42   :     }        
; 43   : 
; 44   :     // Calculate the distance between the new time and the last timer interrupt
; 45   :     diffMSec = time - baseMSec;

  00094	e59d201c	 ldr         r2, [sp, #0x1C]
  00098	e59d3004	 ldr         r3, [sp, #4]
  0009c	e0423003	 sub         r3, r2, r3
  000a0	e58d300c	 str         r3, [sp, #0xC]

; 46   : 
; 47   :     // Trying to set reschedule time prior or equal to CurMSec - this could
; 48   :     // happen if a thread is on its way to sleep while preempted before
; 49   :     // getting into the Sleep Queue
; 50   :     if ((INT32)diffMSec < 0) diffMSec = 0;

  000a4	e59d300c	 ldr         r3, [sp, #0xC]
  000a8	e3530000	 cmp         r3, #0
  000ac	aa000001	 bge         |$LN2@OALTimerUp|
  000b0	e3a03000	 mov         r3, #0
  000b4	e58d300c	 str         r3, [sp, #0xC]
  000b8		 |$LN2@OALTimerUp|

; 51   : 
; 52   :     // Account for limitation (we are using msecPerSysTick instead
; 53   :     // maxPeriodMSec - this allows little more ways how to modify timer
; 54   :     // behavior, but in most cases those values will be same)
; 55   :     if (diffMSec > g_oalTimer.msecPerSysTick) {

  000b8	e59d200c	 ldr         r2, [sp, #0xC]
  000bc	e59f305c	 ldr         r3, [pc, #0x5C]
  000c0	e593300c	 ldr         r3, [r3, #0xC]
  000c4	e1520003	 cmp         r2, r3
  000c8	9a000002	 bls         |$LN1@OALTimerUp|

; 56   :         diffMSec = g_oalTimer.msecPerSysTick;

  000cc	e59f304c	 ldr         r3, [pc, #0x4C]
  000d0	e593300c	 ldr         r3, [r3, #0xC]
  000d4	e58d300c	 str         r3, [sp, #0xC]
  000d8		 |$LN1@OALTimerUp|

; 57   :     }        
; 58   : 
; 59   :     // Calculate count difference
; 60   :     diffCounts = diffMSec * g_oalTimer.countsPerMSec;

  000d8	e59d200c	 ldr         r2, [sp, #0xC]
  000dc	e59f303c	 ldr         r3, [pc, #0x3C]
  000e0	e5933000	 ldr         r3, [r3]
  000e4	e0030392	 mul         r3, r2, r3
  000e8	e58d3008	 str         r3, [sp, #8]

; 61   : 
; 62   :     // Actual values to be used by interrupt handler
; 63   :     g_oalTimer.actualMSecPerSysTick = diffMSec;

  000ec	e59d200c	 ldr         r2, [sp, #0xC]
  000f0	e59f3028	 ldr         r3, [pc, #0x28]
  000f4	e5832014	 str         r2, [r3, #0x14]

; 64   :     g_oalTimer.actualCountsPerSysTick = diffCounts;

  000f8	e59d2008	 ldr         r2, [sp, #8]
  000fc	e59f301c	 ldr         r3, [pc, #0x1C]
  00100	e5832018	 str         r2, [r3, #0x18]

; 65   : 
; 66   :     // Reduct actual timer period (implementation must shift interrupt time
; 67   :     // if we are too close to new tick time)
; 68   :     OALTimerUpdate(diffCounts, g_oalTimer.countsMargin);

  00104	e59f3014	 ldr         r3, [pc, #0x14]
  00108	e5931004	 ldr         r1, [r3, #4]
  0010c	e59d0008	 ldr         r0, [sp, #8]
  00110	eb000000	 bl          OALTimerUpdate
  00114		 |$cleanUp$43087|

; 69   : 
; 70   : cleanUp:
; 71   :     return;    
; 72   : }

  00114	e28dd014	 add         sp, sp, #0x14
  00118	e89d6000	 ldmia       sp, {sp, lr}
  0011c	e12fff1e	 bx          lr
  00120		 |$LN11@OALTimerUp|
  00120		 |$LN12@OALTimerUp|
  00120	00000000	 DCD         |g_oalTimer|
  00124		 |$LN13@OALTimerUp|
  00124	00000000	 DCD         |g_pNKGlobal|
  00128		 |$M43104|

			 ENDP  ; |OALTimerUpdateRescheduleTime|

	END
