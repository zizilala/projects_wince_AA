; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\TIMER\VARIDLE\idle.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OEMIdle|
	IMPORT	|OALCPUIdle|
	IMPORT	|g_oalTimer|
	IMPORT	|OALTimerCountsSinceSysTick|
	IMPORT	|g_pNKGlobal|

  00000			 AREA	 |.pdata|, PDATA
|$T43100| DCD	|$LN7@OEMIdle|
	DCD	0x40004704
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\common\timer\varidle\idle.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMIdle| PROC

; 35   : {

  00000		 |$LN7@OEMIdle|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M43097|

; 36   :     UINT32 baseMSec;
; 37   :     INT32 usedCounts, idleCounts;
; 38   :     ULARGE_INTEGER idle;
; 39   : 
; 40   :     // Get current system timer counter
; 41   :     baseMSec = CurMSec;

  00010	e59f30fc	 ldr         r3, [pc, #0xFC]
  00014	e5933000	 ldr         r3, [r3]
  00018	e28330c8	 add         r3, r3, #0xC8
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3004	 str         r3, [sp, #4]

; 42   :     
; 43   :     // Find how many hi-res ticks was already used
; 44   :     usedCounts = OALTimerCountsSinceSysTick();

  00024	eb000000	 bl          OALTimerCountsSinceSysTick
  00028	e58d0014	 str         r0, [sp, #0x14]
  0002c	e59d3014	 ldr         r3, [sp, #0x14]
  00030	e58d3008	 str         r3, [sp, #8]

; 45   : 
; 46   :     // We should wait this time
; 47   :     idleCounts = g_oalTimer.actualCountsPerSysTick;

  00034	e59f30dc	 ldr         r3, [pc, #0xDC]
  00038	e5933018	 ldr         r3, [r3, #0x18]
  0003c	e58d3000	 str         r3, [sp]

; 48   :     
; 49   :     // Move SoC/CPU to idle mode
; 50   :     OALCPUIdle();

  00040	eb000000	 bl          OALCPUIdle

; 51   : 
; 52   :     // When there wasn't timer interrupt modify idle time
; 53   :     if (CurMSec == baseMSec) {

  00044	e59f30c8	 ldr         r3, [pc, #0xC8]
  00048	e5933000	 ldr         r3, [r3]
  0004c	e28330c8	 add         r3, r3, #0xC8
  00050	e5932000	 ldr         r2, [r3]
  00054	e59d3004	 ldr         r3, [sp, #4]
  00058	e1520003	 cmp         r2, r3
  0005c	1a000003	 bne         |$LN2@OEMIdle|

; 54   :         idleCounts = OALTimerCountsSinceSysTick();

  00060	eb000000	 bl          OALTimerCountsSinceSysTick
  00064	e58d0018	 str         r0, [sp, #0x18]
  00068	e59d3018	 ldr         r3, [sp, #0x18]
  0006c	e58d3000	 str         r3, [sp]
  00070		 |$LN2@OEMIdle|

; 55   :     }
; 56   : 
; 57   :     // Get real idle value. If result is negative we didn't idle at all.
; 58   :     idleCounts -= usedCounts;

  00070	e59d2000	 ldr         r2, [sp]
  00074	e59d3008	 ldr         r3, [sp, #8]
  00078	e0423003	 sub         r3, r2, r3
  0007c	e58d3000	 str         r3, [sp]

; 59   :     if (idleCounts < 0) idleCounts = 0;

  00080	e59d3000	 ldr         r3, [sp]
  00084	e3530000	 cmp         r3, #0
  00088	aa000001	 bge         |$LN1@OEMIdle|
  0008c	e3a03000	 mov         r3, #0
  00090	e58d3000	 str         r3, [sp]
  00094		 |$LN1@OEMIdle|

; 60   : 
; 61   :     // Update idle counters
; 62   :     idle.LowPart = curridlelow;

  00094	e59f3078	 ldr         r3, [pc, #0x78]
  00098	e5933000	 ldr         r3, [r3]
  0009c	e28330d0	 add         r3, r3, #0xD0
  000a0	e5933000	 ldr         r3, [r3]
  000a4	e58d300c	 str         r3, [sp, #0xC]

; 63   :     idle.HighPart = curridlehigh;

  000a8	e59f3064	 ldr         r3, [pc, #0x64]
  000ac	e5933000	 ldr         r3, [r3]
  000b0	e28330d4	 add         r3, r3, #0xD4
  000b4	e5933000	 ldr         r3, [r3]
  000b8	e58d3010	 str         r3, [sp, #0x10]

; 64   :     idle.QuadPart += idleCounts;

  000bc	e59d0000	 ldr         r0, [sp]
  000c0	e59d3000	 ldr         r3, [sp]
  000c4	e1a01fc3	 mov         r1, r3, asr #31
  000c8	e59d200c	 ldr         r2, [sp, #0xC]
  000cc	e59d3010	 ldr         r3, [sp, #0x10]
  000d0	e0922000	 adds        r2, r2, r0
  000d4	e0a33001	 adc         r3, r3, r1
  000d8	e58d200c	 str         r2, [sp, #0xC]
  000dc	e58d3010	 str         r3, [sp, #0x10]

; 65   :     curridlelow  = idle.LowPart;

  000e0	e59f302c	 ldr         r3, [pc, #0x2C]
  000e4	e5933000	 ldr         r3, [r3]
  000e8	e28320d0	 add         r2, r3, #0xD0
  000ec	e59d300c	 ldr         r3, [sp, #0xC]
  000f0	e5823000	 str         r3, [r2]

; 66   :     curridlehigh = idle.HighPart;

  000f4	e59f3018	 ldr         r3, [pc, #0x18]
  000f8	e5933000	 ldr         r3, [r3]
  000fc	e28320d4	 add         r2, r3, #0xD4
  00100	e59d3010	 ldr         r3, [sp, #0x10]
  00104	e5823000	 str         r3, [r2]

; 67   : }

  00108	e28dd01c	 add         sp, sp, #0x1C
  0010c	e89d6000	 ldmia       sp, {sp, lr}
  00110	e12fff1e	 bx          lr
  00114		 |$LN8@OEMIdle|
  00114		 |$LN9@OEMIdle|
  00114	00000000	 DCD         |g_pNKGlobal|
  00118		 |$LN10@OEMIdle|
  00118	00000000	 DCD         |g_oalTimer|
  0011c		 |$M43098|

			 ENDP  ; |OEMIdle|

	END
