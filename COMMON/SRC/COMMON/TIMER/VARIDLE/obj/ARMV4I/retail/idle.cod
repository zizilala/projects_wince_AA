; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\TIMER\VARIDLE\idle.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OEMIdle|
	IMPORT	|OALCPUIdle|
	IMPORT	|g_oalTimer|
	IMPORT	|OALTimerCountsSinceSysTick|
	IMPORT	|g_pNKGlobal|
; File c:\wince600\platform\common\src\common\timer\varidle\idle.c

  00000			 AREA	 |.pdata|, PDATA
|$T43137| DCD	|$LN7@OEMIdle|
	DCD	0x40001d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMIdle| PROC

; 35   : {

  00000		 |$LN7@OEMIdle|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M43134|

; 36   :     UINT32 baseMSec;
; 37   :     INT32 usedCounts, idleCounts;
; 38   :     ULARGE_INTEGER idle;
; 39   : 
; 40   :     // Get current system timer counter
; 41   :     baseMSec = CurMSec;

  00004	e59f6064	 ldr         r6, [pc, #0x64]
  00008	e5963000	 ldr         r3, [r6]
  0000c	e59340c8	 ldr         r4, [r3, #0xC8]

; 42   :     
; 43   :     // Find how many hi-res ticks was already used
; 44   :     usedCounts = OALTimerCountsSinceSysTick();

  00010	eb000000	 bl          OALTimerCountsSinceSysTick

; 45   : 
; 46   :     // We should wait this time
; 47   :     idleCounts = g_oalTimer.actualCountsPerSysTick;

  00014	e59f3050	 ldr         r3, [pc, #0x50]
  00018	e1a07000	 mov         r7, r0
  0001c	e5935018	 ldr         r5, [r3, #0x18]

; 48   :     
; 49   :     // Move SoC/CPU to idle mode
; 50   :     OALCPUIdle();

  00020	eb000000	 bl          OALCPUIdle

; 51   : 
; 52   :     // When there wasn't timer interrupt modify idle time
; 53   :     if (CurMSec == baseMSec) {

  00024	e5962000	 ldr         r2, [r6]
  00028	e59230c8	 ldr         r3, [r2, #0xC8]
  0002c	e1530004	 cmp         r3, r4
  00030	1a000002	 bne         |$LN2@OEMIdle|

; 54   :         idleCounts = OALTimerCountsSinceSysTick();

  00034	eb000000	 bl          OALTimerCountsSinceSysTick
  00038	e5962000	 ldr         r2, [r6]
  0003c	e1a05000	 mov         r5, r0
  00040		 |$LN2@OEMIdle|

; 55   :     }
; 56   : 
; 57   :     // Get real idle value. If result is negative we didn't idle at all.
; 58   :     idleCounts -= usedCounts;
; 59   :     if (idleCounts < 0) idleCounts = 0;
; 60   : 
; 61   :     // Update idle counters
; 62   :     idle.LowPart = curridlelow;

  00040	e59230d0	 ldr         r3, [r2, #0xD0]
  00044	e0550007	 subs        r0, r5, r7
  00048	43a00000	 movmi       r0, #0

; 63   :     idle.HighPart = curridlehigh;

  0004c	e59210d4	 ldr         r1, [r2, #0xD4]

; 64   :     idle.QuadPart += idleCounts;

  00050	e0933000	 adds        r3, r3, r0

; 65   :     curridlelow  = idle.LowPart;

  00054	e58230d0	 str         r3, [r2, #0xD0]

; 66   :     curridlehigh = idle.HighPart;

  00058	e5962000	 ldr         r2, [r6]
  0005c	e0a13fc0	 adc         r3, r1, r0, asr #31
  00060	e58230d4	 str         r3, [r2, #0xD4]

; 67   : }

  00064	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$LN8@OEMIdle|
  0006c		 |$LN9@OEMIdle|
  0006c	00000000	 DCD         |g_oalTimer|
  00070		 |$LN10@OEMIdle|
  00070	00000000	 DCD         |g_pNKGlobal|
  00074		 |$M43135|

			 ENDP  ; |OEMIdle|

	END
