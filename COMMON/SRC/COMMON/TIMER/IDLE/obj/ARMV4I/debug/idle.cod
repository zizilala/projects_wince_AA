; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\TIMER\IDLE\idle.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OEMIdle|
	IMPORT	|OALCPUIdle|
	IMPORT	|OALTimerUpdate|
	IMPORT	|OALTimerCountsSinceSysTick|
	IMPORT	|g_oalTimer|
	IMPORT	|g_pNKGlobal|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T43110| DCD	|$LN13@OEMIdle|
	DCD	0x4000ae04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\common\timer\idle\idle.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMIdle| PROC

; 56   : {

  00000		 |$LN13@OEMIdle|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd02c	 sub         sp, sp, #0x2C
  00010		 |$M43107|

; 57   :     UINT32 baseMSec, idleMSec, idleSysTicks;
; 58   :     INT32 usedCounts, idleCounts;
; 59   :     ULARGE_INTEGER idle;
; 60   : 
; 61   : 
; 62   :     // Get current system timer counter
; 63   :     baseMSec = CurMSec;

  00010	e59f3298	 ldr         r3, [pc, #0x298]
  00014	e5933000	 ldr         r3, [r3]
  00018	e28330c8	 add         r3, r3, #0xC8
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3004	 str         r3, [sp, #4]

; 64   : 
; 65   :     // Compute the remaining idle time
; 66   :     idleMSec = dwReschedTime - baseMSec;

  00024	e59f3284	 ldr         r3, [pc, #0x284]
  00028	e5933000	 ldr         r3, [r3]
  0002c	e28330c4	 add         r3, r3, #0xC4
  00030	e5932000	 ldr         r2, [r3]
  00034	e59d3004	 ldr         r3, [sp, #4]
  00038	e0423003	 sub         r3, r2, r3
  0003c	e58d3010	 str         r3, [sp, #0x10]

; 67   :     
; 68   :     // Idle time has expired - we need to return
; 69   :     if ((INT32)idleMSec <= 0) return;

  00040	e59d3010	 ldr         r3, [sp, #0x10]
  00044	e3530000	 cmp         r3, #0
  00048	ca000000	 bgt         |$LN8@OEMIdle|
  0004c	ea000094	 b           |$LN9@OEMIdle|
  00050		 |$LN8@OEMIdle|

; 70   : 
; 71   :     // Limit the maximum idle time to what is supported.  
; 72   :     // Counter size is the limiting parameter.  When kernel 
; 73   :     // profiler or interrupt latency timing is active it is set
; 74   :     // to one system tick.
; 75   :     if (idleMSec > g_oalTimer.maxPeriodMSec) {

  00050	e59d2010	 ldr         r2, [sp, #0x10]
  00054	e59f3258	 ldr         r3, [pc, #0x258]
  00058	e5933008	 ldr         r3, [r3, #8]
  0005c	e1520003	 cmp         r2, r3
  00060	9a000002	 bls         |$LN7@OEMIdle|

; 76   :         idleMSec = g_oalTimer.maxPeriodMSec;

  00064	e59f3248	 ldr         r3, [pc, #0x248]
  00068	e5933008	 ldr         r3, [r3, #8]
  0006c	e58d3010	 str         r3, [sp, #0x10]
  00070		 |$LN7@OEMIdle|

; 77   :     }
; 78   :     
; 79   :     // We can wait only full systick
; 80   :     idleSysTicks = idleMSec/g_oalTimer.msecPerSysTick;

  00070	e59d1010	 ldr         r1, [sp, #0x10]
  00074	e59f3238	 ldr         r3, [pc, #0x238]
  00078	e593000c	 ldr         r0, [r3, #0xC]
  0007c	eb000000	 bl          __rt_udiv
  00080	e58d0008	 str         r0, [sp, #8]

; 81   :     
; 82   :     // This is idle time in hi-res ticks
; 83   :     idleCounts = idleSysTicks * g_oalTimer.countsPerSysTick;

  00084	e59d2008	 ldr         r2, [sp, #8]
  00088	e59f3224	 ldr         r3, [pc, #0x224]
  0008c	e5933010	 ldr         r3, [r3, #0x10]
  00090	e0030392	 mul         r3, r2, r3
  00094	e58d3000	 str         r3, [sp]

; 84   : 
; 85   :     // Find how many hi-res ticks was already used
; 86   :     usedCounts = OALTimerCountsSinceSysTick();

  00098	eb000000	 bl          OALTimerCountsSinceSysTick
  0009c	e58d001c	 str         r0, [sp, #0x1C]
  000a0	e59d301c	 ldr         r3, [sp, #0x1C]
  000a4	e58d300c	 str         r3, [sp, #0xC]

; 87   : 
; 88   :     // Prolong beat period to idle time -- don't do it idle time isn't
; 89   :     // longer than one system tick. Even if OALTimerExtendSysTick function
; 90   :     // should accept this value it can cause problems if kernel profiler
; 91   :     // or interrupt latency timing is active.
; 92   :     if (idleSysTicks > 1) {

  000a8	e59d3008	 ldr         r3, [sp, #8]
  000ac	e3530001	 cmp         r3, #1
  000b0	9a000009	 bls         |$LN6@OEMIdle|

; 93   :         // Extend timer period
; 94   :         OALTimerUpdate(idleCounts, g_oalTimer.countsMargin);

  000b4	e59f31f8	 ldr         r3, [pc, #0x1F8]
  000b8	e5931004	 ldr         r1, [r3, #4]
  000bc	e59d0000	 ldr         r0, [sp]
  000c0	eb000000	 bl          OALTimerUpdate

; 95   :         // Update value for timer interrupt which wakeup from idle
; 96   :         g_oalTimer.actualMSecPerSysTick = idleMSec;

  000c4	e59d2010	 ldr         r2, [sp, #0x10]
  000c8	e59f31e4	 ldr         r3, [pc, #0x1E4]
  000cc	e5832014	 str         r2, [r3, #0x14]

; 97   :         g_oalTimer.actualCountsPerSysTick = idleCounts;

  000d0	e59d2000	 ldr         r2, [sp]
  000d4	e59f31d8	 ldr         r3, [pc, #0x1D8]
  000d8	e5832018	 str         r2, [r3, #0x18]
  000dc		 |$LN6@OEMIdle|

; 98   :     }
; 99   : 
; 100  :     // Move SoC/CPU to idle mode
; 101  :     OALCPUIdle();

  000dc	eb000000	 bl          OALCPUIdle

; 102  : 
; 103  :     // Return system tick period back to original. Don't call when idle
; 104  :     // time was one system tick. See comment above.
; 105  :     if (idleSysTicks > 1) {

  000e0	e59d3008	 ldr         r3, [sp, #8]
  000e4	e3530001	 cmp         r3, #1
  000e8	9a00003c	 bls         |$LN5@OEMIdle|

; 106  : 
; 107  :         // If there wasn't timer interrupt we have to update CurMSec&curCounts
; 108  :         if (CurMSec == baseMSec) {

  000ec	e59f31bc	 ldr         r3, [pc, #0x1BC]
  000f0	e5933000	 ldr         r3, [r3]
  000f4	e28330c8	 add         r3, r3, #0xC8
  000f8	e5932000	 ldr         r2, [r3]
  000fc	e59d3004	 ldr         r3, [sp, #4]
  00100	e1520003	 cmp         r2, r3
  00104	1a000034	 bne         |$LN4@OEMIdle|

; 109  :             // Return system tick period back to original
; 110  :             idleSysTicks = OALTimerUpdate(
; 111  :                 g_oalTimer.countsPerSysTick, g_oalTimer.countsMargin
; 112  :             );

  00108	e59f31a4	 ldr         r3, [pc, #0x1A4]
  0010c	e5931004	 ldr         r1, [r3, #4]
  00110	e59f319c	 ldr         r3, [pc, #0x19C]
  00114	e5930010	 ldr         r0, [r3, #0x10]
  00118	eb000000	 bl          OALTimerUpdate
  0011c	e58d0020	 str         r0, [sp, #0x20]
  00120	e59d3020	 ldr         r3, [sp, #0x20]
  00124	e58d3008	 str         r3, [sp, #8]

; 113  :             // Restore original values
; 114  :             g_oalTimer.actualMSecPerSysTick = g_oalTimer.msecPerSysTick;

  00128	e59f3184	 ldr         r3, [pc, #0x184]
  0012c	e593200c	 ldr         r2, [r3, #0xC]
  00130	e59f317c	 ldr         r3, [pc, #0x17C]
  00134	e5832014	 str         r2, [r3, #0x14]

; 115  :             g_oalTimer.actualCountsPerSysTick = g_oalTimer.countsPerSysTick;

  00138	e59f3174	 ldr         r3, [pc, #0x174]
  0013c	e5932010	 ldr         r2, [r3, #0x10]
  00140	e59f316c	 ldr         r3, [pc, #0x16C]
  00144	e5832018	 str         r2, [r3, #0x18]

; 116  :             // Fix system tick counters & idle counter
; 117  :             CurMSec += idleSysTicks * g_oalTimer.actualMSecPerSysTick;

  00148	e59f3160	 ldr         r3, [pc, #0x160]
  0014c	e5933000	 ldr         r3, [r3]
  00150	e28300c8	 add         r0, r3, #0xC8
  00154	e59d1008	 ldr         r1, [sp, #8]
  00158	e59f3154	 ldr         r3, [pc, #0x154]
  0015c	e5933014	 ldr         r3, [r3, #0x14]
  00160	e0020391	 mul         r2, r1, r3
  00164	e5903000	 ldr         r3, [r0]
  00168	e0832002	 add         r2, r3, r2
  0016c	e59f313c	 ldr         r3, [pc, #0x13C]
  00170	e5933000	 ldr         r3, [r3]
  00174	e28330c8	 add         r3, r3, #0xC8
  00178	e5832000	 str         r2, [r3]

; 118  :             idleCounts = idleSysTicks * g_oalTimer.actualCountsPerSysTick;

  0017c	e59d2008	 ldr         r2, [sp, #8]
  00180	e59f312c	 ldr         r3, [pc, #0x12C]
  00184	e5933018	 ldr         r3, [r3, #0x18]
  00188	e0030392	 mul         r3, r2, r3
  0018c	e58d3000	 str         r3, [sp]

; 119  :             g_oalTimer.curCounts += idleCounts;

  00190	e59d1000	 ldr         r1, [sp]
  00194	e59d3000	 ldr         r3, [sp]
  00198	e1a00fc3	 mov         r0, r3, asr #31
  0019c	e59f3110	 ldr         r3, [pc, #0x110]
  001a0	e5932020	 ldr         r2, [r3, #0x20]
  001a4	e59f3108	 ldr         r3, [pc, #0x108]
  001a8	e5933024	 ldr         r3, [r3, #0x24]
  001ac	e0921001	 adds        r1, r2, r1
  001b0	e0a32000	 adc         r2, r3, r0
  001b4	e59f30f8	 ldr         r3, [pc, #0xF8]
  001b8	e5831020	 str         r1, [r3, #0x20]
  001bc	e59f30f0	 ldr         r3, [pc, #0xF0]
  001c0	e5832024	 str         r2, [r3, #0x24]

; 120  :             idleCounts += OALTimerCountsSinceSysTick(); 

  001c4	eb000000	 bl          OALTimerCountsSinceSysTick
  001c8	e58d0024	 str         r0, [sp, #0x24]
  001cc	e59d2000	 ldr         r2, [sp]
  001d0	e59d3024	 ldr         r3, [sp, #0x24]
  001d4	e0823003	 add         r3, r2, r3
  001d8	e58d3000	 str         r3, [sp]
  001dc		 |$LN4@OEMIdle|

; 121  :         }            
; 122  : 
; 123  :     } else {

  001dc	ea00000a	 b           |$LN3@OEMIdle|
  001e0		 |$LN5@OEMIdle|

; 124  : 
; 125  :         if (CurMSec == baseMSec) {

  001e0	e59f30c8	 ldr         r3, [pc, #0xC8]
  001e4	e5933000	 ldr         r3, [r3]
  001e8	e28330c8	 add         r3, r3, #0xC8
  001ec	e5932000	 ldr         r2, [r3]
  001f0	e59d3004	 ldr         r3, [sp, #4]
  001f4	e1520003	 cmp         r2, r3
  001f8	1a000003	 bne         |$LN2@OEMIdle|

; 126  :            // Update actual idle counts, if there wasn't timer interrupt
; 127  :             idleCounts = OALTimerCountsSinceSysTick();

  001fc	eb000000	 bl          OALTimerCountsSinceSysTick
  00200	e58d0028	 str         r0, [sp, #0x28]
  00204	e59d3028	 ldr         r3, [sp, #0x28]
  00208	e58d3000	 str         r3, [sp]
  0020c		 |$LN2@OEMIdle|
  0020c		 |$LN3@OEMIdle|

; 128  :         }            
; 129  : 
; 130  :     } 
; 131  : 
; 132  :     // Get real idle value. If result is negative we didn't idle at all.
; 133  :     idleCounts -= usedCounts;

  0020c	e59d2000	 ldr         r2, [sp]
  00210	e59d300c	 ldr         r3, [sp, #0xC]
  00214	e0423003	 sub         r3, r2, r3
  00218	e58d3000	 str         r3, [sp]

; 134  :     if (idleCounts < 0) idleCounts = 0;

  0021c	e59d3000	 ldr         r3, [sp]
  00220	e3530000	 cmp         r3, #0
  00224	aa000001	 bge         |$LN1@OEMIdle|
  00228	e3a03000	 mov         r3, #0
  0022c	e58d3000	 str         r3, [sp]
  00230		 |$LN1@OEMIdle|

; 135  :     
; 136  :     // Update idle counters
; 137  :     idle.LowPart = curridlelow;

  00230	e59f3078	 ldr         r3, [pc, #0x78]
  00234	e5933000	 ldr         r3, [r3]
  00238	e28330d0	 add         r3, r3, #0xD0
  0023c	e5933000	 ldr         r3, [r3]
  00240	e58d3014	 str         r3, [sp, #0x14]

; 138  :     idle.HighPart = curridlehigh;

  00244	e59f3064	 ldr         r3, [pc, #0x64]
  00248	e5933000	 ldr         r3, [r3]
  0024c	e28330d4	 add         r3, r3, #0xD4
  00250	e5933000	 ldr         r3, [r3]
  00254	e58d3018	 str         r3, [sp, #0x18]

; 139  :     idle.QuadPart += idleCounts;

  00258	e59d0000	 ldr         r0, [sp]
  0025c	e59d3000	 ldr         r3, [sp]
  00260	e1a01fc3	 mov         r1, r3, asr #31
  00264	e59d2014	 ldr         r2, [sp, #0x14]
  00268	e59d3018	 ldr         r3, [sp, #0x18]
  0026c	e0922000	 adds        r2, r2, r0
  00270	e0a33001	 adc         r3, r3, r1
  00274	e58d2014	 str         r2, [sp, #0x14]
  00278	e58d3018	 str         r3, [sp, #0x18]

; 140  :     curridlelow  = idle.LowPart;

  0027c	e59f302c	 ldr         r3, [pc, #0x2C]
  00280	e5933000	 ldr         r3, [r3]
  00284	e28320d0	 add         r2, r3, #0xD0
  00288	e59d3014	 ldr         r3, [sp, #0x14]
  0028c	e5823000	 str         r3, [r2]

; 141  :     curridlehigh = idle.HighPart;

  00290	e59f3018	 ldr         r3, [pc, #0x18]
  00294	e5933000	 ldr         r3, [r3]
  00298	e28320d4	 add         r2, r3, #0xD4
  0029c	e59d3018	 ldr         r3, [sp, #0x18]
  002a0	e5823000	 str         r3, [r2]
  002a4		 |$LN9@OEMIdle|

; 142  : }

  002a4	e28dd02c	 add         sp, sp, #0x2C
  002a8	e89d6000	 ldmia       sp, {sp, lr}
  002ac	e12fff1e	 bx          lr
  002b0		 |$LN14@OEMIdle|
  002b0		 |$LN15@OEMIdle|
  002b0	00000000	 DCD         |g_pNKGlobal|
  002b4		 |$LN16@OEMIdle|
  002b4	00000000	 DCD         |g_oalTimer|
  002b8		 |$M43108|

			 ENDP  ; |OEMIdle|

	END
