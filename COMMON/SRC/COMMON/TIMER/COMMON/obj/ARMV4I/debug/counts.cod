; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\TIMER\COMMON\counts.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OEMGetTickCount|
	IMPORT	|OALTimerCountsSinceSysTick|
	IMPORT	|g_pNKGlobal|
	IMPORT	|g_oalTimer|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T43117| DCD	|$LN10@OEMGetTick|
	DCD	0x40002b02
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\common\timer\common\counts.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMGetTickCount| PROC

; 34   : {

  00000		 |$LN10@OEMGetTick|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M43114|

; 35   :     UINT32 count;
; 36   :     INT32 offset;
; 37   : 
; 38   :     if (g_oalTimer.actualMSecPerSysTick == 1) {

  00008	e59f3094	 ldr         r3, [pc, #0x94]
  0000c	e5933014	 ldr         r3, [r3, #0x14]
  00010	e3530001	 cmp         r3, #1
  00014	1a000005	 bne         |$LN5@OEMGetTick|

; 39   :         // Return CurMSec if the system tick is 1 ms.
; 40   :         count = CurMSec;

  00018	e59f3088	 ldr         r3, [pc, #0x88]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e28330c8	 add         r3, r3, #0xC8
  00024	e5933000	 ldr         r3, [r3]
  00028	e58d3000	 str         r3, [sp]

; 41   :     }  else {

  0002c	ea000016	 b           |$LN4@OEMGetTick|
  00030		 |$LN5@OEMGetTick|
  00030		 |$LN3@OEMGetTick|

; 42   :         // System timer tick period exceeds 1 ms. 
; 43   :         //
; 44   :         // This code adjusts the accuracy of the returned value to the nearest
; 45   :         // MSec when the system tick exceeds 1 ms. The following code checks if 
; 46   :         // a system timer interrupt occurred between reading the CurMSec value 
; 47   :         // and the call to fetch the HiResTicksSinceSysTick. If so, the value of
; 48   :         // CurMSec and Offset is re-read, with the certainty that a system timer
; 49   :         // interrupt will not occur again.
; 50   :         do {
; 51   :             count = CurMSec;

  00030	e59f3070	 ldr         r3, [pc, #0x70]
  00034	e5933000	 ldr         r3, [r3]
  00038	e28330c8	 add         r3, r3, #0xC8
  0003c	e5933000	 ldr         r3, [r3]
  00040	e58d3000	 str         r3, [sp]

; 52   :             offset = OALTimerCountsSinceSysTick();

  00044	eb000000	 bl          OALTimerCountsSinceSysTick
  00048	e58d000c	 str         r0, [sp, #0xC]
  0004c	e59d300c	 ldr         r3, [sp, #0xC]
  00050	e58d3004	 str         r3, [sp, #4]

; 53   :         } 
; 54   :         while (count != CurMSec);

  00054	e59f304c	 ldr         r3, [pc, #0x4C]
  00058	e5933000	 ldr         r3, [r3]
  0005c	e28330c8	 add         r3, r3, #0xC8
  00060	e5932000	 ldr         r2, [r3]
  00064	e59d3000	 ldr         r3, [sp]
  00068	e1530002	 cmp         r3, r2
  0006c	1affffef	 bne         |$LN3@OEMGetTick|

; 55   : 
; 56   :         // Adjust the MSec value with the contribution from HiRes counter.
; 57   :         count += offset/g_oalTimer.countsPerMSec;

  00070	e59d1004	 ldr         r1, [sp, #4]
  00074	e59f3028	 ldr         r3, [pc, #0x28]
  00078	e5930000	 ldr         r0, [r3]
  0007c	eb000000	 bl          __rt_udiv
  00080	e59d3000	 ldr         r3, [sp]
  00084	e0833000	 add         r3, r3, r0
  00088	e58d3000	 str         r3, [sp]
  0008c		 |$LN4@OEMGetTick|

; 58   :     }
; 59   : 
; 60   :     return count;

  0008c	e59d3000	 ldr         r3, [sp]
  00090	e58d3008	 str         r3, [sp, #8]

; 61   : }

  00094	e59d0008	 ldr         r0, [sp, #8]
  00098	e28dd010	 add         sp, sp, #0x10
  0009c	e49de004	 ldr         lr, [sp], #4
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN11@OEMGetTick|
  000a4		 |$LN12@OEMGetTick|
  000a4	00000000	 DCD         |g_oalTimer|
  000a8		 |$LN13@OEMGetTick|
  000a8	00000000	 DCD         |g_pNKGlobal|
  000ac		 |$M43115|

			 ENDP  ; |OEMGetTickCount|

	EXPORT	|OALTimerQueryPerformanceFrequency|

  00008			 AREA	 |.pdata|, PDATA
|$T43126| DCD	|$LN6@OALTimerQu|
	DCD	0x40001b04
; Function compile flags: /Odtp

  000ac			 AREA	 |.text|, CODE, ARM

  000ac		 |OALTimerQueryPerformanceFrequency| PROC

; 73   : {

  000ac		 |$LN6@OALTimerQu|
  000ac	e1a0c00d	 mov         r12, sp
  000b0	e92d0001	 stmdb       sp!, {r0}
  000b4	e92d5000	 stmdb       sp!, {r12, lr}
  000b8	e24dd004	 sub         sp, sp, #4
  000bc		 |$M43123|

; 74   :     if (!pFrequency) return FALSE;

  000bc	e59d300c	 ldr         r3, [sp, #0xC]
  000c0	e3530000	 cmp         r3, #0
  000c4	1a000002	 bne         |$LN1@OALTimerQu|
  000c8	e3a03000	 mov         r3, #0
  000cc	e58d3000	 str         r3, [sp]
  000d0	ea00000b	 b           |$LN2@OALTimerQu|
  000d4		 |$LN1@OALTimerQu|

; 75   : 
; 76   :     pFrequency->HighPart = 0;

  000d4	e59d300c	 ldr         r3, [sp, #0xC]
  000d8	e2832004	 add         r2, r3, #4
  000dc	e3a03000	 mov         r3, #0
  000e0	e5823000	 str         r3, [r2]

; 77   :     pFrequency->LowPart = 1000 * g_oalTimer.countsPerMSec;

  000e4	e59f3028	 ldr         r3, [pc, #0x28]
  000e8	e5931000	 ldr         r1, [r3]
  000ec	e3a03ffa	 mov         r3, #0xFA, 30
  000f0	e0020391	 mul         r2, r1, r3
  000f4	e59d300c	 ldr         r3, [sp, #0xC]
  000f8	e5832000	 str         r2, [r3]

; 78   :     return TRUE;

  000fc	e3a03001	 mov         r3, #1
  00100	e58d3000	 str         r3, [sp]
  00104		 |$LN2@OALTimerQu|

; 79   : }

  00104	e59d0000	 ldr         r0, [sp]
  00108	e28dd004	 add         sp, sp, #4
  0010c	e89d6000	 ldmia       sp, {sp, lr}
  00110	e12fff1e	 bx          lr
  00114		 |$LN7@OALTimerQu|
  00114		 |$LN8@OALTimerQu|
  00114	00000000	 DCD         |g_oalTimer|
  00118		 |$M43124|

			 ENDP  ; |OALTimerQueryPerformanceFrequency|

	EXPORT	|OALTimerQueryPerformanceCounter|

  00010			 AREA	 |.pdata|, PDATA
|$T43134| DCD	|$LN9@OALTimerQu@2|
	DCD	0x40003804
; Function compile flags: /Odtp

  00118			 AREA	 |.text|, CODE, ARM

  00118		 |OALTimerQueryPerformanceCounter| PROC

; 90   : {

  00118		 |$LN9@OALTimerQu@2|
  00118	e1a0c00d	 mov         r12, sp
  0011c	e92d0001	 stmdb       sp!, {r0}
  00120	e92d5000	 stmdb       sp!, {r12, lr}
  00124	e24dd024	 sub         sp, sp, #0x24
  00128		 |$M43131|

; 91   :     UINT64 base;
; 92   :     INT32 offset;
; 93   : 
; 94   :     if (!pCounter) return FALSE;

  00128	e59d302c	 ldr         r3, [sp, #0x2C]
  0012c	e3530000	 cmp         r3, #0
  00130	1a000002	 bne         |$LN4@OALTimerQu@2|
  00134	e3a03000	 mov         r3, #0
  00138	e58d300c	 str         r3, [sp, #0xC]
  0013c	ea000028	 b           |$LN5@OALTimerQu@2|
  00140		 |$LN4@OALTimerQu@2|
  00140		 |$LN3@OALTimerQu@2|

; 95   :  
; 96   :     // Make sure CurTicks is the same before and after read of counter
; 97   :     // to avoid for possible rollover. Note that this is probably not necessary
; 98   :     // because TimerTicksSinceBeat will return negative value when it happen.
; 99   :     // We must be careful about signed/unsigned arithmetic.
; 100  :     
; 101  :     do {
; 102  :        base = g_oalTimer.curCounts;

  00140	e59f30ac	 ldr         r3, [pc, #0xAC]
  00144	e5933020	 ldr         r3, [r3, #0x20]
  00148	e58d3000	 str         r3, [sp]
  0014c	e59f30a0	 ldr         r3, [pc, #0xA0]
  00150	e5933024	 ldr         r3, [r3, #0x24]
  00154	e58d3004	 str         r3, [sp, #4]

; 103  :        offset = OALTimerCountsSinceSysTick();

  00158	eb000000	 bl          OALTimerCountsSinceSysTick
  0015c	e58d0010	 str         r0, [sp, #0x10]
  00160	e59d3010	 ldr         r3, [sp, #0x10]
  00164	e58d3008	 str         r3, [sp, #8]

; 104  :     } while (base != g_oalTimer.curCounts);

  00168	e59f3084	 ldr         r3, [pc, #0x84]
  0016c	e5931020	 ldr         r1, [r3, #0x20]
  00170	e59f307c	 ldr         r3, [pc, #0x7C]
  00174	e5932024	 ldr         r2, [r3, #0x24]
  00178	e59d3000	 ldr         r3, [sp]
  0017c	e58d3014	 str         r3, [sp, #0x14]
  00180	e59d3004	 ldr         r3, [sp, #4]
  00184	e58d3018	 str         r3, [sp, #0x18]
  00188	e59d3018	 ldr         r3, [sp, #0x18]
  0018c	e58d301c	 str         r3, [sp, #0x1C]
  00190	e58d2020	 str         r2, [sp, #0x20]
  00194	e59d3014	 ldr         r3, [sp, #0x14]
  00198	e1530001	 cmp         r3, r1
  0019c	1affffe7	 bne         |$LN3@OALTimerQu@2|
  001a0	e59d201c	 ldr         r2, [sp, #0x1C]
  001a4	e59d3020	 ldr         r3, [sp, #0x20]
  001a8	e1520003	 cmp         r2, r3
  001ac	1affffe3	 bne         |$LN3@OALTimerQu@2|

; 105  : 
; 106  :     // Update the counter
; 107  :     pCounter->QuadPart = (ULONGLONG)((INT64)base + offset);

  001b0	e59d1008	 ldr         r1, [sp, #8]
  001b4	e59d3008	 ldr         r3, [sp, #8]
  001b8	e1a00fc3	 mov         r0, r3, asr #31
  001bc	e59d2000	 ldr         r2, [sp]
  001c0	e59d3004	 ldr         r3, [sp, #4]
  001c4	e0921001	 adds        r1, r2, r1
  001c8	e0a32000	 adc         r2, r3, r0
  001cc	e59d302c	 ldr         r3, [sp, #0x2C]
  001d0	e5831000	 str         r1, [r3]
  001d4	e59d302c	 ldr         r3, [sp, #0x2C]
  001d8	e5832004	 str         r2, [r3, #4]

; 108  : 
; 109  :     return TRUE;

  001dc	e3a03001	 mov         r3, #1
  001e0	e58d300c	 str         r3, [sp, #0xC]
  001e4		 |$LN5@OALTimerQu@2|

; 110  : }

  001e4	e59d000c	 ldr         r0, [sp, #0xC]
  001e8	e28dd024	 add         sp, sp, #0x24
  001ec	e89d6000	 ldmia       sp, {sp, lr}
  001f0	e12fff1e	 bx          lr
  001f4		 |$LN10@OALTimerQu@2|
  001f4		 |$LN11@OALTimerQu@2|
  001f4	00000000	 DCD         |g_oalTimer|
  001f8		 |$M43132|

			 ENDP  ; |OALTimerQueryPerformanceCounter|

	END
