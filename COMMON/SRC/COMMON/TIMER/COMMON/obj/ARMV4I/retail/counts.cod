; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\TIMER\COMMON\counts.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OEMGetTickCount|
	IMPORT	|OALTimerCountsSinceSysTick|
	IMPORT	|g_pNKGlobal|
	IMPORT	|g_oalTimer|
	IMPORT	|__rt_udiv|
; File c:\wince600\platform\common\src\common\timer\common\counts.c

  00000			 AREA	 |.pdata|, PDATA
|$T43157| DCD	|$LN11@OEMGetTick|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMGetTickCount| PROC

; 34   : {

  00000		 |$LN11@OEMGetTick|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43154|

; 35   :     UINT32 count;
; 36   :     INT32 offset;
; 37   : 
; 38   :     if (g_oalTimer.actualMSecPerSysTick == 1) {

  00004	e59f405c	 ldr         r4, [pc, #0x5C]
  00008	e5943014	 ldr         r3, [r4, #0x14]
  0000c	e3530001	 cmp         r3, #1

; 39   :         // Return CurMSec if the system tick is 1 ms.
; 40   :         count = CurMSec;

  00010	059f304c	 ldreq       r3, [pc, #0x4C]
  00014	05933000	 ldreq       r3, [r3]
  00018	059300c8	 ldreq       r0, [r3, #0xC8]

; 58   :     }
; 59   : 
; 60   :     return count;
; 61   : }

  0001c	08bd4070	 ldmeqia     sp!, {r4 - r6, lr}
  00020	012fff1e	 bxeq        lr

; 41   :     }  else {

  00024	e59f5038	 ldr         r5, [pc, #0x38]
  00028	e5953000	 ldr         r3, [r5]
  0002c	e28320c8	 add         r2, r3, #0xC8
  00030		 |$LL3@OEMGetTick|

; 42   :         // System timer tick period exceeds 1 ms. 
; 43   :         //
; 44   :         // This code adjusts the accuracy of the returned value to the nearest
; 45   :         // MSec when the system tick exceeds 1 ms. The following code checks if 
; 46   :         // a system timer interrupt occurred between reading the CurMSec value 
; 47   :         // and the call to fetch the HiResTicksSinceSysTick. If so, the value of
; 48   :         // CurMSec and Offset is re-read, with the certainty that a system timer
; 49   :         // interrupt will not occur again.
; 50   :         do {
; 51   :             count = CurMSec;

  00030	e5926000	 ldr         r6, [r2]

; 52   :             offset = OALTimerCountsSinceSysTick();

  00034	eb000000	 bl          OALTimerCountsSinceSysTick

; 53   :         } 
; 54   :         while (count != CurMSec);

  00038	e5953000	 ldr         r3, [r5]
  0003c	e1a01000	 mov         r1, r0
  00040	e28320c8	 add         r2, r3, #0xC8
  00044	e5923000	 ldr         r3, [r2]
  00048	e1560003	 cmp         r6, r3
  0004c	1afffff7	 bne         |$LL3@OEMGetTick|

; 55   : 
; 56   :         // Adjust the MSec value with the contribution from HiRes counter.
; 57   :         count += offset/g_oalTimer.countsPerMSec;

  00050	e5940000	 ldr         r0, [r4]
  00054	eb000000	 bl          __rt_udiv
  00058	e0860000	 add         r0, r6, r0

; 58   :     }
; 59   : 
; 60   :     return count;
; 61   : }

  0005c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN12@OEMGetTick|
  00064		 |$LN13@OEMGetTick|
  00064	00000000	 DCD         |g_pNKGlobal|
  00068		 |$LN14@OEMGetTick|
  00068	00000000	 DCD         |g_oalTimer|
  0006c		 |$M43155|

			 ENDP  ; |OEMGetTickCount|

	EXPORT	|OALTimerQueryPerformanceFrequency|

  00000			 AREA	 |.pdata|, PDATA
|$T43170| DCD	|$LN6@OALTimerQu|
	DCD	0x40000c00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerQueryPerformanceFrequency| PROC

; 73   : {

  00000		 |$LN6@OALTimerQu|
  00000		 |$M43167|
  00000	e1b01000	 movs        r1, r0

; 74   :     if (!pFrequency) return FALSE;

  00004	03a00000	 moveq       r0, #0

; 75   : 
; 76   :     pFrequency->HighPart = 0;
; 77   :     pFrequency->LowPart = 1000 * g_oalTimer.countsPerMSec;

  00008	159f301c	 ldrne       r3, [pc, #0x1C]
  0000c	13a02000	 movne       r2, #0
  00010	15812004	 strne       r2, [r1, #4]
  00014	15932000	 ldrne       r2, [r3]
  00018	13a03ffa	 movne       r3, #0xFA, 30

; 78   :     return TRUE;

  0001c	13a00001	 movne       r0, #1
  00020	10030392	 mulne       r3, r2, r3
  00024	15813000	 strne       r3, [r1]

; 79   : }

  00028	e12fff1e	 bx          lr
  0002c		 |$LN7@OALTimerQu|
  0002c		 |$LN8@OALTimerQu|
  0002c	00000000	 DCD         |g_oalTimer|
  00030		 |$M43168|

			 ENDP  ; |OALTimerQueryPerformanceFrequency|

	EXPORT	|OALTimerQueryPerformanceCounter|

  00000			 AREA	 |.pdata|, PDATA
|$T43187| DCD	|$LN11@OALTimerQu@2|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerQueryPerformanceCounter| PROC

; 90   : {

  00000		 |$LN11@OALTimerQu@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M43184|
  00004	e1b05000	 movs        r5, r0

; 91   :     UINT64 base;
; 92   :     INT32 offset;
; 93   : 
; 94   :     if (!pCounter) return FALSE;

  00008	03a00000	 moveq       r0, #0

; 110  : }

  0000c	08bd40f0	 ldmeqia     sp!, {r4 - r7, lr}
  00010	012fff1e	 bxeq        lr

; 91   :     UINT64 base;
; 92   :     INT32 offset;
; 93   : 
; 94   :     if (!pCounter) return FALSE;

  00014	e59f4038	 ldr         r4, [pc, #0x38]
  00018		 |$LL3@OALTimerQu@2|

; 95   :  
; 96   :     // Make sure CurTicks is the same before and after read of counter
; 97   :     // to avoid for possible rollover. Note that this is probably not necessary
; 98   :     // because TimerTicksSinceBeat will return negative value when it happen.
; 99   :     // We must be careful about signed/unsigned arithmetic.
; 100  :     
; 101  :     do {
; 102  :        base = g_oalTimer.curCounts;

  00018	e5947020	 ldr         r7, [r4, #0x20]
  0001c	e5946024	 ldr         r6, [r4, #0x24]

; 103  :        offset = OALTimerCountsSinceSysTick();

  00020	eb000000	 bl          OALTimerCountsSinceSysTick

; 104  :     } while (base != g_oalTimer.curCounts);

  00024	e5943020	 ldr         r3, [r4, #0x20]
  00028	e5942024	 ldr         r2, [r4, #0x24]
  0002c	e1570003	 cmp         r7, r3
  00030	1afffff8	 bne         |$LL3@OALTimerQu@2|
  00034	e1560002	 cmp         r6, r2
  00038	1afffff6	 bne         |$LL3@OALTimerQu@2|

; 105  : 
; 106  :     // Update the counter
; 107  :     pCounter->QuadPart = (ULONGLONG)((INT64)base + offset);

  0003c	e0902007	 adds        r2, r0, r7
  00040	e0a63fc0	 adc         r3, r6, r0, asr #31
  00044	e885000c	 stmia       r5, {r2, r3}

; 108  : 
; 109  :     return TRUE;

  00048	e3a00001	 mov         r0, #1

; 110  : }

  0004c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN12@OALTimerQu@2|
  00054		 |$LN13@OALTimerQu@2|
  00054	00000000	 DCD         |g_oalTimer|
  00058		 |$M43185|

			 ENDP  ; |OALTimerQueryPerformanceCounter|

	END
