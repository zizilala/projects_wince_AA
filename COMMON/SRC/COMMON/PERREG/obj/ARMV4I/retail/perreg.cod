; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\PERREG\perreg.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|?fWriteFailure@?1??WriteBufferToFlash@@9@9| % 0x4	; `WriteBufferToFlash'::`2'::fWriteFailure
; File c:\wince600\platform\common\src\common\perreg\perreg.c

  00000			 AREA	 |.pdata|, PDATA
|$T39825| DCD	|$LN10@CheckSum|
	DCD	0x40000e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CheckSum| PROC

; 328  : {

  00000		 |$LN10@CheckSum|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M39822|
  00004	e1a0e000	 mov         lr, r0

; 329  :     UINT32 sum = 0;

  00008	e3a00000	 mov         r0, #0

; 330  :     UINT32 *p;
; 331  : 
; 332  :     for (p = pStart; size > sizeof(UINT32) - 1; size -= sizeof(UINT32)) {

  0000c	e3510003	 cmp         r1, #3
  00010	9a000006	 bls         |$LN1@CheckSum|
  00014	e2413004	 sub         r3, r1, #4
  00018	e1a03123	 mov         r3, r3, lsr #2
  0001c	e2832001	 add         r2, r3, #1
  00020		 |$LL3@CheckSum|

; 333  :         sum += *p++;

  00020	e49e3004	 ldr         r3, [lr], #4
  00024	e2522001	 subs        r2, r2, #1
  00028	e0800003	 add         r0, r0, r3
  0002c	1afffffb	 bne         |$LL3@CheckSum|
  00030		 |$LN1@CheckSum|

; 334  :     }
; 335  :     return sum;
; 336  : }

  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$M39823|

			 ENDP  ; |CheckSum|

	EXPORT	|??_C@_1GE@ECAMGMJA@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@KILKPEAH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAe?$AAr?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@HBFAHLII@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAs@| [ DATA ] ; `string'
	IMPORT	|dpCurSettings|
	IMPORT	|OALFlashErase|
	IMPORT	|OALPAtoVA|
	IMPORT	|NKDbgPrintfW|

  00004			 AREA	 |.bss|, NOINIT
|g_perRegState| % 0x478
|g_perRegState| % 0x478

  00000			 AREA	 |.pdata|, PDATA
|$T39842| DCD	|$LN14@EraseFlash|
	DCD	0x40002e01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@ECAMGMJA@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAs@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "e", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "d", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@KILKPEAH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAe?$AAr?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "e", 0x0, "r"
	DCB	0x0, "a", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "a", 0x0, "t"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@HBFAHLII@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAs@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "e", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EraseFlash| PROC

; 341  : {

  00000		 |$LN14@EraseFlash|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M39839|

; 342  :     BOOL rc = FALSE;
; 343  :     OAL_PERREG_REGION *pRegion;
; 344  :     UINT32 i;
; 345  :     
; 346  :     // Erase all regions...
; 347  :     RETAILMSG(TRUE, (L"INFO: OALPerRegWrite: Registry store erase start\r\n"));

  00004	e59f00a8	 ldr         r0, [pc, #0xA8]
  00008	e3a08000	 mov         r8, #0
  0000c	eb000000	 bl          NKDbgPrintfW

; 348  :     pRegion = g_perRegState.region;

  00010	e59f7098	 ldr         r7, [pc, #0x98]

; 349  :     for (i = 0; i < g_perRegState.regions; i++) {

  00014	e3a06000	 mov         r6, #0
  00018	e5973000	 ldr         r3, [r7]
  0001c	e2875004	 add         r5, r7, #4
  00020	e3530000	 cmp         r3, #0
  00024	0a000010	 beq         |$LN2@EraseFlash|
  00028		 |$LL4@EraseFlash|

; 350  :         if (!OALFlashErase(
; 351  :             OALPAtoUA(pRegion->base), OALPAtoUA(pRegion->start), 
; 352  :             pRegion->size
; 353  :         )) {

  00028	e5950004	 ldr         r0, [r5, #4]
  0002c	e3a01000	 mov         r1, #0
  00030	eb000000	 bl          OALPAtoVA
  00034	e1a04000	 mov         r4, r0
  00038	e5950000	 ldr         r0, [r5]
  0003c	e3a01000	 mov         r1, #0
  00040	eb000000	 bl          OALPAtoVA
  00044	e5952008	 ldr         r2, [r5, #8]
  00048	e1a01004	 mov         r1, r4
  0004c	eb000000	 bl          OALFlashErase
  00050	e3500000	 cmp         r0, #0
  00054	0a00000a	 beq         |$LN10@EraseFlash|
  00058	e5973000	 ldr         r3, [r7]
  0005c	e2866001	 add         r6, r6, #1

; 359  :         }
; 360  :         pRegion++;

  00060	e285500c	 add         r5, r5, #0xC
  00064	e1560003	 cmp         r6, r3
  00068	3affffee	 bcc         |$LL4@EraseFlash|
  0006c		 |$LN2@EraseFlash|

; 361  :     }
; 362  :     rc = TRUE;
; 363  :     RETAILMSG(TRUE, (L"INFO: OALPerRegWrite: Registry store erase done\r\n"));

  0006c	e59f0038	 ldr         r0, [pc, #0x38]
  00070	e3a08001	 mov         r8, #1
  00074	eb000000	 bl          NKDbgPrintfW
  00078		 |$cleanUp$39670|

; 364  : 
; 365  : cleanUp:
; 366  :     return rc;
; 367  : }

  00078	e1a00008	 mov         r0, r8
  0007c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN10@EraseFlash|

; 354  :             OALMSG(OAL_ERROR, (
; 355  :                 L"ERROR: OALPerRegWrite: Flash erase at 0x%08x failed\r\n",
; 356  :                 pRegion->start
; 357  :             ));

  00084	e59f301c	 ldr         r3, [pc, #0x1C]
  00088	e5933440	 ldr         r3, [r3, #0x440]
  0008c	e3130001	 tst         r3, #1
  00090	0afffff8	 beq         |$cleanUp$39670|
  00094	e5951004	 ldr         r1, [r5, #4]
  00098	e59f0004	 ldr         r0, [pc, #4]
  0009c	eb000000	 bl          NKDbgPrintfW

; 358  :             goto cleanUp;

  000a0	eafffff4	 b           |$cleanUp$39670|
  000a4		 |$LN15@EraseFlash|
  000a4		 |$LN16@EraseFlash|
  000a4	00000000	 DCD         |??_C@_1GM@KILKPEAH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAe?$AAr?$AAa@|
  000a8		 |$LN17@EraseFlash|
  000a8	00000000	 DCD         |dpCurSettings|
  000ac		 |$LN18@EraseFlash|
  000ac	00000000	 DCD         |??_C@_1GE@ECAMGMJA@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAs@|
  000b0		 |$LN19@EraseFlash|
  000b0	00000000	 DCD         |g_perRegState|
  000b4		 |$LN20@EraseFlash|
  000b4	00000000	 DCD         |??_C@_1GG@HBFAHLII@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAs@|
  000b8		 |$M39840|

			 ENDP  ; |EraseFlash|

	EXPORT	|??_C@_1LO@LLODBKPO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAs?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@MLPDAKMN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAw?$AAr?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KM@LKKBJECC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAs@| [ DATA ] ; `string'
	IMPORT	|OALFlashWrite|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T39884| DCD	|$LN26@WriteBuffe|
	DCD	0x40006c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LO@LLODBKPO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAs?$AAp@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "o", 0x0, "u"
	DCB	0x0, "t", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "s"
	DCB	0x0, "p", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, ";", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "s"
	DCB	0x0, "i", 0x0, "d", 0x0, "e", 0x0, " ", 0x0, "l", 0x0, "a"
	DCB	0x0, "r", 0x0, "g", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "b"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "p"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@MLPDAKMN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAw?$AAr?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "w", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "a", 0x0, "t"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@LKKBJECC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAs@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, " ", 0x0, "f", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, " "
	DCB	0x0, "s", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, ";"
	DCB	0x0, " ", 0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "s", 0x0, "k", 0x0, "i", 0x0, "p", 0x0, "p"
	DCB	0x0, "e", 0x0, "d", 0x0, "!", 0x0, " ", 0x0, "(", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0, " ", 0x0, "s"
	DCB	0x0, "u", 0x0, "p", 0x0, "p", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WriteBufferToFlash| PROC

; 372  : {

  00000		 |$LN26@WriteBuffe|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M39881|
  00004	e1a0e000	 mov         lr, r0

; 373  :     BOOL rc;
; 374  :     OAL_PERREG_REGION *pRegion;
; 375  :     UINT32 pos, size;
; 376  :     UINT8 *pBuffer;
; 377  :     static BOOL fWriteFailure = FALSE;
; 378  : 
; 379  :     // Sanity check: do we have a valid region to write to?
; 380  :     if (g_perRegState.regionIdx >= g_perRegState.regions) {

  00008	e59f519c	 ldr         r5, [pc, #0x19C]
  0000c	e595106c	 ldr         r1, [r5, #0x6C]
  00010	e5953000	 ldr         r3, [r5]
  00014	e1510003	 cmp         r1, r3
  00018	3a00000b	 bcc         |$LN7@WriteBuffe|

; 381  :         if (!fWriteFailure)

  0001c	e5953478	 ldr         r3, [r5, #0x478]
  00020	e3530000	 cmp         r3, #0
  00024	1a000006	 bne         |$LN6@WriteBuffe|

; 382  :         {
; 383  :             OALMSG(OAL_ERROR, (
; 384  :                 L"ERROR: OALPerRegWrite: no free space; write skipped! (additional errors suppressed)\r\n"
; 385  :             ));

  00028	e59f3174	 ldr         r3, [pc, #0x174]
  0002c	e5933440	 ldr         r3, [r3, #0x440]
  00030	e3130001	 tst         r3, #1
  00034	159f016c	 ldrne       r0, [pc, #0x16C]
  00038	1b000000	 blne        NKDbgPrintfW

; 386  :             fWriteFailure = TRUE;

  0003c	e3a03001	 mov         r3, #1
  00040	e5853478	 str         r3, [r5, #0x478]
  00044		 |$LN6@WriteBuffe|

; 387  :         }
; 388  : 
; 389  :         rc = FALSE;

  00044	e3a04000	 mov         r4, #0

; 390  :         goto cleanUp;

  00048	ea000050	 b           |$cleanUp$39686|
  0004c		 |$LN7@WriteBuffe|

; 391  :     }
; 392  : 
; 393  : 
; 394  :     // Get write position    
; 395  :     pRegion = &g_perRegState.region[g_perRegState.regionIdx];

  0004c	e0812081	 add         r2, r1, r1, lsl #1
  00050	e2853004	 add         r3, r5, #4
  00054	e0839102	 add         r9, r3, r2, lsl #2

; 396  :     pos = pRegion->start + g_perRegState.regionPos;

  00058	e5993004	 ldr         r3, [r9, #4]
  0005c	e5950070	 ldr         r0, [r5, #0x70]

; 397  :     pBuffer = g_perRegState.buffer;
; 398  :     size = g_perRegState.bufferPos;

  00060	e5956474	 ldr         r6, [r5, #0x474]
  00064	e2857074	 add         r7, r5, #0x74
  00068	e0838000	 add         r8, r3, r0

; 399  : 
; 400  :     // Don't write header part until say so...
; 401  :     if (
; 402  :         skipHeader &&
; 403  :         g_perRegState.regionIdx == 0 && 
; 404  :         g_perRegState.regionPos < sizeof(OAL_PERREG_HEADER)
; 405  :     ) {

  0006c	e35e0000	 cmp         lr, #0
  00070	0a000007	 beq         |$LN5@WriteBuffe|
  00074	e3510000	 cmp         r1, #0
  00078	1a000005	 bne         |$LN5@WriteBuffe|
  0007c	e350000c	 cmp         r0, #0xC

; 406  :         pos += sizeof(OAL_PERREG_HEADER) - g_perRegState.regionPos;

  00080	30483000	 subcc       r3, r8, r0

; 407  :         pBuffer += sizeof(OAL_PERREG_HEADER) - g_perRegState.regionPos;

  00084	32852080	 addcc       r2, r5, #0x80
  00088	3283800c	 addcc       r8, r3, #0xC
  0008c	30427000	 subcc       r7, r2, r0

; 408  :         size -= sizeof(OAL_PERREG_HEADER);

  00090	3246600c	 subcc       r6, r6, #0xC
  00094		 |$LN5@WriteBuffe|

; 409  :     }
; 410  : 
; 411  :     // Round size to 4 bytes (32 bits)
; 412  :     if ((size & 0x03) != 0) {

  00094	e2164003	 ands        r4, r6, #3
  00098	0a000006	 beq         |$LN4@WriteBuffe|

; 413  :         memset(pBuffer + (size & ~0x03), 0xFF, 4 - (size & 0x03));

  0009c	e3c63003	 bic         r3, r6, #3
  000a0	e0830007	 add         r0, r3, r7
  000a4	e2642004	 rsb         r2, r4, #4
  000a8	e3a010ff	 mov         r1, #0xFF
  000ac	eb000000	 bl          memset

; 414  :         size += 4 - (size & 0x03);

  000b0	e0463004	 sub         r3, r6, r4
  000b4	e2836004	 add         r6, r3, #4
  000b8		 |$LN4@WriteBuffe|

; 415  :     }
; 416  : 
; 417  :     // Add buffer check sum
; 418  :     g_perRegState.checkSum += CheckSum(pBuffer, size);

  000b8	e3a04000	 mov         r4, #0
  000bc	e1a00007	 mov         r0, r7
  000c0	e3560003	 cmp         r6, #3
  000c4	9a000006	 bls         |$LN16@WriteBuffe|
  000c8	e2463004	 sub         r3, r6, #4
  000cc	e1a02123	 mov         r2, r3, lsr #2
  000d0	e2823001	 add         r3, r2, #1
  000d4		 |$LL18@WriteBuffe|
  000d4	e4901004	 ldr         r1, [r0], #4
  000d8	e2533001	 subs        r3, r3, #1
  000dc	e0844001	 add         r4, r4, r1
  000e0	1afffffb	 bne         |$LL18@WriteBuffe|
  000e4		 |$LN16@WriteBuffe|
  000e4	e595e068	 ldr         lr, [r5, #0x68]

; 419  : 
; 420  :     // Write buffer to flash
; 421  :     if (!(rc = OALFlashWrite(
; 422  :         OALPAtoUA(pRegion->base), OALPAtoUA(pos), size, pBuffer
; 423  :     ))) OALMSG(OAL_ERROR, (

  000e8	e3a01000	 mov         r1, #0
  000ec	e1a00008	 mov         r0, r8
  000f0	e08ee004	 add         lr, lr, r4
  000f4	e585e068	 str         lr, [r5, #0x68]
  000f8	eb000000	 bl          OALPAtoVA
  000fc	e1a04000	 mov         r4, r0
  00100	e5990000	 ldr         r0, [r9]
  00104	e3a01000	 mov         r1, #0
  00108	eb000000	 bl          OALPAtoVA
  0010c	e1a03007	 mov         r3, r7
  00110	e1a02006	 mov         r2, r6
  00114	e1a01004	 mov         r1, r4
  00118	eb000000	 bl          OALFlashWrite
  0011c	e59f6080	 ldr         r6, [pc, #0x80]
  00120	e1b04000	 movs        r4, r0
  00124	1a000004	 bne         |$LN23@WriteBuffe|

; 424  :         L"ERROR: OALPerRegWrite: Flash write at 0x%08x failed\r\n", pos
; 425  :     ));

  00128	e5963440	 ldr         r3, [r6, #0x440]
  0012c	e3130001	 tst         r3, #1
  00130	159f0068	 ldrne       r0, [pc, #0x68]
  00134	11a01008	 movne       r1, r8
  00138	1b000000	 blne        NKDbgPrintfW
  0013c		 |$LN23@WriteBuffe|

; 426  : 
; 427  :     // Move write pointer
; 428  :     g_perRegState.regionPos += g_perRegState.bufferPos;

  0013c	e5952070	 ldr         r2, [r5, #0x70]
  00140	e5953474	 ldr         r3, [r5, #0x474]

; 429  :     g_perRegState.bufferPos = 0;

  00144	e3a01000	 mov         r1, #0
  00148	e0822003	 add         r2, r2, r3
  0014c	e5852070	 str         r2, [r5, #0x70]
  00150	e5851474	 str         r1, [r5, #0x474]

; 430  :     if (g_perRegState.regionPos >= pRegion->size) {

  00154	e5993008	 ldr         r3, [r9, #8]
  00158	e1520003	 cmp         r2, r3
  0015c	3a00000b	 bcc         |$cleanUp$39686|

; 431  :         g_perRegState.regionPos = 0;

  00160	e3a03000	 mov         r3, #0
  00164	e5853070	 str         r3, [r5, #0x70]

; 432  :         g_perRegState.regionIdx++;

  00168	e595306c	 ldr         r3, [r5, #0x6C]
  0016c	e2832001	 add         r2, r3, #1
  00170	e585206c	 str         r2, [r5, #0x6C]

; 433  : 
; 434  :         if (g_perRegState.regionIdx >= g_perRegState.regions) {

  00174	e5953000	 ldr         r3, [r5]
  00178	e1520003	 cmp         r2, r3
  0017c	3a000003	 bcc         |$cleanUp$39686|
  00180	e5963440	 ldr         r3, [r6, #0x440]

; 435  :             OALMSG(OAL_ERROR, (
; 436  :                 L"ERROR: OALPerRegWrite: out of space; set aside larger backing store for persistent registry!\r\n"
; 437  :             ));

  00184	e3130001	 tst         r3, #1
  00188	159f000c	 ldrne       r0, [pc, #0xC]
  0018c	1b000000	 blne        NKDbgPrintfW
  00190		 |$cleanUp$39686|

; 438  :         }
; 439  :     }
; 440  : 
; 441  : cleanUp:
; 442  :     return rc;
; 443  : }

  00190	e1a00004	 mov         r0, r4
  00194	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00198	e12fff1e	 bx          lr
  0019c		 |$LN27@WriteBuffe|
  0019c		 |$LN28@WriteBuffe|
  0019c	00000000	 DCD         |??_C@_1LO@LLODBKPO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAs?$AAp@|
  001a0		 |$LN29@WriteBuffe|
  001a0	00000000	 DCD         |??_C@_1GM@MLPDAKMN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAw?$AAr?$AAi@|
  001a4		 |$LN30@WriteBuffe|
  001a4	00000000	 DCD         |dpCurSettings|
  001a8		 |$LN31@WriteBuffe|
  001a8	00000000	 DCD         |??_C@_1KM@LKKBJECC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAs@|
  001ac		 |$LN32@WriteBuffe|
  001ac	00000000	 DCD         |g_perRegState|
  001b0		 |$M39882|

			 ENDP  ; |WriteBufferToFlash|

	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T39912| DCD	|$LN15@ReadBuffer|
	DCD	0x40002d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReadBufferFromFlash| PROC

; 448  : {

  00000		 |$LN15@ReadBuffer|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M39909|

; 449  :     OAL_PERREG_REGION *pRegion;
; 450  :     UINT32 count, pos, chunk, remain;
; 451  :     UINT8 *pBuffer;
; 452  : 
; 453  :     // Get possition    
; 454  :     count = sizeof(g_perRegState.buffer);

  00004	e59f40a4	 ldr         r4, [pc, #0xA4]
  00008	e3a05b01	 mov         r5, #1, 22
  0000c	e5940070	 ldr         r0, [r4, #0x70]
  00010	e594206c	 ldr         r2, [r4, #0x6C]
  00014	e2848004	 add         r8, r4, #4
  00018		 |$LL3@ReadBuffer|

; 455  :     pBuffer = g_perRegState.buffer;
; 456  :     
; 457  :     while (count > 0 && g_perRegState.regionIdx < g_perRegState.regions) {

  00018	e5943000	 ldr         r3, [r4]
  0001c	e1520003	 cmp         r2, r3
  00020	2a00001a	 bcs         |$LN2@ReadBuffer|

; 458  : 
; 459  :         pRegion = &g_perRegState.region[g_perRegState.regionIdx];

  00024	e0823082	 add         r3, r2, r2, lsl #1
  00028	e0887103	 add         r7, r8, r3, lsl #2

; 460  :         pos = pRegion->start + g_perRegState.regionPos;
; 461  : 
; 462  :         remain = pRegion->size - g_perRegState.regionPos;

  0002c	e5973008	 ldr         r3, [r7, #8]
  00030	e5972004	 ldr         r2, [r7, #4]

; 463  :         chunk = (remain < count) ? remain : count;
; 464  : 
; 465  :         // Copy data chunk
; 466  :         memcpy(pBuffer, OALPAtoUA(pos), chunk);

  00034	e3a01000	 mov         r1, #0
  00038	e0436000	 sub         r6, r3, r0
  0003c	e1560005	 cmp         r6, r5
  00040	e0820000	 add         r0, r2, r0
  00044	21a06005	 movcs       r6, r5
  00048	eb000000	 bl          OALPAtoVA
  0004c	e1a01000	 mov         r1, r0
  00050	e2840074	 add         r0, r4, #0x74
  00054	e1a02006	 mov         r2, r6
  00058	eb000000	 bl          memcpy

; 467  :     
; 468  :         // Move pointer
; 469  :         g_perRegState.regionPos += chunk;

  0005c	e5943070	 ldr         r3, [r4, #0x70]
  00060	e0830006	 add         r0, r3, r6
  00064	e5840070	 str         r0, [r4, #0x70]

; 470  :         if (g_perRegState.regionPos >= pRegion->size) {

  00068	e5973008	 ldr         r3, [r7, #8]
  0006c	e1500003	 cmp         r0, r3

; 471  :             g_perRegState.regionPos = 0;

  00070	23a00000	 movcs       r0, #0
  00074	25840070	 strcs       r0, [r4, #0x70]

; 472  :             g_perRegState.regionIdx++;

  00078	2594306c	 ldrcs       r3, [r4, #0x6C]
  0007c	22832001	 addcs       r2, r3, #1
  00080	2584206c	 strcs       r2, [r4, #0x6C]
  00084	3594206c	 ldrcc       r2, [r4, #0x6C]

; 473  :         }
; 474  : 
; 475  :         // We already read this amount of data
; 476  :         count -= chunk;

  00088	e0555006	 subs        r5, r5, r6
  0008c	1affffe1	 bne         |$LL3@ReadBuffer|
  00090		 |$LN2@ReadBuffer|

; 477  :     }
; 478  : 
; 479  :     // Read should start from buffer start
; 480  :     g_perRegState.bufferPos = 0;

  00090	e3a03000	 mov         r3, #0

; 481  : 
; 482  :     // Return true when we read all data
; 483  :     return (count == 0);

  00094	e3550000	 cmp         r5, #0
  00098	e5843474	 str         r3, [r4, #0x474]
  0009c	03a00001	 moveq       r0, #1

; 484  : }

  000a0	08bd41f0	 ldmeqia     sp!, {r4 - r8, lr}

; 481  : 
; 482  :     // Return true when we read all data
; 483  :     return (count == 0);

  000a4	13a00000	 movne       r0, #0

; 484  : }

  000a8	18bd41f0	 ldmneia     sp!, {r4 - r8, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN16@ReadBuffer|
  000b0		 |$LN17@ReadBuffer|
  000b0	00000000	 DCD         |g_perRegState|
  000b4		 |$M39910|

			 ENDP  ; |ReadBufferFromFlash|


  00000			 AREA	 |.pdata|, PDATA
|$T39933| DCD	|$LN14@CopyFromBu|
	DCD	0x40002001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CopyFromBuffer| PROC

; 489  : {

  00000		 |$LN14@CopyFromBu|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M39930|
  00004	e1b04001	 movs        r4, r1
  00008	e1a08000	 mov         r8, r0

; 490  :     BOOL rc = FALSE;

  0000c	e3a07000	 mov         r7, #0

; 491  :     UINT32 chunk, remain;
; 492  : 
; 493  :     while (count > 0) {

  00010	0a000015	 beq         |$LN3@CopyFromBu|
  00014	e59f6060	 ldr         r6, [pc, #0x60]
  00018	e5963474	 ldr         r3, [r6, #0x474]
  0001c	e2869074	 add         r9, r6, #0x74
  00020		 |$LL4@CopyFromBu|

; 494  : 
; 495  :         // Get data chunk size
; 496  :         remain = sizeof(g_perRegState.buffer) - g_perRegState.bufferPos;

  00020	e2635b01	 rsb         r5, r3, #1, 22

; 497  :         chunk = (remain < count) ? remain : count;

  00024	e1550004	 cmp         r5, r4
  00028	21a05004	 movcs       r5, r4

; 498  :         
; 499  :         // Copy data chunk
; 500  :         memcpy(pBuffer, &g_perRegState.buffer[g_perRegState.bufferPos], chunk);

  0002c	e1a02005	 mov         r2, r5
  00030	e0831009	 add         r1, r3, r9
  00034	e1a00008	 mov         r0, r8
  00038	eb000000	 bl          memcpy

; 501  : 
; 502  :         g_perRegState.bufferPos += chunk;

  0003c	e5963474	 ldr         r3, [r6, #0x474]

; 503  :         (UINT8*)pBuffer += chunk;

  00040	e0888005	 add         r8, r8, r5
  00044	e0833005	 add         r3, r3, r5
  00048	e5863474	 str         r3, [r6, #0x474]

; 504  :         if (g_perRegState.bufferPos >= sizeof(g_perRegState.buffer)) {

  0004c	e3530b01	 cmp         r3, #1, 22
  00050	3a000003	 bcc         |$LN1@CopyFromBu|

; 505  :             if (!ReadBufferFromFlash()) goto cleanUp;

  00054	eb000000	 bl          ReadBufferFromFlash
  00058	e3500000	 cmp         r0, #0
  0005c	0a000003	 beq         |$cleanUp$39725|
  00060	e5963474	 ldr         r3, [r6, #0x474]
  00064		 |$LN1@CopyFromBu|

; 506  :         }
; 507  : 
; 508  :         // How much we still need to get
; 509  :         count -= chunk;

  00064	e0544005	 subs        r4, r4, r5

; 491  :     UINT32 chunk, remain;
; 492  : 
; 493  :     while (count > 0) {

  00068	1affffec	 bne         |$LL4@CopyFromBu|
  0006c		 |$LN3@CopyFromBu|

; 510  :     }        
; 511  : 
; 512  :     rc = TRUE;

  0006c	e3a07001	 mov         r7, #1
  00070		 |$cleanUp$39725|

; 513  :     
; 514  : cleanUp:
; 515  :     return rc;
; 516  : }

  00070	e1a00007	 mov         r0, r7
  00074	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN15@CopyFromBu|
  0007c		 |$LN16@CopyFromBu|
  0007c	00000000	 DCD         |g_perRegState|
  00080		 |$M39931|

			 ENDP  ; |CopyFromBuffer|


  00000			 AREA	 |.pdata|, PDATA
|$T39943| DCD	|$LN6@ResetBuffe|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ResetBuffer| PROC

; 521  : {

  00000		 |$LN6@ResetBuffe|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M39940|
  00004	e3500000	 cmp         r0, #0

; 522  :     // Move at beginning of flash regions
; 523  :     g_perRegState.regionIdx = 0;

  00008	e59f3020	 ldr         r3, [pc, #0x20]
  0000c	e3a02000	 mov         r2, #0

; 524  :     g_perRegState.regionPos = 0;

  00010	e3a01000	 mov         r1, #0
  00014	e583206c	 str         r2, [r3, #0x6C]

; 525  :     g_perRegState.bufferPos = 0;

  00018	e3a02000	 mov         r2, #0
  0001c	e5831070	 str         r1, [r3, #0x70]
  00020	e5832474	 str         r2, [r3, #0x474]

; 526  :     if (!write) ReadBufferFromFlash();

  00024	0b000000	 bleq        ReadBufferFromFlash

; 527  : }

  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$LN7@ResetBuffe|
  00030		 |$LN8@ResetBuffe|
  00030	00000000	 DCD         |g_perRegState|
  00034		 |$M39941|

			 ENDP  ; |ResetBuffer|


  00000			 AREA	 |.pdata|, PDATA
|$T39964| DCD	|$LN14@CopyToBuff|
	DCD	0x40002101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CopyToBuffer| PROC

; 532  : {

  00000		 |$LN14@CopyToBuff|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M39961|
  00004	e1b04001	 movs        r4, r1
  00008	e1a08000	 mov         r8, r0

; 533  :     BOOL rc = FALSE;

  0000c	e3a07000	 mov         r7, #0

; 534  :     UINT32 chunk, remain;
; 535  : 
; 536  :     while (count > 0) {

  00010	0a000016	 beq         |$LN3@CopyToBuff|
  00014	e59f6064	 ldr         r6, [pc, #0x64]
  00018	e5963474	 ldr         r3, [r6, #0x474]
  0001c	e2869074	 add         r9, r6, #0x74
  00020		 |$LL4@CopyToBuff|

; 537  : 
; 538  :         // Get data chunk size
; 539  :         remain = sizeof(g_perRegState.buffer) - g_perRegState.bufferPos;

  00020	e2635b01	 rsb         r5, r3, #1, 22

; 540  :         chunk = (remain < count) ? remain : count;

  00024	e1550004	 cmp         r5, r4
  00028	21a05004	 movcs       r5, r4

; 541  :         
; 542  :         // Copy data chunk
; 543  :         memcpy(&g_perRegState.buffer[g_perRegState.bufferPos], pBuffer, chunk);

  0002c	e1a02005	 mov         r2, r5
  00030	e1a01008	 mov         r1, r8
  00034	e0830009	 add         r0, r3, r9
  00038	eb000000	 bl          memcpy

; 544  : 
; 545  :         // Move buffer pointer and write buffer to flash when it is full
; 546  :         g_perRegState.bufferPos += chunk;

  0003c	e5963474	 ldr         r3, [r6, #0x474]

; 547  :         (UINT8*)pBuffer += chunk;

  00040	e0888005	 add         r8, r8, r5
  00044	e0833005	 add         r3, r3, r5
  00048	e5863474	 str         r3, [r6, #0x474]

; 548  :         if (g_perRegState.bufferPos >= sizeof(g_perRegState.buffer)) {

  0004c	e3530b01	 cmp         r3, #1, 22
  00050	3a000004	 bcc         |$LN1@CopyToBuff|

; 549  :             if (!WriteBufferToFlash(TRUE)) goto cleanUp;

  00054	e3a00001	 mov         r0, #1
  00058	eb000000	 bl          WriteBufferToFlash
  0005c	e3500000	 cmp         r0, #0
  00060	0a000003	 beq         |$cleanUp$39744|
  00064	e5963474	 ldr         r3, [r6, #0x474]
  00068		 |$LN1@CopyToBuff|

; 550  :         }
; 551  : 
; 552  :         // How much we still need to copy
; 553  :         count -= chunk;

  00068	e0544005	 subs        r4, r4, r5

; 534  :     UINT32 chunk, remain;
; 535  : 
; 536  :     while (count > 0) {

  0006c	1affffeb	 bne         |$LL4@CopyToBuff|
  00070		 |$LN3@CopyToBuff|

; 554  :     }        
; 555  : 
; 556  :     rc = TRUE;

  00070	e3a07001	 mov         r7, #1
  00074		 |$cleanUp$39744|

; 557  : 
; 558  : cleanUp:
; 559  :     return rc;
; 560  : }

  00074	e1a00007	 mov         r0, r7
  00078	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN15@CopyToBuff|
  00080		 |$LN16@CopyToBuff|
  00080	00000000	 DCD         |g_perRegState|
  00084		 |$M39962|

			 ENDP  ; |CopyToBuffer|


  00000			 AREA	 |.pdata|, PDATA
|$T39977| DCD	|$LN7@FlushBuffe|
	DCD	0x40000e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FlushBuffer| PROC

; 565  : {

  00000		 |$LN7@FlushBuffe|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39974|

; 566  :     BOOL rc = FALSE;
; 567  : 
; 568  :     // If there are data in buffer write it to flash
; 569  :     if (g_perRegState.bufferPos > 0) {

  00004	e59f3028	 ldr         r3, [pc, #0x28]
  00008	e3a04000	 mov         r4, #0
  0000c	e5933474	 ldr         r3, [r3, #0x474]
  00010	e3530000	 cmp         r3, #0
  00014	0a000002	 beq         |$LN1@FlushBuffe|

; 570  :         if (!WriteBufferToFlash(skipHeader)) goto cleanUp;

  00018	eb000000	 bl          WriteBufferToFlash
  0001c	e3500000	 cmp         r0, #0
  00020	0a000000	 beq         |$cleanUp$39751|
  00024		 |$LN1@FlushBuffe|

; 571  :     }
; 572  : 
; 573  :     rc = TRUE;

  00024	e3a04001	 mov         r4, #1
  00028		 |$cleanUp$39751|

; 574  : 
; 575  : cleanUp:
; 576  :     return rc;
; 577  : }

  00028	e1a00004	 mov         r0, r4
  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN8@FlushBuffe|
  00034		 |$LN9@FlushBuffe|
  00034	00000000	 DCD         |g_perRegState|
  00038		 |$M39975|

			 ENDP  ; |FlushBuffer|

	EXPORT	|OALPerRegWrite|
	EXPORT	|??_C@_1DC@BADJHCAB@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@DHJPBGOH@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAw@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@NLAEBACL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAp?$AAy?$AAT?$AAo?$AAB?$AAu?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@KBPOHJAI@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAw@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@FGACHPAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@HKAJAPA@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T40024| DCD	|$LN35@OALPerRegW|
	DCD	0x40006f02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@BADJHCAB@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@DHJPBGOH@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAw@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "d", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@NLAEBACL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAp?$AAy?$AAT?$AAo?$AAB?$AAu?$AAf@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "o"
	DCB	0x0, "p", 0x0, "y", 0x0, "T", 0x0, "o", 0x0, "B", 0x0, "u"
	DCB	0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@KBPOHJAI@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAw@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@FGACHPAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "N", 0x0, "o"
	DCB	0x0, " ", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "f", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "f"
	DCB	0x0, "i", 0x0, "n", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@HKAJAPA@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPerRegWrite| PROC

; 176  : {

  00000		 |$LN35@OALPerRegW|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M40021|
  00008	e1a07002	 mov         r7, r2
  0000c	e1a09001	 mov         r9, r1
  00010	e1a08000	 mov         r8, r0

; 177  :     BOOL rc = FALSE;
; 178  :     OAL_PERREG_HEADER header;
; 179  : 
; 180  : 
; 181  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 182  :         L"+OALPerRegWrite(0x%08x, 0x%08x, 0x%08x)\r\n", flags, pData, size
; 183  :     ));

  00014	e59f519c	 ldr         r5, [pc, #0x19C]
  00018	e3a06000	 mov         r6, #0
  0001c	e5953440	 ldr         r3, [r5, #0x440]
  00020	e3130a02	 tst         r3, #2, 20
  00024	13130004	 tstne       r3, #4
  00028	159f0184	 ldrne       r0, [pc, #0x184]
  0002c	11a03007	 movne       r3, r7
  00030	11a02009	 movne       r2, r9
  00034	11a01008	 movne       r1, r8
  00038	1b000000	 blne        NKDbgPrintfW

; 184  :     
; 185  :     // Check if it is write start
; 186  :     if ((flags & REG_WRITE_BYTES_START) != 0) {

  0003c	e59f416c	 ldr         r4, [pc, #0x16C]
  00040	e3180001	 tst         r8, #1
  00044	0a00001e	 beq         |$LN6@OALPerRegW|

; 187  : 
; 188  :         // First check if there are regions defined
; 189  :         if (g_perRegState.regions <= 0) {

  00048	e5943000	 ldr         r3, [r4]
  0004c	e3530000	 cmp         r3, #0
  00050	1a000005	 bne         |$LN5@OALPerRegW|
  00054	e5953440	 ldr         r3, [r5, #0x440]

; 190  :             OALMSG(OAL_ERROR, (
; 191  :                 L"ERROR: OALPerRegWrite: No valid flash regions defined\r\n"
; 192  :             ));

  00058	e3130001	 tst         r3, #1
  0005c	0a000043	 beq         |$cleanUp$39601|
  00060	e59f0144	 ldr         r0, [pc, #0x144]
  00064	eb000000	 bl          NKDbgPrintfW

; 193  :             goto cleanUp;

  00068	ea000040	 b           |$cleanUp$39601|
  0006c		 |$LN5@OALPerRegW|

; 194  :         }
; 195  : 
; 196  :         RETAILMSG(TRUE, (L"INFO: OALPerRegWrite: Registry write start\r\n"));

  0006c	e59f0134	 ldr         r0, [pc, #0x134]
  00070	eb000000	 bl          NKDbgPrintfW

; 197  : 
; 198  :         // Erase flash memory
; 199  :         if (!EraseFlash()) goto cleanUp;

  00074	eb000000	 bl          EraseFlash
  00078	e3500000	 cmp         r0, #0
  0007c	0a00003b	 beq         |$cleanUp$39601|

; 200  :         
; 201  :         // Initialize local state variables
; 202  :         g_perRegState.size = 0;

  00080	e3a03000	 mov         r3, #0
  00084	e5843064	 str         r3, [r4, #0x64]

; 203  :         g_perRegState.checkSum = 0;

  00088	e3a03000	 mov         r3, #0
  0008c	e5843068	 str         r3, [r4, #0x68]

; 204  :         memset(&header, 0xFF, sizeof(header));
; 205  : 
; 206  :         // Reset buffer & write temporary header
; 207  :         ResetBuffer(TRUE);

  00090	e3a03000	 mov         r3, #0
  00094	e584306c	 str         r3, [r4, #0x6C]
  00098	e3a03000	 mov         r3, #0
  0009c	e5843070	 str         r3, [r4, #0x70]
  000a0	e3a03000	 mov         r3, #0
  000a4	e3e02000	 mvn         r2, #0

; 208  :         CopyToBuffer(&header, sizeof(header));

  000a8	e3a0100c	 mov         r1, #0xC
  000ac	e28d0000	 add         r0, sp, #0
  000b0	e5843474	 str         r3, [r4, #0x474]
  000b4	e58d2000	 str         r2, [sp]
  000b8	e58d2004	 str         r2, [sp, #4]
  000bc	e58d2008	 str         r2, [sp, #8]
  000c0	eb000000	 bl          CopyToBuffer
  000c4		 |$LN6@OALPerRegW|

; 209  :        
; 210  :     }
; 211  : 
; 212  :     // While there are some data && place where to write
; 213  :     if (size > 0) {

  000c4	e3570000	 cmp         r7, #0
  000c8	0a00000e	 beq         |$LN3@OALPerRegW|

; 214  : 
; 215  :         if (!CopyToBuffer(pData, size)) {

  000cc	e1a01007	 mov         r1, r7
  000d0	e1a00009	 mov         r0, r9
  000d4	eb000000	 bl          CopyToBuffer
  000d8	e3500000	 cmp         r0, #0
  000dc	1a000005	 bne         |$LN2@OALPerRegW|
  000e0	e5953440	 ldr         r3, [r5, #0x440]

; 216  :             OALMSG(OAL_ERROR, (
; 217  :                 L"ERROR: OALPerRegWrite: CopyToBuffer failed\r\n"
; 218  :             ));

  000e4	e3130001	 tst         r3, #1
  000e8	0a000020	 beq         |$cleanUp$39601|
  000ec	e59f00b0	 ldr         r0, [pc, #0xB0]
  000f0	eb000000	 bl          NKDbgPrintfW
  000f4	ea00001d	 b           |$cleanUp$39601|
  000f8		 |$LN2@OALPerRegW|

; 219  :             goto cleanUp;
; 220  :         }
; 221  :         g_perRegState.size += size;

  000f8	e5943064	 ldr         r3, [r4, #0x64]
  000fc	e0833007	 add         r3, r3, r7
  00100	e5843064	 str         r3, [r4, #0x64]

; 222  :         
; 223  :     } else {

  00104	ea000018	 b           |$LN1@OALPerRegW|
  00108		 |$LN3@OALPerRegW|

; 224  : 
; 225  :         // Flush buffer
; 226  :         FlushBuffer(TRUE);

  00108	e5943474	 ldr         r3, [r4, #0x474]
  0010c	e3530000	 cmp         r3, #0
  00110	13a00001	 movne       r0, #1
  00114	1b000000	 blne        WriteBufferToFlash
  00118		 |$cleanUp$40001|

; 227  : 
; 228  :         // Prepare and write header
; 229  :         header.signature = OAL_PERREG_SIGN;
; 230  :         header.size = g_perRegState.size;

  00118	e5942064	 ldr         r2, [r4, #0x64]

; 231  :         header.checkSum = g_perRegState.checkSum;

  0011c	e5941068	 ldr         r1, [r4, #0x68]

; 232  :         ResetBuffer(TRUE);

  00120	e3a00000	 mov         r0, #0
  00124	e584006c	 str         r0, [r4, #0x6C]
  00128	e3a00000	 mov         r0, #0
  0012c	e59f306c	 ldr         r3, [pc, #0x6C]
  00130	e5840070	 str         r0, [r4, #0x70]
  00134	e3a00000	 mov         r0, #0
  00138	e5840474	 str         r0, [r4, #0x474]
  0013c	e58d1008	 str         r1, [sp, #8]

; 233  :         CopyToBuffer(&header, sizeof(header));

  00140	e28d0000	 add         r0, sp, #0
  00144	e3a0100c	 mov         r1, #0xC
  00148	e58d3000	 str         r3, [sp]
  0014c	e58d2004	 str         r2, [sp, #4]
  00150	eb000000	 bl          CopyToBuffer

; 234  :         FlushBuffer(FALSE);

  00154	e5943474	 ldr         r3, [r4, #0x474]
  00158	e3530000	 cmp         r3, #0
  0015c	13a00000	 movne       r0, #0
  00160	1b000000	 blne        WriteBufferToFlash
  00164		 |$cleanUp$40012|

; 235  : 
; 236  :         RETAILMSG(TRUE, (L"INFO: OALPerRegWrite: Registry write done\r\n"));

  00164	e59f0030	 ldr         r0, [pc, #0x30]
  00168	eb000000	 bl          NKDbgPrintfW
  0016c		 |$LN1@OALPerRegW|

; 237  :     }
; 238  :     
; 239  :     rc = TRUE;

  0016c	e3a06001	 mov         r6, #1
  00170		 |$cleanUp$39601|

; 177  :     BOOL rc = FALSE;
; 178  :     OAL_PERREG_HEADER header;
; 179  : 
; 180  : 
; 181  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 182  :         L"+OALPerRegWrite(0x%08x, 0x%08x, 0x%08x)\r\n", flags, pData, size
; 183  :     ));

  00170	e5953440	 ldr         r3, [r5, #0x440]

; 240  :     
; 241  : cleanUp:
; 242  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"-OALPerRegWrite(rc = %d)", rc));

  00174	e3130a02	 tst         r3, #2, 20
  00178	13130004	 tstne       r3, #4
  0017c	159f0014	 ldrne       r0, [pc, #0x14]
  00180	11a01006	 movne       r1, r6
  00184	1b000000	 blne        NKDbgPrintfW

; 243  :     return rc;
; 244  : }

  00188	e1a00006	 mov         r0, r6
  0018c	e28dd00c	 add         sp, sp, #0xC
  00190	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00194	e12fff1e	 bx          lr
  00198		 |$LN36@OALPerRegW|
  00198		 |$LN37@OALPerRegW|
  00198	00000000	 DCD         |??_C@_1DC@BADJHCAB@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@|
  0019c		 |$LN38@OALPerRegW|
  0019c	00000000	 DCD         |??_C@_1FI@DHJPBGOH@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAw@|
  001a0		 |$LN39@OALPerRegW|
  001a0	50524547	 DCD         0x50524547
  001a4		 |$LN40@OALPerRegW|
  001a4	00000000	 DCD         |??_C@_1FK@NLAEBACL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAp?$AAy?$AAT?$AAo?$AAB?$AAu?$AAf@|
  001a8		 |$LN41@OALPerRegW|
  001a8	00000000	 DCD         |??_C@_1FK@KBPOHJAI@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAw@|
  001ac		 |$LN42@OALPerRegW|
  001ac	00000000	 DCD         |??_C@_1HA@FGACHPAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@|
  001b0		 |$LN43@OALPerRegW|
  001b0	00000000	 DCD         |g_perRegState|
  001b4		 |$LN44@OALPerRegW|
  001b4	00000000	 DCD         |??_C@_1FE@HKAJAPA@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5@|
  001b8		 |$LN45@OALPerRegW|
  001b8	00000000	 DCD         |dpCurSettings|
  001bc		 |$M40022|

			 ENDP  ; |OALPerRegWrite|

	EXPORT	|OALPerRegRead|
	EXPORT	|??_C@_1DA@PEPHMLMF@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@ECAFLHLG@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@OHNCKHEN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAr?$AAo?$AAm?$AAO?$AAE?$AAM?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@NIPNJMPD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAr?$AAo?$AAm?$AAO?$AAE?$AAM?$AA?3?$AA?5?$AAB?$AAa?$AAd?$AA?5?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@JPBKLLNK@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@GLNGEKIG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@KDAHPIMP@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T40092| DCD	|$LN45@OALPerRegR|
	DCD	0x40008102

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@PEPHMLMF@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@ECAFLHLG@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAr?$AAe@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "d", 0x0, "o"
	DCB	0x0, "n", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@OHNCKHEN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAr?$AAo?$AAm?$AAO?$AAE?$AAM?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, "F"
	DCB	0x0, "r", 0x0, "o", 0x0, "m", 0x0, "O", 0x0, "E", 0x0, "M"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "c", 0x0, "h"
	DCB	0x0, "e", 0x0, "c", 0x0, "k", 0x0, "s", 0x0, "u", 0x0, "m"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@NIPNJMPD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAr?$AAo?$AAm?$AAO?$AAE?$AAM?$AA?3?$AA?5?$AAB?$AAa?$AAd?$AA?5?$AAs@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, "F"
	DCB	0x0, "r", 0x0, "o", 0x0, "m", 0x0, "O", 0x0, "E", 0x0, "M"
	DCB	0x0, ":", 0x0, " ", 0x0, "B", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "s", 0x0, "i", 0x0, "g", 0x0, "n", 0x0, "a", 0x0, "t"
	DCB	0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@JPBKLLNK@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAr?$AAe@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "r", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@GLNGEKIG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAf@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, ":", 0x0, " ", 0x0, "N", 0x0, "o", 0x0, " "
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "s", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i"
	DCB	0x0, "n", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@KDAHPIMP@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPerRegRead| PROC

; 253  : {

  00000		 |$LN45@OALPerRegR|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd08c	 sub         sp, sp, #0x8C
  00008		 |$M40089|
  00008	e1a09002	 mov         r9, r2
  0000c	e1a0b001	 mov         r11, r1
  00010	e1a07000	 mov         r7, r0

; 254  :     UINT32 rc = 0;
; 255  :     OAL_PERREG_HEADER header;
; 256  :     UINT32 count, checkSum, chunk, buffer[32];
; 257  :     UINT8 *pBase = pData;
; 258  : 
; 259  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 260  :         L"+OALPerRegRead(0x%08x, 0x%08x, 0x%08x)\r\n", flags, pData, dataSize
; 261  :     ));

  00014	e59f41e4	 ldr         r4, [pc, #0x1E4]
  00018	e3a05000	 mov         r5, #0
  0001c	e5943440	 ldr         r3, [r4, #0x440]
  00020	e3130a02	 tst         r3, #2, 20
  00024	13130004	 tstne       r3, #4
  00028	159f01cc	 ldrne       r0, [pc, #0x1CC]
  0002c	11a03009	 movne       r3, r9
  00030	11a0200b	 movne       r2, r11
  00034	11a01007	 movne       r1, r7
  00038	1b000000	 blne        NKDbgPrintfW

; 262  : 
; 263  :     if (flags & REG_READ_BYTES_START) {

  0003c	e59f61b4	 ldr         r6, [pc, #0x1B4]
  00040	e3170001	 tst         r7, #1
  00044	0a00004c	 beq         |$LN40@OALPerRegR|

; 264  : 
; 265  :         if (g_perRegState.regions <= 0) {

  00048	e5963000	 ldr         r3, [r6]
  0004c	e3530000	 cmp         r3, #0
  00050	1a000006	 bne         |$LN6@OALPerRegR|
  00054	e5943440	 ldr         r3, [r4, #0x440]

; 266  :             OALMSG(OAL_ERROR, (
; 267  :                 L"ERROR: OALPerRegRead: No valid flash regions defined\r\n"
; 268  :             ));

  00058	e3130001	 tst         r3, #1
  0005c	0a000001	 beq         |$LN12@OALPerRegR|
  00060	e59f018c	 ldr         r0, [pc, #0x18C]
  00064		 |$LN42@OALPerRegR|
  00064	eb000000	 bl          NKDbgPrintfW
  00068		 |$LN12@OALPerRegR|

; 269  :             rc = -1;

  00068	e3e05000	 mvn         r5, #0

; 270  :             goto cleanUp;

  0006c	ea000050	 b           |$cleanUp$39632|
  00070		 |$LN6@OALPerRegR|

; 271  :         }
; 272  : 
; 273  :         RETAILMSG(TRUE, (L"INFO: OALPerRegRead: Registry read start\r\n"));

  00070	e59f0178	 ldr         r0, [pc, #0x178]
  00074	eb000000	 bl          NKDbgPrintfW

; 274  : 
; 275  :         // Reset buffer and read header
; 276  :         ResetBuffer(FALSE);

  00078	e3a03000	 mov         r3, #0
  0007c	e586306c	 str         r3, [r6, #0x6C]
  00080	e3a03000	 mov         r3, #0
  00084	e5863070	 str         r3, [r6, #0x70]
  00088	e3a03000	 mov         r3, #0
  0008c	e5863474	 str         r3, [r6, #0x474]
  00090	eb000000	 bl          ReadBufferFromFlash

; 277  :         CopyFromBuffer(&header, sizeof(header));

  00094	e3a0100c	 mov         r1, #0xC
  00098	e28d0000	 add         r0, sp, #0
  0009c	eb000000	 bl          CopyFromBuffer

; 278  : 
; 279  :         if (header.signature != OAL_PERREG_SIGN) {

  000a0	e59f2144	 ldr         r2, [pc, #0x144]
  000a4	e59d3000	 ldr         r3, [sp]
  000a8	e1530002	 cmp         r3, r2
  000ac	0a000004	 beq         |$LN5@OALPerRegR|
  000b0	e5943440	 ldr         r3, [r4, #0x440]

; 280  :             OALMSG(OAL_WARN, (L"WARN: ReadRegistryFromOEM: Bad signature\r\n"));

  000b4	e3130002	 tst         r3, #2
  000b8	0affffea	 beq         |$LN12@OALPerRegR|
  000bc	e59f0124	 ldr         r0, [pc, #0x124]

; 281  :             rc = -1;
; 282  :             goto cleanUp;

  000c0	eaffffe7	 b           |$LN42@OALPerRegR|
  000c4		 |$LN5@OALPerRegR|

; 283  :         }
; 284  : 
; 285  :         // Calculate checksum
; 286  :         count = (header.size + 3) & ~0x3;

  000c4	e59d3004	 ldr         r3, [sp, #4]

; 287  :         checkSum = 0;

  000c8	e3a0a000	 mov         r10, #0
  000cc	e2833003	 add         r3, r3, #3
  000d0	e3d38003	 bics        r8, r3, #3

; 288  :         while (count > 0) {

  000d4	0a000013	 beq         |$LN3@OALPerRegR|
  000d8		 |$LL4@OALPerRegR|

; 289  :             chunk = sizeof(buffer) < count ? sizeof(buffer) : count;

  000d8	e3580080	 cmp         r8, #0x80
  000dc	83a07080	 movhi       r7, #0x80
  000e0	91a07008	 movls       r7, r8

; 290  :             CopyFromBuffer(buffer, chunk);

  000e4	e1a01007	 mov         r1, r7
  000e8	e28d000c	 add         r0, sp, #0xC
  000ec	eb000000	 bl          CopyFromBuffer

; 291  :             checkSum += CheckSum(buffer, chunk);

  000f0	e3a02000	 mov         r2, #0
  000f4	e28d000c	 add         r0, sp, #0xC
  000f8	e3570003	 cmp         r7, #3
  000fc	9a000006	 bls         |$LN27@OALPerRegR|
  00100	e2473004	 sub         r3, r7, #4
  00104	e1a03123	 mov         r3, r3, lsr #2
  00108	e2831001	 add         r1, r3, #1
  0010c		 |$LL29@OALPerRegR|
  0010c	e4903004	 ldr         r3, [r0], #4
  00110	e2511001	 subs        r1, r1, #1
  00114	e0822003	 add         r2, r2, r3
  00118	1afffffb	 bne         |$LL29@OALPerRegR|
  0011c		 |$LN27@OALPerRegR|
  0011c	e08aa002	 add         r10, r10, r2

; 292  :             count -= chunk;

  00120	e0588007	 subs        r8, r8, r7
  00124	1affffeb	 bne         |$LL4@OALPerRegR|
  00128		 |$LN3@OALPerRegR|

; 293  :         }
; 294  : 
; 295  :         if (header.checkSum != checkSum) {

  00128	e59d3008	 ldr         r3, [sp, #8]
  0012c	e153000a	 cmp         r3, r10
  00130	0a000004	 beq         |$LN2@OALPerRegR|
  00134	e5943440	 ldr         r3, [r4, #0x440]

; 296  :             OALMSG(OAL_WARN, (
; 297  :                 L"WARN: ReadRegistryFromOEM: Invalid checksum\r\n"
; 298  :             ));

  00138	e3130002	 tst         r3, #2
  0013c	0affffc9	 beq         |$LN12@OALPerRegR|
  00140	e59f009c	 ldr         r0, [pc, #0x9C]

; 299  :             rc = -1;
; 300  :             goto cleanUp;

  00144	eaffffc6	 b           |$LN42@OALPerRegR|
  00148		 |$LN2@OALPerRegR|

; 301  :         }            
; 302  : 
; 303  :         // Reset buffer and read header
; 304  :         ResetBuffer(FALSE);

  00148	e3a03000	 mov         r3, #0
  0014c	e586306c	 str         r3, [r6, #0x6C]
  00150	e3a03000	 mov         r3, #0
  00154	e5863070	 str         r3, [r6, #0x70]
  00158	e3a03000	 mov         r3, #0
  0015c	e5863474	 str         r3, [r6, #0x474]
  00160	eb000000	 bl          ReadBufferFromFlash

; 305  :         CopyFromBuffer(&header, sizeof(header));

  00164	e3a0100c	 mov         r1, #0xC
  00168	e28d0000	 add         r0, sp, #0
  0016c	eb000000	 bl          CopyFromBuffer

; 306  :         g_perRegState.size = header.size;

  00170	e59d1004	 ldr         r1, [sp, #4]
  00174	e5861064	 str         r1, [r6, #0x64]
  00178	ea000000	 b           |$LN7@OALPerRegR|
  0017c		 |$LN40@OALPerRegR|
  0017c	e5961064	 ldr         r1, [r6, #0x64]
  00180		 |$LN7@OALPerRegR|

; 307  :         
; 308  :     }
; 309  : 
; 310  :     if (g_perRegState.size >= dataSize) {

  00180	e1510009	 cmp         r1, r9
  00184	3a000008	 bcc         |$LN39@OALPerRegR|

; 311  :         CopyFromBuffer(pData, dataSize);

  00188	e1a01009	 mov         r1, r9
  0018c	e1a0000b	 mov         r0, r11
  00190	eb000000	 bl          CopyFromBuffer

; 312  :         g_perRegState.size -= dataSize;

  00194	e5963064	 ldr         r3, [r6, #0x64]

; 313  :         rc = dataSize;

  00198	e1a05009	 mov         r5, r9

; 314  :     }
; 315  : 
; 316  :     RETAILMSG(rc == 0, (
; 317  :         L"INFO: OALPerRegRead: Registry read done (%d)\r\n", g_perRegState.size
; 318  :     ));

  0019c	e3590000	 cmp         r9, #0
  001a0	e0431009	 sub         r1, r3, r9
  001a4	e5861064	 str         r1, [r6, #0x64]
  001a8	1a000001	 bne         |$cleanUp$39632|
  001ac		 |$LN39@OALPerRegR|
  001ac	e59f002c	 ldr         r0, [pc, #0x2C]
  001b0	eb000000	 bl          NKDbgPrintfW
  001b4		 |$cleanUp$39632|
  001b4	e5943440	 ldr         r3, [r4, #0x440]

; 319  : 
; 320  : cleanUp:
; 321  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"-OALPerRegRead(rc = %d)", rc));

  001b8	e3130a02	 tst         r3, #2, 20
  001bc	13130004	 tstne       r3, #4
  001c0	159f0014	 ldrne       r0, [pc, #0x14]
  001c4	11a01005	 movne       r1, r5
  001c8	1b000000	 blne        NKDbgPrintfW

; 322  :     return rc;
; 323  : }

  001cc	e1a00005	 mov         r0, r5
  001d0	e28dd08c	 add         sp, sp, #0x8C
  001d4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001d8	e12fff1e	 bx          lr
  001dc		 |$LN46@OALPerRegR|
  001dc		 |$LN47@OALPerRegR|
  001dc	00000000	 DCD         |??_C@_1DA@PEPHMLMF@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@|
  001e0		 |$LN48@OALPerRegR|
  001e0	00000000	 DCD         |??_C@_1FO@ECAFLHLG@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAr?$AAe@|
  001e4		 |$LN49@OALPerRegR|
  001e4	00000000	 DCD         |??_C@_1FM@OHNCKHEN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAr?$AAo?$AAm?$AAO?$AAE?$AAM?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl@|
  001e8		 |$LN50@OALPerRegR|
  001e8	00000000	 DCD         |??_C@_1FG@NIPNJMPD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAr?$AAo?$AAm?$AAO?$AAE?$AAM?$AA?3?$AA?5?$AAB?$AAa?$AAd?$AA?5?$AAs@|
  001ec		 |$LN51@OALPerRegR|
  001ec	50524547	 DCD         0x50524547
  001f0		 |$LN52@OALPerRegR|
  001f0	00000000	 DCD         |??_C@_1FG@JPBKLLNK@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAr?$AAe@|
  001f4		 |$LN53@OALPerRegR|
  001f4	00000000	 DCD         |??_C@_1GO@GLNGEKIG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAf@|
  001f8		 |$LN54@OALPerRegR|
  001f8	00000000	 DCD         |g_perRegState|
  001fc		 |$LN55@OALPerRegR|
  001fc	00000000	 DCD         |??_C@_1FC@KDAHPIMP@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@|
  00200		 |$LN56@OALPerRegR|
  00200	00000000	 DCD         |dpCurSettings|
  00204		 |$M40090|

			 ENDP  ; |OALPerRegRead|

	EXPORT	|OALPerRegInit|
	EXPORT	|??_C@_1DE@CBPAPNL@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@NLHAJMBG@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|g_pOemGlobal|

  00000			 AREA	 |.pdata|, PDATA
|$T40128| DCD	|$LN21@OALPerRegI|
	DCD	0x40004401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@CBPAPNL@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@NLHAJMBG@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPerRegInit| PROC

; 109  : {

  00000		 |$LN21@OALPerRegI|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M40125|
  00004	e1a04001	 mov         r4, r1
  00008	e1a08000	 mov         r8, r0

; 110  :     UINT32 rc = FALSE;
; 111  :     OAL_PERREG_REGION *pRegion;
; 112  :     UINT32 i = 0;
; 113  :     UINT32 offset; //, blockStart, blockSize;
; 114  : 
; 115  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"+OALPerRegInit(0x%08x)\r\n", aRegions));

  0000c	e59f50f8	 ldr         r5, [pc, #0xF8]
  00010	e3a06000	 mov         r6, #0
  00014	e5952440	 ldr         r2, [r5, #0x440]
  00018	e3120a02	 tst         r2, #2, 20
  0001c	0a000004	 beq         |$LN8@OALPerRegI|
  00020	e3120004	 tst         r2, #4
  00024	0a000002	 beq         |$LN8@OALPerRegI|
  00028	e59f00d8	 ldr         r0, [pc, #0xD8]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e5952440	 ldr         r2, [r5, #0x440]
  00034		 |$LN8@OALPerRegI|

; 116  :     
; 117  :     // Copy regions info to state variable
; 118  :     g_perRegState.regions = 0;

  00034	e59fe0c8	 ldr         lr, [pc, #0xC8]
  00038	e3a03000	 mov         r3, #0
  0003c	e58e3000	 str         r3, [lr]

; 119  :     pRegion = &g_perRegState.region[0];
; 120  :     while (aRegions[i].base != 0) {

  00040	e5943000	 ldr         r3, [r4]
  00044	e28e7004	 add         r7, lr, #4
  00048	e3530000	 cmp         r3, #0
  0004c	0a00001f	 beq         |$LN10@OALPerRegI|
  00050	e1a01004	 mov         r1, r4
  00054		 |$LL5@OALPerRegI|

; 121  : 
; 122  : #if 0
; 123  :         // Verify, that there is flash memory
; 124  :         if (!OALFlashBlockInfo(
; 125  :             aRegions[i].pBase, aRegions[i].pStart, &blockStart, &blockSize
; 126  :         )) {
; 127  :             OALMSG(OAL_ERROR, (
; 128  :                 L"ERROR: There isn't flash memory at 0x%08x\r\n", 
; 129  :                 aRegions[i].pBase
; 130  :             ));
; 131  :             i++;
; 132  :             continue;
; 133  :         }
; 134  : 
; 135  :         // Get region offset in block
; 136  :         offset = OALVAtoPA(aRegions[i].pStart) - blockStart;
; 137  :         if (offset >= pRegion->size) {
; 138  :             OALMSG(OAL_WARN, (
; 139  :                 L"WARN: Region %08x - %08x - %08x too small, ignored\r\n",
; 140  :                 aRegions[i].pBase, aRegions[i].pStart, aRegions[i].size
; 141  :             ));
; 142  :             i++;
; 143  :             continue;
; 144  :         }            
; 145  : #else
; 146  :         offset = 0;
; 147  : #endif
; 148  : 
; 149  :         // Save region to state variable
; 150  :         pRegion->base  = aRegions[i].base;

  00054	e5913000	 ldr         r3, [r1]
  00058	e5873000	 str         r3, [r7]

; 151  :         pRegion->start = aRegions[i].start + offset;

  0005c	e5913004	 ldr         r3, [r1, #4]
  00060	e5873004	 str         r3, [r7, #4]

; 152  :         pRegion->size  = aRegions[i].size - offset;

  00064	e5913008	 ldr         r3, [r1, #8]
  00068	e5873008	 str         r3, [r7, #8]

; 153  :         pRegion++;
; 154  :         if (++g_perRegState.regions >= OAL_PERREG_MAX_REGIONS) break;

  0006c	e59e3000	 ldr         r3, [lr]
  00070	e287700c	 add         r7, r7, #0xC
  00074	e2830001	 add         r0, r3, #1
  00078	e58e0000	 str         r0, [lr]
  0007c	e3500008	 cmp         r0, #8
  00080	2a000005	 bcs         |$LN15@OALPerRegI|

; 155  :         
; 156  :         i++;

  00084	e2866001	 add         r6, r6, #1
  00088	e0863086	 add         r3, r6, r6, lsl #1
  0008c	e1a01004	 mov         r1, r4
  00090	e7b13103	 ldr         r3, [r1, +r3, lsl #2]!
  00094	e3530000	 cmp         r3, #0
  00098	1affffed	 bne         |$LL5@OALPerRegI|
  0009c		 |$LN15@OALPerRegI|

; 157  :     }
; 158  : 
; 159  :     // We was succesfull when at least one region was verified
; 160  :     if (rc = (g_perRegState.regions > 0)) {

  0009c	e3500000	 cmp         r0, #0
  000a0	0a00000a	 beq         |$LN10@OALPerRegI|

; 161  :         g_pOemGlobal->pfnWriteRegistry = (PFN_WriteRegistry) OALPerRegWrite;

  000a4	e59f1054	 ldr         r1, [pc, #0x54]
  000a8	e59f204c	 ldr         r2, [pc, #0x4C]

; 162  :         if (!clean) g_pOemGlobal->pfnReadRegistry = (PFN_ReadRegistry) OALPerRegRead;

  000ac	e3580000	 cmp         r8, #0
  000b0	e5913000	 ldr         r3, [r1]
  000b4	e3a04001	 mov         r4, #1
  000b8	e5832090	 str         r2, [r3, #0x90]
  000bc	059f2034	 ldreq       r2, [pc, #0x34]
  000c0	05913000	 ldreq       r3, [r1]
  000c4	0583208c	 streq       r2, [r3, #0x8C]
  000c8	e5952440	 ldr         r2, [r5, #0x440]
  000cc	ea000000	 b           |$LN1@OALPerRegI|
  000d0		 |$LN10@OALPerRegI|

; 157  :     }
; 158  : 
; 159  :     // We was succesfull when at least one region was verified
; 160  :     if (rc = (g_perRegState.regions > 0)) {

  000d0	e3a04000	 mov         r4, #0
  000d4		 |$LN1@OALPerRegI|

; 163  :     }        
; 164  :     
; 165  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"-OALPerRegInit(rc = %d)\r\n", rc));

  000d4	e3120a02	 tst         r2, #2, 20
  000d8	13120004	 tstne       r2, #4
  000dc	159f0010	 ldrne       r0, [pc, #0x10]
  000e0	11a01004	 movne       r1, r4
  000e4	1b000000	 blne        NKDbgPrintfW

; 166  :     return rc;        
; 167  : }

  000e8	e1a00004	 mov         r0, r4
  000ec	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000f0	e12fff1e	 bx          lr
  000f4		 |$LN22@OALPerRegI|
  000f4		 |$LN23@OALPerRegI|
  000f4	00000000	 DCD         |??_C@_1DE@CBPAPNL@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000f8		 |$LN24@OALPerRegI|
  000f8	00000000	 DCD         |OALPerRegRead|
  000fc		 |$LN25@OALPerRegI|
  000fc	00000000	 DCD         |OALPerRegWrite|
  00100		 |$LN26@OALPerRegI|
  00100	00000000	 DCD         |g_pOemGlobal|
  00104		 |$LN27@OALPerRegI|
  00104	00000000	 DCD         |g_perRegState|
  00108		 |$LN28@OALPerRegI|
  00108	00000000	 DCD         |??_C@_1DC@NLHAJMBG@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0010c		 |$LN29@OALPerRegI|
  0010c	00000000	 DCD         |dpCurSettings|
  00110		 |$M40126|

			 ENDP  ; |OALPerRegInit|

	END
