; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\PERREG\perreg.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|?fWriteFailure@?1??WriteBufferToFlash@@9@9| % 0x4	; `WriteBufferToFlash'::`2'::fWriteFailure
	EXPORT	|??_C@_1DE@CBPAPNL@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALPerRegRead|
	EXPORT	|OALPerRegWrite|
	EXPORT	|??_C@_1DC@NLHAJMBG@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALPerRegInit|
	IMPORT	|g_pOemGlobal|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00004			 AREA	 |.bss|, NOINIT
|g_perRegState| % 0x478

  00000			 AREA	 |.pdata|, PDATA
|$T39765| DCD	|$LN16@OALPerRegI|
	DCD	0x40009104
; File c:\wince600\platform\common\src\common\perreg\perreg.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@CBPAPNL@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@NLHAJMBG@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPerRegInit| PROC

; 109  : {

  00000		 |$LN16@OALPerRegI|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd020	 sub         sp, sp, #0x20
  00010		 |$M39762|

; 110  :     UINT32 rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 111  :     OAL_PERREG_REGION *pRegion;
; 112  :     UINT32 i = 0;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3004	 str         r3, [sp, #4]

; 113  :     UINT32 offset; //, blockStart, blockSize;
; 114  : 
; 115  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"+OALPerRegInit(0x%08x)\r\n", aRegions));

  00020	e59f3204	 ldr         r3, [pc, #0x204]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130a02	 tst         r3, #2, 20
  0002c	0a000009	 beq         |$LN8@OALPerRegI|
  00030	e59f31f4	 ldr         r3, [pc, #0x1F4]
  00034	e5933440	 ldr         r3, [r3, #0x440]
  00038	e3130004	 tst         r3, #4
  0003c	0a000005	 beq         |$LN8@OALPerRegI|
  00040	e59d102c	 ldr         r1, [sp, #0x2C]
  00044	e59f01f4	 ldr         r0, [pc, #0x1F4]
  00048	eb000000	 bl          NKDbgPrintfW
  0004c	e3a03001	 mov         r3, #1
  00050	e58d3014	 str         r3, [sp, #0x14]
  00054	ea000001	 b           |$LN9@OALPerRegI|
  00058		 |$LN8@OALPerRegI|
  00058	e3a03000	 mov         r3, #0
  0005c	e58d3014	 str         r3, [sp, #0x14]
  00060		 |$LN9@OALPerRegI|

; 116  :     
; 117  :     // Copy regions info to state variable
; 118  :     g_perRegState.regions = 0;

  00060	e59f21d4	 ldr         r2, [pc, #0x1D4]
  00064	e3a03000	 mov         r3, #0
  00068	e5823000	 str         r3, [r2]

; 119  :     pRegion = &g_perRegState.region[0];

  0006c	e59f31c8	 ldr         r3, [pc, #0x1C8]
  00070	e2833004	 add         r3, r3, #4
  00074	e58d3008	 str         r3, [sp, #8]
  00078		 |$LN5@OALPerRegI|

; 120  :     while (aRegions[i].base != 0) {

  00078	e59d1004	 ldr         r1, [sp, #4]
  0007c	e3a0300c	 mov         r3, #0xC
  00080	e0020391	 mul         r2, r1, r3
  00084	e59d302c	 ldr         r3, [sp, #0x2C]
  00088	e0833002	 add         r3, r3, r2
  0008c	e5933000	 ldr         r3, [r3]
  00090	e3530000	 cmp         r3, #0
  00094	0a000032	 beq         |$LN4@OALPerRegI|

; 121  : 
; 122  : #if 0
; 123  :         // Verify, that there is flash memory
; 124  :         if (!OALFlashBlockInfo(
; 125  :             aRegions[i].pBase, aRegions[i].pStart, &blockStart, &blockSize
; 126  :         )) {
; 127  :             OALMSG(OAL_ERROR, (
; 128  :                 L"ERROR: There isn't flash memory at 0x%08x\r\n", 
; 129  :                 aRegions[i].pBase
; 130  :             ));
; 131  :             i++;
; 132  :             continue;
; 133  :         }
; 134  : 
; 135  :         // Get region offset in block
; 136  :         offset = OALVAtoPA(aRegions[i].pStart) - blockStart;
; 137  :         if (offset >= pRegion->size) {
; 138  :             OALMSG(OAL_WARN, (
; 139  :                 L"WARN: Region %08x - %08x - %08x too small, ignored\r\n",
; 140  :                 aRegions[i].pBase, aRegions[i].pStart, aRegions[i].size
; 141  :             ));
; 142  :             i++;
; 143  :             continue;
; 144  :         }            
; 145  : #else
; 146  :         offset = 0;

  00098	e3a03000	 mov         r3, #0
  0009c	e58d300c	 str         r3, [sp, #0xC]

; 147  : #endif
; 148  : 
; 149  :         // Save region to state variable
; 150  :         pRegion->base  = aRegions[i].base;

  000a0	e59d1004	 ldr         r1, [sp, #4]
  000a4	e3a0300c	 mov         r3, #0xC
  000a8	e0020391	 mul         r2, r1, r3
  000ac	e59d302c	 ldr         r3, [sp, #0x2C]
  000b0	e0833002	 add         r3, r3, r2
  000b4	e5932000	 ldr         r2, [r3]
  000b8	e59d3008	 ldr         r3, [sp, #8]
  000bc	e5832000	 str         r2, [r3]

; 151  :         pRegion->start = aRegions[i].start + offset;

  000c0	e59d1004	 ldr         r1, [sp, #4]
  000c4	e3a0300c	 mov         r3, #0xC
  000c8	e0020391	 mul         r2, r1, r3
  000cc	e59d302c	 ldr         r3, [sp, #0x2C]
  000d0	e0833002	 add         r3, r3, r2
  000d4	e2833004	 add         r3, r3, #4
  000d8	e5932000	 ldr         r2, [r3]
  000dc	e59d300c	 ldr         r3, [sp, #0xC]
  000e0	e0822003	 add         r2, r2, r3
  000e4	e59d3008	 ldr         r3, [sp, #8]
  000e8	e2833004	 add         r3, r3, #4
  000ec	e5832000	 str         r2, [r3]

; 152  :         pRegion->size  = aRegions[i].size - offset;

  000f0	e59d1004	 ldr         r1, [sp, #4]
  000f4	e3a0300c	 mov         r3, #0xC
  000f8	e0020391	 mul         r2, r1, r3
  000fc	e59d302c	 ldr         r3, [sp, #0x2C]
  00100	e0833002	 add         r3, r3, r2
  00104	e2833008	 add         r3, r3, #8
  00108	e5932000	 ldr         r2, [r3]
  0010c	e59d300c	 ldr         r3, [sp, #0xC]
  00110	e0422003	 sub         r2, r2, r3
  00114	e59d3008	 ldr         r3, [sp, #8]
  00118	e2833008	 add         r3, r3, #8
  0011c	e5832000	 str         r2, [r3]

; 153  :         pRegion++;

  00120	e59d3008	 ldr         r3, [sp, #8]
  00124	e283300c	 add         r3, r3, #0xC
  00128	e58d3008	 str         r3, [sp, #8]

; 154  :         if (++g_perRegState.regions >= OAL_PERREG_MAX_REGIONS) break;

  0012c	e59f3108	 ldr         r3, [pc, #0x108]
  00130	e5933000	 ldr         r3, [r3]
  00134	e2832001	 add         r2, r3, #1
  00138	e59f30fc	 ldr         r3, [pc, #0xFC]
  0013c	e5832000	 str         r2, [r3]
  00140	e59f30f4	 ldr         r3, [pc, #0xF4]
  00144	e5933000	 ldr         r3, [r3]
  00148	e3530008	 cmp         r3, #8
  0014c	3a000000	 bcc         |$LN3@OALPerRegI|
  00150	ea000003	 b           |$LN4@OALPerRegI|
  00154		 |$LN3@OALPerRegI|

; 155  :         
; 156  :         i++;

  00154	e59d3004	 ldr         r3, [sp, #4]
  00158	e2833001	 add         r3, r3, #1
  0015c	e58d3004	 str         r3, [sp, #4]

; 157  :     }

  00160	eaffffc4	 b           |$LN5@OALPerRegI|
  00164		 |$LN4@OALPerRegI|

; 158  : 
; 159  :     // We was succesfull when at least one region was verified
; 160  :     if (rc = (g_perRegState.regions > 0)) {

  00164	e59f30d0	 ldr         r3, [pc, #0xD0]
  00168	e5933000	 ldr         r3, [r3]
  0016c	e3530000	 cmp         r3, #0
  00170	9a000002	 bls         |$LN10@OALPerRegI|
  00174	e3a03001	 mov         r3, #1
  00178	e58d3018	 str         r3, [sp, #0x18]
  0017c	ea000001	 b           |$LN11@OALPerRegI|
  00180		 |$LN10@OALPerRegI|
  00180	e3a03000	 mov         r3, #0
  00184	e58d3018	 str         r3, [sp, #0x18]
  00188		 |$LN11@OALPerRegI|
  00188	e59d3018	 ldr         r3, [sp, #0x18]
  0018c	e58d3000	 str         r3, [sp]
  00190	e59d3000	 ldr         r3, [sp]
  00194	e3530000	 cmp         r3, #0
  00198	0a00000c	 beq         |$LN2@OALPerRegI|

; 161  :         g_pOemGlobal->pfnWriteRegistry = (PFN_WriteRegistry) OALPerRegWrite;

  0019c	e59f3090	 ldr         r3, [pc, #0x90]
  001a0	e5933000	 ldr         r3, [r3]
  001a4	e2832090	 add         r2, r3, #0x90
  001a8	e59f3088	 ldr         r3, [pc, #0x88]
  001ac	e5823000	 str         r3, [r2]

; 162  :         if (!clean) g_pOemGlobal->pfnReadRegistry = (PFN_ReadRegistry) OALPerRegRead;

  001b0	e59d3028	 ldr         r3, [sp, #0x28]
  001b4	e3530000	 cmp         r3, #0
  001b8	1a000004	 bne         |$LN1@OALPerRegI|
  001bc	e59f3070	 ldr         r3, [pc, #0x70]
  001c0	e5933000	 ldr         r3, [r3]
  001c4	e283208c	 add         r2, r3, #0x8C
  001c8	e59f3060	 ldr         r3, [pc, #0x60]
  001cc	e5823000	 str         r3, [r2]
  001d0		 |$LN1@OALPerRegI|
  001d0		 |$LN2@OALPerRegI|

; 163  :     }        
; 164  :     
; 165  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"-OALPerRegInit(rc = %d)\r\n", rc));

  001d0	e59f3054	 ldr         r3, [pc, #0x54]
  001d4	e5933440	 ldr         r3, [r3, #0x440]
  001d8	e3130a02	 tst         r3, #2, 20
  001dc	0a000009	 beq         |$LN12@OALPerRegI|
  001e0	e59f3044	 ldr         r3, [pc, #0x44]
  001e4	e5933440	 ldr         r3, [r3, #0x440]
  001e8	e3130004	 tst         r3, #4
  001ec	0a000005	 beq         |$LN12@OALPerRegI|
  001f0	e59d1000	 ldr         r1, [sp]
  001f4	e59f002c	 ldr         r0, [pc, #0x2C]
  001f8	eb000000	 bl          NKDbgPrintfW
  001fc	e3a03001	 mov         r3, #1
  00200	e58d301c	 str         r3, [sp, #0x1C]
  00204	ea000001	 b           |$LN13@OALPerRegI|
  00208		 |$LN12@OALPerRegI|
  00208	e3a03000	 mov         r3, #0
  0020c	e58d301c	 str         r3, [sp, #0x1C]
  00210		 |$LN13@OALPerRegI|

; 166  :     return rc;        

  00210	e59d3000	 ldr         r3, [sp]
  00214	e58d3010	 str         r3, [sp, #0x10]

; 167  : }

  00218	e59d0010	 ldr         r0, [sp, #0x10]
  0021c	e28dd020	 add         sp, sp, #0x20
  00220	e89d6000	 ldmia       sp, {sp, lr}
  00224	e12fff1e	 bx          lr
  00228		 |$LN17@OALPerRegI|
  00228		 |$LN18@OALPerRegI|
  00228	00000000	 DCD         |??_C@_1DE@CBPAPNL@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0022c		 |$LN19@OALPerRegI|
  0022c	00000000	 DCD         |dpCurSettings|
  00230		 |$LN20@OALPerRegI|
  00230	00000000	 DCD         |OALPerRegRead|
  00234		 |$LN21@OALPerRegI|
  00234	00000000	 DCD         |g_pOemGlobal|
  00238		 |$LN22@OALPerRegI|
  00238	00000000	 DCD         |OALPerRegWrite|
  0023c		 |$LN23@OALPerRegI|
  0023c	00000000	 DCD         |g_perRegState|
  00240		 |$LN24@OALPerRegI|
  00240	00000000	 DCD         |??_C@_1DC@NLHAJMBG@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00244		 |$M39763|

			 ENDP  ; |OALPerRegInit|

	EXPORT	|??_C@_1DC@BADJHCAB@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@DHJPBGOH@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAw@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@NLAEBACL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAp?$AAy?$AAT?$AAo?$AAB?$AAu?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@KBPOHJAI@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAw@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@FGACHPAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@HKAJAPA@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5@| [ DATA ] ; `string'
	IMPORT	|memset|

  00008			 AREA	 |.pdata|, PDATA
|$T39787| DCD	|$LN19@OALPerRegW|
	DCD	0x40009304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@BADJHCAB@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@DHJPBGOH@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAw@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "d", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@NLAEBACL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAp?$AAy?$AAT?$AAo?$AAB?$AAu?$AAf@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "o"
	DCB	0x0, "p", 0x0, "y", 0x0, "T", 0x0, "o", 0x0, "B", 0x0, "u"
	DCB	0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@KBPOHJAI@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAw@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@FGACHPAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "N", 0x0, "o"
	DCB	0x0, " ", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "f", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "f"
	DCB	0x0, "i", 0x0, "n", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@HKAJAPA@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00244			 AREA	 |.text|, CODE, ARM

  00244		 |OALPerRegWrite| PROC

; 176  : {

  00244		 |$LN19@OALPerRegW|
  00244	e1a0c00d	 mov         r12, sp
  00248	e92d0007	 stmdb       sp!, {r0 - r2}
  0024c	e92d5000	 stmdb       sp!, {r12, lr}
  00250	e24dd02c	 sub         sp, sp, #0x2C
  00254		 |$M39784|

; 177  :     BOOL rc = FALSE;

  00254	e3a03000	 mov         r3, #0
  00258	e58d3000	 str         r3, [sp]

; 178  :     OAL_PERREG_HEADER header;
; 179  : 
; 180  : 
; 181  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 182  :         L"+OALPerRegWrite(0x%08x, 0x%08x, 0x%08x)\r\n", flags, pData, size
; 183  :     ));

  0025c	e59f320c	 ldr         r3, [pc, #0x20C]
  00260	e5933440	 ldr         r3, [r3, #0x440]
  00264	e3130a02	 tst         r3, #2, 20
  00268	0a00000b	 beq         |$LN9@OALPerRegW|
  0026c	e59f31fc	 ldr         r3, [pc, #0x1FC]
  00270	e5933440	 ldr         r3, [r3, #0x440]
  00274	e3130004	 tst         r3, #4
  00278	0a000007	 beq         |$LN9@OALPerRegW|
  0027c	e59d303c	 ldr         r3, [sp, #0x3C]
  00280	e59d2038	 ldr         r2, [sp, #0x38]
  00284	e59d1034	 ldr         r1, [sp, #0x34]
  00288	e59f01fc	 ldr         r0, [pc, #0x1FC]
  0028c	eb000000	 bl          NKDbgPrintfW
  00290	e3a03001	 mov         r3, #1
  00294	e58d3014	 str         r3, [sp, #0x14]
  00298	ea000001	 b           |$LN10@OALPerRegW|
  0029c		 |$LN9@OALPerRegW|
  0029c	e3a03000	 mov         r3, #0
  002a0	e58d3014	 str         r3, [sp, #0x14]
  002a4		 |$LN10@OALPerRegW|

; 184  :     
; 185  :     // Check if it is write start
; 186  :     if ((flags & REG_WRITE_BYTES_START) != 0) {

  002a4	e59d3034	 ldr         r3, [sp, #0x34]
  002a8	e3130001	 tst         r3, #1
  002ac	0a000026	 beq         |$LN6@OALPerRegW|

; 187  : 
; 188  :         // First check if there are regions defined
; 189  :         if (g_perRegState.regions <= 0) {

  002b0	e59f31c0	 ldr         r3, [pc, #0x1C0]
  002b4	e5933000	 ldr         r3, [r3]
  002b8	e3530000	 cmp         r3, #0
  002bc	8a00000b	 bhi         |$LN5@OALPerRegW|

; 190  :             OALMSG(OAL_ERROR, (
; 191  :                 L"ERROR: OALPerRegWrite: No valid flash regions defined\r\n"
; 192  :             ));

  002c0	e59f31a8	 ldr         r3, [pc, #0x1A8]
  002c4	e5933440	 ldr         r3, [r3, #0x440]
  002c8	e3130001	 tst         r3, #1
  002cc	0a000004	 beq         |$LN11@OALPerRegW|
  002d0	e59f01b0	 ldr         r0, [pc, #0x1B0]
  002d4	eb000000	 bl          NKDbgPrintfW
  002d8	e3a03001	 mov         r3, #1
  002dc	e58d3018	 str         r3, [sp, #0x18]
  002e0	ea000001	 b           |$LN12@OALPerRegW|
  002e4		 |$LN11@OALPerRegW|
  002e4	e3a03000	 mov         r3, #0
  002e8	e58d3018	 str         r3, [sp, #0x18]
  002ec		 |$LN12@OALPerRegW|

; 193  :             goto cleanUp;

  002ec	ea000048	 b           |$cleanUp$39577|
  002f0		 |$LN5@OALPerRegW|

; 194  :         }
; 195  : 
; 196  :         RETAILMSG(TRUE, (L"INFO: OALPerRegWrite: Registry write start\r\n"));

  002f0	e59f018c	 ldr         r0, [pc, #0x18C]
  002f4	eb000000	 bl          NKDbgPrintfW

; 197  : 
; 198  :         // Erase flash memory
; 199  :         if (!EraseFlash()) goto cleanUp;

  002f8	eb000000	 bl          EraseFlash
  002fc	e58d001c	 str         r0, [sp, #0x1C]
  00300	e59d301c	 ldr         r3, [sp, #0x1C]
  00304	e3530000	 cmp         r3, #0
  00308	1a000000	 bne         |$LN4@OALPerRegW|
  0030c	ea000040	 b           |$cleanUp$39577|
  00310		 |$LN4@OALPerRegW|

; 200  :         
; 201  :         // Initialize local state variables
; 202  :         g_perRegState.size = 0;

  00310	e59f2160	 ldr         r2, [pc, #0x160]
  00314	e3a03000	 mov         r3, #0
  00318	e5823064	 str         r3, [r2, #0x64]

; 203  :         g_perRegState.checkSum = 0;

  0031c	e59f2154	 ldr         r2, [pc, #0x154]
  00320	e3a03000	 mov         r3, #0
  00324	e5823068	 str         r3, [r2, #0x68]

; 204  :         memset(&header, 0xFF, sizeof(header));

  00328	e3a0200c	 mov         r2, #0xC
  0032c	e3a010ff	 mov         r1, #0xFF
  00330	e28d0004	 add         r0, sp, #4
  00334	eb000000	 bl          memset

; 205  : 
; 206  :         // Reset buffer & write temporary header
; 207  :         ResetBuffer(TRUE);

  00338	e3a00001	 mov         r0, #1
  0033c	eb000000	 bl          ResetBuffer

; 208  :         CopyToBuffer(&header, sizeof(header));

  00340	e3a0100c	 mov         r1, #0xC
  00344	e28d0004	 add         r0, sp, #4
  00348	eb000000	 bl          CopyToBuffer
  0034c		 |$LN6@OALPerRegW|

; 209  :        
; 210  :     }
; 211  : 
; 212  :     // While there are some data && place where to write
; 213  :     if (size > 0) {

  0034c	e59d303c	 ldr         r3, [sp, #0x3C]
  00350	e3530000	 cmp         r3, #0
  00354	9a000019	 bls         |$LN3@OALPerRegW|

; 214  : 
; 215  :         if (!CopyToBuffer(pData, size)) {

  00358	e59d103c	 ldr         r1, [sp, #0x3C]
  0035c	e59d0038	 ldr         r0, [sp, #0x38]
  00360	eb000000	 bl          CopyToBuffer
  00364	e58d0020	 str         r0, [sp, #0x20]
  00368	e59d3020	 ldr         r3, [sp, #0x20]
  0036c	e3530000	 cmp         r3, #0
  00370	1a00000b	 bne         |$LN2@OALPerRegW|

; 216  :             OALMSG(OAL_ERROR, (
; 217  :                 L"ERROR: OALPerRegWrite: CopyToBuffer failed\r\n"
; 218  :             ));

  00374	e59f30f4	 ldr         r3, [pc, #0xF4]
  00378	e5933440	 ldr         r3, [r3, #0x440]
  0037c	e3130001	 tst         r3, #1
  00380	0a000004	 beq         |$LN13@OALPerRegW|
  00384	e59f00f4	 ldr         r0, [pc, #0xF4]
  00388	eb000000	 bl          NKDbgPrintfW
  0038c	e3a03001	 mov         r3, #1
  00390	e58d3024	 str         r3, [sp, #0x24]
  00394	ea000001	 b           |$LN14@OALPerRegW|
  00398		 |$LN13@OALPerRegW|
  00398	e3a03000	 mov         r3, #0
  0039c	e58d3024	 str         r3, [sp, #0x24]
  003a0		 |$LN14@OALPerRegW|

; 219  :             goto cleanUp;

  003a0	ea00001b	 b           |$cleanUp$39577|
  003a4		 |$LN2@OALPerRegW|

; 220  :         }
; 221  :         g_perRegState.size += size;

  003a4	e59f30cc	 ldr         r3, [pc, #0xCC]
  003a8	e5932064	 ldr         r2, [r3, #0x64]
  003ac	e59d303c	 ldr         r3, [sp, #0x3C]
  003b0	e0822003	 add         r2, r2, r3
  003b4	e59f30bc	 ldr         r3, [pc, #0xBC]
  003b8	e5832064	 str         r2, [r3, #0x64]

; 222  :         
; 223  :     } else {

  003bc	ea000012	 b           |$LN1@OALPerRegW|
  003c0		 |$LN3@OALPerRegW|

; 224  : 
; 225  :         // Flush buffer
; 226  :         FlushBuffer(TRUE);

  003c0	e3a00001	 mov         r0, #1
  003c4	eb000000	 bl          FlushBuffer

; 227  : 
; 228  :         // Prepare and write header
; 229  :         header.signature = OAL_PERREG_SIGN;

  003c8	e59f30ac	 ldr         r3, [pc, #0xAC]
  003cc	e58d3004	 str         r3, [sp, #4]

; 230  :         header.size = g_perRegState.size;

  003d0	e59f30a0	 ldr         r3, [pc, #0xA0]
  003d4	e5933064	 ldr         r3, [r3, #0x64]
  003d8	e58d3008	 str         r3, [sp, #8]

; 231  :         header.checkSum = g_perRegState.checkSum;

  003dc	e59f3094	 ldr         r3, [pc, #0x94]
  003e0	e5933068	 ldr         r3, [r3, #0x68]
  003e4	e58d300c	 str         r3, [sp, #0xC]

; 232  :         ResetBuffer(TRUE);

  003e8	e3a00001	 mov         r0, #1
  003ec	eb000000	 bl          ResetBuffer

; 233  :         CopyToBuffer(&header, sizeof(header));

  003f0	e3a0100c	 mov         r1, #0xC
  003f4	e28d0004	 add         r0, sp, #4
  003f8	eb000000	 bl          CopyToBuffer

; 234  :         FlushBuffer(FALSE);

  003fc	e3a00000	 mov         r0, #0
  00400	eb000000	 bl          FlushBuffer

; 235  : 
; 236  :         RETAILMSG(TRUE, (L"INFO: OALPerRegWrite: Registry write done\r\n"));

  00404	e59f0068	 ldr         r0, [pc, #0x68]
  00408	eb000000	 bl          NKDbgPrintfW
  0040c		 |$LN1@OALPerRegW|

; 237  :     }
; 238  :     
; 239  :     rc = TRUE;

  0040c	e3a03001	 mov         r3, #1
  00410	e58d3000	 str         r3, [sp]
  00414		 |$cleanUp$39577|

; 240  :     
; 241  : cleanUp:
; 242  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"-OALPerRegWrite(rc = %d)", rc));

  00414	e59f3054	 ldr         r3, [pc, #0x54]
  00418	e5933440	 ldr         r3, [r3, #0x440]
  0041c	e3130a02	 tst         r3, #2, 20
  00420	0a000009	 beq         |$LN15@OALPerRegW|
  00424	e59f3044	 ldr         r3, [pc, #0x44]
  00428	e5933440	 ldr         r3, [r3, #0x440]
  0042c	e3130004	 tst         r3, #4
  00430	0a000005	 beq         |$LN15@OALPerRegW|
  00434	e59d1000	 ldr         r1, [sp]
  00438	e59f002c	 ldr         r0, [pc, #0x2C]
  0043c	eb000000	 bl          NKDbgPrintfW
  00440	e3a03001	 mov         r3, #1
  00444	e58d3028	 str         r3, [sp, #0x28]
  00448	ea000001	 b           |$LN16@OALPerRegW|
  0044c		 |$LN15@OALPerRegW|
  0044c	e3a03000	 mov         r3, #0
  00450	e58d3028	 str         r3, [sp, #0x28]
  00454		 |$LN16@OALPerRegW|

; 243  :     return rc;

  00454	e59d3000	 ldr         r3, [sp]
  00458	e58d3010	 str         r3, [sp, #0x10]

; 244  : }

  0045c	e59d0010	 ldr         r0, [sp, #0x10]
  00460	e28dd02c	 add         sp, sp, #0x2C
  00464	e89d6000	 ldmia       sp, {sp, lr}
  00468	e12fff1e	 bx          lr
  0046c		 |$LN20@OALPerRegW|
  0046c		 |$LN21@OALPerRegW|
  0046c	00000000	 DCD         |??_C@_1DC@BADJHCAB@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@|
  00470		 |$LN22@OALPerRegW|
  00470	00000000	 DCD         |dpCurSettings|
  00474		 |$LN23@OALPerRegW|
  00474	00000000	 DCD         |??_C@_1FI@DHJPBGOH@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAw@|
  00478		 |$LN24@OALPerRegW|
  00478	00000000	 DCD         |g_perRegState|
  0047c		 |$LN25@OALPerRegW|
  0047c	50524547	 DCD         0x50524547
  00480		 |$LN26@OALPerRegW|
  00480	00000000	 DCD         |??_C@_1FK@NLAEBACL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAp?$AAy?$AAT?$AAo?$AAB?$AAu?$AAf@|
  00484		 |$LN27@OALPerRegW|
  00484	00000000	 DCD         |??_C@_1FK@KBPOHJAI@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAw@|
  00488		 |$LN28@OALPerRegW|
  00488	00000000	 DCD         |??_C@_1HA@FGACHPAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@|
  0048c		 |$LN29@OALPerRegW|
  0048c	00000000	 DCD         |??_C@_1FE@HKAJAPA@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5@|
  00490		 |$M39785|

			 ENDP  ; |OALPerRegWrite|

	EXPORT	|??_C@_1DA@PEPHMLMF@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@ECAFLHLG@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@OHNCKHEN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAr?$AAo?$AAm?$AAO?$AAE?$AAM?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@NIPNJMPD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAr?$AAo?$AAm?$AAO?$AAE?$AAM?$AA?3?$AA?5?$AAB?$AAa?$AAd?$AA?5?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@JPBKLLNK@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@GLNGEKIG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@KDAHPIMP@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| [ DATA ] ; `string'

  00010			 AREA	 |.pdata|, PDATA
|$T39817| DCD	|$LN26@OALPerRegR|
	DCD	0x4000c204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@PEPHMLMF@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@ECAFLHLG@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAr?$AAe@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "d", 0x0, "o"
	DCB	0x0, "n", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@OHNCKHEN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAr?$AAo?$AAm?$AAO?$AAE?$AAM?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, "F"
	DCB	0x0, "r", 0x0, "o", 0x0, "m", 0x0, "O", 0x0, "E", 0x0, "M"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "c", 0x0, "h"
	DCB	0x0, "e", 0x0, "c", 0x0, "k", 0x0, "s", 0x0, "u", 0x0, "m"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@NIPNJMPD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAr?$AAo?$AAm?$AAO?$AAE?$AAM?$AA?3?$AA?5?$AAB?$AAa?$AAd?$AA?5?$AAs@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, "F"
	DCB	0x0, "r", 0x0, "o", 0x0, "m", 0x0, "O", 0x0, "E", 0x0, "M"
	DCB	0x0, ":", 0x0, " ", 0x0, "B", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "s", 0x0, "i", 0x0, "g", 0x0, "n", 0x0, "a", 0x0, "t"
	DCB	0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@JPBKLLNK@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAr?$AAe@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "r", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@GLNGEKIG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAf@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, ":", 0x0, " ", 0x0, "N", 0x0, "o", 0x0, " "
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "s", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i"
	DCB	0x0, "n", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@KDAHPIMP@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00490			 AREA	 |.text|, CODE, ARM

  00490		 |OALPerRegRead| PROC

; 253  : {

  00490		 |$LN26@OALPerRegR|
  00490	e1a0c00d	 mov         r12, sp
  00494	e92d0007	 stmdb       sp!, {r0 - r2}
  00498	e92d5000	 stmdb       sp!, {r12, lr}
  0049c	e24dd0c4	 sub         sp, sp, #0xC4
  004a0		 |$M39814|

; 254  :     UINT32 rc = 0;

  004a0	e3a03000	 mov         r3, #0
  004a4	e58d3004	 str         r3, [sp, #4]

; 255  :     OAL_PERREG_HEADER header;
; 256  :     UINT32 count, checkSum, chunk, buffer[32];
; 257  :     UINT8 *pBase = pData;

  004a8	e59d30d0	 ldr         r3, [sp, #0xD0]
  004ac	e58d3008	 str         r3, [sp, #8]

; 258  : 
; 259  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 260  :         L"+OALPerRegRead(0x%08x, 0x%08x, 0x%08x)\r\n", flags, pData, dataSize
; 261  :     ));

  004b0	e59f32bc	 ldr         r3, [pc, #0x2BC]
  004b4	e5933440	 ldr         r3, [r3, #0x440]
  004b8	e3130a02	 tst         r3, #2, 20
  004bc	0a00000b	 beq         |$LN10@OALPerRegR|
  004c0	e59f32ac	 ldr         r3, [pc, #0x2AC]
  004c4	e5933440	 ldr         r3, [r3, #0x440]
  004c8	e3130004	 tst         r3, #4
  004cc	0a000007	 beq         |$LN10@OALPerRegR|
  004d0	e59d30d4	 ldr         r3, [sp, #0xD4]
  004d4	e59d20d0	 ldr         r2, [sp, #0xD0]
  004d8	e59d10cc	 ldr         r1, [sp, #0xCC]
  004dc	e59f02b0	 ldr         r0, [pc, #0x2B0]
  004e0	eb000000	 bl          NKDbgPrintfW
  004e4	e3a03001	 mov         r3, #1
  004e8	e58d30a4	 str         r3, [sp, #0xA4]
  004ec	ea000001	 b           |$LN11@OALPerRegR|
  004f0		 |$LN10@OALPerRegR|
  004f0	e3a03000	 mov         r3, #0
  004f4	e58d30a4	 str         r3, [sp, #0xA4]
  004f8		 |$LN11@OALPerRegR|

; 262  : 
; 263  :     if (flags & REG_READ_BYTES_START) {

  004f8	e59d30cc	 ldr         r3, [sp, #0xCC]
  004fc	e3130001	 tst         r3, #1
  00500	0a000068	 beq         |$LN7@OALPerRegR|

; 264  : 
; 265  :         if (g_perRegState.regions <= 0) {

  00504	e59f3270	 ldr         r3, [pc, #0x270]
  00508	e5933000	 ldr         r3, [r3]
  0050c	e3530000	 cmp         r3, #0
  00510	8a00000d	 bhi         |$LN6@OALPerRegR|

; 266  :             OALMSG(OAL_ERROR, (
; 267  :                 L"ERROR: OALPerRegRead: No valid flash regions defined\r\n"
; 268  :             ));

  00514	e59f3258	 ldr         r3, [pc, #0x258]
  00518	e5933440	 ldr         r3, [r3, #0x440]
  0051c	e3130001	 tst         r3, #1
  00520	0a000004	 beq         |$LN12@OALPerRegR|
  00524	e59f0264	 ldr         r0, [pc, #0x264]
  00528	eb000000	 bl          NKDbgPrintfW
  0052c	e3a03001	 mov         r3, #1
  00530	e58d30a8	 str         r3, [sp, #0xA8]
  00534	ea000001	 b           |$LN13@OALPerRegR|
  00538		 |$LN12@OALPerRegR|
  00538	e3a03000	 mov         r3, #0
  0053c	e58d30a8	 str         r3, [sp, #0xA8]
  00540		 |$LN13@OALPerRegR|

; 269  :             rc = -1;

  00540	e3e03000	 mvn         r3, #0
  00544	e58d3004	 str         r3, [sp, #4]

; 270  :             goto cleanUp;

  00548	ea000072	 b           |$cleanUp$39608|
  0054c		 |$LN6@OALPerRegR|

; 271  :         }
; 272  : 
; 273  :         RETAILMSG(TRUE, (L"INFO: OALPerRegRead: Registry read start\r\n"));

  0054c	e59f0238	 ldr         r0, [pc, #0x238]
  00550	eb000000	 bl          NKDbgPrintfW

; 274  : 
; 275  :         // Reset buffer and read header
; 276  :         ResetBuffer(FALSE);

  00554	e3a00000	 mov         r0, #0
  00558	eb000000	 bl          ResetBuffer

; 277  :         CopyFromBuffer(&header, sizeof(header));

  0055c	e3a0100c	 mov         r1, #0xC
  00560	e28d0094	 add         r0, sp, #0x94
  00564	eb000000	 bl          CopyFromBuffer

; 278  : 
; 279  :         if (header.signature != OAL_PERREG_SIGN) {

  00568	e59d2094	 ldr         r2, [sp, #0x94]
  0056c	e59f3214	 ldr         r3, [pc, #0x214]
  00570	e1520003	 cmp         r2, r3
  00574	0a00000d	 beq         |$LN5@OALPerRegR|

; 280  :             OALMSG(OAL_WARN, (L"WARN: ReadRegistryFromOEM: Bad signature\r\n"));

  00578	e59f31f4	 ldr         r3, [pc, #0x1F4]
  0057c	e5933440	 ldr         r3, [r3, #0x440]
  00580	e3130002	 tst         r3, #2
  00584	0a000004	 beq         |$LN14@OALPerRegR|
  00588	e59f01f4	 ldr         r0, [pc, #0x1F4]
  0058c	eb000000	 bl          NKDbgPrintfW
  00590	e3a03001	 mov         r3, #1
  00594	e58d30ac	 str         r3, [sp, #0xAC]
  00598	ea000001	 b           |$LN15@OALPerRegR|
  0059c		 |$LN14@OALPerRegR|
  0059c	e3a03000	 mov         r3, #0
  005a0	e58d30ac	 str         r3, [sp, #0xAC]
  005a4		 |$LN15@OALPerRegR|

; 281  :             rc = -1;

  005a4	e3e03000	 mvn         r3, #0
  005a8	e58d3004	 str         r3, [sp, #4]

; 282  :             goto cleanUp;

  005ac	ea000059	 b           |$cleanUp$39608|
  005b0		 |$LN5@OALPerRegR|

; 283  :         }
; 284  : 
; 285  :         // Calculate checksum
; 286  :         count = (header.size + 3) & ~0x3;

  005b0	e59d3098	 ldr         r3, [sp, #0x98]
  005b4	e2832003	 add         r2, r3, #3
  005b8	e3e03003	 mvn         r3, #3
  005bc	e0023003	 and         r3, r2, r3
  005c0	e58d3000	 str         r3, [sp]

; 287  :         checkSum = 0;

  005c4	e3a03000	 mov         r3, #0
  005c8	e58d3090	 str         r3, [sp, #0x90]
  005cc		 |$LN4@OALPerRegR|

; 288  :         while (count > 0) {

  005cc	e59d3000	 ldr         r3, [sp]
  005d0	e3530000	 cmp         r3, #0
  005d4	9a000019	 bls         |$LN3@OALPerRegR|

; 289  :             chunk = sizeof(buffer) < count ? sizeof(buffer) : count;

  005d8	e59d3000	 ldr         r3, [sp]
  005dc	e3530080	 cmp         r3, #0x80
  005e0	9a000002	 bls         |$LN16@OALPerRegR|
  005e4	e3a03080	 mov         r3, #0x80
  005e8	e58d30b0	 str         r3, [sp, #0xB0]
  005ec	ea000001	 b           |$LN17@OALPerRegR|
  005f0		 |$LN16@OALPerRegR|
  005f0	e59d3000	 ldr         r3, [sp]
  005f4	e58d30b0	 str         r3, [sp, #0xB0]
  005f8		 |$LN17@OALPerRegR|
  005f8	e59d30b0	 ldr         r3, [sp, #0xB0]
  005fc	e58d300c	 str         r3, [sp, #0xC]

; 290  :             CopyFromBuffer(buffer, chunk);

  00600	e59d100c	 ldr         r1, [sp, #0xC]
  00604	e28d0010	 add         r0, sp, #0x10
  00608	eb000000	 bl          CopyFromBuffer

; 291  :             checkSum += CheckSum(buffer, chunk);

  0060c	e59d100c	 ldr         r1, [sp, #0xC]
  00610	e28d0010	 add         r0, sp, #0x10
  00614	eb000000	 bl          CheckSum
  00618	e58d00b4	 str         r0, [sp, #0xB4]
  0061c	e59d2090	 ldr         r2, [sp, #0x90]
  00620	e59d30b4	 ldr         r3, [sp, #0xB4]
  00624	e0823003	 add         r3, r2, r3
  00628	e58d3090	 str         r3, [sp, #0x90]

; 292  :             count -= chunk;

  0062c	e59d2000	 ldr         r2, [sp]
  00630	e59d300c	 ldr         r3, [sp, #0xC]
  00634	e0423003	 sub         r3, r2, r3
  00638	e58d3000	 str         r3, [sp]

; 293  :         }

  0063c	eaffffe2	 b           |$LN4@OALPerRegR|
  00640		 |$LN3@OALPerRegR|

; 294  : 
; 295  :         if (header.checkSum != checkSum) {

  00640	e59d209c	 ldr         r2, [sp, #0x9C]
  00644	e59d3090	 ldr         r3, [sp, #0x90]
  00648	e1520003	 cmp         r2, r3
  0064c	0a00000d	 beq         |$LN2@OALPerRegR|

; 296  :             OALMSG(OAL_WARN, (
; 297  :                 L"WARN: ReadRegistryFromOEM: Invalid checksum\r\n"
; 298  :             ));

  00650	e59f311c	 ldr         r3, [pc, #0x11C]
  00654	e5933440	 ldr         r3, [r3, #0x440]
  00658	e3130002	 tst         r3, #2
  0065c	0a000004	 beq         |$LN18@OALPerRegR|
  00660	e59f0118	 ldr         r0, [pc, #0x118]
  00664	eb000000	 bl          NKDbgPrintfW
  00668	e3a03001	 mov         r3, #1
  0066c	e58d30b8	 str         r3, [sp, #0xB8]
  00670	ea000001	 b           |$LN19@OALPerRegR|
  00674		 |$LN18@OALPerRegR|
  00674	e3a03000	 mov         r3, #0
  00678	e58d30b8	 str         r3, [sp, #0xB8]
  0067c		 |$LN19@OALPerRegR|

; 299  :             rc = -1;

  0067c	e3e03000	 mvn         r3, #0
  00680	e58d3004	 str         r3, [sp, #4]

; 300  :             goto cleanUp;

  00684	ea000023	 b           |$cleanUp$39608|
  00688		 |$LN2@OALPerRegR|

; 301  :         }            
; 302  : 
; 303  :         // Reset buffer and read header
; 304  :         ResetBuffer(FALSE);

  00688	e3a00000	 mov         r0, #0
  0068c	eb000000	 bl          ResetBuffer

; 305  :         CopyFromBuffer(&header, sizeof(header));

  00690	e3a0100c	 mov         r1, #0xC
  00694	e28d0094	 add         r0, sp, #0x94
  00698	eb000000	 bl          CopyFromBuffer

; 306  :         g_perRegState.size = header.size;

  0069c	e59d2098	 ldr         r2, [sp, #0x98]
  006a0	e59f30d4	 ldr         r3, [pc, #0xD4]
  006a4	e5832064	 str         r2, [r3, #0x64]
  006a8		 |$LN7@OALPerRegR|

; 307  :         
; 308  :     }
; 309  : 
; 310  :     if (g_perRegState.size >= dataSize) {

  006a8	e59f30cc	 ldr         r3, [pc, #0xCC]
  006ac	e5932064	 ldr         r2, [r3, #0x64]
  006b0	e59d30d4	 ldr         r3, [sp, #0xD4]
  006b4	e1520003	 cmp         r2, r3
  006b8	3a00000a	 bcc         |$LN1@OALPerRegR|

; 311  :         CopyFromBuffer(pData, dataSize);

  006bc	e59d10d4	 ldr         r1, [sp, #0xD4]
  006c0	e59d00d0	 ldr         r0, [sp, #0xD0]
  006c4	eb000000	 bl          CopyFromBuffer

; 312  :         g_perRegState.size -= dataSize;

  006c8	e59f30ac	 ldr         r3, [pc, #0xAC]
  006cc	e5932064	 ldr         r2, [r3, #0x64]
  006d0	e59d30d4	 ldr         r3, [sp, #0xD4]
  006d4	e0422003	 sub         r2, r2, r3
  006d8	e59f309c	 ldr         r3, [pc, #0x9C]
  006dc	e5832064	 str         r2, [r3, #0x64]

; 313  :         rc = dataSize;

  006e0	e59d30d4	 ldr         r3, [sp, #0xD4]
  006e4	e58d3004	 str         r3, [sp, #4]
  006e8		 |$LN1@OALPerRegR|

; 314  :     }
; 315  : 
; 316  :     RETAILMSG(rc == 0, (
; 317  :         L"INFO: OALPerRegRead: Registry read done (%d)\r\n", g_perRegState.size
; 318  :     ));

  006e8	e59d3004	 ldr         r3, [sp, #4]
  006ec	e3530000	 cmp         r3, #0
  006f0	1a000006	 bne         |$LN20@OALPerRegR|
  006f4	e59f3080	 ldr         r3, [pc, #0x80]
  006f8	e5931064	 ldr         r1, [r3, #0x64]
  006fc	e59f0074	 ldr         r0, [pc, #0x74]
  00700	eb000000	 bl          NKDbgPrintfW
  00704	e3a03001	 mov         r3, #1
  00708	e58d30bc	 str         r3, [sp, #0xBC]
  0070c	ea000001	 b           |$LN21@OALPerRegR|
  00710		 |$LN20@OALPerRegR|
  00710	e3a03000	 mov         r3, #0
  00714	e58d30bc	 str         r3, [sp, #0xBC]
  00718		 |$LN21@OALPerRegR|
  00718		 |$cleanUp$39608|

; 319  : 
; 320  : cleanUp:
; 321  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"-OALPerRegRead(rc = %d)", rc));

  00718	e59f3054	 ldr         r3, [pc, #0x54]
  0071c	e5933440	 ldr         r3, [r3, #0x440]
  00720	e3130a02	 tst         r3, #2, 20
  00724	0a000009	 beq         |$LN22@OALPerRegR|
  00728	e59f3044	 ldr         r3, [pc, #0x44]
  0072c	e5933440	 ldr         r3, [r3, #0x440]
  00730	e3130004	 tst         r3, #4
  00734	0a000005	 beq         |$LN22@OALPerRegR|
  00738	e59d1004	 ldr         r1, [sp, #4]
  0073c	e59f002c	 ldr         r0, [pc, #0x2C]
  00740	eb000000	 bl          NKDbgPrintfW
  00744	e3a03001	 mov         r3, #1
  00748	e58d30c0	 str         r3, [sp, #0xC0]
  0074c	ea000001	 b           |$LN23@OALPerRegR|
  00750		 |$LN22@OALPerRegR|
  00750	e3a03000	 mov         r3, #0
  00754	e58d30c0	 str         r3, [sp, #0xC0]
  00758		 |$LN23@OALPerRegR|

; 322  :     return rc;

  00758	e59d3004	 ldr         r3, [sp, #4]
  0075c	e58d30a0	 str         r3, [sp, #0xA0]

; 323  : }

  00760	e59d00a0	 ldr         r0, [sp, #0xA0]
  00764	e28dd0c4	 add         sp, sp, #0xC4
  00768	e89d6000	 ldmia       sp, {sp, lr}
  0076c	e12fff1e	 bx          lr
  00770		 |$LN27@OALPerRegR|
  00770		 |$LN28@OALPerRegR|
  00770	00000000	 DCD         |??_C@_1DA@PEPHMLMF@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AA@|
  00774		 |$LN29@OALPerRegR|
  00774	00000000	 DCD         |dpCurSettings|
  00778		 |$LN30@OALPerRegR|
  00778	00000000	 DCD         |??_C@_1FO@ECAFLHLG@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAr?$AAe@|
  0077c		 |$LN31@OALPerRegR|
  0077c	00000000	 DCD         |g_perRegState|
  00780		 |$LN32@OALPerRegR|
  00780	00000000	 DCD         |??_C@_1FM@OHNCKHEN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAr?$AAo?$AAm?$AAO?$AAE?$AAM?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl@|
  00784		 |$LN33@OALPerRegR|
  00784	00000000	 DCD         |??_C@_1FG@NIPNJMPD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAr?$AAo?$AAm?$AAO?$AAE?$AAM?$AA?3?$AA?5?$AAB?$AAa?$AAd?$AA?5?$AAs@|
  00788		 |$LN34@OALPerRegR|
  00788	50524547	 DCD         0x50524547
  0078c		 |$LN35@OALPerRegR|
  0078c	00000000	 DCD         |??_C@_1FG@JPBKLLNK@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAr?$AAe@|
  00790		 |$LN36@OALPerRegR|
  00790	00000000	 DCD         |??_C@_1GO@GLNGEKIG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAf@|
  00794		 |$LN37@OALPerRegR|
  00794	00000000	 DCD         |??_C@_1FC@KDAHPIMP@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@|
  00798		 |$M39815|

			 ENDP  ; |OALPerRegRead|


  00018			 AREA	 |.pdata|, PDATA
|$T39834| DCD	|$LN8@CheckSum|
	DCD	0x40001e04
; Function compile flags: /Odtp

  00798			 AREA	 |.text|, CODE, ARM

  00798		 |CheckSum| PROC

; 328  : {

  00798		 |$LN8@CheckSum|
  00798	e1a0c00d	 mov         r12, sp
  0079c	e92d0003	 stmdb       sp!, {r0, r1}
  007a0	e92d5000	 stmdb       sp!, {r12, lr}
  007a4	e24dd00c	 sub         sp, sp, #0xC
  007a8		 |$M39831|

; 329  :     UINT32 sum = 0;

  007a8	e3a03000	 mov         r3, #0
  007ac	e58d3004	 str         r3, [sp, #4]

; 330  :     UINT32 *p;
; 331  : 
; 332  :     for (p = pStart; size > sizeof(UINT32) - 1; size -= sizeof(UINT32)) {

  007b0	e59d3014	 ldr         r3, [sp, #0x14]
  007b4	e58d3000	 str         r3, [sp]
  007b8	ea000002	 b           |$LN3@CheckSum|
  007bc		 |$LN2@CheckSum|
  007bc	e59d3018	 ldr         r3, [sp, #0x18]
  007c0	e2433004	 sub         r3, r3, #4
  007c4	e58d3018	 str         r3, [sp, #0x18]
  007c8		 |$LN3@CheckSum|
  007c8	e59d3018	 ldr         r3, [sp, #0x18]
  007cc	e3530003	 cmp         r3, #3
  007d0	9a000008	 bls         |$LN1@CheckSum|

; 333  :         sum += *p++;

  007d4	e59d2004	 ldr         r2, [sp, #4]
  007d8	e59d3000	 ldr         r3, [sp]
  007dc	e5933000	 ldr         r3, [r3]
  007e0	e0823003	 add         r3, r2, r3
  007e4	e58d3004	 str         r3, [sp, #4]
  007e8	e59d3000	 ldr         r3, [sp]
  007ec	e2833004	 add         r3, r3, #4
  007f0	e58d3000	 str         r3, [sp]

; 334  :     }

  007f4	eafffff0	 b           |$LN2@CheckSum|
  007f8		 |$LN1@CheckSum|

; 335  :     return sum;

  007f8	e59d3004	 ldr         r3, [sp, #4]
  007fc	e58d3008	 str         r3, [sp, #8]

; 336  : }

  00800	e59d0008	 ldr         r0, [sp, #8]
  00804	e28dd00c	 add         sp, sp, #0xC
  00808	e89d6000	 ldmia       sp, {sp, lr}
  0080c	e12fff1e	 bx          lr
  00810		 |$M39832|

			 ENDP  ; |CheckSum|

	EXPORT	|??_C@_1GE@ECAMGMJA@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@KILKPEAH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAe?$AAr?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@HBFAHLII@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAs@| [ DATA ] ; `string'
	IMPORT	|OALFlashErase|
	IMPORT	|OALPAtoVA|

  00020			 AREA	 |.pdata|, PDATA
|$T39842| DCD	|$LN11@EraseFlash|
	DCD	0x40004b02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@ECAMGMJA@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAs@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "e", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "d", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@KILKPEAH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAe?$AAr?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "e", 0x0, "r"
	DCB	0x0, "a", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "a", 0x0, "t"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@HBFAHLII@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAs@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "e", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00810			 AREA	 |.text|, CODE, ARM

  00810		 |EraseFlash| PROC

; 341  : {

  00810		 |$LN11@EraseFlash|
  00810	e52de004	 str         lr, [sp, #-4]!
  00814	e24dd020	 sub         sp, sp, #0x20
  00818		 |$M39839|

; 342  :     BOOL rc = FALSE;

  00818	e3a03000	 mov         r3, #0
  0081c	e58d3000	 str         r3, [sp]

; 343  :     OAL_PERREG_REGION *pRegion;
; 344  :     UINT32 i;
; 345  :     
; 346  :     // Erase all regions...
; 347  :     RETAILMSG(TRUE, (L"INFO: OALPerRegWrite: Registry store erase start\r\n"));

  00820	e59f0110	 ldr         r0, [pc, #0x110]
  00824	eb000000	 bl          NKDbgPrintfW

; 348  :     pRegion = g_perRegState.region;

  00828	e59f3104	 ldr         r3, [pc, #0x104]
  0082c	e2833004	 add         r3, r3, #4
  00830	e58d3008	 str         r3, [sp, #8]

; 349  :     for (i = 0; i < g_perRegState.regions; i++) {

  00834	e3a03000	 mov         r3, #0
  00838	e58d3004	 str         r3, [sp, #4]
  0083c	ea000002	 b           |$LN4@EraseFlash|
  00840		 |$LN3@EraseFlash|
  00840	e59d3004	 ldr         r3, [sp, #4]
  00844	e2833001	 add         r3, r3, #1
  00848	e58d3004	 str         r3, [sp, #4]
  0084c		 |$LN4@EraseFlash|
  0084c	e59d2004	 ldr         r2, [sp, #4]
  00850	e59f30dc	 ldr         r3, [pc, #0xDC]
  00854	e5933000	 ldr         r3, [r3]
  00858	e1520003	 cmp         r2, r3
  0085c	2a000027	 bcs         |$LN2@EraseFlash|

; 350  :         if (!OALFlashErase(
; 351  :             OALPAtoUA(pRegion->base), OALPAtoUA(pRegion->start), 
; 352  :             pRegion->size
; 353  :         )) {

  00860	e3a01000	 mov         r1, #0
  00864	e59d3008	 ldr         r3, [sp, #8]
  00868	e2833004	 add         r3, r3, #4
  0086c	e5930000	 ldr         r0, [r3]
  00870	eb000000	 bl          OALPAtoVA
  00874	e58d0010	 str         r0, [sp, #0x10]
  00878	e3a01000	 mov         r1, #0
  0087c	e59d3008	 ldr         r3, [sp, #8]
  00880	e5930000	 ldr         r0, [r3]
  00884	eb000000	 bl          OALPAtoVA
  00888	e58d0014	 str         r0, [sp, #0x14]
  0088c	e59d3008	 ldr         r3, [sp, #8]
  00890	e2833008	 add         r3, r3, #8
  00894	e5932000	 ldr         r2, [r3]
  00898	e59d1010	 ldr         r1, [sp, #0x10]
  0089c	e59d0014	 ldr         r0, [sp, #0x14]
  008a0	eb000000	 bl          OALFlashErase
  008a4	e58d0018	 str         r0, [sp, #0x18]
  008a8	e59d3018	 ldr         r3, [sp, #0x18]
  008ac	e3530000	 cmp         r3, #0
  008b0	1a00000e	 bne         |$LN1@EraseFlash|

; 354  :             OALMSG(OAL_ERROR, (
; 355  :                 L"ERROR: OALPerRegWrite: Flash erase at 0x%08x failed\r\n",
; 356  :                 pRegion->start
; 357  :             ));

  008b4	e59f3074	 ldr         r3, [pc, #0x74]
  008b8	e5933440	 ldr         r3, [r3, #0x440]
  008bc	e3130001	 tst         r3, #1
  008c0	0a000007	 beq         |$LN7@EraseFlash|
  008c4	e59d3008	 ldr         r3, [sp, #8]
  008c8	e2833004	 add         r3, r3, #4
  008cc	e5931000	 ldr         r1, [r3]
  008d0	e59f0054	 ldr         r0, [pc, #0x54]
  008d4	eb000000	 bl          NKDbgPrintfW
  008d8	e3a03001	 mov         r3, #1
  008dc	e58d301c	 str         r3, [sp, #0x1C]
  008e0	ea000001	 b           |$LN8@EraseFlash|
  008e4		 |$LN7@EraseFlash|
  008e4	e3a03000	 mov         r3, #0
  008e8	e58d301c	 str         r3, [sp, #0x1C]
  008ec		 |$LN8@EraseFlash|

; 358  :             goto cleanUp;

  008ec	ea000007	 b           |$cleanUp$39646|
  008f0		 |$LN1@EraseFlash|

; 359  :         }
; 360  :         pRegion++;

  008f0	e59d3008	 ldr         r3, [sp, #8]
  008f4	e283300c	 add         r3, r3, #0xC
  008f8	e58d3008	 str         r3, [sp, #8]

; 361  :     }

  008fc	eaffffcf	 b           |$LN3@EraseFlash|
  00900		 |$LN2@EraseFlash|

; 362  :     rc = TRUE;

  00900	e3a03001	 mov         r3, #1
  00904	e58d3000	 str         r3, [sp]

; 363  :     RETAILMSG(TRUE, (L"INFO: OALPerRegWrite: Registry store erase done\r\n"));

  00908	e59f0018	 ldr         r0, [pc, #0x18]
  0090c	eb000000	 bl          NKDbgPrintfW
  00910		 |$cleanUp$39646|

; 364  : 
; 365  : cleanUp:
; 366  :     return rc;

  00910	e59d3000	 ldr         r3, [sp]
  00914	e58d300c	 str         r3, [sp, #0xC]

; 367  : }

  00918	e59d000c	 ldr         r0, [sp, #0xC]
  0091c	e28dd020	 add         sp, sp, #0x20
  00920	e49de004	 ldr         lr, [sp], #4
  00924	e12fff1e	 bx          lr
  00928		 |$LN12@EraseFlash|
  00928		 |$LN13@EraseFlash|
  00928	00000000	 DCD         |??_C@_1GE@ECAMGMJA@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAs@|
  0092c		 |$LN14@EraseFlash|
  0092c	00000000	 DCD         |??_C@_1GM@KILKPEAH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAe?$AAr?$AAa@|
  00930		 |$LN15@EraseFlash|
  00930	00000000	 DCD         |dpCurSettings|
  00934		 |$LN16@EraseFlash|
  00934	00000000	 DCD         |g_perRegState|
  00938		 |$LN17@EraseFlash|
  00938	00000000	 DCD         |??_C@_1GG@HBFAHLII@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAs@|
  0093c		 |$M39840|

			 ENDP  ; |EraseFlash|

	IMPORT	|memcpy|

  00028			 AREA	 |.pdata|, PDATA
|$T39856| DCD	|$LN11@CopyFromBu|
	DCD	0x40004204
; Function compile flags: /Odtp

  0093c			 AREA	 |.text|, CODE, ARM

  0093c		 |CopyFromBuffer| PROC

; 489  : {

  0093c		 |$LN11@CopyFromBu|
  0093c	e1a0c00d	 mov         r12, sp
  00940	e92d0003	 stmdb       sp!, {r0, r1}
  00944	e92d5000	 stmdb       sp!, {r12, lr}
  00948	e24dd018	 sub         sp, sp, #0x18
  0094c		 |$M39853|

; 490  :     BOOL rc = FALSE;

  0094c	e3a03000	 mov         r3, #0
  00950	e58d3000	 str         r3, [sp]
  00954		 |$LN4@CopyFromBu|

; 491  :     UINT32 chunk, remain;
; 492  : 
; 493  :     while (count > 0) {

  00954	e59d3024	 ldr         r3, [sp, #0x24]
  00958	e3530000	 cmp         r3, #0
  0095c	9a00002f	 bls         |$LN3@CopyFromBu|

; 494  : 
; 495  :         // Get data chunk size
; 496  :         remain = sizeof(g_perRegState.buffer) - g_perRegState.bufferPos;

  00960	e59f30d8	 ldr         r3, [pc, #0xD8]
  00964	e5933474	 ldr         r3, [r3, #0x474]
  00968	e2633b01	 rsb         r3, r3, #1, 22
  0096c	e58d3004	 str         r3, [sp, #4]

; 497  :         chunk = (remain < count) ? remain : count;

  00970	e59d2004	 ldr         r2, [sp, #4]
  00974	e59d3024	 ldr         r3, [sp, #0x24]
  00978	e1520003	 cmp         r2, r3
  0097c	2a000002	 bcs         |$LN7@CopyFromBu|
  00980	e59d3004	 ldr         r3, [sp, #4]
  00984	e58d3010	 str         r3, [sp, #0x10]
  00988	ea000001	 b           |$LN8@CopyFromBu|
  0098c		 |$LN7@CopyFromBu|
  0098c	e59d3024	 ldr         r3, [sp, #0x24]
  00990	e58d3010	 str         r3, [sp, #0x10]
  00994		 |$LN8@CopyFromBu|
  00994	e59d3010	 ldr         r3, [sp, #0x10]
  00998	e58d3008	 str         r3, [sp, #8]

; 498  :         
; 499  :         // Copy data chunk
; 500  :         memcpy(pBuffer, &g_perRegState.buffer[g_perRegState.bufferPos], chunk);

  0099c	e59d2008	 ldr         r2, [sp, #8]
  009a0	e59f3098	 ldr         r3, [pc, #0x98]
  009a4	e2831074	 add         r1, r3, #0x74
  009a8	e59f3090	 ldr         r3, [pc, #0x90]
  009ac	e5933474	 ldr         r3, [r3, #0x474]
  009b0	e0811003	 add         r1, r1, r3
  009b4	e59d0020	 ldr         r0, [sp, #0x20]
  009b8	eb000000	 bl          memcpy

; 501  : 
; 502  :         g_perRegState.bufferPos += chunk;

  009bc	e59f307c	 ldr         r3, [pc, #0x7C]
  009c0	e5932474	 ldr         r2, [r3, #0x474]
  009c4	e59d3008	 ldr         r3, [sp, #8]
  009c8	e0822003	 add         r2, r2, r3
  009cc	e59f306c	 ldr         r3, [pc, #0x6C]
  009d0	e5832474	 str         r2, [r3, #0x474]

; 503  :         (UINT8*)pBuffer += chunk;

  009d4	e59d2020	 ldr         r2, [sp, #0x20]
  009d8	e59d3008	 ldr         r3, [sp, #8]
  009dc	e0823003	 add         r3, r2, r3
  009e0	e58d3020	 str         r3, [sp, #0x20]

; 504  :         if (g_perRegState.bufferPos >= sizeof(g_perRegState.buffer)) {

  009e4	e59f3054	 ldr         r3, [pc, #0x54]
  009e8	e5933474	 ldr         r3, [r3, #0x474]
  009ec	e3530b01	 cmp         r3, #1, 22
  009f0	3a000005	 bcc         |$LN2@CopyFromBu|

; 505  :             if (!ReadBufferFromFlash()) goto cleanUp;

  009f4	eb000000	 bl          ReadBufferFromFlash
  009f8	e58d0014	 str         r0, [sp, #0x14]
  009fc	e59d3014	 ldr         r3, [sp, #0x14]
  00a00	e3530000	 cmp         r3, #0
  00a04	1a000000	 bne         |$LN1@CopyFromBu|
  00a08	ea000006	 b           |$cleanUp$39701|
  00a0c		 |$LN1@CopyFromBu|
  00a0c		 |$LN2@CopyFromBu|

; 506  :         }
; 507  : 
; 508  :         // How much we still need to get
; 509  :         count -= chunk;

  00a0c	e59d2024	 ldr         r2, [sp, #0x24]
  00a10	e59d3008	 ldr         r3, [sp, #8]
  00a14	e0423003	 sub         r3, r2, r3
  00a18	e58d3024	 str         r3, [sp, #0x24]

; 510  :     }        

  00a1c	eaffffcc	 b           |$LN4@CopyFromBu|
  00a20		 |$LN3@CopyFromBu|

; 511  : 
; 512  :     rc = TRUE;

  00a20	e3a03001	 mov         r3, #1
  00a24	e58d3000	 str         r3, [sp]
  00a28		 |$cleanUp$39701|

; 513  :     
; 514  : cleanUp:
; 515  :     return rc;

  00a28	e59d3000	 ldr         r3, [sp]
  00a2c	e58d300c	 str         r3, [sp, #0xC]

; 516  : }

  00a30	e59d000c	 ldr         r0, [sp, #0xC]
  00a34	e28dd018	 add         sp, sp, #0x18
  00a38	e89d6000	 ldmia       sp, {sp, lr}
  00a3c	e12fff1e	 bx          lr
  00a40		 |$LN12@CopyFromBu|
  00a40		 |$LN13@CopyFromBu|
  00a40	00000000	 DCD         |g_perRegState|
  00a44		 |$M39854|

			 ENDP  ; |CopyFromBuffer|


  00030			 AREA	 |.pdata|, PDATA
|$T39868| DCD	|$LN12@ReadBuffer|
	DCD	0x40006502
; Function compile flags: /Odtp

  00a44			 AREA	 |.text|, CODE, ARM

  00a44		 |ReadBufferFromFlash| PROC

; 448  : {

  00a44		 |$LN12@ReadBuffer|
  00a44	e52de004	 str         lr, [sp, #-4]!
  00a48	e24dd028	 sub         sp, sp, #0x28
  00a4c		 |$M39865|

; 449  :     OAL_PERREG_REGION *pRegion;
; 450  :     UINT32 count, pos, chunk, remain;
; 451  :     UINT8 *pBuffer;
; 452  : 
; 453  :     // Get possition    
; 454  :     count = sizeof(g_perRegState.buffer);

  00a4c	e3a03b01	 mov         r3, #1, 22
  00a50	e58d3004	 str         r3, [sp, #4]

; 455  :     pBuffer = g_perRegState.buffer;

  00a54	e59f3178	 ldr         r3, [pc, #0x178]
  00a58	e2833074	 add         r3, r3, #0x74
  00a5c	e58d3000	 str         r3, [sp]
  00a60		 |$LN3@ReadBuffer|

; 456  :     
; 457  :     while (count > 0 && g_perRegState.regionIdx < g_perRegState.regions) {

  00a60	e59d3004	 ldr         r3, [sp, #4]
  00a64	e3530000	 cmp         r3, #0
  00a68	9a000048	 bls         |$LN2@ReadBuffer|
  00a6c	e59f3160	 ldr         r3, [pc, #0x160]
  00a70	e593206c	 ldr         r2, [r3, #0x6C]
  00a74	e59f3158	 ldr         r3, [pc, #0x158]
  00a78	e5933000	 ldr         r3, [r3]
  00a7c	e1520003	 cmp         r2, r3
  00a80	2a000042	 bcs         |$LN2@ReadBuffer|

; 458  : 
; 459  :         pRegion = &g_perRegState.region[g_perRegState.regionIdx];

  00a84	e59f3148	 ldr         r3, [pc, #0x148]
  00a88	e593106c	 ldr         r1, [r3, #0x6C]
  00a8c	e3a0300c	 mov         r3, #0xC
  00a90	e0020391	 mul         r2, r1, r3
  00a94	e59f3138	 ldr         r3, [pc, #0x138]
  00a98	e2833004	 add         r3, r3, #4
  00a9c	e0833002	 add         r3, r3, r2
  00aa0	e58d3010	 str         r3, [sp, #0x10]

; 460  :         pos = pRegion->start + g_perRegState.regionPos;

  00aa4	e59d3010	 ldr         r3, [sp, #0x10]
  00aa8	e2833004	 add         r3, r3, #4
  00aac	e5932000	 ldr         r2, [r3]
  00ab0	e59f311c	 ldr         r3, [pc, #0x11C]
  00ab4	e5933070	 ldr         r3, [r3, #0x70]
  00ab8	e0823003	 add         r3, r2, r3
  00abc	e58d3014	 str         r3, [sp, #0x14]

; 461  : 
; 462  :         remain = pRegion->size - g_perRegState.regionPos;

  00ac0	e59d3010	 ldr         r3, [sp, #0x10]
  00ac4	e2833008	 add         r3, r3, #8
  00ac8	e5932000	 ldr         r2, [r3]
  00acc	e59f3100	 ldr         r3, [pc, #0x100]
  00ad0	e5933070	 ldr         r3, [r3, #0x70]
  00ad4	e0423003	 sub         r3, r2, r3
  00ad8	e58d3008	 str         r3, [sp, #8]

; 463  :         chunk = (remain < count) ? remain : count;

  00adc	e59d2008	 ldr         r2, [sp, #8]
  00ae0	e59d3004	 ldr         r3, [sp, #4]
  00ae4	e1520003	 cmp         r2, r3
  00ae8	2a000002	 bcs         |$LN6@ReadBuffer|
  00aec	e59d3008	 ldr         r3, [sp, #8]
  00af0	e58d301c	 str         r3, [sp, #0x1C]
  00af4	ea000001	 b           |$LN7@ReadBuffer|
  00af8		 |$LN6@ReadBuffer|
  00af8	e59d3004	 ldr         r3, [sp, #4]
  00afc	e58d301c	 str         r3, [sp, #0x1C]
  00b00		 |$LN7@ReadBuffer|
  00b00	e59d301c	 ldr         r3, [sp, #0x1C]
  00b04	e58d300c	 str         r3, [sp, #0xC]

; 464  : 
; 465  :         // Copy data chunk
; 466  :         memcpy(pBuffer, OALPAtoUA(pos), chunk);

  00b08	e3a01000	 mov         r1, #0
  00b0c	e59d0014	 ldr         r0, [sp, #0x14]
  00b10	eb000000	 bl          OALPAtoVA
  00b14	e58d0020	 str         r0, [sp, #0x20]
  00b18	e59d200c	 ldr         r2, [sp, #0xC]
  00b1c	e59d1020	 ldr         r1, [sp, #0x20]
  00b20	e59d0000	 ldr         r0, [sp]
  00b24	eb000000	 bl          memcpy

; 467  :     
; 468  :         // Move pointer
; 469  :         g_perRegState.regionPos += chunk;

  00b28	e59f30a4	 ldr         r3, [pc, #0xA4]
  00b2c	e5932070	 ldr         r2, [r3, #0x70]
  00b30	e59d300c	 ldr         r3, [sp, #0xC]
  00b34	e0822003	 add         r2, r2, r3
  00b38	e59f3094	 ldr         r3, [pc, #0x94]
  00b3c	e5832070	 str         r2, [r3, #0x70]

; 470  :         if (g_perRegState.regionPos >= pRegion->size) {

  00b40	e59d3010	 ldr         r3, [sp, #0x10]
  00b44	e2831008	 add         r1, r3, #8
  00b48	e59f3084	 ldr         r3, [pc, #0x84]
  00b4c	e5932070	 ldr         r2, [r3, #0x70]
  00b50	e5913000	 ldr         r3, [r1]
  00b54	e1520003	 cmp         r2, r3
  00b58	3a000007	 bcc         |$LN1@ReadBuffer|

; 471  :             g_perRegState.regionPos = 0;

  00b5c	e59f2070	 ldr         r2, [pc, #0x70]
  00b60	e3a03000	 mov         r3, #0
  00b64	e5823070	 str         r3, [r2, #0x70]

; 472  :             g_perRegState.regionIdx++;

  00b68	e59f3064	 ldr         r3, [pc, #0x64]
  00b6c	e593306c	 ldr         r3, [r3, #0x6C]
  00b70	e2832001	 add         r2, r3, #1
  00b74	e59f3058	 ldr         r3, [pc, #0x58]
  00b78	e583206c	 str         r2, [r3, #0x6C]
  00b7c		 |$LN1@ReadBuffer|

; 473  :         }
; 474  : 
; 475  :         // We already read this amount of data
; 476  :         count -= chunk;

  00b7c	e59d2004	 ldr         r2, [sp, #4]
  00b80	e59d300c	 ldr         r3, [sp, #0xC]
  00b84	e0423003	 sub         r3, r2, r3
  00b88	e58d3004	 str         r3, [sp, #4]

; 477  :     }

  00b8c	eaffffb3	 b           |$LN3@ReadBuffer|
  00b90		 |$LN2@ReadBuffer|

; 478  : 
; 479  :     // Read should start from buffer start
; 480  :     g_perRegState.bufferPos = 0;

  00b90	e59f203c	 ldr         r2, [pc, #0x3C]
  00b94	e3a03000	 mov         r3, #0
  00b98	e5823474	 str         r3, [r2, #0x474]

; 481  : 
; 482  :     // Return true when we read all data
; 483  :     return (count == 0);

  00b9c	e59d3004	 ldr         r3, [sp, #4]
  00ba0	e3530000	 cmp         r3, #0
  00ba4	1a000002	 bne         |$LN8@ReadBuffer|
  00ba8	e3a03001	 mov         r3, #1
  00bac	e58d3024	 str         r3, [sp, #0x24]
  00bb0	ea000001	 b           |$LN9@ReadBuffer|
  00bb4		 |$LN8@ReadBuffer|
  00bb4	e3a03000	 mov         r3, #0
  00bb8	e58d3024	 str         r3, [sp, #0x24]
  00bbc		 |$LN9@ReadBuffer|
  00bbc	e59d3024	 ldr         r3, [sp, #0x24]
  00bc0	e58d3018	 str         r3, [sp, #0x18]

; 484  : }

  00bc4	e59d0018	 ldr         r0, [sp, #0x18]
  00bc8	e28dd028	 add         sp, sp, #0x28
  00bcc	e49de004	 ldr         lr, [sp], #4
  00bd0	e12fff1e	 bx          lr
  00bd4		 |$LN13@ReadBuffer|
  00bd4		 |$LN14@ReadBuffer|
  00bd4	00000000	 DCD         |g_perRegState|
  00bd8		 |$M39866|

			 ENDP  ; |ReadBufferFromFlash|


  00038			 AREA	 |.pdata|, PDATA
|$T39875| DCD	|$LN6@ResetBuffe|
	DCD	0x40001303
; Function compile flags: /Odtp

  00bd8			 AREA	 |.text|, CODE, ARM

  00bd8		 |ResetBuffer| PROC

; 521  : {

  00bd8		 |$LN6@ResetBuffe|
  00bd8	e1a0c00d	 mov         r12, sp
  00bdc	e92d0001	 stmdb       sp!, {r0}
  00be0	e92d5000	 stmdb       sp!, {r12, lr}
  00be4		 |$M39872|

; 522  :     // Move at beginning of flash regions
; 523  :     g_perRegState.regionIdx = 0;

  00be4	e59f2034	 ldr         r2, [pc, #0x34]
  00be8	e3a03000	 mov         r3, #0
  00bec	e582306c	 str         r3, [r2, #0x6C]

; 524  :     g_perRegState.regionPos = 0;

  00bf0	e59f2028	 ldr         r2, [pc, #0x28]
  00bf4	e3a03000	 mov         r3, #0
  00bf8	e5823070	 str         r3, [r2, #0x70]

; 525  :     g_perRegState.bufferPos = 0;

  00bfc	e59f201c	 ldr         r2, [pc, #0x1C]
  00c00	e3a03000	 mov         r3, #0
  00c04	e5823474	 str         r3, [r2, #0x474]

; 526  :     if (!write) ReadBufferFromFlash();

  00c08	e59d3008	 ldr         r3, [sp, #8]
  00c0c	e3530000	 cmp         r3, #0
  00c10	1a000000	 bne         |$LN1@ResetBuffe|
  00c14	eb000000	 bl          ReadBufferFromFlash
  00c18		 |$LN1@ResetBuffe|

; 527  : }

  00c18	e89d6000	 ldmia       sp, {sp, lr}
  00c1c	e12fff1e	 bx          lr
  00c20		 |$LN7@ResetBuffe|
  00c20		 |$LN8@ResetBuffe|
  00c20	00000000	 DCD         |g_perRegState|
  00c24		 |$M39873|

			 ENDP  ; |ResetBuffer|


  00040			 AREA	 |.pdata|, PDATA
|$T39885| DCD	|$LN11@CopyToBuff|
	DCD	0x40004304
; Function compile flags: /Odtp

  00c24			 AREA	 |.text|, CODE, ARM

  00c24		 |CopyToBuffer| PROC

; 532  : {

  00c24		 |$LN11@CopyToBuff|
  00c24	e1a0c00d	 mov         r12, sp
  00c28	e92d0003	 stmdb       sp!, {r0, r1}
  00c2c	e92d5000	 stmdb       sp!, {r12, lr}
  00c30	e24dd018	 sub         sp, sp, #0x18
  00c34		 |$M39882|

; 533  :     BOOL rc = FALSE;

  00c34	e3a03000	 mov         r3, #0
  00c38	e58d3000	 str         r3, [sp]
  00c3c		 |$LN4@CopyToBuff|

; 534  :     UINT32 chunk, remain;
; 535  : 
; 536  :     while (count > 0) {

  00c3c	e59d3024	 ldr         r3, [sp, #0x24]
  00c40	e3530000	 cmp         r3, #0
  00c44	9a000030	 bls         |$LN3@CopyToBuff|

; 537  : 
; 538  :         // Get data chunk size
; 539  :         remain = sizeof(g_perRegState.buffer) - g_perRegState.bufferPos;

  00c48	e59f30dc	 ldr         r3, [pc, #0xDC]
  00c4c	e5933474	 ldr         r3, [r3, #0x474]
  00c50	e2633b01	 rsb         r3, r3, #1, 22
  00c54	e58d3004	 str         r3, [sp, #4]

; 540  :         chunk = (remain < count) ? remain : count;

  00c58	e59d2004	 ldr         r2, [sp, #4]
  00c5c	e59d3024	 ldr         r3, [sp, #0x24]
  00c60	e1520003	 cmp         r2, r3
  00c64	2a000002	 bcs         |$LN7@CopyToBuff|
  00c68	e59d3004	 ldr         r3, [sp, #4]
  00c6c	e58d3010	 str         r3, [sp, #0x10]
  00c70	ea000001	 b           |$LN8@CopyToBuff|
  00c74		 |$LN7@CopyToBuff|
  00c74	e59d3024	 ldr         r3, [sp, #0x24]
  00c78	e58d3010	 str         r3, [sp, #0x10]
  00c7c		 |$LN8@CopyToBuff|
  00c7c	e59d3010	 ldr         r3, [sp, #0x10]
  00c80	e58d3008	 str         r3, [sp, #8]

; 541  :         
; 542  :         // Copy data chunk
; 543  :         memcpy(&g_perRegState.buffer[g_perRegState.bufferPos], pBuffer, chunk);

  00c84	e59d2008	 ldr         r2, [sp, #8]
  00c88	e59d1020	 ldr         r1, [sp, #0x20]
  00c8c	e59f3098	 ldr         r3, [pc, #0x98]
  00c90	e2830074	 add         r0, r3, #0x74
  00c94	e59f3090	 ldr         r3, [pc, #0x90]
  00c98	e5933474	 ldr         r3, [r3, #0x474]
  00c9c	e0800003	 add         r0, r0, r3
  00ca0	eb000000	 bl          memcpy

; 544  : 
; 545  :         // Move buffer pointer and write buffer to flash when it is full
; 546  :         g_perRegState.bufferPos += chunk;

  00ca4	e59f3080	 ldr         r3, [pc, #0x80]
  00ca8	e5932474	 ldr         r2, [r3, #0x474]
  00cac	e59d3008	 ldr         r3, [sp, #8]
  00cb0	e0822003	 add         r2, r2, r3
  00cb4	e59f3070	 ldr         r3, [pc, #0x70]
  00cb8	e5832474	 str         r2, [r3, #0x474]

; 547  :         (UINT8*)pBuffer += chunk;

  00cbc	e59d2020	 ldr         r2, [sp, #0x20]
  00cc0	e59d3008	 ldr         r3, [sp, #8]
  00cc4	e0823003	 add         r3, r2, r3
  00cc8	e58d3020	 str         r3, [sp, #0x20]

; 548  :         if (g_perRegState.bufferPos >= sizeof(g_perRegState.buffer)) {

  00ccc	e59f3058	 ldr         r3, [pc, #0x58]
  00cd0	e5933474	 ldr         r3, [r3, #0x474]
  00cd4	e3530b01	 cmp         r3, #1, 22
  00cd8	3a000006	 bcc         |$LN2@CopyToBuff|

; 549  :             if (!WriteBufferToFlash(TRUE)) goto cleanUp;

  00cdc	e3a00001	 mov         r0, #1
  00ce0	eb000000	 bl          WriteBufferToFlash
  00ce4	e58d0014	 str         r0, [sp, #0x14]
  00ce8	e59d3014	 ldr         r3, [sp, #0x14]
  00cec	e3530000	 cmp         r3, #0
  00cf0	1a000000	 bne         |$LN1@CopyToBuff|
  00cf4	ea000006	 b           |$cleanUp$39720|
  00cf8		 |$LN1@CopyToBuff|
  00cf8		 |$LN2@CopyToBuff|

; 550  :         }
; 551  : 
; 552  :         // How much we still need to copy
; 553  :         count -= chunk;

  00cf8	e59d2024	 ldr         r2, [sp, #0x24]
  00cfc	e59d3008	 ldr         r3, [sp, #8]
  00d00	e0423003	 sub         r3, r2, r3
  00d04	e58d3024	 str         r3, [sp, #0x24]

; 554  :     }        

  00d08	eaffffcb	 b           |$LN4@CopyToBuff|
  00d0c		 |$LN3@CopyToBuff|

; 555  : 
; 556  :     rc = TRUE;

  00d0c	e3a03001	 mov         r3, #1
  00d10	e58d3000	 str         r3, [sp]
  00d14		 |$cleanUp$39720|

; 557  : 
; 558  : cleanUp:
; 559  :     return rc;

  00d14	e59d3000	 ldr         r3, [sp]
  00d18	e58d300c	 str         r3, [sp, #0xC]

; 560  : }

  00d1c	e59d000c	 ldr         r0, [sp, #0xC]
  00d20	e28dd018	 add         sp, sp, #0x18
  00d24	e89d6000	 ldmia       sp, {sp, lr}
  00d28	e12fff1e	 bx          lr
  00d2c		 |$LN12@CopyToBuff|
  00d2c		 |$LN13@CopyToBuff|
  00d2c	00000000	 DCD         |g_perRegState|
  00d30		 |$M39883|

			 ENDP  ; |CopyToBuffer|

	EXPORT	|??_C@_1LO@LLODBKPO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAs?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@MLPDAKMN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAw?$AAr?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KM@LKKBJECC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAs@| [ DATA ] ; `string'
	IMPORT	|OALFlashWrite|

  00048			 AREA	 |.pdata|, PDATA
|$T39899| DCD	|$LN18@WriteBuffe|
	DCD	0x4000c104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LO@LLODBKPO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAs?$AAp@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "o", 0x0, "u"
	DCB	0x0, "t", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "s"
	DCB	0x0, "p", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, ";", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "s"
	DCB	0x0, "i", 0x0, "d", 0x0, "e", 0x0, " ", 0x0, "l", 0x0, "a"
	DCB	0x0, "r", 0x0, "g", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "b"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "p"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@MLPDAKMN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAw?$AAr?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "w", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "a", 0x0, "t"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@LKKBJECC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAs@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, " ", 0x0, "f", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, " "
	DCB	0x0, "s", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, ";"
	DCB	0x0, " ", 0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "s", 0x0, "k", 0x0, "i", 0x0, "p", 0x0, "p"
	DCB	0x0, "e", 0x0, "d", 0x0, "!", 0x0, " ", 0x0, "(", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0, " ", 0x0, "s"
	DCB	0x0, "u", 0x0, "p", 0x0, "p", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00d30			 AREA	 |.text|, CODE, ARM

  00d30		 |WriteBufferToFlash| PROC

; 372  : {

  00d30		 |$LN18@WriteBuffe|
  00d30	e1a0c00d	 mov         r12, sp
  00d34	e92d0001	 stmdb       sp!, {r0}
  00d38	e92d5000	 stmdb       sp!, {r12, lr}
  00d3c	e24dd034	 sub         sp, sp, #0x34
  00d40		 |$M39896|

; 373  :     BOOL rc;
; 374  :     OAL_PERREG_REGION *pRegion;
; 375  :     UINT32 pos, size;
; 376  :     UINT8 *pBuffer;
; 377  :     static BOOL fWriteFailure = FALSE;
; 378  : 
; 379  :     // Sanity check: do we have a valid region to write to?
; 380  :     if (g_perRegState.regionIdx >= g_perRegState.regions) {

  00d40	e59f32dc	 ldr         r3, [pc, #0x2DC]
  00d44	e593206c	 ldr         r2, [r3, #0x6C]
  00d48	e59f32d4	 ldr         r3, [pc, #0x2D4]
  00d4c	e5933000	 ldr         r3, [r3]
  00d50	e1520003	 cmp         r2, r3
  00d54	3a000014	 bcc         |$LN7@WriteBuffe|

; 381  :         if (!fWriteFailure)

  00d58	e59f32cc	 ldr         r3, [pc, #0x2CC]
  00d5c	e5933000	 ldr         r3, [r3]
  00d60	e3530000	 cmp         r3, #0
  00d64	1a00000d	 bne         |$LN6@WriteBuffe|

; 382  :         {
; 383  :             OALMSG(OAL_ERROR, (
; 384  :                 L"ERROR: OALPerRegWrite: no free space; write skipped! (additional errors suppressed)\r\n"
; 385  :             ));

  00d68	e59f32b0	 ldr         r3, [pc, #0x2B0]
  00d6c	e5933440	 ldr         r3, [r3, #0x440]
  00d70	e3130001	 tst         r3, #1
  00d74	0a000004	 beq         |$LN10@WriteBuffe|
  00d78	e59f02b0	 ldr         r0, [pc, #0x2B0]
  00d7c	eb000000	 bl          NKDbgPrintfW
  00d80	e3a03001	 mov         r3, #1
  00d84	e58d3018	 str         r3, [sp, #0x18]
  00d88	ea000001	 b           |$LN11@WriteBuffe|
  00d8c		 |$LN10@WriteBuffe|
  00d8c	e3a03000	 mov         r3, #0
  00d90	e58d3018	 str         r3, [sp, #0x18]
  00d94		 |$LN11@WriteBuffe|

; 386  :             fWriteFailure = TRUE;

  00d94	e59f2290	 ldr         r2, [pc, #0x290]
  00d98	e3a03001	 mov         r3, #1
  00d9c	e5823000	 str         r3, [r2]
  00da0		 |$LN6@WriteBuffe|

; 387  :         }
; 388  : 
; 389  :         rc = FALSE;

  00da0	e3a03000	 mov         r3, #0
  00da4	e58d3004	 str         r3, [sp, #4]

; 390  :         goto cleanUp;

  00da8	ea000095	 b           |$cleanUp$39662|
  00dac		 |$LN7@WriteBuffe|

; 391  :     }
; 392  : 
; 393  : 
; 394  :     // Get write position    
; 395  :     pRegion = &g_perRegState.region[g_perRegState.regionIdx];

  00dac	e59f3270	 ldr         r3, [pc, #0x270]
  00db0	e593106c	 ldr         r1, [r3, #0x6C]
  00db4	e3a0300c	 mov         r3, #0xC
  00db8	e0020391	 mul         r2, r1, r3
  00dbc	e59f3260	 ldr         r3, [pc, #0x260]
  00dc0	e2833004	 add         r3, r3, #4
  00dc4	e0833002	 add         r3, r3, r2
  00dc8	e58d3008	 str         r3, [sp, #8]

; 396  :     pos = pRegion->start + g_perRegState.regionPos;

  00dcc	e59d3008	 ldr         r3, [sp, #8]
  00dd0	e2833004	 add         r3, r3, #4
  00dd4	e5932000	 ldr         r2, [r3]
  00dd8	e59f3244	 ldr         r3, [pc, #0x244]
  00ddc	e5933070	 ldr         r3, [r3, #0x70]
  00de0	e0823003	 add         r3, r2, r3
  00de4	e58d3010	 str         r3, [sp, #0x10]

; 397  :     pBuffer = g_perRegState.buffer;

  00de8	e59f3234	 ldr         r3, [pc, #0x234]
  00dec	e2833074	 add         r3, r3, #0x74
  00df0	e58d3000	 str         r3, [sp]

; 398  :     size = g_perRegState.bufferPos;

  00df4	e59f3228	 ldr         r3, [pc, #0x228]
  00df8	e5933474	 ldr         r3, [r3, #0x474]
  00dfc	e58d300c	 str         r3, [sp, #0xC]

; 399  : 
; 400  :     // Don't write header part until say so...
; 401  :     if (
; 402  :         skipHeader &&
; 403  :         g_perRegState.regionIdx == 0 && 
; 404  :         g_perRegState.regionPos < sizeof(OAL_PERREG_HEADER)
; 405  :     ) {

  00e00	e59d303c	 ldr         r3, [sp, #0x3C]
  00e04	e3530000	 cmp         r3, #0
  00e08	0a000016	 beq         |$LN5@WriteBuffe|
  00e0c	e59f3210	 ldr         r3, [pc, #0x210]
  00e10	e593306c	 ldr         r3, [r3, #0x6C]
  00e14	e3530000	 cmp         r3, #0
  00e18	1a000012	 bne         |$LN5@WriteBuffe|
  00e1c	e59f3200	 ldr         r3, [pc, #0x200]
  00e20	e5933070	 ldr         r3, [r3, #0x70]
  00e24	e353000c	 cmp         r3, #0xC
  00e28	2a00000e	 bcs         |$LN5@WriteBuffe|

; 406  :         pos += sizeof(OAL_PERREG_HEADER) - g_perRegState.regionPos;

  00e2c	e59f31f0	 ldr         r3, [pc, #0x1F0]
  00e30	e5933070	 ldr         r3, [r3, #0x70]
  00e34	e263200c	 rsb         r2, r3, #0xC
  00e38	e59d3010	 ldr         r3, [sp, #0x10]
  00e3c	e0833002	 add         r3, r3, r2
  00e40	e58d3010	 str         r3, [sp, #0x10]

; 407  :         pBuffer += sizeof(OAL_PERREG_HEADER) - g_perRegState.regionPos;

  00e44	e59f31d8	 ldr         r3, [pc, #0x1D8]
  00e48	e5933070	 ldr         r3, [r3, #0x70]
  00e4c	e263200c	 rsb         r2, r3, #0xC
  00e50	e59d3000	 ldr         r3, [sp]
  00e54	e0833002	 add         r3, r3, r2
  00e58	e58d3000	 str         r3, [sp]

; 408  :         size -= sizeof(OAL_PERREG_HEADER);

  00e5c	e59d300c	 ldr         r3, [sp, #0xC]
  00e60	e243300c	 sub         r3, r3, #0xC
  00e64	e58d300c	 str         r3, [sp, #0xC]
  00e68		 |$LN5@WriteBuffe|

; 409  :     }
; 410  : 
; 411  :     // Round size to 4 bytes (32 bits)
; 412  :     if ((size & 0x03) != 0) {

  00e68	e59d300c	 ldr         r3, [sp, #0xC]
  00e6c	e3130003	 tst         r3, #3
  00e70	0a00000f	 beq         |$LN4@WriteBuffe|

; 413  :         memset(pBuffer + (size & ~0x03), 0xFF, 4 - (size & 0x03));

  00e74	e59d300c	 ldr         r3, [sp, #0xC]
  00e78	e2033003	 and         r3, r3, #3
  00e7c	e2632004	 rsb         r2, r3, #4
  00e80	e3a010ff	 mov         r1, #0xFF
  00e84	e59d000c	 ldr         r0, [sp, #0xC]
  00e88	e3e03003	 mvn         r3, #3
  00e8c	e0000003	 and         r0, r0, r3
  00e90	e59d3000	 ldr         r3, [sp]
  00e94	e0830000	 add         r0, r3, r0
  00e98	eb000000	 bl          memset

; 414  :         size += 4 - (size & 0x03);

  00e9c	e59d300c	 ldr         r3, [sp, #0xC]
  00ea0	e2033003	 and         r3, r3, #3
  00ea4	e2632004	 rsb         r2, r3, #4
  00ea8	e59d300c	 ldr         r3, [sp, #0xC]
  00eac	e0833002	 add         r3, r3, r2
  00eb0	e58d300c	 str         r3, [sp, #0xC]
  00eb4		 |$LN4@WriteBuffe|

; 415  :     }
; 416  : 
; 417  :     // Add buffer check sum
; 418  :     g_perRegState.checkSum += CheckSum(pBuffer, size);

  00eb4	e59d100c	 ldr         r1, [sp, #0xC]
  00eb8	e59d0000	 ldr         r0, [sp]
  00ebc	eb000000	 bl          CheckSum
  00ec0	e58d001c	 str         r0, [sp, #0x1C]
  00ec4	e59f3158	 ldr         r3, [pc, #0x158]
  00ec8	e5932068	 ldr         r2, [r3, #0x68]
  00ecc	e59d301c	 ldr         r3, [sp, #0x1C]
  00ed0	e0822003	 add         r2, r2, r3
  00ed4	e59f3148	 ldr         r3, [pc, #0x148]
  00ed8	e5832068	 str         r2, [r3, #0x68]

; 419  : 
; 420  :     // Write buffer to flash
; 421  :     if (!(rc = OALFlashWrite(
; 422  :         OALPAtoUA(pRegion->base), OALPAtoUA(pos), size, pBuffer
; 423  :     ))) OALMSG(OAL_ERROR, (

  00edc	e3a01000	 mov         r1, #0
  00ee0	e59d0010	 ldr         r0, [sp, #0x10]
  00ee4	eb000000	 bl          OALPAtoVA
  00ee8	e58d0020	 str         r0, [sp, #0x20]
  00eec	e3a01000	 mov         r1, #0
  00ef0	e59d3008	 ldr         r3, [sp, #8]
  00ef4	e5930000	 ldr         r0, [r3]
  00ef8	eb000000	 bl          OALPAtoVA
  00efc	e58d0024	 str         r0, [sp, #0x24]
  00f00	e59d3000	 ldr         r3, [sp]
  00f04	e59d200c	 ldr         r2, [sp, #0xC]
  00f08	e59d1020	 ldr         r1, [sp, #0x20]
  00f0c	e59d0024	 ldr         r0, [sp, #0x24]
  00f10	eb000000	 bl          OALFlashWrite
  00f14	e58d0028	 str         r0, [sp, #0x28]
  00f18	e59d3028	 ldr         r3, [sp, #0x28]
  00f1c	e58d3004	 str         r3, [sp, #4]
  00f20	e59d3004	 ldr         r3, [sp, #4]
  00f24	e3530000	 cmp         r3, #0
  00f28	1a00000b	 bne         |$LN3@WriteBuffe|

; 424  :         L"ERROR: OALPerRegWrite: Flash write at 0x%08x failed\r\n", pos
; 425  :     ));

  00f2c	e59f30ec	 ldr         r3, [pc, #0xEC]
  00f30	e5933440	 ldr         r3, [r3, #0x440]
  00f34	e3130001	 tst         r3, #1
  00f38	0a000005	 beq         |$LN12@WriteBuffe|
  00f3c	e59d1010	 ldr         r1, [sp, #0x10]
  00f40	e59f00e0	 ldr         r0, [pc, #0xE0]
  00f44	eb000000	 bl          NKDbgPrintfW
  00f48	e3a03001	 mov         r3, #1
  00f4c	e58d302c	 str         r3, [sp, #0x2C]
  00f50	ea000001	 b           |$LN13@WriteBuffe|
  00f54		 |$LN12@WriteBuffe|
  00f54	e3a03000	 mov         r3, #0
  00f58	e58d302c	 str         r3, [sp, #0x2C]
  00f5c		 |$LN13@WriteBuffe|
  00f5c		 |$LN3@WriteBuffe|

; 426  : 
; 427  :     // Move write pointer
; 428  :     g_perRegState.regionPos += g_perRegState.bufferPos;

  00f5c	e59f30c0	 ldr         r3, [pc, #0xC0]
  00f60	e5932070	 ldr         r2, [r3, #0x70]
  00f64	e59f30b8	 ldr         r3, [pc, #0xB8]
  00f68	e5933474	 ldr         r3, [r3, #0x474]
  00f6c	e0822003	 add         r2, r2, r3
  00f70	e59f30ac	 ldr         r3, [pc, #0xAC]
  00f74	e5832070	 str         r2, [r3, #0x70]

; 429  :     g_perRegState.bufferPos = 0;

  00f78	e59f20a4	 ldr         r2, [pc, #0xA4]
  00f7c	e3a03000	 mov         r3, #0
  00f80	e5823474	 str         r3, [r2, #0x474]

; 430  :     if (g_perRegState.regionPos >= pRegion->size) {

  00f84	e59d3008	 ldr         r3, [sp, #8]
  00f88	e2831008	 add         r1, r3, #8
  00f8c	e59f3090	 ldr         r3, [pc, #0x90]
  00f90	e5932070	 ldr         r2, [r3, #0x70]
  00f94	e5913000	 ldr         r3, [r1]
  00f98	e1520003	 cmp         r2, r3
  00f9c	3a000018	 bcc         |$LN2@WriteBuffe|

; 431  :         g_perRegState.regionPos = 0;

  00fa0	e59f207c	 ldr         r2, [pc, #0x7C]
  00fa4	e3a03000	 mov         r3, #0
  00fa8	e5823070	 str         r3, [r2, #0x70]

; 432  :         g_perRegState.regionIdx++;

  00fac	e59f3070	 ldr         r3, [pc, #0x70]
  00fb0	e593306c	 ldr         r3, [r3, #0x6C]
  00fb4	e2832001	 add         r2, r3, #1
  00fb8	e59f3064	 ldr         r3, [pc, #0x64]
  00fbc	e583206c	 str         r2, [r3, #0x6C]

; 433  : 
; 434  :         if (g_perRegState.regionIdx >= g_perRegState.regions) {

  00fc0	e59f305c	 ldr         r3, [pc, #0x5C]
  00fc4	e593206c	 ldr         r2, [r3, #0x6C]
  00fc8	e59f3054	 ldr         r3, [pc, #0x54]
  00fcc	e5933000	 ldr         r3, [r3]
  00fd0	e1520003	 cmp         r2, r3
  00fd4	3a00000a	 bcc         |$LN1@WriteBuffe|

; 435  :             OALMSG(OAL_ERROR, (
; 436  :                 L"ERROR: OALPerRegWrite: out of space; set aside larger backing store for persistent registry!\r\n"
; 437  :             ));

  00fd8	e59f3040	 ldr         r3, [pc, #0x40]
  00fdc	e5933440	 ldr         r3, [r3, #0x440]
  00fe0	e3130001	 tst         r3, #1
  00fe4	0a000004	 beq         |$LN14@WriteBuffe|
  00fe8	e59f002c	 ldr         r0, [pc, #0x2C]
  00fec	eb000000	 bl          NKDbgPrintfW
  00ff0	e3a03001	 mov         r3, #1
  00ff4	e58d3030	 str         r3, [sp, #0x30]
  00ff8	ea000001	 b           |$LN15@WriteBuffe|
  00ffc		 |$LN14@WriteBuffe|
  00ffc	e3a03000	 mov         r3, #0
  01000	e58d3030	 str         r3, [sp, #0x30]
  01004		 |$LN15@WriteBuffe|
  01004		 |$LN1@WriteBuffe|
  01004		 |$LN2@WriteBuffe|
  01004		 |$cleanUp$39662|

; 438  :         }
; 439  :     }
; 440  : 
; 441  : cleanUp:
; 442  :     return rc;

  01004	e59d3004	 ldr         r3, [sp, #4]
  01008	e58d3014	 str         r3, [sp, #0x14]

; 443  : }

  0100c	e59d0014	 ldr         r0, [sp, #0x14]
  01010	e28dd034	 add         sp, sp, #0x34
  01014	e89d6000	 ldmia       sp, {sp, lr}
  01018	e12fff1e	 bx          lr
  0101c		 |$LN19@WriteBuffe|
  0101c		 |$LN20@WriteBuffe|
  0101c	00000000	 DCD         |??_C@_1LO@LLODBKPO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAs?$AAp@|
  01020		 |$LN21@WriteBuffe|
  01020	00000000	 DCD         |dpCurSettings|
  01024		 |$LN22@WriteBuffe|
  01024	00000000	 DCD         |g_perRegState|
  01028		 |$LN23@WriteBuffe|
  01028	00000000	 DCD         |??_C@_1GM@MLPDAKMN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAw?$AAr?$AAi@|
  0102c		 |$LN24@WriteBuffe|
  0102c	00000000	 DCD         |?fWriteFailure@?1??WriteBufferToFlash@@9@9|
  01030		 |$LN25@WriteBuffe|
  01030	00000000	 DCD         |??_C@_1KM@LKKBJECC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAR?$AAe?$AAg?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?5?$AAs@|
  01034		 |$M39897|

			 ENDP  ; |WriteBufferToFlash|


  00050			 AREA	 |.pdata|, PDATA
|$T39912| DCD	|$LN7@FlushBuffe|
	DCD	0x40001a04
; Function compile flags: /Odtp

  01034			 AREA	 |.text|, CODE, ARM

  01034		 |FlushBuffer| PROC

; 565  : {

  01034		 |$LN7@FlushBuffe|
  01034	e1a0c00d	 mov         r12, sp
  01038	e92d0001	 stmdb       sp!, {r0}
  0103c	e92d5000	 stmdb       sp!, {r12, lr}
  01040	e24dd00c	 sub         sp, sp, #0xC
  01044		 |$M39909|

; 566  :     BOOL rc = FALSE;

  01044	e3a03000	 mov         r3, #0
  01048	e58d3000	 str         r3, [sp]

; 567  : 
; 568  :     // If there are data in buffer write it to flash
; 569  :     if (g_perRegState.bufferPos > 0) {

  0104c	e59f3044	 ldr         r3, [pc, #0x44]
  01050	e5933474	 ldr         r3, [r3, #0x474]
  01054	e3530000	 cmp         r3, #0
  01058	9a000006	 bls         |$LN2@FlushBuffe|

; 570  :         if (!WriteBufferToFlash(skipHeader)) goto cleanUp;

  0105c	e59d0014	 ldr         r0, [sp, #0x14]
  01060	eb000000	 bl          WriteBufferToFlash
  01064	e58d0008	 str         r0, [sp, #8]
  01068	e59d3008	 ldr         r3, [sp, #8]
  0106c	e3530000	 cmp         r3, #0
  01070	1a000000	 bne         |$LN1@FlushBuffe|
  01074	ea000001	 b           |$cleanUp$39727|
  01078		 |$LN1@FlushBuffe|
  01078		 |$LN2@FlushBuffe|

; 571  :     }
; 572  : 
; 573  :     rc = TRUE;

  01078	e3a03001	 mov         r3, #1
  0107c	e58d3000	 str         r3, [sp]
  01080		 |$cleanUp$39727|

; 574  : 
; 575  : cleanUp:
; 576  :     return rc;

  01080	e59d3000	 ldr         r3, [sp]
  01084	e58d3004	 str         r3, [sp, #4]

; 577  : }

  01088	e59d0004	 ldr         r0, [sp, #4]
  0108c	e28dd00c	 add         sp, sp, #0xC
  01090	e89d6000	 ldmia       sp, {sp, lr}
  01094	e12fff1e	 bx          lr
  01098		 |$LN8@FlushBuffe|
  01098		 |$LN9@FlushBuffe|
  01098	00000000	 DCD         |g_perRegState|
  0109c		 |$M39910|

			 ENDP  ; |FlushBuffer|

	END
