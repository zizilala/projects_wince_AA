; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\PCI\find.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|OALPCIFindNextId|
	EXPORT	|??_C@_1FC@PNDMEFLG@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAF?$AAi?$AAn?$AAd?$AAN?$AAe?$AAx?$AAt?$AAI?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAl?$AAo?$AAc?$AA?5?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@PHLOJJNK@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAF?$AAi?$AAn?$AAd?$AAN?$AAe?$AAx?$AAt?$AAI?$AAd?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	IMPORT	|OALPCIGetSubBusNum|
	IMPORT	|OALPCIGetHeaderType|
	IMPORT	|OALPCIGetId|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
; File c:\wince600\platform\common\src\common\pci\find.c

  00000			 AREA	 |.pdata|, PDATA
|$T40332| DCD	|$LN43@OALPCIFind|
	DCD	0x40007302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@PNDMEFLG@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAF?$AAi?$AAn?$AAd?$AAN?$AAe?$AAx?$AAt?$AAI?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAl?$AAo?$AAc?$AA?5?$AA?$DN@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "C", 0x0, "I"
	DCB	0x0, "F", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "N", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, "I", 0x0, "d", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@PHLOJJNK@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAF?$AAi?$AAn?$AAd?$AAN?$AAe?$AAx?$AAt?$AAI?$AAd?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "C", 0x0, "I"
	DCB	0x0, "F", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "N", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, "I", 0x0, "d", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPCIFindNextId| PROC

; 36   : ) {

  00000		 |$LN43@OALPCIFind|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M40329|
  00008	e1a04002	 mov         r4, r2
  0000c	e1a02001	 mov         r2, r1
  00010	e58d2004	 str         r2, [sp, #4]
  00014	e1a08000	 mov         r8, r0

; 37   :     BOOL rc;
; 38   :     OAL_PCI_LOCATION pciLoc;
; 39   :     UINT32 id;
; 40   :     UINT8 header, subBus, maxBus;
; 41   : 
; 42   :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 43   :         L"+OALPCIFindNextId(%d, 0x%08x, 0x%08x)\r\n", busId, deviceId, *pPciLoc
; 44   :     ));

  00018	e59fb1a8	 ldr         r11, [pc, #0x1A8]
  0001c	e59b3440	 ldr         r3, [r11, #0x440]
  00020	e3130c01	 tst         r3, #1, 24
  00024	13130004	 tstne       r3, #4
  00028	15943000	 ldrne       r3, [r4]
  0002c	159f0190	 ldrne       r0, [pc, #0x190]
  00030	11a01008	 movne       r1, r8
  00034	1b000000	 blne        NKDbgPrintfW

; 45   : 
; 46   :     // First find number of buses
; 47   :     maxBus = 0;
; 48   :     pciLoc.logicalLoc = 0;

  00038	e3a03000	 mov         r3, #0
  0003c	e58d3000	 str         r3, [sp]

; 49   :     while (pciLoc.dev < PCI_MAX_DEVICES) {

  00040	e3a03cff	 mov         r3, #0xFF, 24
  00044	e383a0ff	 orr         r10, r3, #0xFF
  00048	e3a07000	 mov         r7, #0
  0004c	e3a09000	 mov         r9, #0
  00050		 |$LL20@OALPCIFind|

; 50   :         pciLoc.fnc = 0;

  00050	e3a05000	 mov         r5, #0
  00054	e5cd5000	 strb        r5, [sp]
  00058		 |$LL18@OALPCIFind|

; 51   :         while (pciLoc.fnc < PCI_MAX_FUNCTION) {
; 52   :             // Get device id
; 53   :             id = OALPCIGetId(busId, pciLoc);

  00058	e59d1000	 ldr         r1, [sp]
  0005c	e1a00008	 mov         r0, r8
  00060	eb000000	 bl          OALPCIGetId

; 54   :             // If it is invalid (-1) let try next device
; 55   :             if (LOWORD(id) == PCI_INVALID_VENDORID ||
; 56   :                 HIWORD(id) == PCI_INVALID_DEVICEID
; 57   :             ) break;

  00064	e1a03800	 mov         r3, r0, lsl #16
  00068	e15a0823	 cmp         r10, r3, lsr #16
  0006c	0a00001b	 beq         |$LN32@OALPCIFind|
  00070	e15a0820	 cmp         r10, r0, lsr #16
  00074	0a000019	 beq         |$LN32@OALPCIFind|

; 58   :             // Read header
; 59   :             header = OALPCIGetHeaderType(busId, pciLoc);

  00078	e59d1000	 ldr         r1, [sp]
  0007c	e1a00008	 mov         r0, r8
  00080	eb000000	 bl          OALPCIGetHeaderType
  00084	e1a06000	 mov         r6, r0

; 60   :             if (header == 0xFF) break;

  00088	e35600ff	 cmp         r6, #0xFF
  0008c	0a000013	 beq         |$LN32@OALPCIFind|

; 61   :             // We are on bus 0 and device is bridge read subordinate
; 62   :             // bus number -- this give us maximal bus number on PCI bus
; 63   :             switch (header & ~PCI_MULTIFUNCTION) {

  00090	e3c63080	 bic         r3, r6, #0x80
  00094	e2433001	 sub         r3, r3, #1
  00098	e3530001	 cmp         r3, #1
  0009c	8a000006	 bhi         |$LN10@OALPCIFind|

; 64   :             case PCI_BRIDGE_TYPE:
; 65   :             case PCI_CARDBUS_TYPE:
; 66   :                 subBus = OALPCIGetSubBusNum(busId, pciLoc);

  000a0	e59d1000	 ldr         r1, [sp]
  000a4	e1a00008	 mov         r0, r8
  000a8	eb000000	 bl          OALPCIGetSubBusNum

; 67   :                 if (subBus != 0xFF && subBus > maxBus) maxBus = subBus;

  000ac	e35000ff	 cmp         r0, #0xFF
  000b0	0a000001	 beq         |$LN10@OALPCIFind|
  000b4	e1500007	 cmp         r0, r7
  000b8	81a07000	 movhi       r7, r0
  000bc		 |$LN10@OALPCIFind|

; 68   :                 break;
; 69   :             }                        
; 70   :             // Break loop if device isn't multifunction
; 71   :             if (pciLoc.fnc == 0 && (header & PCI_MULTIFUNCTION) == 0) break;

  000bc	e3550000	 cmp         r5, #0
  000c0	1a000001	 bne         |$LN9@OALPCIFind|
  000c4	e3160080	 tst         r6, #0x80
  000c8	0a000004	 beq         |$LN32@OALPCIFind|
  000cc		 |$LN9@OALPCIFind|

; 72   :             // Move to next function
; 73   :             pciLoc.fnc++;

  000cc	e2853001	 add         r3, r5, #1
  000d0	e20350ff	 and         r5, r3, #0xFF
  000d4	e5cd5000	 strb        r5, [sp]
  000d8	e3550008	 cmp         r5, #8
  000dc	3affffdd	 bcc         |$LL18@OALPCIFind|
  000e0		 |$LN32@OALPCIFind|

; 74   :         }
; 75   :         pciLoc.dev++;

  000e0	e2893001	 add         r3, r9, #1
  000e4	e20390ff	 and         r9, r3, #0xFF
  000e8	e5cd9001	 strb        r9, [sp, #1]
  000ec	e3590020	 cmp         r9, #0x20
  000f0	3affffd6	 bcc         |$LL20@OALPCIFind|
  000f4	e59d5004	 ldr         r5, [sp, #4]
  000f8	e3a06000	 mov         r6, #0
  000fc		 |$LL8@OALPCIFind|

; 76   :     }
; 77   : 
; 78   :     // Now try to find device
; 79   :     do {
; 80   : 
; 81   :         // Read header on actual device
; 82   :         header = OALPCIGetHeaderType(busId, pciLoc);

  000fc	e59d1000	 ldr         r1, [sp]
  00100	e1a00008	 mov         r0, r8
  00104	eb000000	 bl          OALPCIGetHeaderType

; 83   : 
; 84   :         // Move to next PCI device but break if end of PCI bus was reached
; 85   :         if (pPciLoc->fnc < PCI_MAX_FUNCTION && (
; 86   :             pPciLoc->fnc > 0 ||
; 87   :             (header != 0xFF && (header & PCI_MULTIFUNCTION) != 0)
; 88   :         )) {

  00108	e5d43000	 ldrb        r3, [r4]
  0010c	e3530008	 cmp         r3, #8
  00110	2a000008	 bcs         |$LN5@OALPCIFind|
  00114	e3530000	 cmp         r3, #0
  00118	1a000003	 bne         |$LN4@OALPCIFind|
  0011c	e35000ff	 cmp         r0, #0xFF
  00120	0a000004	 beq         |$LN5@OALPCIFind|
  00124	e3100080	 tst         r0, #0x80
  00128	0a000002	 beq         |$LN5@OALPCIFind|
  0012c		 |$LN4@OALPCIFind|

; 89   :             pPciLoc->fnc++;

  0012c	e2833001	 add         r3, r3, #1
  00130	e5c43000	 strb        r3, [r4]

; 90   :         } else {

  00134	ea00000d	 b           |$LN7@OALPCIFind|
  00138		 |$LN5@OALPCIFind|

; 91   :             pPciLoc->fnc = 0;
; 92   :             if (++pPciLoc->dev >= PCI_MAX_DEVICES) {

  00138	e5d43001	 ldrb        r3, [r4, #1]
  0013c	e5c46000	 strb        r6, [r4]
  00140	e2833001	 add         r3, r3, #1
  00144	e20330ff	 and         r3, r3, #0xFF
  00148	e5c43001	 strb        r3, [r4, #1]
  0014c	e3530020	 cmp         r3, #0x20
  00150	3a000006	 bcc         |$LN7@OALPCIFind|

; 93   :                 pPciLoc->dev = 0;
; 94   :                 if (++pPciLoc->bus > maxBus) break;

  00154	e5d43002	 ldrb        r3, [r4, #2]
  00158	e5c46001	 strb        r6, [r4, #1]
  0015c	e2833001	 add         r3, r3, #1
  00160	e20330ff	 and         r3, r3, #0xFF
  00164	e5c43002	 strb        r3, [r4, #2]
  00168	e1530007	 cmp         r3, r7
  0016c	8a000004	 bhi         |$LN6@OALPCIFind|
  00170		 |$LN7@OALPCIFind|

; 95   :             }
; 96   :         }        
; 97   : 
; 98   :     } while (OALPCIGetId(busId, *pPciLoc) != deviceId);        

  00170	e5941000	 ldr         r1, [r4]
  00174	e1a00008	 mov         r0, r8
  00178	eb000000	 bl          OALPCIGetId
  0017c	e1500005	 cmp         r0, r5
  00180	1affffdd	 bne         |$LL8@OALPCIFind|
  00184		 |$LN6@OALPCIFind|

; 99   : 
; 100  :     // Find result    
; 101  :     rc = (pPciLoc->bus <= maxBus);

  00184	e5d43002	 ldrb        r3, [r4, #2]
  00188	e1530007	 cmp         r3, r7

; 102  :     
; 103  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 104  :         L"-OALPCIFindNextId(rc = %d, loc = %08x)\r\n", rc, *pPciLoc
; 105  :     ));

  0018c	e59b3440	 ldr         r3, [r11, #0x440]
  00190	93a05001	 movls       r5, #1
  00194	83a05000	 movhi       r5, #0
  00198	e3130c01	 tst         r3, #1, 24
  0019c	13130004	 tstne       r3, #4
  001a0	15942000	 ldrne       r2, [r4]
  001a4	159f0014	 ldrne       r0, [pc, #0x14]
  001a8	11a01005	 movne       r1, r5
  001ac	1b000000	 blne        NKDbgPrintfW

; 106  :     return rc;
; 107  : }

  001b0	e1a00005	 mov         r0, r5
  001b4	e28dd008	 add         sp, sp, #8
  001b8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001bc	e12fff1e	 bx          lr
  001c0		 |$LN44@OALPCIFind|
  001c0		 |$LN45@OALPCIFind|
  001c0	00000000	 DCD         |??_C@_1FC@PNDMEFLG@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAF?$AAi?$AAn?$AAd?$AAN?$AAe?$AAx?$AAt?$AAI?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAl?$AAo?$AAc?$AA?5?$AA?$DN@|
  001c4		 |$LN46@OALPCIFind|
  001c4	00000000	 DCD         |??_C@_1FA@PHLOJJNK@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAF?$AAi?$AAn?$AAd?$AAN?$AAe?$AAx?$AAt?$AAI?$AAd?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx@|
  001c8		 |$LN47@OALPCIFind|
  001c8	00000000	 DCD         |dpCurSettings|
  001cc		 |$M40330|

			 ENDP  ; |OALPCIFindNextId|

	END
