; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\PCI\config.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1GI@NMPJOLPG@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAu?$AAs?$AA?$CI?$AAs?$AAu?$AAb?$AAB?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAm?$AAe?$AAm?$AA?5?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@HHBKNHON@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AAV?$AAe?$AAn?$AAd?$AAo?$AAr?$AAI?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@IMKAPJPG@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAu?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| [ DATA ] ; `string'
	IMPORT	|OALPCIGetId|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
; File c:\wince600\platform\common\src\common\pci\config.c

  00000			 AREA	 |.pdata|, PDATA
|$T40599| DCD	|$LN18@PCIConfigB|
	DCD	0x40005302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@NMPJOLPG@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAu?$AAs?$AA?$CI?$AAs?$AAu?$AAb?$AAB?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAm?$AAe?$AAm?$AA?5?$AA?$DN@| DCB "-"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "B", 0x0, "u", 0x0, "s"
	DCB	0x0, "(", 0x0, "s", 0x0, "u", 0x0, "b", 0x0, "B", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, ",", 0x0, " ", 0x0, "i", 0x0, "o", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@HHBKNHON@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AAV?$AAe?$AAn?$AAd?$AAo?$AAr?$AAI?$AAd@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "B"
	DCB	0x0, "u", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "V"
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "o", 0x0, "r", 0x0, "I"
	DCB	0x0, "d", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, "I", 0x0, "d", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@IMKAPJPG@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAu?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| DCB "+"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "B", 0x0, "u", 0x0, "s"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PCIConfigBus| PROC

; 104  : ) {

  00000		 |$LN18@PCIConfigB|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M40596|
  00008	e1a06003	 mov         r6, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1a05001	 mov         r5, r1
  00014	e1a0a000	 mov         r10, r0

; 105  :     OAL_PCI_LOCATION pciLoc;
; 106  :     UINT32 id;
; 107  : 
; 108  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 109  :         L"+PCIConfigBus(%d, %d, %d, 0x%08x, 0x%08x, %d, 0x%08x)\r\n",
; 110  :         busId, bus, *pSubBus, *pMem, *pIo, count, aPciLoc
; 111  :     ));

  00018	e59f9128	 ldr         r9, [pc, #0x128]
  0001c	e59db044	 ldr         r11, [sp, #0x44]
  00020	e59d803c	 ldr         r8, [sp, #0x3C]
  00024	e599e440	 ldr         lr, [r9, #0x440]
  00028	e31e0c01	 tst         lr, #1, 24
  0002c	0a00000d	 beq         |$LN8@PCIConfigB|
  00030	e31e0004	 tst         lr, #4
  00034	0a00000b	 beq         |$LN8@PCIConfigB|
  00038	e598e000	 ldr         lr, [r8]
  0003c	e5964000	 ldr         r4, [r6]
  00040	e5973000	 ldr         r3, [r7]
  00044	e58de004	 str         lr, [sp, #4]
  00048	e59de040	 ldr         lr, [sp, #0x40]
  0004c	e59f00f0	 ldr         r0, [pc, #0xF0]
  00050	e1a02005	 mov         r2, r5
  00054	e1a0100a	 mov         r1, r10
  00058	e58de008	 str         lr, [sp, #8]
  0005c	e58d4000	 str         r4, [sp]
  00060	e58db00c	 str         r11, [sp, #0xC]
  00064	eb000000	 bl          NKDbgPrintfW
  00068		 |$LN8@PCIConfigB|

; 112  : 
; 113  :     // Loop over all possible devices
; 114  :     pciLoc.bus = bus;
; 115  :     for (pciLoc.dev = 0; pciLoc.dev < PCI_MAX_DEVICES; pciLoc.dev++) {

  00068	e1a03005	 mov         r3, r5
  0006c	e5cd3010	 strb        r3, [sp, #0x10]
  00070	e5cd3016	 strb        r3, [sp, #0x16]
  00074	e3a03cff	 mov         r3, #0xFF, 24
  00078	e3a02000	 mov         r2, #0
  0007c	e38350ff	 orr         r5, r3, #0xFF
  00080	e3a03000	 mov         r3, #0
  00084	e5cd2015	 strb        r2, [sp, #0x15]
  00088	e3a04000	 mov         r4, #0
  0008c		 |$LL5@PCIConfigB|

; 116  : 
; 117  :         // Try read vendor id, if it fails there isn't device at position
; 118  :         pciLoc.fnc = 0;

  0008c	e5cd3014	 strb        r3, [sp, #0x14]

; 119  :         id = OALPCIGetId(busId, pciLoc);

  00090	e59d1014	 ldr         r1, [sp, #0x14]
  00094	e1a0000a	 mov         r0, r10
  00098	eb000000	 bl          OALPCIGetId

; 120  :         if (
; 121  :             LOWORD(id) == PCI_INVALID_VENDORID ||
; 122  :             HIWORD(id) == PCI_INVALID_DEVICEID
; 123  :         ) continue;

  0009c	e1a03800	 mov         r3, r0, lsl #16
  000a0	e1a03823	 mov         r3, r3, lsr #16
  000a4	e1530005	 cmp         r3, r5
  000a8	0a000012	 beq         |$LN4@PCIConfigB|
  000ac	e1a0e820	 mov         lr, r0, lsr #16
  000b0	e15e0005	 cmp         lr, r5
  000b4	0a00000f	 beq         |$LN4@PCIConfigB|

; 124  : 
; 125  :         OALMSG(OAL_INFO, (
; 126  :             L"INFO: Bus %d Device %d: VendorId 0x%x DeviceId 0x%x\r\n",
; 127  :             pciLoc.bus, pciLoc.dev, LOWORD(id), HIWORD(id)
; 128  :         ));

  000b8	e5992440	 ldr         r2, [r9, #0x440]
  000bc	e3120008	 tst         r2, #8
  000c0	15dd1010	 ldrneb      r1, [sp, #0x10]
  000c4	159f0074	 ldrne       r0, [pc, #0x74]
  000c8	11a02004	 movne       r2, r4
  000cc	158de000	 strne       lr, [sp]
  000d0	1b000000	 blne        NKDbgPrintfW

; 129  :         
; 130  :         // Scan this device
; 131  :         PCIScanLocation(busId, pciLoc, pSubBus, pMem, pIo, count, aPciLoc);         

  000d4	e59de040	 ldr         lr, [sp, #0x40]
  000d8	e59d1014	 ldr         r1, [sp, #0x14]
  000dc	e1a03006	 mov         r3, r6
  000e0	e1a02007	 mov         r2, r7
  000e4	e1a0000a	 mov         r0, r10
  000e8	e58de004	 str         lr, [sp, #4]
  000ec	e58db008	 str         r11, [sp, #8]
  000f0	e58d8000	 str         r8, [sp]
  000f4	eb000000	 bl          PCIScanLocation
  000f8		 |$LN4@PCIConfigB|
  000f8	e2843001	 add         r3, r4, #1
  000fc	e20340ff	 and         r4, r3, #0xFF
  00100	e5cd4015	 strb        r4, [sp, #0x15]
  00104	e3540020	 cmp         r4, #0x20
  00108	e3a03000	 mov         r3, #0
  0010c	3affffde	 bcc         |$LL5@PCIConfigB|

; 132  :     }      
; 133  : 
; 134  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 135  :         L"-PCIConfigBus(subBus = %d, mem = 0x%X, io = 0x%X)\r\n", 
; 136  :         *pSubBus, *pMem, *pIo
; 137  :     ));

  00110	e5993440	 ldr         r3, [r9, #0x440]
  00114	e3130c01	 tst         r3, #1, 24
  00118	13130004	 tstne       r3, #4
  0011c	15983000	 ldrne       r3, [r8]
  00120	15962000	 ldrne       r2, [r6]
  00124	15971000	 ldrne       r1, [r7]
  00128	159f000c	 ldrne       r0, [pc, #0xC]
  0012c	1b000000	 blne        NKDbgPrintfW

; 138  : }

  00130	e28dd018	 add         sp, sp, #0x18
  00134	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00138	e12fff1e	 bx          lr
  0013c		 |$LN19@PCIConfigB|
  0013c		 |$LN20@PCIConfigB|
  0013c	00000000	 DCD         |??_C@_1GI@NMPJOLPG@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAu?$AAs?$AA?$CI?$AAs?$AAu?$AAb?$AAB?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAm?$AAe?$AAm?$AA?5?$AA?$DN@|
  00140		 |$LN21@PCIConfigB|
  00140	00000000	 DCD         |??_C@_1GM@HHBKNHON@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AAV?$AAe?$AAn?$AAd?$AAo?$AAr?$AAI?$AAd@|
  00144		 |$LN22@PCIConfigB|
  00144	00000000	 DCD         |??_C@_1HA@IMKAPJPG@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAu?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@|
  00148		 |$LN23@PCIConfigB|
  00148	00000000	 DCD         |dpCurSettings|
  0014c		 |$M40597|

			 ENDP  ; |PCIConfigBus|

	EXPORT	|??_C@_1GM@POGKGJPM@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@HEDILPDD@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAM?$AAe?$AAm?$AA?5?$AAB?$AAA?$AAR?$AA?$FL?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@ENKOGFDH@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AA6?$AA4?$AA?5?$AAb?$AAi?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@JIHPKAJL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AA?5?$AAB?$AAA?$AAR?$AA?$FL?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@MHOBDJJH@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0@| [ DATA ] ; `string'
	IMPORT	|OALPCICfgRead|
	IMPORT	|OALPCICfgWrite|

  00000			 AREA	 |.pdata|, PDATA
|$T40635| DCD	|$LN29@PCIConfigD|
	DCD	0x40009c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@POGKGJPM@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "-"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "(", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "i", 0x0, "o"
	DCB	0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@HEDILPDD@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAM?$AAe?$AAm?$AA?5?$AAB?$AAA?$AAR?$AA?$FL?$AA?$CF@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "P"
	DCB	0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "f"
	DCB	0x0, "i", 0x0, "g", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "e"
	DCB	0x0, "m", 0x0, " ", 0x0, "B", 0x0, "A", 0x0, "R", 0x0, "["
	DCB	0x0, "%", 0x0, "d", 0x0, "]", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, " ", 0x0, "S", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@ENKOGFDH@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AA6?$AA4?$AA?5?$AAb?$AAi?$AAt@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, ":", 0x0, " ", 0x0, "P", 0x0, "C", 0x0, "I", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "6", 0x0, "4", 0x0, " ", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "s", 0x0, "p", 0x0, "a", 0x0, "c"
	DCB	0x0, "e", 0x0, " ", 0x0, "N", 0x0, "O", 0x0, "T", 0x0, " "
	DCB	0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@JIHPKAJL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AA?5?$AAB?$AAA?$AAR?$AA?$FL?$AA?$CF?$AAd@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "P"
	DCB	0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "f"
	DCB	0x0, "i", 0x0, "g", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, " ", 0x0, "B", 0x0, "A", 0x0, "R", 0x0, "[", 0x0, "%"
	DCB	0x0, "d", 0x0, "]", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, " ", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@MHOBDJJH@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0@| DCB "+"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%"
	DCB	0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PCIConfigDevice| PROC

; 219  : ) {

  00000		 |$LN29@PCIConfigD|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5ff0	 stmdb       sp!, {r4 - r12, lr}
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M40632|
  00010	e1a09001	 mov         r9, r1
  00014	e58d9040	 str         r9, [sp, #0x40]
  00018	e1a07003	 mov         r7, r3
  0001c	e1a08002	 mov         r8, r2
  00020	e1a06000	 mov         r6, r0

; 220  :     UINT32 offset, address, size, ix;
; 221  :     UINT16 u16;
; 222  :     UINT8 u8;
; 223  : 
; 224  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 225  :         L"+PCIConfigDevice(%d, %d/%d/%d, 0x%08x, 0x%08x\r\n",
; 226  :         busId, pciLoc.bus, pciLoc.dev, pciLoc.fnc, *pMemBase, *pIoBase
; 227  :     ));

  00024	e59fa240	 ldr         r10, [pc, #0x240]
  00028	e59ae440	 ldr         lr, [r10, #0x440]
  0002c	e31e0c01	 tst         lr, #1, 24
  00030	0a00000c	 beq         |$LN14@PCIConfigD|
  00034	e31e0004	 tst         lr, #4
  00038	0a00000a	 beq         |$LN14@PCIConfigD|
  0003c	e597e000	 ldr         lr, [r7]
  00040	e5984000	 ldr         r4, [r8]
  00044	e5dd5040	 ldrb        r5, [sp, #0x40]
  00048	e5dd3041	 ldrb        r3, [sp, #0x41]
  0004c	e5dd2042	 ldrb        r2, [sp, #0x42]
  00050	e59f0210	 ldr         r0, [pc, #0x210]
  00054	e1a01006	 mov         r1, r6
  00058	e58de008	 str         lr, [sp, #8]
  0005c	e58d4004	 str         r4, [sp, #4]
  00060	e58d5000	 str         r5, [sp]
  00064	eb000000	 bl          NKDbgPrintfW
  00068		 |$LN14@PCIConfigD|

; 228  :     
; 229  :     // Scan all base registers
; 230  :     offset = FIELD_OFFSET(PCI_COMMON_CONFIG, u.type0.BaseAddresses); 
; 231  :     for (ix = 0; ix < PCI_TYPE0_ADDRESSES; ix++) {

  00068	e3a05010	 mov         r5, #0x10
  0006c	e3a04000	 mov         r4, #0
  00070	e28de010	 add         lr, sp, #0x10
  00074	e28db010	 add         r11, sp, #0x10
  00078		 |$LL11@PCIConfigD|

; 232  :         // Get required resource type and size
; 233  :         address = 0xFFFFFFFF;
; 234  :         OALPCICfgWrite(busId, pciLoc, offset, sizeof(address), &address);

  00078	e3e0b000	 mvn         r11, #0
  0007c	e3a03004	 mov         r3, #4
  00080	e1a02005	 mov         r2, r5
  00084	e1a01009	 mov         r1, r9
  00088	e1a00006	 mov         r0, r6
  0008c	e58db010	 str         r11, [sp, #0x10]
  00090	e58de000	 str         lr, [sp]
  00094	eb000000	 bl          OALPCICfgWrite

; 235  :         OALPCICfgRead(busId, pciLoc, offset, sizeof(address), &address);

  00098	e28de010	 add         lr, sp, #0x10
  0009c	e3a03004	 mov         r3, #4
  000a0	e1a02005	 mov         r2, r5
  000a4	e1a01009	 mov         r1, r9
  000a8	e1a00006	 mov         r0, r6
  000ac	e58de000	 str         lr, [sp]
  000b0	eb000000	 bl          OALPCICfgRead

; 236  :         if ((address & 1) != 0) {

  000b4	e59d3010	 ldr         r3, [sp, #0x10]
  000b8	e28db010	 add         r11, sp, #0x10
  000bc	e3130001	 tst         r3, #1
  000c0	0a000013	 beq         |$LN8@PCIConfigD|

; 237  :             // Check size result
; 238  :             size = ~(address & 0xFFFFFFFC) + 1;

  000c4	e3c33003	 bic         r3, r3, #3
  000c8	e1e03003	 mvn         r3, r3
  000cc	e2833001	 add         r3, r3, #1

; 239  :             if ((size & (size - 1)) != 0 || size == 0) continue;

  000d0	e2431001	 sub         r1, r3, #1
  000d4	e1110003	 tst         r1, r3
  000d8	1a000035	 bne         |$LN10@PCIConfigD|
  000dc	e3530000	 cmp         r3, #0
  000e0	0a000033	 beq         |$LN10@PCIConfigD|

; 240  :             // Assign io space
; 241  :             address = (*pIoBase + size - 1) & ~(size - 1);

  000e4	e5972000	 ldr         r2, [r7]
  000e8	e0822003	 add         r2, r2, r3
  000ec	e2422001	 sub         r2, r2, #1
  000f0	e1c22001	 bic         r2, r2, r1

; 242  :             *pIoBase = address + size;

  000f4	e0831002	 add         r1, r3, r2
  000f8	e5871000	 str         r1, [r7]

; 243  :             OALMSG(OAL_INFO, (
; 244  :                 L"INFO: PCIConfigDevice: IO BAR[%d] 0x%x Size 0x%x\r\n", 
; 245  :                 ix, address, size
; 246  :             ));

  000fc	e59a1440	 ldr         r1, [r10, #0x440]
  00100	e58d2010	 str         r2, [sp, #0x10]
  00104	e3110008	 tst         r1, #8
  00108	0a000022	 beq         |$LN20@PCIConfigD|
  0010c	e59f0150	 ldr         r0, [pc, #0x150]

; 247  :         } else {

  00110	ea00001e	 b           |$LN26@PCIConfigD|
  00114		 |$LN8@PCIConfigD|

; 248  :             // Check size result
; 249  :             size = ~(address & 0xFFFFFFF0) + 1;

  00114	e3c3300f	 bic         r3, r3, #0xF
  00118	e1e03003	 mvn         r3, r3
  0011c	e2830001	 add         r0, r3, #1

; 250  :             if ((size & (size - 1)) != 0 || size == 0) continue;

  00120	e2403001	 sub         r3, r0, #1
  00124	e1130000	 tst         r3, r0
  00128	1a000021	 bne         |$LN10@PCIConfigD|
  0012c	e3500000	 cmp         r0, #0
  00130	0a00001f	 beq         |$LN10@PCIConfigD|

; 251  :             // Check allocation type (let support only 32bit space for now)
; 252  :             if ((size & 0x00000006) != 0) {

  00134	e3100006	 tst         r0, #6
  00138	0a000005	 beq         |$LN2@PCIConfigD|

; 253  :                 OALMSG(OAL_WARN, (
; 254  :                     L"WARNING: PCIConfigDevice: 64 bit space NOT supported\r\n" 
; 255  :                 ));

  0013c	e59a3440	 ldr         r3, [r10, #0x440]
  00140	e3130002	 tst         r3, #2
  00144	0a00001a	 beq         |$LN10@PCIConfigD|
  00148	e59f0110	 ldr         r0, [pc, #0x110]
  0014c	eb000000	 bl          NKDbgPrintfW

; 256  :                 continue;

  00150	ea000017	 b           |$LN10@PCIConfigD|
  00154		 |$LN2@PCIConfigD|

; 257  :             }
; 258  :             // Assign memory space (allocate 4KB at least)
; 259  :             if (size < 4096) size = 4096;
; 260  :             address = (*pMemBase + size - 1) & ~(size - 1);

  00154	e5982000	 ldr         r2, [r8]
  00158	e3500a01	 cmp         r0, #1, 20
  0015c	33a00a01	 movcc       r0, #1, 20
  00160	e0822000	 add         r2, r2, r0
  00164	e2422001	 sub         r2, r2, #1
  00168	e2401001	 sub         r1, r0, #1
  0016c	e1c22001	 bic         r2, r2, r1

; 261  :             *pMemBase = address + size;

  00170	e0801002	 add         r1, r0, r2
  00174	e5881000	 str         r1, [r8]

; 262  :             OALMSG(OAL_INFO, (
; 263  :                 L"INFO: PCIConfigDevice: Mem BAR[%d] 0x%x Size 0x%x\r\n", 
; 264  :                 ix, address, size
; 265  :             ));

  00178	e59a1440	 ldr         r1, [r10, #0x440]
  0017c	e58d2010	 str         r2, [sp, #0x10]
  00180	e3110008	 tst         r1, #8
  00184	0a000003	 beq         |$LN20@PCIConfigD|
  00188	e1a03000	 mov         r3, r0
  0018c	e59f00c8	 ldr         r0, [pc, #0xC8]
  00190		 |$LN26@PCIConfigD|
  00190	e1a01004	 mov         r1, r4
  00194	eb000000	 bl          NKDbgPrintfW
  00198		 |$LN20@PCIConfigD|

; 266  :         }
; 267  :         OALPCICfgWrite(busId, pciLoc, offset, sizeof(address), &address);

  00198	e3a03004	 mov         r3, #4
  0019c	e1a02005	 mov         r2, r5
  001a0	e1a01009	 mov         r1, r9
  001a4	e1a00006	 mov         r0, r6
  001a8	e58db000	 str         r11, [sp]
  001ac	eb000000	 bl          OALPCICfgWrite

; 268  :         offset += sizeof(UINT32);

  001b0	e2855004	 add         r5, r5, #4
  001b4		 |$LN10@PCIConfigD|
  001b4	e2844001	 add         r4, r4, #1
  001b8	e3540006	 cmp         r4, #6
  001bc	e28de010	 add         lr, sp, #0x10
  001c0	3affffac	 bcc         |$LL11@PCIConfigD|

; 269  :     }
; 270  :    
; 271  :     // Set latency timer
; 272  :     u8 = OAL_PCI_LATENCY_TIMER;

  001c4	e3a02040	 mov         r2, #0x40

; 273  :     OALPCICfgWrite(
; 274  :         busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, LatencyTimer),
; 275  :         sizeof(u8), &u8
; 276  :     );

  001c8	e28d300c	 add         r3, sp, #0xC
  001cc	e5cd200c	 strb        r2, [sp, #0xC]
  001d0	e58d3000	 str         r3, [sp]
  001d4	e3a03001	 mov         r3, #1
  001d8	e3a0200d	 mov         r2, #0xD
  001dc	e1a01009	 mov         r1, r9
  001e0	e1a00006	 mov         r0, r6
  001e4	eb000000	 bl          OALPCICfgWrite

; 277  : 
; 278  :     // Set cache line size
; 279  :     u8 = OAL_PCI_CACHE_LINE_SIZE;

  001e8	e3a02004	 mov         r2, #4

; 280  :     OALPCICfgWrite(
; 281  :         busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, CacheLineSize),
; 282  :         sizeof(u8), &u8
; 283  :     );

  001ec	e28d300c	 add         r3, sp, #0xC
  001f0	e5cd200c	 strb        r2, [sp, #0xC]
  001f4	e58d3000	 str         r3, [sp]
  001f8	e3a03001	 mov         r3, #1
  001fc	e3a0200c	 mov         r2, #0xC
  00200	e1a01009	 mov         r1, r9
  00204	e1a00006	 mov         r0, r6
  00208	eb000000	 bl          OALPCICfgWrite

; 284  :     
; 285  :     // Enable device and clear all status
; 286  :     u16 = PCI_ENABLE_MEMORY_SPACE|PCI_ENABLE_IO_SPACE|PCI_ENABLE_BUS_MASTER;

  0020c	e3a02007	 mov         r2, #7

; 287  :     OALPCICfgWrite(
; 288  :         busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, Command),
; 289  :         sizeof(u16), &u16
; 290  :     );

  00210	e28d300e	 add         r3, sp, #0xE
  00214	e1cd20be	 strh        r2, [sp, #0xE]
  00218	e58d3000	 str         r3, [sp]
  0021c	e3a03002	 mov         r3, #2
  00220	e3a02004	 mov         r2, #4
  00224	e1a01009	 mov         r1, r9
  00228	e1a00006	 mov         r0, r6
  0022c	eb000000	 bl          OALPCICfgWrite

; 291  : 
; 292  : #ifdef OAL_PCI_DUMP_CONFIG
; 293  :     OALPCIDumpConfig(busId, pciLoc);
; 294  : #endif
; 295  : 
; 296  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 297  :         L"-PCIConfigDevice(memBase = 0x%08x, ioBase = 0x%08x)\r\n", 
; 298  :         *pMemBase, *pIoBase
; 299  :     ));

  00230	e59a3440	 ldr         r3, [r10, #0x440]
  00234	e3130c01	 tst         r3, #1, 24
  00238	13130004	 tstne       r3, #4
  0023c	15972000	 ldrne       r2, [r7]
  00240	15981000	 ldrne       r1, [r8]
  00244	159f000c	 ldrne       r0, [pc, #0xC]
  00248	1b000000	 blne        NKDbgPrintfW

; 300  :  }

  0024c	e28dd014	 add         sp, sp, #0x14
  00250	e89d6ff0	 ldmia       sp, {r4 - r11, sp, lr}
  00254	e12fff1e	 bx          lr
  00258		 |$LN30@PCIConfigD|
  00258		 |$LN31@PCIConfigD|
  00258	00000000	 DCD         |??_C@_1GM@POGKGJPM@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  0025c		 |$LN32@PCIConfigD|
  0025c	00000000	 DCD         |??_C@_1GI@HEDILPDD@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAM?$AAe?$AAm?$AA?5?$AAB?$AAA?$AAR?$AA?$FL?$AA?$CF@|
  00260		 |$LN33@PCIConfigD|
  00260	00000000	 DCD         |??_C@_1GO@ENKOGFDH@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AA6?$AA4?$AA?5?$AAb?$AAi?$AAt@|
  00264		 |$LN34@PCIConfigD|
  00264	00000000	 DCD         |??_C@_1GG@JIHPKAJL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AA?5?$AAB?$AAA?$AAR?$AA?$FL?$AA?$CF?$AAd@|
  00268		 |$LN35@PCIConfigD|
  00268	00000000	 DCD         |??_C@_1GA@MHOBDJJH@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0@|
  0026c		 |$LN36@PCIConfigD|
  0026c	00000000	 DCD         |dpCurSettings|
  00270		 |$M40633|

			 ENDP  ; |PCIConfigDevice|

	EXPORT	|??_C@_1GK@JFDBDMJF@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JA@KNMBBCKL@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T40669| DCD	|$LN16@PCIConfigB@2|
	DCD	0x40010604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@JFDBDMJF@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "-"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "B", 0x0, "r", 0x0, "i"
	DCB	0x0, "d", 0x0, "g", 0x0, "e", 0x0, "(", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "i", 0x0, "o"
	DCB	0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@KNMBBCKL@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@| DCB "+"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "B", 0x0, "r", 0x0, "i"
	DCB	0x0, "d", 0x0, "g", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%"
	DCB	0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PCIConfigBridge| PROC

; 309  : ) {

  00000		 |$LN16@PCIConfigB@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5ff0	 stmdb       sp!, {r4 - r12, lr}
  0000c	e24dd034	 sub         sp, sp, #0x34
  00010		 |$M40666|
  00010	e1a0a003	 mov         r10, r3
  00014	e1a03002	 mov         r3, r2
  00018	e1a07001	 mov         r7, r1
  0001c	e58d3028	 str         r3, [sp, #0x28]
  00020	e58da030	 str         r10, [sp, #0x30]
  00024	e58d7060	 str         r7, [sp, #0x60]
  00028	e1a06000	 mov         r6, r0

; 310  :     UINT32 memLimit, ioLimit, u32;
; 311  :     UINT16 command, u16;
; 312  :     UINT8  u8;
; 313  : 
; 314  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 315  :         L"+PCIConfigBridge(%d, %d/%d/%d, %d, %d, 0x%08x, 0x%08x, 0x%08x, 0x%08x\r\n",
; 316  :         busId, pciLoc.bus, pciLoc.dev, pciLoc.fnc, secBus, subBus,
; 317  :         *pMemBase, memSize, *pIoBase, ioSize
; 318  :     ));

  0002c	e59fb3e0	 ldr         r11, [pc, #0x3E0]
  00030	e59d5078	 ldr         r5, [sp, #0x78]
  00034	e59d8074	 ldr         r8, [sp, #0x74]
  00038	e59b1440	 ldr         r1, [r11, #0x440]
  0003c	e59d4070	 ldr         r4, [sp, #0x70]
  00040	e59d906c	 ldr         r9, [sp, #0x6C]
  00044	e3110c01	 tst         r1, #1, 24
  00048	0a000011	 beq         |$LN7@PCIConfigB@2|
  0004c	e3110004	 tst         r1, #4
  00050	0a00000f	 beq         |$LN7@PCIConfigB@2|
  00054	e5dde060	 ldrb        lr, [sp, #0x60]
  00058	e5982000	 ldr         r2, [r8]
  0005c	e5991000	 ldr         r1, [r9]
  00060	e58de000	 str         lr, [sp]
  00064	e59de028	 ldr         lr, [sp, #0x28]
  00068	e5dd3061	 ldrb        r3, [sp, #0x61]
  0006c	e59f039c	 ldr         r0, [pc, #0x39C]
  00070	e58d2014	 str         r2, [sp, #0x14]
  00074	e5dd2062	 ldrb        r2, [sp, #0x62]
  00078	e58d100c	 str         r1, [sp, #0xC]
  0007c	e1a01006	 mov         r1, r6
  00080	e58de004	 str         lr, [sp, #4]
  00084	e58d5018	 str         r5, [sp, #0x18]
  00088	e58d4010	 str         r4, [sp, #0x10]
  0008c	e58da008	 str         r10, [sp, #8]
  00090	eb000000	 bl          NKDbgPrintfW
  00094		 |$LN7@PCIConfigB@2|

; 319  : 
; 320  :     // Compute limits
; 321  :     if (memSize > 0) {

  00094	e3540000	 cmp         r4, #0
  00098	0a00000d	 beq         |$LN11@PCIConfigB@2|

; 322  :         *pMemBase = (*pMemBase + 0xFFFFF) & ~0xFFFFF;       // 1M boundary

  0009c	e5992000	 ldr         r2, [r9]
  000a0	e3e034ff	 mvn         r3, #0xFF, 8
  000a4	e223360f	 eor         r3, r3, #0xF, 12

; 323  :         memSize = (memSize + 0xFFFFF) & ~0xFFFFF;           // 1M chunks

  000a8	e0841003	 add         r1, r4, r3
  000ac	e0823003	 add         r3, r2, r3
  000b0	e3a024ff	 mov         r2, #0xFF, 8
  000b4	e382060f	 orr         r0, r2, #0xF, 12
  000b8	e0032000	 and         r2, r3, r0
  000bc	e0014000	 and         r4, r1, r0

; 324  :         memLimit = (*pMemBase + memSize - 1) & ~0xFFFFF;    // 1M boundary

  000c0	e0823004	 add         r3, r2, r4
  000c4	e2433001	 sub         r3, r3, #1
  000c8	e0033000	 and         r3, r3, r0
  000cc	e5892000	 str         r2, [r9]
  000d0	ea000000	 b           |$LN13@PCIConfigB@2|
  000d4		 |$LN11@PCIConfigB@2|
  000d4	e59d3030	 ldr         r3, [sp, #0x30]
  000d8		 |$LN13@PCIConfigB@2|
  000d8	e58d302c	 str         r3, [sp, #0x2C]

; 325  :     }
; 326  :     if (ioSize > 0) {

  000dc	e3550000	 cmp         r5, #0
  000e0	0a00000d	 beq         |$LN12@PCIConfigB@2|

; 327  :         *pIoBase = (*pIoBase + 0xFFF) & ~0xFFF;             // 4K boundary

  000e4	e5982000	 ldr         r2, [r8]

; 328  :         ioSize = (ioSize + 0xFFF) & ~0xFFF;                 // 4K chunks

  000e8	e2853c0f	 add         r3, r5, #0xF, 24
  000ec	e28300ff	 add         r0, r3, #0xFF
  000f0	e2823c0f	 add         r3, r2, #0xF, 24
  000f4	e3e02c0f	 mvn         r2, #0xF, 24
  000f8	e22210ff	 eor         r1, r2, #0xFF
  000fc	e28330ff	 add         r3, r3, #0xFF
  00100	e0032001	 and         r2, r3, r1
  00104	e0005001	 and         r5, r0, r1

; 329  :         ioLimit = (*pIoBase + ioSize - 1) & ~0xFFF;         // 4K boundary

  00108	e0823005	 add         r3, r2, r5
  0010c	e2433001	 sub         r3, r3, #1
  00110	e003a001	 and         r10, r3, r1
  00114	e5882000	 str         r2, [r8]
  00118	ea000000	 b           |$LN3@PCIConfigB@2|
  0011c		 |$LN12@PCIConfigB@2|
  0011c	e59da030	 ldr         r10, [sp, #0x30]
  00120		 |$LN3@PCIConfigB@2|

; 330  :     }
; 331  : 
; 332  :     // Disable Memory and I/O access
; 333  :     command = 0;

  00120	e3a02000	 mov         r2, #0

; 334  :     OALPCICfgWrite(
; 335  :         busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, Command), 
; 336  :         sizeof(command), &command
; 337  :     );

  00124	e28d3020	 add         r3, sp, #0x20
  00128	e1cd22b0	 strh        r2, [sp, #0x20]
  0012c	e58d3000	 str         r3, [sp]
  00130	e3a03002	 mov         r3, #2
  00134	e3a02004	 mov         r2, #4
  00138	e1a01007	 mov         r1, r7
  0013c	e1a00006	 mov         r0, r6
  00140	eb000000	 bl          OALPCICfgWrite

; 338  : 
; 339  :     // Set master latency timer
; 340  :     u8 = OAL_PCI_LATENCY_TIMER;

  00144	e3a02040	 mov         r2, #0x40

; 341  :     OALPCICfgWrite(
; 342  :         busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, LatencyTimer),
; 343  :         sizeof(u8), &u8
; 344  :     );

  00148	e28d301c	 add         r3, sp, #0x1C
  0014c	e5cd201c	 strb        r2, [sp, #0x1C]
  00150	e58d3000	 str         r3, [sp]
  00154	e3a03001	 mov         r3, #1
  00158	e3a0200d	 mov         r2, #0xD
  0015c	e1a01007	 mov         r1, r7
  00160	e1a00006	 mov         r0, r6
  00164	eb000000	 bl          OALPCICfgWrite

; 345  : 
; 346  :     // Set cache line size
; 347  :     u8 = OAL_PCI_CACHE_LINE_SIZE;

  00168	e3a02004	 mov         r2, #4

; 348  :     OALPCICfgWrite(
; 349  :         busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, CacheLineSize),
; 350  :         sizeof(u8), &u8
; 351  :     );

  0016c	e28d301c	 add         r3, sp, #0x1C
  00170	e5cd201c	 strb        r2, [sp, #0x1C]
  00174	e58d3000	 str         r3, [sp]
  00178	e3a03001	 mov         r3, #1
  0017c	e3a0200c	 mov         r2, #0xC
  00180	e1a01007	 mov         r1, r7
  00184	e1a00006	 mov         r0, r6
  00188	eb000000	 bl          OALPCICfgWrite

; 352  : 
; 353  :     // Set primary bus number
; 354  :     u8 = pciLoc.bus;
; 355  :     OALPCICfgWrite(
; 356  :         busId, pciLoc, 
; 357  :         FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.PrimaryBusNumber), 
; 358  :         sizeof(u8), &u8
; 359  :     );

  0018c	e5dde062	 ldrb        lr, [sp, #0x62]
  00190	e28d301c	 add         r3, sp, #0x1C
  00194	e58d3000	 str         r3, [sp]
  00198	e3a03001	 mov         r3, #1
  0019c	e3a02018	 mov         r2, #0x18
  001a0	e1a01007	 mov         r1, r7
  001a4	e1a00006	 mov         r0, r6
  001a8	e5cde01c	 strb        lr, [sp, #0x1C]
  001ac	eb000000	 bl          OALPCICfgWrite

; 360  : 
; 361  :     // Set secondary bus number
; 362  :     u8 = (UINT8)secBus;
; 363  :     OALPCICfgWrite(
; 364  :         busId, pciLoc, 
; 365  :         FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.SecondaryBusNumber),
; 366  :         sizeof(u8), &u8
; 367  :     );

  001b0	e59de028	 ldr         lr, [sp, #0x28]
  001b4	e28d301c	 add         r3, sp, #0x1C
  001b8	e58d3000	 str         r3, [sp]
  001bc	e3a03001	 mov         r3, #1
  001c0	e3a02019	 mov         r2, #0x19
  001c4	e1a01007	 mov         r1, r7
  001c8	e1a00006	 mov         r0, r6
  001cc	e5cde01c	 strb        lr, [sp, #0x1C]
  001d0	eb000000	 bl          OALPCICfgWrite

; 368  : 
; 369  :     // Set subordinate bus number
; 370  :     u8 = (UINT8)subBus;
; 371  :     OALPCICfgWrite(
; 372  :         busId, pciLoc, 
; 373  :         FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.SubordinateBusNumber),
; 374  :         sizeof(u8), &u8
; 375  :     );

  001d4	e59de030	 ldr         lr, [sp, #0x30]
  001d8	e28d301c	 add         r3, sp, #0x1C
  001dc	e58d3000	 str         r3, [sp]
  001e0	e3a03001	 mov         r3, #1
  001e4	e3a0201a	 mov         r2, #0x1A
  001e8	e1a01007	 mov         r1, r7
  001ec	e1a00006	 mov         r0, r6
  001f0	e5cde01c	 strb        lr, [sp, #0x1C]
  001f4	eb000000	 bl          OALPCICfgWrite

; 376  : 
; 377  :     // Set secondary latency timer
; 378  :     u8 = OAL_PCI_LATENCY_TIMER;

  001f8	e3a02040	 mov         r2, #0x40

; 379  :     OALPCICfgWrite(
; 380  :         busId, pciLoc, 
; 381  :         FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.SecondaryLatencyTimer),
; 382  :         sizeof(u8), &u8
; 383  :     );

  001fc	e28d301c	 add         r3, sp, #0x1C
  00200	e5cd201c	 strb        r2, [sp, #0x1C]
  00204	e58d3000	 str         r3, [sp]
  00208	e3a03001	 mov         r3, #1
  0020c	e3a0201b	 mov         r2, #0x1B
  00210	e1a01007	 mov         r1, r7
  00214	e1a00006	 mov         r0, r6
  00218	eb000000	 bl          OALPCICfgWrite

; 384  :     
; 385  :     // Prepare configuration command
; 386  :     command = PCI_ENABLE_SERR;

  0021c	e3a03c01	 mov         r3, #1, 24
  00220	e1cd32b0	 strh        r3, [sp, #0x20]

; 387  : 
; 388  :     // Set memory range
; 389  :     if (memSize > 0) {

  00224	e3540000	 cmp         r4, #0
  00228	0a00003a	 beq         |$LN2@PCIConfigB@2|

; 390  : 
; 391  :         // Memory base
; 392  :         u16 = (UINT16)(*pMemBase >> 16);

  0022c	e1d920b2	 ldrh        r2, [r9, #2]

; 393  :         OALPCICfgWrite(
; 394  :             busId, pciLoc, 
; 395  :             FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.MemoryBase),
; 396  :             sizeof(u16), &u16
; 397  :         );

  00230	e28de01e	 add         lr, sp, #0x1E
  00234	e3a03002	 mov         r3, #2
  00238	e1cd21be	 strh        r2, [sp, #0x1E]
  0023c	e3a02020	 mov         r2, #0x20
  00240	e1a01007	 mov         r1, r7
  00244	e1a00006	 mov         r0, r6
  00248	e58de000	 str         lr, [sp]
  0024c	eb000000	 bl          OALPCICfgWrite

; 398  : 
; 399  :         // Memory limit
; 400  :         u16 = (UINT16)((memLimit >> 16) & 0xFFF0);

  00250	e3a03cff	 mov         r3, #0xFF, 24
  00254	e38340f0	 orr         r4, r3, #0xF0
  00258	e59d302c	 ldr         r3, [sp, #0x2C]

; 401  :         OALPCICfgWrite(
; 402  :             busId, pciLoc, 
; 403  :             FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.MemoryLimit),
; 404  :             sizeof(u16), &u16
; 405  :         );

  0025c	e28de01e	 add         lr, sp, #0x1E
  00260	e3a02022	 mov         r2, #0x22
  00264	e0043823	 and         r3, r4, r3, lsr #16
  00268	e1cd31be	 strh        r3, [sp, #0x1E]
  0026c	e3a03002	 mov         r3, #2
  00270	e1a01007	 mov         r1, r7
  00274	e1a00006	 mov         r0, r6
  00278	e58de000	 str         lr, [sp]
  0027c	eb000000	 bl          OALPCICfgWrite

; 406  : 
; 407  :         // Disable prefetch memory - base to 0xFFF00000
; 408  :         u16 = 0xFFF0;
; 409  :         OALPCICfgWrite(
; 410  :             busId, pciLoc,
; 411  :             FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.PrefetchableMemoryBase),
; 412  :             sizeof(u16), &u16
; 413  :         );

  00280	e28d301e	 add         r3, sp, #0x1E
  00284	e58d3000	 str         r3, [sp]
  00288	e3a03002	 mov         r3, #2
  0028c	e3a02024	 mov         r2, #0x24
  00290	e1a01007	 mov         r1, r7
  00294	e1a00006	 mov         r0, r6
  00298	e1cd41be	 strh        r4, [sp, #0x1E]
  0029c	eb000000	 bl          OALPCICfgWrite

; 414  : 
; 415  :         // Disable prefetch memory - limit to 0x000FFFFF
; 416  :         u16 = 0x0;

  002a0	e3a02000	 mov         r2, #0

; 417  :         OALPCICfgWrite(
; 418  :             busId, pciLoc,
; 419  :             FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.PrefetchableMemoryLimit),
; 420  :             sizeof(u16), &u16
; 421  :         );

  002a4	e28d301e	 add         r3, sp, #0x1E
  002a8	e1cd21be	 strh        r2, [sp, #0x1E]
  002ac	e58d3000	 str         r3, [sp]
  002b0	e3a03002	 mov         r3, #2
  002b4	e3a02026	 mov         r2, #0x26
  002b8	e1a01007	 mov         r1, r7
  002bc	e1a00006	 mov         r0, r6
  002c0	eb000000	 bl          OALPCICfgWrite

; 422  :     
; 423  :         // Disable prefetch memory 
; 424  :         u32 = 0xFFFFFFFF;

  002c4	e3e02000	 mvn         r2, #0

; 425  :         OALPCICfgWrite(
; 426  :             busId, pciLoc, FIELD_OFFSET(
; 427  :                 PCI_COMMON_CONFIG, u.type1.PrefetchableMemoryBaseUpper32
; 428  :             ), sizeof(u32), &u32
; 429  :         );

  002c8	e28d3024	 add         r3, sp, #0x24
  002cc	e58d2024	 str         r2, [sp, #0x24]
  002d0	e58d3000	 str         r3, [sp]
  002d4	e3a03004	 mov         r3, #4
  002d8	e3a02028	 mov         r2, #0x28
  002dc	e1a01007	 mov         r1, r7
  002e0	e1a00006	 mov         r0, r6
  002e4	eb000000	 bl          OALPCICfgWrite

; 430  : 
; 431  :         // Disable prefetch memory
; 432  :         u32 = 0;

  002e8	e3a02000	 mov         r2, #0

; 433  :         OALPCICfgWrite(
; 434  :             busId, pciLoc, FIELD_OFFSET(
; 435  :                 PCI_COMMON_CONFIG, u.type1.PrefetchableMemoryLimitUpper32
; 436  :             ), sizeof(u32), &u32
; 437  :         );

  002ec	e28d3024	 add         r3, sp, #0x24
  002f0	e58d2024	 str         r2, [sp, #0x24]
  002f4	e58d3000	 str         r3, [sp]
  002f8	e3a03004	 mov         r3, #4
  002fc	e3a0202c	 mov         r2, #0x2C
  00300	e1a01007	 mov         r1, r7
  00304	e1a00006	 mov         r0, r6
  00308	eb000000	 bl          OALPCICfgWrite

; 438  :         
; 439  :         // Enable memory space
; 440  :         command |= PCI_ENABLE_MEMORY_SPACE|PCI_ENABLE_BUS_MASTER;

  0030c	e1dd32b0	 ldrh        r3, [sp, #0x20]
  00310	e3833006	 orr         r3, r3, #6
  00314	e1cd32b0	 strh        r3, [sp, #0x20]
  00318		 |$LN2@PCIConfigB@2|

; 441  :     }
; 442  : 
; 443  :     // Set io range (32-bit address decode)
; 444  :     if (ioSize > 0) {

  00318	e3550000	 cmp         r5, #0
  0031c	0a000029	 beq         |$LN1@PCIConfigB@2|

; 445  : 
; 446  :         // IO base 
; 447  :         u8 = (UINT8)((*pIoBase >> 8) & 0xF0);

  00320	e5982000	 ldr         r2, [r8]

; 448  :         OALPCICfgWrite(
; 449  :             busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.IOBase),
; 450  :             sizeof(u8), &u8
; 451  :         );

  00324	e28de01c	 add         lr, sp, #0x1C
  00328	e3a03001	 mov         r3, #1
  0032c	e1a02422	 mov         r2, r2, lsr #8
  00330	e20220f0	 and         r2, r2, #0xF0
  00334	e5cd201c	 strb        r2, [sp, #0x1C]
  00338	e3a0201c	 mov         r2, #0x1C
  0033c	e1a01007	 mov         r1, r7
  00340	e1a00006	 mov         r0, r6
  00344	e58de000	 str         lr, [sp]
  00348	eb000000	 bl          OALPCICfgWrite

; 452  : 
; 453  :         // IO upper base
; 454  :         u16 = (UINT16)(*pIoBase >> 16);

  0034c	e1d820b2	 ldrh        r2, [r8, #2]

; 455  :         OALPCICfgWrite(
; 456  :             busId, pciLoc, FIELD_OFFSET(
; 457  :                 PCI_COMMON_CONFIG, u.type1.IOBaseUpper
; 458  :              ), sizeof(u16), &u16
; 459  :         );

  00350	e28de01e	 add         lr, sp, #0x1E
  00354	e3a03002	 mov         r3, #2
  00358	e1cd21be	 strh        r2, [sp, #0x1E]
  0035c	e3a02030	 mov         r2, #0x30
  00360	e1a01007	 mov         r1, r7
  00364	e1a00006	 mov         r0, r6
  00368	e58de000	 str         lr, [sp]
  0036c	eb000000	 bl          OALPCICfgWrite

; 460  : 
; 461  :         // IO limit
; 462  :         u8 = (UINT8)((ioLimit >> 8) & 0xF0);

  00370	e1a0342a	 mov         r3, r10, lsr #8
  00374	e20330f0	 and         r3, r3, #0xF0

; 463  :         OALPCICfgWrite(
; 464  :             busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.IOLimit),
; 465  :             sizeof(u8), &u8
; 466  :         );

  00378	e5cd301c	 strb        r3, [sp, #0x1C]
  0037c	e28de01c	 add         lr, sp, #0x1C
  00380	e3a03001	 mov         r3, #1
  00384	e3a0201d	 mov         r2, #0x1D
  00388	e1a01007	 mov         r1, r7
  0038c	e1a00006	 mov         r0, r6
  00390	e58de000	 str         lr, [sp]
  00394	eb000000	 bl          OALPCICfgWrite

; 467  : 
; 468  :         // IO upper limit
; 469  :         u16 = (UINT16)(ioLimit >> 16);

  00398	e1a0382a	 mov         r3, r10, lsr #16

; 470  :         OALPCICfgWrite(
; 471  :             busId, pciLoc, FIELD_OFFSET(
; 472  :                 PCI_COMMON_CONFIG, u.type1.IOLimitUpper
; 473  :             ), sizeof(u16), &u16
; 474  :         );

  0039c	e28d201e	 add         r2, sp, #0x1E
  003a0	e1cd31be	 strh        r3, [sp, #0x1E]
  003a4	e58d2000	 str         r2, [sp]
  003a8	e3a03002	 mov         r3, #2
  003ac	e3a02032	 mov         r2, #0x32
  003b0	e1a01007	 mov         r1, r7
  003b4	e1a00006	 mov         r0, r6
  003b8	eb000000	 bl          OALPCICfgWrite

; 475  :         
; 476  :         // Enable io space
; 477  :         command |= PCI_ENABLE_IO_SPACE|PCI_ENABLE_BUS_MASTER;

  003bc	e1dd32b0	 ldrh        r3, [sp, #0x20]
  003c0	e3833005	 orr         r3, r3, #5
  003c4	e1cd32b0	 strh        r3, [sp, #0x20]
  003c8		 |$LN1@PCIConfigB@2|

; 478  :     }
; 479  : 
; 480  :     // Enable bridge
; 481  :     OALPCICfgWrite(
; 482  :         busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, Command), 
; 483  :         sizeof(command), &command
; 484  :     );

  003c8	e28d3020	 add         r3, sp, #0x20
  003cc	e58d3000	 str         r3, [sp]
  003d0	e3a03002	 mov         r3, #2
  003d4	e3a02004	 mov         r2, #4
  003d8	e1a01007	 mov         r1, r7
  003dc	e1a00006	 mov         r0, r6
  003e0	eb000000	 bl          OALPCICfgWrite

; 485  : 
; 486  : #ifdef OAL_PCI_DUMP_CONFIG
; 487  :     OALPCIDumpConfig(busId, pciLoc);
; 488  : #endif
; 489  : 
; 490  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 491  :         L"-PCIConfigBridge(memBase = 0x%08x, ioBase = 0x%08x\r\n", 
; 492  :         *pMemBase, *pIoBase
; 493  :     ));

  003e4	e59b3440	 ldr         r3, [r11, #0x440]
  003e8	e3130c01	 tst         r3, #1, 24
  003ec	13130004	 tstne       r3, #4
  003f0	15982000	 ldrne       r2, [r8]
  003f4	15991000	 ldrne       r1, [r9]
  003f8	159f000c	 ldrne       r0, [pc, #0xC]
  003fc	1b000000	 blne        NKDbgPrintfW

; 494  : }

  00400	e28dd034	 add         sp, sp, #0x34
  00404	e89d6ff0	 ldmia       sp, {r4 - r11, sp, lr}
  00408	e12fff1e	 bx          lr
  0040c		 |$LN17@PCIConfigB@2|
  0040c		 |$LN18@PCIConfigB@2|
  0040c	00000000	 DCD         |??_C@_1GK@JFDBDMJF@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  00410		 |$LN19@PCIConfigB@2|
  00410	00000000	 DCD         |??_C@_1JA@KNMBBCKL@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@|
  00414		 |$LN20@PCIConfigB@2|
  00414	00000000	 DCD         |dpCurSettings|
  00418		 |$M40667|

			 ENDP  ; |PCIConfigBridge|

	EXPORT	|OALPCIConfig|
	EXPORT	|??_C@_1DA@CDAFDGML@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@JMAHGIHP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@EKBKBPKH@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@HBKNFIMP@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T40696| DCD	|$LN13@OALPCIConf|
	DCD	0x40003b02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@CDAFDGML@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "C", 0x0, "I"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "1", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@JMAHGIHP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "P"
	DCB	0x0, "C", 0x0, "I", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@EKBKBPKH@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "P"
	DCB	0x0, "C", 0x0, "I", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@HBKNFIMP@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "C", 0x0, "I"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPCIConfig| PROC

; 75   : ) {

  00000		 |$LN13@OALPCIConf|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd01c	 sub         sp, sp, #0x1C
  00008		 |$M40693|
  00008	e1a05003	 mov         r5, r3
  0000c	e1a06001	 mov         r6, r1
  00010	e1a07000	 mov         r7, r0

; 76   :     UINT32 mem, io, subBus;
; 77   : 
; 78   :     OALMSG(OAL_FUNC&&OAL_PCI, (
; 79   :         L"+OALPCIConfig(%d, 0x%08x, 0x%08x, 0x%08x, 0x%08x, %d, 0x%08x)\r\n",
; 80   :         busId, memBase, memSize, ioBase, ioSize, pciLocCount, aPciLoc
; 81   :     ));

  00014	e59f40cc	 ldr         r4, [pc, #0xCC]
  00018	e59d8040	 ldr         r8, [sp, #0x40]
  0001c	e59d903c	 ldr         r9, [sp, #0x3C]
  00020	e594e440	 ldr         lr, [r4, #0x440]
  00024	e31e0004	 tst         lr, #4
  00028	0a00000c	 beq         |$LN3@OALPCIConf|
  0002c	e31e0c01	 tst         lr, #1, 24
  00030	0a00000a	 beq         |$LN3@OALPCIConf|
  00034	e59de038	 ldr         lr, [sp, #0x38]
  00038	e59f00a4	 ldr         r0, [pc, #0xA4]
  0003c	e1a03002	 mov         r3, r2
  00040	e1a02006	 mov         r2, r6
  00044	e1a01007	 mov         r1, r7
  00048	e58de004	 str         lr, [sp, #4]
  0004c	e58d800c	 str         r8, [sp, #0xC]
  00050	e58d9008	 str         r9, [sp, #8]
  00054	e58d5000	 str         r5, [sp]
  00058	eb000000	 bl          NKDbgPrintfW
  0005c	e594e440	 ldr         lr, [r4, #0x440]
  00060		 |$LN3@OALPCIConf|

; 82   :     OALMSG(OAL_INFO, (L"INFO: PCI configuration start\r\n"));

  00060	e31e0008	 tst         lr, #8
  00064	159f0074	 ldrne       r0, [pc, #0x74]
  00068	1b000000	 blne        NKDbgPrintfW

; 83   : 
; 84   :     mem = memBase;
; 85   :     io = ioBase;
; 86   :     subBus = 0;

  0006c	e3a02000	 mov         r2, #0

; 87   :     PCIConfigBus(busId, 0, &subBus, &mem, &io, pciLocCount, aPciLoc);

  00070	e28d3018	 add         r3, sp, #0x18
  00074	e58d2010	 str         r2, [sp, #0x10]
  00078	e58d3000	 str         r3, [sp]
  0007c	e28d3014	 add         r3, sp, #0x14
  00080	e28d2010	 add         r2, sp, #0x10
  00084	e3a01000	 mov         r1, #0
  00088	e1a00007	 mov         r0, r7
  0008c	e58d6014	 str         r6, [sp, #0x14]
  00090	e58d5018	 str         r5, [sp, #0x18]
  00094	e58d8008	 str         r8, [sp, #8]
  00098	e58d9004	 str         r9, [sp, #4]
  0009c	eb000000	 bl          PCIConfigBus

; 88   : 
; 89   :     OALMSG(OAL_INFO, (L"INFO: PCI configuration complete\r\n"));

  000a0	e5943440	 ldr         r3, [r4, #0x440]
  000a4	e3130008	 tst         r3, #8
  000a8	0a000002	 beq         |$LN7@OALPCIConf|
  000ac	e59f0028	 ldr         r0, [pc, #0x28]
  000b0	eb000000	 bl          NKDbgPrintfW
  000b4	e5943440	 ldr         r3, [r4, #0x440]
  000b8		 |$LN7@OALPCIConf|

; 90   :     OALMSG(OAL_FUNC&&OAL_PCI, (L"-OALPCIConfig(rc = 1)\r\n"));

  000b8	e3130004	 tst         r3, #4
  000bc	13130c01	 tstne       r3, #1, 24
  000c0	159f0010	 ldrne       r0, [pc, #0x10]
  000c4	1b000000	 blne        NKDbgPrintfW

; 91   :     return TRUE;

  000c8	e3a00001	 mov         r0, #1

; 92   : }

  000cc	e28dd01c	 add         sp, sp, #0x1C
  000d0	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000d4	e12fff1e	 bx          lr
  000d8		 |$LN14@OALPCIConf|
  000d8		 |$LN15@OALPCIConf|
  000d8	00000000	 DCD         |??_C@_1DA@CDAFDGML@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000dc		 |$LN16@OALPCIConf|
  000dc	00000000	 DCD         |??_C@_1EG@JMAHGIHP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe@|
  000e0		 |$LN17@OALPCIConf|
  000e0	00000000	 DCD         |??_C@_1EA@EKBKBPKH@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  000e4		 |$LN18@OALPCIConf|
  000e4	00000000	 DCD         |??_C@_1IA@HBKNFIMP@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@|
  000e8		 |$LN19@OALPCIConf|
  000e8	00000000	 DCD         |dpCurSettings|
  000ec		 |$M40694|

			 ENDP  ; |OALPCIConfig|

	EXPORT	|??_C@_1GM@EDBDABME@?$AA?9?$AAP?$AAC?$AAI?$AAS?$AAc?$AAa?$AAn?$AAL?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@LMFBBPIM@?$AA?$CL?$AAP?$AAC?$AAI?$AAS?$AAc?$AAa?$AAn?$AAL?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|OALPCIGetHeaderType|

  00000			 AREA	 |.pdata|, PDATA
|$T40738| DCD	|$LN34@PCIScanLoc|
	DCD	0x40008f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@EDBDABME@?$AA?9?$AAP?$AAC?$AAI?$AAS?$AAc?$AAa?$AAn?$AAL?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "-"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "S", 0x0, "c", 0x0, "a"
	DCB	0x0, "n", 0x0, "L", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, "(", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "i", 0x0, "o"
	DCB	0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@LMFBBPIM@?$AA?$CL?$AAP?$AAC?$AAI?$AAS?$AAc?$AAa?$AAn?$AAL?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@| DCB "+"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "S", 0x0, "c", 0x0, "a"
	DCB	0x0, "n", 0x0, "L", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%"
	DCB	0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PCIScanLocation| PROC

; 147  : ) {

  00000		 |$LN34@PCIScanLoc|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5ff0	 stmdb       sp!, {r4 - r12, lr}
  0000c	e24dd028	 sub         sp, sp, #0x28
  00010		 |$M40735|
  00010	e1a08003	 mov         r8, r3
  00014	e58d201c	 str         r2, [sp, #0x1C]
  00018	e1a0b000	 mov         r11, r0

; 148  :     UINT8 header;
; 149  :     UINT32 secBus;
; 150  :     UINT32 ix, mem, io;
; 151  : 
; 152  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 153  :         L"+PCIScanLocation(%d, %d/%d/%d, %d, 0x%x, 0x%08x, %d, 0x%x)\r\n", 
; 154  :         busId, pciLoc.bus, pciLoc.dev, pciLoc.fnc, *pSubBus, *pMem, *pIo,
; 155  :         count, aPciLoc
; 156  :     ));        

  0001c	e59f3210	 ldr         r3, [pc, #0x210]
  00020	e59d4068	 ldr         r4, [sp, #0x68]
  00024	e59da064	 ldr         r10, [sp, #0x64]
  00028	e5933440	 ldr         r3, [r3, #0x440]
  0002c	e59d9060	 ldr         r9, [sp, #0x60]
  00030	e5dd5056	 ldrb        r5, [sp, #0x56]
  00034	e5dd6055	 ldrb        r6, [sp, #0x55]
  00038	e3130c01	 tst         r3, #1, 24
  0003c	0a000010	 beq         |$LN18@PCIScanLoc|
  00040	e3130004	 tst         r3, #4
  00044	0a00000e	 beq         |$LN18@PCIScanLoc|
  00048	e5991000	 ldr         r1, [r9]
  0004c	e5983000	 ldr         r3, [r8]
  00050	e5922000	 ldr         r2, [r2]
  00054	e5dde054	 ldrb        lr, [sp, #0x54]
  00058	e59f01d8	 ldr         r0, [pc, #0x1D8]
  0005c	e58d100c	 str         r1, [sp, #0xC]
  00060	e58d3008	 str         r3, [sp, #8]
  00064	e58d2004	 str         r2, [sp, #4]
  00068	e1a03006	 mov         r3, r6
  0006c	e1a02005	 mov         r2, r5
  00070	e1a0100b	 mov         r1, r11
  00074	e58de000	 str         lr, [sp]
  00078	e58d4014	 str         r4, [sp, #0x14]
  0007c	e58da010	 str         r10, [sp, #0x10]
  00080	eb000000	 bl          NKDbgPrintfW
  00084		 |$LN18@PCIScanLoc|

; 157  : 
; 158  :     // Loop over all possible device functions
; 159  :     for (pciLoc.fnc = 0; pciLoc.fnc < PCI_MAX_FUNCTION; pciLoc.fnc++) {

  00084	e3a07000	 mov         r7, #0
  00088	e5cd7054	 strb        r7, [sp, #0x54]
  0008c		 |$LL15@PCIScanLoc|

; 160  :     
; 161  :         // Read header to find device type
; 162  :         header = OALPCIGetHeaderType(busId, pciLoc);

  0008c	e59d1054	 ldr         r1, [sp, #0x54]
  00090	e1a0000b	 mov         r0, r11
  00094	eb000000	 bl          OALPCIGetHeaderType
  00098	e1a03000	 mov         r3, r0
  0009c	e5cd3018	 strb        r3, [sp, #0x18]

; 163  :         if (header == 0xFF) break;

  000a0	e35300ff	 cmp         r3, #0xFF
  000a4	0a000056	 beq         |$LN25@PCIScanLoc|

; 164  : 
; 165  :         // Depending on device type do configuration
; 166  :         switch (header & ~PCI_MULTIFUNCTION) {

  000a8	e3d32080	 bics        r2, r3, #0x80
  000ac	0a000031	 beq         |$LN9@PCIScanLoc|
  000b0	e2423001	 sub         r3, r2, #1
  000b4	e3530001	 cmp         r3, #1
  000b8	8a000047	 bhi         |$LN31@PCIScanLoc|

; 179  :                         break;
; 180  :                     }
; 181  :                 }
; 182  :             }
; 183  :             break;
; 184  :         case PCI_BRIDGE_TYPE:
; 185  :         case PCI_CARDBUS_TYPE:
; 186  :             secBus = ++(*pSubBus);

  000bc	e59d401c	 ldr         r4, [sp, #0x1C]

; 187  :             // Set primary, secondary and subordinate bus numbers
; 188  :             PCIConfigBridge(busId, pciLoc, secBus, 0xFF, pMem, 0, pIo, 0);

  000c0	e59d1054	 ldr         r1, [sp, #0x54]
  000c4	e3a0e000	 mov         lr, #0
  000c8	e5942000	 ldr         r2, [r4]
  000cc	e3a030ff	 mov         r3, #0xFF
  000d0	e1a0000b	 mov         r0, r11
  000d4	e2826001	 add         r6, r2, #1
  000d8	e1a02006	 mov         r2, r6
  000dc	e5846000	 str         r6, [r4]
  000e0	e58de00c	 str         lr, [sp, #0xC]
  000e4	e58d9008	 str         r9, [sp, #8]
  000e8	e58de004	 str         lr, [sp, #4]
  000ec	e58d8000	 str         r8, [sp]
  000f0	eb000000	 bl          PCIConfigBridge

; 189  :             // Call config routing recursively
; 190  :             mem = *pMem;
; 191  :             io = *pIo;
; 192  :             PCIConfigBus(
; 193  :                 busId, *pSubBus, pSubBus, pMem, pIo, count, aPciLoc
; 194  :             );

  000f4	e5941000	 ldr         r1, [r4]
  000f8	e5994000	 ldr         r4, [r9]
  000fc	e59de068	 ldr         lr, [sp, #0x68]
  00100	e5985000	 ldr         r5, [r8]
  00104	e59d201c	 ldr         r2, [sp, #0x1C]
  00108	e1a03008	 mov         r3, r8
  0010c	e1a0000b	 mov         r0, r11
  00110	e58d4020	 str         r4, [sp, #0x20]
  00114	e58de008	 str         lr, [sp, #8]
  00118	e58d5024	 str         r5, [sp, #0x24]
  0011c	e58da004	 str         r10, [sp, #4]
  00120	e58d9000	 str         r9, [sp]
  00124	eb000000	 bl          PCIConfigBus

; 195  :             // Set bus numbers and configure bridge if device is behind it
; 196  :             PCIConfigBridge(
; 197  :                 busId, pciLoc, secBus, *pSubBus, &mem, *pMem - mem, 
; 198  :                 &io, *pIo - io
; 199  :             );

  00128	e598e000	 ldr         lr, [r8]
  0012c	e5990000	 ldr         r0, [r9]
  00130	e59d301c	 ldr         r3, [sp, #0x1C]
  00134	e04ee005	 sub         lr, lr, r5
  00138	e58de004	 str         lr, [sp, #4]
  0013c	e28de020	 add         lr, sp, #0x20
  00140	e5933000	 ldr         r3, [r3]
  00144	e59d1054	 ldr         r1, [sp, #0x54]
  00148	e0400004	 sub         r0, r0, r4
  0014c	e58de008	 str         lr, [sp, #8]
  00150	e28de024	 add         lr, sp, #0x24
  00154	e58d000c	 str         r0, [sp, #0xC]
  00158	e1a02006	 mov         r2, r6
  0015c	e1a0000b	 mov         r0, r11
  00160	e58de000	 str         lr, [sp]
  00164	eb000000	 bl          PCIConfigBridge

; 200  :             break;

  00168	e59d4068	 ldr         r4, [sp, #0x68]
  0016c	e5dd5056	 ldrb        r5, [sp, #0x56]
  00170	e5dd6055	 ldrb        r6, [sp, #0x55]
  00174	ea000018	 b           |$LN31@PCIScanLoc|
  00178		 |$LN9@PCIScanLoc|

; 167  :         case PCI_DEVICE_TYPE:
; 168  :             // Depending on mode configure device
; 169  :             if (count == -1) {

  00178	e37a0001	 cmn         r10, #1

; 170  :                 PCIConfigDevice(busId, pciLoc, pMem, pIo);
; 171  :             } else {

  0017c	0a000011	 beq         |$LN24@PCIScanLoc|

; 172  :                 for (ix = 0; ix < count; ix++) {

  00180	e3a01000	 mov         r1, #0
  00184	e35a0000	 cmp         r10, #0
  00188	0a000014	 beq         |$LN29@PCIScanLoc|
  0018c	e1a02004	 mov         r2, r4
  00190		 |$LL6@PCIScanLoc|

; 173  :                     if (
; 174  :                         aPciLoc[ix].bus == pciLoc.bus &&
; 175  :                         aPciLoc[ix].dev == pciLoc.dev &&
; 176  :                         aPciLoc[ix].fnc == pciLoc.fnc
; 177  :                     ) {                        

  00190	e5d23002	 ldrb        r3, [r2, #2]
  00194	e1530005	 cmp         r3, r5
  00198	1a000005	 bne         |$LN5@PCIScanLoc|
  0019c	e5d23001	 ldrb        r3, [r2, #1]
  001a0	e1530006	 cmp         r3, r6
  001a4	1a000002	 bne         |$LN5@PCIScanLoc|
  001a8	e5d23000	 ldrb        r3, [r2]
  001ac	e1530007	 cmp         r3, r7
  001b0	0a000004	 beq         |$LN24@PCIScanLoc|
  001b4		 |$LN5@PCIScanLoc|

; 172  :                 for (ix = 0; ix < count; ix++) {

  001b4	e2811001	 add         r1, r1, #1
  001b8	e151000a	 cmp         r1, r10
  001bc	e2822004	 add         r2, r2, #4
  001c0	3afffff2	 bcc         |$LL6@PCIScanLoc|
  001c4	ea000004	 b           |$LN31@PCIScanLoc|
  001c8		 |$LN24@PCIScanLoc|

; 178  :                         PCIConfigDevice(busId, pciLoc, pMem, pIo);

  001c8	e59d1054	 ldr         r1, [sp, #0x54]
  001cc	e1a03009	 mov         r3, r9
  001d0	e1a02008	 mov         r2, r8
  001d4	e1a0000b	 mov         r0, r11
  001d8	eb000000	 bl          PCIConfigDevice
  001dc		 |$LN31@PCIScanLoc|
  001dc	e5dd3018	 ldrb        r3, [sp, #0x18]
  001e0		 |$LN29@PCIScanLoc|

; 201  :         }
; 202  :     
; 203  :         // Break loop if device isn't multifunction
; 204  :         if (pciLoc.fnc == 0 && (header & PCI_MULTIFUNCTION) == 0) break;

  001e0	e3570000	 cmp         r7, #0
  001e4	1a000001	 bne         |$LN14@PCIScanLoc|
  001e8	e3130080	 tst         r3, #0x80
  001ec	0a000004	 beq         |$LN25@PCIScanLoc|
  001f0		 |$LN14@PCIScanLoc|

; 157  : 
; 158  :     // Loop over all possible device functions
; 159  :     for (pciLoc.fnc = 0; pciLoc.fnc < PCI_MAX_FUNCTION; pciLoc.fnc++) {

  001f0	e2873001	 add         r3, r7, #1
  001f4	e20370ff	 and         r7, r3, #0xFF
  001f8	e5cd7054	 strb        r7, [sp, #0x54]
  001fc	e3570008	 cmp         r7, #8
  00200	3affffa1	 bcc         |$LL15@PCIScanLoc|
  00204		 |$LN25@PCIScanLoc|

; 205  :         
; 206  :     }
; 207  : 
; 208  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 209  :         L"-PCIScanLocation(memBase = 0x%08x, ioBase = 0x%08x)\r\n", *pMem, *pIo
; 210  :     ));

  00204	e59f3028	 ldr         r3, [pc, #0x28]
  00208	e5933440	 ldr         r3, [r3, #0x440]
  0020c	e3130c01	 tst         r3, #1, 24
  00210	13130004	 tstne       r3, #4
  00214	15992000	 ldrne       r2, [r9]
  00218	15981000	 ldrne       r1, [r8]
  0021c	159f000c	 ldrne       r0, [pc, #0xC]
  00220	1b000000	 blne        NKDbgPrintfW

; 211  : }

  00224	e28dd028	 add         sp, sp, #0x28
  00228	e89d6ff0	 ldmia       sp, {r4 - r11, sp, lr}
  0022c	e12fff1e	 bx          lr
  00230		 |$LN35@PCIScanLoc|
  00230		 |$LN36@PCIScanLoc|
  00230	00000000	 DCD         |??_C@_1GM@EDBDABME@?$AA?9?$AAP?$AAC?$AAI?$AAS?$AAc?$AAa?$AAn?$AAL?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  00234		 |$LN37@PCIScanLoc|
  00234	00000000	 DCD         |dpCurSettings|
  00238		 |$LN38@PCIScanLoc|
  00238	00000000	 DCD         |??_C@_1HK@LMFBBPIM@?$AA?$CL?$AAP?$AAC?$AAI?$AAS?$AAc?$AAa?$AAn?$AAL?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@|
  0023c		 |$M40736|

			 ENDP  ; |PCIScanLocation|

	END
