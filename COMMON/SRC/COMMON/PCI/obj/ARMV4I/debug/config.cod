; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\PCI\config.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1DA@CDAFDGML@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@JMAHGIHP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@EKBKBPKH@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@HBKNFIMP@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| [ DATA ] ; `string'
	EXPORT	|OALPCIConfig|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T40555| DCD	|$LN13@OALPCIConf|
	DCD	0x40005f04
; File c:\wince600\platform\common\src\common\pci\config.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@CDAFDGML@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "C", 0x0, "I"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "1", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@JMAHGIHP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "P"
	DCB	0x0, "C", 0x0, "I", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@EKBKBPKH@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "P"
	DCB	0x0, "C", 0x0, "I", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@HBKNFIMP@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "C", 0x0, "I"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPCIConfig| PROC

; 75   : ) {

  00000		 |$LN13@OALPCIConf|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd04c	 sub         sp, sp, #0x4C
  00010		 |$M40552|

; 76   :     UINT32 mem, io, subBus;
; 77   : 
; 78   :     OALMSG(OAL_FUNC&&OAL_PCI, (
; 79   :         L"+OALPCIConfig(%d, 0x%08x, 0x%08x, 0x%08x, 0x%08x, %d, 0x%08x)\r\n",
; 80   :         busId, memBase, memSize, ioBase, ioSize, pciLocCount, aPciLoc
; 81   :     ));

  00010	e59f3154	 ldr         r3, [pc, #0x154]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130004	 tst         r3, #4
  0001c	0a000013	 beq         |$LN3@OALPCIConf|
  00020	e59f3144	 ldr         r3, [pc, #0x144]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130c01	 tst         r3, #1, 24
  0002c	0a00000f	 beq         |$LN3@OALPCIConf|
  00030	e59d306c	 ldr         r3, [sp, #0x6C]
  00034	e58d300c	 str         r3, [sp, #0xC]
  00038	e59d3068	 ldr         r3, [sp, #0x68]
  0003c	e58d3008	 str         r3, [sp, #8]
  00040	e59d3064	 ldr         r3, [sp, #0x64]
  00044	e58d3004	 str         r3, [sp, #4]
  00048	e59d3060	 ldr         r3, [sp, #0x60]
  0004c	e58d3000	 str         r3, [sp]
  00050	e59d305c	 ldr         r3, [sp, #0x5C]
  00054	e59d2058	 ldr         r2, [sp, #0x58]
  00058	e59d1054	 ldr         r1, [sp, #0x54]
  0005c	e59f0114	 ldr         r0, [pc, #0x114]
  00060	eb000000	 bl          NKDbgPrintfW
  00064	e3a03001	 mov         r3, #1
  00068	e58d303c	 str         r3, [sp, #0x3C]
  0006c	ea000001	 b           |$LN4@OALPCIConf|
  00070		 |$LN3@OALPCIConf|
  00070	e3a03000	 mov         r3, #0
  00074	e58d303c	 str         r3, [sp, #0x3C]
  00078		 |$LN4@OALPCIConf|

; 82   :     OALMSG(OAL_INFO, (L"INFO: PCI configuration start\r\n"));

  00078	e59f30ec	 ldr         r3, [pc, #0xEC]
  0007c	e5933440	 ldr         r3, [r3, #0x440]
  00080	e3130008	 tst         r3, #8
  00084	0a000004	 beq         |$LN5@OALPCIConf|
  00088	e59f00e4	 ldr         r0, [pc, #0xE4]
  0008c	eb000000	 bl          NKDbgPrintfW
  00090	e3a03001	 mov         r3, #1
  00094	e58d3040	 str         r3, [sp, #0x40]
  00098	ea000001	 b           |$LN6@OALPCIConf|
  0009c		 |$LN5@OALPCIConf|
  0009c	e3a03000	 mov         r3, #0
  000a0	e58d3040	 str         r3, [sp, #0x40]
  000a4		 |$LN6@OALPCIConf|

; 83   : 
; 84   :     mem = memBase;

  000a4	e59d3058	 ldr         r3, [sp, #0x58]
  000a8	e58d3018	 str         r3, [sp, #0x18]

; 85   :     io = ioBase;

  000ac	e59d3060	 ldr         r3, [sp, #0x60]
  000b0	e58d3014	 str         r3, [sp, #0x14]

; 86   :     subBus = 0;

  000b4	e3a03000	 mov         r3, #0
  000b8	e58d3010	 str         r3, [sp, #0x10]

; 87   :     PCIConfigBus(busId, 0, &subBus, &mem, &io, pciLocCount, aPciLoc);

  000bc	e59d306c	 ldr         r3, [sp, #0x6C]
  000c0	e58d3008	 str         r3, [sp, #8]
  000c4	e59d3068	 ldr         r3, [sp, #0x68]
  000c8	e58d3004	 str         r3, [sp, #4]
  000cc	e28d3014	 add         r3, sp, #0x14
  000d0	e58d3000	 str         r3, [sp]
  000d4	e28d3018	 add         r3, sp, #0x18
  000d8	e28d2010	 add         r2, sp, #0x10
  000dc	e3a01000	 mov         r1, #0
  000e0	e59d0054	 ldr         r0, [sp, #0x54]
  000e4	eb000000	 bl          PCIConfigBus

; 88   : 
; 89   :     OALMSG(OAL_INFO, (L"INFO: PCI configuration complete\r\n"));

  000e8	e59f307c	 ldr         r3, [pc, #0x7C]
  000ec	e5933440	 ldr         r3, [r3, #0x440]
  000f0	e3130008	 tst         r3, #8
  000f4	0a000004	 beq         |$LN7@OALPCIConf|
  000f8	e59f0070	 ldr         r0, [pc, #0x70]
  000fc	eb000000	 bl          NKDbgPrintfW
  00100	e3a03001	 mov         r3, #1
  00104	e58d3044	 str         r3, [sp, #0x44]
  00108	ea000001	 b           |$LN8@OALPCIConf|
  0010c		 |$LN7@OALPCIConf|
  0010c	e3a03000	 mov         r3, #0
  00110	e58d3044	 str         r3, [sp, #0x44]
  00114		 |$LN8@OALPCIConf|

; 90   :     OALMSG(OAL_FUNC&&OAL_PCI, (L"-OALPCIConfig(rc = 1)\r\n"));

  00114	e59f3050	 ldr         r3, [pc, #0x50]
  00118	e5933440	 ldr         r3, [r3, #0x440]
  0011c	e3130004	 tst         r3, #4
  00120	0a000008	 beq         |$LN9@OALPCIConf|
  00124	e59f3040	 ldr         r3, [pc, #0x40]
  00128	e5933440	 ldr         r3, [r3, #0x440]
  0012c	e3130c01	 tst         r3, #1, 24
  00130	0a000004	 beq         |$LN9@OALPCIConf|
  00134	e59f002c	 ldr         r0, [pc, #0x2C]
  00138	eb000000	 bl          NKDbgPrintfW
  0013c	e3a03001	 mov         r3, #1
  00140	e58d3048	 str         r3, [sp, #0x48]
  00144	ea000001	 b           |$LN10@OALPCIConf|
  00148		 |$LN9@OALPCIConf|
  00148	e3a03000	 mov         r3, #0
  0014c	e58d3048	 str         r3, [sp, #0x48]
  00150		 |$LN10@OALPCIConf|

; 91   :     return TRUE;

  00150	e3a03001	 mov         r3, #1
  00154	e58d3038	 str         r3, [sp, #0x38]

; 92   : }

  00158	e59d0038	 ldr         r0, [sp, #0x38]
  0015c	e28dd04c	 add         sp, sp, #0x4C
  00160	e89d6000	 ldmia       sp, {sp, lr}
  00164	e12fff1e	 bx          lr
  00168		 |$LN14@OALPCIConf|
  00168		 |$LN15@OALPCIConf|
  00168	00000000	 DCD         |??_C@_1DA@CDAFDGML@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0016c		 |$LN16@OALPCIConf|
  0016c	00000000	 DCD         |dpCurSettings|
  00170		 |$LN17@OALPCIConf|
  00170	00000000	 DCD         |??_C@_1EG@JMAHGIHP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe@|
  00174		 |$LN18@OALPCIConf|
  00174	00000000	 DCD         |??_C@_1EA@EKBKBPKH@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  00178		 |$LN19@OALPCIConf|
  00178	00000000	 DCD         |??_C@_1IA@HBKNFIMP@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@|
  0017c		 |$M40553|

			 ENDP  ; |OALPCIConfig|

	EXPORT	|??_C@_1GI@NMPJOLPG@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAu?$AAs?$AA?$CI?$AAs?$AAu?$AAb?$AAB?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAm?$AAe?$AAm?$AA?5?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@HHBKNHON@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AAV?$AAe?$AAn?$AAd?$AAo?$AAr?$AAI?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@IMKAPJPG@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAu?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| [ DATA ] ; `string'
	IMPORT	|OALPCIGetId|

  00008			 AREA	 |.pdata|, PDATA
|$T40580| DCD	|$LN16@PCIConfigB|
	DCD	0x40008504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@NMPJOLPG@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAu?$AAs?$AA?$CI?$AAs?$AAu?$AAb?$AAB?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAm?$AAe?$AAm?$AA?5?$AA?$DN@| DCB "-"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "B", 0x0, "u", 0x0, "s"
	DCB	0x0, "(", 0x0, "s", 0x0, "u", 0x0, "b", 0x0, "B", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X"
	DCB	0x0, ",", 0x0, " ", 0x0, "i", 0x0, "o", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@HHBKNHON@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AAV?$AAe?$AAn?$AAd?$AAo?$AAr?$AAI?$AAd@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "B"
	DCB	0x0, "u", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "V"
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "o", 0x0, "r", 0x0, "I"
	DCB	0x0, "d", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, "I", 0x0, "d", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@IMKAPJPG@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAu?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| DCB "+"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "B", 0x0, "u", 0x0, "s"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  0017c			 AREA	 |.text|, CODE, ARM

  0017c		 |PCIConfigBus| PROC

; 104  : ) {

  0017c		 |$LN16@PCIConfigB|
  0017c	e1a0c00d	 mov         r12, sp
  00180	e92d000f	 stmdb       sp!, {r0 - r3}
  00184	e92d5000	 stmdb       sp!, {r12, lr}
  00188	e24dd048	 sub         sp, sp, #0x48
  0018c		 |$M40577|

; 105  :     OAL_PCI_LOCATION pciLoc;
; 106  :     UINT32 id;
; 107  : 
; 108  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 109  :         L"+PCIConfigBus(%d, %d, %d, 0x%08x, 0x%08x, %d, 0x%08x)\r\n",
; 110  :         busId, bus, *pSubBus, *pMem, *pIo, count, aPciLoc
; 111  :     ));

  0018c	e59f31f0	 ldr         r3, [pc, #0x1F0]
  00190	e5933440	 ldr         r3, [r3, #0x440]
  00194	e3130c01	 tst         r3, #1, 24
  00198	0a000016	 beq         |$LN8@PCIConfigB|
  0019c	e59f31e0	 ldr         r3, [pc, #0x1E0]
  001a0	e5933440	 ldr         r3, [r3, #0x440]
  001a4	e3130004	 tst         r3, #4
  001a8	0a000012	 beq         |$LN8@PCIConfigB|
  001ac	e59d3068	 ldr         r3, [sp, #0x68]
  001b0	e58d300c	 str         r3, [sp, #0xC]
  001b4	e59d3064	 ldr         r3, [sp, #0x64]
  001b8	e58d3008	 str         r3, [sp, #8]
  001bc	e59d3060	 ldr         r3, [sp, #0x60]
  001c0	e5933000	 ldr         r3, [r3]
  001c4	e58d3004	 str         r3, [sp, #4]
  001c8	e59d305c	 ldr         r3, [sp, #0x5C]
  001cc	e5933000	 ldr         r3, [r3]
  001d0	e58d3000	 str         r3, [sp]
  001d4	e59d3058	 ldr         r3, [sp, #0x58]
  001d8	e5933000	 ldr         r3, [r3]
  001dc	e59d2054	 ldr         r2, [sp, #0x54]
  001e0	e59d1050	 ldr         r1, [sp, #0x50]
  001e4	e59f01a0	 ldr         r0, [pc, #0x1A0]
  001e8	eb000000	 bl          NKDbgPrintfW
  001ec	e3a03001	 mov         r3, #1
  001f0	e58d3038	 str         r3, [sp, #0x38]
  001f4	ea000001	 b           |$LN9@PCIConfigB|
  001f8		 |$LN8@PCIConfigB|
  001f8	e3a03000	 mov         r3, #0
  001fc	e58d3038	 str         r3, [sp, #0x38]
  00200		 |$LN9@PCIConfigB|

; 112  : 
; 113  :     // Loop over all possible devices
; 114  :     pciLoc.bus = bus;

  00200	e59d3054	 ldr         r3, [sp, #0x54]
  00204	e20330ff	 and         r3, r3, #0xFF
  00208	e5cd3016	 strb        r3, [sp, #0x16]

; 115  :     for (pciLoc.dev = 0; pciLoc.dev < PCI_MAX_DEVICES; pciLoc.dev++) {

  0020c	e3a03000	 mov         r3, #0
  00210	e5cd3015	 strb        r3, [sp, #0x15]
  00214	ea000003	 b           |$LN5@PCIConfigB|
  00218		 |$LN4@PCIConfigB|
  00218	e5dd3015	 ldrb        r3, [sp, #0x15]
  0021c	e2833001	 add         r3, r3, #1
  00220	e20330ff	 and         r3, r3, #0xFF
  00224	e5cd3015	 strb        r3, [sp, #0x15]
  00228		 |$LN5@PCIConfigB|
  00228	e5dd3015	 ldrb        r3, [sp, #0x15]
  0022c	e3530020	 cmp         r3, #0x20
  00230	aa00003a	 bge         |$LN3@PCIConfigB|

; 116  : 
; 117  :         // Try read vendor id, if it fails there isn't device at position
; 118  :         pciLoc.fnc = 0;

  00234	e3a03000	 mov         r3, #0
  00238	e5cd3014	 strb        r3, [sp, #0x14]

; 119  :         id = OALPCIGetId(busId, pciLoc);

  0023c	e59d1014	 ldr         r1, [sp, #0x14]
  00240	e59d0050	 ldr         r0, [sp, #0x50]
  00244	eb000000	 bl          OALPCIGetId
  00248	e58d003c	 str         r0, [sp, #0x3C]
  0024c	e59d303c	 ldr         r3, [sp, #0x3C]
  00250	e58d3010	 str         r3, [sp, #0x10]

; 120  :         if (
; 121  :             LOWORD(id) == PCI_INVALID_VENDORID ||
; 122  :             HIWORD(id) == PCI_INVALID_DEVICEID
; 123  :         ) continue;

  00254	e59d3010	 ldr         r3, [sp, #0x10]
  00258	e1a03803	 mov         r3, r3, lsl #16
  0025c	e1a03823	 mov         r3, r3, lsr #16
  00260	e1a02003	 mov         r2, r3
  00264	e3a03cff	 mov         r3, #0xFF, 24
  00268	e38330ff	 orr         r3, r3, #0xFF
  0026c	e1520003	 cmp         r2, r3
  00270	0a000008	 beq         |$LN1@PCIConfigB|
  00274	e59d3010	 ldr         r3, [sp, #0x10]
  00278	e1a03823	 mov         r3, r3, lsr #16
  0027c	e1a03803	 mov         r3, r3, lsl #16
  00280	e1a03823	 mov         r3, r3, lsr #16
  00284	e1a02003	 mov         r2, r3
  00288	e3a03cff	 mov         r3, #0xFF, 24
  0028c	e38330ff	 orr         r3, r3, #0xFF
  00290	e1520003	 cmp         r2, r3
  00294	1a000000	 bne         |$LN2@PCIConfigB|
  00298		 |$LN1@PCIConfigB|
  00298	eaffffde	 b           |$LN4@PCIConfigB|
  0029c		 |$LN2@PCIConfigB|

; 124  : 
; 125  :         OALMSG(OAL_INFO, (
; 126  :             L"INFO: Bus %d Device %d: VendorId 0x%x DeviceId 0x%x\r\n",
; 127  :             pciLoc.bus, pciLoc.dev, LOWORD(id), HIWORD(id)
; 128  :         ));

  0029c	e59f30e0	 ldr         r3, [pc, #0xE0]
  002a0	e5933440	 ldr         r3, [r3, #0x440]
  002a4	e3130008	 tst         r3, #8
  002a8	0a00000e	 beq         |$LN10@PCIConfigB|
  002ac	e59d3010	 ldr         r3, [sp, #0x10]
  002b0	e1a03823	 mov         r3, r3, lsr #16
  002b4	e1a03803	 mov         r3, r3, lsl #16
  002b8	e1a03823	 mov         r3, r3, lsr #16
  002bc	e58d3000	 str         r3, [sp]
  002c0	e59d3010	 ldr         r3, [sp, #0x10]
  002c4	e1a03803	 mov         r3, r3, lsl #16
  002c8	e1a03823	 mov         r3, r3, lsr #16
  002cc	e5dd2015	 ldrb        r2, [sp, #0x15]
  002d0	e5dd1016	 ldrb        r1, [sp, #0x16]
  002d4	e59f00ac	 ldr         r0, [pc, #0xAC]
  002d8	eb000000	 bl          NKDbgPrintfW
  002dc	e3a03001	 mov         r3, #1
  002e0	e58d3040	 str         r3, [sp, #0x40]
  002e4	ea000001	 b           |$LN11@PCIConfigB|
  002e8		 |$LN10@PCIConfigB|
  002e8	e3a03000	 mov         r3, #0
  002ec	e58d3040	 str         r3, [sp, #0x40]
  002f0		 |$LN11@PCIConfigB|

; 129  :         
; 130  :         // Scan this device
; 131  :         PCIScanLocation(busId, pciLoc, pSubBus, pMem, pIo, count, aPciLoc);         

  002f0	e59d3068	 ldr         r3, [sp, #0x68]
  002f4	e58d3008	 str         r3, [sp, #8]
  002f8	e59d3064	 ldr         r3, [sp, #0x64]
  002fc	e58d3004	 str         r3, [sp, #4]
  00300	e59d3060	 ldr         r3, [sp, #0x60]
  00304	e58d3000	 str         r3, [sp]
  00308	e59d305c	 ldr         r3, [sp, #0x5C]
  0030c	e59d2058	 ldr         r2, [sp, #0x58]
  00310	e59d1014	 ldr         r1, [sp, #0x14]
  00314	e59d0050	 ldr         r0, [sp, #0x50]
  00318	eb000000	 bl          PCIScanLocation

; 132  :     }      

  0031c	eaffffbd	 b           |$LN4@PCIConfigB|
  00320		 |$LN3@PCIConfigB|

; 133  : 
; 134  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 135  :         L"-PCIConfigBus(subBus = %d, mem = 0x%X, io = 0x%X)\r\n", 
; 136  :         *pSubBus, *pMem, *pIo
; 137  :     ));

  00320	e59f305c	 ldr         r3, [pc, #0x5C]
  00324	e5933440	 ldr         r3, [r3, #0x440]
  00328	e3130c01	 tst         r3, #1, 24
  0032c	0a00000e	 beq         |$LN12@PCIConfigB|
  00330	e59f304c	 ldr         r3, [pc, #0x4C]
  00334	e5933440	 ldr         r3, [r3, #0x440]
  00338	e3130004	 tst         r3, #4
  0033c	0a00000a	 beq         |$LN12@PCIConfigB|
  00340	e59d3060	 ldr         r3, [sp, #0x60]
  00344	e5933000	 ldr         r3, [r3]
  00348	e59d205c	 ldr         r2, [sp, #0x5C]
  0034c	e5922000	 ldr         r2, [r2]
  00350	e59d1058	 ldr         r1, [sp, #0x58]
  00354	e5911000	 ldr         r1, [r1]
  00358	e59f0020	 ldr         r0, [pc, #0x20]
  0035c	eb000000	 bl          NKDbgPrintfW
  00360	e3a03001	 mov         r3, #1
  00364	e58d3044	 str         r3, [sp, #0x44]
  00368	ea000001	 b           |$LN13@PCIConfigB|
  0036c		 |$LN12@PCIConfigB|
  0036c	e3a03000	 mov         r3, #0
  00370	e58d3044	 str         r3, [sp, #0x44]
  00374		 |$LN13@PCIConfigB|

; 138  : }

  00374	e28dd048	 add         sp, sp, #0x48
  00378	e89d6000	 ldmia       sp, {sp, lr}
  0037c	e12fff1e	 bx          lr
  00380		 |$LN17@PCIConfigB|
  00380		 |$LN18@PCIConfigB|
  00380	00000000	 DCD         |??_C@_1GI@NMPJOLPG@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAu?$AAs?$AA?$CI?$AAs?$AAu?$AAb?$AAB?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAm?$AAe?$AAm?$AA?5?$AA?$DN@|
  00384		 |$LN19@PCIConfigB|
  00384	00000000	 DCD         |dpCurSettings|
  00388		 |$LN20@PCIConfigB|
  00388	00000000	 DCD         |??_C@_1GM@HHBKNHON@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AAV?$AAe?$AAn?$AAd?$AAo?$AAr?$AAI?$AAd@|
  0038c		 |$LN21@PCIConfigB|
  0038c	00000000	 DCD         |??_C@_1HA@IMKAPJPG@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAu?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@|
  00390		 |$M40578|

			 ENDP  ; |PCIConfigBus|

	EXPORT	|??_C@_1GM@EDBDABME@?$AA?9?$AAP?$AAC?$AAI?$AAS?$AAc?$AAa?$AAn?$AAL?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@LMFBBPIM@?$AA?$CL?$AAP?$AAC?$AAI?$AAS?$AAc?$AAa?$AAn?$AAL?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|OALPCIGetHeaderType|

  00010			 AREA	 |.pdata|, PDATA
|$T40611| DCD	|$LN24@PCIScanLoc|
	DCD	0x4000df04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@EDBDABME@?$AA?9?$AAP?$AAC?$AAI?$AAS?$AAc?$AAa?$AAn?$AAL?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "-"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "S", 0x0, "c", 0x0, "a"
	DCB	0x0, "n", 0x0, "L", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, "(", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "i", 0x0, "o"
	DCB	0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@LMFBBPIM@?$AA?$CL?$AAP?$AAC?$AAI?$AAS?$AAc?$AAa?$AAn?$AAL?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@| DCB "+"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "S", 0x0, "c", 0x0, "a"
	DCB	0x0, "n", 0x0, "L", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%"
	DCB	0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00390			 AREA	 |.text|, CODE, ARM

  00390		 |PCIScanLocation| PROC

; 147  : ) {

  00390		 |$LN24@PCIScanLoc|
  00390	e1a0c00d	 mov         r12, sp
  00394	e92d000f	 stmdb       sp!, {r0 - r3}
  00398	e92d5000	 stmdb       sp!, {r12, lr}
  0039c	e24dd080	 sub         sp, sp, #0x80
  003a0		 |$M40608|

; 148  :     UINT8 header;
; 149  :     UINT32 secBus;
; 150  :     UINT32 ix, mem, io;
; 151  : 
; 152  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 153  :         L"+PCIScanLocation(%d, %d/%d/%d, %d, 0x%x, 0x%08x, %d, 0x%x)\r\n", 
; 154  :         busId, pciLoc.bus, pciLoc.dev, pciLoc.fnc, *pSubBus, *pMem, *pIo,
; 155  :         count, aPciLoc
; 156  :     ));        

  003a0	e59f335c	 ldr         r3, [pc, #0x35C]
  003a4	e5933440	 ldr         r3, [r3, #0x440]
  003a8	e3130c01	 tst         r3, #1, 24
  003ac	0a00001a	 beq         |$LN18@PCIScanLoc|
  003b0	e59f334c	 ldr         r3, [pc, #0x34C]
  003b4	e5933440	 ldr         r3, [r3, #0x440]
  003b8	e3130004	 tst         r3, #4
  003bc	0a000016	 beq         |$LN18@PCIScanLoc|
  003c0	e59d30a0	 ldr         r3, [sp, #0xA0]
  003c4	e58d3014	 str         r3, [sp, #0x14]
  003c8	e59d309c	 ldr         r3, [sp, #0x9C]
  003cc	e58d3010	 str         r3, [sp, #0x10]
  003d0	e59d3098	 ldr         r3, [sp, #0x98]
  003d4	e5933000	 ldr         r3, [r3]
  003d8	e58d300c	 str         r3, [sp, #0xC]
  003dc	e59d3094	 ldr         r3, [sp, #0x94]
  003e0	e5933000	 ldr         r3, [r3]
  003e4	e58d3008	 str         r3, [sp, #8]
  003e8	e59d3090	 ldr         r3, [sp, #0x90]
  003ec	e5933000	 ldr         r3, [r3]
  003f0	e58d3004	 str         r3, [sp, #4]
  003f4	e5dd308c	 ldrb        r3, [sp, #0x8C]
  003f8	e58d3000	 str         r3, [sp]
  003fc	e5dd308d	 ldrb        r3, [sp, #0x8D]
  00400	e5dd208e	 ldrb        r2, [sp, #0x8E]
  00404	e59d1088	 ldr         r1, [sp, #0x88]
  00408	e59f02f8	 ldr         r0, [pc, #0x2F8]
  0040c	eb000000	 bl          NKDbgPrintfW
  00410	e3a03001	 mov         r3, #1
  00414	e58d3070	 str         r3, [sp, #0x70]
  00418	ea000001	 b           |$LN19@PCIScanLoc|
  0041c		 |$LN18@PCIScanLoc|
  0041c	e3a03000	 mov         r3, #0
  00420	e58d3070	 str         r3, [sp, #0x70]
  00424		 |$LN19@PCIScanLoc|

; 157  : 
; 158  :     // Loop over all possible device functions
; 159  :     for (pciLoc.fnc = 0; pciLoc.fnc < PCI_MAX_FUNCTION; pciLoc.fnc++) {

  00424	e3a03000	 mov         r3, #0
  00428	e5cd308c	 strb        r3, [sp, #0x8C]
  0042c	ea000003	 b           |$LN15@PCIScanLoc|
  00430		 |$LN14@PCIScanLoc|
  00430	e5dd308c	 ldrb        r3, [sp, #0x8C]
  00434	e2833001	 add         r3, r3, #1
  00438	e20330ff	 and         r3, r3, #0xFF
  0043c	e5cd308c	 strb        r3, [sp, #0x8C]
  00440		 |$LN15@PCIScanLoc|
  00440	e5dd308c	 ldrb        r3, [sp, #0x8C]
  00444	e3530008	 cmp         r3, #8
  00448	aa000096	 bge         |$LN13@PCIScanLoc|

; 160  :     
; 161  :         // Read header to find device type
; 162  :         header = OALPCIGetHeaderType(busId, pciLoc);

  0044c	e59d108c	 ldr         r1, [sp, #0x8C]
  00450	e59d0088	 ldr         r0, [sp, #0x88]
  00454	eb000000	 bl          OALPCIGetHeaderType
  00458	e5cd0074	 strb        r0, [sp, #0x74]
  0045c	e5dd3074	 ldrb        r3, [sp, #0x74]
  00460	e5cd3028	 strb        r3, [sp, #0x28]

; 163  :         if (header == 0xFF) break;

  00464	e5dd3028	 ldrb        r3, [sp, #0x28]
  00468	e35300ff	 cmp         r3, #0xFF
  0046c	1a000000	 bne         |$LN12@PCIScanLoc|
  00470	ea00008c	 b           |$LN13@PCIScanLoc|
  00474		 |$LN12@PCIScanLoc|

; 164  : 
; 165  :         // Depending on device type do configuration
; 166  :         switch (header & ~PCI_MULTIFUNCTION) {

  00474	e5dd3028	 ldrb        r3, [sp, #0x28]
  00478	e1a02003	 mov         r2, r3
  0047c	e3e03080	 mvn         r3, #0x80
  00480	e0023003	 and         r3, r2, r3
  00484	e58d3078	 str         r3, [sp, #0x78]
  00488	e59d3078	 ldr         r3, [sp, #0x78]
  0048c	e3530000	 cmp         r3, #0
  00490	0a000006	 beq         |$LN9@PCIScanLoc|
  00494	e59d3078	 ldr         r3, [sp, #0x78]
  00498	e3530000	 cmp         r3, #0
  0049c	da000079	 ble         |$LN10@PCIScanLoc|
  004a0	e59d3078	 ldr         r3, [sp, #0x78]
  004a4	e3530002	 cmp         r3, #2
  004a8	da00003b	 ble         |$LN2@PCIScanLoc|
  004ac	ea000075	 b           |$LN10@PCIScanLoc|
  004b0		 |$LN9@PCIScanLoc|

; 167  :         case PCI_DEVICE_TYPE:
; 168  :             // Depending on mode configure device
; 169  :             if (count == -1) {

  004b0	e59d309c	 ldr         r3, [sp, #0x9C]
  004b4	e3730001	 cmn         r3, #1
  004b8	1a000005	 bne         |$LN8@PCIScanLoc|

; 170  :                 PCIConfigDevice(busId, pciLoc, pMem, pIo);

  004bc	e59d3098	 ldr         r3, [sp, #0x98]
  004c0	e59d2094	 ldr         r2, [sp, #0x94]
  004c4	e59d108c	 ldr         r1, [sp, #0x8C]
  004c8	e59d0088	 ldr         r0, [sp, #0x88]
  004cc	eb000000	 bl          PCIConfigDevice

; 171  :             } else {

  004d0	ea000030	 b           |$LN7@PCIScanLoc|
  004d4		 |$LN8@PCIScanLoc|

; 172  :                 for (ix = 0; ix < count; ix++) {

  004d4	e3a03000	 mov         r3, #0
  004d8	e58d301c	 str         r3, [sp, #0x1C]
  004dc	ea000002	 b           |$LN6@PCIScanLoc|
  004e0		 |$LN5@PCIScanLoc|
  004e0	e59d301c	 ldr         r3, [sp, #0x1C]
  004e4	e2833001	 add         r3, r3, #1
  004e8	e58d301c	 str         r3, [sp, #0x1C]
  004ec		 |$LN6@PCIScanLoc|
  004ec	e59d201c	 ldr         r2, [sp, #0x1C]
  004f0	e59d309c	 ldr         r3, [sp, #0x9C]
  004f4	e1520003	 cmp         r2, r3
  004f8	2a000026	 bcs         |$LN4@PCIScanLoc|

; 173  :                     if (
; 174  :                         aPciLoc[ix].bus == pciLoc.bus &&
; 175  :                         aPciLoc[ix].dev == pciLoc.dev &&
; 176  :                         aPciLoc[ix].fnc == pciLoc.fnc
; 177  :                     ) {                        

  004fc	e59d101c	 ldr         r1, [sp, #0x1C]
  00500	e3a03004	 mov         r3, #4
  00504	e0020391	 mul         r2, r1, r3
  00508	e59d30a0	 ldr         r3, [sp, #0xA0]
  0050c	e0833002	 add         r3, r3, r2
  00510	e2833002	 add         r3, r3, #2
  00514	e5d33000	 ldrb        r3, [r3]
  00518	e1a02003	 mov         r2, r3
  0051c	e5dd308e	 ldrb        r3, [sp, #0x8E]
  00520	e1520003	 cmp         r2, r3
  00524	1a00001a	 bne         |$LN3@PCIScanLoc|
  00528	e59d101c	 ldr         r1, [sp, #0x1C]
  0052c	e3a03004	 mov         r3, #4
  00530	e0020391	 mul         r2, r1, r3
  00534	e59d30a0	 ldr         r3, [sp, #0xA0]
  00538	e0833002	 add         r3, r3, r2
  0053c	e2833001	 add         r3, r3, #1
  00540	e5d33000	 ldrb        r3, [r3]
  00544	e1a02003	 mov         r2, r3
  00548	e5dd308d	 ldrb        r3, [sp, #0x8D]
  0054c	e1520003	 cmp         r2, r3
  00550	1a00000f	 bne         |$LN3@PCIScanLoc|
  00554	e59d101c	 ldr         r1, [sp, #0x1C]
  00558	e3a03004	 mov         r3, #4
  0055c	e0020391	 mul         r2, r1, r3
  00560	e59d30a0	 ldr         r3, [sp, #0xA0]
  00564	e0833002	 add         r3, r3, r2
  00568	e5d33000	 ldrb        r3, [r3]
  0056c	e1a02003	 mov         r2, r3
  00570	e5dd308c	 ldrb        r3, [sp, #0x8C]
  00574	e1520003	 cmp         r2, r3
  00578	1a000005	 bne         |$LN3@PCIScanLoc|

; 178  :                         PCIConfigDevice(busId, pciLoc, pMem, pIo);

  0057c	e59d3098	 ldr         r3, [sp, #0x98]
  00580	e59d2094	 ldr         r2, [sp, #0x94]
  00584	e59d108c	 ldr         r1, [sp, #0x8C]
  00588	e59d0088	 ldr         r0, [sp, #0x88]
  0058c	eb000000	 bl          PCIConfigDevice

; 179  :                         break;

  00590	ea000000	 b           |$LN4@PCIScanLoc|
  00594		 |$LN3@PCIScanLoc|

; 180  :                     }
; 181  :                 }

  00594	eaffffd1	 b           |$LN5@PCIScanLoc|
  00598		 |$LN4@PCIScanLoc|
  00598		 |$LN7@PCIScanLoc|

; 182  :             }
; 183  :             break;

  00598	ea00003a	 b           |$LN10@PCIScanLoc|
  0059c		 |$LN2@PCIScanLoc|

; 184  :         case PCI_BRIDGE_TYPE:
; 185  :         case PCI_CARDBUS_TYPE:
; 186  :             secBus = ++(*pSubBus);

  0059c	e59d3090	 ldr         r3, [sp, #0x90]
  005a0	e5933000	 ldr         r3, [r3]
  005a4	e2832001	 add         r2, r3, #1
  005a8	e59d3090	 ldr         r3, [sp, #0x90]
  005ac	e5832000	 str         r2, [r3]
  005b0	e59d3090	 ldr         r3, [sp, #0x90]
  005b4	e5933000	 ldr         r3, [r3]
  005b8	e58d3020	 str         r3, [sp, #0x20]

; 187  :             // Set primary, secondary and subordinate bus numbers
; 188  :             PCIConfigBridge(busId, pciLoc, secBus, 0xFF, pMem, 0, pIo, 0);

  005bc	e3a03000	 mov         r3, #0
  005c0	e58d300c	 str         r3, [sp, #0xC]
  005c4	e59d3098	 ldr         r3, [sp, #0x98]
  005c8	e58d3008	 str         r3, [sp, #8]
  005cc	e3a03000	 mov         r3, #0
  005d0	e58d3004	 str         r3, [sp, #4]
  005d4	e59d3094	 ldr         r3, [sp, #0x94]
  005d8	e58d3000	 str         r3, [sp]
  005dc	e3a030ff	 mov         r3, #0xFF
  005e0	e59d2020	 ldr         r2, [sp, #0x20]
  005e4	e59d108c	 ldr         r1, [sp, #0x8C]
  005e8	e59d0088	 ldr         r0, [sp, #0x88]
  005ec	eb000000	 bl          PCIConfigBridge

; 189  :             // Call config routing recursively
; 190  :             mem = *pMem;

  005f0	e59d3094	 ldr         r3, [sp, #0x94]
  005f4	e5933000	 ldr         r3, [r3]
  005f8	e58d3024	 str         r3, [sp, #0x24]

; 191  :             io = *pIo;

  005fc	e59d3098	 ldr         r3, [sp, #0x98]
  00600	e5933000	 ldr         r3, [r3]
  00604	e58d3018	 str         r3, [sp, #0x18]

; 192  :             PCIConfigBus(
; 193  :                 busId, *pSubBus, pSubBus, pMem, pIo, count, aPciLoc
; 194  :             );

  00608	e59d30a0	 ldr         r3, [sp, #0xA0]
  0060c	e58d3008	 str         r3, [sp, #8]
  00610	e59d309c	 ldr         r3, [sp, #0x9C]
  00614	e58d3004	 str         r3, [sp, #4]
  00618	e59d3098	 ldr         r3, [sp, #0x98]
  0061c	e58d3000	 str         r3, [sp]
  00620	e59d3094	 ldr         r3, [sp, #0x94]
  00624	e59d2090	 ldr         r2, [sp, #0x90]
  00628	e59d1090	 ldr         r1, [sp, #0x90]
  0062c	e5911000	 ldr         r1, [r1]
  00630	e59d0088	 ldr         r0, [sp, #0x88]
  00634	eb000000	 bl          PCIConfigBus

; 195  :             // Set bus numbers and configure bridge if device is behind it
; 196  :             PCIConfigBridge(
; 197  :                 busId, pciLoc, secBus, *pSubBus, &mem, *pMem - mem, 
; 198  :                 &io, *pIo - io
; 199  :             );

  00638	e59d3098	 ldr         r3, [sp, #0x98]
  0063c	e5932000	 ldr         r2, [r3]
  00640	e59d3018	 ldr         r3, [sp, #0x18]
  00644	e0423003	 sub         r3, r2, r3
  00648	e58d300c	 str         r3, [sp, #0xC]
  0064c	e28d3018	 add         r3, sp, #0x18
  00650	e58d3008	 str         r3, [sp, #8]
  00654	e59d3094	 ldr         r3, [sp, #0x94]
  00658	e5932000	 ldr         r2, [r3]
  0065c	e59d3024	 ldr         r3, [sp, #0x24]
  00660	e0423003	 sub         r3, r2, r3
  00664	e58d3004	 str         r3, [sp, #4]
  00668	e28d3024	 add         r3, sp, #0x24
  0066c	e58d3000	 str         r3, [sp]
  00670	e59d3090	 ldr         r3, [sp, #0x90]
  00674	e5933000	 ldr         r3, [r3]
  00678	e59d2020	 ldr         r2, [sp, #0x20]
  0067c	e59d108c	 ldr         r1, [sp, #0x8C]
  00680	e59d0088	 ldr         r0, [sp, #0x88]
  00684	eb000000	 bl          PCIConfigBridge
  00688		 |$LN10@PCIScanLoc|

; 200  :             break;
; 201  :         }
; 202  :     
; 203  :         // Break loop if device isn't multifunction
; 204  :         if (pciLoc.fnc == 0 && (header & PCI_MULTIFUNCTION) == 0) break;

  00688	e5dd308c	 ldrb        r3, [sp, #0x8C]
  0068c	e3530000	 cmp         r3, #0
  00690	1a000003	 bne         |$LN1@PCIScanLoc|
  00694	e5dd3028	 ldrb        r3, [sp, #0x28]
  00698	e3130080	 tst         r3, #0x80
  0069c	1a000000	 bne         |$LN1@PCIScanLoc|
  006a0	ea000000	 b           |$LN13@PCIScanLoc|
  006a4		 |$LN1@PCIScanLoc|

; 205  :         
; 206  :     }

  006a4	eaffff61	 b           |$LN14@PCIScanLoc|
  006a8		 |$LN13@PCIScanLoc|

; 207  : 
; 208  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 209  :         L"-PCIScanLocation(memBase = 0x%08x, ioBase = 0x%08x)\r\n", *pMem, *pIo
; 210  :     ));

  006a8	e59f3054	 ldr         r3, [pc, #0x54]
  006ac	e5933440	 ldr         r3, [r3, #0x440]
  006b0	e3130c01	 tst         r3, #1, 24
  006b4	0a00000c	 beq         |$LN20@PCIScanLoc|
  006b8	e59f3044	 ldr         r3, [pc, #0x44]
  006bc	e5933440	 ldr         r3, [r3, #0x440]
  006c0	e3130004	 tst         r3, #4
  006c4	0a000008	 beq         |$LN20@PCIScanLoc|
  006c8	e59d3098	 ldr         r3, [sp, #0x98]
  006cc	e5932000	 ldr         r2, [r3]
  006d0	e59d3094	 ldr         r3, [sp, #0x94]
  006d4	e5931000	 ldr         r1, [r3]
  006d8	e59f0020	 ldr         r0, [pc, #0x20]
  006dc	eb000000	 bl          NKDbgPrintfW
  006e0	e3a03001	 mov         r3, #1
  006e4	e58d307c	 str         r3, [sp, #0x7C]
  006e8	ea000001	 b           |$LN21@PCIScanLoc|
  006ec		 |$LN20@PCIScanLoc|
  006ec	e3a03000	 mov         r3, #0
  006f0	e58d307c	 str         r3, [sp, #0x7C]
  006f4		 |$LN21@PCIScanLoc|

; 211  : }

  006f4	e28dd080	 add         sp, sp, #0x80
  006f8	e89d6000	 ldmia       sp, {sp, lr}
  006fc	e12fff1e	 bx          lr
  00700		 |$LN25@PCIScanLoc|
  00700		 |$LN26@PCIScanLoc|
  00700	00000000	 DCD         |??_C@_1GM@EDBDABME@?$AA?9?$AAP?$AAC?$AAI?$AAS?$AAc?$AAa?$AAn?$AAL?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  00704		 |$LN27@PCIScanLoc|
  00704	00000000	 DCD         |dpCurSettings|
  00708		 |$LN28@PCIScanLoc|
  00708	00000000	 DCD         |??_C@_1HK@LMFBBPIM@?$AA?$CL?$AAP?$AAC?$AAI?$AAS?$AAc?$AAa?$AAn?$AAL?$AAo?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@|
  0070c		 |$M40609|

			 ENDP  ; |PCIScanLocation|

	EXPORT	|??_C@_1GM@POGKGJPM@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@HEDILPDD@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAM?$AAe?$AAm?$AA?5?$AAB?$AAA?$AAR?$AA?$FL?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@ENKOGFDH@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AA6?$AA4?$AA?5?$AAb?$AAi?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@JIHPKAJL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AA?5?$AAB?$AAA?$AAR?$AA?$FL?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@MHOBDJJH@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0@| [ DATA ] ; `string'
	IMPORT	|OALPCICfgRead|
	IMPORT	|OALPCICfgWrite|

  00018			 AREA	 |.pdata|, PDATA
|$T40639| DCD	|$LN26@PCIConfigD|
	DCD	0x4000eb04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@POGKGJPM@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "-"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "(", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "i", 0x0, "o"
	DCB	0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@HEDILPDD@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAM?$AAe?$AAm?$AA?5?$AAB?$AAA?$AAR?$AA?$FL?$AA?$CF@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "P"
	DCB	0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "f"
	DCB	0x0, "i", 0x0, "g", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "e"
	DCB	0x0, "m", 0x0, " ", 0x0, "B", 0x0, "A", 0x0, "R", 0x0, "["
	DCB	0x0, "%", 0x0, "d", 0x0, "]", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, " ", 0x0, "S", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@ENKOGFDH@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AA6?$AA4?$AA?5?$AAb?$AAi?$AAt@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, ":", 0x0, " ", 0x0, "P", 0x0, "C", 0x0, "I", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "6", 0x0, "4", 0x0, " ", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "s", 0x0, "p", 0x0, "a", 0x0, "c"
	DCB	0x0, "e", 0x0, " ", 0x0, "N", 0x0, "O", 0x0, "T", 0x0, " "
	DCB	0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@JIHPKAJL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AA?5?$AAB?$AAA?$AAR?$AA?$FL?$AA?$CF?$AAd@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "P"
	DCB	0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "f"
	DCB	0x0, "i", 0x0, "g", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, " ", 0x0, "B", 0x0, "A", 0x0, "R", 0x0, "[", 0x0, "%"
	DCB	0x0, "d", 0x0, "]", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, " ", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@MHOBDJJH@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0@| DCB "+"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%"
	DCB	0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0070c			 AREA	 |.text|, CODE, ARM

  0070c		 |PCIConfigDevice| PROC

; 219  : ) {

  0070c		 |$LN26@PCIConfigD|
  0070c	e1a0c00d	 mov         r12, sp
  00710	e92d000f	 stmdb       sp!, {r0 - r3}
  00714	e92d5000	 stmdb       sp!, {r12, lr}
  00718	e24dd058	 sub         sp, sp, #0x58
  0071c		 |$M40636|

; 220  :     UINT32 offset, address, size, ix;
; 221  :     UINT16 u16;
; 222  :     UINT8 u8;
; 223  : 
; 224  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 225  :         L"+PCIConfigDevice(%d, %d/%d/%d, 0x%08x, 0x%08x\r\n",
; 226  :         busId, pciLoc.bus, pciLoc.dev, pciLoc.fnc, *pMemBase, *pIoBase
; 227  :     ));

  0071c	e59f3380	 ldr         r3, [pc, #0x380]
  00720	e5933440	 ldr         r3, [r3, #0x440]
  00724	e3130c01	 tst         r3, #1, 24
  00728	0a000013	 beq         |$LN14@PCIConfigD|
  0072c	e59f3370	 ldr         r3, [pc, #0x370]
  00730	e5933440	 ldr         r3, [r3, #0x440]
  00734	e3130004	 tst         r3, #4
  00738	0a00000f	 beq         |$LN14@PCIConfigD|
  0073c	e59d306c	 ldr         r3, [sp, #0x6C]
  00740	e5933000	 ldr         r3, [r3]
  00744	e58d3008	 str         r3, [sp, #8]
  00748	e59d3068	 ldr         r3, [sp, #0x68]
  0074c	e5933000	 ldr         r3, [r3]
  00750	e58d3004	 str         r3, [sp, #4]
  00754	e5dd3064	 ldrb        r3, [sp, #0x64]
  00758	e58d3000	 str         r3, [sp]
  0075c	e5dd3065	 ldrb        r3, [sp, #0x65]
  00760	e5dd2066	 ldrb        r2, [sp, #0x66]
  00764	e59d1060	 ldr         r1, [sp, #0x60]
  00768	e59f0344	 ldr         r0, [pc, #0x344]
  0076c	eb000000	 bl          NKDbgPrintfW
  00770	e3a03001	 mov         r3, #1
  00774	e58d3044	 str         r3, [sp, #0x44]
  00778	ea000001	 b           |$LN15@PCIConfigD|
  0077c		 |$LN14@PCIConfigD|
  0077c	e3a03000	 mov         r3, #0
  00780	e58d3044	 str         r3, [sp, #0x44]
  00784		 |$LN15@PCIConfigD|

; 228  :     
; 229  :     // Scan all base registers
; 230  :     offset = FIELD_OFFSET(PCI_COMMON_CONFIG, u.type0.BaseAddresses); 

  00784	e3a03010	 mov         r3, #0x10
  00788	e58d3014	 str         r3, [sp, #0x14]

; 231  :     for (ix = 0; ix < PCI_TYPE0_ADDRESSES; ix++) {

  0078c	e3a03000	 mov         r3, #0
  00790	e58d300c	 str         r3, [sp, #0xC]
  00794	ea000002	 b           |$LN11@PCIConfigD|
  00798		 |$LN10@PCIConfigD|
  00798	e59d300c	 ldr         r3, [sp, #0xC]
  0079c	e2833001	 add         r3, r3, #1
  007a0	e58d300c	 str         r3, [sp, #0xC]
  007a4		 |$LN11@PCIConfigD|
  007a4	e59d300c	 ldr         r3, [sp, #0xC]
  007a8	e3530006	 cmp         r3, #6
  007ac	2a00008a	 bcs         |$LN9@PCIConfigD|

; 232  :         // Get required resource type and size
; 233  :         address = 0xFFFFFFFF;

  007b0	e3e03000	 mvn         r3, #0
  007b4	e58d301c	 str         r3, [sp, #0x1C]

; 234  :         OALPCICfgWrite(busId, pciLoc, offset, sizeof(address), &address);

  007b8	e28d301c	 add         r3, sp, #0x1C
  007bc	e58d3000	 str         r3, [sp]
  007c0	e3a03004	 mov         r3, #4
  007c4	e59d2014	 ldr         r2, [sp, #0x14]
  007c8	e59d1064	 ldr         r1, [sp, #0x64]
  007cc	e59d0060	 ldr         r0, [sp, #0x60]
  007d0	eb000000	 bl          OALPCICfgWrite

; 235  :         OALPCICfgRead(busId, pciLoc, offset, sizeof(address), &address);

  007d4	e28d301c	 add         r3, sp, #0x1C
  007d8	e58d3000	 str         r3, [sp]
  007dc	e3a03004	 mov         r3, #4
  007e0	e59d2014	 ldr         r2, [sp, #0x14]
  007e4	e59d1064	 ldr         r1, [sp, #0x64]
  007e8	e59d0060	 ldr         r0, [sp, #0x60]
  007ec	eb000000	 bl          OALPCICfgRead

; 236  :         if ((address & 1) != 0) {

  007f0	e59d301c	 ldr         r3, [sp, #0x1C]
  007f4	e3130001	 tst         r3, #1
  007f8	0a00002c	 beq         |$LN8@PCIConfigD|

; 237  :             // Check size result
; 238  :             size = ~(address & 0xFFFFFFFC) + 1;

  007fc	e59d201c	 ldr         r2, [sp, #0x1C]
  00800	e3e03003	 mvn         r3, #3
  00804	e0023003	 and         r3, r2, r3
  00808	e1e03003	 mvn         r3, r3
  0080c	e2833001	 add         r3, r3, #1
  00810	e58d3010	 str         r3, [sp, #0x10]

; 239  :             if ((size & (size - 1)) != 0 || size == 0) continue;

  00814	e59d3010	 ldr         r3, [sp, #0x10]
  00818	e2432001	 sub         r2, r3, #1
  0081c	e59d3010	 ldr         r3, [sp, #0x10]
  00820	e1130002	 tst         r3, r2
  00824	1a000002	 bne         |$LN6@PCIConfigD|
  00828	e59d3010	 ldr         r3, [sp, #0x10]
  0082c	e3530000	 cmp         r3, #0
  00830	1a000000	 bne         |$LN7@PCIConfigD|
  00834		 |$LN6@PCIConfigD|
  00834	eaffffd7	 b           |$LN10@PCIConfigD|
  00838		 |$LN7@PCIConfigD|

; 240  :             // Assign io space
; 241  :             address = (*pIoBase + size - 1) & ~(size - 1);

  00838	e59d306c	 ldr         r3, [sp, #0x6C]
  0083c	e5932000	 ldr         r2, [r3]
  00840	e59d3010	 ldr         r3, [sp, #0x10]
  00844	e0823003	 add         r3, r2, r3
  00848	e2432001	 sub         r2, r3, #1
  0084c	e59d3010	 ldr         r3, [sp, #0x10]
  00850	e2433001	 sub         r3, r3, #1
  00854	e1e03003	 mvn         r3, r3
  00858	e0023003	 and         r3, r2, r3
  0085c	e58d301c	 str         r3, [sp, #0x1C]

; 242  :             *pIoBase = address + size;

  00860	e59d201c	 ldr         r2, [sp, #0x1C]
  00864	e59d3010	 ldr         r3, [sp, #0x10]
  00868	e0822003	 add         r2, r2, r3
  0086c	e59d306c	 ldr         r3, [sp, #0x6C]
  00870	e5832000	 str         r2, [r3]

; 243  :             OALMSG(OAL_INFO, (
; 244  :                 L"INFO: PCIConfigDevice: IO BAR[%d] 0x%x Size 0x%x\r\n", 
; 245  :                 ix, address, size
; 246  :             ));

  00874	e59f3228	 ldr         r3, [pc, #0x228]
  00878	e5933440	 ldr         r3, [r3, #0x440]
  0087c	e3130008	 tst         r3, #8
  00880	0a000007	 beq         |$LN16@PCIConfigD|
  00884	e59d3010	 ldr         r3, [sp, #0x10]
  00888	e59d201c	 ldr         r2, [sp, #0x1C]
  0088c	e59d100c	 ldr         r1, [sp, #0xC]
  00890	e59f0218	 ldr         r0, [pc, #0x218]
  00894	eb000000	 bl          NKDbgPrintfW
  00898	e3a03001	 mov         r3, #1
  0089c	e58d3048	 str         r3, [sp, #0x48]
  008a0	ea000001	 b           |$LN17@PCIConfigD|
  008a4		 |$LN16@PCIConfigD|
  008a4	e3a03000	 mov         r3, #0
  008a8	e58d3048	 str         r3, [sp, #0x48]
  008ac		 |$LN17@PCIConfigD|

; 247  :         } else {

  008ac	ea00003f	 b           |$LN5@PCIConfigD|
  008b0		 |$LN8@PCIConfigD|

; 248  :             // Check size result
; 249  :             size = ~(address & 0xFFFFFFF0) + 1;

  008b0	e59d201c	 ldr         r2, [sp, #0x1C]
  008b4	e3e0300f	 mvn         r3, #0xF
  008b8	e0023003	 and         r3, r2, r3
  008bc	e1e03003	 mvn         r3, r3
  008c0	e2833001	 add         r3, r3, #1
  008c4	e58d3010	 str         r3, [sp, #0x10]

; 250  :             if ((size & (size - 1)) != 0 || size == 0) continue;

  008c8	e59d3010	 ldr         r3, [sp, #0x10]
  008cc	e2432001	 sub         r2, r3, #1
  008d0	e59d3010	 ldr         r3, [sp, #0x10]
  008d4	e1130002	 tst         r3, r2
  008d8	1a000002	 bne         |$LN3@PCIConfigD|
  008dc	e59d3010	 ldr         r3, [sp, #0x10]
  008e0	e3530000	 cmp         r3, #0
  008e4	1a000000	 bne         |$LN4@PCIConfigD|
  008e8		 |$LN3@PCIConfigD|
  008e8	eaffffaa	 b           |$LN10@PCIConfigD|
  008ec		 |$LN4@PCIConfigD|

; 251  :             // Check allocation type (let support only 32bit space for now)
; 252  :             if ((size & 0x00000006) != 0) {

  008ec	e59d3010	 ldr         r3, [sp, #0x10]
  008f0	e3130006	 tst         r3, #6
  008f4	0a00000b	 beq         |$LN2@PCIConfigD|

; 253  :                 OALMSG(OAL_WARN, (
; 254  :                     L"WARNING: PCIConfigDevice: 64 bit space NOT supported\r\n" 
; 255  :                 ));

  008f8	e59f31a4	 ldr         r3, [pc, #0x1A4]
  008fc	e5933440	 ldr         r3, [r3, #0x440]
  00900	e3130002	 tst         r3, #2
  00904	0a000004	 beq         |$LN18@PCIConfigD|
  00908	e59f019c	 ldr         r0, [pc, #0x19C]
  0090c	eb000000	 bl          NKDbgPrintfW
  00910	e3a03001	 mov         r3, #1
  00914	e58d304c	 str         r3, [sp, #0x4C]
  00918	ea000001	 b           |$LN19@PCIConfigD|
  0091c		 |$LN18@PCIConfigD|
  0091c	e3a03000	 mov         r3, #0
  00920	e58d304c	 str         r3, [sp, #0x4C]
  00924		 |$LN19@PCIConfigD|

; 256  :                 continue;

  00924	eaffff9b	 b           |$LN10@PCIConfigD|
  00928		 |$LN2@PCIConfigD|

; 257  :             }
; 258  :             // Assign memory space (allocate 4KB at least)
; 259  :             if (size < 4096) size = 4096;

  00928	e59d3010	 ldr         r3, [sp, #0x10]
  0092c	e3530a01	 cmp         r3, #1, 20
  00930	2a000001	 bcs         |$LN1@PCIConfigD|
  00934	e3a03a01	 mov         r3, #1, 20
  00938	e58d3010	 str         r3, [sp, #0x10]
  0093c		 |$LN1@PCIConfigD|

; 260  :             address = (*pMemBase + size - 1) & ~(size - 1);

  0093c	e59d3068	 ldr         r3, [sp, #0x68]
  00940	e5932000	 ldr         r2, [r3]
  00944	e59d3010	 ldr         r3, [sp, #0x10]
  00948	e0823003	 add         r3, r2, r3
  0094c	e2432001	 sub         r2, r3, #1
  00950	e59d3010	 ldr         r3, [sp, #0x10]
  00954	e2433001	 sub         r3, r3, #1
  00958	e1e03003	 mvn         r3, r3
  0095c	e0023003	 and         r3, r2, r3
  00960	e58d301c	 str         r3, [sp, #0x1C]

; 261  :             *pMemBase = address + size;

  00964	e59d201c	 ldr         r2, [sp, #0x1C]
  00968	e59d3010	 ldr         r3, [sp, #0x10]
  0096c	e0822003	 add         r2, r2, r3
  00970	e59d3068	 ldr         r3, [sp, #0x68]
  00974	e5832000	 str         r2, [r3]

; 262  :             OALMSG(OAL_INFO, (
; 263  :                 L"INFO: PCIConfigDevice: Mem BAR[%d] 0x%x Size 0x%x\r\n", 
; 264  :                 ix, address, size
; 265  :             ));

  00978	e59f3124	 ldr         r3, [pc, #0x124]
  0097c	e5933440	 ldr         r3, [r3, #0x440]
  00980	e3130008	 tst         r3, #8
  00984	0a000007	 beq         |$LN20@PCIConfigD|
  00988	e59d3010	 ldr         r3, [sp, #0x10]
  0098c	e59d201c	 ldr         r2, [sp, #0x1C]
  00990	e59d100c	 ldr         r1, [sp, #0xC]
  00994	e59f010c	 ldr         r0, [pc, #0x10C]
  00998	eb000000	 bl          NKDbgPrintfW
  0099c	e3a03001	 mov         r3, #1
  009a0	e58d3050	 str         r3, [sp, #0x50]
  009a4	ea000001	 b           |$LN21@PCIConfigD|
  009a8		 |$LN20@PCIConfigD|
  009a8	e3a03000	 mov         r3, #0
  009ac	e58d3050	 str         r3, [sp, #0x50]
  009b0		 |$LN21@PCIConfigD|
  009b0		 |$LN5@PCIConfigD|

; 266  :         }
; 267  :         OALPCICfgWrite(busId, pciLoc, offset, sizeof(address), &address);

  009b0	e28d301c	 add         r3, sp, #0x1C
  009b4	e58d3000	 str         r3, [sp]
  009b8	e3a03004	 mov         r3, #4
  009bc	e59d2014	 ldr         r2, [sp, #0x14]
  009c0	e59d1064	 ldr         r1, [sp, #0x64]
  009c4	e59d0060	 ldr         r0, [sp, #0x60]
  009c8	eb000000	 bl          OALPCICfgWrite

; 268  :         offset += sizeof(UINT32);

  009cc	e59d3014	 ldr         r3, [sp, #0x14]
  009d0	e2833004	 add         r3, r3, #4
  009d4	e58d3014	 str         r3, [sp, #0x14]

; 269  :     }

  009d8	eaffff6e	 b           |$LN10@PCIConfigD|
  009dc		 |$LN9@PCIConfigD|

; 270  :    
; 271  :     // Set latency timer
; 272  :     u8 = OAL_PCI_LATENCY_TIMER;

  009dc	e3a03040	 mov         r3, #0x40
  009e0	e5cd3018	 strb        r3, [sp, #0x18]

; 273  :     OALPCICfgWrite(
; 274  :         busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, LatencyTimer),
; 275  :         sizeof(u8), &u8
; 276  :     );

  009e4	e28d3018	 add         r3, sp, #0x18
  009e8	e58d3000	 str         r3, [sp]
  009ec	e3a03001	 mov         r3, #1
  009f0	e3a0200d	 mov         r2, #0xD
  009f4	e59d1064	 ldr         r1, [sp, #0x64]
  009f8	e59d0060	 ldr         r0, [sp, #0x60]
  009fc	eb000000	 bl          OALPCICfgWrite

; 277  : 
; 278  :     // Set cache line size
; 279  :     u8 = OAL_PCI_CACHE_LINE_SIZE;

  00a00	e3a03004	 mov         r3, #4
  00a04	e5cd3018	 strb        r3, [sp, #0x18]

; 280  :     OALPCICfgWrite(
; 281  :         busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, CacheLineSize),
; 282  :         sizeof(u8), &u8
; 283  :     );

  00a08	e28d3018	 add         r3, sp, #0x18
  00a0c	e58d3000	 str         r3, [sp]
  00a10	e3a03001	 mov         r3, #1
  00a14	e3a0200c	 mov         r2, #0xC
  00a18	e59d1064	 ldr         r1, [sp, #0x64]
  00a1c	e59d0060	 ldr         r0, [sp, #0x60]
  00a20	eb000000	 bl          OALPCICfgWrite

; 284  :     
; 285  :     // Enable device and clear all status
; 286  :     u16 = PCI_ENABLE_MEMORY_SPACE|PCI_ENABLE_IO_SPACE|PCI_ENABLE_BUS_MASTER;

  00a24	e3a03007	 mov         r3, #7
  00a28	e1cd31ba	 strh        r3, [sp, #0x1A]

; 287  :     OALPCICfgWrite(
; 288  :         busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, Command),
; 289  :         sizeof(u16), &u16
; 290  :     );

  00a2c	e28d301a	 add         r3, sp, #0x1A
  00a30	e58d3000	 str         r3, [sp]
  00a34	e3a03002	 mov         r3, #2
  00a38	e3a02004	 mov         r2, #4
  00a3c	e59d1064	 ldr         r1, [sp, #0x64]
  00a40	e59d0060	 ldr         r0, [sp, #0x60]
  00a44	eb000000	 bl          OALPCICfgWrite

; 291  : 
; 292  : #ifdef OAL_PCI_DUMP_CONFIG
; 293  :     OALPCIDumpConfig(busId, pciLoc);
; 294  : #endif
; 295  : 
; 296  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 297  :         L"-PCIConfigDevice(memBase = 0x%08x, ioBase = 0x%08x)\r\n", 
; 298  :         *pMemBase, *pIoBase
; 299  :     ));

  00a48	e59f3054	 ldr         r3, [pc, #0x54]
  00a4c	e5933440	 ldr         r3, [r3, #0x440]
  00a50	e3130c01	 tst         r3, #1, 24
  00a54	0a00000c	 beq         |$LN22@PCIConfigD|
  00a58	e59f3044	 ldr         r3, [pc, #0x44]
  00a5c	e5933440	 ldr         r3, [r3, #0x440]
  00a60	e3130004	 tst         r3, #4
  00a64	0a000008	 beq         |$LN22@PCIConfigD|
  00a68	e59d306c	 ldr         r3, [sp, #0x6C]
  00a6c	e5932000	 ldr         r2, [r3]
  00a70	e59d3068	 ldr         r3, [sp, #0x68]
  00a74	e5931000	 ldr         r1, [r3]
  00a78	e59f0020	 ldr         r0, [pc, #0x20]
  00a7c	eb000000	 bl          NKDbgPrintfW
  00a80	e3a03001	 mov         r3, #1
  00a84	e58d3054	 str         r3, [sp, #0x54]
  00a88	ea000001	 b           |$LN23@PCIConfigD|
  00a8c		 |$LN22@PCIConfigD|
  00a8c	e3a03000	 mov         r3, #0
  00a90	e58d3054	 str         r3, [sp, #0x54]
  00a94		 |$LN23@PCIConfigD|

; 300  :  }

  00a94	e28dd058	 add         sp, sp, #0x58
  00a98	e89d6000	 ldmia       sp, {sp, lr}
  00a9c	e12fff1e	 bx          lr
  00aa0		 |$LN27@PCIConfigD|
  00aa0		 |$LN28@PCIConfigD|
  00aa0	00000000	 DCD         |??_C@_1GM@POGKGJPM@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  00aa4		 |$LN29@PCIConfigD|
  00aa4	00000000	 DCD         |dpCurSettings|
  00aa8		 |$LN30@PCIConfigD|
  00aa8	00000000	 DCD         |??_C@_1GI@HEDILPDD@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAM?$AAe?$AAm?$AA?5?$AAB?$AAA?$AAR?$AA?$FL?$AA?$CF@|
  00aac		 |$LN31@PCIConfigD|
  00aac	00000000	 DCD         |??_C@_1GO@ENKOGFDH@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AA6?$AA4?$AA?5?$AAb?$AAi?$AAt@|
  00ab0		 |$LN32@PCIConfigD|
  00ab0	00000000	 DCD         |??_C@_1GG@JIHPKAJL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?5?$AAI?$AAO?$AA?5?$AAB?$AAA?$AAR?$AA?$FL?$AA?$CF?$AAd@|
  00ab4		 |$LN33@PCIConfigD|
  00ab4	00000000	 DCD         |??_C@_1GA@MHOBDJJH@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0@|
  00ab8		 |$M40637|

			 ENDP  ; |PCIConfigDevice|

	EXPORT	|??_C@_1GK@JFDBDMJF@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JA@KNMBBCKL@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@| [ DATA ] ; `string'

  00020			 AREA	 |.pdata|, PDATA
|$T40680| DCD	|$LN13@PCIConfigB@2|
	DCD	0x40014604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@JFDBDMJF@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "-"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "B", 0x0, "r", 0x0, "i"
	DCB	0x0, "d", 0x0, "g", 0x0, "e", 0x0, "(", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "i", 0x0, "o"
	DCB	0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@KNMBBCKL@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@| DCB "+"
	DCB	0x0, "P", 0x0, "C", 0x0, "I", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "B", 0x0, "r", 0x0, "i"
	DCB	0x0, "d", 0x0, "g", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%"
	DCB	0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00ab8			 AREA	 |.text|, CODE, ARM

  00ab8		 |PCIConfigBridge| PROC

; 309  : ) {

  00ab8		 |$LN13@PCIConfigB@2|
  00ab8	e1a0c00d	 mov         r12, sp
  00abc	e92d000f	 stmdb       sp!, {r0 - r3}
  00ac0	e92d5000	 stmdb       sp!, {r12, lr}
  00ac4	e24dd09c	 sub         sp, sp, #0x9C
  00ac8		 |$M40677|

; 310  :     UINT32 memLimit, ioLimit, u32;
; 311  :     UINT16 command, u16;
; 312  :     UINT8  u8;
; 313  : 
; 314  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 315  :         L"+PCIConfigBridge(%d, %d/%d/%d, %d, %d, 0x%08x, 0x%08x, 0x%08x, 0x%08x\r\n",
; 316  :         busId, pciLoc.bus, pciLoc.dev, pciLoc.fnc, secBus, subBus,
; 317  :         *pMemBase, memSize, *pIoBase, ioSize
; 318  :     ));

  00ac8	e59f34f8	 ldr         r3, [pc, #0x4F8]
  00acc	e5933440	 ldr         r3, [r3, #0x440]
  00ad0	e3130c01	 tst         r3, #1, 24
  00ad4	0a00001b	 beq         |$LN7@PCIConfigB@2|
  00ad8	e59f34e8	 ldr         r3, [pc, #0x4E8]
  00adc	e5933440	 ldr         r3, [r3, #0x440]
  00ae0	e3130004	 tst         r3, #4
  00ae4	0a000017	 beq         |$LN7@PCIConfigB@2|
  00ae8	e59d30c0	 ldr         r3, [sp, #0xC0]
  00aec	e58d3018	 str         r3, [sp, #0x18]
  00af0	e59d30bc	 ldr         r3, [sp, #0xBC]
  00af4	e5933000	 ldr         r3, [r3]
  00af8	e58d3014	 str         r3, [sp, #0x14]
  00afc	e59d30b8	 ldr         r3, [sp, #0xB8]
  00b00	e58d3010	 str         r3, [sp, #0x10]
  00b04	e59d30b4	 ldr         r3, [sp, #0xB4]
  00b08	e5933000	 ldr         r3, [r3]
  00b0c	e58d300c	 str         r3, [sp, #0xC]
  00b10	e59d30b0	 ldr         r3, [sp, #0xB0]
  00b14	e58d3008	 str         r3, [sp, #8]
  00b18	e59d30ac	 ldr         r3, [sp, #0xAC]
  00b1c	e58d3004	 str         r3, [sp, #4]
  00b20	e5dd30a8	 ldrb        r3, [sp, #0xA8]
  00b24	e58d3000	 str         r3, [sp]
  00b28	e5dd30a9	 ldrb        r3, [sp, #0xA9]
  00b2c	e5dd20aa	 ldrb        r2, [sp, #0xAA]
  00b30	e59d10a4	 ldr         r1, [sp, #0xA4]
  00b34	e59f0490	 ldr         r0, [pc, #0x490]
  00b38	eb000000	 bl          NKDbgPrintfW
  00b3c	e3a03001	 mov         r3, #1
  00b40	e58d3094	 str         r3, [sp, #0x94]
  00b44	ea000001	 b           |$LN8@PCIConfigB@2|
  00b48		 |$LN7@PCIConfigB@2|
  00b48	e3a03000	 mov         r3, #0
  00b4c	e58d3094	 str         r3, [sp, #0x94]
  00b50		 |$LN8@PCIConfigB@2|

; 319  : 
; 320  :     // Compute limits
; 321  :     if (memSize > 0) {

  00b50	e59d30b8	 ldr         r3, [sp, #0xB8]
  00b54	e3530000	 cmp         r3, #0
  00b58	9a00001a	 bls         |$LN4@PCIConfigB@2|

; 322  :         *pMemBase = (*pMemBase + 0xFFFFF) & ~0xFFFFF;       // 1M boundary

  00b5c	e59d30b4	 ldr         r3, [sp, #0xB4]
  00b60	e5932000	 ldr         r2, [r3]
  00b64	e3e034ff	 mvn         r3, #0xFF, 8
  00b68	e223360f	 eor         r3, r3, #0xF, 12
  00b6c	e0822003	 add         r2, r2, r3
  00b70	e3a034ff	 mov         r3, #0xFF, 8
  00b74	e383360f	 orr         r3, r3, #0xF, 12
  00b78	e0022003	 and         r2, r2, r3
  00b7c	e59d30b4	 ldr         r3, [sp, #0xB4]
  00b80	e5832000	 str         r2, [r3]

; 323  :         memSize = (memSize + 0xFFFFF) & ~0xFFFFF;           // 1M chunks

  00b84	e59d20b8	 ldr         r2, [sp, #0xB8]
  00b88	e3e034ff	 mvn         r3, #0xFF, 8
  00b8c	e223360f	 eor         r3, r3, #0xF, 12
  00b90	e0822003	 add         r2, r2, r3
  00b94	e3a034ff	 mov         r3, #0xFF, 8
  00b98	e383360f	 orr         r3, r3, #0xF, 12
  00b9c	e0023003	 and         r3, r2, r3
  00ba0	e58d30b8	 str         r3, [sp, #0xB8]

; 324  :         memLimit = (*pMemBase + memSize - 1) & ~0xFFFFF;    // 1M boundary

  00ba4	e59d30b4	 ldr         r3, [sp, #0xB4]
  00ba8	e5932000	 ldr         r2, [r3]
  00bac	e59d30b8	 ldr         r3, [sp, #0xB8]
  00bb0	e0823003	 add         r3, r2, r3
  00bb4	e2432001	 sub         r2, r3, #1
  00bb8	e3a034ff	 mov         r3, #0xFF, 8
  00bbc	e383360f	 orr         r3, r3, #0xF, 12
  00bc0	e0023003	 and         r3, r2, r3
  00bc4	e58d3024	 str         r3, [sp, #0x24]
  00bc8		 |$LN4@PCIConfigB@2|

; 325  :     }
; 326  :     if (ioSize > 0) {

  00bc8	e59d30c0	 ldr         r3, [sp, #0xC0]
  00bcc	e3530000	 cmp         r3, #0
  00bd0	9a000018	 bls         |$LN3@PCIConfigB@2|

; 327  :         *pIoBase = (*pIoBase + 0xFFF) & ~0xFFF;             // 4K boundary

  00bd4	e59d30bc	 ldr         r3, [sp, #0xBC]
  00bd8	e5933000	 ldr         r3, [r3]
  00bdc	e2833c0f	 add         r3, r3, #0xF, 24
  00be0	e28320ff	 add         r2, r3, #0xFF
  00be4	e3e03c0f	 mvn         r3, #0xF, 24
  00be8	e22330ff	 eor         r3, r3, #0xFF
  00bec	e0022003	 and         r2, r2, r3
  00bf0	e59d30bc	 ldr         r3, [sp, #0xBC]
  00bf4	e5832000	 str         r2, [r3]

; 328  :         ioSize = (ioSize + 0xFFF) & ~0xFFF;                 // 4K chunks

  00bf8	e59d30c0	 ldr         r3, [sp, #0xC0]
  00bfc	e2833c0f	 add         r3, r3, #0xF, 24
  00c00	e28320ff	 add         r2, r3, #0xFF
  00c04	e3e03c0f	 mvn         r3, #0xF, 24
  00c08	e22330ff	 eor         r3, r3, #0xFF
  00c0c	e0023003	 and         r3, r2, r3
  00c10	e58d30c0	 str         r3, [sp, #0xC0]

; 329  :         ioLimit = (*pIoBase + ioSize - 1) & ~0xFFF;         // 4K boundary

  00c14	e59d30bc	 ldr         r3, [sp, #0xBC]
  00c18	e5932000	 ldr         r2, [r3]
  00c1c	e59d30c0	 ldr         r3, [sp, #0xC0]
  00c20	e0823003	 add         r3, r2, r3
  00c24	e2432001	 sub         r2, r3, #1
  00c28	e3e03c0f	 mvn         r3, #0xF, 24
  00c2c	e22330ff	 eor         r3, r3, #0xFF
  00c30	e0023003	 and         r3, r2, r3
  00c34	e58d3020	 str         r3, [sp, #0x20]
  00c38		 |$LN3@PCIConfigB@2|

; 330  :     }
; 331  : 
; 332  :     // Disable Memory and I/O access
; 333  :     command = 0;

  00c38	e3a03000	 mov         r3, #0
  00c3c	e1cd31bc	 strh        r3, [sp, #0x1C]

; 334  :     OALPCICfgWrite(
; 335  :         busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, Command), 
; 336  :         sizeof(command), &command
; 337  :     );

  00c40	e28d301c	 add         r3, sp, #0x1C
  00c44	e58d3000	 str         r3, [sp]
  00c48	e3a03002	 mov         r3, #2
  00c4c	e3a02004	 mov         r2, #4
  00c50	e59d10a8	 ldr         r1, [sp, #0xA8]
  00c54	e59d00a4	 ldr         r0, [sp, #0xA4]
  00c58	eb000000	 bl          OALPCICfgWrite

; 338  : 
; 339  :     // Set master latency timer
; 340  :     u8 = OAL_PCI_LATENCY_TIMER;

  00c5c	e3a03040	 mov         r3, #0x40
  00c60	e5cd3028	 strb        r3, [sp, #0x28]

; 341  :     OALPCICfgWrite(
; 342  :         busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, LatencyTimer),
; 343  :         sizeof(u8), &u8
; 344  :     );

  00c64	e28d3028	 add         r3, sp, #0x28
  00c68	e58d3000	 str         r3, [sp]
  00c6c	e3a03001	 mov         r3, #1
  00c70	e3a0200d	 mov         r2, #0xD
  00c74	e59d10a8	 ldr         r1, [sp, #0xA8]
  00c78	e59d00a4	 ldr         r0, [sp, #0xA4]
  00c7c	eb000000	 bl          OALPCICfgWrite

; 345  : 
; 346  :     // Set cache line size
; 347  :     u8 = OAL_PCI_CACHE_LINE_SIZE;

  00c80	e3a03004	 mov         r3, #4
  00c84	e5cd3028	 strb        r3, [sp, #0x28]

; 348  :     OALPCICfgWrite(
; 349  :         busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, CacheLineSize),
; 350  :         sizeof(u8), &u8
; 351  :     );

  00c88	e28d3028	 add         r3, sp, #0x28
  00c8c	e58d3000	 str         r3, [sp]
  00c90	e3a03001	 mov         r3, #1
  00c94	e3a0200c	 mov         r2, #0xC
  00c98	e59d10a8	 ldr         r1, [sp, #0xA8]
  00c9c	e59d00a4	 ldr         r0, [sp, #0xA4]
  00ca0	eb000000	 bl          OALPCICfgWrite

; 352  : 
; 353  :     // Set primary bus number
; 354  :     u8 = pciLoc.bus;

  00ca4	e5dd30aa	 ldrb        r3, [sp, #0xAA]
  00ca8	e5cd3028	 strb        r3, [sp, #0x28]

; 355  :     OALPCICfgWrite(
; 356  :         busId, pciLoc, 
; 357  :         FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.PrimaryBusNumber), 
; 358  :         sizeof(u8), &u8
; 359  :     );

  00cac	e28d3028	 add         r3, sp, #0x28
  00cb0	e58d3000	 str         r3, [sp]
  00cb4	e3a03001	 mov         r3, #1
  00cb8	e3a02018	 mov         r2, #0x18
  00cbc	e59d10a8	 ldr         r1, [sp, #0xA8]
  00cc0	e59d00a4	 ldr         r0, [sp, #0xA4]
  00cc4	eb000000	 bl          OALPCICfgWrite

; 360  : 
; 361  :     // Set secondary bus number
; 362  :     u8 = (UINT8)secBus;

  00cc8	e59d30ac	 ldr         r3, [sp, #0xAC]
  00ccc	e20330ff	 and         r3, r3, #0xFF
  00cd0	e5cd3028	 strb        r3, [sp, #0x28]

; 363  :     OALPCICfgWrite(
; 364  :         busId, pciLoc, 
; 365  :         FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.SecondaryBusNumber),
; 366  :         sizeof(u8), &u8
; 367  :     );

  00cd4	e28d3028	 add         r3, sp, #0x28
  00cd8	e58d3000	 str         r3, [sp]
  00cdc	e3a03001	 mov         r3, #1
  00ce0	e3a02019	 mov         r2, #0x19
  00ce4	e59d10a8	 ldr         r1, [sp, #0xA8]
  00ce8	e59d00a4	 ldr         r0, [sp, #0xA4]
  00cec	eb000000	 bl          OALPCICfgWrite

; 368  : 
; 369  :     // Set subordinate bus number
; 370  :     u8 = (UINT8)subBus;

  00cf0	e59d30b0	 ldr         r3, [sp, #0xB0]
  00cf4	e20330ff	 and         r3, r3, #0xFF
  00cf8	e5cd3028	 strb        r3, [sp, #0x28]

; 371  :     OALPCICfgWrite(
; 372  :         busId, pciLoc, 
; 373  :         FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.SubordinateBusNumber),
; 374  :         sizeof(u8), &u8
; 375  :     );

  00cfc	e28d3028	 add         r3, sp, #0x28
  00d00	e58d3000	 str         r3, [sp]
  00d04	e3a03001	 mov         r3, #1
  00d08	e3a0201a	 mov         r2, #0x1A
  00d0c	e59d10a8	 ldr         r1, [sp, #0xA8]
  00d10	e59d00a4	 ldr         r0, [sp, #0xA4]
  00d14	eb000000	 bl          OALPCICfgWrite

; 376  : 
; 377  :     // Set secondary latency timer
; 378  :     u8 = OAL_PCI_LATENCY_TIMER;

  00d18	e3a03040	 mov         r3, #0x40
  00d1c	e5cd3028	 strb        r3, [sp, #0x28]

; 379  :     OALPCICfgWrite(
; 380  :         busId, pciLoc, 
; 381  :         FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.SecondaryLatencyTimer),
; 382  :         sizeof(u8), &u8
; 383  :     );

  00d20	e28d3028	 add         r3, sp, #0x28
  00d24	e58d3000	 str         r3, [sp]
  00d28	e3a03001	 mov         r3, #1
  00d2c	e3a0201b	 mov         r2, #0x1B
  00d30	e59d10a8	 ldr         r1, [sp, #0xA8]
  00d34	e59d00a4	 ldr         r0, [sp, #0xA4]
  00d38	eb000000	 bl          OALPCICfgWrite

; 384  :     
; 385  :     // Prepare configuration command
; 386  :     command = PCI_ENABLE_SERR;

  00d3c	e3a03c01	 mov         r3, #1, 24
  00d40	e1cd31bc	 strh        r3, [sp, #0x1C]

; 387  : 
; 388  :     // Set memory range
; 389  :     if (memSize > 0) {

  00d44	e59d30b8	 ldr         r3, [sp, #0xB8]
  00d48	e3530000	 cmp         r3, #0
  00d4c	9a000045	 bls         |$LN2@PCIConfigB@2|

; 390  : 
; 391  :         // Memory base
; 392  :         u16 = (UINT16)(*pMemBase >> 16);

  00d50	e59d30b4	 ldr         r3, [sp, #0xB4]
  00d54	e5933000	 ldr         r3, [r3]
  00d58	e1a03823	 mov         r3, r3, lsr #16
  00d5c	e1a03803	 mov         r3, r3, lsl #16
  00d60	e1a03823	 mov         r3, r3, lsr #16
  00d64	e1cd32ba	 strh        r3, [sp, #0x2A]

; 393  :         OALPCICfgWrite(
; 394  :             busId, pciLoc, 
; 395  :             FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.MemoryBase),
; 396  :             sizeof(u16), &u16
; 397  :         );

  00d68	e28d302a	 add         r3, sp, #0x2A
  00d6c	e58d3000	 str         r3, [sp]
  00d70	e3a03002	 mov         r3, #2
  00d74	e3a02020	 mov         r2, #0x20
  00d78	e59d10a8	 ldr         r1, [sp, #0xA8]
  00d7c	e59d00a4	 ldr         r0, [sp, #0xA4]
  00d80	eb000000	 bl          OALPCICfgWrite

; 398  : 
; 399  :         // Memory limit
; 400  :         u16 = (UINT16)((memLimit >> 16) & 0xFFF0);

  00d84	e59d3024	 ldr         r3, [sp, #0x24]
  00d88	e1a02823	 mov         r2, r3, lsr #16
  00d8c	e3a03cff	 mov         r3, #0xFF, 24
  00d90	e38330f0	 orr         r3, r3, #0xF0
  00d94	e0023003	 and         r3, r2, r3
  00d98	e1a03803	 mov         r3, r3, lsl #16
  00d9c	e1a03823	 mov         r3, r3, lsr #16
  00da0	e1cd32ba	 strh        r3, [sp, #0x2A]

; 401  :         OALPCICfgWrite(
; 402  :             busId, pciLoc, 
; 403  :             FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.MemoryLimit),
; 404  :             sizeof(u16), &u16
; 405  :         );

  00da4	e28d302a	 add         r3, sp, #0x2A
  00da8	e58d3000	 str         r3, [sp]
  00dac	e3a03002	 mov         r3, #2
  00db0	e3a02022	 mov         r2, #0x22
  00db4	e59d10a8	 ldr         r1, [sp, #0xA8]
  00db8	e59d00a4	 ldr         r0, [sp, #0xA4]
  00dbc	eb000000	 bl          OALPCICfgWrite

; 406  : 
; 407  :         // Disable prefetch memory - base to 0xFFF00000
; 408  :         u16 = 0xFFF0;

  00dc0	e3a03cff	 mov         r3, #0xFF, 24
  00dc4	e38330f0	 orr         r3, r3, #0xF0
  00dc8	e1cd32ba	 strh        r3, [sp, #0x2A]

; 409  :         OALPCICfgWrite(
; 410  :             busId, pciLoc,
; 411  :             FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.PrefetchableMemoryBase),
; 412  :             sizeof(u16), &u16
; 413  :         );

  00dcc	e28d302a	 add         r3, sp, #0x2A
  00dd0	e58d3000	 str         r3, [sp]
  00dd4	e3a03002	 mov         r3, #2
  00dd8	e3a02024	 mov         r2, #0x24
  00ddc	e59d10a8	 ldr         r1, [sp, #0xA8]
  00de0	e59d00a4	 ldr         r0, [sp, #0xA4]
  00de4	eb000000	 bl          OALPCICfgWrite

; 414  : 
; 415  :         // Disable prefetch memory - limit to 0x000FFFFF
; 416  :         u16 = 0x0;

  00de8	e3a03000	 mov         r3, #0
  00dec	e1cd32ba	 strh        r3, [sp, #0x2A]

; 417  :         OALPCICfgWrite(
; 418  :             busId, pciLoc,
; 419  :             FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.PrefetchableMemoryLimit),
; 420  :             sizeof(u16), &u16
; 421  :         );

  00df0	e28d302a	 add         r3, sp, #0x2A
  00df4	e58d3000	 str         r3, [sp]
  00df8	e3a03002	 mov         r3, #2
  00dfc	e3a02026	 mov         r2, #0x26
  00e00	e59d10a8	 ldr         r1, [sp, #0xA8]
  00e04	e59d00a4	 ldr         r0, [sp, #0xA4]
  00e08	eb000000	 bl          OALPCICfgWrite

; 422  :     
; 423  :         // Disable prefetch memory 
; 424  :         u32 = 0xFFFFFFFF;

  00e0c	e3e03000	 mvn         r3, #0
  00e10	e58d302c	 str         r3, [sp, #0x2C]

; 425  :         OALPCICfgWrite(
; 426  :             busId, pciLoc, FIELD_OFFSET(
; 427  :                 PCI_COMMON_CONFIG, u.type1.PrefetchableMemoryBaseUpper32
; 428  :             ), sizeof(u32), &u32
; 429  :         );

  00e14	e28d302c	 add         r3, sp, #0x2C
  00e18	e58d3000	 str         r3, [sp]
  00e1c	e3a03004	 mov         r3, #4
  00e20	e3a02028	 mov         r2, #0x28
  00e24	e59d10a8	 ldr         r1, [sp, #0xA8]
  00e28	e59d00a4	 ldr         r0, [sp, #0xA4]
  00e2c	eb000000	 bl          OALPCICfgWrite

; 430  : 
; 431  :         // Disable prefetch memory
; 432  :         u32 = 0;

  00e30	e3a03000	 mov         r3, #0
  00e34	e58d302c	 str         r3, [sp, #0x2C]

; 433  :         OALPCICfgWrite(
; 434  :             busId, pciLoc, FIELD_OFFSET(
; 435  :                 PCI_COMMON_CONFIG, u.type1.PrefetchableMemoryLimitUpper32
; 436  :             ), sizeof(u32), &u32
; 437  :         );

  00e38	e28d302c	 add         r3, sp, #0x2C
  00e3c	e58d3000	 str         r3, [sp]
  00e40	e3a03004	 mov         r3, #4
  00e44	e3a0202c	 mov         r2, #0x2C
  00e48	e59d10a8	 ldr         r1, [sp, #0xA8]
  00e4c	e59d00a4	 ldr         r0, [sp, #0xA4]
  00e50	eb000000	 bl          OALPCICfgWrite

; 438  :         
; 439  :         // Enable memory space
; 440  :         command |= PCI_ENABLE_MEMORY_SPACE|PCI_ENABLE_BUS_MASTER;

  00e54	e1dd31bc	 ldrh        r3, [sp, #0x1C]
  00e58	e3833006	 orr         r3, r3, #6
  00e5c	e1a03803	 mov         r3, r3, lsl #16
  00e60	e1a03823	 mov         r3, r3, lsr #16
  00e64	e1cd31bc	 strh        r3, [sp, #0x1C]
  00e68		 |$LN2@PCIConfigB@2|

; 441  :     }
; 442  : 
; 443  :     // Set io range (32-bit address decode)
; 444  :     if (ioSize > 0) {

  00e68	e59d30c0	 ldr         r3, [sp, #0xC0]
  00e6c	e3530000	 cmp         r3, #0
  00e70	9a000036	 bls         |$LN1@PCIConfigB@2|

; 445  : 
; 446  :         // IO base 
; 447  :         u8 = (UINT8)((*pIoBase >> 8) & 0xF0);

  00e74	e59d30bc	 ldr         r3, [sp, #0xBC]
  00e78	e5933000	 ldr         r3, [r3]
  00e7c	e1a03423	 mov         r3, r3, lsr #8
  00e80	e20330f0	 and         r3, r3, #0xF0
  00e84	e20330ff	 and         r3, r3, #0xFF
  00e88	e5cd3028	 strb        r3, [sp, #0x28]

; 448  :         OALPCICfgWrite(
; 449  :             busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.IOBase),
; 450  :             sizeof(u8), &u8
; 451  :         );

  00e8c	e28d3028	 add         r3, sp, #0x28
  00e90	e58d3000	 str         r3, [sp]
  00e94	e3a03001	 mov         r3, #1
  00e98	e3a0201c	 mov         r2, #0x1C
  00e9c	e59d10a8	 ldr         r1, [sp, #0xA8]
  00ea0	e59d00a4	 ldr         r0, [sp, #0xA4]
  00ea4	eb000000	 bl          OALPCICfgWrite

; 452  : 
; 453  :         // IO upper base
; 454  :         u16 = (UINT16)(*pIoBase >> 16);

  00ea8	e59d30bc	 ldr         r3, [sp, #0xBC]
  00eac	e5933000	 ldr         r3, [r3]
  00eb0	e1a03823	 mov         r3, r3, lsr #16
  00eb4	e1a03803	 mov         r3, r3, lsl #16
  00eb8	e1a03823	 mov         r3, r3, lsr #16
  00ebc	e1cd32ba	 strh        r3, [sp, #0x2A]

; 455  :         OALPCICfgWrite(
; 456  :             busId, pciLoc, FIELD_OFFSET(
; 457  :                 PCI_COMMON_CONFIG, u.type1.IOBaseUpper
; 458  :              ), sizeof(u16), &u16
; 459  :         );

  00ec0	e28d302a	 add         r3, sp, #0x2A
  00ec4	e58d3000	 str         r3, [sp]
  00ec8	e3a03002	 mov         r3, #2
  00ecc	e3a02030	 mov         r2, #0x30
  00ed0	e59d10a8	 ldr         r1, [sp, #0xA8]
  00ed4	e59d00a4	 ldr         r0, [sp, #0xA4]
  00ed8	eb000000	 bl          OALPCICfgWrite

; 460  : 
; 461  :         // IO limit
; 462  :         u8 = (UINT8)((ioLimit >> 8) & 0xF0);

  00edc	e59d3020	 ldr         r3, [sp, #0x20]
  00ee0	e1a03423	 mov         r3, r3, lsr #8
  00ee4	e20330f0	 and         r3, r3, #0xF0
  00ee8	e20330ff	 and         r3, r3, #0xFF
  00eec	e5cd3028	 strb        r3, [sp, #0x28]

; 463  :         OALPCICfgWrite(
; 464  :             busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, u.type1.IOLimit),
; 465  :             sizeof(u8), &u8
; 466  :         );

  00ef0	e28d3028	 add         r3, sp, #0x28
  00ef4	e58d3000	 str         r3, [sp]
  00ef8	e3a03001	 mov         r3, #1
  00efc	e3a0201d	 mov         r2, #0x1D
  00f00	e59d10a8	 ldr         r1, [sp, #0xA8]
  00f04	e59d00a4	 ldr         r0, [sp, #0xA4]
  00f08	eb000000	 bl          OALPCICfgWrite

; 467  : 
; 468  :         // IO upper limit
; 469  :         u16 = (UINT16)(ioLimit >> 16);

  00f0c	e59d3020	 ldr         r3, [sp, #0x20]
  00f10	e1a03823	 mov         r3, r3, lsr #16
  00f14	e1a03803	 mov         r3, r3, lsl #16
  00f18	e1a03823	 mov         r3, r3, lsr #16
  00f1c	e1cd32ba	 strh        r3, [sp, #0x2A]

; 470  :         OALPCICfgWrite(
; 471  :             busId, pciLoc, FIELD_OFFSET(
; 472  :                 PCI_COMMON_CONFIG, u.type1.IOLimitUpper
; 473  :             ), sizeof(u16), &u16
; 474  :         );

  00f20	e28d302a	 add         r3, sp, #0x2A
  00f24	e58d3000	 str         r3, [sp]
  00f28	e3a03002	 mov         r3, #2
  00f2c	e3a02032	 mov         r2, #0x32
  00f30	e59d10a8	 ldr         r1, [sp, #0xA8]
  00f34	e59d00a4	 ldr         r0, [sp, #0xA4]
  00f38	eb000000	 bl          OALPCICfgWrite

; 475  :         
; 476  :         // Enable io space
; 477  :         command |= PCI_ENABLE_IO_SPACE|PCI_ENABLE_BUS_MASTER;

  00f3c	e1dd31bc	 ldrh        r3, [sp, #0x1C]
  00f40	e3833005	 orr         r3, r3, #5
  00f44	e1a03803	 mov         r3, r3, lsl #16
  00f48	e1a03823	 mov         r3, r3, lsr #16
  00f4c	e1cd31bc	 strh        r3, [sp, #0x1C]
  00f50		 |$LN1@PCIConfigB@2|

; 478  :     }
; 479  : 
; 480  :     // Enable bridge
; 481  :     OALPCICfgWrite(
; 482  :         busId, pciLoc, FIELD_OFFSET(PCI_COMMON_CONFIG, Command), 
; 483  :         sizeof(command), &command
; 484  :     );

  00f50	e28d301c	 add         r3, sp, #0x1C
  00f54	e58d3000	 str         r3, [sp]
  00f58	e3a03002	 mov         r3, #2
  00f5c	e3a02004	 mov         r2, #4
  00f60	e59d10a8	 ldr         r1, [sp, #0xA8]
  00f64	e59d00a4	 ldr         r0, [sp, #0xA4]
  00f68	eb000000	 bl          OALPCICfgWrite

; 485  : 
; 486  : #ifdef OAL_PCI_DUMP_CONFIG
; 487  :     OALPCIDumpConfig(busId, pciLoc);
; 488  : #endif
; 489  : 
; 490  :     OALMSG(OAL_PCI&&OAL_FUNC, (
; 491  :         L"-PCIConfigBridge(memBase = 0x%08x, ioBase = 0x%08x\r\n", 
; 492  :         *pMemBase, *pIoBase
; 493  :     ));

  00f6c	e59f3054	 ldr         r3, [pc, #0x54]
  00f70	e5933440	 ldr         r3, [r3, #0x440]
  00f74	e3130c01	 tst         r3, #1, 24
  00f78	0a00000c	 beq         |$LN9@PCIConfigB@2|
  00f7c	e59f3044	 ldr         r3, [pc, #0x44]
  00f80	e5933440	 ldr         r3, [r3, #0x440]
  00f84	e3130004	 tst         r3, #4
  00f88	0a000008	 beq         |$LN9@PCIConfigB@2|
  00f8c	e59d30bc	 ldr         r3, [sp, #0xBC]
  00f90	e5932000	 ldr         r2, [r3]
  00f94	e59d30b4	 ldr         r3, [sp, #0xB4]
  00f98	e5931000	 ldr         r1, [r3]
  00f9c	e59f0020	 ldr         r0, [pc, #0x20]
  00fa0	eb000000	 bl          NKDbgPrintfW
  00fa4	e3a03001	 mov         r3, #1
  00fa8	e58d3098	 str         r3, [sp, #0x98]
  00fac	ea000001	 b           |$LN10@PCIConfigB@2|
  00fb0		 |$LN9@PCIConfigB@2|
  00fb0	e3a03000	 mov         r3, #0
  00fb4	e58d3098	 str         r3, [sp, #0x98]
  00fb8		 |$LN10@PCIConfigB@2|

; 494  : }

  00fb8	e28dd09c	 add         sp, sp, #0x9C
  00fbc	e89d6000	 ldmia       sp, {sp, lr}
  00fc0	e12fff1e	 bx          lr
  00fc4		 |$LN14@PCIConfigB@2|
  00fc4		 |$LN15@PCIConfigB@2|
  00fc4	00000000	 DCD         |??_C@_1GK@JFDBDMJF@?$AA?9?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?$CI?$AAm?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  00fc8		 |$LN16@PCIConfigB@2|
  00fc8	00000000	 DCD         |dpCurSettings|
  00fcc		 |$LN17@PCIConfigB@2|
  00fcc	00000000	 DCD         |??_C@_1JA@KNMBBCKL@?$AA?$CL?$AAP?$AAC?$AAI?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@|
  00fd0		 |$M40678|

			 ENDP  ; |PCIConfigBridge|

	END
