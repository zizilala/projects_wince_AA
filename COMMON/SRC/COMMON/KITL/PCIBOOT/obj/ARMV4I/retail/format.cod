; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\KITL\format.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALKitlIPtoString|
	EXPORT	|??_C@_1BI@FCMLLAGN@?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALLogPrintf|

  00000			 AREA	 |.bss|, NOINIT
|?szBuffer@?1??OALKitlIPtoString@@9@9| % 0x20		; `OALKitlIPtoString'::`2'::szBuffer
|?szBuffer@?1??OALKitlIPtoString@@9@9| % 0x20		; `OALKitlIPtoString'::`2'::szBuffer
; File c:\wince600\platform\common\src\common\kitl\format.c

  00000			 AREA	 |.pdata|, PDATA
|$T43097| DCD	|$LN5@OALKitlIPt|
	DCD	0x40001602

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@FCMLLAGN@?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?$AA@| DCB "%"
	DCB	0x0, "d", 0x0, ".", 0x0, "%", 0x0, "d", 0x0, ".", 0x0, "%"
	DCB	0x0, "d", 0x0, ".", 0x0, "%", 0x0, "d", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlIPtoString| PROC

; 24   : {

  00000		 |$LN5@OALKitlIPt|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M43094|
  00008	e1a06000	 mov         r6, r0

; 25   :     static WCHAR szBuffer[16];
; 26   : 
; 27   :     OALLogPrintf(
; 28   :         szBuffer, sizeof(szBuffer)/sizeof(WCHAR), L"%d.%d.%d.%d",
; 29   :         (UINT8)ip4, (UINT8)(ip4 >> 8), (UINT8)(ip4 >> 16), (UINT8)(ip4 >> 24)
; 30   :     );

  0000c	e59f2040	 ldr         r2, [pc, #0x40]
  00010	e59f0038	 ldr         r0, [pc, #0x38]
  00014	e1a03826	 mov         r3, r6, lsr #16
  00018	e1a01426	 mov         r1, r6, lsr #8
  0001c	e20340ff	 and         r4, r3, #0xFF
  00020	e20150ff	 and         r5, r1, #0xFF
  00024	e1a0ec26	 mov         lr, r6, lsr #24
  00028	e20630ff	 and         r3, r6, #0xFF
  0002c	e3a01010	 mov         r1, #0x10
  00030	e58d4004	 str         r4, [sp, #4]
  00034	e58d5000	 str         r5, [sp]
  00038	e58de008	 str         lr, [sp, #8]
  0003c	eb000000	 bl          OALLogPrintf

; 31   :     return szBuffer;
; 32   : }

  00040	e59f0008	 ldr         r0, [pc, #8]
  00044	e28dd00c	 add         sp, sp, #0xC
  00048	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$LN6@OALKitlIPt|
  00050		 |$LN7@OALKitlIPt|
  00050	00000000	 DCD         |?szBuffer@?1??OALKitlIPtoString@@9@9|
  00054		 |$LN8@OALKitlIPt|
  00054	00000000	 DCD         |??_C@_1BI@FCMLLAGN@?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?$AA@|
  00058		 |$M43095|

			 ENDP  ; |OALKitlIPtoString|

	EXPORT	|OALKitlMACtoString|
	EXPORT	|??_C@_1DM@BKFFFBIH@?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AA@| [ DATA ] ; `string'

  00040			 AREA	 |.bss|, NOINIT
|?szBuffer@?1??OALKitlMACtoString@@9@9| % 0x24		; `OALKitlMACtoString'::`2'::szBuffer
|?szBuffer@?1??OALKitlMACtoString@@9@9| % 0x24		; `OALKitlMACtoString'::`2'::szBuffer

  00000			 AREA	 |.pdata|, PDATA
|$T43110| DCD	|$LN5@OALKitlMAC|
	DCD	0x40001a02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@BKFFFBIH@?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AA@| DCB "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x"
	DCB	0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, ":"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlMACtoString| PROC

; 40   : {

  00000		 |$LN5@OALKitlMAC|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M43107|

; 41   :     static WCHAR szBuffer[18];
; 42   : 
; 43   :     OALLogPrintf(
; 44   :         szBuffer, sizeof(szBuffer)/sizeof(WCHAR), 
; 45   :         L"%02x:%02x:%02x:%02x:%02x:%02x", mac[0]&0xFF, mac[0]>>8, mac[1]&0xFF,
; 46   :         mac[1]>>8, mac[2]&0xFF, mac[2]>>8
; 47   :     );

  00008	e1d010b4	 ldrh        r1, [r0, #4]
  0000c	e1d040b2	 ldrh        r4, [r0, #2]
  00010	e1d060b0	 ldrh        r6, [r0]
  00014	e1a03421	 mov         r3, r1, lsr #8
  00018	e59f2044	 ldr         r2, [pc, #0x44]
  0001c	e59f003c	 ldr         r0, [pc, #0x3C]
  00020	e20110ff	 and         r1, r1, #0xFF
  00024	e1a0e424	 mov         lr, r4, lsr #8
  00028	e58d100c	 str         r1, [sp, #0xC]
  0002c	e20440ff	 and         r4, r4, #0xFF
  00030	e1a05426	 mov         r5, r6, lsr #8
  00034	e58d3010	 str         r3, [sp, #0x10]
  00038	e3a01012	 mov         r1, #0x12
  0003c	e20630ff	 and         r3, r6, #0xFF
  00040	e58de008	 str         lr, [sp, #8]
  00044	e58d4004	 str         r4, [sp, #4]
  00048	e58d5000	 str         r5, [sp]
  0004c	eb000000	 bl          OALLogPrintf

; 48   :     return szBuffer;
; 49   : }    

  00050	e59f0008	 ldr         r0, [pc, #8]
  00054	e28dd014	 add         sp, sp, #0x14
  00058	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN6@OALKitlMAC|
  00060		 |$LN7@OALKitlMAC|
  00060	00000000	 DCD         |?szBuffer@?1??OALKitlMACtoString@@9@9|
  00064		 |$LN8@OALKitlMAC|
  00064	00000000	 DCD         |??_C@_1DM@BKFFFBIH@?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AA@|
  00068		 |$M43108|

			 ENDP  ; |OALKitlMACtoString|

	EXPORT	|OALKitlStringToIP|

  00000			 AREA	 |.pdata|, PDATA
|$T43135| DCD	|$LN22@OALKitlStr|
	DCD	0x40002201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlStringToIP| PROC

; 57   : {

  00000		 |$LN22@OALKitlStr|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43132|
  00004	e1a0e000	 mov         lr, r0

; 58   :     UINT32 ip = 0, count, part;

  00008	e3a00000	 mov         r0, #0

; 59   :     LPCWSTR psz;
; 60   :     
; 61   :     // Replace the dots with NULL terminators
; 62   :     psz = szIP;
; 63   :     count = 0;

  0000c	e3a01000	 mov         r1, #0

; 64   :     part = 0;

  00010	e3a04000	 mov         r4, #0
  00014		 |$LL9@OALKitlStr|

; 65   :     while (count < 4) {
; 66   :         if (*psz == L'.' || *psz == L'\0') {

  00014	e1de20b0	 ldrh        r2, [lr]
  00018	e352002e	 cmp         r2, #0x2E
  0001c	0a00000f	 beq         |$LN6@OALKitlStr|
  00020	e3520000	 cmp         r2, #0
  00024	0a00000d	 beq         |$LN6@OALKitlStr|

; 70   :         } else if (*psz >= L'0' && *psz <= L'9') {

  00028	e3520030	 cmp         r2, #0x30
  0002c	3a000007	 bcc         |$LN19@OALKitlStr|
  00030	e3520039	 cmp         r2, #0x39
  00034	8a000005	 bhi         |$LN19@OALKitlStr|

; 71   :             part = part * 10 + (*psz - L'0');

  00038	e0843104	 add         r3, r4, r4, lsl #2
  0003c	e0823083	 add         r3, r2, r3, lsl #1
  00040	e2434030	 sub         r4, r3, #0x30

; 72   :             if (part > 255) {

  00044	e35400ff	 cmp         r4, #0xFF
  00048	9a000008	 bls         |$LN2@OALKitlStr|

; 73   :                 ip = 0;

  0004c	e3a00000	 mov         r0, #0
  00050		 |$LN19@OALKitlStr|

; 81   :     }
; 82   :     return count >= 4 ? ip : 0;

  00050	e3510004	 cmp         r1, #4
  00054	33a00000	 movcc       r0, #0

; 83   : } 

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN6@OALKitlStr|

; 67   :             ip |= part << (count << 3);

  00060	e1a03181	 mov         r3, r1, lsl #3
  00064	e1800314	 orr         r0, r0, r4, lsl r3

; 68   :             part = 0;

  00068	e3a04000	 mov         r4, #0

; 69   :             count++;

  0006c	e2811001	 add         r1, r1, #1
  00070		 |$LN2@OALKitlStr|

; 74   :                 break;
; 75   :             }
; 76   :         } else {
; 77   :             break;
; 78   :         }
; 79   :         if (*psz == L'\0') break;

  00070	e3520000	 cmp         r2, #0
  00074	0afffff5	 beq         |$LN19@OALKitlStr|

; 80   :         psz++;

  00078	e28ee002	 add         lr, lr, #2
  0007c	e3510004	 cmp         r1, #4
  00080	3affffe3	 bcc         |$LL9@OALKitlStr|
  00084	eafffff1	 b           |$LN19@OALKitlStr|
  00088		 |$M43133|

			 ENDP  ; |OALKitlStringToIP|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|OALKitlStringToMAC|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|memset|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T43163| DCD	|$LN22@OALKitlStr@2|
	DCD	0xc0005102

  00000			 AREA	 |.xdata|, DATA
|$T43159| DCD	0xffffffe4
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T43159|

  00008		 |OALKitlStringToMAC| PROC

; 91   : {

  00008		 |$LN22@OALKitlStr@2|
  00008	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M43160|
  00010	e1a07001	 mov         r7, r1
  00014	e1a06000	 mov         r6, r0
  00018	e59f3128	 ldr         r3, [pc, #0x128]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3008	 str         r3, [sp, #8]

; 92   :     INT32 i, j;
; 93   :     LPCWSTR pos;
; 94   :     WCHAR ch;
; 95   :     UINT8 m[6];
; 96   : 
; 97   :     // Convert string to MAC address
; 98   :     memset(m, 0, sizeof(m));

  00024	e3a02006	 mov         r2, #6
  00028	e3a01000	 mov         r1, #0
  0002c	e28d0000	 add         r0, sp, #0
  00030	eb000000	 bl          memset

; 99   :     i = j = 0;

  00034	e3a05000	 mov         r5, #0
  00038	e3a04000	 mov         r4, #0

; 100  :     pos = szMAC;

  0003c	e28d1000	 add         r1, sp, #0
  00040	e28d0000	 add         r0, sp, #0
  00044	e28d8000	 add         r8, sp, #0
  00048		 |$LL12@OALKitlStr@2|

; 101  :     while (i < 6) {
; 102  :         ch = *pos;

  00048	e1d6e0b0	 ldrh        lr, [r6]

; 103  :         if (ch == L'-' || ch == L':' || ch == L'.') {

  0004c	e35e002d	 cmp         lr, #0x2D
  00050	0a000021	 beq         |$LN9@OALKitlStr@2|
  00054	e35e003a	 cmp         lr, #0x3A
  00058	0a00001f	 beq         |$LN9@OALKitlStr@2|
  0005c	e35e002e	 cmp         lr, #0x2E
  00060	0a00001d	 beq         |$LN9@OALKitlStr@2|

; 106  :         } else {
; 107  :             if (j >= 2) {

  00064	e3550002	 cmp         r5, #2

; 108  :                 i++;

  00068	a2844001	 addge       r4, r4, #1

; 109  :                 j = 0;

  0006c	a3a05000	 movge       r5, #0

; 110  :             }
; 111  :             if (ch >= L'0' && ch <= L'9') {

  00070	e35e0030	 cmp         lr, #0x30
  00074	3a000005	 bcc         |$LN6@OALKitlStr@2|
  00078	e35e0039	 cmp         lr, #0x39
  0007c	91a02004	 movls       r2, r4

; 112  :                 m[i] = (m[i] << 4) + (ch - L'0');

  00080	97f23001	 ldrlsb      r3, [r2, +r1]!
  00084	9283300d	 addls       r3, r3, #0xD
  00088	908e3203	 addls       r3, lr, r3, lsl #4
  0008c	9a00000f	 bls         |$LN19@OALKitlStr@2|
  00090		 |$LN6@OALKitlStr@2|

; 113  :             } else if (ch >= L'a' && ch <= L'f') {

  00090	e35e0061	 cmp         lr, #0x61
  00094	3a000005	 bcc         |$LN4@OALKitlStr@2|
  00098	e35e0066	 cmp         lr, #0x66
  0009c	91a02004	 movls       r2, r4

; 114  :                 m[i] = (m[i] << 4) + (ch - L'a' + 10);

  000a0	97f23000	 ldrlsb      r3, [r2, +r0]!
  000a4	908e3203	 addls       r3, lr, r3, lsl #4
  000a8	928330a9	 addls       r3, r3, #0xA9
  000ac	9a000007	 bls         |$LN19@OALKitlStr@2|
  000b0		 |$LN4@OALKitlStr@2|

; 115  :             } else if (ch >= 'A' && ch <= 'F') {

  000b0	e35e0041	 cmp         lr, #0x41
  000b4	3a00000d	 bcc         |$LN2@OALKitlStr@2|
  000b8	e35e0046	 cmp         lr, #0x46
  000bc	8a00000b	 bhi         |$LN2@OALKitlStr@2|
  000c0	e1a02004	 mov         r2, r4

; 116  :                 m[i] = (m[i] << 4) + (ch - 'A' + 10);

  000c4	e7f23008	 ldrb        r3, [r2, +r8]!
  000c8	e08e3203	 add         r3, lr, r3, lsl #4
  000cc	e28330c9	 add         r3, r3, #0xC9
  000d0		 |$LN19@OALKitlStr@2|
  000d0	e5c23000	 strb        r3, [r2]

; 117  :             } else {
; 118  :                 break;
; 119  :             }
; 120  :             j++;

  000d4	e2855001	 add         r5, r5, #1
  000d8	ea000001	 b           |$LN8@OALKitlStr@2|
  000dc		 |$LN9@OALKitlStr@2|

; 104  :             i++;

  000dc	e2844001	 add         r4, r4, #1

; 105  :             j = 0;

  000e0	e3a05000	 mov         r5, #0
  000e4		 |$LN8@OALKitlStr@2|

; 121  :         }
; 122  :         pos++;

  000e4	e2866002	 add         r6, r6, #2
  000e8	e3540006	 cmp         r4, #6
  000ec	baffffd5	 blt         |$LL12@OALKitlStr@2|
  000f0		 |$LN2@OALKitlStr@2|

; 123  :     }   
; 124  : 
; 125  :     // Convert type
; 126  :     mac[0] = (m[1] << 8)|m[0];

  000f0	e5dd4001	 ldrb        r4, [sp, #1]
  000f4	e5dd2000	 ldrb        r2, [sp]

; 127  :     mac[1] = (m[3] << 8)|m[2];

  000f8	e5dde003	 ldrb        lr, [sp, #3]
  000fc	e5dd1002	 ldrb        r1, [sp, #2]

; 128  :     mac[2] = (m[5] << 8)|m[4];

  00100	e5dd0005	 ldrb        r0, [sp, #5]
  00104	e5dd3004	 ldrb        r3, [sp, #4]
  00108	e1822404	 orr         r2, r2, r4, lsl #8
  0010c	e181140e	 orr         r1, r1, lr, lsl #8
  00110	e1833400	 orr         r3, r3, r0, lsl #8
  00114	e1c720b0	 strh        r2, [r7]
  00118	e1c710b2	 strh        r1, [r7, #2]
  0011c	e1c730b4	 strh        r3, [r7, #4]

; 129  : 
; 130  :     return (*pos == L'\0');

  00120	e1d630b0	 ldrh        r3, [r6]
  00124	e3530000	 cmp         r3, #0
  00128	03a04001	 moveq       r4, #1
  0012c	13a04000	 movne       r4, #0
  00130	e59d0008	 ldr         r0, [sp, #8]
  00134	eb000000	 bl          __security_check_cookie

; 131  : }

  00138	e1a00004	 mov         r0, r4
  0013c	e28dd00c	 add         sp, sp, #0xC
  00140	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00144	e12fff1e	 bx          lr
  00148		 |$LN23@OALKitlStr@2|
  00148		 |$LN24@OALKitlStr@2|
  00148	00000000	 DCD         |__security_cookie|
  0014c		 |$M43161|

			 ENDP  ; |OALKitlStringToMAC|

	END
