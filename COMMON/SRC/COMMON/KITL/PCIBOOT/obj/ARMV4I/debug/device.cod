; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\KITL\device.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	EXPORT	|OALKitlFindDevice|
	IMPORT	|OALPAtoVA|
	IMPORT	|OALIoTransBusAddress|
	IMPORT	|KITLOutputDebugString|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T43233| DCD	|$LN32@OALKitlFin|
	DCD	0x4000e304
; File c:\wince600\platform\common\src\common\kitl\device.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@| DCB "-O"
	DCB	"ALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%"
	DCB	"08x)", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlFindDevice(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlFindDevice| PROC

; 65   : ) {

  00000		 |$LN32@OALKitlFin|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd048	 sub         sp, sp, #0x48
  00010		 |$M43230|

; 66   :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d300c	 str         r3, [sp, #0xC]

; 67   :     UINT32 space, id = 0xFFFFFFFF;

  00018	e3e03000	 mvn         r3, #0
  0001c	e58d3008	 str         r3, [sp, #8]

; 68   :     UINT64 address;
; 69   : #ifndef BUILDING_BOOTLOADER // Not building boot loader
; 70   :     OAL_DDK_PARAMS params;
; 71   : #endif
; 72   :     
; 73   :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 74   :         "+OALKitlFindDevice(%d/%d/%08x, 0x%08x)\r\n",
; 75   :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 76   :     ));

  00020	e59f335c	 ldr         r3, [pc, #0x35C]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130a01	 tst         r3, #1, 20
  0002c	0a00000e	 beq         |$LN21@OALKitlFin|
  00030	e59d3054	 ldr         r3, [sp, #0x54]
  00034	e58d3000	 str         r3, [sp]
  00038	e59d3050	 ldr         r3, [sp, #0x50]
  0003c	e2833008	 add         r3, r3, #8
  00040	e5933000	 ldr         r3, [r3]
  00044	e59d2050	 ldr         r2, [sp, #0x50]
  00048	e2822004	 add         r2, r2, #4
  0004c	e5922000	 ldr         r2, [r2]
  00050	e59d1050	 ldr         r1, [sp, #0x50]
  00054	e5911000	 ldr         r1, [r1]
  00058	e59f0328	 ldr         r0, [pc, #0x328]
  0005c	eb000000	 bl          KITLOutputDebugString
  00060	e3a03001	 mov         r3, #1
  00064	e58d3030	 str         r3, [sp, #0x30]
  00068	ea000001	 b           |$LN22@OALKitlFin|
  0006c		 |$LN21@OALKitlFin|
  0006c	e3a03000	 mov         r3, #0
  00070	e58d3030	 str         r3, [sp, #0x30]
  00074		 |$LN22@OALKitlFin|
  00074		 |$LN29@OALKitlFin|
  00074		 |$LN28@OALKitlFin|
  00074		 |$LN27@OALKitlFin|
  00074		 |$LN18@OALKitlFin|

; 77   : 
; 78   :     // Look for driver in list
; 79   :     while (pDevice->name != NULL && !rc) {

  00074	e59d3054	 ldr         r3, [sp, #0x54]
  00078	e5933000	 ldr         r3, [r3]
  0007c	e3530000	 cmp         r3, #0
  00080	0a000099	 beq         |$LN17@OALKitlFin|
  00084	e59d300c	 ldr         r3, [sp, #0xC]
  00088	e3530000	 cmp         r3, #0
  0008c	1a000096	 bne         |$LN17@OALKitlFin|

; 80   : 
; 81   :         // Is it our device? Then move
; 82   :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00090	e59d3054	 ldr         r3, [sp, #0x54]
  00094	e2831004	 add         r1, r3, #4
  00098	e59d3050	 ldr         r3, [sp, #0x50]
  0009c	e5932000	 ldr         r2, [r3]
  000a0	e5913000	 ldr         r3, [r1]
  000a4	e1520003	 cmp         r2, r3
  000a8	0a000003	 beq         |$LN16@OALKitlFin|

; 83   :             // Move to next driver
; 84   :             pDevice++;

  000ac	e59d3054	 ldr         r3, [sp, #0x54]
  000b0	e2833018	 add         r3, r3, #0x18
  000b4	e58d3054	 str         r3, [sp, #0x54]

; 85   :             continue;

  000b8	eaffffed	 b           |$LN18@OALKitlFin|
  000bc		 |$LN16@OALKitlFin|

; 86   :         }            
; 87   : 
; 88   :         // Identify device and read its address/interrupt depends on bus type
; 89   :         switch (pDevLoc->IfcType) {

  000bc	e59d3050	 ldr         r3, [sp, #0x50]
  000c0	e5933000	 ldr         r3, [r3]
  000c4	e58d3034	 str         r3, [sp, #0x34]
  000c8	e59d3034	 ldr         r3, [sp, #0x34]
  000cc	e3530000	 cmp         r3, #0
  000d0	0a000018	 beq         |$LN11@OALKitlFin|
  000d4	e59d3034	 ldr         r3, [sp, #0x34]
  000d8	e3530005	 cmp         r3, #5
  000dc	0a000027	 beq         |$LN9@OALKitlFin|
  000e0	e59d3034	 ldr         r3, [sp, #0x34]
  000e4	e3730001	 cmn         r3, #1
  000e8	0a000000	 beq         |$LN13@OALKitlFin|
  000ec	ea000032	 b           |$LN14@OALKitlFin|
  000f0		 |$LN13@OALKitlFin|

; 90   :         case InterfaceTypeUndefined:
; 91   :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  000f0	e59d3050	 ldr         r3, [sp, #0x50]
  000f4	e2832008	 add         r2, r3, #8
  000f8	e59d3054	 ldr         r3, [sp, #0x54]
  000fc	e2833008	 add         r3, r3, #8
  00100	e5922000	 ldr         r2, [r2]
  00104	e5933000	 ldr         r3, [r3]
  00108	e1520003	 cmp         r2, r3
  0010c	0a000000	 beq         |$LN12@OALKitlFin|
  00110	ea000029	 b           |$LN14@OALKitlFin|
  00114		 |$LN12@OALKitlFin|

; 92   :             address = pDevLoc->LogicalLoc;

  00114	e59d3050	 ldr         r3, [sp, #0x50]
  00118	e2833008	 add         r3, r3, #8
  0011c	e5933000	 ldr         r3, [r3]
  00120	e58d3014	 str         r3, [sp, #0x14]
  00124	e3a03000	 mov         r3, #0
  00128	e58d3018	 str         r3, [sp, #0x18]

; 93   :             rc = TRUE;

  0012c	e3a03001	 mov         r3, #1
  00130	e58d300c	 str         r3, [sp, #0xC]

; 94   :             break;

  00134	ea000020	 b           |$LN14@OALKitlFin|
  00138		 |$LN11@OALKitlFin|

; 95   :         case Internal:
; 96   :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  00138	e59d3050	 ldr         r3, [sp, #0x50]
  0013c	e2832008	 add         r2, r3, #8
  00140	e59d3054	 ldr         r3, [sp, #0x54]
  00144	e2833008	 add         r3, r3, #8
  00148	e5922000	 ldr         r2, [r2]
  0014c	e5933000	 ldr         r3, [r3]
  00150	e1520003	 cmp         r2, r3
  00154	0a000000	 beq         |$LN10@OALKitlFin|
  00158	ea000017	 b           |$LN14@OALKitlFin|
  0015c		 |$LN10@OALKitlFin|

; 97   :             address = pDevLoc->LogicalLoc;

  0015c	e59d3050	 ldr         r3, [sp, #0x50]
  00160	e2833008	 add         r3, r3, #8
  00164	e5933000	 ldr         r3, [r3]
  00168	e58d3014	 str         r3, [sp, #0x14]
  0016c	e3a03000	 mov         r3, #0
  00170	e58d3018	 str         r3, [sp, #0x18]

; 98   :             rc = TRUE;

  00174	e3a03001	 mov         r3, #1
  00178	e58d300c	 str         r3, [sp, #0xC]

; 99   :             break;

  0017c	ea00000e	 b           |$LN14@OALKitlFin|
  00180		 |$LN9@OALKitlFin|

; 100  : #ifdef KITL_PCI            
; 101  :         case PCIBus:
; 102  :             OALKitlPCIInfo(pDevLoc, &id, &address, &pDevLoc->Pin);

  00180	e59d3050	 ldr         r3, [sp, #0x50]
  00184	e2833010	 add         r3, r3, #0x10
  00188	e28d2014	 add         r2, sp, #0x14
  0018c	e28d1008	 add         r1, sp, #8
  00190	e59d0050	 ldr         r0, [sp, #0x50]
  00194	eb000000	 bl          OALKitlPCIInfo

; 103  :             if (id != pDevice->id) break;

  00198	e59d3054	 ldr         r3, [sp, #0x54]
  0019c	e2833008	 add         r3, r3, #8
  001a0	e59d2008	 ldr         r2, [sp, #8]
  001a4	e5933000	 ldr         r3, [r3]
  001a8	e1520003	 cmp         r2, r3
  001ac	0a000000	 beq         |$LN8@OALKitlFin|
  001b0	ea000001	 b           |$LN14@OALKitlFin|
  001b4		 |$LN8@OALKitlFin|

; 104  :             rc = TRUE;

  001b4	e3a03001	 mov         r3, #1
  001b8	e58d300c	 str         r3, [sp, #0xC]
  001bc		 |$LN14@OALKitlFin|

; 105  :             break;
; 106  : #endif
; 107  :         }
; 108  : 
; 109  :         // If we don't identify device skip it
; 110  :         if (!rc) {

  001bc	e59d300c	 ldr         r3, [sp, #0xC]
  001c0	e3530000	 cmp         r3, #0
  001c4	1a000003	 bne         |$LN7@OALKitlFin|

; 111  :             pDevice++;

  001c8	e59d3054	 ldr         r3, [sp, #0x54]
  001cc	e2833018	 add         r3, r3, #0x18
  001d0	e58d3054	 str         r3, [sp, #0x54]

; 112  :             continue;

  001d4	eaffffa6	 b           |$LN27@OALKitlFin|
  001d8		 |$LN7@OALKitlFin|

; 113  :         }
; 114  : 
; 115  :         // When interface type is undefined physical address
; 116  :         // is equal to logical, so break loop
; 117  :         if (pDevLoc->IfcType == InterfaceTypeUndefined) {

  001d8	e59d3050	 ldr         r3, [sp, #0x50]
  001dc	e5933000	 ldr         r3, [r3]
  001e0	e3730001	 cmn         r3, #1
  001e4	1a000004	 bne         |$LN6@OALKitlFin|

; 118  :             pDevLoc->PhysicalLoc = (VOID*)address;

  001e8	e59d2014	 ldr         r2, [sp, #0x14]
  001ec	e59d3050	 ldr         r3, [sp, #0x50]
  001f0	e283300c	 add         r3, r3, #0xC
  001f4	e5832000	 str         r2, [r3]

; 119  :             break;

  001f8	ea00003b	 b           |$LN17@OALKitlFin|
  001fc		 |$LN6@OALKitlFin|

; 120  :         }
; 121  : 
; 122  :         // Translate bus address, if it fails skip device
; 123  :         // Are we in IO space (1) or memory space (0)?
; 124  :         space = (UINT32)address & 0x1;

  001fc	e59d3014	 ldr         r3, [sp, #0x14]
  00200	e2033001	 and         r3, r3, #1
  00204	e58d3010	 str         r3, [sp, #0x10]

; 125  : 
; 126  :         // Mask off the lowest bit; it just indicates which space we're in.  This isn't
; 127  :         // actually part of the address
; 128  :         address &= ~0x1;

  00208	e59d2014	 ldr         r2, [sp, #0x14]
  0020c	e3e03001	 mvn         r3, #1
  00210	e0022003	 and         r2, r2, r3
  00214	e59d3018	 ldr         r3, [sp, #0x18]
  00218	e58d2014	 str         r2, [sp, #0x14]
  0021c	e58d3018	 str         r3, [sp, #0x18]

; 129  : 
; 130  : #ifdef BUILDING_BOOTLOADER
; 131  :         if (!OALIoTransBusAddress(
; 132  :             pDevLoc->IfcType, pDevLoc->BusNumber, address, &space, &address
; 133  :         )) {

  00220	e28d3014	 add         r3, sp, #0x14
  00224	e58d3004	 str         r3, [sp, #4]
  00228	e28d3010	 add         r3, sp, #0x10
  0022c	e58d3000	 str         r3, [sp]
  00230	e59d2014	 ldr         r2, [sp, #0x14]
  00234	e59d3018	 ldr         r3, [sp, #0x18]
  00238	e59d1050	 ldr         r1, [sp, #0x50]
  0023c	e2811004	 add         r1, r1, #4
  00240	e5911000	 ldr         r1, [r1]
  00244	e59d0050	 ldr         r0, [sp, #0x50]
  00248	e5900000	 ldr         r0, [r0]
  0024c	eb000000	 bl          OALIoTransBusAddress
  00250	e58d0038	 str         r0, [sp, #0x38]
  00254	e59d3038	 ldr         r3, [sp, #0x38]
  00258	e3530000	 cmp         r3, #0
  0025c	1a000005	 bne         |$LN5@OALKitlFin|

; 134  :             rc = FALSE;

  00260	e3a03000	 mov         r3, #0
  00264	e58d300c	 str         r3, [sp, #0xC]

; 135  :             pDevice++;

  00268	e59d3054	 ldr         r3, [sp, #0x54]
  0026c	e2833018	 add         r3, r3, #0x18
  00270	e58d3054	 str         r3, [sp, #0x54]

; 136  :             continue;

  00274	eaffff7e	 b           |$LN28@OALKitlFin|
  00278		 |$LN5@OALKitlFin|

; 137  :         }
; 138  : 
; 139  :         // If address has address above 32bit address space skip device
; 140  :         if ((address >> 32) != 0) {

  00278	e59d3018	 ldr         r3, [sp, #0x18]
  0027c	e3530000	 cmp         r3, #0
  00280	0a000005	 beq         |$LN4@OALKitlFin|

; 141  :             rc = FALSE;

  00284	e3a03000	 mov         r3, #0
  00288	e58d300c	 str         r3, [sp, #0xC]

; 142  :             pDevice++;

  0028c	e59d3054	 ldr         r3, [sp, #0x54]
  00290	e2833018	 add         r3, r3, #0x18
  00294	e58d3054	 str         r3, [sp, #0x54]

; 143  :             continue;

  00298	eaffff75	 b           |$LN29@OALKitlFin|
  0029c		 |$LN4@OALKitlFin|

; 144  :         }
; 145  : 
; 146  : 
; 147  :         if (space == 0) {

  0029c	e59d3010	 ldr         r3, [sp, #0x10]
  002a0	e3530000	 cmp         r3, #0
  002a4	1a000008	 bne         |$LN3@OALKitlFin|

; 148  :             // Do mapping to virtual address for memory space
; 149  :             pDevLoc->PhysicalLoc = OALPAtoVA((UINT32)address, FALSE);

  002a8	e3a01000	 mov         r1, #0
  002ac	e59d0014	 ldr         r0, [sp, #0x14]
  002b0	eb000000	 bl          OALPAtoVA
  002b4	e58d003c	 str         r0, [sp, #0x3C]
  002b8	e59d3050	 ldr         r3, [sp, #0x50]
  002bc	e283200c	 add         r2, r3, #0xC
  002c0	e59d303c	 ldr         r3, [sp, #0x3C]
  002c4	e5823000	 str         r3, [r2]

; 150  :         }
; 151  :         else

  002c8	ea000005	 b           |$LN2@OALKitlFin|
  002cc		 |$LN3@OALKitlFin|

; 152  :         {
; 153  :             // We're in IO space, no mapping necessary
; 154  :             UINT8* pAddress = (UINT8*)address;

  002cc	e59d3014	 ldr         r3, [sp, #0x14]
  002d0	e58d301c	 str         r3, [sp, #0x1C]

; 155  :             pDevLoc->PhysicalLoc = (VOID*)address;

  002d4	e59d2014	 ldr         r2, [sp, #0x14]
  002d8	e59d3050	 ldr         r3, [sp, #0x50]
  002dc	e283300c	 add         r3, r3, #0xC
  002e0	e5832000	 str         r2, [r3]
  002e4		 |$LN2@OALKitlFin|

; 156  :         }
; 157  : #else // Not building boot loader
; 158  :         params.function = IOCTL_OAL_TRANSBUSADDRESS;
; 159  :         params.transAddress.ifcType = pDevLoc->IfcType;
; 160  :         params.transAddress.busNumber = pDevLoc->BusNumber;
; 161  :         params.transAddress.space = space;
; 162  :         params.transAddress.address = address;
; 163  :         if (!OEMIoControl(
; 164  :             IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, NULL
; 165  :         ) || !params.rc) {
; 166  :             rc = FALSE;
; 167  :             pDevice++;
; 168  :             continue;
; 169  :         }
; 170  :         address = params.transAddress.address;
; 171  :         space = params.transAddress.space;
; 172  : 
; 173  :         // If address has address above 32bit address space skip device
; 174  :         if ((address >> 32) != 0) {
; 175  :             rc = FALSE;
; 176  :             pDevice++;
; 177  :             continue;
; 178  :         }
; 179  : 
; 180  :         // Do mapping to virtual address for memory space
; 181  :         if (space == 0) {
; 182  :             UINT32 offset;
; 183  :             UINT8 *pAddress;
; 184  :             UINT32 pa = (UINT32)address;
; 185  :             
; 186  :             offset = pa & (VM_PAGE_SIZE - 1);
; 187  :             pa &= ~(VM_PAGE_SIZE - 1);
; 188  :             pAddress = NKPhysToVirt(pa >> 8, FALSE);
; 189  :             pAddress += offset;
; 190  :             
; 191  :             pDevLoc->PhysicalLoc = pAddress;
; 192  :         }
; 193  :         else
; 194  :         {
; 195  :             // We're in IO space, no mapping necessary
; 196  :             UINT8* pAddress = (UINT8*)address;
; 197  :             pDevLoc->PhysicalLoc = (VOID*)address;
; 198  :         }
; 199  : #endif
; 200  :         // We get all we need
; 201  :         break;

  002e4	ea000000	 b           |$LN17@OALKitlFin|

; 202  :     }

  002e8	eaffff61	 b           |$LN18@OALKitlFin|
  002ec		 |$LN17@OALKitlFin|

; 203  : 
; 204  :     // Return NULL if driver wasn't found
; 205  :     if (!rc) pDevice = NULL;

  002ec	e59d300c	 ldr         r3, [sp, #0xC]
  002f0	e3530000	 cmp         r3, #0
  002f4	1a000001	 bne         |$LN1@OALKitlFin|
  002f8	e3a03000	 mov         r3, #0
  002fc	e58d3054	 str         r3, [sp, #0x54]
  00300		 |$LN1@OALKitlFin|

; 206  : 
; 207  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 208  :         "-OALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%08x)\r\n",
; 209  :         pDevice, (pDevice != NULL) ? pDevice->name : L"", pDevLoc->PhysicalLoc
; 210  :     ));

  00300	e59f307c	 ldr         r3, [pc, #0x7C]
  00304	e5933440	 ldr         r3, [r3, #0x440]
  00308	e3130a01	 tst         r3, #1, 20
  0030c	0a000012	 beq         |$LN25@OALKitlFin|
  00310	e59d3054	 ldr         r3, [sp, #0x54]
  00314	e3530000	 cmp         r3, #0
  00318	0a000003	 beq         |$LN23@OALKitlFin|
  0031c	e59d3054	 ldr         r3, [sp, #0x54]
  00320	e5933000	 ldr         r3, [r3]
  00324	e58d3040	 str         r3, [sp, #0x40]
  00328	ea000001	 b           |$LN24@OALKitlFin|
  0032c		 |$LN23@OALKitlFin|
  0032c	e59f304c	 ldr         r3, [pc, #0x4C]
  00330	e58d3040	 str         r3, [sp, #0x40]
  00334		 |$LN24@OALKitlFin|
  00334	e59d3050	 ldr         r3, [sp, #0x50]
  00338	e283300c	 add         r3, r3, #0xC
  0033c	e5933000	 ldr         r3, [r3]
  00340	e59d2040	 ldr         r2, [sp, #0x40]
  00344	e59d1054	 ldr         r1, [sp, #0x54]
  00348	e59f002c	 ldr         r0, [pc, #0x2C]
  0034c	eb000000	 bl          KITLOutputDebugString
  00350	e3a03001	 mov         r3, #1
  00354	e58d3044	 str         r3, [sp, #0x44]
  00358	ea000001	 b           |$LN26@OALKitlFin|
  0035c		 |$LN25@OALKitlFin|
  0035c	e3a03000	 mov         r3, #0
  00360	e58d3044	 str         r3, [sp, #0x44]
  00364		 |$LN26@OALKitlFin|

; 211  :     return pDevice;

  00364	e59d3054	 ldr         r3, [sp, #0x54]
  00368	e58d302c	 str         r3, [sp, #0x2C]

; 212  : }

  0036c	e59d002c	 ldr         r0, [sp, #0x2C]
  00370	e28dd048	 add         sp, sp, #0x48
  00374	e89d6000	 ldmia       sp, {sp, lr}
  00378	e12fff1e	 bx          lr
  0037c		 |$LN33@OALKitlFin|
  0037c		 |$LN34@OALKitlFin|
  0037c	00000000	 DCD         |??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@|
  00380		 |$LN35@OALKitlFin|
  00380	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  00384		 |$LN36@OALKitlFin|
  00384	00000000	 DCD         |dpCurSettings|
  00388		 |$LN37@OALKitlFin|
  00388	00000000	 DCD         |??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  0038c		 |$M43231|

			 ENDP  ; |OALKitlFindDevice|

	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|OEMIoControl|
	IMPORT	|memset|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|memcpy|
	IMPORT	|__security_check_cookie|

  00008			 AREA	 |.pdata|, PDATA
|$T43251| DCD	|$LN7@OALKitlPCI|
	DCD	0xc0004d04

  00000			 AREA	 |.xdata|, DATA
|$T43247| DCD	0xffffffd8
; Function compile flags: /Odtp

  0038c			 AREA	 |.text|, CODE, ARM

  0038c	00000000	 DCD         |__GSHandlerCheck|
  00390	00000000	 DCD         |$T43247|

  00394		 |OALKitlPCIInfo| PROC

; 26   : ) {

  00394		 |$LN7@OALKitlPCI|
  00394	e1a0c00d	 mov         r12, sp
  00398	e92d000f	 stmdb       sp!, {r0 - r3}
  0039c	e92d5000	 stmdb       sp!, {r12, lr}
  003a0	e24ddd05	 sub         sp, sp, #5, 26
  003a4		 |$M43248|
  003a4	e59f3118	 ldr         r3, [pc, #0x118]
  003a8	e5933000	 ldr         r3, [r3]
  003ac	e58d3130	 str         r3, [sp, #0x130]

; 27   :     PCI_COMMON_CONFIG config;
; 28   :     OAL_DDK_PARAMS params;
; 29   : 
; 30   :     memset(&config, 0xFF, sizeof(config));

  003b0	e3a02c01	 mov         r2, #1, 24
  003b4	e3a010ff	 mov         r1, #0xFF
  003b8	e28d0008	 add         r0, sp, #8
  003bc	eb000000	 bl          memset

; 31   :     *pId = 0xFFFFFFFF;

  003c0	e59d214c	 ldr         r2, [sp, #0x14C]
  003c4	e3e03000	 mvn         r3, #0
  003c8	e5823000	 str         r3, [r2]

; 32   :     *pAddress = 0;

  003cc	e59d2150	 ldr         r2, [sp, #0x150]
  003d0	e3a03000	 mov         r3, #0
  003d4	e5823000	 str         r3, [r2]
  003d8	e59d2150	 ldr         r2, [sp, #0x150]
  003dc	e3a03000	 mov         r3, #0
  003e0	e5823004	 str         r3, [r2, #4]

; 33   :     *pIrqPin = 0;

  003e4	e59d2154	 ldr         r2, [sp, #0x154]
  003e8	e3a03000	 mov         r3, #0
  003ec	e5823000	 str         r3, [r2]

; 34   :     
; 35   :     params.function = IOCTL_OAL_READBUSDATA;

  003f0	e3a03003	 mov         r3, #3
  003f4	e58d3108	 str         r3, [sp, #0x108]

; 36   :     params.rc = 0;

  003f8	e3a03000	 mov         r3, #0
  003fc	e58d310c	 str         r3, [sp, #0x10C]

; 37   :     params.busData.devLoc = *pDevLoc;

  00400	e59d1148	 ldr         r1, [sp, #0x148]
  00404	e28d0e11	 add         r0, sp, #0x11, 28
  00408	e3a02014	 mov         r2, #0x14
  0040c	eb000000	 bl          memcpy

; 38   :     params.busData.offset = 0;

  00410	e3a03000	 mov         r3, #0
  00414	e58d3124	 str         r3, [sp, #0x124]

; 39   :     params.busData.length = sizeof(config);

  00418	e3a03c01	 mov         r3, #1, 24
  0041c	e58d3128	 str         r3, [sp, #0x128]

; 40   :     params.busData.pBuffer = &config;

  00420	e28d3008	 add         r3, sp, #8
  00424	e58d312c	 str         r3, [sp, #0x12C]

; 41   : 
; 42   :     if (!OEMIoControl(
; 43   :         IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, NULL
; 44   :     ) || !params.rc) goto cleanUp;

  00428	e3a03000	 mov         r3, #0
  0042c	e58d3004	 str         r3, [sp, #4]
  00430	e3a03000	 mov         r3, #0
  00434	e58d3000	 str         r3, [sp]
  00438	e3a03000	 mov         r3, #0
  0043c	e3a02028	 mov         r2, #0x28
  00440	e28d1f42	 add         r1, sp, #0x42, 30
  00444	e59f0074	 ldr         r0, [pc, #0x74]
  00448	eb000000	 bl          OEMIoControl
  0044c	e58d013c	 str         r0, [sp, #0x13C]
  00450	e59d313c	 ldr         r3, [sp, #0x13C]
  00454	e3530000	 cmp         r3, #0
  00458	0a000002	 beq         |$LN1@OALKitlPCI|
  0045c	e59d310c	 ldr         r3, [sp, #0x10C]
  00460	e3530000	 cmp         r3, #0
  00464	1a000000	 bne         |$LN2@OALKitlPCI|
  00468		 |$LN1@OALKitlPCI|
  00468	ea00000f	 b           |$cleanUp$43095|
  0046c		 |$LN2@OALKitlPCI|

; 45   : 
; 46   :     *pId = config.VendorID | (config.DeviceID << 16);

  0046c	e1dd30b8	 ldrh        r3, [sp, #8]
  00470	e1a02003	 mov         r2, r3
  00474	e1dd30ba	 ldrh        r3, [sp, #0xA]
  00478	e1a03803	 mov         r3, r3, lsl #16
  0047c	e1822003	 orr         r2, r2, r3
  00480	e59d314c	 ldr         r3, [sp, #0x14C]
  00484	e5832000	 str         r2, [r3]

; 47   :     *pAddress = config.u.type0.BaseAddresses[0];

  00488	e59d2018	 ldr         r2, [sp, #0x18]
  0048c	e59d3150	 ldr         r3, [sp, #0x150]
  00490	e5832000	 str         r2, [r3]
  00494	e59d2150	 ldr         r2, [sp, #0x150]
  00498	e3a03000	 mov         r3, #0
  0049c	e5823004	 str         r3, [r2, #4]

; 48   :     *pIrqPin = config.u.type0.InterruptPin;

  004a0	e5dd2045	 ldrb        r2, [sp, #0x45]
  004a4	e59d3154	 ldr         r3, [sp, #0x154]
  004a8	e5832000	 str         r2, [r3]
  004ac		 |$cleanUp$43095|

; 26   : ) {

  004ac	e59d0130	 ldr         r0, [sp, #0x130]
  004b0	eb000000	 bl          __security_check_cookie

; 49   :     
; 50   : cleanUp:    
; 51   :     return;
; 52   : }

  004b4	e28ddd05	 add         sp, sp, #5, 26
  004b8	e89d6000	 ldmia       sp, {sp, lr}
  004bc	e12fff1e	 bx          lr
  004c0		 |$LN8@OALKitlPCI|
  004c0		 |$LN9@OALKitlPCI|
  004c0	01010014	 DCD         0x1010014
  004c4		 |$LN10@OALKitlPCI|
  004c4	00000000	 DCD         |__security_cookie|
  004c8		 |$M43249|

			 ENDP  ; |OALKitlPCIInfo|

	EXPORT	|??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@MHLKLHLH@?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAi?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAe?$AAv?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAn?$AAc?$AA?5?$AA?$CF?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	EXPORT	|OALKitlDeviceName|
	IMPORT	|OALLogPrintf|
	IMPORT	|OALPCIGetId|

  00000			 AREA	 |.bss|, NOINIT
|?name@?1??OALKitlDeviceName@@9@9| % 0x80		; `OALKitlDeviceName'::`2'::name

  00010			 AREA	 |.pdata|, PDATA
|$T43270| DCD	|$LN20@OALKitlDev|
	DCD	0x40009104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@| DCB "-"
	DCB	"OALKitlDeviceName(name = 0x%08x('%s')", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@MHLKLHLH@?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAi?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAe?$AAv?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAn?$AAc?$AA?5?$AA?$CF?$AAd?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, " ", 0x0, "@", 0x0, " ", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "v", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "n", 0x0, "c", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlDeviceName(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  004c8			 AREA	 |.text|, CODE, ARM

  004c8		 |OALKitlDeviceName| PROC

; 221  : ) {

  004c8		 |$LN20@OALKitlDev|
  004c8	e1a0c00d	 mov         r12, sp
  004cc	e92d0003	 stmdb       sp!, {r0, r1}
  004d0	e92d5000	 stmdb       sp!, {r12, lr}
  004d4	e24dd048	 sub         sp, sp, #0x48
  004d8		 |$M43267|

; 222  :     BOOL rc = FALSE;

  004d8	e3a03000	 mov         r3, #0
  004dc	e58d3010	 str         r3, [sp, #0x10]

; 223  :     static WCHAR name[64];
; 224  :     LPCWSTR pName = NULL;

  004e0	e3a03000	 mov         r3, #0
  004e4	e58d3014	 str         r3, [sp, #0x14]

; 225  :     
; 226  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 227  :         "+OALKitlDeviceName(%d/%d/%08x, 0x%08x)\r\n",
; 228  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 229  :     ));

  004e8	e59f320c	 ldr         r3, [pc, #0x20C]
  004ec	e5933440	 ldr         r3, [r3, #0x440]
  004f0	e3130a01	 tst         r3, #1, 20
  004f4	0a00000e	 beq         |$LN13@OALKitlDev|
  004f8	e59d3054	 ldr         r3, [sp, #0x54]
  004fc	e58d3000	 str         r3, [sp]
  00500	e59d3050	 ldr         r3, [sp, #0x50]
  00504	e2833008	 add         r3, r3, #8
  00508	e5933000	 ldr         r3, [r3]
  0050c	e59d2050	 ldr         r2, [sp, #0x50]
  00510	e2822004	 add         r2, r2, #4
  00514	e5922000	 ldr         r2, [r2]
  00518	e59d1050	 ldr         r1, [sp, #0x50]
  0051c	e5911000	 ldr         r1, [r1]
  00520	e59f01e0	 ldr         r0, [pc, #0x1E0]
  00524	eb000000	 bl          KITLOutputDebugString
  00528	e3a03001	 mov         r3, #1
  0052c	e58d3038	 str         r3, [sp, #0x38]
  00530	ea000001	 b           |$LN14@OALKitlDev|
  00534		 |$LN13@OALKitlDev|
  00534	e3a03000	 mov         r3, #0
  00538	e58d3038	 str         r3, [sp, #0x38]
  0053c		 |$LN14@OALKitlDev|
  0053c		 |$LN17@OALKitlDev|
  0053c		 |$LN10@OALKitlDev|

; 230  : 
; 231  :     // Look for driver in list
; 232  :     while (pDevice->name != NULL && !rc) {

  0053c	e59d3054	 ldr         r3, [sp, #0x54]
  00540	e5933000	 ldr         r3, [r3]
  00544	e3530000	 cmp         r3, #0
  00548	0a000057	 beq         |$LN9@OALKitlDev|
  0054c	e59d3010	 ldr         r3, [sp, #0x10]
  00550	e3530000	 cmp         r3, #0
  00554	1a000054	 bne         |$LN9@OALKitlDev|

; 233  : 
; 234  :         // Is it our device? Then move
; 235  :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00558	e59d3054	 ldr         r3, [sp, #0x54]
  0055c	e2831004	 add         r1, r3, #4
  00560	e59d3050	 ldr         r3, [sp, #0x50]
  00564	e5932000	 ldr         r2, [r3]
  00568	e5913000	 ldr         r3, [r1]
  0056c	e1520003	 cmp         r2, r3
  00570	0a000003	 beq         |$LN8@OALKitlDev|

; 236  :             // Move to next driver
; 237  :             pDevice++;

  00574	e59d3054	 ldr         r3, [sp, #0x54]
  00578	e2833018	 add         r3, r3, #0x18
  0057c	e58d3054	 str         r3, [sp, #0x54]

; 238  :             continue;

  00580	eaffffed	 b           |$LN10@OALKitlDev|
  00584		 |$LN8@OALKitlDev|

; 239  :         }            
; 240  : 
; 241  :         // Identify device and read its address/interrupt depends on bus type
; 242  :         switch (pDevLoc->IfcType) {

  00584	e59d3050	 ldr         r3, [sp, #0x50]
  00588	e5933000	 ldr         r3, [r3]
  0058c	e58d303c	 str         r3, [sp, #0x3C]
  00590	e59d303c	 ldr         r3, [sp, #0x3C]
  00594	e3530000	 cmp         r3, #0
  00598	0a000003	 beq         |$LN5@OALKitlDev|
  0059c	e59d303c	 ldr         r3, [sp, #0x3C]
  005a0	e3530005	 cmp         r3, #5
  005a4	0a00000f	 beq         |$LN3@OALKitlDev|
  005a8	ea000036	 b           |$LN6@OALKitlDev|
  005ac		 |$LN5@OALKitlDev|

; 243  :         case Internal:
; 244  :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  005ac	e59d3050	 ldr         r3, [sp, #0x50]
  005b0	e2832008	 add         r2, r3, #8
  005b4	e59d3054	 ldr         r3, [sp, #0x54]
  005b8	e2833008	 add         r3, r3, #8
  005bc	e5922000	 ldr         r2, [r2]
  005c0	e5933000	 ldr         r3, [r3]
  005c4	e1520003	 cmp         r2, r3
  005c8	0a000000	 beq         |$LN4@OALKitlDev|
  005cc	ea00002d	 b           |$LN6@OALKitlDev|
  005d0		 |$LN4@OALKitlDev|

; 245  :             pName = pDevice->name;

  005d0	e59d3054	 ldr         r3, [sp, #0x54]
  005d4	e5933000	 ldr         r3, [r3]
  005d8	e58d3014	 str         r3, [sp, #0x14]

; 246  :             rc = TRUE;

  005dc	e3a03001	 mov         r3, #1
  005e0	e58d3010	 str         r3, [sp, #0x10]

; 247  :             break;

  005e4	ea000027	 b           |$LN6@OALKitlDev|
  005e8		 |$LN3@OALKitlDev|

; 248  : #ifdef KITL_PCI            
; 249  :         case PCIBus:
; 250  :             {
; 251  :                 UINT32 id;
; 252  :                 OAL_PCI_LOCATION pciLoc;
; 253  : 
; 254  :                 pciLoc = *(OAL_PCI_LOCATION*)&pDevLoc->LogicalLoc;

  005e8	e59d3050	 ldr         r3, [sp, #0x50]
  005ec	e2831008	 add         r1, r3, #8
  005f0	e28d0018	 add         r0, sp, #0x18
  005f4	e3a02004	 mov         r2, #4
  005f8	eb000000	 bl          memcpy

; 255  :                 id = OALPCIGetId(pDevLoc->BusNumber, pciLoc);

  005fc	e59d1018	 ldr         r1, [sp, #0x18]
  00600	e59d3050	 ldr         r3, [sp, #0x50]
  00604	e2833004	 add         r3, r3, #4
  00608	e5930000	 ldr         r0, [r3]
  0060c	eb000000	 bl          OALPCIGetId
  00610	e58d0040	 str         r0, [sp, #0x40]
  00614	e59d3040	 ldr         r3, [sp, #0x40]
  00618	e58d301c	 str         r3, [sp, #0x1C]

; 256  :                 if (id != pDevice->id) break;

  0061c	e59d3054	 ldr         r3, [sp, #0x54]
  00620	e2833008	 add         r3, r3, #8
  00624	e59d201c	 ldr         r2, [sp, #0x1C]
  00628	e5933000	 ldr         r3, [r3]
  0062c	e1520003	 cmp         r2, r3
  00630	0a000000	 beq         |$LN2@OALKitlDev|
  00634	ea000013	 b           |$LN6@OALKitlDev|
  00638		 |$LN2@OALKitlDev|

; 257  :                 OALLogPrintf(
; 258  :                     name, sizeof(name)/sizeof(WCHAR),
; 259  :                     L"%s @ id %d bus %d dev %d fnc %d",
; 260  :                     pDevice->name, pDevLoc->BusNumber, pciLoc.bus, pciLoc.dev,
; 261  :                     pciLoc.fnc
; 262  :                 );

  00638	e5dd3018	 ldrb        r3, [sp, #0x18]
  0063c	e58d300c	 str         r3, [sp, #0xC]
  00640	e5dd3019	 ldrb        r3, [sp, #0x19]
  00644	e58d3008	 str         r3, [sp, #8]
  00648	e5dd301a	 ldrb        r3, [sp, #0x1A]
  0064c	e58d3004	 str         r3, [sp, #4]
  00650	e59d3050	 ldr         r3, [sp, #0x50]
  00654	e2833004	 add         r3, r3, #4
  00658	e5933000	 ldr         r3, [r3]
  0065c	e58d3000	 str         r3, [sp]
  00660	e59d3054	 ldr         r3, [sp, #0x54]
  00664	e5933000	 ldr         r3, [r3]
  00668	e59f2094	 ldr         r2, [pc, #0x94]
  0066c	e3a01040	 mov         r1, #0x40
  00670	e59f0088	 ldr         r0, [pc, #0x88]
  00674	eb000000	 bl          OALLogPrintf

; 263  :                 pName = name;

  00678	e59f3080	 ldr         r3, [pc, #0x80]
  0067c	e58d3014	 str         r3, [sp, #0x14]

; 264  :                 rc = TRUE;

  00680	e3a03001	 mov         r3, #1
  00684	e58d3010	 str         r3, [sp, #0x10]
  00688		 |$LN6@OALKitlDev|

; 265  :             }                
; 266  :             break;
; 267  : #endif
; 268  :         }
; 269  : 
; 270  :         // If we don't identify device skip it
; 271  :         if (!rc) {

  00688	e59d3010	 ldr         r3, [sp, #0x10]
  0068c	e3530000	 cmp         r3, #0
  00690	1a000003	 bne         |$LN1@OALKitlDev|

; 272  :             pDevice++;

  00694	e59d3054	 ldr         r3, [sp, #0x54]
  00698	e2833018	 add         r3, r3, #0x18
  0069c	e58d3054	 str         r3, [sp, #0x54]

; 273  :             continue;

  006a0	eaffffa5	 b           |$LN17@OALKitlDev|
  006a4		 |$LN1@OALKitlDev|

; 274  :         }
; 275  :             
; 276  :         // We get all we need
; 277  :         break;

  006a4	ea000000	 b           |$LN9@OALKitlDev|

; 278  :     }

  006a8	eaffffa3	 b           |$LN10@OALKitlDev|
  006ac		 |$LN9@OALKitlDev|

; 279  : 
; 280  : 
; 281  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 282  :         "-OALKitlDeviceName(name = 0x%08x('%s')\r\n", pName, pName
; 283  :     ));

  006ac	e59f3048	 ldr         r3, [pc, #0x48]
  006b0	e5933440	 ldr         r3, [r3, #0x440]
  006b4	e3130a01	 tst         r3, #1, 20
  006b8	0a000006	 beq         |$LN15@OALKitlDev|
  006bc	e59d2014	 ldr         r2, [sp, #0x14]
  006c0	e59d1014	 ldr         r1, [sp, #0x14]
  006c4	e59f002c	 ldr         r0, [pc, #0x2C]
  006c8	eb000000	 bl          KITLOutputDebugString
  006cc	e3a03001	 mov         r3, #1
  006d0	e58d3044	 str         r3, [sp, #0x44]
  006d4	ea000001	 b           |$LN16@OALKitlDev|
  006d8		 |$LN15@OALKitlDev|
  006d8	e3a03000	 mov         r3, #0
  006dc	e58d3044	 str         r3, [sp, #0x44]
  006e0		 |$LN16@OALKitlDev|

; 284  :     return pName;

  006e0	e59d3014	 ldr         r3, [sp, #0x14]
  006e4	e58d3034	 str         r3, [sp, #0x34]

; 285  : }

  006e8	e59d0034	 ldr         r0, [sp, #0x34]
  006ec	e28dd048	 add         sp, sp, #0x48
  006f0	e89d6000	 ldmia       sp, {sp, lr}
  006f4	e12fff1e	 bx          lr
  006f8		 |$LN21@OALKitlDev|
  006f8		 |$LN22@OALKitlDev|
  006f8	00000000	 DCD         |??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@|
  006fc		 |$LN23@OALKitlDev|
  006fc	00000000	 DCD         |dpCurSettings|
  00700		 |$LN24@OALKitlDev|
  00700	00000000	 DCD         |?name@?1??OALKitlDeviceName@@9@9|
  00704		 |$LN25@OALKitlDev|
  00704	00000000	 DCD         |??_C@_1EA@MHLKLHLH@?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAi?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAe?$AAv?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAn?$AAc?$AA?5?$AA?$CF?$AAd?$AA?$AA@|
  00708		 |$LN26@OALKitlDev|
  00708	00000000	 DCD         |??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  0070c		 |$M43268|

			 ENDP  ; |OALKitlDeviceName|

	EXPORT	|??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	EXPORT	|OALKitlDeviceType|

  00018			 AREA	 |.pdata|, PDATA
|$T43288| DCD	|$LN20@OALKitlDev@2|
	DCD	0x40008004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"OALKitlDeviceType(type = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlDeviceType(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  0070c			 AREA	 |.text|, CODE, ARM

  0070c		 |OALKitlDeviceType| PROC

; 294  : ) {

  0070c		 |$LN20@OALKitlDev@2|
  0070c	e1a0c00d	 mov         r12, sp
  00710	e92d0003	 stmdb       sp!, {r0, r1}
  00714	e92d5000	 stmdb       sp!, {r12, lr}
  00718	e24dd02c	 sub         sp, sp, #0x2C
  0071c		 |$M43285|

; 295  :     BOOL rc = FALSE;

  0071c	e3a03000	 mov         r3, #0
  00720	e58d3004	 str         r3, [sp, #4]

; 296  :     OAL_KITL_TYPE type = OAL_KITL_TYPE_NONE;

  00724	e3a03000	 mov         r3, #0
  00728	e58d3008	 str         r3, [sp, #8]

; 297  :     
; 298  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 299  :         "+OALKitlDeviceType(%d/%d/%08x, 0x%08x)\r\n",
; 300  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 301  :     ));

  0072c	e59f31d0	 ldr         r3, [pc, #0x1D0]
  00730	e5933440	 ldr         r3, [r3, #0x440]
  00734	e3130a01	 tst         r3, #1, 20
  00738	0a00000e	 beq         |$LN13@OALKitlDev@2|
  0073c	e59d3038	 ldr         r3, [sp, #0x38]
  00740	e58d3000	 str         r3, [sp]
  00744	e59d3034	 ldr         r3, [sp, #0x34]
  00748	e2833008	 add         r3, r3, #8
  0074c	e5933000	 ldr         r3, [r3]
  00750	e59d2034	 ldr         r2, [sp, #0x34]
  00754	e2822004	 add         r2, r2, #4
  00758	e5922000	 ldr         r2, [r2]
  0075c	e59d1034	 ldr         r1, [sp, #0x34]
  00760	e5911000	 ldr         r1, [r1]
  00764	e59f019c	 ldr         r0, [pc, #0x19C]
  00768	eb000000	 bl          KITLOutputDebugString
  0076c	e3a03001	 mov         r3, #1
  00770	e58d3018	 str         r3, [sp, #0x18]
  00774	ea000001	 b           |$LN14@OALKitlDev@2|
  00778		 |$LN13@OALKitlDev@2|
  00778	e3a03000	 mov         r3, #0
  0077c	e58d3018	 str         r3, [sp, #0x18]
  00780		 |$LN14@OALKitlDev@2|
  00780		 |$LN17@OALKitlDev@2|
  00780		 |$LN10@OALKitlDev@2|

; 302  : 
; 303  :     // Look for driver in list
; 304  :     while (pDevice->name != NULL && !rc) {

  00780	e59d3038	 ldr         r3, [sp, #0x38]
  00784	e5933000	 ldr         r3, [r3]
  00788	e3530000	 cmp         r3, #0
  0078c	0a000049	 beq         |$LN9@OALKitlDev@2|
  00790	e59d3004	 ldr         r3, [sp, #4]
  00794	e3530000	 cmp         r3, #0
  00798	1a000046	 bne         |$LN9@OALKitlDev@2|

; 305  : 
; 306  :         // Is it our device? Then move
; 307  :         if (pDevLoc->IfcType != pDevice->ifcType) {

  0079c	e59d3038	 ldr         r3, [sp, #0x38]
  007a0	e2831004	 add         r1, r3, #4
  007a4	e59d3034	 ldr         r3, [sp, #0x34]
  007a8	e5932000	 ldr         r2, [r3]
  007ac	e5913000	 ldr         r3, [r1]
  007b0	e1520003	 cmp         r2, r3
  007b4	0a000003	 beq         |$LN8@OALKitlDev@2|

; 308  :             // Move to next driver
; 309  :             pDevice++;

  007b8	e59d3038	 ldr         r3, [sp, #0x38]
  007bc	e2833018	 add         r3, r3, #0x18
  007c0	e58d3038	 str         r3, [sp, #0x38]

; 310  :             continue;

  007c4	eaffffed	 b           |$LN10@OALKitlDev@2|
  007c8		 |$LN8@OALKitlDev@2|

; 311  :         }            
; 312  : 
; 313  :         // Identify device and read its address/interrupt depends on bus type
; 314  :         switch (pDevLoc->IfcType) {

  007c8	e59d3034	 ldr         r3, [sp, #0x34]
  007cc	e5933000	 ldr         r3, [r3]
  007d0	e58d301c	 str         r3, [sp, #0x1C]
  007d4	e59d301c	 ldr         r3, [sp, #0x1C]
  007d8	e3530000	 cmp         r3, #0
  007dc	0a000003	 beq         |$LN5@OALKitlDev@2|
  007e0	e59d301c	 ldr         r3, [sp, #0x1C]
  007e4	e3530005	 cmp         r3, #5
  007e8	0a000010	 beq         |$LN3@OALKitlDev@2|
  007ec	ea000028	 b           |$LN6@OALKitlDev@2|
  007f0		 |$LN5@OALKitlDev@2|

; 315  :         case Internal:
; 316  :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  007f0	e59d3034	 ldr         r3, [sp, #0x34]
  007f4	e2832008	 add         r2, r3, #8
  007f8	e59d3038	 ldr         r3, [sp, #0x38]
  007fc	e2833008	 add         r3, r3, #8
  00800	e5922000	 ldr         r2, [r2]
  00804	e5933000	 ldr         r3, [r3]
  00808	e1520003	 cmp         r2, r3
  0080c	0a000000	 beq         |$LN4@OALKitlDev@2|
  00810	ea00001f	 b           |$LN6@OALKitlDev@2|
  00814		 |$LN4@OALKitlDev@2|

; 317  :             type = pDevice->type;

  00814	e59d3038	 ldr         r3, [sp, #0x38]
  00818	e2833010	 add         r3, r3, #0x10
  0081c	e5933000	 ldr         r3, [r3]
  00820	e58d3008	 str         r3, [sp, #8]

; 318  :             rc = TRUE;

  00824	e3a03001	 mov         r3, #1
  00828	e58d3004	 str         r3, [sp, #4]

; 319  :             break;

  0082c	ea000018	 b           |$LN6@OALKitlDev@2|
  00830		 |$LN3@OALKitlDev@2|

; 320  : #ifdef KITL_PCI            
; 321  :         case PCIBus:
; 322  :             {
; 323  :                 UINT32 id;
; 324  :                 id = OALPCIGetId(
; 325  :                     pDevLoc->BusNumber, *(OAL_PCI_LOCATION*)&pDevLoc->LogicalLoc
; 326  :                 );

  00830	e59d3034	 ldr         r3, [sp, #0x34]
  00834	e2833008	 add         r3, r3, #8
  00838	e58d3020	 str         r3, [sp, #0x20]
  0083c	e59d3020	 ldr         r3, [sp, #0x20]
  00840	e5931000	 ldr         r1, [r3]
  00844	e59d3034	 ldr         r3, [sp, #0x34]
  00848	e2833004	 add         r3, r3, #4
  0084c	e5930000	 ldr         r0, [r3]
  00850	eb000000	 bl          OALPCIGetId
  00854	e58d0024	 str         r0, [sp, #0x24]
  00858	e59d3024	 ldr         r3, [sp, #0x24]
  0085c	e58d300c	 str         r3, [sp, #0xC]

; 327  :                 if (id != pDevice->id) break;

  00860	e59d3038	 ldr         r3, [sp, #0x38]
  00864	e2833008	 add         r3, r3, #8
  00868	e59d200c	 ldr         r2, [sp, #0xC]
  0086c	e5933000	 ldr         r3, [r3]
  00870	e1520003	 cmp         r2, r3
  00874	0a000000	 beq         |$LN2@OALKitlDev@2|
  00878	ea000005	 b           |$LN6@OALKitlDev@2|
  0087c		 |$LN2@OALKitlDev@2|

; 328  :                 type = pDevice->type;

  0087c	e59d3038	 ldr         r3, [sp, #0x38]
  00880	e2833010	 add         r3, r3, #0x10
  00884	e5933000	 ldr         r3, [r3]
  00888	e58d3008	 str         r3, [sp, #8]

; 329  :                 rc = TRUE;

  0088c	e3a03001	 mov         r3, #1
  00890	e58d3004	 str         r3, [sp, #4]
  00894		 |$LN6@OALKitlDev@2|

; 330  :             }                
; 331  :             break;
; 332  : #endif
; 333  :         }
; 334  : 
; 335  :         // If we don't identify device skip it
; 336  :         if (!rc) {

  00894	e59d3004	 ldr         r3, [sp, #4]
  00898	e3530000	 cmp         r3, #0
  0089c	1a000003	 bne         |$LN1@OALKitlDev@2|

; 337  :             pDevice++;

  008a0	e59d3038	 ldr         r3, [sp, #0x38]
  008a4	e2833018	 add         r3, r3, #0x18
  008a8	e58d3038	 str         r3, [sp, #0x38]

; 338  :             continue;

  008ac	eaffffb3	 b           |$LN17@OALKitlDev@2|
  008b0		 |$LN1@OALKitlDev@2|

; 339  :         }
; 340  :             
; 341  :         // We get all we need
; 342  :         break;

  008b0	ea000000	 b           |$LN9@OALKitlDev@2|

; 343  :     }

  008b4	eaffffb1	 b           |$LN10@OALKitlDev@2|
  008b8		 |$LN9@OALKitlDev@2|

; 344  : 
; 345  : 
; 346  :     KITL_RETAILMSG(ZONE_KITL_OAL, ("-OALKitlDeviceType(type = %d)\r\n", type));

  008b8	e59f3044	 ldr         r3, [pc, #0x44]
  008bc	e5933440	 ldr         r3, [r3, #0x440]
  008c0	e3130a01	 tst         r3, #1, 20
  008c4	0a000005	 beq         |$LN15@OALKitlDev@2|
  008c8	e59d1008	 ldr         r1, [sp, #8]
  008cc	e59f002c	 ldr         r0, [pc, #0x2C]
  008d0	eb000000	 bl          KITLOutputDebugString
  008d4	e3a03001	 mov         r3, #1
  008d8	e58d3028	 str         r3, [sp, #0x28]
  008dc	ea000001	 b           |$LN16@OALKitlDev@2|
  008e0		 |$LN15@OALKitlDev@2|
  008e0	e3a03000	 mov         r3, #0
  008e4	e58d3028	 str         r3, [sp, #0x28]
  008e8		 |$LN16@OALKitlDev@2|

; 347  :     return type;

  008e8	e59d3008	 ldr         r3, [sp, #8]
  008ec	e58d3014	 str         r3, [sp, #0x14]

; 348  : }

  008f0	e59d0014	 ldr         r0, [sp, #0x14]
  008f4	e28dd02c	 add         sp, sp, #0x2C
  008f8	e89d6000	 ldmia       sp, {sp, lr}
  008fc	e12fff1e	 bx          lr
  00900		 |$LN21@OALKitlDev@2|
  00900		 |$LN22@OALKitlDev@2|
  00900	00000000	 DCD         |??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  00904		 |$LN23@OALKitlDev@2|
  00904	00000000	 DCD         |dpCurSettings|
  00908		 |$LN24@OALKitlDev@2|
  00908	00000000	 DCD         |??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  0090c		 |$M43286|

			 ENDP  ; |OALKitlDeviceType|

	END
