; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\KITL\kitleth.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|?ipId@?1??EncodeIP@@9@9| % 0x2				; `EncodeIP'::`2'::ipId

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|DecodeIP|

  00002			 AREA	 |.bss|, NOINIT
|g_kitlEthState| % 0x6f4

  00000			 AREA	 |.pdata|, PDATA
|$T43920| DCD	|$LN12@DecodeIP|
	DCD	0x40006304
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\common\kitl\kitleth.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DecodeIP| PROC

; 614  : {

  00000		 |$LN12@DecodeIP|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M43917|

; 615  :     UINT8 *pData = NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 616  :     ETH_HEADER *pEth = (ETH_HEADER*)pFrame;

  00018	e59d3024	 ldr         r3, [sp, #0x24]
  0001c	e58d3008	 str         r3, [sp, #8]

; 617  :     IP4_HEADER *pIP = (IP4_HEADER*)((UINT8*)pEth + sizeof(ETH_HEADER));

  00020	e59d3008	 ldr         r3, [sp, #8]
  00024	e283300e	 add         r3, r3, #0xE
  00028	e58d3004	 str         r3, [sp, #4]

; 618  : 
; 619  :     // Be pesimistic
; 620  :     *pUsed = FALSE;

  0002c	e59d202c	 ldr         r2, [sp, #0x2C]
  00030	e3a03000	 mov         r3, #0
  00034	e5823000	 str         r3, [r2]

; 621  : 
; 622  :     // We support only IP4 with standard IP4 header (no options...)
; 623  :     if (pIP->verlen != 0x45) goto cleanUp;

  00038	e59d3004	 ldr         r3, [sp, #4]
  0003c	e5d33000	 ldrb        r3, [r3]
  00040	e3530045	 cmp         r3, #0x45
  00044	0a000000	 beq         |$LN7@DecodeIP|
  00048	ea000048	 b           |$cleanUp$43618|
  0004c		 |$LN7@DecodeIP|

; 624  : 
; 625  :     // First check if packet is for us
; 626  :     if (
; 627  :         pIP->destip != g_kitlEthState.deviceIP &&
; 628  :         pIP->destip != 0xFFFFFFFF &&
; 629  :         g_kitlEthState.deviceIP != 0
; 630  :     ) goto cleanUp;

  0004c	e59d3004	 ldr         r3, [sp, #4]
  00050	e2831010	 add         r1, r3, #0x10
  00054	e5d13003	 ldrb        r3, [r1, #3]
  00058	e1a02403	 mov         r2, r3, lsl #8
  0005c	e5d13002	 ldrb        r3, [r1, #2]
  00060	e1833002	 orr         r3, r3, r2
  00064	e1a02403	 mov         r2, r3, lsl #8
  00068	e5d13001	 ldrb        r3, [r1, #1]
  0006c	e1833002	 orr         r3, r3, r2
  00070	e1a02403	 mov         r2, r3, lsl #8
  00074	e5d13000	 ldrb        r3, [r1]
  00078	e1832002	 orr         r2, r3, r2
  0007c	e59f3104	 ldr         r3, [pc, #0x104]
  00080	e5933010	 ldr         r3, [r3, #0x10]
  00084	e1520003	 cmp         r2, r3
  00088	0a000012	 beq         |$LN6@DecodeIP|
  0008c	e59d3004	 ldr         r3, [sp, #4]
  00090	e2831010	 add         r1, r3, #0x10
  00094	e5d13003	 ldrb        r3, [r1, #3]
  00098	e1a02403	 mov         r2, r3, lsl #8
  0009c	e5d13002	 ldrb        r3, [r1, #2]
  000a0	e1833002	 orr         r3, r3, r2
  000a4	e1a02403	 mov         r2, r3, lsl #8
  000a8	e5d13001	 ldrb        r3, [r1, #1]
  000ac	e1833002	 orr         r3, r3, r2
  000b0	e1a02403	 mov         r2, r3, lsl #8
  000b4	e5d13000	 ldrb        r3, [r1]
  000b8	e1833002	 orr         r3, r3, r2
  000bc	e3730001	 cmn         r3, #1
  000c0	0a000004	 beq         |$LN6@DecodeIP|
  000c4	e59f30bc	 ldr         r3, [pc, #0xBC]
  000c8	e5933010	 ldr         r3, [r3, #0x10]
  000cc	e3530000	 cmp         r3, #0
  000d0	0a000000	 beq         |$LN6@DecodeIP|
  000d4	ea000025	 b           |$cleanUp$43618|
  000d8		 |$LN6@DecodeIP|

; 631  : 
; 632  :     // Verify IP4 header checksum
; 633  :     if (Sum(0, pIP, sizeof(IP4_HEADER)) != 0xFFFF) goto cleanUp;

  000d8	e3a02014	 mov         r2, #0x14
  000dc	e59d1004	 ldr         r1, [sp, #4]
  000e0	e3a00000	 mov         r0, #0
  000e4	eb000000	 bl          Sum
  000e8	e1a03800	 mov         r3, r0, lsl #16
  000ec	e1a03823	 mov         r3, r3, lsr #16
  000f0	e1cd31b0	 strh        r3, [sp, #0x10]
  000f4	e1dd31b0	 ldrh        r3, [sp, #0x10]
  000f8	e1a02003	 mov         r2, r3
  000fc	e3a03cff	 mov         r3, #0xFF, 24
  00100	e38330ff	 orr         r3, r3, #0xFF
  00104	e1520003	 cmp         r2, r3
  00108	0a000000	 beq         |$LN5@DecodeIP|
  0010c	ea000017	 b           |$cleanUp$43618|
  00110		 |$LN5@DecodeIP|

; 634  : 
; 635  :     // Then decode protocol
; 636  :     switch (pIP->protocol) {

  00110	e59d3004	 ldr         r3, [sp, #4]
  00114	e2833009	 add         r3, r3, #9
  00118	e5d33000	 ldrb        r3, [r3]
  0011c	e58d3014	 str         r3, [sp, #0x14]
  00120	e59d3014	 ldr         r3, [sp, #0x14]
  00124	e3530001	 cmp         r3, #1
  00128	0a00000b	 beq         |$LN1@DecodeIP|
  0012c	e59d3014	 ldr         r3, [sp, #0x14]
  00130	e3530011	 cmp         r3, #0x11
  00134	0a000000	 beq         |$LN2@DecodeIP|
  00138	ea00000c	 b           |$LN3@DecodeIP|
  0013c		 |$LN2@DecodeIP|

; 637  :     case UDP_PROTOCOL:
; 638  :         pData = DecodeUDP(pFrame, pLength, pUsed);

  0013c	e59d202c	 ldr         r2, [sp, #0x2C]
  00140	e59d1028	 ldr         r1, [sp, #0x28]
  00144	e59d0024	 ldr         r0, [sp, #0x24]
  00148	eb000000	 bl          DecodeUDP
  0014c	e58d0018	 str         r0, [sp, #0x18]
  00150	e59d3018	 ldr         r3, [sp, #0x18]
  00154	e58d3000	 str         r3, [sp]

; 639  :         break;

  00158	ea000004	 b           |$LN3@DecodeIP|
  0015c		 |$LN1@DecodeIP|

; 640  :     case ICMP_PROTOCOL:
; 641  :         DecodeICMP(pFrame, *pLength, pUsed);

  0015c	e59d202c	 ldr         r2, [sp, #0x2C]
  00160	e59d3028	 ldr         r3, [sp, #0x28]
  00164	e1d310b0	 ldrh        r1, [r3]
  00168	e59d0024	 ldr         r0, [sp, #0x24]
  0016c	eb000000	 bl          DecodeICMP
  00170		 |$LN3@DecodeIP|
  00170		 |$cleanUp$43618|

; 642  :         break;
; 643  :     }
; 644  : 
; 645  : cleanUp:
; 646  :     return pData;

  00170	e59d3000	 ldr         r3, [sp]
  00174	e58d300c	 str         r3, [sp, #0xC]

; 647  : }

  00178	e59d000c	 ldr         r0, [sp, #0xC]
  0017c	e28dd01c	 add         sp, sp, #0x1C
  00180	e89d6000	 ldmia       sp, {sp, lr}
  00184	e12fff1e	 bx          lr
  00188		 |$LN13@DecodeIP|
  00188		 |$LN14@DecodeIP|
  00188	00000000	 DCD         |g_kitlEthState|
  0018c		 |$M43918|

			 ENDP  ; |DecodeIP|


  00008			 AREA	 |.pdata|, PDATA
|$T43928| DCD	|$LN10@Sum|
	DCD	0x40003504
; Function compile flags: /Odtp

  0018c			 AREA	 |.text|, CODE, ARM

  0018c		 |Sum|	 PROC

; 65   : {

  0018c		 |$LN10@Sum|
  0018c	e1a0c00d	 mov         r12, sp
  00190	e92d0007	 stmdb       sp!, {r0 - r2}
  00194	e92d5000	 stmdb       sp!, {r12, lr}
  00198	e24dd00c	 sub         sp, sp, #0xC
  0019c		 |$M43925|

; 66   :     UINT32 sum;
; 67   :     UINT16 *p;
; 68   : 
; 69   :     // There is no need to swap for network ordering during calculation
; 70   :     // because of the end around carry used in 1's complement addition
; 71   :     sum = seed;

  0019c	e1dd31b4	 ldrh        r3, [sp, #0x14]
  001a0	e58d3004	 str         r3, [sp, #4]

; 72   :     p = (UINT16*)pData;

  001a4	e59d3018	 ldr         r3, [sp, #0x18]
  001a8	e58d3000	 str         r3, [sp]
  001ac		 |$LN5@Sum|

; 73   :     while (size >= sizeof(UINT16)) {

  001ac	e59d301c	 ldr         r3, [sp, #0x1C]
  001b0	e3530002	 cmp         r3, #2
  001b4	3a00000b	 bcc         |$LN4@Sum|

; 74   :         sum += *p++;

  001b8	e59d3000	 ldr         r3, [sp]
  001bc	e1d320b0	 ldrh        r2, [r3]
  001c0	e59d3004	 ldr         r3, [sp, #4]
  001c4	e0833002	 add         r3, r3, r2
  001c8	e58d3004	 str         r3, [sp, #4]
  001cc	e59d3000	 ldr         r3, [sp]
  001d0	e2833002	 add         r3, r3, #2
  001d4	e58d3000	 str         r3, [sp]

; 75   :         size -= sizeof(UINT16);

  001d8	e59d301c	 ldr         r3, [sp, #0x1C]
  001dc	e2433002	 sub         r3, r3, #2
  001e0	e58d301c	 str         r3, [sp, #0x1C]

; 76   :     }

  001e4	eafffff0	 b           |$LN5@Sum|
  001e8		 |$LN4@Sum|

; 77   :     if (size > 0) sum += *((UINT8*)p);

  001e8	e59d301c	 ldr         r3, [sp, #0x1C]
  001ec	e3530000	 cmp         r3, #0
  001f0	9a000004	 bls         |$LN3@Sum|
  001f4	e59d3000	 ldr         r3, [sp]
  001f8	e5d32000	 ldrb        r2, [r3]
  001fc	e59d3004	 ldr         r3, [sp, #4]
  00200	e0833002	 add         r3, r3, r2
  00204	e58d3004	 str         r3, [sp, #4]
  00208		 |$LN3@Sum|
  00208		 |$LN2@Sum|

; 78   : 
; 79   :     while ((sum & 0xFFFF0000) != 0) {

  00208	e59d2004	 ldr         r2, [sp, #4]
  0020c	e3e03cff	 mvn         r3, #0xFF, 24
  00210	e22330ff	 eor         r3, r3, #0xFF
  00214	e1120003	 tst         r2, r3
  00218	0a000008	 beq         |$LN1@Sum|

; 80   :         sum = (sum & 0x0000FFFF) + (sum >> 16);

  0021c	e59d2004	 ldr         r2, [sp, #4]
  00220	e3a03cff	 mov         r3, #0xFF, 24
  00224	e38330ff	 orr         r3, r3, #0xFF
  00228	e0022003	 and         r2, r2, r3
  0022c	e59d3004	 ldr         r3, [sp, #4]
  00230	e1a03823	 mov         r3, r3, lsr #16
  00234	e0823003	 add         r3, r2, r3
  00238	e58d3004	 str         r3, [sp, #4]

; 81   :     }

  0023c	eafffff1	 b           |$LN2@Sum|
  00240		 |$LN1@Sum|

; 82   :     return (UINT16)sum;

  00240	e59d3004	 ldr         r3, [sp, #4]
  00244	e1a03803	 mov         r3, r3, lsl #16
  00248	e1a03823	 mov         r3, r3, lsr #16
  0024c	e1cd30b8	 strh        r3, [sp, #8]

; 83   : }

  00250	e1dd00b8	 ldrh        r0, [sp, #8]
  00254	e28dd00c	 add         sp, sp, #0xC
  00258	e89d6000	 ldmia       sp, {sp, lr}
  0025c	e12fff1e	 bx          lr
  00260		 |$M43926|

			 ENDP  ; |Sum|


  00010			 AREA	 |.pdata|, PDATA
|$T43935| DCD	|$LN7@DecodeICMP|
	DCD	0x40008104
; Function compile flags: /Odtp

  00260			 AREA	 |.text|, CODE, ARM

  00260		 |DecodeICMP| PROC

; 509  : {

  00260		 |$LN7@DecodeICMP|
  00260	e1a0c00d	 mov         r12, sp
  00264	e92d0007	 stmdb       sp!, {r0 - r2}
  00268	e92d5000	 stmdb       sp!, {r12, lr}
  0026c	e24dd024	 sub         sp, sp, #0x24
  00270		 |$M43932|

; 510  :     ETH_HEADER *pEth = (ETH_HEADER*)pFrame;

  00270	e59d302c	 ldr         r3, [sp, #0x2C]
  00274	e58d300c	 str         r3, [sp, #0xC]

; 511  :     IP4_HEADER *pIP = (IP4_HEADER*)((UINT8*)pEth + sizeof(ETH_HEADER));

  00278	e59d300c	 ldr         r3, [sp, #0xC]
  0027c	e283300e	 add         r3, r3, #0xE
  00280	e58d3008	 str         r3, [sp, #8]

; 512  :     ICMP_HEADER *pICMP = (ICMP_HEADER*)((UINT8*)pIP + sizeof(IP4_HEADER));

  00284	e59d3008	 ldr         r3, [sp, #8]
  00288	e2833014	 add         r3, r3, #0x14
  0028c	e58d3014	 str         r3, [sp, #0x14]

; 513  :     UINT16 icmpLength;
; 514  : 
; 515  :     // Be pesimistic
; 516  :     *pUsed = FALSE;

  00290	e59d2034	 ldr         r2, [sp, #0x34]
  00294	e3a03000	 mov         r3, #0
  00298	e5823000	 str         r3, [r2]

; 517  : 
; 518  :     // Get ICMP message size & verify checksum
; 519  :     icmpLength = ntohs(pIP->length) - sizeof(IP4_HEADER);

  0029c	e59d3008	 ldr         r3, [sp, #8]
  002a0	e2831002	 add         r1, r3, #2
  002a4	e5d13001	 ldrb        r3, [r1, #1]
  002a8	e1a03403	 mov         r3, r3, lsl #8
  002ac	e1a02803	 mov         r2, r3, lsl #16
  002b0	e1a02822	 mov         r2, r2, lsr #16
  002b4	e5d13000	 ldrb        r3, [r1]
  002b8	e1833002	 orr         r3, r3, r2
  002bc	e1a00403	 mov         r0, r3, lsl #8
  002c0	e59d3008	 ldr         r3, [sp, #8]
  002c4	e2831002	 add         r1, r3, #2
  002c8	e5d13001	 ldrb        r3, [r1, #1]
  002cc	e1a03403	 mov         r3, r3, lsl #8
  002d0	e1a02803	 mov         r2, r3, lsl #16
  002d4	e1a02822	 mov         r2, r2, lsr #16
  002d8	e5d13000	 ldrb        r3, [r1]
  002dc	e1833002	 orr         r3, r3, r2
  002e0	e1a03443	 mov         r3, r3, asr #8
  002e4	e1803003	 orr         r3, r0, r3
  002e8	e1a03803	 mov         r3, r3, lsl #16
  002ec	e1a03823	 mov         r3, r3, lsr #16
  002f0	e2433014	 sub         r3, r3, #0x14
  002f4	e1a03803	 mov         r3, r3, lsl #16
  002f8	e1a03823	 mov         r3, r3, lsr #16
  002fc	e1cd31b0	 strh        r3, [sp, #0x10]

; 520  :     if (Sum(0, pICMP, icmpLength) != 0xFFFF) goto cleanUp;

  00300	e1dd21b0	 ldrh        r2, [sp, #0x10]
  00304	e59d1014	 ldr         r1, [sp, #0x14]
  00308	e3a00000	 mov         r0, #0
  0030c	eb000000	 bl          Sum
  00310	e1cd02b0	 strh        r0, [sp, #0x20]
  00314	e1dd32b0	 ldrh        r3, [sp, #0x20]
  00318	e1a02003	 mov         r2, r3
  0031c	e3a03cff	 mov         r3, #0xFF, 24
  00320	e38330ff	 orr         r3, r3, #0xFF
  00324	e1520003	 cmp         r2, r3
  00328	0a000000	 beq         |$LN2@DecodeICMP|
  0032c	ea000048	 b           |$cleanUp$43534|
  00330		 |$LN2@DecodeICMP|

; 521  : 
; 522  :     // Reply to ping only
; 523  :     if (pICMP->op != ICMP_ECHOREQ) goto cleanUp;

  00330	e59d3014	 ldr         r3, [sp, #0x14]
  00334	e5d33000	 ldrb        r3, [r3]
  00338	e3530008	 cmp         r3, #8
  0033c	0a000000	 beq         |$LN1@DecodeICMP|
  00340	ea000043	 b           |$cleanUp$43534|
  00344		 |$LN1@DecodeICMP|

; 524  : 
; 525  :     // We now know that packet is used
; 526  :     *pUsed = TRUE;

  00344	e59d2034	 ldr         r2, [sp, #0x34]
  00348	e3a03001	 mov         r3, #1
  0034c	e5823000	 str         r3, [r2]

; 527  : 
; 528  :     // Encode reply & do checksum
; 529  :     pICMP->op = 0;

  00350	e59d2014	 ldr         r2, [sp, #0x14]
  00354	e3a03000	 mov         r3, #0
  00358	e5c23000	 strb        r3, [r2]

; 530  :     pICMP->code = 0;

  0035c	e59d3014	 ldr         r3, [sp, #0x14]
  00360	e2832001	 add         r2, r3, #1
  00364	e3a03000	 mov         r3, #0
  00368	e5c23000	 strb        r3, [r2]

; 531  :     pICMP->sum = 0;

  0036c	e59d3014	 ldr         r3, [sp, #0x14]
  00370	e2832002	 add         r2, r3, #2
  00374	e3a03000	 mov         r3, #0
  00378	e5c23000	 strb        r3, [r2]
  0037c	e1a03423	 mov         r3, r3, lsr #8
  00380	e5c23001	 strb        r3, [r2, #1]

; 532  :     pICMP->sum = ~ Sum(0, pICMP, icmpLength);

  00384	e1dd21b0	 ldrh        r2, [sp, #0x10]
  00388	e59d1014	 ldr         r1, [sp, #0x14]
  0038c	e3a00000	 mov         r0, #0
  00390	eb000000	 bl          Sum
  00394	e1cd02b2	 strh        r0, [sp, #0x22]
  00398	e1dd32b2	 ldrh        r3, [sp, #0x22]
  0039c	e1e01003	 mvn         r1, r3
  003a0	e59d3014	 ldr         r3, [sp, #0x14]
  003a4	e2832002	 add         r2, r3, #2
  003a8	e1a03801	 mov         r3, r1, lsl #16
  003ac	e1a03823	 mov         r3, r3, lsr #16
  003b0	e5c23000	 strb        r3, [r2]
  003b4	e1a03423	 mov         r3, r3, lsr #8
  003b8	e5c23001	 strb        r3, [r2, #1]

; 533  : 
; 534  :     // Add IP header
; 535  :     EncodeIP(
; 536  :         pFrame, icmpLength, pEth->srcmac, pIP->destip, pIP->srcip, ICMP_PROTOCOL
; 537  :     );

  003bc	e3a03001	 mov         r3, #1
  003c0	e58d3004	 str         r3, [sp, #4]
  003c4	e59d3008	 ldr         r3, [sp, #8]
  003c8	e283100c	 add         r1, r3, #0xC
  003cc	e5d13003	 ldrb        r3, [r1, #3]
  003d0	e1a02403	 mov         r2, r3, lsl #8
  003d4	e5d13002	 ldrb        r3, [r1, #2]
  003d8	e1833002	 orr         r3, r3, r2
  003dc	e1a02403	 mov         r2, r3, lsl #8
  003e0	e5d13001	 ldrb        r3, [r1, #1]
  003e4	e1833002	 orr         r3, r3, r2
  003e8	e1a02403	 mov         r2, r3, lsl #8
  003ec	e5d13000	 ldrb        r3, [r1]
  003f0	e1833002	 orr         r3, r3, r2
  003f4	e58d3000	 str         r3, [sp]
  003f8	e59d3008	 ldr         r3, [sp, #8]
  003fc	e2831010	 add         r1, r3, #0x10
  00400	e5d13003	 ldrb        r3, [r1, #3]
  00404	e1a02403	 mov         r2, r3, lsl #8
  00408	e5d13002	 ldrb        r3, [r1, #2]
  0040c	e1833002	 orr         r3, r3, r2
  00410	e1a02403	 mov         r2, r3, lsl #8
  00414	e5d13001	 ldrb        r3, [r1, #1]
  00418	e1833002	 orr         r3, r3, r2
  0041c	e1a02403	 mov         r2, r3, lsl #8
  00420	e5d13000	 ldrb        r3, [r1]
  00424	e1833002	 orr         r3, r3, r2
  00428	e59d200c	 ldr         r2, [sp, #0xC]
  0042c	e2822006	 add         r2, r2, #6
  00430	e1dd11b0	 ldrh        r1, [sp, #0x10]
  00434	e59d002c	 ldr         r0, [sp, #0x2C]
  00438	eb000000	 bl          EncodeIP

; 538  : 
; 539  :     // Send packet
; 540  :     g_kitlEthState.pfnSend(pFrame, length);

  0043c	e1dd13b0	 ldrh        r1, [sp, #0x30]
  00440	e59d002c	 ldr         r0, [sp, #0x2C]
  00444	e59f3014	 ldr         r3, [pc, #0x14]
  00448	e5933030	 ldr         r3, [r3, #0x30]
  0044c	e1a0e00f	 mov         lr, pc
  00450	e12fff13	 bx          r3
  00454		 |$cleanUp$43534|

; 541  : 
; 542  : cleanUp:
; 543  :     return;
; 544  : }

  00454	e28dd024	 add         sp, sp, #0x24
  00458	e89d6000	 ldmia       sp, {sp, lr}
  0045c	e12fff1e	 bx          lr
  00460		 |$LN8@DecodeICMP|
  00460		 |$LN9@DecodeICMP|
  00460	00000000	 DCD         |g_kitlEthState|
  00464		 |$M43933|

			 ENDP  ; |DecodeICMP|

	IMPORT	|memset|
	IMPORT	|memcpy|

  00018			 AREA	 |.pdata|, PDATA
|$T43943| DCD	|$LN7@EncodeIP|
	DCD	0x40008f04
; Function compile flags: /Odtp

  00464			 AREA	 |.text|, CODE, ARM

  00464		 |EncodeIP| PROC

; 152  : ) {

  00464		 |$LN7@EncodeIP|
  00464	e1a0c00d	 mov         r12, sp
  00468	e92d000f	 stmdb       sp!, {r0 - r3}
  0046c	e92d5000	 stmdb       sp!, {r12, lr}
  00470	e24dd018	 sub         sp, sp, #0x18
  00474		 |$M43940|

; 153  :     static UINT16 ipId = 0;
; 154  :     ETH_HEADER *pEth = (ETH_HEADER*)pFrame;

  00474	e59d3020	 ldr         r3, [sp, #0x20]
  00478	e58d300c	 str         r3, [sp, #0xC]

; 155  :     IP4_HEADER *pIP = (IP4_HEADER*)((UINT8*)pEth + sizeof(ETH_HEADER));

  0047c	e59d300c	 ldr         r3, [sp, #0xC]
  00480	e283300e	 add         r3, r3, #0xE
  00484	e58d3004	 str         r3, [sp, #4]

; 156  :     UINT16 ipLength, ethLength;
; 157  : 
; 158  :     // Get final length
; 159  :     ipLength = sizeof(IP4_HEADER) + length;

  00488	e1dd32b4	 ldrh        r3, [sp, #0x24]
  0048c	e2833014	 add         r3, r3, #0x14
  00490	e1a03803	 mov         r3, r3, lsl #16
  00494	e1a03823	 mov         r3, r3, lsr #16
  00498	e1cd30b8	 strh        r3, [sp, #8]

; 160  :     ethLength = sizeof(ETH_HEADER) + ipLength;

  0049c	e1dd30b8	 ldrh        r3, [sp, #8]
  004a0	e283300e	 add         r3, r3, #0xE
  004a4	e1a03803	 mov         r3, r3, lsl #16
  004a8	e1a03823	 mov         r3, r3, lsr #16
  004ac	e1cd30b0	 strh        r3, [sp]

; 161  : 
; 162  :     // Fill in Ethernet header
; 163  :     if (pDestMAC != NULL) {

  004b0	e59d3028	 ldr         r3, [sp, #0x28]
  004b4	e3530000	 cmp         r3, #0
  004b8	0a000004	 beq         |$LN2@EncodeIP|

; 164  :         memcpy(pEth->destmac, pDestMAC, sizeof(pEth->destmac));

  004bc	e3a02006	 mov         r2, #6
  004c0	e59d1028	 ldr         r1, [sp, #0x28]
  004c4	e59d000c	 ldr         r0, [sp, #0xC]
  004c8	eb000000	 bl          memcpy

; 165  :     } else {

  004cc	ea000003	 b           |$LN1@EncodeIP|
  004d0		 |$LN2@EncodeIP|

; 166  :         memset(pEth->destmac, 0xFF, sizeof(pEth->destmac));

  004d0	e3a02006	 mov         r2, #6
  004d4	e3a010ff	 mov         r1, #0xFF
  004d8	e59d000c	 ldr         r0, [sp, #0xC]
  004dc	eb000000	 bl          memset
  004e0		 |$LN1@EncodeIP|

; 167  :     }
; 168  :     memcpy(pEth->srcmac, g_kitlEthState.deviceMAC, sizeof(pEth->srcmac));

  004e0	e3a02006	 mov         r2, #6
  004e4	e59f31b0	 ldr         r3, [pc, #0x1B0]
  004e8	e2831008	 add         r1, r3, #8
  004ec	e59d300c	 ldr         r3, [sp, #0xC]
  004f0	e2830006	 add         r0, r3, #6
  004f4	eb000000	 bl          memcpy

; 169  :     pEth->ftype = htons(IP_FRAME);

  004f8	e59d300c	 ldr         r3, [sp, #0xC]
  004fc	e283200c	 add         r2, r3, #0xC
  00500	e3a03008	 mov         r3, #8
  00504	e5c23000	 strb        r3, [r2]
  00508	e1a03423	 mov         r3, r3, lsr #8
  0050c	e5c23001	 strb        r3, [r2, #1]

; 170  : 
; 171  :     // Fill in IP4 header
; 172  :     pIP->verlen = 0x45;

  00510	e59d2004	 ldr         r2, [sp, #4]
  00514	e3a03045	 mov         r3, #0x45
  00518	e5c23000	 strb        r3, [r2]

; 173  :     pIP->tos = 0;

  0051c	e59d3004	 ldr         r3, [sp, #4]
  00520	e2832001	 add         r2, r3, #1
  00524	e3a03000	 mov         r3, #0
  00528	e5c23000	 strb        r3, [r2]

; 174  :     pIP->length = htons(ipLength);

  0052c	e1dd30b8	 ldrh        r3, [sp, #8]
  00530	e1a02403	 mov         r2, r3, lsl #8
  00534	e1dd30b8	 ldrh        r3, [sp, #8]
  00538	e1a03443	 mov         r3, r3, asr #8
  0053c	e1823003	 orr         r3, r2, r3
  00540	e1a01803	 mov         r1, r3, lsl #16
  00544	e1a01821	 mov         r1, r1, lsr #16
  00548	e59d3004	 ldr         r3, [sp, #4]
  0054c	e2832002	 add         r2, r3, #2
  00550	e1a03001	 mov         r3, r1
  00554	e5c23000	 strb        r3, [r2]
  00558	e1a03423	 mov         r3, r3, lsr #8
  0055c	e5c23001	 strb        r3, [r2, #1]

; 175  :     pIP->id = ipId++;

  00560	e59d3004	 ldr         r3, [sp, #4]
  00564	e2832004	 add         r2, r3, #4
  00568	e59f3128	 ldr         r3, [pc, #0x128]
  0056c	e1d330b0	 ldrh        r3, [r3]
  00570	e5c23000	 strb        r3, [r2]
  00574	e1a03423	 mov         r3, r3, lsr #8
  00578	e5c23001	 strb        r3, [r2, #1]
  0057c	e59f3114	 ldr         r3, [pc, #0x114]
  00580	e1d330b0	 ldrh        r3, [r3]
  00584	e2833001	 add         r3, r3, #1
  00588	e1a02803	 mov         r2, r3, lsl #16
  0058c	e1a02822	 mov         r2, r2, lsr #16
  00590	e59f3100	 ldr         r3, [pc, #0x100]
  00594	e1c320b0	 strh        r2, [r3]

; 176  :     pIP->fragment = 0;

  00598	e59d3004	 ldr         r3, [sp, #4]
  0059c	e2832006	 add         r2, r3, #6
  005a0	e3a03000	 mov         r3, #0
  005a4	e5c23000	 strb        r3, [r2]
  005a8	e1a03423	 mov         r3, r3, lsr #8
  005ac	e5c23001	 strb        r3, [r2, #1]

; 177  :     pIP->ttl = 64;

  005b0	e59d3004	 ldr         r3, [sp, #4]
  005b4	e2832008	 add         r2, r3, #8
  005b8	e3a03040	 mov         r3, #0x40
  005bc	e5c23000	 strb        r3, [r2]

; 178  :     pIP->protocol = protocol;

  005c0	e59d3004	 ldr         r3, [sp, #4]
  005c4	e2832009	 add         r2, r3, #9
  005c8	e5dd3034	 ldrb        r3, [sp, #0x34]
  005cc	e5c23000	 strb        r3, [r2]

; 179  :     pIP->sum = 0;

  005d0	e59d3004	 ldr         r3, [sp, #4]
  005d4	e283200a	 add         r2, r3, #0xA
  005d8	e3a03000	 mov         r3, #0
  005dc	e5c23000	 strb        r3, [r2]
  005e0	e1a03423	 mov         r3, r3, lsr #8
  005e4	e5c23001	 strb        r3, [r2, #1]

; 180  :     pIP->srcip = srcIP;

  005e8	e59d3004	 ldr         r3, [sp, #4]
  005ec	e283100c	 add         r1, r3, #0xC
  005f0	e59d302c	 ldr         r3, [sp, #0x2C]
  005f4	e5c13000	 strb        r3, [r1]
  005f8	e1a02423	 mov         r2, r3, lsr #8
  005fc	e1a03002	 mov         r3, r2
  00600	e5c13001	 strb        r3, [r1, #1]
  00604	e1a02422	 mov         r2, r2, lsr #8
  00608	e1a03002	 mov         r3, r2
  0060c	e5c13002	 strb        r3, [r1, #2]
  00610	e1a03422	 mov         r3, r2, lsr #8
  00614	e5c13003	 strb        r3, [r1, #3]

; 181  :     pIP->destip = destIP;

  00618	e59d3004	 ldr         r3, [sp, #4]
  0061c	e2831010	 add         r1, r3, #0x10
  00620	e59d3030	 ldr         r3, [sp, #0x30]
  00624	e5c13000	 strb        r3, [r1]
  00628	e1a02423	 mov         r2, r3, lsr #8
  0062c	e1a03002	 mov         r3, r2
  00630	e5c13001	 strb        r3, [r1, #1]
  00634	e1a02422	 mov         r2, r2, lsr #8
  00638	e1a03002	 mov         r3, r2
  0063c	e5c13002	 strb        r3, [r1, #2]
  00640	e1a03422	 mov         r3, r2, lsr #8
  00644	e5c13003	 strb        r3, [r1, #3]

; 182  : 
; 183  :     // Compute IP4 header checksum
; 184  :     pIP->sum = ~ Sum(0, pIP, sizeof(IP4_HEADER));

  00648	e3a02014	 mov         r2, #0x14
  0064c	e59d1004	 ldr         r1, [sp, #4]
  00650	e3a00000	 mov         r0, #0
  00654	eb000000	 bl          Sum
  00658	e1cd01b4	 strh        r0, [sp, #0x14]
  0065c	e1dd31b4	 ldrh        r3, [sp, #0x14]
  00660	e1e01003	 mvn         r1, r3
  00664	e59d3004	 ldr         r3, [sp, #4]
  00668	e283200a	 add         r2, r3, #0xA
  0066c	e1a03801	 mov         r3, r1, lsl #16
  00670	e1a03823	 mov         r3, r3, lsr #16
  00674	e5c23000	 strb        r3, [r2]
  00678	e1a03423	 mov         r3, r3, lsr #8
  0067c	e5c23001	 strb        r3, [r2, #1]

; 185  : 
; 186  :     // We are done
; 187  :     return ethLength;

  00680	e1dd30b0	 ldrh        r3, [sp]
  00684	e1cd31b0	 strh        r3, [sp, #0x10]

; 188  : }

  00688	e1dd01b0	 ldrh        r0, [sp, #0x10]
  0068c	e28dd018	 add         sp, sp, #0x18
  00690	e89d6000	 ldmia       sp, {sp, lr}
  00694	e12fff1e	 bx          lr
  00698		 |$LN8@EncodeIP|
  00698		 |$LN9@EncodeIP|
  00698	00000000	 DCD         |?ipId@?1??EncodeIP@@9@9|
  0069c		 |$LN10@EncodeIP|
  0069c	00000000	 DCD         |g_kitlEthState|
  006a0		 |$M43941|

			 ENDP  ; |EncodeIP|

	EXPORT	|??_C@_0CJ@OFEHEAMD@KITL?3?5Connected?5host?5?5IP?3?5?$CFs?5?5Po@| [ DATA ] ; `string'
	IMPORT	|KITLOutputDebugString|
	IMPORT	|OALKitlIPtoString|
	IMPORT	|dpCurSettings|

  00020			 AREA	 |.pdata|, PDATA
|$T43954| DCD	|$LN17@DecodeUDP|
	DCD	0x40010304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@OFEHEAMD@KITL?3?5Connected?5host?5?5IP?3?5?$CFs?5?5Po@| DCB "K"
	DCB	"ITL: Connected host  IP: %s  Port: %d", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  006a0			 AREA	 |.text|, CODE, ARM

  006a0		 |DecodeUDP| PROC

; 549  : {

  006a0		 |$LN17@DecodeUDP|
  006a0	e1a0c00d	 mov         r12, sp
  006a4	e92d0007	 stmdb       sp!, {r0 - r2}
  006a8	e92d5000	 stmdb       sp!, {r12, lr}
  006ac	e24dd034	 sub         sp, sp, #0x34
  006b0		 |$M43951|

; 550  :     UINT8 *pData = NULL;

  006b0	e3a03000	 mov         r3, #0
  006b4	e58d3004	 str         r3, [sp, #4]

; 551  :     ETH_HEADER *pEth = (ETH_HEADER*)pFrame;

  006b8	e59d303c	 ldr         r3, [sp, #0x3C]
  006bc	e58d3010	 str         r3, [sp, #0x10]

; 552  :     IP4_HEADER *pIP = (IP4_HEADER*)((UINT8*)pEth + sizeof(ETH_HEADER));

  006c0	e59d3010	 ldr         r3, [sp, #0x10]
  006c4	e283300e	 add         r3, r3, #0xE
  006c8	e58d3008	 str         r3, [sp, #8]

; 553  :     UDP_HEADER *pUDP = (UDP_HEADER*)((UINT8*)pIP + sizeof(IP4_HEADER));

  006cc	e59d3008	 ldr         r3, [sp, #8]
  006d0	e2833014	 add         r3, r3, #0x14
  006d4	e58d3018	 str         r3, [sp, #0x18]

; 554  :     UINT16 xsum;
; 555  :     UINT32 ipLength, udpLength;
; 556  : 
; 557  :     // Be pesimistic
; 558  :     *pUsed = FALSE;

  006d8	e59d2044	 ldr         r2, [sp, #0x44]
  006dc	e3a03000	 mov         r3, #0
  006e0	e5823000	 str         r3, [r2]

; 559  : 
; 560  :     // Get IP and UDP lengths from packet
; 561  :     ipLength = ntohs(pIP->length);

  006e4	e59d3008	 ldr         r3, [sp, #8]
  006e8	e2831002	 add         r1, r3, #2
  006ec	e5d13001	 ldrb        r3, [r1, #1]
  006f0	e1a03403	 mov         r3, r3, lsl #8
  006f4	e1a02803	 mov         r2, r3, lsl #16
  006f8	e1a02822	 mov         r2, r2, lsr #16
  006fc	e5d13000	 ldrb        r3, [r1]
  00700	e1833002	 orr         r3, r3, r2
  00704	e1a00403	 mov         r0, r3, lsl #8
  00708	e59d3008	 ldr         r3, [sp, #8]
  0070c	e2831002	 add         r1, r3, #2
  00710	e5d13001	 ldrb        r3, [r1, #1]
  00714	e1a03403	 mov         r3, r3, lsl #8
  00718	e1a02803	 mov         r2, r3, lsl #16
  0071c	e1a02822	 mov         r2, r2, lsr #16
  00720	e5d13000	 ldrb        r3, [r1]
  00724	e1833002	 orr         r3, r3, r2
  00728	e1a03443	 mov         r3, r3, asr #8
  0072c	e1803003	 orr         r3, r0, r3
  00730	e1a03803	 mov         r3, r3, lsl #16
  00734	e1a03823	 mov         r3, r3, lsr #16
  00738	e58d300c	 str         r3, [sp, #0xC]

; 562  :     udpLength = ntohs(pUDP->length);

  0073c	e59d3018	 ldr         r3, [sp, #0x18]
  00740	e2831004	 add         r1, r3, #4
  00744	e5d13001	 ldrb        r3, [r1, #1]
  00748	e1a03403	 mov         r3, r3, lsl #8
  0074c	e1a02803	 mov         r2, r3, lsl #16
  00750	e1a02822	 mov         r2, r2, lsr #16
  00754	e5d13000	 ldrb        r3, [r1]
  00758	e1833002	 orr         r3, r3, r2
  0075c	e1a00403	 mov         r0, r3, lsl #8
  00760	e59d3018	 ldr         r3, [sp, #0x18]
  00764	e2831004	 add         r1, r3, #4
  00768	e5d13001	 ldrb        r3, [r1, #1]
  0076c	e1a03403	 mov         r3, r3, lsl #8
  00770	e1a02803	 mov         r2, r3, lsl #16
  00774	e1a02822	 mov         r2, r2, lsr #16
  00778	e5d13000	 ldrb        r3, [r1]
  0077c	e1833002	 orr         r3, r3, r2
  00780	e1a03443	 mov         r3, r3, asr #8
  00784	e1803003	 orr         r3, r0, r3
  00788	e1a03803	 mov         r3, r3, lsl #16
  0078c	e1a03823	 mov         r3, r3, lsr #16
  00790	e58d3014	 str         r3, [sp, #0x14]

; 563  : 
; 564  :     // UPD length must be in sync with IP length
; 565  :     if (ipLength < sizeof(IP4_HEADER) + udpLength) goto cleanUp;

  00794	e59d3014	 ldr         r3, [sp, #0x14]
  00798	e2832014	 add         r2, r3, #0x14
  0079c	e59d300c	 ldr         r3, [sp, #0xC]
  007a0	e1530002	 cmp         r3, r2
  007a4	2a000000	 bcs         |$LN10@DecodeUDP|
  007a8	ea0000b6	 b           |$cleanUp$43569|
  007ac		 |$LN10@DecodeUDP|

; 566  : 
; 567  :     // Verify UDP header checksum
; 568  :     if (pUDP->sum != 0) {    

  007ac	e59d3018	 ldr         r3, [sp, #0x18]
  007b0	e2831006	 add         r1, r3, #6
  007b4	e5d13001	 ldrb        r3, [r1, #1]
  007b8	e1a03403	 mov         r3, r3, lsl #8
  007bc	e1a02803	 mov         r2, r3, lsl #16
  007c0	e1a02822	 mov         r2, r2, lsr #16
  007c4	e5d13000	 ldrb        r3, [r1]
  007c8	e1833002	 orr         r3, r3, r2
  007cc	e3530000	 cmp         r3, #0
  007d0	0a00002d	 beq         |$LN9@DecodeUDP|

; 569  :        xsum = htons(UDP_PROTOCOL);

  007d4	e3a03c11	 mov         r3, #0x11, 24
  007d8	e1cd30b0	 strh        r3, [sp]

; 570  :        xsum = Sum(xsum, &pIP->srcip, sizeof(UINT32));

  007dc	e3a02004	 mov         r2, #4
  007e0	e59d3008	 ldr         r3, [sp, #8]
  007e4	e283100c	 add         r1, r3, #0xC
  007e8	e1dd00b0	 ldrh        r0, [sp]
  007ec	eb000000	 bl          Sum
  007f0	e1cd02b0	 strh        r0, [sp, #0x20]
  007f4	e1dd32b0	 ldrh        r3, [sp, #0x20]
  007f8	e1cd30b0	 strh        r3, [sp]

; 571  :        xsum = Sum(xsum, &pIP->destip, sizeof(UINT32));

  007fc	e3a02004	 mov         r2, #4
  00800	e59d3008	 ldr         r3, [sp, #8]
  00804	e2831010	 add         r1, r3, #0x10
  00808	e1dd00b0	 ldrh        r0, [sp]
  0080c	eb000000	 bl          Sum
  00810	e1cd02b2	 strh        r0, [sp, #0x22]
  00814	e1dd32b2	 ldrh        r3, [sp, #0x22]
  00818	e1cd30b0	 strh        r3, [sp]

; 572  :        xsum = Sum(xsum, &pUDP->length, sizeof(UINT32));

  0081c	e3a02004	 mov         r2, #4
  00820	e59d3018	 ldr         r3, [sp, #0x18]
  00824	e2831004	 add         r1, r3, #4
  00828	e1dd00b0	 ldrh        r0, [sp]
  0082c	eb000000	 bl          Sum
  00830	e1cd02b4	 strh        r0, [sp, #0x24]
  00834	e1dd32b4	 ldrh        r3, [sp, #0x24]
  00838	e1cd30b0	 strh        r3, [sp]

; 573  :        xsum = Sum(xsum, pUDP, udpLength);

  0083c	e59d2014	 ldr         r2, [sp, #0x14]
  00840	e59d1018	 ldr         r1, [sp, #0x18]
  00844	e1dd00b0	 ldrh        r0, [sp]
  00848	eb000000	 bl          Sum
  0084c	e1cd02b6	 strh        r0, [sp, #0x26]
  00850	e1dd32b6	 ldrh        r3, [sp, #0x26]
  00854	e1cd30b0	 strh        r3, [sp]

; 574  :        if (xsum != pUDP->sum) goto cleanUp;

  00858	e1dd30b0	 ldrh        r3, [sp]
  0085c	e1a00003	 mov         r0, r3
  00860	e59d3018	 ldr         r3, [sp, #0x18]
  00864	e2831006	 add         r1, r3, #6
  00868	e5d13001	 ldrb        r3, [r1, #1]
  0086c	e1a03403	 mov         r3, r3, lsl #8
  00870	e1a02803	 mov         r2, r3, lsl #16
  00874	e1a02822	 mov         r2, r2, lsr #16
  00878	e5d13000	 ldrb        r3, [r1]
  0087c	e1833002	 orr         r3, r3, r2
  00880	e1500003	 cmp         r0, r3
  00884	0a000000	 beq         |$LN8@DecodeUDP|
  00888	ea00007e	 b           |$cleanUp$43569|
  0088c		 |$LN8@DecodeUDP|
  0088c		 |$LN9@DecodeUDP|

; 575  :     }
; 576  : 
; 577  :     switch (ntohs(pUDP->dstPort)) {

  0088c	e59d3018	 ldr         r3, [sp, #0x18]
  00890	e2831002	 add         r1, r3, #2
  00894	e5d13001	 ldrb        r3, [r1, #1]
  00898	e1a03403	 mov         r3, r3, lsl #8
  0089c	e1a02803	 mov         r2, r3, lsl #16
  008a0	e1a02822	 mov         r2, r2, lsr #16
  008a4	e5d13000	 ldrb        r3, [r1]
  008a8	e1833002	 orr         r3, r3, r2
  008ac	e1a00403	 mov         r0, r3, lsl #8
  008b0	e59d3018	 ldr         r3, [sp, #0x18]
  008b4	e2831002	 add         r1, r3, #2
  008b8	e5d13001	 ldrb        r3, [r1, #1]
  008bc	e1a03403	 mov         r3, r3, lsl #8
  008c0	e1a02803	 mov         r2, r3, lsl #16
  008c4	e1a02822	 mov         r2, r2, lsr #16
  008c8	e5d13000	 ldrb        r3, [r1]
  008cc	e1833002	 orr         r3, r3, r2
  008d0	e1a03443	 mov         r3, r3, asr #8
  008d4	e1803003	 orr         r3, r0, r3
  008d8	e1a03803	 mov         r3, r3, lsl #16
  008dc	e1a03823	 mov         r3, r3, lsr #16
  008e0	e58d3028	 str         r3, [sp, #0x28]
  008e4	e59d3028	 ldr         r3, [sp, #0x28]
  008e8	e3530044	 cmp         r3, #0x44
  008ec	0a000005	 beq         |$LN5@DecodeUDP|
  008f0	e59d2028	 ldr         r2, [sp, #0x28]
  008f4	e3a03c03	 mov         r3, #3, 24
  008f8	e38330d5	 orr         r3, r3, #0xD5
  008fc	e1520003	 cmp         r2, r3
  00900	0a000005	 beq         |$LN4@DecodeUDP|
  00904	ea00005f	 b           |$LN6@DecodeUDP|
  00908		 |$LN5@DecodeUDP|

; 578  :     case DHCP_CLIENT_PORT:
; 579  :         DecodeDHCP(pFrame, pLength, pUsed);

  00908	e59d2044	 ldr         r2, [sp, #0x44]
  0090c	e59d1040	 ldr         r1, [sp, #0x40]
  00910	e59d003c	 ldr         r0, [sp, #0x3C]
  00914	eb000000	 bl          DecodeDHCP

; 580  :         break;

  00918	ea00005a	 b           |$LN6@DecodeUDP|
  0091c		 |$LN4@DecodeUDP|

; 581  :     case KITL_CLIENT_PORT:
; 582  :         // Message must be for us and client must have an address
; 583  :         if (
; 584  :             g_kitlEthState.deviceIP != pIP->destip ||
; 585  :             g_kitlEthState.deviceIP == 0
; 586  :         ) break;

  0091c	e59d3008	 ldr         r3, [sp, #8]
  00920	e2830010	 add         r0, r3, #0x10
  00924	e59f3178	 ldr         r3, [pc, #0x178]
  00928	e5931010	 ldr         r1, [r3, #0x10]
  0092c	e5d03003	 ldrb        r3, [r0, #3]
  00930	e1a02403	 mov         r2, r3, lsl #8
  00934	e5d03002	 ldrb        r3, [r0, #2]
  00938	e1833002	 orr         r3, r3, r2
  0093c	e1a02403	 mov         r2, r3, lsl #8
  00940	e5d03001	 ldrb        r3, [r0, #1]
  00944	e1833002	 orr         r3, r3, r2
  00948	e1a02403	 mov         r2, r3, lsl #8
  0094c	e5d03000	 ldrb        r3, [r0]
  00950	e1833002	 orr         r3, r3, r2
  00954	e1510003	 cmp         r1, r3
  00958	1a000003	 bne         |$LN2@DecodeUDP|
  0095c	e59f3140	 ldr         r3, [pc, #0x140]
  00960	e5933010	 ldr         r3, [r3, #0x10]
  00964	e3530000	 cmp         r3, #0
  00968	1a000000	 bne         |$LN3@DecodeUDP|
  0096c		 |$LN2@DecodeUDP|
  0096c	ea000045	 b           |$LN6@DecodeUDP|
  00970		 |$LN3@DecodeUDP|

; 587  :         // Initialize KITL server address
; 588  :         if (g_kitlEthState.kitlServerIP == 0xFFFFFFFF) {

  00970	e59f312c	 ldr         r3, [pc, #0x12C]
  00974	e593301c	 ldr         r3, [r3, #0x1C]
  00978	e3730001	 cmn         r3, #1
  0097c	1a000035	 bne         |$LN1@DecodeUDP|

; 589  :             memcpy(
; 590  :                 g_kitlEthState.kitlServerMAC, pEth->srcmac,
; 591  :                 sizeof(g_kitlEthState.kitlServerMAC)
; 592  :             );

  00980	e3a02006	 mov         r2, #6
  00984	e59d3010	 ldr         r3, [sp, #0x10]
  00988	e2831006	 add         r1, r3, #6
  0098c	e59f3110	 ldr         r3, [pc, #0x110]
  00990	e2830014	 add         r0, r3, #0x14
  00994	eb000000	 bl          memcpy

; 593  :             g_kitlEthState.kitlServerIP = pIP->srcip;

  00998	e59d3008	 ldr         r3, [sp, #8]
  0099c	e283100c	 add         r1, r3, #0xC
  009a0	e5d13003	 ldrb        r3, [r1, #3]
  009a4	e1a02403	 mov         r2, r3, lsl #8
  009a8	e5d13002	 ldrb        r3, [r1, #2]
  009ac	e1833002	 orr         r3, r3, r2
  009b0	e1a02403	 mov         r2, r3, lsl #8
  009b4	e5d13001	 ldrb        r3, [r1, #1]
  009b8	e1833002	 orr         r3, r3, r2
  009bc	e1a02403	 mov         r2, r3, lsl #8
  009c0	e5d13000	 ldrb        r3, [r1]
  009c4	e1832002	 orr         r2, r3, r2
  009c8	e59f30d4	 ldr         r3, [pc, #0xD4]
  009cc	e583201c	 str         r2, [r3, #0x1C]

; 594  :             g_kitlEthState.kitlServerPort = pUDP->srcPort;

  009d0	e59d1018	 ldr         r1, [sp, #0x18]
  009d4	e5d13001	 ldrb        r3, [r1, #1]
  009d8	e1a03403	 mov         r3, r3, lsl #8
  009dc	e1a02803	 mov         r2, r3, lsl #16
  009e0	e1a02822	 mov         r2, r2, lsr #16
  009e4	e5d13000	 ldrb        r3, [r1]
  009e8	e1832002	 orr         r2, r3, r2
  009ec	e59f30b0	 ldr         r3, [pc, #0xB0]
  009f0	e1c322b0	 strh        r2, [r3, #0x20]

; 595  :             KITL_RETAILMSG(ZONE_INIT, (
; 596  :                 "KITL: Connected host  IP: %s  Port: %d\r\n",
; 597  :                 OALKitlIPtoString(g_kitlEthState.kitlServerIP),
; 598  :                 ntohs(g_kitlEthState.kitlServerPort)
; 599  :             ));

  009f4	e59f30ac	 ldr         r3, [pc, #0xAC]
  009f8	e5933440	 ldr         r3, [r3, #0x440]
  009fc	e3130002	 tst         r3, #2
  00a00	0a000012	 beq         |$LN13@DecodeUDP|
  00a04	e59f3098	 ldr         r3, [pc, #0x98]
  00a08	e593001c	 ldr         r0, [r3, #0x1C]
  00a0c	eb000000	 bl          OALKitlIPtoString
  00a10	e58d002c	 str         r0, [sp, #0x2C]
  00a14	e59f3088	 ldr         r3, [pc, #0x88]
  00a18	e1d332b0	 ldrh        r3, [r3, #0x20]
  00a1c	e1a02403	 mov         r2, r3, lsl #8
  00a20	e59f307c	 ldr         r3, [pc, #0x7C]
  00a24	e1d332b0	 ldrh        r3, [r3, #0x20]
  00a28	e1a03443	 mov         r3, r3, asr #8
  00a2c	e1823003	 orr         r3, r2, r3
  00a30	e1a02803	 mov         r2, r3, lsl #16
  00a34	e1a02822	 mov         r2, r2, lsr #16
  00a38	e59d102c	 ldr         r1, [sp, #0x2C]
  00a3c	e59f005c	 ldr         r0, [pc, #0x5C]
  00a40	eb000000	 bl          KITLOutputDebugString
  00a44	e3a03001	 mov         r3, #1
  00a48	e58d3030	 str         r3, [sp, #0x30]
  00a4c	ea000001	 b           |$LN14@DecodeUDP|
  00a50		 |$LN13@DecodeUDP|
  00a50	e3a03000	 mov         r3, #0
  00a54	e58d3030	 str         r3, [sp, #0x30]
  00a58		 |$LN14@DecodeUDP|
  00a58		 |$LN1@DecodeUDP|

; 600  :         }
; 601  :         *pUsed = TRUE;

  00a58	e59d2044	 ldr         r2, [sp, #0x44]
  00a5c	e3a03001	 mov         r3, #1
  00a60	e5823000	 str         r3, [r2]

; 602  :         pData = (UINT8*)pUDP + sizeof(UDP_HEADER);

  00a64	e59d3018	 ldr         r3, [sp, #0x18]
  00a68	e2833008	 add         r3, r3, #8
  00a6c	e58d3004	 str         r3, [sp, #4]

; 603  :         *pLength = udpLength - sizeof(UDP_HEADER);

  00a70	e59d3014	 ldr         r3, [sp, #0x14]
  00a74	e2433008	 sub         r3, r3, #8
  00a78	e1a02803	 mov         r2, r3, lsl #16
  00a7c	e1a02822	 mov         r2, r2, lsr #16
  00a80	e59d3040	 ldr         r3, [sp, #0x40]
  00a84	e1c320b0	 strh        r2, [r3]
  00a88		 |$LN6@DecodeUDP|
  00a88		 |$cleanUp$43569|

; 604  :         break;
; 605  :     }
; 606  : 
; 607  : cleanUp:
; 608  :     return pData;

  00a88	e59d3004	 ldr         r3, [sp, #4]
  00a8c	e58d301c	 str         r3, [sp, #0x1C]

; 609  : }

  00a90	e59d001c	 ldr         r0, [sp, #0x1C]
  00a94	e28dd034	 add         sp, sp, #0x34
  00a98	e89d6000	 ldmia       sp, {sp, lr}
  00a9c	e12fff1e	 bx          lr
  00aa0		 |$LN18@DecodeUDP|
  00aa0		 |$LN19@DecodeUDP|
  00aa0	00000000	 DCD         |??_C@_0CJ@OFEHEAMD@KITL?3?5Connected?5host?5?5IP?3?5?$CFs?5?5Po@|
  00aa4		 |$LN20@DecodeUDP|
  00aa4	00000000	 DCD         |g_kitlEthState|
  00aa8		 |$LN21@DecodeUDP|
  00aa8	00000000	 DCD         |dpCurSettings|
  00aac		 |$M43952|

			 ENDP  ; |DecodeUDP|

	IMPORT	|KitlSetTimerCallback|

  00028			 AREA	 |.pdata|, PDATA
|$T43963| DCD	|$LN19@DecodeDHCP|
	DCD	0x4000bd04
; Function compile flags: /Odtp

  00aac			 AREA	 |.text|, CODE, ARM

  00aac		 |DecodeDHCP| PROC

; 434  : {

  00aac		 |$LN19@DecodeDHCP|
  00aac	e1a0c00d	 mov         r12, sp
  00ab0	e92d0007	 stmdb       sp!, {r0 - r2}
  00ab4	e92d5000	 stmdb       sp!, {r12, lr}
  00ab8	e24dd028	 sub         sp, sp, #0x28
  00abc		 |$M43960|

; 435  :     BOOTP_MESSAGE *pDHCP;
; 436  :     UINT8 *pOption, msgType;
; 437  :     UINT32 value;
; 438  :     BOOL rc;
; 439  : 
; 440  :     // Be pesimistic
; 441  :     *pUsed = FALSE;

  00abc	e59d2038	 ldr         r2, [sp, #0x38]
  00ac0	e3a03000	 mov         r3, #0
  00ac4	e5823000	 str         r3, [r2]

; 442  : 
; 443  :     // Get pointers to BOOTP/DHCP message
; 444  :     pDHCP = (BOOTP_MESSAGE*)(
; 445  :         pFrame + sizeof(ETH_HEADER) + sizeof(IP4_HEADER) + sizeof(UDP_HEADER)
; 446  :     );

  00ac8	e59d3030	 ldr         r3, [sp, #0x30]
  00acc	e283302a	 add         r3, r3, #0x2A
  00ad0	e58d3000	 str         r3, [sp]

; 447  : 
; 448  :     // Check magic DHCP cookie & transaction id
; 449  :     if (
; 450  :         pDHCP->options[0] != 0x63 || pDHCP->options[1] != 0x82 ||
; 451  :         pDHCP->options[2] != 0x53 || pDHCP->options[3] != 0x63 ||
; 452  :         pDHCP->xid != g_kitlEthState.dhcpXId
; 453  :     ) goto cleanUp;

  00ad4	e59d3000	 ldr         r3, [sp]
  00ad8	e28330ec	 add         r3, r3, #0xEC
  00adc	e5d33000	 ldrb        r3, [r3]
  00ae0	e3530063	 cmp         r3, #0x63
  00ae4	1a00001e	 bne         |$LN13@DecodeDHCP|
  00ae8	e59d3000	 ldr         r3, [sp]
  00aec	e28330ed	 add         r3, r3, #0xED
  00af0	e5d33000	 ldrb        r3, [r3]
  00af4	e3530082	 cmp         r3, #0x82
  00af8	1a000019	 bne         |$LN13@DecodeDHCP|
  00afc	e59d3000	 ldr         r3, [sp]
  00b00	e28330ee	 add         r3, r3, #0xEE
  00b04	e5d33000	 ldrb        r3, [r3]
  00b08	e3530053	 cmp         r3, #0x53
  00b0c	1a000014	 bne         |$LN13@DecodeDHCP|
  00b10	e59d3000	 ldr         r3, [sp]
  00b14	e28330ef	 add         r3, r3, #0xEF
  00b18	e5d33000	 ldrb        r3, [r3]
  00b1c	e3530063	 cmp         r3, #0x63
  00b20	1a00000f	 bne         |$LN13@DecodeDHCP|
  00b24	e59d3000	 ldr         r3, [sp]
  00b28	e2831004	 add         r1, r3, #4
  00b2c	e5d13003	 ldrb        r3, [r1, #3]
  00b30	e1a02403	 mov         r2, r3, lsl #8
  00b34	e5d13002	 ldrb        r3, [r1, #2]
  00b38	e1833002	 orr         r3, r3, r2
  00b3c	e1a02403	 mov         r2, r3, lsl #8
  00b40	e5d13001	 ldrb        r3, [r1, #1]
  00b44	e1833002	 orr         r3, r3, r2
  00b48	e1a02403	 mov         r2, r3, lsl #8
  00b4c	e5d13000	 ldrb        r3, [r1]
  00b50	e1832002	 orr         r2, r3, r2
  00b54	e59f323c	 ldr         r3, [pc, #0x23C]
  00b58	e593302c	 ldr         r3, [r3, #0x2C]
  00b5c	e1520003	 cmp         r2, r3
  00b60	0a000000	 beq         |$LN14@DecodeDHCP|
  00b64		 |$LN13@DecodeDHCP|
  00b64	ea000088	 b           |$cleanUp$43483|
  00b68		 |$LN14@DecodeDHCP|

; 454  : 
; 455  :     // This is our DHCP transaction
; 456  :     *pUsed = TRUE;

  00b68	e59d2038	 ldr         r2, [sp, #0x38]
  00b6c	e3a03001	 mov         r3, #1
  00b70	e5823000	 str         r3, [r2]

; 457  : 
; 458  :     // Then find DHCP message type
; 459  :     pOption = FindDHCPOption(pDHCP, DHCP_MSGTYPE);

  00b74	e3a01035	 mov         r1, #0x35
  00b78	e59d0000	 ldr         r0, [sp]
  00b7c	eb000000	 bl          FindDHCPOption
  00b80	e58d0014	 str         r0, [sp, #0x14]
  00b84	e59d3014	 ldr         r3, [sp, #0x14]
  00b88	e58d3010	 str         r3, [sp, #0x10]

; 460  :     if (pOption == NULL) return;

  00b8c	e59d3010	 ldr         r3, [sp, #0x10]
  00b90	e3530000	 cmp         r3, #0
  00b94	1a000000	 bne         |$LN12@DecodeDHCP|
  00b98	ea00007b	 b           |$LN15@DecodeDHCP|
  00b9c		 |$LN12@DecodeDHCP|

; 461  :     msgType = pOption[2];

  00b9c	e59d3010	 ldr         r3, [sp, #0x10]
  00ba0	e2833002	 add         r3, r3, #2
  00ba4	e5d33000	 ldrb        r3, [r3]
  00ba8	e5cd300c	 strb        r3, [sp, #0xC]

; 462  : 
; 463  :     // Message processing depend on DHCP client state
; 464  :     switch (g_kitlEthState.dhcpState) {

  00bac	e59f31e4	 ldr         r3, [pc, #0x1E4]
  00bb0	e5933024	 ldr         r3, [r3, #0x24]
  00bb4	e58d3018	 str         r3, [sp, #0x18]
  00bb8	e59d3018	 ldr         r3, [sp, #0x18]
  00bbc	e3530001	 cmp         r3, #1
  00bc0	0a000003	 beq         |$LN9@DecodeDHCP|
  00bc4	e59d3018	 ldr         r3, [sp, #0x18]
  00bc8	e3530002	 cmp         r3, #2
  00bcc	0a000026	 beq         |$LN6@DecodeDHCP|
  00bd0	ea00006d	 b           |$LN10@DecodeDHCP|
  00bd4		 |$LN9@DecodeDHCP|

; 465  :     case DHCP_SELECTING:
; 466  :         // Ignore anything other then offer
; 467  :         if (msgType != DHCP_OFFER) break;

  00bd4	e5dd300c	 ldrb        r3, [sp, #0xC]
  00bd8	e3530002	 cmp         r3, #2
  00bdc	0a000000	 beq         |$LN8@DecodeDHCP|
  00be0	ea000069	 b           |$LN10@DecodeDHCP|
  00be4		 |$LN8@DecodeDHCP|

; 468  :         // Find server IP address
; 469  :         pOption = FindDHCPOption(pDHCP, DHCP_SERVER_ID);

  00be4	e3a01036	 mov         r1, #0x36
  00be8	e59d0000	 ldr         r0, [sp]
  00bec	eb000000	 bl          FindDHCPOption
  00bf0	e58d001c	 str         r0, [sp, #0x1C]
  00bf4	e59d301c	 ldr         r3, [sp, #0x1C]
  00bf8	e58d3010	 str         r3, [sp, #0x10]

; 470  :         if (pOption == NULL) break;

  00bfc	e59d3010	 ldr         r3, [sp, #0x10]
  00c00	e3530000	 cmp         r3, #0
  00c04	1a000000	 bne         |$LN7@DecodeDHCP|
  00c08	ea00005f	 b           |$LN10@DecodeDHCP|
  00c0c		 |$LN7@DecodeDHCP|

; 471  :         memcpy(&g_kitlEthState.dhcpServerIP, &pOption[2], sizeof(UINT32));

  00c0c	e3a02004	 mov         r2, #4
  00c10	e59d3010	 ldr         r3, [sp, #0x10]
  00c14	e2831002	 add         r1, r3, #2
  00c18	e59f3178	 ldr         r3, [pc, #0x178]
  00c1c	e2830028	 add         r0, r3, #0x28
  00c20	eb000000	 bl          memcpy

; 472  :         // Request offered IP address
; 473  :         SendDHCP(DHCP_REQUEST, pDHCP->yiaddr);

  00c24	e59d3000	 ldr         r3, [sp]
  00c28	e2831010	 add         r1, r3, #0x10
  00c2c	e5d13003	 ldrb        r3, [r1, #3]
  00c30	e1a02403	 mov         r2, r3, lsl #8
  00c34	e5d13002	 ldrb        r3, [r1, #2]
  00c38	e1833002	 orr         r3, r3, r2
  00c3c	e1a02403	 mov         r2, r3, lsl #8
  00c40	e5d13001	 ldrb        r3, [r1, #1]
  00c44	e1833002	 orr         r3, r3, r2
  00c48	e1a02403	 mov         r2, r3, lsl #8
  00c4c	e5d13000	 ldrb        r3, [r1]
  00c50	e1831002	 orr         r1, r3, r2
  00c54	e3a00003	 mov         r0, #3
  00c58	eb000000	 bl          SendDHCP

; 474  :         // We moved to new state
; 475  :         g_kitlEthState.dhcpState = DHCP_REQUESTING;

  00c5c	e59f2134	 ldr         r2, [pc, #0x134]
  00c60	e3a03002	 mov         r3, #2
  00c64	e5823024	 str         r3, [r2, #0x24]

; 476  :         break;

  00c68	ea000047	 b           |$LN10@DecodeDHCP|
  00c6c		 |$LN6@DecodeDHCP|

; 477  :     case DHCP_REQUESTING:
; 478  :         if (msgType == DHCP_ACK) {

  00c6c	e5dd300c	 ldrb        r3, [sp, #0xC]
  00c70	e3530005	 cmp         r3, #5
  00c74	1a000038	 bne         |$LN5@DecodeDHCP|

; 479  :             // Set assigned address
; 480  :             g_kitlEthState.deviceIP = pDHCP->yiaddr;

  00c78	e59d3000	 ldr         r3, [sp]
  00c7c	e2831010	 add         r1, r3, #0x10
  00c80	e5d13003	 ldrb        r3, [r1, #3]
  00c84	e1a02403	 mov         r2, r3, lsl #8
  00c88	e5d13002	 ldrb        r3, [r1, #2]
  00c8c	e1833002	 orr         r3, r3, r2
  00c90	e1a02403	 mov         r2, r3, lsl #8
  00c94	e5d13001	 ldrb        r3, [r1, #1]
  00c98	e1833002	 orr         r3, r3, r2
  00c9c	e1a02403	 mov         r2, r3, lsl #8
  00ca0	e5d13000	 ldrb        r3, [r1]
  00ca4	e1832002	 orr         r2, r3, r2
  00ca8	e59f30e8	 ldr         r3, [pc, #0xE8]
  00cac	e5832010	 str         r2, [r3, #0x10]

; 481  :             // Find renew period & set timer callback
; 482  :             pOption = FindDHCPOption(pDHCP, DHCP_RENEW_TIME);

  00cb0	e3a0103a	 mov         r1, #0x3A
  00cb4	e59d0000	 ldr         r0, [sp]
  00cb8	eb000000	 bl          FindDHCPOption
  00cbc	e58d0020	 str         r0, [sp, #0x20]
  00cc0	e59d3020	 ldr         r3, [sp, #0x20]
  00cc4	e58d3010	 str         r3, [sp, #0x10]

; 483  :             if (pOption != NULL) {

  00cc8	e59d3010	 ldr         r3, [sp, #0x10]
  00ccc	e3530000	 cmp         r3, #0
  00cd0	0a000018	 beq         |$LN4@DecodeDHCP|

; 484  :                 memcpy(&value, &pOption[2], sizeof(UINT32));

  00cd4	e3a02004	 mov         r2, #4
  00cd8	e59d3010	 ldr         r3, [sp, #0x10]
  00cdc	e2831002	 add         r1, r3, #2
  00ce0	e28d0008	 add         r0, sp, #8
  00ce4	eb000000	 bl          memcpy

; 485  :                 rc = KitlSetTimerCallback(ntohl(value), RenewDHCP, NULL);

  00ce8	e3a02000	 mov         r2, #0
  00cec	e59f10a8	 ldr         r1, [pc, #0xA8]
  00cf0	e59d3008	 ldr         r3, [sp, #8]
  00cf4	e1a00c03	 mov         r0, r3, lsl #24
  00cf8	e59d3008	 ldr         r3, [sp, #8]
  00cfc	e2033cff	 and         r3, r3, #0xFF, 24
  00d00	e1a03403	 mov         r3, r3, lsl #8
  00d04	e1800003	 orr         r0, r0, r3
  00d08	e59d3008	 ldr         r3, [sp, #8]
  00d0c	e20338ff	 and         r3, r3, #0xFF, 16
  00d10	e1a03423	 mov         r3, r3, lsr #8
  00d14	e1800003	 orr         r0, r0, r3
  00d18	e59d3008	 ldr         r3, [sp, #8]
  00d1c	e1a03c23	 mov         r3, r3, lsr #24
  00d20	e1800003	 orr         r0, r0, r3
  00d24	eb000000	 bl          KitlSetTimerCallback
  00d28	e58d0024	 str         r0, [sp, #0x24]
  00d2c	e59d3024	 ldr         r3, [sp, #0x24]
  00d30	e58d3004	 str         r3, [sp, #4]

; 486  :             } else {

  00d34	ea000004	 b           |$LN3@DecodeDHCP|
  00d38		 |$LN4@DecodeDHCP|

; 487  :                 // If there isn't renew period select 30 minutes
; 488  :                 KitlSetTimerCallback(30*60, RenewDHCP, NULL);

  00d38	e3a02000	 mov         r2, #0
  00d3c	e59f1058	 ldr         r1, [pc, #0x58]
  00d40	e3a00c07	 mov         r0, #7, 24
  00d44	e3800008	 orr         r0, r0, #8
  00d48	eb000000	 bl          KitlSetTimerCallback
  00d4c		 |$LN3@DecodeDHCP|

; 489  :             }
; 490  :             // We get address, let check it...
; 491  :             g_kitlEthState.dhcpState = DHCP_BOUND;

  00d4c	e59f2044	 ldr         r2, [pc, #0x44]
  00d50	e3a03000	 mov         r3, #0
  00d54	e5823024	 str         r3, [r2, #0x24]
  00d58	ea00000b	 b           |$LN2@DecodeDHCP|
  00d5c		 |$LN5@DecodeDHCP|

; 492  :         } else if (msgType == DHCP_NAK) {

  00d5c	e5dd300c	 ldrb        r3, [sp, #0xC]
  00d60	e3530006	 cmp         r3, #6
  00d64	1a000008	 bne         |$LN1@DecodeDHCP|

; 493  :             g_kitlEthState.deviceIP = 0;

  00d68	e59f2028	 ldr         r2, [pc, #0x28]
  00d6c	e3a03000	 mov         r3, #0
  00d70	e5823010	 str         r3, [r2, #0x10]

; 494  :             // Discover DHCP servers
; 495  :             SendDHCP(DHCP_DISCOVER, 0);

  00d74	e3a01000	 mov         r1, #0
  00d78	e3a00001	 mov         r0, #1
  00d7c	eb000000	 bl          SendDHCP

; 496  :             // Start with discover again
; 497  :             g_kitlEthState.dhcpState = DHCP_SELECTING;

  00d80	e59f2010	 ldr         r2, [pc, #0x10]
  00d84	e3a03001	 mov         r3, #1
  00d88	e5823024	 str         r3, [r2, #0x24]
  00d8c		 |$LN1@DecodeDHCP|
  00d8c		 |$LN2@DecodeDHCP|
  00d8c		 |$LN10@DecodeDHCP|
  00d8c		 |$cleanUp$43483|
  00d8c		 |$LN15@DecodeDHCP|

; 498  :         }
; 499  :         break;
; 500  :     }
; 501  : 
; 502  : cleanUp:
; 503  :     return;
; 504  : }

  00d8c	e28dd028	 add         sp, sp, #0x28
  00d90	e89d6000	 ldmia       sp, {sp, lr}
  00d94	e12fff1e	 bx          lr
  00d98		 |$LN20@DecodeDHCP|
  00d98		 |$LN21@DecodeDHCP|
  00d98	00000000	 DCD         |g_kitlEthState|
  00d9c		 |$LN22@DecodeDHCP|
  00d9c	00000000	 DCD         |RenewDHCP|
  00da0		 |$M43961|

			 ENDP  ; |DecodeDHCP|


  00030			 AREA	 |.pdata|, PDATA
|$T43972| DCD	|$LN9@FindDHCPOp|
	DCD	0x40002604
; Function compile flags: /Odtp

  00da0			 AREA	 |.text|, CODE, ARM

  00da0		 |FindDHCPOption| PROC

; 224  : {

  00da0		 |$LN9@FindDHCPOp|
  00da0	e1a0c00d	 mov         r12, sp
  00da4	e92d0003	 stmdb       sp!, {r0, r1}
  00da8	e92d5000	 stmdb       sp!, {r12, lr}
  00dac	e24dd008	 sub         sp, sp, #8
  00db0		 |$M43969|

; 225  :     UINT8 *p;
; 226  : 
; 227  :     p = &pDHCP->options[4];

  00db0	e59d3010	 ldr         r3, [sp, #0x10]
  00db4	e28330f0	 add         r3, r3, #0xF0
  00db8	e58d3000	 str         r3, [sp]
  00dbc		 |$LN4@FindDHCPOp|

; 228  :     while (*p != DHCP_END) {

  00dbc	e59d3000	 ldr         r3, [sp]
  00dc0	e5d33000	 ldrb        r3, [r3]
  00dc4	e35300ff	 cmp         r3, #0xFF
  00dc8	0a00000e	 beq         |$LN3@FindDHCPOp|

; 229  :         if (*p == option) break;

  00dcc	e59d3000	 ldr         r3, [sp]
  00dd0	e5d33000	 ldrb        r3, [r3]
  00dd4	e1a02003	 mov         r2, r3
  00dd8	e59d3014	 ldr         r3, [sp, #0x14]
  00ddc	e1520003	 cmp         r2, r3
  00de0	1a000000	 bne         |$LN2@FindDHCPOp|
  00de4	ea000007	 b           |$LN3@FindDHCPOp|
  00de8		 |$LN2@FindDHCPOp|

; 230  :         p += p[1] + 2;

  00de8	e59d3000	 ldr         r3, [sp]
  00dec	e2833001	 add         r3, r3, #1
  00df0	e5d33000	 ldrb        r3, [r3]
  00df4	e2832002	 add         r2, r3, #2
  00df8	e59d3000	 ldr         r3, [sp]
  00dfc	e0833002	 add         r3, r3, r2
  00e00	e58d3000	 str         r3, [sp]

; 231  :     }

  00e04	eaffffec	 b           |$LN4@FindDHCPOp|
  00e08		 |$LN3@FindDHCPOp|

; 232  :     if (*p == DHCP_END) p = NULL;

  00e08	e59d3000	 ldr         r3, [sp]
  00e0c	e5d33000	 ldrb        r3, [r3]
  00e10	e35300ff	 cmp         r3, #0xFF
  00e14	1a000001	 bne         |$LN1@FindDHCPOp|
  00e18	e3a03000	 mov         r3, #0
  00e1c	e58d3000	 str         r3, [sp]
  00e20		 |$LN1@FindDHCPOp|

; 233  :     return p;

  00e20	e59d3000	 ldr         r3, [sp]
  00e24	e58d3004	 str         r3, [sp, #4]

; 234  : }

  00e28	e59d0004	 ldr         r0, [sp, #4]
  00e2c	e28dd008	 add         sp, sp, #8
  00e30	e89d6000	 ldmia       sp, {sp, lr}
  00e34	e12fff1e	 bx          lr
  00e38		 |$M43970|

			 ENDP  ; |FindDHCPOption|

	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00038			 AREA	 |.pdata|, PDATA
|$T43991| DCD	|$LN11@SendDHCP|
	DCD	0xc000d304

  00000			 AREA	 |.xdata|, DATA
|$T43987| DCD	0xffffffb8
; Function compile flags: /Odtp

  00e38			 AREA	 |.text|, CODE, ARM

  00e38	00000000	 DCD         |__GSHandlerCheck|
  00e3c	00000000	 DCD         |$T43987|

  00e40		 |SendDHCP| PROC

; 251  : {

  00e40		 |$LN11@SendDHCP|
  00e40	e1a0c00d	 mov         r12, sp
  00e44	e92d000f	 stmdb       sp!, {r0 - r3}
  00e48	e92d5000	 stmdb       sp!, {r12, lr}
  00e4c	e24dd054	 sub         sp, sp, #0x54
  00e50		 |$M43988|
  00e50	e59f3330	 ldr         r3, [pc, #0x330]
  00e54	e5933000	 ldr         r3, [r3]
  00e58	e58d3024	 str         r3, [sp, #0x24]

; 252  :     UINT8 *pFrame = g_kitlEthState.packet;

  00e5c	e59f3320	 ldr         r3, [pc, #0x320]
  00e60	e2833f42	 add         r3, r3, #0x42, 30
  00e64	e58d3010	 str         r3, [sp, #0x10]

; 253  :     BOOTP_MESSAGE *pDHCP;
; 254  :     UINT32 offset;
; 255  :     UINT16 size;
; 256  :     UINT8 clientId[7];
; 257  : 
; 258  :     // Get pointer to BOOTP/DHCP message
; 259  :     pDHCP = (BOOTP_MESSAGE*)(
; 260  :         pFrame + sizeof(ETH_HEADER) + sizeof(IP4_HEADER) + sizeof(UDP_HEADER)
; 261  :     );

  00e68	e59d3010	 ldr         r3, [sp, #0x10]
  00e6c	e283302a	 add         r3, r3, #0x2A
  00e70	e58d300c	 str         r3, [sp, #0xC]

; 262  : 
; 263  :     // Clear all fields
; 264  :     memset(pDHCP, 0, sizeof(BOOTP_MESSAGE));

  00e74	e3a020ec	 mov         r2, #0xEC
  00e78	e3a01000	 mov         r1, #0
  00e7c	e59d000c	 ldr         r0, [sp, #0xC]
  00e80	eb000000	 bl          memset

; 265  : 
; 266  :     // BOOTP header
; 267  :     pDHCP->op = 1;                              // BOOTREQUEST

  00e84	e59d200c	 ldr         r2, [sp, #0xC]
  00e88	e3a03001	 mov         r3, #1
  00e8c	e5c23000	 strb        r3, [r2]

; 268  :     pDHCP->htype = 1;                           // 10 Mbps Ethernet

  00e90	e59d300c	 ldr         r3, [sp, #0xC]
  00e94	e2832001	 add         r2, r3, #1
  00e98	e3a03001	 mov         r3, #1
  00e9c	e5c23000	 strb        r3, [r2]

; 269  :     pDHCP->hlen = 6;                            // Ethernet address size

  00ea0	e59d300c	 ldr         r3, [sp, #0xC]
  00ea4	e2832002	 add         r2, r3, #2
  00ea8	e3a03006	 mov         r3, #6
  00eac	e5c23000	 strb        r3, [r2]

; 270  :     pDHCP->secs = 0;                            // Who care?

  00eb0	e59d300c	 ldr         r3, [sp, #0xC]
  00eb4	e2832008	 add         r2, r3, #8
  00eb8	e3a03000	 mov         r3, #0
  00ebc	e5c23000	 strb        r3, [r2]
  00ec0	e1a03423	 mov         r3, r3, lsr #8
  00ec4	e5c23001	 strb        r3, [r2, #1]

; 271  :     pDHCP->xid = g_kitlEthState.dhcpXId;

  00ec8	e59d300c	 ldr         r3, [sp, #0xC]
  00ecc	e2831004	 add         r1, r3, #4
  00ed0	e59f32ac	 ldr         r3, [pc, #0x2AC]
  00ed4	e593302c	 ldr         r3, [r3, #0x2C]
  00ed8	e5c13000	 strb        r3, [r1]
  00edc	e1a02423	 mov         r2, r3, lsr #8
  00ee0	e1a03002	 mov         r3, r2
  00ee4	e5c13001	 strb        r3, [r1, #1]
  00ee8	e1a02422	 mov         r2, r2, lsr #8
  00eec	e1a03002	 mov         r3, r2
  00ef0	e5c13002	 strb        r3, [r1, #2]
  00ef4	e1a03422	 mov         r3, r2, lsr #8
  00ef8	e5c13003	 strb        r3, [r1, #3]

; 272  : 
; 273  :     // Device MAC address
; 274  :     memcpy(
; 275  :         pDHCP->chaddr, g_kitlEthState.deviceMAC,
; 276  :         sizeof(g_kitlEthState.deviceMAC)
; 277  :     );

  00efc	e3a02006	 mov         r2, #6
  00f00	e59f327c	 ldr         r3, [pc, #0x27C]
  00f04	e2831008	 add         r1, r3, #8
  00f08	e59d300c	 ldr         r3, [sp, #0xC]
  00f0c	e283001c	 add         r0, r3, #0x1C
  00f10	eb000000	 bl          memcpy

; 278  : 
; 279  :     // Start with options
; 280  :     offset = 0;

  00f14	e3a03000	 mov         r3, #0
  00f18	e58d3018	 str         r3, [sp, #0x18]

; 281  : 
; 282  :     // DHCP cookie
; 283  :     pDHCP->options[offset++] = 0x63;

  00f1c	e59d300c	 ldr         r3, [sp, #0xC]
  00f20	e28320ec	 add         r2, r3, #0xEC
  00f24	e59d3018	 ldr         r3, [sp, #0x18]
  00f28	e0822003	 add         r2, r2, r3
  00f2c	e3a03063	 mov         r3, #0x63
  00f30	e5c23000	 strb        r3, [r2]
  00f34	e59d3018	 ldr         r3, [sp, #0x18]
  00f38	e2833001	 add         r3, r3, #1
  00f3c	e58d3018	 str         r3, [sp, #0x18]

; 284  :     pDHCP->options[offset++] = 0x82;

  00f40	e59d300c	 ldr         r3, [sp, #0xC]
  00f44	e28320ec	 add         r2, r3, #0xEC
  00f48	e59d3018	 ldr         r3, [sp, #0x18]
  00f4c	e0822003	 add         r2, r2, r3
  00f50	e3a03082	 mov         r3, #0x82
  00f54	e5c23000	 strb        r3, [r2]
  00f58	e59d3018	 ldr         r3, [sp, #0x18]
  00f5c	e2833001	 add         r3, r3, #1
  00f60	e58d3018	 str         r3, [sp, #0x18]

; 285  :     pDHCP->options[offset++] = 0x53;

  00f64	e59d300c	 ldr         r3, [sp, #0xC]
  00f68	e28320ec	 add         r2, r3, #0xEC
  00f6c	e59d3018	 ldr         r3, [sp, #0x18]
  00f70	e0822003	 add         r2, r2, r3
  00f74	e3a03053	 mov         r3, #0x53
  00f78	e5c23000	 strb        r3, [r2]
  00f7c	e59d3018	 ldr         r3, [sp, #0x18]
  00f80	e2833001	 add         r3, r3, #1
  00f84	e58d3018	 str         r3, [sp, #0x18]

; 286  :     pDHCP->options[offset++] = 0x63;

  00f88	e59d300c	 ldr         r3, [sp, #0xC]
  00f8c	e28320ec	 add         r2, r3, #0xEC
  00f90	e59d3018	 ldr         r3, [sp, #0x18]
  00f94	e0822003	 add         r2, r2, r3
  00f98	e3a03063	 mov         r3, #0x63
  00f9c	e5c23000	 strb        r3, [r2]
  00fa0	e59d3018	 ldr         r3, [sp, #0x18]
  00fa4	e2833001	 add         r3, r3, #1
  00fa8	e58d3018	 str         r3, [sp, #0x18]

; 287  : 
; 288  :     // DHCP message type
; 289  :     AddDHCPOption(pDHCP, DHCP_MSGTYPE, &offset, &msgType, 1);

  00fac	e3a03001	 mov         r3, #1
  00fb0	e58d3000	 str         r3, [sp]
  00fb4	e28d305c	 add         r3, sp, #0x5C
  00fb8	e28d2018	 add         r2, sp, #0x18
  00fbc	e3a01035	 mov         r1, #0x35
  00fc0	e59d000c	 ldr         r0, [sp, #0xC]
  00fc4	eb000000	 bl          AddDHCPOption

; 290  : 
; 291  :     // Add client id
; 292  :     clientId[0] = 1;

  00fc8	e3a03001	 mov         r3, #1
  00fcc	e5cd301c	 strb        r3, [sp, #0x1C]

; 293  :     memcpy(&clientId[1], g_kitlEthState.deviceMAC, 6);

  00fd0	e3a02006	 mov         r2, #6
  00fd4	e59f31a8	 ldr         r3, [pc, #0x1A8]
  00fd8	e2831008	 add         r1, r3, #8
  00fdc	e28d301c	 add         r3, sp, #0x1C
  00fe0	e2830001	 add         r0, r3, #1
  00fe4	eb000000	 bl          memcpy

; 294  :     AddDHCPOption(pDHCP, DHCP_CLIENT_ID, &offset, clientId, 7);

  00fe8	e3a03007	 mov         r3, #7
  00fec	e58d3000	 str         r3, [sp]
  00ff0	e28d301c	 add         r3, sp, #0x1C
  00ff4	e28d2018	 add         r2, sp, #0x18
  00ff8	e3a0103d	 mov         r1, #0x3D
  00ffc	e59d000c	 ldr         r0, [sp, #0xC]
  01000	eb000000	 bl          AddDHCPOption

; 295  : 
; 296  :     switch (msgType) {

  01004	e59d305c	 ldr         r3, [sp, #0x5C]
  01008	e58d304c	 str         r3, [sp, #0x4C]
  0100c	e59d304c	 ldr         r3, [sp, #0x4C]
  01010	e3530003	 cmp         r3, #3
  01014	0a000003	 beq         |$LN4@SendDHCP|
  01018	e59d304c	 ldr         r3, [sp, #0x4C]
  0101c	e3530004	 cmp         r3, #4
  01020	0a000021	 beq         |$LN1@SendDHCP|
  01024	ea00002f	 b           |$LN5@SendDHCP|
  01028		 |$LN4@SendDHCP|

; 297  :     case DHCP_REQUEST:
; 298  :         if (requestIP != 0) {

  01028	e59d3060	 ldr         r3, [sp, #0x60]
  0102c	e3530000	 cmp         r3, #0
  01030	0a00000f	 beq         |$LN3@SendDHCP|

; 299  :             AddDHCPOption(
; 300  :                 pDHCP, DHCP_IP_ADDR_REQ, &offset, &requestIP, sizeof(requestIP)
; 301  :             );

  01034	e3a03004	 mov         r3, #4
  01038	e58d3000	 str         r3, [sp]
  0103c	e28d3060	 add         r3, sp, #0x60
  01040	e28d2018	 add         r2, sp, #0x18
  01044	e3a01032	 mov         r1, #0x32
  01048	e59d000c	 ldr         r0, [sp, #0xC]
  0104c	eb000000	 bl          AddDHCPOption

; 302  :             AddDHCPOption(
; 303  :                 pDHCP, DHCP_SERVER_ID, &offset, &g_kitlEthState.dhcpServerIP,
; 304  :                 sizeof(g_kitlEthState.dhcpServerIP)
; 305  :             );

  01050	e3a03004	 mov         r3, #4
  01054	e58d3000	 str         r3, [sp]
  01058	e59f3124	 ldr         r3, [pc, #0x124]
  0105c	e2833028	 add         r3, r3, #0x28
  01060	e28d2018	 add         r2, sp, #0x18
  01064	e3a01036	 mov         r1, #0x36
  01068	e59d000c	 ldr         r0, [sp, #0xC]
  0106c	eb000000	 bl          AddDHCPOption

; 306  :         } else {

  01070	ea00000c	 b           |$LN2@SendDHCP|
  01074		 |$LN3@SendDHCP|

; 307  :             pDHCP->ciaddr = g_kitlEthState.deviceIP;

  01074	e59d300c	 ldr         r3, [sp, #0xC]
  01078	e283100c	 add         r1, r3, #0xC
  0107c	e59f3100	 ldr         r3, [pc, #0x100]
  01080	e5933010	 ldr         r3, [r3, #0x10]
  01084	e5c13000	 strb        r3, [r1]
  01088	e1a02423	 mov         r2, r3, lsr #8
  0108c	e1a03002	 mov         r3, r2
  01090	e5c13001	 strb        r3, [r1, #1]
  01094	e1a02422	 mov         r2, r2, lsr #8
  01098	e1a03002	 mov         r3, r2
  0109c	e5c13002	 strb        r3, [r1, #2]
  010a0	e1a03422	 mov         r3, r2, lsr #8
  010a4	e5c13003	 strb        r3, [r1, #3]
  010a8		 |$LN2@SendDHCP|

; 308  :         }
; 309  :         break;

  010a8	ea00000e	 b           |$LN5@SendDHCP|
  010ac		 |$LN1@SendDHCP|

; 310  :     case DHCP_DECLINE:
; 311  :         AddDHCPOption(
; 312  :             pDHCP, DHCP_IP_ADDR_REQ, &offset, &requestIP, sizeof(requestIP)
; 313  :         );

  010ac	e3a03004	 mov         r3, #4
  010b0	e58d3000	 str         r3, [sp]
  010b4	e28d3060	 add         r3, sp, #0x60
  010b8	e28d2018	 add         r2, sp, #0x18
  010bc	e3a01032	 mov         r1, #0x32
  010c0	e59d000c	 ldr         r0, [sp, #0xC]
  010c4	eb000000	 bl          AddDHCPOption

; 314  :         AddDHCPOption(
; 315  :             pDHCP, DHCP_SERVER_ID, &offset, &g_kitlEthState.dhcpServerIP,
; 316  :             sizeof(g_kitlEthState.dhcpServerIP)
; 317  :         );

  010c8	e3a03004	 mov         r3, #4
  010cc	e58d3000	 str         r3, [sp]
  010d0	e59f30ac	 ldr         r3, [pc, #0xAC]
  010d4	e2833028	 add         r3, r3, #0x28
  010d8	e28d2018	 add         r2, sp, #0x18
  010dc	e3a01036	 mov         r1, #0x36
  010e0	e59d000c	 ldr         r0, [sp, #0xC]
  010e4	eb000000	 bl          AddDHCPOption
  010e8		 |$LN5@SendDHCP|

; 318  :         break;
; 319  :     }
; 320  : 
; 321  :     // DHCP message end
; 322  :     pDHCP->options[offset++] = DHCP_END;

  010e8	e59d300c	 ldr         r3, [sp, #0xC]
  010ec	e28320ec	 add         r2, r3, #0xEC
  010f0	e59d3018	 ldr         r3, [sp, #0x18]
  010f4	e0822003	 add         r2, r2, r3
  010f8	e3a030ff	 mov         r3, #0xFF
  010fc	e5c23000	 strb        r3, [r2]
  01100	e59d3018	 ldr         r3, [sp, #0x18]
  01104	e2833001	 add         r3, r3, #1
  01108	e58d3018	 str         r3, [sp, #0x18]

; 323  : 
; 324  :     // Add MAC/IP/UDP header and checksum
; 325  :     size = EncodeUDP(
; 326  :         pFrame, sizeof(BOOTP_MESSAGE) + offset, NULL, requestIP, 0xFFFFFFFF,
; 327  :         htons(DHCP_CLIENT_PORT), htons(DHCP_SERVER_PORT)
; 328  :     );

  0110c	e3a03c43	 mov         r3, #0x43, 24
  01110	e58d3008	 str         r3, [sp, #8]
  01114	e3a03b11	 mov         r3, #0x11, 22
  01118	e58d3004	 str         r3, [sp, #4]
  0111c	e3e03000	 mvn         r3, #0
  01120	e58d3000	 str         r3, [sp]
  01124	e59d3060	 ldr         r3, [sp, #0x60]
  01128	e3a02000	 mov         r2, #0
  0112c	e59d1018	 ldr         r1, [sp, #0x18]
  01130	e28110ec	 add         r1, r1, #0xEC
  01134	e1a01801	 mov         r1, r1, lsl #16
  01138	e1a01821	 mov         r1, r1, lsr #16
  0113c	e59d0010	 ldr         r0, [sp, #0x10]
  01140	eb000000	 bl          EncodeUDP
  01144	e1a03800	 mov         r3, r0, lsl #16
  01148	e1a03823	 mov         r3, r3, lsr #16
  0114c	e1cd35b0	 strh        r3, [sp, #0x50]
  01150	e1dd35b0	 ldrh        r3, [sp, #0x50]
  01154	e1cd31b4	 strh        r3, [sp, #0x14]

; 329  : 
; 330  :     // Send packet on wire
; 331  :     g_kitlEthState.pfnSend(pFrame, size);

  01158	e1dd11b4	 ldrh        r1, [sp, #0x14]
  0115c	e59d0010	 ldr         r0, [sp, #0x10]
  01160	e59f301c	 ldr         r3, [pc, #0x1C]
  01164	e5933030	 ldr         r3, [r3, #0x30]
  01168	e1a0e00f	 mov         lr, pc
  0116c	e12fff13	 bx          r3

; 251  : {

  01170	e59d0024	 ldr         r0, [sp, #0x24]
  01174	eb000000	 bl          __security_check_cookie

; 332  : }

  01178	e28dd054	 add         sp, sp, #0x54
  0117c	e89d6000	 ldmia       sp, {sp, lr}
  01180	e12fff1e	 bx          lr
  01184		 |$LN12@SendDHCP|
  01184		 |$LN13@SendDHCP|
  01184	00000000	 DCD         |g_kitlEthState|
  01188		 |$LN14@SendDHCP|
  01188	00000000	 DCD         |__security_cookie|
  0118c		 |$M43989|

			 ENDP  ; |SendDHCP|


  00040			 AREA	 |.pdata|, PDATA
|$T44002| DCD	|$LN5@EncodeUDP|
	DCD	0x40006204
; Function compile flags: /Odtp

  0118c			 AREA	 |.text|, CODE, ARM

  0118c		 |EncodeUDP| PROC

; 195  : ) {

  0118c		 |$LN5@EncodeUDP|
  0118c	e1a0c00d	 mov         r12, sp
  01190	e92d000f	 stmdb       sp!, {r0 - r3}
  01194	e92d5000	 stmdb       sp!, {r12, lr}
  01198	e24dd028	 sub         sp, sp, #0x28
  0119c		 |$M43999|

; 196  :     UDP_HEADER *pUDP;
; 197  :     UINT16 xsum, udpLength;
; 198  : 
; 199  :     // First calculate UDP length
; 200  :     udpLength = sizeof(UDP_HEADER) + length;

  0119c	e1dd33b4	 ldrh        r3, [sp, #0x34]
  011a0	e2833008	 add         r3, r3, #8
  011a4	e1a03803	 mov         r3, r3, lsl #16
  011a8	e1a03823	 mov         r3, r3, lsr #16
  011ac	e1cd30ba	 strh        r3, [sp, #0xA]

; 201  : 
; 202  :     // Fill in UDP header
; 203  :     pUDP = (UDP_HEADER*)(pFrame + sizeof(ETH_HEADER) + sizeof(IP4_HEADER));

  011b0	e59d3030	 ldr         r3, [sp, #0x30]
  011b4	e2833022	 add         r3, r3, #0x22
  011b8	e58d300c	 str         r3, [sp, #0xC]

; 204  :     pUDP->srcPort = srcPort;

  011bc	e1dd34b4	 ldrh        r3, [sp, #0x44]
  011c0	e59d200c	 ldr         r2, [sp, #0xC]
  011c4	e5c23000	 strb        r3, [r2]
  011c8	e1a03423	 mov         r3, r3, lsr #8
  011cc	e5c23001	 strb        r3, [r2, #1]

; 205  :     pUDP->dstPort = destPort;

  011d0	e59d300c	 ldr         r3, [sp, #0xC]
  011d4	e2832002	 add         r2, r3, #2
  011d8	e1dd34b8	 ldrh        r3, [sp, #0x48]
  011dc	e5c23000	 strb        r3, [r2]
  011e0	e1a03423	 mov         r3, r3, lsr #8
  011e4	e5c23001	 strb        r3, [r2, #1]

; 206  :     pUDP->length = htons(udpLength);

  011e8	e1dd30ba	 ldrh        r3, [sp, #0xA]
  011ec	e1a02403	 mov         r2, r3, lsl #8
  011f0	e1dd30ba	 ldrh        r3, [sp, #0xA]
  011f4	e1a03443	 mov         r3, r3, asr #8
  011f8	e1823003	 orr         r3, r2, r3
  011fc	e1a01803	 mov         r1, r3, lsl #16
  01200	e1a01821	 mov         r1, r1, lsr #16
  01204	e59d300c	 ldr         r3, [sp, #0xC]
  01208	e2832004	 add         r2, r3, #4
  0120c	e1a03001	 mov         r3, r1
  01210	e5c23000	 strb        r3, [r2]
  01214	e1a03423	 mov         r3, r3, lsr #8
  01218	e5c23001	 strb        r3, [r2, #1]

; 207  :     pUDP->sum = 0;

  0121c	e59d300c	 ldr         r3, [sp, #0xC]
  01220	e2832006	 add         r2, r3, #6
  01224	e3a03000	 mov         r3, #0
  01228	e5c23000	 strb        r3, [r2]
  0122c	e1a03423	 mov         r3, r3, lsr #8
  01230	e5c23001	 strb        r3, [r2, #1]

; 208  : 
; 209  :     // Compute UDP header checksum
; 210  :     xsum = htons(UDP_PROTOCOL);

  01234	e3a03c11	 mov         r3, #0x11, 24
  01238	e1cd30b8	 strh        r3, [sp, #8]

; 211  :     xsum = Sum(xsum, &srcIP, sizeof(UINT32));

  0123c	e3a02004	 mov         r2, #4
  01240	e28d103c	 add         r1, sp, #0x3C
  01244	e1dd00b8	 ldrh        r0, [sp, #8]
  01248	eb000000	 bl          Sum
  0124c	e1cd01bc	 strh        r0, [sp, #0x1C]
  01250	e1dd31bc	 ldrh        r3, [sp, #0x1C]
  01254	e1cd30b8	 strh        r3, [sp, #8]

; 212  :     xsum = Sum(xsum, &destIP, sizeof(UINT32));

  01258	e3a02004	 mov         r2, #4
  0125c	e28d1040	 add         r1, sp, #0x40
  01260	e1dd00b8	 ldrh        r0, [sp, #8]
  01264	eb000000	 bl          Sum
  01268	e1cd01be	 strh        r0, [sp, #0x1E]
  0126c	e1dd31be	 ldrh        r3, [sp, #0x1E]
  01270	e1cd30b8	 strh        r3, [sp, #8]

; 213  :     xsum = Sum(xsum, &pUDP->length, sizeof(UINT32));

  01274	e3a02004	 mov         r2, #4
  01278	e59d300c	 ldr         r3, [sp, #0xC]
  0127c	e2831004	 add         r1, r3, #4
  01280	e1dd00b8	 ldrh        r0, [sp, #8]
  01284	eb000000	 bl          Sum
  01288	e1cd02b0	 strh        r0, [sp, #0x20]
  0128c	e1dd32b0	 ldrh        r3, [sp, #0x20]
  01290	e1cd30b8	 strh        r3, [sp, #8]

; 214  :     xsum = Sum(xsum, pUDP, udpLength);

  01294	e1dd20ba	 ldrh        r2, [sp, #0xA]
  01298	e59d100c	 ldr         r1, [sp, #0xC]
  0129c	e1dd00b8	 ldrh        r0, [sp, #8]
  012a0	eb000000	 bl          Sum
  012a4	e1cd02b2	 strh        r0, [sp, #0x22]
  012a8	e1dd32b2	 ldrh        r3, [sp, #0x22]
  012ac	e1cd30b8	 strh        r3, [sp, #8]

; 215  :     pUDP->sum = ~xsum;

  012b0	e1dd30b8	 ldrh        r3, [sp, #8]
  012b4	e1e01003	 mvn         r1, r3
  012b8	e59d300c	 ldr         r3, [sp, #0xC]
  012bc	e2832006	 add         r2, r3, #6
  012c0	e1a03801	 mov         r3, r1, lsl #16
  012c4	e1a03823	 mov         r3, r3, lsr #16
  012c8	e5c23000	 strb        r3, [r2]
  012cc	e1a03423	 mov         r3, r3, lsr #8
  012d0	e5c23001	 strb        r3, [r2, #1]

; 216  : 
; 217  :     // And now do IP encode
; 218  :     return EncodeIP(pFrame, udpLength, pDestMAC, srcIP, destIP, UDP_PROTOCOL);

  012d4	e3a03011	 mov         r3, #0x11
  012d8	e58d3004	 str         r3, [sp, #4]
  012dc	e59d3040	 ldr         r3, [sp, #0x40]
  012e0	e58d3000	 str         r3, [sp]
  012e4	e59d303c	 ldr         r3, [sp, #0x3C]
  012e8	e59d2038	 ldr         r2, [sp, #0x38]
  012ec	e1dd10ba	 ldrh        r1, [sp, #0xA]
  012f0	e59d0030	 ldr         r0, [sp, #0x30]
  012f4	eb000000	 bl          EncodeIP
  012f8	e1cd02b4	 strh        r0, [sp, #0x24]
  012fc	e1dd32b4	 ldrh        r3, [sp, #0x24]
  01300	e1cd31b8	 strh        r3, [sp, #0x18]

; 219  : }

  01304	e1dd01b8	 ldrh        r0, [sp, #0x18]
  01308	e28dd028	 add         sp, sp, #0x28
  0130c	e89d6000	 ldmia       sp, {sp, lr}
  01310	e12fff1e	 bx          lr
  01314		 |$M44000|

			 ENDP  ; |EncodeUDP|


  00048			 AREA	 |.pdata|, PDATA
|$T44007| DCD	|$LN5@AddDHCPOpt|
	DCD	0x40002d03
; Function compile flags: /Odtp

  01314			 AREA	 |.text|, CODE, ARM

  01314		 |AddDHCPOption| PROC

; 241  : ) {

  01314		 |$LN5@AddDHCPOpt|
  01314	e1a0c00d	 mov         r12, sp
  01318	e92d000f	 stmdb       sp!, {r0 - r3}
  0131c	e92d5000	 stmdb       sp!, {r12, lr}
  01320		 |$M44004|

; 242  :     pDHCP->options[(*pOffset)++] = option;

  01320	e59d3008	 ldr         r3, [sp, #8]
  01324	e28320ec	 add         r2, r3, #0xEC
  01328	e59d3010	 ldr         r3, [sp, #0x10]
  0132c	e5933000	 ldr         r3, [r3]
  01330	e0822003	 add         r2, r2, r3
  01334	e59d300c	 ldr         r3, [sp, #0xC]
  01338	e20330ff	 and         r3, r3, #0xFF
  0133c	e5c23000	 strb        r3, [r2]
  01340	e59d3010	 ldr         r3, [sp, #0x10]
  01344	e5933000	 ldr         r3, [r3]
  01348	e2832001	 add         r2, r3, #1
  0134c	e59d3010	 ldr         r3, [sp, #0x10]
  01350	e5832000	 str         r2, [r3]

; 243  :     pDHCP->options[(*pOffset)++] = size;

  01354	e59d3008	 ldr         r3, [sp, #8]
  01358	e28320ec	 add         r2, r3, #0xEC
  0135c	e59d3010	 ldr         r3, [sp, #0x10]
  01360	e5933000	 ldr         r3, [r3]
  01364	e0822003	 add         r2, r2, r3
  01368	e59d3018	 ldr         r3, [sp, #0x18]
  0136c	e20330ff	 and         r3, r3, #0xFF
  01370	e5c23000	 strb        r3, [r2]
  01374	e59d3010	 ldr         r3, [sp, #0x10]
  01378	e5933000	 ldr         r3, [r3]
  0137c	e2832001	 add         r2, r3, #1
  01380	e59d3010	 ldr         r3, [sp, #0x10]
  01384	e5832000	 str         r2, [r3]

; 244  :     memcpy(&pDHCP->options[*pOffset], pData, size);

  01388	e59d2018	 ldr         r2, [sp, #0x18]
  0138c	e59d1014	 ldr         r1, [sp, #0x14]
  01390	e59d3008	 ldr         r3, [sp, #8]
  01394	e28300ec	 add         r0, r3, #0xEC
  01398	e59d3010	 ldr         r3, [sp, #0x10]
  0139c	e5933000	 ldr         r3, [r3]
  013a0	e0800003	 add         r0, r0, r3
  013a4	eb000000	 bl          memcpy

; 245  :     *pOffset += size;

  013a8	e59d3010	 ldr         r3, [sp, #0x10]
  013ac	e5932000	 ldr         r2, [r3]
  013b0	e59d3018	 ldr         r3, [sp, #0x18]
  013b4	e0822003	 add         r2, r2, r3
  013b8	e59d3010	 ldr         r3, [sp, #0x10]
  013bc	e5832000	 str         r2, [r3]

; 246  : }

  013c0	e89d6000	 ldmia       sp, {sp, lr}
  013c4	e12fff1e	 bx          lr
  013c8		 |$M44005|

			 ENDP  ; |AddDHCPOption|

	EXPORT	|??_C@_0CB@GFLGAKPJ@KITL?3?5Start?5DHCP?5RENEW?5process?$AN?6@| [ DATA ] ; `string'

  00050			 AREA	 |.pdata|, PDATA
|$T44014| DCD	|$LN7@RenewDHCP|
	DCD	0x40002204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CB@GFLGAKPJ@KITL?3?5Start?5DHCP?5RENEW?5process?$AN?6@| DCB "KITL"
	DCB	": Start DHCP RENEW process", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  013c8			 AREA	 |.text|, CODE, ARM

  013c8		 |RenewDHCP| PROC

; 337  : {

  013c8		 |$LN7@RenewDHCP|
  013c8	e1a0c00d	 mov         r12, sp
  013cc	e92d0001	 stmdb       sp!, {r0}
  013d0	e92d5000	 stmdb       sp!, {r12, lr}
  013d4	e24dd004	 sub         sp, sp, #4
  013d8		 |$M44011|

; 338  :     KITL_RETAILMSG(ZONE_WARNING, ("KITL: Start DHCP RENEW process\r\n"));

  013d8	e59f306c	 ldr         r3, [pc, #0x6C]
  013dc	e5933440	 ldr         r3, [r3, #0x440]
  013e0	e3130001	 tst         r3, #1
  013e4	0a000004	 beq         |$LN3@RenewDHCP|
  013e8	e59f0058	 ldr         r0, [pc, #0x58]
  013ec	eb000000	 bl          KITLOutputDebugString
  013f0	e3a03001	 mov         r3, #1
  013f4	e58d3000	 str         r3, [sp]
  013f8	ea000001	 b           |$LN4@RenewDHCP|
  013fc		 |$LN3@RenewDHCP|
  013fc	e3a03000	 mov         r3, #0
  01400	e58d3000	 str         r3, [sp]
  01404		 |$LN4@RenewDHCP|

; 339  : 
; 340  :     // Change transaction id (ok, not too random)
; 341  :     g_kitlEthState.dhcpXId += 0x01080217;

  01404	e59f3034	 ldr         r3, [pc, #0x34]
  01408	e593202c	 ldr         r2, [r3, #0x2C]
  0140c	e59f3030	 ldr         r3, [pc, #0x30]
  01410	e0822003	 add         r2, r2, r3
  01414	e59f3024	 ldr         r3, [pc, #0x24]
  01418	e583202c	 str         r2, [r3, #0x2C]

; 342  :     // Send request
; 343  :     SendDHCP(DHCP_REQUEST, 0);

  0141c	e3a01000	 mov         r1, #0
  01420	e3a00003	 mov         r0, #3
  01424	eb000000	 bl          SendDHCP

; 344  :     g_kitlEthState.dhcpState = DHCP_REQUESTING;

  01428	e59f2010	 ldr         r2, [pc, #0x10]
  0142c	e3a03002	 mov         r3, #2
  01430	e5823024	 str         r3, [r2, #0x24]

; 345  : }

  01434	e28dd004	 add         sp, sp, #4
  01438	e89d6000	 ldmia       sp, {sp, lr}
  0143c	e12fff1e	 bx          lr
  01440		 |$LN8@RenewDHCP|
  01440		 |$LN9@RenewDHCP|
  01440	00000000	 DCD         |g_kitlEthState|
  01444		 |$LN10@RenewDHCP|
  01444	01080217	 DCD         0x1080217
  01448		 |$LN11@RenewDHCP|
  01448	00000000	 DCD         |??_C@_0CB@GFLGAKPJ@KITL?3?5Start?5DHCP?5RENEW?5process?$AN?6@|
  0144c		 |$LN12@RenewDHCP|
  0144c	00000000	 DCD         |dpCurSettings|
  01450		 |$M44012|

			 ENDP  ; |RenewDHCP|

	EXPORT	|??_C@_0BM@FALEIOIG@?9OALIoCtlVBridge?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BP@BIAFCCDM@?$CLOALIoCtlVBridge?$CI0x?$CF08x?0?4?4?4?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIoCtlVBridge|
	IMPORT	|NKSetLastError|
	IMPORT	|VBridgeUWildCard|
	IMPORT	|VBridgeUGetEDBGMac|
	IMPORT	|VBridgeUGetOneRxPacketComplete|
	IMPORT	|VBridgeUGetOneRxPacket|
	IMPORT	|VBridgeUGetOneTxPacketComplete|
	IMPORT	|VBridgeUGetOneTxPacket|

  00058			 AREA	 |.pdata|, PDATA
|$T44047| DCD	|$LN40@OALIoCtlVB|
	DCD	0x4000ad04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BM@FALEIOIG@?9OALIoCtlVBridge?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"OALIoCtlVBridge(rc = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BP@BIAFCCDM@?$CLOALIoCtlVBridge?$CI0x?$CF08x?0?4?4?4?$CJ?$AN?6?$AA@| DCB "+"
	DCB	"OALIoCtlVBridge(0x%08x,...)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  01450			 AREA	 |.text|, CODE, ARM

  01450		 |OALIoCtlVBridge| PROC

; 917  : ) {

  01450		 |$LN40@OALIoCtlVB|
  01450	e1a0c00d	 mov         r12, sp
  01454	e92d000f	 stmdb       sp!, {r0 - r3}
  01458	e92d5000	 stmdb       sp!, {r12, lr}
  0145c	e24dd028	 sub         sp, sp, #0x28
  01460		 |$M44044|

; 918  :     BOOL rc = TRUE;

  01460	e3a03001	 mov         r3, #1
  01464	e58d3004	 str         r3, [sp, #4]

; 919  : 
; 920  :     KITL_RETAILMSG(ZONE_SEND|ZONE_RECV, ("+OALIoCtlVBridge(0x%08x,...)\r\n", code));

  01468	e59f3270	 ldr         r3, [pc, #0x270]
  0146c	e5933440	 ldr         r3, [r3, #0x440]
  01470	e3130030	 tst         r3, #0x30
  01474	0a000005	 beq         |$LN17@OALIoCtlVB|
  01478	e59d1030	 ldr         r1, [sp, #0x30]
  0147c	e59f027c	 ldr         r0, [pc, #0x27C]
  01480	eb000000	 bl          KITLOutputDebugString
  01484	e3a03001	 mov         r3, #1
  01488	e58d3010	 str         r3, [sp, #0x10]
  0148c	ea000001	 b           |$LN18@OALIoCtlVB|
  01490		 |$LN17@OALIoCtlVB|
  01490	e3a03000	 mov         r3, #0
  01494	e58d3010	 str         r3, [sp, #0x10]
  01498		 |$LN18@OALIoCtlVB|

; 921  : 
; 922  :     switch (code) {

  01498	e59d3030	 ldr         r3, [sp, #0x30]
  0149c	e58d3014	 str         r3, [sp, #0x14]
  014a0	e59d2014	 ldr         r2, [sp, #0x14]
  014a4	e59f3250	 ldr         r3, [pc, #0x250]
  014a8	e1520003	 cmp         r2, r3
  014ac	8a00001c	 bhi         |$LN19@OALIoCtlVB|
  014b0	e59d2014	 ldr         r2, [sp, #0x14]
  014b4	e59f3240	 ldr         r3, [pc, #0x240]
  014b8	e1520003	 cmp         r2, r3
  014bc	0a000043	 beq         |$LN8@OALIoCtlVB|
  014c0	e59d2014	 ldr         r2, [sp, #0x14]
  014c4	e59f322c	 ldr         r3, [pc, #0x22C]
  014c8	e0423003	 sub         r3, r2, r3
  014cc	e58d3014	 str         r3, [sp, #0x14]
  014d0	e59d3014	 ldr         r3, [sp, #0x14]
  014d4	e353000c	 cmp         r3, #0xC
  014d8	8a000069	 bhi         |$LN1@OALIoCtlVB|
  014dc	e59d2014	 ldr         r2, [sp, #0x14]
  014e0	e1a03102	 mov         r3, r2, lsl #2
  014e4	e083300f	 add         r3, r3, pc
  014e8	e5933004	 ldr         r3, [r3, #4]
  014ec	e08ff003	 add         pc, pc, r3
  014f0		 |$LN24@OALIoCtlVB|
  014f0		 |$LN23@OALIoCtlVB|
  014f0		 |$LN25@OALIoCtlVB|
  014f0	00000088	 DCD         0x88
  014f4		 |$LN26@OALIoCtlVB|
  014f4	00000190	 DCD         0x190
  014f8		 |$LN27@OALIoCtlVB|
  014f8	00000190	 DCD         0x190
  014fc		 |$LN28@OALIoCtlVB|
  014fc	00000190	 DCD         0x190
  01500		 |$LN29@OALIoCtlVB|
  01500	000000a4	 DCD         0xa4
  01504		 |$LN30@OALIoCtlVB|
  01504	00000190	 DCD         0x190
  01508		 |$LN31@OALIoCtlVB|
  01508	00000190	 DCD         0x190
  0150c		 |$LN32@OALIoCtlVB|
  0150c	00000190	 DCD         0x190
  01510		 |$LN33@OALIoCtlVB|
  01510	000000b4	 DCD         0xb4
  01514		 |$LN34@OALIoCtlVB|
  01514	00000190	 DCD         0x190
  01518		 |$LN35@OALIoCtlVB|
  01518	00000190	 DCD         0x190
  0151c		 |$LN36@OALIoCtlVB|
  0151c	00000190	 DCD         0x190
  01520		 |$LN37@OALIoCtlVB|
  01520	000000d0	 DCD         0xd0
  01524		 |$LN19@OALIoCtlVB|
  01524	e59d2014	 ldr         r2, [sp, #0x14]
  01528	e59f31c4	 ldr         r3, [pc, #0x1C4]
  0152c	e1520003	 cmp         r2, r3
  01530	8a00000c	 bhi         |$LN20@OALIoCtlVB|
  01534	e59d2014	 ldr         r2, [sp, #0x14]
  01538	e59f31b4	 ldr         r3, [pc, #0x1B4]
  0153c	e1520003	 cmp         r2, r3
  01540	0a00002d	 beq         |$LN6@OALIoCtlVB|
  01544	e59d2014	 ldr         r2, [sp, #0x14]
  01548	e59f31a0	 ldr         r3, [pc, #0x1A0]
  0154c	e1520003	 cmp         r2, r3
  01550	0a00004a	 beq         |$LN2@OALIoCtlVB|
  01554	e59d2014	 ldr         r2, [sp, #0x14]
  01558	e59f318c	 ldr         r3, [pc, #0x18C]
  0155c	e1520003	 cmp         r2, r3
  01560	0a00001d	 beq         |$LN7@OALIoCtlVB|
  01564	ea000046	 b           |$LN1@OALIoCtlVB|
  01568		 |$LN20@OALIoCtlVB|
  01568	e59d2014	 ldr         r2, [sp, #0x14]
  0156c	e59f3174	 ldr         r3, [pc, #0x174]
  01570	e1520003	 cmp         r2, r3
  01574	0a000036	 beq         |$LN3@OALIoCtlVB|
  01578	ea000041	 b           |$LN1@OALIoCtlVB|
  0157c		 |$LN12@OALIoCtlVB|

; 923  :     case IOCTL_VBRIDGE_GET_TX_PACKET:
; 924  :         rc = VBridgeUGetOneTxPacket((UINT8**)pOutBuffer, inSize);

  0157c	e59d1038	 ldr         r1, [sp, #0x38]
  01580	e59d003c	 ldr         r0, [sp, #0x3C]
  01584	eb000000	 bl          VBridgeUGetOneTxPacket
  01588	e58d0018	 str         r0, [sp, #0x18]
  0158c	e59d3018	 ldr         r3, [sp, #0x18]
  01590	e58d3004	 str         r3, [sp, #4]

; 925  :         break;

  01594	ea00003e	 b           |$LN13@OALIoCtlVB|
  01598		 |$LN11@OALIoCtlVB|

; 926  : 
; 927  :     case IOCTL_VBRIDGE_GET_TX_PACKET_COMPLETE:
; 928  :         VBridgeUGetOneTxPacketComplete((UINT8*)pInBuffer, inSize);

  01598	e59d1038	 ldr         r1, [sp, #0x38]
  0159c	e59d0034	 ldr         r0, [sp, #0x34]
  015a0	eb000000	 bl          VBridgeUGetOneTxPacketComplete

; 929  :         break;

  015a4	ea00003a	 b           |$LN13@OALIoCtlVB|
  015a8		 |$LN10@OALIoCtlVB|

; 930  : 
; 931  :     case IOCTL_VBRIDGE_GET_RX_PACKET:
; 932  :         rc = VBridgeUGetOneRxPacket((UINT8**)pOutBuffer, pOutSize);

  015a8	e59d1044	 ldr         r1, [sp, #0x44]
  015ac	e59d003c	 ldr         r0, [sp, #0x3C]
  015b0	eb000000	 bl          VBridgeUGetOneRxPacket
  015b4	e58d001c	 str         r0, [sp, #0x1C]
  015b8	e59d301c	 ldr         r3, [sp, #0x1C]
  015bc	e58d3004	 str         r3, [sp, #4]

; 933  :         break;

  015c0	ea000033	 b           |$LN13@OALIoCtlVB|
  015c4		 |$LN9@OALIoCtlVB|

; 934  : 
; 935  :     case IOCTL_VBRIDGE_GET_RX_PACKET_COMPLETE:
; 936  :         VBridgeUGetOneRxPacketComplete((UINT8*)pInBuffer);

  015c4	e59d0034	 ldr         r0, [sp, #0x34]
  015c8	eb000000	 bl          VBridgeUGetOneRxPacketComplete

; 937  :         break;

  015cc	ea000030	 b           |$LN13@OALIoCtlVB|
  015d0		 |$LN8@OALIoCtlVB|

; 938  : 
; 939  :     case IOCTL_VBRIDGE_GET_ETHERNET_MAC:
; 940  :         VBridgeUGetEDBGMac((UINT8*)pOutBuffer);

  015d0	e59d003c	 ldr         r0, [sp, #0x3C]
  015d4	eb000000	 bl          VBridgeUGetEDBGMac

; 941  :         break;

  015d8	ea00002d	 b           |$LN13@OALIoCtlVB|
  015dc		 |$LN7@OALIoCtlVB|

; 942  : 
; 943  :     case IOCTL_VBRIDGE_CURRENT_PACKET_FILTER:
; 944  :         g_kitlEthState.deviceFilter = *(UINT32*)pInBuffer;

  015dc	e59d3034	 ldr         r3, [sp, #0x34]
  015e0	e5932000	 ldr         r2, [r3]
  015e4	e59f30f8	 ldr         r3, [pc, #0xF8]
  015e8	e583203c	 str         r2, [r3, #0x3C]

; 945  :         g_kitlEthState.updateFilter = TRUE;

  015ec	e59f20f0	 ldr         r2, [pc, #0xF0]
  015f0	e3a03001	 mov         r3, #1
  015f4	e5823038	 str         r3, [r2, #0x38]

; 946  :         break;

  015f8	ea000025	 b           |$LN13@OALIoCtlVB|
  015fc		 |$LN6@OALIoCtlVB|

; 947  : 
; 948  :     case IOCTL_VBRIDGE_802_3_MULTICAST_LIST:
; 949  :         if (inSize * 6 <= sizeof(g_kitlEthState.deviceMCast)) {

  015fc	e59d2038	 ldr         r2, [sp, #0x38]
  01600	e3a03006	 mov         r3, #6
  01604	e0030392	 mul         r3, r2, r3
  01608	e35300c0	 cmp         r3, #0xC0
  0160c	8a00000d	 bhi         |$LN5@OALIoCtlVB|

; 950  :             memcpy(g_kitlEthState.deviceMCast, pInBuffer, inSize * 6);

  01610	e59d1038	 ldr         r1, [sp, #0x38]
  01614	e3a03006	 mov         r3, #6
  01618	e0020391	 mul         r2, r1, r3
  0161c	e59d1034	 ldr         r1, [sp, #0x34]
  01620	e59f30bc	 ldr         r3, [pc, #0xBC]
  01624	e2830048	 add         r0, r3, #0x48
  01628	eb000000	 bl          memcpy

; 951  :             g_kitlEthState.deviceMCastSize = inSize;

  0162c	e59d2038	 ldr         r2, [sp, #0x38]
  01630	e59f30ac	 ldr         r3, [pc, #0xAC]
  01634	e5832044	 str         r2, [r3, #0x44]

; 952  :             g_kitlEthState.updateMCast = TRUE;

  01638	e59f20a4	 ldr         r2, [pc, #0xA4]
  0163c	e3a03001	 mov         r3, #1
  01640	e5823040	 str         r3, [r2, #0x40]

; 953  :         } else {

  01644	ea000001	 b           |$LN4@OALIoCtlVB|
  01648		 |$LN5@OALIoCtlVB|

; 954  :             rc = FALSE;

  01648	e3a03000	 mov         r3, #0
  0164c	e58d3004	 str         r3, [sp, #4]
  01650		 |$LN4@OALIoCtlVB|

; 955  :         }
; 956  :         break;

  01650	ea00000f	 b           |$LN13@OALIoCtlVB|
  01654		 |$LN3@OALIoCtlVB|

; 957  : 
; 958  :     case IOCTL_VBRIDGE_WILD_CARD:
; 959  :         rc = VBridgeUWildCard(
; 960  :             pInBuffer, inSize, pOutBuffer, outSize, pOutSize
; 961  :         );

  01654	e59d3044	 ldr         r3, [sp, #0x44]
  01658	e58d3000	 str         r3, [sp]
  0165c	e59d3040	 ldr         r3, [sp, #0x40]
  01660	e59d203c	 ldr         r2, [sp, #0x3C]
  01664	e59d1038	 ldr         r1, [sp, #0x38]
  01668	e59d0034	 ldr         r0, [sp, #0x34]
  0166c	eb000000	 bl          VBridgeUWildCard
  01670	e58d0020	 str         r0, [sp, #0x20]
  01674	e59d3020	 ldr         r3, [sp, #0x20]
  01678	e58d3004	 str         r3, [sp, #4]

; 962  :         break;

  0167c	ea000004	 b           |$LN13@OALIoCtlVB|
  01680		 |$LN2@OALIoCtlVB|

; 963  : 
; 964  :     case IOCTL_VBRIDGE_SHARED_ETHERNET:
; 965  :         break;

  01680	ea000003	 b           |$LN13@OALIoCtlVB|
  01684		 |$LN1@OALIoCtlVB|

; 966  : 
; 967  :     default:
; 968  :         NKSetLastError (ERROR_NOT_SUPPORTED);

  01684	e3a00032	 mov         r0, #0x32
  01688	eb000000	 bl          NKSetLastError

; 969  :         rc = FALSE;

  0168c	e3a03000	 mov         r3, #0
  01690	e58d3004	 str         r3, [sp, #4]
  01694		 |$LN13@OALIoCtlVB|

; 970  :     }
; 971  : 
; 972  :     KITL_RETAILMSG(ZONE_SEND|ZONE_RECV, ("-OALIoCtlVBridge(rc = %d)\r\n", rc));

  01694	e59f3044	 ldr         r3, [pc, #0x44]
  01698	e5933440	 ldr         r3, [r3, #0x440]
  0169c	e3130030	 tst         r3, #0x30
  016a0	0a000005	 beq         |$LN21@OALIoCtlVB|
  016a4	e59d1004	 ldr         r1, [sp, #4]
  016a8	e59f002c	 ldr         r0, [pc, #0x2C]
  016ac	eb000000	 bl          KITLOutputDebugString
  016b0	e3a03001	 mov         r3, #1
  016b4	e58d3024	 str         r3, [sp, #0x24]
  016b8	ea000001	 b           |$LN22@OALIoCtlVB|
  016bc		 |$LN21@OALIoCtlVB|
  016bc	e3a03000	 mov         r3, #0
  016c0	e58d3024	 str         r3, [sp, #0x24]
  016c4		 |$LN22@OALIoCtlVB|

; 973  :     return rc;

  016c4	e59d3004	 ldr         r3, [sp, #4]
  016c8	e58d300c	 str         r3, [sp, #0xC]

; 974  : }

  016cc	e59d000c	 ldr         r0, [sp, #0xC]
  016d0	e28dd028	 add         sp, sp, #0x28
  016d4	e89d6000	 ldmia       sp, {sp, lr}
  016d8	e12fff1e	 bx          lr
  016dc		 |$LN41@OALIoCtlVB|
  016dc		 |$LN42@OALIoCtlVB|
  016dc	00000000	 DCD         |??_C@_0BM@FALEIOIG@?9OALIoCtlVBridge?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  016e0		 |$LN43@OALIoCtlVB|
  016e0	00000000	 DCD         |dpCurSettings|
  016e4		 |$LN44@OALIoCtlVB|
  016e4	00000000	 DCD         |g_kitlEthState|
  016e8		 |$LN45@OALIoCtlVB|
  016e8	0101009c	 DCD         0x101009c
  016ec		 |$LN46@OALIoCtlVB|
  016ec	01010084	 DCD         0x1010084
  016f0		 |$LN47@OALIoCtlVB|
  016f0	01010080	 DCD         0x1010080
  016f4		 |$LN48@OALIoCtlVB|
  016f4	01010088	 DCD         0x1010088
  016f8		 |$LN49@OALIoCtlVB|
  016f8	01010068	 DCD         0x1010068
  016fc		 |$LN50@OALIoCtlVB|
  016fc	01010078	 DCD         0x1010078
  01700		 |$LN51@OALIoCtlVB|
  01700	00000000	 DCD         |??_C@_0BP@BIAFCCDM@?$CLOALIoCtlVBridge?$CI0x?$CF08x?0?4?4?4?$CJ?$AN?6?$AA@|
  01704		 |$M44045|

			 ENDP  ; |OALIoCtlVBridge|

	EXPORT	|??_C@_0BL@OCIIDPCB@?9OALKitlEthInit?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CG@IJDAEBCE@WARN?3?5KITL?5will?5run?5in?5polling?5m@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CN@MENCFIED@WARN?3?5KITL?5can?8t?5obtain?5SYSINTR?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BL@EIDMIDBA@KITL?3?5using?5sysintr?50x?$CFx?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CO@BPFMIJNH@WARN?3?5KITL?5can?8t?5obtain?5IRQ?5for?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BP@ILGKAKAA@KITL?3?5?$CK?$CK?$CK?5Device?5Name?5?$CFs?5?$CK?$CK?$CK?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CF@GMMNDEHJ@ERROR?3?5KITL?5call?5to?5pfnInit?5fail@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CO@PDOCGCJP@ERROR?3?5KITL?5call?5to?5pfnInitDmaBu@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CE@LGCGCDLA@ERROR?3?5KITL?5device?5driver?5is?5NUL@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CO@HIMCOMKP@?$CLOALKitlEthInit?$CI?8?$CFS?8?0?5?8?$CFs?8?0?50x?$CF0@| [ DATA ] ; `string'
	EXPORT	|OALKitlEthInit|
	IMPORT	|VBridgeKSetLocalMacAddress|
	IMPORT	|VBridgeInit|
	IMPORT	|KitlSendRawData|
	IMPORT	|OEMIoControl|
	IMPORT	|OALKitlCreateName|
	IMPORT	|g_oalKitlBuffer|

  00060			 AREA	 |.pdata|, PDATA
|$T44093| DCD	|$LN46@OALKitlEth|
	DCD	0x4001d604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BL@OCIIDPCB@?9OALKitlEthInit?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"OALKitlEthInit(rc = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CG@IJDAEBCE@WARN?3?5KITL?5will?5run?5in?5polling?5m@| DCB "WARN: "
	DCB	"KITL will run in polling mode", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CN@MENCFIED@WARN?3?5KITL?5can?8t?5obtain?5SYSINTR?5@| DCB "WARN: "
	DCB	"KITL can't obtain SYSINTR for IRQ %d", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BL@EIDMIDBA@KITL?3?5using?5sysintr?50x?$CFx?$AN?6?$AA@| DCB "KITL"
	DCB	": using sysintr 0x%x", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CO@BPFMIJNH@WARN?3?5KITL?5can?8t?5obtain?5IRQ?5for?5@| DCB "WARN:"
	DCB	" KITL can't obtain IRQ for KITL device", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BP@ILGKAKAA@KITL?3?5?$CK?$CK?$CK?5Device?5Name?5?$CFs?5?$CK?$CK?$CK?$AN?6?$AA@| DCB "K"
	DCB	"ITL: *** Device Name %s ***", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CF@GMMNDEHJ@ERROR?3?5KITL?5call?5to?5pfnInit?5fail@| DCB "ERROR: "
	DCB	"KITL call to pfnInit failed", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CO@PDOCGCJP@ERROR?3?5KITL?5call?5to?5pfnInitDmaBu@| DCB "ERROR: K"
	DCB	"ITL call to pfnInitDmaBuffer failed", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CE@LGCGCDLA@ERROR?3?5KITL?5device?5driver?5is?5NUL@| DCB "ERROR: "
	DCB	"KITL device driver is NULL", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CO@HIMCOMKP@?$CLOALKitlEthInit?$CI?8?$CFS?8?0?5?8?$CFs?8?0?50x?$CF0@| DCB "+"
	DCB	"OALKitlEthInit('%S', '%s', 0x%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  01704			 AREA	 |.text|, CODE, ARM

  01704		 |OALKitlEthInit| PROC

; 988  : ) {

  01704		 |$LN46@OALKitlEth|
  01704	e1a0c00d	 mov         r12, sp
  01708	e92d000f	 stmdb       sp!, {r0 - r3}
  0170c	e92d5000	 stmdb       sp!, {r12, lr}
  01710	e24dd080	 sub         sp, sp, #0x80
  01714		 |$M44090|

; 989  :     BOOL rc = FALSE;

  01714	e3a03000	 mov         r3, #0
  01718	e58d3008	 str         r3, [sp, #8]

; 990  :     OAL_KITL_ETH_DRIVER *pDriver;
; 991  :     UINT32 irq, sysIntr;
; 992  : 
; 993  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 994  :         "+OALKitlEthInit('%S', '%s', 0x%08x, 0x%08x)\r\n",
; 995  :         deviceId, pDevice->name, pArgs, pKitl
; 996  :     ));

  0171c	e59f36dc	 ldr         r3, [pc, #0x6DC]
  01720	e5933440	 ldr         r3, [r3, #0x440]
  01724	e3130a01	 tst         r3, #1, 20
  01728	0a00000a	 beq         |$LN20@OALKitlEth|
  0172c	e59d3094	 ldr         r3, [sp, #0x94]
  01730	e58d3000	 str         r3, [sp]
  01734	e59d3090	 ldr         r3, [sp, #0x90]
  01738	e59d208c	 ldr         r2, [sp, #0x8C]
  0173c	e5922000	 ldr         r2, [r2]
  01740	e59d1088	 ldr         r1, [sp, #0x88]
  01744	e59f070c	 ldr         r0, [pc, #0x70C]
  01748	eb000000	 bl          KITLOutputDebugString
  0174c	e3a03001	 mov         r3, #1
  01750	e58d303c	 str         r3, [sp, #0x3C]
  01754	ea000001	 b           |$LN21@OALKitlEth|
  01758		 |$LN20@OALKitlEth|
  01758	e3a03000	 mov         r3, #0
  0175c	e58d303c	 str         r3, [sp, #0x3C]
  01760		 |$LN21@OALKitlEth|

; 997  : 
; 998  :     // Cast driver config parameter
; 999  :     pDriver = (OAL_KITL_ETH_DRIVER*)pDevice->pDriver;

  01760	e59d308c	 ldr         r3, [sp, #0x8C]
  01764	e2833014	 add         r3, r3, #0x14
  01768	e5933000	 ldr         r3, [r3]
  0176c	e58d3014	 str         r3, [sp, #0x14]

; 1000 :     if (pDriver == NULL) {

  01770	e59d3014	 ldr         r3, [sp, #0x14]
  01774	e3530000	 cmp         r3, #0
  01778	1a00000b	 bne         |$LN17@OALKitlEth|

; 1001 :         KITL_RETAILMSG(ZONE_ERROR, ("ERROR: KITL device driver is NULL\r\n"));

  0177c	e59f367c	 ldr         r3, [pc, #0x67C]
  01780	e5933440	 ldr         r3, [r3, #0x440]
  01784	e3130902	 tst         r3, #2, 18
  01788	0a000004	 beq         |$LN22@OALKitlEth|
  0178c	e59f06c0	 ldr         r0, [pc, #0x6C0]
  01790	eb000000	 bl          KITLOutputDebugString
  01794	e3a03001	 mov         r3, #1
  01798	e58d3040	 str         r3, [sp, #0x40]
  0179c	ea000001	 b           |$LN23@OALKitlEth|
  017a0		 |$LN22@OALKitlEth|
  017a0	e3a03000	 mov         r3, #0
  017a4	e58d3040	 str         r3, [sp, #0x40]
  017a8		 |$LN23@OALKitlEth|

; 1002 :         goto cleanUp;

  017a8	ea000181	 b           |$cleanUp$43827|
  017ac		 |$LN17@OALKitlEth|

; 1003 :     }
; 1004 : 
; 1005 :     // Call InitDmaBuffer if there is any
; 1006 :     if (pDriver->pfnInitDmaBuffer != NULL) {

  017ac	e59d3014	 ldr         r3, [sp, #0x14]
  017b0	e2833004	 add         r3, r3, #4
  017b4	e5933000	 ldr         r3, [r3]
  017b8	e3530000	 cmp         r3, #0
  017bc	0a000016	 beq         |$LN16@OALKitlEth|

; 1007 :         if (!pDriver->pfnInitDmaBuffer(
; 1008 :             (DWORD)g_oalKitlBuffer, sizeof(g_oalKitlBuffer)
; 1009 :         )) {

  017c0	e3a01801	 mov         r1, #1, 16
  017c4	e59f0684	 ldr         r0, [pc, #0x684]
  017c8	e59d3014	 ldr         r3, [sp, #0x14]
  017cc	e2833004	 add         r3, r3, #4
  017d0	e5933000	 ldr         r3, [r3]
  017d4	e1a0e00f	 mov         lr, pc
  017d8	e12fff13	 bx          r3
  017dc	e58d0044	 str         r0, [sp, #0x44]
  017e0	e59d3044	 ldr         r3, [sp, #0x44]
  017e4	e3530000	 cmp         r3, #0
  017e8	1a00000b	 bne         |$LN15@OALKitlEth|

; 1010 :                 KITL_RETAILMSG(ZONE_ERROR, (
; 1011 :                 "ERROR: KITL call to pfnInitDmaBuffer failed\r\n"
; 1012 :             ));

  017ec	e59f360c	 ldr         r3, [pc, #0x60C]
  017f0	e5933440	 ldr         r3, [r3, #0x440]
  017f4	e3130902	 tst         r3, #2, 18
  017f8	0a000004	 beq         |$LN24@OALKitlEth|
  017fc	e59f0648	 ldr         r0, [pc, #0x648]
  01800	eb000000	 bl          KITLOutputDebugString
  01804	e3a03001	 mov         r3, #1
  01808	e58d3048	 str         r3, [sp, #0x48]
  0180c	ea000001	 b           |$LN25@OALKitlEth|
  01810		 |$LN24@OALKitlEth|
  01810	e3a03000	 mov         r3, #0
  01814	e58d3048	 str         r3, [sp, #0x48]
  01818		 |$LN25@OALKitlEth|

; 1013 :             goto cleanUp;

  01818	ea000165	 b           |$cleanUp$43827|
  0181c		 |$LN15@OALKitlEth|
  0181c		 |$LN16@OALKitlEth|

; 1014 :         }
; 1015 :     }
; 1016 : 
; 1017 :     // Call pfnInit
; 1018 :     if (!pDriver->pfnInit(
; 1019 :         (UCHAR*)pArgs->devLoc.PhysicalLoc, pArgs->devLoc.LogicalLoc, pArgs->mac
; 1020 :     )) {

  0181c	e59d3090	 ldr         r3, [sp, #0x90]
  01820	e2832018	 add         r2, r3, #0x18
  01824	e59d3090	 ldr         r3, [sp, #0x90]
  01828	e283300c	 add         r3, r3, #0xC
  0182c	e5931000	 ldr         r1, [r3]
  01830	e59d3090	 ldr         r3, [sp, #0x90]
  01834	e2833010	 add         r3, r3, #0x10
  01838	e5930000	 ldr         r0, [r3]
  0183c	e59d3014	 ldr         r3, [sp, #0x14]
  01840	e5933000	 ldr         r3, [r3]
  01844	e1a0e00f	 mov         lr, pc
  01848	e12fff13	 bx          r3
  0184c	e58d004c	 str         r0, [sp, #0x4C]
  01850	e59d304c	 ldr         r3, [sp, #0x4C]
  01854	e3530000	 cmp         r3, #0
  01858	1a00000b	 bne         |$LN14@OALKitlEth|

; 1021 :         KITL_RETAILMSG(ZONE_ERROR, ("ERROR: KITL call to pfnInit failed\r\n"));

  0185c	e59f359c	 ldr         r3, [pc, #0x59C]
  01860	e5933440	 ldr         r3, [r3, #0x440]
  01864	e3130902	 tst         r3, #2, 18
  01868	0a000004	 beq         |$LN26@OALKitlEth|
  0186c	e59f05d4	 ldr         r0, [pc, #0x5D4]
  01870	eb000000	 bl          KITLOutputDebugString
  01874	e3a03001	 mov         r3, #1
  01878	e58d3050	 str         r3, [sp, #0x50]
  0187c	ea000001	 b           |$LN27@OALKitlEth|
  01880		 |$LN26@OALKitlEth|
  01880	e3a03000	 mov         r3, #0
  01884	e58d3050	 str         r3, [sp, #0x50]
  01888		 |$LN27@OALKitlEth|

; 1022 :         goto cleanUp;

  01888	ea000149	 b           |$cleanUp$43827|
  0188c		 |$LN14@OALKitlEth|

; 1023 :     }
; 1024 : 
; 1025 :     // Extend name if flag is set
; 1026 :     if ((pArgs->flags & OAL_KITL_FLAGS_EXTNAME) != 0) {

  0188c	e59d3090	 ldr         r3, [sp, #0x90]
  01890	e5933000	 ldr         r3, [r3]
  01894	e3130020	 tst         r3, #0x20
  01898	0a000004	 beq         |$LN13@OALKitlEth|

; 1027 :         OALKitlCreateName(deviceId, pArgs->mac, deviceId);

  0189c	e59d2088	 ldr         r2, [sp, #0x88]
  018a0	e59d3090	 ldr         r3, [sp, #0x90]
  018a4	e2831018	 add         r1, r3, #0x18
  018a8	e59d0088	 ldr         r0, [sp, #0x88]
  018ac	eb000000	 bl          OALKitlCreateName
  018b0		 |$LN13@OALKitlEth|

; 1028 :     }
; 1029 : 
; 1030 :     // Now we know final name, print it
; 1031 :     KITL_RETAILMSG(ZONE_INIT, ("KITL: *** Device Name %s ***\r\n", deviceId));

  018b0	e59f3548	 ldr         r3, [pc, #0x548]
  018b4	e5933440	 ldr         r3, [r3, #0x440]
  018b8	e3130002	 tst         r3, #2
  018bc	0a000005	 beq         |$LN28@OALKitlEth|
  018c0	e59d1088	 ldr         r1, [sp, #0x88]
  018c4	e59f0578	 ldr         r0, [pc, #0x578]
  018c8	eb000000	 bl          KITLOutputDebugString
  018cc	e3a03001	 mov         r3, #1
  018d0	e58d3054	 str         r3, [sp, #0x54]
  018d4	ea000001	 b           |$LN29@OALKitlEth|
  018d8		 |$LN28@OALKitlEth|
  018d8	e3a03000	 mov         r3, #0
  018dc	e58d3054	 str         r3, [sp, #0x54]
  018e0		 |$LN29@OALKitlEth|

; 1032 : 
; 1033 :     // Map and enable interrupt
; 1034 :     if ((pArgs->flags & OAL_KITL_FLAGS_POLL) != 0) {

  018e0	e59d3090	 ldr         r3, [sp, #0x90]
  018e4	e5933000	 ldr         r3, [r3]
  018e8	e3130010	 tst         r3, #0x10
  018ec	0a000002	 beq         |$LN12@OALKitlEth|

; 1035 :         sysIntr = KITL_SYSINTR_NOINTR;

  018f0	e3e03000	 mvn         r3, #0
  018f4	e58d300c	 str         r3, [sp, #0xC]

; 1036 :     } else {

  018f8	ea000065	 b           |$LN11@OALKitlEth|
  018fc		 |$LN12@OALKitlEth|

; 1037 :         // Get IRQ, when interface is undefined use Pin as IRQ
; 1038 :         if (pArgs->devLoc.IfcType == InterfaceTypeUndefined) {

  018fc	e59d3090	 ldr         r3, [sp, #0x90]
  01900	e2833004	 add         r3, r3, #4
  01904	e5933000	 ldr         r3, [r3]
  01908	e3730001	 cmn         r3, #1
  0190c	1a000004	 bne         |$LN10@OALKitlEth|

; 1039 :             irq = pArgs->devLoc.Pin;

  01910	e59d3090	 ldr         r3, [sp, #0x90]
  01914	e2833014	 add         r3, r3, #0x14
  01918	e5933000	 ldr         r3, [r3]
  0191c	e58d3010	 str         r3, [sp, #0x10]

; 1040 :         } else {

  01920	ea00001a	 b           |$LN9@OALKitlEth|
  01924		 |$LN10@OALKitlEth|

; 1041 :             if (!OEMIoControl(
; 1042 :                 IOCTL_HAL_REQUEST_IRQ, &pArgs->devLoc, sizeof(pArgs->devLoc),
; 1043 :                 &irq, sizeof(irq), NULL
; 1044 :             )) {                

  01924	e3a03000	 mov         r3, #0
  01928	e58d3004	 str         r3, [sp, #4]
  0192c	e3a03004	 mov         r3, #4
  01930	e58d3000	 str         r3, [sp]
  01934	e28d3010	 add         r3, sp, #0x10
  01938	e3a02014	 mov         r2, #0x14
  0193c	e59d1090	 ldr         r1, [sp, #0x90]
  01940	e2811004	 add         r1, r1, #4
  01944	e59f04f4	 ldr         r0, [pc, #0x4F4]
  01948	eb000000	 bl          OEMIoControl
  0194c	e58d0058	 str         r0, [sp, #0x58]
  01950	e59d3058	 ldr         r3, [sp, #0x58]
  01954	e3530000	 cmp         r3, #0
  01958	1a00000c	 bne         |$LN8@OALKitlEth|

; 1045 :                     KITL_RETAILMSG(ZONE_WARNING, (
; 1046 :                     "WARN: KITL can't obtain IRQ for KITL device\r\n"
; 1047 :                 ));

  0195c	e59f349c	 ldr         r3, [pc, #0x49C]
  01960	e5933440	 ldr         r3, [r3, #0x440]
  01964	e3130001	 tst         r3, #1
  01968	0a000004	 beq         |$LN30@OALKitlEth|
  0196c	e59f04c8	 ldr         r0, [pc, #0x4C8]
  01970	eb000000	 bl          KITLOutputDebugString
  01974	e3a03001	 mov         r3, #1
  01978	e58d305c	 str         r3, [sp, #0x5C]
  0197c	ea000001	 b           |$LN31@OALKitlEth|
  01980		 |$LN30@OALKitlEth|
  01980	e3a03000	 mov         r3, #0
  01984	e58d305c	 str         r3, [sp, #0x5C]
  01988		 |$LN31@OALKitlEth|

; 1048 :                 irq = OAL_INTR_IRQ_UNDEFINED;

  01988	e3e03000	 mvn         r3, #0
  0198c	e58d3010	 str         r3, [sp, #0x10]
  01990		 |$LN8@OALKitlEth|
  01990		 |$LN9@OALKitlEth|

; 1049 :             }
; 1050 :         }
; 1051 :         // Get SYSINTR for IRQ
; 1052 :         if (irq != OAL_INTR_IRQ_UNDEFINED) {

  01990	e59d3010	 ldr         r3, [sp, #0x10]
  01994	e3730001	 cmn         r3, #1
  01998	0a00003b	 beq         |$LN7@OALKitlEth|

; 1053 :             UINT32 aIrqs[3];
; 1054 : 
; 1055 :             aIrqs[0] = -1;

  0199c	e3e03000	 mvn         r3, #0
  019a0	e58d3018	 str         r3, [sp, #0x18]

; 1056 :             aIrqs[1] = (pArgs->devLoc.IfcType == InterfaceTypeUndefined)
; 1057 :                         ? OAL_INTR_TRANSLATE
; 1058 :                         : OAL_INTR_FORCE_STATIC;

  019a4	e59d3090	 ldr         r3, [sp, #0x90]
  019a8	e2833004	 add         r3, r3, #4
  019ac	e5933000	 ldr         r3, [r3]
  019b0	e3730001	 cmn         r3, #1
  019b4	1a000002	 bne         |$LN32@OALKitlEth|
  019b8	e3a03008	 mov         r3, #8
  019bc	e58d3060	 str         r3, [sp, #0x60]
  019c0	ea000001	 b           |$LN33@OALKitlEth|
  019c4		 |$LN32@OALKitlEth|
  019c4	e3a03004	 mov         r3, #4
  019c8	e58d3060	 str         r3, [sp, #0x60]
  019cc		 |$LN33@OALKitlEth|
  019cc	e59d3060	 ldr         r3, [sp, #0x60]
  019d0	e58d301c	 str         r3, [sp, #0x1C]

; 1059 :             aIrqs[2] = irq;

  019d4	e59d3010	 ldr         r3, [sp, #0x10]
  019d8	e58d3020	 str         r3, [sp, #0x20]

; 1060 :             if (
; 1061 :                 OEMIoControl(
; 1062 :                     IOCTL_HAL_REQUEST_SYSINTR, aIrqs, sizeof(aIrqs), &sysIntr,
; 1063 :                     sizeof(sysIntr), NULL
; 1064 :                 ) && sysIntr != SYSINTR_UNDEFINED
; 1065 :             ) {                

  019dc	e3a03000	 mov         r3, #0
  019e0	e58d3004	 str         r3, [sp, #4]
  019e4	e3a03004	 mov         r3, #4
  019e8	e58d3000	 str         r3, [sp]
  019ec	e28d300c	 add         r3, sp, #0xC
  019f0	e3a0200c	 mov         r2, #0xC
  019f4	e28d1018	 add         r1, sp, #0x18
  019f8	e59f0438	 ldr         r0, [pc, #0x438]
  019fc	eb000000	 bl          OEMIoControl
  01a00	e58d0064	 str         r0, [sp, #0x64]
  01a04	e59d3064	 ldr         r3, [sp, #0x64]
  01a08	e3530000	 cmp         r3, #0
  01a0c	0a00000f	 beq         |$LN6@OALKitlEth|
  01a10	e59d300c	 ldr         r3, [sp, #0xC]
  01a14	e3730001	 cmn         r3, #1
  01a18	0a00000c	 beq         |$LN6@OALKitlEth|

; 1066 :                 KITL_RETAILMSG(ZONE_INIT, ("KITL: using sysintr 0x%x\r\n", sysIntr));

  01a1c	e59f33dc	 ldr         r3, [pc, #0x3DC]
  01a20	e5933440	 ldr         r3, [r3, #0x440]
  01a24	e3130002	 tst         r3, #2
  01a28	0a000005	 beq         |$LN34@OALKitlEth|
  01a2c	e59d100c	 ldr         r1, [sp, #0xC]
  01a30	e59f03fc	 ldr         r0, [pc, #0x3FC]
  01a34	eb000000	 bl          KITLOutputDebugString
  01a38	e3a03001	 mov         r3, #1
  01a3c	e58d3068	 str         r3, [sp, #0x68]
  01a40	ea000001	 b           |$LN35@OALKitlEth|
  01a44		 |$LN34@OALKitlEth|
  01a44	e3a03000	 mov         r3, #0
  01a48	e58d3068	 str         r3, [sp, #0x68]
  01a4c		 |$LN35@OALKitlEth|

; 1067 :             } else {

  01a4c	ea00000d	 b           |$LN5@OALKitlEth|
  01a50		 |$LN6@OALKitlEth|

; 1068 :                 KITL_RETAILMSG(ZONE_WARNING, (
; 1069 :                     "WARN: KITL can't obtain SYSINTR for IRQ %d\r\n", irq
; 1070 :                 ));

  01a50	e59f33a8	 ldr         r3, [pc, #0x3A8]
  01a54	e5933440	 ldr         r3, [r3, #0x440]
  01a58	e3130001	 tst         r3, #1
  01a5c	0a000005	 beq         |$LN36@OALKitlEth|
  01a60	e59d1010	 ldr         r1, [sp, #0x10]
  01a64	e59f03c4	 ldr         r0, [pc, #0x3C4]
  01a68	eb000000	 bl          KITLOutputDebugString
  01a6c	e3a03001	 mov         r3, #1
  01a70	e58d306c	 str         r3, [sp, #0x6C]
  01a74	ea000001	 b           |$LN37@OALKitlEth|
  01a78		 |$LN36@OALKitlEth|
  01a78	e3a03000	 mov         r3, #0
  01a7c	e58d306c	 str         r3, [sp, #0x6C]
  01a80		 |$LN37@OALKitlEth|

; 1071 :                 sysIntr = KITL_SYSINTR_NOINTR;

  01a80	e3e03000	 mvn         r3, #0
  01a84	e58d300c	 str         r3, [sp, #0xC]
  01a88		 |$LN5@OALKitlEth|

; 1072 :             }
; 1073 :         } else {

  01a88	ea000001	 b           |$LN4@OALKitlEth|
  01a8c		 |$LN7@OALKitlEth|

; 1074 :             sysIntr = KITL_SYSINTR_NOINTR;

  01a8c	e3e03000	 mvn         r3, #0
  01a90	e58d300c	 str         r3, [sp, #0xC]
  01a94		 |$LN4@OALKitlEth|
  01a94		 |$LN11@OALKitlEth|

; 1075 :         }
; 1076 :     }
; 1077 : 
; 1078 : 
; 1079 :     if (sysIntr == KITL_SYSINTR_NOINTR) {

  01a94	e59d300c	 ldr         r3, [sp, #0xC]
  01a98	e3730001	 cmn         r3, #1
  01a9c	1a00000a	 bne         |$LN3@OALKitlEth|

; 1080 :         KITL_RETAILMSG(ZONE_WARNING, (
; 1081 :             "WARN: KITL will run in polling mode\r\n"
; 1082 :         ));

  01aa0	e59f3358	 ldr         r3, [pc, #0x358]
  01aa4	e5933440	 ldr         r3, [r3, #0x440]
  01aa8	e3130001	 tst         r3, #1
  01aac	0a000004	 beq         |$LN38@OALKitlEth|
  01ab0	e59f0374	 ldr         r0, [pc, #0x374]
  01ab4	eb000000	 bl          KITLOutputDebugString
  01ab8	e3a03001	 mov         r3, #1
  01abc	e58d3070	 str         r3, [sp, #0x70]
  01ac0	ea000001	 b           |$LN39@OALKitlEth|
  01ac4		 |$LN38@OALKitlEth|
  01ac4	e3a03000	 mov         r3, #0
  01ac8	e58d3070	 str         r3, [sp, #0x70]
  01acc		 |$LN39@OALKitlEth|
  01acc		 |$LN3@OALKitlEth|

; 1083 :     }
; 1084 : 
; 1085 :     //-----------------------------------------------------------------------
; 1086 :     // Initalize KITL transport structure
; 1087 :     //-----------------------------------------------------------------------
; 1088 : 
; 1089 :     memcpy(pKitl->szName, deviceId, sizeof(pKitl->szName));

  01acc	e3a02010	 mov         r2, #0x10
  01ad0	e59d1088	 ldr         r1, [sp, #0x88]
  01ad4	e59d3094	 ldr         r3, [sp, #0x94]
  01ad8	e2830004	 add         r0, r3, #4
  01adc	eb000000	 bl          memcpy

; 1090 :     pKitl->Interrupt     = (UCHAR)sysIntr;

  01ae0	e59d300c	 ldr         r3, [sp, #0xC]
  01ae4	e20320ff	 and         r2, r3, #0xFF
  01ae8	e59d3094	 ldr         r3, [sp, #0x94]
  01aec	e2833014	 add         r3, r3, #0x14
  01af0	e5c32000	 strb        r2, [r3]

; 1091 :     pKitl->WindowSize    = OAL_KITL_WINDOW_SIZE;

  01af4	e59d3094	 ldr         r3, [sp, #0x94]
  01af8	e2832015	 add         r2, r3, #0x15
  01afc	e3a03008	 mov         r3, #8
  01b00	e5c23000	 strb        r3, [r2]

; 1092 :     pKitl->FrmHdrSize    = KitlEthGetFrameHdrSize();

  01b04	eb000000	 bl          KitlEthGetFrameHdrSize
  01b08	e5cd0074	 strb        r0, [sp, #0x74]
  01b0c	e59d3094	 ldr         r3, [sp, #0x94]
  01b10	e2832016	 add         r2, r3, #0x16
  01b14	e5dd3074	 ldrb        r3, [sp, #0x74]
  01b18	e5c23000	 strb        r3, [r2]

; 1093 :     pKitl->dwPhysBuffer  = 0;

  01b1c	e59d3094	 ldr         r3, [sp, #0x94]
  01b20	e2832018	 add         r2, r3, #0x18
  01b24	e3a03000	 mov         r3, #0
  01b28	e5823000	 str         r3, [r2]

; 1094 :     pKitl->dwPhysBufLen  = 0;

  01b2c	e59d3094	 ldr         r3, [sp, #0x94]
  01b30	e283201c	 add         r2, r3, #0x1C
  01b34	e3a03000	 mov         r3, #0
  01b38	e5823000	 str         r3, [r2]

; 1095 :     pKitl->pfnEncode     = KitlEthEncode;

  01b3c	e59d3094	 ldr         r3, [sp, #0x94]
  01b40	e2832020	 add         r2, r3, #0x20
  01b44	e59f32dc	 ldr         r3, [pc, #0x2DC]
  01b48	e5823000	 str         r3, [r2]

; 1096 :     pKitl->pfnDecode     = KitlEthDecode;

  01b4c	e59d3094	 ldr         r3, [sp, #0x94]
  01b50	e2832024	 add         r2, r3, #0x24
  01b54	e59f32c8	 ldr         r3, [pc, #0x2C8]
  01b58	e5823000	 str         r3, [r2]

; 1097 :     pKitl->pfnSend       = KitlEthSend;

  01b5c	e59d3094	 ldr         r3, [sp, #0x94]
  01b60	e2832028	 add         r2, r3, #0x28
  01b64	e59f32b4	 ldr         r3, [pc, #0x2B4]
  01b68	e5823000	 str         r3, [r2]

; 1098 :     pKitl->pfnRecv       = KitlEthRecv;

  01b6c	e59d3094	 ldr         r3, [sp, #0x94]
  01b70	e283202c	 add         r2, r3, #0x2C
  01b74	e59f32a0	 ldr         r3, [pc, #0x2A0]
  01b78	e5823000	 str         r3, [r2]

; 1099 :     pKitl->pfnEnableInt  = KitlEthEnableInt;

  01b7c	e59d3094	 ldr         r3, [sp, #0x94]
  01b80	e2832030	 add         r2, r3, #0x30
  01b84	e59f328c	 ldr         r3, [pc, #0x28C]
  01b88	e5823000	 str         r3, [r2]

; 1100 :     pKitl->pfnGetDevCfg  = KitlEthGetDevCfg;

  01b8c	e59d3094	 ldr         r3, [sp, #0x94]
  01b90	e2832034	 add         r2, r3, #0x34
  01b94	e59f3278	 ldr         r3, [pc, #0x278]
  01b98	e5823000	 str         r3, [r2]

; 1101 :     pKitl->pfnSetHostCfg = KitlEthSetHostCfg;

  01b9c	e59d3094	 ldr         r3, [sp, #0x94]
  01ba0	e2832038	 add         r2, r3, #0x38
  01ba4	e59f3264	 ldr         r3, [pc, #0x264]
  01ba8	e5823000	 str         r3, [r2]

; 1102 : 
; 1103 :     //-----------------------------------------------------------------------
; 1104 :     // Initalize KITL IP4 state structure
; 1105 :     //-----------------------------------------------------------------------
; 1106 : 
; 1107 :     g_kitlEthState.pDriver = pDriver;

  01bac	e59d2014	 ldr         r2, [sp, #0x14]
  01bb0	e59f324c	 ldr         r3, [pc, #0x24C]
  01bb4	e5832000	 str         r2, [r3]

; 1108 :     g_kitlEthState.flags = pArgs->flags;

  01bb8	e59d3090	 ldr         r3, [sp, #0x90]
  01bbc	e5932000	 ldr         r2, [r3]
  01bc0	e59f323c	 ldr         r3, [pc, #0x23C]
  01bc4	e5832004	 str         r2, [r3, #4]

; 1109 :     g_kitlEthState.deviceMAC[0] = (UINT8)pArgs->mac[0];

  01bc8	e59d3090	 ldr         r3, [sp, #0x90]
  01bcc	e2833018	 add         r3, r3, #0x18
  01bd0	e1d330b0	 ldrh        r3, [r3]
  01bd4	e20320ff	 and         r2, r3, #0xFF
  01bd8	e59f3224	 ldr         r3, [pc, #0x224]
  01bdc	e5c32008	 strb        r2, [r3, #8]

; 1110 :     g_kitlEthState.deviceMAC[1] = (UINT8)(pArgs->mac[0] >> 8);

  01be0	e59d3090	 ldr         r3, [sp, #0x90]
  01be4	e2833018	 add         r3, r3, #0x18
  01be8	e1d330b0	 ldrh        r3, [r3]
  01bec	e1a03443	 mov         r3, r3, asr #8
  01bf0	e20320ff	 and         r2, r3, #0xFF
  01bf4	e59f3208	 ldr         r3, [pc, #0x208]
  01bf8	e5c32009	 strb        r2, [r3, #9]

; 1111 :     g_kitlEthState.deviceMAC[2] = (UINT8)pArgs->mac[1];

  01bfc	e59d3090	 ldr         r3, [sp, #0x90]
  01c00	e283301a	 add         r3, r3, #0x1A
  01c04	e1d330b0	 ldrh        r3, [r3]
  01c08	e20320ff	 and         r2, r3, #0xFF
  01c0c	e59f31f0	 ldr         r3, [pc, #0x1F0]
  01c10	e5c3200a	 strb        r2, [r3, #0xA]

; 1112 :     g_kitlEthState.deviceMAC[3] = (UINT8)(pArgs->mac[1] >> 8);

  01c14	e59d3090	 ldr         r3, [sp, #0x90]
  01c18	e283301a	 add         r3, r3, #0x1A
  01c1c	e1d330b0	 ldrh        r3, [r3]
  01c20	e1a03443	 mov         r3, r3, asr #8
  01c24	e20320ff	 and         r2, r3, #0xFF
  01c28	e59f31d4	 ldr         r3, [pc, #0x1D4]
  01c2c	e5c3200b	 strb        r2, [r3, #0xB]

; 1113 :     g_kitlEthState.deviceMAC[4] = (UINT8)pArgs->mac[2];

  01c30	e59d3090	 ldr         r3, [sp, #0x90]
  01c34	e283301c	 add         r3, r3, #0x1C
  01c38	e1d330b0	 ldrh        r3, [r3]
  01c3c	e20320ff	 and         r2, r3, #0xFF
  01c40	e59f31bc	 ldr         r3, [pc, #0x1BC]
  01c44	e5c3200c	 strb        r2, [r3, #0xC]

; 1114 :     g_kitlEthState.deviceMAC[5] = (UINT8)(pArgs->mac[2] >> 8);

  01c48	e59d3090	 ldr         r3, [sp, #0x90]
  01c4c	e283301c	 add         r3, r3, #0x1C
  01c50	e1d330b0	 ldrh        r3, [r3]
  01c54	e1a03443	 mov         r3, r3, asr #8
  01c58	e20320ff	 and         r2, r3, #0xFF
  01c5c	e59f31a0	 ldr         r3, [pc, #0x1A0]
  01c60	e5c3200d	 strb        r2, [r3, #0xD]

; 1115 :     g_kitlEthState.deviceIP = pArgs->ipAddress;

  01c64	e59d3090	 ldr         r3, [sp, #0x90]
  01c68	e2833020	 add         r3, r3, #0x20
  01c6c	e5932000	 ldr         r2, [r3]
  01c70	e59f318c	 ldr         r3, [pc, #0x18C]
  01c74	e5832010	 str         r2, [r3, #0x10]

; 1116 : 
; 1117 :     g_kitlEthState.kitlServerMAC[0] = 0xFF;

  01c78	e59f2184	 ldr         r2, [pc, #0x184]
  01c7c	e3a030ff	 mov         r3, #0xFF
  01c80	e5c23014	 strb        r3, [r2, #0x14]

; 1118 :     g_kitlEthState.kitlServerMAC[1] = 0xFF;

  01c84	e59f2178	 ldr         r2, [pc, #0x178]
  01c88	e3a030ff	 mov         r3, #0xFF
  01c8c	e5c23015	 strb        r3, [r2, #0x15]

; 1119 :     g_kitlEthState.kitlServerMAC[2] = 0xFF;

  01c90	e59f216c	 ldr         r2, [pc, #0x16C]
  01c94	e3a030ff	 mov         r3, #0xFF
  01c98	e5c23016	 strb        r3, [r2, #0x16]

; 1120 :     g_kitlEthState.kitlServerMAC[3] = 0xFF;

  01c9c	e59f2160	 ldr         r2, [pc, #0x160]
  01ca0	e3a030ff	 mov         r3, #0xFF
  01ca4	e5c23017	 strb        r3, [r2, #0x17]

; 1121 :     g_kitlEthState.kitlServerMAC[4] = 0xFF;

  01ca8	e59f2154	 ldr         r2, [pc, #0x154]
  01cac	e3a030ff	 mov         r3, #0xFF
  01cb0	e5c23018	 strb        r3, [r2, #0x18]

; 1122 :     g_kitlEthState.kitlServerMAC[5] = 0xFF;

  01cb4	e59f2148	 ldr         r2, [pc, #0x148]
  01cb8	e3a030ff	 mov         r3, #0xFF
  01cbc	e5c23019	 strb        r3, [r2, #0x19]

; 1123 :     g_kitlEthState.kitlServerIP = 0xFFFFFFFF;

  01cc0	e59f213c	 ldr         r2, [pc, #0x13C]
  01cc4	e3e03000	 mvn         r3, #0
  01cc8	e582301c	 str         r3, [r2, #0x1C]

; 1124 :     g_kitlEthState.kitlServerPort = htons(KITL_SERVER_PORT);

  01ccc	e59f2130	 ldr         r2, [pc, #0x130]
  01cd0	e3a03cd5	 mov         r3, #0xD5, 24
  01cd4	e3833003	 orr         r3, r3, #3
  01cd8	e1c232b0	 strh        r3, [r2, #0x20]

; 1125 : 
; 1126 :     g_kitlEthState.dhcpXId = pArgs->mac[2] | 0x17016414;

  01cdc	e59d3090	 ldr         r3, [sp, #0x90]
  01ce0	e283301c	 add         r3, r3, #0x1C
  01ce4	e1d330b0	 ldrh        r3, [r3]
  01ce8	e1a02003	 mov         r2, r3
  01cec	e59f3118	 ldr         r3, [pc, #0x118]
  01cf0	e1822003	 orr         r2, r2, r3
  01cf4	e59f3108	 ldr         r3, [pc, #0x108]
  01cf8	e583202c	 str         r2, [r3, #0x2C]

; 1127 :     g_kitlEthState.dhcpState = DHCP_BOUND;

  01cfc	e59f2100	 ldr         r2, [pc, #0x100]
  01d00	e3a03000	 mov         r3, #0
  01d04	e5823024	 str         r3, [r2, #0x24]

; 1128 : 
; 1129 :     // Get or renew DHCP address
; 1130 :     if ((pArgs->flags & OAL_KITL_FLAGS_DHCP) != 0) {

  01d08	e59d3090	 ldr         r3, [sp, #0x90]
  01d0c	e5933000	 ldr         r3, [r3]
  01d10	e3130004	 tst         r3, #4
  01d14	0a00000d	 beq         |$LN2@OALKitlEth|

; 1131 :         // KITL isn't running let use direct functions for send/receive
; 1132 :         g_kitlEthState.pfnSend = pKitl->pfnSend;

  01d18	e59d3094	 ldr         r3, [sp, #0x94]
  01d1c	e2833028	 add         r3, r3, #0x28
  01d20	e5932000	 ldr         r2, [r3]
  01d24	e59f30d8	 ldr         r3, [pc, #0xD8]
  01d28	e5832030	 str         r2, [r3, #0x30]

; 1133 :         g_kitlEthState.pfnRecv = pKitl->pfnRecv;

  01d2c	e59d3094	 ldr         r3, [sp, #0x94]
  01d30	e283302c	 add         r3, r3, #0x2C
  01d34	e5932000	 ldr         r2, [r3]
  01d38	e59f30c4	 ldr         r3, [pc, #0xC4]
  01d3c	e5832034	 str         r2, [r3, #0x34]

; 1134 :         // Get or renew address from DHCP server
; 1135 :         GetAddressDHCP(pArgs->ipAddress);

  01d40	e59d3090	 ldr         r3, [sp, #0x90]
  01d44	e2833020	 add         r3, r3, #0x20
  01d48	e5930000	 ldr         r0, [r3]
  01d4c	eb000000	 bl          GetAddressDHCP
  01d50		 |$LN2@OALKitlEth|

; 1136 :     }
; 1137 : 
; 1138 :     // When KITL is running we should call sync function for send
; 1139 :     g_kitlEthState.pfnSend = KitlSendRawData;

  01d50	e59f20b0	 ldr         r2, [pc, #0xB0]
  01d54	e59f30a8	 ldr         r3, [pc, #0xA8]
  01d58	e5832030	 str         r2, [r3, #0x30]

; 1140 : 
; 1141 :     // There should not be direct receive
; 1142 :     g_kitlEthState.pfnRecv = NULL;

  01d5c	e59f20a0	 ldr         r2, [pc, #0xA0]
  01d60	e3a03000	 mov         r3, #0
  01d64	e5823034	 str         r3, [r2, #0x34]

; 1143 : 
; 1144 : #ifdef KITL_ETHER     
; 1145 :     // Activate VMINI bridge...
; 1146 :     if ((pArgs->flags & OAL_KITL_FLAGS_VMINI) != 0) {

  01d68	e59d3090	 ldr         r3, [sp, #0x90]
  01d6c	e5933000	 ldr         r3, [r3]
  01d70	e3130008	 tst         r3, #8
  01d74	0a000003	 beq         |$LN1@OALKitlEth|

; 1147 :         VBridgeInit();

  01d78	eb000000	 bl          VBridgeInit

; 1148 :         VBridgeKSetLocalMacAddress((char*)pArgs->mac);

  01d7c	e59d3090	 ldr         r3, [sp, #0x90]
  01d80	e2830018	 add         r0, r3, #0x18
  01d84	eb000000	 bl          VBridgeKSetLocalMacAddress
  01d88		 |$LN1@OALKitlEth|

; 1149 :     }
; 1150 : #endif
; 1151 : 
; 1152 :     // Result depends on fact if we get IP address
; 1153 :     rc = (g_kitlEthState.deviceIP != 0);

  01d88	e59f3074	 ldr         r3, [pc, #0x74]
  01d8c	e5933010	 ldr         r3, [r3, #0x10]
  01d90	e3530000	 cmp         r3, #0
  01d94	0a000002	 beq         |$LN40@OALKitlEth|
  01d98	e3a03001	 mov         r3, #1
  01d9c	e58d3078	 str         r3, [sp, #0x78]
  01da0	ea000001	 b           |$LN41@OALKitlEth|
  01da4		 |$LN40@OALKitlEth|
  01da4	e3a03000	 mov         r3, #0
  01da8	e58d3078	 str         r3, [sp, #0x78]
  01dac		 |$LN41@OALKitlEth|
  01dac	e59d3078	 ldr         r3, [sp, #0x78]
  01db0	e58d3008	 str         r3, [sp, #8]
  01db4		 |$cleanUp$43827|

; 1154 :     
; 1155 : 
; 1156 : cleanUp:
; 1157 :     KITL_RETAILMSG(ZONE_KITL_OAL, ("-OALKitlEthInit(rc = %d)\r\n", rc));

  01db4	e59f3044	 ldr         r3, [pc, #0x44]
  01db8	e5933440	 ldr         r3, [r3, #0x440]
  01dbc	e3130a01	 tst         r3, #1, 20
  01dc0	0a000005	 beq         |$LN42@OALKitlEth|
  01dc4	e59d1008	 ldr         r1, [sp, #8]
  01dc8	e59f002c	 ldr         r0, [pc, #0x2C]
  01dcc	eb000000	 bl          KITLOutputDebugString
  01dd0	e3a03001	 mov         r3, #1
  01dd4	e58d307c	 str         r3, [sp, #0x7C]
  01dd8	ea000001	 b           |$LN43@OALKitlEth|
  01ddc		 |$LN42@OALKitlEth|
  01ddc	e3a03000	 mov         r3, #0
  01de0	e58d307c	 str         r3, [sp, #0x7C]
  01de4		 |$LN43@OALKitlEth|

; 1158 :     return rc;

  01de4	e59d3008	 ldr         r3, [sp, #8]
  01de8	e58d3038	 str         r3, [sp, #0x38]

; 1159 : }

  01dec	e59d0038	 ldr         r0, [sp, #0x38]
  01df0	e28dd080	 add         sp, sp, #0x80
  01df4	e89d6000	 ldmia       sp, {sp, lr}
  01df8	e12fff1e	 bx          lr
  01dfc		 |$LN47@OALKitlEth|
  01dfc		 |$LN48@OALKitlEth|
  01dfc	00000000	 DCD         |??_C@_0BL@OCIIDPCB@?9OALKitlEthInit?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  01e00		 |$LN49@OALKitlEth|
  01e00	00000000	 DCD         |dpCurSettings|
  01e04		 |$LN50@OALKitlEth|
  01e04	00000000	 DCD         |g_kitlEthState|
  01e08		 |$LN51@OALKitlEth|
  01e08	00000000	 DCD         |KitlSendRawData|
  01e0c		 |$LN52@OALKitlEth|
  01e0c	17016414	 DCD         0x17016414
  01e10		 |$LN53@OALKitlEth|
  01e10	00000000	 DCD         |KitlEthSetHostCfg|
  01e14		 |$LN54@OALKitlEth|
  01e14	00000000	 DCD         |KitlEthGetDevCfg|
  01e18		 |$LN55@OALKitlEth|
  01e18	00000000	 DCD         |KitlEthEnableInt|
  01e1c		 |$LN56@OALKitlEth|
  01e1c	00000000	 DCD         |KitlEthRecv|
  01e20		 |$LN57@OALKitlEth|
  01e20	00000000	 DCD         |KitlEthSend|
  01e24		 |$LN58@OALKitlEth|
  01e24	00000000	 DCD         |KitlEthDecode|
  01e28		 |$LN59@OALKitlEth|
  01e28	00000000	 DCD         |KitlEthEncode|
  01e2c		 |$LN60@OALKitlEth|
  01e2c	00000000	 DCD         |??_C@_0CG@IJDAEBCE@WARN?3?5KITL?5will?5run?5in?5polling?5m@|
  01e30		 |$LN61@OALKitlEth|
  01e30	00000000	 DCD         |??_C@_0CN@MENCFIED@WARN?3?5KITL?5can?8t?5obtain?5SYSINTR?5@|
  01e34		 |$LN62@OALKitlEth|
  01e34	00000000	 DCD         |??_C@_0BL@EIDMIDBA@KITL?3?5using?5sysintr?50x?$CFx?$AN?6?$AA@|
  01e38		 |$LN63@OALKitlEth|
  01e38	01010098	 DCD         0x1010098
  01e3c		 |$LN64@OALKitlEth|
  01e3c	00000000	 DCD         |??_C@_0CO@BPFMIJNH@WARN?3?5KITL?5can?8t?5obtain?5IRQ?5for?5@|
  01e40		 |$LN65@OALKitlEth|
  01e40	01010090	 DCD         0x1010090
  01e44		 |$LN66@OALKitlEth|
  01e44	00000000	 DCD         |??_C@_0BP@ILGKAKAA@KITL?3?5?$CK?$CK?$CK?5Device?5Name?5?$CFs?5?$CK?$CK?$CK?$AN?6?$AA@|
  01e48		 |$LN67@OALKitlEth|
  01e48	00000000	 DCD         |??_C@_0CF@GMMNDEHJ@ERROR?3?5KITL?5call?5to?5pfnInit?5fail@|
  01e4c		 |$LN68@OALKitlEth|
  01e4c	00000000	 DCD         |??_C@_0CO@PDOCGCJP@ERROR?3?5KITL?5call?5to?5pfnInitDmaBu@|
  01e50		 |$LN69@OALKitlEth|
  01e50	00000000	 DCD         |g_oalKitlBuffer|
  01e54		 |$LN70@OALKitlEth|
  01e54	00000000	 DCD         |??_C@_0CE@LGCGCDLA@ERROR?3?5KITL?5device?5driver?5is?5NUL@|
  01e58		 |$LN71@OALKitlEth|
  01e58	00000000	 DCD         |??_C@_0CO@HIMCOMKP@?$CLOALKitlEthInit?$CI?8?$CFS?8?0?5?8?$CFs?8?0?50x?$CF0@|
  01e5c		 |$M44091|

			 ENDP  ; |OALKitlEthInit|

	EXPORT	|??_C@_0CF@CNPGAGEH@KITL?3?5DHCP?5get?1renew?5device?5IP?3?5@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|OALGetTickCount|

  00068			 AREA	 |.pdata|, PDATA
|$T44130| DCD	|$LN29@GetAddress|
	DCD	0xc000e404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CF@CNPGAGEH@KITL?3?5DHCP?5get?1renew?5device?5IP?3?5@| DCB "KITL:"
	DCB	" DHCP get/renew device IP: %s", 0xd, 0xa, 0x0 ; `string'

  00004			 AREA	 |.xdata|, DATA
|$T44126| DCD	0xffffffc0
; Function compile flags: /Odtp

  01e5c			 AREA	 |.text|, CODE, ARM

  01e5c	00000000	 DCD         |__GSHandlerCheck|
  01e60	00000000	 DCD         |$T44126|

  01e64		 |GetAddressDHCP| PROC

; 350  : {

  01e64		 |$LN29@GetAddress|
  01e64	e1a0c00d	 mov         r12, sp
  01e68	e92d0001	 stmdb       sp!, {r0}
  01e6c	e92d5000	 stmdb       sp!, {r12, lr}
  01e70	e24dd048	 sub         sp, sp, #0x48
  01e74		 |$M44127|
  01e74	e59f3374	 ldr         r3, [pc, #0x374]
  01e78	e5933000	 ldr         r3, [r3]
  01e7c	e58d3014	 str         r3, [sp, #0x14]

; 351  :     UINT32 startTime, attempts;
; 352  :     UINT16 size;
; 353  :     UINT8 mac[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

  01e80	e3a030ff	 mov         r3, #0xFF
  01e84	e5cd300c	 strb        r3, [sp, #0xC]
  01e88	e3a030ff	 mov         r3, #0xFF
  01e8c	e5cd300d	 strb        r3, [sp, #0xD]
  01e90	e3a030ff	 mov         r3, #0xFF
  01e94	e5cd300e	 strb        r3, [sp, #0xE]
  01e98	e3a030ff	 mov         r3, #0xFF
  01e9c	e5cd300f	 strb        r3, [sp, #0xF]
  01ea0	e3a030ff	 mov         r3, #0xFF
  01ea4	e5cd3010	 strb        r3, [sp, #0x10]
  01ea8	e3a030ff	 mov         r3, #0xFF
  01eac	e5cd3011	 strb        r3, [sp, #0x11]

; 354  : 
; 355  : 
; 356  :     // If there is already IP adress, try first renew it
; 357  :     if (ip != 0) {

  01eb0	e59d3050	 ldr         r3, [sp, #0x50]
  01eb4	e3530000	 cmp         r3, #0
  01eb8	0a000030	 beq         |$LN19@GetAddress|

; 358  :         // Send request
; 359  :         SendDHCP(DHCP_REQUEST, 0);

  01ebc	e3a01000	 mov         r1, #0
  01ec0	e3a00003	 mov         r0, #3
  01ec4	eb000000	 bl          SendDHCP

; 360  : 
; 361  :         g_kitlEthState.dhcpState = DHCP_REQUESTING;

  01ec8	e59f2318	 ldr         r2, [pc, #0x318]
  01ecc	e3a03002	 mov         r3, #2
  01ed0	e5823024	 str         r3, [r2, #0x24]

; 362  :         // Wait until DHCP gets address or timeout
; 363  :         startTime = OALGetTickCount();

  01ed4	eb000000	 bl          OALGetTickCount
  01ed8	e58d0018	 str         r0, [sp, #0x18]
  01edc	e59d3018	 ldr         r3, [sp, #0x18]
  01ee0	e58d3008	 str         r3, [sp, #8]
  01ee4		 |$LN24@GetAddress|
  01ee4		 |$LN18@GetAddress|

; 364  :         while ((OALGetTickCount() - startTime) < DHCP_TIMEOUT) {

  01ee4	eb000000	 bl          OALGetTickCount
  01ee8	e58d001c	 str         r0, [sp, #0x1C]
  01eec	e59d201c	 ldr         r2, [sp, #0x1C]
  01ef0	e59d3008	 ldr         r3, [sp, #8]
  01ef4	e0422003	 sub         r2, r2, r3
  01ef8	e3a03c75	 mov         r3, #0x75, 24
  01efc	e3833030	 orr         r3, r3, #0x30
  01f00	e1520003	 cmp         r2, r3
  01f04	2a000018	 bcs         |$LN17@GetAddress|

; 365  :             size = sizeof(g_kitlEthState.packet);

  01f08	e3a03c05	 mov         r3, #5, 24
  01f0c	e38330ec	 orr         r3, r3, #0xEC
  01f10	e1cd30b0	 strh        r3, [sp]

; 366  :             if (!g_kitlEthState.pfnRecv(g_kitlEthState.packet, &size)) continue;

  01f14	e28d1000	 add         r1, sp, #0
  01f18	e59f32c8	 ldr         r3, [pc, #0x2C8]
  01f1c	e2830f42	 add         r0, r3, #0x42, 30
  01f20	e59f32c0	 ldr         r3, [pc, #0x2C0]
  01f24	e5933034	 ldr         r3, [r3, #0x34]
  01f28	e1a0e00f	 mov         lr, pc
  01f2c	e12fff13	 bx          r3
  01f30	e58d0020	 str         r0, [sp, #0x20]
  01f34	e59d3020	 ldr         r3, [sp, #0x20]
  01f38	e3530000	 cmp         r3, #0
  01f3c	1a000000	 bne         |$LN16@GetAddress|
  01f40	eaffffe7	 b           |$LN18@GetAddress|
  01f44		 |$LN16@GetAddress|

; 367  :             KitlEthDecode(g_kitlEthState.packet, &size);

  01f44	e28d1000	 add         r1, sp, #0
  01f48	e59f3298	 ldr         r3, [pc, #0x298]
  01f4c	e2830f42	 add         r0, r3, #0x42, 30
  01f50	eb000000	 bl          KitlEthDecode

; 368  :             if (g_kitlEthState.dhcpState == DHCP_BOUND) break;

  01f54	e59f328c	 ldr         r3, [pc, #0x28C]
  01f58	e5933024	 ldr         r3, [r3, #0x24]
  01f5c	e3530000	 cmp         r3, #0
  01f60	1a000000	 bne         |$LN15@GetAddress|
  01f64	ea000000	 b           |$LN17@GetAddress|
  01f68		 |$LN15@GetAddress|

; 369  :         }

  01f68	eaffffdd	 b           |$LN24@GetAddress|
  01f6c		 |$LN17@GetAddress|

; 370  :         // If we end in BOUND state we renew it...
; 371  :         if (g_kitlEthState.dhcpState == DHCP_BOUND) goto cleanUp;

  01f6c	e59f3274	 ldr         r3, [pc, #0x274]
  01f70	e5933024	 ldr         r3, [r3, #0x24]
  01f74	e3530000	 cmp         r3, #0
  01f78	1a000000	 bne         |$LN14@GetAddress|
  01f7c	ea00007f	 b           |$cleanUp$43445|
  01f80		 |$LN14@GetAddress|
  01f80		 |$LN19@GetAddress|

; 372  :     }
; 373  : 
; 374  :     // Allocate new IP address
; 375  :     attempts = 0;

  01f80	e3a03000	 mov         r3, #0
  01f84	e58d3004	 str         r3, [sp, #4]
  01f88		 |$LN25@GetAddress|
  01f88		 |$LN13@GetAddress|

; 376  :     while (attempts++ < 3) {

  01f88	e59d3004	 ldr         r3, [sp, #4]
  01f8c	e3530003	 cmp         r3, #3
  01f90	e59d3004	 ldr         r3, [sp, #4]
  01f94	e2833001	 add         r3, r3, #1
  01f98	e58d3004	 str         r3, [sp, #4]
  01f9c	2a000077	 bcs         |$LN12@GetAddress|

; 377  : 
; 378  :         // Reset device and server IP
; 379  :         g_kitlEthState.deviceIP = 0;

  01fa0	e59f2240	 ldr         r2, [pc, #0x240]
  01fa4	e3a03000	 mov         r3, #0
  01fa8	e5823010	 str         r3, [r2, #0x10]

; 380  :         g_kitlEthState.dhcpServerIP = 0;

  01fac	e59f2234	 ldr         r2, [pc, #0x234]
  01fb0	e3a03000	 mov         r3, #0
  01fb4	e5823028	 str         r3, [r2, #0x28]

; 381  : 
; 382  :         // Send DHCP discover message
; 383  :         SendDHCP(DHCP_DISCOVER, 0);

  01fb8	e3a01000	 mov         r1, #0
  01fbc	e3a00001	 mov         r0, #1
  01fc0	eb000000	 bl          SendDHCP

; 384  :         g_kitlEthState.dhcpState = DHCP_SELECTING;

  01fc4	e59f221c	 ldr         r2, [pc, #0x21C]
  01fc8	e3a03001	 mov         r3, #1
  01fcc	e5823024	 str         r3, [r2, #0x24]

; 385  : 
; 386  :         // Wait until DHCP gets address or timeout
; 387  :         startTime = OALGetTickCount();

  01fd0	eb000000	 bl          OALGetTickCount
  01fd4	e58d0024	 str         r0, [sp, #0x24]
  01fd8	e59d3024	 ldr         r3, [sp, #0x24]
  01fdc	e58d3008	 str         r3, [sp, #8]
  01fe0		 |$LN26@GetAddress|
  01fe0		 |$LN11@GetAddress|

; 388  :         while ((OALGetTickCount() - startTime) < DHCP_TIMEOUT) {

  01fe0	eb000000	 bl          OALGetTickCount
  01fe4	e58d0028	 str         r0, [sp, #0x28]
  01fe8	e59d2028	 ldr         r2, [sp, #0x28]
  01fec	e59d3008	 ldr         r3, [sp, #8]
  01ff0	e0422003	 sub         r2, r2, r3
  01ff4	e3a03c75	 mov         r3, #0x75, 24
  01ff8	e3833030	 orr         r3, r3, #0x30
  01ffc	e1520003	 cmp         r2, r3
  02000	2a000018	 bcs         |$LN10@GetAddress|

; 389  :             size = sizeof(g_kitlEthState.packet);

  02004	e3a03c05	 mov         r3, #5, 24
  02008	e38330ec	 orr         r3, r3, #0xEC
  0200c	e1cd30b0	 strh        r3, [sp]

; 390  :             if (!g_kitlEthState.pfnRecv(g_kitlEthState.packet, &size)) continue;

  02010	e28d1000	 add         r1, sp, #0
  02014	e59f31cc	 ldr         r3, [pc, #0x1CC]
  02018	e2830f42	 add         r0, r3, #0x42, 30
  0201c	e59f31c4	 ldr         r3, [pc, #0x1C4]
  02020	e5933034	 ldr         r3, [r3, #0x34]
  02024	e1a0e00f	 mov         lr, pc
  02028	e12fff13	 bx          r3
  0202c	e58d002c	 str         r0, [sp, #0x2C]
  02030	e59d302c	 ldr         r3, [sp, #0x2C]
  02034	e3530000	 cmp         r3, #0
  02038	1a000000	 bne         |$LN9@GetAddress|
  0203c	eaffffe7	 b           |$LN11@GetAddress|
  02040		 |$LN9@GetAddress|

; 391  :             KitlEthDecode(g_kitlEthState.packet, &size);

  02040	e28d1000	 add         r1, sp, #0
  02044	e59f319c	 ldr         r3, [pc, #0x19C]
  02048	e2830f42	 add         r0, r3, #0x42, 30
  0204c	eb000000	 bl          KitlEthDecode

; 392  :             if (g_kitlEthState.dhcpState == DHCP_BOUND) break;

  02050	e59f3190	 ldr         r3, [pc, #0x190]
  02054	e5933024	 ldr         r3, [r3, #0x24]
  02058	e3530000	 cmp         r3, #0
  0205c	1a000000	 bne         |$LN8@GetAddress|
  02060	ea000000	 b           |$LN10@GetAddress|
  02064		 |$LN8@GetAddress|

; 393  :         }

  02064	eaffffdd	 b           |$LN26@GetAddress|
  02068		 |$LN10@GetAddress|

; 394  : 
; 395  :         // If there was timeout try start DHCP againg with new transaction id
; 396  :         if (g_kitlEthState.dhcpState != DHCP_BOUND) {

  02068	e59f3178	 ldr         r3, [pc, #0x178]
  0206c	e5933024	 ldr         r3, [r3, #0x24]
  02070	e3530000	 cmp         r3, #0
  02074	0a000005	 beq         |$LN7@GetAddress|

; 397  :             g_kitlEthState.dhcpXId += 0x00080000;

  02078	e59f3168	 ldr         r3, [pc, #0x168]
  0207c	e593302c	 ldr         r3, [r3, #0x2C]
  02080	e2832702	 add         r2, r3, #2, 14
  02084	e59f315c	 ldr         r3, [pc, #0x15C]
  02088	e583202c	 str         r2, [r3, #0x2C]

; 398  :             continue;

  0208c	eaffffbd	 b           |$LN13@GetAddress|
  02090		 |$LN7@GetAddress|

; 399  :         }
; 400  : 
; 401  :         // We get address, verify if it isn't used by somebody else...
; 402  :         SendARP(ARP_REQUEST, mac, g_kitlEthState.deviceIP);

  02090	e59f3150	 ldr         r3, [pc, #0x150]
  02094	e5932010	 ldr         r2, [r3, #0x10]
  02098	e28d100c	 add         r1, sp, #0xC
  0209c	e3a00001	 mov         r0, #1
  020a0	eb000000	 bl          SendARP

; 403  :         startTime = OALGetTickCount();

  020a4	eb000000	 bl          OALGetTickCount
  020a8	e58d0030	 str         r0, [sp, #0x30]
  020ac	e59d3030	 ldr         r3, [sp, #0x30]
  020b0	e58d3008	 str         r3, [sp, #8]
  020b4		 |$LN6@GetAddress|

; 404  :         while ((OALGetTickCount() - startTime) < ARP_TIMEOUT) {

  020b4	eb000000	 bl          OALGetTickCount
  020b8	e58d0034	 str         r0, [sp, #0x34]
  020bc	e59d2034	 ldr         r2, [sp, #0x34]
  020c0	e59d3008	 ldr         r3, [sp, #8]
  020c4	e0423003	 sub         r3, r2, r3
  020c8	e3530e7d	 cmp         r3, #0x7D, 28
  020cc	2a000020	 bcs         |$LN5@GetAddress|

; 405  :             size = sizeof(g_kitlEthState.packet);

  020d0	e3a03c05	 mov         r3, #5, 24
  020d4	e38330ec	 orr         r3, r3, #0xEC
  020d8	e1cd30b0	 strh        r3, [sp]

; 406  :             if (g_kitlEthState.pfnRecv(g_kitlEthState.packet, &size)) {

  020dc	e28d1000	 add         r1, sp, #0
  020e0	e59f3100	 ldr         r3, [pc, #0x100]
  020e4	e2830f42	 add         r0, r3, #0x42, 30
  020e8	e59f30f8	 ldr         r3, [pc, #0xF8]
  020ec	e5933034	 ldr         r3, [r3, #0x34]
  020f0	e1a0e00f	 mov         lr, pc
  020f4	e12fff13	 bx          r3
  020f8	e58d0038	 str         r0, [sp, #0x38]
  020fc	e59d3038	 ldr         r3, [sp, #0x38]
  02100	e3530000	 cmp         r3, #0
  02104	0a000011	 beq         |$LN4@GetAddress|

; 407  :                 if (GetOpARP(g_kitlEthState.packet, size) == ARP_RESPONSE) {

  02108	e1dd10b0	 ldrh        r1, [sp]
  0210c	e59f30d4	 ldr         r3, [pc, #0xD4]
  02110	e2830f42	 add         r0, r3, #0x42, 30
  02114	eb000000	 bl          GetOpARP
  02118	e1a03800	 mov         r3, r0, lsl #16
  0211c	e1a03823	 mov         r3, r3, lsr #16
  02120	e1cd33bc	 strh        r3, [sp, #0x3C]
  02124	e1dd33bc	 ldrh        r3, [sp, #0x3C]
  02128	e3530002	 cmp         r3, #2
  0212c	1a000007	 bne         |$LN3@GetAddress|

; 408  :                     // Oops, somebody is using assigned address, decline...
; 409  :                     SendDHCP(DHCP_DECLINE, g_kitlEthState.deviceIP);

  02130	e59f30b0	 ldr         r3, [pc, #0xB0]
  02134	e5931010	 ldr         r1, [r3, #0x10]
  02138	e3a00004	 mov         r0, #4
  0213c	eb000000	 bl          SendDHCP

; 410  :                     g_kitlEthState.deviceIP = 0;

  02140	e59f20a0	 ldr         r2, [pc, #0xA0]
  02144	e3a03000	 mov         r3, #0
  02148	e5823010	 str         r3, [r2, #0x10]

; 411  :                     break;

  0214c	ea000000	 b           |$LN5@GetAddress|
  02150		 |$LN3@GetAddress|
  02150		 |$LN4@GetAddress|

; 412  :                 }
; 413  :             }
; 414  :         }

  02150	eaffffd7	 b           |$LN6@GetAddress|
  02154		 |$LN5@GetAddress|

; 415  : 
; 416  :         // If we get with valid address we are done
; 417  :         if (g_kitlEthState.deviceIP != 0) break;

  02154	e59f308c	 ldr         r3, [pc, #0x8C]
  02158	e5933010	 ldr         r3, [r3, #0x10]
  0215c	e3530000	 cmp         r3, #0
  02160	0a000000	 beq         |$LN2@GetAddress|
  02164	ea000005	 b           |$LN12@GetAddress|
  02168		 |$LN2@GetAddress|

; 418  : 
; 419  :         // Let try new DHCP transaction
; 420  :         g_kitlEthState.dhcpXId += 0x01080000;

  02168	e59f3078	 ldr         r3, [pc, #0x78]
  0216c	e593302c	 ldr         r3, [r3, #0x2C]
  02170	e2832742	 add         r2, r3, #0x42, 14
  02174	e59f306c	 ldr         r3, [pc, #0x6C]
  02178	e583202c	 str         r2, [r3, #0x2C]

; 421  : 
; 422  :     }

  0217c	eaffff81	 b           |$LN25@GetAddress|
  02180		 |$LN12@GetAddress|
  02180		 |$cleanUp$43445|

; 423  : 
; 424  : cleanUp:
; 425  :     if(g_kitlEthState.deviceIP != 0)

  02180	e59f3060	 ldr         r3, [pc, #0x60]
  02184	e5933010	 ldr         r3, [r3, #0x10]
  02188	e3530000	 cmp         r3, #0
  0218c	0a00000f	 beq         |$LN1@GetAddress|

; 426  :     KITL_RETAILMSG(ZONE_INIT, ("KITL: DHCP get/renew device IP: %s\r\n",
; 427  :         OALKitlIPtoString(g_kitlEthState.deviceIP)
; 428  :     ));

  02190	e59f3054	 ldr         r3, [pc, #0x54]
  02194	e5933440	 ldr         r3, [r3, #0x440]
  02198	e3130002	 tst         r3, #2
  0219c	0a000009	 beq         |$LN22@GetAddress|
  021a0	e59f3040	 ldr         r3, [pc, #0x40]
  021a4	e5930010	 ldr         r0, [r3, #0x10]
  021a8	eb000000	 bl          OALKitlIPtoString
  021ac	e58d0040	 str         r0, [sp, #0x40]
  021b0	e59d1040	 ldr         r1, [sp, #0x40]
  021b4	e59f0028	 ldr         r0, [pc, #0x28]
  021b8	eb000000	 bl          KITLOutputDebugString
  021bc	e3a03001	 mov         r3, #1
  021c0	e58d3044	 str         r3, [sp, #0x44]
  021c4	ea000001	 b           |$LN23@GetAddress|
  021c8		 |$LN22@GetAddress|
  021c8	e3a03000	 mov         r3, #0
  021cc	e58d3044	 str         r3, [sp, #0x44]
  021d0		 |$LN23@GetAddress|
  021d0		 |$LN1@GetAddress|

; 350  : {

  021d0	e59d0014	 ldr         r0, [sp, #0x14]
  021d4	eb000000	 bl          __security_check_cookie

; 429  : }

  021d8	e28dd048	 add         sp, sp, #0x48
  021dc	e89d6000	 ldmia       sp, {sp, lr}
  021e0	e12fff1e	 bx          lr
  021e4		 |$LN30@GetAddress|
  021e4		 |$LN31@GetAddress|
  021e4	00000000	 DCD         |??_C@_0CF@CNPGAGEH@KITL?3?5DHCP?5get?1renew?5device?5IP?3?5@|
  021e8		 |$LN32@GetAddress|
  021e8	00000000	 DCD         |g_kitlEthState|
  021ec		 |$LN33@GetAddress|
  021ec	00000000	 DCD         |dpCurSettings|
  021f0		 |$LN34@GetAddress|
  021f0	00000000	 DCD         |__security_cookie|
  021f4		 |$M44128|

			 ENDP  ; |GetAddressDHCP|


  00070			 AREA	 |.pdata|, PDATA
|$T44140| DCD	|$LN5@SendARP|
	DCD	0x40006b04
; Function compile flags: /Odtp

  021f4			 AREA	 |.text|, CODE, ARM

  021f4		 |SendARP| PROC

; 88   : {

  021f4		 |$LN5@SendARP|
  021f4	e1a0c00d	 mov         r12, sp
  021f8	e92d0007	 stmdb       sp!, {r0 - r2}
  021fc	e92d5000	 stmdb       sp!, {r12, lr}
  02200	e24dd00c	 sub         sp, sp, #0xC
  02204		 |$M44137|

; 89   :     UINT8 *pFrame = g_kitlEthState.packet;

  02204	e59f3190	 ldr         r3, [pc, #0x190]
  02208	e2833f42	 add         r3, r3, #0x42, 30
  0220c	e58d3000	 str         r3, [sp]

; 90   :     ETH_HEADER *pEth = (ETH_HEADER*)pFrame;

  02210	e59d3000	 ldr         r3, [sp]
  02214	e58d3004	 str         r3, [sp, #4]

; 91   :     ARP_MESSAGE *pARP = (ARP_MESSAGE*)((UINT8*)pEth + sizeof(ETH_HEADER));

  02218	e59d3004	 ldr         r3, [sp, #4]
  0221c	e283300e	 add         r3, r3, #0xE
  02220	e58d3008	 str         r3, [sp, #8]

; 92   : 
; 93   :     memcpy(pEth->destmac, mac, sizeof(pEth->destmac));

  02224	e3a02006	 mov         r2, #6
  02228	e59d1018	 ldr         r1, [sp, #0x18]
  0222c	e59d0004	 ldr         r0, [sp, #4]
  02230	eb000000	 bl          memcpy

; 94   :     memcpy(pEth->srcmac, g_kitlEthState.deviceMAC, sizeof(pEth->srcmac));

  02234	e3a02006	 mov         r2, #6
  02238	e59f315c	 ldr         r3, [pc, #0x15C]
  0223c	e2831008	 add         r1, r3, #8
  02240	e59d3004	 ldr         r3, [sp, #4]
  02244	e2830006	 add         r0, r3, #6
  02248	eb000000	 bl          memcpy

; 95   :     pEth->ftype = htons(ARP_FRAME);

  0224c	e59d3004	 ldr         r3, [sp, #4]
  02250	e283200c	 add         r2, r3, #0xC
  02254	e3a03c06	 mov         r3, #6, 24
  02258	e3833008	 orr         r3, r3, #8
  0225c	e5c23000	 strb        r3, [r2]
  02260	e1a03423	 mov         r3, r3, lsr #8
  02264	e5c23001	 strb        r3, [r2, #1]

; 96   : 
; 97   :     pARP->htype = htons(1);         // Ethernet

  02268	e59d2008	 ldr         r2, [sp, #8]
  0226c	e3a03c01	 mov         r3, #1, 24
  02270	e5c23000	 strb        r3, [r2]
  02274	e1a03423	 mov         r3, r3, lsr #8
  02278	e5c23001	 strb        r3, [r2, #1]

; 98   :     pARP->ptype = htons(IP_FRAME);  // IP4 addresses

  0227c	e59d3008	 ldr         r3, [sp, #8]
  02280	e2832002	 add         r2, r3, #2
  02284	e3a03008	 mov         r3, #8
  02288	e5c23000	 strb        r3, [r2]
  0228c	e1a03423	 mov         r3, r3, lsr #8
  02290	e5c23001	 strb        r3, [r2, #1]

; 99   :     pARP->hsize = 6;                // MAC address is 6 bytes long

  02294	e59d3008	 ldr         r3, [sp, #8]
  02298	e2832004	 add         r2, r3, #4
  0229c	e3a03006	 mov         r3, #6
  022a0	e5c23000	 strb        r3, [r2]

; 100  :     pARP->psize = 4;                // IP4 addresses are 4 bytes long

  022a4	e59d3008	 ldr         r3, [sp, #8]
  022a8	e2832005	 add         r2, r3, #5
  022ac	e3a03004	 mov         r3, #4
  022b0	e5c23000	 strb        r3, [r2]

; 101  :     pARP->op = htons(op);           // Specify an ARP op

  022b4	e1dd31b4	 ldrh        r3, [sp, #0x14]
  022b8	e1a02403	 mov         r2, r3, lsl #8
  022bc	e1dd31b4	 ldrh        r3, [sp, #0x14]
  022c0	e1a03443	 mov         r3, r3, asr #8
  022c4	e1823003	 orr         r3, r2, r3
  022c8	e1a01803	 mov         r1, r3, lsl #16
  022cc	e1a01821	 mov         r1, r1, lsr #16
  022d0	e59d3008	 ldr         r3, [sp, #8]
  022d4	e2832006	 add         r2, r3, #6
  022d8	e1a03001	 mov         r3, r1
  022dc	e5c23000	 strb        r3, [r2]
  022e0	e1a03423	 mov         r3, r3, lsr #8
  022e4	e5c23001	 strb        r3, [r2, #1]

; 102  : 
; 103  :     // Fill in the source side information
; 104  :     memcpy(pARP->srcmac, g_kitlEthState.deviceMAC, sizeof(pARP->srcmac));

  022e8	e3a02006	 mov         r2, #6
  022ec	e59f30a8	 ldr         r3, [pc, #0xA8]
  022f0	e2831008	 add         r1, r3, #8
  022f4	e59d3008	 ldr         r3, [sp, #8]
  022f8	e2830008	 add         r0, r3, #8
  022fc	eb000000	 bl          memcpy

; 105  :     pARP->srcip = g_kitlEthState.deviceIP;

  02300	e59d3008	 ldr         r3, [sp, #8]
  02304	e283100e	 add         r1, r3, #0xE
  02308	e59f308c	 ldr         r3, [pc, #0x8C]
  0230c	e5933010	 ldr         r3, [r3, #0x10]
  02310	e5c13000	 strb        r3, [r1]
  02314	e1a02423	 mov         r2, r3, lsr #8
  02318	e1a03002	 mov         r3, r2
  0231c	e5c13001	 strb        r3, [r1, #1]
  02320	e1a02422	 mov         r2, r2, lsr #8
  02324	e1a03002	 mov         r3, r2
  02328	e5c13002	 strb        r3, [r1, #2]
  0232c	e1a03422	 mov         r3, r2, lsr #8
  02330	e5c13003	 strb        r3, [r1, #3]

; 106  : 
; 107  :     // Fill in the destination information
; 108  :     memcpy(pARP->destmac, mac, sizeof(pARP->destmac));

  02334	e3a02006	 mov         r2, #6
  02338	e59d1018	 ldr         r1, [sp, #0x18]
  0233c	e59d3008	 ldr         r3, [sp, #8]
  02340	e2830012	 add         r0, r3, #0x12
  02344	eb000000	 bl          memcpy

; 109  :     pARP->destip = ip;

  02348	e59d3008	 ldr         r3, [sp, #8]
  0234c	e2831018	 add         r1, r3, #0x18
  02350	e59d301c	 ldr         r3, [sp, #0x1C]
  02354	e5c13000	 strb        r3, [r1]
  02358	e1a02423	 mov         r2, r3, lsr #8
  0235c	e1a03002	 mov         r3, r2
  02360	e5c13001	 strb        r3, [r1, #1]
  02364	e1a02422	 mov         r2, r2, lsr #8
  02368	e1a03002	 mov         r3, r2
  0236c	e5c13002	 strb        r3, [r1, #2]
  02370	e1a03422	 mov         r3, r2, lsr #8
  02374	e5c13003	 strb        r3, [r1, #3]

; 110  : 
; 111  :     // Send packet
; 112  :     g_kitlEthState.pfnSend(pFrame, sizeof(ETH_HEADER) + sizeof(ARP_MESSAGE));

  02378	e3a0102a	 mov         r1, #0x2A
  0237c	e59d0000	 ldr         r0, [sp]
  02380	e59f3014	 ldr         r3, [pc, #0x14]
  02384	e5933030	 ldr         r3, [r3, #0x30]
  02388	e1a0e00f	 mov         lr, pc
  0238c	e12fff13	 bx          r3

; 113  : }

  02390	e28dd00c	 add         sp, sp, #0xC
  02394	e89d6000	 ldmia       sp, {sp, lr}
  02398	e12fff1e	 bx          lr
  0239c		 |$LN6@SendARP|
  0239c		 |$LN7@SendARP|
  0239c	00000000	 DCD         |g_kitlEthState|
  023a0		 |$M44138|

			 ENDP  ; |SendARP|


  00078			 AREA	 |.pdata|, PDATA
|$T44148| DCD	|$LN6@GetOpARP|
	DCD	0x40003304
; Function compile flags: /Odtp

  023a0			 AREA	 |.text|, CODE, ARM

  023a0		 |GetOpARP| PROC

; 118  : {

  023a0		 |$LN6@GetOpARP|
  023a0	e1a0c00d	 mov         r12, sp
  023a4	e92d0003	 stmdb       sp!, {r0, r1}
  023a8	e92d5000	 stmdb       sp!, {r12, lr}
  023ac	e24dd00c	 sub         sp, sp, #0xC
  023b0		 |$M44145|

; 119  :     ETH_HEADER *pEth = (ETH_HEADER*)pFrame;

  023b0	e59d3014	 ldr         r3, [sp, #0x14]
  023b4	e58d3000	 str         r3, [sp]

; 120  :     ARP_MESSAGE *pARP = (ARP_MESSAGE*)((UINT8*)pEth + sizeof(ETH_HEADER));

  023b8	e59d3000	 ldr         r3, [sp]
  023bc	e283300e	 add         r3, r3, #0xE
  023c0	e58d3004	 str         r3, [sp, #4]

; 121  : 
; 122  :     if (pEth->ftype != htons(ARP_FRAME)) return 0;

  023c4	e59d3000	 ldr         r3, [sp]
  023c8	e283100c	 add         r1, r3, #0xC
  023cc	e5d13001	 ldrb        r3, [r1, #1]
  023d0	e1a03403	 mov         r3, r3, lsl #8
  023d4	e1a02803	 mov         r2, r3, lsl #16
  023d8	e1a02822	 mov         r2, r2, lsr #16
  023dc	e5d13000	 ldrb        r3, [r1]
  023e0	e1833002	 orr         r3, r3, r2
  023e4	e1a02003	 mov         r2, r3
  023e8	e3a03c06	 mov         r3, #6, 24
  023ec	e3833008	 orr         r3, r3, #8
  023f0	e1520003	 cmp         r2, r3
  023f4	0a000002	 beq         |$LN1@GetOpARP|
  023f8	e3a03000	 mov         r3, #0
  023fc	e1cd30b8	 strh        r3, [sp, #8]
  02400	ea000015	 b           |$LN2@GetOpARP|
  02404		 |$LN1@GetOpARP|

; 123  :     return htons(pARP->op);

  02404	e59d3004	 ldr         r3, [sp, #4]
  02408	e2831006	 add         r1, r3, #6
  0240c	e5d13001	 ldrb        r3, [r1, #1]
  02410	e1a03403	 mov         r3, r3, lsl #8
  02414	e1a02803	 mov         r2, r3, lsl #16
  02418	e1a02822	 mov         r2, r2, lsr #16
  0241c	e5d13000	 ldrb        r3, [r1]
  02420	e1833002	 orr         r3, r3, r2
  02424	e1a00403	 mov         r0, r3, lsl #8
  02428	e59d3004	 ldr         r3, [sp, #4]
  0242c	e2831006	 add         r1, r3, #6
  02430	e5d13001	 ldrb        r3, [r1, #1]
  02434	e1a03403	 mov         r3, r3, lsl #8
  02438	e1a02803	 mov         r2, r3, lsl #16
  0243c	e1a02822	 mov         r2, r2, lsr #16
  02440	e5d13000	 ldrb        r3, [r1]
  02444	e1833002	 orr         r3, r3, r2
  02448	e1a03443	 mov         r3, r3, asr #8
  0244c	e1803003	 orr         r3, r0, r3
  02450	e1a03803	 mov         r3, r3, lsl #16
  02454	e1a03823	 mov         r3, r3, lsr #16
  02458	e1cd30b8	 strh        r3, [sp, #8]
  0245c		 |$LN2@GetOpARP|

; 124  : }

  0245c	e1dd00b8	 ldrh        r0, [sp, #8]
  02460	e28dd00c	 add         sp, sp, #0xC
  02464	e89d6000	 ldmia       sp, {sp, lr}
  02468	e12fff1e	 bx          lr
  0246c		 |$M44146|

			 ENDP  ; |GetOpARP|

	EXPORT	|??_C@_0CO@LIMJACDF@?9KitlEthDecode?$CIpData?5?$DN?50x?$CF08x?0?5l@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CF@DCHGBGAP@?$CLKitlEthDecode?$CI0x?$CF08x?0?50x?$CF08x?9?$DO?$CF@| [ DATA ] ; `string'
	IMPORT	|VBridgeKIndicateOneRxBuffer|

  00080			 AREA	 |.pdata|, PDATA
|$T44158| DCD	|$LN14@KitlEthDec|
	DCD	0x40006a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CO@LIMJACDF@?9KitlEthDecode?$CIpData?5?$DN?50x?$CF08x?0?5l@| DCB "-"
	DCB	"KitlEthDecode(pData = 0x%08x, length = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CF@DCHGBGAP@?$CLKitlEthDecode?$CI0x?$CF08x?0?50x?$CF08x?9?$DO?$CF@| DCB "+"
	DCB	"KitlEthDecode(0x%08x, 0x%08x->%d)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  0246c			 AREA	 |.text|, CODE, ARM

  0246c		 |KitlEthDecode| PROC

; 661  : {

  0246c		 |$LN14@KitlEthDec|
  0246c	e1a0c00d	 mov         r12, sp
  02470	e92d0003	 stmdb       sp!, {r0, r1}
  02474	e92d5000	 stmdb       sp!, {r12, lr}
  02478	e24dd020	 sub         sp, sp, #0x20
  0247c		 |$M44155|

; 662  :     ETH_HEADER *pEth = (ETH_HEADER*)pFrame;

  0247c	e59d3028	 ldr         r3, [sp, #0x28]
  02480	e58d3004	 str         r3, [sp, #4]

; 663  :     UINT8 *pData = NULL;

  02484	e3a03000	 mov         r3, #0
  02488	e58d3000	 str         r3, [sp]

; 664  :     BOOL used = FALSE;

  0248c	e3a03000	 mov         r3, #0
  02490	e58d3008	 str         r3, [sp, #8]

; 665  : 
; 666  : 
; 667  :     KITL_RETAILMSG(ZONE_RECV, (
; 668  :         "+KitlEthDecode(0x%08x, 0x%08x->%d)\r\n", pFrame, pLength, *pLength
; 669  :     ));

  02494	e59f316c	 ldr         r3, [pc, #0x16C]
  02498	e5933440	 ldr         r3, [r3, #0x440]
  0249c	e3130020	 tst         r3, #0x20
  024a0	0a000008	 beq         |$LN8@KitlEthDec|
  024a4	e59d302c	 ldr         r3, [sp, #0x2C]
  024a8	e1d330b0	 ldrh        r3, [r3]
  024ac	e59d202c	 ldr         r2, [sp, #0x2C]
  024b0	e59d1028	 ldr         r1, [sp, #0x28]
  024b4	e59f0154	 ldr         r0, [pc, #0x154]
  024b8	eb000000	 bl          KITLOutputDebugString
  024bc	e3a03001	 mov         r3, #1
  024c0	e58d3010	 str         r3, [sp, #0x10]
  024c4	ea000001	 b           |$LN9@KitlEthDec|
  024c8		 |$LN8@KitlEthDec|
  024c8	e3a03000	 mov         r3, #0
  024cc	e58d3010	 str         r3, [sp, #0x10]
  024d0		 |$LN9@KitlEthDec|

; 670  : 
; 671  :     // Process received packet
; 672  :     switch (ntohs(pEth->ftype)) {

  024d0	e59d3004	 ldr         r3, [sp, #4]
  024d4	e283100c	 add         r1, r3, #0xC
  024d8	e5d13001	 ldrb        r3, [r1, #1]
  024dc	e1a03403	 mov         r3, r3, lsl #8
  024e0	e1a02803	 mov         r2, r3, lsl #16
  024e4	e1a02822	 mov         r2, r2, lsr #16
  024e8	e5d13000	 ldrb        r3, [r1]
  024ec	e1833002	 orr         r3, r3, r2
  024f0	e1a00403	 mov         r0, r3, lsl #8
  024f4	e59d3004	 ldr         r3, [sp, #4]
  024f8	e283100c	 add         r1, r3, #0xC
  024fc	e5d13001	 ldrb        r3, [r1, #1]
  02500	e1a03403	 mov         r3, r3, lsl #8
  02504	e1a02803	 mov         r2, r3, lsl #16
  02508	e1a02822	 mov         r2, r2, lsr #16
  0250c	e5d13000	 ldrb        r3, [r1]
  02510	e1833002	 orr         r3, r3, r2
  02514	e1a03443	 mov         r3, r3, asr #8
  02518	e1803003	 orr         r3, r0, r3
  0251c	e1a03803	 mov         r3, r3, lsl #16
  02520	e1a03823	 mov         r3, r3, lsr #16
  02524	e58d3014	 str         r3, [sp, #0x14]
  02528	e59d3014	 ldr         r3, [sp, #0x14]
  0252c	e3530b02	 cmp         r3, #2, 22
  02530	0a00000b	 beq         |$LN2@KitlEthDec|
  02534	e59d2014	 ldr         r2, [sp, #0x14]
  02538	e3a03b02	 mov         r3, #2, 22
  0253c	e3833006	 orr         r3, r3, #6
  02540	e1520003	 cmp         r2, r3
  02544	0a000000	 beq         |$LN3@KitlEthDec|
  02548	ea00000c	 b           |$LN4@KitlEthDec|
  0254c		 |$LN3@KitlEthDec|

; 673  :     case ARP_FRAME:
; 674  :         DecodeARP(pFrame, *pLength, &used);

  0254c	e28d2008	 add         r2, sp, #8
  02550	e59d302c	 ldr         r3, [sp, #0x2C]
  02554	e1d310b0	 ldrh        r1, [r3]
  02558	e59d0028	 ldr         r0, [sp, #0x28]
  0255c	eb000000	 bl          DecodeARP

; 675  :         break;

  02560	ea000006	 b           |$LN4@KitlEthDec|
  02564		 |$LN2@KitlEthDec|

; 676  :     case IP_FRAME:
; 677  :         pData = DecodeIP(pFrame, pLength, &used);

  02564	e28d2008	 add         r2, sp, #8
  02568	e59d102c	 ldr         r1, [sp, #0x2C]
  0256c	e59d0028	 ldr         r0, [sp, #0x28]
  02570	eb000000	 bl          DecodeIP
  02574	e58d0018	 str         r0, [sp, #0x18]
  02578	e59d3018	 ldr         r3, [sp, #0x18]
  0257c	e58d3000	 str         r3, [sp]
  02580		 |$LN4@KitlEthDec|

; 678  :         break;
; 679  :     }
; 680  : 
; 681  :     // If packet wasn't used, indicate it to VMINI
; 682  :     if (!used && (g_kitlEthState.flags & OAL_KITL_FLAGS_VMINI) != 0) {

  02580	e59d3008	 ldr         r3, [sp, #8]
  02584	e3530000	 cmp         r3, #0
  02588	1a000009	 bne         |$LN1@KitlEthDec|
  0258c	e59f3078	 ldr         r3, [pc, #0x78]
  02590	e5933004	 ldr         r3, [r3, #4]
  02594	e3130008	 tst         r3, #8
  02598	0a000005	 beq         |$LN1@KitlEthDec|

; 683  :         VBridgeKIndicateOneRxBuffer(pFrame, *pLength, FALSE, &used);

  0259c	e28d3008	 add         r3, sp, #8
  025a0	e3a02000	 mov         r2, #0
  025a4	e59d102c	 ldr         r1, [sp, #0x2C]
  025a8	e1d110b0	 ldrh        r1, [r1]
  025ac	e59d0028	 ldr         r0, [sp, #0x28]
  025b0	eb000000	 bl          VBridgeKIndicateOneRxBuffer
  025b4		 |$LN1@KitlEthDec|

; 684  :     }
; 685  : 
; 686  :     KITL_RETAILMSG(ZONE_RECV, (
; 687  :         "-KitlEthDecode(pData = 0x%08x, length = %d)\r\n", pData, *pLength
; 688  :     ));

  025b4	e59f304c	 ldr         r3, [pc, #0x4C]
  025b8	e5933440	 ldr         r3, [r3, #0x440]
  025bc	e3130020	 tst         r3, #0x20
  025c0	0a000007	 beq         |$LN10@KitlEthDec|
  025c4	e59d302c	 ldr         r3, [sp, #0x2C]
  025c8	e1d320b0	 ldrh        r2, [r3]
  025cc	e59d1000	 ldr         r1, [sp]
  025d0	e59f002c	 ldr         r0, [pc, #0x2C]
  025d4	eb000000	 bl          KITLOutputDebugString
  025d8	e3a03001	 mov         r3, #1
  025dc	e58d301c	 str         r3, [sp, #0x1C]
  025e0	ea000001	 b           |$LN11@KitlEthDec|
  025e4		 |$LN10@KitlEthDec|
  025e4	e3a03000	 mov         r3, #0
  025e8	e58d301c	 str         r3, [sp, #0x1C]
  025ec		 |$LN11@KitlEthDec|

; 689  :     return pData;

  025ec	e59d3000	 ldr         r3, [sp]
  025f0	e58d300c	 str         r3, [sp, #0xC]

; 690  : }

  025f4	e59d000c	 ldr         r0, [sp, #0xC]
  025f8	e28dd020	 add         sp, sp, #0x20
  025fc	e89d6000	 ldmia       sp, {sp, lr}
  02600	e12fff1e	 bx          lr
  02604		 |$LN15@KitlEthDec|
  02604		 |$LN16@KitlEthDec|
  02604	00000000	 DCD         |??_C@_0CO@LIMJACDF@?9KitlEthDecode?$CIpData?5?$DN?50x?$CF08x?0?5l@|
  02608		 |$LN17@KitlEthDec|
  02608	00000000	 DCD         |dpCurSettings|
  0260c		 |$LN18@KitlEthDec|
  0260c	00000000	 DCD         |g_kitlEthState|
  02610		 |$LN19@KitlEthDec|
  02610	00000000	 DCD         |??_C@_0CF@DCHGBGAP@?$CLKitlEthDecode?$CI0x?$CF08x?0?50x?$CF08x?9?$DO?$CF@|
  02614		 |$M44156|

			 ENDP  ; |KitlEthDecode|


  00088			 AREA	 |.pdata|, PDATA
|$T44168| DCD	|$LN7@DecodeARP|
	DCD	0x40003e04
; Function compile flags: /Odtp

  02614			 AREA	 |.text|, CODE, ARM

  02614		 |DecodeARP| PROC

; 129  : {

  02614		 |$LN7@DecodeARP|
  02614	e1a0c00d	 mov         r12, sp
  02618	e92d0007	 stmdb       sp!, {r0 - r2}
  0261c	e92d5000	 stmdb       sp!, {r12, lr}
  02620	e24dd008	 sub         sp, sp, #8
  02624		 |$M44165|

; 130  :     ETH_HEADER *pEth = (ETH_HEADER*)pFrame;

  02624	e59d3010	 ldr         r3, [sp, #0x10]
  02628	e58d3000	 str         r3, [sp]

; 131  :     ARP_MESSAGE *pARP = (ARP_MESSAGE*)((UINT8*)pEth + sizeof(ETH_HEADER));

  0262c	e59d3000	 ldr         r3, [sp]
  02630	e283300e	 add         r3, r3, #0xE
  02634	e58d3004	 str         r3, [sp, #4]

; 132  : 
; 133  : 
; 134  :     // Check to see that they were requesting the ARP response from us,
; 135  :     // send reply to ARP request, but ignore other ops
; 136  :     if (
; 137  :         pARP->destip == g_kitlEthState.deviceIP &&
; 138  :         pARP->op == htons(ARP_REQUEST)
; 139  :     ) {

  02638	e59d3004	 ldr         r3, [sp, #4]
  0263c	e2831018	 add         r1, r3, #0x18
  02640	e5d13003	 ldrb        r3, [r1, #3]
  02644	e1a02403	 mov         r2, r3, lsl #8
  02648	e5d13002	 ldrb        r3, [r1, #2]
  0264c	e1833002	 orr         r3, r3, r2
  02650	e1a02403	 mov         r2, r3, lsl #8
  02654	e5d13001	 ldrb        r3, [r1, #1]
  02658	e1833002	 orr         r3, r3, r2
  0265c	e1a02403	 mov         r2, r3, lsl #8
  02660	e5d13000	 ldrb        r3, [r1]
  02664	e1832002	 orr         r2, r3, r2
  02668	e59f3098	 ldr         r3, [pc, #0x98]
  0266c	e5933010	 ldr         r3, [r3, #0x10]
  02670	e1520003	 cmp         r2, r3
  02674	1a00001d	 bne         |$LN2@DecodeARP|
  02678	e59d3004	 ldr         r3, [sp, #4]
  0267c	e2831006	 add         r1, r3, #6
  02680	e5d13001	 ldrb        r3, [r1, #1]
  02684	e1a03403	 mov         r3, r3, lsl #8
  02688	e1a02803	 mov         r2, r3, lsl #16
  0268c	e1a02822	 mov         r2, r2, lsr #16
  02690	e5d13000	 ldrb        r3, [r1]
  02694	e1833002	 orr         r3, r3, r2
  02698	e3530c01	 cmp         r3, #1, 24
  0269c	1a000013	 bne         |$LN2@DecodeARP|

; 140  :         SendARP(ARP_RESPONSE, pARP->srcmac, pARP->srcip);

  026a0	e59d3004	 ldr         r3, [sp, #4]
  026a4	e283100e	 add         r1, r3, #0xE
  026a8	e5d13003	 ldrb        r3, [r1, #3]
  026ac	e1a02403	 mov         r2, r3, lsl #8
  026b0	e5d13002	 ldrb        r3, [r1, #2]
  026b4	e1833002	 orr         r3, r3, r2
  026b8	e1a02403	 mov         r2, r3, lsl #8
  026bc	e5d13001	 ldrb        r3, [r1, #1]
  026c0	e1833002	 orr         r3, r3, r2
  026c4	e1a02403	 mov         r2, r3, lsl #8
  026c8	e5d13000	 ldrb        r3, [r1]
  026cc	e1832002	 orr         r2, r3, r2
  026d0	e59d3004	 ldr         r3, [sp, #4]
  026d4	e2831008	 add         r1, r3, #8
  026d8	e3a00002	 mov         r0, #2
  026dc	eb000000	 bl          SendARP

; 141  :         *pUsed = TRUE;

  026e0	e59d2018	 ldr         r2, [sp, #0x18]
  026e4	e3a03001	 mov         r3, #1
  026e8	e5823000	 str         r3, [r2]

; 142  :     } else {

  026ec	ea000002	 b           |$LN1@DecodeARP|
  026f0		 |$LN2@DecodeARP|

; 143  :         *pUsed = FALSE;

  026f0	e59d2018	 ldr         r2, [sp, #0x18]
  026f4	e3a03000	 mov         r3, #0
  026f8	e5823000	 str         r3, [r2]
  026fc		 |$LN1@DecodeARP|

; 144  :     }
; 145  : }

  026fc	e28dd008	 add         sp, sp, #8
  02700	e89d6000	 ldmia       sp, {sp, lr}
  02704	e12fff1e	 bx          lr
  02708		 |$LN8@DecodeARP|
  02708		 |$LN9@DecodeARP|
  02708	00000000	 DCD         |g_kitlEthState|
  0270c		 |$M44166|

			 ENDP  ; |DecodeARP|

	EXPORT	|??_C@_0BJ@BAFHPAIJ@?9KitlEthEncode?$CIrc?5?$DN?51?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BL@NHDADPAH@?$CLKitlEthEncode?$CI?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'

  00090			 AREA	 |.pdata|, PDATA
|$T44183| DCD	|$LN9@KitlEthEnc|
	DCD	0x40003604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BJ@BAFHPAIJ@?9KitlEthEncode?$CIrc?5?$DN?51?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"KitlEthEncode(rc = 1)", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BL@NHDADPAH@?$CLKitlEthEncode?$CI?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@| DCB "+"
	DCB	"KitlEthEncode(%08x, %d)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  0270c			 AREA	 |.text|, CODE, ARM

  0270c		 |KitlEthEncode| PROC

; 700  : {

  0270c		 |$LN9@KitlEthEnc|
  0270c	e1a0c00d	 mov         r12, sp
  02710	e92d0003	 stmdb       sp!, {r0, r1}
  02714	e92d5000	 stmdb       sp!, {r12, lr}
  02718	e24dd024	 sub         sp, sp, #0x24
  0271c		 |$M44180|

; 701  :     KITL_RETAILMSG(ZONE_SEND, (
; 702  :         "+KitlEthEncode(%08x, %d)\r\n", pFrame, length
; 703  :     ));

  0271c	e59f30b4	 ldr         r3, [pc, #0xB4]
  02720	e5933440	 ldr         r3, [r3, #0x440]
  02724	e3130010	 tst         r3, #0x10
  02728	0a000006	 beq         |$LN3@KitlEthEnc|
  0272c	e1dd23b0	 ldrh        r2, [sp, #0x30]
  02730	e59d102c	 ldr         r1, [sp, #0x2C]
  02734	e59f00a4	 ldr         r0, [pc, #0xA4]
  02738	eb000000	 bl          KITLOutputDebugString
  0273c	e3a03001	 mov         r3, #1
  02740	e58d301c	 str         r3, [sp, #0x1C]
  02744	ea000001	 b           |$LN4@KitlEthEnc|
  02748		 |$LN3@KitlEthEnc|
  02748	e3a03000	 mov         r3, #0
  0274c	e58d301c	 str         r3, [sp, #0x1C]
  02750		 |$LN4@KitlEthEnc|

; 704  : 
; 705  :     // Encode packets
; 706  :     EncodeUDP(
; 707  :         pFrame, length,
; 708  :         g_kitlEthState.kitlServerMAC, g_kitlEthState.deviceIP,
; 709  :         g_kitlEthState.kitlServerIP, htons(KITL_CLIENT_PORT),
; 710  :         g_kitlEthState.kitlServerPort
; 711  :     );

  02750	e59f3084	 ldr         r3, [pc, #0x84]
  02754	e1d332b0	 ldrh        r3, [r3, #0x20]
  02758	e58d3008	 str         r3, [sp, #8]
  0275c	e3a03cd5	 mov         r3, #0xD5, 24
  02760	e3833003	 orr         r3, r3, #3
  02764	e58d3004	 str         r3, [sp, #4]
  02768	e59f306c	 ldr         r3, [pc, #0x6C]
  0276c	e593301c	 ldr         r3, [r3, #0x1C]
  02770	e58d3000	 str         r3, [sp]
  02774	e59f3060	 ldr         r3, [pc, #0x60]
  02778	e5933010	 ldr         r3, [r3, #0x10]
  0277c	e59f2058	 ldr         r2, [pc, #0x58]
  02780	e2822014	 add         r2, r2, #0x14
  02784	e1dd13b0	 ldrh        r1, [sp, #0x30]
  02788	e59d002c	 ldr         r0, [sp, #0x2C]
  0278c	eb000000	 bl          EncodeUDP

; 712  : 
; 713  :     KITL_RETAILMSG(ZONE_SEND, ("-KitlEthEncode(rc = 1)\r\n"));

  02790	e59f3040	 ldr         r3, [pc, #0x40]
  02794	e5933440	 ldr         r3, [r3, #0x440]
  02798	e3130010	 tst         r3, #0x10
  0279c	0a000004	 beq         |$LN5@KitlEthEnc|
  027a0	e59f002c	 ldr         r0, [pc, #0x2C]
  027a4	eb000000	 bl          KITLOutputDebugString
  027a8	e3a03001	 mov         r3, #1
  027ac	e58d3020	 str         r3, [sp, #0x20]
  027b0	ea000001	 b           |$LN6@KitlEthEnc|
  027b4		 |$LN5@KitlEthEnc|
  027b4	e3a03000	 mov         r3, #0
  027b8	e58d3020	 str         r3, [sp, #0x20]
  027bc		 |$LN6@KitlEthEnc|

; 714  :     return TRUE;

  027bc	e3a03001	 mov         r3, #1
  027c0	e58d3018	 str         r3, [sp, #0x18]

; 715  : }

  027c4	e59d0018	 ldr         r0, [sp, #0x18]
  027c8	e28dd024	 add         sp, sp, #0x24
  027cc	e89d6000	 ldmia       sp, {sp, lr}
  027d0	e12fff1e	 bx          lr
  027d4		 |$LN10@KitlEthEnc|
  027d4		 |$LN11@KitlEthEnc|
  027d4	00000000	 DCD         |??_C@_0BJ@BAFHPAIJ@?9KitlEthEncode?$CIrc?5?$DN?51?$CJ?$AN?6?$AA@|
  027d8		 |$LN12@KitlEthEnc|
  027d8	00000000	 DCD         |dpCurSettings|
  027dc		 |$LN13@KitlEthEnc|
  027dc	00000000	 DCD         |g_kitlEthState|
  027e0		 |$LN14@KitlEthEnc|
  027e0	00000000	 DCD         |??_C@_0BL@NHDADPAH@?$CLKitlEthEncode?$CI?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@|
  027e4		 |$M44181|

			 ENDP  ; |KitlEthEncode|


  00098			 AREA	 |.pdata|, PDATA
|$T44194| DCD	|$LN5@KitlEthGet|
	DCD	0x40000601
; Function compile flags: /Odtp

  027e4			 AREA	 |.text|, CODE, ARM

  027e4		 |KitlEthGetFrameHdrSize| PROC

; 725  : {

  027e4		 |$LN5@KitlEthGet|
  027e4	e24dd004	 sub         sp, sp, #4
  027e8		 |$M44191|

; 726  :     return sizeof(ETH_HEADER) + sizeof(IP4_HEADER) + sizeof(UDP_HEADER);

  027e8	e3a0302a	 mov         r3, #0x2A
  027ec	e5cd3000	 strb        r3, [sp]

; 727  : }

  027f0	e5dd0000	 ldrb        r0, [sp]
  027f4	e28dd004	 add         sp, sp, #4
  027f8	e12fff1e	 bx          lr
  027fc		 |$M44192|

			 ENDP  ; |KitlEthGetFrameHdrSize|


  000a0			 AREA	 |.pdata|, PDATA
|$T44200| DCD	|$LN5@KitlEthSet|
	DCD	0x40000a04
; Function compile flags: /Odtp

  027fc			 AREA	 |.text|, CODE, ARM

  027fc		 |KitlEthSetHostCfg| PROC

; 737  : {

  027fc		 |$LN5@KitlEthSet|
  027fc	e1a0c00d	 mov         r12, sp
  02800	e92d0003	 stmdb       sp!, {r0, r1}
  02804	e92d5000	 stmdb       sp!, {r12, lr}
  02808	e24dd004	 sub         sp, sp, #4
  0280c		 |$M44197|

; 738  :      return TRUE;

  0280c	e3a03001	 mov         r3, #1
  02810	e58d3000	 str         r3, [sp]

; 739  : }

  02814	e59d0000	 ldr         r0, [sp]
  02818	e28dd004	 add         sp, sp, #4
  0281c	e89d6000	 ldmia       sp, {sp, lr}
  02820	e12fff1e	 bx          lr
  02824		 |$M44198|

			 ENDP  ; |KitlEthSetHostCfg|

	EXPORT	|??_C@_0BN@OHPDCAJH@?9KitlEthGetDevCfg?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CI@LLEHHLED@?$CLKitlEthGetDevCfg?$CI0x?$CF08x?0?50x?$CF08x@| [ DATA ] ; `string'

  000a8			 AREA	 |.pdata|, PDATA
|$T44210| DCD	|$LN10@KitlEthGet@2|
	DCD	0x40006404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BN@OHPDCAJH@?9KitlEthGetDevCfg?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"KitlEthGetDevCfg(rc = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CI@LLEHHLED@?$CLKitlEthGetDevCfg?$CI0x?$CF08x?0?50x?$CF08x@| DCB "+"
	DCB	"KitlEthGetDevCfg(0x%08x, 0x%08x->%d)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  02824			 AREA	 |.text|, CODE, ARM

  02824		 |KitlEthGetDevCfg| PROC

; 749  : {

  02824		 |$LN10@KitlEthGet@2|
  02824	e1a0c00d	 mov         r12, sp
  02828	e92d0003	 stmdb       sp!, {r0, r1}
  0282c	e92d5000	 stmdb       sp!, {r12, lr}
  02830	e24dd014	 sub         sp, sp, #0x14
  02834		 |$M44207|

; 750  :     BOOL rc = FALSE;

  02834	e3a03000	 mov         r3, #0
  02838	e58d3004	 str         r3, [sp, #4]

; 751  :     UINT16 port = htons(KITL_CLIENT_PORT);

  0283c	e3a03cd5	 mov         r3, #0xD5, 24
  02840	e3833003	 orr         r3, r3, #3
  02844	e1cd30b0	 strh        r3, [sp]

; 752  : 
; 753  :     KITL_RETAILMSG(ZONE_KITL_OAL,  (
; 754  :         "+KitlEthGetDevCfg(0x%08x, 0x%08x->%d)\r\n", pData, pSize, *pSize
; 755  :     ));

  02848	e59f3158	 ldr         r3, [pc, #0x158]
  0284c	e5933440	 ldr         r3, [r3, #0x440]
  02850	e3130a01	 tst         r3, #1, 20
  02854	0a000008	 beq         |$LN4@KitlEthGet@2|
  02858	e59d3020	 ldr         r3, [sp, #0x20]
  0285c	e1d330b0	 ldrh        r3, [r3]
  02860	e59d2020	 ldr         r2, [sp, #0x20]
  02864	e59d101c	 ldr         r1, [sp, #0x1C]
  02868	e59f0140	 ldr         r0, [pc, #0x140]
  0286c	eb000000	 bl          KITLOutputDebugString
  02870	e3a03001	 mov         r3, #1
  02874	e58d300c	 str         r3, [sp, #0xC]
  02878	ea000001	 b           |$LN5@KitlEthGet@2|
  0287c		 |$LN4@KitlEthGet@2|
  0287c	e3a03000	 mov         r3, #0
  02880	e58d300c	 str         r3, [sp, #0xC]
  02884		 |$LN5@KitlEthGet@2|

; 756  : 
; 757  :     // Is there space in buffer?
; 758  :     if (*pSize < (sizeof(UINT32) + 4 * sizeof(UINT16))) goto cleanUp;

  02884	e59d3020	 ldr         r3, [sp, #0x20]
  02888	e1d330b0	 ldrh        r3, [r3]
  0288c	e353000c	 cmp         r3, #0xC
  02890	2a000000	 bcs         |$LN1@KitlEthGet@2|
  02894	ea000030	 b           |$cleanUp$43695|
  02898		 |$LN1@KitlEthGet@2|

; 759  : 
; 760  :     *pSize = 0;

  02898	e59d2020	 ldr         r2, [sp, #0x20]
  0289c	e3a03000	 mov         r3, #0
  028a0	e1c230b0	 strh        r3, [r2]

; 761  :     memcpy(pData, &g_kitlEthState.deviceIP, sizeof(UINT32));

  028a4	e3a02004	 mov         r2, #4
  028a8	e59f30fc	 ldr         r3, [pc, #0xFC]
  028ac	e2831010	 add         r1, r3, #0x10
  028b0	e59d001c	 ldr         r0, [sp, #0x1C]
  028b4	eb000000	 bl          memcpy

; 762  :     pData += sizeof(UINT32);

  028b8	e59d301c	 ldr         r3, [sp, #0x1C]
  028bc	e2833004	 add         r3, r3, #4
  028c0	e58d301c	 str         r3, [sp, #0x1C]

; 763  :     *pSize += sizeof(UINT32);

  028c4	e59d3020	 ldr         r3, [sp, #0x20]
  028c8	e1d330b0	 ldrh        r3, [r3]
  028cc	e2833004	 add         r3, r3, #4
  028d0	e1a02803	 mov         r2, r3, lsl #16
  028d4	e1a02822	 mov         r2, r2, lsr #16
  028d8	e59d3020	 ldr         r3, [sp, #0x20]
  028dc	e1c320b0	 strh        r2, [r3]

; 764  :     memcpy(pData, g_kitlEthState.deviceMAC, 3*sizeof(UINT16));

  028e0	e3a02006	 mov         r2, #6
  028e4	e59f30c0	 ldr         r3, [pc, #0xC0]
  028e8	e2831008	 add         r1, r3, #8
  028ec	e59d001c	 ldr         r0, [sp, #0x1C]
  028f0	eb000000	 bl          memcpy

; 765  :     pData += 3*sizeof(UINT16);

  028f4	e59d301c	 ldr         r3, [sp, #0x1C]
  028f8	e2833006	 add         r3, r3, #6
  028fc	e58d301c	 str         r3, [sp, #0x1C]

; 766  :     *pSize += 3*sizeof(UINT16);

  02900	e59d3020	 ldr         r3, [sp, #0x20]
  02904	e1d330b0	 ldrh        r3, [r3]
  02908	e2833006	 add         r3, r3, #6
  0290c	e1a02803	 mov         r2, r3, lsl #16
  02910	e1a02822	 mov         r2, r2, lsr #16
  02914	e59d3020	 ldr         r3, [sp, #0x20]
  02918	e1c320b0	 strh        r2, [r3]

; 767  :     memcpy(pData, &port, sizeof(UINT16));

  0291c	e3a02002	 mov         r2, #2
  02920	e28d1000	 add         r1, sp, #0
  02924	e59d001c	 ldr         r0, [sp, #0x1C]
  02928	eb000000	 bl          memcpy

; 768  :     pData += sizeof(UINT16);

  0292c	e59d301c	 ldr         r3, [sp, #0x1C]
  02930	e2833002	 add         r3, r3, #2
  02934	e58d301c	 str         r3, [sp, #0x1C]

; 769  :     *pSize += sizeof(UINT16);

  02938	e59d3020	 ldr         r3, [sp, #0x20]
  0293c	e1d330b0	 ldrh        r3, [r3]
  02940	e2833002	 add         r3, r3, #2
  02944	e1a02803	 mov         r2, r3, lsl #16
  02948	e1a02822	 mov         r2, r2, lsr #16
  0294c	e59d3020	 ldr         r3, [sp, #0x20]
  02950	e1c320b0	 strh        r2, [r3]

; 770  : 
; 771  :     // We are done
; 772  :     rc = TRUE;

  02954	e3a03001	 mov         r3, #1
  02958	e58d3004	 str         r3, [sp, #4]
  0295c		 |$cleanUp$43695|

; 773  : 
; 774  : cleanUp:
; 775  :     KITL_RETAILMSG(ZONE_KITL_OAL, ("-KitlEthGetDevCfg(rc = %d)\r\n", rc));

  0295c	e59f3044	 ldr         r3, [pc, #0x44]
  02960	e5933440	 ldr         r3, [r3, #0x440]
  02964	e3130a01	 tst         r3, #1, 20
  02968	0a000005	 beq         |$LN6@KitlEthGet@2|
  0296c	e59d1004	 ldr         r1, [sp, #4]
  02970	e59f002c	 ldr         r0, [pc, #0x2C]
  02974	eb000000	 bl          KITLOutputDebugString
  02978	e3a03001	 mov         r3, #1
  0297c	e58d3010	 str         r3, [sp, #0x10]
  02980	ea000001	 b           |$LN7@KitlEthGet@2|
  02984		 |$LN6@KitlEthGet@2|
  02984	e3a03000	 mov         r3, #0
  02988	e58d3010	 str         r3, [sp, #0x10]
  0298c		 |$LN7@KitlEthGet@2|

; 776  :     return rc;

  0298c	e59d3004	 ldr         r3, [sp, #4]
  02990	e58d3008	 str         r3, [sp, #8]

; 777  : }

  02994	e59d0008	 ldr         r0, [sp, #8]
  02998	e28dd014	 add         sp, sp, #0x14
  0299c	e89d6000	 ldmia       sp, {sp, lr}
  029a0	e12fff1e	 bx          lr
  029a4		 |$LN11@KitlEthGet@2|
  029a4		 |$LN12@KitlEthGet@2|
  029a4	00000000	 DCD         |??_C@_0BN@OHPDCAJH@?9KitlEthGetDevCfg?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  029a8		 |$LN13@KitlEthGet@2|
  029a8	00000000	 DCD         |dpCurSettings|
  029ac		 |$LN14@KitlEthGet@2|
  029ac	00000000	 DCD         |g_kitlEthState|
  029b0		 |$LN15@KitlEthGet@2|
  029b0	00000000	 DCD         |??_C@_0CI@LLEHHLED@?$CLKitlEthGetDevCfg?$CI0x?$CF08x?0?50x?$CF08x@|
  029b4		 |$M44208|

			 ENDP  ; |KitlEthGetDevCfg|

	EXPORT	|??_C@_0BI@DJIGCCGG@?9KitlEthSend?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CA@ELPHLPBP@?$CBDriver?5Send?5failure?0?5retry?5?$CFu?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BL@MJDALEMH@?$CLKitlEthSend?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	IMPORT	|VBridgeKGetOneTxBufferComplete|
	IMPORT	|VBridgeKGetOneTxBuffer|
	IMPORT	|VBridgeUCurrentPacketFilter|

  000b0			 AREA	 |.pdata|, PDATA
|$T44231| DCD	|$LN25@KitlEthSen|
	DCD	0x40009e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BI@DJIGCCGG@?9KitlEthSend?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"KitlEthSend(rc = %d)", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@ELPHLPBP@?$CBDriver?5Send?5failure?0?5retry?5?$CFu?6?$AA@| DCB "!"
	DCB	"Driver Send failure, retry %u", 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BL@MJDALEMH@?$CLKitlEthSend?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@| DCB "+"
	DCB	"KitlEthSend(0x%08x, %d)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  029b4			 AREA	 |.text|, CODE, ARM

  029b4		 |KitlEthSend| PROC

; 786  : {

  029b4		 |$LN25@KitlEthSen|
  029b4	e1a0c00d	 mov         r12, sp
  029b8	e92d0003	 stmdb       sp!, {r0, r1}
  029bc	e92d5000	 stmdb       sp!, {r12, lr}
  029c0	e24dd030	 sub         sp, sp, #0x30
  029c4		 |$M44228|

; 787  :     UCHAR *pSendData;
; 788  :     ULONG sendLength;
; 789  :     USHORT code;
; 790  :     int   nRetries = 0;

  029c4	e3a03000	 mov         r3, #0
  029c8	e58d3000	 str         r3, [sp]

; 791  : 
; 792  :     KITL_RETAILMSG(ZONE_SEND,  (
; 793  :         "+KitlEthSend(0x%08x, %d)\r\n", pData, length
; 794  :     ));

  029cc	e59f3248	 ldr         r3, [pc, #0x248]
  029d0	e5933440	 ldr         r3, [r3, #0x440]
  029d4	e3130010	 tst         r3, #0x10
  029d8	0a000006	 beq         |$LN13@KitlEthSen|
  029dc	e1dd23bc	 ldrh        r2, [sp, #0x3C]
  029e0	e59d1038	 ldr         r1, [sp, #0x38]
  029e4	e59f023c	 ldr         r0, [pc, #0x23C]
  029e8	eb000000	 bl          KITLOutputDebugString
  029ec	e3a03001	 mov         r3, #1
  029f0	e58d3014	 str         r3, [sp, #0x14]
  029f4	ea000001	 b           |$LN14@KitlEthSen|
  029f8		 |$LN13@KitlEthSen|
  029f8	e3a03000	 mov         r3, #0
  029fc	e58d3014	 str         r3, [sp, #0x14]
  02a00		 |$LN14@KitlEthSen|

; 795  : 
; 796  :     // Update multicast addresses
; 797  :     if (g_kitlEthState.updateMCast) {

  02a00	e59f321c	 ldr         r3, [pc, #0x21C]
  02a04	e5933040	 ldr         r3, [r3, #0x40]
  02a08	e3530000	 cmp         r3, #0
  02a0c	0a000012	 beq         |$LN10@KitlEthSen|

; 798  :         if (g_kitlEthState.pDriver->pfnMulticastList)

  02a10	e59f320c	 ldr         r3, [pc, #0x20C]
  02a14	e5933000	 ldr         r3, [r3]
  02a18	e2833028	 add         r3, r3, #0x28
  02a1c	e5933000	 ldr         r3, [r3]
  02a20	e3530000	 cmp         r3, #0
  02a24	0a000009	 beq         |$LN9@KitlEthSen|

; 799  :             g_kitlEthState.pDriver->pfnMulticastList(
; 800  :                 g_kitlEthState.deviceMCast, g_kitlEthState.deviceMCastSize
; 801  :             );

  02a28	e59f31f4	 ldr         r3, [pc, #0x1F4]
  02a2c	e5931044	 ldr         r1, [r3, #0x44]
  02a30	e59f31ec	 ldr         r3, [pc, #0x1EC]
  02a34	e2830048	 add         r0, r3, #0x48
  02a38	e59f31e4	 ldr         r3, [pc, #0x1E4]
  02a3c	e5933000	 ldr         r3, [r3]
  02a40	e2833028	 add         r3, r3, #0x28
  02a44	e5933000	 ldr         r3, [r3]
  02a48	e1a0e00f	 mov         lr, pc
  02a4c	e12fff13	 bx          r3
  02a50		 |$LN9@KitlEthSen|

; 802  :         g_kitlEthState.updateMCast = FALSE;

  02a50	e59f21cc	 ldr         r2, [pc, #0x1CC]
  02a54	e3a03000	 mov         r3, #0
  02a58	e5823040	 str         r3, [r2, #0x40]
  02a5c		 |$LN10@KitlEthSen|

; 803  :     }
; 804  : 
; 805  :     // Update filter 
; 806  :     if (g_kitlEthState.updateFilter) {

  02a5c	e59f31c0	 ldr         r3, [pc, #0x1C0]
  02a60	e5933038	 ldr         r3, [r3, #0x38]
  02a64	e3530000	 cmp         r3, #0
  02a68	0a00000d	 beq         |$LN8@KitlEthSen|

; 807  :         // Update filter
; 808  :         g_kitlEthState.pDriver->pfnCurrentPacketFilter(
; 809  :             g_kitlEthState.deviceFilter
; 810  :         );

  02a6c	e59f31b0	 ldr         r3, [pc, #0x1B0]
  02a70	e593003c	 ldr         r0, [r3, #0x3C]
  02a74	e59f31a8	 ldr         r3, [pc, #0x1A8]
  02a78	e5933000	 ldr         r3, [r3]
  02a7c	e2833024	 add         r3, r3, #0x24
  02a80	e5933000	 ldr         r3, [r3]
  02a84	e1a0e00f	 mov         lr, pc
  02a88	e12fff13	 bx          r3

; 811  :         // Tell VBRIDGE that there is new filter
; 812  :         VBridgeUCurrentPacketFilter(&g_kitlEthState.deviceFilter);

  02a8c	e59f3190	 ldr         r3, [pc, #0x190]
  02a90	e283003c	 add         r0, r3, #0x3C
  02a94	eb000000	 bl          VBridgeUCurrentPacketFilter

; 813  :         g_kitlEthState.updateFilter = FALSE;

  02a98	e59f2184	 ldr         r2, [pc, #0x184]
  02a9c	e3a03000	 mov         r3, #0
  02aa0	e5823038	 str         r3, [r2, #0x38]
  02aa4		 |$LN8@KitlEthSen|
  02aa4		 |$LN7@KitlEthSen|

; 814  :     }
; 815  : 
; 816  :     do {
; 817  :         code = g_kitlEthState.pDriver->pfnSendFrame(pData, length);

  02aa4	e1dd13bc	 ldrh        r1, [sp, #0x3C]
  02aa8	e59d0038	 ldr         r0, [sp, #0x38]
  02aac	e59f3170	 ldr         r3, [pc, #0x170]
  02ab0	e5933000	 ldr         r3, [r3]
  02ab4	e283300c	 add         r3, r3, #0xC
  02ab8	e5933000	 ldr         r3, [r3]
  02abc	e1a0e00f	 mov         lr, pc
  02ac0	e12fff13	 bx          r3
  02ac4	e1a03800	 mov         r3, r0, lsl #16
  02ac8	e1a03823	 mov         r3, r3, lsr #16
  02acc	e1cd31b8	 strh        r3, [sp, #0x18]
  02ad0	e1dd31b8	 ldrh        r3, [sp, #0x18]
  02ad4	e1cd30b4	 strh        r3, [sp, #4]

; 818  :         if (code == 0) {

  02ad8	e1dd30b4	 ldrh        r3, [sp, #4]
  02adc	e3530000	 cmp         r3, #0
  02ae0	1a000018	 bne         |$LN4@KitlEthSen|

; 819  :             if (g_kitlEthState.flags & OAL_KITL_FLAGS_VMINI) {

  02ae4	e59f3138	 ldr         r3, [pc, #0x138]
  02ae8	e5933004	 ldr         r3, [r3, #4]
  02aec	e3130008	 tst         r3, #8
  02af0	0a000013	 beq         |$LN3@KitlEthSen|
  02af4		 |$LN2@KitlEthSen|

; 820  :                 // Consume all the client packets.
; 821  :                 while (VBridgeKGetOneTxBuffer(&pSendData, &sendLength)) {

  02af4	e28d1008	 add         r1, sp, #8
  02af8	e28d000c	 add         r0, sp, #0xC
  02afc	eb000000	 bl          VBridgeKGetOneTxBuffer
  02b00	e58d001c	 str         r0, [sp, #0x1C]
  02b04	e59d301c	 ldr         r3, [sp, #0x1C]
  02b08	e3530000	 cmp         r3, #0
  02b0c	0a00000c	 beq         |$LN1@KitlEthSen|

; 822  :                     g_kitlEthState.pDriver->pfnSendFrame(pSendData, (USHORT)sendLength);

  02b10	e59d3008	 ldr         r3, [sp, #8]
  02b14	e1a01803	 mov         r1, r3, lsl #16
  02b18	e1a01821	 mov         r1, r1, lsr #16
  02b1c	e59d000c	 ldr         r0, [sp, #0xC]
  02b20	e59f30fc	 ldr         r3, [pc, #0xFC]
  02b24	e5933000	 ldr         r3, [r3]
  02b28	e283300c	 add         r3, r3, #0xC
  02b2c	e5933000	 ldr         r3, [r3]
  02b30	e1a0e00f	 mov         lr, pc
  02b34	e12fff13	 bx          r3

; 823  :                     VBridgeKGetOneTxBufferComplete(pSendData);

  02b38	e59d000c	 ldr         r0, [sp, #0xC]
  02b3c	eb000000	 bl          VBridgeKGetOneTxBufferComplete

; 824  :                 }

  02b40	eaffffeb	 b           |$LN2@KitlEthSen|
  02b44		 |$LN1@KitlEthSen|
  02b44		 |$LN3@KitlEthSen|

; 825  :             }
; 826  :             break;

  02b44	ea000011	 b           |$LN5@KitlEthSen|
  02b48		 |$LN4@KitlEthSen|

; 827  :         }
; 828  :         KITL_RETAILMSG(ZONE_ERROR, ("!Driver Send failure, retry %u\n",nRetries));

  02b48	e59f30cc	 ldr         r3, [pc, #0xCC]
  02b4c	e5933440	 ldr         r3, [r3, #0x440]
  02b50	e3130902	 tst         r3, #2, 18
  02b54	0a000005	 beq         |$LN15@KitlEthSen|
  02b58	e59d1000	 ldr         r1, [sp]
  02b5c	e59f00bc	 ldr         r0, [pc, #0xBC]
  02b60	eb000000	 bl          KITLOutputDebugString
  02b64	e3a03001	 mov         r3, #1
  02b68	e58d3020	 str         r3, [sp, #0x20]
  02b6c	ea000001	 b           |$LN16@KitlEthSen|
  02b70		 |$LN15@KitlEthSen|
  02b70	e3a03000	 mov         r3, #0
  02b74	e58d3020	 str         r3, [sp, #0x20]
  02b78		 |$LN16@KitlEthSen|

; 829  :     } while (nRetries ++ < 8);

  02b78	e59d3000	 ldr         r3, [sp]
  02b7c	e3530008	 cmp         r3, #8
  02b80	e59d3000	 ldr         r3, [sp]
  02b84	e2833001	 add         r3, r3, #1
  02b88	e58d3000	 str         r3, [sp]
  02b8c	baffffc4	 blt         |$LN7@KitlEthSen|
  02b90		 |$LN5@KitlEthSen|

; 830  : 
; 831  :     KITL_RETAILMSG(ZONE_SEND,  (
; 832  :         "-KitlEthSend(rc = %d)\r\n", code == 0));

  02b90	e59f3084	 ldr         r3, [pc, #0x84]
  02b94	e5933440	 ldr         r3, [r3, #0x440]
  02b98	e3130010	 tst         r3, #0x10
  02b9c	0a00000d	 beq         |$LN19@KitlEthSen|
  02ba0	e1dd30b4	 ldrh        r3, [sp, #4]
  02ba4	e3530000	 cmp         r3, #0
  02ba8	1a000002	 bne         |$LN17@KitlEthSen|
  02bac	e3a03001	 mov         r3, #1
  02bb0	e58d3024	 str         r3, [sp, #0x24]
  02bb4	ea000001	 b           |$LN18@KitlEthSen|
  02bb8		 |$LN17@KitlEthSen|
  02bb8	e3a03000	 mov         r3, #0
  02bbc	e58d3024	 str         r3, [sp, #0x24]
  02bc0		 |$LN18@KitlEthSen|
  02bc0	e59d1024	 ldr         r1, [sp, #0x24]
  02bc4	e59f004c	 ldr         r0, [pc, #0x4C]
  02bc8	eb000000	 bl          KITLOutputDebugString
  02bcc	e3a03001	 mov         r3, #1
  02bd0	e58d3028	 str         r3, [sp, #0x28]
  02bd4	ea000001	 b           |$LN20@KitlEthSen|
  02bd8		 |$LN19@KitlEthSen|
  02bd8	e3a03000	 mov         r3, #0
  02bdc	e58d3028	 str         r3, [sp, #0x28]
  02be0		 |$LN20@KitlEthSen|

; 833  :     return code == 0;

  02be0	e1dd30b4	 ldrh        r3, [sp, #4]
  02be4	e3530000	 cmp         r3, #0
  02be8	1a000002	 bne         |$LN21@KitlEthSen|
  02bec	e3a03001	 mov         r3, #1
  02bf0	e58d302c	 str         r3, [sp, #0x2C]
  02bf4	ea000001	 b           |$LN22@KitlEthSen|
  02bf8		 |$LN21@KitlEthSen|
  02bf8	e3a03000	 mov         r3, #0
  02bfc	e58d302c	 str         r3, [sp, #0x2C]
  02c00		 |$LN22@KitlEthSen|
  02c00	e59d302c	 ldr         r3, [sp, #0x2C]
  02c04	e58d3010	 str         r3, [sp, #0x10]

; 834  : }

  02c08	e59d0010	 ldr         r0, [sp, #0x10]
  02c0c	e28dd030	 add         sp, sp, #0x30
  02c10	e89d6000	 ldmia       sp, {sp, lr}
  02c14	e12fff1e	 bx          lr
  02c18		 |$LN26@KitlEthSen|
  02c18		 |$LN27@KitlEthSen|
  02c18	00000000	 DCD         |??_C@_0BI@DJIGCCGG@?9KitlEthSend?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  02c1c		 |$LN28@KitlEthSen|
  02c1c	00000000	 DCD         |dpCurSettings|
  02c20		 |$LN29@KitlEthSen|
  02c20	00000000	 DCD         |??_C@_0CA@ELPHLPBP@?$CBDriver?5Send?5failure?0?5retry?5?$CFu?6?$AA@|
  02c24		 |$LN30@KitlEthSen|
  02c24	00000000	 DCD         |g_kitlEthState|
  02c28		 |$LN31@KitlEthSen|
  02c28	00000000	 DCD         |??_C@_0BL@MJDALEMH@?$CLKitlEthSend?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@|
  02c2c		 |$M44229|

			 ENDP  ; |KitlEthSend|

	EXPORT	|??_C@_0BI@PEEPNADN@?9KitlEthRecv?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CD@HNBDALDE@?$CLKitlEthRecv?$CI0x?$CF08x?0?50x?$CF08x?9?$DO?$CFd?$CJ@| [ DATA ] ; `string'

  000b8			 AREA	 |.pdata|, PDATA
|$T44251| DCD	|$LN19@KitlEthRec|
	DCD	0x40008704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BI@PEEPNADN@?9KitlEthRecv?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"KitlEthRecv(rc = %d)", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CD@HNBDALDE@?$CLKitlEthRecv?$CI0x?$CF08x?0?50x?$CF08x?9?$DO?$CFd?$CJ@| DCB "+"
	DCB	"KitlEthRecv(0x%08x, 0x%08x->%d)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  02c2c			 AREA	 |.text|, CODE, ARM

  02c2c		 |KitlEthRecv| PROC

; 843  : {

  02c2c		 |$LN19@KitlEthRec|
  02c2c	e1a0c00d	 mov         r12, sp
  02c30	e92d0003	 stmdb       sp!, {r0, r1}
  02c34	e92d5000	 stmdb       sp!, {r12, lr}
  02c38	e24dd028	 sub         sp, sp, #0x28
  02c3c		 |$M44248|

; 844  :     USHORT code;
; 845  :     UCHAR *pSendData;
; 846  :     ULONG sendLength;
; 847  : 
; 848  :     KITL_RETAILMSG(ZONE_RECV,  (
; 849  :         "+KitlEthRecv(0x%08x, 0x%08x->%d)\r\n", pData, pLength, *pLength
; 850  :     ));

  02c3c	e59f31f8	 ldr         r3, [pc, #0x1F8]
  02c40	e5933440	 ldr         r3, [r3, #0x440]
  02c44	e3130020	 tst         r3, #0x20
  02c48	0a000008	 beq         |$LN9@KitlEthRec|
  02c4c	e59d3034	 ldr         r3, [sp, #0x34]
  02c50	e1d330b0	 ldrh        r3, [r3]
  02c54	e59d2034	 ldr         r2, [sp, #0x34]
  02c58	e59d1030	 ldr         r1, [sp, #0x30]
  02c5c	e59f01e0	 ldr         r0, [pc, #0x1E0]
  02c60	eb000000	 bl          KITLOutputDebugString
  02c64	e3a03001	 mov         r3, #1
  02c68	e58d3010	 str         r3, [sp, #0x10]
  02c6c	ea000001	 b           |$LN10@KitlEthRec|
  02c70		 |$LN9@KitlEthRec|
  02c70	e3a03000	 mov         r3, #0
  02c74	e58d3010	 str         r3, [sp, #0x10]
  02c78		 |$LN10@KitlEthRec|

; 851  : 
; 852  :     // Update multicast addresses
; 853  :     if (g_kitlEthState.updateMCast) {

  02c78	e59f31c0	 ldr         r3, [pc, #0x1C0]
  02c7c	e5933040	 ldr         r3, [r3, #0x40]
  02c80	e3530000	 cmp         r3, #0
  02c84	0a000012	 beq         |$LN6@KitlEthRec|

; 854  :         if (g_kitlEthState.pDriver->pfnMulticastList)

  02c88	e59f31b0	 ldr         r3, [pc, #0x1B0]
  02c8c	e5933000	 ldr         r3, [r3]
  02c90	e2833028	 add         r3, r3, #0x28
  02c94	e5933000	 ldr         r3, [r3]
  02c98	e3530000	 cmp         r3, #0
  02c9c	0a000009	 beq         |$LN5@KitlEthRec|

; 855  :             g_kitlEthState.pDriver->pfnMulticastList(
; 856  :                 g_kitlEthState.deviceMCast, g_kitlEthState.deviceMCastSize
; 857  :             );

  02ca0	e59f3198	 ldr         r3, [pc, #0x198]
  02ca4	e5931044	 ldr         r1, [r3, #0x44]
  02ca8	e59f3190	 ldr         r3, [pc, #0x190]
  02cac	e2830048	 add         r0, r3, #0x48
  02cb0	e59f3188	 ldr         r3, [pc, #0x188]
  02cb4	e5933000	 ldr         r3, [r3]
  02cb8	e2833028	 add         r3, r3, #0x28
  02cbc	e5933000	 ldr         r3, [r3]
  02cc0	e1a0e00f	 mov         lr, pc
  02cc4	e12fff13	 bx          r3
  02cc8		 |$LN5@KitlEthRec|

; 858  :         g_kitlEthState.updateMCast = FALSE;

  02cc8	e59f2170	 ldr         r2, [pc, #0x170]
  02ccc	e3a03000	 mov         r3, #0
  02cd0	e5823040	 str         r3, [r2, #0x40]
  02cd4		 |$LN6@KitlEthRec|

; 859  :     }
; 860  : 
; 861  :     // Update filter 
; 862  :     if (g_kitlEthState.updateFilter) {

  02cd4	e59f3164	 ldr         r3, [pc, #0x164]
  02cd8	e5933038	 ldr         r3, [r3, #0x38]
  02cdc	e3530000	 cmp         r3, #0
  02ce0	0a00000d	 beq         |$LN4@KitlEthRec|

; 863  :         // Update filter
; 864  :         g_kitlEthState.pDriver->pfnCurrentPacketFilter(
; 865  :             g_kitlEthState.deviceFilter
; 866  :         );

  02ce4	e59f3154	 ldr         r3, [pc, #0x154]
  02ce8	e593003c	 ldr         r0, [r3, #0x3C]
  02cec	e59f314c	 ldr         r3, [pc, #0x14C]
  02cf0	e5933000	 ldr         r3, [r3]
  02cf4	e2833024	 add         r3, r3, #0x24
  02cf8	e5933000	 ldr         r3, [r3]
  02cfc	e1a0e00f	 mov         lr, pc
  02d00	e12fff13	 bx          r3

; 867  :         // Tell VBRIDGE that there is new filter
; 868  :         VBridgeUCurrentPacketFilter(&g_kitlEthState.deviceFilter);

  02d04	e59f3134	 ldr         r3, [pc, #0x134]
  02d08	e283003c	 add         r0, r3, #0x3C
  02d0c	eb000000	 bl          VBridgeUCurrentPacketFilter

; 869  :         g_kitlEthState.updateFilter = FALSE;

  02d10	e59f2128	 ldr         r2, [pc, #0x128]
  02d14	e3a03000	 mov         r3, #0
  02d18	e5823038	 str         r3, [r2, #0x38]
  02d1c		 |$LN4@KitlEthRec|

; 870  :     }
; 871  : 
; 872  :     // When VMINI is active send all queued VMINI packets
; 873  :     if ((g_kitlEthState.flags & OAL_KITL_FLAGS_VMINI) != 0) {

  02d1c	e59f311c	 ldr         r3, [pc, #0x11C]
  02d20	e5933004	 ldr         r3, [r3, #4]
  02d24	e3130008	 tst         r3, #8
  02d28	0a000013	 beq         |$LN3@KitlEthRec|
  02d2c		 |$LN2@KitlEthRec|

; 874  :         // First send all VMINI packets
; 875  :         while (VBridgeKGetOneTxBuffer(&pSendData, &sendLength)) {

  02d2c	e28d1004	 add         r1, sp, #4
  02d30	e28d0008	 add         r0, sp, #8
  02d34	eb000000	 bl          VBridgeKGetOneTxBuffer
  02d38	e58d0014	 str         r0, [sp, #0x14]
  02d3c	e59d3014	 ldr         r3, [sp, #0x14]
  02d40	e3530000	 cmp         r3, #0
  02d44	0a00000c	 beq         |$LN1@KitlEthRec|

; 876  :             g_kitlEthState.pDriver->pfnSendFrame(pSendData, (USHORT)sendLength);

  02d48	e59d3004	 ldr         r3, [sp, #4]
  02d4c	e1a01803	 mov         r1, r3, lsl #16
  02d50	e1a01821	 mov         r1, r1, lsr #16
  02d54	e59d0008	 ldr         r0, [sp, #8]
  02d58	e59f30e0	 ldr         r3, [pc, #0xE0]
  02d5c	e5933000	 ldr         r3, [r3]
  02d60	e283300c	 add         r3, r3, #0xC
  02d64	e5933000	 ldr         r3, [r3]
  02d68	e1a0e00f	 mov         lr, pc
  02d6c	e12fff13	 bx          r3

; 877  :             VBridgeKGetOneTxBufferComplete(pSendData);

  02d70	e59d0008	 ldr         r0, [sp, #8]
  02d74	eb000000	 bl          VBridgeKGetOneTxBufferComplete

; 878  :         }

  02d78	eaffffeb	 b           |$LN2@KitlEthRec|
  02d7c		 |$LN1@KitlEthRec|
  02d7c		 |$LN3@KitlEthRec|

; 879  :     }
; 880  : 
; 881  :     // Now get packet
; 882  :     code = g_kitlEthState.pDriver->pfnGetFrame(pData, pLength);

  02d7c	e59d1034	 ldr         r1, [sp, #0x34]
  02d80	e59d0030	 ldr         r0, [sp, #0x30]
  02d84	e59f30b4	 ldr         r3, [pc, #0xB4]
  02d88	e5933000	 ldr         r3, [r3]
  02d8c	e2833010	 add         r3, r3, #0x10
  02d90	e5933000	 ldr         r3, [r3]
  02d94	e1a0e00f	 mov         lr, pc
  02d98	e12fff13	 bx          r3
  02d9c	e1a03800	 mov         r3, r0, lsl #16
  02da0	e1a03823	 mov         r3, r3, lsr #16
  02da4	e1cd31b8	 strh        r3, [sp, #0x18]
  02da8	e1dd31b8	 ldrh        r3, [sp, #0x18]
  02dac	e1cd30b0	 strh        r3, [sp]

; 883  : 
; 884  :     KITL_RETAILMSG(ZONE_RECV, ("-KitlEthRecv(rc = %d)\r\n", code > 0));

  02db0	e59f3084	 ldr         r3, [pc, #0x84]
  02db4	e5933440	 ldr         r3, [r3, #0x440]
  02db8	e3130020	 tst         r3, #0x20
  02dbc	0a00000d	 beq         |$LN13@KitlEthRec|
  02dc0	e1dd30b0	 ldrh        r3, [sp]
  02dc4	e3530000	 cmp         r3, #0
  02dc8	da000002	 ble         |$LN11@KitlEthRec|
  02dcc	e3a03001	 mov         r3, #1
  02dd0	e58d301c	 str         r3, [sp, #0x1C]
  02dd4	ea000001	 b           |$LN12@KitlEthRec|
  02dd8		 |$LN11@KitlEthRec|
  02dd8	e3a03000	 mov         r3, #0
  02ddc	e58d301c	 str         r3, [sp, #0x1C]
  02de0		 |$LN12@KitlEthRec|
  02de0	e59d101c	 ldr         r1, [sp, #0x1C]
  02de4	e59f004c	 ldr         r0, [pc, #0x4C]
  02de8	eb000000	 bl          KITLOutputDebugString
  02dec	e3a03001	 mov         r3, #1
  02df0	e58d3020	 str         r3, [sp, #0x20]
  02df4	ea000001	 b           |$LN14@KitlEthRec|
  02df8		 |$LN13@KitlEthRec|
  02df8	e3a03000	 mov         r3, #0
  02dfc	e58d3020	 str         r3, [sp, #0x20]
  02e00		 |$LN14@KitlEthRec|

; 885  :     return code > 0;

  02e00	e1dd30b0	 ldrh        r3, [sp]
  02e04	e3530000	 cmp         r3, #0
  02e08	da000002	 ble         |$LN15@KitlEthRec|
  02e0c	e3a03001	 mov         r3, #1
  02e10	e58d3024	 str         r3, [sp, #0x24]
  02e14	ea000001	 b           |$LN16@KitlEthRec|
  02e18		 |$LN15@KitlEthRec|
  02e18	e3a03000	 mov         r3, #0
  02e1c	e58d3024	 str         r3, [sp, #0x24]
  02e20		 |$LN16@KitlEthRec|
  02e20	e59d3024	 ldr         r3, [sp, #0x24]
  02e24	e58d300c	 str         r3, [sp, #0xC]

; 886  : }

  02e28	e59d000c	 ldr         r0, [sp, #0xC]
  02e2c	e28dd028	 add         sp, sp, #0x28
  02e30	e89d6000	 ldmia       sp, {sp, lr}
  02e34	e12fff1e	 bx          lr
  02e38		 |$LN20@KitlEthRec|
  02e38		 |$LN21@KitlEthRec|
  02e38	00000000	 DCD         |??_C@_0BI@PEEPNADN@?9KitlEthRecv?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  02e3c		 |$LN22@KitlEthRec|
  02e3c	00000000	 DCD         |dpCurSettings|
  02e40		 |$LN23@KitlEthRec|
  02e40	00000000	 DCD         |g_kitlEthState|
  02e44		 |$LN24@KitlEthRec|
  02e44	00000000	 DCD         |??_C@_0CD@HNBDALDE@?$CLKitlEthRecv?$CI0x?$CF08x?0?50x?$CF08x?9?$DO?$CFd?$CJ@|
  02e48		 |$M44249|

			 ENDP  ; |KitlEthRecv|

	EXPORT	|??_C@_0BE@NDAHGBJL@?9KitlEthEnableInt?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BI@OLDCGLHD@?$CLKitlEthEnableInt?$CI?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'

  000c0			 AREA	 |.pdata|, PDATA
|$T44265| DCD	|$LN11@KitlEthEna|
	DCD	0x40003204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BE@NDAHGBJL@?9KitlEthEnableInt?$AN?6?$AA@| DCB "-KitlEthEnableInt"
	DCB	0xd, 0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BI@OLDCGLHD@?$CLKitlEthEnableInt?$CI?$CFd?$CJ?$AN?6?$AA@| DCB "+K"
	DCB	"itlEthEnableInt(%d)", 0xd, 0xa, 0x0	; `string'
; Function compile flags: /Odtp

  02e48			 AREA	 |.text|, CODE, ARM

  02e48		 |KitlEthEnableInt| PROC

; 898  : {

  02e48		 |$LN11@KitlEthEna|
  02e48	e1a0c00d	 mov         r12, sp
  02e4c	e92d0001	 stmdb       sp!, {r0}
  02e50	e92d5000	 stmdb       sp!, {r12, lr}
  02e54	e24dd008	 sub         sp, sp, #8
  02e58		 |$M44262|

; 899  :     KITL_RETAILMSG(ZONE_KITL_OAL, ("+KitlEthEnableInt(%d)\r\n", enable));

  02e58	e59f30a4	 ldr         r3, [pc, #0xA4]
  02e5c	e5933440	 ldr         r3, [r3, #0x440]
  02e60	e3130a01	 tst         r3, #1, 20
  02e64	0a000005	 beq         |$LN5@KitlEthEna|
  02e68	e59d1010	 ldr         r1, [sp, #0x10]
  02e6c	e59f0098	 ldr         r0, [pc, #0x98]
  02e70	eb000000	 bl          KITLOutputDebugString
  02e74	e3a03001	 mov         r3, #1
  02e78	e58d3000	 str         r3, [sp]
  02e7c	ea000001	 b           |$LN6@KitlEthEna|
  02e80		 |$LN5@KitlEthEna|
  02e80	e3a03000	 mov         r3, #0
  02e84	e58d3000	 str         r3, [sp]
  02e88		 |$LN6@KitlEthEna|

; 900  :     if (enable) {

  02e88	e59d3010	 ldr         r3, [sp, #0x10]
  02e8c	e3530000	 cmp         r3, #0
  02e90	0a000006	 beq         |$LN2@KitlEthEna|

; 901  :         g_kitlEthState.pDriver->pfnEnableInts();

  02e94	e59f306c	 ldr         r3, [pc, #0x6C]
  02e98	e5933000	 ldr         r3, [r3]
  02e9c	e2833014	 add         r3, r3, #0x14
  02ea0	e5933000	 ldr         r3, [r3]
  02ea4	e1a0e00f	 mov         lr, pc
  02ea8	e12fff13	 bx          r3

; 902  :     } else {

  02eac	ea000005	 b           |$LN1@KitlEthEna|
  02eb0		 |$LN2@KitlEthEna|

; 903  :         g_kitlEthState.pDriver->pfnDisableInts();

  02eb0	e59f3050	 ldr         r3, [pc, #0x50]
  02eb4	e5933000	 ldr         r3, [r3]
  02eb8	e2833018	 add         r3, r3, #0x18
  02ebc	e5933000	 ldr         r3, [r3]
  02ec0	e1a0e00f	 mov         lr, pc
  02ec4	e12fff13	 bx          r3
  02ec8		 |$LN1@KitlEthEna|

; 904  :     }
; 905  :     KITL_RETAILMSG(ZONE_KITL_OAL, ("-KitlEthEnableInt\r\n"));

  02ec8	e59f3034	 ldr         r3, [pc, #0x34]
  02ecc	e5933440	 ldr         r3, [r3, #0x440]
  02ed0	e3130a01	 tst         r3, #1, 20
  02ed4	0a000004	 beq         |$LN7@KitlEthEna|
  02ed8	e59f0020	 ldr         r0, [pc, #0x20]
  02edc	eb000000	 bl          KITLOutputDebugString
  02ee0	e3a03001	 mov         r3, #1
  02ee4	e58d3004	 str         r3, [sp, #4]
  02ee8	ea000001	 b           |$LN8@KitlEthEna|
  02eec		 |$LN7@KitlEthEna|
  02eec	e3a03000	 mov         r3, #0
  02ef0	e58d3004	 str         r3, [sp, #4]
  02ef4		 |$LN8@KitlEthEna|

; 906  : }

  02ef4	e28dd008	 add         sp, sp, #8
  02ef8	e89d6000	 ldmia       sp, {sp, lr}
  02efc	e12fff1e	 bx          lr
  02f00		 |$LN12@KitlEthEna|
  02f00		 |$LN13@KitlEthEna|
  02f00	00000000	 DCD         |??_C@_0BE@NDAHGBJL@?9KitlEthEnableInt?$AN?6?$AA@|
  02f04		 |$LN14@KitlEthEna|
  02f04	00000000	 DCD         |dpCurSettings|
  02f08		 |$LN15@KitlEthEna|
  02f08	00000000	 DCD         |g_kitlEthState|
  02f0c		 |$LN16@KitlEthEna|
  02f0c	00000000	 DCD         |??_C@_0BI@OLDCGLHD@?$CLKitlEthEnableInt?$CI?$CFd?$CJ?$AN?6?$AA@|
  02f10		 |$M44263|

			 ENDP  ; |KitlEthEnableInt|

	END
