; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\KITL\kitlserial.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|g_kitlSign| DCB 0x6b
	DCB	0x49
	DCB	0x54
	DCB	0x4c
	EXPORT	|??_C@_0BO@KPIGKMGK@?9OALKitlSerialInit?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CG@IJDAEBCE@WARN?3?5KITL?5will?5run?5in?5polling?5m@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CN@MENCFIED@WARN?3?5KITL?5can?8t?5obtain?5SYSINTR?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CO@BPFMIJNH@WARN?3?5KITL?5can?8t?5obtain?5IRQ?5for?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CF@GMMNDEHJ@ERROR?3?5KITL?5call?5to?5pfnInit?5fail@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CE@LGCGCDLA@ERROR?3?5KITL?5device?5driver?5is?5NUL@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DB@NNJFABKG@?$CLOALKitlSerialInit?$CI?8?$CFS?8?0?5?8?$CFs?8?0?50@| [ DATA ] ; `string'
	EXPORT	|OALKitlSerialInit|
	IMPORT	|memcpy|
	IMPORT	|OEMInterruptEnable|
	IMPORT	|OEMIoControl|
	IMPORT	|KITLOutputDebugString|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.bss|, NOINIT
|g_kitlSerialState| % 0x610

  00000			 AREA	 |.pdata|, PDATA
|$T43335| DCD	|$LN32@OALKitlSer|
	DCD	0x40013404
; File c:\wince600\platform\common\src\common\kitl\kitlserial.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BO@KPIGKMGK@?9OALKitlSerialInit?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"OALKitlSerialInit(rc = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CG@IJDAEBCE@WARN?3?5KITL?5will?5run?5in?5polling?5m@| DCB "WARN: "
	DCB	"KITL will run in polling mode", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CN@MENCFIED@WARN?3?5KITL?5can?8t?5obtain?5SYSINTR?5@| DCB "WARN: "
	DCB	"KITL can't obtain SYSINTR for IRQ %d", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CO@BPFMIJNH@WARN?3?5KITL?5can?8t?5obtain?5IRQ?5for?5@| DCB "WARN:"
	DCB	" KITL can't obtain IRQ for KITL device", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CF@GMMNDEHJ@ERROR?3?5KITL?5call?5to?5pfnInit?5fail@| DCB "ERROR: "
	DCB	"KITL call to pfnInit failed", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CE@LGCGCDLA@ERROR?3?5KITL?5device?5driver?5is?5NUL@| DCB "ERROR: "
	DCB	"KITL device driver is NULL", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DB@NNJFABKG@?$CLOALKitlSerialInit?$CI?8?$CFS?8?0?5?8?$CFs?8?0?50@| DCB "+"
	DCB	"OALKitlSerialInit('%S', '%s', 0x%08x, 0x%08x)", 0xd, 0xa
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlSerialInit| PROC

; 339  : ) {

  00000		 |$LN32@OALKitlSer|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd068	 sub         sp, sp, #0x68
  00010		 |$M43332|

; 340  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3008	 str         r3, [sp, #8]

; 341  :     OAL_KITL_SERIAL_DRIVER *pDriver;
; 342  :     KITL_SERIAL_INFO *pInfo = &g_kitlSerialState.info;

  00018	e59f3470	 ldr         r3, [pc, #0x470]
  0001c	e2833004	 add         r3, r3, #4
  00020	e58d3010	 str         r3, [sp, #0x10]

; 343  :     UINT32 irq, sysIntr;
; 344  : 
; 345  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 346  :         "+OALKitlSerialInit('%S', '%s', 0x%08x, 0x%08x)\r\n",
; 347  :         deviceId, pDevice->name, pArgs, pKitl
; 348  :     ));

  00024	e59f3460	 ldr         r3, [pc, #0x460]
  00028	e5933440	 ldr         r3, [r3, #0x440]
  0002c	e3130a01	 tst         r3, #1, 20
  00030	0a00000a	 beq         |$LN16@OALKitlSer|
  00034	e59d307c	 ldr         r3, [sp, #0x7C]
  00038	e58d3000	 str         r3, [sp]
  0003c	e59d3078	 ldr         r3, [sp, #0x78]
  00040	e59d2074	 ldr         r2, [sp, #0x74]
  00044	e5922000	 ldr         r2, [r2]
  00048	e59d1070	 ldr         r1, [sp, #0x70]
  0004c	e59f0478	 ldr         r0, [pc, #0x478]
  00050	eb000000	 bl          KITLOutputDebugString
  00054	e3a03001	 mov         r3, #1
  00058	e58d3040	 str         r3, [sp, #0x40]
  0005c	ea000001	 b           |$LN17@OALKitlSer|
  00060		 |$LN16@OALKitlSer|
  00060	e3a03000	 mov         r3, #0
  00064	e58d3040	 str         r3, [sp, #0x40]
  00068		 |$LN17@OALKitlSer|

; 349  : 
; 350  :     // Cast driver config parameter
; 351  :     pDriver = (OAL_KITL_SERIAL_DRIVER*)pDevice->pDriver;

  00068	e59d3074	 ldr         r3, [sp, #0x74]
  0006c	e2833014	 add         r3, r3, #0x14
  00070	e5933000	 ldr         r3, [r3]
  00074	e58d3018	 str         r3, [sp, #0x18]

; 352  :     if (pDriver == NULL) {

  00078	e59d3018	 ldr         r3, [sp, #0x18]
  0007c	e3530000	 cmp         r3, #0
  00080	1a00000b	 bne         |$LN13@OALKitlSer|

; 353  :         KITL_RETAILMSG(ZONE_ERROR, ("ERROR: KITL device driver is NULL\r\n"));

  00084	e59f3400	 ldr         r3, [pc, #0x400]
  00088	e5933440	 ldr         r3, [r3, #0x440]
  0008c	e3130902	 tst         r3, #2, 18
  00090	0a000004	 beq         |$LN18@OALKitlSer|
  00094	e59f042c	 ldr         r0, [pc, #0x42C]
  00098	eb000000	 bl          KITLOutputDebugString
  0009c	e3a03001	 mov         r3, #1
  000a0	e58d3044	 str         r3, [sp, #0x44]
  000a4	ea000001	 b           |$LN19@OALKitlSer|
  000a8		 |$LN18@OALKitlSer|
  000a8	e3a03000	 mov         r3, #0
  000ac	e58d3044	 str         r3, [sp, #0x44]
  000b0		 |$LN19@OALKitlSer|

; 354  :         goto cleanUp;

  000b0	ea0000e2	 b           |$cleanUp$43257|
  000b4		 |$LN13@OALKitlSer|

; 355  :     }        
; 356  :     // initialize serial kitl information
; 357  :     pInfo->pAddress = (UINT8*)pArgs->devLoc.PhysicalLoc;

  000b4	e59d3078	 ldr         r3, [sp, #0x78]
  000b8	e2833010	 add         r3, r3, #0x10
  000bc	e5932000	 ldr         r2, [r3]
  000c0	e59d3010	 ldr         r3, [sp, #0x10]
  000c4	e5832000	 str         r2, [r3]

; 358  :     pInfo->baudRate = pArgs->baudRate;

  000c8	e59d3078	 ldr         r3, [sp, #0x78]
  000cc	e2831018	 add         r1, r3, #0x18
  000d0	e59d3010	 ldr         r3, [sp, #0x10]
  000d4	e2832004	 add         r2, r3, #4
  000d8	e5913000	 ldr         r3, [r1]
  000dc	e5823000	 str         r3, [r2]

; 359  :     pInfo->dataBits = pArgs->dataBits;

  000e0	e59d3078	 ldr         r3, [sp, #0x78]
  000e4	e283101c	 add         r1, r3, #0x1C
  000e8	e59d3010	 ldr         r3, [sp, #0x10]
  000ec	e2832008	 add         r2, r3, #8
  000f0	e5913000	 ldr         r3, [r1]
  000f4	e5823000	 str         r3, [r2]

; 360  :     pInfo->stopBits = pArgs->stopBits;

  000f8	e59d3078	 ldr         r3, [sp, #0x78]
  000fc	e2831020	 add         r1, r3, #0x20
  00100	e59d3010	 ldr         r3, [sp, #0x10]
  00104	e283200c	 add         r2, r3, #0xC
  00108	e5913000	 ldr         r3, [r1]
  0010c	e5823000	 str         r3, [r2]

; 361  :     pInfo->parity   = pArgs->parity;

  00110	e59d3078	 ldr         r3, [sp, #0x78]
  00114	e2831024	 add         r1, r3, #0x24
  00118	e59d3010	 ldr         r3, [sp, #0x10]
  0011c	e2832010	 add         r2, r3, #0x10
  00120	e5913000	 ldr         r3, [r1]
  00124	e5823000	 str         r3, [r2]

; 362  :     pInfo->bestSize = 1;

  00128	e59d3010	 ldr         r3, [sp, #0x10]
  0012c	e2832014	 add         r2, r3, #0x14
  00130	e3a03001	 mov         r3, #1
  00134	e5823000	 str         r3, [r2]

; 363  : 
; 364  :     // Call pfnInit
; 365  :     if (!pDriver->pfnInit(pInfo)) {

  00138	e59d0010	 ldr         r0, [sp, #0x10]
  0013c	e59d3018	 ldr         r3, [sp, #0x18]
  00140	e5933000	 ldr         r3, [r3]
  00144	e1a0e00f	 mov         lr, pc
  00148	e12fff13	 bx          r3
  0014c	e58d0048	 str         r0, [sp, #0x48]
  00150	e59d3048	 ldr         r3, [sp, #0x48]
  00154	e3530000	 cmp         r3, #0
  00158	1a00000b	 bne         |$LN12@OALKitlSer|

; 366  :         KITL_RETAILMSG(ZONE_ERROR, ("ERROR: KITL call to pfnInit failed\r\n"));                

  0015c	e59f3328	 ldr         r3, [pc, #0x328]
  00160	e5933440	 ldr         r3, [r3, #0x440]
  00164	e3130902	 tst         r3, #2, 18
  00168	0a000004	 beq         |$LN20@OALKitlSer|
  0016c	e59f0350	 ldr         r0, [pc, #0x350]
  00170	eb000000	 bl          KITLOutputDebugString
  00174	e3a03001	 mov         r3, #1
  00178	e58d304c	 str         r3, [sp, #0x4C]
  0017c	ea000001	 b           |$LN21@OALKitlSer|
  00180		 |$LN20@OALKitlSer|
  00180	e3a03000	 mov         r3, #0
  00184	e58d304c	 str         r3, [sp, #0x4C]
  00188		 |$LN21@OALKitlSer|

; 367  :         goto cleanUp;

  00188	ea0000ac	 b           |$cleanUp$43257|
  0018c		 |$LN12@OALKitlSer|

; 368  :     }
; 369  : 
; 370  :     // Best size can't be larger than MTU
; 371  :     if (pInfo->bestSize > KITL_MTU) pInfo->bestSize = KITL_MTU;

  0018c	e59d3010	 ldr         r3, [sp, #0x10]
  00190	e2833014	 add         r3, r3, #0x14
  00194	e5933000	 ldr         r3, [r3]
  00198	e3530e5f	 cmp         r3, #0x5F, 28
  0019c	9a000003	 bls         |$LN11@OALKitlSer|
  001a0	e59d3010	 ldr         r3, [sp, #0x10]
  001a4	e2832014	 add         r2, r3, #0x14
  001a8	e3a03e5f	 mov         r3, #0x5F, 28
  001ac	e5823000	 str         r3, [r2]
  001b0		 |$LN11@OALKitlSer|

; 372  : 
; 373  :     // Map and enable interrupt
; 374  :     if ((pArgs->flags & OAL_KITL_FLAGS_POLL) != 0) {

  001b0	e59d3078	 ldr         r3, [sp, #0x78]
  001b4	e5933000	 ldr         r3, [r3]
  001b8	e3130010	 tst         r3, #0x10
  001bc	0a000002	 beq         |$LN10@OALKitlSer|

; 375  :         sysIntr = KITL_SYSINTR_NOINTR;

  001c0	e3e03000	 mvn         r3, #0
  001c4	e58d300c	 str         r3, [sp, #0xC]

; 376  :     } else {

  001c8	ea000053	 b           |$LN9@OALKitlSer|
  001cc		 |$LN10@OALKitlSer|

; 377  :         // Get IRQ, when interface is undefined use Pin as IRQ
; 378  :         if (pArgs->devLoc.IfcType == InterfaceTypeUndefined) {

  001cc	e59d3078	 ldr         r3, [sp, #0x78]
  001d0	e2833004	 add         r3, r3, #4
  001d4	e5933000	 ldr         r3, [r3]
  001d8	e3730001	 cmn         r3, #1
  001dc	1a000004	 bne         |$LN8@OALKitlSer|

; 379  :             irq = pArgs->devLoc.Pin;

  001e0	e59d3078	 ldr         r3, [sp, #0x78]
  001e4	e2833014	 add         r3, r3, #0x14
  001e8	e5933000	 ldr         r3, [r3]
  001ec	e58d3014	 str         r3, [sp, #0x14]

; 380  :         } else {

  001f0	ea00001a	 b           |$LN7@OALKitlSer|
  001f4		 |$LN8@OALKitlSer|

; 381  :             if (!OEMIoControl(
; 382  :                 IOCTL_HAL_REQUEST_IRQ, &pArgs->devLoc, sizeof(pArgs->devLoc),
; 383  :                 &irq, sizeof(irq), NULL
; 384  :             )) {                

  001f4	e3a03000	 mov         r3, #0
  001f8	e58d3004	 str         r3, [sp, #4]
  001fc	e3a03004	 mov         r3, #4
  00200	e58d3000	 str         r3, [sp]
  00204	e28d3014	 add         r3, sp, #0x14
  00208	e3a02014	 mov         r2, #0x14
  0020c	e59d1078	 ldr         r1, [sp, #0x78]
  00210	e2811004	 add         r1, r1, #4
  00214	e59f02a4	 ldr         r0, [pc, #0x2A4]
  00218	eb000000	 bl          OEMIoControl
  0021c	e58d0050	 str         r0, [sp, #0x50]
  00220	e59d3050	 ldr         r3, [sp, #0x50]
  00224	e3530000	 cmp         r3, #0
  00228	1a00000c	 bne         |$LN6@OALKitlSer|

; 385  :                 KITL_RETAILMSG(ZONE_WARNING, (
; 386  :                     "WARN: KITL can't obtain IRQ for KITL device\r\n"
; 387  :                 ));

  0022c	e59f3258	 ldr         r3, [pc, #0x258]
  00230	e5933440	 ldr         r3, [r3, #0x440]
  00234	e3130001	 tst         r3, #1
  00238	0a000004	 beq         |$LN22@OALKitlSer|
  0023c	e59f0278	 ldr         r0, [pc, #0x278]
  00240	eb000000	 bl          KITLOutputDebugString
  00244	e3a03001	 mov         r3, #1
  00248	e58d3054	 str         r3, [sp, #0x54]
  0024c	ea000001	 b           |$LN23@OALKitlSer|
  00250		 |$LN22@OALKitlSer|
  00250	e3a03000	 mov         r3, #0
  00254	e58d3054	 str         r3, [sp, #0x54]
  00258		 |$LN23@OALKitlSer|

; 388  :                 irq = OAL_INTR_IRQ_UNDEFINED;

  00258	e3e03000	 mvn         r3, #0
  0025c	e58d3014	 str         r3, [sp, #0x14]
  00260		 |$LN6@OALKitlSer|
  00260		 |$LN7@OALKitlSer|

; 389  :             }
; 390  :         }
; 391  :         // Get SYSINTR for IRQ
; 392  :         if (irq != OAL_INTR_IRQ_UNDEFINED) {

  00260	e59d3014	 ldr         r3, [sp, #0x14]
  00264	e3730001	 cmn         r3, #1
  00268	0a000029	 beq         |$LN5@OALKitlSer|

; 393  :             UINT32 aIrqs[3];
; 394  :         
; 395  :             aIrqs[0] = -1;

  0026c	e3e03000	 mvn         r3, #0
  00270	e58d301c	 str         r3, [sp, #0x1C]

; 396  :             aIrqs[1] = OAL_INTR_FORCE_STATIC;

  00274	e3a03004	 mov         r3, #4
  00278	e58d3020	 str         r3, [sp, #0x20]

; 397  :             aIrqs[2] = irq;

  0027c	e59d3014	 ldr         r3, [sp, #0x14]
  00280	e58d3024	 str         r3, [sp, #0x24]

; 398  :             if (
; 399  :                 OEMIoControl(
; 400  :                     IOCTL_HAL_REQUEST_SYSINTR, aIrqs, sizeof(aIrqs), &sysIntr,
; 401  :                     sizeof(sysIntr), NULL
; 402  :                 ) && sysIntr != SYSINTR_UNDEFINED
; 403  :             ) {                

  00284	e3a03000	 mov         r3, #0
  00288	e58d3004	 str         r3, [sp, #4]
  0028c	e3a03004	 mov         r3, #4
  00290	e58d3000	 str         r3, [sp]
  00294	e28d300c	 add         r3, sp, #0xC
  00298	e3a0200c	 mov         r2, #0xC
  0029c	e28d101c	 add         r1, sp, #0x1C
  002a0	e59f0210	 ldr         r0, [pc, #0x210]
  002a4	eb000000	 bl          OEMIoControl
  002a8	e58d0058	 str         r0, [sp, #0x58]
  002ac	e59d3058	 ldr         r3, [sp, #0x58]
  002b0	e3530000	 cmp         r3, #0
  002b4	0a000007	 beq         |$LN4@OALKitlSer|
  002b8	e59d300c	 ldr         r3, [sp, #0xC]
  002bc	e3730001	 cmn         r3, #1
  002c0	0a000004	 beq         |$LN4@OALKitlSer|

; 404  :                 OEMInterruptEnable(sysIntr, NULL, 0);

  002c4	e3a02000	 mov         r2, #0
  002c8	e3a01000	 mov         r1, #0
  002cc	e59d000c	 ldr         r0, [sp, #0xC]
  002d0	eb000000	 bl          OEMInterruptEnable

; 405  :             } else {

  002d4	ea00000d	 b           |$LN3@OALKitlSer|
  002d8		 |$LN4@OALKitlSer|

; 406  :                 KITL_RETAILMSG(ZONE_WARNING, (
; 407  :                     "WARN: KITL can't obtain SYSINTR for IRQ %d\r\n", irq
; 408  :                 ));

  002d8	e59f31ac	 ldr         r3, [pc, #0x1AC]
  002dc	e5933440	 ldr         r3, [r3, #0x440]
  002e0	e3130001	 tst         r3, #1
  002e4	0a000005	 beq         |$LN24@OALKitlSer|
  002e8	e59d1014	 ldr         r1, [sp, #0x14]
  002ec	e59f01c0	 ldr         r0, [pc, #0x1C0]
  002f0	eb000000	 bl          KITLOutputDebugString
  002f4	e3a03001	 mov         r3, #1
  002f8	e58d305c	 str         r3, [sp, #0x5C]
  002fc	ea000001	 b           |$LN25@OALKitlSer|
  00300		 |$LN24@OALKitlSer|
  00300	e3a03000	 mov         r3, #0
  00304	e58d305c	 str         r3, [sp, #0x5C]
  00308		 |$LN25@OALKitlSer|

; 409  :                 sysIntr = KITL_SYSINTR_NOINTR;

  00308	e3e03000	 mvn         r3, #0
  0030c	e58d300c	 str         r3, [sp, #0xC]
  00310		 |$LN3@OALKitlSer|

; 410  :             }
; 411  :         } else {

  00310	ea000001	 b           |$LN2@OALKitlSer|
  00314		 |$LN5@OALKitlSer|

; 412  :             sysIntr = KITL_SYSINTR_NOINTR;

  00314	e3e03000	 mvn         r3, #0
  00318	e58d300c	 str         r3, [sp, #0xC]
  0031c		 |$LN2@OALKitlSer|
  0031c		 |$LN9@OALKitlSer|

; 413  :         }
; 414  :     }
; 415  : 
; 416  :     if(sysIntr == KITL_SYSINTR_NOINTR) {

  0031c	e59d300c	 ldr         r3, [sp, #0xC]
  00320	e3730001	 cmn         r3, #1
  00324	1a00000a	 bne         |$LN1@OALKitlSer|

; 417  :         KITL_RETAILMSG(ZONE_WARNING, (
; 418  :             "WARN: KITL will run in polling mode\r\n"
; 419  :         ));

  00328	e59f315c	 ldr         r3, [pc, #0x15C]
  0032c	e5933440	 ldr         r3, [r3, #0x440]
  00330	e3130001	 tst         r3, #1
  00334	0a000004	 beq         |$LN26@OALKitlSer|
  00338	e59f0170	 ldr         r0, [pc, #0x170]
  0033c	eb000000	 bl          KITLOutputDebugString
  00340	e3a03001	 mov         r3, #1
  00344	e58d3060	 str         r3, [sp, #0x60]
  00348	ea000001	 b           |$LN27@OALKitlSer|
  0034c		 |$LN26@OALKitlSer|
  0034c	e3a03000	 mov         r3, #0
  00350	e58d3060	 str         r3, [sp, #0x60]
  00354		 |$LN27@OALKitlSer|
  00354		 |$LN1@OALKitlSer|

; 420  :     }
; 421  :     //-----------------------------------------------------------------------
; 422  :     // Initalize KITL transport structure
; 423  :     //-----------------------------------------------------------------------
; 424  : 
; 425  :     memcpy(pKitl->szName, deviceId, sizeof(pKitl->szName));

  00354	e3a02010	 mov         r2, #0x10
  00358	e59d1070	 ldr         r1, [sp, #0x70]
  0035c	e59d307c	 ldr         r3, [sp, #0x7C]
  00360	e2830004	 add         r0, r3, #4
  00364	eb000000	 bl          memcpy

; 426  :     pKitl->Interrupt     = (UCHAR)sysIntr; 

  00368	e59d300c	 ldr         r3, [sp, #0xC]
  0036c	e20320ff	 and         r2, r3, #0xFF
  00370	e59d307c	 ldr         r3, [sp, #0x7C]
  00374	e2833014	 add         r3, r3, #0x14
  00378	e5c32000	 strb        r2, [r3]

; 427  :     pKitl->WindowSize    = OAL_KITL_WINDOW_SIZE;

  0037c	e59d307c	 ldr         r3, [sp, #0x7C]
  00380	e2832015	 add         r2, r3, #0x15
  00384	e3a03008	 mov         r3, #8
  00388	e5c23000	 strb        r3, [r2]

; 428  :     pKitl->FrmHdrSize    = sizeof(OAL_KITL_SERIAL_HEADER);

  0038c	e59d307c	 ldr         r3, [sp, #0x7C]
  00390	e2832016	 add         r2, r3, #0x16
  00394	e3a0300a	 mov         r3, #0xA
  00398	e5c23000	 strb        r3, [r2]

; 429  :     pKitl->dwPhysBuffer  = 0;

  0039c	e59d307c	 ldr         r3, [sp, #0x7C]
  003a0	e2832018	 add         r2, r3, #0x18
  003a4	e3a03000	 mov         r3, #0
  003a8	e5823000	 str         r3, [r2]

; 430  :     pKitl->dwPhysBufLen  = 0;

  003ac	e59d307c	 ldr         r3, [sp, #0x7C]
  003b0	e283201c	 add         r2, r3, #0x1C
  003b4	e3a03000	 mov         r3, #0
  003b8	e5823000	 str         r3, [r2]

; 431  :     pKitl->pfnEncode     = SerialEncode;

  003bc	e59d307c	 ldr         r3, [sp, #0x7C]
  003c0	e2832020	 add         r2, r3, #0x20
  003c4	e59f30e0	 ldr         r3, [pc, #0xE0]
  003c8	e5823000	 str         r3, [r2]

; 432  :     pKitl->pfnDecode     = SerialDecode;

  003cc	e59d307c	 ldr         r3, [sp, #0x7C]
  003d0	e2832024	 add         r2, r3, #0x24
  003d4	e59f30cc	 ldr         r3, [pc, #0xCC]
  003d8	e5823000	 str         r3, [r2]

; 433  :     pKitl->pfnSend       = SerialSend;

  003dc	e59d307c	 ldr         r3, [sp, #0x7C]
  003e0	e2832028	 add         r2, r3, #0x28
  003e4	e59f30b8	 ldr         r3, [pc, #0xB8]
  003e8	e5823000	 str         r3, [r2]

; 434  :     pKitl->pfnRecv       = SerialRecv;

  003ec	e59d307c	 ldr         r3, [sp, #0x7C]
  003f0	e283202c	 add         r2, r3, #0x2C
  003f4	e59f30a4	 ldr         r3, [pc, #0xA4]
  003f8	e5823000	 str         r3, [r2]

; 435  :     pKitl->pfnEnableInt  = SerialEnableInt;

  003fc	e59d307c	 ldr         r3, [sp, #0x7C]
  00400	e2832030	 add         r2, r3, #0x30
  00404	e59f3090	 ldr         r3, [pc, #0x90]
  00408	e5823000	 str         r3, [r2]

; 436  :     pKitl->pfnGetDevCfg  = SerialGetDevCfg;

  0040c	e59d307c	 ldr         r3, [sp, #0x7C]
  00410	e2832034	 add         r2, r3, #0x34
  00414	e59f307c	 ldr         r3, [pc, #0x7C]
  00418	e5823000	 str         r3, [r2]

; 437  :     pKitl->pfnSetHostCfg = SerialSetHostCfg;

  0041c	e59d307c	 ldr         r3, [sp, #0x7C]
  00420	e2832038	 add         r2, r3, #0x38
  00424	e59f3068	 ldr         r3, [pc, #0x68]
  00428	e5823000	 str         r3, [r2]

; 438  : 
; 439  :     //-----------------------------------------------------------------------
; 440  :     // Initalize state structure
; 441  :     //-----------------------------------------------------------------------
; 442  : 
; 443  :     g_kitlSerialState.pDriver = pDriver;

  0042c	e59d2018	 ldr         r2, [sp, #0x18]
  00430	e59f3058	 ldr         r3, [pc, #0x58]
  00434	e5832000	 str         r2, [r3]

; 444  : 
; 445  :     // Done
; 446  :     rc = TRUE;

  00438	e3a03001	 mov         r3, #1
  0043c	e58d3008	 str         r3, [sp, #8]
  00440		 |$cleanUp$43257|

; 447  :     
; 448  : cleanUp:
; 449  :     KITL_RETAILMSG(ZONE_KITL_OAL, ("-OALKitlSerialInit(rc = %d)\r\n", rc));

  00440	e59f3044	 ldr         r3, [pc, #0x44]
  00444	e5933440	 ldr         r3, [r3, #0x440]
  00448	e3130a01	 tst         r3, #1, 20
  0044c	0a000005	 beq         |$LN28@OALKitlSer|
  00450	e59d1008	 ldr         r1, [sp, #8]
  00454	e59f002c	 ldr         r0, [pc, #0x2C]
  00458	eb000000	 bl          KITLOutputDebugString
  0045c	e3a03001	 mov         r3, #1
  00460	e58d3064	 str         r3, [sp, #0x64]
  00464	ea000001	 b           |$LN29@OALKitlSer|
  00468		 |$LN28@OALKitlSer|
  00468	e3a03000	 mov         r3, #0
  0046c	e58d3064	 str         r3, [sp, #0x64]
  00470		 |$LN29@OALKitlSer|

; 450  :     return rc;

  00470	e59d3008	 ldr         r3, [sp, #8]
  00474	e58d303c	 str         r3, [sp, #0x3C]

; 451  : }

  00478	e59d003c	 ldr         r0, [sp, #0x3C]
  0047c	e28dd068	 add         sp, sp, #0x68
  00480	e89d6000	 ldmia       sp, {sp, lr}
  00484	e12fff1e	 bx          lr
  00488		 |$LN33@OALKitlSer|
  00488		 |$LN34@OALKitlSer|
  00488	00000000	 DCD         |??_C@_0BO@KPIGKMGK@?9OALKitlSerialInit?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  0048c		 |$LN35@OALKitlSer|
  0048c	00000000	 DCD         |dpCurSettings|
  00490		 |$LN36@OALKitlSer|
  00490	00000000	 DCD         |g_kitlSerialState|
  00494		 |$LN37@OALKitlSer|
  00494	00000000	 DCD         |SerialSetHostCfg|
  00498		 |$LN38@OALKitlSer|
  00498	00000000	 DCD         |SerialGetDevCfg|
  0049c		 |$LN39@OALKitlSer|
  0049c	00000000	 DCD         |SerialEnableInt|
  004a0		 |$LN40@OALKitlSer|
  004a0	00000000	 DCD         |SerialRecv|
  004a4		 |$LN41@OALKitlSer|
  004a4	00000000	 DCD         |SerialSend|
  004a8		 |$LN42@OALKitlSer|
  004a8	00000000	 DCD         |SerialDecode|
  004ac		 |$LN43@OALKitlSer|
  004ac	00000000	 DCD         |SerialEncode|
  004b0		 |$LN44@OALKitlSer|
  004b0	00000000	 DCD         |??_C@_0CG@IJDAEBCE@WARN?3?5KITL?5will?5run?5in?5polling?5m@|
  004b4		 |$LN45@OALKitlSer|
  004b4	00000000	 DCD         |??_C@_0CN@MENCFIED@WARN?3?5KITL?5can?8t?5obtain?5SYSINTR?5@|
  004b8		 |$LN46@OALKitlSer|
  004b8	01010098	 DCD         0x1010098
  004bc		 |$LN47@OALKitlSer|
  004bc	00000000	 DCD         |??_C@_0CO@BPFMIJNH@WARN?3?5KITL?5can?8t?5obtain?5IRQ?5for?5@|
  004c0		 |$LN48@OALKitlSer|
  004c0	01010090	 DCD         0x1010090
  004c4		 |$LN49@OALKitlSer|
  004c4	00000000	 DCD         |??_C@_0CF@GMMNDEHJ@ERROR?3?5KITL?5call?5to?5pfnInit?5fail@|
  004c8		 |$LN50@OALKitlSer|
  004c8	00000000	 DCD         |??_C@_0CE@LGCGCDLA@ERROR?3?5KITL?5device?5driver?5is?5NUL@|
  004cc		 |$LN51@OALKitlSer|
  004cc	00000000	 DCD         |??_C@_0DB@NNJFABKG@?$CLOALKitlSerialInit?$CI?8?$CFS?8?0?5?8?$CFs?8?0?50@|
  004d0		 |$M43333|

			 ENDP  ; |OALKitlSerialInit|

	EXPORT	|??_C@_0BG@PDHAIEPB@?9SerialSend?$CIrc?5?$DN?51?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BK@FJBKAKDG@?$CLSerialSend?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'

  00008			 AREA	 |.pdata|, PDATA
|$T43366| DCD	|$LN14@SerialSend|
	DCD	0x40006504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BG@PDHAIEPB@?9SerialSend?$CIrc?5?$DN?51?$CJ?$AN?6?$AA@| DCB "-Ser"
	DCB	"ialSend(rc = 1)", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BK@FJBKAKDG@?$CLSerialSend?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@| DCB "+"
	DCB	"SerialSend(0x%08x, %d)", 0xd, 0xa, 0x0	; `string'
; Function compile flags: /Odtp

  004d0			 AREA	 |.text|, CODE, ARM

  004d0		 |SerialSend| PROC

; 72   : {

  004d0		 |$LN14@SerialSend|
  004d0	e1a0c00d	 mov         r12, sp
  004d4	e92d0003	 stmdb       sp!, {r0, r1}
  004d8	e92d5000	 stmdb       sp!, {r12, lr}
  004dc	e24dd01c	 sub         sp, sp, #0x1C
  004e0		 |$M43363|

; 73   :     UINT16 bestSize = (UINT16)g_kitlSerialState.info.bestSize;

  004e0	e59f3174	 ldr         r3, [pc, #0x174]
  004e4	e5933018	 ldr         r3, [r3, #0x18]
  004e8	e1a03803	 mov         r3, r3, lsl #16
  004ec	e1a03823	 mov         r3, r3, lsr #16
  004f0	e1cd30b6	 strh        r3, [sp, #6]

; 74   :     UINT16 total = length;

  004f4	e1dd32b8	 ldrh        r3, [sp, #0x28]
  004f8	e1cd30b4	 strh        r3, [sp, #4]

; 75   :     UINT16 toSend, sent;
; 76   : 
; 77   :     KITL_RETAILMSG(ZONE_SEND, (
; 78   :         "+SerialSend(0x%08x, %d)\r\n", pData, length
; 79   :     ));

  004fc	e59f3154	 ldr         r3, [pc, #0x154]
  00500	e5933440	 ldr         r3, [r3, #0x440]
  00504	e3130010	 tst         r3, #0x10
  00508	0a000006	 beq         |$LN6@SerialSend|
  0050c	e1dd22b8	 ldrh        r2, [sp, #0x28]
  00510	e59d1024	 ldr         r1, [sp, #0x24]
  00514	e59f0144	 ldr         r0, [pc, #0x144]
  00518	eb000000	 bl          KITLOutputDebugString
  0051c	e3a03001	 mov         r3, #1
  00520	e58d300c	 str         r3, [sp, #0xC]
  00524	ea000001	 b           |$LN7@SerialSend|
  00528		 |$LN6@SerialSend|
  00528	e3a03000	 mov         r3, #0
  0052c	e58d300c	 str         r3, [sp, #0xC]
  00530		 |$LN7@SerialSend|
  00530		 |$LN3@SerialSend|

; 80   : 
; 81   :     // block until send is complete; no timeout
; 82   :     while (total > 0) {

  00530	e1dd30b4	 ldrh        r3, [sp, #4]
  00534	e3530000	 cmp         r3, #0
  00538	da000027	 ble         |$LN2@SerialSend|

; 83   :         toSend = (total > bestSize) ? bestSize : total;

  0053c	e1dd30b4	 ldrh        r3, [sp, #4]
  00540	e1a02003	 mov         r2, r3
  00544	e1dd30b6	 ldrh        r3, [sp, #6]
  00548	e1520003	 cmp         r2, r3
  0054c	da000002	 ble         |$LN8@SerialSend|
  00550	e1dd30b6	 ldrh        r3, [sp, #6]
  00554	e58d3010	 str         r3, [sp, #0x10]
  00558	ea000001	 b           |$LN9@SerialSend|
  0055c		 |$LN8@SerialSend|
  0055c	e1dd30b4	 ldrh        r3, [sp, #4]
  00560	e58d3010	 str         r3, [sp, #0x10]
  00564		 |$LN9@SerialSend|
  00564	e59d3010	 ldr         r3, [sp, #0x10]
  00568	e1a03803	 mov         r3, r3, lsl #16
  0056c	e1a03823	 mov         r3, r3, lsr #16
  00570	e1cd30b0	 strh        r3, [sp]

; 84   :         sent = g_kitlSerialState.pDriver->pfnSend(pData, toSend);

  00574	e1dd10b0	 ldrh        r1, [sp]
  00578	e59d0024	 ldr         r0, [sp, #0x24]
  0057c	e59f30d8	 ldr         r3, [pc, #0xD8]
  00580	e5933000	 ldr         r3, [r3]
  00584	e2833008	 add         r3, r3, #8
  00588	e5933000	 ldr         r3, [r3]
  0058c	e1a0e00f	 mov         lr, pc
  00590	e12fff13	 bx          r3
  00594	e1a03800	 mov         r3, r0, lsl #16
  00598	e1a03823	 mov         r3, r3, lsr #16
  0059c	e1cd31b4	 strh        r3, [sp, #0x14]
  005a0	e1dd31b4	 ldrh        r3, [sp, #0x14]
  005a4	e1cd30b2	 strh        r3, [sp, #2]

; 85   :         total -= sent;

  005a8	e1dd30b2	 ldrh        r3, [sp, #2]
  005ac	e1a02003	 mov         r2, r3
  005b0	e1dd30b4	 ldrh        r3, [sp, #4]
  005b4	e0433002	 sub         r3, r3, r2
  005b8	e1a03803	 mov         r3, r3, lsl #16
  005bc	e1a03823	 mov         r3, r3, lsr #16
  005c0	e1cd30b4	 strh        r3, [sp, #4]

; 86   :         pData += sent;

  005c4	e1dd30b2	 ldrh        r3, [sp, #2]
  005c8	e1a02003	 mov         r2, r3
  005cc	e59d3024	 ldr         r3, [sp, #0x24]
  005d0	e0833002	 add         r3, r3, r2
  005d4	e58d3024	 str         r3, [sp, #0x24]

; 87   :     }

  005d8	eaffffd4	 b           |$LN3@SerialSend|
  005dc		 |$LN2@SerialSend|

; 88   : 
; 89   :     // notify driver packet end if function exist (USB serial would need this)
; 90   :     if (g_kitlSerialState.pDriver->pfnSendComplete != NULL) {

  005dc	e59f3078	 ldr         r3, [pc, #0x78]
  005e0	e5933000	 ldr         r3, [r3]
  005e4	e283300c	 add         r3, r3, #0xC
  005e8	e5933000	 ldr         r3, [r3]
  005ec	e3530000	 cmp         r3, #0
  005f0	0a000006	 beq         |$LN1@SerialSend|

; 91   :         g_kitlSerialState.pDriver->pfnSendComplete(length);

  005f4	e1dd02b8	 ldrh        r0, [sp, #0x28]
  005f8	e59f305c	 ldr         r3, [pc, #0x5C]
  005fc	e5933000	 ldr         r3, [r3]
  00600	e283300c	 add         r3, r3, #0xC
  00604	e5933000	 ldr         r3, [r3]
  00608	e1a0e00f	 mov         lr, pc
  0060c	e12fff13	 bx          r3
  00610		 |$LN1@SerialSend|

; 92   :     }
; 93   :     
; 94   :         KITL_RETAILMSG(ZONE_SEND, ("-SerialSend(rc = 1)\r\n"));

  00610	e59f3040	 ldr         r3, [pc, #0x40]
  00614	e5933440	 ldr         r3, [r3, #0x440]
  00618	e3130010	 tst         r3, #0x10
  0061c	0a000004	 beq         |$LN10@SerialSend|
  00620	e59f002c	 ldr         r0, [pc, #0x2C]
  00624	eb000000	 bl          KITLOutputDebugString
  00628	e3a03001	 mov         r3, #1
  0062c	e58d3018	 str         r3, [sp, #0x18]
  00630	ea000001	 b           |$LN11@SerialSend|
  00634		 |$LN10@SerialSend|
  00634	e3a03000	 mov         r3, #0
  00638	e58d3018	 str         r3, [sp, #0x18]
  0063c		 |$LN11@SerialSend|

; 95   :     return TRUE;

  0063c	e3a03001	 mov         r3, #1
  00640	e58d3008	 str         r3, [sp, #8]

; 96   : }

  00644	e59d0008	 ldr         r0, [sp, #8]
  00648	e28dd01c	 add         sp, sp, #0x1C
  0064c	e89d6000	 ldmia       sp, {sp, lr}
  00650	e12fff1e	 bx          lr
  00654		 |$LN15@SerialSend|
  00654		 |$LN16@SerialSend|
  00654	00000000	 DCD         |??_C@_0BG@PDHAIEPB@?9SerialSend?$CIrc?5?$DN?51?$CJ?$AN?6?$AA@|
  00658		 |$LN17@SerialSend|
  00658	00000000	 DCD         |dpCurSettings|
  0065c		 |$LN18@SerialSend|
  0065c	00000000	 DCD         |g_kitlSerialState|
  00660		 |$LN19@SerialSend|
  00660	00000000	 DCD         |??_C@_0BK@FJBKAKDG@?$CLSerialSend?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@|
  00664		 |$M43364|

			 ENDP  ; |SerialSend|

	EXPORT	|??_C@_0BN@FOGKPFOM@?9SerialRecv?$CI?$CKpLength?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DN@FPKOAPOO@ERROR?3?5SerialRecv?3?5Received?5pack@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DI@FBKFFAPI@WARN?3?5SerialRecv?3?5Packet?5checksu@| [ DATA ] ; `string'
	EXPORT	|??_C@_0FC@OLAMHMJA@WARN?3?5SerialRecv?3?5payload?5size?5e@| [ DATA ] ; `string'
	EXPORT	|??_C@_0FE@EPOLMELO@WARN?3?5SerialRecv?3?5Packet?5type?5wr@| [ DATA ] ; `string'
	EXPORT	|??_C@_0FH@COFDJCJM@WARN?3?5SerialRecv?3?5Header?5checksu@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BK@PNMBDCIB@?$CLSerialRecv?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	IMPORT	|memcmp|

  00010			 AREA	 |.pdata|, PDATA
|$T43398| DCD	|$LN49@SerialRecv|
	DCD	0x40017e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BN@FOGKPFOM@?9SerialRecv?$CI?$CKpLength?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"SerialRecv(*pLength = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DN@FPKOAPOO@ERROR?3?5SerialRecv?3?5Received?5pack@| DCB "ERROR: S"
	DCB	"erialRecv: Received packet too large, discarded...", 0xd
	DCB	0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DI@FBKFFAPI@WARN?3?5SerialRecv?3?5Packet?5checksu@| DCB "WARN: Se"
	DCB	"rialRecv: Packet checksum error, discarded...", 0xd, 0xa
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0FC@OLAMHMJA@WARN?3?5SerialRecv?3?5payload?5size?5e@| DCB "WARN: S"
	DCB	"erialRecv: payload size error, Rec = %d > Max Desired = "
	DCB	"%d, discarded...", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0FE@EPOLMELO@WARN?3?5SerialRecv?3?5Packet?5type?5wr@| DCB "WARN: S"
	DCB	"erialRecv: Packet type wrong, Rec = 0x%02x, Desired = 0x"
	DCB	"%02x, discarded...", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0FH@COFDJCJM@WARN?3?5SerialRecv?3?5Header?5checksu@| DCB "WARN: Se"
	DCB	"rialRecv: Header checksum error, Rec = 0x%02x, Calc'd = "
	DCB	"0x%02x, discarded...", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BK@PNMBDCIB@?$CLSerialRecv?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@| DCB "+"
	DCB	"SerialRecv(0x%08x, %d)", 0xd, 0xa, 0x0	; `string'
; Function compile flags: /Odtp

  00664			 AREA	 |.text|, CODE, ARM

  00664		 |SerialRecv| PROC

; 112  : {

  00664		 |$LN49@SerialRecv|
  00664	e1a0c00d	 mov         r12, sp
  00668	e92d0003	 stmdb       sp!, {r0, r1}
  0066c	e92d5000	 stmdb       sp!, {r12, lr}
  00670	e24dd050	 sub         sp, sp, #0x50
  00674		 |$M43395|

; 113  :     UINT8 *pBuffer = (UINT8*)g_kitlSerialState.recvBuffer;

  00674	e59f35c0	 ldr         r3, [pc, #0x5C0]
  00678	e283301c	 add         r3, r3, #0x1C
  0067c	e58d3004	 str         r3, [sp, #4]

; 114  :     OAL_KITL_SERIAL_HEADER *pHeader = (OAL_KITL_SERIAL_HEADER*)pBuffer;

  00680	e59d3004	 ldr         r3, [sp, #4]
  00684	e58d3010	 str         r3, [sp, #0x10]

; 115  :     UINT16 bestSize = (UINT16)g_kitlSerialState.info.bestSize;

  00688	e59f35ac	 ldr         r3, [pc, #0x5AC]
  0068c	e5933018	 ldr         r3, [r3, #0x18]
  00690	e1a03803	 mov         r3, r3, lsl #16
  00694	e1a03823	 mov         r3, r3, lsr #16
  00698	e1cd31b8	 strh        r3, [sp, #0x18]

; 116  :     UINT16 recvCount = g_kitlSerialState.recvCount;

  0069c	e59f3598	 ldr         r3, [pc, #0x598]
  006a0	e283cc06	 add         r12, r3, #6, 24
  006a4	e1dc30bc	 ldrh        r3, [r12, #0xC]
  006a8	e1cd30b2	 strh        r3, [sp, #2]

; 117  :     UINT16 recvPayload = g_kitlSerialState.recvPayload;

  006ac	e59f3588	 ldr         r3, [pc, #0x588]
  006b0	e283cc06	 add         r12, r3, #6, 24
  006b4	e1dc30be	 ldrh        r3, [r12, #0xE]
  006b8	e1cd30b0	 strh        r3, [sp]

; 118  :     UINT16 count, rc = 0;

  006bc	e3a03000	 mov         r3, #0
  006c0	e1cd30b8	 strh        r3, [sp, #8]

; 119  :     DWORD  dwRetry = 0;

  006c4	e3a03000	 mov         r3, #0
  006c8	e58d3014	 str         r3, [sp, #0x14]

; 120  :     UINT8  cSum;
; 121  : 
; 122  :    
; 123  :     KITL_RETAILMSG(ZONE_RECV, (
; 124  :         "+SerialRecv(0x%08x, %d)\r\n", pData, *pLength
; 125  :     ));

  006cc	e59f3564	 ldr         r3, [pc, #0x564]
  006d0	e5933440	 ldr         r3, [r3, #0x440]
  006d4	e3130020	 tst         r3, #0x20
  006d8	0a000007	 beq         |$LN26@SerialRecv|
  006dc	e59d305c	 ldr         r3, [sp, #0x5C]
  006e0	e1d320b0	 ldrh        r2, [r3]
  006e4	e59d1058	 ldr         r1, [sp, #0x58]
  006e8	e59f0568	 ldr         r0, [pc, #0x568]
  006ec	eb000000	 bl          KITLOutputDebugString
  006f0	e3a03001	 mov         r3, #1
  006f4	e58d3020	 str         r3, [sp, #0x20]
  006f8	ea000001	 b           |$LN27@SerialRecv|
  006fc		 |$LN26@SerialRecv|
  006fc	e3a03000	 mov         r3, #0
  00700	e58d3020	 str         r3, [sp, #0x20]
  00704		 |$LN27@SerialRecv|

; 126  : 
; 127  : 
; 128  :     if (g_kitlSerialState.pDriver->pfnFlowControl) {

  00704	e59f3530	 ldr         r3, [pc, #0x530]
  00708	e5933000	 ldr         r3, [r3]
  0070c	e2833024	 add         r3, r3, #0x24
  00710	e5933000	 ldr         r3, [r3]
  00714	e3530000	 cmp         r3, #0
  00718	0a000006	 beq         |$LN23@SerialRecv|

; 129  :         g_kitlSerialState.pDriver->pfnFlowControl (TRUE);

  0071c	e3a00001	 mov         r0, #1
  00720	e59f3514	 ldr         r3, [pc, #0x514]
  00724	e5933000	 ldr         r3, [r3]
  00728	e2833024	 add         r3, r3, #0x24
  0072c	e5933000	 ldr         r3, [r3]
  00730	e1a0e00f	 mov         lr, pc
  00734	e12fff13	 bx          r3
  00738		 |$LN23@SerialRecv|
  00738		 |$LN46@SerialRecv|
  00738		 |$LN45@SerialRecv|
  00738		 |$LN44@SerialRecv|
  00738		 |$LN43@SerialRecv|
  00738		 |$LN42@SerialRecv|
  00738		 |$LN22@SerialRecv|

; 130  :     }
; 131  : 
; 132  :     // Loop till there are data or we received a full packet
; 133  :     while (recvCount < (sizeof(OAL_KITL_SERIAL_HEADER) + recvPayload)) {

  00738	e1dd20b2	 ldrh        r2, [sp, #2]
  0073c	e1dd30b0	 ldrh        r3, [sp]
  00740	e283300a	 add         r3, r3, #0xA
  00744	e1520003	 cmp         r2, r3
  00748	2a0000be	 bcs         |$LN21@SerialRecv|

; 134  : 
; 135  :         // Call driver read function, with best size
; 136  :         count = g_kitlSerialState.pDriver->pfnRecv(
; 137  :             &pBuffer[recvCount], bestSize
; 138  :         );

  0074c	e1dd11b8	 ldrh        r1, [sp, #0x18]
  00750	e1dd30b2	 ldrh        r3, [sp, #2]
  00754	e1a02003	 mov         r2, r3
  00758	e59d3004	 ldr         r3, [sp, #4]
  0075c	e0830002	 add         r0, r3, r2
  00760	e59f34d4	 ldr         r3, [pc, #0x4D4]
  00764	e5933000	 ldr         r3, [r3]
  00768	e2833010	 add         r3, r3, #0x10
  0076c	e5933000	 ldr         r3, [r3]
  00770	e1a0e00f	 mov         lr, pc
  00774	e12fff13	 bx          r3
  00778	e1a03800	 mov         r3, r0, lsl #16
  0077c	e1a03823	 mov         r3, r3, lsr #16
  00780	e1cd32b4	 strh        r3, [sp, #0x24]
  00784	e1dd32b4	 ldrh        r3, [sp, #0x24]
  00788	e1cd30ba	 strh        r3, [sp, #0xA]

; 139  : 
; 140  :         // Break loop when no are avaiable
; 141  :         if (count == 0) {

  0078c	e1dd30ba	 ldrh        r3, [sp, #0xA]
  00790	e3530000	 cmp         r3, #0
  00794	1a00000d	 bne         |$LN20@SerialRecv|

; 142  : 
; 143  :             if (g_kitlSerialState.pDriver->pfnFlowControl
; 144  :                 && (dwRetry ++ < RECV_RETRY)) {

  00798	e59f349c	 ldr         r3, [pc, #0x49C]
  0079c	e5933000	 ldr         r3, [r3]
  007a0	e2833024	 add         r3, r3, #0x24
  007a4	e5933000	 ldr         r3, [r3]
  007a8	e3530000	 cmp         r3, #0
  007ac	0a000006	 beq         |$LN19@SerialRecv|
  007b0	e59d3014	 ldr         r3, [sp, #0x14]
  007b4	e35300c8	 cmp         r3, #0xC8
  007b8	e59d3014	 ldr         r3, [sp, #0x14]
  007bc	e2833001	 add         r3, r3, #1
  007c0	e58d3014	 str         r3, [sp, #0x14]
  007c4	2a000000	 bcs         |$LN19@SerialRecv|

; 145  :                 continue;

  007c8	eaffffda	 b           |$LN22@SerialRecv|
  007cc		 |$LN19@SerialRecv|

; 146  :             }
; 147  :             break;

  007cc	ea00009d	 b           |$LN21@SerialRecv|
  007d0		 |$LN20@SerialRecv|

; 148  :         }
; 149  : 
; 150  :         // Update amount of data received
; 151  :         recvCount += count;

  007d0	e1dd30ba	 ldrh        r3, [sp, #0xA]
  007d4	e1a02003	 mov         r2, r3
  007d8	e1dd30b2	 ldrh        r3, [sp, #2]
  007dc	e0833002	 add         r3, r3, r2
  007e0	e1a03803	 mov         r3, r3, lsl #16
  007e4	e1a03823	 mov         r3, r3, lsr #16
  007e8	e1cd30b2	 strh        r3, [sp, #2]

; 152  : 
; 153  :         // When we already know packet payload we can try next read
; 154  :         if (recvPayload != 0) continue;

  007ec	e1dd30b0	 ldrh        r3, [sp]
  007f0	e3530000	 cmp         r3, #0
  007f4	0a000000	 beq         |$LN18@SerialRecv|
  007f8	eaffffce	 b           |$LN42@SerialRecv|
  007fc		 |$LN18@SerialRecv|
  007fc		 |$LN17@SerialRecv|

; 155  :         
; 156  :         // If we don't get full header just verify header
; 157  :         while (recvCount >= sizeof(OAL_KITL_SERIAL_HEADER)) {

  007fc	e1dd30b2	 ldrh        r3, [sp, #2]
  00800	e353000a	 cmp         r3, #0xA
  00804	3a000026	 bcc         |$LN16@SerialRecv|

; 158  :             // When we get full signature break loop and continue
; 159  :             if (memcmp(g_kitlSign, pBuffer, sizeof(g_kitlSign)) == 0) break;

  00808	e3a02004	 mov         r2, #4
  0080c	e59d1004	 ldr         r1, [sp, #4]
  00810	e59f043c	 ldr         r0, [pc, #0x43C]
  00814	eb000000	 bl          memcmp
  00818	e58d0028	 str         r0, [sp, #0x28]
  0081c	e59d3028	 ldr         r3, [sp, #0x28]
  00820	e3530000	 cmp         r3, #0
  00824	1a000000	 bne         |$LN15@SerialRecv|
  00828	ea00001d	 b           |$LN16@SerialRecv|
  0082c		 |$LN15@SerialRecv|

; 160  :             // Shift buffer by one byte and try again
; 161  :             for (count = 1; count < recvCount;  count++) {

  0082c	e3a03001	 mov         r3, #1
  00830	e1cd30ba	 strh        r3, [sp, #0xA]
  00834	ea000004	 b           |$LN14@SerialRecv|
  00838		 |$LN13@SerialRecv|
  00838	e1dd30ba	 ldrh        r3, [sp, #0xA]
  0083c	e2833001	 add         r3, r3, #1
  00840	e1a03803	 mov         r3, r3, lsl #16
  00844	e1a03823	 mov         r3, r3, lsr #16
  00848	e1cd30ba	 strh        r3, [sp, #0xA]
  0084c		 |$LN14@SerialRecv|
  0084c	e1dd30ba	 ldrh        r3, [sp, #0xA]
  00850	e1a02003	 mov         r2, r3
  00854	e1dd30b2	 ldrh        r3, [sp, #2]
  00858	e1520003	 cmp         r2, r3
  0085c	aa00000a	 bge         |$LN12@SerialRecv|

; 162  :                 pBuffer[count - 1] = pBuffer[count];

  00860	e1dd30ba	 ldrh        r3, [sp, #0xA]
  00864	e1a02003	 mov         r2, r3
  00868	e59d3004	 ldr         r3, [sp, #4]
  0086c	e0831002	 add         r1, r3, r2
  00870	e1dd30ba	 ldrh        r3, [sp, #0xA]
  00874	e2432001	 sub         r2, r3, #1
  00878	e59d3004	 ldr         r3, [sp, #4]
  0087c	e0832002	 add         r2, r3, r2
  00880	e5d13000	 ldrb        r3, [r1]
  00884	e5c23000	 strb        r3, [r2]

; 163  :             }

  00888	eaffffea	 b           |$LN13@SerialRecv|
  0088c		 |$LN12@SerialRecv|

; 164  :             recvCount--;

  0088c	e1dd30b2	 ldrh        r3, [sp, #2]
  00890	e2433001	 sub         r3, r3, #1
  00894	e1a03803	 mov         r3, r3, lsl #16
  00898	e1a03823	 mov         r3, r3, lsr #16
  0089c	e1cd30b2	 strh        r3, [sp, #2]

; 165  :         }            

  008a0	eaffffd5	 b           |$LN17@SerialRecv|
  008a4		 |$LN16@SerialRecv|

; 166  : 
; 167  :         // Did we received header?
; 168  :         if (recvCount >= sizeof(OAL_KITL_SERIAL_HEADER)) {

  008a4	e1dd30b2	 ldrh        r3, [sp, #2]
  008a8	e353000a	 cmp         r3, #0xA
  008ac	3a000064	 bcc         |$LN11@SerialRecv|

; 169  :             // Validate header checksum, when we just received the full header
; 170  : 
; 171  :             if ((cSum = ChkSum(pBuffer, HEADER_CHKSUM_SIZE)) != pHeader->crcHeader)

  008b0	e3a01009	 mov         r1, #9
  008b4	e59d0004	 ldr         r0, [sp, #4]
  008b8	eb000000	 bl          ChkSum
  008bc	e5cd002c	 strb        r0, [sp, #0x2C]
  008c0	e5dd302c	 ldrb        r3, [sp, #0x2C]
  008c4	e5cd300c	 strb        r3, [sp, #0xC]
  008c8	e5dd300c	 ldrb        r3, [sp, #0xC]
  008cc	e1a02003	 mov         r2, r3
  008d0	e59d3010	 ldr         r3, [sp, #0x10]
  008d4	e2833009	 add         r3, r3, #9
  008d8	e5d33000	 ldrb        r3, [r3]
  008dc	e1520003	 cmp         r2, r3
  008e0	0a000012	 beq         |$LN10@SerialRecv|

; 172  :             {
; 173  :                 // Checksum failure, discard the packet
; 174  :                     KITL_RETAILMSG(ZONE_WARNING, ("WARN: SerialRecv: "
; 175  :                     "Header checksum error, Rec = 0x%02x, Calc'd = 0x%02x, discarded...\r\n",
; 176  :                     pHeader->crcHeader,cSum
; 177  :                 ));

  008e4	e59f334c	 ldr         r3, [pc, #0x34C]
  008e8	e5933440	 ldr         r3, [r3, #0x440]
  008ec	e3130001	 tst         r3, #1
  008f0	0a000008	 beq         |$LN28@SerialRecv|
  008f4	e5dd200c	 ldrb        r2, [sp, #0xC]
  008f8	e59d3010	 ldr         r3, [sp, #0x10]
  008fc	e2833009	 add         r3, r3, #9
  00900	e5d31000	 ldrb        r1, [r3]
  00904	e59f0344	 ldr         r0, [pc, #0x344]
  00908	eb000000	 bl          KITLOutputDebugString
  0090c	e3a03001	 mov         r3, #1
  00910	e58d3030	 str         r3, [sp, #0x30]
  00914	ea000001	 b           |$LN29@SerialRecv|
  00918		 |$LN28@SerialRecv|
  00918	e3a03000	 mov         r3, #0
  0091c	e58d3030	 str         r3, [sp, #0x30]
  00920		 |$LN29@SerialRecv|

; 178  :                 recvCount = 0;

  00920	e3a03000	 mov         r3, #0
  00924	e1cd30b2	 strh        r3, [sp, #2]
  00928	eaffff82	 b           |$LN43@SerialRecv|

; 179  :                 continue;

  0092c	ea00003b	 b           |$LN9@SerialRecv|
  00930		 |$LN10@SerialRecv|

; 180  :             }
; 181  :             else if (OAL_KITL_SERIAL_PACKET != pHeader->packetType)

  00930	e59d3010	 ldr         r3, [sp, #0x10]
  00934	e2833004	 add         r3, r3, #4
  00938	e5d33000	 ldrb        r3, [r3]
  0093c	e35300aa	 cmp         r3, #0xAA
  00940	0a000012	 beq         |$LN8@SerialRecv|

; 182  :             {
; 183  :                 // Checksum failure, discard the packet
; 184  :                     KITL_RETAILMSG(ZONE_WARNING, ("WARN: SerialRecv: "
; 185  :                     "Packet type wrong, Rec = 0x%02x, Desired = 0x%02x, discarded...\r\n",
; 186  :                     pHeader->packetType,OAL_KITL_SERIAL_PACKET
; 187  :                 ));

  00944	e59f32ec	 ldr         r3, [pc, #0x2EC]
  00948	e5933440	 ldr         r3, [r3, #0x440]
  0094c	e3130001	 tst         r3, #1
  00950	0a000008	 beq         |$LN30@SerialRecv|
  00954	e3a020aa	 mov         r2, #0xAA
  00958	e59d3010	 ldr         r3, [sp, #0x10]
  0095c	e2833004	 add         r3, r3, #4
  00960	e5d31000	 ldrb        r1, [r3]
  00964	e59f02e0	 ldr         r0, [pc, #0x2E0]
  00968	eb000000	 bl          KITLOutputDebugString
  0096c	e3a03001	 mov         r3, #1
  00970	e58d3034	 str         r3, [sp, #0x34]
  00974	ea000001	 b           |$LN31@SerialRecv|
  00978		 |$LN30@SerialRecv|
  00978	e3a03000	 mov         r3, #0
  0097c	e58d3034	 str         r3, [sp, #0x34]
  00980		 |$LN31@SerialRecv|

; 188  :                 recvCount = 0;

  00980	e3a03000	 mov         r3, #0
  00984	e1cd30b2	 strh        r3, [sp, #2]
  00988	eaffff6a	 b           |$LN44@SerialRecv|

; 189  :                 continue;

  0098c	ea000023	 b           |$LN7@SerialRecv|
  00990		 |$LN8@SerialRecv|

; 190  :             }
; 191  :             else if (KITL_MTU - sizeof(OAL_KITL_SERIAL_HEADER) < pHeader->payloadSize)

  00990	e59d3010	 ldr         r3, [sp, #0x10]
  00994	e2831006	 add         r1, r3, #6
  00998	e5d13001	 ldrb        r3, [r1, #1]
  0099c	e1a03403	 mov         r3, r3, lsl #8
  009a0	e1a02803	 mov         r2, r3, lsl #16
  009a4	e1a02822	 mov         r2, r2, lsr #16
  009a8	e5d13000	 ldrb        r3, [r1]
  009ac	e1832002	 orr         r2, r3, r2
  009b0	e3a03c05	 mov         r3, #5, 24
  009b4	e38330e6	 orr         r3, r3, #0xE6
  009b8	e1520003	 cmp         r2, r3
  009bc	9a000017	 bls         |$LN6@SerialRecv|

; 192  :             {
; 193  :                 // Checksum failure, discard the packet
; 194  :                     KITL_RETAILMSG(ZONE_WARNING, ("WARN: SerialRecv: "
; 195  :                     "payload size error, Rec = %d > Max Desired = %d, discarded...\r\n",
; 196  :                     pHeader->payloadSize, KITL_MTU - sizeof(OAL_KITL_SERIAL_HEADER)
; 197  :                 ));

  009c0	e59f3270	 ldr         r3, [pc, #0x270]
  009c4	e5933440	 ldr         r3, [r3, #0x440]
  009c8	e3130001	 tst         r3, #1
  009cc	0a00000e	 beq         |$LN32@SerialRecv|
  009d0	e3a02c05	 mov         r2, #5, 24
  009d4	e38220e6	 orr         r2, r2, #0xE6
  009d8	e59d3010	 ldr         r3, [sp, #0x10]
  009dc	e2830006	 add         r0, r3, #6
  009e0	e5d03001	 ldrb        r3, [r0, #1]
  009e4	e1a03403	 mov         r3, r3, lsl #8
  009e8	e1a01803	 mov         r1, r3, lsl #16
  009ec	e1a01821	 mov         r1, r1, lsr #16
  009f0	e5d03000	 ldrb        r3, [r0]
  009f4	e1831001	 orr         r1, r3, r1
  009f8	e59f0248	 ldr         r0, [pc, #0x248]
  009fc	eb000000	 bl          KITLOutputDebugString
  00a00	e3a03001	 mov         r3, #1
  00a04	e58d3038	 str         r3, [sp, #0x38]
  00a08	ea000001	 b           |$LN33@SerialRecv|
  00a0c		 |$LN32@SerialRecv|
  00a0c	e3a03000	 mov         r3, #0
  00a10	e58d3038	 str         r3, [sp, #0x38]
  00a14		 |$LN33@SerialRecv|

; 198  :                 recvCount = 0;

  00a14	e3a03000	 mov         r3, #0
  00a18	e1cd30b2	 strh        r3, [sp, #2]

; 199  :                 continue;

  00a1c	eaffff45	 b           |$LN45@SerialRecv|
  00a20		 |$LN6@SerialRecv|
  00a20		 |$LN7@SerialRecv|
  00a20		 |$LN9@SerialRecv|

; 200  :             }
; 201  :             // Now we know how large payload should be
; 202  :             recvPayload = pHeader->payloadSize;

  00a20	e59d3010	 ldr         r3, [sp, #0x10]
  00a24	e2831006	 add         r1, r3, #6
  00a28	e5d13001	 ldrb        r3, [r1, #1]
  00a2c	e1a03403	 mov         r3, r3, lsl #8
  00a30	e1a02803	 mov         r2, r3, lsl #16
  00a34	e1a02822	 mov         r2, r2, lsr #16
  00a38	e5d13000	 ldrb        r3, [r1]
  00a3c	e1833002	 orr         r3, r3, r2
  00a40	e1cd30b0	 strh        r3, [sp]
  00a44		 |$LN11@SerialRecv|

; 203  :         }
; 204  :     }

  00a44	eaffff3b	 b           |$LN46@SerialRecv|
  00a48		 |$LN21@SerialRecv|

; 205  : 
; 206  :     // Did we receive full packet? If no leave for now...
; 207  :     if (
; 208  :         recvPayload == 0 ||
; 209  :         recvCount < (sizeof(OAL_KITL_SERIAL_HEADER) + recvPayload)
; 210  :     ) goto cleanUp;

  00a48	e1dd30b0	 ldrh        r3, [sp]
  00a4c	e3530000	 cmp         r3, #0
  00a50	0a000004	 beq         |$LN4@SerialRecv|
  00a54	e1dd20b2	 ldrh        r2, [sp, #2]
  00a58	e1dd30b0	 ldrh        r3, [sp]
  00a5c	e283300a	 add         r3, r3, #0xA
  00a60	e1520003	 cmp         r2, r3
  00a64	2a000000	 bcs         |$LN5@SerialRecv|
  00a68		 |$LN4@SerialRecv|
  00a68	ea00003f	 b           |$cleanUp$43183|
  00a6c		 |$LN5@SerialRecv|

; 211  : 
; 212  : 
; 213  :     // Received the full packet, calculate checksum
; 214  :     if (ChkSum(
; 215  :         pBuffer + sizeof(OAL_KITL_SERIAL_HEADER), recvPayload
; 216  :     ) != pHeader->crcData) {

  00a6c	e1dd10b0	 ldrh        r1, [sp]
  00a70	e59d3004	 ldr         r3, [sp, #4]
  00a74	e283000a	 add         r0, r3, #0xA
  00a78	eb000000	 bl          ChkSum
  00a7c	e5cd003c	 strb        r0, [sp, #0x3C]
  00a80	e5dd303c	 ldrb        r3, [sp, #0x3C]
  00a84	e1a02003	 mov         r2, r3
  00a88	e59d3010	 ldr         r3, [sp, #0x10]
  00a8c	e2833008	 add         r3, r3, #8
  00a90	e5d33000	 ldrb        r3, [r3]
  00a94	e1520003	 cmp         r2, r3
  00a98	0a00000f	 beq         |$LN3@SerialRecv|

; 217  :             KITL_RETAILMSG(ZONE_WARNING, ("WARN: SerialRecv: "
; 218  :             "Packet checksum error, discarded...\r\n"
; 219  :         ));

  00a9c	e59f3194	 ldr         r3, [pc, #0x194]
  00aa0	e5933440	 ldr         r3, [r3, #0x440]
  00aa4	e3130001	 tst         r3, #1
  00aa8	0a000004	 beq         |$LN34@SerialRecv|
  00aac	e59f0190	 ldr         r0, [pc, #0x190]
  00ab0	eb000000	 bl          KITLOutputDebugString
  00ab4	e3a03001	 mov         r3, #1
  00ab8	e58d3040	 str         r3, [sp, #0x40]
  00abc	ea000001	 b           |$LN35@SerialRecv|
  00ac0		 |$LN34@SerialRecv|
  00ac0	e3a03000	 mov         r3, #0
  00ac4	e58d3040	 str         r3, [sp, #0x40]
  00ac8		 |$LN35@SerialRecv|

; 220  :         recvCount = recvPayload = 0;

  00ac8	e3a03000	 mov         r3, #0
  00acc	e1cd30b0	 strh        r3, [sp]
  00ad0	e1dd30b0	 ldrh        r3, [sp]
  00ad4	e1cd30b2	 strh        r3, [sp, #2]

; 221  :         goto cleanUp;

  00ad8	ea000023	 b           |$cleanUp$43183|
  00adc		 |$LN3@SerialRecv|

; 222  :     }
; 223  : 
; 224  :     // Valid packet received, check length requested
; 225  :     if (*pLength < sizeof(OAL_KITL_SERIAL_HEADER) + recvPayload) {

  00adc	e59d305c	 ldr         r3, [sp, #0x5C]
  00ae0	e1d320b0	 ldrh        r2, [r3]
  00ae4	e1dd30b0	 ldrh        r3, [sp]
  00ae8	e283300a	 add         r3, r3, #0xA
  00aec	e1520003	 cmp         r2, r3
  00af0	2a00000f	 bcs         |$LN2@SerialRecv|

; 226  :         KITL_RETAILMSG(ZONE_WARNING, ("ERROR: SerialRecv: "
; 227  :             "Received packet too large, discarded...\r\n"
; 228  :         ));

  00af4	e59f313c	 ldr         r3, [pc, #0x13C]
  00af8	e5933440	 ldr         r3, [r3, #0x440]
  00afc	e3130001	 tst         r3, #1
  00b00	0a000004	 beq         |$LN36@SerialRecv|
  00b04	e59f0134	 ldr         r0, [pc, #0x134]
  00b08	eb000000	 bl          KITLOutputDebugString
  00b0c	e3a03001	 mov         r3, #1
  00b10	e58d3044	 str         r3, [sp, #0x44]
  00b14	ea000001	 b           |$LN37@SerialRecv|
  00b18		 |$LN36@SerialRecv|
  00b18	e3a03000	 mov         r3, #0
  00b1c	e58d3044	 str         r3, [sp, #0x44]
  00b20		 |$LN37@SerialRecv|

; 229  :         recvCount = recvPayload = 0;

  00b20	e3a03000	 mov         r3, #0
  00b24	e1cd30b0	 strh        r3, [sp]
  00b28	e1dd30b0	 ldrh        r3, [sp]
  00b2c	e1cd30b2	 strh        r3, [sp, #2]

; 230  :         goto cleanUp;

  00b30	ea00000d	 b           |$cleanUp$43183|
  00b34		 |$LN2@SerialRecv|

; 231  :     }        
; 232  : 
; 233  :     // We have complete packet, indicate it up...
; 234  :     memcpy(pData, pBuffer, sizeof(OAL_KITL_SERIAL_HEADER) + recvPayload);

  00b34	e1dd30b0	 ldrh        r3, [sp]
  00b38	e283200a	 add         r2, r3, #0xA
  00b3c	e59d1004	 ldr         r1, [sp, #4]
  00b40	e59d0058	 ldr         r0, [sp, #0x58]
  00b44	eb000000	 bl          memcpy

; 235  :     rc = sizeof(OAL_KITL_SERIAL_HEADER) + recvPayload;

  00b48	e1dd30b0	 ldrh        r3, [sp]
  00b4c	e283300a	 add         r3, r3, #0xA
  00b50	e1a03803	 mov         r3, r3, lsl #16
  00b54	e1a03823	 mov         r3, r3, lsr #16
  00b58	e1cd30b8	 strh        r3, [sp, #8]

; 236  :     recvCount = recvPayload = 0;

  00b5c	e3a03000	 mov         r3, #0
  00b60	e1cd30b0	 strh        r3, [sp]
  00b64	e1dd30b0	 ldrh        r3, [sp]
  00b68	e1cd30b2	 strh        r3, [sp, #2]
  00b6c		 |$cleanUp$43183|

; 237  : 
; 238  : cleanUp:
; 239  : 
; 240  :     // Save state variable
; 241  :     g_kitlSerialState.recvCount = recvCount;

  00b6c	e1dd20b2	 ldrh        r2, [sp, #2]
  00b70	e59f30c4	 ldr         r3, [pc, #0xC4]
  00b74	e283cc06	 add         r12, r3, #6, 24
  00b78	e1cc20bc	 strh        r2, [r12, #0xC]

; 242  :     g_kitlSerialState.recvPayload = recvPayload;

  00b7c	e1dd20b0	 ldrh        r2, [sp]
  00b80	e59f30b4	 ldr         r3, [pc, #0xB4]
  00b84	e283cc06	 add         r12, r3, #6, 24
  00b88	e1cc20be	 strh        r2, [r12, #0xE]

; 243  :     *pLength = rc;

  00b8c	e1dd20b8	 ldrh        r2, [sp, #8]
  00b90	e59d305c	 ldr         r3, [sp, #0x5C]
  00b94	e1c320b0	 strh        r2, [r3]

; 244  : 
; 245  :     if (g_kitlSerialState.pDriver->pfnFlowControl) {

  00b98	e59f309c	 ldr         r3, [pc, #0x9C]
  00b9c	e5933000	 ldr         r3, [r3]
  00ba0	e2833024	 add         r3, r3, #0x24
  00ba4	e5933000	 ldr         r3, [r3]
  00ba8	e3530000	 cmp         r3, #0
  00bac	0a000006	 beq         |$LN1@SerialRecv|

; 246  :         g_kitlSerialState.pDriver->pfnFlowControl (FALSE);

  00bb0	e3a00000	 mov         r0, #0
  00bb4	e59f3080	 ldr         r3, [pc, #0x80]
  00bb8	e5933000	 ldr         r3, [r3]
  00bbc	e2833024	 add         r3, r3, #0x24
  00bc0	e5933000	 ldr         r3, [r3]
  00bc4	e1a0e00f	 mov         lr, pc
  00bc8	e12fff13	 bx          r3
  00bcc		 |$LN1@SerialRecv|

; 247  :     }
; 248  : 
; 249  :         KITL_RETAILMSG(ZONE_RECV, ("-SerialRecv(*pLength = %d)\r\n", rc));

  00bcc	e59f3064	 ldr         r3, [pc, #0x64]
  00bd0	e5933440	 ldr         r3, [r3, #0x440]
  00bd4	e3130020	 tst         r3, #0x20
  00bd8	0a000005	 beq         |$LN38@SerialRecv|
  00bdc	e1dd10b8	 ldrh        r1, [sp, #8]
  00be0	e59f004c	 ldr         r0, [pc, #0x4C]
  00be4	eb000000	 bl          KITLOutputDebugString
  00be8	e3a03001	 mov         r3, #1
  00bec	e58d3048	 str         r3, [sp, #0x48]
  00bf0	ea000001	 b           |$LN39@SerialRecv|
  00bf4		 |$LN38@SerialRecv|
  00bf4	e3a03000	 mov         r3, #0
  00bf8	e58d3048	 str         r3, [sp, #0x48]
  00bfc		 |$LN39@SerialRecv|

; 250  :     return rc != 0;

  00bfc	e1dd30b8	 ldrh        r3, [sp, #8]
  00c00	e3530000	 cmp         r3, #0
  00c04	0a000002	 beq         |$LN40@SerialRecv|
  00c08	e3a03001	 mov         r3, #1
  00c0c	e58d304c	 str         r3, [sp, #0x4C]
  00c10	ea000001	 b           |$LN41@SerialRecv|
  00c14		 |$LN40@SerialRecv|
  00c14	e3a03000	 mov         r3, #0
  00c18	e58d304c	 str         r3, [sp, #0x4C]
  00c1c		 |$LN41@SerialRecv|
  00c1c	e59d304c	 ldr         r3, [sp, #0x4C]
  00c20	e58d301c	 str         r3, [sp, #0x1C]

; 251  : }

  00c24	e59d001c	 ldr         r0, [sp, #0x1C]
  00c28	e28dd050	 add         sp, sp, #0x50
  00c2c	e89d6000	 ldmia       sp, {sp, lr}
  00c30	e12fff1e	 bx          lr
  00c34		 |$LN50@SerialRecv|
  00c34		 |$LN51@SerialRecv|
  00c34	00000000	 DCD         |??_C@_0BN@FOGKPFOM@?9SerialRecv?$CI?$CKpLength?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  00c38		 |$LN52@SerialRecv|
  00c38	00000000	 DCD         |dpCurSettings|
  00c3c		 |$LN53@SerialRecv|
  00c3c	00000000	 DCD         |g_kitlSerialState|
  00c40		 |$LN54@SerialRecv|
  00c40	00000000	 DCD         |??_C@_0DN@FPKOAPOO@ERROR?3?5SerialRecv?3?5Received?5pack@|
  00c44		 |$LN55@SerialRecv|
  00c44	00000000	 DCD         |??_C@_0DI@FBKFFAPI@WARN?3?5SerialRecv?3?5Packet?5checksu@|
  00c48		 |$LN56@SerialRecv|
  00c48	00000000	 DCD         |??_C@_0FC@OLAMHMJA@WARN?3?5SerialRecv?3?5payload?5size?5e@|
  00c4c		 |$LN57@SerialRecv|
  00c4c	00000000	 DCD         |??_C@_0FE@EPOLMELO@WARN?3?5SerialRecv?3?5Packet?5type?5wr@|
  00c50		 |$LN58@SerialRecv|
  00c50	00000000	 DCD         |??_C@_0FH@COFDJCJM@WARN?3?5SerialRecv?3?5Header?5checksu@|
  00c54		 |$LN59@SerialRecv|
  00c54	00000000	 DCD         |g_kitlSign|
  00c58		 |$LN60@SerialRecv|
  00c58	00000000	 DCD         |??_C@_0BK@PNMBDCIB@?$CLSerialRecv?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@|
  00c5c		 |$M43396|

			 ENDP  ; |SerialRecv|


  00018			 AREA	 |.pdata|, PDATA
|$T43415| DCD	|$LN7@ChkSum|
	DCD	0x40001f04
; Function compile flags: /Odtp

  00c5c			 AREA	 |.text|, CODE, ARM

  00c5c		 |ChkSum| PROC

; 57   : {

  00c5c		 |$LN7@ChkSum|
  00c5c	e1a0c00d	 mov         r12, sp
  00c60	e92d0003	 stmdb       sp!, {r0, r1}
  00c64	e92d5000	 stmdb       sp!, {r12, lr}
  00c68	e24dd00c	 sub         sp, sp, #0xC
  00c6c		 |$M43412|

; 58   :     UINT8 sum = 0;

  00c6c	e3a03000	 mov         r3, #0
  00c70	e5cd3004	 strb        r3, [sp, #4]

; 59   :     int   nLen = length;

  00c74	e1dd31b8	 ldrh        r3, [sp, #0x18]
  00c78	e58d3000	 str         r3, [sp]
  00c7c		 |$LN2@ChkSum|

; 60   : 
; 61   :     while (nLen -- > 0) sum += *pBuffer++;

  00c7c	e59d3000	 ldr         r3, [sp]
  00c80	e3530000	 cmp         r3, #0
  00c84	e59d3000	 ldr         r3, [sp]
  00c88	e2433001	 sub         r3, r3, #1
  00c8c	e58d3000	 str         r3, [sp]
  00c90	da00000a	 ble         |$LN1@ChkSum|
  00c94	e59d3014	 ldr         r3, [sp, #0x14]
  00c98	e5d33000	 ldrb        r3, [r3]
  00c9c	e1a02003	 mov         r2, r3
  00ca0	e5dd3004	 ldrb        r3, [sp, #4]
  00ca4	e0833002	 add         r3, r3, r2
  00ca8	e20330ff	 and         r3, r3, #0xFF
  00cac	e5cd3004	 strb        r3, [sp, #4]
  00cb0	e59d3014	 ldr         r3, [sp, #0x14]
  00cb4	e2833001	 add         r3, r3, #1
  00cb8	e58d3014	 str         r3, [sp, #0x14]
  00cbc	eaffffee	 b           |$LN2@ChkSum|
  00cc0		 |$LN1@ChkSum|

; 62   :     return sum;

  00cc0	e5dd3004	 ldrb        r3, [sp, #4]
  00cc4	e5cd3008	 strb        r3, [sp, #8]

; 63   : }

  00cc8	e5dd0008	 ldrb        r0, [sp, #8]
  00ccc	e28dd00c	 add         sp, sp, #0xC
  00cd0	e89d6000	 ldmia       sp, {sp, lr}
  00cd4	e12fff1e	 bx          lr
  00cd8		 |$M43413|

			 ENDP  ; |ChkSum|


  00020			 AREA	 |.pdata|, PDATA
|$T43421| DCD	|$LN5@SerialEnco|
	DCD	0x40002c04
; Function compile flags: /Odtp

  00cd8			 AREA	 |.text|, CODE, ARM

  00cd8		 |SerialEncode| PROC

; 261  : {

  00cd8		 |$LN5@SerialEnco|
  00cd8	e1a0c00d	 mov         r12, sp
  00cdc	e92d0003	 stmdb       sp!, {r0, r1}
  00ce0	e92d5000	 stmdb       sp!, {r12, lr}
  00ce4	e24dd00c	 sub         sp, sp, #0xC
  00ce8		 |$M43418|

; 262  :     OAL_KITL_SERIAL_HEADER *pHeader = (OAL_KITL_SERIAL_HEADER*)pFrame;

  00ce8	e59d3014	 ldr         r3, [sp, #0x14]
  00cec	e58d3000	 str         r3, [sp]

; 263  : 
; 264  :     memcpy(&pHeader->signature, g_kitlSign, sizeof(pHeader->signature));

  00cf0	e3a02004	 mov         r2, #4
  00cf4	e59f1088	 ldr         r1, [pc, #0x88]
  00cf8	e59d0000	 ldr         r0, [sp]
  00cfc	eb000000	 bl          memcpy

; 265  :     pHeader->packetType = OAL_KITL_SERIAL_PACKET;

  00d00	e59d3000	 ldr         r3, [sp]
  00d04	e2832004	 add         r2, r3, #4
  00d08	e3a030aa	 mov         r3, #0xAA
  00d0c	e5c23000	 strb        r3, [r2]

; 266  :     pHeader->payloadSize = size;

  00d10	e59d3000	 ldr         r3, [sp]
  00d14	e2832006	 add         r2, r3, #6
  00d18	e1dd31b8	 ldrh        r3, [sp, #0x18]
  00d1c	e5c23000	 strb        r3, [r2]
  00d20	e1a03423	 mov         r3, r3, lsr #8
  00d24	e5c23001	 strb        r3, [r2, #1]

; 267  :     pHeader->crcData = ChkSum(pFrame + sizeof(OAL_KITL_SERIAL_HEADER), size);

  00d28	e1dd11b8	 ldrh        r1, [sp, #0x18]
  00d2c	e59d3014	 ldr         r3, [sp, #0x14]
  00d30	e283000a	 add         r0, r3, #0xA
  00d34	eb000000	 bl          ChkSum
  00d38	e5cd0008	 strb        r0, [sp, #8]
  00d3c	e59d3000	 ldr         r3, [sp]
  00d40	e2832008	 add         r2, r3, #8
  00d44	e5dd3008	 ldrb        r3, [sp, #8]
  00d48	e5c23000	 strb        r3, [r2]

; 268  :     pHeader->crcHeader = ChkSum(pFrame, HEADER_CHKSUM_SIZE);

  00d4c	e3a01009	 mov         r1, #9
  00d50	e59d0014	 ldr         r0, [sp, #0x14]
  00d54	eb000000	 bl          ChkSum
  00d58	e5cd0009	 strb        r0, [sp, #9]
  00d5c	e59d3000	 ldr         r3, [sp]
  00d60	e2832009	 add         r2, r3, #9
  00d64	e5dd3009	 ldrb        r3, [sp, #9]
  00d68	e5c23000	 strb        r3, [r2]

; 269  :     return TRUE;

  00d6c	e3a03001	 mov         r3, #1
  00d70	e58d3004	 str         r3, [sp, #4]

; 270  : }

  00d74	e59d0004	 ldr         r0, [sp, #4]
  00d78	e28dd00c	 add         sp, sp, #0xC
  00d7c	e89d6000	 ldmia       sp, {sp, lr}
  00d80	e12fff1e	 bx          lr
  00d84		 |$LN6@SerialEnco|
  00d84		 |$LN7@SerialEnco|
  00d84	00000000	 DCD         |g_kitlSign|
  00d88		 |$M43419|

			 ENDP  ; |SerialEncode|


  00028			 AREA	 |.pdata|, PDATA
|$T43429| DCD	|$LN5@SerialDeco|
	DCD	0x40001404
; Function compile flags: /Odtp

  00d88			 AREA	 |.text|, CODE, ARM

  00d88		 |SerialDecode| PROC

; 280  : {

  00d88		 |$LN5@SerialDeco|
  00d88	e1a0c00d	 mov         r12, sp
  00d8c	e92d0003	 stmdb       sp!, {r0, r1}
  00d90	e92d5000	 stmdb       sp!, {r12, lr}
  00d94	e24dd008	 sub         sp, sp, #8
  00d98		 |$M43426|

; 281  :     UINT8 *pData;
; 282  :     
; 283  :     *pSize -= sizeof(OAL_KITL_SERIAL_HEADER);

  00d98	e59d3014	 ldr         r3, [sp, #0x14]
  00d9c	e1d330b0	 ldrh        r3, [r3]
  00da0	e243300a	 sub         r3, r3, #0xA
  00da4	e1a02803	 mov         r2, r3, lsl #16
  00da8	e1a02822	 mov         r2, r2, lsr #16
  00dac	e59d3014	 ldr         r3, [sp, #0x14]
  00db0	e1c320b0	 strh        r2, [r3]

; 284  :     pData = pFrame + sizeof(OAL_KITL_SERIAL_HEADER);

  00db4	e59d3010	 ldr         r3, [sp, #0x10]
  00db8	e283300a	 add         r3, r3, #0xA
  00dbc	e58d3000	 str         r3, [sp]

; 285  :     return pData;

  00dc0	e59d3000	 ldr         r3, [sp]
  00dc4	e58d3004	 str         r3, [sp, #4]

; 286  : }

  00dc8	e59d0004	 ldr         r0, [sp, #4]
  00dcc	e28dd008	 add         sp, sp, #8
  00dd0	e89d6000	 ldmia       sp, {sp, lr}
  00dd4	e12fff1e	 bx          lr
  00dd8		 |$M43427|

			 ENDP  ; |SerialDecode|


  00030			 AREA	 |.pdata|, PDATA
|$T43434| DCD	|$LN7@SerialEnab|
	DCD	0x40001603
; Function compile flags: /Odtp

  00dd8			 AREA	 |.text|, CODE, ARM

  00dd8		 |SerialEnableInt| PROC

; 296  : {

  00dd8		 |$LN7@SerialEnab|
  00dd8	e1a0c00d	 mov         r12, sp
  00ddc	e92d0001	 stmdb       sp!, {r0}
  00de0	e92d5000	 stmdb       sp!, {r12, lr}
  00de4		 |$M43431|

; 297  :     if (enable) {

  00de4	e59d3008	 ldr         r3, [sp, #8]
  00de8	e3530000	 cmp         r3, #0
  00dec	0a000006	 beq         |$LN2@SerialEnab|

; 298  :         g_kitlSerialState.pDriver->pfnEnableInts();

  00df0	e59f3034	 ldr         r3, [pc, #0x34]
  00df4	e5933000	 ldr         r3, [r3]
  00df8	e2833014	 add         r3, r3, #0x14
  00dfc	e5933000	 ldr         r3, [r3]
  00e00	e1a0e00f	 mov         lr, pc
  00e04	e12fff13	 bx          r3

; 299  :     } else {

  00e08	ea000005	 b           |$LN1@SerialEnab|
  00e0c		 |$LN2@SerialEnab|

; 300  :         g_kitlSerialState.pDriver->pfnDisableInts();

  00e0c	e59f3018	 ldr         r3, [pc, #0x18]
  00e10	e5933000	 ldr         r3, [r3]
  00e14	e2833018	 add         r3, r3, #0x18
  00e18	e5933000	 ldr         r3, [r3]
  00e1c	e1a0e00f	 mov         lr, pc
  00e20	e12fff13	 bx          r3
  00e24		 |$LN1@SerialEnab|

; 301  :     }        
; 302  : }

  00e24	e89d6000	 ldmia       sp, {sp, lr}
  00e28	e12fff1e	 bx          lr
  00e2c		 |$LN8@SerialEnab|
  00e2c		 |$LN9@SerialEnab|
  00e2c	00000000	 DCD         |g_kitlSerialState|
  00e30		 |$M43432|

			 ENDP  ; |SerialEnableInt|


  00038			 AREA	 |.pdata|, PDATA
|$T43442| DCD	|$LN5@SerialGetD|
	DCD	0x40000d04
; Function compile flags: /Odtp

  00e30			 AREA	 |.text|, CODE, ARM

  00e30		 |SerialGetDevCfg| PROC

; 312  : {

  00e30		 |$LN5@SerialGetD|
  00e30	e1a0c00d	 mov         r12, sp
  00e34	e92d0003	 stmdb       sp!, {r0, r1}
  00e38	e92d5000	 stmdb       sp!, {r12, lr}
  00e3c	e24dd004	 sub         sp, sp, #4
  00e40		 |$M43439|

; 313  :     *pSize = 0;

  00e40	e59d2010	 ldr         r2, [sp, #0x10]
  00e44	e3a03000	 mov         r3, #0
  00e48	e1c230b0	 strh        r3, [r2]

; 314  :     return TRUE;

  00e4c	e3a03001	 mov         r3, #1
  00e50	e58d3000	 str         r3, [sp]

; 315  : }

  00e54	e59d0000	 ldr         r0, [sp]
  00e58	e28dd004	 add         sp, sp, #4
  00e5c	e89d6000	 ldmia       sp, {sp, lr}
  00e60	e12fff1e	 bx          lr
  00e64		 |$M43440|

			 ENDP  ; |SerialGetDevCfg|


  00040			 AREA	 |.pdata|, PDATA
|$T43448| DCD	|$LN5@SerialSetH|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00e64			 AREA	 |.text|, CODE, ARM

  00e64		 |SerialSetHostCfg| PROC

; 325  : {

  00e64		 |$LN5@SerialSetH|
  00e64	e1a0c00d	 mov         r12, sp
  00e68	e92d0003	 stmdb       sp!, {r0, r1}
  00e6c	e92d5000	 stmdb       sp!, {r12, lr}
  00e70	e24dd004	 sub         sp, sp, #4
  00e74		 |$M43445|

; 326  :      return TRUE;

  00e74	e3a03001	 mov         r3, #1
  00e78	e58d3000	 str         r3, [sp]

; 327  : }

  00e7c	e59d0000	 ldr         r0, [sp]
  00e80	e28dd004	 add         sp, sp, #4
  00e84	e89d6000	 ldmia       sp, {sp, lr}
  00e88	e12fff1e	 bx          lr
  00e8c		 |$M43446|

			 ENDP  ; |SerialSetHostCfg|

	END
