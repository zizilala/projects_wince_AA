; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\KITL\device.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	EXPORT	|OALKitlFindDevice|
	IMPORT	|NKPhysToVirt|
	IMPORT	|OEMIoControl|
	IMPORT	|KITLOutputDebugString|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T43209| DCD	|$LN31@OALKitlFin|
	DCD	0x4000f904
; File c:\wince600\platform\common\src\common\kitl\device.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@| DCB "-O"
	DCB	"ALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%"
	DCB	"08x)", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlFindDevice(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlFindDevice| PROC

; 65   : ) {

  00000		 |$LN31@OALKitlFin|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd07c	 sub         sp, sp, #0x7C
  00010		 |$M43206|

; 66   :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d300c	 str         r3, [sp, #0xC]

; 67   :     UINT32 space, id = 0xFFFFFFFF;

  00018	e3e03000	 mvn         r3, #0
  0001c	e58d3008	 str         r3, [sp, #8]

; 68   :     UINT64 address;
; 69   : #ifndef BUILDING_BOOTLOADER // Not building boot loader
; 70   :     OAL_DDK_PARAMS params;
; 71   : #endif
; 72   :     
; 73   :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 74   :         "+OALKitlFindDevice(%d/%d/%08x, 0x%08x)\r\n",
; 75   :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 76   :     ));

  00020	e59f33b0	 ldr         r3, [pc, #0x3B0]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130a01	 tst         r3, #1, 20
  0002c	0a00000e	 beq         |$LN20@OALKitlFin|
  00030	e59d3088	 ldr         r3, [sp, #0x88]
  00034	e58d3000	 str         r3, [sp]
  00038	e59d3084	 ldr         r3, [sp, #0x84]
  0003c	e2833008	 add         r3, r3, #8
  00040	e5933000	 ldr         r3, [r3]
  00044	e59d2084	 ldr         r2, [sp, #0x84]
  00048	e2822004	 add         r2, r2, #4
  0004c	e5922000	 ldr         r2, [r2]
  00050	e59d1084	 ldr         r1, [sp, #0x84]
  00054	e5911000	 ldr         r1, [r1]
  00058	e59f0380	 ldr         r0, [pc, #0x380]
  0005c	eb000000	 bl          KITLOutputDebugString
  00060	e3a03001	 mov         r3, #1
  00064	e58d3064	 str         r3, [sp, #0x64]
  00068	ea000001	 b           |$LN21@OALKitlFin|
  0006c		 |$LN20@OALKitlFin|
  0006c	e3a03000	 mov         r3, #0
  00070	e58d3064	 str         r3, [sp, #0x64]
  00074		 |$LN21@OALKitlFin|
  00074		 |$LN28@OALKitlFin|
  00074		 |$LN27@OALKitlFin|
  00074		 |$LN26@OALKitlFin|
  00074		 |$LN17@OALKitlFin|

; 77   : 
; 78   :     // Look for driver in list
; 79   :     while (pDevice->name != NULL && !rc) {

  00074	e59d3088	 ldr         r3, [sp, #0x88]
  00078	e5933000	 ldr         r3, [r3]
  0007c	e3530000	 cmp         r3, #0
  00080	0a0000ae	 beq         |$LN16@OALKitlFin|
  00084	e59d300c	 ldr         r3, [sp, #0xC]
  00088	e3530000	 cmp         r3, #0
  0008c	1a0000ab	 bne         |$LN16@OALKitlFin|

; 80   : 
; 81   :         // Is it our device? Then move
; 82   :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00090	e59d3088	 ldr         r3, [sp, #0x88]
  00094	e2831004	 add         r1, r3, #4
  00098	e59d3084	 ldr         r3, [sp, #0x84]
  0009c	e5932000	 ldr         r2, [r3]
  000a0	e5913000	 ldr         r3, [r1]
  000a4	e1520003	 cmp         r2, r3
  000a8	0a000003	 beq         |$LN15@OALKitlFin|

; 83   :             // Move to next driver
; 84   :             pDevice++;

  000ac	e59d3088	 ldr         r3, [sp, #0x88]
  000b0	e2833018	 add         r3, r3, #0x18
  000b4	e58d3088	 str         r3, [sp, #0x88]

; 85   :             continue;

  000b8	eaffffed	 b           |$LN17@OALKitlFin|
  000bc		 |$LN15@OALKitlFin|

; 86   :         }            
; 87   : 
; 88   :         // Identify device and read its address/interrupt depends on bus type
; 89   :         switch (pDevLoc->IfcType) {

  000bc	e59d3084	 ldr         r3, [sp, #0x84]
  000c0	e5933000	 ldr         r3, [r3]
  000c4	e58d3068	 str         r3, [sp, #0x68]
  000c8	e59d3068	 ldr         r3, [sp, #0x68]
  000cc	e3530000	 cmp         r3, #0
  000d0	0a000015	 beq         |$LN10@OALKitlFin|
  000d4	e59d3068	 ldr         r3, [sp, #0x68]
  000d8	e3730001	 cmn         r3, #1
  000dc	0a000000	 beq         |$LN12@OALKitlFin|
  000e0	ea000022	 b           |$LN13@OALKitlFin|
  000e4		 |$LN12@OALKitlFin|

; 90   :         case InterfaceTypeUndefined:
; 91   :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  000e4	e59d3084	 ldr         r3, [sp, #0x84]
  000e8	e2832008	 add         r2, r3, #8
  000ec	e59d3088	 ldr         r3, [sp, #0x88]
  000f0	e2833008	 add         r3, r3, #8
  000f4	e5922000	 ldr         r2, [r2]
  000f8	e5933000	 ldr         r3, [r3]
  000fc	e1520003	 cmp         r2, r3
  00100	0a000000	 beq         |$LN11@OALKitlFin|
  00104	ea000019	 b           |$LN13@OALKitlFin|
  00108		 |$LN11@OALKitlFin|

; 92   :             address = pDevLoc->LogicalLoc;

  00108	e59d3084	 ldr         r3, [sp, #0x84]
  0010c	e2833008	 add         r3, r3, #8
  00110	e5933000	 ldr         r3, [r3]
  00114	e58d303c	 str         r3, [sp, #0x3C]
  00118	e3a03000	 mov         r3, #0
  0011c	e58d3040	 str         r3, [sp, #0x40]

; 93   :             rc = TRUE;

  00120	e3a03001	 mov         r3, #1
  00124	e58d300c	 str         r3, [sp, #0xC]

; 94   :             break;

  00128	ea000010	 b           |$LN13@OALKitlFin|
  0012c		 |$LN10@OALKitlFin|

; 95   :         case Internal:
; 96   :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  0012c	e59d3084	 ldr         r3, [sp, #0x84]
  00130	e2832008	 add         r2, r3, #8
  00134	e59d3088	 ldr         r3, [sp, #0x88]
  00138	e2833008	 add         r3, r3, #8
  0013c	e5922000	 ldr         r2, [r2]
  00140	e5933000	 ldr         r3, [r3]
  00144	e1520003	 cmp         r2, r3
  00148	0a000000	 beq         |$LN9@OALKitlFin|
  0014c	ea000007	 b           |$LN13@OALKitlFin|
  00150		 |$LN9@OALKitlFin|

; 97   :             address = pDevLoc->LogicalLoc;

  00150	e59d3084	 ldr         r3, [sp, #0x84]
  00154	e2833008	 add         r3, r3, #8
  00158	e5933000	 ldr         r3, [r3]
  0015c	e58d303c	 str         r3, [sp, #0x3C]
  00160	e3a03000	 mov         r3, #0
  00164	e58d3040	 str         r3, [sp, #0x40]

; 98   :             rc = TRUE;

  00168	e3a03001	 mov         r3, #1
  0016c	e58d300c	 str         r3, [sp, #0xC]
  00170		 |$LN13@OALKitlFin|

; 99   :             break;
; 100  : #ifdef KITL_PCI            
; 101  :         case PCIBus:
; 102  :             OALKitlPCIInfo(pDevLoc, &id, &address, &pDevLoc->Pin);
; 103  :             if (id != pDevice->id) break;
; 104  :             rc = TRUE;
; 105  :             break;
; 106  : #endif
; 107  :         }
; 108  : 
; 109  :         // If we don't identify device skip it
; 110  :         if (!rc) {

  00170	e59d300c	 ldr         r3, [sp, #0xC]
  00174	e3530000	 cmp         r3, #0
  00178	1a000003	 bne         |$LN8@OALKitlFin|

; 111  :             pDevice++;

  0017c	e59d3088	 ldr         r3, [sp, #0x88]
  00180	e2833018	 add         r3, r3, #0x18
  00184	e58d3088	 str         r3, [sp, #0x88]

; 112  :             continue;

  00188	eaffffb9	 b           |$LN26@OALKitlFin|
  0018c		 |$LN8@OALKitlFin|

; 113  :         }
; 114  : 
; 115  :         // When interface type is undefined physical address
; 116  :         // is equal to logical, so break loop
; 117  :         if (pDevLoc->IfcType == InterfaceTypeUndefined) {

  0018c	e59d3084	 ldr         r3, [sp, #0x84]
  00190	e5933000	 ldr         r3, [r3]
  00194	e3730001	 cmn         r3, #1
  00198	1a000004	 bne         |$LN7@OALKitlFin|

; 118  :             pDevLoc->PhysicalLoc = (VOID*)address;

  0019c	e59d203c	 ldr         r2, [sp, #0x3C]
  001a0	e59d3084	 ldr         r3, [sp, #0x84]
  001a4	e283300c	 add         r3, r3, #0xC
  001a8	e5832000	 str         r2, [r3]

; 119  :             break;

  001ac	ea000063	 b           |$LN16@OALKitlFin|
  001b0		 |$LN7@OALKitlFin|

; 120  :         }
; 121  : 
; 122  :         // Translate bus address, if it fails skip device
; 123  :         // Are we in IO space (1) or memory space (0)?
; 124  :         space = (UINT32)address & 0x1;

  001b0	e59d303c	 ldr         r3, [sp, #0x3C]
  001b4	e2033001	 and         r3, r3, #1
  001b8	e58d3010	 str         r3, [sp, #0x10]

; 125  : 
; 126  :         // Mask off the lowest bit; it just indicates which space we're in.  This isn't
; 127  :         // actually part of the address
; 128  :         address &= ~0x1;

  001bc	e59d203c	 ldr         r2, [sp, #0x3C]
  001c0	e3e03001	 mvn         r3, #1
  001c4	e0022003	 and         r2, r2, r3
  001c8	e59d3040	 ldr         r3, [sp, #0x40]
  001cc	e58d203c	 str         r2, [sp, #0x3C]
  001d0	e58d3040	 str         r3, [sp, #0x40]

; 129  : 
; 130  : #ifdef BUILDING_BOOTLOADER
; 131  :         if (!OALIoTransBusAddress(
; 132  :             pDevLoc->IfcType, pDevLoc->BusNumber, address, &space, &address
; 133  :         )) {
; 134  :             rc = FALSE;
; 135  :             pDevice++;
; 136  :             continue;
; 137  :         }
; 138  : 
; 139  :         // If address has address above 32bit address space skip device
; 140  :         if ((address >> 32) != 0) {
; 141  :             rc = FALSE;
; 142  :             pDevice++;
; 143  :             continue;
; 144  :         }
; 145  : 
; 146  : 
; 147  :         if (space == 0) {
; 148  :             // Do mapping to virtual address for memory space
; 149  :             pDevLoc->PhysicalLoc = OALPAtoVA((UINT32)address, FALSE);
; 150  :         }
; 151  :         else
; 152  :         {
; 153  :             // We're in IO space, no mapping necessary
; 154  :             UINT8* pAddress = (UINT8*)address;
; 155  :             pDevLoc->PhysicalLoc = (VOID*)address;
; 156  :         }
; 157  : #else // Not building boot loader
; 158  :         params.function = IOCTL_OAL_TRANSBUSADDRESS;

  001d4	e3a03005	 mov         r3, #5
  001d8	e58d3014	 str         r3, [sp, #0x14]

; 159  :         params.transAddress.ifcType = pDevLoc->IfcType;

  001dc	e59d3084	 ldr         r3, [sp, #0x84]
  001e0	e5933000	 ldr         r3, [r3]
  001e4	e58d301c	 str         r3, [sp, #0x1C]

; 160  :         params.transAddress.busNumber = pDevLoc->BusNumber;

  001e8	e59d3084	 ldr         r3, [sp, #0x84]
  001ec	e2833004	 add         r3, r3, #4
  001f0	e5933000	 ldr         r3, [r3]
  001f4	e58d3020	 str         r3, [sp, #0x20]

; 161  :         params.transAddress.space = space;

  001f8	e59d3010	 ldr         r3, [sp, #0x10]
  001fc	e58d3024	 str         r3, [sp, #0x24]

; 162  :         params.transAddress.address = address;

  00200	e59d303c	 ldr         r3, [sp, #0x3C]
  00204	e58d302c	 str         r3, [sp, #0x2C]
  00208	e59d3040	 ldr         r3, [sp, #0x40]
  0020c	e58d3030	 str         r3, [sp, #0x30]

; 163  :         if (!OEMIoControl(
; 164  :             IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, NULL
; 165  :         ) || !params.rc) {

  00210	e3a03000	 mov         r3, #0
  00214	e58d3004	 str         r3, [sp, #4]
  00218	e3a03000	 mov         r3, #0
  0021c	e58d3000	 str         r3, [sp]
  00220	e3a03000	 mov         r3, #0
  00224	e3a02028	 mov         r2, #0x28
  00228	e28d1014	 add         r1, sp, #0x14
  0022c	e59f01a8	 ldr         r0, [pc, #0x1A8]
  00230	eb000000	 bl          OEMIoControl
  00234	e58d006c	 str         r0, [sp, #0x6C]
  00238	e59d306c	 ldr         r3, [sp, #0x6C]
  0023c	e3530000	 cmp         r3, #0
  00240	0a000002	 beq         |$LN5@OALKitlFin|
  00244	e59d3018	 ldr         r3, [sp, #0x18]
  00248	e3530000	 cmp         r3, #0
  0024c	1a000005	 bne         |$LN6@OALKitlFin|
  00250		 |$LN5@OALKitlFin|

; 166  :             rc = FALSE;

  00250	e3a03000	 mov         r3, #0
  00254	e58d300c	 str         r3, [sp, #0xC]

; 167  :             pDevice++;

  00258	e59d3088	 ldr         r3, [sp, #0x88]
  0025c	e2833018	 add         r3, r3, #0x18
  00260	e58d3088	 str         r3, [sp, #0x88]

; 168  :             continue;

  00264	eaffff82	 b           |$LN27@OALKitlFin|
  00268		 |$LN6@OALKitlFin|

; 169  :         }
; 170  :         address = params.transAddress.address;

  00268	e59d302c	 ldr         r3, [sp, #0x2C]
  0026c	e58d303c	 str         r3, [sp, #0x3C]
  00270	e59d3030	 ldr         r3, [sp, #0x30]
  00274	e58d3040	 str         r3, [sp, #0x40]

; 171  :         space = params.transAddress.space;

  00278	e59d3024	 ldr         r3, [sp, #0x24]
  0027c	e58d3010	 str         r3, [sp, #0x10]

; 172  : 
; 173  :         // If address has address above 32bit address space skip device
; 174  :         if ((address >> 32) != 0) {

  00280	e59d3040	 ldr         r3, [sp, #0x40]
  00284	e3530000	 cmp         r3, #0
  00288	0a000005	 beq         |$LN4@OALKitlFin|

; 175  :             rc = FALSE;

  0028c	e3a03000	 mov         r3, #0
  00290	e58d300c	 str         r3, [sp, #0xC]

; 176  :             pDevice++;

  00294	e59d3088	 ldr         r3, [sp, #0x88]
  00298	e2833018	 add         r3, r3, #0x18
  0029c	e58d3088	 str         r3, [sp, #0x88]

; 177  :             continue;

  002a0	eaffff73	 b           |$LN28@OALKitlFin|
  002a4		 |$LN4@OALKitlFin|

; 178  :         }
; 179  : 
; 180  :         // Do mapping to virtual address for memory space
; 181  :         if (space == 0) {

  002a4	e59d3010	 ldr         r3, [sp, #0x10]
  002a8	e3530000	 cmp         r3, #0
  002ac	1a00001b	 bne         |$LN3@OALKitlFin|

; 182  :             UINT32 offset;
; 183  :             UINT8 *pAddress;
; 184  :             UINT32 pa = (UINT32)address;

  002b0	e59d303c	 ldr         r3, [sp, #0x3C]
  002b4	e58d3044	 str         r3, [sp, #0x44]

; 185  :             
; 186  :             offset = pa & (VM_PAGE_SIZE - 1);

  002b8	e59d2044	 ldr         r2, [sp, #0x44]
  002bc	e3a03c0f	 mov         r3, #0xF, 24
  002c0	e38330ff	 orr         r3, r3, #0xFF
  002c4	e0023003	 and         r3, r2, r3
  002c8	e58d3048	 str         r3, [sp, #0x48]

; 187  :             pa &= ~(VM_PAGE_SIZE - 1);

  002cc	e59d2044	 ldr         r2, [sp, #0x44]
  002d0	e3e03c0f	 mvn         r3, #0xF, 24
  002d4	e22330ff	 eor         r3, r3, #0xFF
  002d8	e0023003	 and         r3, r2, r3
  002dc	e58d3044	 str         r3, [sp, #0x44]

; 188  :             pAddress = NKPhysToVirt(pa >> 8, FALSE);

  002e0	e3a01000	 mov         r1, #0
  002e4	e59d3044	 ldr         r3, [sp, #0x44]
  002e8	e1a00423	 mov         r0, r3, lsr #8
  002ec	eb000000	 bl          NKPhysToVirt
  002f0	e58d0070	 str         r0, [sp, #0x70]
  002f4	e59d3070	 ldr         r3, [sp, #0x70]
  002f8	e58d304c	 str         r3, [sp, #0x4C]

; 189  :             pAddress += offset;

  002fc	e59d204c	 ldr         r2, [sp, #0x4C]
  00300	e59d3048	 ldr         r3, [sp, #0x48]
  00304	e0823003	 add         r3, r2, r3
  00308	e58d304c	 str         r3, [sp, #0x4C]

; 190  :             
; 191  :             pDevLoc->PhysicalLoc = pAddress;

  0030c	e59d3084	 ldr         r3, [sp, #0x84]
  00310	e283200c	 add         r2, r3, #0xC
  00314	e59d304c	 ldr         r3, [sp, #0x4C]
  00318	e5823000	 str         r3, [r2]

; 192  :         }
; 193  :         else

  0031c	ea000005	 b           |$LN2@OALKitlFin|
  00320		 |$LN3@OALKitlFin|

; 194  :         {
; 195  :             // We're in IO space, no mapping necessary
; 196  :             UINT8* pAddress = (UINT8*)address;

  00320	e59d303c	 ldr         r3, [sp, #0x3C]
  00324	e58d3050	 str         r3, [sp, #0x50]

; 197  :             pDevLoc->PhysicalLoc = (VOID*)address;

  00328	e59d203c	 ldr         r2, [sp, #0x3C]
  0032c	e59d3084	 ldr         r3, [sp, #0x84]
  00330	e283300c	 add         r3, r3, #0xC
  00334	e5832000	 str         r2, [r3]
  00338		 |$LN2@OALKitlFin|

; 198  :         }
; 199  : #endif
; 200  :         // We get all we need
; 201  :         break;

  00338	ea000000	 b           |$LN16@OALKitlFin|

; 202  :     }

  0033c	eaffff4c	 b           |$LN17@OALKitlFin|
  00340		 |$LN16@OALKitlFin|

; 203  : 
; 204  :     // Return NULL if driver wasn't found
; 205  :     if (!rc) pDevice = NULL;

  00340	e59d300c	 ldr         r3, [sp, #0xC]
  00344	e3530000	 cmp         r3, #0
  00348	1a000001	 bne         |$LN1@OALKitlFin|
  0034c	e3a03000	 mov         r3, #0
  00350	e58d3088	 str         r3, [sp, #0x88]
  00354		 |$LN1@OALKitlFin|

; 206  : 
; 207  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 208  :         "-OALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%08x)\r\n",
; 209  :         pDevice, (pDevice != NULL) ? pDevice->name : L"", pDevLoc->PhysicalLoc
; 210  :     ));

  00354	e59f307c	 ldr         r3, [pc, #0x7C]
  00358	e5933440	 ldr         r3, [r3, #0x440]
  0035c	e3130a01	 tst         r3, #1, 20
  00360	0a000012	 beq         |$LN24@OALKitlFin|
  00364	e59d3088	 ldr         r3, [sp, #0x88]
  00368	e3530000	 cmp         r3, #0
  0036c	0a000003	 beq         |$LN22@OALKitlFin|
  00370	e59d3088	 ldr         r3, [sp, #0x88]
  00374	e5933000	 ldr         r3, [r3]
  00378	e58d3074	 str         r3, [sp, #0x74]
  0037c	ea000001	 b           |$LN23@OALKitlFin|
  00380		 |$LN22@OALKitlFin|
  00380	e59f304c	 ldr         r3, [pc, #0x4C]
  00384	e58d3074	 str         r3, [sp, #0x74]
  00388		 |$LN23@OALKitlFin|
  00388	e59d3084	 ldr         r3, [sp, #0x84]
  0038c	e283300c	 add         r3, r3, #0xC
  00390	e5933000	 ldr         r3, [r3]
  00394	e59d2074	 ldr         r2, [sp, #0x74]
  00398	e59d1088	 ldr         r1, [sp, #0x88]
  0039c	e59f002c	 ldr         r0, [pc, #0x2C]
  003a0	eb000000	 bl          KITLOutputDebugString
  003a4	e3a03001	 mov         r3, #1
  003a8	e58d3078	 str         r3, [sp, #0x78]
  003ac	ea000001	 b           |$LN25@OALKitlFin|
  003b0		 |$LN24@OALKitlFin|
  003b0	e3a03000	 mov         r3, #0
  003b4	e58d3078	 str         r3, [sp, #0x78]
  003b8		 |$LN25@OALKitlFin|

; 211  :     return pDevice;

  003b8	e59d3088	 ldr         r3, [sp, #0x88]
  003bc	e58d3060	 str         r3, [sp, #0x60]

; 212  : }

  003c0	e59d0060	 ldr         r0, [sp, #0x60]
  003c4	e28dd07c	 add         sp, sp, #0x7C
  003c8	e89d6000	 ldmia       sp, {sp, lr}
  003cc	e12fff1e	 bx          lr
  003d0		 |$LN32@OALKitlFin|
  003d0		 |$LN33@OALKitlFin|
  003d0	00000000	 DCD         |??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@|
  003d4		 |$LN34@OALKitlFin|
  003d4	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  003d8		 |$LN35@OALKitlFin|
  003d8	00000000	 DCD         |dpCurSettings|
  003dc		 |$LN36@OALKitlFin|
  003dc	01010014	 DCD         0x1010014
  003e0		 |$LN37@OALKitlFin|
  003e0	00000000	 DCD         |??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  003e4		 |$M43207|

			 ENDP  ; |OALKitlFindDevice|

	EXPORT	|??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	EXPORT	|OALKitlDeviceName|

  00008			 AREA	 |.pdata|, PDATA
|$T43227| DCD	|$LN18@OALKitlDev|
	DCD	0x40006104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@| DCB "-"
	DCB	"OALKitlDeviceName(name = 0x%08x('%s')", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlDeviceName(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  003e4			 AREA	 |.text|, CODE, ARM

  003e4		 |OALKitlDeviceName| PROC

; 221  : ) {

  003e4		 |$LN18@OALKitlDev|
  003e4	e1a0c00d	 mov         r12, sp
  003e8	e92d0003	 stmdb       sp!, {r0, r1}
  003ec	e92d5000	 stmdb       sp!, {r12, lr}
  003f0	e24dd01c	 sub         sp, sp, #0x1C
  003f4		 |$M43224|

; 222  :     BOOL rc = FALSE;

  003f4	e3a03000	 mov         r3, #0
  003f8	e58d3004	 str         r3, [sp, #4]

; 223  :     static WCHAR name[64];
; 224  :     LPCWSTR pName = NULL;

  003fc	e3a03000	 mov         r3, #0
  00400	e58d3008	 str         r3, [sp, #8]

; 225  :     
; 226  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 227  :         "+OALKitlDeviceName(%d/%d/%08x, 0x%08x)\r\n",
; 228  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 229  :     ));

  00404	e59f3154	 ldr         r3, [pc, #0x154]
  00408	e5933440	 ldr         r3, [r3, #0x440]
  0040c	e3130a01	 tst         r3, #1, 20
  00410	0a00000e	 beq         |$LN11@OALKitlDev|
  00414	e59d3028	 ldr         r3, [sp, #0x28]
  00418	e58d3000	 str         r3, [sp]
  0041c	e59d3024	 ldr         r3, [sp, #0x24]
  00420	e2833008	 add         r3, r3, #8
  00424	e5933000	 ldr         r3, [r3]
  00428	e59d2024	 ldr         r2, [sp, #0x24]
  0042c	e2822004	 add         r2, r2, #4
  00430	e5922000	 ldr         r2, [r2]
  00434	e59d1024	 ldr         r1, [sp, #0x24]
  00438	e5911000	 ldr         r1, [r1]
  0043c	e59f0120	 ldr         r0, [pc, #0x120]
  00440	eb000000	 bl          KITLOutputDebugString
  00444	e3a03001	 mov         r3, #1
  00448	e58d3014	 str         r3, [sp, #0x14]
  0044c	ea000001	 b           |$LN12@OALKitlDev|
  00450		 |$LN11@OALKitlDev|
  00450	e3a03000	 mov         r3, #0
  00454	e58d3014	 str         r3, [sp, #0x14]
  00458		 |$LN12@OALKitlDev|
  00458		 |$LN15@OALKitlDev|
  00458		 |$LN8@OALKitlDev|

; 230  : 
; 231  :     // Look for driver in list
; 232  :     while (pDevice->name != NULL && !rc) {

  00458	e59d3028	 ldr         r3, [sp, #0x28]
  0045c	e5933000	 ldr         r3, [r3]
  00460	e3530000	 cmp         r3, #0
  00464	0a000029	 beq         |$LN7@OALKitlDev|
  00468	e59d3004	 ldr         r3, [sp, #4]
  0046c	e3530000	 cmp         r3, #0
  00470	1a000026	 bne         |$LN7@OALKitlDev|

; 233  : 
; 234  :         // Is it our device? Then move
; 235  :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00474	e59d3028	 ldr         r3, [sp, #0x28]
  00478	e2831004	 add         r1, r3, #4
  0047c	e59d3024	 ldr         r3, [sp, #0x24]
  00480	e5932000	 ldr         r2, [r3]
  00484	e5913000	 ldr         r3, [r1]
  00488	e1520003	 cmp         r2, r3
  0048c	0a000003	 beq         |$LN6@OALKitlDev|

; 236  :             // Move to next driver
; 237  :             pDevice++;

  00490	e59d3028	 ldr         r3, [sp, #0x28]
  00494	e2833018	 add         r3, r3, #0x18
  00498	e58d3028	 str         r3, [sp, #0x28]

; 238  :             continue;

  0049c	eaffffed	 b           |$LN8@OALKitlDev|
  004a0		 |$LN6@OALKitlDev|

; 239  :         }            
; 240  : 
; 241  :         // Identify device and read its address/interrupt depends on bus type
; 242  :         switch (pDevLoc->IfcType) {

  004a0	e59d3024	 ldr         r3, [sp, #0x24]
  004a4	e5933000	 ldr         r3, [r3]
  004a8	e3530000	 cmp         r3, #0
  004ac	0a000000	 beq         |$LN3@OALKitlDev|
  004b0	ea00000d	 b           |$LN4@OALKitlDev|
  004b4		 |$LN3@OALKitlDev|

; 243  :         case Internal:
; 244  :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  004b4	e59d3024	 ldr         r3, [sp, #0x24]
  004b8	e2832008	 add         r2, r3, #8
  004bc	e59d3028	 ldr         r3, [sp, #0x28]
  004c0	e2833008	 add         r3, r3, #8
  004c4	e5922000	 ldr         r2, [r2]
  004c8	e5933000	 ldr         r3, [r3]
  004cc	e1520003	 cmp         r2, r3
  004d0	0a000000	 beq         |$LN2@OALKitlDev|
  004d4	ea000004	 b           |$LN4@OALKitlDev|
  004d8		 |$LN2@OALKitlDev|

; 245  :             pName = pDevice->name;

  004d8	e59d3028	 ldr         r3, [sp, #0x28]
  004dc	e5933000	 ldr         r3, [r3]
  004e0	e58d3008	 str         r3, [sp, #8]

; 246  :             rc = TRUE;

  004e4	e3a03001	 mov         r3, #1
  004e8	e58d3004	 str         r3, [sp, #4]
  004ec		 |$LN4@OALKitlDev|

; 247  :             break;
; 248  : #ifdef KITL_PCI            
; 249  :         case PCIBus:
; 250  :             {
; 251  :                 UINT32 id;
; 252  :                 OAL_PCI_LOCATION pciLoc;
; 253  : 
; 254  :                 pciLoc = *(OAL_PCI_LOCATION*)&pDevLoc->LogicalLoc;
; 255  :                 id = OALPCIGetId(pDevLoc->BusNumber, pciLoc);
; 256  :                 if (id != pDevice->id) break;
; 257  :                 OALLogPrintf(
; 258  :                     name, sizeof(name)/sizeof(WCHAR),
; 259  :                     L"%s @ id %d bus %d dev %d fnc %d",
; 260  :                     pDevice->name, pDevLoc->BusNumber, pciLoc.bus, pciLoc.dev,
; 261  :                     pciLoc.fnc
; 262  :                 );
; 263  :                 pName = name;
; 264  :                 rc = TRUE;
; 265  :             }                
; 266  :             break;
; 267  : #endif
; 268  :         }
; 269  : 
; 270  :         // If we don't identify device skip it
; 271  :         if (!rc) {

  004ec	e59d3004	 ldr         r3, [sp, #4]
  004f0	e3530000	 cmp         r3, #0
  004f4	1a000003	 bne         |$LN1@OALKitlDev|

; 272  :             pDevice++;

  004f8	e59d3028	 ldr         r3, [sp, #0x28]
  004fc	e2833018	 add         r3, r3, #0x18
  00500	e58d3028	 str         r3, [sp, #0x28]

; 273  :             continue;

  00504	eaffffd3	 b           |$LN15@OALKitlDev|
  00508		 |$LN1@OALKitlDev|

; 274  :         }
; 275  :             
; 276  :         // We get all we need
; 277  :         break;

  00508	ea000000	 b           |$LN7@OALKitlDev|

; 278  :     }

  0050c	eaffffd1	 b           |$LN8@OALKitlDev|
  00510		 |$LN7@OALKitlDev|

; 279  : 
; 280  : 
; 281  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 282  :         "-OALKitlDeviceName(name = 0x%08x('%s')\r\n", pName, pName
; 283  :     ));

  00510	e59f3048	 ldr         r3, [pc, #0x48]
  00514	e5933440	 ldr         r3, [r3, #0x440]
  00518	e3130a01	 tst         r3, #1, 20
  0051c	0a000006	 beq         |$LN13@OALKitlDev|
  00520	e59d2008	 ldr         r2, [sp, #8]
  00524	e59d1008	 ldr         r1, [sp, #8]
  00528	e59f002c	 ldr         r0, [pc, #0x2C]
  0052c	eb000000	 bl          KITLOutputDebugString
  00530	e3a03001	 mov         r3, #1
  00534	e58d3018	 str         r3, [sp, #0x18]
  00538	ea000001	 b           |$LN14@OALKitlDev|
  0053c		 |$LN13@OALKitlDev|
  0053c	e3a03000	 mov         r3, #0
  00540	e58d3018	 str         r3, [sp, #0x18]
  00544		 |$LN14@OALKitlDev|

; 284  :     return pName;

  00544	e59d3008	 ldr         r3, [sp, #8]
  00548	e58d3010	 str         r3, [sp, #0x10]

; 285  : }

  0054c	e59d0010	 ldr         r0, [sp, #0x10]
  00550	e28dd01c	 add         sp, sp, #0x1C
  00554	e89d6000	 ldmia       sp, {sp, lr}
  00558	e12fff1e	 bx          lr
  0055c		 |$LN19@OALKitlDev|
  0055c		 |$LN20@OALKitlDev|
  0055c	00000000	 DCD         |??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@|
  00560		 |$LN21@OALKitlDev|
  00560	00000000	 DCD         |dpCurSettings|
  00564		 |$LN22@OALKitlDev|
  00564	00000000	 DCD         |??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  00568		 |$M43225|

			 ENDP  ; |OALKitlDeviceName|

	EXPORT	|??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	EXPORT	|OALKitlDeviceType|

  00010			 AREA	 |.pdata|, PDATA
|$T43243| DCD	|$LN18@OALKitlDev@2|
	DCD	0x40006104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"OALKitlDeviceType(type = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlDeviceType(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  00568			 AREA	 |.text|, CODE, ARM

  00568		 |OALKitlDeviceType| PROC

; 294  : ) {

  00568		 |$LN18@OALKitlDev@2|
  00568	e1a0c00d	 mov         r12, sp
  0056c	e92d0003	 stmdb       sp!, {r0, r1}
  00570	e92d5000	 stmdb       sp!, {r12, lr}
  00574	e24dd01c	 sub         sp, sp, #0x1C
  00578		 |$M43240|

; 295  :     BOOL rc = FALSE;

  00578	e3a03000	 mov         r3, #0
  0057c	e58d3004	 str         r3, [sp, #4]

; 296  :     OAL_KITL_TYPE type = OAL_KITL_TYPE_NONE;

  00580	e3a03000	 mov         r3, #0
  00584	e58d3008	 str         r3, [sp, #8]

; 297  :     
; 298  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 299  :         "+OALKitlDeviceType(%d/%d/%08x, 0x%08x)\r\n",
; 300  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 301  :     ));

  00588	e59f3154	 ldr         r3, [pc, #0x154]
  0058c	e5933440	 ldr         r3, [r3, #0x440]
  00590	e3130a01	 tst         r3, #1, 20
  00594	0a00000e	 beq         |$LN11@OALKitlDev@2|
  00598	e59d3028	 ldr         r3, [sp, #0x28]
  0059c	e58d3000	 str         r3, [sp]
  005a0	e59d3024	 ldr         r3, [sp, #0x24]
  005a4	e2833008	 add         r3, r3, #8
  005a8	e5933000	 ldr         r3, [r3]
  005ac	e59d2024	 ldr         r2, [sp, #0x24]
  005b0	e2822004	 add         r2, r2, #4
  005b4	e5922000	 ldr         r2, [r2]
  005b8	e59d1024	 ldr         r1, [sp, #0x24]
  005bc	e5911000	 ldr         r1, [r1]
  005c0	e59f0120	 ldr         r0, [pc, #0x120]
  005c4	eb000000	 bl          KITLOutputDebugString
  005c8	e3a03001	 mov         r3, #1
  005cc	e58d3014	 str         r3, [sp, #0x14]
  005d0	ea000001	 b           |$LN12@OALKitlDev@2|
  005d4		 |$LN11@OALKitlDev@2|
  005d4	e3a03000	 mov         r3, #0
  005d8	e58d3014	 str         r3, [sp, #0x14]
  005dc		 |$LN12@OALKitlDev@2|
  005dc		 |$LN15@OALKitlDev@2|
  005dc		 |$LN8@OALKitlDev@2|

; 302  : 
; 303  :     // Look for driver in list
; 304  :     while (pDevice->name != NULL && !rc) {

  005dc	e59d3028	 ldr         r3, [sp, #0x28]
  005e0	e5933000	 ldr         r3, [r3]
  005e4	e3530000	 cmp         r3, #0
  005e8	0a00002a	 beq         |$LN7@OALKitlDev@2|
  005ec	e59d3004	 ldr         r3, [sp, #4]
  005f0	e3530000	 cmp         r3, #0
  005f4	1a000027	 bne         |$LN7@OALKitlDev@2|

; 305  : 
; 306  :         // Is it our device? Then move
; 307  :         if (pDevLoc->IfcType != pDevice->ifcType) {

  005f8	e59d3028	 ldr         r3, [sp, #0x28]
  005fc	e2831004	 add         r1, r3, #4
  00600	e59d3024	 ldr         r3, [sp, #0x24]
  00604	e5932000	 ldr         r2, [r3]
  00608	e5913000	 ldr         r3, [r1]
  0060c	e1520003	 cmp         r2, r3
  00610	0a000003	 beq         |$LN6@OALKitlDev@2|

; 308  :             // Move to next driver
; 309  :             pDevice++;

  00614	e59d3028	 ldr         r3, [sp, #0x28]
  00618	e2833018	 add         r3, r3, #0x18
  0061c	e58d3028	 str         r3, [sp, #0x28]

; 310  :             continue;

  00620	eaffffed	 b           |$LN8@OALKitlDev@2|
  00624		 |$LN6@OALKitlDev@2|

; 311  :         }            
; 312  : 
; 313  :         // Identify device and read its address/interrupt depends on bus type
; 314  :         switch (pDevLoc->IfcType) {

  00624	e59d3024	 ldr         r3, [sp, #0x24]
  00628	e5933000	 ldr         r3, [r3]
  0062c	e3530000	 cmp         r3, #0
  00630	0a000000	 beq         |$LN3@OALKitlDev@2|
  00634	ea00000e	 b           |$LN4@OALKitlDev@2|
  00638		 |$LN3@OALKitlDev@2|

; 315  :         case Internal:
; 316  :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  00638	e59d3024	 ldr         r3, [sp, #0x24]
  0063c	e2832008	 add         r2, r3, #8
  00640	e59d3028	 ldr         r3, [sp, #0x28]
  00644	e2833008	 add         r3, r3, #8
  00648	e5922000	 ldr         r2, [r2]
  0064c	e5933000	 ldr         r3, [r3]
  00650	e1520003	 cmp         r2, r3
  00654	0a000000	 beq         |$LN2@OALKitlDev@2|
  00658	ea000005	 b           |$LN4@OALKitlDev@2|
  0065c		 |$LN2@OALKitlDev@2|

; 317  :             type = pDevice->type;

  0065c	e59d3028	 ldr         r3, [sp, #0x28]
  00660	e2833010	 add         r3, r3, #0x10
  00664	e5933000	 ldr         r3, [r3]
  00668	e58d3008	 str         r3, [sp, #8]

; 318  :             rc = TRUE;

  0066c	e3a03001	 mov         r3, #1
  00670	e58d3004	 str         r3, [sp, #4]
  00674		 |$LN4@OALKitlDev@2|

; 319  :             break;
; 320  : #ifdef KITL_PCI            
; 321  :         case PCIBus:
; 322  :             {
; 323  :                 UINT32 id;
; 324  :                 id = OALPCIGetId(
; 325  :                     pDevLoc->BusNumber, *(OAL_PCI_LOCATION*)&pDevLoc->LogicalLoc
; 326  :                 );
; 327  :                 if (id != pDevice->id) break;
; 328  :                 type = pDevice->type;
; 329  :                 rc = TRUE;
; 330  :             }                
; 331  :             break;
; 332  : #endif
; 333  :         }
; 334  : 
; 335  :         // If we don't identify device skip it
; 336  :         if (!rc) {

  00674	e59d3004	 ldr         r3, [sp, #4]
  00678	e3530000	 cmp         r3, #0
  0067c	1a000003	 bne         |$LN1@OALKitlDev@2|

; 337  :             pDevice++;

  00680	e59d3028	 ldr         r3, [sp, #0x28]
  00684	e2833018	 add         r3, r3, #0x18
  00688	e58d3028	 str         r3, [sp, #0x28]

; 338  :             continue;

  0068c	eaffffd2	 b           |$LN15@OALKitlDev@2|
  00690		 |$LN1@OALKitlDev@2|

; 339  :         }
; 340  :             
; 341  :         // We get all we need
; 342  :         break;

  00690	ea000000	 b           |$LN7@OALKitlDev@2|

; 343  :     }

  00694	eaffffd0	 b           |$LN8@OALKitlDev@2|
  00698		 |$LN7@OALKitlDev@2|

; 344  : 
; 345  : 
; 346  :     KITL_RETAILMSG(ZONE_KITL_OAL, ("-OALKitlDeviceType(type = %d)\r\n", type));

  00698	e59f3044	 ldr         r3, [pc, #0x44]
  0069c	e5933440	 ldr         r3, [r3, #0x440]
  006a0	e3130a01	 tst         r3, #1, 20
  006a4	0a000005	 beq         |$LN13@OALKitlDev@2|
  006a8	e59d1008	 ldr         r1, [sp, #8]
  006ac	e59f002c	 ldr         r0, [pc, #0x2C]
  006b0	eb000000	 bl          KITLOutputDebugString
  006b4	e3a03001	 mov         r3, #1
  006b8	e58d3018	 str         r3, [sp, #0x18]
  006bc	ea000001	 b           |$LN14@OALKitlDev@2|
  006c0		 |$LN13@OALKitlDev@2|
  006c0	e3a03000	 mov         r3, #0
  006c4	e58d3018	 str         r3, [sp, #0x18]
  006c8		 |$LN14@OALKitlDev@2|

; 347  :     return type;

  006c8	e59d3008	 ldr         r3, [sp, #8]
  006cc	e58d3010	 str         r3, [sp, #0x10]

; 348  : }

  006d0	e59d0010	 ldr         r0, [sp, #0x10]
  006d4	e28dd01c	 add         sp, sp, #0x1C
  006d8	e89d6000	 ldmia       sp, {sp, lr}
  006dc	e12fff1e	 bx          lr
  006e0		 |$LN19@OALKitlDev@2|
  006e0		 |$LN20@OALKitlDev@2|
  006e0	00000000	 DCD         |??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  006e4		 |$LN21@OALKitlDev@2|
  006e4	00000000	 DCD         |dpCurSettings|
  006e8		 |$LN22@OALKitlDev@2|
  006e8	00000000	 DCD         |??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  006ec		 |$M43241|

			 ENDP  ; |OALKitlDeviceType|

	END
