; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\KITL\kitlserial.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|g_kitlSign| DCB 0x6b
	DCB	0x49
	DCB	0x54
	DCB	0x4c
; File c:\wince600\platform\common\src\common\kitl\kitlserial.c

  00000			 AREA	 |.pdata|, PDATA
|$T43378| DCD	|$LN11@ChkSum|
	DCD	0x40000b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ChkSum| PROC

; 57   : {

  00000		 |$LN11@ChkSum|
  00000		 |$M43375|
  00000	e1a02001	 mov         r2, r1
  00004	e1a01000	 mov         r1, r0

; 58   :     UINT8 sum = 0;

  00008	e3a00000	 mov         r0, #0
  0000c	ea000003	 b           |$LN8@ChkSum|
  00010		 |$LL2@ChkSum|

; 59   :     int   nLen = length;
; 60   : 
; 61   :     while (nLen -- > 0) sum += *pBuffer++;

  00010	e4d13001	 ldrb        r3, [r1], #1
  00014	e2422001	 sub         r2, r2, #1
  00018	e0833000	 add         r3, r3, r0
  0001c	e20300ff	 and         r0, r3, #0xFF
  00020		 |$LN8@ChkSum|
  00020	e3520000	 cmp         r2, #0
  00024	cafffff9	 bgt         |$LL2@ChkSum|

; 62   :     return sum;
; 63   : }

  00028	e12fff1e	 bx          lr
  0002c		 |$M43376|

			 ENDP  ; |ChkSum|

	EXPORT	|??_C@_0BG@PDHAIEPB@?9SerialSend?$CIrc?5?$DN?51?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BK@FJBKAKDG@?$CLSerialSend?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	IMPORT	|KITLOutputDebugString|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.bss|, NOINIT
|g_kitlSerialState| % 0x610
|g_kitlSerialState| % 0x610

  00000			 AREA	 |.pdata|, PDATA
|$T43400| DCD	|$LN16@SerialSend|
	DCD	0x40003401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BG@PDHAIEPB@?9SerialSend?$CIrc?5?$DN?51?$CJ?$AN?6?$AA@| DCB "-Ser"
	DCB	"ialSend(rc = 1)", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BK@FJBKAKDG@?$CLSerialSend?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@| DCB "+"
	DCB	"SerialSend(0x%08x, %d)", 0xd, 0xa, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SerialSend| PROC

; 72   : {

  00000		 |$LN16@SerialSend|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M43397|
  00004	e1a04001	 mov         r4, r1
  00008	e1a0a000	 mov         r10, r0

; 73   :     UINT16 bestSize = (UINT16)g_kitlSerialState.info.bestSize;
; 74   :     UINT16 total = length;
; 75   :     UINT16 toSend, sent;
; 76   : 
; 77   :     KITL_RETAILMSG(ZONE_SEND, (
; 78   :         "+SerialSend(0x%08x, %d)\r\n", pData, length
; 79   :     ));

  0000c	e59f70b8	 ldr         r7, [pc, #0xB8]
  00010	e59f60b0	 ldr         r6, [pc, #0xB0]
  00014	e1a09004	 mov         r9, r4
  00018	e5973440	 ldr         r3, [r7, #0x440]
  0001c	e5962018	 ldr         r2, [r6, #0x18]
  00020	e3130010	 tst         r3, #0x10
  00024	159f0098	 ldrne       r0, [pc, #0x98]
  00028	e1a05802	 mov         r5, r2, lsl #16
  0002c	11a02004	 movne       r2, r4
  00030	11a0100a	 movne       r1, r10
  00034	e1a05825	 mov         r5, r5, lsr #16
  00038	1b000000	 blne        KITLOutputDebugString

; 80   : 
; 81   :     // block until send is complete; no timeout
; 82   :     while (total > 0) {

  0003c	e1b08004	 movs        r8, r4
  00040	0a000011	 beq         |$LN2@SerialSend|
  00044		 |$LL3@SerialSend|

; 83   :         toSend = (total > bestSize) ? bestSize : total;

  00044	e1580005	 cmp         r8, r5

; 84   :         sent = g_kitlSerialState.pDriver->pfnSend(pData, toSend);

  00048	e5963000	 ldr         r3, [r6]
  0004c	81a02005	 movhi       r2, r5
  00050	91a02009	 movls       r2, r9
  00054	e1a01802	 mov         r1, r2, lsl #16
  00058	e5933008	 ldr         r3, [r3, #8]
  0005c	e1a01821	 mov         r1, r1, lsr #16
  00060	e1a0000a	 mov         r0, r10
  00064	e1a0e00f	 mov         lr, pc
  00068	e12fff13	 bx          r3
  0006c	e1a02800	 mov         r2, r0, lsl #16
  00070	e1a02822	 mov         r2, r2, lsr #16

; 85   :         total -= sent;

  00074	e0483002	 sub         r3, r8, r2
  00078	e1a09803	 mov         r9, r3, lsl #16
  0007c	e1a09829	 mov         r9, r9, lsr #16
  00080	e1b08009	 movs        r8, r9

; 86   :         pData += sent;

  00084	e08aa002	 add         r10, r10, r2
  00088	1affffed	 bne         |$LL3@SerialSend|
  0008c		 |$LN2@SerialSend|

; 87   :     }
; 88   : 
; 89   :     // notify driver packet end if function exist (USB serial would need this)
; 90   :     if (g_kitlSerialState.pDriver->pfnSendComplete != NULL) {

  0008c	e5963000	 ldr         r3, [r6]
  00090	e593300c	 ldr         r3, [r3, #0xC]
  00094	e3530000	 cmp         r3, #0

; 91   :         g_kitlSerialState.pDriver->pfnSendComplete(length);

  00098	11a00004	 movne       r0, r4
  0009c	11a0e00f	 movne       lr, pc
  000a0	112fff13	 bxne        r3
  000a4	e5973440	 ldr         r3, [r7, #0x440]

; 92   :     }
; 93   :     
; 94   :         KITL_RETAILMSG(ZONE_SEND, ("-SerialSend(rc = 1)\r\n"));

  000a8	e3130010	 tst         r3, #0x10
  000ac	159f000c	 ldrne       r0, [pc, #0xC]
  000b0	1b000000	 blne        KITLOutputDebugString

; 95   :     return TRUE;

  000b4	e3a00001	 mov         r0, #1

; 96   : }

  000b8	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN17@SerialSend|
  000c0		 |$LN18@SerialSend|
  000c0	00000000	 DCD         |??_C@_0BG@PDHAIEPB@?9SerialSend?$CIrc?5?$DN?51?$CJ?$AN?6?$AA@|
  000c4		 |$LN19@SerialSend|
  000c4	00000000	 DCD         |??_C@_0BK@FJBKAKDG@?$CLSerialSend?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@|
  000c8		 |$LN20@SerialSend|
  000c8	00000000	 DCD         |g_kitlSerialState|
  000cc		 |$LN21@SerialSend|
  000cc	00000000	 DCD         |dpCurSettings|
  000d0		 |$M43398|

			 ENDP  ; |SerialSend|

	EXPORT	|??_C@_0BN@FOGKPFOM@?9SerialRecv?$CI?$CKpLength?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DN@FPKOAPOO@ERROR?3?5SerialRecv?3?5Received?5pack@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DI@FBKFFAPI@WARN?3?5SerialRecv?3?5Packet?5checksu@| [ DATA ] ; `string'
	EXPORT	|??_C@_0FC@OLAMHMJA@WARN?3?5SerialRecv?3?5payload?5size?5e@| [ DATA ] ; `string'
	EXPORT	|??_C@_0FE@EPOLMELO@WARN?3?5SerialRecv?3?5Packet?5type?5wr@| [ DATA ] ; `string'
	EXPORT	|??_C@_0FH@COFDJCJM@WARN?3?5SerialRecv?3?5Header?5checksu@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BK@PNMBDCIB@?$CLSerialRecv?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	IMPORT	|memcpy|
	IMPORT	|memcmp|

  00000			 AREA	 |.pdata|, PDATA
|$T43487| DCD	|$LN76@SerialRecv|
	DCD	0x4000d202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BN@FOGKPFOM@?9SerialRecv?$CI?$CKpLength?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"SerialRecv(*pLength = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DN@FPKOAPOO@ERROR?3?5SerialRecv?3?5Received?5pack@| DCB "ERROR: S"
	DCB	"erialRecv: Received packet too large, discarded...", 0xd
	DCB	0xa, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DI@FBKFFAPI@WARN?3?5SerialRecv?3?5Packet?5checksu@| DCB "WARN: Se"
	DCB	"rialRecv: Packet checksum error, discarded...", 0xd, 0xa
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0FC@OLAMHMJA@WARN?3?5SerialRecv?3?5payload?5size?5e@| DCB "WARN: S"
	DCB	"erialRecv: payload size error, Rec = %d > Max Desired = "
	DCB	"%d, discarded...", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0FE@EPOLMELO@WARN?3?5SerialRecv?3?5Packet?5type?5wr@| DCB "WARN: S"
	DCB	"erialRecv: Packet type wrong, Rec = 0x%02x, Desired = 0x"
	DCB	"%02x, discarded...", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0FH@COFDJCJM@WARN?3?5SerialRecv?3?5Header?5checksu@| DCB "WARN: Se"
	DCB	"rialRecv: Header checksum error, Rec = 0x%02x, Calc'd = "
	DCB	"0x%02x, discarded...", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BK@PNMBDCIB@?$CLSerialRecv?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@| DCB "+"
	DCB	"SerialRecv(0x%08x, %d)", 0xd, 0xa, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SerialRecv| PROC

; 112  : {

  00000		 |$LN76@SerialRecv|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M43484|
  00008	e1a0a001	 mov         r10, r1
  0000c	e1a01000	 mov         r1, r0
  00010	e58d100c	 str         r1, [sp, #0xC]
  00014	e58da008	 str         r10, [sp, #8]

; 113  :     UINT8 *pBuffer = (UINT8*)g_kitlSerialState.recvBuffer;
; 114  :     OAL_KITL_SERIAL_HEADER *pHeader = (OAL_KITL_SERIAL_HEADER*)pBuffer;
; 115  :     UINT16 bestSize = (UINT16)g_kitlSerialState.info.bestSize;

  00018	e59f5324	 ldr         r5, [pc, #0x324]

; 116  :     UINT16 recvCount = g_kitlSerialState.recvCount;
; 117  :     UINT16 recvPayload = g_kitlSerialState.recvPayload;
; 118  :     UINT16 count, rc = 0;
; 119  :     DWORD  dwRetry = 0;
; 120  :     UINT8  cSum;
; 121  : 
; 122  :    
; 123  :     KITL_RETAILMSG(ZONE_RECV, (
; 124  :         "+SerialRecv(0x%08x, %d)\r\n", pData, *pLength
; 125  :     ));

  0001c	e59f8314	 ldr         r8, [pc, #0x314]
  00020	e3a09000	 mov         r9, #0
  00024	e5953018	 ldr         r3, [r5, #0x18]
  00028	e2852c06	 add         r2, r5, #6, 24
  0002c	e1d240bc	 ldrh        r4, [r2, #0xC]
  00030	e58d3004	 str         r3, [sp, #4]
  00034	e5983440	 ldr         r3, [r8, #0x440]
  00038	e1d260be	 ldrh        r6, [r2, #0xE]
  0003c	e3a0b000	 mov         r11, #0
  00040	e3130020	 tst         r3, #0x20
  00044	11da20b0	 ldrneh      r2, [r10]
  00048	159f02f0	 ldrne       r0, [pc, #0x2F0]
  0004c	1b000000	 blne        KITLOutputDebugString

; 126  : 
; 127  : 
; 128  :     if (g_kitlSerialState.pDriver->pfnFlowControl) {

  00050	e5953000	 ldr         r3, [r5]
  00054	e5933024	 ldr         r3, [r3, #0x24]
  00058	e3530000	 cmp         r3, #0

; 129  :         g_kitlSerialState.pDriver->pfnFlowControl (TRUE);

  0005c	13a00001	 movne       r0, #1
  00060	11a0e00f	 movne       lr, pc
  00064	112fff13	 bxne        r3

; 130  :     }
; 131  : 
; 132  :     // Loop till there are data or we received a full packet
; 133  :     while (recvCount < (sizeof(OAL_KITL_SERIAL_HEADER) + recvPayload)) {

  00068	e286300a	 add         r3, r6, #0xA
  0006c	e1540003	 cmp         r4, r3
  00070	e1a07004	 mov         r7, r4
  00074	2a00006a	 bcs         |$LN68@SerialRecv|
  00078	e3a03c05	 mov         r3, #5, 24
  0007c	e38330e6	 orr         r3, r3, #0xE6
  00080	e58d3000	 str         r3, [sp]
  00084	e1a09003	 mov         r9, r3
  00088	e285a01c	 add         r10, r5, #0x1C
  0008c		 |$LL22@SerialRecv|

; 134  : 
; 135  :         // Call driver read function, with best size
; 136  :         count = g_kitlSerialState.pDriver->pfnRecv(
; 137  :             &pBuffer[recvCount], bestSize
; 138  :         );

  0008c	e59d2004	 ldr         r2, [sp, #4]
  00090	e5953000	 ldr         r3, [r5]
  00094	e084000a	 add         r0, r4, r10
  00098	e1a01802	 mov         r1, r2, lsl #16
  0009c	e5933010	 ldr         r3, [r3, #0x10]
  000a0	e1a01821	 mov         r1, r1, lsr #16
  000a4	e1a0e00f	 mov         lr, pc
  000a8	e12fff13	 bx          r3
  000ac	e1a03800	 mov         r3, r0, lsl #16
  000b0	e1a03823	 mov         r3, r3, lsr #16

; 139  : 
; 140  :         // Break loop when no are avaiable
; 141  :         if (count == 0) {

  000b4	e3530000	 cmp         r3, #0
  000b8	1a000007	 bne         |$LN20@SerialRecv|
  000bc	e5953000	 ldr         r3, [r5]

; 142  : 
; 143  :             if (g_kitlSerialState.pDriver->pfnFlowControl
; 144  :                 && (dwRetry ++ < RECV_RETRY)) {

  000c0	e5933024	 ldr         r3, [r3, #0x24]
  000c4	e3530000	 cmp         r3, #0
  000c8	0a000053	 beq         |$LN70@SerialRecv|
  000cc	e35b00c8	 cmp         r11, #0xC8
  000d0	e28bb001	 add         r11, r11, #1
  000d4	2a000050	 bcs         |$LN70@SerialRecv|

; 145  :                 continue;

  000d8	ea00004b	 b           |$LN67@SerialRecv|
  000dc		 |$LN20@SerialRecv|

; 146  :             }
; 147  :             break;
; 148  :         }
; 149  : 
; 150  :         // Update amount of data received
; 151  :         recvCount += count;

  000dc	e0833007	 add         r3, r3, r7
  000e0	e1a04803	 mov         r4, r3, lsl #16
  000e4	e1a04824	 mov         r4, r4, lsr #16

; 152  : 
; 153  :         // When we already know packet payload we can try next read
; 154  :         if (recvPayload != 0) continue;

  000e8	e3560000	 cmp         r6, #0
  000ec	1a000046	 bne         |$LN67@SerialRecv|

; 155  :         
; 156  :         // If we don't get full header just verify header
; 157  :         while (recvCount >= sizeof(OAL_KITL_SERIAL_HEADER)) {

  000f0	e1a07004	 mov         r7, r4
  000f4	e354000a	 cmp         r4, #0xA
  000f8	3a000043	 bcc         |$LN67@SerialRecv|
  000fc	e285801c	 add         r8, r5, #0x1C
  00100		 |$LL17@SerialRecv|

; 158  :             // When we get full signature break loop and continue
; 159  :             if (memcmp(g_kitlSign, pBuffer, sizeof(g_kitlSign)) == 0) break;

  00100	e59f0234	 ldr         r0, [pc, #0x234]
  00104	e3a02004	 mov         r2, #4
  00108	e285101c	 add         r1, r5, #0x1C
  0010c	eb000000	 bl          memcmp
  00110	e3500000	 cmp         r0, #0
  00114	0a000013	 beq         |$LN69@SerialRecv|

; 160  :             // Shift buffer by one byte and try again
; 161  :             for (count = 1; count < recvCount;  count++) {

  00118	e3a03001	 mov         r3, #1
  0011c	e3570001	 cmp         r7, #1
  00120	9a000009	 bls         |$LN12@SerialRecv|
  00124	e3a00001	 mov         r0, #1
  00128		 |$LL14@SerialRecv|

; 162  :                 pBuffer[count - 1] = pBuffer[count];

  00128	e1a01003	 mov         r1, r3
  0012c	e7f12008	 ldrb        r2, [r1, +r8]!
  00130	e2803001	 add         r3, r0, #1
  00134	e1a03803	 mov         r3, r3, lsl #16
  00138	e1a03823	 mov         r3, r3, lsr #16
  0013c	e1a00003	 mov         r0, r3
  00140	e5412001	 strb        r2, [r1, #-1]
  00144	e1530007	 cmp         r3, r7
  00148	3afffff6	 bcc         |$LL14@SerialRecv|
  0014c		 |$LN12@SerialRecv|

; 163  :             }
; 164  :             recvCount--;

  0014c	e2873cff	 add         r3, r7, #0xFF, 24
  00150	e28330ff	 add         r3, r3, #0xFF
  00154	e1a04803	 mov         r4, r3, lsl #16
  00158	e1a04824	 mov         r4, r4, lsr #16
  0015c	e1a07004	 mov         r7, r4
  00160	e354000a	 cmp         r4, #0xA
  00164	2affffe5	 bcs         |$LL17@SerialRecv|
  00168		 |$LN69@SerialRecv|
  00168	e59f81c8	 ldr         r8, [pc, #0x1C8]

; 165  :         }            
; 166  : 
; 167  :         // Did we received header?
; 168  :         if (recvCount >= sizeof(OAL_KITL_SERIAL_HEADER)) {

  0016c	e354000a	 cmp         r4, #0xA
  00170	3a000025	 bcc         |$LN67@SerialRecv|

; 169  :             // Validate header checksum, when we just received the full header
; 170  : 
; 171  :             if ((cSum = ChkSum(pBuffer, HEADER_CHKSUM_SIZE)) != pHeader->crcHeader)

  00174	e285001c	 add         r0, r5, #0x1C
  00178	e3a02000	 mov         r2, #0
  0017c	e3a01009	 mov         r1, #9
  00180		 |$LL43@SerialRecv|
  00180	e4d03001	 ldrb        r3, [r0], #1
  00184	e2411001	 sub         r1, r1, #1
  00188	e3510000	 cmp         r1, #0
  0018c	e0833002	 add         r3, r3, r2
  00190	e20320ff	 and         r2, r3, #0xFF
  00194	cafffff9	 bgt         |$LL43@SerialRecv|
  00198	e5d51025	 ldrb        r1, [r5, #0x25]
  0019c	e1520001	 cmp         r2, r1
  001a0	0a000004	 beq         |$LN10@SerialRecv|
  001a4	e5983440	 ldr         r3, [r8, #0x440]

; 172  :             {
; 173  :                 // Checksum failure, discard the packet
; 174  :                     KITL_RETAILMSG(ZONE_WARNING, ("WARN: SerialRecv: "
; 175  :                     "Header checksum error, Rec = 0x%02x, Calc'd = 0x%02x, discarded...\r\n",
; 176  :                     pHeader->crcHeader,cSum
; 177  :                 ));

  001a8	e3130001	 tst         r3, #1
  001ac	0a000013	 beq         |$LN32@SerialRecv|
  001b0	e59f017c	 ldr         r0, [pc, #0x17C]

; 178  :                 recvCount = 0;

  001b4	ea000010	 b           |$LN72@SerialRecv|
  001b8		 |$LN10@SerialRecv|

; 179  :                 continue;
; 180  :             }
; 181  :             else if (OAL_KITL_SERIAL_PACKET != pHeader->packetType)

  001b8	e5d51020	 ldrb        r1, [r5, #0x20]
  001bc	e35100aa	 cmp         r1, #0xAA
  001c0	0a000005	 beq         |$LN8@SerialRecv|
  001c4	e5983440	 ldr         r3, [r8, #0x440]

; 182  :             {
; 183  :                 // Checksum failure, discard the packet
; 184  :                     KITL_RETAILMSG(ZONE_WARNING, ("WARN: SerialRecv: "
; 185  :                     "Packet type wrong, Rec = 0x%02x, Desired = 0x%02x, discarded...\r\n",
; 186  :                     pHeader->packetType,OAL_KITL_SERIAL_PACKET
; 187  :                 ));

  001c8	e3130001	 tst         r3, #1
  001cc	0a00000b	 beq         |$LN32@SerialRecv|
  001d0	e59f0158	 ldr         r0, [pc, #0x158]
  001d4	e3a020aa	 mov         r2, #0xAA

; 188  :                 recvCount = 0;

  001d8	ea000007	 b           |$LN72@SerialRecv|
  001dc		 |$LN8@SerialRecv|

; 189  :                 continue;
; 190  :             }
; 191  :             else if (KITL_MTU - sizeof(OAL_KITL_SERIAL_HEADER) < pHeader->payloadSize)

  001dc	e1d512b2	 ldrh        r1, [r5, #0x22]
  001e0	e1510009	 cmp         r1, r9
  001e4	9a000007	 bls         |$LN6@SerialRecv|
  001e8	e5983440	 ldr         r3, [r8, #0x440]

; 192  :             {
; 193  :                 // Checksum failure, discard the packet
; 194  :                     KITL_RETAILMSG(ZONE_WARNING, ("WARN: SerialRecv: "
; 195  :                     "payload size error, Rec = %d > Max Desired = %d, discarded...\r\n",
; 196  :                     pHeader->payloadSize, KITL_MTU - sizeof(OAL_KITL_SERIAL_HEADER)
; 197  :                 ));

  001ec	e3130001	 tst         r3, #1
  001f0	0a000002	 beq         |$LN32@SerialRecv|
  001f4	e59f0130	 ldr         r0, [pc, #0x130]
  001f8	e1a02009	 mov         r2, r9
  001fc		 |$LN72@SerialRecv|
  001fc	eb000000	 bl          KITLOutputDebugString
  00200		 |$LN32@SerialRecv|

; 198  :                 recvCount = 0;

  00200	e3a04000	 mov         r4, #0

; 199  :                 continue;

  00204	ea000000	 b           |$LN67@SerialRecv|
  00208		 |$LN6@SerialRecv|

; 200  :             }
; 201  :             // Now we know how large payload should be
; 202  :             recvPayload = pHeader->payloadSize;

  00208	e1a06001	 mov         r6, r1
  0020c		 |$LN67@SerialRecv|

; 130  :     }
; 131  : 
; 132  :     // Loop till there are data or we received a full packet
; 133  :     while (recvCount < (sizeof(OAL_KITL_SERIAL_HEADER) + recvPayload)) {

  0020c	e286300a	 add         r3, r6, #0xA
  00210	e1540003	 cmp         r4, r3
  00214	e1a07004	 mov         r7, r4
  00218	3affff9b	 bcc         |$LL22@SerialRecv|
  0021c		 |$LN70@SerialRecv|

; 112  : {

  0021c	e59da008	 ldr         r10, [sp, #8]
  00220	e3a09000	 mov         r9, #0
  00224		 |$LN68@SerialRecv|

; 203  :         }
; 204  :     }
; 205  : 
; 206  :     // Did we receive full packet? If no leave for now...
; 207  :     if (
; 208  :         recvPayload == 0 ||
; 209  :         recvCount < (sizeof(OAL_KITL_SERIAL_HEADER) + recvPayload)
; 210  :     ) goto cleanUp;

  00224	e1b03006	 movs        r3, r6
  00228	0a000027	 beq         |$cleanUp$43207|
  0022c	e283700a	 add         r7, r3, #0xA
  00230	e1540007	 cmp         r4, r7
  00234	3a000024	 bcc         |$cleanUp$43207|

; 211  : 
; 212  : 
; 213  :     // Received the full packet, calculate checksum
; 214  :     if (ChkSum(
; 215  :         pBuffer + sizeof(OAL_KITL_SERIAL_HEADER), recvPayload
; 216  :     ) != pHeader->crcData) {

  00238	e2850026	 add         r0, r5, #0x26
  0023c	e3a02000	 mov         r2, #0
  00240	e1a01006	 mov         r1, r6
  00244	e3560000	 cmp         r6, #0
  00248	da000005	 ble         |$LN65@SerialRecv|
  0024c		 |$LL47@SerialRecv|
  0024c	e4d03001	 ldrb        r3, [r0], #1
  00250	e2411001	 sub         r1, r1, #1
  00254	e3510000	 cmp         r1, #0
  00258	e0823003	 add         r3, r2, r3
  0025c	e20320ff	 and         r2, r3, #0xFF
  00260	cafffff9	 bgt         |$LL47@SerialRecv|
  00264		 |$LN65@SerialRecv|
  00264	e5d53024	 ldrb        r3, [r5, #0x24]
  00268	e1520003	 cmp         r2, r3
  0026c	0a000005	 beq         |$LN3@SerialRecv|
  00270	e5983440	 ldr         r3, [r8, #0x440]

; 217  :             KITL_RETAILMSG(ZONE_WARNING, ("WARN: SerialRecv: "
; 218  :             "Packet checksum error, discarded...\r\n"
; 219  :         ));

  00274	e3130001	 tst         r3, #1
  00278	0a000011	 beq         |$LN34@SerialRecv|
  0027c	e59f00a4	 ldr         r0, [pc, #0xA4]
  00280	eb000000	 bl          KITLOutputDebugString

; 220  :         recvCount = recvPayload = 0;
; 221  :         goto cleanUp;

  00284	ea00000e	 b           |$LN34@SerialRecv|
  00288		 |$LN3@SerialRecv|

; 222  :     }
; 223  : 
; 224  :     // Valid packet received, check length requested
; 225  :     if (*pLength < sizeof(OAL_KITL_SERIAL_HEADER) + recvPayload) {

  00288	e1da30b0	 ldrh        r3, [r10]
  0028c	e1530007	 cmp         r3, r7
  00290	2a000005	 bcs         |$LN2@SerialRecv|
  00294	e5983440	 ldr         r3, [r8, #0x440]

; 226  :         KITL_RETAILMSG(ZONE_WARNING, ("ERROR: SerialRecv: "
; 227  :             "Received packet too large, discarded...\r\n"
; 228  :         ));

  00298	e3130001	 tst         r3, #1
  0029c	0a000008	 beq         |$LN34@SerialRecv|
  002a0	e59f007c	 ldr         r0, [pc, #0x7C]
  002a4	eb000000	 bl          KITLOutputDebugString
  002a8	ea000005	 b           |$LN34@SerialRecv|
  002ac		 |$LN2@SerialRecv|

; 229  :         recvCount = recvPayload = 0;
; 230  :         goto cleanUp;
; 231  :     }        
; 232  : 
; 233  :     // We have complete packet, indicate it up...
; 234  :     memcpy(pData, pBuffer, sizeof(OAL_KITL_SERIAL_HEADER) + recvPayload);

  002ac	e59d000c	 ldr         r0, [sp, #0xC]
  002b0	e1a02007	 mov         r2, r7
  002b4	e285101c	 add         r1, r5, #0x1C
  002b8	eb000000	 bl          memcpy

; 235  :     rc = sizeof(OAL_KITL_SERIAL_HEADER) + recvPayload;

  002bc	e1a09807	 mov         r9, r7, lsl #16
  002c0	e1a09829	 mov         r9, r9, lsr #16
  002c4		 |$LN34@SerialRecv|

; 236  :     recvCount = recvPayload = 0;

  002c4	e3a06000	 mov         r6, #0
  002c8	e3a04000	 mov         r4, #0
  002cc		 |$cleanUp$43207|

; 237  : 
; 238  : cleanUp:
; 239  : 
; 240  :     // Save state variable
; 241  :     g_kitlSerialState.recvCount = recvCount;

  002cc	e2853c06	 add         r3, r5, #6, 24
  002d0	e1c340bc	 strh        r4, [r3, #0xC]

; 242  :     g_kitlSerialState.recvPayload = recvPayload;

  002d4	e1c360be	 strh        r6, [r3, #0xE]

; 243  :     *pLength = rc;

  002d8	e1ca90b0	 strh        r9, [r10]

; 244  : 
; 245  :     if (g_kitlSerialState.pDriver->pfnFlowControl) {

  002dc	e5953000	 ldr         r3, [r5]
  002e0	e5933024	 ldr         r3, [r3, #0x24]
  002e4	e3530000	 cmp         r3, #0

; 246  :         g_kitlSerialState.pDriver->pfnFlowControl (FALSE);

  002e8	13a00000	 movne       r0, #0
  002ec	11a0e00f	 movne       lr, pc
  002f0	112fff13	 bxne        r3

; 247  :     }
; 248  : 
; 249  :         KITL_RETAILMSG(ZONE_RECV, ("-SerialRecv(*pLength = %d)\r\n", rc));

  002f4	e5983440	 ldr         r3, [r8, #0x440]
  002f8	e3130020	 tst         r3, #0x20
  002fc	159f001c	 ldrne       r0, [pc, #0x1C]
  00300	11a01009	 movne       r1, r9
  00304	1b000000	 blne        KITLOutputDebugString

; 250  :     return rc != 0;

  00308	e3590000	 cmp         r9, #0
  0030c	13a00001	 movne       r0, #1
  00310	03a00000	 moveq       r0, #0

; 251  : }

  00314	e28dd010	 add         sp, sp, #0x10
  00318	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0031c	e12fff1e	 bx          lr
  00320		 |$LN77@SerialRecv|
  00320		 |$LN78@SerialRecv|
  00320	00000000	 DCD         |??_C@_0BN@FOGKPFOM@?9SerialRecv?$CI?$CKpLength?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  00324		 |$LN79@SerialRecv|
  00324	00000000	 DCD         |??_C@_0DN@FPKOAPOO@ERROR?3?5SerialRecv?3?5Received?5pack@|
  00328		 |$LN80@SerialRecv|
  00328	00000000	 DCD         |??_C@_0DI@FBKFFAPI@WARN?3?5SerialRecv?3?5Packet?5checksu@|
  0032c		 |$LN81@SerialRecv|
  0032c	00000000	 DCD         |??_C@_0FC@OLAMHMJA@WARN?3?5SerialRecv?3?5payload?5size?5e@|
  00330		 |$LN82@SerialRecv|
  00330	00000000	 DCD         |??_C@_0FE@EPOLMELO@WARN?3?5SerialRecv?3?5Packet?5type?5wr@|
  00334		 |$LN83@SerialRecv|
  00334	00000000	 DCD         |??_C@_0FH@COFDJCJM@WARN?3?5SerialRecv?3?5Header?5checksu@|
  00338		 |$LN84@SerialRecv|
  00338	00000000	 DCD         |dpCurSettings|
  0033c		 |$LN85@SerialRecv|
  0033c	00000000	 DCD         |g_kitlSign|
  00340		 |$LN86@SerialRecv|
  00340	00000000	 DCD         |??_C@_0BK@PNMBDCIB@?$CLSerialRecv?$CI0x?$CF08x?0?5?$CFd?$CJ?$AN?6?$AA@|
  00344		 |$LN87@SerialRecv|
  00344	00000000	 DCD         |g_kitlSerialState|
  00348		 |$M43485|

			 ENDP  ; |SerialRecv|


  00000			 AREA	 |.pdata|, PDATA
|$T43537| DCD	|$LN19@SerialEnco|
	DCD	0x40002c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SerialEncode| PROC

; 261  : {

  00000		 |$LN19@SerialEnco|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M43534|

; 262  :     OAL_KITL_SERIAL_HEADER *pHeader = (OAL_KITL_SERIAL_HEADER*)pFrame;
; 263  : 
; 264  :     memcpy(&pHeader->signature, g_kitlSign, sizeof(pHeader->signature));

  00004	e59f20a0	 ldr         r2, [pc, #0xA0]

; 265  :     pHeader->packetType = OAL_KITL_SERIAL_PACKET;

  00008	e3a070aa	 mov         r7, #0xAA

; 266  :     pHeader->payloadSize = size;

  0000c	e1a0e421	 mov         lr, r1, lsr #8
  00010	e5923000	 ldr         r3, [r2]

; 267  :     pHeader->crcData = ChkSum(pFrame + sizeof(OAL_KITL_SERIAL_HEADER), size);

  00014	e280600a	 add         r6, r0, #0xA
  00018	e3a04000	 mov         r4, #0
  0001c	e5c03000	 strb        r3, [r0]
  00020	e5923000	 ldr         r3, [r2]
  00024	e1a05001	 mov         r5, r1
  00028	e3510000	 cmp         r1, #0
  0002c	e1a03423	 mov         r3, r3, lsr #8
  00030	e5c03001	 strb        r3, [r0, #1]
  00034	e5923000	 ldr         r3, [r2]
  00038	e1a03823	 mov         r3, r3, lsr #16
  0003c	e5c03002	 strb        r3, [r0, #2]
  00040	e5923000	 ldr         r3, [r2]
  00044	e5c07004	 strb        r7, [r0, #4]
  00048	e5c01006	 strb        r1, [r0, #6]
  0004c	e1a03c23	 mov         r3, r3, lsr #24
  00050	e5c03003	 strb        r3, [r0, #3]
  00054	e5c0e007	 strb        lr, [r0, #7]
  00058	da000005	 ble         |$LN13@SerialEnco|
  0005c		 |$LL4@SerialEnco|
  0005c	e4d63001	 ldrb        r3, [r6], #1
  00060	e2455001	 sub         r5, r5, #1
  00064	e3550000	 cmp         r5, #0
  00068	e0833004	 add         r3, r3, r4
  0006c	e20340ff	 and         r4, r3, #0xFF
  00070	cafffff9	 bgt         |$LL4@SerialEnco|
  00074		 |$LN13@SerialEnco|
  00074	e5c04008	 strb        r4, [r0, #8]

; 268  :     pHeader->crcHeader = ChkSum(pFrame, HEADER_CHKSUM_SIZE);

  00078	e1a0e000	 mov         lr, r0
  0007c	e3a02000	 mov         r2, #0
  00080	e3a01009	 mov         r1, #9
  00084		 |$LL8@SerialEnco|
  00084	e4de3001	 ldrb        r3, [lr], #1
  00088	e2411001	 sub         r1, r1, #1
  0008c	e3510000	 cmp         r1, #0
  00090	e0823003	 add         r3, r2, r3
  00094	e20320ff	 and         r2, r3, #0xFF
  00098	cafffff9	 bgt         |$LL8@SerialEnco|
  0009c	e5c02009	 strb        r2, [r0, #9]

; 269  :     return TRUE;

  000a0	e3a00001	 mov         r0, #1

; 270  : }

  000a4	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN20@SerialEnco|
  000ac		 |$LN21@SerialEnco|
  000ac	00000000	 DCD         |g_kitlSign|
  000b0		 |$M43535|

			 ENDP  ; |SerialEncode|


  00000			 AREA	 |.pdata|, PDATA
|$T43550| DCD	|$LN5@SerialDeco|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SerialDecode| PROC

; 280  : {

  00000		 |$LN5@SerialDeco|
  00000		 |$M43547|

; 281  :     UINT8 *pData;
; 282  :     
; 283  :     *pSize -= sizeof(OAL_KITL_SERIAL_HEADER);

  00000	e1d130b0	 ldrh        r3, [r1]

; 284  :     pData = pFrame + sizeof(OAL_KITL_SERIAL_HEADER);

  00004	e280000a	 add         r0, r0, #0xA
  00008	e2833cff	 add         r3, r3, #0xFF, 24
  0000c	e28330f6	 add         r3, r3, #0xF6
  00010	e1c130b0	 strh        r3, [r1]

; 285  :     return pData;
; 286  : }

  00014	e12fff1e	 bx          lr
  00018		 |$M43548|

			 ENDP  ; |SerialDecode|


  00000			 AREA	 |.pdata|, PDATA
|$T43558| DCD	|$LN7@SerialEnab|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SerialEnableInt| PROC

; 296  : {

  00000		 |$LN7@SerialEnab|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43555|
  00004	e3500000	 cmp         r0, #0

; 297  :     if (enable) {
; 298  :         g_kitlSerialState.pDriver->pfnEnableInts();

  00008	e59f302c	 ldr         r3, [pc, #0x2C]
  0000c	e5933000	 ldr         r3, [r3]
  00010	0a000004	 beq         |$LN2@SerialEnab|
  00014	e5933014	 ldr         r3, [r3, #0x14]
  00018	e1a0e00f	 mov         lr, pc
  0001c	e12fff13	 bx          r3

; 301  :     }        
; 302  : }

  00020	e49de004	 ldr         lr, [sp], #4
  00024	e12fff1e	 bx          lr
  00028		 |$LN2@SerialEnab|

; 299  :     } else {
; 300  :         g_kitlSerialState.pDriver->pfnDisableInts();

  00028	e5933018	 ldr         r3, [r3, #0x18]
  0002c	e1a0e00f	 mov         lr, pc
  00030	e12fff13	 bx          r3

; 301  :     }        
; 302  : }

  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$LN8@SerialEnab|
  0003c		 |$LN9@SerialEnab|
  0003c	00000000	 DCD         |g_kitlSerialState|
  00040		 |$M43556|

			 ENDP  ; |SerialEnableInt|


  00000			 AREA	 |.pdata|, PDATA
|$T43570| DCD	|$LN5@SerialGetD|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SerialGetDevCfg| PROC

; 312  : {

  00000		 |$LN5@SerialGetD|
  00000		 |$M43567|

; 313  :     *pSize = 0;

  00000	e3a03000	 mov         r3, #0
  00004	e1c130b0	 strh        r3, [r1]

; 314  :     return TRUE;

  00008	e3a00001	 mov         r0, #1

; 315  : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M43568|

			 ENDP  ; |SerialGetDevCfg|


  00000			 AREA	 |.pdata|, PDATA
|$T43579| DCD	|$LN5@SerialSetH|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SerialSetHostCfg| PROC

; 325  : {

  00000		 |$LN5@SerialSetH|
  00000		 |$M43576|

; 326  :      return TRUE;

  00000	e3a00001	 mov         r0, #1

; 327  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43577|

			 ENDP  ; |SerialSetHostCfg|

	EXPORT	|OALKitlSerialInit|
	EXPORT	|??_C@_0BO@KPIGKMGK@?9OALKitlSerialInit?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CG@IJDAEBCE@WARN?3?5KITL?5will?5run?5in?5polling?5m@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CN@MENCFIED@WARN?3?5KITL?5can?8t?5obtain?5SYSINTR?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CO@BPFMIJNH@WARN?3?5KITL?5can?8t?5obtain?5IRQ?5for?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CF@GMMNDEHJ@ERROR?3?5KITL?5call?5to?5pfnInit?5fail@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CE@LGCGCDLA@ERROR?3?5KITL?5device?5driver?5is?5NUL@| [ DATA ] ; `string'
	EXPORT	|??_C@_0DB@NNJFABKG@?$CLOALKitlSerialInit?$CI?8?$CFS?8?0?5?8?$CFs?8?0?50@| [ DATA ] ; `string'
	IMPORT	|OEMInterruptEnable|
	IMPORT	|OEMIoControl|

  00000			 AREA	 |.pdata|, PDATA
|$T43614| DCD	|$LN35@OALKitlSer|
	DCD	0x4000b302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BO@KPIGKMGK@?9OALKitlSerialInit?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"OALKitlSerialInit(rc = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CG@IJDAEBCE@WARN?3?5KITL?5will?5run?5in?5polling?5m@| DCB "WARN: "
	DCB	"KITL will run in polling mode", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CN@MENCFIED@WARN?3?5KITL?5can?8t?5obtain?5SYSINTR?5@| DCB "WARN: "
	DCB	"KITL can't obtain SYSINTR for IRQ %d", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CO@BPFMIJNH@WARN?3?5KITL?5can?8t?5obtain?5IRQ?5for?5@| DCB "WARN:"
	DCB	" KITL can't obtain IRQ for KITL device", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CF@GMMNDEHJ@ERROR?3?5KITL?5call?5to?5pfnInit?5fail@| DCB "ERROR: "
	DCB	"KITL call to pfnInit failed", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CE@LGCGCDLA@ERROR?3?5KITL?5device?5driver?5is?5NUL@| DCB "ERROR: "
	DCB	"KITL device driver is NULL", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0DB@NNJFABKG@?$CLOALKitlSerialInit?$CI?8?$CFS?8?0?5?8?$CFs?8?0?50@| DCB "+"
	DCB	"OALKitlSerialInit('%S', '%s', 0x%08x, 0x%08x)", 0xd, 0xa
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlSerialInit| PROC

; 339  : ) {

  00000		 |$LN35@OALKitlSer|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd01c	 sub         sp, sp, #0x1C
  00008		 |$M43611|
  00008	e1a09003	 mov         r9, r3
  0000c	e1a04002	 mov         r4, r2
  00010	e1a06001	 mov         r6, r1
  00014	e1a0a000	 mov         r10, r0

; 340  :     BOOL rc = FALSE;
; 341  :     OAL_KITL_SERIAL_DRIVER *pDriver;
; 342  :     KITL_SERIAL_INFO *pInfo = &g_kitlSerialState.info;
; 343  :     UINT32 irq, sysIntr;
; 344  : 
; 345  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 346  :         "+OALKitlSerialInit('%S', '%s', 0x%08x, 0x%08x)\r\n",
; 347  :         deviceId, pDevice->name, pArgs, pKitl
; 348  :     ));

  00018	e59f72a8	 ldr         r7, [pc, #0x2A8]
  0001c	e3a05000	 mov         r5, #0
  00020	e597e440	 ldr         lr, [r7, #0x440]
  00024	e31e0a01	 tst         lr, #1, 20
  00028	15962000	 ldrne       r2, [r6]
  0002c	159f0290	 ldrne       r0, [pc, #0x290]
  00030	11a03004	 movne       r3, r4
  00034	11a0100a	 movne       r1, r10
  00038	158d9000	 strne       r9, [sp]
  0003c	1b000000	 blne        KITLOutputDebugString

; 349  : 
; 350  :     // Cast driver config parameter
; 351  :     pDriver = (OAL_KITL_SERIAL_DRIVER*)pDevice->pDriver;

  00040	e5961014	 ldr         r1, [r6, #0x14]
  00044	e1b0b001	 movs        r11, r1

; 352  :     if (pDriver == NULL) {

  00048	1a000005	 bne         |$LN13@OALKitlSer|
  0004c	e5973440	 ldr         r3, [r7, #0x440]

; 353  :         KITL_RETAILMSG(ZONE_ERROR, ("ERROR: KITL device driver is NULL\r\n"));

  00050	e3130902	 tst         r3, #2, 18
  00054	0a000081	 beq         |$cleanUp$43281|
  00058	e59f0260	 ldr         r0, [pc, #0x260]
  0005c	eb000000	 bl          KITLOutputDebugString

; 354  :         goto cleanUp;

  00060	ea00007e	 b           |$cleanUp$43281|
  00064		 |$LN13@OALKitlSer|

; 355  :     }        
; 356  :     // initialize serial kitl information
; 357  :     pInfo->pAddress = (UINT8*)pArgs->devLoc.PhysicalLoc;

  00064	e59f821c	 ldr         r8, [pc, #0x21C]
  00068	e5943010	 ldr         r3, [r4, #0x10]

; 358  :     pInfo->baudRate = pArgs->baudRate;
; 359  :     pInfo->dataBits = pArgs->dataBits;
; 360  :     pInfo->stopBits = pArgs->stopBits;
; 361  :     pInfo->parity   = pArgs->parity;
; 362  :     pInfo->bestSize = 1;

  0006c	e3a02001	 mov         r2, #1

; 363  : 
; 364  :     // Call pfnInit
; 365  :     if (!pDriver->pfnInit(pInfo)) {

  00070	e2880004	 add         r0, r8, #4
  00074	e5883004	 str         r3, [r8, #4]
  00078	e5943018	 ldr         r3, [r4, #0x18]
  0007c	e5883008	 str         r3, [r8, #8]
  00080	e594301c	 ldr         r3, [r4, #0x1C]
  00084	e588300c	 str         r3, [r8, #0xC]
  00088	e5943020	 ldr         r3, [r4, #0x20]
  0008c	e5883010	 str         r3, [r8, #0x10]
  00090	e5943024	 ldr         r3, [r4, #0x24]
  00094	e5883014	 str         r3, [r8, #0x14]
  00098	e5882018	 str         r2, [r8, #0x18]
  0009c	e59b3000	 ldr         r3, [r11]
  000a0	e1a0e00f	 mov         lr, pc
  000a4	e12fff13	 bx          r3
  000a8	e3500000	 cmp         r0, #0
  000ac	1a000005	 bne         |$LN12@OALKitlSer|
  000b0	e5973440	 ldr         r3, [r7, #0x440]

; 366  :         KITL_RETAILMSG(ZONE_ERROR, ("ERROR: KITL call to pfnInit failed\r\n"));                

  000b4	e3130902	 tst         r3, #2, 18
  000b8	0a000068	 beq         |$cleanUp$43281|
  000bc	e59f01f8	 ldr         r0, [pc, #0x1F8]
  000c0	eb000000	 bl          KITLOutputDebugString
  000c4	ea000065	 b           |$cleanUp$43281|
  000c8		 |$LN12@OALKitlSer|

; 367  :         goto cleanUp;
; 368  :     }
; 369  : 
; 370  :     // Best size can't be larger than MTU
; 371  :     if (pInfo->bestSize > KITL_MTU) pInfo->bestSize = KITL_MTU;

  000c8	e5983018	 ldr         r3, [r8, #0x18]

; 372  : 
; 373  :     // Map and enable interrupt
; 374  :     if ((pArgs->flags & OAL_KITL_FLAGS_POLL) != 0) {

  000cc	e3a0e000	 mov         lr, #0
  000d0	e3530e5f	 cmp         r3, #0x5F, 28
  000d4	83a03e5f	 movhi       r3, #0x5F, 28
  000d8	85883018	 strhi       r3, [r8, #0x18]
  000dc	e5943000	 ldr         r3, [r4]
  000e0	e3130010	 tst         r3, #0x10

; 375  :         sysIntr = KITL_SYSINTR_NOINTR;

  000e4	13e06000	 mvnne       r6, #0
  000e8	158d6008	 strne       r6, [sp, #8]
  000ec	1a000038	 bne         |$LN30@OALKitlSer|

; 377  :         // Get IRQ, when interface is undefined use Pin as IRQ
; 378  :         if (pArgs->devLoc.IfcType == InterfaceTypeUndefined) {

  000f0	e5943004	 ldr         r3, [r4, #4]
  000f4	e3e05000	 mvn         r5, #0
  000f8	e3a06004	 mov         r6, #4
  000fc	e3730001	 cmn         r3, #1

; 379  :             irq = pArgs->devLoc.Pin;

  00100	0594e014	 ldreq       lr, [r4, #0x14]
  00104	058de00c	 streq       lr, [sp, #0xC]
  00108	0a000010	 beq         |$LN6@OALKitlSer|

; 380  :         } else {
; 381  :             if (!OEMIoControl(
; 382  :                 IOCTL_HAL_REQUEST_IRQ, &pArgs->devLoc, sizeof(pArgs->devLoc),
; 383  :                 &irq, sizeof(irq), NULL
; 384  :             )) {                

  0010c	e59f01a4	 ldr         r0, [pc, #0x1A4]
  00110	e28d300c	 add         r3, sp, #0xC
  00114	e3a02014	 mov         r2, #0x14
  00118	e2841004	 add         r1, r4, #4
  0011c	e58de004	 str         lr, [sp, #4]
  00120	e58d6000	 str         r6, [sp]
  00124	eb000000	 bl          OEMIoControl
  00128	e3500000	 cmp         r0, #0
  0012c	1a000006	 bne         |$LN31@OALKitlSer|
  00130	e5973440	 ldr         r3, [r7, #0x440]

; 385  :                 KITL_RETAILMSG(ZONE_WARNING, (
; 386  :                     "WARN: KITL can't obtain IRQ for KITL device\r\n"
; 387  :                 ));

  00134	e3130001	 tst         r3, #1
  00138	159f0174	 ldrne       r0, [pc, #0x174]
  0013c	1b000000	 blne        KITLOutputDebugString

; 388  :                 irq = OAL_INTR_IRQ_UNDEFINED;

  00140	e1a0e005	 mov         lr, r5
  00144	e58d500c	 str         r5, [sp, #0xC]
  00148	ea000000	 b           |$LN6@OALKitlSer|
  0014c		 |$LN31@OALKitlSer|
  0014c	e59de00c	 ldr         lr, [sp, #0xC]
  00150		 |$LN6@OALKitlSer|

; 389  :             }
; 390  :         }
; 391  :         // Get SYSINTR for IRQ
; 392  :         if (irq != OAL_INTR_IRQ_UNDEFINED) {

  00150	e37e0001	 cmn         lr, #1
  00154	0a00001a	 beq         |$LN5@OALKitlSer|

; 393  :             UINT32 aIrqs[3];
; 394  :         
; 395  :             aIrqs[0] = -1;
; 396  :             aIrqs[1] = OAL_INTR_FORCE_STATIC;
; 397  :             aIrqs[2] = irq;
; 398  :             if (
; 399  :                 OEMIoControl(
; 400  :                     IOCTL_HAL_REQUEST_SYSINTR, aIrqs, sizeof(aIrqs), &sysIntr,
; 401  :                     sizeof(sysIntr), NULL
; 402  :                 ) && sysIntr != SYSINTR_UNDEFINED
; 403  :             ) {                

  00158	e59f0150	 ldr         r0, [pc, #0x150]
  0015c	e58de018	 str         lr, [sp, #0x18]
  00160	e3a0e000	 mov         lr, #0
  00164	e3a04004	 mov         r4, #4
  00168	e28d3008	 add         r3, sp, #8
  0016c	e3a0200c	 mov         r2, #0xC
  00170	e28d1010	 add         r1, sp, #0x10
  00174	e58de004	 str         lr, [sp, #4]
  00178	e58d5010	 str         r5, [sp, #0x10]
  0017c	e58d4014	 str         r4, [sp, #0x14]
  00180	e58d6000	 str         r6, [sp]
  00184	eb000000	 bl          OEMIoControl
  00188	e3500000	 cmp         r0, #0
  0018c	0a000007	 beq         |$LN4@OALKitlSer|
  00190	e59d0008	 ldr         r0, [sp, #8]
  00194	e3700001	 cmn         r0, #1
  00198	0a000004	 beq         |$LN4@OALKitlSer|

; 404  :                 OEMInterruptEnable(sysIntr, NULL, 0);

  0019c	e3a02000	 mov         r2, #0
  001a0	e3a01000	 mov         r1, #0
  001a4	eb000000	 bl          OEMInterruptEnable

; 405  :             } else {

  001a8	e59d6008	 ldr         r6, [sp, #8]
  001ac	ea000006	 b           |$LN2@OALKitlSer|
  001b0		 |$LN4@OALKitlSer|

; 376  :     } else {

  001b0	e5973440	 ldr         r3, [r7, #0x440]

; 406  :                 KITL_RETAILMSG(ZONE_WARNING, (
; 407  :                     "WARN: KITL can't obtain SYSINTR for IRQ %d\r\n", irq
; 408  :                 ));

  001b4	e3130001	 tst         r3, #1
  001b8	159d100c	 ldrne       r1, [sp, #0xC]
  001bc	159f00e8	 ldrne       r0, [pc, #0xE8]
  001c0	1b000000	 blne        KITLOutputDebugString
  001c4		 |$LN5@OALKitlSer|

; 409  :                 sysIntr = KITL_SYSINTR_NOINTR;
; 410  :             }
; 411  :         } else {
; 412  :             sysIntr = KITL_SYSINTR_NOINTR;

  001c4	e58d5008	 str         r5, [sp, #8]
  001c8	e1a06005	 mov         r6, r5
  001cc		 |$LN2@OALKitlSer|

; 413  :         }
; 414  :     }
; 415  : 
; 416  :     if(sysIntr == KITL_SYSINTR_NOINTR) {

  001cc	e3760001	 cmn         r6, #1
  001d0	1a000005	 bne         |$LN26@OALKitlSer|
  001d4		 |$LN30@OALKitlSer|

; 376  :     } else {

  001d4	e5973440	 ldr         r3, [r7, #0x440]

; 417  :         KITL_RETAILMSG(ZONE_WARNING, (
; 418  :             "WARN: KITL will run in polling mode\r\n"
; 419  :         ));

  001d8	e3130001	 tst         r3, #1
  001dc	0a000002	 beq         |$LN26@OALKitlSer|
  001e0	e59f00c0	 ldr         r0, [pc, #0xC0]
  001e4	eb000000	 bl          KITLOutputDebugString
  001e8	e59d6008	 ldr         r6, [sp, #8]
  001ec		 |$LN26@OALKitlSer|

; 420  :     }
; 421  :     //-----------------------------------------------------------------------
; 422  :     // Initalize KITL transport structure
; 423  :     //-----------------------------------------------------------------------
; 424  : 
; 425  :     memcpy(pKitl->szName, deviceId, sizeof(pKitl->szName));

  001ec	e2890004	 add         r0, r9, #4
  001f0	e3a02010	 mov         r2, #0x10
  001f4	e1a0100a	 mov         r1, r10
  001f8	eb000000	 bl          memcpy

; 426  :     pKitl->Interrupt     = (UCHAR)sysIntr; 
; 427  :     pKitl->WindowSize    = OAL_KITL_WINDOW_SIZE;
; 428  :     pKitl->FrmHdrSize    = sizeof(OAL_KITL_SERIAL_HEADER);
; 429  :     pKitl->dwPhysBuffer  = 0;
; 430  :     pKitl->dwPhysBufLen  = 0;
; 431  :     pKitl->pfnEncode     = SerialEncode;

  001fc	e59f30a0	 ldr         r3, [pc, #0xA0]

; 432  :     pKitl->pfnDecode     = SerialDecode;

  00200	e59f2098	 ldr         r2, [pc, #0x98]

; 433  :     pKitl->pfnSend       = SerialSend;

  00204	e59f1090	 ldr         r1, [pc, #0x90]

; 434  :     pKitl->pfnRecv       = SerialRecv;
; 435  :     pKitl->pfnEnableInt  = SerialEnableInt;
; 436  :     pKitl->pfnGetDevCfg  = SerialGetDevCfg;
; 437  :     pKitl->pfnSetHostCfg = SerialSetHostCfg;

  00208	e5893020	 str         r3, [r9, #0x20]
  0020c	e59f0084	 ldr         r0, [pc, #0x84]
  00210	e59fe07c	 ldr         lr, [pc, #0x7C]
  00214	e59f4074	 ldr         r4, [pc, #0x74]
  00218	e59f506c	 ldr         r5, [pc, #0x6C]
  0021c	e3a0300a	 mov         r3, #0xA

; 438  : 
; 439  :     //-----------------------------------------------------------------------
; 440  :     // Initalize state structure
; 441  :     //-----------------------------------------------------------------------
; 442  : 
; 443  :     g_kitlSerialState.pDriver = pDriver;

  00220	e59f8060	 ldr         r8, [pc, #0x60]
  00224	e5c93016	 strb        r3, [r9, #0x16]
  00228	e3a03000	 mov         r3, #0
  0022c	e3a0a008	 mov         r10, #8
  00230	e5893018	 str         r3, [r9, #0x18]
  00234	e589301c	 str         r3, [r9, #0x1C]
  00238	e5892024	 str         r2, [r9, #0x24]
  0023c	e5891028	 str         r1, [r9, #0x28]
  00240	e589002c	 str         r0, [r9, #0x2C]
  00244	e589e030	 str         lr, [r9, #0x30]
  00248	e5894034	 str         r4, [r9, #0x34]
  0024c	e5895038	 str         r5, [r9, #0x38]
  00250	e5c96014	 strb        r6, [r9, #0x14]
  00254	e5c9a015	 strb        r10, [r9, #0x15]
  00258	e588b000	 str         r11, [r8]

; 444  : 
; 445  :     // Done
; 446  :     rc = TRUE;

  0025c	e3a05001	 mov         r5, #1
  00260		 |$cleanUp$43281|
  00260	e5973440	 ldr         r3, [r7, #0x440]

; 447  :     
; 448  : cleanUp:
; 449  :     KITL_RETAILMSG(ZONE_KITL_OAL, ("-OALKitlSerialInit(rc = %d)\r\n", rc));

  00264	e3130a01	 tst         r3, #1, 20
  00268	159f0014	 ldrne       r0, [pc, #0x14]
  0026c	11a01005	 movne       r1, r5
  00270	1b000000	 blne        KITLOutputDebugString

; 450  :     return rc;
; 451  : }

  00274	e1a00005	 mov         r0, r5
  00278	e28dd01c	 add         sp, sp, #0x1C
  0027c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00280	e12fff1e	 bx          lr
  00284		 |$LN36@OALKitlSer|
  00284		 |$LN37@OALKitlSer|
  00284	00000000	 DCD         |??_C@_0BO@KPIGKMGK@?9OALKitlSerialInit?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  00288		 |$LN38@OALKitlSer|
  00288	00000000	 DCD         |g_kitlSerialState|
  0028c		 |$LN39@OALKitlSer|
  0028c	00000000	 DCD         |SerialSetHostCfg|
  00290		 |$LN40@OALKitlSer|
  00290	00000000	 DCD         |SerialGetDevCfg|
  00294		 |$LN41@OALKitlSer|
  00294	00000000	 DCD         |SerialEnableInt|
  00298		 |$LN42@OALKitlSer|
  00298	00000000	 DCD         |SerialRecv|
  0029c		 |$LN43@OALKitlSer|
  0029c	00000000	 DCD         |SerialSend|
  002a0		 |$LN44@OALKitlSer|
  002a0	00000000	 DCD         |SerialDecode|
  002a4		 |$LN45@OALKitlSer|
  002a4	00000000	 DCD         |SerialEncode|
  002a8		 |$LN46@OALKitlSer|
  002a8	00000000	 DCD         |??_C@_0CG@IJDAEBCE@WARN?3?5KITL?5will?5run?5in?5polling?5m@|
  002ac		 |$LN47@OALKitlSer|
  002ac	00000000	 DCD         |??_C@_0CN@MENCFIED@WARN?3?5KITL?5can?8t?5obtain?5SYSINTR?5@|
  002b0		 |$LN48@OALKitlSer|
  002b0	01010098	 DCD         0x1010098
  002b4		 |$LN49@OALKitlSer|
  002b4	00000000	 DCD         |??_C@_0CO@BPFMIJNH@WARN?3?5KITL?5can?8t?5obtain?5IRQ?5for?5@|
  002b8		 |$LN50@OALKitlSer|
  002b8	01010090	 DCD         0x1010090
  002bc		 |$LN51@OALKitlSer|
  002bc	00000000	 DCD         |??_C@_0CF@GMMNDEHJ@ERROR?3?5KITL?5call?5to?5pfnInit?5fail@|
  002c0		 |$LN52@OALKitlSer|
  002c0	00000000	 DCD         |??_C@_0CE@LGCGCDLA@ERROR?3?5KITL?5device?5driver?5is?5NUL@|
  002c4		 |$LN53@OALKitlSer|
  002c4	00000000	 DCD         |??_C@_0DB@NNJFABKG@?$CLOALKitlSerialInit?$CI?8?$CFS?8?0?5?8?$CFs?8?0?50@|
  002c8		 |$LN54@OALKitlSer|
  002c8	00000000	 DCD         |dpCurSettings|
  002cc		 |$M43612|

			 ENDP  ; |OALKitlSerialInit|

	END
