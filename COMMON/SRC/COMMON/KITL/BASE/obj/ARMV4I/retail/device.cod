; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\KITL\device.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALKitlFindDevice|
	EXPORT	|??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	IMPORT	|NKPhysToVirt|
	IMPORT	|OEMIoControl|
	IMPORT	|KITLOutputDebugString|
	IMPORT	|dpCurSettings|
; File c:\wince600\platform\common\src\common\kitl\device.c

  00000			 AREA	 |.pdata|, PDATA
|$T43256| DCD	|$LN37@OALKitlFin|
	DCD	0x40006602

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@| DCB "-O"
	DCB	"ALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%"
	DCB	"08x)", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlFindDevice(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlFindDevice| PROC

; 65   : ) {

  00000		 |$LN37@OALKitlFin|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd030	 sub         sp, sp, #0x30
  00008		 |$M43253|
  00008	e1a05001	 mov         r5, r1
  0000c	e1a06000	 mov         r6, r0

; 66   :     BOOL rc = FALSE;
; 67   :     UINT32 space, id = 0xFFFFFFFF;
; 68   :     UINT64 address;
; 69   : #ifndef BUILDING_BOOTLOADER // Not building boot loader
; 70   :     OAL_DDK_PARAMS params;
; 71   : #endif
; 72   :     
; 73   :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 74   :         "+OALKitlFindDevice(%d/%d/%08x, 0x%08x)\r\n",
; 75   :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 76   :     ));

  00010	e59f917c	 ldr         r9, [pc, #0x17C]
  00014	e5993440	 ldr         r3, [r9, #0x440]
  00018	e3130a01	 tst         r3, #1, 20
  0001c	15963008	 ldrne       r3, [r6, #8]
  00020	15962004	 ldrne       r2, [r6, #4]
  00024	15961000	 ldrne       r1, [r6]
  00028	159f0160	 ldrne       r0, [pc, #0x160]
  0002c	158d5000	 strne       r5, [sp]
  00030	1b000000	 blne        KITLOutputDebugString

; 77   : 
; 78   :     // Look for driver in list
; 79   :     while (pDevice->name != NULL && !rc) {

  00034	e5953000	 ldr         r3, [r5]
  00038	e3530000	 cmp         r3, #0
  0003c	0a00002d	 beq         |$LN34@OALKitlFin|
  00040	e3a0a000	 mov         r10, #0
  00044	e3a0b005	 mov         r11, #5
  00048		 |$LL17@OALKitlFin|

; 80   : 
; 81   :         // Is it our device? Then move
; 82   :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00048	e5967000	 ldr         r7, [r6]
  0004c	e5953004	 ldr         r3, [r5, #4]
  00050	e1570003	 cmp         r7, r3

; 83   :             // Move to next driver
; 84   :             pDevice++;
; 85   :             continue;

  00054	1a000023	 bne         |$LN33@OALKitlFin|

; 86   :         }            
; 87   : 
; 88   :         // Identify device and read its address/interrupt depends on bus type
; 89   :         switch (pDevLoc->IfcType) {

  00058	e1b03007	 movs        r3, r7
  0005c	0a000001	 beq         |$LN10@OALKitlFin|
  00060	e3730001	 cmn         r3, #1
  00064	1a00001f	 bne         |$LN33@OALKitlFin|
  00068		 |$LN10@OALKitlFin|

; 90   :         case InterfaceTypeUndefined:
; 91   :             if (pDevLoc->LogicalLoc != pDevice->id) break;
; 92   :             address = pDevLoc->LogicalLoc;
; 93   :             rc = TRUE;
; 94   :             break;
; 95   :         case Internal:
; 96   :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  00068	e5953008	 ldr         r3, [r5, #8]
  0006c	e5962008	 ldr         r2, [r6, #8]
  00070	e1520003	 cmp         r2, r3
  00074	1a00001b	 bne         |$LN33@OALKitlFin|

; 97   :             address = pDevLoc->LogicalLoc;

  00078	e3a08000	 mov         r8, #0

; 112  :             continue;
; 113  :         }
; 114  : 
; 115  :         // When interface type is undefined physical address
; 116  :         // is equal to logical, so break loop
; 117  :         if (pDevLoc->IfcType == InterfaceTypeUndefined) {

  0007c	e3770001	 cmn         r7, #1
  00080	0a000034	 beq         |$LN30@OALKitlFin|

; 120  :         }
; 121  : 
; 122  :         // Translate bus address, if it fails skip device
; 123  :         // Are we in IO space (1) or memory space (0)?
; 124  :         space = (UINT32)address & 0x1;
; 125  : 
; 126  :         // Mask off the lowest bit; it just indicates which space we're in.  This isn't
; 127  :         // actually part of the address
; 128  :         address &= ~0x1;
; 129  : 
; 130  : #ifdef BUILDING_BOOTLOADER
; 131  :         if (!OALIoTransBusAddress(
; 132  :             pDevLoc->IfcType, pDevLoc->BusNumber, address, &space, &address
; 133  :         )) {
; 134  :             rc = FALSE;
; 135  :             pDevice++;
; 136  :             continue;
; 137  :         }
; 138  : 
; 139  :         // If address has address above 32bit address space skip device
; 140  :         if ((address >> 32) != 0) {
; 141  :             rc = FALSE;
; 142  :             pDevice++;
; 143  :             continue;
; 144  :         }
; 145  : 
; 146  : 
; 147  :         if (space == 0) {
; 148  :             // Do mapping to virtual address for memory space
; 149  :             pDevLoc->PhysicalLoc = OALPAtoVA((UINT32)address, FALSE);
; 150  :         }
; 151  :         else
; 152  :         {
; 153  :             // We're in IO space, no mapping necessary
; 154  :             UINT8* pAddress = (UINT8*)address;
; 155  :             pDevLoc->PhysicalLoc = (VOID*)address;
; 156  :         }
; 157  : #else // Not building boot loader
; 158  :         params.function = IOCTL_OAL_TRANSBUSADDRESS;
; 159  :         params.transAddress.ifcType = pDevLoc->IfcType;
; 160  :         params.transAddress.busNumber = pDevLoc->BusNumber;

  00084	e5963004	 ldr         r3, [r6, #4]

; 161  :         params.transAddress.space = space;
; 162  :         params.transAddress.address = address;
; 163  :         if (!OEMIoControl(
; 164  :             IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, NULL
; 165  :         ) || !params.rc) {

  00088	e59f00fc	 ldr         r0, [pc, #0xFC]
  0008c	e202e001	 and         lr, r2, #1
  00090	e58d3014	 str         r3, [sp, #0x14]
  00094	e3c24001	 bic         r4, r2, #1
  00098	e3a03000	 mov         r3, #0
  0009c	e3a02028	 mov         r2, #0x28
  000a0	e28d1008	 add         r1, sp, #8
  000a4	e58db008	 str         r11, [sp, #8]
  000a8	e58d7010	 str         r7, [sp, #0x10]
  000ac	e58de018	 str         lr, [sp, #0x18]
  000b0	e58d4020	 str         r4, [sp, #0x20]
  000b4	e58d8024	 str         r8, [sp, #0x24]
  000b8	e58da004	 str         r10, [sp, #4]
  000bc	e58da000	 str         r10, [sp]
  000c0	eb000000	 bl          OEMIoControl
  000c4	e3500000	 cmp         r0, #0
  000c8	0a000006	 beq         |$LN33@OALKitlFin|
  000cc	e59d300c	 ldr         r3, [sp, #0xC]
  000d0	e3530000	 cmp         r3, #0
  000d4	0a000003	 beq         |$LN33@OALKitlFin|

; 166  :             rc = FALSE;
; 167  :             pDevice++;
; 168  :             continue;
; 169  :         }
; 170  :         address = params.transAddress.address;
; 171  :         space = params.transAddress.space;
; 172  : 
; 173  :         // If address has address above 32bit address space skip device
; 174  :         if ((address >> 32) != 0) {

  000d8	e59d3024	 ldr         r3, [sp, #0x24]
  000dc	e59d4020	 ldr         r4, [sp, #0x20]
  000e0	e3530000	 cmp         r3, #0
  000e4	0a00000b	 beq         |$LN4@OALKitlFin|
  000e8		 |$LN33@OALKitlFin|

; 98   :             rc = TRUE;
; 99   :             break;
; 100  : #ifdef KITL_PCI            
; 101  :         case PCIBus:
; 102  :             OALKitlPCIInfo(pDevLoc, &id, &address, &pDevLoc->Pin);
; 103  :             if (id != pDevice->id) break;
; 104  :             rc = TRUE;
; 105  :             break;
; 106  : #endif
; 107  :         }
; 108  : 
; 109  :         // If we don't identify device skip it
; 110  :         if (!rc) {
; 111  :             pDevice++;

  000e8	e2855018	 add         r5, r5, #0x18
  000ec	e5953000	 ldr         r3, [r5]
  000f0	e3530000	 cmp         r3, #0
  000f4	1affffd3	 bne         |$LL17@OALKitlFin|
  000f8		 |$LN34@OALKitlFin|

; 198  :         }
; 199  : #endif
; 200  :         // We get all we need
; 201  :         break;
; 202  :     }
; 203  : 
; 204  :     // Return NULL if driver wasn't found
; 205  :     if (!rc) pDevice = NULL;

  000f8	e3a05000	 mov         r5, #0
  000fc		 |$LN1@OALKitlFin|

; 66   :     BOOL rc = FALSE;
; 67   :     UINT32 space, id = 0xFFFFFFFF;
; 68   :     UINT64 address;
; 69   : #ifndef BUILDING_BOOTLOADER // Not building boot loader
; 70   :     OAL_DDK_PARAMS params;
; 71   : #endif
; 72   :     
; 73   :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 74   :         "+OALKitlFindDevice(%d/%d/%08x, 0x%08x)\r\n",
; 75   :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 76   :     ));

  000fc	e5993440	 ldr         r3, [r9, #0x440]

; 206  : 
; 207  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 208  :         "-OALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%08x)\r\n",
; 209  :         pDevice, (pDevice != NULL) ? pDevice->name : L"", pDevLoc->PhysicalLoc
; 210  :     ));

  00100	e3130a01	 tst         r3, #1, 20
  00104	0a00001a	 beq         |$LN24@OALKitlFin|
  00108	e3550000	 cmp         r5, #0
  0010c	0a000013	 beq         |$LN22@OALKitlFin|
  00110	e5952000	 ldr         r2, [r5]
  00114	ea000012	 b           |$LN23@OALKitlFin|
  00118		 |$LN4@OALKitlFin|

; 175  :             rc = FALSE;
; 176  :             pDevice++;
; 177  :             continue;
; 178  :         }
; 179  : 
; 180  :         // Do mapping to virtual address for memory space
; 181  :         if (space == 0) {

  00118	e59d3018	 ldr         r3, [sp, #0x18]
  0011c	e3530000	 cmp         r3, #0
  00120	1a00000a	 bne         |$LN3@OALKitlFin|
  00124	e3e034ff	 mvn         r3, #0xFF, 8

; 182  :             UINT32 offset;
; 183  :             UINT8 *pAddress;
; 184  :             UINT32 pa = (UINT32)address;
; 185  :             
; 186  :             offset = pa & (VM_PAGE_SIZE - 1);
; 187  :             pa &= ~(VM_PAGE_SIZE - 1);
; 188  :             pAddress = NKPhysToVirt(pa >> 8, FALSE);
; 189  :             pAddress += offset;
; 190  :             
; 191  :             pDevLoc->PhysicalLoc = pAddress;

  00128	e223300f	 eor         r3, r3, #0xF
  0012c	e0030424	 and         r0, r3, r4, lsr #8
  00130	e3a01000	 mov         r1, #0
  00134	eb000000	 bl          NKPhysToVirt
  00138	e3a03c0f	 mov         r3, #0xF, 24
  0013c	e38330ff	 orr         r3, r3, #0xFF
  00140	e0043003	 and         r3, r4, r3
  00144	e0833000	 add         r3, r3, r0
  00148	e586300c	 str         r3, [r6, #0xC]

; 192  :         }
; 193  :         else

  0014c	eaffffea	 b           |$LN1@OALKitlFin|
  00150		 |$LN3@OALKitlFin|

; 194  :         {
; 195  :             // We're in IO space, no mapping necessary
; 196  :             UINT8* pAddress = (UINT8*)address;
; 197  :             pDevLoc->PhysicalLoc = (VOID*)address;

  00150	e586400c	 str         r4, [r6, #0xC]

; 198  :         }
; 199  : #endif
; 200  :         // We get all we need
; 201  :         break;
; 202  :     }
; 203  : 
; 204  :     // Return NULL if driver wasn't found
; 205  :     if (!rc) pDevice = NULL;

  00154	eaffffe8	 b           |$LN1@OALKitlFin|
  00158		 |$LN30@OALKitlFin|

; 118  :             pDevLoc->PhysicalLoc = (VOID*)address;

  00158	e586200c	 str         r2, [r6, #0xC]

; 119  :             break;

  0015c	eaffffe6	 b           |$LN1@OALKitlFin|
  00160		 |$LN22@OALKitlFin|

; 206  : 
; 207  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 208  :         "-OALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%08x)\r\n",
; 209  :         pDevice, (pDevice != NULL) ? pDevice->name : L"", pDevLoc->PhysicalLoc
; 210  :     ));

  00160	e59f2020	 ldr         r2, [pc, #0x20]
  00164		 |$LN23@OALKitlFin|
  00164	e596300c	 ldr         r3, [r6, #0xC]
  00168	e59f0014	 ldr         r0, [pc, #0x14]
  0016c	e1a01005	 mov         r1, r5
  00170	eb000000	 bl          KITLOutputDebugString
  00174		 |$LN24@OALKitlFin|

; 211  :     return pDevice;
; 212  : }

  00174	e1a00005	 mov         r0, r5
  00178	e28dd030	 add         sp, sp, #0x30
  0017c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00180	e12fff1e	 bx          lr
  00184		 |$LN38@OALKitlFin|
  00184		 |$LN39@OALKitlFin|
  00184	00000000	 DCD         |??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@|
  00188		 |$LN40@OALKitlFin|
  00188	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  0018c		 |$LN41@OALKitlFin|
  0018c	01010014	 DCD         0x1010014
  00190		 |$LN42@OALKitlFin|
  00190	00000000	 DCD         |??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  00194		 |$LN43@OALKitlFin|
  00194	00000000	 DCD         |dpCurSettings|
  00198		 |$M43254|

			 ENDP  ; |OALKitlFindDevice|

	EXPORT	|OALKitlDeviceName|
	EXPORT	|??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43284| DCD	|$LN23@OALKitlDev|
	DCD	0x40002d02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@| DCB "-"
	DCB	"OALKitlDeviceName(name = 0x%08x('%s')", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlDeviceName(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlDeviceName| PROC

; 221  : ) {

  00000		 |$LN23@OALKitlDev|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43281|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0

; 222  :     BOOL rc = FALSE;
; 223  :     static WCHAR name[64];
; 224  :     LPCWSTR pName = NULL;
; 225  :     
; 226  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 227  :         "+OALKitlDeviceName(%d/%d/%08x, 0x%08x)\r\n",
; 228  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 229  :     ));

  00010	e59f7098	 ldr         r7, [pc, #0x98]
  00014	e3a05000	 mov         r5, #0
  00018	e5971440	 ldr         r1, [r7, #0x440]
  0001c	e3110a01	 tst         r1, #1, 20
  00020	0a000012	 beq         |$LN17@OALKitlDev|
  00024	e5963008	 ldr         r3, [r6, #8]
  00028	e5962004	 ldr         r2, [r6, #4]
  0002c	e5961000	 ldr         r1, [r6]
  00030	e59f0074	 ldr         r0, [pc, #0x74]
  00034	e58d4000	 str         r4, [sp]
  00038	eb000000	 bl          KITLOutputDebugString
  0003c	e5971440	 ldr         r1, [r7, #0x440]

; 230  : 
; 231  :     // Look for driver in list
; 232  :     while (pDevice->name != NULL && !rc) {

  00040	ea00000a	 b           |$LN17@OALKitlDev|
  00044		 |$LL8@OALKitlDev|

; 233  : 
; 234  :         // Is it our device? Then move
; 235  :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00044	e5962000	 ldr         r2, [r6]
  00048	e5943004	 ldr         r3, [r4, #4]
  0004c	e1520003	 cmp         r2, r3

; 236  :             // Move to next driver
; 237  :             pDevice++;
; 238  :             continue;

  00050	1a000005	 bne         |$LN18@OALKitlDev|

; 239  :         }            
; 240  : 
; 241  :         // Identify device and read its address/interrupt depends on bus type
; 242  :         switch (pDevLoc->IfcType) {

  00054	e3520000	 cmp         r2, #0
  00058	1a000003	 bne         |$LN18@OALKitlDev|

; 243  :         case Internal:
; 244  :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  0005c	e5962008	 ldr         r2, [r6, #8]
  00060	e5943008	 ldr         r3, [r4, #8]
  00064	e1520003	 cmp         r2, r3
  00068	0a000004	 beq         |$LN19@OALKitlDev|
  0006c		 |$LN18@OALKitlDev|

; 246  :             rc = TRUE;
; 247  :             break;
; 248  : #ifdef KITL_PCI            
; 249  :         case PCIBus:
; 250  :             {
; 251  :                 UINT32 id;
; 252  :                 OAL_PCI_LOCATION pciLoc;
; 253  : 
; 254  :                 pciLoc = *(OAL_PCI_LOCATION*)&pDevLoc->LogicalLoc;
; 255  :                 id = OALPCIGetId(pDevLoc->BusNumber, pciLoc);
; 256  :                 if (id != pDevice->id) break;
; 257  :                 OALLogPrintf(
; 258  :                     name, sizeof(name)/sizeof(WCHAR),
; 259  :                     L"%s @ id %d bus %d dev %d fnc %d",
; 260  :                     pDevice->name, pDevLoc->BusNumber, pciLoc.bus, pciLoc.dev,
; 261  :                     pciLoc.fnc
; 262  :                 );
; 263  :                 pName = name;
; 264  :                 rc = TRUE;
; 265  :             }                
; 266  :             break;
; 267  : #endif
; 268  :         }
; 269  : 
; 270  :         // If we don't identify device skip it
; 271  :         if (!rc) {
; 272  :             pDevice++;

  0006c	e2844018	 add         r4, r4, #0x18
  00070		 |$LN17@OALKitlDev|

; 230  : 
; 231  :     // Look for driver in list
; 232  :     while (pDevice->name != NULL && !rc) {

  00070	e5943000	 ldr         r3, [r4]
  00074	e3530000	 cmp         r3, #0
  00078	1afffff1	 bne         |$LL8@OALKitlDev|
  0007c	ea000000	 b           |$LN1@OALKitlDev|
  00080		 |$LN19@OALKitlDev|

; 245  :             pName = pDevice->name;

  00080	e5945000	 ldr         r5, [r4]
  00084		 |$LN1@OALKitlDev|

; 273  :             continue;
; 274  :         }
; 275  :             
; 276  :         // We get all we need
; 277  :         break;
; 278  :     }
; 279  : 
; 280  : 
; 281  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 282  :         "-OALKitlDeviceName(name = 0x%08x('%s')\r\n", pName, pName
; 283  :     ));

  00084	e3110a01	 tst         r1, #1, 20
  00088	159f0018	 ldrne       r0, [pc, #0x18]
  0008c	11a02005	 movne       r2, r5
  00090	11a01005	 movne       r1, r5
  00094	1b000000	 blne        KITLOutputDebugString

; 284  :     return pName;
; 285  : }

  00098	e1a00005	 mov         r0, r5
  0009c	e28dd004	 add         sp, sp, #4
  000a0	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$LN24@OALKitlDev|
  000a8		 |$LN25@OALKitlDev|
  000a8	00000000	 DCD         |??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@|
  000ac		 |$LN26@OALKitlDev|
  000ac	00000000	 DCD         |??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  000b0		 |$LN27@OALKitlDev|
  000b0	00000000	 DCD         |dpCurSettings|
  000b4		 |$M43282|

			 ENDP  ; |OALKitlDeviceName|

	EXPORT	|OALKitlDeviceType|
	EXPORT	|??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43310| DCD	|$LN23@OALKitlDev@2|
	DCD	0x40002c02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"OALKitlDeviceType(type = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlDeviceType(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlDeviceType| PROC

; 294  : ) {

  00000		 |$LN23@OALKitlDev@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43307|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0

; 295  :     BOOL rc = FALSE;
; 296  :     OAL_KITL_TYPE type = OAL_KITL_TYPE_NONE;
; 297  :     
; 298  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 299  :         "+OALKitlDeviceType(%d/%d/%08x, 0x%08x)\r\n",
; 300  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 301  :     ));

  00010	e59f7094	 ldr         r7, [pc, #0x94]
  00014	e3a05000	 mov         r5, #0
  00018	e5971440	 ldr         r1, [r7, #0x440]
  0001c	e3110a01	 tst         r1, #1, 20
  00020	0a000012	 beq         |$LN17@OALKitlDev@2|
  00024	e5963008	 ldr         r3, [r6, #8]
  00028	e5962004	 ldr         r2, [r6, #4]
  0002c	e5961000	 ldr         r1, [r6]
  00030	e59f0070	 ldr         r0, [pc, #0x70]
  00034	e58d4000	 str         r4, [sp]
  00038	eb000000	 bl          KITLOutputDebugString
  0003c	e5971440	 ldr         r1, [r7, #0x440]

; 302  : 
; 303  :     // Look for driver in list
; 304  :     while (pDevice->name != NULL && !rc) {

  00040	ea00000a	 b           |$LN17@OALKitlDev@2|
  00044		 |$LL8@OALKitlDev@2|

; 305  : 
; 306  :         // Is it our device? Then move
; 307  :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00044	e5962000	 ldr         r2, [r6]
  00048	e5943004	 ldr         r3, [r4, #4]
  0004c	e1520003	 cmp         r2, r3

; 308  :             // Move to next driver
; 309  :             pDevice++;
; 310  :             continue;

  00050	1a000005	 bne         |$LN18@OALKitlDev@2|

; 311  :         }            
; 312  : 
; 313  :         // Identify device and read its address/interrupt depends on bus type
; 314  :         switch (pDevLoc->IfcType) {

  00054	e3520000	 cmp         r2, #0
  00058	1a000003	 bne         |$LN18@OALKitlDev@2|

; 315  :         case Internal:
; 316  :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  0005c	e5962008	 ldr         r2, [r6, #8]
  00060	e5943008	 ldr         r3, [r4, #8]
  00064	e1520003	 cmp         r2, r3
  00068	0a000004	 beq         |$LN19@OALKitlDev@2|
  0006c		 |$LN18@OALKitlDev@2|

; 318  :             rc = TRUE;
; 319  :             break;
; 320  : #ifdef KITL_PCI            
; 321  :         case PCIBus:
; 322  :             {
; 323  :                 UINT32 id;
; 324  :                 id = OALPCIGetId(
; 325  :                     pDevLoc->BusNumber, *(OAL_PCI_LOCATION*)&pDevLoc->LogicalLoc
; 326  :                 );
; 327  :                 if (id != pDevice->id) break;
; 328  :                 type = pDevice->type;
; 329  :                 rc = TRUE;
; 330  :             }                
; 331  :             break;
; 332  : #endif
; 333  :         }
; 334  : 
; 335  :         // If we don't identify device skip it
; 336  :         if (!rc) {
; 337  :             pDevice++;

  0006c	e2844018	 add         r4, r4, #0x18
  00070		 |$LN17@OALKitlDev@2|

; 302  : 
; 303  :     // Look for driver in list
; 304  :     while (pDevice->name != NULL && !rc) {

  00070	e5943000	 ldr         r3, [r4]
  00074	e3530000	 cmp         r3, #0
  00078	1afffff1	 bne         |$LL8@OALKitlDev@2|
  0007c	ea000000	 b           |$LN1@OALKitlDev@2|
  00080		 |$LN19@OALKitlDev@2|

; 317  :             type = pDevice->type;

  00080	e5945010	 ldr         r5, [r4, #0x10]
  00084		 |$LN1@OALKitlDev@2|

; 338  :             continue;
; 339  :         }
; 340  :             
; 341  :         // We get all we need
; 342  :         break;
; 343  :     }
; 344  : 
; 345  : 
; 346  :     KITL_RETAILMSG(ZONE_KITL_OAL, ("-OALKitlDeviceType(type = %d)\r\n", type));

  00084	e3110a01	 tst         r1, #1, 20
  00088	159f0014	 ldrne       r0, [pc, #0x14]
  0008c	11a01005	 movne       r1, r5
  00090	1b000000	 blne        KITLOutputDebugString

; 347  :     return type;
; 348  : }

  00094	e1a00005	 mov         r0, r5
  00098	e28dd004	 add         sp, sp, #4
  0009c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN24@OALKitlDev@2|
  000a4		 |$LN25@OALKitlDev@2|
  000a4	00000000	 DCD         |??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  000a8		 |$LN26@OALKitlDev@2|
  000a8	00000000	 DCD         |??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  000ac		 |$LN27@OALKitlDev@2|
  000ac	00000000	 DCD         |dpCurSettings|
  000b0		 |$M43308|

			 ENDP  ; |OALKitlDeviceType|

	END
