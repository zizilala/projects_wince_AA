; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\KITL\device.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	EXPORT	|OALKitlFindDevice|
	IMPORT	|OALPAtoVA|
	IMPORT	|OALIoTransBusAddress|
	IMPORT	|KITLOutputDebugString|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T43202| DCD	|$LN30@OALKitlFin|
	DCD	0x4000d004
; File c:\wince600\platform\common\src\common\kitl\device.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@| DCB "-O"
	DCB	"ALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%"
	DCB	"08x)", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlFindDevice(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlFindDevice| PROC

; 65   : ) {

  00000		 |$LN30@OALKitlFin|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd048	 sub         sp, sp, #0x48
  00010		 |$M43199|

; 66   :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d300c	 str         r3, [sp, #0xC]

; 67   :     UINT32 space, id = 0xFFFFFFFF;

  00018	e3e03000	 mvn         r3, #0
  0001c	e58d3008	 str         r3, [sp, #8]

; 68   :     UINT64 address;
; 69   : #ifndef BUILDING_BOOTLOADER // Not building boot loader
; 70   :     OAL_DDK_PARAMS params;
; 71   : #endif
; 72   :     
; 73   :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 74   :         "+OALKitlFindDevice(%d/%d/%08x, 0x%08x)\r\n",
; 75   :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 76   :     ));

  00020	e59f3310	 ldr         r3, [pc, #0x310]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130a01	 tst         r3, #1, 20
  0002c	0a00000e	 beq         |$LN19@OALKitlFin|
  00030	e59d3054	 ldr         r3, [sp, #0x54]
  00034	e58d3000	 str         r3, [sp]
  00038	e59d3050	 ldr         r3, [sp, #0x50]
  0003c	e2833008	 add         r3, r3, #8
  00040	e5933000	 ldr         r3, [r3]
  00044	e59d2050	 ldr         r2, [sp, #0x50]
  00048	e2822004	 add         r2, r2, #4
  0004c	e5922000	 ldr         r2, [r2]
  00050	e59d1050	 ldr         r1, [sp, #0x50]
  00054	e5911000	 ldr         r1, [r1]
  00058	e59f02dc	 ldr         r0, [pc, #0x2DC]
  0005c	eb000000	 bl          KITLOutputDebugString
  00060	e3a03001	 mov         r3, #1
  00064	e58d3030	 str         r3, [sp, #0x30]
  00068	ea000001	 b           |$LN20@OALKitlFin|
  0006c		 |$LN19@OALKitlFin|
  0006c	e3a03000	 mov         r3, #0
  00070	e58d3030	 str         r3, [sp, #0x30]
  00074		 |$LN20@OALKitlFin|
  00074		 |$LN27@OALKitlFin|
  00074		 |$LN26@OALKitlFin|
  00074		 |$LN25@OALKitlFin|
  00074		 |$LN16@OALKitlFin|

; 77   : 
; 78   :     // Look for driver in list
; 79   :     while (pDevice->name != NULL && !rc) {

  00074	e59d3054	 ldr         r3, [sp, #0x54]
  00078	e5933000	 ldr         r3, [r3]
  0007c	e3530000	 cmp         r3, #0
  00080	0a000086	 beq         |$LN15@OALKitlFin|
  00084	e59d300c	 ldr         r3, [sp, #0xC]
  00088	e3530000	 cmp         r3, #0
  0008c	1a000083	 bne         |$LN15@OALKitlFin|

; 80   : 
; 81   :         // Is it our device? Then move
; 82   :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00090	e59d3054	 ldr         r3, [sp, #0x54]
  00094	e2831004	 add         r1, r3, #4
  00098	e59d3050	 ldr         r3, [sp, #0x50]
  0009c	e5932000	 ldr         r2, [r3]
  000a0	e5913000	 ldr         r3, [r1]
  000a4	e1520003	 cmp         r2, r3
  000a8	0a000003	 beq         |$LN14@OALKitlFin|

; 83   :             // Move to next driver
; 84   :             pDevice++;

  000ac	e59d3054	 ldr         r3, [sp, #0x54]
  000b0	e2833018	 add         r3, r3, #0x18
  000b4	e58d3054	 str         r3, [sp, #0x54]

; 85   :             continue;

  000b8	eaffffed	 b           |$LN16@OALKitlFin|
  000bc		 |$LN14@OALKitlFin|

; 86   :         }            
; 87   : 
; 88   :         // Identify device and read its address/interrupt depends on bus type
; 89   :         switch (pDevLoc->IfcType) {

  000bc	e59d3050	 ldr         r3, [sp, #0x50]
  000c0	e5933000	 ldr         r3, [r3]
  000c4	e58d3034	 str         r3, [sp, #0x34]
  000c8	e59d3034	 ldr         r3, [sp, #0x34]
  000cc	e3530000	 cmp         r3, #0
  000d0	0a000015	 beq         |$LN9@OALKitlFin|
  000d4	e59d3034	 ldr         r3, [sp, #0x34]
  000d8	e3730001	 cmn         r3, #1
  000dc	0a000000	 beq         |$LN11@OALKitlFin|
  000e0	ea000022	 b           |$LN12@OALKitlFin|
  000e4		 |$LN11@OALKitlFin|

; 90   :         case InterfaceTypeUndefined:
; 91   :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  000e4	e59d3050	 ldr         r3, [sp, #0x50]
  000e8	e2832008	 add         r2, r3, #8
  000ec	e59d3054	 ldr         r3, [sp, #0x54]
  000f0	e2833008	 add         r3, r3, #8
  000f4	e5922000	 ldr         r2, [r2]
  000f8	e5933000	 ldr         r3, [r3]
  000fc	e1520003	 cmp         r2, r3
  00100	0a000000	 beq         |$LN10@OALKitlFin|
  00104	ea000019	 b           |$LN12@OALKitlFin|
  00108		 |$LN10@OALKitlFin|

; 92   :             address = pDevLoc->LogicalLoc;

  00108	e59d3050	 ldr         r3, [sp, #0x50]
  0010c	e2833008	 add         r3, r3, #8
  00110	e5933000	 ldr         r3, [r3]
  00114	e58d3014	 str         r3, [sp, #0x14]
  00118	e3a03000	 mov         r3, #0
  0011c	e58d3018	 str         r3, [sp, #0x18]

; 93   :             rc = TRUE;

  00120	e3a03001	 mov         r3, #1
  00124	e58d300c	 str         r3, [sp, #0xC]

; 94   :             break;

  00128	ea000010	 b           |$LN12@OALKitlFin|
  0012c		 |$LN9@OALKitlFin|

; 95   :         case Internal:
; 96   :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  0012c	e59d3050	 ldr         r3, [sp, #0x50]
  00130	e2832008	 add         r2, r3, #8
  00134	e59d3054	 ldr         r3, [sp, #0x54]
  00138	e2833008	 add         r3, r3, #8
  0013c	e5922000	 ldr         r2, [r2]
  00140	e5933000	 ldr         r3, [r3]
  00144	e1520003	 cmp         r2, r3
  00148	0a000000	 beq         |$LN8@OALKitlFin|
  0014c	ea000007	 b           |$LN12@OALKitlFin|
  00150		 |$LN8@OALKitlFin|

; 97   :             address = pDevLoc->LogicalLoc;

  00150	e59d3050	 ldr         r3, [sp, #0x50]
  00154	e2833008	 add         r3, r3, #8
  00158	e5933000	 ldr         r3, [r3]
  0015c	e58d3014	 str         r3, [sp, #0x14]
  00160	e3a03000	 mov         r3, #0
  00164	e58d3018	 str         r3, [sp, #0x18]

; 98   :             rc = TRUE;

  00168	e3a03001	 mov         r3, #1
  0016c	e58d300c	 str         r3, [sp, #0xC]
  00170		 |$LN12@OALKitlFin|

; 99   :             break;
; 100  : #ifdef KITL_PCI            
; 101  :         case PCIBus:
; 102  :             OALKitlPCIInfo(pDevLoc, &id, &address, &pDevLoc->Pin);
; 103  :             if (id != pDevice->id) break;
; 104  :             rc = TRUE;
; 105  :             break;
; 106  : #endif
; 107  :         }
; 108  : 
; 109  :         // If we don't identify device skip it
; 110  :         if (!rc) {

  00170	e59d300c	 ldr         r3, [sp, #0xC]
  00174	e3530000	 cmp         r3, #0
  00178	1a000003	 bne         |$LN7@OALKitlFin|

; 111  :             pDevice++;

  0017c	e59d3054	 ldr         r3, [sp, #0x54]
  00180	e2833018	 add         r3, r3, #0x18
  00184	e58d3054	 str         r3, [sp, #0x54]

; 112  :             continue;

  00188	eaffffb9	 b           |$LN25@OALKitlFin|
  0018c		 |$LN7@OALKitlFin|

; 113  :         }
; 114  : 
; 115  :         // When interface type is undefined physical address
; 116  :         // is equal to logical, so break loop
; 117  :         if (pDevLoc->IfcType == InterfaceTypeUndefined) {

  0018c	e59d3050	 ldr         r3, [sp, #0x50]
  00190	e5933000	 ldr         r3, [r3]
  00194	e3730001	 cmn         r3, #1
  00198	1a000004	 bne         |$LN6@OALKitlFin|

; 118  :             pDevLoc->PhysicalLoc = (VOID*)address;

  0019c	e59d2014	 ldr         r2, [sp, #0x14]
  001a0	e59d3050	 ldr         r3, [sp, #0x50]
  001a4	e283300c	 add         r3, r3, #0xC
  001a8	e5832000	 str         r2, [r3]

; 119  :             break;

  001ac	ea00003b	 b           |$LN15@OALKitlFin|
  001b0		 |$LN6@OALKitlFin|

; 120  :         }
; 121  : 
; 122  :         // Translate bus address, if it fails skip device
; 123  :         // Are we in IO space (1) or memory space (0)?
; 124  :         space = (UINT32)address & 0x1;

  001b0	e59d3014	 ldr         r3, [sp, #0x14]
  001b4	e2033001	 and         r3, r3, #1
  001b8	e58d3010	 str         r3, [sp, #0x10]

; 125  : 
; 126  :         // Mask off the lowest bit; it just indicates which space we're in.  This isn't
; 127  :         // actually part of the address
; 128  :         address &= ~0x1;

  001bc	e59d2014	 ldr         r2, [sp, #0x14]
  001c0	e3e03001	 mvn         r3, #1
  001c4	e0022003	 and         r2, r2, r3
  001c8	e59d3018	 ldr         r3, [sp, #0x18]
  001cc	e58d2014	 str         r2, [sp, #0x14]
  001d0	e58d3018	 str         r3, [sp, #0x18]

; 129  : 
; 130  : #ifdef BUILDING_BOOTLOADER
; 131  :         if (!OALIoTransBusAddress(
; 132  :             pDevLoc->IfcType, pDevLoc->BusNumber, address, &space, &address
; 133  :         )) {

  001d4	e28d3014	 add         r3, sp, #0x14
  001d8	e58d3004	 str         r3, [sp, #4]
  001dc	e28d3010	 add         r3, sp, #0x10
  001e0	e58d3000	 str         r3, [sp]
  001e4	e59d2014	 ldr         r2, [sp, #0x14]
  001e8	e59d3018	 ldr         r3, [sp, #0x18]
  001ec	e59d1050	 ldr         r1, [sp, #0x50]
  001f0	e2811004	 add         r1, r1, #4
  001f4	e5911000	 ldr         r1, [r1]
  001f8	e59d0050	 ldr         r0, [sp, #0x50]
  001fc	e5900000	 ldr         r0, [r0]
  00200	eb000000	 bl          OALIoTransBusAddress
  00204	e58d0038	 str         r0, [sp, #0x38]
  00208	e59d3038	 ldr         r3, [sp, #0x38]
  0020c	e3530000	 cmp         r3, #0
  00210	1a000005	 bne         |$LN5@OALKitlFin|

; 134  :             rc = FALSE;

  00214	e3a03000	 mov         r3, #0
  00218	e58d300c	 str         r3, [sp, #0xC]

; 135  :             pDevice++;

  0021c	e59d3054	 ldr         r3, [sp, #0x54]
  00220	e2833018	 add         r3, r3, #0x18
  00224	e58d3054	 str         r3, [sp, #0x54]

; 136  :             continue;

  00228	eaffff91	 b           |$LN26@OALKitlFin|
  0022c		 |$LN5@OALKitlFin|

; 137  :         }
; 138  : 
; 139  :         // If address has address above 32bit address space skip device
; 140  :         if ((address >> 32) != 0) {

  0022c	e59d3018	 ldr         r3, [sp, #0x18]
  00230	e3530000	 cmp         r3, #0
  00234	0a000005	 beq         |$LN4@OALKitlFin|

; 141  :             rc = FALSE;

  00238	e3a03000	 mov         r3, #0
  0023c	e58d300c	 str         r3, [sp, #0xC]

; 142  :             pDevice++;

  00240	e59d3054	 ldr         r3, [sp, #0x54]
  00244	e2833018	 add         r3, r3, #0x18
  00248	e58d3054	 str         r3, [sp, #0x54]

; 143  :             continue;

  0024c	eaffff88	 b           |$LN27@OALKitlFin|
  00250		 |$LN4@OALKitlFin|

; 144  :         }
; 145  : 
; 146  : 
; 147  :         if (space == 0) {

  00250	e59d3010	 ldr         r3, [sp, #0x10]
  00254	e3530000	 cmp         r3, #0
  00258	1a000008	 bne         |$LN3@OALKitlFin|

; 148  :             // Do mapping to virtual address for memory space
; 149  :             pDevLoc->PhysicalLoc = OALPAtoVA((UINT32)address, FALSE);

  0025c	e3a01000	 mov         r1, #0
  00260	e59d0014	 ldr         r0, [sp, #0x14]
  00264	eb000000	 bl          OALPAtoVA
  00268	e58d003c	 str         r0, [sp, #0x3C]
  0026c	e59d3050	 ldr         r3, [sp, #0x50]
  00270	e283200c	 add         r2, r3, #0xC
  00274	e59d303c	 ldr         r3, [sp, #0x3C]
  00278	e5823000	 str         r3, [r2]

; 150  :         }
; 151  :         else

  0027c	ea000005	 b           |$LN2@OALKitlFin|
  00280		 |$LN3@OALKitlFin|

; 152  :         {
; 153  :             // We're in IO space, no mapping necessary
; 154  :             UINT8* pAddress = (UINT8*)address;

  00280	e59d3014	 ldr         r3, [sp, #0x14]
  00284	e58d301c	 str         r3, [sp, #0x1C]

; 155  :             pDevLoc->PhysicalLoc = (VOID*)address;

  00288	e59d2014	 ldr         r2, [sp, #0x14]
  0028c	e59d3050	 ldr         r3, [sp, #0x50]
  00290	e283300c	 add         r3, r3, #0xC
  00294	e5832000	 str         r2, [r3]
  00298		 |$LN2@OALKitlFin|

; 156  :         }
; 157  : #else // Not building boot loader
; 158  :         params.function = IOCTL_OAL_TRANSBUSADDRESS;
; 159  :         params.transAddress.ifcType = pDevLoc->IfcType;
; 160  :         params.transAddress.busNumber = pDevLoc->BusNumber;
; 161  :         params.transAddress.space = space;
; 162  :         params.transAddress.address = address;
; 163  :         if (!OEMIoControl(
; 164  :             IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, NULL
; 165  :         ) || !params.rc) {
; 166  :             rc = FALSE;
; 167  :             pDevice++;
; 168  :             continue;
; 169  :         }
; 170  :         address = params.transAddress.address;
; 171  :         space = params.transAddress.space;
; 172  : 
; 173  :         // If address has address above 32bit address space skip device
; 174  :         if ((address >> 32) != 0) {
; 175  :             rc = FALSE;
; 176  :             pDevice++;
; 177  :             continue;
; 178  :         }
; 179  : 
; 180  :         // Do mapping to virtual address for memory space
; 181  :         if (space == 0) {
; 182  :             UINT32 offset;
; 183  :             UINT8 *pAddress;
; 184  :             UINT32 pa = (UINT32)address;
; 185  :             
; 186  :             offset = pa & (VM_PAGE_SIZE - 1);
; 187  :             pa &= ~(VM_PAGE_SIZE - 1);
; 188  :             pAddress = NKPhysToVirt(pa >> 8, FALSE);
; 189  :             pAddress += offset;
; 190  :             
; 191  :             pDevLoc->PhysicalLoc = pAddress;
; 192  :         }
; 193  :         else
; 194  :         {
; 195  :             // We're in IO space, no mapping necessary
; 196  :             UINT8* pAddress = (UINT8*)address;
; 197  :             pDevLoc->PhysicalLoc = (VOID*)address;
; 198  :         }
; 199  : #endif
; 200  :         // We get all we need
; 201  :         break;

  00298	ea000000	 b           |$LN15@OALKitlFin|

; 202  :     }

  0029c	eaffff74	 b           |$LN16@OALKitlFin|
  002a0		 |$LN15@OALKitlFin|

; 203  : 
; 204  :     // Return NULL if driver wasn't found
; 205  :     if (!rc) pDevice = NULL;

  002a0	e59d300c	 ldr         r3, [sp, #0xC]
  002a4	e3530000	 cmp         r3, #0
  002a8	1a000001	 bne         |$LN1@OALKitlFin|
  002ac	e3a03000	 mov         r3, #0
  002b0	e58d3054	 str         r3, [sp, #0x54]
  002b4		 |$LN1@OALKitlFin|

; 206  : 
; 207  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 208  :         "-OALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%08x)\r\n",
; 209  :         pDevice, (pDevice != NULL) ? pDevice->name : L"", pDevLoc->PhysicalLoc
; 210  :     ));

  002b4	e59f307c	 ldr         r3, [pc, #0x7C]
  002b8	e5933440	 ldr         r3, [r3, #0x440]
  002bc	e3130a01	 tst         r3, #1, 20
  002c0	0a000012	 beq         |$LN23@OALKitlFin|
  002c4	e59d3054	 ldr         r3, [sp, #0x54]
  002c8	e3530000	 cmp         r3, #0
  002cc	0a000003	 beq         |$LN21@OALKitlFin|
  002d0	e59d3054	 ldr         r3, [sp, #0x54]
  002d4	e5933000	 ldr         r3, [r3]
  002d8	e58d3040	 str         r3, [sp, #0x40]
  002dc	ea000001	 b           |$LN22@OALKitlFin|
  002e0		 |$LN21@OALKitlFin|
  002e0	e59f304c	 ldr         r3, [pc, #0x4C]
  002e4	e58d3040	 str         r3, [sp, #0x40]
  002e8		 |$LN22@OALKitlFin|
  002e8	e59d3050	 ldr         r3, [sp, #0x50]
  002ec	e283300c	 add         r3, r3, #0xC
  002f0	e5933000	 ldr         r3, [r3]
  002f4	e59d2040	 ldr         r2, [sp, #0x40]
  002f8	e59d1054	 ldr         r1, [sp, #0x54]
  002fc	e59f002c	 ldr         r0, [pc, #0x2C]
  00300	eb000000	 bl          KITLOutputDebugString
  00304	e3a03001	 mov         r3, #1
  00308	e58d3044	 str         r3, [sp, #0x44]
  0030c	ea000001	 b           |$LN24@OALKitlFin|
  00310		 |$LN23@OALKitlFin|
  00310	e3a03000	 mov         r3, #0
  00314	e58d3044	 str         r3, [sp, #0x44]
  00318		 |$LN24@OALKitlFin|

; 211  :     return pDevice;

  00318	e59d3054	 ldr         r3, [sp, #0x54]
  0031c	e58d302c	 str         r3, [sp, #0x2C]

; 212  : }

  00320	e59d002c	 ldr         r0, [sp, #0x2C]
  00324	e28dd048	 add         sp, sp, #0x48
  00328	e89d6000	 ldmia       sp, {sp, lr}
  0032c	e12fff1e	 bx          lr
  00330		 |$LN31@OALKitlFin|
  00330		 |$LN32@OALKitlFin|
  00330	00000000	 DCD         |??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@|
  00334		 |$LN33@OALKitlFin|
  00334	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  00338		 |$LN34@OALKitlFin|
  00338	00000000	 DCD         |dpCurSettings|
  0033c		 |$LN35@OALKitlFin|
  0033c	00000000	 DCD         |??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  00340		 |$M43200|

			 ENDP  ; |OALKitlFindDevice|

	EXPORT	|??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	EXPORT	|OALKitlDeviceName|

  00008			 AREA	 |.pdata|, PDATA
|$T43219| DCD	|$LN18@OALKitlDev|
	DCD	0x40006104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@| DCB "-"
	DCB	"OALKitlDeviceName(name = 0x%08x('%s')", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlDeviceName(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  00340			 AREA	 |.text|, CODE, ARM

  00340		 |OALKitlDeviceName| PROC

; 221  : ) {

  00340		 |$LN18@OALKitlDev|
  00340	e1a0c00d	 mov         r12, sp
  00344	e92d0003	 stmdb       sp!, {r0, r1}
  00348	e92d5000	 stmdb       sp!, {r12, lr}
  0034c	e24dd01c	 sub         sp, sp, #0x1C
  00350		 |$M43216|

; 222  :     BOOL rc = FALSE;

  00350	e3a03000	 mov         r3, #0
  00354	e58d3004	 str         r3, [sp, #4]

; 223  :     static WCHAR name[64];
; 224  :     LPCWSTR pName = NULL;

  00358	e3a03000	 mov         r3, #0
  0035c	e58d3008	 str         r3, [sp, #8]

; 225  :     
; 226  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 227  :         "+OALKitlDeviceName(%d/%d/%08x, 0x%08x)\r\n",
; 228  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 229  :     ));

  00360	e59f3154	 ldr         r3, [pc, #0x154]
  00364	e5933440	 ldr         r3, [r3, #0x440]
  00368	e3130a01	 tst         r3, #1, 20
  0036c	0a00000e	 beq         |$LN11@OALKitlDev|
  00370	e59d3028	 ldr         r3, [sp, #0x28]
  00374	e58d3000	 str         r3, [sp]
  00378	e59d3024	 ldr         r3, [sp, #0x24]
  0037c	e2833008	 add         r3, r3, #8
  00380	e5933000	 ldr         r3, [r3]
  00384	e59d2024	 ldr         r2, [sp, #0x24]
  00388	e2822004	 add         r2, r2, #4
  0038c	e5922000	 ldr         r2, [r2]
  00390	e59d1024	 ldr         r1, [sp, #0x24]
  00394	e5911000	 ldr         r1, [r1]
  00398	e59f0120	 ldr         r0, [pc, #0x120]
  0039c	eb000000	 bl          KITLOutputDebugString
  003a0	e3a03001	 mov         r3, #1
  003a4	e58d3014	 str         r3, [sp, #0x14]
  003a8	ea000001	 b           |$LN12@OALKitlDev|
  003ac		 |$LN11@OALKitlDev|
  003ac	e3a03000	 mov         r3, #0
  003b0	e58d3014	 str         r3, [sp, #0x14]
  003b4		 |$LN12@OALKitlDev|
  003b4		 |$LN15@OALKitlDev|
  003b4		 |$LN8@OALKitlDev|

; 230  : 
; 231  :     // Look for driver in list
; 232  :     while (pDevice->name != NULL && !rc) {

  003b4	e59d3028	 ldr         r3, [sp, #0x28]
  003b8	e5933000	 ldr         r3, [r3]
  003bc	e3530000	 cmp         r3, #0
  003c0	0a000029	 beq         |$LN7@OALKitlDev|
  003c4	e59d3004	 ldr         r3, [sp, #4]
  003c8	e3530000	 cmp         r3, #0
  003cc	1a000026	 bne         |$LN7@OALKitlDev|

; 233  : 
; 234  :         // Is it our device? Then move
; 235  :         if (pDevLoc->IfcType != pDevice->ifcType) {

  003d0	e59d3028	 ldr         r3, [sp, #0x28]
  003d4	e2831004	 add         r1, r3, #4
  003d8	e59d3024	 ldr         r3, [sp, #0x24]
  003dc	e5932000	 ldr         r2, [r3]
  003e0	e5913000	 ldr         r3, [r1]
  003e4	e1520003	 cmp         r2, r3
  003e8	0a000003	 beq         |$LN6@OALKitlDev|

; 236  :             // Move to next driver
; 237  :             pDevice++;

  003ec	e59d3028	 ldr         r3, [sp, #0x28]
  003f0	e2833018	 add         r3, r3, #0x18
  003f4	e58d3028	 str         r3, [sp, #0x28]

; 238  :             continue;

  003f8	eaffffed	 b           |$LN8@OALKitlDev|
  003fc		 |$LN6@OALKitlDev|

; 239  :         }            
; 240  : 
; 241  :         // Identify device and read its address/interrupt depends on bus type
; 242  :         switch (pDevLoc->IfcType) {

  003fc	e59d3024	 ldr         r3, [sp, #0x24]
  00400	e5933000	 ldr         r3, [r3]
  00404	e3530000	 cmp         r3, #0
  00408	0a000000	 beq         |$LN3@OALKitlDev|
  0040c	ea00000d	 b           |$LN4@OALKitlDev|
  00410		 |$LN3@OALKitlDev|

; 243  :         case Internal:
; 244  :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  00410	e59d3024	 ldr         r3, [sp, #0x24]
  00414	e2832008	 add         r2, r3, #8
  00418	e59d3028	 ldr         r3, [sp, #0x28]
  0041c	e2833008	 add         r3, r3, #8
  00420	e5922000	 ldr         r2, [r2]
  00424	e5933000	 ldr         r3, [r3]
  00428	e1520003	 cmp         r2, r3
  0042c	0a000000	 beq         |$LN2@OALKitlDev|
  00430	ea000004	 b           |$LN4@OALKitlDev|
  00434		 |$LN2@OALKitlDev|

; 245  :             pName = pDevice->name;

  00434	e59d3028	 ldr         r3, [sp, #0x28]
  00438	e5933000	 ldr         r3, [r3]
  0043c	e58d3008	 str         r3, [sp, #8]

; 246  :             rc = TRUE;

  00440	e3a03001	 mov         r3, #1
  00444	e58d3004	 str         r3, [sp, #4]
  00448		 |$LN4@OALKitlDev|

; 247  :             break;
; 248  : #ifdef KITL_PCI            
; 249  :         case PCIBus:
; 250  :             {
; 251  :                 UINT32 id;
; 252  :                 OAL_PCI_LOCATION pciLoc;
; 253  : 
; 254  :                 pciLoc = *(OAL_PCI_LOCATION*)&pDevLoc->LogicalLoc;
; 255  :                 id = OALPCIGetId(pDevLoc->BusNumber, pciLoc);
; 256  :                 if (id != pDevice->id) break;
; 257  :                 OALLogPrintf(
; 258  :                     name, sizeof(name)/sizeof(WCHAR),
; 259  :                     L"%s @ id %d bus %d dev %d fnc %d",
; 260  :                     pDevice->name, pDevLoc->BusNumber, pciLoc.bus, pciLoc.dev,
; 261  :                     pciLoc.fnc
; 262  :                 );
; 263  :                 pName = name;
; 264  :                 rc = TRUE;
; 265  :             }                
; 266  :             break;
; 267  : #endif
; 268  :         }
; 269  : 
; 270  :         // If we don't identify device skip it
; 271  :         if (!rc) {

  00448	e59d3004	 ldr         r3, [sp, #4]
  0044c	e3530000	 cmp         r3, #0
  00450	1a000003	 bne         |$LN1@OALKitlDev|

; 272  :             pDevice++;

  00454	e59d3028	 ldr         r3, [sp, #0x28]
  00458	e2833018	 add         r3, r3, #0x18
  0045c	e58d3028	 str         r3, [sp, #0x28]

; 273  :             continue;

  00460	eaffffd3	 b           |$LN15@OALKitlDev|
  00464		 |$LN1@OALKitlDev|

; 274  :         }
; 275  :             
; 276  :         // We get all we need
; 277  :         break;

  00464	ea000000	 b           |$LN7@OALKitlDev|

; 278  :     }

  00468	eaffffd1	 b           |$LN8@OALKitlDev|
  0046c		 |$LN7@OALKitlDev|

; 279  : 
; 280  : 
; 281  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 282  :         "-OALKitlDeviceName(name = 0x%08x('%s')\r\n", pName, pName
; 283  :     ));

  0046c	e59f3048	 ldr         r3, [pc, #0x48]
  00470	e5933440	 ldr         r3, [r3, #0x440]
  00474	e3130a01	 tst         r3, #1, 20
  00478	0a000006	 beq         |$LN13@OALKitlDev|
  0047c	e59d2008	 ldr         r2, [sp, #8]
  00480	e59d1008	 ldr         r1, [sp, #8]
  00484	e59f002c	 ldr         r0, [pc, #0x2C]
  00488	eb000000	 bl          KITLOutputDebugString
  0048c	e3a03001	 mov         r3, #1
  00490	e58d3018	 str         r3, [sp, #0x18]
  00494	ea000001	 b           |$LN14@OALKitlDev|
  00498		 |$LN13@OALKitlDev|
  00498	e3a03000	 mov         r3, #0
  0049c	e58d3018	 str         r3, [sp, #0x18]
  004a0		 |$LN14@OALKitlDev|

; 284  :     return pName;

  004a0	e59d3008	 ldr         r3, [sp, #8]
  004a4	e58d3010	 str         r3, [sp, #0x10]

; 285  : }

  004a8	e59d0010	 ldr         r0, [sp, #0x10]
  004ac	e28dd01c	 add         sp, sp, #0x1C
  004b0	e89d6000	 ldmia       sp, {sp, lr}
  004b4	e12fff1e	 bx          lr
  004b8		 |$LN19@OALKitlDev|
  004b8		 |$LN20@OALKitlDev|
  004b8	00000000	 DCD         |??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@|
  004bc		 |$LN21@OALKitlDev|
  004bc	00000000	 DCD         |dpCurSettings|
  004c0		 |$LN22@OALKitlDev|
  004c0	00000000	 DCD         |??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  004c4		 |$M43217|

			 ENDP  ; |OALKitlDeviceName|

	EXPORT	|??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	EXPORT	|OALKitlDeviceType|

  00010			 AREA	 |.pdata|, PDATA
|$T43235| DCD	|$LN18@OALKitlDev@2|
	DCD	0x40006104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"OALKitlDeviceType(type = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlDeviceType(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  004c4			 AREA	 |.text|, CODE, ARM

  004c4		 |OALKitlDeviceType| PROC

; 294  : ) {

  004c4		 |$LN18@OALKitlDev@2|
  004c4	e1a0c00d	 mov         r12, sp
  004c8	e92d0003	 stmdb       sp!, {r0, r1}
  004cc	e92d5000	 stmdb       sp!, {r12, lr}
  004d0	e24dd01c	 sub         sp, sp, #0x1C
  004d4		 |$M43232|

; 295  :     BOOL rc = FALSE;

  004d4	e3a03000	 mov         r3, #0
  004d8	e58d3004	 str         r3, [sp, #4]

; 296  :     OAL_KITL_TYPE type = OAL_KITL_TYPE_NONE;

  004dc	e3a03000	 mov         r3, #0
  004e0	e58d3008	 str         r3, [sp, #8]

; 297  :     
; 298  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 299  :         "+OALKitlDeviceType(%d/%d/%08x, 0x%08x)\r\n",
; 300  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 301  :     ));

  004e4	e59f3154	 ldr         r3, [pc, #0x154]
  004e8	e5933440	 ldr         r3, [r3, #0x440]
  004ec	e3130a01	 tst         r3, #1, 20
  004f0	0a00000e	 beq         |$LN11@OALKitlDev@2|
  004f4	e59d3028	 ldr         r3, [sp, #0x28]
  004f8	e58d3000	 str         r3, [sp]
  004fc	e59d3024	 ldr         r3, [sp, #0x24]
  00500	e2833008	 add         r3, r3, #8
  00504	e5933000	 ldr         r3, [r3]
  00508	e59d2024	 ldr         r2, [sp, #0x24]
  0050c	e2822004	 add         r2, r2, #4
  00510	e5922000	 ldr         r2, [r2]
  00514	e59d1024	 ldr         r1, [sp, #0x24]
  00518	e5911000	 ldr         r1, [r1]
  0051c	e59f0120	 ldr         r0, [pc, #0x120]
  00520	eb000000	 bl          KITLOutputDebugString
  00524	e3a03001	 mov         r3, #1
  00528	e58d3014	 str         r3, [sp, #0x14]
  0052c	ea000001	 b           |$LN12@OALKitlDev@2|
  00530		 |$LN11@OALKitlDev@2|
  00530	e3a03000	 mov         r3, #0
  00534	e58d3014	 str         r3, [sp, #0x14]
  00538		 |$LN12@OALKitlDev@2|
  00538		 |$LN15@OALKitlDev@2|
  00538		 |$LN8@OALKitlDev@2|

; 302  : 
; 303  :     // Look for driver in list
; 304  :     while (pDevice->name != NULL && !rc) {

  00538	e59d3028	 ldr         r3, [sp, #0x28]
  0053c	e5933000	 ldr         r3, [r3]
  00540	e3530000	 cmp         r3, #0
  00544	0a00002a	 beq         |$LN7@OALKitlDev@2|
  00548	e59d3004	 ldr         r3, [sp, #4]
  0054c	e3530000	 cmp         r3, #0
  00550	1a000027	 bne         |$LN7@OALKitlDev@2|

; 305  : 
; 306  :         // Is it our device? Then move
; 307  :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00554	e59d3028	 ldr         r3, [sp, #0x28]
  00558	e2831004	 add         r1, r3, #4
  0055c	e59d3024	 ldr         r3, [sp, #0x24]
  00560	e5932000	 ldr         r2, [r3]
  00564	e5913000	 ldr         r3, [r1]
  00568	e1520003	 cmp         r2, r3
  0056c	0a000003	 beq         |$LN6@OALKitlDev@2|

; 308  :             // Move to next driver
; 309  :             pDevice++;

  00570	e59d3028	 ldr         r3, [sp, #0x28]
  00574	e2833018	 add         r3, r3, #0x18
  00578	e58d3028	 str         r3, [sp, #0x28]

; 310  :             continue;

  0057c	eaffffed	 b           |$LN8@OALKitlDev@2|
  00580		 |$LN6@OALKitlDev@2|

; 311  :         }            
; 312  : 
; 313  :         // Identify device and read its address/interrupt depends on bus type
; 314  :         switch (pDevLoc->IfcType) {

  00580	e59d3024	 ldr         r3, [sp, #0x24]
  00584	e5933000	 ldr         r3, [r3]
  00588	e3530000	 cmp         r3, #0
  0058c	0a000000	 beq         |$LN3@OALKitlDev@2|
  00590	ea00000e	 b           |$LN4@OALKitlDev@2|
  00594		 |$LN3@OALKitlDev@2|

; 315  :         case Internal:
; 316  :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  00594	e59d3024	 ldr         r3, [sp, #0x24]
  00598	e2832008	 add         r2, r3, #8
  0059c	e59d3028	 ldr         r3, [sp, #0x28]
  005a0	e2833008	 add         r3, r3, #8
  005a4	e5922000	 ldr         r2, [r2]
  005a8	e5933000	 ldr         r3, [r3]
  005ac	e1520003	 cmp         r2, r3
  005b0	0a000000	 beq         |$LN2@OALKitlDev@2|
  005b4	ea000005	 b           |$LN4@OALKitlDev@2|
  005b8		 |$LN2@OALKitlDev@2|

; 317  :             type = pDevice->type;

  005b8	e59d3028	 ldr         r3, [sp, #0x28]
  005bc	e2833010	 add         r3, r3, #0x10
  005c0	e5933000	 ldr         r3, [r3]
  005c4	e58d3008	 str         r3, [sp, #8]

; 318  :             rc = TRUE;

  005c8	e3a03001	 mov         r3, #1
  005cc	e58d3004	 str         r3, [sp, #4]
  005d0		 |$LN4@OALKitlDev@2|

; 319  :             break;
; 320  : #ifdef KITL_PCI            
; 321  :         case PCIBus:
; 322  :             {
; 323  :                 UINT32 id;
; 324  :                 id = OALPCIGetId(
; 325  :                     pDevLoc->BusNumber, *(OAL_PCI_LOCATION*)&pDevLoc->LogicalLoc
; 326  :                 );
; 327  :                 if (id != pDevice->id) break;
; 328  :                 type = pDevice->type;
; 329  :                 rc = TRUE;
; 330  :             }                
; 331  :             break;
; 332  : #endif
; 333  :         }
; 334  : 
; 335  :         // If we don't identify device skip it
; 336  :         if (!rc) {

  005d0	e59d3004	 ldr         r3, [sp, #4]
  005d4	e3530000	 cmp         r3, #0
  005d8	1a000003	 bne         |$LN1@OALKitlDev@2|

; 337  :             pDevice++;

  005dc	e59d3028	 ldr         r3, [sp, #0x28]
  005e0	e2833018	 add         r3, r3, #0x18
  005e4	e58d3028	 str         r3, [sp, #0x28]

; 338  :             continue;

  005e8	eaffffd2	 b           |$LN15@OALKitlDev@2|
  005ec		 |$LN1@OALKitlDev@2|

; 339  :         }
; 340  :             
; 341  :         // We get all we need
; 342  :         break;

  005ec	ea000000	 b           |$LN7@OALKitlDev@2|

; 343  :     }

  005f0	eaffffd0	 b           |$LN8@OALKitlDev@2|
  005f4		 |$LN7@OALKitlDev@2|

; 344  : 
; 345  : 
; 346  :     KITL_RETAILMSG(ZONE_KITL_OAL, ("-OALKitlDeviceType(type = %d)\r\n", type));

  005f4	e59f3044	 ldr         r3, [pc, #0x44]
  005f8	e5933440	 ldr         r3, [r3, #0x440]
  005fc	e3130a01	 tst         r3, #1, 20
  00600	0a000005	 beq         |$LN13@OALKitlDev@2|
  00604	e59d1008	 ldr         r1, [sp, #8]
  00608	e59f002c	 ldr         r0, [pc, #0x2C]
  0060c	eb000000	 bl          KITLOutputDebugString
  00610	e3a03001	 mov         r3, #1
  00614	e58d3018	 str         r3, [sp, #0x18]
  00618	ea000001	 b           |$LN14@OALKitlDev@2|
  0061c		 |$LN13@OALKitlDev@2|
  0061c	e3a03000	 mov         r3, #0
  00620	e58d3018	 str         r3, [sp, #0x18]
  00624		 |$LN14@OALKitlDev@2|

; 347  :     return type;

  00624	e59d3008	 ldr         r3, [sp, #8]
  00628	e58d3010	 str         r3, [sp, #0x10]

; 348  : }

  0062c	e59d0010	 ldr         r0, [sp, #0x10]
  00630	e28dd01c	 add         sp, sp, #0x1C
  00634	e89d6000	 ldmia       sp, {sp, lr}
  00638	e12fff1e	 bx          lr
  0063c		 |$LN19@OALKitlDev@2|
  0063c		 |$LN20@OALKitlDev@2|
  0063c	00000000	 DCD         |??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  00640		 |$LN21@OALKitlDev@2|
  00640	00000000	 DCD         |dpCurSettings|
  00644		 |$LN22@OALKitlDev@2|
  00644	00000000	 DCD         |??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  00648		 |$M43233|

			 ENDP  ; |OALKitlDeviceType|

	END
