; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\KITL\device.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALKitlFindDevice|
	EXPORT	|??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	IMPORT	|OALPAtoVA|
	IMPORT	|OALIoTransBusAddress|
	IMPORT	|KITLOutputDebugString|
	IMPORT	|dpCurSettings|
; File c:\wince600\platform\common\src\common\kitl\device.c

  00000			 AREA	 |.pdata|, PDATA
|$T43247| DCD	|$LN36@OALKitlFin|
	DCD	0x40005402

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@| DCB "-O"
	DCB	"ALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%"
	DCB	"08x)", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlFindDevice(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlFindDevice| PROC

; 65   : ) {

  00000		 |$LN36@OALKitlFin|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M43244|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a05000	 mov         r5, r0

; 66   :     BOOL rc = FALSE;
; 67   :     UINT32 space, id = 0xFFFFFFFF;
; 68   :     UINT64 address;
; 69   : #ifndef BUILDING_BOOTLOADER // Not building boot loader
; 70   :     OAL_DDK_PARAMS params;
; 71   : #endif
; 72   :     
; 73   :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 74   :         "+OALKitlFindDevice(%d/%d/%08x, 0x%08x)\r\n",
; 75   :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 76   :     ));

  00010	e59f6134	 ldr         r6, [pc, #0x134]
  00014	e5963440	 ldr         r3, [r6, #0x440]
  00018	e3130a01	 tst         r3, #1, 20
  0001c	15953008	 ldrne       r3, [r5, #8]
  00020	15952004	 ldrne       r2, [r5, #4]
  00024	15951000	 ldrne       r1, [r5]
  00028	159f0118	 ldrne       r0, [pc, #0x118]
  0002c	158d4000	 strne       r4, [sp]
  00030	1b000000	 blne        KITLOutputDebugString

; 77   : 
; 78   :     // Look for driver in list
; 79   :     while (pDevice->name != NULL && !rc) {

  00034	e5943000	 ldr         r3, [r4]
  00038	e3530000	 cmp         r3, #0
  0003c	0a000024	 beq         |$LN33@OALKitlFin|
  00040	e28d700c	 add         r7, sp, #0xC
  00044	e28d8008	 add         r8, sp, #8
  00048		 |$LL16@OALKitlFin|

; 80   : 
; 81   :         // Is it our device? Then move
; 82   :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00048	e5950000	 ldr         r0, [r5]
  0004c	e5943004	 ldr         r3, [r4, #4]
  00050	e1500003	 cmp         r0, r3

; 83   :             // Move to next driver
; 84   :             pDevice++;
; 85   :             continue;

  00054	1a00001a	 bne         |$LN32@OALKitlFin|

; 86   :         }            
; 87   : 
; 88   :         // Identify device and read its address/interrupt depends on bus type
; 89   :         switch (pDevLoc->IfcType) {

  00058	e1b03000	 movs        r3, r0
  0005c	0a000001	 beq         |$LN9@OALKitlFin|
  00060	e3730001	 cmn         r3, #1
  00064	1a000016	 bne         |$LN32@OALKitlFin|
  00068		 |$LN9@OALKitlFin|

; 90   :         case InterfaceTypeUndefined:
; 91   :             if (pDevLoc->LogicalLoc != pDevice->id) break;
; 92   :             address = pDevLoc->LogicalLoc;
; 93   :             rc = TRUE;
; 94   :             break;
; 95   :         case Internal:
; 96   :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  00068	e5943008	 ldr         r3, [r4, #8]
  0006c	e5952008	 ldr         r2, [r5, #8]
  00070	e1520003	 cmp         r2, r3
  00074	1a000012	 bne         |$LN32@OALKitlFin|

; 97   :             address = pDevLoc->LogicalLoc;

  00078	e3a03000	 mov         r3, #0
  0007c	e58d3010	 str         r3, [sp, #0x10]
  00080	e58d200c	 str         r2, [sp, #0xC]

; 112  :             continue;
; 113  :         }
; 114  : 
; 115  :         // When interface type is undefined physical address
; 116  :         // is equal to logical, so break loop
; 117  :         if (pDevLoc->IfcType == InterfaceTypeUndefined) {

  00084	e3700001	 cmn         r0, #1
  00088	0a000021	 beq         |$LN3@OALKitlFin|

; 118  :             pDevLoc->PhysicalLoc = (VOID*)address;
; 119  :             break;
; 120  :         }
; 121  : 
; 122  :         // Translate bus address, if it fails skip device
; 123  :         // Are we in IO space (1) or memory space (0)?
; 124  :         space = (UINT32)address & 0x1;
; 125  : 
; 126  :         // Mask off the lowest bit; it just indicates which space we're in.  This isn't
; 127  :         // actually part of the address
; 128  :         address &= ~0x1;
; 129  : 
; 130  : #ifdef BUILDING_BOOTLOADER
; 131  :         if (!OALIoTransBusAddress(
; 132  :             pDevLoc->IfcType, pDevLoc->BusNumber, address, &space, &address
; 133  :         )) {

  0008c	e5951004	 ldr         r1, [r5, #4]
  00090	e202e001	 and         lr, r2, #1
  00094	e3c22001	 bic         r2, r2, #1
  00098	e58d200c	 str         r2, [sp, #0xC]
  0009c	e58de008	 str         lr, [sp, #8]
  000a0	e58d7004	 str         r7, [sp, #4]
  000a4	e58d8000	 str         r8, [sp]
  000a8	eb000000	 bl          OALIoTransBusAddress
  000ac	e3500000	 cmp         r0, #0

; 134  :             rc = FALSE;
; 135  :             pDevice++;
; 136  :             continue;

  000b0	0a000003	 beq         |$LN32@OALKitlFin|

; 137  :         }
; 138  : 
; 139  :         // If address has address above 32bit address space skip device
; 140  :         if ((address >> 32) != 0) {

  000b4	e59d3010	 ldr         r3, [sp, #0x10]
  000b8	e59d200c	 ldr         r2, [sp, #0xC]
  000bc	e3530000	 cmp         r3, #0
  000c0	0a00000b	 beq         |$LN4@OALKitlFin|
  000c4		 |$LN32@OALKitlFin|

; 98   :             rc = TRUE;
; 99   :             break;
; 100  : #ifdef KITL_PCI            
; 101  :         case PCIBus:
; 102  :             OALKitlPCIInfo(pDevLoc, &id, &address, &pDevLoc->Pin);
; 103  :             if (id != pDevice->id) break;
; 104  :             rc = TRUE;
; 105  :             break;
; 106  : #endif
; 107  :         }
; 108  : 
; 109  :         // If we don't identify device skip it
; 110  :         if (!rc) {
; 111  :             pDevice++;

  000c4	e2844018	 add         r4, r4, #0x18
  000c8	e5943000	 ldr         r3, [r4]
  000cc	e3530000	 cmp         r3, #0
  000d0	1affffdc	 bne         |$LL16@OALKitlFin|
  000d4		 |$LN33@OALKitlFin|

; 156  :         }
; 157  : #else // Not building boot loader
; 158  :         params.function = IOCTL_OAL_TRANSBUSADDRESS;
; 159  :         params.transAddress.ifcType = pDevLoc->IfcType;
; 160  :         params.transAddress.busNumber = pDevLoc->BusNumber;
; 161  :         params.transAddress.space = space;
; 162  :         params.transAddress.address = address;
; 163  :         if (!OEMIoControl(
; 164  :             IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, NULL
; 165  :         ) || !params.rc) {
; 166  :             rc = FALSE;
; 167  :             pDevice++;
; 168  :             continue;
; 169  :         }
; 170  :         address = params.transAddress.address;
; 171  :         space = params.transAddress.space;
; 172  : 
; 173  :         // If address has address above 32bit address space skip device
; 174  :         if ((address >> 32) != 0) {
; 175  :             rc = FALSE;
; 176  :             pDevice++;
; 177  :             continue;
; 178  :         }
; 179  : 
; 180  :         // Do mapping to virtual address for memory space
; 181  :         if (space == 0) {
; 182  :             UINT32 offset;
; 183  :             UINT8 *pAddress;
; 184  :             UINT32 pa = (UINT32)address;
; 185  :             
; 186  :             offset = pa & (VM_PAGE_SIZE - 1);
; 187  :             pa &= ~(VM_PAGE_SIZE - 1);
; 188  :             pAddress = NKPhysToVirt(pa >> 8, FALSE);
; 189  :             pAddress += offset;
; 190  :             
; 191  :             pDevLoc->PhysicalLoc = pAddress;
; 192  :         }
; 193  :         else
; 194  :         {
; 195  :             // We're in IO space, no mapping necessary
; 196  :             UINT8* pAddress = (UINT8*)address;
; 197  :             pDevLoc->PhysicalLoc = (VOID*)address;
; 198  :         }
; 199  : #endif
; 200  :         // We get all we need
; 201  :         break;
; 202  :     }
; 203  : 
; 204  :     // Return NULL if driver wasn't found
; 205  :     if (!rc) pDevice = NULL;

  000d4	e3a04000	 mov         r4, #0
  000d8		 |$LN1@OALKitlFin|

; 66   :     BOOL rc = FALSE;
; 67   :     UINT32 space, id = 0xFFFFFFFF;
; 68   :     UINT64 address;
; 69   : #ifndef BUILDING_BOOTLOADER // Not building boot loader
; 70   :     OAL_DDK_PARAMS params;
; 71   : #endif
; 72   :     
; 73   :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 74   :         "+OALKitlFindDevice(%d/%d/%08x, 0x%08x)\r\n",
; 75   :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 76   :     ));

  000d8	e5963440	 ldr         r3, [r6, #0x440]

; 206  : 
; 207  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 208  :         "-OALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%08x)\r\n",
; 209  :         pDevice, (pDevice != NULL) ? pDevice->name : L"", pDevLoc->PhysicalLoc
; 210  :     ));

  000dc	e3130a01	 tst         r3, #1, 20
  000e0	0a000012	 beq         |$LN23@OALKitlFin|
  000e4	e3540000	 cmp         r4, #0
  000e8	0a00000b	 beq         |$LN21@OALKitlFin|
  000ec	e5942000	 ldr         r2, [r4]
  000f0	ea00000a	 b           |$LN22@OALKitlFin|
  000f4		 |$LN4@OALKitlFin|

; 141  :             rc = FALSE;
; 142  :             pDevice++;
; 143  :             continue;
; 144  :         }
; 145  : 
; 146  : 
; 147  :         if (space == 0) {

  000f4	e59d3008	 ldr         r3, [sp, #8]
  000f8	e3530000	 cmp         r3, #0
  000fc	1a000004	 bne         |$LN3@OALKitlFin|

; 148  :             // Do mapping to virtual address for memory space
; 149  :             pDevLoc->PhysicalLoc = OALPAtoVA((UINT32)address, FALSE);

  00100	e3a01000	 mov         r1, #0
  00104	e1a00002	 mov         r0, r2
  00108	eb000000	 bl          OALPAtoVA
  0010c	e585000c	 str         r0, [r5, #0xC]

; 150  :         }
; 151  :         else

  00110	eafffff0	 b           |$LN1@OALKitlFin|
  00114		 |$LN3@OALKitlFin|

; 152  :         {
; 153  :             // We're in IO space, no mapping necessary
; 154  :             UINT8* pAddress = (UINT8*)address;
; 155  :             pDevLoc->PhysicalLoc = (VOID*)address;

  00114	e585200c	 str         r2, [r5, #0xC]

; 156  :         }
; 157  : #else // Not building boot loader
; 158  :         params.function = IOCTL_OAL_TRANSBUSADDRESS;
; 159  :         params.transAddress.ifcType = pDevLoc->IfcType;
; 160  :         params.transAddress.busNumber = pDevLoc->BusNumber;
; 161  :         params.transAddress.space = space;
; 162  :         params.transAddress.address = address;
; 163  :         if (!OEMIoControl(
; 164  :             IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, NULL
; 165  :         ) || !params.rc) {
; 166  :             rc = FALSE;
; 167  :             pDevice++;
; 168  :             continue;
; 169  :         }
; 170  :         address = params.transAddress.address;
; 171  :         space = params.transAddress.space;
; 172  : 
; 173  :         // If address has address above 32bit address space skip device
; 174  :         if ((address >> 32) != 0) {
; 175  :             rc = FALSE;
; 176  :             pDevice++;
; 177  :             continue;
; 178  :         }
; 179  : 
; 180  :         // Do mapping to virtual address for memory space
; 181  :         if (space == 0) {
; 182  :             UINT32 offset;
; 183  :             UINT8 *pAddress;
; 184  :             UINT32 pa = (UINT32)address;
; 185  :             
; 186  :             offset = pa & (VM_PAGE_SIZE - 1);
; 187  :             pa &= ~(VM_PAGE_SIZE - 1);
; 188  :             pAddress = NKPhysToVirt(pa >> 8, FALSE);
; 189  :             pAddress += offset;
; 190  :             
; 191  :             pDevLoc->PhysicalLoc = pAddress;
; 192  :         }
; 193  :         else
; 194  :         {
; 195  :             // We're in IO space, no mapping necessary
; 196  :             UINT8* pAddress = (UINT8*)address;
; 197  :             pDevLoc->PhysicalLoc = (VOID*)address;
; 198  :         }
; 199  : #endif
; 200  :         // We get all we need
; 201  :         break;
; 202  :     }
; 203  : 
; 204  :     // Return NULL if driver wasn't found
; 205  :     if (!rc) pDevice = NULL;

  00118	eaffffee	 b           |$LN1@OALKitlFin|
  0011c		 |$LN21@OALKitlFin|

; 206  : 
; 207  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 208  :         "-OALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%08x)\r\n",
; 209  :         pDevice, (pDevice != NULL) ? pDevice->name : L"", pDevLoc->PhysicalLoc
; 210  :     ));

  0011c	e59f2020	 ldr         r2, [pc, #0x20]
  00120		 |$LN22@OALKitlFin|
  00120	e595300c	 ldr         r3, [r5, #0xC]
  00124	e59f0014	 ldr         r0, [pc, #0x14]
  00128	e1a01004	 mov         r1, r4
  0012c	eb000000	 bl          KITLOutputDebugString
  00130		 |$LN23@OALKitlFin|

; 211  :     return pDevice;
; 212  : }

  00130	e1a00004	 mov         r0, r4
  00134	e28dd014	 add         sp, sp, #0x14
  00138	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0013c	e12fff1e	 bx          lr
  00140		 |$LN37@OALKitlFin|
  00140		 |$LN38@OALKitlFin|
  00140	00000000	 DCD         |??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@|
  00144		 |$LN39@OALKitlFin|
  00144	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  00148		 |$LN40@OALKitlFin|
  00148	00000000	 DCD         |??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  0014c		 |$LN41@OALKitlFin|
  0014c	00000000	 DCD         |dpCurSettings|
  00150		 |$M43245|

			 ENDP  ; |OALKitlFindDevice|

	EXPORT	|OALKitlDeviceName|
	EXPORT	|??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43274| DCD	|$LN23@OALKitlDev|
	DCD	0x40002d02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@| DCB "-"
	DCB	"OALKitlDeviceName(name = 0x%08x('%s')", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlDeviceName(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlDeviceName| PROC

; 221  : ) {

  00000		 |$LN23@OALKitlDev|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43271|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0

; 222  :     BOOL rc = FALSE;
; 223  :     static WCHAR name[64];
; 224  :     LPCWSTR pName = NULL;
; 225  :     
; 226  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 227  :         "+OALKitlDeviceName(%d/%d/%08x, 0x%08x)\r\n",
; 228  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 229  :     ));

  00010	e59f7098	 ldr         r7, [pc, #0x98]
  00014	e3a05000	 mov         r5, #0
  00018	e5971440	 ldr         r1, [r7, #0x440]
  0001c	e3110a01	 tst         r1, #1, 20
  00020	0a000012	 beq         |$LN17@OALKitlDev|
  00024	e5963008	 ldr         r3, [r6, #8]
  00028	e5962004	 ldr         r2, [r6, #4]
  0002c	e5961000	 ldr         r1, [r6]
  00030	e59f0074	 ldr         r0, [pc, #0x74]
  00034	e58d4000	 str         r4, [sp]
  00038	eb000000	 bl          KITLOutputDebugString
  0003c	e5971440	 ldr         r1, [r7, #0x440]

; 230  : 
; 231  :     // Look for driver in list
; 232  :     while (pDevice->name != NULL && !rc) {

  00040	ea00000a	 b           |$LN17@OALKitlDev|
  00044		 |$LL8@OALKitlDev|

; 233  : 
; 234  :         // Is it our device? Then move
; 235  :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00044	e5962000	 ldr         r2, [r6]
  00048	e5943004	 ldr         r3, [r4, #4]
  0004c	e1520003	 cmp         r2, r3

; 236  :             // Move to next driver
; 237  :             pDevice++;
; 238  :             continue;

  00050	1a000005	 bne         |$LN18@OALKitlDev|

; 239  :         }            
; 240  : 
; 241  :         // Identify device and read its address/interrupt depends on bus type
; 242  :         switch (pDevLoc->IfcType) {

  00054	e3520000	 cmp         r2, #0
  00058	1a000003	 bne         |$LN18@OALKitlDev|

; 243  :         case Internal:
; 244  :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  0005c	e5962008	 ldr         r2, [r6, #8]
  00060	e5943008	 ldr         r3, [r4, #8]
  00064	e1520003	 cmp         r2, r3
  00068	0a000004	 beq         |$LN19@OALKitlDev|
  0006c		 |$LN18@OALKitlDev|

; 246  :             rc = TRUE;
; 247  :             break;
; 248  : #ifdef KITL_PCI            
; 249  :         case PCIBus:
; 250  :             {
; 251  :                 UINT32 id;
; 252  :                 OAL_PCI_LOCATION pciLoc;
; 253  : 
; 254  :                 pciLoc = *(OAL_PCI_LOCATION*)&pDevLoc->LogicalLoc;
; 255  :                 id = OALPCIGetId(pDevLoc->BusNumber, pciLoc);
; 256  :                 if (id != pDevice->id) break;
; 257  :                 OALLogPrintf(
; 258  :                     name, sizeof(name)/sizeof(WCHAR),
; 259  :                     L"%s @ id %d bus %d dev %d fnc %d",
; 260  :                     pDevice->name, pDevLoc->BusNumber, pciLoc.bus, pciLoc.dev,
; 261  :                     pciLoc.fnc
; 262  :                 );
; 263  :                 pName = name;
; 264  :                 rc = TRUE;
; 265  :             }                
; 266  :             break;
; 267  : #endif
; 268  :         }
; 269  : 
; 270  :         // If we don't identify device skip it
; 271  :         if (!rc) {
; 272  :             pDevice++;

  0006c	e2844018	 add         r4, r4, #0x18
  00070		 |$LN17@OALKitlDev|

; 230  : 
; 231  :     // Look for driver in list
; 232  :     while (pDevice->name != NULL && !rc) {

  00070	e5943000	 ldr         r3, [r4]
  00074	e3530000	 cmp         r3, #0
  00078	1afffff1	 bne         |$LL8@OALKitlDev|
  0007c	ea000000	 b           |$LN1@OALKitlDev|
  00080		 |$LN19@OALKitlDev|

; 245  :             pName = pDevice->name;

  00080	e5945000	 ldr         r5, [r4]
  00084		 |$LN1@OALKitlDev|

; 273  :             continue;
; 274  :         }
; 275  :             
; 276  :         // We get all we need
; 277  :         break;
; 278  :     }
; 279  : 
; 280  : 
; 281  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 282  :         "-OALKitlDeviceName(name = 0x%08x('%s')\r\n", pName, pName
; 283  :     ));

  00084	e3110a01	 tst         r1, #1, 20
  00088	159f0018	 ldrne       r0, [pc, #0x18]
  0008c	11a02005	 movne       r2, r5
  00090	11a01005	 movne       r1, r5
  00094	1b000000	 blne        KITLOutputDebugString

; 284  :     return pName;
; 285  : }

  00098	e1a00005	 mov         r0, r5
  0009c	e28dd004	 add         sp, sp, #4
  000a0	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$LN24@OALKitlDev|
  000a8		 |$LN25@OALKitlDev|
  000a8	00000000	 DCD         |??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@|
  000ac		 |$LN26@OALKitlDev|
  000ac	00000000	 DCD         |??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  000b0		 |$LN27@OALKitlDev|
  000b0	00000000	 DCD         |dpCurSettings|
  000b4		 |$M43272|

			 ENDP  ; |OALKitlDeviceName|

	EXPORT	|OALKitlDeviceType|
	EXPORT	|??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43300| DCD	|$LN23@OALKitlDev@2|
	DCD	0x40002c02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"OALKitlDeviceType(type = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlDeviceType(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlDeviceType| PROC

; 294  : ) {

  00000		 |$LN23@OALKitlDev@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43297|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0

; 295  :     BOOL rc = FALSE;
; 296  :     OAL_KITL_TYPE type = OAL_KITL_TYPE_NONE;
; 297  :     
; 298  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 299  :         "+OALKitlDeviceType(%d/%d/%08x, 0x%08x)\r\n",
; 300  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 301  :     ));

  00010	e59f7094	 ldr         r7, [pc, #0x94]
  00014	e3a05000	 mov         r5, #0
  00018	e5971440	 ldr         r1, [r7, #0x440]
  0001c	e3110a01	 tst         r1, #1, 20
  00020	0a000012	 beq         |$LN17@OALKitlDev@2|
  00024	e5963008	 ldr         r3, [r6, #8]
  00028	e5962004	 ldr         r2, [r6, #4]
  0002c	e5961000	 ldr         r1, [r6]
  00030	e59f0070	 ldr         r0, [pc, #0x70]
  00034	e58d4000	 str         r4, [sp]
  00038	eb000000	 bl          KITLOutputDebugString
  0003c	e5971440	 ldr         r1, [r7, #0x440]

; 302  : 
; 303  :     // Look for driver in list
; 304  :     while (pDevice->name != NULL && !rc) {

  00040	ea00000a	 b           |$LN17@OALKitlDev@2|
  00044		 |$LL8@OALKitlDev@2|

; 305  : 
; 306  :         // Is it our device? Then move
; 307  :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00044	e5962000	 ldr         r2, [r6]
  00048	e5943004	 ldr         r3, [r4, #4]
  0004c	e1520003	 cmp         r2, r3

; 308  :             // Move to next driver
; 309  :             pDevice++;
; 310  :             continue;

  00050	1a000005	 bne         |$LN18@OALKitlDev@2|

; 311  :         }            
; 312  : 
; 313  :         // Identify device and read its address/interrupt depends on bus type
; 314  :         switch (pDevLoc->IfcType) {

  00054	e3520000	 cmp         r2, #0
  00058	1a000003	 bne         |$LN18@OALKitlDev@2|

; 315  :         case Internal:
; 316  :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  0005c	e5962008	 ldr         r2, [r6, #8]
  00060	e5943008	 ldr         r3, [r4, #8]
  00064	e1520003	 cmp         r2, r3
  00068	0a000004	 beq         |$LN19@OALKitlDev@2|
  0006c		 |$LN18@OALKitlDev@2|

; 318  :             rc = TRUE;
; 319  :             break;
; 320  : #ifdef KITL_PCI            
; 321  :         case PCIBus:
; 322  :             {
; 323  :                 UINT32 id;
; 324  :                 id = OALPCIGetId(
; 325  :                     pDevLoc->BusNumber, *(OAL_PCI_LOCATION*)&pDevLoc->LogicalLoc
; 326  :                 );
; 327  :                 if (id != pDevice->id) break;
; 328  :                 type = pDevice->type;
; 329  :                 rc = TRUE;
; 330  :             }                
; 331  :             break;
; 332  : #endif
; 333  :         }
; 334  : 
; 335  :         // If we don't identify device skip it
; 336  :         if (!rc) {
; 337  :             pDevice++;

  0006c	e2844018	 add         r4, r4, #0x18
  00070		 |$LN17@OALKitlDev@2|

; 302  : 
; 303  :     // Look for driver in list
; 304  :     while (pDevice->name != NULL && !rc) {

  00070	e5943000	 ldr         r3, [r4]
  00074	e3530000	 cmp         r3, #0
  00078	1afffff1	 bne         |$LL8@OALKitlDev@2|
  0007c	ea000000	 b           |$LN1@OALKitlDev@2|
  00080		 |$LN19@OALKitlDev@2|

; 317  :             type = pDevice->type;

  00080	e5945010	 ldr         r5, [r4, #0x10]
  00084		 |$LN1@OALKitlDev@2|

; 338  :             continue;
; 339  :         }
; 340  :             
; 341  :         // We get all we need
; 342  :         break;
; 343  :     }
; 344  : 
; 345  : 
; 346  :     KITL_RETAILMSG(ZONE_KITL_OAL, ("-OALKitlDeviceType(type = %d)\r\n", type));

  00084	e3110a01	 tst         r1, #1, 20
  00088	159f0014	 ldrne       r0, [pc, #0x14]
  0008c	11a01005	 movne       r1, r5
  00090	1b000000	 blne        KITLOutputDebugString

; 347  :     return type;
; 348  : }

  00094	e1a00005	 mov         r0, r5
  00098	e28dd004	 add         sp, sp, #4
  0009c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN24@OALKitlDev@2|
  000a4		 |$LN25@OALKitlDev@2|
  000a4	00000000	 DCD         |??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  000a8		 |$LN26@OALKitlDev@2|
  000a8	00000000	 DCD         |??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  000ac		 |$LN27@OALKitlDev@2|
  000ac	00000000	 DCD         |dpCurSettings|
  000b0		 |$M43298|

			 ENDP  ; |OALKitlDeviceType|

	END
