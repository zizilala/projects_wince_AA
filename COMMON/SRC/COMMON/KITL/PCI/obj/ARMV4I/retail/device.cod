; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\KITL\device.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|OEMIoControl|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|memcpy|
	IMPORT	|memset|
	IMPORT	|__security_check_cookie|
; File c:\wince600\platform\common\src\common\kitl\device.c

  00000			 AREA	 |.pdata|, PDATA
|$T43284| DCD	|$LN7@OALKitlPCI|
	DCD	0xc0003d02

  00000			 AREA	 |.xdata|, DATA
|$T43280| DCD	0xffffffe0
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T43280|

  00008		 |OALKitlPCIInfo| PROC

; 26   : ) {

  00008		 |$LN7@OALKitlPCI|
  00008	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  0000c	e24ddf4d	 sub         sp, sp, #0x4D, 30
  00010		 |$M43281|
  00010	e1a07003	 mov         r7, r3
  00014	e1a05002	 mov         r5, r2
  00018	e1a06001	 mov         r6, r1
  0001c	e1a04000	 mov         r4, r0
  00020	e59fe0d0	 ldr         lr, [pc, #0xD0]
  00024	e59ee000	 ldr         lr, [lr]
  00028	e58de130	 str         lr, [sp, #0x130]

; 27   :     PCI_COMMON_CONFIG config;
; 28   :     OAL_DDK_PARAMS params;
; 29   : 
; 30   :     memset(&config, 0xFF, sizeof(config));

  0002c	e3a02c01	 mov         r2, #1, 24
  00030	e3a010ff	 mov         r1, #0xFF
  00034	e28d0030	 add         r0, sp, #0x30
  00038	eb000000	 bl          memset

; 31   :     *pId = 0xFFFFFFFF;

  0003c	e3e03000	 mvn         r3, #0
  00040	e5863000	 str         r3, [r6]

; 32   :     *pAddress = 0;

  00044	e3a09000	 mov         r9, #0

; 33   :     *pIrqPin = 0;
; 34   :     
; 35   :     params.function = IOCTL_OAL_READBUSDATA;

  00048	e3a03003	 mov         r3, #3

; 36   :     params.rc = 0;

  0004c	e3a0e000	 mov         lr, #0
  00050	e5859000	 str         r9, [r5]
  00054	e5859004	 str         r9, [r5, #4]

; 37   :     params.busData.devLoc = *pDevLoc;

  00058	e28d0010	 add         r0, sp, #0x10
  0005c	e3a02014	 mov         r2, #0x14
  00060	e1a01004	 mov         r1, r4
  00064	e58d3008	 str         r3, [sp, #8]
  00068	e5879000	 str         r9, [r7]
  0006c	e58de00c	 str         lr, [sp, #0xC]
  00070	eb000000	 bl          memcpy

; 38   :     params.busData.offset = 0;
; 39   :     params.busData.length = sizeof(config);
; 40   :     params.busData.pBuffer = &config;
; 41   : 
; 42   :     if (!OEMIoControl(
; 43   :         IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, NULL
; 44   :     ) || !params.rc) goto cleanUp;

  00074	e59f0078	 ldr         r0, [pc, #0x78]
  00078	e28de030	 add         lr, sp, #0x30
  0007c	e3a04000	 mov         r4, #0
  00080	e3a08c01	 mov         r8, #1, 24
  00084	e3a03000	 mov         r3, #0
  00088	e3a02028	 mov         r2, #0x28
  0008c	e28d1008	 add         r1, sp, #8
  00090	e58de02c	 str         lr, [sp, #0x2C]
  00094	e58d4024	 str         r4, [sp, #0x24]
  00098	e58d8028	 str         r8, [sp, #0x28]
  0009c	e58d9004	 str         r9, [sp, #4]
  000a0	e58d9000	 str         r9, [sp]
  000a4	eb000000	 bl          OEMIoControl
  000a8	e3500000	 cmp         r0, #0
  000ac	0a00000b	 beq         |$cleanUp$43119|
  000b0	e59d300c	 ldr         r3, [sp, #0xC]
  000b4	e3530000	 cmp         r3, #0
  000b8	0a000008	 beq         |$cleanUp$43119|

; 45   : 
; 46   :     *pId = config.VendorID | (config.DeviceID << 16);

  000bc	e1dd23b2	 ldrh        r2, [sp, #0x32]
  000c0	e1dd33b0	 ldrh        r3, [sp, #0x30]

; 47   :     *pAddress = config.u.type0.BaseAddresses[0];

  000c4	e59d1040	 ldr         r1, [sp, #0x40]

; 48   :     *pIrqPin = config.u.type0.InterruptPin;

  000c8	e5dd006d	 ldrb        r0, [sp, #0x6D]
  000cc	e1833802	 orr         r3, r3, r2, lsl #16
  000d0	e5863000	 str         r3, [r6]
  000d4	e5851000	 str         r1, [r5]
  000d8	e5859004	 str         r9, [r5, #4]
  000dc	e5870000	 str         r0, [r7]
  000e0		 |$cleanUp$43119|
  000e0	e59d0130	 ldr         r0, [sp, #0x130]
  000e4	eb000000	 bl          __security_check_cookie

; 49   :     
; 50   : cleanUp:    
; 51   :     return;
; 52   : }

  000e8	e28ddf4d	 add         sp, sp, #0x4D, 30
  000ec	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000f0	e12fff1e	 bx          lr
  000f4		 |$LN8@OALKitlPCI|
  000f4		 |$LN9@OALKitlPCI|
  000f4	01010014	 DCD         0x1010014
  000f8		 |$LN10@OALKitlPCI|
  000f8	00000000	 DCD         |__security_cookie|
  000fc		 |$M43282|

			 ENDP  ; |OALKitlPCIInfo|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|OALKitlFindDevice|
	EXPORT	|??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	IMPORT	|NKPhysToVirt|
	IMPORT	|KITLOutputDebugString|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T43338| DCD	|$LN44@OALKitlFin|
	DCD	0xc0009c02

  00000			 AREA	 |.xdata|, DATA
|$T43334| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@| DCB "-O"
	DCB	"ALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%"
	DCB	"08x)", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlFindDevice(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T43334|

  00008		 |OALKitlFindDevice| PROC

; 65   : ) {

  00008		 |$LN44@OALKitlFin|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddf57	 sub         sp, sp, #0x57, 30
  00010		 |$M43335|
  00010	e1a05001	 mov         r5, r1
  00014	e1a06000	 mov         r6, r0
  00018	e59f3254	 ldr         r3, [pc, #0x254]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3158	 str         r3, [sp, #0x158]

; 66   :     BOOL rc = FALSE;
; 67   :     UINT32 space, id = 0xFFFFFFFF;
; 68   :     UINT64 address;
; 69   : #ifndef BUILDING_BOOTLOADER // Not building boot loader
; 70   :     OAL_DDK_PARAMS params;
; 71   : #endif
; 72   :     
; 73   :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 74   :         "+OALKitlFindDevice(%d/%d/%08x, 0x%08x)\r\n",
; 75   :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 76   :     ));

  00024	e59f9244	 ldr         r9, [pc, #0x244]
  00028	e5993440	 ldr         r3, [r9, #0x440]
  0002c	e3130a01	 tst         r3, #1, 20
  00030	15963008	 ldrne       r3, [r6, #8]
  00034	15962004	 ldrne       r2, [r6, #4]
  00038	15961000	 ldrne       r1, [r6]
  0003c	159f0228	 ldrne       r0, [pc, #0x228]
  00040	158d5000	 strne       r5, [sp]
  00044	1b000000	 blne        KITLOutputDebugString

; 77   : 
; 78   :     // Look for driver in list
; 79   :     while (pDevice->name != NULL && !rc) {

  00048	e5953000	 ldr         r3, [r5]
  0004c	e3530000	 cmp         r3, #0
  00050	0a000031	 beq         |$LN40@OALKitlFin|
  00054	e28db058	 add         r11, sp, #0x58
  00058	e3a0a005	 mov         r10, #5
  0005c		 |$LL19@OALKitlFin|

; 80   : 
; 81   :         // Is it our device? Then move
; 82   :         if (pDevLoc->IfcType != pDevice->ifcType) {

  0005c	e5962000	 ldr         r2, [r6]
  00060	e5953004	 ldr         r3, [r5, #4]
  00064	e1520003	 cmp         r2, r3

; 83   :             // Move to next driver
; 84   :             pDevice++;
; 85   :             continue;

  00068	1a000027	 bne         |$LN39@OALKitlFin|

; 86   :         }            
; 87   : 
; 88   :         // Identify device and read its address/interrupt depends on bus type
; 89   :         switch (pDevLoc->IfcType) {

  0006c	e1b03002	 movs        r3, r2
  00070	0a000003	 beq         |$LN12@OALKitlFin|
  00074	e3530005	 cmp         r3, #5
  00078	0a00002f	 beq         |$LN10@OALKitlFin|
  0007c	e3730001	 cmn         r3, #1
  00080	1a000021	 bne         |$LN39@OALKitlFin|
  00084		 |$LN12@OALKitlFin|

; 90   :         case InterfaceTypeUndefined:
; 91   :             if (pDevLoc->LogicalLoc != pDevice->id) break;
; 92   :             address = pDevLoc->LogicalLoc;
; 93   :             rc = TRUE;
; 94   :             break;
; 95   :         case Internal:
; 96   :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  00084	e5953008	 ldr         r3, [r5, #8]
  00088	e5964008	 ldr         r4, [r6, #8]
  0008c	e1540003	 cmp         r4, r3
  00090	1a00001d	 bne         |$LN39@OALKitlFin|

; 97   :             address = pDevLoc->LogicalLoc;

  00094	e3a07000	 mov         r7, #0
  00098		 |$LN8@OALKitlFin|

; 112  :             continue;
; 113  :         }
; 114  : 
; 115  :         // When interface type is undefined physical address
; 116  :         // is equal to logical, so break loop
; 117  :         if (pDevLoc->IfcType == InterfaceTypeUndefined) {

  00098	e5968000	 ldr         r8, [r6]
  0009c	e3780001	 cmn         r8, #1
  000a0	0a000061	 beq         |$LN3@OALKitlFin|

; 118  :             pDevLoc->PhysicalLoc = (VOID*)address;
; 119  :             break;
; 120  :         }
; 121  : 
; 122  :         // Translate bus address, if it fails skip device
; 123  :         // Are we in IO space (1) or memory space (0)?
; 124  :         space = (UINT32)address & 0x1;
; 125  : 
; 126  :         // Mask off the lowest bit; it just indicates which space we're in.  This isn't
; 127  :         // actually part of the address
; 128  :         address &= ~0x1;
; 129  : 
; 130  : #ifdef BUILDING_BOOTLOADER
; 131  :         if (!OALIoTransBusAddress(
; 132  :             pDevLoc->IfcType, pDevLoc->BusNumber, address, &space, &address
; 133  :         )) {
; 134  :             rc = FALSE;
; 135  :             pDevice++;
; 136  :             continue;
; 137  :         }
; 138  : 
; 139  :         // If address has address above 32bit address space skip device
; 140  :         if ((address >> 32) != 0) {
; 141  :             rc = FALSE;
; 142  :             pDevice++;
; 143  :             continue;
; 144  :         }
; 145  : 
; 146  : 
; 147  :         if (space == 0) {
; 148  :             // Do mapping to virtual address for memory space
; 149  :             pDevLoc->PhysicalLoc = OALPAtoVA((UINT32)address, FALSE);
; 150  :         }
; 151  :         else
; 152  :         {
; 153  :             // We're in IO space, no mapping necessary
; 154  :             UINT8* pAddress = (UINT8*)address;
; 155  :             pDevLoc->PhysicalLoc = (VOID*)address;
; 156  :         }
; 157  : #else // Not building boot loader
; 158  :         params.function = IOCTL_OAL_TRANSBUSADDRESS;
; 159  :         params.transAddress.ifcType = pDevLoc->IfcType;
; 160  :         params.transAddress.busNumber = pDevLoc->BusNumber;

  000a4	e5963004	 ldr         r3, [r6, #4]
  000a8	e204e001	 and         lr, r4, #1
  000ac	e3c44001	 bic         r4, r4, #1

; 161  :         params.transAddress.space = space;
; 162  :         params.transAddress.address = address;
; 163  :         if (!OEMIoControl(
; 164  :             IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, NULL
; 165  :         ) || !params.rc) {

  000b0	e59f01b0	 ldr         r0, [pc, #0x1B0]
  000b4	e58d4020	 str         r4, [sp, #0x20]
  000b8	e58d3014	 str         r3, [sp, #0x14]
  000bc	e3a04000	 mov         r4, #0
  000c0	e3a03000	 mov         r3, #0
  000c4	e3a02028	 mov         r2, #0x28
  000c8	e28d1008	 add         r1, sp, #8
  000cc	e58d4004	 str         r4, [sp, #4]
  000d0	e58d4000	 str         r4, [sp]
  000d4	e58da008	 str         r10, [sp, #8]
  000d8	e58d8010	 str         r8, [sp, #0x10]
  000dc	e58de018	 str         lr, [sp, #0x18]
  000e0	e58d7024	 str         r7, [sp, #0x24]
  000e4	eb000000	 bl          OEMIoControl
  000e8	e3500000	 cmp         r0, #0
  000ec	0a000006	 beq         |$LN39@OALKitlFin|
  000f0	e59d300c	 ldr         r3, [sp, #0xC]
  000f4	e3530000	 cmp         r3, #0
  000f8	0a000003	 beq         |$LN39@OALKitlFin|

; 166  :             rc = FALSE;
; 167  :             pDevice++;
; 168  :             continue;
; 169  :         }
; 170  :         address = params.transAddress.address;
; 171  :         space = params.transAddress.space;
; 172  : 
; 173  :         // If address has address above 32bit address space skip device
; 174  :         if ((address >> 32) != 0) {

  000fc	e59d3024	 ldr         r3, [sp, #0x24]
  00100	e59d4020	 ldr         r4, [sp, #0x20]
  00104	e3530000	 cmp         r3, #0
  00108	0a000039	 beq         |$LN4@OALKitlFin|
  0010c		 |$LN39@OALKitlFin|

; 106  : #endif
; 107  :         }
; 108  : 
; 109  :         // If we don't identify device skip it
; 110  :         if (!rc) {
; 111  :             pDevice++;

  0010c	e2855018	 add         r5, r5, #0x18
  00110	e5953000	 ldr         r3, [r5]
  00114	e3530000	 cmp         r3, #0
  00118	1affffcf	 bne         |$LL19@OALKitlFin|
  0011c		 |$LN40@OALKitlFin|

; 198  :         }
; 199  : #endif
; 200  :         // We get all we need
; 201  :         break;
; 202  :     }
; 203  : 
; 204  :     // Return NULL if driver wasn't found
; 205  :     if (!rc) pDevice = NULL;

  0011c	e3a05000	 mov         r5, #0
  00120		 |$LN1@OALKitlFin|

; 66   :     BOOL rc = FALSE;
; 67   :     UINT32 space, id = 0xFFFFFFFF;
; 68   :     UINT64 address;
; 69   : #ifndef BUILDING_BOOTLOADER // Not building boot loader
; 70   :     OAL_DDK_PARAMS params;
; 71   : #endif
; 72   :     
; 73   :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 74   :         "+OALKitlFindDevice(%d/%d/%08x, 0x%08x)\r\n",
; 75   :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 76   :     ));

  00120	e5993440	 ldr         r3, [r9, #0x440]

; 206  : 
; 207  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 208  :         "-OALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%08x)\r\n",
; 209  :         pDevice, (pDevice != NULL) ? pDevice->name : L"", pDevLoc->PhysicalLoc
; 210  :     ));

  00124	e3130a01	 tst         r3, #1, 20
  00128	0a000046	 beq         |$LN26@OALKitlFin|
  0012c	e3550000	 cmp         r5, #0
  00130	0a00003f	 beq         |$LN24@OALKitlFin|
  00134	e5952000	 ldr         r2, [r5]
  00138	ea00003e	 b           |$LN25@OALKitlFin|
  0013c		 |$LN10@OALKitlFin|

; 98   :             rc = TRUE;
; 99   :             break;
; 100  : #ifdef KITL_PCI            
; 101  :         case PCIBus:
; 102  :             OALKitlPCIInfo(pDevLoc, &id, &address, &pDevLoc->Pin);

  0013c	e3a02c01	 mov         r2, #1, 24
  00140	e3a010ff	 mov         r1, #0xFF
  00144	e28d0058	 add         r0, sp, #0x58
  00148	e1a0a006	 mov         r10, r6
  0014c	eb000000	 bl          memset
  00150	e3a03000	 mov         r3, #0
  00154	e5aa3010	 str         r3, [r10, #0x10]!
  00158	e3a03003	 mov         r3, #3
  0015c	e58d3030	 str         r3, [sp, #0x30]
  00160	e3a03000	 mov         r3, #0
  00164	e28d0038	 add         r0, sp, #0x38
  00168	e3a02014	 mov         r2, #0x14
  0016c	e1a01006	 mov         r1, r6
  00170	e58d3034	 str         r3, [sp, #0x34]
  00174	e3e08000	 mvn         r8, #0
  00178	e3a04000	 mov         r4, #0
  0017c	e3a07000	 mov         r7, #0
  00180	eb000000	 bl          memcpy
  00184	e3a0e000	 mov         lr, #0
  00188	e58de04c	 str         lr, [sp, #0x4C]
  0018c	e3a0ec01	 mov         lr, #1, 24
  00190	e59f00d0	 ldr         r0, [pc, #0xD0]
  00194	e58de050	 str         lr, [sp, #0x50]
  00198	e3a0e000	 mov         lr, #0
  0019c	e3a03000	 mov         r3, #0
  001a0	e3a02028	 mov         r2, #0x28
  001a4	e28d1030	 add         r1, sp, #0x30
  001a8	e58de004	 str         lr, [sp, #4]
  001ac	e58de000	 str         lr, [sp]
  001b0	e58db054	 str         r11, [sp, #0x54]
  001b4	eb000000	 bl          OEMIoControl
  001b8	e3500000	 cmp         r0, #0
  001bc	159d3034	 ldrne       r3, [sp, #0x34]
  001c0	13530000	 cmpne       r3, #0
  001c4	11dd15ba	 ldrneh      r1, [sp, #0x5A]
  001c8	11dd35b8	 ldrneh      r3, [sp, #0x58]
  001cc	15dd2095	 ldrneb      r2, [sp, #0x95]
  001d0	159d4068	 ldrne       r4, [sp, #0x68]
  001d4	11838801	 orrne       r8, r3, r1, lsl #16
  001d8	158a2000	 strne       r2, [r10]
  001dc	13a07000	 movne       r7, #0
  001e0		 |$cleanUp$43304|

; 103  :             if (id != pDevice->id) break;

  001e0	e5953008	 ldr         r3, [r5, #8]

; 104  :             rc = TRUE;
; 105  :             break;

  001e4	e3a0a005	 mov         r10, #5
  001e8	e1580003	 cmp         r8, r3
  001ec	1affffc6	 bne         |$LN39@OALKitlFin|
  001f0	eaffffa8	 b           |$LN8@OALKitlFin|
  001f4		 |$LN4@OALKitlFin|

; 175  :             rc = FALSE;
; 176  :             pDevice++;
; 177  :             continue;
; 178  :         }
; 179  : 
; 180  :         // Do mapping to virtual address for memory space
; 181  :         if (space == 0) {

  001f4	e59d3018	 ldr         r3, [sp, #0x18]
  001f8	e3530000	 cmp         r3, #0
  001fc	1a00000a	 bne         |$LN3@OALKitlFin|
  00200	e3e034ff	 mvn         r3, #0xFF, 8

; 182  :             UINT32 offset;
; 183  :             UINT8 *pAddress;
; 184  :             UINT32 pa = (UINT32)address;
; 185  :             
; 186  :             offset = pa & (VM_PAGE_SIZE - 1);
; 187  :             pa &= ~(VM_PAGE_SIZE - 1);
; 188  :             pAddress = NKPhysToVirt(pa >> 8, FALSE);
; 189  :             pAddress += offset;
; 190  :             
; 191  :             pDevLoc->PhysicalLoc = pAddress;

  00204	e223300f	 eor         r3, r3, #0xF
  00208	e0030424	 and         r0, r3, r4, lsr #8
  0020c	e3a01000	 mov         r1, #0
  00210	eb000000	 bl          NKPhysToVirt
  00214	e3a03c0f	 mov         r3, #0xF, 24
  00218	e38330ff	 orr         r3, r3, #0xFF
  0021c	e0043003	 and         r3, r4, r3
  00220	e0833000	 add         r3, r3, r0
  00224	e586300c	 str         r3, [r6, #0xC]

; 192  :         }
; 193  :         else

  00228	eaffffbc	 b           |$LN1@OALKitlFin|
  0022c		 |$LN3@OALKitlFin|

; 194  :         {
; 195  :             // We're in IO space, no mapping necessary
; 196  :             UINT8* pAddress = (UINT8*)address;
; 197  :             pDevLoc->PhysicalLoc = (VOID*)address;

  0022c	e586400c	 str         r4, [r6, #0xC]

; 198  :         }
; 199  : #endif
; 200  :         // We get all we need
; 201  :         break;
; 202  :     }
; 203  : 
; 204  :     // Return NULL if driver wasn't found
; 205  :     if (!rc) pDevice = NULL;

  00230	eaffffba	 b           |$LN1@OALKitlFin|
  00234		 |$LN24@OALKitlFin|

; 206  : 
; 207  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 208  :         "-OALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%08x)\r\n",
; 209  :         pDevice, (pDevice != NULL) ? pDevice->name : L"", pDevLoc->PhysicalLoc
; 210  :     ));

  00234	e59f2028	 ldr         r2, [pc, #0x28]
  00238		 |$LN25@OALKitlFin|
  00238	e596300c	 ldr         r3, [r6, #0xC]
  0023c	e59f001c	 ldr         r0, [pc, #0x1C]
  00240	e1a01005	 mov         r1, r5
  00244	eb000000	 bl          KITLOutputDebugString
  00248		 |$LN26@OALKitlFin|

; 211  :     return pDevice;

  00248	e59d0158	 ldr         r0, [sp, #0x158]
  0024c	eb000000	 bl          __security_check_cookie

; 212  : }

  00250	e1a00005	 mov         r0, r5
  00254	e28ddf57	 add         sp, sp, #0x57, 30
  00258	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0025c	e12fff1e	 bx          lr
  00260		 |$LN45@OALKitlFin|
  00260		 |$LN46@OALKitlFin|
  00260	00000000	 DCD         |??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@|
  00264		 |$LN47@OALKitlFin|
  00264	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  00268		 |$LN48@OALKitlFin|
  00268	01010014	 DCD         0x1010014
  0026c		 |$LN49@OALKitlFin|
  0026c	00000000	 DCD         |??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  00270		 |$LN50@OALKitlFin|
  00270	00000000	 DCD         |dpCurSettings|
  00274		 |$LN51@OALKitlFin|
  00274	00000000	 DCD         |__security_cookie|
  00278		 |$M43336|

			 ENDP  ; |OALKitlFindDevice|

	EXPORT	|OALKitlDeviceName|
	EXPORT	|??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@MHLKLHLH@?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAi?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAe?$AAv?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAn?$AAc?$AA?5?$AA?$CF?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	IMPORT	|OALLogPrintf|
	IMPORT	|OALPCIGetId|

  00000			 AREA	 |.bss|, NOINIT
|?name@?1??OALKitlDeviceName@@9@9| % 0x80		; `OALKitlDeviceName'::`2'::name
|?name@?1??OALKitlDeviceName@@9@9| % 0x80		; `OALKitlDeviceName'::`2'::name

  00000			 AREA	 |.pdata|, PDATA
|$T43372| DCD	|$LN27@OALKitlDev|
	DCD	0x40004702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@| DCB "-"
	DCB	"OALKitlDeviceName(name = 0x%08x('%s')", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@MHLKLHLH@?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAi?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAe?$AAv?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAn?$AAc?$AA?5?$AA?$CF?$AAd?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, " ", 0x0, "@", 0x0, " ", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "v", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "n", 0x0, "c", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlDeviceName(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlDeviceName| PROC

; 221  : ) {

  00000		 |$LN27@OALKitlDev|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M43369|
  00008	e1a07001	 mov         r7, r1
  0000c	e1a06000	 mov         r6, r0

; 222  :     BOOL rc = FALSE;
; 223  :     static WCHAR name[64];
; 224  :     LPCWSTR pName = NULL;
; 225  :     
; 226  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 227  :         "+OALKitlDeviceName(%d/%d/%08x, 0x%08x)\r\n",
; 228  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 229  :     ));

  00010	e59f9100	 ldr         r9, [pc, #0x100]
  00014	e3a08000	 mov         r8, #0
  00018	e5993440	 ldr         r3, [r9, #0x440]
  0001c	e3130a01	 tst         r3, #1, 20
  00020	0a000029	 beq         |$LN19@OALKitlDev|
  00024	e5963008	 ldr         r3, [r6, #8]
  00028	e5962004	 ldr         r2, [r6, #4]
  0002c	e5961000	 ldr         r1, [r6]
  00030	e59f00dc	 ldr         r0, [pc, #0xDC]
  00034	e58d7000	 str         r7, [sp]
  00038	eb000000	 bl          KITLOutputDebugString

; 230  : 
; 231  :     // Look for driver in list
; 232  :     while (pDevice->name != NULL && !rc) {

  0003c	ea000022	 b           |$LN19@OALKitlDev|
  00040		 |$LL10@OALKitlDev|

; 233  : 
; 234  :         // Is it our device? Then move
; 235  :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00040	e5962000	 ldr         r2, [r6]
  00044	e5973004	 ldr         r3, [r7, #4]
  00048	e1520003	 cmp         r2, r3

; 236  :             // Move to next driver
; 237  :             pDevice++;
; 238  :             continue;

  0004c	1a00001d	 bne         |$LN20@OALKitlDev|

; 239  :         }            
; 240  : 
; 241  :         // Identify device and read its address/interrupt depends on bus type
; 242  :         switch (pDevLoc->IfcType) {

  00050	e3520000	 cmp         r2, #0
  00054	0a000017	 beq         |$LN5@OALKitlDev|
  00058	e3520005	 cmp         r2, #5
  0005c	1a000019	 bne         |$LN20@OALKitlDev|

; 246  :             rc = TRUE;
; 247  :             break;
; 248  : #ifdef KITL_PCI            
; 249  :         case PCIBus:
; 250  :             {
; 251  :                 UINT32 id;
; 252  :                 OAL_PCI_LOCATION pciLoc;
; 253  : 
; 254  :                 pciLoc = *(OAL_PCI_LOCATION*)&pDevLoc->LogicalLoc;

  00060	e5961008	 ldr         r1, [r6, #8]

; 255  :                 id = OALPCIGetId(pDevLoc->BusNumber, pciLoc);

  00064	e5960004	 ldr         r0, [r6, #4]
  00068	e58d1010	 str         r1, [sp, #0x10]
  0006c	eb000000	 bl          OALPCIGetId

; 256  :                 if (id != pDevice->id) break;

  00070	e5973008	 ldr         r3, [r7, #8]
  00074	e1500003	 cmp         r0, r3
  00078	1a000012	 bne         |$LN20@OALKitlDev|

; 257  :                 OALLogPrintf(
; 258  :                     name, sizeof(name)/sizeof(WCHAR),
; 259  :                     L"%s @ id %d bus %d dev %d fnc %d",
; 260  :                     pDevice->name, pDevLoc->BusNumber, pciLoc.bus, pciLoc.dev,
; 261  :                     pciLoc.fnc
; 262  :                 );

  0007c	e59f808c	 ldr         r8, [pc, #0x8C]
  00080	e5dde010	 ldrb        lr, [sp, #0x10]
  00084	e5dd4011	 ldrb        r4, [sp, #0x11]
  00088	e5dd5012	 ldrb        r5, [sp, #0x12]
  0008c	e5966004	 ldr         r6, [r6, #4]
  00090	e5973000	 ldr         r3, [r7]
  00094	e59f2070	 ldr         r2, [pc, #0x70]
  00098	e1a00008	 mov         r0, r8
  0009c	e3a01040	 mov         r1, #0x40
  000a0	e58de00c	 str         lr, [sp, #0xC]
  000a4	e58d4008	 str         r4, [sp, #8]
  000a8	e58d5004	 str         r5, [sp, #4]
  000ac	e58d6000	 str         r6, [sp]
  000b0	eb000000	 bl          OALLogPrintf

; 263  :                 pName = name;
; 264  :                 rc = TRUE;
; 265  :             }                
; 266  :             break;

  000b4	ea000009	 b           |$LN23@OALKitlDev|
  000b8		 |$LN5@OALKitlDev|

; 243  :         case Internal:
; 244  :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  000b8	e5962008	 ldr         r2, [r6, #8]
  000bc	e5973008	 ldr         r3, [r7, #8]
  000c0	e1520003	 cmp         r2, r3
  000c4	0a000004	 beq         |$LN22@OALKitlDev|
  000c8		 |$LN20@OALKitlDev|

; 267  : #endif
; 268  :         }
; 269  : 
; 270  :         // If we don't identify device skip it
; 271  :         if (!rc) {
; 272  :             pDevice++;

  000c8	e2877018	 add         r7, r7, #0x18
  000cc		 |$LN19@OALKitlDev|

; 230  : 
; 231  :     // Look for driver in list
; 232  :     while (pDevice->name != NULL && !rc) {

  000cc	e5973000	 ldr         r3, [r7]
  000d0	e3530000	 cmp         r3, #0
  000d4	1affffd9	 bne         |$LL10@OALKitlDev|
  000d8	ea000000	 b           |$LN23@OALKitlDev|
  000dc		 |$LN22@OALKitlDev|

; 245  :             pName = pDevice->name;

  000dc	e5978000	 ldr         r8, [r7]
  000e0		 |$LN23@OALKitlDev|

; 222  :     BOOL rc = FALSE;
; 223  :     static WCHAR name[64];
; 224  :     LPCWSTR pName = NULL;
; 225  :     
; 226  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 227  :         "+OALKitlDeviceName(%d/%d/%08x, 0x%08x)\r\n",
; 228  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 229  :     ));

  000e0	e5993440	 ldr         r3, [r9, #0x440]

; 273  :             continue;
; 274  :         }
; 275  :             
; 276  :         // We get all we need
; 277  :         break;
; 278  :     }
; 279  : 
; 280  : 
; 281  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 282  :         "-OALKitlDeviceName(name = 0x%08x('%s')\r\n", pName, pName
; 283  :     ));

  000e4	e3130a01	 tst         r3, #1, 20
  000e8	159f0018	 ldrne       r0, [pc, #0x18]
  000ec	11a02008	 movne       r2, r8
  000f0	11a01008	 movne       r1, r8
  000f4	1b000000	 blne        KITLOutputDebugString

; 284  :     return pName;
; 285  : }

  000f8	e1a00008	 mov         r0, r8
  000fc	e28dd014	 add         sp, sp, #0x14
  00100	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00104	e12fff1e	 bx          lr
  00108		 |$LN28@OALKitlDev|
  00108		 |$LN29@OALKitlDev|
  00108	00000000	 DCD         |??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@|
  0010c		 |$LN30@OALKitlDev|
  0010c	00000000	 DCD         |??_C@_1EA@MHLKLHLH@?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAi?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAe?$AAv?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAn?$AAc?$AA?5?$AA?$CF?$AAd?$AA?$AA@|
  00110		 |$LN31@OALKitlDev|
  00110	00000000	 DCD         |?name@?1??OALKitlDeviceName@@9@9|
  00114		 |$LN32@OALKitlDev|
  00114	00000000	 DCD         |??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  00118		 |$LN33@OALKitlDev|
  00118	00000000	 DCD         |dpCurSettings|
  0011c		 |$M43370|

			 ENDP  ; |OALKitlDeviceName|

	EXPORT	|OALKitlDeviceType|
	EXPORT	|??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T43404| DCD	|$LN28@OALKitlDev@2|
	DCD	0x40003402

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"OALKitlDeviceType(type = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlDeviceType(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlDeviceType| PROC

; 294  : ) {

  00000		 |$LN28@OALKitlDev@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43401|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0

; 295  :     BOOL rc = FALSE;
; 296  :     OAL_KITL_TYPE type = OAL_KITL_TYPE_NONE;
; 297  :     
; 298  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 299  :         "+OALKitlDeviceType(%d/%d/%08x, 0x%08x)\r\n",
; 300  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 301  :     ));

  00010	e59f70b4	 ldr         r7, [pc, #0xB4]
  00014	e3a05000	 mov         r5, #0
  00018	e5973440	 ldr         r3, [r7, #0x440]
  0001c	e3130a01	 tst         r3, #1, 20
  00020	0a000019	 beq         |$LN19@OALKitlDev@2|
  00024	e5963008	 ldr         r3, [r6, #8]
  00028	e5962004	 ldr         r2, [r6, #4]
  0002c	e5961000	 ldr         r1, [r6]
  00030	e59f0090	 ldr         r0, [pc, #0x90]
  00034	e58d4000	 str         r4, [sp]
  00038	eb000000	 bl          KITLOutputDebugString

; 302  : 
; 303  :     // Look for driver in list
; 304  :     while (pDevice->name != NULL && !rc) {

  0003c	ea000012	 b           |$LN19@OALKitlDev@2|
  00040		 |$LL10@OALKitlDev@2|

; 305  : 
; 306  :         // Is it our device? Then move
; 307  :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00040	e5962000	 ldr         r2, [r6]
  00044	e5943004	 ldr         r3, [r4, #4]
  00048	e1520003	 cmp         r2, r3

; 308  :             // Move to next driver
; 309  :             pDevice++;
; 310  :             continue;

  0004c	1a00000d	 bne         |$LN20@OALKitlDev@2|

; 311  :         }            
; 312  : 
; 313  :         // Identify device and read its address/interrupt depends on bus type
; 314  :         switch (pDevLoc->IfcType) {

  00050	e3520000	 cmp         r2, #0
  00054	0a000007	 beq         |$LN5@OALKitlDev@2|
  00058	e3520005	 cmp         r2, #5
  0005c	1a000009	 bne         |$LN20@OALKitlDev@2|

; 318  :             rc = TRUE;
; 319  :             break;
; 320  : #ifdef KITL_PCI            
; 321  :         case PCIBus:
; 322  :             {
; 323  :                 UINT32 id;
; 324  :                 id = OALPCIGetId(
; 325  :                     pDevLoc->BusNumber, *(OAL_PCI_LOCATION*)&pDevLoc->LogicalLoc
; 326  :                 );

  00060	e5961008	 ldr         r1, [r6, #8]
  00064	e5960004	 ldr         r0, [r6, #4]
  00068	eb000000	 bl          OALPCIGetId

; 327  :                 if (id != pDevice->id) break;

  0006c	e5943008	 ldr         r3, [r4, #8]
  00070	e1500003	 cmp         r0, r3
  00074	ea000002	 b           |$LN25@OALKitlDev@2|
  00078		 |$LN5@OALKitlDev@2|

; 315  :         case Internal:
; 316  :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  00078	e5962008	 ldr         r2, [r6, #8]
  0007c	e5943008	 ldr         r3, [r4, #8]
  00080	e1520003	 cmp         r2, r3
  00084		 |$LN25@OALKitlDev@2|
  00084	0a000004	 beq         |$LN22@OALKitlDev@2|
  00088		 |$LN20@OALKitlDev@2|

; 328  :                 type = pDevice->type;
; 329  :                 rc = TRUE;
; 330  :             }                
; 331  :             break;
; 332  : #endif
; 333  :         }
; 334  : 
; 335  :         // If we don't identify device skip it
; 336  :         if (!rc) {
; 337  :             pDevice++;

  00088	e2844018	 add         r4, r4, #0x18
  0008c		 |$LN19@OALKitlDev@2|

; 302  : 
; 303  :     // Look for driver in list
; 304  :     while (pDevice->name != NULL && !rc) {

  0008c	e5943000	 ldr         r3, [r4]
  00090	e3530000	 cmp         r3, #0
  00094	1affffe9	 bne         |$LL10@OALKitlDev@2|
  00098	ea000000	 b           |$LN23@OALKitlDev@2|
  0009c		 |$LN22@OALKitlDev@2|

; 317  :             type = pDevice->type;

  0009c	e5945010	 ldr         r5, [r4, #0x10]
  000a0		 |$LN23@OALKitlDev@2|

; 295  :     BOOL rc = FALSE;
; 296  :     OAL_KITL_TYPE type = OAL_KITL_TYPE_NONE;
; 297  :     
; 298  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 299  :         "+OALKitlDeviceType(%d/%d/%08x, 0x%08x)\r\n",
; 300  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 301  :     ));

  000a0	e5973440	 ldr         r3, [r7, #0x440]

; 338  :             continue;
; 339  :         }
; 340  :             
; 341  :         // We get all we need
; 342  :         break;
; 343  :     }
; 344  : 
; 345  : 
; 346  :     KITL_RETAILMSG(ZONE_KITL_OAL, ("-OALKitlDeviceType(type = %d)\r\n", type));

  000a4	e3130a01	 tst         r3, #1, 20
  000a8	159f0014	 ldrne       r0, [pc, #0x14]
  000ac	11a01005	 movne       r1, r5
  000b0	1b000000	 blne        KITLOutputDebugString

; 347  :     return type;
; 348  : }

  000b4	e1a00005	 mov         r0, r5
  000b8	e28dd004	 add         sp, sp, #4
  000bc	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000c0	e12fff1e	 bx          lr
  000c4		 |$LN29@OALKitlDev@2|
  000c4		 |$LN30@OALKitlDev@2|
  000c4	00000000	 DCD         |??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  000c8		 |$LN31@OALKitlDev@2|
  000c8	00000000	 DCD         |??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  000cc		 |$LN32@OALKitlDev@2|
  000cc	00000000	 DCD         |dpCurSettings|
  000d0		 |$M43402|

			 ENDP  ; |OALKitlDeviceType|

	END
