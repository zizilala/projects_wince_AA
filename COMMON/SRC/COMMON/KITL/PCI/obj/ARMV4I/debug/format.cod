; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\KITL\format.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1BI@FCMLLAGN@?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALKitlIPtoString|
	IMPORT	|OALLogPrintf|

  00000			 AREA	 |.bss|, NOINIT
|?szBuffer@?1??OALKitlIPtoString@@9@9| % 0x20		; `OALKitlIPtoString'::`2'::szBuffer

  00000			 AREA	 |.pdata|, PDATA
|$T43060| DCD	|$LN5@OALKitlIPt|
	DCD	0x40001e04
; File c:\wince600\platform\common\src\common\kitl\format.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@FCMLLAGN@?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?$AA@| DCB "%"
	DCB	0x0, "d", 0x0, ".", 0x0, "%", 0x0, "d", 0x0, ".", 0x0, "%"
	DCB	0x0, "d", 0x0, ".", 0x0, "%", 0x0, "d", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlIPtoString| PROC

; 24   : {

  00000		 |$LN5@OALKitlIPt|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M43057|

; 25   :     static WCHAR szBuffer[16];
; 26   : 
; 27   :     OALLogPrintf(
; 28   :         szBuffer, sizeof(szBuffer)/sizeof(WCHAR), L"%d.%d.%d.%d",
; 29   :         (UINT8)ip4, (UINT8)(ip4 >> 8), (UINT8)(ip4 >> 16), (UINT8)(ip4 >> 24)
; 30   :     );

  00010	e59d3024	 ldr         r3, [sp, #0x24]
  00014	e1a03c23	 mov         r3, r3, lsr #24
  00018	e20330ff	 and         r3, r3, #0xFF
  0001c	e58d3008	 str         r3, [sp, #8]
  00020	e59d3024	 ldr         r3, [sp, #0x24]
  00024	e1a03823	 mov         r3, r3, lsr #16
  00028	e20330ff	 and         r3, r3, #0xFF
  0002c	e58d3004	 str         r3, [sp, #4]
  00030	e59d3024	 ldr         r3, [sp, #0x24]
  00034	e1a03423	 mov         r3, r3, lsr #8
  00038	e20330ff	 and         r3, r3, #0xFF
  0003c	e58d3000	 str         r3, [sp]
  00040	e59d3024	 ldr         r3, [sp, #0x24]
  00044	e20330ff	 and         r3, r3, #0xFF
  00048	e59f2024	 ldr         r2, [pc, #0x24]
  0004c	e3a01010	 mov         r1, #0x10
  00050	e59f0018	 ldr         r0, [pc, #0x18]
  00054	eb000000	 bl          OALLogPrintf

; 31   :     return szBuffer;

  00058	e59f3010	 ldr         r3, [pc, #0x10]
  0005c	e58d3018	 str         r3, [sp, #0x18]

; 32   : }

  00060	e59d0018	 ldr         r0, [sp, #0x18]
  00064	e28dd01c	 add         sp, sp, #0x1C
  00068	e89d6000	 ldmia       sp, {sp, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$LN6@OALKitlIPt|
  00070		 |$LN7@OALKitlIPt|
  00070	00000000	 DCD         |?szBuffer@?1??OALKitlIPtoString@@9@9|
  00074		 |$LN8@OALKitlIPt|
  00074	00000000	 DCD         |??_C@_1BI@FCMLLAGN@?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?4?$AA?$CF?$AAd?$AA?$AA@|
  00078		 |$M43058|

			 ENDP  ; |OALKitlIPtoString|

	EXPORT	|??_C@_1DM@BKFFFBIH@?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALKitlMACtoString|

  00020			 AREA	 |.bss|, NOINIT
|?szBuffer@?1??OALKitlMACtoString@@9@9| % 0x24		; `OALKitlMACtoString'::`2'::szBuffer

  00008			 AREA	 |.pdata|, PDATA
|$T43074| DCD	|$LN5@OALKitlMAC|
	DCD	0x40002b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@BKFFFBIH@?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AA@| DCB "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x"
	DCB	0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, ":"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00078			 AREA	 |.text|, CODE, ARM

  00078		 |OALKitlMACtoString| PROC

; 40   : {

  00078		 |$LN5@OALKitlMAC|
  00078	e1a0c00d	 mov         r12, sp
  0007c	e92d0001	 stmdb       sp!, {r0}
  00080	e92d5000	 stmdb       sp!, {r12, lr}
  00084	e24dd02c	 sub         sp, sp, #0x2C
  00088		 |$M43071|

; 41   :     static WCHAR szBuffer[18];
; 42   : 
; 43   :     OALLogPrintf(
; 44   :         szBuffer, sizeof(szBuffer)/sizeof(WCHAR), 
; 45   :         L"%02x:%02x:%02x:%02x:%02x:%02x", mac[0]&0xFF, mac[0]>>8, mac[1]&0xFF,
; 46   :         mac[1]>>8, mac[2]&0xFF, mac[2]>>8
; 47   :     );

  00088	e59d3034	 ldr         r3, [sp, #0x34]
  0008c	e2833004	 add         r3, r3, #4
  00090	e1d330b0	 ldrh        r3, [r3]
  00094	e1a03443	 mov         r3, r3, asr #8
  00098	e58d3010	 str         r3, [sp, #0x10]
  0009c	e59d3034	 ldr         r3, [sp, #0x34]
  000a0	e2833004	 add         r3, r3, #4
  000a4	e1d330b0	 ldrh        r3, [r3]
  000a8	e20330ff	 and         r3, r3, #0xFF
  000ac	e58d300c	 str         r3, [sp, #0xC]
  000b0	e59d3034	 ldr         r3, [sp, #0x34]
  000b4	e2833002	 add         r3, r3, #2
  000b8	e1d330b0	 ldrh        r3, [r3]
  000bc	e1a03443	 mov         r3, r3, asr #8
  000c0	e58d3008	 str         r3, [sp, #8]
  000c4	e59d3034	 ldr         r3, [sp, #0x34]
  000c8	e2833002	 add         r3, r3, #2
  000cc	e1d330b0	 ldrh        r3, [r3]
  000d0	e20330ff	 and         r3, r3, #0xFF
  000d4	e58d3004	 str         r3, [sp, #4]
  000d8	e59d3034	 ldr         r3, [sp, #0x34]
  000dc	e1d330b0	 ldrh        r3, [r3]
  000e0	e1a03443	 mov         r3, r3, asr #8
  000e4	e58d3000	 str         r3, [sp]
  000e8	e59d3034	 ldr         r3, [sp, #0x34]
  000ec	e1d330b0	 ldrh        r3, [r3]
  000f0	e20330ff	 and         r3, r3, #0xFF
  000f4	e59f2024	 ldr         r2, [pc, #0x24]
  000f8	e3a01012	 mov         r1, #0x12
  000fc	e59f0018	 ldr         r0, [pc, #0x18]
  00100	eb000000	 bl          OALLogPrintf

; 48   :     return szBuffer;

  00104	e59f3010	 ldr         r3, [pc, #0x10]
  00108	e58d3028	 str         r3, [sp, #0x28]

; 49   : }    

  0010c	e59d0028	 ldr         r0, [sp, #0x28]
  00110	e28dd02c	 add         sp, sp, #0x2C
  00114	e89d6000	 ldmia       sp, {sp, lr}
  00118	e12fff1e	 bx          lr
  0011c		 |$LN6@OALKitlMAC|
  0011c		 |$LN7@OALKitlMAC|
  0011c	00000000	 DCD         |?szBuffer@?1??OALKitlMACtoString@@9@9|
  00120		 |$LN8@OALKitlMAC|
  00120	00000000	 DCD         |??_C@_1DM@BKFFFBIH@?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AA@|
  00124		 |$M43072|

			 ENDP  ; |OALKitlMACtoString|

	EXPORT	|OALKitlStringToIP|

  00010			 AREA	 |.pdata|, PDATA
|$T43085| DCD	|$LN16@OALKitlStr|
	DCD	0x40005304
; Function compile flags: /Odtp

  00124			 AREA	 |.text|, CODE, ARM

  00124		 |OALKitlStringToIP| PROC

; 57   : {

  00124		 |$LN16@OALKitlStr|
  00124	e1a0c00d	 mov         r12, sp
  00128	e92d0001	 stmdb       sp!, {r0}
  0012c	e92d5000	 stmdb       sp!, {r12, lr}
  00130	e24dd018	 sub         sp, sp, #0x18
  00134		 |$M43082|

; 58   :     UINT32 ip = 0, count, part;

  00134	e3a03000	 mov         r3, #0
  00138	e58d300c	 str         r3, [sp, #0xC]

; 59   :     LPCWSTR psz;
; 60   :     
; 61   :     // Replace the dots with NULL terminators
; 62   :     psz = szIP;

  0013c	e59d3020	 ldr         r3, [sp, #0x20]
  00140	e58d3004	 str         r3, [sp, #4]

; 63   :     count = 0;

  00144	e3a03000	 mov         r3, #0
  00148	e58d3000	 str         r3, [sp]

; 64   :     part = 0;

  0014c	e3a03000	 mov         r3, #0
  00150	e58d3008	 str         r3, [sp, #8]
  00154		 |$LN9@OALKitlStr|

; 65   :     while (count < 4) {

  00154	e59d3000	 ldr         r3, [sp]
  00158	e3530004	 cmp         r3, #4
  0015c	2a000035	 bcs         |$LN8@OALKitlStr|

; 66   :         if (*psz == L'.' || *psz == L'\0') {

  00160	e59d3004	 ldr         r3, [sp, #4]
  00164	e1d330b0	 ldrh        r3, [r3]
  00168	e353002e	 cmp         r3, #0x2E
  0016c	0a000003	 beq         |$LN6@OALKitlStr|
  00170	e59d3004	 ldr         r3, [sp, #4]
  00174	e1d330b0	 ldrh        r3, [r3]
  00178	e3530000	 cmp         r3, #0
  0017c	1a00000c	 bne         |$LN7@OALKitlStr|
  00180		 |$LN6@OALKitlStr|

; 67   :             ip |= part << (count << 3);

  00180	e59d3000	 ldr         r3, [sp]
  00184	e1a02183	 mov         r2, r3, lsl #3
  00188	e59d3008	 ldr         r3, [sp, #8]
  0018c	e1a02213	 mov         r2, r3, lsl r2
  00190	e59d300c	 ldr         r3, [sp, #0xC]
  00194	e1833002	 orr         r3, r3, r2
  00198	e58d300c	 str         r3, [sp, #0xC]

; 68   :             part = 0;

  0019c	e3a03000	 mov         r3, #0
  001a0	e58d3008	 str         r3, [sp, #8]

; 69   :             count++;

  001a4	e59d3000	 ldr         r3, [sp]
  001a8	e2833001	 add         r3, r3, #1
  001ac	e58d3000	 str         r3, [sp]
  001b0	ea000017	 b           |$LN5@OALKitlStr|
  001b4		 |$LN7@OALKitlStr|

; 70   :         } else if (*psz >= L'0' && *psz <= L'9') {

  001b4	e59d3004	 ldr         r3, [sp, #4]
  001b8	e1d330b0	 ldrh        r3, [r3]
  001bc	e3530030	 cmp         r3, #0x30
  001c0	ba000012	 blt         |$LN4@OALKitlStr|
  001c4	e59d3004	 ldr         r3, [sp, #4]
  001c8	e1d330b0	 ldrh        r3, [r3]
  001cc	e3530039	 cmp         r3, #0x39
  001d0	ca00000e	 bgt         |$LN4@OALKitlStr|

; 71   :             part = part * 10 + (*psz - L'0');

  001d4	e59d1008	 ldr         r1, [sp, #8]
  001d8	e3a0300a	 mov         r3, #0xA
  001dc	e0020391	 mul         r2, r1, r3
  001e0	e59d3004	 ldr         r3, [sp, #4]
  001e4	e1d330b0	 ldrh        r3, [r3]
  001e8	e2433030	 sub         r3, r3, #0x30
  001ec	e0823003	 add         r3, r2, r3
  001f0	e58d3008	 str         r3, [sp, #8]

; 72   :             if (part > 255) {

  001f4	e59d3008	 ldr         r3, [sp, #8]
  001f8	e35300ff	 cmp         r3, #0xFF
  001fc	9a000002	 bls         |$LN3@OALKitlStr|

; 73   :                 ip = 0;

  00200	e3a03000	 mov         r3, #0
  00204	e58d300c	 str         r3, [sp, #0xC]

; 74   :                 break;

  00208	ea00000a	 b           |$LN8@OALKitlStr|
  0020c		 |$LN3@OALKitlStr|

; 75   :             }
; 76   :         } else {

  0020c	ea000000	 b           |$LN2@OALKitlStr|
  00210		 |$LN4@OALKitlStr|

; 77   :             break;

  00210	ea000008	 b           |$LN8@OALKitlStr|
  00214		 |$LN2@OALKitlStr|
  00214		 |$LN5@OALKitlStr|

; 78   :         }
; 79   :         if (*psz == L'\0') break;

  00214	e59d3004	 ldr         r3, [sp, #4]
  00218	e1d330b0	 ldrh        r3, [r3]
  0021c	e3530000	 cmp         r3, #0
  00220	1a000000	 bne         |$LN1@OALKitlStr|
  00224	ea000003	 b           |$LN8@OALKitlStr|
  00228		 |$LN1@OALKitlStr|

; 80   :         psz++;

  00228	e59d3004	 ldr         r3, [sp, #4]
  0022c	e2833002	 add         r3, r3, #2
  00230	e58d3004	 str         r3, [sp, #4]

; 81   :     }

  00234	eaffffc6	 b           |$LN9@OALKitlStr|
  00238		 |$LN8@OALKitlStr|

; 82   :     return count >= 4 ? ip : 0;

  00238	e59d3000	 ldr         r3, [sp]
  0023c	e3530004	 cmp         r3, #4
  00240	3a000002	 bcc         |$LN12@OALKitlStr|
  00244	e59d300c	 ldr         r3, [sp, #0xC]
  00248	e58d3014	 str         r3, [sp, #0x14]
  0024c	ea000001	 b           |$LN13@OALKitlStr|
  00250		 |$LN12@OALKitlStr|
  00250	e3a03000	 mov         r3, #0
  00254	e58d3014	 str         r3, [sp, #0x14]
  00258		 |$LN13@OALKitlStr|
  00258	e59d3014	 ldr         r3, [sp, #0x14]
  0025c	e58d3010	 str         r3, [sp, #0x10]

; 83   : } 

  00260	e59d0010	 ldr         r0, [sp, #0x10]
  00264	e28dd018	 add         sp, sp, #0x18
  00268	e89d6000	 ldmia       sp, {sp, lr}
  0026c	e12fff1e	 bx          lr
  00270		 |$M43083|

			 ENDP  ; |OALKitlStringToIP|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|OALKitlStringToMAC|
	IMPORT	|memset|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00018			 AREA	 |.pdata|, PDATA
|$T43098| DCD	|$LN19@OALKitlStr@2|
	DCD	0xc000a004

  00000			 AREA	 |.xdata|, DATA
|$T43094| DCD	0xffffffe4
; Function compile flags: /Odtp

  00270			 AREA	 |.text|, CODE, ARM

  00270	00000000	 DCD         |__GSHandlerCheck|
  00274	00000000	 DCD         |$T43094|

  00278		 |OALKitlStringToMAC| PROC

; 91   : {

  00278		 |$LN19@OALKitlStr@2|
  00278	e1a0c00d	 mov         r12, sp
  0027c	e92d0003	 stmdb       sp!, {r0, r1}
  00280	e92d5000	 stmdb       sp!, {r12, lr}
  00284	e24dd024	 sub         sp, sp, #0x24
  00288		 |$M43095|
  00288	e59f3264	 ldr         r3, [pc, #0x264]
  0028c	e5933000	 ldr         r3, [r3]
  00290	e58d3018	 str         r3, [sp, #0x18]

; 92   :     INT32 i, j;
; 93   :     LPCWSTR pos;
; 94   :     WCHAR ch;
; 95   :     UINT8 m[6];
; 96   : 
; 97   :     // Convert string to MAC address
; 98   :     memset(m, 0, sizeof(m));

  00294	e3a02006	 mov         r2, #6
  00298	e3a01000	 mov         r1, #0
  0029c	e28d0008	 add         r0, sp, #8
  002a0	eb000000	 bl          memset

; 99   :     i = j = 0;

  002a4	e3a03000	 mov         r3, #0
  002a8	e58d3014	 str         r3, [sp, #0x14]
  002ac	e59d3014	 ldr         r3, [sp, #0x14]
  002b0	e58d3000	 str         r3, [sp]

; 100  :     pos = szMAC;

  002b4	e59d302c	 ldr         r3, [sp, #0x2C]
  002b8	e58d3010	 str         r3, [sp, #0x10]
  002bc		 |$LN12@OALKitlStr@2|

; 101  :     while (i < 6) {

  002bc	e59d3000	 ldr         r3, [sp]
  002c0	e3530006	 cmp         r3, #6
  002c4	aa00005f	 bge         |$LN11@OALKitlStr@2|

; 102  :         ch = *pos;

  002c8	e59d3010	 ldr         r3, [sp, #0x10]
  002cc	e1d330b0	 ldrh        r3, [r3]
  002d0	e1cd30b4	 strh        r3, [sp, #4]

; 103  :         if (ch == L'-' || ch == L':' || ch == L'.') {

  002d4	e1dd30b4	 ldrh        r3, [sp, #4]
  002d8	e353002d	 cmp         r3, #0x2D
  002dc	0a000005	 beq         |$LN9@OALKitlStr@2|
  002e0	e1dd30b4	 ldrh        r3, [sp, #4]
  002e4	e353003a	 cmp         r3, #0x3A
  002e8	0a000002	 beq         |$LN9@OALKitlStr@2|
  002ec	e1dd30b4	 ldrh        r3, [sp, #4]
  002f0	e353002e	 cmp         r3, #0x2E
  002f4	1a000005	 bne         |$LN10@OALKitlStr@2|
  002f8		 |$LN9@OALKitlStr@2|

; 104  :             i++;

  002f8	e59d3000	 ldr         r3, [sp]
  002fc	e2833001	 add         r3, r3, #1
  00300	e58d3000	 str         r3, [sp]

; 105  :             j = 0;

  00304	e3a03000	 mov         r3, #0
  00308	e58d3014	 str         r3, [sp, #0x14]

; 106  :         } else {

  0030c	ea000049	 b           |$LN8@OALKitlStr@2|
  00310		 |$LN10@OALKitlStr@2|

; 107  :             if (j >= 2) {

  00310	e59d3014	 ldr         r3, [sp, #0x14]
  00314	e3530002	 cmp         r3, #2
  00318	ba000004	 blt         |$LN7@OALKitlStr@2|

; 108  :                 i++;

  0031c	e59d3000	 ldr         r3, [sp]
  00320	e2833001	 add         r3, r3, #1
  00324	e58d3000	 str         r3, [sp]

; 109  :                 j = 0;

  00328	e3a03000	 mov         r3, #0
  0032c	e58d3014	 str         r3, [sp, #0x14]
  00330		 |$LN7@OALKitlStr@2|

; 110  :             }
; 111  :             if (ch >= L'0' && ch <= L'9') {

  00330	e1dd30b4	 ldrh        r3, [sp, #4]
  00334	e3530030	 cmp         r3, #0x30
  00338	ba000010	 blt         |$LN6@OALKitlStr@2|
  0033c	e1dd30b4	 ldrh        r3, [sp, #4]
  00340	e3530039	 cmp         r3, #0x39
  00344	ca00000d	 bgt         |$LN6@OALKitlStr@2|

; 112  :                 m[i] = (m[i] << 4) + (ch - L'0');

  00348	e28d2008	 add         r2, sp, #8
  0034c	e59d3000	 ldr         r3, [sp]
  00350	e0823003	 add         r3, r2, r3
  00354	e5d33000	 ldrb        r3, [r3]
  00358	e1a02203	 mov         r2, r3, lsl #4
  0035c	e1dd30b4	 ldrh        r3, [sp, #4]
  00360	e2433030	 sub         r3, r3, #0x30
  00364	e0821003	 add         r1, r2, r3
  00368	e28d2008	 add         r2, sp, #8
  0036c	e59d3000	 ldr         r3, [sp]
  00370	e0822003	 add         r2, r2, r3
  00374	e20130ff	 and         r3, r1, #0xFF
  00378	e5c23000	 strb        r3, [r2]
  0037c	ea00002a	 b           |$LN5@OALKitlStr@2|
  00380		 |$LN6@OALKitlStr@2|

; 113  :             } else if (ch >= L'a' && ch <= L'f') {

  00380	e1dd30b4	 ldrh        r3, [sp, #4]
  00384	e3530061	 cmp         r3, #0x61
  00388	ba000011	 blt         |$LN4@OALKitlStr@2|
  0038c	e1dd30b4	 ldrh        r3, [sp, #4]
  00390	e3530066	 cmp         r3, #0x66
  00394	ca00000e	 bgt         |$LN4@OALKitlStr@2|

; 114  :                 m[i] = (m[i] << 4) + (ch - L'a' + 10);

  00398	e28d2008	 add         r2, sp, #8
  0039c	e59d3000	 ldr         r3, [sp]
  003a0	e0823003	 add         r3, r2, r3
  003a4	e5d33000	 ldrb        r3, [r3]
  003a8	e1a02203	 mov         r2, r3, lsl #4
  003ac	e1dd30b4	 ldrh        r3, [sp, #4]
  003b0	e2433061	 sub         r3, r3, #0x61
  003b4	e283300a	 add         r3, r3, #0xA
  003b8	e0821003	 add         r1, r2, r3
  003bc	e28d2008	 add         r2, sp, #8
  003c0	e59d3000	 ldr         r3, [sp]
  003c4	e0822003	 add         r2, r2, r3
  003c8	e20130ff	 and         r3, r1, #0xFF
  003cc	e5c23000	 strb        r3, [r2]
  003d0	ea000015	 b           |$LN3@OALKitlStr@2|
  003d4		 |$LN4@OALKitlStr@2|

; 115  :             } else if (ch >= 'A' && ch <= 'F') {

  003d4	e1dd30b4	 ldrh        r3, [sp, #4]
  003d8	e3530041	 cmp         r3, #0x41
  003dc	ba000011	 blt         |$LN2@OALKitlStr@2|
  003e0	e1dd30b4	 ldrh        r3, [sp, #4]
  003e4	e3530046	 cmp         r3, #0x46
  003e8	ca00000e	 bgt         |$LN2@OALKitlStr@2|

; 116  :                 m[i] = (m[i] << 4) + (ch - 'A' + 10);

  003ec	e28d2008	 add         r2, sp, #8
  003f0	e59d3000	 ldr         r3, [sp]
  003f4	e0823003	 add         r3, r2, r3
  003f8	e5d33000	 ldrb        r3, [r3]
  003fc	e1a02203	 mov         r2, r3, lsl #4
  00400	e1dd30b4	 ldrh        r3, [sp, #4]
  00404	e2433041	 sub         r3, r3, #0x41
  00408	e283300a	 add         r3, r3, #0xA
  0040c	e0821003	 add         r1, r2, r3
  00410	e28d2008	 add         r2, sp, #8
  00414	e59d3000	 ldr         r3, [sp]
  00418	e0822003	 add         r2, r2, r3
  0041c	e20130ff	 and         r3, r1, #0xFF
  00420	e5c23000	 strb        r3, [r2]

; 117  :             } else {

  00424	ea000000	 b           |$LN1@OALKitlStr@2|
  00428		 |$LN2@OALKitlStr@2|

; 118  :                 break;

  00428	ea000006	 b           |$LN11@OALKitlStr@2|
  0042c		 |$LN1@OALKitlStr@2|
  0042c		 |$LN3@OALKitlStr@2|
  0042c		 |$LN5@OALKitlStr@2|

; 119  :             }
; 120  :             j++;

  0042c	e59d3014	 ldr         r3, [sp, #0x14]
  00430	e2833001	 add         r3, r3, #1
  00434	e58d3014	 str         r3, [sp, #0x14]
  00438		 |$LN8@OALKitlStr@2|

; 121  :         }
; 122  :         pos++;

  00438	e59d3010	 ldr         r3, [sp, #0x10]
  0043c	e2833002	 add         r3, r3, #2
  00440	e58d3010	 str         r3, [sp, #0x10]

; 123  :     }   

  00444	eaffff9c	 b           |$LN12@OALKitlStr@2|
  00448		 |$LN11@OALKitlStr@2|

; 124  : 
; 125  :     // Convert type
; 126  :     mac[0] = (m[1] << 8)|m[0];

  00448	e5dd3009	 ldrb        r3, [sp, #9]
  0044c	e1a02403	 mov         r2, r3, lsl #8
  00450	e5dd3008	 ldrb        r3, [sp, #8]
  00454	e1823003	 orr         r3, r2, r3
  00458	e1a02803	 mov         r2, r3, lsl #16
  0045c	e1a02822	 mov         r2, r2, lsr #16
  00460	e59d3030	 ldr         r3, [sp, #0x30]
  00464	e1c320b0	 strh        r2, [r3]

; 127  :     mac[1] = (m[3] << 8)|m[2];

  00468	e5dd300b	 ldrb        r3, [sp, #0xB]
  0046c	e1a02403	 mov         r2, r3, lsl #8
  00470	e5dd300a	 ldrb        r3, [sp, #0xA]
  00474	e1821003	 orr         r1, r2, r3
  00478	e59d3030	 ldr         r3, [sp, #0x30]
  0047c	e2832002	 add         r2, r3, #2
  00480	e1a03801	 mov         r3, r1, lsl #16
  00484	e1a03823	 mov         r3, r3, lsr #16
  00488	e1c230b0	 strh        r3, [r2]

; 128  :     mac[2] = (m[5] << 8)|m[4];

  0048c	e5dd300d	 ldrb        r3, [sp, #0xD]
  00490	e1a02403	 mov         r2, r3, lsl #8
  00494	e5dd300c	 ldrb        r3, [sp, #0xC]
  00498	e1821003	 orr         r1, r2, r3
  0049c	e59d3030	 ldr         r3, [sp, #0x30]
  004a0	e2832004	 add         r2, r3, #4
  004a4	e1a03801	 mov         r3, r1, lsl #16
  004a8	e1a03823	 mov         r3, r3, lsr #16
  004ac	e1c230b0	 strh        r3, [r2]

; 129  : 
; 130  :     return (*pos == L'\0');

  004b0	e59d3010	 ldr         r3, [sp, #0x10]
  004b4	e1d330b0	 ldrh        r3, [r3]
  004b8	e3530000	 cmp         r3, #0
  004bc	1a000002	 bne         |$LN15@OALKitlStr@2|
  004c0	e3a03001	 mov         r3, #1
  004c4	e58d3020	 str         r3, [sp, #0x20]
  004c8	ea000001	 b           |$LN16@OALKitlStr@2|
  004cc		 |$LN15@OALKitlStr@2|
  004cc	e3a03000	 mov         r3, #0
  004d0	e58d3020	 str         r3, [sp, #0x20]
  004d4		 |$LN16@OALKitlStr@2|
  004d4	e59d0018	 ldr         r0, [sp, #0x18]
  004d8	eb000000	 bl          __security_check_cookie
  004dc	e59d3020	 ldr         r3, [sp, #0x20]
  004e0	e58d301c	 str         r3, [sp, #0x1C]

; 131  : }

  004e4	e59d001c	 ldr         r0, [sp, #0x1C]
  004e8	e28dd024	 add         sp, sp, #0x24
  004ec	e89d6000	 ldmia       sp, {sp, lr}
  004f0	e12fff1e	 bx          lr
  004f4		 |$LN20@OALKitlStr@2|
  004f4		 |$LN21@OALKitlStr@2|
  004f4	00000000	 DCD         |__security_cookie|
  004f8		 |$M43096|

			 ENDP  ; |OALKitlStringToMAC|

	END
