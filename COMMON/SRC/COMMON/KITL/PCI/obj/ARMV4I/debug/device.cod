; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\COMMON\KITL\device.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	EXPORT	|OALKitlFindDevice|
	IMPORT	|NKPhysToVirt|
	IMPORT	|OEMIoControl|
	IMPORT	|KITLOutputDebugString|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T43240| DCD	|$LN33@OALKitlFin|
	DCD	0x40010c04
; File c:\wince600\platform\common\src\common\kitl\device.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@| DCB "-O"
	DCB	"ALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%"
	DCB	"08x)", 0xd, 0xa, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlFindDevice(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlFindDevice| PROC

; 65   : ) {

  00000		 |$LN33@OALKitlFin|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd07c	 sub         sp, sp, #0x7C
  00010		 |$M43237|

; 66   :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d300c	 str         r3, [sp, #0xC]

; 67   :     UINT32 space, id = 0xFFFFFFFF;

  00018	e3e03000	 mvn         r3, #0
  0001c	e58d3008	 str         r3, [sp, #8]

; 68   :     UINT64 address;
; 69   : #ifndef BUILDING_BOOTLOADER // Not building boot loader
; 70   :     OAL_DDK_PARAMS params;
; 71   : #endif
; 72   :     
; 73   :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 74   :         "+OALKitlFindDevice(%d/%d/%08x, 0x%08x)\r\n",
; 75   :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 76   :     ));

  00020	e59f33fc	 ldr         r3, [pc, #0x3FC]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130a01	 tst         r3, #1, 20
  0002c	0a00000e	 beq         |$LN22@OALKitlFin|
  00030	e59d3088	 ldr         r3, [sp, #0x88]
  00034	e58d3000	 str         r3, [sp]
  00038	e59d3084	 ldr         r3, [sp, #0x84]
  0003c	e2833008	 add         r3, r3, #8
  00040	e5933000	 ldr         r3, [r3]
  00044	e59d2084	 ldr         r2, [sp, #0x84]
  00048	e2822004	 add         r2, r2, #4
  0004c	e5922000	 ldr         r2, [r2]
  00050	e59d1084	 ldr         r1, [sp, #0x84]
  00054	e5911000	 ldr         r1, [r1]
  00058	e59f03cc	 ldr         r0, [pc, #0x3CC]
  0005c	eb000000	 bl          KITLOutputDebugString
  00060	e3a03001	 mov         r3, #1
  00064	e58d3064	 str         r3, [sp, #0x64]
  00068	ea000001	 b           |$LN23@OALKitlFin|
  0006c		 |$LN22@OALKitlFin|
  0006c	e3a03000	 mov         r3, #0
  00070	e58d3064	 str         r3, [sp, #0x64]
  00074		 |$LN23@OALKitlFin|
  00074		 |$LN30@OALKitlFin|
  00074		 |$LN29@OALKitlFin|
  00074		 |$LN28@OALKitlFin|
  00074		 |$LN19@OALKitlFin|

; 77   : 
; 78   :     // Look for driver in list
; 79   :     while (pDevice->name != NULL && !rc) {

  00074	e59d3088	 ldr         r3, [sp, #0x88]
  00078	e5933000	 ldr         r3, [r3]
  0007c	e3530000	 cmp         r3, #0
  00080	0a0000c1	 beq         |$LN18@OALKitlFin|
  00084	e59d300c	 ldr         r3, [sp, #0xC]
  00088	e3530000	 cmp         r3, #0
  0008c	1a0000be	 bne         |$LN18@OALKitlFin|

; 80   : 
; 81   :         // Is it our device? Then move
; 82   :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00090	e59d3088	 ldr         r3, [sp, #0x88]
  00094	e2831004	 add         r1, r3, #4
  00098	e59d3084	 ldr         r3, [sp, #0x84]
  0009c	e5932000	 ldr         r2, [r3]
  000a0	e5913000	 ldr         r3, [r1]
  000a4	e1520003	 cmp         r2, r3
  000a8	0a000003	 beq         |$LN17@OALKitlFin|

; 83   :             // Move to next driver
; 84   :             pDevice++;

  000ac	e59d3088	 ldr         r3, [sp, #0x88]
  000b0	e2833018	 add         r3, r3, #0x18
  000b4	e58d3088	 str         r3, [sp, #0x88]

; 85   :             continue;

  000b8	eaffffed	 b           |$LN19@OALKitlFin|
  000bc		 |$LN17@OALKitlFin|

; 86   :         }            
; 87   : 
; 88   :         // Identify device and read its address/interrupt depends on bus type
; 89   :         switch (pDevLoc->IfcType) {

  000bc	e59d3084	 ldr         r3, [sp, #0x84]
  000c0	e5933000	 ldr         r3, [r3]
  000c4	e58d3068	 str         r3, [sp, #0x68]
  000c8	e59d3068	 ldr         r3, [sp, #0x68]
  000cc	e3530000	 cmp         r3, #0
  000d0	0a000018	 beq         |$LN12@OALKitlFin|
  000d4	e59d3068	 ldr         r3, [sp, #0x68]
  000d8	e3530005	 cmp         r3, #5
  000dc	0a000027	 beq         |$LN10@OALKitlFin|
  000e0	e59d3068	 ldr         r3, [sp, #0x68]
  000e4	e3730001	 cmn         r3, #1
  000e8	0a000000	 beq         |$LN14@OALKitlFin|
  000ec	ea000032	 b           |$LN15@OALKitlFin|
  000f0		 |$LN14@OALKitlFin|

; 90   :         case InterfaceTypeUndefined:
; 91   :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  000f0	e59d3084	 ldr         r3, [sp, #0x84]
  000f4	e2832008	 add         r2, r3, #8
  000f8	e59d3088	 ldr         r3, [sp, #0x88]
  000fc	e2833008	 add         r3, r3, #8
  00100	e5922000	 ldr         r2, [r2]
  00104	e5933000	 ldr         r3, [r3]
  00108	e1520003	 cmp         r2, r3
  0010c	0a000000	 beq         |$LN13@OALKitlFin|
  00110	ea000029	 b           |$LN15@OALKitlFin|
  00114		 |$LN13@OALKitlFin|

; 92   :             address = pDevLoc->LogicalLoc;

  00114	e59d3084	 ldr         r3, [sp, #0x84]
  00118	e2833008	 add         r3, r3, #8
  0011c	e5933000	 ldr         r3, [r3]
  00120	e58d303c	 str         r3, [sp, #0x3C]
  00124	e3a03000	 mov         r3, #0
  00128	e58d3040	 str         r3, [sp, #0x40]

; 93   :             rc = TRUE;

  0012c	e3a03001	 mov         r3, #1
  00130	e58d300c	 str         r3, [sp, #0xC]

; 94   :             break;

  00134	ea000020	 b           |$LN15@OALKitlFin|
  00138		 |$LN12@OALKitlFin|

; 95   :         case Internal:
; 96   :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  00138	e59d3084	 ldr         r3, [sp, #0x84]
  0013c	e2832008	 add         r2, r3, #8
  00140	e59d3088	 ldr         r3, [sp, #0x88]
  00144	e2833008	 add         r3, r3, #8
  00148	e5922000	 ldr         r2, [r2]
  0014c	e5933000	 ldr         r3, [r3]
  00150	e1520003	 cmp         r2, r3
  00154	0a000000	 beq         |$LN11@OALKitlFin|
  00158	ea000017	 b           |$LN15@OALKitlFin|
  0015c		 |$LN11@OALKitlFin|

; 97   :             address = pDevLoc->LogicalLoc;

  0015c	e59d3084	 ldr         r3, [sp, #0x84]
  00160	e2833008	 add         r3, r3, #8
  00164	e5933000	 ldr         r3, [r3]
  00168	e58d303c	 str         r3, [sp, #0x3C]
  0016c	e3a03000	 mov         r3, #0
  00170	e58d3040	 str         r3, [sp, #0x40]

; 98   :             rc = TRUE;

  00174	e3a03001	 mov         r3, #1
  00178	e58d300c	 str         r3, [sp, #0xC]

; 99   :             break;

  0017c	ea00000e	 b           |$LN15@OALKitlFin|
  00180		 |$LN10@OALKitlFin|

; 100  : #ifdef KITL_PCI            
; 101  :         case PCIBus:
; 102  :             OALKitlPCIInfo(pDevLoc, &id, &address, &pDevLoc->Pin);

  00180	e59d3084	 ldr         r3, [sp, #0x84]
  00184	e2833010	 add         r3, r3, #0x10
  00188	e28d203c	 add         r2, sp, #0x3C
  0018c	e28d1008	 add         r1, sp, #8
  00190	e59d0084	 ldr         r0, [sp, #0x84]
  00194	eb000000	 bl          OALKitlPCIInfo

; 103  :             if (id != pDevice->id) break;

  00198	e59d3088	 ldr         r3, [sp, #0x88]
  0019c	e2833008	 add         r3, r3, #8
  001a0	e59d2008	 ldr         r2, [sp, #8]
  001a4	e5933000	 ldr         r3, [r3]
  001a8	e1520003	 cmp         r2, r3
  001ac	0a000000	 beq         |$LN9@OALKitlFin|
  001b0	ea000001	 b           |$LN15@OALKitlFin|
  001b4		 |$LN9@OALKitlFin|

; 104  :             rc = TRUE;

  001b4	e3a03001	 mov         r3, #1
  001b8	e58d300c	 str         r3, [sp, #0xC]
  001bc		 |$LN15@OALKitlFin|

; 105  :             break;
; 106  : #endif
; 107  :         }
; 108  : 
; 109  :         // If we don't identify device skip it
; 110  :         if (!rc) {

  001bc	e59d300c	 ldr         r3, [sp, #0xC]
  001c0	e3530000	 cmp         r3, #0
  001c4	1a000003	 bne         |$LN8@OALKitlFin|

; 111  :             pDevice++;

  001c8	e59d3088	 ldr         r3, [sp, #0x88]
  001cc	e2833018	 add         r3, r3, #0x18
  001d0	e58d3088	 str         r3, [sp, #0x88]

; 112  :             continue;

  001d4	eaffffa6	 b           |$LN28@OALKitlFin|
  001d8		 |$LN8@OALKitlFin|

; 113  :         }
; 114  : 
; 115  :         // When interface type is undefined physical address
; 116  :         // is equal to logical, so break loop
; 117  :         if (pDevLoc->IfcType == InterfaceTypeUndefined) {

  001d8	e59d3084	 ldr         r3, [sp, #0x84]
  001dc	e5933000	 ldr         r3, [r3]
  001e0	e3730001	 cmn         r3, #1
  001e4	1a000004	 bne         |$LN7@OALKitlFin|

; 118  :             pDevLoc->PhysicalLoc = (VOID*)address;

  001e8	e59d203c	 ldr         r2, [sp, #0x3C]
  001ec	e59d3084	 ldr         r3, [sp, #0x84]
  001f0	e283300c	 add         r3, r3, #0xC
  001f4	e5832000	 str         r2, [r3]

; 119  :             break;

  001f8	ea000063	 b           |$LN18@OALKitlFin|
  001fc		 |$LN7@OALKitlFin|

; 120  :         }
; 121  : 
; 122  :         // Translate bus address, if it fails skip device
; 123  :         // Are we in IO space (1) or memory space (0)?
; 124  :         space = (UINT32)address & 0x1;

  001fc	e59d303c	 ldr         r3, [sp, #0x3C]
  00200	e2033001	 and         r3, r3, #1
  00204	e58d3010	 str         r3, [sp, #0x10]

; 125  : 
; 126  :         // Mask off the lowest bit; it just indicates which space we're in.  This isn't
; 127  :         // actually part of the address
; 128  :         address &= ~0x1;

  00208	e59d203c	 ldr         r2, [sp, #0x3C]
  0020c	e3e03001	 mvn         r3, #1
  00210	e0022003	 and         r2, r2, r3
  00214	e59d3040	 ldr         r3, [sp, #0x40]
  00218	e58d203c	 str         r2, [sp, #0x3C]
  0021c	e58d3040	 str         r3, [sp, #0x40]

; 129  : 
; 130  : #ifdef BUILDING_BOOTLOADER
; 131  :         if (!OALIoTransBusAddress(
; 132  :             pDevLoc->IfcType, pDevLoc->BusNumber, address, &space, &address
; 133  :         )) {
; 134  :             rc = FALSE;
; 135  :             pDevice++;
; 136  :             continue;
; 137  :         }
; 138  : 
; 139  :         // If address has address above 32bit address space skip device
; 140  :         if ((address >> 32) != 0) {
; 141  :             rc = FALSE;
; 142  :             pDevice++;
; 143  :             continue;
; 144  :         }
; 145  : 
; 146  : 
; 147  :         if (space == 0) {
; 148  :             // Do mapping to virtual address for memory space
; 149  :             pDevLoc->PhysicalLoc = OALPAtoVA((UINT32)address, FALSE);
; 150  :         }
; 151  :         else
; 152  :         {
; 153  :             // We're in IO space, no mapping necessary
; 154  :             UINT8* pAddress = (UINT8*)address;
; 155  :             pDevLoc->PhysicalLoc = (VOID*)address;
; 156  :         }
; 157  : #else // Not building boot loader
; 158  :         params.function = IOCTL_OAL_TRANSBUSADDRESS;

  00220	e3a03005	 mov         r3, #5
  00224	e58d3014	 str         r3, [sp, #0x14]

; 159  :         params.transAddress.ifcType = pDevLoc->IfcType;

  00228	e59d3084	 ldr         r3, [sp, #0x84]
  0022c	e5933000	 ldr         r3, [r3]
  00230	e58d301c	 str         r3, [sp, #0x1C]

; 160  :         params.transAddress.busNumber = pDevLoc->BusNumber;

  00234	e59d3084	 ldr         r3, [sp, #0x84]
  00238	e2833004	 add         r3, r3, #4
  0023c	e5933000	 ldr         r3, [r3]
  00240	e58d3020	 str         r3, [sp, #0x20]

; 161  :         params.transAddress.space = space;

  00244	e59d3010	 ldr         r3, [sp, #0x10]
  00248	e58d3024	 str         r3, [sp, #0x24]

; 162  :         params.transAddress.address = address;

  0024c	e59d303c	 ldr         r3, [sp, #0x3C]
  00250	e58d302c	 str         r3, [sp, #0x2C]
  00254	e59d3040	 ldr         r3, [sp, #0x40]
  00258	e58d3030	 str         r3, [sp, #0x30]

; 163  :         if (!OEMIoControl(
; 164  :             IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, NULL
; 165  :         ) || !params.rc) {

  0025c	e3a03000	 mov         r3, #0
  00260	e58d3004	 str         r3, [sp, #4]
  00264	e3a03000	 mov         r3, #0
  00268	e58d3000	 str         r3, [sp]
  0026c	e3a03000	 mov         r3, #0
  00270	e3a02028	 mov         r2, #0x28
  00274	e28d1014	 add         r1, sp, #0x14
  00278	e59f01a8	 ldr         r0, [pc, #0x1A8]
  0027c	eb000000	 bl          OEMIoControl
  00280	e58d006c	 str         r0, [sp, #0x6C]
  00284	e59d306c	 ldr         r3, [sp, #0x6C]
  00288	e3530000	 cmp         r3, #0
  0028c	0a000002	 beq         |$LN5@OALKitlFin|
  00290	e59d3018	 ldr         r3, [sp, #0x18]
  00294	e3530000	 cmp         r3, #0
  00298	1a000005	 bne         |$LN6@OALKitlFin|
  0029c		 |$LN5@OALKitlFin|

; 166  :             rc = FALSE;

  0029c	e3a03000	 mov         r3, #0
  002a0	e58d300c	 str         r3, [sp, #0xC]

; 167  :             pDevice++;

  002a4	e59d3088	 ldr         r3, [sp, #0x88]
  002a8	e2833018	 add         r3, r3, #0x18
  002ac	e58d3088	 str         r3, [sp, #0x88]

; 168  :             continue;

  002b0	eaffff6f	 b           |$LN29@OALKitlFin|
  002b4		 |$LN6@OALKitlFin|

; 169  :         }
; 170  :         address = params.transAddress.address;

  002b4	e59d302c	 ldr         r3, [sp, #0x2C]
  002b8	e58d303c	 str         r3, [sp, #0x3C]
  002bc	e59d3030	 ldr         r3, [sp, #0x30]
  002c0	e58d3040	 str         r3, [sp, #0x40]

; 171  :         space = params.transAddress.space;

  002c4	e59d3024	 ldr         r3, [sp, #0x24]
  002c8	e58d3010	 str         r3, [sp, #0x10]

; 172  : 
; 173  :         // If address has address above 32bit address space skip device
; 174  :         if ((address >> 32) != 0) {

  002cc	e59d3040	 ldr         r3, [sp, #0x40]
  002d0	e3530000	 cmp         r3, #0
  002d4	0a000005	 beq         |$LN4@OALKitlFin|

; 175  :             rc = FALSE;

  002d8	e3a03000	 mov         r3, #0
  002dc	e58d300c	 str         r3, [sp, #0xC]

; 176  :             pDevice++;

  002e0	e59d3088	 ldr         r3, [sp, #0x88]
  002e4	e2833018	 add         r3, r3, #0x18
  002e8	e58d3088	 str         r3, [sp, #0x88]

; 177  :             continue;

  002ec	eaffff60	 b           |$LN30@OALKitlFin|
  002f0		 |$LN4@OALKitlFin|

; 178  :         }
; 179  : 
; 180  :         // Do mapping to virtual address for memory space
; 181  :         if (space == 0) {

  002f0	e59d3010	 ldr         r3, [sp, #0x10]
  002f4	e3530000	 cmp         r3, #0
  002f8	1a00001b	 bne         |$LN3@OALKitlFin|

; 182  :             UINT32 offset;
; 183  :             UINT8 *pAddress;
; 184  :             UINT32 pa = (UINT32)address;

  002fc	e59d303c	 ldr         r3, [sp, #0x3C]
  00300	e58d3044	 str         r3, [sp, #0x44]

; 185  :             
; 186  :             offset = pa & (VM_PAGE_SIZE - 1);

  00304	e59d2044	 ldr         r2, [sp, #0x44]
  00308	e3a03c0f	 mov         r3, #0xF, 24
  0030c	e38330ff	 orr         r3, r3, #0xFF
  00310	e0023003	 and         r3, r2, r3
  00314	e58d3048	 str         r3, [sp, #0x48]

; 187  :             pa &= ~(VM_PAGE_SIZE - 1);

  00318	e59d2044	 ldr         r2, [sp, #0x44]
  0031c	e3e03c0f	 mvn         r3, #0xF, 24
  00320	e22330ff	 eor         r3, r3, #0xFF
  00324	e0023003	 and         r3, r2, r3
  00328	e58d3044	 str         r3, [sp, #0x44]

; 188  :             pAddress = NKPhysToVirt(pa >> 8, FALSE);

  0032c	e3a01000	 mov         r1, #0
  00330	e59d3044	 ldr         r3, [sp, #0x44]
  00334	e1a00423	 mov         r0, r3, lsr #8
  00338	eb000000	 bl          NKPhysToVirt
  0033c	e58d0070	 str         r0, [sp, #0x70]
  00340	e59d3070	 ldr         r3, [sp, #0x70]
  00344	e58d304c	 str         r3, [sp, #0x4C]

; 189  :             pAddress += offset;

  00348	e59d204c	 ldr         r2, [sp, #0x4C]
  0034c	e59d3048	 ldr         r3, [sp, #0x48]
  00350	e0823003	 add         r3, r2, r3
  00354	e58d304c	 str         r3, [sp, #0x4C]

; 190  :             
; 191  :             pDevLoc->PhysicalLoc = pAddress;

  00358	e59d3084	 ldr         r3, [sp, #0x84]
  0035c	e283200c	 add         r2, r3, #0xC
  00360	e59d304c	 ldr         r3, [sp, #0x4C]
  00364	e5823000	 str         r3, [r2]

; 192  :         }
; 193  :         else

  00368	ea000005	 b           |$LN2@OALKitlFin|
  0036c		 |$LN3@OALKitlFin|

; 194  :         {
; 195  :             // We're in IO space, no mapping necessary
; 196  :             UINT8* pAddress = (UINT8*)address;

  0036c	e59d303c	 ldr         r3, [sp, #0x3C]
  00370	e58d3050	 str         r3, [sp, #0x50]

; 197  :             pDevLoc->PhysicalLoc = (VOID*)address;

  00374	e59d203c	 ldr         r2, [sp, #0x3C]
  00378	e59d3084	 ldr         r3, [sp, #0x84]
  0037c	e283300c	 add         r3, r3, #0xC
  00380	e5832000	 str         r2, [r3]
  00384		 |$LN2@OALKitlFin|

; 198  :         }
; 199  : #endif
; 200  :         // We get all we need
; 201  :         break;

  00384	ea000000	 b           |$LN18@OALKitlFin|

; 202  :     }

  00388	eaffff39	 b           |$LN19@OALKitlFin|
  0038c		 |$LN18@OALKitlFin|

; 203  : 
; 204  :     // Return NULL if driver wasn't found
; 205  :     if (!rc) pDevice = NULL;

  0038c	e59d300c	 ldr         r3, [sp, #0xC]
  00390	e3530000	 cmp         r3, #0
  00394	1a000001	 bne         |$LN1@OALKitlFin|
  00398	e3a03000	 mov         r3, #0
  0039c	e58d3088	 str         r3, [sp, #0x88]
  003a0		 |$LN1@OALKitlFin|

; 206  : 
; 207  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 208  :         "-OALKitlFindDevice(pDevice = 0x%08x(%s), PhysicalLoc = 0x%08x)\r\n",
; 209  :         pDevice, (pDevice != NULL) ? pDevice->name : L"", pDevLoc->PhysicalLoc
; 210  :     ));

  003a0	e59f307c	 ldr         r3, [pc, #0x7C]
  003a4	e5933440	 ldr         r3, [r3, #0x440]
  003a8	e3130a01	 tst         r3, #1, 20
  003ac	0a000012	 beq         |$LN26@OALKitlFin|
  003b0	e59d3088	 ldr         r3, [sp, #0x88]
  003b4	e3530000	 cmp         r3, #0
  003b8	0a000003	 beq         |$LN24@OALKitlFin|
  003bc	e59d3088	 ldr         r3, [sp, #0x88]
  003c0	e5933000	 ldr         r3, [r3]
  003c4	e58d3074	 str         r3, [sp, #0x74]
  003c8	ea000001	 b           |$LN25@OALKitlFin|
  003cc		 |$LN24@OALKitlFin|
  003cc	e59f304c	 ldr         r3, [pc, #0x4C]
  003d0	e58d3074	 str         r3, [sp, #0x74]
  003d4		 |$LN25@OALKitlFin|
  003d4	e59d3084	 ldr         r3, [sp, #0x84]
  003d8	e283300c	 add         r3, r3, #0xC
  003dc	e5933000	 ldr         r3, [r3]
  003e0	e59d2074	 ldr         r2, [sp, #0x74]
  003e4	e59d1088	 ldr         r1, [sp, #0x88]
  003e8	e59f002c	 ldr         r0, [pc, #0x2C]
  003ec	eb000000	 bl          KITLOutputDebugString
  003f0	e3a03001	 mov         r3, #1
  003f4	e58d3078	 str         r3, [sp, #0x78]
  003f8	ea000001	 b           |$LN27@OALKitlFin|
  003fc		 |$LN26@OALKitlFin|
  003fc	e3a03000	 mov         r3, #0
  00400	e58d3078	 str         r3, [sp, #0x78]
  00404		 |$LN27@OALKitlFin|

; 211  :     return pDevice;

  00404	e59d3088	 ldr         r3, [sp, #0x88]
  00408	e58d3060	 str         r3, [sp, #0x60]

; 212  : }

  0040c	e59d0060	 ldr         r0, [sp, #0x60]
  00410	e28dd07c	 add         sp, sp, #0x7C
  00414	e89d6000	 ldmia       sp, {sp, lr}
  00418	e12fff1e	 bx          lr
  0041c		 |$LN34@OALKitlFin|
  0041c		 |$LN35@OALKitlFin|
  0041c	00000000	 DCD         |??_C@_0EB@BGCKLDE@?9OALKitlFindDevice?$CIpDevice?5?$DN?50x?$CF@|
  00420		 |$LN36@OALKitlFin|
  00420	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  00424		 |$LN37@OALKitlFin|
  00424	00000000	 DCD         |dpCurSettings|
  00428		 |$LN38@OALKitlFin|
  00428	01010014	 DCD         0x1010014
  0042c		 |$LN39@OALKitlFin|
  0042c	00000000	 DCD         |??_C@_0CJ@GPDFFIKB@?$CLOALKitlFindDevice?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  00430		 |$M43238|

			 ENDP  ; |OALKitlFindDevice|

	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|memset|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|memcpy|
	IMPORT	|__security_check_cookie|

  00008			 AREA	 |.pdata|, PDATA
|$T43259| DCD	|$LN7@OALKitlPCI|
	DCD	0xc0004d04

  00000			 AREA	 |.xdata|, DATA
|$T43255| DCD	0xffffffd8
; Function compile flags: /Odtp

  00430			 AREA	 |.text|, CODE, ARM

  00430	00000000	 DCD         |__GSHandlerCheck|
  00434	00000000	 DCD         |$T43255|

  00438		 |OALKitlPCIInfo| PROC

; 26   : ) {

  00438		 |$LN7@OALKitlPCI|
  00438	e1a0c00d	 mov         r12, sp
  0043c	e92d000f	 stmdb       sp!, {r0 - r3}
  00440	e92d5000	 stmdb       sp!, {r12, lr}
  00444	e24ddd05	 sub         sp, sp, #5, 26
  00448		 |$M43256|
  00448	e59f3118	 ldr         r3, [pc, #0x118]
  0044c	e5933000	 ldr         r3, [r3]
  00450	e58d3130	 str         r3, [sp, #0x130]

; 27   :     PCI_COMMON_CONFIG config;
; 28   :     OAL_DDK_PARAMS params;
; 29   : 
; 30   :     memset(&config, 0xFF, sizeof(config));

  00454	e3a02c01	 mov         r2, #1, 24
  00458	e3a010ff	 mov         r1, #0xFF
  0045c	e28d0008	 add         r0, sp, #8
  00460	eb000000	 bl          memset

; 31   :     *pId = 0xFFFFFFFF;

  00464	e59d214c	 ldr         r2, [sp, #0x14C]
  00468	e3e03000	 mvn         r3, #0
  0046c	e5823000	 str         r3, [r2]

; 32   :     *pAddress = 0;

  00470	e59d2150	 ldr         r2, [sp, #0x150]
  00474	e3a03000	 mov         r3, #0
  00478	e5823000	 str         r3, [r2]
  0047c	e59d2150	 ldr         r2, [sp, #0x150]
  00480	e3a03000	 mov         r3, #0
  00484	e5823004	 str         r3, [r2, #4]

; 33   :     *pIrqPin = 0;

  00488	e59d2154	 ldr         r2, [sp, #0x154]
  0048c	e3a03000	 mov         r3, #0
  00490	e5823000	 str         r3, [r2]

; 34   :     
; 35   :     params.function = IOCTL_OAL_READBUSDATA;

  00494	e3a03003	 mov         r3, #3
  00498	e58d3108	 str         r3, [sp, #0x108]

; 36   :     params.rc = 0;

  0049c	e3a03000	 mov         r3, #0
  004a0	e58d310c	 str         r3, [sp, #0x10C]

; 37   :     params.busData.devLoc = *pDevLoc;

  004a4	e59d1148	 ldr         r1, [sp, #0x148]
  004a8	e28d0e11	 add         r0, sp, #0x11, 28
  004ac	e3a02014	 mov         r2, #0x14
  004b0	eb000000	 bl          memcpy

; 38   :     params.busData.offset = 0;

  004b4	e3a03000	 mov         r3, #0
  004b8	e58d3124	 str         r3, [sp, #0x124]

; 39   :     params.busData.length = sizeof(config);

  004bc	e3a03c01	 mov         r3, #1, 24
  004c0	e58d3128	 str         r3, [sp, #0x128]

; 40   :     params.busData.pBuffer = &config;

  004c4	e28d3008	 add         r3, sp, #8
  004c8	e58d312c	 str         r3, [sp, #0x12C]

; 41   : 
; 42   :     if (!OEMIoControl(
; 43   :         IOCTL_HAL_DDK_CALL, &params, sizeof(params), NULL, 0, NULL
; 44   :     ) || !params.rc) goto cleanUp;

  004cc	e3a03000	 mov         r3, #0
  004d0	e58d3004	 str         r3, [sp, #4]
  004d4	e3a03000	 mov         r3, #0
  004d8	e58d3000	 str         r3, [sp]
  004dc	e3a03000	 mov         r3, #0
  004e0	e3a02028	 mov         r2, #0x28
  004e4	e28d1f42	 add         r1, sp, #0x42, 30
  004e8	e59f0074	 ldr         r0, [pc, #0x74]
  004ec	eb000000	 bl          OEMIoControl
  004f0	e58d013c	 str         r0, [sp, #0x13C]
  004f4	e59d313c	 ldr         r3, [sp, #0x13C]
  004f8	e3530000	 cmp         r3, #0
  004fc	0a000002	 beq         |$LN1@OALKitlPCI|
  00500	e59d310c	 ldr         r3, [sp, #0x10C]
  00504	e3530000	 cmp         r3, #0
  00508	1a000000	 bne         |$LN2@OALKitlPCI|
  0050c		 |$LN1@OALKitlPCI|
  0050c	ea00000f	 b           |$cleanUp$43095|
  00510		 |$LN2@OALKitlPCI|

; 45   : 
; 46   :     *pId = config.VendorID | (config.DeviceID << 16);

  00510	e1dd30b8	 ldrh        r3, [sp, #8]
  00514	e1a02003	 mov         r2, r3
  00518	e1dd30ba	 ldrh        r3, [sp, #0xA]
  0051c	e1a03803	 mov         r3, r3, lsl #16
  00520	e1822003	 orr         r2, r2, r3
  00524	e59d314c	 ldr         r3, [sp, #0x14C]
  00528	e5832000	 str         r2, [r3]

; 47   :     *pAddress = config.u.type0.BaseAddresses[0];

  0052c	e59d2018	 ldr         r2, [sp, #0x18]
  00530	e59d3150	 ldr         r3, [sp, #0x150]
  00534	e5832000	 str         r2, [r3]
  00538	e59d2150	 ldr         r2, [sp, #0x150]
  0053c	e3a03000	 mov         r3, #0
  00540	e5823004	 str         r3, [r2, #4]

; 48   :     *pIrqPin = config.u.type0.InterruptPin;

  00544	e5dd2045	 ldrb        r2, [sp, #0x45]
  00548	e59d3154	 ldr         r3, [sp, #0x154]
  0054c	e5832000	 str         r2, [r3]
  00550		 |$cleanUp$43095|

; 26   : ) {

  00550	e59d0130	 ldr         r0, [sp, #0x130]
  00554	eb000000	 bl          __security_check_cookie

; 49   :     
; 50   : cleanUp:    
; 51   :     return;
; 52   : }

  00558	e28ddd05	 add         sp, sp, #5, 26
  0055c	e89d6000	 ldmia       sp, {sp, lr}
  00560	e12fff1e	 bx          lr
  00564		 |$LN8@OALKitlPCI|
  00564		 |$LN9@OALKitlPCI|
  00564	01010014	 DCD         0x1010014
  00568		 |$LN10@OALKitlPCI|
  00568	00000000	 DCD         |__security_cookie|
  0056c		 |$M43257|

			 ENDP  ; |OALKitlPCIInfo|

	EXPORT	|??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@MHLKLHLH@?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAi?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAe?$AAv?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAn?$AAc?$AA?5?$AA?$CF?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	EXPORT	|OALKitlDeviceName|
	IMPORT	|OALLogPrintf|
	IMPORT	|OALPCIGetId|

  00000			 AREA	 |.bss|, NOINIT
|?name@?1??OALKitlDeviceName@@9@9| % 0x80		; `OALKitlDeviceName'::`2'::name

  00010			 AREA	 |.pdata|, PDATA
|$T43278| DCD	|$LN20@OALKitlDev|
	DCD	0x40009104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@| DCB "-"
	DCB	"OALKitlDeviceName(name = 0x%08x('%s')", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@MHLKLHLH@?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAi?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAe?$AAv?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAn?$AAc?$AA?5?$AA?$CF?$AAd?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, " ", 0x0, "@", 0x0, " ", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "v", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "n", 0x0, "c", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlDeviceName(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  0056c			 AREA	 |.text|, CODE, ARM

  0056c		 |OALKitlDeviceName| PROC

; 221  : ) {

  0056c		 |$LN20@OALKitlDev|
  0056c	e1a0c00d	 mov         r12, sp
  00570	e92d0003	 stmdb       sp!, {r0, r1}
  00574	e92d5000	 stmdb       sp!, {r12, lr}
  00578	e24dd048	 sub         sp, sp, #0x48
  0057c		 |$M43275|

; 222  :     BOOL rc = FALSE;

  0057c	e3a03000	 mov         r3, #0
  00580	e58d3010	 str         r3, [sp, #0x10]

; 223  :     static WCHAR name[64];
; 224  :     LPCWSTR pName = NULL;

  00584	e3a03000	 mov         r3, #0
  00588	e58d3014	 str         r3, [sp, #0x14]

; 225  :     
; 226  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 227  :         "+OALKitlDeviceName(%d/%d/%08x, 0x%08x)\r\n",
; 228  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 229  :     ));

  0058c	e59f320c	 ldr         r3, [pc, #0x20C]
  00590	e5933440	 ldr         r3, [r3, #0x440]
  00594	e3130a01	 tst         r3, #1, 20
  00598	0a00000e	 beq         |$LN13@OALKitlDev|
  0059c	e59d3054	 ldr         r3, [sp, #0x54]
  005a0	e58d3000	 str         r3, [sp]
  005a4	e59d3050	 ldr         r3, [sp, #0x50]
  005a8	e2833008	 add         r3, r3, #8
  005ac	e5933000	 ldr         r3, [r3]
  005b0	e59d2050	 ldr         r2, [sp, #0x50]
  005b4	e2822004	 add         r2, r2, #4
  005b8	e5922000	 ldr         r2, [r2]
  005bc	e59d1050	 ldr         r1, [sp, #0x50]
  005c0	e5911000	 ldr         r1, [r1]
  005c4	e59f01e0	 ldr         r0, [pc, #0x1E0]
  005c8	eb000000	 bl          KITLOutputDebugString
  005cc	e3a03001	 mov         r3, #1
  005d0	e58d3038	 str         r3, [sp, #0x38]
  005d4	ea000001	 b           |$LN14@OALKitlDev|
  005d8		 |$LN13@OALKitlDev|
  005d8	e3a03000	 mov         r3, #0
  005dc	e58d3038	 str         r3, [sp, #0x38]
  005e0		 |$LN14@OALKitlDev|
  005e0		 |$LN17@OALKitlDev|
  005e0		 |$LN10@OALKitlDev|

; 230  : 
; 231  :     // Look for driver in list
; 232  :     while (pDevice->name != NULL && !rc) {

  005e0	e59d3054	 ldr         r3, [sp, #0x54]
  005e4	e5933000	 ldr         r3, [r3]
  005e8	e3530000	 cmp         r3, #0
  005ec	0a000057	 beq         |$LN9@OALKitlDev|
  005f0	e59d3010	 ldr         r3, [sp, #0x10]
  005f4	e3530000	 cmp         r3, #0
  005f8	1a000054	 bne         |$LN9@OALKitlDev|

; 233  : 
; 234  :         // Is it our device? Then move
; 235  :         if (pDevLoc->IfcType != pDevice->ifcType) {

  005fc	e59d3054	 ldr         r3, [sp, #0x54]
  00600	e2831004	 add         r1, r3, #4
  00604	e59d3050	 ldr         r3, [sp, #0x50]
  00608	e5932000	 ldr         r2, [r3]
  0060c	e5913000	 ldr         r3, [r1]
  00610	e1520003	 cmp         r2, r3
  00614	0a000003	 beq         |$LN8@OALKitlDev|

; 236  :             // Move to next driver
; 237  :             pDevice++;

  00618	e59d3054	 ldr         r3, [sp, #0x54]
  0061c	e2833018	 add         r3, r3, #0x18
  00620	e58d3054	 str         r3, [sp, #0x54]

; 238  :             continue;

  00624	eaffffed	 b           |$LN10@OALKitlDev|
  00628		 |$LN8@OALKitlDev|

; 239  :         }            
; 240  : 
; 241  :         // Identify device and read its address/interrupt depends on bus type
; 242  :         switch (pDevLoc->IfcType) {

  00628	e59d3050	 ldr         r3, [sp, #0x50]
  0062c	e5933000	 ldr         r3, [r3]
  00630	e58d303c	 str         r3, [sp, #0x3C]
  00634	e59d303c	 ldr         r3, [sp, #0x3C]
  00638	e3530000	 cmp         r3, #0
  0063c	0a000003	 beq         |$LN5@OALKitlDev|
  00640	e59d303c	 ldr         r3, [sp, #0x3C]
  00644	e3530005	 cmp         r3, #5
  00648	0a00000f	 beq         |$LN3@OALKitlDev|
  0064c	ea000036	 b           |$LN6@OALKitlDev|
  00650		 |$LN5@OALKitlDev|

; 243  :         case Internal:
; 244  :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  00650	e59d3050	 ldr         r3, [sp, #0x50]
  00654	e2832008	 add         r2, r3, #8
  00658	e59d3054	 ldr         r3, [sp, #0x54]
  0065c	e2833008	 add         r3, r3, #8
  00660	e5922000	 ldr         r2, [r2]
  00664	e5933000	 ldr         r3, [r3]
  00668	e1520003	 cmp         r2, r3
  0066c	0a000000	 beq         |$LN4@OALKitlDev|
  00670	ea00002d	 b           |$LN6@OALKitlDev|
  00674		 |$LN4@OALKitlDev|

; 245  :             pName = pDevice->name;

  00674	e59d3054	 ldr         r3, [sp, #0x54]
  00678	e5933000	 ldr         r3, [r3]
  0067c	e58d3014	 str         r3, [sp, #0x14]

; 246  :             rc = TRUE;

  00680	e3a03001	 mov         r3, #1
  00684	e58d3010	 str         r3, [sp, #0x10]

; 247  :             break;

  00688	ea000027	 b           |$LN6@OALKitlDev|
  0068c		 |$LN3@OALKitlDev|

; 248  : #ifdef KITL_PCI            
; 249  :         case PCIBus:
; 250  :             {
; 251  :                 UINT32 id;
; 252  :                 OAL_PCI_LOCATION pciLoc;
; 253  : 
; 254  :                 pciLoc = *(OAL_PCI_LOCATION*)&pDevLoc->LogicalLoc;

  0068c	e59d3050	 ldr         r3, [sp, #0x50]
  00690	e2831008	 add         r1, r3, #8
  00694	e28d0018	 add         r0, sp, #0x18
  00698	e3a02004	 mov         r2, #4
  0069c	eb000000	 bl          memcpy

; 255  :                 id = OALPCIGetId(pDevLoc->BusNumber, pciLoc);

  006a0	e59d1018	 ldr         r1, [sp, #0x18]
  006a4	e59d3050	 ldr         r3, [sp, #0x50]
  006a8	e2833004	 add         r3, r3, #4
  006ac	e5930000	 ldr         r0, [r3]
  006b0	eb000000	 bl          OALPCIGetId
  006b4	e58d0040	 str         r0, [sp, #0x40]
  006b8	e59d3040	 ldr         r3, [sp, #0x40]
  006bc	e58d301c	 str         r3, [sp, #0x1C]

; 256  :                 if (id != pDevice->id) break;

  006c0	e59d3054	 ldr         r3, [sp, #0x54]
  006c4	e2833008	 add         r3, r3, #8
  006c8	e59d201c	 ldr         r2, [sp, #0x1C]
  006cc	e5933000	 ldr         r3, [r3]
  006d0	e1520003	 cmp         r2, r3
  006d4	0a000000	 beq         |$LN2@OALKitlDev|
  006d8	ea000013	 b           |$LN6@OALKitlDev|
  006dc		 |$LN2@OALKitlDev|

; 257  :                 OALLogPrintf(
; 258  :                     name, sizeof(name)/sizeof(WCHAR),
; 259  :                     L"%s @ id %d bus %d dev %d fnc %d",
; 260  :                     pDevice->name, pDevLoc->BusNumber, pciLoc.bus, pciLoc.dev,
; 261  :                     pciLoc.fnc
; 262  :                 );

  006dc	e5dd3018	 ldrb        r3, [sp, #0x18]
  006e0	e58d300c	 str         r3, [sp, #0xC]
  006e4	e5dd3019	 ldrb        r3, [sp, #0x19]
  006e8	e58d3008	 str         r3, [sp, #8]
  006ec	e5dd301a	 ldrb        r3, [sp, #0x1A]
  006f0	e58d3004	 str         r3, [sp, #4]
  006f4	e59d3050	 ldr         r3, [sp, #0x50]
  006f8	e2833004	 add         r3, r3, #4
  006fc	e5933000	 ldr         r3, [r3]
  00700	e58d3000	 str         r3, [sp]
  00704	e59d3054	 ldr         r3, [sp, #0x54]
  00708	e5933000	 ldr         r3, [r3]
  0070c	e59f2094	 ldr         r2, [pc, #0x94]
  00710	e3a01040	 mov         r1, #0x40
  00714	e59f0088	 ldr         r0, [pc, #0x88]
  00718	eb000000	 bl          OALLogPrintf

; 263  :                 pName = name;

  0071c	e59f3080	 ldr         r3, [pc, #0x80]
  00720	e58d3014	 str         r3, [sp, #0x14]

; 264  :                 rc = TRUE;

  00724	e3a03001	 mov         r3, #1
  00728	e58d3010	 str         r3, [sp, #0x10]
  0072c		 |$LN6@OALKitlDev|

; 265  :             }                
; 266  :             break;
; 267  : #endif
; 268  :         }
; 269  : 
; 270  :         // If we don't identify device skip it
; 271  :         if (!rc) {

  0072c	e59d3010	 ldr         r3, [sp, #0x10]
  00730	e3530000	 cmp         r3, #0
  00734	1a000003	 bne         |$LN1@OALKitlDev|

; 272  :             pDevice++;

  00738	e59d3054	 ldr         r3, [sp, #0x54]
  0073c	e2833018	 add         r3, r3, #0x18
  00740	e58d3054	 str         r3, [sp, #0x54]

; 273  :             continue;

  00744	eaffffa5	 b           |$LN17@OALKitlDev|
  00748		 |$LN1@OALKitlDev|

; 274  :         }
; 275  :             
; 276  :         // We get all we need
; 277  :         break;

  00748	ea000000	 b           |$LN9@OALKitlDev|

; 278  :     }

  0074c	eaffffa3	 b           |$LN10@OALKitlDev|
  00750		 |$LN9@OALKitlDev|

; 279  : 
; 280  : 
; 281  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 282  :         "-OALKitlDeviceName(name = 0x%08x('%s')\r\n", pName, pName
; 283  :     ));

  00750	e59f3048	 ldr         r3, [pc, #0x48]
  00754	e5933440	 ldr         r3, [r3, #0x440]
  00758	e3130a01	 tst         r3, #1, 20
  0075c	0a000006	 beq         |$LN15@OALKitlDev|
  00760	e59d2014	 ldr         r2, [sp, #0x14]
  00764	e59d1014	 ldr         r1, [sp, #0x14]
  00768	e59f002c	 ldr         r0, [pc, #0x2C]
  0076c	eb000000	 bl          KITLOutputDebugString
  00770	e3a03001	 mov         r3, #1
  00774	e58d3044	 str         r3, [sp, #0x44]
  00778	ea000001	 b           |$LN16@OALKitlDev|
  0077c		 |$LN15@OALKitlDev|
  0077c	e3a03000	 mov         r3, #0
  00780	e58d3044	 str         r3, [sp, #0x44]
  00784		 |$LN16@OALKitlDev|

; 284  :     return pName;

  00784	e59d3014	 ldr         r3, [sp, #0x14]
  00788	e58d3034	 str         r3, [sp, #0x34]

; 285  : }

  0078c	e59d0034	 ldr         r0, [sp, #0x34]
  00790	e28dd048	 add         sp, sp, #0x48
  00794	e89d6000	 ldmia       sp, {sp, lr}
  00798	e12fff1e	 bx          lr
  0079c		 |$LN21@OALKitlDev|
  0079c		 |$LN22@OALKitlDev|
  0079c	00000000	 DCD         |??_C@_0CJ@MPHJDLPH@?9OALKitlDeviceName?$CIname?5?$DN?50x?$CF08x@|
  007a0		 |$LN23@OALKitlDev|
  007a0	00000000	 DCD         |dpCurSettings|
  007a4		 |$LN24@OALKitlDev|
  007a4	00000000	 DCD         |?name@?1??OALKitlDeviceName@@9@9|
  007a8		 |$LN25@OALKitlDev|
  007a8	00000000	 DCD         |??_C@_1EA@MHLKLHLH@?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAi?$AAd?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAu?$AAs?$AA?5?$AA?$CF?$AAd?$AA?5?$AAd?$AAe?$AAv?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAn?$AAc?$AA?5?$AA?$CF?$AAd?$AA?$AA@|
  007ac		 |$LN26@OALKitlDev|
  007ac	00000000	 DCD         |??_C@_0CJ@OKPKABKG@?$CLOALKitlDeviceName?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  007b0		 |$M43276|

			 ENDP  ; |OALKitlDeviceName|

	EXPORT	|??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| [ DATA ] ; `string'
	EXPORT	|OALKitlDeviceType|

  00018			 AREA	 |.pdata|, PDATA
|$T43296| DCD	|$LN20@OALKitlDev@2|
	DCD	0x40008004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"OALKitlDeviceType(type = %d)", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@| DCB "+"
	DCB	"OALKitlDeviceType(%d/%d/%08x, 0x%08x)", 0xd, 0xa, 0x0 ; `string'
; Function compile flags: /Odtp

  007b0			 AREA	 |.text|, CODE, ARM

  007b0		 |OALKitlDeviceType| PROC

; 294  : ) {

  007b0		 |$LN20@OALKitlDev@2|
  007b0	e1a0c00d	 mov         r12, sp
  007b4	e92d0003	 stmdb       sp!, {r0, r1}
  007b8	e92d5000	 stmdb       sp!, {r12, lr}
  007bc	e24dd02c	 sub         sp, sp, #0x2C
  007c0		 |$M43293|

; 295  :     BOOL rc = FALSE;

  007c0	e3a03000	 mov         r3, #0
  007c4	e58d3004	 str         r3, [sp, #4]

; 296  :     OAL_KITL_TYPE type = OAL_KITL_TYPE_NONE;

  007c8	e3a03000	 mov         r3, #0
  007cc	e58d3008	 str         r3, [sp, #8]

; 297  :     
; 298  :     KITL_RETAILMSG(ZONE_KITL_OAL, (
; 299  :         "+OALKitlDeviceType(%d/%d/%08x, 0x%08x)\r\n",
; 300  :         pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc, pDevice
; 301  :     ));

  007d0	e59f31d0	 ldr         r3, [pc, #0x1D0]
  007d4	e5933440	 ldr         r3, [r3, #0x440]
  007d8	e3130a01	 tst         r3, #1, 20
  007dc	0a00000e	 beq         |$LN13@OALKitlDev@2|
  007e0	e59d3038	 ldr         r3, [sp, #0x38]
  007e4	e58d3000	 str         r3, [sp]
  007e8	e59d3034	 ldr         r3, [sp, #0x34]
  007ec	e2833008	 add         r3, r3, #8
  007f0	e5933000	 ldr         r3, [r3]
  007f4	e59d2034	 ldr         r2, [sp, #0x34]
  007f8	e2822004	 add         r2, r2, #4
  007fc	e5922000	 ldr         r2, [r2]
  00800	e59d1034	 ldr         r1, [sp, #0x34]
  00804	e5911000	 ldr         r1, [r1]
  00808	e59f019c	 ldr         r0, [pc, #0x19C]
  0080c	eb000000	 bl          KITLOutputDebugString
  00810	e3a03001	 mov         r3, #1
  00814	e58d3018	 str         r3, [sp, #0x18]
  00818	ea000001	 b           |$LN14@OALKitlDev@2|
  0081c		 |$LN13@OALKitlDev@2|
  0081c	e3a03000	 mov         r3, #0
  00820	e58d3018	 str         r3, [sp, #0x18]
  00824		 |$LN14@OALKitlDev@2|
  00824		 |$LN17@OALKitlDev@2|
  00824		 |$LN10@OALKitlDev@2|

; 302  : 
; 303  :     // Look for driver in list
; 304  :     while (pDevice->name != NULL && !rc) {

  00824	e59d3038	 ldr         r3, [sp, #0x38]
  00828	e5933000	 ldr         r3, [r3]
  0082c	e3530000	 cmp         r3, #0
  00830	0a000049	 beq         |$LN9@OALKitlDev@2|
  00834	e59d3004	 ldr         r3, [sp, #4]
  00838	e3530000	 cmp         r3, #0
  0083c	1a000046	 bne         |$LN9@OALKitlDev@2|

; 305  : 
; 306  :         // Is it our device? Then move
; 307  :         if (pDevLoc->IfcType != pDevice->ifcType) {

  00840	e59d3038	 ldr         r3, [sp, #0x38]
  00844	e2831004	 add         r1, r3, #4
  00848	e59d3034	 ldr         r3, [sp, #0x34]
  0084c	e5932000	 ldr         r2, [r3]
  00850	e5913000	 ldr         r3, [r1]
  00854	e1520003	 cmp         r2, r3
  00858	0a000003	 beq         |$LN8@OALKitlDev@2|

; 308  :             // Move to next driver
; 309  :             pDevice++;

  0085c	e59d3038	 ldr         r3, [sp, #0x38]
  00860	e2833018	 add         r3, r3, #0x18
  00864	e58d3038	 str         r3, [sp, #0x38]

; 310  :             continue;

  00868	eaffffed	 b           |$LN10@OALKitlDev@2|
  0086c		 |$LN8@OALKitlDev@2|

; 311  :         }            
; 312  : 
; 313  :         // Identify device and read its address/interrupt depends on bus type
; 314  :         switch (pDevLoc->IfcType) {

  0086c	e59d3034	 ldr         r3, [sp, #0x34]
  00870	e5933000	 ldr         r3, [r3]
  00874	e58d301c	 str         r3, [sp, #0x1C]
  00878	e59d301c	 ldr         r3, [sp, #0x1C]
  0087c	e3530000	 cmp         r3, #0
  00880	0a000003	 beq         |$LN5@OALKitlDev@2|
  00884	e59d301c	 ldr         r3, [sp, #0x1C]
  00888	e3530005	 cmp         r3, #5
  0088c	0a000010	 beq         |$LN3@OALKitlDev@2|
  00890	ea000028	 b           |$LN6@OALKitlDev@2|
  00894		 |$LN5@OALKitlDev@2|

; 315  :         case Internal:
; 316  :             if (pDevLoc->LogicalLoc != pDevice->id) break;

  00894	e59d3034	 ldr         r3, [sp, #0x34]
  00898	e2832008	 add         r2, r3, #8
  0089c	e59d3038	 ldr         r3, [sp, #0x38]
  008a0	e2833008	 add         r3, r3, #8
  008a4	e5922000	 ldr         r2, [r2]
  008a8	e5933000	 ldr         r3, [r3]
  008ac	e1520003	 cmp         r2, r3
  008b0	0a000000	 beq         |$LN4@OALKitlDev@2|
  008b4	ea00001f	 b           |$LN6@OALKitlDev@2|
  008b8		 |$LN4@OALKitlDev@2|

; 317  :             type = pDevice->type;

  008b8	e59d3038	 ldr         r3, [sp, #0x38]
  008bc	e2833010	 add         r3, r3, #0x10
  008c0	e5933000	 ldr         r3, [r3]
  008c4	e58d3008	 str         r3, [sp, #8]

; 318  :             rc = TRUE;

  008c8	e3a03001	 mov         r3, #1
  008cc	e58d3004	 str         r3, [sp, #4]

; 319  :             break;

  008d0	ea000018	 b           |$LN6@OALKitlDev@2|
  008d4		 |$LN3@OALKitlDev@2|

; 320  : #ifdef KITL_PCI            
; 321  :         case PCIBus:
; 322  :             {
; 323  :                 UINT32 id;
; 324  :                 id = OALPCIGetId(
; 325  :                     pDevLoc->BusNumber, *(OAL_PCI_LOCATION*)&pDevLoc->LogicalLoc
; 326  :                 );

  008d4	e59d3034	 ldr         r3, [sp, #0x34]
  008d8	e2833008	 add         r3, r3, #8
  008dc	e58d3020	 str         r3, [sp, #0x20]
  008e0	e59d3020	 ldr         r3, [sp, #0x20]
  008e4	e5931000	 ldr         r1, [r3]
  008e8	e59d3034	 ldr         r3, [sp, #0x34]
  008ec	e2833004	 add         r3, r3, #4
  008f0	e5930000	 ldr         r0, [r3]
  008f4	eb000000	 bl          OALPCIGetId
  008f8	e58d0024	 str         r0, [sp, #0x24]
  008fc	e59d3024	 ldr         r3, [sp, #0x24]
  00900	e58d300c	 str         r3, [sp, #0xC]

; 327  :                 if (id != pDevice->id) break;

  00904	e59d3038	 ldr         r3, [sp, #0x38]
  00908	e2833008	 add         r3, r3, #8
  0090c	e59d200c	 ldr         r2, [sp, #0xC]
  00910	e5933000	 ldr         r3, [r3]
  00914	e1520003	 cmp         r2, r3
  00918	0a000000	 beq         |$LN2@OALKitlDev@2|
  0091c	ea000005	 b           |$LN6@OALKitlDev@2|
  00920		 |$LN2@OALKitlDev@2|

; 328  :                 type = pDevice->type;

  00920	e59d3038	 ldr         r3, [sp, #0x38]
  00924	e2833010	 add         r3, r3, #0x10
  00928	e5933000	 ldr         r3, [r3]
  0092c	e58d3008	 str         r3, [sp, #8]

; 329  :                 rc = TRUE;

  00930	e3a03001	 mov         r3, #1
  00934	e58d3004	 str         r3, [sp, #4]
  00938		 |$LN6@OALKitlDev@2|

; 330  :             }                
; 331  :             break;
; 332  : #endif
; 333  :         }
; 334  : 
; 335  :         // If we don't identify device skip it
; 336  :         if (!rc) {

  00938	e59d3004	 ldr         r3, [sp, #4]
  0093c	e3530000	 cmp         r3, #0
  00940	1a000003	 bne         |$LN1@OALKitlDev@2|

; 337  :             pDevice++;

  00944	e59d3038	 ldr         r3, [sp, #0x38]
  00948	e2833018	 add         r3, r3, #0x18
  0094c	e58d3038	 str         r3, [sp, #0x38]

; 338  :             continue;

  00950	eaffffb3	 b           |$LN17@OALKitlDev@2|
  00954		 |$LN1@OALKitlDev@2|

; 339  :         }
; 340  :             
; 341  :         // We get all we need
; 342  :         break;

  00954	ea000000	 b           |$LN9@OALKitlDev@2|

; 343  :     }

  00958	eaffffb1	 b           |$LN10@OALKitlDev@2|
  0095c		 |$LN9@OALKitlDev@2|

; 344  : 
; 345  : 
; 346  :     KITL_RETAILMSG(ZONE_KITL_OAL, ("-OALKitlDeviceType(type = %d)\r\n", type));

  0095c	e59f3044	 ldr         r3, [pc, #0x44]
  00960	e5933440	 ldr         r3, [r3, #0x440]
  00964	e3130a01	 tst         r3, #1, 20
  00968	0a000005	 beq         |$LN15@OALKitlDev@2|
  0096c	e59d1008	 ldr         r1, [sp, #8]
  00970	e59f002c	 ldr         r0, [pc, #0x2C]
  00974	eb000000	 bl          KITLOutputDebugString
  00978	e3a03001	 mov         r3, #1
  0097c	e58d3028	 str         r3, [sp, #0x28]
  00980	ea000001	 b           |$LN16@OALKitlDev@2|
  00984		 |$LN15@OALKitlDev@2|
  00984	e3a03000	 mov         r3, #0
  00988	e58d3028	 str         r3, [sp, #0x28]
  0098c		 |$LN16@OALKitlDev@2|

; 347  :     return type;

  0098c	e59d3008	 ldr         r3, [sp, #8]
  00990	e58d3014	 str         r3, [sp, #0x14]

; 348  : }

  00994	e59d0014	 ldr         r0, [sp, #0x14]
  00998	e28dd02c	 add         sp, sp, #0x2C
  0099c	e89d6000	 ldmia       sp, {sp, lr}
  009a0	e12fff1e	 bx          lr
  009a4		 |$LN21@OALKitlDev@2|
  009a4		 |$LN22@OALKitlDev@2|
  009a4	00000000	 DCD         |??_C@_0CA@ECNOOFDD@?9OALKitlDeviceType?$CItype?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  009a8		 |$LN23@OALKitlDev@2|
  009a8	00000000	 DCD         |dpCurSettings|
  009ac		 |$LN24@OALKitlDev@2|
  009ac	00000000	 DCD         |??_C@_0CJ@HOEFFCBD@?$CLOALKitlDeviceType?$CI?$CFd?1?$CFd?1?$CF08x?0?50@|
  009b0		 |$M43294|

			 ENDP  ; |OALKitlDeviceType|

	END
