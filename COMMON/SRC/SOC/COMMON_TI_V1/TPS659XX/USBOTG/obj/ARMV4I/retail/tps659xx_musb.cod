; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\TPS659XX\USBOTG\tps659xx_musb.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|DEVICE_IFC_TWL_GUID| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|DEVICE_IFC_TWL_GUID| DCD 0xdef0a04b
	DCW	0xb967
	DCW	0x43db
	DCB	0x95
	DCB	0x9e
	DCB	0xd9
	DCB	0xfc
	DCB	0x62
	DCB	0x25
	DCB	0xcd
	DCB	0xeb
	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T36633| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36630|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M36631|

			 ENDP  ; |SetEvent|

	EXPORT	|??0HSUSBOTGTransceiver@@QAA@XZ|	; HSUSBOTGTransceiver::HSUSBOTGTransceiver
	EXPORT	|??_7HSUSBOTGTransceiver@@6B@| [ DATA ]	; HSUSBOTGTransceiver::`vftable'
	IMPORT	|_purecall|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\transceiver_musb.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36643| DCD	|$LN5@HSUSBOTGTr|
	DCD	0x40000500

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7HSUSBOTGTransceiver@@6B@| DCD |_purecall|		; HSUSBOTGTransceiver::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0HSUSBOTGTransceiver@@QAA@XZ| PROC	; HSUSBOTGTransceiver::HSUSBOTGTransceiver

; 23   :     HSUSBOTGTransceiver() {};

  00000		 |$LN5@HSUSBOTGTr|
  00000		 |$M36640|
  00000	e1a02000	 mov         r2, r0
  00004	e59f3004	 ldr         r3, [pc, #4]
  00008	e5823000	 str         r3, [r2]
  0000c	e12fff1e	 bx          lr
  00010		 |$LN6@HSUSBOTGTr|
  00010		 |$LN7@HSUSBOTGTr|
  00010	00000000	 DCD         |??_7HSUSBOTGTransceiver@@6B@|
  00014		 |$M36641|

			 ENDP  ; |??0HSUSBOTGTransceiver@@QAA@XZ|, HSUSBOTGTransceiver::HSUSBOTGTransceiver

	EXPORT	|??1HSUSBOTGTransceiver@@QAA@XZ|	; HSUSBOTGTransceiver::~HSUSBOTGTransceiver

  00000			 AREA	 |.pdata|, PDATA
|$T36653| DCD	|$LN5@HSUSBOTGTr@2|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1HSUSBOTGTransceiver@@QAA@XZ| PROC	; HSUSBOTGTransceiver::~HSUSBOTGTransceiver

; 24   :     ~HSUSBOTGTransceiver() {};

  00000		 |$LN5@HSUSBOTGTr@2|
  00000		 |$M36650|
  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5803000	 str         r3, [r0]
  00008	e12fff1e	 bx          lr
  0000c		 |$LN6@HSUSBOTGTr@2|
  0000c		 |$LN7@HSUSBOTGTr@2|
  0000c	00000000	 DCD         |??_7HSUSBOTGTransceiver@@6B@|
  00010		 |$M36651|

			 ENDP  ; |??1HSUSBOTGTransceiver@@QAA@XZ|, HSUSBOTGTransceiver::~HSUSBOTGTransceiver

	EXPORT	|?ReadOmapTriton2@HSUSBOTGTransceiverTps659xx@@AAAHKPAE@Z| ; HSUSBOTGTransceiverTps659xx::ReadOmapTriton2
	IMPORT	|TWLReadRegs|
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\usbotg\tps659xx_musb.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T36667| DCD	|$LN5@ReadOmapTr|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ReadOmapTriton2@HSUSBOTGTransceiverTps659xx@@AAAHKPAE@Z| PROC ; HSUSBOTGTransceiverTps659xx::ReadOmapTriton2

; 59   : {

  00000		 |$LN5@ReadOmapTr|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36664|

; 60   :     PREFAST_ASSERT(m_hTriton2Handle != NULL);
; 61   :     return (TWLReadRegs(m_hTriton2Handle, reg, pData, sizeof(BYTE)));

  00004	e5900004	 ldr         r0, [r0, #4]
  00008	e3a03001	 mov         r3, #1
  0000c	eb000000	 bl          TWLReadRegs

; 62   : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M36665|

			 ENDP  ; |?ReadOmapTriton2@HSUSBOTGTransceiverTps659xx@@AAAHKPAE@Z|, HSUSBOTGTransceiverTps659xx::ReadOmapTriton2

	EXPORT	|?WriteOmapTriton2@HSUSBOTGTransceiverTps659xx@@AAAHKE@Z| ; HSUSBOTGTransceiverTps659xx::WriteOmapTriton2
	IMPORT	|TWLWriteRegs|

  00000			 AREA	 |.pdata|, PDATA
|$T36678| DCD	|$LN5@WriteOmapT|
	DCD	0x40000903
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WriteOmapTriton2@HSUSBOTGTransceiverTps659xx@@AAAHKE@Z| PROC ; HSUSBOTGTransceiverTps659xx::WriteOmapTriton2

; 69   : {

  00000		 |$LN5@WriteOmapT|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M36675|

; 70   :     PREFAST_ASSERT(m_hTriton2Handle != NULL);
; 71   :     return (TWLWriteRegs(m_hTriton2Handle, reg, &Data, sizeof(Data)));

  0000c	e5900004	 ldr         r0, [r0, #4]
  00010	e3a03001	 mov         r3, #1
  00014	e28d2010	 add         r2, sp, #0x10
  00018	eb000000	 bl          TWLWriteRegs

; 72   : }

  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M36676|

			 ENDP  ; |?WriteOmapTriton2@HSUSBOTGTransceiverTps659xx@@AAAHKE@Z|, HSUSBOTGTransceiverTps659xx::WriteOmapTriton2

	EXPORT	|?Configure@HSUSBOTGTransceiverTps659xx@@AAAXXZ| ; HSUSBOTGTransceiverTps659xx::Configure
	IMPORT	|StallExecution|

  00000			 AREA	 |.pdata|, PDATA
|$T36775| DCD	|$LN63@Configure|
	DCD	0x4000bc02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Configure@HSUSBOTGTransceiverTps659xx@@AAAXXZ| PROC ; HSUSBOTGTransceiverTps659xx::Configure

; 84   : {

  00000		 |$LN63@Configure|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M36772|
  00008	e1a04000	 mov         r4, r0

; 85   :     BYTE  bModeBits;
; 86   : 
; 87   :     if (!m_hTriton2Handle)

  0000c	e5943004	 ldr         r3, [r4, #4]
  00010	e1b00003	 movs        r0, r3
  00014	0a0000b2	 beq         |$LN57@Configure|

; 88   :     {
; 89   :         DEBUGMSG(ZONE_OTG_ERROR, (TEXT("Failed to configure the T2 board\r\n")));
; 90   :         return;
; 91   :     }
; 92   :     
; 93   :     // set for interrupt from ULPI Rx CMD to Link  
; 94   :     bModeBits = OTHER_IFC_CTRL_ALT_INT_REROUTE;

  00018	e3a03001	 mov         r3, #1

; 95   :     WriteOmapTriton2(TWL_OTHER_IFC_CTRL_CLR, bModeBits);

  0001c	e3a02001	 mov         r2, #1
  00020	e5cd3000	 strb        r3, [sp]
  00024	e5cd2004	 strb        r2, [sp, #4]
  00028	e3a03001	 mov         r3, #1
  0002c	e28d2004	 add         r2, sp, #4
  00030	e3a01085	 mov         r1, #0x85
  00034	eb000000	 bl          TWLWriteRegs

; 96   :     
; 97   :     // Set the DP/DM
; 98   :     bModeBits = OTHER_INT_EN_RISE_DM_HI | OTHER_INT_EN_RISE_DP_HI;
; 99   :     WriteOmapTriton2(TWL_OTHER_INT_EN_RISE_SET, bModeBits);

  00038	e5940004	 ldr         r0, [r4, #4]
  0003c	e3a0e060	 mov         lr, #0x60
  00040	e3a05060	 mov         r5, #0x60
  00044	e3a03001	 mov         r3, #1
  00048	e28d2004	 add         r2, sp, #4
  0004c	e3a01087	 mov         r1, #0x87
  00050	e5cde000	 strb        lr, [sp]
  00054	e5cd5004	 strb        r5, [sp, #4]
  00058	eb000000	 bl          TWLWriteRegs

; 100  :     WriteOmapTriton2(TWL_OTHER_INT_EN_FALL_SET, bModeBits);

  0005c	e5dd2000	 ldrb        r2, [sp]
  00060	e5940004	 ldr         r0, [r4, #4]
  00064	e3a03001	 mov         r3, #1
  00068	e5cd2004	 strb        r2, [sp, #4]
  0006c	e28d2004	 add         r2, sp, #4
  00070	e3a0108a	 mov         r1, #0x8A
  00074	eb000000	 bl          TWLWriteRegs

; 101  :     
; 102  :     // Setting to IFC_CTRL register for ULPI operation mode
; 103  :     bModeBits = IFC_CTRL_FSLSSERIALMODE_3PIN | IFC_CTRL_CARKITMODE;
; 104  :     WriteOmapTriton2(TWL_IFC_CTRL_CLR, bModeBits);

  00078	e5940004	 ldr         r0, [r4, #4]
  0007c	e3a0e006	 mov         lr, #6
  00080	e3a05006	 mov         r5, #6
  00084	e3a03001	 mov         r3, #1
  00088	e28d2004	 add         r2, sp, #4
  0008c	e3a01009	 mov         r1, #9
  00090	e5cde000	 strb        lr, [sp]
  00094	e5cd5004	 strb        r5, [sp, #4]
  00098	eb000000	 bl          TWLWriteRegs

; 105  :     
; 106  :     // Setting to TWL_CARKIT_CTRL_CLR register for ULPI operation mode
; 107  :     bModeBits = CARKIT_CTRL_CARKITPWR |CARKIT_CTRL_TXDEN |CARKIT_CTRL_RXDEN;
; 108  :     bModeBits |= CARKIT_CTRL_SPKLEFTEN |CARKIT_CTRL_MICEN;
; 109  :     WriteOmapTriton2(TWL_CARKIT_CTRL_CLR, bModeBits);

  0009c	e5940004	 ldr         r0, [r4, #4]
  000a0	e3a0e05d	 mov         lr, #0x5D
  000a4	e3a0505d	 mov         r5, #0x5D
  000a8	e3a03001	 mov         r3, #1
  000ac	e28d2004	 add         r2, sp, #4
  000b0	e3a0101b	 mov         r1, #0x1B
  000b4	e5cde000	 strb        lr, [sp]
  000b8	e5cd5004	 strb        r5, [sp, #4]
  000bc	eb000000	 bl          TWLWriteRegs

; 110  :     
; 111  :     
; 112  :     {
; 113  :         BYTE bCarKitReg, bIfcCtrlReg;
; 114  :         
; 115  :         ReadOmapTriton2(TWL_CARKIT_CTRL, &bCarKitReg);

  000c0	e5940004	 ldr         r0, [r4, #4]
  000c4	e3a03001	 mov         r3, #1
  000c8	e28d2005	 add         r2, sp, #5
  000cc	e3a01019	 mov         r1, #0x19
  000d0	eb000000	 bl          TWLReadRegs

; 116  :         ReadOmapTriton2(TWL_IFC_CTRL, &bIfcCtrlReg);

  000d4	e5940004	 ldr         r0, [r4, #4]
  000d8	e3a03001	 mov         r3, #1
  000dc	e28d2006	 add         r2, sp, #6
  000e0	e3a01007	 mov         r1, #7
  000e4	eb000000	 bl          TWLReadRegs

; 117  :         DEBUGMSG(ZONE_OTG_INFO, (TEXT("HSUSBOTGTransceiver: CARKIT_Reg(0x%x), IFC_CTRL_Reg(0x%x)\r\n"), 
; 118  :             bCarKitReg, bIfcCtrlReg));
; 119  :         
; 120  :         ReadOmapTriton2(TWL_USB_INT_EN_RISE, &bCarKitReg);

  000e8	e5940004	 ldr         r0, [r4, #4]
  000ec	e3a03001	 mov         r3, #1
  000f0	e28d2005	 add         r2, sp, #5
  000f4	e3a0100d	 mov         r1, #0xD
  000f8	eb000000	 bl          TWLReadRegs

; 121  :         ReadOmapTriton2(TWL_USB_INT_EN_FALL, &bIfcCtrlReg);

  000fc	e5940004	 ldr         r0, [r4, #4]
  00100	e3a03001	 mov         r3, #1
  00104	e28d2006	 add         r2, sp, #6
  00108	e3a01010	 mov         r1, #0x10
  0010c	eb000000	 bl          TWLReadRegs

; 122  :         DEBUGMSG(ZONE_OTG_INFO, (TEXT("HSUSBOTGTransceiver: TWL_USB_INT_EN_RISE(0x%x), TWL_USB_INT_EN_FALL(0x%x)\r\n"), 
; 123  :             bCarKitReg, bIfcCtrlReg));
; 124  :     }
; 125  :     
; 126  :     
; 127  :     {
; 128  :         UCHAR sts;
; 129  :         UCHAR ctrl;
; 130  :         
; 131  :         // Lock PHY: start
; 132  :         if (ReadOmapTriton2(TWL_PHY_CLK_CTRL_STS, &sts))

  00110	e5940004	 ldr         r0, [r4, #4]
  00114	e3a03001	 mov         r3, #1
  00118	e28d2001	 add         r2, sp, #1
  0011c	e3a010ff	 mov         r1, #0xFF
  00120	eb000000	 bl          TWLReadRegs
  00124	e3500000	 cmp         r0, #0
  00128	0a00002b	 beq         |$LN3@Configure|

; 133  :         {
; 134  :             int iCount = 500;
; 135  :             if (((sts & PHY_CLK_CTRL_STS_PHY_DPLL_LOCK) == 0) && ReadOmapTriton2(TWL_PHY_CLK_CTRL, &ctrl))

  0012c	e5dd3001	 ldrb        r3, [sp, #1]
  00130	e3a05f7d	 mov         r5, #0x7D, 30
  00134	e3130001	 tst         r3, #1
  00138	1a000027	 bne         |$LN3@Configure|
  0013c	e5940004	 ldr         r0, [r4, #4]
  00140	e3a03001	 mov         r3, #1
  00144	e28d2002	 add         r2, sp, #2
  00148	e3a010fe	 mov         r1, #0xFE
  0014c	eb000000	 bl          TWLReadRegs
  00150	e3500000	 cmp         r0, #0
  00154	0a000020	 beq         |$LN3@Configure|
  00158	e3a06000	 mov         r6, #0
  0015c		 |$LL5@Configure|

; 136  :             {
; 137  :                 BOOL fSuccess;                
; 138  :                 do 
; 139  :                 {
; 140  :                     ctrl |= PHY_CLK_CTRL_REQ_PHY_DPLL_CLK;                

  0015c	e5dd3002	 ldrb        r3, [sp, #2]

; 141  :                     WriteOmapTriton2(TWL_PHY_CLK_CTRL, ctrl);

  00160	e5940004	 ldr         r0, [r4, #4]
  00164	e28d2004	 add         r2, sp, #4
  00168	e3833001	 orr         r3, r3, #1
  0016c	e5cd3002	 strb        r3, [sp, #2]
  00170	e5cd3004	 strb        r3, [sp, #4]
  00174	e3a03001	 mov         r3, #1
  00178	e3a010fe	 mov         r1, #0xFE
  0017c	eb000000	 bl          TWLWriteRegs

; 142  :                     sts = 0x00;
; 143  :                     if (ReadOmapTriton2(TWL_PHY_CLK_CTRL_STS, &sts) &&(sts & PHY_CLK_CTRL_STS_PHY_DPLL_LOCK))

  00180	e5940004	 ldr         r0, [r4, #4]
  00184	e3a03001	 mov         r3, #1
  00188	e28d2001	 add         r2, sp, #1
  0018c	e3a010ff	 mov         r1, #0xFF
  00190	e5cd6001	 strb        r6, [sp, #1]
  00194	eb000000	 bl          TWLReadRegs
  00198	e3500000	 cmp         r0, #0
  0019c	0a000002	 beq         |$LN2@Configure|
  001a0	e5dd3001	 ldrb        r3, [sp, #1]
  001a4	e3130001	 tst         r3, #1
  001a8	1a00000b	 bne         |$LN3@Configure|
  001ac		 |$LN2@Configure|

; 144  :                     {
; 145  :                         break;
; 146  :                     }
; 147  :                     iCount--;
; 148  :                     StallExecution(50);

  001ac	e3a00032	 mov         r0, #0x32
  001b0	e2455001	 sub         r5, r5, #1
  001b4	eb000000	 bl          StallExecution

; 149  :                     fSuccess = ReadOmapTriton2(TWL_PHY_CLK_CTRL, &ctrl);

  001b8	e5940004	 ldr         r0, [r4, #4]
  001bc	e3a03001	 mov         r3, #1
  001c0	e28d2002	 add         r2, sp, #2
  001c4	e3a010fe	 mov         r1, #0xFE
  001c8	eb000000	 bl          TWLReadRegs
  001cc	e3500000	 cmp         r0, #0

; 150  :                 } while (fSuccess &&(iCount > 0));                                

  001d0	0a000001	 beq         |$LN3@Configure|
  001d4	e3550000	 cmp         r5, #0
  001d8	caffffdf	 bgt         |$LL5@Configure|
  001dc		 |$LN3@Configure|

; 151  :             }        
; 152  :         }
; 153  :     }
; 154  :     
; 155  :     // Setting to TWL_USB_INT_EN_RISE_SET register 
; 156  :     WriteOmapTriton2(TWL_USB_INT_EN_RISE_SET, 0x1F);

  001dc	e5940004	 ldr         r0, [r4, #4]
  001e0	e3a0e01f	 mov         lr, #0x1F
  001e4	e3a03001	 mov         r3, #1
  001e8	e28d2004	 add         r2, sp, #4
  001ec	e3a0100e	 mov         r1, #0xE
  001f0	e5cde004	 strb        lr, [sp, #4]
  001f4	eb000000	 bl          TWLWriteRegs

; 157  :     
; 158  :     // Setting to TWL_USB_INT_EN_FALL_SET register
; 159  :     WriteOmapTriton2(TWL_USB_INT_EN_FALL_SET, 0x1F);

  001f8	e5940004	 ldr         r0, [r4, #4]
  001fc	e3a0e01f	 mov         lr, #0x1F
  00200	e3a03001	 mov         r3, #1
  00204	e28d2004	 add         r2, sp, #4
  00208	e3a01011	 mov         r1, #0x11
  0020c	e5cde004	 strb        lr, [sp, #4]
  00210	eb000000	 bl          TWLWriteRegs

; 160  : 
; 161  :     // Configureing the debounce time as 15ms
; 162  :     // Earlier it was 30ms. This is modified as sees_end is 
; 163  :     // not being detected. This may have an impact on HNP/SRP.
; 164  : //    WriteOmapTriton2(TWL_VBUS_DEBOUNCE,0xF); // This change affects CETK tests.
; 165  :     
; 166  :     
; 167  :     // Enable OTG
; 168  :     WriteOmapTriton2(TWL_POWER_CTRL_SET, POWER_CTRL_OTG_EN);

  00214	e5940004	 ldr         r0, [r4, #4]
  00218	e3a0e020	 mov         lr, #0x20
  0021c	e3a03001	 mov         r3, #1
  00220	e28d2004	 add         r2, sp, #4
  00224	e3a010ad	 mov         r1, #0xAD
  00228	e5cde004	 strb        lr, [sp, #4]
  0022c	eb000000	 bl          TWLWriteRegs

; 169  :     
; 170  :     // Setting to normal operation mode
; 171  :     bModeBits = FUNC_CTRL_XCVRSELECT_MASK | FUNC_CTRL_OPMODE_MASK;
; 172  :     WriteOmapTriton2(TWL_FUNC_CTRL_CLR, bModeBits);

  00230	e5940004	 ldr         r0, [r4, #4]
  00234	e3a0e01b	 mov         lr, #0x1B
  00238	e3a0501b	 mov         r5, #0x1B
  0023c	e3a03001	 mov         r3, #1
  00240	e28d2004	 add         r2, sp, #4
  00244	e3a01006	 mov         r1, #6
  00248	e5cde000	 strb        lr, [sp]
  0024c	e5cd5004	 strb        r5, [sp, #4]
  00250	eb000000	 bl          TWLWriteRegs

; 173  :     
; 174  :     {
; 175  :         BYTE bCarKitReg, bIfcCtrlReg;
; 176  :         
; 177  :         ReadOmapTriton2(TWL_CARKIT_CTRL, &bCarKitReg);

  00254	e5940004	 ldr         r0, [r4, #4]
  00258	e3a03001	 mov         r3, #1
  0025c	e28d2007	 add         r2, sp, #7
  00260	e3a01019	 mov         r1, #0x19
  00264	eb000000	 bl          TWLReadRegs

; 178  :         ReadOmapTriton2(TWL_IFC_CTRL, &bIfcCtrlReg);

  00268	e5940004	 ldr         r0, [r4, #4]
  0026c	e3a03001	 mov         r3, #1
  00270	e28d2008	 add         r2, sp, #8
  00274	e3a01007	 mov         r1, #7
  00278	eb000000	 bl          TWLReadRegs

; 179  :         DEBUGMSG(ZONE_OTG_INFO, (TEXT("HSUSBOTGTransceiver: CARKIT_Reg(0x%x), IFC_CTRL_Reg(0x%x)\r\n"), 
; 180  :             bCarKitReg, bIfcCtrlReg));
; 181  :         
; 182  :         ReadOmapTriton2(TWL_USB_INT_EN_RISE, &bCarKitReg);

  0027c	e5940004	 ldr         r0, [r4, #4]
  00280	e3a03001	 mov         r3, #1
  00284	e28d2007	 add         r2, sp, #7
  00288	e3a0100d	 mov         r1, #0xD
  0028c	eb000000	 bl          TWLReadRegs

; 183  :         ReadOmapTriton2(TWL_USB_INT_EN_FALL, &bIfcCtrlReg);

  00290	e5940004	 ldr         r0, [r4, #4]
  00294	e3a03001	 mov         r3, #1
  00298	e28d2008	 add         r2, sp, #8
  0029c	e3a01010	 mov         r1, #0x10
  002a0	eb000000	 bl          TWLReadRegs

; 184  :         DEBUGMSG(ZONE_OTG_INFO, (TEXT("HSUSBOTGTransceiver: TWL_USB_INT_EN_RISE(0x%x), TWL_USB_INT_EN_FALL(0x%x)\r\n"), 
; 185  :             bCarKitReg, bIfcCtrlReg));
; 186  :     }
; 187  : 
; 188  :     // configure USB presence interrupt for rising edge
; 189  :     ReadOmapTriton2(TWL_PWR_EDR1, &bModeBits);

  002a4	e5940004	 ldr         r0, [r4, #4]
  002a8	e3a05803	 mov         r5, #3, 16
  002ac	e3851033	 orr         r1, r5, #0x33
  002b0	e3a03001	 mov         r3, #1
  002b4	e28d2000	 add         r2, sp, #0
  002b8	eb000000	 bl          TWLReadRegs

; 190  :     bModeBits |=  0x20;

  002bc	e5dd2000	 ldrb        r2, [sp]

; 191  :     bModeBits &= ~0x10;
; 192  :     WriteOmapTriton2(TWL_PWR_EDR1, bModeBits);

  002c0	e5940004	 ldr         r0, [r4, #4]
  002c4	e3a03001	 mov         r3, #1
  002c8	e20220cf	 and         r2, r2, #0xCF
  002cc	e3822020	 orr         r2, r2, #0x20
  002d0	e5cd2000	 strb        r2, [sp]
  002d4	e5cd2004	 strb        r2, [sp, #4]
  002d8	e28d2004	 add         r2, sp, #4
  002dc	e3851033	 orr         r1, r5, #0x33
  002e0	eb000000	 bl          TWLWriteRegs
  002e4		 |$LN57@Configure|

; 193  :     
; 194  :     DEBUGMSG(ZONE_OTG_INFO, (TEXT("HSUSBOTGTransceiver:Configure success\r\n")));
; 195  : }

  002e4	e28dd00c	 add         sp, sp, #0xC
  002e8	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  002ec	e12fff1e	 bx          lr
  002f0		 |$M36773|

			 ENDP  ; |?Configure@HSUSBOTGTransceiverTps659xx@@AAAXXZ|, HSUSBOTGTransceiverTps659xx::Configure

	EXPORT	|?EnableVBusDischarge@HSUSBOTGTransceiverTps659xx@@UAAXH@Z| ; HSUSBOTGTransceiverTps659xx::EnableVBusDischarge

  00000			 AREA	 |.pdata|, PDATA
|$T36793| DCD	|$LN12@EnableVBus|
	DCD	0x40000e02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableVBusDischarge@HSUSBOTGTransceiverTps659xx@@UAAXH@Z| PROC ; HSUSBOTGTransceiverTps659xx::EnableVBusDischarge

; 198  : {

  00000		 |$LN12@EnableVBus|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36790|
  00008	e3510000	 cmp         r1, #0

; 199  : 
; 200  :     if (fDischarge)
; 201  :     {
; 202  :         WriteOmapTriton2(TWL_OTG_CTRL_SET, TWL_OTG_CTRL_DISCHRGVBUS);

  0000c	e5900004	 ldr         r0, [r0, #4]
  00010	e3a0e008	 mov         lr, #8
  00014	13a0100b	 movne       r1, #0xB
  00018	e3a03001	 mov         r3, #1
  0001c	e28d2000	 add         r2, sp, #0

; 203  :     }
; 204  :     else
; 205  :     {
; 206  :         WriteOmapTriton2(TWL_OTG_CTRL_CLR, TWL_OTG_CTRL_DISCHRGVBUS);

  00020	03a0100c	 moveq       r1, #0xC
  00024	e5cde000	 strb        lr, [sp]
  00028	eb000000	 bl          TWLWriteRegs

; 207  :     }
; 208  : }

  0002c	e28dd004	 add         sp, sp, #4
  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$M36791|

			 ENDP  ; |?EnableVBusDischarge@HSUSBOTGTransceiverTps659xx@@UAAXH@Z|, HSUSBOTGTransceiverTps659xx::EnableVBusDischarge

	EXPORT	|?ResetPHY@HSUSBOTGTransceiverTps659xx@@UAAHXZ| ; HSUSBOTGTransceiverTps659xx::ResetPHY

  00000			 AREA	 |.pdata|, PDATA
|$T36836| DCD	|$LN25@ResetPHY|
	DCD	0x40004102
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResetPHY@HSUSBOTGTransceiverTps659xx@@UAAHXZ| PROC ; HSUSBOTGTransceiverTps659xx::ResetPHY

; 211  : {

  00000		 |$LN25@ResetPHY|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M36833|
  00008	e1a04000	 mov         r4, r0

; 212  : 		BYTE uRegister = 0;
; 213  : 		BOOL rc = FALSE;
; 214  : 		ReadOmapTriton2(TWL_FUNC_CTRL, &uRegister);

  0000c	e5940004	 ldr         r0, [r4, #4]
  00010	e3a0e000	 mov         lr, #0
  00014	e3a03001	 mov         r3, #1
  00018	e28d2000	 add         r2, sp, #0
  0001c	e3a01004	 mov         r1, #4
  00020	e5cde000	 strb        lr, [sp]
  00024	eb000000	 bl          TWLReadRegs

; 215  : 		ReadOmapTriton2(TWL_PHY_PWR_CTRL, &uRegister);

  00028	e5940004	 ldr         r0, [r4, #4]
  0002c	e3a03001	 mov         r3, #1
  00030	e28d2000	 add         r2, sp, #0
  00034	e3a010fd	 mov         r1, #0xFD
  00038	eb000000	 bl          TWLReadRegs

; 216  : 		WriteOmapTriton2(TWL_PHY_PWR_CTRL, PHY_PWR_CTRL_PHYPWD);

  0003c	e5940004	 ldr         r0, [r4, #4]
  00040	e3a0e001	 mov         lr, #1
  00044	e3a03001	 mov         r3, #1
  00048	e28d2004	 add         r2, sp, #4
  0004c	e3a010fd	 mov         r1, #0xFD
  00050	e5cde004	 strb        lr, [sp, #4]
  00054	eb000000	 bl          TWLWriteRegs

; 217  : 		ReadOmapTriton2(TWL_FUNC_CTRL, &uRegister);

  00058	e5940004	 ldr         r0, [r4, #4]
  0005c	e3a03001	 mov         r3, #1
  00060	e28d2000	 add         r2, sp, #0
  00064	e3a01004	 mov         r1, #4
  00068	eb000000	 bl          TWLReadRegs

; 218  : 		WriteOmapTriton2(TWL_PHY_PWR_CTRL, 0x0);

  0006c	e5940004	 ldr         r0, [r4, #4]
  00070	e3a0e000	 mov         lr, #0
  00074	e3a03001	 mov         r3, #1
  00078	e28d2004	 add         r2, sp, #4
  0007c	e3a010fd	 mov         r1, #0xFD
  00080	e5cde004	 strb        lr, [sp, #4]
  00084	eb000000	 bl          TWLWriteRegs

; 219  : 		ReadOmapTriton2(TWL_PHY_PWR_CTRL, &uRegister);

  00088	e5940004	 ldr         r0, [r4, #4]
  0008c	e3a03001	 mov         r3, #1
  00090	e28d2000	 add         r2, sp, #0
  00094	e3a010fd	 mov         r1, #0xFD
  00098	eb000000	 bl          TWLReadRegs

; 220  : 		ReadOmapTriton2(TWL_FUNC_CTRL, &uRegister);

  0009c	e5940004	 ldr         r0, [r4, #4]
  000a0	e3a03001	 mov         r3, #1
  000a4	e28d2000	 add         r2, sp, #0
  000a8	e3a01004	 mov         r1, #4
  000ac	eb000000	 bl          TWLReadRegs

; 221  : 		ReadOmapTriton2(TWL_FUNC_CTRL, &uRegister);

  000b0	e5940004	 ldr         r0, [r4, #4]
  000b4	e3a03001	 mov         r3, #1
  000b8	e28d2000	 add         r2, sp, #0
  000bc	e3a01004	 mov         r1, #4
  000c0	eb000000	 bl          TWLReadRegs

; 222  : 		WriteOmapTriton2(TWL_FUNC_CTRL_SET, (0x20) );

  000c4	e5940004	 ldr         r0, [r4, #4]
  000c8	e3a0e020	 mov         lr, #0x20
  000cc	e3a03001	 mov         r3, #1
  000d0	e28d2004	 add         r2, sp, #4
  000d4	e3a01005	 mov         r1, #5
  000d8	e5cde004	 strb        lr, [sp, #4]
  000dc	eb000000	 bl          TWLWriteRegs

; 223  : 		ReadOmapTriton2(TWL_FUNC_CTRL, &uRegister);

  000e0	e5940004	 ldr         r0, [r4, #4]
  000e4	e3a03001	 mov         r3, #1
  000e8	e28d2000	 add         r2, sp, #0
  000ec	e3a01004	 mov         r1, #4
  000f0	eb000000	 bl          TWLReadRegs

; 224  : 		return rc;

  000f4	e3a00000	 mov         r0, #0

; 225  : }

  000f8	e28dd008	 add         sp, sp, #8
  000fc	e8bd4010	 ldmia       sp!, {r4, lr}
  00100	e12fff1e	 bx          lr
  00104		 |$M36834|

			 ENDP  ; |?ResetPHY@HSUSBOTGTransceiverTps659xx@@UAAHXZ|, HSUSBOTGTransceiverTps659xx::ResetPHY

	EXPORT	|?IsADeviceConnected@HSUSBOTGTransceiverTps659xx@@UAAHXZ| ; HSUSBOTGTransceiverTps659xx::IsADeviceConnected

  00000			 AREA	 |.pdata|, PDATA
|$T36850| DCD	|$LN8@IsADeviceC|
	DCD	0x40001202
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsADeviceConnected@HSUSBOTGTransceiverTps659xx@@UAAHXZ| PROC ; HSUSBOTGTransceiverTps659xx::IsADeviceConnected

; 227  : {

  00000		 |$LN8@IsADeviceC|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36847|

; 228  :     BYTE uRegister = 0;
; 229  :     BOOL rc = FALSE;
; 230  : 
; 231  :     // Check if a B device is connected
; 232  :     ReadOmapTriton2(TWL_STS_HW_CONDITIONS, &uRegister);

  00008	e5900004	 ldr         r0, [r0, #4]
  0000c	e3a03803	 mov         r3, #3, 16
  00010	e3831045	 orr         r1, r3, #0x45
  00014	e3a0e000	 mov         lr, #0
  00018	e3a03001	 mov         r3, #1
  0001c	e28d2000	 add         r2, sp, #0
  00020	e5cde000	 strb        lr, [sp]
  00024	e3a04000	 mov         r4, #0
  00028	eb000000	 bl          TWLReadRegs

; 233  : 
; 234  :     // TWL_STS_USB - is set when B Device (e.g. flash drive) is connected
; 235  :     // TWL_STS_VBUS - is set when a A device ( host ) is connected
; 236  : 
; 237  :     // TWL_STS_VBUS takes a while to clear after the cable is removed so
; 238  :     // A device is identified by checking the VBUS states in devclt
; 239  :     // register of MUSB controller
; 240  :     if (uRegister & TWL_STS_VBUS)

  0002c	e5dd3000	 ldrb        r3, [sp]
  00030	e3130080	 tst         r3, #0x80

; 241  :         {
; 242  :         // A device detected
; 243  :         DEBUGMSG(ZONE_OTG_INFO, (TEXT("HSUSBOTGTransceiver::IsBDeviceConnected : TRUE\r\n")));
; 244  :         rc = TRUE;

  00034	13a04001	 movne       r4, #1

; 245  :         }
; 246  : 
; 247  :     return rc;
; 248  : }

  00038	e1a00004	 mov         r0, r4
  0003c	e28dd004	 add         sp, sp, #4
  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M36848|

			 ENDP  ; |?IsADeviceConnected@HSUSBOTGTransceiverTps659xx@@UAAHXZ|, HSUSBOTGTransceiverTps659xx::IsADeviceConnected

	EXPORT	|?IsBDeviceConnected@HSUSBOTGTransceiverTps659xx@@UAAHXZ| ; HSUSBOTGTransceiverTps659xx::IsBDeviceConnected

  00000			 AREA	 |.pdata|, PDATA
|$T36864| DCD	|$LN8@IsBDeviceC|
	DCD	0x40001202
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsBDeviceConnected@HSUSBOTGTransceiverTps659xx@@UAAHXZ| PROC ; HSUSBOTGTransceiverTps659xx::IsBDeviceConnected

; 252  : {

  00000		 |$LN8@IsBDeviceC|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36861|

; 253  :     BYTE uRegister = 0;
; 254  :     BOOL rc = FALSE;
; 255  : 
; 256  :     // Check if a B device is connected
; 257  :     ReadOmapTriton2(TWL_STS_HW_CONDITIONS, &uRegister);

  00008	e5900004	 ldr         r0, [r0, #4]
  0000c	e3a03803	 mov         r3, #3, 16
  00010	e3831045	 orr         r1, r3, #0x45
  00014	e3a0e000	 mov         lr, #0
  00018	e3a03001	 mov         r3, #1
  0001c	e28d2000	 add         r2, sp, #0
  00020	e5cde000	 strb        lr, [sp]
  00024	e3a04000	 mov         r4, #0
  00028	eb000000	 bl          TWLReadRegs

; 258  : 
; 259  :     // TWL_STS_USB - is set when B Device (e.g. flash drive) is connected
; 260  :     // TWL_STS_VBUS - is set when a A device ( host ) is connected
; 261  :     
; 262  :     // TWL_STS_VBUS takes a while to clear after the cable is removed so
; 263  :     // A device is identified by checking the VBUS states in devclt
; 264  :     // register of MUSB controller
; 265  :     if (uRegister & TWL_STS_USB)

  0002c	e5dd3000	 ldrb        r3, [sp]
  00030	e3130004	 tst         r3, #4

; 266  :         {
; 267  :         // B device detected
; 268  :         DEBUGMSG(ZONE_OTG_INFO, (TEXT("HSUSBOTGTransceiver::IsBDeviceConnected : TRUE\r\n")));
; 269  :         rc = TRUE;

  00034	13a04001	 movne       r4, #1

; 270  :         }
; 271  : 
; 272  :     return rc;
; 273  : }

  00038	e1a00004	 mov         r0, r4
  0003c	e28dd004	 add         sp, sp, #4
  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M36862|

			 ENDP  ; |?IsBDeviceConnected@HSUSBOTGTransceiverTps659xx@@UAAHXZ|, HSUSBOTGTransceiverTps659xx::IsBDeviceConnected

	EXPORT	|?SetVBusSource@HSUSBOTGTransceiverTps659xx@@UAAXH@Z| ; HSUSBOTGTransceiverTps659xx::SetVBusSource

  00000			 AREA	 |.pdata|, PDATA
|$T36879| DCD	|$LN9@SetVBusSou|
	DCD	0x40000f02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetVBusSource@HSUSBOTGTransceiverTps659xx@@UAAXH@Z| PROC ; HSUSBOTGTransceiverTps659xx::SetVBusSource

; 276  : {

  00000		 |$LN9@SetVBusSou|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36876|
  00008	e3510000	 cmp         r1, #0

; 277  :     BYTE bTemp =((fVBat)? 0x14: 0x18);        
; 278  :     WriteOmapTriton2(TWL_VUSB_DEDICATED1, bTemp);

  0000c	e5900004	 ldr         r0, [r0, #4]
  00010	13a0e014	 movne       lr, #0x14
  00014	e3a03803	 mov         r3, #3, 16
  00018	03a0e018	 moveq       lr, #0x18
  0001c	e38310d8	 orr         r1, r3, #0xD8
  00020	e3a03001	 mov         r3, #1
  00024	e28d2000	 add         r2, sp, #0
  00028	e5cde000	 strb        lr, [sp]
  0002c	eb000000	 bl          TWLWriteRegs

; 279  : #if 0
; 280  :     BYTE uRegister = 0;
; 281  :     ReadOmapTriton2(TWL_FUNC_CTRL, &uRegister);
; 282  :     RETAILMSG(1, (TEXT("+TWL_FUNC_CTRL=0x%x\r\n"),uRegister));
; 283  : 
; 284  :     ReadOmapTriton2(TWL_IFC_CTRL, &uRegister);
; 285  :     RETAILMSG(1, (TEXT("+TWL_IFC_CTRL=0x%x\r\n"),uRegister));
; 286  : 
; 287  :     ReadOmapTriton2(TWL_OTG_CTRL, &uRegister);
; 288  :     RETAILMSG(1, (TEXT("+TWL_OTG_CTRL=0x%x\r\n"),uRegister));
; 289  : 
; 290  :     ReadOmapTriton2(TWL_OTHER_FUNC_CTRL, &uRegister);
; 291  :     RETAILMSG(1, (TEXT("+TWL_OTHER_FUNC_CTRL=0x%x\r\n"),uRegister));
; 292  : 
; 293  :     ReadOmapTriton2(TWL_OTHER_INT_STS, &uRegister);
; 294  :     RETAILMSG(1, (TEXT("+TWL_OTHER_INT_STS=0x%x\r\n"),uRegister));
; 295  : 
; 296  :     ReadOmapTriton2(TWL_PHY_PWR_CTRL, &uRegister);
; 297  :     RETAILMSG(1, (TEXT("+TWL_PHY_PWR_CTRL=0x%x\r\n"),uRegister));
; 298  : 
; 299  :     ReadOmapTriton2(TWL_PHY_CLK_CTRL, &uRegister);
; 300  :     RETAILMSG(1, (TEXT("+TWL_PHY_CLK_CTRL=0x%x\r\n"),uRegister));
; 301  : 
; 302  :     ReadOmapTriton2(TWL_VUSB3V1_REMAP, &uRegister);
; 303  :     RETAILMSG(1, (TEXT("+TWL_VUSB3V1_REMAP=0x%x\r\n"),uRegister));
; 304  : 
; 305  :     ReadOmapTriton2(TWL_VUSB1V5_REMAP, &uRegister);
; 306  :     RETAILMSG(1, (TEXT("+TWL_VUSB1V5_REMAP=0x%x\r\n"),uRegister));
; 307  : 
; 308  :     ReadOmapTriton2(TWL_VUSB1V8_REMAP, &uRegister);
; 309  :     RETAILMSG(1, (TEXT("+TWL_VUSB1V8_REMAP=0x%x\r\n"),uRegister));
; 310  : #endif
; 311  : }

  00030	e28dd004	 add         sp, sp, #4
  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$M36877|

			 ENDP  ; |?SetVBusSource@HSUSBOTGTransceiverTps659xx@@UAAXH@Z|, HSUSBOTGTransceiverTps659xx::SetVBusSource

	EXPORT	|?AconnNotifHandle@HSUSBOTGTransceiverTps659xx@@UAAXPAX@Z| ; HSUSBOTGTransceiverTps659xx::AconnNotifHandle

  00000			 AREA	 |.pdata|, PDATA
|$T36888| DCD	|$LN5@AconnNotif|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AconnNotifHandle@HSUSBOTGTransceiverTps659xx@@UAAXPAX@Z| PROC ; HSUSBOTGTransceiverTps659xx::AconnNotifHandle

; 315  : {

  00000		 |$LN5@AconnNotif|
  00000		 |$M36885|

; 316  :     m_hAconnEvent = hAconnEvent;

  00000	e5801010	 str         r1, [r0, #0x10]

; 317  :     DEBUGMSG(ZONE_OTG_FUNCTION, (TEXT("HSUSBOTGTransceiverTriton2::AconnNotifHandle (0x%x)\r\n"), hAconnEvent));
; 318  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M36886|

			 ENDP  ; |?AconnNotifHandle@HSUSBOTGTransceiverTps659xx@@UAAXPAX@Z|, HSUSBOTGTransceiverTps659xx::AconnNotifHandle

	EXPORT	|?EnableWakeupInterrupt@HSUSBOTGTransceiverTps659xx@@UAAXH@Z| ; HSUSBOTGTransceiverTps659xx::EnableWakeupInterrupt
	IMPORT	|TWLWakeEnable|
	IMPORT	|TWLInterruptMask|

  00000			 AREA	 |.pdata|, PDATA
|$T36898| DCD	|$LN8@EnableWake|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableWakeupInterrupt@HSUSBOTGTransceiverTps659xx@@UAAXH@Z| PROC ; HSUSBOTGTransceiverTps659xx::EnableWakeupInterrupt

; 322  : {    

  00000		 |$LN8@EnableWake|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36895|
  00004	e3510000	 cmp         r1, #0
  00008	e1a04000	 mov         r4, r0

; 323  :     DEBUGMSG(ZONE_OTG_FUNCTION, (TEXT("HSUSBOTGTransceiverTriton2::EnableWakeupInterrupt (%d)\r\n"), fEnable));
; 324  :     if (fEnable)
; 325  :     {
; 326  :         TWLInterruptMask(m_hTriton2Handle, TWL_INTR_USB_PRES, FALSE);

  0000c	e5940004	 ldr         r0, [r4, #4]
  00010	e59f1030	 ldr         r1, [pc, #0x30]
  00014	0a000003	 beq         |$LN2@EnableWake|
  00018	e3a02000	 mov         r2, #0
  0001c	eb000000	 bl          TWLInterruptMask

; 327  :         TWLWakeEnable(m_hTriton2Handle, TWL_INTR_USB_PRES, TRUE);

  00020	e3a02001	 mov         r2, #1

; 328  :     }
; 329  :     else

  00024	ea000002	 b           |$LN5@EnableWake|
  00028		 |$LN2@EnableWake|

; 330  :     {
; 331  :         TWLInterruptMask(m_hTriton2Handle, TWL_INTR_USB_PRES, TRUE);

  00028	e3a02001	 mov         r2, #1
  0002c	eb000000	 bl          TWLInterruptMask

; 332  :         TWLWakeEnable(m_hTriton2Handle, TWL_INTR_USB_PRES, FALSE);

  00030	e3a02000	 mov         r2, #0
  00034		 |$LN5@EnableWake|
  00034	e59f100c	 ldr         r1, [pc, #0xC]
  00038	e5940004	 ldr         r0, [r4, #4]
  0003c	eb000000	 bl          TWLWakeEnable

; 333  :     }
; 334  : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN9@EnableWake|
  00048		 |$LN10@EnableWake|
  00048	02005002	 DCD         0x2005002
  0004c		 |$M36896|

			 ENDP  ; |?EnableWakeupInterrupt@HSUSBOTGTransceiverTps659xx@@UAAXH@Z|, HSUSBOTGTransceiverTps659xx::EnableWakeupInterrupt

	EXPORT	|?StateChangeThread@HSUSBOTGTransceiverTps659xx@@CAKPAX@Z| ; HSUSBOTGTransceiverTps659xx::StateChangeThread
	IMPORT	|WaitForSingleObject|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T36913| DCD	|$LN10@StateChang|
	DCD	0x40000901
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\usbotg\tps659xx_musb.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?StateChangeThread@HSUSBOTGTransceiverTps659xx@@CAKPAX@Z| PROC ; HSUSBOTGTransceiverTps659xx::StateChangeThread

; 342  : {

  00000		 |$LN10@StateChang|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36910|
  00004	e1a04000	 mov         r4, r0
  00008		 |$LL2@StateChang|

; 343  :     HSUSBOTGTransceiverTps659xx* me =(HSUSBOTGTransceiverTps659xx*)pvData;
; 344  :     
; 345  :     for (;;)
; 346  :     {
; 347  :         DWORD rc = WaitForSingleObject(me->m_hUsbPresenceEvent, INFINITE);        

  00008	e5940008	 ldr         r0, [r4, #8]
  0000c	e3e01000	 mvn         r1, #0
  00010	eb000000	 bl          WaitForSingleObject

; 348  :         
; 349  :         // usb presence interrupt
; 350  :         //
; 351  : #ifndef DEBUG
; 352  : 		UNREFERENCED_PARAMETER(rc);
; 353  : #endif
; 354  :         DEBUGMSG(ZONE_OTG_INFO, (L"########### kt: USB Presence interrupt ############0x%x\r\n",rc));                                    
; 355  : 
; 356  :         SetEvent(me->m_hAconnEvent);

  00014	e5940010	 ldr         r0, [r4, #0x10]
  00018	e3a01003	 mov         r1, #3
  0001c	eb000000	 bl          EventModify

; 357  :     }

  00020	eafffff8	 b           |$LL2@StateChang|
  00024		 |$M36911|

			 ENDP  ; |?StateChangeThread@HSUSBOTGTransceiverTps659xx@@CAKPAX@Z|, HSUSBOTGTransceiverTps659xx::StateChangeThread

	EXPORT	|??0HSUSBOTGTransceiverTps659xx@@QAA@PAUHSMUSB_T@@@Z| ; HSUSBOTGTransceiverTps659xx::HSUSBOTGTransceiverTps659xx
	EXPORT	|??_7HSUSBOTGTransceiverTps659xx@@6B@| [ DATA ] ; HSUSBOTGTransceiverTps659xx::`vftable'
	EXPORT	|?UpdateUSBVBusSleepOffState@HSUSBOTGTransceiverTps659xx@@UAAHH@Z| ; HSUSBOTGTransceiverTps659xx::UpdateUSBVBusSleepOffState
	EXPORT	|?SupportsTransceiverWakeWithoutClock@HSUSBOTGTransceiverTps659xx@@UAAHXZ| ; HSUSBOTGTransceiverTps659xx::SupportsTransceiverWakeWithoutClock
	EXPORT	|?SetLowPowerMode@HSUSBOTGTransceiverTps659xx@@UAAHXZ| ; HSUSBOTGTransceiverTps659xx::SetLowPowerMode
	EXPORT	|?IsSE0@HSUSBOTGTransceiverTps659xx@@UAAHXZ| ; HSUSBOTGTransceiverTps659xx::IsSE0
	EXPORT	|?DumpULPIRegs@HSUSBOTGTransceiverTps659xx@@UAAXXZ| ; HSUSBOTGTransceiverTps659xx::DumpULPIRegs
	EXPORT	|?Reset@HSUSBOTGTransceiverTps659xx@@UAAXXZ| ; HSUSBOTGTransceiverTps659xx::Reset
	EXPORT	|?Resume@HSUSBOTGTransceiverTps659xx@@UAAXXZ| ; HSUSBOTGTransceiverTps659xx::Resume
	IMPORT	|CreateThread|
	IMPORT	|TWLInterruptInitialize|
	IMPORT	|CreateEventW|
	IMPORT	|TWLOpen|

  00000			 AREA	 |.pdata|, PDATA
|$T36941| DCD	|$LN18@HSUSBOTGTr@3|
	DCD	0x40003602

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7HSUSBOTGTransceiverTps659xx@@6B@| DCD |?EnableVBusDischarge@HSUSBOTGTransceiverTps659xx@@UAAXH@Z| ; HSUSBOTGTransceiverTps659xx::`vftable'
	DCD	|?SetVBusSource@HSUSBOTGTransceiverTps659xx@@UAAXH@Z|
	DCD	|?EnableWakeupInterrupt@HSUSBOTGTransceiverTps659xx@@UAAXH@Z|
	DCD	|?AconnNotifHandle@HSUSBOTGTransceiverTps659xx@@UAAXPAX@Z|
	DCD	|?UpdateUSBVBusSleepOffState@HSUSBOTGTransceiverTps659xx@@UAAHH@Z|
	DCD	|?SupportsTransceiverWakeWithoutClock@HSUSBOTGTransceiverTps659xx@@UAAHXZ|
	DCD	|?SetLowPowerMode@HSUSBOTGTransceiverTps659xx@@UAAHXZ|
	DCD	|?IsSE0@HSUSBOTGTransceiverTps659xx@@UAAHXZ|
	DCD	|?DumpULPIRegs@HSUSBOTGTransceiverTps659xx@@UAAXXZ|
	DCD	|?Reset@HSUSBOTGTransceiverTps659xx@@UAAXXZ|
	DCD	|?Resume@HSUSBOTGTransceiverTps659xx@@UAAXXZ|
	DCD	|?ResetPHY@HSUSBOTGTransceiverTps659xx@@UAAHXZ|
	DCD	|?IsADeviceConnected@HSUSBOTGTransceiverTps659xx@@UAAHXZ|
	DCD	|?IsBDeviceConnected@HSUSBOTGTransceiverTps659xx@@UAAHXZ|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0HSUSBOTGTransceiverTps659xx@@QAA@PAUHSMUSB_T@@@Z| PROC ; HSUSBOTGTransceiverTps659xx::HSUSBOTGTransceiverTps659xx

; 364  : {

  00000		 |$LN18@HSUSBOTGTr@3|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M36938|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a05000	 mov         r5, r0
  00010	e59f30bc	 ldr         r3, [pc, #0xBC]
  00014	e5853000	 str         r3, [r5]

; 365  :     DEBUGMSG(ZONE_OTG_FUNCTION, (TEXT("HSUSBOTGTransceiver get called\r\n")));
; 366  :     m_hTriton2Handle = TWLOpen();

  00018	eb000000	 bl          TWLOpen
  0001c	e1a03000	 mov         r3, r0

; 367  :     m_hUsbPresenceEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00020	e5853004	 str         r3, [r5, #4]
  00024	e3a03000	 mov         r3, #0
  00028	e3a00000	 mov         r0, #0
  0002c	e3a02000	 mov         r2, #0
  00030	e3a01000	 mov         r1, #0
  00034	eb000000	 bl          CreateEventW
  00038	e3500000	 cmp         r0, #0
  0003c	e5850008	 str         r0, [r5, #8]

; 368  : 
; 369  :     m_pOTG = pOTG;

  00040	e5854014	 str         r4, [r5, #0x14]

; 370  :     
; 371  :     if (m_hUsbPresenceEvent == NULL)

  00044	0a00001c	 beq         |$cleanUp$36408|

; 372  :     {
; 373  :         DEBUGMSG(ZONE_OTG_ERROR, (L"HSUSBOTGTransceiver::HSUSBOTGTransceiver():"
; 374  :             L"! unable to allocate event handle(err=0x%08X)\r\n",
; 375  :             GetLastError())
; 376  :             );
; 377  :         return;
; 378  :     }    
; 379  :     SetVBusSource(TRUE);

  00048	e5950004	 ldr         r0, [r5, #4]
  0004c	e3a03803	 mov         r3, #3, 16
  00050	e38310d8	 orr         r1, r3, #0xD8
  00054	e3a0e014	 mov         lr, #0x14
  00058	e3a03001	 mov         r3, #1
  0005c	e28d2008	 add         r2, sp, #8
  00060	e5cde008	 strb        lr, [sp, #8]
  00064	eb000000	 bl          TWLWriteRegs

; 380  :     Configure();

  00068	e1a00005	 mov         r0, r5
  0006c	eb000000	 bl          |?Configure@HSUSBOTGTransceiverTps659xx@@AAAXXZ|

; 381  :     
; 382  :     if (!TWLInterruptInitialize(m_hTriton2Handle, TWL_INTR_USB_PRES, m_hUsbPresenceEvent))

  00070	e5952008	 ldr         r2, [r5, #8]
  00074	e5950004	 ldr         r0, [r5, #4]
  00078	e59f1050	 ldr         r1, [pc, #0x50]
  0007c	eb000000	 bl          TWLInterruptInitialize
  00080	e3500000	 cmp         r0, #0
  00084	0a00000c	 beq         |$cleanUp$36408|

; 383  :     {
; 384  :         DEBUGMSG(ZONE_OTG_ERROR, (L"ERROR: HSUSBOTGTransceiver::HSUSBOTGTransceiver()"
; 385  :             L"Failed associate event with TWL_INTR_USB_PRES interrupt\r\n"
; 386  :             ));
; 387  :         goto cleanUp;
; 388  :     }
; 389  :     
; 390  :     if (!TWLInterruptMask(m_hTriton2Handle, TWL_INTR_USB_PRES, FALSE))

  00088	e5950004	 ldr         r0, [r5, #4]
  0008c	e59f103c	 ldr         r1, [pc, #0x3C]
  00090	e3a02000	 mov         r2, #0
  00094	eb000000	 bl          TWLInterruptMask

; 391  :     {
; 392  :         DEBUGMSG(ZONE_OTG_ERROR, (L"HSUSBOTGTransceiver::HSUSBOTGTransceiver() "
; 393  :             L"Failed associate event with TWL_INTR_USB_PRES interrupt\r\n"
; 394  :             ));
; 395  :     }
; 396  :     
; 397  :     // Spawn transceiver state change thread
; 398  :     m_hStateChangeThread = CreateThread(NULL, 0, StateChangeThread, this, 0, NULL);

  00098	e59f202c	 ldr         r2, [pc, #0x2C]
  0009c	e3a0e000	 mov         lr, #0
  000a0	e1a03005	 mov         r3, r5
  000a4	e3a01000	 mov         r1, #0
  000a8	e3a00000	 mov         r0, #0
  000ac	e58de004	 str         lr, [sp, #4]
  000b0	e58de000	 str         lr, [sp]
  000b4	eb000000	 bl          CreateThread
  000b8	e585000c	 str         r0, [r5, #0xC]
  000bc		 |$cleanUp$36408|

; 399  :     if (m_hStateChangeThread == NULL)
; 400  :     {
; 401  :         DEBUGMSG(ZONE_OTG_ERROR, (L"HSUSBOTGTransceiver::HSUSBOTGTransceiver():"
; 402  :             L"! unable to spawn state change thread(err=0x%08X)\r\n",
; 403  :             GetLastError()
; 404  :             ));
; 405  :         return;
; 406  :     }
; 407  :     
; 408  : cleanUp:
; 409  :     return;
; 410  : }

  000bc	e1a00005	 mov         r0, r5
  000c0	e28dd00c	 add         sp, sp, #0xC
  000c4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$LN19@HSUSBOTGTr@3|
  000cc		 |$LN20@HSUSBOTGTr@3|
  000cc	00000000	 DCD         |?StateChangeThread@HSUSBOTGTransceiverTps659xx@@CAKPAX@Z|
  000d0		 |$LN21@HSUSBOTGTr@3|
  000d0	02005002	 DCD         0x2005002
  000d4		 |$LN22@HSUSBOTGTr@3|
  000d4	00000000	 DCD         |??_7HSUSBOTGTransceiverTps659xx@@6B@|
  000d8		 |$M36939|

			 ENDP  ; |??0HSUSBOTGTransceiverTps659xx@@QAA@PAUHSMUSB_T@@@Z|, HSUSBOTGTransceiverTps659xx::HSUSBOTGTransceiverTps659xx

; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\inc\tps659xx_musb.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36954| DCD	|$LN5@SupportsTr|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SupportsTransceiverWakeWithoutClock@HSUSBOTGTransceiverTps659xx@@UAAHXZ| PROC ; HSUSBOTGTransceiverTps659xx::SupportsTransceiverWakeWithoutClock

; 30   :     BOOL SupportsTransceiverWakeWithoutClock() {return TRUE;};

  00000		 |$LN5@SupportsTr|
  00000		 |$M36951|
  00000	e3a00001	 mov         r0, #1
  00004	e12fff1e	 bx          lr
  00008		 |$M36952|

			 ENDP  ; |?SupportsTransceiverWakeWithoutClock@HSUSBOTGTransceiverTps659xx@@UAAHXZ|, HSUSBOTGTransceiverTps659xx::SupportsTransceiverWakeWithoutClock


  00000			 AREA	 |.pdata|, PDATA
|$T36961| DCD	|$LN5@Reset|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Reset@HSUSBOTGTransceiverTps659xx@@UAAXXZ| PROC ; HSUSBOTGTransceiverTps659xx::Reset

; 34   :     void Reset() {};

  00000		 |$LN5@Reset|
  00000		 |$M36958|
  00000	e12fff1e	 bx          lr
  00004		 |$M36959|

			 ENDP  ; |?Reset@HSUSBOTGTransceiverTps659xx@@UAAXXZ|, HSUSBOTGTransceiverTps659xx::Reset


  00000			 AREA	 |.pdata|, PDATA
|$T36968| DCD	|$LN5@Resume|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Resume@HSUSBOTGTransceiverTps659xx@@UAAXXZ| PROC ; HSUSBOTGTransceiverTps659xx::Resume

; 35   :     void Resume() {};

  00000		 |$LN5@Resume|
  00000		 |$M36965|
  00000	e12fff1e	 bx          lr
  00004		 |$M36966|

			 ENDP  ; |?Resume@HSUSBOTGTransceiverTps659xx@@UAAXXZ|, HSUSBOTGTransceiverTps659xx::Resume

	EXPORT	|??1HSUSBOTGTransceiverTps659xx@@QAA@XZ| ; HSUSBOTGTransceiverTps659xx::~HSUSBOTGTransceiverTps659xx
	IMPORT	|TWLClose|
	IMPORT	|CloseHandle|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\transceiver_musb.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36979| DCD	|$LN9@HSUSBOTGTr@4|
	DCD	0x40001601
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\usbotg\tps659xx_musb.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1HSUSBOTGTransceiverTps659xx@@QAA@XZ| PROC ; HSUSBOTGTransceiverTps659xx::~HSUSBOTGTransceiverTps659xx

; 414  : {

  00000		 |$LN9@HSUSBOTGTr@4|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36976|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3044	 ldr         r3, [pc, #0x44]

; 415  :     if (m_hUsbPresenceEvent)

  0000c	e5942008	 ldr         r2, [r4, #8]
  00010	e3a05000	 mov         r5, #0
  00014	e5843000	 str         r3, [r4]
  00018	e3520000	 cmp         r2, #0
  0001c	0a000002	 beq         |$LN2@HSUSBOTGTr@4|

; 416  :     {
; 417  :         CloseHandle(m_hUsbPresenceEvent);

  00020	e1a00002	 mov         r0, r2
  00024	eb000000	 bl          CloseHandle

; 418  :         m_hUsbPresenceEvent = NULL;

  00028	e5845008	 str         r5, [r4, #8]
  0002c		 |$LN2@HSUSBOTGTr@4|

; 419  :     }
; 420  :     
; 421  :     if (m_hTriton2Handle) 

  0002c	e5943004	 ldr         r3, [r4, #4]
  00030	e3530000	 cmp         r3, #0

; 422  :         TWLClose(m_hTriton2Handle);   

  00034	11a00003	 movne       r0, r3
  00038	1b000000	 blne        TWLClose

; 423  :     m_hTriton2Handle = NULL;
; 424  : }

  0003c	e59f300c	 ldr         r3, [pc, #0xC]
  00040	e5845004	 str         r5, [r4, #4]
  00044	e5843000	 str         r3, [r4]
  00048	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$LN10@HSUSBOTGTr@4|
  00050		 |$LN11@HSUSBOTGTr@4|
  00050	00000000	 DCD         |??_7HSUSBOTGTransceiver@@6B@|
  00054		 |$LN12@HSUSBOTGTr@4|
  00054	00000000	 DCD         |??_7HSUSBOTGTransceiverTps659xx@@6B@|
  00058		 |$M36977|

			 ENDP  ; |??1HSUSBOTGTransceiverTps659xx@@QAA@XZ|, HSUSBOTGTransceiverTps659xx::~HSUSBOTGTransceiverTps659xx

	EXPORT	|?SendSingularPBMessageT2@HSUSBOTGTransceiverTps659xx@@AAAHEE@Z| ; HSUSBOTGTransceiverTps659xx::SendSingularPBMessageT2

  00000			 AREA	 |.pdata|, PDATA
|$T37007| DCD	|$LN17@SendSingul|
	DCD	0x40002902
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SendSingularPBMessageT2@HSUSBOTGTransceiverTps659xx@@AAAHEE@Z| PROC ; HSUSBOTGTransceiverTps659xx::SendSingularPBMessageT2

; 429  : {

  00000		 |$LN17@SendSingul|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M37004|
  00008	e1a05002	 mov         r5, r2
  0000c	e1a06001	 mov         r6, r1
  00010	e1a04000	 mov         r4, r0

; 430  :     UINT16 pb_message;
; 431  :     UCHAR regval;
; 432  :     
; 433  :     regval = 0x02;  // Enable I2C access to the Power Bus 
; 434  :     if(!WriteOmapTriton2(TWL_PB_CFG, regval))

  00014	e5940004	 ldr         r0, [r4, #4]
  00018	e3a03803	 mov         r3, #3, 16
  0001c	e383104a	 orr         r1, r3, #0x4A
  00020	e3a0e002	 mov         lr, #2
  00024	e3a03001	 mov         r3, #1
  00028	e28d2000	 add         r2, sp, #0
  0002c	e5cde000	 strb        lr, [sp]
  00030	eb000000	 bl          TWLWriteRegs
  00034	e3500000	 cmp         r0, #0
  00038	0a000015	 beq         |$cleanUp$36427|

; 435  :         goto cleanUp;
; 436  :     
; 437  :     // Form the message for VDAC 
; 438  :     pb_message = TwlTargetMessage(TWL_PROCESSOR_GRP1, power_res_id, res_state);

  0003c	e3863c02	 orr         r3, r6, #2, 24
  00040	e1855203	 orr         r5, r5, r3, lsl #4

; 439  :     
; 440  :     // Extract the Message MSB 
; 441  :     regval = (UCHAR)(pb_message >> 8);
; 442  :     if(!WriteOmapTriton2(TWL_PB_WORD_MSB, regval))

  00044	e5940004	 ldr         r0, [r4, #4]
  00048	e1a03425	 mov         r3, r5, lsr #8
  0004c	e3a01803	 mov         r1, #3, 16
  00050	e5cd3000	 strb        r3, [sp]
  00054	e3a03001	 mov         r3, #1
  00058	e28d2000	 add         r2, sp, #0
  0005c	e381104b	 orr         r1, r1, #0x4B
  00060	eb000000	 bl          TWLWriteRegs
  00064	e3500000	 cmp         r0, #0
  00068	0a000009	 beq         |$cleanUp$36427|

; 443  :         goto cleanUp;
; 444  :     
; 445  :     // Extract the Message LSB 
; 446  :     regval = (UCHAR)(pb_message & 0x00FF);
; 447  :     if(!WriteOmapTriton2(TWL_PB_WORD_LSB, regval))

  0006c	e5940004	 ldr         r0, [r4, #4]
  00070	e3a03803	 mov         r3, #3, 16
  00074	e383104c	 orr         r1, r3, #0x4C
  00078	e3a03001	 mov         r3, #1
  0007c	e28d2000	 add         r2, sp, #0
  00080	e5cd5000	 strb        r5, [sp]
  00084	eb000000	 bl          TWLWriteRegs
  00088	e3500000	 cmp         r0, #0

; 448  :         goto cleanUp;
; 449  :     
; 450  :     return (TRUE);

  0008c	13a00001	 movne       r0, #1
  00090	1a000000	 bne         |$LN7@SendSingul|
  00094		 |$cleanUp$36427|

; 451  :     
; 452  : cleanUp:
; 453  :       return FALSE;    

  00094	e3a00000	 mov         r0, #0
  00098		 |$LN7@SendSingul|

; 454  : }

  00098	e28dd004	 add         sp, sp, #4
  0009c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$M37005|

			 ENDP  ; |?SendSingularPBMessageT2@HSUSBOTGTransceiverTps659xx@@AAAHEE@Z|, HSUSBOTGTransceiverTps659xx::SendSingularPBMessageT2

	EXPORT	|?WakeT2USBPhyDPLLT2@HSUSBOTGTransceiverTps659xx@@AAAHXZ| ; HSUSBOTGTransceiverTps659xx::WakeT2USBPhyDPLLT2

  00000			 AREA	 |.pdata|, PDATA
|$T37039| DCD	|$LN24@WakeT2USBP|
	DCD	0x40003f02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WakeT2USBPhyDPLLT2@HSUSBOTGTransceiverTps659xx@@AAAHXZ| PROC ; HSUSBOTGTransceiverTps659xx::WakeT2USBPhyDPLLT2

; 458  : {

  00000		 |$LN24@WakeT2USBP|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M37036|
  00008	e1a04000	 mov         r4, r0

; 459  :     BYTE sts;
; 460  :     BYTE ctrl;
; 461  :     BOOL fGetLock = FALSE;
; 462  : 
; 463  :     // Lock PHY: start
; 464  :     if(ReadOmapTriton2(TWL_PHY_CLK_CTRL_STS, &sts))

  0000c	e5940004	 ldr         r0, [r4, #4]
  00010	e3a03001	 mov         r3, #1
  00014	e28d2000	 add         r2, sp, #0
  00018	e3a010ff	 mov         r1, #0xFF
  0001c	e3a05000	 mov         r5, #0
  00020	eb000000	 bl          TWLReadRegs
  00024	e3500000	 cmp         r0, #0
  00028	0a00002d	 beq         |$LN3@WakeT2USBP|

; 465  :     {
; 466  :         int iCount = 500;
; 467  :         if (((sts & PHY_CLK_CTRL_STS_PHY_DPLL_LOCK) == 0) && ReadOmapTriton2(TWL_PHY_CLK_CTRL, &ctrl))

  0002c	e5dd3000	 ldrb        r3, [sp]
  00030	e3a06f7d	 mov         r6, #0x7D, 30
  00034	e3130001	 tst         r3, #1
  00038	1a000029	 bne         |$LN3@WakeT2USBP|
  0003c	e5940004	 ldr         r0, [r4, #4]
  00040	e3a03001	 mov         r3, #1
  00044	e28d2001	 add         r2, sp, #1
  00048	e3a010fe	 mov         r1, #0xFE
  0004c	eb000000	 bl          TWLReadRegs
  00050	e3500000	 cmp         r0, #0
  00054	0a000022	 beq         |$LN3@WakeT2USBP|
  00058	e3a07000	 mov         r7, #0
  0005c		 |$LL5@WakeT2USBP|

; 468  :         {
; 469  :             BOOL fSuccess;                
; 470  :             do {
; 471  :                 ctrl |= PHY_CLK_CTRL_REQ_PHY_DPLL_CLK;                

  0005c	e5dd3001	 ldrb        r3, [sp, #1]

; 472  :                 WriteOmapTriton2(TWL_PHY_CLK_CTRL, ctrl);

  00060	e5940004	 ldr         r0, [r4, #4]
  00064	e28d2004	 add         r2, sp, #4
  00068	e3833001	 orr         r3, r3, #1
  0006c	e5cd3001	 strb        r3, [sp, #1]
  00070	e5cd3004	 strb        r3, [sp, #4]
  00074	e3a03001	 mov         r3, #1
  00078	e3a010fe	 mov         r1, #0xFE
  0007c	eb000000	 bl          TWLWriteRegs

; 473  :                 sts = 0x00;
; 474  :                 if (ReadOmapTriton2(TWL_PHY_CLK_CTRL_STS, &sts) && (sts & PHY_CLK_CTRL_STS_PHY_DPLL_LOCK))

  00080	e5940004	 ldr         r0, [r4, #4]
  00084	e3a03001	 mov         r3, #1
  00088	e28d2000	 add         r2, sp, #0
  0008c	e3a010ff	 mov         r1, #0xFF
  00090	e5cd7000	 strb        r7, [sp]
  00094	eb000000	 bl          TWLReadRegs
  00098	e3500000	 cmp         r0, #0
  0009c	0a000002	 beq         |$LN2@WakeT2USBP|
  000a0	e5dd3000	 ldrb        r3, [sp]
  000a4	e3130001	 tst         r3, #1
  000a8	1a00000c	 bne         |$LN21@WakeT2USBP|
  000ac		 |$LN2@WakeT2USBP|

; 477  :                     break;
; 478  :                 }
; 479  :                 iCount--;
; 480  :                 StallExecution(50);

  000ac	e3a00032	 mov         r0, #0x32
  000b0	e2466001	 sub         r6, r6, #1
  000b4	eb000000	 bl          StallExecution

; 481  :                 fSuccess = ReadOmapTriton2(TWL_PHY_CLK_CTRL, &ctrl);

  000b8	e5940004	 ldr         r0, [r4, #4]
  000bc	e3a03001	 mov         r3, #1
  000c0	e28d2001	 add         r2, sp, #1
  000c4	e3a010fe	 mov         r1, #0xFE
  000c8	eb000000	 bl          TWLReadRegs
  000cc	e3500000	 cmp         r0, #0

; 482  :             } while (fSuccess && (iCount > 0));                                

  000d0	0a000003	 beq         |$LN3@WakeT2USBP|
  000d4	e3560000	 cmp         r6, #0
  000d8	caffffdf	 bgt         |$LL5@WakeT2USBP|
  000dc	ea000000	 b           |$LN3@WakeT2USBP|
  000e0		 |$LN21@WakeT2USBP|

; 475  :                 {
; 476  :                     fGetLock = TRUE;

  000e0	e3a05001	 mov         r5, #1
  000e4		 |$LN3@WakeT2USBP|

; 483  :         }            
; 484  :     }
; 485  :     // Lock PHY: end
; 486  : 
; 487  :     StallExecution(10);  

  000e4	e3a0000a	 mov         r0, #0xA
  000e8	eb000000	 bl          StallExecution

; 488  : #if 0
; 489  :     if (ReadTwlReg(TWL_PHY_CLK_CTRL, ctrl))
; 490  :     {
; 491  :         // clear PHY_DPLL_LOCK bit and let PHY state depend on the SUSPENDM bit in the FUNC_CTRL register
; 492  :         ctrl &= ~PHY_CLK_CTRL_STS_PHY_DPLL_LOCK;
; 493  :         WriteOmapTriton2(TWL_PHY_CLK_CTRL, ctrl);
; 494  :         fGetLock = TRUE;
; 495  :     }     
; 496  : #endif
; 497  :     return fGetLock;
; 498  : }

  000ec	e1a00005	 mov         r0, r5
  000f0	e28dd008	 add         sp, sp, #8
  000f4	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000f8	e12fff1e	 bx          lr
  000fc		 |$M37037|

			 ENDP  ; |?WakeT2USBPhyDPLLT2@HSUSBOTGTransceiverTps659xx@@AAAHXZ|, HSUSBOTGTransceiverTps659xx::WakeT2USBPhyDPLLT2

	EXPORT	|?SetT2USBXvcrActiveT2@HSUSBOTGTransceiverTps659xx@@AAAHH@Z| ; HSUSBOTGTransceiverTps659xx::SetT2USBXvcrActiveT2

  00000			 AREA	 |.pdata|, PDATA
|$T37067| DCD	|$LN15@SetT2USBXv|
	DCD	0x40002e02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetT2USBXvcrActiveT2@HSUSBOTGTransceiverTps659xx@@AAAHH@Z| PROC ; HSUSBOTGTransceiverTps659xx::SetT2USBXvcrActiveT2

; 502  : {  

  00000		 |$LN15@SetT2USBXv|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M37064|
  00008	e3510000	 cmp         r1, #0
  0000c	e1a04000	 mov         r4, r0

; 503  :     BOOL rc = TRUE;
; 504  :     BYTE ctrl = 0;

  00010	e3a03000	 mov         r3, #0
  00014	e5cd3000	 strb        r3, [sp]

; 505  :     if (fActive)    

  00018	0a00000d	 beq         |$LN2@SetT2USBXv|

; 506  :     {
; 507  :         // give time for power-on
; 508  :         StallExecution(100);           

  0001c	e3a00064	 mov         r0, #0x64
  00020	eb000000	 bl          StallExecution

; 509  :         WakeT2USBPhyDPLLT2();

  00024	e1a00004	 mov         r0, r4
  00028	eb000000	 bl          |?WakeT2USBPhyDPLLT2@HSUSBOTGTransceiverTps659xx@@AAAHXZ|

; 510  : 
; 511  :         WriteOmapTriton2(TWL_FUNC_CTRL_SET, FUNC_CTRL_SUSPENDM);

  0002c	e5940004	 ldr         r0, [r4, #4]
  00030	e3a0e040	 mov         lr, #0x40
  00034	e3a03001	 mov         r3, #1
  00038	e28d2004	 add         r2, sp, #4
  0003c	e3a01005	 mov         r1, #5
  00040	e5cde004	 strb        lr, [sp, #4]
  00044	eb000000	 bl          TWLWriteRegs

; 512  :         StallExecution(400);           

  00048	e3a00e19	 mov         r0, #0x19, 28
  0004c	eb000000	 bl          StallExecution

; 513  :     }
; 514  :     else

  00050	ea000014	 b           |$LN11@SetT2USBXv|
  00054		 |$LN2@SetT2USBXv|

; 515  :     {
; 516  :         // if it has been asleep, wakeup the PHY before put to sleep again.
; 517  :         // this is to avoid the PHY is actually sleeping and access the FUNC_CTRL
; 518  :         // would return error
; 519  :         // From USB analyzer, you may see SUSPEND/ALIVE and then SUSPEND again.  The problem
; 520  :         // is due to enable phy and then disable again
; 521  :         // The below steps effectively stops functional clock
; 522  :         ReadOmapTriton2(TWL_PHY_CLK_CTRL, &ctrl);

  00054	e5940004	 ldr         r0, [r4, #4]
  00058	e3a03001	 mov         r3, #1
  0005c	e28d2000	 add         r2, sp, #0
  00060	e3a010fe	 mov         r1, #0xFE
  00064	eb000000	 bl          TWLReadRegs

; 523  :         ctrl &= ~PHY_CLK_CTRL_REQ_PHY_DPLL_CLK;                

  00068	e5dd3000	 ldrb        r3, [sp]

; 524  :         WriteOmapTriton2(TWL_PHY_CLK_CTRL, ctrl);

  0006c	e5940004	 ldr         r0, [r4, #4]
  00070	e28d2004	 add         r2, sp, #4
  00074	e20330fe	 and         r3, r3, #0xFE
  00078	e5cd3000	 strb        r3, [sp]
  0007c	e5cd3004	 strb        r3, [sp, #4]
  00080	e3a03001	 mov         r3, #1
  00084	e3a010fe	 mov         r1, #0xFE
  00088	eb000000	 bl          TWLWriteRegs

; 525  : 
; 526  :         WriteOmapTriton2(TWL_FUNC_CTRL_CLR, FUNC_CTRL_SUSPENDM);

  0008c	e5940004	 ldr         r0, [r4, #4]
  00090	e3a0e040	 mov         lr, #0x40
  00094	e3a03001	 mov         r3, #1
  00098	e28d2004	 add         r2, sp, #4
  0009c	e3a01006	 mov         r1, #6
  000a0	e5cde004	 strb        lr, [sp, #4]
  000a4	eb000000	 bl          TWLWriteRegs
  000a8		 |$LN11@SetT2USBXv|

; 527  :     }    
; 528  : 
; 529  :     return rc;

  000a8	e3a00001	 mov         r0, #1

; 530  : }

  000ac	e28dd008	 add         sp, sp, #8
  000b0	e8bd4010	 ldmia       sp!, {r4, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$M37065|

			 ENDP  ; |?SetT2USBXvcrActiveT2@HSUSBOTGTransceiverTps659xx@@AAAHH@Z|, HSUSBOTGTransceiverTps659xx::SetT2USBXvcrActiveT2

	EXPORT	|?SetT2USBXvcrPowerOff@HSUSBOTGTransceiverTps659xx@@AAAHH@Z| ; HSUSBOTGTransceiverTps659xx::SetT2USBXvcrPowerOff

  00000			 AREA	 |.pdata|, PDATA
|$T37097| DCD	|$LN16@SetT2USBXv@2|
	DCD	0x40001d02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetT2USBXvcrPowerOff@HSUSBOTGTransceiverTps659xx@@AAAHH@Z| PROC ; HSUSBOTGTransceiverTps659xx::SetT2USBXvcrPowerOff

; 533  : {

  00000		 |$LN16@SetT2USBXv@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M37094|
  00008	e3510000	 cmp         r1, #0
  0000c	e1a04000	 mov         r4, r0

; 534  :     BOOL rc = TRUE;
; 535  :     BYTE ctrl = 0;

  00010	e3a03000	 mov         r3, #0

; 536  : 
; 537  :     if(fActive)
; 538  :     {
; 539  :         ReadOmapTriton2(TWL_PHY_PWR_CTRL, &ctrl);

  00014	e5940004	 ldr         r0, [r4, #4]
  00018	e5cd3000	 strb        r3, [sp]
  0001c	e3a03001	 mov         r3, #1
  00020	e28d2000	 add         r2, sp, #0
  00024	e3a010fd	 mov         r1, #0xFD
  00028	0a000003	 beq         |$LN2@SetT2USBXv@2|
  0002c	eb000000	 bl          TWLReadRegs

; 540  :         ctrl |= PHY_PWR_CTRL_PHYPWD;                

  00030	e5dd3000	 ldrb        r3, [sp]

; 541  :         WriteOmapTriton2(TWL_PHY_PWR_CTRL, ctrl);

  00034	e3833001	 orr         r3, r3, #1

; 542  :     }
; 543  :     else

  00038	ea000002	 b           |$LN13@SetT2USBXv@2|
  0003c		 |$LN2@SetT2USBXv@2|

; 544  :     {
; 545  :         ReadOmapTriton2(TWL_PHY_PWR_CTRL, &ctrl);

  0003c	eb000000	 bl          TWLReadRegs

; 546  :         ctrl &= ~PHY_PWR_CTRL_PHYPWD;                

  00040	e5dd3000	 ldrb        r3, [sp]

; 547  :         WriteOmapTriton2(TWL_PHY_PWR_CTRL, ctrl);

  00044	e20330fe	 and         r3, r3, #0xFE
  00048		 |$LN13@SetT2USBXv@2|
  00048	e5940004	 ldr         r0, [r4, #4]
  0004c	e5cd3000	 strb        r3, [sp]
  00050	e5cd3004	 strb        r3, [sp, #4]
  00054	e3a03001	 mov         r3, #1
  00058	e28d2004	 add         r2, sp, #4
  0005c	e3a010fd	 mov         r1, #0xFD
  00060	eb000000	 bl          TWLWriteRegs

; 548  :     }
; 549  :     return rc;

  00064	e3a00001	 mov         r0, #1

; 550  : }

  00068	e28dd008	 add         sp, sp, #8
  0006c	e8bd4010	 ldmia       sp!, {r4, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$M37095|

			 ENDP  ; |?SetT2USBXvcrPowerOff@HSUSBOTGTransceiverTps659xx@@AAAHH@Z|, HSUSBOTGTransceiverTps659xx::SetT2USBXvcrPowerOff

	EXPORT	|?EnableFClock@HSUSBOTGTransceiverTps659xx@@AAAHH@Z| ; HSUSBOTGTransceiverTps659xx::EnableFClock

  00000			 AREA	 |.pdata|, PDATA
|$T37108| DCD	|$LN7@EnableFClo|
	DCD	0x40002401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableFClock@HSUSBOTGTransceiverTps659xx@@AAAHH@Z| PROC ; HSUSBOTGTransceiverTps659xx::EnableFClock

; 554  : {

  00000		 |$LN7@EnableFClo|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37105|
  00004	e3510000	 cmp         r1, #0
  00008	e1a04000	 mov         r4, r0

; 555  :     if(enable)

  0000c	0a00000e	 beq         |$LN2@EnableFClo|

; 556  :     {
; 557  :         // put LDO's in Active mode
; 558  :         SendSingularPBMessageT2(TWL_VUSB_3V1_RES_ID, TWL_RES_ACTIVE);

  00010	e3a0200e	 mov         r2, #0xE
  00014	e3a01013	 mov         r1, #0x13
  00018	eb000000	 bl          |?SendSingularPBMessageT2@HSUSBOTGTransceiverTps659xx@@AAAHEE@Z|

; 559  :         SendSingularPBMessageT2(TWL_VUSB_1V5_RES_ID, TWL_RES_ACTIVE);

  0001c	e3a0200e	 mov         r2, #0xE
  00020	e3a01011	 mov         r1, #0x11
  00024	e1a00004	 mov         r0, r4
  00028	eb000000	 bl          |?SendSingularPBMessageT2@HSUSBOTGTransceiverTps659xx@@AAAHEE@Z|

; 560  :         SendSingularPBMessageT2(TWL_VUSB_1V8_RES_ID, TWL_RES_ACTIVE);

  0002c	e3a0200e	 mov         r2, #0xE
  00030	e3a01012	 mov         r1, #0x12
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          |?SendSingularPBMessageT2@HSUSBOTGTransceiverTps659xx@@AAAHEE@Z|

; 561  :         SetT2USBXvcrActiveT2(TRUE);

  0003c	e3a01001	 mov         r1, #1
  00040	e1a00004	 mov         r0, r4
  00044	eb000000	 bl          |?SetT2USBXvcrActiveT2@HSUSBOTGTransceiverTps659xx@@AAAHH@Z|

; 562  : 
; 563  :         DEBUGMSG(ZONE_OTG_INFO, (TEXT("HS USB Enable Functional clock \r\n")));
; 564  :     }
; 565  :     else

  00048	ea00000d	 b           |$LN1@EnableFClo|
  0004c		 |$LN2@EnableFClo|

; 566  :     {
; 567  :         SetT2USBXvcrActiveT2(FALSE);

  0004c	e3a01000	 mov         r1, #0
  00050	eb000000	 bl          |?SetT2USBXvcrActiveT2@HSUSBOTGTransceiverTps659xx@@AAAHH@Z|

; 568  :         // put LDO's in OFF mode
; 569  :         SendSingularPBMessageT2(TWL_VUSB_3V1_RES_ID, TWL_RES_OFF);

  00054	e3a02000	 mov         r2, #0
  00058	e3a01013	 mov         r1, #0x13
  0005c	e1a00004	 mov         r0, r4
  00060	eb000000	 bl          |?SendSingularPBMessageT2@HSUSBOTGTransceiverTps659xx@@AAAHEE@Z|

; 570  :         SendSingularPBMessageT2(TWL_VUSB_1V5_RES_ID, TWL_RES_OFF);

  00064	e3a02000	 mov         r2, #0
  00068	e3a01011	 mov         r1, #0x11
  0006c	e1a00004	 mov         r0, r4
  00070	eb000000	 bl          |?SendSingularPBMessageT2@HSUSBOTGTransceiverTps659xx@@AAAHEE@Z|

; 571  :         SendSingularPBMessageT2(TWL_VUSB_1V8_RES_ID, TWL_RES_OFF);

  00074	e3a02000	 mov         r2, #0
  00078	e3a01012	 mov         r1, #0x12
  0007c	e1a00004	 mov         r0, r4
  00080	eb000000	 bl          |?SendSingularPBMessageT2@HSUSBOTGTransceiverTps659xx@@AAAHEE@Z|
  00084		 |$LN1@EnableFClo|

; 572  : 
; 573  :         DEBUGMSG(ZONE_OTG_INFO, (TEXT("HS USB Disable Functional clock \r\n")));
; 574  :     }
; 575  :     return TRUE;

  00084	e3a00001	 mov         r0, #1

; 576  : }

  00088	e8bd4010	 ldmia       sp!, {r4, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$M37106|

			 ENDP  ; |?EnableFClock@HSUSBOTGTransceiverTps659xx@@AAAHH@Z|, HSUSBOTGTransceiverTps659xx::EnableFClock


  00000			 AREA	 |.pdata|, PDATA
|$T37152| DCD	|$LN24@UpdateUSBV|
	DCD	0x40003902
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateUSBVBusSleepOffState@HSUSBOTGTransceiverTps659xx@@UAAHH@Z| PROC ; HSUSBOTGTransceiverTps659xx::UpdateUSBVBusSleepOffState

; 579  : {

  00000		 |$LN24@UpdateUSBV|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M37149|
  00008	e3510000	 cmp         r1, #0
  0000c	e1a04000	 mov         r4, r0

; 580  :     BOOL rc = TRUE;
; 581  :     BYTE state =0;
; 582  :     if(fActive)
; 583  :     {
; 584  :         state = TWL_RES_ACTIVE|(TWL_RES_ACTIVE << 4);
; 585  :         WriteOmapTriton2(TWL_VINTDIG_REMAP, state);

  00010	e3a05803	 mov         r5, #3, 16
  00014	e5940004	 ldr         r0, [r4, #4]
  00018	e38510a4	 orr         r1, r5, #0xA4
  0001c	e3a03001	 mov         r3, #1
  00020	e28d2000	 add         r2, sp, #0
  00024	0a000012	 beq         |$LN2@UpdateUSBV|
  00028	e3a0e0ee	 mov         lr, #0xEE
  0002c	e5cde000	 strb        lr, [sp]
  00030	eb000000	 bl          TWLWriteRegs

; 586  :         WriteOmapTriton2(TWL_VUSB1V8_REMAP, state);

  00034	e5940004	 ldr         r0, [r4, #4]
  00038	e3a0e0ee	 mov         lr, #0xEE
  0003c	e3a03001	 mov         r3, #1
  00040	e28d2000	 add         r2, sp, #0
  00044	e38510d1	 orr         r1, r5, #0xD1
  00048	e5cde000	 strb        lr, [sp]
  0004c	eb000000	 bl          TWLWriteRegs

; 587  :         WriteOmapTriton2(TWL_VUSB1V5_REMAP, state);

  00050	e5940004	 ldr         r0, [r4, #4]
  00054	e3a0e0ee	 mov         lr, #0xEE
  00058	e3a03001	 mov         r3, #1
  0005c	e28d2000	 add         r2, sp, #0
  00060	e38510ce	 orr         r1, r5, #0xCE
  00064	e5cde000	 strb        lr, [sp]
  00068	eb000000	 bl          TWLWriteRegs

; 588  :         WriteOmapTriton2(TWL_VUSB3V1_REMAP, state);

  0006c	e3a0e0ee	 mov         lr, #0xEE

; 589  :         DEBUGMSG(ZONE_OTG_INFO, (TEXT("HS USB Power ON\r\n")));
; 590  :     }
; 591  :     else

  00070	ea000011	 b           |$LN21@UpdateUSBV|
  00074		 |$LN2@UpdateUSBV|

; 592  :     {
; 593  :         state = TWL_RES_OFF|(TWL_RES_OFF << 4);
; 594  :         WriteOmapTriton2(TWL_VINTDIG_REMAP, state);

  00074	e3a0e000	 mov         lr, #0
  00078	e5cde000	 strb        lr, [sp]
  0007c	eb000000	 bl          TWLWriteRegs

; 595  :         WriteOmapTriton2(TWL_VUSB1V8_REMAP, state);

  00080	e5940004	 ldr         r0, [r4, #4]
  00084	e3a0e000	 mov         lr, #0
  00088	e3a03001	 mov         r3, #1
  0008c	e28d2000	 add         r2, sp, #0
  00090	e38510d1	 orr         r1, r5, #0xD1
  00094	e5cde000	 strb        lr, [sp]
  00098	eb000000	 bl          TWLWriteRegs

; 596  :         WriteOmapTriton2(TWL_VUSB1V5_REMAP, state);

  0009c	e5940004	 ldr         r0, [r4, #4]
  000a0	e3a0e000	 mov         lr, #0
  000a4	e3a03001	 mov         r3, #1
  000a8	e28d2000	 add         r2, sp, #0
  000ac	e38510ce	 orr         r1, r5, #0xCE
  000b0	e5cde000	 strb        lr, [sp]
  000b4	eb000000	 bl          TWLWriteRegs

; 597  :         WriteOmapTriton2(TWL_VUSB3V1_REMAP, state);

  000b8	e3a0e000	 mov         lr, #0
  000bc		 |$LN21@UpdateUSBV|
  000bc	e5940004	 ldr         r0, [r4, #4]
  000c0	e3a03001	 mov         r3, #1
  000c4	e28d2000	 add         r2, sp, #0
  000c8	e38510d4	 orr         r1, r5, #0xD4
  000cc	e5cde000	 strb        lr, [sp]
  000d0	eb000000	 bl          TWLWriteRegs

; 598  :         DEBUGMSG(ZONE_OTG_INFO, (TEXT("HS USB Power OFF\r\n")));
; 599  :     }
; 600  : 
; 601  :     return rc;

  000d4	e3a00001	 mov         r0, #1

; 602  : }

  000d8	e28dd004	 add         sp, sp, #4
  000dc	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000e0	e12fff1e	 bx          lr
  000e4		 |$M37150|

			 ENDP  ; |?UpdateUSBVBusSleepOffState@HSUSBOTGTransceiverTps659xx@@UAAHH@Z|, HSUSBOTGTransceiverTps659xx::UpdateUSBVBusSleepOffState


  00000			 AREA	 |.pdata|, PDATA
|$T37161| DCD	|$LN5@SetLowPowe|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetLowPowerMode@HSUSBOTGTransceiverTps659xx@@UAAHXZ| PROC ; HSUSBOTGTransceiverTps659xx::SetLowPowerMode

; 605  : {

  00000		 |$LN5@SetLowPowe|
  00000		 |$M37158|

; 606  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 607  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37159|

			 ENDP  ; |?SetLowPowerMode@HSUSBOTGTransceiverTps659xx@@UAAHXZ|, HSUSBOTGTransceiverTps659xx::SetLowPowerMode


  00000			 AREA	 |.pdata|, PDATA
|$T37176| DCD	|$LN9@IsSE0|
	DCD	0x40000e02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsSE0@HSUSBOTGTransceiverTps659xx@@UAAHXZ| PROC ; HSUSBOTGTransceiverTps659xx::IsSE0

; 610  : {

  00000		 |$LN9@IsSE0|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M37173|

; 611  :     UCHAR debug_r;
; 612  :         
; 613  :     ReadOmapTriton2(TWL_DEBUG, &debug_r);

  00008	e5900004	 ldr         r0, [r0, #4]
  0000c	e3a03001	 mov         r3, #1
  00010	e28d2000	 add         r2, sp, #0
  00014	e3a01015	 mov         r1, #0x15
  00018	eb000000	 bl          TWLReadRegs

; 614  :     DEBUGMSG(ZONE_OTG_INFO, (TEXT("IsSE0 called with line state = 0x%x\r\n"), (debug_r & 0x3)));
; 615  : 
; 616  :     return (((debug_r & 0x3) == 0x00)? TRUE: FALSE);

  0001c	e5dd3000	 ldrb        r3, [sp]
  00020	e3130003	 tst         r3, #3
  00024	03a00001	 moveq       r0, #1
  00028	13a00000	 movne       r0, #0

; 617  : }

  0002c	e28dd004	 add         sp, sp, #4
  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$M37174|

			 ENDP  ; |?IsSE0@HSUSBOTGTransceiverTps659xx@@UAAHXZ|, HSUSBOTGTransceiverTps659xx::IsSE0

	EXPORT	|??_C@_1DC@KMCHCCLA@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAU?$AAL?$AAP?$AAI?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@ONDOGBPJ@?$AA?7?$AAU?$AAL?$AAP?$AAI?$AA_?$AAV?$AAI?$AAD?$AA?$DN?$AA?$CI?$AA?$CF?$AAx?$AA?0?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OIICGPLH@?$AA?7?$AAU?$AAL?$AAP?$AAI?$AA_?$AAP?$AAI?$AAD?$AA?$DN?$AA?$CI?$AA?$CF?$AAx?$AA?0?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@HKAGOOOO@?$AA?7?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@KPAMGFJP@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@EKMKKMLB@?$AA?7?$AAO?$AAT?$AAG?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@KCOOKLKJ@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAr?$AAi?$AAs?$AAi?$AAn?$AAg?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@KEKHNAPH@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAF?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@MHHIEMCK@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@EPLEKGBF@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAL?$AAa?$AAt?$AAc?$AAh?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@LMCDJCFH@?$AA?7?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@COCHFPM@?$AA?7?$AAS?$AAc?$AAr?$AAa?$AAt?$AAc?$AAh?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@NAAPLKEI@?$AA?7?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T37252| DCD	|$LN59@DumpULPIRe|
	DCD	0x40008102

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@KMCHCCLA@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAU?$AAL?$AAP?$AAI?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "P", 0x0, "S", 0x0, "6", 0x0, "5", 0x0, "9", 0x0, "X"
	DCB	0x0, "X", 0x0, " ", 0x0, "U", 0x0, "L", 0x0, "P", 0x0, "I"
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@ONDOGBPJ@?$AA?7?$AAU?$AAL?$AAP?$AAI?$AA_?$AAV?$AAI?$AAD?$AA?$DN?$AA?$CI?$AA?$CF?$AAx?$AA?0?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "U", 0x0, "L", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "V"
	DCB	0x0, "I", 0x0, "D", 0x0, "=", 0x0, "(", 0x0, "%", 0x0, "x"
	DCB	0x0, ",", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OIICGPLH@?$AA?7?$AAU?$AAL?$AAP?$AAI?$AA_?$AAP?$AAI?$AAD?$AA?$DN?$AA?$CI?$AA?$CF?$AAx?$AA?0?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "U", 0x0, "L", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "P"
	DCB	0x0, "I", 0x0, "D", 0x0, "=", 0x0, "(", 0x0, "%", 0x0, "x"
	DCB	0x0, ",", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@HKAGOOOO@?$AA?7?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "=", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@KPAMGFJP@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "f"
	DCB	0x0, "a", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "="
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@EKMKKMLB@?$AA?7?$AAO?$AAT?$AAG?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "O", 0x0, "T", 0x0, "G", 0x0, " ", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "("
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@KCOOKLKJ@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAr?$AAi?$AAs?$AAi?$AAn?$AAg?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "r"
	DCB	0x0, "i", 0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, "="
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@KEKHNAPH@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAF?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, "=", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@MHHIEMCK@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, "=", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@EPLEKGBF@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAL?$AAa?$AAt?$AAc?$AAh?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "L", 0x0, "a"
	DCB	0x0, "t", 0x0, "c", 0x0, "h", 0x0, "=", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@LMCDJCFH@?$AA?7?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "D", 0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, "="
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@COCHFPM@?$AA?7?$AAS?$AAc?$AAr?$AAa?$AAt?$AAc?$AAh?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "S", 0x0, "c", 0x0, "r", 0x0, "a", 0x0, "t", 0x0, "c"
	DCB	0x0, "h", 0x0, "=", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@NAAPLKEI@?$AA?7?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "="
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DumpULPIRegs@HSUSBOTGTransceiverTps659xx@@UAAXXZ| PROC ; HSUSBOTGTransceiverTps659xx::DumpULPIRegs

; 620  : {

  00000		 |$LN59@DumpULPIRe|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M37249|
  00008	e1a04000	 mov         r4, r0

; 621  :     BYTE Reg1, Reg2;
; 622  : 
; 623  :     RETAILMSG(1, (L"TPS659XX ULPI Register\r\n"));

  0000c	e59f01ec	 ldr         r0, [pc, #0x1EC]
  00010	eb000000	 bl          NKDbgPrintfW

; 624  : 
; 625  :     ReadOmapTriton2(TWL_VENDOR_ID_LO, &Reg1);

  00014	e5940004	 ldr         r0, [r4, #4]
  00018	e3a03001	 mov         r3, #1
  0001c	e28d2000	 add         r2, sp, #0
  00020	e3a01000	 mov         r1, #0
  00024	eb000000	 bl          TWLReadRegs

; 626  :     ReadOmapTriton2(TWL_VENDOR_ID_HI, &Reg2);

  00028	e5940004	 ldr         r0, [r4, #4]
  0002c	e3a03001	 mov         r3, #1
  00030	e28d2001	 add         r2, sp, #1
  00034	e3a01001	 mov         r1, #1
  00038	eb000000	 bl          TWLReadRegs

; 627  :     RETAILMSG(1, (L"\tULPI_VID=(%x,%x)\r\n", Reg1, Reg2));

  0003c	e5dd2001	 ldrb        r2, [sp, #1]
  00040	e5dd1000	 ldrb        r1, [sp]
  00044	e59f01b0	 ldr         r0, [pc, #0x1B0]
  00048	eb000000	 bl          NKDbgPrintfW

; 628  : 
; 629  :     ReadOmapTriton2(TWL_PRODUCT_ID_LO, &Reg1);

  0004c	e5940004	 ldr         r0, [r4, #4]
  00050	e3a03001	 mov         r3, #1
  00054	e28d2000	 add         r2, sp, #0
  00058	e3a01002	 mov         r1, #2
  0005c	eb000000	 bl          TWLReadRegs

; 630  :     ReadOmapTriton2(TWL_PRODUCT_ID_HI, &Reg2);

  00060	e5940004	 ldr         r0, [r4, #4]
  00064	e3a03001	 mov         r3, #1
  00068	e28d2001	 add         r2, sp, #1
  0006c	e3a01003	 mov         r1, #3
  00070	eb000000	 bl          TWLReadRegs

; 631  :     RETAILMSG(1, (L"\tULPI_PID=(%x,%x)\r\n", Reg1, Reg2));

  00074	e5dd2001	 ldrb        r2, [sp, #1]
  00078	e5dd1000	 ldrb        r1, [sp]
  0007c	e59f0174	 ldr         r0, [pc, #0x174]
  00080	eb000000	 bl          NKDbgPrintfW

; 632  : 
; 633  :     ReadOmapTriton2(TWL_FUNC_CTRL, &Reg1);

  00084	e5940004	 ldr         r0, [r4, #4]
  00088	e3a03001	 mov         r3, #1
  0008c	e28d2000	 add         r2, sp, #0
  00090	e3a01004	 mov         r1, #4
  00094	eb000000	 bl          TWLReadRegs

; 634  :     RETAILMSG(1, (L"\tFunction Control=%x\r\n", Reg1));

  00098	e5dd1000	 ldrb        r1, [sp]
  0009c	e59f0150	 ldr         r0, [pc, #0x150]
  000a0	eb000000	 bl          NKDbgPrintfW

; 635  : 
; 636  :     ReadOmapTriton2(TWL_IFC_CTRL, &Reg1);

  000a4	e5940004	 ldr         r0, [r4, #4]
  000a8	e3a03001	 mov         r3, #1
  000ac	e28d2000	 add         r2, sp, #0
  000b0	e3a01007	 mov         r1, #7
  000b4	eb000000	 bl          TWLReadRegs

; 637  :     RETAILMSG(1, (L"\tInterface Control=%x\r\n", Reg1));

  000b8	e5dd1000	 ldrb        r1, [sp]
  000bc	e59f012c	 ldr         r0, [pc, #0x12C]
  000c0	eb000000	 bl          NKDbgPrintfW

; 638  : 
; 639  :     ReadOmapTriton2(TWL_OTG_CTRL, &Reg1);

  000c4	e5940004	 ldr         r0, [r4, #4]
  000c8	e3a03001	 mov         r3, #1
  000cc	e28d2000	 add         r2, sp, #0
  000d0	e3a0100a	 mov         r1, #0xA
  000d4	eb000000	 bl          TWLReadRegs

; 640  :     RETAILMSG(1, (L"\tOTG Control(%x)=%x\r\n", Reg1));

  000d8	e5dd1000	 ldrb        r1, [sp]
  000dc	e59f0108	 ldr         r0, [pc, #0x108]
  000e0	eb000000	 bl          NKDbgPrintfW

; 641  : 
; 642  :     ReadOmapTriton2(TWL_USB_INT_EN_RISE, &Reg1);

  000e4	e5940004	 ldr         r0, [r4, #4]
  000e8	e3a03001	 mov         r3, #1
  000ec	e28d2000	 add         r2, sp, #0
  000f0	e3a0100d	 mov         r1, #0xD
  000f4	eb000000	 bl          TWLReadRegs

; 643  :     RETAILMSG(1, (L"\tInterrupt Enable rising=%x\r\n", Reg1));

  000f8	e5dd1000	 ldrb        r1, [sp]
  000fc	e59f00e4	 ldr         r0, [pc, #0xE4]
  00100	eb000000	 bl          NKDbgPrintfW

; 644  : 
; 645  :     ReadOmapTriton2(TWL_USB_INT_EN_FALL, &Reg1);

  00104	e5940004	 ldr         r0, [r4, #4]
  00108	e3a03001	 mov         r3, #1
  0010c	e28d2000	 add         r2, sp, #0
  00110	e3a01010	 mov         r1, #0x10
  00114	eb000000	 bl          TWLReadRegs

; 646  :     RETAILMSG(1, (L"\tInterrupt Enable Falling=%x\r\n", Reg1));

  00118	e5dd1000	 ldrb        r1, [sp]
  0011c	e59f00c0	 ldr         r0, [pc, #0xC0]
  00120	eb000000	 bl          NKDbgPrintfW

; 647  : 
; 648  :     ReadOmapTriton2(TWL_USB_INT_STS, &Reg1);

  00124	e5940004	 ldr         r0, [r4, #4]
  00128	e3a03001	 mov         r3, #1
  0012c	e28d2000	 add         r2, sp, #0
  00130	e3a01013	 mov         r1, #0x13
  00134	eb000000	 bl          TWLReadRegs

; 649  :     RETAILMSG(1, (L"\tInterrupt Status=%x\r\n", Reg1));

  00138	e5dd1000	 ldrb        r1, [sp]
  0013c	e59f009c	 ldr         r0, [pc, #0x9C]
  00140	eb000000	 bl          NKDbgPrintfW

; 650  : 
; 651  :     ReadOmapTriton2(TWL_USB_INT_LATCH, &Reg1);

  00144	e3a03001	 mov         r3, #1
  00148	e5940004	 ldr         r0, [r4, #4]
  0014c	e28d2000	 add         r2, sp, #0
  00150	e3a01014	 mov         r1, #0x14
  00154	eb000000	 bl          TWLReadRegs

; 652  :     RETAILMSG(1, (L"\tInterrupt Latch=%x\r\n", Reg1));

  00158	e5dd1000	 ldrb        r1, [sp]
  0015c	e59f0078	 ldr         r0, [pc, #0x78]
  00160	eb000000	 bl          NKDbgPrintfW

; 653  : 
; 654  :     ReadOmapTriton2(TWL_DEBUG, &Reg1);

  00164	e5940004	 ldr         r0, [r4, #4]
  00168	e3a03001	 mov         r3, #1
  0016c	e28d2000	 add         r2, sp, #0
  00170	e3a01015	 mov         r1, #0x15
  00174	eb000000	 bl          TWLReadRegs

; 655  :     RETAILMSG(1, (L"\tDebug=%x\r\n", Reg1));

  00178	e5dd1000	 ldrb        r1, [sp]
  0017c	e59f0054	 ldr         r0, [pc, #0x54]
  00180	eb000000	 bl          NKDbgPrintfW

; 656  : 
; 657  :     ReadOmapTriton2(TWL_SCRATCH_REG, &Reg1);

  00184	e5940004	 ldr         r0, [r4, #4]
  00188	e3a03001	 mov         r3, #1
  0018c	e28d2000	 add         r2, sp, #0
  00190	e3a01016	 mov         r1, #0x16
  00194	eb000000	 bl          TWLReadRegs

; 658  :     RETAILMSG(1, (L"\tScratch=%x\r\n", Reg1));

  00198	e5dd1000	 ldrb        r1, [sp]
  0019c	e59f0030	 ldr         r0, [pc, #0x30]
  001a0	eb000000	 bl          NKDbgPrintfW

; 659  : 
; 660  :     ReadOmapTriton2(TWL_POWER_CTRL, &Reg1);

  001a4	e5940004	 ldr         r0, [r4, #4]
  001a8	e3a03001	 mov         r3, #1
  001ac	e28d2000	 add         r2, sp, #0
  001b0	e3a010ac	 mov         r1, #0xAC
  001b4	eb000000	 bl          TWLReadRegs

; 661  :     RETAILMSG(1, (L"\tPower=%x\r\n", Reg1));

  001b8	e5dd1000	 ldrb        r1, [sp]
  001bc	e59f000c	 ldr         r0, [pc, #0xC]
  001c0	eb000000	 bl          NKDbgPrintfW

; 662  : }

  001c4	e28dd004	 add         sp, sp, #4
  001c8	e8bd4010	 ldmia       sp!, {r4, lr}
  001cc	e12fff1e	 bx          lr
  001d0		 |$LN60@DumpULPIRe|
  001d0		 |$LN61@DumpULPIRe|
  001d0	00000000	 DCD         |??_C@_1BI@NAAPLKEI@?$AA?7?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  001d4		 |$LN62@DumpULPIRe|
  001d4	00000000	 DCD         |??_C@_1BM@COCHFPM@?$AA?7?$AAS?$AAc?$AAr?$AAa?$AAt?$AAc?$AAh?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  001d8		 |$LN63@DumpULPIRe|
  001d8	00000000	 DCD         |??_C@_1BI@LMCDJCFH@?$AA?7?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  001dc		 |$LN64@DumpULPIRe|
  001dc	00000000	 DCD         |??_C@_1CM@EPLEKGBF@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAL?$AAa?$AAt?$AAc?$AAh?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  001e0		 |$LN65@DumpULPIRe|
  001e0	00000000	 DCD         |??_C@_1CO@MHHIEMCK@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  001e4		 |$LN66@DumpULPIRe|
  001e4	00000000	 DCD         |??_C@_1DO@KEKHNAPH@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAF?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  001e8		 |$LN67@DumpULPIRe|
  001e8	00000000	 DCD         |??_C@_1DM@KCOOKLKJ@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAr?$AAi?$AAs?$AAi?$AAn?$AAg?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  001ec		 |$LN68@DumpULPIRe|
  001ec	00000000	 DCD         |??_C@_1CM@EKMKKMLB@?$AA?7?$AAO?$AAT?$AAG?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  001f0		 |$LN69@DumpULPIRe|
  001f0	00000000	 DCD         |??_C@_1DA@KPAMGFJP@?$AA?7?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  001f4		 |$LN70@DumpULPIRe|
  001f4	00000000	 DCD         |??_C@_1CO@HKAGOOOO@?$AA?7?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  001f8		 |$LN71@DumpULPIRe|
  001f8	00000000	 DCD         |??_C@_1CI@OIICGPLH@?$AA?7?$AAU?$AAL?$AAP?$AAI?$AA_?$AAP?$AAI?$AAD?$AA?$DN?$AA?$CI?$AA?$CF?$AAx?$AA?0?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  001fc		 |$LN72@DumpULPIRe|
  001fc	00000000	 DCD         |??_C@_1CI@ONDOGBPJ@?$AA?7?$AAU?$AAL?$AAP?$AAI?$AA_?$AAV?$AAI?$AAD?$AA?$DN?$AA?$CI?$AA?$CF?$AAx?$AA?0?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00200		 |$LN73@DumpULPIRe|
  00200	00000000	 DCD         |??_C@_1DC@KMCHCCLA@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAU?$AAL?$AAP?$AAI?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00204		 |$M37250|

			 ENDP  ; |?DumpULPIRegs@HSUSBOTGTransceiverTps659xx@@UAAXXZ|, HSUSBOTGTransceiverTps659xx::DumpULPIRegs

	EXPORT	|CreateHSUSBOTGTransceiver|
	IMPORT	|??2@YAPAXI@Z|				; operator new

  00000			 AREA	 |.pdata|, PDATA
|$T37280| DCD	|$LN7@CreateHSUS|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CreateHSUSBOTGTransceiver| PROC

; 50   : {

  00000		 |$LN7@CreateHSUS|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37277|
  00004	e1a04000	 mov         r4, r0

; 51   :     return new HSUSBOTGTransceiverTps659xx(pOTG);

  00008	e3a00018	 mov         r0, #0x18
  0000c	eb000000	 bl          |??2@YAPAXI@Z|
  00010	e3500000	 cmp         r0, #0
  00014	0a000003	 beq         |$LN3@CreateHSUS|
  00018	e1a01004	 mov         r1, r4
  0001c	eb000000	 bl          |??0HSUSBOTGTransceiverTps659xx@@QAA@PAUHSMUSB_T@@@Z|

; 52   : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$LN3@CreateHSUS|

; 51   :     return new HSUSBOTGTransceiverTps659xx(pOTG);

  00028	e3a00000	 mov         r0, #0

; 52   : }

  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M37278|

			 ENDP  ; |CreateHSUSBOTGTransceiver|

	END
