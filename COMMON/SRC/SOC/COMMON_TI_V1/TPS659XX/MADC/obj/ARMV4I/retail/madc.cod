; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\TPS659XX\MADC\madc.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|DEVICE_IFC_MADC_GUID| [ DATA ]
	EXPORT	|DEVICE_IFC_TWL_GUID| [ DATA ]
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "M", 0x0, "A", 0x0, "D", 0x0, "C", 0x0, 0x0, 0x0
	%	54
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0
	%	56
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCD	0x3

  00000			 AREA	 |.rdata|, DATA, READONLY
|DEVICE_IFC_MADC_GUID| DCD 0xe61ca799
	DCW	0x8ef5
	DCW	0x41e3
	DCB	0x82
	DCB	0x37
	DCB	0x2b
	DCB	0xd8
	DCB	0x87
	DCB	0x9b
	DCB	0xa4
	DCB	0xaf
|DEVICE_IFC_TWL_GUID| DCD 0xdef0a04b
	DCW	0xb967
	DCW	0x43db
	DCB	0x95
	DCB	0x9e
	DCB	0xd9
	DCB	0xfc
	DCB	0x62
	DCB	0x25
	DCB	0xcd
	DCB	0xeb
|s_ConversionValue| DCD 0xc03
	DCD	0xc03
	DCD	0x1405
	DCD	0x1405
	DCD	0x1405
	DCD	0x1405
	DCD	0x1405
	DCD	0x1405
	DCD	0x380e
	DCD	0x2409
	DCD	0xc03
	DCD	0x3c0f
	DCD	0x300c
	DCD	0xc03
	DCD	0xc03
	DCD	0x1a6d
|s_ConversionLookup| DCD 0x0
	DCD	0x1
	DCD	0x2
	DCD	0x3
	DCD	0x4
	DCD	0x5
	DCD	0x6
	DCD	0x7
	DCD	0x8
	DCD	0x9
	DCD	0xa
	DCD	0xb
	DCD	0xc
	DCD	0xd
	DCD	0xe
	DCD	0xf
	DCD	0x1
	DCD	0x8
	DCD	0xa
	DCD	0xb
	DCD	0xc
	EXPORT	|GetCurrentProcessId|
	IMPORT	|__GetUserKData|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T36314| DCD	|$LN5@GetCurrent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcessId| PROC

; 373  : _inline DWORD GetCurrentProcessId(void) {

  00000		 |$LN5@GetCurrent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36311|

; 374  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURPROC * sizeof(HANDLE)));

  00004	e3a0000c	 mov         r0, #0xC
  00008	eb000000	 bl          __GetUserKData

; 375  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M36312|

			 ENDP  ; |GetCurrentProcessId|

	EXPORT	|?IsEqualGUID@@YAHABU_GUID@@0@Z|	; IsEqualGUID
	IMPORT	|memcmp|
; File c:\wince600\public\common\sdk\inc\objbase.h

  00000			 AREA	 |.pdata|, PDATA
|$T36328| DCD	|$LN7@IsEqualGUI|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsEqualGUID@@YAHABU_GUID@@0@Z| PROC	; IsEqualGUID

; 493  : {

  00000		 |$LN7@IsEqualGUI|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36325|

; 494  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00004	e3a02010	 mov         r2, #0x10
  00008	eb000000	 bl          memcmp
  0000c	e3500000	 cmp         r0, #0
  00010	03a00001	 moveq       r0, #1

; 495  : }

  00014	049de004	 ldreq       lr, [sp], #4

; 494  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00018	13a00000	 movne       r0, #0

; 495  : }

  0001c	149de004	 ldrne       lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M36326|

			 ENDP  ; |?IsEqualGUID@@YAHABU_GUID@@0@Z|, IsEqualGUID

	EXPORT	|?ConvertToVolts@@YAKKKPAK0K@Z|		; ConvertToVolts
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\madc\madc.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T36347| DCD	|$LN14@ConvertToV|
	DCD	0x40003101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ConvertToVolts@@YAKKKPAK0K@Z| PROC	; ConvertToVolts

; 152  : {

  00000		 |$LN14@ConvertToV|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M36344|
  00004	e1a07003	 mov         r7, r3
  00008	e1a09002	 mov         r9, r2
  0000c	e3500000	 cmp         r0, #0

; 153  :     DEBUGMSG(ZONE_FUNCTION, (
; 154  :         L"ADC: +ConvertToVolts(0x%08x, 0x%08x, 0x%08x, 0x%08x, 0x%08x)\r\n", 
; 155  :         context, channels, prgValues, prgResults, count
; 156  :         ));
; 157  :     
; 158  :     int i;
; 159  :     UINT64 dwTemp;
; 160  :     DWORD dwCount = count;

  00010	e59d4020	 ldr         r4, [sp, #0x20]
  00014	e1a05004	 mov         r5, r4

; 161  :     Device_t *pDevice = (Device_t*)context;
; 162  : 
; 163  :     // do some sanity checks
; 164  :     if ((pDevice == NULL) || (pDevice->cookie != MADC_DEVICE_COOKIE) || 
; 165  :         prgResults == NULL || count == 0)

  00018	0a000024	 beq         |$cleanUp$36012|
  0001c	e590e000	 ldr         lr, [r0]
  00020	e59f0098	 ldr         r0, [pc, #0x98]
  00024	e15e0000	 cmp         lr, r0
  00028	1a000020	 bne         |$cleanUp$36012|
  0002c	e3570000	 cmp         r7, #0
  00030	0a00001e	 beq         |$cleanUp$36012|
  00034	e3540000	 cmp         r4, #0
  00038	0a00001c	 beq         |$cleanUp$36012|
  0003c	e3e034ff	 mvn         r3, #0xFF, 8

; 166  :         {
; 167  :         DEBUGMSG(ZONE_ERROR, (L"ADC: !ERROR - ReadValue: "
; 168  :             L"Incorrect context parameter\r\n"
; 169  :             ));
; 170  :         goto cleanUp;
; 171  :         }
; 172  : 
; 173  :     // convert raw values to millivolts
; 174  :     i = 0;
; 175  :     channels &= 0x1FFFFF;

  00040	e223060e	 eor         r0, r3, #0xE, 12
  00044	e0110000	 ands        r0, r1, r0

; 176  :     while (channels && dwCount > 0)

  00048	0a000017	 beq         |$LN11@ConvertToV|
  0004c	e59f6068	 ldr         r6, [pc, #0x68]
  00050	e3a03c03	 mov         r3, #3, 24
  00054	e38380ff	 orr         r8, r3, #0xFF
  00058	e286e040	 add         lr, r6, #0x40
  0005c	e3a0affa	 mov         r10, #0xFA, 30
  00060		 |$LL3@ConvertToV|
  00060	e3550000	 cmp         r5, #0
  00064	0a000010	 beq         |$LN11@ConvertToV|

; 177  :         {
; 178  :         if (channels & 1)

  00068	e3100001	 tst         r0, #1
  0006c	0a00000b	 beq         |$LN1@ConvertToV|

; 179  :             {
; 180  :             dwTemp = (*prgValues & 0x3FF) * 
; 181  :                         s_ConversionValue[s_ConversionLookup[i]];   //10.21(V)
; 182  : 
; 183  :             dwTemp *= 1000;                                         //20.21(mV)
; 184  :             dwTemp += FIXEDPOINT_ROUNDUP;                           //20.21(mV)
; 185  :             *prgResults = (DWORD)(dwTemp >> 21);                    //20.0(mV)

  00070	e59e3000	 ldr         r3, [lr]
  00074	e4991004	 ldr         r1, [r9], #4

; 186  : 
; 187  :             // next entry
; 188  :             ++prgValues;
; 189  :             ++prgResults;
; 190  :             --dwCount;

  00078	e2455001	 sub         r5, r5, #1
  0007c	e7962103	 ldr         r2, [r6, +r3, lsl #2]
  00080	e0013008	 and         r3, r1, r8
  00084	e0030392	 mul         r3, r2, r3
  00088	e0812a93	 umull       r2, r1, r3, r10
  0008c	e2922601	 adds        r2, r2, #1, 12
  00090	e2a13000	 adc         r3, r1, #0
  00094	e1a03583	 mov         r3, r3, lsl #11
  00098	e1833aa2	 orr         r3, r3, r2, lsr #21
  0009c	e4873004	 str         r3, [r7], #4
  000a0		 |$LN1@ConvertToV|

; 191  :             }        
; 192  :         ++i;

  000a0	e28ee004	 add         lr, lr, #4

; 193  :         channels >>= 1;

  000a4	e1b000a0	 movs        r0, r0, lsr #1
  000a8	1affffec	 bne         |$LL3@ConvertToV|
  000ac		 |$LN11@ConvertToV|

; 194  :         }
; 195  :     
; 196  :     count -= dwCount;

  000ac	e0444005	 sub         r4, r4, r5
  000b0		 |$cleanUp$36012|

; 197  :     
; 198  : cleanUp:
; 199  : 
; 200  :     DEBUGMSG(ZONE_FUNCTION, (
; 201  :         L"ADC: -ConvertToVolts(0x%08x, 0x%08x, 0x%08x, 0x%08x, 0x%08x)\r\n", 
; 202  :         context, channels, prgValues, prgResults, count
; 203  :         ));
; 204  :     return count;
; 205  : }

  000b0	e1a00004	 mov         r0, r4
  000b4	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$LN15@ConvertToV|
  000bc		 |$LN16@ConvertToV|
  000bc	00000000	 DCD         |s_ConversionValue|
  000c0		 |$LN17@ConvertToV|
  000c0	61646344	 DCD         0x61646344
  000c4		 |$M36345|

			 ENDP  ; |?ConvertToVolts@@YAKKKPAK0K@Z|, ConvertToVolts

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?ReadBCILines@@YAKPAUDevice_t@@GPAKK@Z| ; ReadBCILines
	IMPORT	|StallExecution|
	IMPORT	|TWLReadRegs|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T36383| DCD	|$LN20@ReadBCILin|
	DCD	0xc0003d02

  00000			 AREA	 |.xdata|, DATA
|$T36379| DCD	0xffffffd8
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T36379|

  00008		 |?ReadBCILines@@YAKPAUDevice_t@@GPAKK@Z| PROC ; ReadBCILines

; 220  : {

  00008		 |$LN20@ReadBCILin|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M36380|
  00010	e1a07003	 mov         r7, r3
  00014	e1a08002	 mov         r8, r2
  00018	e1a05001	 mov         r5, r1
  0001c	e1a0a000	 mov         r10, r0
  00020	e59fe0d0	 ldr         lr, [pc, #0xD0]
  00024	e59ee000	 ldr         lr, [lr]
  00028	e58de010	 str         lr, [sp, #0x10]

; 221  :     DEBUGMSG(ZONE_FUNCTION, (
; 222  :         L"ADC: +ReadBCILines(0x%08x, 0x%08x, 0x%08x, 0x%08x)\r\n", 
; 223  :         pDevice, channels, prgResults, count
; 224  :         ));
; 225  :     
; 226  :     UINT8 val;
; 227  :     UINT8 counter;
; 228  :     UINT16 rgBCIRegisters[5];
; 229  :     UINT16 *pBCIRegisters = rgBCIRegisters;
; 230  :     DWORD dwReadCount = 0;
; 231  : 
; 232  :     // waits for conversion complete
; 233  :     val = 0;

  0002c	e3a03000	 mov         r3, #0
  00030	e5cd3000	 strb        r3, [sp]
  00034	e28d6004	 add         r6, sp, #4
  00038	e3a04000	 mov         r4, #0

; 234  :     counter = 0;

  0003c	e3a09000	 mov         r9, #0
  00040	e3a0b802	 mov         r11, #2, 16
  00044		 |$LL8@ReadBCILin|

; 235  :     while (counter++ < 0xFF)
; 236  :         {
; 237  :         TWLReadRegs(pDevice->hTWL, TWL_CTRL_SW1, &val, 1);

  00044	e59a0018	 ldr         r0, [r10, #0x18]
  00048	e289e001	 add         lr, r9, #1
  0004c	e3a03001	 mov         r3, #1
  00050	e28d2000	 add         r2, sp, #0
  00054	e38b1012	 orr         r1, r11, #0x12
  00058	e20e90ff	 and         r9, lr, #0xFF
  0005c	eb000000	 bl          TWLReadRegs

; 238  :         if (val & TWL_MADC_CTRL_SW_EOC_BCI)

  00060	e5dd3000	 ldrb        r3, [sp]
  00064	e3130008	 tst         r3, #8
  00068	1a000003	 bne         |$LN13@ReadBCILin|

; 239  :             {
; 240  :             break;
; 241  :             }
; 242  :         StallExecution(10);

  0006c	e3a0000a	 mov         r0, #0xA
  00070	eb000000	 bl          StallExecution
  00074	e35900ff	 cmp         r9, #0xFF
  00078	3afffff1	 bcc         |$LL8@ReadBCILin|
  0007c		 |$LN13@ReadBCILin|

; 243  :         }
; 244  : 
; 245  :     // read to results of the general purpose lines    
; 246  :     if (TWLReadRegs(pDevice->hTWL, TWL_BCICH0_LSB, rgBCIRegisters, 
; 247  :         sizeof(rgBCIRegisters)) == FALSE)

  0007c	e59a0018	 ldr         r0, [r10, #0x18]
  00080	e3a03802	 mov         r3, #2, 16
  00084	e3831057	 orr         r1, r3, #0x57
  00088	e3a0300a	 mov         r3, #0xA
  0008c	e28d2004	 add         r2, sp, #4
  00090	eb000000	 bl          TWLReadRegs
  00094	e3500000	 cmp         r0, #0
  00098	0a000010	 beq         |$cleanUp$36038|

; 248  :         {
; 249  :         DEBUGMSG(ZONE_ERROR, (L"ADC: !ERROR - ReadBCILines: "
; 250  :             L"Failed writing start conversion\r\n"
; 251  :             ));
; 252  :         goto cleanUp;
; 253  :         }
; 254  : 
; 255  :     // copy raw results into return buffer
; 256  :     counter = 0;

  0009c	e3a04000	 mov         r4, #0

; 257  :     while (counter < count && channels)

  000a0	e3570000	 cmp         r7, #0
  000a4	0a00000d	 beq         |$cleanUp$36038|
  000a8		 |$LL3@ReadBCILin|
  000a8	e1b03005	 movs        r3, r5
  000ac	0a00000b	 beq         |$cleanUp$36038|

; 258  :         {
; 259  :         if (channels & 1)

  000b0	e3130001	 tst         r3, #1

; 260  :             {
; 261  :             // read raw value
; 262  :             *prgResults = *pBCIRegisters >> 6;

  000b4	11d620b0	 ldrneh      r2, [r6]

; 263  : 
; 264  :             // move to next result and increment counters
; 265  :             ++prgResults;
; 266  :             ++counter;

  000b8	12843001	 addne       r3, r4, #1
  000bc	120340ff	 andne       r4, r3, #0xFF
  000c0	11a03322	 movne       r3, r2, lsr #6
  000c4	14883004	 strne       r3, [r8], #4

; 267  :             }
; 268  :         pBCIRegisters++;
; 269  :         channels >>= 1;

  000c8	e1a030a5	 mov         r3, r5, lsr #1
  000cc	e1a05803	 mov         r5, r3, lsl #16
  000d0	e1a05825	 mov         r5, r5, lsr #16
  000d4	e2866002	 add         r6, r6, #2
  000d8	e1540007	 cmp         r4, r7
  000dc	3afffff1	 bcc         |$LL3@ReadBCILin|
  000e0		 |$cleanUp$36038|

; 270  :         }
; 271  :     
; 272  :     dwReadCount = counter;
; 273  : 
; 274  : cleanUp:    
; 275  :     DEBUGMSG(ZONE_FUNCTION, (
; 276  :         L"ADC: -ReadBCILines(0x%08x, 0x%08x, 0x%08x, 0x%08x)\r\n", 
; 277  :         pDevice, channels, prgResults, count
; 278  :         ));
; 279  : 
; 280  :     return dwReadCount;

  000e0	e59d0010	 ldr         r0, [sp, #0x10]
  000e4	eb000000	 bl          __security_check_cookie

; 281  : }

  000e8	e1a00004	 mov         r0, r4
  000ec	e28dd014	 add         sp, sp, #0x14
  000f0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000f4	e12fff1e	 bx          lr
  000f8		 |$LN21@ReadBCILin|
  000f8		 |$LN22@ReadBCILin|
  000f8	00000000	 DCD         |__security_cookie|
  000fc		 |$M36381|

			 ENDP  ; |?ReadBCILines@@YAKPAUDevice_t@@GPAKK@Z|, ReadBCILines

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?ReadGeneralPurposeLines@@YAKPAUDevice_t@@GPAKK@Z| ; ReadGeneralPurposeLines

  00000			 AREA	 |.pdata|, PDATA
|$T36416| DCD	|$LN20@ReadGenera|
	DCD	0xc0003d02

  00000			 AREA	 |.xdata|, DATA
|$T36412| DCD	0xffffffd8
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T36412|

  00008		 |?ReadGeneralPurposeLines@@YAKPAUDevice_t@@GPAKK@Z| PROC ; ReadGeneralPurposeLines

; 296  : {

  00008		 |$LN20@ReadGenera|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dd028	 sub         sp, sp, #0x28
  00010		 |$M36413|
  00010	e1a07003	 mov         r7, r3
  00014	e1a08002	 mov         r8, r2
  00018	e1a05001	 mov         r5, r1
  0001c	e1a0a000	 mov         r10, r0
  00020	e59fe0d0	 ldr         lr, [pc, #0xD0]
  00024	e59ee000	 ldr         lr, [lr]
  00028	e58de024	 str         lr, [sp, #0x24]

; 297  :     DEBUGMSG(ZONE_FUNCTION, (
; 298  :         L"ADC: +ReadGeneralPurposeLines(0x%08x, 0x%08x, 0x%08x, 0x%08x)\r\n", 
; 299  :         pDevice, channels, prgResults, count
; 300  :         ));
; 301  :     
; 302  :     UINT8 val;
; 303  :     UINT8 counter;
; 304  :     UINT16 rgGPRegisters[16];
; 305  :     UINT16 *pGPRegisters = rgGPRegisters;
; 306  :     DWORD dwReadCount = 0;
; 307  : 
; 308  :     // waits for conversion complete
; 309  :     val = 0;

  0002c	e3a03000	 mov         r3, #0
  00030	e5cd3000	 strb        r3, [sp]
  00034	e28d6004	 add         r6, sp, #4
  00038	e3a04000	 mov         r4, #0

; 310  :     counter = 0;

  0003c	e3a09000	 mov         r9, #0
  00040	e3a0b802	 mov         r11, #2, 16
  00044		 |$LL8@ReadGenera|

; 311  :     while (counter++ < 0xFF)
; 312  :         {
; 313  :         TWLReadRegs(pDevice->hTWL, TWL_CTRL_SW1, &val, 1);

  00044	e59a0018	 ldr         r0, [r10, #0x18]
  00048	e289e001	 add         lr, r9, #1
  0004c	e3a03001	 mov         r3, #1
  00050	e28d2000	 add         r2, sp, #0
  00054	e38b1012	 orr         r1, r11, #0x12
  00058	e20e90ff	 and         r9, lr, #0xFF
  0005c	eb000000	 bl          TWLReadRegs

; 314  :         if (val & TWL_MADC_CTRL_SW_EOC_SW1)

  00060	e5dd3000	 ldrb        r3, [sp]
  00064	e3130002	 tst         r3, #2
  00068	1a000003	 bne         |$LN13@ReadGenera|

; 315  :             {
; 316  :             break;
; 317  :             }
; 318  :         StallExecution(10);

  0006c	e3a0000a	 mov         r0, #0xA
  00070	eb000000	 bl          StallExecution
  00074	e35900ff	 cmp         r9, #0xFF
  00078	3afffff1	 bcc         |$LL8@ReadGenera|
  0007c		 |$LN13@ReadGenera|

; 319  :         }
; 320  : 
; 321  :     // read to results of the general purpose lines    
; 322  :     if (TWLReadRegs(pDevice->hTWL, TWL_GPCH0_LSB, rgGPRegisters, 
; 323  :         sizeof(rgGPRegisters)) == FALSE)

  0007c	e59a0018	 ldr         r0, [r10, #0x18]
  00080	e3a03802	 mov         r3, #2, 16
  00084	e3831037	 orr         r1, r3, #0x37
  00088	e3a03020	 mov         r3, #0x20
  0008c	e28d2004	 add         r2, sp, #4
  00090	eb000000	 bl          TWLReadRegs
  00094	e3500000	 cmp         r0, #0
  00098	0a000010	 beq         |$cleanUp$36063|

; 324  :         {
; 325  :         DEBUGMSG(ZONE_ERROR, (L"ADC: !ERROR - ReadGeneralPurposeLines: "
; 326  :             L"Failed writing start conversion\r\n"
; 327  :             ));
; 328  :         goto cleanUp;
; 329  :         }
; 330  : 
; 331  :     // copy raw results into return buffer
; 332  :     counter = 0;

  0009c	e3a04000	 mov         r4, #0

; 333  :     while (counter < count && channels)

  000a0	e3570000	 cmp         r7, #0
  000a4	0a00000d	 beq         |$cleanUp$36063|
  000a8		 |$LL3@ReadGenera|
  000a8	e1b03005	 movs        r3, r5
  000ac	0a00000b	 beq         |$cleanUp$36063|

; 334  :         {
; 335  :         if (channels & 1)

  000b0	e3130001	 tst         r3, #1

; 336  :             {
; 337  :             // read raw value
; 338  :             *prgResults = *pGPRegisters >> 6;

  000b4	11d620b0	 ldrneh      r2, [r6]

; 339  : 
; 340  :             // move to next result and increment counter
; 341  :             ++prgResults;
; 342  :             ++counter;

  000b8	12843001	 addne       r3, r4, #1
  000bc	120340ff	 andne       r4, r3, #0xFF
  000c0	11a03322	 movne       r3, r2, lsr #6
  000c4	14883004	 strne       r3, [r8], #4

; 343  :             }
; 344  :         pGPRegisters++;
; 345  :         channels >>= 1;

  000c8	e1a030a5	 mov         r3, r5, lsr #1
  000cc	e1a05803	 mov         r5, r3, lsl #16
  000d0	e1a05825	 mov         r5, r5, lsr #16
  000d4	e2866002	 add         r6, r6, #2
  000d8	e1540007	 cmp         r4, r7
  000dc	3afffff1	 bcc         |$LL3@ReadGenera|
  000e0		 |$cleanUp$36063|

; 346  :         }
; 347  :     
; 348  :     // return number of values read
; 349  :     dwReadCount = counter;
; 350  : 
; 351  : cleanUp:    
; 352  :     DEBUGMSG(ZONE_FUNCTION, (
; 353  :         L"ADC: -ReadGeneralPurposeLines(0x%08x, 0x%08x, 0x%08x, 0x%08x)\r\n", 
; 354  :         pDevice, channels, prgResults, count
; 355  :         ));
; 356  : 
; 357  :     return dwReadCount;

  000e0	e59d0024	 ldr         r0, [sp, #0x24]
  000e4	eb000000	 bl          __security_check_cookie

; 358  : }

  000e8	e1a00004	 mov         r0, r4
  000ec	e28dd028	 add         sp, sp, #0x28
  000f0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000f4	e12fff1e	 bx          lr
  000f8		 |$LN21@ReadGenera|
  000f8		 |$LN22@ReadGenera|
  000f8	00000000	 DCD         |__security_cookie|
  000fc		 |$M36414|

			 ENDP  ; |?ReadGeneralPurposeLines@@YAKPAUDevice_t@@GPAKK@Z|, ReadGeneralPurposeLines

	EXPORT	|?ReadValue@@YAKKKPAKK@Z|		; ReadValue
	IMPORT	|LeaveCriticalSection|
	IMPORT	|TWLWriteRegs|
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T36438| DCD	|$LN22@ReadValue|
	DCD	0x40005602
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ReadValue@@YAKKKPAKK@Z| PROC		; ReadValue

; 374  : {

  00000		 |$LN22@ReadValue|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36435|
  00008	e1a05003	 mov         r5, r3
  0000c	e1a08002	 mov         r8, r2
  00010	e1a09001	 mov         r9, r1
  00014	e1b07000	 movs        r7, r0

; 375  :     DEBUGMSG(ZONE_FUNCTION, (
; 376  :         L"ADC: +ReadValue(0x%08x, 0x%08x, 0x%08x, 0x%08x)\r\n", 
; 377  :         context, mask, prgResults, count
; 378  :         ));
; 379  : 
; 380  :     UINT8 pwr;
; 381  :     UINT8 val;
; 382  :     int readCount;
; 383  :     UINT16 channels;
; 384  :     DWORD rc = 0;

  00018	e3a06000	 mov         r6, #0

; 385  :     BOOL bLocked = FALSE;
; 386  :     Device_t *pDevice = (Device_t*)context;
; 387  : 
; 388  :     // do some sanity checks
; 389  :     if ((pDevice == NULL) || (pDevice->cookie != MADC_DEVICE_COOKIE) || 
; 390  :         prgResults == NULL || count == 0)

  0001c	0a000048	 beq         |$LN1@ReadValue|
  00020	e5974000	 ldr         r4, [r7]
  00024	e59fe128	 ldr         lr, [pc, #0x128]
  00028	e154000e	 cmp         r4, lr
  0002c	1a000044	 bne         |$LN1@ReadValue|
  00030	e3580000	 cmp         r8, #0
  00034	0a000042	 beq         |$LN1@ReadValue|
  00038	e3550000	 cmp         r5, #0
  0003c	0a000040	 beq         |$LN1@ReadValue|

; 391  :         {
; 392  :         DEBUGMSG(ZONE_ERROR, (L"ADC: !ERROR - ReadValue: "
; 393  :             L"Incorrect context parameter\r\n"
; 394  :             ));
; 395  :         goto cleanUp;
; 396  :         }
; 397  : 
; 398  :     // serialize access
; 399  :     bLocked = TRUE;
; 400  :     EnterCriticalSection(&pDevice->cs);

  00040	e2870004	 add         r0, r7, #4
  00044	eb000000	 bl          EnterCriticalSection

; 401  : 
; 402  :     // power on MADC
; 403  :     pwr = MADCON;
; 404  :     if (TWLWriteRegs(pDevice->hTWL, TWL_CTRL1, &pwr, 1) == FALSE)

  00048	e5970018	 ldr         r0, [r7, #0x18]
  0004c	e3a0e001	 mov         lr, #1
  00050	e3a03001	 mov         r3, #1
  00054	e28d2000	 add         r2, sp, #0
  00058	e3a01802	 mov         r1, #2, 16
  0005c	e5cde000	 strb        lr, [sp]
  00060	eb000000	 bl          TWLWriteRegs
  00064	e3500000	 cmp         r0, #0
  00068	0a00002c	 beq         |$cleanUp$36088|

; 405  :         {
; 406  :         DEBUGMSG(ZONE_ERROR, (L"ADC: !ERROR - ReadValue: "
; 407  :             L"Unable to enable MADCON\r\n"
; 408  :             ));
; 409  :         goto cleanUp;
; 410  :         }
; 411  : 
; 412  :     // select the channels for conversion 
; 413  :     channels = (UINT16)(mask & 0xFFFF);
; 414  :     if (TWLWriteRegs(pDevice->hTWL, TWL_SW1SELECT_LSB, &channels, 2) == FALSE)

  0006c	e5970018	 ldr         r0, [r7, #0x18]
  00070	e3a03802	 mov         r3, #2, 16
  00074	e1a04809	 mov         r4, r9, lsl #16
  00078	e1a04824	 mov         r4, r4, lsr #16
  0007c	e3831006	 orr         r1, r3, #6
  00080	e3a03002	 mov         r3, #2
  00084	e28d2002	 add         r2, sp, #2
  00088	e1cd40b2	 strh        r4, [sp, #2]
  0008c	eb000000	 bl          TWLWriteRegs
  00090	e3500000	 cmp         r0, #0
  00094	0a000021	 beq         |$cleanUp$36088|

; 415  :         {
; 416  :         DEBUGMSG(ZONE_ERROR, (L"ADC: !ERROR - ReadGeneralPurposeLines: "
; 417  :             L"Failed writing sw1 selection\r\n"
; 418  :             ));
; 419  :         goto cleanUp;
; 420  :         }
; 421  : 
; 422  :     // start conversion
; 423  :     val = TWL_MADC_CTRL_SW_TOGGLE;
; 424  :     if (TWLWriteRegs(pDevice->hTWL, TWL_CTRL_SW1, &val, 1) == FALSE)

  00098	e5970018	 ldr         r0, [r7, #0x18]
  0009c	e3a03802	 mov         r3, #2, 16
  000a0	e3831012	 orr         r1, r3, #0x12
  000a4	e3a0e020	 mov         lr, #0x20
  000a8	e3a03001	 mov         r3, #1
  000ac	e28d2001	 add         r2, sp, #1
  000b0	e5cde001	 strb        lr, [sp, #1]
  000b4	eb000000	 bl          TWLWriteRegs
  000b8	e3500000	 cmp         r0, #0
  000bc	0a000017	 beq         |$cleanUp$36088|

; 425  :         {
; 426  :         DEBUGMSG(ZONE_ERROR, (L"ADC: !ERROR - ReadGeneralPurposeLines: "
; 427  :             L"Failed writing start conversion\r\n"
; 428  :             ));
; 429  :         goto cleanUp;
; 430  :         }
; 431  : 
; 432  : 
; 433  :     // first read general purpose lines
; 434  :     channels = (UINT16)(mask & 0xFFFF);

  000c0	e1cd40b2	 strh        r4, [sp, #2]

; 435  :     if (channels)

  000c4	e3540000	 cmp         r4, #0
  000c8	0a000009	 beq         |$LN7@ReadValue|

; 436  :         {
; 437  :         readCount = ReadGeneralPurposeLines(pDevice, channels, 
; 438  :                             prgResults, count);

  000cc	e1a03005	 mov         r3, r5
  000d0	e1a02008	 mov         r2, r8
  000d4	e1a01004	 mov         r1, r4
  000d8	e1a00007	 mov         r0, r7
  000dc	eb000000	 bl          |?ReadGeneralPurposeLines@@YAKPAUDevice_t@@GPAKK@Z|
  000e0	e3500000	 cmp         r0, #0

; 439  :         if (readCount == 0)

  000e4	0a00000d	 beq         |$cleanUp$36088|

; 440  :             {
; 441  :             DEBUGMSG(ZONE_ERROR, (L"ADC: !ERROR - ReadValue: "
; 442  :                 L"Unable to read general purpose lines\r\n"
; 443  :                 ));
; 444  :             goto cleanUp;
; 445  :             }
; 446  : 
; 447  :         // move pointer to next set of 
; 448  :         rc += readCount;

  000e8	e1a06000	 mov         r6, r0

; 449  :         prgResults += readCount;

  000ec	e0888100	 add         r8, r8, r0, lsl #2

; 450  :         count -= readCount;

  000f0	e0455000	 sub         r5, r5, r0
  000f4		 |$LN7@ReadValue|

; 451  :         }
; 452  : 
; 453  :     // next read bci lines
; 454  :     channels = (UINT16)(mask >> 16);

  000f4	e1b01829	 movs        r1, r9, lsr #16
  000f8	e1cd10b2	 strh        r1, [sp, #2]

; 455  :     if (channels != 0 && count > 0)

  000fc	0a000007	 beq         |$cleanUp$36088|
  00100	e3550000	 cmp         r5, #0
  00104	0a000005	 beq         |$cleanUp$36088|

; 456  :         {
; 457  :         readCount = ReadBCILines(pDevice, channels, 
; 458  :                             prgResults, count);

  00108	e1a03005	 mov         r3, r5
  0010c	e1a02008	 mov         r2, r8
  00110	e1a00007	 mov         r0, r7
  00114	eb000000	 bl          |?ReadBCILines@@YAKPAUDevice_t@@GPAKK@Z|
  00118	e3500000	 cmp         r0, #0

; 459  :         if (readCount == 0)
; 460  :             {
; 461  :             DEBUGMSG(ZONE_ERROR, (L"ADC: !ERROR - ReadValue: "
; 462  :                 L"Unable to read BCI lines\r\n"
; 463  :                 ));
; 464  :             goto cleanUp;
; 465  :             }
; 466  :         rc += readCount;

  0011c	10866000	 addne       r6, r6, r0
  00120		 |$cleanUp$36088|

; 467  :         }
; 468  : 
; 469  : cleanUp:    
; 470  :     if (bLocked == TRUE) 
; 471  :         {
; 472  :         pwr = 0;
; 473  :         TWLWriteRegs(pDevice->hTWL, TWL_CTRL1, &pwr, 1);

  00120	e5970018	 ldr         r0, [r7, #0x18]
  00124	e3a0e000	 mov         lr, #0
  00128	e3a03001	 mov         r3, #1
  0012c	e28d2000	 add         r2, sp, #0
  00130	e3a01802	 mov         r1, #2, 16
  00134	e5cde000	 strb        lr, [sp]
  00138	eb000000	 bl          TWLWriteRegs

; 474  :         LeaveCriticalSection(&pDevice->cs);

  0013c	e2870004	 add         r0, r7, #4
  00140	eb000000	 bl          LeaveCriticalSection
  00144		 |$LN1@ReadValue|

; 475  :         }
; 476  : 
; 477  :     DEBUGMSG(ZONE_FUNCTION, (
; 478  :         L"ADC: -ReadValue(0x%08x, 0x%08x, 0x%08x, 0x%08x)\r\n", 
; 479  :         pDevice, mask, prgResults, count
; 480  :         ));
; 481  : 
; 482  :     return rc;
; 483  : }

  00144	e1a00006	 mov         r0, r6
  00148	e28dd004	 add         sp, sp, #4
  0014c	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00150	e12fff1e	 bx          lr
  00154		 |$LN23@ReadValue|
  00154		 |$LN24@ReadValue|
  00154	61646344	 DCD         0x61646344
  00158		 |$M36436|

			 ENDP  ; |?ReadValue@@YAKKKPAKK@Z|, ReadValue

	EXPORT	|?InitializeDevice@@YAHPAUDevice_t@@@Z|	; InitializeDevice

  00000			 AREA	 |.pdata|, PDATA
|$T36451| DCD	|$LN11@Initialize|
	DCD	0x40002101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InitializeDevice@@YAHPAUDevice_t@@@Z| PROC ; InitializeDevice

; 495  : {

  00000		 |$LN11@Initialize|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36448|
  00004	e1a05000	 mov         r5, r0

; 496  :     DEBUGMSG(ZONE_FUNCTION, (
; 497  :         L"ADC: +InitializeDevice(0x%08x)\r\n", pDevice
; 498  :         ));
; 499  : 
; 500  :     BOOL rc = FALSE;
; 501  : 
; 502  :     if (TWLWriteRegs(pDevice->hTWL, TWL_SW1AVERAGE_LSB, 
; 503  :             &(pDevice->GPChAvgEnable), 2) == FALSE)

  00008	e5950018	 ldr         r0, [r5, #0x18]
  0000c	e3a03802	 mov         r3, #2, 16
  00010	e3831008	 orr         r1, r3, #8
  00014	e3a03002	 mov         r3, #2
  00018	e2852024	 add         r2, r5, #0x24
  0001c	e3a04000	 mov         r4, #0
  00020	eb000000	 bl          TWLWriteRegs
  00024	e3500000	 cmp         r0, #0
  00028	0a000012	 beq         |$cleanUp$36119|

; 504  :         {
; 505  :         DEBUGMSG(ZONE_ERROR, (L"ADC: !ERROR - InitializeDevice "
; 506  :             L"Failed to initialize GP average registers\r\n"
; 507  :             ));
; 508  :         goto cleanUp;
; 509  :         }
; 510  : 
; 511  :     if (TWLWriteRegs(pDevice->hTWL, TWL_BCI_USBAVERAGE, 
; 512  :             &(pDevice->UsbBciAvgEnable), 1) == FALSE)

  0002c	e5950018	 ldr         r0, [r5, #0x18]
  00030	e3a03802	 mov         r3, #2, 16
  00034	e383100e	 orr         r1, r3, #0xE
  00038	e3a03001	 mov         r3, #1
  0003c	e2852028	 add         r2, r5, #0x28
  00040	eb000000	 bl          TWLWriteRegs
  00044	e3500000	 cmp         r0, #0
  00048	0a00000a	 beq         |$cleanUp$36119|

; 513  :         {
; 514  :         DEBUGMSG(ZONE_ERROR, (L"ADC: !ERROR - InitializeDevice "
; 515  :             L"Failed to initialize BCI-USB average registers\r\n"
; 516  :             ));
; 517  :         goto cleanUp;
; 518  :         }
; 519  : 
; 520  :     // format to appropriate value
; 521  :     pDevice->VBatRef <<= 6;

  0004c	e5953020	 ldr         r3, [r5, #0x20]

; 522  :     if (TWLWriteRegs(pDevice->hTWL, TWL_USBREF_LSB, 
; 523  :             &(pDevice->VBatRef), 2) == FALSE)

  00050	e5950018	 ldr         r0, [r5, #0x18]
  00054	e3a01802	 mov         r1, #2, 16
  00058	e1a03303	 mov         r3, r3, lsl #6
  0005c	e5a53020	 str         r3, [r5, #0x20]!
  00060	e3a03002	 mov         r3, #2
  00064	e3811010	 orr         r1, r1, #0x10
  00068	e1a02005	 mov         r2, r5
  0006c	eb000000	 bl          TWLWriteRegs
  00070	e3500000	 cmp         r0, #0

; 524  :         {
; 525  :         DEBUGMSG(ZONE_ERROR, (L"ADC: !ERROR - InitializeDevice "
; 526  :             L"Failed to initialize VBAT reference registers\r\n"
; 527  :             ));
; 528  :         goto cleanUp;
; 529  :         }
; 530  : 
; 531  :     rc = TRUE;

  00074	13a04001	 movne       r4, #1
  00078		 |$cleanUp$36119|

; 532  : 
; 533  : cleanUp:
; 534  : 
; 535  :     DEBUGMSG(ZONE_FUNCTION, (
; 536  :         L"ADC: -InitializeDevice(0x%08x)\r\n", pDevice
; 537  :         ));
; 538  : 
; 539  :     return rc;
; 540  : }

  00078	e1a00004	 mov         r0, r4
  0007c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$M36449|

			 ENDP  ; |?InitializeDevice@@YAHPAUDevice_t@@@Z|, InitializeDevice

	EXPORT	|?ADC_Deinit@@YAHK@Z|			; ADC_Deinit
	IMPORT	|LocalFree|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|CloseHandle|

  00000			 AREA	 |.pdata|, PDATA
|$T36462| DCD	|$LN9@ADC_Deinit|
	DCD	0x40001701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ADC_Deinit@@YAHK@Z| PROC		; ADC_Deinit

; 620  : {

  00000		 |$LN9@ADC_Deinit|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36459|
  00004	e1b04000	 movs        r4, r0

; 621  :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 622  :     Device_t *pDevice = (Device_t*)context;
; 623  : 
; 624  :     DEBUGMSG(ZONE_FUNCTION, (L"+ADC_Deinit(0x%08x)\r\n", context));
; 625  : 
; 626  :     // Check if we get correct context
; 627  :     if ((pDevice == NULL) || (pDevice->cookie != MADC_DEVICE_COOKIE))

  0000c	0a00000f	 beq         |$cleanUp$36162|
  00010	e5942000	 ldr         r2, [r4]
  00014	e59f303c	 ldr         r3, [pc, #0x3C]
  00018	e1520003	 cmp         r2, r3
  0001c	1a00000b	 bne         |$cleanUp$36162|

; 628  :         {
; 629  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: ADC_Deinit: "
; 630  :             L"Incorrect context parameter\r\n"
; 631  :             ));
; 632  :         goto cleanUp;
; 633  :         }
; 634  : 
; 635  :     //Close handle to TWL driver
; 636  :     if ( pDevice->hTWL != NULL )

  00020	e5943018	 ldr         r3, [r4, #0x18]
  00024	e3530000	 cmp         r3, #0
  00028	0a000003	 beq         |$LN1@ADC_Deinit|

; 637  :         {
; 638  :         CloseHandle(pDevice->hTWL);

  0002c	e1a00003	 mov         r0, r3
  00030	eb000000	 bl          CloseHandle

; 639  :         pDevice->hTWL = NULL;

  00034	e3a03000	 mov         r3, #0
  00038	e5843018	 str         r3, [r4, #0x18]
  0003c		 |$LN1@ADC_Deinit|

; 640  :         }
; 641  : 
; 642  :     // Delete critical sections
; 643  :     DeleteCriticalSection(&pDevice->cs);

  0003c	e2840004	 add         r0, r4, #4
  00040	eb000000	 bl          DeleteCriticalSection

; 644  : 
; 645  :     // Free device structure
; 646  :     LocalFree(pDevice);

  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          LocalFree

; 647  : 
; 648  :     // Done
; 649  :     rc = TRUE;

  0004c	e3a00001	 mov         r0, #1
  00050		 |$cleanUp$36162|

; 650  : 
; 651  : cleanUp:
; 652  :     DEBUGMSG(ZONE_FUNCTION, (L"-ADC_Deinit(rc = %d)\r\n", rc));
; 653  :     return rc;
; 654  : }

  00050	e8bd4010	 ldmia       sp!, {r4, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$LN10@ADC_Deinit|
  00058		 |$LN11@ADC_Deinit|
  00058	61646344	 DCD         0x61646344
  0005c		 |$M36460|

			 ENDP  ; |?ADC_Deinit@@YAHK@Z|, ADC_Deinit

	EXPORT	|?ADC_Open@@YAKKKK@Z|			; ADC_Open

  00000			 AREA	 |.pdata|, PDATA
|$T36474| DCD	|$LN5@ADC_Open|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ADC_Open@@YAKKKK@Z| PROC		; ADC_Open

; 668  : {

  00000		 |$LN5@ADC_Open|
  00000		 |$M36471|

; 669  :     UNREFERENCED_PARAMETER(context);
; 670  :     UNREFERENCED_PARAMETER(accessCode);
; 671  :     UNREFERENCED_PARAMETER(shareMode);
; 672  :     return context;
; 673  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M36472|

			 ENDP  ; |?ADC_Open@@YAKKKK@Z|, ADC_Open

	EXPORT	|?ADC_Close@@YAHK@Z|			; ADC_Close

  00000			 AREA	 |.pdata|, PDATA
|$T36483| DCD	|$LN5@ADC_Close|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ADC_Close@@YAHK@Z| PROC		; ADC_Close

; 685  : {

  00000		 |$LN5@ADC_Close|
  00000		 |$M36480|

; 686  :     UNREFERENCED_PARAMETER(context);
; 687  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 688  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M36481|

			 ENDP  ; |?ADC_Close@@YAHK@Z|, ADC_Close

	EXPORT	|?ADC_IOControl@@YAHKKPAEK0KPAK@Z|	; ADC_IOControl
	IMPORT	|SetLastError|
	IMPORT	|CeSafeCopyMemory|
	IMPORT	|GetCallerProcess|
; File c:\wince600\public\common\sdk\inc\objbase.h

  00000			 AREA	 |.pdata|, PDATA
|$T36517| DCD	|$LN37@ADC_IOCont|
	DCD	0x40007502
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\madc\madc.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ADC_IOControl@@YAHKKPAEK0KPAK@Z| PROC ; ADC_IOControl

; 703  : {

  00000		 |$LN37@ADC_IOCont|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M36514|
  00008	e1a06003	 mov         r6, r3
  0000c	e1a05002	 mov         r5, r2
  00010	e1b08000	 movs        r8, r0

; 704  :     BOOL rc = FALSE;

  00014	e3a07000	 mov         r7, #0

; 705  :     DEVICE_IFC_MADC ifc;
; 706  :     IOCTL_MADC_CONVERTTOVOLTS_IN *pConvertToVolts;
; 707  :     Device_t *pDevice = (Device_t*)context;
; 708  : 
; 709  :     DEBUGMSG(ZONE_FUNCTION, (
; 710  :         L"+ADC_IOControl(0x%08x, 0x%08x, 0x%08x, %d, 0x%08x, %d, 0x%08x)\r\n",
; 711  :         context, code, pInBuffer, inSize, pOutBuffer, outSize, pOutSize
; 712  :         ));
; 713  : 
; 714  :     // Check if we get correct context
; 715  :     if ((pDevice == NULL) || (pDevice->cookie != MADC_DEVICE_COOKIE))

  00018	0a000064	 beq         |$cleanUp$36192|
  0001c	e5984000	 ldr         r4, [r8]
  00020	e59fe1a8	 ldr         lr, [pc, #0x1A8]
  00024	e154000e	 cmp         r4, lr
  00028	1a000060	 bne         |$cleanUp$36192|
  0002c	e3a03822	 mov         r3, #0x22, 16

; 716  :         {
; 717  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: ADC_IOControl: "
; 718  :             L"Incorrect context parameter\r\n"
; 719  :             ));
; 720  :         goto cleanUp;
; 721  :         }
; 722  : 
; 723  :     switch (code)

  00030	e383eb01	 orr         lr, r3, #1, 22
  00034	e151000e	 cmp         r1, lr
  00038	0a000035	 beq         |$LN17@ADC_IOCont|
  0003c	e3a03822	 mov         r3, #0x22, 16
  00040	e383ea01	 orr         lr, r3, #1, 20
  00044	e151000e	 cmp         r1, lr
  00048	0a000018	 beq         |$LN8@ADC_IOCont|
  0004c	e59fe178	 ldr         lr, [pc, #0x178]
  00050	e151000e	 cmp         r1, lr
  00054	1a000055	 bne         |$cleanUp$36192|

; 788  :             break;
; 789  : 
; 790  :         case IOCTL_MADC_CONVERTTOVOLTS:
; 791  :             if (pInBuffer == NULL || pOutBuffer == NULL || 
; 792  :                 inSize != sizeof(IOCTL_MADC_CONVERTTOVOLTS_IN))

  00058	e3550000	 cmp         r5, #0
  0005c	0a000051	 beq         |$LN14@ADC_IOCont|
  00060	e59d0028	 ldr         r0, [sp, #0x28]
  00064	e3500000	 cmp         r0, #0
  00068	0a00004e	 beq         |$LN14@ADC_IOCont|
  0006c	e356000c	 cmp         r6, #0xC
  00070	1a00004c	 bne         |$LN14@ADC_IOCont|

; 793  :                 {
; 794  :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: ADC_IOControl: "
; 795  :                     L"Invalid parameters for IOCTL_MADC_CONVERTTOVOLTS\r\n"
; 796  :                     ));
; 797  :                 SetLastError(ERROR_INVALID_PARAMETER);
; 798  :                 break;
; 799  :                 }
; 800  : 
; 801  :             pConvertToVolts = (IOCTL_MADC_CONVERTTOVOLTS_IN*)pInBuffer;
; 802  : 
; 803  :             if (pConvertToVolts->count * sizeof(DWORD) != outSize)

  00074	e595e004	 ldr         lr, [r5, #4]
  00078	e59d302c	 ldr         r3, [sp, #0x2C]
  0007c	e153010e	 cmp         r3, lr, lsl #2

; 804  :                 {
; 805  :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: ADC_IOControl: "
; 806  :                     L"Invalid parameters for IOCTL_MADC_CONVERTTOVOLTS\r\n"
; 807  :                     ));
; 808  :                 SetLastError(ERROR_INVALID_PARAMETER);
; 809  :                 break;

  00080	1a000048	 bne         |$LN14@ADC_IOCont|

; 810  :                 }
; 811  : 
; 812  :             *pOutSize = ConvertToVolts(context, pConvertToVolts->mask,
; 813  :                             pConvertToVolts->pdwValues, (DWORD*)pOutBuffer, 
; 814  :                             pConvertToVolts->count);

  00084	e5952008	 ldr         r2, [r5, #8]
  00088	e5951000	 ldr         r1, [r5]
  0008c	e1a03000	 mov         r3, r0
  00090	e1a00008	 mov         r0, r8
  00094	e58de000	 str         lr, [sp]
  00098	eb000000	 bl          |?ConvertToVolts@@YAKKKPAK0K@Z|

; 815  :             *pOutSize *= sizeof(DWORD);

  0009c	e59d2030	 ldr         r2, [sp, #0x30]
  000a0	e1a03100	 mov         r3, r0, lsl #2

; 816  :             rc = TRUE;

  000a4	e3a07001	 mov         r7, #1
  000a8	e5823000	 str         r3, [r2]
  000ac	ea00003f	 b           |$cleanUp$36192|
  000b0		 |$LN8@ADC_IOCont|

; 755  :                     {
; 756  :                     SetLastError(ERROR_INVALID_PARAMETER);
; 757  :                     break;
; 758  :                     }
; 759  :                 rc = TRUE;
; 760  :                 break;
; 761  :                 }
; 762  :             SetLastError(ERROR_INVALID_PARAMETER);
; 763  :             break;
; 764  : 
; 765  :         case IOCTL_MADC_READVALUE:
; 766  :             if (pInBuffer == NULL || pOutBuffer == NULL || 
; 767  :                 inSize != sizeof(DWORD) || outSize < sizeof(DWORD))

  000b0	e3550000	 cmp         r5, #0
  000b4	0a00003b	 beq         |$LN14@ADC_IOCont|
  000b8	e59d2028	 ldr         r2, [sp, #0x28]
  000bc	e3520000	 cmp         r2, #0
  000c0	0a000038	 beq         |$LN14@ADC_IOCont|
  000c4	e3560004	 cmp         r6, #4
  000c8	1a000036	 bne         |$LN14@ADC_IOCont|
  000cc	e59d302c	 ldr         r3, [sp, #0x2C]
  000d0	e3530004	 cmp         r3, #4
  000d4	3a000033	 bcc         |$LN14@ADC_IOCont|

; 774  :                 }
; 775  : 
; 776  :             *pOutSize = ReadValue(context, *(DWORD*)pInBuffer, (DWORD*)pOutBuffer, 
; 777  :                             outSize/sizeof(DWORD));

  000d8	e5951000	 ldr         r1, [r5]
  000dc	e1a03123	 mov         r3, r3, lsr #2
  000e0	e1a00008	 mov         r0, r8
  000e4	eb000000	 bl          |?ReadValue@@YAKKKPAKK@Z|
  000e8	e59d2030	 ldr         r2, [sp, #0x30]
  000ec	e3500000	 cmp         r0, #0
  000f0	e5820000	 str         r0, [r2]

; 778  : 
; 779  :             if (*pOutSize == 0 && *(DWORD*)pInBuffer)

  000f4	1a000002	 bne         |$LN5@ADC_IOCont|
  000f8	e5953000	 ldr         r3, [r5]
  000fc	e3530000	 cmp         r3, #0
  00100	1a00002a	 bne         |$cleanUp$36192|
  00104		 |$LN5@ADC_IOCont|

; 780  :                 {
; 781  :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: ADC_IOControl: "
; 782  :                     L"Failed to retrieve voltage readings\r\n"
; 783  :                     ));
; 784  :                 break;
; 785  :                 }
; 786  :             *pOutSize *= sizeof(DWORD);

  00104	e1a03100	 mov         r3, r0, lsl #2
  00108	e5823000	 str         r3, [r2]
  0010c		 |$LN34@ADC_IOCont|

; 787  :             rc = TRUE;

  0010c	e3a07001	 mov         r7, #1

; 768  :                 {
; 769  :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: ADC_IOControl: "
; 770  :                     L"Invalid parameters for IOCTL_MADC_READVOLTS\r\n"
; 771  :                     ));
; 772  :                 SetLastError(ERROR_INVALID_PARAMETER);
; 773  :                 break;

  00110	ea000026	 b           |$cleanUp$36192|
  00114		 |$LN17@ADC_IOCont|

; 724  :         {
; 725  :         case IOCTL_DDK_GET_DRIVER_IFC:
; 726  :             // We can give interface only to our peer in device process
; 727  :             if (GetCurrentProcessId() != (DWORD)GetCallerProcess())

  00114	e3a0000c	 mov         r0, #0xC
  00118	eb000000	 bl          __GetUserKData
  0011c	e1a04000	 mov         r4, r0
  00120	eb000000	 bl          GetCallerProcess
  00124	e1540000	 cmp         r4, r0

; 728  :                 {
; 729  :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: ADC_IOControl: "
; 730  :                     L"IOCTL_DDK_GET_DRIVER_IFC can be called only from "
; 731  :                     L"device process (caller process id 0x%08x)\r\n",
; 732  :                     GetCallerProcess()
; 733  :                     ));
; 734  :                 SetLastError(ERROR_ACCESS_DENIED);

  00128	13a00005	 movne       r0, #5
  0012c	1a00001e	 bne         |$LN33@ADC_IOCont|

; 735  :                 break;
; 736  :                 }
; 737  :             // Check input parameters
; 738  :             if ((pInBuffer == NULL) || (inSize < sizeof(GUID)))

  00130	e3550000	 cmp         r5, #0
  00134	0a00001b	 beq         |$LN14@ADC_IOCont|
  00138	e3560010	 cmp         r6, #0x10
  0013c	3a000019	 bcc         |$LN14@ADC_IOCont|

; 741  :                 break;
; 742  :                 }
; 743  :             if (IsEqualGUID(*(GUID*)pInBuffer, DEVICE_IFC_MADC_GUID))

  00140	e59f1080	 ldr         r1, [pc, #0x80]
  00144	e3a02010	 mov         r2, #0x10
  00148	e1a00005	 mov         r0, r5
  0014c	eb000000	 bl          memcmp
  00150	e3500000	 cmp         r0, #0
  00154	1a000013	 bne         |$LN14@ADC_IOCont|

; 744  :                 {
; 745  :                 if (pOutSize != NULL) *pOutSize = sizeof(DEVICE_IFC_MADC);

  00158	e59d3030	 ldr         r3, [sp, #0x30]

; 746  :                 if (pOutBuffer == NULL || outSize < sizeof(DEVICE_IFC_MADC))

  0015c	e59d0028	 ldr         r0, [sp, #0x28]
  00160	e3530000	 cmp         r3, #0
  00164	13a0200c	 movne       r2, #0xC
  00168	15832000	 strne       r2, [r3]
  0016c	e3500000	 cmp         r0, #0
  00170	0a00000c	 beq         |$LN14@ADC_IOCont|
  00174	e59d302c	 ldr         r3, [sp, #0x2C]
  00178	e353000c	 cmp         r3, #0xC
  0017c	3a000009	 bcc         |$LN14@ADC_IOCont|

; 747  :                     {
; 748  :                     SetLastError(ERROR_INVALID_PARAMETER);
; 749  :                     break;
; 750  :                     }
; 751  :                 ifc.context = context;
; 752  :                 ifc.pfnReadValue = ReadValue;
; 753  :                 ifc.pfnConvertToVolts = ConvertToVolts;

  00180	e59f103c	 ldr         r1, [pc, #0x3C]
  00184	e59f3034	 ldr         r3, [pc, #0x34]

; 754  :                 if (!CeSafeCopyMemory(pOutBuffer, &ifc, sizeof(DEVICE_IFC_MADC)))

  00188	e3a0200c	 mov         r2, #0xC
  0018c	e58d100c	 str         r1, [sp, #0xC]
  00190	e28d1004	 add         r1, sp, #4
  00194	e58d3008	 str         r3, [sp, #8]
  00198	e58d8004	 str         r8, [sp, #4]
  0019c	eb000000	 bl          CeSafeCopyMemory
  001a0	e3500000	 cmp         r0, #0
  001a4	1affffd8	 bne         |$LN34@ADC_IOCont|
  001a8		 |$LN14@ADC_IOCont|

; 739  :                 {
; 740  :                 SetLastError(ERROR_INVALID_PARAMETER);

  001a8	e3a00057	 mov         r0, #0x57
  001ac		 |$LN33@ADC_IOCont|
  001ac	eb000000	 bl          SetLastError
  001b0		 |$cleanUp$36192|

; 817  :             break;
; 818  :         }
; 819  : 
; 820  : cleanUp:
; 821  : 
; 822  :     DEBUGMSG(ZONE_FUNCTION, (L"-ADC_IOControl(rc = %d)\r\n", rc));
; 823  :     return rc;
; 824  : }

  001b0	e1a00007	 mov         r0, r7
  001b4	e28dd010	 add         sp, sp, #0x10
  001b8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  001bc	e12fff1e	 bx          lr
  001c0		 |$LN38@ADC_IOCont|
  001c0		 |$LN39@ADC_IOCont|
  001c0	00000000	 DCD         |?ReadValue@@YAKKKPAKK@Z|
  001c4		 |$LN40@ADC_IOCont|
  001c4	00000000	 DCD         |?ConvertToVolts@@YAKKKPAK0K@Z|
  001c8		 |$LN41@ADC_IOCont|
  001c8	00000000	 DCD         |DEVICE_IFC_MADC_GUID|
  001cc		 |$LN42@ADC_IOCont|
  001cc	00221004	 DCD         0x221004
  001d0		 |$LN43@ADC_IOCont|
  001d0	61646344	 DCD         0x61646344
  001d4		 |$M36515|

			 ENDP  ; |?ADC_IOControl@@YAHKKPAEK0KPAK@Z|, ADC_IOControl

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|

  00000			 AREA	 |.pdata|, PDATA
|$T36534| DCD	|$LN8@DllMain|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllMain| PROC

; 835  : {

  00000		 |$LN8@DllMain|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36531|
  00004	e1a04000	 mov         r4, r0

; 836  :     UNREFERENCED_PARAMETER(Reserved);
; 837  :     switch(Reason) 

  00008	e3510001	 cmp         r1, #1
  0000c	1a000003	 bne         |$LN2@DllMain|

; 838  :         {
; 839  :         case DLL_PROCESS_ATTACH:
; 840  :             RETAILREGISTERZONES((HMODULE)hDLL);

  00010	e59f1014	 ldr         r1, [pc, #0x14]
  00014	eb000000	 bl          RegisterDbgZones

; 841  :             DisableThreadLibraryCalls((HMODULE)hDLL);

  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          DisableThreadLibraryCalls
  00020		 |$LN2@DllMain|

; 842  :             break;
; 843  :         }
; 844  :     return TRUE;

  00020	e3a00001	 mov         r0, #1

; 845  : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$LN9@DllMain|
  0002c		 |$LN10@DllMain|
  0002c	00000000	 DCD         |dpCurSettings|
  00030		 |$M36532|

			 ENDP  ; |DllMain|

	EXPORT	|?ADC_Init@@YAKPBGPBX@Z|		; ADC_Init
	IMPORT	|TWLOpen|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|LocalAlloc|

  00000			 AREA	 |.pdata|, PDATA
|$T36548| DCD	|$LN13@ADC_Init|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ADC_Init@@YAKPBGPBX@Z| PROC		; ADC_Init

; 553  : {

  00000		 |$LN13@ADC_Init|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36545|

; 554  :     DWORD rc = (DWORD)NULL;
; 555  :     Device_t *pDevice;
; 556  : 
; 557  :     UNREFERENCED_PARAMETER(pBusContext);
; 558  :     UNREFERENCED_PARAMETER(szContext);  
; 559  : 
; 560  :     DEBUGMSG(ZONE_FUNCTION, (
; 561  :         L"+ADC_Init(%s, 0x%08x)\r\n", szContext, pBusContext
; 562  :         ));
; 563  : 
; 564  :     // Create device structure
; 565  :     pDevice = (Device_t *)LocalAlloc(LPTR, sizeof(Device_t));

  00004	e3a0102c	 mov         r1, #0x2C
  00008	e3a00040	 mov         r0, #0x40
  0000c	e3a05000	 mov         r5, #0
  00010	eb000000	 bl          LocalAlloc
  00014	e1b04000	 movs        r4, r0

; 566  :     if (pDevice == NULL)

  00018	0a00000c	 beq         |$LN10@ADC_Init|

; 567  :         {
; 568  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: ADC_Init: "
; 569  :             L"Failed allocate MADC driver structure\r\n"
; 570  :             ));
; 571  : 
; 572  :         goto cleanUp;
; 573  :         }
; 574  : 
; 575  :     // Set cookie
; 576  :     pDevice->cookie = MADC_DEVICE_COOKIE;

  0001c	e59f3040	 ldr         r3, [pc, #0x40]

; 577  : 
; 578  :     // Initialize critical sections
; 579  :     InitializeCriticalSection(&pDevice->cs);

  00020	e1a00004	 mov         r0, r4
  00024	e4803004	 str         r3, [r0], #4
  00028	eb000000	 bl          InitializeCriticalSection

; 580  : 
; 581  :     // Open Triton device driver
; 582  :     pDevice->hTWL = TWLOpen();

  0002c	eb000000	 bl          TWLOpen
  00030	e3500000	 cmp         r0, #0
  00034	e5840018	 str         r0, [r4, #0x18]

; 583  :     if ( pDevice->hTWL == NULL )

  00038	0a000004	 beq         |$LN10@ADC_Init|

; 584  :         {
; 585  :         DEBUGMSG( ZONE_ERROR, (L"ERROR: ADC_Init: "
; 586  :             L"Failed open Triton device driver\r\n"
; 587  :             ));
; 588  :         goto cleanUp;
; 589  :         }
; 590  : 
; 591  :     // initialize device with registry settings
; 592  :     if (InitializeDevice(pDevice) == FALSE)

  0003c	e1a00004	 mov         r0, r4
  00040	eb000000	 bl          |?InitializeDevice@@YAHPAUDevice_t@@@Z|
  00044	e3500000	 cmp         r0, #0

; 593  :         {
; 594  :         DEBUGMSG( ZONE_ERROR, (L"ERROR: ADC_Init: "
; 595  :             L"Failed to initilialize MADC device\r\n"
; 596  :             ));
; 597  :         goto cleanUp;
; 598  :         }
; 599  : 
; 600  :     // Return non-null value
; 601  :     rc = (DWORD)pDevice;

  00048	11a05004	 movne       r5, r4
  0004c		 |$cleanUp$36140|
  0004c	1a000001	 bne         |$LN1@ADC_Init|
  00050		 |$LN10@ADC_Init|

; 602  : 
; 603  : cleanUp:
; 604  :     if (rc == 0) ADC_Deinit((DWORD)pDevice);

  00050	e1a00004	 mov         r0, r4
  00054	eb000000	 bl          |?ADC_Deinit@@YAHK@Z|
  00058		 |$LN1@ADC_Init|

; 605  : 
; 606  :     DEBUGMSG(ZONE_FUNCTION, (L"-ADC_Init(rc = %d\r\n", rc));
; 607  :     return rc;
; 608  : }

  00058	e1a00005	 mov         r0, r5
  0005c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN14@ADC_Init|
  00064		 |$LN15@ADC_Init|
  00064	61646344	 DCD         0x61646344
  00068		 |$M36546|

			 ENDP  ; |?ADC_Init@@YAKPBGPBX@Z|, ADC_Init

	END
