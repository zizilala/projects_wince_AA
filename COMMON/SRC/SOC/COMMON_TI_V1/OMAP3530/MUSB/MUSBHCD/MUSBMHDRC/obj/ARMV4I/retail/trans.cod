; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\MUSB\MUSBHCD\MUSBMHDRC\trans.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1DK@JPBDFEOB@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@IMCKALLA@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAO?$AAN?$AAE?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@CEGNOBAM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@PGHDEMEK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAI?$AAG?$AAN?$AAA?$AAL?$AA_?$AAN?$AAE?$AAW?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1II@FBBOBKGN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAS?$AAE?$AAR?$AAT?$AA_?$AAN?$AAE?$AAW?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@LCLFDJDO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@COKEBMOE@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@HPGGGHKI@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@KPBCOGEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@CFFAAPDL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@NDHJOKMM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAE?$AAT?$AAE?$AAR?$AAM?$AAI?$AAN?$AAE?$AA_?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@JADKDKDC@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@NPLCKJLH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@MEMGEMJJ@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@BCHKIAPP@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@FNPCBDHK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@BBOOKHNN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAL?$AAE?$AAA?$AAV?$AAE?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@LGLHPFAK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@BLNLBKIO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@NMCKCJLL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAR?$AAE?$AAS?$AAE?$AAT?$AA_?$AAA?$AAN?$AAD?$AA_?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@KNOIBOPH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAU?$AAS?$AAI?$AAN?$AAG?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@COMJHLEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAP?$AAE?$AAN?$AAI?$AAN?$AAG?$AA_?$AAE?$AAN?$AAD@| [ DATA ] ; `string'
	EXPORT	|?m_dwGlobalTransferID@CTransfer@@1KA| [ DATA ] ; CTransfer::m_dwGlobalTransferID

  00000			 AREA	 |.bss|, NOINIT
|?m_dwGlobalTransferID@CTransfer@@1KA| % 0x4		; CTransfer::m_dwGlobalTransferID

  00000			 AREA	 |.data|, DATA
|cszCfgStateStrings| DCD |??_C@_1FI@COMJHLEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAP?$AAE?$AAN?$AAI?$AAN?$AAG?$AA_?$AAE?$AAN?$AAD@|
	DCD	|??_C@_1EI@KNOIBOPH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAU?$AAS?$AAI?$AAN?$AAG?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@|
	DCD	|??_C@_1FG@NMCKCJLL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAR?$AAE?$AAS?$AAE?$AAT?$AA_?$AAA?$AAN?$AAD?$AA_?$AAE@|
	DCD	|??_C@_1HG@BLNLBKIO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1FI@LGLHPFAK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1EI@BBOOKHNN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAL?$AAE?$AAA?$AAV?$AAE?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@|
	DCD	|??_C@_1HM@FNPCBDHK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1GM@BCHKIAPP@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1HE@MEMGEMJJ@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI@|
	DCD	|??_C@_1HM@NPLCKJLH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1GM@JADKDKDC@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1GA@NDHJOKMM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAE?$AAT?$AAE?$AAR?$AAM?$AAI?$AAN?$AAE?$AA_?$AAC@|
	DCD	|??_C@_1FG@CFFAAPDL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1HG@KPBCOGEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1GG@HPGGGHKI@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1EI@COKEBMOE@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@|
	DCD	|??_C@_1FC@LCLFDJDO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@|
	DCD	|??_C@_1II@FBBOBKGN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAS?$AAE?$AAR?$AAT?$AA_?$AAN?$AAE?$AAW?$AA_@|
	DCD	|??_C@_1HO@PGHDEMEK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAI?$AAG?$AAN?$AAA?$AAL?$AA_?$AAN?$AAE?$AAW?$AA_@|
	DCD	|??_C@_1DI@CEGNOBAM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@|
	DCD	|??_C@_1DE@IMCKALLA@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAO?$AAN?$AAE?$AA?$AA@|
	DCD	|??_C@_1DK@JPBDFEOB@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA?$AA@|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@JPBDFEOB@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA?$AA@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "V", 0x0, "A"
	DCB	0x0, "L", 0x0, "I", 0x0, "D", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@IMCKALLA@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAO?$AAN?$AAE?$AA?$AA@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "D", 0x0, "O", 0x0, "N", 0x0, "E"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@CEGNOBAM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "F", 0x0, "A", 0x0, "I", 0x0, "L"
	DCB	0x0, "E", 0x0, "D", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@PGHDEMEK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAI?$AAG?$AAN?$AAA?$AAL?$AA_?$AAN?$AAE?$AAW?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "I", 0x0, "G", 0x0, "N"
	DCB	0x0, "A", 0x0, "L", 0x0, "_", 0x0, "N", 0x0, "E", 0x0, "W"
	DCB	0x0, "_", 0x0, "D", 0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C"
	DCB	0x0, "E", 0x0, "_", 0x0, "E", 0x0, "N", 0x0, "T", 0x0, "E"
	DCB	0x0, "R", 0x0, "_", 0x0, "O", 0x0, "P", 0x0, "E", 0x0, "R"
	DCB	0x0, "A", 0x0, "T", 0x0, "I", 0x0, "O", 0x0, "N", 0x0, "A"
	DCB	0x0, "L", 0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T"
	DCB	0x0, "E", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@FBBOBKGN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAS?$AAE?$AAR?$AAT?$AA_?$AAN?$AAE?$AAW?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "S", 0x0, "E"
	DCB	0x0, "R", 0x0, "T", 0x0, "_", 0x0, "N", 0x0, "E", 0x0, "W"
	DCB	0x0, "_", 0x0, "D", 0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C"
	DCB	0x0, "E", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "T", 0x0, "O"
	DCB	0x0, "_", 0x0, "U", 0x0, "P", 0x0, "S", 0x0, "T", 0x0, "R"
	DCB	0x0, "E", 0x0, "A", 0x0, "M", 0x0, "_", 0x0, "H", 0x0, "U"
	DCB	0x0, "B", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "R", 0x0, "T"
	DCB	0x0, "_", 0x0, "A", 0x0, "R", 0x0, "R", 0x0, "A", 0x0, "Y"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@LCLFDJDO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "C", 0x0, "R", 0x0, "E", 0x0, "A"
	DCB	0x0, "T", 0x0, "E", 0x0, "_", 0x0, "N", 0x0, "E", 0x0, "W"
	DCB	0x0, "_", 0x0, "F", 0x0, "U", 0x0, "N", 0x0, "C", 0x0, "T"
	DCB	0x0, "I", 0x0, "O", 0x0, "N", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@COKEBMOE@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "C", 0x0, "R", 0x0, "E", 0x0, "A"
	DCB	0x0, "T", 0x0, "E", 0x0, "_", 0x0, "N", 0x0, "E", 0x0, "W"
	DCB	0x0, "_", 0x0, "H", 0x0, "U", 0x0, "B", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@HPGGGHKI@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "H"
	DCB	0x0, "U", 0x0, "B", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "S"
	DCB	0x0, "C", 0x0, "R", 0x0, "I", 0x0, "P", 0x0, "T", 0x0, "O"
	DCB	0x0, "R", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@KPBCOGEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "I"
	DCB	0x0, "N", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "H", 0x0, "U", 0x0, "B", 0x0, "_", 0x0, "D"
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I", 0x0, "P"
	DCB	0x0, "T", 0x0, "O", 0x0, "R", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@CFFAAPDL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "C"
	DCB	0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@NDHJOKMM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAE?$AAT?$AAE?$AAR?$AAM?$AAI?$AAN?$AAE?$AA_?$AAC@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "T", 0x0, "E"
	DCB	0x0, "R", 0x0, "M", 0x0, "I", 0x0, "N", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "T", 0x0, "O", 0x0, "_", 0x0, "C", 0x0, "H"
	DCB	0x0, "O", 0x0, "O", 0x0, "S", 0x0, "E", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@JADKDKDC@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "C"
	DCB	0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G", 0x0, "_"
	DCB	0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I"
	DCB	0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@NPLCKJLH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "I"
	DCB	0x0, "N", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I"
	DCB	0x0, "G", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C"
	DCB	0x0, "R", 0x0, "I", 0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@MEMGEMJJ@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "U"
	DCB	0x0, "P", 0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F"
	DCB	0x0, "I", 0x0, "G", 0x0, "U", 0x0, "R", 0x0, "A", 0x0, "T"
	DCB	0x0, "I", 0x0, "O", 0x0, "N", 0x0, "_", 0x0, "D", 0x0, "E"
	DCB	0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I", 0x0, "P", 0x0, "T"
	DCB	0x0, "O", 0x0, "R", 0x0, "_", 0x0, "A", 0x0, "R", 0x0, "R"
	DCB	0x0, "A", 0x0, "Y", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@BCHKIAPP@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I"
	DCB	0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@FNPCBDHK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "I"
	DCB	0x0, "N", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "D", 0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C"
	DCB	0x0, "E", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C"
	DCB	0x0, "R", 0x0, "I", 0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@BBOOKHNN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAL?$AAE?$AAA?$AAV?$AAE?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "L", 0x0, "E", 0x0, "A", 0x0, "V"
	DCB	0x0, "E", 0x0, "_", 0x0, "A", 0x0, "D", 0x0, "D", 0x0, "R"
	DCB	0x0, "E", 0x0, "S", 0x0, "S", 0x0, "0", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@LGLHPFAK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "A"
	DCB	0x0, "D", 0x0, "D", 0x0, "R", 0x0, "E", 0x0, "S", 0x0, "S"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@BLNLBKIO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I"
	DCB	0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R", 0x0, "_", 0x0, "T"
	DCB	0x0, "E", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@NMCKCJLL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAR?$AAE?$AAS?$AAE?$AAT?$AA_?$AAA?$AAN?$AAD?$AA_?$AAE@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "R", 0x0, "E", 0x0, "S", 0x0, "E"
	DCB	0x0, "T", 0x0, "_", 0x0, "A", 0x0, "N", 0x0, "D", 0x0, "_"
	DCB	0x0, "E", 0x0, "N", 0x0, "A", 0x0, "B", 0x0, "L", 0x0, "E"
	DCB	0x0, "_", 0x0, "P", 0x0, "O", 0x0, "R", 0x0, "T", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@KNOIBOPH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAU?$AAS?$AAI?$AAN?$AAG?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "U", 0x0, "S", 0x0, "I", 0x0, "N"
	DCB	0x0, "G", 0x0, "_", 0x0, "A", 0x0, "D", 0x0, "D", 0x0, "R"
	DCB	0x0, "E", 0x0, "S", 0x0, "S", 0x0, "0", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@COMJHLEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAP?$AAE?$AAN?$AAI?$AAN?$AAG?$AA_?$AAE?$AAN?$AAD@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "O", 0x0, "P", 0x0, "E", 0x0, "N"
	DCB	0x0, "I", 0x0, "N", 0x0, "G", 0x0, "_", 0x0, "E", 0x0, "N"
	DCB	0x0, "D", 0x0, "P", 0x0, "O", 0x0, "I", 0x0, "N", 0x0, "T"
	DCB	0x0, "0", 0x0, "_", 0x0, "P", 0x0, "I", 0x0, "P", 0x0, "E"
	DCB	0x0, 0x0, 0x0				; `string'
	EXPORT	|?VaToPa@CPhysMem@@QAAKPAE@Z|		; CPhysMem::VaToPa
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\usb2com\cphysmem.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36953| DCD	|$LN5@VaToPa|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?VaToPa@CPhysMem@@QAAKPAE@Z| PROC	; CPhysMem::VaToPa

; 192  : {

  00000		 |$LN5@VaToPa|
  00000		 |$M36950|

; 193  :     DEBUGCHK( virtAddr != NULL );
; 194  :     ASSERT((DWORD)m_pPhysicalBufferAddr <=(DWORD)virtAddr && (DWORD)virtAddr <(DWORD) m_pPhysicalBufferAddr + m_cbTotal);
; 195  :     return ULONG(ULONG(virtAddr) + m_PaVaConversion);

  00000	e5903034	 ldr         r3, [r0, #0x34]
  00004	e0830001	 add         r0, r3, r1

; 196  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M36951|

			 ENDP  ; |?VaToPa@CPhysMem@@QAAKPAE@Z|, CPhysMem::VaToPa

	EXPORT	|??1CQTD@@QAA@XZ|			; CQTD::~CQTD
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\ctd.h

  00000			 AREA	 |.pdata|, PDATA
|$T36960| DCD	|$LN5@CQTD|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CQTD@@QAA@XZ| PROC			; CQTD::~CQTD

; 73   :     ~CQTD() {};

  00000		 |$LN5@CQTD|
  00000		 |$M36957|
  00000	e12fff1e	 bx          lr
  00004		 |$M36958|

			 ENDP  ; |??1CQTD@@QAA@XZ|, CQTD::~CQTD

	EXPORT	|?GetNextTD@CQTD@@QAAPAV1@XZ|		; CQTD::GetNextTD

  00000			 AREA	 |.pdata|, PDATA
|$T36970| DCD	|$LN5@GetNextTD|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetNextTD@CQTD@@QAAPAV1@XZ| PROC	; CQTD::GetNextTD

; 77   :     CQTD *GetNextTD() {return m_pNext; };

  00000		 |$LN5@GetNextTD|
  00000		 |$M36967|
  00000	e5900008	 ldr         r0, [r0, #8]
  00004	e12fff1e	 bx          lr
  00008		 |$M36968|

			 ENDP  ; |?GetNextTD@CQTD@@QAAPAV1@XZ|, CQTD::GetNextTD

	EXPORT	|?SetBuffer@CQTD@@QAAXKKK@Z|		; CQTD::SetBuffer

  00000			 AREA	 |.pdata|, PDATA
|$T36981| DCD	|$LN5@SetBuffer|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetBuffer@CQTD@@QAAXKKK@Z| PROC	; CQTD::SetBuffer

; 82   :     void SetBuffer(DWORD dwPAData, DWORD dwVAData, DWORD cbData) { m_dwPAData=dwPAData; m_dwVAData=dwVAData; m_cbData=cbData;};

  00000		 |$LN5@SetBuffer|
  00000		 |$M36978|
  00000	e280c010	 add         r12, r0, #0x10
  00004	e88c000e	 stmia       r12, {r1 - r3}
  00008	e12fff1e	 bx          lr
  0000c		 |$M36979|

			 ENDP  ; |?SetBuffer@CQTD@@QAAXKKK@Z|, CQTD::SetBuffer

	EXPORT	|?SetTDType@CQTD@@QAAXK@Z|		; CQTD::SetTDType

  00000			 AREA	 |.pdata|, PDATA
|$T36990| DCD	|$LN5@SetTDType|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetTDType@CQTD@@QAAXK@Z| PROC	; CQTD::SetTDType

; 83   :     void SetTDType(DWORD type) { m_dwTDType = type;};

  00000		 |$LN5@SetTDType|
  00000		 |$M36987|
  00000	e580100c	 str         r1, [r0, #0xC]
  00004	e12fff1e	 bx          lr
  00008		 |$M36988|

			 ENDP  ; |?SetTDType@CQTD@@QAAXK@Z|, CQTD::SetTDType

	EXPORT	|?SetToggle@CQTD@@QAAXH@Z|		; CQTD::SetToggle

  00000			 AREA	 |.pdata|, PDATA
|$T36999| DCD	|$LN5@SetToggle|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetToggle@CQTD@@QAAXH@Z| PROC	; CQTD::SetToggle

; 84   :     void SetToggle(BOOL bToggle) { m_bDataToggle = bToggle;};

  00000		 |$LN5@SetToggle|
  00000		 |$M36996|
  00000	e5801024	 str         r1, [r0, #0x24]
  00004	e12fff1e	 bx          lr
  00008		 |$M36997|

			 ENDP  ; |?SetToggle@CQTD@@QAAXH@Z|, CQTD::SetToggle

	EXPORT	|?SetStatus@CQTD@@QAAXK@Z|		; CQTD::SetStatus

  00000			 AREA	 |.pdata|, PDATA
|$T37008| DCD	|$LN5@SetStatus|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetStatus@CQTD@@QAAXK@Z| PROC	; CQTD::SetStatus

; 85   :     void SetStatus(DWORD status) { m_dwStatus = status;};

  00000		 |$LN5@SetStatus|
  00000		 |$M37005|
  00000	e5801028	 str         r1, [r0, #0x28]
  00004	e12fff1e	 bx          lr
  00008		 |$M37006|

			 ENDP  ; |?SetStatus@CQTD@@QAAXK@Z|, CQTD::SetStatus

	EXPORT	|?SetTotTfrSize@CQTD@@QAAXK@Z|		; CQTD::SetTotTfrSize

  00000			 AREA	 |.pdata|, PDATA
|$T37017| DCD	|$LN5@SetTotTfrS|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetTotTfrSize@CQTD@@QAAXK@Z| PROC	; CQTD::SetTotTfrSize

; 86   :     void SetTotTfrSize(DWORD size) { m_cbTransferred = size;};

  00000		 |$LN5@SetTotTfrS|
  00000		 |$M37014|
  00000	e580101c	 str         r1, [r0, #0x1C]
  00004	e12fff1e	 bx          lr
  00008		 |$M37015|

			 ENDP  ; |?SetTotTfrSize@CQTD@@QAAXK@Z|, CQTD::SetTotTfrSize

	EXPORT	|?SetCurTfrSize@CQTD@@QAAXK@Z|		; CQTD::SetCurTfrSize

  00000			 AREA	 |.pdata|, PDATA
|$T37026| DCD	|$LN5@SetCurTfrS|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetCurTfrSize@CQTD@@QAAXK@Z| PROC	; CQTD::SetCurTfrSize

; 87   :     void SetCurTfrSize(DWORD size) { m_cbCurTransferred = size;};

  00000		 |$LN5@SetCurTfrS|
  00000		 |$M37023|
  00000	e5801020	 str         r1, [r0, #0x20]
  00004	e12fff1e	 bx          lr
  00008		 |$M37024|

			 ENDP  ; |?SetCurTfrSize@CQTD@@QAAXK@Z|, CQTD::SetCurTfrSize

	EXPORT	|?SetPacketSize@CQTD@@QAAXK@Z|		; CQTD::SetPacketSize

  00000			 AREA	 |.pdata|, PDATA
|$T37035| DCD	|$LN5@SetPacketS|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetPacketSize@CQTD@@QAAXK@Z| PROC	; CQTD::SetPacketSize

; 88   :     void SetPacketSize(DWORD dwPacketSize) {m_dwPacketSize = dwPacketSize;};

  00000		 |$LN5@SetPacketS|
  00000		 |$M37032|
  00000	e580102c	 str         r1, [r0, #0x2C]
  00004	e12fff1e	 bx          lr
  00008		 |$M37033|

			 ENDP  ; |?SetPacketSize@CQTD@@QAAXK@Z|, CQTD::SetPacketSize

	EXPORT	|?GetStatus@CQTD@@QAAKXZ|		; CQTD::GetStatus

  00000			 AREA	 |.pdata|, PDATA
|$T37045| DCD	|$LN5@GetStatus|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetStatus@CQTD@@QAAKXZ| PROC		; CQTD::GetStatus

; 90   :     DWORD GetStatus() { return m_dwStatus; };

  00000		 |$LN5@GetStatus|
  00000		 |$M37042|
  00000	e5900028	 ldr         r0, [r0, #0x28]
  00004	e12fff1e	 bx          lr
  00008		 |$M37043|

			 ENDP  ; |?GetStatus@CQTD@@QAAKXZ|, CQTD::GetStatus

	EXPORT	|?GetError@CQTD@@QAAKXZ|		; CQTD::GetError

  00000			 AREA	 |.pdata|, PDATA
|$T37055| DCD	|$LN5@GetError|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetError@CQTD@@QAAKXZ| PROC		; CQTD::GetError

; 91   :     DWORD GetError() { return m_dwError; };

  00000		 |$LN5@GetError|
  00000		 |$M37052|
  00000	e5900034	 ldr         r0, [r0, #0x34]
  00004	e12fff1e	 bx          lr
  00008		 |$M37053|

			 ENDP  ; |?GetError@CQTD@@QAAKXZ|, CQTD::GetError

	EXPORT	|?GetTDType@CQTD@@QAAKXZ|		; CQTD::GetTDType

  00000			 AREA	 |.pdata|, PDATA
|$T37065| DCD	|$LN5@GetTDType|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetTDType@CQTD@@QAAKXZ| PROC		; CQTD::GetTDType

; 92   :     DWORD GetTDType() { return m_dwTDType; };

  00000		 |$LN5@GetTDType|
  00000		 |$M37062|
  00000	e590000c	 ldr         r0, [r0, #0xC]
  00004	e12fff1e	 bx          lr
  00008		 |$M37063|

			 ENDP  ; |?GetTDType@CQTD@@QAAKXZ|, CQTD::GetTDType

	EXPORT	|?GetDataSize@CQTD@@QAAKXZ|		; CQTD::GetDataSize

  00000			 AREA	 |.pdata|, PDATA
|$T37075| DCD	|$LN5@GetDataSiz|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDataSize@CQTD@@QAAKXZ| PROC	; CQTD::GetDataSize

; 93   :     DWORD GetDataSize() { return m_cbData; };

  00000		 |$LN5@GetDataSiz|
  00000		 |$M37072|
  00000	e5900018	 ldr         r0, [r0, #0x18]
  00004	e12fff1e	 bx          lr
  00008		 |$M37073|

			 ENDP  ; |?GetDataSize@CQTD@@QAAKXZ|, CQTD::GetDataSize

	EXPORT	|?GetTotTfrSize@CQTD@@QAAKXZ|		; CQTD::GetTotTfrSize

  00000			 AREA	 |.pdata|, PDATA
|$T37085| DCD	|$LN5@GetTotTfrS|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetTotTfrSize@CQTD@@QAAKXZ| PROC	; CQTD::GetTotTfrSize

; 96   :     DWORD GetTotTfrSize() { return m_cbTransferred; };

  00000		 |$LN5@GetTotTfrS|
  00000		 |$M37082|
  00000	e590001c	 ldr         r0, [r0, #0x1C]
  00004	e12fff1e	 bx          lr
  00008		 |$M37083|

			 ENDP  ; |?GetTotTfrSize@CQTD@@QAAKXZ|, CQTD::GetTotTfrSize

	EXPORT	|?GetCurTfrSize@CQTD@@QAAKXZ|		; CQTD::GetCurTfrSize

  00000			 AREA	 |.pdata|, PDATA
|$T37095| DCD	|$LN5@GetCurTfrS|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetCurTfrSize@CQTD@@QAAKXZ| PROC	; CQTD::GetCurTfrSize

; 97   :     DWORD GetCurTfrSize() { return m_cbCurTransferred;};

  00000		 |$LN5@GetCurTfrS|
  00000		 |$M37092|
  00000	e5900020	 ldr         r0, [r0, #0x20]
  00004	e12fff1e	 bx          lr
  00008		 |$M37093|

			 ENDP  ; |?GetCurTfrSize@CQTD@@QAAKXZ|, CQTD::GetCurTfrSize

	EXPORT	|?GetPacketSize@CQTD@@QAAKXZ|		; CQTD::GetPacketSize

  00000			 AREA	 |.pdata|, PDATA
|$T37105| DCD	|$LN5@GetPacketS|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPacketSize@CQTD@@QAAKXZ| PROC	; CQTD::GetPacketSize

; 98   :     DWORD GetPacketSize() { return m_dwPacketSize;};    

  00000		 |$LN5@GetPacketS|
  00000		 |$M37102|
  00000	e590002c	 ldr         r0, [r0, #0x2C]
  00004	e12fff1e	 bx          lr
  00008		 |$M37103|

			 ENDP  ; |?GetPacketSize@CQTD@@QAAKXZ|, CQTD::GetPacketSize

	EXPORT	|?Lock@CQH@@QAAXXZ|			; CQH::Lock
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T37113| DCD	|$LN5@Lock|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@CQH@@QAAXXZ| PROC		; CQH::Lock

; 150  :     void Lock() { EnterCriticalSection(&m_csCQTD); };

  00000		 |$LN5@Lock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37110|
  00004	e280000c	 add         r0, r0, #0xC
  00008	eb000000	 bl          EnterCriticalSection
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M37111|

			 ENDP  ; |?Lock@CQH@@QAAXXZ|, CQH::Lock

	EXPORT	|?UnLock@CQH@@QAAXXZ|			; CQH::UnLock
	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T37121| DCD	|$LN5@UnLock|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UnLock@CQH@@QAAXXZ| PROC		; CQH::UnLock

; 151  :     void UnLock() { LeaveCriticalSection(&m_csCQTD); };

  00000		 |$LN5@UnLock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37118|
  00004	e280000c	 add         r0, r0, #0xC
  00008	eb000000	 bl          LeaveCriticalSection
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M37119|

			 ENDP  ; |?UnLock@CQH@@QAAXXZ|, CQH::UnLock

	EXPORT	|?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ| ; CPipe::GetEndptDescriptor
	IMPORT	|memcpy|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\cpipe.h

  00000			 AREA	 |.pdata|, PDATA
|$T37133| DCD	|$LN5@GetEndptDe|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ| PROC ; CPipe::GetEndptDescriptor

; 96   :     USB_ENDPOINT_DESCRIPTOR GetEndptDescriptor() { return m_usbEndpointDescriptor;};

  00000		 |$LN5@GetEndptDe|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37130|
  00004	e1a04001	 mov         r4, r1
  00008	e2801034	 add         r1, r0, #0x34
  0000c	e1a00004	 mov         r0, r4
  00010	e3a02007	 mov         r2, #7
  00014	eb000000	 bl          memcpy
  00018	e1a00004	 mov         r0, r4
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M37131|

			 ENDP  ; |?GetEndptDescriptor@CPipe@@QAA?AU_USB_ENDPOINT_DESCRIPTOR@@XZ|, CPipe::GetEndptDescriptor

	EXPORT	|?GetMappedEndPoint@CPipe@@QAAEXZ|	; CPipe::GetMappedEndPoint

  00000			 AREA	 |.pdata|, PDATA
|$T37143| DCD	|$LN5@GetMappedE|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetMappedEndPoint@CPipe@@QAAEXZ| PROC ; CPipe::GetMappedEndPoint

; 103  :     UCHAR   GetMappedEndPoint(void) { return m_mappedEndpoint; };

  00000		 |$LN5@GetMappedE|
  00000		 |$M37140|
  00000	e5d00058	 ldrb        r0, [r0, #0x58]
  00004	e12fff1e	 bx          lr
  00008		 |$M37141|

			 ENDP  ; |?GetMappedEndPoint@CPipe@@QAAEXZ|, CPipe::GetMappedEndPoint

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|memdodump|
	EXPORT	|??_C@_15MAOEGKJF@?$AA?$CF?$AAS?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_02KNHHEEKP@?5?5?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_03NDEAONJP@?5?5?5?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_01CLKCMJKC@?5?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_02LMMGGCAJ@?3?5?$AA@| [ DATA ]	; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|strlen|
	IMPORT	|strcat|
	IMPORT	|__security_check_cookie|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\trans.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T37187| DCD	|$LN43@memdodump|
	DCD	0xc0009e02

  00000			 AREA	 |.xdata|, DATA
|$T37183| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15MAOEGKJF@?$AA?$CF?$AAS?$AA?$AA@| DCB "%", 0x0, "S", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_02KNHHEEKP@?5?5?$AA@| DCB "  ", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_03NDEAONJP@?5?5?5?$AA@| DCB "   ", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_01CLKCMJKC@?5?$AA@| DCB " ", 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_02LMMGGCAJ@?3?5?$AA@| DCB ": ", 0x0		; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T37183|

  00008		 |memdodump| PROC

; 50   : {    

  00008		 |$LN43@memdodump|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dd07c	 sub         sp, sp, #0x7C
  00010		 |$M37184|
  00010	e1a09002	 mov         r9, r2
  00014	e1cd90b0	 strh        r9, [sp]
  00018	e1a08000	 mov         r8, r0
  0001c	e59f3258	 ldr         r3, [pc, #0x258]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d3078	 str         r3, [sp, #0x78]

; 51   :     unsigned short i,j,l;
; 52   :     unsigned char tmp_str[100]; 
; 53   :     unsigned char tmp_str1[10];    
; 54   :     for (i = 0; i < num_bytes; i += 16)    {        

  00028	e3a05000	 mov         r5, #0
  0002c	e1b07001	 movs        r7, r1
  00030	0a000087	 beq         |$LN22@memdodump|
  00034	e3a0a000	 mov         r10, #0
  00038	e58da004	 str         r10, [sp, #4]
  0003c	e3a02000	 mov         r2, #0
  00040	e28de017	 add         lr, sp, #0x17
  00044	e28d4017	 add         r4, sp, #0x17
  00048	e3a06000	 mov         r6, #0
  0004c	e28db014	 add         r11, sp, #0x14
  00050		 |$LL24@memdodump|

; 55   :         unsigned short n ;      
; 56   :         tmp_str[0]='\0';        
; 57   :         n = i+offset ;        

  00050	e089300a	 add         r3, r9, r10
  00054	e1a01803	 mov         r1, r3, lsl #16
  00058	e5cd2014	 strb        r2, [sp, #0x14]
  0005c	e1a01821	 mov         r1, r1, lsr #16

; 58   :         for (j=0; j<4; j++) {

  00060	e3a02000	 mov         r2, #0
  00064	e3a00000	 mov         r0, #0
  00068		 |$LL21@memdodump|

; 59   :             l=n%16;

  00068	e1b03001	 movs        r3, r1
  0006c	4283300f	 addmi       r3, r3, #0xF
  00070	e1a03243	 mov         r3, r3, asr #4
  00074	e0413203	 sub         r3, r1, r3, lsl #4
  00078	e1a03803	 mov         r3, r3, lsl #16
  0007c	e1a03823	 mov         r3, r3, lsr #16

; 60   :             if (l>=10)              

  00080	e353000a	 cmp         r3, #0xA

; 61   :                 tmp_str[3-j]=(unsigned char)('A'+l-10);         

  00084	22833037	 addcs       r3, r3, #0x37
  00088	274e3002	 strcsb      r3, [lr, -r2]

; 62   :             else                
; 63   :                 tmp_str[3-j]=(unsigned char)(l+'0');            

  0008c	32833030	 addcc       r3, r3, #0x30
  00090	37443002	 strccb      r3, [r4, -r2]
  00094	e2803001	 add         r3, r0, #1
  00098	e1a02803	 mov         r2, r3, lsl #16

; 64   :             n >>= 4 ;       

  0009c	e1a03221	 mov         r3, r1, lsr #4
  000a0	e1a01803	 mov         r1, r3, lsl #16
  000a4	e1a02822	 mov         r2, r2, lsr #16
  000a8	e1a01821	 mov         r1, r1, lsr #16
  000ac	e1a00002	 mov         r0, r2
  000b0	e3520004	 cmp         r2, #4
  000b4	3affffeb	 bcc         |$LL21@memdodump|

; 65   :         }       
; 66   :         tmp_str[4]='\0';        
; 67   :         strcat ( (char *)tmp_str, ": ");        

  000b8	e59f11b8	 ldr         r1, [pc, #0x1B8]
  000bc	e28d0014	 add         r0, sp, #0x14
  000c0	e5cd6018	 strb        r6, [sp, #0x18]
  000c4	eb000000	 bl          strcat

; 68   :         /*          Output the hex bytes        */        
; 69   :         for (j = i; j < (i+16); j++) {          

  000c8	e2856010	 add         r6, r5, #0x10
  000cc	e1550006	 cmp         r5, r6
  000d0	e1a04005	 mov         r4, r5
  000d4	aa00001e	 bge         |$LN14@memdodump|
  000d8	e1a03005	 mov         r3, r5
  000dc	e3a0b000	 mov         r11, #0
  000e0		 |$LL16@memdodump|

; 70   :             int m ;            
; 71   :             if (j < num_bytes)  {  

  000e0	e1540007	 cmp         r4, r7
  000e4	2a000010	 bcs         |$LN13@memdodump|

; 72   :                 m=((unsigned int)((unsigned char)*(data+j)))/16 ;               

  000e8	e7d32008	 ldrb        r2, [r3, +r8]

; 73   :                 if (m>=10)                  
; 74   :                     tmp_str1[0]='A'+(unsigned char)m-10;                
; 75   :                 else                    
; 76   :                     tmp_str1[0]=(unsigned char)m+'0';               
; 77   :                 m=((unsigned int)((unsigned char)*(data+j)))%16 ;               
; 78   :                 if (m>=10)                  
; 79   :                     tmp_str1[1]='A'+(unsigned char)m-10;                
; 80   :                 else                    
; 81   :                     tmp_str1[1]=(unsigned char)m+'0';               
; 82   :                 tmp_str1[2]='\0';               
; 83   :                 strcat ((char *)tmp_str, (char *)tmp_str1);             

  000ec	e28d1008	 add         r1, sp, #8
  000f0	e28d0014	 add         r0, sp, #0x14
  000f4	e1a03222	 mov         r3, r2, lsr #4
  000f8	e353000a	 cmp         r3, #0xA
  000fc	a2833037	 addge       r3, r3, #0x37
  00100	b2833030	 addlt       r3, r3, #0x30
  00104	e5cd3008	 strb        r3, [sp, #8]
  00108	e202300f	 and         r3, r2, #0xF
  0010c	e353000a	 cmp         r3, #0xA
  00110	a2833037	 addge       r3, r3, #0x37
  00114	b2833030	 addlt       r3, r3, #0x30
  00118	e5cd3009	 strb        r3, [sp, #9]
  0011c	e5cdb00a	 strb        r11, [sp, #0xA]
  00120	eb000000	 bl          strcat

; 84   :                 strcat ((char *)tmp_str, " ");            

  00124	e59f1148	 ldr         r1, [pc, #0x148]

; 85   :             }            
; 86   :             else {                

  00128	ea000000	 b           |$LN39@memdodump|
  0012c		 |$LN13@memdodump|

; 87   :                 strcat((char *)tmp_str,"   ");            

  0012c	e59f113c	 ldr         r1, [pc, #0x13C]
  00130		 |$LN39@memdodump|
  00130	e28d0014	 add         r0, sp, #0x14
  00134	eb000000	 bl          strcat
  00138	e2843001	 add         r3, r4, #1
  0013c	e1a04803	 mov         r4, r3, lsl #16
  00140	e1a04824	 mov         r4, r4, lsr #16
  00144	e1a03004	 mov         r3, r4
  00148	e1540006	 cmp         r4, r6
  0014c	baffffe3	 blt         |$LL16@memdodump|
  00150	e28db014	 add         r11, sp, #0x14
  00154		 |$LN14@memdodump|

; 88   :             }        
; 89   :         }        
; 90   :         strcat((char *)tmp_str, "  ");      

  00154	e59f1110	 ldr         r1, [pc, #0x110]
  00158	e28d0014	 add         r0, sp, #0x14
  0015c	eb000000	 bl          strcat

; 91   :         l=(unsigned short)strlen((char *)tmp_str);        

  00160	e28d0014	 add         r0, sp, #0x14
  00164	eb000000	 bl          strlen
  00168	e1a01800	 mov         r1, r0, lsl #16
  0016c	e1a01821	 mov         r1, r1, lsr #16

; 92   : 
; 93   :         /*         * Output the ASCII bytes        */        
; 94   :         for (j = i; j < (i+16); j++){            

  00170	e1550006	 cmp         r5, r6
  00174	aa000019	 bge         |$LN5@memdodump|
  00178	e1a03005	 mov         r3, r5
  0017c	e28d9014	 add         r9, sp, #0x14
  00180	e3a0a020	 mov         r10, #0x20
  00184		 |$LL7@memdodump|

; 95   :             if (j < num_bytes){

  00184	e1550007	 cmp         r5, r7
  00188	2a000008	 bcs         |$LN4@memdodump|

; 96   :                 char c = *(data+j);                

  0018c	e19330d8	 ldrsb       r3, [r3, +r8]
  00190	e1a02003	 mov         r2, r3

; 97   :                 if (c < ' ' || c > 'z') 

  00194	e3520020	 cmp         r2, #0x20
  00198	ba000001	 blt         |$LN2@memdodump|
  0019c	e352007a	 cmp         r2, #0x7A
  001a0	da000000	 ble         |$LN3@memdodump|
  001a4		 |$LN2@memdodump|

; 98   :                     c = '.';                

  001a4	e3a0202e	 mov         r2, #0x2E
  001a8		 |$LN3@memdodump|

; 99   :                 tmp_str[l++]=c;            

  001a8	e7c12009	 strb        r2, [r1, +r9]

; 100  :             }            
; 101  :             else            

  001ac	ea000000	 b           |$LN40@memdodump|
  001b0		 |$LN4@memdodump|

; 102  :                 tmp_str[l++]=' ';

  001b0	e7c1a00b	 strb        r10, [r1, +r11]
  001b4		 |$LN40@memdodump|
  001b4	e2813001	 add         r3, r1, #1
  001b8	e1a01803	 mov         r1, r3, lsl #16
  001bc	e2853001	 add         r3, r5, #1
  001c0	e1a05803	 mov         r5, r3, lsl #16
  001c4	e1a05825	 mov         r5, r5, lsr #16
  001c8	e1a03005	 mov         r3, r5
  001cc	e1550006	 cmp         r5, r6
  001d0	e1a01821	 mov         r1, r1, lsr #16
  001d4	baffffea	 blt         |$LL7@memdodump|
  001d8	e1dd90b0	 ldrh        r9, [sp]

; 103  :         }       
; 104  :         tmp_str[l++]='\r';        tmp_str[l++]='\n';        tmp_str[l++]='\0';     
; 105  :         RETAILMSG(1, (L"%S", tmp_str));    

  001dc	e59da004	 ldr         r10, [sp, #4]
  001e0		 |$LN5@memdodump|
  001e0	e28d2014	 add         r2, sp, #0x14
  001e4	e3a0000d	 mov         r0, #0xD
  001e8	e2813001	 add         r3, r1, #1
  001ec	e7c10002	 strb        r0, [r1, +r2]
  001f0	e1a02803	 mov         r2, r3, lsl #16
  001f4	e1a02822	 mov         r2, r2, lsr #16
  001f8	e2823001	 add         r3, r2, #1
  001fc	e28d1014	 add         r1, sp, #0x14
  00200	e3a0000a	 mov         r0, #0xA
  00204	e1a03803	 mov         r3, r3, lsl #16
  00208	e7c20001	 strb        r0, [r2, +r1]
  0020c	e59f0054	 ldr         r0, [pc, #0x54]
  00210	e1a03823	 mov         r3, r3, lsr #16
  00214	e28d2014	 add         r2, sp, #0x14
  00218	e3a01000	 mov         r1, #0
  0021c	e7c31002	 strb        r1, [r3, +r2]
  00220	e28d1014	 add         r1, sp, #0x14
  00224	eb000000	 bl          NKDbgPrintfW
  00228	e28a3010	 add         r3, r10, #0x10
  0022c	e1a05803	 mov         r5, r3, lsl #16
  00230	e1a05825	 mov         r5, r5, lsr #16
  00234	e1a0a005	 mov         r10, r5
  00238	e58da004	 str         r10, [sp, #4]
  0023c	e1550007	 cmp         r5, r7
  00240	e28de017	 add         lr, sp, #0x17
  00244	e28d4017	 add         r4, sp, #0x17
  00248	e3a02000	 mov         r2, #0
  0024c	e3a06000	 mov         r6, #0
  00250	3affff7e	 bcc         |$LL24@memdodump|
  00254		 |$LN22@memdodump|

; 50   : {    

  00254	e59d0078	 ldr         r0, [sp, #0x78]
  00258	eb000000	 bl          __security_check_cookie

; 106  :     }
; 107  : }

  0025c	e28dd07c	 add         sp, sp, #0x7C
  00260	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00264	e12fff1e	 bx          lr
  00268		 |$LN44@memdodump|
  00268		 |$LN45@memdodump|
  00268	00000000	 DCD         |??_C@_15MAOEGKJF@?$AA?$CF?$AAS?$AA?$AA@|
  0026c		 |$LN46@memdodump|
  0026c	00000000	 DCD         |??_C@_02KNHHEEKP@?5?5?$AA@|
  00270		 |$LN47@memdodump|
  00270	00000000	 DCD         |??_C@_03NDEAONJP@?5?5?5?$AA@|
  00274		 |$LN48@memdodump|
  00274	00000000	 DCD         |??_C@_01CLKCMJKC@?5?$AA@|
  00278		 |$LN49@memdodump|
  00278	00000000	 DCD         |??_C@_02LMMGGCAJ@?3?5?$AA@|
  0027c		 |$LN50@memdodump|
  0027c	00000000	 DCD         |__security_cookie|
  00280		 |$M37185|

			 ENDP  ; |memdodump|

	EXPORT	|??0CTransfer@@QAA@QAVCPipe@@QAVCPhysMem@@USTRANSFER@@@Z| ; CTransfer::CTransfer
	EXPORT	|??_7CTransfer@@6B@| [ DATA ]		; CTransfer::`vftable'
	EXPORT	|?Init@CTransfer@@UAAHXZ|		; CTransfer::Init
	IMPORT	|??_ECTransfer@@UAAPAXI@Z|, WEAK |??_GCTransfer@@UAAPAXI@Z| ; CTransfer::`vector deleting destructor', CTransfer::`scalar deleting destructor'
	IMPORT	|_purecall|

  00000			 AREA	 |.pdata|, PDATA
|$T37207| DCD	|$LN5@CTransfer|
	DCD	0x40002203

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CTransfer@@6B@| DCD |??_ECTransfer@@UAAPAXI@Z|	; CTransfer::`vftable'
	DCD	|?Init@CTransfer@@UAAHXZ|
	DCD	|_purecall|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CTransfer@@QAA@QAVCPipe@@QAVCPhysMem@@USTRANSFER@@@Z| PROC ; CTransfer::CTransfer

; 122  : {

  00000		 |$LN5@CTransfer|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5030	 stmdb       sp!, {r4, r5, r12, lr}
  0000c		 |$M37204|
  0000c	e1a04002	 mov         r4, r2
  00010	e1a0e001	 mov         lr, r1
  00014	e1a05000	 mov         r5, r0
  00018	e59f3064	 ldr         r3, [pc, #0x64]
  0001c	e285001c	 add         r0, r5, #0x1C
  00020	e28d101c	 add         r1, sp, #0x1C
  00024	e3a02040	 mov         r2, #0x40
  00028	e8854008	 stmia       r5, {r3, lr}
  0002c	e5854008	 str         r4, [r5, #8]
  00030	eb000000	 bl          memcpy

; 123  :     m_pNextTransfer=NULL;

  00034	e3a04000	 mov         r4, #0

; 124  :     m_paControlHeader=0;
; 125  :     m_pAllocatedForControl=NULL;
; 126  :     m_pAllocatedForClient=NULL;
; 127  :     memcpy(&m_sTransfer, &sTransfer,sizeof(STransfer));

  00038	e285001c	 add         r0, r5, #0x1C
  0003c	e28d101c	 add         r1, sp, #0x1C
  00040	e3a02040	 mov         r2, #0x40
  00044	e585400c	 str         r4, [r5, #0xC]
  00048	e5854018	 str         r4, [r5, #0x18]
  0004c	e5854010	 str         r4, [r5, #0x10]
  00050	e5854014	 str         r4, [r5, #0x14]
  00054	eb000000	 bl          memcpy

; 128  :     m_DataTransferred =0 ;
; 129  :     m_dwTransferID = m_dwGlobalTransferID++;

  00058	e59f2020	 ldr         r2, [pc, #0x20]
  0005c	e585405c	 str         r4, [r5, #0x5C]

; 130  : }

  00060	e1a00005	 mov         r0, r5
  00064	e5923000	 ldr         r3, [r2]
  00068	e5853064	 str         r3, [r5, #0x64]
  0006c	e5923000	 ldr         r3, [r2]
  00070	e2833001	 add         r3, r3, #1
  00074	e5823000	 str         r3, [r2]
  00078	e89d6030	 ldmia       sp, {r4, r5, sp, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN6@CTransfer|
  00080		 |$LN7@CTransfer|
  00080	00000000	 DCD         |?m_dwGlobalTransferID@CTransfer@@1KA|
  00084		 |$LN8@CTransfer|
  00084	00000000	 DCD         |??_7CTransfer@@6B@|
  00088		 |$M37205|

			 ENDP  ; |??0CTransfer@@QAA@QAVCPipe@@QAVCPhysMem@@USTRANSFER@@@Z|, CTransfer::CTransfer

	EXPORT	|??1CTransfer@@UAA@XZ|			; CTransfer::~CTransfer
	IMPORT	|?FreeMemory@CPhysMem@@QAAXQAEKK@Z|	; CPhysMem::FreeMemory

  00000			 AREA	 |.pdata|, PDATA
|$T37218| DCD	|$LN7@CTransfer@2|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CTransfer@@UAA@XZ| PROC		; CTransfer::~CTransfer

; 138  : {    

  00000		 |$LN7@CTransfer@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37215|
  00004	e1a04000	 mov         r4, r0

; 139  :     if (m_pAllocatedForControl!=NULL) 

  00008	e5942010	 ldr         r2, [r4, #0x10]
  0000c	e59f3034	 ldr         r3, [pc, #0x34]
  00010	e1b01002	 movs        r1, r2

; 140  :         m_pCPhysMem->FreeMemory( PUCHAR(m_pAllocatedForControl),m_paControlHeader,  CPHYSMEM_FLAG_NOBLOCK );

  00014	15942018	 ldrne       r2, [r4, #0x18]
  00018	15940008	 ldrne       r0, [r4, #8]
  0001c	e5843000	 str         r3, [r4]
  00020	13a03002	 movne       r3, #2
  00024	1b000000	 blne        |?FreeMemory@CPhysMem@@QAAXQAEKK@Z|

; 141  :     if (m_pAllocatedForClient!=NULL)

  00028	e5943014	 ldr         r3, [r4, #0x14]
  0002c	e1b01003	 movs        r1, r3

; 142  :         m_pCPhysMem->FreeMemory( PUCHAR(m_pAllocatedForClient), m_sTransfer.paBuffer,  CPHYSMEM_FLAG_NOBLOCK );

  00030	15942040	 ldrne       r2, [r4, #0x40]
  00034	15940008	 ldrne       r0, [r4, #8]
  00038	13a03002	 movne       r3, #2
  0003c	1b000000	 blne        |?FreeMemory@CPhysMem@@QAAXQAEKK@Z|

; 143  :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE , (TEXT("CTransfer::~CTransfer() (this=0x%x,m_pAllocatedForControl=0x%x,m_pAllocatedForClient=0x%x)\r\n"),
; 144  :         this,m_pAllocatedForControl,m_pAllocatedForClient));
; 145  : 
; 146  : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN8@CTransfer@2|
  00048		 |$LN9@CTransfer@2|
  00048	00000000	 DCD         |??_7CTransfer@@6B@|
  0004c		 |$M37216|

			 ENDP  ; |??1CTransfer@@UAA@XZ|, CTransfer::~CTransfer

	EXPORT	|??_C@_1CO@MKAIJBKB@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|?AllocateMemory@CPhysMem@@QAAHKQAPAEKPAH@Z| ; CPhysMem::AllocateMemory
	IMPORT	|__C_specific_handler|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\usb2com\cphysmem.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37264| DCD	|$LN41@Init|
	DCD	0xc0005b05

  00000			 AREA	 |.pdata|, PDATA
|$T37266| DCD	|$LN21@Init|
	DCD	0x40000502

  00000			 AREA	 |.pdata|, PDATA
|$T37268| DCD	|$LN14@Init|
	DCD	0x40000602

  00000			 AREA	 |.xdata|, DATA
|$T37262| DCD	0x2
	DCD	|$LN25@Init|
	DCD	|$LN26@Init|
	DCD	|$LN21@Init|
	DCD	|$LN22@Init|
	DCD	|$LN18@Init|
	DCD	|$LN19@Init|
	DCD	|$LN14@Init|
	DCD	|$LN15@Init|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@MKAIJBKB@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\trans.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T37262|

  00008		 |?Init@CTransfer@@UAAHXZ| PROC		; CTransfer::Init

; 158  : {

  00008		 |$LN41@Init|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0001	 stmdb       sp!, {r0}
  00010	e92d5870	 stmdb       sp!, {r4 - r6, r11, r12, lr}
  00014	e28db018	 add         r11, sp, #0x18
  00018	e24dd008	 sub         sp, sp, #8
  0001c		 |$LN39@Init|
  0001c	e1a04000	 mov         r4, r0
  00020	e58b4000	 str         r4, [r11]

; 159  :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("CTransfer::Init (this=0x%x,id=0x%x)\r\n"),this,m_dwTransferID));    
; 160  :     // We must allocate the control header memory here so that cleanup works later.
; 161  :     if (m_sTransfer.lpvControlHeader != NULL &&  m_pAllocatedForControl == NULL ) {

  00024	e5943028	 ldr         r3, [r4, #0x28]
  00028	e3530000	 cmp         r3, #0
  0002c	0a00001c	 beq         |$LN36@Init|
  00030	e5943010	 ldr         r3, [r4, #0x10]
  00034	e3530000	 cmp         r3, #0
  00038	1a000019	 bne         |$LN36@Init|

; 162  :         // This must be a control transfer. It is asserted elsewhere,
; 163  :         // but the worst case is we needlessly allocate some physmem.
; 164  :         if ( !m_pCPhysMem->AllocateMemory(
; 165  :                                    DEBUG_PARAM( TEXT("IssueTransfer SETUP Buffer") )
; 166  :                                    sizeof(USB_DEVICE_REQUEST),
; 167  :                                    &m_pAllocatedForControl,
; 168  :                                    CPHYSMEM_FLAG_NOBLOCK ) ) {

  0003c	e5940008	 ldr         r0, [r4, #8]
  00040	e3a06000	 mov         r6, #0
  00044	e3a03002	 mov         r3, #2
  00048	e2842010	 add         r2, r4, #0x10
  0004c	e3a01008	 mov         r1, #8
  00050	e58d6000	 str         r6, [sp]
  00054	eb000000	 bl          |?AllocateMemory@CPhysMem@@QAAHKQAPAEKPAH@Z|
  00058	e3500000	 cmp         r0, #0

; 169  :             DEBUGMSG( ZONE_WARNING, (TEXT("CPipe(%s)::IssueTransfer - no memory for SETUP buffer\n"), m_pCPipe->GetPipeType() ) );
; 170  :             m_pAllocatedForControl=NULL;

  0005c	05846010	 streq       r6, [r4, #0x10]

; 171  :             return FALSE;

  00060	03a05000	 moveq       r5, #0

; 162  :         // This must be a control transfer. It is asserted elsewhere,
; 163  :         // but the worst case is we needlessly allocate some physmem.
; 164  :         if ( !m_pCPhysMem->AllocateMemory(
; 165  :                                    DEBUG_PARAM( TEXT("IssueTransfer SETUP Buffer") )
; 166  :                                    sizeof(USB_DEVICE_REQUEST),
; 167  :                                    &m_pAllocatedForControl,
; 168  :                                    CPHYSMEM_FLAG_NOBLOCK ) ) {

  00064	0a00003e	 beq         |$LN9@Init|

; 172  :         }
; 173  :         m_paControlHeader = m_pCPhysMem->VaToPa( m_pAllocatedForControl );

  00068	e5943008	 ldr         r3, [r4, #8]
  0006c	e5940010	 ldr         r0, [r4, #0x10]
  00070	e5933034	 ldr         r3, [r3, #0x34]
  00074	e0833000	 add         r3, r3, r0
  00078	e5843018	 str         r3, [r4, #0x18]
  0007c		 |$LN18@Init|

; 174  :         DEBUGCHK( m_pAllocatedForControl != NULL && m_paControlHeader != 0 );
; 175  : 
; 176  :         __try {
; 177  :             memcpy(m_pAllocatedForControl,m_sTransfer.lpvControlHeader,sizeof(USB_DEVICE_REQUEST));

  0007c	e5941028	 ldr         r1, [r4, #0x28]
  00080	e3a02008	 mov         r2, #8
  00084	eb000000	 bl          memcpy
  00088		 |$LN19@Init|

; 178  :         } __except( EXCEPTION_EXECUTE_HANDLER ) {

  00088	e51b501c	 ldr         r5, [r11, #-0x1C]
  0008c	ea000006	 b           |$LN20@Init|
  00090		 |$LN15@Init|

; 179  :             // bad lpvControlHeader
; 180  :             return FALSE;

  00090	e3a05000	 mov         r5, #0
  00094	e50b501c	 str         r5, [r11, #-0x1C]
  00098	e59b4000	 ldr         r4, [r11]
  0009c	e3a06000	 mov         r6, #0
  000a0	ea00002f	 b           |$LN9@Init|
  000a4		 |$LN36@Init|
  000a4	e51b501c	 ldr         r5, [r11, #-0x1C]
  000a8	e3a06000	 mov         r6, #0
  000ac		 |$LN20@Init|

; 181  :         }
; 182  :     }
; 183  : #if 0
; 184  : #ifdef DEBUG
; 185  :     if ( m_sTransfer.dwFlags & USB_IN_TRANSFER ) {
; 186  :         // I am leaving this in for two reasons:
; 187  :         //  1. The memset ought to work even on zero bytes to NULL.
; 188  :         //  2. Why would anyone really want to do a zero length IN?
; 189  :         DEBUGCHK( m_sTransfer.dwBufferSize > 0 &&
; 190  :                   m_sTransfer.lpvBuffer != NULL );
; 191  :         __try { // IN buffer, trash it
; 192  :             memset( PUCHAR( m_sTransfer.lpvBuffer ), GARBAGE, m_sTransfer.dwBufferSize );
; 193  :         } __except( EXCEPTION_EXECUTE_HANDLER ) {
; 194  :         }
; 195  :     }
; 196  : #endif // DEBUG
; 197  : #endif
; 198  : 
; 199  :     if ( m_sTransfer.dwBufferSize > 0 && m_sTransfer.paBuffer == 0 ) { 

  000ac	e5943038	 ldr         r3, [r4, #0x38]
  000b0	e1b01003	 movs        r1, r3
  000b4	0a000024	 beq         |$LN27@Init|
  000b8	e5943040	 ldr         r3, [r4, #0x40]
  000bc	e3530000	 cmp         r3, #0
  000c0	1a000021	 bne         |$LN27@Init|

; 200  : 
; 201  :         // ok, there's data on this transfer and the client
; 202  :         // did not specify a physical address for the
; 203  :         // buffer. So, we need to allocate our own.
; 204  : 
; 205  :         if ( !m_pCPhysMem->AllocateMemory(
; 206  :                                    DEBUG_PARAM( TEXT("IssueTransfer Buffer") )
; 207  :                                    m_sTransfer.dwBufferSize,
; 208  :                                    &m_pAllocatedForClient, 
; 209  :                                    CPHYSMEM_FLAG_NOBLOCK ) ) {

  000c4	e5940008	 ldr         r0, [r4, #8]
  000c8	e3a03002	 mov         r3, #2
  000cc	e2842014	 add         r2, r4, #0x14
  000d0	e58d6000	 str         r6, [sp]
  000d4	eb000000	 bl          |?AllocateMemory@CPhysMem@@QAAHKQAPAEKPAH@Z|
  000d8	e3500000	 cmp         r0, #0

; 210  :             DEBUGMSG( ZONE_WARNING, (TEXT("CPipe(%s)::IssueTransfer - no memory for TD buffer\n"), m_pCPipe->GetPipeType() ) );
; 211  :             m_pAllocatedForClient = NULL;

  000dc	05846014	 streq       r6, [r4, #0x14]

; 171  :             return FALSE;

  000e0	03a05000	 moveq       r5, #0

; 200  : 
; 201  :         // ok, there's data on this transfer and the client
; 202  :         // did not specify a physical address for the
; 203  :         // buffer. So, we need to allocate our own.
; 204  : 
; 205  :         if ( !m_pCPhysMem->AllocateMemory(
; 206  :                                    DEBUG_PARAM( TEXT("IssueTransfer Buffer") )
; 207  :                                    m_sTransfer.dwBufferSize,
; 208  :                                    &m_pAllocatedForClient, 
; 209  :                                    CPHYSMEM_FLAG_NOBLOCK ) ) {

  000e4	0a00001e	 beq         |$LN9@Init|

; 212  :             return FALSE;
; 213  :         }
; 214  : 
; 215  :         m_sTransfer.paBuffer = m_pCPhysMem->VaToPa( m_pAllocatedForClient );

  000e8	e5942008	 ldr         r2, [r4, #8]
  000ec	e5940014	 ldr         r0, [r4, #0x14]

; 216  :         PREFAST_DEBUGCHK( m_pAllocatedForClient != NULL);
; 217  :         PREFAST_DEBUGCHK( m_sTransfer.lpvBuffer!=NULL);
; 218  :         DEBUGCHK(m_sTransfer.paBuffer != 0 );
; 219  : 
; 220  :         if ( !(m_sTransfer.dwFlags & USB_IN_TRANSFER) ) {

  000f0	e5943024	 ldr         r3, [r4, #0x24]
  000f4	e5922034	 ldr         r2, [r2, #0x34]
  000f8	e3130080	 tst         r3, #0x80
  000fc	e0823000	 add         r3, r2, r0
  00100	e5843040	 str         r3, [r4, #0x40]
  00104	1a000010	 bne         |$LN27@Init|
  00108		 |$LN25@Init|

; 221  :             __try { // copying client buffer for OUT transfer
; 222  :                 memcpy( m_pAllocatedForClient, m_sTransfer.lpvBuffer, m_sTransfer.dwBufferSize );

  00108	e5942038	 ldr         r2, [r4, #0x38]
  0010c	e594103c	 ldr         r1, [r4, #0x3C]
  00110	eb000000	 bl          memcpy

; 223  :                 if ((m_sTransfer.dwBufferSize == 31) && (*m_pAllocatedForClient != 0x55))

  00114	e5943038	 ldr         r3, [r4, #0x38]
  00118	e353001f	 cmp         r3, #0x1F
  0011c	1a000004	 bne         |$LN26@Init|
  00120	e5943014	 ldr         r3, [r4, #0x14]
  00124	e5d33000	 ldrb        r3, [r3]
  00128	e3530055	 cmp         r3, #0x55

; 224  :                     RETAILMSG(1, (TEXT("Invalid Transfer OUT\r\n")));

  0012c	159f0068	 ldrne       r0, [pc, #0x68]
  00130	1b000000	 blne        NKDbgPrintfW
  00134		 |$LN26@Init|
  00134	ea000004	 b           |$LN27@Init|
  00138		 |$LN22@Init|

; 226  :                   // bad lpvClientBuffer
; 227  :                   return FALSE;

  00138	e3a05000	 mov         r5, #0
  0013c	e59b4000	 ldr         r4, [r11]
  00140	ea000007	 b           |$LN9@Init|
  00144		 |$LN37@Init|

; 228  :             }
; 229  :         }
; 230  :     }
; 231  :     
; 232  :     DEBUGMSG(  ZONE_TRANSFER && ZONE_VERBOSE , (TEXT("CQTransfer::Init (this=0x%x,id=0x%x),m_pAllocatedForControl=0x%x,m_pAllocatedForClient=0x%x\r\n"),
; 233  :         this,m_dwTransferID,m_pAllocatedForControl,m_pAllocatedForClient));    
; 234  :     return AddTransfer();

  00144	e51b501c	 ldr         r5, [r11, #-0x1C]
  00148	ea000005	 b           |$LN9@Init|
  0014c		 |$LN27@Init|
  0014c	e5943000	 ldr         r3, [r4]
  00150	e1a00004	 mov         r0, r4
  00154	e5933008	 ldr         r3, [r3, #8]
  00158	e1a0e00f	 mov         lr, pc
  0015c	e12fff13	 bx          r3
  00160	e1a05000	 mov         r5, r0
  00164		 |$LN9@Init|

; 235  : }

  00164	e1a00005	 mov         r0, r5
  00168	e24bd018	 sub         sp, r11, #0x18
  0016c	e89d6870	 ldmia       sp, {r4 - r6, r11, sp, lr}
  00170	e12fff1e	 bx          lr

			 ENDP  ; |?Init@CTransfer@@UAAHXZ|, CTransfer::Init

  00174		 |$LN21@Init|
  00174		 |$LN40@Init|

; 225  :             } __except( EXCEPTION_EXECUTE_HANDLER ) {

  00174	e52de004	 str         lr, [sp, #-4]!
  00178	e24dd004	 sub         sp, sp, #4
  0017c		 |$LN24@Init|
  0017c		 |$LN44@Init|
  0017c	e3a00001	 mov         r0, #1
  00180		 |$LN23@Init|
  00180	e28dd004	 add         sp, sp, #4
  00184	e49df004	 ldr         pc, [sp], #4
  00188		 |$LN45@Init|
  00188		 |$LN14@Init|
  00188		 |$LN42@Init|

; 178  :         } __except( EXCEPTION_EXECUTE_HANDLER ) {

  00188	e52de004	 str         lr, [sp, #-4]!
  0018c	e24dd004	 sub         sp, sp, #4
  00190		 |$LN17@Init|
  00190		 |$LN46@Init|
  00190	e3a00001	 mov         r0, #1
  00194		 |$LN16@Init|
  00194	e28dd004	 add         sp, sp, #4
  00198	e49df004	 ldr         pc, [sp], #4
  0019c		 |$LN48@Init|
  0019c		 |$LN49@Init|
  0019c	00000000	 DCD         |??_C@_1CO@MKAIJBKB@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?5?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  001a0		 |$LN47@Init|
  001a0		 |$LN43@Init|
	EXPORT	|??_GCQTD@@QAAPAXI@Z|			; CQTD::`scalar deleting destructor'
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T37291| DCD	|$LN8@scalar|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCQTD@@QAAPAXI@Z| PROC		; CQTD::`scalar deleting destructor'
  00000		 |$LN8@scalar|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37288|
  00004	e1a04000	 mov         r4, r0
  00008	e3110001	 tst         r1, #1
  0000c	1b000000	 blne        |??3@YAXPAX@Z|
  00010	e1a00004	 mov         r0, r4
  00014	e8bd4010	 ldmia       sp!, {r4, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M37289|

			 ENDP  ; |??_GCQTD@@QAAPAXI@Z|, CQTD::`scalar deleting destructor'

	EXPORT	|?AddTransfer@CQTransfer@@UAAHXZ|	; CQTransfer::AddTransfer
	IMPORT	|?QueueNextTD@CQTD@@QAAPAV1@PAV1@@Z|	; CQTD::QueueNextTD
	IMPORT	|??0CQTD@@QAA@PAVCQTransfer@@PAVCQH@@@Z| ; CQTD::CQTD
	IMPORT	|??2@YAPAXI@Z|				; operator new
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\ctd.h

  00000			 AREA	 |.pdata|, PDATA
|$T37568| DCD	|$LN164@AddTransfe|
	DCD	0x40011b02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\trans.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AddTransfer@CQTransfer@@UAAHXZ| PROC	; CQTransfer::AddTransfer

; 268  : {

  00000		 |$LN164@AddTransfe|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M37565|
  00008	e1a04000	 mov         r4, r0

; 269  :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("CQTransfer::AddTransfer (this=0x%x,id=0x%x)\r\n"),this,m_dwTransferID));
; 270  :     if (m_pCQTDList) { // Has been created. Somthing wrong.

  0000c	e5943068	 ldr         r3, [r4, #0x68]
  00010	e3530000	 cmp         r3, #0
  00014	0a000001	 beq         |$LN22@AddTransfe|
  00018		 |$LN20@AddTransfe|

; 271  :         DEBUGMSG(ZONE_ERROR, (TEXT("CQTransfer:: Failure to add since m_pCQTDList is full\r\n")));
; 272  :         ASSERT(FALSE);
; 273  :         return FALSE;

  00018	e3a00000	 mov         r0, #0
  0001c	ea000107	 b           |$LN23@AddTransfe|
  00020		 |$LN22@AddTransfe|

; 274  :     }
; 275  :     BOOL bDataToggle1= FALSE;
; 276  :     CQTD * pStatusTD = NULL;
; 277  :     DWORD dwPacketSize= (m_pCPipe->GetEndptDescriptor()).wMaxPacketSize & 0x7ff;

  00020	e5943004	 ldr         r3, [r4, #4]
  00024	e28d0000	 add         r0, sp, #0
  00028	e3a02007	 mov         r2, #7
  0002c	e2831034	 add         r1, r3, #0x34
  00030	e3a0b000	 mov         r11, #0
  00034	e3a05000	 mov         r5, #0
  00038	eb000000	 bl          memcpy
  0003c	e1dd20b4	 ldrh        r2, [sp, #4]

; 278  :     if (m_paControlHeader!=NULL && m_sTransfer.lpvControlHeader!=NULL) { 

  00040	e5941018	 ldr         r1, [r4, #0x18]
  00044	e3a03c07	 mov         r3, #7, 24
  00048	e38330ff	 orr         r3, r3, #0xFF
  0004c	e0029003	 and         r9, r2, r3
  00050	e3510000	 cmp         r1, #0
  00054	e3a07000	 mov         r7, #0
  00058	e3a08001	 mov         r8, #1
  0005c	0a000063	 beq         |$LN17@AddTransfe|
  00060	e5943028	 ldr         r3, [r4, #0x28]
  00064	e3530000	 cmp         r3, #0
  00068	0a000060	 beq         |$LN17@AddTransfe|

; 279  :         // This is setup packet.        
; 280  :         if (m_pCQTDList = new CQTD(this, (CQH *)(((CQueuedPipe * const)m_pCPipe->GetQHead())))) {            

  0006c	e3a00038	 mov         r0, #0x38
  00070	eb000000	 bl          |??2@YAPAXI@Z|
  00074	e1b05000	 movs        r5, r0
  00078	0a000009	 beq         |$LN25@AddTransfe|
  0007c	e5940004	 ldr         r0, [r4, #4]
  00080	e5903000	 ldr         r3, [r0]
  00084	e5933040	 ldr         r3, [r3, #0x40]
  00088	e1a0e00f	 mov         lr, pc
  0008c	e12fff13	 bx          r3
  00090	e1a02000	 mov         r2, r0
  00094	e1a00005	 mov         r0, r5
  00098	e1a01004	 mov         r1, r4
  0009c	eb000000	 bl          |??0CQTD@@QAA@PAVCQTransfer@@PAVCQH@@@Z|
  000a0	ea000000	 b           |$LN26@AddTransfe|
  000a4		 |$LN25@AddTransfe|
  000a4	e3a00000	 mov         r0, #0
  000a8		 |$LN26@AddTransfe|
  000a8	e5840068	 str         r0, [r4, #0x68]
  000ac	e3500000	 cmp         r0, #0
  000b0	0affffd8	 beq         |$LN20@AddTransfe|

; 281  :             m_pCPipe->GetQHead()->Lock();

  000b4	e5940004	 ldr         r0, [r4, #4]
  000b8	e5903000	 ldr         r3, [r0]
  000bc	e5933040	 ldr         r3, [r3, #0x40]
  000c0	e1a0e00f	 mov         lr, pc
  000c4	e12fff13	 bx          r3
  000c8	e280000c	 add         r0, r0, #0xC
  000cc	eb000000	 bl          EnterCriticalSection

; 282  :             m_pCQTDList->SetBuffer((DWORD)m_paControlHeader, (DWORD)m_pAllocatedForControl, sizeof(USB_DEVICE_REQUEST));

  000d0	e5942010	 ldr         r2, [r4, #0x10]
  000d4	e5941068	 ldr         r1, [r4, #0x68]
  000d8	e5943018	 ldr         r3, [r4, #0x18]
  000dc	e3a00008	 mov         r0, #8
  000e0	e5812014	 str         r2, [r1, #0x14]
  000e4	e5813010	 str         r3, [r1, #0x10]
  000e8	e5810018	 str         r0, [r1, #0x18]

; 283  :             m_pCQTDList->SetTotTfrSize(0);

  000ec	e5943068	 ldr         r3, [r4, #0x68]

; 284  :             m_pCQTDList->SetCurTfrSize(0);
; 285  :             m_pCQTDList->SetTDType(TD_SETUP);
; 286  :             m_pCQTDList->SetToggle(bDataToggle1);
; 287  :             m_pCQTDList->SetStatus(STATUS_WAIT_TRANSFER);            
; 288  :             m_pCQTDList->SetPacketSize(dwPacketSize);
; 289  :             m_pCPipe->GetQHead()->UnLock();

  000f0	e583701c	 str         r7, [r3, #0x1C]
  000f4	e5943068	 ldr         r3, [r4, #0x68]
  000f8	e5837020	 str         r7, [r3, #0x20]
  000fc	e5943068	 ldr         r3, [r4, #0x68]
  00100	e583800c	 str         r8, [r3, #0xC]
  00104	e5943068	 ldr         r3, [r4, #0x68]
  00108	e5837024	 str         r7, [r3, #0x24]
  0010c	e5943068	 ldr         r3, [r4, #0x68]
  00110	e5838028	 str         r8, [r3, #0x28]
  00114	e5943068	 ldr         r3, [r4, #0x68]
  00118	e583902c	 str         r9, [r3, #0x2C]
  0011c	e5940004	 ldr         r0, [r4, #4]
  00120	e5903000	 ldr         r3, [r0]
  00124	e5933040	 ldr         r3, [r3, #0x40]
  00128	e1a0e00f	 mov         lr, pc
  0012c	e12fff13	 bx          r3
  00130	e280000c	 add         r0, r0, #0xC
  00134	eb000000	 bl          LeaveCriticalSection

; 290  :             bDataToggle1 = !bDataToggle1;
; 291  :         }
; 292  :         else 
; 293  :             return FALSE;
; 294  : 
; 295  :         // Status Packet        
; 296  :         pStatusTD = new CQTD(this, ((CQueuedPipe * const)m_pCPipe)->GetQHead());

  00138	e3a00038	 mov         r0, #0x38
  0013c	e3a0b001	 mov         r11, #1
  00140	eb000000	 bl          |??2@YAPAXI@Z|
  00144	e1b05000	 movs        r5, r0
  00148	0a00000a	 beq         |$LN29@AddTransfe|
  0014c	e5940004	 ldr         r0, [r4, #4]
  00150	e5903000	 ldr         r3, [r0]
  00154	e5933040	 ldr         r3, [r3, #0x40]
  00158	e1a0e00f	 mov         lr, pc
  0015c	e12fff13	 bx          r3
  00160	e1a02000	 mov         r2, r0
  00164	e1a00005	 mov         r0, r5
  00168	e1a01004	 mov         r1, r4
  0016c	eb000000	 bl          |??0CQTD@@QAA@PAVCQTransfer@@PAVCQH@@@Z|
  00170	e1a05000	 mov         r5, r0
  00174	ea000000	 b           |$LN30@AddTransfe|
  00178		 |$LN29@AddTransfe|
  00178	e3a05000	 mov         r5, #0
  0017c		 |$LN30@AddTransfe|

; 297  :         if (pStatusTD) {

  0017c	e3550000	 cmp         r5, #0
  00180	0affffa4	 beq         |$LN20@AddTransfe|

; 298  :             m_pCPipe->GetQHead()->Lock();

  00184	e5940004	 ldr         r0, [r4, #4]
  00188	e5903000	 ldr         r3, [r0]
  0018c	e5933040	 ldr         r3, [r3, #0x40]
  00190	e1a0e00f	 mov         lr, pc
  00194	e12fff13	 bx          r3
  00198	e280000c	 add         r0, r0, #0xC
  0019c	eb000000	 bl          EnterCriticalSection

; 299  :             pStatusTD->SetBuffer(0, 0, 0);

  001a0	e5857010	 str         r7, [r5, #0x10]
  001a4	e5857014	 str         r7, [r5, #0x14]
  001a8	e5857018	 str         r7, [r5, #0x18]

; 300  :             pStatusTD->SetTotTfrSize(0);

  001ac	e585701c	 str         r7, [r5, #0x1C]

; 301  :             pStatusTD->SetCurTfrSize(0);

  001b0	e5857020	 str         r7, [r5, #0x20]

; 302  :             pStatusTD->SetTDType(((m_sTransfer.dwFlags & USB_IN_TRANSFER)!=0?TD_STATUS_OUT:TD_STATUS_IN));

  001b4	e5943024	 ldr         r3, [r4, #0x24]

; 303  :             pStatusTD->SetToggle(TRUE);

  001b8	e5858024	 str         r8, [r5, #0x24]

; 304  :             pStatusTD->SetStatus(STATUS_WAIT_TRANSFER);

  001bc	e5858028	 str         r8, [r5, #0x28]
  001c0	e3130080	 tst         r3, #0x80
  001c4	13a03005	 movne       r3, #5
  001c8	03a03004	 moveq       r3, #4
  001cc	e585300c	 str         r3, [r5, #0xC]

; 305  :             pStatusTD->SetPacketSize(dwPacketSize);

  001d0	e585902c	 str         r9, [r5, #0x2C]

; 306  :             m_pCPipe->GetQHead()->UnLock();

  001d4	e5940004	 ldr         r0, [r4, #4]
  001d8	e5903000	 ldr         r3, [r0]
  001dc	e5933040	 ldr         r3, [r3, #0x40]
  001e0	e1a0e00f	 mov         lr, pc
  001e4	e12fff13	 bx          r3
  001e8	e280000c	 add         r0, r0, #0xC
  001ec	eb000000	 bl          LeaveCriticalSection
  001f0		 |$LN17@AddTransfe|

; 307  :         }
; 308  :         else 
; 309  :             return FALSE;
; 310  :     };
; 311  :     CQTD * pPrevTD=m_pCQTDList;

  001f0	e5943068	 ldr         r3, [r4, #0x68]
  001f4	e1b06003	 movs        r6, r3

; 312  :     if ( m_pCQTDList==NULL  && m_sTransfer.dwBufferSize == 0 ) { // No Control but Zero Length

  001f8	1a000035	 bne         |$LN16@AddTransfe|
  001fc	e5943038	 ldr         r3, [r4, #0x38]
  00200	e3530000	 cmp         r3, #0
  00204	1a000032	 bne         |$LN16@AddTransfe|

; 313  :         //ASSERT((m_sTransfer.dwFlags & USB_IN_TRANSFER)==0);// No meaning for IN Zero length packet.        
; 314  :         CQTD * pCurTD = new CQTD(this, ((CQueuedPipe * const)m_pCPipe)->GetQHead());

  00208	e3a00038	 mov         r0, #0x38
  0020c	eb000000	 bl          |??2@YAPAXI@Z|
  00210	e1b06000	 movs        r6, r0
  00214	0a00000a	 beq         |$LN33@AddTransfe|
  00218	e5940004	 ldr         r0, [r4, #4]
  0021c	e5903000	 ldr         r3, [r0]
  00220	e5933040	 ldr         r3, [r3, #0x40]
  00224	e1a0e00f	 mov         lr, pc
  00228	e12fff13	 bx          r3
  0022c	e1a02000	 mov         r2, r0
  00230	e1a00006	 mov         r0, r6
  00234	e1a01004	 mov         r1, r4
  00238	eb000000	 bl          |??0CQTD@@QAA@PAVCQTransfer@@PAVCQH@@@Z|
  0023c	e1a06000	 mov         r6, r0
  00240	ea000000	 b           |$LN34@AddTransfe|
  00244		 |$LN33@AddTransfe|
  00244	e3a06000	 mov         r6, #0
  00248		 |$LN34@AddTransfe|

; 315  :         if (pCurTD) {           

  00248	e3560000	 cmp         r6, #0
  0024c	0a00001a	 beq         |$LN15@AddTransfe|

; 316  :             m_pCPipe->GetQHead()->Lock();

  00250	e5940004	 ldr         r0, [r4, #4]
  00254	e5903000	 ldr         r3, [r0]
  00258	e5933040	 ldr         r3, [r3, #0x40]
  0025c	e1a0e00f	 mov         lr, pc
  00260	e12fff13	 bx          r3
  00264	e280000c	 add         r0, r0, #0xC
  00268	eb000000	 bl          EnterCriticalSection

; 317  :             pCurTD->SetBuffer(0, 0, 0);

  0026c	e5867010	 str         r7, [r6, #0x10]
  00270	e5867014	 str         r7, [r6, #0x14]
  00274	e5867018	 str         r7, [r6, #0x18]

; 318  :             pCurTD->SetTotTfrSize(0);

  00278	e586701c	 str         r7, [r6, #0x1C]

; 319  :             pCurTD->SetCurTfrSize(0);

  0027c	e5867020	 str         r7, [r6, #0x20]

; 320  :             pCurTD->SetTDType(((m_sTransfer.dwFlags & USB_IN_TRANSFER)!=0? TD_DATA_IN: TD_DATA_OUT));

  00280	e5943024	 ldr         r3, [r4, #0x24]

; 321  :             pCurTD->SetToggle(bDataToggle1);

  00284	e586b024	 str         r11, [r6, #0x24]

; 322  :             pCurTD->SetStatus(STATUS_WAIT_TRANSFER);

  00288	e5868028	 str         r8, [r6, #0x28]
  0028c	e3130080	 tst         r3, #0x80
  00290	13a03002	 movne       r3, #2
  00294	03a03003	 moveq       r3, #3
  00298	e586300c	 str         r3, [r6, #0xC]

; 323  :             pCurTD->SetPacketSize(dwPacketSize);

  0029c	e586902c	 str         r9, [r6, #0x2C]

; 324  :             if (pPrevTD) {
; 325  :                 pPrevTD->QueueNextTD(pCurTD);
; 326  :                 pPrevTD=pCurTD;
; 327  :             }
; 328  :             else { // THis is First. So update m_pQTDList
; 329  :                 pPrevTD= m_pCQTDList = pCurTD;
; 330  :             }
; 331  :             m_pCPipe->GetQHead()->UnLock();

  002a0	e5940004	 ldr         r0, [r4, #4]
  002a4	e5846068	 str         r6, [r4, #0x68]
  002a8	e5903000	 ldr         r3, [r0]
  002ac	e5933040	 ldr         r3, [r3, #0x40]
  002b0	e1a0e00f	 mov         lr, pc
  002b4	e12fff13	 bx          r3

; 337  :             }
; 338  :             return FALSE;                
; 339  :         }
; 340  :     }
; 341  :     else

  002b8	ea000048	 b           |$LN159@AddTransfe|
  002bc		 |$LN15@AddTransfe|

; 332  :         }
; 333  :         else {
; 334  :             if ( pStatusTD) {

  002bc	e3550000	 cmp         r5, #0
  002c0	0affff54	 beq         |$LN20@AddTransfe|
  002c4		 |$LN161@AddTransfe|

; 335  :                 pStatusTD->~CQTD();
; 336  :                 delete pStatusTD;

  002c4	e1a00005	 mov         r0, r5
  002c8	eb000000	 bl          |??3@YAXPAX@Z|
  002cc	e3a00000	 mov         r0, #0
  002d0	ea00005a	 b           |$LN23@AddTransfe|
  002d4		 |$LN16@AddTransfe|

; 342  :     if (m_sTransfer.lpvBuffer &&  m_sTransfer.paBuffer && m_sTransfer.dwBufferSize) {                

  002d4	e594303c	 ldr         r3, [r4, #0x3C]
  002d8	e3530000	 cmp         r3, #0
  002dc	0a000041	 beq         |$LN141@AddTransfe|
  002e0	e5943040	 ldr         r3, [r4, #0x40]
  002e4	e3530000	 cmp         r3, #0
  002e8	0a00003e	 beq         |$LN141@AddTransfe|
  002ec	e5943038	 ldr         r3, [r4, #0x38]
  002f0	e3530000	 cmp         r3, #0
  002f4	0a00003b	 beq         |$LN141@AddTransfe|

; 343  :         BOOL  bZeroLength = FALSE;        
; 344  :         
; 345  :         // If this is an OUT transaction and total length is multiple of packet size
; 346  :         if (((m_sTransfer.dwFlags & USB_IN_TRANSFER)==0) && (m_sTransfer.dwBufferSize%dwPacketSize==0))
; 347  :             bZeroLength = TRUE;
; 348  : 
; 349  :         // We just setup one single CQTD here, let the WriteFIFO handle that.                
; 350  :         CQTD * pCurTD = new CQTD(this, ((CQueuedPipe * const)m_pCPipe)->GetQHead());

  002f8	e3a00038	 mov         r0, #0x38
  002fc	eb000000	 bl          |??2@YAPAXI@Z|
  00300	e1b07000	 movs        r7, r0
  00304	0a00000a	 beq         |$LN39@AddTransfe|
  00308	e5940004	 ldr         r0, [r4, #4]
  0030c	e5903000	 ldr         r3, [r0]
  00310	e5933040	 ldr         r3, [r3, #0x40]
  00314	e1a0e00f	 mov         lr, pc
  00318	e12fff13	 bx          r3
  0031c	e1a02000	 mov         r2, r0
  00320	e1a00007	 mov         r0, r7
  00324	e1a01004	 mov         r1, r4
  00328	eb000000	 bl          |??0CQTD@@QAA@PAVCQTransfer@@PAVCQH@@@Z|
  0032c	e1a07000	 mov         r7, r0
  00330	ea000000	 b           |$LN40@AddTransfe|
  00334		 |$LN39@AddTransfe|
  00334	e3a07000	 mov         r7, #0
  00338		 |$LN40@AddTransfe|

; 351  :         ASSERT(pCurTD!=NULL);
; 352  :         if (pCurTD==NULL) {

  00338	e3570000	 cmp         r7, #0

; 353  :             // delete  pStatusTD;
; 354  :             if ( pStatusTD) {
; 355  :                 pStatusTD->~CQTD();
; 356  :                 delete pStatusTD;
; 357  :             }
; 358  :             return FALSE;                

  0033c	0affffde	 beq         |$LN15@AddTransfe|

; 359  :         }                
; 360  :         DWORD dwCurPhysAddr=  m_sTransfer.paBuffer;
; 361  :         DWORD dwCurVirtAddr = (m_pAllocatedForClient != NULL)?(DWORD)m_pAllocatedForClient:(DWORD)m_sTransfer.lpvBuffer;

  00340	e5943014	 ldr         r3, [r4, #0x14]

; 362  :         m_pCPipe->GetQHead()->Lock();

  00344	e5940004	 ldr         r0, [r4, #4]
  00348	e594a040	 ldr         r10, [r4, #0x40]
  0034c	e1b08003	 movs        r8, r3
  00350	e5903000	 ldr         r3, [r0]
  00354	0594803c	 ldreq       r8, [r4, #0x3C]
  00358	e5933040	 ldr         r3, [r3, #0x40]
  0035c	e1a0e00f	 mov         lr, pc
  00360	e12fff13	 bx          r3
  00364	e280000c	 add         r0, r0, #0xC
  00368	eb000000	 bl          EnterCriticalSection

; 363  :         pCurTD->SetBuffer(dwCurPhysAddr, dwCurVirtAddr, m_sTransfer.dwBufferSize);

  0036c	e5943038	 ldr         r3, [r4, #0x38]
  00370	e587a010	 str         r10, [r7, #0x10]
  00374	e5878014	 str         r8, [r7, #0x14]
  00378	e5873018	 str         r3, [r7, #0x18]

; 364  :         pCurTD->SetTotTfrSize(0);

  0037c	e3a03000	 mov         r3, #0
  00380	e587301c	 str         r3, [r7, #0x1C]

; 365  :         pCurTD->SetCurTfrSize(0);

  00384	e5873020	 str         r3, [r7, #0x20]

; 366  :         pCurTD->SetTDType(((m_sTransfer.dwFlags & USB_IN_TRANSFER)!=0?TD_DATA_IN:TD_DATA_OUT));

  00388	e5943024	 ldr         r3, [r4, #0x24]

; 367  :         pCurTD->SetToggle(bDataToggle1);

  0038c	e587b024	 str         r11, [r7, #0x24]

; 368  :         pCurTD->SetStatus(STATUS_WAIT_TRANSFER);
; 369  :         pCurTD->SetPacketSize(dwPacketSize);

  00390	e587902c	 str         r9, [r7, #0x2C]
  00394	e3130080	 tst         r3, #0x80
  00398	13a03002	 movne       r3, #2
  0039c	03a03003	 moveq       r3, #3
  003a0	e587300c	 str         r3, [r7, #0xC]
  003a4	e3a03001	 mov         r3, #1
  003a8	e5873028	 str         r3, [r7, #0x28]

; 370  :         if (pPrevTD) {

  003ac	e3560000	 cmp         r6, #0
  003b0	0a000003	 beq         |$LN5@AddTransfe|

; 371  :             pPrevTD->QueueNextTD(pCurTD);

  003b4	e1a01007	 mov         r1, r7
  003b8	e1a00006	 mov         r0, r6
  003bc	eb000000	 bl          |?QueueNextTD@CQTD@@QAAPAV1@PAV1@@Z|

; 372  :             pPrevTD=pCurTD;
; 373  :         }
; 374  :         else { // THis is First. So update m_pQTDList

  003c0	ea000000	 b           |$LN160@AddTransfe|
  003c4		 |$LN5@AddTransfe|

; 375  :             pPrevTD= m_pCQTDList = pCurTD;

  003c4	e5847068	 str         r7, [r4, #0x68]
  003c8		 |$LN160@AddTransfe|

; 376  :         }
; 377  :         m_pCPipe->GetQHead()->UnLock();

  003c8	e5940004	 ldr         r0, [r4, #4]
  003cc	e1a06007	 mov         r6, r7
  003d0	e5903000	 ldr         r3, [r0]
  003d4	e5933040	 ldr         r3, [r3, #0x40]
  003d8	e1a0e00f	 mov         lr, pc
  003dc	e12fff13	 bx          r3
  003e0		 |$LN159@AddTransfe|
  003e0	e280000c	 add         r0, r0, #0xC
  003e4	eb000000	 bl          LeaveCriticalSection
  003e8		 |$LN141@AddTransfe|

; 378  : 
; 379  :     } // end of else if 
; 380  :     // We have to append Status TD here.
; 381  :     if (pStatusTD) { // This is setup packet.

  003e8	e3550000	 cmp         r5, #0
  003ec	0a000012	 beq         |$LN157@AddTransfe|

; 382  :         m_pCPipe->GetQHead()->Lock();

  003f0	e5940004	 ldr         r0, [r4, #4]
  003f4	e5903000	 ldr         r3, [r0]
  003f8	e5933040	 ldr         r3, [r3, #0x40]
  003fc	e1a0e00f	 mov         lr, pc
  00400	e12fff13	 bx          r3
  00404	e280000c	 add         r0, r0, #0xC
  00408	eb000000	 bl          EnterCriticalSection

; 383  :         if (pPrevTD) {

  0040c	e3560000	 cmp         r6, #0
  00410	0a00000d	 beq         |$LN2@AddTransfe|

; 384  :             pPrevTD->QueueNextTD(pStatusTD);

  00414	e1a01005	 mov         r1, r5
  00418	e1a00006	 mov         r0, r6
  0041c	eb000000	 bl          |?QueueNextTD@CQTD@@QAAPAV1@PAV1@@Z|

; 394  :         }
; 395  :         m_pCPipe->GetQHead()->UnLock();

  00420	e5940004	 ldr         r0, [r4, #4]
  00424	e5903000	 ldr         r3, [r0]
  00428	e5933040	 ldr         r3, [r3, #0x40]
  0042c	e1a0e00f	 mov         lr, pc
  00430	e12fff13	 bx          r3
  00434	e280000c	 add         r0, r0, #0xC
  00438	eb000000	 bl          LeaveCriticalSection
  0043c		 |$LN157@AddTransfe|

; 396  :     };
; 397  :     return TRUE;    

  0043c	e3a00001	 mov         r0, #1
  00440		 |$LN23@AddTransfe|

; 398  : }

  00440	e28dd008	 add         sp, sp, #8
  00444	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00448	e12fff1e	 bx          lr
  0044c		 |$LN2@AddTransfe|

; 385  :             pPrevTD=pStatusTD;
; 386  :         }
; 387  :         else { // Something Wrong.
; 388  :             ASSERT(FALSE);
; 389  :             //delete pCurTD;
; 390  :             pStatusTD->~CQTD();
; 391  :             m_pCPipe->GetQHead()->UnLock();

  0044c	e5940004	 ldr         r0, [r4, #4]
  00450	e5903000	 ldr         r3, [r0]
  00454	e5933040	 ldr         r3, [r3, #0x40]
  00458	e1a0e00f	 mov         lr, pc
  0045c	e12fff13	 bx          r3
  00460	e280000c	 add         r0, r0, #0xC
  00464	eb000000	 bl          LeaveCriticalSection

; 392  :             delete pStatusTD;
; 393  :             return FALSE;

  00468	eaffff95	 b           |$LN161@AddTransfe|
  0046c		 |$M37566|

			 ENDP  ; |?AddTransfer@CQTransfer@@UAAHXZ|, CQTransfer::AddTransfer

	EXPORT	|?AbortTransfer@CQTransfer@@QAAHXZ|	; CQTransfer::AbortTransfer
	IMPORT	|Sleep|
	IMPORT	|?DeActiveTD@CQTD@@QAAXXZ|		; CQTD::DeActiveTD
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\ctd.h

  00000			 AREA	 |.pdata|, PDATA
|$T37595| DCD	|$LN15@AbortTrans|
	DCD	0x40001d01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\trans.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AbortTransfer@CQTransfer@@QAAHXZ| PROC ; CQTransfer::AbortTransfer

; 522  : {

  00000		 |$LN15@AbortTrans|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37592|
  00004	e1a05000	 mov         r5, r0

; 523  :     DEBUGMSG(ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("CQTransfer::AbortTransfer (this=0x%x,id=0x%x)\r\n"),this,m_dwTransferID));
; 524  :     CQTD * pCurTD = m_pCQTDList;
; 525  : 
; 526  :     m_pCPipe->GetQHead()->Lock();

  00008	e5950004	 ldr         r0, [r5, #4]
  0000c	e5954068	 ldr         r4, [r5, #0x68]
  00010	e5903000	 ldr         r3, [r0]
  00014	e5933040	 ldr         r3, [r3, #0x40]
  00018	e1a0e00f	 mov         lr, pc
  0001c	e12fff13	 bx          r3
  00020	e280000c	 add         r0, r0, #0xC
  00024	eb000000	 bl          EnterCriticalSection

; 527  :     while ( pCurTD!=NULL) {

  00028	e3540000	 cmp         r4, #0
  0002c	0a000004	 beq         |$LN1@AbortTrans|
  00030		 |$LL2@AbortTrans|

; 528  :         DEBUGMSG(ZONE_TRANSFER, (TEXT("AbortTransfer for pCurTD 0x%x\r\n"), pCurTD));
; 529  :         pCurTD->DeActiveTD();

  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          |?DeActiveTD@CQTD@@QAAXXZ|

; 530  :         pCurTD = pCurTD->GetNextTD();

  00038	e5943008	 ldr         r3, [r4, #8]
  0003c	e1b04003	 movs        r4, r3
  00040	1afffffa	 bne         |$LL2@AbortTrans|
  00044		 |$LN1@AbortTrans|

; 531  :     }
; 532  :     m_pCPipe->GetQHead()->UnLock();

  00044	e5950004	 ldr         r0, [r5, #4]
  00048	e5903000	 ldr         r3, [r0]
  0004c	e5933040	 ldr         r3, [r3, #0x40]
  00050	e1a0e00f	 mov         lr, pc
  00054	e12fff13	 bx          r3
  00058	e280000c	 add         r0, r0, #0xC
  0005c	eb000000	 bl          LeaveCriticalSection

; 533  : 
; 534  :     Sleep(2);// Make sure the shcdule has advanced. and current Transfer has completeded.

  00060	e3a00002	 mov         r0, #2
  00064	eb000000	 bl          Sleep

; 535  :     return TRUE;

  00068	e3a00001	 mov         r0, #1

; 536  : }

  0006c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$M37593|

			 ENDP  ; |?AbortTransfer@CQTransfer@@QAAHXZ|, CQTransfer::AbortTransfer

	EXPORT	|?ProcessResponse@CQTransfer@@QAAKKPAVCQTD@@@Z| ; CQTransfer::ProcessResponse
	EXPORT	|??_C@_1CI@CJFFIHPL@?$AAT?$AAx?$AA?5?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAa?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|?ReadDataIN@CQTD@@QAAKPAK@Z|		; CQTD::ReadDataIN
	IMPORT	|?ClearRxPktRdy@CQTD@@QAAXXZ|		; CQTD::ClearRxPktRdy
	IMPORT	|?CheckRxCSR@CHW@@QAAKE@Z|		; CHW::CheckRxCSR
	IMPORT	|?CheckTxCSR@CHW@@QAAKE@Z|		; CHW::CheckTxCSR
	IMPORT	|__rt_udiv|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\ctd.h

  00000			 AREA	 |.pdata|, PDATA
|$T37734| DCD	|$LN119@ProcessRes|
	DCD	0x40006b02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@CJFFIHPL@?$AAT?$AAx?$AA?5?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAa?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "E"
	DCB	0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\trans.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ProcessResponse@CQTransfer@@QAAKKPAVCQTD@@@Z| PROC ; CQTransfer::ProcessResponse

; 547  : {

  00000		 |$LN119@ProcessRes|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M37731|
  00008	e1a04002	 mov         r4, r2
  0000c	e3510000	 cmp         r1, #0
  00010	e1a06000	 mov         r6, r0

; 548  :     DWORD dwReturn = USB_NO_ERROR;

  00014	e3a05000	 mov         r5, #0

; 549  :     if (dwReason == STATUS_PROCESS_INTR)

  00018	1a00005c	 bne         |$LN39@ProcessRes|

; 550  :     {
; 551  :         // In case of TD_DATA_IN transaction, we have to 
; 552  :         // read the data from FIFO.
; 553  :         DWORD dwType = pCurTD->GetTDType();        

  0001c	e594300c	 ldr         r3, [r4, #0xC]

; 554  :         switch (dwType) {

  00020	e3530001	 cmp         r3, #1
  00024	0a000007	 beq         |$LN22@ProcessRes|
  00028	e3530002	 cmp         r3, #2
  0002c	0a00003f	 beq         |$LN36@ProcessRes|
  00030	e3530003	 cmp         r3, #3
  00034	0a00001d	 beq         |$LN16@ProcessRes|
  00038	e3530004	 cmp         r3, #4
  0003c	0a00000e	 beq         |$LN7@ProcessRes|
  00040	e3530005	 cmp         r3, #5
  00044	1a000053	 bne         |$LN112@ProcessRes|
  00048		 |$LN22@ProcessRes|

; 592  : 
; 593  :             case TD_STATUS_OUT:
; 594  :             case TD_SETUP:                    
; 595  :                 {
; 596  :                     // Need to check the result here
; 597  :                     dwReturn = m_pCPipe->m_pCMhcd->CheckTxCSR(m_pCPipe->GetMappedEndPoint());

  00048	e5963004	 ldr         r3, [r6, #4]
  0004c	e5d31058	 ldrb        r1, [r3, #0x58]
  00050	e593000c	 ldr         r0, [r3, #0xC]
  00054	eb000000	 bl          |?CheckTxCSR@CHW@@QAAKE@Z|
  00058	e1b05000	 movs        r5, r0

; 598  :                     if (dwReturn == USB_NO_ERROR)

  0005c	1a000027	 bne         |$LN15@ProcessRes|

; 599  :                     {
; 600  :                         pCurTD->SetTotTfrSize(pCurTD->GetCurTfrSize() + pCurTD->GetTotTfrSize());

  00060	e5942020	 ldr         r2, [r4, #0x20]
  00064	e594301c	 ldr         r3, [r4, #0x1C]

; 601  :                         pCurTD->SetStatus(STATUS_COMPLETE);                    

  00068	e3a01011	 mov         r1, #0x11
  0006c	e5841028	 str         r1, [r4, #0x28]
  00070	e0823003	 add         r3, r2, r3
  00074	e584301c	 str         r3, [r4, #0x1C]
  00078	ea000046	 b           |$LN112@ProcessRes|
  0007c		 |$LN7@ProcessRes|

; 640  :                     {
; 641  :                         DEBUGMSG(ZONE_ERROR, (TEXT("Device not responding\r\n")));
; 642  :                         pCurTD->SetStatus(STATUS_ERROR);
; 643  :                     }
; 644  :                 }
; 645  :                 break;
; 646  : 
; 647  :             case TD_STATUS_IN:                    
; 648  :                 {
; 649  :                     dwReturn = m_pCPipe->m_pCMhcd->CheckRxCSR(m_pCPipe->GetMappedEndPoint());

  0007c	e5963004	 ldr         r3, [r6, #4]
  00080	e5d31058	 ldrb        r1, [r3, #0x58]
  00084	e593000c	 ldr         r0, [r3, #0xC]
  00088	eb000000	 bl          |?CheckRxCSR@CHW@@QAAKE@Z|
  0008c	e1a05000	 mov         r5, r0

; 650  :                     pCurTD->ClearRxPktRdy();

  00090	e1a00004	 mov         r0, r4
  00094	eb000000	 bl          |?ClearRxPktRdy@CQTD@@QAAXXZ|

; 651  :                     if (dwReturn == USB_NO_ERROR)

  00098	e3550000	 cmp         r5, #0

; 652  :                         pCurTD->SetStatus(STATUS_COMPLETE);                    

  0009c	0a00003b	 beq         |$LN39@ProcessRes|

; 653  :                     else if (dwReturn == USB_STALL_ERROR)

  000a0	e3550004	 cmp         r5, #4
  000a4	1a00001f	 bne         |$LN4@ProcessRes|
  000a8		 |$LN115@ProcessRes|

; 654  :                         pCurTD->SetStatus(STATUS_HALT);

  000a8	e3a0300d	 mov         r3, #0xD

; 655  :                     else

  000ac	ea000038	 b           |$LN114@ProcessRes|
  000b0		 |$LN16@ProcessRes|

; 602  :                     }
; 603  :                     else if (dwReturn == USB_STALL_ERROR)
; 604  :                     {
; 605  :                         RETAILMSG(1, (TEXT("Tx Stall at EP %d\r\n"), m_pCPipe->GetMappedEndPoint()));
; 606  :                         pCurTD->SetStatus(STATUS_HALT);
; 607  :                     }
; 608  :                     else if (dwReturn == USB_DEVICE_NOT_RESPONDING_ERROR)
; 609  :                     {
; 610  :                         DEBUGMSG(ZONE_ERROR, (TEXT("Device not responding\r\n")));
; 611  :                         pCurTD->SetStatus(STATUS_ERROR);
; 612  :                     }
; 613  :                 }
; 614  :                 break;
; 615  : 
; 616  :             case TD_DATA_OUT:
; 617  :                 {
; 618  :                     // Need to check the result here
; 619  :                     dwReturn = m_pCPipe->m_pCMhcd->CheckTxCSR(m_pCPipe->GetMappedEndPoint());

  000b0	e5963004	 ldr         r3, [r6, #4]
  000b4	e5d31058	 ldrb        r1, [r3, #0x58]
  000b8	e593000c	 ldr         r0, [r3, #0xC]
  000bc	eb000000	 bl          |?CheckTxCSR@CHW@@QAAKE@Z|
  000c0	e1b05000	 movs        r5, r0

; 620  :                     if (dwReturn == USB_NO_ERROR)

  000c4	1a00000d	 bne         |$LN15@ProcessRes|

; 621  :                     {
; 622  :                         DWORD dwTfrSize = pCurTD->GetCurTfrSize();                    
; 623  :                         pCurTD->SetTotTfrSize(pCurTD->GetCurTfrSize() + pCurTD->GetTotTfrSize());

  000c8	e5942020	 ldr         r2, [r4, #0x20]
  000cc	e594301c	 ldr         r3, [r4, #0x1C]

; 624  :                         if ((dwTfrSize%pCurTD->GetPacketSize() != 0)  || 
; 625  :                                 (pCurTD->GetTotTfrSize() >= pCurTD->GetDataSize()))                                               

  000d0	e594002c	 ldr         r0, [r4, #0x2C]
  000d4	e1a01002	 mov         r1, r2
  000d8	e0826003	 add         r6, r2, r3
  000dc	e584601c	 str         r6, [r4, #0x1C]
  000e0	eb000000	 bl          __rt_udiv
  000e4	e3510000	 cmp         r1, #0
  000e8	1a000028	 bne         |$LN39@ProcessRes|
  000ec	e5943018	 ldr         r3, [r4, #0x18]
  000f0	e1560003	 cmp         r6, r3
  000f4	2a000025	 bcs         |$LN39@ProcessRes|

; 626  :                             pCurTD->SetStatus(STATUS_COMPLETE);
; 627  :                         else
; 628  :                         {
; 629  :                             pCurTD->SetStatus(STATUS_SEND_MORE_DATA);

  000f8	e3a03005	 mov         r3, #5
  000fc	ea000024	 b           |$LN114@ProcessRes|
  00100		 |$LN15@ProcessRes|

; 630  :                         }
; 631  :                         DEBUGMSG(ZONE_TRANSFER, (TEXT("ACK Data OUT ep %d, size %d, status %d\r\n"),
; 632  :                                 m_pCPipe->GetMappedEndPoint(), dwTfrSize, pCurTD->GetStatus()));
; 633  :                     }
; 634  :                     else if (dwReturn == USB_STALL_ERROR)

  00100	e3550004	 cmp         r5, #4
  00104	1a000005	 bne         |$LN10@ProcessRes|

; 635  :                     {
; 636  :                         RETAILMSG(1, (TEXT("Tx Stall at EP %d\r\n"), m_pCPipe->GetMappedEndPoint()));

  00108	e5963004	 ldr         r3, [r6, #4]
  0010c	e59f0094	 ldr         r0, [pc, #0x94]
  00110	e5d31058	 ldrb        r1, [r3, #0x58]
  00114	eb000000	 bl          NKDbgPrintfW

; 654  :                         pCurTD->SetStatus(STATUS_HALT);

  00118	e3a0300d	 mov         r3, #0xD

; 655  :                     else

  0011c	ea00001c	 b           |$LN114@ProcessRes|
  00120		 |$LN10@ProcessRes|

; 637  :                         pCurTD->SetStatus(STATUS_HALT);
; 638  :                     }
; 639  :                     else if (dwReturn == USB_DEVICE_NOT_RESPONDING_ERROR)

  00120	e3550005	 cmp         r5, #5
  00124	1a00001b	 bne         |$LN112@ProcessRes|
  00128		 |$LN4@ProcessRes|

; 656  :                         pCurTD->SetStatus(STATUS_ERROR);

  00128	e3a0300f	 mov         r3, #0xF

; 657  :                 }
; 658  :                 break;

  0012c	ea000018	 b           |$LN114@ProcessRes|
  00130		 |$LN36@ProcessRes|

; 555  :             case TD_DATA_IN:                
; 556  :                 {
; 557  :                     DWORD dwMore = MUSB_READ_SUCCESS;

  00130	e3a03000	 mov         r3, #0

; 558  :                     // Read the data into the pCurTD.                    
; 559  :                     dwReturn = pCurTD->ReadDataIN(&dwMore);

  00134	e28d1000	 add         r1, sp, #0
  00138	e1a00004	 mov         r0, r4
  0013c	e58d3000	 str         r3, [sp]
  00140	eb000000	 bl          |?ReadDataIN@CQTD@@QAAKPAK@Z|
  00144	e1b05000	 movs        r5, r0

; 560  : 
; 561  :                     if (dwReturn == USB_NO_ERROR)

  00148	1a00000a	 bne         |$LN35@ProcessRes|

; 562  :                     {
; 563  :                         if (dwMore == MUSB_READ_MORE_DATA)

  0014c	e59d3000	 ldr         r3, [sp]
  00150	e3530001	 cmp         r3, #1

; 564  :                             pCurTD->SetStatus(STATUS_WAIT_MORE_DATA);

  00154	03a03004	 moveq       r3, #4
  00158	0a00000d	 beq         |$LN114@ProcessRes|

; 565  :                         else if (dwMore == MUSB_READ_SUCCESS)

  0015c	e3530000	 cmp         r3, #0
  00160	1a00000c	 bne         |$LN112@ProcessRes|

; 566  :                         {
; 567  :                             if (pCurTD->GetError() & ERR_BUFFER_ERROR)                                                           

  00164	e5943034	 ldr         r3, [r4, #0x34]
  00168	e3130001	 tst         r3, #1
  0016c	0a000007	 beq         |$LN39@ProcessRes|

; 568  :                                 pCurTD->SetStatus(STATUS_NOT_ENOUGH_BUFFER);

  00170	e3a03010	 mov         r3, #0x10

; 569  :                             else

  00174	ea000006	 b           |$LN114@ProcessRes|
  00178		 |$LN35@ProcessRes|

; 570  :                                 pCurTD->SetStatus(STATUS_COMPLETE);
; 571  :                         }
; 572  :                         else if (dwMore == MUSB_WAIT_DMA_COMPLETE)
; 573  :                             DEBUGMSG(ZONE_HCD, (TEXT("Wait DMA Complete\r\n")));
; 574  :                     }
; 575  :                     else if (dwReturn == USB_STALL_ERROR)

  00178	e3550004	 cmp         r5, #4

; 576  :                     {
; 577  :                         DEBUGMSG(ZONE_ERROR, (TEXT("Endpoint halt\r\n")));
; 578  :                         pCurTD->SetStatus(STATUS_HALT);

  0017c	0affffc9	 beq         |$LN115@ProcessRes|

; 579  :                     }
; 580  :                     else if (dwReturn == USB_DEVICE_NOT_RESPONDING_ERROR)

  00180	e3550005	 cmp         r5, #5

; 581  :                     {
; 582  :                         DEBUGMSG(ZONE_ERROR, (TEXT("Device not responding\r\n")));
; 583  :                         pCurTD->SetStatus(STATUS_ERROR);
; 584  :                     }
; 585  :                     else

  00184	0affffe7	 beq         |$LN4@ProcessRes|

; 586  :                     {
; 587  :                         DEBUGMSG(ZONE_TRANSFER, (TEXT("ReadDataIn return 0x%x\r\n"), dwReturn));
; 588  :                         pCurTD->SetStatus(STATUS_WAIT_RESPONSE);

  00188	e3a03003	 mov         r3, #3

; 589  :                     }
; 590  :                 }                
; 591  :                 break;

  0018c	ea000000	 b           |$LN114@ProcessRes|
  00190		 |$LN39@ProcessRes|

; 659  :             default:
; 660  :                 break;
; 661  :             }
; 662  :     }
; 663  :     else // Reason for call
; 664  :         pCurTD->SetStatus(STATUS_COMPLETE); // Jeffrey: need to check here            

  00190	e3a03011	 mov         r3, #0x11
  00194		 |$LN114@ProcessRes|
  00194	e5843028	 str         r3, [r4, #0x28]
  00198		 |$LN112@ProcessRes|

; 665  : 
; 666  :     return dwReturn;
; 667  : }

  00198	e1a00005	 mov         r0, r5
  0019c	e28dd004	 add         sp, sp, #4
  001a0	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  001a4	e12fff1e	 bx          lr
  001a8		 |$LN120@ProcessRes|
  001a8		 |$LN121@ProcessRes|
  001a8	00000000	 DCD         |??_C@_1CI@CJFFIHPL@?$AAT?$AAx?$AA?5?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAa?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  001ac		 |$M37732|

			 ENDP  ; |?ProcessResponse@CQTransfer@@QAAKKPAVCQTD@@@Z|, CQTransfer::ProcessResponse

	EXPORT	|?ProcessEP@CQTransfer@@QAAHKH@Z|	; CQTransfer::ProcessEP
	EXPORT	|??_C@_1HE@JPLJFMLK@?$AAT?$AAh?$AAi?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@KBIGIHKK@?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAh?$AAe?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|?DumpRxCSR@CHW@@QAAXE@Z|		; CHW::DumpRxCSR
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\ctd.h

  00000			 AREA	 |.pdata|, PDATA
|$T37788| DCD	|$LN39@ProcessEP|
	DCD	0x40005501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@JPLJFMLK@?$AAT?$AAh?$AAi?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAa@| DCB "T"
	DCB	0x0, "h", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "i", 0x0, "s"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "m", 0x0, "a", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "d"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, " ", 0x0, "b", 0x0, "y"
	DCB	0x0, " ", 0x0, "d", 0x0, "u", 0x0, "m", 0x0, "p", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, " ", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "u", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@KBIGIHKK@?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAh?$AAe?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g", 0x0, " ", 0x0, "h"
	DCB	0x0, "e", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\trans.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ProcessEP@CQTransfer@@QAAHKH@Z| PROC	; CQTransfer::ProcessEP

; 677  : {

  00000		 |$LN39@ProcessEP|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M37785|
  00004	e1a04002	 mov         r4, r2
  00008	e1a07001	 mov         r7, r1
  0000c	e1a06000	 mov         r6, r0

; 678  :     if (m_pCQTDList==NULL) { // Has been created. Somthing wrong.

  00010	e5963068	 ldr         r3, [r6, #0x68]
  00014	e1b05003	 movs        r5, r3

; 679  :         DEBUGMSG(ZONE_ERROR, (TEXT("CQTransfer::ProcessEP:m_pCQTDList == NULL\r\n")));
; 680  :         return TRUE;

  00018	0a000045	 beq         |$LN36@ProcessEP|

; 681  :     }
; 682  :     CQTD * pCurTD = m_pCQTDList;
; 683  :     DWORD dwReturn = USB_NO_ERROR;    
; 684  :     m_pCPipe->GetQHead()->Lock();

  0001c	e5960004	 ldr         r0, [r6, #4]
  00020	e3a08000	 mov         r8, #0
  00024	e5903000	 ldr         r3, [r0]
  00028	e5933040	 ldr         r3, [r3, #0x40]
  0002c	e1a0e00f	 mov         lr, pc
  00030	e12fff13	 bx          r3
  00034	e280000c	 add         r0, r0, #0xC
  00038	eb000000	 bl          EnterCriticalSection

; 685  :     // Find back the current working one.
; 686  :     while (pCurTD!=NULL) {

  0003c	e3550000	 cmp         r5, #0
  00040	0a000032	 beq         |$LN9@ProcessEP|
  00044		 |$LL10@ProcessEP|

; 687  :         ASSERT(pCurTD->m_pTrans == this);
; 688  :         DWORD dwStatus = pCurTD->GetStatus();

  00044	e5953028	 ldr         r3, [r5, #0x28]

; 689  :         // Condition:
; 690  :         // (1) Status = STATUS_WAIT_RESPONSE & Interrupt NOT from DMA 
; 691  :         // (2) Status = STATUS_WAIT_DMA_0_RD_FIFO_COMPLETE & Interrupt from DMA
; 692  :         // (3) Status = STATUS_WAIT_DMA_1_RD_FIFO_COMPLETE & Interrupt from DMA
; 693  :         // (4) Status = STATUS_WAIT_DMA_WR_2_FIFO_TXPKT_RDY & Interrupt from DMA
; 694  :         DEBUGMSG(ZONE_TRANSFER, (TEXT("CQTransfer::ProcessEP status (0x%x), isDMAIntr(%d)\r\n"),
; 695  :             dwStatus, isDMAIntr));
; 696  :         if (((dwStatus == STATUS_WAIT_RESPONSE) && (isDMAIntr == FALSE)) ||
; 697  :             (((dwStatus == STATUS_WAIT_DMA_0_RD_FIFO_COMPLETE)|| (dwStatus == STATUS_WAIT_DMA_1_RD_FIFO_COMPLETE)) &&
; 698  :                 (isDMAIntr == TRUE)) ||                
; 699  :             ((dwStatus == STATUS_WAIT_DMA_WR_2_FIFO_TXPKT_RDY) && (isDMAIntr == TRUE)))

  00048	e3530003	 cmp         r3, #3
  0004c	1a000001	 bne         |$LN6@ProcessEP|
  00050	e3540000	 cmp         r4, #0
  00054	0a000028	 beq         |$LN7@ProcessEP|
  00058		 |$LN6@ProcessEP|
  00058	e353000a	 cmp         r3, #0xA
  0005c	0a000001	 beq         |$LN4@ProcessEP|
  00060	e353000b	 cmp         r3, #0xB
  00064	1a000001	 bne         |$LN5@ProcessEP|
  00068		 |$LN4@ProcessEP|
  00068	e3540001	 cmp         r4, #1
  0006c	0a000022	 beq         |$LN7@ProcessEP|
  00070		 |$LN5@ProcessEP|
  00070	e3530008	 cmp         r3, #8
  00074	1a000001	 bne         |$LN8@ProcessEP|
  00078	e3540001	 cmp         r4, #1
  0007c	0a00001e	 beq         |$LN7@ProcessEP|
  00080		 |$LN8@ProcessEP|

; 702  :             break;
; 703  :         }
; 704  : 
; 705  :         if (((dwStatus == STATUS_WAIT_DMA_WR_RESPONSE)||(dwStatus == STATUS_WAIT_DMA_WR_2_FIFO_TXPKT_NOTRDY)) && isDMAIntr)

  00080	e3530007	 cmp         r3, #7
  00084	0a000001	 beq         |$LN2@ProcessEP|
  00088	e3530009	 cmp         r3, #9
  0008c	1a000001	 bne         |$LN3@ProcessEP|
  00090		 |$LN2@ProcessEP|
  00090	e3540000	 cmp         r4, #0
  00094	1a00000f	 bne         |$LN34@ProcessEP|
  00098		 |$LN3@ProcessEP|

; 709  :         }
; 710  : 
; 711  :         // Abnormal receive of EP interrupt
; 712  :         if ((dwStatus == STATUS_WAIT_DMA_1_RD_FIFO_COMPLETE) && (isDMAIntr == 0))

  00098	e353000b	 cmp         r3, #0xB
  0009c	1a000009	 bne         |$LN17@ProcessEP|
  000a0	e3540000	 cmp         r4, #0
  000a4	1a000007	 bne         |$LN17@ProcessEP|

; 713  :         {
; 714  :             RETAILMSG(1, (TEXT("This is to read the remaining data by dumping the value\r\n")));

  000a8	e59f00a0	 ldr         r0, [pc, #0xA0]
  000ac	eb000000	 bl          NKDbgPrintfW

; 715  :             m_pCPipe->m_pCMhcd->DumpRxCSR(m_pCPipe->GetMappedEndPoint());

  000b0	e5963004	 ldr         r3, [r6, #4]
  000b4	e5d31058	 ldrb        r1, [r3, #0x58]
  000b8	e593000c	 ldr         r0, [r3, #0xC]
  000bc	eb000000	 bl          |?DumpRxCSR@CHW@@QAAXE@Z|

; 716  :             RETAILMSG(1, (TEXT("Debug here\r\n")));

  000c0	e59f0084	 ldr         r0, [pc, #0x84]
  000c4	eb000000	 bl          NKDbgPrintfW
  000c8		 |$LN17@ProcessEP|

; 717  :         }
; 718  :         pCurTD = pCurTD ->GetNextTD();

  000c8	e5953008	 ldr         r3, [r5, #8]
  000cc	e1b05003	 movs        r5, r3
  000d0	1affffdb	 bne         |$LL10@ProcessEP|

; 702  :             break;
; 703  :         }
; 704  : 
; 705  :         if (((dwStatus == STATUS_WAIT_DMA_WR_RESPONSE)||(dwStatus == STATUS_WAIT_DMA_WR_2_FIFO_TXPKT_NOTRDY)) && isDMAIntr)

  000d4	ea00000d	 b           |$LN9@ProcessEP|
  000d8		 |$LN34@ProcessEP|

; 706  :         {                
; 707  :             m_pCPipe->m_pCMhcd->SendOutDMA(m_pCPipe->GetMappedEndPoint(),pCurTD);

  000d8	e5963004	 ldr         r3, [r6, #4]
  000dc	e1a02005	 mov         r2, r5
  000e0	e593000c	 ldr         r0, [r3, #0xC]
  000e4	e5d31058	 ldrb        r1, [r3, #0x58]
  000e8	e5903000	 ldr         r3, [r0]
  000ec	e5933054	 ldr         r3, [r3, #0x54]
  000f0	e1a0e00f	 mov         lr, pc
  000f4	e12fff13	 bx          r3

; 708  :             break;

  000f8	ea000004	 b           |$LN9@ProcessEP|
  000fc		 |$LN7@ProcessEP|

; 700  :         {
; 701  :             dwReturn = ProcessResponse(dwReason, pCurTD);

  000fc	e1a02005	 mov         r2, r5
  00100	e1a01007	 mov         r1, r7
  00104	e1a00006	 mov         r0, r6
  00108	eb000000	 bl          |?ProcessResponse@CQTransfer@@QAAKKPAVCQTD@@@Z|
  0010c	e1a08000	 mov         r8, r0
  00110		 |$LN9@ProcessEP|

; 719  :     }
; 720  :     m_pCPipe->GetQHead()->UnLock();

  00110	e5960004	 ldr         r0, [r6, #4]
  00114	e5903000	 ldr         r3, [r0]
  00118	e5933040	 ldr         r3, [r3, #0x40]
  0011c	e1a0e00f	 mov         lr, pc
  00120	e12fff13	 bx          r3
  00124	e280000c	 add         r0, r0, #0xC
  00128	eb000000	 bl          LeaveCriticalSection

; 721  : 
; 722  :     //DEBUGMSG(ZONE_HCD, (TEXT("CQTransfer:ProcessEP return %s\r\n"), ((dwReturn == USB_NO_ERROR)?TEXT("TRUE"):TEXT("FALSE"))));
; 723  :     return ((dwReturn == USB_NO_ERROR)? TRUE: FALSE);

  0012c	e3580000	 cmp         r8, #0
  00130	1a000002	 bne         |$LN18@ProcessEP|
  00134		 |$LN36@ProcessEP|
  00134	e3a00001	 mov         r0, #1

; 724  : }

  00138	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0013c	e12fff1e	 bx          lr
  00140		 |$LN18@ProcessEP|

; 721  : 
; 722  :     //DEBUGMSG(ZONE_HCD, (TEXT("CQTransfer:ProcessEP return %s\r\n"), ((dwReturn == USB_NO_ERROR)?TEXT("TRUE"):TEXT("FALSE"))));
; 723  :     return ((dwReturn == USB_NO_ERROR)? TRUE: FALSE);

  00140	e3a00000	 mov         r0, #0

; 724  : }

  00144	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00148	e12fff1e	 bx          lr
  0014c		 |$LN40@ProcessEP|
  0014c		 |$LN41@ProcessEP|
  0014c	00000000	 DCD         |??_C@_1BK@KBIGIHKK@?$AAD?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAh?$AAe?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00150		 |$LN42@ProcessEP|
  00150	00000000	 DCD         |??_C@_1HE@JPLJFMLK@?$AAT?$AAh?$AAi?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAa@|
  00154		 |$M37786|

			 ENDP  ; |?ProcessEP@CQTransfer@@QAAHKH@Z|, CQTransfer::ProcessEP

	EXPORT	|?IsTransferDone@CQTransfer@@QAAHXZ|	; CQTransfer::IsTransferDone
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\ctd.h

  00000			 AREA	 |.pdata|, PDATA
|$T37826| DCD	|$LN24@IsTransfer|
	DCD	0x40002b01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\trans.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsTransferDone@CQTransfer@@QAAHXZ| PROC ; CQTransfer::IsTransferDone

; 734  : {

  00000		 |$LN24@IsTransfer|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M37823|
  00004	e1a06000	 mov         r6, r0

; 735  :     DEBUGMSG(ZONE_TRANSFER, (TEXT("CQTransfer::IsTransferDone (this=0x%x,id=0x%x)\r\n"),this,m_dwTransferID));
; 736  :     if (m_pCQTDList==NULL) { // Has been created. Somthing wrong.

  00008	e5963068	 ldr         r3, [r6, #0x68]

; 737  :         return TRUE;

  0000c	e3a04001	 mov         r4, #1
  00010	e1b05003	 movs        r5, r3
  00014	0a000021	 beq         |$LN8@IsTransfer|

; 738  :     }
; 739  :     CQTD * pCurTD = m_pCQTDList;
; 740  :     BOOL bReturn=TRUE;
; 741  : 
; 742  :     DEBUGMSG(ZONE_TRANSFER, (TEXT("IsTransferDone:pCurTD = 0x%x\r\n"),pCurTD));
; 743  :     m_pCPipe->GetQHead()->Lock();

  00018	e5960004	 ldr         r0, [r6, #4]
  0001c	e5903000	 ldr         r3, [r0]
  00020	e5933040	 ldr         r3, [r3, #0x40]
  00024	e1a0e00f	 mov         lr, pc
  00028	e12fff13	 bx          r3
  0002c	e280000c	 add         r0, r0, #0xC
  00030	eb000000	 bl          EnterCriticalSection

; 744  :     while ( pCurTD!=NULL) {

  00034	e3550000	 cmp         r5, #0
  00038	0a000011	 beq         |$LN3@IsTransfer|
  0003c		 |$LL6@IsTransfer|

; 745  :         ASSERT(pCurTD->m_pTrans == this);
; 746  :         DWORD dwStatus = pCurTD->GetStatus();

  0003c	e5953028	 ldr         r3, [r5, #0x28]

; 747  :         DEBUGMSG(ZONE_TRANSFER, (TEXT("pCurTD(0x%x) return status = %d\r\n"), pCurTD, dwStatus));
; 748  :         if (dwStatus == STATUS_HALT || dwStatus == STATUS_ABORT || dwStatus == STATUS_ERROR) { // This Transfer Has been halted due to error.            

  00040	e353000d	 cmp         r3, #0xD
  00044	0a00000e	 beq         |$LN3@IsTransfer|
  00048	e353000e	 cmp         r3, #0xE
  0004c	0a00000c	 beq         |$LN3@IsTransfer|
  00050	e353000f	 cmp         r3, #0xF
  00054	0a00000a	 beq         |$LN3@IsTransfer|

; 749  :             DEBUGMSG(ZONE_TRANSFER, (TEXT("IsTransferDone with error = %d\r\n"), dwStatus));
; 750  :             break;
; 751  :         }
; 752  :         if (dwStatus == STATUS_WAIT_TRANSFER || ((dwStatus > STATUS_ACTIVE_START) && (dwStatus < STATUS_ACTIVE_END))) { 

  00058	e3530001	 cmp         r3, #1
  0005c	0a000007	 beq         |$LN20@IsTransfer|
  00060	e3530002	 cmp         r3, #2
  00064	9a000001	 bls         |$LN2@IsTransfer|
  00068	e353000c	 cmp         r3, #0xC
  0006c	3a000003	 bcc         |$LN20@IsTransfer|
  00070		 |$LN2@IsTransfer|

; 754  :             break;
; 755  :         }
; 756  :         pCurTD = pCurTD ->GetNextTD();

  00070	e5953008	 ldr         r3, [r5, #8]
  00074	e1b05003	 movs        r5, r3
  00078	1affffef	 bne         |$LL6@IsTransfer|

; 749  :             DEBUGMSG(ZONE_TRANSFER, (TEXT("IsTransferDone with error = %d\r\n"), dwStatus));
; 750  :             break;
; 751  :         }
; 752  :         if (dwStatus == STATUS_WAIT_TRANSFER || ((dwStatus > STATUS_ACTIVE_START) && (dwStatus < STATUS_ACTIVE_END))) { 

  0007c	ea000000	 b           |$LN3@IsTransfer|
  00080		 |$LN20@IsTransfer|

; 753  :             bReturn = FALSE;

  00080	e3a04000	 mov         r4, #0
  00084		 |$LN3@IsTransfer|

; 757  :     }
; 758  :     m_pCPipe->GetQHead()->UnLock();

  00084	e5960004	 ldr         r0, [r6, #4]
  00088	e5903000	 ldr         r3, [r0]
  0008c	e5933040	 ldr         r3, [r3, #0x40]
  00090	e1a0e00f	 mov         lr, pc
  00094	e12fff13	 bx          r3
  00098	e280000c	 add         r0, r0, #0xC
  0009c	eb000000	 bl          LeaveCriticalSection

; 759  : 
; 760  :     DEBUGMSG(ZONE_TRANSFER, (TEXT("CQTransfer::IsTransferDone (this=0x%x) return %d \r\n"),this,bReturn));
; 761  :     return bReturn;

  000a0		 |$LN8@IsTransfer|

; 762  : }

  000a0	e1a00004	 mov         r0, r4
  000a4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$M37824|

			 ENDP  ; |?IsTransferDone@CQTransfer@@QAAHXZ|, CQTransfer::IsTransferDone


  00000			 AREA	 |.pdata|, PDATA
|$T37837| DCD	|$LN6@scalar@2|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCTransfer@@UAAPAXI@Z| PROC	; CTransfer::`scalar deleting destructor'
  00000		 |$LN6@scalar@2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37834|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??1CTransfer@@UAA@XZ|
  00010	e3140001	 tst         r4, #1
  00014	11a00005	 movne       r0, r5
  00018	1b000000	 blne        |??3@YAXPAX@Z|
  0001c	e1a00005	 mov         r0, r5
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M37835|

			 ENDP  ; |??_GCTransfer@@UAAPAXI@Z|, CTransfer::`scalar deleting destructor'

	EXPORT	|??1CQTransfer@@UAA@XZ|			; CQTransfer::~CQTransfer
	EXPORT	|??_7CQTransfer@@6B@| [ DATA ]		; CQTransfer::`vftable'
	IMPORT	|??_ECQTransfer@@UAAPAXI@Z|, WEAK |??_GCQTransfer@@UAAPAXI@Z| ; CQTransfer::`vector deleting destructor', CQTransfer::`scalar deleting destructor'
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\ctd.h

  00000			 AREA	 |.pdata|, PDATA
|$T37875| DCD	|$LN23@CQTransfer|
	DCD	0x40001101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CQTransfer@@6B@| DCD |??_ECQTransfer@@UAAPAXI@Z|	; CQTransfer::`vftable'
	DCD	|?Init@CTransfer@@UAAHXZ|
	DCD	|?AddTransfer@CQTransfer@@UAAHXZ|
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\trans.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CQTransfer@@UAA@XZ| PROC		; CQTransfer::~CQTransfer

; 247  : {    

  00000		 |$LN23@CQTransfer|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37872|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3030	 ldr         r3, [pc, #0x30]

; 248  :     CQTD * pCurTD = m_pCQTDList;

  0000c	e5942068	 ldr         r2, [r4, #0x68]
  00010	e5843000	 str         r3, [r4]
  00014	e1b05002	 movs        r5, r2

; 249  :     while (pCurTD!=NULL) {

  00018	0a000004	 beq         |$LN1@CQTransfer|
  0001c		 |$LL2@CQTransfer|

; 250  :          CQTD * pNextTD = pCurTD->GetNextTD();
; 251  :          pCurTD->~CQTD();         
; 252  :          delete pCurTD;

  0001c	e1a00005	 mov         r0, r5
  00020	e5955008	 ldr         r5, [r5, #8]
  00024	eb000000	 bl          |??3@YAXPAX@Z|

; 253  :          pCurTD = pNextTD;

  00028	e3550000	 cmp         r5, #0
  0002c	1afffffa	 bne         |$LL2@CQTransfer|
  00030		 |$LN1@CQTransfer|

; 254  :     }
; 255  : }

  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          |??1CTransfer@@UAA@XZ|
  00038	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN24@CQTransfer|
  00040		 |$LN25@CQTransfer|
  00040	00000000	 DCD         |??_7CQTransfer@@6B@|
  00044		 |$M37873|

			 ENDP  ; |??1CQTransfer@@UAA@XZ|, CQTransfer::~CQTransfer

	EXPORT	|?DoneTransfer@CQTransfer@@QAAHXZ|	; CQTransfer::DoneTransfer
	IMPORT	|?ReleasePhysicalEndPoint@CHW@@QAAHPAVCPipe@@HH@Z| ; CHW::ReleasePhysicalEndPoint
	IMPORT	|?ReleaseDMAChannel@CHW@@QAAHPAVCPipe@@E@Z| ; CHW::ReleaseDMAChannel
	IMPORT	|?DeviceInfo2Channel@CHW@@QAAEPAVCPipe@@@Z| ; CHW::DeviceInfo2Channel
	IMPORT	|?SetDataToggle@CPipe@@QAAXE@Z|		; CPipe::SetDataToggle
	IMPORT	|?GetCurrentToggleBit@CHW@@QAAEEE@Z|	; CHW::GetCurrentToggleBit
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\ctd.h

  00000			 AREA	 |.pdata|, PDATA
|$T37960| DCD	|$LN78@DoneTransf|
	DCD	0xc000a005

  00000			 AREA	 |.pdata|, PDATA
|$T37962| DCD	|$LN44@DoneTransf|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T37964| DCD	|$LN37@DoneTransf|
	DCD	0x40000301

  00000			 AREA	 |.xdata|, DATA
|$T37958| DCD	0x2
	DCD	|$LN48@DoneTransf|
	DCD	|$LN49@DoneTransf|
	DCD	|$LN44@DoneTransf|
	DCD	|$LN45@DoneTransf|
	DCD	|$LN41@DoneTransf|
	DCD	|$LN42@DoneTransf|
	DCD	|$LN37@DoneTransf|
	DCD	|$LN38@DoneTransf|
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\musb\musbhcd\musbmhdrc\trans.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T37958|

  00008		 |?DoneTransfer@CQTransfer@@QAAHXZ| PROC ; CQTransfer::DoneTransfer

; 409  : {

  00008		 |$LN78@DoneTransf|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0001	 stmdb       sp!, {r0}
  00010	e92d58f0	 stmdb       sp!, {r4 - r7, r11, r12, lr}
  00014	e28db01c	 add         r11, sp, #0x1C
  00018	e24dd008	 sub         sp, sp, #8
  0001c		 |$LN76@DoneTransf|
  0001c	e1a05000	 mov         r5, r0
  00020	e58b5000	 str         r5, [r11]

; 410  :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("CQTransfer::DoneTransfer (this=0x%x,id=0x%x)\r\n"),this,m_dwTransferID));
; 411  :     BOOL bIsTransDone = IsTransferDone();

  00024	eb000000	 bl          |?IsTransferDone@CQTransfer@@QAAHXZ|
  00028	e3500000	 cmp         r0, #0

; 412  :     ASSERT(bIsTransDone == TRUE);
; 413  :     if (bIsTransDone) {

  0002c	0a000091	 beq         |$LN29@DoneTransf|

; 414  :         DWORD dwUsbError = USB_NO_ERROR;
; 415  :         DWORD dwDataTransferred = 0;        
; 416  :         CQTD * pCurTD = m_pCQTDList;
; 417  :         m_pCPipe->GetQHead()->Lock();

  00030	e5950004	 ldr         r0, [r5, #4]
  00034	e3a04000	 mov         r4, #0
  00038	e3a07000	 mov         r7, #0
  0003c	e5903000	 ldr         r3, [r0]
  00040	e5933040	 ldr         r3, [r3, #0x40]
  00044	e5956068	 ldr         r6, [r5, #0x68]
  00048	e50b4024	 str         r4, [r11, #-0x24]
  0004c	e50b7020	 str         r7, [r11, #-0x20]
  00050	e1a0e00f	 mov         lr, pc
  00054	e12fff13	 bx          r3
  00058	e280000c	 add         r0, r0, #0xC
  0005c	eb000000	 bl          EnterCriticalSection

; 418  :         while ( pCurTD!=NULL) {

  00060	e3560000	 cmp         r6, #0
  00064	0a000027	 beq         |$LN14@DoneTransf|
  00068	e3a01c01	 mov         r1, #1, 24
  0006c		 |$LL28@DoneTransf|

; 419  :             DWORD dwStatus = pCurTD->GetStatus();
; 420  :             DWORD dwTDType = pCurTD->GetTDType();

  0006c	e596300c	 ldr         r3, [r6, #0xC]
  00070	e5962028	 ldr         r2, [r6, #0x28]

; 421  : 
; 422  :             if (dwTDType != TD_SETUP ) // Do not count Setup TD

  00074	e3530001	 cmp         r3, #1

; 423  :                 dwDataTransferred += pCurTD->m_cbTransferred;

  00078	1596301c	 ldrne       r3, [r6, #0x1C]
  0007c	10877003	 addne       r7, r7, r3
  00080	150b7020	 strne       r7, [r11, #-0x20]

; 424  :             if (dwStatus == STATUS_HALT) { // This Transfer Has been halted due to error.

  00084	e352000d	 cmp         r2, #0xD
  00088	1a000004	 bne         |$LN25@DoneTransf|

; 425  :                 // This is error. We do not have error code for MHCI so generically we set STALL error.
; 426  :                 if (dwUsbError == USB_NO_ERROR)

  0008c	e3540000	 cmp         r4, #0
  00090	1a000014	 bne         |$LN16@DoneTransf|

; 427  :                     dwUsbError = USB_STALL_ERROR;

  00094	e3a04004	 mov         r4, #4

; 435  :                     dwUsbError = USB_CLIENT_BUFFER_ERROR;

  00098	e50b4024	 str         r4, [r11, #-0x24]

; 436  :             }
; 437  :             else

  0009c	ea000011	 b           |$LN16@DoneTransf|
  000a0		 |$LN25@DoneTransf|

; 428  :             }
; 429  :             else if (dwStatus == STATUS_ABORT) {

  000a0	e352000e	 cmp         r2, #0xE
  000a4	1a000004	 bne         |$LN22@DoneTransf|

; 430  :                 if (dwUsbError == USB_NO_ERROR)

  000a8	e3540000	 cmp         r4, #0
  000ac	1a00000d	 bne         |$LN16@DoneTransf|

; 431  :                     dwUsbError = USB_CANCELED_ERROR;

  000b0	e3814001	 orr         r4, r1, #1

; 435  :                     dwUsbError = USB_CLIENT_BUFFER_ERROR;

  000b4	e50b4024	 str         r4, [r11, #-0x24]

; 436  :             }
; 437  :             else

  000b8	ea00000a	 b           |$LN16@DoneTransf|
  000bc		 |$LN22@DoneTransf|

; 432  :             }
; 433  :             else if (dwStatus == STATUS_NOT_ENOUGH_BUFFER) {

  000bc	e3520010	 cmp         r2, #0x10
  000c0	1a000004	 bne         |$LN19@DoneTransf|

; 434  :                 if (dwUsbError == USB_NO_ERROR)

  000c4	e3540000	 cmp         r4, #0
  000c8	1a000006	 bne         |$LN16@DoneTransf|

; 435  :                     dwUsbError = USB_CLIENT_BUFFER_ERROR;

  000cc	e3a04f41	 mov         r4, #0x41, 30
  000d0	e50b4024	 str         r4, [r11, #-0x24]

; 436  :             }
; 437  :             else

  000d4	ea000003	 b           |$LN16@DoneTransf|
  000d8		 |$LN19@DoneTransf|

; 438  :             if ((dwStatus == STATUS_WAIT_TRANSFER) || (dwStatus == STATUS_WAIT_RESPONSE)) {

  000d8	e3520001	 cmp         r2, #1
  000dc	0a000005	 beq         |$LN72@DoneTransf|
  000e0	e3520003	 cmp         r2, #3
  000e4	0a000003	 beq         |$LN72@DoneTransf|
  000e8		 |$LN16@DoneTransf|

; 441  :                 break;
; 442  :             }
; 443  :             pCurTD = pCurTD->GetNextTD();

  000e8	e5963008	 ldr         r3, [r6, #8]
  000ec	e1b06003	 movs        r6, r3
  000f0	1affffdd	 bne         |$LL28@DoneTransf|

; 438  :             if ((dwStatus == STATUS_WAIT_TRANSFER) || (dwStatus == STATUS_WAIT_RESPONSE)) {

  000f4	ea000003	 b           |$LN14@DoneTransf|
  000f8		 |$LN72@DoneTransf|

; 439  :                 if (dwUsbError == USB_NO_ERROR)

  000f8	e3540000	 cmp         r4, #0
  000fc	03a03c01	 moveq       r3, #1, 24

; 440  :                     dwUsbError = USB_NOT_COMPLETE_ERROR;

  00100	03834003	 orreq       r4, r3, #3
  00104	050b4024	 streq       r4, [r11, #-0x24]
  00108		 |$LN14@DoneTransf|

; 444  :         }        
; 445  :         
; 446  :         UCHAR ep = m_pCPipe->GetMappedEndPoint();

  00108	e5952004	 ldr         r2, [r5, #4]

; 447  :         UCHAR isIn = (m_sTransfer.dwFlags & USB_IN_TRANSFER)? 1:0;

  0010c	e5953024	 ldr         r3, [r5, #0x24]
  00110	e5d21058	 ldrb        r1, [r2, #0x58]
  00114	e3130080	 tst         r3, #0x80
  00118	13a03001	 movne       r3, #1
  0011c	03a03000	 moveq       r3, #0

; 448  :         DWORD dwPacketSize= (m_pCPipe->GetEndptDescriptor()).wMaxPacketSize & 0x7ff;
; 449  :         if (ep == 0)

  00120	e3510000	 cmp         r1, #0
  00124	1a00000c	 bne         |$LN13@DoneTransf|

; 450  :             m_pCPipe->m_pCMhcd->UnlockEP0(m_pCPipe->GetReservedDeviceAddr());

  00128	e5923000	 ldr         r3, [r2]
  0012c	e1a00002	 mov         r0, r2
  00130	e5933028	 ldr         r3, [r3, #0x28]
  00134	e1a0e00f	 mov         lr, pc
  00138	e12fff13	 bx          r3
  0013c	e5953004	 ldr         r3, [r5, #4]
  00140	e1a01000	 mov         r1, r0
  00144	e593000c	 ldr         r0, [r3, #0xC]
  00148	e5903000	 ldr         r3, [r0]
  0014c	e5933078	 ldr         r3, [r3, #0x78]
  00150	e1a0e00f	 mov         lr, pc
  00154	e12fff13	 bx          r3

; 451  :         else 

  00158	ea000012	 b           |$LN10@DoneTransf|
  0015c		 |$LN13@DoneTransf|

; 452  :         {
; 453  :             // Set Data Toggle here after the current transaction has been completed
; 454  :             UCHAR dataToggle = m_pCPipe->m_pCMhcd->GetCurrentToggleBit(m_pCPipe->GetMappedEndPoint(), isIn);            

  0015c	e592000c	 ldr         r0, [r2, #0xC]
  00160	e20320ff	 and         r2, r3, #0xFF
  00164	eb000000	 bl          |?GetCurrentToggleBit@CHW@@QAAEEE@Z|
  00168	e1a01000	 mov         r1, r0

; 455  :             if (dataToggle != 0xff)

  0016c	e35100ff	 cmp         r1, #0xFF

; 456  :                 m_pCPipe->SetDataToggle(dataToggle);          

  00170	15950004	 ldrne       r0, [r5, #4]
  00174	1b000000	 blne        |?SetDataToggle@CPipe@@QAAXE@Z|

; 457  :             // Release the endpoint only if the transfer size is smaller than the max packet size;
; 458  :             {
; 459  :                 UCHAR channel = m_pCPipe->m_pCMhcd->DeviceInfo2Channel(m_pCPipe);                

  00178	e5951004	 ldr         r1, [r5, #4]
  0017c	e591000c	 ldr         r0, [r1, #0xC]
  00180	eb000000	 bl          |?DeviceInfo2Channel@CHW@@QAAEPAVCPipe@@@Z|

; 460  :                 m_pCPipe->m_pCMhcd->ReleaseDMAChannel(m_pCPipe, channel);

  00184	e5951004	 ldr         r1, [r5, #4]
  00188	e1a02000	 mov         r2, r0
  0018c	e591000c	 ldr         r0, [r1, #0xC]
  00190	eb000000	 bl          |?ReleaseDMAChannel@CHW@@QAAHPAVCPipe@@E@Z|

; 461  :                 m_pCPipe->m_pCMhcd->ReleasePhysicalEndPoint(m_pCPipe, TRUE, FALSE);

  00194	e5951004	 ldr         r1, [r5, #4]
  00198	e3a03000	 mov         r3, #0
  0019c	e3a02001	 mov         r2, #1
  001a0	e591000c	 ldr         r0, [r1, #0xC]
  001a4	eb000000	 bl          |?ReleasePhysicalEndPoint@CHW@@QAAHPAVCPipe@@HH@Z|
  001a8		 |$LN10@DoneTransf|

; 462  : 
; 463  :                 // We release it only when it is fully complete. Otherwise, there may be problem.
; 464  :                 if ((dwUsbError == USB_NO_ERROR) && (dwDataTransferred < dwPacketSize))
; 465  :                 {   
; 466  :                     DEBUGMSG(ZONE_VERBOSE,(TEXT("CQTransfer::DoneTransfer ReleasePhysicalEndPoint and ReleaseDMAChannel:%d\r\n"),channel));
; 467  :                 }
; 468  :             }
; 469  :         }
; 470  : 
; 471  :         m_pCPipe->GetQHead()->UnLock();

  001a8	e5950004	 ldr         r0, [r5, #4]
  001ac	e5903000	 ldr         r3, [r0]
  001b0	e5933040	 ldr         r3, [r3, #0x40]
  001b4	e1a0e00f	 mov         lr, pc
  001b8	e12fff13	 bx          r3
  001bc	e280000c	 add         r0, r0, #0xC
  001c0	eb000000	 bl          LeaveCriticalSection

; 472  : 
; 473  :         // We have to update the buffer when this is IN Transfer.
; 474  :         if ((m_sTransfer.dwFlags & USB_IN_TRANSFER)!=NULL && m_pAllocatedForClient!=NULL && m_sTransfer.dwBufferSize!=0) {

  001c4	e5953024	 ldr         r3, [r5, #0x24]
  001c8	e3130080	 tst         r3, #0x80
  001cc	0a00000f	 beq         |$LN43@DoneTransf|
  001d0	e5953014	 ldr         r3, [r5, #0x14]
  001d4	e1b01003	 movs        r1, r3
  001d8	0a00000c	 beq         |$LN43@DoneTransf|
  001dc	e5953038	 ldr         r3, [r5, #0x38]
  001e0	e3530000	 cmp         r3, #0
  001e4	0a000009	 beq         |$LN43@DoneTransf|
  001e8		 |$LN41@DoneTransf|

; 475  :             __try { // copying client buffer for OUT transfer
; 476  :                 memcpy( m_sTransfer.lpvBuffer, m_pAllocatedForClient, m_sTransfer.dwBufferSize );

  001e8	e595003c	 ldr         r0, [r5, #0x3C]
  001ec	e1a02003	 mov         r2, r3
  001f0	eb000000	 bl          memcpy
  001f4		 |$LN42@DoneTransf|
  001f4	ea000005	 b           |$LN43@DoneTransf|
  001f8		 |$LN38@DoneTransf|

; 480  :                   // bad lpvBuffer.
; 481  :                 if (dwUsbError == USB_NO_ERROR)

  001f8	e51b4024	 ldr         r4, [r11, #-0x24]
  001fc	e3540000	 cmp         r4, #0

; 482  :                     dwUsbError = USB_CLIENT_BUFFER_ERROR;

  00200	03a04f41	 moveq       r4, #0x41, 30
  00204	050b4024	 streq       r4, [r11, #-0x24]
  00208	e59b5000	 ldr         r5, [r11]
  0020c	e51b7020	 ldr         r7, [r11, #-0x20]
  00210		 |$LN43@DoneTransf|
  00210		 |$LN48@DoneTransf|

; 483  :             }
; 484  :         }
; 485  :         __try { // setting transfer status and executing callback function
; 486  :             if (m_sTransfer.lpfComplete !=NULL)

  00210	e5953050	 ldr         r3, [r5, #0x50]
  00214	e3530000	 cmp         r3, #0

; 487  :                 *m_sTransfer.lpfComplete = TRUE;

  00218	13a02001	 movne       r2, #1
  0021c	15832000	 strne       r2, [r3]

; 488  :             if (m_sTransfer.lpdwError!=NULL)

  00220	e5953058	 ldr         r3, [r5, #0x58]
  00224	e3530000	 cmp         r3, #0

; 489  :                 *m_sTransfer.lpdwError = dwUsbError;

  00228	15834000	 strne       r4, [r3]

; 490  :             if (m_sTransfer.lpdwBytesTransferred)

  0022c	e5953054	 ldr         r3, [r5, #0x54]
  00230	e3530000	 cmp         r3, #0

; 491  :                 *m_sTransfer.lpdwBytesTransferred =  dwDataTransferred;

  00234	15837000	 strne       r7, [r3]

; 492  :             if ( m_sTransfer.lpStartAddress ) {

  00238	e595301c	 ldr         r3, [r5, #0x1C]
  0023c	e3530000	 cmp         r3, #0
  00240	0a000004	 beq         |$LN49@DoneTransf|

; 493  :                 //UCHAR index;
; 494  :                 //if ((m_sTransfer.dwFlags & USB_IN_TRANSFER) && (dwDataTransferred == 13))
; 495  :                 //    index = *((UCHAR *)(m_sTransfer.lpvBuffer)+4);                
; 496  : 
; 497  :                 DEBUGMSG(ZONE_HCD, (TEXT("Notify ep(0x%x) (%s) dev %d above with error(0x%x), dwDataTransferred(%d), size(%d)\r\n"), 
; 498  :                     ep, (m_sTransfer.dwFlags & USB_IN_TRANSFER)? TEXT("IN"):TEXT("OUT"), m_pCPipe->GetReservedDeviceAddr(), dwUsbError, dwDataTransferred, m_sTransfer.dwBufferSize));
; 499  :                 memdump((UCHAR *)m_sTransfer.lpvBuffer, (USHORT)dwDataTransferred, 0);
; 500  :                 ( *m_sTransfer.lpStartAddress )(m_sTransfer.lpvNotifyParameter );

  00244	e5950020	 ldr         r0, [r5, #0x20]
  00248	e1a0e00f	 mov         lr, pc
  0024c	e12fff13	 bx          r3

; 501  :                 m_sTransfer.lpStartAddress = NULL ; // Make sure only do once.

  00250	e3a03000	 mov         r3, #0
  00254	e585301c	 str         r3, [r5, #0x1C]
  00258		 |$LN49@DoneTransf|

; 502  :             }

  00258	ea000000	 b           |$LN50@DoneTransf|
  0025c		 |$LN45@DoneTransf|

; 503  :         } __except( EXCEPTION_EXECUTE_HANDLER ) {

  0025c	e51b4024	 ldr         r4, [r11, #-0x24]
  00260		 |$LN50@DoneTransf|

; 504  :               DEBUGMSG( ZONE_ERROR, (TEXT("CQueuedPipe(%s)::CheckForDoneTransfers - exception setting transfer status to complete\n"), m_pCPipe->GetPipeType() ) );
; 505  :         }        
; 506  : 
; 507  :         return (dwUsbError==USB_NO_ERROR);

  00260	e3540000	 cmp         r4, #0
  00264	0a000003	 beq         |$LN29@DoneTransf|
  00268	e3a00000	 mov         r0, #0
  0026c	ea000002	 b           |$LN1@DoneTransf|
  00270		 |$LN74@DoneTransf|

; 508  :     }
; 509  :     else
; 510  :         return TRUE;

  00270	e51b0020	 ldr         r0, [r11, #-0x20]
  00274	ea000000	 b           |$LN1@DoneTransf|
  00278		 |$LN29@DoneTransf|
  00278	e3a00001	 mov         r0, #1
  0027c		 |$LN1@DoneTransf|

; 511  : }

  0027c	e24bd01c	 sub         sp, r11, #0x1C
  00280	e89d68f0	 ldmia       sp, {r4 - r7, r11, sp, lr}
  00284	e12fff1e	 bx          lr

			 ENDP  ; |?DoneTransfer@CQTransfer@@QAAHXZ|, CQTransfer::DoneTransfer

  00288		 |$LN44@DoneTransf|
  00288		 |$LN77@DoneTransf|

; 503  :         } __except( EXCEPTION_EXECUTE_HANDLER ) {

  00288	e52de004	 str         lr, [sp, #-4]!
  0028c		 |$LN47@DoneTransf|
  0028c		 |$LN81@DoneTransf|
  0028c	e3a00001	 mov         r0, #1
  00290		 |$LN46@DoneTransf|
  00290	e49df004	 ldr         pc, [sp], #4
  00294		 |$LN82@DoneTransf|
  00294		 |$LN37@DoneTransf|
  00294		 |$LN79@DoneTransf|

; 477  :                 //RETAILMSG(1, (TEXT("Receive Buffer size %d\r\n"), m_sTransfer.dwBufferSize));
; 478  :                 //memdump((UCHAR *)m_sTransfer.lpvBuffer, (USHORT)m_sTransfer.dwBufferSize, 0);
; 479  :             } __except( EXCEPTION_EXECUTE_HANDLER ) {

  00294	e52de004	 str         lr, [sp, #-4]!
  00298		 |$LN40@DoneTransf|
  00298		 |$LN83@DoneTransf|
  00298	e3a00001	 mov         r0, #1
  0029c		 |$LN39@DoneTransf|
  0029c	e49df004	 ldr         pc, [sp], #4
  002a0		 |$LN84@DoneTransf|
  002a0		 |$LN80@DoneTransf|

  00000			 AREA	 |.pdata|, PDATA
|$T37982| DCD	|$LN6@scalar@3|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCQTransfer@@UAAPAXI@Z| PROC	; CQTransfer::`scalar deleting destructor'
  00000		 |$LN6@scalar@3|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37979|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??1CQTransfer@@UAA@XZ|
  00010	e3140001	 tst         r4, #1
  00014	11a00005	 movne       r0, r5
  00018	1b000000	 blne        |??3@YAXPAX@Z|
  0001c	e1a00005	 mov         r0, r5
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M37980|

			 ENDP  ; |??_GCQTransfer@@UAAPAXI@Z|, CQTransfer::`scalar deleting destructor'

	END
