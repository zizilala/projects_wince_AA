; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\OAL\PRCM\prcm_volt.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|PrcmVoltSetControlMode|
	IMPORT	|g_pPrcmPrm|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\prcm\prcm_volt.c

  00000			 AREA	 |.pdata|, PDATA
|$T47401| DCD	|$LN5@PrcmVoltSe|
	DCD	0x40000a00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltSetControlMode| PROC

; 31   : {

  00000		 |$LN5@PrcmVoltSe|
  00000		 |$M47398|

; 32   :     UINT val;
; 33   :     
; 34   :     voltCtrlMode &= voltCtrlMask;
; 35   :     val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VOLTCTRL) & ~voltCtrlMask;

  00000	e59f301c	 ldr         r3, [pc, #0x1C]
  00004	e0000001	 and         r0, r0, r1
  00008	e5933000	 ldr         r3, [r3]
  0000c	e593202c	 ldr         r2, [r3, #0x2C]
  00010	e5923060	 ldr         r3, [r2, #0x60]
  00014	e1c33001	 bic         r3, r3, r1

; 36   :     val |= voltCtrlMode;

  00018	e1803003	 orr         r3, r0, r3

; 37   :     OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VOLTCTRL, val);

  0001c	e5823060	 str         r3, [r2, #0x60]

; 38   : }

  00020	e12fff1e	 bx          lr
  00024		 |$LN6@PrcmVoltSe|
  00024		 |$LN7@PrcmVoltSe|
  00024	00000000	 DCD         |g_pPrcmPrm|
  00028		 |$M47399|

			 ENDP  ; |PrcmVoltSetControlMode|

	EXPORT	|PrcmVoltSetControlPolarity|

  00000			 AREA	 |.pdata|, PDATA
|$T47413| DCD	|$LN5@PrcmVoltSe@2|
	DCD	0x40000a00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltSetControlPolarity| PROC

; 46   : {    

  00000		 |$LN5@PrcmVoltSe@2|
  00000		 |$M47410|

; 47   :     UINT val;
; 48   :     
; 49   :     polMode &= polModeMask;
; 50   :     val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_POLCTRL) & ~polModeMask;

  00000	e59f301c	 ldr         r3, [pc, #0x1C]
  00004	e0000001	 and         r0, r0, r1
  00008	e5933000	 ldr         r3, [r3]
  0000c	e593202c	 ldr         r2, [r3, #0x2C]
  00010	e592309c	 ldr         r3, [r2, #0x9C]
  00014	e1c33001	 bic         r3, r3, r1

; 51   :     val |= polMode;

  00018	e1803003	 orr         r3, r0, r3

; 52   :     OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_POLCTRL, val);

  0001c	e582309c	 str         r3, [r2, #0x9C]

; 53   : }

  00020	e12fff1e	 bx          lr
  00024		 |$LN6@PrcmVoltSe@2|
  00024		 |$LN7@PrcmVoltSe@2|
  00024	00000000	 DCD         |g_pPrcmPrm|
  00028		 |$M47411|

			 ENDP  ; |PrcmVoltSetControlPolarity|

	EXPORT	|PrcmVoltSetAutoControl|

  00000			 AREA	 |.pdata|, PDATA
|$T47425| DCD	|$LN5@PrcmVoltSe@3|
	DCD	0x40000a00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltSetAutoControl| PROC

; 61   : {    

  00000		 |$LN5@PrcmVoltSe@3|
  00000		 |$M47422|

; 62   :     UINT val;
; 63   :     
; 64   :     autoCtrlMode &= autoCtrlMask;
; 65   :     val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VOLTCTRL) & ~autoCtrlMask;

  00000	e59f301c	 ldr         r3, [pc, #0x1C]
  00004	e0000001	 and         r0, r0, r1
  00008	e5933000	 ldr         r3, [r3]
  0000c	e593202c	 ldr         r2, [r3, #0x2C]
  00010	e5923060	 ldr         r3, [r2, #0x60]
  00014	e1c33001	 bic         r3, r3, r1

; 66   :     val |= autoCtrlMode;

  00018	e1803003	 orr         r3, r0, r3

; 67   :     OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VOLTCTRL, val);

  0001c	e5823060	 str         r3, [r2, #0x60]

; 68   : }

  00020	e12fff1e	 bx          lr
  00024		 |$LN6@PrcmVoltSe@3|
  00024		 |$LN7@PrcmVoltSe@3|
  00024	00000000	 DCD         |g_pPrcmPrm|
  00028		 |$M47423|

			 ENDP  ; |PrcmVoltSetAutoControl|

	EXPORT	|PrcmVoltI2cInitialize|

  00000			 AREA	 |.pdata|, PDATA
|$T47454| DCD	|$LN13@PrcmVoltI2|
	DCD	0x40004501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltI2cInitialize| PROC

; 79   : {

  00000		 |$LN13@PrcmVoltI2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M47451|
  00004	e1a05003	 mov         r5, r3
  00008	e1a06002	 mov         r6, r2
  0000c	e3500000	 cmp         r0, #0

; 80   :     UINT    val;
; 81   :     
; 82   :     switch (vp)

  00010	0a00001f	 beq         |$LN2@PrcmVoltI2|
  00014	e3500001	 cmp         r0, #1
  00018	1a00003a	 bne         |$LN3@PrcmVoltI2|

; 108  :             break;
; 109  : 
; 110  :         case kVoltageProcessor2:
; 111  :             // set slave address
; 112  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_SA);

  0001c	e59f40ec	 ldr         r4, [pc, #0xEC]

; 113  :             val &= ~SMPS_SA1_MASK;
; 114  :             val |= ((slaveAddr << SMPS_SA1_SHIFT) & SMPS_SA1_MASK);
; 115  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_SA, val);
; 116  : 
; 117  :             // set voltage register address
; 118  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_VOL_RA);
; 119  :             val &= ~SMPS_VOLRA1_MASK;
; 120  :             val |= ((voltAddr << SMPS_VOLRA1_SHIFT) & SMPS_VOLRA1_MASK);
; 121  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_VOL_RA, val);
; 122  : 
; 123  :             // set cmd register address
; 124  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_CMD_RA);
; 125  :             val &= ~SMPS_CMDRA1_MASK;
; 126  :             val |= ((cmdAddr << SMPS_CMDRA1_SHIFT) & SMPS_CMDRA1_MASK);
; 127  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_CMD_RA, val);
; 128  : 
; 129  :             // set mux for voltage control register address            
; 130  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CH_CONF);            
; 131  :             val |= (SMPS_SA1 | SMPS_RAV1 | SMPS_RAC1 | SMPS_CMD1);
; 132  :             val = (bUseCmdAddr != FALSE) ? val | SMPS_RACEN1 : val & ~SMPS_RACEN1;

  00020	e59d0010	 ldr         r0, [sp, #0x10]
  00024	e594e000	 ldr         lr, [r4]
  00028	e3500000	 cmp         r0, #0
  0002c	e59ee02c	 ldr         lr, [lr, #0x2C]
  00030	e59e0020	 ldr         r0, [lr, #0x20]
  00034	e0201801	 eor         r1, r0, r1, lsl #16
  00038	e201187f	 and         r1, r1, #0x7F, 16
  0003c	e0211000	 eor         r1, r1, r0
  00040	e58e1020	 str         r1, [lr, #0x20]
  00044	e5941000	 ldr         r1, [r4]
  00048	e591202c	 ldr         r2, [r1, #0x2C]
  0004c	e5923024	 ldr         r3, [r2, #0x24]
  00050	e3c338ff	 bic         r3, r3, #0xFF, 16
  00054	e1833805	 orr         r3, r3, r5, lsl #16
  00058	e5823024	 str         r3, [r2, #0x24]
  0005c	e5943000	 ldr         r3, [r4]
  00060	e593202c	 ldr         r2, [r3, #0x2C]
  00064	e5923028	 ldr         r3, [r2, #0x28]
  00068	e3c338ff	 bic         r3, r3, #0xFF, 16
  0006c	e1833806	 orr         r3, r3, r6, lsl #16
  00070	e5823028	 str         r3, [r2, #0x28]
  00074	e5943000	 ldr         r3, [r4]
  00078	e593202c	 ldr         r2, [r3, #0x2C]
  0007c	e5923034	 ldr         r3, [r2, #0x34]
  00080	e3833817	 orr         r3, r3, #0x17, 16
  00084	13833702	 orrne       r3, r3, #2, 14
  00088	1a00001d	 bne         |$LN8@PrcmVoltI2|
  0008c	e3c33702	 bic         r3, r3, #2, 14

; 133  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CH_CONF, val);
; 134  :             break;

  00090	ea00001b	 b           |$LN8@PrcmVoltI2|
  00094		 |$LN2@PrcmVoltI2|

; 83   :         {
; 84   :         case kVoltageProcessor1:
; 85   :             // set slave address
; 86   :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_SA);

  00094	e59f0074	 ldr         r0, [pc, #0x74]

; 87   :             val &= ~SMPS_SA0_MASK;
; 88   :             val |= ((slaveAddr << SMPS_SA0_SHIFT) & SMPS_SA0_MASK);
; 89   :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_SA, val);
; 90   : 
; 91   :             // set voltage register address
; 92   :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_VOL_RA);
; 93   :             val &= ~SMPS_VOLRA0_MASK;
; 94   :             val |= ((voltAddr << SMPS_VOLRA0_SHIFT) & SMPS_VOLRA0_MASK);
; 95   :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_VOL_RA, val);
; 96   : 
; 97   :             // set cmd register address
; 98   :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_CMD_RA);
; 99   :             val &= ~SMPS_CMDRA0_MASK;
; 100  :             val |= ((cmdAddr << SMPS_CMDRA0_SHIFT) & SMPS_CMDRA0_MASK);
; 101  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_SMPS_CMD_RA, val);
; 102  : 
; 103  :             // set mux for voltage control register address            
; 104  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CH_CONF);            
; 105  :             val &= ~(SMPS_SA0 | SMPS_RAV0 | SMPS_RAC0 | SMPS_CMD0);
; 106  :             val = (bUseCmdAddr != FALSE) ? val | SMPS_RACEN0 : val & ~SMPS_RACEN0;

  00098	e59d3010	 ldr         r3, [sp, #0x10]
  0009c	e201107f	 and         r1, r1, #0x7F
  000a0	e5902000	 ldr         r2, [r0]
  000a4	e3530000	 cmp         r3, #0
  000a8	e592202c	 ldr         r2, [r2, #0x2C]
  000ac	e5923020	 ldr         r3, [r2, #0x20]
  000b0	e3c3307f	 bic         r3, r3, #0x7F
  000b4	e1833001	 orr         r3, r3, r1
  000b8	e5823020	 str         r3, [r2, #0x20]
  000bc	e5903000	 ldr         r3, [r0]
  000c0	e593202c	 ldr         r2, [r3, #0x2C]
  000c4	e5923024	 ldr         r3, [r2, #0x24]
  000c8	e3c330ff	 bic         r3, r3, #0xFF
  000cc	e1833005	 orr         r3, r3, r5
  000d0	e5823024	 str         r3, [r2, #0x24]
  000d4	e5903000	 ldr         r3, [r0]
  000d8	e593202c	 ldr         r2, [r3, #0x2C]
  000dc	e5923028	 ldr         r3, [r2, #0x28]
  000e0	e3c330ff	 bic         r3, r3, #0xFF
  000e4	e1833006	 orr         r3, r3, r6
  000e8	e5823028	 str         r3, [r2, #0x28]
  000ec	e5903000	 ldr         r3, [r0]
  000f0	e593202c	 ldr         r2, [r3, #0x2C]
  000f4	e5923034	 ldr         r3, [r2, #0x34]
  000f8	e3c33017	 bic         r3, r3, #0x17
  000fc	13833008	 orrne       r3, r3, #8
  00100	03c33008	 biceq       r3, r3, #8
  00104		 |$LN8@PrcmVoltI2|

; 107  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CH_CONF, val);   

  00104	e5823034	 str         r3, [r2, #0x34]
  00108		 |$LN3@PrcmVoltI2|

; 135  :         }
; 136  : }

  00108	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0010c	e12fff1e	 bx          lr
  00110		 |$LN14@PrcmVoltI2|
  00110		 |$LN15@PrcmVoltI2|
  00110	00000000	 DCD         |g_pPrcmPrm|
  00114		 |$M47452|

			 ENDP  ; |PrcmVoltI2cInitialize|

	EXPORT	|PrcmVoltI2cSetHighSpeedMode|

  00000			 AREA	 |.pdata|, PDATA
|$T47468| DCD	|$LN7@PrcmVoltI2@2|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltI2cSetHighSpeedMode| PROC

; 145  : {

  00000		 |$LN7@PrcmVoltI2@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47465|
  00004	e3500000	 cmp         r0, #0

; 146  :     UINT    val;
; 147  : 
; 148  :     val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_I2C_CFG);

  00008	e59f302c	 ldr         r3, [pc, #0x2C]

; 149  : 
; 150  :     // build up value
; 151  :     val &= ~(SMPS_HSEN | SMPS_SREN | SMPS_MCODE_MASK);

  0000c	e5933000	 ldr         r3, [r3]
  00010	e593e02c	 ldr         lr, [r3, #0x2C]
  00014	e59e3038	 ldr         r3, [lr, #0x38]
  00018	e3c3001f	 bic         r0, r3, #0x1F

; 152  :     if (bHSMode != FALSE) val |= SMPS_HSEN;

  0001c	13800010	 orrne       r0, r0, #0x10

; 153  :     if (bRepeatStartMode != FALSE) val |= SMPS_SREN;

  00020	e3510000	 cmp         r1, #0
  00024	13800008	 orrne       r0, r0, #8

; 154  :     val |= ((mcode & SMPS_MCODE_MASK) << SMPS_MCODE_SHIFT);

  00028	e2023007	 and         r3, r2, #7
  0002c	e1833000	 orr         r3, r3, r0

; 155  : 
; 156  :     // write-up result
; 157  :     OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_I2C_CFG, val);

  00030	e58e3038	 str         r3, [lr, #0x38]

; 158  : }

  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$LN8@PrcmVoltI2@2|
  0003c		 |$LN9@PrcmVoltI2@2|
  0003c	00000000	 DCD         |g_pPrcmPrm|
  00040		 |$M47466|

			 ENDP  ; |PrcmVoltI2cSetHighSpeedMode|

	EXPORT	|PrcmVoltInitializeVoltageLevels|

  00000			 AREA	 |.pdata|, PDATA
|$T47482| DCD	|$LN9@PrcmVoltIn|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltInitializeVoltageLevels| PROC

; 169  : {

  00000		 |$LN9@PrcmVoltIn|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47479|
  00004	e3500000	 cmp         r0, #0

; 170  :     UINT    val;
; 171  : 
; 172  :     val = (vddOn << SMPS_ON_SHIFT);
; 173  :     val |= (vddOnLP << SMPS_ONLP_SHIFT);
; 174  :     val |= (vddRetention << SMPS_RET_SHIFT);
; 175  :     val |= (vddOff << SMPS_OFF_SHIFT);

  00008	e59de004	 ldr         lr, [sp, #4]
  0000c	e1822401	 orr         r2, r2, r1, lsl #8
  00010	e1833402	 orr         r3, r3, r2, lsl #8
  00014	e18e2403	 orr         r2, lr, r3, lsl #8

; 176  :     
; 177  :     switch (vp)

  00018	0a000007	 beq         |$LN2@PrcmVoltIn|
  0001c	e3500001	 cmp         r0, #1
  00020	1a000009	 bne         |$LN3@PrcmVoltIn|

; 181  :             break;
; 182  : 
; 183  :         case kVoltageProcessor2:
; 184  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CMD_VAL_1, val);

  00024	e59f3028	 ldr         r3, [pc, #0x28]
  00028	e5933000	 ldr         r3, [r3]
  0002c	e593302c	 ldr         r3, [r3, #0x2C]
  00030	e5832030	 str         r2, [r3, #0x30]

; 185  :             break;
; 186  :         }
; 187  : }

  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$LN2@PrcmVoltIn|

; 178  :         {
; 179  :         case kVoltageProcessor1:
; 180  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CMD_VAL_0, val);

  0003c	e59f3010	 ldr         r3, [pc, #0x10]
  00040	e5933000	 ldr         r3, [r3]
  00044	e593302c	 ldr         r3, [r3, #0x2C]
  00048	e583202c	 str         r2, [r3, #0x2C]
  0004c		 |$LN3@PrcmVoltIn|

; 185  :             break;
; 186  :         }
; 187  : }

  0004c	e49de004	 ldr         lr, [sp], #4
  00050	e12fff1e	 bx          lr
  00054		 |$LN10@PrcmVoltIn|
  00054		 |$LN11@PrcmVoltIn|
  00054	00000000	 DCD         |g_pPrcmPrm|
  00058		 |$M47480|

			 ENDP  ; |PrcmVoltInitializeVoltageLevels|

	EXPORT	|PrcmVoltSetErrorConfiguration|

  00000			 AREA	 |.pdata|, PDATA
|$T47496| DCD	|$LN9@PrcmVoltSe@4|
	DCD	0x40002101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltSetErrorConfiguration| PROC

; 196  : {

  00000		 |$LN9@PrcmVoltSe@4|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47493|
  00004	e1a0e001	 mov         lr, r1
  00008	e3500000	 cmp         r0, #0

; 197  :     UINT val;
; 198  : 
; 199  :     switch (vp)

  0000c	0a00000e	 beq         |$LN2@PrcmVoltSe@4|
  00010	e3500001	 cmp         r0, #1
  00014	1a000017	 bne         |$LN3@PrcmVoltSe@4|

; 207  :             break;
; 208  : 
; 209  :         case kVoltageProcessor2:
; 210  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG);

  00018	e59f3060	 ldr         r3, [pc, #0x60]
  0001c	e3a01cff	 mov         r1, #0xFF, 24

; 211  :             val &= ~(SMPS_ERROROFFSET_MASK | SMPS_ERRORGAIN_MASK);
; 212  :             val |= ((errorGain << SMPS_ERRORGAIN_SHIFT) & SMPS_ERRORGAIN_MASK);
; 213  :             val |= ((errorOffset << SMPS_ERROROFFSET_SHIFT) & SMPS_ERROROFFSET_MASK);
; 214  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, val);

  00020	e38100ff	 orr         r0, r1, #0xFF
  00024	e5933000	 ldr         r3, [r3]
  00028	e20220ff	 and         r2, r2, #0xFF
  0002c	e182240e	 orr         r2, r2, lr, lsl #8
  00030	e593102c	 ldr         r1, [r3, #0x2C]
  00034	e59130d0	 ldr         r3, [r1, #0xD0]
  00038	e0033000	 and         r3, r3, r0
  0003c	e1833802	 orr         r3, r3, r2, lsl #16
  00040	e58130d0	 str         r3, [r1, #0xD0]

; 215  :             break;
; 216  :         }    
; 217  : }

  00044	e49de004	 ldr         lr, [sp], #4
  00048	e12fff1e	 bx          lr
  0004c		 |$LN2@PrcmVoltSe@4|

; 200  :         {
; 201  :         case kVoltageProcessor1:
; 202  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG);

  0004c	e59f302c	 ldr         r3, [pc, #0x2C]
  00050	e3a01cff	 mov         r1, #0xFF, 24

; 203  :             val &= ~(SMPS_ERROROFFSET_MASK | SMPS_ERRORGAIN_MASK);
; 204  :             val |= ((errorGain << SMPS_ERRORGAIN_SHIFT) & SMPS_ERRORGAIN_MASK);
; 205  :             val |= ((errorOffset << SMPS_ERROROFFSET_SHIFT) & SMPS_ERROROFFSET_MASK);
; 206  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, val);

  00054	e20220ff	 and         r2, r2, #0xFF
  00058	e5933000	 ldr         r3, [r3]
  0005c	e38110ff	 orr         r1, r1, #0xFF
  00060	e182240e	 orr         r2, r2, lr, lsl #8
  00064	e593002c	 ldr         r0, [r3, #0x2C]
  00068	e59030b0	 ldr         r3, [r0, #0xB0]
  0006c	e0033001	 and         r3, r3, r1
  00070	e1833802	 orr         r3, r3, r2, lsl #16
  00074	e58030b0	 str         r3, [r0, #0xB0]
  00078		 |$LN3@PrcmVoltSe@4|

; 215  :             break;
; 216  :         }    
; 217  : }

  00078	e49de004	 ldr         lr, [sp], #4
  0007c	e12fff1e	 bx          lr
  00080		 |$LN10@PrcmVoltSe@4|
  00080		 |$LN11@PrcmVoltSe@4|
  00080	00000000	 DCD         |g_pPrcmPrm|
  00084		 |$M47494|

			 ENDP  ; |PrcmVoltSetErrorConfiguration|

	EXPORT	|PrcmVoltSetSlewRange|

  00000			 AREA	 |.pdata|, PDATA
|$T47509| DCD	|$LN9@PrcmVoltSe@5|
	DCD	0x40002c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltSetSlewRange| PROC

; 228  : {

  00000		 |$LN9@PrcmVoltSe@5|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M47506|
  00004	e1a05003	 mov         r5, r3
  00008	e1a03001	 mov         r3, r1
  0000c	e3500000	 cmp         r0, #0

; 229  :     UINT val;
; 230  : 
; 231  :     switch (vp)

  00010	0a000013	 beq         |$LN2@PrcmVoltSe@5|
  00014	e3500001	 cmp         r0, #1
  00018	1a000021	 bne         |$LN3@PrcmVoltSe@5|

; 243  :             break;
; 244  : 
; 245  :         case kVoltageProcessor2:
; 246  :             // update min slew values            
; 247  :             val = (minVStep << SMPS_VSTEPMIN_SHIFT) & SMPS_VSTEPMIN_MASK;
; 248  :             val |= (minWaitTime << SMPS_SMPSWAITTIMEMIN_SHIFT) & SMPS_SMPSWAITTIMEMIN_MASK; 
; 249  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_VSTEPMIN, val);

  0001c	e59f4088	 ldr         r4, [pc, #0x88]
  00020	e3a01cff	 mov         r1, #0xFF, 24
  00024	e38160ff	 orr         r6, r1, #0xFF
  00028	e594e000	 ldr         lr, [r4]
  0002c	e0020006	 and         r0, r2, r6
  00030	e20320ff	 and         r2, r3, #0xFF
  00034	e1821400	 orr         r1, r2, r0, lsl #8
  00038	e59e202c	 ldr         r2, [lr, #0x2C]

; 250  : 
; 251  :             // update max slew values
; 252  :             val = (maxVStep << SMPS_VSTEPMAX_SHIFT) & SMPS_VSTEPMAX_MASK;
; 253  :             val |= (maxWaitTime << SMPS_SMPSWAITTIMEMAX_SHIFT) & SMPS_SMPSWAITTIMEMAX_MASK; 
; 254  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_VSTEPMAX, val);

  0003c	e59d0010	 ldr         r0, [sp, #0x10]
  00040	e205e0ff	 and         lr, r5, #0xFF
  00044	e58210d4	 str         r1, [r2, #0xD4]
  00048	e5941000	 ldr         r1, [r4]
  0004c	e0003006	 and         r3, r0, r6
  00050	e18e2403	 orr         r2, lr, r3, lsl #8
  00054	e591302c	 ldr         r3, [r1, #0x2C]
  00058	e58320d8	 str         r2, [r3, #0xD8]

; 255  :             break;
; 256  :         }  
; 257  : }

  0005c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN2@PrcmVoltSe@5|

; 232  :         {
; 233  :         case kVoltageProcessor1:
; 234  :             // update min slew values            
; 235  :             val = (minVStep << SMPS_VSTEPMIN_SHIFT) & SMPS_VSTEPMIN_MASK;
; 236  :             val |= (minWaitTime << SMPS_SMPSWAITTIMEMIN_SHIFT) & SMPS_SMPSWAITTIMEMIN_MASK; 
; 237  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_VSTEPMIN, val);

  00064	e59f4040	 ldr         r4, [pc, #0x40]
  00068	e3a01cff	 mov         r1, #0xFF, 24
  0006c	e38160ff	 orr         r6, r1, #0xFF
  00070	e5941000	 ldr         r1, [r4]
  00074	e0022006	 and         r2, r2, r6
  00078	e20330ff	 and         r3, r3, #0xFF
  0007c	e1832402	 orr         r2, r3, r2, lsl #8
  00080	e591302c	 ldr         r3, [r1, #0x2C]

; 238  : 
; 239  :             // update max slew values
; 240  :             val = (maxVStep << SMPS_VSTEPMAX_SHIFT) & SMPS_VSTEPMAX_MASK;
; 241  :             val |= (maxWaitTime << SMPS_SMPSWAITTIMEMAX_SHIFT) & SMPS_SMPSWAITTIMEMAX_MASK; 
; 242  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_VSTEPMAX, val);

  00084	e59d0010	 ldr         r0, [sp, #0x10]
  00088	e205e0ff	 and         lr, r5, #0xFF
  0008c	e58320b4	 str         r2, [r3, #0xB4]
  00090	e5941000	 ldr         r1, [r4]
  00094	e0003006	 and         r3, r0, r6
  00098	e18e2403	 orr         r2, lr, r3, lsl #8
  0009c	e591302c	 ldr         r3, [r1, #0x2C]
  000a0	e58320b8	 str         r2, [r3, #0xB8]
  000a4		 |$LN3@PrcmVoltSe@5|

; 255  :             break;
; 256  :         }  
; 257  : }

  000a4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN10@PrcmVoltSe@5|
  000ac		 |$LN11@PrcmVoltSe@5|
  000ac	00000000	 DCD         |g_pPrcmPrm|
  000b0		 |$M47507|

			 ENDP  ; |PrcmVoltSetSlewRange|

	EXPORT	|PrcmVoltSetLimits|

  00000			 AREA	 |.pdata|, PDATA
|$T47522| DCD	|$LN9@PrcmVoltSe@6|
	DCD	0x40002001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltSetLimits| PROC

; 267  : {

  00000		 |$LN9@PrcmVoltSe@6|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47519|
  00004	e1a04003	 mov         r4, r3
  00008	e1a05002	 mov         r5, r2
  0000c	e3500000	 cmp         r0, #0

; 268  :     UINT val;
; 269  : 
; 270  :     switch (vp)

  00010	0a00000d	 beq         |$LN2@PrcmVoltSe@6|
  00014	e3500001	 cmp         r0, #1
  00018	1a000015	 bne         |$LN3@PrcmVoltSe@6|

; 277  :             break;
; 278  : 
; 279  :         case kVoltageProcessor2:          
; 280  :             val = (maxVolt << SMPS_VDDMAX_SHIFT) & SMPS_VDDMAX_MASK;
; 281  :             val |= (minVolt << SMPS_VDDMIN_SHIFT) & SMPS_VDDMIN_MASK;
; 282  :             val |= (timeOut << SMPS_TIMEOUT_SHIFT) & SMPS_TIMEOUT_MASK;
; 283  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_VLIMITTO, val);

  0001c	e59f0058	 ldr         r0, [pc, #0x58]
  00020	e3a03cff	 mov         r3, #0xFF, 24
  00024	e201e0ff	 and         lr, r1, #0xFF
  00028	e5900000	 ldr         r0, [r0]
  0002c	e38310ff	 orr         r1, r3, #0xFF
  00030	e18e2405	 orr         r2, lr, r5, lsl #8
  00034	e590002c	 ldr         r0, [r0, #0x2C]
  00038	e0043001	 and         r3, r4, r1
  0003c	e1833802	 orr         r3, r3, r2, lsl #16
  00040	e58030dc	 str         r3, [r0, #0xDC]

; 284  :             break;
; 285  :         }  
; 286  : }

  00044	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN2@PrcmVoltSe@6|

; 271  :         {
; 272  :         case kVoltageProcessor1:            
; 273  :             val = (maxVolt << SMPS_VDDMAX_SHIFT) & SMPS_VDDMAX_MASK;
; 274  :             val |= (minVolt << SMPS_VDDMIN_SHIFT) & SMPS_VDDMIN_MASK;
; 275  :             val |= (timeOut << SMPS_TIMEOUT_SHIFT) & SMPS_TIMEOUT_MASK;
; 276  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_VLIMITTO, val);

  0004c	e59f3028	 ldr         r3, [pc, #0x28]
  00050	e20120ff	 and         r2, r1, #0xFF
  00054	e3a00cff	 mov         r0, #0xFF, 24
  00058	e5931000	 ldr         r1, [r3]
  0005c	e38030ff	 orr         r3, r0, #0xFF
  00060	e1822405	 orr         r2, r2, r5, lsl #8
  00064	e591102c	 ldr         r1, [r1, #0x2C]
  00068	e0043003	 and         r3, r4, r3
  0006c	e1833802	 orr         r3, r3, r2, lsl #16
  00070	e58130bc	 str         r3, [r1, #0xBC]
  00074		 |$LN3@PrcmVoltSe@6|

; 284  :             break;
; 285  :         }  
; 286  : }

  00074	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN10@PrcmVoltSe@6|
  0007c		 |$LN11@PrcmVoltSe@6|
  0007c	00000000	 DCD         |g_pPrcmPrm|
  00080		 |$M47520|

			 ENDP  ; |PrcmVoltSetLimits|

	EXPORT	|PrcmVoltSetVoltageLevel|

  00000			 AREA	 |.pdata|, PDATA
|$T47537| DCD	|$LN17@PrcmVoltSe@7|
	DCD	0x40002a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltSetVoltageLevel| PROC

; 295  : {

  00000		 |$LN17@PrcmVoltSe@7|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47534|
  00004	e1a0e002	 mov         lr, r2
  00008	e3500000	 cmp         r0, #0

; 296  :     UINT    val;
; 297  :     volatile unsigned int *pPRM_VC_CMD_VAL;
; 298  : 
; 299  :     // get register to modify
; 300  :     switch (vp)

  0000c	0a000006	 beq         |$LN9@PrcmVoltSe@7|
  00010	e3500001	 cmp         r0, #1
  00014	1a000020	 bne         |$LN12@PrcmVoltSe@7|

; 304  :             break;
; 305  : 
; 306  :         case kVoltageProcessor2:
; 307  :             pPRM_VC_CMD_VAL = &g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CMD_VAL_1;

  00018	e59f3084	 ldr         r3, [pc, #0x84]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e593302c	 ldr         r3, [r3, #0x2C]
  00024	e2830030	 add         r0, r3, #0x30

; 308  :             break;

  00028	ea000003	 b           |$LN10@PrcmVoltSe@7|
  0002c		 |$LN9@PrcmVoltSe@7|

; 301  :         {
; 302  :         case kVoltageProcessor1:
; 303  :             pPRM_VC_CMD_VAL = &g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VC_CMD_VAL_0;

  0002c	e59f3070	 ldr         r3, [pc, #0x70]
  00030	e5933000	 ldr         r3, [r3]
  00034	e593302c	 ldr         r3, [r3, #0x2C]
  00038	e283002c	 add         r0, r3, #0x2C
  0003c		 |$LN10@PrcmVoltSe@7|

; 309  : 
; 310  :         default:
; 311  :             return;
; 312  :         }
; 313  : 
; 314  :     // update register with appropriate voltage level
; 315  :     val = INREG32(pPRM_VC_CMD_VAL);

  0003c	e5902000	 ldr         r2, [r0]

; 316  :     switch (mask)

  00040	e35e00ff	 cmp         lr, #0xFF
  00044	0a000010	 beq         |$LN1@PrcmVoltSe@7|
  00048	e35e0cff	 cmp         lr, #0xFF, 24
  0004c	0a00000a	 beq         |$LN2@PrcmVoltSe@7|
  00050	e35e08ff	 cmp         lr, #0xFF, 16
  00054	0a000004	 beq         |$LN3@PrcmVoltSe@7|
  00058	e35e04ff	 cmp         lr, #0xFF, 8
  0005c	1a00000d	 bne         |$LN5@PrcmVoltSe@7|

; 317  :         {
; 318  :         case SMPS_ON_MASK:
; 319  :             val &= ~SMPS_ON_MASK;

  00060	e3c234ff	 bic         r3, r2, #0xFF, 8

; 320  :             val |= ((vdd << SMPS_ON_SHIFT) & SMPS_ON_MASK);

  00064	e1832c01	 orr         r2, r3, r1, lsl #24

; 321  :             break;

  00068	ea00000a	 b           |$LN5@PrcmVoltSe@7|
  0006c		 |$LN3@PrcmVoltSe@7|

; 322  : 
; 323  :         case SMPS_ONLP_MASK:
; 324  :             val &= ~SMPS_ONLP_MASK;
; 325  :             val |= ((vdd << SMPS_ONLP_SHIFT) & SMPS_ONLP_MASK);

  0006c	e0223801	 eor         r3, r2, r1, lsl #16
  00070	e20338ff	 and         r3, r3, #0xFF, 16
  00074	e0232002	 eor         r2, r3, r2

; 326  :             break;

  00078	ea000006	 b           |$LN5@PrcmVoltSe@7|
  0007c		 |$LN2@PrcmVoltSe@7|

; 327  : 
; 328  :         case SMPS_RET_MASK:
; 329  :             val &= ~SMPS_RET_MASK;
; 330  :             val |= ((vdd << SMPS_RET_SHIFT) & SMPS_RET_MASK);

  0007c	e0223401	 eor         r3, r2, r1, lsl #8
  00080	e2033cff	 and         r3, r3, #0xFF, 24
  00084	e0232002	 eor         r2, r3, r2
  00088	ea000002	 b           |$LN5@PrcmVoltSe@7|
  0008c		 |$LN1@PrcmVoltSe@7|

; 331  :             break;
; 332  : 
; 333  :         case SMPS_OFF_MASK:
; 334  :             val &= ~SMPS_OFF_MASK;
; 335  :             val |= ((vdd << SMPS_OFF_SHIFT) & SMPS_OFF_MASK);

  0008c	e3c220ff	 bic         r2, r2, #0xFF
  00090	e20130ff	 and         r3, r1, #0xFF
  00094	e1822003	 orr         r2, r2, r3
  00098		 |$LN5@PrcmVoltSe@7|

; 336  :             break;
; 337  :         }
; 338  : 
; 339  :     OUTREG32(pPRM_VC_CMD_VAL, val);

  00098	e5802000	 str         r2, [r0]
  0009c		 |$LN12@PrcmVoltSe@7|

; 340  : }

  0009c	e49de004	 ldr         lr, [sp], #4
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN18@PrcmVoltSe@7|
  000a4		 |$LN19@PrcmVoltSe@7|
  000a4	00000000	 DCD         |g_pPrcmPrm|
  000a8		 |$M47535|

			 ENDP  ; |PrcmVoltSetVoltageLevel|

	EXPORT	|PrcmVoltSetInitVddLevel|

  00000			 AREA	 |.pdata|, PDATA
|$T47550| DCD	|$LN9@PrcmVoltSe@8|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltSetInitVddLevel| PROC

; 348  : {

  00000		 |$LN9@PrcmVoltSe@8|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47547|
  00004	e1a0e001	 mov         lr, r1
  00008	e3500000	 cmp         r0, #0

; 349  :     UINT val;
; 350  : 
; 351  :     switch (vp)

  0000c	0a00000b	 beq         |$LN2@PrcmVoltSe@8|
  00010	e3500001	 cmp         r0, #1
  00014	1a000011	 bne         |$LN3@PrcmVoltSe@8|

; 358  :             break;
; 359  : 
; 360  :         case kVoltageProcessor2:
; 361  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG);

  00018	e59f3048	 ldr         r3, [pc, #0x48]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e593002c	 ldr         r0, [r3, #0x2C]
  00024	e59020d0	 ldr         r2, [r0, #0xD0]

; 362  :             val &= ~SMPS_INITVOLTAGE_MASK;
; 363  :             val |= ((initVolt << SMPS_INITVOLTAGE_SHIFT) & SMPS_INITVOLTAGE_MASK);
; 364  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, val);

  00028	e022340e	 eor         r3, r2, lr, lsl #8
  0002c	e2033cff	 and         r3, r3, #0xFF, 24
  00030	e0233002	 eor         r3, r3, r2
  00034	e58030d0	 str         r3, [r0, #0xD0]

; 365  :             break;
; 366  :         }
; 367  : }

  00038	e49de004	 ldr         lr, [sp], #4
  0003c	e12fff1e	 bx          lr
  00040		 |$LN2@PrcmVoltSe@8|

; 352  :         {
; 353  :         case kVoltageProcessor1:
; 354  :             val = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG);

  00040	e59f3020	 ldr         r3, [pc, #0x20]
  00044	e5933000	 ldr         r3, [r3]
  00048	e593102c	 ldr         r1, [r3, #0x2C]
  0004c	e59120b0	 ldr         r2, [r1, #0xB0]

; 355  :             val &= ~SMPS_INITVOLTAGE_MASK;
; 356  :             val |= ((initVolt << SMPS_INITVOLTAGE_SHIFT) & SMPS_INITVOLTAGE_MASK);
; 357  :             OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, val);

  00050	e022340e	 eor         r3, r2, lr, lsl #8
  00054	e2033cff	 and         r3, r3, #0xFF, 24
  00058	e0233002	 eor         r3, r3, r2
  0005c	e58130b0	 str         r3, [r1, #0xB0]
  00060		 |$LN3@PrcmVoltSe@8|

; 365  :             break;
; 366  :         }
; 367  : }

  00060	e49de004	 ldr         lr, [sp], #4
  00064	e12fff1e	 bx          lr
  00068		 |$LN10@PrcmVoltSe@8|
  00068		 |$LN11@PrcmVoltSe@8|
  00068	00000000	 DCD         |g_pPrcmPrm|
  0006c		 |$M47548|

			 ENDP  ; |PrcmVoltSetInitVddLevel|

	EXPORT	|PrcmVoltEnableTimeout|

  00000			 AREA	 |.pdata|, PDATA
|$T47563| DCD	|$LN15@PrcmVoltEn|
	DCD	0x40001a00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltEnableTimeout| PROC

; 375  : {

  00000		 |$LN15@PrcmVoltEn|
  00000		 |$M47560|
  00000	e3500000	 cmp         r0, #0

; 376  :     switch (vp)

  00004	0a00000b	 beq         |$LN6@PrcmVoltEn|
  00008	e3500001	 cmp         r0, #1
  0000c	1a000013	 bne         |$LN4@PrcmVoltEn|

; 386  :                 }
; 387  :             break;
; 388  : 
; 389  :         case kVoltageProcessor2:
; 390  :             if (bEnable != FALSE)
; 391  :                 {
; 392  :                 SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, SMPS_TIMEOUTEN);

  00010	e59f304c	 ldr         r3, [pc, #0x4C]
  00014	e3510000	 cmp         r1, #0
  00018	e5933000	 ldr         r3, [r3]
  0001c	e593202c	 ldr         r2, [r3, #0x2C]
  00020	e59230d0	 ldr         r3, [r2, #0xD0]
  00024	13833008	 orrne       r3, r3, #8

; 393  :                 }
; 394  :             else
; 395  :                 {
; 396  :                 CLRREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, SMPS_TIMEOUTEN);

  00028	158230d0	 strne       r3, [r2, #0xD0]
  0002c	03c33008	 biceq       r3, r3, #8
  00030	058230d0	 streq       r3, [r2, #0xD0]

; 397  :                 }
; 398  :             break;
; 399  :         } 
; 400  : }

  00034	e12fff1e	 bx          lr
  00038		 |$LN6@PrcmVoltEn|

; 377  :         {
; 378  :         case kVoltageProcessor1:
; 379  :             if (bEnable != FALSE)
; 380  :                 {
; 381  :                 SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, SMPS_TIMEOUTEN);

  00038	e59f3024	 ldr         r3, [pc, #0x24]
  0003c	e3510000	 cmp         r1, #0
  00040	e5933000	 ldr         r3, [r3]
  00044	e593202c	 ldr         r2, [r3, #0x2C]
  00048	e59230b0	 ldr         r3, [r2, #0xB0]
  0004c	13833008	 orrne       r3, r3, #8

; 382  :                 }
; 383  :             else
; 384  :                 {
; 385  :                 CLRREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, SMPS_TIMEOUTEN);

  00050	158230b0	 strne       r3, [r2, #0xB0]

; 397  :                 }
; 398  :             break;
; 399  :         } 
; 400  : }

  00054	112fff1e	 bxne        lr

; 382  :                 }
; 383  :             else
; 384  :                 {
; 385  :                 CLRREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, SMPS_TIMEOUTEN);

  00058	e3c33008	 bic         r3, r3, #8
  0005c	e58230b0	 str         r3, [r2, #0xB0]
  00060		 |$LN4@PrcmVoltEn|

; 397  :                 }
; 398  :             break;
; 399  :         } 
; 400  : }

  00060	e12fff1e	 bx          lr
  00064		 |$LN16@PrcmVoltEn|
  00064		 |$LN17@PrcmVoltEn|
  00064	00000000	 DCD         |g_pPrcmPrm|
  00068		 |$M47561|

			 ENDP  ; |PrcmVoltEnableTimeout|

	EXPORT	|PrcmVoltEnableVp|

  00000			 AREA	 |.pdata|, PDATA
|$T47576| DCD	|$LN15@PrcmVoltEn@2|
	DCD	0x40001a00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltEnableVp| PROC

; 408  : {

  00000		 |$LN15@PrcmVoltEn@2|
  00000		 |$M47573|
  00000	e3500000	 cmp         r0, #0

; 409  :     switch (vp)

  00004	0a00000b	 beq         |$LN6@PrcmVoltEn@2|
  00008	e3500001	 cmp         r0, #1
  0000c	1a000013	 bne         |$LN4@PrcmVoltEn@2|

; 419  :                 }
; 420  :             break;
; 421  : 
; 422  :         case kVoltageProcessor2:
; 423  :             if (bEnable != FALSE)
; 424  :                 {
; 425  :                 SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, SMPS_VPENABLE);

  00010	e59f304c	 ldr         r3, [pc, #0x4C]
  00014	e3510000	 cmp         r1, #0
  00018	e5933000	 ldr         r3, [r3]
  0001c	e593202c	 ldr         r2, [r3, #0x2C]
  00020	e59230d0	 ldr         r3, [r2, #0xD0]
  00024	13833001	 orrne       r3, r3, #1

; 426  :                 }
; 427  :             else
; 428  :                 {
; 429  :                 CLRREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, SMPS_VPENABLE);

  00028	158230d0	 strne       r3, [r2, #0xD0]
  0002c	03c33001	 biceq       r3, r3, #1
  00030	058230d0	 streq       r3, [r2, #0xD0]

; 430  :                 }
; 431  :             break;
; 432  :         }  
; 433  : }

  00034	e12fff1e	 bx          lr
  00038		 |$LN6@PrcmVoltEn@2|

; 410  :         {
; 411  :         case kVoltageProcessor1:
; 412  :             if (bEnable != FALSE)
; 413  :                 {
; 414  :                 SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, SMPS_VPENABLE);

  00038	e59f3024	 ldr         r3, [pc, #0x24]
  0003c	e3510000	 cmp         r1, #0
  00040	e5933000	 ldr         r3, [r3]
  00044	e593202c	 ldr         r2, [r3, #0x2C]
  00048	e59230b0	 ldr         r3, [r2, #0xB0]
  0004c	13833001	 orrne       r3, r3, #1

; 415  :                 }
; 416  :             else
; 417  :                 {
; 418  :                 CLRREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, SMPS_VPENABLE);

  00050	158230b0	 strne       r3, [r2, #0xB0]

; 430  :                 }
; 431  :             break;
; 432  :         }  
; 433  : }

  00054	112fff1e	 bxne        lr

; 415  :                 }
; 416  :             else
; 417  :                 {
; 418  :                 CLRREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, SMPS_VPENABLE);

  00058	e3c33001	 bic         r3, r3, #1
  0005c	e58230b0	 str         r3, [r2, #0xB0]
  00060		 |$LN4@PrcmVoltEn@2|

; 430  :                 }
; 431  :             break;
; 432  :         }  
; 433  : }

  00060	e12fff1e	 bx          lr
  00064		 |$LN16@PrcmVoltEn@2|
  00064		 |$LN17@PrcmVoltEn@2|
  00064	00000000	 DCD         |g_pPrcmPrm|
  00068		 |$M47574|

			 ENDP  ; |PrcmVoltEnableVp|

	EXPORT	|PrcmVoltFlushVoltageLevels|

  00000			 AREA	 |.pdata|, PDATA
|$T47586| DCD	|$LN10@PrcmVoltFl|
	DCD	0x40001d00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltFlushVoltageLevels| PROC

; 440  : {

  00000		 |$LN10@PrcmVoltFl|
  00000		 |$M47583|
  00000	e3500000	 cmp         r0, #0

; 441  :     switch (vp)

  00004	0a00000d	 beq         |$LN3@PrcmVoltFl|
  00008	e3500001	 cmp         r0, #1
  0000c	1a000016	 bne         |$LN4@PrcmVoltFl|

; 446  :             break;
; 447  : 
; 448  :         case kVoltageProcessor2:
; 449  :             SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, SMPS_INITVDD | SMPS_FORCEUPDATE);

  00010	e59f1058	 ldr         r1, [pc, #0x58]

; 450  :             CLRREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG, SMPS_INITVDD | SMPS_FORCEUPDATE);

  00014	e5913000	 ldr         r3, [r1]
  00018	e593202c	 ldr         r2, [r3, #0x2C]
  0001c	e59230d0	 ldr         r3, [r2, #0xD0]
  00020	e3833006	 orr         r3, r3, #6
  00024	e58230d0	 str         r3, [r2, #0xD0]
  00028	e5913000	 ldr         r3, [r1]
  0002c	e593202c	 ldr         r2, [r3, #0x2C]
  00030	e59230d0	 ldr         r3, [r2, #0xD0]
  00034	e3c33006	 bic         r3, r3, #6
  00038	e58230d0	 str         r3, [r2, #0xD0]

; 451  :             break;
; 452  : 
; 453  :         default:
; 454  :             return;
; 455  :         }
; 456  : }

  0003c	e12fff1e	 bx          lr
  00040		 |$LN3@PrcmVoltFl|

; 442  :         {
; 443  :         case kVoltageProcessor1:
; 444  :             SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, SMPS_INITVDD | SMPS_FORCEUPDATE);

  00040	e59f1028	 ldr         r1, [pc, #0x28]

; 445  :             CLRREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG, SMPS_INITVDD | SMPS_FORCEUPDATE);

  00044	e5913000	 ldr         r3, [r1]
  00048	e593202c	 ldr         r2, [r3, #0x2C]
  0004c	e59230b0	 ldr         r3, [r2, #0xB0]
  00050	e3833006	 orr         r3, r3, #6
  00054	e58230b0	 str         r3, [r2, #0xB0]
  00058	e5913000	 ldr         r3, [r1]
  0005c	e593202c	 ldr         r2, [r3, #0x2C]
  00060	e59230b0	 ldr         r3, [r2, #0xB0]
  00064	e3c33006	 bic         r3, r3, #6
  00068	e58230b0	 str         r3, [r2, #0xB0]
  0006c		 |$LN4@PrcmVoltFl|

; 451  :             break;
; 452  : 
; 453  :         default:
; 454  :             return;
; 455  :         }
; 456  : }

  0006c	e12fff1e	 bx          lr
  00070		 |$LN11@PrcmVoltFl|
  00070		 |$LN12@PrcmVoltFl|
  00070	00000000	 DCD         |g_pPrcmPrm|
  00074		 |$M47584|

			 ENDP  ; |PrcmVoltFlushVoltageLevels|

	EXPORT	|PrcmVoltIdleCheck|

  00000			 AREA	 |.pdata|, PDATA
|$T47600| DCD	|$LN11@PrcmVoltId|
	DCD	0x40001200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltIdleCheck| PROC

; 463  : {

  00000		 |$LN11@PrcmVoltId|
  00000		 |$M47597|
  00000	e1b03000	 movs        r3, r0

; 464  :     UINT vpStatus;
; 465  :     BOOL rc = FALSE;

  00004	e3a00000	 mov         r0, #0

; 466  : 
; 467  :     switch (vp)

  00008	0a000006	 beq         |$LN4@PrcmVoltId|
  0000c	e3530001	 cmp         r3, #1
  00010	1a00000a	 bne         |$cleanUp$47265|

; 471  :             break;
; 472  : 
; 473  :         case kVoltageProcessor2:
; 474  :             vpStatus = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_STATUS);

  00014	e59f3028	 ldr         r3, [pc, #0x28]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e593302c	 ldr         r3, [r3, #0x2C]
  00020	e59330e4	 ldr         r3, [r3, #0xE4]

; 475  :             break;

  00024	ea000003	 b           |$LN5@PrcmVoltId|
  00028		 |$LN4@PrcmVoltId|

; 468  :         {
; 469  :         case kVoltageProcessor1:
; 470  :             vpStatus = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_STATUS);

  00028	e59f3014	 ldr         r3, [pc, #0x14]
  0002c	e5933000	 ldr         r3, [r3]
  00030	e593302c	 ldr         r3, [r3, #0x2C]
  00034	e59330c4	 ldr         r3, [r3, #0xC4]
  00038		 |$LN5@PrcmVoltId|

; 476  : 
; 477  :         default:
; 478  :             goto cleanUp;
; 479  :          }
; 480  : 
; 481  :     if (vpStatus & SMPS_VPINIDLE)

  00038	e3130001	 tst         r3, #1

; 482  :         {
; 483  :         rc = TRUE;

  0003c	13a00001	 movne       r0, #1
  00040		 |$cleanUp$47265|

; 484  :         }
; 485  : 
; 486  : cleanUp:
; 487  :     return rc;
; 488  : }

  00040	e12fff1e	 bx          lr
  00044		 |$LN12@PrcmVoltId|
  00044		 |$LN13@PrcmVoltId|
  00044	00000000	 DCD         |g_pPrcmPrm|
  00048		 |$M47598|

			 ENDP  ; |PrcmVoltIdleCheck|

	EXPORT	|PrcmVoltGetVoltageRampDelay|

  00000			 AREA	 |.pdata|, PDATA
|$T47621| DCD	|$LN12@PrcmVoltGe|
	DCD	0x40001d00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltGetVoltageRampDelay| PROC

; 495  : {

  00000		 |$LN12@PrcmVoltGe|
  00000		 |$M47618|
  00000	e1b01000	 movs        r1, r0

; 496  :     UINT curVoltSteps = 0;

  00004	e3a02000	 mov         r2, #0

; 497  :     UINT newVoltSteps = 0;

  00008	e3a03000	 mov         r3, #0

; 498  :     UINT delay = 0;

  0000c	e3a00000	 mov         r0, #0

; 499  : 
; 500  :     switch (vp)

  00010	0a000007	 beq         |$LN3@PrcmVoltGe|
  00014	e3510001	 cmp         r1, #1
  00018	1a00000f	 bne         |$LN8@PrcmVoltGe|

; 510  :             break;
; 511  : 
; 512  :         case kVoltageProcessor2:
; 513  :             curVoltSteps = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_VOLTAGE);

  0001c	e59f304c	 ldr         r3, [pc, #0x4C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e593302c	 ldr         r3, [r3, #0x2C]
  00028	e59320e0	 ldr         r2, [r3, #0xE0]

; 514  :             curVoltSteps &= SMPS_VOLTAGE_MASK;
; 515  :             curVoltSteps >>= SMPS_VOLTAGE_SHIFT;
; 516  : 
; 517  :             newVoltSteps = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP2_CONFIG);

  0002c	e59330d0	 ldr         r3, [r3, #0xD0]

; 518  :             newVoltSteps &= SMPS_INITVOLTAGE_MASK;
; 519  :             newVoltSteps >>= SMPS_INITVOLTAGE_SHIFT;
; 520  :             break;

  00030	ea000004	 b           |$LN9@PrcmVoltGe|
  00034		 |$LN3@PrcmVoltGe|

; 501  :         {
; 502  :         case kVoltageProcessor1:
; 503  :             curVoltSteps = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_VOLTAGE);

  00034	e59f3034	 ldr         r3, [pc, #0x34]
  00038	e5933000	 ldr         r3, [r3]
  0003c	e593302c	 ldr         r3, [r3, #0x2C]
  00040	e59320c0	 ldr         r2, [r3, #0xC0]

; 504  :             curVoltSteps &= SMPS_VOLTAGE_MASK;
; 505  :             curVoltSteps >>= SMPS_VOLTAGE_SHIFT;
; 506  :             
; 507  :             newVoltSteps = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_VP1_CONFIG);

  00044	e59330b0	 ldr         r3, [r3, #0xB0]
  00048		 |$LN9@PrcmVoltGe|

; 508  :             newVoltSteps &= SMPS_INITVOLTAGE_MASK;
; 509  :             newVoltSteps >>= SMPS_INITVOLTAGE_SHIFT;

  00048	e1a03803	 mov         r3, r3, lsl #16
  0004c	e1a03c23	 mov         r3, r3, lsr #24
  00050	e20220ff	 and         r2, r2, #0xFF

; 521  :         }
; 522  : 
; 523  :     if (newVoltSteps < curVoltSteps)

  00054	e1530002	 cmp         r3, r2
  00058	3a000003	 bcc         |$cleanUp$47284|
  0005c		 |$LN8@PrcmVoltGe|

; 524  :         {
; 525  :         goto cleanUp;
; 526  :         }
; 527  : 
; 528  :     // delay = DeltaVDD / Slew Rate
; 529  :     // deltaVDD = steps * 12.5mV , Slew Rate - 4 mv/us
; 530  :     // To avoid floting point operation, formula used - (steps*25)/(slewrate*2)
; 531  :     delay = ((newVoltSteps-curVoltSteps)*25)>>3;

  0005c	e0433002	 sub         r3, r3, r2
  00060	e0833103	 add         r3, r3, r3, lsl #2
  00064	e0833103	 add         r3, r3, r3, lsl #2
  00068	e1a001a3	 mov         r0, r3, lsr #3
  0006c		 |$cleanUp$47284|

; 532  :     
; 533  : cleanUp:
; 534  :     return delay;
; 535  : }

  0006c	e12fff1e	 bx          lr
  00070		 |$LN13@PrcmVoltGe|
  00070		 |$LN14@PrcmVoltGe|
  00070	00000000	 DCD         |g_pPrcmPrm|
  00074		 |$M47619|

			 ENDP  ; |PrcmVoltGetVoltageRampDelay|

	EXPORT	|PrcmVoltScaleVoltageABB|
	IMPORT	|OALTimerGetCount|
	IMPORT	|PrcmClockGetClockRate|

  00000			 AREA	 |.pdata|, PDATA
|$T47672| DCD	|$LN46@PrcmVoltSc|
	DCD	0x40005d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmVoltScaleVoltageABB| PROC

; 553  : {

  00000		 |$LN46@PrcmVoltSc|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M47669|
  00004	e1a04000	 mov         r4, r0

; 554  : 	UINT32 sr2en_enabled;
; 555  : 	UINT32 timeout;
; 556  : 	int sr2_wtcnt_value;
; 557  :     UINT32 regVal =0;
; 558  :     UINT32 tcrr;
; 559  : 
; 560  : 	/* calculate SR2_WTCNT_VALUE settling time */
; 561  : 	sr2_wtcnt_value = (ABB_MAX_SETTLING_TIME * (PrcmClockGetClockRate(SYS_CLK)) / 8);

  00008	e3a00000	 mov         r0, #0
  0000c	eb000000	 bl          PrcmClockGetClockRate

; 562  : 
; 563  : 	/* has SR2EN been enabled previously? */
; 564  : 	sr2en_enabled = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_CTRL) & SMPS_SR2EN;

  00010	e59f5158	 ldr         r5, [pc, #0x158]
  00014	e0603200	 rsb         r3, r0, r0, lsl #4
  00018	e1a03083	 mov         r3, r3, lsl #1
  0001c	e5952000	 ldr         r2, [r5]
  00020	e1a001a3	 mov         r0, r3, lsr #3

; 565  : 
; 566  :     // enable voltage processor
; 567  :     PrcmVoltEnableVp(kVDD1, TRUE);
; 568  : 
; 569  : 	/* select fast, nominal or slow OPP for ABB ldo */
; 570  : 	if (target_opp_no >= ABB_FAST_OPP_VAL) {

  00024	e3540004	 cmp         r4, #4
  00028	e592202c	 ldr         r2, [r2, #0x2C]
  0002c	e59210f4	 ldr         r1, [r2, #0xF4]
  00030	e59230b0	 ldr         r3, [r2, #0xB0]
  00034	e3833001	 orr         r3, r3, #1
  00038	e58230b0	 str         r3, [r2, #0xB0]
  0003c	3a00000d	 bcc         |$LN12@PrcmVoltSc|

; 571  :         
; 572  : 		/* program for fast opp - enable FBB */
; 573  :         regVal = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_SETUP);

  00040	e5953000	 ldr         r3, [r5]

; 574  :         regVal = (regVal & ~(SMPS_OPP_SEL_MASK)) | (ABB_FAST_OPP << SMPS_OPP_SEL_SHIFT);
; 575  :         OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_SETUP,regVal);
; 576  :         
; 577  : 		/* enable the ABB ldo if not done already */
; 578  : 		if (!sr2en_enabled)

  00044	e3110001	 tst         r1, #1
  00048	e593202c	 ldr         r2, [r3, #0x2C]
  0004c	e59230f0	 ldr         r3, [r2, #0xF0]
  00050	e3c33003	 bic         r3, r3, #3
  00054	e3833001	 orr         r3, r3, #1
  00058	e58230f0	 str         r3, [r2, #0xF0]
  0005c	1a00000d	 bne         |$LN8@PrcmVoltSc|

; 579  : 			SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_CTRL,SMPS_SR2EN);

  00060	e5953000	 ldr         r3, [r5]
  00064	e593202c	 ldr         r2, [r3, #0x2C]
  00068	e59230f4	 ldr         r3, [r2, #0xF4]
  0006c	e3833001	 orr         r3, r3, #1
  00070	e58230f4	 str         r3, [r2, #0xF4]

; 580  :         
; 581  : 	} else if (sr2en_enabled) {

  00074	ea000007	 b           |$LN8@PrcmVoltSc|
  00078		 |$LN12@PrcmVoltSc|
  00078	e3110001	 tst         r1, #1
  0007c	0a000033	 beq         |$LN40@PrcmVoltSc|

; 582  : 	
; 583  : 		/* program for nominal opp - bypass ABB ldo */        
; 584  :         regVal = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_SETUP);

  00080	e5953000	 ldr         r3, [r5]

; 585  :         regVal = (regVal & ~(SMPS_OPP_SEL_MASK)) | (ABB_NOMINAL_OPP << SMPS_OPP_SEL_SHIFT);

  00084	e593202c	 ldr         r2, [r3, #0x2C]
  00088	e59230f0	 ldr         r3, [r2, #0xF0]
  0008c	e3c33003	 bic         r3, r3, #3
  00090	e3833002	 orr         r3, r3, #2

; 586  :         OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_SETUP,regVal);

  00094	e58230f0	 str         r3, [r2, #0xF0]
  00098		 |$LN8@PrcmVoltSc|

; 587  :         
; 588  : 	} else {
; 589  : 	
; 590  : 		/* nothing to do here yet... might enable RBB here someday */
; 591  : 		goto cleanUp;
; 592  :         
; 593  : 	}
; 594  : 
; 595  : 	/* set ACTIVE_FBB_SEL for all 45nm silicon */
; 596  :     SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_CTRL,SMPS_ACTIVE_FBB_SEL);

  00098	e5953000	 ldr         r3, [r5]

; 597  : 
; 598  : 	/* program settling time of 30us for ABB ldo transition */
; 599  :     regVal = INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_CTRL);
; 600  :     regVal = (regVal & ~(SMPS_SR2_WTCNT_VALUE_MASK)) | (sr2_wtcnt_value << SMPS_SR2_WTCNT_VALUE_SHIFT);
; 601  :     OUTREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_CTRL,regVal);
; 602  :     
; 603  : 	/* clear ABB ldo interrupt status */    
; 604  :     OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU, PRM_IRQENABLE_ABB_LDO_TRANXDONE_ST);

  0009c	e3a06301	 mov         r6, #1, 6
  000a0	e593202c	 ldr         r2, [r3, #0x2C]
  000a4	e59230f4	 ldr         r3, [r2, #0xF4]
  000a8	e3833004	 orr         r3, r3, #4
  000ac	e58230f4	 str         r3, [r2, #0xF4]
  000b0	e5953000	 ldr         r3, [r5]
  000b4	e593202c	 ldr         r2, [r3, #0x2C]
  000b8	e59230f4	 ldr         r3, [r2, #0xF4]
  000bc	e3c33cff	 bic         r3, r3, #0xFF, 24
  000c0	e1833400	 orr         r3, r3, r0, lsl #8
  000c4	e58230f4	 str         r3, [r2, #0xF4]
  000c8	e5953000	 ldr         r3, [r5]
  000cc	e5933030	 ldr         r3, [r3, #0x30]
  000d0	e5836018	 str         r6, [r3, #0x18]

; 605  :     	
; 606  : 	/* enable ABB LDO OPP change */
; 607  :     SETREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_LDO_ABB_SETUP,SMPS_OPP_CHANGE);

  000d4	e5953000	 ldr         r3, [r5]
  000d8	e593202c	 ldr         r2, [r3, #0x2C]
  000dc	e59230f0	 ldr         r3, [r2, #0xF0]
  000e0	e3833004	 orr         r3, r3, #4
  000e4	e58230f0	 str         r3, [r2, #0xF0]

; 608  : 
; 609  : 	
; 610  : 	/* wait until OPP change completes */
; 611  :     timeout=tcrr=OALTimerGetCount();

  000e8	eb000000	 bl          OALTimerGetCount

; 612  :     while (((INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU) & 
; 613  : 			    PRM_IRQENABLE_ABB_LDO_TRANXDONE_ST) == 0) &&
; 614  :         ((timeout - tcrr) < ABB_MAX_SETTLING_TIME_IN_TICKS))

  000ec	e1a04000	 mov         r4, r0
  000f0	ea000003	 b           |$LN43@PrcmVoltSc|
  000f4		 |$LL7@PrcmVoltSc|
  000f4	e0403004	 sub         r3, r0, r4
  000f8	e353000a	 cmp         r3, #0xA
  000fc	2a000005	 bcs         |$LN41@PrcmVoltSc|

; 615  :     {
; 616  :         timeout=OALTimerGetCount();        

  00100	eb000000	 bl          OALTimerGetCount
  00104		 |$LN43@PrcmVoltSc|
  00104	e5953000	 ldr         r3, [r5]
  00108	e5933030	 ldr         r3, [r3, #0x30]
  0010c	e5933018	 ldr         r3, [r3, #0x18]
  00110	e3130301	 tst         r3, #1, 6
  00114	0afffff6	 beq         |$LL7@PrcmVoltSc|
  00118		 |$LN41@PrcmVoltSc|

; 617  :     }
; 618  : 
; 619  : 	if (timeout >= tcrr+ABB_MAX_SETTLING_TIME_IN_TICKS)
; 620  : 		RETAILMSG(0,(L"ABB: TRANXDONE timed out waiting for OPP change\r\n"));
; 621  :     
; 622  :     timeout=tcrr=OALTimerGetCount();

  00118	eb000000	 bl          OALTimerGetCount
  0011c	e1a04000	 mov         r4, r0
  00120		 |$LL4@PrcmVoltSc|

; 626  : 		OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU, PRM_IRQENABLE_ABB_LDO_TRANXDONE_ST);

  00120	e5953000	 ldr         r3, [r5]
  00124	e5933030	 ldr         r3, [r3, #0x30]
  00128	e5836018	 str         r6, [r3, #0x18]

; 627  : 		if (!(INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU) & 
; 628  : 			    PRM_IRQENABLE_ABB_LDO_TRANXDONE_ST))

  0012c	e5952000	 ldr         r2, [r5]
  00130	e5923030	 ldr         r3, [r2, #0x30]
  00134	e5933018	 ldr         r3, [r3, #0x18]
  00138	e3130301	 tst         r3, #1, 6
  0013c	0a000004	 beq         |$cleanUp$47308|

; 629  : 			break;
; 630  : 
; 631  : 		timeout=OALTimerGetCount();  

  00140	eb000000	 bl          OALTimerGetCount
  00144	e0643000	 rsb         r3, r4, r0
  00148	e353000a	 cmp         r3, #0xA
  0014c	3afffff3	 bcc         |$LL4@PrcmVoltSc|
  00150		 |$LN40@PrcmVoltSc|

; 623  : 	
; 624  : 	/* Clear all pending TRANXDONE interrupts/status */
; 625  : 	while ((timeout - tcrr) < ABB_MAX_SETTLING_TIME_IN_TICKS) {

  00150	e5952000	 ldr         r2, [r5]
  00154		 |$cleanUp$47308|

; 632  : 	}
; 633  : 	if (timeout >= tcrr+ABB_MAX_SETTLING_TIME_IN_TICKS)
; 634  : 		RETAILMSG(0,(L"ABB: TRANXDONE timed out trying to clear status\n"));
; 635  : 
; 636  : cleanUp:
; 637  :     // disable the voltage processor sub-chip
; 638  :     PrcmVoltEnableVp(kVDD1, FALSE);

  00154	e592202c	 ldr         r2, [r2, #0x2C]

; 639  : 	return 0;

  00158	e3a00000	 mov         r0, #0
  0015c	e59230b0	 ldr         r3, [r2, #0xB0]
  00160	e3c33001	 bic         r3, r3, #1
  00164	e58230b0	 str         r3, [r2, #0xB0]

; 640  : }

  00168	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0016c	e12fff1e	 bx          lr
  00170		 |$LN47@PrcmVoltSc|
  00170		 |$LN48@PrcmVoltSc|
  00170	00000000	 DCD         |g_pPrcmPrm|
  00174		 |$M47670|

			 ENDP  ; |PrcmVoltScaleVoltageABB|

	END
