; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\OAL\PRCM\prcm_device.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|_PrcmDeviceSetSourceClock_DSS|
	EXPORT	|_PrcmDeviceEnableFClock_DSS|
	EXPORT	|_PrcmDeviceEnableIClock_DSS|
	EXPORT	|_PrcmDeviceSetSourceClock_USB|
	EXPORT	|_PrcmDeviceEnableFClock_USB|
	EXPORT	|_PrcmDeviceEnableIClock_USB|
	EXPORT	|_PrcmDeviceSetSourceClock|
	EXPORT	|_PrcmDeviceEnableAutoIdle|
	EXPORT	|_PrcmDeviceEnableFClock|
	EXPORT	|_PrcmDeviceEnableIClock|
	EXPORT	|_autoIdle_D2D| [ DATA ]
	EXPORT	|_autoIdle_SSI| [ DATA ]
	EXPORT	|_autoIdle_HDQ| [ DATA ]
	EXPORT	|_autoIdle_ICR| [ DATA ]
	EXPORT	|_autoIdle_I2C1| [ DATA ]
	EXPORT	|_autoIdle_I2C2| [ DATA ]
	EXPORT	|_autoIdle_I2C3| [ DATA ]
	EXPORT	|_autoIdle_MMC1| [ DATA ]
	EXPORT	|_autoIdle_MMC2| [ DATA ]
	EXPORT	|_autoIdle_MMC3| [ DATA ]
	EXPORT	|_autoIdle_AES2| [ DATA ]
	EXPORT	|_autoIdle_DES2| [ DATA ]
	EXPORT	|_autoIdle_UART1| [ DATA ]
	EXPORT	|_autoIdle_UART2| [ DATA ]
	EXPORT	|_autoIdle_MSPRO| [ DATA ]
	EXPORT	|_autoIdle_SHA12| [ DATA ]
	EXPORT	|_autoIdle_MCBSP1| [ DATA ]
	EXPORT	|_autoIdle_MCBSP5| [ DATA ]
	EXPORT	|_autoIdle_MCSPI1| [ DATA ]
	EXPORT	|_autoIdle_MCSPI2| [ DATA ]
	EXPORT	|_autoIdle_MCSPI3| [ DATA ]
	EXPORT	|_autoIdle_MCSPI4| [ DATA ]
	EXPORT	|_autoIdle_GPT10| [ DATA ]
	EXPORT	|_autoIdle_GPT11| [ DATA ]
	EXPORT	|_autoIdle_OMAPCTRL| [ DATA ]
	EXPORT	|_autoIdle_HSOTGUSB| [ DATA ]
	EXPORT	|_autoIdle_MAILBOXES| [ DATA ]
	EXPORT	|_autoIdle_PKA| [ DATA ]
	EXPORT	|_autoIdle_RNG| [ DATA ]
	EXPORT	|_autoIdle_AES1| [ DATA ]
	EXPORT	|_autoIdle_DES1| [ DATA ]
	EXPORT	|_autoIdle_SHA11| [ DATA ]
	EXPORT	|_autoIdle_USBTLL| [ DATA ]
	EXPORT	|_autoIdle_GPT1| [ DATA ]
	EXPORT	|_autoIdle_GPT12| [ DATA ]
	EXPORT	|_autoIdle_32KSYNC| [ DATA ]
	EXPORT	|_autoIdle_GPIO1| [ DATA ]
	EXPORT	|_autoIdle_WDT1| [ DATA ]
	EXPORT	|_autoIdle_WDT2| [ DATA ]
	EXPORT	|_autoIdle_USIM| [ DATA ]
	EXPORT	|_autoIdle_WDT3| [ DATA ]
	EXPORT	|_autoIdle_GPT2| [ DATA ]
	EXPORT	|_autoIdle_GPT3| [ DATA ]
	EXPORT	|_autoIdle_GPT4| [ DATA ]
	EXPORT	|_autoIdle_GPT5| [ DATA ]
	EXPORT	|_autoIdle_GPT6| [ DATA ]
	EXPORT	|_autoIdle_GPT7| [ DATA ]
	EXPORT	|_autoIdle_GPT8| [ DATA ]
	EXPORT	|_autoIdle_GPT9| [ DATA ]
	EXPORT	|_autoIdle_UART3| [ DATA ]
	EXPORT	|_autoIdle_GPIO2| [ DATA ]
	EXPORT	|_autoIdle_GPIO3| [ DATA ]
	EXPORT	|_autoIdle_GPIO4| [ DATA ]
	EXPORT	|_autoIdle_GPIO5| [ DATA ]
	EXPORT	|_autoIdle_GPIO6| [ DATA ]
	EXPORT	|_autoIdle_MCBSP2| [ DATA ]
	EXPORT	|_autoIdle_MCBSP3| [ DATA ]
	EXPORT	|_autoIdle_MCBSP4| [ DATA ]
	EXPORT	|_autoIdle_UART4| [ DATA ]
	EXPORT	|_autoIdle_DSS| [ DATA ]
	EXPORT	|_autoIdle_CAM| [ DATA ]
	EXPORT	|_autoIdle_USBHOST| [ DATA ]
	EXPORT	|_idleStat_D2D| [ DATA ]
	EXPORT	|_idleStat_SSI| [ DATA ]
	EXPORT	|_idleStat_HDQ| [ DATA ]
	EXPORT	|_idleStat_ICR| [ DATA ]
	EXPORT	|_idleStat_SDRC| [ DATA ]
	EXPORT	|_idleStat_I2C1| [ DATA ]
	EXPORT	|_idleStat_I2C2| [ DATA ]
	EXPORT	|_idleStat_I2C3| [ DATA ]
	EXPORT	|_idleStat_MMC1| [ DATA ]
	EXPORT	|_idleStat_MMC2| [ DATA ]
	EXPORT	|_idleStat_MMC3| [ DATA ]
	EXPORT	|_idleStat_AES2| [ DATA ]
	EXPORT	|_idleStat_DES2| [ DATA ]
	EXPORT	|_idleStat_UART1| [ DATA ]
	EXPORT	|_idleStat_UART2| [ DATA ]
	EXPORT	|_idleStat_MSPRO| [ DATA ]
	EXPORT	|_idleStat_SHA12| [ DATA ]
	EXPORT	|_idleStat_MCBSP1| [ DATA ]
	EXPORT	|_idleStat_MCBSP5| [ DATA ]
	EXPORT	|_idleStat_MCSPI1| [ DATA ]
	EXPORT	|_idleStat_MCSPI2| [ DATA ]
	EXPORT	|_idleStat_MCSPI3| [ DATA ]
	EXPORT	|_idleStat_MCSPI4| [ DATA ]
	EXPORT	|_idleStat_GPT10| [ DATA ]
	EXPORT	|_idleStat_GPT11| [ DATA ]
	EXPORT	|_idleStat_HSOTGUSB| [ DATA ]
	EXPORT	|_idleStat_OMAPCTRL| [ DATA ]
	EXPORT	|_idleStat_MAILBOXES| [ DATA ]
	EXPORT	|_idleStat_PKA| [ DATA ]
	EXPORT	|_idleStat_RNG| [ DATA ]
	EXPORT	|_idleStat_AES1| [ DATA ]
	EXPORT	|_idleStat_DES1| [ DATA ]
	EXPORT	|_idleStat_SHA11| [ DATA ]
	EXPORT	|_idleStat_USBTLL| [ DATA ]
	EXPORT	|_idleStat_CPEFUSE| [ DATA ]
	EXPORT	|_idleStat_GPT1| [ DATA ]
	EXPORT	|_idleStat_GPT12| [ DATA ]
	EXPORT	|_idleStat_32KSYNC| [ DATA ]
	EXPORT	|_idleStat_GPIO1| [ DATA ]
	EXPORT	|_idleStat_WDT1| [ DATA ]
	EXPORT	|_idleStat_WDT2| [ DATA ]
	EXPORT	|_idleStat_USIM| [ DATA ]
	EXPORT	|_idleStat_SR1| [ DATA ]
	EXPORT	|_idleStat_SR2| [ DATA ]
	EXPORT	|_idleStat_WDT3| [ DATA ]
	EXPORT	|_idleStat_UART3| [ DATA ]
	EXPORT	|_idleStat_GPIO2| [ DATA ]
	EXPORT	|_idleStat_GPIO3| [ DATA ]
	EXPORT	|_idleStat_GPIO4| [ DATA ]
	EXPORT	|_idleStat_GPIO5| [ DATA ]
	EXPORT	|_idleStat_GPIO6| [ DATA ]
	EXPORT	|_idleStat_MCBSP2| [ DATA ]
	EXPORT	|_idleStat_MCBSP3| [ DATA ]
	EXPORT	|_idleStat_MCBSP4| [ DATA ]
	EXPORT	|_idleStat_GPT2| [ DATA ]
	EXPORT	|_idleStat_GPT3| [ DATA ]
	EXPORT	|_idleStat_GPT4| [ DATA ]
	EXPORT	|_idleStat_GPT5| [ DATA ]
	EXPORT	|_idleStat_GPT6| [ DATA ]
	EXPORT	|_idleStat_GPT7| [ DATA ]
	EXPORT	|_idleStat_GPT8| [ DATA ]
	EXPORT	|_idleStat_GPT9| [ DATA ]
	EXPORT	|_idleStat_UART4| [ DATA ]
	EXPORT	|_idleStat_DSS| [ DATA ]
	EXPORT	|_idleStat_CAM| [ DATA ]
	EXPORT	|_idleStat_SGX| [ DATA ]
	EXPORT	|_idleStat_IVA2| [ DATA ]
	EXPORT	|_idleStat_USBHOST| [ DATA ]
	EXPORT	|_iclk_D2D| [ DATA ]
	EXPORT	|_iclk_SSI| [ DATA ]
	EXPORT	|_iclk_HDQ| [ DATA ]
	EXPORT	|_iclk_ICR| [ DATA ]
	EXPORT	|_iclk_SDRC| [ DATA ]
	EXPORT	|_iclk_I2C1| [ DATA ]
	EXPORT	|_iclk_I2C2| [ DATA ]
	EXPORT	|_iclk_I2C3| [ DATA ]
	EXPORT	|_iclk_MMC1| [ DATA ]
	EXPORT	|_iclk_MMC2| [ DATA ]
	EXPORT	|_iclk_MMC3| [ DATA ]
	EXPORT	|_iclk_AES2| [ DATA ]
	EXPORT	|_iclk_DES2| [ DATA ]
	EXPORT	|_iclk_UART1| [ DATA ]
	EXPORT	|_iclk_UART2| [ DATA ]
	EXPORT	|_iclk_MSPRO| [ DATA ]
	EXPORT	|_iclk_SHA12| [ DATA ]
	EXPORT	|_iclk_MCBSP1| [ DATA ]
	EXPORT	|_iclk_MCBSP5| [ DATA ]
	EXPORT	|_iclk_MCSPI1| [ DATA ]
	EXPORT	|_iclk_MCSPI2| [ DATA ]
	EXPORT	|_iclk_MCSPI3| [ DATA ]
	EXPORT	|_iclk_MCSPI4| [ DATA ]
	EXPORT	|_iclk_GPT10| [ DATA ]
	EXPORT	|_iclk_GPT11| [ DATA ]
	EXPORT	|_iclk_OMAPCTRL| [ DATA ]
	EXPORT	|_iclk_HSOTGUSB| [ DATA ]
	EXPORT	|_iclk_MAILBOXES| [ DATA ]
	EXPORT	|_iclk_PKA| [ DATA ]
	EXPORT	|_iclk_RNG| [ DATA ]
	EXPORT	|_iclk_AES1| [ DATA ]
	EXPORT	|_iclk_DES1| [ DATA ]
	EXPORT	|_iclk_SHA11| [ DATA ]
	EXPORT	|_iclk_USBTLL| [ DATA ]
	EXPORT	|_iclk_VRFB| [ DATA ]
	EXPORT	|_iclk_GPT1| [ DATA ]
	EXPORT	|_iclk_GPT12| [ DATA ]
	EXPORT	|_iclk_32KSYNC| [ DATA ]
	EXPORT	|_iclk_GPIO1| [ DATA ]
	EXPORT	|_iclk_WDT1| [ DATA ]
	EXPORT	|_iclk_WDT2| [ DATA ]
	EXPORT	|_iclk_USIM| [ DATA ]
	EXPORT	|_iclk_WDT3| [ DATA ]
	EXPORT	|_iclk_GPT2| [ DATA ]
	EXPORT	|_iclk_GPT3| [ DATA ]
	EXPORT	|_iclk_GPT4| [ DATA ]
	EXPORT	|_iclk_GPT5| [ DATA ]
	EXPORT	|_iclk_GPT6| [ DATA ]
	EXPORT	|_iclk_GPT7| [ DATA ]
	EXPORT	|_iclk_GPT8| [ DATA ]
	EXPORT	|_iclk_GPT9| [ DATA ]
	EXPORT	|_iclk_UART3| [ DATA ]
	EXPORT	|_iclk_GPIO2| [ DATA ]
	EXPORT	|_iclk_GPIO3| [ DATA ]
	EXPORT	|_iclk_GPIO4| [ DATA ]
	EXPORT	|_iclk_GPIO5| [ DATA ]
	EXPORT	|_iclk_GPIO6| [ DATA ]
	EXPORT	|_iclk_MCBSP2| [ DATA ]
	EXPORT	|_iclk_MCBSP3| [ DATA ]
	EXPORT	|_iclk_MCBSP4| [ DATA ]
	EXPORT	|_iclk_UART4| [ DATA ]
	EXPORT	|_iclk_DSS| [ DATA ]
	EXPORT	|_iclk_CAM| [ DATA ]
	EXPORT	|_iclk_IVA2| [ DATA ]
	EXPORT	|_iclk_SGX| [ DATA ]
	EXPORT	|_iclk_USBHOST| [ DATA ]
	EXPORT	|_iclk_USBHOST1| [ DATA ]
	EXPORT	|_iclk_USBHOST2| [ DATA ]
	EXPORT	|_iclk_USBHOST3| [ DATA ]
	EXPORT	|_fclk_D2D| [ DATA ]
	EXPORT	|_fclk_SSI| [ DATA ]
	EXPORT	|_fclk_HDQ| [ DATA ]
	EXPORT	|_fclk_I2C1| [ DATA ]
	EXPORT	|_fclk_I2C2| [ DATA ]
	EXPORT	|_fclk_I2C3| [ DATA ]
	EXPORT	|_fclk_MMC1| [ DATA ]
	EXPORT	|_fclk_MMC2| [ DATA ]
	EXPORT	|_fclk_MMC3| [ DATA ]
	EXPORT	|_fclk_UART1| [ DATA ]
	EXPORT	|_fclk_UART2| [ DATA ]
	EXPORT	|_fclk_MSPRO| [ DATA ]
	EXPORT	|_fclk_MCBSP1| [ DATA ]
	EXPORT	|_fclk_MCBSP5| [ DATA ]
	EXPORT	|_fclk_MCSPI1| [ DATA ]
	EXPORT	|_fclk_MCSPI2| [ DATA ]
	EXPORT	|_fclk_MCSPI3| [ DATA ]
	EXPORT	|_fclk_MCSPI4| [ DATA ]
	EXPORT	|_fclk_GPT10| [ DATA ]
	EXPORT	|_fclk_GPT11| [ DATA ]
	EXPORT	|_fclk_USBTLL| [ DATA ]
	EXPORT	|_fclk_CPEFUSE| [ DATA ]
	EXPORT	|_fclk_TS| [ DATA ]
	EXPORT	|_fclk_GPT1| [ DATA ]
	EXPORT	|_fclk_GPIO1| [ DATA ]
	EXPORT	|_fclk_WDT2| [ DATA ]
	EXPORT	|_fclk_USIM| [ DATA ]
	EXPORT	|_fclk_SR1| [ DATA ]
	EXPORT	|_fclk_SR2| [ DATA ]
	EXPORT	|_fclk_WDT3| [ DATA ]
	EXPORT	|_fclk_UART3| [ DATA ]
	EXPORT	|_fclk_GPIO2| [ DATA ]
	EXPORT	|_fclk_GPIO3| [ DATA ]
	EXPORT	|_fclk_GPIO4| [ DATA ]
	EXPORT	|_fclk_GPIO5| [ DATA ]
	EXPORT	|_fclk_GPIO6| [ DATA ]
	EXPORT	|_fclk_MCBSP2| [ DATA ]
	EXPORT	|_fclk_MCBSP3| [ DATA ]
	EXPORT	|_fclk_MCBSP4| [ DATA ]
	EXPORT	|_fclk_GPT2| [ DATA ]
	EXPORT	|_fclk_GPT3| [ DATA ]
	EXPORT	|_fclk_GPT4| [ DATA ]
	EXPORT	|_fclk_GPT5| [ DATA ]
	EXPORT	|_fclk_GPT6| [ DATA ]
	EXPORT	|_fclk_GPT7| [ DATA ]
	EXPORT	|_fclk_GPT8| [ DATA ]
	EXPORT	|_fclk_GPT9| [ DATA ]
	EXPORT	|_fclk_UART4| [ DATA ]
	EXPORT	|_fclk_DSS| [ DATA ]
	EXPORT	|_fclk_DSS1| [ DATA ]
	EXPORT	|_fclk_DSS2| [ DATA ]
	EXPORT	|_fclk_TVOUT| [ DATA ]
	EXPORT	|_fclk_CAM| [ DATA ]
	EXPORT	|_fclk_CSI2| [ DATA ]
	EXPORT	|_fclk_3D| [ DATA ]
	EXPORT	|_fclk_SGX| [ DATA ]
	EXPORT	|_fclk_IVA2| [ DATA ]
	EXPORT	|_fclk_HSUSB2| [ DATA ]
	EXPORT	|_fclk_HSUSB1| [ DATA ]
	EXPORT	|_fclk_USBHOST1| [ DATA ]
	EXPORT	|_fclk_USBHOST2| [ DATA ]
	EXPORT	|_fclk_USBHOST3| [ DATA ]
	EXPORT	|_wken_D2D| [ DATA ]
	EXPORT	|_wken_I2C1| [ DATA ]
	EXPORT	|_wken_I2C2| [ DATA ]
	EXPORT	|_wken_I2C3| [ DATA ]
	EXPORT	|_wken_MMC1| [ DATA ]
	EXPORT	|_wken_MMC2| [ DATA ]
	EXPORT	|_wken_MMC3| [ DATA ]
	EXPORT	|_wken_UART1| [ DATA ]
	EXPORT	|_wken_UART2| [ DATA ]
	EXPORT	|_wken_MCBSP1| [ DATA ]
	EXPORT	|_wken_MCBSP5| [ DATA ]
	EXPORT	|_wken_MCSPI1| [ DATA ]
	EXPORT	|_wken_MCSPI2| [ DATA ]
	EXPORT	|_wken_MCSPI3| [ DATA ]
	EXPORT	|_wken_MCSPI4| [ DATA ]
	EXPORT	|_wken_GPT10| [ DATA ]
	EXPORT	|_wken_GPT11| [ DATA ]
	EXPORT	|_wken_HSOTGUSB| [ DATA ]
	EXPORT	|_wken_USBTLL| [ DATA ]
	EXPORT	|_wken_GPT1| [ DATA ]
	EXPORT	|_wken_GPIO1| [ DATA ]
	EXPORT	|_wken_SR1| [ DATA ]
	EXPORT	|_wken_SR2| [ DATA ]
	EXPORT	|_wken_IO| [ DATA ]
	EXPORT	|_wken_USIM| [ DATA ]
	EXPORT	|_wken_UART3| [ DATA ]
	EXPORT	|_wken_GPIO2| [ DATA ]
	EXPORT	|_wken_GPIO3| [ DATA ]
	EXPORT	|_wken_GPIO4| [ DATA ]
	EXPORT	|_wken_GPIO5| [ DATA ]
	EXPORT	|_wken_GPIO6| [ DATA ]
	EXPORT	|_wken_MCBSP2| [ DATA ]
	EXPORT	|_wken_MCBSP3| [ DATA ]
	EXPORT	|_wken_MCBSP4| [ DATA ]
	EXPORT	|_wken_GPT2| [ DATA ]
	EXPORT	|_wken_GPT3| [ DATA ]
	EXPORT	|_wken_GPT4| [ DATA ]
	EXPORT	|_wken_GPT5| [ DATA ]
	EXPORT	|_wken_GPT6| [ DATA ]
	EXPORT	|_wken_GPT7| [ DATA ]
	EXPORT	|_wken_GPT8| [ DATA ]
	EXPORT	|_wken_GPT9| [ DATA ]
	EXPORT	|_wken_UART4| [ DATA ]
	EXPORT	|_wken_DSS| [ DATA ]
	EXPORT	|_wken_USBHOST| [ DATA ]
	EXPORT	|s_rgDeviceLookupTable| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|_fclk_USBHOST1| % 0x10
|_fclk_USBHOST2| % 0x10
|_fclk_USBHOST3| % 0x10
|s_rgActiveDomainDeviceCount| % 0x34

  00000			 AREA	 |.data|, DATA
|_SR_SourceClock| DCD 0x1
	DCD	0x13
|_USIM_SourceClock| DCD 0x1
	DCD	0x13
|_CPEFUSE_SourceClock| DCD 0x1
	DCD	0x12
|_SSI_SourceClock| DCD 0x2
	DCD	0x38
	DCD	0x39
|_MCBSP1_SourceClock| DCD 0x1
	DCD	0x55
|_MCBSP2_SourceClock| DCD 0x1
	DCD	0x56
|_MCBSP3_SourceClock| DCD 0x1
	DCD	0x57
|_MCBSP4_SourceClock| DCD 0x1
	DCD	0x58
|_MCBSP5_SourceClock| DCD 0x1
	DCD	0x59
|_MMC1_SourceClock| DCD 0x2
	DCD	0x46
	DCD	0x1d
|_MMC2_SourceClock| DCD 0x2
	DCD	0x46
	DCD	0x1d
|_MMC3_SourceClock| DCD 0x2
	DCD	0x46
	DCD	0x1d
|_GPT1_SourceClock| DCD 0x1
	DCD	0x4a
|_GPT2_SourceClock| DCD 0x1
	DCD	0x4b
|_GPT3_SourceClock| DCD 0x1
	DCD	0x4c
|_GPT4_SourceClock| DCD 0x1
	DCD	0x4d
|_GPT5_SourceClock| DCD 0x1
	DCD	0x4e
|_GPT6_SourceClock| DCD 0x1
	DCD	0x4f
|_GPT7_SourceClock| DCD 0x1
	DCD	0x50
|_GPT8_SourceClock| DCD 0x1
	DCD	0x51
|_GPT9_SourceClock| DCD 0x1
	DCD	0x52
|_GPT10_SourceClock| DCD 0x1
	DCD	0x53
|_GPT11_SourceClock| DCD 0x1
	DCD	0x54
|_GPT12_SourceClock| DCD 0x1
	DCD	0xe
|_DSS1_SourceClock| DCD 0x1
	DCD	0x7
|_DSS2_SourceClock| DCD 0x1
	DCD	0x1a
|_SGX_SourceClock| DCD 0x1
	DCD	0x49
|_CSI2_SourceClock| DCD 0x1
	DCD	0x3c
|_CAM_SourceClock| DCD 0x2
	DCD	0x32
	DCD	0x8
|_TV_SourceClock| DCD 0x2
	DCD	0x42
	DCD	0x3b
|_DSS_SourceClock| DCD 0x2
	DCD	0x7
	DCD	0x1a
|_USBOTG_SourceClock| DCD 0x3
	DCD	0x11
	DCD	0x43
	DCD	0x3e
|_USBHOST1_SourceClock| DCD 0x4
	DCD	0x3e
	DCD	0x34
	DCD	0x35
	DCD	0x43
|_USBHOST2_SourceClock| DCD 0x4
	DCD	0x3e
	DCD	0x34
	DCD	0x35
	DCD	0x43
|_USBHOST3_SourceClock| DCD 0x4
	DCD	0x3e
	DCD	0x34
	DCD	0x35
	DCD	0x43
|_32KWakeup_SourceClock| DCD 0x1
	DCD	0x1e
|_PER_48M_SourceClock| DCD 0x1
	DCD	0x3f
|_PER_32K_SourceClock| DCD 0x1
	DCD	0x1f
|_COREL3_SourceClock| DCD 0x1
	DCD	0x29
|_COREL4_SourceClock| DCD 0x1
	DCD	0x24
|_120M_SourceClock| DCD 0x1
	DCD	0xa
|_96M_SourceClock| DCD 0x1
	DCD	0x46
|_48M_SourceClock| DCD 0x1
	DCD	0x47
|_12M_SourceClock| DCD 0x1
	DCD	0x40
|_32K_SourceClock| DCD 0x1
	DCD	0xb
|_autoIdle_D2D| DCD 0x0
	DCD	0x8
	DCD	0x30
|_autoIdle_SSI| DCD 0x0
	DCD	0x1
	DCD	0x30
|_autoIdle_HDQ| DCD 0x0
	DCD	0x400000
	DCD	0x30
|_autoIdle_ICR| DCD 0x0
	DCD	0x20000000
	DCD	0x30
|_autoIdle_I2C1| DCD 0x0
	DCD	0x8000
	DCD	0x30
|_autoIdle_I2C2| DCD 0x0
	DCD	0x10000
	DCD	0x30
|_autoIdle_I2C3| DCD 0x0
	DCD	0x20000
	DCD	0x30
|_autoIdle_MMC1| DCD 0x0
	DCD	0x1000000
	DCD	0x30
|_autoIdle_MMC2| DCD 0x0
	DCD	0x2000000
	DCD	0x30
|_autoIdle_MMC3| DCD 0x0
	DCD	0x40000000
	DCD	0x30
|_autoIdle_AES2| DCD 0x0
	DCD	0x10000000
	DCD	0x30
|_autoIdle_DES2| DCD 0x0
	DCD	0x4000000
	DCD	0x30
|_autoIdle_UART1| DCD 0x0
	DCD	0x2000
	DCD	0x30
|_autoIdle_UART2| DCD 0x0
	DCD	0x4000
	DCD	0x30
|_autoIdle_MSPRO| DCD 0x0
	DCD	0x800000
	DCD	0x30
|_autoIdle_SHA12| DCD 0x0
	DCD	0x8000000
	DCD	0x30
|_autoIdle_MCBSP1| DCD 0x0
	DCD	0x200
	DCD	0x30
|_autoIdle_MCBSP5| DCD 0x0
	DCD	0x400
	DCD	0x30
|_autoIdle_MCSPI1| DCD 0x0
	DCD	0x40000
	DCD	0x30
|_autoIdle_MCSPI2| DCD 0x0
	DCD	0x80000
	DCD	0x30
|_autoIdle_MCSPI3| DCD 0x0
	DCD	0x100000
	DCD	0x30
|_autoIdle_MCSPI4| DCD 0x0
	DCD	0x200000
	DCD	0x30
|_autoIdle_GPT10| DCD 0x0
	DCD	0x800
	DCD	0x30
|_autoIdle_GPT11| DCD 0x0
	DCD	0x1000
	DCD	0x30
|_autoIdle_OMAPCTRL| DCD 0x0
	DCD	0x40
	DCD	0x30
|_autoIdle_HSOTGUSB| DCD 0x0
	DCD	0x10
	DCD	0x30
|_autoIdle_MAILBOXES| DCD 0x0
	DCD	0x80
	DCD	0x30
|_autoIdle_PKA| DCD 0x0
	DCD	0x10
	DCD	0x34
|_autoIdle_RNG| DCD 0x0
	DCD	0x4
	DCD	0x34
|_autoIdle_AES1| DCD 0x0
	DCD	0x8
	DCD	0x34
|_autoIdle_DES1| DCD 0x0
	DCD	0x1
	DCD	0x34
|_autoIdle_SHA11| DCD 0x0
	DCD	0x2
	DCD	0x34
|_autoIdle_USBTLL| DCD 0x0
	DCD	0x4
	DCD	0x38
|_autoIdle_GPT1| DCD 0x0
	DCD	0x1
	DCD	0x30
|_autoIdle_GPT12| DCD 0x0
	DCD	0x2
	DCD	0x30
|_autoIdle_32KSYNC| DCD 0x0
	DCD	0x4
	DCD	0x30
|_autoIdle_GPIO1| DCD 0x0
	DCD	0x8
	DCD	0x30
|_autoIdle_WDT1| DCD 0x0
	DCD	0x10
	DCD	0x30
|_autoIdle_WDT2| DCD 0x0
	DCD	0x20
	DCD	0x30
|_autoIdle_USIM| DCD 0x0
	DCD	0x200
	DCD	0x30
|_autoIdle_WDT3| DCD 0x0
	DCD	0x1000
	DCD	0x30
|_autoIdle_GPT2| DCD 0x0
	DCD	0x8
	DCD	0x30
|_autoIdle_GPT3| DCD 0x0
	DCD	0x10
	DCD	0x30
|_autoIdle_GPT4| DCD 0x0
	DCD	0x20
	DCD	0x30
|_autoIdle_GPT5| DCD 0x0
	DCD	0x40
	DCD	0x30
|_autoIdle_GPT6| DCD 0x0
	DCD	0x80
	DCD	0x30
|_autoIdle_GPT7| DCD 0x0
	DCD	0x100
	DCD	0x30
|_autoIdle_GPT8| DCD 0x0
	DCD	0x200
	DCD	0x30
|_autoIdle_GPT9| DCD 0x0
	DCD	0x400
	DCD	0x30
|_autoIdle_UART3| DCD 0x0
	DCD	0x800
	DCD	0x30
|_autoIdle_GPIO2| DCD 0x0
	DCD	0x2000
	DCD	0x30
|_autoIdle_GPIO3| DCD 0x0
	DCD	0x4000
	DCD	0x30
|_autoIdle_GPIO4| DCD 0x0
	DCD	0x8000
	DCD	0x30
|_autoIdle_GPIO5| DCD 0x0
	DCD	0x10000
	DCD	0x30
|_autoIdle_GPIO6| DCD 0x0
	DCD	0x20000
	DCD	0x30
|_autoIdle_MCBSP2| DCD 0x0
	DCD	0x1
	DCD	0x30
|_autoIdle_MCBSP3| DCD 0x0
	DCD	0x2
	DCD	0x30
|_autoIdle_MCBSP4| DCD 0x0
	DCD	0x4
	DCD	0x30
|_autoIdle_UART4| DCD 0x0
	DCD	0x40000
	DCD	0x30
|_autoIdle_DSS| DCD 0x0
	DCD	0x1
	DCD	0x30
|_autoIdle_CAM| DCD 0x0
	DCD	0x1
	DCD	0x30
|_autoIdle_USBHOST| DCD 0x0
	DCD	0x1
	DCD	0x30
|_idleStat_D2D| DCD 0x8
	DCD	0x20
|_idleStat_SSI| DCD 0x1
	DCD	0x20
|_idleStat_HDQ| DCD 0x400000
	DCD	0x20
|_idleStat_ICR| DCD 0x20000000
	DCD	0x20
|_idleStat_SDRC| DCD 0x2
	DCD	0x20
|_idleStat_I2C1| DCD 0x8000
	DCD	0x20
|_idleStat_I2C2| DCD 0x10000
	DCD	0x20
|_idleStat_I2C3| DCD 0x20000
	DCD	0x20
|_idleStat_MMC1| DCD 0x1000000
	DCD	0x20
|_idleStat_MMC2| DCD 0x2000000
	DCD	0x20
|_idleStat_MMC3| DCD 0x40000000
	DCD	0x20
|_idleStat_AES2| DCD 0x10000000
	DCD	0x20
|_idleStat_DES2| DCD 0x4000000
	DCD	0x20
|_idleStat_UART1| DCD 0x2000
	DCD	0x20
|_idleStat_UART2| DCD 0x4000
	DCD	0x20
|_idleStat_MSPRO| DCD 0x800000
	DCD	0x20
|_idleStat_SHA12| DCD 0x8000000
	DCD	0x20
|_idleStat_MCBSP1| DCD 0x200
	DCD	0x20
|_idleStat_MCBSP5| DCD 0x400
	DCD	0x20
|_idleStat_MCSPI1| DCD 0x40000
	DCD	0x20
|_idleStat_MCSPI2| DCD 0x80000
	DCD	0x20
|_idleStat_MCSPI3| DCD 0x100000
	DCD	0x20
|_idleStat_MCSPI4| DCD 0x200000
	DCD	0x20
|_idleStat_GPT10| DCD 0x800
	DCD	0x20
|_idleStat_GPT11| DCD 0x1000
	DCD	0x20
|_idleStat_HSOTGUSB| DCD 0x20
	DCD	0x20
|_idleStat_OMAPCTRL| DCD 0x40
	DCD	0x20
|_idleStat_MAILBOXES| DCD 0x80
	DCD	0x20
|_idleStat_PKA| DCD 0x10
	DCD	0x24
|_idleStat_RNG| DCD 0x4
	DCD	0x24
|_idleStat_AES1| DCD 0x8
	DCD	0x24
|_idleStat_DES1| DCD 0x1
	DCD	0x24
|_idleStat_SHA11| DCD 0x2
	DCD	0x24
|_idleStat_USBTLL| DCD 0x4
	DCD	0x28
|_idleStat_CPEFUSE| DCD 0x1
	DCD	0x28
|_idleStat_GPT1| DCD 0x1
	DCD	0x20
|_idleStat_GPT12| DCD 0x2
	DCD	0x20
|_idleStat_32KSYNC| DCD 0x4
	DCD	0x20
|_idleStat_GPIO1| DCD 0x8
	DCD	0x20
|_idleStat_WDT1| DCD 0x10
	DCD	0x20
|_idleStat_WDT2| DCD 0x20
	DCD	0x20
|_idleStat_USIM| DCD 0x200
	DCD	0x20
|_idleStat_SR1| DCD 0x40
	DCD	0x20
|_idleStat_SR2| DCD 0x80
	DCD	0x20
|_idleStat_WDT3| DCD 0x1000
	DCD	0x20
|_idleStat_UART3| DCD 0x800
	DCD	0x20
|_idleStat_GPIO2| DCD 0x2000
	DCD	0x20
|_idleStat_GPIO3| DCD 0x4000
	DCD	0x20
|_idleStat_GPIO4| DCD 0x8000
	DCD	0x20
|_idleStat_GPIO5| DCD 0x10000
	DCD	0x20
|_idleStat_GPIO6| DCD 0x20000
	DCD	0x20
|_idleStat_MCBSP2| DCD 0x1
	DCD	0x20
|_idleStat_MCBSP3| DCD 0x2
	DCD	0x20
|_idleStat_MCBSP4| DCD 0x4
	DCD	0x20
|_idleStat_GPT2| DCD 0x8
	DCD	0x20
|_idleStat_GPT3| DCD 0x10
	DCD	0x20
|_idleStat_GPT4| DCD 0x20
	DCD	0x20
|_idleStat_GPT5| DCD 0x40
	DCD	0x20
|_idleStat_GPT6| DCD 0x80
	DCD	0x20
|_idleStat_GPT7| DCD 0x100
	DCD	0x20
|_idleStat_GPT8| DCD 0x200
	DCD	0x20
|_idleStat_GPT9| DCD 0x400
	DCD	0x20
|_idleStat_UART4| DCD 0x40000
	DCD	0x20
|_idleStat_DSS| DCD 0x2
	DCD	0x20
|_idleStat_CAM| DCD 0x1
	DCD	0x20
|_idleStat_SGX| DCD 0x1
	DCD	0x20
|_idleStat_IVA2| DCD 0x1
	DCD	0x20
|_idleStat_USBHOST| DCD 0x2
	DCD	0x20
|_iclk_D2D| DCD	0x0
	DCD	0x8
	DCD	0x10
	DCD	0x0
|_iclk_SSI| DCD	0x0
	DCD	0x1
	DCD	0x10
	DCD	0x0
|_iclk_HDQ| DCD	0x0
	DCD	0x400000
	DCD	0x10
	DCD	0x0
|_iclk_ICR| DCD	0x0
	DCD	0x20000000
	DCD	0x10
	DCD	0x0
|_iclk_SDRC| DCD 0x0
	DCD	0x2
	DCD	0x10
	DCD	0x0
|_iclk_I2C1| DCD 0x0
	DCD	0x8000
	DCD	0x10
	DCD	0x0
|_iclk_I2C2| DCD 0x0
	DCD	0x10000
	DCD	0x10
	DCD	0x0
|_iclk_I2C3| DCD 0x0
	DCD	0x20000
	DCD	0x10
	DCD	0x0
|_iclk_MMC1| DCD 0x0
	DCD	0x1000000
	DCD	0x10
	DCD	0x0
|_iclk_MMC2| DCD 0x0
	DCD	0x2000000
	DCD	0x10
	DCD	0x0
|_iclk_MMC3| DCD 0x0
	DCD	0x40000000
	DCD	0x10
	DCD	0x0
|_iclk_AES2| DCD 0x0
	DCD	0x10000000
	DCD	0x10
	DCD	0x0
|_iclk_DES2| DCD 0x0
	DCD	0x4000000
	DCD	0x10
	DCD	0x0
|_iclk_UART1| DCD 0x0
	DCD	0x2000
	DCD	0x10
	DCD	0x0
|_iclk_UART2| DCD 0x0
	DCD	0x4000
	DCD	0x10
	DCD	0x0
|_iclk_MSPRO| DCD 0x0
	DCD	0x800000
	DCD	0x10
	DCD	0x0
|_iclk_SHA12| DCD 0x0
	DCD	0x8000000
	DCD	0x10
	DCD	0x0
|_iclk_MCBSP1| DCD 0x0
	DCD	0x200
	DCD	0x10
	DCD	0x0
|_iclk_MCBSP5| DCD 0x0
	DCD	0x400
	DCD	0x10
	DCD	0x0
|_iclk_MCSPI1| DCD 0x0
	DCD	0x40000
	DCD	0x10
	DCD	0x0
|_iclk_MCSPI2| DCD 0x0
	DCD	0x80000
	DCD	0x10
	DCD	0x0
|_iclk_MCSPI3| DCD 0x0
	DCD	0x100000
	DCD	0x10
	DCD	0x0
|_iclk_MCSPI4| DCD 0x0
	DCD	0x200000
	DCD	0x10
	DCD	0x0
|_iclk_GPT10| DCD 0x0
	DCD	0x800
	DCD	0x10
	DCD	0x0
|_iclk_GPT11| DCD 0x0
	DCD	0x1000
	DCD	0x10
	DCD	0x0
|_iclk_OMAPCTRL| DCD 0x0
	DCD	0x40
	DCD	0x10
	DCD	0x0
|_iclk_HSOTGUSB| DCD 0x0
	DCD	0x10
	DCD	0x10
	DCD	0x0
|_iclk_MAILBOXES| DCD 0x0
	DCD	0x80
	DCD	0x10
	DCD	0x0
|_iclk_PKA| DCD	0x0
	DCD	0x10
	DCD	0x14
	DCD	0x0
|_iclk_RNG| DCD	0x0
	DCD	0x4
	DCD	0x14
	DCD	0x0
|_iclk_AES1| DCD 0x0
	DCD	0x8
	DCD	0x14
	DCD	0x0
|_iclk_DES1| DCD 0x0
	DCD	0x1
	DCD	0x14
	DCD	0x0
|_iclk_SHA11| DCD 0x0
	DCD	0x2
	DCD	0x14
	DCD	0x0
|_iclk_USBTLL| DCD 0x0
	DCD	0x4
	DCD	0x18
	DCD	0x0
|_iclk_VRFB| DCD 0x0
	DCD	0x10000
	DCD	0x18
	DCD	0x1
|_iclk_GPT1| DCD 0x0
	DCD	0x1
	DCD	0x10
	DCD	0x0
|_iclk_GPT12| DCD 0x0
	DCD	0x2
	DCD	0x10
	DCD	0x0
|_iclk_32KSYNC| DCD 0x0
	DCD	0x4
	DCD	0x10
	DCD	0x0
|_iclk_GPIO1| DCD 0x0
	DCD	0x8
	DCD	0x10
	DCD	0x0
|_iclk_WDT1| DCD 0x0
	DCD	0x10
	DCD	0x10
	DCD	0x0
|_iclk_WDT2| DCD 0x0
	DCD	0x20
	DCD	0x10
	DCD	0x0
|_iclk_USIM| DCD 0x0
	DCD	0x200
	DCD	0x10
	DCD	0x0
|_iclk_WDT3| DCD 0x0
	DCD	0x1000
	DCD	0x10
	DCD	0x0
|_iclk_GPT2| DCD 0x0
	DCD	0x8
	DCD	0x10
	DCD	0x0
|_iclk_GPT3| DCD 0x0
	DCD	0x10
	DCD	0x10
	DCD	0x0
|_iclk_GPT4| DCD 0x0
	DCD	0x20
	DCD	0x10
	DCD	0x0
|_iclk_GPT5| DCD 0x0
	DCD	0x40
	DCD	0x10
	DCD	0x0
|_iclk_GPT6| DCD 0x0
	DCD	0x80
	DCD	0x10
	DCD	0x0
|_iclk_GPT7| DCD 0x0
	DCD	0x100
	DCD	0x10
	DCD	0x0
|_iclk_GPT8| DCD 0x0
	DCD	0x200
	DCD	0x10
	DCD	0x0
|_iclk_GPT9| DCD 0x0
	DCD	0x400
	DCD	0x10
	DCD	0x0
|_iclk_UART3| DCD 0x0
	DCD	0x800
	DCD	0x10
	DCD	0x0
|_iclk_GPIO2| DCD 0x0
	DCD	0x2000
	DCD	0x10
	DCD	0x0
|_iclk_GPIO3| DCD 0x0
	DCD	0x4000
	DCD	0x10
	DCD	0x0
|_iclk_GPIO4| DCD 0x0
	DCD	0x8000
	DCD	0x10
	DCD	0x0
|_iclk_GPIO5| DCD 0x0
	DCD	0x10000
	DCD	0x10
	DCD	0x0
|_iclk_GPIO6| DCD 0x0
	DCD	0x20000
	DCD	0x10
	DCD	0x0
|_iclk_MCBSP2| DCD 0x0
	DCD	0x1
	DCD	0x10
	DCD	0x0
|_iclk_MCBSP3| DCD 0x0
	DCD	0x2
	DCD	0x10
	DCD	0x0
|_iclk_MCBSP4| DCD 0x0
	DCD	0x4
	DCD	0x10
	DCD	0x0
|_iclk_UART4| DCD 0x0
	DCD	0x40000
	DCD	0x10
	DCD	0x0
|_iclk_DSS| DCD	0x0
	DCD	0x1
	DCD	0x10
	DCD	0x0
|_iclk_CAM| DCD	0x0
	DCD	0x1
	DCD	0x10
	DCD	0x0
|_iclk_IVA2| DCD 0x0
	DCD	0x10000
	DCD	0x10
	DCD	0x1
|_iclk_SGX| DCD	0x0
	DCD	0x1
	DCD	0x10
	DCD	0x0
|_iclk_USBHOST| DCD 0x0
	DCD	0x1
	DCD	0x10
	DCD	0x0
|_iclk_USBHOST1| DCD 0x0
	DCD	0x0
	DCD	0x10
	DCD	0x0
|_iclk_USBHOST2| DCD 0x0
	DCD	0x0
	DCD	0x10
	DCD	0x0
|_iclk_USBHOST3| DCD 0x0
	DCD	0x0
	DCD	0x10
	DCD	0x0
|_fclk_D2D| DCD	0x0
	DCD	0x8
	DCD	0x0
	DCD	0x0
|_fclk_SSI| DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_fclk_HDQ| DCD	0x0
	DCD	0x400000
	DCD	0x0
	DCD	0x0
|_fclk_I2C1| DCD 0x0
	DCD	0x8000
	DCD	0x0
	DCD	0x0
|_fclk_I2C2| DCD 0x0
	DCD	0x10000
	DCD	0x0
	DCD	0x0
|_fclk_I2C3| DCD 0x0
	DCD	0x20000
	DCD	0x0
	DCD	0x0
|_fclk_MMC1| DCD 0x0
	DCD	0x1000000
	DCD	0x0
	DCD	0x0
|_fclk_MMC2| DCD 0x0
	DCD	0x2000000
	DCD	0x0
	DCD	0x0
|_fclk_MMC3| DCD 0x0
	DCD	0x40000000
	DCD	0x0
	DCD	0x0
|_fclk_UART1| DCD 0x0
	DCD	0x2000
	DCD	0x0
	DCD	0x0
|_fclk_UART2| DCD 0x0
	DCD	0x4000
	DCD	0x0
	DCD	0x0
|_fclk_MSPRO| DCD 0x0
	DCD	0x800000
	DCD	0x0
	DCD	0x0
|_fclk_MCBSP1| DCD 0x0
	DCD	0x200
	DCD	0x0
	DCD	0x0
|_fclk_MCBSP5| DCD 0x0
	DCD	0x400
	DCD	0x0
	DCD	0x0
|_fclk_MCSPI1| DCD 0x0
	DCD	0x40000
	DCD	0x0
	DCD	0x0
|_fclk_MCSPI2| DCD 0x0
	DCD	0x80000
	DCD	0x0
	DCD	0x0
|_fclk_MCSPI3| DCD 0x0
	DCD	0x100000
	DCD	0x0
	DCD	0x0
|_fclk_MCSPI4| DCD 0x0
	DCD	0x200000
	DCD	0x0
	DCD	0x0
|_fclk_GPT10| DCD 0x0
	DCD	0x800
	DCD	0x0
	DCD	0x0
|_fclk_GPT11| DCD 0x0
	DCD	0x1000
	DCD	0x0
	DCD	0x0
|_fclk_USBTLL| DCD 0x0
	DCD	0x4
	DCD	0x8
	DCD	0x0
|_fclk_CPEFUSE| DCD 0x0
	DCD	0x1
	DCD	0x8
	DCD	0x0
|_fclk_TS| DCD	0x0
	DCD	0x2
	DCD	0x8
	DCD	0x0
|_fclk_GPT1| DCD 0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_fclk_GPIO1| DCD 0x0
	DCD	0x8
	DCD	0x0
	DCD	0x0
|_fclk_WDT2| DCD 0x0
	DCD	0x20
	DCD	0x0
	DCD	0x0
|_fclk_USIM| DCD 0x0
	DCD	0x200
	DCD	0x0
	DCD	0x0
|_fclk_SR1| DCD	0x0
	DCD	0x40
	DCD	0x0
	DCD	0x0
|_fclk_SR2| DCD	0x0
	DCD	0x80
	DCD	0x0
	DCD	0x0
|_fclk_WDT3| DCD 0x0
	DCD	0x1000
	DCD	0x0
	DCD	0x0
|_fclk_UART3| DCD 0x0
	DCD	0x800
	DCD	0x0
	DCD	0x0
|_fclk_GPIO2| DCD 0x0
	DCD	0x2000
	DCD	0x0
	DCD	0x0
|_fclk_GPIO3| DCD 0x0
	DCD	0x4000
	DCD	0x0
	DCD	0x0
|_fclk_GPIO4| DCD 0x0
	DCD	0x8000
	DCD	0x0
	DCD	0x0
|_fclk_GPIO5| DCD 0x0
	DCD	0x10000
	DCD	0x0
	DCD	0x0
|_fclk_GPIO6| DCD 0x0
	DCD	0x20000
	DCD	0x0
	DCD	0x0
|_fclk_MCBSP2| DCD 0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_fclk_MCBSP3| DCD 0x0
	DCD	0x2
	DCD	0x0
	DCD	0x0
|_fclk_MCBSP4| DCD 0x0
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_fclk_GPT2| DCD 0x0
	DCD	0x8
	DCD	0x0
	DCD	0x0
|_fclk_GPT3| DCD 0x0
	DCD	0x10
	DCD	0x0
	DCD	0x0
|_fclk_GPT4| DCD 0x0
	DCD	0x20
	DCD	0x0
	DCD	0x0
|_fclk_GPT5| DCD 0x0
	DCD	0x40
	DCD	0x0
	DCD	0x0
|_fclk_GPT6| DCD 0x0
	DCD	0x80
	DCD	0x0
	DCD	0x0
|_fclk_GPT7| DCD 0x0
	DCD	0x100
	DCD	0x0
	DCD	0x0
|_fclk_GPT8| DCD 0x0
	DCD	0x200
	DCD	0x0
	DCD	0x0
|_fclk_GPT9| DCD 0x0
	DCD	0x400
	DCD	0x0
	DCD	0x0
|_fclk_UART4| DCD 0x0
	DCD	0x40000
	DCD	0x0
	DCD	0x0
|_fclk_DSS| DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_fclk_DSS1| DCD 0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_fclk_DSS2| DCD 0x0
	DCD	0x2
	DCD	0x0
	DCD	0x0
|_fclk_TVOUT| DCD 0x0
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_fclk_CAM| DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_fclk_CSI2| DCD 0x0
	DCD	0x2
	DCD	0x0
	DCD	0x0
|_fclk_3D| DCD	0x0
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_fclk_SGX| DCD	0x0
	DCD	0x2
	DCD	0x0
	DCD	0x0
|_fclk_IVA2| DCD 0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_fclk_HSUSB2| DCD 0x0
	DCD	0x2
	DCD	0x0
	DCD	0x0
|_fclk_HSUSB1| DCD 0x0
	DCD	0x1
	DCD	0x0
	DCD	0x0
|_wken_D2D| DCD	0x8
	DCD	0xa0
|_wken_I2C1| DCD 0x8000
	DCD	0xa0
|_wken_I2C2| DCD 0x10000
	DCD	0xa0
|_wken_I2C3| DCD 0x20000
	DCD	0xa0
|_wken_MMC1| DCD 0x1000000
	DCD	0xa0
|_wken_MMC2| DCD 0x2000000
	DCD	0xa0
|_wken_MMC3| DCD 0x40000000
	DCD	0xa0
|_wken_UART1| DCD 0x2000
	DCD	0xa0
|_wken_UART2| DCD 0x4000
	DCD	0xa0
|_wken_MCBSP1| DCD 0x200
	DCD	0xa0
|_wken_MCBSP5| DCD 0x400
	DCD	0xa0
|_wken_MCSPI1| DCD 0x40000
	DCD	0xa0
|_wken_MCSPI2| DCD 0x80000
	DCD	0xa0
|_wken_MCSPI3| DCD 0x100000
	DCD	0xa0
|_wken_MCSPI4| DCD 0x200000
	DCD	0xa0
|_wken_GPT10| DCD 0x800
	DCD	0xa0
|_wken_GPT11| DCD 0x1000
	DCD	0xa0
|_wken_HSOTGUSB| DCD 0x10
	DCD	0xa0
|_wken_USBTLL| DCD 0x4
	DCD	0xf0
|_wken_GPT1| DCD 0x1
	DCD	0xa0
|_wken_GPIO1| DCD 0x8
	DCD	0xa0
|_wken_SR1| DCD	0x40
	DCD	0xa0
|_wken_SR2| DCD	0x80
	DCD	0xa0
|_wken_IO| DCD	0x100
	DCD	0xa0
|_wken_USIM| DCD 0x200
	DCD	0xa0
|_wken_UART3| DCD 0x800
	DCD	0xa0
|_wken_GPIO2| DCD 0x2000
	DCD	0xa0
|_wken_GPIO3| DCD 0x4000
	DCD	0xa0
|_wken_GPIO4| DCD 0x8000
	DCD	0xa0
|_wken_GPIO5| DCD 0x10000
	DCD	0xa0
|_wken_GPIO6| DCD 0x20000
	DCD	0xa0
|_wken_MCBSP2| DCD 0x1
	DCD	0xa0
|_wken_MCBSP3| DCD 0x2
	DCD	0xa0
|_wken_MCBSP4| DCD 0x4
	DCD	0xa0
|_wken_GPT2| DCD 0x8
	DCD	0xa0
|_wken_GPT3| DCD 0x10
	DCD	0xa0
|_wken_GPT4| DCD 0x20
	DCD	0xa0
|_wken_GPT5| DCD 0x40
	DCD	0xa0
|_wken_GPT6| DCD 0x80
	DCD	0xa0
|_wken_GPT7| DCD 0x100
	DCD	0xa0
|_wken_GPT8| DCD 0x200
	DCD	0xa0
|_wken_GPT9| DCD 0x400
	DCD	0xa0
|_wken_UART4| DCD 0x40000
	DCD	0xa0
|_wken_DSS| DCD	0x1
	DCD	0xa0
|_wken_USBHOST| DCD 0x1
	DCD	0xa0
|s_rgDeviceLookupTable| DCD 0x1
	DCD	|_fclk_SSI|
	DCD	|_iclk_SSI|
	DCD	0x0
	DCD	|_idleStat_SSI|
	DCD	|_autoIdle_SSI|
	DCD	|_SSI_SourceClock|
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_SDRC|
	DCD	0x0
	DCD	|_idleStat_SDRC|
	DCD	0x0
	DCD	|_COREL3_SourceClock|
	DCD	0x1
	DCD	|_fclk_D2D|
	DCD	|_iclk_D2D|
	DCD	|_wken_D2D|
	DCD	|_idleStat_D2D|
	DCD	|_autoIdle_D2D|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_HSOTGUSB|
	DCD	|_wken_HSOTGUSB|
	DCD	|_idleStat_HSOTGUSB|
	DCD	|_autoIdle_HSOTGUSB|
	DCD	|_USBOTG_SourceClock|
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_OMAPCTRL|
	DCD	0x0
	DCD	|_idleStat_OMAPCTRL|
	DCD	|_autoIdle_OMAPCTRL|
	DCD	|_COREL4_SourceClock|
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_MAILBOXES|
	DCD	0x0
	DCD	|_idleStat_MAILBOXES|
	DCD	|_autoIdle_MAILBOXES|
	DCD	|_COREL4_SourceClock|
	DCD	0x1
	DCD	|_fclk_MCBSP1|
	DCD	|_iclk_MCBSP1|
	DCD	|_wken_MCBSP1|
	DCD	|_idleStat_MCBSP1|
	DCD	|_autoIdle_MCBSP1|
	DCD	|_MCBSP1_SourceClock|
	DCD	0x1
	DCD	|_fclk_MCBSP5|
	DCD	|_iclk_MCBSP5|
	DCD	|_wken_MCBSP5|
	DCD	|_idleStat_MCBSP5|
	DCD	|_autoIdle_MCBSP5|
	DCD	|_MCBSP5_SourceClock|
	DCD	0x1
	DCD	|_fclk_GPT10|
	DCD	|_iclk_GPT10|
	DCD	|_wken_GPT10|
	DCD	|_idleStat_GPT10|
	DCD	|_autoIdle_GPT10|
	DCD	|_GPT10_SourceClock|
	DCD	0x1
	DCD	|_fclk_GPT11|
	DCD	|_iclk_GPT11|
	DCD	|_wken_GPT11|
	DCD	|_idleStat_GPT11|
	DCD	|_autoIdle_GPT11|
	DCD	|_GPT11_SourceClock|
	DCD	0x1
	DCD	|_fclk_UART1|
	DCD	|_iclk_UART1|
	DCD	|_wken_UART1|
	DCD	|_idleStat_UART1|
	DCD	|_autoIdle_UART1|
	DCD	|_48M_SourceClock|
	DCD	0x1
	DCD	|_fclk_UART2|
	DCD	|_iclk_UART2|
	DCD	|_wken_UART2|
	DCD	|_idleStat_UART2|
	DCD	|_autoIdle_UART2|
	DCD	|_48M_SourceClock|
	DCD	0x1
	DCD	|_fclk_I2C1|
	DCD	|_iclk_I2C1|
	DCD	|_wken_I2C1|
	DCD	|_idleStat_I2C1|
	DCD	|_autoIdle_I2C1|
	DCD	|_96M_SourceClock|
	DCD	0x1
	DCD	|_fclk_I2C2|
	DCD	|_iclk_I2C2|
	DCD	|_wken_I2C2|
	DCD	|_idleStat_I2C2|
	DCD	|_autoIdle_I2C2|
	DCD	|_96M_SourceClock|
	DCD	0x1
	DCD	|_fclk_I2C3|
	DCD	|_iclk_I2C3|
	DCD	|_wken_I2C3|
	DCD	|_idleStat_I2C3|
	DCD	|_autoIdle_I2C3|
	DCD	|_96M_SourceClock|
	DCD	0x1
	DCD	|_fclk_MCSPI1|
	DCD	|_iclk_MCSPI1|
	DCD	|_wken_MCSPI1|
	DCD	|_idleStat_MCSPI1|
	DCD	|_autoIdle_MCSPI1|
	DCD	|_48M_SourceClock|
	DCD	0x1
	DCD	|_fclk_MCSPI2|
	DCD	|_iclk_MCSPI2|
	DCD	|_wken_MCSPI2|
	DCD	|_idleStat_MCSPI2|
	DCD	|_autoIdle_MCSPI2|
	DCD	|_48M_SourceClock|
	DCD	0x1
	DCD	|_fclk_MCSPI3|
	DCD	|_iclk_MCSPI3|
	DCD	|_wken_MCSPI3|
	DCD	|_idleStat_MCSPI3|
	DCD	|_autoIdle_MCSPI3|
	DCD	|_48M_SourceClock|
	DCD	0x1
	DCD	|_fclk_MCSPI4|
	DCD	|_iclk_MCSPI4|
	DCD	|_wken_MCSPI4|
	DCD	|_idleStat_MCSPI4|
	DCD	|_autoIdle_MCSPI4|
	DCD	|_48M_SourceClock|
	DCD	0x1
	DCD	|_fclk_HDQ|
	DCD	|_iclk_HDQ|
	DCD	0x0
	DCD	|_idleStat_HDQ|
	DCD	|_autoIdle_HDQ|
	DCD	|_12M_SourceClock|
	DCD	0x1
	DCD	|_fclk_MSPRO|
	DCD	|_iclk_MSPRO|
	DCD	0x0
	DCD	|_idleStat_MSPRO|
	DCD	|_autoIdle_MSPRO|
	DCD	|_96M_SourceClock|
	DCD	0x1
	DCD	|_fclk_MMC1|
	DCD	|_iclk_MMC1|
	DCD	|_wken_MMC1|
	DCD	|_idleStat_MMC1|
	DCD	|_autoIdle_MMC1|
	DCD	|_MMC1_SourceClock|
	DCD	0x1
	DCD	|_fclk_MMC2|
	DCD	|_iclk_MMC2|
	DCD	|_wken_MMC2|
	DCD	|_idleStat_MMC2|
	DCD	|_autoIdle_MMC2|
	DCD	|_MMC2_SourceClock|
	DCD	0x1
	DCD	|_fclk_MMC3|
	DCD	|_iclk_MMC3|
	DCD	|_wken_MMC3|
	DCD	|_idleStat_MMC3|
	DCD	|_autoIdle_MMC3|
	DCD	|_MMC3_SourceClock|
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_DES2|
	DCD	0x0
	DCD	|_idleStat_DES2|
	DCD	|_autoIdle_DES2|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_SHA12|
	DCD	0x0
	DCD	|_idleStat_SHA12|
	DCD	|_autoIdle_SHA12|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_AES2|
	DCD	0x0
	DCD	|_idleStat_AES2|
	DCD	|_autoIdle_AES2|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_ICR|
	DCD	0x0
	DCD	|_idleStat_ICR|
	DCD	|_autoIdle_ICR|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_DES1|
	DCD	0x0
	DCD	|_idleStat_DES1|
	DCD	|_autoIdle_DES1|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_SHA11|
	DCD	0x0
	DCD	|_idleStat_SHA11|
	DCD	|_autoIdle_SHA11|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_RNG|
	DCD	0x0
	DCD	|_idleStat_RNG|
	DCD	|_autoIdle_RNG|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_AES1|
	DCD	0x0
	DCD	|_idleStat_AES1|
	DCD	|_autoIdle_AES1|
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_PKA|
	DCD	0x0
	DCD	|_idleStat_PKA|
	DCD	|_autoIdle_PKA|
	DCD	0x0
	DCD	0x1
	DCD	|_fclk_USBTLL|
	DCD	|_iclk_USBTLL|
	DCD	|_wken_USBTLL|
	DCD	|_idleStat_USBTLL|
	DCD	|_autoIdle_USBTLL|
	DCD	|_120M_SourceClock|
	DCD	0x1
	DCD	|_fclk_TS|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x1
	DCD	|_fclk_CPEFUSE|
	DCD	0x0
	DCD	0x0
	DCD	|_idleStat_CPEFUSE|
	DCD	0x0
	DCD	|_CPEFUSE_SourceClock|
	DCD	0x0
	DCD	|_fclk_GPT1|
	DCD	|_iclk_GPT1|
	DCD	|_wken_GPT1|
	DCD	|_idleStat_GPT1|
	DCD	|_autoIdle_GPT1|
	DCD	|_GPT1_SourceClock|
	DCD	0x0
	DCD	0x0
	DCD	|_iclk_GPT12|
	DCD	0x0
	DCD	|_idleStat_GPT12|
	DCD	|_autoIdle_GPT12|
	DCD	|_GPT12_SourceClock|
	DCD	0x0
	DCD	0x0
	DCD	|_iclk_32KSYNC|
	DCD	0x0
	DCD	|_idleStat_32KSYNC|
	DCD	|_autoIdle_32KSYNC|
	DCD	|_32K_SourceClock|
	DCD	0x0
	DCD	0x0
	DCD	|_iclk_WDT1|
	DCD	0x0
	DCD	|_idleStat_WDT1|
	DCD	|_autoIdle_WDT1|
	DCD	|_32K_SourceClock|
	DCD	0x0
	DCD	|_fclk_WDT2|
	DCD	|_iclk_WDT2|
	DCD	0x0
	DCD	|_idleStat_WDT2|
	DCD	|_autoIdle_WDT2|
	DCD	|_32KWakeup_SourceClock|
	DCD	0x0
	DCD	|_fclk_GPIO1|
	DCD	|_iclk_GPIO1|
	DCD	|_wken_GPIO1|
	DCD	|_idleStat_GPIO1|
	DCD	|_autoIdle_GPIO1|
	DCD	|_32KWakeup_SourceClock|
	DCD	0x0
	DCD	|_fclk_SR1|
	DCD	0x0
	DCD	|_wken_SR1|
	DCD	|_idleStat_SR1|
	DCD	0x0
	DCD	|_SR_SourceClock|
	DCD	0x0
	DCD	|_fclk_SR2|
	DCD	0x0
	DCD	|_wken_SR2|
	DCD	|_idleStat_SR2|
	DCD	0x0
	DCD	|_SR_SourceClock|
	DCD	0x0
	DCD	|_fclk_USIM|
	DCD	|_iclk_USIM|
	DCD	|_wken_USIM|
	DCD	|_idleStat_USIM|
	DCD	|_autoIdle_USIM|
	DCD	|_USIM_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPIO2|
	DCD	|_iclk_GPIO2|
	DCD	|_wken_GPIO2|
	DCD	|_idleStat_GPIO2|
	DCD	|_autoIdle_GPIO2|
	DCD	|_PER_32K_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPIO3|
	DCD	|_iclk_GPIO3|
	DCD	|_wken_GPIO3|
	DCD	|_idleStat_GPIO3|
	DCD	|_autoIdle_GPIO3|
	DCD	|_PER_32K_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPIO4|
	DCD	|_iclk_GPIO4|
	DCD	|_wken_GPIO4|
	DCD	|_idleStat_GPIO4|
	DCD	|_autoIdle_GPIO4|
	DCD	|_PER_32K_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPIO5|
	DCD	|_iclk_GPIO5|
	DCD	|_wken_GPIO5|
	DCD	|_idleStat_GPIO5|
	DCD	|_autoIdle_GPIO5|
	DCD	|_PER_32K_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPIO6|
	DCD	|_iclk_GPIO6|
	DCD	|_wken_GPIO6|
	DCD	|_idleStat_GPIO6|
	DCD	|_autoIdle_GPIO6|
	DCD	|_PER_32K_SourceClock|
	DCD	0x2
	DCD	|_fclk_MCBSP2|
	DCD	|_iclk_MCBSP2|
	DCD	|_wken_MCBSP2|
	DCD	|_idleStat_MCBSP2|
	DCD	|_autoIdle_MCBSP2|
	DCD	|_MCBSP2_SourceClock|
	DCD	0x2
	DCD	|_fclk_MCBSP3|
	DCD	|_iclk_MCBSP3|
	DCD	|_wken_MCBSP3|
	DCD	|_idleStat_MCBSP3|
	DCD	|_autoIdle_MCBSP3|
	DCD	|_MCBSP3_SourceClock|
	DCD	0x2
	DCD	|_fclk_MCBSP4|
	DCD	|_iclk_MCBSP4|
	DCD	|_wken_MCBSP4|
	DCD	|_idleStat_MCBSP4|
	DCD	|_autoIdle_MCBSP4|
	DCD	|_MCBSP4_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT2|
	DCD	|_iclk_GPT2|
	DCD	|_wken_GPT2|
	DCD	|_idleStat_GPT2|
	DCD	|_autoIdle_GPT2|
	DCD	|_GPT2_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT3|
	DCD	|_iclk_GPT3|
	DCD	|_wken_GPT3|
	DCD	|_idleStat_GPT3|
	DCD	|_autoIdle_GPT3|
	DCD	|_GPT3_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT4|
	DCD	|_iclk_GPT4|
	DCD	|_wken_GPT4|
	DCD	|_idleStat_GPT4|
	DCD	|_autoIdle_GPT4|
	DCD	|_GPT4_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT5|
	DCD	|_iclk_GPT5|
	DCD	|_wken_GPT5|
	DCD	|_idleStat_GPT5|
	DCD	|_autoIdle_GPT5|
	DCD	|_GPT5_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT6|
	DCD	|_iclk_GPT6|
	DCD	|_wken_GPT6|
	DCD	|_idleStat_GPT6|
	DCD	|_autoIdle_GPT6|
	DCD	|_GPT6_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT7|
	DCD	|_iclk_GPT7|
	DCD	|_wken_GPT7|
	DCD	|_idleStat_GPT7|
	DCD	|_autoIdle_GPT7|
	DCD	|_GPT7_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT8|
	DCD	|_iclk_GPT8|
	DCD	|_wken_GPT8|
	DCD	|_idleStat_GPT8|
	DCD	|_autoIdle_GPT8|
	DCD	|_GPT8_SourceClock|
	DCD	0x2
	DCD	|_fclk_GPT9|
	DCD	|_iclk_GPT9|
	DCD	|_wken_GPT9|
	DCD	|_idleStat_GPT9|
	DCD	|_autoIdle_GPT9|
	DCD	|_GPT9_SourceClock|
	DCD	0x2
	DCD	|_fclk_UART3|
	DCD	|_iclk_UART3|
	DCD	|_wken_UART3|
	DCD	|_idleStat_UART3|
	DCD	|_autoIdle_UART3|
	DCD	|_PER_48M_SourceClock|
	DCD	0x2
	DCD	|_fclk_WDT3|
	DCD	|_iclk_WDT3|
	DCD	0x0
	DCD	|_idleStat_WDT3|
	DCD	|_autoIdle_WDT3|
	DCD	|_PER_32K_SourceClock|
	DCD	0x6
	DCD	|_fclk_DSS|
	DCD	|_iclk_DSS|
	DCD	|_wken_DSS|
	DCD	|_idleStat_DSS|
	DCD	|_autoIdle_DSS|
	DCD	|_DSS_SourceClock|
	DCD	0x6
	DCD	|_fclk_DSS1|
	DCD	|_iclk_DSS|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_DSS1_SourceClock|
	DCD	0x6
	DCD	|_fclk_DSS2|
	DCD	|_iclk_DSS|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_DSS2_SourceClock|
	DCD	0x6
	DCD	|_fclk_TVOUT|
	DCD	|_iclk_DSS|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_TV_SourceClock|
	DCD	0x9
	DCD	|_fclk_CAM|
	DCD	|_iclk_CAM|
	DCD	0x0
	DCD	|_idleStat_CAM|
	DCD	|_autoIdle_CAM|
	DCD	|_CAM_SourceClock|
	DCD	0x9
	DCD	|_fclk_CSI2|
	DCD	|_iclk_CAM|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_CSI2_SourceClock|
	DCD	0x8
	DCD	|_fclk_IVA2|
	DCD	|_iclk_IVA2|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0xa
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0xa
	DCD	|_fclk_3D|
	DCD	|_iclk_SGX|
	DCD	0x0
	DCD	|_idleStat_SGX|
	DCD	0x0
	DCD	0x0
	DCD	0xa
	DCD	|_fclk_SGX|
	DCD	|_iclk_SGX|
	DCD	0x0
	DCD	|_idleStat_SGX|
	DCD	0x0
	DCD	|_SGX_SourceClock|
	DCD	0x3
	DCD	|_fclk_HSUSB1|
	DCD	|_iclk_USBHOST|
	DCD	|_wken_USBHOST|
	DCD	|_idleStat_USBHOST|
	DCD	|_autoIdle_USBHOST|
	DCD	0x0
	DCD	0x3
	DCD	|_fclk_HSUSB2|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x3
	DCD	|_fclk_USBHOST1|
	DCD	|_iclk_USBHOST1|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_USBHOST1_SourceClock|
	DCD	0x3
	DCD	|_fclk_USBHOST2|
	DCD	|_iclk_USBHOST2|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_USBHOST2_SourceClock|
	DCD	0x3
	DCD	|_fclk_USBHOST3|
	DCD	|_iclk_USBHOST3|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_USBHOST3_SourceClock|
	DCD	0x1
	DCD	0x0
	DCD	|_iclk_VRFB|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x2
	DCD	|_fclk_UART4|
	DCD	|_iclk_UART4|
	DCD	|_wken_UART4|
	DCD	|_idleStat_UART4|
	DCD	|_autoIdle_UART4|
	DCD	|_PER_48M_SourceClock|
|s_rgClockManagementRoutines| DCD |_PrcmDeviceEnableIClock|
	DCD	|_PrcmDeviceEnableFClock|
	DCD	|_PrcmDeviceEnableAutoIdle|
	DCD	|_PrcmDeviceSetSourceClock|
	DCD	|_PrcmDeviceEnableIClock|
	DCD	|_PrcmDeviceEnableFClock|
	DCD	|_PrcmDeviceEnableAutoIdle|
	DCD	|_PrcmDeviceSetSourceClock|
	DCD	|_PrcmDeviceEnableIClock|
	DCD	|_PrcmDeviceEnableFClock|
	DCD	|_PrcmDeviceEnableAutoIdle|
	DCD	|_PrcmDeviceSetSourceClock|
	DCD	|_PrcmDeviceEnableIClock_USB|
	DCD	|_PrcmDeviceEnableFClock_USB|
	DCD	|_PrcmDeviceEnableAutoIdle|
	DCD	|_PrcmDeviceSetSourceClock_USB|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_PrcmDeviceEnableIClock_DSS|
	DCD	|_PrcmDeviceEnableFClock_DSS|
	DCD	|_PrcmDeviceEnableAutoIdle|
	DCD	|_PrcmDeviceSetSourceClock_DSS|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	|_PrcmDeviceEnableFClock|
	DCD	0x0
	DCD	0x0
	DCD	|_PrcmDeviceEnableIClock|
	DCD	|_PrcmDeviceEnableFClock|
	DCD	|_PrcmDeviceEnableAutoIdle|
	DCD	|_PrcmDeviceSetSourceClock|
	DCD	|_PrcmDeviceEnableIClock|
	DCD	|_PrcmDeviceEnableFClock|
	DCD	0x0
	DCD	|_PrcmDeviceSetSourceClock|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|Lock|
	IMPORT	|EnterCriticalSection|
	IMPORT	|g_bSingleThreaded|
	IMPORT	|g_PrcmPostInit|
	IMPORT	|g_rgPrcmMutex|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\prcm\prcm_priv.h

  00000			 AREA	 |.pdata|, PDATA
|$T48873| DCD	|$LN6@Lock|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lock|	 PROC

; 266  : {

  00000		 |$LN6@Lock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48870|

; 267  :     if (g_PrcmPostInit && !g_bSingleThreaded) 

  00004	e59f3034	 ldr         r3, [pc, #0x34]
  00008	e5933000	 ldr         r3, [r3]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000006	 beq         |$LN1@Lock|
  00014	e59f3020	 ldr         r3, [pc, #0x20]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e3530000	 cmp         r3, #0

; 268  :         {
; 269  :         EnterCriticalSection(&g_rgPrcmMutex[mutexId]);

  00020	059f2010	 ldreq       r2, [pc, #0x10]
  00024	00803100	 addeq       r3, r0, r0, lsl #2
  00028	00820103	 addeq       r0, r2, r3, lsl #2
  0002c	0b000000	 bleq        EnterCriticalSection
  00030		 |$LN1@Lock|

; 270  :         }
; 271  : }

  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$LN7@Lock|
  00038		 |$LN8@Lock|
  00038	00000000	 DCD         |g_rgPrcmMutex|
  0003c		 |$LN9@Lock|
  0003c	00000000	 DCD         |g_bSingleThreaded|
  00040		 |$LN10@Lock|
  00040	00000000	 DCD         |g_PrcmPostInit|
  00044		 |$M48871|

			 ENDP  ; |Lock|

	EXPORT	|Unlock|
	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T48885| DCD	|$LN6@Unlock|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Unlock| PROC

; 277  : {

  00000		 |$LN6@Unlock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48882|

; 278  :     if (g_PrcmPostInit && !g_bSingleThreaded)

  00004	e59f3034	 ldr         r3, [pc, #0x34]
  00008	e5933000	 ldr         r3, [r3]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000006	 beq         |$LN1@Unlock|
  00014	e59f3020	 ldr         r3, [pc, #0x20]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e3530000	 cmp         r3, #0

; 279  :         {
; 280  :         LeaveCriticalSection(&g_rgPrcmMutex[mutexId]);

  00020	059f2010	 ldreq       r2, [pc, #0x10]
  00024	00803100	 addeq       r3, r0, r0, lsl #2
  00028	00820103	 addeq       r0, r2, r3, lsl #2
  0002c	0b000000	 bleq        LeaveCriticalSection
  00030		 |$LN1@Unlock|

; 281  :         }
; 282  : }

  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$LN7@Unlock|
  00038		 |$LN8@Unlock|
  00038	00000000	 DCD         |g_rgPrcmMutex|
  0003c		 |$LN9@Unlock|
  0003c	00000000	 DCD         |g_bSingleThreaded|
  00040		 |$LN10@Unlock|
  00040	00000000	 DCD         |g_PrcmPostInit|
  00044		 |$M48883|

			 ENDP  ; |Unlock|

	IMPORT	|PrcmDomainSetClockState|
	IMPORT	|PrcmDomainSetWakeupDependency|
	IMPORT	|PrcmDomainSetSleepDependency|
	IMPORT	|s_rgClockDomainDependency|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\prcm\prcm_device.c

  00000			 AREA	 |.pdata|, PDATA
|$T48897| DCD	|$LN8@PrcmDevice|
	DCD	0x40002901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceAddrefDeviceDomain| PROC

; 90   : {

  00000		 |$LN8@PrcmDevice|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48894|
  00004	e1a04000	 mov         r4, r0

; 91   :     // UNDONE:
; 92   :     //  Potential deadlock
; 93   :     //
; 94   :     Lock(Mutex_DeviceClock);

  00008	e3a00000	 mov         r0, #0
  0000c	eb000000	 bl          Lock

; 95   :     s_rgActiveDomainDeviceCount[powerDomain]++;

  00010	e59f2088	 ldr         r2, [pc, #0x88]
  00014	e7b23104	 ldr         r3, [r2, +r4, lsl #2]!
  00018	e2833001	 add         r3, r3, #1
  0001c	e5823000	 str         r3, [r2]

; 96   :     if (s_rgActiveDomainDeviceCount[powerDomain] == 1)

  00020	e3530001	 cmp         r3, #1
  00024	1a000018	 bne         |$LN1@PrcmDevice|

; 97   :         {
; 98   :         if ((s_rgClockDomainDependency[powerDomain].requiredSleepDependency & WKDEP_EN_MPU) == 0)

  00028	e59f706c	 ldr         r7, [pc, #0x6C]
  0002c	e0843084	 add         r3, r4, r4, lsl #1
  00030	e1a06103	 mov         r6, r3, lsl #2
  00034	e0865007	 add         r5, r6, r7
  00038	e5953008	 ldr         r3, [r5, #8]
  0003c	e3130002	 tst         r3, #2

; 99   :             {
; 100  :             // if sleep dependency is dynamic then associate sleep dependency
; 101  :             PrcmDomainSetSleepDependency(powerDomain, WKDEP_EN_MPU, TRUE);

  00040	03a02001	 moveq       r2, #1
  00044	03a01002	 moveq       r1, #2
  00048	01a00004	 moveq       r0, r4
  0004c	0b000000	 bleq        PrcmDomainSetSleepDependency

; 102  :             }
; 103  : 
; 104  :         // check if domain dependency is fixed or not
; 105  :         if ((s_rgClockDomainDependency[powerDomain].requiredWakeupDependency & WKDEP_EN_MPU) == 0)

  00050	e5953004	 ldr         r3, [r5, #4]
  00054	e3130002	 tst         r3, #2
  00058	1a00000b	 bne         |$LN1@PrcmDevice|

; 106  :             {
; 107  :             // if wake-up dependency is dynamic then associate wake-up dependency
; 108  :             PrcmDomainSetWakeupDependency(powerDomain, WKDEP_EN_MPU, TRUE);

  0005c	e3a02001	 mov         r2, #1
  00060	e3a01002	 mov         r1, #2
  00064	e1a00004	 mov         r0, r4
  00068	eb000000	 bl          PrcmDomainSetWakeupDependency

; 109  : 
; 110  :             // generate a software supervised wake-up to enable clock domain
; 111  :             PrcmDomainSetClockState(powerDomain,
; 112  :                             s_rgClockDomainDependency[powerDomain].clockDomain,
; 113  :                             CLKSTCTRL_WAKEUP
; 114  :                             );

  0006c	e7b61007	 ldr         r1, [r6, +r7]!
  00070	e3a02002	 mov         r2, #2
  00074	e1a00004	 mov         r0, r4
  00078	eb000000	 bl          PrcmDomainSetClockState

; 115  : 
; 116  :             PrcmDomainSetClockState(powerDomain,
; 117  :                             s_rgClockDomainDependency[powerDomain].clockDomain,
; 118  :                             CLKSTCTRL_AUTOMATIC
; 119  :                             );

  0007c	e5961000	 ldr         r1, [r6]
  00080	e3a02003	 mov         r2, #3
  00084	e1a00004	 mov         r0, r4
  00088	eb000000	 bl          PrcmDomainSetClockState
  0008c		 |$LN1@PrcmDevice|

; 120  :             }
; 121  :         }
; 122  :     Unlock(Mutex_DeviceClock);    

  0008c	e3a00000	 mov         r0, #0
  00090	eb000000	 bl          Unlock

; 123  : }

  00094	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN9@PrcmDevice|
  0009c		 |$LN10@PrcmDevice|
  0009c	00000000	 DCD         |s_rgClockDomainDependency|
  000a0		 |$LN11@PrcmDevice|
  000a0	00000000	 DCD         |s_rgActiveDomainDeviceCount|
  000a4		 |$M48895|

			 ENDP  ; |_PrcmDeviceAddrefDeviceDomain|


  00000			 AREA	 |.pdata|, PDATA
|$T48908| DCD	|$LN9@PrcmDevice@2|
	DCD	0x40002a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceReleaseDeviceDomain| PROC

; 134  : {

  00000		 |$LN9@PrcmDevice@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48905|
  00004	e1a04000	 mov         r4, r0

; 135  :     // UNDONE:
; 136  :     //  Potential deadlock
; 137  :     //
; 138  :     Lock(Mutex_DeviceClock);

  00008	e3a00000	 mov         r0, #0
  0000c	eb000000	 bl          Lock

; 139  :     if (s_rgActiveDomainDeviceCount[powerDomain] != 0)

  00010	e59f208c	 ldr         r2, [pc, #0x8C]
  00014	e7b23104	 ldr         r3, [r2, +r4, lsl #2]!
  00018	e3530000	 cmp         r3, #0
  0001c	0a00001b	 beq         |$LN1@PrcmDevice@2|

; 140  :         {
; 141  :         s_rgActiveDomainDeviceCount[powerDomain]--;

  00020	e2533001	 subs        r3, r3, #1
  00024	e5823000	 str         r3, [r2]

; 142  :         if (s_rgActiveDomainDeviceCount[powerDomain] == 0)

  00028	1a000018	 bne         |$LN1@PrcmDevice@2|

; 143  :             {
; 144  :             if ((s_rgClockDomainDependency[powerDomain].requiredWakeupDependency & WKDEP_EN_MPU) == 0)

  0002c	e59f706c	 ldr         r7, [pc, #0x6C]
  00030	e0843084	 add         r3, r4, r4, lsl #1
  00034	e1a06103	 mov         r6, r3, lsl #2
  00038	e0865007	 add         r5, r6, r7
  0003c	e5953004	 ldr         r3, [r5, #4]
  00040	e3130002	 tst         r3, #2

; 145  :                 {
; 146  :                 // if wake-up dependency is dynamic then dis-associate wake-up dependency
; 147  :                 PrcmDomainSetWakeupDependency(powerDomain, WKDEP_EN_MPU, FALSE);

  00044	03a02000	 moveq       r2, #0
  00048	03a01002	 moveq       r1, #2
  0004c	01a00004	 moveq       r0, r4
  00050	0b000000	 bleq        PrcmDomainSetWakeupDependency

; 148  :                 }
; 149  : 
; 150  :             if ((s_rgClockDomainDependency[powerDomain].requiredSleepDependency & WKDEP_EN_MPU) == 0)

  00054	e5953008	 ldr         r3, [r5, #8]
  00058	e3130002	 tst         r3, #2
  0005c	1a00000b	 bne         |$LN1@PrcmDevice@2|

; 151  :                 {
; 152  :                 // if sleep dependency is dynamic then dis-associate sleep dependency
; 153  :                 PrcmDomainSetSleepDependency(powerDomain, WKDEP_EN_MPU, FALSE);

  00060	e3a02000	 mov         r2, #0
  00064	e3a01002	 mov         r1, #2
  00068	e1a00004	 mov         r0, r4
  0006c	eb000000	 bl          PrcmDomainSetSleepDependency

; 154  : 
; 155  :                 // generate a software supervised sleep to disable clock domain
; 156  :                 PrcmDomainSetClockState(powerDomain,
; 157  :                                 s_rgClockDomainDependency[powerDomain].clockDomain,
; 158  :                                 CLKSTCTRL_SLEEP
; 159  :                                 );

  00070	e7b61007	 ldr         r1, [r6, +r7]!
  00074	e3a02001	 mov         r2, #1
  00078	e1a00004	 mov         r0, r4
  0007c	eb000000	 bl          PrcmDomainSetClockState

; 160  : 
; 161  :                 PrcmDomainSetClockState(powerDomain,
; 162  :                                 s_rgClockDomainDependency[powerDomain].clockDomain,
; 163  :                                 CLKSTCTRL_AUTOMATIC
; 164  :                                 );

  00080	e5961000	 ldr         r1, [r6]
  00084	e3a02003	 mov         r2, #3
  00088	e1a00004	 mov         r0, r4
  0008c	eb000000	 bl          PrcmDomainSetClockState
  00090		 |$LN1@PrcmDevice@2|

; 165  :                 }
; 166  :             }
; 167  :         }
; 168  :     Unlock(Mutex_DeviceClock); 

  00090	e3a00000	 mov         r0, #0
  00094	eb000000	 bl          Unlock

; 169  : }

  00098	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN10@PrcmDevice@2|
  000a0		 |$LN11@PrcmDevice@2|
  000a0	00000000	 DCD         |s_rgClockDomainDependency|
  000a4		 |$LN12@PrcmDevice@2|
  000a4	00000000	 DCD         |s_rgActiveDomainDeviceCount|
  000a8		 |$M48906|

			 ENDP  ; |_PrcmDeviceReleaseDeviceDomain|

	EXPORT	|_PrcmDeviceHwUpdateAutoidle|
	EXPORT	|??_C@_1EI@DMKFONCI@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAH?$AAw?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAA?$AAu?$AAt?$AAo?$AAi?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@JFJNOCNE@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAH?$AAw?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAA?$AAu?$AAt?$AAo?$AAi?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv@| [ DATA ] ; `string'
	IMPORT	|GetCmRegisterSet|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T48930| DCD	|$LN16@PrcmDevice@3|
	DCD	0x40002d01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@DMKFONCI@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAH?$AAw?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAA?$AAu?$AAt?$AAo?$AAi?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "H"
	DCB	0x0, "w", 0x0, "U", 0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "A", 0x0, "u", 0x0, "t", 0x0, "o", 0x0, "i"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@JFJNOCNE@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAH?$AAw?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAA?$AAu?$AAt?$AAo?$AAi?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "H"
	DCB	0x0, "w", 0x0, "U", 0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "A", 0x0, "u", 0x0, "t", 0x0, "o", 0x0, "i"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, "(", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceHwUpdateAutoidle| PROC

; 181  : {

  00000		 |$LN16@PrcmDevice@3|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48927|
  00004	e1a04000	 mov         r4, r0

; 182  :     UINT mask;
; 183  :     BOOL rc = TRUE;  
; 184  :     OMAP_CM_REGS *pPrcmCm;
; 185  :     volatile unsigned int *pautoidle;
; 186  :     if (!g_bSingleThreaded)

  00008	e59f60a0	 ldr         r6, [pc, #0xA0]
  0000c	e59f5098	 ldr         r5, [pc, #0x98]
  00010	e5963000	 ldr         r3, [r6]
  00014	e3530000	 cmp         r3, #0
  00018	1a000004	 bne         |$LN12@PrcmDevice@3|

; 187  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceHwUpdateAutoidle(devId=%d)\r\n", devId));

  0001c	e5953440	 ldr         r3, [r5, #0x440]
  00020	e3130004	 tst         r3, #4
  00024	159f007c	 ldrne       r0, [pc, #0x7C]
  00028	11a01004	 movne       r1, r4
  0002c	1b000000	 blne        NKDbgPrintfW
  00030		 |$LN12@PrcmDevice@3|

; 188  : 
; 189  :     SPECIAL_DEBUG_MESSAGE(_PrcmDeviceHwUpdateAutoidle, devId)
; 190  : 
; 191  :     if (s_rgDeviceLookupTable[devId].pautoidle == NULL) goto cleanUp;

  00030	e59f206c	 ldr         r2, [pc, #0x6C]
  00034	e0641184	 rsb         r1, r4, r4, lsl #3
  00038	e0827101	 add         r7, r2, r1, lsl #2
  0003c	e5973014	 ldr         r3, [r7, #0x14]
  00040	e3530000	 cmp         r3, #0
  00044	0a00000a	 beq         |$cleanUp$48135|

; 192  : 
; 193  :     mask = s_rgDeviceLookupTable[devId].pautoidle->mask;
; 194  :     pPrcmCm = GetCmRegisterSet(s_rgDeviceLookupTable[devId].powerDomain);

  00048	e7920101	 ldr         r0, [r2, +r1, lsl #2]
  0004c	e5934004	 ldr         r4, [r3, #4]
  00050	eb000000	 bl          GetCmRegisterSet

; 195  :     pautoidle = (volatile unsigned int*)((UCHAR*)pPrcmCm + s_rgDeviceLookupTable[devId].pautoidle->offset);

  00054	e5973014	 ldr         r3, [r7, #0x14]
  00058	e5932008	 ldr         r2, [r3, #8]

; 196  : 
; 197  :     if (s_rgDeviceLookupTable[devId].pautoidle->enabled == TRUE)

  0005c	e5933000	 ldr         r3, [r3]
  00060	e3530001	 cmp         r3, #1

; 198  :         {
; 199  :         SETREG32(pautoidle, mask);

  00064	e7923000	 ldr         r3, [r2, +r0]
  00068	01833004	 orreq       r3, r3, r4

; 200  :         }
; 201  :     else
; 202  :         {
; 203  :         CLRREG32(pautoidle, mask);

  0006c	11c33004	 bicne       r3, r3, r4
  00070	e7823000	 str         r3, [r2, +r0]
  00074		 |$cleanUp$48135|
  00074	e5963000	 ldr         r3, [r6]

; 204  :         }
; 205  :     
; 206  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceHwUpdateAutoidle, devId)
; 207  :     rc = TRUE;
; 208  : 
; 209  : cleanUp:
; 210  :     if (!g_bSingleThreaded)

  00078	e3530000	 cmp         r3, #0
  0007c	1a000004	 bne         |$LN10@PrcmDevice@3|
  00080	e5953440	 ldr         r3, [r5, #0x440]

; 211  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceHwUpdateAutoidle()=%d\r\n", rc));

  00084	e3130004	 tst         r3, #4
  00088	159f0010	 ldrne       r0, [pc, #0x10]
  0008c	13a01001	 movne       r1, #1
  00090	1b000000	 blne        NKDbgPrintfW
  00094		 |$LN10@PrcmDevice@3|

; 212  :     return rc;

  00094	e3a00001	 mov         r0, #1

; 213  : }

  00098	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN17@PrcmDevice@3|
  000a0		 |$LN18@PrcmDevice@3|
  000a0	00000000	 DCD         |??_C@_1EI@DMKFONCI@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAH?$AAw?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAA?$AAu?$AAt?$AAo?$AAi?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@|
  000a4		 |$LN19@PrcmDevice@3|
  000a4	00000000	 DCD         |s_rgDeviceLookupTable|
  000a8		 |$LN20@PrcmDevice@3|
  000a8	00000000	 DCD         |??_C@_1FC@JFJNOCNE@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAH?$AAw?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAA?$AAu?$AAt?$AAo?$AAi?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv@|
  000ac		 |$LN21@PrcmDevice@3|
  000ac	00000000	 DCD         |dpCurSettings|
  000b0		 |$LN22@PrcmDevice@3|
  000b0	00000000	 DCD         |g_bSingleThreaded|
  000b4		 |$M48928|

			 ENDP  ; |_PrcmDeviceHwUpdateAutoidle|

	EXPORT	|??_C@_1EE@DHLHDFDF@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@JDCJJDME@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48952| DCD	|$LN13@PrcmDevice@4|
	DCD	0x40002601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@DHLHDFDF@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "A"
	DCB	0x0, "u", 0x0, "t", 0x0, "o", 0x0, "I", 0x0, "d", 0x0, "l"
	DCB	0x0, "e", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@JDCJJDME@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "A"
	DCB	0x0, "u", 0x0, "t", 0x0, "o", 0x0, "I", 0x0, "d", 0x0, "l"
	DCB	0x0, "e", 0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I"
	DCB	0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceEnableAutoIdle| PROC

; 226  : {

  00000		 |$LN13@PrcmDevice@4|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48949|
  00004	e1a06001	 mov         r6, r1
  00008	e1a04000	 mov         r4, r0

; 227  :     BOOL rc = TRUE;    
; 228  :     if (!g_bSingleThreaded)

  0000c	e59f7080	 ldr         r7, [pc, #0x80]
  00010	e59f5078	 ldr         r5, [pc, #0x78]
  00014	e5973000	 ldr         r3, [r7]
  00018	e3530000	 cmp         r3, #0
  0001c	1a000005	 bne         |$LN10@PrcmDevice@4|

; 229  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableAutoIdle(devId=%d, %d)\r\n", devId, bEnable));

  00020	e5953440	 ldr         r3, [r5, #0x440]
  00024	e3130004	 tst         r3, #4
  00028	159f005c	 ldrne       r0, [pc, #0x5C]
  0002c	11a02006	 movne       r2, r6
  00030	11a01004	 movne       r1, r4
  00034	1b000000	 blne        NKDbgPrintfW
  00038		 |$LN10@PrcmDevice@4|

; 230  : 
; 231  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableAutoIdle, devId, bEnable)
; 232  : 
; 233  :     // update flag
; 234  :     if (s_rgDeviceLookupTable[devId].pautoidle)

  00038	e59f2048	 ldr         r2, [pc, #0x48]
  0003c	e0643184	 rsb         r3, r4, r4, lsl #3
  00040	e0823103	 add         r3, r2, r3, lsl #2
  00044	e5933014	 ldr         r3, [r3, #0x14]
  00048	e3530000	 cmp         r3, #0

; 235  :         {
; 236  :         s_rgDeviceLookupTable[devId].pautoidle->enabled = bEnable;
; 237  :         _PrcmDeviceHwUpdateAutoidle(devId);

  0004c	11a00004	 movne       r0, r4
  00050	15836000	 strne       r6, [r3]
  00054	1b000000	 blne        _PrcmDeviceHwUpdateAutoidle
  00058	e5973000	 ldr         r3, [r7]

; 238  :         }
; 239  :     rc = TRUE;
; 240  :     
; 241  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableAutoIdle, devId)
; 242  : 
; 243  :     if (!g_bSingleThreaded)

  0005c	e3530000	 cmp         r3, #0
  00060	1a000004	 bne         |$LN8@PrcmDevice@4|
  00064	e5953440	 ldr         r3, [r5, #0x440]

; 244  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableAutoIdle()=%d\r\n", rc));

  00068	e3130004	 tst         r3, #4
  0006c	159f0010	 ldrne       r0, [pc, #0x10]
  00070	13a01001	 movne       r1, #1
  00074	1b000000	 blne        NKDbgPrintfW
  00078		 |$LN8@PrcmDevice@4|

; 245  :     return rc;

  00078	e3a00001	 mov         r0, #1

; 246  : }

  0007c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN14@PrcmDevice@4|
  00084		 |$LN15@PrcmDevice@4|
  00084	00000000	 DCD         |??_C@_1EE@DHLHDFDF@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@|
  00088		 |$LN16@PrcmDevice@4|
  00088	00000000	 DCD         |s_rgDeviceLookupTable|
  0008c		 |$LN17@PrcmDevice@4|
  0008c	00000000	 DCD         |??_C@_1FG@JDCJJDME@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@|
  00090		 |$LN18@PrcmDevice@4|
  00090	00000000	 DCD         |dpCurSettings|
  00094		 |$LN19@PrcmDevice@4|
  00094	00000000	 DCD         |g_bSingleThreaded|
  00098		 |$M48950|

			 ENDP  ; |_PrcmDeviceEnableAutoIdle|

	EXPORT	|_PrcmUpdateDeviceClockSource|
	EXPORT	|??_C@_1EE@LKHHNJGE@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@BDPNINII@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$CI?$AAp?$AAS@| [ DATA ] ; `string'
	IMPORT	|ClockUpdateParentClock|

  00000			 AREA	 |.pdata|, PDATA
|$T48975| DCD	|$LN18@PrcmUpdate|
	DCD	0x40002901

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@LKHHNJGE@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "S", 0x0, "o"
	DCB	0x0, "u", 0x0, "r", 0x0, "c", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@BDPNINII@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$CI?$AAp?$AAS@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "S", 0x0, "o"
	DCB	0x0, "u", 0x0, "r", 0x0, "c", 0x0, "e", 0x0, "(", 0x0, "p"
	DCB	0x0, "S", 0x0, "r", 0x0, "c", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "s", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "b", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmUpdateDeviceClockSource| PROC

; 260  : {

  00000		 |$LN18@PrcmUpdate|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M48972|
  00004	e1a09001	 mov         r9, r1
  00008	e1a04000	 mov         r4, r0

; 261  :     DWORD i;
; 262  :     if (!g_bSingleThreaded)

  0000c	e59f608c	 ldr         r6, [pc, #0x8C]
  00010	e59f5084	 ldr         r5, [pc, #0x84]
  00014	e5963000	 ldr         r3, [r6]
  00018	e3530000	 cmp         r3, #0
  0001c	1a000005	 bne         |$LN15@PrcmUpdate|

; 263  :         OALMSG(OAL_FUNC, (L"+_PrcmUpdateDeviceClockSource"
; 264  :             L"(pSrcClocks=0x%08X, bEnable=%d)\r\n", pSrcClocks, bEnable)
; 265  :             );

  00020	e5953440	 ldr         r3, [r5, #0x440]
  00024	e3130004	 tst         r3, #4
  00028	159f0068	 ldrne       r0, [pc, #0x68]
  0002c	11a02009	 movne       r2, r9
  00030	11a01004	 movne       r1, r4
  00034	1b000000	 blne        NKDbgPrintfW
  00038		 |$LN15@PrcmUpdate|

; 266  :     
; 267  :     if (pSrcClocks == NULL) return;

  00038	e3540000	 cmp         r4, #0
  0003c	0a000012	 beq         |$LN11@PrcmUpdate|

; 268  : 
; 269  :     for (i = 0; i < pSrcClocks->size; ++i)

  00040	e5943000	 ldr         r3, [r4]
  00044	e3a08000	 mov         r8, #0
  00048	e3530000	 cmp         r3, #0
  0004c	9a000007	 bls         |$LN2@PrcmUpdate|
  00050	e1a07004	 mov         r7, r4
  00054		 |$LL4@PrcmUpdate|

; 270  :         {
; 271  :         ClockUpdateParentClock(pSrcClocks->rgSourceClocks[i], bEnable);

  00054	e5b70004	 ldr         r0, [r7, #4]!
  00058	e1a01009	 mov         r1, r9
  0005c	eb000000	 bl          ClockUpdateParentClock
  00060	e5943000	 ldr         r3, [r4]
  00064	e2888001	 add         r8, r8, #1
  00068	e1580003	 cmp         r8, r3
  0006c	3afffff8	 bcc         |$LL4@PrcmUpdate|
  00070		 |$LN2@PrcmUpdate|

; 261  :     DWORD i;
; 262  :     if (!g_bSingleThreaded)

  00070	e5963000	 ldr         r3, [r6]

; 272  :         }
; 273  : 
; 274  :     if (!g_bSingleThreaded)

  00074	e3530000	 cmp         r3, #0
  00078	1a000003	 bne         |$LN11@PrcmUpdate|
  0007c	e5953440	 ldr         r3, [r5, #0x440]

; 275  :         OALMSG(OAL_FUNC, (L"+_PrcmUpdateDeviceClockSource()\r\n"));

  00080	e3130004	 tst         r3, #4
  00084	159f0008	 ldrne       r0, [pc, #8]
  00088	1b000000	 blne        NKDbgPrintfW
  0008c		 |$LN11@PrcmUpdate|

; 276  : }

  0008c	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$LN19@PrcmUpdate|
  00094		 |$LN20@PrcmUpdate|
  00094	00000000	 DCD         |??_C@_1EE@LKHHNJGE@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN@|
  00098		 |$LN21@PrcmUpdate|
  00098	00000000	 DCD         |??_C@_1HO@BDPNINII@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$CI?$AAp?$AAS@|
  0009c		 |$LN22@PrcmUpdate|
  0009c	00000000	 DCD         |dpCurSettings|
  000a0		 |$LN23@PrcmUpdate|
  000a0	00000000	 DCD         |g_bSingleThreaded|
  000a4		 |$M48973|

			 ENDP  ; |_PrcmUpdateDeviceClockSource|

	EXPORT	|_PrcmDeviceWaitForDeviceAccess|
	EXPORT	|??_C@_1EO@BLAPGCDC@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@NMFDDLHH@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI@| [ DATA ] ; `string'
	IMPORT	|OALStall|

  00000			 AREA	 |.pdata|, PDATA
|$T49005| DCD	|$LN22@PrcmDevice@5|
	DCD	0x40003101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@BLAPGCDC@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "A", 0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@NMFDDLHH@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "A", 0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceWaitForDeviceAccess| PROC

; 289  : {

  00000		 |$LN22@PrcmDevice@5|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M49002|
  00004	e1a0e000	 mov         lr, r0

; 290  :     int i;
; 291  :     UINT mask;
; 292  :     OMAP_CM_REGS *pPrcmCm;
; 293  :     volatile unsigned int *pidle;
; 294  :     DeviceLookupEntry const *pEntry = &s_rgDeviceLookupTable[devId];    
; 295  :     if (!g_bSingleThreaded)

  00008	e59f60b0	 ldr         r6, [pc, #0xB0]
  0000c	e59f10a8	 ldr         r1, [pc, #0xA8]
  00010	e06e318e	 rsb         r3, lr, lr, lsl #3
  00014	e5962000	 ldr         r2, [r6]
  00018	e59f5098	 ldr         r5, [pc, #0x98]
  0001c	e0814103	 add         r4, r1, r3, lsl #2
  00020	e3520000	 cmp         r2, #0
  00024	1a000004	 bne         |$LN17@PrcmDevice@5|

; 296  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceWaitForDeviceAccess(devId=%d)\r\n", devId));

  00028	e5953440	 ldr         r3, [r5, #0x440]
  0002c	e3130004	 tst         r3, #4
  00030	159f007c	 ldrne       r0, [pc, #0x7C]
  00034	11a0100e	 movne       r1, lr
  00038	1b000000	 blne        NKDbgPrintfW
  0003c		 |$LN17@PrcmDevice@5|

; 297  : 
; 298  :     SPECIAL_DEBUG_MESSAGE(_PrcmDeviceWaitForDeviceAccess, devId)
; 299  : 
; 300  :     if (pEntry->pidlestatus != NULL)

  0003c	e5943010	 ldr         r3, [r4, #0x10]
  00040	e3530000	 cmp         r3, #0
  00044	0a00000e	 beq         |$LN19@PrcmDevice@5|

; 301  :         {
; 302  :         mask = pEntry->pidlestatus->mask;    
; 303  :         pPrcmCm = GetCmRegisterSet(pEntry->powerDomain);

  00048	e5940000	 ldr         r0, [r4]
  0004c	e5937000	 ldr         r7, [r3]
  00050	eb000000	 bl          GetCmRegisterSet

; 304  :         pidle = (volatile unsigned int*)((UCHAR*)pPrcmCm + pEntry->pidlestatus->offset);  

  00054	e5943010	 ldr         r3, [r4, #0x10]
  00058	e1a08000	 mov         r8, r0

; 305  :         for (i = 0; i < MAX_IDLESTATUS_LOOP; ++i)

  0005c	e3a04000	 mov         r4, #0
  00060	e5939004	 ldr         r9, [r3, #4]
  00064		 |$LL5@PrcmDevice@5|

; 306  :             {
; 307  :             if ((INREG32(pidle) & mask) == 0) break;

  00064	e7993008	 ldr         r3, [r9, +r8]
  00068	e1130007	 tst         r3, r7
  0006c	0a000004	 beq         |$LN19@PrcmDevice@5|

; 308  :             OALStall(1);

  00070	e3a00001	 mov         r0, #1
  00074	eb000000	 bl          OALStall
  00078	e2844001	 add         r4, r4, #1
  0007c	e3540a01	 cmp         r4, #1, 20
  00080	bafffff7	 blt         |$LL5@PrcmDevice@5|
  00084		 |$LN19@PrcmDevice@5|

; 290  :     int i;
; 291  :     UINT mask;
; 292  :     OMAP_CM_REGS *pPrcmCm;
; 293  :     volatile unsigned int *pidle;
; 294  :     DeviceLookupEntry const *pEntry = &s_rgDeviceLookupTable[devId];    
; 295  :     if (!g_bSingleThreaded)

  00084	e5963000	 ldr         r3, [r6]

; 309  :             }
; 310  :         }
; 311  :     
; 312  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceWaitForDeviceAccess, devId)
; 313  : 
; 314  :     if (!g_bSingleThreaded)

  00088	e3530000	 cmp         r3, #0
  0008c	1a000004	 bne         |$LN12@PrcmDevice@5|
  00090	e5953440	 ldr         r3, [r5, #0x440]

; 315  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceWaitForDeviceAccess()=%d\r\n", TRUE));

  00094	e3130004	 tst         r3, #4
  00098	159f0010	 ldrne       r0, [pc, #0x10]
  0009c	13a01001	 movne       r1, #1
  000a0	1b000000	 blne        NKDbgPrintfW
  000a4		 |$LN12@PrcmDevice@5|

; 316  :     return TRUE;

  000a4	e3a00001	 mov         r0, #1

; 317  : }

  000a8	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN23@PrcmDevice@5|
  000b0		 |$LN24@PrcmDevice@5|
  000b0	00000000	 DCD         |??_C@_1EO@BLAPGCDC@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI@|
  000b4		 |$LN25@PrcmDevice@5|
  000b4	00000000	 DCD         |??_C@_1FI@NMFDDLHH@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI@|
  000b8		 |$LN26@PrcmDevice@5|
  000b8	00000000	 DCD         |dpCurSettings|
  000bc		 |$LN27@PrcmDevice@5|
  000bc	00000000	 DCD         |s_rgDeviceLookupTable|
  000c0		 |$LN28@PrcmDevice@5|
  000c0	00000000	 DCD         |g_bSingleThreaded|
  000c4		 |$M49003|

			 ENDP  ; |_PrcmDeviceWaitForDeviceAccess|

	EXPORT	|_PrcmDeviceEnableWakeUp|
	EXPORT	|??_C@_1EA@CPOENIOI@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@NOGBCNIM@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|GetPrmRegisterSet|

  00000			 AREA	 |.pdata|, PDATA
|$T49032| DCD	|$LN16@PrcmDevice@6|
	DCD	0x40002c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@CPOENIOI@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "W"
	DCB	0x0, "a", 0x0, "k", 0x0, "e", 0x0, "U", 0x0, "p", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@NOGBCNIM@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "W"
	DCB	0x0, "a", 0x0, "k", 0x0, "e", 0x0, "U", 0x0, "p", 0x0, "("
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceEnableWakeUp| PROC

; 330  : {

  00000		 |$LN16@PrcmDevice@6|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M49029|
  00004	e1a08001	 mov         r8, r1
  00008	e1a01000	 mov         r1, r0

; 331  :     UINT mask;
; 332  :     OMAP_PRM_REGS *pPrcmPrm;
; 333  :     volatile unsigned int *pwken;
; 334  :     DeviceLookupEntry const *pEntry = &s_rgDeviceLookupTable[devId];
; 335  :     if (!g_bSingleThreaded)

  0000c	e59f7098	 ldr         r7, [pc, #0x98]
  00010	e59fe090	 ldr         lr, [pc, #0x90]
  00014	e0613181	 rsb         r3, r1, r1, lsl #3
  00018	e5972000	 ldr         r2, [r7]
  0001c	e59f5080	 ldr         r5, [pc, #0x80]
  00020	e08e6103	 add         r6, lr, r3, lsl #2
  00024	e3520000	 cmp         r2, #0
  00028	1a000003	 bne         |$LN12@PrcmDevice@6|

; 336  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableWakeUp(devId=%d)\r\n", devId));

  0002c	e5953440	 ldr         r3, [r5, #0x440]
  00030	e3130004	 tst         r3, #4
  00034	159f0064	 ldrne       r0, [pc, #0x64]
  00038	1b000000	 blne        NKDbgPrintfW
  0003c		 |$LN12@PrcmDevice@6|

; 337  : 
; 338  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableWakeUp, devId, bEnable)
; 339  : 
; 340  :     // check if device is wakeup capable
; 341  :     if (pEntry->pwken != NULL)

  0003c	e596300c	 ldr         r3, [r6, #0xC]
  00040	e3530000	 cmp         r3, #0
  00044	0a000009	 beq         |$LN2@PrcmDevice@6|

; 342  :         {
; 343  :         // initialize variables
; 344  :         mask = pEntry->pwken->mask;    
; 345  :         pPrcmPrm = GetPrmRegisterSet(pEntry->powerDomain);

  00048	e5960000	 ldr         r0, [r6]
  0004c	e5934000	 ldr         r4, [r3]
  00050	eb000000	 bl          GetPrmRegisterSet

; 346  :         pwken = (volatile unsigned int*)((UCHAR*)pPrcmPrm + pEntry->pwken->offset);

  00054	e596300c	 ldr         r3, [r6, #0xC]

; 347  :         
; 348  :         if (bEnable) 

  00058	e3580000	 cmp         r8, #0
  0005c	e5932004	 ldr         r2, [r3, #4]

; 349  :             {
; 350  :             SETREG32(pwken, mask);

  00060	e7923000	 ldr         r3, [r2, +r0]
  00064	11833004	 orrne       r3, r3, r4

; 351  :             }
; 352  :         else
; 353  :             {
; 354  :             CLRREG32(pwken, mask);

  00068	01c33004	 biceq       r3, r3, r4
  0006c	e7823000	 str         r3, [r2, +r0]
  00070		 |$LN2@PrcmDevice@6|
  00070	e5973000	 ldr         r3, [r7]

; 355  :             }
; 356  :         }
; 357  : 
; 358  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableWakeUp, devId)
; 359  : 
; 360  :     if (!g_bSingleThreaded)

  00074	e3530000	 cmp         r3, #0
  00078	1a000004	 bne         |$LN10@PrcmDevice@6|
  0007c	e5953440	 ldr         r3, [r5, #0x440]

; 361  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableWakeUp()=%d\r\n", TRUE));

  00080	e3130004	 tst         r3, #4
  00084	159f0010	 ldrne       r0, [pc, #0x10]
  00088	13a01001	 movne       r1, #1
  0008c	1b000000	 blne        NKDbgPrintfW
  00090		 |$LN10@PrcmDevice@6|

; 362  :     return TRUE;

  00090	e3a00001	 mov         r0, #1

; 363  : }

  00094	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN17@PrcmDevice@6|
  0009c		 |$LN18@PrcmDevice@6|
  0009c	00000000	 DCD         |??_C@_1EA@CPOENIOI@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  000a0		 |$LN19@PrcmDevice@6|
  000a0	00000000	 DCD         |??_C@_1EK@NOGBCNIM@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@|
  000a4		 |$LN20@PrcmDevice@6|
  000a4	00000000	 DCD         |dpCurSettings|
  000a8		 |$LN21@PrcmDevice@6|
  000a8	00000000	 DCD         |s_rgDeviceLookupTable|
  000ac		 |$LN22@PrcmDevice@6|
  000ac	00000000	 DCD         |g_bSingleThreaded|
  000b0		 |$M49030|

			 ENDP  ; |_PrcmDeviceEnableWakeUp|

	EXPORT	|??_C@_1EA@KEPHJOIB@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@GCMBLELH@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|OALWakeupLatency_DeviceEnabled|

  00000			 AREA	 |.pdata|, PDATA
|$T49059| DCD	|$LN16@PrcmDevice@7|
	DCD	0x40003101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@KEPHJOIB@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@GCMBLELH@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "("
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceEnableFClock| PROC

; 376  : {

  00000		 |$LN16@PrcmDevice@7|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M49056|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 377  :     UINT mask;
; 378  :     OMAP_CM_REGS *pPrcmCm;
; 379  :     volatile unsigned int *pfclken;
; 380  :     DeviceLookupEntry const *pEntry = &s_rgDeviceLookupTable[devId]; 
; 381  :     if (!g_bSingleThreaded)

  0000c	e59f80ac	 ldr         r8, [pc, #0xAC]
  00010	e59fe0a4	 ldr         lr, [pc, #0xA4]
  00014	e0643184	 rsb         r3, r4, r4, lsl #3
  00018	e5982000	 ldr         r2, [r8]
  0001c	e59f6094	 ldr         r6, [pc, #0x94]
  00020	e08e9103	 add         r9, lr, r3, lsl #2
  00024	e3520000	 cmp         r2, #0
  00028	1a000005	 bne         |$LN12@PrcmDevice@7|

; 382  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableFClock(devId=%d, %d)\r\n", devId, bEnable));

  0002c	e5963440	 ldr         r3, [r6, #0x440]
  00030	e3130004	 tst         r3, #4
  00034	159f0078	 ldrne       r0, [pc, #0x78]
  00038	11a02005	 movne       r2, r5
  0003c	11a01004	 movne       r1, r4
  00040	1b000000	 blne        NKDbgPrintfW
  00044		 |$LN12@PrcmDevice@7|

; 383  : 
; 384  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableFClock, devId, bEnable)
; 385  : 
; 386  :     if (pEntry->pfclk != NULL)

  00044	e5993004	 ldr         r3, [r9, #4]
  00048	e3530000	 cmp         r3, #0
  0004c	0a00000c	 beq         |$LN4@PrcmDevice@7|

; 387  :         {    
; 388  :         mask = pEntry->pfclk->mask;    
; 389  :         pPrcmCm = GetCmRegisterSet(pEntry->powerDomain);

  00050	e5990000	 ldr         r0, [r9]
  00054	e5937004	 ldr         r7, [r3, #4]
  00058	eb000000	 bl          GetCmRegisterSet

; 390  :         pfclken = (volatile unsigned int*)((UCHAR*)pPrcmCm + pEntry->pfclk->offset);

  0005c	e5993004	 ldr         r3, [r9, #4]

; 391  :         
; 392  :         if (bEnable != FALSE)

  00060	e3550000	 cmp         r5, #0

; 393  :             {
; 394  :             SETREG32(pfclken, mask);
; 395  :             }
; 396  :         else
; 397  :             {
; 398  :             CLRREG32(pfclken, mask);
; 399  :             }
; 400  : 
; 401  :         // notify oal of device activity for wakeup latency management
; 402  :         OALWakeupLatency_DeviceEnabled(devId, bEnable);

  00064	e1a01005	 mov         r1, r5
  00068	e5932008	 ldr         r2, [r3, #8]
  0006c	e7923000	 ldr         r3, [r2, +r0]
  00070	11833007	 orrne       r3, r3, r7
  00074	01c33007	 biceq       r3, r3, r7
  00078	e7823000	 str         r3, [r2, +r0]
  0007c	e1a00004	 mov         r0, r4
  00080	eb000000	 bl          OALWakeupLatency_DeviceEnabled
  00084		 |$LN4@PrcmDevice@7|
  00084	e5983000	 ldr         r3, [r8]

; 403  :         }
; 404  :     
; 405  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableFClock, devId)
; 406  : 
; 407  :     if (!g_bSingleThreaded)

  00088	e3530000	 cmp         r3, #0
  0008c	1a000004	 bne         |$LN10@PrcmDevice@7|
  00090	e5963440	 ldr         r3, [r6, #0x440]

; 408  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableFClock()=%d\r\n", TRUE));

  00094	e3130004	 tst         r3, #4
  00098	159f0010	 ldrne       r0, [pc, #0x10]
  0009c	13a01001	 movne       r1, #1
  000a0	1b000000	 blne        NKDbgPrintfW
  000a4		 |$LN10@PrcmDevice@7|

; 409  :     return TRUE;

  000a4	e3a00001	 mov         r0, #1

; 410  : }

  000a8	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN17@PrcmDevice@7|
  000b0		 |$LN18@PrcmDevice@7|
  000b0	00000000	 DCD         |??_C@_1EA@KEPHJOIB@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  000b4		 |$LN19@PrcmDevice@7|
  000b4	00000000	 DCD         |??_C@_1FC@GCMBLELH@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@|
  000b8		 |$LN20@PrcmDevice@7|
  000b8	00000000	 DCD         |dpCurSettings|
  000bc		 |$LN21@PrcmDevice@7|
  000bc	00000000	 DCD         |s_rgDeviceLookupTable|
  000c0		 |$LN22@PrcmDevice@7|
  000c0	00000000	 DCD         |g_bSingleThreaded|
  000c4		 |$M49057|

			 ENDP  ; |_PrcmDeviceEnableFClock|

	EXPORT	|??_C@_1EA@KNFBIFDK@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@IOGCKABF@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49086| DCD	|$LN17@PrcmDevice@8|
	DCD	0x40003c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@KNFBIFDK@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@IOGCKABF@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "("
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceEnableIClock| PROC

; 579  : {

  00000		 |$LN17@PrcmDevice@8|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M49083|
  00004	e1a07001	 mov         r7, r1
  00008	e1a05000	 mov         r5, r0

; 580  :     UINT mask;
; 581  :     OMAP_CM_REGS *pPrcmCm;
; 582  :     volatile unsigned int *piclken;
; 583  :     DeviceLookupEntry const *pEntry = &s_rgDeviceLookupTable[devId];    
; 584  :     if (!g_bSingleThreaded)

  0000c	e59f90d8	 ldr         r9, [pc, #0xD8]
  00010	e59fe0d0	 ldr         lr, [pc, #0xD0]
  00014	e0653185	 rsb         r3, r5, r5, lsl #3
  00018	e5992000	 ldr         r2, [r9]
  0001c	e59f80c0	 ldr         r8, [pc, #0xC0]
  00020	e08e4103	 add         r4, lr, r3, lsl #2
  00024	e3520000	 cmp         r2, #0
  00028	1a000005	 bne         |$LN13@PrcmDevice@8|

; 585  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableIClock(devId=%d, %d)\r\n", devId, bEnable));

  0002c	e5983440	 ldr         r3, [r8, #0x440]
  00030	e3130004	 tst         r3, #4
  00034	159f00a4	 ldrne       r0, [pc, #0xA4]
  00038	11a02007	 movne       r2, r7
  0003c	11a01005	 movne       r1, r5
  00040	1b000000	 blne        NKDbgPrintfW
  00044		 |$LN13@PrcmDevice@8|

; 586  : 
; 587  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableIClock, devId, bEnable)
; 588  : 
; 589  :     if (pEntry->piclk != NULL)

  00044	e5943008	 ldr         r3, [r4, #8]
  00048	e3530000	 cmp         r3, #0
  0004c	0a000017	 beq         |$LN14@PrcmDevice@8|

; 590  :         {
; 591  :         mask = pEntry->piclk->mask;    
; 592  :         pPrcmCm = GetCmRegisterSet(pEntry->powerDomain);

  00050	e5940000	 ldr         r0, [r4]
  00054	e593a004	 ldr         r10, [r3, #4]
  00058	eb000000	 bl          GetCmRegisterSet

; 593  :         piclken = (volatile unsigned int*)((UCHAR*)pPrcmCm + pEntry->piclk->offset);        

  0005c	e5943008	 ldr         r3, [r4, #8]

; 594  : 
; 595  :         if (bEnable != FALSE)

  00060	e3570000	 cmp         r7, #0
  00064	e1a06000	 mov         r6, r0
  00068	e5937008	 ldr         r7, [r3, #8]
  0006c	0a00000a	 beq         |$LN4@PrcmDevice@8|

; 596  :             {
; 597  :             _PrcmDeviceAddrefDeviceDomain(pEntry->powerDomain);

  00070	e5940000	 ldr         r0, [r4]
  00074	eb000000	 bl          _PrcmDeviceAddrefDeviceDomain

; 598  :             SETREG32(piclken, mask);

  00078	e7973006	 ldr         r3, [r7, +r6]
  0007c	e183300a	 orr         r3, r3, r10
  00080	e7873006	 str         r3, [r7, +r6]

; 599  :             
; 600  :             // wait until device is accessible
; 601  :             if (pEntry->pidlestatus != NULL)

  00084	e5943010	 ldr         r3, [r4, #0x10]
  00088	e3530000	 cmp         r3, #0
  0008c	0a000007	 beq         |$LN14@PrcmDevice@8|

; 602  :                 {
; 603  :                 _PrcmDeviceWaitForDeviceAccess(devId);

  00090	e1a00005	 mov         r0, r5
  00094	eb000000	 bl          _PrcmDeviceWaitForDeviceAccess

; 604  :                 }
; 605  :             }
; 606  :         else

  00098	ea000004	 b           |$LN14@PrcmDevice@8|
  0009c		 |$LN4@PrcmDevice@8|

; 607  :             {
; 608  :             CLRREG32(piclken, mask);

  0009c	e7973006	 ldr         r3, [r7, +r6]
  000a0	e1c3300a	 bic         r3, r3, r10
  000a4	e7873006	 str         r3, [r7, +r6]

; 609  :             _PrcmDeviceReleaseDeviceDomain(pEntry->powerDomain);

  000a8	e5940000	 ldr         r0, [r4]
  000ac	eb000000	 bl          _PrcmDeviceReleaseDeviceDomain
  000b0		 |$LN14@PrcmDevice@8|
  000b0	e5993000	 ldr         r3, [r9]

; 610  :             }    
; 611  :         }
; 612  : 
; 613  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableIClock, devId)
; 614  : 
; 615  :     if (!g_bSingleThreaded)

  000b4	e3530000	 cmp         r3, #0
  000b8	1a000004	 bne         |$LN11@PrcmDevice@8|
  000bc	e5983440	 ldr         r3, [r8, #0x440]

; 616  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableIClock()=%d\r\n", TRUE));

  000c0	e3130004	 tst         r3, #4
  000c4	159f0010	 ldrne       r0, [pc, #0x10]
  000c8	13a01001	 movne       r1, #1
  000cc	1b000000	 blne        NKDbgPrintfW
  000d0		 |$LN11@PrcmDevice@8|

; 617  :     return TRUE;

  000d0	e3a00001	 mov         r0, #1

; 618  : }

  000d4	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$LN18@PrcmDevice@8|
  000dc		 |$LN19@PrcmDevice@8|
  000dc	00000000	 DCD         |??_C@_1EA@KNFBIFDK@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  000e0		 |$LN20@PrcmDevice@8|
  000e0	00000000	 DCD         |??_C@_1FC@IOGCKABF@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF@|
  000e4		 |$LN21@PrcmDevice@8|
  000e4	00000000	 DCD         |dpCurSettings|
  000e8		 |$LN22@PrcmDevice@8|
  000e8	00000000	 DCD         |s_rgDeviceLookupTable|
  000ec		 |$LN23@PrcmDevice@8|
  000ec	00000000	 DCD         |g_bSingleThreaded|
  000f0		 |$M49084|

			 ENDP  ; |_PrcmDeviceEnableIClock|

	EXPORT	|??_C@_1EI@EFBPCNHG@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@LEEBAIPA@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd?$AAe?$AAv@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49113| DCD	|$LN17@PrcmDevice@9|
	DCD	0x40004301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@EFBPCNHG@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "D", 0x0, "S", 0x0, "S", 0x0, "(", 0x0, ")", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@LEEBAIPA@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd?$AAe?$AAv@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "D", 0x0, "S", 0x0, "S", 0x0, "(", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceEnableIClock_DSS| PROC

; 631  : {

  00000		 |$LN17@PrcmDevice@9|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M49110|
  00004	e1a06001	 mov         r6, r1
  00008	e1a07000	 mov         r7, r0

; 632  :     UINT mask;
; 633  :     BOOL rc = TRUE;       
; 634  :     OMAP_CM_REGS *pPrcmCm;    
; 635  :     volatile unsigned int *piclken;
; 636  :     DeviceLookupEntry const *pEntry = &s_rgDeviceLookupTable[devId];
; 637  :     if (!g_bSingleThreaded)

  0000c	e59fa0f4	 ldr         r10, [pc, #0xF4]
  00010	e59fe0ec	 ldr         lr, [pc, #0xEC]
  00014	e0673187	 rsb         r3, r7, r7, lsl #3
  00018	e59a2000	 ldr         r2, [r10]
  0001c	e59f80dc	 ldr         r8, [pc, #0xDC]
  00020	e08e4103	 add         r4, lr, r3, lsl #2
  00024	e3520000	 cmp         r2, #0
  00028	1a000004	 bne         |$LN13@PrcmDevice@9|

; 638  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableIClock_DSS(devId=%d)\r\n", devId));

  0002c	e5983440	 ldr         r3, [r8, #0x440]
  00030	e3130004	 tst         r3, #4
  00034	159f00c0	 ldrne       r0, [pc, #0xC0]
  00038	11a01007	 movne       r1, r7
  0003c	1b000000	 blne        NKDbgPrintfW
  00040		 |$LN13@PrcmDevice@9|

; 639  : 
; 640  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableIClock_DSS, devId, bEnable)
; 641  : 
; 642  :     if (pEntry->piclk != NULL)

  00040	e5943008	 ldr         r3, [r4, #8]
  00044	e3530000	 cmp         r3, #0
  00048	0a00001f	 beq         |$LN14@PrcmDevice@9|

; 643  :         {
; 644  :         mask = pEntry->piclk->mask;    
; 645  :         pPrcmCm = GetCmRegisterSet(pEntry->powerDomain);

  0004c	e5940000	 ldr         r0, [r4]
  00050	e5939004	 ldr         r9, [r3, #4]
  00054	eb000000	 bl          GetCmRegisterSet

; 646  :         piclken = (volatile unsigned int*)((UCHAR*)pPrcmCm + pEntry->piclk->offset);

  00058	e5943008	 ldr         r3, [r4, #8]

; 647  :     
; 648  :         if (bEnable != FALSE)

  0005c	e3560000	 cmp         r6, #0
  00060	e1a05000	 mov         r5, r0
  00064	e5936008	 ldr         r6, [r3, #8]
  00068	0a000012	 beq         |$LN4@PrcmDevice@9|

; 649  :             {
; 650  :             _PrcmDeviceAddrefDeviceDomain(pEntry->powerDomain);

  0006c	e5940000	 ldr         r0, [r4]
  00070	eb000000	 bl          _PrcmDeviceAddrefDeviceDomain

; 651  :             SETREG32(piclken, mask);

  00074	e7963005	 ldr         r3, [r6, +r5]
  00078	e1833009	 orr         r3, r3, r9
  0007c	e7863005	 str         r3, [r6, +r5]

; 652  :             
; 653  :             // wait until device is accessible
; 654  :             if (pEntry->pidlestatus != NULL)

  00080	e5943010	 ldr         r3, [r4, #0x10]
  00084	e3530000	 cmp         r3, #0
  00088	0a00000f	 beq         |$LN14@PrcmDevice@9|

; 655  :                 {
; 656  :                 PrcmDomainSetClockState(POWERDOMAIN_DSS, 
; 657  :                         CLOCKDOMAIN_DSS, 
; 658  :                         CLKSTCTRL_WAKEUP
; 659  :                         );

  0008c	e3a02002	 mov         r2, #2
  00090	e3a01006	 mov         r1, #6
  00094	e3a00006	 mov         r0, #6
  00098	eb000000	 bl          PrcmDomainSetClockState

; 660  :                 _PrcmDeviceWaitForDeviceAccess(devId);

  0009c	e1a00007	 mov         r0, r7
  000a0	eb000000	 bl          _PrcmDeviceWaitForDeviceAccess

; 661  :                 PrcmDomainSetClockState(POWERDOMAIN_DSS, 
; 662  :                         CLOCKDOMAIN_DSS, 
; 663  :                         CLKSTCTRL_AUTOMATIC
; 664  :                         );

  000a4	e3a02003	 mov         r2, #3
  000a8	e3a01006	 mov         r1, #6
  000ac	e3a00006	 mov         r0, #6
  000b0	eb000000	 bl          PrcmDomainSetClockState

; 665  :                 }
; 666  :             }
; 667  :         else

  000b4	ea000004	 b           |$LN14@PrcmDevice@9|
  000b8		 |$LN4@PrcmDevice@9|

; 668  :             {
; 669  :             CLRREG32(piclken, mask);

  000b8	e7963005	 ldr         r3, [r6, +r5]
  000bc	e1c33009	 bic         r3, r3, r9
  000c0	e7863005	 str         r3, [r6, +r5]

; 670  :             _PrcmDeviceReleaseDeviceDomain(pEntry->powerDomain);

  000c4	e5940000	 ldr         r0, [r4]
  000c8	eb000000	 bl          _PrcmDeviceReleaseDeviceDomain
  000cc		 |$LN14@PrcmDevice@9|
  000cc	e59a3000	 ldr         r3, [r10]

; 671  :             }    
; 672  :         }
; 673  : 
; 674  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableIClock_DSS, devId)
; 675  : 
; 676  :     if (!g_bSingleThreaded)

  000d0	e3530000	 cmp         r3, #0
  000d4	1a000004	 bne         |$LN11@PrcmDevice@9|
  000d8	e5983440	 ldr         r3, [r8, #0x440]

; 677  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableIClock_DSS()=%d\r\n", rc));

  000dc	e3130004	 tst         r3, #4
  000e0	159f0010	 ldrne       r0, [pc, #0x10]
  000e4	13a01001	 movne       r1, #1
  000e8	1b000000	 blne        NKDbgPrintfW
  000ec		 |$LN11@PrcmDevice@9|

; 678  :     return rc;

  000ec	e3a00001	 mov         r0, #1

; 679  : }

  000f0	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000f4	e12fff1e	 bx          lr
  000f8		 |$LN18@PrcmDevice@9|
  000f8		 |$LN19@PrcmDevice@9|
  000f8	00000000	 DCD         |??_C@_1EI@EFBPCNHG@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@|
  000fc		 |$LN20@PrcmDevice@9|
  000fc	00000000	 DCD         |??_C@_1FC@LEEBAIPA@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd?$AAe?$AAv@|
  00100		 |$LN21@PrcmDevice@9|
  00100	00000000	 DCD         |dpCurSettings|
  00104		 |$LN22@PrcmDevice@9|
  00104	00000000	 DCD         |s_rgDeviceLookupTable|
  00108		 |$LN23@PrcmDevice@9|
  00108	00000000	 DCD         |g_bSingleThreaded|
  0010c		 |$M49111|

			 ENDP  ; |_PrcmDeviceEnableIClock_DSS|

	EXPORT	|??_C@_1EE@HJAJMPDD@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@LHILKJLD@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| [ DATA ] ; `string'
	IMPORT	|PrcmClockSetParent|

  00000			 AREA	 |.pdata|, PDATA
|$T49136| DCD	|$LN11@PrcmDevice@10|
	DCD	0x40002501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@HJAJMPDD@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@LHILKJLD@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I"
	DCB	0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceSetSourceClock| PROC

; 752  : {

  00000		 |$LN11@PrcmDevice@10|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49133|
  00004	e1a07002	 mov         r7, r2
  00008	e1a04000	 mov         r4, r0

; 753  :     BOOL rc = FALSE;
; 754  :     SourceDeviceClocks_t *pSrcClocks;
; 755  : 
; 756  :     UNREFERENCED_PARAMETER(count);
; 757  : 
; 758  :     if (!g_bSingleThreaded)

  0000c	e59f607c	 ldr         r6, [pc, #0x7C]
  00010	e59f5074	 ldr         r5, [pc, #0x74]
  00014	e5963000	 ldr         r3, [r6]
  00018	e3530000	 cmp         r3, #0
  0001c	1a000004	 bne         |$LN5@PrcmDevice@10|

; 759  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceSetSourceClock(devId=%d)\r\n", devId));

  00020	e5953440	 ldr         r3, [r5, #0x440]
  00024	e3130004	 tst         r3, #4
  00028	159f0058	 ldrne       r0, [pc, #0x58]
  0002c	11a01004	 movne       r1, r4
  00030	1b000000	 blne        NKDbgPrintfW
  00034		 |$LN5@PrcmDevice@10|

; 760  : 
; 761  :     pSrcClocks = s_rgDeviceLookupTable[devId].pSrcClocks;    

  00034	e59fe048	 ldr         lr, [pc, #0x48]
  00038	e0643184	 rsb         r3, r4, r4, lsl #3

; 762  :     rc = PrcmClockSetParent(pSrcClocks->rgSourceClocks[0], rgClocks[0]);

  0003c	e5971000	 ldr         r1, [r7]
  00040	e08e3103	 add         r3, lr, r3, lsl #2
  00044	e5933018	 ldr         r3, [r3, #0x18]
  00048	e5930004	 ldr         r0, [r3, #4]
  0004c	eb000000	 bl          PrcmClockSetParent

; 763  :     
; 764  :     if (!g_bSingleThreaded)

  00050	e5963000	 ldr         r3, [r6]
  00054	e1a04000	 mov         r4, r0
  00058	e3530000	 cmp         r3, #0
  0005c	1a000004	 bne         |$LN7@PrcmDevice@10|

; 765  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceSetSourceClock()=%d\r\n", rc));

  00060	e5953440	 ldr         r3, [r5, #0x440]
  00064	e3130004	 tst         r3, #4
  00068	159f0010	 ldrne       r0, [pc, #0x10]
  0006c	11a01004	 movne       r1, r4
  00070	1b000000	 blne        NKDbgPrintfW
  00074		 |$LN7@PrcmDevice@10|

; 766  :     return rc;
; 767  : }

  00074	e1a00004	 mov         r0, r4
  00078	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN12@PrcmDevice@10|
  00080		 |$LN13@PrcmDevice@10|
  00080	00000000	 DCD         |??_C@_1EE@HJAJMPDD@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@|
  00084		 |$LN14@PrcmDevice@10|
  00084	00000000	 DCD         |s_rgDeviceLookupTable|
  00088		 |$LN15@PrcmDevice@10|
  00088	00000000	 DCD         |??_C@_1EO@LHILKJLD@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@|
  0008c		 |$LN16@PrcmDevice@10|
  0008c	00000000	 DCD         |dpCurSettings|
  00090		 |$LN17@PrcmDevice@10|
  00090	00000000	 DCD         |g_bSingleThreaded|
  00094		 |$M49134|

			 ENDP  ; |_PrcmDeviceSetSourceClock|

	EXPORT	|PrcmDeviceGetEnabledState|
	EXPORT	|??_C@_1EE@JHHLFMG@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@HBNBPEKM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49161| DCD	|$LN16@PrcmDevice@11|
	DCD	0x40002e01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@JHHLFMG@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@HBNBPEKM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I"
	DCB	0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDeviceGetEnabledState| PROC

; 984  : {

  00000		 |$LN16@PrcmDevice@11|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M49158|
  00004	e1a07001	 mov         r7, r1
  00008	e1a05000	 mov         r5, r0

; 985  :     BOOL rc = FALSE;
; 986  :     if (!g_bSingleThreaded)

  0000c	e59f80a0	 ldr         r8, [pc, #0xA0]
  00010	e59f6098	 ldr         r6, [pc, #0x98]
  00014	e3a04000	 mov         r4, #0
  00018	e5983000	 ldr         r3, [r8]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000004	 bne         |$LN13@PrcmDevice@11|

; 987  :         OALMSG(OAL_FUNC, (L"+PrcmDeviceGetEnabledState(devId=%d)\r\n", devId));

  00024	e5963440	 ldr         r3, [r6, #0x440]
  00028	e3130004	 tst         r3, #4
  0002c	159f0078	 ldrne       r0, [pc, #0x78]
  00030	11a01005	 movne       r1, r5
  00034	1b000000	 blne        NKDbgPrintfW
  00038		 |$LN13@PrcmDevice@11|

; 988  : 
; 989  :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  00038	e3550050	 cmp         r5, #0x50
  0003c	2a00000d	 bcs         |$cleanUp$48505|

; 990  : 
; 991  :     SPECIAL_DEBUG_MESSAGE(PrcmDeviceGetEnabledState, devId)
; 992  : 
; 993  :     *pbEnable = FALSE;
; 994  :     if (s_rgDeviceLookupTable[devId].pfclk != NULL)

  00040	e59f2060	 ldr         r2, [pc, #0x60]
  00044	e0653185	 rsb         r3, r5, r5, lsl #3
  00048	e3a01000	 mov         r1, #0
  0004c	e0823103	 add         r3, r2, r3, lsl #2
  00050	e5871000	 str         r1, [r7]
  00054	e5933004	 ldr         r3, [r3, #4]
  00058	e3530000	 cmp         r3, #0
  0005c	0a000004	 beq         |$LN2@PrcmDevice@11|

; 995  :         {
; 996  :         *pbEnable = s_rgDeviceLookupTable[devId].pfclk->refCount != 0;

  00060	e5933000	 ldr         r3, [r3]
  00064	e3530000	 cmp         r3, #0
  00068	13a03001	 movne       r3, #1
  0006c	03a03000	 moveq       r3, #0
  00070	e5873000	 str         r3, [r7]
  00074		 |$LN2@PrcmDevice@11|

; 997  :         }
; 998  :     
; 999  :     rc = TRUE;

  00074	e3a04001	 mov         r4, #1
  00078		 |$cleanUp$48505|

; 985  :     BOOL rc = FALSE;
; 986  :     if (!g_bSingleThreaded)

  00078	e5983000	 ldr         r3, [r8]

; 1000 : 
; 1001 :     SPECIAL_DEBUG_MESSAGE_DONE(PrcmDeviceGetEnabledState, devId)
; 1002 : 
; 1003 : cleanUp:
; 1004 :     if (!g_bSingleThreaded)

  0007c	e3530000	 cmp         r3, #0
  00080	1a000004	 bne         |$LN11@PrcmDevice@11|
  00084	e5963440	 ldr         r3, [r6, #0x440]

; 1005 :         OALMSG(OAL_FUNC, (L"-PrcmDeviceGetEnabledState()=%d\r\n", rc));

  00088	e3130004	 tst         r3, #4
  0008c	159f0010	 ldrne       r0, [pc, #0x10]
  00090	11a01004	 movne       r1, r4
  00094	1b000000	 blne        NKDbgPrintfW
  00098		 |$LN11@PrcmDevice@11|

; 1006 :     return rc;
; 1007 : }

  00098	e1a00004	 mov         r0, r4
  0009c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN17@PrcmDevice@11|
  000a4		 |$LN18@PrcmDevice@11|
  000a4	00000000	 DCD         |??_C@_1EE@JHHLFMG@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@|
  000a8		 |$LN19@PrcmDevice@11|
  000a8	00000000	 DCD         |s_rgDeviceLookupTable|
  000ac		 |$LN20@PrcmDevice@11|
  000ac	00000000	 DCD         |??_C@_1EO@HBNBPEKM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@|
  000b0		 |$LN21@PrcmDevice@11|
  000b0	00000000	 DCD         |dpCurSettings|
  000b4		 |$LN22@PrcmDevice@11|
  000b4	00000000	 DCD         |g_bSingleThreaded|
  000b8		 |$M49159|

			 ENDP  ; |PrcmDeviceGetEnabledState|

	EXPORT	|PrcmDeviceGetAutoIdleState|
	EXPORT	|??_C@_1EG@DAEKPJBG@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@BNNNADLI@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49184| DCD	|$LN14@PrcmDevice@12|
	DCD	0x40002a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@DAEKPJBG@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "A", 0x0, "u", 0x0, "t", 0x0, "o", 0x0, "I"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@BNNNADLI@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "A", 0x0, "u", 0x0, "t", 0x0, "o", 0x0, "I"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v"
	DCB	0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDeviceGetAutoIdleState| PROC

; 1021 : {

  00000		 |$LN14@PrcmDevice@12|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M49181|
  00004	e1a07001	 mov         r7, r1
  00008	e1a05000	 mov         r5, r0

; 1022 :     BOOL rc = FALSE;
; 1023 :     if (!g_bSingleThreaded)

  0000c	e59f8090	 ldr         r8, [pc, #0x90]
  00010	e59f6088	 ldr         r6, [pc, #0x88]
  00014	e3a04000	 mov         r4, #0
  00018	e5983000	 ldr         r3, [r8]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000004	 bne         |$LN11@PrcmDevice@12|

; 1024 :         OALMSG(OAL_FUNC, (L"+PrcmDeviceGetAutoIdleState(devId=%d)\r\n", devId));

  00024	e5963440	 ldr         r3, [r6, #0x440]
  00028	e3130004	 tst         r3, #4
  0002c	159f0068	 ldrne       r0, [pc, #0x68]
  00030	11a01005	 movne       r1, r5
  00034	1b000000	 blne        NKDbgPrintfW
  00038		 |$LN11@PrcmDevice@12|

; 1025 : 
; 1026 :     SPECIAL_DEBUG_MESSAGE(PrcmDeviceGetAutoIdleState, devId)
; 1027 : 
; 1028 :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  00038	e3550050	 cmp         r5, #0x50
  0003c	2a000009	 bcs         |$cleanUp$48521|

; 1029 : 
; 1030 :     *pbEnable = FALSE;
; 1031 :     if (s_rgDeviceLookupTable[devId].pautoidle != NULL)

  00040	e59f2050	 ldr         r2, [pc, #0x50]
  00044	e0653185	 rsb         r3, r5, r5, lsl #3
  00048	e3a01000	 mov         r1, #0
  0004c	e0823103	 add         r3, r2, r3, lsl #2
  00050	e5871000	 str         r1, [r7]
  00054	e5933014	 ldr         r3, [r3, #0x14]

; 1032 :         {
; 1033 :         *pbEnable = s_rgDeviceLookupTable[devId].pautoidle->enabled;
; 1034 :         }
; 1035 :     
; 1036 :     rc = TRUE;

  00058	e3a04001	 mov         r4, #1
  0005c	e3530000	 cmp         r3, #0
  00060	15933000	 ldrne       r3, [r3]
  00064	15873000	 strne       r3, [r7]
  00068		 |$cleanUp$48521|
  00068	e5983000	 ldr         r3, [r8]

; 1037 : 
; 1038 :     SPECIAL_DEBUG_MESSAGE_DONE(PrcmDeviceGetAutoIdleState, devId)
; 1039 : 
; 1040 : cleanUp:
; 1041 :     if (!g_bSingleThreaded)

  0006c	e3530000	 cmp         r3, #0
  00070	1a000004	 bne         |$LN9@PrcmDevice@12|
  00074	e5963440	 ldr         r3, [r6, #0x440]

; 1042 :         OALMSG(OAL_FUNC, (L"-PrcmDeviceGetAutoIdleState()=%d\r\n", rc));

  00078	e3130004	 tst         r3, #4
  0007c	159f0010	 ldrne       r0, [pc, #0x10]
  00080	11a01004	 movne       r1, r4
  00084	1b000000	 blne        NKDbgPrintfW
  00088		 |$LN9@PrcmDevice@12|

; 1043 :     return rc;
; 1044 : }   

  00088	e1a00004	 mov         r0, r4
  0008c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$LN15@PrcmDevice@12|
  00094		 |$LN16@PrcmDevice@12|
  00094	00000000	 DCD         |??_C@_1EG@DAEKPJBG@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@|
  00098		 |$LN17@PrcmDevice@12|
  00098	00000000	 DCD         |s_rgDeviceLookupTable|
  0009c		 |$LN18@PrcmDevice@12|
  0009c	00000000	 DCD         |??_C@_1FA@BNNNADLI@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI@|
  000a0		 |$LN19@PrcmDevice@12|
  000a0	00000000	 DCD         |dpCurSettings|
  000a4		 |$LN20@PrcmDevice@12|
  000a4	00000000	 DCD         |g_bSingleThreaded|
  000a8		 |$M49182|

			 ENDP  ; |PrcmDeviceGetAutoIdleState|

	EXPORT	|PrcmDeviceSetSourceClocks|
	EXPORT	|??_C@_1EE@MKDIBCEI@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@EJAHHGM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49208| DCD	|$LN14@PrcmDevice@13|
	DCD	0x40003701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@MKDIBCEI@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c"
	DCB	0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "s", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@EJAHHGM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c"
	DCB	0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "s", 0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I"
	DCB	0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDeviceSetSourceClocks| PROC

; 1070 : {

  00000		 |$LN14@PrcmDevice@13|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M49205|
  00004	e1a08002	 mov         r8, r2
  00008	e1a09001	 mov         r9, r1
  0000c	e1a05000	 mov         r5, r0

; 1071 :     BOOL rc = FALSE;
; 1072 :     if (!g_bSingleThreaded)

  00010	e59f70c0	 ldr         r7, [pc, #0xC0]
  00014	e59f60b8	 ldr         r6, [pc, #0xB8]
  00018	e3a04000	 mov         r4, #0
  0001c	e5973000	 ldr         r3, [r7]
  00020	e3530000	 cmp         r3, #0
  00024	1a000004	 bne         |$LN11@PrcmDevice@13|

; 1073 :         OALMSG(OAL_FUNC, (L"+PrcmDeviceSetSourceClocks(devId=%d)\r\n", devId));

  00028	e5963440	 ldr         r3, [r6, #0x440]
  0002c	e3130004	 tst         r3, #4
  00030	159f0098	 ldrne       r0, [pc, #0x98]
  00034	11a01005	 movne       r1, r5
  00038	1b000000	 blne        NKDbgPrintfW
  0003c		 |$LN11@PrcmDevice@13|

; 1074 : 
; 1075 :     SPECIAL_DEBUG_MESSAGE(PrcmDeviceSetSourceClocks, devId)
; 1076 : 
; 1077 :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  0003c	e3550050	 cmp         r5, #0x50
  00040	2a000015	 bcs         |$cleanUp$48547|

; 1078 : 
; 1079 :     Lock(Mutex_DeviceClock);

  00044	e3a00000	 mov         r0, #0
  00048	eb000000	 bl          Lock

; 1080 :     if (s_rgDeviceLookupTable[devId].pSrcClocks != NULL &&
; 1081 :         s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmSetSourceDeviceClock)

  0004c	e59f0078	 ldr         r0, [pc, #0x78]
  00050	e0652185	 rsb         r2, r5, r5, lsl #3
  00054	e0803102	 add         r3, r0, r2, lsl #2
  00058	e5933018	 ldr         r3, [r3, #0x18]
  0005c	e3530000	 cmp         r3, #0
  00060	0a00000b	 beq         |$LN2@PrcmDevice@13|
  00064	e7902102	 ldr         r2, [r0, +r2, lsl #2]
  00068	e2803d23	 add         r3, r0, #0x23, 26
  0006c	e0833202	 add         r3, r3, r2, lsl #4
  00070	e593300c	 ldr         r3, [r3, #0xC]
  00074	e3530000	 cmp         r3, #0
  00078	0a000005	 beq         |$LN2@PrcmDevice@13|

; 1082 :         {
; 1083 :         rc = s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmSetSourceDeviceClock(devId, count, rgClocks);

  0007c	e1a02008	 mov         r2, r8
  00080	e1a01009	 mov         r1, r9
  00084	e1a00005	 mov         r0, r5
  00088	e1a0e00f	 mov         lr, pc
  0008c	e12fff13	 bx          r3
  00090	e1a04000	 mov         r4, r0
  00094		 |$LN2@PrcmDevice@13|

; 1084 :         }
; 1085 :     Unlock(Mutex_DeviceClock);    

  00094	e3a00000	 mov         r0, #0
  00098	eb000000	 bl          Unlock
  0009c		 |$cleanUp$48547|
  0009c	e5973000	 ldr         r3, [r7]

; 1086 :     
; 1087 :     SPECIAL_DEBUG_MESSAGE_DONE(PrcmDeviceSetSourceClocks, devId)
; 1088 : 
; 1089 : cleanUp:
; 1090 :     if (!g_bSingleThreaded)

  000a0	e3530000	 cmp         r3, #0
  000a4	1a000004	 bne         |$LN9@PrcmDevice@13|
  000a8	e5963440	 ldr         r3, [r6, #0x440]

; 1091 :         OALMSG(OAL_FUNC, (L"-PrcmDeviceSetSourceClocks()=%d\r\n", rc));

  000ac	e3130004	 tst         r3, #4
  000b0	159f0010	 ldrne       r0, [pc, #0x10]
  000b4	11a01004	 movne       r1, r4
  000b8	1b000000	 blne        NKDbgPrintfW
  000bc		 |$LN9@PrcmDevice@13|

; 1092 :     return rc;
; 1093 : }   

  000bc	e1a00004	 mov         r0, r4
  000c0	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000c4	e12fff1e	 bx          lr
  000c8		 |$LN15@PrcmDevice@13|
  000c8		 |$LN16@PrcmDevice@13|
  000c8	00000000	 DCD         |??_C@_1EE@MKDIBCEI@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@|
  000cc		 |$LN17@PrcmDevice@13|
  000cc	00000000	 DCD         |s_rgDeviceLookupTable|
  000d0		 |$LN18@PrcmDevice@13|
  000d0	00000000	 DCD         |??_C@_1EO@EJAHHGM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@|
  000d4		 |$LN19@PrcmDevice@13|
  000d4	00000000	 DCD         |dpCurSettings|
  000d8		 |$LN20@PrcmDevice@13|
  000d8	00000000	 DCD         |g_bSingleThreaded|
  000dc		 |$M49206|

			 ENDP  ; |PrcmDeviceSetSourceClocks|

	EXPORT	|PrcmDeviceEnableIClock|
	EXPORT	|??_C@_1DO@HIGIHNHE@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@KMJFBHPK@?$AA?5?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAs?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@JKENIMHM@?$AAs?$AAk?$AAi?$AAp?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_1FA@FIBGHEOF@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF?$AAd@| [ DATA ] ; `string'
	IMPORT	|InterlockedDecrement|
	IMPORT	|InterlockedIncrement|

  00000			 AREA	 |.pdata|, PDATA
|$T49238| DCD	|$LN30@PrcmDevice@14|
	DCD	0x40006001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@HIGIHNHE@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "(", 0x0, ")"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@KMJFBHPK@?$AA?5?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAs?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe@| DCB " "
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, "u", 0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@JKENIMHM@?$AAs?$AAk?$AAi?$AAp?$AA?5?$AA?$AA@| DCB "s", 0x0, "k", 0x0
	DCB	"i", 0x0, "p", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@FIBGHEOF@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF?$AAd@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "(", 0x0, "d"
	DCB	0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDeviceEnableIClock| PROC

; 1107 : {

  00000		 |$LN30@PrcmDevice@14|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M49235|
  00004	e1a08001	 mov         r8, r1
  00008	e1a06000	 mov         r6, r0

; 1108 :     BOOL rc = TRUE;
; 1109 :     BOOL bUpdateClocks = FALSE;
; 1110 :     if (!g_bSingleThreaded)

  0000c	e59fb168	 ldr         r11, [pc, #0x168]
  00010	e59f9160	 ldr         r9, [pc, #0x160]
  00014	e3a07001	 mov         r7, #1
  00018	e59b3000	 ldr         r3, [r11]
  0001c	e3a05000	 mov         r5, #0
  00020	e3530000	 cmp         r3, #0
  00024	1a000005	 bne         |$LN25@PrcmDevice@14|

; 1111 :         OALMSG(OAL_FUNC, (L"+PrcmDeviceEnableIClock(devId=%d, %d)\r\n", devId, bEnable));

  00028	e5993440	 ldr         r3, [r9, #0x440]
  0002c	e3130004	 tst         r3, #4
  00030	159f013c	 ldrne       r0, [pc, #0x13C]
  00034	11a02008	 movne       r2, r8
  00038	11a01006	 movne       r1, r6
  0003c	1b000000	 blne        NKDbgPrintfW
  00040		 |$LN25@PrcmDevice@14|

; 1112 : 
; 1113 :     SPECIAL_DEBUG_MESSAGE2(PrcmDeviceEnableIClock, devId, bEnable)
; 1114 : 
; 1115 :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  00040	e3560050	 cmp         r6, #0x50
  00044	2a00003a	 bcs         |$cleanUp$48564|

; 1116 :     if (s_rgDeviceLookupTable[devId].piclk == NULL) goto cleanUp;

  00048	e59fa120	 ldr         r10, [pc, #0x120]
  0004c	e0663186	 rsb         r3, r6, r6, lsl #3
  00050	e1a04103	 mov         r4, r3, lsl #2
  00054	e084300a	 add         r3, r4, r10
  00058	e5933008	 ldr         r3, [r3, #8]
  0005c	e1b00003	 movs        r0, r3
  00060	0a000033	 beq         |$cleanUp$48564|

; 1117 : 
; 1118 :     if (bEnable != FALSE)

  00064	e3580000	 cmp         r8, #0
  00068	0a000002	 beq         |$LN11@PrcmDevice@14|

; 1119 :         {
; 1120 :         if (InterlockedIncrement(&s_rgDeviceLookupTable[devId].piclk->refCount) == 1)

  0006c	eb000000	 bl          InterlockedIncrement
  00070	e3500001	 cmp         r0, #1

; 1121 :             {
; 1122 :             bUpdateClocks = TRUE;
; 1123 :             }

  00074	ea000004	 b           |$LN27@PrcmDevice@14|
  00078		 |$LN11@PrcmDevice@14|

; 1124 :         }
; 1125 :     else if (s_rgDeviceLookupTable[devId].piclk->refCount > 0)

  00078	e5903000	 ldr         r3, [r0]
  0007c	e3530000	 cmp         r3, #0
  00080	da000002	 ble         |$LN26@PrcmDevice@14|

; 1126 :         {
; 1127 :         if (InterlockedDecrement(&s_rgDeviceLookupTable[devId].piclk->refCount) == 0)

  00084	eb000000	 bl          InterlockedDecrement
  00088	e3500000	 cmp         r0, #0
  0008c		 |$LN27@PrcmDevice@14|

; 1128 :             {
; 1129 :             bUpdateClocks = TRUE;

  0008c	03a05001	 moveq       r5, #1
  00090		 |$LN26@PrcmDevice@14|

; 1108 :     BOOL rc = TRUE;
; 1109 :     BOOL bUpdateClocks = FALSE;
; 1110 :     if (!g_bSingleThreaded)

  00090	e59b3000	 ldr         r3, [r11]

; 1130 :             }
; 1131 :         }
; 1132 : 
; 1133 :     if (!g_bSingleThreaded)

  00094	e3530000	 cmp         r3, #0
  00098	1a000007	 bne         |$LN21@PrcmDevice@14|
  0009c	e5993440	 ldr         r3, [r9, #0x440]

; 1134 :         OALMSG(OAL_FUNC, (L" PrcmDeviceEnableIClock %supdate clocks\r\n", bUpdateClocks ? L"" : L"skip "));

  000a0	e3130004	 tst         r3, #4
  000a4	0a000004	 beq         |$LN21@PrcmDevice@14|
  000a8	e3550000	 cmp         r5, #0
  000ac	159f10b8	 ldrne       r1, [pc, #0xB8]
  000b0	059f10b0	 ldreq       r1, [pc, #0xB0]
  000b4	e59f00a8	 ldr         r0, [pc, #0xA8]
  000b8	eb000000	 bl          NKDbgPrintfW
  000bc		 |$LN21@PrcmDevice@14|

; 1135 :     // update hardware if clock is being enabled and it's not a virtual bit
; 1136 :     if (bUpdateClocks == TRUE && s_rgDeviceLookupTable[devId].piclk->bVirtual == FALSE)

  000bc	e3550001	 cmp         r5, #1
  000c0	1a00001b	 bne         |$cleanUp$48564|
  000c4	e084300a	 add         r3, r4, r10
  000c8	e5933008	 ldr         r3, [r3, #8]
  000cc	e593300c	 ldr         r3, [r3, #0xC]
  000d0	e3530000	 cmp         r3, #0
  000d4	1a000016	 bne         |$cleanUp$48564|

; 1137 :         {
; 1138 :         Lock(Mutex_DeviceClock);

  000d8	e3a00000	 mov         r0, #0
  000dc	eb000000	 bl          Lock

; 1139 :         if (bEnable)
; 1140 :             {
; 1141 :             _PrcmDeviceAddrefDeviceDomain(s_rgDeviceLookupTable[devId].powerDomain);

  000e0	e7b4000a	 ldr         r0, [r4, +r10]!
  000e4	e3580000	 cmp         r8, #0
  000e8	0a000001	 beq         |$LN4@PrcmDevice@14|
  000ec	eb000000	 bl          _PrcmDeviceAddrefDeviceDomain

; 1142 :             }
; 1143 :         else

  000f0	ea000000	 b           |$LN3@PrcmDevice@14|
  000f4		 |$LN4@PrcmDevice@14|

; 1144 :             {
; 1145 :             _PrcmDeviceReleaseDeviceDomain(s_rgDeviceLookupTable[devId].powerDomain);

  000f4	eb000000	 bl          _PrcmDeviceReleaseDeviceDomain
  000f8		 |$LN3@PrcmDevice@14|

; 1146 :             }
; 1147 :         
; 1148 :         _PrcmDeviceEnableWakeUp(devId, bEnable);

  000f8	e1a01008	 mov         r1, r8
  000fc	e1a00006	 mov         r0, r6
  00100	eb000000	 bl          _PrcmDeviceEnableWakeUp

; 1149 :         if (s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmDeviceEnableIClock)

  00104	e5942000	 ldr         r2, [r4]
  00108	e28a3d23	 add         r3, r10, #0x23, 26
  0010c	e7933202	 ldr         r3, [r3, +r2, lsl #4]
  00110	e3530000	 cmp         r3, #0
  00114	0a000004	 beq         |$LN2@PrcmDevice@14|

; 1150 :             {
; 1151 :             rc = s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmDeviceEnableIClock(devId, bEnable);

  00118	e1a01008	 mov         r1, r8
  0011c	e1a00006	 mov         r0, r6
  00120	e1a0e00f	 mov         lr, pc
  00124	e12fff13	 bx          r3
  00128	e1a07000	 mov         r7, r0
  0012c		 |$LN2@PrcmDevice@14|

; 1152 :             }
; 1153 :         Unlock(Mutex_DeviceClock);

  0012c	e3a00000	 mov         r0, #0
  00130	eb000000	 bl          Unlock
  00134		 |$cleanUp$48564|
  00134	e59b3000	 ldr         r3, [r11]

; 1154 :         }
; 1155 : 
; 1156 :     SPECIAL_DEBUG_MESSAGE_DONE(PrcmDeviceEnableIClock, devId)
; 1157 : 
; 1158 : cleanUp:
; 1159 :     if (!g_bSingleThreaded)

  00138	e3530000	 cmp         r3, #0
  0013c	1a000004	 bne         |$LN23@PrcmDevice@14|
  00140	e5993440	 ldr         r3, [r9, #0x440]

; 1160 :         OALMSG(OAL_FUNC, (L"-PrcmDeviceEnableIClock()=%d\r\n", rc));

  00144	e3130004	 tst         r3, #4
  00148	159f0010	 ldrne       r0, [pc, #0x10]
  0014c	11a01007	 movne       r1, r7
  00150	1b000000	 blne        NKDbgPrintfW
  00154		 |$LN23@PrcmDevice@14|

; 1161 : 
; 1162 :     return rc;
; 1163 : }

  00154	e1a00007	 mov         r0, r7
  00158	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0015c	e12fff1e	 bx          lr
  00160		 |$LN31@PrcmDevice@14|
  00160		 |$LN32@PrcmDevice@14|
  00160	00000000	 DCD         |??_C@_1DO@HIGIHNHE@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00164		 |$LN33@PrcmDevice@14|
  00164	00000000	 DCD         |??_C@_1FE@KMJFBHPK@?$AA?5?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAs?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe@|
  00168		 |$LN34@PrcmDevice@14|
  00168	00000000	 DCD         |??_C@_1M@JKENIMHM@?$AAs?$AAk?$AAi?$AAp?$AA?5?$AA?$AA@|
  0016c		 |$LN35@PrcmDevice@14|
  0016c	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  00170		 |$LN36@PrcmDevice@14|
  00170	00000000	 DCD         |s_rgDeviceLookupTable|
  00174		 |$LN37@PrcmDevice@14|
  00174	00000000	 DCD         |??_C@_1FA@FIBGHEOF@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF?$AAd@|
  00178		 |$LN38@PrcmDevice@14|
  00178	00000000	 DCD         |dpCurSettings|
  0017c		 |$LN39@PrcmDevice@14|
  0017c	00000000	 DCD         |g_bSingleThreaded|
  00180		 |$M49236|

			 ENDP  ; |PrcmDeviceEnableIClock|

	EXPORT	|PrcmDeviceEnableFClock|
	EXPORT	|??_C@_1DO@HBMOGGMP@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@HMEOIMKB@?$AA?5?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAs?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@LELFGAEH@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF?$AAd@| [ DATA ] ; `string'
	IMPORT	|PrcmDomainUpdateRefCount|

  00000			 AREA	 |.pdata|, PDATA
|$T49272| DCD	|$LN31@PrcmDevice@15|
	DCD	0x40006501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@HBMOGGMP@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "(", 0x0, ")"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@HMEOIMKB@?$AA?5?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAs?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe@| DCB " "
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, "u", 0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@LELFGAEH@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF?$AAd@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "(", 0x0, "d"
	DCB	0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDeviceEnableFClock| PROC

; 1176 : {

  00000		 |$LN31@PrcmDevice@15|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M49269|
  00004	e1a04001	 mov         r4, r1
  00008	e1a06000	 mov         r6, r0

; 1177 :     BOOL rc = TRUE;
; 1178 :     BOOL bUpdateClocks = FALSE;
; 1179 :     if (!g_bSingleThreaded)

  0000c	e59fa17c	 ldr         r10, [pc, #0x17C]
  00010	e59f8174	 ldr         r8, [pc, #0x174]
  00014	e3a07001	 mov         r7, #1
  00018	e59a3000	 ldr         r3, [r10]
  0001c	e3a05000	 mov         r5, #0
  00020	e3530000	 cmp         r3, #0
  00024	1a000005	 bne         |$LN25@PrcmDevice@15|

; 1180 :         OALMSG(OAL_FUNC, (L"+PrcmDeviceEnableFClock(devId=%d, %d)\r\n", devId, bEnable));

  00028	e5983440	 ldr         r3, [r8, #0x440]
  0002c	e3130004	 tst         r3, #4
  00030	159f0150	 ldrne       r0, [pc, #0x150]
  00034	11a02004	 movne       r2, r4
  00038	11a01006	 movne       r1, r6
  0003c	1b000000	 blne        NKDbgPrintfW
  00040		 |$LN25@PrcmDevice@15|

; 1181 : 
; 1182 :     SPECIAL_DEBUG_MESSAGE2(PrcmDeviceEnableFClock, devId, bEnable)
; 1183 : 
; 1184 :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  00040	e3560050	 cmp         r6, #0x50
  00044	2a00003f	 bcs         |$cleanUp$48595|

; 1185 :     // update autoidle for device
; 1186 :     _PrcmDeviceHwUpdateAutoidle(devId);

  00048	e1a00006	 mov         r0, r6
  0004c	eb000000	 bl          _PrcmDeviceHwUpdateAutoidle

; 1187 :     
; 1188 :     if (s_rgDeviceLookupTable[devId].pfclk == NULL) goto cleanUp;

  00050	e59f2120	 ldr         r2, [pc, #0x120]
  00054	e0663186	 rsb         r3, r6, r6, lsl #3
  00058	e1a0b103	 mov         r11, r3, lsl #2
  0005c	e08b9002	 add         r9, r11, r2
  00060	e5993004	 ldr         r3, [r9, #4]
  00064	e1b00003	 movs        r0, r3
  00068	0a000036	 beq         |$cleanUp$48595|

; 1189 : 
; 1190 :     if (bEnable != FALSE)

  0006c	e3540000	 cmp         r4, #0
  00070	0a000002	 beq         |$LN11@PrcmDevice@15|

; 1191 :         {
; 1192 :         if (InterlockedIncrement(&s_rgDeviceLookupTable[devId].pfclk->refCount) == 1 )

  00074	eb000000	 bl          InterlockedIncrement
  00078	e3500001	 cmp         r0, #1

; 1193 :             {
; 1194 :             bUpdateClocks = TRUE;
; 1195 :             }

  0007c	ea000004	 b           |$LN28@PrcmDevice@15|
  00080		 |$LN11@PrcmDevice@15|

; 1196 :         }
; 1197 :     else if (s_rgDeviceLookupTable[devId].pfclk->refCount > 0)

  00080	e5903000	 ldr         r3, [r0]
  00084	e3530000	 cmp         r3, #0
  00088	da000002	 ble         |$LN7@PrcmDevice@15|

; 1198 :         {
; 1199 :         if (InterlockedDecrement(&s_rgDeviceLookupTable[devId].pfclk->refCount) == 0)

  0008c	eb000000	 bl          InterlockedDecrement
  00090	e3500000	 cmp         r0, #0
  00094		 |$LN28@PrcmDevice@15|

; 1200 :             {
; 1201 :             bUpdateClocks = TRUE;

  00094	03a05001	 moveq       r5, #1
  00098		 |$LN7@PrcmDevice@15|

; 1177 :     BOOL rc = TRUE;
; 1178 :     BOOL bUpdateClocks = FALSE;
; 1179 :     if (!g_bSingleThreaded)

  00098	e59a3000	 ldr         r3, [r10]

; 1202 :             }
; 1203 :         }
; 1204 :     
; 1205 :     if (!g_bSingleThreaded)

  0009c	e3530000	 cmp         r3, #0
  000a0	1a000007	 bne         |$LN26@PrcmDevice@15|
  000a4	e5983440	 ldr         r3, [r8, #0x440]

; 1206 :         OALMSG(OAL_FUNC, (L" PrcmDeviceEnableFClock %supdate clocks\r\n", bUpdateClocks ? L"" : L"skip "));

  000a8	e3130004	 tst         r3, #4
  000ac	0a000004	 beq         |$LN26@PrcmDevice@15|
  000b0	e3550000	 cmp         r5, #0
  000b4	159f10c8	 ldrne       r1, [pc, #0xC8]
  000b8	059f10c0	 ldreq       r1, [pc, #0xC0]
  000bc	e59f00b8	 ldr         r0, [pc, #0xB8]
  000c0	eb000000	 bl          NKDbgPrintfW
  000c4		 |$LN26@PrcmDevice@15|

; 1207 :     // update hardware if clock is being enabled and it's not a virtual bit
; 1208 :     if (bUpdateClocks == TRUE && s_rgDeviceLookupTable[devId].pfclk->bVirtual == FALSE)

  000c4	e3550001	 cmp         r5, #1
  000c8	1a00001e	 bne         |$cleanUp$48595|
  000cc	e5993004	 ldr         r3, [r9, #4]
  000d0	e593300c	 ldr         r3, [r3, #0xC]
  000d4	e3530000	 cmp         r3, #0
  000d8	1a00001a	 bne         |$cleanUp$48595|

; 1209 :         {
; 1210 :         Lock(Mutex_DeviceClock);

  000dc	e3a00000	 mov         r0, #0
  000e0	eb000000	 bl          Lock

; 1211 :         if (bEnable)

  000e4	e3540000	 cmp         r4, #0

; 1212 :             {
; 1213 :             SPECIAL_DEBUG_MESSAGE2(_PrcmUpdateDeviceClockSource enable, devId, bEnable)
; 1214 :             _PrcmUpdateDeviceClockSource(s_rgDeviceLookupTable[devId].pSrcClocks, bEnable);

  000e8	15990018	 ldrne       r0, [r9, #0x18]
  000ec	11a01004	 movne       r1, r4
  000f0	1b000000	 blne        _PrcmUpdateDeviceClockSource

; 1215 :             }
; 1216 :         
; 1217 :         if (s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmDeviceEnableFClock)

  000f4	e59f307c	 ldr         r3, [pc, #0x7C]
  000f8	e7bb2003	 ldr         r2, [r11, +r3]!
  000fc	e2833d23	 add         r3, r3, #0x23, 26
  00100	e0833202	 add         r3, r3, r2, lsl #4
  00104	e5933004	 ldr         r3, [r3, #4]
  00108	e3530000	 cmp         r3, #0
  0010c	0a000004	 beq         |$LN3@PrcmDevice@15|

; 1218 :             {
; 1219 :             rc = s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmDeviceEnableFClock(devId, bEnable);

  00110	e1a01004	 mov         r1, r4
  00114	e1a00006	 mov         r0, r6
  00118	e1a0e00f	 mov         lr, pc
  0011c	e12fff13	 bx          r3
  00120	e1a07000	 mov         r7, r0
  00124		 |$LN3@PrcmDevice@15|

; 1220 :             }
; 1221 :         
; 1222 :         if (!bEnable)

  00124	e3540000	 cmp         r4, #0

; 1223 :             {
; 1224 :             SPECIAL_DEBUG_MESSAGE2(_PrcmUpdateDeviceClockSource disable, devId, bEnable)
; 1225 :             _PrcmUpdateDeviceClockSource(s_rgDeviceLookupTable[devId].pSrcClocks, bEnable);

  00128	05990018	 ldreq       r0, [r9, #0x18]
  0012c	03a01000	 moveq       r1, #0
  00130	0b000000	 bleq        _PrcmUpdateDeviceClockSource

; 1226 :             }
; 1227 :         PrcmDomainUpdateRefCount(s_rgDeviceLookupTable[devId].powerDomain, bEnable);

  00134	e59b0000	 ldr         r0, [r11]
  00138	e1a01004	 mov         r1, r4
  0013c	eb000000	 bl          PrcmDomainUpdateRefCount

; 1228 :         Unlock(Mutex_DeviceClock);

  00140	e3a00000	 mov         r0, #0
  00144	eb000000	 bl          Unlock
  00148		 |$cleanUp$48595|
  00148	e59a3000	 ldr         r3, [r10]

; 1229 :         }
; 1230 : 
; 1231 :     SPECIAL_DEBUG_MESSAGE_DONE(PrcmDeviceEnableFClock, devId)
; 1232 : 
; 1233 : cleanUp:
; 1234 :     if (!g_bSingleThreaded)

  0014c	e3530000	 cmp         r3, #0
  00150	1a000004	 bne         |$LN23@PrcmDevice@15|
  00154	e5983440	 ldr         r3, [r8, #0x440]

; 1235 :         OALMSG(OAL_FUNC, (L"-PrcmDeviceEnableFClock()=%d\r\n", rc));

  00158	e3130004	 tst         r3, #4
  0015c	159f0010	 ldrne       r0, [pc, #0x10]
  00160	11a01007	 movne       r1, r7
  00164	1b000000	 blne        NKDbgPrintfW
  00168		 |$LN23@PrcmDevice@15|

; 1236 : 
; 1237 :     return rc;
; 1238 : }

  00168	e1a00007	 mov         r0, r7
  0016c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00170	e12fff1e	 bx          lr
  00174		 |$LN32@PrcmDevice@15|
  00174		 |$LN33@PrcmDevice@15|
  00174	00000000	 DCD         |??_C@_1DO@HBMOGGMP@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00178		 |$LN34@PrcmDevice@15|
  00178	00000000	 DCD         |s_rgDeviceLookupTable|
  0017c		 |$LN35@PrcmDevice@15|
  0017c	00000000	 DCD         |??_C@_1FE@HMEOIMKB@?$AA?5?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAs?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe@|
  00180		 |$LN36@PrcmDevice@15|
  00180	00000000	 DCD         |??_C@_1M@JKENIMHM@?$AAs?$AAk?$AAi?$AAp?$AA?5?$AA?$AA@|
  00184		 |$LN37@PrcmDevice@15|
  00184	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  00188		 |$LN38@PrcmDevice@15|
  00188	00000000	 DCD         |??_C@_1FA@LELFGAEH@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN?$AA?$CF?$AAd@|
  0018c		 |$LN39@PrcmDevice@15|
  0018c	00000000	 DCD         |dpCurSettings|
  00190		 |$LN40@PrcmDevice@15|
  00190	00000000	 DCD         |g_bSingleThreaded|
  00194		 |$M49270|

			 ENDP  ; |PrcmDeviceEnableFClock|

	EXPORT	|PrcmDeviceEnableClocks|
	IMPORT	|OALMux_UpdateOnDeviceStateChange|

  00000			 AREA	 |.pdata|, PDATA
|$T49298| DCD	|$LN9@PrcmDevice@16|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDeviceEnableClocks| PROC

; 1258 : {

  00000		 |$LN9@PrcmDevice@16|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49295|
  00004	e1b06001	 movs        r6, r1
  00008	e1a07000	 mov         r7, r0

; 1259 :     UINT oldState = bEnable ? D4 : D0;

  0000c	13a04004	 movne       r4, #4
  00010	03a04000	 moveq       r4, #0

; 1260 :     UINT newState = bEnable ? D0 : D4;

  00014	e3560000	 cmp         r6, #0
  00018	13a05000	 movne       r5, #0
  0001c	03a05004	 moveq       r5, #4

; 1261 :     SPECIAL_DEBUG_MESSAGE2(PrcmDeviceEnableClocks, devId, bEnable)
; 1262 : 
; 1263 :     OALMux_UpdateOnDeviceStateChange(devId, oldState, newState, TRUE);

  00020	e1a02005	 mov         r2, r5
  00024	e3a03001	 mov         r3, #1
  00028	e1a01004	 mov         r1, r4
  0002c	e1a00007	 mov         r0, r7
  00030	eb000000	 bl          OALMux_UpdateOnDeviceStateChange

; 1264 : 
; 1265 :     PrcmDeviceEnableFClock(devId, bEnable);

  00034	e1a01006	 mov         r1, r6
  00038	e1a00007	 mov         r0, r7
  0003c	eb000000	 bl          PrcmDeviceEnableFClock

; 1266 :     PrcmDeviceEnableIClock(devId, bEnable);

  00040	e1a01006	 mov         r1, r6
  00044	e1a00007	 mov         r0, r7
  00048	eb000000	 bl          PrcmDeviceEnableIClock

; 1267 : 
; 1268 :     OALMux_UpdateOnDeviceStateChange(devId, oldState, newState, FALSE);

  0004c	e3a03000	 mov         r3, #0
  00050	e1a02005	 mov         r2, r5
  00054	e1a01004	 mov         r1, r4
  00058	e1a00007	 mov         r0, r7
  0005c	eb000000	 bl          OALMux_UpdateOnDeviceStateChange

; 1269 : 
; 1270 :     return TRUE;

  00060	e3a00001	 mov         r0, #1

; 1271 : }

  00064	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M49296|

			 ENDP  ; |PrcmDeviceEnableClocks|

	EXPORT	|PrcmDeviceEnableClocksKernel|

  00000			 AREA	 |.pdata|, PDATA
|$T49315| DCD	|$LN9@PrcmDevice@17|
	DCD	0x40002101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDeviceEnableClocksKernel| PROC

; 1284 : {

  00000		 |$LN9@PrcmDevice@17|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M49312|
  00004	e1b07001	 movs        r7, r1
  00008	e1a08000	 mov         r8, r0

; 1285 :     UINT oldState = bEnable ? D4 : D0;

  0000c	13a05004	 movne       r5, #4

; 1286 :     UINT newState = bEnable ? D0 : D4;
; 1287 :     g_bSingleThreaded = TRUE;

  00010	e59f4068	 ldr         r4, [pc, #0x68]
  00014	03a05000	 moveq       r5, #0
  00018	e3570000	 cmp         r7, #0
  0001c	13a06000	 movne       r6, #0
  00020	e3a02001	 mov         r2, #1
  00024	03a06004	 moveq       r6, #4

; 1288 :     OALMux_UpdateOnDeviceStateChange(devId, oldState, newState, TRUE);

  00028	e5842000	 str         r2, [r4]
  0002c	e1a02006	 mov         r2, r6
  00030	e3a03001	 mov         r3, #1
  00034	e1a01005	 mov         r1, r5
  00038	e1a00008	 mov         r0, r8
  0003c	eb000000	 bl          OALMux_UpdateOnDeviceStateChange

; 1289 :     PrcmDeviceEnableFClock(devId, bEnable);

  00040	e1a01007	 mov         r1, r7
  00044	e1a00008	 mov         r0, r8
  00048	eb000000	 bl          PrcmDeviceEnableFClock

; 1290 :     PrcmDeviceEnableIClock(devId, bEnable);

  0004c	e1a01007	 mov         r1, r7
  00050	e1a00008	 mov         r0, r8
  00054	eb000000	 bl          PrcmDeviceEnableIClock

; 1291 :     OALMux_UpdateOnDeviceStateChange(devId, oldState, newState, FALSE);

  00058	e3a03000	 mov         r3, #0
  0005c	e1a02006	 mov         r2, r6
  00060	e1a01005	 mov         r1, r5
  00064	e1a00008	 mov         r0, r8
  00068	eb000000	 bl          OALMux_UpdateOnDeviceStateChange

; 1292 :     g_bSingleThreaded = FALSE;

  0006c	e3a03000	 mov         r3, #0
  00070	e5843000	 str         r3, [r4]

; 1293 :     return TRUE;

  00074	e3a00001	 mov         r0, #1

; 1294 : }

  00078	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN10@PrcmDevice@17|
  00080		 |$LN11@PrcmDevice@17|
  00080	00000000	 DCD         |g_bSingleThreaded|
  00084		 |$M49313|

			 ENDP  ; |PrcmDeviceEnableClocksKernel|

	EXPORT	|PrcmDeviceEnableAutoIdle|
	EXPORT	|??_C@_1EC@PJGJDLC@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@LLCMNDJM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49334| DCD	|$LN15@PrcmDevice@18|
	DCD	0x40003b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@PJGJDLC@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "A", 0x0, "u"
	DCB	0x0, "t", 0x0, "o", 0x0, "I", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@LLCMNDJM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "A", 0x0, "u"
	DCB	0x0, "t", 0x0, "o", 0x0, "I", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDeviceEnableAutoIdle| PROC

; 1308 : {

  00000		 |$LN15@PrcmDevice@18|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M49331|
  00004	e1a0a001	 mov         r10, r1
  00008	e1a04000	 mov         r4, r0

; 1309 :     BOOL rc = TRUE;
; 1310 :     if (!g_bSingleThreaded)

  0000c	e59f90d4	 ldr         r9, [pc, #0xD4]
  00010	e59f60cc	 ldr         r6, [pc, #0xCC]
  00014	e3a05001	 mov         r5, #1
  00018	e5993000	 ldr         r3, [r9]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000005	 bne         |$LN12@PrcmDevice@18|

; 1311 :         OALMSG(OAL_FUNC, (L"+PrcmDeviceEnableAutoIdle(devId=%d, %d)\r\n", devId, bEnable));

  00024	e5963440	 ldr         r3, [r6, #0x440]
  00028	e3130004	 tst         r3, #4
  0002c	159f00ac	 ldrne       r0, [pc, #0xAC]
  00030	11a0200a	 movne       r2, r10
  00034	11a01004	 movne       r1, r4
  00038	1b000000	 blne        NKDbgPrintfW
  0003c		 |$LN12@PrcmDevice@18|

; 1312 : 
; 1313 :     SPECIAL_DEBUG_MESSAGE2(PrcmDeviceEnableAutoIdle, devId, bEnable)
; 1314 : 
; 1315 :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  0003c	e3540050	 cmp         r4, #0x50
  00040	2a000019	 bcs         |$cleanUp$48643|

; 1316 :     if (s_rgDeviceLookupTable[devId].pautoidle == NULL) goto cleanUp;

  00044	e59f7090	 ldr         r7, [pc, #0x90]
  00048	e0643184	 rsb         r3, r4, r4, lsl #3
  0004c	e1a08103	 mov         r8, r3, lsl #2
  00050	e0883007	 add         r3, r8, r7
  00054	e5933014	 ldr         r3, [r3, #0x14]
  00058	e3530000	 cmp         r3, #0
  0005c	0a000012	 beq         |$cleanUp$48643|

; 1317 : 
; 1318 :     if (s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmDeviceEnableAutoIdle)

  00060	e7b82007	 ldr         r2, [r8, +r7]!
  00064	e2873d23	 add         r3, r7, #0x23, 26
  00068	e0833202	 add         r3, r3, r2, lsl #4
  0006c	e5933008	 ldr         r3, [r3, #8]
  00070	e3530000	 cmp         r3, #0
  00074	0a00000c	 beq         |$cleanUp$48643|

; 1319 :         {
; 1320 :         Lock(Mutex_DeviceClock);

  00078	e3a00000	 mov         r0, #0
  0007c	eb000000	 bl          Lock

; 1321 :         rc = s_rgClockManagementRoutines[s_rgDeviceLookupTable[devId].powerDomain].PrcmDeviceEnableAutoIdle(devId, bEnable);

  00080	e5982000	 ldr         r2, [r8]
  00084	e2873d23	 add         r3, r7, #0x23, 26
  00088	e1a0100a	 mov         r1, r10
  0008c	e0833202	 add         r3, r3, r2, lsl #4
  00090	e5933008	 ldr         r3, [r3, #8]
  00094	e1a00004	 mov         r0, r4
  00098	e1a0e00f	 mov         lr, pc
  0009c	e12fff13	 bx          r3
  000a0	e1a05000	 mov         r5, r0

; 1322 :         Unlock(Mutex_DeviceClock);

  000a4	e3a00000	 mov         r0, #0
  000a8	eb000000	 bl          Unlock
  000ac		 |$cleanUp$48643|
  000ac	e5993000	 ldr         r3, [r9]

; 1323 :         }
; 1324 : 
; 1325 :     SPECIAL_DEBUG_MESSAGE_DONE(PrcmDeviceEnableAutoIdle, devId)
; 1326 : 
; 1327 : cleanUp:
; 1328 :     if (!g_bSingleThreaded)

  000b0	e3530000	 cmp         r3, #0
  000b4	1a000004	 bne         |$LN10@PrcmDevice@18|
  000b8	e5963440	 ldr         r3, [r6, #0x440]

; 1329 :         OALMSG(OAL_FUNC, (L"-PrcmDeviceEnableAutoIdle()=%d\r\n", rc));

  000bc	e3130004	 tst         r3, #4
  000c0	159f0010	 ldrne       r0, [pc, #0x10]
  000c4	11a01005	 movne       r1, r5
  000c8	1b000000	 blne        NKDbgPrintfW
  000cc		 |$LN10@PrcmDevice@18|

; 1330 :     return rc;
; 1331 : }    

  000cc	e1a00005	 mov         r0, r5
  000d0	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000d4	e12fff1e	 bx          lr
  000d8		 |$LN16@PrcmDevice@18|
  000d8		 |$LN17@PrcmDevice@18|
  000d8	00000000	 DCD         |??_C@_1EC@PJGJDLC@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@|
  000dc		 |$LN18@PrcmDevice@18|
  000dc	00000000	 DCD         |s_rgDeviceLookupTable|
  000e0		 |$LN19@PrcmDevice@18|
  000e0	00000000	 DCD         |??_C@_1FE@LLCMNDJM@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd?$AA?$DN@|
  000e4		 |$LN20@PrcmDevice@18|
  000e4	00000000	 DCD         |dpCurSettings|
  000e8		 |$LN21@PrcmDevice@18|
  000e8	00000000	 DCD         |g_bSingleThreaded|
  000ec		 |$M49332|

			 ENDP  ; |PrcmDeviceEnableAutoIdle|

	EXPORT	|PrcmDeviceGetContextState|
	EXPORT	|??_C@_1EE@IPMFOJGB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@NBCGFJHE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| [ DATA ] ; `string'
	IMPORT	|DomainGetDeviceContextState|

  00000			 AREA	 |.pdata|, PDATA
|$T49356| DCD	|$LN11@PrcmDevice@19|
	DCD	0x40002301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@IPMFOJGB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@NBCGFJHE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "(", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I"
	DCB	0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDeviceGetContextState| PROC

; 1348 : {

  00000		 |$LN11@PrcmDevice@19|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49353|
  00004	e1a07001	 mov         r7, r1
  00008	e1a05000	 mov         r5, r0

; 1349 :     BOOL rc = TRUE;
; 1350 :     OALMSG(OAL_FUNC, (L"+PrcmDeviceGetContextState(devId=%d)\r\n", devId));

  0000c	e59f6074	 ldr         r6, [pc, #0x74]
  00010	e3a04001	 mov         r4, #1
  00014	e5963440	 ldr         r3, [r6, #0x440]
  00018	e3130004	 tst         r3, #4
  0001c	159f0060	 ldrne       r0, [pc, #0x60]
  00020	11a01005	 movne       r1, r5
  00024	1b000000	 blne        NKDbgPrintfW

; 1351 : 
; 1352 :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  00028	e3550050	 cmp         r5, #0x50
  0002c	2a00000a	 bcs         |$cleanUp$48659|

; 1353 : 
; 1354 :     if (s_rgDeviceLookupTable[devId].piclk != NULL)

  00030	e59f2048	 ldr         r2, [pc, #0x48]
  00034	e0650185	 rsb         r0, r5, r5, lsl #3
  00038	e0823100	 add         r3, r2, r0, lsl #2
  0003c	e5933008	 ldr         r3, [r3, #8]
  00040	e3530000	 cmp         r3, #0
  00044	0a000004	 beq         |$cleanUp$48659|

; 1355 :         {
; 1356 :         rc = DomainGetDeviceContextState(s_rgDeviceLookupTable[devId].powerDomain,
; 1357 :                 s_rgDeviceLookupTable[devId].piclk,
; 1358 :                 bSet
; 1359 :                 );

  00048	e7920100	 ldr         r0, [r2, +r0, lsl #2]
  0004c	e1a02007	 mov         r2, r7
  00050	e1a01003	 mov         r1, r3
  00054	eb000000	 bl          DomainGetDeviceContextState
  00058	e1a04000	 mov         r4, r0
  0005c		 |$cleanUp$48659|
  0005c	e5963440	 ldr         r3, [r6, #0x440]

; 1360 :         }
; 1361 : 
; 1362 : cleanUp:
; 1363 :     OALMSG(OAL_FUNC, (L"-PrcmDeviceGetContextState()=%d\r\n", rc));

  00060	e3130004	 tst         r3, #4
  00064	159f0010	 ldrne       r0, [pc, #0x10]
  00068	11a01004	 movne       r1, r4
  0006c	1b000000	 blne        NKDbgPrintfW

; 1364 :     return rc;
; 1365 : }

  00070	e1a00004	 mov         r0, r4
  00074	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN12@PrcmDevice@19|
  0007c		 |$LN13@PrcmDevice@19|
  0007c	00000000	 DCD         |??_C@_1EE@IPMFOJGB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@|
  00080		 |$LN14@PrcmDevice@19|
  00080	00000000	 DCD         |s_rgDeviceLookupTable|
  00084		 |$LN15@PrcmDevice@19|
  00084	00000000	 DCD         |??_C@_1EO@NBCGFJHE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAd?$AAe?$AAv?$AAI?$AAd@|
  00088		 |$LN16@PrcmDevice@19|
  00088	00000000	 DCD         |dpCurSettings|
  0008c		 |$M49354|

			 ENDP  ; |PrcmDeviceGetContextState|

	EXPORT	|PrcmDeviceGetSourceClockInfo|
	EXPORT	|??_C@_1EK@DOOJMPPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AA?$CJ?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@KDICNDAA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AAd?$AAe@| [ DATA ] ; `string'
	IMPORT	|PrcmClockGetParentClockRefcount|

  00000			 AREA	 |.pdata|, PDATA
|$T49381| DCD	|$LN19@PrcmDevice@20|
	DCD	0x40003c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@DOOJMPPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AA?$CJ?$AA?$DN@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c"
	DCB	0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "(", 0x0, ")"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@KDICNDAA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AAd?$AAe@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c"
	DCB	0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "(", 0x0, "d"
	DCB	0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDeviceGetSourceClockInfo| PROC

; 1379 : {

  00000		 |$LN19@PrcmDevice@20|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M49378|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 1380 :     UINT i;
; 1381 :     BOOL rc = FALSE;
; 1382 :     if (!g_bSingleThreaded)

  0000c	e59f80d8	 ldr         r8, [pc, #0xD8]
  00010	e59f70d0	 ldr         r7, [pc, #0xD0]
  00014	e3a04000	 mov         r4, #0
  00018	e5983000	 ldr         r3, [r8]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000004	 bne         |$LN16@PrcmDevice@20|

; 1383 :         OALMSG(OAL_FUNC, (L"+PrcmDeviceGetSourceClockInfo(devId=%d)\r\n", devId));

  00024	e5973440	 ldr         r3, [r7, #0x440]
  00028	e3130004	 tst         r3, #4
  0002c	159f00b0	 ldrne       r0, [pc, #0xB0]
  00030	11a01005	 movne       r1, r5
  00034	1b000000	 blne        NKDbgPrintfW
  00038		 |$LN16@PrcmDevice@20|

; 1384 : 
; 1385 :     SPECIAL_DEBUG_MESSAGE(PrcmDeviceGetSourceClockInfo, devId)
; 1386 : 
; 1387 :     if (devId >= OMAP_DEVICE_GENERIC) goto cleanUp;

  00038	e3550050	 cmp         r5, #0x50
  0003c	2a00001b	 bcs         |$cleanUp$48675|

; 1388 :     
; 1389 :     if (s_rgDeviceLookupTable[devId].pSrcClocks == NULL) goto cleanUp;

  00040	e59f2098	 ldr         r2, [pc, #0x98]
  00044	e0653185	 rsb         r3, r5, r5, lsl #3
  00048	e0829103	 add         r9, r2, r3, lsl #2
  0004c	e5993018	 ldr         r3, [r9, #0x18]
  00050	e3530000	 cmp         r3, #0
  00054	0a000015	 beq         |$cleanUp$48675|

; 1390 :     
; 1391 :     pInfo->count = s_rgDeviceLookupTable[devId].pSrcClocks->size;

  00058	e5933000	 ldr         r3, [r3]

; 1392 :     for (i = 0; i < pInfo->count; ++i)

  0005c	e3a05000	 mov         r5, #0
  00060	e3530000	 cmp         r3, #0
  00064	e5863000	 str         r3, [r6]
  00068	0a00000f	 beq         |$LN2@PrcmDevice@20|
  0006c	e1a04006	 mov         r4, r6
  00070	e3a0a001	 mov         r10, #1
  00074		 |$LL4@PrcmDevice@20|

; 1393 :         {
; 1394 :         pInfo->rgSourceClocks[i].nLevel = 1;

  00074	e584a008	 str         r10, [r4, #8]

; 1395 :         pInfo->rgSourceClocks[i].clockId = s_rgDeviceLookupTable[devId].pSrcClocks->rgSourceClocks[i];

  00078	e5993018	 ldr         r3, [r9, #0x18]

; 1396 :         PrcmClockGetParentClockRefcount(pInfo->rgSourceClocks[i].clockId, 
; 1397 :             pInfo->rgSourceClocks[i].nLevel, 
; 1398 :             &pInfo->rgSourceClocks[i].refCount
; 1399 :             );

  0007c	e284200c	 add         r2, r4, #0xC
  00080	e3a01001	 mov         r1, #1
  00084	e0833105	 add         r3, r3, r5, lsl #2
  00088	e5933004	 ldr         r3, [r3, #4]
  0008c	e1a00003	 mov         r0, r3
  00090	e5843004	 str         r3, [r4, #4]
  00094	eb000000	 bl          PrcmClockGetParentClockRefcount
  00098	e5963000	 ldr         r3, [r6]
  0009c	e2855001	 add         r5, r5, #1
  000a0	e284400c	 add         r4, r4, #0xC
  000a4	e1550003	 cmp         r5, r3
  000a8	3afffff1	 bcc         |$LL4@PrcmDevice@20|
  000ac		 |$LN2@PrcmDevice@20|

; 1400 :         }
; 1401 : 
; 1402 :     rc = TRUE;

  000ac	e3a04001	 mov         r4, #1
  000b0		 |$cleanUp$48675|

; 1380 :     UINT i;
; 1381 :     BOOL rc = FALSE;
; 1382 :     if (!g_bSingleThreaded)

  000b0	e5983000	 ldr         r3, [r8]

; 1403 : 
; 1404 :     SPECIAL_DEBUG_MESSAGE_DONE(PrcmDeviceGetSourceClockInfo, devId)
; 1405 : 
; 1406 : cleanUp:
; 1407 :     if (!g_bSingleThreaded)

  000b4	e3530000	 cmp         r3, #0
  000b8	1a000004	 bne         |$LN12@PrcmDevice@20|
  000bc	e5973440	 ldr         r3, [r7, #0x440]

; 1408 :         OALMSG(OAL_FUNC, (L"-PrcmDeviceGetSourceClockInfo()=%d\r\n", rc));

  000c0	e3130004	 tst         r3, #4
  000c4	159f0010	 ldrne       r0, [pc, #0x10]
  000c8	11a01004	 movne       r1, r4
  000cc	1b000000	 blne        NKDbgPrintfW
  000d0		 |$LN12@PrcmDevice@20|

; 1409 :     return rc;
; 1410 : }

  000d0	e1a00004	 mov         r0, r4
  000d4	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$LN20@PrcmDevice@20|
  000dc		 |$LN21@PrcmDevice@20|
  000dc	00000000	 DCD         |??_C@_1EK@DOOJMPPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AA?$CJ?$AA?$DN@|
  000e0		 |$LN22@PrcmDevice@20|
  000e0	00000000	 DCD         |s_rgDeviceLookupTable|
  000e4		 |$LN23@PrcmDevice@20|
  000e4	00000000	 DCD         |??_C@_1FE@KDICNDAA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAf?$AAo?$AA?$CI?$AAd?$AAe@|
  000e8		 |$LN24@PrcmDevice@20|
  000e8	00000000	 DCD         |dpCurSettings|
  000ec		 |$LN25@PrcmDevice@20|
  000ec	00000000	 DCD         |g_bSingleThreaded|
  000f0		 |$M49379|

			 ENDP  ; |PrcmDeviceGetSourceClockInfo|

	EXPORT	|DeviceInitialize|
	EXPORT	|??_C@_1CM@JHENNHB@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@PFIEEMDN@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49407| DCD	|$LN24@DeviceInit|
	DCD	0x40004301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@JHENNHB@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@PFIEEMDN@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DeviceInitialize| PROC

; 1415 : {

  00000		 |$LN24@DeviceInit|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M49404|

; 1416 :     unsigned int i;
; 1417 :     OMAP_CM_REGS *pPrcmCm;
; 1418 :     volatile unsigned int *preg;
; 1419 :     
; 1420 :     if (!g_bSingleThreaded)

  00004	e59f70fc	 ldr         r7, [pc, #0xFC]
  00008	e59f60f4	 ldr         r6, [pc, #0xF4]
  0000c	e5973000	 ldr         r3, [r7]
  00010	e3530000	 cmp         r3, #0
  00014	1a000003	 bne         |$LN16@DeviceInit|

; 1421 :         OALMSG(OAL_FUNC, (L"+DeviceInitialize()\r\n"));

  00018	e5963440	 ldr         r3, [r6, #0x440]
  0001c	e3130004	 tst         r3, #4
  00020	159f00d8	 ldrne       r0, [pc, #0xD8]
  00024	1b000000	 blne        NKDbgPrintfW
  00028		 |$LN16@DeviceInit|

; 1422 : 
; 1423 :     // iterate through all devices and update its state information
; 1424 :     for (i = 0; i < OMAP_DEVICE_COUNT - 1; ++i)

  00028	e59f50cc	 ldr         r5, [pc, #0xCC]
  0002c	e3a04000	 mov         r4, #0
  00030		 |$LL12@DeviceInit|

; 1425 :         {
; 1426 :         pPrcmCm = GetCmRegisterSet(s_rgDeviceLookupTable[i].powerDomain);

  00030	e5950000	 ldr         r0, [r5]
  00034	eb000000	 bl          GetCmRegisterSet

; 1427 : 
; 1428 :         // update autoidle information
; 1429 :         if (s_rgDeviceLookupTable[i].pautoidle != NULL)

  00038	e5953014	 ldr         r3, [r5, #0x14]
  0003c	e1a08000	 mov         r8, r0
  00040	e1b02003	 movs        r2, r3

; 1430 :             {
; 1431 :             preg = (volatile unsigned int*)((UCHAR*)pPrcmCm + s_rgDeviceLookupTable[i].pautoidle->offset);

  00044	15923008	 ldrne       r3, [r2, #8]

; 1432 :             if (INREG32(preg) & s_rgDeviceLookupTable[i].pautoidle->mask)

  00048	15922004	 ldrne       r2, [r2, #4]
  0004c	17933008	 ldrne       r3, [r3, +r8]
  00050	11130002	 tstne       r3, r2

; 1433 :                 {
; 1434 :                 PrcmDeviceEnableAutoIdle(i, TRUE);

  00054	13a01001	 movne       r1, #1
  00058	11a00004	 movne       r0, r4
  0005c	1b000000	 blne        PrcmDeviceEnableAutoIdle

; 1435 :                 }            
; 1436 :             }
; 1437 :         
; 1438 :         //Avoid reference counting DSS device to keep bootloader screen on all the way
; 1439 :         //to the display driver initialization
; 1440 :         if(i == OMAP_DEVICE_DSS || i == OMAP_DEVICE_DSS1 || i == OMAP_DEVICE_DSS2)

  00060	e354003f	 cmp         r4, #0x3F
  00064	0a000015	 beq         |$LN11@DeviceInit|
  00068	e3540040	 cmp         r4, #0x40
  0006c	0a000013	 beq         |$LN11@DeviceInit|
  00070	e3540041	 cmp         r4, #0x41
  00074	0a000011	 beq         |$LN11@DeviceInit|

; 1441 :             {
; 1442 :             continue;
; 1443 :             }
; 1444 : 
; 1445 :         // update functional clock information
; 1446 :         if (s_rgDeviceLookupTable[i].pfclk != NULL)

  00078	e5953004	 ldr         r3, [r5, #4]
  0007c	e1b02003	 movs        r2, r3

; 1447 :             {
; 1448 :             preg = (volatile unsigned int*)((UCHAR*)pPrcmCm + s_rgDeviceLookupTable[i].pfclk->offset);

  00080	15923008	 ldrne       r3, [r2, #8]

; 1449 :             if (INREG32(preg) & s_rgDeviceLookupTable[i].pfclk->mask)

  00084	15922004	 ldrne       r2, [r2, #4]
  00088	17933008	 ldrne       r3, [r3, +r8]
  0008c	11130002	 tstne       r3, r2

; 1450 :                 {
; 1451 :                 PrcmDeviceEnableFClock(i, TRUE);

  00090	13a01001	 movne       r1, #1
  00094	11a00004	 movne       r0, r4
  00098	1b000000	 blne        PrcmDeviceEnableFClock

; 1452 :                 }            
; 1453 :             }
; 1454 : 
; 1455 :         // update inteface clock information
; 1456 :         if (s_rgDeviceLookupTable[i].piclk != NULL)

  0009c	e5953008	 ldr         r3, [r5, #8]
  000a0	e1b02003	 movs        r2, r3

; 1457 :             {
; 1458 :             preg = (volatile unsigned int*)((UCHAR*)pPrcmCm + s_rgDeviceLookupTable[i].piclk->offset);

  000a4	15923008	 ldrne       r3, [r2, #8]

; 1459 :             if (INREG32(preg) & s_rgDeviceLookupTable[i].piclk->mask)

  000a8	15922004	 ldrne       r2, [r2, #4]
  000ac	17933008	 ldrne       r3, [r3, +r8]
  000b0	11130002	 tstne       r3, r2

; 1460 :                 {
; 1461 :                 PrcmDeviceEnableIClock(i, TRUE);

  000b4	13a01001	 movne       r1, #1
  000b8	11a00004	 movne       r0, r4
  000bc	1b000000	 blne        PrcmDeviceEnableIClock
  000c0		 |$LN11@DeviceInit|
  000c0	e2844001	 add         r4, r4, #1
  000c4	e3540050	 cmp         r4, #0x50
  000c8	e285501c	 add         r5, r5, #0x1C
  000cc	3affffd7	 bcc         |$LL12@DeviceInit|

; 1462 :                 }            
; 1463 :             }
; 1464 :         }
; 1465 : 
; 1466 : #if 0
; 1467 :     {   // Enable the save and restore mechanism for the USB Host device
; 1468 :         OMAP_PRCM_USBHOST_PRM_REGS *pOMAP_PRCM_USBHOST_PRM_REGS;
; 1469 :         OMAP_PRCM_CORE_PRM_REGS *pOMAP_PRCM_CORE_PRM_REGS;
; 1470 :         PHYSICAL_ADDRESS pa;
; 1471 : 
; 1472 :         pa.QuadPart = OMAP_PRCM_USBHOST_PRM_REGS_PA;
; 1473 :         pOMAP_PRCM_USBHOST_PRM_REGS = (OMAP_PRCM_USBHOST_PRM_REGS *)MmMapIoSpace(pa, sizeof(OMAP_PRCM_USBHOST_PRM_REGS), FALSE);
; 1474 :         
; 1475 :         pa.QuadPart = OMAP_PRCM_CORE_PRM_REGS_PA;
; 1476 :         pOMAP_PRCM_CORE_PRM_REGS = (OMAP_PRCM_CORE_PRM_REGS *)MmMapIoSpace(pa, sizeof(OMAP_PRCM_CORE_PRM_REGS), FALSE);
; 1477 :         
; 1478 :         /* 0x4830 74E0 bit4 ASAVEANDRESTORE for USBHOST enable Save and Restore mechanism */
; 1479 :         pOMAP_PRCM_USBHOST_PRM_REGS->PM_PWSTCTRL_USBHOST |= (0x01 << 4); //SAVEANDRESTORE
; 1480 : 
; 1481 :         /* 0x4830 6AE0 bit4 ASAVEANDRESTORE for USBTLL enable Save and Restore mechanism */
; 1482 :         pOMAP_PRCM_CORE_PRM_REGS->PM_PWSTCTRL_CORE |= (0x01 << 4); //SAVEANDRESTORE
; 1483 : 
; 1484 :         MmUnmapIoSpace(pOMAP_PRCM_USBHOST_PRM_REGS, sizeof(OMAP_PRCM_USBHOST_PRM_REGS));
; 1485 :         MmUnmapIoSpace(pOMAP_PRCM_CORE_PRM_REGS, sizeof(OMAP_PRCM_CORE_PRM_REGS));
; 1486 :     }
; 1487 : #endif
; 1488 :     if (!g_bSingleThreaded)

  000d0	e5973000	 ldr         r3, [r7]
  000d4	e3530000	 cmp         r3, #0
  000d8	1a000003	 bne         |$LN18@DeviceInit|

; 1489 :         OALMSG(OAL_FUNC, (L"-DeviceInitialize()\r\n"));

  000dc	e5963440	 ldr         r3, [r6, #0x440]
  000e0	e3130004	 tst         r3, #4
  000e4	159f000c	 ldrne       r0, [pc, #0xC]
  000e8	1b000000	 blne        NKDbgPrintfW
  000ec		 |$LN18@DeviceInit|

; 1490 : 
; 1491 :     return TRUE;

  000ec	e3a00001	 mov         r0, #1

; 1492 : }

  000f0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000f4	e12fff1e	 bx          lr
  000f8		 |$LN25@DeviceInit|
  000f8		 |$LN26@DeviceInit|
  000f8	00000000	 DCD         |??_C@_1CM@JHENNHB@?$AA?9?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000fc		 |$LN27@DeviceInit|
  000fc	00000000	 DCD         |s_rgDeviceLookupTable|
  00100		 |$LN28@DeviceInit|
  00100	00000000	 DCD         |??_C@_1CM@PFIEEMDN@?$AA?$CL?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00104		 |$LN29@DeviceInit|
  00104	00000000	 DCD         |dpCurSettings|
  00108		 |$LN30@DeviceInit|
  00108	00000000	 DCD         |g_bSingleThreaded|
  0010c		 |$M49405|

			 ENDP  ; |DeviceInitialize|

	EXPORT	|??_C@_1EI@GJAPLPDB@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@FIOCBMFC@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd?$AAe?$AAv@| [ DATA ] ; `string'
	IMPORT	|g_pPrcmCm|

  00000			 AREA	 |.pdata|, PDATA
|$T49443| DCD	|$LN38@PrcmDevice@21|
	DCD	0x40005701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@GJAPLPDB@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "D", 0x0, "S", 0x0, "S", 0x0, "(", 0x0, ")", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@FIOCBMFC@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd?$AAe?$AAv@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "D", 0x0, "S", 0x0, "S", 0x0, "(", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceEnableFClock_DSS| PROC

; 423  : {

  00000		 |$LN38@PrcmDevice@21|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M49440|
  00004	e1a07001	 mov         r7, r1
  00008	e1a05000	 mov         r5, r0

; 424  :     UINT i;
; 425  :     UINT mask;
; 426  :     BOOL rc = TRUE;
; 427  :     SourceDeviceClocks_t *pSrcClocks;
; 428  :     volatile unsigned int *pfclken;
; 429  :     DeviceLookupEntry const *pEntry = &s_rgDeviceLookupTable[devId]; 
; 430  :     if (!g_bSingleThreaded)

  0000c	e59fb144	 ldr         r11, [pc, #0x144]
  00010	e59fe13c	 ldr         lr, [pc, #0x13C]
  00014	e0652185	 rsb         r2, r5, r5, lsl #3
  00018	e59b3000	 ldr         r3, [r11]
  0001c	e59fa12c	 ldr         r10, [pc, #0x12C]
  00020	e3a04001	 mov         r4, #1
  00024	e3530000	 cmp         r3, #0
  00028	e08e6102	 add         r6, lr, r2, lsl #2
  0002c	1a000004	 bne         |$LN33@PrcmDevice@21|

; 431  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableFClock_DSS(devId=%d)\r\n", devId));

  00030	e59a3440	 ldr         r3, [r10, #0x440]
  00034	e3130004	 tst         r3, #4
  00038	159f010c	 ldrne       r0, [pc, #0x10C]
  0003c	11a01005	 movne       r1, r5
  00040	1b000000	 blne        NKDbgPrintfW
  00044		 |$LN33@PrcmDevice@21|

; 432  :       
; 433  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableFClock_DSS, devId, bEnable)
; 434  : 
; 435  :     pfclken = &g_pPrcmCm->pOMAP_DSS_CM->CM_FCLKEN_DSS;    

  00044	e59f30fc	 ldr         r3, [pc, #0xFC]

; 436  :     pSrcClocks = pEntry->pSrcClocks;

  00048	e5968018	 ldr         r8, [r6, #0x18]

; 437  : 
; 438  :     // NOTE:
; 439  :     //   Disabling DSS1 and/or DSS2 may potential shutdown a clock that
; 440  :     // is mapped OMAP_DEVICE_DSS.  For right now caller must be cautious
; 441  :     // not to disable dss1 and/or dss2 while dss is enabled.
; 442  :     //
; 443  : 
; 444  :     mask = INREG32(pfclken);
; 445  :     switch (devId)

  0004c	e355003f	 cmp         r5, #0x3F
  00050	e5933000	 ldr         r3, [r3]
  00054	e5932018	 ldr         r2, [r3, #0x18]
  00058	e5923000	 ldr         r3, [r2]
  0005c	0a000021	 beq         |$LN11@PrcmDevice@21|
  00060	e3550040	 cmp         r5, #0x40
  00064	0a00000d	 beq         |$LN20@PrcmDevice@21|
  00068	e3550041	 cmp         r5, #0x41
  0006c	0a000006	 beq         |$LN17@PrcmDevice@21|
  00070	e3550042	 cmp         r5, #0x42

; 487  :                     }        
; 488  :                 }
; 489  :             break;
; 490  :             
; 491  :         default:
; 492  :             rc = FALSE;
; 493  :             goto cleanUp;

  00074	1a000030	 bne         |$LN31@PrcmDevice@21|
  00078	e3570001	 cmp         r7, #1
  0007c	03833004	 orreq       r3, r3, #4
  00080	0a000009	 beq         |$LN18@PrcmDevice@21|

; 462  : 
; 463  :         case OMAP_DEVICE_TVOUT:
; 464  :             if (bEnable == TRUE)
; 465  :                 mask |= CM_CLKEN_TV;
; 466  :             else
; 467  :                 mask &= ~CM_CLKEN_TV;

  00084	e3c33004	 bic         r3, r3, #4

; 468  :             OUTREG32(pfclken, mask);
; 469  :             break;

  00088	ea000007	 b           |$LN18@PrcmDevice@21|
  0008c		 |$LN17@PrcmDevice@21|

; 453  :             break;
; 454  : 
; 455  :         case OMAP_DEVICE_DSS2:
; 456  :             if (bEnable == TRUE)

  0008c	e3570001	 cmp         r7, #1

; 457  :                 mask |= CM_CLKEN_DSS2;

  00090	03833002	 orreq       r3, r3, #2
  00094	0a000004	 beq         |$LN18@PrcmDevice@21|

; 458  :             else
; 459  :                 mask &= ~CM_CLKEN_DSS2;

  00098	e3c33002	 bic         r3, r3, #2

; 460  :             OUTREG32(pfclken, mask);
; 461  :             break;

  0009c	ea000002	 b           |$LN18@PrcmDevice@21|
  000a0		 |$LN20@PrcmDevice@21|

; 446  :         {
; 447  :         case OMAP_DEVICE_DSS1:
; 448  :             if (bEnable == TRUE)

  000a0	e3570001	 cmp         r7, #1

; 449  :                 mask |= CM_CLKEN_DSS1;

  000a4	03833001	 orreq       r3, r3, #1

; 450  :             else
; 451  :                 mask &= ~CM_CLKEN_DSS1;

  000a8	13c33001	 bicne       r3, r3, #1
  000ac		 |$LN18@PrcmDevice@21|

; 452  :             OUTREG32(pfclken, mask);

  000ac	e5823000	 str         r3, [r2]
  000b0		 |$LN34@PrcmDevice@21|

; 494  :         }
; 495  : 
; 496  :     // notify oal of device activity for wakeup latency management
; 497  :     OALWakeupLatency_DeviceEnabled(devId, bEnable);

  000b0	e1a01007	 mov         r1, r7
  000b4	e1a00005	 mov         r0, r5
  000b8	eb000000	 bl          OALWakeupLatency_DeviceEnabled
  000bc		 |$cleanUp$48304|
  000bc	e59b3000	 ldr         r3, [r11]

; 498  : 
; 499  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableFClock_DSS, devId)
; 500  : 
; 501  : cleanUp:    
; 502  :     if (!g_bSingleThreaded)

  000c0	e3530000	 cmp         r3, #0
  000c4	1a000004	 bne         |$LN28@PrcmDevice@21|
  000c8	e59a3440	 ldr         r3, [r10, #0x440]

; 503  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableFClock_DSS()=%d\r\n", rc));

  000cc	e3130004	 tst         r3, #4
  000d0	159f006c	 ldrne       r0, [pc, #0x6C]
  000d4	11a01004	 movne       r1, r4
  000d8	1b000000	 blne        NKDbgPrintfW
  000dc		 |$LN28@PrcmDevice@21|

; 504  :     return rc;
; 505  : }

  000dc	e1a00004	 mov         r0, r4
  000e0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000e4	e12fff1e	 bx          lr
  000e8		 |$LN11@PrcmDevice@21|

; 470  : 
; 471  :         case OMAP_DEVICE_DSS:
; 472  :             for (i = 0; i < pSrcClocks->size; ++i)

  000e8	e5983000	 ldr         r3, [r8]
  000ec	e3a09000	 mov         r9, #0
  000f0	e3530000	 cmp         r3, #0
  000f4	9affffed	 bls         |$LN34@PrcmDevice@21|
  000f8	e1a06008	 mov         r6, r8
  000fc		 |$LL10@PrcmDevice@21|

; 473  :                 {
; 474  :                 switch (pSrcClocks->rgSourceClocks[i])

  000fc	e5963004	 ldr         r3, [r6, #4]
  00100	e3530007	 cmp         r3, #7
  00104	0a000003	 beq         |$LN5@PrcmDevice@21|
  00108	e353001a	 cmp         r3, #0x1A
  0010c	1a00000a	 bne         |$LN31@PrcmDevice@21|

; 478  :                         break;
; 479  : 
; 480  :                     case kDSS2_ALWON_FCLK:
; 481  :                         PrcmDeviceEnableFClock(OMAP_DEVICE_DSS2, bEnable);

  00110	e3a00041	 mov         r0, #0x41

; 482  :                         break;

  00114	ea000000	 b           |$LN35@PrcmDevice@21|
  00118		 |$LN5@PrcmDevice@21|

; 475  :                     {
; 476  :                     case kDSS1_ALWON_FCLK:
; 477  :                         PrcmDeviceEnableFClock(OMAP_DEVICE_DSS1, bEnable);

  00118	e3a00040	 mov         r0, #0x40
  0011c		 |$LN35@PrcmDevice@21|
  0011c	e1a01007	 mov         r1, r7
  00120	eb000000	 bl          PrcmDeviceEnableFClock
  00124	e5983000	 ldr         r3, [r8]
  00128	e2899001	 add         r9, r9, #1
  0012c	e2866004	 add         r6, r6, #4
  00130	e1590003	 cmp         r9, r3
  00134	3afffff0	 bcc         |$LL10@PrcmDevice@21|
  00138	eaffffdc	 b           |$LN34@PrcmDevice@21|
  0013c		 |$LN31@PrcmDevice@21|

; 483  : 
; 484  :                     default:
; 485  :                         rc = FALSE;

  0013c	e3a04000	 mov         r4, #0

; 486  :                         goto cleanUp;

  00140	eaffffdd	 b           |$cleanUp$48304|
  00144		 |$LN39@PrcmDevice@21|
  00144		 |$LN40@PrcmDevice@21|
  00144	00000000	 DCD         |??_C@_1EI@GJAPLPDB@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@|
  00148		 |$LN41@PrcmDevice@21|
  00148	00000000	 DCD         |g_pPrcmCm|
  0014c		 |$LN42@PrcmDevice@21|
  0014c	00000000	 DCD         |??_C@_1FC@FIOCBMFC@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd?$AAe?$AAv@|
  00150		 |$LN43@PrcmDevice@21|
  00150	00000000	 DCD         |dpCurSettings|
  00154		 |$LN44@PrcmDevice@21|
  00154	00000000	 DCD         |s_rgDeviceLookupTable|
  00158		 |$LN45@PrcmDevice@21|
  00158	00000000	 DCD         |g_bSingleThreaded|
  0015c		 |$M49441|

			 ENDP  ; |_PrcmDeviceEnableFClock_DSS|

	EXPORT	|??_C@_1EI@BGCBHLEJ@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@KOILFLNM@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AAd?$AAe?$AAv@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49468| DCD	|$LN18@PrcmDevice@22|
	DCD	0x40003c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@BGCBHLEJ@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "(", 0x0, ")", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@KOILFLNM@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AAd?$AAe?$AAv@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "F"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "(", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceEnableFClock_USB| PROC

; 518  : {

  00000		 |$LN18@PrcmDevice@22|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M49465|
  00004	e1a06001	 mov         r6, r1
  00008	e1a04000	 mov         r4, r0

; 519  :     BOOL rc = FALSE;
; 520  :     DeviceLookupEntry const *pEntry;
; 521  :     if (!g_bSingleThreaded)

  0000c	e59f90d8	 ldr         r9, [pc, #0xD8]
  00010	e59f70d0	 ldr         r7, [pc, #0xD0]
  00014	e3a05000	 mov         r5, #0
  00018	e5993000	 ldr         r3, [r9]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000004	 bne         |$LN15@PrcmDevice@22|

; 522  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableFClock_USB(devId=%d)\r\n", devId));

  00024	e5973440	 ldr         r3, [r7, #0x440]
  00028	e3130004	 tst         r3, #4
  0002c	159f00b0	 ldrne       r0, [pc, #0xB0]
  00030	11a01004	 movne       r1, r4
  00034	1b000000	 blne        NKDbgPrintfW
  00038		 |$LN15@PrcmDevice@22|

; 523  : 
; 524  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableFClock_USB, devId, bEnable)
; 525  : 
; 526  :     // determine which fclk to enable/disable
; 527  :     pEntry = &s_rgDeviceLookupTable[devId];

  00038	e59f20a0	 ldr         r2, [pc, #0xA0]
  0003c	e0643184	 rsb         r3, r4, r4, lsl #3

; 528  :     switch (devId)

  00040	e3540049	 cmp         r4, #0x49
  00044	e0828103	 add         r8, r2, r3, lsl #2
  00048	3a000018	 bcc         |$cleanUp$48327|
  0004c	e354004a	 cmp         r4, #0x4A
  00050	9a00000f	 bls         |$LN5@PrcmDevice@22|
  00054	e354004d	 cmp         r4, #0x4D
  00058	8a000014	 bhi         |$cleanUp$48327|

; 534  :             break; 
; 535  : 
; 536  :         case OMAP_DEVICE_USBHOST1:
; 537  :         case OMAP_DEVICE_USBHOST2:
; 538  :         case OMAP_DEVICE_USBHOST3:
; 539  :             // when these device IDs are used, gate entire clock tree
; 540  :             // USB host has 2 FCLKs, 120MHz and 48MHz
; 541  :             // always gate 48MHz FCLK
; 542  :             PrcmDeviceEnableFClock(OMAP_DEVICE_HSUSB1, bEnable);

  0005c	e1a01006	 mov         r1, r6
  00060	e3a00049	 mov         r0, #0x49
  00064	eb000000	 bl          PrcmDeviceEnableFClock

; 543  :             // if 120MHz FCLK is included in soruce clocks list, gate it as well
; 544  :             if (pEntry->pSrcClocks->size == 4 &&
; 545  :                 pEntry->pSrcClocks->rgSourceClocks[3] == kUSBHOST_120M_FCLK)

  00068	e5982018	 ldr         r2, [r8, #0x18]
  0006c	e5923000	 ldr         r3, [r2]
  00070	e3530004	 cmp         r3, #4
  00074	1a000009	 bne         |$LN6@PrcmDevice@22|
  00078	e5923010	 ldr         r3, [r2, #0x10]
  0007c	e3530043	 cmp         r3, #0x43
  00080	1a000006	 bne         |$LN6@PrcmDevice@22|

; 546  :                 {
; 547  :                 // also gate 120MHz FCLK
; 548  :                 PrcmDeviceEnableFClock(OMAP_DEVICE_HSUSB2, bEnable);

  00084	e1a01006	 mov         r1, r6
  00088	e3a0004a	 mov         r0, #0x4A
  0008c	eb000000	 bl          PrcmDeviceEnableFClock

; 549  :                 }
; 550  :             break;

  00090	ea000002	 b           |$LN6@PrcmDevice@22|
  00094		 |$LN5@PrcmDevice@22|

; 529  :         {
; 530  :         case OMAP_DEVICE_HSUSB1:    // 48MHz FCLK
; 531  :         case OMAP_DEVICE_HSUSB2:    // 120MHz FCLK
; 532  :             // when these device IDs are used, gate final clock
; 533  :             _PrcmDeviceEnableFClock(devId, bEnable);

  00094	e1a01006	 mov         r1, r6
  00098	e1a00004	 mov         r0, r4
  0009c	eb000000	 bl          _PrcmDeviceEnableFClock
  000a0		 |$LN6@PrcmDevice@22|

; 551  :             
; 552  :         default:
; 553  :             goto cleanUp;
; 554  :         }
; 555  :     
; 556  :     // notify oal of device activity for wakeup latency management
; 557  :     OALWakeupLatency_DeviceEnabled(devId, bEnable);

  000a0	e1a01006	 mov         r1, r6
  000a4	e1a00004	 mov         r0, r4
  000a8	eb000000	 bl          OALWakeupLatency_DeviceEnabled

; 558  :     rc = TRUE;

  000ac	e3a05001	 mov         r5, #1
  000b0		 |$cleanUp$48327|
  000b0	e5993000	 ldr         r3, [r9]

; 559  : 
; 560  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableFClock_USB, devId)
; 561  : 
; 562  : cleanUp:    
; 563  :     if (!g_bSingleThreaded)

  000b4	e3530000	 cmp         r3, #0
  000b8	1a000004	 bne         |$LN13@PrcmDevice@22|
  000bc	e5973440	 ldr         r3, [r7, #0x440]

; 564  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableFClock_USB()=%d\r\n", rc));

  000c0	e3130004	 tst         r3, #4
  000c4	159f0010	 ldrne       r0, [pc, #0x10]
  000c8	11a01005	 movne       r1, r5
  000cc	1b000000	 blne        NKDbgPrintfW
  000d0		 |$LN13@PrcmDevice@22|

; 565  :     return rc;
; 566  : }

  000d0	e1a00005	 mov         r0, r5
  000d4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$LN19@PrcmDevice@22|
  000dc		 |$LN20@PrcmDevice@22|
  000dc	00000000	 DCD         |??_C@_1EI@BGCBHLEJ@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@|
  000e0		 |$LN21@PrcmDevice@22|
  000e0	00000000	 DCD         |s_rgDeviceLookupTable|
  000e4		 |$LN22@PrcmDevice@22|
  000e4	00000000	 DCD         |??_C@_1FC@KOILFLNM@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAF?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AAd?$AAe?$AAv@|
  000e8		 |$LN23@PrcmDevice@22|
  000e8	00000000	 DCD         |dpCurSettings|
  000ec		 |$LN24@PrcmDevice@22|
  000ec	00000000	 DCD         |g_bSingleThreaded|
  000f0		 |$M49466|

			 ENDP  ; |_PrcmDeviceEnableFClock_USB|

	EXPORT	|??_C@_1EI@DKDBOJAO@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@ECCIEPHO@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AAd?$AAe?$AAv@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49491| DCD	|$LN17@PrcmDevice@23|
	DCD	0x40002b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@DKDBOJAO@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "(", 0x0, ")", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@ECCIEPHO@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AAd?$AAe?$AAv@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "I"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "_"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "(", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "I", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceEnableIClock_USB| PROC

; 692  : {

  00000		 |$LN17@PrcmDevice@23|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M49488|
  00004	e1a06001	 mov         r6, r1
  00008	e1a04000	 mov         r4, r0

; 693  :     BOOL rc = FALSE;
; 694  :     DeviceLookupEntry const *pEntry;
; 695  :     if (!g_bSingleThreaded)

  0000c	e59f8094	 ldr         r8, [pc, #0x94]
  00010	e59f708c	 ldr         r7, [pc, #0x8C]
  00014	e3a05000	 mov         r5, #0
  00018	e5983000	 ldr         r3, [r8]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000004	 bne         |$LN14@PrcmDevice@23|

; 696  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceEnableIClock_USB(devId=%d)\r\n", devId));

  00024	e5973440	 ldr         r3, [r7, #0x440]
  00028	e3130004	 tst         r3, #4
  0002c	159f006c	 ldrne       r0, [pc, #0x6C]
  00030	11a01004	 movne       r1, r4
  00034	1b000000	 blne        NKDbgPrintfW
  00038		 |$LN14@PrcmDevice@23|

; 697  : 
; 698  :     SPECIAL_DEBUG_MESSAGE2(_PrcmDeviceEnableIClock_USB, devId, bEnable)
; 699  : 
; 700  :     // determine which iclk to enable/disable
; 701  :     pEntry = &s_rgDeviceLookupTable[devId];
; 702  :     switch (devId)

  00038	e3540049	 cmp         r4, #0x49
  0003c	3a00000b	 bcc         |$cleanUp$48407|
  00040	e354004a	 cmp         r4, #0x4A
  00044	9a000005	 bls         |$LN4@PrcmDevice@23|
  00048	e354004d	 cmp         r4, #0x4D
  0004c	8a000007	 bhi         |$cleanUp$48407|

; 708  :             break; 
; 709  : 
; 710  :         case OMAP_DEVICE_USBHOST1:
; 711  :         case OMAP_DEVICE_USBHOST2:
; 712  :         case OMAP_DEVICE_USBHOST3:
; 713  : #if 0
; 714  :             // Enable USB HOST hardware context save/restore for ES3.1
; 715  :             if (!bEnable && IS_SILICON_ES3_1())
; 716  :                 {
; 717  :                 PrcmDomainSetMemoryState(POWERDOMAIN_USBHOST, 
; 718  :                                             SAVEANDRESTORE,
; 719  :                                             SAVEANDRESTORE
; 720  :                                             );
; 721  :                 }
; 722  : #endif            
; 723  :             PrcmDeviceEnableIClock(OMAP_DEVICE_HSUSB1, bEnable);

  00050	e1a01006	 mov         r1, r6
  00054	e3a00049	 mov         r0, #0x49
  00058	eb000000	 bl          PrcmDeviceEnableIClock

; 724  :             break;

  0005c	ea000002	 b           |$LN5@PrcmDevice@23|
  00060		 |$LN4@PrcmDevice@23|

; 703  :         {
; 704  :         case OMAP_DEVICE_HSUSB1:
; 705  :         case OMAP_DEVICE_HSUSB2:
; 706  :             // when these device IDs are used, just gate final clock
; 707  :             _PrcmDeviceEnableIClock(devId, bEnable);

  00060	e1a01006	 mov         r1, r6
  00064	e1a00004	 mov         r0, r4
  00068	eb000000	 bl          _PrcmDeviceEnableIClock
  0006c		 |$LN5@PrcmDevice@23|

; 725  :             
; 726  :         default:
; 727  :             goto cleanUp;
; 728  :         }
; 729  :     
; 730  :     rc = TRUE;

  0006c	e3a05001	 mov         r5, #1
  00070		 |$cleanUp$48407|

; 693  :     BOOL rc = FALSE;
; 694  :     DeviceLookupEntry const *pEntry;
; 695  :     if (!g_bSingleThreaded)

  00070	e5983000	 ldr         r3, [r8]

; 731  : 
; 732  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceEnableIClock_USB, devId)
; 733  : 
; 734  : cleanUp:    
; 735  :     if (!g_bSingleThreaded)

  00074	e3530000	 cmp         r3, #0
  00078	1a000004	 bne         |$LN12@PrcmDevice@23|
  0007c	e5973440	 ldr         r3, [r7, #0x440]

; 736  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceEnableIClock_USB()=%d\r\n", rc));

  00080	e3130004	 tst         r3, #4
  00084	159f0010	 ldrne       r0, [pc, #0x10]
  00088	11a01005	 movne       r1, r5
  0008c	1b000000	 blne        NKDbgPrintfW
  00090		 |$LN12@PrcmDevice@23|

; 737  :     return rc;
; 738  : }

  00090	e1a00005	 mov         r0, r5
  00094	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN18@PrcmDevice@23|
  0009c		 |$LN19@PrcmDevice@23|
  0009c	00000000	 DCD         |??_C@_1EI@DKDBOJAO@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF@|
  000a0		 |$LN20@PrcmDevice@23|
  000a0	00000000	 DCD         |??_C@_1FC@ECCIEPHO@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAU?$AAS?$AAB?$AA?$CI?$AAd?$AAe?$AAv@|
  000a4		 |$LN21@PrcmDevice@23|
  000a4	00000000	 DCD         |dpCurSettings|
  000a8		 |$LN22@PrcmDevice@23|
  000a8	00000000	 DCD         |g_bSingleThreaded|
  000ac		 |$M49489|

			 ENDP  ; |_PrcmDeviceEnableIClock_USB|

	EXPORT	|??_C@_1EM@CGIDEPGJ@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@OBINGANC@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49525| DCD	|$LN36@PrcmDevice@24|
	DCD	0x40005b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@CGIDEPGJ@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "_", 0x0, "D", 0x0, "S", 0x0, "S", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@OBINGANC@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "_", 0x0, "D", 0x0, "S", 0x0, "S", 0x0, "("
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "I", 0x0, "d", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceSetSourceClock_DSS| PROC

; 781  : {

  00000		 |$LN36@PrcmDevice@24|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M49522|
  00004	e1a07002	 mov         r7, r2
  00008	e1a09001	 mov         r9, r1
  0000c	e1a04000	 mov         r4, r0

; 782  :     UINT i;
; 783  : //    UINT val;
; 784  :     BOOL rc = FALSE;
; 785  :     BOOL bDss1 = FALSE;
; 786  :     BOOL bDss2 = FALSE;    
; 787  :     BOOL bCurrentDss1 = FALSE;
; 788  :     BOOL bCurrentDss2 = FALSE;
; 789  : 
; 790  :     SourceDeviceClocks_t *pSrcClocks;
; 791  :     
; 792  :     if (!g_bSingleThreaded)

  00010	e59f3148	 ldr         r3, [pc, #0x148]
  00014	e59f2140	 ldr         r2, [pc, #0x140]
  00018	e3a05000	 mov         r5, #0
  0001c	e5933000	 ldr         r3, [r3]
  00020	e3a08000	 mov         r8, #0
  00024	e3a06000	 mov         r6, #0
  00028	e3530000	 cmp         r3, #0
  0002c	e3a0b000	 mov         r11, #0
  00030	e3a0a000	 mov         r10, #0
  00034	1a000004	 bne         |$LN33@PrcmDevice@24|

; 793  :         OALMSG(OAL_FUNC, (L"+_PrcmDeviceSetSourceClock_DSS(devId=%d)\r\n", devId));

  00038	e5923440	 ldr         r3, [r2, #0x440]
  0003c	e3130004	 tst         r3, #4
  00040	159f0120	 ldrne       r0, [pc, #0x120]
  00044	11a01004	 movne       r1, r4
  00048	1b000000	 blne        NKDbgPrintfW
  0004c		 |$LN33@PrcmDevice@24|

; 794  : 
; 795  :     SPECIAL_DEBUG_MESSAGE(_PrcmDeviceSetSourceClock_DSS, devId)
; 796  : 
; 797  :     if (devId != OMAP_DEVICE_DSS) goto cleanUp;

  0004c	e354003f	 cmp         r4, #0x3F
  00050	1a000033	 bne         |$cleanUp$48444|

; 798  : 
; 799  :     pSrcClocks = s_rgDeviceLookupTable[devId].pSrcClocks;

  00054	e59f4108	 ldr         r4, [pc, #0x108]

; 800  : 
; 801  :     for (i = 0; i < count; ++i)

  00058	e3a00000	 mov         r0, #0
  0005c	e3590000	 cmp         r9, #0
  00060	e59416fc	 ldr         r1, [r4, #0x6FC]
  00064	0a000015	 beq         |$LN18@PrcmDevice@24|
  00068	e1a02001	 mov         r2, r1
  0006c	e047e001	 sub         lr, r7, r1
  00070		 |$LL20@PrcmDevice@24|

; 802  :         {
; 803  :         switch (rgClocks[i])

  00070	e79e3002	 ldr         r3, [lr, +r2]
  00074	e3530007	 cmp         r3, #7
  00078	0a000003	 beq         |$LN15@PrcmDevice@24|
  0007c	e353001a	 cmp         r3, #0x1A
  00080	1a000027	 bne         |$cleanUp$48444|

; 807  :                 break;
; 808  : 
; 809  :             case kDSS2_ALWON_FCLK:
; 810  :                 bDss2 = TRUE;

  00084	e3a06001	 mov         r6, #1

; 811  :                 break;

  00088	ea000000	 b           |$LN16@PrcmDevice@24|
  0008c		 |$LN15@PrcmDevice@24|

; 804  :             {
; 805  :             case kDSS1_ALWON_FCLK:
; 806  :                 bDss1 = TRUE;

  0008c	e3a08001	 mov         r8, #1
  00090		 |$LN16@PrcmDevice@24|

; 812  : 
; 813  :             default:
; 814  :                 goto cleanUp;
; 815  :             }        
; 816  : 
; 817  :         switch (pSrcClocks->rgSourceClocks[i])

  00090	e5923004	 ldr         r3, [r2, #4]
  00094	e3530007	 cmp         r3, #7
  00098	0a000003	 beq         |$LN10@PrcmDevice@24|
  0009c	e353001a	 cmp         r3, #0x1A
  000a0	1a00001f	 bne         |$cleanUp$48444|

; 821  :                 break;
; 822  : 
; 823  :             case kDSS2_ALWON_FCLK:
; 824  :                 bCurrentDss2 = TRUE;

  000a4	e3a0a001	 mov         r10, #1

; 825  :                 break;

  000a8	ea000000	 b           |$LN19@PrcmDevice@24|
  000ac		 |$LN10@PrcmDevice@24|

; 818  :             {
; 819  :             case kDSS1_ALWON_FCLK:
; 820  :                 bCurrentDss1 = TRUE;

  000ac	e3a0b001	 mov         r11, #1
  000b0		 |$LN19@PrcmDevice@24|

; 800  : 
; 801  :     for (i = 0; i < count; ++i)

  000b0	e2800001	 add         r0, r0, #1
  000b4	e1500009	 cmp         r0, r9
  000b8	e2822004	 add         r2, r2, #4
  000bc	3affffeb	 bcc         |$LL20@PrcmDevice@24|
  000c0		 |$LN18@PrcmDevice@24|

; 826  : 
; 827  :             default:
; 828  :                 goto cleanUp;
; 829  :             }        
; 830  :         }
; 831  : 
; 832  :     i = 0;
; 833  :     if (bDss1 == TRUE) 

  000c0	e3580001	 cmp         r8, #1

; 834  : 	    pSrcClocks->rgSourceClocks[i++] = kDSS1_ALWON_FCLK;

  000c4	03a03007	 moveq       r3, #7
  000c8	e3a02000	 mov         r2, #0
  000cc	05813004	 streq       r3, [r1, #4]
  000d0	03a02001	 moveq       r2, #1

; 835  : 
; 836  :     if (bDss2 == TRUE) 

  000d4	e3560001	 cmp         r6, #1

; 837  : 	    pSrcClocks->rgSourceClocks[i++] = kDSS2_ALWON_FCLK;

  000d8	00813102	 addeq       r3, r1, r2, lsl #2
  000dc	03a0101a	 moveq       r1, #0x1A
  000e0	02822001	 addeq       r2, r2, #1
  000e4	05831004	 streq       r1, [r3, #4]

; 838  : 
; 839  :     if (i > 0)

  000e8	e3520000	 cmp         r2, #0
  000ec	0a00000c	 beq         |$cleanUp$48444|

; 840  : 	    {
; 841  :         if (s_rgDeviceLookupTable[devId].pfclk->refCount > 0)

  000f0	e59436e8	 ldr         r3, [r4, #0x6E8]
  000f4	e5933000	 ldr         r3, [r3]
  000f8	e3530000	 cmp         r3, #0
  000fc	da000007	 ble         |$LN2@PrcmDevice@24|

; 842  : 	        {
; 843  :             if (bCurrentDss1 != bDss1)

  00100	e15b0008	 cmp         r11, r8

; 844  :                 PrcmDeviceEnableFClock(OMAP_DEVICE_DSS1, bDss1);

  00104	11a01008	 movne       r1, r8
  00108	13a00040	 movne       r0, #0x40
  0010c	1b000000	 blne        PrcmDeviceEnableFClock

; 845  : 
; 846  :     	    if (bCurrentDss2 != bDss2)

  00110	e15a0006	 cmp         r10, r6

; 847  :                 PrcmDeviceEnableFClock(OMAP_DEVICE_DSS2, bDss2);

  00114	11a01006	 movne       r1, r6
  00118	13a00041	 movne       r0, #0x41
  0011c	1b000000	 blne        PrcmDeviceEnableFClock
  00120		 |$LN2@PrcmDevice@24|

; 848  :             }
; 849  :     	rc = TRUE;

  00120	e3a05001	 mov         r5, #1
  00124		 |$cleanUp$48444|

; 782  :     UINT i;
; 783  : //    UINT val;
; 784  :     BOOL rc = FALSE;
; 785  :     BOOL bDss1 = FALSE;
; 786  :     BOOL bDss2 = FALSE;    
; 787  :     BOOL bCurrentDss1 = FALSE;
; 788  :     BOOL bCurrentDss2 = FALSE;
; 789  : 
; 790  :     SourceDeviceClocks_t *pSrcClocks;
; 791  :     
; 792  :     if (!g_bSingleThreaded)

  00124	e59f3034	 ldr         r3, [pc, #0x34]
  00128	e5933000	 ldr         r3, [r3]

; 850  : 	    }
; 851  : 			
; 852  : /*
; 853  :     i = 0;
; 854  :     pSrcClocks = s_rgDeviceLookupTable[devId].pSrcClocks;
; 855  :     if (bDss1 == TRUE) pSrcClocks->rgSourceClocks[i++] = kDSS1_ALWON_FCLK;
; 856  :     if (bDss2 == TRUE) pSrcClocks->rgSourceClocks[i++] = kDSS2_ALWON_FCLK;
; 857  : 
; 858  :     if (i > 0)
; 859  :         {
; 860  :         // update source clock count
; 861  :         pSrcClocks->size = i;
; 862  :         
; 863  :         // update clocks
; 864  :         if (s_rgDeviceLookupTable[devId].pfclk->refCount > 0)
; 865  :             {
; 866  :             // enable both clocks
; 867  :             val = INREG32(&g_pPrcmCm->pOMAP_DSS_CM->CM_FCLKEN_DSS);
; 868  :             OUTREG32(&g_pPrcmCm->pOMAP_DSS_CM->CM_FCLKEN_DSS, val | CM_CLKEN_DSS_MASK);
; 869  :             
; 870  :             val &= ~CM_CLKEN_DSS_MASK;
; 871  :             for (i = 0; i < pSrcClocks->size; ++i)
; 872  :                 {
; 873  :                 switch (pSrcClocks->rgSourceClocks[i])
; 874  :                     {
; 875  :                     case kDSS1_ALWON_FCLK:
; 876  :                         val |= CM_CLKEN_DSS1;
; 877  :                         break;
; 878  : 
; 879  :                     case kDSS2_ALWON_FCLK:
; 880  :                         val |= CM_CLKEN_DSS2;
; 881  :                         break;
; 882  :                     }
; 883  :                 }
; 884  : 
; 885  :             // enable the requested source clock(s)
; 886  :             OUTREG32(&g_pPrcmCm->pOMAP_DSS_CM->CM_FCLKEN_DSS, val);
; 887  :             rc = TRUE;
; 888  :             }
; 889  :         else
; 890  :             {
; 891  :             rc = TRUE;
; 892  :             }
; 893  :         }
; 894  : */
; 895  :     
; 896  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceSetSourceClock_DSS, devId)
; 897  : 
; 898  : cleanUp:    
; 899  :     if (!g_bSingleThreaded)

  0012c	e3530000	 cmp         r3, #0
  00130	1a000005	 bne         |$LN27@PrcmDevice@24|
  00134	e59f3020	 ldr         r3, [pc, #0x20]
  00138	e5933440	 ldr         r3, [r3, #0x440]

; 900  :         OALMSG(OAL_FUNC, (L"-_PrcmDeviceSetSourceClock_DSS()=%d\r\n", rc));

  0013c	e3130004	 tst         r3, #4
  00140	159f0010	 ldrne       r0, [pc, #0x10]
  00144	11a01005	 movne       r1, r5
  00148	1b000000	 blne        NKDbgPrintfW
  0014c		 |$LN27@PrcmDevice@24|

; 901  :     return rc;
; 902  : }

  0014c	e1a00005	 mov         r0, r5
  00150	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00154	e12fff1e	 bx          lr
  00158		 |$LN37@PrcmDevice@24|
  00158		 |$LN38@PrcmDevice@24|
  00158	00000000	 DCD         |??_C@_1EM@CGIDEPGJ@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AA?$CJ@|
  0015c		 |$LN39@PrcmDevice@24|
  0015c	00000000	 DCD         |dpCurSettings|
  00160		 |$LN40@PrcmDevice@24|
  00160	00000000	 DCD         |g_bSingleThreaded|
  00164		 |$LN41@PrcmDevice@24|
  00164	00000000	 DCD         |s_rgDeviceLookupTable|
  00168		 |$LN42@PrcmDevice@24|
  00168	00000000	 DCD         |??_C@_1FG@OBINGANC@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk?$AA_?$AAD?$AAS?$AAS?$AA?$CI?$AAd@|
  0016c		 |$M49523|

			 ENDP  ; |_PrcmDeviceSetSourceClock_DSS|


  00000			 AREA	 |.pdata|, PDATA
|$T49546| DCD	|$LN17@PrcmDevice@25|
	DCD	0x40003001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDeviceSetSourceClock_USB| PROC

; 917  : {

  00000		 |$LN17@PrcmDevice@25|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M49543|
  00004	e1a05002	 mov         r5, r2
  00008	e1a04000	 mov         r4, r0

; 918  :     BOOL rc = FALSE;

  0000c	e3a00000	 mov         r0, #0

; 919  :     DeviceLookupEntry const *pEntry;
; 920  : 
; 921  :     SPECIAL_DEBUG_MESSAGE(_PrcmDeviceSetSourceClock_USB, devId)
; 922  : 
; 923  :     // validate parameters
; 924  :     if (count > 1) goto cleanUp;

  00010	e3510001	 cmp         r1, #1
  00014	8a000026	 bhi         |$cleanUp$48481|

; 925  :     if (rgClocks[0] != kUSBHOST_120M_FCLK && rgClocks[0] != kUSBHOST_48M_FCLK) goto cleanUp;

  00018	e595e000	 ldr         lr, [r5]
  0001c	e35e0043	 cmp         lr, #0x43
  00020	0a000001	 beq         |$LN10@PrcmDevice@25|
  00024	e35e003e	 cmp         lr, #0x3E
  00028	1a000021	 bne         |$cleanUp$48481|
  0002c		 |$LN10@PrcmDevice@25|

; 926  : 
; 927  :     // get current source clock/fclk information
; 928  :     pEntry = &s_rgDeviceLookupTable[devId];

  0002c	e59f1088	 ldr         r1, [pc, #0x88]
  00030	e0643184	 rsb         r3, r4, r4, lsl #3

; 929  :     switch (devId)

  00034	e354004b	 cmp         r4, #0x4B
  00038	e0811103	 add         r1, r1, r3, lsl #2
  0003c	3a00001c	 bcc         |$cleanUp$48481|
  00040	e354004d	 cmp         r4, #0x4D
  00044	8a00001a	 bhi         |$cleanUp$48481|

; 930  :         {
; 931  :         case OMAP_DEVICE_USBHOST1:
; 932  :         case OMAP_DEVICE_USBHOST2:
; 933  :         case OMAP_DEVICE_USBHOST3:
; 934  :             // check source clock to see if it is already on the source clocks list
; 935  :             if (pEntry->pSrcClocks->rgSourceClocks[3] == (SourceClock_e) rgClocks[0])

  00048	e5912018	 ldr         r2, [r1, #0x18]
  0004c	e5923010	 ldr         r3, [r2, #0x10]
  00050	e153000e	 cmp         r3, lr

; 936  :                 {
; 937  :                 rc = TRUE;
; 938  :                 goto cleanUp;                

  00054	0a000015	 beq         |$LN2@PrcmDevice@25|

; 939  :                 }
; 940  : 
; 941  :             // update new fclk
; 942  :             pEntry->pSrcClocks->rgSourceClocks[3] = rgClocks[0];

  00058	e582e010	 str         lr, [r2, #0x10]

; 943  :             if (rgClocks[0] == kUSBHOST_120M_FCLK)

  0005c	e5953000	 ldr         r3, [r5]
  00060	e3530043	 cmp         r3, #0x43

; 944  :                 {
; 945  :                 pEntry->pSrcClocks->size = 4;

  00064	e5913018	 ldr         r3, [r1, #0x18]
  00068	1a000007	 bne         |$LN5@PrcmDevice@25|
  0006c	e3a02004	 mov         r2, #4
  00070	e5832000	 str         r2, [r3]

; 946  :                 if (pEntry->pfclk->refCount > 0)

  00074	e5913004	 ldr         r3, [r1, #4]
  00078	e5933000	 ldr         r3, [r3]
  0007c	e3530000	 cmp         r3, #0
  00080	da00000a	 ble         |$LN2@PrcmDevice@25|

; 947  :                     {
; 948  :                     PrcmDeviceEnableFClock(OMAP_DEVICE_HSUSB2, TRUE);

  00084	e3a01001	 mov         r1, #1

; 949  :                     }
; 950  :                 }
; 951  :             else

  00088	ea000006	 b           |$LN14@PrcmDevice@25|
  0008c		 |$LN5@PrcmDevice@25|

; 952  :                 {
; 953  :                 pEntry->pSrcClocks->size = 3;

  0008c	e3a02003	 mov         r2, #3
  00090	e5832000	 str         r2, [r3]

; 954  :                 if (pEntry->pfclk->refCount > 0)

  00094	e5913004	 ldr         r3, [r1, #4]
  00098	e5933000	 ldr         r3, [r3]
  0009c	e3530000	 cmp         r3, #0
  000a0	da000002	 ble         |$LN2@PrcmDevice@25|

; 955  :                     {
; 956  :                     PrcmDeviceEnableFClock(OMAP_DEVICE_HSUSB2, FALSE);

  000a4	e3a01000	 mov         r1, #0
  000a8		 |$LN14@PrcmDevice@25|
  000a8	e3a0004a	 mov         r0, #0x4A
  000ac	eb000000	 bl          PrcmDeviceEnableFClock
  000b0		 |$LN2@PrcmDevice@25|

; 957  :                     }
; 958  :                 }
; 959  :             break;
; 960  :             
; 961  :         default:
; 962  :             goto cleanUp;
; 963  :         }
; 964  : 
; 965  :     rc = TRUE;

  000b0	e3a00001	 mov         r0, #1
  000b4		 |$cleanUp$48481|

; 966  :     
; 967  :     SPECIAL_DEBUG_MESSAGE_DONE(_PrcmDeviceSetSourceClock_USB, devId)
; 968  : 
; 969  : cleanUp:
; 970  :     return rc;
; 971  : }

  000b4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$LN18@PrcmDevice@25|
  000bc		 |$LN19@PrcmDevice@25|
  000bc	00000000	 DCD         |s_rgDeviceLookupTable|
  000c0		 |$M49544|

			 ENDP  ; |_PrcmDeviceSetSourceClock_USB|

	EXPORT	|SelectSourceClocks|

  00000			 AREA	 |.pdata|, PDATA
|$T49560| DCD	|$LN5@SelectSour|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SelectSourceClocks| PROC

; 1054 : {

  00000		 |$LN5@SelectSour|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M49557|

; 1055 :     return PrcmDeviceSetSourceClocks(devID,count,clockID);

  00004	eb000000	 bl          PrcmDeviceSetSourceClocks

; 1056 : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M49558|

			 ENDP  ; |SelectSourceClocks|

	EXPORT	|EnableDeviceClocks|

  00000			 AREA	 |.pdata|, PDATA
|$T49571| DCD	|$LN5@EnableDevi|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EnableDeviceClocks| PROC

; 1244 : {

  00000		 |$LN5@EnableDevi|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M49568|

; 1245 :     return PrcmDeviceEnableClocks(devID,bEnable);

  00004	eb000000	 bl          PrcmDeviceEnableClocks

; 1246 : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M49569|

			 ENDP  ; |EnableDeviceClocks|

	END
