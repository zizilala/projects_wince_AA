; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\OAL\CPUVER\oalcpuver.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|OMAPCpuInfo| [ DATA ]
	EXPORT	|CPUMaxSpeed| [ DATA ]

  00000			 AREA	 |.data|, DATA
|OMAPCpuInfo| DCW 0x3530
	DCW	0xb7ae
	DCW	0x0
	DCW	0xc00
	DCW	0x3525
	DCW	0xb7ae
	DCW	0x0
	DCW	0x4c00
	DCW	0x3515
	DCW	0xb7ae
	DCW	0x0
	DCW	0x1c00
	DCW	0x3503
	DCW	0xb7ae
	DCW	0x0
	DCW	0x5c00
	DCW	0x3730
	DCW	0xb891
	DCW	0x1
	DCW	0xc00
	DCW	0x3725
	DCW	0xb891
	DCW	0x1
	DCW	0x4c00
	DCW	0x3715
	DCW	0xb891
	DCW	0x1
	DCW	0x1c00
	DCW	0x3703
	DCW	0xb891
	DCW	0x1
	DCW	0x5c00
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
|CPUMaxSpeed| DCD 0x2d0
	DCD	0x3e8
	DCD	0x2d0
	DCD	0x0

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|Get_CPUVersion|
	EXPORT	|??_C@_1CO@BANOFPG@?$AAG?$AAe?$AAt?$AA_?$AAC?$AAP?$AAU?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|OALPAtoVA|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\oal\cpuver\oalcpuver.c

  00000			 AREA	 |.pdata|, PDATA
|$T45363| DCD	|$LN30@Get_CPUVer|
	DCD	0x40007001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@BANOFPG@?$AAG?$AAe?$AAt?$AA_?$AAC?$AAP?$AAU?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "_", 0x0, "C", 0x0, "P", 0x0, "U"
	DCB	0x0, "V", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Get_CPUVersion| PROC

; 53   : {

  00000		 |$LN30@Get_CPUVer|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M45360|

; 54   :     //----------------------------------------------------------------------
; 55   :     // Determion CPU revison
; 56   :     //----------------------------------------------------------------------
; 57   :     UINT32 hawkeye_id, dwOmapFeature;
; 58   :     UINT8 version;
; 59   :     UINT32 CpuRevision;
; 60   :     OMAP_SYSC_GENERAL_REGS * pSyscGeneralRegs = OALPAtoUA(OMAP_SYSC_GENERAL_REGS_PA);

  00004	e59f01b0	 ldr         r0, [pc, #0x1B0]
  00008	e3a01000	 mov         r1, #0
  0000c	eb000000	 bl          OALPAtoVA
  00010	e1a06000	 mov         r6, r0

; 61   :     chip_info_tag *chip_info = OMAPCpuInfo;
; 62   : 
; 63   :     hawkeye_id = (INREG32(OALPAtoUA(OMAP_IDCODE_REGS_PA)) & 0xFFFFF000) ;

  00014	e59f019c	 ldr         r0, [pc, #0x19C]
  00018	e59f5194	 ldr         r5, [pc, #0x194]
  0001c	e3a01000	 mov         r1, #0
  00020	eb000000	 bl          OALPAtoVA
  00024	e5902000	 ldr         r2, [r0]
  00028	e3e03c0f	 mvn         r3, #0xF, 24
  0002c	e22330ff	 eor         r3, r3, #0xFF

; 64   : 	OALMSG(1, (L"Get_CPUVersion: 0x%x\r\n",hawkeye_id));

  00030	e59f0178	 ldr         r0, [pc, #0x178]
  00034	e0024003	 and         r4, r2, r3
  00038	e1a01004	 mov         r1, r4
  0003c	eb000000	 bl          NKDbgPrintfW

; 65   :     switch ( hawkeye_id )

  00040	e3a026b6	 mov         r2, #0xB6, 12
  00044	e3a0356e	 mov         r3, #0x6E, 10
  00048	e382ead6	 orr         lr, r2, #0xD6, 20
  0004c	e3a026b7	 mov         r2, #0xB7, 12
  00050	e3833a91	 orr         r3, r3, #0x91, 20
  00054	e3a0152e	 mov         r1, #0x2E, 10
  00058	e3822aae	 orr         r2, r2, #0xAE, 20
  0005c	e1540003	 cmp         r4, r3
  00060	e3811a91	 orr         r1, r1, #0x91, 20
  00064	8a000013	 bhi         |$LN24@Get_CPUVer|
  00068	0a00000f	 beq         |$LN13@Get_CPUVer|
  0006c	e154000e	 cmp         r4, lr
  00070	0a00000b	 beq         |$LN19@Get_CPUVer|
  00074	e1540002	 cmp         r4, r2
  00078	0a000005	 beq         |$LN18@Get_CPUVer|
  0007c	e1540001	 cmp         r4, r1
  00080	0a000005	 beq         |$LN14@Get_CPUVer|
  00084	e3a0356e	 mov         r3, #0x6E, 10
  00088	e2433a52	 sub         r3, r3, #0x52, 20
  0008c	e1540003	 cmp         r4, r3
  00090	1a000017	 bne         |$LN11@Get_CPUVer|
  00094		 |$LN18@Get_CPUVer|

; 71   : 
; 72   :         case 0x0B7AE000:
; 73   :         case 0x1B7AE000:	// ES2.0 
; 74   :             CpuRevision = CPU_FAMILY_OMAP35XX_REVISION_ES_2_0;

  00094	e3a00001	 mov         r0, #1

; 75   :             version = 1;
; 76   :         break;

  00098	ea00002c	 b           |$LN8@Get_CPUVer|
  0009c		 |$LN14@Get_CPUVer|

; 92   : 
; 93   :         case 0x0B891000:
; 94   :             CpuRevision = CPU_FAMILY_DM37XX_REVISION_ES_1_0;

  0009c	e3a00e11	 mov         r0, #0x11, 28

; 95   :             version = 0;
; 96   :         break;

  000a0	ea00002a	 b           |$LN8@Get_CPUVer|
  000a4		 |$LN19@Get_CPUVer|

; 66   :     {
; 67   :         case 0x0B6D6000:
; 68   :             CpuRevision = CPU_FAMILY_OMAP35XX_REVISION_ES_1_0;

  000a4	e3a00000	 mov         r0, #0

; 69   :             version = 0;
; 70   :         break;

  000a8	ea000028	 b           |$LN8@Get_CPUVer|
  000ac		 |$LN13@Get_CPUVer|
  000ac	e3a03c01	 mov         r3, #1, 24

; 97   : 
; 98   :         case 0x1B891000:
; 99   :             CpuRevision = CPU_FAMILY_DM37XX_REVISION_ES_1_1;

  000b0	e3830011	 orr         r0, r3, #0x11

; 100  :             version = 1;
; 101  :         break;

  000b4	ea000025	 b           |$LN8@Get_CPUVer|
  000b8		 |$LN24@Get_CPUVer|
  000b8	e3a035ae	 mov         r3, #0xAE, 10
  000bc	e2433a52	 sub         r3, r3, #0x52, 20
  000c0	e1540003	 cmp         r4, r3
  000c4	0a000020	 beq         |$LN17@Get_CPUVer|
  000c8	e3a035ae	 mov         r3, #0xAE, 10
  000cc	e3833a91	 orr         r3, r3, #0x91, 20
  000d0	e1540003	 cmp         r4, r3
  000d4	0a000019	 beq         |$LN12@Get_CPUVer|
  000d8	e3a035ee	 mov         r3, #0xEE, 10
  000dc	e2433a52	 sub         r3, r3, #0x52, 20
  000e0	e1540003	 cmp         r4, r3
  000e4	0a000013	 beq         |$LN16@Get_CPUVer|
  000e8	e59f30bc	 ldr         r3, [pc, #0xBC]
  000ec	e1540003	 cmp         r4, r3
  000f0	0a00000e	 beq         |$LN15@Get_CPUVer|
  000f4		 |$LN11@Get_CPUVer|
  000f4	e3e032ff	 mvn         r3, #0xFF, 4

; 107  : 
; 108  :         default:
; 109  :             CpuRevision = (UINT32)CPU_REVISION_UNKNOWN;
; 110  :             version = 0xFF;
; 111  :         break;
; 112  :     }  
; 113  : 
; 114  : #if 0 /* uncomment this code if using older revs of OMAP35XX Silicon */
; 115  :     if (((CpuRevision >> CPU_FAMILY_SHIFT) & CPU_REVISION_MASK) == CPU_FAMILY_OMAP35XX)
; 116  :     {
; 117  :         // Some ES2.1 silicon has incorrectly burned fuses indicating a different revision
; 118  :         // Read the CRC in public ROM area to distinguish between revisions
; 119  :         switch (INREG32(OALPAtoUA(PUBLIC_ROM_CRC_PA)))
; 120  :         {
; 121  :             case PUBLIC_ROM_CRC_ES2_0:
; 122  :             // CRC indicates this is ES2.0
; 123  :             if (version != 1)
; 124  :             {
; 125  :                 // Id register indicated this was some other rev, indicate ES2.0 with wrong Id
; 126  :                 CpuRevision = CPU_FAMILY_OMAP35XX_REVISION_ES_2_0_CRC;
; 127  :                 version = 3;
; 128  :             }
; 129  :             break;
; 130  :     
; 131  :             case PUBLIC_ROM_CRC_ES2_1:
; 132  :             // CRC indicates this is ES2.1
; 133  :             if (version < 2)
; 134  :             {
; 135  :                 // Id register indicated this was some other rev, indicate ES2.1 with wrong Id
; 136  :                 CpuRevision = CPU_FAMILY_OMAP35XX_REVISION_ES_2_1_CRC;
; 137  :                 version = 4;
; 138  :             }
; 139  :             break;
; 140  :     
; 141  :             default:
; 142  :             break;
; 143  :         }          
; 144  :     }
; 145  : #endif
; 146  : 
; 147  :     /* If only the version is unknown, determine the family and use future for version number */
; 148  :     if (CpuRevision == (UINT32)CPU_REVISION_UNKNOWN)
; 149  :     {
; 150  :         switch (hawkeye_id & 0x0FFFF000)

  000f8	e2233eff	 eor         r3, r3, #0xFF, 28
  000fc	e0043003	 and         r3, r4, r3
  00100	e153000e	 cmp         r3, lr
  00104	e3e00000	 mvn         r0, #0
  00108	0a000006	 beq         |$LN7@Get_CPUVer|
  0010c	e1530002	 cmp         r3, r2
  00110	0a000004	 beq         |$LN7@Get_CPUVer|
  00114	e1530001	 cmp         r3, r1
  00118	1a00000c	 bne         |$LN8@Get_CPUVer|
  0011c	e3a03c01	 mov         r3, #1, 24

; 155  :             break;
; 156  : 
; 157  :             
; 158  :             case 0x0B891000:
; 159  :                 CpuRevision = CPU_FAMILY_DM37XX_REVISION_ES_FUTURE;                

  00120	e38300ff	 orr         r0, r3, #0xFF

; 160  :             break;            

  00124	ea000009	 b           |$LN8@Get_CPUVer|
  00128		 |$LN7@Get_CPUVer|

; 151  :         {
; 152  :             case 0x0B6D6000:
; 153  :             case 0x0B7AE000:
; 154  :                 CpuRevision = CPU_FAMILY_OMAP35XX_REVISION_ES_FUTURE;

  00128	e3a000fe	 mov         r0, #0xFE
  0012c	ea000007	 b           |$LN8@Get_CPUVer|
  00130		 |$LN15@Get_CPUVer|

; 87   : 
; 88   :         case 0x4B7AE000:
; 89   :             CpuRevision = CPU_FAMILY_OMAP35XX_REVISION_ES_3_1;

  00130	e3a00006	 mov         r0, #6

; 90   :             version = 6;
; 91   :         break;

  00134	ea000005	 b           |$LN8@Get_CPUVer|
  00138		 |$LN16@Get_CPUVer|

; 80   :             version = 2;
; 81   :         break;
; 82   : 
; 83   :         case 0x3B7AE000:	// ES3.0
; 84   :             CpuRevision = CPU_FAMILY_OMAP35XX_REVISION_ES_3_0;

  00138	e3a00005	 mov         r0, #5

; 85   :             version = 5;
; 86   :         break;

  0013c	ea000003	 b           |$LN8@Get_CPUVer|
  00140		 |$LN12@Get_CPUVer|
  00140	e3a03c01	 mov         r3, #1, 24

; 102  : 
; 103  :         case 0x2B891000:
; 104  :             CpuRevision = CPU_FAMILY_DM37XX_REVISION_ES_1_2;

  00144	e3830012	 orr         r0, r3, #0x12

; 105  :             version = 2;
; 106  :         break;

  00148	ea000000	 b           |$LN8@Get_CPUVer|
  0014c		 |$LN17@Get_CPUVer|

; 77   : 
; 78   :         case 0x2B7AE000:	// ES2.1
; 79   :             CpuRevision = CPU_FAMILY_OMAP35XX_REVISION_ES_2_1;

  0014c	e3a00002	 mov         r0, #2
  00150		 |$LN8@Get_CPUVer|

; 161  :         }
; 162  :     }
; 163  : 
; 164  :     /* get chip id  for 3517 chips */
; 165  :     if((CpuRevision & 0xff00) == (CPU_FAMILY_AM35XX << CPU_FAMILY_SHIFT))

  00150	e2003cff	 and         r3, r0, #0xFF, 24
  00154	e3530c02	 cmp         r3, #2, 24
  00158	03a03435	 moveq       r3, #0x35, 8

; 166  :     {
; 167  :         CpuRevision |= (CPU_AM3517 << CHIP_ID_SHIFT);

  0015c	03833817	 orreq       r3, r3, #0x17, 16
  00160	01800003	 orreq       r0, r0, r3

; 179  :             }
; 180  : 	     chip_info++;
; 181  :         }
; 182  :     }
; 183  : //OALMSG(1, (L"--Get_CPUVersion: 0x%x\r\n",CpuRevision));
; 184  :     return (CpuRevision);
; 185  : }

  00164	08bd4070	 ldmeqia     sp!, {r4 - r6, lr}
  00168	012fff1e	 bxeq        lr

; 168  :     }
; 169  :     else
; 170  :     {
; 171  :         dwOmapFeature = INREG32(&pSyscGeneralRegs->zzzReserved11[0]) & CHIP_FEATURE_MASK;

  0016c	e59631dc	 ldr         r3, [r6, #0x1DC]

; 172  :         while(chip_info->chip_id != 0)    

  00170	e1d510b0	 ldrh        r1, [r5]
  00174	e203eb1f	 and         lr, r3, #0x1F, 22
  00178	e3510000	 cmp         r1, #0
  0017c	0a000008	 beq         |$LN2@Get_CPUVer|
  00180		 |$LL3@Get_CPUVer|

; 173  :         {
; 174  :             if((chip_info->family == CPU_FAMILY(CpuRevision)) &&
; 175  :                 (chip_info->feature == dwOmapFeature)
; 176  :               )

  00180	e1d520b4	 ldrh        r2, [r5, #4]
  00184	e1a03800	 mov         r3, r0, lsl #16
  00188	e1520c23	 cmp         r2, r3, lsr #24
  0018c	01d530b6	 ldreqh      r3, [r5, #6]
  00190	0153000e	 cmpeq       r3, lr
  00194	e1f530b8	 ldrh        r3, [r5, #8]!

; 177  :             {
; 178  :                  CpuRevision |= (chip_info->chip_id << CHIP_ID_SHIFT);

  00198	01800801	 orreq       r0, r0, r1, lsl #16
  0019c	e1b01003	 movs        r1, r3
  001a0	1afffff6	 bne         |$LL3@Get_CPUVer|
  001a4		 |$LN2@Get_CPUVer|

; 179  :             }
; 180  : 	     chip_info++;
; 181  :         }
; 182  :     }
; 183  : //OALMSG(1, (L"--Get_CPUVersion: 0x%x\r\n",CpuRevision));
; 184  :     return (CpuRevision);
; 185  : }

  001a4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  001a8	e12fff1e	 bx          lr
  001ac		 |$LN31@Get_CPUVer|
  001ac		 |$LN32@Get_CPUVer|
  001ac	4b7ae000	 DCD         0x4b7ae000
  001b0		 |$LN33@Get_CPUVer|
  001b0	00000000	 DCD         |??_C@_1CO@BANOFPG@?$AAG?$AAe?$AAt?$AA_?$AAC?$AAP?$AAU?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  001b4		 |$LN34@Get_CPUVer|
  001b4	00000000	 DCD         |OMAPCpuInfo|
  001b8		 |$LN35@Get_CPUVer|
  001b8	4830a204	 DCD         0x4830a204
  001bc		 |$LN36@Get_CPUVer|
  001bc	48002270	 DCD         0x48002270
  001c0		 |$M45361|

			 ENDP  ; |Get_CPUVersion|

	EXPORT	|Get_CPUMaxSpeed|

  00000			 AREA	 |.pdata|, PDATA
|$T45380| DCD	|$LN6@Get_CPUMax|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Get_CPUMaxSpeed| PROC

; 197  : {

  00000		 |$LN6@Get_CPUMax|
  00000		 |$M45377|
  00000	e1a02000	 mov         r2, r0

; 198  :     UINT32 speed=0;
; 199  : 	
; 200  :     if(VALID_CPU_FAMILY(cpu_family))

  00004	e3520003	 cmp         r2, #3

; 201  :     {
; 202  :         speed = CPUMaxSpeed[cpu_family];

  00008	359f3008	 ldrcc       r3, [pc, #8]
  0000c	e3a00000	 mov         r0, #0
  00010	37930102	 ldrcc       r0, [r3, +r2, lsl #2]

; 203  :     }
; 204  :     return (speed);
; 205  : }

  00014	e12fff1e	 bx          lr
  00018		 |$LN7@Get_CPUMax|
  00018		 |$LN8@Get_CPUMax|
  00018	00000000	 DCD         |CPUMaxSpeed|
  0001c		 |$M45378|

			 ENDP  ; |Get_CPUMaxSpeed|

	END
