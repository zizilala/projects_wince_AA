; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BLOCK\NAND\gpmc_ecc.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|gpmc_ecc_func| [ DATA ]
	EXPORT	|gpmc_ecc_hamming_code| [ DATA ]
	EXPORT	|gpmc_ecc_bch_4bits| [ DATA ]
	EXPORT	|gpmc_ecc_bch_8bits| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|gpmc_ecc_func| % 0x4

  00000			 AREA	 |.data|, DATA
|gpmc_ecc_hamming_code| DCD |Hamming_ECC_Init|
	DCD	|Hamming_ECC_Calculate|
	DCD	|Hamming_ECC_Reset|
	DCD	|Hamming_ECC_CorrectData|
|gpmc_ecc_bch_4bits| DCD |BCH4_ECC_Init|
	DCD	|BCH4_ECC_Calculate|
	DCD	|BCH4_ECC_Reset|
	DCD	|BCH4_ECC_CorrectData|
|gpmc_ecc_bch_8bits| DCD |BCH8_ECC_Init|
	DCD	|BCH8_ECC_Calculate|
	DCD	|BCH8_ECC_Reset|
	DCD	|BCH8_ECC_CorrectData|

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\block\nand\gpmc_ecc.c

  00000			 AREA	 |.pdata|, PDATA
|$T44230| DCD	|$LN9@CountNumbe|
	DCD	0x40000900
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CountNumberOfOnes| PROC

; 61   : {

  00000		 |$LN9@CountNumbe|
  00000		 |$M44227|
  00000	e1b01000	 movs        r1, r0

; 62   :     UCHAR count = 0;

  00004	e3a00000	 mov         r0, #0

; 63   :     while(num)

  00008	0a000004	 beq         |$LN1@CountNumbe|
  0000c		 |$LL2@CountNumbe|

; 64   :         {
; 65   :         num=num&(num-1);

  0000c	e2413001	 sub         r3, r1, #1

; 66   :         count++;

  00010	e2802001	 add         r2, r0, #1
  00014	e0131001	 ands        r1, r3, r1
  00018	e20200ff	 and         r0, r2, #0xFF
  0001c	1afffffa	 bne         |$LL2@CountNumbe|
  00020		 |$LN1@CountNumbe|

; 67   :         }
; 68   : 
; 69   :     return count;
; 70   : }

  00020	e12fff1e	 bx          lr
  00024		 |$M44228|

			 ENDP  ; |CountNumberOfOnes|


  00000			 AREA	 |.pdata|, PDATA
|$T44239| DCD	|$LN5@Hamming_EC|
	DCD	0x40000c00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Hamming_ECC_Init| PROC

; 79   : {

  00000		 |$LN5@Hamming_EC|
  00000		 |$M44236|
  00000	e3a035ff	 mov         r3, #0xFF, 10

; 80   :     UNREFERENCED_PARAMETER(xfer_mode); 
; 81   : 
; 82   :     //  Configure ECC calculator engine for NAND part
; 83   :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONFIG, configMask);
; 84   : 
; 85   :     //  Set ECC field sizes
; 86   :     OUTREG32(&pGpmcRegs->GPMC_ECC_SIZE_CONFIG, 0x3fcff000);

  00004	e3833aff	 orr         r3, r3, #0xFF, 20
  00008	e58011f4	 str         r1, [r0, #0x1F4]
  0000c	e58031fc	 str         r3, [r0, #0x1FC]

; 87   : 
; 88   :     //  Select result reg 1 and clear results
; 89   :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONTROL, GPMC_ECC_CONTROL_CLEAR);

  00010	e3a03c01	 mov         r3, #1, 24
  00014	e58031f8	 str         r3, [r0, #0x1F8]

; 90   :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONTROL, GPMC_ECC_CONTROL_POINTER1);

  00018	e3a03001	 mov         r3, #1
  0001c	e58031f8	 str         r3, [r0, #0x1F8]

; 91   : 
; 92   :     //  Enable ECC engine
; 93   :     SETREG32(&pGpmcRegs->GPMC_ECC_CONFIG, GPMC_ECC_CONFIG_ENABLE);

  00020	e59031f4	 ldr         r3, [r0, #0x1F4]
  00024	e3833001	 orr         r3, r3, #1
  00028	e58031f4	 str         r3, [r0, #0x1F4]

; 94   : }

  0002c	e12fff1e	 bx          lr
  00030		 |$M44237|

			 ENDP  ; |Hamming_ECC_Init|


  00000			 AREA	 |.pdata|, PDATA
|$T44255| DCD	|$LN9@Hamming_EC@2|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Hamming_ECC_Calculate| PROC

; 103  : {

  00000		 |$LN9@Hamming_EC@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M44252|

; 104  :     UINT    regIndex = 0;
; 105  :     UINT8   eccIndex;
; 106  :     UINT32  regVal;
; 107  : 
; 108  :     // the ecc engine is setup encode 512 bytes at a time
; 109  :     // so reading a sectore of 2048 bytes will require 4 sets of encoded
; 110  :     // groups
; 111  :     
; 112  :     for (eccIndex=0; eccIndex < size;)

  00004	e3a03000	 mov         r3, #0
  00008	e3520000	 cmp         r2, #0
  0000c	da000013	 ble         |$LN1@Hamming_EC@2|
  00010	e3a07000	 mov         r7, #0
  00014	e2806c02	 add         r6, r0, #2, 24
  00018		 |$LL2@Hamming_EC@2|

; 113  :         {
; 114  :         regVal = INREG32(((UINT32*)&pGpmcRegs->GPMC_ECC1_RESULT) + regIndex);

  00018	e4965004	 ldr         r5, [r6], #4

; 115  : 
; 116  :         // ECC-x[0] where x is from A-D
; 117  :         pEcc[eccIndex++] = (BYTE) ECC_P1_128_E(regVal);

  0001c	e2833001	 add         r3, r3, #1
  00020	e203e0ff	 and         lr, r3, #0xFF

; 118  : 
; 119  :         // ECC-x[1] where x is from A-D
; 120  :         pEcc[eccIndex++] = (BYTE) ECC_P1_128_O(regVal);

  00024	e28e4001	 add         r4, lr, #1

; 121  : 
; 122  :         // ECC-x[2] where x is from A-D
; 123  :         pEcc[eccIndex++] = (BYTE) (ECC_P512_2048_E(regVal)|ECC_P512_2048_O(regVal)<<4);

  00028	e1a03a25	 mov         r3, r5, lsr #20
  0002c	e0233425	 eor         r3, r3, r5, lsr #8
  00030	e1a00825	 mov         r0, r5, lsr #16
  00034	e203300f	 and         r3, r3, #0xF
  00038	e7c75001	 strb        r5, [r7, +r1]
  0003c	e7ce0001	 strb        r0, [lr, +r1]
  00040	e0233a25	 eor         r3, r3, r5, lsr #20
  00044	e20400ff	 and         r0, r4, #0xFF
  00048	e7c03001	 strb        r3, [r0, +r1]
  0004c	e2803001	 add         r3, r0, #1
  00050	e20330ff	 and         r3, r3, #0xFF
  00054	e1a07003	 mov         r7, r3
  00058	e1530002	 cmp         r3, r2
  0005c	baffffed	 blt         |$LL2@Hamming_EC@2|
  00060		 |$LN1@Hamming_EC@2|

; 124  : 
; 125  :         // read next ecc register
; 126  :         regIndex++;
; 127  :         }
; 128  : 
; 129  :     return;
; 130  : }

  00060	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M44253|

			 ENDP  ; |Hamming_ECC_Calculate|


  00000			 AREA	 |.pdata|, PDATA
|$T44263| DCD	|$LN5@Hamming_EC@3|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Hamming_ECC_Reset| PROC

; 137  : {

  00000		 |$LN5@Hamming_EC@3|
  00000		 |$M44260|

; 138  :     //  Disable ECC engine
; 139  :     CLRREG32(&pGpmcRegs->GPMC_ECC_CONFIG, GPMC_ECC_CONFIG_ENABLE);

  00000	e59031f4	 ldr         r3, [r0, #0x1F4]
  00004	e3c33001	 bic         r3, r3, #1
  00008	e58031f4	 str         r3, [r0, #0x1F4]

; 140  : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M44261|

			 ENDP  ; |Hamming_ECC_Reset|


  00000			 AREA	 |.pdata|, PDATA
|$T44303| DCD	|$LN37@Hamming_EC@4|
	DCD	0x40004602
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Hamming_ECC_CorrectData| PROC

; 163  : {

  00000		 |$LN37@Hamming_EC@4|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M44300|
  00008	e1a08003	 mov         r8, r3
  0000c	e1a0a001	 mov         r10, r1

; 164  :     BOOL rc = FALSE;
; 165  :     int   i;
; 166  :     int numOnes;
; 167  :     DWORD ECCxor[ECC_BUFF_LEN];
; 168  :     UCHAR mask;
; 169  :     DWORD byteLocation;
; 170  :     DWORD bitLocation;
; 171  :     UCHAR count;
; 172  :     BOOL  bCorrect;
; 173  : 
; 174  :     //  ECC calculated for every 512 bytes of data
; 175  :     UINT numberOfSectors = (sizeData/DATA_BLOCK_LEN);

  00010	e1a00442	 mov         r0, r2, asr #8
  00014	e0822ba0	 add         r2, r2, r0, lsr #23
  00018	e1b0b4c2	 movs        r11, r2, asr #9

; 176  : 
; 177  :     UNREFERENCED_PARAMETER(pGpmcRegs);
; 178  : 
; 179  : 
; 180  :     //----- 1. Check passed parameters -----
; 181  :     for(count=0; count < numberOfSectors; count++ )

  0001c	e3a09000	 mov         r9, #0
  00020	0a000038	 beq         |$LN15@Hamming_EC@4|
  00024	e59de030	 ldr         lr, [sp, #0x30]
  00028		 |$LL17@Hamming_EC@4|

; 182  :         {
; 183  :         //----- 2. XOR the existing ECC info with the new ECC info -----
; 184  :         for(i = 0; i < ECC_BUFF_LEN; i++)

  00028	e1a0400e	 mov         r4, lr
  0002c	e28d5000	 add         r5, sp, #0
  00030	e048700e	 sub         r7, r8, lr
  00034	e3a06003	 mov         r6, #3
  00038		 |$LL14@Hamming_EC@4|

; 185  :             {
; 186  :                 ECCxor[i] = *(pEccNew+i) ^ *(pEccOld+i);

  00038	e7d70004	 ldrb        r0, [r7, +r4]
  0003c	e4d42001	 ldrb        r2, [r4], #1
  00040	e2566001	 subs        r6, r6, #1
  00044	e0203002	 eor         r3, r0, r2
  00048	e4853004	 str         r3, [r5], #4
  0004c	1afffff9	 bne         |$LL14@Hamming_EC@4|

; 187  :             }
; 188  : 
; 189  :         //----- 3. Determine if this is a single-bit error that can be corrected -----
; 190  :         //         NOTE: The total number of bits equal to '1' in the XORed Hamming
; 191  :         //               Codes determines if the error can be corrected.
; 192  :         numOnes = 0;

  00050	e3a01000	 mov         r1, #0
  00054	e28d0000	 add         r0, sp, #0
  00058	e3a04003	 mov         r4, #3
  0005c		 |$LL11@Hamming_EC@4|

; 193  :         for(i = 0; i < ECC_BUFF_LEN; i++)
; 194  :             {
; 195  :             numOnes += CountNumberOfOnes(ECCxor[i]);

  0005c	e5903000	 ldr         r3, [r0]
  00060	e3a02000	 mov         r2, #0
  00064	e1b05003	 movs        r5, r3
  00068	0a000004	 beq         |$LN20@Hamming_EC@4|
  0006c		 |$LL21@Hamming_EC@4|
  0006c	e2453001	 sub         r3, r5, #1
  00070	e2822001	 add         r2, r2, #1
  00074	e0135005	 ands        r5, r3, r5
  00078	e20220ff	 and         r2, r2, #0xFF
  0007c	1afffffa	 bne         |$LL21@Hamming_EC@4|
  00080		 |$LN20@Hamming_EC@4|
  00080	e0811002	 add         r1, r1, r2
  00084	e2800004	 add         r0, r0, #4
  00088	e2544001	 subs        r4, r4, #1
  0008c	1afffff2	 bne         |$LL11@Hamming_EC@4|

; 196  :             }
; 197  : 
; 198  :         switch( numOnes )

  00090	e3510000	 cmp         r1, #0
  00094	4a000005	 bmi         |$LN28@Hamming_EC@4|
  00098	e3510001	 cmp         r1, #1
  0009c	da000012	 ble         |$LN1@Hamming_EC@4|
  000a0	e351000c	 cmp         r1, #0xC
  000a4	0a000003	 beq         |$LN33@Hamming_EC@4|
  000a8	e3510018	 cmp         r1, #0x18
  000ac	0a00000e	 beq         |$LN1@Hamming_EC@4|
  000b0		 |$LN28@Hamming_EC@4|

; 199  :             {
; 200  :             case NO_ERRORS:
; 201  :             case ECC_ERROR:
; 202  :             case ERASED_SECTOR:
; 203  :                 //  No error in the data
; 204  :                 bCorrect = FALSE;
; 205  :                 break;
; 206  :             
; 207  :             case CORRECTABLE_ERROR:
; 208  :                 //  Single bit error; correctable
; 209  :                 DEBUGMSG(ZONE_ERROR, (L" 1bit error is detected\r\n"));
; 210  :                 
; 211  :                 bCorrect = TRUE;
; 212  :                 break;
; 213  :             
; 214  :             default:
; 215  :                 //  More than 1 bit error
; 216  :                 DEBUGMSG(ZONE_ERROR, (L"more than 1bit errors are detected\r\n"));
; 217  :                 rc = FALSE;

  000b0	e3a00000	 mov         r0, #0

; 218  :                 goto cleanUp;

  000b4	ea000014	 b           |$cleanUp$43893|
  000b8		 |$LN33@Hamming_EC@4|

; 219  :                 break;
; 220  :             }
; 221  :             
; 222  :             
; 223  :         //----- 4. Compute the location of the single-bit error -----
; 224  :         if( bCorrect )
; 225  :             {
; 226  :             // Note: This is how the ECC is layed out in the ECC buffers.
; 227  :             // ECCxor[0] = P128e  P64e   P32e   P16e   P8e    P4e    P2e    P1e
; 228  :             // ECCxor[1] = P128o  P64o   P32o   P16o   P8o    P4o    P2o    P1o
; 229  :             // ECCxor[2] = P2048o P1024o P512o  P256o  P2048e P1024e P512e  P256e
; 230  : 
; 231  :             // Combine the 'o' xor'ed values to get row and column
; 232  :             byteLocation = ((ECCxor[2] & 0xF0) << 1) | (ECCxor[1] >> 3);

  000b8	e59d3008	 ldr         r3, [sp, #8]
  000bc	e59d2004	 ldr         r2, [sp, #4]

; 233  :             bitLocation = ECCxor[1] & 0x7;
; 234  : 
; 235  :             //----- 5. Correct the single-bit error (set the bit to its complementary value) -----
; 236  :             mask = (UCHAR) (0x01 << bitLocation);
; 237  :             if(pData[byteLocation] & mask)

  000c0	e3a04001	 mov         r4, #1
  000c4	e20330f0	 and         r3, r3, #0xF0
  000c8	e1a03083	 mov         r3, r3, lsl #1
  000cc	e2021007	 and         r1, r2, #7
  000d0	e18321a2	 orr         r2, r3, r2, lsr #3
  000d4	e7f2000a	 ldrb        r0, [r2, +r10]!
  000d8	e0003114	 and         r3, r0, r4, lsl r1
  000dc	e21330ff	 ands        r3, r3, #0xFF

; 255  :     
; 256  : cleanUp:
; 257  :     return rc;
; 258  : }

  000e0	11c03114	 bicne       r3, r0, r4, lsl r1
  000e4	01803114	 orreq       r3, r0, r4, lsl r1
  000e8	e5c23000	 strb        r3, [r2]
  000ec		 |$LN1@Hamming_EC@4|
  000ec	e2893001	 add         r3, r9, #1
  000f0	e20390ff	 and         r9, r3, #0xFF
  000f4	e159000b	 cmp         r9, r11
  000f8	e2888003	 add         r8, r8, #3
  000fc	e28ee003	 add         lr, lr, #3
  00100	e28aac02	 add         r10, r10, #2, 24
  00104	3affffc7	 bcc         |$LL17@Hamming_EC@4|
  00108		 |$LN15@Hamming_EC@4|

; 238  :                 {
; 239  :                 pData[byteLocation] &= ~mask;       // 0->1 error, set bit to 0
; 240  :                 }
; 241  :             else
; 242  :                 {
; 243  :                 pData[byteLocation] |= mask;        // 1->0 error, set bit to 1
; 244  :                 }
; 245  :             }
; 246  : 
; 247  :             
; 248  :         //  Advance pointers
; 249  :         pEccOld += ECC_BUFF_LEN;                // Pointer to the ECC on flash
; 250  :         pEccNew += ECC_BUFF_LEN;                // Pointer to the ECC the caller calculated
; 251  :         pData += DATA_BLOCK_LEN;
; 252  :         }
; 253  : 
; 254  :     rc = TRUE;

  00108	e3a00001	 mov         r0, #1
  0010c		 |$cleanUp$43893|

; 255  :     
; 256  : cleanUp:
; 257  :     return rc;
; 258  : }

  0010c	e28dd00c	 add         sp, sp, #0xC
  00110	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00114	e12fff1e	 bx          lr
  00118		 |$M44301|

			 ENDP  ; |Hamming_ECC_CorrectData|

	EXPORT	|??_C@_1EA@JNFKONCC@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAU?$AAn?$AAr?$AAe?$AAc?$AAo?$AAg?$AAn?$AAi?$AAz?$AAe?$AAd?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T44316| DCD	|$LN11@BCH4_ECC_I|
	DCD	0x40001e01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JNFKONCC@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAU?$AAn?$AAr?$AAe?$AAc?$AAo?$AAg?$AAn?$AAi?$AAz?$AAe?$AAd?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "o"
	DCB	0x0, "g", 0x0, "n", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, "["
	DCB	0x0, "%", 0x0, "d", 0x0, "]", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BCH4_ECC_Init| PROC

; 343  : {

  00000		 |$LN11@BCH4_ECC_I|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M44313|
  00004	e3520000	 cmp         r2, #0
  00008	e1a06000	 mov         r6, r0

; 344  :     UINT32 ecc_conf , ecc_size_conf=0;

  0000c	e3a05000	 mov         r5, #0

; 345  : 
; 346  :     ecc_conf = configMask | GPMC_ECC_CONFIG_BCH | GPMC_ECC_CONFIG_BCH4; 

  00010	e3814801	 orr         r4, r1, #1, 16

; 347  : 	
; 348  :     switch (xfer_mode) 

  00014	0a000008	 beq         |$LN3@BCH4_ECC_I|
  00018	e3520001	 cmp         r2, #1
  0001c	0a000003	 beq         |$LN2@BCH4_ECC_I|

; 361  : 		  
; 362  :         default:
; 363  :           RETAILMSG(1, (L"Error: Unrecognized Mode[%d]!\r\n", xfer_mode));

  00020	e59f004c	 ldr         r0, [pc, #0x4C]
  00024	e1a01002	 mov         r1, r2
  00028	eb000000	 bl          NKDbgPrintfW

; 364  :           break;

  0002c	ea000007	 b           |$LN4@BCH4_ECC_I|
  00030		 |$LN2@BCH4_ECC_I|
  00030	e3a03c06	 mov         r3, #6, 24
  00034	e3a05302	 mov         r5, #2, 6
  00038	ea000002	 b           |$LN8@BCH4_ECC_I|
  0003c		 |$LN3@BCH4_ECC_I|

; 349  :     {
; 350  :         case NAND_ECC_READ:
; 351  :           /* configration is for ECC at 2 bytes offset  */
; 352  :           ecc_size_conf = (0xD << 22) | (0x4 << 12);
; 353  :           ecc_conf |= ( (0x09 << 8) | GPMC_ECC_CONFIG_ENABLE);

  0003c	e3a0250d	 mov         r2, #0xD, 10
  00040	e3825901	 orr         r5, r2, #1, 18

; 354  :           break;
; 355  : 		  
; 356  :         case NAND_ECC_WRITE:
; 357  :           /* configration is for ECC at 2 bytes offset  */
; 358  :           ecc_size_conf = (0x20 << 22) | (0x00 << 12);
; 359  :           ecc_conf |= ((0x06 << 8) |GPMC_ECC_CONFIG_ENABLE);
; 360  :           break;

  00044	e3a03c09	 mov         r3, #9, 24
  00048		 |$LN8@BCH4_ECC_I|
  00048	e3833001	 orr         r3, r3, #1
  0004c	e1844003	 orr         r4, r4, r3
  00050		 |$LN4@BCH4_ECC_I|

; 365  :     }
; 366  : 
; 367  :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONTROL, GPMC_ECC_CONTROL_POINTER1);

  00050	e3a03001	 mov         r3, #1
  00054	e3a02c01	 mov         r2, #1, 24
  00058	e58631f8	 str         r3, [r6, #0x1F8]

; 368  :     //  Set ECC field sizes
; 369  :     OUTREG32(&pGpmcRegs->GPMC_ECC_SIZE_CONFIG, ecc_size_conf);
; 370  : 
; 371  :     //  Select result reg 1 and clear results
; 372  :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONTROL, GPMC_ECC_CONTROL_CLEAR | GPMC_ECC_CONTROL_POINTER1);

  0005c	e3823001	 orr         r3, r2, #1
  00060	e58651fc	 str         r5, [r6, #0x1FC]
  00064	e58631f8	 str         r3, [r6, #0x1F8]

; 373  : 
; 374  : 
; 375  :     //  Configure ECC calculator engine for NAND part
; 376  :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONFIG, ecc_conf );

  00068	e58641f4	 str         r4, [r6, #0x1F4]

; 377  : 
; 378  : }

  0006c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN12@BCH4_ECC_I|
  00074		 |$LN13@BCH4_ECC_I|
  00074	00000000	 DCD         |??_C@_1EA@JNFKONCC@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAU?$AAn?$AAr?$AAe?$AAc?$AAo?$AAg?$AAn?$AAi?$AAz?$AAe?$AAd?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  00078		 |$M44314|

			 ENDP  ; |BCH4_ECC_Init|


  00000			 AREA	 |.pdata|, PDATA
|$T44339| DCD	|$LN11@BCH4_ECC_C|
	DCD	0x40002801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BCH4_ECC_Calculate| PROC

; 387  : {

  00000		 |$LN11@BCH4_ECC_C|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M44336|
  00004	e1a07001	 mov         r7, r1

; 388  :     UINT8   eccIndex=0;

  00008	e3a01000	 mov         r1, #0

; 389  :     UINT32  regVal1, regVal2, i;
; 390  : 
; 391  :     if (size < ECC_BYTES_BCH4) return;

  0000c	e352001c	 cmp         r2, #0x1C
  00010	ba000020	 blt         |$LN1@BCH4_ECC_C|

; 392  : 	
; 393  :     // the ecc engine is setup encode 512 bytes at a time
; 394  :     // so reading a sectore of 2048 bytes will require 4 sets of encoded
; 395  :     // groups
; 396  :     
; 397  :     for (i=0; i < 4; i++)

  00014	e2806d09	 add         r6, r0, #9, 26
  00018	e3a08004	 mov         r8, #4
  0001c		 |$LL3@BCH4_ECC_C|

; 398  :     {
; 399  :         /* Reading HW ECC_BCH_Results
; 400  :          * 0x240-0x24C, 0x250-0x25C, 0x260-0x26C, 0x270-0x27C
; 401  :          */
; 402  :         regVal1 = INREG32((UINT32*)&pGpmcRegs->GPMC_BCH_RESULT[i].GPMC_BCH_RESULT0);

  0001c	e5965000	 ldr         r5, [r6]

; 403  :         regVal2 = INREG32((UINT32*)&pGpmcRegs->GPMC_BCH_RESULT[i].GPMC_BCH_RESULT1);

  00020	e596e004	 ldr         lr, [r6, #4]

; 404  :         
; 405  : 
; 406  :         pEcc[eccIndex++] =  (BYTE)((regVal2 >> 16) & 0xFF);

  00024	e2812001	 add         r2, r1, #1

; 407  :         pEcc[eccIndex++] = (BYTE)((regVal2 >> 8) & 0xFF);
; 408  :         pEcc[eccIndex++] = (BYTE)(regVal2 & 0xFF);
; 409  :         pEcc[eccIndex++] = (BYTE)((regVal1 >> 24) & 0xFF);

  00028	e20200ff	 and         r0, r2, #0xFF
  0002c	e1a0382e	 mov         r3, lr, lsr #16
  00030	e7c13007	 strb        r3, [r1, +r7]
  00034	e1a0342e	 mov         r3, lr, lsr #8
  00038	e2802001	 add         r2, r0, #1
  0003c	e7c03007	 strb        r3, [r0, +r7]
  00040	e20230ff	 and         r3, r2, #0xFF
  00044	e2832001	 add         r2, r3, #1
  00048	e7c3e007	 strb        lr, [r3, +r7]
  0004c	e20230ff	 and         r3, r2, #0xFF
  00050	e2832001	 add         r2, r3, #1
  00054	e1a04c25	 mov         r4, r5, lsr #24
  00058	e20210ff	 and         r1, r2, #0xFF
  0005c	e7c34007	 strb        r4, [r3, +r7]

; 410  :         pEcc[eccIndex++] = (BYTE)((regVal1 >> 16) & 0xFF);

  00060	e1a03825	 mov         r3, r5, lsr #16
  00064	e2812001	 add         r2, r1, #1
  00068	e7c13007	 strb        r3, [r1, +r7]
  0006c	e20210ff	 and         r1, r2, #0xFF

; 411  :         pEcc[eccIndex++] = (BYTE)((regVal1 >> 8) & 0xFF);

  00070	e1a03425	 mov         r3, r5, lsr #8
  00074	e2812001	 add         r2, r1, #1
  00078	e7c13007	 strb        r3, [r1, +r7]
  0007c	e20230ff	 and         r3, r2, #0xFF

; 412  :         pEcc[eccIndex++] = (BYTE)(regVal1 & 0xFF);

  00080	e2832001	 add         r2, r3, #1
  00084	e20210ff	 and         r1, r2, #0xFF
  00088	e7c35007	 strb        r5, [r3, +r7]
  0008c	e2866010	 add         r6, r6, #0x10
  00090	e2588001	 subs        r8, r8, #1
  00094	1affffe0	 bne         |$LL3@BCH4_ECC_C|
  00098		 |$LN1@BCH4_ECC_C|

; 413  : 
; 414  :     }
; 415  : 
; 416  :     return;
; 417  : }

  00098	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$M44337|

			 ENDP  ; |BCH4_ECC_Calculate|


  00000			 AREA	 |.pdata|, PDATA
|$T44347| DCD	|$LN5@BCH4_ECC_R|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BCH4_ECC_Reset| PROC

; 424  : {

  00000		 |$LN5@BCH4_ECC_R|
  00000		 |$M44344|

; 425  :     //  Disable ECC engine
; 426  :     CLRREG32(&pGpmcRegs->GPMC_ECC_CONFIG, GPMC_ECC_CONFIG_ENABLE);

  00000	e59031f4	 ldr         r3, [r0, #0x1F4]
  00004	e3c33001	 bic         r3, r3, #1
  00008	e58031f4	 str         r3, [r0, #0x1F4]

; 427  : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M44345|

			 ENDP  ; |BCH4_ECC_Reset|


  00000			 AREA	 |.pdata|, PDATA
|$T44360| DCD	|$LN11@BCH8_ECC_I|
	DCD	0x40001e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BCH8_ECC_Init| PROC

; 482  : {

  00000		 |$LN11@BCH8_ECC_I|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M44357|
  00004	e3520000	 cmp         r2, #0
  00008	e1a06000	 mov         r6, r0

; 483  :     UINT32 ecc_conf , ecc_size_conf=0;

  0000c	e3a05000	 mov         r5, #0

; 484  : 
; 485  :     ecc_conf = configMask | GPMC_ECC_CONFIG_BCH | GPMC_ECC_CONFIG_BCH8; 

  00010	e3814a11	 orr         r4, r1, #0x11, 20

; 486  : 	
; 487  :     switch (xfer_mode) 

  00014	0a000008	 beq         |$LN3@BCH8_ECC_I|
  00018	e3520001	 cmp         r2, #1
  0001c	0a000003	 beq         |$LN2@BCH8_ECC_I|

; 500  : 		  
; 501  :         default:
; 502  :           RETAILMSG(1, (L"Error: Unrecognized Mode[%d]!\r\n", xfer_mode));

  00020	e59f004c	 ldr         r0, [pc, #0x4C]
  00024	e1a01002	 mov         r1, r2
  00028	eb000000	 bl          NKDbgPrintfW

; 503  :           break;

  0002c	ea000007	 b           |$LN4@BCH8_ECC_I|
  00030		 |$LN2@BCH8_ECC_I|
  00030	e3a03c06	 mov         r3, #6, 24
  00034	e3a05302	 mov         r5, #2, 6
  00038	ea000002	 b           |$LN8@BCH8_ECC_I|
  0003c		 |$LN3@BCH8_ECC_I|

; 488  :     {
; 489  :         case NAND_ECC_READ:
; 490  :           /* configration is for ECC at 2 bytes offset  */
; 491  :           ecc_size_conf = (0x1A << 22) | (0x4 << 12);  
; 492  :           ecc_conf |= ((0x04 << 8)  | (0x1));

  0003c	e3a0251a	 mov         r2, #0x1A, 10
  00040	e3825901	 orr         r5, r2, #1, 18

; 493  :           break;
; 494  : 		  
; 495  :         case NAND_ECC_WRITE:
; 496  :           /* configration is for ECC at 2 bytes offset  */
; 497  :           ecc_size_conf = (0x20 << 22) | (0x00 << 12);
; 498  :           ecc_conf |= ((0x06 << 8)  |(0x1));
; 499  :           break;

  00044	e3a03b01	 mov         r3, #1, 22
  00048		 |$LN8@BCH8_ECC_I|
  00048	e3833001	 orr         r3, r3, #1
  0004c	e1844003	 orr         r4, r4, r3
  00050		 |$LN4@BCH8_ECC_I|

; 504  :     }
; 505  : 
; 506  : 
; 507  :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONTROL, GPMC_ECC_CONTROL_POINTER1);

  00050	e3a03001	 mov         r3, #1
  00054	e58631f8	 str         r3, [r6, #0x1F8]

; 508  :     //  Set ECC field sizes
; 509  :     OUTREG32(&pGpmcRegs->GPMC_ECC_SIZE_CONFIG, ecc_size_conf);

  00058	e3a03c01	 mov         r3, #1, 24

; 510  : 
; 511  :     //  Configure ECC calculator engine for NAND part
; 512  :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONFIG, ecc_conf );
; 513  : 
; 514  :     //  Select result reg 1 and clear results
; 515  :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONTROL, GPMC_ECC_CONTROL_CLEAR | GPMC_ECC_CONTROL_POINTER1);

  0005c	e3833001	 orr         r3, r3, #1
  00060	e58651fc	 str         r5, [r6, #0x1FC]
  00064	e58641f4	 str         r4, [r6, #0x1F4]
  00068	e58631f8	 str         r3, [r6, #0x1F8]

; 516  : }

  0006c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN12@BCH8_ECC_I|
  00074		 |$LN13@BCH8_ECC_I|
  00074	00000000	 DCD         |??_C@_1EA@JNFKONCC@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAU?$AAn?$AAr?$AAe?$AAc?$AAo?$AAg?$AAn?$AAi?$AAz?$AAe?$AAd?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  00078		 |$M44358|

			 ENDP  ; |BCH8_ECC_Init|


  00000			 AREA	 |.pdata|, PDATA
|$T44391| DCD	|$LN11@BCH8_ECC_C|
	DCD	0x40004001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BCH8_ECC_Calculate| PROC

; 526  : {

  00000		 |$LN11@BCH8_ECC_C|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M44388|
  00004	e1a06001	 mov         r6, r1

; 527  :     UINT8   eccIndex=0;

  00008	e3a01000	 mov         r1, #0

; 528  :     UINT32  regVal1, regVal2, regVal3, regVal4, i;
; 529  : 
; 530  :     if(size < ECC_BYTES_BCH8) return;

  0000c	e3520034	 cmp         r2, #0x34
  00010	ba000038	 blt         |$LN1@BCH8_ECC_C|

; 531  : 	
; 532  :     // the ecc engine is setup encode 512 bytes at a time
; 533  :     // so reading a sectore of 2048 bytes will require 4 sets of encoded
; 534  :     // groups
; 535  :     
; 536  :     for (i=0;i<4;i++)

  00014	e2807d09	 add         r7, r0, #9, 26
  00018	e3a08004	 mov         r8, #4
  0001c		 |$LL3@BCH8_ECC_C|

; 537  :     {
; 538  :         /* Reading HW ECC_BCH_Results
; 539  :          * 0x240-0x24C, 0x250-0x25C, 0x260-0x26C, 0x270-0x27C
; 540  :          */
; 541  :         regVal1 = INREG32((UINT32*)&pGpmcRegs->GPMC_BCH_RESULT[i].GPMC_BCH_RESULT0);

  0001c	e5975000	 ldr         r5, [r7]

; 542  :         regVal2 = INREG32((UINT32*)&pGpmcRegs->GPMC_BCH_RESULT[i].GPMC_BCH_RESULT1);
; 543  :         regVal3 = INREG32((UINT32*)&pGpmcRegs->GPMC_BCH_RESULT[i].GPMC_BCH_RESULT2);

  00020	e5974004	 ldr         r4, [r7, #4]
  00024	e597e008	 ldr         lr, [r7, #8]

; 544  :         regVal4 = INREG32((UINT32*)&pGpmcRegs->GPMC_BCH_RESULT[i].GPMC_BCH_RESULT3);

  00028	e597300c	 ldr         r3, [r7, #0xC]

; 545  : 
; 546  :         pEcc[eccIndex++]  = (BYTE)(regVal4 & 0xFF);

  0002c	e2812001	 add         r2, r1, #1

; 547  :         pEcc[eccIndex++]  = (BYTE)((regVal3 >> 24) & 0xFF);

  00030	e1a00c2e	 mov         r0, lr, lsr #24
  00034	e7c13006	 strb        r3, [r1, +r6]
  00038	e20230ff	 and         r3, r2, #0xFF
  0003c	e2832001	 add         r2, r3, #1
  00040	e7c30006	 strb        r0, [r3, +r6]
  00044	e20200ff	 and         r0, r2, #0xFF

; 548  :         pEcc[eccIndex++]  = (BYTE)((regVal3 >> 16) & 0xFF);

  00048	e2802001	 add         r2, r0, #1
  0004c	e1a0382e	 mov         r3, lr, lsr #16
  00050	e20210ff	 and         r1, r2, #0xFF
  00054	e7c03006	 strb        r3, [r0, +r6]

; 549  :         pEcc[eccIndex++]  = (BYTE)((regVal3 >> 8) & 0xFF);

  00058	e1a0342e	 mov         r3, lr, lsr #8
  0005c	e2812001	 add         r2, r1, #1
  00060	e7c13006	 strb        r3, [r1, +r6]
  00064	e20230ff	 and         r3, r2, #0xFF

; 550  :         pEcc[eccIndex++]  = (BYTE)(regVal3 & 0xFF);

  00068	e2832001	 add         r2, r3, #1
  0006c	e20210ff	 and         r1, r2, #0xFF
  00070	e7c3e006	 strb        lr, [r3, +r6]

; 551  :         pEcc[eccIndex++]  = (BYTE)((regVal2 >> 24) & 0xFF);

  00074	e1a03c24	 mov         r3, r4, lsr #24
  00078	e2812001	 add         r2, r1, #1
  0007c	e7c13006	 strb        r3, [r1, +r6]
  00080	e20210ff	 and         r1, r2, #0xFF

; 552  :    
; 553  :         pEcc[eccIndex++]  = (BYTE)((regVal2 >> 16) & 0xFF);

  00084	e1a03824	 mov         r3, r4, lsr #16
  00088	e2812001	 add         r2, r1, #1
  0008c	e7c13006	 strb        r3, [r1, +r6]
  00090	e20210ff	 and         r1, r2, #0xFF

; 554  :         pEcc[eccIndex++]  = (BYTE)((regVal2 >> 8) & 0xFF);

  00094	e1a03424	 mov         r3, r4, lsr #8
  00098	e2812001	 add         r2, r1, #1
  0009c	e7c13006	 strb        r3, [r1, +r6]
  000a0	e20230ff	 and         r3, r2, #0xFF

; 555  :         pEcc[eccIndex++]  = (BYTE)(regVal2 & 0xFF);

  000a4	e2832001	 add         r2, r3, #1
  000a8	e20210ff	 and         r1, r2, #0xFF
  000ac	e7c34006	 strb        r4, [r3, +r6]

; 556  :         pEcc[eccIndex++]  = (BYTE)((regVal1 >> 24) & 0xFF);

  000b0	e1a03c25	 mov         r3, r5, lsr #24
  000b4	e2812001	 add         r2, r1, #1
  000b8	e7c13006	 strb        r3, [r1, +r6]
  000bc	e20210ff	 and         r1, r2, #0xFF

; 557  :         pEcc[eccIndex++]  = (BYTE)((regVal1 >> 16) & 0xFF);

  000c0	e1a03825	 mov         r3, r5, lsr #16
  000c4	e2812001	 add         r2, r1, #1
  000c8	e7c13006	 strb        r3, [r1, +r6]
  000cc	e20210ff	 and         r1, r2, #0xFF

; 558  :         pEcc[eccIndex++]  = (BYTE)((regVal1 >> 8) & 0xFF);

  000d0	e1a03425	 mov         r3, r5, lsr #8
  000d4	e2812001	 add         r2, r1, #1
  000d8	e7c13006	 strb        r3, [r1, +r6]
  000dc	e20230ff	 and         r3, r2, #0xFF

; 559  :         pEcc[eccIndex++]  = (BYTE)(regVal1 & 0xFF);

  000e0	e2832001	 add         r2, r3, #1
  000e4	e20210ff	 and         r1, r2, #0xFF
  000e8	e7c35006	 strb        r5, [r3, +r6]
  000ec	e2877010	 add         r7, r7, #0x10
  000f0	e2588001	 subs        r8, r8, #1
  000f4	1affffc8	 bne         |$LL3@BCH8_ECC_C|
  000f8		 |$LN1@BCH8_ECC_C|

; 560  : 
; 561  :     }
; 562  : 
; 563  :     return;
; 564  : }

  000f8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000fc	e12fff1e	 bx          lr
  00100		 |$M44389|

			 ENDP  ; |BCH8_ECC_Calculate|


  00000			 AREA	 |.pdata|, PDATA
|$T44399| DCD	|$LN5@BCH8_ECC_R|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BCH8_ECC_Reset| PROC

; 571  : {

  00000		 |$LN5@BCH8_ECC_R|
  00000		 |$M44396|

; 572  :     //  Disable ECC engine
; 573  :     CLRREG32(&pGpmcRegs->GPMC_ECC_CONFIG, GPMC_ECC_CONFIG_ENABLE);

  00000	e59031f4	 ldr         r3, [r0, #0x1F4]
  00004	e3c33001	 bic         r3, r3, #1
  00008	e58031f4	 str         r3, [r0, #0x1F4]

; 574  : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M44397|

			 ENDP  ; |BCH8_ECC_Reset|

	EXPORT	|ECC_Init|
	EXPORT	|??_C@_1EI@LMGHLBK@?$AAE?$AAC?$AAC?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAu?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAe?$AAc?$AAc?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?3?$AA?$CF@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44413| DCD	|$LN15@ECC_Init|
	DCD	0x40002701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@LMGHLBK@?$AAE?$AAC?$AAC?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAu?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAe?$AAc?$AAc?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?3?$AA?$CF@| DCB "E"
	DCB	0x0, "C", 0x0, "C", 0x0, "_", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, ":", 0x0, " ", 0x0, "u", 0x0, "n", 0x0, "s"
	DCB	0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "e", 0x0, "c", 0x0, "c"
	DCB	0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ECC_Init| PROC

; 648  : {

  00000		 |$LN15@ECC_Init|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M44410|
  00004	e1a05003	 mov         r5, r3
  00008	e3520000	 cmp         r2, #0
  0000c	e1a06001	 mov         r6, r1
  00010	e1a07000	 mov         r7, r0

; 649  :     /* Initialize function table then call ecc_init */
; 650  :     switch(ECC_mode)

  00014	e59f4078	 ldr         r4, [pc, #0x78]
  00018	0a000010	 beq         |$LN5@ECC_Init|
  0001c	e3520001	 cmp         r2, #1
  00020	0a00000b	 beq         |$LN4@ECC_Init|
  00024	e3520002	 cmp         r2, #2
  00028	0a000004	 beq         |$LN3@ECC_Init|

; 663  : 
; 664  :         default:
; 665  :            RETAILMSG(TRUE, (L"ECC_Init: unsupported ecc mode:%d\r\n", ECC_mode));

  0002c	e59f0064	 ldr         r0, [pc, #0x64]
  00030	e1a01002	 mov         r1, r2
  00034	eb000000	 bl          NKDbgPrintfW

; 666  : 	    break;

  00038	e5942000	 ldr         r2, [r4]
  0003c	ea000009	 b           |$LN6@ECC_Init|
  00040		 |$LN3@ECC_Init|

; 659  : 
; 660  :         case BCH8bit:
; 661  :             gpmc_ecc_func = &gpmc_ecc_bch_8bits;

  00040	e59f3048	 ldr         r3, [pc, #0x48]
  00044	e2832020	 add         r2, r3, #0x20
  00048		 |$LN12@ECC_Init|
  00048	e59f4044	 ldr         r4, [pc, #0x44]
  0004c	e5842000	 str         r2, [r4]

; 662  : 	    break;

  00050	ea000006	 b           |$LN10@ECC_Init|
  00054		 |$LN4@ECC_Init|

; 654  : 	    break;
; 655  : 
; 656  :         case BCH4bit:
; 657  :             gpmc_ecc_func = &gpmc_ecc_bch_4bits;

  00054	e59f3034	 ldr         r3, [pc, #0x34]
  00058	e2832010	 add         r2, r3, #0x10

; 658  : 	    break;

  0005c	eafffff9	 b           |$LN12@ECC_Init|
  00060		 |$LN5@ECC_Init|

; 651  :     {
; 652  :         case Hamming1bit:
; 653  :             gpmc_ecc_func = &gpmc_ecc_hamming_code;

  00060	e59f2028	 ldr         r2, [pc, #0x28]
  00064	e5842000	 str         r2, [r4]
  00068		 |$LN6@ECC_Init|

; 667  :     }
; 668  :     if(gpmc_ecc_func != NULL)

  00068	e3520000	 cmp         r2, #0
  0006c	0a000005	 beq         |$LN1@ECC_Init|
  00070		 |$LN10@ECC_Init|

; 669  :         gpmc_ecc_func->ecc_init(pGpmcRegs, configMask, xfer_mode);

  00070	e5923000	 ldr         r3, [r2]
  00074	e1a02005	 mov         r2, r5
  00078	e1a01006	 mov         r1, r6
  0007c	e1a00007	 mov         r0, r7
  00080	e1a0e00f	 mov         lr, pc
  00084	e12fff13	 bx          r3
  00088		 |$LN1@ECC_Init|

; 670  : }

  00088	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN16@ECC_Init|
  00090		 |$LN17@ECC_Init|
  00090	00000000	 DCD         |gpmc_ecc_hamming_code|
  00094		 |$LN18@ECC_Init|
  00094	00000000	 DCD         |gpmc_ecc_func|
  00098		 |$LN19@ECC_Init|
  00098	00000000	 DCD         |??_C@_1EI@LMGHLBK@?$AAE?$AAC?$AAC?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAu?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAe?$AAc?$AAc?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?3?$AA?$CF@|
  0009c		 |$M44411|

			 ENDP  ; |ECC_Init|

	EXPORT	|ECC_Result|

  00000			 AREA	 |.pdata|, PDATA
|$T44427| DCD	|$LN6@ECC_Result|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ECC_Result| PROC

; 679  : {

  00000		 |$LN6@ECC_Result|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M44424|

; 680  :     if(gpmc_ecc_func != NULL)

  00004	e59f3018	 ldr         r3, [pc, #0x18]
  00008	e5933000	 ldr         r3, [r3]
  0000c	e3530000	 cmp         r3, #0

; 681  :         gpmc_ecc_func->ecc_calculate(pGpmcRegs, pEcc, size);

  00010	15933004	 ldrne       r3, [r3, #4]
  00014	11a0e00f	 movne       lr, pc
  00018	112fff13	 bxne        r3

; 682  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$LN7@ECC_Result|
  00024		 |$LN8@ECC_Result|
  00024	00000000	 DCD         |gpmc_ecc_func|
  00028		 |$M44425|

			 ENDP  ; |ECC_Result|

	EXPORT	|ECC_Reset|

  00000			 AREA	 |.pdata|, PDATA
|$T44437| DCD	|$LN6@ECC_Reset|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ECC_Reset| PROC

; 689  : {

  00000		 |$LN6@ECC_Reset|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M44434|

; 690  :     if(gpmc_ecc_func != NULL)

  00004	e59f3018	 ldr         r3, [pc, #0x18]
  00008	e5933000	 ldr         r3, [r3]
  0000c	e3530000	 cmp         r3, #0

; 691  :         gpmc_ecc_func->ecc_reset(pGpmcRegs);

  00010	15933008	 ldrne       r3, [r3, #8]
  00014	11a0e00f	 movne       lr, pc
  00018	112fff13	 bxne        r3

; 692  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$LN7@ECC_Reset|
  00024		 |$LN8@ECC_Reset|
  00024	00000000	 DCD         |gpmc_ecc_func|
  00028		 |$M44435|

			 ENDP  ; |ECC_Reset|

	EXPORT	|ECC_CorrectData|

  00000			 AREA	 |.pdata|, PDATA
|$T44453| DCD	|$LN6@ECC_Correc|
	DCD	0x40001102
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ECC_CorrectData| PROC

; 715  : {

  00000		 |$LN6@ECC_Correc|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M44450|
  00008	e1a05000	 mov         r5, r0

; 716  :     BOOL rc=FALSE;
; 717  : 	
; 718  :     if(gpmc_ecc_func != NULL)

  0000c	e59fe02c	 ldr         lr, [pc, #0x2C]
  00010	e3a00000	 mov         r0, #0
  00014	e59e4000	 ldr         r4, [lr]
  00018	e3540000	 cmp         r4, #0

; 719  :         rc = gpmc_ecc_func->ecc_correct_data(pGpmcRegs, pData, sizeData, pEccOld, pEccNew);

  0001c	159de010	 ldrne       lr, [sp, #0x10]
  00020	1594400c	 ldrne       r4, [r4, #0xC]
  00024	11a00005	 movne       r0, r5
  00028	158de000	 strne       lr, [sp]
  0002c	11a0e00f	 movne       lr, pc
  00030	112fff14	 bxne        r4

; 720  : 	
; 721  :     return rc;
; 722  : }

  00034	e28dd004	 add         sp, sp, #4
  00038	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN7@ECC_Correc|
  00040		 |$LN8@ECC_Correc|
  00040	00000000	 DCD         |gpmc_ecc_func|
  00044		 |$M44451|

			 ENDP  ; |ECC_CorrectData|

	IMPORT	|decode_bch|

  00000			 AREA	 |.pdata|, PDATA
|$T44496| DCD	|$LN44@BCH_correc|
	DCD	0x40005702
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BCH_correct_data| PROC

; 264  : {

  00000		 |$LN44@BCH_correc|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd024	 sub         sp, sp, #0x24
  00008		 |$M44493|
  00008	e1a05003	 mov         r5, r3
  0000c	e1a08002	 mov         r8, r2
  00010	e1a09001	 mov         r9, r1

; 265  :     int i=0, blockCnt=4, j, eccCheck, count, corrected=0;
; 266  :     int eccsize = (correct_bits == 8) ? ECC_BYTES_BCH8/4 : ECC_BYTES_BCH4/4;

  00014	e59db048	 ldr         r11, [sp, #0x48]
  00018	e3a07000	 mov         r7, #0

; 267  :     int mode = (correct_bits == 8) ? 1 : 0;
; 268  :     unsigned int err_loc[8];
; 269  : 
; 270  :     if(correct_bits == 8)
; 271  :         BCH8_ECC_Calculate(pGpmcRegs, calc_ecc, ECC_BYTES_BCH8);	

  0001c	e1a01005	 mov         r1, r5
  00020	e35b0008	 cmp         r11, #8
  00024	1a000005	 bne         |$LN24@BCH_correc|
  00028	e3a0400d	 mov         r4, #0xD
  0002c	e3a02034	 mov         r2, #0x34
  00030	e58d4000	 str         r4, [sp]
  00034	e3a0a001	 mov         r10, #1
  00038	eb000000	 bl          BCH8_ECC_Calculate

; 272  :     else

  0003c	ea000004	 b           |$LN20@BCH_correc|
  00040		 |$LN24@BCH_correc|

; 265  :     int i=0, blockCnt=4, j, eccCheck, count, corrected=0;
; 266  :     int eccsize = (correct_bits == 8) ? ECC_BYTES_BCH8/4 : ECC_BYTES_BCH4/4;

  00040	e3a04007	 mov         r4, #7

; 273  :         BCH4_ECC_Calculate(pGpmcRegs, calc_ecc, ECC_BYTES_BCH4);	

  00044	e3a0201c	 mov         r2, #0x1C
  00048	e58d4000	 str         r4, [sp]
  0004c	e3a0a000	 mov         r10, #0
  00050	eb000000	 bl          BCH4_ECC_Calculate
  00054		 |$LN20@BCH_correc|

; 274  : 
; 275  :     for (i = 0; i < blockCnt; i++) 

  00054	e3a06000	 mov         r6, #0
  00058		 |$LL19@BCH_correc|

; 276  :     {
; 277  :         /* check if any ecc error */
; 278  :         eccCheck = 0;

  00058	e3a01000	 mov         r1, #0

; 279  :         for (j = 0; (j < eccsize) && (eccCheck == 0); j++)

  0005c	e3a02000	 mov         r2, #0
  00060	e3540000	 cmp         r4, #0
  00064	da000030	 ble         |$LN2@BCH_correc|
  00068		 |$LL16@BCH_correc|
  00068	e3510000	 cmp         r1, #0
  0006c	1a000005	 bne         |$LN14@BCH_correc|

; 280  :     	 {
; 281  :             if (calc_ecc[j] != 0)

  00070	e7d23005	 ldrb        r3, [r2, +r5]
  00074	e2822001	 add         r2, r2, #1
  00078	e3530000	 cmp         r3, #0

; 282  :                 eccCheck = 1;

  0007c	13a01001	 movne       r1, #1
  00080	e1520004	 cmp         r2, r4
  00084	bafffff7	 blt         |$LL16@BCH_correc|
  00088		 |$LN14@BCH_correc|

; 283  :     	 }
; 284  :         if (eccCheck == 1) 

  00088	e3510001	 cmp         r1, #1
  0008c	1a000026	 bne         |$LN2@BCH_correc|

; 285  :         {
; 286  :             eccCheck = 0;

  00090	e3a01000	 mov         r1, #0

; 287  :             for (j = 0; (j < eccsize) && (eccCheck == 0); j++)

  00094	e3a02000	 mov         r2, #0
  00098		 |$LL11@BCH_correc|
  00098	e3510000	 cmp         r1, #0
  0009c	1a000005	 bne         |$LN9@BCH_correc|

; 288  :                 if (read_ecc[j] != 0xFF)

  000a0	e7d23008	 ldrb        r3, [r2, +r8]
  000a4	e2822001	 add         r2, r2, #1
  000a8	e35300ff	 cmp         r3, #0xFF

; 289  :                     eccCheck = 1;

  000ac	13a01001	 movne       r1, #1
  000b0	e1520004	 cmp         r2, r4
  000b4	bafffff7	 blt         |$LL11@BCH_correc|
  000b8		 |$LN9@BCH_correc|

; 290  :         }
; 291  :         if (eccCheck == 1) 

  000b8	e3510001	 cmp         r1, #1
  000bc	1a00001a	 bne         |$LN2@BCH_correc|

; 292  :         {
; 293  :             count = decode_bch(mode, calc_ecc, err_loc);

  000c0	e28d2004	 add         r2, sp, #4
  000c4	e1a01005	 mov         r1, r5
  000c8	e1a0000a	 mov         r0, r10
  000cc	eb000000	 bl          decode_bch

; 294  :             DEBUGMSG(ZONE_ERROR, (L"...bch correct(%d 512 byte) done, count=%d\r\n", i+1, count));
; 295  :             if (count > correct_bits)

  000d0	e150000b	 cmp         r0, r11
  000d4	ca00001e	 bgt         |$LN32@BCH_correc|

; 297  : 
; 298  :             /* When the error bits are in ECC bytes itself, decode_bch() returns -1, this condition will be
; 299  :                  ignored until we get improved BCH decoder  */
; 300  : 	     if ((count < 0) && (count !=-1))

  000d8	e3500000	 cmp         r0, #0
  000dc	5a000002	 bpl         |$LN41@BCH_correc|
  000e0	e3700001	 cmn         r0, #1
  000e4	1a000017	 bne         |$LN22@BCH_correc|

; 301  :                 return count;
; 302  :             
; 303  :             for (j = 0; j < count; j++) 

  000e8	e3500000	 cmp         r0, #0
  000ec		 |$LN41@BCH_correc|
  000ec	da00000e	 ble         |$LN2@BCH_correc|
  000f0	e28d1004	 add         r1, sp, #4
  000f4	e0877000	 add         r7, r7, r0
  000f8	e3a04001	 mov         r4, #1
  000fc		 |$LL4@BCH_correc|

; 304  :             {
; 305  :                 DEBUGMSG(ZONE_ERROR, (L"err_loc=%x\r\n", err_loc[j]));
; 306  : 		  if((err_loc[j] / 8)<DATA_BLOCK_LEN)		

  000fc	e5913000	 ldr         r3, [r1]

; 307  :                     dat[err_loc[j] / 8] ^=  (0x01 << (err_loc[j] % 8));

  00100	e2811004	 add         r1, r1, #4
  00104	e1a0e1a3	 mov         lr, r3, lsr #3
  00108	e35e0c02	 cmp         lr, #2, 24
  0010c	37fe2009	 ldrccb      r2, [lr, +r9]!
  00110	32033007	 andcc       r3, r3, #7
  00114	30223314	 eorcc       r3, r2, r4, lsl r3
  00118	35ce3000	 strccb      r3, [lr]
  0011c	e2500001	 subs        r0, r0, #1
  00120	1afffff5	 bne         |$LL4@BCH_correc|
  00124	e59d4000	 ldr         r4, [sp]
  00128	e59db048	 ldr         r11, [sp, #0x48]
  0012c		 |$LN2@BCH_correc|
  0012c	e2866001	 add         r6, r6, #1
  00130	e3560004	 cmp         r6, #4

; 308  :                 corrected++;
; 309  :             }
; 310  :         }
; 311  :         
; 312  :         calc_ecc = calc_ecc + eccsize;

  00134	e0855004	 add         r5, r5, r4

; 313  :         read_ecc = read_ecc + eccsize;

  00138	e0888004	 add         r8, r8, r4

; 314  :         dat += DATA_BLOCK_LEN;

  0013c	e2899c02	 add         r9, r9, #2, 24
  00140	baffffc4	 blt         |$LL19@BCH_correc|

; 315  :     }
; 316  :     
; 317  :     return corrected;

  00144	e1a00007	 mov         r0, r7
  00148		 |$LN22@BCH_correc|

; 318  : }

  00148	e28dd024	 add         sp, sp, #0x24
  0014c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00150	e12fff1e	 bx          lr
  00154		 |$LN32@BCH_correc|

; 296  :                 return -1;

  00154	e3e00000	 mvn         r0, #0
  00158	eafffffa	 b           |$LN22@BCH_correc|
  0015c		 |$M44494|

			 ENDP  ; |BCH_correct_data|


  00000			 AREA	 |.pdata|, PDATA
|$T44510| DCD	|$LN7@BCH4_ECC_C@2|
	DCD	0x40000d02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BCH4_ECC_CorrectData| PROC

; 450  : {

  00000		 |$LN7@BCH4_ECC_C@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M44507|
  00008	e1a02003	 mov         r2, r3

; 451  : 
; 452  :     int ret;
; 453  :     UNREFERENCED_PARAMETER(sizeData); 
; 454  : 
; 455  :     ret = BCH_correct_data(pGpmcRegs, pData, (BYTE *)pEccOld, (BYTE *)pEccNew , 4);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e3a0e004	 mov         lr, #4
  00014	e58de000	 str         lr, [sp]
  00018	eb000000	 bl          BCH_correct_data
  0001c	e3500000	 cmp         r0, #0

; 456  : 
; 457  :     return (ret>=0? TRUE : FALSE);

  00020	53a00001	 movpl       r0, #1
  00024	43a00000	 movmi       r0, #0

; 458  : 
; 459  : }

  00028	e28dd004	 add         sp, sp, #4
  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$M44508|

			 ENDP  ; |BCH4_ECC_CorrectData|


  00000			 AREA	 |.pdata|, PDATA
|$T44524| DCD	|$LN7@BCH8_ECC_C@2|
	DCD	0x40000d02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BCH8_ECC_CorrectData| PROC

; 597  : {

  00000		 |$LN7@BCH8_ECC_C@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M44521|
  00008	e1a02003	 mov         r2, r3

; 598  :     int ret;
; 599  :     BYTE *read_ecc, *cal_ecc;
; 600  :     
; 601  : 	
; 602  :     UNREFERENCED_PARAMETER(sizeData); 
; 603  : 
; 604  :     read_ecc = (BYTE *)pEccOld;
; 605  :     cal_ecc = (BYTE *)pEccNew; 
; 606  : 
; 607  :     ret = BCH_correct_data(pGpmcRegs, pData, read_ecc, cal_ecc, 8);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e3a0e008	 mov         lr, #8
  00014	e58de000	 str         lr, [sp]
  00018	eb000000	 bl          BCH_correct_data
  0001c	e3500000	 cmp         r0, #0

; 608  : 
; 609  :     return (ret>=0? TRUE : FALSE);

  00020	53a00001	 movpl       r0, #1
  00024	43a00000	 movmi       r0, #0

; 610  : }

  00028	e28dd004	 add         sp, sp, #4
  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$M44522|

			 ENDP  ; |BCH8_ECC_CorrectData|

	END
