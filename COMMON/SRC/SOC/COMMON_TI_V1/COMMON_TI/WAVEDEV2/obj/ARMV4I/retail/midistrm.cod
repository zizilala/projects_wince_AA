; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\WAVEDEV2\midistrm.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?ms_PitchTable@CMidiStream@@0PAKA| [ DATA ] ; CMidiStream::ms_PitchTable
	EXPORT	|?ms_BasePitchTable@CMidiStream@@0QBKB| [ DATA ] ; CMidiStream::ms_BasePitchTable
	EXPORT	|?ms_PitchTableInverseSampleRate@CMidiStream@@0KA| [ DATA ] ; CMidiStream::ms_PitchTableInverseSampleRate

  00000			 AREA	 |.bss|, NOINIT
|?ms_PitchTable@CMidiStream@@0PAKA| % 0x30		; CMidiStream::ms_PitchTable
|?ms_PitchTableInverseSampleRate@CMidiStream@@0KA| % 0x4 ; CMidiStream::ms_PitchTableInverseSampleRate

  00000			 AREA	 |.rdata|, DATA, READONLY
|?ms_BasePitchTable@CMidiStream@@0QBKB| DCD 0x105a025	; CMidiStream::ms_BasePitchTable
	DCD	0x1152ec0
	DCD	0x125aa2e
	DCD	0x1372082
	DCD	0x149a0a7
	DCD	0x15d3a6d
	DCD	0x171fe92
	DCD	0x187fed4
	DCD	0x19f4e00
	DCD	0x1b80000
	DCD	0x1d229ec
	DCD	0x1ede220
	EXPORT	|?GainChange@CMidiStream@@UAAXXZ|	; CMidiStream::GainChange
	IMPORT	|?GainChange@CMidiNote@@QAAXXZ|		; CMidiNote::GainChange
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\wavedev2\midistrm.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T35626| DCD	|$LN10@GainChange|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GainChange@CMidiStream@@UAAXXZ| PROC	; CMidiStream::GainChange

; 32   : {

  00000		 |$LN10@GainChange|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M35623|

; 33   :     // Iterate through the active note list and change the gain of each note
; 34   :     PLIST_ENTRY pListEntry;
; 35   :     CMidiNote *pCNote;
; 36   :     pListEntry = m_NoteList.Flink;
; 37   :     while (pListEntry != &m_NoteList)

  00004	e2803c06	 add         r3, r0, #6, 24
  00008	e590466c	 ldr         r4, [r0, #0x66C]
  0000c	e283506c	 add         r5, r3, #0x6C
  00010	ea000002	 b           |$LN7@GainChange|
  00014		 |$LL2@GainChange|

; 38   :     {
; 39   :         // Get a pointer to the stream context
; 40   :         pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);
; 41   :         pCNote->GainChange();

  00014	e1a00004	 mov         r0, r4
  00018	eb000000	 bl          |?GainChange@CMidiNote@@QAAXXZ|

; 42   :         pListEntry = pListEntry->Flink;

  0001c	e5944000	 ldr         r4, [r4]
  00020		 |$LN7@GainChange|
  00020	e1540005	 cmp         r4, r5
  00024	1afffffa	 bne         |$LL2@GainChange|

; 43   :     }
; 44   : }

  00028	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M35624|

			 ENDP  ; |?GainChange@CMidiStream@@UAAXXZ|, CMidiStream::GainChange

	EXPORT	|?MapNoteGain@CMidiStream@@QAAKKK@Z|	; CMidiStream::MapNoteGain
	IMPORT	|?MapGain@StreamContext@@QAAKKK@Z|	; StreamContext::MapGain

  00000			 AREA	 |.pdata|, PDATA
|$T35641| DCD	|$LN7@MapNoteGai|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MapNoteGain@CMidiStream@@QAAKKK@Z| PROC ; CMidiStream::MapNoteGain

; 48   : {

  00000		 |$LN7@MapNoteGai|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M35638|

; 49   :     DWORD TotalGain = NoteGain & 0xFFFF;

  00004	e3a03cff	 mov         r3, #0xFF, 24
  00008	e383e0ff	 orr         lr, r3, #0xFF

; 50   :     DWORD StreamGain = m_dwGain;

  0000c	e5903058	 ldr         r3, [r0, #0x58]

; 51   :     if (Channel==1)

  00010	e3520001	 cmp         r2, #1
  00014	e001100e	 and         r1, r1, lr

; 52   :     {
; 53   :         StreamGain >>= 16;

  00018	01a03823	 moveq       r3, r3, lsr #16

; 54   :     }
; 55   :     StreamGain &= 0xFFFF;

  0001c	e003300e	 and         r3, r3, lr

; 56   : 
; 57   :     TotalGain *= StreamGain; // Calc. aggregate gain

  00020	e0010193	 mul         r1, r3, r1

; 58   :     TotalGain += 0xFFFF;   // Force to round up
; 59   :     TotalGain >>= 16;
; 60   :     
; 61   :     // If channel 1 (right channel), we should pass volume in upper 16 bits.
; 62   :     if (Channel==1)

  00024	e3520001	 cmp         r2, #1
  00028	e2813cff	 add         r3, r1, #0xFF, 24
  0002c	e28330ff	 add         r3, r3, #0xFF
  00030	e1a01823	 mov         r1, r3, lsr #16

; 63   :     {
; 64   :         TotalGain <<= 16;

  00034	01a01801	 moveq       r1, r1, lsl #16

; 65   :     }
; 66   : 
; 67   :     return MapGain(TotalGain,Channel);

  00038	eb000000	 bl          |?MapGain@StreamContext@@QAAKKK@Z|

; 68   : }

  0003c	e49de004	 ldr         lr, [sp], #4
  00040	e12fff1e	 bx          lr
  00044		 |$M35639|

			 ENDP  ; |?MapNoteGain@CMidiStream@@QAAKKK@Z|, CMidiStream::MapNoteGain

	EXPORT	|?Open@CMidiStream@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; CMidiStream::Open
	IMPORT	|?Open@StreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; StreamContext::Open

  00000			 AREA	 |.pdata|, PDATA
|$T35660| DCD	|$LN17@Open|
	DCD	0x40003b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Open@CMidiStream@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| PROC ; CMidiStream::Open

; 72   : {

  00000		 |$LN17@Open|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M35657|
  00004	e1a09003	 mov         r9, r3
  00008	e1a08002	 mov         r8, r2
  0000c	e1a0a001	 mov         r10, r1
  00010	e1a07000	 mov         r7, r0

; 73   :     DWORD mmRet;
; 74   :     LPWAVEFORMAT_MIDI pwfxmidi = (LPWAVEFORMAT_MIDI) lpWOD->lpFormat;

  00014	e5d86004	 ldrb        r6, [r8, #4]
  00018	e5d8e005	 ldrb        lr, [r8, #5]
  0001c	e5d84006	 ldrb        r4, [r8, #6]
  00020	e5d85007	 ldrb        r5, [r8, #7]
  00024	e186e40e	 orr         lr, r6, lr, lsl #8
  00028	e18ee804	 orr         lr, lr, r4, lsl #16
  0002c	e18e0c05	 orr         r0, lr, r5, lsl #24

; 75   : 
; 76   :     if (pwfxmidi->wfx.cbSize!=WAVEFORMAT_MIDI_EXTRASIZE)

  00030	e5d04010	 ldrb        r4, [r0, #0x10]
  00034	e5d0e011	 ldrb        lr, [r0, #0x11]
  00038	e184e40e	 orr         lr, r4, lr, lsl #8
  0003c	e35e000a	 cmp         lr, #0xA

; 77   :     {
; 78   :         mmRet = WAVERR_BADFORMAT;

  00040	13a00020	 movne       r0, #0x20

; 109  : 
; 110  : Exit:
; 111  :     return mmRet;
; 112  : }

  00044	18bd47f0	 ldmneia     sp!, {r4 - r10, lr}
  00048	112fff1e	 bxne        lr

; 79   :         goto Exit;
; 80   :     }
; 81   : 
; 82   :     // Be sure to init these before calling StreamContext::Open;
; 83   :     // it will call back into CMidiStream to set rate & volume
; 84   :     m_USecPerQuarterNote  = pwfxmidi->USecPerQuarterNote;

  0004c	e5903014	 ldr         r3, [r0, #0x14]

; 85   :     m_TicksPerQuarterNote = pwfxmidi->TicksPerQuarterNote;
; 86   :     m_DeltaSampleCount=0;
; 87   : 
; 88   :     // Add all notes to free list
; 89   :     InitializeListHead(&m_NoteList);

  00050	e2872c06	 add         r2, r7, #6, 24

; 90   :     InitializeListHead(&m_FreeList);

  00054	e2871c06	 add         r1, r7, #6, 24
  00058	e5873684	 str         r3, [r7, #0x684]
  0005c	e5903018	 ldr         r3, [r0, #0x18]
  00060	e3a0e000	 mov         lr, #0
  00064	e282206c	 add         r2, r2, #0x6C
  00068	e2810074	 add         r0, r1, #0x74
  0006c	e5873688	 str         r3, [r7, #0x688]
  00070	e587e690	 str         lr, [r7, #0x690]
  00074	e5872670	 str         r2, [r7, #0x670]
  00078	e587266c	 str         r2, [r7, #0x66C]
  0007c	e5870678	 str         r0, [r7, #0x678]
  00080	e5870674	 str         r0, [r7, #0x674]
  00084	e1a01007	 mov         r1, r7
  00088	e3a0e020	 mov         lr, #0x20
  0008c		 |$LL8@Open|

; 91   :     for (int i=0;i<NUMNOTES;i++)
; 92   :     {
; 93   :         InsertTailList(&m_FreeList,&m_MidiNote[i].m_Link);

  0008c	e5903004	 ldr         r3, [r0, #4]
  00090	e281206c	 add         r2, r1, #0x6C
  00094	e581006c	 str         r0, [r1, #0x6C]
  00098	e5813070	 str         r3, [r1, #0x70]
  0009c	e5832000	 str         r2, [r3]
  000a0	e5802004	 str         r2, [r0, #4]
  000a4	e2811030	 add         r1, r1, #0x30
  000a8	e25ee001	 subs        lr, lr, #1
  000ac	1afffff6	 bne         |$LL8@Open|

; 94   :     }
; 95   :     
; 96   :     // Now it's safe to call this. Note that StreamContext::Open will call
; 97   :     // back into ResetBaseInfo to give us a chance to cache our HW-specific values,
; 98   :     // so we don't have to call UpdateTempo here.
; 99   :     mmRet = StreamContext::Open(pDeviceContext, lpWOD, dwFlags);

  000b0	e1a03009	 mov         r3, r9
  000b4	e1a02008	 mov         r2, r8
  000b8	e1a0100a	 mov         r1, r10
  000bc	e1a00007	 mov         r0, r7
  000c0	eb000000	 bl          |?Open@StreamContext@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|
  000c4	e3500000	 cmp         r0, #0

; 100  :     if (MMSYSERR_NOERROR!=mmRet)

  000c8	1a000005	 bne         |$Exit$35266|

; 101  :     {
; 102  :         goto Exit;
; 103  :     }
; 104  : 
; 105  :     // Note: Output streams should be initialized in the run state.
; 106  :     Run();

  000cc	e5973000	 ldr         r3, [r7]
  000d0	e1a00007	 mov         r0, r7
  000d4	e5933010	 ldr         r3, [r3, #0x10]
  000d8	e1a0e00f	 mov         lr, pc
  000dc	e12fff13	 bx          r3

; 107  : 
; 108  :     mmRet = MMSYSERR_NOERROR;

  000e0	e3a00000	 mov         r0, #0
  000e4		 |$Exit$35266|

; 109  : 
; 110  : Exit:
; 111  :     return mmRet;
; 112  : }

  000e4	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000e8	e12fff1e	 bx          lr
  000ec		 |$M35658|

			 ENDP  ; |?Open@CMidiStream@@UAAKPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|, CMidiStream::Open

	EXPORT	|?UpdateTempo@CMidiStream@@QAAJXZ|	; CMidiStream::UpdateTempo
	IMPORT	|?GetBaseSampleRate@DeviceContext@@QAAKXZ| ; DeviceContext::GetBaseSampleRate
	IMPORT	|__rt_udiv64by64|

  00000			 AREA	 |.pdata|, PDATA
|$T35671| DCD	|$LN7@UpdateTemp|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateTempo@CMidiStream@@QAAJXZ| PROC ; CMidiStream::UpdateTempo

; 138  : {

  00000		 |$LN7@UpdateTemp|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M35668|
  00004	e1a04000	 mov         r4, r0

; 139  :     if (m_USecPerQuarterNote==0)

  00008	e5943684	 ldr         r3, [r4, #0x684]

; 140  :     {
; 141  :         m_USecPerQuarterNote = 500000; // If not specified, assume 500000usec = 1/2 sec per quarter note
; 142  :     }
; 143  : 
; 144  :     if (m_TicksPerQuarterNote==0)
; 145  :     {
; 146  :         m_TicksPerQuarterNote = 96;      // If not specified, assume 96 ticks/quarter note
; 147  :     }
; 148  : 
; 149  :     UINT64 Num = m_pDeviceContext->GetBaseSampleRate();

  0000c	e5940050	 ldr         r0, [r4, #0x50]
  00010	e3530000	 cmp         r3, #0
  00014	03a03a7a	 moveq       r3, #0x7A, 20
  00018	03833e12	 orreq       r3, r3, #0x12, 28
  0001c	05843684	 streq       r3, [r4, #0x684]
  00020	e5943688	 ldr         r3, [r4, #0x688]
  00024	e3530000	 cmp         r3, #0
  00028	03a03060	 moveq       r3, #0x60
  0002c	05843688	 streq       r3, [r4, #0x688]
  00030	eb000000	 bl          |?GetBaseSampleRate@DeviceContext@@QAAKXZ|

; 150  :     Num *= m_USecPerQuarterNote;

  00034	e5942684	 ldr         r2, [r4, #0x684]

; 151  :     UINT64 Den = 1000000;
; 152  :     Den *= m_TicksPerQuarterNote;

  00038	e594e688	 ldr         lr, [r4, #0x688]
  0003c	e3a0393d	 mov         r3, #0x3D, 18
  00040	e3833d09	 orr         r3, r3, #9, 26
  00044	e0810092	 umull       r0, r1, r2, r0
  00048	e083239e	 umull       r2, r3, lr, r3

; 153  :     UINT64 SamplesPerTick = Num/Den;

  0004c	eb000000	 bl          __rt_udiv64by64

; 154  :     m_SamplesPerTick = (UINT32)SamplesPerTick;

  00050	e584068c	 str         r0, [r4, #0x68C]

; 155  :     return S_OK;

  00054	e3a00000	 mov         r0, #0

; 156  : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M35669|

			 ENDP  ; |?UpdateTempo@CMidiStream@@QAAJXZ|, CMidiStream::UpdateTempo

	EXPORT	|?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z| ; CMidiStream::FindNote
	IMPORT	|?NoteChannel@CMidiNote@@QAAIXZ|	; CMidiNote::NoteChannel
	IMPORT	|?NoteVal@CMidiNote@@QAAIXZ|		; CMidiNote::NoteVal

  00000			 AREA	 |.pdata|, PDATA
|$T35689| DCD	|$LN13@FindNote|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z| PROC ; CMidiStream::FindNote

; 379  : {

  00000		 |$LN13@FindNote|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M35686|
  00004	e1a06002	 mov         r6, r2
  00008	e1a07001	 mov         r7, r1

; 380  :     PLIST_ENTRY pListEntry;
; 381  :     CMidiNote *pCNote;
; 382  :     pListEntry = m_NoteList.Flink;
; 383  :     while (pListEntry != &m_NoteList)

  0000c	e2803c06	 add         r3, r0, #6, 24
  00010	e590466c	 ldr         r4, [r0, #0x66C]
  00014	e283506c	 add         r5, r3, #0x6C
  00018	ea000008	 b           |$LN10@FindNote|
  0001c		 |$LL3@FindNote|

; 384  :     {
; 385  :         // Get a pointer to the stream context
; 386  :         pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);
; 387  : 
; 388  :         if (pCNote->NoteVal()==dwNote && pCNote->NoteChannel()==dwChannel)

  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          |?NoteVal@CMidiNote@@QAAIXZ|
  00024	e1500007	 cmp         r0, r7
  00028	1a000003	 bne         |$LN1@FindNote|
  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          |?NoteChannel@CMidiNote@@QAAIXZ|
  00034	e1500006	 cmp         r0, r6
  00038	0a000003	 beq         |$LN4@FindNote|
  0003c		 |$LN1@FindNote|

; 389  :         {
; 390  :             return pCNote;
; 391  :         }
; 392  : 
; 393  :         pListEntry = pListEntry->Flink;

  0003c	e5944000	 ldr         r4, [r4]
  00040		 |$LN10@FindNote|
  00040	e1540005	 cmp         r4, r5
  00044	1afffff4	 bne         |$LL3@FindNote|

; 394  :     }
; 395  :     return NULL;

  00048	e3a04000	 mov         r4, #0
  0004c		 |$LN4@FindNote|

; 396  : }

  0004c	e1a00004	 mov         r0, r4
  00050	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M35687|

			 ENDP  ; |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|, CMidiStream::FindNote

	EXPORT	|?NoteOff@CMidiStream@@QAAJIII@Z|	; CMidiStream::NoteOff
	IMPORT	|?NoteOff@CMidiNote@@QAAJI@Z|		; CMidiNote::NoteOff

  00000			 AREA	 |.pdata|, PDATA
|$T35703| DCD	|$LN6@NoteOff|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteOff@CMidiStream@@QAAJIII@Z| PROC	; CMidiStream::NoteOff

; 448  : {

  00000		 |$LN6@NoteOff|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M35700|
  00004	e1a04002	 mov         r4, r2

; 449  :     CMidiNote *pCNote = FindNote(dwNote, dwChannel);

  00008	e1a02003	 mov         r2, r3
  0000c	eb000000	 bl          |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|
  00010	e3500000	 cmp         r0, #0

; 450  :     if (pCNote)
; 451  :     {
; 452  :         pCNote->NoteOff(dwVelocity);

  00014	11a01004	 movne       r1, r4
  00018	1b000000	 blne        |?NoteOff@CMidiNote@@QAAJI@Z|

; 453  :     }
; 454  : 
; 455  :     return S_OK;

  0001c	e3a00000	 mov         r0, #0

; 456  : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M35701|

			 ENDP  ; |?NoteOff@CMidiStream@@QAAJIII@Z|, CMidiStream::NoteOff

	EXPORT	|?AllNotesOff@CMidiStream@@QAAJI@Z|	; CMidiStream::AllNotesOff

  00000			 AREA	 |.pdata|, PDATA
|$T35719| DCD	|$LN10@AllNotesOf|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AllNotesOff@CMidiStream@@QAAJI@Z| PROC ; CMidiStream::AllNotesOff

; 459  : {

  00000		 |$LN10@AllNotesOf|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M35716|
  00004	e1a06001	 mov         r6, r1

; 460  :     PLIST_ENTRY pListEntry;
; 461  :     CMidiNote *pCNote;
; 462  :     pListEntry = m_NoteList.Flink;
; 463  :     while (pListEntry != &m_NoteList)

  00008	e2803c06	 add         r3, r0, #6, 24
  0000c	e590466c	 ldr         r4, [r0, #0x66C]
  00010	e283506c	 add         r5, r3, #0x6C
  00014	ea000003	 b           |$LN7@AllNotesOf|
  00018		 |$LL2@AllNotesOf|

; 464  :     {
; 465  :         // Get the note
; 466  :         pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00018	e1a00004	 mov         r0, r4

; 467  : 
; 468  :         // Get the next link, since NoteOff may remove the note from the queue depeding on the implementation
; 469  :         pListEntry = pListEntry->Flink;
; 470  : 
; 471  :         // Turn the note off
; 472  :         pCNote->NoteOff(dwVelocity);

  0001c	e5944000	 ldr         r4, [r4]
  00020	e1a01006	 mov         r1, r6
  00024	eb000000	 bl          |?NoteOff@CMidiNote@@QAAJI@Z|
  00028		 |$LN7@AllNotesOf|
  00028	e1540005	 cmp         r4, r5
  0002c	1afffff9	 bne         |$LL2@AllNotesOf|

; 473  :     }
; 474  :     return S_OK;

  00030	e3a00000	 mov         r0, #0

; 475  : }

  00034	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M35717|

			 ENDP  ; |?AllNotesOff@CMidiStream@@QAAJI@Z|, CMidiStream::AllNotesOff

	EXPORT	|?ResetBaseInfo@CMidiStream@@UAAXXZ|	; CMidiStream::ResetBaseInfo
	IMPORT	|?ResetBaseInfo@CMidiNote@@QAAXXZ|	; CMidiNote::ResetBaseInfo
	IMPORT	|?GetBaseSampleRateInverse@DeviceContext@@QAAKXZ| ; DeviceContext::GetBaseSampleRateInverse

  00000			 AREA	 |.pdata|, PDATA
|$T35734| DCD	|$LN16@ResetBaseI|
	DCD	0x40002201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResetBaseInfo@CMidiStream@@UAAXXZ| PROC ; CMidiStream::ResetBaseInfo

; 545  : {

  00000		 |$LN16@ResetBaseI|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M35731|
  00004	e1a05000	 mov         r5, r0

; 546  :     // If the HW sample rate has changed since the last time we updated the table, recalc now
; 547  :     // If multiple streams are active, only the first one in here will regenerate the table
; 548  :     // This assumes the global lock is taken.
; 549  :     UINT32 InverseSampleRate = m_pDeviceContext->GetBaseSampleRateInverse();

  00008	e5950050	 ldr         r0, [r5, #0x50]
  0000c	eb000000	 bl          |?GetBaseSampleRateInverse@DeviceContext@@QAAKXZ|

; 550  :     if (ms_PitchTableInverseSampleRate!=InverseSampleRate)

  00010	e59fe06c	 ldr         lr, [pc, #0x6C]
  00014	e59e3030	 ldr         r3, [lr, #0x30]
  00018	e1530000	 cmp         r3, r0
  0001c	0a00000a	 beq         |$LN3@ResetBaseI|

; 551  :     {
; 552  :         ms_PitchTableInverseSampleRate=InverseSampleRate;
; 553  : 
; 554  :         for (int i=0;i<12;i++)

  00020	e59f6058	 ldr         r6, [pc, #0x58]
  00024	e58e0030	 str         r0, [lr, #0x30]
  00028	e3a04000	 mov         r4, #0
  0002c		 |$LL5@ResetBaseI|

; 555  :         {
; 556  :             UINT64 Tmp;
; 557  :             Tmp = ms_BasePitchTable[i];
; 558  :             Tmp *= InverseSampleRate;

  0002c	e7943006	 ldr         r3, [r4, +r6]
  00030	e0821093	 umull       r1, r2, r3, r0

; 559  :             Tmp >>= 16;

  00034	e1a03802	 mov         r3, r2, lsl #16
  00038	e1833821	 orr         r3, r3, r1, lsr #16

; 560  :             ms_PitchTable[i] = (DWORD)(Tmp);

  0003c	e784300e	 str         r3, [r4, +lr]
  00040	e2844004	 add         r4, r4, #4
  00044	e3540030	 cmp         r4, #0x30
  00048	bafffff7	 blt         |$LL5@ResetBaseI|
  0004c		 |$LN3@ResetBaseI|

; 561  :         }
; 562  :     }
; 563  : 
; 564  : 	// Update the tempo of this stream, which depends on the hw sample rate to keep time
; 565  : 	UpdateTempo();

  0004c	e1a00005	 mov         r0, r5
  00050	eb000000	 bl          |?UpdateTempo@CMidiStream@@QAAJXZ|

; 566  : 
; 567  :     // Iterate through the active note list and force each note to recache it's params
; 568  :     PLIST_ENTRY pListEntry;
; 569  :     CMidiNote *pCNote;
; 570  :     pListEntry = m_NoteList.Flink;

  00054	e595466c	 ldr         r4, [r5, #0x66C]

; 571  :     while (pListEntry != &m_NoteList)

  00058	e2853c06	 add         r3, r5, #6, 24
  0005c	e283506c	 add         r5, r3, #0x6C
  00060	ea000002	 b           |$LN13@ResetBaseI|
  00064		 |$LL2@ResetBaseI|

; 572  :     {
; 573  :         // Get a pointer to the stream context
; 574  :         pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);
; 575  :         pCNote->ResetBaseInfo();

  00064	e1a00004	 mov         r0, r4
  00068	eb000000	 bl          |?ResetBaseInfo@CMidiNote@@QAAXXZ|

; 576  :         pListEntry = pListEntry->Flink;

  0006c	e5944000	 ldr         r4, [r4]
  00070		 |$LN13@ResetBaseI|
  00070	e1540005	 cmp         r4, r5
  00074	1afffffa	 bne         |$LL2@ResetBaseI|

; 577  :     }
; 578  : }

  00078	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN17@ResetBaseI|
  00080		 |$LN18@ResetBaseI|
  00080	00000000	 DCD         |?ms_BasePitchTable@CMidiStream@@0QBKB|
  00084		 |$LN19@ResetBaseI|
  00084	00000000	 DCD         |?ms_PitchTable@CMidiStream@@0PAKA|
  00088		 |$M35732|

			 ENDP  ; |?ResetBaseInfo@CMidiStream@@UAAXXZ|, CMidiStream::ResetBaseInfo

	EXPORT	|?GetDeltaFromNote@CMidiStream@@QAAKK@Z| ; CMidiStream::GetDeltaFromNote

  00000			 AREA	 |.pdata|, PDATA
|$T35750| DCD	|$LN9@GetDeltaFr|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDeltaFromNote@CMidiStream@@QAAKK@Z| PROC ; CMidiStream::GetDeltaFromNote

; 582  : {

  00000		 |$LN9@GetDeltaFr|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M35747|

; 583  :     DWORD Delta;
; 584  : 
; 585  :     // Load the delta from the pitch table (see the description above)
; 586  :     Delta = ms_PitchTable[ Note % 12 ] ;

  00004	e59f303c	 ldr         r3, [pc, #0x3C]
  00008	e59f0034	 ldr         r0, [pc, #0x34]
  0000c	e083e391	 umull       lr, r3, r1, r3
  00010	e1a021a3	 mov         r2, r3, lsr #3
  00014	e0823082	 add         r3, r2, r2, lsl #1
  00018	e0413103	 sub         r3, r1, r3, lsl #2

; 587  : 
; 588  :     // Adjust for the correct octave
; 589  :     int Octave = ((int)(Note/12)) - 5;

  0001c	e7900103	 ldr         r0, [r0, +r3, lsl #2]
  00020	e2422005	 sub         r2, r2, #5

; 590  :     if (Octave>0)

  00024	e3520000	 cmp         r2, #0

; 591  :     {
; 592  :         Delta <<= Octave;

  00028	c1a00210	 movgt       r0, r0, lsl r2

; 597  :     }
; 598  : 
; 599  :     return Delta;
; 600  : }

  0002c	c49de004	 ldrgt       lr, [sp], #4
  00030	c12fff1e	 bxgt        lr

; 593  :     }
; 594  :     else if (Octave<0)
; 595  :     {
; 596  :         Delta >>= -Octave;

  00034	42623000	 rsbmi       r3, r2, #0
  00038	41a00330	 movmi       r0, r0, lsr r3

; 597  :     }
; 598  : 
; 599  :     return Delta;
; 600  : }

  0003c	e49de004	 ldr         lr, [sp], #4
  00040	e12fff1e	 bx          lr
  00044		 |$LN10@GetDeltaFr|
  00044		 |$LN11@GetDeltaFr|
  00044	00000000	 DCD         |?ms_PitchTable@CMidiStream@@0PAKA|
  00048		 |$LN12@GetDeltaFr|
  00048	aaaaaaab	 DCD         0xaaaaaaab
  0004c		 |$M35748|

			 ENDP  ; |?GetDeltaFromNote@CMidiStream@@QAAKK@Z|, CMidiStream::GetDeltaFromNote

	EXPORT	|?GetDeltaFromFreq@CMidiStream@@QAAKK@Z| ; CMidiStream::GetDeltaFromFreq

  00000			 AREA	 |.pdata|, PDATA
|$T35764| DCD	|$LN5@GetDeltaFr@2|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDeltaFromFreq@CMidiStream@@QAAKK@Z| PROC ; CMidiStream::GetDeltaFromFreq

; 604  : {

  00000		 |$LN5@GetDeltaFr@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M35761|
  00004	e1a04001	 mov         r4, r1

; 605  :     UINT32 InverseSampleRate = m_pDeviceContext->GetBaseSampleRateInverse();

  00008	e5900050	 ldr         r0, [r0, #0x50]
  0000c	eb000000	 bl          |?GetBaseSampleRateInverse@DeviceContext@@QAAKXZ|
  00010	e1a03000	 mov         r3, r0

; 606  : 
; 607  :     // Assuming Freq is a 32(.0) bit value and BaseSampleRate is a 0.32-bit value,
; 608  :     // multiplying them together yields a 32.32 bit value. We only care about the fractional
; 609  :     // part, so we can get away with just 32-bit math (and just throw away the upper 32 bits).
; 610  :     return (Freq * InverseSampleRate);
; 611  : }

  00014	e0000493	 mul         r0, r3, r4
  00018	e8bd4010	 ldmia       sp!, {r4, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M35762|

			 ENDP  ; |?GetDeltaFromFreq@CMidiStream@@QAAKK@Z|, CMidiStream::GetDeltaFromFreq

	EXPORT	|?NoteMoveToFreeList@CMidiStream@@QAAXPAVCMidiNote@@@Z| ; CMidiStream::NoteMoveToFreeList

  00000			 AREA	 |.pdata|, PDATA
|$T35775| DCD	|$LN11@NoteMoveTo|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteMoveToFreeList@CMidiStream@@QAAXPAVCMidiNote@@@Z| PROC ; CMidiStream::NoteMoveToFreeList

; 614  : {

  00000		 |$LN11@NoteMoveTo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M35772|

; 615  :     PLIST_ENTRY pListEntry = &pCMidiNote->m_Link;
; 616  :     RemoveEntryList(pListEntry);

  00004	e591e004	 ldr         lr, [r1, #4]
  00008	e5912000	 ldr         r2, [r1]

; 617  :     InsertTailList(&m_FreeList,pListEntry);

  0000c	e2803c06	 add         r3, r0, #6, 24
  00010	e2830074	 add         r0, r3, #0x74
  00014	e58e2000	 str         r2, [lr]
  00018	e5912000	 ldr         r2, [r1]
  0001c	e5913004	 ldr         r3, [r1, #4]
  00020	e5823004	 str         r3, [r2, #4]
  00024	e5903004	 ldr         r3, [r0, #4]
  00028	e8810009	 stmia       r1, {r0, r3}
  0002c	e5831000	 str         r1, [r3]
  00030	e5801004	 str         r1, [r0, #4]

; 618  : }

  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$M35773|

			 ENDP  ; |?NoteMoveToFreeList@CMidiStream@@QAAXPAVCMidiNote@@@Z|, CMidiStream::NoteMoveToFreeList

	EXPORT	|?NoteMoveToNoteList@CMidiStream@@QAAXPAVCMidiNote@@@Z| ; CMidiStream::NoteMoveToNoteList

  00000			 AREA	 |.pdata|, PDATA
|$T35786| DCD	|$LN11@NoteMoveTo@2|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteMoveToNoteList@CMidiStream@@QAAXPAVCMidiNote@@@Z| PROC ; CMidiStream::NoteMoveToNoteList

; 621  : {

  00000		 |$LN11@NoteMoveTo@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M35783|

; 622  :     PLIST_ENTRY pListEntry = &pCMidiNote->m_Link;
; 623  :     RemoveEntryList(pListEntry);

  00004	e591e004	 ldr         lr, [r1, #4]
  00008	e5912000	 ldr         r2, [r1]

; 624  :     InsertTailList(&m_NoteList,pListEntry);

  0000c	e2803c06	 add         r3, r0, #6, 24
  00010	e283006c	 add         r0, r3, #0x6C
  00014	e58e2000	 str         r2, [lr]
  00018	e5912000	 ldr         r2, [r1]
  0001c	e5913004	 ldr         r3, [r1, #4]
  00020	e5823004	 str         r3, [r2, #4]
  00024	e5903004	 ldr         r3, [r0, #4]
  00028	e8810009	 stmia       r1, {r0, r3}
  0002c	e5831000	 str         r1, [r3]
  00030	e5801004	 str         r1, [r0, #4]

; 625  : }

  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$M35784|

			 ENDP  ; |?NoteMoveToNoteList@CMidiStream@@QAAXPAVCMidiNote@@@Z|, CMidiStream::NoteMoveToNoteList

	EXPORT	|?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z| ; CMidiStream::NoteDone
	IMPORT	|?Release@StreamContext@@QAAJXZ|	; StreamContext::Release

  00000			 AREA	 |.pdata|, PDATA
|$T35810| DCD	|$LN13@NoteDone|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z| PROC ; CMidiStream::NoteDone

; 628  : {

  00000		 |$LN13@NoteDone|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M35807|

; 629  :     NoteMoveToFreeList(pCMidiNote);

  00004	e591e004	 ldr         lr, [r1, #4]
  00008	e5912000	 ldr         r2, [r1]
  0000c	e2803c06	 add         r3, r0, #6, 24
  00010	e2834074	 add         r4, r3, #0x74
  00014	e58e2000	 str         r2, [lr]
  00018	e5912000	 ldr         r2, [r1]
  0001c	e5913004	 ldr         r3, [r1, #4]

; 630  :     Release();

  00020	e5823004	 str         r3, [r2, #4]
  00024	e5943004	 ldr         r3, [r4, #4]
  00028	e5814000	 str         r4, [r1]
  0002c	e5813004	 str         r3, [r1, #4]
  00030	e5831000	 str         r1, [r3]
  00034	e5841004	 str         r1, [r4, #4]
  00038	eb000000	 bl          |?Release@StreamContext@@QAAJXZ|

; 631  : }

  0003c	e8bd4010	 ldmia       sp!, {r4, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M35808|

			 ENDP  ; |?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z|, CMidiStream::NoteDone

	EXPORT	|?DeltaTicksToSamples@CMidiStream@@QAAII@Z| ; CMidiStream::DeltaTicksToSamples

  00000			 AREA	 |.pdata|, PDATA
|$T35821| DCD	|$LN5@DeltaTicks|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DeltaTicksToSamples@CMidiStream@@QAAII@Z| PROC ; CMidiStream::DeltaTicksToSamples

; 634  : {

  00000		 |$LN5@DeltaTicks|
  00000		 |$M35818|

; 635  :     return (DeltaTicks * m_SamplesPerTick);

  00000	e590368c	 ldr         r3, [r0, #0x68C]

; 636  : }

  00004	e0000193	 mul         r0, r3, r1
  00008	e12fff1e	 bx          lr
  0000c		 |$M35819|

			 ENDP  ; |?DeltaTicksToSamples@CMidiStream@@QAAII@Z|, CMidiStream::DeltaTicksToSamples

	EXPORT	|?Reset@CMidiStream@@UAAKXZ|		; CMidiStream::Reset
	IMPORT	|?Reset@StreamContext@@UAAKXZ|		; StreamContext::Reset

  00000			 AREA	 |.pdata|, PDATA
|$T35832| DCD	|$LN6@Reset|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Reset@CMidiStream@@UAAKXZ| PROC	; CMidiStream::Reset

; 115  : {

  00000		 |$LN6@Reset|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M35829|
  00004	e1a04000	 mov         r4, r0

; 116  :     DWORD dwResult = StreamContext::Reset();

  00008	eb000000	 bl          |?Reset@StreamContext@@UAAKXZ|
  0000c	e1b05000	 movs        r5, r0

; 117  :     if (dwResult==MMSYSERR_NOERROR)

  00010	1a000007	 bne         |$LN1@Reset|

; 118  :     {
; 119  :         AllNotesOff(0);

  00014	e3a01000	 mov         r1, #0
  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          |?AllNotesOff@CMidiStream@@QAAJI@Z|

; 120  : 
; 121  :         // Note: Output streams should be reset to the run state.
; 122  :         Run();

  00020	e5943000	 ldr         r3, [r4]
  00024	e1a00004	 mov         r0, r4
  00028	e5933010	 ldr         r3, [r3, #0x10]
  0002c	e1a0e00f	 mov         lr, pc
  00030	e12fff13	 bx          r3
  00034		 |$LN1@Reset|

; 123  :     }
; 124  :     return dwResult;
; 125  : }

  00034	e1a00005	 mov         r0, r5
  00038	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M35830|

			 ENDP  ; |?Reset@CMidiStream@@UAAKXZ|, CMidiStream::Reset

	EXPORT	|?Close@CMidiStream@@UAAKXZ|		; CMidiStream::Close
	IMPORT	|?Close@StreamContext@@UAAKXZ|		; StreamContext::Close

  00000			 AREA	 |.pdata|, PDATA
|$T35843| DCD	|$LN6@Close|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Close@CMidiStream@@UAAKXZ| PROC	; CMidiStream::Close

; 128  : {

  00000		 |$LN6@Close|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M35840|
  00004	e1a05000	 mov         r5, r0

; 129  :     DWORD dwResult = StreamContext::Close();

  00008	eb000000	 bl          |?Close@StreamContext@@UAAKXZ|
  0000c	e1b04000	 movs        r4, r0

; 130  :     if (dwResult==MMSYSERR_NOERROR)
; 131  :     {
; 132  :         AllNotesOff(0);

  00010	03a01000	 moveq       r1, #0
  00014	01a00005	 moveq       r0, r5
  00018	0b000000	 bleq        |?AllNotesOff@CMidiStream@@QAAJI@Z|

; 133  :     }
; 134  :     return dwResult;
; 135  : }

  0001c	e1a00004	 mov         r0, r4
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M35841|

			 ENDP  ; |?Close@CMidiStream@@UAAKXZ|, CMidiStream::Close

	EXPORT	|?NoteOn@CMidiStream@@QAAJIII@Z|	; CMidiStream::NoteOn
	IMPORT	|?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z| ; CMidiNote::NoteOn
	IMPORT	|?AddRef@StreamContext@@QAAJXZ|		; StreamContext::AddRef
	IMPORT	|?SetVelocity@CMidiNote@@QAAXI@Z|	; CMidiNote::SetVelocity

  00000			 AREA	 |.pdata|, PDATA
|$T35873| DCD	|$LN17@NoteOn|
	DCD	0x40002e02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteOn@CMidiStream@@QAAJIII@Z| PROC	; CMidiStream::NoteOn

; 400  : {

  00000		 |$LN17@NoteOn|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M35870|
  00008	e1a07003	 mov         r7, r3
  0000c	e1a06002	 mov         r6, r2
  00010	e1a08001	 mov         r8, r1
  00014	e1a05000	 mov         r5, r0

; 401  :     CMidiNote *pCNote=NULL;
; 402  : 
; 403  :     PLIST_ENTRY pListEntry;
; 404  : 
; 405  :     // First try to find the same note already being played
; 406  :     pCNote = FindNote(dwNote, dwChannel);

  00018	e1a02007	 mov         r2, r7
  0001c	eb000000	 bl          |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|
  00020	e1b04000	 movs        r4, r0

; 407  :     if (pCNote)

  00024	0a000003	 beq         |$LN4@NoteOn|

; 408  :     {
; 409  :         // If so, just set its velocity to the new velocity
; 410  :         // This allows us to change volume while a note is being
; 411  :         // played without any chance of glitching
; 412  :         pCNote->SetVelocity(dwVelocity);

  00028	e1a01006	 mov         r1, r6
  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          |?SetVelocity@CMidiNote@@QAAXI@Z|

; 413  :     }
; 414  :     else

  00034	ea00000e	 b           |$LN3@NoteOn|
  00038		 |$LN4@NoteOn|

; 415  :     {
; 416  :         // Try to allocate a note from the free list
; 417  :         pListEntry = m_FreeList.Flink;

  00038	e5954674	 ldr         r4, [r5, #0x674]

; 418  :         if (pListEntry != &m_FreeList)

  0003c	e2853c06	 add         r3, r5, #6, 24
  00040	e2833074	 add         r3, r3, #0x74
  00044	e1540003	 cmp         r4, r3
  00048	0a000002	 beq         |$LN2@NoteOn|

; 419  :         {
; 420  :             pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);
; 421  : 
; 422  :             // If we got a note from the free list, do an AddRef on this stream context
; 423  :             AddRef();

  0004c	e1a00005	 mov         r0, r5
  00050	eb000000	 bl          |?AddRef@StreamContext@@QAAJXZ|

; 424  :         }
; 425  :         else

  00054	ea000000	 b           |$LN1@NoteOn|
  00058		 |$LN2@NoteOn|

; 426  :         {
; 427  :             // Note: if we every support multiple instruments, here we should try to steal the oldest
; 428  :             // note with the same channel before just trying to steal the oldest note.
; 429  : 
; 430  :             // Steal the oldest note (which is the note at the head of the note list)
; 431  :             // Note: This should _never_ fail, since there must be a note on one of the lists!
; 432  :             pListEntry = m_NoteList.Flink;
; 433  :             pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00058	e595466c	 ldr         r4, [r5, #0x66C]
  0005c		 |$LN1@NoteOn|

; 434  :         }
; 435  : 
; 436  :         pCNote->NoteOn(this,dwNote,dwVelocity,dwChannel);

  0005c	e1a03006	 mov         r3, r6
  00060	e1a02008	 mov         r2, r8
  00064	e1a01005	 mov         r1, r5
  00068	e1a00004	 mov         r0, r4
  0006c	e58d7000	 str         r7, [sp]
  00070	eb000000	 bl          |?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z|
  00074		 |$LN3@NoteOn|

; 437  :     }
; 438  : 
; 439  :     // Move the note from whichever list it was on to the note list at the end.
; 440  :     // This ensures that if we reused an existing note, its age gets reset.
; 441  :     NoteMoveToNoteList(pCNote);

  00074	e5941004	 ldr         r1, [r4, #4]
  00078	e5942000	 ldr         r2, [r4]
  0007c	e2853c06	 add         r3, r5, #6, 24
  00080	e283e06c	 add         lr, r3, #0x6C
  00084	e5812000	 str         r2, [r1]
  00088	e5942000	 ldr         r2, [r4]
  0008c	e5943004	 ldr         r3, [r4, #4]

; 442  : 
; 443  :     return S_OK;

  00090	e3a00000	 mov         r0, #0
  00094	e5823004	 str         r3, [r2, #4]
  00098	e59e3004	 ldr         r3, [lr, #4]
  0009c	e584e000	 str         lr, [r4]
  000a0	e5843004	 str         r3, [r4, #4]
  000a4	e5834000	 str         r4, [r3]
  000a8	e58e4004	 str         r4, [lr, #4]

; 444  : }

  000ac	e28dd004	 add         sp, sp, #4
  000b0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$M35871|

			 ENDP  ; |?NoteOn@CMidiStream@@QAAJIII@Z|, CMidiStream::NoteOn

	EXPORT	|?MidiData@CMidiStream@@QAAJI@Z|	; CMidiStream::MidiData

  00000			 AREA	 |.pdata|, PDATA
|$T35894| DCD	|$LN19@MidiData|
	DCD	0x40002d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MidiData@CMidiStream@@QAAJI@Z| PROC	; CMidiStream::MidiData

; 328  : {

  00000		 |$LN19@MidiData|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M35891|
  00004	e1a0e000	 mov         lr, r0
  00008	e3a03106	 mov         r3, #6, 2

; 329  :     HRESULT Result=E_NOTIMPL;
; 330  :     UINT32 dwChannel;
; 331  :     UINT32 dwNote;
; 332  :     UINT32 dwVelocity;
; 333  : 
; 334  :     if (dwData & 0x80)

  0000c	e3110080	 tst         r1, #0x80
  00010	e3830901	 orr         r0, r3, #1, 18

; 335  :     {
; 336  :         m_RunningStatus = (BYTE)(dwData & 0xFF);      // status byte...

  00014	15ce1680	 strneb      r1, [lr, #0x680]

; 337  :     }
; 338  :     else
; 339  :     {
; 340  :         dwData = (dwData<<8) | m_RunningStatus;

  00018	05de3680	 ldreqb      r3, [lr, #0x680]
  0001c	01831401	 orreq       r1, r3, r1, lsl #8

; 341  :     }
; 342  : 
; 343  :     dwChannel  = (dwData & 0x0f) ;
; 344  :     dwNote     = ((dwData >> 8) & 0x7f) ;

  00020	e1a03881	 mov         r3, r1, lsl #17

; 345  :     dwVelocity = ((dwData >> 16) & 0x7f) ;

  00024	e1a02481	 mov         r2, r1, lsl #9

; 346  : 
; 347  :     switch (dwData & 0xf0)

  00028	e20150f0	 and         r5, r1, #0xF0
  0002c	e1a06ca3	 mov         r6, r3, lsr #25
  00030	e1a04ca2	 mov         r4, r2, lsr #25
  00034	e3550080	 cmp         r5, #0x80
  00038	0a000013	 beq         |$LN6@MidiData|
  0003c	e3550090	 cmp         r5, #0x90
  00040	0a000008	 beq         |$LN7@MidiData|
  00044	e35500b0	 cmp         r5, #0xB0
  00048	1a000017	 bne         |$LN8@MidiData|

; 359  :         break;
; 360  : 
; 361  :     case 0xB0:  // Control change
; 362  :         {
; 363  :             switch (dwNote)

  0004c	e356007b	 cmp         r6, #0x7B
  00050	1a000015	 bne         |$LN8@MidiData|

; 364  :             {
; 365  :             case 123:   // turns all notes off
; 366  :                 {
; 367  :                     Result = AllNotesOff(0);

  00054	e3a01000	 mov         r1, #0
  00058	e1a0000e	 mov         r0, lr
  0005c	eb000000	 bl          |?AllNotesOff@CMidiStream@@QAAJI@Z|

; 368  :                     break;
; 369  :                 }
; 370  :             }
; 371  :             break;
; 372  :         }
; 373  :     }
; 374  : 
; 375  :     return Result;
; 376  : }

  00060	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$LN7@MidiData|

; 348  :     {
; 349  :     case 0x90:  // Note on
; 350  :         if (dwVelocity!=0)

  00068	e3540000	 cmp         r4, #0
  0006c	0a000006	 beq         |$LN6@MidiData|

; 351  :         {
; 352  :             Result = NoteOn(dwNote, dwVelocity, dwChannel);

  00070	e201300f	 and         r3, r1, #0xF
  00074	e1a01006	 mov         r1, r6
  00078	e1a02004	 mov         r2, r4
  0007c	e1a0000e	 mov         r0, lr
  00080	eb000000	 bl          |?NoteOn@CMidiStream@@QAAJIII@Z|

; 368  :                     break;
; 369  :                 }
; 370  :             }
; 371  :             break;
; 372  :         }
; 373  :     }
; 374  : 
; 375  :     return Result;
; 376  : }

  00084	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN6@MidiData|

; 353  :             break;
; 354  :         }
; 355  :         // If dwVelocity is 0, this is really a note off message, so fall through
; 356  : 
; 357  :     case 0x80:  // Note off
; 358  :         Result = NoteOff(dwNote, dwVelocity, dwChannel);

  0008c	e201200f	 and         r2, r1, #0xF
  00090	e1a01006	 mov         r1, r6
  00094	e1a0000e	 mov         r0, lr
  00098	eb000000	 bl          |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|
  0009c	e3500000	 cmp         r0, #0
  000a0	11a01004	 movne       r1, r4
  000a4	1b000000	 blne        |?NoteOff@CMidiNote@@QAAJI@Z|
  000a8	e3a00000	 mov         r0, #0
  000ac		 |$LN8@MidiData|

; 368  :                     break;
; 369  :                 }
; 370  :             }
; 371  :             break;
; 372  :         }
; 373  :     }
; 374  : 
; 375  :     return Result;
; 376  : }

  000ac	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$M35892|

			 ENDP  ; |?MidiData@CMidiStream@@QAAJI@Z|, CMidiStream::MidiData

	EXPORT	|?InternalMidiMessage@CMidiStream@@QAAJI@Z| ; CMidiStream::InternalMidiMessage

  00000			 AREA	 |.pdata|, PDATA
|$T35914| DCD	|$LN15@InternalMi|
	DCD	0x40002a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InternalMidiMessage@CMidiStream@@QAAJI@Z| PROC ; CMidiStream::InternalMidiMessage

; 300  : {

  00000		 |$LN15@InternalMi|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M35911|

; 301  :     UINT32 OpCode = dwData & 0xF0000000;

  00004	e211220f	 ands        r2, r1, #0xF, 4

; 302  :     switch (OpCode)

  00008	0a000023	 beq         |$LN5@InternalMi|
  0000c	e3520201	 cmp         r2, #1, 4
  00010	0a00001c	 beq         |$LN4@InternalMi|
  00014	e3520202	 cmp         r2, #2, 4
  00018	13520203	 cmpne       r2, #3, 4
  0001c	13a03106	 movne       r3, #6, 2

; 321  :             }
; 322  :         }
; 323  :     }
; 324  :     return E_NOTIMPL;

  00020	13830901	 orrne       r0, r3, #1, 18

; 325  : }

  00024	18bd4010	 ldmneia     sp!, {r4, lr}
  00028	112fff1e	 bxne        lr

; 321  :             }
; 322  :         }
; 323  :     }
; 324  :     return E_NOTIMPL;

  0002c	e3a03cff	 mov         r3, #0xFF, 24

; 309  :     case MIDI_MESSAGE_FREQGENON:
; 310  :     case MIDI_MESSAGE_FREQGENOFF:
; 311  :         {
; 312  :             UINT32 dwNote = ((dwData) & 0xffff);

  00030	e383e0ff	 orr         lr, r3, #0xFF

; 313  :             UINT32 dwVelocity = ((dwData >> 16) & 0x7f) ;

  00034	e1a03481	 mov         r3, r1, lsl #9
  00038	e1a04ca3	 mov         r4, r3, lsr #25

; 314  :             if ((OpCode==MIDI_MESSAGE_FREQGENON)  && (dwVelocity>0))

  0003c	e3520202	 cmp         r2, #2, 4
  00040	1a000007	 bne         |$LN2@InternalMi|
  00044	e3540000	 cmp         r4, #0
  00048	0a000005	 beq         |$LN2@InternalMi|

; 315  :             {
; 316  :                 return NoteOn(dwNote, dwVelocity, FREQCHANNEL);

  0004c	e3a03010	 mov         r3, #0x10
  00050	e1a02004	 mov         r2, r4
  00054	e001100e	 and         r1, r1, lr
  00058	eb000000	 bl          |?NoteOn@CMidiStream@@QAAJIII@Z|

; 325  : }

  0005c	e8bd4010	 ldmia       sp!, {r4, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN2@InternalMi|

; 317  :             }
; 318  :             else
; 319  :             {
; 320  :                 return NoteOff(dwNote, dwVelocity, FREQCHANNEL);

  00064	e3a02010	 mov         r2, #0x10
  00068	e001100e	 and         r1, r1, lr
  0006c	eb000000	 bl          |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|
  00070	e3500000	 cmp         r0, #0
  00074	11a01004	 movne       r1, r4
  00078	1b000000	 blne        |?NoteOff@CMidiNote@@QAAJI@Z|
  0007c	e3a00000	 mov         r0, #0

; 325  : }

  00080	e8bd4010	 ldmia       sp!, {r4, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN4@InternalMi|

; 306  :     case MIDI_MESSAGE_UPDATETEMPO:
; 307  :         m_USecPerQuarterNote  = (dwData & 0xFFFFFF);

  00088	e3c134ff	 bic         r3, r1, #0xFF, 8
  0008c	e5803684	 str         r3, [r0, #0x684]

; 308  :         return UpdateTempo();

  00090	eb000000	 bl          |?UpdateTempo@CMidiStream@@QAAJXZ|

; 325  : }

  00094	e8bd4010	 ldmia       sp!, {r4, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN5@InternalMi|

; 303  :     {
; 304  :     case 0:
; 305  :         return MidiData(dwData);

  0009c	eb000000	 bl          |?MidiData@CMidiStream@@QAAJI@Z|

; 325  : }

  000a0	e8bd4010	 ldmia       sp!, {r4, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$M35912|

			 ENDP  ; |?InternalMidiMessage@CMidiStream@@QAAJI@Z|, CMidiStream::InternalMidiMessage

	EXPORT	|?ProcessMidiStream@CMidiStream@@QAAIXZ| ; CMidiStream::ProcessMidiStream
	EXPORT	|??_C@_1HC@PLGDHHAP@?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?5?$AAI?$AAN?$AA?5?$AAI?$AAS?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAm?$AAi?$AAd?$AAi?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|?GetNextBuffer@StreamContext@@QAAPAEXZ| ; StreamContext::GetNextBuffer
	IMPORT	|__C_specific_handler|

  00000			 AREA	 |.pdata|, PDATA
|$T35948| DCD	|$LN27@ProcessMid|
	DCD	0xc0003505

  00000			 AREA	 |.pdata|, PDATA
|$T35950| DCD	|$LN12@ProcessMid|
	DCD	0x40000401

  00000			 AREA	 |.xdata|, DATA
|$T35946| DCD	0x1
	DCD	|$LN16@ProcessMid|
	DCD	|$LN17@ProcessMid|
	DCD	|$LN12@ProcessMid|
	DCD	|$LN13@ProcessMid|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@PLGDHHAP@?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?5?$AAI?$AAN?$AA?5?$AAI?$AAS?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAm?$AAi?$AAd?$AAi?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm@| DCB "E"
	DCB	0x0, "X", 0x0, "C", 0x0, "E", 0x0, "P", 0x0, "T", 0x0, "I"
	DCB	0x0, "O", 0x0, "N", 0x0, " ", 0x0, "I", 0x0, "N", 0x0, " "
	DCB	0x0, "I", 0x0, "S", 0x0, "T", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "m", 0x0, "i", 0x0, "d", 0x0, "i"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "m", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T35946|

  00008		 |?ProcessMidiStream@CMidiStream@@QAAIXZ| PROC ; CMidiStream::ProcessMidiStream

; 161  : {

  00008		 |$LN27@ProcessMid|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0001	 stmdb       sp!, {r0}
  00010	e92d58f0	 stmdb       sp!, {r4 - r7, r11, r12, lr}
  00014	e28db01c	 add         r11, sp, #0x1C
  00018	e24dd00c	 sub         sp, sp, #0xC
  0001c		 |$LN25@ProcessMid|
  0001c	e1a04000	 mov         r4, r0
  00020	e58b4000	 str         r4, [r11]

; 162  :     WAVEFORMAT_MIDI_MESSAGE *pMsg;
; 163  :     WAVEFORMAT_MIDI_MESSAGE *pMsgEnd;
; 164  :     UINT32 ThisMidiEventDelta;
; 165  : 
; 166  :     // Process all midi messages up to and including the current sample
; 167  :     pMsg    = (WAVEFORMAT_MIDI_MESSAGE *)m_lpCurrData;
; 168  :     pMsgEnd = (WAVEFORMAT_MIDI_MESSAGE *)m_lpCurrDataEnd;

  00024	e5947048	 ldr         r7, [r4, #0x48]
  00028	e5946044	 ldr         r6, [r4, #0x44]
  0002c	e51b5028	 ldr         r5, [r11, #-0x28]
  00030	e50b7024	 str         r7, [r11, #-0x24]
  00034		 |$LL6@ProcessMid|

; 169  : 
; 170  :     for (;;)
; 171  :     {
; 172  :         if (pMsg>=pMsgEnd)

  00034	e1560007	 cmp         r6, r7
  00038	3a000006	 bcc         |$LN4@ProcessMid|

; 173  :         {
; 174  :             pMsg = (WAVEFORMAT_MIDI_MESSAGE *)GetNextBuffer();

  0003c	e1a00004	 mov         r0, r4
  00040	eb000000	 bl          |?GetNextBuffer@StreamContext@@QAAPAEXZ|
  00044	e1b06000	 movs        r6, r0

; 176  :             {
; 177  :                 // DEBUGMSG(1, (TEXT("CMidiStream::ProcessMidiStream no more events\r\n")));
; 178  :                 return 0;

  00048	03a05000	 moveq       r5, #0

; 175  :             if (!pMsg)

  0004c	0a00001e	 beq         |$LN5@ProcessMid|

; 179  :             }
; 180  :             pMsgEnd = (WAVEFORMAT_MIDI_MESSAGE *)m_lpCurrDataEnd;

  00050	e5947048	 ldr         r7, [r4, #0x48]
  00054	e50b7024	 str         r7, [r11, #-0x24]
  00058		 |$LN4@ProcessMid|
  00058		 |$LN16@ProcessMid|

; 181  :         }
; 182  : 
; 183  :         _try
; 184  :         {
; 185  :             ThisMidiEventDelta = DeltaTicksToSamples(pMsg->DeltaTicks);

  00058	e5962000	 ldr         r2, [r6]
  0005c	e594368c	 ldr         r3, [r4, #0x68C]

; 186  :             if (ThisMidiEventDelta > m_DeltaSampleCount)

  00060	e5941690	 ldr         r1, [r4, #0x690]
  00064	e0030392	 mul         r3, r2, r3
  00068	e1530001	 cmp         r3, r1
  0006c	9a000003	 bls         |$LN1@ProcessMid|

; 187  :             {
; 188  :                 m_lpCurrData = (PBYTE)pMsg;

  00070	e5846044	 str         r6, [r4, #0x44]

; 189  :                 INT32 Delta = ThisMidiEventDelta-m_DeltaSampleCount;

  00074	e0435001	 sub         r5, r3, r1

; 190  :                 // DEBUGMSG(1, (TEXT("CMidiStream::ProcessMidiStream next event @delta %d\r\n"),Delta));
; 191  :                 return Delta;

  00078	e50b5028	 str         r5, [r11, #-0x28]
  0007c	ea000012	 b           |$LN5@ProcessMid|
  00080		 |$LN1@ProcessMid|

; 192  :             }
; 193  : 
; 194  :             // DEBUGMSG(1, (TEXT("CMidiStream::ProcessMidiStream sending midi message 0x%x\r\n"),pMsg->MidiMsg));
; 195  :             InternalMidiMessage(pMsg->MidiMsg);

  00080	e5961004	 ldr         r1, [r6, #4]
  00084	e1a00004	 mov         r0, r4
  00088	eb000000	 bl          |?InternalMidiMessage@CMidiStream@@QAAJI@Z|

; 196  :             m_DeltaSampleCount=0;

  0008c	e3a03000	 mov         r3, #0
  00090	e5843690	 str         r3, [r4, #0x690]

; 197  :             pMsg++;

  00094	e2866008	 add         r6, r6, #8
  00098	e50b6020	 str         r6, [r11, #-0x20]
  0009c		 |$LN17@ProcessMid|

; 198  :         }

  0009c	eaffffe4	 b           |$LL6@ProcessMid|
  000a0		 |$LN13@ProcessMid|

; 200  :         {
; 201  :             RETAILMSG(1, (TEXT("EXCEPTION IN IST for midi stream 0x%x, buffer 0x%x!!!!\r\n"), this, m_lpCurrData));

  000a0	e59b4000	 ldr         r4, [r11]
  000a4	e59f003c	 ldr         r0, [pc, #0x3C]
  000a8	e5942044	 ldr         r2, [r4, #0x44]
  000ac	e1a01004	 mov         r1, r4
  000b0	eb000000	 bl          NKDbgPrintfW

; 202  :             pMsg = pMsgEnd; // Pretend we finished reading the application buffer

  000b4	e51b7024	 ldr         r7, [r11, #-0x24]
  000b8	e1a06007	 mov         r6, r7
  000bc	e50b7020	 str         r7, [r11, #-0x20]
  000c0	e51b5028	 ldr         r5, [r11, #-0x28]
  000c4	eaffffda	 b           |$LL6@ProcessMid|
  000c8		 |$LN24@ProcessMid|
  000c8	e51b5028	 ldr         r5, [r11, #-0x28]
  000cc		 |$LN5@ProcessMid|

; 203  :         }
; 204  :     }
; 205  : }

  000cc	e1a00005	 mov         r0, r5
  000d0	e24bd01c	 sub         sp, r11, #0x1C
  000d4	e89d68f0	 ldmia       sp, {r4 - r7, r11, sp, lr}
  000d8	e12fff1e	 bx          lr

			 ENDP  ; |?ProcessMidiStream@CMidiStream@@QAAIXZ|, CMidiStream::ProcessMidiStream

  000dc		 |$LN12@ProcessMid|
  000dc		 |$LN26@ProcessMid|

; 199  :         _except (EXCEPTION_EXECUTE_HANDLER)

  000dc	e52de004	 str         lr, [sp, #-4]!
  000e0		 |$LN15@ProcessMid|
  000e0		 |$LN29@ProcessMid|
  000e0	e3a00001	 mov         r0, #1
  000e4		 |$LN14@ProcessMid|
  000e4	e49df004	 ldr         pc, [sp], #4
  000e8		 |$LN31@ProcessMid|
  000e8		 |$LN32@ProcessMid|
  000e8	00000000	 DCD         |??_C@_1HC@PLGDHHAP@?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?5?$AAI?$AAN?$AA?5?$AAI?$AAS?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAm?$AAi?$AAd?$AAi?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm@|
  000ec		 |$LN30@ProcessMid|
  000ec		 |$LN28@ProcessMid|
	EXPORT	|?Render@CMidiStream@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| ; CMidiStream::Render
	IMPORT	|?ClearBuffer@StreamContext@@SAXPAE0@Z|	; StreamContext::ClearBuffer
	IMPORT	|?Render@CMidiNote@@QAAPAEPAE00PAUTRANSFER_STATUS@@@Z| ; CMidiNote::Render
	IMPORT	|?StillPlaying@StreamContext@@QAAHXZ|	; StreamContext::StillPlaying

  00000			 AREA	 |.pdata|, PDATA
|$T35982| DCD	|$LN22@Render|
	DCD	0x40003b02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render@CMidiStream@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z| PROC ; CMidiStream::Render

; 208  : {

  00000		 |$LN22@Render|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M35979|
  00008	e1a09003	 mov         r9, r3
  0000c	e1a04002	 mov         r4, r2
  00010	e1a07001	 mov         r7, r1
  00014	e1a05000	 mov         r5, r0

; 209  : 
; 210  :     // DEBUGMSG(1, (TEXT("Entering CMidiStream::Render, pBuffer=0x%x, current delta = %d\r\n"), pBuffer, m_DeltaSampleCount));
; 211  : 
; 212  :     // If we're not running, or we don't have any buffers queued and the note list is empty,
; 213  :     // just return
; 214  :     if ( (!m_bRunning) || (!StillPlaying() && IsListEmpty(&m_NoteList)) )

  00018	e5952010	 ldr         r2, [r5, #0x10]
  0001c	e3520000	 cmp         r2, #0
  00020	0a00002c	 beq         |$LN9@Render|
  00024	eb000000	 bl          |?StillPlaying@StreamContext@@QAAHXZ|
  00028	e3500000	 cmp         r0, #0
  0002c	1a000004	 bne         |$LN14@Render|
  00030	e595e66c	 ldr         lr, [r5, #0x66C]
  00034	e2852c06	 add         r2, r5, #6, 24
  00038	e282206c	 add         r2, r2, #0x6C
  0003c	e15e0002	 cmp         lr, r2
  00040	0a000024	 beq         |$LN9@Render|
  00044		 |$LN14@Render|

; 218  :     }
; 219  : 
; 220  :     while (pBuffer<pBufferEnd)

  00044	e1570004	 cmp         r7, r4
  00048	2a00001e	 bcs         |$LN7@Render|
  0004c	e2853c06	 add         r3, r5, #6, 24
  00050	e59db028	 ldr         r11, [sp, #0x28]
  00054	e283a06c	 add         r10, r3, #0x6C
  00058		 |$LL8@Render|

; 221  :     {
; 222  :         // Process pending midi messages and get relative sample # of next midi event
; 223  :         UINT32 NextMidiEvent;
; 224  :         NextMidiEvent = ProcessMidiStream();

  00058	e1a00005	 mov         r0, r5
  0005c	eb000000	 bl          |?ProcessMidiStream@CMidiStream@@QAAIXZ|
  00060	e3500000	 cmp         r0, #0

; 225  : 
; 226  :         PBYTE pBufferEndEvent;  // Where to stop on this pass
; 227  : 
; 228  :         // If NextMidiEvent returns 0, it means there are no more midi messages left in the queue.
; 229  :         if (NextMidiEvent==0)
; 230  :         {
; 231  :             // Just process the rest of this buffer
; 232  :             pBufferEndEvent=pBufferEnd;
; 233  :         }
; 234  :         // NextMidiEvent is non-zero, and represents the delta sample value of the next midi event
; 235  :         else

  00064	0a000002	 beq         |$LN18@Render|

; 236  :         {
; 237  :             // Convert to be a pointer in this buffer
; 238  :             pBufferEndEvent = pBuffer + (NextMidiEvent * (sizeof(HWSAMPLE) * OUTCHANNELS));

  00068	e0876100	 add         r6, r7, r0, lsl #2

; 239  : 
; 240  :             // If the next event occurs after this buffer, just finish processing this buffer
; 241  :             if (pBufferEndEvent>pBufferEnd)

  0006c	e1560004	 cmp         r6, r4
  00070	9a000000	 bls         |$LN4@Render|
  00074		 |$LN18@Render|

; 242  :             {
; 243  :                 pBufferEndEvent=pBufferEnd;

  00074	e1a06004	 mov         r6, r4
  00078		 |$LN4@Render|

; 244  :             }
; 245  :         }
; 246  : 
; 247  :         // Update the delta for the samples we're about to process
; 248  :         m_DeltaSampleCount += ((pBufferEndEvent-pBuffer)/(sizeof(HWSAMPLE) * OUTCHANNELS));

  00078	e5952690	 ldr         r2, [r5, #0x690]

; 249  : 
; 250  :         // Process existing notes
; 251  :         PLIST_ENTRY pListEntry;
; 252  :         pListEntry = m_NoteList.Flink;

  0007c	e0463007	 sub         r3, r6, r7
  00080	e595866c	 ldr         r8, [r5, #0x66C]
  00084	e0823123	 add         r3, r2, r3, lsr #2
  00088	e5853690	 str         r3, [r5, #0x690]
  0008c	ea000008	 b           |$LN19@Render|
  00090		 |$LL3@Render|

; 254  :         {
; 255  :             CMidiNote *pCNote;
; 256  : 
; 257  :             // Get a pointer to the stream context
; 258  :             pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00090	e1a00008	 mov         r0, r8

; 259  : 
; 260  :             // Get next list entry, since Render may cause note to go away
; 261  :             pListEntry = pListEntry->Flink;
; 262  : 
; 263  :             PBYTE pBufferLastThis;
; 264  :             pBufferLastThis = pCNote->Render(pBuffer, pBufferEndEvent, pBufferLast, pTranferStatus);

  00094	e5988000	 ldr         r8, [r8]
  00098	e1a03009	 mov         r3, r9
  0009c	e1a02006	 mov         r2, r6
  000a0	e1a01007	 mov         r1, r7
  000a4	e58db000	 str         r11, [sp]
  000a8	eb000000	 bl          |?Render@CMidiNote@@QAAPAEPAE00PAUTRANSFER_STATUS@@@Z|

; 265  :             if (pBufferLast < pBufferLastThis)

  000ac	e1590000	 cmp         r9, r0

; 266  :             {
; 267  :                 pBufferLast = pBufferLastThis;

  000b0	31a09000	 movcc       r9, r0
  000b4		 |$LN19@Render|

; 253  :         while (pListEntry != &m_NoteList)

  000b4	e158000a	 cmp         r8, r10
  000b8	1afffff4	 bne         |$LL3@Render|

; 268  :             }
; 269  :         }
; 270  : 
; 271  :         pBuffer = pBufferEndEvent;

  000bc	e1a07006	 mov         r7, r6
  000c0	e1560004	 cmp         r6, r4
  000c4	3affffe3	 bcc         |$LL8@Render|
  000c8		 |$LN7@Render|

; 272  :     }
; 273  : 
; 274  :     // We need to make sure we clear any unwritten section of the buffer to make sure the DMA controller doesn't stop
; 275  :     // Note: we don't check for pTransferStatus->Mute here- should we?
; 276  :     StreamContext::ClearBuffer(pBufferLast,pBufferEnd);

  000c8	e1a01004	 mov         r1, r4
  000cc	e1a00009	 mov         r0, r9
  000d0	eb000000	 bl          |?ClearBuffer@StreamContext@@SAXPAE0@Z|

; 277  :     pBufferLast=pBufferEnd;
; 278  : 
; 279  :     // DEBUGMSG(1, (TEXT("CMidiStream::Render returning, pBufferLast=0x%x, pBufferEnd=0x%x\r\n"),pBufferLast,pBufferEnd));
; 280  :     return pBufferLast;

  000d4	ea000000	 b           |$LN11@Render|
  000d8		 |$LN9@Render|

; 215  :     {
; 216  :         // DEBUGMSG(1, (TEXT("CMidiStream::Render nothing to do\r\n")));
; 217  :         return pBuffer;

  000d8	e1a04007	 mov         r4, r7
  000dc		 |$LN11@Render|

; 281  : }

  000dc	e1a00004	 mov         r0, r4
  000e0	e28dd004	 add         sp, sp, #4
  000e4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000e8	e12fff1e	 bx          lr
  000ec		 |$M35980|

			 ENDP  ; |?Render@CMidiStream@@UAAPAEPAE00PAUTRANSFER_STATUS@@@Z|, CMidiStream::Render

	EXPORT	|?MidiMessage@CMidiStream@@QAAKI@Z|	; CMidiStream::MidiMessage

  00000			 AREA	 |.pdata|, PDATA
|$T35996| DCD	|$LN8@MidiMessag|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MidiMessage@CMidiStream@@QAAKI@Z| PROC ; CMidiStream::MidiMessage

; 284  : {

  00000		 |$LN8@MidiMessag|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M35993|
  00004	e1a04000	 mov         r4, r0

; 285  :     HRESULT Result;
; 286  : 
; 287  :     Result = InternalMidiMessage(dwMessage);

  00008	eb000000	 bl          |?InternalMidiMessage@CMidiStream@@QAAJI@Z|

; 288  : 
; 289  :     // If we're running, and the notelist has notes to render, make sure DMA is enabled
; 290  :     if ( (m_bRunning) && (m_NoteList.Flink != &m_NoteList) )

  0000c	e5943010	 ldr         r3, [r4, #0x10]
  00010	e1a05000	 mov         r5, r0
  00014	e3530000	 cmp         r3, #0
  00018	1594266c	 ldrne       r2, [r4, #0x66C]
  0001c	12843c06	 addne       r3, r4, #6, 24
  00020	1283306c	 addne       r3, r3, #0x6C
  00024	11520003	 cmpne       r2, r3

; 291  :     {
; 292  :         m_pDeviceContext->StreamReadyToRender(this);

  00028	15940050	 ldrne       r0, [r4, #0x50]
  0002c	11a01004	 movne       r1, r4
  00030	15903000	 ldrne       r3, [r0]
  00034	15933010	 ldrne       r3, [r3, #0x10]
  00038	11a0e00f	 movne       lr, pc
  0003c	112fff13	 bxne        r3

; 293  :     }
; 294  : 
; 295  :     return (Result==S_OK) ? MMSYSERR_NOERROR : MMSYSERR_ERROR;

  00040	e3550000	 cmp         r5, #0
  00044	03a00000	 moveq       r0, #0

; 296  : }

  00048	08bd4030	 ldmeqia     sp!, {r4, r5, lr}

; 293  :     }
; 294  : 
; 295  :     return (Result==S_OK) ? MMSYSERR_NOERROR : MMSYSERR_ERROR;

  0004c	13a00001	 movne       r0, #1

; 296  : }

  00050	18bd4030	 ldmneia     sp!, {r4, r5, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M35994|

			 ENDP  ; |?MidiMessage@CMidiStream@@QAAKI@Z|, CMidiStream::MidiMessage

	END
