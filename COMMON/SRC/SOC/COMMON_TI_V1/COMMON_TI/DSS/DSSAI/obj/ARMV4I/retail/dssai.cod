; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DSSAI\dssai.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A| [ DATA ] ; g_rgPipelineMapping
	EXPORT	|?g_rgPipelineScaling@@3PAUOMAPPipelineScaling@@A| [ DATA ] ; g_rgPipelineScaling
	EXPORT	|?g_dwDestinationRefCnt@@3PAKA| [ DATA ] ; g_dwDestinationRefCnt

  00000			 AREA	 |.bss|, NOINIT
|?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A| % 0x60 ; g_rgPipelineMapping
|?g_dwDestinationRefCnt@@3PAKA| % 0x8			; g_dwDestinationRefCnt

  00000			 AREA	 |.data|, DATA
|?g_rgPipelineScaling@@3PAUOMAPPipelineScaling@@A| DCD 0x1 ; g_rgPipelineScaling
	DCD	0x1
	DCD	0x0
	DCD	0x1
	DCD	0x1
	DCD	0x0
	DCD	0x1
	DCD	0x1
	DCD	0x0
	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T40443| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40440|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M40441|

			 ENDP  ; |SetEvent|

	EXPORT	|?GetLCDWidth@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetLCDWidth
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T40453| DCD	|$LN5@GetLCDWidt|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetLCDWidth@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetLCDWidth

; 303  :     DWORD                   GetLCDWidth() { return m_dwLcdWidth; }

  00000		 |$LN5@GetLCDWidt|
  00000		 |$M40450|
  00000	e59004ac	 ldr         r0, [r0, #0x4AC]
  00004	e12fff1e	 bx          lr
  00008		 |$M40451|

			 ENDP  ; |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetLCDWidth

	EXPORT	|?GetLCDHeight@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetLCDHeight

  00000			 AREA	 |.pdata|, PDATA
|$T40463| DCD	|$LN5@GetLCDHeig|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetLCDHeight@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetLCDHeight

; 304  :     DWORD                   GetLCDHeight() { return m_dwLcdHeight; }

  00000		 |$LN5@GetLCDHeig|
  00000		 |$M40460|
  00000	e59004b0	 ldr         r0, [r0, #0x4B0]
  00004	e12fff1e	 bx          lr
  00008		 |$M40461|

			 ENDP  ; |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetLCDHeight

	EXPORT	|?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| ; OMAPSurface::PixelFormat

  00000			 AREA	 |.pdata|, PDATA
|$T40473| DCD	|$LN5@PixelForma|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| PROC ; OMAPSurface::PixelFormat

; 761  :     OMAP_DSS_PIXELFORMAT    PixelFormat() { return m_ePixelFormat; }

  00000		 |$LN5@PixelForma|
  00000		 |$M40470|
  00000	e5900004	 ldr         r0, [r0, #4]
  00004	e12fff1e	 bx          lr
  00008		 |$M40471|

			 ENDP  ; |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|, OMAPSurface::PixelFormat

	EXPORT	|?PixelSize@OMAPSurface@@QAAKXZ|	; OMAPSurface::PixelSize

  00000			 AREA	 |.pdata|, PDATA
|$T40483| DCD	|$LN5@PixelSize|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelSize@OMAPSurface@@QAAKXZ| PROC	; OMAPSurface::PixelSize

; 763  :     DWORD                   PixelSize() { return m_dwPixelSize; }

  00000		 |$LN5@PixelSize|
  00000		 |$M40480|
  00000	e5900008	 ldr         r0, [r0, #8]
  00004	e12fff1e	 bx          lr
  00008		 |$M40481|

			 ENDP  ; |?PixelSize@OMAPSurface@@QAAKXZ|, OMAPSurface::PixelSize

	EXPORT	|?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ| ; OMAPSurface::ResizeParams

  00000			 AREA	 |.pdata|, PDATA
|$T40493| DCD	|$LN5@ResizePara|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ| PROC ; OMAPSurface::ResizeParams

; 773  :     RSZParams_t *           ResizeParams() { return &m_sRSZParams; }

  00000		 |$LN5@ResizePara|
  00000		 |$M40490|
  00000	e2800038	 add         r0, r0, #0x38
  00004	e12fff1e	 bx          lr
  00008		 |$M40491|

			 ENDP  ; |?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ|, OMAPSurface::ResizeParams

	EXPORT	|?OmapAssocSurface@OMAPSurface@@QAAPAV1@XZ| ; OMAPSurface::OmapAssocSurface

  00000			 AREA	 |.pdata|, PDATA
|$T40503| DCD	|$LN5@OmapAssocS|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OmapAssocSurface@OMAPSurface@@QAAPAV1@XZ| PROC ; OMAPSurface::OmapAssocSurface

; 777  :     OMAPSurface *           OmapAssocSurface(){return m_pAssocSurface;}    

  00000		 |$LN5@OmapAssocS|
  00000		 |$M40500|
  00000	e59000a0	 ldr         r0, [r0, #0xA0]
  00004	e12fff1e	 bx          lr
  00008		 |$M40501|

			 ENDP  ; |?OmapAssocSurface@OMAPSurface@@QAAPAV1@XZ|, OMAPSurface::OmapAssocSurface

	EXPORT	|??0OMAPDisplayController@@QAA@XZ|	; OMAPDisplayController::OMAPDisplayController
	EXPORT	|??_7OMAPDisplayController@@6B@| [ DATA ] ; OMAPDisplayController::`vftable'
	EXPORT	|??_C@_1IE@LBLCKAI@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl@| [ DATA ] ; `string'
	IMPORT	|SOCGetDSSInfo|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|?g_dwColorSpaceCoeff_BT601_Limited@@3PAKA| ; g_dwColorSpaceCoeff_BT601_Limited
	IMPORT	|??_EOMAPDisplayController@@UAAPAXI@Z|, WEAK |??_GOMAPDisplayController@@UAAPAXI@Z| ; OMAPDisplayController::`vector deleting destructor', OMAPDisplayController::`scalar deleting destructor'
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\dssai.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T40515| DCD	|$LN7@OMAPDispla|
	DCD	0x40002c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7OMAPDisplayController@@6B@| DCD |??_EOMAPDisplayController@@UAAPAXI@Z| ; OMAPDisplayController::`vftable'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@LBLCKAI@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "O", 0x0, "M"
	DCB	0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "p"
	DCB	0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0OMAPDisplayController@@QAA@XZ| PROC ; OMAPDisplayController::OMAPDisplayController

; 114  : {

  00000		 |$LN7@OMAPDispla|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40512|
  00004	e1a04000	 mov         r4, r0
  00008	e59f309c	 ldr         r3, [pc, #0x9C]

; 115  : 	RETAILMSG(1,(L"OMAPDisplayController::OMAPDisplayController ------------------\n\r"));

  0000c	e59f0094	 ldr         r0, [pc, #0x94]
  00010	e5843000	 str         r3, [r4]
  00014	eb000000	 bl          NKDbgPrintfW

; 116  :     m_pDSSRegs = NULL;
; 117  :     m_pDispRegs = NULL;
; 118  :     m_pVencRegs = NULL;
; 119  :     m_pRFBIRegs = NULL;
; 120  :     
; 121  :     m_dwPowerLevel = D4;
; 122  :     
; 123  :     m_bTVEnable = FALSE;
; 124  :     m_bHDMIEnable = FALSE;
; 125  : 
; 126  : 	m_bDVIEnable = FALSE;
; 127  : 
; 128  :     m_bGammaEnable = TRUE;
; 129  :    	m_dwEnableWaitForVerticalBlank = FALSE;
; 130  :     m_bDssIspRszEnabled = FALSE;
; 131  :     m_lastVsyncIRQStatus = 0;
; 132  :     
; 133  :     m_dwContrastLevel = DEFAULT_CONTRAST_LEVEL;
; 134  :     m_pGammaBufVirt = NULL;
; 135  :     
; 136  :     m_bDssIntThreadExit = FALSE;
; 137  :     m_hDssIntEvent = NULL;
; 138  :     m_hDssIntThread = NULL;
; 139  :     m_dwDssSysIntr = 0;
; 140  : 
; 141  :     m_dwVsyncPeriod = 0;
; 142  :     m_hVsyncEvent = NULL;
; 143  :     m_hVsyncEventSGX = NULL;
; 144  : 
; 145  :     m_hScanLineEvent = NULL;
; 146  :     
; 147  :     m_pColorSpaceCoeffs = g_dwColorSpaceCoeff_BT601_Limited;

  00018	e59f3084	 ldr         r3, [pc, #0x84]
  0001c	e3a02004	 mov         r2, #4
  00020	e3a01001	 mov         r1, #1
  00024	e3a0e003	 mov         lr, #3
  00028	e3a05000	 mov         r5, #0

; 148  :     
; 149  :     m_bLPREnable = FALSE;
; 150  : 
; 151  :     m_hSmartReflexPolicyAdapter = NULL;
; 152  : 
; 153  :     SOCGetDSSInfo(&m_dssinfo);

  0002c	e2840e52	 add         r0, r4, #0x52, 28
  00030	e58434a4	 str         r3, [r4, #0x4A4]
  00034	e5845004	 str         r5, [r4, #4]
  00038	e5845008	 str         r5, [r4, #8]
  0003c	e584500c	 str         r5, [r4, #0xC]
  00040	e5845018	 str         r5, [r4, #0x18]
  00044	e584248c	 str         r2, [r4, #0x48C]
  00048	e58454b8	 str         r5, [r4, #0x4B8]
  0004c	e58454cc	 str         r5, [r4, #0x4CC]
  00050	e58454d0	 str         r5, [r4, #0x4D0]
  00054	e58414e0	 str         r1, [r4, #0x4E0]
  00058	e5845504	 str         r5, [r4, #0x504]
  0005c	e5845518	 str         r5, [r4, #0x518]
  00060	e5845540	 str         r5, [r4, #0x540]
  00064	e584e4d4	 str         lr, [r4, #0x4D4]
  00068	e58454d8	 str         r5, [r4, #0x4D8]
  0006c	e58454f4	 str         r5, [r4, #0x4F4]
  00070	e58454e8	 str         r5, [r4, #0x4E8]
  00074	e58454ec	 str         r5, [r4, #0x4EC]
  00078	e58454f0	 str         r5, [r4, #0x4F0]
  0007c	e5845500	 str         r5, [r4, #0x500]
  00080	e58454f8	 str         r5, [r4, #0x4F8]
  00084	e58454fc	 str         r5, [r4, #0x4FC]
  00088	e5845508	 str         r5, [r4, #0x508]
  0008c	e5845514	 str         r5, [r4, #0x514]
  00090	e584551c	 str         r5, [r4, #0x51C]
  00094	eb000000	 bl          SOCGetDSSInfo

; 154  : }

  00098	e1a00004	 mov         r0, r4
  0009c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN8@OMAPDispla|
  000a4		 |$LN9@OMAPDispla|
  000a4	00000000	 DCD         |?g_dwColorSpaceCoeff_BT601_Limited@@3PAKA|
  000a8		 |$LN10@OMAPDispla|
  000a8	00000000	 DCD         |??_C@_1IE@LBLCKAI@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl@|
  000ac		 |$LN11@OMAPDispla|
  000ac	00000000	 DCD         |??_7OMAPDisplayController@@6B@|
  000b0		 |$M40513|

			 ENDP  ; |??0OMAPDisplayController@@QAA@XZ|, OMAPDisplayController::OMAPDisplayController

	EXPORT	|?UninitInterrupts@OMAPDisplayController@@QAAXXZ| ; OMAPDisplayController::UninitInterrupts
	IMPORT	|CloseHandle|
	IMPORT	|WaitForSingleObject|
	IMPORT	|KernelIoControl|
	IMPORT	|InterruptDisable|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T40531| DCD	|$LN12@UninitInte|
	DCD	0x40003402
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\dssai.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UninitInterrupts@OMAPDisplayController@@QAAXXZ| PROC ; OMAPDisplayController::UninitInterrupts

; 526  : {

  00000		 |$LN12@UninitInte|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M40528|
  00008	e1a04000	 mov         r4, r0

; 527  :     // unregister system interrupt
; 528  :     if (m_dwDssSysIntr != 0)

  0000c	e59434f0	 ldr         r3, [r4, #0x4F0]
  00010	e3a05000	 mov         r5, #0
  00014	e3530000	 cmp         r3, #0
  00018	0a000009	 beq         |$LN5@UninitInte|

; 529  :     {
; 530  :         InterruptDisable(m_dwDssSysIntr);

  0001c	e1a00003	 mov         r0, r3
  00020	eb000000	 bl          InterruptDisable

; 531  :         KernelIoControl(
; 532  :             IOCTL_HAL_RELEASE_SYSINTR, &m_dwDssSysIntr,
; 533  :             sizeof(m_dwDssSysIntr), NULL, 0, NULL
; 534  :             );

  00024	e59f00a0	 ldr         r0, [pc, #0xA0]
  00028	e3a03000	 mov         r3, #0
  0002c	e3a02004	 mov         r2, #4
  00030	e2841e4f	 add         r1, r4, #0x4F, 28
  00034	e58d5004	 str         r5, [sp, #4]
  00038	e58d5000	 str         r5, [sp]
  0003c	eb000000	 bl          KernelIoControl

; 535  : 
; 536  :         // reinit
; 537  :         m_dwDssSysIntr = 0;

  00040	e58454f0	 str         r5, [r4, #0x4F0]
  00044		 |$LN5@UninitInte|

; 538  :     }
; 539  : 
; 540  :     // stop thread
; 541  :     if (m_hDssIntEvent != NULL)

  00044	e59434e8	 ldr         r3, [r4, #0x4E8]
  00048	e1b00003	 movs        r0, r3
  0004c	0a00000f	 beq         |$LN4@UninitInte|

; 542  :     {
; 543  :         if (m_hDssIntThread != NULL)

  00050	e59434ec	 ldr         r3, [r4, #0x4EC]
  00054	e3530000	 cmp         r3, #0
  00058	0a000009	 beq         |$LN3@UninitInte|

; 544  :         {
; 545  :             // Signal stop to thread
; 546  :             m_bDssIntThreadExit = TRUE;

  0005c	e3a03001	 mov         r3, #1

; 547  : 
; 548  :             // Set event to wake it
; 549  :             SetEvent(m_hDssIntEvent);

  00060	e3a01003	 mov         r1, #3
  00064	e58434f4	 str         r3, [r4, #0x4F4]
  00068	eb000000	 bl          EventModify

; 550  : 
; 551  :             // Wait until thread exits
; 552  :             WaitForSingleObject(m_hDssIntThread, INFINITE);

  0006c	e59404ec	 ldr         r0, [r4, #0x4EC]
  00070	e3e01000	 mvn         r1, #0
  00074	eb000000	 bl          WaitForSingleObject

; 553  : 
; 554  :             // Close handle
; 555  :             CloseHandle(m_hDssIntThread);

  00078	e59404ec	 ldr         r0, [r4, #0x4EC]
  0007c	eb000000	 bl          CloseHandle

; 556  : 
; 557  :             // reinit
; 558  :             m_hDssIntThread = NULL;

  00080	e58454ec	 str         r5, [r4, #0x4EC]
  00084		 |$LN3@UninitInte|

; 559  :         }
; 560  : 
; 561  :         // close event handle
; 562  :         CloseHandle(m_hDssIntEvent);

  00084	e59404e8	 ldr         r0, [r4, #0x4E8]
  00088	eb000000	 bl          CloseHandle

; 563  :         m_hDssIntEvent = NULL;

  0008c	e58454e8	 str         r5, [r4, #0x4E8]
  00090		 |$LN4@UninitInte|

; 564  :     }
; 565  : 
; 566  :     if(m_hVsyncEvent != NULL)

  00090	e59434f8	 ldr         r3, [r4, #0x4F8]
  00094	e3530000	 cmp         r3, #0
  00098	0a000002	 beq         |$LN2@UninitInte|

; 567  :     {
; 568  :         CloseHandle(m_hVsyncEvent);

  0009c	e1a00003	 mov         r0, r3
  000a0	eb000000	 bl          CloseHandle

; 569  :         m_hVsyncEvent = NULL;

  000a4	e58454f8	 str         r5, [r4, #0x4F8]
  000a8		 |$LN2@UninitInte|

; 570  :     }
; 571  : 
; 572  :     if(m_hScanLineEvent != NULL)

  000a8	e5943508	 ldr         r3, [r4, #0x508]
  000ac	e3530000	 cmp         r3, #0
  000b0	0a000002	 beq         |$LN1@UninitInte|

; 573  :     {
; 574  :         CloseHandle(m_hScanLineEvent);

  000b4	e1a00003	 mov         r0, r3
  000b8	eb000000	 bl          CloseHandle

; 575  :         m_hScanLineEvent = NULL;

  000bc	e5845508	 str         r5, [r4, #0x508]
  000c0		 |$LN1@UninitInte|

; 576  :     }
; 577  : 
; 578  : }

  000c0	e28dd008	 add         sp, sp, #8
  000c4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$LN13@UninitInte|
  000cc		 |$LN14@UninitInte|
  000cc	010100d8	 DCD         0x10100d8
  000d0		 |$M40529|

			 ENDP  ; |?UninitInterrupts@OMAPDisplayController@@QAAXXZ|, OMAPDisplayController::UninitInterrupts

	EXPORT	|?SetSurfaceMgr@OMAPDisplayController@@QAAHPAVOMAPSurfaceManager@@@Z| ; OMAPDisplayController::SetSurfaceMgr

  00000			 AREA	 |.pdata|, PDATA
|$T40544| DCD	|$LN5@SetSurface|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetSurfaceMgr@OMAPDisplayController@@QAAHPAVOMAPSurfaceManager@@@Z| PROC ; OMAPDisplayController::SetSurfaceMgr

; 801  : {

  00000		 |$LN5@SetSurface|
  00000		 |$M40541|

; 802  :     //  Reference the given surface mamager
; 803  :     m_pSurfaceMgr = pSurfMgr;

  00000	e58014e4	 str         r1, [r0, #0x4E4]

; 804  :     
; 805  :     //  Return result
; 806  :     return TRUE;

  00004	e3a00001	 mov         r0, #1

; 807  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M40542|

			 ENDP  ; |?SetSurfaceMgr@OMAPDisplayController@@QAAHPAVOMAPSurfaceManager@@@Z|, OMAPDisplayController::SetSurfaceMgr

	EXPORT	|?GetFIRCoef@@YAXPAXKKK@Z|		; GetFIRCoef
	IMPORT	|?g_coef_M8@@3PAY07EA|			; g_coef_M8
	IMPORT	|?g_coef_M9@@3PAY07EA|			; g_coef_M9
	IMPORT	|?g_coef_M10@@3PAY07EA|			; g_coef_M10
	IMPORT	|?g_coef_M11@@3PAY07EA|			; g_coef_M11
	IMPORT	|?g_coef_M12@@3PAY07EA|			; g_coef_M12
	IMPORT	|?g_coef_M13@@3PAY07EA|			; g_coef_M13
	IMPORT	|?g_coef_M14@@3PAY07EA|			; g_coef_M14
	IMPORT	|?g_coef_M16@@3PAY07EA|			; g_coef_M16
	IMPORT	|?g_coef_M19@@3PAY07EA|			; g_coef_M19
	IMPORT	|?g_coef_M22@@3PAY07EA|			; g_coef_M22
	IMPORT	|?g_coef_M26@@3PAY07EA|			; g_coef_M26
	IMPORT	|?g_coef_M32@@3PAY07EA|			; g_coef_M32
	IMPORT	|?g_coef3_M8@@3PAY07EA|			; g_coef3_M8
	IMPORT	|?g_coef3_M16@@3PAY07EA|		; g_coef3_M16
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T40559| DCD	|$LN38@GetFIRCoef|
	DCD	0x40005001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetFIRCoef@@YAXPAXKKK@Z| PROC	; GetFIRCoef

; 1070 : {

  00000		 |$LN38@GetFIRCoef|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40556|

; 1071 :     if (dwTaps == 3)

  00004	e3510003	 cmp         r1, #3
  00008	1a000008	 bne         |$LN30@GetFIRCoef|

; 1072 :     {
; 1073 :         if (dwPhaseInc > (128*14))  {memcpy(pCoeffs, g_coef3_M16, sizeof(g_coef3_M16));}

  0000c	e3520c07	 cmp         r2, #7, 24
  00010	859f1124	 ldrhi       r1, [pc, #0x124]
  00014	8a000037	 bhi         |$LN34@GetFIRCoef|

; 1074 :         else if (dwFlickerFilter)   {memcpy(pCoeffs, g_coef3_M16, sizeof(g_coef3_M16));}

  00018	e3530000	 cmp         r3, #0
  0001c	159f1118	 ldrne       r1, [pc, #0x118]
  00020	e3a02028	 mov         r2, #0x28
  00024	1a000034	 bne         |$LN35@GetFIRCoef|

; 1075 :         else                        {memcpy(pCoeffs, g_coef3_M8, sizeof(g_coef3_M8));  }

  00028	e59f1108	 ldr         r1, [pc, #0x108]

; 1076 :     }
; 1077 :     else //dwTaps == 5

  0002c	ea000032	 b           |$LN35@GetFIRCoef|
  00030		 |$LN30@GetFIRCoef|

; 1078 :     {
; 1079 :         if(dwPhaseInc > (128*26))                               {memcpy(pCoeffs, g_coef_M32, sizeof(g_coef_M32));}

  00030	e3520c0d	 cmp         r2, #0xD, 24
  00034	859f10f8	 ldrhi       r1, [pc, #0xF8]
  00038	8a00002e	 bhi         |$LN34@GetFIRCoef|

; 1080 :         else if (dwPhaseInc > (128*22))                         {memcpy(pCoeffs, g_coef_M26, sizeof(g_coef_M26));}

  0003c	e3520c0b	 cmp         r2, #0xB, 24
  00040	859f10e8	 ldrhi       r1, [pc, #0xE8]
  00044	8a00002b	 bhi         |$LN34@GetFIRCoef|

; 1081 :         else if (dwPhaseInc > (128*19))                         {memcpy(pCoeffs, g_coef_M22, sizeof(g_coef_M22));}

  00048	e3520d26	 cmp         r2, #0x26, 26
  0004c	859f10d8	 ldrhi       r1, [pc, #0xD8]
  00050	8a000028	 bhi         |$LN34@GetFIRCoef|

; 1082 :         else if (dwPhaseInc > (128*16))                         {memcpy(pCoeffs, g_coef_M19, sizeof(g_coef_M19));}

  00054	e3520b02	 cmp         r2, #2, 22
  00058	859f10c8	 ldrhi       r1, [pc, #0xC8]
  0005c	8a000025	 bhi         |$LN34@GetFIRCoef|

; 1083 :         else if (dwPhaseInc > (128*14))                         {memcpy(pCoeffs, g_coef_M16, sizeof(g_coef_M16));}

  00060	e3520c07	 cmp         r2, #7, 24
  00064	9a000001	 bls         |$LN16@GetFIRCoef|
  00068		 |$LN33@GetFIRCoef|
  00068	e59f10b4	 ldr         r1, [pc, #0xB4]
  0006c	ea000021	 b           |$LN34@GetFIRCoef|
  00070		 |$LN16@GetFIRCoef|

; 1084 :         else if ((dwPhaseInc > (128*13)) && (!dwFlickerFilter)) {memcpy(pCoeffs, g_coef_M14, sizeof(g_coef_M14));}

  00070	e3520d1a	 cmp         r2, #0x1A, 26
  00074	9a000002	 bls         |$LN14@GetFIRCoef|
  00078	e3530000	 cmp         r3, #0
  0007c	059f109c	 ldreq       r1, [pc, #0x9C]
  00080	0a00001c	 beq         |$LN34@GetFIRCoef|
  00084		 |$LN14@GetFIRCoef|

; 1085 :         else if ((dwPhaseInc > (128*12)) && (!dwFlickerFilter)) {memcpy(pCoeffs, g_coef_M13, sizeof(g_coef_M13));}

  00084	e3520c06	 cmp         r2, #6, 24
  00088	9a000002	 bls         |$LN12@GetFIRCoef|
  0008c	e3530000	 cmp         r3, #0
  00090	059f1084	 ldreq       r1, [pc, #0x84]
  00094	0a000017	 beq         |$LN34@GetFIRCoef|
  00098		 |$LN12@GetFIRCoef|

; 1086 :         else if ((dwPhaseInc > (128*11)) && (!dwFlickerFilter)) {memcpy(pCoeffs, g_coef_M12, sizeof(g_coef_M12));}

  00098	e3520d16	 cmp         r2, #0x16, 26
  0009c	9a000002	 bls         |$LN10@GetFIRCoef|
  000a0	e3530000	 cmp         r3, #0
  000a4	059f106c	 ldreq       r1, [pc, #0x6C]
  000a8	0a000012	 beq         |$LN34@GetFIRCoef|
  000ac		 |$LN10@GetFIRCoef|

; 1087 :         else if ((dwPhaseInc > (128*10)) && (!dwFlickerFilter)) {memcpy(pCoeffs, g_coef_M11, sizeof(g_coef_M11));}

  000ac	e3520c05	 cmp         r2, #5, 24
  000b0	9a000002	 bls         |$LN8@GetFIRCoef|
  000b4	e3530000	 cmp         r3, #0
  000b8	059f1054	 ldreq       r1, [pc, #0x54]
  000bc	0a00000d	 beq         |$LN34@GetFIRCoef|
  000c0		 |$LN8@GetFIRCoef|

; 1088 :         else if ((dwPhaseInc > (128*9))  && (!dwFlickerFilter)) {memcpy(pCoeffs, g_coef_M10, sizeof(g_coef_M10));}

  000c0	e3520d12	 cmp         r2, #0x12, 26
  000c4	9a000002	 bls         |$LN6@GetFIRCoef|
  000c8	e3530000	 cmp         r3, #0
  000cc	059f103c	 ldreq       r1, [pc, #0x3C]
  000d0	0a000008	 beq         |$LN34@GetFIRCoef|
  000d4		 |$LN6@GetFIRCoef|

; 1089 :         else if ((dwPhaseInc > (128*8))  && (!dwFlickerFilter)) {memcpy(pCoeffs, g_coef_M9,  sizeof(g_coef_M9)); }

  000d4	e3520b01	 cmp         r2, #1, 22
  000d8	9a000003	 bls         |$LN4@GetFIRCoef|
  000dc	e3530000	 cmp         r3, #0
  000e0	1affffe0	 bne         |$LN33@GetFIRCoef|
  000e4	e59f1020	 ldr         r1, [pc, #0x20]
  000e8	ea000002	 b           |$LN34@GetFIRCoef|
  000ec		 |$LN4@GetFIRCoef|

; 1090 :         else if (dwFlickerFilter)                               {memcpy(pCoeffs, g_coef_M16, sizeof(g_coef_M16));}

  000ec	e3530000	 cmp         r3, #0
  000f0	1affffdc	 bne         |$LN33@GetFIRCoef|

; 1091 :         else                                                    {memcpy(pCoeffs, g_coef_M8,  sizeof(g_coef_M8)); }

  000f4	e59f100c	 ldr         r1, [pc, #0xC]
  000f8		 |$LN34@GetFIRCoef|
  000f8	e3a02028	 mov         r2, #0x28
  000fc		 |$LN35@GetFIRCoef|
  000fc	eb000000	 bl          memcpy

; 1092 :   }
; 1093 : }

  00100	e49de004	 ldr         lr, [sp], #4
  00104	e12fff1e	 bx          lr
  00108		 |$LN39@GetFIRCoef|
  00108		 |$LN40@GetFIRCoef|
  00108	00000000	 DCD         |?g_coef_M8@@3PAY07EA|
  0010c		 |$LN41@GetFIRCoef|
  0010c	00000000	 DCD         |?g_coef_M9@@3PAY07EA|
  00110		 |$LN42@GetFIRCoef|
  00110	00000000	 DCD         |?g_coef_M10@@3PAY07EA|
  00114		 |$LN43@GetFIRCoef|
  00114	00000000	 DCD         |?g_coef_M11@@3PAY07EA|
  00118		 |$LN44@GetFIRCoef|
  00118	00000000	 DCD         |?g_coef_M12@@3PAY07EA|
  0011c		 |$LN45@GetFIRCoef|
  0011c	00000000	 DCD         |?g_coef_M13@@3PAY07EA|
  00120		 |$LN46@GetFIRCoef|
  00120	00000000	 DCD         |?g_coef_M14@@3PAY07EA|
  00124		 |$LN47@GetFIRCoef|
  00124	00000000	 DCD         |?g_coef_M16@@3PAY07EA|
  00128		 |$LN48@GetFIRCoef|
  00128	00000000	 DCD         |?g_coef_M19@@3PAY07EA|
  0012c		 |$LN49@GetFIRCoef|
  0012c	00000000	 DCD         |?g_coef_M22@@3PAY07EA|
  00130		 |$LN50@GetFIRCoef|
  00130	00000000	 DCD         |?g_coef_M26@@3PAY07EA|
  00134		 |$LN51@GetFIRCoef|
  00134	00000000	 DCD         |?g_coef_M32@@3PAY07EA|
  00138		 |$LN52@GetFIRCoef|
  00138	00000000	 DCD         |?g_coef3_M8@@3PAY07EA|
  0013c		 |$LN53@GetFIRCoef|
  0013c	00000000	 DCD         |?g_coef3_M16@@3PAY07EA|
  00140		 |$M40557|

			 ENDP  ; |?GetFIRCoef@@YAXPAXKKK@Z|, GetFIRCoef

	EXPORT	|?NeedISPResizer@@YAHKKK@Z|		; NeedISPResizer
	IMPORT	|__utod|
	IMPORT	|__muld|
	IMPORT	|ceil|
	IMPORT	|__dtou|

  00000			 AREA	 |.pdata|, PDATA
|$T40596| DCD	|$LN14@NeedISPRes|
	DCD	0x40002b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NeedISPResizer@@YAHKKK@Z| PROC	; NeedISPResizer

; 1097 : {

  00000		 |$LN14@NeedISPRes|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M40593|
  00004	e1a06002	 mov         r6, r2
  00008	e1a04001	 mov         r4, r1

; 1098 :     DWORD totalScaleRequired;
; 1099 : 
; 1100 :     /* Not using ISP resizer for upsampling */    
; 1101 :     if ((dwHorzScale<1024) || (dwVertScale<1024))

  0000c	e3500b01	 cmp         r0, #1, 22
  00010	3a000022	 bcc         |$LN4@NeedISPRes|
  00014	e3540b01	 cmp         r4, #1, 22
  00018	3a000020	 bcc         |$LN4@NeedISPRes|

; 1103 :     /* no scalar needed */
; 1104 :     if ((dwHorzScale==1024) && (dwVertScale==1024))

  0001c	e3500b01	 cmp         r0, #1, 22
  00020	1a000001	 bne         |$LN3@NeedISPRes|
  00024	e3540b01	 cmp         r4, #1, 22

; 1105 :         return FALSE;

  00028	0a00001c	 beq         |$LN4@NeedISPRes|
  0002c		 |$LN3@NeedISPRes|

; 1106 : 
; 1107 :     /* all other cases involve downsampling */
; 1108 :     dwHorzScale=(DWORD)ceil((double)dwHorzScale/1024);

  0002c	eb000000	 bl          __utod
  00030	e3a075fd	 mov         r7, #0xFD, 10
  00034	e3873601	 orr         r3, r7, #1, 12
  00038	e3a02000	 mov         r2, #0
  0003c	eb000000	 bl          __muld
  00040	eb000000	 bl          ceil
  00044	eb000000	 bl          __dtou
  00048	e1a05000	 mov         r5, r0

; 1109 :     dwVertScale=(DWORD)ceil((double)dwVertScale/1024);

  0004c	e1a00004	 mov         r0, r4
  00050	eb000000	 bl          __utod
  00054	e3a02000	 mov         r2, #0
  00058	e3873601	 orr         r3, r7, #1, 12
  0005c	eb000000	 bl          __muld
  00060	eb000000	 bl          ceil
  00064	eb000000	 bl          __dtou

; 1110 : 
; 1111 :     totalScaleRequired=((dwHorzScale==1)?0:dwHorzScale)+
; 1112 :                         ((dwVertScale==1)?0:dwVertScale);

  00068	e3550001	 cmp         r5, #1
  0006c	03a03000	 moveq       r3, #0
  00070	11a03005	 movne       r3, r5
  00074	e3500001	 cmp         r0, #1
  00078	03a02000	 moveq       r2, #0
  0007c	11a02000	 movne       r2, r0
  00080	e0823003	 add         r3, r2, r3

; 1113 :                         
; 1114 :     if ((totalScaleRequired>PCD) && (dwHorzScale<=4) && (dwVertScale<=4))

  00084	e1530006	 cmp         r3, r6
  00088	9a000004	 bls         |$LN4@NeedISPRes|
  0008c	e3550004	 cmp         r5, #4
  00090	93500004	 cmpls       r0, #4

; 1115 :     {
; 1116 :         return TRUE;

  00094	93a00001	 movls       r0, #1

; 1117 :     }
; 1118 :     else
; 1119 :     {
; 1120 :         return FALSE;
; 1121 :     }
; 1122 :         
; 1123 : }

  00098	98bd40f0	 ldmlsia     sp!, {r4 - r7, lr}
  0009c	912fff1e	 bxls        lr
  000a0		 |$LN4@NeedISPRes|

; 1102 :         return FALSE;

  000a0	e3a00000	 mov         r0, #0

; 1117 :     }
; 1118 :     else
; 1119 :     {
; 1120 :         return FALSE;
; 1121 :     }
; 1122 :         
; 1123 : }

  000a4	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$M40594|

			 ENDP  ; |?NeedISPResizer@@YAHKKK@Z|, NeedISPResizer

	EXPORT	|?SetContrastLevel@OMAPDisplayController@@QAAHK@Z| ; OMAPDisplayController::SetContrastLevel
	IMPORT	|?g_dwGammaTable@@3PAY0BAA@KA|		; g_dwGammaTable

  00000			 AREA	 |.pdata|, PDATA
|$T40609| DCD	|$LN7@SetContras|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetContrastLevel@OMAPDisplayController@@QAAHK@Z| PROC ; OMAPDisplayController::SetContrastLevel

; 3420 : {

  00000		 |$LN7@SetContras|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40606|
  00004	e1a0e001	 mov         lr, r1
  00008	e1a04000	 mov         r4, r0

; 3421 :     //  Set contrast level by copying in new gamma correction curve
; 3422 :     m_dwContrastLevel = (dwContrastLevel < NUM_CONTRAST_LEVELS) ? dwContrastLevel : NUM_CONTRAST_LEVELS - 1;
; 3423 : 
; 3424 :     //  Copy the selected table to the gamma physical memory location
; 3425 :     memcpy(m_pGammaBufVirt, &(g_dwGammaTable[(NUM_CONTRAST_LEVELS - 1) - m_dwContrastLevel][0]), NUM_GAMMA_VALS*sizeof(DWORD));

  0000c	e59f3028	 ldr         r3, [pc, #0x28]
  00010	e35e0007	 cmp         lr, #7
  00014	e59404d8	 ldr         r0, [r4, #0x4D8]
  00018	e2833b06	 add         r3, r3, #6, 22
  0001c	23a0e006	 movcs       lr, #6
  00020	e043150e	 sub         r1, r3, lr, lsl #10
  00024	e3a02b01	 mov         r2, #1, 22
  00028	e584e4d4	 str         lr, [r4, #0x4D4]
  0002c	eb000000	 bl          memcpy

; 3426 :     return TRUE;

  00030	e3a00001	 mov         r0, #1

; 3427 : }

  00034	e8bd4010	 ldmia       sp!, {r4, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$LN8@SetContras|
  0003c		 |$LN9@SetContras|
  0003c	00000000	 DCD         |?g_dwGammaTable@@3PAY0BAA@KA|
  00040		 |$M40607|

			 ENDP  ; |?SetContrastLevel@OMAPDisplayController@@QAAHK@Z|, OMAPDisplayController::SetContrastLevel

	EXPORT	|?SetTvOutFilterLevel@OMAPDisplayController@@QAAHK@Z| ; OMAPDisplayController::SetTvOutFilterLevel

  00000			 AREA	 |.pdata|, PDATA
|$T40622| DCD	|$LN5@SetTvOutFi|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetTvOutFilterLevel@OMAPDisplayController@@QAAHK@Z| PROC ; OMAPDisplayController::SetTvOutFilterLevel

; 4065 : {

  00000		 |$LN5@SetTvOutFi|
  00000		 |$M40619|

; 4066 :     //  Set flicker filter level
; 4067 :     m_dwTVFilterLevel = dwTVFilterLevel;

  00000	e58014bc	 str         r1, [r0, #0x4BC]

; 4068 :     return TRUE;

  00004	e3a00001	 mov         r0, #1

; 4069 : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M40620|

			 ENDP  ; |?SetTvOutFilterLevel@OMAPDisplayController@@QAAHK@Z|, OMAPDisplayController::SetTvOutFilterLevel

	EXPORT	|?DVISelect@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::DVISelect
	IMPORT	|LcdPdd_DVI_Select|

  00000			 AREA	 |.pdata|, PDATA
|$T40632| DCD	|$LN5@DVISelect|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DVISelect@OMAPDisplayController@@QAAHH@Z| PROC ; OMAPDisplayController::DVISelect

; 4198 : {

  00000		 |$LN5@DVISelect|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40629|

; 4199 :     LcdPdd_DVI_Select(bSelectDVI);

  00004	e1a00001	 mov         r0, r1
  00008	eb000000	 bl          LcdPdd_DVI_Select

; 4200 :     return TRUE;

  0000c	e3a00001	 mov         r0, #1

; 4201 : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M40630|

			 ENDP  ; |?DVISelect@OMAPDisplayController@@QAAHH@Z|, OMAPDisplayController::DVISelect

	EXPORT	|?EnableDVI@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::EnableDVI
	IMPORT	|LcdPdd_SetPowerLevel|

  00000			 AREA	 |.pdata|, PDATA
|$T40644| DCD	|$LN8@EnableDVI|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableDVI@OMAPDisplayController@@QAAHH@Z| PROC ; OMAPDisplayController::EnableDVI

; 4208 : {

  00000		 |$LN8@EnableDVI|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40641|
  00004	e3510000	 cmp         r1, #0
  00008	e1a04000	 mov         r4, r0

; 4209 :     BOOL    bResult = FALSE;
; 4210 : 
; 4211 :     //  Enable/disable DVI
; 4212 :     if ( bEnable )
; 4213 :     {
; 4214 :         //  Enable DVI        
; 4215 :         LcdPdd_SetPowerLevel(D4);

  0000c	e3a00004	 mov         r0, #4
  00010	0a000006	 beq         |$LN2@EnableDVI|
  00014	eb000000	 bl          LcdPdd_SetPowerLevel

; 4216 :         LcdPdd_DVI_Select(TRUE);

  00018	e3a00001	 mov         r0, #1
  0001c	eb000000	 bl          LcdPdd_DVI_Select

; 4217 :         LcdPdd_SetPowerLevel(D0);

  00020	e3a00000	 mov         r0, #0
  00024	eb000000	 bl          LcdPdd_SetPowerLevel

; 4218 :         m_bDVIEnable = TRUE;

  00028	e3a03001	 mov         r3, #1

; 4219 :     }
; 4220 :     else

  0002c	ea000005	 b           |$LN5@EnableDVI|
  00030		 |$LN2@EnableDVI|

; 4221 :     {
; 4222 :         //  Disable DVI        
; 4223 :         LcdPdd_SetPowerLevel(D4);

  00030	eb000000	 bl          LcdPdd_SetPowerLevel

; 4224 :         LcdPdd_DVI_Select(FALSE);

  00034	e3a00000	 mov         r0, #0
  00038	eb000000	 bl          LcdPdd_DVI_Select

; 4225 :         LcdPdd_SetPowerLevel(D0);

  0003c	e3a00000	 mov         r0, #0
  00040	eb000000	 bl          LcdPdd_SetPowerLevel

; 4226 :         m_bDVIEnable = FALSE;

  00044	e3a03000	 mov         r3, #0
  00048		 |$LN5@EnableDVI|
  00048	e58434d0	 str         r3, [r4, #0x4D0]

; 4227 :     }
; 4228 : 
; 4229 :     //  Success
; 4230 :     bResult = TRUE;
; 4231 : 
; 4232 :     //  Return result
; 4233 :     return bResult;

  0004c	e3a00001	 mov         r0, #1

; 4234 : }

  00050	e8bd4010	 ldmia       sp!, {r4, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M40642|

			 ENDP  ; |?EnableDVI@OMAPDisplayController@@QAAHH@Z|, OMAPDisplayController::EnableDVI

	EXPORT	|?AccessRegs@OMAPDisplayController@@IAAHXZ| ; OMAPDisplayController::AccessRegs
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T40655| DCD	|$LN9@AccessRegs|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AccessRegs@OMAPDisplayController@@IAAHXZ| PROC ; OMAPDisplayController::AccessRegs

; 4383 : {

  00000		 |$LN9@AccessRegs|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40652|
  00004	e1a04000	 mov         r4, r0

; 4384 :     BOOL    bResult = FALSE;
; 4385 : 
; 4386 :     //  Ensures that DSS regs can be accessed at current power level
; 4387 :     //  Locks power level at current level until ReleaseRegs called
; 4388 :     //  Returns FALSE if power level is too low to access regs
; 4389 : 
; 4390 :     //  Lock access to power level
; 4391 :     EnterCriticalSection( &m_csPowerLock );

  00008	e2840e49	 add         r0, r4, #0x49, 28
  0000c	e3a05000	 mov         r5, #0
  00010	eb000000	 bl          EnterCriticalSection

; 4392 :     
; 4393 :     //  Check power level
; 4394 :     switch( m_dwPowerLevel )

  00014	e594348c	 ldr         r3, [r4, #0x48C]
  00018	e3530002	 cmp         r3, #2
  0001c	9a000003	 bls         |$LN2@AccessRegs|
  00020	e3530004	 cmp         r3, #4
  00024	8a000002	 bhi         |$LN3@AccessRegs|

; 4401 :             break;
; 4402 : 
; 4403 :         case D3:
; 4404 :         case D4:
; 4405 :             //  Clocks are off at this level
; 4406 :             bResult = FALSE;

  00028	e3a05000	 mov         r5, #0

; 4407 :             break;

  0002c	ea000000	 b           |$LN3@AccessRegs|
  00030		 |$LN2@AccessRegs|

; 4395 :     {
; 4396 :         case D0:
; 4397 :         case D1:
; 4398 :         case D2:
; 4399 :             //  Clocks are on at this level
; 4400 :             bResult = TRUE;

  00030	e3a05001	 mov         r5, #1
  00034		 |$LN3@AccessRegs|

; 4408 :     }
; 4409 :     
; 4410 :     //  Return result
; 4411 :     return bResult;
; 4412 : }

  00034	e1a00005	 mov         r0, r5
  00038	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M40653|

			 ENDP  ; |?AccessRegs@OMAPDisplayController@@IAAHXZ|, OMAPDisplayController::AccessRegs

	EXPORT	|?ReleaseRegs@OMAPDisplayController@@IAAHXZ| ; OMAPDisplayController::ReleaseRegs
	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T40665| DCD	|$LN5@ReleaseReg|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ReleaseRegs@OMAPDisplayController@@IAAHXZ| PROC ; OMAPDisplayController::ReleaseRegs

; 4417 : {

  00000		 |$LN5@ReleaseReg|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40662|

; 4418 :     //  Releases power lock
; 4419 :     LeaveCriticalSection( &m_csPowerLock );

  00004	e2800e49	 add         r0, r0, #0x49, 28
  00008	eb000000	 bl          LeaveCriticalSection

; 4420 :     return TRUE;

  0000c	e3a00001	 mov         r0, #1

; 4421 : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M40663|

			 ENDP  ; |?ReleaseRegs@OMAPDisplayController@@IAAHXZ|, OMAPDisplayController::ReleaseRegs

	EXPORT	|?FlushRegs@OMAPDisplayController@@IAAHK@Z| ; OMAPDisplayController::FlushRegs
	IMPORT	|StallExecution|

  00000			 AREA	 |.pdata|, PDATA
|$T40684| DCD	|$LN15@FlushRegs|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FlushRegs@OMAPDisplayController@@IAAHK@Z| PROC ; OMAPDisplayController::FlushRegs

; 4428 : {

  00000		 |$LN15@FlushRegs|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M40681|
  00004	e1a05001	 mov         r5, r1
  00008	e1a06000	 mov         r6, r0

; 4429 :     DWORD   dwTimeout = DISPLAY_TIMEOUT;
; 4430 : 
; 4431 :     //  Ensure that registers can be flushed
; 4432 :     while(((INREG32(&m_pDispRegs->DISPC_CONTROL) & dwDestGo) == dwDestGo) &&  (dwTimeout-- > 0))

  0000c	e3a0401e	 mov         r4, #0x1E
  00010	ea000004	 b           |$LN12@FlushRegs|
  00014		 |$LL3@FlushRegs|
  00014	e3540000	 cmp         r4, #0
  00018	e2444001	 sub         r4, r4, #1
  0001c	0a000006	 beq         |$LN10@FlushRegs|

; 4433 :     {
; 4434 :         // delay
; 4435 :         StallExecution(10);

  00020	e3a0000a	 mov         r0, #0xA
  00024	eb000000	 bl          StallExecution
  00028		 |$LN12@FlushRegs|
  00028	e5963008	 ldr         r3, [r6, #8]
  0002c	e5933040	 ldr         r3, [r3, #0x40]
  00030	e0033005	 and         r3, r3, r5
  00034	e1530005	 cmp         r3, r5
  00038	0afffff5	 beq         |$LL3@FlushRegs|
  0003c		 |$LN10@FlushRegs|

; 4436 :     }
; 4437 : 
; 4438 :     if( dwTimeout == 0 )
; 4439 :     {
; 4440 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::FlushRegs: "
; 4441 :              L"Failed to flush regs\r\n"
; 4442 :             ));
; 4443 :     }
; 4444 : 
; 4445 :     //  Flush the shadow registers
; 4446 :     SETREG32( &m_pDispRegs->DISPC_CONTROL, dwDestGo );

  0003c	e5962008	 ldr         r2, [r6, #8]

; 4447 : 
; 4448 : 
; 4449 :     //  Return result
; 4450 :     return (dwTimeout > 0);

  00040	e3540000	 cmp         r4, #0
  00044	13a00001	 movne       r0, #1
  00048	e5923040	 ldr         r3, [r2, #0x40]
  0004c	e1833005	 orr         r3, r3, r5
  00050	e5823040	 str         r3, [r2, #0x40]

; 4451 : }

  00054	18bd4070	 ldmneia     sp!, {r4 - r6, lr}

; 4447 : 
; 4448 : 
; 4449 :     //  Return result
; 4450 :     return (dwTimeout > 0);

  00058	03a00000	 moveq       r0, #0

; 4451 : }

  0005c	08bd4070	 ldmeqia     sp!, {r4 - r6, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$M40682|

			 ENDP  ; |?FlushRegs@OMAPDisplayController@@IAAHK@Z|, OMAPDisplayController::FlushRegs

	EXPORT	|?WaitForFlushDone@OMAPDisplayController@@IAAHK@Z| ; OMAPDisplayController::WaitForFlushDone
	IMPORT	|Sleep|

  00000			 AREA	 |.pdata|, PDATA
|$T40701| DCD	|$LN13@WaitForFlu|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WaitForFlushDone@OMAPDisplayController@@IAAHK@Z| PROC ; OMAPDisplayController::WaitForFlushDone

; 4458 : {

  00000		 |$LN13@WaitForFlu|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M40698|
  00004	e1a05001	 mov         r5, r1
  00008	e1a06000	 mov         r6, r0

; 4459 :     DWORD dwTimeout = DISPLAY_TIMEOUT;
; 4460 :     
; 4461 :     //  Ensure that registers can be flushed
; 4462 :     while(((INREG32(&m_pDispRegs->DISPC_CONTROL) & dwDestGo) == dwDestGo) &&  (dwTimeout-- > 0))

  0000c	e5963008	 ldr         r3, [r6, #8]
  00010	e3a0401e	 mov         r4, #0x1E
  00014	e5933040	 ldr         r3, [r3, #0x40]
  00018	e0033005	 and         r3, r3, r5
  0001c	e1530005	 cmp         r3, r5
  00020	1a00000d	 bne         |$LN10@WaitForFlu|
  00024		 |$LL3@WaitForFlu|
  00024	e3540000	 cmp         r4, #0
  00028	e2444001	 sub         r4, r4, #1
  0002c	0a000006	 beq         |$LN2@WaitForFlu|

; 4463 :     {
; 4464 :         // delay = 1ms
; 4465 :         Sleep(1);

  00030	e3a00001	 mov         r0, #1
  00034	eb000000	 bl          Sleep
  00038	e5963008	 ldr         r3, [r6, #8]
  0003c	e5933040	 ldr         r3, [r3, #0x40]
  00040	e0033005	 and         r3, r3, r5
  00044	e1530005	 cmp         r3, r5
  00048	0afffff5	 beq         |$LL3@WaitForFlu|
  0004c		 |$LN2@WaitForFlu|

; 4466 :     }
; 4467 :     
; 4468 :     if( dwTimeout == 0 )
; 4469 :     {
; 4470 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::FlushRegs: "
; 4471 :              L"Failed to flush regs\r\n"
; 4472 :             ));
; 4473 :     }
; 4474 :     
; 4475 :     return (dwTimeout > 0);

  0004c	e3540000	 cmp         r4, #0
  00050	03a00000	 moveq       r0, #0

; 4476 :     
; 4477 : }    

  00054	08bd4070	 ldmeqia     sp!, {r4 - r6, lr}
  00058	012fff1e	 bxeq        lr
  0005c		 |$LN10@WaitForFlu|

; 4466 :     }
; 4467 :     
; 4468 :     if( dwTimeout == 0 )
; 4469 :     {
; 4470 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::FlushRegs: "
; 4471 :              L"Failed to flush regs\r\n"
; 4472 :             ));
; 4473 :     }
; 4474 :     
; 4475 :     return (dwTimeout > 0);

  0005c	e3a00001	 mov         r0, #1

; 4476 :     
; 4477 : }    

  00060	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M40699|

			 ENDP  ; |?WaitForFlushDone@OMAPDisplayController@@IAAHK@Z|, OMAPDisplayController::WaitForFlushDone

	EXPORT	|?RequestClock@OMAPDisplayController@@IAAHK@Z| ; OMAPDisplayController::RequestClock
	IMPORT	|EnableDeviceClocks|

  00000			 AREA	 |.pdata|, PDATA
|$T40711| DCD	|$LN5@RequestClo|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RequestClock@OMAPDisplayController@@IAAHK@Z| PROC ; OMAPDisplayController::RequestClock

; 4483 : {

  00000		 |$LN5@RequestClo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40708|
  00004	e1a00001	 mov         r0, r1

; 4484 :     return EnableDeviceClocks(dwClock, TRUE);

  00008	e3a01001	 mov         r1, #1
  0000c	eb000000	 bl          EnableDeviceClocks

; 4485 : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M40709|

			 ENDP  ; |?RequestClock@OMAPDisplayController@@IAAHK@Z|, OMAPDisplayController::RequestClock

	EXPORT	|?ReleaseClock@OMAPDisplayController@@IAAHK@Z| ; OMAPDisplayController::ReleaseClock

  00000			 AREA	 |.pdata|, PDATA
|$T40721| DCD	|$LN5@ReleaseClo|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ReleaseClock@OMAPDisplayController@@IAAHK@Z| PROC ; OMAPDisplayController::ReleaseClock

; 4492 : {

  00000		 |$LN5@ReleaseClo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40718|
  00004	e1a00001	 mov         r0, r1

; 4493 :     return EnableDeviceClocks(dwClock, FALSE);

  00008	e3a01000	 mov         r1, #0
  0000c	eb000000	 bl          EnableDeviceClocks

; 4494 : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M40719|

			 ENDP  ; |?ReleaseClock@OMAPDisplayController@@IAAHK@Z|, OMAPDisplayController::ReleaseClock

	EXPORT	|?WaitForFrameDone@OMAPDisplayController@@IAAHK@Z| ; OMAPDisplayController::WaitForFrameDone

  00000			 AREA	 |.pdata|, PDATA
|$T40737| DCD	|$LN13@WaitForFra|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WaitForFrameDone@OMAPDisplayController@@IAAHK@Z| PROC ; OMAPDisplayController::WaitForFrameDone

; 4501 : {

  00000		 |$LN13@WaitForFra|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M40734|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0

; 4502 :     //  Wait for VYSNC status
; 4503 :     OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_FRAMEDONE );

  0000c	e5953008	 ldr         r3, [r5, #8]
  00010	e3a06001	 mov         r6, #1
  00014	e5836018	 str         r6, [r3, #0x18]

; 4504 :     while (((INREG32(&m_pDispRegs->DISPC_IRQSTATUS) & DISPC_IRQSTATUS_FRAMEDONE) == 0) && (dwTimeout-- > 0))

  00018	ea000004	 b           |$LN10@WaitForFra|
  0001c		 |$LL3@WaitForFra|
  0001c	e3540000	 cmp         r4, #0
  00020	e2444001	 sub         r4, r4, #1
  00024	0a000005	 beq         |$LN8@WaitForFra|

; 4505 :     {
; 4506 :         // delay
; 4507 :         Sleep(1);

  00028	e3a00001	 mov         r0, #1
  0002c	eb000000	 bl          Sleep
  00030		 |$LN10@WaitForFra|
  00030	e5953008	 ldr         r3, [r5, #8]
  00034	e5933018	 ldr         r3, [r3, #0x18]
  00038	e3130001	 tst         r3, #1
  0003c	0afffff6	 beq         |$LL3@WaitForFra|
  00040		 |$LN8@WaitForFra|

; 4508 :     }
; 4509 : 
; 4510 :     if ( dwTimeout == 0 )

  00040	e3540000	 cmp         r4, #0

; 4511 :     {
; 4512 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::WaitForFrameDone: timeout\r\n"));
; 4513 :         return FALSE;

  00044	03a00000	 moveq       r0, #0

; 4520 : }

  00048	08bd4070	 ldmeqia     sp!, {r4 - r6, lr}

; 4514 :     }
; 4515 : 
; 4516 :     //  Clear the status
; 4517 :     OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_FRAMEDONE );

  0004c	15953008	 ldrne       r3, [r5, #8]

; 4518 : 
; 4519 :     return TRUE;

  00050	13a00001	 movne       r0, #1
  00054	15836018	 strne       r6, [r3, #0x18]

; 4520 : }

  00058	18bd4070	 ldmneia     sp!, {r4 - r6, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M40735|

			 ENDP  ; |?WaitForFrameDone@OMAPDisplayController@@IAAHK@Z|, OMAPDisplayController::WaitForFrameDone

	EXPORT	|?WaitForIRQ@OMAPDisplayController@@IAAHKK@Z| ; OMAPDisplayController::WaitForIRQ

  00000			 AREA	 |.pdata|, PDATA
|$T40757| DCD	|$LN17@WaitForIRQ|
	DCD	0x40001e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WaitForIRQ@OMAPDisplayController@@IAAHKK@Z| PROC ; OMAPDisplayController::WaitForIRQ

; 4528 : {

  00000		 |$LN17@WaitForIRQ|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M40754|
  00004	e1a05002	 mov         r5, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a04000	 mov         r4, r0

; 4529 :     if(AccessRegs() == FALSE)

  00010	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00014	e3500000	 cmp         r0, #0
  00018	0a000011	 beq         |$cleanup$39645|

; 4530 :     {
; 4531 :         goto cleanup;
; 4532 :     }
; 4533 : 
; 4534 : 
; 4535 :     //  Wait for VYSNC status
; 4536 :     SETREG32( &m_pDispRegs->DISPC_IRQSTATUS, dwIRQ );

  0001c	e594e008	 ldr         lr, [r4, #8]
  00020	e59e3018	 ldr         r3, [lr, #0x18]
  00024	e1833006	 orr         r3, r3, r6
  00028	e58e3018	 str         r3, [lr, #0x18]

; 4537 :     while(((INREG32(&m_pDispRegs->DISPC_IRQSTATUS) & dwIRQ) == 0) && (dwTimeout-- > 0))

  0002c	ea000004	 b           |$LN14@WaitForIRQ|
  00030		 |$LL3@WaitForIRQ|
  00030	e3550000	 cmp         r5, #0
  00034	e2455001	 sub         r5, r5, #1
  00038	0a000005	 beq         |$LN12@WaitForIRQ|

; 4538 :     {
; 4539 :         // delay
; 4540 :         Sleep(1);

  0003c	e3a00001	 mov         r0, #1
  00040	eb000000	 bl          Sleep
  00044		 |$LN14@WaitForIRQ|
  00044	e5943008	 ldr         r3, [r4, #8]
  00048	e5933018	 ldr         r3, [r3, #0x18]
  0004c	e1130006	 tst         r3, r6
  00050	0afffff6	 beq         |$LL3@WaitForIRQ|
  00054		 |$LN12@WaitForIRQ|

; 4541 :     }
; 4542 : 
; 4543 :     if( dwTimeout == 0 )
; 4544 :     {
; 4545 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::WaitForIRQ: "
; 4546 :              L"IRQ = 0x%X failed to happen before timeout\r\n", dwIRQ
; 4547 :             ));
; 4548 :     }
; 4549 : 
; 4550 :     //  Clear the status
; 4551 :     SETREG32( &m_pDispRegs->DISPC_IRQSTATUS, dwIRQ );

  00054	e5942008	 ldr         r2, [r4, #8]
  00058	e5923018	 ldr         r3, [r2, #0x18]
  0005c	e1833006	 orr         r3, r3, r6
  00060	e5823018	 str         r3, [r2, #0x18]
  00064		 |$cleanup$39645|

; 4552 :     
; 4553 : cleanup:
; 4554 : 
; 4555 :     ReleaseRegs();

  00064	e2840e49	 add         r0, r4, #0x49, 28
  00068	eb000000	 bl          LeaveCriticalSection

; 4556 : 
; 4557 :     //  Status
; 4558 :     return TRUE;

  0006c	e3a00001	 mov         r0, #1

; 4559 : }

  00070	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M40755|

			 ENDP  ; |?WaitForIRQ@OMAPDisplayController@@IAAHKK@Z|, OMAPDisplayController::WaitForIRQ

	EXPORT	|?PixelFormatToPixelSize@OMAPDisplayController@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z| ; OMAPDisplayController::PixelFormatToPixelSize

  00000			 AREA	 |.pdata|, PDATA
|$T40768| DCD	|$LN9@PixelForma@2|
	DCD	0x40001300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelFormatToPixelSize@OMAPDisplayController@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z| PROC ; OMAPDisplayController::PixelFormatToPixelSize

; 4566 : {

  00000		 |$LN9@PixelForma@2|
  00000		 |$M40765|

; 4567 :     DWORD   dwResult = 1;

  00000	e3a03001	 mov         r3, #1

; 4568 :     
; 4569 :     //  Convert pixel format into bytes per pixel
; 4570 :     switch( ePixelFormat )

  00004	e3500005	 cmp         r0, #5
  00008	ba00000d	 blt         |$LN3@PixelForma@2|
  0000c	e3500006	 cmp         r0, #6
  00010	da00000a	 ble         |$LN2@PixelForma@2|
  00014	e3500008	 cmp         r0, #8
  00018	0a000005	 beq         |$LN1@PixelForma@2|
  0001c	e3500009	 cmp         r0, #9
  00020	da000007	 ble         |$LN3@PixelForma@2|
  00024	e350000b	 cmp         r0, #0xB
  00028	da000004	 ble         |$LN2@PixelForma@2|
  0002c	e350000d	 cmp         r0, #0xD
  00030	ca000003	 bgt         |$LN3@PixelForma@2|
  00034		 |$LN1@PixelForma@2|

; 4578 :             break;
; 4579 : 
; 4580 :         case OMAP_DSS_PIXELFORMAT_RGB32:
; 4581 :         case OMAP_DSS_PIXELFORMAT_ARGB32:
; 4582 :         case OMAP_DSS_PIXELFORMAT_RGBA32:
; 4583 :             //  4 bytes per pixel
; 4584 :             dwResult = 4;

  00034	e3a03004	 mov         r3, #4

; 4585 :             break;
; 4586 :     }
; 4587 : 
; 4588 :     //  Return result
; 4589 :     return dwResult;
; 4590 : }

  00038	e1a00003	 mov         r0, r3
  0003c	e12fff1e	 bx          lr
  00040		 |$LN2@PixelForma@2|

; 4571 :     {
; 4572 :         case OMAP_DSS_PIXELFORMAT_RGB16:
; 4573 :         case OMAP_DSS_PIXELFORMAT_ARGB16:
; 4574 :         case OMAP_DSS_PIXELFORMAT_YUV2:
; 4575 :         case OMAP_DSS_PIXELFORMAT_UYVY:
; 4576 :             //  2 bytes per pixel
; 4577 :             dwResult = 2;

  00040	e3a03002	 mov         r3, #2
  00044		 |$LN3@PixelForma@2|

; 4585 :             break;
; 4586 :     }
; 4587 : 
; 4588 :     //  Return result
; 4589 :     return dwResult;
; 4590 : }

  00044	e1a00003	 mov         r0, r3
  00048	e12fff1e	 bx          lr
  0004c		 |$M40766|

			 ENDP  ; |?PixelFormatToPixelSize@OMAPDisplayController@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z|, OMAPDisplayController::PixelFormatToPixelSize

	EXPORT	|?EnableVSyncInterruptEx@OMAPDisplayController@@QAAHXZ| ; OMAPDisplayController::EnableVSyncInterruptEx

  00000			 AREA	 |.pdata|, PDATA
|$T40785| DCD	|$LN13@EnableVSyn|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableVSyncInterruptEx@OMAPDisplayController@@QAAHXZ| PROC ; OMAPDisplayController::EnableVSyncInterruptEx

; 4594 : {

  00000		 |$LN13@EnableVSyn|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40782|
  00004	e1a05000	 mov         r5, r0

; 4595 :     BOOL bInterruptAlreadyEnabled = FALSE;
; 4596 :     DWORD irqEnableStatus;
; 4597 :     
; 4598 :     if (!m_dwEnableWaitForVerticalBlank)

  00008	e5953504	 ldr         r3, [r5, #0x504]
  0000c	e3a04000	 mov         r4, #0
  00010	e3530000	 cmp         r3, #0

; 4599 :         return FALSE;

  00014	03a04000	 moveq       r4, #0
  00018	0a00001a	 beq         |$LN5@EnableVSyn|

; 4600 : 
; 4601 :     if(AccessRegs() == FALSE)

  0001c	e1a00005	 mov         r0, r5
  00020	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00024	e3500000	 cmp         r0, #0
  00028	0a000014	 beq         |$cleanup$39676|

; 4602 :     {
; 4603 :         goto cleanup;
; 4604 :     }
; 4605 : 
; 4606 :     irqEnableStatus = INREG32(&m_pDispRegs->DISPC_IRQENABLE);

  0002c	e5951008	 ldr         r1, [r5, #8]
  00030	e591201c	 ldr         r2, [r1, #0x1C]

; 4607 :     bInterruptAlreadyEnabled = ((irqEnableStatus & DISPC_IRQENABLE_VSYNC) == DISPC_IRQENABLE_VSYNC) ||
; 4608 :                                 ((irqEnableStatus & DISPC_IRQSTATUS_EVSYNC_EVEN) == DISPC_IRQSTATUS_EVSYNC_EVEN) ||
; 4609 :                                 ((irqEnableStatus & DISPC_IRQSTATUS_EVSYNC_ODD) == DISPC_IRQSTATUS_EVSYNC_ODD);

  00034	e2023002	 and         r3, r2, #2
  00038	e3530002	 cmp         r3, #2
  0003c	0a000005	 beq         |$LN7@EnableVSyn|
  00040	e2023004	 and         r3, r2, #4
  00044	e3530004	 cmp         r3, #4
  00048	12023008	 andne       r3, r2, #8
  0004c	13530008	 cmpne       r3, #8
  00050	13a04000	 movne       r4, #0
  00054	1a000000	 bne         |$LN8@EnableVSyn|
  00058		 |$LN7@EnableVSyn|
  00058	e3a04001	 mov         r4, #1
  0005c		 |$LN8@EnableVSyn|

; 4610 :                         
; 4611 :                                 
; 4612 :     
; 4613 :     SETREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_VSYNC);

  0005c	e591301c	 ldr         r3, [r1, #0x1C]
  00060	e3833002	 orr         r3, r3, #2
  00064	e581301c	 str         r3, [r1, #0x1C]

; 4614 :     if(m_bTVEnable == TRUE)

  00068	e59534b8	 ldr         r3, [r5, #0x4B8]
  0006c	e3530001	 cmp         r3, #1

; 4615 :     {
; 4616 :         SETREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_EVSYNC_EVEN | DISPC_IRQENABLE_EVSYNC_ODD);

  00070	05952008	 ldreq       r2, [r5, #8]
  00074	0592301c	 ldreq       r3, [r2, #0x1C]
  00078	0383300c	 orreq       r3, r3, #0xC
  0007c	0582301c	 streq       r3, [r2, #0x1C]
  00080		 |$cleanup$39676|

; 4617 :     }
; 4618 : 
; 4619 : 
; 4620 : cleanup:
; 4621 : 
; 4622 :     ReleaseRegs();

  00080	e2850e49	 add         r0, r5, #0x49, 28
  00084	eb000000	 bl          LeaveCriticalSection

; 4623 :     return bInterruptAlreadyEnabled;

  00088		 |$LN5@EnableVSyn|

; 4624 : }

  00088	e1a00004	 mov         r0, r4
  0008c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$M40783|

			 ENDP  ; |?EnableVSyncInterruptEx@OMAPDisplayController@@QAAHXZ|, OMAPDisplayController::EnableVSyncInterruptEx

	EXPORT	|?EnableVSyncInterrupt@OMAPDisplayController@@QAAXXZ| ; OMAPDisplayController::EnableVSyncInterrupt

  00000			 AREA	 |.pdata|, PDATA
|$T40796| DCD	|$LN10@EnableVSyn@2|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableVSyncInterrupt@OMAPDisplayController@@QAAXXZ| PROC ; OMAPDisplayController::EnableVSyncInterrupt

; 4628 : {

  00000		 |$LN10@EnableVSyn@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40793|
  00004	e1a04000	 mov         r4, r0

; 4629 :     if(AccessRegs() == FALSE)

  00008	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  0000c	e3500000	 cmp         r0, #0
  00010	0a000009	 beq         |$cleanup$39690|

; 4630 :     {
; 4631 :         goto cleanup;
; 4632 :     }
; 4633 : 
; 4634 :     SETREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_VSYNC);

  00014	e5942008	 ldr         r2, [r4, #8]
  00018	e592301c	 ldr         r3, [r2, #0x1C]
  0001c	e3833002	 orr         r3, r3, #2
  00020	e582301c	 str         r3, [r2, #0x1C]

; 4635 :     if(m_bTVEnable == TRUE)

  00024	e59434b8	 ldr         r3, [r4, #0x4B8]
  00028	e3530001	 cmp         r3, #1

; 4636 :     {
; 4637 :         SETREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_EVSYNC_EVEN | DISPC_IRQENABLE_EVSYNC_ODD);

  0002c	05942008	 ldreq       r2, [r4, #8]
  00030	0592301c	 ldreq       r3, [r2, #0x1C]
  00034	0383300c	 orreq       r3, r3, #0xC
  00038	0582301c	 streq       r3, [r2, #0x1C]
  0003c		 |$cleanup$39690|

; 4638 :     }
; 4639 : 
; 4640 : cleanup:
; 4641 : 
; 4642 :     ReleaseRegs();

  0003c	e2840e49	 add         r0, r4, #0x49, 28
  00040	eb000000	 bl          LeaveCriticalSection

; 4643 : }

  00044	e8bd4010	 ldmia       sp!, {r4, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$M40794|

			 ENDP  ; |?EnableVSyncInterrupt@OMAPDisplayController@@QAAXXZ|, OMAPDisplayController::EnableVSyncInterrupt

	EXPORT	|?DisableVSyncInterrupt@OMAPDisplayController@@QAAXXZ| ; OMAPDisplayController::DisableVSyncInterrupt

  00000			 AREA	 |.pdata|, PDATA
|$T40807| DCD	|$LN10@DisableVSy|
	DCD	0x40001501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DisableVSyncInterrupt@OMAPDisplayController@@QAAXXZ| PROC ; OMAPDisplayController::DisableVSyncInterrupt

; 4647 : {

  00000		 |$LN10@DisableVSy|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40804|
  00004	e1a04000	 mov         r4, r0

; 4648 :     
; 4649 :     m_lastVsyncIRQStatus = 0;

  00008	e3a03000	 mov         r3, #0
  0000c	e5843540	 str         r3, [r4, #0x540]

; 4650 :     if(AccessRegs() == FALSE)

  00010	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00014	e3500000	 cmp         r0, #0
  00018	0a000009	 beq         |$cleanup$39703|

; 4651 :     {
; 4652 :         goto cleanup;
; 4653 :     }
; 4654 :         
; 4655 :     CLRREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_VSYNC);

  0001c	e5942008	 ldr         r2, [r4, #8]
  00020	e592301c	 ldr         r3, [r2, #0x1C]
  00024	e3c33002	 bic         r3, r3, #2
  00028	e582301c	 str         r3, [r2, #0x1C]

; 4656 :     if(m_bTVEnable == TRUE)

  0002c	e59434b8	 ldr         r3, [r4, #0x4B8]
  00030	e3530001	 cmp         r3, #1

; 4657 :     {
; 4658 :         CLRREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_EVSYNC_EVEN | DISPC_IRQENABLE_EVSYNC_ODD);

  00034	05942008	 ldreq       r2, [r4, #8]
  00038	0592301c	 ldreq       r3, [r2, #0x1C]
  0003c	03c3300c	 biceq       r3, r3, #0xC
  00040	0582301c	 streq       r3, [r2, #0x1C]
  00044		 |$cleanup$39703|

; 4659 :     }
; 4660 : 
; 4661 : cleanup:
; 4662 : 
; 4663 :     ReleaseRegs();

  00044	e2840e49	 add         r0, r4, #0x49, 28
  00048	eb000000	 bl          LeaveCriticalSection

; 4664 : }

  0004c	e8bd4010	 ldmia       sp!, {r4, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M40805|

			 ENDP  ; |?DisableVSyncInterrupt@OMAPDisplayController@@QAAXXZ|, OMAPDisplayController::DisableVSyncInterrupt

	EXPORT	|?InVSync@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::InVSync

  00000			 AREA	 |.pdata|, PDATA
|$T40829| DCD	|$LN18@InVSync|
	DCD	0x40003601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InVSync@OMAPDisplayController@@QAAHH@Z| PROC ; OMAPDisplayController::InVSync

; 4668 : {

  00000		 |$LN18@InVSync|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M40826|
  00004	e1a07001	 mov         r7, r1
  00008	e1a05000	 mov         r5, r0

; 4669 :     BOOL bInVSync = FALSE;
; 4670 :     DWORD irqStatus = 0;
; 4671 :     BOOL  lcdVsync = FALSE;
; 4672 :     //Alwasy set to true, in case tv-out is disabled.
; 4673 :     BOOL  tvVsync = TRUE;
; 4674 : 
; 4675 :     if (!m_dwEnableWaitForVerticalBlank)

  0000c	e5953504	 ldr         r3, [r5, #0x504]
  00010	e3a04000	 mov         r4, #0
  00014	e3a06001	 mov         r6, #1
  00018	e3530000	 cmp         r3, #0

; 4676 :         return TRUE;

  0001c	03a04001	 moveq       r4, #1
  00020	0a000029	 beq         |$LN8@InVSync|

; 4677 : 
; 4678 :     if(AccessRegs() == FALSE)

  00024	e1a00005	 mov         r0, r5
  00028	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  0002c	e3500000	 cmp         r0, #0

; 4679 :     {
; 4680 :         bInVSync = TRUE;

  00030	03a04001	 moveq       r4, #1
  00034	0a000022	 beq         |$cleanup$39722|

; 4681 :         goto cleanup;
; 4682 :     }
; 4683 : 
; 4684 :     irqStatus = INREG32(&m_pDispRegs->DISPC_IRQSTATUS);

  00038	e5950008	 ldr         r0, [r5, #8]
  0003c	e5901018	 ldr         r1, [r0, #0x18]

; 4685 :     lcdVsync = (irqStatus & DISPC_IRQSTATUS_VSYNC) == DISPC_IRQSTATUS_VSYNC;

  00040	e2013002	 and         r3, r1, #2
  00044	e3530002	 cmp         r3, #2

; 4686 :     if(m_bTVEnable == TRUE)

  00048	e59534b8	 ldr         r3, [r5, #0x4B8]
  0004c	03a02001	 moveq       r2, #1
  00050	13a02000	 movne       r2, #0
  00054	e3530001	 cmp         r3, #1
  00058	1a000005	 bne         |$LN13@InVSync|

; 4687 :     {
; 4688 :         tvVsync = ((irqStatus & DISPC_IRQSTATUS_EVSYNC_EVEN) == DISPC_IRQSTATUS_EVSYNC_EVEN) ||
; 4689 :                   ((irqStatus & DISPC_IRQSTATUS_EVSYNC_ODD) == DISPC_IRQSTATUS_EVSYNC_ODD);

  0005c	e2013004	 and         r3, r1, #4
  00060	e3530004	 cmp         r3, #4
  00064	12013008	 andne       r3, r1, #8
  00068	13530008	 cmpne       r3, #8
  0006c	13a06000	 movne       r6, #0
  00070	03a06001	 moveq       r6, #1
  00074		 |$LN13@InVSync|

; 4690 :           
; 4691 :     }
; 4692 :     //If tv-out is enabled we also need to check of it's VSYNC signal. Once both have been asserted then 
; 4693 :     //we can say that Vsync has occurred. 
; 4694 :     if( lcdVsync && tvVsync)

  00074	e3520000	 cmp         r2, #0
  00078	0a000011	 beq         |$cleanup$39722|
  0007c	e3560000	 cmp         r6, #0
  00080	0a00000f	 beq         |$cleanup$39722|

; 4695 :     {
; 4696 :         bInVSync = TRUE;

  00084	e3a04001	 mov         r4, #1

; 4697 : 
; 4698 :         if(bClearStatus)

  00088	e3570000	 cmp         r7, #0
  0008c	0a00000c	 beq         |$cleanup$39722|

; 4699 :         {
; 4700 :             SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_VSYNC);

  00090	e5903018	 ldr         r3, [r0, #0x18]
  00094	e3833002	 orr         r3, r3, #2
  00098	e5803018	 str         r3, [r0, #0x18]

; 4701 :             if(m_bTVEnable == TRUE)

  0009c	e59534b8	 ldr         r3, [r5, #0x4B8]
  000a0	e3530001	 cmp         r3, #1

; 4702 :             {
; 4703 :                 SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_EVSYNC_EVEN); 

  000a4	05952008	 ldreq       r2, [r5, #8]
  000a8	05923018	 ldreq       r3, [r2, #0x18]
  000ac	03833004	 orreq       r3, r3, #4
  000b0	05823018	 streq       r3, [r2, #0x18]

; 4704 :                 SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_EVSYNC_ODD); 

  000b4	05952008	 ldreq       r2, [r5, #8]
  000b8	05923018	 ldreq       r3, [r2, #0x18]
  000bc	03833008	 orreq       r3, r3, #8
  000c0	05823018	 streq       r3, [r2, #0x18]
  000c4		 |$cleanup$39722|

; 4705 :             }
; 4706 :         }
; 4707 :     }
; 4708 : 
; 4709 : cleanup:
; 4710 : 
; 4711 :     ReleaseRegs();

  000c4	e2850e49	 add         r0, r5, #0x49, 28
  000c8	eb000000	 bl          LeaveCriticalSection

; 4712 : 
; 4713 :     return bInVSync;

  000cc		 |$LN8@InVSync|

; 4714 : }

  000cc	e1a00004	 mov         r0, r4
  000d0	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000d4	e12fff1e	 bx          lr
  000d8		 |$M40827|

			 ENDP  ; |?InVSync@OMAPDisplayController@@QAAHH@Z|, OMAPDisplayController::InVSync

	EXPORT	|?WaitForVsync@OMAPDisplayController@@QAAXXZ| ; OMAPDisplayController::WaitForVsync

  00000			 AREA	 |.pdata|, PDATA
|$T40838| DCD	|$LN8@WaitForVsy|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WaitForVsync@OMAPDisplayController@@QAAXXZ| PROC ; OMAPDisplayController::WaitForVsync

; 4718 : {

  00000		 |$LN8@WaitForVsy|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40835|
  00004	e1a05000	 mov         r5, r0

; 4719 :     BOOL bVsyncPreviouslyEnabled = FALSE;
; 4720 : 
; 4721 :     if (!m_dwEnableWaitForVerticalBlank)

  00008	e5953504	 ldr         r3, [r5, #0x504]
  0000c	e3530000	 cmp         r3, #0
  00010	0a00000c	 beq         |$LN1@WaitForVsy|

; 4722 :         return;
; 4723 : 
; 4724 :     if(!InVSync(TRUE))

  00014	e3a01001	 mov         r1, #1
  00018	eb000000	 bl          |?InVSync@OMAPDisplayController@@QAAHH@Z|
  0001c	e3500000	 cmp         r0, #0
  00020	1a000008	 bne         |$LN1@WaitForVsy|

; 4725 :     {             
; 4726 :         bVsyncPreviouslyEnabled = EnableVSyncInterruptEx();

  00024	e1a00005	 mov         r0, r5
  00028	eb000000	 bl          |?EnableVSyncInterruptEx@OMAPDisplayController@@QAAHXZ|

; 4727 :         WaitForSingleObject(m_hVsyncEvent, m_dwVsyncPeriod);

  0002c	e5951500	 ldr         r1, [r5, #0x500]
  00030	e1a04000	 mov         r4, r0
  00034	e59504f8	 ldr         r0, [r5, #0x4F8]
  00038	eb000000	 bl          WaitForSingleObject

; 4728 :         //SGX may have turned on the vsync interrupt, keep it on if that's the case.
; 4729 :         if(!bVsyncPreviouslyEnabled)

  0003c	e3540000	 cmp         r4, #0

; 4730 :         {
; 4731 :             DisableVSyncInterrupt();

  00040	01a00005	 moveq       r0, r5
  00044	0b000000	 bleq        |?DisableVSyncInterrupt@OMAPDisplayController@@QAAXXZ|
  00048		 |$LN1@WaitForVsy|

; 4732 :         }
; 4733 :     }
; 4734 : }

  00048	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M40836|

			 ENDP  ; |?WaitForVsync@OMAPDisplayController@@QAAXXZ|, OMAPDisplayController::WaitForVsync

	EXPORT	|?EnableScanLineInterrupt@OMAPDisplayController@@QAAXK@Z| ; OMAPDisplayController::EnableScanLineInterrupt

  00000			 AREA	 |.pdata|, PDATA
|$T40850| DCD	|$LN11@EnableScan|
	DCD	0x40001c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableScanLineInterrupt@OMAPDisplayController@@QAAXK@Z| PROC ; OMAPDisplayController::EnableScanLineInterrupt

; 4738 : {

  00000		 |$LN11@EnableScan|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40847|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 4739 :     if (!m_dwEnableWaitForVerticalBlank)

  0000c	e5943504	 ldr         r3, [r4, #0x504]
  00010	e3530000	 cmp         r3, #0
  00014	0a000013	 beq         |$LN7@EnableScan|

; 4740 :         return;
; 4741 : 
; 4742 :     if(AccessRegs() == FALSE)

  00018	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  0001c	e3500000	 cmp         r0, #0
  00020	0a00000e	 beq         |$cleanup$39751|

; 4743 :     {
; 4744 :         goto cleanup;
; 4745 :     }
; 4746 : 
; 4747 :     //  Program line number to interrupt on
; 4748 :     if(INREG32(&m_pDispRegs->DISPC_LINE_NUMBER) != dwLineNumber)

  00024	e5942008	 ldr         r2, [r4, #8]
  00028	e5923060	 ldr         r3, [r2, #0x60]
  0002c	e1530005	 cmp         r3, r5

; 4749 :     {
; 4750 :         OUTREG32(&m_pDispRegs->DISPC_LINE_NUMBER, dwLineNumber);
; 4751 :         FlushRegs(DISPC_CONTROL_GOLCD);

  00030	13a01020	 movne       r1, #0x20
  00034	11a00004	 movne       r0, r4
  00038	15825060	 strne       r5, [r2, #0x60]
  0003c	1b000000	 blne        |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 4752 :     }
; 4753 : 
; 4754 :     //  Enable                                
; 4755 :     SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_PROGRAMMEDLINENUMBER);

  00040	e5942008	 ldr         r2, [r4, #8]
  00044	e5923018	 ldr         r3, [r2, #0x18]
  00048	e3833020	 orr         r3, r3, #0x20
  0004c	e5823018	 str         r3, [r2, #0x18]

; 4756 :     SETREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_PROGRAMMEDLINENUMBER);

  00050	e5942008	 ldr         r2, [r4, #8]
  00054	e592301c	 ldr         r3, [r2, #0x1C]
  00058	e3833020	 orr         r3, r3, #0x20
  0005c	e582301c	 str         r3, [r2, #0x1C]
  00060		 |$cleanup$39751|

; 4757 : 
; 4758 : cleanup:
; 4759 :     ReleaseRegs();

  00060	e2840e49	 add         r0, r4, #0x49, 28
  00064	eb000000	 bl          LeaveCriticalSection
  00068		 |$LN7@EnableScan|

; 4760 : }

  00068	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$M40848|

			 ENDP  ; |?EnableScanLineInterrupt@OMAPDisplayController@@QAAXK@Z|, OMAPDisplayController::EnableScanLineInterrupt

	EXPORT	|?DisableScanLineInterrupt@OMAPDisplayController@@QAAXXZ| ; OMAPDisplayController::DisableScanLineInterrupt

  00000			 AREA	 |.pdata|, PDATA
|$T40861| DCD	|$LN10@DisableSca|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DisableScanLineInterrupt@OMAPDisplayController@@QAAXXZ| PROC ; OMAPDisplayController::DisableScanLineInterrupt

; 4764 : {

  00000		 |$LN10@DisableSca|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40858|
  00004	e1a04000	 mov         r4, r0

; 4765 :     if (!m_dwEnableWaitForVerticalBlank)

  00008	e5943504	 ldr         r3, [r4, #0x504]
  0000c	e3530000	 cmp         r3, #0
  00010	0a00000b	 beq         |$LN6@DisableSca|

; 4766 :         return;
; 4767 : 
; 4768 :     if(AccessRegs() == FALSE)

  00014	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00018	e3500000	 cmp         r0, #0

; 4769 :     {
; 4770 :         goto cleanup;
; 4771 :     }
; 4772 : 
; 4773 :     //  Disable interrupt
; 4774 :     SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_PROGRAMMEDLINENUMBER);

  0001c	15942008	 ldrne       r2, [r4, #8]

; 4775 :     CLRREG32(&m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_PROGRAMMEDLINENUMBER);

  00020	15923018	 ldrne       r3, [r2, #0x18]
  00024	13833020	 orrne       r3, r3, #0x20
  00028	15823018	 strne       r3, [r2, #0x18]
  0002c	15942008	 ldrne       r2, [r4, #8]
  00030	1592301c	 ldrne       r3, [r2, #0x1C]
  00034	13c33020	 bicne       r3, r3, #0x20
  00038	1582301c	 strne       r3, [r2, #0x1C]
  0003c		 |$cleanup$39768|

; 4776 : 
; 4777 : cleanup:
; 4778 :     ReleaseRegs();

  0003c	e2840e49	 add         r0, r4, #0x49, 28
  00040	eb000000	 bl          LeaveCriticalSection
  00044		 |$LN6@DisableSca|

; 4779 : }

  00044	e8bd4010	 ldmia       sp!, {r4, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$M40859|

			 ENDP  ; |?DisableScanLineInterrupt@OMAPDisplayController@@QAAXXZ|, OMAPDisplayController::DisableScanLineInterrupt

	EXPORT	|?GetScanLine@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetScanLine

  00000			 AREA	 |.pdata|, PDATA
|$T40875| DCD	|$LN9@GetScanLin|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetScanLine@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetScanLine

; 4783 : {

  00000		 |$LN9@GetScanLin|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40872|
  00004	e1a04000	 mov         r4, r0

; 4784 :     DWORD scanLine = 0;
; 4785 :     if(AccessRegs() == FALSE)

  00008	e3a05000	 mov         r5, #0
  0000c	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00010	e3500000	 cmp         r0, #0

; 4786 :     {
; 4787 :         goto cleanup;
; 4788 :     }
; 4789 : 
; 4790 :     //  Get current scanline value
; 4791 :     scanLine = INREG32(&m_pDispRegs->DISPC_LINE_STATUS);

  00014	15943008	 ldrne       r3, [r4, #8]
  00018	1593505c	 ldrne       r5, [r3, #0x5C]
  0001c		 |$cleanup$39781|

; 4792 : 
; 4793 : cleanup:
; 4794 :     ReleaseRegs();

  0001c	e2840e49	 add         r0, r4, #0x49, 28
  00020	eb000000	 bl          LeaveCriticalSection

; 4795 :     return scanLine;
; 4796 : }

  00024	e1a00005	 mov         r0, r5
  00028	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M40873|

			 ENDP  ; |?GetScanLine@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetScanLine

	EXPORT	|?WaitForScanLine@OMAPDisplayController@@QAAXK@Z| ; OMAPDisplayController::WaitForScanLine

  00000			 AREA	 |.pdata|, PDATA
|$T40884| DCD	|$LN6@WaitForSca|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WaitForScanLine@OMAPDisplayController@@QAAXK@Z| PROC ; OMAPDisplayController::WaitForScanLine

; 4800 : {

  00000		 |$LN6@WaitForSca|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40881|
  00004	e1a04000	 mov         r4, r0

; 4801 :     if (!m_dwEnableWaitForVerticalBlank)

  00008	e5943504	 ldr         r3, [r4, #0x504]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000005	 beq         |$LN2@WaitForSca|

; 4802 :         return;
; 4803 : 
; 4804 :     //  Enable the scanline interrupt for the given line number and wait
; 4805 :     EnableScanLineInterrupt(dwLineNumber);

  00014	eb000000	 bl          |?EnableScanLineInterrupt@OMAPDisplayController@@QAAXK@Z|

; 4806 :     WaitForSingleObject(m_hScanLineEvent, m_dwVsyncPeriod);

  00018	e5941500	 ldr         r1, [r4, #0x500]
  0001c	e5940508	 ldr         r0, [r4, #0x508]
  00020	eb000000	 bl          WaitForSingleObject

; 4807 :     DisableScanLineInterrupt();

  00024	e1a00004	 mov         r0, r4
  00028	eb000000	 bl          |?DisableScanLineInterrupt@OMAPDisplayController@@QAAXXZ|
  0002c		 |$LN2@WaitForSca|

; 4808 : }

  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M40882|

			 ENDP  ; |?WaitForScanLine@OMAPDisplayController@@QAAXK@Z|, OMAPDisplayController::WaitForScanLine

	EXPORT	|?SetClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z| ; OMAPSurface::SetClipping
	IMPORT	|IntersectRect|

  00000			 AREA	 |.pdata|, PDATA
|$T40900| DCD	|$LN8@SetClippin@2|
	DCD	0x40002a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z| PROC ; OMAPSurface::SetClipping

; 4812 : {

  00000		 |$LN8@SetClippin@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M40897|
  00008	e1b05001	 movs        r5, r1
  0000c	e1a04000	 mov         r4, r0

; 4813 :     BOOL    bResult;
; 4814 :     RECT    rcSurf;
; 4815 :     
; 4816 :     //  Set the rect of the entire surface
; 4817 :     rcSurf.left = 0;
; 4818 :     rcSurf.top = 0;
; 4819 :     rcSurf.right = m_dwWidth;

  00010	e5943010	 ldr         r3, [r4, #0x10]

; 4820 :     rcSurf.bottom = m_dwHeight;

  00014	e5942014	 ldr         r2, [r4, #0x14]
  00018	e3a01000	 mov         r1, #0
  0001c	e3a00000	 mov         r0, #0
  00020	e58d3008	 str         r3, [sp, #8]
  00024	e58d200c	 str         r2, [sp, #0xC]

; 4821 :     
; 4822 :     //  Set the clipping region of the surface
; 4823 :     if( pClipRect == NULL )
; 4824 :     {
; 4825 :         //  No clipping; use entire surface size
; 4826 :         m_rcClip = rcSurf;

  00028	05843020	 streq       r3, [r4, #0x20]
  0002c	05842024	 streq       r2, [r4, #0x24]
  00030	e58d1000	 str         r1, [sp]
  00034	e58d0004	 str         r0, [sp, #4]
  00038	05841018	 streq       r1, [r4, #0x18]
  0003c	0584001c	 streq       r0, [r4, #0x1C]

; 4827 :         bResult = TRUE;

  00040	03a06001	 moveq       r6, #1
  00044	0a000004	 beq         |$LN2@SetClippin@2|

; 4828 :     }
; 4829 :     else
; 4830 :     {
; 4831 :         //  Find intersection of surface rect and clipping rect
; 4832 :         bResult = IntersectRect( &m_rcClip, &rcSurf, pClipRect );

  00048	e1a02005	 mov         r2, r5
  0004c	e28d1000	 add         r1, sp, #0
  00050	e2840018	 add         r0, r4, #0x18
  00054	eb000000	 bl          IntersectRect
  00058	e1a06000	 mov         r6, r0
  0005c		 |$LN2@SetClippin@2|

; 4833 :     }
; 4834 :     
; 4835 :     UpdateClipping(pClipRect);

  0005c	e5943000	 ldr         r3, [r4]
  00060	e1a01005	 mov         r1, r5
  00064	e1a00004	 mov         r0, r4
  00068	e5933024	 ldr         r3, [r3, #0x24]
  0006c	e1a0e00f	 mov         lr, pc
  00070	e12fff13	 bx          r3

; 4836 : 
; 4837 :     //  Update the given clipping rect
; 4838 :     if( pClipRect )

  00074	e3550000	 cmp         r5, #0

; 4839 :         *pClipRect = m_rcClip;

  00078	15943018	 ldrne       r3, [r4, #0x18]

; 4840 : 
; 4841 :     //  Return result
; 4842 :     return bResult;
; 4843 : }

  0007c	e1a00006	 mov         r0, r6
  00080	15853000	 strne       r3, [r5]
  00084	1594301c	 ldrne       r3, [r4, #0x1C]
  00088	15853004	 strne       r3, [r5, #4]
  0008c	15943020	 ldrne       r3, [r4, #0x20]
  00090	15853008	 strne       r3, [r5, #8]
  00094	15943024	 ldrne       r3, [r4, #0x24]
  00098	1585300c	 strne       r3, [r5, #0xC]
  0009c	e28dd010	 add         sp, sp, #0x10
  000a0	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$M40898|

			 ENDP  ; |?SetClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z|, OMAPSurface::SetClipping

	EXPORT	|?UpdateClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z| ; OMAPSurface::UpdateClipping

  00000			 AREA	 |.pdata|, PDATA
|$T40911| DCD	|$LN6@UpdateClip|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z| PROC ; OMAPSurface::UpdateClipping

; 4847 : {

  00000		 |$LN6@UpdateClip|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40908|
  00004	e3510000	 cmp         r1, #0

; 4848 :     BOOL bResult = FALSE;
; 4849 : 
; 4850 :     // Could change to to ensure rectangle alignment with different
; 4851 :     // scale and decimation factors...
; 4852 :     
; 4853 :     //Force the clipping rectangle to fall in a pack pixel boundary
; 4854 :     if (pClipRect != NULL)
; 4855 :     {
; 4856 :         AdjustClippingRect(&m_rcClip, 2, 2);

  00008	15901000	 ldrne       r1, [r0]
  0000c	13a03002	 movne       r3, #2
  00010	13a02002	 movne       r2, #2
  00014	1591402c	 ldrne       r4, [r1, #0x2C]
  00018	12801018	 addne       r1, r0, #0x18
  0001c	11a0e00f	 movne       lr, pc
  00020	112fff14	 bxne        r4

; 4857 :     }
; 4858 :     
; 4859 :     bResult = TRUE;
; 4860 :     return bResult;

  00024	e3a00001	 mov         r0, #1

; 4861 : }

  00028	e8bd4010	 ldmia       sp!, {r4, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M40909|

			 ENDP  ; |?UpdateClipping@OMAPSurface@@UAAHPAUtagRECT@@@Z|, OMAPSurface::UpdateClipping

	EXPORT	|?GetClipping@OMAPSurface@@UAA?AUtagRECT@@XZ| ; OMAPSurface::GetClipping

  00000			 AREA	 |.pdata|, PDATA
|$T40922| DCD	|$LN5@GetClippin|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetClipping@OMAPSurface@@UAA?AUtagRECT@@XZ| PROC ; OMAPSurface::GetClipping

; 4865 : {

  00000		 |$LN5@GetClippin|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40919|

; 4866 :     return m_rcClip;

  00004	e5903018	 ldr         r3, [r0, #0x18]
  00008	e590201c	 ldr         r2, [r0, #0x1C]
  0000c	e590e020	 ldr         lr, [r0, #0x20]
  00010	e5900024	 ldr         r0, [r0, #0x24]
  00014	e5813000	 str         r3, [r1]
  00018	e5812004	 str         r2, [r1, #4]
  0001c	e581000c	 str         r0, [r1, #0xC]

; 4867 : }

  00020	e1a00001	 mov         r0, r1
  00024	e581e008	 str         lr, [r1, #8]
  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$M40920|

			 ENDP  ; |?GetClipping@OMAPSurface@@UAA?AUtagRECT@@XZ|, OMAPSurface::GetClipping

	EXPORT	|?AdjustClippingRect@OMAPSurface@@UAAHPAUtagRECT@@EE@Z| ; OMAPSurface::AdjustClippingRect
	IMPORT	|__rt_sdiv|

  00000			 AREA	 |.pdata|, PDATA
|$T40935| DCD	|$LN12@AdjustClip|
	DCD	0x40002a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AdjustClippingRect@OMAPSurface@@UAAHPAUtagRECT@@EE@Z| PROC ; OMAPSurface::AdjustClippingRect

; 4871 : {

  00000		 |$LN12@AdjustClip|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M40932|
  00004	e1a05003	 mov         r5, r3
  00008	e1a06002	 mov         r6, r2
  0000c	e1b04001	 movs        r4, r1

; 4872 :     BOOL bResult = FALSE;
; 4873 : 
; 4874 :     if(srcRect == NULL)
; 4875 :     {
; 4876 :         DEBUGMSG(ZONE_ERROR,
; 4877 :             (TEXT("%S: ERROR: Null rectangle passed!\r\n"), __FUNCTION__));
; 4878 :         return bResult;

  00010	03a00000	 moveq       r0, #0

; 4897 : 
; 4898 : }

  00014	08bd40f0	 ldmeqia     sp!, {r4 - r7, lr}
  00018	012fff1e	 bxeq        lr

; 4879 :     }
; 4880 :     if(vertValue > 1)

  0001c	e3550001	 cmp         r5, #1
  00020	9a00000d	 bls         |$LN4@AdjustClip|

; 4881 :     {
; 4882 :         if( ((srcRect->top)%vertValue)!= 0)

  00024	e5941004	 ldr         r1, [r4, #4]
  00028	e1a00005	 mov         r0, r5
  0002c	e1a07005	 mov         r7, r5
  00030	eb000000	 bl          __rt_sdiv
  00034	e3510000	 cmp         r1, #0

; 4883 :             CEIL_MULT(srcRect->top, vertValue);

  00038	12803001	 addne       r3, r0, #1

; 4884 :         if( ((srcRect->bottom)%vertValue)!= 0)

  0003c	e594100c	 ldr         r1, [r4, #0xC]
  00040	10020793	 mulne       r2, r3, r7
  00044	e1a00005	 mov         r0, r5
  00048	15842004	 strne       r2, [r4, #4]
  0004c	eb000000	 bl          __rt_sdiv
  00050	e3510000	 cmp         r1, #0

; 4885 :             FLOOR_MULT(srcRect->bottom, vertValue);

  00054	10030790	 mulne       r3, r0, r7
  00058	1584300c	 strne       r3, [r4, #0xC]
  0005c		 |$LN4@AdjustClip|

; 4886 :     }
; 4887 :     if(horzValue > 1)

  0005c	e3560001	 cmp         r6, #1
  00060	9a00000d	 bls         |$LN1@AdjustClip|

; 4888 :     {
; 4889 :         if( ((srcRect->left)%horzValue)!= 0)

  00064	e5941000	 ldr         r1, [r4]
  00068	e1a00006	 mov         r0, r6
  0006c	e1a05006	 mov         r5, r6
  00070	eb000000	 bl          __rt_sdiv
  00074	e3510000	 cmp         r1, #0

; 4890 :             CEIL_MULT(srcRect->left, horzValue);

  00078	12803001	 addne       r3, r0, #1

; 4891 :         if( ((srcRect->right)%horzValue)!= 0)

  0007c	e5941008	 ldr         r1, [r4, #8]
  00080	10020593	 mulne       r2, r3, r5
  00084	e1a00006	 mov         r0, r6
  00088	15842000	 strne       r2, [r4]
  0008c	eb000000	 bl          __rt_sdiv
  00090	e3510000	 cmp         r1, #0

; 4892 :             FLOOR_MULT(srcRect->right, horzValue);

  00094	10030590	 mulne       r3, r0, r5
  00098	15843008	 strne       r3, [r4, #8]
  0009c		 |$LN1@AdjustClip|

; 4893 :     }
; 4894 : 
; 4895 :     bResult = TRUE;
; 4896 :     return bResult;

  0009c	e3a00001	 mov         r0, #1

; 4897 : 
; 4898 : }

  000a0	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$M40933|

			 ENDP  ; |?AdjustClippingRect@OMAPSurface@@UAAHPAUtagRECT@@EE@Z|, OMAPSurface::AdjustClippingRect

	EXPORT	|?SetHorizontalScaling@OMAPSurface@@UAAHK@Z| ; OMAPSurface::SetHorizontalScaling

  00000			 AREA	 |.pdata|, PDATA
|$T40947| DCD	|$LN10@SetHorizon|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetHorizontalScaling@OMAPSurface@@UAAHK@Z| PROC ; OMAPSurface::SetHorizontalScaling

; 4902 : {

  00000		 |$LN10@SetHorizon|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40944|
  00004	e3510000	 cmp         r1, #0

; 4903 :     BOOL    bResult;
; 4904 : 
; 4905 :     //  Validate scaling factor
; 4906 :     switch( dwScaleFactor )

  00008	0a000008	 beq         |$LN2@SetHorizon|
  0000c	e3510002	 cmp         r1, #2
  00010	9a000003	 bls         |$LN3@SetHorizon|
  00014	e3510004	 cmp         r1, #4
  00018	0a000001	 beq         |$LN3@SetHorizon|
  0001c	e3510008	 cmp         r1, #8
  00020	1a000002	 bne         |$LN2@SetHorizon|
  00024		 |$LN3@SetHorizon|

; 4907 :     {
; 4908 :         case 1:
; 4909 :         case 2:
; 4910 :         case 4:
; 4911 :         case 8:
; 4912 :             //  Valid scaling factors
; 4913 :             m_dwHorizScale = dwScaleFactor;

  00024	e5801028	 str         r1, [r0, #0x28]

; 4914 :             bResult = TRUE;

  00028	e3a04001	 mov         r4, #1

; 4915 :             break;

  0002c	ea000000	 b           |$LN4@SetHorizon|
  00030		 |$LN2@SetHorizon|

; 4916 :                     
; 4917 :         default:
; 4918 :             //  Invalid
; 4919 :             bResult = FALSE;

  00030	e3a04000	 mov         r4, #0
  00034		 |$LN4@SetHorizon|

; 4920 :             break;
; 4921 :     }
; 4922 : 
; 4923 :     if ((m_pAssocSurface) && (m_eSurfaceType==OMAP_SURFACE_NORMAL))

  00034	e59030a0	 ldr         r3, [r0, #0xA0]
  00038	e1b02003	 movs        r2, r3
  0003c	0a000006	 beq         |$LN1@SetHorizon|
  00040	e590309c	 ldr         r3, [r0, #0x9C]
  00044	e3530000	 cmp         r3, #0

; 4924 :         m_pAssocSurface->SetHorizontalScaling(dwScaleFactor);

  00048	05923000	 ldreq       r3, [r2]
  0004c	01a00002	 moveq       r0, r2
  00050	05933030	 ldreq       r3, [r3, #0x30]
  00054	01a0e00f	 moveq       lr, pc
  00058	012fff13	 bxeq        r3
  0005c		 |$LN1@SetHorizon|

; 4925 :     
; 4926 :     //  Return result
; 4927 :     return bResult;
; 4928 : }

  0005c	e1a00004	 mov         r0, r4
  00060	e8bd4010	 ldmia       sp!, {r4, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M40945|

			 ENDP  ; |?SetHorizontalScaling@OMAPSurface@@UAAHK@Z|, OMAPSurface::SetHorizontalScaling

	EXPORT	|?SetVerticalScaling@OMAPSurface@@UAAHK@Z| ; OMAPSurface::SetVerticalScaling

  00000			 AREA	 |.pdata|, PDATA
|$T40959| DCD	|$LN10@SetVertica|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetVerticalScaling@OMAPSurface@@UAAHK@Z| PROC ; OMAPSurface::SetVerticalScaling

; 4932 : {

  00000		 |$LN10@SetVertica|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40956|
  00004	e3510000	 cmp         r1, #0

; 4933 :     BOOL    bResult;
; 4934 : 
; 4935 :     //  Validate scaling factor
; 4936 :     switch( dwScaleFactor )

  00008	0a000008	 beq         |$LN2@SetVertica|
  0000c	e3510002	 cmp         r1, #2
  00010	9a000003	 bls         |$LN3@SetVertica|
  00014	e3510004	 cmp         r1, #4
  00018	0a000001	 beq         |$LN3@SetVertica|
  0001c	e3510008	 cmp         r1, #8
  00020	1a000002	 bne         |$LN2@SetVertica|
  00024		 |$LN3@SetVertica|

; 4937 :     {
; 4938 :         case 1:
; 4939 :         case 2:
; 4940 :         case 4:
; 4941 :         case 8:
; 4942 :             //  Valid scaling factors
; 4943 :             m_dwVertScale = dwScaleFactor;

  00024	e580102c	 str         r1, [r0, #0x2C]

; 4944 :             bResult = TRUE;

  00028	e3a04001	 mov         r4, #1

; 4945 :             break;

  0002c	ea000000	 b           |$LN4@SetVertica|
  00030		 |$LN2@SetVertica|

; 4946 :                     
; 4947 :         default:
; 4948 :             //  Invalid
; 4949 :             bResult = FALSE;

  00030	e3a04000	 mov         r4, #0
  00034		 |$LN4@SetVertica|

; 4950 :             break;
; 4951 :     }
; 4952 : 
; 4953 :     if ((m_pAssocSurface) && (m_eSurfaceType==OMAP_SURFACE_NORMAL))

  00034	e59030a0	 ldr         r3, [r0, #0xA0]
  00038	e1b02003	 movs        r2, r3
  0003c	0a000006	 beq         |$LN1@SetVertica|
  00040	e590309c	 ldr         r3, [r0, #0x9C]
  00044	e3530000	 cmp         r3, #0

; 4954 :         m_pAssocSurface->SetVerticalScaling(dwScaleFactor);

  00048	05923000	 ldreq       r3, [r2]
  0004c	01a00002	 moveq       r0, r2
  00050	05933034	 ldreq       r3, [r3, #0x34]
  00054	01a0e00f	 moveq       lr, pc
  00058	012fff13	 bxeq        r3
  0005c		 |$LN1@SetVertica|

; 4955 :     
; 4956 :     //  Return result
; 4957 :     return bResult;
; 4958 : }

  0005c	e1a00004	 mov         r0, r4
  00060	e8bd4010	 ldmia       sp!, {r4, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M40957|

			 ENDP  ; |?SetVerticalScaling@OMAPSurface@@UAAHK@Z|, OMAPSurface::SetVerticalScaling

	EXPORT	|?SetSurfaceType@OMAPSurface@@QAAHW4OMAP_SURFACE_TYPE@@@Z| ; OMAPSurface::SetSurfaceType

  00000			 AREA	 |.pdata|, PDATA
|$T40970| DCD	|$LN5@SetSurface@2|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetSurfaceType@OMAPSurface@@QAAHW4OMAP_SURFACE_TYPE@@@Z| PROC ; OMAPSurface::SetSurfaceType

; 4966 : {

  00000		 |$LN5@SetSurface@2|
  00000		 |$M40967|

; 4967 :     m_eSurfaceType = eSurfaceType;

  00000	e580109c	 str         r1, [r0, #0x9C]

; 4968 :     return TRUE;

  00004	e3a00001	 mov         r0, #1

; 4969 : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M40968|

			 ENDP  ; |?SetSurfaceType@OMAPSurface@@QAAHW4OMAP_SURFACE_TYPE@@@Z|, OMAPSurface::SetSurfaceType

	EXPORT	|?SetAssocSurface@OMAPSurface@@QAAHPAV1@@Z| ; OMAPSurface::SetAssocSurface

  00000			 AREA	 |.pdata|, PDATA
|$T40981| DCD	|$LN5@SetAssocSu|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetAssocSurface@OMAPSurface@@QAAHPAV1@@Z| PROC ; OMAPSurface::SetAssocSurface

; 4976 : {

  00000		 |$LN5@SetAssocSu|
  00000		 |$M40978|

; 4977 :     m_pAssocSurface = pAssocSurface;

  00000	e58010a0	 str         r1, [r0, #0xA0]

; 4978 :     return TRUE;

  00004	e3a00001	 mov         r0, #1

; 4979 : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M40979|

			 ENDP  ; |?SetAssocSurface@OMAPSurface@@QAAHPAV1@@Z|, OMAPSurface::SetAssocSurface

	EXPORT	|?UseResizer@OMAPSurface@@QAAHH@Z|	; OMAPSurface::UseResizer

  00000			 AREA	 |.pdata|, PDATA
|$T40992| DCD	|$LN7@UseResizer|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UseResizer@OMAPSurface@@QAAHH@Z| PROC ; OMAPSurface::UseResizer

; 4986 : {

  00000		 |$LN7@UseResizer|
  00000		 |$M40989|

; 4987 :     if (m_pAssocSurface)

  00000	e59030a0	 ldr         r3, [r0, #0xA0]
  00004	e3530000	 cmp         r3, #0

; 4988 :         m_bUseResizer = bUseResizer;

  00008	15801030	 strne       r1, [r0, #0x30]

; 4991 :     return m_bUseResizer;

  0000c	11a00001	 movne       r0, r1

; 4989 :     else /* force to false if Assoc Surface is not allocated */
; 4990 :         m_bUseResizer = FALSE;

  00010	03a03000	 moveq       r3, #0
  00014	05803030	 streq       r3, [r0, #0x30]

; 4991 :     return m_bUseResizer;

  00018	01a00003	 moveq       r0, r3

; 4992 : }

  0001c	e12fff1e	 bx          lr
  00020		 |$M40990|

			 ENDP  ; |?UseResizer@OMAPSurface@@QAAHH@Z|, OMAPSurface::UseResizer

	EXPORT	|?isResizerEnabled@OMAPSurface@@QAAHXZ|	; OMAPSurface::isResizerEnabled

  00000			 AREA	 |.pdata|, PDATA
|$T41002| DCD	|$LN5@isResizerE|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?isResizerEnabled@OMAPSurface@@QAAHXZ| PROC ; OMAPSurface::isResizerEnabled

; 4997 : {

  00000		 |$LN5@isResizerE|
  00000		 |$M40999|

; 4998 :     return m_bUseResizer;

  00000	e5900030	 ldr         r0, [r0, #0x30]

; 4999 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M41000|

			 ENDP  ; |?isResizerEnabled@OMAPSurface@@QAAHXZ|, OMAPSurface::isResizerEnabled

	EXPORT	|?GetRSZHandle@OMAPSurface@@QAAPAXH@Z|	; OMAPSurface::GetRSZHandle
	EXPORT	|??_C@_1M@JCBPODIL@?$AAR?$AAS?$AAZ?$AA1?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|CreateFileW|

  00000			 AREA	 |.pdata|, PDATA
|$T41013| DCD	|$LN7@GetRSZHand|
	DCD	0x40001a02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@JCBPODIL@?$AAR?$AAS?$AAZ?$AA1?$AA?3?$AA?$AA@| DCB "R", 0x0, "S", 0x0
	DCB	"Z", 0x0, "1", 0x0, ":", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetRSZHandle@OMAPSurface@@QAAPAXH@Z| PROC ; OMAPSurface::GetRSZHandle

; 5003 : {

  00000		 |$LN7@GetRSZHand|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M41010|
  00008	e1a04000	 mov         r4, r0

; 5004 :     if ((m_hRSZHandle == NULL) && alloc)

  0000c	e5943034	 ldr         r3, [r4, #0x34]
  00010	e3530000	 cmp         r3, #0
  00014	1a00000e	 bne         |$LN1@GetRSZHand|
  00018	e3510000	 cmp         r1, #0
  0001c	0a00000c	 beq         |$LN1@GetRSZHand|

; 5005 :     {
; 5006 :         m_hRSZHandle = CreateFile( _T("RSZ1:"), 
; 5007 :                                         GENERIC_READ | GENERIC_WRITE, 0, NULL,
; 5008 :                                         OPEN_EXISTING, 0, 0 );

  00020	e59f003c	 ldr         r0, [pc, #0x3C]
  00024	e3a0e003	 mov         lr, #3
  00028	e3a05000	 mov         r5, #0
  0002c	e3a03000	 mov         r3, #0
  00030	e3a02000	 mov         r2, #0
  00034	e3a01103	 mov         r1, #3, 2
  00038	e58d5008	 str         r5, [sp, #8]
  0003c	e58d5004	 str         r5, [sp, #4]
  00040	e58de000	 str         lr, [sp]
  00044	eb000000	 bl          CreateFileW

; 5009 :         if (m_hRSZHandle == INVALID_HANDLE_VALUE)

  00048	e3700001	 cmn         r0, #1
  0004c	e5840034	 str         r0, [r4, #0x34]

; 5010 :             m_hRSZHandle = NULL;

  00050	05845034	 streq       r5, [r4, #0x34]
  00054		 |$LN1@GetRSZHand|

; 5011 : 
; 5012 :         DEBUGMSG(ZONE_WARNING, (L"GetRSZHandle: Open handle 0x%x \r\n",m_hRSZHandle));
; 5013 :         
; 5014 :     }
; 5015 :     return m_hRSZHandle;

  00054	e5940034	 ldr         r0, [r4, #0x34]

; 5016 : }

  00058	e28dd00c	 add         sp, sp, #0xC
  0005c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN8@GetRSZHand|
  00064		 |$LN9@GetRSZHand|
  00064	00000000	 DCD         |??_C@_1M@JCBPODIL@?$AAR?$AAS?$AAZ?$AA1?$AA?3?$AA?$AA@|
  00068		 |$M41011|

			 ENDP  ; |?GetRSZHandle@OMAPSurface@@QAAPAXH@Z|, OMAPSurface::GetRSZHandle

	EXPORT	|?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z|	; OMAPSurface::SetRSZHandle

  00000			 AREA	 |.pdata|, PDATA
|$T41025| DCD	|$LN6@SetRSZHand|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z| PROC ; OMAPSurface::SetRSZHandle

; 5019 : {

  00000		 |$LN6@SetRSZHand|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M41022|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 5020 :     if ((m_hRSZHandle != NULL) && freeHandle)

  0000c	e5943034	 ldr         r3, [r4, #0x34]
  00010	e3530000	 cmp         r3, #0
  00014	0a000005	 beq         |$LN1@SetRSZHand|
  00018	e3520000	 cmp         r2, #0
  0001c	0a000003	 beq         |$LN1@SetRSZHand|

; 5021 :     {        
; 5022 :         CloseHandle(m_hRSZHandle);

  00020	e1a00003	 mov         r0, r3
  00024	eb000000	 bl          CloseHandle

; 5023 :         
; 5024 :         m_hRSZHandle = NULL;

  00028	e3a03000	 mov         r3, #0
  0002c	e5843034	 str         r3, [r4, #0x34]
  00030		 |$LN1@SetRSZHand|

; 5025 :     }
; 5026 : 
; 5027 :     m_hRSZHandle = rszHandle;

  00030	e5845034	 str         r5, [r4, #0x34]

; 5028 : }

  00034	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M41023|

			 ENDP  ; |?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z|, OMAPSurface::SetRSZHandle

	EXPORT	|?ConfigResizerParams@OMAPSurface@@QAAHPAUtagRECT@@0W4OMAP_DSS_ROTATION@@@Z| ; OMAPSurface::ConfigResizerParams
	IMPORT	|DeviceIoControl|

  00000			 AREA	 |.pdata|, PDATA
|$T41038| DCD	|$LN10@ConfigResi|
	DCD	0x40004e02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ConfigResizerParams@OMAPSurface@@QAAHPAUtagRECT@@0W4OMAP_DSS_ROTATION@@@Z| PROC ; OMAPSurface::ConfigResizerParams

; 5032 : {	

  00000		 |$LN10@ConfigResi|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M41035|
  00008	e1a06003	 mov         r6, r3
  0000c	e1a08002	 mov         r8, r2
  00010	e1a07001	 mov         r7, r1
  00014	e1a09000	 mov         r9, r0

; 5033 :     BOOL retCode = FALSE;
; 5034 :      
; 5035 :     //m_sRSZParams.ulReadAddr;
; 5036 :     m_sRSZParams.ulReadOffset = Stride(eRotation); /* input width * 2 */

  00018	e599e000	 ldr         lr, [r9]
  0001c	e1a01006	 mov         r1, r6
  00020	e59e4010	 ldr         r4, [lr, #0x10]
  00024	e1a0e00f	 mov         lr, pc
  00028	e12fff14	 bx          r4

; 5037 :     m_sRSZParams.ulReadAddrOffset = 0;
; 5038 :     m_sRSZParams.ulOutOffset = Stride(eRotation);     

  0002c	e599e000	 ldr         lr, [r9]
  00030	e1a04000	 mov         r4, r0
  00034	e3a0a000	 mov         r10, #0
  00038	e59e5010	 ldr         r5, [lr, #0x10]
  0003c	e1a01006	 mov         r1, r6
  00040	e1a00009	 mov         r0, r9
  00044	e289c03c	 add         r12, r9, #0x3C
  00048	e88c0410	 stmia       r12, {r4, r10}
  0004c	e1a0e00f	 mov         lr, pc
  00050	e12fff15	 bx          r5

; 5039 :     //m_sRSZParams.ulWriteAddr;
; 5040 : 
; 5041 :     m_sRSZParams.ulInputImageWidth = pSrcRect->right - pSrcRect->left;
; 5042 :     m_sRSZParams.ulInputImageHeight = pSrcRect->bottom - pSrcRect->top;
; 5043 : 
; 5044 :     m_sRSZParams.ulOutputImageWidth = pDestRect->right - pDestRect->left;
; 5045 :     m_sRSZParams.ulOutputImageHeight = pDestRect->bottom - pDestRect->top;
; 5046 :     m_sRSZParams.h_startphase = RSZ_DEFAULTSTPHASE;
; 5047 :     m_sRSZParams.v_startphase = RSZ_DEFAULTSTPHASE;
; 5048 :     //m_sRSZParams.h_resz;
; 5049 :     //m_sRSZParams.v_resz;
; 5050 :     //m_sRSZParams.algo;
; 5051 :     m_sRSZParams.width = m_sRSZParams.ulInputImageWidth;
; 5052 :     m_sRSZParams.height = m_sRSZParams.ulInputImageHeight;
; 5053 :     m_sRSZParams.cropTop = 0;
; 5054 :     m_sRSZParams.cropLeft = 0;     
; 5055 :     m_sRSZParams.cropWidth = m_sRSZParams.ulOutputImageWidth;
; 5056 :     m_sRSZParams.cropHeight = m_sRSZParams.ulOutputImageHeight;
; 5057 :     m_sRSZParams.bReadFromMemory = TRUE;
; 5058 :     m_sRSZParams.enableZoom = FALSE;
; 5059 :     m_sRSZParams.ulZoomFactor = 0;
; 5060 :     if (m_ePixelFormat == OMAP_DSS_PIXELFORMAT_UYVY)

  00054	e3a05001	 mov         r5, #1
  00058	e5890090	 str         r0, [r9, #0x90]
  0005c	e597e008	 ldr         lr, [r7, #8]
  00060	e5973000	 ldr         r3, [r7]
  00064	e5994004	 ldr         r4, [r9, #4]
  00068	e04e3003	 sub         r3, lr, r3
  0006c	e5893048	 str         r3, [r9, #0x48]
  00070	e597200c	 ldr         r2, [r7, #0xC]
  00074	e5973004	 ldr         r3, [r7, #4]
  00078	e599e048	 ldr         lr, [r9, #0x48]
  0007c	e354000b	 cmp         r4, #0xB
  00080	e0423003	 sub         r3, r2, r3
  00084	e589304c	 str         r3, [r9, #0x4C]
  00088	e5982008	 ldr         r2, [r8, #8]
  0008c	e5983000	 ldr         r3, [r8]
  00090	e599004c	 ldr         r0, [r9, #0x4C]
  00094	e0423003	 sub         r3, r2, r3
  00098	e5893050	 str         r3, [r9, #0x50]
  0009c	e598200c	 ldr         r2, [r8, #0xC]
  000a0	e5983004	 ldr         r3, [r8, #4]
  000a4	e5991050	 ldr         r1, [r9, #0x50]
  000a8	e589505c	 str         r5, [r9, #0x5C]
  000ac	e0423003	 sub         r3, r2, r3
  000b0	e289c054	 add         r12, r9, #0x54
  000b4	e88c0028	 stmia       r12, {r3, r5}
  000b8	e5993054	 ldr         r3, [r9, #0x54]
  000bc	e589e06c	 str         lr, [r9, #0x6C]
  000c0	e289c070	 add         r12, r9, #0x70
  000c4	e88c0401	 stmia       r12, {r0, r10}
  000c8	e589307c	 str         r3, [r9, #0x7C]
  000cc	e589a078	 str         r10, [r9, #0x78]
  000d0	e289c080	 add         r12, r9, #0x80
  000d4	e88c0422	 stmia       r12, {r1, r5, r10}
  000d8	e589a08c	 str         r10, [r9, #0x8C]

; 5061 :     {
; 5062 :         m_sRSZParams.ulInpType = RSZ_INTYPE_YCBCR422_16BIT; 

  000dc	0589a098	 streq       r10, [r9, #0x98]

; 5063 :         m_sRSZParams.ulPixFmt = RSZ_PIX_FMT_UYVY; 

  000e0	0589a094	 streq       r10, [r9, #0x94]
  000e4	0a000003	 beq         |$LN2@ConfigResi|

; 5064 :     }
; 5065 :     else if (m_ePixelFormat == OMAP_DSS_PIXELFORMAT_YUV2)        

  000e8	e354000a	 cmp         r4, #0xA
  000ec	1a00000d	 bne         |$LN3@ConfigResi|

; 5066 :     {
; 5067 :         m_sRSZParams.ulInpType = RSZ_INTYPE_YCBCR422_16BIT; 
; 5068 :         m_sRSZParams.ulPixFmt = RSZ_PIX_FMT_YUYV; 

  000f0	e289c094	 add         r12, r9, #0x94
  000f4	e88c0420	 stmia       r12, {r5, r10}
  000f8		 |$LN2@ConfigResi|

; 5074 :     }
; 5075 :     
; 5076 :     retCode = DeviceIoControl (  m_hRSZHandle,
; 5077 :                                  RSZ_IOCTL_SET_PARAMS,
; 5078 :                                  (LPVOID)&m_sRSZParams, 
; 5079 :                                  sizeof (RSZParams_t), 
; 5080 :                                  (LPVOID)&m_sRSZParams, 
; 5081 :                                  sizeof (RSZParams_t), NULL, NULL);

  000f8	e5990034	 ldr         r0, [r9, #0x34]
  000fc	e289e038	 add         lr, r9, #0x38
  00100	e3a04064	 mov         r4, #0x64
  00104	e1a0200e	 mov         r2, lr
  00108	e3a03064	 mov         r3, #0x64
  0010c	e3a01002	 mov         r1, #2
  00110	e58da00c	 str         r10, [sp, #0xC]
  00114	e58da008	 str         r10, [sp, #8]
  00118	e58d4004	 str         r4, [sp, #4]
  0011c	e58de000	 str         lr, [sp]
  00120	eb000000	 bl          DeviceIoControl

; 5082 : 
; 5083 :     if (!retCode)     
; 5084 :         DEBUGMSG(ZONE_WARNING, (L"ConfigResizerParams: handle 0x%x returned retCode %d \r\n",m_hRSZHandle,retCode));
; 5085 : 
; 5086 : 
; 5087 :      return retCode;

  00124	ea000000	 b           |$LN6@ConfigResi|
  00128		 |$LN3@ConfigResi|

; 5069 :     }
; 5070 :     else
; 5071 :     {
; 5072 :         DEBUGMSG(ZONE_WARNING, (L"ConfigResizerParams: Unsupported pixel type %d \r\n",m_ePixelFormat));
; 5073 :         return FALSE;

  00128	e3a00000	 mov         r0, #0
  0012c		 |$LN6@ConfigResi|

; 5088 :      
; 5089 : }

  0012c	e28dd010	 add         sp, sp, #0x10
  00130	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00134	e12fff1e	 bx          lr
  00138		 |$M41036|

			 ENDP  ; |?ConfigResizerParams@OMAPSurface@@QAAHPAUtagRECT@@0W4OMAP_DSS_ROTATION@@@Z|, OMAPSurface::ConfigResizerParams

	EXPORT	|?StartResizer@OMAPSurface@@QAAHKK@Z|	; OMAPSurface::StartResizer

  00000			 AREA	 |.pdata|, PDATA
|$T41051| DCD	|$LN8@StartResiz|
	DCD	0x40001d02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?StartResizer@OMAPSurface@@QAAHKK@Z| PROC ; OMAPSurface::StartResizer

; 5092 : {

  00000		 |$LN8@StartResiz|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M41048|
  00008	e1a06002	 mov         r6, r2
  0000c	e1a04001	 mov         r4, r1
  00010	e1a05000	 mov         r5, r0

; 5093 :     BOOL retCode = FALSE;   
; 5094 :     DWORD dwInAddrOffset = 0;

  00014	e3a0e000	 mov         lr, #0

; 5095 :     if (dwInAddr%32!=0)

  00018	e214101f	 ands        r1, r4, #0x1F
  0001c	0a000004	 beq         |$LN2@StartResiz|

; 5096 :     {
; 5097 :         dwInAddrOffset=dwInAddr&0x1F;
; 5098 :         dwInAddr=(dwInAddr>>5)<<5;
; 5099 :         if (m_sRSZParams.ulInpType == RSZ_INTYPE_YCBCR422_16BIT)

  00020	e5953098	 ldr         r3, [r5, #0x98]
  00024	e1a0e001	 mov         lr, r1
  00028	e3c4401f	 bic         r4, r4, #0x1F
  0002c	e3530000	 cmp         r3, #0

; 5100 :             dwInAddrOffset/=2;

  00030	01a0e0a1	 moveq       lr, r1, lsr #1
  00034		 |$LN2@StartResiz|

; 5101 :     }
; 5102 :     m_sRSZParams.ulReadAddr = dwInAddr;
; 5103 :     m_sRSZParams.ulWriteAddr = dwOutAddr;
; 5104 :     m_sRSZParams.cropLeft = dwInAddrOffset;
; 5105 :     retCode = DeviceIoControl ( m_hRSZHandle,
; 5106 :                                  RSZ_IOCTL_START_RESIZER,
; 5107 :                                  (LPVOID)&m_sRSZParams, 
; 5108 :                                  sizeof (RSZParams_t), 
; 5109 :                                  NULL, 0, NULL, NULL);

  00034	e5950034	 ldr         r0, [r5, #0x34]
  00038	e3a07000	 mov         r7, #0
  0003c	e3a03064	 mov         r3, #0x64
  00040	e2852038	 add         r2, r5, #0x38
  00044	e3a01004	 mov         r1, #4
  00048	e5854038	 str         r4, [r5, #0x38]
  0004c	e5856044	 str         r6, [r5, #0x44]
  00050	e585e078	 str         lr, [r5, #0x78]
  00054	e58d700c	 str         r7, [sp, #0xC]
  00058	e58d7008	 str         r7, [sp, #8]
  0005c	e58d7004	 str         r7, [sp, #4]
  00060	e58d7000	 str         r7, [sp]
  00064	eb000000	 bl          DeviceIoControl

; 5110 :     if (!retCode)     
; 5111 :         DEBUGMSG(ZONE_WARNING, (L"StartResizer: handle 0x%x inAddr 0x%x outAddr 0x%x cropLeft %d returned retCode %d",
; 5112 :                         m_hRSZHandle,dwInAddr,dwOutAddr,dwInAddrOffset,retCode));
; 5113 : 
; 5114 :     return retCode;
; 5115 : }

  00068	e28dd010	 add         sp, sp, #0x10
  0006c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$M41049|

			 ENDP  ; |?StartResizer@OMAPSurface@@QAAHKK@Z|, OMAPSurface::StartResizer

	EXPORT	|?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z| ; OMAPDisplayController::EnableOverlayOptimization
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T41077| DCD	|$LN18@EnableOver|
	DCD	0x40004501
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\dssai.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z| PROC ; OMAPDisplayController::EnableOverlayOptimization

; 5180 : {

  00000		 |$LN18@EnableOver|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M41074|
  00004	e3510000	 cmp         r1, #0

; 5181 :     DWORD dwWindowSkip = 0;  

  00008	e3a02000	 mov         r2, #0

; 5182 : 
; 5183 :     //Enable Overlay optimization if no colorkeying, no alpha blending and only VID1 layer is visible
; 5184 :     //going to LCD destination
; 5185 :     if( bEnable &&
; 5186 :         g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].pSurface != NULL &&           
; 5187 :         g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled == TRUE &&
; 5188 :         g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].eDestination == OMAP_DSS_DESTINATION_LCD &&
; 5189 :         g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled == TRUE &&
; 5190 :         g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled == FALSE && 
; 5191 :         (INREG32(&m_pDispRegs->DISPC_CONFIG) & DISPC_CONFIG_TCKLCDENABLE) == 0 &&
; 5192 :         (INREG32( &m_pDispRegs->DISPC_CONFIG) & DISPC_CONFIG_LCDALPHABLENDERENABLE) == 0)

  0000c	0a000035	 beq         |$LN3@EnableOver|
  00010	e59f10f8	 ldr         r1, [pc, #0xF8]
  00014	e5915008	 ldr         r5, [r1, #8]
  00018	e3550000	 cmp         r5, #0
  0001c	0a000031	 beq         |$LN3@EnableOver|
  00020	e5913000	 ldr         r3, [r1]
  00024	e3530001	 cmp         r3, #1
  00028	1a00002e	 bne         |$LN3@EnableOver|
  0002c	e5913024	 ldr         r3, [r1, #0x24]
  00030	e3530000	 cmp         r3, #0
  00034	1a00002b	 bne         |$LN3@EnableOver|
  00038	e5913020	 ldr         r3, [r1, #0x20]
  0003c	e3530001	 cmp         r3, #1
  00040	1a000028	 bne         |$LN3@EnableOver|
  00044	e5913040	 ldr         r3, [r1, #0x40]
  00048	e3530000	 cmp         r3, #0
  0004c	1a000025	 bne         |$LN3@EnableOver|
  00050	e590e008	 ldr         lr, [r0, #8]
  00054	e59e3044	 ldr         r3, [lr, #0x44]
  00058	e3130b01	 tst         r3, #1, 22
  0005c	1a000021	 bne         |$LN3@EnableOver|
  00060	e59e3044	 ldr         r3, [lr, #0x44]
  00064	e3130701	 tst         r3, #1, 14
  00068	1a00001e	 bne         |$LN3@EnableOver|

; 5193 :     {
; 5194 :          //Assume overlay destination is always contained within the GFX window inclusive  
; 5195 :         OMAPSurface *pGFXSurface = g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].pSurface;             
; 5196 :         DWORD dwGFXWidth = g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].dwDestWidth;
; 5197 :         DWORD dwGFXHeight = g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].dwDestHeight;
; 5198 :         DWORD dwDestWidth = g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].dwDestWidth;
; 5199 :         DWORD dwDestHeight = g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].dwDestHeight;
; 5200 :         DWORD dwPosX =  INREG32(&m_pDispRegs->tDISPC_VID1.POSITION) & 0xFFFF;

  0006c	e59e20c4	 ldr         r2, [lr, #0xC4]
  00070	e5919014	 ldr         r9, [r1, #0x14]
  00074	e5914034	 ldr         r4, [r1, #0x34]
  00078	e3a03cff	 mov         r3, #0xFF, 24

; 5201 :         DWORD dwGFXPixInc = INREG32(&m_pDispRegs->DISPC_GFX_PIXEL_INC);
; 5202 :         DWORD dwGFXRowInc = INREG32(&m_pDispRegs->DISPC_GFX_ROW_INC);

  0007c	e59e60b0	 ldr         r6, [lr, #0xB0]
  00080	e38330ff	 orr         r3, r3, #0xFF
  00084	e5918038	 ldr         r8, [r1, #0x38]
  00088	e59ee0ac	 ldr         lr, [lr, #0xAC]
  0008c	e0027003	 and         r7, r2, r3

; 5203 :                
; 5204 :         //Simulate how the DMA controller would skip bytes
; 5205 :         //1.after every pixel read DMA controller index = index + BPP-1
; 5206 :         //2.After every pixel read, index = index+PIXEL_INC, unless it's the last pixel in the row
; 5207 :         //3.At the end of each row, index = index+ROW_INC       
; 5208 :         if( (dwDestWidth == dwGFXWidth) && (dwDestHeight == dwGFXHeight) )

  00090	e1540009	 cmp         r4, r9
  00094	1a00000b	 bne         |$LN5@EnableOver|
  00098	e5913018	 ldr         r3, [r1, #0x18]
  0009c	e1580003	 cmp         r8, r3

; 5209 :         {
; 5210 :             //  Whole video layer covers GFX
; 5211 :             dwWindowSkip = 0;

  000a0	03a02000	 moveq       r2, #0
  000a4	0a00000f	 beq         |$LN3@EnableOver|

; 5212 :         }
; 5213 :         else if(dwDestWidth == dwGFXWidth)
; 5214 :         {               
; 5215 :             DWORD dwPixIncPerRow = dwGFXPixInc*(dwDestWidth-1);
; 5216 :             DWORD dwByteReadsPerRow = dwDestWidth*(pGFXSurface->PixelSize()-1);

  000a8	e5953008	 ldr         r3, [r5, #8]
  000ac	e2441001	 sub         r1, r4, #1
  000b0	e2433001	 sub         r3, r3, #1
  000b4	e0020493	 mul         r2, r3, r4
  000b8	e0232691	 mla         r3, r1, r6, r2

; 5217 :             dwWindowSkip = dwDestHeight*(dwPixIncPerRow+dwByteReadsPerRow+dwGFXRowInc);         

  000bc	e083300e	 add         r3, r3, lr
  000c0	e0020893	 mul         r2, r3, r8

; 5218 :         }        
; 5219 :         else  

  000c4	ea000007	 b           |$LN3@EnableOver|
  000c8		 |$LN5@EnableOver|

; 5220 :         {              
; 5221 :             dwWindowSkip = dwDestWidth*(dwGFXPixInc+(pGFXSurface->PixelSize()-1));  

  000c8	e5953008	 ldr         r3, [r5, #8]

; 5222 :             if(dwPosX != 0 && (dwPosX+dwDestWidth) != dwGFXWidth)

  000cc	e3570000	 cmp         r7, #0
  000d0	e0833006	 add         r3, r3, r6
  000d4	e2433001	 sub         r3, r3, #1
  000d8	e0020493	 mul         r2, r3, r4
  000dc	10873004	 addne       r3, r7, r4
  000e0	11530009	 cmpne       r3, r9

; 5223 :             {
; 5224 :                 //additional pixel increment needed
; 5225 :                 dwWindowSkip +=dwGFXPixInc;  

  000e4	10822006	 addne       r2, r2, r6
  000e8		 |$LN3@EnableOver|

; 5226 :             }
; 5227 :         }                        
; 5228 :     }
; 5229 : 
; 5230 : 
; 5231 :     //  Set window skip value
; 5232 :     OUTREG32(&m_pDispRegs->DISPC_GFX_WINDOW_SKIP, dwWindowSkip);

  000e8	e5903008	 ldr         r3, [r0, #8]

; 5233 : 
; 5234 :     //  Enable/disable window skip
; 5235 :     if( dwWindowSkip != 0 )

  000ec	e3520000	 cmp         r2, #0
  000f0	e58320b4	 str         r2, [r3, #0xB4]

; 5236 :         SETREG32(&m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_OVERLAY_OPTIMIZATION);        

  000f4	e5902008	 ldr         r2, [r0, #8]
  000f8	e5923040	 ldr         r3, [r2, #0x40]
  000fc	13833a01	 orrne       r3, r3, #1, 20

; 5237 :     else
; 5238 :         CLRREG32(&m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_OVERLAY_OPTIMIZATION);        

  00100	03c33a01	 biceq       r3, r3, #1, 20
  00104	e5823040	 str         r3, [r2, #0x40]

; 5239 : }

  00108	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  0010c	e12fff1e	 bx          lr
  00110		 |$LN19@EnableOver|
  00110		 |$LN20@EnableOver|
  00110	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  00114		 |$M41075|

			 ENDP  ; |?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z|, OMAPDisplayController::EnableOverlayOptimization

	EXPORT	|?SetDssFclk@OMAPDisplayController@@IAAHW4OMAP_DSS_FCLK@@W4OMAP_DSS_FCLKVALUE@@@Z| ; OMAPDisplayController::SetDssFclk

  00000			 AREA	 |.pdata|, PDATA
|$T41088| DCD	|$LN5@SetDssFclk|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetDssFclk@OMAPDisplayController@@IAAHW4OMAP_DSS_FCLK@@W4OMAP_DSS_FCLKVALUE@@@Z| PROC ; OMAPDisplayController::SetDssFclk

; 5247 : {

  00000		 |$LN5@SetDssFclk|
  00000		 |$M41085|

; 5248 :     BOOL bRet = TRUE;
; 5249 :     
; 5250 :     UNREFERENCED_PARAMETER(eDssFclkValue);
; 5251 :     UNREFERENCED_PARAMETER(eDssFclkSource);
; 5252 : 
; 5253 :     return bRet;

  00000	e3a00001	 mov         r0, #1

; 5254 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M41086|

			 ENDP  ; |?SetDssFclk@OMAPDisplayController@@IAAHW4OMAP_DSS_FCLK@@W4OMAP_DSS_FCLKVALUE@@@Z|, OMAPDisplayController::SetDssFclk

	EXPORT	|?InitDsiPll@OMAPDisplayController@@IAAHXZ| ; OMAPDisplayController::InitDsiPll
	EXPORT	|??_C@_1CI@BKOMHDDL@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OPIOMKJF@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAo?$AAn?$AA?5?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@HEOPJPGD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAD?$AAS?$AAI?$AAP?$AAL?$AAL?$AA?3?$AA?3?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAs@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T41120| DCD	|$LN33@InitDsiPll|
	DCD	0x40004c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@BKOMHDDL@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "S", 0x0, "I", 0x0, " ", 0x0, "P", 0x0, "L", 0x0, "L"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OPIOMKJF@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAo?$AAn?$AA?5?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "n", 0x0, " ", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "D"
	DCB	0x0, "S", 0x0, "I", 0x0, " ", 0x0, "P", 0x0, "L", 0x0, "L"
	DCB	0x0, " ", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@HEOPJPGD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAD?$AAS?$AAI?$AAP?$AAL?$AAL?$AA?3?$AA?3?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAs@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "D", 0x0, "S"
	DCB	0x0, "I", 0x0, "P", 0x0, "L", 0x0, "L", 0x0, ":", 0x0, ":"
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "D", 0x0, "S"
	DCB	0x0, "I", 0x0, " ", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u"
	DCB	0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InitDsiPll@OMAPDisplayController@@IAAHXZ| PROC ; OMAPDisplayController::InitDsiPll

; 5259 : {

  00000		 |$LN33@InitDsiPll|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M41117|
  00004	e1a07000	 mov         r7, r0

; 5260 :     BOOL  bRet = TRUE;
; 5261 :     ULONG count = 100;                  //count for timed status check
; 5262 :     ULONG value;
; 5263 :     
; 5264 :     // PCLKFREE should be set for DSI
; 5265 :     value  = INREG32( &m_pDispRegs->DISPC_CONTROL);

  00008	e5972008	 ldr         r2, [r7, #8]
  0000c	e3a06001	 mov         r6, #1
  00010	e3a04064	 mov         r4, #0x64
  00014	e5923040	 ldr         r3, [r2, #0x40]

; 5266 :     value |= DISPC_CONTROL_PCKFREEENABLE_ENABLED;

  00018	e3833302	 orr         r3, r3, #2, 6

; 5267 :     OUTREG32( &m_pDispRegs->DISPC_CONTROL, value);

  0001c	e5823040	 str         r3, [r2, #0x40]

; 5268 : 
; 5269 :     // Reset the DSI protocol engine
; 5270 :     SETREG32( &m_pDSIRegs->DSI_SYSCONFIG, SYSCONFIG_SOFTRESET);

  00020	e5972010	 ldr         r2, [r7, #0x10]
  00024	e5923010	 ldr         r3, [r2, #0x10]
  00028	e3833002	 orr         r3, r3, #2
  0002c	e5823010	 str         r3, [r2, #0x10]

; 5271 : 
; 5272 :     // Wait for reset to complete
; 5273 :     while (((INREG32(&m_pDSIRegs->DSI_SYSSTATUS)) != SYSSTATUS_RESETDONE) && (--count))

  00030	ea000003	 b           |$LN30@InitDsiPll|
  00034		 |$LL15@InitDsiPll|
  00034	e2544001	 subs        r4, r4, #1
  00038	0a000025	 beq         |$LN28@InitDsiPll|

; 5274 :     {
; 5275 :         StallExecution(1000);

  0003c	e3a00ffa	 mov         r0, #0xFA, 30
  00040	eb000000	 bl          StallExecution
  00044		 |$LN30@InitDsiPll|
  00044	e5973010	 ldr         r3, [r7, #0x10]
  00048	e5933014	 ldr         r3, [r3, #0x14]
  0004c	e3530001	 cmp         r3, #1
  00050	1afffff7	 bne         |$LL15@InitDsiPll|

; 5283 :         goto Clean;
; 5284 :     }
; 5285 : 
; 5286 :     //  Configure for idle during inactivity
; 5287 :     OUTREG32( &m_pDSIRegs->DSI_SYSCONFIG,  
; 5288 :                 SYSCONFIG_AUTOIDLE  |
; 5289 :                 SYSCONFIG_ENAWAKEUP |
; 5290 :                 SYSCONFIG_SMARTIDLE
; 5291 :                 );

  00054	e5973010	 ldr         r3, [r7, #0x10]
  00058	e3a02015	 mov         r2, #0x15
  0005c	e3e01103	 mvn         r1, #3, 2
  00060	e5832010	 str         r2, [r3, #0x10]

; 5292 : 
; 5293 :     // Clear the DSI IRQ status
; 5294 :     value = INREG32( &m_pDSIRegs->DSI_IRQSTATUS);

  00064	e5972010	 ldr         r2, [r7, #0x10]

; 5295 :     OUTREG32( &m_pDSIRegs->DSI_IRQSTATUS, value);
; 5296 : 
; 5297 :     // Enable the Pwr to the DSI sub modules
; 5298 :     value  = INREG32( &m_pDSIRegs->DSI_CLK_CTRL);
; 5299 :     // clear the current pwr cmd value
; 5300 :     value  = (value & ~(DSI_CLK_CTRL_PLL_PWR_CMD_MASK));

  00068	e2210a02	 eor         r0, r1, #2, 20
  0006c	e3a01102	 mov         r1, #2, 2
  00070	e5923018	 ldr         r3, [r2, #0x18]

; 5301 :     // set the pwr cmd for enabling pwr to PLL and HS DIVIDER
; 5302 :     value |= (DSI_CLK_CTRL_PLL_PWR_CMD_ON_PLLANDHS)|(1 << 13);

  00074	e3811a02	 orr         r1, r1, #2, 20

; 5303 :     OUTREG32( &m_pDSIRegs->DSI_CLK_CTRL, value);
; 5304 : 
; 5305 :     // Check whether the power status is changed
; 5306 :     count = 1000;

  00078	e3a05ffa	 mov         r5, #0xFA, 30
  0007c	e5823018	 str         r3, [r2, #0x18]
  00080	e5972010	 ldr         r2, [r7, #0x10]
  00084	e5923054	 ldr         r3, [r2, #0x54]
  00088	e0033000	 and         r3, r3, r0
  0008c	e1833001	 orr         r3, r3, r1
  00090	e5823054	 str         r3, [r2, #0x54]
  00094		 |$LL11@InitDsiPll|

; 5307 :     do
; 5308 :     {
; 5309 :         value = INREG32( &m_pDSIRegs->DSI_CLK_CTRL);

  00094	e5973010	 ldr         r3, [r7, #0x10]

; 5310 :         value = (value & DSI_CLK_CTRL_PLL_PWR_STATUS_ON_PLLANDHS);
; 5311 :         StallExecution(1000);

  00098	e3a00ffa	 mov         r0, #0xFA, 30
  0009c	e5934054	 ldr         r4, [r3, #0x54]
  000a0	eb000000	 bl          StallExecution

; 5312 :     }
; 5313 :     while ((value == 0) && (--count));

  000a4	e3140202	 tst         r4, #2, 4
  000a8	1a000001	 bne         |$LN8@InitDsiPll|
  000ac	e2555001	 subs        r5, r5, #1
  000b0	1afffff7	 bne         |$LL11@InitDsiPll|
  000b4		 |$LN8@InitDsiPll|

; 5314 : 
; 5315 :     if (count == 0)

  000b4	e3550000	 cmp         r5, #0
  000b8	1a000009	 bne         |$LN7@InitDsiPll|

; 5316 :     {
; 5317 :         bRet = FALSE;
; 5318 :         RETAILMSG(1,(L"Unable to turn on DSI PLL %x\r\n",
; 5319 :             INREG32(&m_pDSIRegs->DSI_CLK_CTRL)\
; 5320 :             ));

  000bc	e5973010	 ldr         r3, [r7, #0x10]
  000c0	e59f0064	 ldr         r0, [pc, #0x64]
  000c4	e3a06000	 mov         r6, #0
  000c8	e5931054	 ldr         r1, [r3, #0x54]
  000cc	eb000000	 bl          NKDbgPrintfW

; 5338 :     }
; 5339 : 
; 5340 : Clean:

  000d0	ea000010	 b           |$Clean$39987|
  000d4		 |$LN28@InitDsiPll|

; 5276 :     }
; 5277 : 
; 5278 :     if (count == 0)
; 5279 :     {
; 5280 :         RETAILMSG(1,(L"ERROR: InitDSIPLL::"
; 5281 :                      L"Failed to reset DSI Module\r\n"));

  000d4	e59f004c	 ldr         r0, [pc, #0x4C]
  000d8	eb000000	 bl          NKDbgPrintfW

; 5282 :         bRet = FALSE;

  000dc	e3a06000	 mov         r6, #0
  000e0	ea00000c	 b           |$Clean$39987|
  000e4		 |$LN7@InitDsiPll|

; 5321 :         goto Clean;
; 5322 :     }
; 5323 : 
; 5324 :     // Check for the PLL reset complete status
; 5325 :     count = 100;

  000e4	e3a05064	 mov         r5, #0x64
  000e8		 |$LL5@InitDsiPll|

; 5326 :     do
; 5327 :     {
; 5328 :         value = INREG32( &m_pDSIPLLRegs->DSI_PLL_STATUS);

  000e8	e5973014	 ldr         r3, [r7, #0x14]

; 5329 :         value = (value & DSI_PLLCTRL_RESET_DONE_STATUS);
; 5330 :         StallExecution(1000);

  000ec	e3a00ffa	 mov         r0, #0xFA, 30
  000f0	e5934004	 ldr         r4, [r3, #4]
  000f4	eb000000	 bl          StallExecution

; 5331 :     }
; 5332 :     while ((value == 0) && (--count));

  000f8	e3140001	 tst         r4, #1
  000fc	1a000001	 bne         |$LN2@InitDsiPll|
  00100	e2555001	 subs        r5, r5, #1
  00104	1afffff7	 bne         |$LL5@InitDsiPll|
  00108		 |$LN2@InitDsiPll|

; 5333 : 
; 5334 :     if (count == 0)

  00108	e3550000	 cmp         r5, #0

; 5335 :     {
; 5336 :         bRet = FALSE;
; 5337 :         RETAILMSG(1,(L"DSI PLL not reset\r\n"));

  0010c	059f0010	 ldreq       r0, [pc, #0x10]
  00110	03a06000	 moveq       r6, #0
  00114	0b000000	 bleq        NKDbgPrintfW
  00118		 |$Clean$39987|

; 5341 :     return bRet;
; 5342 : }

  00118	e1a00006	 mov         r0, r6
  0011c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00120	e12fff1e	 bx          lr
  00124		 |$LN34@InitDsiPll|
  00124		 |$LN35@InitDsiPll|
  00124	00000000	 DCD         |??_C@_1CI@BKOMHDDL@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  00128		 |$LN36@InitDsiPll|
  00128	00000000	 DCD         |??_C@_1GA@HEOPJPGD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAD?$AAS?$AAI?$AAP?$AAL?$AAL?$AA?3?$AA?3?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAs@|
  0012c		 |$LN37@InitDsiPll|
  0012c	00000000	 DCD         |??_C@_1DO@OPIOMKJF@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAo?$AAn?$AA?5?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00130		 |$M41118|

			 ENDP  ; |?InitDsiPll@OMAPDisplayController@@IAAHXZ|, OMAPDisplayController::InitDsiPll

	EXPORT	|?DeInitDsiPll@OMAPDisplayController@@IAAHXZ| ; OMAPDisplayController::DeInitDsiPll

  00000			 AREA	 |.pdata|, PDATA
|$T41139| DCD	|$LN5@DeInitDsiP|
	DCD	0x40001b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DeInitDsiPll@OMAPDisplayController@@IAAHXZ| PROC ; OMAPDisplayController::DeInitDsiPll

; 5347 : {

  00000		 |$LN5@DeInitDsiP|
  00000		 |$M41136|
  00000	e1a01000	 mov         r1, r0

; 5348 :     BOOL bRet = TRUE;
; 5349 :     DWORD dwRegValue = 0;
; 5350 :     
; 5351 :     // clear the DSI IRQ status
; 5352 :     dwRegValue = INREG32( &m_pDSIRegs->DSI_IRQSTATUS);

  00004	e5912010	 ldr         r2, [r1, #0x10]

; 5353 :     OUTREG32( &m_pDSIRegs->DSI_IRQSTATUS, dwRegValue);
; 5354 :     
; 5355 :     // configure the DSI PLL for bypass mode before updating PLL
; 5356 :     SETREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, DSI_PLL_IDLE);
; 5357 : 
; 5358 :     // select the manual mode of PLL update
; 5359 :     dwRegValue = INREG32( &m_pDSIPLLRegs->DSI_PLL_CONTROL);
; 5360 :     dwRegValue = dwRegValue & ~(DSI_PLL_AUTOMODE);
; 5361 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONTROL, dwRegValue);
; 5362 : 
; 5363 :     // disable DSIPHY clock and set HSDIV in bypass mode
; 5364 :     dwRegValue = INREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2);
; 5365 :     dwRegValue = dwRegValue & ~(DSIPHY_CLKINEN);
; 5366 :     dwRegValue = dwRegValue | DSI_HSDIVBYPASS;
; 5367 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, dwRegValue);
; 5368 :     
; 5369 :     // PCLKFREE should be set for DSI
; 5370 :     dwRegValue = INREG32( &m_pDispRegs->DISPC_CONTROL);
; 5371 :     dwRegValue = dwRegValue | DISPC_CONTROL_PCKFREEENABLE_ENABLED;
; 5372 :     OUTREG32( &m_pDispRegs->DISPC_CONTROL, dwRegValue);
; 5373 :     
; 5374 :     // issue Power off cmd to DSI
; 5375 :     dwRegValue = INREG32( &m_pDSIRegs->DSI_CLK_CTRL);
; 5376 :     dwRegValue = (dwRegValue & ~(DSI_CLK_CTRL_PLL_PWR_CMD_MASK));
; 5377 :     dwRegValue = dwRegValue | DSI_CLK_CTRL_PLL_PWR_CMD_OFF;
; 5378 :     OUTREG32( &m_pDSIRegs->DSI_CLK_CTRL, dwRegValue);
; 5379 : 
; 5380 :     return bRet;

  00008	e3a00001	 mov         r0, #1
  0000c	e5923018	 ldr         r3, [r2, #0x18]
  00010	e5823018	 str         r3, [r2, #0x18]
  00014	e5912014	 ldr         r2, [r1, #0x14]
  00018	e5923010	 ldr         r3, [r2, #0x10]
  0001c	e3833001	 orr         r3, r3, #1
  00020	e5823010	 str         r3, [r2, #0x10]
  00024	e5912014	 ldr         r2, [r1, #0x14]
  00028	e5923000	 ldr         r3, [r2]
  0002c	e3c33001	 bic         r3, r3, #1
  00030	e5823000	 str         r3, [r2]
  00034	e5912014	 ldr         r2, [r1, #0x14]
  00038	e5923010	 ldr         r3, [r2, #0x10]
  0003c	e3c33901	 bic         r3, r3, #1, 18
  00040	e3833601	 orr         r3, r3, #1, 12
  00044	e5823010	 str         r3, [r2, #0x10]
  00048	e5912008	 ldr         r2, [r1, #8]
  0004c	e5923040	 ldr         r3, [r2, #0x40]
  00050	e3833302	 orr         r3, r3, #2, 6
  00054	e5823040	 str         r3, [r2, #0x40]
  00058	e5912010	 ldr         r2, [r1, #0x10]
  0005c	e5923054	 ldr         r3, [r2, #0x54]
  00060	e3c33103	 bic         r3, r3, #3, 2
  00064	e5823054	 str         r3, [r2, #0x54]

; 5381 : }

  00068	e12fff1e	 bx          lr
  0006c		 |$M41137|

			 ENDP  ; |?DeInitDsiPll@OMAPDisplayController@@IAAHXZ|, OMAPDisplayController::DeInitDsiPll

	EXPORT	|?ConfigureDsiPll@OMAPDisplayController@@QAAHK@Z| ; OMAPDisplayController::ConfigureDsiPll
	EXPORT	|??_C@_1DC@EGPANNCF@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAL?$AAo?$AAc?$AAk?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@PPIENFCI@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAG?$AAo?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@BACIAFEL@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAD?$AAs?$AAi?$AAP?$AAl?$AAl?$AA?3?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe@| [ DATA ] ; `string'
	IMPORT	|GetSystemClockFrequency|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T41184| DCD	|$LN36@ConfigureD|
	DCD	0x40007401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@EGPANNCF@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAL?$AAo?$AAc?$AAk?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "S", 0x0, "I", 0x0, " ", 0x0, "P", 0x0, "L", 0x0, "L"
	DCB	0x0, " ", 0x0, "L", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " "
	DCB	0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@PPIENFCI@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAG?$AAo?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "S", 0x0, "I", 0x0, " ", 0x0, "P", 0x0, "L", 0x0, "L"
	DCB	0x0, " ", 0x0, "G", 0x0, "o", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@BACIAFEL@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAD?$AAs?$AAi?$AAP?$AAl?$AAl?$AA?3?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, "D", 0x0, "s", 0x0, "i", 0x0, "P"
	DCB	0x0, "l", 0x0, "l", 0x0, ":", 0x0, "C", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r"
	DCB	0x0, "e", 0x0, " ", 0x0, "D", 0x0, "S", 0x0, "I", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "g", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "r"
	DCB	0x0, "e", 0x0, "q", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ConfigureDsiPll@OMAPDisplayController@@QAAHK@Z| PROC ; OMAPDisplayController::ConfigureDsiPll

; 5386 : {

  00000		 |$LN36@ConfigureD|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M41181|
  00004	e1a08001	 mov         r8, r1
  00008	e1a06000	 mov         r6, r0

; 5387 : 
; 5388 :     BOOL  bRet = TRUE;

  0000c	e3a07001	 mov         r7, #1

; 5389 :     ULONG count = 100;                  //count for timed status check
; 5390 :     ULONG m,n,m3,m4;                    //variables for PLL freq configuration
; 5391 :     ULONG fint    = DSI_PLL_FREQINT;    //internal ref frequency for PLL
; 5392 :     ULONG sysClk  = GetSystemClockFrequency();

  00010	eb000000	 bl          GetSystemClockFrequency
  00014	e3a0397a	 mov         r3, #0x7A, 18

; 5393 :     ULONG value;
; 5394 :     ULONG dsiPhyClock;
; 5395 :     ULONG highFreqDiv = 0;
; 5396 :     ULONG pllConfig1,pllConfig2; // variables for PLLConfig1 & 2
; 5397 : 
; 5398 : 
; 5399 :     //  Check clock bounds
; 5400 :     if (clockFreq < fint ) // || clockFreq > DSS_FCLK_MAX)

  00018	e3833d12	 orr         r3, r3, #0x12, 26
  0001c	e1580003	 cmp         r8, r3
  00020	e1a0e000	 mov         lr, r0
  00024	e3a09000	 mov         r9, #0
  00028	2a000004	 bcs         |$LN14@ConfigureD|

; 5401 :     {
; 5402 :         bRet = FALSE;
; 5403 :         RETAILMSG(1,(L"ConfigureDsiPll:"
; 5404 :                      L"Cannot configure DSI for given freq: %d\r\n",
; 5405 :                      clockFreq));

  0002c	e59f0198	 ldr         r0, [pc, #0x198]
  00030	e1a01008	 mov         r1, r8
  00034	e3a07000	 mov         r7, #0
  00038	eb000000	 bl          NKDbgPrintfW

; 5406 :         goto Clean;

  0003c	ea00005c	 b           |$Clean$40055|
  00040		 |$LN14@ConfigureD|

; 5407 :     }
; 5408 : 
; 5409 :     // Calculate the dsiPhyClock
; 5410 :     // Number of Lanes for DSI = 2
; 5411 :     // DSI PHY clock = 2 * data rate * NumberOfLanes
; 5412 :     dsiPhyClock = clockFreq * 2 * 2;
; 5413 : 
; 5414 :     // The steps for m and n calculation are to ensure the DSI PLL generates
; 5415 :     // DSI1_PLL_FCLK.
; 5416 : 
; 5417 :     // Use the formula for deriving m, m3 and m4 values
; 5418 :     //                             2xRegM       SYSCLK
; 5419 :     //             dsiPhyClock =  -------- x -------------
; 5420 :     //                            REGN + 1   HIGHFREQDIV+1
; 5421 : 
; 5422 :     // Set the highfreq divider if the input clock is > 32Mhz
; 5423 :     if (sysClk > DSI_HIGHFREQ_MAX)
; 5424 :         highFreqDiv = 1;
; 5425 : 
; 5426 :     n  = (sysClk/fint/(highFreqDiv+1)) - 1;

  00040	e59f5180	 ldr         r5, [pc, #0x180]
  00044	e3a0377a	 mov         r3, #0x7A, 14
  00048	e3833b12	 orr         r3, r3, #0x12, 22
  0004c	e15e0003	 cmp         lr, r3
  00050	e083259e	 umull       r2, r3, lr, r5
  00054	83a09001	 movhi       r9, #1
  00058	e2894001	 add         r4, r9, #1
  0005c	e1a019a3	 mov         r1, r3, lsr #19
  00060	e1a00004	 mov         r0, r4
  00064	e1a0a108	 mov         r10, r8, lsl #2
  00068	eb000000	 bl          __rt_udiv

; 5427 : 
; 5428 :     m = (dsiPhyClock*(highFreqDiv+1))/(2*fint);

  0006c	e00e0a94	 mul         lr, r4, r10
  00070	e1a04000	 mov         r4, r0
  00074	e082359e	 umull       r3, r2, lr, r5

; 5429 : 
; 5430 :     // calculate m3 value DSI1_PLL_FCLK (m3)
; 5431 :     m3 = (dsiPhyClock/clockFreq) - 1;

  00078	e1a00008	 mov         r0, r8
  0007c	e1a0100a	 mov         r1, r10
  00080	e1a05a22	 mov         r5, r2, lsr #20
  00084	e2448001	 sub         r8, r4, #1
  00088	eb000000	 bl          __rt_udiv
  0008c	e2404001	 sub         r4, r0, #1

; 5432 : 
; 5433 :     // m4 value is actually used by DSI module and we can set it
; 5434 :     // as the same value of m3.
; 5435 :     m4 = m3;
; 5436 : 
; 5437 :     DEBUGMSG(1,(L"N:%d M:%d M3:%d M4:%d\r\n",
; 5438 :                    n,m,m3,m4
; 5439 :                    ));
; 5440 : 
; 5441 :     // Enable the Pwr to the DSI sub modules
; 5442 :     value  = INREG32( &m_pDSIRegs->DSI_CLK_CTRL);

  00090	e5963010	 ldr         r3, [r6, #0x10]
  00094	e5933054	 ldr         r3, [r3, #0x54]

; 5443 :     if ((value & DSI_CLK_CTRL_PLL_PWR_STATUS_ON_PLLANDHS) != 0)

  00098	e3130202	 tst         r3, #2, 4

; 5444 :     {
; 5445 :         InitDsiPll();

  0009c	11a00006	 movne       r0, r6
  000a0	1b000000	 blne        |?InitDsiPll@OMAPDisplayController@@IAAHXZ|

; 5446 :     }
; 5447 :     
; 5448 :     // Configure the DSI PLL for bypass mode before updating PLL
; 5449 :     SETREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, DSI_PLL_IDLE);

  000a4	e5962014	 ldr         r2, [r6, #0x14]

; 5450 : 
; 5451 :     // Select the manual mode of PLL update
; 5452 :     value = INREG32( &m_pDSIPLLRegs->DSI_PLL_CONTROL);
; 5453 :     value = value & ~(DSI_PLL_AUTOMODE);
; 5454 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONTROL, value);
; 5455 : 
; 5456 :     // DSIPHY clock is disabled and HSDIV in bypass mode
; 5457 :     pllConfig2  = INREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2);
; 5458 :     pllConfig2  = pllConfig2 & ~(DSIPHY_CLKINEN);
; 5459 :     pllConfig2  = pllConfig2 | DSI_HSDIVBYPASS;
; 5460 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, pllConfig2);
; 5461 : 
; 5462 :     // Input clock to PLL is SYSCLK
; 5463 :     pllConfig2  = pllConfig2 & ~(DSI_PLL_CLKSEL_PCLKFREE);
; 5464 : 
; 5465 :     // Program high freq divider
; 5466 :     if (highFreqDiv != 0)

  000a8	e3590000	 cmp         r9, #0
  000ac	e5923010	 ldr         r3, [r2, #0x10]
  000b0	e3833001	 orr         r3, r3, #1
  000b4	e5823010	 str         r3, [r2, #0x10]
  000b8	e5962014	 ldr         r2, [r6, #0x14]
  000bc	e5923000	 ldr         r3, [r2]
  000c0	e3c33001	 bic         r3, r3, #1
  000c4	e5823000	 str         r3, [r2]
  000c8	e5962014	 ldr         r2, [r6, #0x14]
  000cc	e5923010	 ldr         r3, [r2, #0x10]
  000d0	e3c33901	 bic         r3, r3, #1, 18
  000d4	e3833601	 orr         r3, r3, #1, 12
  000d8	e5823010	 str         r3, [r2, #0x10]
  000dc	e3c33b02	 bic         r3, r3, #2, 22

; 5467 :     {
; 5468 :         pllConfig2 |= DSI_PLL_HIGHFREQ_PIXELCLKBY2;

  000e0	13831a01	 orrne       r1, r3, #1, 20

; 5469 :     }
; 5470 :     else
; 5471 :     {
; 5472 :         pllConfig2 &= ~(DSI_PLL_HIGHFREQ_PIXELCLKBY2);

  000e4	03c31a01	 biceq       r1, r3, #1, 20

; 5473 :     }
; 5474 : 
; 5475 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, pllConfig2);

  000e8	e5962014	 ldr         r2, [r6, #0x14]

; 5476 : 
; 5477 :     // Configure the divisor values
; 5478 :     pllConfig1 =  DSI_PLL_REGN(n)
; 5479 :                  |DSI_PLL_REGM(m)
; 5480 :                  |DSS_CLOCK_DIV(m3)
; 5481 :                  |DSIPROTO_CLOCK_DIV(m4)
; 5482 :                  |DSI_PLL_STOPMODE  
; 5483 :                  ;
; 5484 : 
; 5485 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION1, pllConfig1);

  000ec	e1843204	 orr         r3, r4, r4, lsl #4
  000f0	e1853583	 orr         r3, r5, r3, lsl #11
  000f4	e1883383	 orr         r3, r8, r3, lsl #7
  000f8	e5821010	 str         r1, [r2, #0x10]
  000fc	e5962014	 ldr         r2, [r6, #0x14]
  00100	e1a03083	 mov         r3, r3, lsl #1
  00104	e3833001	 orr         r3, r3, #1
  00108	e582300c	 str         r3, [r2, #0xC]

; 5486 : 
; 5487 :     // Enable the DSS clock divider from HSDIV
; 5488 :     pllConfig2 |=  DSS_CLOCK_EN
; 5489 :                   |DSI_PROTO_CLOCK_EN
; 5490 :                   |DSI_PLL_FREQSEL(DSI_PLL_FREQSELVAL)
; 5491 :                   |DSI_PLL_REFEN
; 5492 :                   ;
; 5493 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, pllConfig2);

  0010c	e3a03a52	 mov         r3, #0x52, 20
  00110	e5962014	 ldr         r2, [r6, #0x14]
  00114	e383300e	 orr         r3, r3, #0xE
  00118	e1813003	 orr         r3, r1, r3
  0011c	e5823010	 str         r3, [r2, #0x10]

; 5494 : 
; 5495 :     // Set HSDIV and CLK from DSI PLL
; 5496 :     pllConfig2 &= ~(DSI_HSDIVBYPASS);
; 5497 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, pllConfig2);

  00120	e5962014	 ldr         r2, [r6, #0x14]
  00124	e3c33601	 bic         r3, r3, #1, 12

; 5498 : 
; 5499 :     // Let the Pll go out of idle
; 5500 :     CLRREG32( &m_pDSIPLLRegs->DSI_PLL_CONFIGURATION2, DSI_PLL_IDLE);
; 5501 :     
; 5502 :     // Start the PLL locking by setting PLL GO
; 5503 :     OUTREG32( &m_pDSIPLLRegs->DSI_PLL_GO, DSI_PLL_GO_CMD);

  00128	e3a01001	 mov         r1, #1
  0012c	e5823010	 str         r3, [r2, #0x10]
  00130	e5962014	 ldr         r2, [r6, #0x14]

; 5504 : 
; 5505 :     count = 100;

  00134	e3a04064	 mov         r4, #0x64
  00138	e5923010	 ldr         r3, [r2, #0x10]
  0013c	e3c33001	 bic         r3, r3, #1
  00140	e5823010	 str         r3, [r2, #0x10]
  00144	e5963014	 ldr         r3, [r6, #0x14]
  00148	e5831008	 str         r1, [r3, #8]

; 5506 :     // Waiting for the lock request to be issued to PLL
; 5507 :     while ((INREG32( &m_pDSIPLLRegs->DSI_PLL_GO) != 0) && (--count))

  0014c	ea000003	 b           |$LN30@ConfigureD|
  00150		 |$LL8@ConfigureD|
  00150	e2544001	 subs        r4, r4, #1
  00154	0a000007	 beq         |$LN28@ConfigureD|

; 5508 :     {
; 5509 :         StallExecution(1000);

  00158	e3a00ffa	 mov         r0, #0xFA, 30
  0015c	eb000000	 bl          StallExecution
  00160		 |$LN30@ConfigureD|
  00160	e5963014	 ldr         r3, [r6, #0x14]
  00164	e5933008	 ldr         r3, [r3, #8]
  00168	e3530000	 cmp         r3, #0
  0016c	1afffff7	 bne         |$LL8@ConfigureD|

; 5517 :         goto Clean;
; 5518 :     }
; 5519 : 
; 5520 :     // Wait for the PLL to be locked
; 5521 :     count = 1000;
; 5522 :     while (((INREG32( &m_pDSIPLLRegs->DSI_PLL_STATUS) & DSI_PLL_LOCK_STATUS) != 
; 5523 :               DSI_PLL_LOCK_STATUS) && (--count))

  00170	e3a04ffa	 mov         r4, #0xFA, 30
  00174	ea000005	 b           |$LN33@ConfigureD|
  00178		 |$LN28@ConfigureD|

; 5510 :     }
; 5511 : 
; 5512 :     if (count == 0)
; 5513 :     {
; 5514 :         /* lock request timed out */
; 5515 :         bRet = FALSE;
; 5516 :         RETAILMSG(1,(L"DSI PLL Go not set\r\n"));

  00178	e59f0044	 ldr         r0, [pc, #0x44]

; 5533 :         goto Clean;
; 5534 :     }
; 5535 :     
; 5536 :     
; 5537 :     
; 5538 : Clean:

  0017c	ea00000a	 b           |$LN31@ConfigureD|
  00180		 |$LL4@ConfigureD|

; 5517 :         goto Clean;
; 5518 :     }
; 5519 : 
; 5520 :     // Wait for the PLL to be locked
; 5521 :     count = 1000;
; 5522 :     while (((INREG32( &m_pDSIPLLRegs->DSI_PLL_STATUS) & DSI_PLL_LOCK_STATUS) != 
; 5523 :               DSI_PLL_LOCK_STATUS) && (--count))

  00180	e2544001	 subs        r4, r4, #1
  00184	0a000007	 beq         |$LN27@ConfigureD|

; 5524 :     {
; 5525 :         StallExecution(1000);

  00188	e3a00ffa	 mov         r0, #0xFA, 30
  0018c	eb000000	 bl          StallExecution
  00190		 |$LN33@ConfigureD|
  00190	e5963014	 ldr         r3, [r6, #0x14]
  00194	e5933004	 ldr         r3, [r3, #4]
  00198	e2033002	 and         r3, r3, #2
  0019c	e3530002	 cmp         r3, #2
  001a0	1afffff6	 bne         |$LL4@ConfigureD|

; 5526 :     }
; 5527 : 
; 5528 :     // check the PLL lock status for timeout
; 5529 :     if (count == 0)

  001a4	ea000002	 b           |$Clean$40055|
  001a8		 |$LN27@ConfigureD|

; 5530 :     {
; 5531 :         bRet = FALSE;
; 5532 :         RETAILMSG(1,(L"DSI PLL Lock timed out\r\n"));

  001a8	e59f0010	 ldr         r0, [pc, #0x10]
  001ac		 |$LN31@ConfigureD|
  001ac	e3a07000	 mov         r7, #0
  001b0	eb000000	 bl          NKDbgPrintfW
  001b4		 |$Clean$40055|

; 5539 : 
; 5540 :   return bRet;
; 5541 : }

  001b4	e1a00007	 mov         r0, r7
  001b8	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  001bc	e12fff1e	 bx          lr
  001c0		 |$LN37@ConfigureD|
  001c0		 |$LN38@ConfigureD|
  001c0	00000000	 DCD         |??_C@_1DC@EGPANNCF@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAL?$AAo?$AAc?$AAk?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAd?$AA?5?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  001c4		 |$LN39@ConfigureD|
  001c4	00000000	 DCD         |??_C@_1CK@PPIENFCI@?$AAD?$AAS?$AAI?$AA?5?$AAP?$AAL?$AAL?$AA?5?$AAG?$AAo?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  001c8		 |$LN40@ConfigureD|
  001c8	431bde83	 DCD         0x431bde83
  001cc		 |$LN41@ConfigureD|
  001cc	00000000	 DCD         |??_C@_1HE@BACIAFEL@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAD?$AAs?$AAi?$AAP?$AAl?$AAl?$AA?3?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe@|
  001d0		 |$M41182|

			 ENDP  ; |?ConfigureDsiPll@OMAPDisplayController@@QAAHK@Z|, OMAPDisplayController::ConfigureDsiPll

	EXPORT	|?SwitchDssFclk@OMAPDisplayController@@IAAHW4OMAP_DSS_FCLK@@W4OMAP_DSS_FCLKVALUE@@@Z| ; OMAPDisplayController::SwitchDssFclk

  00000			 AREA	 |.pdata|, PDATA
|$T41210| DCD	|$LN15@SwitchDssF|
	DCD	0x40002801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SwitchDssFclk@OMAPDisplayController@@IAAHW4OMAP_DSS_FCLK@@W4OMAP_DSS_FCLKVALUE@@@Z| PROC ; OMAPDisplayController::SwitchDssFclk

; 5550 : {

  00000		 |$LN15@SwitchDssF|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M41207|
  00004	e1a0e002	 mov         lr, r2
  00008	e3510000	 cmp         r1, #0
  0000c	e1a04000	 mov         r4, r0

; 5551 :     DWORD dssStatusBit = 1;
; 5552 :     DWORD count     = 100;
; 5553 :     DWORD bitMask   = 1;
; 5554 :     DWORD sdiStatus = 0;
; 5555 :     DWORD reg,
; 5556 :           lcd = 1,
; 5557 :           pcd = 1;
; 5558 :           
; 5559 :     if ( eFclkSrc == OMAP_DSS_FCLK_DSS1ALWON )
; 5560 :     {
; 5561 :         // Change the source clock to DSS
; 5562 :         CLRREG32( &m_pDSSRegs->DSS_CONTROL, 
; 5563 :                     DSS_CONTROL_DISPC_CLK_SWITCH_DSI1_PLL
; 5564 :                     );

  00010	05941004	 ldreq       r1, [r4, #4]
  00014	e3a05001	 mov         r5, #1
  00018	e3a06064	 mov         r6, #0x64

; 5565 :         dssStatusBit = 1;

  0001c	05913040	 ldreq       r3, [r1, #0x40]
  00020	03a05001	 moveq       r5, #1
  00024	03c33001	 biceq       r3, r3, #1
  00028	05813040	 streq       r3, [r1, #0x40]
  0002c	0a000005	 beq         |$LN3@SwitchDssF|

; 5566 :     }
; 5567 :     else if ( eFclkSrc == OMAP_DSS_FCLK_DSS2ALWON )

  00030	e3510001	 cmp         r1, #1

; 5568 :     {
; 5569 :         // Change the source clock DSI1_PLL
; 5570 :         SETREG32( &m_pDSSRegs->DSS_CONTROL, 
; 5571 :                     DSS_CONTROL_DISPC_CLK_SWITCH_DSI1_PLL
; 5572 :                     );

  00034	05942004	 ldreq       r2, [r4, #4]

; 5573 :         dssStatusBit = 0;

  00038	03a05000	 moveq       r5, #0
  0003c	05923040	 ldreq       r3, [r2, #0x40]
  00040	03833001	 orreq       r3, r3, #1
  00044	05823040	 streq       r3, [r2, #0x40]
  00048		 |$LN3@SwitchDssF|

; 5574 :     }
; 5575 : 
; 5576 :     pcd = eFclkValue / m_dwPixelClock ;

  00048	e59404b4	 ldr         r0, [r4, #0x4B4]
  0004c	e1a0100e	 mov         r1, lr
  00050	eb000000	 bl          __rt_udiv

; 5577 :     reg = DISPC_DIVISOR_LCD(lcd) | DISPC_DIVISOR_PCD(pcd);
; 5578 :     OUTREG32( &m_pDispRegs->DISPC_DIVISOR, reg );    

  00054	e5942008	 ldr         r2, [r4, #8]
  00058	e3803801	 orr         r3, r0, #1, 16

; 5579 :     // Update the shadow register contents into main
; 5580 :     FlushRegs( DISPC_CONTROL_GOLCD );

  0005c	e3a01020	 mov         r1, #0x20
  00060	e1a00004	 mov         r0, r4
  00064	e5823070	 str         r3, [r2, #0x70]
  00068	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 5581 : 
; 5582 :     // check for the clock switch by reading SDI_STATUS register
; 5583 :     sdiStatus = INREG32(&m_pDSSRegs->DSS_SDI_STATUS);
; 5584 :     while (((sdiStatus & bitMask) != dssStatusBit) && (--count))

  0006c	ea000003	 b           |$LN12@SwitchDssF|
  00070		 |$LL2@SwitchDssF|
  00070	e2566001	 subs        r6, r6, #1
  00074	0a000006	 beq         |$LN10@SwitchDssF|

; 5585 :     {
; 5586 :         StallExecution(1000);

  00078	e3a00ffa	 mov         r0, #0xFA, 30
  0007c	eb000000	 bl          StallExecution
  00080		 |$LN12@SwitchDssF|

; 5587 :         sdiStatus = INREG32( &m_pDSSRegs->DSS_SDI_STATUS);

  00080	e5943004	 ldr         r3, [r4, #4]
  00084	e593305c	 ldr         r3, [r3, #0x5C]
  00088	e2033001	 and         r3, r3, #1
  0008c	e1530005	 cmp         r3, r5
  00090	1afffff6	 bne         |$LL2@SwitchDssF|
  00094		 |$LN10@SwitchDssF|

; 5588 :     }
; 5589 : 
; 5590 :     return TRUE;

  00094	e3a00001	 mov         r0, #1

; 5591 : }

  00098	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$M41208|

			 ENDP  ; |?SwitchDssFclk@OMAPDisplayController@@IAAHW4OMAP_DSS_FCLK@@W4OMAP_DSS_FCLKVALUE@@@Z|, OMAPDisplayController::SwitchDssFclk

	EXPORT	|LcdStall|

  00000			 AREA	 |.pdata|, PDATA
|$T41218| DCD	|$LN5@LcdStall|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LcdStall| PROC

; 5595 : {

  00000		 |$LN5@LcdStall|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41215|

; 5596 :     StallExecution(dwMicroseconds);

  00004	eb000000	 bl          StallExecution

; 5597 : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M41216|

			 ENDP  ; |LcdStall|

	EXPORT	|LcdSleep|

  00000			 AREA	 |.pdata|, PDATA
|$T41226| DCD	|$LN5@LcdSleep|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LcdSleep| PROC

; 5600 : {

  00000		 |$LN5@LcdSleep|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41223|

; 5601 :     Sleep(dwMilliseconds);

  00004	eb000000	 bl          Sleep

; 5602 : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M41224|

			 ENDP  ; |LcdSleep|

	EXPORT	|??1OMAPDisplayController@@UAA@XZ|	; OMAPDisplayController::~OMAPDisplayController
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|FreePhysMem|
	IMPORT	|PmxClosePolicy|
	IMPORT	|DeleteCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T41234| DCD	|$LN13@OMAPDispla@2|
	DCD	0x40003601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1OMAPDisplayController@@UAA@XZ| PROC ; OMAPDisplayController::~OMAPDisplayController

; 158  : {

  00000		 |$LN13@OMAPDispla@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M41231|
  00004	e1a04000	 mov         r4, r0
  00008	e59f30c4	 ldr         r3, [pc, #0xC4]

; 159  :     UninitInterrupts();

  0000c	e5843000	 str         r3, [r4]
  00010	eb000000	 bl          |?UninitInterrupts@OMAPDisplayController@@QAAXXZ|

; 160  : 
; 161  :     //  Release all clocks
; 162  :     EnableDeviceClocks( m_dssinfo.DSSDevice, FALSE );

  00014	e5940520	 ldr         r0, [r4, #0x520]
  00018	e3a01000	 mov         r1, #0
  0001c	eb000000	 bl          EnableDeviceClocks

; 163  :     EnableDeviceClocks( m_dssinfo.TVEncoderDevice, FALSE );         

  00020	e5940524	 ldr         r0, [r4, #0x524]
  00024	e3a01000	 mov         r1, #0
  00028	eb000000	 bl          EnableDeviceClocks

; 164  : 
; 165  :     //  Delete power lock critical section
; 166  :     DeleteCriticalSection( &m_csPowerLock );

  0002c	e2840e49	 add         r0, r4, #0x49, 28
  00030	eb000000	 bl          DeleteCriticalSection

; 167  : 
; 168  :     // Close SmartReflex policy adapter
; 169  :     if (m_hSmartReflexPolicyAdapter != NULL)

  00034	e594351c	 ldr         r3, [r4, #0x51C]
  00038	e3530000	 cmp         r3, #0

; 170  :         PmxClosePolicy(m_hSmartReflexPolicyAdapter);

  0003c	11a00003	 movne       r0, r3
  00040	1b000000	 blne        PmxClosePolicy

; 171  :     
; 172  :     //  Free allocated memory
; 173  :     if( m_pGammaBufVirt != NULL )

  00044	e59434d8	 ldr         r3, [r4, #0x4D8]
  00048	e3530000	 cmp         r3, #0

; 174  :         FreePhysMem( m_pGammaBufVirt );

  0004c	11a00003	 movne       r0, r3
  00050	1b000000	 blne        FreePhysMem

; 175  :         
; 176  :     //  Unmap registers
; 177  :     if (m_pDSSRegs != NULL) 

  00054	e5943004	 ldr         r3, [r4, #4]
  00058	e3530000	 cmp         r3, #0

; 178  :         MmUnmapIoSpace((VOID*)m_pDSSRegs, DSS_REGS_SIZE);

  0005c	13a01b01	 movne       r1, #1, 22
  00060	11a00003	 movne       r0, r3
  00064	1b000000	 blne        MmUnmapIoSpace

; 179  : 
; 180  :     if (m_pDispRegs != NULL) 

  00068	e5943008	 ldr         r3, [r4, #8]
  0006c	e3530000	 cmp         r3, #0

; 181  :         MmUnmapIoSpace((VOID*)m_pDispRegs, DSS_REGS_SIZE);

  00070	13a01b01	 movne       r1, #1, 22
  00074	11a00003	 movne       r0, r3
  00078	1b000000	 blne        MmUnmapIoSpace

; 182  : 
; 183  :     if (m_pVencRegs != NULL) 

  0007c	e594300c	 ldr         r3, [r4, #0xC]
  00080	e3530000	 cmp         r3, #0

; 184  :         MmUnmapIoSpace((VOID*)m_pVencRegs, DSS_REGS_SIZE);

  00084	13a01b01	 movne       r1, #1, 22
  00088	11a00003	 movne       r0, r3
  0008c	1b000000	 blne        MmUnmapIoSpace

; 185  :         
; 186  :     if (m_pDSIRegs != NULL)

  00090	e5943010	 ldr         r3, [r4, #0x10]
  00094	e3530000	 cmp         r3, #0

; 187  :         MmUnmapIoSpace((VOID*)m_pDSIRegs,  sizeof(OMAP_DSI_REGS));

  00098	13a010c0	 movne       r1, #0xC0
  0009c	11a00003	 movne       r0, r3
  000a0	1b000000	 blne        MmUnmapIoSpace

; 188  : 
; 189  :     if (m_pDSIPLLRegs != NULL)

  000a4	e5943014	 ldr         r3, [r4, #0x14]
  000a8	e3530000	 cmp         r3, #0

; 190  :         MmUnmapIoSpace((VOID*)m_pDSIPLLRegs, sizeof(OMAP_DSI_PLL_REGS));

  000ac	13a01014	 movne       r1, #0x14
  000b0	11a00003	 movne       r0, r3
  000b4	1b000000	 blne        MmUnmapIoSpace

; 191  :         
; 192  : 	if (m_pRFBIRegs != NULL)

  000b8	e5943018	 ldr         r3, [r4, #0x18]
  000bc	e3530000	 cmp         r3, #0

; 193  :         MmUnmapIoSpace((VOID*)m_pRFBIRegs, sizeof(OMAP_RFBI_REGS));

  000c0	13a01098	 movne       r1, #0x98
  000c4	11a00003	 movne       r0, r3
  000c8	1b000000	 blne        MmUnmapIoSpace

; 194  : 
; 195  : }

  000cc	e8bd4010	 ldmia       sp!, {r4, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN14@OMAPDispla@2|
  000d4		 |$LN15@OMAPDispla@2|
  000d4	00000000	 DCD         |??_7OMAPDisplayController@@6B@|
  000d8		 |$M41232|

			 ENDP  ; |??1OMAPDisplayController@@UAA@XZ|, OMAPDisplayController::~OMAPDisplayController

	EXPORT	|?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z| ; OMAPDisplayController::SetPipelineAttribs

  00000			 AREA	 |.pdata|, PDATA
|$T41306| DCD	|$LN58@SetPipelin|
	DCD	0x4001c302
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z| PROC ; OMAPDisplayController::SetPipelineAttribs

; 818  : {

  00000		 |$LN58@SetPipelin|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M41303|
  00008	e1a05002	 mov         r5, r2
  0000c	e58d500c	 str         r5, [sp, #0xC]
  00010	e1a06003	 mov         r6, r3
  00014	e1a0b001	 mov         r11, r1
  00018	e1a07000	 mov         r7, r0

; 819  :     BOOL    bResult = FALSE;
; 820  :     OMAP_DSS_ROTATION   eRotation;
; 821  :     BOOL                bMirror;
; 822  :     DWORD               dwVidRotation = 0;
; 823  :     DWORD               dwX, dwY;
; 824  : 
; 825  : 
; 826  :     //  Access the regs
; 827  :     if( AccessRegs() == FALSE )

  0001c	e3a04000	 mov         r4, #0
  00020	e3a09000	 mov         r9, #0
  00024	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00028	e3500000	 cmp         r0, #0
  0002c	0a0001ae	 beq         |$cleanUp$38213|

; 828  :         goto cleanUp;
; 829  : 
; 830  : 
; 831  :     //  Get rotation and mirror settings for pipeline output
; 832  :     eRotation = g_rgPipelineMapping[ePipeline].eRotation;

  00030	e59f06d0	 ldr         r0, [pc, #0x6D0]

; 833  :     bMirror   = g_rgPipelineMapping[ePipeline].bMirror;
; 834  : 
; 835  : 
; 836  :     //  Set rotation attributes for video pipelines if pixel format is YUV
; 837  :     if( pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_YUV2 ||    
; 838  :         pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_UYVY )  

  00034	e3a03c01	 mov         r3, #1, 24
  00038	e5962004	 ldr         r2, [r6, #4]
  0003c	e080a28b	 add         r10, r0, r11, lsl #5
  00040	e383100e	 orr         r1, r3, #0xE
  00044	e59a3010	 ldr         r3, [r10, #0x10]
  00048	e59a800c	 ldr         r8, [r10, #0xC]
  0004c	e352000a	 cmp         r2, #0xA
  00050	e58d3008	 str         r3, [sp, #8]
  00054	0a000001	 beq         |$LN18@SetPipelin|
  00058	e352000b	 cmp         r2, #0xB
  0005c	1a00000c	 bne         |$LN25@SetPipelin|
  00060		 |$LN18@SetPipelin|

; 839  :     {
; 840  :         //  Depending on rotation and mirror settings, change the VID rotation attributes
; 841  :         switch( eRotation )

  00060	e3580000	 cmp         r8, #0
  00064	0a000023	 beq         |$LN15@SetPipelin|
  00068	e358005a	 cmp         r8, #0x5A
  0006c	0a00001f	 beq         |$LN14@SetPipelin|
  00070	e35800b4	 cmp         r8, #0xB4
  00074	0a000003	 beq         |$LN13@SetPipelin|
  00078	e1580001	 cmp         r8, r1
  0007c	1a000004	 bne         |$LN25@SetPipelin|

; 857  :                 break;
; 858  : 
; 859  :             case OMAP_DSS_ROTATION_270:
; 860  :                 //  Settings for rotation angle 270 (90 for DSS setting)
; 861  :                 dwVidRotation = DISPC_VID_ATTR_VIDROTATION_90 | DISPC_VID_ATTR_VIDROWREPEATENABLE;

  00080	e3a09a41	 mov         r9, #0x41, 20

; 862  :                 //dwVidRotation |= DISPC_VID_ATTR_VIDDMAOPTIMIZATION;
; 863  :                 break;

  00084	ea000002	 b           |$LN25@SetPipelin|
  00088		 |$LN13@SetPipelin|

; 853  : 
; 854  :             case OMAP_DSS_ROTATION_180:
; 855  :                 //  Settings for rotation angle 180
; 856  :                 dwVidRotation = (bMirror) ? DISPC_VID_ATTR_VIDROTATION_0 : DISPC_VID_ATTR_VIDROTATION_180;

  00088	e3530000	 cmp         r3, #0
  0008c	0a00001b	 beq         |$LN54@SetPipelin|
  00090		 |$LN24@SetPipelin|

; 842  :         {
; 843  :             case OMAP_DSS_ROTATION_0:
; 844  :                 //  Settings for rotation angle 0
; 845  :                 dwVidRotation = (bMirror) ? DISPC_VID_ATTR_VIDROTATION_180 : DISPC_VID_ATTR_VIDROTATION_0;

  00090	e3a09000	 mov         r9, #0
  00094		 |$LN25@SetPipelin|

; 864  :         }
; 865  :     }
; 866  : 
; 867  : 
; 868  :     //  Compute new origin and swap width/height based on GFX pipeline rotation angle
; 869  :     switch( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].eRotation )

  00094	e590300c	 ldr         r3, [r0, #0xC]
  00098	e3530000	 cmp         r3, #0
  0009c	0a00003d	 beq         |$LN9@SetPipelin|
  000a0	e353005a	 cmp         r3, #0x5A
  000a4	0a00002e	 beq         |$LN8@SetPipelin|
  000a8	e35300b4	 cmp         r3, #0xB4
  000ac	0a000015	 beq         |$LN7@SetPipelin|
  000b0	e1530001	 cmp         r3, r1
  000b4	1a00018c	 bne         |$cleanUp$38213|

; 885  :             
; 886  :         case OMAP_DSS_ROTATION_270:
; 887  :             dwX = GetLCDWidth() - pSurface->Height() - dwPosY;

  000b8	e5963000	 ldr         r3, [r6]
  000bc	e59744ac	 ldr         r4, [r7, #0x4AC]
  000c0	e3a01000	 mov         r1, #0
  000c4	e593300c	 ldr         r3, [r3, #0xC]
  000c8	e1a00006	 mov         r0, r6
  000cc	e1a0e00f	 mov         lr, pc
  000d0	e12fff13	 bx          r3
  000d4	e59d2038	 ldr         r2, [sp, #0x38]

; 888  :             dwY = dwPosX;

  000d8	e59d1034	 ldr         r1, [sp, #0x34]
  000dc	e0443000	 sub         r3, r4, r0
  000e0	e0432002	 sub         r2, r3, r2
  000e4	e58d2004	 str         r2, [sp, #4]
  000e8	e58d1000	 str         r1, [sp]

; 889  :             break;

  000ec	ea00002d	 b           |$LN10@SetPipelin|
  000f0		 |$LN14@SetPipelin|

; 846  :                 break;
; 847  : 
; 848  :             case OMAP_DSS_ROTATION_90:
; 849  :                 //  Settings for rotation angle 90 (270 for DSS setting)
; 850  :                 dwVidRotation = DISPC_VID_ATTR_VIDROTATION_270 | DISPC_VID_ATTR_VIDROWREPEATENABLE;

  000f0	e3a09a43	 mov         r9, #0x43, 20

; 851  :                 //dwVidRotation |= DISPC_VID_ATTR_VIDDMAOPTIMIZATION;
; 852  :                 break;

  000f4	eaffffe6	 b           |$LN25@SetPipelin|
  000f8		 |$LN15@SetPipelin|

; 842  :         {
; 843  :             case OMAP_DSS_ROTATION_0:
; 844  :                 //  Settings for rotation angle 0
; 845  :                 dwVidRotation = (bMirror) ? DISPC_VID_ATTR_VIDROTATION_180 : DISPC_VID_ATTR_VIDROTATION_0;

  000f8	e3530000	 cmp         r3, #0
  000fc	0affffe3	 beq         |$LN24@SetPipelin|
  00100		 |$LN54@SetPipelin|
  00100	e3a09a02	 mov         r9, #2, 20
  00104	eaffffe2	 b           |$LN25@SetPipelin|
  00108		 |$LN7@SetPipelin|

; 880  :             
; 881  :         case OMAP_DSS_ROTATION_180:
; 882  :             dwX = GetLCDWidth() - pSurface->Width() - dwPosX;

  00108	e5963000	 ldr         r3, [r6]
  0010c	e59744ac	 ldr         r4, [r7, #0x4AC]
  00110	e3a01000	 mov         r1, #0
  00114	e5933008	 ldr         r3, [r3, #8]
  00118	e1a00006	 mov         r0, r6
  0011c	e1a0e00f	 mov         lr, pc
  00120	e12fff13	 bx          r3

; 883  :             dwY = GetLCDHeight() - pSurface->Height() - dwPosY;

  00124	e5963000	 ldr         r3, [r6]
  00128	e59d5034	 ldr         r5, [sp, #0x34]
  0012c	e3a01000	 mov         r1, #0
  00130	e593200c	 ldr         r2, [r3, #0xC]
  00134	e0443000	 sub         r3, r4, r0
  00138	e0433005	 sub         r3, r3, r5
  0013c	e59744b0	 ldr         r4, [r7, #0x4B0]
  00140	e58d3004	 str         r3, [sp, #4]
  00144	e1a00006	 mov         r0, r6
  00148	e1a0e00f	 mov         lr, pc
  0014c	e12fff12	 bx          r2
  00150	e59d2038	 ldr         r2, [sp, #0x38]
  00154	e0443000	 sub         r3, r4, r0

; 884  :             break;

  00158	e59d500c	 ldr         r5, [sp, #0xC]
  0015c	e0433002	 sub         r3, r3, r2
  00160	ea00000f	 b           |$LN55@SetPipelin|
  00164		 |$LN8@SetPipelin|

; 874  :             break;
; 875  :             
; 876  :         case OMAP_DSS_ROTATION_90:
; 877  :             dwX = dwPosY;
; 878  :             dwY = GetLCDHeight() - pSurface->Width() - dwPosX;

  00164	e5963000	 ldr         r3, [r6]
  00168	e59d2038	 ldr         r2, [sp, #0x38]
  0016c	e59744b0	 ldr         r4, [r7, #0x4B0]
  00170	e5933008	 ldr         r3, [r3, #8]
  00174	e58d2004	 str         r2, [sp, #4]
  00178	e3a01000	 mov         r1, #0
  0017c	e1a00006	 mov         r0, r6
  00180	e1a0e00f	 mov         lr, pc
  00184	e12fff13	 bx          r3
  00188	e59d2034	 ldr         r2, [sp, #0x34]
  0018c	e0443000	 sub         r3, r4, r0
  00190	e0433002	 sub         r3, r3, r2

; 879  :             break;

  00194	ea000002	 b           |$LN55@SetPipelin|
  00198		 |$LN9@SetPipelin|

; 870  :     {
; 871  :         case OMAP_DSS_ROTATION_0:
; 872  :             dwX = dwPosX;

  00198	e59d3034	 ldr         r3, [sp, #0x34]
  0019c	e58d3004	 str         r3, [sp, #4]

; 873  :             dwY = dwPosY;

  001a0	e59d3038	 ldr         r3, [sp, #0x38]
  001a4		 |$LN55@SetPipelin|
  001a4	e58d3000	 str         r3, [sp]
  001a8		 |$LN10@SetPipelin|

; 890  :             
; 891  :         default:
; 892  :             ASSERT(0);
; 893  :             goto cleanUp;
; 894  :     }
; 895  : 
; 896  : 
; 897  :     //  Configure the attributes of the selected pipeline
; 898  : 
; 899  :     
; 900  :     //  GFX pipeline
; 901  :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  001a8	e35b0000	 cmp         r11, #0
  001ac	1a00004d	 bne         |$LN3@SetPipelin|

; 902  :     {
; 903  :         //  Set attributes of pipeline
; 904  :         OUTREG32( &m_pDispRegs->DISPC_GFX_ATTRIBUTES,
; 905  :                     ((eDestination == OMAP_DSS_DESTINATION_TVOUT) ? DISPC_GFX_ATTR_GFXCHANNELOUT : 0) |
; 906  :                     DISPC_GFX_ATTR_GFXBURSTSIZE_16x32 |
; 907  :                     DISPC_GFX_ATTR_GFXREPLICATIONENABLE |
; 908  :                     DISPC_GFX_ATTR_GFXFORMAT(pSurface->PixelFormat())
; 909  :                     );

  001b0	e5963004	 ldr         r3, [r6, #4]
  001b4	e3550001	 cmp         r5, #1
  001b8	e5972008	 ldr         r2, [r7, #8]
  001bc	03a00c01	 moveq       r0, #1, 24

; 910  : 
; 911  :         //  Size of window
; 912  :         OUTREG32( &m_pDispRegs->DISPC_GFX_SIZE,
; 913  :                     DISPC_GFX_SIZE_GFXSIZEX(pSurface->Width(eRotation)) |
; 914  :                     DISPC_GFX_SIZE_GFXSIZEY(pSurface->Height(eRotation))
; 915  :                     );

  001c0	e3833050	 orr         r3, r3, #0x50
  001c4	13a00000	 movne       r0, #0
  001c8	e1803083	 orr         r3, r0, r3, lsl #1
  001cc	e58230a0	 str         r3, [r2, #0xA0]
  001d0	e5963000	 ldr         r3, [r6]
  001d4	e1a01008	 mov         r1, r8
  001d8	e1a00006	 mov         r0, r6
  001dc	e5933008	 ldr         r3, [r3, #8]
  001e0	e1a0e00f	 mov         lr, pc
  001e4	e12fff13	 bx          r3
  001e8	e5963000	 ldr         r3, [r6]
  001ec	e1a04000	 mov         r4, r0
  001f0	e1a01008	 mov         r1, r8
  001f4	e593300c	 ldr         r3, [r3, #0xC]
  001f8	e1a00006	 mov         r0, r6
  001fc	e1a0e00f	 mov         lr, pc
  00200	e12fff13	 bx          r3
  00204	e5971008	 ldr         r1, [r7, #8]
  00208	e2402001	 sub         r2, r0, #1
  0020c	e2443001	 sub         r3, r4, #1
  00210	e1833802	 orr         r3, r3, r2, lsl #16

; 916  : 
; 917  :         //  Position of window
; 918  :         OUTREG32( &m_pDispRegs->DISPC_GFX_POSITION,
; 919  :                     DISPC_GFX_POS_GFXPOSX(dwX) |
; 920  :                     DISPC_GFX_POS_GFXPOSY(dwY)
; 921  :                     );

  00214	e59d2004	 ldr         r2, [sp, #4]
  00218	e581308c	 str         r3, [r1, #0x8C]
  0021c	e59d3000	 ldr         r3, [sp]
  00220	e5971008	 ldr         r1, [r7, #8]

; 922  :                     
; 923  :         //  Pipeline FIFO and DMA settings
; 924  :         OUTREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD,
; 925  :                     DISPC_GFX_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 926  :                     DISPC_GFX_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 927  :                     );
; 928  : 
; 929  :         OUTREG32( &m_pDispRegs->DISPC_GFX_PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  00224	e3e0533f	 mvn         r5, #0x3F, 6
  00228	e1823803	 orr         r3, r2, r3, lsl #16
  0022c	e5813088	 str         r3, [r1, #0x88]
  00230	e5973008	 ldr         r3, [r7, #8]
  00234	e225ecfe	 eor         lr, r5, #0xFE, 24
  00238	e59d4008	 ldr         r4, [sp, #8]
  0023c	e583e0a4	 str         lr, [r3, #0xA4]
  00240	e5963000	 ldr         r3, [r6]
  00244	e1a02004	 mov         r2, r4
  00248	e1a01008	 mov         r1, r8
  0024c	e5933018	 ldr         r3, [r3, #0x18]
  00250	e1a00006	 mov         r0, r6
  00254	e1a0e00f	 mov         lr, pc
  00258	e12fff13	 bx          r3
  0025c	e5973008	 ldr         r3, [r7, #8]

; 930  :         OUTREG32( &m_pDispRegs->DISPC_GFX_ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  00260	e1a02004	 mov         r2, r4
  00264	e1a01008	 mov         r1, r8
  00268	e58300b0	 str         r0, [r3, #0xB0]
  0026c	e5963000	 ldr         r3, [r6]
  00270	e1a00006	 mov         r0, r6
  00274	e593301c	 ldr         r3, [r3, #0x1C]
  00278	e1a0e00f	 mov         lr, pc
  0027c	e12fff13	 bx          r3
  00280	e5972008	 ldr         r2, [r7, #8]

; 931  :         OUTREG32( &m_pDispRegs->DISPC_GFX_WINDOW_SKIP, 0 );
; 932  : 
; 933  :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA0, pSurface->PhysicalAddr(eRotation, bMirror) );

  00284	e3a0e000	 mov         lr, #0
  00288	e3a03000	 mov         r3, #0
  0028c	e58200ac	 str         r0, [r2, #0xAC]
  00290	e5970008	 ldr         r0, [r7, #8]
  00294	e1a02004	 mov         r2, r4
  00298	e1a01008	 mov         r1, r8
  0029c	e580e0b4	 str         lr, [r0, #0xB4]
  002a0	e5964000	 ldr         r4, [r6]
  002a4	e1a00006	 mov         r0, r6
  002a8	e5944014	 ldr         r4, [r4, #0x14]
  002ac	e1a0e00f	 mov         lr, pc
  002b0	e12fff14	 bx          r4
  002b4	e5972008	 ldr         r2, [r7, #8]

; 934  :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  002b8	e3a03000	 mov         r3, #0
  002bc	e1a01008	 mov         r1, r8
  002c0	e5820080	 str         r0, [r2, #0x80]
  002c4	e5960000	 ldr         r0, [r6]
  002c8	e59d2008	 ldr         r2, [sp, #8]
  002cc	e5904014	 ldr         r4, [r0, #0x14]
  002d0	e1a00006	 mov         r0, r6
  002d4	e1a0e00f	 mov         lr, pc
  002d8	e12fff14	 bx          r4
  002dc	e5973008	 ldr         r3, [r7, #8]
  002e0	e59d500c	 ldr         r5, [sp, #0xC]
  002e4	e5830084	 str         r0, [r3, #0x84]
  002e8		 |$LN3@SetPipelin|

; 935  : 
; 936  :     }    
; 937  : 
; 938  : 
; 939  :     //  VIDEO1 pipeline
; 940  :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  002e8	e35b0001	 cmp         r11, #1
  002ec	1a000071	 bne         |$LN2@SetPipelin|

; 941  :     {
; 942  :         //  Set attributes of pipeline
; 943  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES,
; 944  :                     ((eDestination == OMAP_DSS_DESTINATION_TVOUT) ? DISPC_VID_ATTR_VIDCHANNELOUT : 0) |
; 945  :                     dwVidRotation |
; 946  :                     DISPC_VID_ATTR_VIDBURSTSIZE_16x32 |
; 947  :                     DISPC_VID_ATTR_VIDCOLORCONVENABLE |
; 948  :                     DISPC_VID_ATTR_VIDRESIZE_NONE |
; 949  :                     DISPC_VID_ATTR_VIDFORMAT(pSurface->PixelFormat())
; 950  :                     );

  002f0	e5963004	 ldr         r3, [r6, #4]
  002f4	e3550001	 cmp         r5, #1
  002f8	03a00801	 moveq       r0, #1, 16

; 951  : 
; 952  :         //  Size of window; picture size is the same for no scaling
; 953  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.SIZE,
; 954  :                     DISPC_VID_SIZE_VIDSIZEX(pSurface->Width(eRotation)) |
; 955  :                     DISPC_VID_SIZE_VIDSIZEY(pSurface->Height(eRotation))
; 956  :                     );

  002fc	e3833c41	 orr         r3, r3, #0x41, 24
  00300	13a00000	 movne       r0, #0
  00304	e5972008	 ldr         r2, [r7, #8]
  00308	e1803083	 orr         r3, r0, r3, lsl #1
  0030c	e1833009	 orr         r3, r3, r9
  00310	e58230cc	 str         r3, [r2, #0xCC]
  00314	e5963000	 ldr         r3, [r6]
  00318	e1a01008	 mov         r1, r8
  0031c	e1a00006	 mov         r0, r6
  00320	e5933008	 ldr         r3, [r3, #8]
  00324	e1a0e00f	 mov         lr, pc
  00328	e12fff13	 bx          r3
  0032c	e5963000	 ldr         r3, [r6]
  00330	e1a04000	 mov         r4, r0
  00334	e1a01008	 mov         r1, r8
  00338	e593300c	 ldr         r3, [r3, #0xC]
  0033c	e1a00006	 mov         r0, r6
  00340	e1a0e00f	 mov         lr, pc
  00344	e12fff13	 bx          r3
  00348	e5971008	 ldr         r1, [r7, #8]
  0034c	e2402001	 sub         r2, r0, #1
  00350	e2443001	 sub         r3, r4, #1
  00354	e1833802	 orr         r3, r3, r2, lsl #16
  00358	e58130c8	 str         r3, [r1, #0xC8]

; 957  : 
; 958  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.PICTURE_SIZE,
; 959  :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEX(pSurface->Width(eRotation)) |
; 960  :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEY(pSurface->Height(eRotation))
; 961  :                     );

  0035c	e5963000	 ldr         r3, [r6]
  00360	e1a01008	 mov         r1, r8
  00364	e1a00006	 mov         r0, r6
  00368	e5933008	 ldr         r3, [r3, #8]
  0036c	e1a0e00f	 mov         lr, pc
  00370	e12fff13	 bx          r3
  00374	e5963000	 ldr         r3, [r6]
  00378	e1a04000	 mov         r4, r0
  0037c	e1a01008	 mov         r1, r8
  00380	e593300c	 ldr         r3, [r3, #0xC]
  00384	e1a00006	 mov         r0, r6
  00388	e1a0e00f	 mov         lr, pc
  0038c	e12fff13	 bx          r3
  00390	e5971008	 ldr         r1, [r7, #8]
  00394	e2402001	 sub         r2, r0, #1
  00398	e2443001	 sub         r3, r4, #1
  0039c	e1833802	 orr         r3, r3, r2, lsl #16

; 962  : 
; 963  :         //  Position of window
; 964  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.POSITION,
; 965  :                     DISPC_VID_POS_VIDPOSX(dwX) |
; 966  :                     DISPC_VID_POS_VIDPOSY(dwY)
; 967  :                     );

  003a0	e59d2004	 ldr         r2, [sp, #4]
  003a4	e58130e4	 str         r3, [r1, #0xE4]
  003a8	e59d3000	 ldr         r3, [sp]
  003ac	e5971008	 ldr         r1, [r7, #8]

; 968  :                     
; 969  :         //  Pipeline FIFO and DMA settings
; 970  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.FIFO_THRESHOLD,
; 971  :                     DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 972  :                     DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 973  :                     );
; 974  : 
; 975  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  003b0	e3e0533f	 mvn         r5, #0x3F, 6
  003b4	e1823803	 orr         r3, r2, r3, lsl #16
  003b8	e58130c4	 str         r3, [r1, #0xC4]
  003bc	e5973008	 ldr         r3, [r7, #8]
  003c0	e225ecfe	 eor         lr, r5, #0xFE, 24
  003c4	e59d4008	 ldr         r4, [sp, #8]
  003c8	e583e0d0	 str         lr, [r3, #0xD0]
  003cc	e5963000	 ldr         r3, [r6]
  003d0	e1a02004	 mov         r2, r4
  003d4	e1a01008	 mov         r1, r8
  003d8	e5933018	 ldr         r3, [r3, #0x18]
  003dc	e1a00006	 mov         r0, r6
  003e0	e1a0e00f	 mov         lr, pc
  003e4	e12fff13	 bx          r3
  003e8	e5973008	 ldr         r3, [r7, #8]

; 976  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  003ec	e1a02004	 mov         r2, r4
  003f0	e1a01008	 mov         r1, r8
  003f4	e58300dc	 str         r0, [r3, #0xDC]
  003f8	e5963000	 ldr         r3, [r6]
  003fc	e1a00006	 mov         r0, r6
  00400	e593301c	 ldr         r3, [r3, #0x1C]
  00404	e1a0e00f	 mov         lr, pc
  00408	e12fff13	 bx          r3
  0040c	e5972008	 ldr         r2, [r7, #8]

; 977  :         
; 978  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA0, pSurface->PhysicalAddr(eRotation, bMirror) );

  00410	e3a03000	 mov         r3, #0
  00414	e1a01008	 mov         r1, r8
  00418	e58200d8	 str         r0, [r2, #0xD8]
  0041c	e596e000	 ldr         lr, [r6]
  00420	e1a02004	 mov         r2, r4
  00424	e1a00006	 mov         r0, r6
  00428	e59e4014	 ldr         r4, [lr, #0x14]
  0042c	e1a0e00f	 mov         lr, pc
  00430	e12fff14	 bx          r4
  00434	e5972008	 ldr         r2, [r7, #8]

; 979  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  00438	e3a03000	 mov         r3, #0
  0043c	e1a01008	 mov         r1, r8
  00440	e58200bc	 str         r0, [r2, #0xBC]
  00444	e5960000	 ldr         r0, [r6]
  00448	e59d2008	 ldr         r2, [sp, #8]
  0044c	e5904014	 ldr         r4, [r0, #0x14]
  00450	e1a00006	 mov         r0, r6
  00454	e1a0e00f	 mov         lr, pc
  00458	e12fff14	 bx          r4
  0045c	e5973008	 ldr         r3, [r7, #8]
  00460	e59d500c	 ldr         r5, [sp, #0xC]
  00464	e58300c0	 str         r0, [r3, #0xC0]

; 980  : 
; 981  :         
; 982  :         //  Color conversion coefficients
; 983  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF0, m_pColorSpaceCoeffs[0] );

  00468	e59734a4	 ldr         r3, [r7, #0x4A4]
  0046c	e5972008	 ldr         r2, [r7, #8]
  00470	e5933000	 ldr         r3, [r3]
  00474	e5823130	 str         r3, [r2, #0x130]

; 984  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF1, m_pColorSpaceCoeffs[1] );

  00478	e59734a4	 ldr         r3, [r7, #0x4A4]
  0047c	e5972008	 ldr         r2, [r7, #8]
  00480	e5933004	 ldr         r3, [r3, #4]
  00484	e5823134	 str         r3, [r2, #0x134]

; 985  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF2, m_pColorSpaceCoeffs[2] );

  00488	e59734a4	 ldr         r3, [r7, #0x4A4]
  0048c	e5972008	 ldr         r2, [r7, #8]
  00490	e5933008	 ldr         r3, [r3, #8]
  00494	e5823138	 str         r3, [r2, #0x138]

; 986  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF3, m_pColorSpaceCoeffs[3] );

  00498	e59734a4	 ldr         r3, [r7, #0x4A4]
  0049c	e5972008	 ldr         r2, [r7, #8]
  004a0	e593300c	 ldr         r3, [r3, #0xC]
  004a4	e582313c	 str         r3, [r2, #0x13C]

; 987  :         OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF4, m_pColorSpaceCoeffs[4] );

  004a8	e59734a4	 ldr         r3, [r7, #0x4A4]
  004ac	e5972008	 ldr         r2, [r7, #8]
  004b0	e5933010	 ldr         r3, [r3, #0x10]
  004b4	e5823140	 str         r3, [r2, #0x140]
  004b8		 |$LN2@SetPipelin|

; 988  :     }    
; 989  : 
; 990  : 
; 991  :     //  VIDEO2 pipeline
; 992  :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  004b8	e35b0002	 cmp         r11, #2
  004bc	1a000070	 bne         |$LN1@SetPipelin|

; 993  :     {
; 994  :         //  Set attributes of pipeline
; 995  :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES,
; 996  :                     ((eDestination == OMAP_DSS_DESTINATION_TVOUT) ? DISPC_VID_ATTR_VIDCHANNELOUT : 0) |
; 997  :                     dwVidRotation |
; 998  :                     DISPC_VID_ATTR_VIDBURSTSIZE_16x32 |
; 999  :                     DISPC_VID_ATTR_VIDCOLORCONVENABLE |
; 1000 :                     DISPC_VID_ATTR_VIDRESIZE_NONE |
; 1001 :                     DISPC_VID_ATTR_VIDFORMAT(pSurface->PixelFormat())
; 1002 :                     );

  004c0	e5963004	 ldr         r3, [r6, #4]
  004c4	e3550001	 cmp         r5, #1
  004c8	03a00801	 moveq       r0, #1, 16

; 1003 : 
; 1004 :         //  Size of window; picture size is the same for no scaling
; 1005 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.SIZE,
; 1006 :                     DISPC_VID_SIZE_VIDSIZEX(pSurface->Width(eRotation)) |
; 1007 :                     DISPC_VID_SIZE_VIDSIZEY(pSurface->Height(eRotation))
; 1008 :                     );

  004cc	e3833c41	 orr         r3, r3, #0x41, 24
  004d0	13a00000	 movne       r0, #0
  004d4	e5972008	 ldr         r2, [r7, #8]
  004d8	e1803083	 orr         r3, r0, r3, lsl #1
  004dc	e1833009	 orr         r3, r3, r9
  004e0	e582315c	 str         r3, [r2, #0x15C]
  004e4	e5963000	 ldr         r3, [r6]
  004e8	e1a01008	 mov         r1, r8
  004ec	e1a00006	 mov         r0, r6
  004f0	e5933008	 ldr         r3, [r3, #8]
  004f4	e1a0e00f	 mov         lr, pc
  004f8	e12fff13	 bx          r3
  004fc	e5963000	 ldr         r3, [r6]
  00500	e1a04000	 mov         r4, r0
  00504	e1a01008	 mov         r1, r8
  00508	e593300c	 ldr         r3, [r3, #0xC]
  0050c	e1a00006	 mov         r0, r6
  00510	e1a0e00f	 mov         lr, pc
  00514	e12fff13	 bx          r3
  00518	e5971008	 ldr         r1, [r7, #8]
  0051c	e2402001	 sub         r2, r0, #1
  00520	e2443001	 sub         r3, r4, #1
  00524	e1833802	 orr         r3, r3, r2, lsl #16
  00528	e5813158	 str         r3, [r1, #0x158]

; 1009 : 
; 1010 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.PICTURE_SIZE,
; 1011 :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEX(pSurface->Width(eRotation)) |
; 1012 :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEY(pSurface->Height(eRotation))
; 1013 :                     );

  0052c	e5963000	 ldr         r3, [r6]
  00530	e1a01008	 mov         r1, r8
  00534	e1a00006	 mov         r0, r6
  00538	e5933008	 ldr         r3, [r3, #8]
  0053c	e1a0e00f	 mov         lr, pc
  00540	e12fff13	 bx          r3
  00544	e5963000	 ldr         r3, [r6]
  00548	e1a04000	 mov         r4, r0
  0054c	e1a01008	 mov         r1, r8
  00550	e593300c	 ldr         r3, [r3, #0xC]
  00554	e1a00006	 mov         r0, r6
  00558	e1a0e00f	 mov         lr, pc
  0055c	e12fff13	 bx          r3
  00560	e5971008	 ldr         r1, [r7, #8]
  00564	e2402001	 sub         r2, r0, #1
  00568	e2443001	 sub         r3, r4, #1
  0056c	e1833802	 orr         r3, r3, r2, lsl #16

; 1014 : 
; 1015 :         //  Position of window
; 1016 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.POSITION,
; 1017 :                     DISPC_VID_POS_VIDPOSX(dwX) |
; 1018 :                     DISPC_VID_POS_VIDPOSY(dwY)
; 1019 :                     );

  00570	e59d2004	 ldr         r2, [sp, #4]
  00574	e5813174	 str         r3, [r1, #0x174]
  00578	e59d3000	 ldr         r3, [sp]
  0057c	e5971008	 ldr         r1, [r7, #8]

; 1020 :                     
; 1021 :         //  Pipeline FIFO and DMA settings
; 1022 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.FIFO_THRESHOLD,
; 1023 :                     DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 1024 :                     DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 1025 :                     );
; 1026 : 
; 1027 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  00580	e3e0433f	 mvn         r4, #0x3F, 6
  00584	e1823803	 orr         r3, r2, r3, lsl #16
  00588	e5813154	 str         r3, [r1, #0x154]
  0058c	e5973008	 ldr         r3, [r7, #8]
  00590	e224ecfe	 eor         lr, r4, #0xFE, 24
  00594	e59d9008	 ldr         r9, [sp, #8]
  00598	e583e160	 str         lr, [r3, #0x160]
  0059c	e5963000	 ldr         r3, [r6]
  005a0	e1a02009	 mov         r2, r9
  005a4	e1a01008	 mov         r1, r8
  005a8	e5933018	 ldr         r3, [r3, #0x18]
  005ac	e1a00006	 mov         r0, r6
  005b0	e1a0e00f	 mov         lr, pc
  005b4	e12fff13	 bx          r3
  005b8	e5973008	 ldr         r3, [r7, #8]

; 1028 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  005bc	e1a02009	 mov         r2, r9
  005c0	e1a01008	 mov         r1, r8
  005c4	e583016c	 str         r0, [r3, #0x16C]
  005c8	e5963000	 ldr         r3, [r6]
  005cc	e1a00006	 mov         r0, r6
  005d0	e593301c	 ldr         r3, [r3, #0x1C]
  005d4	e1a0e00f	 mov         lr, pc
  005d8	e12fff13	 bx          r3
  005dc	e5971008	 ldr         r1, [r7, #8]

; 1029 : 
; 1030 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA0, pSurface->PhysicalAddr(eRotation, bMirror) );

  005e0	e3a03000	 mov         r3, #0
  005e4	e1a02009	 mov         r2, r9
  005e8	e5810168	 str         r0, [r1, #0x168]
  005ec	e596e000	 ldr         lr, [r6]
  005f0	e1a01008	 mov         r1, r8
  005f4	e1a00006	 mov         r0, r6
  005f8	e59e4014	 ldr         r4, [lr, #0x14]
  005fc	e1a0e00f	 mov         lr, pc
  00600	e12fff14	 bx          r4
  00604	e5971008	 ldr         r1, [r7, #8]

; 1031 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  00608	e3a03000	 mov         r3, #0
  0060c	e1a02009	 mov         r2, r9
  00610	e581014c	 str         r0, [r1, #0x14C]
  00614	e5960000	 ldr         r0, [r6]
  00618	e1a01008	 mov         r1, r8
  0061c	e5904014	 ldr         r4, [r0, #0x14]
  00620	e1a00006	 mov         r0, r6
  00624	e1a0e00f	 mov         lr, pc
  00628	e12fff14	 bx          r4
  0062c	e5973008	 ldr         r3, [r7, #8]
  00630	e5830150	 str         r0, [r3, #0x150]

; 1032 : 
; 1033 : 
; 1034 : 
; 1035 :         //  Color conversion coefficients
; 1036 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF0, m_pColorSpaceCoeffs[0] );

  00634	e59734a4	 ldr         r3, [r7, #0x4A4]
  00638	e5972008	 ldr         r2, [r7, #8]
  0063c	e5933000	 ldr         r3, [r3]
  00640	e58231c0	 str         r3, [r2, #0x1C0]

; 1037 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF1, m_pColorSpaceCoeffs[1] );

  00644	e59734a4	 ldr         r3, [r7, #0x4A4]
  00648	e5972008	 ldr         r2, [r7, #8]
  0064c	e5933004	 ldr         r3, [r3, #4]
  00650	e58231c4	 str         r3, [r2, #0x1C4]

; 1038 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF2, m_pColorSpaceCoeffs[2] );

  00654	e59734a4	 ldr         r3, [r7, #0x4A4]
  00658	e5972008	 ldr         r2, [r7, #8]
  0065c	e5933008	 ldr         r3, [r3, #8]
  00660	e58231c8	 str         r3, [r2, #0x1C8]

; 1039 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF3, m_pColorSpaceCoeffs[3] );

  00664	e59734a4	 ldr         r3, [r7, #0x4A4]
  00668	e5972008	 ldr         r2, [r7, #8]
  0066c	e593300c	 ldr         r3, [r3, #0xC]
  00670	e58231cc	 str         r3, [r2, #0x1CC]

; 1040 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF4, m_pColorSpaceCoeffs[4] );

  00674	e59734a4	 ldr         r3, [r7, #0x4A4]
  00678	e5972008	 ldr         r2, [r7, #8]
  0067c	e5933010	 ldr         r3, [r3, #0x10]
  00680	e58231d0	 str         r3, [r2, #0x1D0]
  00684		 |$LN1@SetPipelin|

; 1041 :     }    
; 1042 : 
; 1043 : 
; 1044 : 
; 1045 :     //  Set mapping of pipeline to destination and surface
; 1046 :     g_rgPipelineMapping[ePipeline].eDestination = eDestination;

  00684	e58a5004	 str         r5, [r10, #4]

; 1047 :     g_rgPipelineMapping[ePipeline].pSurface     = pSurface;

  00688	e58a6008	 str         r6, [r10, #8]

; 1048 :     g_rgPipelineMapping[ePipeline].dwDestWidth  = pSurface->Width(eRotation);

  0068c	e5963000	 ldr         r3, [r6]
  00690	e1a01008	 mov         r1, r8
  00694	e1a00006	 mov         r0, r6
  00698	e5933008	 ldr         r3, [r3, #8]
  0069c	e1a0e00f	 mov         lr, pc
  006a0	e12fff13	 bx          r3
  006a4	e58a0014	 str         r0, [r10, #0x14]

; 1049 :     g_rgPipelineMapping[ePipeline].dwDestHeight = pSurface->Height(eRotation);

  006a8	e5963000	 ldr         r3, [r6]
  006ac	e1a01008	 mov         r1, r8
  006b0	e1a00006	 mov         r0, r6
  006b4	e593300c	 ldr         r3, [r3, #0xC]
  006b8	e1a0e00f	 mov         lr, pc
  006bc	e12fff13	 bx          r3

; 1050 :     g_rgPipelineMapping[ePipeline].pOldSurface  = pSurface;
; 1051 : 
; 1052 :     //  Reset the scaling factors to 100% and no interlacing
; 1053 :     g_rgPipelineScaling[ePipeline].dwHorzScaling = 1;

  006c0	e59f103c	 ldr         r1, [pc, #0x3C]
  006c4	e08b208b	 add         r2, r11, r11, lsl #1

; 1054 :     g_rgPipelineScaling[ePipeline].dwVertScaling = 1;
; 1055 :     g_rgPipelineScaling[ePipeline].dwInterlace   = 0;

  006c8	e3a04000	 mov         r4, #0
  006cc	e0813102	 add         r3, r1, r2, lsl #2
  006d0	e3a0e001	 mov         lr, #1
  006d4	e5834008	 str         r4, [r3, #8]

; 1056 :     
; 1057 :     //  Result
; 1058 :     bResult = TRUE;         

  006d8	e3a04001	 mov         r4, #1
  006dc	e583e004	 str         lr, [r3, #4]
  006e0	e58a0018	 str         r0, [r10, #0x18]
  006e4	e58a601c	 str         r6, [r10, #0x1C]
  006e8	e781e102	 str         lr, [r1, +r2, lsl #2]
  006ec		 |$cleanUp$38213|

; 1059 : 
; 1060 : cleanUp:    
; 1061 :     //  Release regs
; 1062 :     ReleaseRegs();

  006ec	e2870e49	 add         r0, r7, #0x49, 28
  006f0	eb000000	 bl          LeaveCriticalSection

; 1063 :     
; 1064 :     //  Return result
; 1065 :     return bResult;
; 1066 : }

  006f4	e1a00004	 mov         r0, r4
  006f8	e28dd010	 add         sp, sp, #0x10
  006fc	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00700	e12fff1e	 bx          lr
  00704		 |$LN59@SetPipelin|
  00704		 |$LN60@SetPipelin|
  00704	00000000	 DCD         |?g_rgPipelineScaling@@3PAUOMAPPipelineScaling@@A|
  00708		 |$LN61@SetPipelin|
  00708	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  0070c		 |$M41304|

			 ENDP  ; |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z|, OMAPDisplayController::SetPipelineAttribs

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z| ; OMAPDisplayController::SetScalingAttribs
	EXPORT	|??_C@_1JI@NGBENMPF@?$AAS?$AAe?$AAt?$AAS?$AAc?$AAa?$AAl?$AAi?$AAn?$AAg?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAs?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg@| [ DATA ] ; `string'
	IMPORT	|LcdPdd_Get_PixClkDiv|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|?g_dwScalingCoeff_Vert_Down_3_Taps@@3PAKA| ; g_dwScalingCoeff_Vert_Down_3_Taps
	IMPORT	|?g_dwScalingCoeff_Vert_Up_3_Taps@@3PAKA| ; g_dwScalingCoeff_Vert_Up_3_Taps
	IMPORT	|?g_dwScalingCoeff_Vert_Down_5_Taps@@3PAKA| ; g_dwScalingCoeff_Vert_Down_5_Taps
	IMPORT	|?g_dwScalingCoeff_Horiz_Up@@3PAKA|	; g_dwScalingCoeff_Horiz_Up
	IMPORT	|?g_dwScalingCoeff_Horiz_Down@@3PAKA|	; g_dwScalingCoeff_Horiz_Down
	IMPORT	|__security_cookie|
	IMPORT	|memset|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T41560| DCD	|$LN229@SetScaling|
	DCD	0xc0043b02

  00000			 AREA	 |.xdata|, DATA
|$T41556| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@NGBENMPF@?$AAS?$AAe?$AAt?$AAS?$AAc?$AAa?$AAl?$AAi?$AAn?$AAg?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAs?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg@| DCB "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "c", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, "A", 0x0, "t", 0x0, "t"
	DCB	0x0, "r", 0x0, "i", 0x0, "b", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i"
	DCB	0x0, "g", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, "/", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "I"
	DCB	0x0, "S", 0x0, "P", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "r", 0x0, ";", 0x0, " "
	DCB	0x0, "C", 0x0, "r", 0x0, "o", 0x0, "p", 0x0, "p", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, " ", 0x0, "i", 0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T41556|

  00008		 |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z| PROC ; OMAPDisplayController::SetScalingAttribs

; 1164 : {

  00008		 |$LN229@SetScaling|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddf59	 sub         sp, sp, #0x59, 30
  00010		 |$M41557|
  00010	e1a09003	 mov         r9, r3
  00014	e1a0a002	 mov         r10, r2
  00018	e1a06001	 mov         r6, r1
  0001c	e58d905c	 str         r9, [sp, #0x5C]
  00020	e58da050	 str         r10, [sp, #0x50]
  00024	e58d6024	 str         r6, [sp, #0x24]
  00028	e58d0004	 str         r0, [sp, #4]
  0002c	e59f0084	 ldr         r0, [pc, #0x84]
  00030	e5900000	 ldr         r0, [r0]
  00034	e58d0160	 str         r0, [sp, #0x160]

; 1165 :     BOOL                bResult = FALSE;
; 1166 :     OMAPSurface*        pSurface;
; 1167 :     OMAP_DSS_ROTATION   eRotation;
; 1168 :     BOOL                bMirror;
; 1169 :     DWORD   dwSrcWidth,
; 1170 :             dwSrcHeight,
; 1171 :             dwDestWidth,
; 1172 :             dwDestHeight;
; 1173 :     DWORD   dwHorzScale,
; 1174 :             dwVertScale;
; 1175 :     DWORD   dwX, dwY;
; 1176 :     DWORD   dwCurrAttribs;
; 1177 :     DWORD   dwScaleEnable = 0;
; 1178 :     DWORD               dwAccum0 = 0;
; 1179 :     DWORD               dwAccum1 = 0;
; 1180 :     DWORD               dwHorzDecimation = 1;
; 1181 :     DWORD               dwVertDecimation = 1;
; 1182 :     DWORD               dwInterlace = 0;
; 1183 :     DWORD*  pHorizCoeffs = NULL;
; 1184 :     DWORD*  pVertCoeffs = NULL;
; 1185 :     DWORD               dwPixelsPerLine;
; 1186 :     DWORD   i;
; 1187 :     BOOL                bYUVRotated = FALSE;
; 1188 :     DWORD               dwInterlaceCorrection;
; 1189 :     DWORD               dwData1, dwData2;
; 1190 :     DWORD               dwVTaps;
; 1191 :     DWORD               dwFlickerFilter = 0;
; 1192 :     BYTE                Coefficients[5][8];
; 1193 : 
; 1194 :     // Temp array to hold calculated Scaling Coeffs
; 1195 :     DWORD               dwHorizCoeffs[NUM_SCALING_COEFFS];
; 1196 :     DWORD               dwVertCoeffs[NUM_SCALING_COEFFS];
; 1197 :     RECT                privSrcRect = *pSrcRect;
; 1198 :     BOOL                bUseResizer = FALSE;
; 1199 :     
; 1200 :     
; 1201 :     //  Access the regs
; 1202 :     if( AccessRegs() == FALSE )

  00038	e3a03000	 mov         r3, #0
  0003c	e58d3010	 str         r3, [sp, #0x10]
  00040	e3a03000	 mov         r3, #0
  00044	e58d3054	 str         r3, [sp, #0x54]
  00048	e3a03001	 mov         r3, #1
  0004c	e58d3028	 str         r3, [sp, #0x28]
  00050	e59a500c	 ldr         r5, [r10, #0xC]
  00054	e3a03001	 mov         r3, #1
  00058	e58d3014	 str         r3, [sp, #0x14]
  0005c	e3a03000	 mov         r3, #0
  00060	e59a0000	 ldr         r0, [r10]
  00064	e58d3058	 str         r3, [sp, #0x58]
  00068	e59ae004	 ldr         lr, [r10, #4]
  0006c	e59a4008	 ldr         r4, [r10, #8]
  00070	e58d5040	 str         r5, [sp, #0x40]
  00074	e59d5004	 ldr         r5, [sp, #4]
  00078	e3a03000	 mov         r3, #0
  0007c	e58d3048	 str         r3, [sp, #0x48]
  00080	e3a03000	 mov         r3, #0
  00084	e58d0034	 str         r0, [sp, #0x34]
  00088	e3a08000	 mov         r8, #0
  0008c	e1a00005	 mov         r0, r5
  00090	e58d301c	 str         r3, [sp, #0x1C]
  00094	e58de038	 str         lr, [sp, #0x38]
  00098	e58d403c	 str         r4, [sp, #0x3C]
  0009c	e58d8060	 str         r8, [sp, #0x60]
  000a0	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  000a4	e3500000	 cmp         r0, #0
  000a8	0a000400	 beq         |$cleanUp$38416|

; 1203 :         goto cleanUp;
; 1204 : 
; 1205 : 
; 1206 :     //  Get rotation and mirror settings for pipeline output
; 1207 :     pSurface  = g_rgPipelineMapping[ePipeline].pSurface;

  000ac	e59f3000	 ldr         r3, [pc]
  000b0	ea000001	 b           |$LN240@SetScaling|
  000b4		 |$LN241@SetScaling|
  000b4		 |$LN242@SetScaling|
  000b4	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  000b8		 |$LN243@SetScaling|
  000b8	00000000	 DCD         |__security_cookie|
  000bc		 |$LN240@SetScaling|

; 1208 :     eRotation = g_rgPipelineMapping[ePipeline].eRotation;
; 1209 :     bMirror   = g_rgPipelineMapping[ePipeline].bMirror;
; 1210 : 
; 1211 : 
; 1212 :     //  Compute horizontal and vertical scaling factors
; 1213 :     dwSrcWidth  = pSrcRect->right - pSrcRect->left;
; 1214 :     dwSrcHeight = pSrcRect->bottom - pSrcRect->top;
; 1215 : 
; 1216 :     dwDestWidth  = pDestRect->right - pDestRect->left;
; 1217 :     dwDestHeight = pDestRect->bottom - pDestRect->top;
; 1218 : 
; 1219 :     
; 1220 :     //  Check for odd destination RECT values only for YUV pixel formats
; 1221 :     if( (pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_YUV2) ||
; 1222 :         (pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_UYVY) )

  000bc	e599b008	 ldr         r11, [r9, #8]
  000c0	e5992000	 ldr         r2, [r9]
  000c4	e0837286	 add         r7, r3, r6, lsl #5
  000c8	e5976008	 ldr         r6, [r7, #8]
  000cc	e59a4008	 ldr         r4, [r10, #8]
  000d0	e59ae000	 ldr         lr, [r10]
  000d4	e5965004	 ldr         r5, [r6, #4]
  000d8	e59a000c	 ldr         r0, [r10, #0xC]
  000dc	e59a1004	 ldr         r1, [r10, #4]
  000e0	e355000a	 cmp         r5, #0xA
  000e4	e597500c	 ldr         r5, [r7, #0xC]
  000e8	e5993004	 ldr         r3, [r9, #4]
  000ec	e58d6074	 str         r6, [sp, #0x74]
  000f0	e58d5030	 str         r5, [sp, #0x30]
  000f4	e5975010	 ldr         r5, [r7, #0x10]
  000f8	e04b7002	 sub         r7, r11, r2
  000fc	e599200c	 ldr         r2, [r9, #0xC]
  00100	e58d5044	 str         r5, [sp, #0x44]
  00104	e044500e	 sub         r5, r4, lr
  00108	e0404001	 sub         r4, r0, r1
  0010c	e58d400c	 str         r4, [sp, #0xC]
  00110	e042b003	 sub         r11, r2, r3
  00114	0a000002	 beq         |$LN100@SetScaling|
  00118	e5963004	 ldr         r3, [r6, #4]
  0011c	e353000b	 cmp         r3, #0xB
  00120	1a000017	 bne         |$LN96@SetScaling|
  00124		 |$LN100@SetScaling|

; 1223 :     {
; 1224 :         //  Check for odd destination RECT values
; 1225 :         if( (dwDestWidth % 2) == 1 )

  00124	e2073001	 and         r3, r7, #1
  00128	e3530001	 cmp         r3, #1

; 1226 :         {
; 1227 :             pDestRect->right -= 1;

  0012c	05993008	 ldreq       r3, [r9, #8]

; 1228 :             dwDestWidth -= 1;

  00130	02477001	 subeq       r7, r7, #1
  00134	02433001	 subeq       r3, r3, #1
  00138	05893008	 streq       r3, [r9, #8]

; 1229 :         }
; 1230 : 
; 1231 :         if( (dwDestHeight % 2) == 1 )

  0013c	e20b3001	 and         r3, r11, #1
  00140	e3530001	 cmp         r3, #1

; 1232 :         {
; 1233 :             pDestRect->bottom -= 1;

  00144	02423001	 subeq       r3, r2, #1
  00148	0589300c	 streq       r3, [r9, #0xC]

; 1234 :             dwDestHeight -= 1;
; 1235 :         }
; 1236 :         if( (dwSrcWidth % 2) == 1 )

  0014c	e2053001	 and         r3, r5, #1
  00150	024bb001	 subeq       r11, r11, #1
  00154	e3530001	 cmp         r3, #1

; 1237 :         {
; 1238 :             pSrcRect->right -= 1;

  00158	059a3008	 ldreq       r3, [r10, #8]

; 1239 :             dwSrcWidth -= 1;

  0015c	02455001	 subeq       r5, r5, #1
  00160	02433001	 subeq       r3, r3, #1
  00164	058a3008	 streq       r3, [r10, #8]

; 1240 :         }
; 1241 : 
; 1242 :         if( (dwSrcHeight % 2) == 1 )

  00168	e2043001	 and         r3, r4, #1
  0016c	e3530001	 cmp         r3, #1

; 1243 :         {
; 1244 :             pSrcRect->bottom -= 1;

  00170	059a300c	 ldreq       r3, [r10, #0xC]

; 1245 :             dwSrcHeight -= 1;

  00174	02444001	 subeq       r4, r4, #1
  00178	058d400c	 streq       r4, [sp, #0xC]
  0017c	02433001	 subeq       r3, r3, #1
  00180	058a300c	 streq       r3, [r10, #0xC]
  00184		 |$LN96@SetScaling|

; 1246 :         }
; 1247 :     }
; 1248 : 
; 1249 :     //  Compute scaling factors
; 1250 :     dwHorzScale = 1024 * dwSrcWidth / dwDestWidth;

  00184	e1a00007	 mov         r0, r7
  00188	e1a01505	 mov         r1, r5, lsl #10
  0018c	eb000000	 bl          __rt_udiv
  00190	e58d0000	 str         r0, [sp]

; 1251 :     dwVertScale = 1024 * dwSrcHeight / dwDestHeight;

  00194	e1a0000b	 mov         r0, r11
  00198	e1a01504	 mov         r1, r4, lsl #10
  0019c	eb000000	 bl          __rt_udiv

; 1252 : 
; 1253 :     privSrcRect = *pSrcRect;

  001a0	e59ae00c	 ldr         lr, [r10, #0xC]
  001a4	e59a3000	 ldr         r3, [r10]
  001a8	e59a2004	 ldr         r2, [r10, #4]
  001ac	e59a1008	 ldr         r1, [r10, #8]

; 1254 : 
; 1255 : 	if (( g_rgPipelineMapping[ePipeline].eDestination == OMAP_DSS_DESTINATION_LCD ) &&
; 1256 :         (ePipeline != OMAP_DSS_PIPELINE_GFX ))

  001b0	e59faf1c	 ldr         r10, [pc, #0xF1C]
  001b4	e59d9024	 ldr         r9, [sp, #0x24]
  001b8	e58d3034	 str         r3, [sp, #0x34]
  001bc	e1a03000	 mov         r3, r0
  001c0	e08a4289	 add         r4, r10, r9, lsl #5
  001c4	e5944004	 ldr         r4, [r4, #4]
  001c8	e59d905c	 ldr         r9, [sp, #0x5C]
  001cc	e59da050	 ldr         r10, [sp, #0x50]
  001d0	e58de040	 str         lr, [sp, #0x40]
  001d4	e3540000	 cmp         r4, #0
  001d8	e58d2038	 str         r2, [sp, #0x38]
  001dc	e58d103c	 str         r1, [sp, #0x3C]
  001e0	e58d3018	 str         r3, [sp, #0x18]
  001e4	e3a0e000	 mov         lr, #0
  001e8	1a000042	 bne         |$LN95@SetScaling|
  001ec	e59d3024	 ldr         r3, [sp, #0x24]
  001f0	e3530000	 cmp         r3, #0
  001f4	0a00003f	 beq         |$LN95@SetScaling|

; 1257 :     {
; 1258 : 		if ( m_bDssIspRszEnabled && // is globally enabled
; 1259 :              ((NeedISPResizer(dwHorzScale,dwVertScale,LcdPdd_Get_PixClkDiv()))==TRUE) && // do we need it
; 1260 :              (pSurface->GetRSZHandle(TRUE) != NULL) &&  // can we use it
; 1261 :              (pSurface->UseResizer(TRUE) == TRUE)) // do we have the buffers

  001f8	e59d4004	 ldr         r4, [sp, #4]
  001fc	e5943518	 ldr         r3, [r4, #0x518]
  00200	e3530000	 cmp         r3, #0
  00204	0a000029	 beq         |$LN94@SetScaling|
  00208	eb000000	 bl          LcdPdd_Get_PixClkDiv
  0020c	e59d1018	 ldr         r1, [sp, #0x18]
  00210	e1a02000	 mov         r2, r0
  00214	e59d0000	 ldr         r0, [sp]
  00218	eb000000	 bl          |?NeedISPResizer@@YAHKKK@Z|
  0021c	e3500001	 cmp         r0, #1
  00220	1a000021	 bne         |$LN220@SetScaling|
  00224	e3a01001	 mov         r1, #1
  00228	e1a00006	 mov         r0, r6
  0022c	eb000000	 bl          |?GetRSZHandle@OMAPSurface@@QAAPAXH@Z|
  00230	e3500000	 cmp         r0, #0
  00234	0a00001c	 beq         |$LN220@SetScaling|
  00238	e59630a0	 ldr         r3, [r6, #0xA0]
  0023c	e3530000	 cmp         r3, #0
  00240	0a000016	 beq         |$LN125@SetScaling|
  00244	e3a03001	 mov         r3, #1
  00248	e5863030	 str         r3, [r6, #0x30]

; 1262 : 		{		    
; 1263 : 		    //all check passed
; 1264 :             bUseResizer = TRUE;
; 1265 :             /* Since ISP Resizer would be providing the src image to 
; 1266 :             DSS, make the SRC RECT for DSS same as DEST RECT */
; 1267 :             privSrcRect.left=0;

  0024c	e3a03000	 mov         r3, #0
  00250	e58d3020	 str         r3, [sp, #0x20]

; 1268 :             privSrcRect.right = dwDestWidth;
; 1269 :             privSrcRect.top=0;
; 1270 : 			privSrcRect.bottom = dwDestHeight;			
; 1271 : 			
; 1272 : 			dwSrcWidth  = privSrcRect.right - privSrcRect.left;
; 1273 :             dwSrcHeight = privSrcRect.bottom - privSrcRect.top;
; 1274 :             dwHorzScale = 1024 * dwSrcWidth / dwDestWidth;

  00254	e58d3034	 str         r3, [sp, #0x34]
  00258	e3a03001	 mov         r3, #1
  0025c	e3a02000	 mov         r2, #0
  00260	e1a00007	 mov         r0, r7
  00264	e1a01507	 mov         r1, r7, lsl #10
  00268	e58d301c	 str         r3, [sp, #0x1C]
  0026c	e58d2008	 str         r2, [sp, #8]
  00270	e58d2038	 str         r2, [sp, #0x38]
  00274	e58d703c	 str         r7, [sp, #0x3C]
  00278	e58db040	 str         r11, [sp, #0x40]
  0027c	e1a05007	 mov         r5, r7
  00280	e58db00c	 str         r11, [sp, #0xC]
  00284	eb000000	 bl          __rt_udiv
  00288	e58d0000	 str         r0, [sp]

; 1275 : 			dwVertScale = 1024 * dwSrcHeight / dwDestHeight;            

  0028c	e1a0000b	 mov         r0, r11
  00290	e1a0150b	 mov         r1, r11, lsl #10
  00294	eb000000	 bl          __rt_udiv
  00298	e58d0018	 str         r0, [sp, #0x18]

; 1276 :         } 
; 1277 :         else

  0029c	ea000027	 b           |$LN92@SetScaling|

; 1257 :     {
; 1258 : 		if ( m_bDssIspRszEnabled && // is globally enabled
; 1259 :              ((NeedISPResizer(dwHorzScale,dwVertScale,LcdPdd_Get_PixClkDiv()))==TRUE) && // do we need it
; 1260 :              (pSurface->GetRSZHandle(TRUE) != NULL) &&  // can we use it
; 1261 :              (pSurface->UseResizer(TRUE) == TRUE)) // do we have the buffers

  002a0		 |$LN125@SetScaling|
  002a0	e3a0e000	 mov         lr, #0
  002a4	e586e030	 str         lr, [r6, #0x30]
  002a8	ea000000	 b           |$LN94@SetScaling|
  002ac		 |$LN220@SetScaling|
  002ac	e3a0e000	 mov         lr, #0
  002b0		 |$LN94@SetScaling|

; 1278 :         {
; 1279 :             /* some check did not pass - disable ISP resizer */
; 1280 :             pSurface->SetRSZHandle(NULL,TRUE);

  002b0	e5963034	 ldr         r3, [r6, #0x34]
  002b4	e3530000	 cmp         r3, #0
  002b8	0a000003	 beq         |$LN128@SetScaling|
  002bc	e1a00003	 mov         r0, r3
  002c0	eb000000	 bl          CloseHandle
  002c4	e3a0e000	 mov         lr, #0
  002c8	e586e034	 str         lr, [r6, #0x34]
  002cc		 |$LN128@SetScaling|

; 1281 :             pSurface->UseResizer(FALSE);
; 1282 :             memset(pSurface->ResizeParams(),0,sizeof(RSZParams_t));

  002cc	e3a02064	 mov         r2, #0x64
  002d0	e3a01000	 mov         r1, #0
  002d4	e2860038	 add         r0, r6, #0x38
  002d8	e586e034	 str         lr, [r6, #0x34]
  002dc	e586e030	 str         lr, [r6, #0x30]
  002e0	eb000000	 bl          memset

; 1283 :         }        
; 1284 :     }
; 1285 :     else /* for cases where surfaces are re-assigned to different pipelines */

  002e4	e59d1038	 ldr         r1, [sp, #0x38]
  002e8	e59d2034	 ldr         r2, [sp, #0x34]
  002ec	e58d1008	 str         r1, [sp, #8]
  002f0	e58d2020	 str         r2, [sp, #0x20]
  002f4	ea000011	 b           |$LN92@SetScaling|
  002f8		 |$LN95@SetScaling|

; 1286 :     {
; 1287 :         /* some check did not pass - disable ISP resizer */
; 1288 :         pSurface->SetRSZHandle(NULL,TRUE);

  002f8	e5963034	 ldr         r3, [r6, #0x34]
  002fc	e3530000	 cmp         r3, #0
  00300	0a000003	 beq         |$LN137@SetScaling|
  00304	e1a00003	 mov         r0, r3
  00308	eb000000	 bl          CloseHandle
  0030c	e3a0e000	 mov         lr, #0
  00310	e586e034	 str         lr, [r6, #0x34]
  00314		 |$LN137@SetScaling|

; 1289 :         pSurface->UseResizer(FALSE);
; 1290 :         memset(pSurface->ResizeParams(),0,sizeof(RSZParams_t));

  00314	e3a02064	 mov         r2, #0x64
  00318	e3a01000	 mov         r1, #0
  0031c	e2860038	 add         r0, r6, #0x38
  00320	e586e034	 str         lr, [r6, #0x34]
  00324	e586e030	 str         lr, [r6, #0x30]
  00328	eb000000	 bl          memset
  0032c	e59d3038	 ldr         r3, [sp, #0x38]
  00330	e59d4004	 ldr         r4, [sp, #4]
  00334	e58d3008	 str         r3, [sp, #8]
  00338	e59d3034	 ldr         r3, [sp, #0x34]
  0033c	e58d3020	 str         r3, [sp, #0x20]
  00340		 |$LN92@SetScaling|

; 1291 :     }    
; 1292 :     
; 1293 :     
; 1294 :     if ((eRotation == OMAP_DSS_ROTATION_0)||(eRotation == OMAP_DSS_ROTATION_180))

  00340	e59d3030	 ldr         r3, [sp, #0x30]

; 1295 :         dwPixelsPerLine = GetLCDWidth();
; 1296 :     else
; 1297 :         dwPixelsPerLine = GetLCDHeight();
; 1298 : 
; 1299 :     // Limit the scaling to 1/3rd of the original size
; 1300 :     if ((dwHorzScale > 3072) && (dwSrcWidth > dwPixelsPerLine))

  00344	e3a02c01	 mov         r2, #1, 24
  00348	e382000e	 orr         r0, r2, #0xE
  0034c	e3530000	 cmp         r3, #0
  00350	e59d2000	 ldr         r2, [sp]
  00354	135300b4	 cmpne       r3, #0xB4
  00358	159414b0	 ldrne       r1, [r4, #0x4B0]
  0035c	059414ac	 ldreq       r1, [r4, #0x4AC]
  00360	e3520b03	 cmp         r2, #3, 22
  00364	e58d004c	 str         r0, [sp, #0x4C]
  00368	9a000015	 bls         |$LN88@SetScaling|
  0036c	e1550001	 cmp         r5, r1
  00370	9a000013	 bls         |$LN88@SetScaling|

; 1301 :     {
; 1302 :         // Max scale factor feasible is 1/3rd
; 1303 :         // Based on 1/3rd scale factor, increase the dest rect size
; 1304 :         DWORD dstWidthOffset = 0;
; 1305 :         DWORD newDstWidth    = 0;
; 1306 :         newDstWidth    = dwSrcWidth/3;

  00374	e59f3d74	 ldr         r3, [pc, #0xD74]

; 1307 : 
; 1308 :         // Make sure to set the dst width >= 1/3 x srcwidth
; 1309 :         if (dwSrcWidth%3 != 0)
; 1310 :             newDstWidth += 1;
; 1311 :             
; 1312 :         // Check the size of the new dst width calculated.
; 1313 :         newDstWidth    = (newDstWidth > GetLCDWidth())? GetLCDWidth() : newDstWidth ;
; 1314 : 
; 1315 :         // Divide it equally to the left and right side of the dst window
; 1316 :         dstWidthOffset = (newDstWidth-dwDestWidth)/2;
; 1317 :           
; 1318 :         // adjust the Dest rect based on the new scale factor
; 1319 :         if ((DWORD)pDestRect->left > dstWidthOffset)

  00378	e5990000	 ldr         r0, [r9]
  0037c	e0832395	 umull       r2, r3, r5, r3
  00380	e1a010a3	 mov         r1, r3, lsr #1
  00384	e0813081	 add         r3, r1, r1, lsl #1
  00388	e0553003	 subs        r3, r5, r3
  0038c	e59d5004	 ldr         r5, [sp, #4]
  00390	12811001	 addne       r1, r1, #1
  00394	e59534ac	 ldr         r3, [r5, #0x4AC]
  00398	e1510003	 cmp         r1, r3
  0039c	81a01003	 movhi       r1, r3
  003a0	e0413007	 sub         r3, r1, r7
  003a4	e1a020a3	 mov         r2, r3, lsr #1
  003a8	e1500002	 cmp         r0, r2

; 1320 :             pDestRect->left  -= dstWidthOffset;

  003ac	80403002	 subhi       r3, r0, r2
  003b0	85893000	 strhi       r3, [r9]

; 1321 : 
; 1322 :         pDestRect->right += dstWidthOffset;

  003b4	e5993008	 ldr         r3, [r9, #8]
  003b8	e0833002	 add         r3, r3, r2
  003bc	e5893008	 str         r3, [r9, #8]

; 1323 :     }
; 1324 :     else

  003c0	ea000031	 b           |$LN79@SetScaling|
  003c4		 |$LN88@SetScaling|

; 1325 :     {
; 1326 :         //  If playback is rotated and scaled and color converted, adjust clipping to avoid sync lost
; 1327 :         if( (eRotation == OMAP_DSS_ROTATION_90)||(eRotation == OMAP_DSS_ROTATION_270) )

  003c4	e353005a	 cmp         r3, #0x5A
  003c8	0a000001	 beq         |$LN83@SetScaling|
  003cc	e1530000	 cmp         r3, r0
  003d0	1a00002c	 bne         |$LN215@SetScaling|
  003d4		 |$LN83@SetScaling|

; 1328 :         {
; 1329 :             if( (pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_YUV2) ||
; 1330 :                 (pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_UYVY) )

  003d4	e5963004	 ldr         r3, [r6, #4]
  003d8	e353000a	 cmp         r3, #0xA
  003dc	0a000001	 beq         |$LN81@SetScaling|
  003e0	e353000b	 cmp         r3, #0xB
  003e4	1a000027	 bne         |$LN215@SetScaling|
  003e8		 |$LN81@SetScaling|

; 1331 :             {
; 1332 :                 //  Flag special case of YUV rotated
; 1333 :                 bYUVRotated = TRUE;
; 1334 :                 
; 1335 :                 //  Rotated scaling with color conversion in these bounds has issues
; 1336 :                 if( dwHorzScale > 1536 && dwHorzScale < 2048 )            

  003e8	e3a03c06	 mov         r3, #6, 24
  003ec	e3834001	 orr         r4, r3, #1
  003f0	e3a01c01	 mov         r1, #1, 24
  003f4	e0423004	 sub         r3, r2, r4
  003f8	e38110fe	 orr         r1, r1, #0xFE
  003fc	e1530001	 cmp         r3, r1
  00400	e3a03001	 mov         r3, #1
  00404	e58d3048	 str         r3, [sp, #0x48]
  00408	e58d1000	 str         r1, [sp]
  0040c	8a00000c	 bhi         |$LN80@SetScaling|

; 1337 :                 {
; 1338 :                     DWORD   dwOldSrcWidth = dwSrcWidth;
; 1339 :                     
; 1340 :                     //  Clip src width  
; 1341 :                     dwSrcWidth = dwSrcWidth * 1536 / dwHorzScale;

  00410	e0853085	 add         r3, r5, r5, lsl #1
  00414	e1a01483	 mov         r1, r3, lsl #9
  00418	e1a00002	 mov         r0, r2
  0041c	eb000000	 bl          __rt_udiv

; 1342 :                     dwSrcWidth = ((dwSrcWidth % 2) == 0) ? dwSrcWidth : dwSrcWidth - 1;

  00420	e3100001	 tst         r0, #1

; 1343 :                     privSrcRect.left  = privSrcRect.left + (dwOldSrcWidth - dwSrcWidth)/2;

  00424	e59d2020	 ldr         r2, [sp, #0x20]
  00428	12400001	 subne       r0, r0, #1
  0042c	e0453000	 sub         r3, r5, r0
  00430	e08230a3	 add         r3, r2, r3, lsr #1
  00434	e58d3034	 str         r3, [sp, #0x34]

; 1344 :                     privSrcRect.right = privSrcRect.left + dwSrcWidth;

  00438	e0833000	 add         r3, r3, r0
  0043c	e59d1000	 ldr         r1, [sp]
  00440	e58d303c	 str         r3, [sp, #0x3C]
  00444		 |$LN80@SetScaling|

; 1345 :                 }
; 1346 :             
; 1347 :                 //  Rotated scaling with color conversion in these bounds has issues
; 1348 :                 if( dwVertScale > 1536 && dwVertScale < 2048 )            

  00444	e59d2018	 ldr         r2, [sp, #0x18]
  00448	e0423004	 sub         r3, r2, r4
  0044c	e1530001	 cmp         r3, r1
  00450	8a00000c	 bhi         |$LN215@SetScaling|

; 1349 :                 {
; 1350 :                     DWORD   dwOldSrcHeight = dwSrcHeight;
; 1351 :                     
; 1352 :                     //  Clip src height  
; 1353 :                     dwSrcHeight = dwSrcHeight * 1536 / dwVertScale;

  00454	e59d400c	 ldr         r4, [sp, #0xC]
  00458	e1a00002	 mov         r0, r2
  0045c	e0843084	 add         r3, r4, r4, lsl #1
  00460	e1a01483	 mov         r1, r3, lsl #9
  00464	eb000000	 bl          __rt_udiv

; 1354 :                     dwSrcHeight = ((dwSrcHeight % 2) == 0) ? dwSrcHeight : dwSrcHeight - 1;

  00468	e3100001	 tst         r0, #1

; 1355 :                     privSrcRect.top    = privSrcRect.top + (dwOldSrcHeight - dwSrcHeight)/2;

  0046c	e59d2008	 ldr         r2, [sp, #8]
  00470	12400001	 subne       r0, r0, #1
  00474	e0443000	 sub         r3, r4, r0
  00478	e08230a3	 add         r3, r2, r3, lsr #1
  0047c	e58d3038	 str         r3, [sp, #0x38]

; 1356 :                     privSrcRect.bottom = privSrcRect.top + dwSrcHeight;

  00480	e0833000	 add         r3, r3, r0
  00484	e58d3040	 str         r3, [sp, #0x40]
  00488		 |$LN215@SetScaling|

; 1883 :         }
; 1884 :         else
; 1885 :         {
; 1886 :             //No scale
; 1887 :         }
; 1888 : 
; 1889 :         //  Accum0/1 controls the scaler phase for the even/odd fields
; 1890 :         if (m_dwTVFilterLevel == OMAP_TV_FILTER_LEVEL_OFF)

  00488	e59d5004	 ldr         r5, [sp, #4]

; 1356 :                     privSrcRect.bottom = privSrcRect.top + dwSrcHeight;

  0048c		 |$LN79@SetScaling|

; 1357 :                 }
; 1358 :             }
; 1359 :         }
; 1360 :     }
; 1361 : 
; 1362 :     if (!bUseResizer)

  0048c	e59d301c	 ldr         r3, [sp, #0x1C]

; 1363 :         //  Set the clipping region for the surface
; 1364 :         g_rgPipelineMapping[ePipeline].pSurface->SetClipping( &privSrcRect);

  00490	e59d2024	 ldr         r2, [sp, #0x24]
  00494	e3530000	 cmp         r3, #0
  00498	e59f3c34	 ldr         r3, [pc, #0xC34]
  0049c	e0834282	 add         r4, r3, r2, lsl #5
  004a0	e5940008	 ldr         r0, [r4, #8]
  004a4	1a000005	 bne         |$LN78@SetScaling|
  004a8	e5903000	 ldr         r3, [r0]
  004ac	e28d1034	 add         r1, sp, #0x34
  004b0	e5933020	 ldr         r3, [r3, #0x20]
  004b4	e1a0e00f	 mov         lr, pc
  004b8	e12fff13	 bx          r3

; 1365 :     else

  004bc	ea000011	 b           |$LN77@SetScaling|
  004c0		 |$LN78@SetScaling|

; 1366 :     {
; 1367 :         RECT rszRect;
; 1368 :         rszRect.top = 0;
; 1369 :         rszRect.left = 0;
; 1370 :         rszRect.bottom = rszRect.top + dwDestHeight;
; 1371 :         rszRect.right = rszRect.left + dwDestWidth;        
; 1372 :         g_rgPipelineMapping[ePipeline].pSurface->SetClipping( pSrcRect);

  004c0	e3a03000	 mov         r3, #0
  004c4	e3a02000	 mov         r2, #0
  004c8	e58d3068	 str         r3, [sp, #0x68]
  004cc	e58d2064	 str         r2, [sp, #0x64]
  004d0	e58db070	 str         r11, [sp, #0x70]
  004d4	e58d706c	 str         r7, [sp, #0x6C]
  004d8	e5903000	 ldr         r3, [r0]
  004dc	e1a0100a	 mov         r1, r10
  004e0	e5933020	 ldr         r3, [r3, #0x20]
  004e4	e1a0e00f	 mov         lr, pc
  004e8	e12fff13	 bx          r3

; 1373 :         g_rgPipelineMapping[ePipeline].pSurface->OmapAssocSurface()->SetClipping( &rszRect );

  004ec	e5943008	 ldr         r3, [r4, #8]
  004f0	e28d1064	 add         r1, sp, #0x64
  004f4	e59300a0	 ldr         r0, [r3, #0xA0]
  004f8	e5903000	 ldr         r3, [r0]
  004fc	e5933020	 ldr         r3, [r3, #0x20]
  00500	e1a0e00f	 mov         lr, pc
  00504	e12fff13	 bx          r3
  00508		 |$LN77@SetScaling|

; 1374 :     }
; 1375 : 
; 1376 :     //  Compute src and dest width/height
; 1377 :     dwSrcWidth  = privSrcRect.right - privSrcRect.left;
; 1378 :     dwSrcHeight = privSrcRect.bottom - privSrcRect.top;
; 1379 : 
; 1380 :     dwDestWidth  = pDestRect->right - pDestRect->left;
; 1381 :     dwDestHeight = pDestRect->bottom - pDestRect->top;
; 1382 : 
; 1383 :     //  Swap src width/height based on pipeline rotation angle
; 1384 :     switch( g_rgPipelineMapping[ePipeline].eRotation )

  00508	e594400c	 ldr         r4, [r4, #0xC]
  0050c	e59d0038	 ldr         r0, [sp, #0x38]
  00510	e59d1034	 ldr         r1, [sp, #0x34]
  00514	e58d4000	 str         r4, [sp]
  00518	e59d4040	 ldr         r4, [sp, #0x40]
  0051c	e59d703c	 ldr         r7, [sp, #0x3C]
  00520	e599e004	 ldr         lr, [r9, #4]
  00524	e599300c	 ldr         r3, [r9, #0xC]
  00528	e5992008	 ldr         r2, [r9, #8]
  0052c	e0444000	 sub         r4, r4, r0
  00530	e5990000	 ldr         r0, [r9]
  00534	e047b001	 sub         r11, r7, r1
  00538	e043700e	 sub         r7, r3, lr
  0053c	e59d3000	 ldr         r3, [sp]
  00540	e0421000	 sub         r1, r2, r0
  00544	e59d204c	 ldr         r2, [sp, #0x4C]
  00548	e58d100c	 str         r1, [sp, #0xC]
  0054c	e58de02c	 str         lr, [sp, #0x2C]
  00550	e58d401c	 str         r4, [sp, #0x1C]
  00554	e58d7018	 str         r7, [sp, #0x18]
  00558	e353005a	 cmp         r3, #0x5A
  0055c	0a000001	 beq         |$LN74@SetScaling|
  00560	e1530002	 cmp         r3, r2
  00564	1a000003	 bne         |$LN75@SetScaling|
  00568		 |$LN74@SetScaling|

; 1385 :     {
; 1386 :         case OMAP_DSS_ROTATION_90:
; 1387 :             //  Settings for rotation angle 90
; 1388 :             i = dwSrcWidth;

  00568	e1a0300b	 mov         r3, r11

; 1389 :             dwSrcWidth = dwSrcHeight;

  0056c	e1a0b004	 mov         r11, r4

; 1390 :             dwSrcHeight = i;

  00570	e1a04003	 mov         r4, r3
  00574	e58d401c	 str         r4, [sp, #0x1C]
  00578		 |$LN75@SetScaling|

; 1391 :             break;
; 1392 : 
; 1393 :         case OMAP_DSS_ROTATION_270:
; 1394 :             //  Settings for rotation angle 270
; 1395 :             i = dwSrcWidth;
; 1396 :             dwSrcWidth = dwSrcHeight;
; 1397 :             dwSrcHeight = i;
; 1398 :             break;
; 1399 :     }
; 1400 : 
; 1401 :     //  Default origin
; 1402 :     dwX = pDestRect->left;
; 1403 :     dwY = pDestRect->top;
; 1404 : 
; 1405 : 
; 1406 :     //------------------------------------------------------------------------------
; 1407 :     //  Configure the scaling of the pipeline for LCD display
; 1408 :     //
; 1409 :     if( g_rgPipelineMapping[ePipeline].eDestination == OMAP_DSS_DESTINATION_LCD )

  00578	e59fab54	 ldr         r10, [pc, #0xB54]
  0057c	e59d9024	 ldr         r9, [sp, #0x24]
  00580	e58d0020	 str         r0, [sp, #0x20]
  00584	e08a3289	 add         r3, r10, r9, lsl #5
  00588	e5933004	 ldr         r3, [r3, #4]
  0058c	e59d905c	 ldr         r9, [sp, #0x5C]
  00590	e59da050	 ldr         r10, [sp, #0x50]
  00594	e3530000	 cmp         r3, #0
  00598	1a0000ea	 bne         |$LN72@SetScaling|

; 1410 :     {
; 1411 :         //  Compute new origin and swap destination width/height based on GFX pipeline rotation angle
; 1412 :         switch( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].eRotation )

  0059c	e59f3b30	 ldr         r3, [pc, #0xB30]
  005a0	e593300c	 ldr         r3, [r3, #0xC]
  005a4	e3530000	 cmp         r3, #0
  005a8	0a000022	 beq         |$LN69@SetScaling|
  005ac	e353005a	 cmp         r3, #0x5A
  005b0	0a000015	 beq         |$LN68@SetScaling|
  005b4	e35300b4	 cmp         r3, #0xB4
  005b8	0a00000b	 beq         |$LN67@SetScaling|
  005bc	e1530002	 cmp         r3, r2
  005c0	1a00001f	 bne         |$LN70@SetScaling|

; 1435 : 
; 1436 :             case OMAP_DSS_ROTATION_270:
; 1437 :                 //  Settings for rotation angle 270
; 1438 :                 dwX = GetLCDWidth() - dwDestHeight - pDestRect->top;

  005c4	e59534ac	 ldr         r3, [r5, #0x4AC]

; 1439 :                 dwY = pDestRect->left;
; 1440 : 
; 1441 :                 i = dwDestWidth;

  005c8	e1a02001	 mov         r2, r1

; 1442 :                 dwDestWidth = dwDestHeight;

  005cc	e1a01007	 mov         r1, r7
  005d0	e043300e	 sub         r3, r3, lr
  005d4	e0433007	 sub         r3, r3, r7

; 1443 :                 dwDestHeight = i;

  005d8	e1a07002	 mov         r7, r2
  005dc	e58d7018	 str         r7, [sp, #0x18]
  005e0	e58d100c	 str         r1, [sp, #0xC]
  005e4	e58d002c	 str         r0, [sp, #0x2C]

; 1444 :                 break;

  005e8	ea000014	 b           |$LN221@SetScaling|
  005ec		 |$LN67@SetScaling|

; 1429 : 
; 1430 :             case OMAP_DSS_ROTATION_180:
; 1431 :                 //  Settings for rotation angle 180
; 1432 :                 dwX = GetLCDWidth() - dwDestWidth - pDestRect->left;
; 1433 :                 dwY = GetLCDHeight() - dwDestHeight - pDestRect->top;

  005ec	e59524b0	 ldr         r2, [r5, #0x4B0]
  005f0	e59534ac	 ldr         r3, [r5, #0x4AC]
  005f4	e042200e	 sub         r2, r2, lr
  005f8	e0428007	 sub         r8, r2, r7
  005fc	e0433000	 sub         r3, r3, r0
  00600	e58d802c	 str         r8, [sp, #0x2C]
  00604	e0433001	 sub         r3, r3, r1

; 1434 :                 break;

  00608	ea00000c	 b           |$LN221@SetScaling|
  0060c		 |$LN68@SetScaling|

; 1418 :                 break;
; 1419 : 
; 1420 :             case OMAP_DSS_ROTATION_90:
; 1421 :                 //  Settings for rotation angle 90
; 1422 :                 dwX = pDestRect->top;
; 1423 :                 dwY = GetLCDHeight() - dwDestWidth - pDestRect->left;

  0060c	e59534b0	 ldr         r3, [r5, #0x4B0]

; 1424 : 
; 1425 :                 i = dwDestWidth;

  00610	e1a02001	 mov         r2, r1
  00614	e58de020	 str         lr, [sp, #0x20]
  00618	e0433000	 sub         r3, r3, r0
  0061c	e0433001	 sub         r3, r3, r1

; 1426 :                 dwDestWidth = dwDestHeight;

  00620	e1a01007	 mov         r1, r7

; 1427 :                 dwDestHeight = i;

  00624	e1a07002	 mov         r7, r2
  00628	e58d7018	 str         r7, [sp, #0x18]
  0062c	e58d302c	 str         r3, [sp, #0x2C]
  00630	e58d100c	 str         r1, [sp, #0xC]

; 1428 :                 break;

  00634	ea000002	 b           |$LN70@SetScaling|
  00638		 |$LN69@SetScaling|

; 1413 :         {
; 1414 :             case OMAP_DSS_ROTATION_0:
; 1415 :                 //  Settings for rotation angle 0
; 1416 :                 dwX = pDestRect->left;

  00638	e1a03000	 mov         r3, r0

; 1417 :                 dwY = pDestRect->top;

  0063c	e58de02c	 str         lr, [sp, #0x2C]
  00640		 |$LN221@SetScaling|

; 1413 :         {
; 1414 :             case OMAP_DSS_ROTATION_0:
; 1415 :                 //  Settings for rotation angle 0
; 1416 :                 dwX = pDestRect->left;

  00640	e58d3020	 str         r3, [sp, #0x20]

; 1417 :                 dwY = pDestRect->top;

  00644		 |$LN70@SetScaling|

; 1445 :         }
; 1446 :     
; 1447 : 
; 1448 :         //  Compute horizontal and vertical scaling factors
; 1449 :         dwHorzScale = 1024 * dwSrcWidth / dwDestWidth;

  00644	e1a00001	 mov         r0, r1
  00648	e1a0150b	 mov         r1, r11, lsl #10
  0064c	eb000000	 bl          __rt_udiv
  00650	e1a08000	 mov         r8, r0

; 1450 :         dwVertScale = 1024 * dwSrcHeight / dwDestHeight;

  00654	e1a00007	 mov         r0, r7
  00658	e1a01504	 mov         r1, r4, lsl #10
  0065c	eb000000	 bl          __rt_udiv

; 1451 : 
; 1452 :         //  Determine if scaling is within HW scaling capabilities
; 1453 :         //  If not, use surface scaling factor to decimate the source surface
; 1454 :         //  by 2, 4 or 8
; 1455 :         if( bYUVRotated )

  00660	e59d3048	 ldr         r3, [sp, #0x48]
  00664	e3530000	 cmp         r3, #0
  00668	0a000012	 beq         |$LN65@SetScaling|

; 1456 :         {
; 1457 :             if( dwHorzScale >= 2048 )

  0066c	e3580b02	 cmp         r8, #2, 22

; 1458 :                 dwHorzDecimation = 2;

  00670	23a02002	 movcs       r2, #2
  00674	258d2028	 strcs       r2, [sp, #0x28]

; 1479 :                 dwHorzDecimation = 2;

  00678	33a02001	 movcc       r2, #1
  0067c	e3580a01	 cmp         r8, #1, 20
  00680	23a02004	 movcs       r2, #4
  00684	258d2028	 strcs       r2, [sp, #0x28]
  00688	e3580a02	 cmp         r8, #2, 20
  0068c	23a02008	 movcs       r2, #8
  00690	258d2028	 strcs       r2, [sp, #0x28]
  00694	e3500b02	 cmp         r0, #2, 22
  00698	23a03002	 movcs       r3, #2
  0069c	258d3014	 strcs       r3, [sp, #0x14]
  006a0	e3500a01	 cmp         r0, #1, 20
  006a4	23a03004	 movcs       r3, #4
  006a8	258d3014	 strcs       r3, [sp, #0x14]
  006ac	e3500a02	 cmp         r0, #2, 20
  006b0	3a000011	 bcc         |$LN53@SetScaling|

; 1459 : 
; 1460 :             if( dwHorzScale >= 4096 )
; 1461 :                 dwHorzDecimation = 4;
; 1462 : 
; 1463 :             if( dwHorzScale >= 8192 )
; 1464 :                 dwHorzDecimation = 8;
; 1465 : 
; 1466 : 
; 1467 :             if( dwVertScale >= 2048 )
; 1468 :                 dwVertDecimation = 2;
; 1469 : 
; 1470 :             if( dwVertScale >= 4096 )
; 1471 :                 dwVertDecimation = 4;
; 1472 : 
; 1473 :             if( dwVertScale >= 8192 )
; 1474 :                 dwVertDecimation = 8;
; 1475 :         }
; 1476 :         else

  006b4	ea00000e	 b           |$LN222@SetScaling|
  006b8		 |$LN65@SetScaling|

; 1477 :         {
; 1478 :             if( dwHorzScale > 4096 )

  006b8	e3580a01	 cmp         r8, #1, 20

; 1479 :                 dwHorzDecimation = 2;

  006bc	83a02002	 movhi       r2, #2
  006c0	858d2028	 strhi       r2, [sp, #0x28]

; 1480 : 
; 1481 :             if( dwHorzScale > 8192 )
; 1482 :                 dwHorzDecimation = 4;

  006c4	93a02001	 movls       r2, #1
  006c8	e3580a02	 cmp         r8, #2, 20
  006cc	83a02004	 movhi       r2, #4
  006d0	858d2028	 strhi       r2, [sp, #0x28]

; 1483 : 
; 1484 : 
; 1485 :             if( dwVertScale > 2048 )

  006d4	e3500b02	 cmp         r0, #2, 22

; 1486 :                 dwVertDecimation = 2;

  006d8	83a03002	 movhi       r3, #2
  006dc	858d3014	 strhi       r3, [sp, #0x14]

; 1487 : 
; 1488 :             if( dwVertScale > 4096 )

  006e0	e3500a01	 cmp         r0, #1, 20

; 1489 :                 dwVertDecimation = 4;

  006e4	83a03004	 movhi       r3, #4
  006e8	858d3014	 strhi       r3, [sp, #0x14]

; 1490 : 
; 1491 :             if( dwVertScale > 8192 )

  006ec	e3500a02	 cmp         r0, #2, 20
  006f0	9a000001	 bls         |$LN53@SetScaling|
  006f4		 |$LN222@SetScaling|

; 1492 :                 dwVertDecimation = 8;

  006f4	e3a03008	 mov         r3, #8
  006f8	e58d3014	 str         r3, [sp, #0x14]
  006fc		 |$LN53@SetScaling|

; 1493 :         }
; 1494 : 
; 1495 :             
; 1496 :         //  Adjust the HW scaling factors by the decimation factor      
; 1497 :         dwHorzScale = 1024 * (dwSrcWidth/dwHorzDecimation) / dwDestWidth;    

  006fc	e1a00002	 mov         r0, r2
  00700	e1a0100b	 mov         r1, r11
  00704	eb000000	 bl          __rt_udiv
  00708	e59d800c	 ldr         r8, [sp, #0xC]
  0070c	e1a0b000	 mov         r11, r0
  00710	e1a0150b	 mov         r1, r11, lsl #10
  00714	e1a00008	 mov         r0, r8
  00718	eb000000	 bl          __rt_udiv
  0071c	e58d0008	 str         r0, [sp, #8]

; 1498 :         dwVertScale = 1024 * (dwSrcHeight/dwVertDecimation) / dwDestHeight;    

  00720	e59d0014	 ldr         r0, [sp, #0x14]
  00724	e1a01004	 mov         r1, r4
  00728	eb000000	 bl          __rt_udiv
  0072c	e1a04000	 mov         r4, r0
  00730	e1a01504	 mov         r1, r4, lsl #10
  00734	e1a00007	 mov         r0, r7
  00738	e58d401c	 str         r4, [sp, #0x1C]
  0073c	eb000000	 bl          __rt_udiv

; 1499 :         
; 1500 :         
; 1501 :         //  Set the decimation factors for the surface 
; 1502 :         switch( eRotation )

  00740	e59d3030	 ldr         r3, [sp, #0x30]
  00744	e1a02000	 mov         r2, r0
  00748	e58d2010	 str         r2, [sp, #0x10]
  0074c	e3530000	 cmp         r3, #0
  00750	0a000013	 beq         |$LN50@SetScaling|
  00754	e353005a	 cmp         r3, #0x5A
  00758	0a000004	 beq         |$LN49@SetScaling|
  0075c	e35300b4	 cmp         r3, #0xB4
  00760	0a00000f	 beq         |$LN50@SetScaling|
  00764	e59d104c	 ldr         r1, [sp, #0x4C]
  00768	e1530001	 cmp         r3, r1
  0076c	1a000019	 bne         |$LN218@SetScaling|
  00770		 |$LN49@SetScaling|

; 1509 :                 break;
; 1510 : 
; 1511 :             case OMAP_DSS_ROTATION_90:
; 1512 :             case OMAP_DSS_ROTATION_270:            
; 1513 :                 //  Rotated orientation
; 1514 :                 pSurface->SetHorizontalScaling( dwVertDecimation );

  00770	e5963000	 ldr         r3, [r6]
  00774	e59d1014	 ldr         r1, [sp, #0x14]
  00778	e1a00006	 mov         r0, r6
  0077c	e5933030	 ldr         r3, [r3, #0x30]
  00780	e1a0e00f	 mov         lr, pc
  00784	e12fff13	 bx          r3

; 1515 :                 pSurface->SetVerticalScaling( dwHorzDecimation );

  00788	e5963000	 ldr         r3, [r6]
  0078c	e59d1028	 ldr         r1, [sp, #0x28]
  00790	e1a00006	 mov         r0, r6
  00794	e5933034	 ldr         r3, [r3, #0x34]
  00798	e1a0e00f	 mov         lr, pc
  0079c	e12fff13	 bx          r3

; 1516 :                 break;

  007a0	ea00000b	 b           |$LN226@SetScaling|
  007a4		 |$LN50@SetScaling|

; 1503 :         {
; 1504 :             case OMAP_DSS_ROTATION_0:
; 1505 :             case OMAP_DSS_ROTATION_180:            
; 1506 :                 //  Standard orientation
; 1507 :                 pSurface->SetHorizontalScaling( dwHorzDecimation );

  007a4	e5963000	 ldr         r3, [r6]
  007a8	e59d1028	 ldr         r1, [sp, #0x28]
  007ac	e1a00006	 mov         r0, r6
  007b0	e5933030	 ldr         r3, [r3, #0x30]
  007b4	e1a0e00f	 mov         lr, pc
  007b8	e12fff13	 bx          r3

; 1508 :                 pSurface->SetVerticalScaling( dwVertDecimation );

  007bc	e5963000	 ldr         r3, [r6]
  007c0	e59d1014	 ldr         r1, [sp, #0x14]
  007c4	e1a00006	 mov         r0, r6
  007c8	e5933034	 ldr         r3, [r3, #0x34]
  007cc	e1a0e00f	 mov         lr, pc
  007d0	e12fff13	 bx          r3
  007d4		 |$LN226@SetScaling|

; 1557 :             dwVertScale = 1024 * dwSrcHeight / dwDestHeight;

  007d4	e59d2010	 ldr         r2, [sp, #0x10]
  007d8		 |$LN218@SetScaling|

; 1517 :         }
; 1518 :         
; 1519 :         //  Adjust the source width and height by the decimation factor
; 1520 :         dwSrcWidth  = dwSrcWidth / dwHorzDecimation;
; 1521 :         dwSrcHeight = dwSrcHeight / dwVertDecimation;
; 1522 : 
; 1523 : 
; 1524 :         //  If YUV rotated, check for any odd width or height values due to decimation
; 1525 :         if( bYUVRotated )

  007d8	e59d3048	 ldr         r3, [sp, #0x48]
  007dc	e59d1040	 ldr         r1, [sp, #0x40]
  007e0	e59d003c	 ldr         r0, [sp, #0x3C]
  007e4	e3530000	 cmp         r3, #0
  007e8	0a000037	 beq         |$LN48@SetScaling|

; 1526 :         {
; 1527 :             if( (dwSrcWidth % 2) == 1 )

  007ec	e20b3001	 and         r3, r11, #1
  007f0	e3530001	 cmp         r3, #1

; 1528 :             {
; 1529 :                 dwSrcWidth -= 1;
; 1530 :                 
; 1531 :                 //  Adjust clipping; note rotation means adjust clipping height here
; 1532 :                 privSrcRect.bottom -= dwHorzDecimation;

  007f4	059d3028	 ldreq       r3, [sp, #0x28]
  007f8	024bb001	 subeq       r11, r11, #1

; 1533 :             }
; 1534 : 
; 1535 :             if( (dwSrcHeight % 2) == 1 )
; 1536 :             {
; 1537 :                 dwSrcHeight -= 1;
; 1538 : 
; 1539 :                 //  Adjust clipping; note rotation means adjust clipping width here
; 1540 :                 privSrcRect.right -= dwVertDecimation;
; 1541 :             }
; 1542 : 
; 1543 :             //  Set the clipping region for the surface
; 1544 :             g_rgPipelineMapping[ePipeline].pSurface->SetClipping( &privSrcRect );

  007fc	e59f28d0	 ldr         r2, [pc, #0x8D0]
  00800	00413003	 subeq       r3, r1, r3
  00804	058d3040	 streq       r3, [sp, #0x40]
  00808	e2043001	 and         r3, r4, #1
  0080c	e3530001	 cmp         r3, #1
  00810	059d3014	 ldreq       r3, [sp, #0x14]
  00814	e59d1024	 ldr         r1, [sp, #0x24]
  00818	02444001	 subeq       r4, r4, #1
  0081c	00403003	 subeq       r3, r0, r3
  00820	058d303c	 streq       r3, [sp, #0x3C]
  00824	e0823281	 add         r3, r2, r1, lsl #5
  00828	e5930008	 ldr         r0, [r3, #8]
  0082c	058d401c	 streq       r4, [sp, #0x1C]
  00830	e28d1034	 add         r1, sp, #0x34
  00834	e5903000	 ldr         r3, [r0]
  00838	e5933020	 ldr         r3, [r3, #0x20]
  0083c	e1a0e00f	 mov         lr, pc
  00840	e12fff13	 bx          r3

; 1545 :             if (g_rgPipelineMapping[ePipeline].pSurface->OmapAssocSurface())

  00844	e59f2888	 ldr         r2, [pc, #0x888]
  00848	e59d1024	 ldr         r1, [sp, #0x24]
  0084c	e0823281	 add         r3, r2, r1, lsl #5
  00850	e593e008	 ldr         lr, [r3, #8]
  00854	e59e30a0	 ldr         r3, [lr, #0xA0]
  00858	e3530000	 cmp         r3, #0
  0085c	0a000011	 beq         |$LN45@SetScaling|

; 1546 :             {
; 1547 :                 RECT rszRect;
; 1548 :                 rszRect.top = 0;
; 1549 :                 rszRect.left = 0;
; 1550 :                 rszRect.bottom = rszRect.top + (pDestRect->bottom - pDestRect->top);

  00860	e599100c	 ldr         r1, [r9, #0xC]
  00864	e5993004	 ldr         r3, [r9, #4]

; 1551 :                 rszRect.right = rszRect.left + (pDestRect->right - pDestRect->left);                            

  00868	e5990008	 ldr         r0, [r9, #8]
  0086c	e5992000	 ldr         r2, [r9]
  00870	e0411003	 sub         r1, r1, r3
  00874	e58d1070	 str         r1, [sp, #0x70]
  00878	e0403002	 sub         r3, r0, r2
  0087c	e58d306c	 str         r3, [sp, #0x6C]
  00880	e3a03000	 mov         r3, #0
  00884	e3a02000	 mov         r2, #0
  00888	e58d3068	 str         r3, [sp, #0x68]
  0088c	e58d2064	 str         r2, [sp, #0x64]

; 1552 :                 g_rgPipelineMapping[ePipeline].pSurface->OmapAssocSurface()->SetClipping( &rszRect );

  00890	e59e00a0	 ldr         r0, [lr, #0xA0]
  00894	e28d1064	 add         r1, sp, #0x64
  00898	e5903000	 ldr         r3, [r0]
  0089c	e5933020	 ldr         r3, [r3, #0x20]
  008a0	e1a0e00f	 mov         lr, pc
  008a4	e12fff13	 bx          r3
  008a8		 |$LN45@SetScaling|

; 1553 :             }                
; 1554 : 
; 1555 :             //  Recalculate the scale factors to account for adjustments made
; 1556 :             dwHorzScale = 1024 * dwSrcWidth / dwDestWidth;

  008a8	e1a00008	 mov         r0, r8
  008ac	e1a0150b	 mov         r1, r11, lsl #10
  008b0	eb000000	 bl          __rt_udiv
  008b4	e58d0008	 str         r0, [sp, #8]

; 1557 :             dwVertScale = 1024 * dwSrcHeight / dwDestHeight;

  008b8	e1a00007	 mov         r0, r7
  008bc	e1a01504	 mov         r1, r4, lsl #10
  008c0	eb000000	 bl          __rt_udiv
  008c4	e1a02000	 mov         r2, r0
  008c8	e58d2010	 str         r2, [sp, #0x10]
  008cc		 |$LN48@SetScaling|

; 1558 :         } 
; 1559 : 
; 1560 : 
; 1561 :         //  Based on scaling factor, determine which coeffs to use and if to enable scaling
; 1562 :         dwScaleEnable |= (dwHorzScale == 1024) ? 0 : DISPC_VID_ATTR_VIDRESIZE_HORIZONTAL;

  008cc	e59d4008	 ldr         r4, [sp, #8]
  008d0	e3540b01	 cmp         r4, #1, 22
  008d4	03a01000	 moveq       r1, #0
  008d8	13a01020	 movne       r1, #0x20

; 1563 :         dwScaleEnable |= (dwVertScale == 1024) ? 0 : DISPC_VID_ATTR_VIDRESIZE_VERTICAL;

  008dc	e3520b01	 cmp         r2, #1, 22
  008e0	03a03000	 moveq       r3, #0
  008e4	13a03040	 movne       r3, #0x40

; 1564 : 
; 1565 : 
; 1566 :         //  Horizontal scaling
; 1567 :         if( dwHorzScale > 1024 )

  008e8	e3540b01	 cmp         r4, #1, 22
  008ec	e1838001	 orr         r8, r3, r1

; 1568 :         {
; 1569 :             //  Use down-sampling horizontal coeffs
; 1570 :             dwScaleEnable |= DISPC_VID_ATTR_VIDHRESIZE_CONF_DOWN;
; 1571 :             pHorizCoeffs = g_dwScalingCoeff_Horiz_Down;

  008f0	859f37f4	 ldrhi       r3, [pc, #0x7F4]

; 1572 :         }
; 1573 :         else
; 1574 :         {
; 1575 :             //  Use up-sampling horizontal coeffs
; 1576 :             dwScaleEnable |= DISPC_VID_ATTR_VIDHRESIZE_CONF_UP;
; 1577 :             pHorizCoeffs = g_dwScalingCoeff_Horiz_Up;

  008f4	959f37ec	 ldrls       r3, [pc, #0x7EC]
  008f8	83888080	 orrhi       r8, r8, #0x80

; 1578 :         }
; 1579 : 
; 1580 : 
; 1581 :         //  Vertical scaling
; 1582 :         if( dwVertScale > 1024 )

  008fc	e3520b01	 cmp         r2, #1, 22
  00900	e58d3000	 str         r3, [sp]

; 1583 :         {
; 1584 :             //  Use 5 tap down-sampling vertical coeffs for scaling between 50% and 25%
; 1585 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_DOWN;
; 1586 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_5;
; 1587 :             dwScaleEnable |= DISPC_VID_ATTR_VIDLINEBUFFERSPLIT;
; 1588 :             pVertCoeffs = g_dwScalingCoeff_Vert_Down_5_Taps;
; 1589 :         } 
; 1590 :         //else if( dwVertScale > 1024 )
; 1591 :         //{
; 1592 :         //    //  Use 3 tap down-sampling vertical coeffs for scaling between 100% and 50%
; 1593 :         //    dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_DOWN;
; 1594 :         //    dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_3;
; 1595 :         //    pVertCoeffs = g_dwScalingCoeff_Vert_Down_3_Taps;
; 1596 :         //}
; 1597 :         else
; 1598 :         {
; 1599 :             //  Use up-sampling vertical coeffs
; 1600 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_UP;
; 1601 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_3;
; 1602 :             pVertCoeffs = g_dwScalingCoeff_Vert_Up_3_Taps;
; 1603 :         }
; 1604 : 
; 1605 :         // For Portrait mode, the Vertical down scale coeff has to be 5 tap to
; 1606 :         // prevent SYNCLOST. so ignore the scale factor and force the 5-tap.
; 1607 :         if ((( eRotation == OMAP_DSS_ROTATION_90 )|| 
; 1608 :             ( eRotation == OMAP_DSS_ROTATION_270 )) && 
; 1609 :             ( pVertCoeffs == g_dwScalingCoeff_Vert_Down_3_Taps ))

  00904	e59d2030	 ldr         r2, [sp, #0x30]
  00908	83a03606	 movhi       r3, #6, 12
  0090c	859f77c8	 ldrhi       r7, [pc, #0x7C8]
  00910	83833c01	 orrhi       r3, r3, #1, 24
  00914	959f77c8	 ldrls       r7, [pc, #0x7C8]
  00918	81888003	 orrhi       r8, r8, r3
  0091c	e352005a	 cmp         r2, #0x5A
  00920	0a000002	 beq         |$LN39@SetScaling|
  00924	e59d304c	 ldr         r3, [sp, #0x4C]
  00928	e1520003	 cmp         r2, r3
  0092c	1a000084	 bne         |$LN17@SetScaling|
  00930		 |$LN39@SetScaling|
  00930	e59f37a8	 ldr         r3, [pc, #0x7A8]
  00934	e1570003	 cmp         r7, r3
  00938	1a000081	 bne         |$LN17@SetScaling|

; 1610 :         {
; 1611 :             //clear existing scale option
; 1612 :             dwScaleEnable &= ~DISPC_VID_ATTR_VIDVERTICALTAPS_3;
; 1613 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_5;
; 1614 :             dwScaleEnable |= DISPC_VID_ATTR_VIDLINEBUFFERSPLIT;
; 1615 :             pVertCoeffs = g_dwScalingCoeff_Vert_Down_5_Taps;

  0093c	e59f7798	 ldr         r7, [pc, #0x798]
  00940	e3888606	 orr         r8, r8, #6, 12

; 1616 :         }
; 1617 :     }

  00944	ea00007e	 b           |$LN17@SetScaling|
  00948		 |$LN72@SetScaling|

; 1618 : 
; 1619 : 
; 1620 :     //------------------------------------------------------------------------------
; 1621 :     //  Configure the scaling of the pipeline for TV display
; 1622 :     //
; 1623 :     else if( g_rgPipelineMapping[ePipeline].eDestination == OMAP_DSS_DESTINATION_TVOUT )

  00948	e3530001	 cmp         r3, #1
  0094c	1a0001d7	 bne         |$cleanUp$38416|

; 1624 :     {
; 1625 :         dwInterlaceCorrection = 2;
; 1626 : 
; 1627 :         //  Half the dest height to enable filtering for TV interlace
; 1628 :         dwDestHeight /= dwInterlaceCorrection;
; 1629 : 
; 1630 : #if 0
; 1631 :         //  Compute horizontal and vertical scaling factors
; 1632 :         dwHorzScale = 1024 * dwSrcWidth / dwDestWidth;
; 1633 :         dwVertScale = 1024 * dwSrcHeight / dwDestHeight;
; 1634 :         
; 1635 :         //  Determine if scaling is within HW scaling capabilities
; 1636 :         //  If not, use surface scaling factor to decimate the source surface
; 1637 :         //  by 2, 4 or 8
; 1638 :         if( dwHorzScale > 4096 )
; 1639 :             dwHorzDecimation = 2;
; 1640 : 
; 1641 :         if( dwHorzScale > 8192 )
; 1642 :             dwHorzDecimation = 4;
; 1643 : 
; 1644 : 
; 1645 :         if( dwVertScale > 2048 )
; 1646 :             dwVertDecimation = 2;
; 1647 : 
; 1648 :         if( dwVertScale > 4096 )
; 1649 :             dwVertDecimation = 4;
; 1650 : 
; 1651 :         if( dwVertScale > 8192 )
; 1652 :             dwVertDecimation = 8;
; 1653 : 
; 1654 :             
; 1655 :         //  Adjust the HW scaling factors by the decimation factor      
; 1656 :         dwHorzScale = 1024 * (dwSrcWidth/dwHorzDecimation) / dwDestWidth;    
; 1657 :         dwVertScale = 1024 * (dwSrcHeight/dwVertDecimation) / dwDestHeight;    
; 1658 :         
; 1659 :         
; 1660 :         //  Set the decimation factors for the surface (always standard orientation for TV out)
; 1661 :         pSurface->SetHorizontalScaling( dwHorzDecimation );
; 1662 :         pSurface->SetVerticalScaling( dwVertDecimation );
; 1663 :         
; 1664 :         //  Adjust the source width and height by the decimation factor
; 1665 :         dwSrcWidth  = dwSrcWidth / dwHorzDecimation;
; 1666 :         dwSrcHeight = dwSrcHeight / dwVertDecimation;
; 1667 : 
; 1668 : 
; 1669 :         //  Based on scaling factor, determine which coeffs to use and if to enable scaling
; 1670 :         dwScaleEnable |= (dwHorzScale == 1024) ? 0 : DISPC_VID_ATTR_VIDRESIZE_HORIZONTAL;
; 1671 :         dwScaleEnable |= (dwVertScale == 1024) ? 0 : DISPC_VID_ATTR_VIDRESIZE_VERTICAL;
; 1672 : 
; 1673 : 
; 1674 :         //  Accum0/1 controls the scaler phase for the even/odd fields
; 1675 :         //  This is affected by the field polarity - bit 17 of VENC_GEN_CTRL_VAL register -
; 1676 :         //  If active low, the ratio is VIDFIRVINC/2, otherwise it's 1024 * dwDestHeight / dwSrcHeight
; 1677 :         dwAccum1 = (1024 * dwDestHeight / dwSrcHeight) << 16; 
; 1678 :     
; 1679 : 
; 1680 :         //  Horizontal scaling
; 1681 :         if( dwHorzScale > 1024 )
; 1682 :         {
; 1683 :             //  Use down-sampling horizontal coeffs
; 1684 :             dwScaleEnable |= DISPC_VID_ATTR_VIDHRESIZE_CONF_DOWN;
; 1685 :             pHorizCoeffs = g_dwScalingCoeff_Horiz_Down;
; 1686 :         }
; 1687 :         else
; 1688 :         {
; 1689 :             //  Use up-sampling horizontal coeffs
; 1690 :             dwScaleEnable |= DISPC_VID_ATTR_VIDHRESIZE_CONF_UP;
; 1691 :             pHorizCoeffs = g_dwScalingCoeff_Horiz_Up;
; 1692 :         }
; 1693 : 
; 1694 : 
; 1695 :         //  Vertical scaling (based on flicker filter setting instead of scaling value)
; 1696 :         if( m_dwTVFilterLevel >= OMAP_TV_FILTER_LEVEL_HIGH )
; 1697 :         {
; 1698 :             //  Use 5 tap down-sampling vertical coeffs for HIGH flicker filtering
; 1699 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_DOWN;
; 1700 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_5;
; 1701 :             dwScaleEnable |= DISPC_VID_ATTR_VIDLINEBUFFERSPLIT;
; 1702 :             pVertCoeffs = g_dwScalingCoeff_Vert_Down_5_Taps;
; 1703 :         }
; 1704 :         else if( m_dwTVFilterLevel == OMAP_TV_FILTER_LEVEL_MEDIUM )
; 1705 :         {
; 1706 :             //  Use 3 tap down-sampling vertical coeffs for MEDIUM flicker filtering
; 1707 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_DOWN;
; 1708 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_3;
; 1709 :             pVertCoeffs = g_dwScalingCoeff_Vert_Down_3_Taps;
; 1710 :         }
; 1711 :         else if( m_dwTVFilterLevel == OMAP_TV_FILTER_LEVEL_LOW )
; 1712 :         {
; 1713 :             //  Use 3 tap up-sampling vertical coeffs for LOW flicker filtering
; 1714 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_UP;
; 1715 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_3;
; 1716 :             pVertCoeffs = g_dwScalingCoeff_Vert_Up_3_Taps;
; 1717 :         }
; 1718 :         else if( m_dwTVFilterLevel == OMAP_TV_FILTER_LEVEL_OFF )
; 1719 :         {
; 1720 :             //  No flicker filtering but only if the destination height can be decimated to fit the TV height
; 1721 :             //  (account for the /2 of destHeight above)
; 1722 :             if( (dwSrcHeight == dwDestHeight) && (dwDestHeight <= GetTVHeight()/2) )
; 1723 :             {
; 1724 :                 DEBUGMSG(ZONE_WARNING, (L"----- Using No interlace mode for TV out --------\r\n"));
; 1725 : 
; 1726 :                 //  Can fit the surface on TV without interlacing
; 1727 :                 dwInterlace = 0;
; 1728 :                 
; 1729 :                 //  No scaling
; 1730 :                 dwScaleEnable &= ~DISPC_VID_ATTR_VIDRESIZE_VERTICAL;
; 1731 :                 dwVertScale = 1024;
; 1732 :                 
; 1733 :                 //  No FIR accumulator values
; 1734 :                 dwAccum0 = dwAccum1 = 0;
; 1735 :             }
; 1736 :             else if( (dwSrcHeight == 2*dwDestHeight) && (dwDestHeight <= GetTVHeight()) )
; 1737 :             {
; 1738 :                 DEBUGMSG(ZONE_WARNING, (L"----- Using Interlace mode for TV out --------\r\n"));
; 1739 :             
; 1740 :                 //  Need to decimate the height by 2 to fit on the TV via interlacing
; 1741 :                 dwVertDecimation = 2;
; 1742 :                 pSurface->SetVerticalScaling( dwVertDecimation );
; 1743 :         
; 1744 :                 dwSrcHeight = dwSrcHeight / dwVertDecimation;
; 1745 :             
; 1746 :                 //  No scaling
; 1747 :                 dwScaleEnable &= ~DISPC_VID_ATTR_VIDRESIZE_VERTICAL;
; 1748 :                 dwVertScale = 1024;
; 1749 : 
; 1750 :                 //  Need to use the surface stride to output via interlacing
; 1751 :                 dwInterlace = pSurface->Stride();
; 1752 : 
; 1753 :                 //  No FIR accumulator values
; 1754 :                 dwAccum0 = dwAccum1 = 0;
; 1755 :             }
; 1756 :             else
; 1757 :             {
; 1758 :                 DEBUGMSG(ZONE_WARNING, (L"----- Using Scaling mode for TV out --------\r\n"));
; 1759 : 
; 1760 :                 //  Have to scale the output to TV because it just won't fit otherwise
; 1761 :                 //  Use 3 tap up-sampling vertical coeffs for LOW flicker filtering
; 1762 :                 dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_UP;
; 1763 :                 dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_3;
; 1764 :             }
; 1765 :                         
; 1766 :             //  Always need to point to some set of vertical coeffs
; 1767 :             pVertCoeffs = g_dwScalingCoeff_Vert_Down_3_Taps;
; 1768 :         }
; 1769 :         else
; 1770 :         {
; 1771 :             //  Use 3 tap down-sampling vertical coeffs for MEDIUM flicker filtering as the default setting
; 1772 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_DOWN;
; 1773 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_3;
; 1774 :             pVertCoeffs = g_dwScalingCoeff_Vert_Down_3_Taps;
; 1775 :         }
; 1776 : #else
; 1777 :         //  Compute horizontal and vertical scaling factors
; 1778 :         dwHorzScale = 1024 * dwSrcWidth / dwDestWidth;

  00950	e1a00001	 mov         r0, r1
  00954	e1a070a7	 mov         r7, r7, lsr #1
  00958	e1a0150b	 mov         r1, r11, lsl #10
  0095c	e58d7018	 str         r7, [sp, #0x18]
  00960	eb000000	 bl          __rt_udiv
  00964	e58d0008	 str         r0, [sp, #8]

; 1779 :         dwVertScale = 1024 * dwSrcHeight / dwDestHeight;

  00968	e1a00007	 mov         r0, r7
  0096c	e1a01504	 mov         r1, r4, lsl #10
  00970	eb000000	 bl          __rt_udiv

; 1780 : 
; 1781 :         //  Determine if scaling is within HW scaling capabilities
; 1782 :         //  If not, use surface scaling factor to decimate the source surface
; 1783 :         //  by 2, 4 or 8
; 1784 : //        if( dwHorzScale > 4096 )
; 1785 : //            dwHorzDecimation = 2;
; 1786 : 
; 1787 : //        if( dwHorzScale > 8192 )
; 1788 : //            dwHorzDecimation = 4;
; 1789 : 
; 1790 : 
; 1791 : //        if( dwVertScale > 2048 )
; 1792 : //            dwVertDecimation = 2;
; 1793 : 
; 1794 : //        if( dwVertScale > 4096 )
; 1795 : //            dwVertDecimation = 4;
; 1796 : 
; 1797 : //        if( dwVertScale > 8192 )
; 1798 : //            dwVertDecimation = 8;
; 1799 : 
; 1800 :         //  Adjust the source width and height by the decimation factor
; 1801 : //        dwSrcWidth  = dwSrcWidth / dwHorzDecimation;
; 1802 : //        dwSrcHeight = dwSrcHeight / dwVertDecimation;
; 1803 : 
; 1804 :         //  Adjust the HW scaling factors by the decimation factor      
; 1805 : //        dwHorzScale = 1024 * dwSrcWidth / dwDestWidth;
; 1806 : //        dwVertScale = 1024 * dwSrcHeight / dwDestHeight;
; 1807 : 
; 1808 :         if (m_dwTVFilterLevel)
; 1809 :         {
; 1810 :             // Flicker filter not supported currently (If flickerFilter is used, scaling cannot be done)
; 1811 :             // dwFlickerFilter = 1;
; 1812 :         }
; 1813 : 
; 1814 :         //  Set the decimation factors for the surface (always standard orientation for TV out)
; 1815 :         pSurface->SetHorizontalScaling( dwHorzDecimation );

  00974	e5963000	 ldr         r3, [r6]
  00978	e1a07000	 mov         r7, r0
  0097c	e58d7010	 str         r7, [sp, #0x10]
  00980	e5933030	 ldr         r3, [r3, #0x30]
  00984	e3a01001	 mov         r1, #1
  00988	e1a00006	 mov         r0, r6
  0098c	e1a0e00f	 mov         lr, pc
  00990	e12fff13	 bx          r3

; 1816 :         pSurface->SetVerticalScaling( dwVertDecimation );

  00994	e5963000	 ldr         r3, [r6]
  00998	e3a01001	 mov         r1, #1
  0099c	e1a00006	 mov         r0, r6
  009a0	e5933034	 ldr         r3, [r3, #0x34]
  009a4	e1a0e00f	 mov         lr, pc
  009a8	e12fff13	 bx          r3

; 1817 : 
; 1818 :          //Get vertical scaler coefficients
; 1819 :         if (dwSrcWidth > 1280)

  009ac	e35b0c05	 cmp         r11, #5, 24

; 1820 :         {
; 1821 :             dwVTaps = 3;

  009b0	83a01003	 movhi       r1, #3

; 1822 :         }
; 1823 :         else
; 1824 :         {
; 1825 :             dwVTaps = 5;
; 1826 :             dwScaleEnable |= DISPC_VID_ATTR_VIDLINEBUFFERSPLIT;
; 1827 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVERTICALTAPS_5;

  009b4	93a08606	 movls       r8, #6, 12
  009b8	93a01005	 movls       r1, #5

; 1828 :         }
; 1829 : 
; 1830 :         GetFIRCoef((void*)Coefficients, dwVTaps, dwVertScale, dwFlickerFilter);

  009bc	e3a03000	 mov         r3, #0
  009c0	e1a02007	 mov         r2, r7
  009c4	e28d0f4e	 add         r0, sp, #0x4E, 30
  009c8	958d8060	 strls       r8, [sp, #0x60]
  009cc	eb000000	 bl          |?GetFIRCoef@@YAXPAXKKK@Z|

; 1831 :         for (i = 0; i < 8; i++)

  009d0	e3a04000	 mov         r4, #0
  009d4	e28d7078	 add         r7, sp, #0x78
  009d8	e28d9f4e	 add         r9, sp, #0x4E, 30
  009dc	e3a08000	 mov         r8, #0
  009e0		 |$LL33@SetScaling|

; 1832 :         {
; 1833 :             dwData1 = (Coefficients[0][i]) | ((Coefficients[4][i]) << 8);
; 1834 :             dwData2 = ((Coefficients[1][i]) << 8) |((Coefficients[2][i]) << 16) | ((Coefficients[3][i]) << 24);

  009e0	e084e009	 add         lr, r4, r9

; 1835 : 
; 1836 :             /* Make up coefficients in the format needed further down */
; 1837 :             dwVertCoeffs[i*3]   = 0;
; 1838 :             dwVertCoeffs[i*3+1] = dwData2;

  009e4	e5de2018	 ldrb        r2, [lr, #0x18]
  009e8	e5de3010	 ldrb        r3, [lr, #0x10]
  009ec	e5de1008	 ldrb        r1, [lr, #8]

; 1839 :             dwVertCoeffs[i*3+2] = dwData1;

  009f0	e5de0020	 ldrb        r0, [lr, #0x20]
  009f4	e1833402	 orr         r3, r3, r2, lsl #8
  009f8	e5de2000	 ldrb        r2, [lr]
  009fc	e1813403	 orr         r3, r1, r3, lsl #8
  00a00	e1a03403	 mov         r3, r3, lsl #8
  00a04	e1822400	 orr         r2, r2, r0, lsl #8
  00a08	e2844001	 add         r4, r4, #1
  00a0c	e5872008	 str         r2, [r7, #8]
  00a10	e5873004	 str         r3, [r7, #4]
  00a14	e5878000	 str         r8, [r7]
  00a18	e287700c	 add         r7, r7, #0xC
  00a1c	e3540008	 cmp         r4, #8
  00a20	3affffee	 bcc         |$LL33@SetScaling|

; 1840 :         }
; 1841 :         pVertCoeffs = dwVertCoeffs;
; 1842 : 
; 1843 :         //Now get horizontal scaler coefficients
; 1844 :         GetFIRCoef((void*)Coefficients, 5, dwHorzScale, 0);

  00a24	e59d2008	 ldr         r2, [sp, #8]
  00a28	e28d7078	 add         r7, sp, #0x78
  00a2c	e3a03000	 mov         r3, #0
  00a30	e3a01005	 mov         r1, #5
  00a34	e28d0f4e	 add         r0, sp, #0x4E, 30
  00a38	e58d7048	 str         r7, [sp, #0x48]
  00a3c	eb000000	 bl          |?GetFIRCoef@@YAXPAXKKK@Z|
  00a40	e59d8060	 ldr         r8, [sp, #0x60]
  00a44	e59d905c	 ldr         r9, [sp, #0x5C]
  00a48	e59d401c	 ldr         r4, [sp, #0x1C]

; 1845 :         for (i = 0; i < 8; i++)

  00a4c	e3a0a000	 mov         r10, #0
  00a50	e28d50d8	 add         r5, sp, #0xD8
  00a54	e28d7f4e	 add         r7, sp, #0x4E, 30
  00a58	e3a06000	 mov         r6, #0
  00a5c		 |$LL30@SetScaling|

; 1846 :         {
; 1847 :             dwData1 = (Coefficients[0][i] | (Coefficients[1][i]) << 8) |((Coefficients[2][i]) << 16) | ((Coefficients[3][i]) << 24);

  00a5c	e08ae007	 add         lr, r10, r7

; 1848 :             dwData2 = (Coefficients[4][i]);
; 1849 : 
; 1850 :             /* Make up coefficients in the format needed further down */
; 1851 :             dwHorizCoeffs[i*3]   = dwData1;

  00a60	e5de1018	 ldrb        r1, [lr, #0x18]
  00a64	e5de3010	 ldrb        r3, [lr, #0x10]
  00a68	e5de2008	 ldrb        r2, [lr, #8]
  00a6c	e5de0000	 ldrb        r0, [lr]
  00a70	e1833401	 orr         r3, r3, r1, lsl #8
  00a74	e1823403	 orr         r3, r2, r3, lsl #8

; 1852 :             dwHorizCoeffs[i*3+1] = dwData2;

  00a78	e5de2020	 ldrb        r2, [lr, #0x20]
  00a7c	e1803403	 orr         r3, r0, r3, lsl #8
  00a80	e28aa001	 add         r10, r10, #1
  00a84	e5852004	 str         r2, [r5, #4]
  00a88	e5853000	 str         r3, [r5]

; 1853 :             dwHorizCoeffs[i*3+2] = 0;

  00a8c	e5856008	 str         r6, [r5, #8]
  00a90	e285500c	 add         r5, r5, #0xC
  00a94	e35a0008	 cmp         r10, #8
  00a98	3affffef	 bcc         |$LL30@SetScaling|

; 1854 :         }
; 1855 :         pHorizCoeffs = dwHorizCoeffs;
; 1856 : 
; 1857 :         if (dwSrcHeight > (dwDestHeight * dwInterlaceCorrection))

  00a9c	e59d3018	 ldr         r3, [sp, #0x18]
  00aa0	e1a02083	 mov         r2, r3, lsl #1
  00aa4	e1540002	 cmp         r4, r2
  00aa8	e28d30d8	 add         r3, sp, #0xD8

; 1858 :         {
; 1859 :             //Down scale
; 1860 :             dwScaleEnable |= DISPC_VID_ATTR_VIDRESIZE_VERTICAL;
; 1861 :             dwScaleEnable |= DISPC_VID_ATTR_VIDVRESIZE_CONF_DOWN;

  00aac	83888d05	 orrhi       r8, r8, #5, 26
  00ab0	e58d3000	 str         r3, [sp]
  00ab4	8a000000	 bhi         |$LN25@SetScaling|

; 1862 :         }
; 1863 :         else if (dwSrcHeight < (dwDestHeight * dwInterlaceCorrection))
; 1864 :         {
; 1865 :             //Up scale
; 1866 :             dwScaleEnable |= DISPC_VID_ATTR_VIDRESIZE_VERTICAL;

  00ab8	33888040	 orrcc       r8, r8, #0x40
  00abc		 |$LN25@SetScaling|

; 1867 :         }
; 1868 :         else
; 1869 :         {
; 1870 :             //No scale
; 1871 :         }
; 1872 : 
; 1873 :         if (dwSrcWidth > dwDestWidth)

  00abc	e59d300c	 ldr         r3, [sp, #0xC]
  00ac0	e15b0003	 cmp         r11, r3

; 1874 :         {
; 1875 :             //Down scale
; 1876 :             dwScaleEnable |= DISPC_VID_ATTR_VIDRESIZE_HORIZONTAL;
; 1877 :             dwScaleEnable |= DISPC_VID_ATTR_VIDHRESIZE_CONF_DOWN;

  00ac4	838880a0	 orrhi       r8, r8, #0xA0
  00ac8	8a000000	 bhi         |$LN21@SetScaling|

; 1878 :         }
; 1879 :         else if (dwSrcWidth < dwDestWidth)
; 1880 :         {
; 1881 :             //Up scale
; 1882 :             dwScaleEnable |= DISPC_VID_ATTR_VIDRESIZE_HORIZONTAL;

  00acc	33888020	 orrcc       r8, r8, #0x20
  00ad0		 |$LN21@SetScaling|

; 1883 :         }
; 1884 :         else
; 1885 :         {
; 1886 :             //No scale
; 1887 :         }
; 1888 : 
; 1889 :         //  Accum0/1 controls the scaler phase for the even/odd fields
; 1890 :         if (m_dwTVFilterLevel == OMAP_TV_FILTER_LEVEL_OFF)

  00ad0	e59d5004	 ldr         r5, [sp, #4]

; 1891 :         {
; 1892 :             dwAccum0 = (((dwVertScale/dwInterlaceCorrection) % 1024) << 16);
; 1893 :             dwAccum1 = 0;
; 1894 :         }
; 1895 :         else
; 1896 :         {
; 1897 :             /* This case is not supported/tested */
; 1898 :             dwHorzScale = 1024;
; 1899 :             dwVertScale = 1024;
; 1900 :             dwAccum0 = 0;
; 1901 :             dwAccum1 = 0;
; 1902 :         }
; 1903 : 
; 1904 :         //  Need to use the surface stride to output via interlacing
; 1905 :         dwInterlace = pSurface->Stride();

  00ad4	e59d6074	 ldr         r6, [sp, #0x74]
  00ad8	e3a01000	 mov         r1, #0
  00adc	e59534bc	 ldr         r3, [r5, #0x4BC]
  00ae0	e1a00006	 mov         r0, r6
  00ae4	e3530000	 cmp         r3, #0
  00ae8	059d2010	 ldreq       r2, [sp, #0x10]
  00aec	03a03c07	 moveq       r3, #7, 24
  00af0	038330fe	 orreq       r3, r3, #0xFE
  00af4	00023003	 andeq       r3, r2, r3
  00af8	01a04783	 moveq       r4, r3, lsl #15
  00afc	13a03b01	 movne       r3, #1, 22
  00b00	158d3008	 strne       r3, [sp, #8]
  00b04	13a03b01	 movne       r3, #1, 22
  00b08	158d3010	 strne       r3, [sp, #0x10]
  00b0c	13a03000	 movne       r3, #0
  00b10	058d4054	 streq       r4, [sp, #0x54]
  00b14	158d3054	 strne       r3, [sp, #0x54]
  00b18	e5963000	 ldr         r3, [r6]
  00b1c	e5933010	 ldr         r3, [r3, #0x10]
  00b20	e1a0e00f	 mov         lr, pc
  00b24	e12fff13	 bx          r3

; 1906 : 
; 1907 :         // Account for interlacing for Y offset (this is the line offset in each field).
; 1908 :         dwY /= dwInterlaceCorrection; 

  00b28	e59d302c	 ldr         r3, [sp, #0x2C]
  00b2c	e59d7048	 ldr         r7, [sp, #0x48]
  00b30	e59da050	 ldr         r10, [sp, #0x50]
  00b34	e1a030a3	 mov         r3, r3, lsr #1

; 1983 :         
; 1984 :         //  Position of window
; 1985 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.POSITION,
; 1986 :                     DISPC_VID_POS_VIDPOSX(dwX) |
; 1987 :                     DISPC_VID_POS_VIDPOSY(dwY)
; 1988 :                     );
; 1989 : 
; 1990 :         //  DMA properties
; 1991 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  00b38	e59d2030	 ldr         r2, [sp, #0x30]
  00b3c	e58d302c	 str         r3, [sp, #0x2C]
  00b40	e58d0058	 str         r0, [sp, #0x58]
  00b44		 |$LN17@SetScaling|
  00b44	e59d4024	 ldr         r4, [sp, #0x24]
  00b48	e3540001	 cmp         r4, #1
  00b4c	1a00009f	 bne         |$LN8@SetScaling|
  00b50	e5963030	 ldr         r3, [r6, #0x30]
  00b54	e3530000	 cmp         r3, #0
  00b58	0a000033	 beq         |$LN11@SetScaling|
  00b5c	e1a03002	 mov         r3, r2
  00b60	e1a02009	 mov         r2, r9
  00b64	e1a0100a	 mov         r1, r10
  00b68	e1a00006	 mov         r0, r6
  00b6c	eb000000	 bl          |?ConfigResizerParams@OMAPSurface@@QAAHPAUtagRECT@@0W4OMAP_DSS_ROTATION@@@Z|
  00b70	e3500000	 cmp         r0, #0
  00b74	0a000016	 beq         |$LN209@SetScaling|
  00b78	e59600a0	 ldr         r0, [r6, #0xA0]
  00b7c	e59d2044	 ldr         r2, [sp, #0x44]
  00b80	e3a03001	 mov         r3, #1
  00b84	e590e000	 ldr         lr, [r0]
  00b88	e3a01000	 mov         r1, #0
  00b8c	e59e4014	 ldr         r4, [lr, #0x14]
  00b90	e1a0e00f	 mov         lr, pc
  00b94	e12fff14	 bx          r4
  00b98	e5962000	 ldr         r2, [r6]
  00b9c	e1a05000	 mov         r5, r0
  00ba0	e3a03001	 mov         r3, #1
  00ba4	e5924014	 ldr         r4, [r2, #0x14]
  00ba8	e59d2044	 ldr         r2, [sp, #0x44]
  00bac	e3a01000	 mov         r1, #0
  00bb0	e1a00006	 mov         r0, r6
  00bb4	e1a0e00f	 mov         lr, pc
  00bb8	e12fff14	 bx          r4
  00bbc	e1a01000	 mov         r1, r0
  00bc0	e1a00006	 mov         r0, r6
  00bc4	e1a02005	 mov         r2, r5
  00bc8	eb000000	 bl          |?StartResizer@OMAPSurface@@QAAHKK@Z|
  00bcc	e3500000	 cmp         r0, #0
  00bd0	1a000014	 bne         |$LN212@SetScaling|
  00bd4		 |$LN209@SetScaling|

; 1909 : #endif
; 1910 :     }
; 1911 :     else
; 1912 :     {
; 1913 :         ASSERT(0);
; 1914 :         goto cleanUp;
; 1915 :     }
; 1916 : 
; 1917 :     DEBUGMSG(ZONE_WARNING, (L"INFO: OMAPDisplayController::SetScalingAttribs: "));
; 1918 :     DEBUGMSG(ZONE_WARNING, (L"  Src  RECT (%d,%d) (%d,%d)\r\n", privSrcRect.left, privSrcRect.top, privSrcRect.right, privSrcRect.bottom));
; 1919 :     DEBUGMSG(ZONE_WARNING, (L"  Dest RECT (%d,%d) (%d,%d)\r\n", pDestRect->left, pDestRect->top, pDestRect->right, pDestRect->bottom));
; 1920 :     DEBUGMSG(ZONE_WARNING, (L"  Computed Origin (%d,%d) for rotation angle %d\r\n", dwX, dwY, g_rgPipelineMapping[ePipeline].eRotation));
; 1921 :     DEBUGMSG(ZONE_WARNING, (L"  dwScaleEnable = 0x%08X  dwHorzScale = %d  dwVertScale = %d\r\n", dwScaleEnable, dwHorzScale, dwVertScale));
; 1922 :     DEBUGMSG(ZONE_WARNING, (L"  dwSrcWidth  = %d  dwSrcHeight  = %d\r\n", dwSrcWidth, dwSrcHeight));
; 1923 :     DEBUGMSG(ZONE_WARNING, (L"  dwDestWidth = %d  dwDestHeight = %d\r\n", dwDestWidth, dwDestHeight));
; 1924 :     DEBUGMSG(ZONE_WARNING, (L"  dwHorzDecimation = %d  dwVertDecimation = %d\r\n", dwHorzDecimation, dwVertDecimation));
; 1925 :     DEBUGMSG(ZONE_WARNING, (L"  ePipeline = %d\r\n", ePipeline));
; 1926 :     DEBUGMSG(ZONE_WARNING, (L"  pSurface = 0x%x Stride = %d Row_Inc = %d\r\n", pSurface,pSurface->Stride(eRotation),pSurface->RowIncr(eRotation, bMirror)));
; 1927 :    
; 1928 : 
; 1929 :     //  GFX pipeline
; 1930 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )
; 1931 :     {
; 1932 :         //  Scaling is not supported on the GFX plane
; 1933 :     }
; 1934 : 
; 1935 : 
; 1936 :     //  VIDEO1 pipeline
; 1937 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )
; 1938 :     {   
; 1939 :         DEBUGMSG(ZONE_WARNING, (L"\t Resizer Enabled %d \r\n",bUseResizer));
; 1940 : 
; 1941 :         if (pSurface->isResizerEnabled())
; 1942 :         {   
; 1943 :             DWORD rszStatus = FALSE;
; 1944 :             /* set Resizer */
; 1945 :             rszStatus = pSurface->ConfigResizerParams(pSrcRect, pDestRect,eRotation);
; 1946 :             /* Start resizer */
; 1947 :             if (rszStatus)
; 1948 :                 rszStatus = pSurface->StartResizer(pSurface->PhysicalAddr(OMAP_DSS_ROTATION_0, bMirror,OMAP_ASSOC_SURF_FORCE_OFF), //input
; 1949 :                                                    pSurface->OmapAssocSurface()->PhysicalAddr(OMAP_DSS_ROTATION_0, bMirror,OMAP_ASSOC_SURF_FORCE_OFF));               
; 1950 :             if (!(rszStatus))
; 1951 :             {
; 1952 :                 RETAILMSG(TRUE,(L"SetScalingAttribs: Cannot configure/start ISP resizer; Cropping the image\r\n"));

  00bd4	e59f04fc	 ldr         r0, [pc, #0x4FC]
  00bd8	eb000000	 bl          NKDbgPrintfW

; 1953 :                 bUseResizer = FALSE;
; 1954 :                 pSurface->UseResizer(FALSE);
; 1955 :                 pSurface->SetRSZHandle(NULL, TRUE);

  00bdc	e5963034	 ldr         r3, [r6, #0x34]
  00be0	e3a04000	 mov         r4, #0
  00be4	e5864030	 str         r4, [r6, #0x30]
  00be8	e3530000	 cmp         r3, #0
  00bec	0a000002	 beq         |$LN180@SetScaling|
  00bf0	e1a00003	 mov         r0, r3
  00bf4	eb000000	 bl          CloseHandle
  00bf8	e5864034	 str         r4, [r6, #0x34]
  00bfc		 |$LN180@SetScaling|

; 1956 :                 memset(pSurface->ResizeParams(),0,sizeof(RSZParams_t));  

  00bfc	e3a02064	 mov         r2, #0x64
  00c00	e3a01000	 mov         r1, #0
  00c04	e2860038	 add         r0, r6, #0x38
  00c08	e5864034	 str         r4, [r6, #0x34]
  00c0c	eb000000	 bl          memset

; 1957 :                 pSurface->SetClipping( &privSrcRect);

  00c10	e5963000	 ldr         r3, [r6]
  00c14	e28d1034	 add         r1, sp, #0x34
  00c18	e1a00006	 mov         r0, r6
  00c1c	e5933020	 ldr         r3, [r3, #0x20]
  00c20	e1a0e00f	 mov         lr, pc
  00c24	e12fff13	 bx          r3
  00c28		 |$LN212@SetScaling|

; 1883 :         }
; 1884 :         else
; 1885 :         {
; 1886 :             //No scale
; 1887 :         }
; 1888 : 
; 1889 :         //  Accum0/1 controls the scaler phase for the even/odd fields
; 1890 :         if (m_dwTVFilterLevel == OMAP_TV_FILTER_LEVEL_OFF)

  00c28	e59d5004	 ldr         r5, [sp, #4]

; 1957 :                 pSurface->SetClipping( &privSrcRect);

  00c2c		 |$LN11@SetScaling|

; 1958 :             }            
; 1959 :         }
; 1960 :         
; 1961 :         //  Get the current attribute settings
; 1962 :         dwCurrAttribs = INREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES );
; 1963 : 
; 1964 :         //  Mask off the scaling bits
; 1965 :         dwCurrAttribs &= ~(DISPC_VID_ATTR_VIDRESIZE_MASK|DISPC_VID_ATTR_VIDLINEBUFFERSPLIT|DISPC_VID_ATTR_VIDVERTICALTAPS_5);
; 1966 :         
; 1967 :         //  Enable video resizing by or'ing with scale enable attribs
; 1968 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES,
; 1969 :                     dwCurrAttribs | dwScaleEnable
; 1970 :                     );
; 1971 : 
; 1972 :         
; 1973 :         //  Size of resized output window and original picture size
; 1974 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.SIZE,
; 1975 :                     DISPC_VID_SIZE_VIDSIZEX(dwDestWidth) |
; 1976 :                     DISPC_VID_SIZE_VIDSIZEY(dwDestHeight)
; 1977 :                     );

  00c2c	e59d3018	 ldr         r3, [sp, #0x18]
  00c30	e5950008	 ldr         r0, [r5, #8]

; 1978 : 
; 1979 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.PICTURE_SIZE,
; 1980 :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEX(dwSrcWidth) |
; 1981 :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEY(dwSrcHeight)
; 1982 :                     );

  00c34	e3e04606	 mvn         r4, #6, 12
  00c38	e2431001	 sub         r1, r3, #1
  00c3c	e59d300c	 ldr         r3, [sp, #0xC]
  00c40	e59020cc	 ldr         r2, [r0, #0xCC]

; 1983 :         
; 1984 :         //  Position of window
; 1985 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.POSITION,
; 1986 :                     DISPC_VID_POS_VIDPOSX(dwX) |
; 1987 :                     DISPC_VID_POS_VIDPOSY(dwY)
; 1988 :                     );
; 1989 : 
; 1990 :         //  DMA properties
; 1991 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  00c44	e59da044	 ldr         r10, [sp, #0x44]
  00c48	e2433001	 sub         r3, r3, #1
  00c4c	e183e801	 orr         lr, r3, r1, lsl #16
  00c50	e59d301c	 ldr         r3, [sp, #0x1C]
  00c54	e2431001	 sub         r1, r3, #1
  00c58	e2243e1e	 eor         r3, r4, #0x1E, 28
  00c5c	e0023003	 and         r3, r2, r3
  00c60	e1833008	 orr         r3, r3, r8
  00c64	e58030cc	 str         r3, [r0, #0xCC]
  00c68	e5952008	 ldr         r2, [r5, #8]
  00c6c	e24b3001	 sub         r3, r11, #1
  00c70	e1831801	 orr         r1, r3, r1, lsl #16
  00c74	e582e0c8	 str         lr, [r2, #0xC8]
  00c78	e5953008	 ldr         r3, [r5, #8]
  00c7c	e59d202c	 ldr         r2, [sp, #0x2C]
  00c80	e59d0020	 ldr         r0, [sp, #0x20]
  00c84	e58310e4	 str         r1, [r3, #0xE4]
  00c88	e5953008	 ldr         r3, [r5, #8]
  00c8c	e180e802	 orr         lr, r0, r2, lsl #16
  00c90	e59d4030	 ldr         r4, [sp, #0x30]
  00c94	e583e0c4	 str         lr, [r3, #0xC4]
  00c98	e5963000	 ldr         r3, [r6]
  00c9c	e1a0200a	 mov         r2, r10
  00ca0	e1a01004	 mov         r1, r4
  00ca4	e5933018	 ldr         r3, [r3, #0x18]
  00ca8	e1a00006	 mov         r0, r6
  00cac	e1a0e00f	 mov         lr, pc
  00cb0	e12fff13	 bx          r3
  00cb4	e5953008	 ldr         r3, [r5, #8]

; 1992 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ROW_INC, (pSurface->RowIncr(eRotation, bMirror)) );

  00cb8	e1a0200a	 mov         r2, r10
  00cbc	e1a01004	 mov         r1, r4
  00cc0	e58300dc	 str         r0, [r3, #0xDC]
  00cc4	e5963000	 ldr         r3, [r6]
  00cc8	e1a00006	 mov         r0, r6
  00ccc	e593301c	 ldr         r3, [r3, #0x1C]
  00cd0	e1a0e00f	 mov         lr, pc
  00cd4	e12fff13	 bx          r3
  00cd8	e5952008	 ldr         r2, [r5, #8]

; 1993 : 
; 1994 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA0, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  00cdc	e1a01004	 mov         r1, r4
  00ce0	e3a03000	 mov         r3, #0
  00ce4	e58200d8	 str         r0, [r2, #0xD8]
  00ce8	e5960000	 ldr         r0, [r6]
  00cec	e1a0200a	 mov         r2, r10
  00cf0	e5904014	 ldr         r4, [r0, #0x14]
  00cf4	e1a00006	 mov         r0, r6
  00cf8	e1a0e00f	 mov         lr, pc
  00cfc	e12fff14	 bx          r4
  00d00	e59d3058	 ldr         r3, [sp, #0x58]
  00d04	e5952008	 ldr         r2, [r5, #8]
  00d08	e0803003	 add         r3, r0, r3
  00d0c	e58230bc	 str         r3, [r2, #0xBC]

; 1995 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  00d10	e5961000	 ldr         r1, [r6]
  00d14	e3a03000	 mov         r3, #0
  00d18	e1a0200a	 mov         r2, r10
  00d1c	e5914014	 ldr         r4, [r1, #0x14]
  00d20	e59d1030	 ldr         r1, [sp, #0x30]
  00d24	e1a00006	 mov         r0, r6
  00d28	e1a0e00f	 mov         lr, pc
  00d2c	e12fff14	 bx          r4
  00d30	e5953008	 ldr         r3, [r5, #8]

; 1996 : 
; 1997 :         //  Initialize FIR accumulators
; 1998 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ACCU0,
; 1999 :                     dwAccum0
; 2000 :                     );
; 2001 : 
; 2002 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ACCU1,
; 2003 :                     dwAccum1
; 2004 :                     );
; 2005 : 
; 2006 :         //  Set FIR increment value and coeffs
; 2007 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.FIR,
; 2008 :                     DISPC_VID_FIR_VIDFIRHINC(dwHorzScale) |
; 2009 :                     DISPC_VID_FIR_VIDFIRVINC(dwVertScale)
; 2010 :                     );

  00d34	e59d2010	 ldr         r2, [sp, #0x10]
  00d38	e59d1008	 ldr         r1, [sp, #8]
  00d3c	e58300c0	 str         r0, [r3, #0xC0]
  00d40	e5953008	 ldr         r3, [r5, #8]
  00d44	e1812802	 orr         r2, r1, r2, lsl #16
  00d48	e59d1054	 ldr         r1, [sp, #0x54]

; 2022 : 
; 2023 :             OUTREG32( &m_pDispRegs->DISPC_VID1_FIR_COEF_V[i],
; 2024 :                         *pHorizCoeffs++ | *pVertCoeffs++
; 2025 :                         );

  00d4c	e59d4000	 ldr         r4, [sp]
  00d50	e3a0e000	 mov         lr, #0
  00d54	e58310e8	 str         r1, [r3, #0xE8]
  00d58	e5953008	 ldr         r3, [r5, #8]
  00d5c	e3a01000	 mov         r1, #0
  00d60	e3a0ae1e	 mov         r10, #0x1E, 28
  00d64	e58310ec	 str         r1, [r3, #0xEC]
  00d68	e5953008	 ldr         r3, [r5, #8]
  00d6c	e58320e0	 str         r2, [r3, #0xE0]
  00d70		 |$LL10@SetScaling|

; 2011 : 
; 2012 :         for( i = 0; i < NUM_SCALING_PHASES; i++ )
; 2013 :         {
; 2014 :             //  OR the horiz and vert coeff values b/c some registers span both H and V coeffs
; 2015 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.aFIR_COEF[i].ulH,
; 2016 :                         *pHorizCoeffs++ | *pVertCoeffs++
; 2017 :                         );

  00d70	e5953008	 ldr         r3, [r5, #8]
  00d74	e4970004	 ldr         r0, [r7], #4
  00d78	e4942004	 ldr         r2, [r4], #4
  00d7c	e083100e	 add         r1, r3, lr
  00d80	e1803002	 orr         r3, r0, r2
  00d84	e58130f0	 str         r3, [r1, #0xF0]

; 2018 : 
; 2019 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.aFIR_COEF[i].ulHV,
; 2020 :                         *pHorizCoeffs++ | *pVertCoeffs++
; 2021 :                         );

  00d88	e5953008	 ldr         r3, [r5, #8]
  00d8c	e4970004	 ldr         r0, [r7], #4
  00d90	e4942004	 ldr         r2, [r4], #4
  00d94	e083100e	 add         r1, r3, lr
  00d98	e28ee008	 add         lr, lr, #8

; 2022 : 
; 2023 :             OUTREG32( &m_pDispRegs->DISPC_VID1_FIR_COEF_V[i],
; 2024 :                         *pHorizCoeffs++ | *pVertCoeffs++
; 2025 :                         );

  00d9c	e35e0040	 cmp         lr, #0x40
  00da0	e1803002	 orr         r3, r0, r2
  00da4	e58130f4	 str         r3, [r1, #0xF4]
  00da8	e4972004	 ldr         r2, [r7], #4
  00dac	e4943004	 ldr         r3, [r4], #4
  00db0	e5951008	 ldr         r1, [r5, #8]
  00db4	e1823003	 orr         r3, r2, r3
  00db8	e781300a	 str         r3, [r1, +r10]
  00dbc	e28aa004	 add         r10, r10, #4
  00dc0	3affffea	 bcc         |$LL10@SetScaling|
  00dc4	e59da050	 ldr         r10, [sp, #0x50]
  00dc8	e58d4000	 str         r4, [sp]
  00dcc	e59d4024	 ldr         r4, [sp, #0x24]
  00dd0		 |$LN8@SetScaling|

; 2026 :         }
; 2027 : 
; 2028 :         Dump_DISPC_VID( &m_pDispRegs->tDISPC_VID1, (UINT32*) &m_pDispRegs->DISPC_VID1_FIR_COEF_V[0], 1 );
; 2029 :     }
; 2030 : 
; 2031 : 
; 2032 :     //  VIDEO2 pipeline
; 2033 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  00dd0	e3540002	 cmp         r4, #2
  00dd4	1a000098	 bne         |$LN1@SetScaling|

; 2034 :     {
; 2035 :         DEBUGMSG(ZONE_WARNING, (L"\t Resizer Enabled %d \r\n",bUseResizer));
; 2036 :         /* If using resizer */        
; 2037 :         if (pSurface->isResizerEnabled())

  00dd8	e5963030	 ldr         r3, [r6, #0x30]
  00ddc	e3530000	 cmp         r3, #0
  00de0	0a00002e	 beq         |$LN4@SetScaling|

; 2038 :         {   
; 2039 :             DWORD rszStatus = FALSE;
; 2040 :             /* set Resizer */
; 2041 :             rszStatus = pSurface->ConfigResizerParams(pSrcRect, pDestRect,eRotation);

  00de4	e59d3030	 ldr         r3, [sp, #0x30]
  00de8	e1a02009	 mov         r2, r9
  00dec	e1a0100a	 mov         r1, r10
  00df0	e1a00006	 mov         r0, r6
  00df4	eb000000	 bl          |?ConfigResizerParams@OMAPSurface@@QAAHPAUtagRECT@@0W4OMAP_DSS_ROTATION@@@Z|
  00df8	e3500000	 cmp         r0, #0

; 2042 :             /* Start resizer */
; 2043 :             if (rszStatus)

  00dfc	0a000018	 beq         |$LN208@SetScaling|

; 2044 :                 rszStatus = pSurface->StartResizer(pSurface->PhysicalAddr(OMAP_DSS_ROTATION_0, bMirror,OMAP_ASSOC_SURF_FORCE_OFF), //input
; 2045 :                                                    pSurface->OmapAssocSurface()->PhysicalAddr(OMAP_DSS_ROTATION_0, bMirror, OMAP_ASSOC_SURF_FORCE_OFF));               

  00e00	e59600a0	 ldr         r0, [r6, #0xA0]
  00e04	e59d9044	 ldr         r9, [sp, #0x44]
  00e08	e3a03001	 mov         r3, #1
  00e0c	e590e000	 ldr         lr, [r0]
  00e10	e1a02009	 mov         r2, r9
  00e14	e3a01000	 mov         r1, #0
  00e18	e59e4014	 ldr         r4, [lr, #0x14]
  00e1c	e1a0e00f	 mov         lr, pc
  00e20	e12fff14	 bx          r4
  00e24	e5962000	 ldr         r2, [r6]
  00e28	e1a05000	 mov         r5, r0
  00e2c	e3a03001	 mov         r3, #1
  00e30	e5924014	 ldr         r4, [r2, #0x14]
  00e34	e1a02009	 mov         r2, r9
  00e38	e3a01000	 mov         r1, #0
  00e3c	e1a00006	 mov         r0, r6
  00e40	e1a0e00f	 mov         lr, pc
  00e44	e12fff14	 bx          r4
  00e48	e1a01000	 mov         r1, r0
  00e4c	e1a00006	 mov         r0, r6
  00e50	e1a02005	 mov         r2, r5
  00e54	eb000000	 bl          |?StartResizer@OMAPSurface@@QAAHKK@Z|
  00e58	e59d5004	 ldr         r5, [sp, #4]
  00e5c	e3500000	 cmp         r0, #0

; 2046 :             if (!(rszStatus))

  00e60	1a00000e	 bne         |$LN4@SetScaling|
  00e64		 |$LN208@SetScaling|

; 2047 :             {
; 2048 :                 RETAILMSG(TRUE,(L"SetScalingAttribs: Cannot configure/start ISP resizer; Cropping the image\r\n"));

  00e64	e59f026c	 ldr         r0, [pc, #0x26C]
  00e68	eb000000	 bl          NKDbgPrintfW

; 2049 :                 bUseResizer = FALSE;
; 2050 :                 pSurface->UseResizer(FALSE);
; 2051 :                 pSurface->SetRSZHandle(NULL, TRUE);

  00e6c	e5963034	 ldr         r3, [r6, #0x34]
  00e70	e3a04000	 mov         r4, #0
  00e74	e5864030	 str         r4, [r6, #0x30]
  00e78	e3530000	 cmp         r3, #0
  00e7c	0a000002	 beq         |$LN193@SetScaling|
  00e80	e1a00003	 mov         r0, r3
  00e84	eb000000	 bl          CloseHandle
  00e88	e5864034	 str         r4, [r6, #0x34]
  00e8c		 |$LN193@SetScaling|

; 2052 :                 memset(pSurface->ResizeParams(),0,sizeof(RSZParams_t));                

  00e8c	e3a02064	 mov         r2, #0x64
  00e90	e3a01000	 mov         r1, #0
  00e94	e2860038	 add         r0, r6, #0x38
  00e98	e5864034	 str         r4, [r6, #0x34]
  00e9c	eb000000	 bl          memset
  00ea0		 |$LN4@SetScaling|

; 2053 :             }            
; 2054 :         }
; 2055 :         
; 2056 :         
; 2057 :         //  Get the current attribute settings
; 2058 :         dwCurrAttribs = INREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES );
; 2059 : 
; 2060 :         //  Mask off the scaling bits
; 2061 :         dwCurrAttribs &= ~(DISPC_VID_ATTR_VIDRESIZE_MASK|DISPC_VID_ATTR_VIDLINEBUFFERSPLIT|DISPC_VID_ATTR_VIDVERTICALTAPS_5);
; 2062 :         
; 2063 :         //  Enable video resizing by or'ing with scale enable attribs
; 2064 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES,
; 2065 :                     dwCurrAttribs | dwScaleEnable
; 2066 :                     );
; 2067 : 
; 2068 :         //  Size of resized output window; picture size was set by in SetPipelineAttribs()
; 2069 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.SIZE,
; 2070 :                     DISPC_VID_SIZE_VIDSIZEX(dwDestWidth) |
; 2071 :                     DISPC_VID_SIZE_VIDSIZEY(dwDestHeight)
; 2072 :                     );

  00ea0	e59d3018	 ldr         r3, [sp, #0x18]
  00ea4	e5950008	 ldr         r0, [r5, #8]

; 2073 : 
; 2074 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.PICTURE_SIZE,
; 2075 :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEX(dwSrcWidth) |
; 2076 :                     DISPC_VID_PICTURE_SIZE_VIDORGSIZEY(dwSrcHeight)
; 2077 :                     );

  00ea8	e3e04606	 mvn         r4, #6, 12
  00eac	e2431001	 sub         r1, r3, #1
  00eb0	e59d300c	 ldr         r3, [sp, #0xC]
  00eb4	e590215c	 ldr         r2, [r0, #0x15C]

; 2078 : 
; 2079 :         //  Position of window
; 2080 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.POSITION,
; 2081 :                     DISPC_VID_POS_VIDPOSX(dwX) |
; 2082 :                     DISPC_VID_POS_VIDPOSY(dwY)
; 2083 :                     );
; 2084 : 
; 2085 :         //  DMA properties
; 2086 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  00eb8	e59d9044	 ldr         r9, [sp, #0x44]
  00ebc	e2433001	 sub         r3, r3, #1
  00ec0	e183e801	 orr         lr, r3, r1, lsl #16
  00ec4	e59d301c	 ldr         r3, [sp, #0x1C]
  00ec8	e2431001	 sub         r1, r3, #1
  00ecc	e2243e1e	 eor         r3, r4, #0x1E, 28
  00ed0	e0023003	 and         r3, r2, r3
  00ed4	e1833008	 orr         r3, r3, r8
  00ed8	e580315c	 str         r3, [r0, #0x15C]
  00edc	e5952008	 ldr         r2, [r5, #8]
  00ee0	e24b3001	 sub         r3, r11, #1
  00ee4	e1831801	 orr         r1, r3, r1, lsl #16
  00ee8	e582e158	 str         lr, [r2, #0x158]
  00eec	e5953008	 ldr         r3, [r5, #8]
  00ef0	e59d202c	 ldr         r2, [sp, #0x2C]
  00ef4	e59d0020	 ldr         r0, [sp, #0x20]
  00ef8	e5831174	 str         r1, [r3, #0x174]
  00efc	e5953008	 ldr         r3, [r5, #8]
  00f00	e180e802	 orr         lr, r0, r2, lsl #16
  00f04	e59d8030	 ldr         r8, [sp, #0x30]
  00f08	e583e154	 str         lr, [r3, #0x154]
  00f0c	e5963000	 ldr         r3, [r6]
  00f10	e1a02009	 mov         r2, r9
  00f14	e1a01008	 mov         r1, r8
  00f18	e5933018	 ldr         r3, [r3, #0x18]
  00f1c	e1a00006	 mov         r0, r6
  00f20	e1a0e00f	 mov         lr, pc
  00f24	e12fff13	 bx          r3
  00f28	e5953008	 ldr         r3, [r5, #8]

; 2087 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  00f2c	e1a02009	 mov         r2, r9
  00f30	e1a01008	 mov         r1, r8
  00f34	e583016c	 str         r0, [r3, #0x16C]
  00f38	e5963000	 ldr         r3, [r6]
  00f3c	e1a00006	 mov         r0, r6
  00f40	e593301c	 ldr         r3, [r3, #0x1C]
  00f44	e1a0e00f	 mov         lr, pc
  00f48	e12fff13	 bx          r3
  00f4c	e595e008	 ldr         lr, [r5, #8]

; 2088 : 
; 2089 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA0, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  00f50	e3a03000	 mov         r3, #0
  00f54	e1a02009	 mov         r2, r9
  00f58	e58e0168	 str         r0, [lr, #0x168]
  00f5c	e5960000	 ldr         r0, [r6]
  00f60	e1a01008	 mov         r1, r8
  00f64	e5904014	 ldr         r4, [r0, #0x14]
  00f68	e1a00006	 mov         r0, r6
  00f6c	e1a0e00f	 mov         lr, pc
  00f70	e12fff14	 bx          r4
  00f74	e59d3058	 ldr         r3, [sp, #0x58]
  00f78	e595e008	 ldr         lr, [r5, #8]

; 2090 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  00f7c	e1a02009	 mov         r2, r9
  00f80	e0803003	 add         r3, r0, r3
  00f84	e58e314c	 str         r3, [lr, #0x14C]
  00f88	e5960000	 ldr         r0, [r6]
  00f8c	e3a03000	 mov         r3, #0
  00f90	e1a01008	 mov         r1, r8
  00f94	e5904014	 ldr         r4, [r0, #0x14]
  00f98	e1a00006	 mov         r0, r6
  00f9c	e1a0e00f	 mov         lr, pc
  00fa0	e12fff14	 bx          r4
  00fa4	e5953008	 ldr         r3, [r5, #8]

; 2091 : 
; 2092 :         //  Initialize FIR accumulators
; 2093 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ACCU0,
; 2094 :                     dwAccum0
; 2095 :                     );
; 2096 : 
; 2097 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ACCU1,
; 2098 :                     dwAccum1
; 2099 :                     );
; 2100 : 
; 2101 :         //  Set FIR increment value and coeffs
; 2102 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.FIR,
; 2103 :                     DISPC_VID_FIR_VIDFIRHINC(dwHorzScale) |
; 2104 :                     DISPC_VID_FIR_VIDFIRVINC(dwVertScale)
; 2105 :                     );

  00fa8	e59d2010	 ldr         r2, [sp, #0x10]
  00fac	e59d1008	 ldr         r1, [sp, #8]
  00fb0	e5830150	 str         r0, [r3, #0x150]
  00fb4	e5953008	 ldr         r3, [r5, #8]
  00fb8	e1812802	 orr         r2, r1, r2, lsl #16
  00fbc	e59d1054	 ldr         r1, [sp, #0x54]
  00fc0	e59de000	 ldr         lr, [sp]
  00fc4	e3a04000	 mov         r4, #0
  00fc8	e5831178	 str         r1, [r3, #0x178]
  00fcc	e5953008	 ldr         r3, [r5, #8]
  00fd0	e3a01000	 mov         r1, #0
  00fd4	e3a08c02	 mov         r8, #2, 24
  00fd8	e583117c	 str         r1, [r3, #0x17C]
  00fdc	e5953008	 ldr         r3, [r5, #8]
  00fe0	e5832170	 str         r2, [r3, #0x170]
  00fe4		 |$LL3@SetScaling|

; 2106 : 
; 2107 :         for( i = 0; i < NUM_SCALING_PHASES; i++ )
; 2108 :         {
; 2109 :             //  OR the horiz and vert coeff values b/c some registers span both H and V coeffs
; 2110 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.aFIR_COEF[i].ulH,
; 2111 :                         *pHorizCoeffs++ | *pVertCoeffs++
; 2112 :                         );

  00fe4	e5953008	 ldr         r3, [r5, #8]
  00fe8	e4970004	 ldr         r0, [r7], #4
  00fec	e49e2004	 ldr         r2, [lr], #4
  00ff0	e0831004	 add         r1, r3, r4
  00ff4	e1803002	 orr         r3, r0, r2
  00ff8	e5813180	 str         r3, [r1, #0x180]

; 2113 : 
; 2114 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.aFIR_COEF[i].ulHV,
; 2115 :                         *pHorizCoeffs++ | *pVertCoeffs++
; 2116 :                         );

  00ffc	e5953008	 ldr         r3, [r5, #8]
  01000	e4970004	 ldr         r0, [r7], #4
  01004	e49e2004	 ldr         r2, [lr], #4
  01008	e0831004	 add         r1, r3, r4
  0100c	e2844008	 add         r4, r4, #8

; 2117 : 
; 2118 :             OUTREG32( &m_pDispRegs->DISPC_VID2_FIR_COEF_V[i],
; 2119 :                         *pHorizCoeffs++ | *pVertCoeffs++
; 2120 :                         );

  01010	e3540040	 cmp         r4, #0x40
  01014	e1803002	 orr         r3, r0, r2
  01018	e5813184	 str         r3, [r1, #0x184]
  0101c	e4972004	 ldr         r2, [r7], #4
  01020	e49e3004	 ldr         r3, [lr], #4
  01024	e5951008	 ldr         r1, [r5, #8]
  01028	e1823003	 orr         r3, r2, r3
  0102c	e7813008	 str         r3, [r1, +r8]
  01030	e2888004	 add         r8, r8, #4
  01034	3affffea	 bcc         |$LL3@SetScaling|

; 1164 : {

  01038	e59d4024	 ldr         r4, [sp, #0x24]
  0103c		 |$LN1@SetScaling|

; 2121 :         }
; 2122 : 
; 2123 :         Dump_DISPC_VID( &m_pDispRegs->tDISPC_VID2, (UINT32*) &m_pDispRegs->DISPC_VID2_FIR_COEF_V[0], 2 );
; 2124 :     }
; 2125 : 
; 2126 : 
; 2127 :     //  Update output width and height
; 2128 :     g_rgPipelineMapping[ePipeline].dwDestWidth  = dwDestWidth;
; 2129 :     g_rgPipelineMapping[ePipeline].dwDestHeight = dwDestHeight;
; 2130 : 
; 2131 :     //  Cache the decimation factors applied to the source surface
; 2132 :     g_rgPipelineScaling[ePipeline].dwHorzScaling = dwHorzDecimation;

  0103c	e59fe090	 ldr         lr, [pc, #0x90]
  01040	e59d300c	 ldr         r3, [sp, #0xC]
  01044	e59f1084	 ldr         r1, [pc, #0x84]
  01048	e08e0284	 add         r0, lr, r4, lsl #5

; 2133 :     g_rgPipelineScaling[ePipeline].dwVertScaling = dwVertDecimation;

  0104c	e59de014	 ldr         lr, [sp, #0x14]
  01050	e0842084	 add         r2, r4, r4, lsl #1
  01054	e5803014	 str         r3, [r0, #0x14]
  01058	e0813102	 add         r3, r1, r2, lsl #2
  0105c	e583e004	 str         lr, [r3, #4]

; 2134 :     g_rgPipelineScaling[ePipeline].dwInterlace   = dwInterlace;

  01060	e59de058	 ldr         lr, [sp, #0x58]
  01064	e583e008	 str         lr, [r3, #8]
  01068	e59d3018	 ldr         r3, [sp, #0x18]
  0106c	e5803018	 str         r3, [r0, #0x18]
  01070	e59d3028	 ldr         r3, [sp, #0x28]

; 2135 : 
; 2136 :     //  Set the decimation factors for the surface back to normal
; 2137 :     pSurface->SetHorizontalScaling( 1 );

  01074	e1a00006	 mov         r0, r6
  01078	e7813102	 str         r3, [r1, +r2, lsl #2]
  0107c	e5963000	 ldr         r3, [r6]
  01080	e3a01001	 mov         r1, #1
  01084	e5933030	 ldr         r3, [r3, #0x30]
  01088	e1a0e00f	 mov         lr, pc
  0108c	e12fff13	 bx          r3

; 2138 :     pSurface->SetVerticalScaling( 1 );

  01090	e5963000	 ldr         r3, [r6]
  01094	e3a01001	 mov         r1, #1
  01098	e1a00006	 mov         r0, r6
  0109c	e5933034	 ldr         r3, [r3, #0x34]
  010a0	e1a0e00f	 mov         lr, pc
  010a4	e12fff13	 bx          r3

; 2139 : 
; 2140 : 
; 2141 :     //  Result
; 2142 :     bResult = TRUE;

  010a8	e3a03001	 mov         r3, #1
  010ac	e58d3010	 str         r3, [sp, #0x10]
  010b0		 |$cleanUp$38416|

; 2143 : 
; 2144 : cleanUp:
; 2145 :     //  Release regs
; 2146 :     ReleaseRegs();

  010b0	e2850e49	 add         r0, r5, #0x49, 28
  010b4	eb000000	 bl          LeaveCriticalSection

; 2147 : 
; 2148 :     //  Return result
; 2149 :     return bResult;

  010b8	e59d0160	 ldr         r0, [sp, #0x160]
  010bc	eb000000	 bl          __security_check_cookie

; 2150 : }

  010c0	e59d0010	 ldr         r0, [sp, #0x10]
  010c4	e28ddf59	 add         sp, sp, #0x59, 30
  010c8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  010cc	e12fff1e	 bx          lr
  010d0		 |$LN230@SetScaling|
  010d0		 |$LN231@SetScaling|
  010d0	00000000	 DCD         |?g_rgPipelineScaling@@3PAUOMAPPipelineScaling@@A|
  010d4		 |$LN232@SetScaling|
  010d4	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  010d8		 |$LN233@SetScaling|
  010d8	00000000	 DCD         |??_C@_1JI@NGBENMPF@?$AAS?$AAe?$AAt?$AAS?$AAc?$AAa?$AAl?$AAi?$AAn?$AAg?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAs?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg@|
  010dc		 |$LN234@SetScaling|
  010dc	00000000	 DCD         |?g_dwScalingCoeff_Vert_Down_5_Taps@@3PAKA|
  010e0		 |$LN235@SetScaling|
  010e0	00000000	 DCD         |?g_dwScalingCoeff_Vert_Down_3_Taps@@3PAKA|
  010e4		 |$LN236@SetScaling|
  010e4	00000000	 DCD         |?g_dwScalingCoeff_Vert_Up_3_Taps@@3PAKA|
  010e8		 |$LN237@SetScaling|
  010e8	00000000	 DCD         |?g_dwScalingCoeff_Horiz_Up@@3PAKA|
  010ec		 |$LN238@SetScaling|
  010ec	00000000	 DCD         |?g_dwScalingCoeff_Horiz_Down@@3PAKA|
  010f0		 |$LN239@SetScaling|
  010f0	aaaaaaab	 DCD         0xaaaaaaab
  010f4		 |$M41558|

			 ENDP  ; |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|, OMAPDisplayController::SetScalingAttribs

	EXPORT	|?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z| ; OMAPDisplayController::FlipPipeline

  00000			 AREA	 |.pdata|, PDATA
|$T41613| DCD	|$LN29@FlipPipeli|
	DCD	0x4000c302
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z| PROC ; OMAPDisplayController::FlipPipeline

; 2558 : {

  00000		 |$LN29@FlipPipeli|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M41610|
  00008	e1a06002	 mov         r6, r2
  0000c	e1a08001	 mov         r8, r1
  00010	e1a07000	 mov         r7, r0

; 2559 :     BOOL    bResult = FALSE;
; 2560 :     DWORD   dwDestGo;
; 2561 :     OMAP_DSS_ROTATION   eRotation;
; 2562 :     BOOL                bMirror;
; 2563 :     DWORD               dwInterlace;
; 2564 : 
; 2565 : 
; 2566 :     //  Check if pipeline is already enabled; if not, no reason to flip
; 2567 :     if( g_rgPipelineMapping[ePipeline].bEnabled == FALSE )

  00014	e59f42ec	 ldr         r4, [pc, #0x2EC]
  00018	e3a0a000	 mov         r10, #0
  0001c	e7943288	 ldr         r3, [r4, +r8, lsl #5]
  00020	e3530000	 cmp         r3, #0

; 2568 :         return FALSE;

  00024	03a0a000	 moveq       r10, #0
  00028	0a0000b1	 beq         |$LN15@FlipPipeli|

; 2569 : 
; 2570 :     //  Access the regs
; 2571 :     if( AccessRegs() == FALSE )

  0002c	e1a00007	 mov         r0, r7
  00030	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00034	e3500000	 cmp         r0, #0
  00038	0a0000ab	 beq         |$cleanUp$38807|

; 2572 :         goto cleanUp;
; 2573 : 
; 2574 :         
; 2575 :     //  Get rotation and mirror settings for pipeline output
; 2576 :     eRotation = g_rgPipelineMapping[ePipeline].eRotation;
; 2577 :     bMirror   = g_rgPipelineMapping[ePipeline].bMirror;
; 2578 :     dwInterlace = g_rgPipelineScaling[ePipeline].dwInterlace;
; 2579 : 
; 2580 :     //Update clipping rectangle
; 2581 : #pragma warning(push)
; 2582 : #pragma warning(disable:4238)
; 2583 :     pSurface->SetClipping(&(g_rgPipelineMapping[ePipeline].pSurface->GetClipping()));    

  0003c	e59f22c0	 ldr         r2, [pc, #0x2C0]
  00040	e0849288	 add         r9, r4, r8, lsl #5
  00044	e5990008	 ldr         r0, [r9, #8]
  00048	e0883088	 add         r3, r8, r8, lsl #1
  0004c	e0822103	 add         r2, r2, r3, lsl #2
  00050	e590e000	 ldr         lr, [r0]
  00054	e5922008	 ldr         r2, [r2, #8]
  00058	e599500c	 ldr         r5, [r9, #0xC]
  0005c	e59e3028	 ldr         r3, [lr, #0x28]
  00060	e599b010	 ldr         r11, [r9, #0x10]
  00064	e58d2000	 str         r2, [sp]
  00068	e28d1008	 add         r1, sp, #8
  0006c	e58d5004	 str         r5, [sp, #4]
  00070	e1a0e00f	 mov         lr, pc
  00074	e12fff13	 bx          r3
  00078	e5963000	 ldr         r3, [r6]
  0007c	e1a01000	 mov         r1, r0
  00080	e1a00006	 mov         r0, r6
  00084	e5933020	 ldr         r3, [r3, #0x20]
  00088	e1a0e00f	 mov         lr, pc
  0008c	e12fff13	 bx          r3

; 2584 : 
; 2585 :     /* check for resizer */
; 2586 :     if (pSurface->isResizerEnabled())

  00090	e5963030	 ldr         r3, [r6, #0x30]
  00094	e3530000	 cmp         r3, #0
  00098	0a000023	 beq         |$LN11@FlipPipeli|

; 2587 :     {
; 2588 :         pSurface->OmapAssocSurface()->SetClipping(
; 2589 :             &(g_rgPipelineMapping[ePipeline].pSurface->OmapAssocSurface()->GetClipping()));

  0009c	e5993008	 ldr         r3, [r9, #8]
  000a0	e28d1008	 add         r1, sp, #8
  000a4	e59300a0	 ldr         r0, [r3, #0xA0]
  000a8	e5903000	 ldr         r3, [r0]
  000ac	e5933028	 ldr         r3, [r3, #0x28]
  000b0	e1a0e00f	 mov         lr, pc
  000b4	e12fff13	 bx          r3
  000b8	e59620a0	 ldr         r2, [r6, #0xA0]
  000bc	e1a01000	 mov         r1, r0
  000c0	e5923000	 ldr         r3, [r2]
  000c4	e1a00002	 mov         r0, r2
  000c8	e5933020	 ldr         r3, [r3, #0x20]
  000cc	e1a0e00f	 mov         lr, pc
  000d0	e12fff13	 bx          r3

; 2590 :         pSurface->StartResizer(pSurface->PhysicalAddr(OMAP_DSS_ROTATION_0, bMirror,OMAP_ASSOC_SURF_FORCE_OFF), //input
; 2591 :                                pSurface->OmapAssocSurface()->PhysicalAddr(OMAP_DSS_ROTATION_0, bMirror,OMAP_ASSOC_SURF_FORCE_OFF));            

  000d4	e59600a0	 ldr         r0, [r6, #0xA0]
  000d8	e3a03001	 mov         r3, #1
  000dc	e1a0200b	 mov         r2, r11
  000e0	e590e000	 ldr         lr, [r0]
  000e4	e3a01000	 mov         r1, #0
  000e8	e59e4014	 ldr         r4, [lr, #0x14]
  000ec	e1a0e00f	 mov         lr, pc
  000f0	e12fff14	 bx          r4
  000f4	e5962000	 ldr         r2, [r6]
  000f8	e1a05000	 mov         r5, r0
  000fc	e3a03001	 mov         r3, #1
  00100	e5924014	 ldr         r4, [r2, #0x14]
  00104	e1a0200b	 mov         r2, r11
  00108	e3a01000	 mov         r1, #0
  0010c	e1a00006	 mov         r0, r6
  00110	e1a0e00f	 mov         lr, pc
  00114	e12fff14	 bx          r4
  00118	e1a01000	 mov         r1, r0
  0011c	e1a00006	 mov         r0, r6
  00120	e1a02005	 mov         r2, r5
  00124	eb000000	 bl          |?StartResizer@OMAPSurface@@QAAHKK@Z|
  00128	e59d5004	 ldr         r5, [sp, #4]
  0012c		 |$LN11@FlipPipeli|

; 2592 :     }
; 2593 : #pragma warning(pop)    
; 2594 : 
; 2595 :     //  Update GFX pipeline display base address
; 2596 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  0012c	e3580000	 cmp         r8, #0
  00130	1a000015	 bne         |$LN10@FlipPipeli|

; 2597 :     {
; 2598 :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA0, pSurface->PhysicalAddr(eRotation, bMirror) );

  00134	e5961000	 ldr         r1, [r6]
  00138	e3a03000	 mov         r3, #0
  0013c	e1a0200b	 mov         r2, r11
  00140	e5914014	 ldr         r4, [r1, #0x14]
  00144	e1a01005	 mov         r1, r5
  00148	e1a00006	 mov         r0, r6
  0014c	e1a0e00f	 mov         lr, pc
  00150	e12fff14	 bx          r4
  00154	e5972008	 ldr         r2, [r7, #8]

; 2599 :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA1, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  00158	e3a03000	 mov         r3, #0
  0015c	e1a01005	 mov         r1, r5
  00160	e5820080	 str         r0, [r2, #0x80]
  00164	e5960000	 ldr         r0, [r6]
  00168	e1a0200b	 mov         r2, r11
  0016c	e5904014	 ldr         r4, [r0, #0x14]
  00170	e1a00006	 mov         r0, r6
  00174	e1a0e00f	 mov         lr, pc
  00178	e12fff14	 bx          r4
  0017c	e59d3000	 ldr         r3, [sp]
  00180	e5972008	 ldr         r2, [r7, #8]
  00184	e0803003	 add         r3, r0, r3
  00188	e5823084	 str         r3, [r2, #0x84]
  0018c		 |$LN10@FlipPipeli|

; 2600 :     }    
; 2601 : 
; 2602 :     //  Update VID1 pipeline display base address
; 2603 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  0018c	e3580001	 cmp         r8, #1
  00190	1a000015	 bne         |$LN9@FlipPipeli|

; 2604 :     {
; 2605 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA0, pSurface->PhysicalAddr(eRotation, bMirror)+ dwInterlace );

  00194	e5961000	 ldr         r1, [r6]
  00198	e3a03000	 mov         r3, #0
  0019c	e1a0200b	 mov         r2, r11
  001a0	e5914014	 ldr         r4, [r1, #0x14]
  001a4	e1a01005	 mov         r1, r5
  001a8	e1a00006	 mov         r0, r6
  001ac	e1a0e00f	 mov         lr, pc
  001b0	e12fff14	 bx          r4
  001b4	e59d3000	 ldr         r3, [sp]
  001b8	e5972008	 ldr         r2, [r7, #8]
  001bc	e0803003	 add         r3, r0, r3
  001c0	e58230bc	 str         r3, [r2, #0xBC]

; 2606 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );        

  001c4	e5961000	 ldr         r1, [r6]
  001c8	e3a03000	 mov         r3, #0
  001cc	e1a0200b	 mov         r2, r11
  001d0	e5914014	 ldr         r4, [r1, #0x14]
  001d4	e1a01005	 mov         r1, r5
  001d8	e1a00006	 mov         r0, r6
  001dc	e1a0e00f	 mov         lr, pc
  001e0	e12fff14	 bx          r4
  001e4	e5973008	 ldr         r3, [r7, #8]
  001e8	e58300c0	 str         r0, [r3, #0xC0]
  001ec		 |$LN9@FlipPipeli|

; 2607 :     }    
; 2608 : 
; 2609 :     //  Update VID2 pipeline display base address
; 2610 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  001ec	e3580002	 cmp         r8, #2
  001f0	1a000015	 bne         |$LN8@FlipPipeli|

; 2611 :     {
; 2612 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA0, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  001f4	e5960000	 ldr         r0, [r6]
  001f8	e3a03000	 mov         r3, #0
  001fc	e1a0200b	 mov         r2, r11
  00200	e5904014	 ldr         r4, [r0, #0x14]
  00204	e1a00006	 mov         r0, r6
  00208	e1a01005	 mov         r1, r5
  0020c	e1a0e00f	 mov         lr, pc
  00210	e12fff14	 bx          r4
  00214	e59d3000	 ldr         r3, [sp]
  00218	e597e008	 ldr         lr, [r7, #8]

; 2613 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  0021c	e1a0200b	 mov         r2, r11
  00220	e0803003	 add         r3, r0, r3
  00224	e58e314c	 str         r3, [lr, #0x14C]
  00228	e5960000	 ldr         r0, [r6]
  0022c	e3a03000	 mov         r3, #0
  00230	e1a01005	 mov         r1, r5
  00234	e5904014	 ldr         r4, [r0, #0x14]
  00238	e1a00006	 mov         r0, r6
  0023c	e1a0e00f	 mov         lr, pc
  00240	e12fff14	 bx          r4
  00244	e5973008	 ldr         r3, [r7, #8]
  00248	e5830150	 str         r0, [r3, #0x150]
  0024c		 |$LN8@FlipPipeli|

; 2614 :     }    
; 2615 : 
; 2616 :         
; 2617 :     //  Get the destination for the pipeline
; 2618 :     switch( g_rgPipelineMapping[ePipeline].eDestination )

  0024c	e5993004	 ldr         r3, [r9, #4]
  00250	e3530000	 cmp         r3, #0
  00254	0a000003	 beq         |$LN5@FlipPipeli|
  00258	e3530001	 cmp         r3, #1
  0025c	1a000022	 bne         |$cleanUp$38807|

; 2623 :             break;
; 2624 : 
; 2625 :         case OMAP_DSS_DESTINATION_TVOUT:
; 2626 :             //  Set go bit for TV Out
; 2627 :             dwDestGo  = DISPC_CONTROL_GODIGITAL;

  00260	e3a01040	 mov         r1, #0x40

; 2628 :             break;

  00264	ea000000	 b           |$LN6@FlipPipeli|
  00268		 |$LN5@FlipPipeli|

; 2619 :     {
; 2620 :         case OMAP_DSS_DESTINATION_LCD:
; 2621 :             //  Set go bit for LCD
; 2622 :             dwDestGo  = DISPC_CONTROL_GOLCD;

  00268	e3a01020	 mov         r1, #0x20
  0026c		 |$LN6@FlipPipeli|

; 2629 : 
; 2630 :         default:
; 2631 :             ASSERT(0);
; 2632 :             goto cleanUp;
; 2633 :     }
; 2634 : 
; 2635 :     //Clear Vysnc since we are about to flip (to avoid false signaling Vsync event)
; 2636 :     SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_VSYNC);

  0026c	e5972008	 ldr         r2, [r7, #8]

; 2637 :     if(m_bTVEnable == TRUE)
; 2638 :     {
; 2639 :         SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_EVSYNC_EVEN);
; 2640 :         SETREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_EVSYNC_ODD);        
; 2641 :     }
; 2642 :     //  Flush the shadow registers
; 2643 :     FlushRegs( dwDestGo );

  00270	e1a00007	 mov         r0, r7
  00274	e5923018	 ldr         r3, [r2, #0x18]
  00278	e3833002	 orr         r3, r3, #2
  0027c	e5823018	 str         r3, [r2, #0x18]
  00280	e59734b8	 ldr         r3, [r7, #0x4B8]
  00284	e3530001	 cmp         r3, #1
  00288	05972008	 ldreq       r2, [r7, #8]
  0028c	05923018	 ldreq       r3, [r2, #0x18]
  00290	03833004	 orreq       r3, r3, #4
  00294	05823018	 streq       r3, [r2, #0x18]
  00298	05972008	 ldreq       r2, [r7, #8]
  0029c	05923018	 ldreq       r3, [r2, #0x18]
  002a0	03833008	 orreq       r3, r3, #8
  002a4	05823018	 streq       r3, [r2, #0x18]
  002a8	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 2644 :     
; 2645 :     //  Update mapping of pipeline surface    
; 2646 :     g_rgPipelineMapping[ePipeline].pOldSurface = g_rgPipelineMapping[ePipeline].pSurface;

  002ac	e5993008	 ldr         r3, [r9, #8]

; 2647 :     g_rgPipelineMapping[ePipeline].pSurface  = pSurface;

  002b0	e5896008	 str         r6, [r9, #8]

; 2648 :     
; 2649 :     //  Set the decimation factors for the surface back to normal
; 2650 :     //  Leave the clipping setting as is
; 2651 :     pSurface->SetHorizontalScaling( 1 );

  002b4	e3a01001	 mov         r1, #1
  002b8	e589301c	 str         r3, [r9, #0x1C]
  002bc	e5963000	 ldr         r3, [r6]
  002c0	e1a00006	 mov         r0, r6
  002c4	e5933030	 ldr         r3, [r3, #0x30]
  002c8	e1a0e00f	 mov         lr, pc
  002cc	e12fff13	 bx          r3

; 2652 :     pSurface->SetVerticalScaling( 1 );

  002d0	e5963000	 ldr         r3, [r6]
  002d4	e3a01001	 mov         r1, #1
  002d8	e1a00006	 mov         r0, r6
  002dc	e5933034	 ldr         r3, [r3, #0x34]
  002e0	e1a0e00f	 mov         lr, pc
  002e4	e12fff13	 bx          r3

; 2653 : 
; 2654 : 
; 2655 :     //  Result
; 2656 :     bResult = TRUE;         

  002e8	e3a0a001	 mov         r10, #1
  002ec		 |$cleanUp$38807|

; 2657 : 
; 2658 : cleanUp:    
; 2659 :     //  Release regs
; 2660 :     ReleaseRegs();

  002ec	e2870e49	 add         r0, r7, #0x49, 28
  002f0	eb000000	 bl          LeaveCriticalSection

; 2661 :     
; 2662 :     //  Return result
; 2663 :     return bResult;

  002f4		 |$LN15@FlipPipeli|

; 2664 : }

  002f4	e1a0000a	 mov         r0, r10
  002f8	e28dd018	 add         sp, sp, #0x18
  002fc	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00300	e12fff1e	 bx          lr
  00304		 |$LN30@FlipPipeli|
  00304		 |$LN31@FlipPipeli|
  00304	00000000	 DCD         |?g_rgPipelineScaling@@3PAUOMAPPipelineScaling@@A|
  00308		 |$LN32@FlipPipeli|
  00308	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  0030c		 |$M41611|

			 ENDP  ; |?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z|, OMAPDisplayController::FlipPipeline

	EXPORT	|?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z| ; OMAPDisplayController::IsPipelineFlipping

  00000			 AREA	 |.pdata|, PDATA
|$T41647| DCD	|$LN30@IsPipeline|
	DCD	0x40004e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z| PROC ; OMAPDisplayController::IsPipelineFlipping

; 2673 : {

  00000		 |$LN30@IsPipeline|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M41644|
  00004	e1a09003	 mov         r9, r3
  00008	e1a0b002	 mov         r11, r2
  0000c	e1a05001	 mov         r5, r1
  00010	e1a07000	 mov         r7, r0

; 2674 :     BOOL                bResult = FALSE;
; 2675 :     OMAP_DSS_ROTATION   eRotation;
; 2676 :     BOOL                bMirror;
; 2677 :     DWORD               dwDestGo = DISPC_CONTROL_GOLCD;
; 2678 :     
; 2679 :     BOOL                bDestGoStatus = FALSE;
; 2680 : 
; 2681 :      //  Check if pipeline is already enabled; if not, no reason to query flip status
; 2682 :     if( g_rgPipelineMapping[ePipeline].bEnabled == FALSE )

  00014	e59f8118	 ldr         r8, [pc, #0x118]
  00018	e3a04000	 mov         r4, #0
  0001c	e3a06020	 mov         r6, #0x20
  00020	e798e285	 ldr         lr, [r8, +r5, lsl #5]
  00024	e35e0000	 cmp         lr, #0

; 2683 :         return FALSE;

  00028	03a04000	 moveq       r4, #0
  0002c	0a00003d	 beq         |$LN14@IsPipeline|

; 2684 : 
; 2685 :     //  Access the regs
; 2686 :     if( AccessRegs() == FALSE )

  00030	e1a00007	 mov         r0, r7
  00034	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00038	e3500000	 cmp         r0, #0
  0003c	0a000037	 beq         |$cleanUp$38859|

; 2687 :         goto cleanUp;
; 2688 : 
; 2689 :     //  Get rotation and mirror settings for pipeline output
; 2690 :     eRotation   = g_rgPipelineMapping[ePipeline].eRotation;

  00040	e0883285	 add         r3, r8, r5, lsl #5

; 2691 :     bMirror     = g_rgPipelineMapping[ePipeline].bMirror;
; 2692 : 
; 2693 :     //  Get the destination for the pipeline
; 2694 :     switch( g_rgPipelineMapping[ePipeline].eDestination )

  00044	e5932004	 ldr         r2, [r3, #4]
  00048	e593800c	 ldr         r8, [r3, #0xC]
  0004c	e593a010	 ldr         r10, [r3, #0x10]
  00050	e3520000	 cmp         r2, #0
  00054	0a000003	 beq         |$LN8@IsPipeline|
  00058	e3520001	 cmp         r2, #1
  0005c	1a000002	 bne         |$LN9@IsPipeline|

; 2699 :             break;
; 2700 : 
; 2701 :         case OMAP_DSS_DESTINATION_TVOUT:
; 2702 :             //  Set go bit for TV Out
; 2703 :             dwDestGo  = DISPC_CONTROL_GODIGITAL;

  00060	e3a06040	 mov         r6, #0x40

; 2704 :             break;

  00064	ea000000	 b           |$LN9@IsPipeline|
  00068		 |$LN8@IsPipeline|

; 2695 :     {
; 2696 :         case OMAP_DSS_DESTINATION_LCD:
; 2697 :             //  Set go bit for LCD
; 2698 :             dwDestGo  = DISPC_CONTROL_GOLCD;

  00068	e3a06020	 mov         r6, #0x20
  0006c		 |$LN9@IsPipeline|

; 2705 :     }
; 2706 : 
; 2707 :     //Test if we have already flipped (destGo has been cleared)
; 2708 :     bDestGoStatus = ((INREG32(&m_pDispRegs->DISPC_CONTROL) & dwDestGo) == dwDestGo);

  0006c	e5973008	 ldr         r3, [r7, #8]
  00070	e5933040	 ldr         r3, [r3, #0x40]
  00074	e0033006	 and         r3, r3, r6
  00078	e1530006	 cmp         r3, r6
  0007c	03a04001	 moveq       r4, #1
  00080	13a04000	 movne       r4, #0

; 2709 :     
; 2710 :     if (!matchExactSurface)

  00084	e3590000	 cmp         r9, #0

; 2746 : 
; 2747 : cleanUp:

  00088	0a000024	 beq         |$cleanUp$38859|

; 2711 :     {
; 2712 :         /* return value based on Go bit only */
; 2713 :         bResult=bDestGoStatus;
; 2714 :         goto cleanUp;
; 2715 :     }
; 2716 : 
; 2717 :     /* else check for BA0 and pOldSurface */
; 2718 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  0008c	e3550000	 cmp         r5, #0
  00090	1a000009	 bne         |$LN18@IsPipeline|

; 2719 :     {
; 2720 :         bResult = (INREG32(&m_pDispRegs->DISPC_GFX_BA0) == pSurface->PhysicalAddr(eRotation, bMirror));            

  00094	e59b1000	 ldr         r1, [r11]
  00098	e3a03000	 mov         r3, #0
  0009c	e1a0200a	 mov         r2, r10
  000a0	e5914014	 ldr         r4, [r1, #0x14]
  000a4	e1a01008	 mov         r1, r8
  000a8	e1a0000b	 mov         r0, r11
  000ac	e1a0e00f	 mov         lr, pc
  000b0	e12fff14	 bx          r4
  000b4	e5973008	 ldr         r3, [r7, #8]
  000b8	e5933080	 ldr         r3, [r3, #0x80]
  000bc		 |$LN18@IsPipeline|

; 2721 :     }
; 2722 : 
; 2723 :     //  check VID1 pipeline display base address
; 2724 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  000bc	e3550001	 cmp         r5, #1
  000c0	1a000009	 bne         |$LN20@IsPipeline|

; 2725 :     {
; 2726 :         bResult = INREG32(&m_pDispRegs->tDISPC_VID1.BA1) == pSurface->PhysicalAddr(eRotation, bMirror);

  000c4	e59b0000	 ldr         r0, [r11]
  000c8	e3a03000	 mov         r3, #0
  000cc	e1a0200a	 mov         r2, r10
  000d0	e5904014	 ldr         r4, [r0, #0x14]
  000d4	e1a0000b	 mov         r0, r11
  000d8	e1a01008	 mov         r1, r8
  000dc	e1a0e00f	 mov         lr, pc
  000e0	e12fff14	 bx          r4
  000e4	e5973008	 ldr         r3, [r7, #8]
  000e8	e59330c0	 ldr         r3, [r3, #0xC0]
  000ec		 |$LN20@IsPipeline|

; 2727 :     }
; 2728 : 
; 2729 :     //  check VID2 pipeline display base address
; 2730 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  000ec	e3550002	 cmp         r5, #2
  000f0	1a000009	 bne         |$LN22@IsPipeline|

; 2731 :     {
; 2732 :         bResult = INREG32(&m_pDispRegs->tDISPC_VID2.BA1) == pSurface->PhysicalAddr(eRotation, bMirror);

  000f4	e59b0000	 ldr         r0, [r11]
  000f8	e3a03000	 mov         r3, #0
  000fc	e1a0200a	 mov         r2, r10
  00100	e5904014	 ldr         r4, [r0, #0x14]
  00104	e1a0000b	 mov         r0, r11
  00108	e1a01008	 mov         r1, r8
  0010c	e1a0e00f	 mov         lr, pc
  00110	e12fff14	 bx          r4
  00114	e5973008	 ldr         r3, [r7, #8]
  00118	e5933150	 ldr         r3, [r3, #0x150]
  0011c		 |$LN22@IsPipeline|

; 2733 :     }
; 2734 :     
; 2735 :     //Test if we have are flipping (destGo has not been cleared)
; 2736 :     if(bDestGoStatus)
; 2737 :     {       
; 2738 :         /* Since destGo is pending the shadow register is different than actual BA0 being DMA'ed out.
; 2739 :            So compare the surfaces. The g_rgPipelineMapping.pOldSurface stores the actual surface being DMA'ed out if the GO Bit is not cleared*/        
; 2740 :         bResult |= (g_rgPipelineMapping[ePipeline].pOldSurface == pSurface);
; 2741 :     }       
; 2742 :     
; 2743 : 
; 2744 :     //  Result
; 2745 :     bResult = TRUE;

  0011c	e3a04001	 mov         r4, #1
  00120		 |$cleanUp$38859|

; 2748 :     //  Release regs
; 2749 :     ReleaseRegs();

  00120	e2870e49	 add         r0, r7, #0x49, 28
  00124	eb000000	 bl          LeaveCriticalSection

; 2750 : 
; 2751 :     //  Return result
; 2752 :     return bResult;

  00128		 |$LN14@IsPipeline|

; 2753 : 
; 2754 : }

  00128	e1a00004	 mov         r0, r4
  0012c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00130	e12fff1e	 bx          lr
  00134		 |$LN31@IsPipeline|
  00134		 |$LN32@IsPipeline|
  00134	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  00138		 |$M41645|

			 ENDP  ; |?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z|, OMAPDisplayController::IsPipelineFlipping

	EXPORT	|?MovePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@JJ@Z| ; OMAPDisplayController::MovePipeline

  00000			 AREA	 |.pdata|, PDATA
|$T41685| DCD	|$LN33@MovePipeli|
	DCD	0x40005301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MovePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@JJ@Z| PROC ; OMAPDisplayController::MovePipeline

; 2762 : {

  00000		 |$LN33@MovePipeli|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M41682|
  00004	e1a09003	 mov         r9, r3
  00008	e1a05002	 mov         r5, r2
  0000c	e1a07001	 mov         r7, r1
  00010	e1a04000	 mov         r4, r0

; 2763 :     BOOL    bResult = FALSE;
; 2764 :     DWORD   dwDestGo = DISPC_CONTROL_GOLCD;
; 2765 :     DWORD   dwX, dwY;
; 2766 :     
; 2767 : 
; 2768 :     //  Check if pipeline is enabled; ignore operation if not
; 2769 :     if( g_rgPipelineMapping[ePipeline].bEnabled == FALSE )

  00014	e59fa12c	 ldr         r10, [pc, #0x12C]
  00018	e3a06000	 mov         r6, #0
  0001c	e3a08020	 mov         r8, #0x20
  00020	e79ae287	 ldr         lr, [r10, +r7, lsl #5]
  00024	e35e0000	 cmp         lr, #0

; 2770 :         return FALSE;

  00028	03a06000	 moveq       r6, #0
  0002c	0a000042	 beq         |$LN19@MovePipeli|

; 2771 : 
; 2772 :     //  Access the regs
; 2773 :     if( AccessRegs() == FALSE )

  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00038	e3500000	 cmp         r0, #0
  0003c	0a00003c	 beq         |$cleanUp$38889|

; 2774 :         goto cleanUp;
; 2775 : 
; 2776 :     //  Compute new origin based on pipeline rotation angle
; 2777 :     switch( g_rgPipelineMapping[ePipeline].eRotation )

  00040	e08ae287	 add         lr, r10, r7, lsl #5
  00044	e59e300c	 ldr         r3, [lr, #0xC]
  00048	e1b02003	 movs        r2, r3
  0004c	0a00001b	 beq         |$LN13@MovePipeli|
  00050	e352005a	 cmp         r2, #0x5A
  00054	0a000013	 beq         |$LN12@MovePipeli|
  00058	e35200b4	 cmp         r2, #0xB4
  0005c	0a000008	 beq         |$LN11@MovePipeli|
  00060	e3a03c01	 mov         r3, #1, 24
  00064	e383300e	 orr         r3, r3, #0xE
  00068	e1520003	 cmp         r2, r3
  0006c	1a000030	 bne         |$cleanUp$38889|

; 2793 :             
; 2794 :         case OMAP_DSS_ROTATION_270:
; 2795 :             dwX = GetLCDWidth() - g_rgPipelineMapping[ePipeline].dwDestWidth - lYPos;

  00070	e59424ac	 ldr         r2, [r4, #0x4AC]
  00074	e59e3014	 ldr         r3, [lr, #0x14]

; 2796 :             dwY = lXPos;

  00078	e0423003	 sub         r3, r2, r3
  0007c	e0431009	 sub         r1, r3, r9

; 2797 :             break;

  00080	ea000010	 b           |$LN14@MovePipeli|
  00084		 |$LN11@MovePipeli|

; 2788 :             
; 2789 :         case OMAP_DSS_ROTATION_180:
; 2790 :             dwX = GetLCDWidth() - g_rgPipelineMapping[ePipeline].dwDestWidth - lXPos;

  00084	e59414ac	 ldr         r1, [r4, #0x4AC]
  00088	e59e3014	 ldr         r3, [lr, #0x14]

; 2791 :             dwY = GetLCDHeight() - g_rgPipelineMapping[ePipeline].dwDestHeight - lYPos;

  0008c	e59404b0	 ldr         r0, [r4, #0x4B0]
  00090	e59e2018	 ldr         r2, [lr, #0x18]
  00094	e0413003	 sub         r3, r1, r3
  00098	e0431005	 sub         r1, r3, r5
  0009c	e0403002	 sub         r3, r0, r2
  000a0	e0435009	 sub         r5, r3, r9

; 2792 :             break;

  000a4	ea000007	 b           |$LN14@MovePipeli|
  000a8		 |$LN12@MovePipeli|

; 2782 :             break;
; 2783 :             
; 2784 :         case OMAP_DSS_ROTATION_90:
; 2785 :             dwX = lYPos;
; 2786 :             dwY = GetLCDHeight() - g_rgPipelineMapping[ePipeline].dwDestHeight - lXPos;

  000a8	e59424b0	 ldr         r2, [r4, #0x4B0]
  000ac	e59e3018	 ldr         r3, [lr, #0x18]
  000b0	e1a01009	 mov         r1, r9
  000b4	e0423003	 sub         r3, r2, r3
  000b8	e0435005	 sub         r5, r3, r5

; 2787 :             break;

  000bc	ea000001	 b           |$LN14@MovePipeli|
  000c0		 |$LN13@MovePipeli|

; 2778 :     {
; 2779 :         case OMAP_DSS_ROTATION_0:
; 2780 :             dwX = lXPos;

  000c0	e1a01005	 mov         r1, r5

; 2781 :             dwY = lYPos;

  000c4	e1a05009	 mov         r5, r9
  000c8		 |$LN14@MovePipeli|

; 2798 : 
; 2799 :         default:
; 2800 :             ASSERT(0);
; 2801 :             goto cleanUp;
; 2802 :     }
; 2803 : 
; 2804 : 
; 2805 :     //  Update GFX pipeline display position
; 2806 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  000c8	e3570000	 cmp         r7, #0

; 2807 :     {
; 2808 :         OUTREG32( &m_pDispRegs->DISPC_GFX_POSITION,
; 2809 :                     DISPC_GFX_POS_GFXPOSX(dwX) |
; 2810 :                     DISPC_GFX_POS_GFXPOSY(dwY)
; 2811 :                     );

  000cc	05942008	 ldreq       r2, [r4, #8]
  000d0	01813805	 orreq       r3, r1, r5, lsl #16
  000d4	05823088	 streq       r3, [r2, #0x88]

; 2812 :     }
; 2813 : 
; 2814 :     //  Update VID1 pipeline display position
; 2815 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  000d8	e3570001	 cmp         r7, #1

; 2816 :     {
; 2817 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.POSITION,
; 2818 :                     DISPC_VID_POS_VIDPOSX(dwX) |
; 2819 :                     DISPC_VID_POS_VIDPOSY(dwY)
; 2820 :                     );

  000dc	05942008	 ldreq       r2, [r4, #8]
  000e0	01813805	 orreq       r3, r1, r5, lsl #16
  000e4	058230c4	 streq       r3, [r2, #0xC4]

; 2821 :     }
; 2822 : 
; 2823 :     //  Update VID2 pipeline display position
; 2824 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  000e8	e3570002	 cmp         r7, #2

; 2825 :     {
; 2826 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.POSITION,
; 2827 :                     DISPC_VID_POS_VIDPOSX(dwX) |
; 2828 :                     DISPC_VID_POS_VIDPOSY(dwY)
; 2829 :                     );

  000ec	05942008	 ldreq       r2, [r4, #8]
  000f0	01813805	 orreq       r3, r1, r5, lsl #16
  000f4	05823154	 streq       r3, [r2, #0x154]

; 2830 :     }
; 2831 : 
; 2832 : 
; 2833 :     //  Get the destination for the pipeline
; 2834 :     switch( g_rgPipelineMapping[ePipeline].eDestination )

  000f8	e59e3004	 ldr         r3, [lr, #4]
  000fc	e3530000	 cmp         r3, #0
  00100	0a000003	 beq         |$LN2@MovePipeli|
  00104	e3530001	 cmp         r3, #1
  00108	1a000002	 bne         |$LN3@MovePipeli|

; 2839 :             break;
; 2840 : 
; 2841 :         case OMAP_DSS_DESTINATION_TVOUT:
; 2842 :             //  Set go bit for TV Out
; 2843 :             dwDestGo  = DISPC_CONTROL_GODIGITAL;

  0010c	e3a08040	 mov         r8, #0x40

; 2844 :             break;

  00110	ea000000	 b           |$LN3@MovePipeli|
  00114		 |$LN2@MovePipeli|

; 2835 :     {
; 2836 :         case OMAP_DSS_DESTINATION_LCD:
; 2837 :             //  Set go bit for LCD
; 2838 :             dwDestGo  = DISPC_CONTROL_GOLCD;

  00114	e3a08020	 mov         r8, #0x20
  00118		 |$LN3@MovePipeli|

; 2845 :     }
; 2846 : 
; 2847 : 
; 2848 :     //  Enable/update overlay optimization
; 2849 :     EnableOverlayOptimization( TRUE );

  00118	e3a01001	 mov         r1, #1
  0011c	e1a00004	 mov         r0, r4
  00120	eb000000	 bl          |?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z|

; 2850 : 
; 2851 :     //  Flush the shadow registers
; 2852 :     FlushRegs( dwDestGo );

  00124	e1a01008	 mov         r1, r8
  00128	e1a00004	 mov         r0, r4
  0012c	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 2853 : 
; 2854 : 
; 2855 :     //  Result
; 2856 :     bResult = TRUE;

  00130	e3a06001	 mov         r6, #1
  00134		 |$cleanUp$38889|

; 2857 : 
; 2858 : cleanUp:
; 2859 :     //  Release regs
; 2860 :     ReleaseRegs();

  00134	e2840e49	 add         r0, r4, #0x49, 28
  00138	eb000000	 bl          LeaveCriticalSection

; 2861 : 
; 2862 :     //  Return result
; 2863 :     return bResult;

  0013c		 |$LN19@MovePipeli|

; 2864 : }

  0013c	e1a00006	 mov         r0, r6
  00140	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00144	e12fff1e	 bx          lr
  00148		 |$LN34@MovePipeli|
  00148		 |$LN35@MovePipeli|
  00148	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  0014c		 |$M41683|

			 ENDP  ; |?MovePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@JJ@Z|, OMAPDisplayController::MovePipeline

	EXPORT	|?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z| ; OMAPDisplayController::RotatePipeline

  00000			 AREA	 |.pdata|, PDATA
|$T41723| DCD	|$LN33@RotatePipe|
	DCD	0x40011002
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z| PROC ; OMAPDisplayController::RotatePipeline

; 2872 : {

  00000		 |$LN33@RotatePipe|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M41720|
  00008	e1a06002	 mov         r6, r2
  0000c	e1a08001	 mov         r8, r1
  00010	e58d0008	 str         r0, [sp, #8]

; 2873 :     BOOL    bResult = FALSE;
; 2874 :     OMAPSurface*        pSurface;
; 2875 :     BOOL                bMirror = FALSE;
; 2876 :     DWORD               dwVidRotation = 0;
; 2877 :     DWORD               dwHorzDecimation = 1;
; 2878 :     DWORD               dwVertDecimation = 1;
; 2879 :     DWORD               dwInterlace = 0;
; 2880 :     
; 2881 :     
; 2882 :     //  If no change in the rotation, do nothing
; 2883 :     if( g_rgPipelineMapping[ePipeline].eRotation == eRotation )

  00014	e59f3420	 ldr         r3, [pc, #0x420]
  00018	e3a04000	 mov         r4, #0
  0001c	e3a07000	 mov         r7, #0
  00020	e0839288	 add         r9, r3, r8, lsl #5
  00024	e599300c	 ldr         r3, [r9, #0xC]
  00028	e1530006	 cmp         r3, r6

; 2884 :         return TRUE;

  0002c	03a04001	 moveq       r4, #1
  00030	0a0000fc	 beq         |$LN17@RotatePipe|

; 2885 : 
; 2886 :     //  If no associated pipeline, just set the default rotation of the pipeline
; 2887 :     if( g_rgPipelineMapping[ePipeline].pSurface == NULL )

  00034	e5993008	 ldr         r3, [r9, #8]
  00038	e1b05003	 movs        r5, r3

; 2888 :     {
; 2889 :         g_rgPipelineMapping[ePipeline].eRotation = eRotation;

  0003c	0589600c	 streq       r6, [r9, #0xC]
  00040	03a04001	 moveq       r4, #1
  00044	0a0000f7	 beq         |$LN17@RotatePipe|

; 2890 :         return TRUE;
; 2891 :     }
; 2892 : 
; 2893 : 
; 2894 :     //  Get the surface being output
; 2895 :     pSurface = g_rgPipelineMapping[ePipeline].pSurface;
; 2896 :     bMirror = g_rgPipelineMapping[ePipeline].bMirror;
; 2897 : 
; 2898 :     //  Get the decimation settings for the surface
; 2899 :     dwHorzDecimation = g_rgPipelineScaling[ePipeline].dwHorzScaling;

  00048	e59f13e8	 ldr         r1, [pc, #0x3E8]

; 2900 :     dwVertDecimation = g_rgPipelineScaling[ePipeline].dwVertScaling;
; 2901 :     dwInterlace      = g_rgPipelineScaling[ePipeline].dwInterlace;
; 2902 : 
; 2903 : 
; 2904 :     //  Set rotation attributes for video pipelines if pixel format is YUV
; 2905 :     if( pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_YUV2 ||    
; 2906 :         pSurface->PixelFormat() == OMAP_DSS_PIXELFORMAT_UYVY )  

  0004c	e0882088	 add         r2, r8, r8, lsl #1
  00050	e5950004	 ldr         r0, [r5, #4]
  00054	e0813102	 add         r3, r1, r2, lsl #2
  00058	e593a004	 ldr         r10, [r3, #4]
  0005c	e5933008	 ldr         r3, [r3, #8]
  00060	e791b102	 ldr         r11, [r1, +r2, lsl #2]
  00064	e350000a	 cmp         r0, #0xA
  00068	e58d3000	 str         r3, [sp]
  0006c	e5993010	 ldr         r3, [r9, #0x10]
  00070	e58d3004	 str         r3, [sp, #4]
  00074	0a000001	 beq         |$LN13@RotatePipe|
  00078	e350000b	 cmp         r0, #0xB
  0007c	1a000045	 bne         |$LN11@RotatePipe|
  00080		 |$LN13@RotatePipe|

; 2907 :     {
; 2908 :         //  Depending on rotation and mirror settings, change the VID rotation attributes
; 2909 :         switch( eRotation )

  00080	e3560000	 cmp         r6, #0
  00084	0a000034	 beq         |$LN10@RotatePipe|
  00088	e356005a	 cmp         r6, #0x5A
  0008c	0a000024	 beq         |$LN9@RotatePipe|
  00090	e35600b4	 cmp         r6, #0xB4
  00094	0a000012	 beq         |$LN8@RotatePipe|
  00098	e3a03c01	 mov         r3, #1, 24
  0009c	e383300e	 orr         r3, r3, #0xE
  000a0	e1560003	 cmp         r6, r3

; 2937 : 
; 2938 :             case OMAP_DSS_ROTATION_270:
; 2939 :                 //  Settings for rotation angle 270 (90 for DSS setting)
; 2940 :                 dwVidRotation = DISPC_VID_ATTR_VIDROTATION_90 | DISPC_VID_ATTR_VIDROWREPEATENABLE;
; 2941 : 
; 2942 :                 //  Set the decimation for the surface
; 2943 :                 pSurface->SetHorizontalScaling( dwVertDecimation );
; 2944 :                 pSurface->SetVerticalScaling( dwHorzDecimation );
; 2945 :                 break;
; 2946 : 
; 2947 :             default:
; 2948 :                 ASSERT(0);
; 2949 :                 return FALSE;

  000a4	13a04000	 movne       r4, #0
  000a8	1a0000de	 bne         |$LN17@RotatePipe|
  000ac	e5953000	 ldr         r3, [r5]
  000b0	e1a0100a	 mov         r1, r10
  000b4	e1a00005	 mov         r0, r5
  000b8	e5933030	 ldr         r3, [r3, #0x30]
  000bc	e3a07a41	 mov         r7, #0x41, 20
  000c0	e1a0e00f	 mov         lr, pc
  000c4	e12fff13	 bx          r3
  000c8	e5953000	 ldr         r3, [r5]
  000cc	e1a0100b	 mov         r1, r11
  000d0	e1a00005	 mov         r0, r5
  000d4	e5933034	 ldr         r3, [r3, #0x34]
  000d8	e1a0e00f	 mov         lr, pc
  000dc	e12fff13	 bx          r3
  000e0	ea00002c	 b           |$LN11@RotatePipe|
  000e4		 |$LN8@RotatePipe|

; 2928 : 
; 2929 :             case OMAP_DSS_ROTATION_180:
; 2930 :                 //  Settings for rotation angle 180
; 2931 :                 dwVidRotation = (bMirror) ? DISPC_VID_ATTR_VIDROTATION_0 : DISPC_VID_ATTR_VIDROTATION_180;

  000e4	e3530000	 cmp         r3, #0

; 2932 : 
; 2933 :                 //  Set the decimation for the surface
; 2934 :                 pSurface->SetHorizontalScaling( dwHorzDecimation );

  000e8	e5953000	 ldr         r3, [r5]
  000ec	13a07000	 movne       r7, #0
  000f0	03a07a02	 moveq       r7, #2, 20
  000f4	e5933030	 ldr         r3, [r3, #0x30]
  000f8	e1a0100b	 mov         r1, r11
  000fc	e1a00005	 mov         r0, r5
  00100	e1a0e00f	 mov         lr, pc
  00104	e12fff13	 bx          r3

; 2935 :                 pSurface->SetVerticalScaling( dwVertDecimation );

  00108	e5953000	 ldr         r3, [r5]
  0010c	e1a0100a	 mov         r1, r10
  00110	e1a00005	 mov         r0, r5
  00114	e5933034	 ldr         r3, [r3, #0x34]
  00118	e1a0e00f	 mov         lr, pc
  0011c	e12fff13	 bx          r3

; 2936 :                 break;

  00120	ea00001c	 b           |$LN11@RotatePipe|
  00124		 |$LN9@RotatePipe|

; 2918 :                 break;
; 2919 : 
; 2920 :             case OMAP_DSS_ROTATION_90:
; 2921 :                 //  Settings for rotation angle 90 (270 for DSS setting)
; 2922 :                 dwVidRotation = DISPC_VID_ATTR_VIDROTATION_270 | DISPC_VID_ATTR_VIDROWREPEATENABLE;
; 2923 : 
; 2924 :                 //  Set the decimation for the surface
; 2925 :                 pSurface->SetHorizontalScaling( dwVertDecimation );

  00124	e5953000	 ldr         r3, [r5]
  00128	e1a0100a	 mov         r1, r10
  0012c	e1a00005	 mov         r0, r5
  00130	e5933030	 ldr         r3, [r3, #0x30]
  00134	e3a07a43	 mov         r7, #0x43, 20
  00138	e1a0e00f	 mov         lr, pc
  0013c	e12fff13	 bx          r3

; 2926 :                 pSurface->SetVerticalScaling( dwHorzDecimation );

  00140	e5953000	 ldr         r3, [r5]
  00144	e1a0100b	 mov         r1, r11
  00148	e1a00005	 mov         r0, r5
  0014c	e5933034	 ldr         r3, [r3, #0x34]
  00150	e1a0e00f	 mov         lr, pc
  00154	e12fff13	 bx          r3

; 2927 :                 break;

  00158	ea00000e	 b           |$LN11@RotatePipe|
  0015c		 |$LN10@RotatePipe|

; 2910 :         {
; 2911 :             case OMAP_DSS_ROTATION_0:
; 2912 :                 //  Settings for rotation angle 0
; 2913 :                 dwVidRotation = (bMirror) ? DISPC_VID_ATTR_VIDROTATION_180 : DISPC_VID_ATTR_VIDROTATION_0;

  0015c	e3530000	 cmp         r3, #0

; 2914 : 
; 2915 :                 //  Set the decimation for the surface
; 2916 :                 pSurface->SetHorizontalScaling( dwHorzDecimation );

  00160	e5953000	 ldr         r3, [r5]
  00164	13a07a02	 movne       r7, #2, 20
  00168	03a07000	 moveq       r7, #0
  0016c	e5933030	 ldr         r3, [r3, #0x30]
  00170	e1a0100b	 mov         r1, r11
  00174	e1a00005	 mov         r0, r5
  00178	e1a0e00f	 mov         lr, pc
  0017c	e12fff13	 bx          r3

; 2917 :                 pSurface->SetVerticalScaling( dwVertDecimation );

  00180	e5953000	 ldr         r3, [r5]
  00184	e1a0100a	 mov         r1, r10
  00188	e1a00005	 mov         r0, r5
  0018c	e5933034	 ldr         r3, [r3, #0x34]
  00190	e1a0e00f	 mov         lr, pc
  00194	e12fff13	 bx          r3
  00198		 |$LN11@RotatePipe|

; 2950 :         }
; 2951 :     }
; 2952 : 
; 2953 : 
; 2954 :     //  Access the regs
; 2955 :     if( AccessRegs() == FALSE )

  00198	e59da008	 ldr         r10, [sp, #8]
  0019c	e1a0000a	 mov         r0, r10
  001a0	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  001a4	e3500000	 cmp         r0, #0
  001a8	0a00009c	 beq         |$cleanUp$38944|

; 2956 :         goto cleanUp;
; 2957 : 
; 2958 : 
; 2959 :     //  Update GFX pipeline display base address
; 2960 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )
; 2961 :     {
; 2962 :         OUTREG32( &m_pDispRegs->DISPC_GFX_PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  001ac	e59db004	 ldr         r11, [sp, #4]
  001b0	e3580000	 cmp         r8, #0
  001b4	1a000027	 bne         |$LN3@RotatePipe|
  001b8	e5953000	 ldr         r3, [r5]
  001bc	e1a0200b	 mov         r2, r11
  001c0	e1a01006	 mov         r1, r6
  001c4	e5933018	 ldr         r3, [r3, #0x18]
  001c8	e1a00005	 mov         r0, r5
  001cc	e1a0e00f	 mov         lr, pc
  001d0	e12fff13	 bx          r3
  001d4	e59a3008	 ldr         r3, [r10, #8]

; 2963 :         OUTREG32( &m_pDispRegs->DISPC_GFX_ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  001d8	e1a0200b	 mov         r2, r11
  001dc	e1a01006	 mov         r1, r6
  001e0	e58300b0	 str         r0, [r3, #0xB0]
  001e4	e5953000	 ldr         r3, [r5]
  001e8	e1a00005	 mov         r0, r5
  001ec	e593301c	 ldr         r3, [r3, #0x1C]
  001f0	e1a0e00f	 mov         lr, pc
  001f4	e12fff13	 bx          r3
  001f8	e59a2008	 ldr         r2, [r10, #8]

; 2964 : 
; 2965 :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA0, pSurface->PhysicalAddr(eRotation, bMirror) );

  001fc	e3a03000	 mov         r3, #0
  00200	e1a01006	 mov         r1, r6
  00204	e58200ac	 str         r0, [r2, #0xAC]
  00208	e5950000	 ldr         r0, [r5]
  0020c	e1a0200b	 mov         r2, r11
  00210	e5904014	 ldr         r4, [r0, #0x14]
  00214	e1a00005	 mov         r0, r5
  00218	e1a0e00f	 mov         lr, pc
  0021c	e12fff14	 bx          r4
  00220	e59a2008	 ldr         r2, [r10, #8]

; 2966 :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA1, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  00224	e3a03000	 mov         r3, #0
  00228	e1a01006	 mov         r1, r6
  0022c	e5820080	 str         r0, [r2, #0x80]
  00230	e5950000	 ldr         r0, [r5]
  00234	e1a0200b	 mov         r2, r11
  00238	e5904014	 ldr         r4, [r0, #0x14]
  0023c	e1a00005	 mov         r0, r5
  00240	e1a0e00f	 mov         lr, pc
  00244	e12fff14	 bx          r4
  00248	e59d3000	 ldr         r3, [sp]
  0024c	e59a2008	 ldr         r2, [r10, #8]
  00250	e0803003	 add         r3, r0, r3
  00254	e5823084	 str         r3, [r2, #0x84]
  00258		 |$LN3@RotatePipe|

; 2967 :     }
; 2968 : 
; 2969 :     //  Update VID1 pipeline display base address and attributes for rotation
; 2970 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  00258	e3580001	 cmp         r8, #1
  0025c	1a00002f	 bne         |$LN2@RotatePipe|

; 2971 :     {
; 2972 :         CLRREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES, DISPC_VID_ATTR_VIDROTATION_MASK|DISPC_VID_ATTR_VIDROWREPEATENABLE );

  00260	e59a4008	 ldr         r4, [r10, #8]

; 2973 :         SETREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES, dwVidRotation );
; 2974 :         
; 2975 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  00264	e1a0200b	 mov         r2, r11
  00268	e1a01006	 mov         r1, r6
  0026c	e59430cc	 ldr         r3, [r4, #0xCC]
  00270	e1a00005	 mov         r0, r5
  00274	e3c33a43	 bic         r3, r3, #0x43, 20
  00278	e58430cc	 str         r3, [r4, #0xCC]
  0027c	e59a4008	 ldr         r4, [r10, #8]
  00280	e59430cc	 ldr         r3, [r4, #0xCC]
  00284	e1833007	 orr         r3, r3, r7
  00288	e58430cc	 str         r3, [r4, #0xCC]
  0028c	e5953000	 ldr         r3, [r5]
  00290	e5933018	 ldr         r3, [r3, #0x18]
  00294	e1a0e00f	 mov         lr, pc
  00298	e12fff13	 bx          r3
  0029c	e59a3008	 ldr         r3, [r10, #8]

; 2976 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  002a0	e1a0200b	 mov         r2, r11
  002a4	e1a01006	 mov         r1, r6
  002a8	e58300dc	 str         r0, [r3, #0xDC]
  002ac	e5953000	 ldr         r3, [r5]
  002b0	e1a00005	 mov         r0, r5
  002b4	e593301c	 ldr         r3, [r3, #0x1C]
  002b8	e1a0e00f	 mov         lr, pc
  002bc	e12fff13	 bx          r3
  002c0	e59a2008	 ldr         r2, [r10, #8]

; 2977 : 
; 2978 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA0, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  002c4	e3a03000	 mov         r3, #0
  002c8	e1a01006	 mov         r1, r6
  002cc	e58200d8	 str         r0, [r2, #0xD8]
  002d0	e5950000	 ldr         r0, [r5]
  002d4	e1a0200b	 mov         r2, r11
  002d8	e5904014	 ldr         r4, [r0, #0x14]
  002dc	e1a00005	 mov         r0, r5
  002e0	e1a0e00f	 mov         lr, pc
  002e4	e12fff14	 bx          r4
  002e8	e59d3000	 ldr         r3, [sp]
  002ec	e59a2008	 ldr         r2, [r10, #8]
  002f0	e0803003	 add         r3, r0, r3
  002f4	e58230bc	 str         r3, [r2, #0xBC]

; 2979 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  002f8	e5951000	 ldr         r1, [r5]
  002fc	e3a03000	 mov         r3, #0
  00300	e1a0200b	 mov         r2, r11
  00304	e5914014	 ldr         r4, [r1, #0x14]
  00308	e1a01006	 mov         r1, r6
  0030c	e1a00005	 mov         r0, r5
  00310	e1a0e00f	 mov         lr, pc
  00314	e12fff14	 bx          r4
  00318	e59a3008	 ldr         r3, [r10, #8]
  0031c	e58300c0	 str         r0, [r3, #0xC0]
  00320		 |$LN2@RotatePipe|

; 2980 :        
; 2981 :     }
; 2982 : 
; 2983 :     //  Update VID2 pipeline display base address and attributes for rotation
; 2984 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  00320	e3580002	 cmp         r8, #2
  00324	1a00002f	 bne         |$LN1@RotatePipe|

; 2985 :     {
; 2986 :         CLRREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES, DISPC_VID_ATTR_VIDROTATION_MASK|DISPC_VID_ATTR_VIDROWREPEATENABLE );

  00328	e59a4008	 ldr         r4, [r10, #8]

; 2987 :         SETREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES, dwVidRotation );
; 2988 :         
; 2989 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  0032c	e1a0200b	 mov         r2, r11
  00330	e1a01006	 mov         r1, r6
  00334	e594315c	 ldr         r3, [r4, #0x15C]
  00338	e1a00005	 mov         r0, r5
  0033c	e3c33a43	 bic         r3, r3, #0x43, 20
  00340	e584315c	 str         r3, [r4, #0x15C]
  00344	e59a4008	 ldr         r4, [r10, #8]
  00348	e594315c	 ldr         r3, [r4, #0x15C]
  0034c	e1833007	 orr         r3, r3, r7
  00350	e584315c	 str         r3, [r4, #0x15C]
  00354	e5953000	 ldr         r3, [r5]
  00358	e5933018	 ldr         r3, [r3, #0x18]
  0035c	e1a0e00f	 mov         lr, pc
  00360	e12fff13	 bx          r3
  00364	e59a3008	 ldr         r3, [r10, #8]

; 2990 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  00368	e1a0200b	 mov         r2, r11
  0036c	e1a01006	 mov         r1, r6
  00370	e583016c	 str         r0, [r3, #0x16C]
  00374	e5953000	 ldr         r3, [r5]
  00378	e1a00005	 mov         r0, r5
  0037c	e593301c	 ldr         r3, [r3, #0x1C]
  00380	e1a0e00f	 mov         lr, pc
  00384	e12fff13	 bx          r3
  00388	e59a1008	 ldr         r1, [r10, #8]

; 2991 : 
; 2992 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA0, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  0038c	e3a03000	 mov         r3, #0
  00390	e1a0200b	 mov         r2, r11
  00394	e5810168	 str         r0, [r1, #0x168]
  00398	e5950000	 ldr         r0, [r5]
  0039c	e1a01006	 mov         r1, r6
  003a0	e5904014	 ldr         r4, [r0, #0x14]
  003a4	e1a00005	 mov         r0, r5
  003a8	e1a0e00f	 mov         lr, pc
  003ac	e12fff14	 bx          r4
  003b0	e59d3000	 ldr         r3, [sp]
  003b4	e59a1008	 ldr         r1, [r10, #8]

; 2993 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  003b8	e1a0200b	 mov         r2, r11
  003bc	e0803003	 add         r3, r0, r3
  003c0	e581314c	 str         r3, [r1, #0x14C]
  003c4	e5951000	 ldr         r1, [r5]
  003c8	e3a03000	 mov         r3, #0
  003cc	e1a00005	 mov         r0, r5
  003d0	e5914014	 ldr         r4, [r1, #0x14]
  003d4	e1a01006	 mov         r1, r6
  003d8	e1a0e00f	 mov         lr, pc
  003dc	e12fff14	 bx          r4
  003e0	e59a3008	 ldr         r3, [r10, #8]
  003e4	e5830150	 str         r0, [r3, #0x150]
  003e8		 |$LN1@RotatePipe|

; 2994 :     }
; 2995 : 
; 2996 : 
; 2997 :     //  Update pipeline output rotation
; 2998 :     g_rgPipelineMapping[ePipeline].eRotation = eRotation;

  003e8	e589600c	 str         r6, [r9, #0xC]

; 2999 : 
; 3000 :     //  Set the decimation factors for the surface back to normal
; 3001 :     pSurface->SetHorizontalScaling( 1 );

  003ec	e5953000	 ldr         r3, [r5]
  003f0	e3a01001	 mov         r1, #1
  003f4	e1a00005	 mov         r0, r5
  003f8	e5933030	 ldr         r3, [r3, #0x30]
  003fc	e1a0e00f	 mov         lr, pc
  00400	e12fff13	 bx          r3

; 3002 :     pSurface->SetVerticalScaling( 1 );

  00404	e5953000	 ldr         r3, [r5]
  00408	e3a01001	 mov         r1, #1
  0040c	e1a00005	 mov         r0, r5
  00410	e5933034	 ldr         r3, [r3, #0x34]
  00414	e1a0e00f	 mov         lr, pc
  00418	e12fff13	 bx          r3

; 3003 : 
; 3004 : 
; 3005 :     //  Result
; 3006 :     bResult = TRUE;

  0041c	e3a04001	 mov         r4, #1
  00420		 |$cleanUp$38944|

; 3007 : 
; 3008 : cleanUp:
; 3009 :     //  Release regs
; 3010 :     ReleaseRegs();

  00420	e28a0e49	 add         r0, r10, #0x49, 28
  00424	eb000000	 bl          LeaveCriticalSection

; 3011 : 
; 3012 :     //  Return result
; 3013 :     return bResult;

  00428		 |$LN17@RotatePipe|

; 3014 : }

  00428	e1a00004	 mov         r0, r4
  0042c	e28dd00c	 add         sp, sp, #0xC
  00430	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00434	e12fff1e	 bx          lr
  00438		 |$LN34@RotatePipe|
  00438		 |$LN35@RotatePipe|
  00438	00000000	 DCD         |?g_rgPipelineScaling@@3PAUOMAPPipelineScaling@@A|
  0043c		 |$LN36@RotatePipe|
  0043c	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  00440		 |$M41721|

			 ENDP  ; |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|, OMAPDisplayController::RotatePipeline

	EXPORT	|?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z| ; OMAPDisplayController::MirrorPipeline

  00000			 AREA	 |.pdata|, PDATA
|$T41749| DCD	|$LN21@MirrorPipe|
	DCD	0x4000d602
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z| PROC ; OMAPDisplayController::MirrorPipeline

; 3022 : {

  00000		 |$LN21@MirrorPipe|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M41746|
  00008	e1a08002	 mov         r8, r2
  0000c	e1a06001	 mov         r6, r1
  00010	e1a0a000	 mov         r10, r0

; 3023 :     BOOL    bResult = FALSE;
; 3024 :     OMAPSurface*        pSurface;
; 3025 :     OMAP_DSS_ROTATION   eRotation;
; 3026 :     DWORD               dwHorzDecimation = 1;
; 3027 :     DWORD               dwVertDecimation = 1;
; 3028 :     DWORD               dwInterlace = 0;
; 3029 :     
; 3030 :     
; 3031 :     //  If no change in the mirror setting, do nothing
; 3032 :     if( g_rgPipelineMapping[ePipeline].bMirror == bMirror )

  00014	e59f3338	 ldr         r3, [pc, #0x338]
  00018	e3a04000	 mov         r4, #0
  0001c	e0837286	 add         r7, r3, r6, lsl #5
  00020	e5973010	 ldr         r3, [r7, #0x10]
  00024	e1530008	 cmp         r3, r8

; 3033 :         return TRUE;

  00028	03a04001	 moveq       r4, #1
  0002c	0a0000c3	 beq         |$LN13@MirrorPipe|

; 3034 : 
; 3035 :     //  If no associated pipeline, just set the default mirror setting of the pipeline
; 3036 :     if( g_rgPipelineMapping[ePipeline].pSurface == NULL )

  00030	e5973008	 ldr         r3, [r7, #8]
  00034	e1b05003	 movs        r5, r3

; 3037 :     {
; 3038 :         g_rgPipelineMapping[ePipeline].bMirror = bMirror;

  00038	05878010	 streq       r8, [r7, #0x10]
  0003c	03a04001	 moveq       r4, #1
  00040	0a0000be	 beq         |$LN13@MirrorPipe|

; 3039 :         return TRUE;
; 3040 :     }
; 3041 : 
; 3042 :     //  Get the surface being output
; 3043 :     pSurface = g_rgPipelineMapping[ePipeline].pSurface;
; 3044 :     eRotation = g_rgPipelineMapping[ePipeline].eRotation;
; 3045 : 
; 3046 :     //  Get the decimation settings for the surface
; 3047 :     dwHorzDecimation = g_rgPipelineScaling[ePipeline].dwHorzScaling;

  00044	e59f1304	 ldr         r1, [pc, #0x304]
  00048	e0862086	 add         r2, r6, r6, lsl #1
  0004c	e597000c	 ldr         r0, [r7, #0xC]

; 3048 :     dwVertDecimation = g_rgPipelineScaling[ePipeline].dwVertScaling;

  00050	e0813102	 add         r3, r1, r2, lsl #2
  00054	e593b004	 ldr         r11, [r3, #4]

; 3049 :     dwInterlace      = g_rgPipelineScaling[ePipeline].dwInterlace;

  00058	e5933008	 ldr         r3, [r3, #8]
  0005c	e7912102	 ldr         r2, [r1, +r2, lsl #2]
  00060	e1b09000	 movs        r9, r0
  00064	e58d3000	 str         r3, [sp]
  00068	e58d2004	 str         r2, [sp, #4]

; 3050 : 
; 3051 : 
; 3052 :     //  Depending on rotation settings, change the surface scaling attributes
; 3053 :     switch( eRotation )

  0006c	0a000015	 beq         |$LN8@MirrorPipe|
  00070	e359005a	 cmp         r9, #0x5A
  00074	0a000006	 beq         |$LN7@MirrorPipe|
  00078	e35900b4	 cmp         r9, #0xB4
  0007c	0a000011	 beq         |$LN8@MirrorPipe|
  00080	e3a03c01	 mov         r3, #1, 24
  00084	e383300e	 orr         r3, r3, #0xE
  00088	e1590003	 cmp         r9, r3

; 3068 : 
; 3069 :         default:
; 3070 :             ASSERT(0);
; 3071 :             return FALSE;

  0008c	13a04000	 movne       r4, #0
  00090	1a0000aa	 bne         |$LN13@MirrorPipe|
  00094		 |$LN7@MirrorPipe|

; 3060 :             break;
; 3061 : 
; 3062 :         case OMAP_DSS_ROTATION_90:
; 3063 :         case OMAP_DSS_ROTATION_270:
; 3064 :             //  Set the decimation for the surface
; 3065 :             pSurface->SetHorizontalScaling( dwVertDecimation );

  00094	e5953000	 ldr         r3, [r5]
  00098	e1a0100b	 mov         r1, r11
  0009c	e1a00005	 mov         r0, r5
  000a0	e5933030	 ldr         r3, [r3, #0x30]
  000a4	e1a0e00f	 mov         lr, pc
  000a8	e12fff13	 bx          r3

; 3066 :             pSurface->SetVerticalScaling( dwHorzDecimation );

  000ac	e5953000	 ldr         r3, [r5]
  000b0	e59d1004	 ldr         r1, [sp, #4]
  000b4	e1a00005	 mov         r0, r5
  000b8	e5933034	 ldr         r3, [r3, #0x34]
  000bc	e1a0e00f	 mov         lr, pc
  000c0	e12fff13	 bx          r3

; 3067 :             break;

  000c4	ea00000b	 b           |$LN9@MirrorPipe|
  000c8		 |$LN8@MirrorPipe|

; 3054 :     {
; 3055 :         case OMAP_DSS_ROTATION_0:
; 3056 :         case OMAP_DSS_ROTATION_180:
; 3057 :             //  Set the decimation for the surface
; 3058 :             pSurface->SetHorizontalScaling( dwHorzDecimation );

  000c8	e5953000	 ldr         r3, [r5]
  000cc	e1a01002	 mov         r1, r2
  000d0	e1a00005	 mov         r0, r5
  000d4	e5933030	 ldr         r3, [r3, #0x30]
  000d8	e1a0e00f	 mov         lr, pc
  000dc	e12fff13	 bx          r3

; 3059 :             pSurface->SetVerticalScaling( dwVertDecimation );

  000e0	e5953000	 ldr         r3, [r5]
  000e4	e1a0100b	 mov         r1, r11
  000e8	e1a00005	 mov         r0, r5
  000ec	e5933034	 ldr         r3, [r3, #0x34]
  000f0	e1a0e00f	 mov         lr, pc
  000f4	e12fff13	 bx          r3
  000f8		 |$LN9@MirrorPipe|

; 3072 :     }
; 3073 : 
; 3074 :     //  Access the regs
; 3075 :     if( AccessRegs() == FALSE )

  000f8	e1a0000a	 mov         r0, r10
  000fc	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00100	e3500000	 cmp         r0, #0
  00104	0a00008b	 beq         |$cleanUp$39007|

; 3076 :         goto cleanUp;
; 3077 : 
; 3078 : 
; 3079 :     //  Update GFX pipeline for mirror setting
; 3080 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  00108	e3560000	 cmp         r6, #0
  0010c	1a000028	 bne         |$LN17@MirrorPipe|

; 3081 :     {
; 3082 :         OUTREG32( &m_pDispRegs->DISPC_GFX_PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  00110	e5953000	 ldr         r3, [r5]
  00114	e1a02008	 mov         r2, r8
  00118	e1a01009	 mov         r1, r9
  0011c	e5933018	 ldr         r3, [r3, #0x18]
  00120	e1a00005	 mov         r0, r5
  00124	e1a0e00f	 mov         lr, pc
  00128	e12fff13	 bx          r3
  0012c	e59a3008	 ldr         r3, [r10, #8]

; 3083 :         OUTREG32( &m_pDispRegs->DISPC_GFX_ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  00130	e1a02008	 mov         r2, r8
  00134	e1a01009	 mov         r1, r9
  00138	e58300b0	 str         r0, [r3, #0xB0]
  0013c	e5953000	 ldr         r3, [r5]
  00140	e1a00005	 mov         r0, r5
  00144	e593301c	 ldr         r3, [r3, #0x1C]
  00148	e1a0e00f	 mov         lr, pc
  0014c	e12fff13	 bx          r3
  00150	e59a2008	 ldr         r2, [r10, #8]

; 3084 : 
; 3085 :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA0, pSurface->PhysicalAddr(eRotation, bMirror) );

  00154	e3a03000	 mov         r3, #0
  00158	e1a01009	 mov         r1, r9
  0015c	e58200ac	 str         r0, [r2, #0xAC]
  00160	e5950000	 ldr         r0, [r5]
  00164	e1a02008	 mov         r2, r8
  00168	e5904014	 ldr         r4, [r0, #0x14]
  0016c	e1a00005	 mov         r0, r5
  00170	e1a0e00f	 mov         lr, pc
  00174	e12fff14	 bx          r4
  00178	e59a2008	 ldr         r2, [r10, #8]

; 3086 :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA1, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  0017c	e3a03000	 mov         r3, #0
  00180	e1a01009	 mov         r1, r9
  00184	e5820080	 str         r0, [r2, #0x80]
  00188	e5950000	 ldr         r0, [r5]
  0018c	e1a02008	 mov         r2, r8
  00190	e5904014	 ldr         r4, [r0, #0x14]
  00194	e1a00005	 mov         r0, r5
  00198	e1a0e00f	 mov         lr, pc
  0019c	e12fff14	 bx          r4
  001a0	e59db000	 ldr         r11, [sp]
  001a4	e59a2008	 ldr         r2, [r10, #8]
  001a8	e080300b	 add         r3, r0, r11
  001ac	e5823084	 str         r3, [r2, #0x84]
  001b0	ea000000	 b           |$LN3@MirrorPipe|
  001b4		 |$LN17@MirrorPipe|

; 3049 :     dwInterlace      = g_rgPipelineScaling[ePipeline].dwInterlace;

  001b4	e59db000	 ldr         r11, [sp]

; 3086 :         OUTREG32( &m_pDispRegs->DISPC_GFX_BA1, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  001b8		 |$LN3@MirrorPipe|

; 3087 :     }
; 3088 : 
; 3089 :     //  Update VID1 pipeline for mirror setting
; 3090 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  001b8	e3560001	 cmp         r6, #1
  001bc	1a000026	 bne         |$LN2@MirrorPipe|

; 3091 :     {
; 3092 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  001c0	e5953000	 ldr         r3, [r5]
  001c4	e1a02008	 mov         r2, r8
  001c8	e1a01009	 mov         r1, r9
  001cc	e5933018	 ldr         r3, [r3, #0x18]
  001d0	e1a00005	 mov         r0, r5
  001d4	e1a0e00f	 mov         lr, pc
  001d8	e12fff13	 bx          r3
  001dc	e59a3008	 ldr         r3, [r10, #8]

; 3093 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  001e0	e1a02008	 mov         r2, r8
  001e4	e1a01009	 mov         r1, r9
  001e8	e58300dc	 str         r0, [r3, #0xDC]
  001ec	e5953000	 ldr         r3, [r5]
  001f0	e1a00005	 mov         r0, r5
  001f4	e593301c	 ldr         r3, [r3, #0x1C]
  001f8	e1a0e00f	 mov         lr, pc
  001fc	e12fff13	 bx          r3
  00200	e59a2008	 ldr         r2, [r10, #8]

; 3094 : 
; 3095 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA0, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  00204	e3a03000	 mov         r3, #0
  00208	e1a01009	 mov         r1, r9
  0020c	e58200d8	 str         r0, [r2, #0xD8]
  00210	e5950000	 ldr         r0, [r5]
  00214	e1a02008	 mov         r2, r8
  00218	e5904014	 ldr         r4, [r0, #0x14]
  0021c	e1a00005	 mov         r0, r5
  00220	e1a0e00f	 mov         lr, pc
  00224	e12fff14	 bx          r4
  00228	e59a2008	 ldr         r2, [r10, #8]
  0022c	e080300b	 add         r3, r0, r11

; 3096 :         OUTREG32( &m_pDispRegs->tDISPC_VID1.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  00230	e1a00005	 mov         r0, r5
  00234	e58230bc	 str         r3, [r2, #0xBC]
  00238	e5951000	 ldr         r1, [r5]
  0023c	e3a03000	 mov         r3, #0
  00240	e1a02008	 mov         r2, r8
  00244	e5914014	 ldr         r4, [r1, #0x14]
  00248	e1a01009	 mov         r1, r9
  0024c	e1a0e00f	 mov         lr, pc
  00250	e12fff14	 bx          r4
  00254	e59a3008	 ldr         r3, [r10, #8]
  00258	e58300c0	 str         r0, [r3, #0xC0]
  0025c		 |$LN2@MirrorPipe|

; 3097 : 
; 3098 :     }
; 3099 : 
; 3100 :     //  Update VID2 pipeline for mirror setting
; 3101 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  0025c	e3560002	 cmp         r6, #2
  00260	1a000026	 bne         |$LN1@MirrorPipe|

; 3102 :     {
; 3103 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.PIXEL_INC, pSurface->PixelIncr(eRotation, bMirror) );

  00264	e5953000	 ldr         r3, [r5]
  00268	e1a02008	 mov         r2, r8
  0026c	e1a01009	 mov         r1, r9
  00270	e5933018	 ldr         r3, [r3, #0x18]
  00274	e1a00005	 mov         r0, r5
  00278	e1a0e00f	 mov         lr, pc
  0027c	e12fff13	 bx          r3
  00280	e59a3008	 ldr         r3, [r10, #8]

; 3104 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.ROW_INC, pSurface->RowIncr(eRotation, bMirror) );

  00284	e1a02008	 mov         r2, r8
  00288	e1a01009	 mov         r1, r9
  0028c	e583016c	 str         r0, [r3, #0x16C]
  00290	e5953000	 ldr         r3, [r5]
  00294	e1a00005	 mov         r0, r5
  00298	e593301c	 ldr         r3, [r3, #0x1C]
  0029c	e1a0e00f	 mov         lr, pc
  002a0	e12fff13	 bx          r3
  002a4	e59a2008	 ldr         r2, [r10, #8]

; 3105 : 
; 3106 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA0, pSurface->PhysicalAddr(eRotation, bMirror) + dwInterlace );

  002a8	e3a03000	 mov         r3, #0
  002ac	e1a01009	 mov         r1, r9
  002b0	e5820168	 str         r0, [r2, #0x168]
  002b4	e5950000	 ldr         r0, [r5]
  002b8	e1a02008	 mov         r2, r8
  002bc	e5904014	 ldr         r4, [r0, #0x14]
  002c0	e1a00005	 mov         r0, r5
  002c4	e1a0e00f	 mov         lr, pc
  002c8	e12fff14	 bx          r4
  002cc	e59a2008	 ldr         r2, [r10, #8]
  002d0	e080300b	 add         r3, r0, r11

; 3107 :         OUTREG32( &m_pDispRegs->tDISPC_VID2.BA1, pSurface->PhysicalAddr(eRotation, bMirror) );

  002d4	e1a01009	 mov         r1, r9
  002d8	e582314c	 str         r3, [r2, #0x14C]
  002dc	e595e000	 ldr         lr, [r5]
  002e0	e3a03000	 mov         r3, #0
  002e4	e1a02008	 mov         r2, r8
  002e8	e59e4014	 ldr         r4, [lr, #0x14]
  002ec	e1a00005	 mov         r0, r5
  002f0	e1a0e00f	 mov         lr, pc
  002f4	e12fff14	 bx          r4
  002f8	e59a3008	 ldr         r3, [r10, #8]
  002fc	e5830150	 str         r0, [r3, #0x150]
  00300		 |$LN1@MirrorPipe|

; 3108 :     }
; 3109 : 
; 3110 : 
; 3111 :     //  Update pipeline output mirror setting
; 3112 :     g_rgPipelineMapping[ePipeline].bMirror = bMirror;

  00300	e5878010	 str         r8, [r7, #0x10]

; 3113 : 
; 3114 :     //  Set the decimation factors for the surface back to normal
; 3115 :     pSurface->SetHorizontalScaling( 1 );

  00304	e5953000	 ldr         r3, [r5]
  00308	e3a01001	 mov         r1, #1
  0030c	e1a00005	 mov         r0, r5
  00310	e5933030	 ldr         r3, [r3, #0x30]
  00314	e1a0e00f	 mov         lr, pc
  00318	e12fff13	 bx          r3

; 3116 :     pSurface->SetVerticalScaling( 1 );

  0031c	e5953000	 ldr         r3, [r5]
  00320	e3a01001	 mov         r1, #1
  00324	e1a00005	 mov         r0, r5
  00328	e5933034	 ldr         r3, [r3, #0x34]
  0032c	e1a0e00f	 mov         lr, pc
  00330	e12fff13	 bx          r3

; 3117 : 
; 3118 : 
; 3119 :     //  Result
; 3120 :     bResult = TRUE;

  00334	e3a04001	 mov         r4, #1
  00338		 |$cleanUp$39007|

; 3121 : 
; 3122 : cleanUp:
; 3123 :     //  Release regs
; 3124 :     ReleaseRegs();

  00338	e28a0e49	 add         r0, r10, #0x49, 28
  0033c	eb000000	 bl          LeaveCriticalSection

; 3125 : 
; 3126 :     //  Return result
; 3127 :     return bResult;

  00340		 |$LN13@MirrorPipe|

; 3128 : }

  00340	e1a00004	 mov         r0, r4
  00344	e28dd008	 add         sp, sp, #8
  00348	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0034c	e12fff1e	 bx          lr
  00350		 |$LN22@MirrorPipe|
  00350		 |$LN23@MirrorPipe|
  00350	00000000	 DCD         |?g_rgPipelineScaling@@3PAUOMAPPipelineScaling@@A|
  00354		 |$LN24@MirrorPipe|
  00354	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  00358		 |$M41747|

			 ENDP  ; |?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z|, OMAPDisplayController::MirrorPipeline

	EXPORT	|?UpdateScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z| ; OMAPDisplayController::UpdateScalingAttribs

  00000			 AREA	 |.pdata|, PDATA
|$T41770| DCD	|$LN17@UpdateScal|
	DCD	0x40002b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z| PROC ; OMAPDisplayController::UpdateScalingAttribs

; 3137 : {

  00000		 |$LN17@UpdateScal|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M41767|
  00004	e1a08003	 mov         r8, r3
  00008	e1a09002	 mov         r9, r2
  0000c	e1a04001	 mov         r4, r1
  00010	e1a05000	 mov         r5, r0

; 3138 :     BOOL    bResult = FALSE;
; 3139 : 
; 3140 : 
; 3141 :     //  Check if pipeline is enabled; ignore operation if not
; 3142 :     if( g_rgPipelineMapping[ePipeline].bEnabled == FALSE )

  00014	e59f708c	 ldr         r7, [pc, #0x8C]
  00018	e3a06000	 mov         r6, #0
  0001c	e797e284	 ldr         lr, [r7, +r4, lsl #5]
  00020	e35e0000	 cmp         lr, #0

; 3143 :         return FALSE;

  00024	03a06000	 moveq       r6, #0
  00028	0a00001b	 beq         |$LN11@UpdateScal|

; 3144 : 
; 3145 :     //  Access the regs
; 3146 :     if( AccessRegs() == FALSE )

  0002c	e1a00005	 mov         r0, r5
  00030	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00034	e3500000	 cmp         r0, #0
  00038	0a000015	 beq         |$cleanUp$39045|

; 3147 :         goto cleanUp;
; 3148 : 
; 3149 :     
; 3150 :     //  Update the scaling attributes
; 3151 :     bResult = SetScalingAttribs( ePipeline, pSrcRect, pDestRect );

  0003c	e1a03008	 mov         r3, r8
  00040	e1a02009	 mov         r2, r9
  00044	e1a01004	 mov         r1, r4
  00048	e1a00005	 mov         r0, r5
  0004c	eb000000	 bl          |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|
  00050	e1b06000	 movs        r6, r0

; 3152 :     if( bResult )

  00054	0a00000e	 beq         |$cleanUp$39045|

; 3153 :     {
; 3154 :         DWORD dwDestGo = 0;
; 3155 :     
; 3156 :         //  Get the destination for the pipeline
; 3157 :         switch( g_rgPipelineMapping[ePipeline].eDestination )

  00058	e0873284	 add         r3, r7, r4, lsl #5
  0005c	e5933004	 ldr         r3, [r3, #4]
  00060	e3530000	 cmp         r3, #0
  00064	0a000003	 beq         |$LN4@UpdateScal|
  00068	e3530001	 cmp         r3, #1
  0006c	1a000008	 bne         |$cleanUp$39045|

; 3162 :                 break;
; 3163 : 
; 3164 :             case OMAP_DSS_DESTINATION_TVOUT:
; 3165 :                 //  Set go bit for TV Out
; 3166 :                 dwDestGo  = DISPC_CONTROL_GODIGITAL;

  00070	e3a04040	 mov         r4, #0x40

; 3167 :                 break;

  00074	ea000000	 b           |$LN5@UpdateScal|
  00078		 |$LN4@UpdateScal|

; 3158 :         {
; 3159 :             case OMAP_DSS_DESTINATION_LCD:
; 3160 :                 //  Set go bit for LCD
; 3161 :                 dwDestGo  = DISPC_CONTROL_GOLCD;

  00078	e3a04020	 mov         r4, #0x20
  0007c		 |$LN5@UpdateScal|

; 3168 : 
; 3169 :             default:
; 3170 :                 ASSERT(0);
; 3171 :                 goto cleanUp;
; 3172 :         }
; 3173 : 
; 3174 :         //  Enable/update overlay optimization
; 3175 :         EnableOverlayOptimization( TRUE );

  0007c	e3a01001	 mov         r1, #1
  00080	e1a00005	 mov         r0, r5
  00084	eb000000	 bl          |?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z|

; 3176 : 
; 3177 :         //  Flush the shadow registers
; 3178 :         FlushRegs( dwDestGo );

  00088	e1a01004	 mov         r1, r4
  0008c	e1a00005	 mov         r0, r5
  00090	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|
  00094		 |$cleanUp$39045|

; 3179 :     }    
; 3180 : 
; 3181 : 
; 3182 : cleanUp:
; 3183 :     //  Release regs
; 3184 :     ReleaseRegs();

  00094	e2850e49	 add         r0, r5, #0x49, 28
  00098	eb000000	 bl          LeaveCriticalSection

; 3185 : 
; 3186 :     //  Return result
; 3187 :     return bResult;

  0009c		 |$LN11@UpdateScal|

; 3188 : }

  0009c	e1a00006	 mov         r0, r6
  000a0	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$LN18@UpdateScal|
  000a8		 |$LN19@UpdateScal|
  000a8	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  000ac		 |$M41768|

			 ENDP  ; |?UpdateScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|, OMAPDisplayController::UpdateScalingAttribs

	EXPORT	|?EnableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@K@Z| ; OMAPDisplayController::EnableColorKey

  00000			 AREA	 |.pdata|, PDATA
|$T41796| DCD	|$LN33@EnableColo|
	DCD	0x40006501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@K@Z| PROC ; OMAPDisplayController::EnableColorKey

; 3197 : {

  00000		 |$LN33@EnableColo|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M41793|
  00004	e1a07003	 mov         r7, r3
  00008	e1a08002	 mov         r8, r2
  0000c	e1a05001	 mov         r5, r1
  00010	e1a04000	 mov         r4, r0

; 3198 :     BOOL    bResult = FALSE;
; 3199 :     DWORD   dwCurrentColor = 0;
; 3200 :     DWORD   dwDestGo = 0;
; 3201 : 
; 3202 : 
; 3203 :     //  Access the regs
; 3204 :     if( AccessRegs() == FALSE )

  00014	e3a09000	 mov         r9, #0
  00018	e3a06000	 mov         r6, #0
  0001c	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00020	e3500000	 cmp         r0, #0
  00024	0a000055	 beq         |$cleanUp$39068|

; 3205 :         goto cleanUp;
; 3206 : 
; 3207 :     
; 3208 :     //  Enable color key for the LCD
; 3209 :     if( eDestination == OMAP_DSS_DESTINATION_LCD )

  00028	e3580000	 cmp         r8, #0
  0002c	1a000028	 bne         |$LN22@EnableColo|

; 3210 :     {
; 3211 :         //  Set color key for LCD
; 3212 :         switch( eColorKey )

  00030	e3550000	 cmp         r5, #0
  00034	4a000051	 bmi         |$cleanUp$39068|
  00038	e3550001	 cmp         r5, #1
  0003c	da000013	 ble         |$LN19@EnableColo|
  00040	e3550003	 cmp         r5, #3
  00044	ca00004d	 bgt         |$cleanUp$39068|

; 3227 :                 
; 3228 :                 break;
; 3229 : 
; 3230 :                 
; 3231 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX:
; 3232 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2:
; 3233 :                 //  Get current color (both LCD and VID2 are in this single register)
; 3234 :                 dwCurrentColor = INREG32( &m_pDispRegs->DISPC_GLOBAL_ALPHA );

  00048	e5941008	 ldr         r1, [r4, #8]

; 3235 :                 
; 3236 :                 //  Set global alpha color for LCD
; 3237 :                 if( eColorKey == OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX )

  0004c	e3550002	 cmp         r5, #2
  00050	03e03cff	 mvneq       r3, #0xFF, 24
  00054	e5912074	 ldr         r2, [r1, #0x74]

; 3238 :                     dwColor = (dwCurrentColor & 0xFFFF0000) | DISPC_GLOBAL_ALPHA_GFX(dwColor);

  00058	022330ff	 eoreq       r3, r3, #0xFF
  0005c	00022003	 andeq       r2, r2, r3
  00060	020730ff	 andeq       r3, r7, #0xFF
  00064	01833002	 orreq       r3, r3, r2

; 3239 :                 else

  00068	13a03cff	 movne       r3, #0xFF, 24

; 3240 :                     dwColor = (dwCurrentColor & 0x0000FFFF) | DISPC_GLOBAL_ALPHA_VID2(dwColor);

  0006c	138330ff	 orrne       r3, r3, #0xFF
  00070	10022003	 andne       r2, r2, r3
  00074	120730ff	 andne       r3, r7, #0xFF
  00078	11823803	 orrne       r3, r2, r3, lsl #16

; 3241 : 
; 3242 :                 OUTREG32( &m_pDispRegs->DISPC_GLOBAL_ALPHA, dwColor );

  0007c	e5813074	 str         r3, [r1, #0x74]

; 3243 :                 
; 3244 :                 //  Enable LCD alpha blender
; 3245 :                 SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_LCDALPHABLENDERENABLE );

  00080	e5942008	 ldr         r2, [r4, #8]
  00084	e5923044	 ldr         r3, [r2, #0x44]
  00088	e3833701	 orr         r3, r3, #1, 14

; 3246 :                 break;

  0008c	ea00000a	 b           |$LN29@EnableColo|
  00090		 |$LN19@EnableColo|

; 3213 :         {
; 3214 :             case OMAP_DSS_COLORKEY_TRANS_SOURCE:
; 3215 :             case OMAP_DSS_COLORKEY_TRANS_DEST:
; 3216 :                 //  Set transparent color for LCD
; 3217 :                 OUTREG32( &m_pDispRegs->DISPC_TRANS_COLOR0, dwColor );

  00090	e5943008	 ldr         r3, [r4, #8]

; 3218 :                 
; 3219 :                 //  Enable LCD transparent color blender
; 3220 :                 SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKLCDENABLE );
; 3221 : 
; 3222 :                 //  Select source or destination transparency
; 3223 :                 if( eColorKey == OMAP_DSS_COLORKEY_TRANS_SOURCE )

  00094	e3550000	 cmp         r5, #0
  00098	e5837054	 str         r7, [r3, #0x54]
  0009c	e5942008	 ldr         r2, [r4, #8]
  000a0	e5923044	 ldr         r3, [r2, #0x44]
  000a4	e3833b01	 orr         r3, r3, #1, 22
  000a8	e5823044	 str         r3, [r2, #0x44]

; 3224 :                     SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKLCDSELECTION );

  000ac	e5942008	 ldr         r2, [r4, #8]
  000b0	e5923044	 ldr         r3, [r2, #0x44]
  000b4	03833b02	 orreq       r3, r3, #2, 22

; 3225 :                 else
; 3226 :                     CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKLCDSELECTION );

  000b8	13c33b02	 bicne       r3, r3, #2, 22
  000bc		 |$LN29@EnableColo|

; 3247 : 
; 3248 :             default:
; 3249 :                 ASSERT(0);
; 3250 :                 goto cleanUp;
; 3251 :         }
; 3252 : 
; 3253 :         //  Display overlay optimization
; 3254 :         EnableOverlayOptimization( FALSE );

  000bc	e3a01000	 mov         r1, #0
  000c0	e1a00004	 mov         r0, r4
  000c4	e5823044	 str         r3, [r2, #0x44]
  000c8	eb000000	 bl          |?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z|

; 3255 : 
; 3256 :         //  Set dest GO
; 3257 :         dwDestGo = DISPC_CONTROL_GOLCD;

  000cc	e3a06020	 mov         r6, #0x20
  000d0	ea000026	 b           |$LN11@EnableColo|
  000d4		 |$LN22@EnableColo|

; 3258 :     }
; 3259 : 
; 3260 : 
; 3261 :     //  Enable color key for TV out
; 3262 :     if( eDestination == OMAP_DSS_DESTINATION_TVOUT )

  000d4	e3580001	 cmp         r8, #1
  000d8	1a000024	 bne         |$LN11@EnableColo|

; 3263 :     {
; 3264 :         //  Set color key for TV out
; 3265 :         switch( eColorKey )

  000dc	e3550000	 cmp         r5, #0
  000e0	4a000026	 bmi         |$cleanUp$39068|
  000e4	e3550001	 cmp         r5, #1
  000e8	da000013	 ble         |$LN8@EnableColo|
  000ec	e3550003	 cmp         r5, #3
  000f0	ca000022	 bgt         |$cleanUp$39068|

; 3280 :                 
; 3281 :                 break;
; 3282 : 
; 3283 :                 
; 3284 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX:
; 3285 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2:
; 3286 :                 //  Get current color (both LCD and VID2 are in this single register)
; 3287 :                 dwCurrentColor = INREG32( &m_pDispRegs->DISPC_GLOBAL_ALPHA );

  000f4	e5941008	 ldr         r1, [r4, #8]

; 3288 :                 
; 3289 :                 //  Set global alpha color
; 3290 :                 if( eColorKey == OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX )

  000f8	e3550002	 cmp         r5, #2
  000fc	03e03cff	 mvneq       r3, #0xFF, 24
  00100	e5912074	 ldr         r2, [r1, #0x74]

; 3291 :                     dwColor = (dwCurrentColor & 0xFFFF0000) | DISPC_GLOBAL_ALPHA_GFX(dwColor);

  00104	022330ff	 eoreq       r3, r3, #0xFF
  00108	00022003	 andeq       r2, r2, r3
  0010c	020730ff	 andeq       r3, r7, #0xFF
  00110	01833002	 orreq       r3, r3, r2

; 3292 :                 else

  00114	13a03cff	 movne       r3, #0xFF, 24

; 3293 :                     dwColor = (dwCurrentColor & 0x0000FFFF) | DISPC_GLOBAL_ALPHA_VID2(dwColor);

  00118	138330ff	 orrne       r3, r3, #0xFF
  0011c	10022003	 andne       r2, r2, r3
  00120	120730ff	 andne       r3, r7, #0xFF
  00124	11823803	 orrne       r3, r2, r3, lsl #16

; 3294 : 
; 3295 :                 OUTREG32( &m_pDispRegs->DISPC_GLOBAL_ALPHA, dwColor );

  00128	e5813074	 str         r3, [r1, #0x74]

; 3296 :                 
; 3297 :                 //  Enable DIG alpha blender
; 3298 :                 SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_DIGALPHABLENDERENABLE );

  0012c	e5942008	 ldr         r2, [r4, #8]
  00130	e5923044	 ldr         r3, [r2, #0x44]
  00134	e3833702	 orr         r3, r3, #2, 14

; 3299 :                 break;

  00138	ea00000a	 b           |$LN30@EnableColo|
  0013c		 |$LN8@EnableColo|

; 3266 :         {
; 3267 :             case OMAP_DSS_COLORKEY_TRANS_SOURCE:
; 3268 :             case OMAP_DSS_COLORKEY_TRANS_DEST:
; 3269 :                 //  Set transparent color for DIG
; 3270 :                 OUTREG32( &m_pDispRegs->DISPC_TRANS_COLOR1, dwColor );

  0013c	e5943008	 ldr         r3, [r4, #8]

; 3271 :                 
; 3272 :                 //  Enable DIG transparent color blender
; 3273 :                 SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKDIGENABLE );
; 3274 : 
; 3275 :                 //  Select source or destination transparency
; 3276 :                 if( eColorKey == OMAP_DSS_COLORKEY_TRANS_SOURCE )

  00140	e3550000	 cmp         r5, #0
  00144	e5837058	 str         r7, [r3, #0x58]
  00148	e5942008	 ldr         r2, [r4, #8]
  0014c	e5923044	 ldr         r3, [r2, #0x44]
  00150	e3833a01	 orr         r3, r3, #1, 20
  00154	e5823044	 str         r3, [r2, #0x44]

; 3277 :                     SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKDIGSELECTION );

  00158	e5942008	 ldr         r2, [r4, #8]
  0015c	e5923044	 ldr         r3, [r2, #0x44]
  00160	03833a02	 orreq       r3, r3, #2, 20

; 3278 :                 else
; 3279 :                     CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKDIGSELECTION );

  00164	13c33a02	 bicne       r3, r3, #2, 20
  00168		 |$LN30@EnableColo|
  00168	e5823044	 str         r3, [r2, #0x44]

; 3300 : 
; 3301 :             default:
; 3302 :                 ASSERT(0);
; 3303 :                 goto cleanUp;
; 3304 :         }
; 3305 : 
; 3306 :         //  Set dest GO
; 3307 :         dwDestGo = DISPC_CONTROL_GODIGITAL;

  0016c	e3a06040	 mov         r6, #0x40
  00170		 |$LN11@EnableColo|

; 3308 :     }
; 3309 : 
; 3310 :     
; 3311 :     //  Flush the shadow registers
; 3312 :     FlushRegs( dwDestGo );

  00170	e1a01006	 mov         r1, r6
  00174	e1a00004	 mov         r0, r4
  00178	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 3313 : 
; 3314 :     
; 3315 :     //  Result
; 3316 :     bResult = TRUE;         

  0017c	e3a09001	 mov         r9, #1
  00180		 |$cleanUp$39068|

; 3317 : 
; 3318 : cleanUp:    
; 3319 :     //  Release regs
; 3320 :     ReleaseRegs();

  00180	e2840e49	 add         r0, r4, #0x49, 28
  00184	eb000000	 bl          LeaveCriticalSection

; 3321 :     
; 3322 :     //  Return result
; 3323 :     return bResult;
; 3324 : }

  00188	e1a00009	 mov         r0, r9
  0018c	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00190	e12fff1e	 bx          lr
  00194		 |$M41794|

			 ENDP  ; |?EnableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@K@Z|, OMAPDisplayController::EnableColorKey

	EXPORT	|?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z| ; OMAPDisplayController::DisableColorKey

  00000			 AREA	 |.pdata|, PDATA
|$T41816| DCD	|$LN26@DisableCol|
	DCD	0x40003501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z| PROC ; OMAPDisplayController::DisableColorKey

; 3332 : {

  00000		 |$LN26@DisableCol|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M41813|
  00004	e1a07002	 mov         r7, r2
  00008	e1a04001	 mov         r4, r1
  0000c	e1a05000	 mov         r5, r0

; 3333 :     BOOL    bResult = FALSE;
; 3334 :     DWORD   dwDestGo = 0;
; 3335 : 
; 3336 : 
; 3337 :     //  Access the regs
; 3338 :     if( AccessRegs() == FALSE )

  00010	e3a08000	 mov         r8, #0
  00014	e3a06000	 mov         r6, #0
  00018	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  0001c	e3500000	 cmp         r0, #0
  00020	0a000026	 beq         |$cleanUp$39140|

; 3339 :         goto cleanUp;
; 3340 : 
; 3341 :     
; 3342 :     //  Enable color key for the LCD
; 3343 :     if( eDestination == OMAP_DSS_DESTINATION_LCD )

  00024	e3570000	 cmp         r7, #0
  00028	1a00000f	 bne         |$LN14@DisableCol|

; 3344 :     {
; 3345 :         //  Set color key for LCD
; 3346 :         switch( eColorKey )

  0002c	e3540000	 cmp         r4, #0
  00030	4a000022	 bmi         |$cleanUp$39140|
  00034	e3540001	 cmp         r4, #1
  00038	da000006	 ble         |$LN11@DisableCol|
  0003c	e3540003	 cmp         r4, #3
  00040	ca00001e	 bgt         |$cleanUp$39140|

; 3352 :                 break;
; 3353 : 
; 3354 :                 
; 3355 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX:
; 3356 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2:
; 3357 :                 //  Disable LCD alpha blender
; 3358 :                 CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_LCDALPHABLENDERENABLE );

  00044	e5952008	 ldr         r2, [r5, #8]

; 3359 :                 break;
; 3360 : 
; 3361 :             default:
; 3362 :                 ASSERT(0);
; 3363 :                 goto cleanUp;
; 3364 :         }
; 3365 :         
; 3366 :         //  Set dest GO
; 3367 :         dwDestGo = DISPC_CONTROL_GOLCD;

  00048	e3a06020	 mov         r6, #0x20
  0004c	e5923044	 ldr         r3, [r2, #0x44]
  00050	e3c33701	 bic         r3, r3, #1, 14
  00054	ea000014	 b           |$LN23@DisableCol|
  00058		 |$LN11@DisableCol|

; 3347 :         {
; 3348 :             case OMAP_DSS_COLORKEY_TRANS_SOURCE:
; 3349 :             case OMAP_DSS_COLORKEY_TRANS_DEST:
; 3350 :                 //  Disable LCD transparent color blender
; 3351 :                 CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKLCDENABLE );

  00058	e5952008	 ldr         r2, [r5, #8]

; 3359 :                 break;
; 3360 : 
; 3361 :             default:
; 3362 :                 ASSERT(0);
; 3363 :                 goto cleanUp;
; 3364 :         }
; 3365 :         
; 3366 :         //  Set dest GO
; 3367 :         dwDestGo = DISPC_CONTROL_GOLCD;

  0005c	e3a06020	 mov         r6, #0x20
  00060	e5923044	 ldr         r3, [r2, #0x44]
  00064	e3c33b01	 bic         r3, r3, #1, 22
  00068	ea00000f	 b           |$LN23@DisableCol|
  0006c		 |$LN14@DisableCol|

; 3368 :     }
; 3369 : 
; 3370 : 
; 3371 :     //  Enable color key for TV out
; 3372 :     if( eDestination == OMAP_DSS_DESTINATION_TVOUT )

  0006c	e3570001	 cmp         r7, #1
  00070	1a00000e	 bne         |$LN7@DisableCol|

; 3373 :     {
; 3374 :         //  Set color key for TV out
; 3375 :         switch( eColorKey )

  00074	e3540000	 cmp         r4, #0
  00078	4a000010	 bmi         |$cleanUp$39140|
  0007c	e3540001	 cmp         r4, #1
  00080	da000005	 ble         |$LN4@DisableCol|
  00084	e3540003	 cmp         r4, #3
  00088	ca00000c	 bgt         |$cleanUp$39140|

; 3381 :                 break;
; 3382 : 
; 3383 :                 
; 3384 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX:
; 3385 :             case OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2:
; 3386 :                 //  Disable DIG alpha blender
; 3387 :                 CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_DIGALPHABLENDERENABLE );

  0008c	e5952008	 ldr         r2, [r5, #8]
  00090	e5923044	 ldr         r3, [r2, #0x44]
  00094	e3c33702	 bic         r3, r3, #2, 14

; 3388 :                 break;

  00098	ea000002	 b           |$LN22@DisableCol|
  0009c		 |$LN4@DisableCol|

; 3376 :         {
; 3377 :             case OMAP_DSS_COLORKEY_TRANS_SOURCE:
; 3378 :             case OMAP_DSS_COLORKEY_TRANS_DEST:
; 3379 :                 //  Disable DIG transparent color blender
; 3380 :                 CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKDIGENABLE );

  0009c	e5952008	 ldr         r2, [r5, #8]
  000a0	e5923044	 ldr         r3, [r2, #0x44]
  000a4	e3c33a01	 bic         r3, r3, #1, 20
  000a8		 |$LN22@DisableCol|

; 3389 : 
; 3390 :             default:
; 3391 :                 ASSERT(0);
; 3392 :                 goto cleanUp;
; 3393 :         }
; 3394 : 
; 3395 :         //  Set dest GO
; 3396 :         dwDestGo = DISPC_CONTROL_GODIGITAL;

  000a8	e3a06040	 mov         r6, #0x40
  000ac		 |$LN23@DisableCol|

; 3376 :         {
; 3377 :             case OMAP_DSS_COLORKEY_TRANS_SOURCE:
; 3378 :             case OMAP_DSS_COLORKEY_TRANS_DEST:
; 3379 :                 //  Disable DIG transparent color blender
; 3380 :                 CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_TCKDIGENABLE );

  000ac	e5823044	 str         r3, [r2, #0x44]
  000b0		 |$LN7@DisableCol|

; 3397 :     }
; 3398 : 
; 3399 :     
; 3400 :     //  Flush the shadow registers
; 3401 :     FlushRegs( dwDestGo );

  000b0	e1a01006	 mov         r1, r6
  000b4	e1a00005	 mov         r0, r5
  000b8	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 3402 : 
; 3403 :     
; 3404 :     //  Result
; 3405 :     bResult = TRUE;         

  000bc	e3a08001	 mov         r8, #1
  000c0		 |$cleanUp$39140|

; 3406 : 
; 3407 : cleanUp:    
; 3408 :     //  Release regs
; 3409 :     ReleaseRegs();

  000c0	e2850e49	 add         r0, r5, #0x49, 28
  000c4	eb000000	 bl          LeaveCriticalSection

; 3410 :     
; 3411 :     //  Return result
; 3412 :     return bResult;
; 3413 : }

  000c8	e1a00008	 mov         r0, r8
  000cc	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$M41814|

			 ENDP  ; |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z|, OMAPDisplayController::DisableColorKey

	EXPORT	|?SaveRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z| ; OMAPDisplayController::SaveRegisters

  00000			 AREA	 |.pdata|, PDATA
|$T41836| DCD	|$LN27@SaveRegist|
	DCD	0x4000c201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SaveRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z| PROC ; OMAPDisplayController::SaveRegisters

; 3435 : {

  00000		 |$LN27@SaveRegist|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M41833|
  00004	e1a06001	 mov         r6, r1
  00008	e1a04000	 mov         r4, r0

; 3436 :     BOOL    bResult = FALSE;
; 3437 :     DWORD   i;
; 3438 :     OMAP_DISPC_REGS   *pDisplaySaveRestore = 0;
; 3439 :     
; 3440 :     //  Access the regs
; 3441 :     if( AccessRegs() == FALSE )

  0000c	e3a05000	 mov         r5, #0
  00010	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00014	e3500000	 cmp         r0, #0
  00018	0a0000b4	 beq         |$cleanUp$39187|

; 3442 :         goto cleanUp;
; 3443 : 
; 3444 :     // Choose the last active LCD context ( internal LCD/external LCD)
; 3445 :     if (!m_bHDMIEnable)

  0001c	e59434cc	 ldr         r3, [r4, #0x4CC]
  00020	e3530000	 cmp         r3, #0

; 3446 :         pDisplaySaveRestore = &g_rgDisplaySaveRestore;

  00024	0284e01c	 addeq       lr, r4, #0x1C

; 3447 :     else
; 3448 :         pDisplaySaveRestore = &g_rgDisplaySaveRestore_eLcd;

  00028	1284ef95	 addne       lr, r4, #0x95, 30

; 3449 : 
; 3450 :     if (pDisplaySaveRestore == NULL)

  0002c	e35e0000	 cmp         lr, #0
  00030	0a0000ae	 beq         |$cleanUp$39187|

; 3451 :         goto cleanUp;
; 3452 : 
; 3453 :     // Save the DISPC common register contents 
; 3454 :     pDisplaySaveRestore->DISPC_CONFIG = INREG32 ( &m_pDispRegs->DISPC_CONFIG );

  00034	e5943008	 ldr         r3, [r4, #8]

; 3455 :     pDisplaySaveRestore->DISPC_GLOBAL_ALPHA = INREG32 (&m_pDispRegs->DISPC_GLOBAL_ALPHA );
; 3456 :     pDisplaySaveRestore->DISPC_IRQENABLE = INREG32( &m_pDispRegs->DISPC_IRQENABLE );
; 3457 :     pDisplaySaveRestore->DISPC_TRANS_COLOR0 = INREG32( &m_pDispRegs->DISPC_TRANS_COLOR0 );
; 3458 :     pDisplaySaveRestore->DISPC_TRANS_COLOR1 = INREG32( &m_pDispRegs->DISPC_TRANS_COLOR1 );
; 3459 : 
; 3460 :     //  Save the DSS and LCD registers
; 3461 :     if( eDestination == OMAP_DSS_DESTINATION_LCD )

  00038	e3560000	 cmp         r6, #0
  0003c	e5933044	 ldr         r3, [r3, #0x44]
  00040	e58e3044	 str         r3, [lr, #0x44]
  00044	e5943008	 ldr         r3, [r4, #8]
  00048	e5933074	 ldr         r3, [r3, #0x74]
  0004c	e58e3074	 str         r3, [lr, #0x74]
  00050	e5943008	 ldr         r3, [r4, #8]
  00054	e593301c	 ldr         r3, [r3, #0x1C]
  00058	e58e301c	 str         r3, [lr, #0x1C]
  0005c	e5943008	 ldr         r3, [r4, #8]
  00060	e5933054	 ldr         r3, [r3, #0x54]
  00064	e58e3054	 str         r3, [lr, #0x54]
  00068	e5943008	 ldr         r3, [r4, #8]
  0006c	e5933058	 ldr         r3, [r3, #0x58]
  00070	e58e3058	 str         r3, [lr, #0x58]
  00074	1a00009c	 bne         |$LN1@SaveRegist|

; 3462 :     {
; 3463 :         //  Save off GFX plane registers if enabled
; 3464 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled )

  00078	e59f5284	 ldr         r5, [pc, #0x284]
  0007c	e5953000	 ldr         r3, [r5]
  00080	e3530000	 cmp         r3, #0
  00084	0a00001a	 beq         |$LN9@SaveRegist|

; 3465 :         {
; 3466 :             pDisplaySaveRestore->DISPC_GFX_BA0 = INREG32( &m_pDispRegs->DISPC_GFX_BA0 );

  00088	e5943008	 ldr         r3, [r4, #8]

; 3467 :             pDisplaySaveRestore->DISPC_GFX_BA1 = INREG32( &m_pDispRegs->DISPC_GFX_BA1 );

  0008c	e5933080	 ldr         r3, [r3, #0x80]

; 3468 :             pDisplaySaveRestore->DISPC_GFX_POSITION = INREG32( &m_pDispRegs->DISPC_GFX_POSITION );
; 3469 :             pDisplaySaveRestore->DISPC_GFX_SIZE = INREG32( &m_pDispRegs->DISPC_GFX_SIZE );

  00090	e58e3080	 str         r3, [lr, #0x80]
  00094	e5943008	 ldr         r3, [r4, #8]

; 3470 :             pDisplaySaveRestore->DISPC_GFX_ATTRIBUTES = INREG32( &m_pDispRegs->DISPC_GFX_ATTRIBUTES );
; 3471 :             pDisplaySaveRestore->DISPC_GFX_FIFO_THRESHOLD = INREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD );

  00098	e5933084	 ldr         r3, [r3, #0x84]

; 3472 :             pDisplaySaveRestore->DISPC_GFX_ROW_INC = INREG32( &m_pDispRegs->DISPC_GFX_ROW_INC );
; 3473 :             pDisplaySaveRestore->DISPC_GFX_PIXEL_INC = INREG32( &m_pDispRegs->DISPC_GFX_PIXEL_INC );

  0009c	e58e3084	 str         r3, [lr, #0x84]
  000a0	e5943008	 ldr         r3, [r4, #8]

; 3474 :             pDisplaySaveRestore->DISPC_GFX_WINDOW_SKIP = INREG32( &m_pDispRegs->DISPC_GFX_WINDOW_SKIP );

  000a4	e5933088	 ldr         r3, [r3, #0x88]
  000a8	e58e3088	 str         r3, [lr, #0x88]
  000ac	e5943008	 ldr         r3, [r4, #8]
  000b0	e593308c	 ldr         r3, [r3, #0x8C]
  000b4	e58e308c	 str         r3, [lr, #0x8C]
  000b8	e5943008	 ldr         r3, [r4, #8]
  000bc	e59330a0	 ldr         r3, [r3, #0xA0]
  000c0	e58e30a0	 str         r3, [lr, #0xA0]
  000c4	e5943008	 ldr         r3, [r4, #8]
  000c8	e59330a4	 ldr         r3, [r3, #0xA4]
  000cc	e58e30a4	 str         r3, [lr, #0xA4]
  000d0	e5943008	 ldr         r3, [r4, #8]
  000d4	e59330ac	 ldr         r3, [r3, #0xAC]
  000d8	e58e30ac	 str         r3, [lr, #0xAC]
  000dc	e5943008	 ldr         r3, [r4, #8]
  000e0	e59330b0	 ldr         r3, [r3, #0xB0]
  000e4	e58e30b0	 str         r3, [lr, #0xB0]
  000e8	e5943008	 ldr         r3, [r4, #8]
  000ec	e59330b4	 ldr         r3, [r3, #0xB4]
  000f0	e58e30b4	 str         r3, [lr, #0xB4]
  000f4		 |$LN9@SaveRegist|

; 3475 :         }
; 3476 : 
; 3477 :         //  Save off VID1 plane registers if enabled
; 3478 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled )

  000f4	e5953020	 ldr         r3, [r5, #0x20]
  000f8	e3530000	 cmp         r3, #0
  000fc	0a00003b	 beq         |$LN5@SaveRegist|

; 3479 :         {
; 3480 :             pDisplaySaveRestore->tDISPC_VID1.BA0 = INREG32( &m_pDispRegs->tDISPC_VID1.BA0 );

  00100	e5943008	 ldr         r3, [r4, #8]

; 3481 :             pDisplaySaveRestore->tDISPC_VID1.BA1 = INREG32( &m_pDispRegs->tDISPC_VID1.BA1 );
; 3482 :             pDisplaySaveRestore->tDISPC_VID1.POSITION = INREG32( &m_pDispRegs->tDISPC_VID1.POSITION );
; 3483 :             pDisplaySaveRestore->tDISPC_VID1.SIZE = INREG32( &m_pDispRegs->tDISPC_VID1.SIZE );
; 3484 :             pDisplaySaveRestore->tDISPC_VID1.ATTRIBUTES = INREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES );
; 3485 :             pDisplaySaveRestore->tDISPC_VID1.FIFO_THRESHOLD = INREG32( &m_pDispRegs->tDISPC_VID1.FIFO_THRESHOLD );
; 3486 :             pDisplaySaveRestore->tDISPC_VID1.ROW_INC = INREG32( &m_pDispRegs->tDISPC_VID1.ROW_INC );
; 3487 :             pDisplaySaveRestore->tDISPC_VID1.PIXEL_INC = INREG32( &m_pDispRegs->tDISPC_VID1.PIXEL_INC );
; 3488 :             pDisplaySaveRestore->tDISPC_VID1.FIR = INREG32( &m_pDispRegs->tDISPC_VID1.FIR );
; 3489 :             pDisplaySaveRestore->tDISPC_VID1.PICTURE_SIZE = INREG32( &m_pDispRegs->tDISPC_VID1.PICTURE_SIZE );
; 3490 :             pDisplaySaveRestore->tDISPC_VID1.ACCU0 = INREG32( &m_pDispRegs->tDISPC_VID1.ACCU0 );
; 3491 :             pDisplaySaveRestore->tDISPC_VID1.ACCU1 = INREG32( &m_pDispRegs->tDISPC_VID1.ACCU1 );

  00104	e3e020ef	 mvn         r2, #0xEF
  00108	e3a07e1e	 mov         r7, #0x1E, 28
  0010c	e59330bc	 ldr         r3, [r3, #0xBC]
  00110	e3a080f0	 mov         r8, #0xF0
  00114	e28e60f0	 add         r6, lr, #0xF0
  00118	e58e30bc	 str         r3, [lr, #0xBC]
  0011c	e5943008	 ldr         r3, [r4, #8]
  00120	e06ea002	 rsb         r10, lr, r2
  00124	e3a09008	 mov         r9, #8
  00128	e59330c0	 ldr         r3, [r3, #0xC0]
  0012c	e58e30c0	 str         r3, [lr, #0xC0]
  00130	e5943008	 ldr         r3, [r4, #8]
  00134	e59330c4	 ldr         r3, [r3, #0xC4]
  00138	e58e30c4	 str         r3, [lr, #0xC4]
  0013c	e5943008	 ldr         r3, [r4, #8]
  00140	e59330c8	 ldr         r3, [r3, #0xC8]
  00144	e58e30c8	 str         r3, [lr, #0xC8]
  00148	e5943008	 ldr         r3, [r4, #8]
  0014c	e59330cc	 ldr         r3, [r3, #0xCC]
  00150	e58e30cc	 str         r3, [lr, #0xCC]
  00154	e5943008	 ldr         r3, [r4, #8]
  00158	e59330d0	 ldr         r3, [r3, #0xD0]
  0015c	e58e30d0	 str         r3, [lr, #0xD0]
  00160	e5943008	 ldr         r3, [r4, #8]
  00164	e59330d8	 ldr         r3, [r3, #0xD8]
  00168	e58e30d8	 str         r3, [lr, #0xD8]
  0016c	e5943008	 ldr         r3, [r4, #8]
  00170	e59330dc	 ldr         r3, [r3, #0xDC]
  00174	e58e30dc	 str         r3, [lr, #0xDC]
  00178	e5943008	 ldr         r3, [r4, #8]
  0017c	e59330e0	 ldr         r3, [r3, #0xE0]
  00180	e58e30e0	 str         r3, [lr, #0xE0]
  00184	e5943008	 ldr         r3, [r4, #8]
  00188	e59330e4	 ldr         r3, [r3, #0xE4]
  0018c	e58e30e4	 str         r3, [lr, #0xE4]
  00190	e5943008	 ldr         r3, [r4, #8]
  00194	e59330e8	 ldr         r3, [r3, #0xE8]
  00198	e58e30e8	 str         r3, [lr, #0xE8]
  0019c	e5943008	 ldr         r3, [r4, #8]
  001a0	e59330ec	 ldr         r3, [r3, #0xEC]
  001a4	e58e30ec	 str         r3, [lr, #0xEC]
  001a8		 |$LL7@SaveRegist|

; 3492 : 
; 3493 :             //  Scaling coefficients
; 3494 :             for( i = 0; i < NUM_SCALING_PHASES; i++ )
; 3495 :             {
; 3496 :                 pDisplaySaveRestore->tDISPC_VID1.aFIR_COEF[i].ulH = INREG32( &m_pDispRegs->tDISPC_VID1.aFIR_COEF[i].ulH );

  001a8	e5943008	 ldr         r3, [r4, #8]

; 3497 :                 pDisplaySaveRestore->tDISPC_VID1.aFIR_COEF[i].ulHV = INREG32( &m_pDispRegs->tDISPC_VID1.aFIR_COEF[i].ulHV );

  001ac	e08a2006	 add         r2, r10, r6
  001b0	e2861004	 add         r1, r6, #4
  001b4	e7983003	 ldr         r3, [r8, +r3]

; 3498 :                 pDisplaySaveRestore->DISPC_VID1_FIR_COEF_V[i] = INREG32( &m_pDispRegs->DISPC_VID1_FIR_COEF_V[i] );

  001b8	e087000e	 add         r0, r7, lr
  001bc	e2888008	 add         r8, r8, #8
  001c0	e5863000	 str         r3, [r6]
  001c4	e5943008	 ldr         r3, [r4, #8]
  001c8	e2866008	 add         r6, r6, #8
  001cc	e2599001	 subs        r9, r9, #1
  001d0	e0823003	 add         r3, r2, r3
  001d4	e59330f4	 ldr         r3, [r3, #0xF4]
  001d8	e5813000	 str         r3, [r1]
  001dc	e5943008	 ldr         r3, [r4, #8]
  001e0	e7973003	 ldr         r3, [r7, +r3]
  001e4	e2877004	 add         r7, r7, #4
  001e8	e5803000	 str         r3, [r0]
  001ec	1affffed	 bne         |$LL7@SaveRegist|
  001f0		 |$LN5@SaveRegist|

; 3499 :             }
; 3500 :         }
; 3501 :         
; 3502 :         //  Save off VID2 plane registers if enabled
; 3503 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled )

  001f0	e5953040	 ldr         r3, [r5, #0x40]
  001f4	e3530000	 cmp         r3, #0
  001f8	0a00003b	 beq         |$LN1@SaveRegist|

; 3504 :         {
; 3505 :             pDisplaySaveRestore->tDISPC_VID2.BA0 = INREG32( &m_pDispRegs->tDISPC_VID2.BA0 );

  001fc	e5943008	 ldr         r3, [r4, #8]

; 3506 :             pDisplaySaveRestore->tDISPC_VID2.BA1 = INREG32( &m_pDispRegs->tDISPC_VID2.BA1 );
; 3507 :             pDisplaySaveRestore->tDISPC_VID2.POSITION = INREG32( &m_pDispRegs->tDISPC_VID2.POSITION );
; 3508 :             pDisplaySaveRestore->tDISPC_VID2.SIZE = INREG32( &m_pDispRegs->tDISPC_VID2.SIZE );
; 3509 :             pDisplaySaveRestore->tDISPC_VID2.ATTRIBUTES = INREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES );
; 3510 :             pDisplaySaveRestore->tDISPC_VID2.FIFO_THRESHOLD = INREG32( &m_pDispRegs->tDISPC_VID2.FIFO_THRESHOLD );
; 3511 :             pDisplaySaveRestore->tDISPC_VID2.ROW_INC = INREG32( &m_pDispRegs->tDISPC_VID2.ROW_INC );
; 3512 :             pDisplaySaveRestore->tDISPC_VID2.PIXEL_INC = INREG32( &m_pDispRegs->tDISPC_VID2.PIXEL_INC );
; 3513 :             pDisplaySaveRestore->tDISPC_VID2.FIR = INREG32( &m_pDispRegs->tDISPC_VID2.FIR );
; 3514 :             pDisplaySaveRestore->tDISPC_VID2.PICTURE_SIZE = INREG32( &m_pDispRegs->tDISPC_VID2.PICTURE_SIZE );
; 3515 :             pDisplaySaveRestore->tDISPC_VID2.ACCU0 = INREG32( &m_pDispRegs->tDISPC_VID2.ACCU0 );

  00200	e3e020bf	 mvn         r2, #0xBF

; 3516 :             pDisplaySaveRestore->tDISPC_VID2.ACCU1 = INREG32( &m_pDispRegs->tDISPC_VID2.ACCU1 );

  00204	e3a06c02	 mov         r6, #2, 24
  00208	e593314c	 ldr         r3, [r3, #0x14C]
  0020c	e3a07d06	 mov         r7, #6, 26
  00210	e28e5d06	 add         r5, lr, #6, 26
  00214	e58e314c	 str         r3, [lr, #0x14C]
  00218	e5943008	 ldr         r3, [r4, #8]
  0021c	e06e9082	 rsb         r9, lr, r2, lsl #1
  00220	e3a08008	 mov         r8, #8
  00224	e5933150	 ldr         r3, [r3, #0x150]
  00228	e58e3150	 str         r3, [lr, #0x150]
  0022c	e5943008	 ldr         r3, [r4, #8]
  00230	e5933154	 ldr         r3, [r3, #0x154]
  00234	e58e3154	 str         r3, [lr, #0x154]
  00238	e5943008	 ldr         r3, [r4, #8]
  0023c	e5933158	 ldr         r3, [r3, #0x158]
  00240	e58e3158	 str         r3, [lr, #0x158]
  00244	e5943008	 ldr         r3, [r4, #8]
  00248	e593315c	 ldr         r3, [r3, #0x15C]
  0024c	e58e315c	 str         r3, [lr, #0x15C]
  00250	e5943008	 ldr         r3, [r4, #8]
  00254	e5933160	 ldr         r3, [r3, #0x160]
  00258	e58e3160	 str         r3, [lr, #0x160]
  0025c	e5943008	 ldr         r3, [r4, #8]
  00260	e5933168	 ldr         r3, [r3, #0x168]
  00264	e58e3168	 str         r3, [lr, #0x168]
  00268	e5943008	 ldr         r3, [r4, #8]
  0026c	e593316c	 ldr         r3, [r3, #0x16C]
  00270	e58e316c	 str         r3, [lr, #0x16C]
  00274	e5943008	 ldr         r3, [r4, #8]
  00278	e5933170	 ldr         r3, [r3, #0x170]
  0027c	e58e3170	 str         r3, [lr, #0x170]
  00280	e5943008	 ldr         r3, [r4, #8]
  00284	e5933174	 ldr         r3, [r3, #0x174]
  00288	e58e3174	 str         r3, [lr, #0x174]
  0028c	e5943008	 ldr         r3, [r4, #8]
  00290	e5933178	 ldr         r3, [r3, #0x178]
  00294	e58e3178	 str         r3, [lr, #0x178]
  00298	e5943008	 ldr         r3, [r4, #8]
  0029c	e593317c	 ldr         r3, [r3, #0x17C]
  002a0	e58e317c	 str         r3, [lr, #0x17C]
  002a4		 |$LL3@SaveRegist|

; 3517 : 
; 3518 :             //  Scaling coefficients
; 3519 :             for( i = 0; i < NUM_SCALING_PHASES; i++ )
; 3520 :             {
; 3521 :                 pDisplaySaveRestore->tDISPC_VID2.aFIR_COEF[i].ulH = INREG32( &m_pDispRegs->tDISPC_VID2.aFIR_COEF[i].ulH );

  002a4	e5943008	 ldr         r3, [r4, #8]

; 3522 :                 pDisplaySaveRestore->tDISPC_VID2.aFIR_COEF[i].ulHV = INREG32( &m_pDispRegs->tDISPC_VID2.aFIR_COEF[i].ulHV );

  002a8	e0892005	 add         r2, r9, r5
  002ac	e2851004	 add         r1, r5, #4
  002b0	e7973003	 ldr         r3, [r7, +r3]

; 3523 :                 pDisplaySaveRestore->DISPC_VID2_FIR_COEF_V[i] = INREG32( &m_pDispRegs->DISPC_VID2_FIR_COEF_V[i] );

  002b4	e086000e	 add         r0, r6, lr
  002b8	e2877008	 add         r7, r7, #8
  002bc	e5853000	 str         r3, [r5]
  002c0	e5943008	 ldr         r3, [r4, #8]
  002c4	e2855008	 add         r5, r5, #8
  002c8	e2588001	 subs        r8, r8, #1
  002cc	e0823003	 add         r3, r2, r3
  002d0	e5933184	 ldr         r3, [r3, #0x184]
  002d4	e5813000	 str         r3, [r1]
  002d8	e5943008	 ldr         r3, [r4, #8]
  002dc	e7963003	 ldr         r3, [r6, +r3]
  002e0	e2866004	 add         r6, r6, #4
  002e4	e5803000	 str         r3, [r0]
  002e8	1affffed	 bne         |$LL3@SaveRegist|
  002ec		 |$LN1@SaveRegist|

; 3524 :             }
; 3525 :         }
; 3526 :     }
; 3527 :     
; 3528 :     
; 3529 :     //  Success
; 3530 :     bResult = TRUE;

  002ec	e3a05001	 mov         r5, #1
  002f0		 |$cleanUp$39187|

; 3531 : 
; 3532 : cleanUp:
; 3533 :     //  Release regs
; 3534 :     ReleaseRegs();

  002f0	e2840e49	 add         r0, r4, #0x49, 28
  002f4	eb000000	 bl          LeaveCriticalSection

; 3535 : 
; 3536 :     //  Return result
; 3537 :     return bResult;
; 3538 : }

  002f8	e1a00005	 mov         r0, r5
  002fc	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00300	e12fff1e	 bx          lr
  00304		 |$LN28@SaveRegist|
  00304		 |$LN29@SaveRegist|
  00304	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  00308		 |$M41834|

			 ENDP  ; |?SaveRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|, OMAPDisplayController::SaveRegisters

	EXPORT	|?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z| ; OMAPDisplayController::RestoreRegisters
	IMPORT	|LcdPdd_LCD_Initialize|

  00000			 AREA	 |.pdata|, PDATA
|$T41859| DCD	|$LN31@RestoreReg|
	DCD	0x4000fc01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z| PROC ; OMAPDisplayController::RestoreRegisters

; 3545 : {

  00000		 |$LN31@RestoreReg|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M41856|
  00004	e1a07001	 mov         r7, r1
  00008	e1a04000	 mov         r4, r0

; 3546 :     BOOL    bResult = FALSE;
; 3547 :     DWORD   i;
; 3548 :     OMAP_DISPC_REGS   *pDisplaySaveRestore = 0;
; 3549 :     
; 3550 :     //  Access the regs
; 3551 :     if( AccessRegs() == FALSE )

  0000c	e3a06000	 mov         r6, #0
  00010	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00014	e3500000	 cmp         r0, #0
  00018	0a0000ee	 beq         |$cleanUp$39255|

; 3552 :         goto cleanUp;
; 3553 : 
; 3554 :     // Choose the last active LCD context ( internal LCD/external LCD)
; 3555 :     if (!m_bHDMIEnable)

  0001c	e59434cc	 ldr         r3, [r4, #0x4CC]
  00020	e3530000	 cmp         r3, #0

; 3556 :         pDisplaySaveRestore = &g_rgDisplaySaveRestore;

  00024	0284501c	 addeq       r5, r4, #0x1C

; 3557 :     else
; 3558 :         pDisplaySaveRestore = &g_rgDisplaySaveRestore_eLcd;

  00028	12845f95	 addne       r5, r4, #0x95, 30

; 3559 : 
; 3560 :     if (pDisplaySaveRestore == NULL)

  0002c	e3550000	 cmp         r5, #0
  00030	0a0000e8	 beq         |$cleanUp$39255|

; 3561 :         goto cleanUp;
; 3562 : 
; 3563 :         
; 3564 :     //  Restore the DSS and LCD registers
; 3565 :     if( eDestination == OMAP_DSS_DESTINATION_LCD )

  00034	e3570000	 cmp         r7, #0
  00038	1a0000e5	 bne         |$LN5@RestoreReg|

; 3566 :     {
; 3567 :         //  Configure interconnect parameters
; 3568 :         OUTREG32( &m_pDSSRegs->DSS_SYSCONFIG, DISPC_SYSCONFIG_AUTOIDLE );

  0003c	e5943004	 ldr         r3, [r4, #4]
  00040	e3a02001	 mov         r2, #1
  00044	e3a01a01	 mov         r1, #1, 20
  00048	e5832010	 str         r2, [r3, #0x10]

; 3569 :         OUTREG32( &m_pDispRegs->DISPC_SYSCONFIG, DISPC_SYSCONFIG_AUTOIDLE|SYSCONFIG_NOIDLE|SYSCONFIG_NOSTANDBY );

  0004c	e5942008	 ldr         r2, [r4, #8]
  00050	e3813009	 orr         r3, r1, #9

; 3570 : 
; 3571 :         //  Not enabling any interrupts
; 3572 :         OUTREG32( &m_pDispRegs->DISPC_IRQENABLE , pDisplaySaveRestore->DISPC_IRQENABLE);

  00054	e5823010	 str         r3, [r2, #0x10]
  00058	e5942008	 ldr         r2, [r4, #8]
  0005c	e595301c	 ldr         r3, [r5, #0x1C]
  00060	e582301c	 str         r3, [r2, #0x1C]

; 3573 : 
; 3574 :         //  Initialize the LCD by calling PDD
; 3575 :         LcdPdd_LCD_Initialize(
; 3576 :             m_pDSSRegs,
; 3577 :             m_pDispRegs,
; 3578 :             m_pRFBIRegs,
; 3579 :             m_pVencRegs);

  00064	e594300c	 ldr         r3, [r4, #0xC]
  00068	e5942018	 ldr         r2, [r4, #0x18]
  0006c	e5941008	 ldr         r1, [r4, #8]
  00070	e5940004	 ldr         r0, [r4, #4]
  00074	eb000000	 bl          LcdPdd_LCD_Initialize

; 3580 : 
; 3581 :         OUTREG32( &m_pDispRegs->DISPC_CONFIG, pDisplaySaveRestore->DISPC_CONFIG );

  00078	e5942008	 ldr         r2, [r4, #8]
  0007c	e5953044	 ldr         r3, [r5, #0x44]

; 3582 : 
; 3583 :         //Enable/Disable Gamma correction
; 3584 :         if(m_bGammaEnable)
; 3585 :             SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_PALETTEGAMMATABLE );
; 3586 :         else
; 3587 :             CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_PALETTEGAMMATABLE );
; 3588 : 
; 3589 :         // Load Gamma Table
; 3590 :         OUTREG32( &m_pDispRegs->DISPC_GFX_TABLE_BA, m_dwGammaBufPhys);
; 3591 : 
; 3592 :         //  Restore global alpha value
; 3593 :         OUTREG32( &m_pDispRegs->DISPC_GLOBAL_ALPHA, pDisplaySaveRestore->DISPC_GLOBAL_ALPHA );
; 3594 : 
; 3595 :         // Restore transparency value
; 3596 :         OUTREG32( &m_pDispRegs->DISPC_TRANS_COLOR0, pDisplaySaveRestore->DISPC_TRANS_COLOR0 );
; 3597 :         OUTREG32( &m_pDispRegs->DISPC_TRANS_COLOR1, pDisplaySaveRestore->DISPC_TRANS_COLOR1 );
; 3598 : 
; 3599 :         //  Restore GFX plane registers if enabled
; 3600 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled )

  00080	e59fe364	 ldr         lr, [pc, #0x364]
  00084	e5823044	 str         r3, [r2, #0x44]
  00088	e59434e0	 ldr         r3, [r4, #0x4E0]
  0008c	e5942008	 ldr         r2, [r4, #8]
  00090	e3530000	 cmp         r3, #0
  00094	e5923044	 ldr         r3, [r2, #0x44]
  00098	13833008	 orrne       r3, r3, #8
  0009c	03c33008	 biceq       r3, r3, #8
  000a0	e5823044	 str         r3, [r2, #0x44]
  000a4	e5942008	 ldr         r2, [r4, #8]
  000a8	e59434dc	 ldr         r3, [r4, #0x4DC]
  000ac	e58230b8	 str         r3, [r2, #0xB8]
  000b0	e5942008	 ldr         r2, [r4, #8]
  000b4	e5953074	 ldr         r3, [r5, #0x74]
  000b8	e5823074	 str         r3, [r2, #0x74]
  000bc	e5942008	 ldr         r2, [r4, #8]
  000c0	e5953054	 ldr         r3, [r5, #0x54]
  000c4	e5823054	 str         r3, [r2, #0x54]
  000c8	e5942008	 ldr         r2, [r4, #8]
  000cc	e5953058	 ldr         r3, [r5, #0x58]
  000d0	e5823058	 str         r3, [r2, #0x58]
  000d4	e59e3000	 ldr         r3, [lr]
  000d8	e3530000	 cmp         r3, #0
  000dc	0a00001a	 beq         |$LN10@RestoreReg|

; 3601 :         {
; 3602 :             OUTREG32( &m_pDispRegs->DISPC_GFX_BA0, pDisplaySaveRestore->DISPC_GFX_BA0 );

  000e0	e5942008	 ldr         r2, [r4, #8]
  000e4	e5953080	 ldr         r3, [r5, #0x80]

; 3603 :             OUTREG32( &m_pDispRegs->DISPC_GFX_BA1, pDisplaySaveRestore->DISPC_GFX_BA1 );

  000e8	e5823080	 str         r3, [r2, #0x80]
  000ec	e5942008	 ldr         r2, [r4, #8]
  000f0	e5953084	 ldr         r3, [r5, #0x84]

; 3604 :             OUTREG32( &m_pDispRegs->DISPC_GFX_POSITION, pDisplaySaveRestore->DISPC_GFX_POSITION );

  000f4	e5823084	 str         r3, [r2, #0x84]
  000f8	e5942008	 ldr         r2, [r4, #8]
  000fc	e5953088	 ldr         r3, [r5, #0x88]

; 3605 :             OUTREG32( &m_pDispRegs->DISPC_GFX_SIZE, pDisplaySaveRestore->DISPC_GFX_SIZE );

  00100	e5823088	 str         r3, [r2, #0x88]
  00104	e5942008	 ldr         r2, [r4, #8]
  00108	e595308c	 ldr         r3, [r5, #0x8C]

; 3606 :             OUTREG32( &m_pDispRegs->DISPC_GFX_ATTRIBUTES, pDisplaySaveRestore->DISPC_GFX_ATTRIBUTES );

  0010c	e582308c	 str         r3, [r2, #0x8C]
  00110	e5942008	 ldr         r2, [r4, #8]
  00114	e59530a0	 ldr         r3, [r5, #0xA0]

; 3607 :             OUTREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD, pDisplaySaveRestore->DISPC_GFX_FIFO_THRESHOLD );

  00118	e58230a0	 str         r3, [r2, #0xA0]
  0011c	e5942008	 ldr         r2, [r4, #8]
  00120	e59530a4	 ldr         r3, [r5, #0xA4]

; 3608 :             OUTREG32( &m_pDispRegs->DISPC_GFX_ROW_INC, pDisplaySaveRestore->DISPC_GFX_ROW_INC );

  00124	e58230a4	 str         r3, [r2, #0xA4]
  00128	e5942008	 ldr         r2, [r4, #8]
  0012c	e59530ac	 ldr         r3, [r5, #0xAC]

; 3609 :             OUTREG32( &m_pDispRegs->DISPC_GFX_PIXEL_INC, pDisplaySaveRestore->DISPC_GFX_PIXEL_INC );

  00130	e58230ac	 str         r3, [r2, #0xAC]
  00134	e5942008	 ldr         r2, [r4, #8]
  00138	e59530b0	 ldr         r3, [r5, #0xB0]

; 3610 :             OUTREG32( &m_pDispRegs->DISPC_GFX_WINDOW_SKIP, pDisplaySaveRestore->DISPC_GFX_WINDOW_SKIP );

  0013c	e58230b0	 str         r3, [r2, #0xB0]
  00140	e5942008	 ldr         r2, [r4, #8]
  00144	e59530b4	 ldr         r3, [r5, #0xB4]
  00148	e58230b4	 str         r3, [r2, #0xB4]
  0014c		 |$LN10@RestoreReg|

; 3611 :         }
; 3612 : 
; 3613 : 
; 3614 :         //  Restore VID1 plane registers if enabled
; 3615 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled )

  0014c	e59e3020	 ldr         r3, [lr, #0x20]
  00150	e3530000	 cmp         r3, #0
  00154	0a00004d	 beq         |$LN9@RestoreReg|

; 3616 :         {
; 3617 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.BA0, pDisplaySaveRestore->tDISPC_VID1.BA0 );

  00158	e5942008	 ldr         r2, [r4, #8]
  0015c	e59530bc	 ldr         r3, [r5, #0xBC]

; 3618 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.BA1, pDisplaySaveRestore->tDISPC_VID1.BA1 );
; 3619 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.POSITION, pDisplaySaveRestore->tDISPC_VID1.POSITION );
; 3620 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.SIZE, pDisplaySaveRestore->tDISPC_VID1.SIZE );
; 3621 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES, pDisplaySaveRestore->tDISPC_VID1.ATTRIBUTES );
; 3622 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.FIFO_THRESHOLD, pDisplaySaveRestore->tDISPC_VID1.FIFO_THRESHOLD );
; 3623 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.ROW_INC, pDisplaySaveRestore->tDISPC_VID1.ROW_INC );
; 3624 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.PIXEL_INC, pDisplaySaveRestore->tDISPC_VID1.PIXEL_INC );
; 3625 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.FIR, pDisplaySaveRestore->tDISPC_VID1.FIR );
; 3626 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.PICTURE_SIZE, pDisplaySaveRestore->tDISPC_VID1.PICTURE_SIZE );
; 3627 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.ACCU0, pDisplaySaveRestore->tDISPC_VID1.ACCU0 );
; 3628 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.ACCU1, pDisplaySaveRestore->tDISPC_VID1.ACCU1 );

  00160	e3e010ef	 mvn         r1, #0xEF
  00164	e3a06e1e	 mov         r6, #0x1E, 28
  00168	e58230bc	 str         r3, [r2, #0xBC]
  0016c	e5942008	 ldr         r2, [r4, #8]
  00170	e59530c0	 ldr         r3, [r5, #0xC0]
  00174	e3a070f0	 mov         r7, #0xF0
  00178	e28500f0	 add         r0, r5, #0xF0
  0017c	e58230c0	 str         r3, [r2, #0xC0]
  00180	e5942008	 ldr         r2, [r4, #8]
  00184	e59530c4	 ldr         r3, [r5, #0xC4]
  00188	e0659001	 rsb         r9, r5, r1
  0018c	e3a08008	 mov         r8, #8
  00190	e58230c4	 str         r3, [r2, #0xC4]
  00194	e5942008	 ldr         r2, [r4, #8]
  00198	e59530c8	 ldr         r3, [r5, #0xC8]
  0019c	e58230c8	 str         r3, [r2, #0xC8]
  001a0	e5942008	 ldr         r2, [r4, #8]
  001a4	e59530cc	 ldr         r3, [r5, #0xCC]
  001a8	e58230cc	 str         r3, [r2, #0xCC]
  001ac	e5942008	 ldr         r2, [r4, #8]
  001b0	e59530d0	 ldr         r3, [r5, #0xD0]
  001b4	e58230d0	 str         r3, [r2, #0xD0]
  001b8	e5942008	 ldr         r2, [r4, #8]
  001bc	e59530d8	 ldr         r3, [r5, #0xD8]
  001c0	e58230d8	 str         r3, [r2, #0xD8]
  001c4	e5942008	 ldr         r2, [r4, #8]
  001c8	e59530dc	 ldr         r3, [r5, #0xDC]
  001cc	e58230dc	 str         r3, [r2, #0xDC]
  001d0	e5942008	 ldr         r2, [r4, #8]
  001d4	e59530e0	 ldr         r3, [r5, #0xE0]
  001d8	e58230e0	 str         r3, [r2, #0xE0]
  001dc	e5942008	 ldr         r2, [r4, #8]
  001e0	e59530e4	 ldr         r3, [r5, #0xE4]
  001e4	e58230e4	 str         r3, [r2, #0xE4]
  001e8	e5942008	 ldr         r2, [r4, #8]
  001ec	e59530e8	 ldr         r3, [r5, #0xE8]
  001f0	e58230e8	 str         r3, [r2, #0xE8]
  001f4	e5942008	 ldr         r2, [r4, #8]
  001f8	e59530ec	 ldr         r3, [r5, #0xEC]
  001fc	e58230ec	 str         r3, [r2, #0xEC]
  00200		 |$LL8@RestoreReg|

; 3629 : 
; 3630 :             //  Scaling coefficients
; 3631 :             for( i = 0; i < NUM_SCALING_PHASES; i++ )
; 3632 :             {
; 3633 :                 OUTREG32( &m_pDispRegs->tDISPC_VID1.aFIR_COEF[i].ulH, pDisplaySaveRestore->tDISPC_VID1.aFIR_COEF[i].ulH );

  00200	e5942008	 ldr         r2, [r4, #8]
  00204	e5903000	 ldr         r3, [r0]

; 3634 :                 OUTREG32( &m_pDispRegs->tDISPC_VID1.aFIR_COEF[i].ulHV, pDisplaySaveRestore->tDISPC_VID1.aFIR_COEF[i].ulHV );

  00208	e0891000	 add         r1, r9, r0

; 3635 :                 OUTREG32( &m_pDispRegs->DISPC_VID1_FIR_COEF_V[i], pDisplaySaveRestore->DISPC_VID1_FIR_COEF_V[i] );

  0020c	e2588001	 subs        r8, r8, #1
  00210	e7873002	 str         r3, [r7, +r2]
  00214	e5943008	 ldr         r3, [r4, #8]
  00218	e5902004	 ldr         r2, [r0, #4]
  0021c	e2877008	 add         r7, r7, #8
  00220	e0813003	 add         r3, r1, r3
  00224	e58320f4	 str         r2, [r3, #0xF4]
  00228	e5942008	 ldr         r2, [r4, #8]
  0022c	e7963005	 ldr         r3, [r6, +r5]
  00230	e2800008	 add         r0, r0, #8
  00234	e7863002	 str         r3, [r6, +r2]
  00238	e2866004	 add         r6, r6, #4
  0023c	1affffef	 bne         |$LL8@RestoreReg|

; 3636 :             }
; 3637 : 
; 3638 :             //  Color conversion coefficients
; 3639 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF0, m_pColorSpaceCoeffs[0] );

  00240	e59434a4	 ldr         r3, [r4, #0x4A4]
  00244	e5942008	 ldr         r2, [r4, #8]
  00248	e5933000	 ldr         r3, [r3]
  0024c	e5823130	 str         r3, [r2, #0x130]

; 3640 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF1, m_pColorSpaceCoeffs[1] );

  00250	e59434a4	 ldr         r3, [r4, #0x4A4]
  00254	e5942008	 ldr         r2, [r4, #8]
  00258	e5933004	 ldr         r3, [r3, #4]
  0025c	e5823134	 str         r3, [r2, #0x134]

; 3641 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF2, m_pColorSpaceCoeffs[2] );

  00260	e59434a4	 ldr         r3, [r4, #0x4A4]
  00264	e5942008	 ldr         r2, [r4, #8]
  00268	e5933008	 ldr         r3, [r3, #8]
  0026c	e5823138	 str         r3, [r2, #0x138]

; 3642 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF3, m_pColorSpaceCoeffs[3] );

  00270	e59434a4	 ldr         r3, [r4, #0x4A4]
  00274	e5942008	 ldr         r2, [r4, #8]
  00278	e593300c	 ldr         r3, [r3, #0xC]
  0027c	e582313c	 str         r3, [r2, #0x13C]

; 3643 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.CONV_COEF4, m_pColorSpaceCoeffs[4] );

  00280	e59434a4	 ldr         r3, [r4, #0x4A4]
  00284	e5942008	 ldr         r2, [r4, #8]
  00288	e5933010	 ldr         r3, [r3, #0x10]
  0028c	e5823140	 str         r3, [r2, #0x140]
  00290		 |$LN9@RestoreReg|

; 3644 :         }
; 3645 : 
; 3646 :         //  Restore VID2 plane registers if enabled
; 3647 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled )

  00290	e59e3040	 ldr         r3, [lr, #0x40]
  00294	e3530000	 cmp         r3, #0
  00298	0a00004d	 beq         |$LN5@RestoreReg|

; 3648 :         {
; 3649 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.BA0, pDisplaySaveRestore->tDISPC_VID2.BA0 );

  0029c	e5942008	 ldr         r2, [r4, #8]
  002a0	e595314c	 ldr         r3, [r5, #0x14C]

; 3650 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.BA1, pDisplaySaveRestore->tDISPC_VID2.BA1 );
; 3651 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.POSITION, pDisplaySaveRestore->tDISPC_VID2.POSITION );
; 3652 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.SIZE, pDisplaySaveRestore->tDISPC_VID2.SIZE );
; 3653 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES, pDisplaySaveRestore->tDISPC_VID2.ATTRIBUTES );
; 3654 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.FIFO_THRESHOLD, pDisplaySaveRestore->tDISPC_VID2.FIFO_THRESHOLD );
; 3655 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.ROW_INC, pDisplaySaveRestore->tDISPC_VID2.ROW_INC );
; 3656 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.PIXEL_INC, pDisplaySaveRestore->tDISPC_VID2.PIXEL_INC );
; 3657 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.FIR, pDisplaySaveRestore->tDISPC_VID2.FIR );
; 3658 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.PICTURE_SIZE, pDisplaySaveRestore->tDISPC_VID2.PICTURE_SIZE );
; 3659 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.ACCU0, pDisplaySaveRestore->tDISPC_VID2.ACCU0 );
; 3660 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.ACCU1, pDisplaySaveRestore->tDISPC_VID2.ACCU1 );

  002a4	e3e010bf	 mvn         r1, #0xBF
  002a8	e3a0ec02	 mov         lr, #2, 24
  002ac	e582314c	 str         r3, [r2, #0x14C]
  002b0	e5942008	 ldr         r2, [r4, #8]
  002b4	e5953150	 ldr         r3, [r5, #0x150]
  002b8	e3a06d06	 mov         r6, #6, 26
  002bc	e2850d06	 add         r0, r5, #6, 26
  002c0	e5823150	 str         r3, [r2, #0x150]
  002c4	e5942008	 ldr         r2, [r4, #8]
  002c8	e5953154	 ldr         r3, [r5, #0x154]
  002cc	e0658081	 rsb         r8, r5, r1, lsl #1
  002d0	e3a07008	 mov         r7, #8
  002d4	e5823154	 str         r3, [r2, #0x154]
  002d8	e5942008	 ldr         r2, [r4, #8]
  002dc	e5953158	 ldr         r3, [r5, #0x158]
  002e0	e5823158	 str         r3, [r2, #0x158]
  002e4	e5942008	 ldr         r2, [r4, #8]
  002e8	e595315c	 ldr         r3, [r5, #0x15C]
  002ec	e582315c	 str         r3, [r2, #0x15C]
  002f0	e5942008	 ldr         r2, [r4, #8]
  002f4	e5953160	 ldr         r3, [r5, #0x160]
  002f8	e5823160	 str         r3, [r2, #0x160]
  002fc	e5942008	 ldr         r2, [r4, #8]
  00300	e5953168	 ldr         r3, [r5, #0x168]
  00304	e5823168	 str         r3, [r2, #0x168]
  00308	e5942008	 ldr         r2, [r4, #8]
  0030c	e595316c	 ldr         r3, [r5, #0x16C]
  00310	e582316c	 str         r3, [r2, #0x16C]
  00314	e5942008	 ldr         r2, [r4, #8]
  00318	e5953170	 ldr         r3, [r5, #0x170]
  0031c	e5823170	 str         r3, [r2, #0x170]
  00320	e5942008	 ldr         r2, [r4, #8]
  00324	e5953174	 ldr         r3, [r5, #0x174]
  00328	e5823174	 str         r3, [r2, #0x174]
  0032c	e5942008	 ldr         r2, [r4, #8]
  00330	e5953178	 ldr         r3, [r5, #0x178]
  00334	e5823178	 str         r3, [r2, #0x178]
  00338	e5942008	 ldr         r2, [r4, #8]
  0033c	e595317c	 ldr         r3, [r5, #0x17C]
  00340	e582317c	 str         r3, [r2, #0x17C]
  00344		 |$LL4@RestoreReg|

; 3661 : 
; 3662 :             //  Scaling coefficients
; 3663 :             for( i = 0; i < NUM_SCALING_PHASES; i++ )
; 3664 :             {
; 3665 :                 OUTREG32( &m_pDispRegs->tDISPC_VID2.aFIR_COEF[i].ulH, pDisplaySaveRestore->tDISPC_VID2.aFIR_COEF[i].ulH );

  00344	e5942008	 ldr         r2, [r4, #8]
  00348	e5903000	 ldr         r3, [r0]

; 3666 :                 OUTREG32( &m_pDispRegs->tDISPC_VID2.aFIR_COEF[i].ulHV, pDisplaySaveRestore->tDISPC_VID2.aFIR_COEF[i].ulHV );

  0034c	e0881000	 add         r1, r8, r0

; 3667 :                 OUTREG32( &m_pDispRegs->DISPC_VID2_FIR_COEF_V[i], pDisplaySaveRestore->DISPC_VID2_FIR_COEF_V[i] );

  00350	e2577001	 subs        r7, r7, #1
  00354	e7863002	 str         r3, [r6, +r2]
  00358	e5943008	 ldr         r3, [r4, #8]
  0035c	e5902004	 ldr         r2, [r0, #4]
  00360	e2866008	 add         r6, r6, #8
  00364	e0813003	 add         r3, r1, r3
  00368	e5832184	 str         r2, [r3, #0x184]
  0036c	e5942008	 ldr         r2, [r4, #8]
  00370	e79e3005	 ldr         r3, [lr, +r5]
  00374	e2800008	 add         r0, r0, #8
  00378	e78e3002	 str         r3, [lr, +r2]
  0037c	e28ee004	 add         lr, lr, #4
  00380	1affffef	 bne         |$LL4@RestoreReg|

; 3668 :             }
; 3669 : 
; 3670 :             //  Color conversion coefficients
; 3671 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF0, m_pColorSpaceCoeffs[0] );

  00384	e59434a4	 ldr         r3, [r4, #0x4A4]
  00388	e5942008	 ldr         r2, [r4, #8]
  0038c	e5933000	 ldr         r3, [r3]
  00390	e58231c0	 str         r3, [r2, #0x1C0]

; 3672 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF1, m_pColorSpaceCoeffs[1] );

  00394	e59434a4	 ldr         r3, [r4, #0x4A4]
  00398	e5942008	 ldr         r2, [r4, #8]
  0039c	e5933004	 ldr         r3, [r3, #4]
  003a0	e58231c4	 str         r3, [r2, #0x1C4]

; 3673 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF2, m_pColorSpaceCoeffs[2] );

  003a4	e59434a4	 ldr         r3, [r4, #0x4A4]
  003a8	e5942008	 ldr         r2, [r4, #8]
  003ac	e5933008	 ldr         r3, [r3, #8]
  003b0	e58231c8	 str         r3, [r2, #0x1C8]

; 3674 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF3, m_pColorSpaceCoeffs[3] );

  003b4	e59434a4	 ldr         r3, [r4, #0x4A4]
  003b8	e5942008	 ldr         r2, [r4, #8]
  003bc	e593300c	 ldr         r3, [r3, #0xC]
  003c0	e58231cc	 str         r3, [r2, #0x1CC]

; 3675 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.CONV_COEF4, m_pColorSpaceCoeffs[4] );

  003c4	e59434a4	 ldr         r3, [r4, #0x4A4]
  003c8	e5942008	 ldr         r2, [r4, #8]
  003cc	e5933010	 ldr         r3, [r3, #0x10]
  003d0	e58231d0	 str         r3, [r2, #0x1D0]
  003d4		 |$LN5@RestoreReg|

; 3676 :         }
; 3677 : 
; 3678 :     }
; 3679 : 
; 3680 :     //  Restore the TV out registers
; 3681 :     //  TV regs are not saved off b/c most are set to defaults
; 3682 :     if( eDestination == OMAP_DSS_DESTINATION_TVOUT )
; 3683 :     {
; 3684 :     /*    DWORD*  pVencPtr = NULL;
; 3685 : 
; 3686 :         //  Initialize the TV by calling PDD
; 3687 :         bResult = LcdPdd_TV_Initialize(
; 3688 :                         m_pDSSRegs,
; 3689 :                         m_pDispRegs,
; 3690 :                         NULL,
; 3691 :                         m_pVencRegs );
; 3692 : 
; 3693 :         //  Get TV parameters
; 3694 :         LcdPdd_TV_GetMode(
; 3695 :                         &m_dwTVWidth,
; 3696 :                         &m_dwTVHeight,
; 3697 :                         &m_dwTVMode );
; 3698 : 
; 3699 : 
; 3700 :         //  Initialize Video Encoder registers for NTSC or PAL based on size of mode
; 3701 :         //  Default to NTSC
; 3702 :         if( m_dwTVWidth == PAL_WIDTH && m_dwTVHeight == PAL_HEIGHT )
; 3703 :         {
; 3704 :             //  Set for PAL
; 3705 :             pVencPtr = g_dwVencValues_PAL;
; 3706 :             m_dwTVMode = (m_dwTVMode == 0) ?  g_dwVencValues_PAL[VENC_OUTPUT_CONTROL] : m_dwTVMode;
; 3707 :         }
; 3708 :         else
; 3709 :         {
; 3710 :             //  Set for NTSC
; 3711 :             pVencPtr = g_dwVencValues_NTSC;
; 3712 :             m_dwTVMode = (m_dwTVMode == 0) ?  g_dwVencValues_NTSC[VENC_OUTPUT_CONTROL] : m_dwTVMode;
; 3713 :         }
; 3714 : 
; 3715 :         OUTREG32( &m_pVencRegs->VENC_F_CONTROL, pVencPtr[VENC_F_CONTROL] );
; 3716 :         OUTREG32( &m_pVencRegs->VENC_SYNC_CTRL, (pVencPtr[VENC_SYNC_CTRL] | 0x00000040) );     
; 3717 :         //  Initialize encoder
; 3718 :         OUTREG32( &m_pVencRegs->VENC_VIDOUT_CTRL, pVencPtr[VENC_VIDOUT_CTRL] );
; 3719 :         OUTREG32( &m_pVencRegs->VENC_LLEN, pVencPtr[VENC_LLEN] );
; 3720 :         OUTREG32( &m_pVencRegs->VENC_FLENS, pVencPtr[VENC_FLENS] );
; 3721 :         OUTREG32( &m_pVencRegs->VENC_HFLTR_CTRL, pVencPtr[VENC_HFLTR_CTRL] );
; 3722 :         OUTREG32( &m_pVencRegs->VENC_CC_CARR_WSS_CARR, pVencPtr[VENC_CC_CARR_WSS_CARR] );
; 3723 :         OUTREG32( &m_pVencRegs->VENC_C_PHASE, pVencPtr[VENC_C_PHASE] );
; 3724 :         OUTREG32( &m_pVencRegs->VENC_GAIN_U, pVencPtr[VENC_GAIN_U] );
; 3725 :         OUTREG32( &m_pVencRegs->VENC_GAIN_V, pVencPtr[VENC_GAIN_V] );
; 3726 :         OUTREG32( &m_pVencRegs->VENC_GAIN_Y, pVencPtr[VENC_GAIN_Y] );
; 3727 :         OUTREG32( &m_pVencRegs->VENC_BLACK_LEVEL, pVencPtr[VENC_BLACK_LEVEL] );
; 3728 :         OUTREG32( &m_pVencRegs->VENC_BLANK_LEVEL, pVencPtr[VENC_BLANK_LEVEL] );
; 3729 :         OUTREG32( &m_pVencRegs->VENC_X_COLOR, pVencPtr[VENC_X_COLOR] );
; 3730 :         OUTREG32( &m_pVencRegs->VENC_M_CONTROL, pVencPtr[VENC_M_CONTROL] );
; 3731 :         OUTREG32( &m_pVencRegs->VENC_BSTAMP_WSS_DATA, pVencPtr[VENC_BSTAMP_WSS_DATA] );
; 3732 :         OUTREG32( &m_pVencRegs->VENC_S_CARR, pVencPtr[VENC_S_CARR] );
; 3733 :         OUTREG32( &m_pVencRegs->VENC_LINE21, pVencPtr[VENC_LINE21] );
; 3734 :         OUTREG32( &m_pVencRegs->VENC_LN_SEL, pVencPtr[VENC_LN_SEL] );
; 3735 :         OUTREG32( &m_pVencRegs->VENC_L21__WC_CTL, pVencPtr[VENC_L21__WC_CTL] );
; 3736 :         OUTREG32( &m_pVencRegs->VENC_HTRIGGER_VTRIGGER, pVencPtr[VENC_HTRIGGER_VTRIGGER] );
; 3737 :         OUTREG32( &m_pVencRegs->VENC_SAVID_EAVID, pVencPtr[VENC_SAVID_EAVID] );
; 3738 :         OUTREG32( &m_pVencRegs->VENC_FLEN_FAL, pVencPtr[VENC_FLEN_FAL] );
; 3739 :         OUTREG32( &m_pVencRegs->VENC_LAL_PHASE_RESET, pVencPtr[VENC_LAL_PHASE_RESET] );
; 3740 :         OUTREG32( &m_pVencRegs->VENC_HS_INT_START_STOP_X, pVencPtr[VENC_HS_INT_START_STOP_X] );
; 3741 :         OUTREG32( &m_pVencRegs->VENC_HS_EXT_START_STOP_X, pVencPtr[VENC_HS_EXT_START_STOP_X] );
; 3742 :         OUTREG32( &m_pVencRegs->VENC_VS_INT_START_X, pVencPtr[VENC_VS_INT_START_X] );
; 3743 :         OUTREG32( &m_pVencRegs->VENC_VS_INT_STOP_X__VS_INT_START_Y, pVencPtr[VENC_VS_INT_STOP_X__VS_INT_START_Y] );
; 3744 :         OUTREG32( &m_pVencRegs->VENC_VS_INT_STOP_Y__VS_EXT_START_X, pVencPtr[VENC_VS_INT_STOP_Y__VS_EXT_START_X] );
; 3745 :         OUTREG32( &m_pVencRegs->VENC_VS_EXT_STOP_X__VS_EXT_START_Y, pVencPtr[VENC_VS_EXT_STOP_X__VS_EXT_START_Y] );
; 3746 :         OUTREG32( &m_pVencRegs->VENC_VS_EXT_STOP_Y, pVencPtr[VENC_VS_EXT_STOP_Y] );
; 3747 :         OUTREG32( &m_pVencRegs->VENC_AVID_START_STOP_X, pVencPtr[VENC_AVID_START_STOP_X] );
; 3748 :         OUTREG32( &m_pVencRegs->VENC_AVID_START_STOP_Y, pVencPtr[VENC_AVID_START_STOP_Y] );
; 3749 :         OUTREG32( &m_pVencRegs->VENC_FID_INT_START_X__FID_INT_START_Y, pVencPtr[VENC_FID_INT_START_X__FID_INT_START_Y] );
; 3750 :         OUTREG32( &m_pVencRegs->VENC_FID_INT_OFFSET_Y__FID_EXT_START_X, pVencPtr[VENC_FID_INT_OFFSET_Y__FID_EXT_START_X] );
; 3751 :         OUTREG32( &m_pVencRegs->VENC_FID_EXT_START_Y__FID_EXT_OFFSET_Y, pVencPtr[VENC_FID_EXT_START_Y__FID_EXT_OFFSET_Y] );
; 3752 :         OUTREG32( &m_pVencRegs->VENC_TVDETGP_INT_START_STOP_X, pVencPtr[VENC_TVDETGP_INT_START_STOP_X] );
; 3753 :         OUTREG32( &m_pVencRegs->VENC_TVDETGP_INT_START_STOP_Y, pVencPtr[VENC_TVDETGP_INT_START_STOP_Y] );
; 3754 :         OUTREG32( &m_pVencRegs->VENC_GEN_CTRL, pVencPtr[VENC_GEN_CTRL] );
; 3755 :         OUTREG32( &m_pVencRegs->VENC_OUTPUT_CONTROL, m_dwTVMode );
; 3756 :         OUTREG32( &m_pVencRegs->VENC_OUTPUT_TEST, pVencPtr[VENC_OUTPUT_TEST] );
; 3757 : 
; 3758 :         OUTREG32( &m_pVencRegs->VENC_F_CONTROL, pVencPtr[VENC_F_CONTROL] );     // TRM mentions that these regs need to be
; 3759 :         OUTREG32( &m_pVencRegs->VENC_SYNC_CTRL, pVencPtr[VENC_SYNC_CTRL] );     // programmed last
; 3760 : 
; 3761 :         //  Flush shadow registers
; 3762 :         FlushRegs( DISPC_CONTROL_GODIGITAL );*/
; 3763 :     }
; 3764 : 
; 3765 :     //  Success
; 3766 :     bResult = TRUE;

  003d4	e3a06001	 mov         r6, #1
  003d8		 |$cleanUp$39255|

; 3767 : 
; 3768 : cleanUp:
; 3769 :     //  Release regs
; 3770 :     ReleaseRegs();

  003d8	e2840e49	 add         r0, r4, #0x49, 28
  003dc	eb000000	 bl          LeaveCriticalSection

; 3771 : 
; 3772 :     //  Return result
; 3773 :     return bResult;
; 3774 : }

  003e0	e1a00006	 mov         r0, r6
  003e4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  003e8	e12fff1e	 bx          lr
  003ec		 |$LN32@RestoreReg|
  003ec		 |$LN33@RestoreReg|
  003ec	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  003f0		 |$M41857|

			 ENDP  ; |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|, OMAPDisplayController::RestoreRegisters

	EXPORT	|?ResetDSS@OMAPDisplayController@@IAAHXZ| ; OMAPDisplayController::ResetDSS

  00000			 AREA	 |.pdata|, PDATA
|$T41896| DCD	|$LN24@ResetDSS|
	DCD	0x40002b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResetDSS@OMAPDisplayController@@IAAHXZ| PROC ; OMAPDisplayController::ResetDSS

; 4240 : {

  00000		 |$LN24@ResetDSS|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M41893|
  00004	e1a05000	 mov         r5, r0

; 4241 :     DWORD   dwTimeout;
; 4242 :     DWORD   dwVal;
; 4243 : 
; 4244 :     //  Need to enable DSS1, DSS2 and TVOUT to reset controller
; 4245 :     RequestClock( m_dssinfo.DSSDevice );         

  00008	e5950520	 ldr         r0, [r5, #0x520]
  0000c	e3a01001	 mov         r1, #1
  00010	eb000000	 bl          EnableDeviceClocks

; 4246 :     RequestClock( m_dssinfo.TVEncoderDevice );

  00014	e5950524	 ldr         r0, [r5, #0x524]
  00018	e3a01001	 mov         r1, #1
  0001c	eb000000	 bl          EnableDeviceClocks

; 4247 : 
; 4248 :     // check if digital output or the lcd output are enabled
; 4249 :     dwVal = INREG32(&m_pDispRegs->DISPC_CONTROL);

  00020	e5952008	 ldr         r2, [r5, #8]
  00024	e5923040	 ldr         r3, [r2, #0x40]

; 4250 : 
; 4251 :     if(dwVal & (DISPC_CONTROL_DIGITALENABLE | DISPC_CONTROL_LCDENABLE))

  00028	e3130003	 tst         r3, #3

; 4252 :     {
; 4253 :         // disable the lcd output and digital output
; 4254 :         dwVal &= ~(DISPC_CONTROL_DIGITALENABLE | DISPC_CONTROL_LCDENABLE);

  0002c	13c33003	 bicne       r3, r3, #3

; 4255 :         OUTREG32(&m_pDispRegs->DISPC_CONTROL, dwVal);
; 4256 : 
; 4257 :         // wait until frame is done
; 4258 :         WaitForFrameDone(DISPLAY_TIMEOUT);

  00030	13a0101e	 movne       r1, #0x1E
  00034	11a00005	 movne       r0, r5
  00038	15823040	 strne       r3, [r2, #0x40]
  0003c	1b000000	 blne        |?WaitForFrameDone@OMAPDisplayController@@IAAHK@Z|

; 4259 :     }
; 4260 : 
; 4261 : 
; 4262 :     //  Reset the whole display subsystem    
; 4263 :     SETREG32( &m_pDSSRegs->DSS_SYSCONFIG, DSS_SYSCONFIG_SOFTRESET );

  00040	e5952004	 ldr         r2, [r5, #4]

; 4264 :     
; 4265 :     //  Wait until reset completes OR timeout occurs
; 4266 :     dwTimeout=DISPLAY_TIMEOUT;

  00044	e3a0401e	 mov         r4, #0x1E
  00048	e5923010	 ldr         r3, [r2, #0x10]
  0004c	e3833002	 orr         r3, r3, #2
  00050	e5823010	 str         r3, [r2, #0x10]

; 4267 :     while(((INREG32(&m_pDSSRegs->DSS_SYSSTATUS) & DSS_SYSSTATUS_RESETDONE) == 0) && (dwTimeout-- > 0))

  00054	ea000004	 b           |$LN21@ResetDSS|
  00058		 |$LL3@ResetDSS|
  00058	e3540000	 cmp         r4, #0
  0005c	e2444001	 sub         r4, r4, #1
  00060	0a000005	 beq         |$LN19@ResetDSS|

; 4268 :     {
; 4269 :         // delay
; 4270 :         Sleep(1);

  00064	e3a00001	 mov         r0, #1
  00068	eb000000	 bl          Sleep
  0006c		 |$LN21@ResetDSS|
  0006c	e5953004	 ldr         r3, [r5, #4]
  00070	e5933014	 ldr         r3, [r3, #0x14]
  00074	e3130001	 tst         r3, #1
  00078	0afffff6	 beq         |$LL3@ResetDSS|
  0007c		 |$LN19@ResetDSS|

; 4271 :     }
; 4272 : 
; 4273 :     if( dwTimeout == 0 )
; 4274 :     {
; 4275 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::ResetDSS: "
; 4276 :              L"Failed reset DSS\r\n"
; 4277 :             ));
; 4278 :     }
; 4279 : 
; 4280 :     //  Release clocks
; 4281 :     ReleaseClock( m_dssinfo.TVEncoderDevice );

  0007c	e5950524	 ldr         r0, [r5, #0x524]
  00080	e3a01000	 mov         r1, #0
  00084	eb000000	 bl          EnableDeviceClocks

; 4282 :     ReleaseClock( m_dssinfo.DSSDevice );         

  00088	e5950520	 ldr         r0, [r5, #0x520]
  0008c	e3a01000	 mov         r1, #0
  00090	eb000000	 bl          EnableDeviceClocks

; 4283 :         
; 4284 :     //  Return result
; 4285 :     return (dwTimeout > 0);

  00094	e3540000	 cmp         r4, #0
  00098	13a00001	 movne       r0, #1

; 4286 : }

  0009c	18bd4030	 ldmneia     sp!, {r4, r5, lr}

; 4283 :         
; 4284 :     //  Return result
; 4285 :     return (dwTimeout > 0);

  000a0	03a00000	 moveq       r0, #0

; 4286 : }

  000a4	08bd4030	 ldmeqia     sp!, {r4, r5, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$M41894|

			 ENDP  ; |?ResetDSS@OMAPDisplayController@@IAAHXZ|, OMAPDisplayController::ResetDSS

	EXPORT	|?ResetDISPC@OMAPDisplayController@@IAAHXZ| ; OMAPDisplayController::ResetDISPC

  00000			 AREA	 |.pdata|, PDATA
|$T41923| DCD	|$LN20@ResetDISPC|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResetDISPC@OMAPDisplayController@@IAAHXZ| PROC ; OMAPDisplayController::ResetDISPC

; 4291 : {

  00000		 |$LN20@ResetDISPC|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M41920|
  00004	e1a05000	 mov         r5, r0

; 4292 :     DWORD   dwVal;
; 4293 :     DWORD   dwTimeout;
; 4294 : 
; 4295 : 
; 4296 :     //  Need to enable DSS1, DSS2 and TVOUT to reset controller
; 4297 :     RequestClock( m_dssinfo.DSSDevice );         

  00008	e5950520	 ldr         r0, [r5, #0x520]
  0000c	e3a01001	 mov         r1, #1
  00010	eb000000	 bl          EnableDeviceClocks

; 4298 : 
; 4299 :     // check if digital output or the lcd output are enabled
; 4300 :     dwVal = INREG32(&m_pDispRegs->DISPC_CONTROL);

  00014	e5952008	 ldr         r2, [r5, #8]
  00018	e5923040	 ldr         r3, [r2, #0x40]

; 4301 : 
; 4302 :     if(dwVal & (DISPC_CONTROL_DIGITALENABLE | DISPC_CONTROL_LCDENABLE))

  0001c	e3130003	 tst         r3, #3

; 4303 :     {
; 4304 :         // disable the lcd output and digital output
; 4305 :         dwVal &= ~(DISPC_CONTROL_DIGITALENABLE | DISPC_CONTROL_LCDENABLE);

  00020	13c33003	 bicne       r3, r3, #3

; 4306 :         OUTREG32(&m_pDispRegs->DISPC_CONTROL, dwVal);
; 4307 : 
; 4308 :         // wait until frame is done
; 4309 :         WaitForFrameDone(DISPLAY_TIMEOUT);

  00024	13a0101e	 movne       r1, #0x1E
  00028	11a00005	 movne       r0, r5
  0002c	15823040	 strne       r3, [r2, #0x40]
  00030	1b000000	 blne        |?WaitForFrameDone@OMAPDisplayController@@IAAHK@Z|

; 4310 :     }
; 4311 : 
; 4312 : 
; 4313 :     //  Reset the controller    
; 4314 :     SETREG32( &m_pDispRegs->DISPC_SYSCONFIG, DISPC_SYSCONFIG_SOFTRESET );

  00034	e5952008	 ldr         r2, [r5, #8]

; 4315 :     
; 4316 :     //  Wait until reset completes OR timeout occurs
; 4317 :     dwTimeout=DISPLAY_TIMEOUT;

  00038	e3a0401e	 mov         r4, #0x1E
  0003c	e5923010	 ldr         r3, [r2, #0x10]
  00040	e3833002	 orr         r3, r3, #2
  00044	e5823010	 str         r3, [r2, #0x10]

; 4318 :     while(((INREG32(&m_pDispRegs->DISPC_SYSSTATUS) & DISPC_SYSSTATUS_RESETDONE) == 0) && (dwTimeout-- > 0))

  00048	ea000004	 b           |$LN17@ResetDISPC|
  0004c		 |$LL3@ResetDISPC|
  0004c	e3540000	 cmp         r4, #0
  00050	e2444001	 sub         r4, r4, #1
  00054	0a000005	 beq         |$LN15@ResetDISPC|

; 4319 :     {
; 4320 :         // delay
; 4321 :         Sleep(1);

  00058	e3a00001	 mov         r0, #1
  0005c	eb000000	 bl          Sleep
  00060		 |$LN17@ResetDISPC|
  00060	e5953008	 ldr         r3, [r5, #8]
  00064	e5933014	 ldr         r3, [r3, #0x14]
  00068	e3130001	 tst         r3, #1
  0006c	0afffff6	 beq         |$LL3@ResetDISPC|
  00070		 |$LN15@ResetDISPC|

; 4322 :     }
; 4323 : 
; 4324 :     if( dwTimeout == 0 )
; 4325 :     {
; 4326 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::ResetDISPC: "
; 4327 :              L"Failed reset DISPC\r\n"
; 4328 :             ));
; 4329 :     }
; 4330 : 
; 4331 :     //  Release clocks
; 4332 :     ReleaseClock( m_dssinfo.DSSDevice );         

  00070	e5950520	 ldr         r0, [r5, #0x520]
  00074	e3a01000	 mov         r1, #0
  00078	eb000000	 bl          EnableDeviceClocks

; 4333 :         
; 4334 :     //  Return result
; 4335 :     return (dwTimeout > 0);

  0007c	e3540000	 cmp         r4, #0
  00080	13a00001	 movne       r0, #1

; 4336 : }

  00084	18bd4030	 ldmneia     sp!, {r4, r5, lr}

; 4333 :         
; 4334 :     //  Return result
; 4335 :     return (dwTimeout > 0);

  00088	03a00000	 moveq       r0, #0

; 4336 : }

  0008c	08bd4030	 ldmeqia     sp!, {r4, r5, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$M41921|

			 ENDP  ; |?ResetDISPC@OMAPDisplayController@@IAAHXZ|, OMAPDisplayController::ResetDISPC

	EXPORT	|?ResetVENC@OMAPDisplayController@@IAAHXZ| ; OMAPDisplayController::ResetVENC

  00000			 AREA	 |.pdata|, PDATA
|$T41949| DCD	|$LN19@ResetVENC|
	DCD	0x40002201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResetVENC@OMAPDisplayController@@IAAHXZ| PROC ; OMAPDisplayController::ResetVENC

; 4341 : {

  00000		 |$LN19@ResetVENC|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M41946|
  00004	e1a05000	 mov         r5, r0

; 4342 :     DWORD   dwTimeout;
; 4343 : 
; 4344 : 
; 4345 :     //  Need to enable DSS1, DSS2 and TVOUT to reset video encoder
; 4346 :     RequestClock( m_dssinfo.TVEncoderDevice );         

  00008	e5950524	 ldr         r0, [r5, #0x524]
  0000c	e3a01001	 mov         r1, #1
  00010	eb000000	 bl          EnableDeviceClocks

; 4347 : 
; 4348 :     
; 4349 :     //  Reset the video encoder   
; 4350 :     SETREG32( &m_pVencRegs->VENC_F_CONTROL, VENC_F_CONTROL_RESET );

  00014	e595200c	 ldr         r2, [r5, #0xC]

; 4351 :     
; 4352 :     //  Wait until reset completes OR timeout occurs
; 4353 :     dwTimeout=DISPLAY_TIMEOUT;

  00018	e3a0401e	 mov         r4, #0x1E
  0001c	e5923008	 ldr         r3, [r2, #8]
  00020	e3833c01	 orr         r3, r3, #1, 24
  00024	e5823008	 str         r3, [r2, #8]

; 4354 :     while(((INREG32(&m_pVencRegs->VENC_F_CONTROL) & VENC_F_CONTROL_RESET) == 0) && (dwTimeout-- > 0))

  00028	ea000004	 b           |$LN16@ResetVENC|
  0002c		 |$LL3@ResetVENC|
  0002c	e3540000	 cmp         r4, #0
  00030	e2444001	 sub         r4, r4, #1
  00034	0a000005	 beq         |$LN14@ResetVENC|

; 4355 :     {
; 4356 :         // delay
; 4357 :         Sleep(1);

  00038	e3a00001	 mov         r0, #1
  0003c	eb000000	 bl          Sleep
  00040		 |$LN16@ResetVENC|
  00040	e595300c	 ldr         r3, [r5, #0xC]
  00044	e5933008	 ldr         r3, [r3, #8]
  00048	e3130c01	 tst         r3, #1, 24
  0004c	0afffff6	 beq         |$LL3@ResetVENC|
  00050		 |$LN14@ResetVENC|

; 4358 :     }
; 4359 : 
; 4360 :     if( dwTimeout == 0 )
; 4361 :     {
; 4362 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::ResetVENC: "
; 4363 :              L"Failed reset DSS\r\n"
; 4364 :             ));
; 4365 :     }
; 4366 : 
; 4367 : 
; 4368 :     //  Clear video encoder F-control and SYNC Control regsiters
; 4369 :     OUTREG32( &m_pVencRegs->VENC_F_CONTROL, 0 );

  00050	e595300c	 ldr         r3, [r5, #0xC]
  00054	e3a02000	 mov         r2, #0

; 4370 :     OUTREG32( &m_pVencRegs->VENC_SYNC_CTRL, 0 );
; 4371 : 
; 4372 : 
; 4373 :     //  Release clocks
; 4374 :     ReleaseClock( m_dssinfo.TVEncoderDevice );         

  00058	e3a01000	 mov         r1, #0
  0005c	e5832008	 str         r2, [r3, #8]
  00060	e595300c	 ldr         r3, [r5, #0xC]
  00064	e5832014	 str         r2, [r3, #0x14]
  00068	e5950524	 ldr         r0, [r5, #0x524]
  0006c	eb000000	 bl          EnableDeviceClocks

; 4375 :         
; 4376 :     //  Return result
; 4377 :     return (dwTimeout > 0);

  00070	e3540000	 cmp         r4, #0
  00074	13a00001	 movne       r0, #1

; 4378 : }

  00078	18bd4030	 ldmneia     sp!, {r4, r5, lr}

; 4375 :         
; 4376 :     //  Return result
; 4377 :     return (dwTimeout > 0);

  0007c	03a00000	 moveq       r0, #0

; 4378 : }

  00080	08bd4030	 ldmeqia     sp!, {r4, r5, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$M41947|

			 ENDP  ; |?ResetVENC@OMAPDisplayController@@IAAHXZ|, OMAPDisplayController::ResetVENC

	EXPORT	|?EnableLPR@OMAPDisplayController@@QAAXHH@Z| ; OMAPDisplayController::EnableLPR
	IMPORT	|PmxNotifyPolicy|

  00000			 AREA	 |.pdata|, PDATA
|$T41971| DCD	|$LN18@EnableLPR|
	DCD	0x40002d03
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableLPR@OMAPDisplayController@@QAAXHH@Z| PROC ; OMAPDisplayController::EnableLPR

; 5121 : {

  00000		 |$LN18@EnableLPR|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5010	 stmdb       sp!, {r4, r12, lr}
  0000c		 |$M41968|
  0000c	e58d1010	 str         r1, [sp, #0x10]
  00010	e1a04000	 mov         r4, r0

; 5122 :     OMAP_DSS_FCLKVALUE eFclkValue = m_eDssFclkValue;
; 5123 : 
; 5124 :     if (m_hSmartReflexPolicyAdapter == NULL)

  00014	e594351c	 ldr         r3, [r4, #0x51C]
  00018	e1b00003	 movs        r0, r3
  0001c	0a000022	 beq         |$LN6@EnableLPR|

; 5125 : 	    return;
; 5126 : 
; 5127 :     if (m_bDVIEnable)

  00020	e59434d0	 ldr         r3, [r4, #0x4D0]
  00024	e3530000	 cmp         r3, #0
  00028	1a00001f	 bne         |$LN6@EnableLPR|

; 5128 :         return;
; 5129 : 
; 5130 :     if ((bEnable == m_bLPREnable) && (bHdmiEnable == FALSE))

  0002c	e5943514	 ldr         r3, [r4, #0x514]
  00030	e1510003	 cmp         r1, r3
  00034	1a000001	 bne         |$LN3@EnableLPR|
  00038	e3520000	 cmp         r2, #0
  0003c	0a00001a	 beq         |$LN6@EnableLPR|
  00040		 |$LN3@EnableLPR|

; 5131 :     {
; 5132 :         return;
; 5133 :     }
; 5134 :     
; 5135 :     // For HDMI Panel, the FCLK specific to HDMI panel should be used
; 5136 :     eFclkValue = ( bHdmiEnable ) ? OMAP_DSS_FCLKVALUE_HDMI : eFclkValue ;

  00040	e3520000	 cmp         r2, #0

; 5137 :     // LPR is disabled when HDMI panel is active
; 5138 :     bEnable    = ( bHdmiEnable ) ? FALSE : bEnable;

  00044	13a01000	 movne       r1, #0
  00048	158d1010	 strne       r1, [sp, #0x10]

; 5139 :  
; 5140 :     if (bEnable)

  0004c	e3510000	 cmp         r1, #0
  00050	0a000009	 beq         |$LN2@EnableLPR|
  00054	e3a03106	 mov         r3, #6, 2

; 5141 :         {
; 5142 : 
; 5143 :         //Send LPR status to SmartReflex policy adapter
; 5144 :         PmxNotifyPolicy(m_hSmartReflexPolicyAdapter,SMARTREFLEX_LPR_MODE,&bEnable,sizeof(BOOL));

  00058	e3831801	 orr         r1, r3, #1, 16
  0005c	e3a03004	 mov         r3, #4
  00060	e28d2010	 add         r2, sp, #0x10
  00064	eb000000	 bl          PmxNotifyPolicy

; 5145 :         
; 5146 :         // Set the FCLK corresponding to LPR mode
; 5147 :         SetDssFclk ( m_eDssFclkSource, OMAP_DSS_FCLKVALUE_LPR );
; 5148 :      
; 5149 :         // Enable LPR
; 5150 :         OUTREG32( &m_pDispRegs->DISPC_SYSCONFIG,
; 5151 :                     DISPC_SYSCONFIG_AUTOIDLE|
; 5152 :                     SYSCONFIG_SMARTIDLE|
; 5153 :                     SYSCONFIG_ENAWAKEUP|
; 5154 :                     SYSCONFIG_CLOCKACTIVITY_I_ON|
; 5155 :                     SYSCONFIG_SMARTSTANDBY
; 5156 :                     );

  00068	e5942008	 ldr         r2, [r4, #8]
  0006c	e3a03c22	 mov         r3, #0x22, 24
  00070	e3833015	 orr         r3, r3, #0x15
  00074	e5823010	 str         r3, [r2, #0x10]

; 5157 :                   
; 5158 :         }
; 5159 :     else

  00078	ea000009	 b           |$LN1@EnableLPR|
  0007c		 |$LN2@EnableLPR|

; 5160 :         {
; 5161 :         // Disable LPR
; 5162 :         OUTREG32( &m_pDispRegs->DISPC_SYSCONFIG,
; 5163 :                     DISPC_SYSCONFIG_AUTOIDLE|
; 5164 :                     SYSCONFIG_NOIDLE|
; 5165 :                     SYSCONFIG_NOSTANDBY
; 5166 :                     );

  0007c	e5942008	 ldr         r2, [r4, #8]
  00080	e3a03a01	 mov         r3, #1, 20
  00084	e3833009	 orr         r3, r3, #9
  00088	e5823010	 str         r3, [r2, #0x10]

; 5167 :                   
; 5168 :         // Set the FCLK corresponding to LPR mode
; 5169 :         SetDssFclk ( m_eDssFclkSource, eFclkValue );  
; 5170 : 
; 5171 :         //Send LPR status to SmartReflex policy adapter
; 5172 :         PmxNotifyPolicy(m_hSmartReflexPolicyAdapter,SMARTREFLEX_LPR_MODE,&bEnable,sizeof(BOOL));

  0008c	e594051c	 ldr         r0, [r4, #0x51C]
  00090	e3a01106	 mov         r1, #6, 2
  00094	e3a03004	 mov         r3, #4
  00098	e28d2010	 add         r2, sp, #0x10
  0009c	e3811801	 orr         r1, r1, #1, 16
  000a0	eb000000	 bl          PmxNotifyPolicy
  000a4		 |$LN1@EnableLPR|

; 5173 :         }
; 5174 :     m_bLPREnable = bEnable; 

  000a4	e59d3010	 ldr         r3, [sp, #0x10]
  000a8	e5843514	 str         r3, [r4, #0x514]
  000ac		 |$LN6@EnableLPR|

; 5175 : }

  000ac	e89d6010	 ldmia       sp, {r4, sp, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$M41969|

			 ENDP  ; |?EnableLPR@OMAPDisplayController@@QAAXHH@Z|, OMAPDisplayController::EnableLPR

	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T41982| DCD	|$LN6@scalar|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GOMAPDisplayController@@UAAPAXI@Z| PROC ; OMAPDisplayController::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M41979|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??1OMAPDisplayController@@UAA@XZ|
  00010	e3140001	 tst         r4, #1
  00014	11a00005	 movne       r0, r5
  00018	1b000000	 blne        |??3@YAXPAX@Z|
  0001c	e1a00005	 mov         r0, r5
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M41980|

			 ENDP  ; |??_GOMAPDisplayController@@UAAPAXI@Z|, OMAPDisplayController::`scalar deleting destructor'

	EXPORT	|?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@KKKK@Z| ; OMAPDisplayController::SetScalingAttribs

  00000			 AREA	 |.pdata|, PDATA
|$T41997| DCD	|$LN6@SetScaling@2|
	DCD	0x40003102
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@KKKK@Z| PROC ; OMAPDisplayController::SetScalingAttribs

; 1134 : {

  00000		 |$LN6@SetScaling@2|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd020	 sub         sp, sp, #0x20
  00008		 |$M41994|
  00008	e1a07003	 mov         r7, r3
  0000c	e1a08002	 mov         r8, r2
  00010	e1a06001	 mov         r6, r1
  00014	e1a09000	 mov         r9, r0

; 1135 :     RECT    srcRect,
; 1136 :             destRect;
; 1137 : 
; 1138 :     //  Check for surface
; 1139 :     if( g_rgPipelineMapping[ePipeline].pSurface == NULL )

  00018	e59fe0a0	 ldr         lr, [pc, #0xA0]
  0001c	e08e4286	 add         r4, lr, r6, lsl #5
  00020	e594e008	 ldr         lr, [r4, #8]
  00024	e35e0000	 cmp         lr, #0

; 1140 :         return FALSE;

  00028	03a00000	 moveq       r0, #0
  0002c	0a000020	 beq         |$LN2@SetScaling@2|

; 1141 :         
; 1142 :     //  Create src and dest RECTs for this scaling setup
; 1143 :     srcRect.left = 0;

  00030	e3a03000	 mov         r3, #0

; 1144 :     srcRect.top = 0;

  00034	e3a02000	 mov         r2, #0
  00038	e58d3000	 str         r3, [sp]
  0003c	e58d2004	 str         r2, [sp, #4]

; 1145 :     srcRect.right = g_rgPipelineMapping[ePipeline].pSurface->Width();

  00040	e59e3000	 ldr         r3, [lr]
  00044	e3a01000	 mov         r1, #0
  00048	e1a0000e	 mov         r0, lr
  0004c	e5933008	 ldr         r3, [r3, #8]
  00050	e1a0e00f	 mov         lr, pc
  00054	e12fff13	 bx          r3

; 1146 :     srcRect.bottom = g_rgPipelineMapping[ePipeline].pSurface->Height();

  00058	e5942008	 ldr         r2, [r4, #8]
  0005c	e58d0008	 str         r0, [sp, #8]
  00060	e3a01000	 mov         r1, #0
  00064	e5923000	 ldr         r3, [r2]
  00068	e1a00002	 mov         r0, r2
  0006c	e593300c	 ldr         r3, [r3, #0xC]
  00070	e1a0e00f	 mov         lr, pc
  00074	e12fff13	 bx          r3

; 1147 : 
; 1148 :     destRect.left = dwPosX;

  00078	e59d503c	 ldr         r5, [sp, #0x3C]

; 1149 :     destRect.top = dwPosY;

  0007c	e59d4040	 ldr         r4, [sp, #0x40]
  00080	e1a0e000	 mov         lr, r0

; 1150 :     destRect.right = dwPosX + dwWidth;

  00084	e0883005	 add         r3, r8, r5

; 1151 :     destRect.bottom = dwPosY + dwHeight;

  00088	e0872004	 add         r2, r7, r4
  0008c	e58d3018	 str         r3, [sp, #0x18]
  00090	e58d201c	 str         r2, [sp, #0x1C]

; 1152 : 
; 1153 :     //  Call the RECT based scaling method
; 1154 :     return SetScalingAttribs( ePipeline, &srcRect, &destRect );

  00094	e28d3010	 add         r3, sp, #0x10
  00098	e28d2000	 add         r2, sp, #0
  0009c	e1a01006	 mov         r1, r6
  000a0	e1a00009	 mov         r0, r9
  000a4	e58de00c	 str         lr, [sp, #0xC]
  000a8	e58d5010	 str         r5, [sp, #0x10]
  000ac	e58d4014	 str         r4, [sp, #0x14]
  000b0	eb000000	 bl          |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|
  000b4		 |$LN2@SetScaling@2|

; 1155 : }

  000b4	e28dd020	 add         sp, sp, #0x20
  000b8	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN7@SetScaling@2|
  000c0		 |$LN8@SetScaling@2|
  000c0	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  000c4		 |$M41995|

			 ENDP  ; |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@KKKK@Z|, OMAPDisplayController::SetScalingAttribs

	EXPORT	|?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| ; OMAPDisplayController::EnablePipeline

  00000			 AREA	 |.pdata|, PDATA
|$T42071| DCD	|$LN61@EnablePipe|
	DCD	0x4000bf02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| PROC ; OMAPDisplayController::EnablePipeline

; 2157 : {

  00000		 |$LN61@EnablePipe|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M42068|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a05000	 mov         r5, r0

; 2158 :     BOOL                    bResult = FALSE;
; 2159 :     OMAP_DSS_DESTINATION    eDest;
; 2160 :     DWORD                   dwNumPipelinesOn = 0;
; 2161 :     DWORD                   dwDestEnable,
; 2162 :                             dwDestGo;
; 2163 : 
; 2164 :     //  Check if pipeline is already enabled
; 2165 :     if( g_rgPipelineMapping[ePipeline].bEnabled == TRUE )

  00010	e59f62e0	 ldr         r6, [pc, #0x2E0]
  00014	e3a08000	 mov         r8, #0
  00018	e7963284	 ldr         r3, [r6, +r4, lsl #5]
  0001c	e3530001	 cmp         r3, #1

; 2166 :         return TRUE;

  00020	03a08001	 moveq       r8, #1
  00024	0a0000af	 beq         |$LN24@EnablePipe|

; 2167 :         
; 2168 :     //  Access the regs
; 2169 :     if( AccessRegs() == FALSE )

  00028	e1a00005	 mov         r0, r5
  0002c	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00030	e3500000	 cmp         r0, #0
  00034	0a0000a9	 beq         |$cleanUp$38625|

; 2170 :         goto cleanUp;
; 2171 : 
; 2172 : 
; 2173 :     //  Enable GFX pipeline
; 2174 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  00038	e3540000	 cmp         r4, #0
  0003c	1a000009	 bne         |$LN53@EnablePipe|

; 2175 :     {
; 2176 :         //  Enable the interrupt for reporting the GFX under flow error
; 2177 :         SETREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_GFXFIFOUNDERFLOW);

  00040	e5952008	 ldr         r2, [r5, #8]

; 2178 : 
; 2179 :         //  Enable the pipeline
; 2180 :         SETREG32( &m_pDispRegs->DISPC_GFX_ATTRIBUTES, DISPC_GFX_ATTR_GFXENABLE );        
; 2181 :         g_rgPipelineMapping[ePipeline].bEnabled = TRUE;

  00044	e3a01001	 mov         r1, #1
  00048	e592301c	 ldr         r3, [r2, #0x1C]
  0004c	e3833040	 orr         r3, r3, #0x40
  00050	e582301c	 str         r3, [r2, #0x1C]
  00054	e5952008	 ldr         r2, [r5, #8]
  00058	e59230a0	 ldr         r3, [r2, #0xA0]
  0005c	e3833001	 orr         r3, r3, #1
  00060	e58230a0	 str         r3, [r2, #0xA0]
  00064	e5861000	 str         r1, [r6]
  00068		 |$LN53@EnablePipe|

; 2182 :     }    
; 2183 : 
; 2184 :     //  Enable VID1 pipeline
; 2185 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  00068	e3540001	 cmp         r4, #1
  0006c	1a000009	 bne         |$LN54@EnablePipe|

; 2186 :     {
; 2187 :         // Enable the interrupt for reporting the VID1 under flow error
; 2188 :         SETREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_VID1FIFOUNDERFLOW);

  00070	e5952008	 ldr         r2, [r5, #8]

; 2189 : 
; 2190 :         //  Enable the pipeline
; 2191 :         SETREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES, DISPC_VID_ATTR_VIDENABLE );
; 2192 :         g_rgPipelineMapping[ePipeline].bEnabled = TRUE;

  00074	e3a01001	 mov         r1, #1
  00078	e592301c	 ldr         r3, [r2, #0x1C]
  0007c	e3833b01	 orr         r3, r3, #1, 22
  00080	e582301c	 str         r3, [r2, #0x1C]
  00084	e5952008	 ldr         r2, [r5, #8]
  00088	e59230cc	 ldr         r3, [r2, #0xCC]
  0008c	e3833001	 orr         r3, r3, #1
  00090	e58230cc	 str         r3, [r2, #0xCC]
  00094	e5861020	 str         r1, [r6, #0x20]
  00098		 |$LN54@EnablePipe|

; 2193 :     }    
; 2194 : 
; 2195 :     //  Enable VID2 pipeline
; 2196 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  00098	e3540002	 cmp         r4, #2
  0009c	1a00000a	 bne         |$LN55@EnablePipe|

; 2197 :     {
; 2198 :         // Enable the interrupt for reporting the VID2 under flow error
; 2199 :         SETREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_VID2FIFOUNDERFLOW);

  000a0	e5952008	 ldr         r2, [r5, #8]

; 2200 : 
; 2201 :         //  Enable the pipeline
; 2202 :         SETREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES, DISPC_VID_ATTR_VIDENABLE );
; 2203 :         g_rgPipelineMapping[ePipeline].bEnabled = TRUE;

  000a4	e3a01001	 mov         r1, #1
  000a8	e592301c	 ldr         r3, [r2, #0x1C]
  000ac	e3833a01	 orr         r3, r3, #1, 20
  000b0	e582301c	 str         r3, [r2, #0x1C]
  000b4	e5952008	 ldr         r2, [r5, #8]
  000b8	e592315c	 ldr         r3, [r2, #0x15C]
  000bc	e3833001	 orr         r3, r3, #1
  000c0	e582315c	 str         r3, [r2, #0x15C]
  000c4	e5861040	 str         r1, [r6, #0x40]
  000c8	ea000000	 b           |$LN18@EnablePipe|
  000cc		 |$LN55@EnablePipe|
  000cc	e5961040	 ldr         r1, [r6, #0x40]
  000d0		 |$LN18@EnablePipe|

; 2178 : 
; 2179 :         //  Enable the pipeline
; 2180 :         SETREG32( &m_pDispRegs->DISPC_GFX_ATTRIBUTES, DISPC_GFX_ATTR_GFXENABLE );        
; 2181 :         g_rgPipelineMapping[ePipeline].bEnabled = TRUE;

  000d0	e5963000	 ldr         r3, [r6]

; 2204 :     }    
; 2205 : 
; 2206 : 
; 2207 :     //  Count the number of pipelines that will be on
; 2208 :     dwNumPipelinesOn += (g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled) ? 1 : 0;

  000d4	e3530000	 cmp         r3, #0
  000d8	e5963020	 ldr         r3, [r6, #0x20]
  000dc	13a02001	 movne       r2, #1
  000e0	03a02000	 moveq       r2, #0

; 2209 :     dwNumPipelinesOn += (g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled) ? 1 : 0;

  000e4	e3530000	 cmp         r3, #0
  000e8	13a03001	 movne       r3, #1
  000ec	03a03000	 moveq       r3, #0

; 2210 :     dwNumPipelinesOn += (g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled) ? 1 : 0;

  000f0	e3510000	 cmp         r1, #0
  000f4	e0822003	 add         r2, r2, r3
  000f8	13a03001	 movne       r3, #1
  000fc	03a03000	 moveq       r3, #0
  00100	e0829003	 add         r9, r2, r3

; 2211 : 
; 2212 : 
; 2213 :     //  If there is only one pipeline enabled, use FIFO merge to make 1 large FIFO
; 2214 :     //  for better power management
; 2215 :     if( dwNumPipelinesOn == 1 )
; 2216 :     {
; 2217 :         //  Enable FIFO merge
; 2218 :         SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_FIFOMERGE );

  00104	e5952008	 ldr         r2, [r5, #8]
  00108	e3590001	 cmp         r9, #1

; 2219 : 
; 2220 :         //  Adjust the FIFO high and low thresholds for all the enabled pipelines
; 2221 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled )

  0010c	03e0333d	 mvneq       r3, #0x3D, 6
  00110	02231cfa	 eoreq       r1, r3, #0xFA, 24
  00114	05923044	 ldreq       r3, [r2, #0x44]
  00118	03833901	 orreq       r3, r3, #1, 18

; 2222 :         {
; 2223 :             OUTREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD,
; 2224 :                         DISPC_GFX_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_MERGED(FIFO_BURSTSIZE_16x32)) |
; 2225 :                         DISPC_GFX_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_MERGED)
; 2226 :                         );
; 2227 :         }
; 2228 : 
; 2229 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled )
; 2230 :         {
; 2231 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.FIFO_THRESHOLD,
; 2232 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_MERGED(FIFO_BURSTSIZE_16x32)) |
; 2233 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_MERGED)
; 2234 :                         );
; 2235 :         }
; 2236 : 
; 2237 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled )
; 2238 :         {
; 2239 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.FIFO_THRESHOLD,
; 2240 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_MERGED(FIFO_BURSTSIZE_16x32)) |
; 2241 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_MERGED)
; 2242 :                         );
; 2243 :         }
; 2244 :     }
; 2245 :     else
; 2246 :     {
; 2247 :         //  Disable FIFO merge
; 2248 :         CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_FIFOMERGE );
; 2249 : 
; 2250 :         //  Adjust the FIFO high and low thresholds for all the enabled pipelines
; 2251 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled )

  0011c	13e0333f	 mvnne       r3, #0x3F, 6
  00120	12231cfe	 eorne       r1, r3, #0xFE, 24
  00124	15923044	 ldrne       r3, [r2, #0x44]
  00128	13c33901	 bicne       r3, r3, #1, 18
  0012c	e5823044	 str         r3, [r2, #0x44]
  00130	e5963000	 ldr         r3, [r6]
  00134	e3530000	 cmp         r3, #0

; 2252 :         {
; 2253 :             OUTREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD,
; 2254 :                         DISPC_GFX_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 2255 :                         DISPC_GFX_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 2256 :                         );

  00138	15953008	 ldrne       r3, [r5, #8]
  0013c	158310a4	 strne       r1, [r3, #0xA4]

; 2257 :         }
; 2258 : 
; 2259 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled )

  00140	e5963020	 ldr         r3, [r6, #0x20]
  00144	e3530000	 cmp         r3, #0

; 2260 :         {
; 2261 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.FIFO_THRESHOLD,
; 2262 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 2263 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 2264 :                         );

  00148	15953008	 ldrne       r3, [r5, #8]
  0014c	158310d0	 strne       r1, [r3, #0xD0]

; 2265 :         }
; 2266 : 
; 2267 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled )

  00150	e5963040	 ldr         r3, [r6, #0x40]
  00154	e3530000	 cmp         r3, #0

; 2268 :         {
; 2269 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.FIFO_THRESHOLD,
; 2270 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 2271 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 2272 :                         );

  00158	15953008	 ldrne       r3, [r5, #8]
  0015c	15831160	 strne       r1, [r3, #0x160]

; 2273 :         }
; 2274 :     }
; 2275 : 
; 2276 : 
; 2277 :     //  Get the destination for the pipeline
; 2278 :     eDest = g_rgPipelineMapping[ePipeline].eDestination;

  00160	e0863284	 add         r3, r6, r4, lsl #5
  00164	e5933004	 ldr         r3, [r3, #4]
  00168	e1b07003	 movs        r7, r3

; 2279 :     switch( eDest )

  0016c	0a000009	 beq         |$LN7@EnablePipe|
  00170	e3570001	 cmp         r7, #1
  00174	1a000059	 bne         |$cleanUp$38625|

; 2285 :             break;
; 2286 : 
; 2287 :         case OMAP_DSS_DESTINATION_TVOUT:
; 2288 :             //  Set enable and go bits for TV Out
; 2289 :             dwDestEnable = (m_bTVEnable) ? DISPC_CONTROL_DIGITALENABLE : 0;

  00178	e59534b8	 ldr         r3, [r5, #0x4B8]
  0017c	e3530000	 cmp         r3, #0
  00180	13a04002	 movne       r4, #2

; 2290 :             dwDestGo     = DISPC_CONTROL_GODIGITAL;

  00184	13a08040	 movne       r8, #0x40
  00188	1a000004	 bne         |$LN8@EnablePipe|
  0018c	e3a04000	 mov         r4, #0
  00190	e3a08040	 mov         r8, #0x40

; 2291 :             break;

  00194	ea000001	 b           |$LN8@EnablePipe|
  00198		 |$LN7@EnablePipe|

; 2280 :     {
; 2281 :         case OMAP_DSS_DESTINATION_LCD:
; 2282 :             //  Set enable and go bits for LCD
; 2283 :             dwDestEnable = DISPC_CONTROL_LCDENABLE;

  00198	e3a04001	 mov         r4, #1

; 2284 :             dwDestGo     = DISPC_CONTROL_GOLCD;

  0019c	e3a08020	 mov         r8, #0x20
  001a0		 |$LN8@EnablePipe|

; 2292 : 
; 2293 :         default:
; 2294 :             ASSERT(0);
; 2295 :             goto cleanUp;
; 2296 :     }
; 2297 :         
; 2298 :     //  Try enabling overlay optimization
; 2299 :     EnableOverlayOptimization( TRUE );

  001a0	e3a01001	 mov         r1, #1
  001a4	e1a00005	 mov         r0, r5
  001a8	eb000000	 bl          |?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z|

; 2300 : 
; 2301 :     //  Flush the shadow registers
; 2302 :     FlushRegs( dwDestGo );

  001ac	e1a01008	 mov         r1, r8
  001b0	e1a00005	 mov         r0, r5
  001b4	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 2303 : 
; 2304 : 
; 2305 :     //  If the destination for pipeline is not enabled, enable it
; 2306 :     if( g_dwDestinationRefCnt[eDest]++ == 0 )

  001b8	e2862060	 add         r2, r6, #0x60
  001bc	e7b23107	 ldr         r3, [r2, +r7, lsl #2]!
  001c0	e3530000	 cmp         r3, #0
  001c4	e2833001	 add         r3, r3, #1
  001c8	e5823000	 str         r3, [r2]
  001cc	1a000019	 bne         |$LN1@EnablePipe|

; 2307 :     {
; 2308 :         if (eDest == OMAP_DSS_DESTINATION_LCD)

  001d0	e3570000	 cmp         r7, #0

; 2309 :         {
; 2310 :             SETREG32( &m_pDispRegs->DISPC_CONTROL, dwDestEnable );

  001d4	05952008	 ldreq       r2, [r5, #8]
  001d8	05923040	 ldreq       r3, [r2, #0x40]
  001dc	01833004	 orreq       r3, r3, r4
  001e0	05823040	 streq       r3, [r2, #0x40]
  001e4	0a000013	 beq         |$LN1@EnablePipe|

; 2311 :         }
; 2312 :         else
; 2313 :         {
; 2314 :             // For TVOUT enable, the SYNCLOST_DIGITAL interrupt
; 2315 :             // has to be cleared at the 1st EVSYNC after DIGITALENABLE
; 2316 : 
; 2317 :             DWORD irqStatus, irqEnable;
; 2318 : 
; 2319 :             irqEnable = INREG32( &m_pDispRegs->DISPC_IRQENABLE );

  001e8	e5953008	 ldr         r3, [r5, #8]

; 2320 :             // Disable all the DSS interrupts
; 2321 :             OUTREG32( &m_pDispRegs->DISPC_IRQENABLE , 0 );

  001ec	e3a02000	 mov         r2, #0

; 2322 :             // Clear the Existing IRQ status
; 2323 :             OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, 0xFFFFFFFF );

  001f0	e3e00000	 mvn         r0, #0
  001f4	e593401c	 ldr         r4, [r3, #0x1C]
  001f8	e583201c	 str         r2, [r3, #0x1C]
  001fc	e5953008	 ldr         r3, [r5, #8]

; 2324 : 
; 2325 :             // Enable the DIGITAL Path
; 2326 :             SETREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_DIGITALENABLE );
; 2327 : 
; 2328 :             // Wait for E-VSYNC
; 2329 :             WaitForIRQ( DISPC_IRQSTATUS_EVSYNC_EVEN|DISPC_IRQSTATUS_EVSYNC_ODD );

  00200	e3a0201e	 mov         r2, #0x1E
  00204	e3a0100c	 mov         r1, #0xC
  00208	e5830018	 str         r0, [r3, #0x18]
  0020c	e595e008	 ldr         lr, [r5, #8]
  00210	e1a00005	 mov         r0, r5
  00214	e59e3040	 ldr         r3, [lr, #0x40]
  00218	e3833002	 orr         r3, r3, #2
  0021c	e58e3040	 str         r3, [lr, #0x40]
  00220	eb000000	 bl          |?WaitForIRQ@OMAPDisplayController@@IAAHKK@Z|

; 2330 :             
; 2331 :             // Clear the pending interrupt status
; 2332 :             irqStatus = INREG32( &m_pDispRegs->DISPC_IRQSTATUS );

  00224	e5952008	 ldr         r2, [r5, #8]
  00228	e5923018	 ldr         r3, [r2, #0x18]

; 2333 :             OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS,  irqStatus );

  0022c	e5823018	 str         r3, [r2, #0x18]

; 2334 : 
; 2335 :             // Re-enable the DSS interrupts
; 2336 :             OUTREG32( &m_pDispRegs->DISPC_IRQENABLE , irqEnable );

  00230	e5953008	 ldr         r3, [r5, #8]
  00234	e583401c	 str         r4, [r3, #0x1C]
  00238		 |$LN1@EnablePipe|

; 2337 :         }
; 2338 :     }
; 2339 : 
; 2340 :     // Configure the LPR mode based on active Pipeline(s)
; 2341 :     BOOL bEnable = ((dwNumPipelinesOn == 1) && 
; 2342 :                    (g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled)) ?
; 2343 :                    TRUE : FALSE; 

  00238	e3590001	 cmp         r9, #1
  0023c	1a000003	 bne         |$LN34@EnablePipe|
  00240	e5963000	 ldr         r3, [r6]
  00244	e3530000	 cmp         r3, #0
  00248	13a02001	 movne       r2, #1
  0024c	1a000000	 bne         |$LN35@EnablePipe|
  00250		 |$LN34@EnablePipe|
  00250	e3a02000	 mov         r2, #0
  00254		 |$LN35@EnablePipe|

; 2344 :     EnableLPR( bEnable );

  00254	e595351c	 ldr         r3, [r5, #0x51C]
  00258	e58d2000	 str         r2, [sp]
  0025c	e1b00003	 movs        r0, r3
  00260	0a00001d	 beq         |$LN41@EnablePipe|
  00264	e59534d0	 ldr         r3, [r5, #0x4D0]
  00268	e3530000	 cmp         r3, #0
  0026c	1a00001a	 bne         |$LN41@EnablePipe|
  00270	e5953514	 ldr         r3, [r5, #0x514]
  00274	e1520003	 cmp         r2, r3
  00278	0a000017	 beq         |$LN41@EnablePipe|
  0027c	e3520000	 cmp         r2, #0
  00280	0a000009	 beq         |$LN37@EnablePipe|
  00284	e3a03106	 mov         r3, #6, 2
  00288	e3831801	 orr         r1, r3, #1, 16
  0028c	e3a03004	 mov         r3, #4
  00290	e28d2000	 add         r2, sp, #0
  00294	eb000000	 bl          PmxNotifyPolicy
  00298	e5952008	 ldr         r2, [r5, #8]
  0029c	e3a03c22	 mov         r3, #0x22, 24
  002a0	e3833015	 orr         r3, r3, #0x15
  002a4	e5823010	 str         r3, [r2, #0x10]
  002a8	ea000009	 b           |$LN36@EnablePipe|
  002ac		 |$LN37@EnablePipe|
  002ac	e5952008	 ldr         r2, [r5, #8]
  002b0	e3a03a01	 mov         r3, #1, 20
  002b4	e3833009	 orr         r3, r3, #9
  002b8	e5823010	 str         r3, [r2, #0x10]
  002bc	e595051c	 ldr         r0, [r5, #0x51C]
  002c0	e3a01106	 mov         r1, #6, 2
  002c4	e3a03004	 mov         r3, #4
  002c8	e28d2000	 add         r2, sp, #0
  002cc	e3811801	 orr         r1, r1, #1, 16
  002d0	eb000000	 bl          PmxNotifyPolicy
  002d4		 |$LN36@EnablePipe|
  002d4	e59d3000	 ldr         r3, [sp]
  002d8	e5853514	 str         r3, [r5, #0x514]
  002dc		 |$LN41@EnablePipe|

; 2345 : 
; 2346 :     //  Result
; 2347 :     bResult = TRUE;         

  002dc	e3a08001	 mov         r8, #1
  002e0		 |$cleanUp$38625|

; 2348 : 
; 2349 : cleanUp:    
; 2350 :     //  Release regs
; 2351 :     ReleaseRegs();

  002e0	e2850e49	 add         r0, r5, #0x49, 28
  002e4	eb000000	 bl          LeaveCriticalSection

; 2352 :     
; 2353 :     //  Return result
; 2354 :     return bResult;

  002e8		 |$LN24@EnablePipe|

; 2355 : }

  002e8	e1a00008	 mov         r0, r8
  002ec	e28dd004	 add         sp, sp, #4
  002f0	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  002f4	e12fff1e	 bx          lr
  002f8		 |$LN62@EnablePipe|
  002f8		 |$LN63@EnablePipe|
  002f8	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  002fc		 |$M42069|

			 ENDP  ; |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|, OMAPDisplayController::EnablePipeline

	EXPORT	|?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| ; OMAPDisplayController::DisablePipeline

  00000			 AREA	 |.pdata|, PDATA
|$T42141| DCD	|$LN59@DisablePip|
	DCD	0x4000c502
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| PROC ; OMAPDisplayController::DisablePipeline

; 2362 : {

  00000		 |$LN59@DisablePip|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M42138|
  00008	e1a06001	 mov         r6, r1
  0000c	e1a04000	 mov         r4, r0

; 2363 :     BOOL                    bResult = FALSE;    
; 2364 :     OMAP_DSS_DESTINATION    eDest;
; 2365 :     DWORD                   dwNumPipelinesOn = 0;
; 2366 :     DWORD                   dwIntrStatus;
; 2367 :     DWORD                   dwDestEnable,
; 2368 :                             dwDestGo;
; 2369 :     BOOL                    bLPRState = FALSE;    
; 2370 : 
; 2371 :     //  Check if pipeline is already disabled
; 2372 :     if( g_rgPipelineMapping[ePipeline].bEnabled == FALSE )

  00010	e59f52f8	 ldr         r5, [pc, #0x2F8]
  00014	e3a07000	 mov         r7, #0
  00018	e3a08000	 mov         r8, #0
  0001c	e7953286	 ldr         r3, [r5, +r6, lsl #5]
  00020	e3530000	 cmp         r3, #0

; 2373 :         return TRUE;

  00024	03a07001	 moveq       r7, #1
  00028	0a0000b4	 beq         |$LN25@DisablePip|

; 2374 :         
; 2375 :     //  Access the regs
; 2376 :     if( AccessRegs() == FALSE )

  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00034	e3500000	 cmp         r0, #0
  00038	0a0000ae	 beq         |$cleanUp$38718|

; 2377 :         goto cleanUp;
; 2378 : 
; 2379 :      // Clear GO_XXX bit if it current enabled. The attributes register for 
; 2380 :     // the pipeline is currently modified and so it is required to turn off
; 2381 :     // the GOLCD/GODIGITAL bit during the configuration.
; 2382 :     if ((INREG32( &m_pDispRegs->DISPC_CONTROL) & DISPC_CONTROL_GOLCD ) != 0)

  0003c	e5942008	 ldr         r2, [r4, #8]
  00040	e5923040	 ldr         r3, [r2, #0x40]
  00044	e3130020	 tst         r3, #0x20

; 2383 :         CLRREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_GOLCD );

  00048	15923040	 ldrne       r3, [r2, #0x40]
  0004c	13c33020	 bicne       r3, r3, #0x20
  00050	15823040	 strne       r3, [r2, #0x40]

; 2384 : 
; 2385 :     if ((INREG32( &m_pDispRegs->DISPC_CONTROL) & DISPC_CONTROL_GODIGITAL ) != 0)

  00054	e5942008	 ldr         r2, [r4, #8]
  00058	e5923040	 ldr         r3, [r2, #0x40]
  0005c	e3130040	 tst         r3, #0x40

; 2386 :         CLRREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_GODIGITAL );

  00060	15923040	 ldrne       r3, [r2, #0x40]
  00064	13c33040	 bicne       r3, r3, #0x40
  00068	15823040	 strne       r3, [r2, #0x40]

; 2387 : 
; 2388 :     //  Disable GFX pipeline
; 2389 :     if( ePipeline == OMAP_DSS_PIPELINE_GFX )

  0006c	e3560000	 cmp         r6, #0
  00070	1a00000b	 bne         |$LN52@DisablePip|

; 2390 :     {
; 2391 :         //  Disable the pipeline
; 2392 :         CLRREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_GFXFIFOUNDERFLOW);

  00074	e5942008	 ldr         r2, [r4, #8]

; 2393 :         CLRREG32( &m_pDispRegs->DISPC_GFX_ATTRIBUTES, DISPC_GFX_ATTR_GFXENABLE );        
; 2394 :         g_rgPipelineMapping[ePipeline].bEnabled = FALSE;

  00078	e3a01000	 mov         r1, #0

; 2395 :         g_rgPipelineMapping[ePipeline].bMirror = FALSE;

  0007c	e3a00000	 mov         r0, #0
  00080	e592301c	 ldr         r3, [r2, #0x1C]
  00084	e3c33040	 bic         r3, r3, #0x40
  00088	e582301c	 str         r3, [r2, #0x1C]
  0008c	e5942008	 ldr         r2, [r4, #8]
  00090	e59230a0	 ldr         r3, [r2, #0xA0]
  00094	e3c33001	 bic         r3, r3, #1
  00098	e58230a0	 str         r3, [r2, #0xA0]
  0009c	e5851000	 str         r1, [r5]
  000a0	e5850010	 str         r0, [r5, #0x10]
  000a4		 |$LN52@DisablePip|

; 2396 :     }    
; 2397 : 
; 2398 :     //  Disable VID1 pipeline
; 2399 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  000a4	e3560001	 cmp         r6, #1
  000a8	1a00000b	 bne         |$LN53@DisablePip|

; 2400 :     {
; 2401 :         //  Disable the pipeline
; 2402 :         CLRREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_VID1FIFOUNDERFLOW);

  000ac	e5942008	 ldr         r2, [r4, #8]

; 2403 :         CLRREG32( &m_pDispRegs->tDISPC_VID1.ATTRIBUTES, DISPC_VID_ATTR_VIDENABLE );
; 2404 :         g_rgPipelineMapping[ePipeline].bEnabled = FALSE;

  000b0	e3a00000	 mov         r0, #0

; 2405 :         g_rgPipelineMapping[ePipeline].bMirror = FALSE;

  000b4	e3a01000	 mov         r1, #0
  000b8	e592301c	 ldr         r3, [r2, #0x1C]
  000bc	e3c33b01	 bic         r3, r3, #1, 22
  000c0	e582301c	 str         r3, [r2, #0x1C]
  000c4	e5942008	 ldr         r2, [r4, #8]
  000c8	e59230cc	 ldr         r3, [r2, #0xCC]
  000cc	e3c33001	 bic         r3, r3, #1
  000d0	e58230cc	 str         r3, [r2, #0xCC]
  000d4	e5850020	 str         r0, [r5, #0x20]
  000d8	e5851030	 str         r1, [r5, #0x30]
  000dc		 |$LN53@DisablePip|

; 2406 :     }    
; 2407 : 
; 2408 :     //  Disable VID2 pipeline
; 2409 :     if( ePipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  000dc	e3560002	 cmp         r6, #2
  000e0	1a00000c	 bne         |$LN54@DisablePip|

; 2410 :     {
; 2411 :         //  Disable the pipeline
; 2412 :         CLRREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_VID2FIFOUNDERFLOW);

  000e4	e5942008	 ldr         r2, [r4, #8]

; 2413 :         CLRREG32( &m_pDispRegs->tDISPC_VID2.ATTRIBUTES, DISPC_VID_ATTR_VIDENABLE );
; 2414 :         g_rgPipelineMapping[ePipeline].bEnabled = FALSE;

  000e8	e3a01000	 mov         r1, #0

; 2415 :         g_rgPipelineMapping[ePipeline].bMirror = FALSE;

  000ec	e3a00000	 mov         r0, #0
  000f0	e592301c	 ldr         r3, [r2, #0x1C]
  000f4	e3c33a01	 bic         r3, r3, #1, 20
  000f8	e582301c	 str         r3, [r2, #0x1C]
  000fc	e5942008	 ldr         r2, [r4, #8]
  00100	e592315c	 ldr         r3, [r2, #0x15C]
  00104	e3c33001	 bic         r3, r3, #1
  00108	e582315c	 str         r3, [r2, #0x15C]
  0010c	e5851040	 str         r1, [r5, #0x40]
  00110	e5850050	 str         r0, [r5, #0x50]
  00114	ea000000	 b           |$LN17@DisablePip|
  00118		 |$LN54@DisablePip|
  00118	e5951040	 ldr         r1, [r5, #0x40]
  0011c		 |$LN17@DisablePip|

; 2395 :         g_rgPipelineMapping[ePipeline].bMirror = FALSE;

  0011c	e5953000	 ldr         r3, [r5]

; 2416 :     }    
; 2417 : 
; 2418 :     //  Count the number of pipelines that will be on
; 2419 :     dwNumPipelinesOn += (g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled) ? 1 : 0;

  00120	e3530000	 cmp         r3, #0
  00124	e5953020	 ldr         r3, [r5, #0x20]
  00128	13a02001	 movne       r2, #1
  0012c	03a02000	 moveq       r2, #0

; 2420 :     dwNumPipelinesOn += (g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled) ? 1 : 0;

  00130	e3530000	 cmp         r3, #0
  00134	13a03001	 movne       r3, #1
  00138	03a03000	 moveq       r3, #0

; 2421 :     dwNumPipelinesOn += (g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled) ? 1 : 0;

  0013c	e3510000	 cmp         r1, #0
  00140	e0822003	 add         r2, r2, r3
  00144	13a03001	 movne       r3, #1
  00148	03a03000	 moveq       r3, #0
  0014c	e082a003	 add         r10, r2, r3

; 2422 : 
; 2423 : 
; 2424 :     //  If there is only one pipeline enabled, use FIFO merge to make 1 large FIFO
; 2425 :     //  for better power management
; 2426 :     if( dwNumPipelinesOn == 1 )
; 2427 :     {
; 2428 :         //  Enable FIFO merge
; 2429 :         SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_FIFOMERGE );

  00150	e5942008	 ldr         r2, [r4, #8]
  00154	e35a0001	 cmp         r10, #1
  00158	1a000009	 bne         |$LN16@DisablePip|

; 2430 : 
; 2431 :         //  Adjust the FIFO high and low thresholds for all the enabled pipelines
; 2432 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled )

  0015c	e3e0333d	 mvn         r3, #0x3D, 6
  00160	e2231cfa	 eor         r1, r3, #0xFA, 24
  00164	e5923044	 ldr         r3, [r2, #0x44]
  00168	e3833901	 orr         r3, r3, #1, 18
  0016c	e5823044	 str         r3, [r2, #0x44]
  00170	e5953000	 ldr         r3, [r5]
  00174	e3530000	 cmp         r3, #0
  00178	0a00000b	 beq         |$LN11@DisablePip|

; 2433 :         {
; 2434 :             OUTREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD,
; 2435 :                         DISPC_GFX_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_MERGED(FIFO_BURSTSIZE_16x32)) |
; 2436 :                         DISPC_GFX_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_MERGED)
; 2437 :                         );
; 2438 :             bLPRState = TRUE;

  0017c	e3a08001	 mov         r8, #1

; 2439 :         }
; 2440 : 
; 2441 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled )
; 2442 :         {
; 2443 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.FIFO_THRESHOLD,
; 2444 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_MERGED(FIFO_BURSTSIZE_16x32)) |
; 2445 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_MERGED)
; 2446 :                         );
; 2447 :         }
; 2448 : 
; 2449 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled )
; 2450 :         {
; 2451 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.FIFO_THRESHOLD,
; 2452 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_MERGED(FIFO_BURSTSIZE_16x32)) |
; 2453 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_MERGED)
; 2454 :                         );
; 2455 :         }
; 2456 : 
; 2457 : 
; 2458 :     }
; 2459 :     else

  00180	ea000007	 b           |$LN56@DisablePip|
  00184		 |$LN16@DisablePip|

; 2460 :     {
; 2461 : 
; 2462 :         //  Disable FIFO merge
; 2463 :         CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_FIFOMERGE );
; 2464 : 
; 2465 :         //  Adjust the FIFO high and low thresholds for all the enabled pipelines
; 2466 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled )

  00184	e3e0333f	 mvn         r3, #0x3F, 6
  00188	e2231cfe	 eor         r1, r3, #0xFE, 24
  0018c	e5923044	 ldr         r3, [r2, #0x44]
  00190	e3c33901	 bic         r3, r3, #1, 18
  00194	e5823044	 str         r3, [r2, #0x44]
  00198	e5953000	 ldr         r3, [r5]
  0019c	e3530000	 cmp         r3, #0
  001a0	0a000001	 beq         |$LN11@DisablePip|
  001a4		 |$LN56@DisablePip|

; 2467 :         {
; 2468 :             OUTREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD,
; 2469 :                         DISPC_GFX_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 2470 :                         DISPC_GFX_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 2471 :                         );

  001a4	e5943008	 ldr         r3, [r4, #8]
  001a8	e58310a4	 str         r1, [r3, #0xA4]
  001ac		 |$LN11@DisablePip|

; 2472 :         }
; 2473 : 
; 2474 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled )

  001ac	e5953020	 ldr         r3, [r5, #0x20]
  001b0	e3530000	 cmp         r3, #0

; 2475 :         {
; 2476 :             OUTREG32( &m_pDispRegs->tDISPC_VID1.FIFO_THRESHOLD,
; 2477 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 2478 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 2479 :                         );

  001b4	15943008	 ldrne       r3, [r4, #8]
  001b8	158310d0	 strne       r1, [r3, #0xD0]

; 2480 :         }
; 2481 : 
; 2482 :         if( g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled )

  001bc	e5953040	 ldr         r3, [r5, #0x40]
  001c0	e3530000	 cmp         r3, #0

; 2483 :         {
; 2484 :             OUTREG32( &m_pDispRegs->tDISPC_VID2.FIFO_THRESHOLD,
; 2485 :                         DISPC_VID_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_NORMAL(FIFO_BURSTSIZE_16x32)) |
; 2486 :                         DISPC_VID_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_NORMAL)
; 2487 :                         );

  001c4	15943008	 ldrne       r3, [r4, #8]
  001c8	15831160	 strne       r1, [r3, #0x160]

; 2488 :         }
; 2489 : 
; 2490 :     }
; 2491 : 
; 2492 :     //  Get the destination for the pipeline
; 2493 :     eDest = g_rgPipelineMapping[ePipeline].eDestination;

  001cc	e0853286	 add         r3, r5, r6, lsl #5
  001d0	e5933004	 ldr         r3, [r3, #4]
  001d4	e1b09003	 movs        r9, r3

; 2494 :     switch( eDest )

  001d8	0a000004	 beq         |$LN6@DisablePip|
  001dc	e3590001	 cmp         r9, #1
  001e0	1a000044	 bne         |$cleanUp$38718|

; 2500 :             break;
; 2501 : 
; 2502 :         case OMAP_DSS_DESTINATION_TVOUT:
; 2503 :             //  Set enable and go bits for TV Out
; 2504 :             dwDestEnable = DISPC_CONTROL_DIGITALENABLE;

  001e4	e3a07002	 mov         r7, #2

; 2505 :             dwDestGo     = DISPC_CONTROL_GODIGITAL;

  001e8	e3a06040	 mov         r6, #0x40

; 2506 :             break;

  001ec	ea000001	 b           |$LN7@DisablePip|
  001f0		 |$LN6@DisablePip|

; 2495 :     {
; 2496 :         case OMAP_DSS_DESTINATION_LCD:
; 2497 :             //  Set enable and go bits for LCD
; 2498 :             dwDestEnable = DISPC_CONTROL_LCDENABLE;

  001f0	e3a07001	 mov         r7, #1

; 2499 :             dwDestGo     = DISPC_CONTROL_GOLCD;

  001f4	e3a06020	 mov         r6, #0x20
  001f8		 |$LN7@DisablePip|

; 2507 : 
; 2508 :         default:
; 2509 :             ASSERT(0);
; 2510 :             goto cleanUp;
; 2511 :     }
; 2512 :     
; 2513 :     //  Try enabling overlay optimization
; 2514 :     EnableOverlayOptimization( TRUE );

  001f8	e3a01001	 mov         r1, #1
  001fc	e1a00004	 mov         r0, r4
  00200	eb000000	 bl          |?EnableOverlayOptimization@OMAPDisplayController@@QAAXH@Z|

; 2515 : 
; 2516 :     // First turn on the GO bit corresponding to the pipeline
; 2517 :     // that has to be disabled and wait for GO bit to clear.
; 2518 :     FlushRegs( dwDestGo );     

  00204	e1a01006	 mov         r1, r6
  00208	e1a00004	 mov         r0, r4
  0020c	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 2519 :     WaitForFlushDone( dwDestGo );

  00210	e1a01006	 mov         r1, r6
  00214	e1a00004	 mov         r0, r4
  00218	eb000000	 bl          |?WaitForFlushDone@OMAPDisplayController@@IAAHK@Z|

; 2520 : 
; 2521 :     // Additional flush required, when pipeline that is disabled in this
; 2522 :     // function was connected to DIGITALPATH. There could be another pipeline 
; 2523 :     // driving the LCD path and so the LCD path has to be flushed as well
; 2524 :     if ( (dwDestGo != DISPC_CONTROL_GOLCD) && (dwNumPipelinesOn > 0) )

  0021c	e3560020	 cmp         r6, #0x20
  00220	135a0000	 cmpne       r10, #0

; 2525 :         FlushRegs( DISPC_CONTROL_GOLCD );

  00224	13a01020	 movne       r1, #0x20
  00228	11a00004	 movne       r0, r4
  0022c	1b000000	 blne        |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 2526 :     
; 2527 :     //  Update ref count on destination
; 2528 :     //  If ref count on destination is 0, disable output
; 2529 :     if( --g_dwDestinationRefCnt[eDest] == 0 )

  00230	e2852060	 add         r2, r5, #0x60
  00234	e7b23109	 ldr         r3, [r2, +r9, lsl #2]!
  00238	e2533001	 subs        r3, r3, #1
  0023c	e5823000	 str         r3, [r2]

; 2530 :         CLRREG32( &m_pDispRegs->DISPC_CONTROL, dwDestEnable );

  00240	05942008	 ldreq       r2, [r4, #8]
  00244	05923040	 ldreq       r3, [r2, #0x40]
  00248	01c33007	 biceq       r3, r3, r7
  0024c	05823040	 streq       r3, [r2, #0x40]

; 2531 : 
; 2532 :     // clear any pending interrupts
; 2533 :     dwIntrStatus = INREG32 ( &m_pDispRegs->DISPC_IRQSTATUS );

  00250	e5941008	 ldr         r1, [r4, #8]

; 2534 :     SETREG32( &m_pDispRegs->DISPC_IRQSTATUS, dwIntrStatus );
; 2535 : 
; 2536 :     // Configure the LPR mode based on active Pipeline(s)
; 2537 :     // If the pipeline count is 0, then LPR should be ON
; 2538 :     bLPRState = (dwNumPipelinesOn == 0) ? TRUE : bLPRState;

  00254	e35a0000	 cmp         r10, #0
  00258	03a08001	 moveq       r8, #1
  0025c	e5912018	 ldr         r2, [r1, #0x18]
  00260	e5913018	 ldr         r3, [r1, #0x18]

; 2539 :     EnableLPR( bLPRState );

  00264	e58d8000	 str         r8, [sp]
  00268	e1833002	 orr         r3, r3, r2
  0026c	e5813018	 str         r3, [r1, #0x18]
  00270	e594351c	 ldr         r3, [r4, #0x51C]
  00274	e1b00003	 movs        r0, r3
  00278	0a00001d	 beq         |$LN40@DisablePip|
  0027c	e59434d0	 ldr         r3, [r4, #0x4D0]
  00280	e3530000	 cmp         r3, #0
  00284	1a00001a	 bne         |$LN40@DisablePip|
  00288	e5943514	 ldr         r3, [r4, #0x514]
  0028c	e1580003	 cmp         r8, r3
  00290	0a000017	 beq         |$LN40@DisablePip|
  00294	e3580000	 cmp         r8, #0
  00298	0a000009	 beq         |$LN36@DisablePip|
  0029c	e3a03106	 mov         r3, #6, 2
  002a0	e3831801	 orr         r1, r3, #1, 16
  002a4	e3a03004	 mov         r3, #4
  002a8	e28d2000	 add         r2, sp, #0
  002ac	eb000000	 bl          PmxNotifyPolicy
  002b0	e5942008	 ldr         r2, [r4, #8]
  002b4	e3a03c22	 mov         r3, #0x22, 24
  002b8	e3833015	 orr         r3, r3, #0x15
  002bc	e5823010	 str         r3, [r2, #0x10]
  002c0	ea000009	 b           |$LN35@DisablePip|
  002c4		 |$LN36@DisablePip|
  002c4	e5942008	 ldr         r2, [r4, #8]
  002c8	e3a03a01	 mov         r3, #1, 20
  002cc	e3833009	 orr         r3, r3, #9
  002d0	e5823010	 str         r3, [r2, #0x10]
  002d4	e594051c	 ldr         r0, [r4, #0x51C]
  002d8	e3a01106	 mov         r1, #6, 2
  002dc	e3a03004	 mov         r3, #4
  002e0	e28d2000	 add         r2, sp, #0
  002e4	e3811801	 orr         r1, r1, #1, 16
  002e8	eb000000	 bl          PmxNotifyPolicy
  002ec		 |$LN35@DisablePip|
  002ec	e59d3000	 ldr         r3, [sp]
  002f0	e5843514	 str         r3, [r4, #0x514]
  002f4		 |$LN40@DisablePip|

; 2540 :     
; 2541 :     //  Result
; 2542 :     bResult = TRUE;         

  002f4	e3a07001	 mov         r7, #1
  002f8		 |$cleanUp$38718|

; 2543 : 
; 2544 : cleanUp:    
; 2545 :     //  Release regs
; 2546 :     ReleaseRegs();

  002f8	e2840e49	 add         r0, r4, #0x49, 28
  002fc	eb000000	 bl          LeaveCriticalSection

; 2547 :     
; 2548 :     //  Return result
; 2549 :     return bResult;

  00300		 |$LN25@DisablePip|

; 2550 : }

  00300	e1a00007	 mov         r0, r7
  00304	e28dd004	 add         sp, sp, #4
  00308	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  0030c	e12fff1e	 bx          lr
  00310		 |$LN60@DisablePip|
  00310		 |$LN61@DisablePip|
  00310	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  00314		 |$M42139|

			 ENDP  ; |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|, OMAPDisplayController::DisablePipeline

	EXPORT	|?EnableTvOut@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::EnableTvOut

  00000			 AREA	 |.pdata|, PDATA
|$T42167| DCD	|$LN18@EnableTvOu|
	DCD	0x40002d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableTvOut@OMAPDisplayController@@QAAHH@Z| PROC ; OMAPDisplayController::EnableTvOut

; 4008 : {

  00000		 |$LN18@EnableTvOu|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M42164|
  00004	e1a06001	 mov         r6, r1
  00008	e1a04000	 mov         r4, r0

; 4009 :     BOOL    bResult = FALSE;
; 4010 : 
; 4011 :     //  Access the regs
; 4012 :     if( AccessRegs() == FALSE )

  0000c	e3a05000	 mov         r5, #0
  00010	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00014	e3500000	 cmp         r0, #0
  00018	0a000020	 beq         |$cleanUp$39467|

; 4013 :         goto cleanUp;
; 4014 : 
; 4015 :     if (bEnable == m_bTVEnable)

  0001c	e59434b8	 ldr         r3, [r4, #0x4B8]
  00020	e1560003	 cmp         r6, r3
  00024	0a00001d	 beq         |$cleanUp$39467|

; 4016 :         goto cleanUp;
; 4017 : 
; 4018 :     //  Enable/disable TV out
; 4019 :     if( bEnable )

  00028	e3560000	 cmp         r6, #0
  0002c	0a000007	 beq         |$LN2@EnableTvOu|

; 4020 :     {
; 4021 :         //  Enable TV out clock
; 4022 :         RequestClock( m_dssinfo.TVEncoderDevice );

  00030	e5940524	 ldr         r0, [r4, #0x524]
  00034	e3a01001	 mov         r1, #1
  00038	eb000000	 bl          EnableDeviceClocks

; 4023 : 
; 4024 :         //  Restore the TV out registers
; 4025 :         RestoreRegisters( OMAP_DSS_DESTINATION_TVOUT );

  0003c	e3a01001	 mov         r1, #1
  00040	e1a00004	 mov         r0, r4
  00044	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 4026 :             
; 4027 :         m_bTVEnable = TRUE;         

  00048	e3a03001	 mov         r3, #1

; 4028 :     }
; 4029 :     else

  0004c	ea000011	 b           |$LN15@EnableTvOu|
  00050		 |$LN2@EnableTvOu|

; 4030 :     {
; 4031 :         //  Disable TV out
; 4032 :         CLRREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_DIGITALENABLE );

  00050	e5942008	 ldr         r2, [r4, #8]

; 4033 :         
; 4034 :         // Stop the VENC
; 4035 :         ResetVENC();

  00054	e1a00004	 mov         r0, r4
  00058	e5923040	 ldr         r3, [r2, #0x40]
  0005c	e3c33002	 bic         r3, r3, #2
  00060	e5823040	 str         r3, [r2, #0x40]
  00064	eb000000	 bl          |?ResetVENC@OMAPDisplayController@@IAAHXZ|

; 4036 :  
; 4037 :         // Wait for the EVSYNC
; 4038 :         WaitForIRQ(DISPC_IRQSTATUS_EVSYNC_EVEN|DISPC_IRQSTATUS_EVSYNC_ODD);

  00068	e3a0201e	 mov         r2, #0x1E
  0006c	e3a0100c	 mov         r1, #0xC
  00070	e1a00004	 mov         r0, r4
  00074	eb000000	 bl          |?WaitForIRQ@OMAPDisplayController@@IAAHKK@Z|

; 4039 : 
; 4040 :         // clear all the pending interrupts
; 4041 :         SETREG32( &m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_EVSYNC_EVEN|DISPC_IRQSTATUS_EVSYNC_ODD);

  00078	e5942008	 ldr         r2, [r4, #8]

; 4042 :         
; 4043 :         //  Disable TV out clock
; 4044 :         ReleaseClock( m_dssinfo.TVEncoderDevice );

  0007c	e3a01000	 mov         r1, #0
  00080	e5923018	 ldr         r3, [r2, #0x18]
  00084	e383300c	 orr         r3, r3, #0xC
  00088	e5823018	 str         r3, [r2, #0x18]
  0008c	e5940524	 ldr         r0, [r4, #0x524]
  00090	eb000000	 bl          EnableDeviceClocks

; 4045 : 
; 4046 :         m_bTVEnable = FALSE;       

  00094	e3a03000	 mov         r3, #0
  00098		 |$LN15@EnableTvOu|
  00098	e58434b8	 str         r3, [r4, #0x4B8]

; 4047 :     }
; 4048 : 
; 4049 :     //  Success
; 4050 :     bResult = TRUE;

  0009c	e3a05001	 mov         r5, #1
  000a0		 |$cleanUp$39467|

; 4051 : 
; 4052 : cleanUp:
; 4053 :     //  Release regs
; 4054 :     ReleaseRegs();

  000a0	e2840e49	 add         r0, r4, #0x49, 28
  000a4	eb000000	 bl          LeaveCriticalSection

; 4055 : 
; 4056 :     //  Return result
; 4057 :     return bResult;
; 4058 : }

  000a8	e1a00005	 mov         r0, r5
  000ac	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$M42165|

			 ENDP  ; |?EnableTvOut@OMAPDisplayController@@QAAHH@Z|, OMAPDisplayController::EnableTvOut

	EXPORT	|?EnableHdmi@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::EnableHdmi
	IMPORT	|LcdPdd_LCD_GetMode|

  00000			 AREA	 |.pdata|, PDATA
|$T42217| DCD	|$LN28@EnableHdmi|
	DCD	0x40007702
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableHdmi@OMAPDisplayController@@QAAHH@Z| PROC ; OMAPDisplayController::EnableHdmi

; 4076 : {

  00000		 |$LN28@EnableHdmi|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M42214|
  00008	e1a05001	 mov         r5, r1
  0000c	e1a06000	 mov         r6, r0

; 4077 :     BOOL    bResult = FALSE;
; 4078 : 
; 4079 :     BOOL    bLPRState   = TRUE;
; 4080 :     
; 4081 :     //  Access the regs
; 4082 :     if( AccessRegs() == FALSE )

  00010	e3a04000	 mov         r4, #0
  00014	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00018	e3500000	 cmp         r0, #0
  0001c	0a000064	 beq         |$cleanUp$39490|

; 4083 :         goto cleanUp;
; 4084 : 
; 4085 :     //  Enable or disable HDMI output
; 4086 :     if( bEnable )

  00020	e3550000	 cmp         r5, #0
  00024	0a000026	 beq         |$LN4@EnableHdmi|

; 4087 :     {
; 4088 :         DWORD   dwX = (1280 - m_dwLcdWidth)/2,

  00028	e59634ac	 ldr         r3, [r6, #0x4AC]

; 4089 :                 dwY = (720 - m_dwLcdHeight)/2;

  0002c	e59624b0	 ldr         r2, [r6, #0x4B0]

; 4090 : 
; 4091 :         m_dwPixelClock = OMAP_DSS_FCLKVALUE_HDMI/2;

  00030	e59fe1a0	 ldr         lr, [pc, #0x1A0]
  00034	e2633c05	 rsb         r3, r3, #5, 24
  00038	e2622e2d	 rsb         r2, r2, #0x2D, 28

; 4092 :         
; 4093 :         //Save the configuration of internal LCD
; 4094 :         SaveRegisters( OMAP_DSS_DESTINATION_LCD );

  0003c	e3a01000	 mov         r1, #0
  00040	e1a00006	 mov         r0, r6
  00044	e1a050a3	 mov         r5, r3, lsr #1
  00048	e1a040a2	 mov         r4, r2, lsr #1
  0004c	e586e4b4	 str         lr, [r6, #0x4B4]
  00050	eb000000	 bl          |?SaveRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 4095 : 
; 4096 :         // Issue Power Down command to Internal LCD Panel
; 4097 :         LcdPdd_SetPowerLevel(D4);

  00054	e3a00004	 mov         r0, #4
  00058	eb000000	 bl          LcdPdd_SetPowerLevel

; 4098 :         
; 4099 :         // Disable LPR and configure DSI for HDMI clk
; 4100 :         bLPRState = FALSE;
; 4101 :         EnableLPR( bLPRState, TRUE );

  0005c	e3a02001	 mov         r2, #1
  00060	e3a01000	 mov         r1, #0
  00064	e1a00006	 mov         r0, r6
  00068	eb000000	 bl          |?EnableLPR@OMAPDisplayController@@QAAXHH@Z|

; 4102 : 
; 4103 : 		//
; 4104 :         //  Configure the HDMI timing parameters
; 4105 :         //
; 4106 : 
; 4107 :         // Timing logic for HSYNC signal
; 4108 :         OUTREG32( &m_pDispRegs->DISPC_TIMING_H,
; 4109 :                     DISPC_TIMING_H_HSW(40) |
; 4110 :                     DISPC_TIMING_H_HFP(110) |
; 4111 :                     DISPC_TIMING_H_HBP(220)
; 4112 :                     );

  0006c	e5962008	 ldr         r2, [r6, #8]
  00070	e59f315c	 ldr         r3, [pc, #0x15C]

; 4113 : 
; 4114 :         // Timing logic for VSYNC signal
; 4115 :         OUTREG32( &m_pDispRegs->DISPC_TIMING_V,
; 4116 :                     DISPC_TIMING_V_VSW(5) |
; 4117 :                     DISPC_TIMING_V_VFP(5) |
; 4118 :                     DISPC_TIMING_V_VBP(20)
; 4119 :                     );

  00074	e59f1154	 ldr         r1, [pc, #0x154]

; 4120 : 
; 4121 :         // Signal configuration
; 4122 :         OUTREG32( &m_pDispRegs->DISPC_POL_FREQ,
; 4123 :                     0
; 4124 :                     );

  00078	e3a0e000	 mov         lr, #0
  0007c	e5823064	 str         r3, [r2, #0x64]
  00080	e5963008	 ldr         r3, [r6, #8]
  00084	e3a02801	 mov         r2, #1, 16

; 4125 : 
; 4126 :         // Configures the divisor
; 4127 :         OUTREG32( &m_pDispRegs->DISPC_DIVISOR,
; 4128 :                     DISPC_DIVISOR_PCD(2) |
; 4129 :                     DISPC_DIVISOR_LCD(1)
; 4130 :                     );

  00088	e3822002	 orr         r2, r2, #2
  0008c	e5831068	 str         r1, [r3, #0x68]
  00090	e5963008	 ldr         r3, [r6, #8]

; 4131 : 
; 4132 : 
; 4133 :         // Configures the panel size
; 4134 :         OUTREG32( &m_pDispRegs->DISPC_SIZE_LCD,
; 4135 :                     DISPC_SIZE_LCD_LPP(720) |
; 4136 :                     DISPC_SIZE_LCD_PPL(1280)
; 4137 :                     );

  00094	e59f0130	 ldr         r0, [pc, #0x130]

; 4138 : 
; 4139 : 
; 4140 :         //  Center the output
; 4141 :         OUTREG32( &m_pDispRegs->DISPC_GFX_POSITION,
; 4142 :                     DISPC_GFX_POS_GFXPOSX(dwX) |
; 4143 :                     DISPC_GFX_POS_GFXPOSY(dwY)
; 4144 :                     );

  00098	e1851804	 orr         r1, r5, r4, lsl #16
  0009c	e583e06c	 str         lr, [r3, #0x6C]
  000a0	e5963008	 ldr         r3, [r6, #8]

; 4145 : 
; 4146 :         m_bHDMIEnable = TRUE;

  000a4	e3a0e001	 mov         lr, #1
  000a8	e5832070	 str         r2, [r3, #0x70]
  000ac	e5963008	 ldr         r3, [r6, #8]
  000b0	e583007c	 str         r0, [r3, #0x7C]
  000b4	e5963008	 ldr         r3, [r6, #8]
  000b8	e5831088	 str         r1, [r3, #0x88]
  000bc	e586e4cc	 str         lr, [r6, #0x4CC]

; 4147 :     }
; 4148 :     else

  000c0	ea000033	 b           |$LN14@EnableHdmi|
  000c4		 |$LN4@EnableHdmi|

; 4149 :     {
; 4150 :         // Get the int LCD params
; 4151 :         LcdPdd_LCD_GetMode( (DWORD*) &m_eLcdPixelFormat,
; 4152 :                               &m_dwLcdWidth,
; 4153 :                               &m_dwLcdHeight,
; 4154 :                               &m_dwPixelClock
; 4155 :                               );

  000c4	e2862b01	 add         r2, r6, #1, 22
  000c8	e2863b01	 add         r3, r6, #1, 22
  000cc	e2860b01	 add         r0, r6, #1, 22
  000d0	e28210ac	 add         r1, r2, #0xAC
  000d4	e2862e4b	 add         r2, r6, #0x4B, 28
  000d8	e28330b4	 add         r3, r3, #0xB4
  000dc	e28000a8	 add         r0, r0, #0xA8
  000e0	eb000000	 bl          LcdPdd_LCD_GetMode

; 4156 :         
; 4157 :         // Clear the HDMI at the beginning.
; 4158 :         // Required for restoring IntLCD context
; 4159 :         m_bHDMIEnable = FALSE;

  000e4	e3a03000	 mov         r3, #0

; 4160 : 
; 4161 :         // Change the power state to LCD panel
; 4162 :         LcdPdd_SetPowerLevel(D0);

  000e8	e3a00000	 mov         r0, #0
  000ec	e58634cc	 str         r3, [r6, #0x4CC]
  000f0	eb000000	 bl          LcdPdd_SetPowerLevel

; 4163 : 
; 4164 :         // Restore internal LCD configurations
; 4165 :         RestoreRegisters(OMAP_DSS_DESTINATION_LCD);

  000f4	e3a01000	 mov         r1, #0
  000f8	e1a00006	 mov         r0, r6
  000fc	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 4166 : 
; 4167 :         // Enable the LPR if the FIFO's are merged.
; 4168 :         if ( (INREG32( &m_pDispRegs->DISPC_CONFIG) & DISPC_CONFIG_FIFOMERGE ) )

  00100	e5961008	 ldr         r1, [r6, #8]
  00104	e5913044	 ldr         r3, [r1, #0x44]
  00108	e3130901	 tst         r3, #1, 18

; 4169 :             bLPRState = TRUE;
; 4170 :         else
; 4171 :             bLPRState = FALSE;
; 4172 : 
; 4173 :         // Restore LPR if enabled and configure DSI to IntLCD FCLK
; 4174 :         EnableLPR( bLPRState, FALSE );

  0010c	e596351c	 ldr         r3, [r6, #0x51C]
  00110	13a02001	 movne       r2, #1
  00114	03a02000	 moveq       r2, #0
  00118	e58d2000	 str         r2, [sp]
  0011c	e1b00003	 movs        r0, r3
  00120	0a00001b	 beq         |$LN14@EnableHdmi|
  00124	e59634d0	 ldr         r3, [r6, #0x4D0]
  00128	e3530000	 cmp         r3, #0
  0012c	1a000018	 bne         |$LN14@EnableHdmi|
  00130	e5963514	 ldr         r3, [r6, #0x514]
  00134	e1520003	 cmp         r2, r3
  00138	0a000015	 beq         |$LN14@EnableHdmi|
  0013c	e3520000	 cmp         r2, #0
  00140	e28d2000	 add         r2, sp, #0
  00144	0a000008	 beq         |$LN10@EnableHdmi|
  00148	e3a03106	 mov         r3, #6, 2
  0014c	e3831801	 orr         r1, r3, #1, 16
  00150	e3a03004	 mov         r3, #4
  00154	eb000000	 bl          PmxNotifyPolicy
  00158	e5962008	 ldr         r2, [r6, #8]
  0015c	e3a03c22	 mov         r3, #0x22, 24
  00160	e3833015	 orr         r3, r3, #0x15
  00164	e5823010	 str         r3, [r2, #0x10]
  00168	ea000007	 b           |$LN9@EnableHdmi|
  0016c		 |$LN10@EnableHdmi|
  0016c	e3a03a01	 mov         r3, #1, 20
  00170	e3833009	 orr         r3, r3, #9
  00174	e5813010	 str         r3, [r1, #0x10]
  00178	e596051c	 ldr         r0, [r6, #0x51C]
  0017c	e3a01106	 mov         r1, #6, 2
  00180	e3811801	 orr         r1, r1, #1, 16
  00184	e3a03004	 mov         r3, #4
  00188	eb000000	 bl          PmxNotifyPolicy
  0018c		 |$LN9@EnableHdmi|
  0018c	e59d3000	 ldr         r3, [sp]
  00190	e5863514	 str         r3, [r6, #0x514]
  00194		 |$LN14@EnableHdmi|

; 4175 :     }
; 4176 :     
; 4177 :     //  Flush shadow registers
; 4178 :     FlushRegs( DISPC_CONTROL_GOLCD );

  00194	e3a01020	 mov         r1, #0x20
  00198	e1a00006	 mov         r0, r6
  0019c	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 4179 : 
; 4180 :     //  Enable the LCD
; 4181 :     SETREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_LCDENABLE );

  001a0	e5962008	 ldr         r2, [r6, #8]

; 4182 : 
; 4183 :     //  Success
; 4184 :     bResult = TRUE;

  001a4	e3a04001	 mov         r4, #1
  001a8	e5923040	 ldr         r3, [r2, #0x40]
  001ac	e3833001	 orr         r3, r3, #1
  001b0	e5823040	 str         r3, [r2, #0x40]
  001b4		 |$cleanUp$39490|

; 4185 : 
; 4186 : cleanUp:
; 4187 :     //  Release regs
; 4188 :     ReleaseRegs();

  001b4	e2860e49	 add         r0, r6, #0x49, 28
  001b8	eb000000	 bl          LeaveCriticalSection

; 4189 : 
; 4190 :     //  Return result
; 4191 :     return bResult;
; 4192 : }

  001bc	e1a00004	 mov         r0, r4
  001c0	e28dd004	 add         sp, sp, #4
  001c4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  001c8	e12fff1e	 bx          lr
  001cc		 |$LN29@EnableHdmi|
  001cc		 |$LN30@EnableHdmi|
  001cc	02cf04ff	 DCD         0x2cf04ff
  001d0		 |$LN31@EnableHdmi|
  001d0	01400505	 DCD         0x1400505
  001d4		 |$LN32@EnableHdmi|
  001d4	0dc06e28	 DCD         0xdc06e28
  001d8		 |$LN33@EnableHdmi|
  001d8	046cf710	 DCD         0x46cf710
  001dc		 |$M42215|

			 ENDP  ; |?EnableHdmi@OMAPDisplayController@@QAAHH@Z|, OMAPDisplayController::EnableHdmi

	EXPORT	|?SetPowerLevel@OMAPDisplayController@@QAAHK@Z| ; OMAPDisplayController::SetPowerLevel

  00000			 AREA	 |.pdata|, PDATA
|$T42292| DCD	|$LN59@SetPowerLe|
	DCD	0x4000d002
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z| PROC ; OMAPDisplayController::SetPowerLevel

; 3781 : {

  00000		 |$LN59@SetPowerLe|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M42289|
  00008	e1a05001	 mov         r5, r1
  0000c	e1a04000	 mov         r4, r0

; 3782 :     BOOL            bResult = TRUE;
; 3783 :     DWORD   dwTimeout;
; 3784 :     
; 3785 :     //  Lock access to power level
; 3786 :     EnterCriticalSection( &m_csPowerLock );

  00010	e2840e49	 add         r0, r4, #0x49, 28
  00014	eb000000	 bl          EnterCriticalSection

; 3787 :     
; 3788 :     //  Check if there is a change in the power level
; 3789 :     if( m_dwPowerLevel == dwPowerLevel )

  00018	e594348c	 ldr         r3, [r4, #0x48C]
  0001c	e1530005	 cmp         r3, r5
  00020	0a0000bf	 beq         |$cleanUp$39401|

; 3790 :         goto cleanUp;
; 3791 : 
; 3792 :     //  Enable/disable devices based on power level
; 3793 :     switch( dwPowerLevel )

  00024	e3550002	 cmp         r5, #2
  00028	9a000037	 bls         |$LN19@SetPowerLe|
  0002c	e3550004	 cmp         r5, #4
  00030	8a0000bb	 bhi         |$cleanUp$39401|

; 3919 :             }
; 3920 : 
; 3921 :         break;
; 3922 :         
; 3923 :         case D3:
; 3924 :         case D4:
; 3925 :             //  Check against current level
; 3926 :             if( m_dwPowerLevel == D0 || m_dwPowerLevel == D1 || m_dwPowerLevel == D2)

  00034	e3530000	 cmp         r3, #0
  00038	0a000003	 beq         |$LN3@SetPowerLe|
  0003c	e3530001	 cmp         r3, #1
  00040	0a000001	 beq         |$LN3@SetPowerLe|
  00044	e3530002	 cmp         r3, #2
  00048	1a00003b	 bne         |$LN49@SetPowerLe|
  0004c		 |$LN3@SetPowerLe|

; 3927 :             {
; 3928 : 
; 3929 :                 //  Disable TV out
; 3930 :                 if( g_dwDestinationRefCnt[OMAP_DSS_DESTINATION_TVOUT] > 0 )

  0004c	e59f62e8	 ldr         r6, [pc, #0x2E8]
  00050	e5963004	 ldr         r3, [r6, #4]
  00054	e3530000	 cmp         r3, #0
  00058	0a000013	 beq         |$LN47@SetPowerLe|

; 3931 :                 {
; 3932 :                     //  Disable TV out control
; 3933 :                     CLRREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_DIGITALENABLE );        

  0005c	e594e008	 ldr         lr, [r4, #8]

; 3934 : 
; 3935 :                     //  Wait for EVSYNC
; 3936 :                     WaitForIRQ(DISPC_IRQSTATUS_EVSYNC_EVEN|DISPC_IRQSTATUS_EVSYNC_ODD);

  00060	e3a0201e	 mov         r2, #0x1E
  00064	e3a0100c	 mov         r1, #0xC
  00068	e59e3040	 ldr         r3, [lr, #0x40]
  0006c	e1a00004	 mov         r0, r4
  00070	e3c33002	 bic         r3, r3, #2
  00074	e58e3040	 str         r3, [lr, #0x40]
  00078	eb000000	 bl          |?WaitForIRQ@OMAPDisplayController@@IAAHKK@Z|

; 3937 : 
; 3938 :                     // clear all the pending interrupts
; 3939 :                     SETREG32( &m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_EVSYNC_EVEN|DISPC_IRQSTATUS_EVSYNC_ODD);

  0007c	e5942008	 ldr         r2, [r4, #8]

; 3940 : 
; 3941 :                     //  Save TV out settings
; 3942 :                     SaveRegisters(OMAP_DSS_DESTINATION_TVOUT);

  00080	e3a01001	 mov         r1, #1
  00084	e1a00004	 mov         r0, r4
  00088	e5923018	 ldr         r3, [r2, #0x18]
  0008c	e383300c	 orr         r3, r3, #0xC
  00090	e5823018	 str         r3, [r2, #0x18]
  00094	eb000000	 bl          |?SaveRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 3943 : 
; 3944 :                     //  Reset the video encoder
; 3945 :                     ResetVENC();                           

  00098	e1a00004	 mov         r0, r4
  0009c	eb000000	 bl          |?ResetVENC@OMAPDisplayController@@IAAHXZ|

; 3946 : 
; 3947 :                     //  Release the clock
; 3948 :                     ReleaseClock( m_dssinfo.TVEncoderDevice );

  000a0	e5940524	 ldr         r0, [r4, #0x524]
  000a4	e3a01000	 mov         r1, #0
  000a8	eb000000	 bl          EnableDeviceClocks
  000ac		 |$LN47@SetPowerLe|

; 3949 :                 }
; 3950 : 
; 3951 :                 //  Disable LCD
; 3952 :                 if( g_dwDestinationRefCnt[OMAP_DSS_DESTINATION_LCD] > 0 )

  000ac	e5963000	 ldr         r3, [r6]
  000b0	e3530000	 cmp         r3, #0
  000b4	0a000007	 beq         |$LN1@SetPowerLe|

; 3953 :                 {
; 3954 :                     //  Save LCD settings
; 3955 :                     SaveRegisters(OMAP_DSS_DESTINATION_LCD);

  000b8	e3a01000	 mov         r1, #0
  000bc	e1a00004	 mov         r0, r4
  000c0	eb000000	 bl          |?SaveRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 3956 : 
; 3957 :                     //  Disable LCD
; 3958 :                     LcdPdd_SetPowerLevel( dwPowerLevel );

  000c4	e1a00005	 mov         r0, r5
  000c8	eb000000	 bl          LcdPdd_SetPowerLevel

; 3959 :                     
; 3960 :                     //  Wait for the frame to complete
; 3961 :                     WaitForFrameDone();

  000cc	e3a0101e	 mov         r1, #0x1E
  000d0	e1a00004	 mov         r0, r4
  000d4	eb000000	 bl          |?WaitForFrameDone@OMAPDisplayController@@IAAHK@Z|
  000d8		 |$LN1@SetPowerLe|

; 3962 :                 }
; 3963 : 
; 3964 :                 //  Call PDD layer (again in case LCD was not enabled)
; 3965 :                 LcdPdd_SetPowerLevel( dwPowerLevel );

  000d8	e1a00005	 mov         r0, r5
  000dc	eb000000	 bl          LcdPdd_SetPowerLevel

; 3966 : 
; 3967 :                 //  Clear all DSS interrupts
; 3968 :                 OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, 0xFFFFFFFF );

  000e0	e5943008	 ldr         r3, [r4, #8]
  000e4	e3e02000	 mvn         r2, #0

; 3969 :                 
; 3970 :                 //  Change interconnect parameters to disable controller
; 3971 :                 OUTREG32( &m_pDispRegs->DISPC_SYSCONFIG, DISPC_SYSCONFIG_AUTOIDLE|SYSCONFIG_FORCEIDLE|SYSCONFIG_FORCESTANDBY );

  000e8	e3a00001	 mov         r0, #1
  000ec	e5832018	 str         r2, [r3, #0x18]
  000f0	e5943008	 ldr         r3, [r4, #8]

; 3972 : 
; 3973 : #if 0
; 3974 : 				if ( m_eDssFclkSource == OMAP_DSS_FCLK_DSS2ALWON )
; 3975 :                 {
; 3976 :                     // De-init the DSI Pll and Power Down the DSI PLL
; 3977 :                     DeInitDsiPll();
; 3978 :                     // Set clock to DSS1
; 3979 :                     ULONG count = 1;
; 3980 :                     ULONG clockSrc = kDSS1_ALWON_FCLK;
; 3981 :                     SelectDSSSourceClocks( count, &clockSrc);
; 3982 :                 }
; 3983 : #endif
; 3984 : 
; 3985 : 				//  Disable device clocks 
; 3986 :                 ReleaseClock( m_dssinfo.DSSDevice );         

  000f4	e3a01000	 mov         r1, #0
  000f8	e5830010	 str         r0, [r3, #0x10]
  000fc	e5940520	 ldr         r0, [r4, #0x520]
  00100	eb000000	 bl          EnableDeviceClocks
  00104	e584548c	 str         r5, [r4, #0x48C]
  00108	ea000085	 b           |$cleanUp$39401|
  0010c		 |$LN19@SetPowerLe|

; 3794 :     {
; 3795 :         case D0:
; 3796 :         case D1: 
; 3797 :         case D2:
; 3798 :             //  Check against current level
; 3799 :             if( m_dwPowerLevel == D3 || m_dwPowerLevel == D4)

  0010c	e3530003	 cmp         r3, #3
  00110	0a00000b	 beq         |$LN17@SetPowerLe|
  00114	e3530004	 cmp         r3, #4
  00118	0a000009	 beq         |$LN17@SetPowerLe|

; 3910 :             }
; 3911 : 			else    
; 3912 :             {         
; 3913 :                 LcdPdd_SetPowerLevel(dwPowerLevel);

  0011c	e1a00005	 mov         r0, r5
  00120	eb000000	 bl          LcdPdd_SetPowerLevel

; 3914 :                 if (dwPowerLevel == D2)
; 3915 :                     CLRREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_DIGITALENABLE );

  00124	e5942008	 ldr         r2, [r4, #8]
  00128	e3550002	 cmp         r5, #2
  0012c	e5923040	 ldr         r3, [r2, #0x40]
  00130	03c33002	 biceq       r3, r3, #2

; 3916 :                 else
; 3917 :                     SETREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_DIGITALENABLE );

  00134	13833002	 orrne       r3, r3, #2
  00138	e5823040	 str         r3, [r2, #0x40]

; 3972 : 
; 3973 : #if 0
; 3974 : 				if ( m_eDssFclkSource == OMAP_DSS_FCLK_DSS2ALWON )
; 3975 :                 {
; 3976 :                     // De-init the DSI Pll and Power Down the DSI PLL
; 3977 :                     DeInitDsiPll();
; 3978 :                     // Set clock to DSS1
; 3979 :                     ULONG count = 1;
; 3980 :                     ULONG clockSrc = kDSS1_ALWON_FCLK;
; 3981 :                     SelectDSSSourceClocks( count, &clockSrc);
; 3982 :                 }
; 3983 : #endif
; 3984 : 
; 3985 : 				//  Disable device clocks 
; 3986 :                 ReleaseClock( m_dssinfo.DSSDevice );         

  0013c		 |$LN49@SetPowerLe|

; 3918 : 			    m_dwPowerLevel = dwPowerLevel;

  0013c	e584548c	 str         r5, [r4, #0x48C]
  00140	ea000077	 b           |$cleanUp$39401|
  00144		 |$LN17@SetPowerLe|

; 3800 :             {
; 3801 :                 //  Set the new power level
; 3802 :                 m_dwPowerLevel = dwPowerLevel;
; 3803 :             
; 3804 :                 //  Enable device clocks
; 3805 :                 RequestClock( m_dssinfo.DSSDevice );         

  00144	e5940520	 ldr         r0, [r4, #0x520]
  00148	e3a01001	 mov         r1, #1
  0014c	e584548c	 str         r5, [r4, #0x48C]
  00150	eb000000	 bl          EnableDeviceClocks

; 3806 : 
; 3807 :                 //  Call PDD layer
; 3808 :                 LcdPdd_SetPowerLevel( dwPowerLevel );

  00154	e1a00005	 mov         r0, r5
  00158	eb000000	 bl          LcdPdd_SetPowerLevel

; 3809 : 
; 3810 :                 //  Re-enable LCD outputs
; 3811 :                 if( g_dwDestinationRefCnt[OMAP_DSS_DESTINATION_LCD] > 0 )

  0015c	e59f61d8	 ldr         r6, [pc, #0x1D8]
  00160	e5963000	 ldr         r3, [r6]
  00164	e3530000	 cmp         r3, #0
  00168	0a00004d	 beq         |$LN13@SetPowerLe|

; 3812 :                 {
; 3813 :                     // The HDMI uses DSI clock. At init time, DSS is turned
; 3814 :                     // ON and so HDMI cannot be configured at init time.
; 3815 :                     // The HDMI config seq is given below
; 3816 :                     // init -> InternalLCD(DSS) -> HDMI(DSI)
; 3817 :                     
; 3818 :                     // Store the current HDMI state
; 3819 :                     BOOL bHdmiEnable = m_bHDMIEnable;
; 3820 :                     // Force HDMI to inactive state during init
; 3821 :                     m_bHDMIEnable = FALSE;

  0016c	e59474cc	 ldr         r7, [r4, #0x4CC]
  00170	e3a03000	 mov         r3, #0

; 3822 : 
; 3823 : #if 0
; 3824 : 					// Turn on the DSS2_ALWON_FCLK if the FCLK source is DSI clock
; 3825 :                     if ( m_eDssFclkSource == OMAP_DSS_FCLK_DSS2ALWON )
; 3826 :                     {
; 3827 :                         ULONG count = 2;
; 3828 :                         ULONG clockSrc[2] = {kDSS1_ALWON_FCLK, kDSS2_ALWON_FCLK};
; 3829 :                         SelectDSSSourceClocks( count, clockSrc);
; 3830 :                         InitDsiPll();
; 3831 :                     }
; 3832 : #endif
; 3833 :                     
; 3834 :                     //  Restore LCD settings
; 3835 :                     RestoreRegisters(OMAP_DSS_DESTINATION_LCD);

  00174	e3a01000	 mov         r1, #0
  00178	e1a00004	 mov         r0, r4
  0017c	e58434cc	 str         r3, [r4, #0x4CC]
  00180	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 3836 : 
; 3837 :                     // enable interrupt for reporting SYNCLOST errors
; 3838 :                     SETREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_SYNCLOST);

  00184	e5942008	 ldr         r2, [r4, #8]

; 3839 : 
; 3840 :                     LcdPdd_SetPowerLevel( dwPowerLevel );

  00188	e1a00005	 mov         r0, r5
  0018c	e592301c	 ldr         r3, [r2, #0x1C]
  00190	e3833901	 orr         r3, r3, #1, 18
  00194	e582301c	 str         r3, [r2, #0x1C]
  00198	eb000000	 bl          LcdPdd_SetPowerLevel

; 3841 : 
; 3842 :                     // Check the FIFO threshold level and decide if LPR is required
; 3843 :                     DWORD dwFIFOThreshold = 
; 3844 :                         (DISPC_GFX_FIFO_THRESHOLD_LOW(FIFO_LOWTHRESHOLD_MERGED(FIFO_BURSTSIZE_16x32))|
; 3845 :                          DISPC_GFX_FIFO_THRESHOLD_HIGH(FIFO_HIGHTHRESHOLD_MERGED));
; 3846 :                     
; 3847 :                     BOOL bLPREnable = FALSE;
; 3848 :                         
; 3849 :                     // Enable the LPR if the FIFO's are merged.
; 3850 :                     if ( INREG32( &m_pDispRegs->DISPC_GFX_FIFO_THRESHOLD) == dwFIFOThreshold )

  0019c	e5940008	 ldr         r0, [r4, #8]
  001a0	e3e0333d	 mvn         r3, #0x3D, 6
  001a4	e2232cfa	 eor         r2, r3, #0xFA, 24
  001a8	e59030a4	 ldr         r3, [r0, #0xA4]
  001ac	e3a01000	 mov         r1, #0
  001b0	e1530002	 cmp         r3, r2
  001b4	1a000004	 bne         |$LN14@SetPowerLe|

; 3851 :                     {
; 3852 :                         SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_FIFOMERGE);

  001b8	e5903044	 ldr         r3, [r0, #0x44]

; 3853 :                         
; 3854 :                         // Make sure the LPR is disabled when HDMI is enabled
; 3855 :                         if (bHdmiEnable == FALSE)

  001bc	e3570000	 cmp         r7, #0

; 3856 :                         {
; 3857 :                             // LPR should be turned ON
; 3858 :                             bLPREnable = TRUE;

  001c0	03a01001	 moveq       r1, #1
  001c4	e3833901	 orr         r3, r3, #1, 18
  001c8	e5803044	 str         r3, [r0, #0x44]
  001cc		 |$LN14@SetPowerLe|

; 3859 :                         }
; 3860 :                     }
; 3861 : 
; 3862 :                     // Toggle the LPR state
; 3863 :                     m_bLPREnable = ( m_bLPREnable == TRUE ) ? FALSE : TRUE;

  001cc	e5943514	 ldr         r3, [r4, #0x514]

; 3864 :                     // Turn on LPR and also switch to DSI clock (if clksource == DSI)
; 3865 :                     EnableLPR( bLPREnable );

  001d0	e58d1000	 str         r1, [sp]
  001d4	e3530001	 cmp         r3, #1
  001d8	e594351c	 ldr         r3, [r4, #0x51C]
  001dc	03a02000	 moveq       r2, #0
  001e0	13a02001	 movne       r2, #1
  001e4	e5842514	 str         r2, [r4, #0x514]
  001e8	e1b00003	 movs        r0, r3
  001ec	0a00001c	 beq         |$LN35@SetPowerLe|
  001f0	e59434d0	 ldr         r3, [r4, #0x4D0]
  001f4	e3530000	 cmp         r3, #0
  001f8	1a000019	 bne         |$LN35@SetPowerLe|
  001fc	e1510002	 cmp         r1, r2
  00200	0a000017	 beq         |$LN35@SetPowerLe|
  00204	e3510000	 cmp         r1, #0
  00208	0a000009	 beq         |$LN31@SetPowerLe|
  0020c	e3a03106	 mov         r3, #6, 2
  00210	e3831801	 orr         r1, r3, #1, 16
  00214	e3a03004	 mov         r3, #4
  00218	e28d2000	 add         r2, sp, #0
  0021c	eb000000	 bl          PmxNotifyPolicy
  00220	e5942008	 ldr         r2, [r4, #8]
  00224	e3a03c22	 mov         r3, #0x22, 24
  00228	e3833015	 orr         r3, r3, #0x15
  0022c	e5823010	 str         r3, [r2, #0x10]
  00230	ea000009	 b           |$LN30@SetPowerLe|
  00234		 |$LN31@SetPowerLe|
  00234	e5942008	 ldr         r2, [r4, #8]
  00238	e3a03a01	 mov         r3, #1, 20
  0023c	e3833009	 orr         r3, r3, #9
  00240	e5823010	 str         r3, [r2, #0x10]
  00244	e594051c	 ldr         r0, [r4, #0x51C]
  00248	e3a01106	 mov         r1, #6, 2
  0024c	e3a03004	 mov         r3, #4
  00250	e28d2000	 add         r2, sp, #0
  00254	e3811801	 orr         r1, r1, #1, 16
  00258	eb000000	 bl          PmxNotifyPolicy
  0025c		 |$LN30@SetPowerLe|
  0025c	e59d3000	 ldr         r3, [sp]
  00260	e5843514	 str         r3, [r4, #0x514]
  00264		 |$LN35@SetPowerLe|

; 3866 :                     
; 3867 :                     //  Flush shadow registers
; 3868 :                     FlushRegs( DISPC_CONTROL_GOLCD );

  00264	e3a01020	 mov         r1, #0x20
  00268	e1a00004	 mov         r0, r4
  0026c	eb000000	 bl          |?FlushRegs@OMAPDisplayController@@IAAHK@Z|

; 3869 :                     
; 3870 :                     if (bHdmiEnable)

  00270	e3570000	 cmp         r7, #0
  00274	0a00000a	 beq         |$LN13@SetPowerLe|

; 3871 :                     {
; 3872 :                         WaitForFlushDone( DISPC_CONTROL_GOLCD );

  00278	e3a01020	 mov         r1, #0x20
  0027c	e1a00004	 mov         r0, r4
  00280	eb000000	 bl          |?WaitForFlushDone@OMAPDisplayController@@IAAHK@Z|

; 3873 :                         // Restore the HDMI specific context
; 3874 :                         m_bHDMIEnable = TRUE;

  00284	e3a03001	 mov         r3, #1

; 3875 :                         RestoreRegisters( OMAP_DSS_DESTINATION_LCD );

  00288	e3a01000	 mov         r1, #0
  0028c	e1a00004	 mov         r0, r4
  00290	e58434cc	 str         r3, [r4, #0x4CC]
  00294	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 3876 :                         // Configure and enable the Hdmi Panel 
; 3877 :                         EnableHdmi( TRUE );

  00298	e3a01001	 mov         r1, #1
  0029c	e1a00004	 mov         r0, r4
  002a0	eb000000	 bl          |?EnableHdmi@OMAPDisplayController@@QAAHH@Z|
  002a4		 |$LN13@SetPowerLe|

; 3878 :                     }
; 3879 :                 }
; 3880 :                 
; 3881 :                 //  Re-enable TV out if it was enabled prior to display power change
; 3882 :                 if( m_bTVEnable )

  002a4	e59434b8	 ldr         r3, [r4, #0x4B8]
  002a8	e3530000	 cmp         r3, #0
  002ac	0a00000b	 beq         |$LN11@SetPowerLe|

; 3883 :                 {
; 3884 :                     //  Enable the video encoder clock
; 3885 :                     RequestClock( m_dssinfo.TVEncoderDevice );

  002b0	e5940524	 ldr         r0, [r4, #0x524]
  002b4	e3a01001	 mov         r1, #1
  002b8	eb000000	 bl          EnableDeviceClocks

; 3886 : 
; 3887 :                     //  Restore the TV out registers
; 3888 :                     RestoreRegisters( OMAP_DSS_DESTINATION_TVOUT );

  002bc	e3a01001	 mov         r1, #1
  002c0	e1a00004	 mov         r0, r4
  002c4	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 3889 : 
; 3890 :                     //  Enable TV out if there is something to show
; 3891 :                 if( g_dwDestinationRefCnt[OMAP_DSS_DESTINATION_TVOUT] > 0 )

  002c8	e5963004	 ldr         r3, [r6, #4]
  002cc	e3530000	 cmp         r3, #0

; 3892 :                         {
; 3893 :                       // enable interrupt for reporting SYNCLOST errors
; 3894 :                         //SETREG32( &m_pDispRegs->DISPC_IRQENABLE, DISPC_IRQENABLE_SYNCLOSTDIGITAL);
; 3895 :                         // enable the tvout path
; 3896 :                         SETREG32( &m_pDispRegs->DISPC_CONTROL, DISPC_CONTROL_DIGITALENABLE );

  002d0	15942008	 ldrne       r2, [r4, #8]
  002d4	15923040	 ldrne       r3, [r2, #0x40]
  002d8	13833002	 orrne       r3, r3, #2
  002dc	15823040	 strne       r3, [r2, #0x40]
  002e0		 |$LN11@SetPowerLe|

; 3897 :                 }
; 3898 :                     }
; 3899 :                 
; 3900 :                 //  Wait for VSYNC
; 3901 :                 dwTimeout = DISPLAY_TIMEOUT;
; 3902 :                 OUTREG32(&m_pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_VSYNC);

  002e0	e5943008	 ldr         r3, [r4, #8]
  002e4	e3a02002	 mov         r2, #2
  002e8	e3a0501e	 mov         r5, #0x1E
  002ec	e5832018	 str         r2, [r3, #0x18]

; 3903 :                 while (((INREG32(&m_pDispRegs->DISPC_IRQSTATUS) & DISPC_IRQSTATUS_VSYNC) == 0) && (dwTimeout-- > 0))

  002f0	ea000004	 b           |$LN56@SetPowerLe|
  002f4		 |$LL10@SetPowerLe|
  002f4	e3550000	 cmp         r5, #0
  002f8	e2455001	 sub         r5, r5, #1
  002fc	0a000005	 beq         |$LN53@SetPowerLe|

; 3904 :                 {
; 3905 :                     Sleep(1);

  00300	e3a00001	 mov         r0, #1
  00304	eb000000	 bl          Sleep
  00308		 |$LN56@SetPowerLe|
  00308	e5943008	 ldr         r3, [r4, #8]
  0030c	e5933018	 ldr         r3, [r3, #0x18]
  00310	e3130002	 tst         r3, #2
  00314	0afffff6	 beq         |$LL10@SetPowerLe|
  00318		 |$LN53@SetPowerLe|

; 3906 :                 }
; 3907 : 
; 3908 :                 //  Clear all DSS interrupts
; 3909 :                 OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, 0xFFFFFFFF );

  00318	e5943008	 ldr         r3, [r4, #8]
  0031c	e3e02000	 mvn         r2, #0
  00320	e5832018	 str         r2, [r3, #0x18]
  00324		 |$cleanUp$39401|

; 3987 : 			}	
; 3988 :             
; 3989 :             //  Set the new power level
; 3990 :             m_dwPowerLevel = dwPowerLevel;
; 3991 : 
; 3992 :             break;            
; 3993 :     }
; 3994 : 
; 3995 : cleanUp:    
; 3996 :     //  Unlock access to power level
; 3997 :     LeaveCriticalSection( &m_csPowerLock );

  00324	e2840e49	 add         r0, r4, #0x49, 28
  00328	eb000000	 bl          LeaveCriticalSection

; 3998 :                 
; 3999 :     //  Return result
; 4000 :     return bResult;

  0032c	e3a00001	 mov         r0, #1

; 4001 : }

  00330	e28dd004	 add         sp, sp, #4
  00334	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00338	e12fff1e	 bx          lr
  0033c		 |$LN60@SetPowerLe|
  0033c		 |$LN61@SetPowerLe|
  0033c	00000000	 DCD         |?g_dwDestinationRefCnt@@3PAKA|
  00340		 |$M42290|

			 ENDP  ; |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|, OMAPDisplayController::SetPowerLevel

	EXPORT	|?InitController@OMAPDisplayController@@QAAHHHH@Z| ; OMAPDisplayController::InitController
	EXPORT	|??_C@_1BI@GKABGADH@?$AAS?$AAM?$AAA?$AAR?$AAT?$AAR?$AAE?$AAF?$AAL?$AAE?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@PPJICGNB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@JFNBAFMN@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr@| [ DATA ] ; `string'
	IMPORT	|PmxOpenPolicy|
	IMPORT	|RequestDevicePads|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|AllocPhysMem|
	IMPORT	|MmMapIoSpace|

  00000			 AREA	 |.pdata|, PDATA
|$T42324| DCD	|$LN28@InitContro|
	DCD	0x40008102

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@GKABGADH@?$AAS?$AAM?$AAA?$AAR?$AAT?$AAR?$AAE?$AAF?$AAL?$AAE?$AAX?$AA?$AA@| DCB "S"
	DCB	0x0, "M", 0x0, "A", 0x0, "R", 0x0, "T", 0x0, "R", 0x0, "E"
	DCB	0x0, "F", 0x0, "L", 0x0, "E", 0x0, "X", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "D", 0x0, "S"
	DCB	0x0, "S", 0x0, "\\", 0x0, "D", 0x0, "S", 0x0, "S", 0x0, "A"
	DCB	0x0, "I", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "d", 0x0, "s"
	DCB	0x0, "s", 0x0, "a", 0x0, "i", 0x0, ".", 0x0, "c", 0x0, "p"
	DCB	0x0, "p", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@PPJICGNB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "d"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@JFNBAFMN@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InitController@OMAPDisplayController@@QAAHHHH@Z| PROC ; OMAPDisplayController::InitController

; 200  : {

  00000		 |$LN28@InitContro|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M42321|
  00008	e1a07003	 mov         r7, r3
  0000c	e1a06002	 mov         r6, r2
  00010	e1a05001	 mov         r5, r1
  00014	e1a04000	 mov         r4, r0

; 201  :     BOOL    bResult = FALSE;
; 202  :     PHYSICAL_ADDRESS pa;
; 203  :     DWORD size;
; 204  : 
; 205  :     //
; 206  :     //  Map display controller registers
; 207  :     //
; 208  :     RETAILMSG(1,(L"OMAPDisplayController::InitController ------------------\n\r"));

  00018	e59f01e0	 ldr         r0, [pc, #0x1E0]
  0001c	e3a08000	 mov         r8, #0
  00020	eb000000	 bl          NKDbgPrintfW

; 209  :     pa.QuadPart = m_dssinfo.DSS1_REGS_PA;

  00024	e5940528	 ldr         r0, [r4, #0x528]
  00028	e3a01000	 mov         r1, #0

; 210  :     size = DSS_REGS_SIZE;
; 211  :     m_pDSSRegs = (OMAP_DSS_REGS*)MmMapIoSpace(pa, size, FALSE);

  0002c	e3a03000	 mov         r3, #0
  00030	e3a02b01	 mov         r2, #1, 22
  00034	eb000000	 bl          MmMapIoSpace
  00038	e3500000	 cmp         r0, #0
  0003c	e5840004	 str         r0, [r4, #4]

; 212  :     if (m_pDSSRegs == NULL)

  00040	0a000066	 beq         |$cleanUp$38003|

; 213  : 	{
; 214  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::InitController: "
; 215  :              L"Failed map DSS control registers\r\n"));
; 216  :         goto cleanUp;
; 217  : 	}
; 218  : 
; 219  :     pa.QuadPart = m_dssinfo.DISC1_REGS_PA;

  00044	e594052c	 ldr         r0, [r4, #0x52C]
  00048	e3a01000	 mov         r1, #0

; 220  :     size = DSS_REGS_SIZE;
; 221  :     m_pDispRegs = (OMAP_DISPC_REGS*)MmMapIoSpace(pa, size, FALSE);

  0004c	e3a03000	 mov         r3, #0
  00050	e3a02b01	 mov         r2, #1, 22
  00054	eb000000	 bl          MmMapIoSpace
  00058	e3500000	 cmp         r0, #0
  0005c	e5840008	 str         r0, [r4, #8]

; 222  :     if (m_pDispRegs == NULL)

  00060	0a00005e	 beq         |$cleanUp$38003|

; 223  : 	{
; 224  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::InitController: "
; 225  :              L"Failed map DISPC control registers\r\n"));
; 226  :         goto cleanUp;
; 227  : 	}
; 228  : 
; 229  :     pa.QuadPart = m_dssinfo.VENC1_REGS_PA;

  00064	e5940530	 ldr         r0, [r4, #0x530]
  00068	e3a01000	 mov         r1, #0

; 230  :     size = DSS_REGS_SIZE;
; 231  :     m_pVencRegs = (OMAP_VENC_REGS*)MmMapIoSpace(pa, size, FALSE);

  0006c	e3a03000	 mov         r3, #0
  00070	e3a02b01	 mov         r2, #1, 22
  00074	eb000000	 bl          MmMapIoSpace
  00078	e3500000	 cmp         r0, #0
  0007c	e584000c	 str         r0, [r4, #0xC]

; 232  :     if (m_pVencRegs == NULL)

  00080	0a000056	 beq         |$cleanUp$38003|

; 233  : 	{
; 234  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::InitController: "
; 235  :              L"Failed map VENC control registers\r\n"));
; 236  :         goto cleanUp;
; 237  : 	}
; 238  : 
; 239  :     // Disable gamma correction based on registry
; 240  :     if(!bEnableGammaCorr)

  00084	e3a09000	 mov         r9, #0
  00088	e3550000	 cmp         r5, #0

; 241  :         m_bGammaEnable = FALSE;

  0008c	058494e0	 streq       r9, [r4, #0x4E0]

; 242  : 
; 243  :     // Enable VSYNC code based on registry
; 244  :     if (bEnableWaitForVerticalBlank)
; 245  :     	m_dwEnableWaitForVerticalBlank = TRUE;
; 246  : 
; 247  :     //enable ISP resizer based on registry
; 248  :     if (bEnableISPResizer)
; 249  :         m_bDssIspRszEnabled = TRUE;
; 250  :     
; 251  : 
; 252  :     //  Allocate physical memory for gamma table buffer
; 253  :     m_pGammaBufVirt = (DWORD*)AllocPhysMem(NUM_GAMMA_VALS*sizeof(DWORD), PAGE_READWRITE | PAGE_NOCACHE, 0, 0,&m_dwGammaBufPhys);

  00090	e2843b01	 add         r3, r4, #1, 22
  00094	e3560000	 cmp         r6, #0
  00098	e3a05001	 mov         r5, #1
  0009c	e28330dc	 add         r3, r3, #0xDC
  000a0	15845504	 strne       r5, [r4, #0x504]
  000a4	e3570000	 cmp         r7, #0
  000a8	e58d3000	 str         r3, [sp]
  000ac	e3a03000	 mov         r3, #0
  000b0	e3a02000	 mov         r2, #0
  000b4	e3a01f81	 mov         r1, #0x81, 30
  000b8	e3a00b01	 mov         r0, #1, 22
  000bc	15845518	 strne       r5, [r4, #0x518]
  000c0	eb000000	 bl          AllocPhysMem
  000c4	e3500000	 cmp         r0, #0
  000c8	e58404d8	 str         r0, [r4, #0x4D8]

; 254  :     if( m_pGammaBufVirt == NULL)

  000cc	0a000043	 beq         |$cleanUp$38003|

; 255  : 	{
; 256  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: COMAPDisplayController::InitController: "
; 257  :             L"Failed allocate Gamma phys buffer\r\n"));
; 258  :         goto cleanUp;
; 259  : 	}
; 260  : 
; 261  :     // map DSI regs
; 262  :     pa.QuadPart = m_dssinfo.DSI_REGS_PA;

  000d0	e5940534	 ldr         r0, [r4, #0x534]
  000d4	e3a01000	 mov         r1, #0

; 263  :     size = sizeof(OMAP_DSI_REGS);
; 264  :     m_pDSIRegs = (OMAP_DSI_REGS*)MmMapIoSpace(pa, size, FALSE);

  000d8	e3a03000	 mov         r3, #0
  000dc	e3a020c0	 mov         r2, #0xC0
  000e0	eb000000	 bl          MmMapIoSpace
  000e4	e3500000	 cmp         r0, #0
  000e8	e5840010	 str         r0, [r4, #0x10]

; 265  :     if (m_pDSIRegs == NULL)

  000ec	0a00003b	 beq         |$cleanUp$38003|

; 266  : 	{
; 267  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::InitController: "
; 268  :                  L"Failed map DSI control registers\r\n"));
; 269  :         goto cleanUp;
; 270  : 	}
; 271  : 
; 272  :     // map DSI Pll regs
; 273  :     pa.QuadPart = m_dssinfo.DSI_PLL_REGS_PA;

  000f0	e5940538	 ldr         r0, [r4, #0x538]
  000f4	e3a01000	 mov         r1, #0

; 274  :     size = sizeof(OMAP_DSI_PLL_REGS);
; 275  :     m_pDSIPLLRegs = (OMAP_DSI_PLL_REGS*)MmMapIoSpace(pa, size, FALSE);

  000f8	e3a03000	 mov         r3, #0
  000fc	e3a02014	 mov         r2, #0x14
  00100	eb000000	 bl          MmMapIoSpace
  00104	e3500000	 cmp         r0, #0
  00108	e5840014	 str         r0, [r4, #0x14]

; 276  :     if (m_pDSIPLLRegs == NULL)

  0010c	0a000033	 beq         |$cleanUp$38003|

; 277  : 	{
; 278  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::InitController: "
; 279  :                      L"Failed map DSIPLL control registers\r\n"));
; 280  :         goto cleanUp;
; 281  : 	}
; 282  : 
; 283  :     // map RFBI regs
; 284  :     pa.QuadPart = m_dssinfo.RFBI_REGS_PA;

  00110	e594053c	 ldr         r0, [r4, #0x53C]
  00114	e3a01000	 mov         r1, #0

; 285  :     size = sizeof(OMAP_RFBI_REGS);
; 286  :     m_pRFBIRegs = (OMAP_RFBI_REGS*)MmMapIoSpace(pa, size, FALSE);

  00118	e3a03000	 mov         r3, #0
  0011c	e3a02098	 mov         r2, #0x98
  00120	eb000000	 bl          MmMapIoSpace

; 287  :     if (m_pDSIRegs == NULL)

  00124	e5943010	 ldr         r3, [r4, #0x10]
  00128	e5840018	 str         r0, [r4, #0x18]
  0012c	e3530000	 cmp         r3, #0
  00130	0a00002a	 beq         |$cleanUp$38003|

; 288  : 	{
; 289  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: OMAPDisplayController::InitController: "
; 290  :                  L"Failed map RFBI control registers\r\n"));
; 291  :         goto cleanUp;
; 292  : 	}
; 293  :         
; 294  :     //  Initialize power lock critical section
; 295  :     InitializeCriticalSection( &m_csPowerLock );

  00134	e2840e49	 add         r0, r4, #0x49, 28
  00138	eb000000	 bl          InitializeCriticalSection

; 296  : 
; 297  :     //  Lock access to power level
; 298  :     EnterCriticalSection( &m_csPowerLock );

  0013c	e2840e49	 add         r0, r4, #0x49, 28
  00140	eb000000	 bl          EnterCriticalSection

; 299  : 
; 300  :     // Configure the DssFclk source and value
; 301  :     m_eDssFclkSource = OMAP_DSS_FCLK_DSS2ALWON;
; 302  :     m_eDssFclkValue  = OMAP_DSS_FCLKVALUE_NORMAL;
; 303  : 
; 304  : 	// Request Pads for LCD
; 305  : 	if (!RequestDevicePads(m_dssinfo.DSSDevice))

  00144	e5940520	 ldr         r0, [r4, #0x520]
  00148	e3a03529	 mov         r3, #0x29, 10
  0014c	e3833c83	 orr         r3, r3, #0x83, 24
  00150	e5843510	 str         r3, [r4, #0x510]
  00154	e584550c	 str         r5, [r4, #0x50C]
  00158	eb000000	 bl          RequestDevicePads
  0015c	e3500000	 cmp         r0, #0
  00160	1a000006	 bne         |$LN2@InitContro|

; 306  : 	{
; 307  :         ERRORMSG(TRUE, (L"ERROR: OMAPDisplayController::InitController: "
; 308  :                      L"Failed to request pads\r\n"));

  00164	e59f1090	 ldr         r1, [pc, #0x90]
  00168	e59f0088	 ldr         r0, [pc, #0x88]
  0016c	e3a02f4d	 mov         r2, #0x4D, 30
  00170	eb000000	 bl          NKDbgPrintfW
  00174	e59f0078	 ldr         r0, [pc, #0x78]
  00178	eb000000	 bl          NKDbgPrintfW

; 344  : 
; 345  : cleanUp:    

  0017c	ea000017	 b           |$cleanUp$38003|
  00180		 |$LN2@InitContro|

; 309  :         goto cleanUp;
; 310  : 	}
; 311  : 
; 312  :     //  Reset the DSS controller
; 313  :     ResetDSS();

  00180	e1a00004	 mov         r0, r4
  00184	eb000000	 bl          |?ResetDSS@OMAPDisplayController@@IAAHXZ|

; 314  : 
; 315  :     //  Enable controller power
; 316  :     SetPowerLevel( D0 );

  00188	e3a01000	 mov         r1, #0
  0018c	e1a00004	 mov         r0, r4
  00190	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|

; 317  : 
; 318  :     //  Configure the clock source
; 319  :     //
; 320  :     //  DSS1_ALWON = 172MHz
; 321  :     //  DSI1_PLL   = 148.5MHz
; 322  :     //
; 323  :     OUTREG32( &m_pDSSRegs->DSS_CONTROL, 
; 324  :                 DSS_CONTROL_DISPC_CLK_SWITCH_DSS1_ALWON |
; 325  :                 DSS_CONTROL_DSI_CLK_SWITCH_DSS1_ALWON);

  00194	e5943004	 ldr         r3, [r4, #4]
  00198	e3a02a01	 mov         r2, #1, 20

; 326  : 
; 327  :     //  Configure interconnect parameters
; 328  :     OUTREG32( &m_pDSSRegs->DSS_SYSCONFIG, DISPC_SYSCONFIG_AUTOIDLE );
; 329  :     OUTREG32( &m_pDispRegs->DISPC_SYSCONFIG, DISPC_SYSCONFIG_AUTOIDLE|SYSCONFIG_NOIDLE|SYSCONFIG_NOSTANDBY );

  0019c	e3822009	 orr         r2, r2, #9
  001a0	e5839040	 str         r9, [r3, #0x40]
  001a4	e5943004	 ldr         r3, [r4, #4]

; 330  : 
; 331  : 
; 332  :     //  Enable DSS fault notification interrupts
; 333  :     g_rgDisplaySaveRestore.DISPC_IRQENABLE = DISPC_IRQENABLE_OCPERROR| DISPC_IRQENABLE_SYNCLOST;

  001a8	e3a01c42	 mov         r1, #0x42, 24

; 334  :     OUTREG32( &m_pDispRegs->DISPC_IRQENABLE , g_rgDisplaySaveRestore.DISPC_IRQENABLE);
; 335  : 
; 336  :     //  Unlock access to power level
; 337  :     LeaveCriticalSection( &m_csPowerLock );

  001ac	e2840e49	 add         r0, r4, #0x49, 28
  001b0	e5835010	 str         r5, [r3, #0x10]
  001b4	e5943008	 ldr         r3, [r4, #8]
  001b8	e5832010	 str         r2, [r3, #0x10]
  001bc	e5942008	 ldr         r2, [r4, #8]
  001c0	e5841038	 str         r1, [r4, #0x38]
  001c4	e5943038	 ldr         r3, [r4, #0x38]
  001c8	e582301c	 str         r3, [r2, #0x1C]
  001cc	eb000000	 bl          LeaveCriticalSection

; 338  :         
; 339  :     // Open a handle to SmartReflex policy adapter
; 340  :     m_hSmartReflexPolicyAdapter = PmxOpenPolicy(SMARTREFLEX_POLICY_NAME);

  001d0	e59f0018	 ldr         r0, [pc, #0x18]
  001d4	eb000000	 bl          PmxOpenPolicy
  001d8	e584051c	 str         r0, [r4, #0x51C]

; 341  :         
; 342  :     //  Success
; 343  :     bResult = TRUE;

  001dc	e3a08001	 mov         r8, #1
  001e0		 |$cleanUp$38003|

; 346  :     //  Return result
; 347  :     return bResult;
; 348  : }

  001e0	e1a00008	 mov         r0, r8
  001e4	e28dd004	 add         sp, sp, #4
  001e8	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  001ec	e12fff1e	 bx          lr
  001f0		 |$LN29@InitContro|
  001f0		 |$LN30@InitContro|
  001f0	00000000	 DCD         |??_C@_1BI@GKABGADH@?$AAS?$AAM?$AAA?$AAR?$AAT?$AAR?$AAE?$AAF?$AAL?$AAE?$AAX?$AA?$AA@|
  001f4		 |$LN31@InitContro|
  001f4	00000000	 DCD         |??_C@_1IO@PPJICGNB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn@|
  001f8		 |$LN32@InitContro|
  001f8	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  001fc		 |$LN33@InitContro|
  001fc	00000000	 DCD         |??_C@_1KC@HIABDGPO@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00200		 |$LN34@InitContro|
  00200	00000000	 DCD         |??_C@_1HG@JFNBAFMN@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr@|
  00204		 |$M42322|

			 ENDP  ; |?InitController@OMAPDisplayController@@QAAHHHH@Z|, OMAPDisplayController::InitController

	EXPORT	|?InitLCD@OMAPDisplayController@@QAAHXZ| ; OMAPDisplayController::InitLCD
	EXPORT	|??_C@_1GI@BHICJPAJ@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAL?$AAC?$AAD?$AA?5?$AA?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@HAIPCPJH@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAL?$AAC?$AAD?$AA?5?$AA?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@HLOJBIIH@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@BALJCCCP@?$AAS?$AAP?$AAI?$AA1?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@EFKALDDE@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAL?$AAC?$AAD?$AA?5?$AA?9@| [ DATA ] ; `string'
	IMPORT	|SPIClose|
	IMPORT	|SPIWrite|
	IMPORT	|SPIConfigure|
	IMPORT	|SPIOpen|

  00000			 AREA	 |.pdata|, PDATA
|$T42353| DCD	|$LN20@InitLCD|
	DCD	0x40006602

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@BHICJPAJ@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAL?$AAC?$AAD?$AA?5?$AA?9@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "L", 0x0, "C", 0x0, "D", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "S", 0x0, "P", 0x0, "I", 0x0, "O"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "s", 0x0, "u"
	DCB	0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "!"
	DCB	0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@HAIPCPJH@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAL?$AAC?$AAD?$AA?5?$AA?9@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "L", 0x0, "C", 0x0, "D", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "S", 0x0, "P", 0x0, "I", 0x0, "O"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "s", 0x0, "u"
	DCB	0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "!"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@HLOJBIIH@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB@| DCB "!"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!"
	DCB	0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@BALJCCCP@?$AAS?$AAP?$AAI?$AA1?$AA?3?$AA?$AA@| DCB "S", 0x0, "P", 0x0
	DCB	"I", 0x0, "1", 0x0, ":", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@EFKALDDE@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAL?$AAC?$AAD?$AA?5?$AA?9@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "D", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "L", 0x0, "C", 0x0, "D", 0x0, " "
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InitLCD@OMAPDisplayController@@QAAHXZ| PROC ; OMAPDisplayController::InitLCD

; 352  : {

  00000		 |$LN20@InitLCD|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M42350|
  00008	e1a04000	 mov         r4, r0

; 353  :     BOOL    bResult;
; 354  : 
; 355  : 	RETAILMSG(1,(L"OMAPDisplayController::InitLCD ------------------\n\r"));

  0000c	e59f0180	 ldr         r0, [pc, #0x180]
  00010	eb000000	 bl          NKDbgPrintfW

; 356  :     //  Lock access to power level
; 357  :     EnterCriticalSection( &m_csPowerLock );

  00014	e2840e49	 add         r0, r4, #0x49, 28
  00018	eb000000	 bl          EnterCriticalSection

; 358  : 
; 359  :     //  Enable controller power
; 360  :     SetPowerLevel( D0 );

  0001c	e3a01000	 mov         r1, #0
  00020	e1a00004	 mov         r0, r4
  00024	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|

; 361  : 
; 362  :     //  Initialize the LCD by calling PDD
; 363  :     bResult = LcdPdd_LCD_Initialize(
; 364  :                     m_pDSSRegs,
; 365  :                     m_pDispRegs,
; 366  :                     m_pRFBIRegs,
; 367  :                     m_pVencRegs);

  00028	e594300c	 ldr         r3, [r4, #0xC]
  0002c	e5942018	 ldr         r2, [r4, #0x18]
  00030	e5941008	 ldr         r1, [r4, #8]
  00034	e5940004	 ldr         r0, [r4, #4]
  00038	eb000000	 bl          LcdPdd_LCD_Initialize

; 368  :     
; 369  :     //  Get LCD parameters
; 370  :     LcdPdd_LCD_GetMode(
; 371  :                     (DWORD*) &m_eLcdPixelFormat,
; 372  :                     &m_dwLcdWidth,
; 373  :                     &m_dwLcdHeight,
; 374  :                     &m_dwPixelClock
; 375  :                     );

  0003c	e2842b01	 add         r2, r4, #1, 22
  00040	e284eb01	 add         lr, r4, #1, 22
  00044	e2843b01	 add         r3, r4, #1, 22
  00048	e28210ac	 add         r1, r2, #0xAC
  0004c	e1a06000	 mov         r6, r0
  00050	e28e00a8	 add         r0, lr, #0xA8
  00054	e2842e4b	 add         r2, r4, #0x4B, 28
  00058	e28330b4	 add         r3, r3, #0xB4
  0005c	eb000000	 bl          LcdPdd_LCD_GetMode

; 376  : 
; 377  :     //  Set up gamma correction to support contrast control
; 378  :     SetContrastLevel( m_dwContrastLevel );

  00060	e59414d4	 ldr         r1, [r4, #0x4D4]
  00064	e1a00004	 mov         r0, r4
  00068	eb000000	 bl          |?SetContrastLevel@OMAPDisplayController@@QAAHK@Z|

; 379  :     
; 380  :     // Enable/Disable Gamma correction
; 381  :     if(m_bGammaEnable)

  0006c	e59434e0	 ldr         r3, [r4, #0x4E0]

; 382  :     {
; 383  :         SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_PALETTEGAMMATABLE );

  00070	e5942008	 ldr         r2, [r4, #8]

; 384  :         SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_LOADMODE(0) );
; 385  :     }
; 386  :     else
; 387  :     {
; 388  :         CLRREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_PALETTEGAMMATABLE );
; 389  :         SETREG32( &m_pDispRegs->DISPC_CONFIG, DISPC_CONFIG_LOADMODE(2) );
; 390  :     }
; 391  : 
; 392  :     // Load Gamma Table
; 393  :     OUTREG32( &m_pDispRegs->DISPC_GFX_TABLE_BA, m_dwGammaBufPhys);

  00074	e3a018ff	 mov         r1, #0xFF, 16
  00078	e3530000	 cmp         r3, #0
  0007c	e5923044	 ldr         r3, [r2, #0x44]

; 394  :     
; 395  : 
; 396  :     //  Set default global alpha values to be opaque
; 397  :     OUTREG32( &m_pDispRegs->DISPC_GLOBAL_ALPHA, DISPC_GLOBAL_ALPHA_GFX(0xFF)|DISPC_GLOBAL_ALPHA_VID2(0xFF) );
; 398  :     
; 399  :     // Could calculate actual period...
; 400  :     m_dwVsyncPeriod = 1000/60 + 2;//Add delta 2 ms since frameRate is not exactly 60fps
; 401  : 
; 402  :     // Initialize the DSI PLL
; 403  :     InitDsiPll();

  00080	e1a00004	 mov         r0, r4
  00084	13833008	 orrne       r3, r3, #8
  00088	15823044	 strne       r3, [r2, #0x44]
  0008c	15942008	 ldrne       r2, [r4, #8]
  00090	15923044	 ldrne       r3, [r2, #0x44]
  00094	03c33008	 biceq       r3, r3, #8
  00098	05823044	 streq       r3, [r2, #0x44]
  0009c	05942008	 ldreq       r2, [r4, #8]
  000a0	05923044	 ldreq       r3, [r2, #0x44]
  000a4	03833004	 orreq       r3, r3, #4
  000a8	e5823044	 str         r3, [r2, #0x44]
  000ac	e5942008	 ldr         r2, [r4, #8]
  000b0	e59434dc	 ldr         r3, [r4, #0x4DC]
  000b4	e58230b8	 str         r3, [r2, #0xB8]
  000b8	e5942008	 ldr         r2, [r4, #8]
  000bc	e38130ff	 orr         r3, r1, #0xFF
  000c0	e3a01012	 mov         r1, #0x12
  000c4	e5823074	 str         r3, [r2, #0x74]
  000c8	e5841500	 str         r1, [r4, #0x500]
  000cc	eb000000	 bl          |?InitDsiPll@OMAPDisplayController@@IAAHXZ|
  000d0	e3a03529	 mov         r3, #0x29, 10

; 404  : 
; 405  :     // Configure the DSI PLL with the FCLK value reqd
; 406  :     ConfigureDsiPll( OMAP_DSS_FCLKVALUE_NORMAL );

  000d4	e3831c83	 orr         r1, r3, #0x83, 24
  000d8	e1a00004	 mov         r0, r4
  000dc	eb000000	 bl          |?ConfigureDsiPll@OMAPDisplayController@@QAAHK@Z|

; 407  :     
; 408  :     //=================================================
; 409  :     HANDLE  hSPI = NULL;
; 410  :     DWORD  config;
; 411  :     short spiBuffer; // char=1,short=2,int=4
; 412  :     
; 413  :     RETAILMSG(1,(L"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\r"));

  000e0	e59f009c	 ldr         r0, [pc, #0x9C]
  000e4	eb000000	 bl          NKDbgPrintfW

; 414  :     hSPI = SPIOpen(L"SPI1:");

  000e8	e59f00a0	 ldr         r0, [pc, #0xA0]
  000ec	eb000000	 bl          SPIOpen
  000f0	e1b05000	 movs        r5, r0

; 415  :     if (hSPI != NULL) 

  000f4	0a00001a	 beq         |$LN2@InitLCD|

; 416  : 	{
; 417  :         RETAILMSG(1,(L"OMAPDisplayController::InitLCD - SPIOpen success!!!!\n\r"));

  000f8	e59f008c	 ldr         r0, [pc, #0x8C]
  000fc	eb000000	 bl          NKDbgPrintfW
  00100	e3a03b42	 mov         r3, #0x42, 22

; 418  :         // Configure SPI channel - \COMMON_TI_V1\COMMON_TI\INC\omap_mcspi_regs.h
; 419  :         config = MCSPI_PHA_EVEN_EDGES | MCSPI_POL_ACTIVELOW |  // mode 3
; 420  :                 MCSPI_CHCONF_CLKD(3) | 
; 421  :                 MCSPI_CHCONF_WL(16) |
; 422  :                 MCSPI_CHCONF_TRM_TXRX |
; 423  :                 MCSPI_CSPOLARITY_ACTIVELOW |
; 424  :                 MCSPI_CHCONF_DPE0;
; 425  :         if (SPIConfigure(hSPI, 0, config)) // channel 0, MCSPI_CHxCONF

  00104	e2432031	 sub         r2, r3, #0x31
  00108	e3a01000	 mov         r1, #0
  0010c	e1a00005	 mov         r0, r5
  00110	eb000000	 bl          SPIConfigure
  00114	e3500000	 cmp         r0, #0
  00118	0a00000f	 beq         |$LN1@InitLCD|

; 426  :         {
; 427  :         	RETAILMSG(1,(L"OMAPDisplayController::InitLCD - SPIOpen success!\n\r"));

  0011c	e59f0064	 ldr         r0, [pc, #0x64]
  00120	eb000000	 bl          NKDbgPrintfW
  00124	e3a03c3a	 mov         r3, #0x3A, 24

; 428  :         	spiBuffer = 0x3A6B;

  00128	e383306b	 orr         r3, r3, #0x6B

; 429  :         	SPIWrite(hSPI,sizeof(short),&spiBuffer);

  0012c	e28d2000	 add         r2, sp, #0
  00130	e3a01002	 mov         r1, #2
  00134	e1a00005	 mov         r0, r5
  00138	e1cd30b0	 strh        r3, [sp]
  0013c	eb000000	 bl          SPIWrite
  00140	e3a03c3e	 mov         r3, #0x3E, 24

; 430  :         	spiBuffer = 0x3E24;

  00144	e3833024	 orr         r3, r3, #0x24

; 431  :         	SPIWrite(hSPI,sizeof(short),&spiBuffer);

  00148	e28d2000	 add         r2, sp, #0
  0014c	e3a01002	 mov         r1, #2
  00150	e1a00005	 mov         r0, r5
  00154	e1cd30b0	 strh        r3, [sp]
  00158	eb000000	 bl          SPIWrite
  0015c		 |$LN1@InitLCD|

; 432  :     	}
; 433  :         SPIClose(hSPI);

  0015c	e1a00005	 mov         r0, r5
  00160	eb000000	 bl          SPIClose
  00164		 |$LN2@InitLCD|

; 434  : 	}
; 435  : 	RETAILMSG(1,(L"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\r"));

  00164	e59f0018	 ldr         r0, [pc, #0x18]
  00168	eb000000	 bl          NKDbgPrintfW

; 436  :     //=================================================
; 437  :     
; 438  :     //  Unlock access to power level
; 439  :     LeaveCriticalSection( &m_csPowerLock );

  0016c	e2840e49	 add         r0, r4, #0x49, 28
  00170	eb000000	 bl          LeaveCriticalSection

; 440  : 
; 441  :     //  Return result
; 442  :     return bResult;
; 443  : }

  00174	e1a00006	 mov         r0, r6
  00178	e28dd004	 add         sp, sp, #4
  0017c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00180	e12fff1e	 bx          lr
  00184		 |$LN21@InitLCD|
  00184		 |$LN22@InitLCD|
  00184	00000000	 DCD         |??_C@_1HE@HLOJBIIH@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB@|
  00188		 |$LN23@InitLCD|
  00188	00000000	 DCD         |??_C@_1GI@BHICJPAJ@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAL?$AAC?$AAD?$AA?5?$AA?9@|
  0018c		 |$LN24@InitLCD|
  0018c	00000000	 DCD         |??_C@_1GO@HAIPCPJH@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAL?$AAC?$AAD?$AA?5?$AA?9@|
  00190		 |$LN25@InitLCD|
  00190	00000000	 DCD         |??_C@_1M@BALJCCCP@?$AAS?$AAP?$AAI?$AA1?$AA?3?$AA?$AA@|
  00194		 |$LN26@InitLCD|
  00194	00000000	 DCD         |??_C@_1GI@EFKALDDE@?$AAO?$AAM?$AAA?$AAP?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAL?$AAC?$AAD?$AA?5?$AA?9@|
  00198		 |$M42351|

			 ENDP  ; |?InitLCD@OMAPDisplayController@@QAAHXZ|, OMAPDisplayController::InitLCD

	EXPORT	|?DssProcessInterrupt@OMAPDisplayController@@QAAXXZ| ; OMAPDisplayController::DssProcessInterrupt

  00000			 AREA	 |.pdata|, PDATA
|$T42400| DCD	|$LN46@DssProcess|
	DCD	0x40008e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DssProcessInterrupt@OMAPDisplayController@@QAAXXZ| PROC ; OMAPDisplayController::DssProcessInterrupt

; 610  : {

  00000		 |$LN46@DssProcess|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M42397|
  00004	e1a04000	 mov         r4, r0

; 611  :     DWORD irqStatus = 0;
; 612  :     DWORD dwTimeout = DISPLAY_TIMEOUT;
; 613  :     OMAP_DSS_PIPELINE pipelineID = OMAP_DSS_PIPELINE_GFX;
; 614  :     BOOL  lcdVsync = FALSE;
; 615  :     //Alwasy set to true, in case tv-out is disabled.
; 616  :     BOOL  tvVsync = TRUE;
; 617  :     DWORD irqEnableMask = 0;
; 618  : 
; 619  :     // Access the regs
; 620  :     if( AccessRegs() == FALSE )

  00008	e3a0601e	 mov         r6, #0x1E
  0000c	e3a07001	 mov         r7, #1
  00010	eb000000	 bl          |?AccessRegs@OMAPDisplayController@@IAAHXZ|
  00014	e3500000	 cmp         r0, #0
  00018	0a000081	 beq         |$cleanUp$38147|

; 621  :     {
; 622  :         // failure will cause lockup because the interrupt will still be pending...
; 623  :         DEBUGMSG(ZONE_ERROR,(L"AccessRegs failed in DssProcessInterrupt\r\n"));
; 624  :         ASSERT(0);
; 625  :         goto cleanUp;
; 626  :     }
; 627  :     irqEnableMask = INREG32(&m_pDispRegs->DISPC_IRQENABLE);

  0001c	e5940008	 ldr         r0, [r4, #8]

; 628  :     irqStatus = (INREG32(&m_pDispRegs->DISPC_IRQSTATUS) & irqEnableMask);
; 629  :     /* Check if we should worry about Vsync or not */
; 630  :     m_lastVsyncIRQStatus &= irqEnableMask;

  00020	e5942540	 ldr         r2, [r4, #0x540]
  00024	e590101c	 ldr         r1, [r0, #0x1C]
  00028	e5903018	 ldr         r3, [r0, #0x18]
  0002c	e0022001	 and         r2, r2, r1
  00030	e0035001	 and         r5, r3, r1

; 631  :     
; 632  :     //  Enabling Interrupt for SYNCLOSTDIGITAL causes tvout to not recover 
; 633  :     //  from a suspend/resume cycle. Hence disabled. SYNCLOSTDIGITAL is not
; 634  :     //  causing any issue with functionality of tvout.
; 635  :     
; 636  : /*    if (irqStatus & (DISPC_IRQSTATUS_SYNCLOST|
; 637  :                      DISPC_IRQSTATUS_SYNCLOSTDIGITAL))*/
; 638  :     if (irqStatus & (DISPC_IRQSTATUS_SYNCLOST))                         

  00034	e3150901	 tst         r5, #1, 18
  00038	e5842540	 str         r2, [r4, #0x540]
  0003c	0a00004e	 beq         |$LN19@DssProcess|

; 639  :     {
; 640  :         DEBUGMSG(ZONE_ERROR,(L"SYNCLOST DSSIRQ:%x\r\n",irqStatus));
; 641  : 
; 642  :         // SYNCLOST recovery process
; 643  : 
; 644  :         // clear existing Frame done interrupt
; 645  :         OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS,DISPC_IRQSTATUS_FRAMEDONE );

  00040	e3a03001	 mov         r3, #1
  00044	e5803018	 str         r3, [r0, #0x18]

; 646  : 
; 647  :         // disable scanning
; 648  :         CLRREG32( &m_pDispRegs->DISPC_CONTROL,
; 649  :                   DISPC_CONTROL_DIGITALENABLE |
; 650  :                   DISPC_CONTROL_LCDENABLE
; 651  :                   );

  00048	e5942008	 ldr         r2, [r4, #8]
  0004c	e5923040	 ldr         r3, [r2, #0x40]
  00050	e3c33003	 bic         r3, r3, #3
  00054	e5823040	 str         r3, [r2, #0x40]

; 652  : 
; 653  :         // Wait for the frame done
; 654  :         while (((INREG32(&m_pDispRegs->DISPC_IRQSTATUS) &
; 655  :                  DISPC_IRQSTATUS_FRAMEDONE) == 0) &&
; 656  :                  (dwTimeout-- > 0)
; 657  :                  )

  00058	ea000004	 b           |$LN42@DssProcess|
  0005c		 |$LL18@DssProcess|
  0005c	e3560000	 cmp         r6, #0
  00060	e2466001	 sub         r6, r6, #1
  00064	0a000005	 beq         |$LN40@DssProcess|

; 658  :         {
; 659  :             Sleep(1);

  00068	e3a00001	 mov         r0, #1
  0006c	eb000000	 bl          Sleep
  00070		 |$LN42@DssProcess|
  00070	e5943008	 ldr         r3, [r4, #8]
  00074	e5933018	 ldr         r3, [r3, #0x18]
  00078	e3130001	 tst         r3, #1
  0007c	0afffff6	 beq         |$LL18@DssProcess|
  00080		 |$LN40@DssProcess|

; 660  :         }
; 661  : 
; 662  :         //  Clear all DSS interrupts
; 663  :         OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, 0xFFFFFFFF );

  00080	e5943008	 ldr         r3, [r4, #8]
  00084	e3e06000	 mvn         r6, #0

; 664  : 
; 665  :         // Set the power level to D4(OFF)
; 666  :         SetPowerLevel(D4);

  00088	e3a01004	 mov         r1, #4
  0008c	e1a00004	 mov         r0, r4
  00090	e5836018	 str         r6, [r3, #0x18]
  00094	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|

; 667  : 
; 668  :         // Issue a reset cmd to DSS to recover from failure
; 669  :         ResetDSS();

  00098	e1a00004	 mov         r0, r4
  0009c	eb000000	 bl          |?ResetDSS@OMAPDisplayController@@IAAHXZ|

; 670  : 
; 671  :         //  Enable controller power
; 672  :         SetPowerLevel( D0 );

  000a0	e3a01000	 mov         r1, #0
  000a4	e1a00004	 mov         r0, r4
  000a8	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|

; 673  : 
; 674  :         // Initialize the LCD panel related parameters
; 675  :         InitLCD();

  000ac	e1a00004	 mov         r0, r4
  000b0	eb000000	 bl          |?InitLCD@OMAPDisplayController@@QAAHXZ|

; 676  : 
; 677  :         // Clear all the interrupts status
; 678  :         OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, 0xFFFFFFFF );

  000b4	e5943008	 ldr         r3, [r4, #8]

; 679  : 
; 680  :         // Could change to reset the pipeline status to inactive state...
; 681  :         if (g_dwDestinationRefCnt[OMAP_DSS_DESTINATION_LCD] > 0)

  000b8	e59f5174	 ldr         r5, [pc, #0x174]
  000bc	e5836018	 str         r6, [r3, #0x18]
  000c0	e5953060	 ldr         r3, [r5, #0x60]
  000c4	e3530000	 cmp         r3, #0

; 682  :         {
; 683  :             RestoreRegisters(OMAP_DSS_DESTINATION_LCD);

  000c8	13a01000	 movne       r1, #0
  000cc	11a00004	 movne       r0, r4
  000d0	1b000000	 blne        |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 684  :         }
; 685  : 
; 686  :         if (m_bTVEnable)

  000d4	e59434b8	 ldr         r3, [r4, #0x4B8]
  000d8	e3530000	 cmp         r3, #0

; 687  :         {
; 688  :             RestoreRegisters(OMAP_DSS_DESTINATION_TVOUT);

  000dc	13a01001	 movne       r1, #1
  000e0	11a00004	 movne       r0, r4
  000e4	1b000000	 blne        |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 689  :         }
; 690  : 
; 691  :         //  Clear refcounts on pipelines
; 692  :         g_dwDestinationRefCnt[OMAP_DSS_DESTINATION_LCD] = 0;
; 693  :         g_dwDestinationRefCnt[OMAP_DSS_DESTINATION_TVOUT] = 0;
; 694  :         
; 695  :         //EnablePipeline function to turn the active pipelines
; 696  :         if ((g_rgPipelineMapping[OMAP_DSS_PIPELINE_GFX].bEnabled)||
; 697  :             (g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO1].bEnabled) ||
; 698  :             (g_rgPipelineMapping[OMAP_DSS_PIPELINE_VIDEO2].bEnabled)
; 699  :             )

  000e8	e5953000	 ldr         r3, [r5]
  000ec	e3a02000	 mov         r2, #0
  000f0	e3a01000	 mov         r1, #0
  000f4	e5852060	 str         r2, [r5, #0x60]
  000f8	e3530000	 cmp         r3, #0
  000fc	e5851064	 str         r1, [r5, #0x64]
  00100	1a000005	 bne         |$LN13@DssProcess|
  00104	e5953020	 ldr         r3, [r5, #0x20]
  00108	e3530000	 cmp         r3, #0
  0010c	1a000002	 bne         |$LN13@DssProcess|
  00110	e5953040	 ldr         r3, [r5, #0x40]
  00114	e3530000	 cmp         r3, #0
  00118	0a000041	 beq         |$cleanUp$38147|
  0011c		 |$LN13@DssProcess|

; 700  :         {
; 701  : 
; 702  :             for ( DWORD i = 0;

  0011c	e3a06000	 mov         r6, #0
  00120	e3a07000	 mov         r7, #0
  00124		 |$LL12@DssProcess|

; 703  :                   i < OMAP_DSS_PIPELINE_MAX;
; 704  :                   i++)
; 705  :             {
; 706  :                 pipelineID = (OMAP_DSS_PIPELINE)i;
; 707  :                 if (g_rgPipelineMapping[pipelineID].bEnabled == TRUE)

  00124	e5953000	 ldr         r3, [r5]
  00128	e3530001	 cmp         r3, #1

; 708  :                     {
; 709  :                     g_rgPipelineMapping[pipelineID].bEnabled = FALSE;
; 710  :                     EnablePipeline(pipelineID);

  0012c	01a01006	 moveq       r1, r6
  00130	01a00004	 moveq       r0, r4
  00134	05857000	 streq       r7, [r5]
  00138	0b000000	 bleq        |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  0013c	e2866001	 add         r6, r6, #1
  00140	e3560003	 cmp         r6, #3
  00144	e2855020	 add         r5, r5, #0x20
  00148	3afffff5	 bcc         |$LL12@DssProcess|

; 711  :                     }
; 712  :             }
; 713  : 
; 714  :             // Enable the LCD control bit
; 715  :             SETREG32( &m_pDispRegs->DISPC_CONTROL,
; 716  :                        DISPC_CONTROL_LCDENABLE );

  0014c	e5942008	 ldr         r2, [r4, #8]
  00150	e5923040	 ldr         r3, [r2, #0x40]
  00154	e3833001	 orr         r3, r3, #1
  00158	e5823040	 str         r3, [r2, #0x40]

; 717  : 
; 718  :             // Enable the TVOut control bit
; 719  :             if (m_bTVEnable)

  0015c	e59434b8	 ldr         r3, [r4, #0x4B8]
  00160	e3530000	 cmp         r3, #0
  00164	0a00002e	 beq         |$cleanUp$38147|

; 720  :             {
; 721  :                 SETREG32( &m_pDispRegs->DISPC_CONTROL,
; 722  :                            DISPC_CONTROL_DIGITALENABLE);

  00168	e5942008	 ldr         r2, [r4, #8]
  0016c	e5923040	 ldr         r3, [r2, #0x40]
  00170	e3833002	 orr         r3, r3, #2
  00174	e5823040	 str         r3, [r2, #0x40]

; 790  : 
; 791  : cleanUp:

  00178	ea000029	 b           |$cleanUp$38147|
  0017c		 |$LN19@DssProcess|

; 723  :             }
; 724  : 
; 725  :         }
; 726  : 
; 727  :         goto cleanUp;
; 728  :     }
; 729  : 
; 730  :     if (irqStatus & (DISPC_IRQSTATUS_GFXFIFOUNDERFLOW  |
; 731  :                      DISPC_IRQSTATUS_VID1FIFOUNDERFLOW |
; 732  :                      DISPC_IRQSTATUS_VID2FIFOUNDERFLOW
; 733  :                      ))
; 734  :     {
; 735  :          DEBUGMSG(ZONE_ERROR,(L"DSS pipeline underflow error.Intrstatus:%x\r\n",irqStatus));
; 736  :     }
; 737  : 
; 738  :     //Vsync event has to be asserted when both LCD and TV have actually vsync'ed (if tv-out is enabled).
; 739  :     //There's 3 scenarios:
; 740  :     //1. LCD v-sync occurs before TV v-sync.
; 741  :     //2. TV-out v-sync occurs before LCD v-sync. 
; 742  :     //3. Both occurred
; 743  :     //For case 3 then the check below will signal the v-sync event
; 744  :     //For case 1, the status bit's are saved. The next interrupt 
; 745  :     //occuring due to tv-out (or lcd for case 2) will happen and the check below will signal the vsync event.
; 746  :     //
; 747  :     //If tv-out is disabled, since tvVysnc is always true, then only the state of lcdVsync matters.
; 748  : 
; 749  :     
; 750  :     lcdVsync = ((irqStatus & DISPC_IRQSTATUS_VSYNC) == DISPC_IRQSTATUS_VSYNC) ||
; 751  :                    ((m_lastVsyncIRQStatus & DISPC_IRQSTATUS_VSYNC) == DISPC_IRQSTATUS_VSYNC);

  0017c	e2053002	 and         r3, r5, #2
  00180	e3530002	 cmp         r3, #2
  00184	12023002	 andne       r3, r2, #2
  00188	13530002	 cmpne       r3, #2

; 752  :        
; 753  :     if(m_bTVEnable == TRUE)

  0018c	e59434b8	 ldr         r3, [r4, #0x4B8]
  00190	13a01000	 movne       r1, #0
  00194	03a01001	 moveq       r1, #1
  00198	e3530001	 cmp         r3, #1
  0019c	1a00000c	 bne         |$LN27@DssProcess|

; 754  :     {
; 755  :        tvVsync = ((irqStatus & DISPC_IRQSTATUS_EVSYNC_EVEN) == DISPC_IRQSTATUS_EVSYNC_EVEN) ||
; 756  :                  ((irqStatus & DISPC_IRQSTATUS_EVSYNC_ODD) == DISPC_IRQSTATUS_EVSYNC_ODD) ||
; 757  :                  ((m_lastVsyncIRQStatus & DISPC_IRQSTATUS_EVSYNC_EVEN) == DISPC_IRQSTATUS_EVSYNC_EVEN) ||
; 758  :                  ((m_lastVsyncIRQStatus & DISPC_IRQSTATUS_EVSYNC_ODD) == DISPC_IRQSTATUS_EVSYNC_ODD);

  001a0	e2053004	 and         r3, r5, #4
  001a4	e3530004	 cmp         r3, #4
  001a8	0a000008	 beq         |$LN26@DssProcess|
  001ac	e2053008	 and         r3, r5, #8
  001b0	e3530008	 cmp         r3, #8
  001b4	0a000005	 beq         |$LN26@DssProcess|
  001b8	e2023004	 and         r3, r2, #4
  001bc	e3530004	 cmp         r3, #4
  001c0	12023008	 andne       r3, r2, #8
  001c4	13530008	 cmpne       r3, #8
  001c8	13a07000	 movne       r7, #0
  001cc	1a000000	 bne         |$LN27@DssProcess|
  001d0		 |$LN26@DssProcess|
  001d0	e3a07001	 mov         r7, #1
  001d4		 |$LN27@DssProcess|

; 759  :          
; 760  :     }
; 761  : 
; 762  :     if(lcdVsync && tvVsync) 

  001d4	e3510000	 cmp         r1, #0
  001d8	0a000009	 beq         |$LN4@DssProcess|
  001dc	e3570000	 cmp         r7, #0
  001e0	0a000007	 beq         |$LN4@DssProcess|

; 763  :     {        
; 764  :         SetEvent(m_hVsyncEvent);

  001e4	e59404f8	 ldr         r0, [r4, #0x4F8]
  001e8	e3a01003	 mov         r1, #3
  001ec	eb000000	 bl          EventModify

; 765  :         SetEvent(m_hVsyncEventSGX);    

  001f0	e59404fc	 ldr         r0, [r4, #0x4FC]
  001f4	e3a01003	 mov         r1, #3
  001f8	eb000000	 bl          EventModify

; 766  :         m_lastVsyncIRQStatus = 0;

  001fc	e3a03000	 mov         r3, #0

; 767  :     }
; 768  :     else

  00200	ea000000	 b           |$LN43@DssProcess|
  00204		 |$LN4@DssProcess|

; 769  :     {
; 770  :        //Save the status of the Vsync IRQ's if we didn't signal the Vsync event.         
; 771  :        // Note that if the interrupt status is not cleared we will be right back...        
; 772  :        m_lastVsyncIRQStatus = irqStatus & (DISPC_IRQENABLE_EVSYNC_EVEN|DISPC_IRQSTATUS_EVSYNC_ODD|DISPC_IRQSTATUS_VSYNC);

  00204	e205300e	 and         r3, r5, #0xE
  00208		 |$LN43@DssProcess|

; 773  :     }
; 774  :     
; 775  : 
; 776  :     if(irqStatus & DISPC_IRQSTATUS_PROGRAMMEDLINENUMBER)

  00208	e3150020	 tst         r5, #0x20

; 777  :     {
; 778  :         SetEvent(m_hScanLineEvent);

  0020c	15940508	 ldrne       r0, [r4, #0x508]
  00210	13a01003	 movne       r1, #3
  00214	e5843540	 str         r3, [r4, #0x540]
  00218	1b000000	 blne        EventModify

; 779  :     }
; 780  : 
; 781  :     if (irqStatus & DISPC_IRQSTATUS_OCPERROR)
; 782  :     {
; 783  :         DEBUGMSG(ZONE_ERROR,(L"OCP_ERROR FATAL!!\r\n"));
; 784  :     }
; 785  : 
; 786  :     // Clear all interrupts
; 787  :     // Note that SETREG32 does read, OR of argument and write, the IRQSTATUS is write '1' to clear,
; 788  :     // this will clear all interrupt bits, not just the ones in the argument.
; 789  :     OUTREG32( &m_pDispRegs->DISPC_IRQSTATUS, irqStatus);

  0021c	e5943008	 ldr         r3, [r4, #8]
  00220	e5835018	 str         r5, [r3, #0x18]
  00224		 |$cleanUp$38147|

; 792  : 
; 793  :     ReleaseRegs();

  00224	e2840e49	 add         r0, r4, #0x49, 28
  00228	eb000000	 bl          LeaveCriticalSection

; 794  : }

  0022c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00230	e12fff1e	 bx          lr
  00234		 |$LN47@DssProcess|
  00234		 |$LN48@DssProcess|
  00234	00000000	 DCD         |?g_rgPipelineMapping@@3PAUOMAPPipelineConfig@@A|
  00238		 |$M42398|

			 ENDP  ; |?DssProcessInterrupt@OMAPDisplayController@@QAAXXZ|, OMAPDisplayController::DssProcessInterrupt

	EXPORT	|?DssInterruptHandler@OMAPDisplayController@@SAKPAX@Z| ; OMAPDisplayController::DssInterruptHandler
	IMPORT	|InterruptDone|
	IMPORT	|__C_specific_handler|

  00000			 AREA	 |.pdata|, PDATA
|$T42428| DCD	|$LN21@DssInterru|
	DCD	0xc0001d04

  00000			 AREA	 |.pdata|, PDATA
|$T42430| DCD	|$LN8@DssInterru|
	DCD	0x40000301

  00000			 AREA	 |.xdata|, DATA
|$T42426| DCD	0x1
	DCD	|$LN12@DssInterru|
	DCD	|$LN13@DssInterru|
	DCD	|$LN8@DssInterru|
	DCD	|$LN9@DssInterru|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T42426|

  00008		 |?DssInterruptHandler@OMAPDisplayController@@SAKPAX@Z| PROC ; OMAPDisplayController::DssInterruptHandler

; 583  : {

  00008		 |$LN21@DssInterru|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5830	 stmdb       sp!, {r4, r5, r11, r12, lr}
  00010	e28db014	 add         r11, sp, #0x14
  00014	e24dd008	 sub         sp, sp, #8
  00018		 |$LN19@DssInterru|
  00018	e1a04000	 mov         r4, r0

; 584  :     OMAPDisplayController *pController = (OMAPDisplayController *)pData;
; 585  :     DWORD sysIntr = pController->m_dwDssSysIntr;

  0001c	e59454f0	 ldr         r5, [r4, #0x4F0]
  00020	e50b401c	 str         r4, [r11, #-0x1C]
  00024	e50b5018	 str         r5, [r11, #-0x18]
  00028		 |$LL4@DssInterru|
  00028		 |$LN12@DssInterru|

; 586  :     for(;;)
; 587  :     {
; 588  :         __try
; 589  :         {
; 590  :             // wait for interrupt
; 591  :             WaitForSingleObject(pController->m_hDssIntEvent, INFINITE);

  00028	e59404e8	 ldr         r0, [r4, #0x4E8]
  0002c	e3e01000	 mvn         r1, #0
  00030	eb000000	 bl          WaitForSingleObject

; 592  :             if (pController->m_bDssIntThreadExit == TRUE) break;

  00034	e59434f4	 ldr         r3, [r4, #0x4F4]
  00038	e3530001	 cmp         r3, #1
  0003c	1a000000	 bne         |$LN1@DssInterru|
  00040	ea000007	 b           |$LN3@DssInterru|
  00044		 |$LN1@DssInterru|

; 593  : 
; 594  :             // process interrupt
; 595  :             pController->DssProcessInterrupt();

  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          |?DssProcessInterrupt@OMAPDisplayController@@QAAXXZ|
  0004c		 |$LN13@DssInterru|

; 596  :         }

  0004c	ea000001	 b           |$LN14@DssInterru|
  00050		 |$LN9@DssInterru|

; 597  :         __except (EXCEPTION_EXECUTE_HANDLER)

  00050	e51b401c	 ldr         r4, [r11, #-0x1C]
  00054	e51b5018	 ldr         r5, [r11, #-0x18]
  00058		 |$LN14@DssInterru|

; 598  :         {
; 599  :             DEBUGMSG(ZONE_ERROR,
; 600  :                 (TEXT("%S: exception in interrupt handler!\r\n"), __FUNCTION__));
; 601  :         }
; 602  :         // reset for next interrupt
; 603  :         ::InterruptDone(sysIntr);

  00058	e1a00005	 mov         r0, r5
  0005c	eb000000	 bl          InterruptDone

; 604  :     }

  00060	eafffff0	 b           |$LL4@DssInterru|
  00064		 |$LN3@DssInterru|

; 605  :     return 1;

  00064	e3a00001	 mov         r0, #1
  00068	ea000000	 b           |$LN5@DssInterru|
  0006c		 |$LN18@DssInterru|
  0006c	e51b0018	 ldr         r0, [r11, #-0x18]
  00070		 |$LN5@DssInterru|

; 606  : }

  00070	e24bd014	 sub         sp, r11, #0x14
  00074	e89d6830	 ldmia       sp, {r4, r5, r11, sp, lr}
  00078	e12fff1e	 bx          lr

			 ENDP  ; |?DssInterruptHandler@OMAPDisplayController@@SAKPAX@Z|, OMAPDisplayController::DssInterruptHandler

  0007c		 |$LN8@DssInterru|
  0007c		 |$LN20@DssInterru|

; 597  :         __except (EXCEPTION_EXECUTE_HANDLER)

  0007c	e52de004	 str         lr, [sp, #-4]!
  00080		 |$LN11@DssInterru|
  00080		 |$LN23@DssInterru|
  00080	e3a00001	 mov         r0, #1
  00084		 |$LN10@DssInterru|
  00084	e49df004	 ldr         pc, [sp], #4
  00088		 |$LN24@DssInterru|
  00088		 |$LN22@DssInterru|
	EXPORT	|?InitInterrupts@OMAPDisplayController@@QAAHKK@Z| ; OMAPDisplayController::InitInterrupts
	EXPORT	|??_C@_1CE@FJEPCB@?$AAD?$AAS?$AAS?$AAA?$AAI?$AA_?$AAV?$AAS?$AAY?$AAN?$AAC?$AA_?$AAE?$AAV?$AAE?$AAN?$AAT?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|InterruptInitialize|
	IMPORT	|CreateEventW|

  00000			 AREA	 |.pdata|, PDATA
|$T42447| DCD	|$LN21@InitInterr|
	DCD	0x40004f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FJEPCB@?$AAD?$AAS?$AAS?$AAA?$AAI?$AA_?$AAV?$AAS?$AAY?$AAN?$AAC?$AA_?$AAE?$AAV?$AAE?$AAN?$AAT?$AA?$AA@| DCB "D"
	DCB	0x0, "S", 0x0, "S", 0x0, "A", 0x0, "I", 0x0, "_", 0x0, "V"
	DCB	0x0, "S", 0x0, "Y", 0x0, "N", 0x0, "C", 0x0, "_", 0x0, "E"
	DCB	0x0, "V", 0x0, "E", 0x0, "N", 0x0, "T", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InitInterrupts@OMAPDisplayController@@QAAHKK@Z| PROC ; OMAPDisplayController::InitInterrupts

; 447  : {

  00000		 |$LN21@InitInterr|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d50f0	 stmdb       sp!, {r4 - r7, r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M42444|
  00010	e1a06002	 mov         r6, r2
  00014	e1a04000	 mov         r4, r0

; 448  :     BOOL rc = FALSE;
; 449  : 
; 450  :     // get system interrupt for irq
; 451  :     if (!KernelIoControl(IOCTL_HAL_REQUEST_SYSINTR, &irq,
; 452  :         sizeof(irq), &m_dwDssSysIntr, sizeof(m_dwDssSysIntr),
; 453  :         NULL))

  00018	e59f0118	 ldr         r0, [pc, #0x118]
  0001c	e3a0e004	 mov         lr, #4
  00020	e3a07000	 mov         r7, #0
  00024	e2843e4f	 add         r3, r4, #0x4F, 28
  00028	e3a02004	 mov         r2, #4
  0002c	e28d1024	 add         r1, sp, #0x24
  00030	e3a05000	 mov         r5, #0
  00034	e58d7004	 str         r7, [sp, #4]
  00038	e58de000	 str         lr, [sp]
  0003c	eb000000	 bl          KernelIoControl
  00040	e3500000	 cmp         r0, #0
  00044	0a000033	 beq         |$LN18@InitInterr|

; 454  :     {
; 455  :         DEBUGMSG(ZONE_ERROR,
; 456  :             (TEXT("%S: ERROR: Failed map DSS interrupt(irq=%d)\r\n"), __FUNCTION__,irq));
; 457  :         goto cleanUp;
; 458  :     }
; 459  : 
; 460  :     // create thread event handle
; 461  :     m_hDssIntEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00048	e3a03000	 mov         r3, #0
  0004c	e3a02000	 mov         r2, #0
  00050	e3a01000	 mov         r1, #0
  00054	e3a00000	 mov         r0, #0
  00058	eb000000	 bl          CreateEventW
  0005c	e1b01000	 movs        r1, r0
  00060	e58414e8	 str         r1, [r4, #0x4E8]

; 462  :     if (m_hDssIntEvent == NULL)

  00064	0a00002b	 beq         |$LN18@InitInterr|

; 463  :     {
; 464  :         DEBUGMSG(ZONE_ERROR,
; 465  :             (TEXT("%S: ERROR: Failed to create Interrupt event object!\r\n"), __FUNCTION__));
; 466  :         goto cleanUp;
; 467  :     }
; 468  : 
; 469  :     // register event handle with system interrupt
; 470  :     if (!InterruptInitialize(m_dwDssSysIntr, m_hDssIntEvent, NULL, 0))

  00068	e59404f0	 ldr         r0, [r4, #0x4F0]
  0006c	e3a03000	 mov         r3, #0
  00070	e3a02000	 mov         r2, #0
  00074	eb000000	 bl          InterruptInitialize
  00078	e3500000	 cmp         r0, #0
  0007c	0a000025	 beq         |$LN18@InitInterr|

; 471  :     {
; 472  :         DEBUGMSG(ZONE_ERROR,
; 473  :             (TEXT("%S: ERROR: Failed to initialize system interrupt!\r\n"), __FUNCTION__));
; 474  :         goto cleanUp;
; 475  :     }
; 476  : 
; 477  :     //Create specific interrupt events
; 478  :     m_hVsyncEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00080	e3a03000	 mov         r3, #0
  00084	e3a02000	 mov         r2, #0
  00088	e3a01000	 mov         r1, #0
  0008c	e3a00000	 mov         r0, #0
  00090	eb000000	 bl          CreateEventW
  00094	e3500000	 cmp         r0, #0
  00098	e58404f8	 str         r0, [r4, #0x4F8]

; 479  :     if (m_hVsyncEvent == NULL)

  0009c	0a00001d	 beq         |$LN18@InitInterr|

; 480  :     {
; 481  :         DEBUGMSG(ZONE_ERROR,
; 482  :             (TEXT("%S: ERROR: Failed to create Vsync interrupt event object!\r\n"), __FUNCTION__));
; 483  :         goto cleanUp;
; 484  :     }
; 485  : 
; 486  :     //Create specific interrupt events
; 487  :     m_hVsyncEventSGX = CreateEvent(NULL, FALSE, FALSE, VSYNC_EVENT_NAME);

  000a0	e59f308c	 ldr         r3, [pc, #0x8C]
  000a4	e3a02000	 mov         r2, #0
  000a8	e3a01000	 mov         r1, #0
  000ac	e3a00000	 mov         r0, #0
  000b0	eb000000	 bl          CreateEventW
  000b4	e3500000	 cmp         r0, #0
  000b8	e58404fc	 str         r0, [r4, #0x4FC]

; 488  :     if (m_hVsyncEventSGX == NULL)

  000bc	0a000015	 beq         |$LN18@InitInterr|

; 489  :     {
; 490  :         DEBUGMSG(ZONE_ERROR,
; 491  :             (TEXT("%S: ERROR: Failed to create Vsync interrupt event object for SGX!\r\n"), __FUNCTION__));
; 492  :         goto cleanUp;
; 493  :     }
; 494  : 
; 495  :     //Create specific interrupt events
; 496  :     m_hScanLineEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  000c0	e3a03000	 mov         r3, #0
  000c4	e3a02000	 mov         r2, #0
  000c8	e3a01000	 mov         r1, #0
  000cc	e3a00000	 mov         r0, #0
  000d0	eb000000	 bl          CreateEventW
  000d4	e3500000	 cmp         r0, #0
  000d8	e5840508	 str         r0, [r4, #0x508]

; 497  :     if (m_hScanLineEvent == NULL)

  000dc	0a00000d	 beq         |$LN18@InitInterr|

; 498  :     {
; 499  :         DEBUGMSG(ZONE_ERROR,
; 500  :             (TEXT("%S: ERROR: Failed to create ScanLine interrupt event object!\r\n"), __FUNCTION__));
; 501  :         goto cleanUp;
; 502  :     }
; 503  : 
; 504  :     // spawn thread
; 505  :     m_hDssIntThread = CreateThread(NULL, 0, DssInterruptHandler, this, 0, NULL);

  000e0	e59f2048	 ldr         r2, [pc, #0x48]
  000e4	e1a03004	 mov         r3, r4
  000e8	e3a01000	 mov         r1, #0
  000ec	e3a00000	 mov         r0, #0
  000f0	e58d7004	 str         r7, [sp, #4]
  000f4	e58d7000	 str         r7, [sp]
  000f8	eb000000	 bl          CreateThread
  000fc	e3500000	 cmp         r0, #0
  00100	e58404ec	 str         r0, [r4, #0x4EC]

; 506  :     if (!m_hDssIntThread)

  00104	0a000003	 beq         |$LN18@InitInterr|

; 507  :     {
; 508  :         DEBUGMSG(ZONE_ERROR,
; 509  :             (TEXT("%S: Failed to create interrupt thread\r\n"), __FUNCTION__));
; 510  :         goto cleanUp;
; 511  :     }
; 512  : 
; 513  :     // set thread priority
; 514  :     CeSetThreadPriority(m_hDssIntThread, istPriority);

  00108	e1a01006	 mov         r1, r6
  0010c	eb000000	 bl          CeSetThreadPriority

; 515  : 
; 516  :     rc = TRUE;

  00110	e3a05001	 mov         r5, #1
  00114		 |$cleanUp$38093|

; 517  : 
; 518  : cleanUp:
; 519  :     if (rc == FALSE) UninitInterrupts();

  00114	ea000001	 b           |$LN1@InitInterr|
  00118		 |$LN18@InitInterr|
  00118	e1a00004	 mov         r0, r4
  0011c	eb000000	 bl          |?UninitInterrupts@OMAPDisplayController@@QAAXXZ|
  00120		 |$LN1@InitInterr|

; 520  :     return rc;
; 521  : }

  00120	e1a00005	 mov         r0, r5
  00124	e28dd008	 add         sp, sp, #8
  00128	e89d60f0	 ldmia       sp, {r4 - r7, sp, lr}
  0012c	e12fff1e	 bx          lr
  00130		 |$LN22@InitInterr|
  00130		 |$LN23@InitInterr|
  00130	00000000	 DCD         |?DssInterruptHandler@OMAPDisplayController@@SAKPAX@Z|
  00134		 |$LN24@InitInterr|
  00134	00000000	 DCD         |??_C@_1CE@FJEPCB@?$AAD?$AAS?$AAS?$AAA?$AAI?$AA_?$AAV?$AAS?$AAY?$AAN?$AAC?$AA_?$AAE?$AAV?$AAE?$AAN?$AAT?$AA?$AA@|
  00138		 |$LN25@InitInterr|
  00138	01010098	 DCD         0x1010098
  0013c		 |$M42445|

			 ENDP  ; |?InitInterrupts@OMAPDisplayController@@QAAHKK@Z|, OMAPDisplayController::InitInterrupts

	END
