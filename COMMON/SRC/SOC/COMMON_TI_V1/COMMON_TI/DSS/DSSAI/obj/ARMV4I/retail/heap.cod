; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DSSAI\heap.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??0Heap@@QAA@KKPAV0@0@Z|		; Heap::Heap
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\dssai\heap.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T35635| DCD	|$LN7@Heap|
	DCD	0x40000c00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0Heap@@QAA@KKPAV0@0@Z| PROC		; Heap::Heap

; 47   : {

  00000		 |$LN7@Heap|
  00000		 |$M35632|
  00000	e3530000	 cmp         r3, #0

; 48   :     DEBUGMSG(ZONE_HEAP,(TEXT("Heap::Heap size %d address 0x%08x pPrev %08x pNext %08x this %08x\r\n"),
; 49   :         size, base, pPrev, pNext, this ));
; 50   : 
; 51   :     if( (m_pNext = pNext) != NULL )

  00004	e5803000	 str         r3, [r0]

; 52   :         m_pNext->m_pPrev = this;

  00008	15830004	 strne       r0, [r3, #4]

; 53   : 
; 54   :     if( (m_pPrev = pPrev) != NULL )

  0000c	e59d3000	 ldr         r3, [sp]
  00010	e3530000	 cmp         r3, #0
  00014	e5803004	 str         r3, [r0, #4]

; 55   :         m_pPrev->m_pNext = this;

  00018	15830000	 strne       r0, [r3]

; 56   : 
; 57   :     m_pStart = base;
; 58   :     m_nSize = size;
; 59   :     m_fUsed = 0;

  0001c	e3a03000	 mov         r3, #0
  00020	e5803010	 str         r3, [r0, #0x10]
  00024	e5802008	 str         r2, [r0, #8]
  00028	e580100c	 str         r1, [r0, #0xC]

; 60   : }

  0002c	e12fff1e	 bx          lr
  00030		 |$M35633|

			 ENDP  ; |??0Heap@@QAA@KKPAV0@0@Z|, Heap::Heap

	EXPORT	|??1Heap@@QAA@XZ|			; Heap::~Heap
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T35657| DCD	|$LN21@Heap@2|
	DCD	0x40002c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1Heap@@QAA@XZ| PROC			; Heap::~Heap

; 64   : {

  00000		 |$LN21@Heap@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M35654|
  00004	e1a04000	 mov         r4, r0

; 65   :     DEBUGMSG(ZONE_HEAP,(TEXT("Heap::~Heap 0x%08x (size=%d)\r\n"),this,m_nSize));
; 66   : 
; 67   :     if( !m_pPrev )

  00008	e5943004	 ldr         r3, [r4, #4]
  0000c	e3530000	 cmp         r3, #0
  00010	1a000018	 bne         |$LN7@Heap@2|

; 68   :     {
; 69   :         DEBUGMSG(ZONE_HEAP,(TEXT("Deleting heap!\r\n")));
; 70   : 
; 71   :         // if this is the base, then we are deleting the heap,
; 72   :         Heap *pLast = this;
; 73   :         
; 74   :         while( pLast->m_pNext )

  00014	e5943000	 ldr         r3, [r4]
  00018	e1b02003	 movs        r2, r3
  0001c	0a000021	 beq         |$LN1@Heap@2|
  00020		 |$LL6@Heap@2|
  00020	e5923000	 ldr         r3, [r2]

; 75   :             pLast = pLast->m_pNext;

  00024	e1a05002	 mov         r5, r2
  00028	e1b02003	 movs        r2, r3
  0002c	1afffffb	 bne         |$LL6@Heap@2|

; 76   :         
; 77   :         while( pLast != this )

  00030	e1550004	 cmp         r5, r4
  00034	0a00001b	 beq         |$LN1@Heap@2|
  00038	e3a07000	 mov         r7, #0
  0003c		 |$LL4@Heap@2|

; 78   :         {
; 79   :             pLast = pLast->m_pPrev;

  0003c	e5955004	 ldr         r5, [r5, #4]

; 80   :             pLast->m_pNext->m_pPrev = (Heap *)NULL; // prevent Heap::~Heap from doing anything

  00040	e5953000	 ldr         r3, [r5]
  00044	e5837004	 str         r7, [r3, #4]

; 81   :             delete pLast->m_pNext;

  00048	e5953000	 ldr         r3, [r5]
  0004c	e1b06003	 movs        r6, r3
  00050	0a000003	 beq         |$LN10@Heap@2|
  00054	e1a00006	 mov         r0, r6
  00058	eb000000	 bl          |??1Heap@@QAA@XZ|
  0005c	e1a00006	 mov         r0, r6
  00060	eb000000	 bl          |??3@YAXPAX@Z|
  00064		 |$LN10@Heap@2|

; 82   :             pLast->m_pNext = (Heap *)NULL;

  00064	e5857000	 str         r7, [r5]
  00068	e1550004	 cmp         r5, r4
  0006c	1afffff2	 bne         |$LL4@Heap@2|

; 94   :     }
; 95   : }

  00070	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$LN7@Heap@2|

; 83   :         }
; 84   :     }
; 85   :     else
; 86   :     {
; 87   :         DEBUGMSG(ZONE_HEAP,(TEXT("Deleting node only\r\n")));
; 88   : 
; 89   :         // otherwise, we are just freeing this node
; 90   :         m_pPrev->m_nSize += m_nSize;

  00078	e5941004	 ldr         r1, [r4, #4]
  0007c	e594200c	 ldr         r2, [r4, #0xC]
  00080	e591300c	 ldr         r3, [r1, #0xC]
  00084	e0823003	 add         r3, r2, r3
  00088	e581300c	 str         r3, [r1, #0xC]

; 91   :         m_pPrev->m_pNext = m_pNext;

  0008c	e5942004	 ldr         r2, [r4, #4]
  00090	e5943000	 ldr         r3, [r4]
  00094	e5823000	 str         r3, [r2]

; 92   :         if( m_pNext )

  00098	e5943000	 ldr         r3, [r4]
  0009c	e1b02003	 movs        r2, r3

; 93   :             m_pNext->m_pPrev = m_pPrev;

  000a0	15943004	 ldrne       r3, [r4, #4]
  000a4	15823004	 strne       r3, [r2, #4]
  000a8		 |$LN1@Heap@2|

; 94   :     }
; 95   : }

  000a8	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$M35655|

			 ENDP  ; |??1Heap@@QAA@XZ|, Heap::~Heap

	EXPORT	|??_GHeap@@QAAPAXI@Z|			; Heap::`scalar deleting destructor'

  00000			 AREA	 |.pdata|, PDATA
|$T35668| DCD	|$LN6@scalar|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GHeap@@QAAPAXI@Z| PROC		; Heap::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M35665|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??1Heap@@QAA@XZ|
  00010	e3140001	 tst         r4, #1
  00014	11a00005	 movne       r0, r5
  00018	1b000000	 blne        |??3@YAXPAX@Z|
  0001c	e1a00005	 mov         r0, r5
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M35666|

			 ENDP  ; |??_GHeap@@QAAPAXI@Z|, Heap::`scalar deleting destructor'

	EXPORT	|?TotalUsed@Heap@@QAAKXZ|		; Heap::TotalUsed

  00000			 AREA	 |.pdata|, PDATA
|$T35682| DCD	|$LN11@TotalUsed|
	DCD	0x40000b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?TotalUsed@Heap@@QAAKXZ| PROC		; Heap::TotalUsed

; 99   : {

  00000		 |$LN11@TotalUsed|
  00000		 |$M35679|
  00000	e1b02000	 movs        r2, r0

; 100  :     Heap *pNode;
; 101  :     DWORD size = 0;

  00004	e3a00000	 mov         r0, #0

; 102  : 
; 103  :     for( pNode=this; pNode; pNode = pNode->m_pNext )

  00008	0a000006	 beq         |$LN2@TotalUsed|
  0000c		 |$LL4@TotalUsed|

; 104  :         if( pNode->m_fUsed )

  0000c	e5923010	 ldr         r3, [r2, #0x10]
  00010	e3530000	 cmp         r3, #0

; 105  :             size += pNode->m_nSize;

  00014	1592300c	 ldrne       r3, [r2, #0xC]
  00018	10800003	 addne       r0, r0, r3
  0001c	e5923000	 ldr         r3, [r2]
  00020	e1b02003	 movs        r2, r3
  00024	1afffff8	 bne         |$LL4@TotalUsed|
  00028		 |$LN2@TotalUsed|

; 106  : 
; 107  :     return size;
; 108  : }

  00028	e12fff1e	 bx          lr
  0002c		 |$M35680|

			 ENDP  ; |?TotalUsed@Heap@@QAAKXZ|, Heap::TotalUsed

	EXPORT	|?TotalFree@Heap@@QAAKXZ|		; Heap::TotalFree

  00000			 AREA	 |.pdata|, PDATA
|$T35696| DCD	|$LN11@TotalFree|
	DCD	0x40000b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?TotalFree@Heap@@QAAKXZ| PROC		; Heap::TotalFree

; 112  : {

  00000		 |$LN11@TotalFree|
  00000		 |$M35693|
  00000	e1b02000	 movs        r2, r0

; 113  :     Heap *pNode;
; 114  :     DWORD size = 0;

  00004	e3a00000	 mov         r0, #0

; 115  : 
; 116  :     for( pNode = this; pNode; pNode = pNode->m_pNext )

  00008	0a000006	 beq         |$LN2@TotalFree|
  0000c		 |$LL4@TotalFree|

; 117  :         if( !pNode->m_fUsed )

  0000c	e5923010	 ldr         r3, [r2, #0x10]
  00010	e3530000	 cmp         r3, #0

; 118  :             size += pNode->m_nSize;

  00014	0592300c	 ldreq       r3, [r2, #0xC]
  00018	00800003	 addeq       r0, r0, r3
  0001c	e5923000	 ldr         r3, [r2]
  00020	e1b02003	 movs        r2, r3
  00024	1afffff8	 bne         |$LL4@TotalFree|
  00028		 |$LN2@TotalFree|

; 119  : 
; 120  :     return size;
; 121  : }

  00028	e12fff1e	 bx          lr
  0002c		 |$M35694|

			 ENDP  ; |?TotalFree@Heap@@QAAKXZ|, Heap::TotalFree

	EXPORT	|?Allocate@Heap@@QAAPAV1@K@Z|		; Heap::Allocate
	IMPORT	|??2@YAPAXI@Z|				; operator new

  00000			 AREA	 |.pdata|, PDATA
|$T35726| DCD	|$LN20@Allocate|
	DCD	0x40002f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Allocate@Heap@@QAAPAV1@K@Z| PROC	; Heap::Allocate

; 126  : {

  00000		 |$LN20@Allocate|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M35723|
  00004	e1a05001	 mov         r5, r1
  00008	e1b04000	 movs        r4, r0

; 127  :     Heap *pNode = this;
; 128  : 
; 129  :     DEBUGMSG(ZONE_HEAP,(TEXT("Heap::Allocate(%d)\r\n"),size));
; 130  : 
; 131  :     while( pNode && ( ( pNode->m_fUsed ) || ( pNode->m_nSize < size ) ) )

  0000c	0a000027	 beq         |$LN1@Allocate|
  00010		 |$LL7@Allocate|
  00010	e5943010	 ldr         r3, [r4, #0x10]
  00014	e3530000	 cmp         r3, #0
  00018	1a000002	 bne         |$LN5@Allocate|
  0001c	e594300c	 ldr         r3, [r4, #0xC]
  00020	e1530005	 cmp         r3, r5
  00024	2a000002	 bcs         |$LN6@Allocate|
  00028		 |$LN5@Allocate|

; 132  :         pNode = pNode->m_pNext;

  00028	e5943000	 ldr         r3, [r4]
  0002c	e1b04003	 movs        r4, r3
  00030	1afffff6	 bne         |$LL7@Allocate|
  00034		 |$LN6@Allocate|

; 133  : 
; 134  :     if( pNode && ( pNode->m_nSize > size ) )

  00034	e3540000	 cmp         r4, #0
  00038	0a00001c	 beq         |$LN1@Allocate|
  0003c	e594300c	 ldr         r3, [r4, #0xC]
  00040	e1530005	 cmp         r3, r5
  00044	9a000017	 bls         |$LN2@Allocate|

; 135  :     {
; 136  :         DEBUGMSG(ZONE_HEAP,(TEXT("Splitting %d byte node at 0x%08x\r\n"), pNode->m_nSize, pNode ));
; 137  : 
; 138  :         // Ok, have to split into used & unused section
; 139  :         Heap *pFreeNode = new Heap(
; 140  :                                 pNode->m_nSize - size,      // size
; 141  :                                 pNode->m_pStart + size,     // start
; 142  :                                 pNode->m_pNext,             // next
; 143  :                                 pNode                       // prev
; 144  :                                 );

  00048	e3a00014	 mov         r0, #0x14
  0004c	eb000000	 bl          |??2@YAPAXI@Z|
  00050	e3500000	 cmp         r0, #0
  00054	0a00000e	 beq         |$LN10@Allocate|
  00058	e5943000	 ldr         r3, [r4]
  0005c	e5942008	 ldr         r2, [r4, #8]
  00060	e594100c	 ldr         r1, [r4, #0xC]
  00064	e3530000	 cmp         r3, #0
  00068	e5803000	 str         r3, [r0]
  0006c	15830004	 strne       r0, [r3, #4]
  00070	e5804004	 str         r4, [r0, #4]
  00074	e3a03000	 mov         r3, #0
  00078	e0822005	 add         r2, r2, r5
  0007c	e0411005	 sub         r1, r1, r5
  00080	e5840000	 str         r0, [r4]
  00084	e5802008	 str         r2, [r0, #8]
  00088	e580100c	 str         r1, [r0, #0xC]
  0008c	e5803010	 str         r3, [r0, #0x10]
  00090	ea000000	 b           |$LN11@Allocate|
  00094		 |$LN10@Allocate|
  00094	e3a00000	 mov         r0, #0
  00098		 |$LN11@Allocate|

; 145  : 
; 146  :         if( !pFreeNode )

  00098	e3500000	 cmp         r0, #0

; 147  :         {
; 148  :             pNode = (Heap *)NULL;   // out of memory for new node

  0009c	03a04000	 moveq       r4, #0
  000a0	0a000002	 beq         |$LN1@Allocate|

; 149  :             DEBUGMSG(ZONE_HEAP,(TEXT("Failed to allocate new node\r\n")));
; 150  :         }
; 151  :         else
; 152  :         {
; 153  :             pNode->m_nSize = size;

  000a4	e584500c	 str         r5, [r4, #0xC]
  000a8		 |$LN2@Allocate|

; 154  :         }
; 155  :     }
; 156  : 
; 157  :     if( pNode )
; 158  :     {
; 159  :         pNode->m_fUsed = 1;

  000a8	e3a03001	 mov         r3, #1
  000ac	e5843010	 str         r3, [r4, #0x10]
  000b0		 |$LN1@Allocate|

; 160  :         DEBUGMSG(ZONE_HEAP,(TEXT("Marking node at 0x%08x as used (offset = 0x08x)\r\n"),pNode, pNode->Address()));
; 161  :     }
; 162  : 
; 163  :     return pNode;
; 164  : }

  000b0	e1a00004	 mov         r0, r4
  000b4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$M35724|

			 ENDP  ; |?Allocate@Heap@@QAAPAV1@K@Z|, Heap::Allocate

	EXPORT	|?Free@Heap@@QAAXXZ|			; Heap::Free

  00000			 AREA	 |.pdata|, PDATA
|$T35753| DCD	|$LN17@Free|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Free@Heap@@QAAXXZ| PROC		; Heap::Free

; 168  : {

  00000		 |$LN17@Free|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M35750|
  00004	e1a04000	 mov         r4, r0

; 169  :     Heap *pMerge;
; 170  :     Heap *pNode = this;
; 171  : 
; 172  :     DEBUGMSG(ZONE_HEAP,(TEXT("Heap::Free 0x%08x (size=%d)\r\n"),pNode,pNode->m_nSize));
; 173  : 
; 174  :     pNode->m_fUsed = 0;
; 175  :     pMerge = pNode->m_pPrev;

  00008	e5943004	 ldr         r3, [r4, #4]
  0000c	e3a02000	 mov         r2, #0
  00010	e5842010	 str         r2, [r4, #0x10]
  00014	e1b05003	 movs        r5, r3

; 176  : 
; 177  :     if( pMerge && !pMerge->m_fUsed )

  00018	0a000006	 beq         |$LN2@Free|
  0001c	e5953010	 ldr         r3, [r5, #0x10]
  00020	e3530000	 cmp         r3, #0
  00024	1a000003	 bne         |$LN2@Free|

; 178  :     {
; 179  :         DEBUGMSG(ZONE_HEAP,(TEXT("Heap::Free - merging node %08x with prior node (%08x)\r\n"),
; 180  :             pNode, pMerge ));
; 181  :         delete pNode;           // Merge pNode with prior node

  00028	eb000000	 bl          |??1Heap@@QAA@XZ|
  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          |??3@YAXPAX@Z|

; 182  :         pNode = pMerge;

  00034	e1a04005	 mov         r4, r5
  00038		 |$LN2@Free|

; 183  :     }
; 184  :     pMerge = pNode->m_pNext;

  00038	e5943000	 ldr         r3, [r4]
  0003c	e1b04003	 movs        r4, r3

; 185  : 
; 186  :     if( pMerge && !pMerge->m_fUsed )

  00040	0a000006	 beq         |$LN7@Free|
  00044	e5943010	 ldr         r3, [r4, #0x10]
  00048	e3530000	 cmp         r3, #0
  0004c	1a000003	 bne         |$LN7@Free|

; 187  :     {
; 188  :         DEBUGMSG(ZONE_HEAP,(TEXT("Heap::Free - merging %08x with subsequent node (%08x)\r\n"),
; 189  :             pNode, pMerge ));
; 190  :         delete pMerge;          // Merge pNode with subsequent node

  00050	e1a00004	 mov         r0, r4
  00054	eb000000	 bl          |??1Heap@@QAA@XZ|
  00058	e1a00004	 mov         r0, r4
  0005c	eb000000	 bl          |??3@YAXPAX@Z|
  00060		 |$LN7@Free|

; 191  :     }
; 192  : }

  00060	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M35751|

			 ENDP  ; |?Free@Heap@@QAAXXZ|, Heap::Free

	END
