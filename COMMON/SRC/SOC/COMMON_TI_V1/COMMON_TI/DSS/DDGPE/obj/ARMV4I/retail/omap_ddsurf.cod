; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DDGPE\omap_ddsurf.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|FourCCDescriptionTable| DCD 0x32595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x56595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x55595659
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x59565955
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x36315659
	DCD	0x10
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x32315659
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x3231564e
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x30323449
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x56555949
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	EXPORT	|?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| ; GPESurf::Format
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42494| DCD	|$LN5@Format|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| PROC ; GPESurf::Format

; 189  :     {

  00000		 |$LN5@Format|
  00000		 |$M42491|

; 190  :         return m_eFormat;

  00000	e590001c	 ldr         r0, [r0, #0x1C]

; 191  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M42492|

			 ENDP  ; |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|, GPESurf::Format

	EXPORT	|?Buffer@GPESurf@@QAAPAXXZ|		; GPESurf::Buffer

  00000			 AREA	 |.pdata|, PDATA
|$T42504| DCD	|$LN5@Buffer|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Buffer@GPESurf@@QAAPAXXZ| PROC	; GPESurf::Buffer

; 201  :     {

  00000		 |$LN5@Buffer|
  00000		 |$M42501|

; 202  :         return (void *)m_pVirtAddr;

  00000	e5900004	 ldr         r0, [r0, #4]

; 203  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M42502|

			 ENDP  ; |?Buffer@GPESurf@@QAAPAXXZ|, GPESurf::Buffer

	EXPORT	|?GetTVWidth@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetTVWidth
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T42514| DCD	|$LN5@GetTVWidth|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetTVWidth@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetTVWidth

; 305  :     DWORD                   GetTVWidth() { return m_dwTVWidth; }

  00000		 |$LN5@GetTVWidth|
  00000		 |$M42511|
  00000	e59004c0	 ldr         r0, [r0, #0x4C0]
  00004	e12fff1e	 bx          lr
  00008		 |$M42512|

			 ENDP  ; |?GetTVWidth@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetTVWidth

	EXPORT	|?GetTVHeight@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetTVHeight

  00000			 AREA	 |.pdata|, PDATA
|$T42524| DCD	|$LN5@GetTVHeigh|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetTVHeight@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetTVHeight

; 306  :     DWORD                   GetTVHeight() { return m_dwTVHeight; }

  00000		 |$LN5@GetTVHeigh|
  00000		 |$M42521|
  00000	e59004c4	 ldr         r0, [r0, #0x4C4]
  00004	e12fff1e	 bx          lr
  00008		 |$M42522|

			 ENDP  ; |?GetTVHeight@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetTVHeight

	EXPORT	|?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| ; OMAPSurface::PixelFormat

  00000			 AREA	 |.pdata|, PDATA
|$T42534| DCD	|$LN5@PixelForma|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| PROC ; OMAPSurface::PixelFormat

; 761  :     OMAP_DSS_PIXELFORMAT    PixelFormat() { return m_ePixelFormat; }

  00000		 |$LN5@PixelForma|
  00000		 |$M42531|
  00000	e5900004	 ldr         r0, [r0, #4]
  00004	e12fff1e	 bx          lr
  00008		 |$M42532|

			 ENDP  ; |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|, OMAPSurface::PixelFormat

	EXPORT	|?Orientation@OMAPSurface@@QAA?AW4OMAP_SURF_ORIENTATION@@XZ| ; OMAPSurface::Orientation

  00000			 AREA	 |.pdata|, PDATA
|$T42544| DCD	|$LN5@Orientatio|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Orientation@OMAPSurface@@QAA?AW4OMAP_SURF_ORIENTATION@@XZ| PROC ; OMAPSurface::Orientation

; 765  :     OMAP_SURF_ORIENTATION   Orientation() { return m_eOrientation; }

  00000		 |$LN5@Orientatio|
  00000		 |$M42541|
  00000	e590000c	 ldr         r0, [r0, #0xC]
  00004	e12fff1e	 bx          lr
  00008		 |$M42542|

			 ENDP  ; |?Orientation@OMAPSurface@@QAA?AW4OMAP_SURF_ORIENTATION@@XZ|, OMAPSurface::Orientation

	EXPORT	|?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ| ; OMAPSurface::ResizeParams

  00000			 AREA	 |.pdata|, PDATA
|$T42554| DCD	|$LN5@ResizePara|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ| PROC ; OMAPSurface::ResizeParams

; 773  :     RSZParams_t *           ResizeParams() { return &m_sRSZParams; }

  00000		 |$LN5@ResizePara|
  00000		 |$M42551|
  00000	e2800038	 add         r0, r0, #0x38
  00004	e12fff1e	 bx          lr
  00008		 |$M42552|

			 ENDP  ; |?ResizeParams@OMAPSurface@@QAAPAURSZParams_t@@XZ|, OMAPSurface::ResizeParams

	EXPORT	|?SetRSZParams@OMAPSurface@@QAAXURSZParams_t@@@Z| ; OMAPSurface::SetRSZParams
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T42563| DCD	|$LN5@SetRSZPara|
	DCD	0x40000903
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetRSZParams@OMAPSurface@@QAAXURSZParams_t@@@Z| PROC ; OMAPSurface::SetRSZParams

; 775  :     VOID                    SetRSZParams(RSZParams_t rszParams) { m_sRSZParams = rszParams; }

  00000		 |$LN5@SetRSZPara|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M42560|
  0000c	e2800038	 add         r0, r0, #0x38
  00010	e28d100c	 add         r1, sp, #0xC
  00014	e3a02064	 mov         r2, #0x64
  00018	eb000000	 bl          memcpy
  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M42561|

			 ENDP  ; |?SetRSZParams@OMAPSurface@@QAAXURSZParams_t@@@Z|, OMAPSurface::SetRSZParams

	EXPORT	|?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| ; OMAPDDGPESurface::OmapSurface
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42573| DCD	|$LN5@OmapSurfac|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| PROC ; OMAPDDGPESurface::OmapSurface

; 102  :     OMAPSurface*        OmapSurface() { return m_pSurface; }

  00000		 |$LN5@OmapSurfac|
  00000		 |$M42570|
  00000	e590007c	 ldr         r0, [r0, #0x7C]
  00004	e12fff1e	 bx          lr
  00008		 |$M42571|

			 ENDP  ; |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|, OMAPDDGPESurface::OmapSurface

	EXPORT	|?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|	; OMAPDDGPESurface::Parent

  00000			 AREA	 |.pdata|, PDATA
|$T42583| DCD	|$LN5@Parent|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ| PROC ; OMAPDDGPESurface::Parent

; 104  :     OMAPDDGPESurface*   Parent() { return m_pParentSurface; }

  00000		 |$LN5@Parent|
  00000		 |$M42580|
  00000	e5900084	 ldr         r0, [r0, #0x84]
  00004	e12fff1e	 bx          lr
  00008		 |$M42581|

			 ENDP  ; |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|, OMAPDDGPESurface::Parent

	EXPORT	|?OmapAssocSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| ; OMAPDDGPESurface::OmapAssocSurface

  00000			 AREA	 |.pdata|, PDATA
|$T42593| DCD	|$LN5@OmapAssocS|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OmapAssocSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| PROC ; OMAPDDGPESurface::OmapAssocSurface

; 107  :     OMAPSurface*        OmapAssocSurface() { return m_pAssocSurface; }

  00000		 |$LN5@OmapAssocS|
  00000		 |$M42590|
  00000	e5900080	 ldr         r0, [r0, #0x80]
  00004	e12fff1e	 bx          lr
  00008		 |$M42591|

			 ENDP  ; |?OmapAssocSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|, OMAPDDGPESurface::OmapAssocSurface

	EXPORT	|?SetAssocSurface@OMAPDDGPESurface@@QAAXPAVOMAPSurface@@@Z| ; OMAPDDGPESurface::SetAssocSurface

  00000			 AREA	 |.pdata|, PDATA
|$T42602| DCD	|$LN5@SetAssocSu|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetAssocSurface@OMAPDDGPESurface@@QAAXPAVOMAPSurface@@@Z| PROC ; OMAPDDGPESurface::SetAssocSurface

; 108  :     VOID                SetAssocSurface( OMAPSurface* pAssocSurface ) { m_pAssocSurface = pAssocSurface; }

  00000		 |$LN5@SetAssocSu|
  00000		 |$M42599|
  00000	e5801080	 str         r1, [r0, #0x80]
  00004	e12fff1e	 bx          lr
  00008		 |$M42600|

			 ENDP  ; |?SetAssocSurface@OMAPDDGPESurface@@QAAXPAVOMAPSurface@@@Z|, OMAPDDGPESurface::SetAssocSurface

	EXPORT	|?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z| ; OMAPDDGPE::CopySurfaceParams
	IMPORT	|?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z|	; OMAPSurface::SetRSZHandle
	IMPORT	|?GetRSZHandle@OMAPSurface@@QAAPAXH@Z|	; OMAPSurface::GetRSZHandle
	IMPORT	|?UseResizer@OMAPSurface@@QAAHH@Z|	; OMAPSurface::UseResizer
	IMPORT	|?isResizerEnabled@OMAPSurface@@QAAHXZ|	; OMAPSurface::isResizerEnabled
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T42630| DCD	|$LN13@CopySurfac|
	DCD	0x40001601
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z| PROC ; OMAPDDGPE::CopySurfaceParams

; 17   : {

  00000		 |$LN13@CopySurfac|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M42627|

; 18   :     OMAPSurface * pOMAPSurfSrc = pSurfSrc->OmapSurface();

  00004	e591407c	 ldr         r4, [r1, #0x7C]

; 19   :     OMAPSurface * pOMAPSurfDest = pSurfDest->OmapSurface();

  00008	e592507c	 ldr         r5, [r2, #0x7C]

; 20   :     BOOL useReszier;
; 21   : 
; 22   :     useReszier=pOMAPSurfDest->UseResizer(pOMAPSurfSrc->isResizerEnabled());    

  0000c	e1a00004	 mov         r0, r4
  00010	eb000000	 bl          |?isResizerEnabled@OMAPSurface@@QAAHXZ|
  00014	e1a01000	 mov         r1, r0
  00018	e1a00005	 mov         r0, r5
  0001c	eb000000	 bl          |?UseResizer@OMAPSurface@@QAAHH@Z|

; 23   :     pOMAPSurfDest->SetRSZParams(*(pOMAPSurfSrc->ResizeParams()));

  00020	e2850038	 add         r0, r5, #0x38
  00024	e2841038	 add         r1, r4, #0x38
  00028	e3a02064	 mov         r2, #0x64
  0002c	eb000000	 bl          memcpy

; 24   :     pOMAPSurfDest->SetRSZHandle(pOMAPSurfSrc->GetRSZHandle(FALSE),FALSE);   

  00030	e3a01000	 mov         r1, #0
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          |?GetRSZHandle@OMAPSurface@@QAAPAXH@Z|
  0003c	e1a01000	 mov         r1, r0
  00040	e1a00005	 mov         r0, r5
  00044	e3a02000	 mov         r2, #0
  00048	eb000000	 bl          |?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z|

; 25   : 
; 26   :     return TRUE;

  0004c	e3a00001	 mov         r0, #1

; 27   : }

  00050	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M42628|

			 ENDP  ; |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|, OMAPDDGPE::CopySurfaceParams

	EXPORT	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z| ; OMAPDDGPE::AllocSurface
	IMPORT	|??0DDGPESurf@@QAA@HHHW4EGPEFormat@@W4EDDGPEPixelFormat@@@Z| ; DDGPESurf::DDGPESurf
	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|EGPEFormatToBpp|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42657| DCD	|$LN14@AllocSurfa|
	DCD	0x40002b02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AllocSurface@OMAPDDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z| PROC ; OMAPDDGPE::AllocSurface

; 109  : {

  00000		 |$LN14@AllocSurfa|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M42654|
  00008	e1a08003	 mov         r8, r3
  0000c	e1a06002	 mov         r6, r2
  00010	e1a05001	 mov         r5, r1

; 110  :     DWORD bpp  = EGPEFormatToBpp[format];
; 111  :     DWORD stride = ((bpp * width + 31) >> 5) << 2;

  00014	e59fe08c	 ldr         lr, [pc, #0x8C]
  00018	e59d7024	 ldr         r7, [sp, #0x24]

; 112  : 
; 113  :     UNREFERENCED_PARAMETER(surfaceFlags);
; 114  : 
; 115  :     // Allocate DDraw surface from system memory
; 116  :     *ppSurf = new DDGPESurf(width, height, stride, format, pixelFormat);

  0001c	e3a0007c	 mov         r0, #0x7C
  00020	e3e0923e	 mvn         r9, #0x3E, 4
  00024	e79ee107	 ldr         lr, [lr, +r7, lsl #2]
  00028	e004069e	 mul         r4, lr, r6
  0002c	e284401f	 add         r4, r4, #0x1F
  00030	eb000000	 bl          |??2@YAPAXI@Z|
  00034	e3500000	 cmp         r0, #0
  00038	0a000007	 beq         |$LN6@AllocSurfa|
  0003c	e59de028	 ldr         lr, [sp, #0x28]
  00040	e00931a4	 and         r3, r9, r4, lsr #3
  00044	e1a02008	 mov         r2, r8
  00048	e1a01006	 mov         r1, r6
  0004c	e58de004	 str         lr, [sp, #4]
  00050	e58d7000	 str         r7, [sp]
  00054	eb000000	 bl          |??0DDGPESurf@@QAA@HHHW4EGPEFormat@@W4EDDGPEPixelFormat@@@Z|
  00058	ea000000	 b           |$LN7@AllocSurfa|
  0005c		 |$LN6@AllocSurfa|
  0005c	e3a00000	 mov         r0, #0
  00060		 |$LN7@AllocSurfa|
  00060	e5850000	 str         r0, [r5]

; 117  :     if (*ppSurf != NULL)

  00064	e3500000	 cmp         r0, #0
  00068	0a000007	 beq         |$LN1@AllocSurfa|

; 118  :     {
; 119  :         // check we allocated bits succesfully
; 120  :         if (((*ppSurf)->Buffer()) == NULL)

  0006c	e5903004	 ldr         r3, [r0, #4]
  00070	e3530000	 cmp         r3, #0
  00074	1a000009	 bne         |$LN2@AllocSurfa|

; 121  :         {
; 122  :             delete *ppSurf;

  00078	e5903000	 ldr         r3, [r0]
  0007c	e3a01001	 mov         r1, #1
  00080	e5933000	 ldr         r3, [r3]
  00084	e1a0e00f	 mov         lr, pc
  00088	e12fff13	 bx          r3
  0008c		 |$LN1@AllocSurfa|

; 123  :         }
; 124  :         else
; 125  :         {
; 126  :             return S_OK;

  0008c	e3a0313a	 mov         r3, #0x3A, 2

; 127  :         }
; 128  :     }
; 129  : 
; 130  :     DEBUGMSG(GPE_ZONE_WARNING, (L"DDraw AllocSurface - Out of Memory\r\n"));
; 131  :     return E_OUTOFMEMORY;

  00090	e3830807	 orr         r0, r3, #7, 16
  00094		 |$LN4@AllocSurfa|

; 132  : }

  00094	e28dd008	 add         sp, sp, #8
  00098	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN2@AllocSurfa|

; 123  :         }
; 124  :         else
; 125  :         {
; 126  :             return S_OK;

  000a0	e3a00000	 mov         r0, #0
  000a4	eafffffa	 b           |$LN4@AllocSurfa|
  000a8		 |$LN15@AllocSurfa|
  000a8		 |$LN16@AllocSurfa|
  000a8	00000000	 DCD         |EGPEFormatToBpp|
  000ac		 |$M42655|

			 ENDP  ; |?AllocSurface@OMAPDDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z|, OMAPDDGPE::AllocSurface

	EXPORT	|?AllocSurface@OMAPDDGPE@@QAAJPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z| ; OMAPDDGPE::AllocSurface
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42681| DCD	|$LN11@AllocSurfa@2|
	DCD	0x40001f02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AllocSurface@OMAPDDGPE@@QAAJPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z| PROC ; OMAPDDGPE::AllocSurface

; 179  : {

  00000		 |$LN11@AllocSurfa@2|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M42678|
  00008	e1a04003	 mov         r4, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1a06001	 mov         r6, r1

; 180  :     BOOL            bResult;
; 181  :     OMAPSurface*    pAssocOmapSurface;
; 182  :     OMAPSurface*    pOmapSurface = pSurf->OmapSurface();
; 183  : 
; 184  :     if (!m_bDssIspRszEnabled)

  00014	e590e148	 ldr         lr, [r0, #0x148]
  00018	e596807c	 ldr         r8, [r6, #0x7C]
  0001c	e35e0000	 cmp         lr, #0
  00020	03a03116	 moveq       r3, #0x16, 2

; 185  :         return DDERR_GENERIC;

  00024	03830901	 orreq       r0, r3, #1, 18
  00028	0a00000f	 beq         |$LN3@AllocSurfa@2|

; 186  : 
; 187  :     //  Allocate OMAP surface
; 188  :     bResult = m_pSurfaceMgr->Allocate(
; 189  :                             pixelFormat,
; 190  :                             width,
; 191  :                             height,
; 192  :                             &pAssocOmapSurface,
; 193  :                             pOmapSurface );

  0002c	e59000b4	 ldr         r0, [r0, #0xB4]
  00030	e59d3024	 ldr         r3, [sp, #0x24]
  00034	e28d5008	 add         r5, sp, #8

; 194  :     if (bResult == FALSE)

  00038	e590e000	 ldr         lr, [r0]
  0003c	e1a02004	 mov         r2, r4
  00040	e1a01007	 mov         r1, r7
  00044	e59e4028	 ldr         r4, [lr, #0x28]
  00048	e58d8004	 str         r8, [sp, #4]
  0004c	e58d5000	 str         r5, [sp]
  00050	e1a0e00f	 mov         lr, pc
  00054	e12fff14	 bx          r4
  00058	e3500000	 cmp         r0, #0

; 195  :     {
; 196  :         DEBUGMSG(GPE_ZONE_WARNING, (L"OMAP DDraw AllocSurface - Out of Video Memory\n"));
; 197  :         return DDERR_OUTOFVIDEOMEMORY;
; 198  :     }
; 199  :     
; 200  :     // add rsz surface to pSurf
; 201  :     pSurf->SetAssocSurface(pAssocOmapSurface);    

  0005c	159d3008	 ldrne       r3, [sp, #8]
  00060	059f0010	 ldreq       r0, [pc, #0x10]

; 202  :     
; 203  :     //  Surface created in video memory
; 204  :     return S_OK;

  00064	13a00000	 movne       r0, #0
  00068	15863080	 strne       r3, [r6, #0x80]
  0006c		 |$LN3@AllocSurfa@2|

; 205  : }

  0006c	e28dd00c	 add         sp, sp, #0xC
  00070	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$LN12@AllocSurfa@2|
  00078		 |$LN13@AllocSurfa@2|
  00078	8876017c	 DCD         0x8876017c
  0007c		 |$M42679|

			 ENDP  ; |?AllocSurface@OMAPDDGPE@@QAAJPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z|, OMAPDDGPE::AllocSurface

	EXPORT	|?NumVisibleOverlays@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::NumVisibleOverlays

  00000			 AREA	 |.pdata|, PDATA
|$T42694| DCD	|$LN9@NumVisible|
	DCD	0x40000d00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NumVisibleOverlays@OMAPDDGPE@@QAAKXZ| PROC ; OMAPDDGPE::NumVisibleOverlays

; 211  : {

  00000		 |$LN9@NumVisible|
  00000		 |$M42691|

; 212  :     //  Return number of visible overlays
; 213  :     if( m_pOverlay1Surf && m_pOverlay2Surf )

  00000	e59030c0	 ldr         r3, [r0, #0xC0]
  00004	e3530000	 cmp         r3, #0
  00008	e59030c4	 ldr         r3, [r0, #0xC4]
  0000c	0a000003	 beq         |$LN6@NumVisible|
  00010	e3530000	 cmp         r3, #0
  00014	0a000004	 beq         |$LN1@NumVisible|

; 214  :         return 2;

  00018	e3a00002	 mov         r0, #2

; 220  : }  

  0001c	e12fff1e	 bx          lr
  00020		 |$LN6@NumVisible|

; 215  :         
; 216  :     if( m_pOverlay1Surf || m_pOverlay2Surf )

  00020	e3530000	 cmp         r3, #0

; 218  : 
; 219  :     return 0;            

  00024	03a00000	 moveq       r0, #0

; 220  : }  

  00028	012fff1e	 bxeq        lr
  0002c		 |$LN1@NumVisible|

; 217  :         return 1;

  0002c	e3a00001	 mov         r0, #1

; 220  : }  

  00030	e12fff1e	 bx          lr
  00034		 |$M42692|

			 ENDP  ; |?NumVisibleOverlays@OMAPDDGPE@@QAAKXZ|, OMAPDDGPE::NumVisibleOverlays

	EXPORT	|?MoveOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@JJ@Z| ; OMAPDDGPE::MoveOverlay
	IMPORT	|?MovePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@JJ@Z| ; OMAPDisplayController::MovePipeline
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42723| DCD	|$LN19@MoveOverla|
	DCD	0x40002c01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MoveOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@JJ@Z| PROC ; OMAPDDGPE::MoveOverlay

; 494  : {

  00000		 |$LN19@MoveOverla|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M42720|
  00004	e1a07003	 mov         r7, r3
  00008	e1a08002	 mov         r8, r2
  0000c	e1a06001	 mov         r6, r1
  00010	e1a05000	 mov         r5, r0

; 495  :     //  Reposition the overlay (TV out is never repositioned b/c it is scaled)
; 496  :     if( m_pOverlay1Surf && (pOverlaySurf->Parent() == m_pOverlay1Surf->Parent()) )

  00014	e595e0c0	 ldr         lr, [r5, #0xC0]
  00018	e35e0000	 cmp         lr, #0
  0001c	0a00000e	 beq         |$LN5@MoveOverla|
  00020	e5964084	 ldr         r4, [r6, #0x84]
  00024	e59ee084	 ldr         lr, [lr, #0x84]
  00028	e154000e	 cmp         r4, lr
  0002c	1a00000a	 bne         |$LN5@MoveOverla|

; 497  :     {
; 498  :         //  Ensure that the VID1 pipeline is setup for TV out (repositioning not allowed to TV)
; 499  :         if( !m_bTVOutEnable || m_eTVPipeline != OMAP_DSS_PIPELINE_VIDEO1 )

  00030	e595e110	 ldr         lr, [r5, #0x110]
  00034	e35e0000	 cmp         lr, #0
  00038	0a000002	 beq         |$LN4@MoveOverla|
  0003c	e595e10c	 ldr         lr, [r5, #0x10C]
  00040	e35e0001	 cmp         lr, #1
  00044	0a000004	 beq         |$LN5@MoveOverla|
  00048		 |$LN4@MoveOverla|

; 500  :         {
; 501  :             m_pDisplayContr->MovePipeline( OMAP_DSS_PIPELINE_VIDEO1, lXPos, lYPos );

  00048	e59500b0	 ldr         r0, [r5, #0xB0]
  0004c	e1a03007	 mov         r3, r7
  00050	e1a02008	 mov         r2, r8
  00054	e3a01001	 mov         r1, #1
  00058	eb000000	 bl          |?MovePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@JJ@Z|
  0005c		 |$LN5@MoveOverla|

; 502  :         }
; 503  :     }
; 504  :     
; 505  :     if( m_pOverlay2Surf && (pOverlaySurf->Parent() == m_pOverlay2Surf->Parent()) )

  0005c	e59530c4	 ldr         r3, [r5, #0xC4]
  00060	e3530000	 cmp         r3, #0
  00064	0a00000e	 beq         |$LN2@MoveOverla|
  00068	e5962084	 ldr         r2, [r6, #0x84]
  0006c	e5933084	 ldr         r3, [r3, #0x84]
  00070	e1520003	 cmp         r2, r3
  00074	1a00000a	 bne         |$LN2@MoveOverla|

; 506  :     {
; 507  :         //  Ensure that the VID1 pipeline is setup for TV out (repositioning not allowed to TV)
; 508  :         if( !m_bTVOutEnable || m_eTVPipeline != OMAP_DSS_PIPELINE_VIDEO2 )

  00078	e5953110	 ldr         r3, [r5, #0x110]
  0007c	e3530000	 cmp         r3, #0
  00080	0a000002	 beq         |$LN1@MoveOverla|
  00084	e595310c	 ldr         r3, [r5, #0x10C]
  00088	e3530002	 cmp         r3, #2
  0008c	0a000004	 beq         |$LN2@MoveOverla|
  00090		 |$LN1@MoveOverla|

; 509  :         {
; 510  :             m_pDisplayContr->MovePipeline( OMAP_DSS_PIPELINE_VIDEO2, lXPos, lYPos );

  00090	e59500b0	 ldr         r0, [r5, #0xB0]
  00094	e1a03007	 mov         r3, r7
  00098	e1a02008	 mov         r2, r8
  0009c	e3a01002	 mov         r1, #2
  000a0	eb000000	 bl          |?MovePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@JJ@Z|
  000a4		 |$LN2@MoveOverla|

; 511  :         }
; 512  :     }
; 513  :     
; 514  :     //  Result
; 515  :     return DD_OK;

  000a4	e3a00000	 mov         r0, #0

; 516  : }  

  000a8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$M42721|

			 ENDP  ; |?MoveOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@JJ@Z|, OMAPDDGPE::MoveOverlay

	EXPORT	|?SetSrcColorKey@OMAPDDGPE@@QAAKK@Z|	; OMAPDDGPE::SetSrcColorKey
	IMPORT	|?EnableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@K@Z| ; OMAPDisplayController::EnableColorKey

  00000			 AREA	 |.pdata|, PDATA
|$T42734| DCD	|$LN5@SetSrcColo|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetSrcColorKey@OMAPDDGPE@@QAAKK@Z| PROC ; OMAPDDGPE::SetSrcColorKey

; 566  : {

  00000		 |$LN5@SetSrcColo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M42731|
  00004	e1a03001	 mov         r3, r1

; 567  :     //  Enable the transparent source color key
; 568  :     m_pDisplayContr->EnableColorKey( OMAP_DSS_COLORKEY_TRANS_SOURCE, OMAP_DSS_DESTINATION_LCD, dwColorKey );

  00008	e59000b0	 ldr         r0, [r0, #0xB0]
  0000c	e3a02000	 mov         r2, #0
  00010	e3a01000	 mov         r1, #0
  00014	eb000000	 bl          |?EnableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@K@Z|

; 569  :     
; 570  :     //  Result
; 571  :     return DD_OK;

  00018	e3a00000	 mov         r0, #0

; 572  : }  

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M42732|

			 ENDP  ; |?SetSrcColorKey@OMAPDDGPE@@QAAKK@Z|, OMAPDDGPE::SetSrcColorKey

	EXPORT	|?SetDestColorKey@OMAPDDGPE@@QAAKK@Z|	; OMAPDDGPE::SetDestColorKey

  00000			 AREA	 |.pdata|, PDATA
|$T42745| DCD	|$LN5@SetDestCol|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetDestColorKey@OMAPDDGPE@@QAAKK@Z| PROC ; OMAPDDGPE::SetDestColorKey

; 579  : {

  00000		 |$LN5@SetDestCol|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M42742|
  00004	e1a03001	 mov         r3, r1

; 580  :     //  Enable the transparent destination color key
; 581  :     m_pDisplayContr->EnableColorKey( OMAP_DSS_COLORKEY_TRANS_DEST, OMAP_DSS_DESTINATION_LCD, dwColorKey );

  00008	e59000b0	 ldr         r0, [r0, #0xB0]
  0000c	e3a02000	 mov         r2, #0
  00010	e3a01001	 mov         r1, #1
  00014	eb000000	 bl          |?EnableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@K@Z|

; 582  :     
; 583  :     //  Result
; 584  :     return DD_OK;

  00018	e3a00000	 mov         r0, #0

; 585  : }  

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M42743|

			 ENDP  ; |?SetDestColorKey@OMAPDDGPE@@QAAKK@Z|, OMAPDDGPE::SetDestColorKey

	EXPORT	|?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z| ; OMAPDDGPE::SetAlphaConst

  00000			 AREA	 |.pdata|, PDATA
|$T42757| DCD	|$LN5@SetAlphaCo|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z| PROC ; OMAPDDGPE::SetAlphaConst

; 593  : {

  00000		 |$LN5@SetAlphaCo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M42754|
  00004	e1a03002	 mov         r3, r2

; 594  :     //  Enable the alpha const for GFX or VID2
; 595  :     m_pDisplayContr->EnableColorKey( eColorKey, OMAP_DSS_DESTINATION_LCD, dwColorKey );

  00008	e59000b0	 ldr         r0, [r0, #0xB0]
  0000c	e3a02000	 mov         r2, #0
  00010	eb000000	 bl          |?EnableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@K@Z|

; 596  :     
; 597  :     //  Result
; 598  :     return DD_OK;

  00014	e3a00000	 mov         r0, #0

; 599  : }  

  00018	e49de004	 ldr         lr, [sp], #4
  0001c	e12fff1e	 bx          lr
  00020		 |$M42755|

			 ENDP  ; |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z|, OMAPDDGPE::SetAlphaConst

	EXPORT	|?DisableColorKey@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::DisableColorKey
	IMPORT	|?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z| ; OMAPDisplayController::DisableColorKey

  00000			 AREA	 |.pdata|, PDATA
|$T42767| DCD	|$LN5@DisableCol|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DisableColorKey@OMAPDDGPE@@QAAKXZ| PROC ; OMAPDDGPE::DisableColorKey

; 604  : {

  00000		 |$LN5@DisableCol|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M42764|

; 605  :     //  Disable the transparent destination color key
; 606  :     m_pDisplayContr->DisableColorKey( OMAP_DSS_COLORKEY_TRANS_SOURCE, OMAP_DSS_DESTINATION_LCD );

  00004	e59000b0	 ldr         r0, [r0, #0xB0]
  00008	e3a02000	 mov         r2, #0
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z|

; 607  :     
; 608  :     //  Result
; 609  :     return DD_OK;

  00014	e3a00000	 mov         r0, #0

; 610  : }  

  00018	e49de004	 ldr         lr, [sp], #4
  0001c	e12fff1e	 bx          lr
  00020		 |$M42765|

			 ENDP  ; |?DisableColorKey@OMAPDDGPE@@QAAKXZ|, OMAPDDGPE::DisableColorKey

	EXPORT	|?DisableAlphaConst@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::DisableAlphaConst

  00000			 AREA	 |.pdata|, PDATA
|$T42777| DCD	|$LN5@DisableAlp|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DisableAlphaConst@OMAPDDGPE@@QAAKXZ| PROC ; OMAPDDGPE::DisableAlphaConst

; 615  : {

  00000		 |$LN5@DisableAlp|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M42774|
  00004	e1a04000	 mov         r4, r0

; 616  :     //  Disable the alpha const value
; 617  :     m_pDisplayContr->DisableColorKey( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX, OMAP_DSS_DESTINATION_LCD );

  00008	e59400b0	 ldr         r0, [r4, #0xB0]
  0000c	e3a02000	 mov         r2, #0
  00010	e3a01002	 mov         r1, #2
  00014	eb000000	 bl          |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z|

; 618  :     m_pDisplayContr->DisableColorKey( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2, OMAP_DSS_DESTINATION_LCD );

  00018	e59400b0	 ldr         r0, [r4, #0xB0]
  0001c	e3a02000	 mov         r2, #0
  00020	e3a01003	 mov         r1, #3
  00024	eb000000	 bl          |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z|

; 619  :     
; 620  :     //  Result
; 621  :     return DD_OK;

  00028	e3a00000	 mov         r0, #0

; 622  : }  

  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M42775|

			 ENDP  ; |?DisableAlphaConst@OMAPDDGPE@@QAAKXZ|, OMAPDDGPE::DisableAlphaConst

	EXPORT	|?FlipInProgress@OMAPDDGPE@@UAAHXZ|	; OMAPDDGPE::FlipInProgress

  00000			 AREA	 |.pdata|, PDATA
|$T42789| DCD	|$LN9@FlipInProg|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FlipInProgress@OMAPDDGPE@@UAAHXZ| PROC ; OMAPDDGPE::FlipInProgress

; 627  : {

  00000		 |$LN9@FlipInProg|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M42786|
  00004	e1a04000	 mov         r4, r0

; 628  :     //  If there has been a FlipSurface called, check for VSYNC status bit   
; 629  :     if( m_bFlipInProgress )

  00008	e59430b8	 ldr         r3, [r4, #0xB8]
  0000c	e3530000	 cmp         r3, #0
  00010	0a00000b	 beq         |$LN5@FlipInProg|

; 630  :     {
; 631  :         //  Check for VSYNC and clear it and the flip in progress flag
; 632  :         if( InVBlank() )

  00014	e5943000	 ldr         r3, [r4]
  00018	e5933030	 ldr         r3, [r3, #0x30]
  0001c	e1a0e00f	 mov         lr, pc
  00020	e12fff13	 bx          r3
  00024	e3500000	 cmp         r0, #0

; 633  :             m_bFlipInProgress = FALSE;

  00028	13a03000	 movne       r3, #0
  0002c	158430b8	 strne       r3, [r4, #0xB8]

; 634  :     }
; 635  : 
; 636  :     //  Return status flip
; 637  :     return (m_bFlipInProgress) ? 1 : 0;

  00030	e59430b8	 ldr         r3, [r4, #0xB8]
  00034	e3530000	 cmp         r3, #0
  00038	13a00001	 movne       r0, #1

; 638  : }

  0003c	18bd4010	 ldmneia     sp!, {r4, lr}
  00040	112fff1e	 bxne        lr
  00044		 |$LN5@FlipInProg|

; 634  :     }
; 635  : 
; 636  :     //  Return status flip
; 637  :     return (m_bFlipInProgress) ? 1 : 0;

  00044	e3a00000	 mov         r0, #0

; 638  : }

  00048	e8bd4010	 ldmia       sp!, {r4, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M42787|

			 ENDP  ; |?FlipInProgress@OMAPDDGPE@@UAAHXZ|, OMAPDDGPE::FlipInProgress

	EXPORT	|?WaitForVBlank@OMAPDDGPE@@UAAXXZ|	; OMAPDDGPE::WaitForVBlank
	IMPORT	|?WaitForVsync@OMAPDisplayController@@QAAXXZ| ; OMAPDisplayController::WaitForVsync

  00000			 AREA	 |.pdata|, PDATA
|$T42797| DCD	|$LN5@WaitForVBl|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WaitForVBlank@OMAPDDGPE@@UAAXXZ| PROC ; OMAPDDGPE::WaitForVBlank

; 642  : {  

  00000		 |$LN5@WaitForVBl|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M42794|

; 643  :     m_pDisplayContr->WaitForVsync(); 

  00004	e59000b0	 ldr         r0, [r0, #0xB0]
  00008	eb000000	 bl          |?WaitForVsync@OMAPDisplayController@@QAAXXZ|

; 644  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M42795|

			 ENDP  ; |?WaitForVBlank@OMAPDDGPE@@UAAXXZ|, OMAPDDGPE::WaitForVBlank

	EXPORT	|?InVBlank@OMAPDDGPE@@UAAHXZ|		; OMAPDDGPE::InVBlank
	IMPORT	|?InVSync@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::InVSync

  00000			 AREA	 |.pdata|, PDATA
|$T42807| DCD	|$LN5@InVBlank|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InVBlank@OMAPDDGPE@@UAAHXZ| PROC	; OMAPDDGPE::InVBlank

; 648  : {

  00000		 |$LN5@InVBlank|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M42804|

; 649  :     return m_pDisplayContr->InVSync(TRUE);

  00004	e59000b0	 ldr         r0, [r0, #0xB0]
  00008	e3a01001	 mov         r1, #1
  0000c	eb000000	 bl          |?InVSync@OMAPDisplayController@@QAAHH@Z|

; 650  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M42805|

			 ENDP  ; |?InVBlank@OMAPDDGPE@@UAAHXZ|, OMAPDDGPE::InVBlank

	EXPORT	|?GetScanLine@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::GetScanLine
	IMPORT	|?GetScanLine@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetScanLine

  00000			 AREA	 |.pdata|, PDATA
|$T42817| DCD	|$LN5@GetScanLin|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetScanLine@OMAPDDGPE@@QAAKXZ| PROC	; OMAPDDGPE::GetScanLine

; 654  : {

  00000		 |$LN5@GetScanLin|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M42814|

; 655  :     return m_pDisplayContr->GetScanLine();

  00004	e59000b0	 ldr         r0, [r0, #0xB0]
  00008	eb000000	 bl          |?GetScanLine@OMAPDisplayController@@QAAKXZ|

; 656  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M42815|

			 ENDP  ; |?GetScanLine@OMAPDDGPE@@QAAKXZ|, OMAPDDGPE::GetScanLine

	EXPORT	|?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z| ; OMAPDDGPE::SurfaceFlipping
	IMPORT	|?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z| ; OMAPDisplayController::IsPipelineFlipping
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42878| DCD	|$LN34@SurfaceFli|
	DCD	0x40004001
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z| PROC ; OMAPDDGPE::SurfaceFlipping

; 663  : {

  00000		 |$LN34@SurfaceFli|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M42875|
  00004	e1a07002	 mov         r7, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a04000	 mov         r4, r0

; 664  :     BOOL    bResult = FALSE;        
; 665  :     if(m_bFlipInProgress == FALSE)

  00010	e59430b8	 ldr         r3, [r4, #0xB8]
  00014	e3a05000	 mov         r5, #0
  00018	e3530000	 cmp         r3, #0

; 666  :     {        
; 667  :         return bResult;

  0001c	03a05000	 moveq       r5, #0
  00020	0a000033	 beq         |$LN1@SurfaceFli|

; 668  :     }    
; 669  :     
; 670  :     if( m_pPrimarySurf && (m_pPrimarySurf->Parent() == pSurf->Parent()) )

  00024	e59430bc	 ldr         r3, [r4, #0xBC]
  00028	e3530000	 cmp         r3, #0
  0002c	0a000009	 beq         |$LN4@SurfaceFli|
  00030	e5932084	 ldr         r2, [r3, #0x84]
  00034	e5963084	 ldr         r3, [r6, #0x84]
  00038	e1520003	 cmp         r2, r3
  0003c	1a000005	 bne         |$LN4@SurfaceFli|

; 671  :     {
; 672  :         bResult |= m_pDisplayContr->IsPipelineFlipping(
; 673  :                                     OMAP_DSS_PIPELINE_GFX,
; 674  :                                     pSurf->OmapSurface(),
; 675  :                                     matchExactSurface );                                               

  00040	e596207c	 ldr         r2, [r6, #0x7C]
  00044	e59400b0	 ldr         r0, [r4, #0xB0]
  00048	e1a03007	 mov         r3, r7
  0004c	e3a01000	 mov         r1, #0
  00050	eb000000	 bl          |?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z|
  00054	e1a05000	 mov         r5, r0
  00058		 |$LN4@SurfaceFli|

; 676  :     }    
; 677  :     if( m_pOverlay1Surf && (m_pOverlay1Surf->Parent() == pSurf->Parent()) )

  00058	e59430c0	 ldr         r3, [r4, #0xC0]
  0005c	e3530000	 cmp         r3, #0
  00060	0a000009	 beq         |$LN3@SurfaceFli|
  00064	e5932084	 ldr         r2, [r3, #0x84]
  00068	e5963084	 ldr         r3, [r6, #0x84]
  0006c	e1520003	 cmp         r2, r3
  00070	1a000005	 bne         |$LN3@SurfaceFli|

; 678  :     {
; 679  :         bResult |= m_pDisplayContr->IsPipelineFlipping(
; 680  :                                     OMAP_DSS_PIPELINE_VIDEO1,
; 681  :                                     pSurf->OmapSurface(),
; 682  :                                     matchExactSurface );                                               

  00074	e596207c	 ldr         r2, [r6, #0x7C]
  00078	e59400b0	 ldr         r0, [r4, #0xB0]
  0007c	e1a03007	 mov         r3, r7
  00080	e3a01001	 mov         r1, #1
  00084	eb000000	 bl          |?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z|
  00088	e1805005	 orr         r5, r0, r5
  0008c		 |$LN3@SurfaceFli|

; 683  :     }
; 684  :     if( m_pOverlay2Surf && (m_pOverlay2Surf->Parent() == pSurf->Parent()) )

  0008c	e59430c4	 ldr         r3, [r4, #0xC4]
  00090	e3530000	 cmp         r3, #0
  00094	0a000009	 beq         |$LN2@SurfaceFli|
  00098	e5932084	 ldr         r2, [r3, #0x84]
  0009c	e5963084	 ldr         r3, [r6, #0x84]
  000a0	e1520003	 cmp         r2, r3
  000a4	1a000005	 bne         |$LN2@SurfaceFli|

; 685  :     {
; 686  :         bResult |= m_pDisplayContr->IsPipelineFlipping(
; 687  :                                     OMAP_DSS_PIPELINE_VIDEO2,
; 688  :                                     pSurf->OmapSurface(),
; 689  :                                     matchExactSurface );                                               

  000a8	e596207c	 ldr         r2, [r6, #0x7C]
  000ac	e59400b0	 ldr         r0, [r4, #0xB0]
  000b0	e1a03007	 mov         r3, r7
  000b4	e3a01002	 mov         r1, #2
  000b8	eb000000	 bl          |?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z|
  000bc	e1805005	 orr         r5, r0, r5
  000c0		 |$LN2@SurfaceFli|

; 690  :     }    
; 691  :     
; 692  :     if( m_pTVSurf && (m_pTVSurf->Parent() == pSurf->Parent()) )

  000c0	e5943108	 ldr         r3, [r4, #0x108]
  000c4	e3530000	 cmp         r3, #0
  000c8	0a000009	 beq         |$LN1@SurfaceFli|
  000cc	e5932084	 ldr         r2, [r3, #0x84]
  000d0	e5963084	 ldr         r3, [r6, #0x84]
  000d4	e1520003	 cmp         r2, r3
  000d8	1a000005	 bne         |$LN1@SurfaceFli|

; 693  :     {
; 694  :         bResult |= m_pDisplayContr->IsPipelineFlipping(
; 695  :                                     m_eTVPipeline,
; 696  :                                     pSurf->OmapSurface(),
; 697  :                                     matchExactSurface );                                               

  000dc	e596207c	 ldr         r2, [r6, #0x7C]
  000e0	e594110c	 ldr         r1, [r4, #0x10C]
  000e4	e59400b0	 ldr         r0, [r4, #0xB0]
  000e8	e1a03007	 mov         r3, r7
  000ec	eb000000	 bl          |?IsPipelineFlipping@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@H@Z|
  000f0	e1805005	 orr         r5, r0, r5
  000f4		 |$LN1@SurfaceFli|

; 698  :     }    
; 699  :     return bResult;
; 700  :     
; 701  :    
; 702  : }

  000f4	e1a00005	 mov         r0, r5
  000f8	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000fc	e12fff1e	 bx          lr
  00100		 |$M42876|

			 ENDP  ; |?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z|, OMAPDDGPE::SurfaceFlipping

	EXPORT	|?FlipSurface@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z| ; OMAPDDGPE::FlipSurface
	IMPORT	|?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z| ; OMAPDisplayController::FlipPipeline
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42945| DCD	|$LN37@FlipSurfac|
	DCD	0x40003801
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FlipSurface@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z| PROC ; OMAPDDGPE::FlipSurface

; 709  : {

  00000		 |$LN37@FlipSurfac|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M42942|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 710  :     BOOL    bResult;
; 711  : 
; 712  :     //
; 713  :     //  Determine which pipeline this surface is associated with and flip it
; 714  :     //
; 715  :     if( m_pPrimarySurf && (m_pPrimarySurf->Parent() == pSurf->Parent()) )

  0000c	e59430bc	 ldr         r3, [r4, #0xBC]
  00010	e3530000	 cmp         r3, #0
  00014	0a000006	 beq         |$LN4@FlipSurfac|
  00018	e5932084	 ldr         r2, [r3, #0x84]
  0001c	e5953084	 ldr         r3, [r5, #0x84]
  00020	e1520003	 cmp         r2, r3

; 716  :     {
; 717  :         bResult = m_pDisplayContr->FlipPipeline(
; 718  :                                     OMAP_DSS_PIPELINE_GFX,
; 719  :                                     pSurf->OmapSurface() );                                               

  00024	0595207c	 ldreq       r2, [r5, #0x7C]
  00028	059400b0	 ldreq       r0, [r4, #0xB0]
  0002c	03a01000	 moveq       r1, #0
  00030	0b000000	 bleq        |?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z|
  00034		 |$LN4@FlipSurfac|

; 720  :     }    
; 721  :     
; 722  :     if( m_pOverlay1Surf && (m_pOverlay1Surf->Parent() == pSurf->Parent()) )

  00034	e59430c0	 ldr         r3, [r4, #0xC0]
  00038	e3530000	 cmp         r3, #0
  0003c	0a00000a	 beq         |$LN3@FlipSurfac|
  00040	e5951084	 ldr         r1, [r5, #0x84]
  00044	e5933084	 ldr         r3, [r3, #0x84]
  00048	e1530001	 cmp         r3, r1
  0004c	1a000006	 bne         |$LN3@FlipSurfac|

; 723  :     {
; 724  :         CopySurfaceParams(pSurf->Parent(), pSurf);

  00050	e1a02005	 mov         r2, r5
  00054	e1a00004	 mov         r0, r4
  00058	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 725  :         bResult = m_pDisplayContr->FlipPipeline(
; 726  :                                     OMAP_DSS_PIPELINE_VIDEO1,
; 727  :                                     pSurf->OmapSurface() );                                               

  0005c	e595207c	 ldr         r2, [r5, #0x7C]
  00060	e59400b0	 ldr         r0, [r4, #0xB0]
  00064	e3a01001	 mov         r1, #1
  00068	eb000000	 bl          |?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z|
  0006c		 |$LN3@FlipSurfac|

; 728  :     }    
; 729  : 
; 730  :     if( m_pOverlay2Surf && (m_pOverlay2Surf->Parent() == pSurf->Parent()) )

  0006c	e59430c4	 ldr         r3, [r4, #0xC4]
  00070	e3530000	 cmp         r3, #0
  00074	0a00000a	 beq         |$LN2@FlipSurfac|
  00078	e5951084	 ldr         r1, [r5, #0x84]
  0007c	e5933084	 ldr         r3, [r3, #0x84]
  00080	e1530001	 cmp         r3, r1
  00084	1a000006	 bne         |$LN2@FlipSurfac|

; 731  :     {
; 732  :         CopySurfaceParams(pSurf->Parent(), pSurf);

  00088	e1a02005	 mov         r2, r5
  0008c	e1a00004	 mov         r0, r4
  00090	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 733  :         bResult = m_pDisplayContr->FlipPipeline(
; 734  :                                     OMAP_DSS_PIPELINE_VIDEO2,
; 735  :                                     pSurf->OmapSurface() );                                               

  00094	e595207c	 ldr         r2, [r5, #0x7C]
  00098	e59400b0	 ldr         r0, [r4, #0xB0]
  0009c	e3a01002	 mov         r1, #2
  000a0	eb000000	 bl          |?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z|
  000a4		 |$LN2@FlipSurfac|

; 736  :     }    
; 737  :     
; 738  :     if( m_pTVSurf && (m_pTVSurf->Parent() == pSurf->Parent()) )

  000a4	e5943108	 ldr         r3, [r4, #0x108]
  000a8	e3530000	 cmp         r3, #0
  000ac	0a000006	 beq         |$LN1@FlipSurfac|
  000b0	e5932084	 ldr         r2, [r3, #0x84]
  000b4	e5953084	 ldr         r3, [r5, #0x84]
  000b8	e1520003	 cmp         r2, r3

; 739  :     {
; 740  :         bResult = m_pDisplayContr->FlipPipeline(
; 741  :                                     m_eTVPipeline,
; 742  :                                     pSurf->OmapSurface() );                                               

  000bc	0595207c	 ldreq       r2, [r5, #0x7C]
  000c0	0594110c	 ldreq       r1, [r4, #0x10C]
  000c4	059400b0	 ldreq       r0, [r4, #0xB0]
  000c8	0b000000	 bleq        |?FlipPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAVOMAPSurface@@@Z|
  000cc		 |$LN1@FlipSurfac|

; 743  :     }    
; 744  :     
; 745  :     //  Set flag
; 746  :     m_bFlipInProgress = TRUE;

  000cc	e3a03001	 mov         r3, #1
  000d0	e58430b8	 str         r3, [r4, #0xB8]

; 747  :     
; 748  :     //  Result
; 749  :     return DD_OK;

  000d4	e3a00000	 mov         r0, #0

; 750  : }  

  000d8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000dc	e12fff1e	 bx          lr
  000e0		 |$M42943|

			 ENDP  ; |?FlipSurface@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z|, OMAPDDGPE::FlipSurface

	EXPORT	|?GetTvOutScaling@OMAPDDGPE@@QAAHPAVOMAPSurface@@PAK111@Z| ; OMAPDDGPE::GetTvOutScaling
	IMPORT	|__utod|
	IMPORT	|__divd|
	IMPORT	|__dtos|
	IMPORT	|__gts|
	IMPORT	|__utos|
	IMPORT	|__muls|
	IMPORT	|__divs|
	IMPORT	|__stou|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T43013| DCD	|$LN40@GetTvOutSc|
	DCD	0x40009801
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetTvOutScaling@OMAPDDGPE@@QAAHPAVOMAPSurface@@PAK111@Z| PROC ; OMAPDDGPE::GetTvOutScaling

; 950  : {

  00000		 |$LN40@GetTvOutSc|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M43010|
  00004	e1a08003	 mov         r8, r3
  00008	e1a07002	 mov         r7, r2
  0000c	e1b0a001	 movs        r10, r1
  00010	e1a06000	 mov         r6, r0

; 951  :     BOOL    bResult = FALSE;
; 952  :     float   fTvAspect,
; 953  :             fSurfaceAspect,
; 954  :             fScalingFactorW,
; 955  :             fScalingFactorH;
; 956  : 
; 957  :     
; 958  :     //  Check pointers
; 959  :     if( pSurface == NULL ||
; 960  :         pScaledWidth == NULL ||
; 961  :         pScaledHeight == NULL )

  00014	0a00008e	 beq         |$LN13@GetTvOutSc|
  00018	e3570000	 cmp         r7, #0
  0001c	0a00008c	 beq         |$LN13@GetTvOutSc|
  00020	e3580000	 cmp         r8, #0
  00024	0a00008a	 beq         |$LN13@GetTvOutSc|

; 963  : 
; 964  :     //  Compute aspect ratios of TV and surface
; 965  :     fTvAspect       = (float)(m_dwTvOut_AspectRatio_W) / (float)(m_dwTvOut_AspectRatio_H);

  00028	e5960118	 ldr         r0, [r6, #0x118]
  0002c	eb000000	 bl          __utos
  00030	e1a04000	 mov         r4, r0
  00034	e596011c	 ldr         r0, [r6, #0x11C]
  00038	eb000000	 bl          __utos
  0003c	e1a01000	 mov         r1, r0
  00040	e1a00004	 mov         r0, r4
  00044	eb000000	 bl          __divs

; 966  :     fSurfaceAspect  = (float)(pSurface->Width()) / (float)(pSurface->Height());

  00048	e59ae000	 ldr         lr, [r10]
  0004c	e1a09000	 mov         r9, r0
  00050	e3a01000	 mov         r1, #0
  00054	e59e4008	 ldr         r4, [lr, #8]
  00058	e1a0000a	 mov         r0, r10
  0005c	e1a0e00f	 mov         lr, pc
  00060	e12fff14	 bx          r4
  00064	e59a3000	 ldr         r3, [r10]
  00068	e1a05000	 mov         r5, r0
  0006c	e3a01000	 mov         r1, #0
  00070	e593300c	 ldr         r3, [r3, #0xC]
  00074	e1a0000a	 mov         r0, r10
  00078	e1a0e00f	 mov         lr, pc
  0007c	e12fff13	 bx          r3
  00080	e1a04000	 mov         r4, r0
  00084	e1a00005	 mov         r0, r5
  00088	eb000000	 bl          __utos
  0008c	e1a05000	 mov         r5, r0
  00090	e1a00004	 mov         r0, r4
  00094	eb000000	 bl          __utos
  00098	e1a01000	 mov         r1, r0
  0009c	e1a00005	 mov         r0, r5
  000a0	eb000000	 bl          __divs
  000a4	e1a05000	 mov         r5, r0

; 967  :     fScalingFactorW = (float)(m_dwTvOut_Resize_W / 100.0);

  000a8	e5960120	 ldr         r0, [r6, #0x120]
  000ac	eb000000	 bl          __utod
  000b0	e3a0a101	 mov         r10, #1, 2
  000b4	e38a3859	 orr         r3, r10, #0x59, 16
  000b8	e3a02000	 mov         r2, #0
  000bc	eb000000	 bl          __divd
  000c0	eb000000	 bl          __dtos
  000c4	e1a04000	 mov         r4, r0

; 968  :     fScalingFactorH = (float)(m_dwTvOut_Resize_H / 100.0);

  000c8	e5960124	 ldr         r0, [r6, #0x124]
  000cc	eb000000	 bl          __utod
  000d0	e3a02000	 mov         r2, #0
  000d4	e38a3859	 orr         r3, r10, #0x59, 16
  000d8	eb000000	 bl          __divd
  000dc	eb000000	 bl          __dtos
  000e0	e1a0a000	 mov         r10, r0

; 969  :     
; 970  :     
; 971  : #if 0
; 972  :     //  Ignore the scaling factors if there is no flicker filter enabled
; 973  :     //  And can fit the surface on the screen with just interlacing mode
; 974  :     if( m_dwTvOut_FilterLevel == OMAP_TV_FILTER_LEVEL_OFF && 
; 975  :         (pSurface->Width()  <= m_pDisplayContr->GetTVWidth()/2) &&
; 976  :         (pSurface->Height() <= m_pDisplayContr->GetTVHeight()/2) )
; 977  :     {
; 978  :         //  Can display surface on TV without interlacing (2x the scaled size to indicate that)
; 979  :         *pScaledWidth  = 2 * pSurface->Width();
; 980  :         *pScaledHeight = 2 * pSurface->Height();
; 981  :     }
; 982  :     else if( m_dwTvOut_FilterLevel == OMAP_TV_FILTER_LEVEL_OFF &&
; 983  :         (pSurface->Width()  <= m_pDisplayContr->GetTVWidth()) &&
; 984  :         (pSurface->Height() <= m_pDisplayContr->GetTVHeight()) )
; 985  :     {
; 986  :         //  Can display surface on TV with interlacing
; 987  :         *pScaledWidth  = pSurface->Width();
; 988  :         *pScaledHeight = pSurface->Height();
; 989  :     }
; 990  :     else
; 991  : #endif
; 992  :     {
; 993  :         //  Can't use or don't want to use interlace mode; use scaling instead
; 994  :         //  Check aspect ratios of surface and TV out to scale the surface to maximize the TV screen
; 995  :         if( fTvAspect > fSurfaceAspect )

  000e4	e1a00009	 mov         r0, r9
  000e8	e1a01005	 mov         r1, r5
  000ec	eb000000	 bl          __gts
  000f0	e3500000	 cmp         r0, #0
  000f4	0a000013	 beq         |$LN12@GetTvOutSc|

; 996  :         {
; 997  :             //  Compute output width and height to maximize height on TV display
; 998  :             *pScaledWidth  = (DWORD)(fScalingFactorW * fSurfaceAspect * m_pDisplayContr->GetTVWidth() / fTvAspect);

  000f8	e1a00004	 mov         r0, r4
  000fc	e1a01005	 mov         r1, r5
  00100	eb000000	 bl          __muls
  00104	e59630b0	 ldr         r3, [r6, #0xB0]
  00108	e1a04000	 mov         r4, r0
  0010c	e59304c0	 ldr         r0, [r3, #0x4C0]
  00110	eb000000	 bl          __utos
  00114	e1a01000	 mov         r1, r0
  00118	e1a00004	 mov         r0, r4
  0011c	eb000000	 bl          __muls
  00120	e1a01009	 mov         r1, r9
  00124	eb000000	 bl          __divs
  00128	eb000000	 bl          __stou
  0012c	e5870000	 str         r0, [r7]

; 999  :             *pScaledHeight = (DWORD)(fScalingFactorH * m_pDisplayContr->GetTVHeight());

  00130	e59630b0	 ldr         r3, [r6, #0xB0]
  00134	e59304c4	 ldr         r0, [r3, #0x4C4]
  00138	eb000000	 bl          __utos
  0013c	e1a0100a	 mov         r1, r10
  00140	eb000000	 bl          __muls

; 1000 :         }
; 1001 :         else

  00144	ea000013	 b           |$LN37@GetTvOutSc|
  00148		 |$LN12@GetTvOutSc|

; 1002 :         {
; 1003 :             //  Compute ouptut width and height to maximize width on TV display
; 1004 :             *pScaledWidth  = (DWORD)(fScalingFactorW * m_pDisplayContr->GetTVWidth());

  00148	e59630b0	 ldr         r3, [r6, #0xB0]
  0014c	e59304c0	 ldr         r0, [r3, #0x4C0]
  00150	eb000000	 bl          __utos
  00154	e1a01004	 mov         r1, r4
  00158	eb000000	 bl          __muls
  0015c	eb000000	 bl          __stou
  00160	e1a03000	 mov         r3, r0

; 1005 :             *pScaledHeight = (DWORD)(fScalingFactorH * fTvAspect * m_pDisplayContr->GetTVHeight() / fSurfaceAspect);

  00164	e1a0000a	 mov         r0, r10
  00168	e1a01009	 mov         r1, r9
  0016c	e5873000	 str         r3, [r7]
  00170	eb000000	 bl          __muls
  00174	e59630b0	 ldr         r3, [r6, #0xB0]
  00178	e1a04000	 mov         r4, r0
  0017c	e59304c4	 ldr         r0, [r3, #0x4C4]
  00180	eb000000	 bl          __utos
  00184	e1a01000	 mov         r1, r0
  00188	e1a00004	 mov         r0, r4
  0018c	eb000000	 bl          __muls
  00190	e1a01005	 mov         r1, r5
  00194	eb000000	 bl          __divs
  00198		 |$LN37@GetTvOutSc|
  00198	eb000000	 bl          __stou

; 1006 :         }
; 1007 :     }
; 1008 : 
; 1009 :     //  Compute offsets to center TV output
; 1010 :     if( pScaledXPos != NULL )

  0019c	e59d1020	 ldr         r1, [sp, #0x20]
  001a0	e5880000	 str         r0, [r8]
  001a4	e3a05000	 mov         r5, #0
  001a8	e3510000	 cmp         r1, #0
  001ac	0a000012	 beq         |$LN6@GetTvOutSc|

; 1011 :     {
; 1012 :         //  Compute offset to center display
; 1013 :         *pScaledXPos = (m_pDisplayContr->GetTVWidth() - *pScaledWidth)/2;

  001b0	e59630b0	 ldr         r3, [r6, #0xB0]
  001b4	e5972000	 ldr         r2, [r7]
  001b8	e59334c0	 ldr         r3, [r3, #0x4C0]
  001bc	e0433002	 sub         r3, r3, r2
  001c0	e1a030a3	 mov         r3, r3, lsr #1
  001c4	e5813000	 str         r3, [r1]

; 1014 :         
; 1015 :         //  Adjust by manual over-ride (bound result to stay within TV display
; 1016 :         if( ((LONG)*pScaledXPos + m_lTvOut_Offset_W) < 0 )

  001c8	e596e128	 ldr         lr, [r6, #0x128]
  001cc	e093400e	 adds        r4, r3, lr

; 1017 :         {
; 1018 :             *pScaledXPos = 0;

  001d0	45815000	 strmi       r5, [r1]
  001d4	4a000008	 bmi         |$LN6@GetTvOutSc|

; 1019 :         }
; 1020 :         else if( (*pScaledXPos + m_lTvOut_Offset_W + *pScaledWidth) > m_pDisplayContr->GetTVWidth() )

  001d8	e59620b0	 ldr         r2, [r6, #0xB0]
  001dc	e5970000	 ldr         r0, [r7]
  001e0	e083300e	 add         r3, r3, lr
  001e4	e59224c0	 ldr         r2, [r2, #0x4C0]
  001e8	e0833000	 add         r3, r3, r0
  001ec	e1530002	 cmp         r3, r2

; 1021 :         {
; 1022 :             *pScaledXPos = m_pDisplayContr->GetTVWidth() - *pScaledWidth;

  001f0	80423000	 subhi       r3, r2, r0
  001f4	85813000	 strhi       r3, [r1]

; 1023 :         }
; 1024 :         else
; 1025 :         {
; 1026 :             *pScaledXPos = *pScaledXPos + m_lTvOut_Offset_W;

  001f8	95814000	 strls       r4, [r1]
  001fc		 |$LN6@GetTvOutSc|

; 1027 :         }
; 1028 :     }                 
; 1029 : 
; 1030 :     if( pScaledYPos != NULL )

  001fc	e59d1024	 ldr         r1, [sp, #0x24]
  00200	e3510000	 cmp         r1, #0
  00204	0a000012	 beq         |$LN13@GetTvOutSc|

; 1031 :     {
; 1032 :         //  Compute offset to center display
; 1033 :         *pScaledYPos = (m_pDisplayContr->GetTVHeight() - *pScaledHeight)/2;

  00208	e59630b0	 ldr         r3, [r6, #0xB0]
  0020c	e5982000	 ldr         r2, [r8]
  00210	e59334c4	 ldr         r3, [r3, #0x4C4]
  00214	e0433002	 sub         r3, r3, r2
  00218	e1a030a3	 mov         r3, r3, lsr #1
  0021c	e5813000	 str         r3, [r1]

; 1034 :         
; 1035 :         //  Adjust by manual over-ride (bound result to stay within TV display
; 1036 :         if( ((LONG)*pScaledYPos + m_lTvOut_Offset_H) < 0 )

  00220	e596e12c	 ldr         lr, [r6, #0x12C]
  00224	e093400e	 adds        r4, r3, lr

; 1037 :         {
; 1038 :             *pScaledYPos = 0;

  00228	45815000	 strmi       r5, [r1]
  0022c	4a000008	 bmi         |$LN13@GetTvOutSc|

; 1039 :         }
; 1040 :         else if( (*pScaledYPos + m_lTvOut_Offset_H + *pScaledHeight) > m_pDisplayContr->GetTVHeight() )

  00230	e59620b0	 ldr         r2, [r6, #0xB0]
  00234	e5980000	 ldr         r0, [r8]
  00238	e083300e	 add         r3, r3, lr
  0023c	e59224c4	 ldr         r2, [r2, #0x4C4]
  00240	e0833000	 add         r3, r3, r0
  00244	e1530002	 cmp         r3, r2

; 1041 :         {
; 1042 :             *pScaledYPos = m_pDisplayContr->GetTVHeight() - *pScaledHeight;

  00248	80423000	 subhi       r3, r2, r0
  0024c	85813000	 strhi       r3, [r1]

; 1043 :         }
; 1044 :         else
; 1045 :         {
; 1046 :             *pScaledYPos = *pScaledYPos + m_lTvOut_Offset_H;

  00250	95814000	 strls       r4, [r1]
  00254		 |$LN13@GetTvOutSc|

; 962  :         return bResult;

  00254	e3a00000	 mov         r0, #0

; 1047 :         }
; 1048 :     }                 
; 1049 : 
; 1050 : 
; 1051 :     //  Return result
; 1052 :     return bResult;
; 1053 : }

  00258	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  0025c	e12fff1e	 bx          lr
  00260		 |$M43011|

			 ENDP  ; |?GetTvOutScaling@OMAPDDGPE@@QAAHPAVOMAPSurface@@PAK111@Z|, OMAPDDGPE::GetTvOutScaling

	EXPORT	|??0OMAPDDGPESurface@@QAA@XZ|		; OMAPDDGPESurface::OMAPDDGPESurface
	EXPORT	|??_7OMAPDDGPESurface@@6B@| [ DATA ]	; OMAPDDGPESurface::`vftable'
	EXPORT	|?GetDriverData@DDGPESurf@@UAAPAUDDGPEDriverData@@XZ| ; DDGPESurf::GetDriverData
	EXPORT	|?SetDriverData@DDGPESurf@@UAAXPAUDDGPEDriverData@@@Z| ; DDGPESurf::SetDriverData
	EXPORT	|?SurfaceSize@DDGPESurf@@UAAHXZ|	; DDGPESurf::SurfaceSize
	EXPORT	|?SetOrientation@OMAPDDGPESurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z| ; OMAPDDGPESurface::SetOrientation
	IMPORT	|??0DDGPESurf@@QAA@XZ|			; DDGPESurf::DDGPESurf
	IMPORT	|??_EOMAPDDGPESurface@@UAAPAXI@Z|, WEAK |??_GOMAPDDGPESurface@@UAAPAXI@Z| ; OMAPDDGPESurface::`vector deleting destructor', OMAPDDGPESurface::`scalar deleting destructor'
	IMPORT	|?Init@DDGPESurf@@UAAXHHPAXHW4EGPEFormat@@W4EDDGPEPixelFormat@@@Z| ; DDGPESurf::Init
	IMPORT	|?SetDDGPESurf@DDGPESurf@@UAAXPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z| ; DDGPESurf::SetDDGPESurf
	IMPORT	|?Bpp@DDGPESurf@@UAAKXZ|		; DDGPESurf::Bpp
	IMPORT	|?AlignedWidth@DDGPESurf@@UAAKXZ|	; DDGPESurf::AlignedWidth
	IMPORT	|?SetColorKey@DDGPESurf@@UAAXK@Z|	; DDGPESurf::SetColorKey
	IMPORT	|?ColorKey@DDGPESurf@@UAAKXZ|		; DDGPESurf::ColorKey
	IMPORT	|?SetColorKeyMask@DDGPESurf@@UAAXK@Z|	; DDGPESurf::SetColorKeyMask
	IMPORT	|?ColorKeyMask@DDGPESurf@@UAAKXZ|	; DDGPESurf::ColorKeyMask
	IMPORT	|?SetColorKeyLow@DDGPESurf@@UAAXK@Z|	; DDGPESurf::SetColorKeyLow
	IMPORT	|?ColorKeyLow@DDGPESurf@@UAAKXZ|	; DDGPESurf::ColorKeyLow
	IMPORT	|?SetColorKeyHigh@DDGPESurf@@UAAXK@Z|	; DDGPESurf::SetColorKeyHigh
	IMPORT	|?ColorKeyHigh@DDGPESurf@@UAAKXZ|	; DDGPESurf::ColorKeyHigh
	IMPORT	|?PixelFormat@DDGPESurf@@UAA?AW4EDDGPEPixelFormat@@XZ| ; DDGPESurf::PixelFormat
	IMPORT	|?HasAlpha@DDGPESurf@@UAAHXZ|		; DDGPESurf::HasAlpha

  00000			 AREA	 |.pdata|, PDATA
|$T43023| DCD	|$LN5@OMAPDDGPES|
	DCD	0x40000c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7OMAPDDGPESurface@@6B@| DCD |??_EOMAPDDGPESurface@@UAAPAXI@Z| ; OMAPDDGPESurface::`vftable'
	DCD	|?Init@DDGPESurf@@UAAXHHPAXHW4EGPEFormat@@W4EDDGPEPixelFormat@@@Z|
	DCD	|?SetDDGPESurf@DDGPESurf@@UAAXPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
	DCD	|?Bpp@DDGPESurf@@UAAKXZ|
	DCD	|?AlignedWidth@DDGPESurf@@UAAKXZ|
	DCD	|?SetColorKey@DDGPESurf@@UAAXK@Z|
	DCD	|?ColorKey@DDGPESurf@@UAAKXZ|
	DCD	|?SetColorKeyMask@DDGPESurf@@UAAXK@Z|
	DCD	|?ColorKeyMask@DDGPESurf@@UAAKXZ|
	DCD	|?SetColorKeyLow@DDGPESurf@@UAAXK@Z|
	DCD	|?ColorKeyLow@DDGPESurf@@UAAKXZ|
	DCD	|?SetColorKeyHigh@DDGPESurf@@UAAXK@Z|
	DCD	|?ColorKeyHigh@DDGPESurf@@UAAKXZ|
	DCD	|?PixelFormat@DDGPESurf@@UAA?AW4EDDGPEPixelFormat@@XZ|
	DCD	|?HasAlpha@DDGPESurf@@UAAHXZ|
	DCD	|?GetDriverData@DDGPESurf@@UAAPAUDDGPEDriverData@@XZ|
	DCD	|?SetDriverData@DDGPESurf@@UAAXPAUDDGPEDriverData@@@Z|
	DCD	|?SurfaceSize@DDGPESurf@@UAAHXZ|
	DCD	|?SetOrientation@OMAPDDGPESurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0OMAPDDGPESurface@@QAA@XZ| PROC	; OMAPDDGPESurface::OMAPDDGPESurface

; 1058 : {

  00000		 |$LN5@OMAPDDGPES|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43020|
  00004	e1a04000	 mov         r4, r0
  00008	eb000000	 bl          |??0DDGPESurf@@QAA@XZ|
  0000c	e59f3018	 ldr         r3, [pc, #0x18]

; 1059 :     m_pParentSurface = this;
; 1060 :     m_pAssocSurface = NULL;

  00010	e3a02000	 mov         r2, #0
  00014	e5844084	 str         r4, [r4, #0x84]
  00018	e5843000	 str         r3, [r4]
  0001c	e5842080	 str         r2, [r4, #0x80]

; 1061 : }

  00020	e1a00004	 mov         r0, r4
  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$LN6@OMAPDDGPES|
  0002c		 |$LN7@OMAPDDGPES|
  0002c	00000000	 DCD         |??_7OMAPDDGPESurface@@6B@|
  00030		 |$M43021|

			 ENDP  ; |??0OMAPDDGPESurface@@QAA@XZ|, OMAPDDGPESurface::OMAPDDGPESurface

; File c:\wince600\public\common\oak\inc\ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43035| DCD	|$LN5@GetDriverD|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDriverData@DDGPESurf@@UAAPAUDDGPEDriverData@@XZ| PROC ; DDGPESurf::GetDriverData

; 302  : 	virtual DDGPEDriverData*		GetDriverData(void) { return m_pDriverData; }

  00000		 |$LN5@GetDriverD|
  00000		 |$M43032|
  00000	e5900068	 ldr         r0, [r0, #0x68]
  00004	e12fff1e	 bx          lr
  00008		 |$M43033|

			 ENDP  ; |?GetDriverData@DDGPESurf@@UAAPAUDDGPEDriverData@@XZ|, DDGPESurf::GetDriverData


  00000			 AREA	 |.pdata|, PDATA
|$T43044| DCD	|$LN5@SetDriverD|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetDriverData@DDGPESurf@@UAAXPAUDDGPEDriverData@@@Z| PROC ; DDGPESurf::SetDriverData

; 303  : 	virtual void					SetDriverData(DDGPEDriverData* pDriverData) { m_pDriverData = pDriverData; }

  00000		 |$LN5@SetDriverD|
  00000		 |$M43041|
  00000	e5801068	 str         r1, [r0, #0x68]
  00004	e12fff1e	 bx          lr
  00008		 |$M43042|

			 ENDP  ; |?SetDriverData@DDGPESurf@@UAAXPAUDDGPEDriverData@@@Z|, DDGPESurf::SetDriverData


  00000			 AREA	 |.pdata|, PDATA
|$T43054| DCD	|$LN5@SurfaceSiz|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SurfaceSize@DDGPESurf@@UAAHXZ| PROC	; DDGPESurf::SurfaceSize

; 304  : 	virtual int						SurfaceSize (void) { return m_dwSurfaceSize; }

  00000		 |$LN5@SurfaceSiz|
  00000		 |$M43051|
  00000	e590005c	 ldr         r0, [r0, #0x5C]
  00004	e12fff1e	 bx          lr
  00008		 |$M43052|

			 ENDP  ; |?SurfaceSize@DDGPESurf@@UAAHXZ|, DDGPESurf::SurfaceSize

	EXPORT	|??0OMAPDDGPESurface@@QAA@PAVOMAPSurfaceManager@@PAVOMAPSurface@@@Z| ; OMAPDDGPESurface::OMAPDDGPESurface
	IMPORT	|?PixelFormatToGPEFormat@OMAPDDGPE@@SA?AW4EGPEFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z| ; OMAPDDGPE::PixelFormatToGPEFormat
	IMPORT	|?PixelFormatToDDGPEFormat@OMAPDDGPE@@SA?AW4EDDGPEPixelFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z| ; OMAPDDGPE::PixelFormatToDDGPEFormat
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T43074| DCD	|$LN9@OMAPDDGPES@2|
	DCD	0x40005e02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0OMAPDDGPESurface@@QAA@PAVOMAPSurfaceManager@@PAVOMAPSurface@@@Z| PROC ; OMAPDDGPESurface::OMAPDDGPESurface

; 1068 : {

  00000		 |$LN9@OMAPDDGPES@2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M43071|
  00008	e1a04002	 mov         r4, r2
  0000c	e1a09001	 mov         r9, r1
  00010	e1a0a000	 mov         r10, r0
  00014	eb000000	 bl          |??0DDGPESurf@@QAA@XZ|
  00018	e59f3154	 ldr         r3, [pc, #0x154]

; 1069 :     //  Set the surface pointer to the allocated OMAP surface
; 1070 :     m_pSurface = pSurface;
; 1071 :     m_pParentSurface = this;
; 1072 :     m_pAssocSurface = NULL;

  0001c	e3a0b000	 mov         r11, #0
  00020	e58a407c	 str         r4, [r10, #0x7C]
  00024	e58a3000	 str         r3, [r10]
  00028	e58aa084	 str         r10, [r10, #0x84]
  0002c	e58ab080	 str         r11, [r10, #0x80]

; 1073 :     
; 1074 :     //  Initialize the DDGPESurf parent class
; 1075 :     DDGPESurf::Init( m_pSurface->Width(), 
; 1076 :                      m_pSurface->Height(), 
; 1077 :                      m_pSurface->VirtualAddr(), 
; 1078 :                      m_pSurface->Stride(), 
; 1079 :                      OMAPDDGPE::PixelFormatToGPEFormat(m_pSurface->PixelFormat()), 
; 1080 :                      OMAPDDGPE::PixelFormatToDDGPEFormat(m_pSurface->PixelFormat()) );

  00030	e5940004	 ldr         r0, [r4, #4]
  00034	eb000000	 bl          |?PixelFormatToDDGPEFormat@OMAPDDGPE@@SA?AW4EDDGPEPixelFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z|
  00038	e59a307c	 ldr         r3, [r10, #0x7C]
  0003c	e1a08000	 mov         r8, r0
  00040	e5930004	 ldr         r0, [r3, #4]
  00044	eb000000	 bl          |?PixelFormatToGPEFormat@OMAPDDGPE@@SA?AW4EGPEFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z|
  00048	e59a207c	 ldr         r2, [r10, #0x7C]
  0004c	e1a07000	 mov         r7, r0
  00050	e3a01000	 mov         r1, #0
  00054	e5923000	 ldr         r3, [r2]
  00058	e1a00002	 mov         r0, r2
  0005c	e5933010	 ldr         r3, [r3, #0x10]
  00060	e1a0e00f	 mov         lr, pc
  00064	e12fff13	 bx          r3
  00068	e59a207c	 ldr         r2, [r10, #0x7C]
  0006c	e1a06000	 mov         r6, r0
  00070	e5923000	 ldr         r3, [r2]
  00074	e1a00002	 mov         r0, r2
  00078	e5933004	 ldr         r3, [r3, #4]
  0007c	e1a0e00f	 mov         lr, pc
  00080	e12fff13	 bx          r3
  00084	e59a207c	 ldr         r2, [r10, #0x7C]
  00088	e1a05000	 mov         r5, r0
  0008c	e3a01000	 mov         r1, #0
  00090	e5923000	 ldr         r3, [r2]
  00094	e1a00002	 mov         r0, r2
  00098	e593300c	 ldr         r3, [r3, #0xC]
  0009c	e1a0e00f	 mov         lr, pc
  000a0	e12fff13	 bx          r3
  000a4	e59a207c	 ldr         r2, [r10, #0x7C]
  000a8	e1a04000	 mov         r4, r0
  000ac	e3a01000	 mov         r1, #0
  000b0	e5923000	 ldr         r3, [r2]
  000b4	e1a00002	 mov         r0, r2
  000b8	e5933008	 ldr         r3, [r3, #8]
  000bc	e1a0e00f	 mov         lr, pc
  000c0	e12fff13	 bx          r3
  000c4	e1a01000	 mov         r1, r0
  000c8	e1a0000a	 mov         r0, r10
  000cc	e1a03005	 mov         r3, r5
  000d0	e1a02004	 mov         r2, r4
  000d4	e58d8008	 str         r8, [sp, #8]
  000d8	e58d7004	 str         r7, [sp, #4]
  000dc	e58d6000	 str         r6, [sp]
  000e0	eb000000	 bl          |?Init@DDGPESurf@@UAAXHHPAXHW4EGPEFormat@@W4EDDGPEPixelFormat@@@Z|

; 1081 :     
; 1082 :     //  Set surface attributes
; 1083 :     m_fInVideoMemory = TRUE;
; 1084 :     m_fInUserMemory = FALSE;
; 1085 :     m_dwSurfaceSize = m_pSurface->Height() * m_pSurface->Stride();

  000e4	e59a007c	 ldr         r0, [r10, #0x7C]
  000e8	e3a03001	 mov         r3, #1
  000ec	e58a3020	 str         r3, [r10, #0x20]
  000f0	e58ab024	 str         r11, [r10, #0x24]
  000f4	e5903000	 ldr         r3, [r0]
  000f8	e3a01000	 mov         r1, #0
  000fc	e593300c	 ldr         r3, [r3, #0xC]
  00100	e1a0e00f	 mov         lr, pc
  00104	e12fff13	 bx          r3
  00108	e59a207c	 ldr         r2, [r10, #0x7C]
  0010c	e1a04000	 mov         r4, r0
  00110	e3a01000	 mov         r1, #0
  00114	e5923000	 ldr         r3, [r2]
  00118	e1a00002	 mov         r0, r2
  0011c	e5933010	 ldr         r3, [r3, #0x10]
  00120	e1a0e00f	 mov         lr, pc
  00124	e12fff13	 bx          r3
  00128	e0030490	 mul         r3, r0, r4

; 1086 :     m_nOffsetInVideoMemory = (DWORD)m_pSurface->VirtualAddr() - (DWORD)pSurfaceMgr->VirtualBaseAddr();

  0012c	e59a007c	 ldr         r0, [r10, #0x7C]
  00130	e58a305c	 str         r3, [r10, #0x5C]
  00134	e5903000	 ldr         r3, [r0]
  00138	e5933004	 ldr         r3, [r3, #4]
  0013c	e1a0e00f	 mov         lr, pc
  00140	e12fff13	 bx          r3
  00144	e1a04000	 mov         r4, r0
  00148	e5993000	 ldr         r3, [r9]
  0014c	e1a00009	 mov         r0, r9
  00150	e5933010	 ldr         r3, [r3, #0x10]
  00154	e1a0e00f	 mov         lr, pc
  00158	e12fff13	 bx          r3
  0015c	e0443000	 sub         r3, r4, r0
  00160	e58a3034	 str         r3, [r10, #0x34]

; 1087 : 
; 1088 :     
; 1089 :     DEBUGMSG(GPE_ZONE_VIDEOMEMORY, (TEXT("OMAPDDGPESurface (alloc): vaddr = 0x%08x paddr = 0x%08x\r\n"), m_pSurface->VirtualAddr(), m_pSurface->PhysicalAddr()));
; 1090 :     
; 1091 : }

  00164	e1a0000a	 mov         r0, r10
  00168	e28dd00c	 add         sp, sp, #0xC
  0016c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00170	e12fff1e	 bx          lr
  00174		 |$LN10@OMAPDDGPES@2|
  00174		 |$LN11@OMAPDDGPES@2|
  00174	00000000	 DCD         |??_7OMAPDDGPESurface@@6B@|
  00178		 |$M43072|

			 ENDP  ; |??0OMAPDDGPESurface@@QAA@PAVOMAPSurfaceManager@@PAVOMAPSurface@@@Z|, OMAPDDGPESurface::OMAPDDGPESurface

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T43092| DCD	|$LN9@SetOrienta|
	DCD	0x40002401
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetOrientation@OMAPDDGPESurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z| PROC ; OMAPDDGPESurface::SetOrientation

; 1098 : {

  00000		 |$LN9@SetOrienta|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43089|
  00004	e1a04000	 mov         r4, r0

; 1099 :     //  Check current orientation of the OMAP surface; do nothing if the same
; 1100 :     if( eOrientation == m_pSurface->Orientation() )

  00008	e594007c	 ldr         r0, [r4, #0x7C]
  0000c	e590300c	 ldr         r3, [r0, #0xC]
  00010	e1510003	 cmp         r1, r3

; 1101 :         return TRUE;

  00014	0a00001a	 beq         |$LN6@SetOrienta|

; 1102 : 
; 1103 :     //  Chage OMAP surface orientation
; 1104 :     m_pSurface->SetOrientation( eOrientation );

  00018	e5903000	 ldr         r3, [r0]
  0001c	e5933038	 ldr         r3, [r3, #0x38]
  00020	e1a0e00f	 mov         lr, pc
  00024	e12fff13	 bx          r3

; 1105 :             
; 1106 :     //  Update DDGPE width, height and stride
; 1107 :     m_nWidth = m_pSurface->Width();

  00028	e594007c	 ldr         r0, [r4, #0x7C]
  0002c	e3a01000	 mov         r1, #0
  00030	e5903000	 ldr         r3, [r0]
  00034	e5933008	 ldr         r3, [r3, #8]
  00038	e1a0e00f	 mov         lr, pc
  0003c	e12fff13	 bx          r3

; 1108 :     m_nHeight = m_pSurface->Height();

  00040	e594207c	 ldr         r2, [r4, #0x7C]
  00044	e584002c	 str         r0, [r4, #0x2C]
  00048	e3a01000	 mov         r1, #0
  0004c	e5923000	 ldr         r3, [r2]
  00050	e1a00002	 mov         r0, r2
  00054	e593300c	 ldr         r3, [r3, #0xC]
  00058	e1a0e00f	 mov         lr, pc
  0005c	e12fff13	 bx          r3

; 1109 :     m_nStrideBytes = m_pSurface->Stride();

  00060	e594207c	 ldr         r2, [r4, #0x7C]
  00064	e5840030	 str         r0, [r4, #0x30]
  00068	e3a01000	 mov         r1, #0
  0006c	e5923000	 ldr         r3, [r2]
  00070	e1a00002	 mov         r0, r2
  00074	e5933010	 ldr         r3, [r3, #0x10]
  00078	e1a0e00f	 mov         lr, pc
  0007c	e12fff13	 bx          r3
  00080	e5840008	 str         r0, [r4, #8]
  00084		 |$LN6@SetOrienta|

; 1110 : 
; 1111 :     return TRUE;

  00084	e3a00001	 mov         r0, #1

; 1112 : }

  00088	e8bd4010	 ldmia       sp!, {r4, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$M43090|

			 ENDP  ; |?SetOrientation@OMAPDDGPESurface@@UAAHW4OMAP_SURF_ORIENTATION@@@Z|, OMAPDDGPESurface::SetOrientation

	EXPORT	|??1OMAPDDGPESurface@@UAA@XZ|		; OMAPDDGPESurface::~OMAPDDGPESurface
	IMPORT	|??1DDGPESurf@@UAA@XZ|			; DDGPESurf::~DDGPESurf

  00000			 AREA	 |.pdata|, PDATA
|$T43110| DCD	|$LN11@OMAPDDGPES@3|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1OMAPDDGPESurface@@UAA@XZ| PROC	; OMAPDDGPESurface::~OMAPDDGPESurface

; 1116 : {

  00000		 |$LN11@OMAPDDGPES@3|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43107|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3050	 ldr         r3, [pc, #0x50]

; 1117 :     //  Free the video memory for this surface
; 1118 :     if( m_pSurface )

  0000c	e594207c	 ldr         r2, [r4, #0x7C]
  00010	e5843000	 str         r3, [r4]
  00014	e3520000	 cmp         r2, #0
  00018	0a00000c	 beq         |$LN7@OMAPDDGPES@3|

; 1119 :     {
; 1120 :         DEBUGMSG(GPE_ZONE_VIDEOMEMORY, (TEXT("OMAPDDGPESurface (free): vaddr = 0x%08x paddr = 0x%08x\r\n"), m_pSurface->VirtualAddr(), m_pSurface->PhysicalAddr()));        
; 1121 :         delete m_pSurface;        

  0001c	e5923000	 ldr         r3, [r2]
  00020	e3a01001	 mov         r1, #1
  00024	e1a00002	 mov         r0, r2
  00028	e5933000	 ldr         r3, [r3]
  0002c	e1a0e00f	 mov         lr, pc
  00030	e12fff13	 bx          r3

; 1122 :         if (m_pAssocSurface) delete m_pAssocSurface;

  00034	e5943080	 ldr         r3, [r4, #0x80]
  00038	e1b00003	 movs        r0, r3
  0003c	15903000	 ldrne       r3, [r0]
  00040	13a01001	 movne       r1, #1
  00044	15933000	 ldrne       r3, [r3]
  00048	11a0e00f	 movne       lr, pc
  0004c	112fff13	 bxne        r3
  00050		 |$LN7@OMAPDDGPES@3|

; 1123 :     }
; 1124 : }

  00050	e1a00004	 mov         r0, r4
  00054	eb000000	 bl          |??1DDGPESurf@@UAA@XZ|
  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN12@OMAPDDGPES@3|
  00060		 |$LN13@OMAPDDGPES@3|
  00060	00000000	 DCD         |??_7OMAPDDGPESurface@@6B@|
  00064		 |$M43108|

			 ENDP  ; |??1OMAPDDGPESurface@@UAA@XZ|, OMAPDDGPESurface::~OMAPDDGPESurface

	EXPORT	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z| ; OMAPDDGPE::AllocSurface
	IMPORT	|??0GPESurf@@QAA@HHW4EGPEFormat@@@Z|	; GPESurf::GPESurf
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43161| DCD	|$LN29@AllocSurfa@3|
	DCD	0x40005102
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AllocSurface@OMAPDDGPE@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z| PROC ; OMAPDDGPE::AllocSurface

; 39   : {

  00000		 |$LN29@AllocSurfa@3|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M43158|
  00008	e1a08003	 mov         r8, r3
  0000c	e1a09002	 mov         r9, r2
  00010	e1a07001	 mov         r7, r1
  00014	e1a06000	 mov         r6, r0

; 40   :     UNREFERENCED_PARAMETER(surfaceFlags);
; 41   :     //  Allocate GDI from video memory if 2D ops can be accelerated 
; 42   :     //  Otherwise, allocate a standard GPESurf
; 43   :     if( m_pSurfaceMgr->SupportsOffscreenSurfaces() &&
; 44   :         (width*height >= 8192) &&
; 45   :         (format == m_pPrimarySurf->Format()) )

  00018	e59600b4	 ldr         r0, [r6, #0xB4]
  0001c	e5904000	 ldr         r4, [r0]
  00020	e5944024	 ldr         r4, [r4, #0x24]
  00024	e1a0e00f	 mov         lr, pc
  00028	e12fff14	 bx          r4
  0002c	e59da028	 ldr         r10, [sp, #0x28]
  00030	e3500000	 cmp         r0, #0
  00034	0a000026	 beq         |$trySystemMem$41988|
  00038	e00e0899	 mul         lr, r9, r8
  0003c	e35e0a02	 cmp         lr, #2, 20
  00040	ba000023	 blt         |$trySystemMem$41988|
  00044	e59640bc	 ldr         r4, [r6, #0xBC]
  00048	e594e01c	 ldr         lr, [r4, #0x1C]
  0004c	e15a000e	 cmp         r10, lr
  00050	1a00001f	 bne         |$trySystemMem$41988|

; 46   :     {
; 47   :         BOOL                    bResult;
; 48   :         OMAPSurface*            pOmapSurface;
; 49   :     
; 50   : 
; 51   :         //  Allocate OMAP surface
; 52   :         bResult = m_pSurfaceMgr->AllocateGDI(
; 53   :                                 m_pPrimarySurf->OmapSurface()->PixelFormat(),
; 54   :                                 width,
; 55   :                                 height,
; 56   :                                 &pOmapSurface );

  00054	e59600b4	 ldr         r0, [r6, #0xB4]
  00058	e594307c	 ldr         r3, [r4, #0x7C]
  0005c	e28d5004	 add         r5, sp, #4

; 57   :         if (bResult == FALSE)

  00060	e5902000	 ldr         r2, [r0]
  00064	e5931004	 ldr         r1, [r3, #4]
  00068	e1a03008	 mov         r3, r8
  0006c	e5924030	 ldr         r4, [r2, #0x30]
  00070	e1a02009	 mov         r2, r9
  00074	e58d5000	 str         r5, [sp]
  00078	e1a0e00f	 mov         lr, pc
  0007c	e12fff14	 bx          r4
  00080	e3500000	 cmp         r0, #0
  00084	0a000012	 beq         |$trySystemMem$41988|

; 58   :         {
; 59   :             DEBUGMSG(GPE_ZONE_WARNING, (L"OMAP GDI AllocSurface - Out of Video Memory\n"));
; 60   :             goto trySystemMem;
; 61   :         }
; 62   : 
; 63   :         //  Allocate a OMAPDDGPESurface object to wrap the OMAP surface
; 64   :         *ppSurf = new OMAPDDGPESurface(m_pSurfaceMgr, pOmapSurface);

  00088	e3a00088	 mov         r0, #0x88
  0008c	eb000000	 bl          |??2@YAPAXI@Z|
  00090	e3500000	 cmp         r0, #0
  00094	0a000003	 beq         |$LN11@AllocSurfa@3|
  00098	e59d2004	 ldr         r2, [sp, #4]
  0009c	e59610b4	 ldr         r1, [r6, #0xB4]
  000a0	eb000000	 bl          |??0OMAPDDGPESurface@@QAA@PAVOMAPSurfaceManager@@PAVOMAPSurface@@@Z|
  000a4	ea000000	 b           |$LN12@AllocSurfa@3|
  000a8		 |$LN11@AllocSurfa@3|
  000a8	e3a00000	 mov         r0, #0
  000ac		 |$LN12@AllocSurfa@3|
  000ac	e5870000	 str         r0, [r7]

; 65   :         if (*ppSurf == NULL)

  000b0	e3500000	 cmp         r0, #0
  000b4	1a00000f	 bne         |$LN5@AllocSurfa@3|

; 66   :         {
; 67   :             //  Out of system memory
; 68   :             DEBUGMSG(GPE_ZONE_WARNING, (L"OMAP GDI AllocSurface - Out of Memory\n"));
; 69   :             delete pOmapSurface;

  000b8	e59d0004	 ldr         r0, [sp, #4]
  000bc	e3500000	 cmp         r0, #0
  000c0	15903000	 ldrne       r3, [r0]
  000c4	13a01001	 movne       r1, #1
  000c8	15933000	 ldrne       r3, [r3]
  000cc	11a0e00f	 movne       lr, pc
  000d0	112fff13	 bxne        r3
  000d4		 |$trySystemMem$41988|

; 75   :     }
; 76   : 
; 77   : trySystemMem:
; 78   : 
; 79   :     // Allocate GDI surfaces from system memory
; 80   :     *ppSurf = new GPESurf(width, height, format);

  000d4	e3a0004c	 mov         r0, #0x4C
  000d8	eb000000	 bl          |??2@YAPAXI@Z|
  000dc	e3500000	 cmp         r0, #0
  000e0	0a000006	 beq         |$LN15@AllocSurfa@3|
  000e4	e1a0300a	 mov         r3, r10
  000e8	e1a02008	 mov         r2, r8
  000ec	e1a01009	 mov         r1, r9
  000f0	eb000000	 bl          |??0GPESurf@@QAA@HHW4EGPEFormat@@@Z|
  000f4	ea000002	 b           |$LN16@AllocSurfa@3|
  000f8		 |$LN5@AllocSurfa@3|

; 70   :             goto trySystemMem;
; 71   :         }
; 72   : 
; 73   :         //  Surface created in video memory
; 74   :         return S_OK;

  000f8	e3a00000	 mov         r0, #0
  000fc	ea00000d	 b           |$LN9@AllocSurfa@3|
  00100		 |$LN15@AllocSurfa@3|

; 75   :     }
; 76   : 
; 77   : trySystemMem:
; 78   : 
; 79   :     // Allocate GDI surfaces from system memory
; 80   :     *ppSurf = new GPESurf(width, height, format);

  00100	e3a00000	 mov         r0, #0
  00104		 |$LN16@AllocSurfa@3|
  00104	e5870000	 str         r0, [r7]

; 81   :     if (*ppSurf != NULL)

  00108	e3500000	 cmp         r0, #0
  0010c	0a000007	 beq         |$LN1@AllocSurfa@3|

; 82   :     {
; 83   :         // check we allocated bits succesfully
; 84   :         if (((*ppSurf)->Buffer()) == NULL)

  00110	e5903004	 ldr         r3, [r0, #4]
  00114	e3530000	 cmp         r3, #0
  00118	1afffff6	 bne         |$LN5@AllocSurfa@3|

; 85   :         {
; 86   :             delete *ppSurf;

  0011c	e5903000	 ldr         r3, [r0]
  00120	e3a01001	 mov         r1, #1
  00124	e5933000	 ldr         r3, [r3]
  00128	e1a0e00f	 mov         lr, pc
  0012c	e12fff13	 bx          r3
  00130		 |$LN1@AllocSurfa@3|

; 87   :         }
; 88   :         else
; 89   :         {
; 90   :             return S_OK;

  00130	e3a0313a	 mov         r3, #0x3A, 2

; 91   :         }
; 92   :     }
; 93   : 
; 94   :     DEBUGMSG(GPE_ZONE_WARNING, (L"GDI AllocSurface - Out of Memory\r\n"));
; 95   :     return E_OUTOFMEMORY;

  00134	e3830807	 orr         r0, r3, #7, 16
  00138		 |$LN9@AllocSurfa@3|

; 96   : }

  00138	e28dd008	 add         sp, sp, #8
  0013c	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00140	e12fff1e	 bx          lr
  00144		 |$M43159|

			 ENDP  ; |?AllocSurface@OMAPDDGPE@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z|, OMAPDDGPE::AllocSurface

	EXPORT	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z| ; OMAPDDGPE::AllocSurface

  00000			 AREA	 |.pdata|, PDATA
|$T43183| DCD	|$LN11@AllocSurfa@4|
	DCD	0x40002e02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AllocSurface@OMAPDDGPE@@UAAJPAPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z| PROC ; OMAPDDGPE::AllocSurface

; 142  : {

  00000		 |$LN11@AllocSurfa@4|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M43180|
  00008	e1a04003	 mov         r4, r3
  0000c	e1a06002	 mov         r6, r2
  00010	e1a07001	 mov         r7, r1
  00014	e1a08000	 mov         r8, r0

; 143  :     BOOL            bResult;
; 144  :     OMAPSurface*    pOmapSurface;
; 145  : 
; 146  :     //  Allocate OMAP surface
; 147  :     bResult = m_pSurfaceMgr->Allocate(
; 148  :                             pixelFormat,
; 149  :                             width,
; 150  :                             height,
; 151  :                             &pOmapSurface );

  00018	e59800b4	 ldr         r0, [r8, #0xB4]
  0001c	e59d3020	 ldr         r3, [sp, #0x20]
  00020	e28d5004	 add         r5, sp, #4

; 152  :     if (bResult == FALSE)

  00024	e590e000	 ldr         lr, [r0]
  00028	e1a02004	 mov         r2, r4
  0002c	e1a01006	 mov         r1, r6
  00030	e59e402c	 ldr         r4, [lr, #0x2C]
  00034	e58d5000	 str         r5, [sp]
  00038	e1a0e00f	 mov         lr, pc
  0003c	e12fff14	 bx          r4
  00040	e3500000	 cmp         r0, #0

; 153  :     {
; 154  :         DEBUGMSG(GPE_ZONE_WARNING, (L"OMAP DDraw AllocSurface - Out of Video Memory\n"));
; 155  :         return DDERR_OUTOFVIDEOMEMORY;

  00044	059f0068	 ldreq       r0, [pc, #0x68]
  00048	0a000016	 beq         |$LN3@AllocSurfa@4|

; 156  :     }
; 157  : 
; 158  :     //  Allocate a OMAPDDGPESurface object to wrap the OMAP surface
; 159  :     *ppSurf = new OMAPDDGPESurface(m_pSurfaceMgr, pOmapSurface);

  0004c	e3a00088	 mov         r0, #0x88
  00050	eb000000	 bl          |??2@YAPAXI@Z|
  00054	e3500000	 cmp         r0, #0
  00058	0a000003	 beq         |$LN5@AllocSurfa@4|
  0005c	e59d2004	 ldr         r2, [sp, #4]
  00060	e59810b4	 ldr         r1, [r8, #0xB4]
  00064	eb000000	 bl          |??0OMAPDDGPESurface@@QAA@PAVOMAPSurfaceManager@@PAVOMAPSurface@@@Z|
  00068	ea000000	 b           |$LN6@AllocSurfa@4|
  0006c		 |$LN5@AllocSurfa@4|
  0006c	e3a00000	 mov         r0, #0
  00070		 |$LN6@AllocSurfa@4|
  00070	e5870000	 str         r0, [r7]

; 160  :     if (*ppSurf == NULL)

  00074	e3500000	 cmp         r0, #0
  00078	1a000009	 bne         |$LN1@AllocSurfa@4|

; 161  :     {
; 162  :         //  Out of system memory
; 163  :         DEBUGMSG(GPE_ZONE_WARNING, (L"OMAP DDraw AllocSurface - Out of Memory\n"));
; 164  :         delete pOmapSurface;

  0007c	e59d0004	 ldr         r0, [sp, #4]
  00080	e3500000	 cmp         r0, #0
  00084	15903000	 ldrne       r3, [r0]
  00088	13a01001	 movne       r1, #1
  0008c	15933000	 ldrne       r3, [r3]
  00090	11a0e00f	 movne       lr, pc
  00094	112fff13	 bxne        r3
  00098	e3a0313a	 mov         r3, #0x3A, 2

; 165  :         return E_OUTOFMEMORY;

  0009c	e3830807	 orr         r0, r3, #7, 16
  000a0	ea000000	 b           |$LN3@AllocSurfa@4|
  000a4		 |$LN1@AllocSurfa@4|

; 166  :     }
; 167  : 
; 168  :     //  Surface created in video memory
; 169  :     return S_OK;

  000a4	e3a00000	 mov         r0, #0
  000a8		 |$LN3@AllocSurfa@4|

; 170  : }

  000a8	e28dd008	 add         sp, sp, #8
  000ac	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$LN12@AllocSurfa@4|
  000b4		 |$LN13@AllocSurfa@4|
  000b4	8876017c	 DCD         0x8876017c
  000b8		 |$M43181|

			 ENDP  ; |?AllocSurface@OMAPDDGPE@@UAAJPAPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z|, OMAPDDGPE::AllocSurface

	EXPORT	|?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z| ; OMAPDDGPE::DetermineTvOutSurface
	EXPORT	|??_C@_1GM@EAIMMHOP@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAa?$AAo?$AAr?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAe?$AAd?$AAs@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| ; OMAPDisplayController::EnablePipeline
	IMPORT	|?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z| ; OMAPDisplayController::SetScalingAttribs
	IMPORT	|?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| ; OMAPDisplayController::DisablePipeline
	IMPORT	|?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@KKKK@Z| ; OMAPDisplayController::SetScalingAttribs
	IMPORT	|?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z| ; OMAPDisplayController::SetPipelineAttribs
	IMPORT	|?SetTvOutFilterLevel@OMAPDisplayController@@QAAHK@Z| ; OMAPDisplayController::SetTvOutFilterLevel
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43217| DCD	|$LN39@DetermineT|
	DCD	0x4000c402

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@EAIMMHOP@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAa?$AAo?$AAr?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAe?$AAd?$AAs@| DCB "w"
	DCB	0x0, "i", 0x0, "d", 0x0, "t", 0x0, "h", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, " ", 0x0, "a", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "h", 0x0, "e", 0x0, "i", 0x0, "g", 0x0, "h"
	DCB	0x0, "t", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, " "
	DCB	0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "e", 0x0, "d"
	DCB	0x0, "s", 0x0, " ", 0x0, "T", 0x0, "V", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "p", 0x0, "a"
	DCB	0x0, "b", 0x0, "i", 0x0, "l", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "e", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z| PROC ; OMAPDDGPE::DetermineTvOutSurface

; 757  : {

  00000		 |$LN39@DetermineT|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M43214|
  00008	e1a06001	 mov         r6, r1
  0000c	e1a05000	 mov         r5, r0

; 758  :     BOOL                bResult;
; 759  :     OMAPDDGPESurface*   pOldTVSurf = m_pTVSurf;    
; 760  :     
; 761  :     
; 762  :     //  When GAPI is on, it take precedence when displaying content on the LCD and TV
; 763  :     if( m_bGameEnable && m_pGameSurf )

  00010	e5953138	 ldr         r3, [r5, #0x138]
  00014	e5954108	 ldr         r4, [r5, #0x108]
  00018	e3530000	 cmp         r3, #0
  0001c	0a000024	 beq         |$LN21@DetermineT|
  00020	e5953140	 ldr         r3, [r5, #0x140]
  00024	e3530000	 cmp         r3, #0
  00028	0a000021	 beq         |$LN21@DetermineT|

; 764  :     {
; 765  :         //  Show GAPI surface on TV if TV out enabled
; 766  :         if( m_bTVOutEnable )

  0002c	e5953110	 ldr         r3, [r5, #0x110]
  00030	e3530000	 cmp         r3, #0
  00034	0a0000b1	 beq         |$LN25@DetermineT|

; 767  :         {
; 768  :             DWORD   dwScaledWidth,
; 769  :                     dwScaledHeight;
; 770  :             DWORD   dwPosX,
; 771  :                     dwPosY;                    
; 772  :                     
; 773  :             //  Set flicker filter level
; 774  :             m_pDisplayContr->SetTvOutFilterLevel( m_dwTvOut_FilterLevel );

  00038	e5951114	 ldr         r1, [r5, #0x114]
  0003c	e59500b0	 ldr         r0, [r5, #0xB0]
  00040	eb000000	 bl          |?SetTvOutFilterLevel@OMAPDisplayController@@QAAHK@Z|

; 775  :         
; 776  :             //  Get the scaling for TV display of game surface
; 777  :             GetTvOutScaling( m_pGameSurf, &dwScaledWidth, &dwScaledHeight, &dwPosX, &dwPosY );

  00044	e5951140	 ldr         r1, [r5, #0x140]
  00048	e28de008	 add         lr, sp, #8
  0004c	e28d400c	 add         r4, sp, #0xC
  00050	e28d3010	 add         r3, sp, #0x10
  00054	e28d2014	 add         r2, sp, #0x14
  00058	e1a00005	 mov         r0, r5
  0005c	e58de004	 str         lr, [sp, #4]
  00060	e58d4000	 str         r4, [sp]
  00064	eb000000	 bl          |?GetTvOutScaling@OMAPDDGPE@@QAAHPAVOMAPSurface@@PAK111@Z|

; 778  :                                     
; 779  :             //  Configure the display controller to show the game surface on VID2
; 780  :             bResult = m_pDisplayContr->SetPipelineAttribs(
; 781  :                                             OMAP_DSS_PIPELINE_VIDEO2,
; 782  :                                             OMAP_DSS_DESTINATION_TVOUT, 
; 783  :                                             m_pGameSurf );

  00068	e5953140	 ldr         r3, [r5, #0x140]
  0006c	e59500b0	 ldr         r0, [r5, #0xB0]
  00070	e3a07000	 mov         r7, #0
  00074	e3a02001	 mov         r2, #1
  00078	e3a01002	 mov         r1, #2
  0007c	e58d7004	 str         r7, [sp, #4]
  00080	e58d7000	 str         r7, [sp]
  00084	eb000000	 bl          |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z|

; 784  : 
; 785  :             //  Set the scaling info for the pipeline to NTSC
; 786  :             bResult = m_pDisplayContr->SetScalingAttribs(
; 787  :                                             OMAP_DSS_PIPELINE_VIDEO2,
; 788  :                                             dwScaledWidth,
; 789  :                                             dwScaledHeight,
; 790  :                                             dwPosX,
; 791  :                                             dwPosY );                                 

  00088	e59d1008	 ldr         r1, [sp, #8]
  0008c	e59de00c	 ldr         lr, [sp, #0xC]
  00090	e59d3010	 ldr         r3, [sp, #0x10]
  00094	e59d2014	 ldr         r2, [sp, #0x14]
  00098	e59500b0	 ldr         r0, [r5, #0xB0]
  0009c	e58d1004	 str         r1, [sp, #4]
  000a0	e3a01002	 mov         r1, #2
  000a4	e58de000	 str         lr, [sp]
  000a8	eb000000	 bl          |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@KKKK@Z|

; 792  : 
; 793  :             //  Enable the pipeline
; 794  :             bResult = m_pDisplayContr->EnablePipeline(
; 795  :                                             OMAP_DSS_PIPELINE_VIDEO2 );                                               

  000ac	e3a01002	 mov         r1, #2

; 796  :         }
; 797  :         
; 798  :         //  Return; rest of this logic doesn't apply when GAPI on
; 799  :         return;

  000b0	ea00007e	 b           |$LN36@DetermineT|
  000b4		 |$LN21@DetermineT|

; 800  :     }
; 801  : 
; 802  : 
; 803  :     //  Determine the best surface for displaying on the TV
; 804  :     if( m_bTVOutEnable )

  000b4	e5953110	 ldr         r3, [r5, #0x110]
  000b8	e3a07000	 mov         r7, #0
  000bc	e3530000	 cmp         r3, #0
  000c0	0a000017	 beq         |$LN19@DetermineT|

; 805  :     {
; 806  :         //  Need to show a surface on TV out.  Pick one with emphasis on overlay
; 807  :         if( m_pOverlay1Surf && m_pOverlay2Surf )

  000c4	e59530c0	 ldr         r3, [r5, #0xC0]
  000c8	e1b02003	 movs        r2, r3
  000cc	e59530c4	 ldr         r3, [r5, #0xC4]
  000d0	0a00000c	 beq         |$LN14@DetermineT|
  000d4	e1b01003	 movs        r1, r3
  000d8	0a000006	 beq         |$LN18@DetermineT|

; 808  :         {
; 809  :             //  All 3 layers are active (primary always is).  Display the TV out pipeline
; 810  :             if( m_eTVPipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  000dc	e595310c	 ldr         r3, [r5, #0x10C]
  000e0	e3530001	 cmp         r3, #1

; 811  :             {
; 812  :                 //  Show VID1 overlay
; 813  :                 m_pTVSurf = m_pOverlay1Surf;

  000e4	05852108	 streq       r2, [r5, #0x108]

; 814  :             }
; 815  : 
; 816  :             if( m_eTVPipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  000e8	e3530002	 cmp         r3, #2
  000ec	1a000035	 bne         |$LN10@DetermineT|

; 817  :             {
; 818  :                 //  Show VID2 overlay
; 819  :                 m_pTVSurf = m_pOverlay2Surf;

  000f0	e5851108	 str         r1, [r5, #0x108]

; 820  :             }
; 821  :         }

  000f4	ea000033	 b           |$LN10@DetermineT|
  000f8		 |$LN18@DetermineT|

; 822  :         else if( m_pOverlay1Surf )
; 823  :         {
; 824  :             //  Only overlay surface is active. Show it
; 825  :             //  Set the TV out pipeline to be the other VID
; 826  :             m_pTVSurf = m_pOverlay1Surf;
; 827  :             m_eTVPipeline = OMAP_DSS_PIPELINE_VIDEO2;

  000f8	e3a03002	 mov         r3, #2
  000fc	e585310c	 str         r3, [r5, #0x10C]
  00100	e5852108	 str         r2, [r5, #0x108]
  00104	ea00002f	 b           |$LN10@DetermineT|
  00108		 |$LN14@DetermineT|

; 828  :         }
; 829  :         else if( m_pOverlay2Surf )

  00108	e3530000	 cmp         r3, #0

; 830  :         {
; 831  :             //  Only overlay surface is active. Show it
; 832  :             //  Set the TV out pipeline to be the other VID
; 833  :             m_pTVSurf = m_pOverlay2Surf;
; 834  :             m_eTVPipeline = OMAP_DSS_PIPELINE_VIDEO1;
; 835  :         }
; 836  :         else
; 837  :         {
; 838  :             //  No overlays on.  Show graphics on VID2
; 839  :             m_pTVSurf = m_pPrimarySurf;

  0010c	059530bc	 ldreq       r3, [r5, #0xBC]
  00110	13a02001	 movne       r2, #1

; 840  :             m_eTVPipeline = OMAP_DSS_PIPELINE_VIDEO2;

  00114	03a02002	 moveq       r2, #2
  00118	e5853108	 str         r3, [r5, #0x108]
  0011c	e585210c	 str         r2, [r5, #0x10C]

; 841  :         }
; 842  :     }
; 843  :     else

  00120	ea000028	 b           |$LN10@DetermineT|
  00124		 |$LN19@DetermineT|

; 844  :     {
; 845  :         //  TV out disabled.  See if an overlay on the TV needs to migrate
; 846  :         //  back onto the LCD (only happens when both overlays are active)
; 847  :         if( m_pTVSurf && m_pOverlay1Surf && m_pOverlay2Surf )

  00124	e3540000	 cmp         r4, #0
  00128	0a000025	 beq         |$LN5@DetermineT|
  0012c	e59530c0	 ldr         r3, [r5, #0xC0]
  00130	e3530000	 cmp         r3, #0
  00134	0a00001f	 beq         |$LN9@DetermineT|
  00138	e59530c4	 ldr         r3, [r5, #0xC4]
  0013c	e3530000	 cmp         r3, #0
  00140	0a00001c	 beq         |$LN9@DetermineT|

; 848  :         {
; 849  :             //  Disable the TV pipeline
; 850  :             bResult = m_pDisplayContr->DisablePipeline(
; 851  :                                             m_eTVPipeline );                                               

  00144	e595110c	 ldr         r1, [r5, #0x10C]
  00148	e59500b0	 ldr         r0, [r5, #0xB0]
  0014c	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 852  : 
; 853  :             //  Configure the display controller to show the pipeline on the LCD
; 854  :             bResult = m_pDisplayContr->SetPipelineAttribs(
; 855  :                                             m_eTVPipeline,
; 856  :                                             OMAP_DSS_DESTINATION_LCD, 
; 857  :                                             m_pTVSurf->OmapSurface() );

  00150	e5953108	 ldr         r3, [r5, #0x108]
  00154	e595110c	 ldr         r1, [r5, #0x10C]
  00158	e59500b0	 ldr         r0, [r5, #0xB0]
  0015c	e593307c	 ldr         r3, [r3, #0x7C]
  00160	e3a02000	 mov         r2, #0
  00164	e58d7004	 str         r7, [sp, #4]
  00168	e58d7000	 str         r7, [sp]
  0016c	eb000000	 bl          |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z|

; 858  : 
; 859  :             //  Set the scaling info for the pipeline back to be on the LCD
; 860  :             //  using the cached source and destination rects
; 861  :             if( m_eTVPipeline == OMAP_DSS_PIPELINE_VIDEO1 )

  00170	e595310c	 ldr         r3, [r5, #0x10C]
  00174	e3530001	 cmp         r3, #1

; 862  :             {
; 863  :                 bResult = m_pDisplayContr->SetScalingAttribs(
; 864  :                                                 m_eTVPipeline,
; 865  :                                                 &m_rcOverlay1Src,
; 866  :                                                 &m_rcOverlay1Dest );

  00178	059500b0	 ldreq       r0, [r5, #0xB0]
  0017c	028530d8	 addeq       r3, r5, #0xD8
  00180	028520c8	 addeq       r2, r5, #0xC8
  00184	03a01001	 moveq       r1, #1
  00188	0b000000	 bleq        |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|

; 867  :             }
; 868  : 
; 869  :             if( m_eTVPipeline == OMAP_DSS_PIPELINE_VIDEO2 )

  0018c	e595310c	 ldr         r3, [r5, #0x10C]
  00190	e3530002	 cmp         r3, #2

; 870  :             {
; 871  :                 bResult = m_pDisplayContr->SetScalingAttribs(
; 872  :                                                 m_eTVPipeline,
; 873  :                                                 &m_rcOverlay2Src,
; 874  :                                                 &m_rcOverlay2Dest );

  00194	059500b0	 ldreq       r0, [r5, #0xB0]
  00198	028530f8	 addeq       r3, r5, #0xF8
  0019c	028520e8	 addeq       r2, r5, #0xE8
  001a0	03a01002	 moveq       r1, #2
  001a4	0b000000	 bleq        |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|

; 875  :             }
; 876  : 
; 877  :             //  Enable the pipeline back on the LCD
; 878  :             bResult = m_pDisplayContr->EnablePipeline(
; 879  :                                             m_eTVPipeline );                                               

  001a8	e595110c	 ldr         r1, [r5, #0x10C]
  001ac	e59500b0	 ldr         r0, [r5, #0xB0]
  001b0	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  001b4	ea000002	 b           |$LN5@DetermineT|
  001b8		 |$LN9@DetermineT|

; 880  :         }
; 881  :         else if( m_pTVSurf )
; 882  :         {
; 883  :             //  Disable TV out
; 884  :             bResult = m_pDisplayContr->DisablePipeline(
; 885  :                                             m_eTVPipeline );                                               

  001b8	e595110c	 ldr         r1, [r5, #0x10C]
  001bc	e59500b0	 ldr         r0, [r5, #0xB0]
  001c0	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  001c4		 |$LN5@DetermineT|

; 886  :         }
; 887  :         
; 888  :         //  No TV surface
; 889  :         m_pTVSurf = NULL;

  001c4	e5857108	 str         r7, [r5, #0x108]
  001c8		 |$LN10@DetermineT|

; 890  :     }
; 891  :     
; 892  : 
; 893  :     //  Enable the TV out display    
; 894  :     if( m_pTVSurf && (bForceUpdate || (m_pTVSurf != pOldTVSurf)) )

  001c8	e5953108	 ldr         r3, [r5, #0x108]
  001cc	e3530000	 cmp         r3, #0
  001d0	0a00004a	 beq         |$LN25@DetermineT|
  001d4	e3560000	 cmp         r6, #0
  001d8	1a000001	 bne         |$LN3@DetermineT|
  001dc	e1530004	 cmp         r3, r4
  001e0	0a000046	 beq         |$LN25@DetermineT|
  001e4		 |$LN3@DetermineT|

; 895  :     {
; 896  :         DWORD   dwScaledWidth,
; 897  :                 dwScaledHeight;
; 898  :         DWORD   dwPosX,
; 899  :                 dwPosY;     
; 900  : 
; 901  :         OMAPSurface *pSurface = m_pTVSurf->OmapSurface();
; 902  :                 
; 903  :         //  Disable the TV pipeline
; 904  :         bResult = m_pDisplayContr->DisablePipeline(
; 905  :                                         m_eTVPipeline );                                               

  001e4	e595110c	 ldr         r1, [r5, #0x10C]
  001e8	e59500b0	 ldr         r0, [r5, #0xB0]
  001ec	e593607c	 ldr         r6, [r3, #0x7C]
  001f0	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 906  : 
; 907  :         
; 908  :         if ((pSurface->Width() > 800) || (pSurface->Height() > 800))

  001f4	e5963000	 ldr         r3, [r6]
  001f8	e3a01000	 mov         r1, #0
  001fc	e1a00006	 mov         r0, r6
  00200	e5933008	 ldr         r3, [r3, #8]
  00204	e1a0e00f	 mov         lr, pc
  00208	e12fff13	 bx          r3
  0020c	e3500e32	 cmp         r0, #0x32, 28
  00210	8a000029	 bhi         |$LN1@DetermineT|
  00214	e5963000	 ldr         r3, [r6]
  00218	e3a01000	 mov         r1, #0
  0021c	e1a00006	 mov         r0, r6
  00220	e593300c	 ldr         r3, [r3, #0xC]
  00224	e1a0e00f	 mov         lr, pc
  00228	e12fff13	 bx          r3
  0022c	e3500e32	 cmp         r0, #0x32, 28
  00230	8a000021	 bhi         |$LN1@DetermineT|

; 911  :             return;
; 912  :         }
; 913  :         
; 914  : 
; 915  :         //  Set flicker filter level
; 916  :         m_pDisplayContr->SetTvOutFilterLevel( m_dwTvOut_FilterLevel );

  00234	e5951114	 ldr         r1, [r5, #0x114]
  00238	e59500b0	 ldr         r0, [r5, #0xB0]
  0023c	eb000000	 bl          |?SetTvOutFilterLevel@OMAPDisplayController@@QAAHK@Z|

; 917  :     
; 918  :         //  Get the scaling for TV display
; 919  :         GetTvOutScaling( m_pTVSurf->OmapSurface(), &dwScaledWidth, &dwScaledHeight, &dwPosX, &dwPosY );

  00240	e5953108	 ldr         r3, [r5, #0x108]
  00244	e28de014	 add         lr, sp, #0x14
  00248	e28d4010	 add         r4, sp, #0x10
  0024c	e593107c	 ldr         r1, [r3, #0x7C]
  00250	e28d300c	 add         r3, sp, #0xC
  00254	e28d2008	 add         r2, sp, #8
  00258	e1a00005	 mov         r0, r5
  0025c	e58de004	 str         lr, [sp, #4]
  00260	e58d4000	 str         r4, [sp]
  00264	eb000000	 bl          |?GetTvOutScaling@OMAPDDGPE@@QAAHPAVOMAPSurface@@PAK111@Z|

; 920  :                                 
; 921  :         //  Configure the display controller to show selected TV surface
; 922  :         bResult = m_pDisplayContr->SetPipelineAttribs(
; 923  :                                         m_eTVPipeline,
; 924  :                                         OMAP_DSS_DESTINATION_TVOUT, 
; 925  :                                         m_pTVSurf->OmapSurface() );

  00268	e5953108	 ldr         r3, [r5, #0x108]
  0026c	e595110c	 ldr         r1, [r5, #0x10C]
  00270	e59500b0	 ldr         r0, [r5, #0xB0]
  00274	e593307c	 ldr         r3, [r3, #0x7C]
  00278	e3a02001	 mov         r2, #1
  0027c	e58d7004	 str         r7, [sp, #4]
  00280	e58d7000	 str         r7, [sp]
  00284	eb000000	 bl          |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z|

; 926  : 
; 927  :         //  Set the scaling info for the pipeline 
; 928  :         bResult = m_pDisplayContr->SetScalingAttribs(
; 929  :                                         m_eTVPipeline,
; 930  :                                         dwScaledWidth,
; 931  :                                         dwScaledHeight,
; 932  :                                         dwPosX,
; 933  :                                         dwPosY );    

  00288	e59de014	 ldr         lr, [sp, #0x14]
  0028c	e59d4010	 ldr         r4, [sp, #0x10]
  00290	e59d300c	 ldr         r3, [sp, #0xC]
  00294	e59d2008	 ldr         r2, [sp, #8]
  00298	e595110c	 ldr         r1, [r5, #0x10C]
  0029c	e59500b0	 ldr         r0, [r5, #0xB0]
  002a0	e58de004	 str         lr, [sp, #4]
  002a4	e58d4000	 str         r4, [sp]
  002a8	eb000000	 bl          |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@KKKK@Z|

; 934  :         
; 935  :         //  Enable the pipeline
; 936  :         bResult = m_pDisplayContr->EnablePipeline(
; 937  :                                         m_eTVPipeline );                                               

  002ac	e595110c	 ldr         r1, [r5, #0x10C]
  002b0		 |$LN36@DetermineT|
  002b0	e59500b0	 ldr         r0, [r5, #0xB0]
  002b4	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  002b8	ea000010	 b           |$LN25@DetermineT|
  002bc		 |$LN1@DetermineT|

; 909  :         {
; 910  :             RETAILMSG(1,(L"width(%d) aor height(%d) exceeds TVOUT capabilities\r\n",pSurface->Width(),pSurface->Height()));

  002bc	e5963000	 ldr         r3, [r6]
  002c0	e3a01000	 mov         r1, #0
  002c4	e1a00006	 mov         r0, r6
  002c8	e593300c	 ldr         r3, [r3, #0xC]
  002cc	e1a0e00f	 mov         lr, pc
  002d0	e12fff13	 bx          r3
  002d4	e5963000	 ldr         r3, [r6]
  002d8	e1a04000	 mov         r4, r0
  002dc	e3a01000	 mov         r1, #0
  002e0	e5933008	 ldr         r3, [r3, #8]
  002e4	e1a00006	 mov         r0, r6
  002e8	e1a0e00f	 mov         lr, pc
  002ec	e12fff13	 bx          r3
  002f0	e1a01000	 mov         r1, r0
  002f4	e59f0010	 ldr         r0, [pc, #0x10]
  002f8	e1a02004	 mov         r2, r4
  002fc	eb000000	 bl          NKDbgPrintfW
  00300		 |$LN25@DetermineT|

; 938  :     }
; 939  : }  

  00300	e28dd018	 add         sp, sp, #0x18
  00304	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00308	e12fff1e	 bx          lr
  0030c		 |$LN40@DetermineT|
  0030c		 |$LN41@DetermineT|
  0030c	00000000	 DCD         |??_C@_1GM@EAIMMHOP@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAa?$AAo?$AAr?$AA?5?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAe?$AAd?$AAs@|
  00310		 |$M43215|

			 ENDP  ; |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|, OMAPDDGPE::DetermineTvOutSurface

	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T43230| DCD	|$LN6@scalar|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GOMAPDDGPESurface@@UAAPAXI@Z| PROC	; OMAPDDGPESurface::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43227|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??1OMAPDDGPESurface@@UAA@XZ|
  00010	e3140001	 tst         r4, #1
  00014	11a00005	 movne       r0, r5
  00018	1b000000	 blne        |??3@YAXPAX@Z|
  0001c	e1a00005	 mov         r0, r5
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M43228|

			 ENDP  ; |??_GOMAPDDGPESurface@@UAAPAXI@Z|, OMAPDDGPESurface::`scalar deleting destructor'

	EXPORT	|?ShowOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@PAUtagRECT@@1H@Z| ; OMAPDDGPE::ShowOverlay
	IMPORT	|?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z| ; OMAPDisplayController::RotatePipeline
	IMPORT	|?UpdateScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z| ; OMAPDisplayController::UpdateScalingAttribs
	IMPORT	|?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z| ; OMAPDisplayController::MirrorPipeline
	IMPORT	|__muld|
	IMPORT	|__stod|
	IMPORT	|__dtou|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43302| DCD	|$LN58@ShowOverla|
	DCD	0x40013402
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ShowOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@PAUtagRECT@@1H@Z| PROC ; OMAPDDGPE::ShowOverlay

; 230  : {

  00000		 |$LN58@ShowOverla|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M43299|
  00008	e1a04003	 mov         r4, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1a08001	 mov         r8, r1
  00014	e1a05000	 mov         r5, r0

; 231  :     DWORD               dwResult = DD_OK;
; 232  :     BOOL                bResult;
; 233  :     OMAP_DSS_ROTATION   eRotation = OMAP_DSS_ROTATION_0;
; 234  :     RECT                hdmiRect;
; 235  :     
; 236  :     
; 237  :     //  HDMI support
; 238  :     if( m_bHdmiEnable )

  00018	e595e144	 ldr         lr, [r5, #0x144]
  0001c	e3a09000	 mov         r9, #0
  00020	e3a06000	 mov         r6, #0
  00024	e35e0000	 cmp         lr, #0
  00028	0a00003a	 beq         |$LN28@ShowOverla|

; 239  :     {
; 240  :         //  Just show the overlay in full screen
; 241  :         DWORD srcWidth = pSrcRect->right - pSrcRect->left;

  0002c	e597e008	 ldr         lr, [r7, #8]
  00030	e5973000	 ldr         r3, [r7]
  00034	e04e0003	 sub         r0, lr, r3

; 242  :         DWORD srcHeight = pSrcRect->bottom - pSrcRect->top;
; 243  :         DWORD dstWidth;
; 244  :         DWORD dstHeight;
; 245  :         float fSrcAspect = (float)srcWidth / (float) srcHeight;

  00038	eb000000	 bl          __utos
  0003c	e597e00c	 ldr         lr, [r7, #0xC]
  00040	e5973004	 ldr         r3, [r7, #4]
  00044	e1a04000	 mov         r4, r0
  00048	e04e0003	 sub         r0, lr, r3
  0004c	eb000000	 bl          __utos
  00050	e1a01000	 mov         r1, r0
  00054	e1a00004	 mov         r0, r4
  00058	eb000000	 bl          __divs
  0005c	e1a04000	 mov         r4, r0

; 246  :         float fDstAspect = (float)1280.0 / (float)720.0;
; 247  : 
; 248  :         //  Scale overlay to fill screen
; 249  :         if( fDstAspect > fSrcAspect )

  00060	e59f0464	 ldr         r0, [pc, #0x464]
  00064	e1a01004	 mov         r1, r4
  00068	eb000000	 bl          __gts
  0006c	e3500000	 cmp         r0, #0

; 250  :         {
; 251  :             dstWidth  = (DWORD)(fSrcAspect * 1280.0 / fDstAspect);

  00070	e1a00004	 mov         r0, r4
  00074	0a00000b	 beq         |$LN27@ShowOverla|
  00078	eb000000	 bl          __stod
  0007c	e3a03101	 mov         r3, #1, 2
  00080	e3833725	 orr         r3, r3, #0x25, 14
  00084	e3a02000	 mov         r2, #0
  00088	eb000000	 bl          __muld
  0008c	e59f3434	 ldr         r3, [pc, #0x434]
  00090	e3a02202	 mov         r2, #2, 4
  00094	eb000000	 bl          __divd
  00098	eb000000	 bl          __dtou
  0009c	e1a04000	 mov         r4, r0

; 252  :             dstHeight = 720;

  000a0	e3a01e2d	 mov         r1, #0x2D, 28

; 253  :         }
; 254  :         else

  000a4	ea000009	 b           |$LN26@ShowOverla|
  000a8		 |$LN27@ShowOverla|

; 255  :         {
; 256  :             dstWidth  = 1280;
; 257  :             dstHeight = (DWORD)(fDstAspect * 720.0 / fSrcAspect);

  000a8	e3a04c05	 mov         r4, #5, 24
  000ac	eb000000	 bl          __stod
  000b0	e3a0e101	 mov         lr, #1, 2
  000b4	e1a03001	 mov         r3, r1
  000b8	e1a02000	 mov         r2, r0
  000bc	e38e1725	 orr         r1, lr, #0x25, 14
  000c0	e3a0050a	 mov         r0, #0xA, 10
  000c4	eb000000	 bl          __divd
  000c8	eb000000	 bl          __dtou
  000cc	e1a01000	 mov         r1, r0
  000d0		 |$LN26@ShowOverla|

; 258  :         }
; 259  : 
; 260  :         //  Scaled to fit HDMI 720p screen
; 261  :         hdmiRect.left   = (1280 - dstWidth)/2;

  000d0	e2643c05	 rsb         r3, r4, #5, 24

; 262  :         hdmiRect.right  = hdmiRect.left + dstWidth;
; 263  :         hdmiRect.top    = (720 - dstHeight)/2;

  000d4	e2612e2d	 rsb         r2, r1, #0x2D, 28
  000d8	e1a030a3	 mov         r3, r3, lsr #1
  000dc	e1a020a2	 mov         r2, r2, lsr #1

; 264  :         hdmiRect.bottom = hdmiRect.top + dstHeight;
; 265  : 
; 266  :         pDestRect = &hdmiRect;        
; 267  :         
; 268  :         //  Disable GFX pipeline as we are in fullscreen to save memory bandwith. 
; 269  :         m_pDisplayContr->DisablePipeline(OMAP_DSS_PIPELINE_GFX);              

  000e0	e59500b0	 ldr         r0, [r5, #0xB0]
  000e4	e58d3008	 str         r3, [sp, #8]
  000e8	e58d200c	 str         r2, [sp, #0xC]
  000ec	e0833004	 add         r3, r3, r4
  000f0	e0822001	 add         r2, r2, r1
  000f4	e3a01000	 mov         r1, #0
  000f8	e58d3010	 str         r3, [sp, #0x10]
  000fc	e58d2014	 str         r2, [sp, #0x14]
  00100	e28d4008	 add         r4, sp, #8
  00104	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 270  :         m_pDisplayContr->DisableColorKey( OMAP_DSS_COLORKEY_TRANS_SOURCE, OMAP_DSS_DESTINATION_LCD );

  00108	e59500b0	 ldr         r0, [r5, #0xB0]
  0010c	e3a02000	 mov         r2, #0
  00110	e3a01000	 mov         r1, #0
  00114	eb000000	 bl          |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z|
  00118		 |$LN28@ShowOverla|

; 271  :     }
; 272  :     
; 273  :     //  Check if the overlay surface is part of a flipping chain on layer 1 (video 1)
; 274  :     //  and that video1 is not the TV out surface
; 275  :     if( m_pOverlay1Surf && (m_pOverlay1Surf->Parent() == pOverlaySurf->Parent()) )

  00118	e59530c0	 ldr         r3, [r5, #0xC0]
  0011c	e1b00003	 movs        r0, r3
  00120	0a00002a	 beq         |$LN24@ShowOverla|
  00124	e5981084	 ldr         r1, [r8, #0x84]
  00128	e5903084	 ldr         r3, [r0, #0x84]
  0012c	e1530001	 cmp         r3, r1
  00130	1a000026	 bne         |$LN24@ShowOverla|

; 276  :     {
; 277  :         //  Ensure that the VID1 pipeline is setup for TV out (repositioning not allowed to TV)
; 278  :         if( !m_bTVOutEnable || m_eTVPipeline != OMAP_DSS_PIPELINE_VIDEO1 )

  00134	e5953110	 ldr         r3, [r5, #0x110]
  00138	e3530000	 cmp         r3, #0
  0013c	0a000002	 beq         |$LN23@ShowOverla|
  00140	e595310c	 ldr         r3, [r5, #0x10C]
  00144	e3530001	 cmp         r3, #1
  00148	0a000020	 beq         |$LN24@ShowOverla|
  0014c		 |$LN23@ShowOverla|

; 279  :         {
; 280  :             // if back-to-back show overlay 
; 281  :             CopySurfaceParams(pOverlaySurf->Parent(), pOverlaySurf);

  0014c	e1a02008	 mov         r2, r8
  00150	e1a00005	 mov         r0, r5
  00154	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 282  :             //  Mirror the pipeline output
; 283  :             m_pDisplayContr->MirrorPipeline(
; 284  :                                 OMAP_DSS_PIPELINE_VIDEO1,
; 285  :                                 bMirror );                                               

  00158	e59d2034	 ldr         r2, [sp, #0x34]
  0015c	e59500b0	 ldr         r0, [r5, #0xB0]
  00160	e3a01001	 mov         r1, #1
  00164	eb000000	 bl          |?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z|

; 286  : 
; 287  :             //  Update the scaling info for the pipeline
; 288  :             m_pDisplayContr->UpdateScalingAttribs(
; 289  :                                 OMAP_DSS_PIPELINE_VIDEO1,
; 290  :                                 pSrcRect,
; 291  :                                 pDestRect );   

  00168	e59500b0	 ldr         r0, [r5, #0xB0]
  0016c	e1a03004	 mov         r3, r4
  00170	e1a02007	 mov         r2, r7
  00174	e3a01001	 mov         r1, #1
  00178	eb000000	 bl          |?UpdateScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|

; 292  :             CopySurfaceParams(pOverlaySurf, pOverlaySurf->Parent());

  0017c	e5982084	 ldr         r2, [r8, #0x84]
  00180	e1a01008	 mov         r1, r8
  00184	e1a00005	 mov         r0, r5
  00188	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 293  :                                 
; 294  :             //  Cache the rects    
; 295  :             m_rcOverlay1Src  = *pSrcRect;                                                             

  0018c	e5973000	 ldr         r3, [r7]
  00190	e58530c8	 str         r3, [r5, #0xC8]
  00194	e5973004	 ldr         r3, [r7, #4]
  00198	e58530cc	 str         r3, [r5, #0xCC]
  0019c	e5973008	 ldr         r3, [r7, #8]
  001a0	e58530d0	 str         r3, [r5, #0xD0]
  001a4	e597300c	 ldr         r3, [r7, #0xC]
  001a8	e58530d4	 str         r3, [r5, #0xD4]

; 296  :             m_rcOverlay1Dest = *pDestRect;

  001ac	e5943000	 ldr         r3, [r4]
  001b0	e58530d8	 str         r3, [r5, #0xD8]
  001b4	e5943004	 ldr         r3, [r4, #4]
  001b8	e58530dc	 str         r3, [r5, #0xDC]
  001bc	e5943008	 ldr         r3, [r4, #8]
  001c0	e58530e0	 str         r3, [r5, #0xE0]
  001c4	e594300c	 ldr         r3, [r4, #0xC]
  001c8	e58530e4	 str         r3, [r5, #0xE4]
  001cc	ea0000b8	 b           |$done$42110|
  001d0		 |$LN24@ShowOverla|

; 297  :             goto done;
; 298  :         }
; 299  :     }
; 300  : 
; 301  : 
; 302  :     //  Check if the overlay surface is part of a flipping chain on layer 2 (video 2)
; 303  :     //  and that video2 is not the TV out surface
; 304  :     if( m_pOverlay2Surf && (m_pOverlay2Surf->Parent() == pOverlaySurf->Parent()) )

  001d0	e59530c4	 ldr         r3, [r5, #0xC4]
  001d4	e1b02003	 movs        r2, r3
  001d8	0a00002a	 beq         |$LN20@ShowOverla|
  001dc	e5981084	 ldr         r1, [r8, #0x84]
  001e0	e5923084	 ldr         r3, [r2, #0x84]
  001e4	e1530001	 cmp         r3, r1
  001e8	1a000026	 bne         |$LN20@ShowOverla|

; 305  :     {
; 306  :         //  Ensure that the VID1 pipeline is setup for TV out (repositioning not allowed to TV)
; 307  :         if( !m_bTVOutEnable || m_eTVPipeline != OMAP_DSS_PIPELINE_VIDEO2 )

  001ec	e5953110	 ldr         r3, [r5, #0x110]
  001f0	e3530000	 cmp         r3, #0
  001f4	0a000002	 beq         |$LN19@ShowOverla|
  001f8	e595310c	 ldr         r3, [r5, #0x10C]
  001fc	e3530002	 cmp         r3, #2
  00200	0a000020	 beq         |$LN20@ShowOverla|
  00204		 |$LN19@ShowOverla|

; 308  :         {
; 309  :             // if back-to-back show overlay 
; 310  :             CopySurfaceParams(pOverlaySurf->Parent(), pOverlaySurf);

  00204	e1a02008	 mov         r2, r8
  00208	e1a00005	 mov         r0, r5
  0020c	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 311  : 
; 312  :             //  Mirror the pipeline output
; 313  :             m_pDisplayContr->MirrorPipeline(
; 314  :                                 OMAP_DSS_PIPELINE_VIDEO2,
; 315  :                                 bMirror );                                               

  00210	e59d2034	 ldr         r2, [sp, #0x34]
  00214	e59500b0	 ldr         r0, [r5, #0xB0]
  00218	e3a01002	 mov         r1, #2
  0021c	eb000000	 bl          |?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z|

; 316  : 
; 317  :             //  Update the scaling info for the pipeline
; 318  :             m_pDisplayContr->UpdateScalingAttribs(
; 319  :                                 OMAP_DSS_PIPELINE_VIDEO2,
; 320  :                                 pSrcRect,
; 321  :                                 pDestRect );   

  00220	e59500b0	 ldr         r0, [r5, #0xB0]
  00224	e1a03004	 mov         r3, r4
  00228	e1a02007	 mov         r2, r7
  0022c	e3a01002	 mov         r1, #2
  00230	eb000000	 bl          |?UpdateScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|

; 322  : 
; 323  :             CopySurfaceParams(pOverlaySurf, pOverlaySurf->Parent());

  00234	e5982084	 ldr         r2, [r8, #0x84]
  00238	e1a01008	 mov         r1, r8
  0023c	e1a00005	 mov         r0, r5
  00240	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 324  :                                 
; 325  :             //  Cache the rects    
; 326  :             m_rcOverlay2Src  = *pSrcRect;                                                             

  00244	e5973000	 ldr         r3, [r7]
  00248	e58530e8	 str         r3, [r5, #0xE8]
  0024c	e5973004	 ldr         r3, [r7, #4]
  00250	e58530ec	 str         r3, [r5, #0xEC]
  00254	e5973008	 ldr         r3, [r7, #8]
  00258	e58530f0	 str         r3, [r5, #0xF0]
  0025c	e597300c	 ldr         r3, [r7, #0xC]
  00260	e58530f4	 str         r3, [r5, #0xF4]

; 327  :             m_rcOverlay2Dest = *pDestRect;

  00264	e5943000	 ldr         r3, [r4]
  00268	e58530f8	 str         r3, [r5, #0xF8]
  0026c	e5943004	 ldr         r3, [r4, #4]
  00270	e58530fc	 str         r3, [r5, #0xFC]
  00274	e5943008	 ldr         r3, [r4, #8]
  00278	e5853100	 str         r3, [r5, #0x100]
  0027c	e594300c	 ldr         r3, [r4, #0xC]
  00280	e5853104	 str         r3, [r5, #0x104]

; 480  : 
; 481  : 
; 482  : done:

  00284	ea00008a	 b           |$done$42110|
  00288		 |$LN20@ShowOverla|

; 328  :             goto done;
; 329  : 
; 330  :         }
; 331  :     }
; 332  :     
; 333  : 
; 334  :     //  If both overlays are active and this is not a flipping chain update, can't show any more overlays
; 335  :     if( m_pOverlay1Surf != NULL && m_pOverlay2Surf != NULL )

  00288	e3500000	 cmp         r0, #0
  0028c	0a000044	 beq         |$LN55@ShowOverla|
  00290	e3520000	 cmp         r2, #0

; 336  :     {
; 337  :         DEBUGMSG(GPE_ZONE_ERROR, (L"DDraw ShowOverlay - already showing 2 overlays\r\n"));
; 338  :             
; 339  :         dwResult = (DWORD) DDERR_OUTOFCAPS;

  00294	159f9228	 ldrne       r9, [pc, #0x228]
  00298	1a000085	 bne         |$done$42110|

; 408  :     }
; 409  : 
; 410  : 
; 411  :     //  If there is no current overlay surface on VID2, setup VID2 to show this one
; 412  :     else if( m_pOverlay2Surf == NULL )
; 413  :     {
; 414  :         //  Set the rotation of the pipeline to match the GFX plane
; 415  :         switch( m_iGraphicsRotate )

  0029c	e5953098	 ldr         r3, [r5, #0x98]
  002a0	e3530000	 cmp         r3, #0
  002a4	0a00000c	 beq         |$LN4@ShowOverla|
  002a8	e3530001	 cmp         r3, #1
  002ac	0a000008	 beq         |$LN3@ShowOverla|
  002b0	e3530002	 cmp         r3, #2
  002b4	0a000004	 beq         |$LN2@ShowOverla|
  002b8	e3530004	 cmp         r3, #4
  002bc	1a000007	 bne         |$LN5@ShowOverla|
  002c0	e3a03c01	 mov         r3, #1, 24

; 428  : 
; 429  :             case DMDO_270:
; 430  :                 eRotation = OMAP_DSS_ROTATION_270;

  002c4	e383600e	 orr         r6, r3, #0xE

; 431  :                 break;    

  002c8	ea000004	 b           |$LN5@ShowOverla|
  002cc		 |$LN2@ShowOverla|

; 424  : 
; 425  :             case DMDO_180:
; 426  :                 eRotation = OMAP_DSS_ROTATION_180;

  002cc	e3a060b4	 mov         r6, #0xB4

; 427  :                 break;    

  002d0	ea000002	 b           |$LN5@ShowOverla|
  002d4		 |$LN3@ShowOverla|

; 419  :                 break;    
; 420  : 
; 421  :             case DMDO_90:
; 422  :                 eRotation = OMAP_DSS_ROTATION_90;

  002d4	e3a0605a	 mov         r6, #0x5A

; 423  :                 break;    

  002d8	ea000000	 b           |$LN5@ShowOverla|
  002dc		 |$LN4@ShowOverla|

; 416  :         {
; 417  :             case DMDO_0:
; 418  :                 eRotation = OMAP_DSS_ROTATION_0;

  002dc	e3a06000	 mov         r6, #0
  002e0		 |$LN5@ShowOverla|

; 432  :         }
; 433  : 
; 434  : 
; 435  :         //  Disable the pipeline
; 436  :         bResult = m_pDisplayContr->DisablePipeline(
; 437  :                                         OMAP_DSS_PIPELINE_VIDEO2 );                                               

  002e0	e59500b0	 ldr         r0, [r5, #0xB0]
  002e4	e3a01002	 mov         r1, #2
  002e8	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 438  : 
; 439  : 
; 440  :         //  Configure the display controller to show this overlay on the LCD scaled to the dest rect size
; 441  :         //  using video 1 layer
; 442  :         bResult = m_pDisplayContr->SetPipelineAttribs(
; 443  :                                         OMAP_DSS_PIPELINE_VIDEO2,
; 444  :                                         OMAP_DSS_DESTINATION_LCD, 
; 445  :                                         pOverlaySurf->OmapSurface() );                                 

  002ec	e598307c	 ldr         r3, [r8, #0x7C]
  002f0	e59500b0	 ldr         r0, [r5, #0xB0]
  002f4	e3a0e000	 mov         lr, #0
  002f8	e3a02000	 mov         r2, #0
  002fc	e3a01002	 mov         r1, #2
  00300	e58de004	 str         lr, [sp, #4]
  00304	e58de000	 str         lr, [sp]
  00308	eb000000	 bl          |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z|

; 446  : 
; 447  :         //  Rotate the pipeline output
; 448  :         bResult = m_pDisplayContr->RotatePipeline(
; 449  :                                         OMAP_DSS_PIPELINE_VIDEO2,
; 450  :                                         eRotation );                                               

  0030c	e59500b0	 ldr         r0, [r5, #0xB0]
  00310	e1a02006	 mov         r2, r6
  00314	e3a01002	 mov         r1, #2
  00318	eb000000	 bl          |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|

; 451  : 
; 452  :         //  Mirror the pipeline output
; 453  :         bResult = m_pDisplayContr->MirrorPipeline(
; 454  :                                         OMAP_DSS_PIPELINE_VIDEO2,
; 455  :                                         bMirror );                                               

  0031c	e59d2034	 ldr         r2, [sp, #0x34]
  00320	e59500b0	 ldr         r0, [r5, #0xB0]
  00324	e3a01002	 mov         r1, #2
  00328	eb000000	 bl          |?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z|

; 456  : 
; 457  :         //  Set the scaling info for the pipeline
; 458  :         bResult = m_pDisplayContr->SetScalingAttribs(
; 459  :                                         OMAP_DSS_PIPELINE_VIDEO2,
; 460  :                                         pSrcRect,
; 461  :                                         pDestRect );                                 

  0032c	e59500b0	 ldr         r0, [r5, #0xB0]
  00330	e1a03004	 mov         r3, r4
  00334	e1a02007	 mov         r2, r7
  00338	e3a01002	 mov         r1, #2
  0033c	eb000000	 bl          |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|

; 462  : 
; 463  :         CopySurfaceParams(pOverlaySurf, pOverlaySurf->Parent());

  00340	e5982084	 ldr         r2, [r8, #0x84]
  00344	e1a01008	 mov         r1, r8
  00348	e1a00005	 mov         r0, r5
  0034c	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 464  :         
; 465  :         //  Enable the pipeline
; 466  :         bResult = m_pDisplayContr->EnablePipeline(
; 467  :                                         OMAP_DSS_PIPELINE_VIDEO2 );                                               

  00350	e59500b0	 ldr         r0, [r5, #0xB0]
  00354	e3a01002	 mov         r1, #2
  00358	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 468  : 
; 469  :         //  Cache current surface as the overlay surface
; 470  :         m_pOverlay2Surf = pOverlaySurf;

  0035c	e58580c4	 str         r8, [r5, #0xC4]

; 471  : 
; 472  :         //  Cache the rects    
; 473  :         m_rcOverlay2Src  = *pSrcRect;                                                             

  00360	e5973000	 ldr         r3, [r7]
  00364	e58530e8	 str         r3, [r5, #0xE8]
  00368	e5973004	 ldr         r3, [r7, #4]
  0036c	e58530ec	 str         r3, [r5, #0xEC]
  00370	e5973008	 ldr         r3, [r7, #8]
  00374	e58530f0	 str         r3, [r5, #0xF0]
  00378	e597300c	 ldr         r3, [r7, #0xC]
  0037c	e58530f4	 str         r3, [r5, #0xF4]

; 474  :         m_rcOverlay2Dest = *pDestRect;

  00380	e5943000	 ldr         r3, [r4]
  00384	e58530f8	 str         r3, [r5, #0xF8]
  00388	e5943004	 ldr         r3, [r4, #4]
  0038c	e58530fc	 str         r3, [r5, #0xFC]
  00390	e5943008	 ldr         r3, [r4, #8]
  00394	e5853100	 str         r3, [r5, #0x100]
  00398	e594300c	 ldr         r3, [r4, #0xC]
  0039c	e5853104	 str         r3, [r5, #0x104]
  003a0	ea000040	 b           |$LN7@ShowOverla|
  003a4		 |$LN55@ShowOverla|

; 340  :         goto done;
; 341  :     }
; 342  : 
; 343  : 
; 344  :     //  If there is no current overlay surface on VID1, setup VID1 to show this one
; 345  :     if( m_pOverlay1Surf == NULL )
; 346  :     {
; 347  :         //  Set the rotation of the pipeline to match the GFX plane
; 348  :         switch( m_iGraphicsRotate )

  003a4	e5953098	 ldr         r3, [r5, #0x98]
  003a8	e3530000	 cmp         r3, #0
  003ac	0a00000c	 beq         |$LN12@ShowOverla|
  003b0	e3530001	 cmp         r3, #1
  003b4	0a000008	 beq         |$LN11@ShowOverla|
  003b8	e3530002	 cmp         r3, #2
  003bc	0a000004	 beq         |$LN10@ShowOverla|
  003c0	e3530004	 cmp         r3, #4
  003c4	1a000007	 bne         |$LN13@ShowOverla|
  003c8	e3a03c01	 mov         r3, #1, 24

; 361  : 
; 362  :             case DMDO_270:
; 363  :                 eRotation = OMAP_DSS_ROTATION_270;

  003cc	e383600e	 orr         r6, r3, #0xE

; 364  :                 break;    

  003d0	ea000004	 b           |$LN13@ShowOverla|
  003d4		 |$LN10@ShowOverla|

; 357  : 
; 358  :             case DMDO_180:
; 359  :                 eRotation = OMAP_DSS_ROTATION_180;

  003d4	e3a060b4	 mov         r6, #0xB4

; 360  :                 break;    

  003d8	ea000002	 b           |$LN13@ShowOverla|
  003dc		 |$LN11@ShowOverla|

; 352  :                 break;    
; 353  : 
; 354  :             case DMDO_90:
; 355  :                 eRotation = OMAP_DSS_ROTATION_90;

  003dc	e3a0605a	 mov         r6, #0x5A

; 356  :                 break;    

  003e0	ea000000	 b           |$LN13@ShowOverla|
  003e4		 |$LN12@ShowOverla|

; 349  :         {
; 350  :             case DMDO_0:
; 351  :                 eRotation = OMAP_DSS_ROTATION_0;

  003e4	e3a06000	 mov         r6, #0
  003e8		 |$LN13@ShowOverla|

; 365  :         }
; 366  : 
; 367  : 
; 368  :         //  Disable the pipeline
; 369  :         bResult = m_pDisplayContr->DisablePipeline(
; 370  :                                         OMAP_DSS_PIPELINE_VIDEO1 );                                               

  003e8	e59500b0	 ldr         r0, [r5, #0xB0]
  003ec	e3a01001	 mov         r1, #1
  003f0	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 371  : 
; 372  : 
; 373  :         //  Configure the display controller to show this overlay on the LCD scaled to the dest rect size
; 374  :         //  using video 1 layer
; 375  :         bResult = m_pDisplayContr->SetPipelineAttribs(
; 376  :                                         OMAP_DSS_PIPELINE_VIDEO1,
; 377  :                                         OMAP_DSS_DESTINATION_LCD, 
; 378  :                                         pOverlaySurf->OmapSurface() );                                 

  003f4	e598307c	 ldr         r3, [r8, #0x7C]
  003f8	e59500b0	 ldr         r0, [r5, #0xB0]
  003fc	e3a0e000	 mov         lr, #0
  00400	e3a02000	 mov         r2, #0
  00404	e3a01001	 mov         r1, #1
  00408	e58de004	 str         lr, [sp, #4]
  0040c	e58de000	 str         lr, [sp]
  00410	eb000000	 bl          |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z|

; 379  : 
; 380  :         //  Rotate the pipeline output
; 381  :         bResult = m_pDisplayContr->RotatePipeline(
; 382  :                                         OMAP_DSS_PIPELINE_VIDEO1,
; 383  :                                         eRotation );                                               

  00414	e59500b0	 ldr         r0, [r5, #0xB0]
  00418	e1a02006	 mov         r2, r6
  0041c	e3a01001	 mov         r1, #1
  00420	eb000000	 bl          |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|

; 384  : 
; 385  :         //  Mirror the pipeline output
; 386  :         bResult = m_pDisplayContr->MirrorPipeline(
; 387  :                                         OMAP_DSS_PIPELINE_VIDEO1,
; 388  :                                         bMirror );                                               

  00424	e59d2034	 ldr         r2, [sp, #0x34]
  00428	e59500b0	 ldr         r0, [r5, #0xB0]
  0042c	e3a01001	 mov         r1, #1
  00430	eb000000	 bl          |?MirrorPipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@H@Z|

; 389  : 
; 390  :         //  Set the scaling info for the pipeline
; 391  :         bResult = m_pDisplayContr->SetScalingAttribs(
; 392  :                                         OMAP_DSS_PIPELINE_VIDEO1,
; 393  :                                         pSrcRect,
; 394  :                                         pDestRect );                                 

  00434	e59500b0	 ldr         r0, [r5, #0xB0]
  00438	e1a03004	 mov         r3, r4
  0043c	e1a02007	 mov         r2, r7
  00440	e3a01001	 mov         r1, #1
  00444	eb000000	 bl          |?SetScalingAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@PAUtagRECT@@1@Z|

; 395  : 
; 396  :         CopySurfaceParams(pOverlaySurf, pOverlaySurf->Parent());

  00448	e5982084	 ldr         r2, [r8, #0x84]
  0044c	e1a01008	 mov         r1, r8
  00450	e1a00005	 mov         r0, r5
  00454	eb000000	 bl          |?CopySurfaceParams@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@0@Z|

; 397  :         
; 398  :         //  Enable the pipeline
; 399  :         bResult = m_pDisplayContr->EnablePipeline(
; 400  :                                         OMAP_DSS_PIPELINE_VIDEO1 );                                               

  00458	e59500b0	 ldr         r0, [r5, #0xB0]
  0045c	e3a01001	 mov         r1, #1
  00460	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 401  : 
; 402  :         //  Cache current surface as the overlay surface
; 403  :         m_pOverlay1Surf = pOverlaySurf;

  00464	e58580c0	 str         r8, [r5, #0xC0]

; 404  : 
; 405  :         //  Cache the rects    
; 406  :         m_rcOverlay1Src  = *pSrcRect;                                                             

  00468	e5973000	 ldr         r3, [r7]
  0046c	e58530c8	 str         r3, [r5, #0xC8]
  00470	e5973004	 ldr         r3, [r7, #4]
  00474	e58530cc	 str         r3, [r5, #0xCC]
  00478	e5973008	 ldr         r3, [r7, #8]
  0047c	e58530d0	 str         r3, [r5, #0xD0]
  00480	e597300c	 ldr         r3, [r7, #0xC]
  00484	e58530d4	 str         r3, [r5, #0xD4]

; 407  :         m_rcOverlay1Dest = *pDestRect;

  00488	e5943000	 ldr         r3, [r4]
  0048c	e58530d8	 str         r3, [r5, #0xD8]
  00490	e5943004	 ldr         r3, [r4, #4]
  00494	e58530dc	 str         r3, [r5, #0xDC]
  00498	e5943008	 ldr         r3, [r4, #8]
  0049c	e58530e0	 str         r3, [r5, #0xE0]
  004a0	e594300c	 ldr         r3, [r4, #0xC]
  004a4	e58530e4	 str         r3, [r5, #0xE4]

; 474  :         m_rcOverlay2Dest = *pDestRect;

  004a8		 |$LN7@ShowOverla|

; 475  :     }
; 476  : 
; 477  : 
; 478  :     //  Get the best surface to display on the TV
; 479  :     DetermineTvOutSurface();

  004a8	e3a01000	 mov         r1, #0
  004ac	e1a00005	 mov         r0, r5
  004b0	eb000000	 bl          |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|
  004b4		 |$done$42110|

; 483  :     //  Return result
; 484  :     return dwResult;
; 485  : }  

  004b4	e1a00009	 mov         r0, r9
  004b8	e28dd018	 add         sp, sp, #0x18
  004bc	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  004c0	e12fff1e	 bx          lr
  004c4		 |$LN59@ShowOverla|
  004c4		 |$LN60@ShowOverla|
  004c4	88760168	 DCD         0x88760168
  004c8		 |$LN61@ShowOverla|
  004c8	3ffc71c7	 DCD         0x3ffc71c7
  004cc		 |$LN62@ShowOverla|
  004cc	3fe38e39	 DCD         0x3fe38e39
  004d0		 |$M43300|

			 ENDP  ; |?ShowOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@PAUtagRECT@@1H@Z|, OMAPDDGPE::ShowOverlay

	EXPORT	|?HideOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z| ; OMAPDDGPE::HideOverlay
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43349| DCD	|$LN25@HideOverla|
	DCD	0x40004201
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HideOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z| PROC ; OMAPDDGPE::HideOverlay

; 523  : {

  00000		 |$LN25@HideOverla|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43346|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 524  :     //  Reset the clipping region for the surface
; 525  :     pOverlaySurf->OmapSurface()->SetClipping( NULL );

  0000c	e595007c	 ldr         r0, [r5, #0x7C]
  00010	e3a01000	 mov         r1, #0
  00014	e5903000	 ldr         r3, [r0]
  00018	e5933020	 ldr         r3, [r3, #0x20]
  0001c	e1a0e00f	 mov         lr, pc
  00020	e12fff13	 bx          r3

; 526  :     if (pOverlaySurf->OmapAssocSurface())

  00024	e5953080	 ldr         r3, [r5, #0x80]
  00028	e1b00003	 movs        r0, r3

; 527  :         pOverlaySurf->OmapAssocSurface()->SetClipping(NULL);

  0002c	15903000	 ldrne       r3, [r0]
  00030	13a01000	 movne       r1, #0
  00034	15933020	 ldrne       r3, [r3, #0x20]
  00038	11a0e00f	 movne       lr, pc
  0003c	112fff13	 bxne        r3

; 528  :     // Close RSZHandle
; 529  :     pOverlaySurf->OmapSurface()->SetRSZHandle(NULL, TRUE);

  00040	e595007c	 ldr         r0, [r5, #0x7C]
  00044	e3a02001	 mov         r2, #1
  00048	e3a01000	 mov         r1, #0
  0004c	eb000000	 bl          |?SetRSZHandle@OMAPSurface@@QAAXPAXH@Z|

; 530  :     
; 531  :     //  GFX pipeline may have been disabled if we went into fullscreen mode
; 532  :     m_pDisplayContr->EnablePipeline(OMAP_DSS_PIPELINE_GFX);

  00050	e59400b0	 ldr         r0, [r4, #0xB0]
  00054	e3a01000	 mov         r1, #0
  00058	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 533  :     
; 534  :     //  Disable the overlay pipeline
; 535  :     if( m_pOverlay1Surf && (pOverlaySurf->Parent() == m_pOverlay1Surf->Parent()) )

  0005c	e59430c0	 ldr         r3, [r4, #0xC0]
  00060	e3a06000	 mov         r6, #0
  00064	e3530000	 cmp         r3, #0
  00068	0a000007	 beq         |$LN3@HideOverla|
  0006c	e5952084	 ldr         r2, [r5, #0x84]
  00070	e5933084	 ldr         r3, [r3, #0x84]
  00074	e1520003	 cmp         r2, r3
  00078	1a000003	 bne         |$LN3@HideOverla|

; 536  :     {
; 537  :         m_pDisplayContr->DisablePipeline( OMAP_DSS_PIPELINE_VIDEO1 );

  0007c	e59400b0	 ldr         r0, [r4, #0xB0]
  00080	e3a01001	 mov         r1, #1
  00084	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 538  :         m_pOverlay1Surf = NULL;

  00088	e58460c0	 str         r6, [r4, #0xC0]
  0008c		 |$LN3@HideOverla|

; 539  :     }
; 540  :     
; 541  :     if( m_pOverlay2Surf && (pOverlaySurf->Parent() == m_pOverlay2Surf->Parent()) )

  0008c	e59430c4	 ldr         r3, [r4, #0xC4]
  00090	e3530000	 cmp         r3, #0
  00094	0a000007	 beq         |$LN2@HideOverla|
  00098	e5952084	 ldr         r2, [r5, #0x84]
  0009c	e5933084	 ldr         r3, [r3, #0x84]
  000a0	e1520003	 cmp         r2, r3
  000a4	1a000003	 bne         |$LN2@HideOverla|

; 542  :     {
; 543  :         m_pDisplayContr->DisablePipeline( OMAP_DSS_PIPELINE_VIDEO2 );

  000a8	e59400b0	 ldr         r0, [r4, #0xB0]
  000ac	e3a01002	 mov         r1, #2
  000b0	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 544  :         m_pOverlay2Surf = NULL;

  000b4	e58460c4	 str         r6, [r4, #0xC4]
  000b8		 |$LN2@HideOverla|

; 545  :     }
; 546  : 
; 547  :     //  Disable any global alpha value and color key if both overlays are off
; 548  :     if( m_pOverlay1Surf == NULL && m_pOverlay2Surf == NULL )

  000b8	e59430c0	 ldr         r3, [r4, #0xC0]
  000bc	e3530000	 cmp         r3, #0
  000c0	1a00000a	 bne         |$LN1@HideOverla|
  000c4	e59430c4	 ldr         r3, [r4, #0xC4]
  000c8	e3530000	 cmp         r3, #0
  000cc	1a000007	 bne         |$LN1@HideOverla|

; 549  :     {
; 550  :         m_pDisplayContr->DisableColorKey( OMAP_DSS_COLORKEY_TRANS_SOURCE, OMAP_DSS_DESTINATION_LCD );

  000d0	e59400b0	 ldr         r0, [r4, #0xB0]
  000d4	e3a02000	 mov         r2, #0
  000d8	e3a01000	 mov         r1, #0
  000dc	eb000000	 bl          |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z|

; 551  :         m_pDisplayContr->DisableColorKey( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX, OMAP_DSS_DESTINATION_LCD );

  000e0	e59400b0	 ldr         r0, [r4, #0xB0]
  000e4	e3a02000	 mov         r2, #0
  000e8	e3a01002	 mov         r1, #2
  000ec	eb000000	 bl          |?DisableColorKey@OMAPDisplayController@@QAAHW4OMAP_DSS_COLORKEY@@W4OMAP_DSS_DESTINATION@@@Z|
  000f0		 |$LN1@HideOverla|

; 552  :     }
; 553  : 
; 554  :     //  Get the best surface to display on the TV
; 555  :     DetermineTvOutSurface();

  000f0	e3a01000	 mov         r1, #0
  000f4	e1a00004	 mov         r0, r4
  000f8	eb000000	 bl          |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|

; 556  :     
; 557  :     //  Result
; 558  :     return DD_OK;

  000fc	e3a00000	 mov         r0, #0

; 559  : }  

  00100	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00104	e12fff1e	 bx          lr
  00108		 |$M43347|

			 ENDP  ; |?HideOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z|, OMAPDDGPE::HideOverlay

	END
