; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DDGPE\halsurf.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?g_dwSurfaceCount@@3KA| [ DATA ]	; g_dwSurfaceCount

  00000			 AREA	 |.data|, DATA
|?g_dwSurfaceCount@@3KA| DCD 0x1			; g_dwSurfaceCount

  00000			 AREA	 |.rdata|, DATA, READONLY
|FourCCDescriptionTable| DCD 0x32595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x56595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x55595659
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x59565955
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x36315659
	DCD	0x10
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x32315659
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x3231564e
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x30323449
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x56555949
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	EXPORT	|?BytesPerPixel@GPESurf@@QAAHXZ|	; GPESurf::BytesPerPixel
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42492| DCD	|$LN5@BytesPerPi|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?BytesPerPixel@GPESurf@@QAAHXZ| PROC	; GPESurf::BytesPerPixel

; 183  :     {

  00000		 |$LN5@BytesPerPi|
  00000		 |$M42489|

; 184  :         return m_BytesPixel;

  00000	e5900044	 ldr         r0, [r0, #0x44]

; 185  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M42490|

			 ENDP  ; |?BytesPerPixel@GPESurf@@QAAHXZ|, GPESurf::BytesPerPixel

	EXPORT	|?PrimarySurface@GPE@@QAAPAVGPESurf@@XZ| ; GPE::PrimarySurface

  00000			 AREA	 |.pdata|, PDATA
|$T42502| DCD	|$LN5@PrimarySur|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PrimarySurface@GPE@@QAAPAVGPESurf@@XZ| PROC ; GPE::PrimarySurface

; 471  :     {

  00000		 |$LN5@PrimarySur|
  00000		 |$M42499|

; 472  :         return m_pPrimarySurface;

  00000	e5900004	 ldr         r0, [r0, #4]

; 473  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M42500|

			 ENDP  ; |?PrimarySurface@GPE@@QAAPAVGPESurf@@XZ|, GPE::PrimarySurface

	EXPORT	|?IsOverlay@DDGPESurf@@QAAHXZ|		; DDGPESurf::IsOverlay
; File c:\wince600\public\common\oak\inc\ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42512| DCD	|$LN5@IsOverlay|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsOverlay@DDGPESurf@@QAAHXZ| PROC	; DDGPESurf::IsOverlay

; 313  : 	{

  00000		 |$LN5@IsOverlay|
  00000		 |$M42509|

; 314  : 		return m_bOverlay; 

  00000	e5900060	 ldr         r0, [r0, #0x60]

; 315  : 	}

  00004	e12fff1e	 bx          lr
  00008		 |$M42510|

			 ENDP  ; |?IsOverlay@DDGPESurf@@QAAHXZ|, DDGPESurf::IsOverlay

	EXPORT	|?SetOverlay@DDGPESurf@@QAAXXZ|		; DDGPESurf::SetOverlay

  00000			 AREA	 |.pdata|, PDATA
|$T42520| DCD	|$LN5@SetOverlay|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetOverlay@DDGPESurf@@QAAXXZ| PROC	; DDGPESurf::SetOverlay

; 318  : 	{

  00000		 |$LN5@SetOverlay|
  00000		 |$M42517|

; 319  : 		m_bOverlay = TRUE; 

  00000	e3a03001	 mov         r3, #1
  00004	e5803060	 str         r3, [r0, #0x60]

; 320  : 	}

  00008	e12fff1e	 bx          lr
  0000c		 |$M42518|

			 ENDP  ; |?SetOverlay@DDGPESurf@@QAAXXZ|, DDGPESurf::SetOverlay

	EXPORT	|?DDGPEPrimarySurface@DDGPE@@QAAPAVDDGPESurf@@XZ| ; DDGPE::DDGPEPrimarySurface
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42534| DCD	|$LN7@DDGPEPrima|
	DCD	0x40000200
; Function compile flags: /Ogspy
; File c:\wince600\public\common\oak\inc\ddgpe.h

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DDGPEPrimarySurface@DDGPE@@QAAPAVDDGPESurf@@XZ| PROC ; DDGPE::DDGPEPrimarySurface

; 506  :     DDGPESurf * DDGPEPrimarySurface() {

  00000		 |$LN7@DDGPEPrima|
  00000		 |$M42531|

; 507  : #ifdef _CPPRTTI
; 508  : 
; 509  :         return (dynamic_cast<DDGPESurf *>(PrimarySurface()));
; 510  : #else
; 511  : 
; 512  :         // Not safe. Please compile with RTTI.
; 513  : 
; 514  :         return ((DDGPESurf *)PrimarySurface());

  00000	e5900004	 ldr         r0, [r0, #4]

; 515  : #endif
; 516  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M42532|

			 ENDP  ; |?DDGPEPrimarySurface@DDGPE@@QAAPAVDDGPESurf@@XZ|, DDGPE::DDGPEPrimarySurface

	EXPORT	|?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| ; OMAPSurface::PixelFormat
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T42544| DCD	|$LN5@PixelForma|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| PROC ; OMAPSurface::PixelFormat

; 761  :     OMAP_DSS_PIXELFORMAT    PixelFormat() { return m_ePixelFormat; }

  00000		 |$LN5@PixelForma|
  00000		 |$M42541|
  00000	e5900004	 ldr         r0, [r0, #4]
  00004	e12fff1e	 bx          lr
  00008		 |$M42542|

			 ENDP  ; |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|, OMAPSurface::PixelFormat

	EXPORT	|?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| ; OMAPDDGPESurface::OmapSurface
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42554| DCD	|$LN5@OmapSurfac|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| PROC ; OMAPDDGPESurface::OmapSurface

; 102  :     OMAPSurface*        OmapSurface() { return m_pSurface; }

  00000		 |$LN5@OmapSurfac|
  00000		 |$M42551|
  00000	e590007c	 ldr         r0, [r0, #0x7C]
  00004	e12fff1e	 bx          lr
  00008		 |$M42552|

			 ENDP  ; |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|, OMAPDDGPESurface::OmapSurface

	EXPORT	|?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|	; OMAPDDGPESurface::Parent

  00000			 AREA	 |.pdata|, PDATA
|$T42564| DCD	|$LN5@Parent|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ| PROC ; OMAPDDGPESurface::Parent

; 104  :     OMAPDDGPESurface*   Parent() { return m_pParentSurface; }

  00000		 |$LN5@Parent|
  00000		 |$M42561|
  00000	e5900084	 ldr         r0, [r0, #0x84]
  00004	e12fff1e	 bx          lr
  00008		 |$M42562|

			 ENDP  ; |?Parent@OMAPDDGPESurface@@QAAPAV1@XZ|, OMAPDDGPESurface::Parent

	EXPORT	|?SetParent@OMAPDDGPESurface@@QAAXPAV1@@Z| ; OMAPDDGPESurface::SetParent

  00000			 AREA	 |.pdata|, PDATA
|$T42573| DCD	|$LN5@SetParent|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetParent@OMAPDDGPESurface@@QAAXPAV1@@Z| PROC ; OMAPDDGPESurface::SetParent

; 105  :     VOID                SetParent( OMAPDDGPESurface* pParent ) { m_pParentSurface = pParent; }

  00000		 |$LN5@SetParent|
  00000		 |$M42570|
  00000	e5801084	 str         r1, [r0, #0x84]
  00004	e12fff1e	 bx          lr
  00008		 |$M42571|

			 ENDP  ; |?SetParent@OMAPDDGPESurface@@QAAXPAV1@@Z|, OMAPDDGPESurface::SetParent

	EXPORT	|?HalGetBltStatus@@YAKPAU_DDHAL_GETBLTSTATUSDATA@@@Z| ; HalGetBltStatus
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\halsurf.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T42583| DCD	|$LN5@HalGetBltS|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalGetBltStatus@@YAKPAU_DDHAL_GETBLTSTATUSDATA@@@Z| PROC ; HalGetBltStatus

; 73   : {

  00000		 |$LN5@HalGetBltS|
  00000		 |$M42580|

; 74   :     pd->ddRVal = DD_OK;

  00000	e3a03000	 mov         r3, #0
  00004	e580300c	 str         r3, [r0, #0xC]

; 75   :     return DDHAL_DRIVER_HANDLED;

  00008	e3a00001	 mov         r0, #1

; 76   : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M42581|

			 ENDP  ; |?HalGetBltStatus@@YAKPAU_DDHAL_GETBLTSTATUSDATA@@@Z|, HalGetBltStatus

	EXPORT	|?HalCanCreateSurface@@YAKPAU_DDHAL_CANCREATESURFACEDATA@@@Z| ; HalCanCreateSurface
	IMPORT	|GetGPE|
	IMPORT	|DDGPECanCreateSurface|

  00000			 AREA	 |.pdata|, PDATA
|$T42610| DCD	|$LN60@HalCanCrea|
	DCD	0x4000e301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalCanCreateSurface@@YAKPAU_DDHAL_CANCREATESURFACEDATA@@@Z| PROC ; HalCanCreateSurface

; 83   : {

  00000		 |$LN60@HalCanCrea|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M42607|
  00004	e1a06000	 mov         r6, r0

; 84   :     DWORD   result;
; 85   :     
; 86   :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"+HalCanCreateSurface() -------------------------------\r\n"));
; 87   :     
; 88   :     //  Check for surface to create
; 89   :     if( pd->bIsDifferentPixelFormat )

  00008	e5963008	 ldr         r3, [r6, #8]

; 90   :     {
; 91   :         LPDDSCAPS           pDDSCaps = &(pd->lpDDSurfaceDesc->ddsCaps);
; 92   :         LPDDPIXELFORMAT     pDDPixelFormat = &(pd->lpDDSurfaceDesc->ddpfPixelFormat);
; 93   :         
; 94   :         
; 95   :         //  Set default result
; 96   :         pd->ddRVal = DDERR_UNSUPPORTEDFORMAT;
; 97   :         result = DDHAL_DRIVER_HANDLED;
; 98   : 
; 99   : 
; 100  :         //  Surface is different from primary
; 101  :         //  Check where surface needs to be allocated on
; 102  :         if( (pDDSCaps->dwCaps & (DDSCAPS_VIDEOMEMORY|DDSCAPS_SYSTEMMEMORY)) == 0 )

  0000c	e3a07001	 mov         r7, #1
  00010	e3530000	 cmp         r3, #0
  00014	0a0000d2	 beq         |$LN42@HalCanCrea|
  00018	e5964004	 ldr         r4, [r6, #4]
  0001c	e59f5364	 ldr         r5, [pc, #0x364]
  00020	e1a03004	 mov         r3, r4
  00024	e586500c	 str         r5, [r6, #0xC]
  00028	e5b32064	 ldr         r2, [r3, #0x64]!
  0002c	e3120d06	 tst         r2, #6, 26

; 103  :         {
; 104  :             //  No preference indicated; just use DDGPE function
; 105  :             result = DDGPECanCreateSurface(pd);

  00030	0a000001	 beq         |$LN55@HalCanCrea|

; 106  :         }
; 107  :         else if( pDDSCaps->dwCaps & DDSCAPS_SYSTEMMEMORY )

  00034	e3120080	 tst         r2, #0x80
  00038	0a000003	 beq         |$LN39@HalCanCrea|
  0003c		 |$LN55@HalCanCrea|

; 108  :         {
; 109  :             //  System memory preference indicated; just use DDGPE function
; 110  :             result = DDGPECanCreateSurface(pd);

  0003c	e1a00006	 mov         r0, r6
  00040	eb000000	 bl          DDGPECanCreateSurface
  00044	e1a07000	 mov         r7, r0
  00048	ea0000c7	 b           |$LN1@HalCanCrea|
  0004c		 |$LN39@HalCanCrea|

; 111  :         }
; 112  :         else if( pDDSCaps->dwCaps & DDSCAPS_PRIMARYSURFACE )

  0004c	e3120040	 tst         r2, #0x40
  00050	0a00004d	 beq         |$LN37@HalCanCrea|

; 113  :         {
; 114  :             OMAPDDGPE*  pDDGPE = (OMAPDDGPE*) GetGPE();

  00054	eb000000	 bl          GetGPE

; 115  : 
; 116  :             if(!(pDDPixelFormat->dwFlags & DDPF_ALPHAPREMULT))

  00058	e5943048	 ldr         r3, [r4, #0x48]
  0005c	e3130902	 tst         r3, #2, 18
  00060	1a000047	 bne         |$LN11@HalCanCrea|

; 117  :             {
; 118  :                 //  Check for a match of the pixel type with the primary surface pixel type
; 119  :                 if( pDDPixelFormat->dwFlags & DDPF_RGB )

  00064	e3130040	 tst         r3, #0x40
  00068	0a0000bf	 beq         |$LN1@HalCanCrea|

; 120  :                 {
; 121  :                     //  Check pixel sizes
; 122  :                         if( (pDDPixelFormat->dwRGBBitCount == 16) || (pDDPixelFormat->dwRGBBitCount == 32) )

  0006c	e5943050	 ldr         r3, [r4, #0x50]
  00070	e3530010	 cmp         r3, #0x10
  00074	0a000001	 beq         |$LN33@HalCanCrea|
  00078	e3530020	 cmp         r3, #0x20
  0007c	1a0000ba	 bne         |$LN1@HalCanCrea|
  00080		 |$LN33@HalCanCrea|

; 123  :                     {
; 124  :                         switch( pDDGPE->GetPrimaryPixelFormat() )

  00080	e5903000	 ldr         r3, [r0]
  00084	e59330e4	 ldr         r3, [r3, #0xE4]
  00088	e1a0e00f	 mov         lr, pc
  0008c	e12fff13	 bx          r3
  00090	e3500005	 cmp         r0, #5
  00094	0a00002e	 beq         |$LN28@HalCanCrea|
  00098	e3500006	 cmp         r0, #6
  0009c	0a000020	 beq         |$LN30@HalCanCrea|
  000a0	e3500008	 cmp         r0, #8
  000a4	0a000012	 beq         |$LN29@HalCanCrea|
  000a8	e350000c	 cmp         r0, #0xC
  000ac	0a00000d	 beq         |$LN27@HalCanCrea|
  000b0	e350000d	 cmp         r0, #0xD
  000b4	1a0000ac	 bne         |$LN1@HalCanCrea|

; 141  : 
; 142  :                             case OMAP_DSS_PIXELFORMAT_RGBA32:
; 143  :                                 pd->ddRVal = (IsRGBA32(pDDPixelFormat)) ? DD_OK : DDERR_UNSUPPORTEDFORMAT;

  000b8	e5943060	 ldr         r3, [r4, #0x60]
  000bc	e35300ff	 cmp         r3, #0xFF
  000c0	1a00002f	 bne         |$LN11@HalCanCrea|
  000c4	e5943054	 ldr         r3, [r4, #0x54]
  000c8	e35304ff	 cmp         r3, #0xFF, 8
  000cc	1a00002c	 bne         |$LN11@HalCanCrea|
  000d0	e5943058	 ldr         r3, [r4, #0x58]
  000d4	e35308ff	 cmp         r3, #0xFF, 16
  000d8	1a000029	 bne         |$LN11@HalCanCrea|
  000dc	e594305c	 ldr         r3, [r4, #0x5C]
  000e0	e3530cff	 cmp         r3, #0xFF, 24

; 144  :                                 break;

  000e4	ea000025	 b           |$LN56@HalCanCrea|
  000e8		 |$LN27@HalCanCrea|

; 136  :                                 break;
; 137  : 
; 138  :                             case OMAP_DSS_PIXELFORMAT_ARGB32:
; 139  :                                 pd->ddRVal = (IsARGB32(pDDPixelFormat)) ? DD_OK : DDERR_UNSUPPORTEDFORMAT;

  000e8	e5943060	 ldr         r3, [r4, #0x60]
  000ec	e35304ff	 cmp         r3, #0xFF, 8

; 140  :                                 break;

  000f0	ea000001	 b           |$LN57@HalCanCrea|
  000f4		 |$LN29@HalCanCrea|

; 129  : 
; 130  :                             case OMAP_DSS_PIXELFORMAT_RGB32:
; 131  :                                 pd->ddRVal = (IsRGB32(pDDPixelFormat)) ? DD_OK : DDERR_UNSUPPORTEDFORMAT;

  000f4	e5943060	 ldr         r3, [r4, #0x60]
  000f8	e3530000	 cmp         r3, #0
  000fc		 |$LN57@HalCanCrea|
  000fc	1a000020	 bne         |$LN11@HalCanCrea|
  00100	e5943054	 ldr         r3, [r4, #0x54]
  00104	e35308ff	 cmp         r3, #0xFF, 16
  00108	1a00001d	 bne         |$LN11@HalCanCrea|
  0010c	e5943058	 ldr         r3, [r4, #0x58]
  00110	e3530cff	 cmp         r3, #0xFF, 24
  00114	1a00001a	 bne         |$LN11@HalCanCrea|
  00118	e594305c	 ldr         r3, [r4, #0x5C]
  0011c	e35300ff	 cmp         r3, #0xFF

; 132  :                                 break;

  00120	ea000016	 b           |$LN56@HalCanCrea|
  00124		 |$LN30@HalCanCrea|

; 125  :                         {
; 126  :                             case OMAP_DSS_PIXELFORMAT_RGB16:
; 127  :                                 pd->ddRVal = (IsRGB16(pDDPixelFormat)) ? DD_OK : DDERR_UNSUPPORTEDFORMAT;

  00124	e5943060	 ldr         r3, [r4, #0x60]
  00128	e3530000	 cmp         r3, #0
  0012c	1a000014	 bne         |$LN11@HalCanCrea|
  00130	e5943054	 ldr         r3, [r4, #0x54]
  00134	e3530b3e	 cmp         r3, #0x3E, 22
  00138	1a000011	 bne         |$LN11@HalCanCrea|
  0013c	e5943058	 ldr         r3, [r4, #0x58]
  00140	e3530e7e	 cmp         r3, #0x7E, 28
  00144	1a00000e	 bne         |$LN11@HalCanCrea|
  00148	e594305c	 ldr         r3, [r4, #0x5C]
  0014c	e353001f	 cmp         r3, #0x1F

; 128  :                                 break;

  00150	ea00000a	 b           |$LN56@HalCanCrea|
  00154		 |$LN28@HalCanCrea|

; 133  : 
; 134  :                             case OMAP_DSS_PIXELFORMAT_ARGB16:
; 135  :                                 pd->ddRVal = (IsARGB16(pDDPixelFormat)) ? DD_OK : DDERR_UNSUPPORTEDFORMAT;

  00154	e5943060	 ldr         r3, [r4, #0x60]
  00158	e3530a0f	 cmp         r3, #0xF, 20
  0015c	1a000008	 bne         |$LN11@HalCanCrea|
  00160	e5943054	 ldr         r3, [r4, #0x54]
  00164	e3530c0f	 cmp         r3, #0xF, 24
  00168	1a000005	 bne         |$LN11@HalCanCrea|
  0016c	e5943058	 ldr         r3, [r4, #0x58]
  00170	e35300f0	 cmp         r3, #0xF0
  00174	1a000002	 bne         |$LN11@HalCanCrea|
  00178	e594305c	 ldr         r3, [r4, #0x5C]
  0017c	e353000f	 cmp         r3, #0xF
  00180		 |$LN56@HalCanCrea|
  00180	03a05000	 moveq       r5, #0
  00184		 |$LN11@HalCanCrea|

; 208  :                     {
; 209  :                         //  Supported formats
; 210  :                         pd->ddRVal = DD_OK;
; 211  :                     }
; 212  :                 }
; 213  :             }
; 214  :             else
; 215  :             {
; 216  :                 // do not support premult pixel formats in video memory.
; 217  :                 pd->ddRVal=DDERR_UNSUPPORTEDFORMAT;

  00184	e586500c	 str         r5, [r6, #0xC]

; 218  :             }
; 219  : 
; 220  :         }
; 221  :     }
; 222  :     else

  00188	ea000077	 b           |$LN1@HalCanCrea|
  0018c		 |$LN37@HalCanCrea|

; 145  :                         }
; 146  :                     }
; 147  :                 }
; 148  :             }
; 149  :             else
; 150  :             {
; 151  :                 // do not support premult pixel formats in video memory.
; 152  :                 pd->ddRVal=DDERR_UNSUPPORTEDFORMAT;
; 153  :             }
; 154  : 
; 155  :         }
; 156  :         else
; 157  :         {
; 158  :             //  Video memory preference; check pixel type
; 159  :             if((pDDSCaps->dwCaps & DDSCAPS_OVERLAY) && !(pDDPixelFormat->dwFlags & DDPF_ALPHAPREMULT))

  0018c	e3120010	 tst         r2, #0x10
  00190	0a000031	 beq         |$LN23@HalCanCrea|
  00194	e5943048	 ldr         r3, [r4, #0x48]
  00198	e3130902	 tst         r3, #2, 18
  0019c	1a00002e	 bne         |$LN23@HalCanCrea|

; 160  :             {
; 161  :                 //  Overlays can support YUV pixel formats
; 162  :                 if( pDDPixelFormat->dwFlags & DDPF_FOURCC )

  001a0	e3a01000	 mov         r1, #0
  001a4	e3130004	 tst         r3, #4
  001a8	0a00000d	 beq         |$LN20@HalCanCrea|

; 163  :                 {
; 164  :                     switch( pDDPixelFormat->dwFourCC )

  001ac	e594204c	 ldr         r2, [r4, #0x4C]
  001b0	e59f31cc	 ldr         r3, [pc, #0x1CC]
  001b4	e1520003	 cmp         r2, r3
  001b8	0a000008	 beq         |$LN19@HalCanCrea|
  001bc	e59f31bc	 ldr         r3, [pc, #0x1BC]
  001c0	e1520003	 cmp         r2, r3
  001c4	0a000005	 beq         |$LN19@HalCanCrea|
  001c8	e59f31ac	 ldr         r3, [pc, #0x1AC]
  001cc	e1520003	 cmp         r2, r3
  001d0	0a000002	 beq         |$LN19@HalCanCrea|
  001d4	e59f319c	 ldr         r3, [pc, #0x19C]
  001d8	e1520003	 cmp         r2, r3
  001dc	1a000000	 bne         |$LN20@HalCanCrea|
  001e0		 |$LN19@HalCanCrea|

; 165  :                     {
; 166  :                         case FOURCC_YUY2:
; 167  :                         case FOURCC_YUYV:
; 168  :                         case FOURCC_YVYU:
; 169  :                         case FOURCC_UYVY:
; 170  :                             //  Supported formats
; 171  :                             pd->ddRVal = DD_OK;

  001e0	e586100c	 str         r1, [r6, #0xC]
  001e4		 |$LN20@HalCanCrea|

; 172  :                             break;
; 173  :                     }
; 174  :                 }
; 175  : 
; 176  :                 //  Check for RGB formats on overlay
; 177  :                 //  Even though VID2 can support alpha pixels, we are limiting the
; 178  :                 //  set of support pixel types to allow swapping of VID1 and VID2
; 179  :                 //  surfaces to support Z-ordering of overlays
; 180  :                 if( pDDPixelFormat->dwFlags & DDPF_RGB )

  001e4	e5943048	 ldr         r3, [r4, #0x48]
  001e8	e3130040	 tst         r3, #0x40
  001ec	0a00005e	 beq         |$LN1@HalCanCrea|

; 181  :                 {
; 182  :                     //  Check pixel sizes
; 183  :                     if( (pDDPixelFormat->dwRGBBitCount == 16) || (pDDPixelFormat->dwRGBBitCount == 32) )

  001f0	e5943050	 ldr         r3, [r4, #0x50]
  001f4	e3530010	 cmp         r3, #0x10
  001f8	0a000001	 beq         |$LN16@HalCanCrea|
  001fc	e3530020	 cmp         r3, #0x20
  00200	1a000059	 bne         |$LN1@HalCanCrea|
  00204		 |$LN16@HalCanCrea|

; 184  :                     {
; 185  :                         //  Check pixel formats
; 186  :                         if( (IsRGB16(pDDPixelFormat)) ||
; 187  :                             (IsRGB32(pDDPixelFormat)) )

  00204	e5943060	 ldr         r3, [r4, #0x60]
  00208	e3530000	 cmp         r3, #0
  0020c	1a000056	 bne         |$LN1@HalCanCrea|
  00210	e5942054	 ldr         r2, [r4, #0x54]
  00214	e3520b3e	 cmp         r2, #0x3E, 22
  00218	1a000005	 bne         |$LN13@HalCanCrea|
  0021c	e5943058	 ldr         r3, [r4, #0x58]
  00220	e3530e7e	 cmp         r3, #0x7E, 28
  00224	1a000002	 bne         |$LN13@HalCanCrea|
  00228	e594305c	 ldr         r3, [r4, #0x5C]
  0022c	e353001f	 cmp         r3, #0x1F
  00230	0a000007	 beq         |$LN14@HalCanCrea|
  00234		 |$LN13@HalCanCrea|
  00234	e35208ff	 cmp         r2, #0xFF, 16
  00238	1a00004b	 bne         |$LN1@HalCanCrea|
  0023c	e5943058	 ldr         r3, [r4, #0x58]
  00240	e3530cff	 cmp         r3, #0xFF, 24
  00244	1a000048	 bne         |$LN1@HalCanCrea|
  00248	e594305c	 ldr         r3, [r4, #0x5C]
  0024c	e35300ff	 cmp         r3, #0xFF
  00250	1a000045	 bne         |$LN1@HalCanCrea|
  00254		 |$LN14@HalCanCrea|

; 188  :                         {
; 189  :                             //  Supported formats
; 190  :                             pd->ddRVal = DD_OK;

  00254	e586100c	 str         r1, [r6, #0xC]

; 191  :                         }
; 192  :                      }
; 193  :                  }
; 194  :             }

  00258	ea000043	 b           |$LN1@HalCanCrea|
  0025c		 |$LN23@HalCanCrea|

; 195  : 
; 196  :             //  Check for RGB formats on primary display
; 197  :             else if((pDDPixelFormat->dwFlags & DDPF_RGB) && !(pDDPixelFormat->dwFlags & DDPF_ALPHAPREMULT))

  0025c	e5943048	 ldr         r3, [r4, #0x48]
  00260	e3130040	 tst         r3, #0x40
  00264	0affffc6	 beq         |$LN11@HalCanCrea|
  00268	e3130902	 tst         r3, #2, 18
  0026c	1affffc4	 bne         |$LN11@HalCanCrea|

; 198  :             {
; 199  :                 //  Check pixel sizes
; 200  :                 if( (pDDPixelFormat->dwRGBBitCount == 16) || (pDDPixelFormat->dwRGBBitCount == 32) )

  00270	e5943050	 ldr         r3, [r4, #0x50]
  00274	e3530010	 cmp         r3, #0x10
  00278	0a000001	 beq         |$LN9@HalCanCrea|
  0027c	e3530020	 cmp         r3, #0x20
  00280	1a000039	 bne         |$LN1@HalCanCrea|
  00284		 |$LN9@HalCanCrea|

; 201  :                 {
; 202  :                     //  Check pixel formats
; 203  :                     if( IsRGB16(pDDPixelFormat) ||
; 204  :                         IsARGB16(pDDPixelFormat) ||
; 205  :                         IsRGB32(pDDPixelFormat) ||
; 206  :                         IsARGB32(pDDPixelFormat) ||
; 207  :                         IsRGBA32(pDDPixelFormat) )

  00284	e5943060	 ldr         r3, [r4, #0x60]
  00288	e1b02003	 movs        r2, r3
  0028c	1a000008	 bne         |$LN6@HalCanCrea|
  00290	e5943054	 ldr         r3, [r4, #0x54]
  00294	e3530b3e	 cmp         r3, #0x3E, 22
  00298	1a000005	 bne         |$LN6@HalCanCrea|
  0029c	e5943058	 ldr         r3, [r4, #0x58]
  002a0	e3530e7e	 cmp         r3, #0x7E, 28
  002a4	1a000002	 bne         |$LN6@HalCanCrea|
  002a8	e594305c	 ldr         r3, [r4, #0x5C]
  002ac	e353001f	 cmp         r3, #0x1F
  002b0	0a00002b	 beq         |$LN42@HalCanCrea|
  002b4		 |$LN6@HalCanCrea|
  002b4	e3520a0f	 cmp         r2, #0xF, 20
  002b8	1a000008	 bne         |$LN5@HalCanCrea|
  002bc	e5943054	 ldr         r3, [r4, #0x54]
  002c0	e3530c0f	 cmp         r3, #0xF, 24
  002c4	1a000005	 bne         |$LN5@HalCanCrea|
  002c8	e5943058	 ldr         r3, [r4, #0x58]
  002cc	e35300f0	 cmp         r3, #0xF0
  002d0	1a000002	 bne         |$LN5@HalCanCrea|
  002d4	e594305c	 ldr         r3, [r4, #0x5C]
  002d8	e353000f	 cmp         r3, #0xF
  002dc	0a000020	 beq         |$LN42@HalCanCrea|
  002e0		 |$LN5@HalCanCrea|
  002e0	e3520000	 cmp         r2, #0
  002e4	1a000008	 bne         |$LN4@HalCanCrea|
  002e8	e5943054	 ldr         r3, [r4, #0x54]
  002ec	e35308ff	 cmp         r3, #0xFF, 16
  002f0	1a000005	 bne         |$LN4@HalCanCrea|
  002f4	e5943058	 ldr         r3, [r4, #0x58]
  002f8	e3530cff	 cmp         r3, #0xFF, 24
  002fc	1a000002	 bne         |$LN4@HalCanCrea|
  00300	e594305c	 ldr         r3, [r4, #0x5C]
  00304	e35300ff	 cmp         r3, #0xFF
  00308	0a000015	 beq         |$LN42@HalCanCrea|
  0030c		 |$LN4@HalCanCrea|
  0030c	e35204ff	 cmp         r2, #0xFF, 8
  00310	1a000008	 bne         |$LN3@HalCanCrea|
  00314	e5943054	 ldr         r3, [r4, #0x54]
  00318	e35308ff	 cmp         r3, #0xFF, 16
  0031c	1a000005	 bne         |$LN3@HalCanCrea|
  00320	e5943058	 ldr         r3, [r4, #0x58]
  00324	e3530cff	 cmp         r3, #0xFF, 24
  00328	1a000002	 bne         |$LN3@HalCanCrea|
  0032c	e594305c	 ldr         r3, [r4, #0x5C]
  00330	e35300ff	 cmp         r3, #0xFF
  00334	0a00000a	 beq         |$LN42@HalCanCrea|
  00338		 |$LN3@HalCanCrea|
  00338	e35200ff	 cmp         r2, #0xFF
  0033c	1a00000a	 bne         |$LN1@HalCanCrea|
  00340	e5943054	 ldr         r3, [r4, #0x54]
  00344	e35304ff	 cmp         r3, #0xFF, 8
  00348	1a000007	 bne         |$LN1@HalCanCrea|
  0034c	e5943058	 ldr         r3, [r4, #0x58]
  00350	e35308ff	 cmp         r3, #0xFF, 16
  00354	1a000004	 bne         |$LN1@HalCanCrea|
  00358	e594305c	 ldr         r3, [r4, #0x5C]
  0035c	e3530cff	 cmp         r3, #0xFF, 24
  00360	1a000001	 bne         |$LN1@HalCanCrea|
  00364		 |$LN42@HalCanCrea|

; 223  :     {
; 224  :         //  Can create surfaces that match primary surface
; 225  :         pd->ddRVal = DD_OK;

  00364	e3a03000	 mov         r3, #0
  00368	e586300c	 str         r3, [r6, #0xC]

; 226  :         result = DDHAL_DRIVER_HANDLED;

  0036c		 |$LN1@HalCanCrea|

; 227  :     }
; 228  :     
; 229  :  //   DumpDD_CANCREATESURFACE(pd);
; 230  :     
; 231  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"-HalCanCreateSurface() result = 0x%x  pd->ddRVal = 0x%x\r\n\r\n", result, pd->ddRVal));
; 232  :     
; 233  :     return result;
; 234  : }

  0036c	e1a00007	 mov         r0, r7
  00370	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00374	e12fff1e	 bx          lr
  00378		 |$LN61@HalCanCrea|
  00378		 |$LN62@HalCanCrea|
  00378	59565955	 DCD         0x59565955
  0037c		 |$LN63@HalCanCrea|
  0037c	56595559	 DCD         0x56595559
  00380		 |$LN64@HalCanCrea|
  00380	55595659	 DCD         0x55595659
  00384		 |$LN65@HalCanCrea|
  00384	32595559	 DCD         0x32595559
  00388		 |$LN66@HalCanCrea|
  00388	88760218	 DCD         0x88760218
  0038c		 |$M42608|

			 ENDP  ; |?HalCanCreateSurface@@YAKPAU_DDHAL_CANCREATESURFACEDATA@@@Z|, HalCanCreateSurface

	EXPORT	|?HalCreateSurface@@YAKPAU_DDHAL_CREATESURFACEDATA@@@Z| ; HalCreateSurface
	EXPORT	|??_C@_1FA@EEEPJNGE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAS?$AAZ?$AA?5?$AAs?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@KPAINJGL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc@| [ DATA ] ; `string'
	IMPORT	|?DeleteSurface@DDGPESurf@@SAXPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z| ; DDGPESurf::DeleteSurface
	IMPORT	|NKDbgPrintfW|
	IMPORT	|?AllocSurface@OMAPDDGPE@@QAAJPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z| ; OMAPDDGPE::AllocSurface
	IMPORT	|DDGPECreateSurface|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42722| DCD	|$LN106@HalCreateS|
	DCD	0x40015c02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@EEEPJNGE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAS?$AAZ?$AA?5?$AAs?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "R", 0x0, "S", 0x0, "Z", 0x0, " ", 0x0, "s"
	DCB	0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@KPAINJGL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "s", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\halsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalCreateSurface@@YAKPAU_DDHAL_CREATESURFACEDATA@@@Z| PROC ; HalCreateSurface

; 241  : {

  00000		 |$LN106@HalCreateS|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M42719|
  00008	e1a06000	 mov         r6, r0

; 242  :     DWORD                       result = DDHAL_DRIVER_HANDLED;
; 243  :     OMAPDDGPE*                  pDDGPE = (OMAPDDGPE*) GetGPE();

  0000c	eb000000	 bl          GetGPE

; 244  :     LPDDSCAPS                   pDDSCaps = &(pd->lpDDSurfaceDesc->ddsCaps);

  00010	e5962004	 ldr         r2, [r6, #4]
  00014	e1a0b000	 mov         r11, r0

; 245  :     LPDDPIXELFORMAT             pDDPixelFormat = &(pd->lpDDSurfaceDesc->ddpfPixelFormat);
; 246  :     unsigned int                iSurf = 0;

  00018	e3a07000	 mov         r7, #0
  0001c	e1a01002	 mov         r1, r2

; 247  :     LPDDRAWI_DDRAWSURFACE_LCL   pSurf;
; 248  :     
; 249  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"+HalCreateSurface() --------------------------------\r\n"));
; 250  : 
; 251  : 
; 252  :     //  Check where surface needs to be allocated on
; 253  :     if( pDDSCaps->dwCaps & DDSCAPS_PRIMARYSURFACE )

  00020	e5b13064	 ldr         r3, [r1, #0x64]!
  00024	e3a04000	 mov         r4, #0
  00028	e58d1010	 str         r1, [sp, #0x10]
  0002c	e3130040	 tst         r3, #0x40
  00030	0a00005e	 beq         |$LN52@HalCreateS|

; 254  :     {
; 255  :         OMAPDDGPESurface*   pPrimarySurface = (OMAPDDGPESurface*) pDDGPE->DDGPEPrimarySurface();
; 256  : 
; 257  :         //  Primary surface and back buffers
; 258  :         for( iSurf = 0; iSurf < pd->dwSCnt; iSurf++ )

  00034	e5963008	 ldr         r3, [r6, #8]
  00038	e59b9004	 ldr         r9, [r11, #4]
  0003c	e3a07000	 mov         r7, #0
  00040	e3530000	 cmp         r3, #0
  00044	9a000052	 bls         |$LN49@HalCreateS|
  00048	e3a03702	 mov         r3, #2, 14
  0004c	e3830018	 orr         r0, r3, #0x18
  00050	e59fa500	 ldr         r10, [pc, #0x500]
  00054	e58d0008	 str         r0, [sp, #8]
  00058		 |$LL51@HalCreateS|

; 259  :         {
; 260  :             //  Initialize surface object
; 261  :             pSurf = pd->lplpSList[iSurf];

  00058	e596300c	 ldr         r3, [r6, #0xC]

; 262  :             pSurf->dwReserved1 = 0;
; 263  : 
; 264  :             //  For first surface in chain, just point to primary surface
; 265  :             if( iSurf == 0 )

  0005c	e3570000	 cmp         r7, #0

; 266  :             {
; 267  :                 pSurf->dwReserved1 = (DWORD) pPrimarySurface; 
; 268  :                 pSurf->ddsCaps.dwCaps |= DDSCAPS_PRIMARYSURFACE|DDSCAPS_VIDEOMEMORY;
; 269  :                 
; 270  :                 //  Update surface description attributes to reflect the primary surface
; 271  :                 pd->lpDDSurfaceDesc->ddsCaps.dwCaps |= DDSCAPS_PRIMARYSURFACE|DDSCAPS_VIDEOMEMORY;
; 272  :                 pd->lpDDSurfaceDesc->dwFlags        |= DDSD_PITCH|DDSD_XPITCH|DDSD_SURFACESIZE;
; 273  :                 pd->lpDDSurfaceDesc->lPitch         = pPrimarySurface->OmapSurface()->Stride();

  00060	e3a01000	 mov         r1, #0
  00064	e7938107	 ldr         r8, [r3, +r7, lsl #2]
  00068	e5884010	 str         r4, [r8, #0x10]
  0006c	1a00001e	 bne         |$LN48@HalCreateS|
  00070	e5983008	 ldr         r3, [r8, #8]
  00074	e5889010	 str         r9, [r8, #0x10]
  00078	e3833d05	 orr         r3, r3, #5, 26
  0007c	e5883008	 str         r3, [r8, #8]
  00080	e5962004	 ldr         r2, [r6, #4]
  00084	e5923064	 ldr         r3, [r2, #0x64]
  00088	e3833d05	 orr         r3, r3, #5, 26
  0008c	e5823064	 str         r3, [r2, #0x64]
  00090	e5962004	 ldr         r2, [r6, #4]
  00094	e5923004	 ldr         r3, [r2, #4]
  00098	e1833000	 orr         r3, r3, r0
  0009c	e5823004	 str         r3, [r2, #4]
  000a0	e599007c	 ldr         r0, [r9, #0x7C]
  000a4	e5903000	 ldr         r3, [r0]
  000a8	e5933010	 ldr         r3, [r3, #0x10]
  000ac	e1a0e00f	 mov         lr, pc
  000b0	e12fff13	 bx          r3
  000b4	e5962004	 ldr         r2, [r6, #4]
  000b8	e1a03000	 mov         r3, r0

; 274  :                 pd->lpDDSurfaceDesc->lXPitch        = pPrimarySurface->BytesPerPixel();
; 275  :                 pd->lpDDSurfaceDesc->dwSurfaceSize  = pPrimarySurface->SurfaceSize();            

  000bc	e1a00009	 mov         r0, r9
  000c0	e5823010	 str         r3, [r2, #0x10]
  000c4	e5962004	 ldr         r2, [r6, #4]
  000c8	e5993044	 ldr         r3, [r9, #0x44]
  000cc	e5823014	 str         r3, [r2, #0x14]
  000d0	e5993000	 ldr         r3, [r9]
  000d4	e5933044	 ldr         r3, [r3, #0x44]
  000d8	e1a0e00f	 mov         lr, pc
  000dc	e12fff13	 bx          r3
  000e0	e5963004	 ldr         r3, [r6, #4]
  000e4	e5830068	 str         r0, [r3, #0x68]

; 276  :             }
; 277  :             else

  000e8	ea000024	 b           |$LN50@HalCreateS|
  000ec		 |$LN48@HalCreateS|

; 278  :             {
; 279  :                 SCODE               scResult;
; 280  :                 OMAPDDGPESurface*   pBackSurface;
; 281  :                 
; 282  :                 //  Allocate a back buffer to the primary surface
; 283  :                 scResult = pDDGPE->AllocSurface(
; 284  :                                         &pBackSurface,
; 285  :                                         pPrimarySurface->OmapSurface()->PixelFormat(),
; 286  :                                         pPrimarySurface->OmapSurface()->Width(),
; 287  :                                         pPrimarySurface->OmapSurface()->Height() );

  000ec	e599007c	 ldr         r0, [r9, #0x7C]
  000f0	e5903000	 ldr         r3, [r0]
  000f4	e593300c	 ldr         r3, [r3, #0xC]
  000f8	e1a0e00f	 mov         lr, pc
  000fc	e12fff13	 bx          r3
  00100	e599207c	 ldr         r2, [r9, #0x7C]
  00104	e1a05000	 mov         r5, r0
  00108	e3a01000	 mov         r1, #0
  0010c	e5923000	 ldr         r3, [r2]
  00110	e1a00002	 mov         r0, r2
  00114	e5933008	 ldr         r3, [r3, #8]
  00118	e1a0e00f	 mov         lr, pc
  0011c	e12fff13	 bx          r3

; 288  :                 if (scResult != S_OK)

  00120	e59b1000	 ldr         r1, [r11]
  00124	e599207c	 ldr         r2, [r9, #0x7C]
  00128	e1a03000	 mov         r3, r0
  0012c	e59140f4	 ldr         r4, [r1, #0xF4]
  00130	e5922004	 ldr         r2, [r2, #4]
  00134	e28d1004	 add         r1, sp, #4
  00138	e1a0000b	 mov         r0, r11
  0013c	e58d5000	 str         r5, [sp]
  00140	e1a0e00f	 mov         lr, pc
  00144	e12fff14	 bx          r4
  00148	e3500000	 cmp         r0, #0
  0014c	1a000013	 bne         |$LN92@HalCreateS|

; 292  :                     goto cleanUp;
; 293  :                 }
; 294  :                 
; 295  :                 //  Configure created surface
; 296  :                 pSurf->dwReserved1 = (DWORD) pBackSurface;
; 297  :                 pSurf->ddsCaps.dwCaps |= DDSCAPS_VIDEOMEMORY;

  00150	e5983008	 ldr         r3, [r8, #8]
  00154	e59d2004	 ldr         r2, [sp, #4]
  00158	e3a04000	 mov         r4, #0
  0015c	e3833c01	 orr         r3, r3, #1, 24
  00160	e5883008	 str         r3, [r8, #8]
  00164	e5882010	 str         r2, [r8, #0x10]

; 298  :                 pBackSurface->lpDDSurface = pSurf;

  00168	e5828064	 str         r8, [r2, #0x64]

; 299  :                 
; 300  :                 //  Parent surface for back buffer chain is the primary surface
; 301  :                 pBackSurface->SetParent( pPrimarySurface );

  0016c	e59d3004	 ldr         r3, [sp, #4]
  00170	e5839084	 str         r9, [r3, #0x84]

; 302  :                 
; 303  :                 g_dwSurfaceCount++;

  00174	e59a3000	 ldr         r3, [r10]
  00178	e2833001	 add         r3, r3, #1
  0017c	e58a3000	 str         r3, [r10]
  00180		 |$LN50@HalCreateS|
  00180	e5963008	 ldr         r3, [r6, #8]
  00184	e2877001	 add         r7, r7, #1
  00188	e59d0008	 ldr         r0, [sp, #8]
  0018c	e1570003	 cmp         r7, r3
  00190	3affffb0	 bcc         |$LL51@HalCreateS|
  00194		 |$LN49@HalCreateS|

; 304  :             }
; 305  :         }
; 306  :         
; 307  :         //  Surface creation complete
; 308  :         pd->ddRVal = DD_OK;

  00194	e5864010	 str         r4, [r6, #0x10]
  00198	e3a08001	 mov         r8, #1
  0019c	ea0000e6	 b           |$LN2@HalCreateS|
  001a0		 |$LN92@HalCreateS|

; 289  :                 {
; 290  :                     DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to allocate primary back buffer surface\r\n"));
; 291  :                     pd->ddRVal = DDERR_OUTOFVIDEOMEMORY;

  001a0	e59f33b4	 ldr         r3, [pc, #0x3B4]
  001a4	e3a08001	 mov         r8, #1
  001a8	e5863010	 str         r3, [r6, #0x10]
  001ac	ea0000d0	 b           |$LN98@HalCreateS|
  001b0		 |$LN52@HalCreateS|

; 309  :     }
; 310  :     else if( (pDDSCaps->dwCaps & (DDSCAPS_VIDEOMEMORY|DDSCAPS_SYSTEMMEMORY)) == 0 )

  001b0	e3130d06	 tst         r3, #6, 26

; 311  :     {
; 312  :         //  No preference indicated; just use DDGPE function
; 313  :         result = DDGPECreateSurface(pd);
; 314  :         g_dwSurfaceCount++;

  001b4	0a000001	 beq         |$LN101@HalCreateS|

; 315  :     }
; 316  :     else if( pDDSCaps->dwCaps & DDSCAPS_SYSTEMMEMORY )

  001b8	e3130080	 tst         r3, #0x80
  001bc	0a000007	 beq         |$LN41@HalCreateS|
  001c0		 |$LN101@HalCreateS|

; 317  :     {
; 318  :         //  System memory preference indicated; just use DDGPE function
; 319  :         result = DDGPECreateSurface(pd);

  001c0	e1a00006	 mov         r0, r6
  001c4	eb000000	 bl          DDGPECreateSurface

; 320  :         g_dwSurfaceCount++;

  001c8	e59f2388	 ldr         r2, [pc, #0x388]
  001cc	e1a08000	 mov         r8, r0
  001d0	e5923000	 ldr         r3, [r2]
  001d4	e2833001	 add         r3, r3, #1
  001d8	e5823000	 str         r3, [r2]

; 321  :     }
; 322  :     else

  001dc	ea0000c1	 b           |$cleanUp$42120|
  001e0		 |$LN41@HalCreateS|

; 323  :     {
; 324  :         OMAP_DSS_PIXELFORMAT    dssPixelFormat = OMAP_DSS_PIXELFORMAT_UNKNOWN;

  001e0	e3e08000	 mvn         r8, #0

; 325  :         
; 326  :         //  Video memory preference; check pixel type
; 327  :         if( pDDSCaps->dwCaps & DDSCAPS_OVERLAY )

  001e4	e3130010	 tst         r3, #0x10
  001e8	0a000012	 beq         |$LN36@HalCreateS|

; 328  :         {
; 329  :             //  Overlays can support YUV pixel formats
; 330  :             if( pDDPixelFormat->dwFlags & DDPF_FOURCC )

  001ec	e5923048	 ldr         r3, [r2, #0x48]
  001f0	e3130004	 tst         r3, #4
  001f4	0a00000f	 beq         |$LN36@HalCreateS|

; 331  :             {
; 332  :                 switch( pDDPixelFormat->dwFourCC )

  001f8	e592104c	 ldr         r1, [r2, #0x4C]
  001fc	e59f3368	 ldr         r3, [pc, #0x368]
  00200	e1510003	 cmp         r1, r3
  00204	0a00000a	 beq         |$LN35@HalCreateS|
  00208	e59f3358	 ldr         r3, [pc, #0x358]
  0020c	e1510003	 cmp         r1, r3
  00210	0a000005	 beq         |$LN34@HalCreateS|
  00214	e59f3348	 ldr         r3, [pc, #0x348]
  00218	e1510003	 cmp         r1, r3
  0021c	0a000004	 beq         |$LN35@HalCreateS|
  00220	e59f3338	 ldr         r3, [pc, #0x338]
  00224	e1510003	 cmp         r1, r3
  00228	1a000002	 bne         |$LN36@HalCreateS|
  0022c		 |$LN34@HalCreateS|

; 338  :                         break;
; 339  :                     
; 340  :                     case FOURCC_YVYU:
; 341  :                     case FOURCC_UYVY:
; 342  :                         //  Supported format
; 343  :                         dssPixelFormat = OMAP_DSS_PIXELFORMAT_UYVY;

  0022c	e3a0800b	 mov         r8, #0xB

; 344  :                         break;

  00230	ea000000	 b           |$LN36@HalCreateS|
  00234		 |$LN35@HalCreateS|

; 333  :                 {
; 334  :                     case FOURCC_YUY2:
; 335  :                     case FOURCC_YUYV:
; 336  :                         //  Supported format
; 337  :                         dssPixelFormat = OMAP_DSS_PIXELFORMAT_YUV2;

  00234	e3a0800a	 mov         r8, #0xA
  00238		 |$LN36@HalCreateS|

; 345  :                 }
; 346  :             }
; 347  :         }
; 348  :         
; 349  :         //  Check for RGB formats (applicable to both primary and overlay surfaces)
; 350  :         if( pDDPixelFormat->dwFlags & DDPF_RGB )

  00238	e5923048	 ldr         r3, [r2, #0x48]
  0023c	e3130040	 tst         r3, #0x40
  00240	0a00003b	 beq         |$LN22@HalCreateS|

; 351  :         {
; 352  :             //  Check pixel sizes
; 353  :             if( (pDDPixelFormat->dwRGBBitCount == 16) ||
; 354  :                 (pDDPixelFormat->dwRGBBitCount == 32) )

  00244	e5923050	 ldr         r3, [r2, #0x50]
  00248	e3530010	 cmp         r3, #0x10
  0024c	0a000001	 beq         |$LN31@HalCreateS|
  00250	e3530020	 cmp         r3, #0x20
  00254	1a000036	 bne         |$LN22@HalCreateS|
  00258		 |$LN31@HalCreateS|

; 355  :             {
; 356  :                 //  Check pixel formats
; 357  :                 if( IsRGB16(pDDPixelFormat) )

  00258	e5923060	 ldr         r3, [r2, #0x60]
  0025c	e1b01003	 movs        r1, r3
  00260	1a000008	 bne         |$LN30@HalCreateS|
  00264	e5923054	 ldr         r3, [r2, #0x54]
  00268	e3530b3e	 cmp         r3, #0x3E, 22
  0026c	1a000005	 bne         |$LN30@HalCreateS|
  00270	e5923058	 ldr         r3, [r2, #0x58]
  00274	e3530e7e	 cmp         r3, #0x7E, 28
  00278	0592305c	 ldreq       r3, [r2, #0x5C]
  0027c	0353001f	 cmpeq       r3, #0x1F

; 358  :                 {
; 359  :                     dssPixelFormat = OMAP_DSS_PIXELFORMAT_RGB16;

  00280	03a08006	 moveq       r8, #6
  00284	0a00002c	 beq         |$LN99@HalCreateS|
  00288		 |$LN30@HalCreateS|

; 360  :                 }
; 361  :                 else if( IsARGB16(pDDPixelFormat) )

  00288	e3510a0f	 cmp         r1, #0xF, 20
  0028c	1a000008	 bne         |$LN28@HalCreateS|
  00290	e5923054	 ldr         r3, [r2, #0x54]
  00294	e3530c0f	 cmp         r3, #0xF, 24
  00298	1a000005	 bne         |$LN28@HalCreateS|
  0029c	e5923058	 ldr         r3, [r2, #0x58]
  002a0	e35300f0	 cmp         r3, #0xF0
  002a4	0592305c	 ldreq       r3, [r2, #0x5C]
  002a8	0353000f	 cmpeq       r3, #0xF

; 362  :                 {
; 363  :                     dssPixelFormat = OMAP_DSS_PIXELFORMAT_ARGB16;

  002ac	03a08005	 moveq       r8, #5
  002b0	0a000021	 beq         |$LN99@HalCreateS|
  002b4		 |$LN28@HalCreateS|

; 364  :                 }
; 365  :                 else if( IsRGB32(pDDPixelFormat) )

  002b4	e3510000	 cmp         r1, #0
  002b8	1a000008	 bne         |$LN26@HalCreateS|
  002bc	e5923054	 ldr         r3, [r2, #0x54]
  002c0	e35308ff	 cmp         r3, #0xFF, 16
  002c4	1a000005	 bne         |$LN26@HalCreateS|
  002c8	e5923058	 ldr         r3, [r2, #0x58]
  002cc	e3530cff	 cmp         r3, #0xFF, 24
  002d0	0592305c	 ldreq       r3, [r2, #0x5C]
  002d4	035300ff	 cmpeq       r3, #0xFF

; 366  :                 {
; 367  :                     dssPixelFormat = OMAP_DSS_PIXELFORMAT_RGB32;

  002d8	03a08008	 moveq       r8, #8
  002dc	0a000016	 beq         |$LN99@HalCreateS|
  002e0		 |$LN26@HalCreateS|

; 368  :                 }
; 369  :                 else if( IsARGB32(pDDPixelFormat) )

  002e0	e35104ff	 cmp         r1, #0xFF, 8
  002e4	1a000008	 bne         |$LN24@HalCreateS|
  002e8	e5923054	 ldr         r3, [r2, #0x54]
  002ec	e35308ff	 cmp         r3, #0xFF, 16
  002f0	1a000005	 bne         |$LN24@HalCreateS|
  002f4	e5923058	 ldr         r3, [r2, #0x58]
  002f8	e3530cff	 cmp         r3, #0xFF, 24
  002fc	0592305c	 ldreq       r3, [r2, #0x5C]
  00300	035300ff	 cmpeq       r3, #0xFF

; 370  :                 {
; 371  :                     dssPixelFormat = OMAP_DSS_PIXELFORMAT_ARGB32;

  00304	03a0800c	 moveq       r8, #0xC
  00308	0a00000b	 beq         |$LN99@HalCreateS|
  0030c		 |$LN24@HalCreateS|

; 372  :                 }
; 373  :                 else if( IsRGBA32(pDDPixelFormat) )

  0030c	e35100ff	 cmp         r1, #0xFF
  00310	1a000007	 bne         |$LN22@HalCreateS|
  00314	e5923054	 ldr         r3, [r2, #0x54]
  00318	e35304ff	 cmp         r3, #0xFF, 8
  0031c	1a000004	 bne         |$LN22@HalCreateS|
  00320	e5923058	 ldr         r3, [r2, #0x58]
  00324	e35308ff	 cmp         r3, #0xFF, 16
  00328	0592305c	 ldreq       r3, [r2, #0x5C]
  0032c	03530cff	 cmpeq       r3, #0xFF, 24

; 374  :                 {
; 375  :                     dssPixelFormat = OMAP_DSS_PIXELFORMAT_RGBA32;

  00330	03a0800d	 moveq       r8, #0xD
  00334		 |$LN22@HalCreateS|

; 376  :                 }
; 377  :             }
; 378  :         }
; 379  : 
; 380  :         //  If the pixel format is supported, create some surfaces
; 381  :         if( dssPixelFormat != OMAP_DSS_PIXELFORMAT_UNKNOWN )

  00334	e3780001	 cmn         r8, #1
  00338	0a000067	 beq         |$LN21@HalCreateS|
  0033c		 |$LN99@HalCreateS|

; 382  :         {
; 383  :             OMAPDDGPESurface*   pParent = NULL;
; 384  : 
; 385  :             for( iSurf = 0; iSurf < pd->dwSCnt; iSurf++ )

  0033c	e5963008	 ldr         r3, [r6, #8]
  00340	e3a02000	 mov         r2, #0
  00344	e58d200c	 str         r2, [sp, #0xC]
  00348	e3530000	 cmp         r3, #0
  0034c	e3a07000	 mov         r7, #0
  00350	9affff8f	 bls         |$LN49@HalCreateS|
  00354	e3a03702	 mov         r3, #2, 14
  00358	e3833018	 orr         r3, r3, #0x18
  0035c	e59fa1f8	 ldr         r10, [pc, #0x1F8]
  00360	e58d3008	 str         r3, [sp, #8]
  00364		 |$LL20@HalCreateS|

; 386  :             {
; 387  :                 SCODE               scResult;
; 388  :                 OMAPDDGPESurface*   pSurface;
; 389  : 
; 390  :                 //  Initialize surface object
; 391  :                 pSurf = pd->lplpSList[iSurf];

  00364	e596300c	 ldr         r3, [r6, #0xC]

; 392  :                 pSurf->dwReserved1 = 0;
; 393  : 
; 394  :                 //  Allocate a back buffer to the primary surface
; 395  :                 scResult = pDDGPE->AllocSurface(
; 396  :                                         &pSurface,
; 397  :                                         dssPixelFormat,
; 398  :                                         pd->lpDDSurfaceDesc->dwWidth,
; 399  :                                         pd->lpDDSurfaceDesc->dwHeight
; 400  :                                         );

  00368	e1a02008	 mov         r2, r8
  0036c	e28d1004	 add         r1, sp, #4
  00370	e7939107	 ldr         r9, [r3, +r7, lsl #2]
  00374	e1a0000b	 mov         r0, r11
  00378	e5894010	 str         r4, [r9, #0x10]
  0037c	e5963004	 ldr         r3, [r6, #4]

; 401  :                 if (scResult != S_OK)

  00380	e59b4000	 ldr         r4, [r11]
  00384	e5935008	 ldr         r5, [r3, #8]
  00388	e593300c	 ldr         r3, [r3, #0xC]
  0038c	e59440f4	 ldr         r4, [r4, #0xF4]
  00390	e58d5000	 str         r5, [sp]
  00394	e1a0e00f	 mov         lr, pc
  00398	e12fff14	 bx          r4
  0039c	e3500000	 cmp         r0, #0
  003a0	1a000048	 bne         |$LN93@HalCreateS|

; 405  :                     goto cleanUp;
; 406  :                 }
; 407  : 				else
; 408  : 				{
; 409  : 					DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"allocate surface 0x%x\r\n",pSurface->OmapSurface()->PhysicalAddr()));
; 410  : 				}
; 411  :                 
; 412  :                 //  Configure created surface
; 413  :                 pSurf->dwReserved1 = (DWORD) pSurface;
; 414  :                 pSurf->ddsCaps.dwCaps |= DDSCAPS_VIDEOMEMORY;

  003a4	e5993008	 ldr         r3, [r9, #8]
  003a8	e59d2004	 ldr         r2, [sp, #4]
  003ac	e3833c01	 orr         r3, r3, #1, 24
  003b0	e5893008	 str         r3, [r9, #8]
  003b4	e5892010	 str         r2, [r9, #0x10]

; 415  :                 pSurface->lpDDSurface = pSurf;

  003b8	e59d3004	 ldr         r3, [sp, #4]
  003bc	e5839064	 str         r9, [r3, #0x64]

; 416  :                 
; 417  :                 if( pDDSCaps->dwCaps & DDSCAPS_OVERLAY )

  003c0	e59d3010	 ldr         r3, [sp, #0x10]
  003c4	e5933000	 ldr         r3, [r3]
  003c8	e3130010	 tst         r3, #0x10
  003cc	0a00000c	 beq         |$LN10@HalCreateS|

; 418  :                 {                    
; 419  :                     pSurface->SetOverlay();

  003d0	e59d3004	 ldr         r3, [sp, #4]

; 420  :                     /* allocate assoc bufs - to be used by backend processes such as ISP resizer */
; 421  :                     scResult = pDDGPE->AllocSurface(
; 422  :                                         pSurface,
; 423  :                                         dssPixelFormat,
; 424  :                                         pd->lpDDSurfaceDesc->dwWidth,
; 425  :                                         pd->lpDDSurfaceDesc->dwHeight
; 426  :                                         );

  003d4	e3a01001	 mov         r1, #1
  003d8	e1a02008	 mov         r2, r8
  003dc	e5831060	 str         r1, [r3, #0x60]
  003e0	e5963004	 ldr         r3, [r6, #4]
  003e4	e59d1004	 ldr         r1, [sp, #4]
  003e8	e1a0000b	 mov         r0, r11
  003ec	e593e008	 ldr         lr, [r3, #8]
  003f0	e593300c	 ldr         r3, [r3, #0xC]
  003f4	e58de000	 str         lr, [sp]
  003f8	eb000000	 bl          |?AllocSurface@OMAPDDGPE@@QAAJPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z|

; 427  :                     if (scResult == DDERR_OUTOFVIDEOMEMORY)

  003fc	e15a0000	 cmp         r10, r0
  00400	0a00002e	 beq         |$LN94@HalCreateS|
  00404		 |$LN10@HalCreateS|

; 430  :                         pd->ddRVal = DDERR_OUTOFVIDEOMEMORY;
; 431  :                         goto cleanUp;
; 432  :                     }
; 433  : 					else if (scResult == S_OK)
; 434  : 					{
; 435  : 						DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"allocate RSZ surface 0x%x\r\n",pSurface->OmapAssocSurface()->PhysicalAddr(OMAP_DSS_ROTATION_0,0,OMAP_ASSOC_SURF_FORCE_OFF)));
; 436  : 					}
; 437  :                     else
; 438  :                     {
; 439  :                         /* other reasons - no need to log */
; 440  :                     }
; 441  :                 }
; 442  :                 
; 443  :                 //  Update surface description attributes to reflect the created surface
; 444  :                 //  All back buffer surfaces will match first surface in chain
; 445  :                 if( iSurf == 0 )

  00404	e3570000	 cmp         r7, #0
  00408	1a00001f	 bne         |$LN8@HalCreateS|

; 446  :                 {
; 447  :                     pd->lpDDSurfaceDesc->ddsCaps.dwCaps |= DDSCAPS_VIDEOMEMORY;

  0040c	e5962004	 ldr         r2, [r6, #4]

; 448  :                     pd->lpDDSurfaceDesc->dwFlags        |= DDSD_PITCH|DDSD_XPITCH|DDSD_SURFACESIZE;
; 449  :                     pd->lpDDSurfaceDesc->lPitch         = pSurface->OmapSurface()->Stride();

  00410	e59d0008	 ldr         r0, [sp, #8]
  00414	e3a01000	 mov         r1, #0
  00418	e5923064	 ldr         r3, [r2, #0x64]
  0041c	e3833c01	 orr         r3, r3, #1, 24
  00420	e5823064	 str         r3, [r2, #0x64]
  00424	e5962004	 ldr         r2, [r6, #4]
  00428	e5923004	 ldr         r3, [r2, #4]
  0042c	e1833000	 orr         r3, r3, r0
  00430	e5823004	 str         r3, [r2, #4]
  00434	e59d3004	 ldr         r3, [sp, #4]
  00438	e593007c	 ldr         r0, [r3, #0x7C]
  0043c	e5903000	 ldr         r3, [r0]
  00440	e5933010	 ldr         r3, [r3, #0x10]
  00444	e1a0e00f	 mov         lr, pc
  00448	e12fff13	 bx          r3
  0044c	e5963004	 ldr         r3, [r6, #4]

; 450  :                     pd->lpDDSurfaceDesc->lXPitch        = pSurface->BytesPerPixel();
; 451  :                     pd->lpDDSurfaceDesc->dwSurfaceSize  = pSurface->SurfaceSize();            

  00450	e5830010	 str         r0, [r3, #0x10]
  00454	e59d3004	 ldr         r3, [sp, #4]
  00458	e5962004	 ldr         r2, [r6, #4]
  0045c	e5933044	 ldr         r3, [r3, #0x44]
  00460	e5823014	 str         r3, [r2, #0x14]
  00464	e59d0004	 ldr         r0, [sp, #4]
  00468	e5903000	 ldr         r3, [r0]
  0046c	e5933044	 ldr         r3, [r3, #0x44]
  00470	e1a0e00f	 mov         lr, pc
  00474	e12fff13	 bx          r3
  00478	e5963004	 ldr         r3, [r6, #4]
  0047c	e5830068	 str         r0, [r3, #0x68]

; 452  :                     
; 453  :                     pParent = pSurface;

  00480	e59d3004	 ldr         r3, [sp, #4]
  00484	e58d300c	 str         r3, [sp, #0xC]

; 454  :                 }
; 455  :                 else

  00488	ea000002	 b           |$LN83@HalCreateS|
  0048c		 |$LN8@HalCreateS|

; 456  :                 {
; 457  :                     //  Parent surface for back buffer chain is the first surface created
; 458  :                     pSurface->SetParent( pParent );

  0048c	e59d3004	 ldr         r3, [sp, #4]
  00490	e59d200c	 ldr         r2, [sp, #0xC]
  00494	e5832084	 str         r2, [r3, #0x84]
  00498		 |$LN83@HalCreateS|

; 459  :                 }
; 460  :                 
; 461  :                 g_dwSurfaceCount++;

  00498	e59f20b8	 ldr         r2, [pc, #0xB8]
  0049c	e2877001	 add         r7, r7, #1
  004a0	e3a04000	 mov         r4, #0
  004a4	e5923000	 ldr         r3, [r2]
  004a8	e2833001	 add         r3, r3, #1
  004ac	e5823000	 str         r3, [r2]
  004b0	e5963008	 ldr         r3, [r6, #8]
  004b4	e1570003	 cmp         r7, r3
  004b8	2affff35	 bcs         |$LN49@HalCreateS|
  004bc	eaffffa8	 b           |$LL20@HalCreateS|
  004c0		 |$LN94@HalCreateS|

; 428  :                     {
; 429  :                         RETAILMSG (1, (L"ERROR: Unable to allocate RSZ surface\r\n"));

  004c0	e59f008c	 ldr         r0, [pc, #0x8C]

; 470  :         }
; 471  :     }
; 472  : 
; 473  :   
; 474  : cleanUp:

  004c4	ea000000	 b           |$LN103@HalCreateS|
  004c8		 |$LN93@HalCreateS|

; 402  :                 {
; 403  :                     RETAILMSG (1, (L"ERROR: Unable to allocate surface\r\n"));

  004c8	e59f0080	 ldr         r0, [pc, #0x80]
  004cc		 |$LN103@HalCreateS|
  004cc	eb000000	 bl          NKDbgPrintfW

; 404  :                     pd->ddRVal = DDERR_OUTOFVIDEOMEMORY;

  004d0	e586a010	 str         r10, [r6, #0x10]
  004d4	e3a08001	 mov         r8, #1
  004d8	ea000005	 b           |$LN98@HalCreateS|
  004dc		 |$LN21@HalCreateS|

; 462  :             }
; 463  :             
; 464  :             //  Surface creation complete
; 465  :             pd->ddRVal = DD_OK;
; 466  :         }
; 467  :         else
; 468  :         {
; 469  :             pd->ddRVal = DDERR_UNSUPPORTEDFORMAT;

  004dc	e59f3068	 ldr         r3, [pc, #0x68]
  004e0	e3a08001	 mov         r8, #1
  004e4	e5863010	 str         r3, [r6, #0x10]
  004e8		 |$cleanUp$42120|

; 475  :     //  Clean up any allocations that were successful on a failure condition
; 476  :     if( pd->ddRVal != DD_OK )

  004e8	e5963010	 ldr         r3, [r6, #0x10]
  004ec	e3530000	 cmp         r3, #0
  004f0	0a000011	 beq         |$LN2@HalCreateS|
  004f4		 |$LN98@HalCreateS|

; 477  :     {
; 478  :         unsigned int    i;
; 479  :         for( i = 0; i < iSurf; i++ )

  004f4	e3a04000	 mov         r4, #0
  004f8	e3570000	 cmp         r7, #0
  004fc	0a00000e	 beq         |$LN2@HalCreateS|
  00500	e3a09000	 mov         r9, #0
  00504		 |$LL4@HalCreateS|

; 480  :         {
; 481  :             pSurf = pd->lplpSList[i];

  00504	e596300c	 ldr         r3, [r6, #0xC]
  00508	e7935104	 ldr         r5, [r3, +r4, lsl #2]

; 482  : 
; 483  :             //  Delete allocated surfaces (except for primary)
; 484  :             if( (pSurf->dwReserved1 != 0) && (pSurf->dwReserved1 != (DWORD) pDDGPE->DDGPEPrimarySurface()) )

  0050c	e5953010	 ldr         r3, [r5, #0x10]
  00510	e1b02003	 movs        r2, r3
  00514	0a000005	 beq         |$LN3@HalCreateS|
  00518	e59b3004	 ldr         r3, [r11, #4]
  0051c	e1520003	 cmp         r2, r3
  00520	0a000002	 beq         |$LN3@HalCreateS|

; 485  :             {
; 486  :                 DDGPESurf::DeleteSurface(pSurf);

  00524	e1a00005	 mov         r0, r5
  00528	eb000000	 bl          |?DeleteSurface@DDGPESurf@@SAXPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|

; 487  :                 pSurf->dwReserved1 = 0;

  0052c	e5859010	 str         r9, [r5, #0x10]
  00530		 |$LN3@HalCreateS|
  00530	e2844001	 add         r4, r4, #1
  00534	e1540007	 cmp         r4, r7
  00538	3afffff1	 bcc         |$LL4@HalCreateS|
  0053c		 |$LN2@HalCreateS|

; 488  :             }
; 489  :         }
; 490  :     }
; 491  :     
; 492  :         
; 493  :     DumpDD_CREATESURFACE(pd);
; 494  :     
; 495  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"-HalCreateSurface() result = 0x%x  pd->ddRVal = 0x%x  surface count = %d\r\n\r\n", result, pd->ddRVal, g_dwSurfaceCount));
; 496  :     
; 497  :     return result;
; 498  : }

  0053c	e1a00008	 mov         r0, r8
  00540	e28dd014	 add         sp, sp, #0x14
  00544	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00548	e12fff1e	 bx          lr
  0054c		 |$LN107@HalCreateS|
  0054c		 |$LN108@HalCreateS|
  0054c	88760218	 DCD         0x88760218
  00550		 |$LN109@HalCreateS|
  00550	00000000	 DCD         |??_C@_1EI@KPAINJGL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAs?$AAu?$AAr?$AAf?$AAa?$AAc@|
  00554		 |$LN110@HalCreateS|
  00554	00000000	 DCD         |??_C@_1FA@EEEPJNGE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAR?$AAS?$AAZ?$AA?5?$AAs?$AAu@|
  00558		 |$LN111@HalCreateS|
  00558	00000000	 DCD         |?g_dwSurfaceCount@@3KA|
  0055c		 |$LN112@HalCreateS|
  0055c	8876017c	 DCD         0x8876017c
  00560		 |$LN113@HalCreateS|
  00560	59565955	 DCD         0x59565955
  00564		 |$LN114@HalCreateS|
  00564	56595559	 DCD         0x56595559
  00568		 |$LN115@HalCreateS|
  00568	55595659	 DCD         0x55595659
  0056c		 |$LN116@HalCreateS|
  0056c	32595559	 DCD         0x32595559
  00570		 |$M42720|

			 ENDP  ; |?HalCreateSurface@@YAKPAU_DDHAL_CREATESURFACEDATA@@@Z|, HalCreateSurface

	EXPORT	|?HalDestroySurface@@YAKPAU_DDHAL_DESTROYSURFACEDATA@@@Z| ; HalDestroySurface
	IMPORT	|DDGPEDestroySurface|
	IMPORT	|?HideOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z| ; OMAPDDGPE::HideOverlay
	IMPORT	|?DisableAlphaConst@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::DisableAlphaConst
	IMPORT	|?DisableColorKey@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::DisableColorKey
	IMPORT	|?GetDDGPE@@YAPAVDDGPE@@XZ|		; GetDDGPE
	IMPORT	|?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z| ; DDGPESurf::GetDDGPESurf
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T42758| DCD	|$LN14@HalDestroy|
	DCD	0x40002301
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\halsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalDestroySurface@@YAKPAU_DDHAL_DESTROYSURFACEDATA@@@Z| PROC ; HalDestroySurface

; 505  : {

  00000		 |$LN14@HalDestroy|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M42755|
  00004	e1a06000	 mov         r6, r0

; 506  :     DWORD               result;
; 507  :     OMAPDDGPE*          pDDGPE = (OMAPDDGPE*) GetGPE();

  00008	eb000000	 bl          GetGPE
  0000c	e1a05000	 mov         r5, r0

; 508  :     OMAPDDGPESurface*   pSurf = (OMAPDDGPESurface*) DDGPESurf::GetDDGPESurf(pd->lpDDSurface);

  00010	e5960004	 ldr         r0, [r6, #4]
  00014	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
  00018	e1a04000	 mov         r4, r0

; 509  :     
; 510  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"+HalDestroySurface() ----------------------------\r\n"));
; 511  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"pd->lpDDSurface = 0x%x  pSurf = 0x%x\r\n", pd->lpDDSurface, pSurf));
; 512  : 
; 513  :     //  If the primary surface is being destroyed, disable all color keys
; 514  :     if( pSurf == GetDDGPE()->PrimarySurface() )

  0001c	eb000000	 bl          |?GetDDGPE@@YAPAVDDGPE@@XZ|
  00020	e5903004	 ldr         r3, [r0, #4]
  00024	e1540003	 cmp         r4, r3
  00028	1a000004	 bne         |$LN3@HalDestroy|

; 515  :     {
; 516  :         pDDGPE->DisableColorKey();

  0002c	e1a00005	 mov         r0, r5
  00030	eb000000	 bl          |?DisableColorKey@OMAPDDGPE@@QAAKXZ|

; 517  :         pDDGPE->DisableAlphaConst();

  00034	e1a00005	 mov         r0, r5
  00038	eb000000	 bl          |?DisableAlphaConst@OMAPDDGPE@@QAAKXZ|

; 518  :     }
; 519  :     else

  0003c	ea00000d	 b           |$LN2@HalDestroy|
  00040		 |$LN3@HalDestroy|

; 520  :     {
; 521  :         //  If the surface is an overlay and the first in a chain of flipping surfaces, hide it
; 522  :         //  For some reason, WM7 doesn't hide overlay surfaces prior to deleting them
; 523  :         if( pSurf && pSurf->IsOverlay() && (pSurf == pSurf->Parent()) )

  00040	e3540000	 cmp         r4, #0
  00044	0a000007	 beq         |$LN1@HalDestroy|
  00048	e5943060	 ldr         r3, [r4, #0x60]
  0004c	e3530000	 cmp         r3, #0
  00050	0a000004	 beq         |$LN1@HalDestroy|
  00054	e5943084	 ldr         r3, [r4, #0x84]
  00058	e1540003	 cmp         r4, r3

; 524  :         {
; 525  :             pDDGPE->HideOverlay( pSurf );

  0005c	01a01004	 moveq       r1, r4
  00060	01a00005	 moveq       r0, r5
  00064	0b000000	 bleq        |?HideOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z|
  00068		 |$LN1@HalDestroy|

; 526  :         }
; 527  :         
; 528  :         g_dwSurfaceCount--;

  00068	e59f2018	 ldr         r2, [pc, #0x18]
  0006c	e5923000	 ldr         r3, [r2]
  00070	e2433001	 sub         r3, r3, #1
  00074	e5823000	 str         r3, [r2]
  00078		 |$LN2@HalDestroy|

; 529  :     }
; 530  : 
; 531  :     //  Call DDGPE function
; 532  :     result = DDGPEDestroySurface(pd);

  00078	e1a00006	 mov         r0, r6
  0007c	eb000000	 bl          DDGPEDestroySurface

; 533  : 
; 534  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"-HalDestroySurface() result = 0x%x  pd->ddRVal = 0x%x surface count = %d\r\n\r\n", result, pd->ddRVal, g_dwSurfaceCount));
; 535  :     
; 536  :     return result;
; 537  : }

  00080	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN15@HalDestroy|
  00088		 |$LN16@HalDestroy|
  00088	00000000	 DCD         |?g_dwSurfaceCount@@3KA|
  0008c		 |$M42756|

			 ENDP  ; |?HalDestroySurface@@YAKPAU_DDHAL_DESTROYSURFACEDATA@@@Z|, HalDestroySurface

	EXPORT	|?HalFlip@@YAKPAU_DDHAL_FLIPDATA@@@Z|	; HalFlip
	IMPORT	|?FlipSurface@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z| ; OMAPDDGPE::FlipSurface
	IMPORT	|?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z| ; OMAPDDGPE::SurfaceFlipping

  00000			 AREA	 |.pdata|, PDATA
|$T42774| DCD	|$LN9@HalFlip|
	DCD	0x40003601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalFlip@@YAKPAU_DDHAL_FLIPDATA@@@Z| PROC ; HalFlip

; 544  : {

  00000		 |$LN9@HalFlip|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M42771|
  00004	e1a05000	 mov         r5, r0

; 545  :     OMAPDDGPE*          pDDGPE = (OMAPDDGPE*) GetGPE();

  00008	eb000000	 bl          GetGPE
  0000c	e1a04000	 mov         r4, r0

; 546  :     OMAPDDGPESurface*   pSurfCurr = (OMAPDDGPESurface*) DDGPESurf::GetDDGPESurf(pd->lpSurfCurr);

  00010	e5950004	 ldr         r0, [r5, #4]
  00014	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
  00018	e1a06000	 mov         r6, r0

; 547  :     OMAPDDGPESurface*   pSurfTarg = (OMAPDDGPESurface*) DDGPESurf::GetDDGPESurf(pd->lpSurfTarg);

  0001c	e5950008	 ldr         r0, [r5, #8]
  00020	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|

; 548  : 
; 549  :     if(pDDGPE->FlipInProgress() && 
; 550  :         (pSurfCurr != NULL && pDDGPE->SurfaceFlipping(pSurfCurr,FALSE)))

  00024	e5943000	 ldr         r3, [r4]
  00028	e1a07000	 mov         r7, r0
  0002c	e1a00004	 mov         r0, r4
  00030	e5933050	 ldr         r3, [r3, #0x50]
  00034	e1a0e00f	 mov         lr, pc
  00038	e12fff13	 bx          r3
  0003c	e3500000	 cmp         r0, #0
  00040	0a00000f	 beq         |$LN1@HalFlip|
  00044	e3560000	 cmp         r6, #0
  00048	0a00000d	 beq         |$LN1@HalFlip|
  0004c	e3a02000	 mov         r2, #0
  00050	e1a01006	 mov         r1, r6
  00054	e1a00004	 mov         r0, r4
  00058	eb000000	 bl          |?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z|
  0005c	e3500000	 cmp         r0, #0
  00060	0a000007	 beq         |$LN1@HalFlip|

; 551  :     {   
; 552  :         if (pd->dwFlags & (DDFLIP_WAITNOTBUSY|DDFLIP_WAITVSYNC)) 

  00064	e595300c	 ldr         r3, [r5, #0xC]
  00068	e3130009	 tst         r3, #9
  0006c	0a000015	 beq         |$LN2@HalFlip|

; 553  :         {            
; 554  :             pDDGPE->WaitForVBlank();            

  00070	e5943000	 ldr         r3, [r4]
  00074	e1a00004	 mov         r0, r4
  00078	e5933054	 ldr         r3, [r3, #0x54]
  0007c	e1a0e00f	 mov         lr, pc
  00080	e12fff13	 bx          r3
  00084		 |$LN1@HalFlip|

; 561  :         }
; 562  :     }  
; 563  : 
; 564  :     //  Lock the display driver
; 565  :     pDDGPE->Lock();

  00084	e5943000	 ldr         r3, [r4]
  00088	e1a00004	 mov         r0, r4
  0008c	e59330ec	 ldr         r3, [r3, #0xEC]
  00090	e1a0e00f	 mov         lr, pc
  00094	e12fff13	 bx          r3

; 566  :     //  Flip to the target surface
; 567  :     pd->ddRVal = pDDGPE->FlipSurface(pSurfTarg);

  00098	e1a01007	 mov         r1, r7
  0009c	e1a00004	 mov         r0, r4
  000a0	eb000000	 bl          |?FlipSurface@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z|
  000a4	e5850010	 str         r0, [r5, #0x10]

; 568  :     //  Unlock the display driver
; 569  :     pDDGPE->Unlock();   

  000a8	e5943000	 ldr         r3, [r4]
  000ac	e1a00004	 mov         r0, r4
  000b0	e59330f0	 ldr         r3, [r3, #0xF0]
  000b4	e1a0e00f	 mov         lr, pc
  000b8	e12fff13	 bx          r3
  000bc		 |$LN6@HalFlip|

; 570  :     
; 571  :     return DDHAL_DRIVER_HANDLED;

  000bc	e3a00001	 mov         r0, #1

; 572  : }

  000c0	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000c4	e12fff1e	 bx          lr
  000c8		 |$LN2@HalFlip|

; 555  :         }
; 556  :         else
; 557  :         {
; 558  :            //  Display controller still performing a flip
; 559  :             pd->ddRVal = DDERR_WASSTILLDRAWING; 

  000c8	e59f3004	 ldr         r3, [pc, #4]

; 560  :             return DDHAL_DRIVER_HANDLED;

  000cc	e5853010	 str         r3, [r5, #0x10]
  000d0	eafffff9	 b           |$LN6@HalFlip|
  000d4		 |$LN10@HalFlip|
  000d4		 |$LN11@HalFlip|
  000d4	8876021c	 DCD         0x8876021c
  000d8		 |$M42772|

			 ENDP  ; |?HalFlip@@YAKPAU_DDHAL_FLIPDATA@@@Z|, HalFlip

	EXPORT	|?HalGetFlipStatus@@YAKPAU_DDHAL_GETFLIPSTATUSDATA@@@Z| ; HalGetFlipStatus

  00000			 AREA	 |.pdata|, PDATA
|$T42790| DCD	|$LN13@HalGetFlip|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalGetFlipStatus@@YAKPAU_DDHAL_GETFLIPSTATUSDATA@@@Z| PROC ; HalGetFlipStatus

; 579  : {

  00000		 |$LN13@HalGetFlip|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M42787|
  00004	e1a04000	 mov         r4, r0

; 580  :     OMAPDDGPE*  pDDGPE = (OMAPDDGPE*) GetGPE();

  00008	eb000000	 bl          GetGPE
  0000c	e1a06000	 mov         r6, r0

; 581  :     OMAPDDGPESurface * pSurf = (OMAPDDGPESurface*)DDGPESurf::GetDDGPESurf(pd->lpDDSurface);

  00010	e5940004	 ldr         r0, [r4, #4]
  00014	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|

; 582  : 
; 583  : 	pd->ddRVal = DD_OK;
; 584  : 
; 585  :     if ( (pd->dwFlags & DDGFS_ISFLIPDONE) &&
; 586  :             pDDGPE->FlipInProgress())

  00018	e5943008	 ldr         r3, [r4, #8]
  0001c	e3a07000	 mov         r7, #0
  00020	e1a05000	 mov         r5, r0
  00024	e3130002	 tst         r3, #2
  00028	e584700c	 str         r7, [r4, #0xC]
  0002c	0a000008	 beq         |$LN6@HalGetFlip|
  00030	e5963000	 ldr         r3, [r6]
  00034	e1a00006	 mov         r0, r6
  00038	e5933050	 ldr         r3, [r3, #0x50]
  0003c	e1a0e00f	 mov         lr, pc
  00040	e12fff13	 bx          r3
  00044	e3500000	 cmp         r0, #0
  00048	0a000001	 beq         |$LN6@HalGetFlip|

; 587  :     {               
; 588  :         if((pSurf != NULL && pDDGPE->SurfaceFlipping(pSurf,FALSE)))

  0004c	e3550000	 cmp         r5, #0

; 589  :         {
; 590  :             pd->ddRVal = DDERR_WASSTILLDRAWING;        
; 591  :         }
; 592  : 		else
; 593  : 			pd->ddRVal = DD_OK;
; 594  :     }   
; 595  :     else if ( (pd->dwFlags & DDGFS_CANFLIP) &&

  00050	ea000001	 b           |$LN10@HalGetFlip|
  00054		 |$LN6@HalGetFlip|

; 596  :                 pDDGPE->SurfaceFlipping(pSurf,FALSE))

  00054	e5943008	 ldr         r3, [r4, #8]
  00058	e3130001	 tst         r3, #1
  0005c		 |$LN10@HalGetFlip|
  0005c	0a000007	 beq         |$LN2@HalGetFlip|
  00060	e3a02000	 mov         r2, #0
  00064	e1a01005	 mov         r1, r5
  00068	e1a00006	 mov         r0, r6
  0006c	eb000000	 bl          |?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z|
  00070	e3500000	 cmp         r0, #0

; 597  :     {        
; 598  :         pd->ddRVal = DDERR_WASSTILLDRAWING;             

  00074	159f3014	 ldrne       r3, [pc, #0x14]
  00078	1584300c	 strne       r3, [r4, #0xC]
  0007c	1a000000	 bne         |$LN1@HalGetFlip|
  00080		 |$LN2@HalGetFlip|

; 599  :     }
; 600  :     else 
; 601  :     {
; 602  :         pd->ddRVal = DD_OK;

  00080	e584700c	 str         r7, [r4, #0xC]
  00084		 |$LN1@HalGetFlip|

; 603  :     }
; 604  :     return DDHAL_DRIVER_HANDLED;

  00084	e3a00001	 mov         r0, #1

; 605  : }

  00088	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN14@HalGetFlip|
  00090		 |$LN15@HalGetFlip|
  00090	8876021c	 DCD         0x8876021c
  00094		 |$M42788|

			 ENDP  ; |?HalGetFlipStatus@@YAKPAU_DDHAL_GETFLIPSTATUSDATA@@@Z|, HalGetFlipStatus

	EXPORT	|?HalGetScanLine@@YAKPAU_DDHAL_GETSCANLINEDATA@@@Z| ; HalGetScanLine
	IMPORT	|?GetScanLine@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::GetScanLine

  00000			 AREA	 |.pdata|, PDATA
|$T42803| DCD	|$LN5@HalGetScan|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalGetScanLine@@YAKPAU_DDHAL_GETSCANLINEDATA@@@Z| PROC ; HalGetScanLine

; 612  : {

  00000		 |$LN5@HalGetScan|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M42800|
  00004	e1a04000	 mov         r4, r0

; 613  :     OMAPDDGPE*  pDDGPE = (OMAPDDGPE*) GetGPE();

  00008	eb000000	 bl          GetGPE

; 614  : 
; 615  :     lpgsld->dwScanLine = pDDGPE->GetScanLine();

  0000c	eb000000	 bl          |?GetScanLine@OMAPDDGPE@@QAAKXZ|

; 616  :     lpgsld->ddRVal = DD_OK;

  00010	e3a03000	 mov         r3, #0
  00014	e5840004	 str         r0, [r4, #4]
  00018	e5843008	 str         r3, [r4, #8]

; 617  :     return DDHAL_DRIVER_HANDLED;    

  0001c	e3a00001	 mov         r0, #1

; 618  : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M42801|

			 ENDP  ; |?HalGetScanLine@@YAKPAU_DDHAL_GETSCANLINEDATA@@@Z|, HalGetScanLine

	EXPORT	|?HalLock@@YAKPAU_DDHAL_LOCKDATA@@@Z|	; HalLock
	IMPORT	|?GetPtr@GPESurf@@QAAPAEHH@Z|		; GPESurf::GetPtr

  00000			 AREA	 |.pdata|, PDATA
|$T42818| DCD	|$LN10@HalLock|
	DCD	0x40002601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalLock@@YAKPAU_DDHAL_LOCKDATA@@@Z| PROC ; HalLock

; 624  : {

  00000		 |$LN10@HalLock|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M42815|
  00004	e1a04000	 mov         r4, r0

; 625  :     OMAPDDGPE*  pDDGPE = (OMAPDDGPE*) GetGPE();

  00008	eb000000	 bl          GetGPE
  0000c	e1a05000	 mov         r5, r0

; 626  :     OMAPDDGPESurface * pSurf = (OMAPDDGPESurface*)DDGPESurf::GetDDGPESurf(pd->lpDDSurface);

  00010	e5940004	 ldr         r0, [r4, #4]
  00014	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
  00018	e1a06000	 mov         r6, r0

; 627  :     
; 628  :     //Check to see if the surface to be locked is still being shown
; 629  :     //check is only done on primary or overlay flip chains, other surfaces will always return false
; 630  :     if (pDDGPE->SurfaceFlipping(pSurf,TRUE))

  0001c	e1a01006	 mov         r1, r6
  00020	e3a02001	 mov         r2, #1
  00024	e1a00005	 mov         r0, r5
  00028	eb000000	 bl          |?SurfaceFlipping@OMAPDDGPE@@QAAHPAVOMAPDDGPESurface@@H@Z|
  0002c	e3500000	 cmp         r0, #0
  00030	0a000007	 beq         |$LN2@HalLock|

; 631  :     {
; 632  :         if (pd->dwFlags & DDLOCK_WAITNOTBUSY)

  00034	e594301c	 ldr         r3, [r4, #0x1C]
  00038	e3130008	 tst         r3, #8
  0003c	0a000012	 beq         |$LN3@HalLock|

; 633  :         {
; 634  :             pDDGPE->WaitForVBlank();

  00040	e5953000	 ldr         r3, [r5]
  00044	e1a00005	 mov         r0, r5
  00048	e5933054	 ldr         r3, [r3, #0x54]
  0004c	e1a0e00f	 mov         lr, pc
  00050	e12fff13	 bx          r3
  00054		 |$LN2@HalLock|

; 640  :         }
; 641  :     }
; 642  :     
; 643  :     DWORD ulAddress;
; 644  :     int x = 0;
; 645  :     int y = 0;
; 646  :     if (pd->bHasRect) 

  00054	e5943008	 ldr         r3, [r4, #8]
  00058	e3a01000	 mov         r1, #0
  0005c	e3a02000	 mov         r2, #0
  00060	e3530000	 cmp         r3, #0

; 647  :     {
; 648  :         x = pd->rArea.left;

  00064	1594100c	 ldrne       r1, [r4, #0xC]

; 649  :         y = pd->rArea.top;

  00068	15942010	 ldrne       r2, [r4, #0x10]

; 650  :     }
; 651  : 
; 652  :     ulAddress = (ULONG) pSurf->GetPtr(x,y);

  0006c	e1a00006	 mov         r0, r6
  00070	eb000000	 bl          |?GetPtr@GPESurf@@QAAPAEHH@Z|

; 653  :     pd->lpSurfData = reinterpret_cast<LPVOID>(ulAddress);
; 654  :     pd->ddRVal = DD_OK;

  00074	e5840020	 str         r0, [r4, #0x20]
  00078	e3a03000	 mov         r3, #0
  0007c		 |$LN7@HalLock|

; 655  : 
; 656  :     return DDHAL_DRIVER_HANDLED;

  0007c	e3a00001	 mov         r0, #1

; 653  :     pd->lpSurfData = reinterpret_cast<LPVOID>(ulAddress);
; 654  :     pd->ddRVal = DD_OK;

  00080	e5843024	 str         r3, [r4, #0x24]

; 657  : }

  00084	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN3@HalLock|

; 635  :         }
; 636  :         else
; 637  :         {
; 638  :             pd->ddRVal = DDERR_WASSTILLDRAWING;

  0008c	e59f3000	 ldr         r3, [pc]

; 639  :             return DDHAL_DRIVER_HANDLED;

  00090	eafffff9	 b           |$LN7@HalLock|
  00094		 |$LN11@HalLock|
  00094		 |$LN12@HalLock|
  00094	8876021c	 DCD         0x8876021c
  00098		 |$M42816|

			 ENDP  ; |?HalLock@@YAKPAU_DDHAL_LOCKDATA@@@Z|, HalLock

	EXPORT	|?HalUnlock@@YAKPAU_DDHAL_UNLOCKDATA@@@Z| ; HalUnlock
	IMPORT	|DDGPEUnlock|

  00000			 AREA	 |.pdata|, PDATA
|$T42830| DCD	|$LN5@HalUnlock|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalUnlock@@YAKPAU_DDHAL_UNLOCKDATA@@@Z| PROC ; HalUnlock

; 664  : {

  00000		 |$LN5@HalUnlock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M42827|

; 665  :     DWORD       result;    
; 666  : 
; 667  :     //  Call DDGPE function
; 668  :     result = DDGPEUnlock(pd);

  00004	eb000000	 bl          DDGPEUnlock

; 669  : 
; 670  :     return result;
; 671  : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M42828|

			 ENDP  ; |?HalUnlock@@YAKPAU_DDHAL_UNLOCKDATA@@@Z|, HalUnlock

	EXPORT	|?HalSetColorKey@@YAKPAU_DDHAL_SETCOLORKEYDATA@@@Z| ; HalSetColorKey
	IMPORT	|DDGPESetColorKey|
	IMPORT	|?SetDestColorKey@OMAPDDGPE@@QAAKK@Z|	; OMAPDDGPE::SetDestColorKey
	IMPORT	|?SetSrcColorKey@OMAPDDGPE@@QAAKK@Z|	; OMAPDDGPE::SetSrcColorKey

  00000			 AREA	 |.pdata|, PDATA
|$T42843| DCD	|$LN14@HalSetColo|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalSetColorKey@@YAKPAU_DDHAL_SETCOLORKEYDATA@@@Z| PROC ; HalSetColorKey

; 678  : {

  00000		 |$LN14@HalSetColo|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M42840|
  00004	e1a04000	 mov         r4, r0

; 679  :     OMAPDDGPE*          pDDGPE = (OMAPDDGPE*) GetGPE();

  00008	eb000000	 bl          GetGPE

; 680  :     
; 681  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"+HalSetColorKey() -------------------------------\r\n"));
; 682  : 
; 683  :     DumpDD_SETCOLORKEY(pd);
; 684  :     
; 685  : 
; 686  :     //  Default result
; 687  :     pd->ddRVal = DDERR_COLORKEYNOTSET;

  0000c	e59f307c	 ldr         r3, [pc, #0x7C]

; 688  : 
; 689  :     //  Set the desired color key for overlays
; 690  :     if( pd->dwFlags & DDCKEY_SRCOVERLAY )

  00010	e5942008	 ldr         r2, [r4, #8]
  00014	e1a05000	 mov         r5, r0
  00018	e5843014	 str         r3, [r4, #0x14]
  0001c	e3120010	 tst         r2, #0x10
  00020	0a000006	 beq         |$LN5@HalSetColo|

; 691  :     {
; 692  :         //  Check for special values for disable
; 693  :         if( pd->ckNew.dwColorSpaceLowValue == -1 )

  00024	e594100c	 ldr         r1, [r4, #0xC]
  00028	e3710001	 cmn         r1, #1
  0002c	1a000001	 bne         |$LN6@HalSetColo|

; 694  :         {
; 695  :             pd->ddRVal = pDDGPE->DisableColorKey();

  00030	eb000000	 bl          |?DisableColorKey@OMAPDDGPE@@QAAKXZ|

; 696  :         }
; 697  :         else

  00034	ea000000	 b           |$LN10@HalSetColo|
  00038		 |$LN6@HalSetColo|

; 698  :         {        
; 699  :             pd->ddRVal = pDDGPE->SetSrcColorKey( pd->ckNew.dwColorSpaceLowValue );

  00038	eb000000	 bl          |?SetSrcColorKey@OMAPDDGPE@@QAAKK@Z|
  0003c		 |$LN10@HalSetColo|
  0003c	e5840014	 str         r0, [r4, #0x14]
  00040		 |$LN5@HalSetColo|

; 700  :         }
; 701  :     }
; 702  : 
; 703  :     if( pd->dwFlags & DDCKEY_DESTOVERLAY )

  00040	e5943008	 ldr         r3, [r4, #8]
  00044	e3130004	 tst         r3, #4
  00048	0a000007	 beq         |$LN2@HalSetColo|

; 704  :     {
; 705  :         //  Check for special values for disable
; 706  :         if( pd->ckNew.dwColorSpaceLowValue == -1 )

  0004c	e594100c	 ldr         r1, [r4, #0xC]

; 707  :         {
; 708  :             pd->ddRVal = pDDGPE->DisableColorKey();

  00050	e1a00005	 mov         r0, r5
  00054	e3710001	 cmn         r1, #1
  00058	1a000001	 bne         |$LN3@HalSetColo|
  0005c	eb000000	 bl          |?DisableColorKey@OMAPDDGPE@@QAAKXZ|

; 709  :         }
; 710  :         else

  00060	ea000000	 b           |$LN11@HalSetColo|
  00064		 |$LN3@HalSetColo|

; 711  :         {        
; 712  :             pd->ddRVal = pDDGPE->SetDestColorKey( pd->ckNew.dwColorSpaceLowValue );

  00064	eb000000	 bl          |?SetDestColorKey@OMAPDDGPE@@QAAKK@Z|
  00068		 |$LN11@HalSetColo|
  00068	e5840014	 str         r0, [r4, #0x14]
  0006c		 |$LN2@HalSetColo|

; 713  :         }
; 714  :     }
; 715  : 
; 716  :     //  SW BLT supports this color key type
; 717  :     if( pd->dwFlags & DDCKEY_SRCBLT )

  0006c	e5943008	 ldr         r3, [r4, #8]
  00070	e3130008	 tst         r3, #8
  00074	0a000002	 beq         |$LN1@HalSetColo|

; 718  :     {
; 719  :         pd->ddRVal = DDGPESetColorKey( pd );

  00078	e1a00004	 mov         r0, r4
  0007c	eb000000	 bl          DDGPESetColorKey
  00080	e5840014	 str         r0, [r4, #0x14]
  00084		 |$LN1@HalSetColo|

; 720  :     }
; 721  : 
; 722  :           
; 723  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"-HalSetColorKey() pd->ddRVal = 0x%x\r\n\r\n", pd->ddRVal));
; 724  :     
; 725  :     return DDHAL_DRIVER_HANDLED;

  00084	e3a00001	 mov         r0, #1

; 726  : }

  00088	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN15@HalSetColo|
  00090		 |$LN16@HalSetColo|
  00090	88760190	 DCD         0x88760190
  00094		 |$M42841|

			 ENDP  ; |?HalSetColorKey@@YAKPAU_DDHAL_SETCOLORKEYDATA@@@Z|, HalSetColorKey

	EXPORT	|?HalUpdateOverlay@@YAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z| ; HalUpdateOverlay
	IMPORT	|?ShowOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@PAUtagRECT@@1H@Z| ; OMAPDDGPE::ShowOverlay
	IMPORT	|?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z| ; OMAPDDGPE::SetAlphaConst

  00000			 AREA	 |.pdata|, PDATA
|$T42861| DCD	|$LN31@HalUpdateO|
	DCD	0x40007e02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalUpdateOverlay@@YAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z| PROC ; HalUpdateOverlay

; 733  : {

  00000		 |$LN31@HalUpdateO|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M42858|
  00008	e1a04000	 mov         r4, r0

; 734  :     OMAPDDGPE*          pDDGPE = (OMAPDDGPE*) GetGPE();

  0000c	eb000000	 bl          GetGPE
  00010	e1a05000	 mov         r5, r0

; 735  :     OMAPDDGPESurface*   pOverlaySurf = (OMAPDDGPESurface*) DDGPESurf::GetDDGPESurf(pd->lpDDSrcSurface);

  00014	e5940018	 ldr         r0, [r4, #0x18]
  00018	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|

; 736  :     BOOL                bMirror = (pd->dwFlags & DDOVER_MIRRORLEFTRIGHT) ? TRUE : FALSE;    

  0001c	e594302c	 ldr         r3, [r4, #0x2C]
  00020	e1a06000	 mov         r6, r0

; 737  :     DWORD               result = DDHAL_DRIVER_NOTHANDLED;

  00024	e3a00000	 mov         r0, #0
  00028	e3130a01	 tst         r3, #1, 20
  0002c	13a07001	 movne       r7, #1
  00030	03a07000	 moveq       r7, #0

; 738  :    
; 739  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"+HalUpdateOverlay() -------------------------------\r\n"));
; 740  :     
; 741  :     DumpDD_UPDATEOVERLAY(pd);
; 742  :     
; 743  : 
; 744  :     //  Set the desired color key for over-rides
; 745  :     if( pd->dwFlags & DDOVER_KEYSRCOVERRIDE )

  00034	e3130c02	 tst         r3, #2, 24
  00038	0a000006	 beq         |$LN23@HalUpdateO|

; 746  :     {
; 747  :         pd->ddRVal = pDDGPE->SetSrcColorKey( pd->overlayFX.dckSrcColorkey.dwColorSpaceLowValue );

  0003c	e5941044	 ldr         r1, [r4, #0x44]
  00040	e1a00005	 mov         r0, r5
  00044	eb000000	 bl          |?SetSrcColorKey@OMAPDDGPE@@QAAKK@Z|
  00048	e3500000	 cmp         r0, #0
  0004c	e584004c	 str         r0, [r4, #0x4C]

; 748  :         result = DDHAL_DRIVER_HANDLED;

  00050	e3a00001	 mov         r0, #1

; 749  :         if (DD_OK != pd->ddRVal)

  00054	1a000064	 bne         |$Cleanup$42344|
  00058		 |$LN23@HalUpdateO|

; 750  :         {
; 751  :             goto Cleanup;
; 752  :         }
; 753  :     }
; 754  : 
; 755  :     if( pd->dwFlags & DDOVER_KEYDESTOVERRIDE )

  00058	e594302c	 ldr         r3, [r4, #0x2C]
  0005c	e3130080	 tst         r3, #0x80
  00060	0a000006	 beq         |$LN20@HalUpdateO|

; 756  :     {
; 757  :         pd->ddRVal = pDDGPE->SetDestColorKey( pd->overlayFX.dckDestColorkey.dwColorSpaceLowValue );

  00064	e594103c	 ldr         r1, [r4, #0x3C]
  00068	e1a00005	 mov         r0, r5
  0006c	eb000000	 bl          |?SetDestColorKey@OMAPDDGPE@@QAAKK@Z|
  00070	e3500000	 cmp         r0, #0
  00074	e584004c	 str         r0, [r4, #0x4C]

; 758  :         result = DDHAL_DRIVER_HANDLED;

  00078	e3a00001	 mov         r0, #1

; 759  :         if (DD_OK != pd->ddRVal)

  0007c	1a00005a	 bne         |$Cleanup$42344|
  00080		 |$LN20@HalUpdateO|

; 760  :         {
; 761  :             goto Cleanup;
; 762  :         }
; 763  :     }
; 764  : 
; 765  :     if( pd->dwFlags & DDOVER_ALPHACONSTOVERRIDE )

  00080	e594302c	 ldr         r3, [r4, #0x2C]
  00084	e3130010	 tst         r3, #0x10
  00088	0a000024	 beq         |$LN14@HalUpdateO|

; 766  :     {
; 767  :         //  If alpha const bit depth is set at 1 bits, disable constant alpha
; 768  :         if( pd->overlayFX.dwAlphaConstBitDepth == 1 )

  0008c	e5943034	 ldr         r3, [r4, #0x34]
  00090	e3530001	 cmp         r3, #1

; 769  :         {
; 770  :             pDDGPE->DisableAlphaConst();

  00094	01a00005	 moveq       r0, r5
  00098	0b000000	 bleq        |?DisableAlphaConst@OMAPDDGPE@@QAAKXZ|

; 771  :         }
; 772  :         
; 773  :         //  If alpha const bit depth is set at 8 bits, set GFX alpha to given value and VID2 to 100%
; 774  :         if( pd->overlayFX.dwAlphaConstBitDepth == 8 )

  0009c	e5943034	 ldr         r3, [r4, #0x34]
  000a0	e3530008	 cmp         r3, #8
  000a4	1a00000a	 bne         |$LN16@HalUpdateO|

; 775  :         {
; 776  :             pd->ddRVal = pDDGPE->SetAlphaConst( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX, pd->overlayFX.dwAlphaConst );

  000a8	e5942038	 ldr         r2, [r4, #0x38]
  000ac	e3a01002	 mov         r1, #2
  000b0	e1a00005	 mov         r0, r5
  000b4	eb000000	 bl          |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z|
  000b8	e1a03000	 mov         r3, r0

; 777  :             pd->ddRVal = pDDGPE->SetAlphaConst( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2, 0xff );

  000bc	e1a00005	 mov         r0, r5
  000c0	e3a020ff	 mov         r2, #0xFF
  000c4	e3a01003	 mov         r1, #3
  000c8	e584304c	 str         r3, [r4, #0x4C]
  000cc	eb000000	 bl          |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z|
  000d0	e584004c	 str         r0, [r4, #0x4C]
  000d4		 |$LN16@HalUpdateO|

; 778  :         }
; 779  :         
; 780  :         //  If alpha const bit depth is set at 16 bits, set GFX and VID2 alphas to given values
; 781  :         if( pd->overlayFX.dwAlphaConstBitDepth == 16 )

  000d4	e5943034	 ldr         r3, [r4, #0x34]
  000d8	e3530010	 cmp         r3, #0x10
  000dc	1a00000b	 bne         |$LN15@HalUpdateO|

; 782  :         {
; 783  :             pd->ddRVal = pDDGPE->SetAlphaConst( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX, (pd->overlayFX.dwAlphaConst & 0x00ff) );

  000e0	e5943038	 ldr         r3, [r4, #0x38]
  000e4	e3a01002	 mov         r1, #2
  000e8	e1a00005	 mov         r0, r5
  000ec	e20320ff	 and         r2, r3, #0xFF
  000f0	eb000000	 bl          |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z|

; 784  :             pd->ddRVal = pDDGPE->SetAlphaConst( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2, ((pd->overlayFX.dwAlphaConst >> 8) & 0x00ff) );

  000f4	e5d42039	 ldrb        r2, [r4, #0x39]
  000f8	e1a03000	 mov         r3, r0
  000fc	e1a00005	 mov         r0, r5
  00100	e3a01003	 mov         r1, #3
  00104	e584304c	 str         r3, [r4, #0x4C]
  00108	eb000000	 bl          |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z|
  0010c	e584004c	 str         r0, [r4, #0x4C]
  00110		 |$LN15@HalUpdateO|

; 785  :         }
; 786  :         
; 787  :         result = DDHAL_DRIVER_HANDLED;
; 788  :         if (DD_OK != pd->ddRVal)

  00110	e594304c	 ldr         r3, [r4, #0x4C]
  00114	e3a00001	 mov         r0, #1
  00118	e3530000	 cmp         r3, #0
  0011c	1a000032	 bne         |$Cleanup$42344|
  00120		 |$LN14@HalUpdateO|

; 789  :         {
; 790  :             goto Cleanup;
; 791  :         }
; 792  :     }
; 793  : 
; 794  :     if ( pd->dwFlags & DDOVER_ALPHADEST )

  00120	e594302c	 ldr         r3, [r4, #0x2C]
  00124	e3130001	 tst         r3, #1
  00128	0a00000d	 beq         |$LN11@HalUpdateO|

; 795  :     {
; 796  :         pd->ddRVal = pDDGPE->SetAlphaConst( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_GFX, 0xff );

  0012c	e3a020ff	 mov         r2, #0xFF
  00130	e3a01002	 mov         r1, #2
  00134	e1a00005	 mov         r0, r5
  00138	eb000000	 bl          |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z|
  0013c	e1a03000	 mov         r3, r0

; 797  :         pd->ddRVal = pDDGPE->SetAlphaConst( OMAP_DSS_COLORKEY_GLOBAL_ALPHA_VIDEO2, 0xff );

  00140	e1a00005	 mov         r0, r5
  00144	e3a020ff	 mov         r2, #0xFF
  00148	e3a01003	 mov         r1, #3
  0014c	e584304c	 str         r3, [r4, #0x4C]
  00150	eb000000	 bl          |?SetAlphaConst@OMAPDDGPE@@QAAKW4OMAP_DSS_COLORKEY@@K@Z|
  00154	e3500000	 cmp         r0, #0
  00158	e584004c	 str         r0, [r4, #0x4C]

; 798  :         result = DDHAL_DRIVER_HANDLED;

  0015c	e3a00001	 mov         r0, #1

; 799  :         if (DD_OK != pd->ddRVal)

  00160	1a000021	 bne         |$Cleanup$42344|
  00164		 |$LN11@HalUpdateO|

; 800  :         {
; 801  :             goto Cleanup;
; 802  :         }
; 803  :     }
; 804  : 
; 805  :     //  Show overlay pipeline
; 806  :     if( pd->dwFlags & DDOVER_SHOW )

  00164	e594302c	 ldr         r3, [r4, #0x2C]
  00168	e3130b01	 tst         r3, #1, 22
  0016c	0a00000c	 beq         |$LN7@HalUpdateO|

; 807  :     {
; 808  :         if (pOverlaySurf != NULL)

  00170	e3560000	 cmp         r6, #0
  00174	0a000006	 beq         |$LN8@HalUpdateO|

; 809  :         {
; 810  :             pd->ddRVal = pDDGPE->ShowOverlay( pOverlaySurf, &pd->rSrc, &pd->rDest, bMirror);

  00178	e2843008	 add         r3, r4, #8
  0017c	e284201c	 add         r2, r4, #0x1C
  00180	e1a01006	 mov         r1, r6
  00184	e1a00005	 mov         r0, r5
  00188	e58d7000	 str         r7, [sp]
  0018c	eb000000	 bl          |?ShowOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@PAUtagRECT@@1H@Z|
  00190	e584004c	 str         r0, [r4, #0x4C]
  00194		 |$LN8@HalUpdateO|

; 811  :         }
; 812  :         result = DDHAL_DRIVER_HANDLED;
; 813  :         if (DD_OK != pd->ddRVal)

  00194	e594304c	 ldr         r3, [r4, #0x4C]
  00198	e3a00001	 mov         r0, #1
  0019c	e3530000	 cmp         r3, #0
  001a0	1a000011	 bne         |$Cleanup$42344|
  001a4		 |$LN7@HalUpdateO|

; 814  :         {
; 815  :             goto Cleanup;
; 816  :         }
; 817  :     }  
; 818  : 
; 819  :     //  Hide overlay pipeline
; 820  :     if( pd->dwFlags & DDOVER_HIDE )

  001a4	e594302c	 ldr         r3, [r4, #0x2C]
  001a8	e3130020	 tst         r3, #0x20
  001ac	0a000009	 beq         |$LN3@HalUpdateO|

; 821  :     {
; 822  :         if (pOverlaySurf != NULL)

  001b0	e3560000	 cmp         r6, #0
  001b4	0a000003	 beq         |$LN4@HalUpdateO|

; 823  :         {
; 824  :             pd->ddRVal = pDDGPE->HideOverlay( pOverlaySurf );

  001b8	e1a01006	 mov         r1, r6
  001bc	e1a00005	 mov         r0, r5
  001c0	eb000000	 bl          |?HideOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@@Z|
  001c4	e584004c	 str         r0, [r4, #0x4C]
  001c8		 |$LN4@HalUpdateO|

; 825  :         }
; 826  :         result = DDHAL_DRIVER_HANDLED;
; 827  :         if (DD_OK != pd->ddRVal)

  001c8	e594304c	 ldr         r3, [r4, #0x4C]
  001cc	e3a00001	 mov         r0, #1
  001d0	e3530000	 cmp         r3, #0
  001d4	1a000004	 bne         |$Cleanup$42344|
  001d8		 |$LN3@HalUpdateO|

; 828  :         {
; 829  :             goto Cleanup;
; 830  :         }
; 831  :     }
; 832  : 
; 833  :     if( pd->dwFlags == 0 )

  001d8	e594302c	 ldr         r3, [r4, #0x2C]
  001dc	e3530000	 cmp         r3, #0

; 834  :     {
; 835  :         pd->ddRVal = 0;

  001e0	03a03000	 moveq       r3, #0
  001e4	0584304c	 streq       r3, [r4, #0x4C]

; 836  :         result = DDHAL_DRIVER_HANDLED;

  001e8	03a00001	 moveq       r0, #1
  001ec		 |$Cleanup$42344|

; 837  :     }
; 838  : 
; 839  : 
; 840  : Cleanup:
; 841  :     DEBUGMSG(GPE_ZONE_DDRAW_HAL, (L"-HalUpdateOverlay() result = 0x%x  pd->ddRVal = 0x%x\r\n\r\n", result, pd->ddRVal));
; 842  :     
; 843  :     return result;
; 844  : }

  001ec	e28dd004	 add         sp, sp, #4
  001f0	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  001f4	e12fff1e	 bx          lr
  001f8		 |$M42859|

			 ENDP  ; |?HalUpdateOverlay@@YAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z|, HalUpdateOverlay

	EXPORT	|?HalSetOverlayPosition@@YAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z| ; HalSetOverlayPosition
	IMPORT	|?MoveOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@JJ@Z| ; OMAPDDGPE::MoveOverlay

  00000			 AREA	 |.pdata|, PDATA
|$T42873| DCD	|$LN5@HalSetOver|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalSetOverlayPosition@@YAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z| PROC ; HalSetOverlayPosition

; 851  : {

  00000		 |$LN5@HalSetOver|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M42870|
  00004	e1a05000	 mov         r5, r0

; 852  :     OMAPDDGPE*          pDDGPE = (OMAPDDGPE*) GetGPE();

  00008	eb000000	 bl          GetGPE
  0000c	e1a04000	 mov         r4, r0

; 853  :     OMAPDDGPESurface*   pOverlaySurf = (OMAPDDGPESurface*) DDGPESurf::GetDDGPESurf(pd->lpDDSrcSurface);

  00010	e5950004	 ldr         r0, [r5, #4]
  00014	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|

; 854  :     
; 855  :     //  Update the overlay position
; 856  :     pd->ddRVal = pDDGPE->MoveOverlay( pOverlaySurf, pd->lXPos, pd->lYPos );

  00018	e5953010	 ldr         r3, [r5, #0x10]
  0001c	e595200c	 ldr         r2, [r5, #0xC]
  00020	e1a01000	 mov         r1, r0
  00024	e1a00004	 mov         r0, r4
  00028	eb000000	 bl          |?MoveOverlay@OMAPDDGPE@@QAAKPAVOMAPDDGPESurface@@JJ@Z|
  0002c	e5850014	 str         r0, [r5, #0x14]

; 857  : 
; 858  :     return DDHAL_DRIVER_HANDLED;

  00030	e3a00001	 mov         r0, #1

; 859  : }

  00034	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M42871|

			 ENDP  ; |?HalSetOverlayPosition@@YAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z|, HalSetOverlayPosition

	EXPORT	|?HalWaitForVerticalBlank@@YAKPAU_DDHAL_WAITFORVERTICALBLANKDATA@@@Z| ; HalWaitForVerticalBlank

  00000			 AREA	 |.pdata|, PDATA
|$T42884| DCD	|$LN8@HalWaitFor|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalWaitForVerticalBlank@@YAKPAU_DDHAL_WAITFORVERTICALBLANKDATA@@@Z| PROC ; HalWaitForVerticalBlank

; 866  : {

  00000		 |$LN8@HalWaitFor|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M42881|
  00004	e1a04000	 mov         r4, r0

; 867  :     OMAPDDGPE*          pDDGPE = (OMAPDDGPE*) GetGPE();

  00008	eb000000	 bl          GetGPE

; 868  : 
; 869  :     if(lpwfvbd->dwFlags & DDWAITVB_I_TESTVB)

  0000c	e5943004	 ldr         r3, [r4, #4]
  00010	e1a05000	 mov         r5, r0
  00014	e313011a	 tst         r3, #0x1A, 2
  00018	0a000004	 beq         |$LN3@HalWaitFor|

; 870  :     {
; 871  :         lpwfvbd->bIsInVB = pDDGPE->InVBlank();

  0001c	e5953000	 ldr         r3, [r5]
  00020	e5933030	 ldr         r3, [r3, #0x30]
  00024	e1a0e00f	 mov         lr, pc
  00028	e12fff13	 bx          r3
  0002c	e5840008	 str         r0, [r4, #8]
  00030		 |$LN3@HalWaitFor|

; 872  :     }
; 873  :     
; 874  :     //DSS only interrupts at the beginning of vsync.
; 875  :     //OMAP3xxx does not have a way to query if we are out of vertical blank interval
; 876  :     //the only information is the current scanline. 
; 877  :     if((lpwfvbd->dwFlags & DDWAITVB_BLOCKEND) ||
; 878  :         (lpwfvbd->dwFlags & DDWAITVB_BLOCKBEGIN))

  00030	e5943004	 ldr         r3, [r4, #4]
  00034	e3130004	 tst         r3, #4
  00038	1a000001	 bne         |$LN1@HalWaitFor|
  0003c	e3130001	 tst         r3, #1
  00040	0a000004	 beq         |$LN2@HalWaitFor|
  00044		 |$LN1@HalWaitFor|

; 879  :     {
; 880  :         pDDGPE->WaitForVBlank();

  00044	e5953000	 ldr         r3, [r5]
  00048	e1a00005	 mov         r0, r5
  0004c	e5933054	 ldr         r3, [r3, #0x54]
  00050	e1a0e00f	 mov         lr, pc
  00054	e12fff13	 bx          r3
  00058		 |$LN2@HalWaitFor|

; 881  :     }
; 882  : 
; 883  :     lpwfvbd->ddRVal = DD_OK;

  00058	e3a03000	 mov         r3, #0
  0005c	e584300c	 str         r3, [r4, #0xC]

; 884  :     return DDHAL_DRIVER_HANDLED;

  00060	e3a00001	 mov         r0, #1

; 885  : 
; 886  : 
; 887  : }

  00064	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M42882|

			 ENDP  ; |?HalWaitForVerticalBlank@@YAKPAU_DDHAL_WAITFORVERTICALBLANKDATA@@@Z|, HalWaitForVerticalBlank

	END
