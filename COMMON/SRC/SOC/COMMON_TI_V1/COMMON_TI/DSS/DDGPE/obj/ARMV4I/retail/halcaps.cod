; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DDGPE\halcaps.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?g_FourCC@@3PAKA| [ DATA ]		; g_FourCC
	EXPORT	|?cbDDCallbacks@@3U_DDHAL_DDCALLBACKS@@A| [ DATA ] ; cbDDCallbacks
	EXPORT	|?cbDDSurfaceCallbacks@@3U_DDHAL_DDSURFACECALLBACKS@@A| [ DATA ] ; cbDDSurfaceCallbacks
	IMPORT	|?HalSetOverlayPosition@@YAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z| ; HalSetOverlayPosition
	IMPORT	|?HalUpdateOverlay@@YAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z| ; HalUpdateOverlay
	IMPORT	|?HalGetFlipStatus@@YAKPAU_DDHAL_GETFLIPSTATUSDATA@@@Z| ; HalGetFlipStatus
	IMPORT	|?HalGetBltStatus@@YAKPAU_DDHAL_GETBLTSTATUSDATA@@@Z| ; HalGetBltStatus
	IMPORT	|?HalSetColorKey@@YAKPAU_DDHAL_SETCOLORKEYDATA@@@Z| ; HalSetColorKey
	IMPORT	|?HalUnlock@@YAKPAU_DDHAL_UNLOCKDATA@@@Z| ; HalUnlock
	IMPORT	|?HalLock@@YAKPAU_DDHAL_LOCKDATA@@@Z|	; HalLock
	IMPORT	|?HalFlip@@YAKPAU_DDHAL_FLIPDATA@@@Z|	; HalFlip
	IMPORT	|?HalDestroySurface@@YAKPAU_DDHAL_DESTROYSURFACEDATA@@@Z| ; HalDestroySurface
	IMPORT	|?HalGetScanLine@@YAKPAU_DDHAL_GETSCANLINEDATA@@@Z| ; HalGetScanLine
	IMPORT	|?HalCanCreateSurface@@YAKPAU_DDHAL_CANCREATESURFACEDATA@@@Z| ; HalCanCreateSurface
	IMPORT	|?HalWaitForVerticalBlank@@YAKPAU_DDHAL_WAITFORVERTICALBLANKDATA@@@Z| ; HalWaitForVerticalBlank
	IMPORT	|?HalCreateSurface@@YAKPAU_DDHAL_CREATESURFACEDATA@@@Z| ; HalCreateSurface

  00000			 AREA	 |.data|, DATA
|?g_FourCC@@3PAKA| DCD 0x32595559			; g_FourCC
	DCD	0x56595559
	DCD	0x59565955
|?cbDDCallbacks@@3U_DDHAL_DDCALLBACKS@@A| DCD 0x1c	; cbDDCallbacks
	DCD	0x17
	DCD	|?HalCreateSurface@@YAKPAU_DDHAL_CREATESURFACEDATA@@@Z|
	DCD	|?HalWaitForVerticalBlank@@YAKPAU_DDHAL_WAITFORVERTICALBLANKDATA@@@Z|
	DCD	|?HalCanCreateSurface@@YAKPAU_DDHAL_CANCREATESURFACEDATA@@@Z|
	DCD	0x0
	DCD	|?HalGetScanLine@@YAKPAU_DDHAL_GETSCANLINEDATA@@@Z|
|?cbDDSurfaceCallbacks@@3U_DDHAL_DDSURFACECALLBACKS@@A| DCD 0x30 ; cbDDSurfaceCallbacks
	DCD	0x1ff
	DCD	|?HalDestroySurface@@YAKPAU_DDHAL_DESTROYSURFACEDATA@@@Z|
	DCD	|?HalFlip@@YAKPAU_DDHAL_FLIPDATA@@@Z|
	DCD	|?HalLock@@YAKPAU_DDHAL_LOCKDATA@@@Z|
	DCD	|?HalUnlock@@YAKPAU_DDHAL_UNLOCKDATA@@@Z|
	DCD	|?HalSetColorKey@@YAKPAU_DDHAL_SETCOLORKEYDATA@@@Z|
	DCD	|?HalGetBltStatus@@YAKPAU_DDHAL_GETBLTSTATUSDATA@@@Z|
	DCD	|?HalGetFlipStatus@@YAKPAU_DDHAL_GETFLIPSTATUSDATA@@@Z|
	DCD	|?HalUpdateOverlay@@YAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z|
	DCD	|?HalSetOverlayPosition@@YAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z|
	DCD	0x0

  00000			 AREA	 |.rdata|, DATA, READONLY
|FourCCDescriptionTable| DCD 0x32595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x56595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x55595659
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x59565955
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x36315659
	DCD	0x10
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x32315659
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x3231564e
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x30323449
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x56555949
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	EXPORT	|?IsEqualGUID@@YAHABU_GUID@@0@Z|	; IsEqualGUID
	IMPORT	|memcmp|
; File c:\wince600\public\common\sdk\inc\objbase.h

  00000			 AREA	 |.pdata|, PDATA
|$T42094| DCD	|$LN7@IsEqualGUI|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsEqualGUID@@YAHABU_GUID@@0@Z| PROC	; IsEqualGUID

; 493  : {

  00000		 |$LN7@IsEqualGUI|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M42091|

; 494  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00004	e3a02010	 mov         r2, #0x10
  00008	eb000000	 bl          memcmp
  0000c	e3500000	 cmp         r0, #0
  00010	03a00001	 moveq       r0, #1

; 495  : }

  00014	049de004	 ldreq       lr, [sp], #4

; 494  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00018	13a00000	 movne       r0, #0

; 495  : }

  0001c	149de004	 ldrne       lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M42092|

			 ENDP  ; |?IsEqualGUID@@YAHABU_GUID@@0@Z|, IsEqualGUID

	EXPORT	|?HalGetDriverInfo@@YAKPAU_DDHAL_GETDRIVERINFODATA@@@Z| ; HalGetDriverInfo
	IMPORT	|?GetVirtualVideoMemory@OMAPDDGPE@@QAAXPAK00@Z| ; OMAPDDGPE::GetVirtualVideoMemory
	IMPORT	|?GetDDGPE@@YAPAVDDGPE@@XZ|		; GetDDGPE
	IMPORT	|GUID_GetDriverInfo_VidMemBase|

  00000			 AREA	 |.pdata|, PDATA
|$T42113| DCD	|$LN11@HalGetDriv|
	DCD	0x40001f02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\halcaps.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalGetDriverInfo@@YAKPAU_DDHAL_GETDRIVERINFODATA@@@Z| PROC ; HalGetDriverInfo

; 84   : {

  00000		 |$LN11@HalGetDriv|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M42110|
  00008	e1a04000	 mov         r4, r0

; 85   :     OMAPDDGPE * pDDGPE = static_cast<OMAPDDGPE *>(GetDDGPE());

  0000c	eb000000	 bl          |?GetDDGPE@@YAPAVDDGPE@@XZ|

; 86   : 
; 87   :     //  Default return
; 88   :     lpInput->ddRVal = DDERR_CURRENTLYNOTAVAIL;

  00010	e59f3060	 ldr         r3, [pc, #0x60]

; 89   : 
; 90   : 
; 91   : #if (_WINCEOSVER==700)
; 92   :     //  Check for video memory base request(s)
; 93   :     if (IsEqualIID(lpInput->guidInfo, GUID_GetDriverInfo_VidMemList) )
; 94   :     {
; 95   :         lpInput->dwActualSize = sizeof ( DDHAL_DDVIDMEMLIST );
; 96   :         if (lpInput->dwExpectedSize < lpInput->dwActualSize)
; 97   :         {
; 98   :             lpInput->ddRVal = DDERR_MOREDATA;
; 99   :         }
; 100  :         else
; 101  :         {
; 102  :             LPDDHAL_DDVIDMEMLIST pVidMemList = reinterpret_cast< LPDDHAL_DDVIDMEMLIST >( lpInput->lpvData );
; 103  : 
; 104  :             //  Get video memory attributes
; 105  :             pDDGPE->GetVirtualVideoMemoryList( pVidMemList );
; 106  :             lpInput->ddRVal = DD_OK;
; 107  :         }
; 108  :     }
; 109  : #endif
; 110  :     
; 111  : #if (_WINCEOSVER>=600)
; 112  :     if (IsEqualIID(lpInput->guidInfo, GUID_GetDriverInfo_VidMemBase) )

  00014	e59f1058	 ldr         r1, [pc, #0x58]
  00018	e1a05000	 mov         r5, r0
  0001c	e3a02010	 mov         r2, #0x10
  00020	e284000c	 add         r0, r4, #0xC
  00024	e5843028	 str         r3, [r4, #0x28]
  00028	eb000000	 bl          memcmp
  0002c	e3500000	 cmp         r0, #0
  00030	1a00000b	 bne         |$LN1@HalGetDriv|

; 113  :     {
; 114  :         DWORD   dwVideoMemoryStart,
; 115  :                 dwVideoMemoryLength,
; 116  :                 dwVideoMemoryFree;
; 117  :     
; 118  :         //  Get video memory attributes
; 119  :         pDDGPE->GetVirtualVideoMemory( &dwVideoMemoryStart, &dwVideoMemoryLength, &dwVideoMemoryFree );

  00034	e28d3004	 add         r3, sp, #4
  00038	e28d2008	 add         r2, sp, #8
  0003c	e28d1000	 add         r1, sp, #0
  00040	e1a00005	 mov         r0, r5
  00044	eb000000	 bl          |?GetVirtualVideoMemory@OMAPDDGPE@@QAAXPAK00@Z|

; 120  :                         
; 121  :         //  Return base address of video memory
; 122  :         *(DWORD*)(lpInput->lpvData) = dwVideoMemoryStart;

  00048	e5942020	 ldr         r2, [r4, #0x20]
  0004c	e59d3000	 ldr         r3, [sp]

; 123  :         lpInput->dwActualSize = sizeof(DWORD);

  00050	e3a01004	 mov         r1, #4

; 124  :         lpInput->ddRVal = DD_OK;

  00054	e3a00000	 mov         r0, #0
  00058	e5823000	 str         r3, [r2]
  0005c	e5841024	 str         r1, [r4, #0x24]
  00060	e5840028	 str         r0, [r4, #0x28]
  00064		 |$LN1@HalGetDriv|

; 125  :     }
; 126  : #endif
; 127  :     
; 128  :     return DDHAL_DRIVER_HANDLED;

  00064	e3a00001	 mov         r0, #1

; 129  : }

  00068	e28dd00c	 add         sp, sp, #0xC
  0006c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN12@HalGetDriv|
  00074		 |$LN13@HalGetDriv|
  00074	00000000	 DCD         |GUID_GetDriverInfo_VidMemBase|
  00078		 |$LN14@HalGetDriv|
  00078	88760028	 DCD         0x88760028
  0007c		 |$M42111|

			 ENDP  ; |?HalGetDriverInfo@@YAKPAU_DDHAL_GETDRIVERINFODATA@@@Z|, HalGetDriverInfo

	EXPORT	|buildDDHALInfo|
	IMPORT	|LcdPdd_Get_PixClkDiv|
	IMPORT	|?NumVisibleOverlays@OMAPDDGPE@@QAAKXZ|	; OMAPDDGPE::NumVisibleOverlays
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T42129| DCD	|$LN13@buildDDHAL|
	DCD	0x40005f02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |buildDDHALInfo| PROC

; 139  : {	

  00000		 |$LN13@buildDDHAL|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M42126|
  00008	e58d100c	 str         r1, [sp, #0xC]
  0000c	e1a0b000	 mov         r11, r0

; 140  :     OMAPDDGPE * pDDGPE = static_cast<OMAPDDGPE *>(GetDDGPE());

  00010	eb000000	 bl          |?GetDDGPE@@YAPAVDDGPE@@XZ|

; 141  :     DWORD       dwVideoMemoryStart,
; 142  :                 dwVideoMemoryLength,
; 143  :                 dwVideoMemoryFree;
; 144  : 
; 145  : 
; 146  :     //  Get video memory attributes
; 147  :     pDDGPE->GetVirtualVideoMemory( &dwVideoMemoryStart, &dwVideoMemoryLength, &dwVideoMemoryFree );

  00014	e28d3004	 add         r3, sp, #4
  00018	e28d2000	 add         r2, sp, #0
  0001c	e28d1010	 add         r1, sp, #0x10
  00020	e58d0008	 str         r0, [sp, #8]
  00024	eb000000	 bl          |?GetVirtualVideoMemory@OMAPDDGPE@@QAAXPAK00@Z|

; 148  : 
; 149  : 
; 150  :     // Clear the DDHALINFO structure
; 151  :     memset( lpddhi, 0, sizeof(DDHALINFO) );

  00028	e3a02f47	 mov         r2, #0x47, 30
  0002c	e3a01000	 mov         r1, #0
  00030	e1a0000b	 mov         r0, r11
  00034	eb000000	 bl          memset

; 152  : 
; 153  :     lpddhi->dwSize = sizeof(DDHALINFO);
; 154  : 
; 155  :     //  Set callback functions
; 156  :     lpddhi->lpDDCallbacks = &cbDDCallbacks;
; 157  : 
; 158  :     lpddhi->lpDDSurfaceCallbacks = &cbDDSurfaceCallbacks;
; 159  :     lpddhi->GetDriverInfo = HalGetDriverInfo;
; 160  : 
; 161  : 
; 162  :     // Capability bits.
; 163  :     lpddhi->ddCaps.dwSize = sizeof(DDCAPS);
; 164  : 
; 165  :     lpddhi->ddCaps.dwVidMemTotal  = dwVideoMemoryLength;
; 166  :     lpddhi->ddCaps.dwVidMemFree   = dwVideoMemoryFree;
; 167  :     lpddhi->ddCaps.dwVidMemStride = 0;
; 168  : 
; 169  :     #ifndef DDSCAPS_OWNDC
; 170  :         #error DDSCAPS_OWNDC not defined, please install all QFEs (DDSCAPS_OWNDC was added in January 2008 QFE).
; 171  :     #endif
; 172  : 
; 173  :     lpddhi->ddCaps.ddsCaps.dwCaps =
; 174  :         DDSCAPS_PRIMARYSURFACE |     // Has a primary surface
; 175  :         DDSCAPS_FRONTBUFFER |        // Can create front buffer surfaces
; 176  :         DDSCAPS_BACKBUFFER |         // Can create backbuffer surface
; 177  :         DDSCAPS_FLIP |               // Can flip between surfaces
; 178  :         DDSCAPS_OVERLAY |            // Can create overlay surfaces
; 179  : //        DDSCAPS_PALETTE |            // Can create paletted surfaces
; 180  :         DDSCAPS_SYSTEMMEMORY |       // Surfaces are in system memory
; 181  :         DDSCAPS_VIDEOMEMORY |        // Surfaces are in video memory
; 182  :         DDSCAPS_OWNDC |
; 183  :         0;
; 184  : 
; 185  :     lpddhi->ddCaps.dwNumFourCCCodes = MAX_FOURCC;
; 186  :     lpddhi->lpdwFourCC = g_FourCC;
; 187  : 
; 188  : 
; 189  :     // Palette caps
; 190  :     lpddhi->ddCaps.dwPalCaps = 0;
; 191  : 
; 192  :     // Blt caps
; 193  :     lpddhi->ddCaps.dwBltCaps =
; 194  :         DDBLTCAPS_READSYSMEM  |
; 195  :         DDBLTCAPS_WRITESYSMEM |
; 196  : //        DDBLTCAPS_COPYFOURCC  |
; 197  : //        DDBLTCAPS_FILLFOURCC  |
; 198  :         0;
; 199  : 
; 200  :     SETROPBIT(lpddhi->ddCaps.dwRops,SRCCOPY); 
; 201  :     SETROPBIT(lpddhi->ddCaps.dwRops,PATCOPY);
; 202  :     SETROPBIT(lpddhi->ddCaps.dwRops,BLACKNESS);
; 203  :     SETROPBIT(lpddhi->ddCaps.dwRops,WHITENESS);

  00038	e59b505c	 ldr         r5, [r11, #0x5C]
  0003c	e3a03102	 mov         r3, #2, 2

; 204  : 
; 205  : 
; 206  :     // Color key caps
; 207  :     lpddhi->ddCaps.dwCKeyCaps =
; 208  : //        DDCKEYCAPS_BOTHBLT |
; 209  : //        DDCKEYCAPS_DESTBLT |
; 210  : //        DDCKEYCAPS_DESTBLTCLRSPACE |
; 211  : //        DDCKEYCAPS_DESTBLTCLRSPACEYUV |
; 212  :         DDCKEYCAPS_SRCBLT |
; 213  : //        DDCKEYCAPS_SRCBLTCLRSPACE |
; 214  : //        DDCKEYCAPS_SRCBLTCLRSPACEYUV |
; 215  :         0;        
; 216  :     
; 217  :     // Alpha blending caps
; 218  :     lpddhi->ddCaps.dwAlphaCaps = 
; 219  :         DDALPHACAPS_ALPHAPIXELS |
; 220  : //        DDALPHACAPS_ALPHASURFACE |
; 221  : //        DDALPHACAPS_ALPHAPALETTE |
; 222  :         DDALPHACAPS_ALPHACONSTANT |
; 223  : //        DDALPHACAPS_ARGBSCALE |
; 224  : //        DDALPHACAPS_SATURATE |
; 225  : //        DDALPHACAPS_PREMULT |
; 226  : //        DDALPHACAPS_NONPREMULT |
; 227  : //        DDALPHACAPS_ALPHAFILL |
; 228  : //        DDALPHACAPS_ALPHANEG |
; 229  :         0;
; 230  :  
; 231  : 
; 232  :     // Overlay caps.
; 233  :     lpddhi->ddCaps.dwOverlayCaps=               // overlay capabilities
; 234  :         DDOVERLAYCAPS_OVERLAYSUPPORT |          // Supports overlays
; 235  :         DDOVERLAYCAPS_FLIP |                    // Overlay may be flipped.
; 236  :         DDOVERLAYCAPS_FOURCC |                  // YUV overlays supported.
; 237  :         DDOVERLAYCAPS_CKEYSRC |                 // Supports source color keying for overlays
; 238  :         DDOVERLAYCAPS_CKEYSRCCLRSPACE |
; 239  :         DDOVERLAYCAPS_CKEYDEST |                // Supports destination color keying for overlays
; 240  :         DDOVERLAYCAPS_CKEYDESTCLRSPACE |
; 241  :         DDOVERLAYCAPS_MIRRORLEFTRIGHT |         // Supports mirror horizontal       
; 242  : //        DDOVERLAYCAPS_MIRRORUPDOWN |          // Supports mirror vertical          
; 243  :         DDOVERLAYCAPS_ALPHADEST |             
; 244  : //        DDOVERLAYCAPS_ALPHASRC |             
; 245  :         DDOVERLAYCAPS_ALPHACONSTANT |         
; 246  :         DDOVERLAYCAPS_ALPHAANDKEYDEST |
; 247  :         DDOVERLAYCAPS_ZORDER |       
; 248  :         DDOVERLAYCAPS_ALPHAPREMULT |
; 249  :         0;

  00040	e59f9130	 ldr         r9, [pc, #0x130]
  00044	e3833801	 orr         r3, r3, #1, 16
  00048	e1853003	 orr         r3, r5, r3
  0004c	e59fa120	 ldr         r10, [pc, #0x120]

; 250  : 
; 251  :     lpddhi->ddCaps.dwMaxVisibleOverlays = 2;

  00050	e28bc05c	 add         r12, r11, #0x5C
  00054	e88c0208	 stmia       r12, {r3, r9}

; 252  :     lpddhi->ddCaps.dwCurrVisibleOverlays = pDDGPE->NumVisibleOverlays();

  00058	e3a03f47	 mov         r3, #0x47, 30
  0005c	e28a200c	 add         r2, r10, #0xC
  00060	e3a00c81	 mov         r0, #0x81, 24
  00064	e28a1028	 add         r1, r10, #0x28
  00068	e59d7000	 ldr         r7, [sp]
  0006c	e59d8004	 ldr         r8, [sp, #4]
  00070	e59b4040	 ldr         r4, [r11, #0x40]
  00074	e58b3000	 str         r3, [r11]
  00078	e59f60f0	 ldr         r6, [pc, #0xF0]
  0007c	e58b2008	 str         r2, [r11, #8]
  00080	e59be058	 ldr         lr, [r11, #0x58]
  00084	e3a03080	 mov         r3, #0x80
  00088	e28bc018	 add         r12, r11, #0x18
  0008c	e88c0188	 stmia       r12, {r3, r7, r8}
  00090	e3844001	 orr         r4, r4, #1
  00094	e3a02003	 mov         r2, #3
  00098	e3a03c02	 mov         r3, #2, 24
  0009c	e38050de	 orr         r5, r0, #0xDE
  000a0	e38eea01	 orr         lr, lr, #1, 20
  000a4	e28bc034	 add         r12, r11, #0x34
  000a8	e88c000c	 stmia       r12, {r2, r3}
  000ac	e3a03009	 mov         r3, #9
  000b0	e58b4040	 str         r4, [r11, #0x40]
  000b4	e59d4008	 ldr         r4, [sp, #8]
  000b8	e58b303c	 str         r3, [r11, #0x3C]
  000bc	e58b6014	 str         r6, [r11, #0x14]
  000c0	e58b100c	 str         r1, [r11, #0xC]
  000c4	e58be058	 str         lr, [r11, #0x58]
  000c8	e3a03002	 mov         r3, #2
  000cc	e3a06000	 mov         r6, #0
  000d0	e1a00004	 mov         r0, r4
  000d4	e58b3064	 str         r3, [r11, #0x64]
  000d8	e58b6024	 str         r6, [r11, #0x24]
  000dc	e58b5028	 str         r5, [r11, #0x28]
  000e0	e28bc02c	 add         r12, r11, #0x2C
  000e4	e88c0044	 stmia       r12, {r2, r6}
  000e8	e58ba118	 str         r10, [r11, #0x118]
  000ec	eb000000	 bl          |?NumVisibleOverlays@OMAPDDGPE@@QAAKXZ|
  000f0	e28bc068	 add         r12, r11, #0x68
  000f4	e88c0041	 stmia       r12, {r0, r6}

; 253  : 
; 254  :     lpddhi->ddCaps.dwAlignBoundarySrc = 0;
; 255  :     lpddhi->ddCaps.dwAlignSizeSrc = 0;

  000f8	e58b6070	 str         r6, [r11, #0x70]

; 256  :     lpddhi->ddCaps.dwAlignBoundaryDest = 0;

  000fc	e58b6074	 str         r6, [r11, #0x74]

; 257  :     lpddhi->ddCaps.dwAlignSizeDest = 0;

  00100	e58b6078	 str         r6, [r11, #0x78]

; 258  :     
; 259  :     if (pDDGPE->m_bDssIspRszEnabled)

  00104	e5943148	 ldr         r3, [r4, #0x148]
  00108	e3530000	 cmp         r3, #0
  0010c	0a000001	 beq         |$LN6@buildDDHAL|
  00110		 |$LN10@buildDDHAL|

; 260  :     {
; 261  :         lpddhi->ddCaps.dwMinOverlayStretch = 250;   // max shrink 25%

  00110	e3a030fa	 mov         r3, #0xFA

; 262  :     }
; 263  :     else

  00114	ea000006	 b           |$LN9@buildDDHAL|
  00118		 |$LN6@buildDDHAL|

; 264  :     {
; 265  :         if (LcdPdd_Get_PixClkDiv() >= 8)

  00118	eb000000	 bl          LcdPdd_Get_PixClkDiv
  0011c	e3500008	 cmp         r0, #8

; 266  :             lpddhi->ddCaps.dwMinOverlayStretch = 250;   // max shrink 25%

  00120	2afffffa	 bcs         |$LN10@buildDDHAL|

; 267  :         else if (LcdPdd_Get_PixClkDiv() >= 4)

  00124	eb000000	 bl          LcdPdd_Get_PixClkDiv
  00128	e3500004	 cmp         r0, #4

; 268  :             lpddhi->ddCaps.dwMinOverlayStretch = 500;   // max shrink 50%

  0012c	23a03f7d	 movcs       r3, #0x7D, 30

; 269  :         else
; 270  :             lpddhi->ddCaps.dwMinOverlayStretch = 1000;   // Shrink not supported

  00130	33a03ffa	 movcc       r3, #0xFA, 30
  00134		 |$LN9@buildDDHAL|
  00134	e58b307c	 str         r3, [r11, #0x7C]

; 271  :     }    
; 272  :     lpddhi->ddCaps.dwMaxOverlayStretch = 8000;  // Expand to 8x original size

  00138	e3a03d7d	 mov         r3, #0x7D, 26

; 273  : 
; 274  :     // Misc caps
; 275  :     lpddhi->ddCaps.dwMiscCaps=
; 276  :         DDMISCCAPS_FLIPINTERVAL |
; 277  :         DDMISCCAPS_FLIPODDEVEN |
; 278  :         DDMISCCAPS_FLIPVSYNCWITHVBI | 
; 279  :         DDMISCCAPS_READSCANLINE |
; 280  : 		DDMISCCAPS_READVBLANKSTATUS |
; 281  :         0;

  0013c	e3a0203d	 mov         r2, #0x3D
  00140	e58b3080	 str         r3, [r11, #0x80]
  00144	e58b2084	 str         r2, [r11, #0x84]

; 282  :         
; 283  :     //  Call virtual method for any customization
; 284  :     pDDGPE->DDHALInfo( lpddhi, modeidx );       

  00148	e5943000	 ldr         r3, [r4]
  0014c	e59d200c	 ldr         r2, [sp, #0xC]
  00150	e1a0100b	 mov         r1, r11
  00154	e59330f8	 ldr         r3, [r3, #0xF8]
  00158	e1a00004	 mov         r0, r4
  0015c	e1a0e00f	 mov         lr, pc
  00160	e12fff13	 bx          r3

; 285  : }

  00164	e28dd014	 add         sp, sp, #0x14
  00168	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0016c	e12fff1e	 bx          lr
  00170		 |$LN14@buildDDHAL|
  00170		 |$LN15@buildDDHAL|
  00170	00000000	 DCD         |?HalGetDriverInfo@@YAKPAU_DDHAL_GETDRIVERINFODATA@@@Z|
  00174		 |$LN16@buildDDHAL|
  00174	00000000	 DCD         |?g_FourCC@@3PAKA|
  00178		 |$LN17@buildDDHAL|
  00178	801526dd	 DCD         0x801526dd
  0017c		 |$M42127|

			 ENDP  ; |buildDDHALInfo|

	END
