; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DDGPE\omap_optblt.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|FourCCDescriptionTable| DCD 0x32595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x56595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x55595659
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x59565955
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x36315659
	DCD	0x10
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x32315659
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x3231564e
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x30323449
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x56555949
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	EXPORT	|?Stride@GPESurf@@QAAHXZ|		; GPESurf::Stride
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43156| DCD	|$LN5@Stride|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Stride@GPESurf@@QAAHXZ| PROC		; GPESurf::Stride

; 177  :     {

  00000		 |$LN5@Stride|
  00000		 |$M43153|

; 178  :         return m_nStrideBytes;

  00000	e5900008	 ldr         r0, [r0, #8]

; 179  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M43154|

			 ENDP  ; |?Stride@GPESurf@@QAAHXZ|, GPESurf::Stride

	EXPORT	|?BytesPerPixel@GPESurf@@QAAHXZ|	; GPESurf::BytesPerPixel

  00000			 AREA	 |.pdata|, PDATA
|$T43166| DCD	|$LN5@BytesPerPi|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?BytesPerPixel@GPESurf@@QAAHXZ| PROC	; GPESurf::BytesPerPixel

; 183  :     {

  00000		 |$LN5@BytesPerPi|
  00000		 |$M43163|

; 184  :         return m_BytesPixel;

  00000	e5900044	 ldr         r0, [r0, #0x44]

; 185  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M43164|

			 ENDP  ; |?BytesPerPixel@GPESurf@@QAAHXZ|, GPESurf::BytesPerPixel

	EXPORT	|?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| ; GPESurf::Format

  00000			 AREA	 |.pdata|, PDATA
|$T43176| DCD	|$LN5@Format|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| PROC ; GPESurf::Format

; 189  :     {

  00000		 |$LN5@Format|
  00000		 |$M43173|

; 190  :         return m_eFormat;

  00000	e590001c	 ldr         r0, [r0, #0x1C]

; 191  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M43174|

			 ENDP  ; |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|, GPESurf::Format

	EXPORT	|?FormatPtr@GPESurf@@QAAPAVGPEFormat@@XZ| ; GPESurf::FormatPtr

  00000			 AREA	 |.pdata|, PDATA
|$T43186| DCD	|$LN5@FormatPtr|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FormatPtr@GPESurf@@QAAPAVGPEFormat@@XZ| PROC ; GPESurf::FormatPtr

; 195  :     {

  00000		 |$LN5@FormatPtr|
  00000		 |$M43183|

; 196  :         return &m_Format;

  00000	e280000c	 add         r0, r0, #0xC

; 197  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M43184|

			 ENDP  ; |?FormatPtr@GPESurf@@QAAPAVGPEFormat@@XZ|, GPESurf::FormatPtr

	EXPORT	|?Buffer@GPESurf@@QAAPAXXZ|		; GPESurf::Buffer

  00000			 AREA	 |.pdata|, PDATA
|$T43196| DCD	|$LN5@Buffer|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Buffer@GPESurf@@QAAPAXXZ| PROC	; GPESurf::Buffer

; 201  :     {

  00000		 |$LN5@Buffer|
  00000		 |$M43193|

; 202  :         return (void *)m_pVirtAddr;

  00000	e5900004	 ldr         r0, [r0, #4]

; 203  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M43194|

			 ENDP  ; |?Buffer@GPESurf@@QAAPAXXZ|, GPESurf::Buffer

	EXPORT	|?Width@GPESurf@@QAAHXZ|		; GPESurf::Width

  00000			 AREA	 |.pdata|, PDATA
|$T43206| DCD	|$LN5@Width|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Width@GPESurf@@QAAHXZ| PROC		; GPESurf::Width

; 207  :     {

  00000		 |$LN5@Width|
  00000		 |$M43203|

; 208  :         return m_nWidth;

  00000	e590002c	 ldr         r0, [r0, #0x2C]

; 209  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M43204|

			 ENDP  ; |?Width@GPESurf@@QAAHXZ|, GPESurf::Width

	EXPORT	|?Height@GPESurf@@QAAHXZ|		; GPESurf::Height

  00000			 AREA	 |.pdata|, PDATA
|$T43216| DCD	|$LN5@Height|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Height@GPESurf@@QAAHXZ| PROC		; GPESurf::Height

; 213  :     {

  00000		 |$LN5@Height|
  00000		 |$M43213|

; 214  :         return m_nHeight;

  00000	e5900030	 ldr         r0, [r0, #0x30]

; 215  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M43214|

			 ENDP  ; |?Height@GPESurf@@QAAHXZ|, GPESurf::Height

	EXPORT	|?DumpParms@@YAXPAUGPEBltParms@@@Z|	; DumpParms
	EXPORT	|??_C@_1CG@LPACICOE@?$AAs?$AAo?$AAl?$AAi?$AAd?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@FEHFAAAB@?$AAb?$AAl?$AAt?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@FJKDKNMJ@?$AAr?$AAo?$AAp?$AA4?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@OLFLPOGG@?$AAx?$AAP?$AAo?$AAs?$AAi?$AAt?$AAi?$AAv?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAy?$AAP?$AAo?$AAs?$AAi?$AAt?$AAi?$AAv?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@FFPBLBKH@?$AAp?$AAL?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@OONCLEGI@?$AAp?$AAC?$AAo?$AAn?$AAv?$AAe?$AAr?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@MMIHMBGA@?$AAi?$AAM?$AAo?$AAd?$AAe?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@IPLALGAE@?$AAb?$AAl?$AAe?$AAn?$AAd?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@DOANIEOA@?$AAC?$AAl?$AAi?$AAp?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@GHEADLCD@?$AAB?$AAr?$AAu?$AAs?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@JFFNINID@?$AAM?$AAa?$AAs?$AAk?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@KMEBNDDL@?$AAS?$AAr?$AAc?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@GELAHLGC@?$AAD?$AAs?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T43330| DCD	|$LN75@DumpParms|
	DCD	0x40009702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@LPACICOE@?$AAs?$AAo?$AAl?$AAi?$AAd?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "s"
	DCB	0x0, "o", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, "C", 0x0, "o"
	DCB	0x0, "l", 0x0, "o", 0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@FEHFAAAB@?$AAb?$AAl?$AAt?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "b"
	DCB	0x0, "l", 0x0, "t", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "g"
	DCB	0x0, "s", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@FJKDKNMJ@?$AAr?$AAo?$AAp?$AA4?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "r"
	DCB	0x0, "o", 0x0, "p", 0x0, "4", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@OLFLPOGG@?$AAx?$AAP?$AAo?$AAs?$AAi?$AAt?$AAi?$AAv?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAy?$AAP?$AAo?$AAs?$AAi?$AAt?$AAi?$AAv?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?6?$AA?$AA@| DCB "x"
	DCB	0x0, "P", 0x0, "o", 0x0, "s", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "y", 0x0, "P", 0x0, "o", 0x0, "s", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@FFPBLBKH@?$AAp?$AAL?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "L", 0x0, "o", 0x0, "o", 0x0, "k", 0x0, "u", 0x0, "p"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@OONCLEGI@?$AAp?$AAC?$AAo?$AAn?$AAv?$AAe?$AAr?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, "t", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@MMIHMBGA@?$AAi?$AAM?$AAo?$AAd?$AAe?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "i"
	DCB	0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@IPLALGAE@?$AAb?$AAl?$AAe?$AAn?$AAd?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "F", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@DOANIEOA@?$AAC?$AAl?$AAi?$AAp?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "i", 0x0, "p", 0x0, "=", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, " "
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@GHEADLCD@?$AAB?$AAr?$AAu?$AAs?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@| DCB "B"
	DCB	0x0, "r", 0x0, "u", 0x0, "s", 0x0, "h", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "b", 0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, ")"
	DCB	0x0, " ", 0x0, "x", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, "=", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, ",", 0x0, " ", 0x0, "f"
	DCB	0x0, "m", 0x0, "t", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "p"
	DCB	0x0, "p", 0x0, ")", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@JFFNINID@?$AAM?$AAa?$AAs?$AAk?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd@| DCB "M"
	DCB	0x0, "a", 0x0, "s", 0x0, "k", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b"
	DCB	0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, ")", 0x0, " "
	DCB	0x0, "x", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, "="
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, ",", 0x0, " ", 0x0, "f", 0x0, "m", 0x0, "t"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "b", 0x0, "p", 0x0, "p", 0x0, ")"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@KMEBNDDL@?$AAS?$AAr?$AAc?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@| DCB "S"
	DCB	0x0, "r", 0x0, "c", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, ")", 0x0, " ", 0x0, "x"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, "=", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, ",", 0x0, " ", 0x0, "f", 0x0, "m", 0x0, "t", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "b", 0x0, "p", 0x0, "p", 0x0, ")", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@GELAHLGC@?$AAD?$AAs?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@| DCB "D"
	DCB	0x0, "s", 0x0, "t", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, ")", 0x0, " ", 0x0, "x"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, "=", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, ",", 0x0, " ", 0x0, "f", 0x0, "m", 0x0, "t", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "b", 0x0, "p", 0x0, "p", 0x0, ")", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DumpParms@@YAXPAUGPEBltParms@@@Z| PROC ; DumpParms

; 270  : {

  00000		 |$LN75@DumpParms|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M43327|
  00008	e1a09000	 mov         r9, r0

; 271  :   RETAILMSG(1, (TEXT("Dst(%d (%d bytes) x %d)=(%d, %d) - (%d, %d), fmt=%d (%d bpp)\n"),
; 272  :             pParms->pDst->Width(),
; 273  :             pParms->pDst->Stride(),
; 274  :             pParms->pDst->Height(),
; 275  :             pParms->prclDst->left,
; 276  :             pParms->prclDst->top,
; 277  :             pParms->prclDst->right,
; 278  :             pParms->prclDst->bottom,
; 279  :             pParms->pDst->Format(),
; 280  :             pParms->pDst->BytesPerPixel() * 8));

  0000c	e5991004	 ldr         r1, [r9, #4]
  00010	e5993014	 ldr         r3, [r9, #0x14]
  00014	e59f023c	 ldr         r0, [pc, #0x23C]
  00018	e591e044	 ldr         lr, [r1, #0x44]
  0001c	e593500c	 ldr         r5, [r3, #0xC]
  00020	e5936008	 ldr         r6, [r3, #8]
  00024	e5937004	 ldr         r7, [r3, #4]
  00028	e5938000	 ldr         r8, [r3]
  0002c	e591401c	 ldr         r4, [r1, #0x1C]
  00030	e5913030	 ldr         r3, [r1, #0x30]
  00034	e5912008	 ldr         r2, [r1, #8]
  00038	e591102c	 ldr         r1, [r1, #0x2C]
  0003c	e1a0e18e	 mov         lr, lr, lsl #3
  00040	e58de014	 str         lr, [sp, #0x14]
  00044	e58d4010	 str         r4, [sp, #0x10]
  00048	e58d500c	 str         r5, [sp, #0xC]
  0004c	e58d6008	 str         r6, [sp, #8]
  00050	e58d7004	 str         r7, [sp, #4]
  00054	e58d8000	 str         r8, [sp]
  00058	eb000000	 bl          NKDbgPrintfW

; 281  :   if(pParms->pSrc && pParms->prclSrc)

  0005c	e5993008	 ldr         r3, [r9, #8]
  00060	e3530000	 cmp         r3, #0
  00064	0a000015	 beq         |$LN10@DumpParms|
  00068	e5993018	 ldr         r3, [r9, #0x18]
  0006c	e3530000	 cmp         r3, #0
  00070	0a000012	 beq         |$LN10@DumpParms|

; 282  :     RETAILMSG(1, (TEXT("Src(%d (%d bytes) x %d)=(%d, %d) - (%d, %d), fmt=%d (%d bpp)\n"),
; 283  :               pParms->pSrc->Width(),
; 284  :               pParms->pSrc->Stride(),
; 285  :               pParms->pSrc->Height(),
; 286  :               pParms->prclSrc->left,
; 287  :               pParms->prclSrc->top,
; 288  :               pParms->prclSrc->right,
; 289  :               pParms->prclSrc->bottom,
; 290  :               pParms->pSrc->Format(),
; 291  :               pParms->pSrc->BytesPerPixel() * 8));

  00074	e5991008	 ldr         r1, [r9, #8]
  00078	e593500c	 ldr         r5, [r3, #0xC]
  0007c	e5936008	 ldr         r6, [r3, #8]
  00080	e591e044	 ldr         lr, [r1, #0x44]
  00084	e5937004	 ldr         r7, [r3, #4]
  00088	e5938000	 ldr         r8, [r3]
  0008c	e591401c	 ldr         r4, [r1, #0x1C]
  00090	e5913030	 ldr         r3, [r1, #0x30]
  00094	e5912008	 ldr         r2, [r1, #8]
  00098	e59f01b4	 ldr         r0, [pc, #0x1B4]
  0009c	e591102c	 ldr         r1, [r1, #0x2C]
  000a0	e1a0e18e	 mov         lr, lr, lsl #3
  000a4	e58de014	 str         lr, [sp, #0x14]
  000a8	e58d4010	 str         r4, [sp, #0x10]
  000ac	e58d500c	 str         r5, [sp, #0xC]
  000b0	e58d6008	 str         r6, [sp, #8]
  000b4	e58d7004	 str         r7, [sp, #4]
  000b8	e58d8000	 str         r8, [sp]
  000bc	eb000000	 bl          NKDbgPrintfW
  000c0		 |$LN10@DumpParms|

; 292  :   if(pParms->pMask && pParms->prclMask)

  000c0	e599300c	 ldr         r3, [r9, #0xC]
  000c4	e3530000	 cmp         r3, #0
  000c8	0a000015	 beq         |$LN12@DumpParms|
  000cc	e599302c	 ldr         r3, [r9, #0x2C]
  000d0	e3530000	 cmp         r3, #0
  000d4	0a000012	 beq         |$LN12@DumpParms|

; 293  :     RETAILMSG(1, (TEXT("Mask(%d (%d bytes) x %d)=(%d, %d) - (%d, %d), fmt=%d (%d bpp)\n"),
; 294  :               pParms->pMask->Width(),
; 295  :               pParms->pMask->Stride(),
; 296  :               pParms->pMask->Height(),
; 297  :               pParms->prclMask->left,
; 298  :               pParms->prclMask->top,
; 299  :               pParms->prclMask->right,
; 300  :               pParms->prclMask->bottom,
; 301  :               pParms->pMask->Format(),
; 302  :               pParms->pMask->BytesPerPixel() * 8));

  000d8	e599100c	 ldr         r1, [r9, #0xC]
  000dc	e593500c	 ldr         r5, [r3, #0xC]
  000e0	e5936008	 ldr         r6, [r3, #8]
  000e4	e591e044	 ldr         lr, [r1, #0x44]
  000e8	e5937004	 ldr         r7, [r3, #4]
  000ec	e5938000	 ldr         r8, [r3]
  000f0	e591401c	 ldr         r4, [r1, #0x1C]
  000f4	e5913030	 ldr         r3, [r1, #0x30]
  000f8	e5912008	 ldr         r2, [r1, #8]
  000fc	e59f014c	 ldr         r0, [pc, #0x14C]
  00100	e591102c	 ldr         r1, [r1, #0x2C]
  00104	e1a0e18e	 mov         lr, lr, lsl #3
  00108	e58de014	 str         lr, [sp, #0x14]
  0010c	e58d4010	 str         r4, [sp, #0x10]
  00110	e58d500c	 str         r5, [sp, #0xC]
  00114	e58d6008	 str         r6, [sp, #8]
  00118	e58d7004	 str         r7, [sp, #4]
  0011c	e58d8000	 str         r8, [sp]
  00120	eb000000	 bl          NKDbgPrintfW
  00124		 |$LN12@DumpParms|

; 303  :   if(pParms->pBrush && pParms->pptlBrush)

  00124	e5993010	 ldr         r3, [r9, #0x10]
  00128	e3530000	 cmp         r3, #0
  0012c	0a000011	 beq         |$LN14@DumpParms|
  00130	e5993030	 ldr         r3, [r9, #0x30]
  00134	e3530000	 cmp         r3, #0
  00138	0a00000e	 beq         |$LN14@DumpParms|

; 304  :     RETAILMSG(1, (TEXT("Brush(%d (%d bytes) x %d)=(%d, %d), fmt=%d (%d bpp)\n"),
; 305  :               pParms->pBrush->Width(),
; 306  :               pParms->pBrush->Stride(),
; 307  :               pParms->pBrush->Height(),
; 308  :               pParms->pptlBrush->x,
; 309  :               pParms->pptlBrush->y,
; 310  :               pParms->pBrush->Format(),
; 311  :               pParms->pBrush->BytesPerPixel() * 8));

  0013c	e5991010	 ldr         r1, [r9, #0x10]
  00140	e5935004	 ldr         r5, [r3, #4]
  00144	e5936000	 ldr         r6, [r3]
  00148	e591e044	 ldr         lr, [r1, #0x44]
  0014c	e591401c	 ldr         r4, [r1, #0x1C]
  00150	e5913030	 ldr         r3, [r1, #0x30]
  00154	e5912008	 ldr         r2, [r1, #8]
  00158	e59f00ec	 ldr         r0, [pc, #0xEC]
  0015c	e591102c	 ldr         r1, [r1, #0x2C]
  00160	e1a0e18e	 mov         lr, lr, lsl #3
  00164	e58de00c	 str         lr, [sp, #0xC]
  00168	e58d4008	 str         r4, [sp, #8]
  0016c	e58d5004	 str         r5, [sp, #4]
  00170	e58d6000	 str         r6, [sp]
  00174	eb000000	 bl          NKDbgPrintfW
  00178		 |$LN14@DumpParms|

; 312  :   if(pParms-> prclClip)

  00178	e599301c	 ldr         r3, [r9, #0x1C]
  0017c	e3530000	 cmp         r3, #0

; 313  :     RETAILMSG(1, (TEXT("Clip=(%d, %d) - (%d, %d) \n"),
; 314  :               pParms->prclClip->left,
; 315  :               pParms->prclClip->top,
; 316  :               pParms->prclClip->right,
; 317  :               pParms->prclClip->bottom));

  00180	11a01003	 movne       r1, r3
  00184	1591e00c	 ldrne       lr, [r1, #0xC]
  00188	15913008	 ldrne       r3, [r1, #8]
  0018c	15912004	 ldrne       r2, [r1, #4]
  00190	15911000	 ldrne       r1, [r1]
  00194	159f00ac	 ldrne       r0, [pc, #0xAC]
  00198	158de000	 strne       lr, [sp]
  0019c	1b000000	 blne        NKDbgPrintfW

; 318  :   RETAILMSG(1, (TEXT("solidColor=0x%08X\n"), pParms->solidColor));

  001a0	e5991020	 ldr         r1, [r9, #0x20]
  001a4	e59f0098	 ldr         r0, [pc, #0x98]
  001a8	eb000000	 bl          NKDbgPrintfW

; 319  :   RETAILMSG(1, (TEXT("bltFlags=0x%08X\n"), pParms->bltFlags));

  001ac	e5991024	 ldr         r1, [r9, #0x24]
  001b0	e59f0088	 ldr         r0, [pc, #0x88]
  001b4	eb000000	 bl          NKDbgPrintfW

; 320  :   RETAILMSG(1, (TEXT("rop4=0x%08X\n"), pParms->rop4));

  001b8	e5991028	 ldr         r1, [r9, #0x28]
  001bc	e59f0078	 ldr         r0, [pc, #0x78]
  001c0	eb000000	 bl          NKDbgPrintfW

; 321  :   RETAILMSG(1, (TEXT("xPositive=%d, yPositive=%d\n"),
; 322  :             pParms->xPositive,
; 323  :             pParms->yPositive));

  001c4	e5992038	 ldr         r2, [r9, #0x38]
  001c8	e5991034	 ldr         r1, [r9, #0x34]
  001cc	e59f0064	 ldr         r0, [pc, #0x64]
  001d0	eb000000	 bl          NKDbgPrintfW

; 324  :   RETAILMSG(1, (TEXT("pLookup=0x%08X\n"), pParms->pLookup));

  001d4	e599103c	 ldr         r1, [r9, #0x3C]
  001d8	e59f0054	 ldr         r0, [pc, #0x54]
  001dc	eb000000	 bl          NKDbgPrintfW

; 325  :   RETAILMSG(1, (TEXT("pConvert=0x%08X\n"), pParms->pConvert));

  001e0	e5991040	 ldr         r1, [r9, #0x40]
  001e4	e59f0044	 ldr         r0, [pc, #0x44]
  001e8	eb000000	 bl          NKDbgPrintfW

; 326  :   RETAILMSG(1, (TEXT("iMode=0x%08X\n"), pParms->iMode));

  001ec	e5991048	 ldr         r1, [r9, #0x48]
  001f0	e59f0034	 ldr         r0, [pc, #0x34]
  001f4	eb000000	 bl          NKDbgPrintfW

; 327  :   RETAILMSG(1, (TEXT("blendFunction=0x%08X\n"), pParms->blendFunction));

  001f8	e5d9104c	 ldrb        r1, [r9, #0x4C]
  001fc	e5d9304d	 ldrb        r3, [r9, #0x4D]
  00200	e5d9204e	 ldrb        r2, [r9, #0x4E]
  00204	e5d9e04f	 ldrb        lr, [r9, #0x4F]
  00208	e1813403	 orr         r3, r1, r3, lsl #8
  0020c	e59f0014	 ldr         r0, [pc, #0x14]
  00210	e1833802	 orr         r3, r3, r2, lsl #16
  00214	e1831c0e	 orr         r1, r3, lr, lsl #24
  00218	eb000000	 bl          NKDbgPrintfW

; 328  : }

  0021c	e28dd018	 add         sp, sp, #0x18
  00220	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00224	e12fff1e	 bx          lr
  00228		 |$LN76@DumpParms|
  00228		 |$LN77@DumpParms|
  00228	00000000	 DCD         |??_C@_1CM@IPLALGAE@?$AAb?$AAl?$AAe?$AAn?$AAd?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  0022c		 |$LN78@DumpParms|
  0022c	00000000	 DCD         |??_C@_1BM@MMIHMBGA@?$AAi?$AAM?$AAo?$AAd?$AAe?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  00230		 |$LN79@DumpParms|
  00230	00000000	 DCD         |??_C@_1CC@OONCLEGI@?$AAp?$AAC?$AAo?$AAn?$AAv?$AAe?$AAr?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  00234		 |$LN80@DumpParms|
  00234	00000000	 DCD         |??_C@_1CA@FFPBLBKH@?$AAp?$AAL?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  00238		 |$LN81@DumpParms|
  00238	00000000	 DCD         |??_C@_1DI@OLFLPOGG@?$AAx?$AAP?$AAo?$AAs?$AAi?$AAt?$AAi?$AAv?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAy?$AAP?$AAo?$AAs?$AAi?$AAt?$AAi?$AAv?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?6?$AA?$AA@|
  0023c		 |$LN82@DumpParms|
  0023c	00000000	 DCD         |??_C@_1BK@FJKDKNMJ@?$AAr?$AAo?$AAp?$AA4?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  00240		 |$LN83@DumpParms|
  00240	00000000	 DCD         |??_C@_1CC@FEHFAAAB@?$AAb?$AAl?$AAt?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  00244		 |$LN84@DumpParms|
  00244	00000000	 DCD         |??_C@_1CG@LPACICOE@?$AAs?$AAo?$AAl?$AAi?$AAd?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  00248		 |$LN85@DumpParms|
  00248	00000000	 DCD         |??_C@_1DG@DOANIEOA@?$AAC?$AAl?$AAi?$AAp?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AA?6?$AA?$AA@|
  0024c		 |$LN86@DumpParms|
  0024c	00000000	 DCD         |??_C@_1GK@GHEADLCD@?$AAB?$AAr?$AAu?$AAs?$AAh?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF@|
  00250		 |$LN87@DumpParms|
  00250	00000000	 DCD         |??_C@_1HO@JFFNINID@?$AAM?$AAa?$AAs?$AAk?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd@|
  00254		 |$LN88@DumpParms|
  00254	00000000	 DCD         |??_C@_1HM@KMEBNDDL@?$AAS?$AAr?$AAc?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@|
  00258		 |$LN89@DumpParms|
  00258	00000000	 DCD         |??_C@_1HM@GELAHLGC@?$AAD?$AAs?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AAx?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$DN?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@|
  0025c		 |$M43328|

			 ENDP  ; |?DumpParms@@YAXPAUGPEBltParms@@@Z|, DumpParms

	EXPORT	|?ClipNoScale@@YAXPAU_RECTL@@PBU1@@Z|	; ClipNoScale

  00000			 AREA	 |.pdata|, PDATA
|$T43353| DCD	|$LN10@ClipNoScal|
	DCD	0x40001500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ClipNoScale@@YAXPAU_RECTL@@PBU1@@Z| PROC ; ClipNoScale

; 489  : {

  00000		 |$LN10@ClipNoScal|
  00000		 |$M43350|
  00000	e3500000	 cmp         r0, #0

; 490  :   if(prclDst && prclClip)

  00004	0a000011	 beq         |$LN1@ClipNoScal|
  00008	e3510000	 cmp         r1, #0
  0000c	0a00000f	 beq         |$LN1@ClipNoScal|

; 491  :   {
; 492  :     if(prclClip->left > prclDst->left)

  00010	e5912000	 ldr         r2, [r1]
  00014	e5903000	 ldr         r3, [r0]
  00018	e1520003	 cmp         r2, r3

; 493  :     {
; 494  :       prclDst->left = prclClip->left;
; 495  :     }
; 496  :     if(prclClip->top > prclDst->top)

  0001c	e5903004	 ldr         r3, [r0, #4]
  00020	c5802000	 strgt       r2, [r0]
  00024	e5912004	 ldr         r2, [r1, #4]
  00028	e1520003	 cmp         r2, r3

; 497  :     {
; 498  :       prclDst->top = prclClip->top;
; 499  :     }
; 500  :     if(prclClip->right < prclDst->right)

  0002c	e5903008	 ldr         r3, [r0, #8]
  00030	c5802004	 strgt       r2, [r0, #4]
  00034	e5912008	 ldr         r2, [r1, #8]
  00038	e1520003	 cmp         r2, r3

; 501  :     {
; 502  :       prclDst->right = prclClip->right;
; 503  :     }
; 504  :     if(prclClip->bottom < prclDst->bottom)

  0003c	e590300c	 ldr         r3, [r0, #0xC]
  00040	b5802008	 strlt       r2, [r0, #8]
  00044	e591200c	 ldr         r2, [r1, #0xC]
  00048	e1520003	 cmp         r2, r3

; 505  :     {
; 506  :       prclDst->bottom = prclClip->bottom;

  0004c	b580200c	 strlt       r2, [r0, #0xC]
  00050		 |$LN1@ClipNoScal|

; 507  :     }
; 508  :   }
; 509  : }

  00050	e12fff1e	 bx          lr
  00054		 |$M43351|

			 ENDP  ; |?ClipNoScale@@YAXPAU_RECTL@@PBU1@@Z|, ClipNoScale

	EXPORT	|?ClipNoScale@@YAXPAU_RECTL@@0PBU1@@Z|	; ClipNoScale

  00000			 AREA	 |.pdata|, PDATA
|$T43363| DCD	|$LN14@ClipNoScal@2|
	DCD	0x40003301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ClipNoScale@@YAXPAU_RECTL@@0PBU1@@Z| PROC ; ClipNoScale

; 515  : {

  00000		 |$LN14@ClipNoScal@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43360|
  00004	e3500000	 cmp         r0, #0

; 516  :   if(prclDst && prclClip)

  00008	0a00002d	 beq         |$LN2@ClipNoScal@2|
  0000c	e3520000	 cmp         r2, #0
  00010	0a00002b	 beq         |$LN2@ClipNoScal@2|

; 517  :   {
; 518  :     if(prclClip->left > prclDst->left)

  00014	e592e000	 ldr         lr, [r2]
  00018	e5904000	 ldr         r4, [r0]
  0001c	e15e0004	 cmp         lr, r4
  00020	da000006	 ble         |$LN8@ClipNoScal@2|

; 519  :     {
; 520  :       if(prclSrc)

  00024	e3510000	 cmp         r1, #0

; 521  :         prclSrc->left += prclClip->left - prclDst->left;

  00028	15913000	 ldrne       r3, [r1]
  0002c	10433004	 subne       r3, r3, r4
  00030	1083300e	 addne       r3, r3, lr
  00034	15813000	 strne       r3, [r1]

; 522  :       prclDst->left = prclClip->left;

  00038	e5923000	 ldr         r3, [r2]
  0003c	e5803000	 str         r3, [r0]
  00040		 |$LN8@ClipNoScal@2|

; 523  :     }
; 524  :     if(prclClip->top > prclDst->top)

  00040	e592e004	 ldr         lr, [r2, #4]
  00044	e5904004	 ldr         r4, [r0, #4]
  00048	e15e0004	 cmp         lr, r4
  0004c	da000006	 ble         |$LN6@ClipNoScal@2|

; 525  :     {
; 526  :       if(prclSrc)

  00050	e3510000	 cmp         r1, #0

; 527  :         prclSrc->top += prclClip->top - prclDst->top;

  00054	15913004	 ldrne       r3, [r1, #4]
  00058	10433004	 subne       r3, r3, r4
  0005c	1083300e	 addne       r3, r3, lr
  00060	15813004	 strne       r3, [r1, #4]

; 528  :       prclDst->top = prclClip->top;

  00064	e5923004	 ldr         r3, [r2, #4]
  00068	e5803004	 str         r3, [r0, #4]
  0006c		 |$LN6@ClipNoScal@2|

; 529  :     }
; 530  :     if(prclClip->right < prclDst->right)

  0006c	e592e008	 ldr         lr, [r2, #8]
  00070	e5904008	 ldr         r4, [r0, #8]
  00074	e15e0004	 cmp         lr, r4
  00078	aa000006	 bge         |$LN4@ClipNoScal@2|

; 531  :     {
; 532  :       if(prclSrc)

  0007c	e3510000	 cmp         r1, #0

; 533  :       prclSrc->right -= prclDst->right - prclClip->right;

  00080	15913008	 ldrne       r3, [r1, #8]
  00084	10433004	 subne       r3, r3, r4
  00088	1083300e	 addne       r3, r3, lr
  0008c	15813008	 strne       r3, [r1, #8]

; 534  :       prclDst->right = prclClip->right;

  00090	e5923008	 ldr         r3, [r2, #8]
  00094	e5803008	 str         r3, [r0, #8]
  00098		 |$LN4@ClipNoScal@2|

; 535  :     }
; 536  :     if(prclClip->bottom < prclDst->bottom)

  00098	e592e00c	 ldr         lr, [r2, #0xC]
  0009c	e590400c	 ldr         r4, [r0, #0xC]
  000a0	e15e0004	 cmp         lr, r4
  000a4	aa000006	 bge         |$LN2@ClipNoScal@2|

; 537  :     {
; 538  :       if(prclSrc)

  000a8	e3510000	 cmp         r1, #0

; 539  :         prclSrc->bottom -= prclDst->bottom - prclClip->bottom;

  000ac	1591300c	 ldrne       r3, [r1, #0xC]
  000b0	10433004	 subne       r3, r3, r4
  000b4	1083300e	 addne       r3, r3, lr
  000b8	1581300c	 strne       r3, [r1, #0xC]

; 540  :       prclDst->bottom = prclClip->bottom;

  000bc	e592300c	 ldr         r3, [r2, #0xC]
  000c0	e580300c	 str         r3, [r0, #0xC]
  000c4		 |$LN2@ClipNoScal@2|

; 541  :     }
; 542  :   }
; 543  : }

  000c4	e8bd4010	 ldmia       sp!, {r4, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$M43361|

			 ENDP  ; |?ClipNoScale@@YAXPAU_RECTL@@0PBU1@@Z|, ClipNoScale

	EXPORT	|?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@PBU1@@Z| ; ClipNoScale

  00000			 AREA	 |.pdata|, PDATA
|$T43376| DCD	|$LN16@ClipNoScal@3|
	DCD	0x40003c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@PBU1@@Z| PROC ; ClipNoScale

; 549  : {

  00000		 |$LN16@ClipNoScal@3|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43373|
  00004	e1a04003	 mov         r4, r3
  00008	e3500000	 cmp         r0, #0

; 550  :   if(prclDst && prclClip)

  0000c	0a000035	 beq         |$LN2@ClipNoScal@3|
  00010	e3540000	 cmp         r4, #0
  00014	0a000033	 beq         |$LN2@ClipNoScal@3|

; 551  :   {
; 552  :     if(prclClip->left > prclDst->left)

  00018	e5943000	 ldr         r3, [r4]
  0001c	e590e000	 ldr         lr, [r0]
  00020	e153000e	 cmp         r3, lr
  00024	da00000a	 ble         |$LN10@ClipNoScal@3|

; 553  :     {
; 554  :       long leftclip = prclClip->left - prclDst->left;
; 555  :       if(prclSrc)

  00028	e3510000	 cmp         r1, #0
  0002c	e043500e	 sub         r5, r3, lr

; 556  :         prclSrc->left += leftclip;

  00030	1591e000	 ldrne       lr, [r1]
  00034	108ee005	 addne       lr, lr, r5
  00038	1581e000	 strne       lr, [r1]

; 557  :       if(pptlBrush)

  0003c	e3520000	 cmp         r2, #0

; 558  :         pptlBrush->x += leftclip;

  00040	15923000	 ldrne       r3, [r2]
  00044	10833005	 addne       r3, r3, r5
  00048	15823000	 strne       r3, [r2]

; 559  :       prclDst->left = prclClip->left;

  0004c	e5943000	 ldr         r3, [r4]
  00050	e5803000	 str         r3, [r0]
  00054		 |$LN10@ClipNoScal@3|

; 560  :     }
; 561  :     if(prclClip->top > prclDst->top)

  00054	e5943004	 ldr         r3, [r4, #4]
  00058	e590e004	 ldr         lr, [r0, #4]
  0005c	e153000e	 cmp         r3, lr
  00060	da00000a	 ble         |$LN7@ClipNoScal@3|

; 562  :     {
; 563  :       long topclip = prclClip->top - prclDst->top;
; 564  :       if(prclSrc)

  00064	e3510000	 cmp         r1, #0
  00068	e043e00e	 sub         lr, r3, lr

; 565  :         prclSrc->top += topclip;

  0006c	15913004	 ldrne       r3, [r1, #4]
  00070	1083300e	 addne       r3, r3, lr
  00074	15813004	 strne       r3, [r1, #4]

; 566  :       if(pptlBrush)

  00078	e3520000	 cmp         r2, #0

; 567  :         pptlBrush->y += topclip;

  0007c	15923004	 ldrne       r3, [r2, #4]
  00080	1083300e	 addne       r3, r3, lr
  00084	15823004	 strne       r3, [r2, #4]

; 568  :       prclDst->top = prclClip->top;

  00088	e5943004	 ldr         r3, [r4, #4]
  0008c	e5803004	 str         r3, [r0, #4]
  00090		 |$LN7@ClipNoScal@3|

; 569  :     }
; 570  :     if(prclClip->right < prclDst->right)

  00090	e5942008	 ldr         r2, [r4, #8]
  00094	e590e008	 ldr         lr, [r0, #8]
  00098	e152000e	 cmp         r2, lr
  0009c	aa000006	 bge         |$LN4@ClipNoScal@3|

; 571  :     {
; 572  :       long rightclip = prclDst->right - prclClip->right;
; 573  :       if(prclSrc)

  000a0	e3510000	 cmp         r1, #0

; 574  :         prclSrc->right -= rightclip;

  000a4	15913008	 ldrne       r3, [r1, #8]
  000a8	1043300e	 subne       r3, r3, lr
  000ac	10833002	 addne       r3, r3, r2
  000b0	15813008	 strne       r3, [r1, #8]

; 575  :       prclDst->right = prclClip->right;

  000b4	e5943008	 ldr         r3, [r4, #8]
  000b8	e5803008	 str         r3, [r0, #8]
  000bc		 |$LN4@ClipNoScal@3|

; 576  :     }
; 577  :     if(prclClip->bottom < prclDst->bottom)

  000bc	e594200c	 ldr         r2, [r4, #0xC]
  000c0	e590e00c	 ldr         lr, [r0, #0xC]
  000c4	e152000e	 cmp         r2, lr
  000c8	aa000006	 bge         |$LN2@ClipNoScal@3|

; 578  :     {
; 579  :       long bottomclip = prclDst->bottom - prclClip->bottom;
; 580  :       if(prclSrc)

  000cc	e3510000	 cmp         r1, #0

; 581  :         prclSrc->bottom -= bottomclip;

  000d0	1591300c	 ldrne       r3, [r1, #0xC]
  000d4	1043300e	 subne       r3, r3, lr
  000d8	10833002	 addne       r3, r3, r2
  000dc	1581300c	 strne       r3, [r1, #0xC]

; 582  :       prclDst->bottom = prclClip->bottom;

  000e0	e594300c	 ldr         r3, [r4, #0xC]
  000e4	e580300c	 str         r3, [r0, #0xC]
  000e8		 |$LN2@ClipNoScal@3|

; 583  :     }
; 584  :   }
; 585  : }

  000e8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000ec	e12fff1e	 bx          lr
  000f0		 |$M43374|

			 ENDP  ; |?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@PBU1@@Z|, ClipNoScale

	EXPORT	|?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@0PBU1@@Z| ; ClipNoScale

  00000			 AREA	 |.pdata|, PDATA
|$T43392| DCD	|$LN20@ClipNoScal@4|
	DCD	0x40004e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@0PBU1@@Z| PROC ; ClipNoScale

; 592  : {

  00000		 |$LN20@ClipNoScal@4|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43389|
  00004	e1a04003	 mov         r4, r3
  00008	e1a06002	 mov         r6, r2
  0000c	e3500000	 cmp         r0, #0

; 593  :   if(prclDst && prclClip)

  00010	0a000046	 beq         |$LN3@ClipNoScal@4|
  00014	e59d5010	 ldr         r5, [sp, #0x10]
  00018	e3550000	 cmp         r5, #0
  0001c	0a000043	 beq         |$LN3@ClipNoScal@4|

; 594  :   {
; 595  :     if(prclClip->left > prclDst->left)

  00020	e5953000	 ldr         r3, [r5]
  00024	e5902000	 ldr         r2, [r0]
  00028	e1530002	 cmp         r3, r2
  0002c	da00000e	 ble         |$LN14@ClipNoScal@4|

; 596  :     {
; 597  :       long leftclip = prclClip->left - prclDst->left;
; 598  :       if(prclSrc)

  00030	e3510000	 cmp         r1, #0

; 599  :         prclSrc->left += leftclip;

  00034	1591e000	 ldrne       lr, [r1]
  00038	e0432002	 sub         r2, r3, r2
  0003c	108ee002	 addne       lr, lr, r2
  00040	1581e000	 strne       lr, [r1]

; 600  :       if(pptlBrush)

  00044	e3560000	 cmp         r6, #0

; 601  :         pptlBrush->x += leftclip;

  00048	15963000	 ldrne       r3, [r6]
  0004c	10833002	 addne       r3, r3, r2
  00050	15863000	 strne       r3, [r6]

; 602  :       if(prclMask)

  00054	e3540000	 cmp         r4, #0

; 603  :         prclMask->left += leftclip;

  00058	15943000	 ldrne       r3, [r4]
  0005c	10833002	 addne       r3, r3, r2
  00060	15843000	 strne       r3, [r4]

; 604  :       prclDst->left = prclClip->left;

  00064	e5953000	 ldr         r3, [r5]
  00068	e5803000	 str         r3, [r0]
  0006c		 |$LN14@ClipNoScal@4|

; 605  :     }
; 606  :     if(prclClip->top > prclDst->top)

  0006c	e5953004	 ldr         r3, [r5, #4]
  00070	e5902004	 ldr         r2, [r0, #4]
  00074	e1530002	 cmp         r3, r2
  00078	da00000e	 ble         |$LN10@ClipNoScal@4|

; 607  :     {
; 608  :       long topclip = prclClip->top - prclDst->top;
; 609  :       if(prclSrc)

  0007c	e3510000	 cmp         r1, #0
  00080	e0432002	 sub         r2, r3, r2

; 610  :         prclSrc->top += topclip;

  00084	15913004	 ldrne       r3, [r1, #4]
  00088	10833002	 addne       r3, r3, r2
  0008c	15813004	 strne       r3, [r1, #4]

; 611  :       if(pptlBrush)

  00090	e3560000	 cmp         r6, #0

; 612  :         pptlBrush->y += topclip;

  00094	15963004	 ldrne       r3, [r6, #4]
  00098	10833002	 addne       r3, r3, r2
  0009c	15863004	 strne       r3, [r6, #4]

; 613  :       if(prclMask)

  000a0	e3540000	 cmp         r4, #0

; 614  :         prclMask->top += topclip;

  000a4	15943004	 ldrne       r3, [r4, #4]
  000a8	10833002	 addne       r3, r3, r2
  000ac	15843004	 strne       r3, [r4, #4]

; 615  :       prclDst->top = prclClip->top;

  000b0	e5953004	 ldr         r3, [r5, #4]
  000b4	e5803004	 str         r3, [r0, #4]
  000b8		 |$LN10@ClipNoScal@4|

; 616  :     }
; 617  :     if(prclClip->right < prclDst->right)

  000b8	e5953008	 ldr         r3, [r5, #8]
  000bc	e5902008	 ldr         r2, [r0, #8]
  000c0	e1530002	 cmp         r3, r2
  000c4	aa00000a	 bge         |$LN6@ClipNoScal@4|

; 618  :     {
; 619  :       long rightclip = prclDst->right - prclClip->right;
; 620  :       if(prclSrc)

  000c8	e3510000	 cmp         r1, #0
  000cc	e0422003	 sub         r2, r2, r3

; 621  :         prclSrc->right -= rightclip;

  000d0	15913008	 ldrne       r3, [r1, #8]
  000d4	10433002	 subne       r3, r3, r2
  000d8	15813008	 strne       r3, [r1, #8]

; 622  :       if(prclMask)

  000dc	e3540000	 cmp         r4, #0

; 623  :         prclMask->right -= rightclip;

  000e0	15943008	 ldrne       r3, [r4, #8]
  000e4	10433002	 subne       r3, r3, r2
  000e8	15843008	 strne       r3, [r4, #8]

; 624  :       prclDst->right = prclClip->right;

  000ec	e5953008	 ldr         r3, [r5, #8]
  000f0	e5803008	 str         r3, [r0, #8]
  000f4		 |$LN6@ClipNoScal@4|

; 625  :     }
; 626  :     if(prclClip->bottom < prclDst->bottom)

  000f4	e595300c	 ldr         r3, [r5, #0xC]
  000f8	e590200c	 ldr         r2, [r0, #0xC]
  000fc	e1530002	 cmp         r3, r2
  00100	aa00000a	 bge         |$LN3@ClipNoScal@4|

; 627  :     {
; 628  :       long bottomclip = prclDst->bottom - prclClip->bottom;
; 629  :       if(prclSrc)

  00104	e3510000	 cmp         r1, #0
  00108	e0422003	 sub         r2, r2, r3

; 630  :         prclSrc->bottom -= bottomclip;

  0010c	1591300c	 ldrne       r3, [r1, #0xC]
  00110	10433002	 subne       r3, r3, r2
  00114	1581300c	 strne       r3, [r1, #0xC]

; 631  :       if(prclMask)

  00118	e3540000	 cmp         r4, #0

; 632  :         prclMask->bottom -= bottomclip;

  0011c	1594300c	 ldrne       r3, [r4, #0xC]
  00120	10433002	 subne       r3, r3, r2
  00124	1584300c	 strne       r3, [r4, #0xC]

; 633  :       prclDst->bottom = prclClip->bottom;

  00128	e595300c	 ldr         r3, [r5, #0xC]
  0012c	e580300c	 str         r3, [r0, #0xC]
  00130		 |$LN3@ClipNoScal@4|

; 634  :     }
; 635  :   }
; 636  : }

  00130	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00134	e12fff1e	 bx          lr
  00138		 |$M43390|

			 ENDP  ; |?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@0PBU1@@Z|, ClipNoScale

	EXPORT	|?AdjustForBottomUp@@YAXAAPAXAAJKAAU_RECTL@@01K2@Z| ; AdjustForBottomUp

  00000			 AREA	 |.pdata|, PDATA
|$T43409| DCD	|$LN5@AdjustForB|
	DCD	0x40002601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AdjustForBottomUp@@YAXAAPAXAAJKAAU_RECTL@@01K2@Z| PROC ; AdjustForBottomUp

; 647  : {

  00000		 |$LN5@AdjustForB|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M43406|
  00004	e1a08001	 mov         r8, r1

; 648  :   long tmp = rclDst.bottom;

  00008	e593e00c	 ldr         lr, [r3, #0xC]

; 649  :   rclDst.bottom = dstheight - rclDst.top;

  0000c	e5935004	 ldr         r5, [r3, #4]

; 650  :   rclDst.top = dstheight - tmp;
; 651  :   tmp = rclSrc.bottom;

  00010	e59d6024	 ldr         r6, [sp, #0x24]
  00014	e042400e	 sub         r4, r2, lr
  00018	e042e005	 sub         lr, r2, r5
  0001c	e583e00c	 str         lr, [r3, #0xC]
  00020	e5834004	 str         r4, [r3, #4]
  00024	e596e00c	 ldr         lr, [r6, #0xC]

; 652  :   rclSrc.bottom = srcheight - rclSrc.top;

  00028	e5963004	 ldr         r3, [r6, #4]
  0002c	e59d4020	 ldr         r4, [sp, #0x20]

; 653  :   rclSrc.top = srcheight - tmp;
; 654  :   dststride = -dststride;
; 655  :   srcstride = -srcstride;
; 656  :   pDst = (void*)((long)pDst - ((dstheight - 1) * dststride));

  00030	e2425001	 sub         r5, r2, #1
  00034	e59d701c	 ldr         r7, [sp, #0x1C]
  00038	e0443003	 sub         r3, r4, r3
  0003c	e044200e	 sub         r2, r4, lr
  00040	e586300c	 str         r3, [r6, #0xC]
  00044	e5862004	 str         r2, [r6, #4]
  00048	e5983000	 ldr         r3, [r8]

; 657  :   pSrc = (void*)((long)pSrc - ((srcheight - 1) * srcstride));

  0004c	e59de018	 ldr         lr, [sp, #0x18]
  00050	e2441001	 sub         r1, r4, #1
  00054	e2633000	 rsb         r3, r3, #0
  00058	e5883000	 str         r3, [r8]
  0005c	e5973000	 ldr         r3, [r7]
  00060	e2633000	 rsb         r3, r3, #0
  00064	e5873000	 str         r3, [r7]
  00068	e5983000	 ldr         r3, [r8]
  0006c	e5902000	 ldr         r2, [r0]
  00070	e0030395	 mul         r3, r5, r3
  00074	e0423003	 sub         r3, r2, r3
  00078	e5803000	 str         r3, [r0]
  0007c	e5973000	 ldr         r3, [r7]
  00080	e59e2000	 ldr         r2, [lr]
  00084	e0030391	 mul         r3, r1, r3
  00088	e0423003	 sub         r3, r2, r3
  0008c	e58e3000	 str         r3, [lr]

; 658  : }

  00090	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$M43407|

			 ENDP  ; |?AdjustForBottomUp@@YAXAAPAXAAJKAAU_RECTL@@01K2@Z|, AdjustForBottomUp

	EXPORT	|?DesignateBltROP1@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| ; OMAPDDGPE::DesignateBltROP1

  00000			 AREA	 |.pdata|, PDATA
|$T43416| DCD	|$LN5@DesignateB|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltROP1@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| PROC ; OMAPDDGPE::DesignateBltROP1

; 788  : {

  00000		 |$LN5@DesignateB|
  00000		 |$M43413|

; 789  : //  GPEBltParms parms = *pParms;
; 790  : //  if(!(parms.bltFlags & BLT_STRETCH))
; 791  : //    ClipNoScale(parms.prclDst, parms.prclClip);
; 792  : //  if(((parms.prclDst->right - parms.prclDst->left) > 0) &&
; 793  : //     ((parms.prclDst->bottom - parms.prclDst->top) > 0))
; 794  : //  {
; 795  : //    switch(rop1)
; 796  : //    {
; 797  : //    }
; 798  : //  }
; 799  : //  pParms->pBlt = parms.pBlt;
; 800  :     UNREFERENCED_PARAMETER(rop1);
; 801  :     UNREFERENCED_PARAMETER(pParms);
; 802  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M43414|

			 ENDP  ; |?DesignateBltROP1@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z|, OMAPDDGPE::DesignateBltROP1

	EXPORT	|?DesignateBltSRCCOPY_LUT8toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toLUT8

  00000			 AREA	 |.pdata|, PDATA
|$T43423| DCD	|$LN6@DesignateB@2|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_LUT8toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toLUT8

; 870  : {

  00000		 |$LN6@DesignateB@2|
  00000		 |$M43420|

; 871  :   // Can't handle transparency, alpha, or stretch (yet)
; 872  :   if(pParms->bltFlags == 0 && pParms->xPositive == 1 && !pParms->pConvert)
; 873  :   {
; 874  :     // unexplained memory leak during CESTRESS if this BLT is enabled
; 875  :     //pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopy8to8;
; 876  :   }
; 877  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M43421|

			 ENDP  ; |?DesignateBltSRCCOPY_LUT8toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_LUT8toLUT8

	EXPORT	|?DesignateBltSRCCOPY_BGR24toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_BGR24toBGR24

  00000			 AREA	 |.pdata|, PDATA
|$T43430| DCD	|$LN6@DesignateB@3|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_BGR24toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_BGR24toBGR24

; 994  : {

  00000		 |$LN6@DesignateB@3|
  00000		 |$M43427|

; 995  :   // Can't handle transparency, alpha, or stretch (yet)
; 996  :   if(pParms->bltFlags == 0)
; 997  :   {
; 998  :     // unexplained memory leak during CESTRESS if this BLT is enabled
; 999  :     //pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopy24to24;
; 1000 :   }
; 1001 : }

  00000	e12fff1e	 bx          lr
  00004		 |$M43428|

			 ENDP  ; |?DesignateBltSRCCOPY_BGR24toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_BGR24toBGR24

	EXPORT	|?EmulatedBlockFill8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockFill8
	IMPORT	|BlockFill8|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43455| DCD	|$LN9@EmulatedBl|
	DCD	0x40001e02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockFill8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockFill8

; 1247 : {

  00000		 |$LN9@EmulatedBl|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M43452|
  00008	e1a0b001	 mov         r11, r1

; 1248 : CALLOUT(L"EmulatedBlockFill8()");
; 1249 : 
; 1250 :   void* dstptr = pParms->pDst->Buffer();
; 1251 :   long dststride = pParms->pDst->Stride();
; 1252 :   RECTL rclDst = *(pParms->prclDst);
; 1253 :   
; 1254 :   WaitForNotBusy();

  0000c	e59b4014	 ldr         r4, [r11, #0x14]
  00010	e5903000	 ldr         r3, [r0]
  00014	e59b2004	 ldr         r2, [r11, #4]
  00018	e5948000	 ldr         r8, [r4]
  0001c	e5947004	 ldr         r7, [r4, #4]
  00020	e5945008	 ldr         r5, [r4, #8]
  00024	e594400c	 ldr         r4, [r4, #0xC]
  00028	e5936060	 ldr         r6, [r3, #0x60]
  0002c	e592a004	 ldr         r10, [r2, #4]
  00030	e5929008	 ldr         r9, [r2, #8]
  00034	e1a0e00f	 mov         lr, pc
  00038	e12fff16	 bx          r6

; 1255 :   
; 1256 :   BlockFill8(dstptr,
; 1257 :              dststride,
; 1258 :              rclDst.left,
; 1259 :              rclDst.top,
; 1260 :              rclDst.right - rclDst.left,
; 1261 :              rclDst.bottom - rclDst.top,
; 1262 :              (unsigned char)pParms->solidColor);

  0003c	e5dbe020	 ldrb        lr, [r11, #0x20]
  00040	e0444007	 sub         r4, r4, r7
  00044	e0455008	 sub         r5, r5, r8
  00048	e1a03007	 mov         r3, r7
  0004c	e1a02008	 mov         r2, r8
  00050	e1a01009	 mov         r1, r9
  00054	e1a0000a	 mov         r0, r10
  00058	e58de008	 str         lr, [sp, #8]
  0005c	e58d4004	 str         r4, [sp, #4]
  00060	e58d5000	 str         r5, [sp]
  00064	eb000000	 bl          BlockFill8

; 1263 : 
; 1264 : #ifdef CHECKBLT
; 1265 :   if(!CheckBlt(pParms))
; 1266 :   {
; 1267 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1268 :     DebugBreak();
; 1269 :   }
; 1270 : #endif
; 1271 : 
; 1272 :   return(S_OK);

  00068	e3a00000	 mov         r0, #0

; 1273 : }

  0006c	e28dd00c	 add         sp, sp, #0xC
  00070	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M43453|

			 ENDP  ; |?EmulatedBlockFill8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockFill8

	EXPORT	|?EmulatedBlockFill16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockFill16
	IMPORT	|BlockFill16|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43480| DCD	|$LN9@EmulatedBl@2|
	DCD	0x40001e02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockFill16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockFill16

; 1276 : {

  00000		 |$LN9@EmulatedBl@2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M43477|
  00008	e1a0b001	 mov         r11, r1

; 1277 : CALLOUT(L"EmulatedBlockFill16()");
; 1278 : 
; 1279 :   void* dstptr = pParms->pDst->Buffer();
; 1280 :   long dststride = pParms->pDst->Stride();
; 1281 :   RECTL rclDst = *(pParms->prclDst);
; 1282 :   
; 1283 :   WaitForNotBusy();

  0000c	e59b4014	 ldr         r4, [r11, #0x14]
  00010	e5903000	 ldr         r3, [r0]
  00014	e59b2004	 ldr         r2, [r11, #4]
  00018	e5948000	 ldr         r8, [r4]
  0001c	e5947004	 ldr         r7, [r4, #4]
  00020	e5945008	 ldr         r5, [r4, #8]
  00024	e594400c	 ldr         r4, [r4, #0xC]
  00028	e5936060	 ldr         r6, [r3, #0x60]
  0002c	e592a004	 ldr         r10, [r2, #4]
  00030	e5929008	 ldr         r9, [r2, #8]
  00034	e1a0e00f	 mov         lr, pc
  00038	e12fff16	 bx          r6

; 1284 :   BlockFill16(dstptr,
; 1285 :               dststride,
; 1286 :               rclDst.left,
; 1287 :               rclDst.top,
; 1288 :               rclDst.right - rclDst.left,
; 1289 :               rclDst.bottom - rclDst.top,
; 1290 :               (unsigned short)pParms->solidColor);

  0003c	e1dbe2b0	 ldrh        lr, [r11, #0x20]
  00040	e0444007	 sub         r4, r4, r7
  00044	e0455008	 sub         r5, r5, r8
  00048	e1a03007	 mov         r3, r7
  0004c	e1a02008	 mov         r2, r8
  00050	e1a01009	 mov         r1, r9
  00054	e1a0000a	 mov         r0, r10
  00058	e58de008	 str         lr, [sp, #8]
  0005c	e58d4004	 str         r4, [sp, #4]
  00060	e58d5000	 str         r5, [sp]
  00064	eb000000	 bl          BlockFill16

; 1291 : 
; 1292 : #ifdef CHECKBLT
; 1293 :   if(!CheckBlt(pParms))
; 1294 :   {
; 1295 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1296 :     DebugBreak();
; 1297 :   }
; 1298 : #endif
; 1299 : 
; 1300 :   return(S_OK);

  00068	e3a00000	 mov         r0, #0

; 1301 : }

  0006c	e28dd00c	 add         sp, sp, #0xC
  00070	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M43478|

			 ENDP  ; |?EmulatedBlockFill16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockFill16

	EXPORT	|?EmulatedBlockFill24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockFill24
	IMPORT	|BlockFill24|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43505| DCD	|$LN9@EmulatedBl@3|
	DCD	0x40001e02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockFill24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockFill24

; 1304 : {

  00000		 |$LN9@EmulatedBl@3|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M43502|
  00008	e1a0a001	 mov         r10, r1

; 1305 : CALLOUT(L"EmulatedBlockFill24()");
; 1306 : 
; 1307 :   void* dstptr = pParms->pDst->Buffer();
; 1308 :   long dststride = pParms->pDst->Stride();
; 1309 :   RECTL rclDst = *(pParms->prclDst);
; 1310 :   
; 1311 :   WaitForNotBusy();

  0000c	e59a4014	 ldr         r4, [r10, #0x14]
  00010	e5903000	 ldr         r3, [r0]
  00014	e59a2004	 ldr         r2, [r10, #4]
  00018	e5947000	 ldr         r7, [r4]
  0001c	e5946004	 ldr         r6, [r4, #4]
  00020	e5945008	 ldr         r5, [r4, #8]
  00024	e594400c	 ldr         r4, [r4, #0xC]
  00028	e5933060	 ldr         r3, [r3, #0x60]
  0002c	e5929004	 ldr         r9, [r2, #4]
  00030	e5928008	 ldr         r8, [r2, #8]
  00034	e1a0e00f	 mov         lr, pc
  00038	e12fff13	 bx          r3

; 1312 :   BlockFill24(dstptr,
; 1313 :               dststride,
; 1314 :               rclDst.left,
; 1315 :               rclDst.top,
; 1316 :               rclDst.right - rclDst.left,
; 1317 :               rclDst.bottom - rclDst.top,
; 1318 :               (unsigned long)pParms->solidColor);

  0003c	e59ae020	 ldr         lr, [r10, #0x20]
  00040	e0444006	 sub         r4, r4, r6
  00044	e0455007	 sub         r5, r5, r7
  00048	e1a03006	 mov         r3, r6
  0004c	e1a02007	 mov         r2, r7
  00050	e1a01008	 mov         r1, r8
  00054	e1a00009	 mov         r0, r9
  00058	e58de008	 str         lr, [sp, #8]
  0005c	e58d4004	 str         r4, [sp, #4]
  00060	e58d5000	 str         r5, [sp]
  00064	eb000000	 bl          BlockFill24

; 1319 : 
; 1320 : #ifdef CHECKBLT
; 1321 :   if(!CheckBlt(pParms))
; 1322 :   {
; 1323 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1324 :     DebugBreak();
; 1325 :   }
; 1326 : #endif
; 1327 : 
; 1328 :   return(S_OK);

  00068	e3a00000	 mov         r0, #0

; 1329 : }

  0006c	e28dd00c	 add         sp, sp, #0xC
  00070	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M43503|

			 ENDP  ; |?EmulatedBlockFill24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockFill24

	EXPORT	|?EmulatedBlockFill32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockFill32
	IMPORT	|BlockFill32|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43530| DCD	|$LN9@EmulatedBl@4|
	DCD	0x40001e02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockFill32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockFill32

; 1332 : {

  00000		 |$LN9@EmulatedBl@4|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M43527|
  00008	e1a0a001	 mov         r10, r1

; 1333 : CALLOUT(L"EmulatedBlockFill32()");
; 1334 : 
; 1335 :   void* dstptr = pParms->pDst->Buffer();
; 1336 :   long dststride = pParms->pDst->Stride();
; 1337 :   RECTL rclDst = *(pParms->prclDst);
; 1338 :   
; 1339 :   WaitForNotBusy();

  0000c	e59a4014	 ldr         r4, [r10, #0x14]
  00010	e5903000	 ldr         r3, [r0]
  00014	e59a2004	 ldr         r2, [r10, #4]
  00018	e5947000	 ldr         r7, [r4]
  0001c	e5946004	 ldr         r6, [r4, #4]
  00020	e5945008	 ldr         r5, [r4, #8]
  00024	e594400c	 ldr         r4, [r4, #0xC]
  00028	e5933060	 ldr         r3, [r3, #0x60]
  0002c	e5929004	 ldr         r9, [r2, #4]
  00030	e5928008	 ldr         r8, [r2, #8]
  00034	e1a0e00f	 mov         lr, pc
  00038	e12fff13	 bx          r3

; 1340 :   BlockFill32(dstptr,
; 1341 :               dststride,
; 1342 :               rclDst.left,
; 1343 :               rclDst.top,
; 1344 :               rclDst.right - rclDst.left,
; 1345 :               rclDst.bottom - rclDst.top,
; 1346 :               (unsigned long)pParms->solidColor);

  0003c	e59ae020	 ldr         lr, [r10, #0x20]
  00040	e0444006	 sub         r4, r4, r6
  00044	e0455007	 sub         r5, r5, r7
  00048	e1a03006	 mov         r3, r6
  0004c	e1a02007	 mov         r2, r7
  00050	e1a01008	 mov         r1, r8
  00054	e1a00009	 mov         r0, r9
  00058	e58de008	 str         lr, [sp, #8]
  0005c	e58d4004	 str         r4, [sp, #4]
  00060	e58d5000	 str         r5, [sp]
  00064	eb000000	 bl          BlockFill32

; 1347 : 
; 1348 : #ifdef CHECKBLT
; 1349 :   if(!CheckBlt(pParms))
; 1350 :   {
; 1351 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1352 :     DebugBreak();
; 1353 :   }
; 1354 : #endif
; 1355 : 
; 1356 :   return(S_OK);

  00068	e3a00000	 mov         r0, #0

; 1357 : }

  0006c	e28dd00c	 add         sp, sp, #0xC
  00070	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M43528|

			 ENDP  ; |?EmulatedBlockFill32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockFill32

	EXPORT	|?EmulatedBlockCopy8to8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopy8to8
	IMPORT	|BlockCopy8|
	IMPORT	|?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z| ; GPE::EmulatedBlt
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43576| DCD	|$LN21@EmulatedBl@5|
	DCD	0x40006802
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockCopy8to8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopy8to8

; 1360 : {

  00000		 |$LN21@EmulatedBl@5|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd058	 sub         sp, sp, #0x58
  00008		 |$M43573|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0

; 1361 :   // Can't handle right to left yet
; 1362 :   if(pParms->xPositive != 1)

  00010	e5943034	 ldr         r3, [r4, #0x34]
  00014	e3530001	 cmp         r3, #1
  00018	0a000003	 beq         |$LN3@EmulatedBl@5|
  0001c		 |$LN18@EmulatedBl@5|

; 1363 :     return(GPE::EmulatedBlt(pParms));

  0001c	e1a01004	 mov         r1, r4
  00020	e1a00006	 mov         r0, r6
  00024	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  00028	ea000059	 b           |$LN4@EmulatedBl@5|
  0002c		 |$LN3@EmulatedBl@5|

; 1364 : 
; 1365 :   // Can't handle conversion routines
; 1366 :   if(pParms->pConvert)

  0002c	e5943040	 ldr         r3, [r4, #0x40]
  00030	e3530000	 cmp         r3, #0

; 1367 :     return(GPE::EmulatedBlt(pParms));

  00034	1afffff8	 bne         |$LN18@EmulatedBl@5|

; 1368 : 
; 1369 : CALLOUT(L"EmulatedBlockCopy8to8()");
; 1370 : 
; 1371 :   void* dstptr = pParms->pDst->Buffer();
; 1372 :   long dststride = pParms->pDst->Stride();
; 1373 :   void* srcptr = pParms->pSrc->Buffer();
; 1374 :   long srcstride = pParms->pSrc->Stride();
; 1375 :   RECTL rclDst = *(pParms->prclDst);

  00038	e5943014	 ldr         r3, [r4, #0x14]

; 1376 :   RECTL rclSrc = *(pParms->prclSrc);

  0003c	e5941004	 ldr         r1, [r4, #4]
  00040	e5942018	 ldr         r2, [r4, #0x18]
  00044	e5935000	 ldr         r5, [r3]
  00048	e5937004	 ldr         r7, [r3, #4]
  0004c	e5938008	 ldr         r8, [r3, #8]
  00050	e593900c	 ldr         r9, [r3, #0xC]

; 1377 :   
; 1378 :   if(pParms->yPositive != 1)

  00054	e591e004	 ldr         lr, [r1, #4]
  00058	e5943008	 ldr         r3, [r4, #8]
  0005c	e592a000	 ldr         r10, [r2]
  00060	e58de018	 str         lr, [sp, #0x18]
  00064	e593e004	 ldr         lr, [r3, #4]
  00068	e5933008	 ldr         r3, [r3, #8]
  0006c	e592b004	 ldr         r11, [r2, #4]
  00070	e5920008	 ldr         r0, [r2, #8]
  00074	e58d301c	 str         r3, [sp, #0x1C]
  00078	e59d3018	 ldr         r3, [sp, #0x18]
  0007c	e592200c	 ldr         r2, [r2, #0xC]
  00080	e5911008	 ldr         r1, [r1, #8]
  00084	e58d3020	 str         r3, [sp, #0x20]
  00088	e59d301c	 ldr         r3, [sp, #0x1C]
  0008c	e58de034	 str         lr, [sp, #0x34]
  00090	e58de028	 str         lr, [sp, #0x28]
  00094	e594e038	 ldr         lr, [r4, #0x38]
  00098	e58d302c	 str         r3, [sp, #0x2C]
  0009c	e58d1030	 str         r1, [sp, #0x30]
  000a0	e58d5038	 str         r5, [sp, #0x38]
  000a4	e58d703c	 str         r7, [sp, #0x3C]
  000a8	e58d8040	 str         r8, [sp, #0x40]
  000ac	e58d9044	 str         r9, [sp, #0x44]
  000b0	e58da048	 str         r10, [sp, #0x48]
  000b4	e58db04c	 str         r11, [sp, #0x4C]
  000b8	e58d1024	 str         r1, [sp, #0x24]
  000bc	e58d0050	 str         r0, [sp, #0x50]
  000c0	e58d2054	 str         r2, [sp, #0x54]
  000c4	e35e0001	 cmp         lr, #1
  000c8	0a00001c	 beq         |$LN1@EmulatedBl@5|

; 1379 :     AdjustForBottomUp(dstptr, dststride, pParms->pDst->Height(), rclDst,
; 1380 :                       srcptr, srcstride, pParms->pSrc->Height(), rclSrc);

  000cc	e5943008	 ldr         r3, [r4, #8]
  000d0	e5942004	 ldr         r2, [r4, #4]
  000d4	e28d5048	 add         r5, sp, #0x48
  000d8	e5933030	 ldr         r3, [r3, #0x30]
  000dc	e5922030	 ldr         r2, [r2, #0x30]
  000e0	e28de02c	 add         lr, sp, #0x2C
  000e4	e58d3008	 str         r3, [sp, #8]
  000e8	e28d4028	 add         r4, sp, #0x28
  000ec	e28d3038	 add         r3, sp, #0x38
  000f0	e28d1024	 add         r1, sp, #0x24
  000f4	e28d0020	 add         r0, sp, #0x20
  000f8	e58d500c	 str         r5, [sp, #0xC]
  000fc	e58de004	 str         lr, [sp, #4]
  00100	e58d4000	 str         r4, [sp]
  00104	eb000000	 bl          |?AdjustForBottomUp@@YAXAAPAXAAJKAAU_RECTL@@01K2@Z|
  00108	e59d3020	 ldr         r3, [sp, #0x20]
  0010c	e59d9044	 ldr         r9, [sp, #0x44]
  00110	e59d8040	 ldr         r8, [sp, #0x40]
  00114	e58d3018	 str         r3, [sp, #0x18]
  00118	e59d3024	 ldr         r3, [sp, #0x24]
  0011c	e59d703c	 ldr         r7, [sp, #0x3C]
  00120	e59d5038	 ldr         r5, [sp, #0x38]
  00124	e58d3030	 str         r3, [sp, #0x30]
  00128	e59d3028	 ldr         r3, [sp, #0x28]
  0012c	e59db04c	 ldr         r11, [sp, #0x4C]
  00130	e59da048	 ldr         r10, [sp, #0x48]
  00134	e58d3034	 str         r3, [sp, #0x34]
  00138	e59d302c	 ldr         r3, [sp, #0x2C]
  0013c	e58d301c	 str         r3, [sp, #0x1C]
  00140		 |$LN1@EmulatedBl@5|

; 1381 : 
; 1382 :   WaitForNotBusy();

  00140	e5964000	 ldr         r4, [r6]
  00144	e1a00006	 mov         r0, r6
  00148	e5944060	 ldr         r4, [r4, #0x60]
  0014c	e1a0e00f	 mov         lr, pc
  00150	e12fff14	 bx          r4

; 1383 :   BlockCopy8(dstptr,
; 1384 :              dststride,
; 1385 :              rclDst.left,
; 1386 :              rclDst.top,
; 1387 :              rclDst.right - rclDst.left,
; 1388 :              rclDst.bottom - rclDst.top,
; 1389 :              srcptr,
; 1390 :              srcstride,
; 1391 :              rclSrc.left,
; 1392 :              rclSrc.top);

  00154	e049e007	 sub         lr, r9, r7
  00158	e58de004	 str         lr, [sp, #4]
  0015c	e59de01c	 ldr         lr, [sp, #0x1C]
  00160	e59d1030	 ldr         r1, [sp, #0x30]
  00164	e59d0018	 ldr         r0, [sp, #0x18]
  00168	e58de00c	 str         lr, [sp, #0xC]
  0016c	e59de034	 ldr         lr, [sp, #0x34]
  00170	e0484005	 sub         r4, r8, r5
  00174	e1a03007	 mov         r3, r7
  00178	e1a02005	 mov         r2, r5
  0017c	e58de008	 str         lr, [sp, #8]
  00180	e58d4000	 str         r4, [sp]
  00184	e58db014	 str         r11, [sp, #0x14]
  00188	e58da010	 str         r10, [sp, #0x10]
  0018c	eb000000	 bl          BlockCopy8

; 1393 : 
; 1394 : #ifdef CHECKBLT
; 1395 :   if(!CheckBlt(pParms))
; 1396 :   {
; 1397 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1398 :     DebugBreak();
; 1399 :   }
; 1400 : #endif
; 1401 : 
; 1402 :   return(S_OK);

  00190	e3a00000	 mov         r0, #0
  00194		 |$LN4@EmulatedBl@5|

; 1403 : }

  00194	e28dd058	 add         sp, sp, #0x58
  00198	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0019c	e12fff1e	 bx          lr
  001a0		 |$M43574|

			 ENDP  ; |?EmulatedBlockCopy8to8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopy8to8

	EXPORT	|?EmulatedBlockCopyLUT8to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyLUT8to16
	IMPORT	|BlockCopyLUT8to16|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43613| DCD	|$LN13@EmulatedBl@6|
	DCD	0x40003302
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockCopyLUT8to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyLUT8to16

; 1406 : {

  00000		 |$LN13@EmulatedBl@6|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd03c	 sub         sp, sp, #0x3C
  00008		 |$M43610|
  00008	e1a06001	 mov         r6, r1
  0000c	e58d601c	 str         r6, [sp, #0x1C]

; 1407 : CALLOUT(L"EmulatedBlockCopyLUT8to16()");
; 1408 : 
; 1409 :   void* dstptr = pParms->pDst->Buffer();
; 1410 :   long dststride = pParms->pDst->Stride();
; 1411 :   void* srcptr = pParms->pSrc->Buffer();
; 1412 :   long srcstride = pParms->pSrc->Stride();
; 1413 :   RECTL rclDst = *(pParms->prclDst);
; 1414 :   RECTL rclSrc = *(pParms->prclSrc);

  00010	e5961018	 ldr         r1, [r6, #0x18]

; 1415 : 
; 1416 :   WaitForNotBusy();

  00014	e5965004	 ldr         r5, [r6, #4]
  00018	e5964008	 ldr         r4, [r6, #8]
  0001c	e5913008	 ldr         r3, [r1, #8]
  00020	e5967014	 ldr         r7, [r6, #0x14]
  00024	e590e000	 ldr         lr, [r0]
  00028	e58d3034	 str         r3, [sp, #0x34]
  0002c	e5953004	 ldr         r3, [r5, #4]
  00030	e591200c	 ldr         r2, [r1, #0xC]
  00034	e595b008	 ldr         r11, [r5, #8]
  00038	e58d3020	 str         r3, [sp, #0x20]
  0003c	e5943004	 ldr         r3, [r4, #4]
  00040	e5978000	 ldr         r8, [r7]
  00044	e5976004	 ldr         r6, [r7, #4]
  00048	e58d3028	 str         r3, [sp, #0x28]
  0004c	e5943008	 ldr         r3, [r4, #8]
  00050	e5975008	 ldr         r5, [r7, #8]
  00054	e597400c	 ldr         r4, [r7, #0xC]
  00058	e59ea060	 ldr         r10, [lr, #0x60]
  0005c	e5919000	 ldr         r9, [r1]
  00060	e5917004	 ldr         r7, [r1, #4]
  00064	e58d3024	 str         r3, [sp, #0x24]
  00068	e58d2038	 str         r2, [sp, #0x38]
  0006c	e1a0e00f	 mov         lr, pc
  00070	e12fff1a	 bx          r10

; 1417 :   BlockCopyLUT8to16(dstptr,
; 1418 :                     dststride,
; 1419 :                     rclDst.left,
; 1420 :                     rclDst.top,
; 1421 :                     rclDst.right - rclDst.left,
; 1422 :                     rclDst.bottom - rclDst.top,
; 1423 :                     srcptr,
; 1424 :                     srcstride,
; 1425 :                     rclSrc.left,
; 1426 :                     rclSrc.top,
; 1427 :                     pParms->pLookup);

  00074	e59d301c	 ldr         r3, [sp, #0x1C]
  00078	e59d0020	 ldr         r0, [sp, #0x20]
  0007c	e0444006	 sub         r4, r4, r6
  00080	e593e03c	 ldr         lr, [r3, #0x3C]
  00084	e0455008	 sub         r5, r5, r8
  00088	e1a03006	 mov         r3, r6
  0008c	e58de018	 str         lr, [sp, #0x18]
  00090	e59de024	 ldr         lr, [sp, #0x24]
  00094	e1a02008	 mov         r2, r8
  00098	e1a0100b	 mov         r1, r11
  0009c	e58de00c	 str         lr, [sp, #0xC]
  000a0	e59de028	 ldr         lr, [sp, #0x28]
  000a4	e58d7014	 str         r7, [sp, #0x14]
  000a8	e58d9010	 str         r9, [sp, #0x10]
  000ac	e58de008	 str         lr, [sp, #8]
  000b0	e58d4004	 str         r4, [sp, #4]
  000b4	e58d5000	 str         r5, [sp]
  000b8	eb000000	 bl          BlockCopyLUT8to16

; 1428 : 
; 1429 : #ifdef CHECKBLT
; 1430 :   if(!CheckBlt(pParms))
; 1431 :   {
; 1432 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1433 :     DebugBreak();
; 1434 :   }
; 1435 : #endif
; 1436 : 
; 1437 :   return(S_OK);

  000bc	e3a00000	 mov         r0, #0

; 1438 : }

  000c0	e28dd03c	 add         sp, sp, #0x3C
  000c4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$M43611|

			 ENDP  ; |?EmulatedBlockCopyLUT8to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyLUT8to16

	EXPORT	|?EmulatedBlockCopy16to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopy16to16
	IMPORT	|BlockCopy16|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43658| DCD	|$LN21@EmulatedBl@7|
	DCD	0x40006b02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockCopy16to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopy16to16

; 1441 : {

  00000		 |$LN21@EmulatedBl@7|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd058	 sub         sp, sp, #0x58
  00008		 |$M43655|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0

; 1442 :   // Can't handle right to left yet
; 1443 :   if(pParms->xPositive != 1)

  00010	e5943034	 ldr         r3, [r4, #0x34]
  00014	e3530001	 cmp         r3, #1

; 1444 :     return(GPE::EmulatedBlt(pParms));

  00018	1a00005d	 bne         |$LN2@EmulatedBl@7|

; 1445 : 
; 1446 :   // Can't handle lookup tables or conversion routines
; 1447 :   if(pParms->pLookup ||
; 1448 :      pParms->pConvert)

  0001c	e594303c	 ldr         r3, [r4, #0x3C]
  00020	e3530000	 cmp         r3, #0
  00024	1a00005a	 bne         |$LN2@EmulatedBl@7|
  00028	e5943040	 ldr         r3, [r4, #0x40]
  0002c	e3530000	 cmp         r3, #0
  00030	1a000057	 bne         |$LN2@EmulatedBl@7|

; 1450 : 
; 1451 : CALLOUT(L"EmulatedBlockCopy16to16()");
; 1452 : 
; 1453 :   void* dstptr = pParms->pDst->Buffer();
; 1454 :   long dststride = pParms->pDst->Stride();
; 1455 :   void* srcptr = pParms->pSrc->Buffer();
; 1456 :   long srcstride = pParms->pSrc->Stride();
; 1457 :   RECTL rclDst = *(pParms->prclDst);

  00034	e5943014	 ldr         r3, [r4, #0x14]

; 1458 :   RECTL rclSrc = *(pParms->prclSrc);

  00038	e5941004	 ldr         r1, [r4, #4]
  0003c	e5942018	 ldr         r2, [r4, #0x18]
  00040	e5935000	 ldr         r5, [r3]
  00044	e5937004	 ldr         r7, [r3, #4]
  00048	e5938008	 ldr         r8, [r3, #8]
  0004c	e593900c	 ldr         r9, [r3, #0xC]

; 1459 :   
; 1460 :   if(pParms->yPositive != 1)

  00050	e591e004	 ldr         lr, [r1, #4]
  00054	e5943008	 ldr         r3, [r4, #8]
  00058	e592a000	 ldr         r10, [r2]
  0005c	e58de018	 str         lr, [sp, #0x18]
  00060	e593e004	 ldr         lr, [r3, #4]
  00064	e5933008	 ldr         r3, [r3, #8]
  00068	e592b004	 ldr         r11, [r2, #4]
  0006c	e5920008	 ldr         r0, [r2, #8]
  00070	e58d301c	 str         r3, [sp, #0x1C]
  00074	e59d3018	 ldr         r3, [sp, #0x18]
  00078	e592200c	 ldr         r2, [r2, #0xC]
  0007c	e5911008	 ldr         r1, [r1, #8]
  00080	e58d3020	 str         r3, [sp, #0x20]
  00084	e59d301c	 ldr         r3, [sp, #0x1C]
  00088	e58de034	 str         lr, [sp, #0x34]
  0008c	e58de028	 str         lr, [sp, #0x28]
  00090	e594e038	 ldr         lr, [r4, #0x38]
  00094	e58d302c	 str         r3, [sp, #0x2C]
  00098	e58d1030	 str         r1, [sp, #0x30]
  0009c	e58d5038	 str         r5, [sp, #0x38]
  000a0	e58d703c	 str         r7, [sp, #0x3C]
  000a4	e58d8040	 str         r8, [sp, #0x40]
  000a8	e58d9044	 str         r9, [sp, #0x44]
  000ac	e58da048	 str         r10, [sp, #0x48]
  000b0	e58db04c	 str         r11, [sp, #0x4C]
  000b4	e58d1024	 str         r1, [sp, #0x24]
  000b8	e58d0050	 str         r0, [sp, #0x50]
  000bc	e58d2054	 str         r2, [sp, #0x54]
  000c0	e35e0001	 cmp         lr, #1
  000c4	0a00001c	 beq         |$LN1@EmulatedBl@7|

; 1461 :     AdjustForBottomUp(dstptr, dststride, pParms->pDst->Height(), rclDst,
; 1462 :                       srcptr, srcstride, pParms->pSrc->Height(), rclSrc);

  000c8	e5943008	 ldr         r3, [r4, #8]
  000cc	e5942004	 ldr         r2, [r4, #4]
  000d0	e28d5048	 add         r5, sp, #0x48
  000d4	e5933030	 ldr         r3, [r3, #0x30]
  000d8	e5922030	 ldr         r2, [r2, #0x30]
  000dc	e28de02c	 add         lr, sp, #0x2C
  000e0	e58d3008	 str         r3, [sp, #8]
  000e4	e28d4028	 add         r4, sp, #0x28
  000e8	e28d3038	 add         r3, sp, #0x38
  000ec	e28d1024	 add         r1, sp, #0x24
  000f0	e28d0020	 add         r0, sp, #0x20
  000f4	e58d500c	 str         r5, [sp, #0xC]
  000f8	e58de004	 str         lr, [sp, #4]
  000fc	e58d4000	 str         r4, [sp]
  00100	eb000000	 bl          |?AdjustForBottomUp@@YAXAAPAXAAJKAAU_RECTL@@01K2@Z|
  00104	e59d3020	 ldr         r3, [sp, #0x20]
  00108	e59d9044	 ldr         r9, [sp, #0x44]
  0010c	e59d8040	 ldr         r8, [sp, #0x40]
  00110	e58d3018	 str         r3, [sp, #0x18]
  00114	e59d3024	 ldr         r3, [sp, #0x24]
  00118	e59d703c	 ldr         r7, [sp, #0x3C]
  0011c	e59d5038	 ldr         r5, [sp, #0x38]
  00120	e58d3030	 str         r3, [sp, #0x30]
  00124	e59d3028	 ldr         r3, [sp, #0x28]
  00128	e59db04c	 ldr         r11, [sp, #0x4C]
  0012c	e59da048	 ldr         r10, [sp, #0x48]
  00130	e58d3034	 str         r3, [sp, #0x34]
  00134	e59d302c	 ldr         r3, [sp, #0x2C]
  00138	e58d301c	 str         r3, [sp, #0x1C]
  0013c		 |$LN1@EmulatedBl@7|

; 1463 : 
; 1464 :   WaitForNotBusy();

  0013c	e5964000	 ldr         r4, [r6]
  00140	e1a00006	 mov         r0, r6
  00144	e5944060	 ldr         r4, [r4, #0x60]
  00148	e1a0e00f	 mov         lr, pc
  0014c	e12fff14	 bx          r4

; 1465 :   BlockCopy16(dstptr,
; 1466 :               dststride,
; 1467 :               rclDst.left,
; 1468 :               rclDst.top,
; 1469 :               rclDst.right - rclDst.left,
; 1470 :               rclDst.bottom - rclDst.top,
; 1471 :               srcptr,
; 1472 :               srcstride,
; 1473 :               rclSrc.left,
; 1474 :               rclSrc.top);

  00150	e049e007	 sub         lr, r9, r7
  00154	e58de004	 str         lr, [sp, #4]
  00158	e59de01c	 ldr         lr, [sp, #0x1C]
  0015c	e59d1030	 ldr         r1, [sp, #0x30]
  00160	e59d0018	 ldr         r0, [sp, #0x18]
  00164	e58de00c	 str         lr, [sp, #0xC]
  00168	e59de034	 ldr         lr, [sp, #0x34]
  0016c	e0484005	 sub         r4, r8, r5
  00170	e1a03007	 mov         r3, r7
  00174	e1a02005	 mov         r2, r5
  00178	e58de008	 str         lr, [sp, #8]
  0017c	e58d4000	 str         r4, [sp]
  00180	e58db014	 str         r11, [sp, #0x14]
  00184	e58da010	 str         r10, [sp, #0x10]
  00188	eb000000	 bl          BlockCopy16

; 1475 : 
; 1476 : #ifdef CHECKBLT
; 1477 :   if(!CheckBlt(pParms))
; 1478 :   {
; 1479 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1480 :     DebugBreak();
; 1481 :   }
; 1482 : #endif
; 1483 : 
; 1484 :   return(S_OK);

  0018c	e3a00000	 mov         r0, #0
  00190	ea000002	 b           |$LN5@EmulatedBl@7|
  00194		 |$LN2@EmulatedBl@7|

; 1449 :     return(GPE::EmulatedBlt(pParms));

  00194	e1a01004	 mov         r1, r4
  00198	e1a00006	 mov         r0, r6
  0019c	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  001a0		 |$LN5@EmulatedBl@7|

; 1485 : }

  001a0	e28dd058	 add         sp, sp, #0x58
  001a4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001a8	e12fff1e	 bx          lr
  001ac		 |$M43656|

			 ENDP  ; |?EmulatedBlockCopy16to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopy16to16

	EXPORT	|?EmulatedMaskCopy16to16withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedMaskCopy16to16withA1
	IMPORT	|MaskCopy16to16withA1|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43707| DCD	|$LN17@EmulatedMa|
	DCD	0x40004502
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedMaskCopy16to16withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedMaskCopy16to16withA1

; 1488 : {

  00000		 |$LN17@EmulatedMa|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd058	 sub         sp, sp, #0x58
  00008		 |$M43704|

; 1489 : CALLOUT(L"EmulatedMaskCopy16to16withA1()");
; 1490 : 
; 1491 : #ifdef CHECKBLT
; 1492 : //DebugBreak();
; 1493 : GPEBltParms SavedParms = *pParms;
; 1494 : ULONG size = abs(SavedParms.pDst->Stride()) * SavedParms.pDst->Height();
; 1495 : void* buffolddst = malloc(size);
; 1496 : // Save original destination
; 1497 : if(SavedParms.pDst->Stride() < 0)
; 1498 :   memcpy(buffolddst, (void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), size);
; 1499 : else
; 1500 :   memcpy(buffolddst, SavedParms.pDst->Buffer(), size);
; 1501 : #endif
; 1502 :   void* dstptr = pParms->pDst->Buffer();
; 1503 :   long dststride = pParms->pDst->Stride();
; 1504 :   void const* srcptr = pParms->pSrc->Buffer();
; 1505 :   long srcstride = pParms->pSrc->Stride();
; 1506 :   void const* mskptr = pParms->pMask->Buffer();
; 1507 :   long mskstride = pParms->pMask->Stride();
; 1508 :   RECTL rclDst = *(pParms->prclDst);
; 1509 :   RECTL rclSrc = *(pParms->prclSrc);
; 1510 :   RECTL rclMask = *(pParms->prclMask);
; 1511 : 
; 1512 :   WaitForNotBusy();

  00008	e5903000	 ldr         r3, [r0]
  0000c	e5916004	 ldr         r6, [r1, #4]
  00010	e591b018	 ldr         r11, [r1, #0x18]
  00014	e591502c	 ldr         r5, [r1, #0x2C]
  00018	e5917008	 ldr         r7, [r1, #8]
  0001c	e591800c	 ldr         r8, [r1, #0xC]
  00020	e591a014	 ldr         r10, [r1, #0x14]
  00024	e5931060	 ldr         r1, [r3, #0x60]
  00028	e5963004	 ldr         r3, [r6, #4]
  0002c	e59b2008	 ldr         r2, [r11, #8]
  00030	e59be00c	 ldr         lr, [r11, #0xC]
  00034	e58d3034	 str         r3, [sp, #0x34]
  00038	e5963008	 ldr         r3, [r6, #8]
  0003c	e5954008	 ldr         r4, [r5, #8]
  00040	e58db028	 str         r11, [sp, #0x28]
  00044	e58d3030	 str         r3, [sp, #0x30]
  00048	e5973004	 ldr         r3, [r7, #4]
  0004c	e58d502c	 str         r5, [sp, #0x2C]
  00050	e595500c	 ldr         r5, [r5, #0xC]
  00054	e58d3044	 str         r3, [sp, #0x44]
  00058	e5973008	 ldr         r3, [r7, #8]
  0005c	e58d2050	 str         r2, [sp, #0x50]
  00060	e58de054	 str         lr, [sp, #0x54]
  00064	e58d3040	 str         r3, [sp, #0x40]
  00068	e5983004	 ldr         r3, [r8, #4]
  0006c	e59a9000	 ldr         r9, [r10]
  00070	e59a7004	 ldr         r7, [r10, #4]
  00074	e58d303c	 str         r3, [sp, #0x3C]
  00078	e5983008	 ldr         r3, [r8, #8]
  0007c	e58d4050	 str         r4, [sp, #0x50]
  00080	e59a400c	 ldr         r4, [r10, #0xC]
  00084	e58d3038	 str         r3, [sp, #0x38]
  00088	e59d3028	 ldr         r3, [sp, #0x28]
  0008c	e58d5054	 str         r5, [sp, #0x54]
  00090	e59a5008	 ldr         r5, [r10, #8]
  00094	e593a004	 ldr         r10, [r3, #4]
  00098	e59d302c	 ldr         r3, [sp, #0x2C]
  0009c	e59bb000	 ldr         r11, [r11]
  000a0	e5938000	 ldr         r8, [r3]
  000a4	e5936004	 ldr         r6, [r3, #4]
  000a8	e1a0e00f	 mov         lr, pc
  000ac	e12fff11	 bx          r1

; 1513 :   MaskCopy16to16withA1(dstptr,
; 1514 :                        dststride,
; 1515 :                        rclDst.left,
; 1516 :                        rclDst.top,
; 1517 :                        rclDst.right - rclDst.left,
; 1518 :                        rclDst.bottom - rclDst.top,
; 1519 :                        srcptr,
; 1520 :                        srcstride,
; 1521 :                        rclSrc.left,
; 1522 :                        rclSrc.top,
; 1523 :                        mskptr,
; 1524 :                        mskstride,
; 1525 :                        rclMask.left,
; 1526 :                        rclMask.top);

  000b0	e044e007	 sub         lr, r4, r7
  000b4	e58de004	 str         lr, [sp, #4]
  000b8	e59de038	 ldr         lr, [sp, #0x38]
  000bc	e59d1030	 ldr         r1, [sp, #0x30]
  000c0	e59d0034	 ldr         r0, [sp, #0x34]
  000c4	e58de01c	 str         lr, [sp, #0x1C]
  000c8	e59de03c	 ldr         lr, [sp, #0x3C]
  000cc	e0454009	 sub         r4, r5, r9
  000d0	e1a03007	 mov         r3, r7
  000d4	e58de018	 str         lr, [sp, #0x18]
  000d8	e59de040	 ldr         lr, [sp, #0x40]
  000dc	e1a02009	 mov         r2, r9
  000e0	e58d4000	 str         r4, [sp]
  000e4	e58de00c	 str         lr, [sp, #0xC]
  000e8	e59de044	 ldr         lr, [sp, #0x44]
  000ec	e58d6024	 str         r6, [sp, #0x24]
  000f0	e58d8020	 str         r8, [sp, #0x20]
  000f4	e58de008	 str         lr, [sp, #8]
  000f8	e58da014	 str         r10, [sp, #0x14]
  000fc	e58db010	 str         r11, [sp, #0x10]
  00100	eb000000	 bl          MaskCopy16to16withA1

; 1527 : 
; 1528 : #ifdef CHECKBLT
; 1529 : // Save my BLT results
; 1530 : void* buffmydst = malloc(size);
; 1531 : if(SavedParms.pDst->Stride() < 0)
; 1532 :   memcpy(buffmydst, (void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), size);
; 1533 : else
; 1534 :   memcpy(buffmydst, SavedParms.pDst->Buffer(), size);
; 1535 : 
; 1536 : // Check for an error
; 1537 :   unsigned int mybltcrc = wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 1538 :                                    SavedParms.pDst->Stride(),
; 1539 :                                    SavedParms.pDst->Width(),
; 1540 :                                    SavedParms.pDst->Height());
; 1541 : // Restore original destination
; 1542 : if(SavedParms.pDst->Stride() < 0)
; 1543 :   memcpy((void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), buffolddst, size);
; 1544 : else
; 1545 :   memcpy(SavedParms.pDst->Buffer(), buffolddst, size);
; 1546 : 
; 1547 :   GPE* pGPE = GetGPE();
; 1548 :   pGPE->EmulatedBlt(pParms);
; 1549 :   if(mybltcrc != wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 1550 :                           SavedParms.pDst->Stride(),
; 1551 :                           SavedParms.pDst->Width(),
; 1552 :                           SavedParms.pDst->Height()))
; 1553 :   {
; 1554 :     RETAILMSG(1, (TEXT("****** BAD BLT ******\n")));
; 1555 :     DumpParms(&SavedParms);
; 1556 :     DebugBreak();
; 1557 :   }
; 1558 :   free(buffmydst);
; 1559 :   free(buffolddst);
; 1560 : #endif
; 1561 : 
; 1562 :   return(S_OK);

  00104	e3a00000	 mov         r0, #0

; 1563 : }

  00108	e28dd058	 add         sp, sp, #0x58
  0010c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00110	e12fff1e	 bx          lr
  00114		 |$M43705|

			 ENDP  ; |?EmulatedMaskCopy16to16withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedMaskCopy16to16withA1

	EXPORT	|?EmulatedBlockCopyBGR24toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyBGR24toRGB16
	IMPORT	|BlockCopyBGR24toRGB16|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43744| DCD	|$LN13@EmulatedBl@8|
	DCD	0x40002f02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockCopyBGR24toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyBGR24toRGB16

; 1566 : {

  00000		 |$LN13@EmulatedBl@8|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M43741|

; 1567 : CALLOUT(L"EmulatedBlockCopyBGR24toRGB16()");
; 1568 : 
; 1569 :   void* dstptr = pParms->pDst->Buffer();
; 1570 :   long dststride = pParms->pDst->Stride();
; 1571 :   void* srcptr = pParms->pSrc->Buffer();
; 1572 :   long srcstride = pParms->pSrc->Stride();
; 1573 :   RECTL rclDst = *(pParms->prclDst);
; 1574 :   RECTL rclSrc = *(pParms->prclSrc);

  00008	e5919018	 ldr         r9, [r1, #0x18]

; 1575 : 
; 1576 :   WaitForNotBusy();

  0000c	e5915004	 ldr         r5, [r1, #4]
  00010	e5914008	 ldr         r4, [r1, #8]
  00014	e5993008	 ldr         r3, [r9, #8]
  00018	e5917014	 ldr         r7, [r1, #0x14]
  0001c	e590e000	 ldr         lr, [r0]
  00020	e58d302c	 str         r3, [sp, #0x2C]
  00024	e5953004	 ldr         r3, [r5, #4]
  00028	e599200c	 ldr         r2, [r9, #0xC]
  0002c	e595b008	 ldr         r11, [r5, #8]
  00030	e58d3018	 str         r3, [sp, #0x18]
  00034	e5943004	 ldr         r3, [r4, #4]
  00038	e5978000	 ldr         r8, [r7]
  0003c	e5976004	 ldr         r6, [r7, #4]
  00040	e58d3020	 str         r3, [sp, #0x20]
  00044	e5943008	 ldr         r3, [r4, #8]
  00048	e5975008	 ldr         r5, [r7, #8]
  0004c	e597400c	 ldr         r4, [r7, #0xC]
  00050	e58d301c	 str         r3, [sp, #0x1C]
  00054	e5913018	 ldr         r3, [r1, #0x18]
  00058	e59ea060	 ldr         r10, [lr, #0x60]
  0005c	e5999000	 ldr         r9, [r9]
  00060	e5937004	 ldr         r7, [r3, #4]
  00064	e58d2030	 str         r2, [sp, #0x30]
  00068	e1a0e00f	 mov         lr, pc
  0006c	e12fff1a	 bx          r10

; 1577 : #if 1
; 1578 :   BlockCopyBGR24toRGB16(dstptr,
; 1579 :                         dststride,
; 1580 :                         rclDst.left,
; 1581 :                         rclDst.top,
; 1582 :                         rclDst.right - rclDst.left,
; 1583 :                         rclDst.bottom - rclDst.top,
; 1584 :                         srcptr,
; 1585 :                         srcstride,
; 1586 :                         rclSrc.left,
; 1587 :                         rclSrc.top);

  00070	e044e006	 sub         lr, r4, r6
  00074	e58de004	 str         lr, [sp, #4]
  00078	e59de01c	 ldr         lr, [sp, #0x1C]
  0007c	e59d0018	 ldr         r0, [sp, #0x18]
  00080	e0454008	 sub         r4, r5, r8
  00084	e58de00c	 str         lr, [sp, #0xC]
  00088	e59de020	 ldr         lr, [sp, #0x20]
  0008c	e1a03006	 mov         r3, r6
  00090	e1a02008	 mov         r2, r8
  00094	e1a0100b	 mov         r1, r11
  00098	e58de008	 str         lr, [sp, #8]
  0009c	e58d4000	 str         r4, [sp]
  000a0	e58d7014	 str         r7, [sp, #0x14]
  000a4	e58d9010	 str         r9, [sp, #0x10]
  000a8	eb000000	 bl          BlockCopyBGR24toRGB16

; 1588 : #else
; 1589 :   BlockCopyRGB24toRGB16_v1(dstptr,
; 1590 :                            dststride,
; 1591 :                            rclDst.left,
; 1592 :                            rclDst.top,
; 1593 :                            rclDst.right - rclDst.left,
; 1594 :                            rclDst.bottom - rclDst.top,
; 1595 :                            srcptr,
; 1596 :                            srcstride,
; 1597 :                            rclSrc.left,
; 1598 :                            rclSrc.top);
; 1599 : #endif
; 1600 : 
; 1601 : #ifdef CHECKBLT
; 1602 :   if(!CheckBlt(pParms))
; 1603 :   {
; 1604 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1605 :     DebugBreak();
; 1606 :   }
; 1607 : #endif
; 1608 : 
; 1609 :   return(S_OK);

  000ac	e3a00000	 mov         r0, #0

; 1610 : }

  000b0	e28dd034	 add         sp, sp, #0x34
  000b4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$M43742|

			 ENDP  ; |?EmulatedBlockCopyBGR24toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyBGR24toRGB16

	EXPORT	|?EmulatedBlockCopyBGRx32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyBGRx32toRGB16
	IMPORT	|BlockCopyBGRx32toRGB16|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43781| DCD	|$LN13@EmulatedBl@9|
	DCD	0x40002f02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockCopyBGRx32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyBGRx32toRGB16

; 1613 : {

  00000		 |$LN13@EmulatedBl@9|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M43778|

; 1614 : CALLOUT(L"EmulatedBlockCopyBGRx32toRGB16()");
; 1615 : 
; 1616 :   void* dstptr = pParms->pDst->Buffer();
; 1617 :   long dststride = pParms->pDst->Stride();
; 1618 :   void* srcptr = pParms->pSrc->Buffer();
; 1619 :   long srcstride = pParms->pSrc->Stride();
; 1620 :   RECTL rclDst = *(pParms->prclDst);
; 1621 :   RECTL rclSrc = *(pParms->prclSrc);

  00008	e5919018	 ldr         r9, [r1, #0x18]

; 1622 : 
; 1623 :   WaitForNotBusy();

  0000c	e5915004	 ldr         r5, [r1, #4]
  00010	e5914008	 ldr         r4, [r1, #8]
  00014	e5993008	 ldr         r3, [r9, #8]
  00018	e5917014	 ldr         r7, [r1, #0x14]
  0001c	e590e000	 ldr         lr, [r0]
  00020	e58d302c	 str         r3, [sp, #0x2C]
  00024	e5953004	 ldr         r3, [r5, #4]
  00028	e599200c	 ldr         r2, [r9, #0xC]
  0002c	e595b008	 ldr         r11, [r5, #8]
  00030	e58d3018	 str         r3, [sp, #0x18]
  00034	e5943004	 ldr         r3, [r4, #4]
  00038	e5978000	 ldr         r8, [r7]
  0003c	e5976004	 ldr         r6, [r7, #4]
  00040	e58d3020	 str         r3, [sp, #0x20]
  00044	e5943008	 ldr         r3, [r4, #8]
  00048	e5975008	 ldr         r5, [r7, #8]
  0004c	e597400c	 ldr         r4, [r7, #0xC]
  00050	e58d301c	 str         r3, [sp, #0x1C]
  00054	e5913018	 ldr         r3, [r1, #0x18]
  00058	e59ea060	 ldr         r10, [lr, #0x60]
  0005c	e5999000	 ldr         r9, [r9]
  00060	e5937004	 ldr         r7, [r3, #4]
  00064	e58d2030	 str         r2, [sp, #0x30]
  00068	e1a0e00f	 mov         lr, pc
  0006c	e12fff1a	 bx          r10

; 1624 :   BlockCopyBGRx32toRGB16(dstptr,
; 1625 :                          dststride,
; 1626 :                          rclDst.left,
; 1627 :                          rclDst.top,
; 1628 :                          rclDst.right - rclDst.left,
; 1629 :                          rclDst.bottom - rclDst.top,
; 1630 :                          srcptr,
; 1631 :                          srcstride,
; 1632 :                          rclSrc.left,
; 1633 :                          rclSrc.top);

  00070	e044e006	 sub         lr, r4, r6
  00074	e58de004	 str         lr, [sp, #4]
  00078	e59de01c	 ldr         lr, [sp, #0x1C]
  0007c	e59d0018	 ldr         r0, [sp, #0x18]
  00080	e0454008	 sub         r4, r5, r8
  00084	e58de00c	 str         lr, [sp, #0xC]
  00088	e59de020	 ldr         lr, [sp, #0x20]
  0008c	e1a03006	 mov         r3, r6
  00090	e1a02008	 mov         r2, r8
  00094	e1a0100b	 mov         r1, r11
  00098	e58de008	 str         lr, [sp, #8]
  0009c	e58d4000	 str         r4, [sp]
  000a0	e58d7014	 str         r7, [sp, #0x14]
  000a4	e58d9010	 str         r9, [sp, #0x10]
  000a8	eb000000	 bl          BlockCopyBGRx32toRGB16

; 1634 : 
; 1635 : #ifdef CHECKBLT
; 1636 :   if(!CheckBlt(pParms))
; 1637 :   {
; 1638 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1639 :     DebugBreak();
; 1640 :   }
; 1641 : #endif
; 1642 : 
; 1643 :   return(S_OK);

  000ac	e3a00000	 mov         r0, #0

; 1644 : }

  000b0	e28dd034	 add         sp, sp, #0x34
  000b4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$M43779|

			 ENDP  ; |?EmulatedBlockCopyBGRx32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyBGRx32toRGB16

	EXPORT	|?EmulatedPerPixelAlphaBlendBGRA32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedPerPixelAlphaBlendBGRA32toRGB16
	IMPORT	|AlphaBlendpBGRA32toRGB16|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43818| DCD	|$LN13@EmulatedPe|
	DCD	0x40002f02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedPerPixelAlphaBlendBGRA32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedPerPixelAlphaBlendBGRA32toRGB16

; 1647 : {

  00000		 |$LN13@EmulatedPe|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M43815|

; 1648 : CALLOUT(L"EmulatedPerPixelAlphaBlendBGRA32toRGB16()");
; 1649 : 
; 1650 : #if defined(CHECKBLT) && !defined(NOCHECKALPHA)
; 1651 : //DebugBreak();
; 1652 : GPEBltParms SavedParms = *pParms;
; 1653 : ULONG size = abs(SavedParms.pDst->Stride()) * SavedParms.pDst->Height();
; 1654 : void* buffolddst = malloc(size);
; 1655 : // Save original destination
; 1656 : if(SavedParms.pDst->Stride() < 0)
; 1657 :   memcpy(buffolddst, (void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), size);
; 1658 : else
; 1659 :   memcpy(buffolddst, SavedParms.pDst->Buffer(), size);
; 1660 : #endif
; 1661 :   void* dstptr = pParms->pDst->Buffer();
; 1662 :   long dststride = pParms->pDst->Stride();
; 1663 :   void* srcptr = pParms->pSrc->Buffer();
; 1664 :   long srcstride = pParms->pSrc->Stride();
; 1665 :   RECTL rclDst = *(pParms->prclDst);
; 1666 :   RECTL rclSrc = *(pParms->prclSrc);

  00008	e5919018	 ldr         r9, [r1, #0x18]

; 1667 : 
; 1668 :   WaitForNotBusy();

  0000c	e5915004	 ldr         r5, [r1, #4]
  00010	e5914008	 ldr         r4, [r1, #8]
  00014	e5993008	 ldr         r3, [r9, #8]
  00018	e5917014	 ldr         r7, [r1, #0x14]
  0001c	e590e000	 ldr         lr, [r0]
  00020	e58d302c	 str         r3, [sp, #0x2C]
  00024	e5953004	 ldr         r3, [r5, #4]
  00028	e599200c	 ldr         r2, [r9, #0xC]
  0002c	e595b008	 ldr         r11, [r5, #8]
  00030	e58d3018	 str         r3, [sp, #0x18]
  00034	e5943004	 ldr         r3, [r4, #4]
  00038	e5978000	 ldr         r8, [r7]
  0003c	e5976004	 ldr         r6, [r7, #4]
  00040	e58d3020	 str         r3, [sp, #0x20]
  00044	e5943008	 ldr         r3, [r4, #8]
  00048	e5975008	 ldr         r5, [r7, #8]
  0004c	e597400c	 ldr         r4, [r7, #0xC]
  00050	e58d301c	 str         r3, [sp, #0x1C]
  00054	e5913018	 ldr         r3, [r1, #0x18]
  00058	e59ea060	 ldr         r10, [lr, #0x60]
  0005c	e5999000	 ldr         r9, [r9]
  00060	e5937004	 ldr         r7, [r3, #4]
  00064	e58d2030	 str         r2, [sp, #0x30]
  00068	e1a0e00f	 mov         lr, pc
  0006c	e12fff1a	 bx          r10

; 1669 :   AlphaBlendpBGRA32toRGB16(dstptr,
; 1670 :                            dststride,
; 1671 :                            rclDst.left,
; 1672 :                            rclDst.top,
; 1673 :                            rclDst.right - rclDst.left,
; 1674 :                            rclDst.bottom - rclDst.top,
; 1675 :                            srcptr,
; 1676 :                            srcstride,
; 1677 :                            rclSrc.left,
; 1678 :                            rclSrc.top);

  00070	e044e006	 sub         lr, r4, r6
  00074	e58de004	 str         lr, [sp, #4]
  00078	e59de01c	 ldr         lr, [sp, #0x1C]
  0007c	e59d0018	 ldr         r0, [sp, #0x18]
  00080	e0454008	 sub         r4, r5, r8
  00084	e58de00c	 str         lr, [sp, #0xC]
  00088	e59de020	 ldr         lr, [sp, #0x20]
  0008c	e1a03006	 mov         r3, r6
  00090	e1a02008	 mov         r2, r8
  00094	e1a0100b	 mov         r1, r11
  00098	e58de008	 str         lr, [sp, #8]
  0009c	e58d4000	 str         r4, [sp]
  000a0	e58d7014	 str         r7, [sp, #0x14]
  000a4	e58d9010	 str         r9, [sp, #0x10]
  000a8	eb000000	 bl          AlphaBlendpBGRA32toRGB16

; 1679 : 
; 1680 : #if defined(CHECKBLT) && !defined(NOCHECKALPHA)
; 1681 : // Save my BLT results
; 1682 : void* buffmydst = malloc(size);
; 1683 : if(SavedParms.pDst->Stride() < 0)
; 1684 :   memcpy(buffmydst, (void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), size);
; 1685 : else
; 1686 :   memcpy(buffmydst, SavedParms.pDst->Buffer(), size);
; 1687 : 
; 1688 : // Check for an error
; 1689 :   unsigned int mybltcrc = wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 1690 :                                    SavedParms.pDst->Stride(),
; 1691 :                                    SavedParms.pDst->Width(),
; 1692 :                                    SavedParms.pDst->Height());
; 1693 : // Restore original destination
; 1694 : if(SavedParms.pDst->Stride() < 0)
; 1695 :   memcpy((void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), buffolddst, size);
; 1696 : else
; 1697 :   memcpy(SavedParms.pDst->Buffer(), buffolddst, size);
; 1698 : 
; 1699 :   GPE* pGPE = GetGPE();
; 1700 :   pGPE->EmulatedBlt(pParms);
; 1701 :   if(mybltcrc != wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 1702 :                           SavedParms.pDst->Stride(),
; 1703 :                           SavedParms.pDst->Width(),
; 1704 :                           SavedParms.pDst->Height()))
; 1705 :   {
; 1706 :     RETAILMSG(1, (TEXT("****** BAD BLT ******\n")));
; 1707 :     DumpParms(&SavedParms);
; 1708 : 
; 1709 :     // Print out specific errors
; 1710 :     long sx, sy, dx, dy;
; 1711 :     for(sy = SavedParms.prclSrc->top, dy = SavedParms.prclDst->top;
; 1712 :         sy < SavedParms.prclSrc->bottom;
; 1713 :         sy++, dy++)
; 1714 :     {
; 1715 :       for(sx = SavedParms.prclSrc->left, dx = SavedParms.prclDst->left;
; 1716 :           sx < SavedParms.prclSrc->right;
; 1717 :           sx++, dx++)
; 1718 :       {
; 1719 :         WORD* mydst  = (WORD*)((long)buffmydst + (dx * sizeof(WORD)) + (dy * abs(SavedParms.pDst->Stride())));
; 1720 :         WORD* refdst = (WORD*)((long)SavedParms.pDst->Buffer()  + (dx * sizeof(WORD)) + (dy * SavedParms.pDst->Stride()));
; 1721 :         if(*mydst != *refdst)
; 1722 :         {
; 1723 :           RETAILMSG(1, (TEXT("Bad pixel: (%d, %d) -> (%d, %d), Src: 0x%08X, Dst Before: 0x%04X, My Dst After: 0x%04X, Ref Dst AFter: 0x%04X\n"),
; 1724 :             sx, sy,
; 1725 :             dx, dy,
; 1726 :             *((ULONG*)((long)SavedParms.pSrc->Buffer() + (sx * sizeof(ULONG)) + (sy * SavedParms.pSrc->Stride()))),
; 1727 :             *((WORD*)((long)buffolddst + (dx * sizeof(WORD)) + (dy * abs(SavedParms.pDst->Stride())))),
; 1728 :             *mydst,
; 1729 :             *refdst));
; 1730 :         }
; 1731 :       }
; 1732 :     }
; 1733 :     DebugBreak();
; 1734 :   }
; 1735 :   free(buffmydst);
; 1736 :   free(buffolddst);
; 1737 : #endif
; 1738 : 
; 1739 :   return(S_OK);

  000ac	e3a00000	 mov         r0, #0

; 1740 : }

  000b0	e28dd034	 add         sp, sp, #0x34
  000b4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$M43816|

			 ENDP  ; |?EmulatedPerPixelAlphaBlendBGRA32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedPerPixelAlphaBlendBGRA32toRGB16

	EXPORT	|?EmulatedBlockCopyLUT8to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyLUT8to24
	IMPORT	|BlockCopyLUT8to24|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43855| DCD	|$LN13@EmulatedBl@10|
	DCD	0x40003302
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockCopyLUT8to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyLUT8to24

; 1743 : {

  00000		 |$LN13@EmulatedBl@10|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd03c	 sub         sp, sp, #0x3C
  00008		 |$M43852|
  00008	e1a06001	 mov         r6, r1
  0000c	e58d601c	 str         r6, [sp, #0x1C]

; 1744 : CALLOUT(L"EmulatedBlockCopyLUT8to24()");
; 1745 : 
; 1746 :   void* dstptr = pParms->pDst->Buffer();
; 1747 :   long dststride = pParms->pDst->Stride();
; 1748 :   void* srcptr = pParms->pSrc->Buffer();
; 1749 :   long srcstride = pParms->pSrc->Stride();
; 1750 :   RECTL rclDst = *(pParms->prclDst);
; 1751 :   RECTL rclSrc = *(pParms->prclSrc);

  00010	e5961018	 ldr         r1, [r6, #0x18]

; 1752 : 
; 1753 :   WaitForNotBusy();

  00014	e5965004	 ldr         r5, [r6, #4]
  00018	e5964008	 ldr         r4, [r6, #8]
  0001c	e5913008	 ldr         r3, [r1, #8]
  00020	e5967014	 ldr         r7, [r6, #0x14]
  00024	e590e000	 ldr         lr, [r0]
  00028	e58d3034	 str         r3, [sp, #0x34]
  0002c	e5953004	 ldr         r3, [r5, #4]
  00030	e591200c	 ldr         r2, [r1, #0xC]
  00034	e595b008	 ldr         r11, [r5, #8]
  00038	e58d3020	 str         r3, [sp, #0x20]
  0003c	e5943004	 ldr         r3, [r4, #4]
  00040	e5978000	 ldr         r8, [r7]
  00044	e5976004	 ldr         r6, [r7, #4]
  00048	e58d3028	 str         r3, [sp, #0x28]
  0004c	e5943008	 ldr         r3, [r4, #8]
  00050	e5975008	 ldr         r5, [r7, #8]
  00054	e597400c	 ldr         r4, [r7, #0xC]
  00058	e59ea060	 ldr         r10, [lr, #0x60]
  0005c	e5919000	 ldr         r9, [r1]
  00060	e5917004	 ldr         r7, [r1, #4]
  00064	e58d3024	 str         r3, [sp, #0x24]
  00068	e58d2038	 str         r2, [sp, #0x38]
  0006c	e1a0e00f	 mov         lr, pc
  00070	e12fff1a	 bx          r10

; 1754 :   BlockCopyLUT8to24(dstptr,
; 1755 :                     dststride,
; 1756 :                     rclDst.left,
; 1757 :                     rclDst.top,
; 1758 :                     rclDst.right - rclDst.left,
; 1759 :                     rclDst.bottom - rclDst.top,
; 1760 :                     srcptr,
; 1761 :                     srcstride,
; 1762 :                     rclSrc.left,
; 1763 :                     rclSrc.top,
; 1764 :                     pParms->pLookup);

  00074	e59d301c	 ldr         r3, [sp, #0x1C]
  00078	e59d0020	 ldr         r0, [sp, #0x20]
  0007c	e0444006	 sub         r4, r4, r6
  00080	e593e03c	 ldr         lr, [r3, #0x3C]
  00084	e0455008	 sub         r5, r5, r8
  00088	e1a03006	 mov         r3, r6
  0008c	e58de018	 str         lr, [sp, #0x18]
  00090	e59de024	 ldr         lr, [sp, #0x24]
  00094	e1a02008	 mov         r2, r8
  00098	e1a0100b	 mov         r1, r11
  0009c	e58de00c	 str         lr, [sp, #0xC]
  000a0	e59de028	 ldr         lr, [sp, #0x28]
  000a4	e58d7014	 str         r7, [sp, #0x14]
  000a8	e58d9010	 str         r9, [sp, #0x10]
  000ac	e58de008	 str         lr, [sp, #8]
  000b0	e58d4004	 str         r4, [sp, #4]
  000b4	e58d5000	 str         r5, [sp]
  000b8	eb000000	 bl          BlockCopyLUT8to24

; 1765 : 
; 1766 : #ifdef CHECKBLT
; 1767 :   if(!CheckBlt(pParms))
; 1768 :   {
; 1769 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1770 :     DebugBreak();
; 1771 :   }
; 1772 : #endif
; 1773 : 
; 1774 :   return(S_OK);

  000bc	e3a00000	 mov         r0, #0

; 1775 : }

  000c0	e28dd03c	 add         sp, sp, #0x3C
  000c4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$M43853|

			 ENDP  ; |?EmulatedBlockCopyLUT8to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyLUT8to24

	EXPORT	|?EmulatedBlockCopyRGB16toBGR24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyRGB16toBGR24
	IMPORT	|BlockCopyRGB16toBGR24|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43892| DCD	|$LN13@EmulatedBl@11|
	DCD	0x40002f02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockCopyRGB16toBGR24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyRGB16toBGR24

; 1778 : {

  00000		 |$LN13@EmulatedBl@11|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M43889|

; 1779 : CALLOUT(L"EmulatedBlockCopyRGB16toBGR24()");
; 1780 : 
; 1781 :   void* dstptr = pParms->pDst->Buffer();
; 1782 :   long dststride = pParms->pDst->Stride();
; 1783 :   void* srcptr = pParms->pSrc->Buffer();
; 1784 :   long srcstride = pParms->pSrc->Stride();
; 1785 :   RECTL rclDst = *(pParms->prclDst);
; 1786 :   RECTL rclSrc = *(pParms->prclSrc);

  00008	e5919018	 ldr         r9, [r1, #0x18]

; 1787 : 
; 1788 :   WaitForNotBusy();

  0000c	e5915004	 ldr         r5, [r1, #4]
  00010	e5914008	 ldr         r4, [r1, #8]
  00014	e5993008	 ldr         r3, [r9, #8]
  00018	e5917014	 ldr         r7, [r1, #0x14]
  0001c	e590e000	 ldr         lr, [r0]
  00020	e58d302c	 str         r3, [sp, #0x2C]
  00024	e5953004	 ldr         r3, [r5, #4]
  00028	e599200c	 ldr         r2, [r9, #0xC]
  0002c	e595b008	 ldr         r11, [r5, #8]
  00030	e58d3018	 str         r3, [sp, #0x18]
  00034	e5943004	 ldr         r3, [r4, #4]
  00038	e5978000	 ldr         r8, [r7]
  0003c	e5976004	 ldr         r6, [r7, #4]
  00040	e58d3020	 str         r3, [sp, #0x20]
  00044	e5943008	 ldr         r3, [r4, #8]
  00048	e5975008	 ldr         r5, [r7, #8]
  0004c	e597400c	 ldr         r4, [r7, #0xC]
  00050	e58d301c	 str         r3, [sp, #0x1C]
  00054	e5913018	 ldr         r3, [r1, #0x18]
  00058	e59ea060	 ldr         r10, [lr, #0x60]
  0005c	e5999000	 ldr         r9, [r9]
  00060	e5937004	 ldr         r7, [r3, #4]
  00064	e58d2030	 str         r2, [sp, #0x30]
  00068	e1a0e00f	 mov         lr, pc
  0006c	e12fff1a	 bx          r10

; 1789 :   BlockCopyRGB16toBGR24(dstptr,
; 1790 :                         dststride,
; 1791 :                         rclDst.left,
; 1792 :                         rclDst.top,
; 1793 :                         rclDst.right - rclDst.left,
; 1794 :                         rclDst.bottom - rclDst.top,
; 1795 :                         srcptr,
; 1796 :                         srcstride,
; 1797 :                         rclSrc.left,
; 1798 :                         rclSrc.top);

  00070	e044e006	 sub         lr, r4, r6
  00074	e58de004	 str         lr, [sp, #4]
  00078	e59de01c	 ldr         lr, [sp, #0x1C]
  0007c	e59d0018	 ldr         r0, [sp, #0x18]
  00080	e0454008	 sub         r4, r5, r8
  00084	e58de00c	 str         lr, [sp, #0xC]
  00088	e59de020	 ldr         lr, [sp, #0x20]
  0008c	e1a03006	 mov         r3, r6
  00090	e1a02008	 mov         r2, r8
  00094	e1a0100b	 mov         r1, r11
  00098	e58de008	 str         lr, [sp, #8]
  0009c	e58d4000	 str         r4, [sp]
  000a0	e58d7014	 str         r7, [sp, #0x14]
  000a4	e58d9010	 str         r9, [sp, #0x10]
  000a8	eb000000	 bl          BlockCopyRGB16toBGR24

; 1799 : 
; 1800 : #ifdef CHECKBLT
; 1801 :   if(!CheckBlt(pParms))
; 1802 :   {
; 1803 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1804 :     DebugBreak();
; 1805 :   }
; 1806 : #endif
; 1807 : 
; 1808 :   return(S_OK);

  000ac	e3a00000	 mov         r0, #0

; 1809 : }

  000b0	e28dd034	 add         sp, sp, #0x34
  000b4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$M43890|

			 ENDP  ; |?EmulatedBlockCopyRGB16toBGR24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyRGB16toBGR24

	EXPORT	|?EmulatedBlockCopy24to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopy24to24
	IMPORT	|BlockCopy24|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43937| DCD	|$LN21@EmulatedBl@12|
	DCD	0x40006b02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockCopy24to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopy24to24

; 1812 : {

  00000		 |$LN21@EmulatedBl@12|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd058	 sub         sp, sp, #0x58
  00008		 |$M43934|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0

; 1813 :   // Can't handle right to left yet
; 1814 :   if(pParms->xPositive != 1)

  00010	e5943034	 ldr         r3, [r4, #0x34]
  00014	e3530001	 cmp         r3, #1

; 1815 :     return(GPE::EmulatedBlt(pParms));

  00018	1a00005d	 bne         |$LN2@EmulatedBl@12|

; 1816 : 
; 1817 :   // Can't handle lookup tables or conversion routines
; 1818 :   if(pParms->pLookup ||
; 1819 :      pParms->pConvert)

  0001c	e594303c	 ldr         r3, [r4, #0x3C]
  00020	e3530000	 cmp         r3, #0
  00024	1a00005a	 bne         |$LN2@EmulatedBl@12|
  00028	e5943040	 ldr         r3, [r4, #0x40]
  0002c	e3530000	 cmp         r3, #0
  00030	1a000057	 bne         |$LN2@EmulatedBl@12|

; 1821 : 
; 1822 : CALLOUT(L"EmulatedBlockCopy24to24()");
; 1823 : 
; 1824 :   void* dstptr = pParms->pDst->Buffer();
; 1825 :   long dststride = pParms->pDst->Stride();
; 1826 :   void* srcptr = pParms->pSrc->Buffer();
; 1827 :   long srcstride = pParms->pSrc->Stride();
; 1828 :   RECTL rclDst = *(pParms->prclDst);

  00034	e5943014	 ldr         r3, [r4, #0x14]

; 1829 :   RECTL rclSrc = *(pParms->prclSrc);

  00038	e5941004	 ldr         r1, [r4, #4]
  0003c	e5942018	 ldr         r2, [r4, #0x18]
  00040	e5935000	 ldr         r5, [r3]
  00044	e5937004	 ldr         r7, [r3, #4]
  00048	e5938008	 ldr         r8, [r3, #8]
  0004c	e593900c	 ldr         r9, [r3, #0xC]

; 1830 :   
; 1831 :   if(pParms->yPositive != 1)

  00050	e591e004	 ldr         lr, [r1, #4]
  00054	e5943008	 ldr         r3, [r4, #8]
  00058	e592a000	 ldr         r10, [r2]
  0005c	e58de018	 str         lr, [sp, #0x18]
  00060	e593e004	 ldr         lr, [r3, #4]
  00064	e5933008	 ldr         r3, [r3, #8]
  00068	e592b004	 ldr         r11, [r2, #4]
  0006c	e5920008	 ldr         r0, [r2, #8]
  00070	e58d301c	 str         r3, [sp, #0x1C]
  00074	e59d3018	 ldr         r3, [sp, #0x18]
  00078	e592200c	 ldr         r2, [r2, #0xC]
  0007c	e5911008	 ldr         r1, [r1, #8]
  00080	e58d3020	 str         r3, [sp, #0x20]
  00084	e59d301c	 ldr         r3, [sp, #0x1C]
  00088	e58de034	 str         lr, [sp, #0x34]
  0008c	e58de028	 str         lr, [sp, #0x28]
  00090	e594e038	 ldr         lr, [r4, #0x38]
  00094	e58d302c	 str         r3, [sp, #0x2C]
  00098	e58d1030	 str         r1, [sp, #0x30]
  0009c	e58d5038	 str         r5, [sp, #0x38]
  000a0	e58d703c	 str         r7, [sp, #0x3C]
  000a4	e58d8040	 str         r8, [sp, #0x40]
  000a8	e58d9044	 str         r9, [sp, #0x44]
  000ac	e58da048	 str         r10, [sp, #0x48]
  000b0	e58db04c	 str         r11, [sp, #0x4C]
  000b4	e58d1024	 str         r1, [sp, #0x24]
  000b8	e58d0050	 str         r0, [sp, #0x50]
  000bc	e58d2054	 str         r2, [sp, #0x54]
  000c0	e35e0001	 cmp         lr, #1
  000c4	0a00001c	 beq         |$LN1@EmulatedBl@12|

; 1832 :     AdjustForBottomUp(dstptr, dststride, pParms->pDst->Height(), rclDst,
; 1833 :                       srcptr, srcstride, pParms->pSrc->Height(), rclSrc);

  000c8	e5943008	 ldr         r3, [r4, #8]
  000cc	e5942004	 ldr         r2, [r4, #4]
  000d0	e28d5048	 add         r5, sp, #0x48
  000d4	e5933030	 ldr         r3, [r3, #0x30]
  000d8	e5922030	 ldr         r2, [r2, #0x30]
  000dc	e28de02c	 add         lr, sp, #0x2C
  000e0	e58d3008	 str         r3, [sp, #8]
  000e4	e28d4028	 add         r4, sp, #0x28
  000e8	e28d3038	 add         r3, sp, #0x38
  000ec	e28d1024	 add         r1, sp, #0x24
  000f0	e28d0020	 add         r0, sp, #0x20
  000f4	e58d500c	 str         r5, [sp, #0xC]
  000f8	e58de004	 str         lr, [sp, #4]
  000fc	e58d4000	 str         r4, [sp]
  00100	eb000000	 bl          |?AdjustForBottomUp@@YAXAAPAXAAJKAAU_RECTL@@01K2@Z|
  00104	e59d3020	 ldr         r3, [sp, #0x20]
  00108	e59d9044	 ldr         r9, [sp, #0x44]
  0010c	e59d8040	 ldr         r8, [sp, #0x40]
  00110	e58d3018	 str         r3, [sp, #0x18]
  00114	e59d3024	 ldr         r3, [sp, #0x24]
  00118	e59d703c	 ldr         r7, [sp, #0x3C]
  0011c	e59d5038	 ldr         r5, [sp, #0x38]
  00120	e58d3030	 str         r3, [sp, #0x30]
  00124	e59d3028	 ldr         r3, [sp, #0x28]
  00128	e59db04c	 ldr         r11, [sp, #0x4C]
  0012c	e59da048	 ldr         r10, [sp, #0x48]
  00130	e58d3034	 str         r3, [sp, #0x34]
  00134	e59d302c	 ldr         r3, [sp, #0x2C]
  00138	e58d301c	 str         r3, [sp, #0x1C]
  0013c		 |$LN1@EmulatedBl@12|

; 1834 : 
; 1835 :   WaitForNotBusy();

  0013c	e5964000	 ldr         r4, [r6]
  00140	e1a00006	 mov         r0, r6
  00144	e5944060	 ldr         r4, [r4, #0x60]
  00148	e1a0e00f	 mov         lr, pc
  0014c	e12fff14	 bx          r4

; 1836 :   BlockCopy24(dstptr,
; 1837 :               dststride,
; 1838 :               rclDst.left,
; 1839 :               rclDst.top,
; 1840 :               rclDst.right - rclDst.left,
; 1841 :               rclDst.bottom - rclDst.top,
; 1842 :               srcptr,
; 1843 :               srcstride,
; 1844 :               rclSrc.left,
; 1845 :               rclSrc.top);

  00150	e049e007	 sub         lr, r9, r7
  00154	e58de004	 str         lr, [sp, #4]
  00158	e59de01c	 ldr         lr, [sp, #0x1C]
  0015c	e59d1030	 ldr         r1, [sp, #0x30]
  00160	e59d0018	 ldr         r0, [sp, #0x18]
  00164	e58de00c	 str         lr, [sp, #0xC]
  00168	e59de034	 ldr         lr, [sp, #0x34]
  0016c	e0484005	 sub         r4, r8, r5
  00170	e1a03007	 mov         r3, r7
  00174	e1a02005	 mov         r2, r5
  00178	e58de008	 str         lr, [sp, #8]
  0017c	e58d4000	 str         r4, [sp]
  00180	e58db014	 str         r11, [sp, #0x14]
  00184	e58da010	 str         r10, [sp, #0x10]
  00188	eb000000	 bl          BlockCopy24

; 1846 : 
; 1847 : #ifdef CHECKBLT
; 1848 :   if(!CheckBlt(pParms))
; 1849 :   {
; 1850 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1851 :     DebugBreak();
; 1852 :   }
; 1853 : #endif
; 1854 : 
; 1855 :   return(S_OK);

  0018c	e3a00000	 mov         r0, #0
  00190	ea000002	 b           |$LN5@EmulatedBl@12|
  00194		 |$LN2@EmulatedBl@12|

; 1820 :     return(GPE::EmulatedBlt(pParms));

  00194	e1a01004	 mov         r1, r4
  00198	e1a00006	 mov         r0, r6
  0019c	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  001a0		 |$LN5@EmulatedBl@12|

; 1856 : }

  001a0	e28dd058	 add         sp, sp, #0x58
  001a4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001a8	e12fff1e	 bx          lr
  001ac		 |$M43935|

			 ENDP  ; |?EmulatedBlockCopy24to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopy24to24

	EXPORT	|?EmulatedBlockCopyXYZx32toXYZ24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyXYZx32toXYZ24
	IMPORT	|BlockCopyXYZx32toXYZ24|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43974| DCD	|$LN13@EmulatedBl@13|
	DCD	0x40002f02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockCopyXYZx32toXYZ24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyXYZx32toXYZ24

; 1859 : {

  00000		 |$LN13@EmulatedBl@13|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M43971|

; 1860 : CALLOUT(L"EmulatedBlockCopyXYZx32toXYZ24()");
; 1861 : 
; 1862 :   void* dstptr = pParms->pDst->Buffer();
; 1863 :   long dststride = pParms->pDst->Stride();
; 1864 :   void* srcptr = pParms->pSrc->Buffer();
; 1865 :   long srcstride = pParms->pSrc->Stride();
; 1866 :   RECTL rclDst = *(pParms->prclDst);
; 1867 :   RECTL rclSrc = *(pParms->prclSrc);

  00008	e5919018	 ldr         r9, [r1, #0x18]

; 1868 : 
; 1869 :   WaitForNotBusy();

  0000c	e5915004	 ldr         r5, [r1, #4]
  00010	e5914008	 ldr         r4, [r1, #8]
  00014	e5993008	 ldr         r3, [r9, #8]
  00018	e5917014	 ldr         r7, [r1, #0x14]
  0001c	e590e000	 ldr         lr, [r0]
  00020	e58d302c	 str         r3, [sp, #0x2C]
  00024	e5953004	 ldr         r3, [r5, #4]
  00028	e599200c	 ldr         r2, [r9, #0xC]
  0002c	e595b008	 ldr         r11, [r5, #8]
  00030	e58d3018	 str         r3, [sp, #0x18]
  00034	e5943004	 ldr         r3, [r4, #4]
  00038	e5978000	 ldr         r8, [r7]
  0003c	e5976004	 ldr         r6, [r7, #4]
  00040	e58d3020	 str         r3, [sp, #0x20]
  00044	e5943008	 ldr         r3, [r4, #8]
  00048	e5975008	 ldr         r5, [r7, #8]
  0004c	e597400c	 ldr         r4, [r7, #0xC]
  00050	e58d301c	 str         r3, [sp, #0x1C]
  00054	e5913018	 ldr         r3, [r1, #0x18]
  00058	e59ea060	 ldr         r10, [lr, #0x60]
  0005c	e5999000	 ldr         r9, [r9]
  00060	e5937004	 ldr         r7, [r3, #4]
  00064	e58d2030	 str         r2, [sp, #0x30]
  00068	e1a0e00f	 mov         lr, pc
  0006c	e12fff1a	 bx          r10

; 1870 :   BlockCopyXYZx32toXYZ24(dstptr,
; 1871 :                          dststride,
; 1872 :                          rclDst.left,
; 1873 :                          rclDst.top,
; 1874 :                          rclDst.right - rclDst.left,
; 1875 :                          rclDst.bottom - rclDst.top,
; 1876 :                          srcptr,
; 1877 :                          srcstride,
; 1878 :                          rclSrc.left,
; 1879 :                          rclSrc.top);

  00070	e044e006	 sub         lr, r4, r6
  00074	e58de004	 str         lr, [sp, #4]
  00078	e59de01c	 ldr         lr, [sp, #0x1C]
  0007c	e59d0018	 ldr         r0, [sp, #0x18]
  00080	e0454008	 sub         r4, r5, r8
  00084	e58de00c	 str         lr, [sp, #0xC]
  00088	e59de020	 ldr         lr, [sp, #0x20]
  0008c	e1a03006	 mov         r3, r6
  00090	e1a02008	 mov         r2, r8
  00094	e1a0100b	 mov         r1, r11
  00098	e58de008	 str         lr, [sp, #8]
  0009c	e58d4000	 str         r4, [sp]
  000a0	e58d7014	 str         r7, [sp, #0x14]
  000a4	e58d9010	 str         r9, [sp, #0x10]
  000a8	eb000000	 bl          BlockCopyXYZx32toXYZ24

; 1880 : 
; 1881 : #ifdef CHECKBLT
; 1882 :   if(!CheckBlt(pParms))
; 1883 :   {
; 1884 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1885 :     DebugBreak();
; 1886 :   }
; 1887 : #endif
; 1888 : 
; 1889 :   return(S_OK);

  000ac	e3a00000	 mov         r0, #0

; 1890 : }

  000b0	e28dd034	 add         sp, sp, #0x34
  000b4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$M43972|

			 ENDP  ; |?EmulatedBlockCopyXYZx32toXYZ24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyXYZx32toXYZ24

	EXPORT	|?EmulatedBlockCopyLUT8to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyLUT8to32
	IMPORT	|BlockCopyLUT8to32|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T44011| DCD	|$LN13@EmulatedBl@14|
	DCD	0x40003302
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockCopyLUT8to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyLUT8to32

; 1893 : {

  00000		 |$LN13@EmulatedBl@14|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd03c	 sub         sp, sp, #0x3C
  00008		 |$M44008|
  00008	e1a06001	 mov         r6, r1
  0000c	e58d601c	 str         r6, [sp, #0x1C]

; 1894 : CALLOUT(L"EmulatedBlockCopyLUT8to32()");
; 1895 : 
; 1896 :   void* dstptr = pParms->pDst->Buffer();
; 1897 :   long dststride = pParms->pDst->Stride();
; 1898 :   void* srcptr = pParms->pSrc->Buffer();
; 1899 :   long srcstride = pParms->pSrc->Stride();
; 1900 :   RECTL rclDst = *(pParms->prclDst);
; 1901 :   RECTL rclSrc = *(pParms->prclSrc);

  00010	e5961018	 ldr         r1, [r6, #0x18]

; 1902 : 
; 1903 :   WaitForNotBusy();

  00014	e5965004	 ldr         r5, [r6, #4]
  00018	e5964008	 ldr         r4, [r6, #8]
  0001c	e5913008	 ldr         r3, [r1, #8]
  00020	e5967014	 ldr         r7, [r6, #0x14]
  00024	e590e000	 ldr         lr, [r0]
  00028	e58d3034	 str         r3, [sp, #0x34]
  0002c	e5953004	 ldr         r3, [r5, #4]
  00030	e591200c	 ldr         r2, [r1, #0xC]
  00034	e595b008	 ldr         r11, [r5, #8]
  00038	e58d3020	 str         r3, [sp, #0x20]
  0003c	e5943004	 ldr         r3, [r4, #4]
  00040	e5978000	 ldr         r8, [r7]
  00044	e5976004	 ldr         r6, [r7, #4]
  00048	e58d3028	 str         r3, [sp, #0x28]
  0004c	e5943008	 ldr         r3, [r4, #8]
  00050	e5975008	 ldr         r5, [r7, #8]
  00054	e597400c	 ldr         r4, [r7, #0xC]
  00058	e59ea060	 ldr         r10, [lr, #0x60]
  0005c	e5919000	 ldr         r9, [r1]
  00060	e5917004	 ldr         r7, [r1, #4]
  00064	e58d3024	 str         r3, [sp, #0x24]
  00068	e58d2038	 str         r2, [sp, #0x38]
  0006c	e1a0e00f	 mov         lr, pc
  00070	e12fff1a	 bx          r10

; 1904 :   BlockCopyLUT8to32(dstptr,
; 1905 :                     dststride,
; 1906 :                     rclDst.left,
; 1907 :                     rclDst.top,
; 1908 :                     rclDst.right - rclDst.left,
; 1909 :                     rclDst.bottom - rclDst.top,
; 1910 :                     srcptr,
; 1911 :                     srcstride,
; 1912 :                     rclSrc.left,
; 1913 :                     rclSrc.top,
; 1914 :                     pParms->pLookup);

  00074	e59d301c	 ldr         r3, [sp, #0x1C]
  00078	e59d0020	 ldr         r0, [sp, #0x20]
  0007c	e0444006	 sub         r4, r4, r6
  00080	e593e03c	 ldr         lr, [r3, #0x3C]
  00084	e0455008	 sub         r5, r5, r8
  00088	e1a03006	 mov         r3, r6
  0008c	e58de018	 str         lr, [sp, #0x18]
  00090	e59de024	 ldr         lr, [sp, #0x24]
  00094	e1a02008	 mov         r2, r8
  00098	e1a0100b	 mov         r1, r11
  0009c	e58de00c	 str         lr, [sp, #0xC]
  000a0	e59de028	 ldr         lr, [sp, #0x28]
  000a4	e58d7014	 str         r7, [sp, #0x14]
  000a8	e58d9010	 str         r9, [sp, #0x10]
  000ac	e58de008	 str         lr, [sp, #8]
  000b0	e58d4004	 str         r4, [sp, #4]
  000b4	e58d5000	 str         r5, [sp]
  000b8	eb000000	 bl          BlockCopyLUT8to32

; 1915 : 
; 1916 : #ifdef CHECKBLT
; 1917 :   if(!CheckBlt(pParms))
; 1918 :   {
; 1919 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 1920 :     DebugBreak();
; 1921 :   }
; 1922 : #endif
; 1923 : 
; 1924 :   return(S_OK);

  000bc	e3a00000	 mov         r0, #0

; 1925 : }

  000c0	e28dd03c	 add         sp, sp, #0x3C
  000c4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$M44009|

			 ENDP  ; |?EmulatedBlockCopyLUT8to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyLUT8to32

	EXPORT	|?EmulatedBlockCopyRGB16toBGRx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyRGB16toBGRx32
	IMPORT	|BlockCopyRGB16toBGRx32|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T44048| DCD	|$LN13@EmulatedBl@15|
	DCD	0x40002f02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockCopyRGB16toBGRx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyRGB16toBGRx32

; 1928 : {

  00000		 |$LN13@EmulatedBl@15|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M44045|

; 1929 : CALLOUT(L"EmulatedBlockCopyRGB16toBGRx32()");
; 1930 : 
; 1931 : #if defined(CHECKBLT) && !defined(NOCHECK565)
; 1932 : //DebugBreak();
; 1933 : GPEBltParms SavedParms = *pParms;
; 1934 : ULONG size = abs(SavedParms.pDst->Stride()) * SavedParms.pDst->Height();
; 1935 : #endif
; 1936 :   void* dstptr = pParms->pDst->Buffer();
; 1937 :   long dststride = pParms->pDst->Stride();
; 1938 :   void* srcptr = pParms->pSrc->Buffer();
; 1939 :   long srcstride = pParms->pSrc->Stride();
; 1940 :   RECTL rclDst = *(pParms->prclDst);
; 1941 :   RECTL rclSrc = *(pParms->prclSrc);

  00008	e5919018	 ldr         r9, [r1, #0x18]

; 1942 : 
; 1943 :   WaitForNotBusy();

  0000c	e5915004	 ldr         r5, [r1, #4]
  00010	e5914008	 ldr         r4, [r1, #8]
  00014	e5993008	 ldr         r3, [r9, #8]
  00018	e5917014	 ldr         r7, [r1, #0x14]
  0001c	e590e000	 ldr         lr, [r0]
  00020	e58d302c	 str         r3, [sp, #0x2C]
  00024	e5953004	 ldr         r3, [r5, #4]
  00028	e599200c	 ldr         r2, [r9, #0xC]
  0002c	e595b008	 ldr         r11, [r5, #8]
  00030	e58d3018	 str         r3, [sp, #0x18]
  00034	e5943004	 ldr         r3, [r4, #4]
  00038	e5978000	 ldr         r8, [r7]
  0003c	e5976004	 ldr         r6, [r7, #4]
  00040	e58d3020	 str         r3, [sp, #0x20]
  00044	e5943008	 ldr         r3, [r4, #8]
  00048	e5975008	 ldr         r5, [r7, #8]
  0004c	e597400c	 ldr         r4, [r7, #0xC]
  00050	e58d301c	 str         r3, [sp, #0x1C]
  00054	e5913018	 ldr         r3, [r1, #0x18]
  00058	e59ea060	 ldr         r10, [lr, #0x60]
  0005c	e5999000	 ldr         r9, [r9]
  00060	e5937004	 ldr         r7, [r3, #4]
  00064	e58d2030	 str         r2, [sp, #0x30]
  00068	e1a0e00f	 mov         lr, pc
  0006c	e12fff1a	 bx          r10

; 1944 :   BlockCopyRGB16toBGRx32(dstptr,
; 1945 :                          dststride,
; 1946 :                          rclDst.left,
; 1947 :                          rclDst.top,
; 1948 :                          rclDst.right - rclDst.left,
; 1949 :                          rclDst.bottom - rclDst.top,
; 1950 :                          srcptr,
; 1951 :                          srcstride,
; 1952 :                          rclSrc.left,
; 1953 :                          rclSrc.top);

  00070	e044e006	 sub         lr, r4, r6
  00074	e58de004	 str         lr, [sp, #4]
  00078	e59de01c	 ldr         lr, [sp, #0x1C]
  0007c	e59d0018	 ldr         r0, [sp, #0x18]
  00080	e0454008	 sub         r4, r5, r8
  00084	e58de00c	 str         lr, [sp, #0xC]
  00088	e59de020	 ldr         lr, [sp, #0x20]
  0008c	e1a03006	 mov         r3, r6
  00090	e1a02008	 mov         r2, r8
  00094	e1a0100b	 mov         r1, r11
  00098	e58de008	 str         lr, [sp, #8]
  0009c	e58d4000	 str         r4, [sp]
  000a0	e58d7014	 str         r7, [sp, #0x14]
  000a4	e58d9010	 str         r9, [sp, #0x10]
  000a8	eb000000	 bl          BlockCopyRGB16toBGRx32

; 1954 : 
; 1955 : #if defined(CHECKBLT) && !defined(NOCHECK565)
; 1956 : // Save my BLT results
; 1957 : void* buffmydst = malloc(size);
; 1958 : if(SavedParms.pDst->Stride() < 0)
; 1959 :   memcpy(buffmydst, (void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), size);
; 1960 : else
; 1961 :   memcpy(buffmydst, SavedParms.pDst->Buffer(), size);
; 1962 : 
; 1963 : // Check for an error
; 1964 :   unsigned int mybltcrc = wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 1965 :                                    SavedParms.pDst->Stride(),
; 1966 :                                    SavedParms.pDst->Width(),
; 1967 :                                    SavedParms.pDst->Height());
; 1968 :   GPE* pGPE = GetGPE();
; 1969 :   pGPE->EmulatedBlt(pParms);
; 1970 :   if(mybltcrc != wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 1971 :                           SavedParms.pDst->Stride(),
; 1972 :                           SavedParms.pDst->Width(),
; 1973 :                           SavedParms.pDst->Height()))
; 1974 :   {
; 1975 :     RETAILMSG(1, (TEXT("****** BAD BLT ******\n")));
; 1976 :     DumpParms(&SavedParms);
; 1977 : 
; 1978 :     // Print out specific errors
; 1979 :     long sx, sy, dx, dy;
; 1980 :     for(sy = SavedParms.prclSrc->top, dy = SavedParms.prclDst->top;
; 1981 :         sy < SavedParms.prclSrc->bottom;
; 1982 :         sy++, dy++)
; 1983 :     {
; 1984 :       for(sx = SavedParms.prclSrc->left, dx = SavedParms.prclDst->left;
; 1985 :           sx < SavedParms.prclSrc->right;
; 1986 :           sx++, dx++)
; 1987 :       {
; 1988 :         ULONG* mydst  = (ULONG*)((long)buffmydst + (dx * sizeof(ULONG)) + (dy * abs(SavedParms.pDst->Stride())));
; 1989 :         ULONG* refdst = (ULONG*)((long)SavedParms.pDst->Buffer()  + (dx * sizeof(ULONG)) + (dy * SavedParms.pDst->Stride()));
; 1990 :         if(*mydst != *refdst)
; 1991 :         {
; 1992 :           RETAILMSG(1, (TEXT("Bad pixel: (%d, %d) -> (%d, %d), Src: 0x%08X, My Dst After: 0x%04X, Ref Dst AFter: 0x%04X\n"),
; 1993 :             sx, sy,
; 1994 :             dx, dy,
; 1995 :             *((WORD*)((long)SavedParms.pSrc->Buffer() + (sx * sizeof(WORD)) + (sy * SavedParms.pSrc->Stride()))),
; 1996 :             *mydst,
; 1997 :             *refdst));
; 1998 :         }
; 1999 :       }
; 2000 :     }
; 2001 :     DebugBreak();
; 2002 :   }
; 2003 :   free(buffmydst);
; 2004 : #endif
; 2005 : 
; 2006 :   return(S_OK);

  000ac	e3a00000	 mov         r0, #0

; 2007 : }

  000b0	e28dd034	 add         sp, sp, #0x34
  000b4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$M44046|

			 ENDP  ; |?EmulatedBlockCopyRGB16toBGRx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyRGB16toBGRx32

	EXPORT	|?EmulatedBlockCopyXYZ24toXYZx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopyXYZ24toXYZx32
	IMPORT	|BlockCopyXYZ24toXYZx32|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T44085| DCD	|$LN13@EmulatedBl@16|
	DCD	0x40002f02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockCopyXYZ24toXYZx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopyXYZ24toXYZx32

; 2010 : {

  00000		 |$LN13@EmulatedBl@16|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M44082|

; 2011 : CALLOUT(L"EmulatedBlockCopyXYZ24toXYZx32()");
; 2012 : 
; 2013 :   void* dstptr = pParms->pDst->Buffer();
; 2014 :   long dststride = pParms->pDst->Stride();
; 2015 :   void* srcptr = pParms->pSrc->Buffer();
; 2016 :   long srcstride = pParms->pSrc->Stride();
; 2017 :   RECTL rclDst = *(pParms->prclDst);
; 2018 :   RECTL rclSrc = *(pParms->prclSrc);

  00008	e5919018	 ldr         r9, [r1, #0x18]

; 2019 : 
; 2020 :   WaitForNotBusy();

  0000c	e5915004	 ldr         r5, [r1, #4]
  00010	e5914008	 ldr         r4, [r1, #8]
  00014	e5993008	 ldr         r3, [r9, #8]
  00018	e5917014	 ldr         r7, [r1, #0x14]
  0001c	e590e000	 ldr         lr, [r0]
  00020	e58d302c	 str         r3, [sp, #0x2C]
  00024	e5953004	 ldr         r3, [r5, #4]
  00028	e599200c	 ldr         r2, [r9, #0xC]
  0002c	e595b008	 ldr         r11, [r5, #8]
  00030	e58d3018	 str         r3, [sp, #0x18]
  00034	e5943004	 ldr         r3, [r4, #4]
  00038	e5978000	 ldr         r8, [r7]
  0003c	e5976004	 ldr         r6, [r7, #4]
  00040	e58d3020	 str         r3, [sp, #0x20]
  00044	e5943008	 ldr         r3, [r4, #8]
  00048	e5975008	 ldr         r5, [r7, #8]
  0004c	e597400c	 ldr         r4, [r7, #0xC]
  00050	e58d301c	 str         r3, [sp, #0x1C]
  00054	e5913018	 ldr         r3, [r1, #0x18]
  00058	e59ea060	 ldr         r10, [lr, #0x60]
  0005c	e5999000	 ldr         r9, [r9]
  00060	e5937004	 ldr         r7, [r3, #4]
  00064	e58d2030	 str         r2, [sp, #0x30]
  00068	e1a0e00f	 mov         lr, pc
  0006c	e12fff1a	 bx          r10

; 2021 :   BlockCopyXYZ24toXYZx32(dstptr,
; 2022 :                          dststride,
; 2023 :                          rclDst.left,
; 2024 :                          rclDst.top,
; 2025 :                          rclDst.right - rclDst.left,
; 2026 :                          rclDst.bottom - rclDst.top,
; 2027 :                          srcptr,
; 2028 :                          srcstride,
; 2029 :                          rclSrc.left,
; 2030 :                          rclSrc.top);

  00070	e044e006	 sub         lr, r4, r6
  00074	e58de004	 str         lr, [sp, #4]
  00078	e59de01c	 ldr         lr, [sp, #0x1C]
  0007c	e59d0018	 ldr         r0, [sp, #0x18]
  00080	e0454008	 sub         r4, r5, r8
  00084	e58de00c	 str         lr, [sp, #0xC]
  00088	e59de020	 ldr         lr, [sp, #0x20]
  0008c	e1a03006	 mov         r3, r6
  00090	e1a02008	 mov         r2, r8
  00094	e1a0100b	 mov         r1, r11
  00098	e58de008	 str         lr, [sp, #8]
  0009c	e58d4000	 str         r4, [sp]
  000a0	e58d7014	 str         r7, [sp, #0x14]
  000a4	e58d9010	 str         r9, [sp, #0x10]
  000a8	eb000000	 bl          BlockCopyXYZ24toXYZx32

; 2031 : 
; 2032 : #ifdef CHECKBLT
; 2033 :   if(!CheckBlt(pParms))
; 2034 :   {
; 2035 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 2036 :     DebugBreak();
; 2037 :   }
; 2038 : #endif
; 2039 : 
; 2040 :   return(S_OK);

  000ac	e3a00000	 mov         r0, #0

; 2041 : }

  000b0	e28dd034	 add         sp, sp, #0x34
  000b4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$M44083|

			 ENDP  ; |?EmulatedBlockCopyXYZ24toXYZx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopyXYZ24toXYZx32

	EXPORT	|?EmulatedBlockCopy32to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedBlockCopy32to32
	IMPORT	|BlockCopy32|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T44130| DCD	|$LN21@EmulatedBl@17|
	DCD	0x40006b02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBlockCopy32to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedBlockCopy32to32

; 2044 : {

  00000		 |$LN21@EmulatedBl@17|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd058	 sub         sp, sp, #0x58
  00008		 |$M44127|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0

; 2045 :   // Can't handle right to left yet
; 2046 :   if(pParms->xPositive != 1)

  00010	e5943034	 ldr         r3, [r4, #0x34]
  00014	e3530001	 cmp         r3, #1

; 2047 :     return(GPE::EmulatedBlt(pParms));

  00018	1a00005d	 bne         |$LN2@EmulatedBl@17|

; 2048 : 
; 2049 :   // Can't handle lookup tables or conversion routines
; 2050 :   if(pParms->pLookup ||
; 2051 :      pParms->pConvert)

  0001c	e594303c	 ldr         r3, [r4, #0x3C]
  00020	e3530000	 cmp         r3, #0
  00024	1a00005a	 bne         |$LN2@EmulatedBl@17|
  00028	e5943040	 ldr         r3, [r4, #0x40]
  0002c	e3530000	 cmp         r3, #0
  00030	1a000057	 bne         |$LN2@EmulatedBl@17|

; 2053 : 
; 2054 : CALLOUT(L"EmulatedBlockCopy32to32()");
; 2055 : 
; 2056 :   void* dstptr = pParms->pDst->Buffer();
; 2057 :   long dststride = pParms->pDst->Stride();
; 2058 :   void* srcptr = pParms->pSrc->Buffer();
; 2059 :   long srcstride = pParms->pSrc->Stride();
; 2060 :   RECTL rclDst = *(pParms->prclDst);

  00034	e5943014	 ldr         r3, [r4, #0x14]

; 2061 :   RECTL rclSrc = *(pParms->prclSrc);

  00038	e5941004	 ldr         r1, [r4, #4]
  0003c	e5942018	 ldr         r2, [r4, #0x18]
  00040	e5935000	 ldr         r5, [r3]
  00044	e5937004	 ldr         r7, [r3, #4]
  00048	e5938008	 ldr         r8, [r3, #8]
  0004c	e593900c	 ldr         r9, [r3, #0xC]

; 2062 :   
; 2063 :   if(pParms->yPositive != 1)

  00050	e591e004	 ldr         lr, [r1, #4]
  00054	e5943008	 ldr         r3, [r4, #8]
  00058	e592a000	 ldr         r10, [r2]
  0005c	e58de018	 str         lr, [sp, #0x18]
  00060	e593e004	 ldr         lr, [r3, #4]
  00064	e5933008	 ldr         r3, [r3, #8]
  00068	e592b004	 ldr         r11, [r2, #4]
  0006c	e5920008	 ldr         r0, [r2, #8]
  00070	e58d301c	 str         r3, [sp, #0x1C]
  00074	e59d3018	 ldr         r3, [sp, #0x18]
  00078	e592200c	 ldr         r2, [r2, #0xC]
  0007c	e5911008	 ldr         r1, [r1, #8]
  00080	e58d3020	 str         r3, [sp, #0x20]
  00084	e59d301c	 ldr         r3, [sp, #0x1C]
  00088	e58de034	 str         lr, [sp, #0x34]
  0008c	e58de028	 str         lr, [sp, #0x28]
  00090	e594e038	 ldr         lr, [r4, #0x38]
  00094	e58d302c	 str         r3, [sp, #0x2C]
  00098	e58d1030	 str         r1, [sp, #0x30]
  0009c	e58d5038	 str         r5, [sp, #0x38]
  000a0	e58d703c	 str         r7, [sp, #0x3C]
  000a4	e58d8040	 str         r8, [sp, #0x40]
  000a8	e58d9044	 str         r9, [sp, #0x44]
  000ac	e58da048	 str         r10, [sp, #0x48]
  000b0	e58db04c	 str         r11, [sp, #0x4C]
  000b4	e58d1024	 str         r1, [sp, #0x24]
  000b8	e58d0050	 str         r0, [sp, #0x50]
  000bc	e58d2054	 str         r2, [sp, #0x54]
  000c0	e35e0001	 cmp         lr, #1
  000c4	0a00001c	 beq         |$LN1@EmulatedBl@17|

; 2064 :     AdjustForBottomUp(dstptr, dststride, pParms->pDst->Height(), rclDst,
; 2065 :                       srcptr, srcstride, pParms->pSrc->Height(), rclSrc);

  000c8	e5943008	 ldr         r3, [r4, #8]
  000cc	e5942004	 ldr         r2, [r4, #4]
  000d0	e28d5048	 add         r5, sp, #0x48
  000d4	e5933030	 ldr         r3, [r3, #0x30]
  000d8	e5922030	 ldr         r2, [r2, #0x30]
  000dc	e28de02c	 add         lr, sp, #0x2C
  000e0	e58d3008	 str         r3, [sp, #8]
  000e4	e28d4028	 add         r4, sp, #0x28
  000e8	e28d3038	 add         r3, sp, #0x38
  000ec	e28d1024	 add         r1, sp, #0x24
  000f0	e28d0020	 add         r0, sp, #0x20
  000f4	e58d500c	 str         r5, [sp, #0xC]
  000f8	e58de004	 str         lr, [sp, #4]
  000fc	e58d4000	 str         r4, [sp]
  00100	eb000000	 bl          |?AdjustForBottomUp@@YAXAAPAXAAJKAAU_RECTL@@01K2@Z|
  00104	e59d3020	 ldr         r3, [sp, #0x20]
  00108	e59d9044	 ldr         r9, [sp, #0x44]
  0010c	e59d8040	 ldr         r8, [sp, #0x40]
  00110	e58d3018	 str         r3, [sp, #0x18]
  00114	e59d3024	 ldr         r3, [sp, #0x24]
  00118	e59d703c	 ldr         r7, [sp, #0x3C]
  0011c	e59d5038	 ldr         r5, [sp, #0x38]
  00120	e58d3030	 str         r3, [sp, #0x30]
  00124	e59d3028	 ldr         r3, [sp, #0x28]
  00128	e59db04c	 ldr         r11, [sp, #0x4C]
  0012c	e59da048	 ldr         r10, [sp, #0x48]
  00130	e58d3034	 str         r3, [sp, #0x34]
  00134	e59d302c	 ldr         r3, [sp, #0x2C]
  00138	e58d301c	 str         r3, [sp, #0x1C]
  0013c		 |$LN1@EmulatedBl@17|

; 2066 : 
; 2067 :   WaitForNotBusy();

  0013c	e5964000	 ldr         r4, [r6]
  00140	e1a00006	 mov         r0, r6
  00144	e5944060	 ldr         r4, [r4, #0x60]
  00148	e1a0e00f	 mov         lr, pc
  0014c	e12fff14	 bx          r4

; 2068 :   BlockCopy32(dstptr,
; 2069 :               dststride,
; 2070 :               rclDst.left,
; 2071 :               rclDst.top,
; 2072 :               rclDst.right - rclDst.left,
; 2073 :               rclDst.bottom - rclDst.top,
; 2074 :               srcptr,
; 2075 :               srcstride,
; 2076 :               rclSrc.left,
; 2077 :               rclSrc.top);

  00150	e049e007	 sub         lr, r9, r7
  00154	e58de004	 str         lr, [sp, #4]
  00158	e59de01c	 ldr         lr, [sp, #0x1C]
  0015c	e59d1030	 ldr         r1, [sp, #0x30]
  00160	e59d0018	 ldr         r0, [sp, #0x18]
  00164	e58de00c	 str         lr, [sp, #0xC]
  00168	e59de034	 ldr         lr, [sp, #0x34]
  0016c	e0484005	 sub         r4, r8, r5
  00170	e1a03007	 mov         r3, r7
  00174	e1a02005	 mov         r2, r5
  00178	e58de008	 str         lr, [sp, #8]
  0017c	e58d4000	 str         r4, [sp]
  00180	e58db014	 str         r11, [sp, #0x14]
  00184	e58da010	 str         r10, [sp, #0x10]
  00188	eb000000	 bl          BlockCopy32

; 2078 : 
; 2079 : #ifdef CHECKBLT
; 2080 :   if(!CheckBlt(pParms))
; 2081 :   {
; 2082 :     OutputDebugString(TEXT("** BAD BLT **: ") TEXT(__FUNCTION__) TEXT("()"));
; 2083 :     DebugBreak();
; 2084 :   }
; 2085 : #endif
; 2086 : 
; 2087 :   return(S_OK);

  0018c	e3a00000	 mov         r0, #0
  00190	ea000002	 b           |$LN5@EmulatedBl@17|
  00194		 |$LN2@EmulatedBl@17|

; 2052 :     return(GPE::EmulatedBlt(pParms));

  00194	e1a01004	 mov         r1, r4
  00198	e1a00006	 mov         r0, r6
  0019c	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  001a0		 |$LN5@EmulatedBl@17|

; 2088 : }

  001a0	e28dd058	 add         sp, sp, #0x58
  001a4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001a8	e12fff1e	 bx          lr
  001ac		 |$M44128|

			 ENDP  ; |?EmulatedBlockCopy32to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedBlockCopy32to32

	EXPORT	|?EmulatedMaskCopy32to32withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::EmulatedMaskCopy32to32withA1
	IMPORT	|MaskCopy32to32withA1|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T44179| DCD	|$LN17@EmulatedMa@2|
	DCD	0x40004502
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedMaskCopy32to32withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::EmulatedMaskCopy32to32withA1

; 2091 : {

  00000		 |$LN17@EmulatedMa@2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd058	 sub         sp, sp, #0x58
  00008		 |$M44176|

; 2092 : CALLOUT(L"EmulatedMaskCopy32to32withA1()");
; 2093 : 
; 2094 : #ifdef CHECKBLT
; 2095 : //DebugBreak();
; 2096 : GPEBltParms SavedParms = *pParms;
; 2097 : ULONG size = abs(SavedParms.pDst->Stride()) * SavedParms.pDst->Height();
; 2098 : void* buffolddst = malloc(size);
; 2099 : // Save original destination
; 2100 : if(SavedParms.pDst->Stride() < 0)
; 2101 :   memcpy(buffolddst, (void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), size);
; 2102 : else
; 2103 :   memcpy(buffolddst, SavedParms.pDst->Buffer(), size);
; 2104 : #endif
; 2105 :   void* dstptr = pParms->pDst->Buffer();
; 2106 :   long dststride = pParms->pDst->Stride();
; 2107 :   void const* srcptr = pParms->pSrc->Buffer();
; 2108 :   long srcstride = pParms->pSrc->Stride();
; 2109 :   void const* mskptr = pParms->pMask->Buffer();
; 2110 :   long mskstride = pParms->pMask->Stride();
; 2111 :   RECTL rclDst = *(pParms->prclDst);
; 2112 :   RECTL rclSrc = *(pParms->prclSrc);
; 2113 :   RECTL rclMask = *(pParms->prclMask);
; 2114 : 
; 2115 :   WaitForNotBusy();

  00008	e5903000	 ldr         r3, [r0]
  0000c	e5916004	 ldr         r6, [r1, #4]
  00010	e591b018	 ldr         r11, [r1, #0x18]
  00014	e591502c	 ldr         r5, [r1, #0x2C]
  00018	e5917008	 ldr         r7, [r1, #8]
  0001c	e591800c	 ldr         r8, [r1, #0xC]
  00020	e591a014	 ldr         r10, [r1, #0x14]
  00024	e5931060	 ldr         r1, [r3, #0x60]
  00028	e5963004	 ldr         r3, [r6, #4]
  0002c	e59b2008	 ldr         r2, [r11, #8]
  00030	e59be00c	 ldr         lr, [r11, #0xC]
  00034	e58d3034	 str         r3, [sp, #0x34]
  00038	e5963008	 ldr         r3, [r6, #8]
  0003c	e5954008	 ldr         r4, [r5, #8]
  00040	e58db028	 str         r11, [sp, #0x28]
  00044	e58d3030	 str         r3, [sp, #0x30]
  00048	e5973004	 ldr         r3, [r7, #4]
  0004c	e58d502c	 str         r5, [sp, #0x2C]
  00050	e595500c	 ldr         r5, [r5, #0xC]
  00054	e58d3044	 str         r3, [sp, #0x44]
  00058	e5973008	 ldr         r3, [r7, #8]
  0005c	e58d2050	 str         r2, [sp, #0x50]
  00060	e58de054	 str         lr, [sp, #0x54]
  00064	e58d3040	 str         r3, [sp, #0x40]
  00068	e5983004	 ldr         r3, [r8, #4]
  0006c	e59a9000	 ldr         r9, [r10]
  00070	e59a7004	 ldr         r7, [r10, #4]
  00074	e58d303c	 str         r3, [sp, #0x3C]
  00078	e5983008	 ldr         r3, [r8, #8]
  0007c	e58d4050	 str         r4, [sp, #0x50]
  00080	e59a400c	 ldr         r4, [r10, #0xC]
  00084	e58d3038	 str         r3, [sp, #0x38]
  00088	e59d3028	 ldr         r3, [sp, #0x28]
  0008c	e58d5054	 str         r5, [sp, #0x54]
  00090	e59a5008	 ldr         r5, [r10, #8]
  00094	e593a004	 ldr         r10, [r3, #4]
  00098	e59d302c	 ldr         r3, [sp, #0x2C]
  0009c	e59bb000	 ldr         r11, [r11]
  000a0	e5938000	 ldr         r8, [r3]
  000a4	e5936004	 ldr         r6, [r3, #4]
  000a8	e1a0e00f	 mov         lr, pc
  000ac	e12fff11	 bx          r1

; 2116 :   MaskCopy32to32withA1(dstptr,
; 2117 :                        dststride,
; 2118 :                        rclDst.left,
; 2119 :                        rclDst.top,
; 2120 :                        rclDst.right - rclDst.left,
; 2121 :                        rclDst.bottom - rclDst.top,
; 2122 :                        srcptr,
; 2123 :                        srcstride,
; 2124 :                        rclSrc.left,
; 2125 :                        rclSrc.top,
; 2126 :                        mskptr,
; 2127 :                        mskstride,
; 2128 :                        rclMask.left,
; 2129 :                        rclMask.top);

  000b0	e044e007	 sub         lr, r4, r7
  000b4	e58de004	 str         lr, [sp, #4]
  000b8	e59de038	 ldr         lr, [sp, #0x38]
  000bc	e59d1030	 ldr         r1, [sp, #0x30]
  000c0	e59d0034	 ldr         r0, [sp, #0x34]
  000c4	e58de01c	 str         lr, [sp, #0x1C]
  000c8	e59de03c	 ldr         lr, [sp, #0x3C]
  000cc	e0454009	 sub         r4, r5, r9
  000d0	e1a03007	 mov         r3, r7
  000d4	e58de018	 str         lr, [sp, #0x18]
  000d8	e59de040	 ldr         lr, [sp, #0x40]
  000dc	e1a02009	 mov         r2, r9
  000e0	e58d4000	 str         r4, [sp]
  000e4	e58de00c	 str         lr, [sp, #0xC]
  000e8	e59de044	 ldr         lr, [sp, #0x44]
  000ec	e58d6024	 str         r6, [sp, #0x24]
  000f0	e58d8020	 str         r8, [sp, #0x20]
  000f4	e58de008	 str         lr, [sp, #8]
  000f8	e58da014	 str         r10, [sp, #0x14]
  000fc	e58db010	 str         r11, [sp, #0x10]
  00100	eb000000	 bl          MaskCopy32to32withA1

; 2130 : 
; 2131 : #ifdef CHECKBLT
; 2132 : // Save my BLT results
; 2133 : void* buffmydst = malloc(size);
; 2134 : if(SavedParms.pDst->Stride() < 0)
; 2135 :   memcpy(buffmydst, (void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), size);
; 2136 : else
; 2137 :   memcpy(buffmydst, SavedParms.pDst->Buffer(), size);
; 2138 : 
; 2139 : // Check for an error
; 2140 :   unsigned int mybltcrc = wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 2141 :                                    SavedParms.pDst->Stride(),
; 2142 :                                    SavedParms.pDst->Width(),
; 2143 :                                    SavedParms.pDst->Height());
; 2144 : // Restore original destination
; 2145 : if(SavedParms.pDst->Stride() < 0)
; 2146 :   memcpy((void*)((long)SavedParms.pDst->Buffer() - ((SavedParms.pDst->Height() - 1) * SavedParms.pDst->Stride())), buffolddst, size);
; 2147 : else
; 2148 :   memcpy(SavedParms.pDst->Buffer(), buffolddst, size);
; 2149 : 
; 2150 :   GPE* pGPE = GetGPE();
; 2151 :   pGPE->EmulatedBlt(pParms);
; 2152 :   if(mybltcrc != wombat2d((unsigned char*)SavedParms.pDst->Buffer(),
; 2153 :                           SavedParms.pDst->Stride(),
; 2154 :                           SavedParms.pDst->Width(),
; 2155 :                           SavedParms.pDst->Height()))
; 2156 :   {
; 2157 :     RETAILMSG(1, (TEXT("****** BAD BLT ******\n")));
; 2158 :     DumpParms(&SavedParms);
; 2159 :     DebugBreak();
; 2160 :   }
; 2161 :   free(buffmydst);
; 2162 :   free(buffolddst);
; 2163 : #endif
; 2164 : 
; 2165 :   return(S_OK);

  00104	e3a00000	 mov         r0, #0

; 2166 : }

  00108	e28dd058	 add         sp, sp, #0x58
  0010c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00110	e12fff1e	 bx          lr
  00114		 |$M44177|

			 ENDP  ; |?EmulatedMaskCopy32to32withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::EmulatedMaskCopy32to32withA1

	EXPORT	|?DesignateBltSRCCOPY_toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_toLUT8

  00000			 AREA	 |.pdata|, PDATA
|$T44194| DCD	|$LN14@DesignateB@4|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_toLUT8

; 857  : {

  00000		 |$LN14@DesignateB@4|
  00000		 |$M44191|

; 858  :   if(pParms->pSrc)
; 859  :   {
; 860  :     switch(pParms->pSrc->Format())
; 861  :     {
; 862  :     case gpe8Bpp:
; 863  :       DesignateBltSRCCOPY_LUT8toLUT8(pParms);
; 864  :       break;
; 865  :     }
; 866  :   }
; 867  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M44192|

			 ENDP  ; |?DesignateBltSRCCOPY_toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_toLUT8

	EXPORT	|?DesignateBltSRCCOPY_LUT8toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toRGB16

  00000			 AREA	 |.pdata|, PDATA
|$T44202| DCD	|$LN6@DesignateB@5|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_LUT8toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toRGB16

; 908  : {

  00000		 |$LN6@DesignateB@5|
  00000		 |$M44199|

; 909  :   // Can't handle transparency, alpha, or stretch (yet)
; 910  :   if(pParms->bltFlags == 0)

  00000	e5913024	 ldr         r3, [r1, #0x24]
  00004	e3530000	 cmp         r3, #0

; 911  :   {
; 912  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyLUT8to16;

  00008	059f3004	 ldreq       r3, [pc, #4]
  0000c	05813000	 streq       r3, [r1]

; 913  :   }
; 914  : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN7@DesignateB@5|
  00014		 |$LN8@DesignateB@5|
  00014	00000000	 DCD         |?EmulatedBlockCopyLUT8to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44200|

			 ENDP  ; |?DesignateBltSRCCOPY_LUT8toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_LUT8toRGB16

	EXPORT	|?DesignateBltSRCCOPY_RGB16toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_RGB16toRGB16

  00000			 AREA	 |.pdata|, PDATA
|$T44212| DCD	|$LN6@DesignateB@6|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_RGB16toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_RGB16toRGB16

; 917  : {

  00000		 |$LN6@DesignateB@6|
  00000		 |$M44209|

; 918  :   // Can't handle transparency, alpha, or stretch (yet)
; 919  :   if(pParms->bltFlags == 0)

  00000	e5913024	 ldr         r3, [r1, #0x24]
  00004	e3530000	 cmp         r3, #0

; 920  :   {
; 921  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopy16to16;

  00008	059f3004	 ldreq       r3, [pc, #4]
  0000c	05813000	 streq       r3, [r1]

; 922  :   }
; 923  : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN7@DesignateB@6|
  00014		 |$LN8@DesignateB@6|
  00014	00000000	 DCD         |?EmulatedBlockCopy16to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44210|

			 ENDP  ; |?DesignateBltSRCCOPY_RGB16toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_RGB16toRGB16

	EXPORT	|?DesignateBltSRCCOPY_BGR24toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_BGR24toRGB16

  00000			 AREA	 |.pdata|, PDATA
|$T44222| DCD	|$LN6@DesignateB@7|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_BGR24toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_BGR24toRGB16

; 926  : {

  00000		 |$LN6@DesignateB@7|
  00000		 |$M44219|

; 927  :   // Can't handle transparency, alpha, or stretch (yet)
; 928  :   if(pParms->bltFlags == 0)

  00000	e5913024	 ldr         r3, [r1, #0x24]
  00004	e3530000	 cmp         r3, #0

; 929  :   {
; 930  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyBGR24toRGB16;

  00008	059f3004	 ldreq       r3, [pc, #4]
  0000c	05813000	 streq       r3, [r1]

; 931  :   }
; 932  : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN7@DesignateB@7|
  00014		 |$LN8@DesignateB@7|
  00014	00000000	 DCD         |?EmulatedBlockCopyBGR24toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44220|

			 ENDP  ; |?DesignateBltSRCCOPY_BGR24toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_BGR24toRGB16

	EXPORT	|?DesignateBltSRCCOPY_BGRA32toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toRGB16

  00000			 AREA	 |.pdata|, PDATA
|$T44233| DCD	|$LN9@DesignateB@8|
	DCD	0x40001000
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_BGRA32toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toRGB16

; 935  : {

  00000		 |$LN9@DesignateB@8|
  00000		 |$M44230|

; 936  :   // Not transparency, alpha, or stretch
; 937  :   if(pParms->bltFlags == 0)

  00000	e5913024	 ldr         r3, [r1, #0x24]
  00004	e3530000	 cmp         r3, #0

; 938  :   {
; 939  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyBGRx32toRGB16;

  00008	059f302c	 ldreq       r3, [pc, #0x2C]

; 944  :   {
; 945  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedPerPixelAlphaBlendBGRA32toRGB16;

  0000c	05813000	 streq       r3, [r1]

; 946  :   }
; 947  : }

  00010	012fff1e	 bxeq        lr

; 940  :   }
; 941  :   else if((pParms->bltFlags == BLT_ALPHABLEND) && // Only handle transparency 
; 942  :   		  (pParms->blendFunction.AlphaFormat == AC_SRC_ALPHA) && 
; 943  :   		  (pParms->blendFunction.SourceConstantAlpha == 0xFF)) // Only handle per-pixel, premultiplied

  00014	e3530010	 cmp         r3, #0x10
  00018	1a000005	 bne         |$LN1@DesignateB@8|
  0001c	e5d1304f	 ldrb        r3, [r1, #0x4F]
  00020	e3530001	 cmp         r3, #1
  00024	05d1304e	 ldreqb      r3, [r1, #0x4E]
  00028	035300ff	 cmpeq       r3, #0xFF

; 944  :   {
; 945  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedPerPixelAlphaBlendBGRA32toRGB16;

  0002c	059f3004	 ldreq       r3, [pc, #4]
  00030	05813000	 streq       r3, [r1]
  00034		 |$LN1@DesignateB@8|

; 946  :   }
; 947  : }

  00034	e12fff1e	 bx          lr
  00038		 |$LN10@DesignateB@8|
  00038		 |$LN11@DesignateB@8|
  00038	00000000	 DCD         |?EmulatedPerPixelAlphaBlendBGRA32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  0003c		 |$LN12@DesignateB@8|
  0003c	00000000	 DCD         |?EmulatedBlockCopyBGRx32toRGB16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00040		 |$M44231|

			 ENDP  ; |?DesignateBltSRCCOPY_BGRA32toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toRGB16

	EXPORT	|?DesignateBltSRCCOPY_LUT8toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toBGR24

  00000			 AREA	 |.pdata|, PDATA
|$T44244| DCD	|$LN6@DesignateB@9|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_LUT8toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toBGR24

; 976  : {

  00000		 |$LN6@DesignateB@9|
  00000		 |$M44241|

; 977  :   // Can't handle transparency, alpha, or stretch (yet)
; 978  :   if(pParms->bltFlags == 0)

  00000	e5913024	 ldr         r3, [r1, #0x24]
  00004	e3530000	 cmp         r3, #0

; 979  :   {
; 980  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyLUT8to24;

  00008	059f3004	 ldreq       r3, [pc, #4]
  0000c	05813000	 streq       r3, [r1]

; 981  :   }
; 982  : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN7@DesignateB@9|
  00014		 |$LN8@DesignateB@9|
  00014	00000000	 DCD         |?EmulatedBlockCopyLUT8to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44242|

			 ENDP  ; |?DesignateBltSRCCOPY_LUT8toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_LUT8toBGR24

	EXPORT	|?DesignateBltSRCCOPY_RGB16toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_RGB16toBGR24

  00000			 AREA	 |.pdata|, PDATA
|$T44254| DCD	|$LN6@DesignateB@10|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_RGB16toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_RGB16toBGR24

; 985  : {

  00000		 |$LN6@DesignateB@10|
  00000		 |$M44251|

; 986  :   // Can't handle transparency, alpha, or stretch (yet)
; 987  :   if(pParms->bltFlags == 0)

  00000	e5913024	 ldr         r3, [r1, #0x24]
  00004	e3530000	 cmp         r3, #0

; 988  :   {
; 989  :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyRGB16toBGR24;

  00008	059f3004	 ldreq       r3, [pc, #4]
  0000c	05813000	 streq       r3, [r1]

; 990  :   }
; 991  : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN7@DesignateB@10|
  00014		 |$LN8@DesignateB@10|
  00014	00000000	 DCD         |?EmulatedBlockCopyRGB16toBGR24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44252|

			 ENDP  ; |?DesignateBltSRCCOPY_RGB16toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_RGB16toBGR24

	EXPORT	|?DesignateBltSRCCOPY_BGRA32toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toBGR24

  00000			 AREA	 |.pdata|, PDATA
|$T44264| DCD	|$LN6@DesignateB@11|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_BGRA32toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toBGR24

; 1004 : {

  00000		 |$LN6@DesignateB@11|
  00000		 |$M44261|

; 1005 :   // Can't handle transparency, alpha, or stretch (yet)
; 1006 :   if(pParms->bltFlags == 0)

  00000	e5913024	 ldr         r3, [r1, #0x24]
  00004	e3530000	 cmp         r3, #0

; 1007 :   {
; 1008 :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyXYZx32toXYZ24;

  00008	059f3004	 ldreq       r3, [pc, #4]
  0000c	05813000	 streq       r3, [r1]

; 1009 :   }
; 1010 : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN7@DesignateB@11|
  00014		 |$LN8@DesignateB@11|
  00014	00000000	 DCD         |?EmulatedBlockCopyXYZx32toXYZ24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44262|

			 ENDP  ; |?DesignateBltSRCCOPY_BGRA32toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toBGR24

	EXPORT	|?DesignateBltSRCCOPY_LUT8toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toBGRA32

  00000			 AREA	 |.pdata|, PDATA
|$T44274| DCD	|$LN6@DesignateB@12|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_LUT8toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_LUT8toBGRA32

; 1038 : {

  00000		 |$LN6@DesignateB@12|
  00000		 |$M44271|

; 1039 :   // Can't handle transparency, alpha, or stretch (yet)
; 1040 :   if(pParms->bltFlags == 0)

  00000	e5913024	 ldr         r3, [r1, #0x24]
  00004	e3530000	 cmp         r3, #0

; 1041 :   {
; 1042 :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyLUT8to32;

  00008	059f3004	 ldreq       r3, [pc, #4]
  0000c	05813000	 streq       r3, [r1]

; 1043 :   }
; 1044 : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN7@DesignateB@12|
  00014		 |$LN8@DesignateB@12|
  00014	00000000	 DCD         |?EmulatedBlockCopyLUT8to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44272|

			 ENDP  ; |?DesignateBltSRCCOPY_LUT8toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_LUT8toBGRA32

	EXPORT	|?DesignateBltSRCCOPY_RGB16toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_RGB16toBGRA32

  00000			 AREA	 |.pdata|, PDATA
|$T44284| DCD	|$LN6@DesignateB@13|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_RGB16toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_RGB16toBGRA32

; 1047 : {

  00000		 |$LN6@DesignateB@13|
  00000		 |$M44281|

; 1048 :   // Can't handle transparency, alpha, or stretch (yet)
; 1049 :   if(pParms->bltFlags == 0)

  00000	e5913024	 ldr         r3, [r1, #0x24]
  00004	e3530000	 cmp         r3, #0

; 1050 :   {
; 1051 :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyRGB16toBGRx32;

  00008	059f3004	 ldreq       r3, [pc, #4]
  0000c	05813000	 streq       r3, [r1]

; 1052 :   }
; 1053 : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN7@DesignateB@13|
  00014		 |$LN8@DesignateB@13|
  00014	00000000	 DCD         |?EmulatedBlockCopyRGB16toBGRx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44282|

			 ENDP  ; |?DesignateBltSRCCOPY_RGB16toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_RGB16toBGRA32

	EXPORT	|?DesignateBltSRCCOPY_BGR24toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_BGR24toBGRA32

  00000			 AREA	 |.pdata|, PDATA
|$T44294| DCD	|$LN6@DesignateB@14|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_BGR24toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_BGR24toBGRA32

; 1056 : {

  00000		 |$LN6@DesignateB@14|
  00000		 |$M44291|

; 1057 :   // Can't handle transparency, alpha, or stretch (yet)
; 1058 :   if(pParms->bltFlags == 0)

  00000	e5913024	 ldr         r3, [r1, #0x24]
  00004	e3530000	 cmp         r3, #0

; 1059 :   {
; 1060 :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopyXYZ24toXYZx32;

  00008	059f3004	 ldreq       r3, [pc, #4]
  0000c	05813000	 streq       r3, [r1]

; 1061 :   }
; 1062 : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN7@DesignateB@14|
  00014		 |$LN8@DesignateB@14|
  00014	00000000	 DCD         |?EmulatedBlockCopyXYZ24toXYZx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44292|

			 ENDP  ; |?DesignateBltSRCCOPY_BGR24toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_BGR24toBGRA32

	EXPORT	|?DesignateBltSRCCOPY_BGRA32toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toBGRA32

  00000			 AREA	 |.pdata|, PDATA
|$T44304| DCD	|$LN6@DesignateB@15|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_BGRA32toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toBGRA32

; 1065 : {

  00000		 |$LN6@DesignateB@15|
  00000		 |$M44301|

; 1066 :   // Can't handle transparency, alpha, or stretch (yet)
; 1067 :   if(pParms->bltFlags == 0)

  00000	e5913024	 ldr         r3, [r1, #0x24]
  00004	e3530000	 cmp         r3, #0

; 1068 :   {
; 1069 :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockCopy32to32;

  00008	059f3004	 ldreq       r3, [pc, #4]
  0000c	05813000	 streq       r3, [r1]

; 1070 :   }
; 1071 : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN7@DesignateB@15|
  00014		 |$LN8@DesignateB@15|
  00014	00000000	 DCD         |?EmulatedBlockCopy32to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44302|

			 ENDP  ; |?DesignateBltSRCCOPY_BGRA32toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_BGRA32toBGRA32

	EXPORT	|?DesignateBltPATCOPY_solidtoLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_solidtoLUT8

  00000			 AREA	 |.pdata|, PDATA
|$T44314| DCD	|$LN5@DesignateB@16|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltPATCOPY_solidtoLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_solidtoLUT8

; 1123 : {

  00000		 |$LN5@DesignateB@16|
  00000		 |$M44311|

; 1124 :   pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockFill8;

  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5813000	 str         r3, [r1]

; 1125 : }

  00008	e12fff1e	 bx          lr
  0000c		 |$LN6@DesignateB@16|
  0000c		 |$LN7@DesignateB@16|
  0000c	00000000	 DCD         |?EmulatedBlockFill8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00010		 |$M44312|

			 ENDP  ; |?DesignateBltPATCOPY_solidtoLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_solidtoLUT8

	EXPORT	|?DesignateBltPATCOPY_solidtoRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_solidtoRGB16

  00000			 AREA	 |.pdata|, PDATA
|$T44324| DCD	|$LN5@DesignateB@17|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltPATCOPY_solidtoRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_solidtoRGB16

; 1134 : {

  00000		 |$LN5@DesignateB@17|
  00000		 |$M44321|

; 1135 :   pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockFill16;

  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5813000	 str         r3, [r1]

; 1136 : }

  00008	e12fff1e	 bx          lr
  0000c		 |$LN6@DesignateB@17|
  0000c		 |$LN7@DesignateB@17|
  0000c	00000000	 DCD         |?EmulatedBlockFill16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00010		 |$M44322|

			 ENDP  ; |?DesignateBltPATCOPY_solidtoRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_solidtoRGB16

	EXPORT	|?DesignateBltPATCOPY_solidtoBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_solidtoBGR24

  00000			 AREA	 |.pdata|, PDATA
|$T44334| DCD	|$LN5@DesignateB@18|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltPATCOPY_solidtoBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_solidtoBGR24

; 1145 : {

  00000		 |$LN5@DesignateB@18|
  00000		 |$M44331|

; 1146 :   pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockFill24;

  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5813000	 str         r3, [r1]

; 1147 : }

  00008	e12fff1e	 bx          lr
  0000c		 |$LN6@DesignateB@18|
  0000c		 |$LN7@DesignateB@18|
  0000c	00000000	 DCD         |?EmulatedBlockFill24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00010		 |$M44332|

			 ENDP  ; |?DesignateBltPATCOPY_solidtoBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_solidtoBGR24

	EXPORT	|?DesignateBltPATCOPY_solidtoBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_solidtoBGRA32

  00000			 AREA	 |.pdata|, PDATA
|$T44344| DCD	|$LN5@DesignateB@19|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltPATCOPY_solidtoBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_solidtoBGRA32

; 1156 : {

  00000		 |$LN5@DesignateB@19|
  00000		 |$M44341|

; 1157 :   pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedBlockFill32;

  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5813000	 str         r3, [r1]

; 1158 : }

  00008	e12fff1e	 bx          lr
  0000c		 |$LN6@DesignateB@19|
  0000c		 |$LN7@DesignateB@19|
  0000c	00000000	 DCD         |?EmulatedBlockFill32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00010		 |$M44342|

			 ENDP  ; |?DesignateBltPATCOPY_solidtoBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_solidtoBGRA32

	EXPORT	|?DesignateBltAACC_RGB16toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltAACC_RGB16toRGB16

  00000			 AREA	 |.pdata|, PDATA
|$T44354| DCD	|$LN6@DesignateB@20|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltAACC_RGB16toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltAACC_RGB16toRGB16

; 1213 : {

  00000		 |$LN6@DesignateB@20|
  00000		 |$M44351|

; 1214 :   // Can't handle transparency, alpha, or stretch (yet)
; 1215 :   if(pParms->bltFlags == 0)

  00000	e5913024	 ldr         r3, [r1, #0x24]
  00004	e3530000	 cmp         r3, #0

; 1216 :   {
; 1217 :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedMaskCopy16to16withA1;

  00008	059f3004	 ldreq       r3, [pc, #4]
  0000c	05813000	 streq       r3, [r1]

; 1218 :   }
; 1219 : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN7@DesignateB@20|
  00014		 |$LN8@DesignateB@20|
  00014	00000000	 DCD         |?EmulatedMaskCopy16to16withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44352|

			 ENDP  ; |?DesignateBltAACC_RGB16toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltAACC_RGB16toRGB16

	EXPORT	|?DesignateBltAACC_BGRA32toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltAACC_BGRA32toBGRA32

  00000			 AREA	 |.pdata|, PDATA
|$T44364| DCD	|$LN6@DesignateB@21|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltAACC_BGRA32toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltAACC_BGRA32toBGRA32

; 1235 : {

  00000		 |$LN6@DesignateB@21|
  00000		 |$M44361|

; 1236 :   // Can't handle transparency, alpha, or stretch (yet)
; 1237 :   if(pParms->bltFlags == 0)

  00000	e5913024	 ldr         r3, [r1, #0x24]
  00004	e3530000	 cmp         r3, #0

; 1238 :   {
; 1239 :     pParms->pBlt = (BLTFN)&OMAPDDGPE::EmulatedMaskCopy32to32withA1;

  00008	059f3004	 ldreq       r3, [pc, #4]
  0000c	05813000	 streq       r3, [r1]

; 1240 :   }
; 1241 : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN7@DesignateB@21|
  00014		 |$LN8@DesignateB@21|
  00014	00000000	 DCD         |?EmulatedMaskCopy32to32withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44362|

			 ENDP  ; |?DesignateBltAACC_BGRA32toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltAACC_BGRA32toBGRA32

	EXPORT	|?DesignateBltSRCCOPY_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_toRGB16

  00000			 AREA	 |.pdata|, PDATA
|$T44382| DCD	|$LN17@DesignateB@22|
	DCD	0x40000b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_toRGB16

; 880  : {

  00000		 |$LN17@DesignateB@22|
  00000		 |$M44379|

; 881  :   if(pParms->pSrc)

  00000	e5913008	 ldr         r3, [r1, #8]
  00004	e3530000	 cmp         r3, #0
  00008	0a000005	 beq         |$LN12@DesignateB@22|

; 882  :   {
; 883  :     switch(pParms->pSrc->Format())

  0000c	e593301c	 ldr         r3, [r3, #0x1C]
  00010	e3530003	 cmp         r3, #3

; 884  :     {
; 885  :     case gpe8Bpp:
; 886  :       DesignateBltSRCCOPY_LUT8toRGB16(pParms);

  00014	05913024	 ldreq       r3, [r1, #0x24]
  00018	03530000	 cmpeq       r3, #0
  0001c	059f3004	 ldreq       r3, [pc, #4]
  00020	05813000	 streq       r3, [r1]
  00024		 |$LN12@DesignateB@22|

; 887  :       break;
; 888  : 
; 889  :     case gpe16Bpp:
; 890  :       // NEON BLT is broken, throws exception during CETK GDI test
; 891  :       //DesignateBltSRCCOPY_RGB16toRGB16(pParms);
; 892  :       break;
; 893  : 
; 894  :     case gpe24Bpp:
; 895  :       // NEON BLT is broken, throws exception during CETK GDI test
; 896  :       //DesignateBltSRCCOPY_BGR24toRGB16(pParms);
; 897  :       break;
; 898  : 
; 899  :     case gpe32Bpp:
; 900  :       // NEON BLT is broken, causes CETK failures
; 901  :       //DesignateBltSRCCOPY_BGRA32toRGB16(pParms);
; 902  :       break;
; 903  :     }
; 904  :   }
; 905  : }

  00024	e12fff1e	 bx          lr
  00028		 |$LN18@DesignateB@22|
  00028		 |$LN19@DesignateB@22|
  00028	00000000	 DCD         |?EmulatedBlockCopyLUT8to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  0002c		 |$M44380|

			 ENDP  ; |?DesignateBltSRCCOPY_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_toRGB16

	EXPORT	|?DesignateBltSRCCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_toBGR24

  00000			 AREA	 |.pdata|, PDATA
|$T44409| DCD	|$LN24@DesignateB@23|
	DCD	0x40001700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_toBGR24

; 950  : {

  00000		 |$LN24@DesignateB@23|
  00000		 |$M44406|

; 951  :   if(pParms->pSrc)

  00000	e5913008	 ldr         r3, [r1, #8]
  00004	e3530000	 cmp         r3, #0
  00008	0a000010	 beq         |$LN12@DesignateB@23|

; 952  :   {
; 953  :     switch(pParms->pSrc->Format())

  0000c	e593301c	 ldr         r3, [r3, #0x1C]
  00010	e3530003	 cmp         r3, #3
  00014	0a000009	 beq         |$LN4@DesignateB@23|
  00018	e3530005	 cmp         r3, #5
  0001c	0a00000b	 beq         |$LN12@DesignateB@23|
  00020	e3530006	 cmp         r3, #6
  00024	1a000009	 bne         |$LN12@DesignateB@23|

; 957  :       break;
; 958  : 
; 959  :     case gpe16Bpp:
; 960  :       // NEON BLT is broken, fails CETK SimpleColorConversionTest
; 961  :       //DesignateBltSRCCOPY_RGB16toBGR24(pParms);
; 962  :       break;
; 963  : 
; 964  :     case gpe24Bpp:
; 965  :       DesignateBltSRCCOPY_BGR24toBGR24(pParms);
; 966  :       break;
; 967  : 
; 968  :     case gpe32Bpp:
; 969  :       DesignateBltSRCCOPY_BGRA32toBGR24(pParms);

  00028	e5913024	 ldr         r3, [r1, #0x24]
  0002c	e3530000	 cmp         r3, #0
  00030	1a000006	 bne         |$LN12@DesignateB@23|
  00034	e59f301c	 ldr         r3, [pc, #0x1C]

; 954  :     {
; 955  :     case gpe8Bpp:
; 956  :       DesignateBltSRCCOPY_LUT8toBGR24(pParms);

  00038	e5813000	 str         r3, [r1]

; 970  :       break;
; 971  :     }
; 972  :   }
; 973  : }

  0003c	e12fff1e	 bx          lr
  00040		 |$LN4@DesignateB@23|

; 954  :     {
; 955  :     case gpe8Bpp:
; 956  :       DesignateBltSRCCOPY_LUT8toBGR24(pParms);

  00040	e5913024	 ldr         r3, [r1, #0x24]
  00044	e3530000	 cmp         r3, #0
  00048	059f3004	 ldreq       r3, [pc, #4]
  0004c	05813000	 streq       r3, [r1]
  00050		 |$LN12@DesignateB@23|

; 970  :       break;
; 971  :     }
; 972  :   }
; 973  : }

  00050	e12fff1e	 bx          lr
  00054		 |$LN25@DesignateB@23|
  00054		 |$LN26@DesignateB@23|
  00054	00000000	 DCD         |?EmulatedBlockCopyLUT8to24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00058		 |$LN27@DesignateB@23|
  00058	00000000	 DCD         |?EmulatedBlockCopyXYZx32toXYZ24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  0005c		 |$M44407|

			 ENDP  ; |?DesignateBltSRCCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_toBGR24

	EXPORT	|?DesignateBltSRCCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY_toBGRA32

  00000			 AREA	 |.pdata|, PDATA
|$T44441| DCD	|$LN27@DesignateB@24|
	DCD	0x40002700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY_toBGRA32

; 1013 : {

  00000		 |$LN27@DesignateB@24|
  00000		 |$M44438|

; 1014 :   if(pParms->pSrc)

  00000	e5913008	 ldr         r3, [r1, #8]
  00004	e3530000	 cmp         r3, #0
  00008	0a00001e	 beq         |$LN12@DesignateB@24|

; 1015 :   {
; 1016 :     switch(pParms->pSrc->Format())

  0000c	e593301c	 ldr         r3, [r3, #0x1C]
  00010	e3530003	 cmp         r3, #3
  00014	0a000017	 beq         |$LN4@DesignateB@24|
  00018	e3530004	 cmp         r3, #4
  0001c	0a00000f	 beq         |$LN3@DesignateB@24|
  00020	e3530005	 cmp         r3, #5
  00024	0a000007	 beq         |$LN2@DesignateB@24|
  00028	e3530006	 cmp         r3, #6
  0002c	1a000015	 bne         |$LN12@DesignateB@24|

; 1028 :       break;
; 1029 : 
; 1030 :     case gpe32Bpp:
; 1031 :       DesignateBltSRCCOPY_BGRA32toBGRA32(pParms);

  00030	e5913024	 ldr         r3, [r1, #0x24]
  00034	e3530000	 cmp         r3, #0
  00038	1a000012	 bne         |$LN12@DesignateB@24|
  0003c	e59f3054	 ldr         r3, [pc, #0x54]

; 1017 :     {
; 1018 :     case gpe8Bpp:
; 1019 :       DesignateBltSRCCOPY_LUT8toBGRA32(pParms);

  00040	e5813000	 str         r3, [r1]

; 1032 :       break;
; 1033 :     }
; 1034 :   }
; 1035 : }

  00044	e12fff1e	 bx          lr
  00048		 |$LN2@DesignateB@24|

; 1024 :       break;
; 1025 : 
; 1026 :     case gpe24Bpp:
; 1027 :       DesignateBltSRCCOPY_BGR24toBGRA32(pParms);

  00048	e5913024	 ldr         r3, [r1, #0x24]
  0004c	e3530000	 cmp         r3, #0
  00050	1a00000c	 bne         |$LN12@DesignateB@24|
  00054	e59f3038	 ldr         r3, [pc, #0x38]

; 1017 :     {
; 1018 :     case gpe8Bpp:
; 1019 :       DesignateBltSRCCOPY_LUT8toBGRA32(pParms);

  00058	e5813000	 str         r3, [r1]

; 1032 :       break;
; 1033 :     }
; 1034 :   }
; 1035 : }

  0005c	e12fff1e	 bx          lr
  00060		 |$LN3@DesignateB@24|

; 1020 :       break;
; 1021 : 
; 1022 :     case gpe16Bpp:
; 1023 :       DesignateBltSRCCOPY_RGB16toBGRA32(pParms);

  00060	e5913024	 ldr         r3, [r1, #0x24]
  00064	e3530000	 cmp         r3, #0
  00068	1a000006	 bne         |$LN12@DesignateB@24|
  0006c	e59f301c	 ldr         r3, [pc, #0x1C]

; 1017 :     {
; 1018 :     case gpe8Bpp:
; 1019 :       DesignateBltSRCCOPY_LUT8toBGRA32(pParms);

  00070	e5813000	 str         r3, [r1]

; 1032 :       break;
; 1033 :     }
; 1034 :   }
; 1035 : }

  00074	e12fff1e	 bx          lr
  00078		 |$LN4@DesignateB@24|

; 1017 :     {
; 1018 :     case gpe8Bpp:
; 1019 :       DesignateBltSRCCOPY_LUT8toBGRA32(pParms);

  00078	e5913024	 ldr         r3, [r1, #0x24]
  0007c	e3530000	 cmp         r3, #0
  00080	059f3004	 ldreq       r3, [pc, #4]
  00084	05813000	 streq       r3, [r1]
  00088		 |$LN12@DesignateB@24|

; 1032 :       break;
; 1033 :     }
; 1034 :   }
; 1035 : }

  00088	e12fff1e	 bx          lr
  0008c		 |$LN28@DesignateB@24|
  0008c		 |$LN29@DesignateB@24|
  0008c	00000000	 DCD         |?EmulatedBlockCopyLUT8to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00090		 |$LN30@DesignateB@24|
  00090	00000000	 DCD         |?EmulatedBlockCopyRGB16toBGRx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00094		 |$LN31@DesignateB@24|
  00094	00000000	 DCD         |?EmulatedBlockCopyXYZ24toXYZx32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00098		 |$LN32@DesignateB@24|
  00098	00000000	 DCD         |?EmulatedBlockCopy32to32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  0009c		 |$M44439|

			 ENDP  ; |?DesignateBltSRCCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY_toBGRA32

	EXPORT	|?DesignateBltPATCOPY_toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_toLUT8

  00000			 AREA	 |.pdata|, PDATA
|$T44457| DCD	|$LN8@DesignateB@25|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltPATCOPY_toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_toLUT8

; 1117 : {

  00000		 |$LN8@DesignateB@25|
  00000		 |$M44454|

; 1118 :   if(pParms->solidColor != -1)

  00000	e5913020	 ldr         r3, [r1, #0x20]
  00004	e3730001	 cmn         r3, #1

; 1119 :     DesignateBltPATCOPY_solidtoLUT8(pParms);

  00008	159f3004	 ldrne       r3, [pc, #4]
  0000c	15813000	 strne       r3, [r1]

; 1120 : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN9@DesignateB@25|
  00014		 |$LN10@DesignateB@25|
  00014	00000000	 DCD         |?EmulatedBlockFill8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44455|

			 ENDP  ; |?DesignateBltPATCOPY_toLUT8@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_toLUT8

	EXPORT	|?DesignateBltPATCOPY_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_toRGB16

  00000			 AREA	 |.pdata|, PDATA
|$T44470| DCD	|$LN8@DesignateB@26|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltPATCOPY_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_toRGB16

; 1128 : {

  00000		 |$LN8@DesignateB@26|
  00000		 |$M44467|

; 1129 :   if(pParms->solidColor != -1)

  00000	e5913020	 ldr         r3, [r1, #0x20]
  00004	e3730001	 cmn         r3, #1

; 1130 :     DesignateBltPATCOPY_solidtoRGB16(pParms);

  00008	159f3004	 ldrne       r3, [pc, #4]
  0000c	15813000	 strne       r3, [r1]

; 1131 : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN9@DesignateB@26|
  00014		 |$LN10@DesignateB@26|
  00014	00000000	 DCD         |?EmulatedBlockFill16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44468|

			 ENDP  ; |?DesignateBltPATCOPY_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_toRGB16

	EXPORT	|?DesignateBltPATCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_toBGR24

  00000			 AREA	 |.pdata|, PDATA
|$T44483| DCD	|$LN8@DesignateB@27|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltPATCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_toBGR24

; 1139 : {

  00000		 |$LN8@DesignateB@27|
  00000		 |$M44480|

; 1140 :   if(pParms->solidColor != -1)

  00000	e5913020	 ldr         r3, [r1, #0x20]
  00004	e3730001	 cmn         r3, #1

; 1141 :     DesignateBltPATCOPY_solidtoBGR24(pParms);

  00008	159f3004	 ldrne       r3, [pc, #4]
  0000c	15813000	 strne       r3, [r1]

; 1142 : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN9@DesignateB@27|
  00014		 |$LN10@DesignateB@27|
  00014	00000000	 DCD         |?EmulatedBlockFill24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44481|

			 ENDP  ; |?DesignateBltPATCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_toBGR24

	EXPORT	|?DesignateBltPATCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY_toBGRA32

  00000			 AREA	 |.pdata|, PDATA
|$T44496| DCD	|$LN8@DesignateB@28|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltPATCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY_toBGRA32

; 1150 : {

  00000		 |$LN8@DesignateB@28|
  00000		 |$M44493|

; 1151 :   if(pParms->solidColor != -1)

  00000	e5913020	 ldr         r3, [r1, #0x20]
  00004	e3730001	 cmn         r3, #1

; 1152 :     DesignateBltPATCOPY_solidtoBGRA32(pParms);

  00008	159f3004	 ldrne       r3, [pc, #4]
  0000c	15813000	 strne       r3, [r1]

; 1153 : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN9@DesignateB@28|
  00014		 |$LN10@DesignateB@28|
  00014	00000000	 DCD         |?EmulatedBlockFill32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00018		 |$M44494|

			 ENDP  ; |?DesignateBltPATCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY_toBGRA32

	EXPORT	|?DesignateBltAACC_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltAACC_toRGB16

  00000			 AREA	 |.pdata|, PDATA
|$T44514| DCD	|$LN14@DesignateB@29|
	DCD	0x40000b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltAACC_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltAACC_toRGB16

; 1200 : {

  00000		 |$LN14@DesignateB@29|
  00000		 |$M44511|

; 1201 :   if(pParms->pSrc)

  00000	e5913008	 ldr         r3, [r1, #8]
  00004	e3530000	 cmp         r3, #0
  00008	0a000005	 beq         |$LN9@DesignateB@29|

; 1202 :   {
; 1203 :     switch(pParms->pSrc->Format())

  0000c	e593301c	 ldr         r3, [r3, #0x1C]
  00010	e3530004	 cmp         r3, #4

; 1204 :     {
; 1205 :     case gpe16Bpp:
; 1206 :        DesignateBltAACC_RGB16toRGB16(pParms);

  00014	05913024	 ldreq       r3, [r1, #0x24]
  00018	03530000	 cmpeq       r3, #0
  0001c	059f3004	 ldreq       r3, [pc, #4]
  00020	05813000	 streq       r3, [r1]
  00024		 |$LN9@DesignateB@29|

; 1207 :        break;
; 1208 :     }
; 1209 :   }
; 1210 : }

  00024	e12fff1e	 bx          lr
  00028		 |$LN15@DesignateB@29|
  00028		 |$LN16@DesignateB@29|
  00028	00000000	 DCD         |?EmulatedMaskCopy16to16withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  0002c		 |$M44512|

			 ENDP  ; |?DesignateBltAACC_toRGB16@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltAACC_toRGB16

	EXPORT	|?DesignateBltAACC_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltAACC_toBGRA32

  00000			 AREA	 |.pdata|, PDATA
|$T44532| DCD	|$LN14@DesignateB@30|
	DCD	0x40000b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltAACC_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltAACC_toBGRA32

; 1222 : {

  00000		 |$LN14@DesignateB@30|
  00000		 |$M44529|

; 1223 :   if(pParms->pSrc)

  00000	e5913008	 ldr         r3, [r1, #8]
  00004	e3530000	 cmp         r3, #0
  00008	0a000005	 beq         |$LN9@DesignateB@30|

; 1224 :   {
; 1225 :     switch(pParms->pSrc->Format())

  0000c	e593301c	 ldr         r3, [r3, #0x1C]
  00010	e3530006	 cmp         r3, #6

; 1226 :     {
; 1227 :     case gpe32Bpp:
; 1228 :        DesignateBltAACC_BGRA32toBGRA32(pParms);

  00014	05913024	 ldreq       r3, [r1, #0x24]
  00018	03530000	 cmpeq       r3, #0
  0001c	059f3004	 ldreq       r3, [pc, #4]
  00020	05813000	 streq       r3, [r1]
  00024		 |$LN9@DesignateB@30|

; 1229 :        break;
; 1230 :     }
; 1231 :   }
; 1232 : }

  00024	e12fff1e	 bx          lr
  00028		 |$LN15@DesignateB@30|
  00028		 |$LN16@DesignateB@30|
  00028	00000000	 DCD         |?EmulatedMaskCopy32to32withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  0002c		 |$M44530|

			 ENDP  ; |?DesignateBltAACC_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltAACC_toBGRA32

	EXPORT	|?DesignateBltSRCCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltSRCCOPY
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T44602| DCD	|$LN48@DesignateB@31|
	DCD	0x40002901
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_optblt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltSRCCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltSRCCOPY

; 826  : {

  00000		 |$LN48@DesignateB@31|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M44599|

; 827  :   switch(pParms->pDst->Format())

  00004	e5912004	 ldr         r2, [r1, #4]
  00008	e592301c	 ldr         r3, [r2, #0x1C]
  0000c	e3530003	 cmp         r3, #3
  00010	0a000020	 beq         |$LN35@DesignateB@31|
  00014	e3530004	 cmp         r3, #4
  00018	0a000015	 beq         |$LN5@DesignateB@31|
  0001c	e3530005	 cmp         r3, #5
  00020	0a00000a	 beq         |$LN4@DesignateB@31|
  00024	e3530006	 cmp         r3, #6
  00028	1a00001a	 bne         |$LN35@DesignateB@31|

; 843  :         }
; 844  :     break;
; 845  : 
; 846  :   case gpe32Bpp:
; 847  :     if( pParms->pDst->FormatPtr()->m_pPalette != NULL &&
; 848  :         pParms->pDst->FormatPtr()->m_pPalette[0] == 0x00ff0000 )

  0002c	e592300c	 ldr         r3, [r2, #0xC]
  00030	e3530000	 cmp         r3, #0
  00034	0a000017	 beq         |$LN35@DesignateB@31|
  00038	e5933000	 ldr         r3, [r3]
  0003c	e35308ff	 cmp         r3, #0xFF, 16
  00040	1a000014	 bne         |$LN35@DesignateB@31|

; 849  :         { 
; 850  :         DesignateBltSRCCOPY_toBGRA32(pParms);

  00044	eb000000	 bl          |?DesignateBltSRCCOPY_toBGRA32@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|

; 851  :         }
; 852  :     break;
; 853  :   }
; 854  : }

  00048	e49de004	 ldr         lr, [sp], #4
  0004c	e12fff1e	 bx          lr
  00050		 |$LN4@DesignateB@31|

; 835  :     break;
; 836  : 
; 837  :   case gpe24Bpp:
; 838  :     // Check for RGB24 vs BGR24
; 839  :     if( pParms->pDst->FormatPtr()->m_pPalette != NULL &&
; 840  :         pParms->pDst->FormatPtr()->m_pPalette[0] == 0x00ff0000 )

  00050	e592300c	 ldr         r3, [r2, #0xC]
  00054	e3530000	 cmp         r3, #0
  00058	0a00000e	 beq         |$LN35@DesignateB@31|
  0005c	e5933000	 ldr         r3, [r3]
  00060	e35308ff	 cmp         r3, #0xFF, 16
  00064	1a00000b	 bne         |$LN35@DesignateB@31|

; 841  :         { 
; 842  :         DesignateBltSRCCOPY_toBGR24(pParms);

  00068	eb000000	 bl          |?DesignateBltSRCCOPY_toBGR24@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|

; 851  :         }
; 852  :     break;
; 853  :   }
; 854  : }

  0006c	e49de004	 ldr         lr, [sp], #4
  00070	e12fff1e	 bx          lr
  00074		 |$LN5@DesignateB@31|

; 828  :   {
; 829  :   case gpe8Bpp:
; 830  :     DesignateBltSRCCOPY_toLUT8(pParms);
; 831  :     break;
; 832  : 
; 833  :   case gpe16Bpp:
; 834  :     DesignateBltSRCCOPY_toRGB16(pParms);

  00074	e5913008	 ldr         r3, [r1, #8]
  00078	e3530000	 cmp         r3, #0
  0007c	0a000005	 beq         |$LN35@DesignateB@31|
  00080	e593301c	 ldr         r3, [r3, #0x1C]
  00084	e3530003	 cmp         r3, #3
  00088	05913024	 ldreq       r3, [r1, #0x24]
  0008c	03530000	 cmpeq       r3, #0
  00090	059f3008	 ldreq       r3, [pc, #8]
  00094	05813000	 streq       r3, [r1]
  00098		 |$LN35@DesignateB@31|

; 851  :         }
; 852  :     break;
; 853  :   }
; 854  : }

  00098	e49de004	 ldr         lr, [sp], #4
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN49@DesignateB@31|
  000a0		 |$LN50@DesignateB@31|
  000a0	00000000	 DCD         |?EmulatedBlockCopyLUT8to16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  000a4		 |$M44600|

			 ENDP  ; |?DesignateBltSRCCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltSRCCOPY

	EXPORT	|?DesignateBltPATCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltPATCOPY

  00000			 AREA	 |.pdata|, PDATA
|$T44653| DCD	|$LN34@DesignateB@32|
	DCD	0x40002500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltPATCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltPATCOPY

; 1095 : {

  00000		 |$LN34@DesignateB@32|
  00000		 |$M44650|

; 1096 :   switch(pParms->pDst->Format())

  00000	e5913004	 ldr         r3, [r1, #4]
  00004	e593301c	 ldr         r3, [r3, #0x1C]
  00008	e3530003	 cmp         r3, #3
  0000c	0a000017	 beq         |$LN4@DesignateB@32|
  00010	e3530004	 cmp         r3, #4
  00014	0a00000f	 beq         |$LN3@DesignateB@32|
  00018	e3530005	 cmp         r3, #5
  0001c	0a000007	 beq         |$LN2@DesignateB@32|
  00020	e3530006	 cmp         r3, #6
  00024	1a000015	 bne         |$LN14@DesignateB@32|

; 1108 :     break;
; 1109 : 
; 1110 :   case gpe32Bpp:
; 1111 :     DesignateBltPATCOPY_toBGRA32(pParms);

  00028	e5913020	 ldr         r3, [r1, #0x20]
  0002c	e3730001	 cmn         r3, #1
  00030	0a000012	 beq         |$LN14@DesignateB@32|
  00034	e59f3054	 ldr         r3, [pc, #0x54]

; 1097 :   {
; 1098 :   case gpe8Bpp:
; 1099 :     DesignateBltPATCOPY_toLUT8(pParms);

  00038	e5813000	 str         r3, [r1]

; 1112 :     break;
; 1113 :   }
; 1114 : }

  0003c	e12fff1e	 bx          lr
  00040		 |$LN2@DesignateB@32|

; 1104 :     break;
; 1105 : 
; 1106 :   case gpe24Bpp:
; 1107 :     DesignateBltPATCOPY_toBGR24(pParms);

  00040	e5913020	 ldr         r3, [r1, #0x20]
  00044	e3730001	 cmn         r3, #1
  00048	0a00000c	 beq         |$LN14@DesignateB@32|
  0004c	e59f3038	 ldr         r3, [pc, #0x38]

; 1097 :   {
; 1098 :   case gpe8Bpp:
; 1099 :     DesignateBltPATCOPY_toLUT8(pParms);

  00050	e5813000	 str         r3, [r1]

; 1112 :     break;
; 1113 :   }
; 1114 : }

  00054	e12fff1e	 bx          lr
  00058		 |$LN3@DesignateB@32|

; 1100 :     break;
; 1101 : 
; 1102 :   case gpe16Bpp:
; 1103 :     DesignateBltPATCOPY_toRGB16(pParms);

  00058	e5913020	 ldr         r3, [r1, #0x20]
  0005c	e3730001	 cmn         r3, #1
  00060	0a000006	 beq         |$LN14@DesignateB@32|
  00064	e59f301c	 ldr         r3, [pc, #0x1C]

; 1097 :   {
; 1098 :   case gpe8Bpp:
; 1099 :     DesignateBltPATCOPY_toLUT8(pParms);

  00068	e5813000	 str         r3, [r1]

; 1112 :     break;
; 1113 :   }
; 1114 : }

  0006c	e12fff1e	 bx          lr
  00070		 |$LN4@DesignateB@32|

; 1097 :   {
; 1098 :   case gpe8Bpp:
; 1099 :     DesignateBltPATCOPY_toLUT8(pParms);

  00070	e5913020	 ldr         r3, [r1, #0x20]
  00074	e3730001	 cmn         r3, #1
  00078	159f3004	 ldrne       r3, [pc, #4]
  0007c	15813000	 strne       r3, [r1]
  00080		 |$LN14@DesignateB@32|

; 1112 :     break;
; 1113 :   }
; 1114 : }

  00080	e12fff1e	 bx          lr
  00084		 |$LN35@DesignateB@32|
  00084		 |$LN36@DesignateB@32|
  00084	00000000	 DCD         |?EmulatedBlockFill8@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00088		 |$LN37@DesignateB@32|
  00088	00000000	 DCD         |?EmulatedBlockFill16@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  0008c		 |$LN38@DesignateB@32|
  0008c	00000000	 DCD         |?EmulatedBlockFill24@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00090		 |$LN39@DesignateB@32|
  00090	00000000	 DCD         |?EmulatedBlockFill32@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00094		 |$M44651|

			 ENDP  ; |?DesignateBltPATCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltPATCOPY

	EXPORT	|?DesignateBltAACC@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBltAACC

  00000			 AREA	 |.pdata|, PDATA
|$T44711| DCD	|$LN34@DesignateB@33|
	DCD	0x40001e00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltAACC@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBltAACC

; 1186 : {

  00000		 |$LN34@DesignateB@33|
  00000		 |$M44708|

; 1187 :   switch(pParms->pDst->Format())

  00000	e5913004	 ldr         r3, [r1, #4]
  00004	e593301c	 ldr         r3, [r3, #0x1C]
  00008	e3530004	 cmp         r3, #4
  0000c	0a00000d	 beq         |$LN2@DesignateB@33|
  00010	e3530006	 cmp         r3, #6
  00014	1a000014	 bne         |$LN17@DesignateB@33|

; 1191 :      break;
; 1192 :      
; 1193 :   case gpe32Bpp:
; 1194 :      DesignateBltAACC_toBGRA32(pParms);

  00018	e5913008	 ldr         r3, [r1, #8]
  0001c	e3530000	 cmp         r3, #0
  00020	0a000011	 beq         |$LN17@DesignateB@33|
  00024	e593301c	 ldr         r3, [r3, #0x1C]
  00028	e3530006	 cmp         r3, #6
  0002c	1a00000e	 bne         |$LN17@DesignateB@33|
  00030	e5913024	 ldr         r3, [r1, #0x24]
  00034	e3530000	 cmp         r3, #0
  00038	1a00000b	 bne         |$LN17@DesignateB@33|
  0003c	e59f3030	 ldr         r3, [pc, #0x30]

; 1188 :   {
; 1189 :   case gpe16Bpp:
; 1190 :      DesignateBltAACC_toRGB16(pParms);

  00040	e5813000	 str         r3, [r1]

; 1195 :      break;
; 1196 :   }
; 1197 : }

  00044	e12fff1e	 bx          lr
  00048		 |$LN2@DesignateB@33|

; 1188 :   {
; 1189 :   case gpe16Bpp:
; 1190 :      DesignateBltAACC_toRGB16(pParms);

  00048	e5913008	 ldr         r3, [r1, #8]
  0004c	e3530000	 cmp         r3, #0
  00050	0a000005	 beq         |$LN17@DesignateB@33|
  00054	e593301c	 ldr         r3, [r3, #0x1C]
  00058	e3530004	 cmp         r3, #4
  0005c	05913024	 ldreq       r3, [r1, #0x24]
  00060	03530000	 cmpeq       r3, #0
  00064	059f3004	 ldreq       r3, [pc, #4]
  00068	05813000	 streq       r3, [r1]
  0006c		 |$LN17@DesignateB@33|

; 1195 :      break;
; 1196 :   }
; 1197 : }

  0006c	e12fff1e	 bx          lr
  00070		 |$LN35@DesignateB@33|
  00070		 |$LN36@DesignateB@33|
  00070	00000000	 DCD         |?EmulatedMaskCopy16to16withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00074		 |$LN37@DesignateB@33|
  00074	00000000	 DCD         |?EmulatedMaskCopy32to32withA1@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  00078		 |$M44709|

			 ENDP  ; |?DesignateBltAACC@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBltAACC

	EXPORT	|?DesignateBltROP2@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| ; OMAPDDGPE::DesignateBltROP2
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T44726| DCD	|$LN10@DesignateB@34|
	DCD	0x40002402
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltROP2@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| PROC ; OMAPDDGPE::DesignateBltROP2

; 807  : {

  00000		 |$LN10@DesignateB@34|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd058	 sub         sp, sp, #0x58
  00008		 |$M44723|
  00008	e1a07002	 mov         r7, r2
  0000c	e1a05001	 mov         r5, r1
  00010	e1a06000	 mov         r6, r0

; 808  :   GPEBltParms parms = *pParms;

  00014	e28d0000	 add         r0, sp, #0
  00018	e3a02058	 mov         r2, #0x58
  0001c	eb000000	 bl          memcpy

; 809  :   if(!(parms.bltFlags & BLT_STRETCH))

  00020	e59d3024	 ldr         r3, [sp, #0x24]
  00024	e59d4014	 ldr         r4, [sp, #0x14]
  00028	e3130008	 tst         r3, #8

; 810  :     ClipNoScale(parms.prclDst, parms.prclSrc, parms.prclClip);

  0002c	059d201c	 ldreq       r2, [sp, #0x1C]
  00030	059d1018	 ldreq       r1, [sp, #0x18]
  00034	01a00004	 moveq       r0, r4
  00038	0b000000	 bleq        |?ClipNoScale@@YAXPAU_RECTL@@0PBU1@@Z|

; 811  :   
; 812  :   if(((parms.prclDst->right - parms.prclDst->left) > 0) &&
; 813  :      ((parms.prclDst->bottom - parms.prclDst->top) > 0))

  0003c	e594e008	 ldr         lr, [r4, #8]
  00040	e5943000	 ldr         r3, [r4]
  00044	e04e3003	 sub         r3, lr, r3
  00048	e3530000	 cmp         r3, #0
  0004c	da00000a	 ble         |$LN2@DesignateB@34|
  00050	e594200c	 ldr         r2, [r4, #0xC]
  00054	e5943004	 ldr         r3, [r4, #4]
  00058	e0423003	 sub         r3, r2, r3
  0005c	e3530000	 cmp         r3, #0
  00060	da000005	 ble         |$LN2@DesignateB@34|
  00064	e3a03b33	 mov         r3, #0x33, 22

; 814  :   {
; 815  :     switch(rop2)

  00068	e38330cc	 orr         r3, r3, #0xCC
  0006c	e1570003	 cmp         r7, r3

; 816  :     {
; 817  :     case 0xCCCC:  // SRCCOPY
; 818  :       DesignateBltSRCCOPY(&parms);

  00070	028d1000	 addeq       r1, sp, #0
  00074	01a00006	 moveq       r0, r6
  00078	0b000000	 bleq        |?DesignateBltSRCCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  0007c		 |$LN2@DesignateB@34|

; 819  :       break;
; 820  :     }
; 821  :   }
; 822  :   pParms->pBlt = parms.pBlt;

  0007c	e59d3000	 ldr         r3, [sp]
  00080	e5853000	 str         r3, [r5]

; 823  : }

  00084	e28dd058	 add         sp, sp, #0x58
  00088	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$M44724|

			 ENDP  ; |?DesignateBltROP2@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z|, OMAPDDGPE::DesignateBltROP2

	EXPORT	|?DesignateBltROP3@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| ; OMAPDDGPE::DesignateBltROP3

  00000			 AREA	 |.pdata|, PDATA
|$T44737| DCD	|$LN10@DesignateB@35|
	DCD	0x40002502
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltROP3@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| PROC ; OMAPDDGPE::DesignateBltROP3

; 1076 : {

  00000		 |$LN10@DesignateB@35|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd058	 sub         sp, sp, #0x58
  00008		 |$M44734|
  00008	e1a07002	 mov         r7, r2
  0000c	e1a05001	 mov         r5, r1
  00010	e1a06000	 mov         r6, r0

; 1077 :   GPEBltParms parms = *pParms;

  00014	e28d0000	 add         r0, sp, #0
  00018	e3a02058	 mov         r2, #0x58
  0001c	eb000000	 bl          memcpy

; 1078 :   if(!(parms.bltFlags & BLT_STRETCH))

  00020	e59d3024	 ldr         r3, [sp, #0x24]
  00024	e59d4014	 ldr         r4, [sp, #0x14]
  00028	e3130008	 tst         r3, #8

; 1079 :     ClipNoScale(parms.prclDst, parms.prclSrc, parms.pptlBrush, parms.prclClip);

  0002c	059d301c	 ldreq       r3, [sp, #0x1C]
  00030	059d2030	 ldreq       r2, [sp, #0x30]
  00034	059d1018	 ldreq       r1, [sp, #0x18]
  00038	01a00004	 moveq       r0, r4
  0003c	0b000000	 bleq        |?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@PBU1@@Z|

; 1080 :   
; 1081 :   if(((parms.prclDst->right - parms.prclDst->left) > 0) &&
; 1082 :      ((parms.prclDst->bottom - parms.prclDst->top) > 0))

  00040	e594e008	 ldr         lr, [r4, #8]
  00044	e5943000	 ldr         r3, [r4]
  00048	e04e3003	 sub         r3, lr, r3
  0004c	e3530000	 cmp         r3, #0
  00050	da00000a	 ble         |$LN2@DesignateB@35|
  00054	e594200c	 ldr         r2, [r4, #0xC]
  00058	e5943004	 ldr         r3, [r4, #4]
  0005c	e0423003	 sub         r3, r2, r3
  00060	e3530000	 cmp         r3, #0
  00064	da000005	 ble         |$LN2@DesignateB@35|
  00068	e3a03a0f	 mov         r3, #0xF, 20

; 1083 :   {
; 1084 :     switch(rop3)

  0006c	e38330f0	 orr         r3, r3, #0xF0
  00070	e1570003	 cmp         r7, r3

; 1085 :     {
; 1086 :     case 0xF0F0:  // PATCOPY
; 1087 :       DesignateBltPATCOPY(&parms);

  00074	028d1000	 addeq       r1, sp, #0
  00078	01a00006	 moveq       r0, r6
  0007c	0b000000	 bleq        |?DesignateBltPATCOPY@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  00080		 |$LN2@DesignateB@35|

; 1088 :       break;
; 1089 :     }
; 1090 :   }
; 1091 :   pParms->pBlt = parms.pBlt;

  00080	e59d3000	 ldr         r3, [sp]
  00084	e5853000	 str         r3, [r5]

; 1092 : }

  00088	e28dd058	 add         sp, sp, #0x58
  0008c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$M44735|

			 ENDP  ; |?DesignateBltROP3@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z|, OMAPDDGPE::DesignateBltROP3

	EXPORT	|?DesignateBltROP4@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| ; OMAPDDGPE::DesignateBltROP4

  00000			 AREA	 |.pdata|, PDATA
|$T44748| DCD	|$LN10@DesignateB@36|
	DCD	0x40002702
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBltROP4@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z| PROC ; OMAPDDGPE::DesignateBltROP4

; 1163 : {

  00000		 |$LN10@DesignateB@36|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd05c	 sub         sp, sp, #0x5C
  00008		 |$M44745|
  00008	e1a07002	 mov         r7, r2
  0000c	e1a05001	 mov         r5, r1
  00010	e1a06000	 mov         r6, r0

; 1164 : #if 0
; 1165 :   RETAILMSG(1, (TEXT("****** BLT ******\n")));
; 1166 :   DumpParms(pParms);
; 1167 : #endif
; 1168 :   GPEBltParms parms = *pParms;

  00014	e28d0004	 add         r0, sp, #4
  00018	e3a02058	 mov         r2, #0x58
  0001c	eb000000	 bl          memcpy

; 1169 :   if(!(parms.bltFlags & BLT_STRETCH))

  00020	e59d3028	 ldr         r3, [sp, #0x28]
  00024	e59d4018	 ldr         r4, [sp, #0x18]
  00028	e3130008	 tst         r3, #8

; 1170 :     ClipNoScale(parms.prclDst, parms.prclSrc, parms.pptlBrush, parms.prclMask, parms.prclClip);

  0002c	059de020	 ldreq       lr, [sp, #0x20]
  00030	059d3030	 ldreq       r3, [sp, #0x30]
  00034	059d2034	 ldreq       r2, [sp, #0x34]
  00038	059d101c	 ldreq       r1, [sp, #0x1C]
  0003c	01a00004	 moveq       r0, r4
  00040	058de000	 streq       lr, [sp]
  00044	0b000000	 bleq        |?ClipNoScale@@YAXPAU_RECTL@@0PAU_POINTL@@0PBU1@@Z|

; 1171 :   
; 1172 :   if(((parms.prclDst->right - parms.prclDst->left) > 0) &&
; 1173 :      ((parms.prclDst->bottom - parms.prclDst->top) > 0))

  00048	e594e008	 ldr         lr, [r4, #8]
  0004c	e5943000	 ldr         r3, [r4]
  00050	e04e3003	 sub         r3, lr, r3
  00054	e3530000	 cmp         r3, #0
  00058	da00000a	 ble         |$LN2@DesignateB@36|
  0005c	e594200c	 ldr         r2, [r4, #0xC]
  00060	e5943004	 ldr         r3, [r4, #4]
  00064	e0423003	 sub         r3, r2, r3
  00068	e3530000	 cmp         r3, #0
  0006c	da000005	 ble         |$LN2@DesignateB@36|
  00070	e3a03caa	 mov         r3, #0xAA, 24

; 1174 :   {
; 1175 :     switch(rop4)

  00074	e38330cc	 orr         r3, r3, #0xCC
  00078	e1570003	 cmp         r7, r3

; 1176 :     {
; 1177 :     case 0xAACC:  // Masked copy
; 1178 :       DesignateBltAACC(&parms);

  0007c	028d1004	 addeq       r1, sp, #4
  00080	01a00006	 moveq       r0, r6
  00084	0b000000	 bleq        |?DesignateBltAACC@OMAPDDGPE@@QAAXPAUGPEBltParms@@@Z|
  00088		 |$LN2@DesignateB@36|

; 1179 :       break;
; 1180 :     }
; 1181 :   }
; 1182 :   pParms->pBlt = parms.pBlt;

  00088	e59d3004	 ldr         r3, [sp, #4]
  0008c	e5853000	 str         r3, [r5]

; 1183 : }

  00090	e28dd05c	 add         sp, sp, #0x5C
  00094	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$M44746|

			 ENDP  ; |?DesignateBltROP4@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z|, OMAPDDGPE::DesignateBltROP4

	EXPORT	|?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBlt

  00000			 AREA	 |.pdata|, PDATA
|$T44767| DCD	|$LN13@DesignateB@37|
	DCD	0x40001e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::DesignateBlt

; 662  : {

  00000		 |$LN13@DesignateB@37|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M44764|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0

; 663  : #if 0
; 664  :   RETAILMSG(1, (TEXT("****** BLT ******\n")));
; 665  :   DumpParms(pParms);
; 666  : #endif
; 667  : 
; 668  :   BLTFN pfnSavedBlt = pParms->pBlt;
; 669  : 
; 670  :   // Default to base emulated routine
; 671  :   pParms->pBlt = &GPE::EmulatedBlt;
; 672  : 
; 673  :   ROP4 rop4 = pParms->rop4;

  0000c	e5942028	 ldr         r2, [r4, #0x28]
  00010	e59f305c	 ldr         r3, [pc, #0x5C]
  00014	e5946000	 ldr         r6, [r4]

; 674  : 
; 675  :   ROP4 rop3 = rop4 & 0xFF;

  00018	e202e0ff	 and         lr, r2, #0xFF

; 676  :   if((rop4 >> 8) != rop3)

  0001c	e15e0422	 cmp         lr, r2, lsr #8
  00020	e5843000	 str         r3, [r4]
  00024	1a00000a	 bne         |$LN2@DesignateB@37|

; 677  :   {
; 678  :     // NEON BLT is broken, fails CETK GDI Interface test MaskBlt (208)
; 679  :     //DesignateBltROP4(pParms, rop4);
; 680  :   }
; 681  :   else
; 682  :   {
; 683  :     ROP4 rop2 = rop3 & 0xF;

  00028	e20e100f	 and         r1, lr, #0xF

; 684  :     if((rop3 >> 4) != rop2)

  0002c	e151022e	 cmp         r1, lr, lsr #4
  00030	0a000002	 beq         |$LN4@DesignateB@37|

; 685  :     {
; 686  :       DesignateBltROP3(pParms, rop4);

  00034	e1a01004	 mov         r1, r4
  00038	eb000000	 bl          |?DesignateBltROP3@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z|

; 687  :     }
; 688  :     else

  0003c	ea000004	 b           |$LN2@DesignateB@37|
  00040		 |$LN4@DesignateB@37|

; 689  :     {
; 690  :       ROP4 rop1 = rop2 & 0x3;

  00040	e2013003	 and         r3, r1, #3

; 691  :       if((rop2 >> 2) != rop1)

  00044	e1530121	 cmp         r3, r1, lsr #2

; 692  :       {
; 693  :         DesignateBltROP2(pParms, rop4);

  00048	11a01004	 movne       r1, r4
  0004c	11a00005	 movne       r0, r5
  00050	1b000000	 blne        |?DesignateBltROP2@OMAPDDGPE@@QAAXPAUGPEBltParms@@K@Z|
  00054		 |$LN2@DesignateB@37|

; 694  :       }
; 695  :       else
; 696  :       {
; 697  :         DesignateBltROP1(pParms, rop4);
; 698  :       }
; 699  :     }
; 700  :   }
; 701  : 
; 702  : #if DEBUG_NEON_MEMORY_LEAK
; 703  :   BLTFN pNeonBlt;
; 704  : 
; 705  :   if (pParms->pBlt != &GPE::EmulatedBlt)
; 706  :   {
; 707  :     m_MemoryStatusBefore.dwLength = sizeof(MEMORYSTATUS);
; 708  :     GlobalMemoryStatus(&m_MemoryStatusBefore);
; 709  :     m_bNeonBlt = TRUE;
; 710  :     pNeonBlt = pParms->pBlt;
; 711  :   }
; 712  : #endif
; 713  : 
; 714  :   // Do the BLT here
; 715  :   SCODE scode = (this->*(pParms->pBlt))(pParms);

  00054	e5943000	 ldr         r3, [r4]
  00058	e1a01004	 mov         r1, r4
  0005c	e1a00005	 mov         r0, r5
  00060	e1a0e00f	 mov         lr, pc
  00064	e12fff13	 bx          r3

; 716  : 
; 717  : #if DEBUG_NEON_MEMORY_LEAK
; 718  :   if (m_bNeonBlt)
; 719  :   {
; 720  :     m_bNeonBlt = FALSE;
; 721  : 
; 722  :     m_MemoryStatusAfter.dwLength = sizeof(MEMORYSTATUS);
; 723  :     GlobalMemoryStatus(&m_MemoryStatusAfter);
; 724  : 
; 725  :     m_dwAvailPhysDelta = m_MemoryStatusAfter.dwAvailPhys - m_MemoryStatusBefore.dwAvailPhys;
; 726  : 	m_dwAvailPageFileDelta = m_MemoryStatusAfter.dwAvailPageFile - m_MemoryStatusBefore.dwAvailPageFile;
; 727  : 
; 728  :     if (m_dwAvailPhysDelta || m_dwAvailPageFileDelta)
; 729  : 	{
; 730  :       TCHAR *pszBltName;
; 731  : 
; 732  :       if (pNeonBlt == &OMAPDDGPE::EmulatedBlockFill8)
; 733  :           pszBltName = L"EmulatedBlockFill8";
; 734  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopy8to8)
; 735  :           pszBltName = L"EmulatedBlockCopy8to8";
; 736  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockFill16)
; 737  :           pszBltName = L"EmulatedBlockFill16";
; 738  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyLUT8to16)
; 739  :           pszBltName = L"EmulatedBlockCopyLUT8to16";
; 740  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopy16to16)
; 741  :           pszBltName = L"EmulatedBlockCopy16to16";
; 742  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyBGR24toRGB16)
; 743  :           pszBltName = L"EmulatedBlockCopyBGR24toRGB16";
; 744  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyBGRx32toRGB16)
; 745  :           pszBltName = L"EmulatedBlockCopyBGRx32toRGB16";
; 746  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockFill24)
; 747  :           pszBltName = L"EmulatedBlockFill24";
; 748  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyLUT8to24)
; 749  :           pszBltName = L"EmulatedBlockCopyLUT8to24";
; 750  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyRGB16toBGR24)
; 751  :           pszBltName = L"EmulatedBlockCopyRGB16toBGR24";
; 752  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopy24to24)
; 753  :           pszBltName = L"EmulatedBlockCopy24to24";
; 754  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyXYZx32toXYZ24)
; 755  :           pszBltName = L"EmulatedBlockCopyXYZx32toXYZ24";
; 756  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockFill32)
; 757  :           pszBltName = L"EmulatedBlockFill32";
; 758  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyLUT8to32)
; 759  :           pszBltName = L"EmulatedBlockCopyLUT8to32";
; 760  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyRGB16toBGRx32)
; 761  :           pszBltName = L"EmulatedBlockCopyRGB16toBGRx32";
; 762  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopyXYZ24toXYZx32)
; 763  :           pszBltName = L"EmulatedBlockCopyXYZ24toXYZx32";
; 764  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedBlockCopy32to32)
; 765  :           pszBltName = L"EmulatedBlockCopy32to32";
; 766  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedMaskCopy16to16withA1)
; 767  :           pszBltName = L"EmulatedMaskCopy16to16withA1";
; 768  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedMaskCopy32to32withA1)
; 769  :           pszBltName = L"EmulatedMaskCopy32to32withA1";
; 770  :       else if (pNeonBlt == &OMAPDDGPE::EmulatedPerPixelAlphaBlendBGRA32toRGB16)
; 771  :           pszBltName = L"EmulatedPerPixelAlphaBlendBGRA32toRGB16";
; 772  :       else
; 773  :           pszBltName = L"Unknown";
; 774  : 			
; 775  :       RETAILMSG(1, (L"NEON BLT:%s AvailPhysDelta = %d, AvailPageFileDelta = %d\r\n", pszBltName, (long) m_dwAvailPhysDelta, (long) m_dwAvailPageFileDelta));
; 776  : 	}
; 777  :   }
; 778  : #endif
; 779  : 
; 780  :   pParms->pBlt = pfnSavedBlt;
; 781  : 
; 782  :   return(scode);
; 783  : }

  00068	e5846000	 str         r6, [r4]
  0006c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN14@DesignateB@37|
  00074		 |$LN15@DesignateB@37|
  00074	00000000	 DCD         |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  00078		 |$M44765|

			 ENDP  ; |?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::DesignateBlt

	END
