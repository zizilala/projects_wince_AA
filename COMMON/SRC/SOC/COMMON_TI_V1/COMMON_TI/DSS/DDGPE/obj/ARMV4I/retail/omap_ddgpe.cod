; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\DSS\DDGPE\omap_ddgpe.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BO@HCEKBOCE@?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAU?$AAs?$AAi?$AAn?$AAg?$AAI?$AAS?$AAP?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@HIDEFDND@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAN?$AAe?$AAo?$AAn?$AAB?$AAl?$AAt?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@EMDCEMCN@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAV?$AAe?$AAr?$AAt?$AAi?$AAc?$AAa?$AAl?$AAB?$AAl?$AAa?$AAn?$AAk?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@KKOABDHG@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@OHOBMFLJ@?$AAI?$AAS?$AAT?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17JOPIDIGL@?$AAI?$AAR?$AAQ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@EHICLELI@?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@LANIIAMF@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA_?$AAH?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@LIKCMHAM@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA_?$AAW?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@CGJCBLII@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AA_?$AAH?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@COOIFMEB@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AA_?$AAW?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@DIIAOCFK@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAR?$AAa?$AAt?$AAi?$AAo?$AA_?$AAH?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@DAPKKFJD@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAR?$AAa?$AAt?$AAi?$AAo?$AA_?$AAW?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@JFOFAJOP@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@EAFCNFBE@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@EJCCJHHO@?$AAA?$AAn?$AAg?$AAl?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@JFJPPHPE@?$AAO?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@FALMIFAM@?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAM?$AAg?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?g_Globals@@3VOMAPDDGPEGlobals@@A| [ DATA ] ; g_Globals
	EXPORT	|?g_pGPE@@3PAVDDGPE@@A| [ DATA ]	; g_pGPE

  00000			 AREA	 |.bss|, NOINIT
|?g_Globals@@3VOMAPDDGPEGlobals@@A| % 0x250		; g_Globals
|?g_pGPE@@3PAVDDGPE@@A| % 0x4				; g_pGPE

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@HCEKBOCE@?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAU?$AAs?$AAi?$AAn?$AAg?$AAI?$AAS?$AAP?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "U"
	DCB	0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, "I", 0x0, "S"
	DCB	0x0, "P", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@HIDEFDND@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAN?$AAe?$AAo?$AAn?$AAB?$AAl?$AAt?$AAs?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "N"
	DCB	0x0, "e", 0x0, "o", 0x0, "n", 0x0, "B", 0x0, "l", 0x0, "t"
	DCB	0x0, "s", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@EMDCEMCN@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAV?$AAe?$AAr?$AAt?$AAi?$AAc?$AAa?$AAl?$AAB?$AAl?$AAa?$AAn?$AAk?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r"
	DCB	0x0, "V", 0x0, "e", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "c"
	DCB	0x0, "a", 0x0, "l", 0x0, "B", 0x0, "l", 0x0, "a", 0x0, "n"
	DCB	0x0, "k", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@KKOABDHG@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "G"
	DCB	0x0, "a", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o"
	DCB	0x0, "r", 0x0, "r", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@OHOBMFLJ@?$AAI?$AAS?$AAT?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@| DCB "I"
	DCB	0x0, "S", 0x0, "T", 0x0, "P", 0x0, "r", 0x0, "i", 0x0, "o"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "y", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17JOPIDIGL@?$AAI?$AAR?$AAQ?$AA?$AA@| DCB "I", 0x0, "R", 0x0, "Q", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@EHICLELI@?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?$AA@| DCB "C", 0x0, "u"
	DCB	0x0, "r", 0x0, "s", 0x0, "o", 0x0, "r", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@LANIIAMF@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA_?$AAH?$AA?$AA@| DCB "T"
	DCB	0x0, "V", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, "_", 0x0, "O"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "_"
	DCB	0x0, "H", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@LIKCMHAM@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA_?$AAW?$AA?$AA@| DCB "T"
	DCB	0x0, "V", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, "_", 0x0, "O"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "_"
	DCB	0x0, "W", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@CGJCBLII@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AA_?$AAH?$AA?$AA@| DCB "T"
	DCB	0x0, "V", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, "_", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "_"
	DCB	0x0, "H", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@COOIFMEB@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AA_?$AAW?$AA?$AA@| DCB "T"
	DCB	0x0, "V", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, "_", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "_"
	DCB	0x0, "W", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@DIIAOCFK@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAR?$AAa?$AAt?$AAi?$AAo?$AA_?$AAH?$AA?$AA@| DCB "T"
	DCB	0x0, "V", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, "_", 0x0, "A"
	DCB	0x0, "s", 0x0, "p", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "R"
	DCB	0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "_", 0x0, "H"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@DAPKKFJD@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAR?$AAa?$AAt?$AAi?$AAo?$AA_?$AAW?$AA?$AA@| DCB "T"
	DCB	0x0, "V", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, "_", 0x0, "A"
	DCB	0x0, "s", 0x0, "p", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "R"
	DCB	0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "_", 0x0, "W"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@JFOFAJOP@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?$AA@| DCB "T"
	DCB	0x0, "V", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, "_", 0x0, "F"
	DCB	0x0, "i", 0x0, "l", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "L"
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "l", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@EAFCNFBE@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA?$AA@| DCB "T", 0x0, "V", 0x0
	DCB	"O", 0x0, "u", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@EJCCJHHO@?$AAA?$AAn?$AAg?$AAl?$AAe?$AA?$AA@| DCB "A", 0x0, "n", 0x0
	DCB	"g", 0x0, "l", 0x0, "e", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@JFJPPHPE@?$AAO?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@| DCB "O"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "c", 0x0, "r", 0x0, "e"
	DCB	0x0, "e", 0x0, "n", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@FALMIFAM@?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAM?$AAg?$AAr?$AA?$AA@| DCB "S"
	DCB	0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e"
	DCB	0x0, "M", 0x0, "g", 0x0, "r", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|FourCCDescriptionTable| DCD 0x32595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x56595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x55595659
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x59565955
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x36315659
	DCD	0x10
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x32315659
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x3231564e
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x30323449
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x56555949
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	%	4
|g_deviceRegParams| DCD |??_C@_1BG@FALMIFAM@?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAM?$AAg?$AAr?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x0
	DCD	0x4
	DCD	0x1
	DCD	|??_C@_1CA@JFJPPHPE@?$AAO?$AAf?$AAf?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x8
	DCD	0x4
	DCD	0x400000
	DCD	|??_C@_1M@EJCCJHHO@?$AAA?$AAn?$AAg?$AAl?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x4
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1M@EAFCNFBE@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x214
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CE@JFOFAJOP@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x218
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CI@DAPKKFJD@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAR?$AAa?$AAt?$AAi?$AAo?$AA_?$AAW?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x21c
	DCD	0x4
	DCD	0x4
	DCD	|??_C@_1CI@DIIAOCFK@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAA?$AAs?$AAp?$AAe?$AAc?$AAt?$AAR?$AAa?$AAt?$AAi?$AAo?$AA_?$AAH?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x220
	DCD	0x4
	DCD	0x3
	DCD	|??_C@_1BO@COOIFMEB@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AA_?$AAW?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x224
	DCD	0x4
	DCD	0x5a
	DCD	|??_C@_1BO@CGJCBLII@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AA_?$AAH?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x228
	DCD	0x4
	DCD	0x5a
	DCD	|??_C@_1BO@LIKCMHAM@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA_?$AAW?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x22c
	DCD	0x4
	DCD	0x8
	DCD	|??_C@_1BO@LANIIAMF@?$AAT?$AAV?$AAO?$AAu?$AAt?$AA_?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA_?$AAH?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x230
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1O@EHICLELI@?$AAC?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x234
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_17JOPIDIGL@?$AAI?$AAR?$AAQ?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x238
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BI@OHOBMFLJ@?$AAI?$AAS?$AAT?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x23c
	DCD	0x4
	DCD	0x64
	DCD	|??_C@_1CA@KKOABDHG@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x240
	DCD	0x4
	DCD	0x1
	DCD	|??_C@_1DG@EMDCEMCN@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAV?$AAe?$AAr?$AAt?$AAi?$AAc?$AAa?$AAl?$AAB?$AAl?$AAa?$AAn?$AAk?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x244
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BO@HIDEFDND@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAN?$AAe?$AAo?$AAn?$AAB?$AAl?$AAt?$AAs?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x248
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BO@HCEKBOCE@?$AAR?$AAe?$AAs?$AAi?$AAz?$AAe?$AAU?$AAs?$AAi?$AAn?$AAg?$AAI?$AAS?$AAP?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x24c
	DCD	0x4
	DCD	0x0
	EXPORT	|?Stride@GPESurf@@QAAHXZ|		; GPESurf::Stride
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43079| DCD	|$LN5@Stride|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Stride@GPESurf@@QAAHXZ| PROC		; GPESurf::Stride

; 177  :     {

  00000		 |$LN5@Stride|
  00000		 |$M43076|

; 178  :         return m_nStrideBytes;

  00000	e5900008	 ldr         r0, [r0, #8]

; 179  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M43077|

			 ENDP  ; |?Stride@GPESurf@@QAAHXZ|, GPESurf::Stride

	EXPORT	|?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| ; GPESurf::Format

  00000			 AREA	 |.pdata|, PDATA
|$T43089| DCD	|$LN5@Format|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| PROC ; GPESurf::Format

; 189  :     {

  00000		 |$LN5@Format|
  00000		 |$M43086|

; 190  :         return m_eFormat;

  00000	e590001c	 ldr         r0, [r0, #0x1C]

; 191  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M43087|

			 ENDP  ; |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|, GPESurf::Format

	EXPORT	|?Buffer@GPESurf@@QAAPAXXZ|		; GPESurf::Buffer

  00000			 AREA	 |.pdata|, PDATA
|$T43099| DCD	|$LN5@Buffer|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Buffer@GPESurf@@QAAPAXXZ| PROC	; GPESurf::Buffer

; 201  :     {

  00000		 |$LN5@Buffer|
  00000		 |$M43096|

; 202  :         return (void *)m_pVirtAddr;

  00000	e5900004	 ldr         r0, [r0, #4]

; 203  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M43097|

			 ENDP  ; |?Buffer@GPESurf@@QAAPAXXZ|, GPESurf::Buffer

	EXPORT	|?InVideoMemory@GPESurf@@QAAHXZ|	; GPESurf::InVideoMemory

  00000			 AREA	 |.pdata|, PDATA
|$T43109| DCD	|$LN5@InVideoMem|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InVideoMemory@GPESurf@@QAAHXZ| PROC	; GPESurf::InVideoMemory

; 219  :     {

  00000		 |$LN5@InVideoMem|
  00000		 |$M43106|

; 220  :         return m_fInVideoMemory;

  00000	e5900020	 ldr         r0, [r0, #0x20]

; 221  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M43107|

			 ENDP  ; |?InVideoMemory@GPESurf@@QAAHXZ|, GPESurf::InVideoMemory

	EXPORT	|?GetLCDPixelFormat@OMAPDisplayController@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| ; OMAPDisplayController::GetLCDPixelFormat
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T43119| DCD	|$LN5@GetLCDPixe|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetLCDPixelFormat@OMAPDisplayController@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| PROC ; OMAPDisplayController::GetLCDPixelFormat

; 302  :     OMAP_DSS_PIXELFORMAT    GetLCDPixelFormat() { return m_eLcdPixelFormat; }

  00000		 |$LN5@GetLCDPixe|
  00000		 |$M43116|
  00000	e59004a8	 ldr         r0, [r0, #0x4A8]
  00004	e12fff1e	 bx          lr
  00008		 |$M43117|

			 ENDP  ; |?GetLCDPixelFormat@OMAPDisplayController@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|, OMAPDisplayController::GetLCDPixelFormat

	EXPORT	|?GetLCDWidth@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetLCDWidth

  00000			 AREA	 |.pdata|, PDATA
|$T43129| DCD	|$LN5@GetLCDWidt|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetLCDWidth@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetLCDWidth

; 303  :     DWORD                   GetLCDWidth() { return m_dwLcdWidth; }

  00000		 |$LN5@GetLCDWidt|
  00000		 |$M43126|
  00000	e59004ac	 ldr         r0, [r0, #0x4AC]
  00004	e12fff1e	 bx          lr
  00008		 |$M43127|

			 ENDP  ; |?GetLCDWidth@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetLCDWidth

	EXPORT	|?GetLCDHeight@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetLCDHeight

  00000			 AREA	 |.pdata|, PDATA
|$T43139| DCD	|$LN5@GetLCDHeig|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetLCDHeight@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetLCDHeight

; 304  :     DWORD                   GetLCDHeight() { return m_dwLcdHeight; }

  00000		 |$LN5@GetLCDHeig|
  00000		 |$M43136|
  00000	e59004b0	 ldr         r0, [r0, #0x4B0]
  00004	e12fff1e	 bx          lr
  00008		 |$M43137|

			 ENDP  ; |?GetLCDHeight@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetLCDHeight

	EXPORT	|?GetContrastLevel@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetContrastLevel

  00000			 AREA	 |.pdata|, PDATA
|$T43149| DCD	|$LN5@GetContras|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetContrastLevel@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetContrastLevel

; 445  :     DWORD   GetContrastLevel() { return m_dwContrastLevel; }

  00000		 |$LN5@GetContras|
  00000		 |$M43146|
  00000	e59004d4	 ldr         r0, [r0, #0x4D4]
  00004	e12fff1e	 bx          lr
  00008		 |$M43147|

			 ENDP  ; |?GetContrastLevel@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetContrastLevel

	EXPORT	|?GetPowerLevel@OMAPDisplayController@@QAAKXZ| ; OMAPDisplayController::GetPowerLevel

  00000			 AREA	 |.pdata|, PDATA
|$T43159| DCD	|$LN5@GetPowerLe|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPowerLevel@OMAPDisplayController@@QAAKXZ| PROC ; OMAPDisplayController::GetPowerLevel

; 498  :     DWORD   GetPowerLevel() { return m_dwPowerLevel; }

  00000		 |$LN5@GetPowerLe|
  00000		 |$M43156|
  00000	e590048c	 ldr         r0, [r0, #0x48C]
  00004	e12fff1e	 bx          lr
  00008		 |$M43157|

			 ENDP  ; |?GetPowerLevel@OMAPDisplayController@@QAAKXZ|, OMAPDisplayController::GetPowerLevel

	EXPORT	|?GetDssInfo@OMAPDisplayController@@QAAPAUDSS_INFO@@XZ| ; OMAPDisplayController::GetDssInfo

  00000			 AREA	 |.pdata|, PDATA
|$T43169| DCD	|$LN5@GetDssInfo|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDssInfo@OMAPDisplayController@@QAAPAUDSS_INFO@@XZ| PROC ; OMAPDisplayController::GetDssInfo

; 590  : 	DSS_INFO* GetDssInfo() { return &m_dssinfo;};

  00000		 |$LN5@GetDssInfo|
  00000		 |$M43166|
  00000	e2800e52	 add         r0, r0, #0x52, 28
  00004	e12fff1e	 bx          lr
  00008		 |$M43167|

			 ENDP  ; |?GetDssInfo@OMAPDisplayController@@QAAPAUDSS_INFO@@XZ|, OMAPDisplayController::GetDssInfo

	EXPORT	|?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| ; OMAPSurface::PixelFormat

  00000			 AREA	 |.pdata|, PDATA
|$T43179| DCD	|$LN5@PixelForma|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| PROC ; OMAPSurface::PixelFormat

; 761  :     OMAP_DSS_PIXELFORMAT    PixelFormat() { return m_ePixelFormat; }

  00000		 |$LN5@PixelForma|
  00000		 |$M43176|
  00000	e5900004	 ldr         r0, [r0, #4]
  00004	e12fff1e	 bx          lr
  00008		 |$M43177|

			 ENDP  ; |?PixelFormat@OMAPSurface@@QAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|, OMAPSurface::PixelFormat

	EXPORT	|?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| ; OMAPDDGPESurface::OmapSurface
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43189| DCD	|$LN5@OmapSurfac|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ| PROC ; OMAPDDGPESurface::OmapSurface

; 102  :     OMAPSurface*        OmapSurface() { return m_pSurface; }

  00000		 |$LN5@OmapSurfac|
  00000		 |$M43186|
  00000	e590007c	 ldr         r0, [r0, #0x7C]
  00004	e12fff1e	 bx          lr
  00008		 |$M43187|

			 ENDP  ; |?OmapSurface@OMAPDDGPESurface@@QAAPAVOMAPSurface@@XZ|, OMAPDDGPESurface::OmapSurface

	EXPORT	|DisplayInit|
	EXPORT	|??_C@_1CG@BEPCNIEH@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAG?$AAD?$AAI?$AA?2?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|wcscpy|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T43200| DCD	|$LN8@DisplayIni|
	DCD	0x40001701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@BEPCNIEH@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAG?$AAD?$AAI?$AA?2?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?$AA@| DCB "S"
	DCB	0x0, "y", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "m", 0x0, "\\"
	DCB	0x0, "G", 0x0, "D", 0x0, "I", 0x0, "\\", 0x0, "D", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DisplayInit| PROC

; 133  : {

  00000		 |$LN8@DisplayIni|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43197|
  00004	e1b04000	 movs        r4, r0

; 134  :     UNREFERENCED_PARAMETER(dwNumMonitors);
; 135  :     DEBUGMSG(GPE_ZONE_INIT, (L"Display DisplayInit\r\n"));
; 136  : 
; 137  :     // called with pszInstance set to NULL for non-PCI display drivers...
; 138  :     if (pszInstance == NULL)
; 139  :     {
; 140  :         pszInstance = L"System\\GDI\\Drivers";

  00008	059f4048	 ldreq       r4, [pc, #0x48]

; 141  :         DEBUGMSG(GPE_ZONE_INIT, (L"Display DisplayInit, NULL pszInstance, using %s\r\n", pszInstance));
; 142  :     }
; 143  :     
; 144  :     //  Read display driver initialization parameters
; 145  :     if( GetDeviceRegistryParams(pszInstance, &g_Globals, dimof(g_deviceRegParams),
; 146  :         g_deviceRegParams) != ERROR_SUCCESS)

  0000c	e59f5040	 ldr         r5, [pc, #0x40]
  00010	e59f3038	 ldr         r3, [pc, #0x38]
  00014	e1a00004	 mov         r0, r4
  00018	e1a01005	 mov         r1, r5
  0001c	e3a02012	 mov         r2, #0x12
  00020	eb000000	 bl          GetDeviceRegistryParams
  00024	e3500000	 cmp         r0, #0

; 147  :     {
; 148  :         DEBUGMSG(GPE_ZONE_ERROR, (L"ERROR: DisplayInit failed to read registry\r\n"));
; 149  :         return FALSE;

  00028	13a00000	 movne       r0, #0

; 154  : }

  0002c	18bd4030	 ldmneia     sp!, {r4, r5, lr}
  00030	112fff1e	 bxne        lr

; 150  :     }
; 151  :     if (pszInstance != NULL) _tcscpy(g_Globals.m_szContext, pszInstance);

  00034	e3540000	 cmp         r4, #0
  00038	11a01004	 movne       r1, r4
  0003c	1285000c	 addne       r0, r5, #0xC
  00040	1b000000	 blne        wcscpy

; 152  : 
; 153  :     return TRUE;

  00044	e3a00001	 mov         r0, #1

; 154  : }

  00048	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$LN9@DisplayIni|
  00050		 |$LN10@DisplayIni|
  00050	00000000	 DCD         |g_deviceRegParams|
  00054		 |$LN11@DisplayIni|
  00054	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  00058		 |$LN12@DisplayIni|
  00058	00000000	 DCD         |??_C@_1CG@BEPCNIEH@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAG?$AAD?$AAI?$AA?2?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?$AA@|
  0005c		 |$M43198|

			 ENDP  ; |DisplayInit|

	EXPORT	|DrvEnableDriver|
	IMPORT	|?GPEEnableDriver@@YAHKKPAUtagDrvEnableData@@PAU_ENGCALLBACKS@@@Z| ; GPEEnableDriver

  00000			 AREA	 |.pdata|, PDATA
|$T43217| DCD	|$LN5@DrvEnableD|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DrvEnableDriver| PROC

; 164  : {

  00000		 |$LN5@DrvEnableD|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43214|

; 165  :     return GPEEnableDriver(engineVersion, cj, data, engineCallbacks);

  00004	eb000000	 bl          |?GPEEnableDriver@@YAHKKPAUtagDrvEnableData@@PAU_ENGCALLBACKS@@@Z|

; 166  : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M43215|

			 ENDP  ; |DrvEnableDriver|

	EXPORT	|DrvGetMasks|

  00000			 AREA	 |.pdata|, PDATA
|$T43227| DCD	|$LN6@DrvGetMask|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DrvGetMasks| PROC

; 175  : {

  00000		 |$LN6@DrvGetMask|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43224|

; 176  :     ULONG*  pMasks = NULL;
; 177  : 
; 178  :     UNREFERENCED_PARAMETER(dhpdev);
; 179  :     
; 180  :     //  Return masks for selected mode
; 181  :     if( g_pGPE )

  00004	e59f3024	 ldr         r3, [pc, #0x24]
  00008	e3a00000	 mov         r0, #0
  0000c	e5932000	 ldr         r2, [r3]
  00010	e3520000	 cmp         r2, #0

; 182  :     {
; 183  :         pMasks = ((OMAPDDGPE*)g_pGPE)->GetMasks();

  00014	15923000	 ldrne       r3, [r2]
  00018	11a00002	 movne       r0, r2
  0001c	159330e8	 ldrne       r3, [r3, #0xE8]
  00020	11a0e00f	 movne       lr, pc
  00024	112fff13	 bxne        r3

; 184  :     }
; 185  :     
; 186  :     //  Return
; 187  :     return pMasks;
; 188  : }

  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$LN7@DrvGetMask|
  00030		 |$LN8@DrvGetMask|
  00030	00000000	 DCD         |?g_pGPE@@3PAVDDGPE@@A|
  00034		 |$M43225|

			 ENDP  ; |DrvGetMasks|

	EXPORT	|?getAngle@@YAKK@Z|			; getAngle

  00000			 AREA	 |.pdata|, PDATA
|$T43240| DCD	|$LN12@getAngle|
	DCD	0x40001100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?getAngle@@YAKK@Z| PROC		; getAngle

; 192  : {

  00000		 |$LN12@getAngle|
  00000		 |$M43237|
  00000	e3500000	 cmp         r0, #0

; 193  :     DWORD angle = 0;
; 194  :     switch(orientation)

  00004	0a00000c	 beq         |$LN5@getAngle|
  00008	e3500001	 cmp         r0, #1
  0000c	0a000008	 beq         |$LN4@getAngle|
  00010	e3500002	 cmp         r0, #2
  00014	0a000004	 beq         |$LN3@getAngle|
  00018	e3500004	 cmp         r0, #4

; 207  :             break;
; 208  :         default:
; 209  :             angle=0;
; 210  :             break;

  0001c	1a000006	 bne         |$LN5@getAngle|
  00020	e3a03c01	 mov         r3, #1, 24

; 204  :             break;
; 205  :         case DMDO_270:
; 206  :             angle=270;

  00024	e383000e	 orr         r0, r3, #0xE

; 211  :     }
; 212  :     return angle;
; 213  : }

  00028	e12fff1e	 bx          lr
  0002c		 |$LN3@getAngle|

; 201  :             break;
; 202  :         case DMDO_180:
; 203  :             angle=180;

  0002c	e3a000b4	 mov         r0, #0xB4

; 211  :     }
; 212  :     return angle;
; 213  : }

  00030	e12fff1e	 bx          lr
  00034		 |$LN4@getAngle|

; 198  :             break;
; 199  :         case DMDO_90:
; 200  :             angle=90;

  00034	e3a0005a	 mov         r0, #0x5A

; 211  :     }
; 212  :     return angle;
; 213  : }

  00038	e12fff1e	 bx          lr
  0003c		 |$LN5@getAngle|

; 195  :     {
; 196  :         case DMDO_0:
; 197  :             angle=0;

  0003c	e3a00000	 mov         r0, #0

; 211  :     }
; 212  :     return angle;
; 213  : }

  00040	e12fff1e	 bx          lr
  00044		 |$M43238|

			 ENDP  ; |?getAngle@@YAKK@Z|, getAngle

	EXPORT	|?getOrientation@@YAKK@Z|		; getOrientation

  00000			 AREA	 |.pdata|, PDATA
|$T43251| DCD	|$LN12@getOrienta|
	DCD	0x40001200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?getOrientation@@YAKK@Z| PROC		; getOrientation

; 217  : {

  00000		 |$LN12@getOrienta|
  00000		 |$M43248|
  00000	e3500000	 cmp         r0, #0

; 218  :     DWORD orientation = 0;
; 219  :     switch(angle)

  00004	0a00000d	 beq         |$LN5@getOrienta|
  00008	e350005a	 cmp         r0, #0x5A
  0000c	0a000009	 beq         |$LN4@getOrienta|
  00010	e35000b4	 cmp         r0, #0xB4
  00014	0a000005	 beq         |$LN3@getOrienta|
  00018	e3a03c01	 mov         r3, #1, 24
  0001c	e383300e	 orr         r3, r3, #0xE
  00020	e1500003	 cmp         r0, r3

; 232  :             break;
; 233  :         default:
; 234  :             orientation=DMDO_0;
; 235  :             break;

  00024	1a000005	 bne         |$LN5@getOrienta|

; 229  :             break;
; 230  :         case 270:
; 231  :             orientation=DMDO_270;

  00028	e3a00004	 mov         r0, #4

; 236  :     }
; 237  :     return orientation;
; 238  : }

  0002c	e12fff1e	 bx          lr
  00030		 |$LN3@getOrienta|

; 226  :             break;
; 227  :         case 180:
; 228  :             orientation=DMDO_180;

  00030	e3a00002	 mov         r0, #2

; 236  :     }
; 237  :     return orientation;
; 238  : }

  00034	e12fff1e	 bx          lr
  00038		 |$LN4@getOrienta|

; 223  :             break;
; 224  :         case 90:
; 225  :             orientation=DMDO_90;

  00038	e3a00001	 mov         r0, #1

; 236  :     }
; 237  :     return orientation;
; 238  : }

  0003c	e12fff1e	 bx          lr
  00040		 |$LN5@getOrienta|

; 220  :     {
; 221  :         case 0:
; 222  :             orientation=DMDO_0;

  00040	e3a00000	 mov         r0, #0

; 236  :     }
; 237  :     return orientation;
; 238  : }

  00044	e12fff1e	 bx          lr
  00048		 |$M43249|

			 ENDP  ; |?getOrientation@@YAKK@Z|, getOrientation

	EXPORT	|??1OMAPDDGPE@@UAA@XZ|			; OMAPDDGPE::~OMAPDDGPE
	EXPORT	|??_7OMAPDDGPE@@6B@| [ DATA ]		; OMAPDDGPE::`vftable'
	EXPORT	|?BltPrepare@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::BltPrepare
	EXPORT	|?BltComplete@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::BltComplete
	EXPORT	|?Line@OMAPDDGPE@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z| ; OMAPDDGPE::Line
	EXPORT	|?SetPointerShape@OMAPDDGPE@@UAAJPAVGPESurf@@0HHHH@Z| ; OMAPDDGPE::SetPointerShape
	EXPORT	|?MovePointer@OMAPDDGPE@@UAAJHH@Z|	; OMAPDDGPE::MovePointer
	EXPORT	|?SetPalette@OMAPDDGPE@@UAAJPBUtagPALETTEENTRY@@GG@Z| ; OMAPDDGPE::SetPalette
	EXPORT	|?GetModeInfo@OMAPDDGPE@@UAAJPAUGPEMode@@H@Z| ; OMAPDDGPE::GetModeInfo
	EXPORT	|?NumModes@OMAPDDGPE@@UAAHXZ|		; OMAPDDGPE::NumModes
	EXPORT	|?SetMode@OMAPDDGPE@@UAAJHPAPAUHPALETTE__@@@Z| ; OMAPDDGPE::SetMode
	EXPORT	|?DrvEscape@OMAPDDGPE@@UAAKPAU_SURFOBJ@@KKPAXK1@Z| ; OMAPDDGPE::DrvEscape
	EXPORT	|?GetPhysicalModeId@DDGPE@@UAAKXZ|	; DDGPE::GetPhysicalModeId
	EXPORT	|?GetModeInfoEx@OMAPDDGPE@@UAAJPAUGPEModeEx@@H@Z| ; OMAPDDGPE::GetModeInfoEx
	EXPORT	|?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ| ; DDGPE::GetDriverData
	EXPORT	|?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z| ; DDGPE::SetDriverData
	EXPORT	|?GetPrimaryPixelFormat@OMAPDDGPE@@UAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| ; OMAPDDGPE::GetPrimaryPixelFormat
	EXPORT	|?GetMasks@OMAPDDGPE@@UAAPAKXZ|		; OMAPDDGPE::GetMasks
	EXPORT	|?Lock@OMAPDDGPE@@UAAXXZ|		; OMAPDDGPE::Lock
	EXPORT	|?Unlock@OMAPDDGPE@@UAAXXZ|		; OMAPDDGPE::Unlock
	EXPORT	|?DDHALInfo@OMAPDDGPE@@UAAXPAU_DDHALINFO@@K@Z| ; OMAPDDGPE::DDHALInfo
	IMPORT	|??1DDGPE@@UAA@XZ|			; DDGPE::~DDGPE
	IMPORT	|??_EOMAPDDGPE@@UAAPAXI@Z|, WEAK |??_GOMAPDDGPE@@UAAPAXI@Z| ; OMAPDDGPE::`vector deleting destructor', OMAPDDGPE::`scalar deleting destructor'
	IMPORT	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z| ; OMAPDDGPE::AllocSurface
	IMPORT	|?GetPalette@GPE@@UAAJPAPAUtagPALETTEENTRY@@PAG@Z| ; GPE::GetPalette
	IMPORT	|?InVBlank@OMAPDDGPE@@UAAHXZ|		; OMAPDDGPE::InVBlank
	IMPORT	|?IsPaletteSettable@GPE@@UAAHXZ|	; GPE::IsPaletteSettable
	IMPORT	|?ContrastControl@GPE@@UAAHKPAK@Z|	; GPE::ContrastControl
	IMPORT	|?PowerHandler@GPE@@UAAXH@Z|		; GPE::PowerHandler
	IMPORT	|?GetGraphicsCaps@GPE@@UAAKXZ|		; GPE::GetGraphicsCaps
	IMPORT	|?GetPhysicalVideoMemory@GPE@@UAAXPAK0@Z| ; GPE::GetPhysicalVideoMemory
	IMPORT	|?SetVisibleSurface@GPE@@UAAXPAVGPESurf@@@Z| ; GPE::SetVisibleSurface
	IMPORT	|?FlipInProgress@OMAPDDGPE@@UAAHXZ|	; OMAPDDGPE::FlipInProgress
	IMPORT	|?WaitForVBlank@OMAPDDGPE@@UAAXXZ|	; OMAPDDGPE::WaitForVBlank
	IMPORT	|?SurfaceBusyFlipping@GPE@@UAAHPAVGPESurf@@@Z| ; GPE::SurfaceBusyFlipping
	IMPORT	|?IsBusy@OMAPDDGPE@@UAAHXZ|		; OMAPDDGPE::IsBusy
	IMPORT	|?WaitForNotBusy@OMAPDDGPE@@UAAXXZ|	; OMAPDDGPE::WaitForNotBusy
	IMPORT	|?AvailableVideoMemory@GPE@@UAAKXZ|	; GPE::AvailableVideoMemory
	IMPORT	|?ScanLine@GPE@@UAAHXZ|			; GPE::ScanLine
	IMPORT	|?ProcessCommandBlock@GPE@@UAAJPAE@Z|	; GPE::ProcessCommandBlock
	IMPORT	|?GetScreenDimensions@GPE@@UAAHPAUGPEScreenProps@@@Z| ; GPE::GetScreenDimensions
	IMPORT	|?GetClearTypeRGBMasks@GPE@@UAAPAKXZ|	; GPE::GetClearTypeRGBMasks
	IMPORT	|?DisablePrimary@GPE@@UAAHXZ|		; GPE::DisablePrimary
	IMPORT	|?AllocSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z| ; DDGPE::AllocSurface
	IMPORT	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z| ; OMAPDDGPE::AllocSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocBackBuffer@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z| ; DDGPE::AllocBackBuffer
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@HH@Z| ; DDGPE::WrapSurface
	IMPORT	|?BltPrepare@DDGPE@@UAAJPAUDDGPEBltParms@@@Z| ; DDGPE::BltPrepare
	IMPORT	|?PerformBlt@DDGPE@@UAAJPAUDDGPEBltParms@@@Z| ; DDGPE::PerformBlt
	IMPORT	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@00PBUtagRECT@@1KKK@Z| ; DDGPE::BltExpanded
	IMPORT	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@000PAU_CLIPOBJ@@PAU_XLATEOBJ@@PBUtagRECT@@3KKK@Z| ; DDGPE::BltExpanded
	IMPORT	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@KH@Z| ; DDGPE::SetVisibleSurface
	IMPORT	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@H@Z| ; DDGPE::SetVisibleSurface
	IMPORT	|?DetectMode@DDGPE@@UAAJPAKKKW4EGPEFormat@@W4EDDGPEPixelFormat@@PAU_DDPIXELFORMAT@@@Z| ; DDGPE::DetectMode
	IMPORT	|?DetectPixelFormat@DDGPE@@UAAJKPAU_DDPIXELFORMAT@@PAW4EGPEFormat@@PAW4EDDGPEPixelFormat@@@Z| ; DDGPE::DetectPixelFormat
	IMPORT	|?InDisplay@DDGPE@@UAAHXZ|		; DDGPE::InDisplay
	IMPORT	|?SetMode@DDGPE@@UAAJHPAPAUHPALETTE__@@H@Z| ; DDGPE::SetMode
	IMPORT	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z| ; OMAPDDGPE::AllocSurface

  00000			 AREA	 |.pdata|, PDATA
|$T43259| DCD	|$LN5@OMAPDDGPE|
	DCD	0x40000801

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7OMAPDDGPE@@6B@| DCD |??_EOMAPDDGPE@@UAAPAXI@Z|	; OMAPDDGPE::`vftable'
	DCD	|?BltPrepare@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z|
	DCD	|?BltComplete@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z|
	DCD	|?Line@OMAPDDGPE@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z|
	DCD	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z|
	DCD	|?SetPointerShape@OMAPDDGPE@@UAAJPAVGPESurf@@0HHHH@Z|
	DCD	|?MovePointer@OMAPDDGPE@@UAAJHH@Z|
	DCD	|?SetPalette@OMAPDDGPE@@UAAJPBUtagPALETTEENTRY@@GG@Z|
	DCD	|?GetPalette@GPE@@UAAJPAPAUtagPALETTEENTRY@@PAG@Z|
	DCD	|?GetModeInfo@OMAPDDGPE@@UAAJPAUGPEMode@@H@Z|
	DCD	|?NumModes@OMAPDDGPE@@UAAHXZ|
	DCD	|?SetMode@OMAPDDGPE@@UAAJHPAPAUHPALETTE__@@@Z|
	DCD	|?InVBlank@OMAPDDGPE@@UAAHXZ|
	DCD	|?IsPaletteSettable@GPE@@UAAHXZ|
	DCD	|?ContrastControl@GPE@@UAAHKPAK@Z|
	DCD	|?PowerHandler@GPE@@UAAXH@Z|
	DCD	|?DrvEscape@OMAPDDGPE@@UAAKPAU_SURFOBJ@@KKPAXK1@Z|
	DCD	|?GetGraphicsCaps@GPE@@UAAKXZ|
	DCD	|?GetPhysicalVideoMemory@GPE@@UAAXPAK0@Z|
	DCD	|?SetVisibleSurface@GPE@@UAAXPAVGPESurf@@@Z|
	DCD	|?FlipInProgress@OMAPDDGPE@@UAAHXZ|
	DCD	|?WaitForVBlank@OMAPDDGPE@@UAAXXZ|
	DCD	|?SurfaceBusyFlipping@GPE@@UAAHPAVGPESurf@@@Z|
	DCD	|?IsBusy@OMAPDDGPE@@UAAHXZ|
	DCD	|?WaitForNotBusy@OMAPDDGPE@@UAAXXZ|
	DCD	|?AvailableVideoMemory@GPE@@UAAKXZ|
	DCD	|?ScanLine@GPE@@UAAHXZ|
	DCD	|?ProcessCommandBlock@GPE@@UAAJPAE@Z|
	DCD	|?GetScreenDimensions@GPE@@UAAHPAUGPEScreenProps@@@Z|
	DCD	|?GetClearTypeRGBMasks@GPE@@UAAPAKXZ|
	DCD	|?DisablePrimary@GPE@@UAAHXZ|
	DCD	|?AllocSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z|
	DCD	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@PAK@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@PAK@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z|
	DCD	|?AllocBackBuffer@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@HH@Z|
	DCD	|?BltPrepare@DDGPE@@UAAJPAUDDGPEBltParms@@@Z|
	DCD	|?PerformBlt@DDGPE@@UAAJPAUDDGPEBltParms@@@Z|
	DCD	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@00PBUtagRECT@@1KKK@Z|
	DCD	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@000PAU_CLIPOBJ@@PAU_XLATEOBJ@@PBUtagRECT@@3KKK@Z|
	DCD	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@KH@Z|
	DCD	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@H@Z|
	DCD	|?DetectMode@DDGPE@@UAAJPAKKKW4EGPEFormat@@W4EDDGPEPixelFormat@@PAU_DDPIXELFORMAT@@@Z|
	DCD	|?DetectPixelFormat@DDGPE@@UAAJKPAU_DDPIXELFORMAT@@PAW4EGPEFormat@@PAW4EDDGPEPixelFormat@@@Z|
	DCD	|?GetPhysicalModeId@DDGPE@@UAAKXZ|
	DCD	|?InDisplay@DDGPE@@UAAHXZ|
	DCD	|?GetModeInfoEx@OMAPDDGPE@@UAAJPAUGPEModeEx@@H@Z|
	DCD	|?SetMode@DDGPE@@UAAJHPAPAUHPALETTE__@@H@Z|
	DCD	|?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ|
	DCD	|?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z|
	DCD	|?GetPrimaryPixelFormat@OMAPDDGPE@@UAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|
	DCD	|?GetMasks@OMAPDDGPE@@UAAPAKXZ|
	DCD	|?Lock@OMAPDDGPE@@UAAXXZ|
	DCD	|?Unlock@OMAPDDGPE@@UAAXXZ|
	DCD	|?AllocSurface@OMAPDDGPE@@UAAJPAPAVOMAPDDGPESurface@@W4OMAP_DSS_PIXELFORMAT@@HH@Z|
	DCD	|?DDHALInfo@OMAPDDGPE@@UAAXPAU_DDHALINFO@@K@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1OMAPDDGPE@@UAA@XZ| PROC		; OMAPDDGPE::~OMAPDDGPE

; 472  : {

  00000		 |$LN5@OMAPDDGPE|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43256|
  00004	e1a02000	 mov         r2, r0
  00008	e59f300c	 ldr         r3, [pc, #0xC]

; 473  :     //  Display driver never unloads
; 474  : #if 0
; 475  :     delete [] m_cursorStore; 
; 476  :     m_cursorStore = NULL;
; 477  :     delete [] m_cursorXor; 
; 478  :     m_cursorXor = NULL;
; 479  :     delete [] m_cursorAnd; 
; 480  :     m_cursorAnd = NULL;
; 481  : #endif
; 482  : }

  0000c	e5823000	 str         r3, [r2]
  00010	eb000000	 bl          |??1DDGPE@@UAA@XZ|
  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$LN6@OMAPDDGPE|
  0001c		 |$LN7@OMAPDDGPE|
  0001c	00000000	 DCD         |??_7OMAPDDGPE@@6B@|
  00020		 |$M43257|

			 ENDP  ; |??1OMAPDDGPE@@UAA@XZ|, OMAPDDGPE::~OMAPDDGPE

; File c:\wince600\public\common\oak\inc\ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43271| DCD	|$LN5@GetPhysica|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPhysicalModeId@DDGPE@@UAAKXZ| PROC ; DDGPE::GetPhysicalModeId

; 486  : 	virtual DWORD	GetPhysicalModeId	(void) { return m_dwPhysicalModeID; }	// Get current hardware mode (mode of ddraw primary)

  00000		 |$LN5@GetPhysica|
  00000		 |$M43268|
  00000	e5900028	 ldr         r0, [r0, #0x28]
  00004	e12fff1e	 bx          lr
  00008		 |$M43269|

			 ENDP  ; |?GetPhysicalModeId@DDGPE@@UAAKXZ|, DDGPE::GetPhysicalModeId


  00000			 AREA	 |.pdata|, PDATA
|$T43281| DCD	|$LN5@GetDriverD|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ| PROC ; DDGPE::GetDriverData

; 502  : 	virtual DDGPEDriverData*		GetDriverData(void) { return m_pDriverData; }

  00000		 |$LN5@GetDriverD|
  00000		 |$M43278|
  00000	e590002c	 ldr         r0, [r0, #0x2C]
  00004	e12fff1e	 bx          lr
  00008		 |$M43279|

			 ENDP  ; |?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ|, DDGPE::GetDriverData


  00000			 AREA	 |.pdata|, PDATA
|$T43290| DCD	|$LN5@SetDriverD|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z| PROC ; DDGPE::SetDriverData

; 503  : 	virtual void					SetDriverData(DDGPEDriverData* pDriverData) { m_pDriverData = pDriverData; }

  00000		 |$LN5@SetDriverD|
  00000		 |$M43287|
  00000	e580102c	 str         r1, [r0, #0x2C]
  00004	e12fff1e	 bx          lr
  00008		 |$M43288|

			 ENDP  ; |?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z|, DDGPE::SetDriverData

	IMPORT	|EnterCriticalSection|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\omap_ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43298| DCD	|$LN5@Lock|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@OMAPDDGPE@@UAAXXZ| PROC		; OMAPDDGPE::Lock

; 531  :     Lock() { EnterCriticalSection( &m_csOperationLock ); }

  00000		 |$LN5@Lock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43295|
  00004	e280009c	 add         r0, r0, #0x9C
  00008	eb000000	 bl          EnterCriticalSection
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M43296|

			 ENDP  ; |?Lock@OMAPDDGPE@@UAAXXZ|, OMAPDDGPE::Lock

	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T43306| DCD	|$LN5@Unlock|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Unlock@OMAPDDGPE@@UAAXXZ| PROC	; OMAPDDGPE::Unlock

; 535  :     Unlock() { LeaveCriticalSection( &m_csOperationLock ); }

  00000		 |$LN5@Unlock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43303|
  00004	e280009c	 add         r0, r0, #0x9C
  00008	eb000000	 bl          LeaveCriticalSection
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M43304|

			 ENDP  ; |?Unlock@OMAPDDGPE@@UAAXXZ|, OMAPDDGPE::Unlock

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T43315| DCD	|$LN5@NumModes|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NumModes@OMAPDDGPE@@UAAHXZ| PROC	; OMAPDDGPE::NumModes

; 487  : {

  00000		 |$LN5@NumModes|
  00000		 |$M43312|

; 488  :     DEBUGMSG (GPE_ZONE_INIT, (TEXT("OMAPDDGPE::NumModes\r\n")));
; 489  : 
; 490  :     //  Return number of modes (the display driver allows only one active mode at a time)
; 491  :     return 1;

  00000	e3a00001	 mov         r0, #1

; 492  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43313|

			 ENDP  ; |?NumModes@OMAPDDGPE@@UAAHXZ|, OMAPDDGPE::NumModes

	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T43328| DCD	|$LN7@GetModeInf|
	DCD	0x40001501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetModeInfo@OMAPDDGPE@@UAAJPAUGPEMode@@H@Z| PROC ; OMAPDDGPE::GetModeInfo

; 500  : {

  00000		 |$LN7@GetModeInf|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43325|
  00004	e1a0e001	 mov         lr, r1

; 501  :     DEBUGMSG (GPE_ZONE_INIT, (TEXT("OMAPDDGPE::GetModeInfo\r\n")));
; 502  : 
; 503  :     //  Check display controller enabled
; 504  :     if( m_pDisplayContr == NULL )

  00008	e59030b0	 ldr         r3, [r0, #0xB0]
  0000c	e3530000	 cmp         r3, #0
  00010	03a03116	 moveq       r3, #0x16, 2

; 505  :         return E_FAIL;

  00014	03830901	 orreq       r0, r3, #1, 18

; 515  : }

  00018	049de004	 ldreq       lr, [sp], #4
  0001c	012fff1e	 bxeq        lr

; 506  : 
; 507  :     //  Return info about selected mode
; 508  :     if( modeNumber == 0 )

  00020	e3520000	 cmp         r2, #0
  00024	1a000006	 bne         |$LN1@GetModeInf|

; 509  :     {
; 510  :         *pMode = *m_pMode;

  00028	e5901010	 ldr         r1, [r0, #0x10]
  0002c	e3a02018	 mov         r2, #0x18
  00030	e1a0000e	 mov         r0, lr
  00034	eb000000	 bl          memcpy

; 511  :         return S_OK;

  00038	e3a00000	 mov         r0, #0

; 515  : }

  0003c	e49de004	 ldr         lr, [sp], #4
  00040	e12fff1e	 bx          lr
  00044		 |$LN1@GetModeInf|

; 512  :     }
; 513  : 
; 514  :     return E_INVALIDARG;

  00044	e59f0004	 ldr         r0, [pc, #4]

; 515  : }

  00048	e49de004	 ldr         lr, [sp], #4
  0004c	e12fff1e	 bx          lr
  00050		 |$LN8@GetModeInf|
  00050		 |$LN9@GetModeInf|
  00050	80070057	 DCD         0x80070057
  00054		 |$M43326|

			 ENDP  ; |?GetModeInfo@OMAPDDGPE@@UAAJPAUGPEMode@@H@Z|, OMAPDDGPE::GetModeInfo


  00000			 AREA	 |.pdata|, PDATA
|$T43342| DCD	|$LN7@GetModeInf@2|
	DCD	0x40001501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetModeInfoEx@OMAPDDGPE@@UAAJPAUGPEModeEx@@H@Z| PROC ; OMAPDDGPE::GetModeInfoEx

; 523  : {

  00000		 |$LN7@GetModeInf@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43339|
  00004	e1a0e001	 mov         lr, r1

; 524  :     DEBUGMSG (GPE_ZONE_INIT, (TEXT("OMAPDDGPE::GetModeInfoEx\r\n")));
; 525  : 
; 526  :     //  Check display controller enabled
; 527  :     if( m_pDisplayContr == NULL )

  00008	e59030b0	 ldr         r3, [r0, #0xB0]
  0000c	e3530000	 cmp         r3, #0
  00010	03a03116	 moveq       r3, #0x16, 2

; 528  :         return E_FAIL;

  00014	03830901	 orreq       r0, r3, #1, 18

; 538  : }

  00018	049de004	 ldreq       lr, [sp], #4
  0001c	012fff1e	 bxeq        lr

; 529  : 
; 530  :     //  Return info about selected mode
; 531  :     if( modeNumber == 0 )

  00020	e3520000	 cmp         r2, #0
  00024	1a000006	 bne         |$LN1@GetModeInf@2|

; 532  :     {
; 533  :         *pModeEx = *m_pModeEx;

  00028	e5901024	 ldr         r1, [r0, #0x24]
  0002c	e3a02058	 mov         r2, #0x58
  00030	e1a0000e	 mov         r0, lr
  00034	eb000000	 bl          memcpy

; 534  :         return S_OK;

  00038	e3a00000	 mov         r0, #0

; 538  : }

  0003c	e49de004	 ldr         lr, [sp], #4
  00040	e12fff1e	 bx          lr
  00044		 |$LN1@GetModeInf@2|

; 535  :     }
; 536  : 
; 537  :     return E_INVALIDARG;

  00044	e59f0004	 ldr         r0, [pc, #4]

; 538  : }

  00048	e49de004	 ldr         lr, [sp], #4
  0004c	e12fff1e	 bx          lr
  00050		 |$LN8@GetModeInf@2|
  00050		 |$LN9@GetModeInf@2|
  00050	80070057	 DCD         0x80070057
  00054		 |$M43340|

			 ENDP  ; |?GetModeInfoEx@OMAPDDGPE@@UAAJPAUGPEModeEx@@H@Z|, OMAPDDGPE::GetModeInfoEx

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T43358| DCD	|$LN7@GetPrimary|
	DCD	0x40000300
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPrimaryPixelFormat@OMAPDDGPE@@UAA?AW4OMAP_DSS_PIXELFORMAT@@XZ| PROC ; OMAPDDGPE::GetPrimaryPixelFormat

; 543  : {

  00000		 |$LN7@GetPrimary|
  00000		 |$M43355|

; 544  :     DEBUGMSG (GPE_ZONE_INIT, (TEXT("OMAPDDGPE::GetPrimaryPixelFormat\r\n")));
; 545  : 
; 546  :     //  Return pixel format of primary LCD    
; 547  :     return m_pDisplayContr->GetLCDPixelFormat();

  00000	e59030b0	 ldr         r3, [r0, #0xB0]
  00004	e59304a8	 ldr         r0, [r3, #0x4A8]

; 548  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M43356|

			 ENDP  ; |?GetPrimaryPixelFormat@OMAPDDGPE@@UAA?AW4OMAP_DSS_PIXELFORMAT@@XZ|, OMAPDDGPE::GetPrimaryPixelFormat


  00000			 AREA	 |.pdata|, PDATA
|$T43367| DCD	|$LN5@SetPalette|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetPalette@OMAPDDGPE@@UAAJPBUtagPALETTEENTRY@@GG@Z| PROC ; OMAPDDGPE::SetPalette

; 711  : {

  00000		 |$LN5@SetPalette|
  00000		 |$M43364|

; 712  :     UNREFERENCED_PARAMETER(source);
; 713  :     UNREFERENCED_PARAMETER(firstEntry);
; 714  :     UNREFERENCED_PARAMETER(numEntries);
; 715  :     DEBUGMSG (GPE_ZONE_INIT, (TEXT("OMAPDDGPE::SetPalette\r\n")));
; 716  :     return    S_OK;

  00000	e3a00000	 mov         r0, #0

; 717  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43365|

			 ENDP  ; |?SetPalette@OMAPDDGPE@@UAAJPBUtagPALETTEENTRY@@GG@Z|, OMAPDDGPE::SetPalette

	EXPORT	|?GetVirtualVideoMemory@OMAPDDGPE@@QAAXPAK00@Z| ; OMAPDDGPE::GetVirtualVideoMemory

  00000			 AREA	 |.pdata|, PDATA
|$T43378| DCD	|$LN5@GetVirtual|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetVirtualVideoMemory@OMAPDDGPE@@QAAXPAK00@Z| PROC ; OMAPDDGPE::GetVirtualVideoMemory

; 726  : {

  00000		 |$LN5@GetVirtual|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M43375|
  00004	e1a08003	 mov         r8, r3
  00008	e1a07002	 mov         r7, r2
  0000c	e1a05001	 mov         r5, r1
  00010	e1a06000	 mov         r6, r0

; 727  :     DEBUGMSG (GPE_ZONE_VIDEOMEMORY, (TEXT("OMAPDDGPE::GetVirtualVideoMemory\r\n")));
; 728  : 
; 729  :     *virtualMemoryBase = (ULONG) m_pSurfaceMgr->VirtualBaseAddr();

  00014	e59600b4	 ldr         r0, [r6, #0xB4]
  00018	e5904000	 ldr         r4, [r0]
  0001c	e5944010	 ldr         r4, [r4, #0x10]
  00020	e1a0e00f	 mov         lr, pc
  00024	e12fff14	 bx          r4
  00028	e5850000	 str         r0, [r5]

; 730  :     *videoMemorySize   = m_pSurfaceMgr->TotalMemorySize();

  0002c	e59600b4	 ldr         r0, [r6, #0xB4]
  00030	e5901000	 ldr         r1, [r0]
  00034	e5911008	 ldr         r1, [r1, #8]
  00038	e1a0e00f	 mov         lr, pc
  0003c	e12fff11	 bx          r1
  00040	e5870000	 str         r0, [r7]

; 731  :     *videoMemoryFree   = m_pSurfaceMgr->FreeMemorySize();

  00044	e59600b4	 ldr         r0, [r6, #0xB4]
  00048	e5902000	 ldr         r2, [r0]
  0004c	e592300c	 ldr         r3, [r2, #0xC]
  00050	e1a0e00f	 mov         lr, pc
  00054	e12fff13	 bx          r3
  00058	e5880000	 str         r0, [r8]

; 732  : 
; 733  :     DEBUGMSG (GPE_ZONE_VIDEOMEMORY, (TEXT("    virtualMemoryBase = 0x%08x\r\n"), *virtualMemoryBase));
; 734  :     DEBUGMSG (GPE_ZONE_VIDEOMEMORY, (TEXT("    videoMemorySize   = 0x%08x\r\n"), *videoMemorySize));
; 735  :     DEBUGMSG (GPE_ZONE_VIDEOMEMORY, (TEXT("    videoMemoryFree   = 0x%08x\r\n"), *videoMemoryFree));
; 736  : }

  0005c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$M43376|

			 ENDP  ; |?GetVirtualVideoMemory@OMAPDDGPE@@QAAXPAK00@Z|, OMAPDDGPE::GetVirtualVideoMemory


  00000			 AREA	 |.pdata|, PDATA
|$T43385| DCD	|$LN5@DDHALInfo|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DDHALInfo@OMAPDDGPE@@UAAXPAU_DDHALINFO@@K@Z| PROC ; OMAPDDGPE::DDHALInfo

; 775  : {

  00000		 |$LN5@DDHALInfo|
  00000		 |$M43382|

; 776  :     UNREFERENCED_PARAMETER(lpddhi);
; 777  :     UNREFERENCED_PARAMETER(modeidx);
; 778  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M43383|

			 ENDP  ; |?DDHALInfo@OMAPDDGPE@@UAAXPAU_DDHALINFO@@K@Z|, OMAPDDGPE::DDHALInfo


  00000			 AREA	 |.pdata|, PDATA
|$T43395| DCD	|$LN5@GetMasks|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetMasks@OMAPDDGPE@@UAAPAKXZ| PROC	; OMAPDDGPE::GetMasks

; 783  : {

  00000		 |$LN5@GetMasks|
  00000		 |$M43392|

; 784  :     DEBUGMSG (GPE_ZONE_HW, (TEXT("OMAPDDGPE::GetMasks\r\n")));
; 785  : 
; 786  :     //  Return RGB masks for selected mode
; 787  :     return &(m_pModeEx->dwRBitMask);

  00000	e5903024	 ldr         r3, [r0, #0x24]
  00004	e2830048	 add         r0, r3, #0x48

; 788  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M43393|

			 ENDP  ; |?GetMasks@OMAPDDGPE@@UAAPAKXZ|, OMAPDDGPE::GetMasks

	IMPORT	|?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z| ; OMAPDisplayController::RestoreRegisters
	IMPORT	|?EnableDVI@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::EnableDVI
	IMPORT	|?EnableHdmi@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::EnableHdmi
	IMPORT	|?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| ; OMAPDisplayController::EnablePipeline
	IMPORT	|?EnableTvOut@OMAPDisplayController@@QAAHH@Z| ; OMAPDisplayController::EnableTvOut
	IMPORT	|?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z| ; OMAPDDGPE::DetermineTvOutSurface
	IMPORT	|?SetPowerLevel@OMAPDisplayController@@QAAHK@Z| ; OMAPDisplayController::SetPowerLevel
	IMPORT	|?SetContrastLevel@OMAPDisplayController@@QAAHK@Z| ; OMAPDisplayController::SetContrastLevel
	IMPORT	|SetLastError|
	IMPORT	|?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z| ; OMAPDisplayController::RotatePipeline
	IMPORT	|?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z| ; OMAPDisplayController::DisablePipeline
	IMPORT	|__C_specific_handler|
	IMPORT	|memset|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T43573| DCD	|$LN242@DrvEscape|
	DCD	0xc002fa04

  00000			 AREA	 |.pdata|, PDATA
|$T43575| DCD	|$LN182@DrvEscape|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T43577| DCD	|$LN168@DrvEscape|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T43579| DCD	|$LN189@DrvEscape|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T43581| DCD	|$LN175@DrvEscape|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T43583| DCD	|$LN161@DrvEscape|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T43585| DCD	|$LN154@DrvEscape|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T43587| DCD	|$LN147@DrvEscape|
	DCD	0x40000e01

  00000			 AREA	 |.xdata|, DATA
|$T43571| DCD	0x7
	DCD	|$LN186@DrvEscape|
	DCD	|$LN187@DrvEscape|
	DCD	|$LN182@DrvEscape|
	DCD	|$LN183@DrvEscape|
	DCD	|$LN172@DrvEscape|
	DCD	|$LN173@DrvEscape|
	DCD	|$LN168@DrvEscape|
	DCD	|$LN169@DrvEscape|
	DCD	|$LN193@DrvEscape|
	DCD	|$LN194@DrvEscape|
	DCD	|$LN189@DrvEscape|
	DCD	|$LN190@DrvEscape|
	DCD	|$LN179@DrvEscape|
	DCD	|$LN180@DrvEscape|
	DCD	|$LN175@DrvEscape|
	DCD	|$LN176@DrvEscape|
	DCD	|$LN165@DrvEscape|
	DCD	|$LN166@DrvEscape|
	DCD	|$LN161@DrvEscape|
	DCD	|$LN162@DrvEscape|
	DCD	|$LN158@DrvEscape|
	DCD	|$LN159@DrvEscape|
	DCD	|$LN154@DrvEscape|
	DCD	|$LN155@DrvEscape|
	DCD	|$LN151@DrvEscape|
	DCD	|$LN152@DrvEscape|
	DCD	|$LN147@DrvEscape|
	DCD	|$LN148@DrvEscape|
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T43571|

  00008		 |?DrvEscape@OMAPDDGPE@@UAAKPAU_SURFOBJ@@KKPAXK1@Z| PROC ; OMAPDDGPE::DrvEscape

; 1289 : {

  00008		 |$LN242@DrvEscape|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5870	 stmdb       sp!, {r4 - r6, r11, r12, lr}
  00010	e28db018	 add         r11, sp, #0x18
  00014	e24dd008	 sub         sp, sp, #8
  00018		 |$LN240@DrvEscape|
  00018	e1a06003	 mov         r6, r3
  0001c	e1a05000	 mov         r5, r0

; 1290 :     int    rc = ESC_NOT_SUPPORTED;    // Default not supported
; 1291 : 
; 1292 :     UNREFERENCED_PARAMETER(pso);
; 1293 : 
; 1294 :     DEBUGMSG (GPE_ZONE_ENTER, (TEXT("OMAPDDGPE::DrvEscape\r\n")));
; 1295 : 
; 1296 :     switch (iEsc)

  00020	e59f3c44	 ldr         r3, [pc, #0xC44]
  00024	e1520003	 cmp         r2, r3
  00028	e3a04000	 mov         r4, #0
  0002c	8a000233	 bhi         |$LN143@DrvEscape|
  00030	0a0001db	 beq         |$LN60@DrvEscape|
  00034	e3a03b06	 mov         r3, #6, 22
  00038	e383309e	 orr         r3, r3, #0x9E
  0003c	e1520003	 cmp         r2, r3
  00040	8a00016b	 bhi         |$LN144@DrvEscape|
  00044	0a00014c	 beq         |$LN102@DrvEscape|
  00048	e3520008	 cmp         r2, #8
  0004c	0a00010b	 beq         |$LN110@DrvEscape|
  00050	e3a03b06	 mov         r3, #6, 22
  00054	e3833003	 orr         r3, r3, #3
  00058	e1520003	 cmp         r2, r3
  0005c	0a0000eb	 beq         |$LN34@DrvEscape|
  00060	e3a03b06	 mov         r3, #6, 22
  00064	e3833004	 orr         r3, r3, #4
  00068	e1520003	 cmp         r2, r3
  0006c	0a0000c3	 beq         |$LN43@DrvEscape|
  00070	e3a03b06	 mov         r3, #6, 22
  00074	e3833005	 orr         r3, r3, #5
  00078	e1520003	 cmp         r2, r3
  0007c	0a000083	 beq         |$LN85@DrvEscape|
  00080	e3a03b06	 mov         r3, #6, 22
  00084	e383309d	 orr         r3, r3, #0x9D
  00088	e1520003	 cmp         r2, r3
  0008c	1a0002d3	 bne         |$LN188@DrvEscape|

; 1388 :             
; 1389 :         case DRVESC_SETSCREENROTATION:
; 1390 :             //  Only if the surface manager supports rotation
; 1391 :             if( m_pSurfaceMgr->SupportsRotation() == TRUE )

  00090	e59500b4	 ldr         r0, [r5, #0xB4]
  00094	e5903000	 ldr         r3, [r0]
  00098	e5933020	 ldr         r3, [r3, #0x20]
  0009c	e1a0e00f	 mov         lr, pc
  000a0	e12fff13	 bx          r3
  000a4	e3500001	 cmp         r0, #1
  000a8	1a0002cc	 bne         |$LN188@DrvEscape|

; 1392 :             {
; 1393 :             //  Set state of graphics plane rotation
; 1394 :             if( (cjIn == DMDO_0) || (cjIn == DMDO_90) || (cjIn == DMDO_180) || (cjIn == DMDO_270) )

  000ac	e3560000	 cmp         r6, #0
  000b0	0a000005	 beq         |$LN93@DrvEscape|
  000b4	e3560001	 cmp         r6, #1
  000b8	0a000003	 beq         |$LN93@DrvEscape|
  000bc	e3560002	 cmp         r6, #2
  000c0	13560004	 cmpne       r6, #4

; 1466 :                 }
; 1467 :                 else
; 1468 :                 {
; 1469 :                     rc = DISP_CHANGE_BADMODE;

  000c4	13e04001	 mvnne       r4, #1

; 1392 :             {
; 1393 :             //  Set state of graphics plane rotation
; 1394 :             if( (cjIn == DMDO_0) || (cjIn == DMDO_90) || (cjIn == DMDO_180) || (cjIn == DMDO_270) )

  000c8	1a0002c4	 bne         |$LN188@DrvEscape|
  000cc		 |$LN93@DrvEscape|

; 1395 :             {
; 1396 :                     //  Rotation changes surface parameters, so lock out other DDraw operations until done
; 1397 :                     Lock();

  000cc	e5953000	 ldr         r3, [r5]
  000d0	e1a00005	 mov         r0, r5
  000d4	e59330ec	 ldr         r3, [r3, #0xEC]
  000d8	e1a0e00f	 mov         lr, pc
  000dc	e12fff13	 bx          r3

; 1398 :                     
; 1399 :                     DEBUGMSG(GPE_ZONE_VIDEOMEMORY, (TEXT("DRVESC_SETSCREENROTATION: cjIn = %d\r\n"), cjIn));
; 1400 : 
; 1401 :                     //  Disable all pipelines prior to rotation
; 1402 :                     m_pDisplayContr->DisablePipeline( OMAP_DSS_PIPELINE_GFX );

  000e0	e59500b0	 ldr         r0, [r5, #0xB0]
  000e4	e3a01000	 mov         r1, #0
  000e8	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 1403 :                     m_pDisplayContr->DisablePipeline( OMAP_DSS_PIPELINE_VIDEO1 );

  000ec	e59500b0	 ldr         r0, [r5, #0xB0]
  000f0	e3a01001	 mov         r1, #1
  000f4	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 1404 :                     m_pDisplayContr->DisablePipeline( OMAP_DSS_PIPELINE_VIDEO2 );

  000f8	e59500b0	 ldr         r0, [r5, #0xB0]
  000fc	e3a01002	 mov         r1, #2
  00100	eb000000	 bl          |?DisablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 1405 :                     
; 1406 :                     //  Remove overlay references
; 1407 :                     m_pOverlay1Surf = NULL;

  00104	e3a03000	 mov         r3, #0

; 1408 :                     m_pOverlay2Surf = NULL;
; 1409 :                     m_pTVSurf = NULL;
; 1410 :                     
; 1411 :                     /* Since WinCE always considers the boot-up width and height to be 0 degree orientation,
; 1412 :                        we need to manipulate the cjIn rotation angle when the device has booted up in 90,180 or 270
; 1413 :                        orientation (specified through registry setting and stored in g_Globals.m_dwRotationAngle) */
; 1414 :                     //  Set graphics rotate angle
; 1415 :                     m_iGraphicsRotate = getOrientation((getAngle(cjIn)+getAngle(g_Globals.m_dwRotationAngle))%360);

  00108	e1a00006	 mov         r0, r6
  0010c	e58530c0	 str         r3, [r5, #0xC0]
  00110	e58530c4	 str         r3, [r5, #0xC4]
  00114	e5853108	 str         r3, [r5, #0x108]
  00118	eb000000	 bl          |?getAngle@@YAKK@Z|
  0011c	e59f3b20	 ldr         r3, [pc, #0xB20]
  00120	e1a04000	 mov         r4, r0
  00124	e5930004	 ldr         r0, [r3, #4]
  00128	eb000000	 bl          |?getAngle@@YAKK@Z|
  0012c	e59f3b34	 ldr         r3, [pc, #0xB34]
  00130	e0800004	 add         r0, r0, r4
  00134	e3a0ef5a	 mov         lr, #0x5A, 30
  00138	e0821390	 umull       r1, r2, r0, r3
  0013c	e0403002	 sub         r3, r0, r2
  00140	e08230a3	 add         r3, r2, r3, lsr #1
  00144	e1a03423	 mov         r3, r3, lsr #8
  00148	e0020e93	 mul         r2, r3, lr
  0014c	e0400002	 sub         r0, r0, r2
  00150	eb000000	 bl          |?getOrientation@@YAKK@Z|
  00154	e3500000	 cmp         r0, #0
  00158	e5850098	 str         r0, [r5, #0x98]

; 1416 : 
; 1417 :                     //  Change width and height of primary surface, but not the surface angle of the GPE surface
; 1418 :                     //  Have the display controller rotate the output of the primary surface
; 1419 :                     switch( m_iGraphicsRotate )

  0015c	0a00001e	 beq         |$LN90@DrvEscape|
  00160	e3500001	 cmp         r0, #1
  00164	0a000014	 beq         |$LN89@DrvEscape|
  00168	e3500002	 cmp         r0, #2
  0016c	0a00000a	 beq         |$LN88@DrvEscape|
  00170	e3500004	 cmp         r0, #4
  00174	1a000022	 bne         |$LN91@DrvEscape|

; 1444 : 
; 1445 :                         case DMDO_270:
; 1446 :                             //  Set the rotation and orientation of the primary surface
; 1447 :                             m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_ROTATED );

  00178	e59500bc	 ldr         r0, [r5, #0xBC]
  0017c	e3a01001	 mov         r1, #1
  00180	e5903000	 ldr         r3, [r0]
  00184	e5933048	 ldr         r3, [r3, #0x48]
  00188	e1a0e00f	 mov         lr, pc
  0018c	e12fff13	 bx          r3

; 1448 :                             
; 1449 :                             //  Set the output rotation angle for the pipeline
; 1450 :                             m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_270 );

  00190	e3a03c01	 mov         r3, #1, 24
  00194	e383200e	 orr         r2, r3, #0xE

; 1451 :                             break;

  00198	ea000016	 b           |$LN233@DrvEscape|
  0019c		 |$LN88@DrvEscape|

; 1436 : 
; 1437 :                         case DMDO_180:
; 1438 :                             //  Set the rotation and orientation of the primary surface
; 1439 :                             m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_STANDARD );

  0019c	e59500bc	 ldr         r0, [r5, #0xBC]
  001a0	e3a01000	 mov         r1, #0
  001a4	e5903000	 ldr         r3, [r0]
  001a8	e5933048	 ldr         r3, [r3, #0x48]
  001ac	e1a0e00f	 mov         lr, pc
  001b0	e12fff13	 bx          r3

; 1440 :                             
; 1441 :                             //  Set the output rotation angle for the pipeline
; 1442 :                             m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_180 );

  001b4	e3a020b4	 mov         r2, #0xB4

; 1443 :                             break;

  001b8	ea00000e	 b           |$LN233@DrvEscape|
  001bc		 |$LN89@DrvEscape|

; 1427 :                             break;
; 1428 : 
; 1429 :                         case DMDO_90:
; 1430 :                             //  Set the rotation and orientation of the primary surface
; 1431 :                             m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_ROTATED );

  001bc	e59500bc	 ldr         r0, [r5, #0xBC]
  001c0	e3a01001	 mov         r1, #1
  001c4	e5903000	 ldr         r3, [r0]
  001c8	e5933048	 ldr         r3, [r3, #0x48]
  001cc	e1a0e00f	 mov         lr, pc
  001d0	e12fff13	 bx          r3

; 1432 :                             
; 1433 :                             //  Set the output rotation angle for the pipeline
; 1434 :                             m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_90 );

  001d4	e3a0205a	 mov         r2, #0x5A

; 1435 :                             break;

  001d8	ea000006	 b           |$LN233@DrvEscape|
  001dc		 |$LN90@DrvEscape|

; 1420 :                     {
; 1421 :                         case DMDO_0:
; 1422 :                             //  Set the rotation and orientation of the primary surface
; 1423 :                             m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_STANDARD );

  001dc	e59500bc	 ldr         r0, [r5, #0xBC]
  001e0	e3a01000	 mov         r1, #0
  001e4	e5903000	 ldr         r3, [r0]
  001e8	e5933048	 ldr         r3, [r3, #0x48]
  001ec	e1a0e00f	 mov         lr, pc
  001f0	e12fff13	 bx          r3

; 1424 :                             
; 1425 :                             //  Set the output rotation angle for the pipeline
; 1426 :                             m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_0 );

  001f4	e3a02000	 mov         r2, #0
  001f8		 |$LN233@DrvEscape|
  001f8	e3a01000	 mov         r1, #0
  001fc	e59500b0	 ldr         r0, [r5, #0xB0]
  00200	eb000000	 bl          |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|
  00204		 |$LN91@DrvEscape|

; 1452 :                     }
; 1453 : 
; 1454 :                     //  Update extended mode information
; 1455 :                     m_pMode->width = m_pPrimarySurf->OmapSurface()->Width();

  00204	e59530bc	 ldr         r3, [r5, #0xBC]
  00208	e3a01000	 mov         r1, #0
  0020c	e593007c	 ldr         r0, [r3, #0x7C]
  00210	e5903000	 ldr         r3, [r0]
  00214	e5933008	 ldr         r3, [r3, #8]
  00218	e1a0e00f	 mov         lr, pc
  0021c	e12fff13	 bx          r3
  00220	e5953010	 ldr         r3, [r5, #0x10]

; 1456 :                     m_pMode->height = m_pPrimarySurf->OmapSurface()->Height();

  00224	e3a01000	 mov         r1, #0
  00228	e5830004	 str         r0, [r3, #4]
  0022c	e59530bc	 ldr         r3, [r5, #0xBC]
  00230	e593007c	 ldr         r0, [r3, #0x7C]
  00234	e5903000	 ldr         r3, [r0]
  00238	e593300c	 ldr         r3, [r3, #0xC]
  0023c	e1a0e00f	 mov         lr, pc
  00240	e12fff13	 bx          r3
  00244	e5953010	 ldr         r3, [r5, #0x10]

; 1457 :                     m_pModeEx->lPitch = m_pPrimarySurf->OmapSurface()->Stride();

  00248	e3a01000	 mov         r1, #0
  0024c	e5830008	 str         r0, [r3, #8]
  00250	e59530bc	 ldr         r3, [r5, #0xBC]
  00254	e593007c	 ldr         r0, [r3, #0x7C]
  00258	e5903000	 ldr         r3, [r0]
  0025c	e5933010	 ldr         r3, [r3, #0x10]
  00260	e1a0e00f	 mov         lr, pc
  00264	e12fff13	 bx          r3
  00268	e5952024	 ldr         r2, [r5, #0x24]
  0026c	e1a03000	 mov         r3, r0

; 1458 : 
; 1459 :                     /*  Dont enable the pipelines yet -Wait for DRVESC_ENDSCREENROTATION 
; 1460 :                         to enable the pipelines to reduce the amount of flicker seen during rotation */
; 1461 : 
; 1462 :                     //  Rotation done, unlock other operations
; 1463 :                     Unlock();

  00270	e1a00005	 mov         r0, r5
  00274	e5823040	 str         r3, [r2, #0x40]
  00278	e5953000	 ldr         r3, [r5]
  0027c	e59330f0	 ldr         r3, [r3, #0xF0]
  00280	e1a0e00f	 mov         lr, pc
  00284	e12fff13	 bx          r3

; 1464 : 
; 1465 :                     rc = DISP_CHANGE_SUCCESSFUL;

  00288	e3a04000	 mov         r4, #0

; 1470 :                 }
; 1471 :             }
; 1472 :             break;

  0028c	ea000253	 b           |$LN188@DrvEscape|
  00290		 |$LN85@DrvEscape|

; 1473 :                 
; 1474 :         case CONTRASTCOMMAND:
; 1475 :             //  Handle the contrast command
; 1476 :             if (cjIn == sizeof(ContrastCmdInputParm))

  00290	e3560008	 cmp         r6, #8
  00294	1a0000b4	 bne         |$LN109@DrvEscape|

; 1477 :             {
; 1478 :                 ContrastCmdInputParm*   pContrastParm = (ContrastCmdInputParm *)pvIn;
; 1479 :                 DWORD                   dwContrastLevel = DEFAULT_CONTRAST_LEVEL;
; 1480 : 
; 1481 :                 //  Default return value
; 1482 :                 rc = ESC_SUCCESS;
; 1483 :                 switch(pContrastParm->command)

  00298	e59b2000	 ldr         r2, [r11]
  0029c	e3a06003	 mov         r6, #3
  002a0	e3a04001	 mov         r4, #1
  002a4	e5923000	 ldr         r3, [r2]
  002a8	e3530000	 cmp         r3, #0
  002ac	0a000027	 beq         |$LN81@DrvEscape|
  002b0	e3530001	 cmp         r3, #1
  002b4	0a000022	 beq         |$LN80@DrvEscape|
  002b8	e3530002	 cmp         r3, #2
  002bc	0a000017	 beq         |$LN79@DrvEscape|
  002c0	e3530003	 cmp         r3, #3
  002c4	0a00000e	 beq         |$LN76@DrvEscape|
  002c8	e3530004	 cmp         r3, #4
  002cc	0a000007	 beq         |$LN73@DrvEscape|
  002d0	e3530005	 cmp         r3, #5
  002d4	0a000003	 beq         |$LN72@DrvEscape|
  002d8		 |$LN234@DrvEscape|

; 1543 : 
; 1544 :                     default:
; 1545 :                         rc = ESC_FAILED;
; 1546 :                         SetLastError (ERROR_INVALID_PARAMETER);

  002d8	e3a00057	 mov         r0, #0x57
  002dc	e3e04000	 mvn         r4, #0
  002e0	eb000000	 bl          SetLastError

; 1547 :                         break;

  002e4	ea00001b	 b           |$LN82@DrvEscape|
  002e8		 |$LN72@DrvEscape|

; 1538 : 
; 1539 :                     case CONTRAST_CMD_MAX:
; 1540 :                         //  Get max contrast level
; 1541 :                         dwContrastLevel = NUM_CONTRAST_LEVELS-1;

  002e8	e3a06006	 mov         r6, #6

; 1542 :                         break;

  002ec	ea000019	 b           |$LN82@DrvEscape|
  002f0		 |$LN73@DrvEscape|

; 1532 : 
; 1533 :                     case CONTRAST_CMD_DEFAULT:
; 1534 :                         //  Set default contrast level
; 1535 :                         m_pDisplayContr->SetContrastLevel(DEFAULT_CONTRAST_LEVEL);

  002f0	e59500b0	 ldr         r0, [r5, #0xB0]
  002f4	e3a01003	 mov         r1, #3
  002f8	eb000000	 bl          |?SetContrastLevel@OMAPDisplayController@@QAAHK@Z|

; 1536 :                         dwContrastLevel = DEFAULT_CONTRAST_LEVEL;

  002fc	e3a06003	 mov         r6, #3

; 1537 :                         break;

  00300	ea000014	 b           |$LN82@DrvEscape|
  00304		 |$LN76@DrvEscape|

; 1513 : 
; 1514 :                     case CONTRAST_CMD_DECREASE:
; 1515 :                         //  Decrease contrast by delta
; 1516 :                         dwContrastLevel = m_pDisplayContr->GetContrastLevel();

  00304	e59500b0	 ldr         r0, [r5, #0xB0]

; 1517 : 
; 1518 :                         // If caller wants to set the contrast below the lower limit, 
; 1519 :                         // we need to return error in order to pass the DDI contrast 
; 1520 :                         // Interface LTK test.
; 1521 :                         if (dwContrastLevel < (DWORD)pContrastParm->parm)

  00308	e5923004	 ldr         r3, [r2, #4]
  0030c	e59064d4	 ldr         r6, [r0, #0x4D4]
  00310	e1560003	 cmp         r6, r3

; 1522 :                         {
; 1523 :                             rc = ESC_FAILED;
; 1524 :                             SetLastError (ERROR_INVALID_PARAMETER);
; 1525 :                         }
; 1526 :                         else

  00314	3affffef	 bcc         |$LN234@DrvEscape|

; 1527 :                         {
; 1528 :                             dwContrastLevel -= pContrastParm->parm;

  00318	e0466003	 sub         r6, r6, r3

; 1529 :                         m_pDisplayContr->SetContrastLevel(dwContrastLevel);
; 1530 :                         }
; 1531 :                         break;

  0031c	ea000005	 b           |$LN78@DrvEscape|
  00320		 |$LN79@DrvEscape|

; 1493 :                         dwContrastLevel = m_pDisplayContr->GetContrastLevel();
; 1494 :                         break;
; 1495 : 
; 1496 :                     case CONTRAST_CMD_INCREASE:
; 1497 :                         //  Increase contrast by delta
; 1498 :                         dwContrastLevel = m_pDisplayContr->GetContrastLevel() + pContrastParm->parm;

  00320	e59500b0	 ldr         r0, [r5, #0xB0]
  00324	e5922004	 ldr         r2, [r2, #4]
  00328	e59034d4	 ldr         r3, [r0, #0x4D4]
  0032c	e0826003	 add         r6, r2, r3

; 1499 : 
; 1500 :                         // If caller wants to set the contrast above the upper limit, 
; 1501 :                         // we need to return error in order to pass the DDI contrast 
; 1502 :                         // Interface LTK test.
; 1503 :                         if (dwContrastLevel >= NUM_CONTRAST_LEVELS) 

  00330	e3560007	 cmp         r6, #7

; 1504 :                         {
; 1505 :                             rc = ESC_FAILED;
; 1506 :                             SetLastError (ERROR_INVALID_PARAMETER);
; 1507 :                         }
; 1508 :                         else

  00334	2affffe7	 bcs         |$LN234@DrvEscape|
  00338		 |$LN78@DrvEscape|

; 1509 :                         {
; 1510 :                         m_pDisplayContr->SetContrastLevel(dwContrastLevel);

  00338	e1a01006	 mov         r1, r6
  0033c	eb000000	 bl          |?SetContrastLevel@OMAPDisplayController@@QAAHK@Z|

; 1511 :                         }
; 1512 :                         break;

  00340	ea000004	 b           |$LN82@DrvEscape|
  00344		 |$LN80@DrvEscape|

; 1488 :                         break;
; 1489 : 
; 1490 :                     case CONTRAST_CMD_SET:
; 1491 :                         //  Set current contrast level
; 1492 :                         m_pDisplayContr->SetContrastLevel(pContrastParm->parm);

  00344	e5921004	 ldr         r1, [r2, #4]
  00348	e59500b0	 ldr         r0, [r5, #0xB0]
  0034c	eb000000	 bl          |?SetContrastLevel@OMAPDisplayController@@QAAHK@Z|
  00350		 |$LN81@DrvEscape|

; 1484 :                 {
; 1485 :                     case CONTRAST_CMD_GET:
; 1486 :                         //  Get current contrast level
; 1487 :                         dwContrastLevel = m_pDisplayContr->GetContrastLevel();

  00350	e59530b0	 ldr         r3, [r5, #0xB0]
  00354	e59364d4	 ldr         r6, [r3, #0x4D4]
  00358		 |$LN82@DrvEscape|

; 1548 :                 }
; 1549 : 
; 1550 :                 //  Return updated contrast setting
; 1551 :                 if((rc == ESC_SUCCESS) && (cjOut == sizeof(DWORD)) && (pvOut != NULL))

  00358	e3540001	 cmp         r4, #1
  0035c	1a00021f	 bne         |$LN188@DrvEscape|
  00360	e59b3004	 ldr         r3, [r11, #4]
  00364	e3530004	 cmp         r3, #4
  00368	1a00021c	 bne         |$LN188@DrvEscape|
  0036c	e59b3008	 ldr         r3, [r11, #8]
  00370	e3530000	 cmp         r3, #0
  00374	0a000219	 beq         |$LN188@DrvEscape|

; 1552 :                 {
; 1553 :                     *(DWORD*)pvOut = dwContrastLevel;

  00378	e5836000	 str         r6, [r3]

; 1554 :                 }
; 1555 :             }
; 1556 :             else
; 1557 :             {
; 1558 :                 SetLastError (ERROR_INVALID_PARAMETER);
; 1559 :                 rc = ESC_FAILED;
; 1560 :                 break;
; 1561 :             }
; 1562 :             break;

  0037c	ea000217	 b           |$LN188@DrvEscape|
  00380		 |$LN43@DrvEscape|

; 1730 :                 }
; 1731 :             }
; 1732 : 
; 1733 :             //  Always return success
; 1734 :             rc = ESC_SUCCESS;
; 1735 :             break;            
; 1736 : 
; 1737 :         case GETPOWERMANAGEMENT:
; 1738 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: GETPOWERMANAGEMENT\r\n"));
; 1739 :             if( (cjOut >= sizeof(VIDEO_POWER_MANAGEMENT)) && (pvOut != NULL) )

  00380	e59b3004	 ldr         r3, [r11, #4]
  00384	e353000c	 cmp         r3, #0xC
  00388	3a000077	 bcc         |$LN109@DrvEscape|
  0038c	e59b2008	 ldr         r2, [r11, #8]
  00390	e3520000	 cmp         r2, #0
  00394	0a000074	 beq         |$LN109@DrvEscape|

; 1740 :             {
; 1741 :                 PVIDEO_POWER_MANAGEMENT pvpm = (PVIDEO_POWER_MANAGEMENT)pvOut;
; 1742 :                 pvpm->Length = sizeof(VIDEO_POWER_MANAGEMENT);

  00398	e3a0300c	 mov         r3, #0xC

; 1743 :                 pvpm->DPMSVersion = 0;

  0039c	e3a01000	 mov         r1, #0
  003a0	e5823000	 str         r3, [r2]
  003a4	e5821004	 str         r1, [r2, #4]

; 1744 :                 
; 1745 :                 //  Convert from Dx state to Video PM state
; 1746 :                 switch( m_pDisplayContr->GetPowerLevel() ) 

  003a8	e59530b0	 ldr         r3, [r5, #0xB0]
  003ac	e593348c	 ldr         r3, [r3, #0x48C]
  003b0	e3530001	 cmp         r3, #1
  003b4	9a000011	 bls         |$LN39@DrvEscape|
  003b8	e3530002	 cmp         r3, #2
  003bc	0a00000b	 beq         |$LN38@DrvEscape|
  003c0	e3530003	 cmp         r3, #3
  003c4	0a000005	 beq         |$LN37@DrvEscape|
  003c8	e3530004	 cmp         r3, #4
  003cc	1a000064	 bne         |$LN104@DrvEscape|

; 1757 :                         break;
; 1758 :                     case D4:                
; 1759 :                         pvpm->PowerState = VideoPowerOff;

  003d0	e3a03004	 mov         r3, #4

; 1747 :                 {
; 1748 :                     case D0:
; 1749 :                     case D1:
; 1750 :                         pvpm->PowerState = VideoPowerOn;

  003d4	e5823008	 str         r3, [r2, #8]

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  003d8	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  003dc	ea0001ff	 b           |$LN188@DrvEscape|
  003e0		 |$LN37@DrvEscape|

; 1754 :                         break;
; 1755 :                     case D3:
; 1756 :                         pvpm->PowerState = VideoPowerSuspend;

  003e0	e3a03003	 mov         r3, #3

; 1747 :                 {
; 1748 :                     case D0:
; 1749 :                     case D1:
; 1750 :                         pvpm->PowerState = VideoPowerOn;

  003e4	e5823008	 str         r3, [r2, #8]

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  003e8	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  003ec	ea0001fb	 b           |$LN188@DrvEscape|
  003f0		 |$LN38@DrvEscape|

; 1751 :                         break;
; 1752 :                     case D2:
; 1753 :                         pvpm->PowerState = VideoPowerStandBy;

  003f0	e3a03002	 mov         r3, #2

; 1747 :                 {
; 1748 :                     case D0:
; 1749 :                     case D1:
; 1750 :                         pvpm->PowerState = VideoPowerOn;

  003f4	e5823008	 str         r3, [r2, #8]

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  003f8	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  003fc	ea0001f7	 b           |$LN188@DrvEscape|
  00400		 |$LN39@DrvEscape|

; 1747 :                 {
; 1748 :                     case D0:
; 1749 :                     case D1:
; 1750 :                         pvpm->PowerState = VideoPowerOn;

  00400	e3a03001	 mov         r3, #1
  00404	e5823008	 str         r3, [r2, #8]

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  00408	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  0040c	ea0001f3	 b           |$LN188@DrvEscape|
  00410		 |$LN34@DrvEscape|

; 1760 :                         break;
; 1761 :                 }
; 1762 :                 
; 1763 :                 rc = ESC_SUCCESS;
; 1764 :             }
; 1765 :             else
; 1766 :             {
; 1767 :                 SetLastError (ERROR_INVALID_PARAMETER);
; 1768 :                 rc = ESC_FAILED;
; 1769 :             }
; 1770 :             break;
; 1771 : 
; 1772 :         case SETPOWERMANAGEMENT:
; 1773 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: SETPOWERMANAGEMENT\r\n"));
; 1774 :             if( (cjIn >= sizeof(VIDEO_POWER_MANAGEMENT)) && (pvIn != NULL) )

  00410	e356000c	 cmp         r6, #0xC
  00414	3a000054	 bcc         |$LN109@DrvEscape|
  00418	e59b2000	 ldr         r2, [r11]
  0041c	e3520000	 cmp         r2, #0
  00420	0a000051	 beq         |$LN109@DrvEscape|

; 1775 :             {
; 1776 :                 PVIDEO_POWER_MANAGEMENT pvpm = (PVIDEO_POWER_MANAGEMENT)pvIn;
; 1777 :                 if (pvpm->Length >= sizeof(VIDEO_POWER_MANAGEMENT) )

  00424	e5923000	 ldr         r3, [r2]
  00428	e353000c	 cmp         r3, #0xC
  0042c	3a0001eb	 bcc         |$LN188@DrvEscape|

; 1778 :                 {
; 1779 :                     //  Convert from Video PM state to Dx state
; 1780 :                     switch (pvpm->PowerState) 

  00430	e5923008	 ldr         r3, [r2, #8]
  00434	e3530001	 cmp         r3, #1
  00438	0a00000b	 beq         |$LN29@DrvEscape|
  0043c	e3530002	 cmp         r3, #2
  00440	0a000007	 beq         |$LN28@DrvEscape|
  00444	e3530003	 cmp         r3, #3
  00448	0a000003	 beq         |$LN27@DrvEscape|
  0044c	e3530004	 cmp         r3, #4
  00450	1a000043	 bne         |$LN104@DrvEscape|

; 1791 :                         case VideoPowerOff:                
; 1792 :                             m_pDisplayContr->SetPowerLevel(D4);

  00454	e3a01004	 mov         r1, #4

; 1793 :                             break;

  00458	ea000004	 b           |$LN236@DrvEscape|
  0045c		 |$LN27@DrvEscape|

; 1788 :                         case VideoPowerSuspend:
; 1789 :                             m_pDisplayContr->SetPowerLevel(D3);

  0045c	e3a01003	 mov         r1, #3

; 1790 :                             break;

  00460	ea000002	 b           |$LN236@DrvEscape|
  00464		 |$LN28@DrvEscape|

; 1784 :                             break;
; 1785 :                         case VideoPowerStandBy:
; 1786 :                             m_pDisplayContr->SetPowerLevel(D2);

  00464	e3a01002	 mov         r1, #2

; 1787 :                             break;

  00468	ea000000	 b           |$LN236@DrvEscape|
  0046c		 |$LN29@DrvEscape|

; 1781 :                     {
; 1782 :                         case VideoPowerOn:
; 1783 :                             m_pDisplayContr->SetPowerLevel(D0);

  0046c	e3a01000	 mov         r1, #0
  00470		 |$LN236@DrvEscape|
  00470	e59500b0	 ldr         r0, [r5, #0xB0]
  00474	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  00478	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  0047c	ea0001d7	 b           |$LN188@DrvEscape|
  00480		 |$LN110@DrvEscape|

; 1297 :     {
; 1298 :         case QUERYESCSUPPORT:
; 1299 :             if (cjIn == sizeof(DWORD))

  00480	e3560004	 cmp         r6, #4
  00484	1a000038	 bne         |$LN109@DrvEscape|

; 1300 :             {
; 1301 :                 DWORD   val = *(DWORD *)pvIn;

  00488	e59b3000	 ldr         r3, [r11]

; 1302 : 
; 1303 :                 //  Check for display perf IOCTLs
; 1304 : #pragma warning (push)
; 1305 : #pragma warning (disable:4127)
; 1306 :                 if( DispPerfQueryEsc(val) )
; 1307 :                     rc = ESC_SUCCESS;
; 1308 : #pragma warning (pop)
; 1309 : 
; 1310 :                 switch ( val )

  0048c	e3a02832	 mov         r2, #0x32, 16
  00490	e3821a01	 orr         r1, r2, #1, 20
  00494	e5932000	 ldr         r2, [r3]
  00498	e1520001	 cmp         r2, r1
  0049c	8a000024	 bhi         |$LN117@DrvEscape|
  004a0	0a00002f	 beq         |$LN104@DrvEscape|
  004a4	e59f37ac	 ldr         r3, [pc, #0x7AC]
  004a8	e1520003	 cmp         r2, r3
  004ac	e3a03b61	 mov         r3, #0x61, 22
  004b0	8a000018	 bhi         |$LN118@DrvEscape|
  004b4	e3833e2a	 orr         r3, r3, #0x2A, 28
  004b8	e1520003	 cmp         r2, r3
  004bc	2a000028	 bcs         |$LN104@DrvEscape|
  004c0	e3a03b06	 mov         r3, #6, 22
  004c4	e3833003	 orr         r3, r3, #3
  004c8	e1520003	 cmp         r2, r3
  004cc	3a0001c3	 bcc         |$LN188@DrvEscape|
  004d0	e3a03b06	 mov         r3, #6, 22
  004d4	e3833005	 orr         r3, r3, #5
  004d8	e1520003	 cmp         r2, r3
  004dc	9a000020	 bls         |$LN104@DrvEscape|
  004e0	e3a03b06	 mov         r3, #6, 22
  004e4	e383309d	 orr         r3, r3, #0x9D
  004e8	e0423003	 sub         r3, r2, r3
  004ec	e3530001	 cmp         r3, #1
  004f0	8a0001ba	 bhi         |$LN188@DrvEscape|

; 1311 :                 {
; 1312 :                     case DRVESC_GETSCREENROTATION:
; 1313 :                     case DRVESC_SETSCREENROTATION:
; 1314 :                         //  Return OK only if surface manager supports rotation
; 1315 :                         rc = (m_pSurfaceMgr->SupportsRotation() == TRUE) ? ESC_SUCCESS : ESC_FAILED;

  004f4	e59500b4	 ldr         r0, [r5, #0xB4]
  004f8	e5903000	 ldr         r3, [r0]
  004fc	e5933020	 ldr         r3, [r3, #0x20]
  00500	e1a0e00f	 mov         lr, pc
  00504	e12fff13	 bx          r3
  00508	e3500001	 cmp         r0, #1
  0050c	1a000018	 bne         |$LN4@DrvEscape|

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  00510	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  00514	ea0001b1	 b           |$LN188@DrvEscape|
  00518		 |$LN118@DrvEscape|

; 1302 : 
; 1303 :                 //  Check for display perf IOCTLs
; 1304 : #pragma warning (push)
; 1305 : #pragma warning (disable:4127)
; 1306 :                 if( DispPerfQueryEsc(val) )
; 1307 :                     rc = ESC_SUCCESS;
; 1308 : #pragma warning (pop)
; 1309 : 
; 1310 :                 switch ( val )

  00518	e3833fad	 orr         r3, r3, #0xAD, 30
  0051c	e1520003	 cmp         r2, r3
  00520	3a0001ae	 bcc         |$LN188@DrvEscape|
  00524	e59f3728	 ldr         r3, [pc, #0x728]
  00528	e1520003	 cmp         r2, r3
  0052c	9a00000c	 bls         |$LN104@DrvEscape|
  00530	ea0001aa	 b           |$LN188@DrvEscape|
  00534		 |$LN117@DrvEscape|
  00534	e59f3720	 ldr         r3, [pc, #0x720]
  00538	e1520003	 cmp         r2, r3
  0053c	0a000008	 beq         |$LN104@DrvEscape|
  00540	e59f3708	 ldr         r3, [pc, #0x708]
  00544	e1520003	 cmp         r2, r3
  00548	0a000005	 beq         |$LN104@DrvEscape|
  0054c	e59f36f8	 ldr         r3, [pc, #0x6F8]
  00550	e1520003	 cmp         r2, r3
  00554	0a000002	 beq         |$LN104@DrvEscape|
  00558	e59f36e8	 ldr         r3, [pc, #0x6E8]
  0055c	e1520003	 cmp         r2, r3
  00560	1a00019e	 bne         |$LN188@DrvEscape|
  00564		 |$LN104@DrvEscape|

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  00564	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  00568	ea00019c	 b           |$LN188@DrvEscape|
  0056c		 |$LN109@DrvEscape|

; 1335 :                         break;
; 1336 :                 }
; 1337 :             }
; 1338 :             else
; 1339 :             {
; 1340 :                 SetLastError (ERROR_INVALID_PARAMETER);

  0056c	e3a00057	 mov         r0, #0x57
  00570	eb000000	 bl          SetLastError
  00574		 |$LN4@DrvEscape|

; 1341 :                 rc = ESC_FAILED;

  00574	e3e04000	 mvn         r4, #0

; 1342 :                 break;

  00578	ea000198	 b           |$LN188@DrvEscape|
  0057c		 |$LN102@DrvEscape|

; 1345 : 
; 1346 :         case DRVESC_GETSCREENROTATION:
; 1347 :             //  Only if the surface manager supports rotation
; 1348 :             if( m_pSurfaceMgr->SupportsRotation() == TRUE )

  0057c	e59500b4	 ldr         r0, [r5, #0xB4]
  00580	e5903000	 ldr         r3, [r0]
  00584	e5933020	 ldr         r3, [r3, #0x20]
  00588	e1a0e00f	 mov         lr, pc
  0058c	e12fff13	 bx          r3
  00590	e3500001	 cmp         r0, #1
  00594	1a000191	 bne         |$LN188@DrvEscape|

; 1349 :             {
; 1350 :                 /* Since WinCE always considers the boot-up width and height to be 0 degree orientation,
; 1351 :                    we need to manipulate the m_iGraphicsRotate rotation angle when the device has booted up in 90,180 or 270
; 1352 :                    orientation (specified through registry setting and stored in g_Globals.m_dwRotationAngle) */
; 1353 : 
; 1354 :             //  Get state of graphics plane rotation
; 1355 :                 DWORD graphicsRotate = getOrientation((getAngle(m_iGraphicsRotate)-getAngle(g_Globals.m_dwRotationAngle)+360)%360);

  00598	e5950098	 ldr         r0, [r5, #0x98]
  0059c	eb000000	 bl          |?getAngle@@YAKK@Z|
  005a0	e59f369c	 ldr         r3, [pc, #0x69C]
  005a4	e1a04000	 mov         r4, r0
  005a8	e5930004	 ldr         r0, [r3, #4]
  005ac	eb000000	 bl          |?getAngle@@YAKK@Z|
  005b0	e0443000	 sub         r3, r4, r0
  005b4	e59f26ac	 ldr         r2, [pc, #0x6AC]
  005b8	e2830f5a	 add         r0, r3, #0x5A, 30
  005bc	e3a0ef5a	 mov         lr, #0x5A, 30
  005c0	e0821290	 umull       r1, r2, r0, r2
  005c4	e0403002	 sub         r3, r0, r2
  005c8	e08230a3	 add         r3, r2, r3, lsr #1
  005cc	e1a03423	 mov         r3, r3, lsr #8
  005d0	e0020e93	 mul         r2, r3, lr
  005d4	e0400002	 sub         r0, r0, r2
  005d8	eb000000	 bl          |?getOrientation@@YAKK@Z|

; 1356 :                 *(int *)pvOut = ((DMDO_0 | DMDO_90 | DMDO_180 | DMDO_270) << 8) | ((BYTE)graphicsRotate);

  005dc	e20030ff	 and         r3, r0, #0xFF
  005e0	e59b2008	 ldr         r2, [r11, #8]
  005e4	e3833c07	 orr         r3, r3, #7, 24

; 1357 :             rc = DISP_CHANGE_SUCCESSFUL;

  005e8	e3a04000	 mov         r4, #0
  005ec	e5823000	 str         r3, [r2]

; 1358 :             }
; 1359 :             break;

  005f0	ea00017a	 b           |$LN188@DrvEscape|
  005f4		 |$LN144@DrvEscape|
  005f4	e3a03b06	 mov         r3, #6, 22

; 1290 :     int    rc = ESC_NOT_SUPPORTED;    // Default not supported
; 1291 : 
; 1292 :     UNREFERENCED_PARAMETER(pso);
; 1293 : 
; 1294 :     DEBUGMSG (GPE_ZONE_ENTER, (TEXT("OMAPDDGPE::DrvEscape\r\n")));
; 1295 : 
; 1296 :     switch (iEsc)

  005f8	e383309f	 orr         r3, r3, #0x9F
  005fc	e1520003	 cmp         r2, r3
  00600	0a000061	 beq         |$LN100@DrvEscape|
  00604	e3a03b06	 mov         r3, #6, 22
  00608	e38330a0	 orr         r3, r3, #0xA0
  0060c	e1520003	 cmp         r2, r3
  00610	0a000045	 beq         |$LN98@DrvEscape|
  00614	e3a03b61	 mov         r3, #0x61, 22
  00618	e3833e2a	 orr         r3, r3, #0x2A, 28
  0061c	e1520003	 cmp         r2, r3
  00620	0a000032	 beq         |$LN68@DrvEscape|
  00624	e59f3638	 ldr         r3, [pc, #0x638]
  00628	e1520003	 cmp         r2, r3
  0062c	0a000022	 beq         |$LN65@DrvEscape|
  00630	e59f3628	 ldr         r3, [pc, #0x628]
  00634	e1520003	 cmp         r2, r3
  00638	1a000168	 bne         |$LN188@DrvEscape|

; 1589 :                 }
; 1590 : 
; 1591 :             //  Always return success
; 1592 :             rc = ESC_SUCCESS;
; 1593 :             break;
; 1594 : 
; 1595 :         case DRVESC_TVOUT_GETSETTINGS:
; 1596 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_TVOUT_GETSETTINGS\r\n"));
; 1597 :             if (pvOut != NULL && cjOut == sizeof(DRVESC_TVOUT_SETTINGS))

  0063c	e59b6008	 ldr         r6, [r11, #8]
  00640	e3560000	 cmp         r6, #0
  00644	0a000165	 beq         |$LN188@DrvEscape|
  00648	e59b3004	 ldr         r3, [r11, #4]
  0064c	e3530020	 cmp         r3, #0x20
  00650	1a000162	 bne         |$LN188@DrvEscape|
  00654		 |$LN151@DrvEscape|

; 1598 :             {
; 1599 :                 __try
; 1600 :                 {
; 1601 :                     DRVESC_TVOUT_SETTINGS* pSettings = (DRVESC_TVOUT_SETTINGS*) pvOut;
; 1602 :                     memset(pSettings, 0, sizeof(DRVESC_TVOUT_SETTINGS));

  00654	e3a02020	 mov         r2, #0x20
  00658	e3a01000	 mov         r1, #0
  0065c	e1a00006	 mov         r0, r6
  00660	eb000000	 bl          memset

; 1603 : 
; 1604 :                     //  Get the current settings
; 1605 :                     pSettings->bEnable          = m_bTVOutEnable;

  00664	e5953110	 ldr         r3, [r5, #0x110]
  00668	e5863000	 str         r3, [r6]

; 1606 :                     pSettings->dwFilterLevel    = m_dwTvOut_FilterLevel;

  0066c	e5953114	 ldr         r3, [r5, #0x114]
  00670	e5863004	 str         r3, [r6, #4]

; 1607 :                     pSettings->dwAspectRatioW   = m_dwTvOut_AspectRatio_W;

  00674	e5953118	 ldr         r3, [r5, #0x118]
  00678	e5863008	 str         r3, [r6, #8]

; 1608 :                     pSettings->dwAspectRatioH   = m_dwTvOut_AspectRatio_H;

  0067c	e595311c	 ldr         r3, [r5, #0x11C]
  00680	e586300c	 str         r3, [r6, #0xC]

; 1609 :                     pSettings->dwResizePercentW = m_dwTvOut_Resize_W;

  00684	e5953120	 ldr         r3, [r5, #0x120]
  00688	e5863010	 str         r3, [r6, #0x10]

; 1610 :                     pSettings->dwResizePercentH = m_dwTvOut_Resize_H;

  0068c	e5953124	 ldr         r3, [r5, #0x124]
  00690	e5863014	 str         r3, [r6, #0x14]

; 1611 :                     pSettings->lOffsetW         = m_lTvOut_Offset_W;

  00694	e5953128	 ldr         r3, [r5, #0x128]
  00698	e5863018	 str         r3, [r6, #0x18]

; 1612 :                     pSettings->lOffsetH         = m_lTvOut_Offset_H;

  0069c	e595312c	 ldr         r3, [r5, #0x12C]
  006a0	e586301c	 str         r3, [r6, #0x1C]

; 1613 : 
; 1614 :                     rc = ESC_SUCCESS;

  006a4	e3a04001	 mov         r4, #1
  006a8	e50b4020	 str         r4, [r11, #-0x20]
  006ac		 |$LN152@DrvEscape|

; 1615 :                 }

  006ac	ea00014b	 b           |$LN188@DrvEscape|
  006b0		 |$LN148@DrvEscape|

; 1617 :                 {
; 1618 :                     rc = ESC_FAILED;

  006b0	e3e04000	 mvn         r4, #0
  006b4	e50b4020	 str         r4, [r11, #-0x20]
  006b8	ea000148	 b           |$LN188@DrvEscape|
  006bc		 |$LN65@DrvEscape|

; 1574 :                 }
; 1575 :             }
; 1576 : 
; 1577 :             //  Always return success
; 1578 :             rc = ESC_SUCCESS;
; 1579 :             break;            
; 1580 :             
; 1581 :         case DRVESC_TVOUT_DISABLE:
; 1582 :             //  Disable TV out
; 1583 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_TVOUT_DISABLE\r\n"));
; 1584 :             if( m_bTVOutEnable )

  006bc	e5953110	 ldr         r3, [r5, #0x110]
  006c0	e3530000	 cmp         r3, #0
  006c4	0affffa6	 beq         |$LN104@DrvEscape|

; 1585 :             {
; 1586 :                     m_bTVOutEnable = FALSE;

  006c8	e3a03000	 mov         r3, #0
  006cc	e5853110	 str         r3, [r5, #0x110]

; 1587 :                     DetermineTvOutSurface();

  006d0	e3a01000	 mov         r1, #0
  006d4	e1a00005	 mov         r0, r5
  006d8	eb000000	 bl          |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|

; 1588 :                 m_pDisplayContr->EnableTvOut(FALSE);

  006dc	e59500b0	 ldr         r0, [r5, #0xB0]
  006e0	e3a01000	 mov         r1, #0
  006e4	eb000000	 bl          |?EnableTvOut@OMAPDisplayController@@QAAHH@Z|

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  006e8	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  006ec	ea00013b	 b           |$LN188@DrvEscape|
  006f0		 |$LN68@DrvEscape|

; 1563 : 
; 1564 : 
; 1565 :         case DRVESC_TVOUT_ENABLE:
; 1566 :             //  Enable TV out
; 1567 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_TVOUT_ENABLE\r\n"));
; 1568 :             if( !m_bTVOutEnable )

  006f0	e5953110	 ldr         r3, [r5, #0x110]
  006f4	e3530000	 cmp         r3, #0
  006f8	1affff99	 bne         |$LN104@DrvEscape|

; 1569 :             {
; 1570 :                 if( m_pDisplayContr->EnableTvOut(TRUE) )

  006fc	e59500b0	 ldr         r0, [r5, #0xB0]
  00700	e3a01001	 mov         r1, #1
  00704	eb000000	 bl          |?EnableTvOut@OMAPDisplayController@@QAAHH@Z|
  00708	e3500000	 cmp         r0, #0
  0070c	0affff94	 beq         |$LN104@DrvEscape|

; 1571 :                 {
; 1572 :                     m_bTVOutEnable = TRUE;

  00710	e3a03001	 mov         r3, #1
  00714	e5853110	 str         r3, [r5, #0x110]

; 1573 :                     DetermineTvOutSurface();

  00718	e3a01000	 mov         r1, #0
  0071c	e1a00005	 mov         r0, r5
  00720	eb000000	 bl          |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  00724	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  00728	ea00012c	 b           |$LN188@DrvEscape|
  0072c		 |$LN98@DrvEscape|

; 1370 :             
; 1371 :         case DRVESC_ENDSCREENROTATION:
; 1372 :             DEBUGMSG(GPE_ZONE_VIDEOMEMORY, (TEXT("DRVESC_ENDSCREENROTATION: cjIn = %d\r\n"), cjIn));
; 1373 : 
; 1374 :             /* Wait for DRVESC_ENDSCREENROTATION to enable the pipelines to reduce the amount of 
; 1375 :                flickr seen during rotation */
; 1376 :             //  End of screen rotation
; 1377 :             if( m_pSurfaceMgr->SupportsRotation() == TRUE )

  0072c	e59500b4	 ldr         r0, [r5, #0xB4]
  00730	e5903000	 ldr         r3, [r0]
  00734	e5933020	 ldr         r3, [r3, #0x20]
  00738	e1a0e00f	 mov         lr, pc
  0073c	e12fff13	 bx          r3
  00740	e3500001	 cmp         r0, #1
  00744	1a000125	 bne         |$LN188@DrvEscape|

; 1378 :             {
; 1379 :                 Lock();

  00748	e5953000	 ldr         r3, [r5]
  0074c	e1a00005	 mov         r0, r5
  00750	e59330ec	 ldr         r3, [r3, #0xEC]
  00754	e1a0e00f	 mov         lr, pc
  00758	e12fff13	 bx          r3

; 1380 :                 //  Re-enable the primary pipeline to have the rotation take effect
; 1381 :                 m_pDisplayContr->EnablePipeline( OMAP_DSS_PIPELINE_GFX );

  0075c	e59500b0	 ldr         r0, [r5, #0xB0]
  00760	e3a01000	 mov         r1, #0
  00764	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|

; 1382 : 
; 1383 :                 //  Get the best surface to display on the TV
; 1384 :                 DetermineTvOutSurface();

  00768	e3a01000	 mov         r1, #0
  0076c	e1a00005	 mov         r0, r5
  00770	eb000000	 bl          |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|

; 1385 :                 Unlock();

  00774	e5953000	 ldr         r3, [r5]
  00778	e1a00005	 mov         r0, r5
  0077c	e59330f0	 ldr         r3, [r3, #0xF0]
  00780	e1a0e00f	 mov         lr, pc
  00784	e12fff13	 bx          r3

; 1386 :             }
; 1387 :             break;

  00788	ea000114	 b           |$LN188@DrvEscape|
  0078c		 |$LN100@DrvEscape|

; 1360 :             
; 1361 :         case DRVESC_BEGINSCREENROTATION:
; 1362 :             DEBUGMSG(GPE_ZONE_VIDEOMEMORY, (TEXT("DRVESC_BEGINSCREENROTATION: cjIn = %d\r\n"), cjIn));
; 1363 : 
; 1364 :             //  Start of screen rotation
; 1365 :             if( m_pSurfaceMgr->SupportsRotation() == TRUE )

  0078c	e59500b4	 ldr         r0, [r5, #0xB4]
  00790	e5903000	 ldr         r3, [r0]
  00794	e5933020	 ldr         r3, [r3, #0x20]
  00798	e1a0e00f	 mov         lr, pc
  0079c	e12fff13	 bx          r3

; 1366 :             {
; 1367 :                 /* Do Nothing */ 
; 1368 :             }
; 1369 :             break;

  007a0	ea00010e	 b           |$LN188@DrvEscape|
  007a4		 |$LN60@DrvEscape|

; 1619 :                 }
; 1620 :             }
; 1621 :             break;
; 1622 : 
; 1623 :         case DRVESC_TVOUT_SETSETTINGS:
; 1624 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_TVOUT_SETSETTINGS\r\n"));
; 1625 :             if (pvIn != NULL && cjIn == sizeof(DRVESC_TVOUT_SETTINGS))

  007a4	e59be000	 ldr         lr, [r11]
  007a8	e35e0000	 cmp         lr, #0
  007ac	0a00010b	 beq         |$LN188@DrvEscape|
  007b0	e3560020	 cmp         r6, #0x20
  007b4	1a000109	 bne         |$LN188@DrvEscape|
  007b8		 |$LN158@DrvEscape|

; 1626 :             {
; 1627 :                 __try
; 1628 :                 {
; 1629 :                     DRVESC_TVOUT_SETTINGS* pSettings = (DRVESC_TVOUT_SETTINGS*) pvIn;
; 1630 : 
; 1631 :                     //  Validate the settings
; 1632 :                     pSettings->bEnable          = (pSettings->bEnable == 0) ? FALSE : TRUE;

  007b8	e59e3000	 ldr         r3, [lr]
  007bc	e3530000	 cmp         r3, #0
  007c0	03a04000	 moveq       r4, #0
  007c4	13a04001	 movne       r4, #1
  007c8	e58e4000	 str         r4, [lr]

; 1633 :                     
; 1634 :                     pSettings->dwFilterLevel = (pSettings->dwFilterLevel <= TVOUT_SETTINGS_MAX_FILTER) ? pSettings->dwFilterLevel : TVOUT_SETTINGS_MAX_FILTER;

  007cc	e59e3004	 ldr         r3, [lr, #4]
  007d0	e3530000	 cmp         r3, #0
  007d4	13a03000	 movne       r3, #0
  007d8	e1a0200e	 mov         r2, lr
  007dc	e5a23004	 str         r3, [r2, #4]!

; 1635 :                     pSettings->dwFilterLevel = (pSettings->dwFilterLevel >= TVOUT_SETTINGS_MIN_FILTER) ? pSettings->dwFilterLevel : TVOUT_SETTINGS_MIN_FILTER;

  007e0	e59e3004	 ldr         r3, [lr, #4]
  007e4	e5823000	 str         r3, [r2]

; 1636 :                     
; 1637 :                     if( (pSettings->dwAspectRatioW >= pSettings->dwAspectRatioH) && (pSettings->dwAspectRatioW - pSettings->dwAspectRatioH < TVOUT_SETTINGS_DIFF_ASPECT) )

  007e8	e59e2008	 ldr         r2, [lr, #8]
  007ec	e59e100c	 ldr         r1, [lr, #0xC]
  007f0	e1520001	 cmp         r2, r1
  007f4	3a000013	 bcc         |$LN57@DrvEscape|
  007f8	e0423001	 sub         r3, r2, r1
  007fc	e3530008	 cmp         r3, #8
  00800	2a000010	 bcs         |$LN57@DrvEscape|

; 1638 :                     {
; 1639 :                         pSettings->dwAspectRatioW   = (pSettings->dwAspectRatioW <= TVOUT_SETTINGS_MAX_ASPECT) ? pSettings->dwAspectRatioW : TVOUT_SETTINGS_MAX_ASPECT;

  00804	e3520014	 cmp         r2, #0x14
  00808	83a02014	 movhi       r2, #0x14
  0080c	e1a0000e	 mov         r0, lr
  00810	e5a02008	 str         r2, [r0, #8]!

; 1640 :                         pSettings->dwAspectRatioW   = (pSettings->dwAspectRatioW >= TVOUT_SETTINGS_MIN_ASPECT) ? pSettings->dwAspectRatioW : TVOUT_SETTINGS_MIN_ASPECT;

  00814	e59e3008	 ldr         r3, [lr, #8]
  00818	e3530001	 cmp         r3, #1
  0081c	33a03001	 movcc       r3, #1
  00820	e5803000	 str         r3, [r0]

; 1641 :                         pSettings->dwAspectRatioH   = (pSettings->dwAspectRatioH <= TVOUT_SETTINGS_MAX_ASPECT) ? pSettings->dwAspectRatioH : TVOUT_SETTINGS_MAX_ASPECT;

  00824	e3510014	 cmp         r1, #0x14
  00828	83a01014	 movhi       r1, #0x14
  0082c	e1a0200e	 mov         r2, lr
  00830	e5a2100c	 str         r1, [r2, #0xC]!

; 1642 :                         pSettings->dwAspectRatioH   = (pSettings->dwAspectRatioH >= TVOUT_SETTINGS_MIN_ASPECT) ? pSettings->dwAspectRatioH : TVOUT_SETTINGS_MIN_ASPECT;

  00834	e59e300c	 ldr         r3, [lr, #0xC]
  00838	e3530001	 cmp         r3, #1
  0083c	33a03001	 movcc       r3, #1
  00840	e5823000	 str         r3, [r2]

; 1643 :                     }
; 1644 :                     else

  00844	ea000003	 b           |$LN56@DrvEscape|
  00848		 |$LN57@DrvEscape|

; 1645 :                     {
; 1646 :                         //  Don't change aspect ratio - out of tolerances
; 1647 :                         pSettings->dwAspectRatioW = m_dwTvOut_AspectRatio_W;

  00848	e5953118	 ldr         r3, [r5, #0x118]
  0084c	e58e3008	 str         r3, [lr, #8]

; 1648 :                         pSettings->dwAspectRatioH = m_dwTvOut_AspectRatio_H;

  00850	e595311c	 ldr         r3, [r5, #0x11C]
  00854	e58e300c	 str         r3, [lr, #0xC]
  00858		 |$LN56@DrvEscape|

; 1649 :                     }
; 1650 :                     
; 1651 :                     pSettings->dwResizePercentW = (pSettings->dwResizePercentW <= TVOUT_SETTINGS_MAX_RESIZE) ? pSettings->dwResizePercentW : TVOUT_SETTINGS_MAX_RESIZE;

  00858	e59e3010	 ldr         r3, [lr, #0x10]
  0085c	e3530064	 cmp         r3, #0x64
  00860	83a03064	 movhi       r3, #0x64
  00864	e1a0200e	 mov         r2, lr
  00868	e5a23010	 str         r3, [r2, #0x10]!

; 1652 :                     pSettings->dwResizePercentW = (pSettings->dwResizePercentW >= TVOUT_SETTINGS_MIN_RESIZE) ? pSettings->dwResizePercentW : TVOUT_SETTINGS_MIN_RESIZE;

  0086c	e59e3010	 ldr         r3, [lr, #0x10]
  00870	e3530050	 cmp         r3, #0x50
  00874	33a03050	 movcc       r3, #0x50
  00878	e5823000	 str         r3, [r2]

; 1653 :                     pSettings->dwResizePercentH = (pSettings->dwResizePercentH <= TVOUT_SETTINGS_MAX_RESIZE) ? pSettings->dwResizePercentH : TVOUT_SETTINGS_MAX_RESIZE;

  0087c	e59e3014	 ldr         r3, [lr, #0x14]
  00880	e3530064	 cmp         r3, #0x64
  00884	83a03064	 movhi       r3, #0x64
  00888	e1a0200e	 mov         r2, lr
  0088c	e5a23014	 str         r3, [r2, #0x14]!

; 1654 :                     pSettings->dwResizePercentH = (pSettings->dwResizePercentH >= TVOUT_SETTINGS_MIN_RESIZE) ? pSettings->dwResizePercentH : TVOUT_SETTINGS_MIN_RESIZE;                

  00890	e59e3014	 ldr         r3, [lr, #0x14]
  00894	e3530050	 cmp         r3, #0x50
  00898	33a03050	 movcc       r3, #0x50
  0089c	e5823000	 str         r3, [r2]

; 1655 : 
; 1656 :                     //  Save the settings
; 1657 :                     m_bTVOutEnable          = pSettings->bEnable;

  008a0	e5854110	 str         r4, [r5, #0x110]

; 1658 :                     m_dwTvOut_FilterLevel   = pSettings->dwFilterLevel;

  008a4	e59e3004	 ldr         r3, [lr, #4]

; 1659 :                     m_dwTvOut_AspectRatio_W = pSettings->dwAspectRatioW;
; 1660 :                     m_dwTvOut_AspectRatio_H = pSettings->dwAspectRatioH;
; 1661 :                     m_dwTvOut_Resize_W      = pSettings->dwResizePercentW;
; 1662 :                     m_dwTvOut_Resize_H      = pSettings->dwResizePercentH;
; 1663 :                     m_lTvOut_Offset_W       = pSettings->lOffsetW;
; 1664 :                     m_lTvOut_Offset_H       = pSettings->lOffsetH;
; 1665 : 
; 1666 :                     //  Configure TV out based on the new settings
; 1667 :                     DetermineTvOutSurface(TRUE);

  008a8	e3a01001	 mov         r1, #1
  008ac	e1a00005	 mov         r0, r5
  008b0	e5853114	 str         r3, [r5, #0x114]
  008b4	e59e3008	 ldr         r3, [lr, #8]
  008b8	e5853118	 str         r3, [r5, #0x118]
  008bc	e59e300c	 ldr         r3, [lr, #0xC]
  008c0	e585311c	 str         r3, [r5, #0x11C]
  008c4	e59e3010	 ldr         r3, [lr, #0x10]
  008c8	e5853120	 str         r3, [r5, #0x120]
  008cc	e59e3014	 ldr         r3, [lr, #0x14]
  008d0	e5853124	 str         r3, [r5, #0x124]
  008d4	e59e3018	 ldr         r3, [lr, #0x18]
  008d8	e5853128	 str         r3, [r5, #0x128]
  008dc	e59e301c	 ldr         r3, [lr, #0x1C]
  008e0	e585312c	 str         r3, [r5, #0x12C]
  008e4	eb000000	 bl          |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|

; 1668 :                     rc = ESC_SUCCESS;

  008e8	e3a04001	 mov         r4, #1
  008ec	e50b4020	 str         r4, [r11, #-0x20]
  008f0		 |$LN159@DrvEscape|

; 1669 :                 }

  008f0	ea0000ba	 b           |$LN188@DrvEscape|
  008f4		 |$LN155@DrvEscape|

; 1671 :                 {
; 1672 :                     rc = ESC_FAILED;

  008f4	e3e04000	 mvn         r4, #0
  008f8	e50b4020	 str         r4, [r11, #-0x20]
  008fc	ea0000b7	 b           |$LN188@DrvEscape|
  00900		 |$LN143@DrvEscape|

; 1290 :     int    rc = ESC_NOT_SUPPORTED;    // Default not supported
; 1291 : 
; 1292 :     UNREFERENCED_PARAMETER(pso);
; 1293 : 
; 1294 :     DEBUGMSG (GPE_ZONE_ENTER, (TEXT("OMAPDDGPE::DrvEscape\r\n")));
; 1295 : 
; 1296 :     switch (iEsc)

  00900	e59f3354	 ldr         r3, [pc, #0x354]
  00904	e1520003	 cmp         r2, r3
  00908	8a000063	 bhi         |$LN145@DrvEscape|
  0090c	0a000053	 beq         |$LN18@DrvEscape|
  00910	e3a03b61	 mov         r3, #0x61, 22
  00914	e3833fa9	 orr         r3, r3, #0xA9, 30
  00918	e1520003	 cmp         r2, r3
  0091c	0a000043	 beq         |$LN55@DrvEscape|
  00920	e59f3330	 ldr         r3, [pc, #0x330]
  00924	e1520003	 cmp         r2, r3
  00928	0a000034	 beq         |$LN52@DrvEscape|
  0092c	e3a03b61	 mov         r3, #0x61, 22
  00930	e3833fad	 orr         r3, r3, #0xAD, 30
  00934	e1520003	 cmp         r2, r3
  00938	0a000024	 beq         |$LN49@DrvEscape|
  0093c	e59f3310	 ldr         r3, [pc, #0x310]
  00940	e1520003	 cmp         r2, r3
  00944	0a000015	 beq         |$LN46@DrvEscape|
  00948	e3a03832	 mov         r3, #0x32, 16
  0094c	e3833a01	 orr         r3, r3, #1, 20
  00950	e1520003	 cmp         r2, r3
  00954	1a0000a1	 bne         |$LN188@DrvEscape|

; 1794 :                     }
; 1795 : 
; 1796 :                     rc = ESC_SUCCESS;
; 1797 :                 }
; 1798 :             }
; 1799 :             else
; 1800 :             {
; 1801 :                 SetLastError (ERROR_INVALID_PARAMETER);
; 1802 :                 rc = ESC_FAILED;
; 1803 :             }
; 1804 :             break;
; 1805 : 
; 1806 :         case IOCTL_POWER_CAPABILITIES:
; 1807 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: IOCTL_POWER_CAPABILITIES\r\n"));
; 1808 :             if (pvOut != NULL && cjOut == sizeof(POWER_CAPABILITIES))

  00958	e59b5008	 ldr         r5, [r11, #8]
  0095c	e3550000	 cmp         r5, #0
  00960	0a00009e	 beq         |$LN188@DrvEscape|
  00964	e59b3004	 ldr         r3, [r11, #4]
  00968	e3530030	 cmp         r3, #0x30
  0096c	1a00009b	 bne         |$LN188@DrvEscape|
  00970		 |$LN165@DrvEscape|

; 1809 :             {
; 1810 :                 __try
; 1811 :                 {
; 1812 :                     PPOWER_CAPABILITIES ppc = (PPOWER_CAPABILITIES) pvOut;
; 1813 :                     memset(ppc, 0, sizeof(*ppc));

  00970	e3a02030	 mov         r2, #0x30
  00974	e3a01000	 mov         r1, #0
  00978	e1a00005	 mov         r0, r5
  0097c	eb000000	 bl          memset

; 1814 :                     ppc->DeviceDx = DX_MASK(D0) | DX_MASK(D1) | DX_MASK(D2) | DX_MASK(D3) | DX_MASK(D4);

  00980	e3a0301f	 mov         r3, #0x1F
  00984	e5c53000	 strb        r3, [r5]

; 1815 :                     rc = ESC_SUCCESS;

  00988	e3a04001	 mov         r4, #1
  0098c	e50b4020	 str         r4, [r11, #-0x20]
  00990		 |$LN166@DrvEscape|

; 1816 :                 }

  00990	ea000092	 b           |$LN188@DrvEscape|
  00994		 |$LN162@DrvEscape|

; 1818 :                 {
; 1819 :                     rc = ESC_FAILED;

  00994	e3e04000	 mvn         r4, #0
  00998	e50b4020	 str         r4, [r11, #-0x20]
  0099c	ea00008f	 b           |$LN188@DrvEscape|
  009a0		 |$LN46@DrvEscape|

; 1715 :                 }
; 1716 :             }
; 1717 : 
; 1718 :             //  Always return success
; 1719 :             rc = ESC_SUCCESS;
; 1720 :             break;            
; 1721 :             
; 1722 :         case DRVESC_HDMI_DISABLE:
; 1723 :             //  Disable HDMI output
; 1724 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_HDMI_DISABLE\r\n"));
; 1725 :             if( m_bHdmiEnable )

  009a0	e5953144	 ldr         r3, [r5, #0x144]
  009a4	e3530000	 cmp         r3, #0
  009a8	0afffeed	 beq         |$LN104@DrvEscape|

; 1726 :             {
; 1727 :                 if( m_pDisplayContr->EnableHdmi(FALSE) )

  009ac	e59500b0	 ldr         r0, [r5, #0xB0]
  009b0	e3a01000	 mov         r1, #0
  009b4	eb000000	 bl          |?EnableHdmi@OMAPDisplayController@@QAAHH@Z|
  009b8	e3500000	 cmp         r0, #0
  009bc	0afffee8	 beq         |$LN104@DrvEscape|

; 1728 :                 {
; 1729 :                     m_bHdmiEnable = FALSE;

  009c0	e3a03000	 mov         r3, #0

; 1713 :                 {
; 1714 :                     m_bHdmiEnable = TRUE;

  009c4	e5853144	 str         r3, [r5, #0x144]

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  009c8	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  009cc	ea000083	 b           |$LN188@DrvEscape|
  009d0		 |$LN49@DrvEscape|

; 1700 :                 }
; 1701 :             }
; 1702 : 
; 1703 :             //  Always return success
; 1704 :             rc = ESC_SUCCESS;
; 1705 :             break;
; 1706 : 
; 1707 :         case DRVESC_HDMI_ENABLE:
; 1708 :             //  Enable HDMI output
; 1709 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_HDMI_ENABLE\r\n"));
; 1710 :             if( !m_bHdmiEnable )

  009d0	e5953144	 ldr         r3, [r5, #0x144]
  009d4	e3530000	 cmp         r3, #0
  009d8	1afffee1	 bne         |$LN104@DrvEscape|

; 1711 :             {
; 1712 :                 if( m_pDisplayContr->EnableHdmi(TRUE) )

  009dc	e59500b0	 ldr         r0, [r5, #0xB0]
  009e0	e3a01001	 mov         r1, #1
  009e4	eb000000	 bl          |?EnableHdmi@OMAPDisplayController@@QAAHH@Z|
  009e8	e3500000	 cmp         r0, #0
  009ec	0afffedc	 beq         |$LN104@DrvEscape|

; 1713 :                 {
; 1714 :                     m_bHdmiEnable = TRUE;

  009f0	e3a03001	 mov         r3, #1
  009f4	e5853144	 str         r3, [r5, #0x144]

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  009f8	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  009fc	ea000077	 b           |$LN188@DrvEscape|
  00a00		 |$LN52@DrvEscape|

; 1685 :                 }
; 1686 :             }
; 1687 : 
; 1688 :             //  Always return success
; 1689 :             rc = ESC_SUCCESS;
; 1690 :             break;            
; 1691 :             
; 1692 :         case DRVESC_DVI_DISABLE:
; 1693 :             //  Disable DVI
; 1694 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_DVI_DISABLE\r\n"));
; 1695 :             if( m_bDVIEnable )

  00a00	e5953130	 ldr         r3, [r5, #0x130]
  00a04	e3530000	 cmp         r3, #0
  00a08	0afffed5	 beq         |$LN104@DrvEscape|

; 1696 :             {
; 1697 :                 if( m_pDisplayContr->EnableDVI(FALSE) )

  00a0c	e59500b0	 ldr         r0, [r5, #0xB0]
  00a10	e3a01000	 mov         r1, #0
  00a14	eb000000	 bl          |?EnableDVI@OMAPDisplayController@@QAAHH@Z|
  00a18	e3500000	 cmp         r0, #0
  00a1c	0afffed0	 beq         |$LN104@DrvEscape|

; 1698 :                 {
; 1699 :                     m_bDVIEnable = FALSE;

  00a20	e3a03000	 mov         r3, #0

; 1683 :                 {
; 1684 :                     m_bDVIEnable = TRUE;

  00a24	e5853130	 str         r3, [r5, #0x130]

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  00a28	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  00a2c	ea00006b	 b           |$LN188@DrvEscape|
  00a30		 |$LN55@DrvEscape|

; 1673 :                 }
; 1674 :             }
; 1675 :             break;
; 1676 : 
; 1677 :         case DRVESC_DVI_ENABLE:
; 1678 :             //  Enable DVI
; 1679 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_DVI_ENABLE\r\n"));
; 1680 :             if( !m_bDVIEnable )

  00a30	e5953130	 ldr         r3, [r5, #0x130]
  00a34	e3530000	 cmp         r3, #0
  00a38	1afffec9	 bne         |$LN104@DrvEscape|

; 1681 :             {
; 1682 :                 if( m_pDisplayContr->EnableDVI(TRUE) )

  00a3c	e59500b0	 ldr         r0, [r5, #0xB0]
  00a40	e3a01001	 mov         r1, #1
  00a44	eb000000	 bl          |?EnableDVI@OMAPDisplayController@@QAAHH@Z|
  00a48	e3500000	 cmp         r0, #0
  00a4c	0afffec4	 beq         |$LN104@DrvEscape|

; 1683 :                 {
; 1684 :                     m_bDVIEnable = TRUE;

  00a50	e3a03001	 mov         r3, #1
  00a54	e5853130	 str         r3, [r5, #0x130]

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  00a58	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  00a5c	ea00005f	 b           |$LN188@DrvEscape|
  00a60		 |$LN18@DrvEscape|

; 1836 :                 }
; 1837 :             }
; 1838 :             break;
; 1839 : 
; 1840 :         case IOCTL_POWER_GET:
; 1841 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: IOCTL_POWER_GET\r\n"));
; 1842 :             if(pvOut != NULL && cjOut == sizeof(CEDEVICE_POWER_STATE))

  00a60	e59b2008	 ldr         r2, [r11, #8]
  00a64	e3520000	 cmp         r2, #0
  00a68	0a00005c	 beq         |$LN188@DrvEscape|
  00a6c	e59b3004	 ldr         r3, [r11, #4]
  00a70	e3530004	 cmp         r3, #4
  00a74	1a000059	 bne         |$LN188@DrvEscape|
  00a78		 |$LN179@DrvEscape|

; 1843 :             {
; 1844 :                 __try
; 1845 :                 {
; 1846 :                     *(PCEDEVICE_POWER_STATE) pvOut = (CEDEVICE_POWER_STATE) m_pDisplayContr->GetPowerLevel();

  00a78	e59530b0	 ldr         r3, [r5, #0xB0]
  00a7c	e593348c	 ldr         r3, [r3, #0x48C]
  00a80	e5823000	 str         r3, [r2]

; 1847 :                     rc = ESC_SUCCESS;

  00a84	e3a04001	 mov         r4, #1
  00a88	e50b4020	 str         r4, [r11, #-0x20]
  00a8c		 |$LN180@DrvEscape|

; 1848 :                 }

  00a8c	ea000053	 b           |$LN188@DrvEscape|
  00a90		 |$LN176@DrvEscape|

; 1850 :                 {
; 1851 :                     rc = ESC_FAILED;

  00a90	e3e04000	 mvn         r4, #0
  00a94	e50b4020	 str         r4, [r11, #-0x20]
  00a98	ea000050	 b           |$LN188@DrvEscape|
  00a9c		 |$LN145@DrvEscape|

; 1290 :     int    rc = ESC_NOT_SUPPORTED;    // Default not supported
; 1291 : 
; 1292 :     UNREFERENCED_PARAMETER(pso);
; 1293 : 
; 1294 :     DEBUGMSG (GPE_ZONE_ENTER, (TEXT("OMAPDDGPE::DrvEscape\r\n")));
; 1295 : 
; 1296 :     switch (iEsc)

  00a9c	e59f31ac	 ldr         r3, [pc, #0x1AC]
  00aa0	e1520003	 cmp         r2, r3
  00aa4	0a00003b	 beq         |$LN15@DrvEscape|
  00aa8	e59f319c	 ldr         r3, [pc, #0x19C]
  00aac	e1520003	 cmp         r2, r3
  00ab0	0a000029	 beq         |$LN21@DrvEscape|
  00ab4	e3a03112	 mov         r3, #0x12, 2
  00ab8	e3833b41	 orr         r3, r3, #0x41, 22
  00abc	e1520003	 cmp         r2, r3
  00ac0	0a000016	 beq         |$LN11@DrvEscape|
  00ac4	e59f317c	 ldr         r3, [pc, #0x17C]
  00ac8	e1520003	 cmp         r2, r3

; 1908 :                         rc = ESC_SUCCESS;
; 1909 :                 }
; 1910 :                 else 
; 1911 :                 {
; 1912 :                     rc = ESC_FAILED;
; 1913 :                 }
; 1914 :             }
; 1915 :             break;
; 1916 : 
; 1917 :         default:
; 1918 : #pragma warning (push)
; 1919 : #pragma warning (disable:4127)
; 1920 :             //  Check for display perf IOCTLs
; 1921 :             if( DispPerfQueryEsc(iEsc) )
; 1922 :             {
; 1923 :                 rc = DispPerfDrvEscape(iEsc, cjIn, pvIn, cjOut, pvOut);
; 1924 :             }
; 1925 : #pragma warning (pop)
; 1926 :             break;

  00acc	1a000043	 bne         |$LN188@DrvEscape|
  00ad0	e59b3000	 ldr         r3, [r11]
  00ad4	e3530000	 cmp         r3, #0
  00ad8	0a000040	 beq         |$LN188@DrvEscape|
  00adc	e59500b0	 ldr         r0, [r5, #0xB0]
  00ae0	e5931000	 ldr         r1, [r3]
  00ae4	e1a02000	 mov         r2, r0
  00ae8	e5b23520	 ldr         r3, [r2, #0x520]!
  00aec	e1510003	 cmp         r1, r3
  00af0	1a000003	 bne         |$LN6@DrvEscape|
  00af4	e3a01000	 mov         r1, #0

; 1906 :                 { 
; 1907 :                         m_pDisplayContr->RestoreRegisters(OMAP_DSS_DESTINATION_TVOUT);

  00af8	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  00afc	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  00b00	ea000036	 b           |$LN188@DrvEscape|
  00b04		 |$LN6@DrvEscape|

; 1890 :                 }
; 1891 :             }
; 1892 :             break;
; 1893 :             
; 1894 :         case IOCTL_CONTEXT_RESTORE:
; 1895 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: IOCTL_CONTEXT_RESTORE\r\n"));
; 1896 :             if (pvIn != NULL)
; 1897 :             {
; 1898 :                 OMAP_DEVICE  deviceId = (OMAP_DEVICE)*((UINT32*)pvIn);
; 1899 : 
; 1900 :                 if (deviceId == m_pDisplayContr->GetDssInfo()->DSSDevice)
; 1901 :                 {
; 1902 :                         m_pDisplayContr->RestoreRegisters(OMAP_DSS_DESTINATION_LCD);
; 1903 :                         rc = ESC_SUCCESS;
; 1904 :                 }
; 1905 :                 else if (deviceId == m_pDisplayContr->GetDssInfo()->TVEncoderDevice)

  00b04	e5923004	 ldr         r3, [r2, #4]
  00b08	e1510003	 cmp         r1, r3
  00b0c	1afffe98	 bne         |$LN4@DrvEscape|

; 1906 :                 { 
; 1907 :                         m_pDisplayContr->RestoreRegisters(OMAP_DSS_DESTINATION_TVOUT);

  00b10	e3a01001	 mov         r1, #1
  00b14	eb000000	 bl          |?RestoreRegisters@OMAPDisplayController@@QAAHW4OMAP_DSS_DESTINATION@@@Z|

; 1316 :                         break;
; 1317 :                   
; 1318 :                     case GETPOWERMANAGEMENT:
; 1319 :                     case SETPOWERMANAGEMENT:
; 1320 :                     case IOCTL_POWER_CAPABILITIES:
; 1321 :                     case IOCTL_POWER_QUERY:
; 1322 :                     case IOCTL_POWER_GET:
; 1323 :                     case IOCTL_POWER_SET:
; 1324 :                     case CONTRASTCOMMAND:
; 1325 :                     case DRVESC_TVOUT_ENABLE:
; 1326 :                     case DRVESC_TVOUT_DISABLE:
; 1327 :                     case DRVESC_TVOUT_GETSETTINGS:
; 1328 :                     case DRVESC_TVOUT_SETSETTINGS:
; 1329 :                     case DRVESC_DVI_ENABLE:
; 1330 :                     case DRVESC_DVI_DISABLE:
; 1331 :                     case DRVESC_HDMI_ENABLE:
; 1332 :                     case DRVESC_HDMI_DISABLE:
; 1333 :                     case IOCTL_CONTEXT_RESTORE:                        
; 1334 :                         rc = ESC_SUCCESS;

  00b18	e3a04001	 mov         r4, #1

; 1343 :             }
; 1344 :             break;

  00b1c	ea00002f	 b           |$LN188@DrvEscape|
  00b20		 |$LN11@DrvEscape|

; 1873 :                 }
; 1874 :             }
; 1875 :             break;
; 1876 : 
; 1877 :         case IOCTL_TIPMX_CONTEXTPATH:
; 1878 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: IOCTL_TIPMX_CONTEXTPATH\r\n"));
; 1879 :             if(pvOut != NULL && cjOut >= sizeof(IOCTL_TIPMX_CONTEXTPATH_OUT))

  00b20	e59b0008	 ldr         r0, [r11, #8]
  00b24	e3500000	 cmp         r0, #0
  00b28	0a00002c	 beq         |$LN188@DrvEscape|
  00b2c	e59b3004	 ldr         r3, [r11, #4]
  00b30	e3530f82	 cmp         r3, #0x82, 30
  00b34	3a000029	 bcc         |$LN188@DrvEscape|
  00b38		 |$LN193@DrvEscape|

; 1880 :             {
; 1881 :                 IOCTL_TIPMX_CONTEXTPATH_OUT *pCtx = (IOCTL_TIPMX_CONTEXTPATH_OUT*)pvOut;
; 1882 :                 __try
; 1883 :                 {
; 1884 :                     _tcscpy(pCtx->szContext, g_Globals.m_szContext);

  00b38	e59f3104	 ldr         r3, [pc, #0x104]
  00b3c	e283100c	 add         r1, r3, #0xC
  00b40	eb000000	 bl          wcscpy

; 1885 :                     rc = ESC_SUCCESS;

  00b44	e3a04001	 mov         r4, #1
  00b48	e50b4020	 str         r4, [r11, #-0x20]
  00b4c		 |$LN194@DrvEscape|

; 1886 :                 }

  00b4c	ea000023	 b           |$LN188@DrvEscape|
  00b50		 |$LN190@DrvEscape|

; 1888 :                 {
; 1889 :                     rc = ESC_FAILED;

  00b50	e3e04000	 mvn         r4, #0
  00b54	e50b4020	 str         r4, [r11, #-0x20]
  00b58	ea000020	 b           |$LN188@DrvEscape|
  00b5c		 |$LN21@DrvEscape|

; 1820 :                 }
; 1821 :             }
; 1822 :             break;
; 1823 : 
; 1824 :         case IOCTL_POWER_QUERY:
; 1825 :            DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: IOCTL_POWER_QUERY\r\n"));
; 1826 :            if(pvOut != NULL && cjOut == sizeof(CEDEVICE_POWER_STATE))

  00b5c	e59b2008	 ldr         r2, [r11, #8]
  00b60	e3520000	 cmp         r2, #0
  00b64	0a00001d	 beq         |$LN188@DrvEscape|
  00b68	e59b3004	 ldr         r3, [r11, #4]
  00b6c	e3530004	 cmp         r3, #4
  00b70	1a00001a	 bne         |$LN188@DrvEscape|
  00b74		 |$LN172@DrvEscape|

; 1827 :             {
; 1828 :                 __try
; 1829 :                 {
; 1830 :                     CEDEVICE_POWER_STATE dx = *(CEDEVICE_POWER_STATE*)pvOut;

  00b74	e5923000	 ldr         r3, [r2]

; 1831 :                     rc = VALID_DX(dx) ? ESC_SUCCESS : ESC_FAILED;

  00b78	e3530004	 cmp         r3, #4
  00b7c	93a04001	 movls       r4, #1
  00b80	83e04000	 mvnhi       r4, #0
  00b84	e50b4020	 str         r4, [r11, #-0x20]
  00b88		 |$LN173@DrvEscape|

; 1832 :                 }

  00b88	ea000014	 b           |$LN188@DrvEscape|
  00b8c		 |$LN169@DrvEscape|

; 1834 :                 {
; 1835 :                     rc = ESC_FAILED;

  00b8c	e3e04000	 mvn         r4, #0
  00b90	e50b4020	 str         r4, [r11, #-0x20]
  00b94	ea000011	 b           |$LN188@DrvEscape|
  00b98		 |$LN15@DrvEscape|

; 1852 :                 }
; 1853 :             }
; 1854 :             break;
; 1855 : 
; 1856 :         case IOCTL_POWER_SET:
; 1857 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: IOCTL_POWER_SET\r\n"));
; 1858 :             if(pvOut != NULL && cjOut == sizeof(CEDEVICE_POWER_STATE))

  00b98	e59b2008	 ldr         r2, [r11, #8]
  00b9c	e3520000	 cmp         r2, #0
  00ba0	0a00000e	 beq         |$LN188@DrvEscape|
  00ba4	e59b3004	 ldr         r3, [r11, #4]
  00ba8	e3530004	 cmp         r3, #4
  00bac	1a00000b	 bne         |$LN188@DrvEscape|
  00bb0		 |$LN186@DrvEscape|

; 1859 :             {
; 1860 :                 __try
; 1861 :                 {
; 1862 :                     CEDEVICE_POWER_STATE dx = *(CEDEVICE_POWER_STATE*)pvOut;

  00bb0	e5921000	 ldr         r1, [r2]

; 1863 :                     if( VALID_DX(dx) )

  00bb4	e3510004	 cmp         r1, #4
  00bb8	8a000003	 bhi         |$LN187@DrvEscape|

; 1864 :                     {
; 1865 :                         DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: IOCTL_POWER_SET = to D%u\r\n", dx));
; 1866 :                         m_pDisplayContr->SetPowerLevel(dx);

  00bbc	e59500b0	 ldr         r0, [r5, #0xB0]
  00bc0	eb000000	 bl          |?SetPowerLevel@OMAPDisplayController@@QAAHK@Z|

; 1867 :                         rc = ESC_SUCCESS;

  00bc4	e3a04001	 mov         r4, #1
  00bc8	e50b4020	 str         r4, [r11, #-0x20]
  00bcc		 |$LN187@DrvEscape|

; 1868 :                     }
; 1869 :                 }

  00bcc	ea000003	 b           |$LN188@DrvEscape|
  00bd0		 |$LN183@DrvEscape|

; 1871 :                 {
; 1872 :                     rc = ESC_FAILED;

  00bd0	e3e04000	 mvn         r4, #0
  00bd4	e50b4020	 str         r4, [r11, #-0x20]
  00bd8	ea000000	 b           |$LN188@DrvEscape|
  00bdc		 |$LN232@DrvEscape|

; 1927 :             
; 1928 : 
; 1929 : #if (_WINCEOSVER<600)
; 1930 :         case GETGXINFO:
; 1931 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: GETGXINFO\r\n"));
; 1932 :             if(pvOut != NULL)
; 1933 :             {
; 1934 :                 __try
; 1935 :                 {
; 1936 :                     rc = GetGameXInfo( cjOut, pvOut );
; 1937 :                 }
; 1938 :                 __except(EXCEPTION_EXECUTE_HANDLER)
; 1939 :                 {
; 1940 :                     rc = ESC_FAILED;
; 1941 :                 }
; 1942 :             }
; 1943 :             break;
; 1944 : 
; 1945 :         case GETRAWFRAMEBUFFER:
; 1946 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: GETRAWFRAMEBUFFER\r\n"));
; 1947 :             if(pvOut != NULL)
; 1948 :             {
; 1949 :                 __try
; 1950 :                 {
; 1951 :                     rc = GetGameFrameBuffer( cjOut, pvOut );
; 1952 :                 }
; 1953 :                 __except(EXCEPTION_EXECUTE_HANDLER)
; 1954 :                 {
; 1955 :                     rc = ESC_FAILED;
; 1956 :                 }
; 1957 :             }
; 1958 :             break;
; 1959 :         
; 1960 :         case DRVESC_GAPI_ENABLE:
; 1961 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_GAPI_ENABLE\r\n"));
; 1962 :             m_bGameEnable = TRUE;
; 1963 :             rc = GameEnable(TRUE);
; 1964 :             break;
; 1965 : 
; 1966 :         case DRVESC_GAPI_DISABLE:
; 1967 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_GAPI_DISABLE\r\n"));
; 1968 :             m_bGameEnable = FALSE;
; 1969 :             rc = GameEnable(FALSE);
; 1970 :             break;
; 1971 : 
; 1972 :         case DRVESC_GAPI_DRAMTOVRAM:
; 1973 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_GAPI_DRAMTOVRAM\r\n"));
; 1974 :             rc = GameDRAMtoVRAM();
; 1975 :             break;
; 1976 : 
; 1977 :         case DRVESC_GAPI_VRAMTODRAM:
; 1978 :             DEBUGMSG(GPE_ZONE_HW, (L"OMAPDDGPE::DrvEscape: DRVESC_GAPI_VRAMTODRAM\r\n"));
; 1979 :             rc = GameVRAMtoDRAM();
; 1980 :             break;
; 1981 : #endif
; 1982 :     }
; 1983 : 
; 1984 :     return rc;

  00bdc	e51b401c	 ldr         r4, [r11, #-0x1C]
  00be0		 |$LN188@DrvEscape|

; 1985 : }

  00be0	e1a00004	 mov         r0, r4
  00be4	e24bd018	 sub         sp, r11, #0x18
  00be8	e89d6870	 ldmia       sp, {r4 - r6, r11, sp, lr}
  00bec	e12fff1e	 bx          lr

			 ENDP  ; |?DrvEscape@OMAPDDGPE@@UAAKPAU_SURFOBJ@@KKPAXK1@Z|, OMAPDDGPE::DrvEscape

  00bf0		 |$LN182@DrvEscape|
  00bf0		 |$LN241@DrvEscape|

; 1870 :                 __except(EXCEPTION_EXECUTE_HANDLER)

  00bf0	e52de004	 str         lr, [sp, #-4]!
  00bf4		 |$LN185@DrvEscape|
  00bf4		 |$LN250@DrvEscape|
  00bf4	e3a00001	 mov         r0, #1
  00bf8		 |$LN184@DrvEscape|
  00bf8	e49df004	 ldr         pc, [sp], #4
  00bfc		 |$LN251@DrvEscape|
  00bfc		 |$LN168@DrvEscape|
  00bfc		 |$LN243@DrvEscape|

; 1833 :                 __except(EXCEPTION_EXECUTE_HANDLER)

  00bfc	e52de004	 str         lr, [sp, #-4]!
  00c00		 |$LN171@DrvEscape|
  00c00		 |$LN252@DrvEscape|
  00c00	e3a00001	 mov         r0, #1
  00c04		 |$LN170@DrvEscape|
  00c04	e49df004	 ldr         pc, [sp], #4
  00c08		 |$LN253@DrvEscape|
  00c08		 |$LN189@DrvEscape|
  00c08		 |$LN244@DrvEscape|

; 1887 :                 __except(EXCEPTION_EXECUTE_HANDLER)

  00c08	e52de004	 str         lr, [sp, #-4]!
  00c0c		 |$LN192@DrvEscape|
  00c0c		 |$LN254@DrvEscape|
  00c0c	e3a00001	 mov         r0, #1
  00c10		 |$LN191@DrvEscape|
  00c10	e49df004	 ldr         pc, [sp], #4
  00c14		 |$LN255@DrvEscape|
  00c14		 |$LN175@DrvEscape|
  00c14		 |$LN245@DrvEscape|

; 1849 :                 __except(EXCEPTION_EXECUTE_HANDLER)

  00c14	e52de004	 str         lr, [sp, #-4]!
  00c18		 |$LN178@DrvEscape|
  00c18		 |$LN256@DrvEscape|
  00c18	e3a00001	 mov         r0, #1
  00c1c		 |$LN177@DrvEscape|
  00c1c	e49df004	 ldr         pc, [sp], #4
  00c20		 |$LN257@DrvEscape|
  00c20		 |$LN161@DrvEscape|
  00c20		 |$LN246@DrvEscape|

; 1817 :                 __except(EXCEPTION_EXECUTE_HANDLER)

  00c20	e52de004	 str         lr, [sp, #-4]!
  00c24		 |$LN164@DrvEscape|
  00c24		 |$LN258@DrvEscape|
  00c24	e3a00001	 mov         r0, #1
  00c28		 |$LN163@DrvEscape|
  00c28	e49df004	 ldr         pc, [sp], #4
  00c2c		 |$LN259@DrvEscape|
  00c2c		 |$LN154@DrvEscape|
  00c2c		 |$LN247@DrvEscape|

; 1670 :                 __except(EXCEPTION_EXECUTE_HANDLER)

  00c2c	e52de004	 str         lr, [sp, #-4]!
  00c30		 |$LN157@DrvEscape|
  00c30		 |$LN260@DrvEscape|
  00c30	e3a00001	 mov         r0, #1
  00c34		 |$LN156@DrvEscape|
  00c34	e49df004	 ldr         pc, [sp], #4
  00c38		 |$LN261@DrvEscape|
  00c38		 |$LN147@DrvEscape|
  00c38		 |$LN248@DrvEscape|

; 1616 :                 __except(EXCEPTION_EXECUTE_HANDLER)

  00c38	e52de004	 str         lr, [sp, #-4]!
  00c3c		 |$LN150@DrvEscape|
  00c3c		 |$LN262@DrvEscape|
  00c3c	e3a00001	 mov         r0, #1
  00c40		 |$LN149@DrvEscape|
  00c40	e49df004	 ldr         pc, [sp], #4
  00c44		 |$LN264@DrvEscape|
  00c44		 |$LN265@DrvEscape|
  00c44	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  00c48		 |$LN266@DrvEscape|
  00c48	80038140	 DCD         0x80038140
  00c4c		 |$LN267@DrvEscape|
  00c4c	0032100c	 DCD         0x32100c
  00c50		 |$LN268@DrvEscape|
  00c50	00321008	 DCD         0x321008
  00c54		 |$LN269@DrvEscape|
  00c54	000186b5	 DCD         0x186b5
  00c58		 |$LN270@DrvEscape|
  00c58	000186a5	 DCD         0x186a5
  00c5c		 |$LN271@DrvEscape|
  00c5c	00321004	 DCD         0x321004
  00c60		 |$LN272@DrvEscape|
  00c60	000186a2	 DCD         0x186a2
  00c64		 |$LN273@DrvEscape|
  00c64	000186a1	 DCD         0x186a1
  00c68		 |$LN274@DrvEscape|
  00c68	6c16c16d	 DCD         0x6c16c16d
  00c6c		 |$LN275@DrvEscape|
  00c6c	000186a3	 DCD         0x186a3
  00c70		 |$LN263@DrvEscape|
  00c70		 |$LN249@DrvEscape|
	EXPORT	|??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@| [ DATA ] ; `string'
	IMPORT	|swscanf|

  00000			 AREA	 |.pdata|, PDATA
|$T43637| DCD	|$LN13@ConvertStr|
	DCD	0x40002c02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@| DCB "{"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, "-"
	DCB	0x0, "%", 0x0, "0", 0x0, "4", 0x0, "X", 0x0, "-", 0x0, "%"
	DCB	0x0, "0", 0x0, "4", 0x0, "X", 0x0, "-", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X"
	DCB	0x0, "-", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, "}", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ConvertStringToGuid@@YAHPBGPAU_GUID@@@Z| PROC ; ConvertStringToGuid

; 1990 : {

  00000		 |$LN13@ConvertStr|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd048	 sub         sp, sp, #0x48
  00008		 |$M43634|
  00008	e1a02001	 mov         r2, r1
  0000c	e58d2024	 str         r2, [sp, #0x24]

; 1991 :     // ConvertStringToGuid
; 1992 :     // this routine converts a string into a GUID and returns TRUE if the
; 1993 :     // conversion was successful.
; 1994 : 
; 1995 :     BOOL rc = FALSE;
; 1996 :     int idx, data4[8];
; 1997 :     const LPWSTR fmt = L"{%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}";
; 1998 : 
; 1999 :     if (swscanf(
; 2000 :         szGuid, fmt, &pGuid->Data1, &pGuid->Data2, &pGuid->Data3,
; 2001 :         &data4[0], &data4[1], &data4[2], &data4[3],
; 2002 :         &data4[4], &data4[5], &data4[6], &data4[7]
; 2003 :     ) != 11) goto cleanUp;

  00010	e59f1094	 ldr         r1, [pc, #0x94]
  00014	e28d4040	 add         r4, sp, #0x40
  00018	e28d503c	 add         r5, sp, #0x3C
  0001c	e28d6038	 add         r6, sp, #0x38
  00020	e28d7034	 add         r7, sp, #0x34
  00024	e28d8030	 add         r8, sp, #0x30
  00028	e28d902c	 add         r9, sp, #0x2C
  0002c	e28da028	 add         r10, sp, #0x28
  00030	e282b006	 add         r11, r2, #6
  00034	e28de044	 add         lr, sp, #0x44
  00038	e2823004	 add         r3, r2, #4
  0003c	e58de020	 str         lr, [sp, #0x20]
  00040	e58d401c	 str         r4, [sp, #0x1C]
  00044	e58d5018	 str         r5, [sp, #0x18]
  00048	e58d6014	 str         r6, [sp, #0x14]
  0004c	e58d7010	 str         r7, [sp, #0x10]
  00050	e58d800c	 str         r8, [sp, #0xC]
  00054	e58d9008	 str         r9, [sp, #8]
  00058	e58da004	 str         r10, [sp, #4]
  0005c	e58db000	 str         r11, [sp]
  00060	eb000000	 bl          swscanf
  00064	e350000b	 cmp         r0, #0xB
  00068	1a00000a	 bne         |$LN10@ConvertStr|

; 2004 : 
; 2005 :     for (idx = 0; idx < sizeof(data4)/sizeof (int); idx++)
; 2006 :     {
; 2007 :         pGuid->Data4[idx] = (UCHAR)data4[idx];
; 2008 :     }
; 2009 : 
; 2010 :     rc = TRUE;

  0006c	e59de024	 ldr         lr, [sp, #0x24]
  00070	e3a01000	 mov         r1, #0
  00074	e28d0028	 add         r0, sp, #0x28
  00078		 |$LL3@ConvertStr|
  00078	e4902004	 ldr         r2, [r0], #4
  0007c	e081300e	 add         r3, r1, lr
  00080	e2811001	 add         r1, r1, #1
  00084	e3510008	 cmp         r1, #8
  00088	e5c32008	 strb        r2, [r3, #8]
  0008c	3afffff9	 bcc         |$LL3@ConvertStr|
  00090	e3a03001	 mov         r3, #1
  00094	ea000000	 b           |$cleanUp$42694|
  00098		 |$LN10@ConvertStr|
  00098	e3a03000	 mov         r3, #0
  0009c		 |$cleanUp$42694|

; 2011 : 
; 2012 : cleanUp:
; 2013 :     return rc;
; 2014 : }

  0009c	e1a00003	 mov         r0, r3
  000a0	e28dd048	 add         sp, sp, #0x48
  000a4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN14@ConvertStr|
  000ac		 |$LN15@ConvertStr|
  000ac	00000000	 DCD         |??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@|
  000b0		 |$M43635|

			 ENDP  ; |?ConvertStringToGuid@@YAHPBGPAU_GUID@@@Z|, ConvertStringToGuid

	EXPORT	|?PixelFormatToBpp@OMAPDDGPE@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z| ; OMAPDDGPE::PixelFormatToBpp

  00000			 AREA	 |.pdata|, PDATA
|$T43650| DCD	|$LN9@PixelForma@2|
	DCD	0x40001300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelFormatToBpp@OMAPDDGPE@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z| PROC ; OMAPDDGPE::PixelFormatToBpp

; 2021 : {

  00000		 |$LN9@PixelForma@2|
  00000		 |$M43647|

; 2022 :     DWORD   dwResult = 0;

  00000	e3a03000	 mov         r3, #0

; 2023 :     
; 2024 :     //  Convert OMAP pixel format into bits per pixel
; 2025 :     switch( ePixelFormat )

  00004	e3500005	 cmp         r0, #5
  00008	ba00000d	 blt         |$LN3@PixelForma@2|
  0000c	e3500006	 cmp         r0, #6
  00010	da00000a	 ble         |$LN2@PixelForma@2|
  00014	e3500008	 cmp         r0, #8
  00018	0a000005	 beq         |$LN1@PixelForma@2|
  0001c	e3500009	 cmp         r0, #9
  00020	da000007	 ble         |$LN3@PixelForma@2|
  00024	e350000b	 cmp         r0, #0xB
  00028	da000004	 ble         |$LN2@PixelForma@2|
  0002c	e350000d	 cmp         r0, #0xD
  00030	ca000003	 bgt         |$LN3@PixelForma@2|
  00034		 |$LN1@PixelForma@2|

; 2033 :             break;
; 2034 : 
; 2035 :         case OMAP_DSS_PIXELFORMAT_RGB32:
; 2036 :         case OMAP_DSS_PIXELFORMAT_ARGB32:
; 2037 :         case OMAP_DSS_PIXELFORMAT_RGBA32:
; 2038 :             //  4 bytes per pixel
; 2039 :             dwResult = 32;

  00034	e3a03020	 mov         r3, #0x20

; 2040 :             break;
; 2041 :     }
; 2042 : 
; 2043 :     //  Return result
; 2044 :     return dwResult;
; 2045 : }

  00038	e1a00003	 mov         r0, r3
  0003c	e12fff1e	 bx          lr
  00040		 |$LN2@PixelForma@2|

; 2026 :     {
; 2027 :         case OMAP_DSS_PIXELFORMAT_RGB16:
; 2028 :         case OMAP_DSS_PIXELFORMAT_ARGB16:
; 2029 :         case OMAP_DSS_PIXELFORMAT_YUV2:
; 2030 :         case OMAP_DSS_PIXELFORMAT_UYVY:
; 2031 :             //  2 bytes per pixel
; 2032 :             dwResult = 16;

  00040	e3a03010	 mov         r3, #0x10
  00044		 |$LN3@PixelForma@2|

; 2040 :             break;
; 2041 :     }
; 2042 : 
; 2043 :     //  Return result
; 2044 :     return dwResult;
; 2045 : }

  00044	e1a00003	 mov         r0, r3
  00048	e12fff1e	 bx          lr
  0004c		 |$M43648|

			 ENDP  ; |?PixelFormatToBpp@OMAPDDGPE@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z|, OMAPDDGPE::PixelFormatToBpp

	EXPORT	|?PixelFormatToGPEFormat@OMAPDDGPE@@SA?AW4EGPEFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z| ; OMAPDDGPE::PixelFormatToGPEFormat

  00000			 AREA	 |.pdata|, PDATA
|$T43661| DCD	|$LN10@PixelForma@3|
	DCD	0x40001400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelFormatToGPEFormat@OMAPDDGPE@@SA?AW4EGPEFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z| PROC ; OMAPDDGPE::PixelFormatToGPEFormat

; 2052 : {

  00000		 |$LN10@PixelForma@3|
  00000		 |$M43658|
  00000	e1a03000	 mov         r3, r0

; 2053 :     EGPEFormat  eResult = gpeUndefined;

  00004	e3a00009	 mov         r0, #9

; 2054 :     
; 2055 :     //  Convert OMAP pixel format into GPE pixel format enum
; 2056 :     switch( ePixelFormat )

  00008	e3530005	 cmp         r3, #5
  0000c	ba00000e	 blt         |$LN4@PixelForma@3|
  00010	e3530006	 cmp         r3, #6
  00014	da00000b	 ble         |$LN3@PixelForma@3|
  00018	e3530008	 cmp         r3, #8
  0001c	0a000005	 beq         |$LN1@PixelForma@3|
  00020	e3530009	 cmp         r3, #9
  00024	da000008	 ble         |$LN4@PixelForma@3|
  00028	e353000b	 cmp         r3, #0xB
  0002c	da000003	 ble         |$LN2@PixelForma@3|
  00030	e353000d	 cmp         r3, #0xD
  00034	ca000004	 bgt         |$LN4@PixelForma@3|
  00038		 |$LN1@PixelForma@3|

; 2066 :             break;
; 2067 : 
; 2068 :         case OMAP_DSS_PIXELFORMAT_RGB32:
; 2069 :         case OMAP_DSS_PIXELFORMAT_ARGB32:
; 2070 :         case OMAP_DSS_PIXELFORMAT_RGBA32:
; 2071 :             eResult = gpe32Bpp;

  00038	e3a00006	 mov         r0, #6

; 2072 :             break;
; 2073 :     }
; 2074 : 
; 2075 :     //  Return result
; 2076 :     return eResult;
; 2077 : }

  0003c	e12fff1e	 bx          lr
  00040		 |$LN2@PixelForma@3|

; 2061 :             break;
; 2062 : 
; 2063 :         case OMAP_DSS_PIXELFORMAT_YUV2:
; 2064 :         case OMAP_DSS_PIXELFORMAT_UYVY:
; 2065 :             eResult = gpe16YCrCb;

  00040	e3a00007	 mov         r0, #7

; 2072 :             break;
; 2073 :     }
; 2074 : 
; 2075 :     //  Return result
; 2076 :     return eResult;
; 2077 : }

  00044	e12fff1e	 bx          lr
  00048		 |$LN3@PixelForma@3|

; 2057 :     {
; 2058 :         case OMAP_DSS_PIXELFORMAT_RGB16:
; 2059 :         case OMAP_DSS_PIXELFORMAT_ARGB16:
; 2060 :             eResult = gpe16Bpp;

  00048	e3a00004	 mov         r0, #4
  0004c		 |$LN4@PixelForma@3|

; 2072 :             break;
; 2073 :     }
; 2074 : 
; 2075 :     //  Return result
; 2076 :     return eResult;
; 2077 : }

  0004c	e12fff1e	 bx          lr
  00050		 |$M43659|

			 ENDP  ; |?PixelFormatToGPEFormat@OMAPDDGPE@@SA?AW4EGPEFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z|, OMAPDDGPE::PixelFormatToGPEFormat

	EXPORT	|?PixelFormatToDDGPEFormat@OMAPDDGPE@@SA?AW4EDDGPEPixelFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z| ; OMAPDDGPE::PixelFormatToDDGPEFormat

  00000			 AREA	 |.pdata|, PDATA
|$T43672| DCD	|$LN12@PixelForma@4|
	DCD	0x40001900
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelFormatToDDGPEFormat@OMAPDDGPE@@SA?AW4EDDGPEPixelFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z| PROC ; OMAPDDGPE::PixelFormatToDDGPEFormat

; 2084 : {

  00000		 |$LN12@PixelForma@4|
  00000		 |$M43669|
  00000	e1a03000	 mov         r3, r0

; 2085 :     EDDGPEPixelFormat  eResult = ddgpePixelFormat_UnknownFormat;

  00004	e3a00012	 mov         r0, #0x12

; 2086 :     
; 2087 :     //  Convert OMAP pixel format into DDGPE pixel format enum
; 2088 :     switch( ePixelFormat )

  00008	e3530005	 cmp         r3, #5
  0000c	0a000012	 beq         |$LN4@PixelForma@4|
  00010	e3530006	 cmp         r3, #6
  00014	0a00000e	 beq         |$LN5@PixelForma@4|
  00018	e3530008	 cmp         r3, #8
  0001c	0a000006	 beq         |$LN1@PixelForma@4|
  00020	e353000a	 cmp         r3, #0xA
  00024	0a000008	 beq         |$LN3@PixelForma@4|
  00028	e353000b	 cmp         r3, #0xB
  0002c	0a000004	 beq         |$LN2@PixelForma@4|
  00030	da00000a	 ble         |$LN6@PixelForma@4|
  00034	e353000d	 cmp         r3, #0xD
  00038	ca000008	 bgt         |$LN6@PixelForma@4|
  0003c		 |$LN1@PixelForma@4|

; 2104 :             break;
; 2105 : 
; 2106 :         case OMAP_DSS_PIXELFORMAT_RGB32:
; 2107 :         case OMAP_DSS_PIXELFORMAT_ARGB32:
; 2108 :         case OMAP_DSS_PIXELFORMAT_RGBA32:
; 2109 :             eResult = ddgpePixelFormat_8888;

  0003c	e3a00009	 mov         r0, #9

; 2110 :             break;
; 2111 :     }
; 2112 : 
; 2113 :     //  Return result
; 2114 :     return eResult;
; 2115 : }

  00040	e12fff1e	 bx          lr
  00044		 |$LN2@PixelForma@4|

; 2100 :             break;
; 2101 : 
; 2102 :         case OMAP_DSS_PIXELFORMAT_UYVY:
; 2103 :             eResult = ddgpePixelFormat_UYVY;

  00044	e3a0000b	 mov         r0, #0xB

; 2110 :             break;
; 2111 :     }
; 2112 : 
; 2113 :     //  Return result
; 2114 :     return eResult;
; 2115 : }

  00048	e12fff1e	 bx          lr
  0004c		 |$LN3@PixelForma@4|

; 2096 :             break;
; 2097 : 
; 2098 :         case OMAP_DSS_PIXELFORMAT_YUV2:
; 2099 :             eResult = ddgpePixelFormat_YUY2;

  0004c	e3a0000c	 mov         r0, #0xC

; 2110 :             break;
; 2111 :     }
; 2112 : 
; 2113 :     //  Return result
; 2114 :     return eResult;
; 2115 : }

  00050	e12fff1e	 bx          lr
  00054		 |$LN5@PixelForma@4|

; 2089 :     {
; 2090 :         case OMAP_DSS_PIXELFORMAT_RGB16:
; 2091 :             eResult = ddgpePixelFormat_565;

  00054	e3a00004	 mov         r0, #4

; 2110 :             break;
; 2111 :     }
; 2112 : 
; 2113 :     //  Return result
; 2114 :     return eResult;
; 2115 : }

  00058	e12fff1e	 bx          lr
  0005c		 |$LN4@PixelForma@4|

; 2092 :             break;
; 2093 : 
; 2094 :         case OMAP_DSS_PIXELFORMAT_ARGB16:
; 2095 :             eResult = ddgpePixelFormat_4444;

  0005c	e3a00006	 mov         r0, #6
  00060		 |$LN6@PixelForma@4|

; 2110 :             break;
; 2111 :     }
; 2112 : 
; 2113 :     //  Return result
; 2114 :     return eResult;
; 2115 : }

  00060	e12fff1e	 bx          lr
  00064		 |$M43670|

			 ENDP  ; |?PixelFormatToDDGPEFormat@OMAPDDGPE@@SA?AW4EDDGPEPixelFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z|, OMAPDDGPE::PixelFormatToDDGPEFormat

	EXPORT	|?PixelFormatToBitMask@OMAPDDGPE@@SAHW4OMAP_DSS_PIXELFORMAT@@PAK111@Z| ; OMAPDDGPE::PixelFormatToBitMask

  00000			 AREA	 |.pdata|, PDATA
|$T43689| DCD	|$LN17@PixelForma@5|
	DCD	0x40004b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PixelFormatToBitMask@OMAPDDGPE@@SAHW4OMAP_DSS_PIXELFORMAT@@PAK111@Z| PROC ; OMAPDDGPE::PixelFormatToBitMask

; 2126 : {

  00000		 |$LN17@PixelForma@5|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43686|
  00004	e3510000	 cmp         r1, #0
  00008	e1a0e000	 mov         lr, r0

; 2127 :     BOOL    bResult = FALSE;

  0000c	e3a00000	 mov         r0, #0

; 2128 :     
; 2129 :     //  Check pointers
; 2130 :     if( pAlphaBitMask == NULL ||
; 2131 :         pRBitMask == NULL ||
; 2132 :         pGBitMask == NULL ||
; 2133 :         pBBitMask == NULL )

  00010	0a000042	 beq         |$LN9@PixelForma@5|
  00014	e3520000	 cmp         r2, #0
  00018	0a000040	 beq         |$LN9@PixelForma@5|
  0001c	e3530000	 cmp         r3, #0
  00020	0a00003e	 beq         |$LN9@PixelForma@5|
  00024	e59d4008	 ldr         r4, [sp, #8]
  00028	e3540000	 cmp         r4, #0
  0002c	0a00003b	 beq         |$LN9@PixelForma@5|

; 2135 : 
; 2136 :         
; 2137 :     //  Convert OMAP pixel format into bitmask fields
; 2138 :     switch( ePixelFormat )

  00030	e35e0005	 cmp         lr, #5
  00034	0a00002e	 beq         |$LN5@PixelForma@5|
  00038	e35e0006	 cmp         lr, #6
  0003c	0a000021	 beq         |$LN6@PixelForma@5|
  00040	e35e0008	 cmp         lr, #8
  00044	0a000017	 beq         |$LN4@PixelForma@5|
  00048	e35e0009	 cmp         lr, #9
  0004c	da000034	 ble         |$LN11@PixelForma@5|
  00050	e35e000b	 cmp         lr, #0xB
  00054	da000031	 ble         |$LN9@PixelForma@5|
  00058	e35e000c	 cmp         lr, #0xC
  0005c	0a000009	 beq         |$LN3@PixelForma@5|
  00060	e35e000d	 cmp         lr, #0xD
  00064	1a00002e	 bne         |$LN11@PixelForma@5|

; 2169 :             bResult        = TRUE;
; 2170 :             break;
; 2171 : 
; 2172 :         case OMAP_DSS_PIXELFORMAT_RGBA32:
; 2173 :             *pAlphaBitMask = 0x000000ff;

  00068	e3a000ff	 mov         r0, #0xFF
  0006c	e5810000	 str         r0, [r1]

; 2174 :             *pRBitMask     = 0xff000000;

  00070	e3a014ff	 mov         r1, #0xFF, 8
  00074	e5821000	 str         r1, [r2]

; 2175 :             *pGBitMask     = 0x00ff0000;

  00078	e3a028ff	 mov         r2, #0xFF, 16
  0007c	e5832000	 str         r2, [r3]

; 2176 :             *pBBitMask     = 0x0000ff00;

  00080	e3a03cff	 mov         r3, #0xFF, 24

; 2177 :             bResult        = TRUE;
; 2178 :             break;

  00084	ea000016	 b           |$LN14@PixelForma@5|
  00088		 |$LN3@PixelForma@5|

; 2163 : 
; 2164 :         case OMAP_DSS_PIXELFORMAT_ARGB32:
; 2165 :             *pAlphaBitMask = 0xff000000;

  00088	e3a004ff	 mov         r0, #0xFF, 8
  0008c	e5810000	 str         r0, [r1]

; 2166 :             *pRBitMask     = 0x00ff0000;

  00090	e3a018ff	 mov         r1, #0xFF, 16
  00094	e5821000	 str         r1, [r2]

; 2167 :             *pGBitMask     = 0x0000ff00;

  00098	e3a02cff	 mov         r2, #0xFF, 24
  0009c	e5832000	 str         r2, [r3]

; 2168 :             *pBBitMask     = 0x000000ff;

  000a0	e3a030ff	 mov         r3, #0xFF

; 2179 : 
; 2180 :         case OMAP_DSS_PIXELFORMAT_YUV2:
; 2181 :         case OMAP_DSS_PIXELFORMAT_UYVY:
; 2182 :             bResult = FALSE;
; 2183 :             break;

  000a4	ea000019	 b           |$LN13@PixelForma@5|
  000a8		 |$LN4@PixelForma@5|

; 2154 :             break;
; 2155 : 
; 2156 :         case OMAP_DSS_PIXELFORMAT_RGB32:
; 2157 :             *pAlphaBitMask = 0x00000000;

  000a8	e3a00000	 mov         r0, #0
  000ac	e5810000	 str         r0, [r1]

; 2158 :             *pRBitMask     = 0x00ff0000;

  000b0	e3a018ff	 mov         r1, #0xFF, 16
  000b4	e5821000	 str         r1, [r2]

; 2159 :             *pGBitMask     = 0x0000ff00;

  000b8	e3a02cff	 mov         r2, #0xFF, 24
  000bc	e5832000	 str         r2, [r3]

; 2160 :             *pBBitMask     = 0x000000ff;

  000c0	e3a030ff	 mov         r3, #0xFF

; 2161 :             bResult        = TRUE;
; 2162 :             break;

  000c4	ea000006	 b           |$LN14@PixelForma@5|
  000c8		 |$LN6@PixelForma@5|

; 2139 :     {
; 2140 :         case OMAP_DSS_PIXELFORMAT_RGB16:
; 2141 :             *pAlphaBitMask = 0x0000;

  000c8	e3a00000	 mov         r0, #0
  000cc	e5810000	 str         r0, [r1]

; 2142 :             *pRBitMask     = 0xf800;

  000d0	e3a01b3e	 mov         r1, #0x3E, 22
  000d4	e5821000	 str         r1, [r2]

; 2143 :             *pGBitMask     = 0x07e0;

  000d8	e3a02e7e	 mov         r2, #0x7E, 28
  000dc	e5832000	 str         r2, [r3]

; 2144 :             *pBBitMask     = 0x001f;

  000e0	e3a0301f	 mov         r3, #0x1F
  000e4		 |$LN14@PixelForma@5|
  000e4	e5843000	 str         r3, [r4]

; 2145 :             bResult        = TRUE;

  000e8	e3a00001	 mov         r0, #1

; 2184 :     }
; 2185 : 
; 2186 :     //  Return result
; 2187 :     return bResult;
; 2188 : }

  000ec	e8bd4010	 ldmia       sp!, {r4, lr}
  000f0	e12fff1e	 bx          lr
  000f4		 |$LN5@PixelForma@5|

; 2146 :             break;
; 2147 : 
; 2148 :         case OMAP_DSS_PIXELFORMAT_ARGB16:
; 2149 :             *pAlphaBitMask = 0xf000;

  000f4	e3a00a0f	 mov         r0, #0xF, 20
  000f8	e5810000	 str         r0, [r1]

; 2150 :             *pRBitMask     = 0x0f00;

  000fc	e3a01c0f	 mov         r1, #0xF, 24
  00100	e5821000	 str         r1, [r2]

; 2151 :             *pGBitMask     = 0x00f0;

  00104	e3a020f0	 mov         r2, #0xF0
  00108	e5832000	 str         r2, [r3]

; 2152 :             *pBBitMask     = 0x000f;

  0010c	e3a0300f	 mov         r3, #0xF
  00110		 |$LN13@PixelForma@5|

; 2153 :             bResult        = TRUE;

  00110	e3a00001	 mov         r0, #1

; 2152 :             *pBBitMask     = 0x000f;

  00114	e5843000	 str         r3, [r4]

; 2184 :     }
; 2185 : 
; 2186 :     //  Return result
; 2187 :     return bResult;
; 2188 : }

  00118	e8bd4010	 ldmia       sp!, {r4, lr}
  0011c	e12fff1e	 bx          lr
  00120		 |$LN9@PixelForma@5|

; 2134 :         return bResult;

  00120	e3a00000	 mov         r0, #0
  00124		 |$LN11@PixelForma@5|

; 2184 :     }
; 2185 : 
; 2186 :     //  Return result
; 2187 :     return bResult;
; 2188 : }

  00124	e8bd4010	 ldmia       sp!, {r4, lr}
  00128	e12fff1e	 bx          lr
  0012c		 |$M43687|

			 ENDP  ; |?PixelFormatToBitMask@OMAPDDGPE@@SAHW4OMAP_DSS_PIXELFORMAT@@PAK111@Z|, OMAPDDGPE::PixelFormatToBitMask

	EXPORT	|?CursorOn@OMAPDDGPE@@QAAXXZ|		; OMAPDDGPE::CursorOn
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43727| DCD	|$LN47@CursorOn|
	DCD	0x4000ae02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CursorOn@OMAPDDGPE@@QAAXXZ| PROC	; OMAPDDGPE::CursorOn

; 2195 : {

  00000		 |$LN47@CursorOn|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd030	 sub         sp, sp, #0x30
  00008		 |$M43724|
  00008	e1a04000	 mov         r4, r0
  0000c	e58d4024	 str         r4, [sp, #0x24]

; 2196 :     UCHAR *pFrame;
; 2197 :     UCHAR *pFrameLine, *pStoreLine, *pXorLine, *pAndLine, data;
; 2198 :     int bytesPerPixel, bytesPerLine;
; 2199 :     int xf, yf, xc, yc, i;
; 2200 : 
; 2201 :     DEBUGMSG(GPE_ZONE_CURSOR, (L"+OMAPDDGPE::CursonOn\r\n"));
; 2202 : 
; 2203 :     // If cursor should not be visible or already is then exit
; 2204 :     if (m_cursorForcedOff || m_cursorDisabled || m_cursorVisible) 

  00010	e5943154	 ldr         r3, [r4, #0x154]
  00014	e3530000	 cmp         r3, #0
  00018	1a0000a3	 bne         |$cleanUp$42774|
  0001c	e594314c	 ldr         r3, [r4, #0x14C]
  00020	e3530000	 cmp         r3, #0
  00024	1a0000a0	 bne         |$cleanUp$42774|
  00028	e5943150	 ldr         r3, [r4, #0x150]
  0002c	e3530000	 cmp         r3, #0
  00030	1a00009d	 bne         |$cleanUp$42774|

; 2205 :         goto cleanUp;
; 2206 : 
; 2207 :     if (m_cursorStore == NULL) 

  00034	e5943178	 ldr         r3, [r4, #0x178]
  00038	e3530000	 cmp         r3, #0
  0003c	0a00009a	 beq         |$cleanUp$42774|

; 2208 :     {
; 2209 :         DEBUGMSG(GPE_ZONE_ERROR, (L"OMAPDDGPE::CursorOn: "
; 2210 :             L"No cursor store available\r\n"
; 2211 :         ));
; 2212 :         goto cleanUp;
; 2213 :     }
; 2214 : 
; 2215 :     // We support only 1,2,3 and 4 bytes per pixel
; 2216 :     bytesPerPixel = (m_pMode->Bpp + 7) >> 3;

  00040	e5943010	 ldr         r3, [r4, #0x10]
  00044	e593300c	 ldr         r3, [r3, #0xC]
  00048	e2833007	 add         r3, r3, #7
  0004c	e1a061c3	 mov         r6, r3, asr #3

; 2217 :     if (bytesPerPixel <= 0 || bytesPerPixel > 4) goto cleanUp;

  00050	e2463001	 sub         r3, r6, #1
  00054	e3530003	 cmp         r3, #3
  00058	e58d6028	 str         r6, [sp, #0x28]
  0005c	8a000092	 bhi         |$cleanUp$42774|

; 2218 :     
; 2219 :     // Get some base metrics
; 2220 :     pFrame = (UCHAR*)m_pPrimarySurface->Buffer();

  00060	e5942004	 ldr         r2, [r4, #4]

; 2221 :     bytesPerLine = m_pPrimarySurface->Stride();
; 2222 : 
; 2223 :     for (yf = m_cursorRect.top, yc = 0; yf < m_cursorRect.bottom; yf++, yc++) 

  00064	e594515c	 ldr         r5, [r4, #0x15C]
  00068	e5943164	 ldr         r3, [r4, #0x164]
  0006c	e592b008	 ldr         r11, [r2, #8]
  00070	e5921004	 ldr         r1, [r2, #4]
  00074	e3a0a000	 mov         r10, #0
  00078	e58db02c	 str         r11, [sp, #0x2C]
  0007c	e58d501c	 str         r5, [sp, #0x1C]
  00080	e1550003	 cmp         r5, r3
  00084	e58da020	 str         r10, [sp, #0x20]
  00088	aa000085	 bge         |$LN43@CursorOn|

; 2218 :     
; 2219 :     // Get some base metrics
; 2220 :     pFrame = (UCHAR*)m_pPrimarySurface->Buffer();

  0008c	e0281b95	 mla         r8, r5, r11, r1
  00090		 |$LL19@CursorOn|

; 2224 :     {
; 2225 :         // Check if we are done
; 2226 :         if (yf < 0) continue;

  00090	e3550000	 cmp         r5, #0
  00094	4a00007a	 bmi         |$LN18@CursorOn|

; 2227 :         if (yf >= m_pMode->height) break;

  00098	e5943010	 ldr         r3, [r4, #0x10]
  0009c	e5933008	 ldr         r3, [r3, #8]
  000a0	e1550003	 cmp         r5, r3
  000a4	aa00007e	 bge         |$LN43@CursorOn|

; 2228 :     
; 2229 :         pFrameLine = &pFrame[yf * bytesPerLine];
; 2230 :         pStoreLine = &m_cursorStore[yc * m_cursorSize.x * bytesPerPixel];

  000a8	e5943168	 ldr         r3, [r4, #0x168]
  000ac	e5941178	 ldr         r1, [r4, #0x178]

; 2231 :         pAndLine = &m_cursorAnd[yc * m_cursorSize.x * bytesPerPixel];

  000b0	e5940180	 ldr         r0, [r4, #0x180]

; 2232 :         pXorLine = &m_cursorXor[yc * m_cursorSize.x * bytesPerPixel];

  000b4	e594217c	 ldr         r2, [r4, #0x17C]

; 2233 :     
; 2234 :         for (xf = m_cursorRect.left, xc = 0; xf < m_cursorRect.right; xf++, xc++) 

  000b8	e5947158	 ldr         r7, [r4, #0x158]
  000bc	e00e0a93	 mul         lr, r3, r10
  000c0	e5943160	 ldr         r3, [r4, #0x160]
  000c4	e021169e	 mla         r1, lr, r6, r1
  000c8	e1570003	 cmp         r7, r3
  000cc	e029069e	 mla         r9, lr, r6, r0
  000d0	e022269e	 mla         r2, lr, r6, r2
  000d4	aa00006a	 bge         |$LN18@CursorOn|
  000d8	e0873087	 add         r3, r7, r7, lsl #1
  000dc	e083a008	 add         r10, r3, r8
  000e0	e0423009	 sub         r3, r2, r9
  000e4	e0880087	 add         r0, r8, r7, lsl #1
  000e8	e1a0b009	 mov         r11, r9
  000ec	e088e107	 add         lr, r8, r7, lsl #2
  000f0	e0411009	 sub         r1, r1, r9
  000f4	e58d3004	 str         r3, [sp, #4]

; 2257 :                         data = pFrameLine[xf * bytesPerPixel + i];
; 2258 :                         pStoreLine[xc * bytesPerPixel + i] = data;
; 2259 :                         data &= pAndLine[xc * bytesPerPixel + i];
; 2260 :                         data ^= pXorLine[xc * bytesPerPixel + i];
; 2261 :                         pFrameLine[xf * bytesPerPixel + i] = data;
; 2262 :                     }                    
; 2263 :                     break;

  000f8	e1a05003	 mov         r5, r3
  000fc	e58d0014	 str         r0, [sp, #0x14]
  00100	e58db018	 str         r11, [sp, #0x18]
  00104	e58d900c	 str         r9, [sp, #0xC]
  00108	e58de010	 str         lr, [sp, #0x10]
  0010c	e58d9008	 str         r9, [sp, #8]
  00110	e58d1000	 str         r1, [sp]
  00114		 |$LL14@CursorOn|

; 2235 :         {
; 2236 :             // Check if we are done
; 2237 :             if (xf < 0) continue;

  00114	e3570000	 cmp         r7, #0
  00118	4a000044	 bmi         |$LN13@CursorOn|

; 2238 :             if (xf >= m_pMode->width) break;

  0011c	e5943010	 ldr         r3, [r4, #0x10]
  00120	e5933004	 ldr         r3, [r3, #4]
  00124	e1570003	 cmp         r7, r3
  00128	aa000052	 bge         |$LN42@CursorOn|

; 2239 : 
; 2240 :             // Depending on bytes per pixel
; 2241 :             switch (bytesPerPixel) 

  0012c	e3560001	 cmp         r6, #1
  00130	0a000032	 beq         |$LN7@CursorOn|
  00134	e3560002	 cmp         r6, #2
  00138	0a000026	 beq         |$LN6@CursorOn|
  0013c	e3560003	 cmp         r6, #3
  00140	0a00000d	 beq         |$LN5@CursorOn|
  00144	e3560004	 cmp         r6, #4
  00148	1a000038	 bne         |$LN13@CursorOn|

; 2264 : 
; 2265 :                 case 4:
; 2266 :                     ((ULONG*)pStoreLine)[xc]  = ((ULONG*)pFrameLine)[xf];

  0014c	e59e3000	 ldr         r3, [lr]
  00150	e59d1008	 ldr         r1, [sp, #8]
  00154	e59d2000	 ldr         r2, [sp]
  00158	e7813002	 str         r3, [r1, +r2]

; 2267 :                     ((ULONG*)pFrameLine)[xf] &= ((ULONG*)pAndLine)[xc];

  0015c	e5912000	 ldr         r2, [r1]
  00160	e59e3000	 ldr         r3, [lr]
  00164	e0022003	 and         r2, r2, r3
  00168	e58e2000	 str         r2, [lr]

; 2268 :                     ((ULONG*)pFrameLine)[xf] ^= ((ULONG*)pXorLine)[xc];

  0016c	e7913005	 ldr         r3, [r1, +r5]
  00170	e0233002	 eor         r3, r3, r2
  00174	e58e3000	 str         r3, [lr]

; 2269 :                     break;

  00178	ea00002b	 b           |$LN44@CursorOn|
  0017c		 |$LN5@CursorOn|

; 2254 : 
; 2255 :                 case 3:
; 2256 :                     for (i = 0; i < bytesPerPixel; i++) {

  0017c	e59de00c	 ldr         lr, [sp, #0xC]

; 2264 : 
; 2265 :                 case 4:
; 2266 :                     ((ULONG*)pStoreLine)[xc]  = ((ULONG*)pFrameLine)[xf];

  00180	e59d6000	 ldr         r6, [sp]
  00184	e59d4004	 ldr         r4, [sp, #4]
  00188	e3a0b000	 mov         r11, #0
  0018c		 |$LL4@CursorOn|
  0018c	e1a0000a	 mov         r0, r10
  00190	e7f0100b	 ldrb        r1, [r0, +r11]!
  00194	e28bb001	 add         r11, r11, #1
  00198	e35b0003	 cmp         r11, #3
  0019c	e7c6100e	 strb        r1, [r6, +lr]
  001a0	e5de3000	 ldrb        r3, [lr]
  001a4	e7d4200e	 ldrb        r2, [r4, +lr]
  001a8	e28ee001	 add         lr, lr, #1
  001ac	e0033001	 and         r3, r3, r1
  001b0	e0233002	 eor         r3, r3, r2
  001b4	e5c03000	 strb        r3, [r0]
  001b8	bafffff3	 blt         |$LL4@CursorOn|
  001bc	e59d4024	 ldr         r4, [sp, #0x24]
  001c0	e59d6028	 ldr         r6, [sp, #0x28]
  001c4	e59d0014	 ldr         r0, [sp, #0x14]
  001c8	e59de010	 ldr         lr, [sp, #0x10]
  001cc	e59db018	 ldr         r11, [sp, #0x18]
  001d0	e59d5004	 ldr         r5, [sp, #4]
  001d4	ea000014	 b           |$LN44@CursorOn|
  001d8		 |$LN6@CursorOn|

; 2247 :                     break;
; 2248 : 
; 2249 :                 case 2:
; 2250 :                     ((USHORT*)pStoreLine)[xc]  = ((USHORT*)pFrameLine)[xf];

  001d8	e1d030b0	 ldrh        r3, [r0]
  001dc	e18b30b1	 strh        r3, [r11, +r1]

; 2251 :                     ((USHORT*)pFrameLine)[xf] &= ((USHORT*)pAndLine)[xc];

  001e0	e1db20b0	 ldrh        r2, [r11]
  001e4	e1d030b0	 ldrh        r3, [r0]
  001e8	e0022003	 and         r2, r2, r3
  001ec	e1c020b0	 strh        r2, [r0]

; 2252 :                     ((USHORT*)pFrameLine)[xf] ^= ((USHORT*)pXorLine)[xc];

  001f0	e19b30b5	 ldrh        r3, [r11, +r5]
  001f4	e0233002	 eor         r3, r3, r2
  001f8	e1c030b0	 strh        r3, [r0]

; 2253 :                     break;

  001fc	ea00000b	 b           |$LN13@CursorOn|
  00200		 |$LN7@CursorOn|

; 2233 :     
; 2234 :         for (xf = m_cursorRect.left, xc = 0; xf < m_cursorRect.right; xf++, xc++) 

  00200	e1a01008	 mov         r1, r8

; 2242 :             {
; 2243 :                 case 1:
; 2244 :                     pStoreLine[xc] = pFrameLine[xf];

  00204	e7f13007	 ldrb        r3, [r1, +r7]!
  00208	e59d2000	 ldr         r2, [sp]
  0020c	e7c93002	 strb        r3, [r9, +r2]

; 2245 :                     pFrameLine[xf] &= pAndLine[xc];

  00210	e5d12000	 ldrb        r2, [r1]
  00214	e5d93000	 ldrb        r3, [r9]
  00218	e0022003	 and         r2, r2, r3
  0021c	e5c12000	 strb        r2, [r1]

; 2246 :                     pFrameLine[xf] ^= pXorLine[xc];

  00220	e7d93005	 ldrb        r3, [r9, +r5]
  00224	e0233002	 eor         r3, r3, r2
  00228	e5c13000	 strb        r3, [r1]
  0022c		 |$LN44@CursorOn|

; 2233 :     
; 2234 :         for (xf = m_cursorRect.left, xc = 0; xf < m_cursorRect.right; xf++, xc++) 

  0022c	e59d1000	 ldr         r1, [sp]

; 2246 :                     pFrameLine[xf] ^= pXorLine[xc];

  00230		 |$LN13@CursorOn|
  00230	e5943160	 ldr         r3, [r4, #0x160]
  00234	e2877001	 add         r7, r7, #1
  00238	e28ee004	 add         lr, lr, #4
  0023c	e1570003	 cmp         r7, r3
  00240	e59d3008	 ldr         r3, [sp, #8]
  00244	e2800002	 add         r0, r0, #2
  00248	e28bb002	 add         r11, r11, #2
  0024c	e2833004	 add         r3, r3, #4
  00250	e58d3008	 str         r3, [sp, #8]
  00254	e59d300c	 ldr         r3, [sp, #0xC]
  00258	e58de010	 str         lr, [sp, #0x10]
  0025c	e28aa003	 add         r10, r10, #3
  00260	e2833003	 add         r3, r3, #3
  00264	e58d300c	 str         r3, [sp, #0xC]
  00268	e58d0014	 str         r0, [sp, #0x14]
  0026c	e58db018	 str         r11, [sp, #0x18]
  00270	e2899001	 add         r9, r9, #1
  00274	baffffa6	 blt         |$LL14@CursorOn|
  00278		 |$LN42@CursorOn|

; 2221 :     bytesPerLine = m_pPrimarySurface->Stride();
; 2222 : 
; 2223 :     for (yf = m_cursorRect.top, yc = 0; yf < m_cursorRect.bottom; yf++, yc++) 

  00278	e59d501c	 ldr         r5, [sp, #0x1C]
  0027c	e59da020	 ldr         r10, [sp, #0x20]
  00280	e59db02c	 ldr         r11, [sp, #0x2C]
  00284		 |$LN18@CursorOn|
  00284	e5943164	 ldr         r3, [r4, #0x164]
  00288	e2855001	 add         r5, r5, #1
  0028c	e28aa001	 add         r10, r10, #1
  00290	e1550003	 cmp         r5, r3
  00294	e58d501c	 str         r5, [sp, #0x1C]
  00298	e088800b	 add         r8, r8, r11
  0029c	e58da020	 str         r10, [sp, #0x20]
  002a0	baffff7a	 blt         |$LL19@CursorOn|
  002a4		 |$LN43@CursorOn|

; 2270 :             }                    
; 2271 :         }
; 2272 :     }
; 2273 :     
; 2274 :     // Cursor is visible now
; 2275 :     m_cursorVisible = TRUE;

  002a4	e3a03001	 mov         r3, #1
  002a8	e5843150	 str         r3, [r4, #0x150]
  002ac		 |$cleanUp$42774|

; 2276 : 
; 2277 : cleanUp: 
; 2278 :     DEBUGMSG(GPE_ZONE_CURSOR, (L"-OMAPDDGPE::CursonOn\r\n"));
; 2279 :     return;
; 2280 : }

  002ac	e28dd030	 add         sp, sp, #0x30
  002b0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  002b4	e12fff1e	 bx          lr
  002b8		 |$M43725|

			 ENDP  ; |?CursorOn@OMAPDDGPE@@QAAXXZ|, OMAPDDGPE::CursorOn

	EXPORT	|?CursorOff@OMAPDDGPE@@QAAXXZ|		; OMAPDDGPE::CursorOff
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T43761| DCD	|$LN46@CursorOff|
	DCD	0x40007502
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CursorOff@OMAPDDGPE@@QAAXXZ| PROC	; OMAPDDGPE::CursorOff

; 2285 : {

  00000		 |$LN46@CursorOff|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M43758|

; 2286 :     UCHAR *pFrame, *pFrameLine, *pStoreLine, data;
; 2287 :     int bytesPerPixel, bytesPerLine;
; 2288 :     int xf, yf, xc, yc, i;
; 2289 : 
; 2290 :     DEBUGMSG(GPE_ZONE_CURSOR, (L"+OMAPDDGPE::CursonOff\r\n"));
; 2291 : 
; 2292 :     if (m_cursorForcedOff || m_cursorDisabled || !m_cursorVisible) 

  00008	e5903154	 ldr         r3, [r0, #0x154]
  0000c	e3530000	 cmp         r3, #0
  00010	1a00006c	 bne         |$cleanUp$42834|
  00014	e590314c	 ldr         r3, [r0, #0x14C]
  00018	e3530000	 cmp         r3, #0
  0001c	1a000069	 bne         |$cleanUp$42834|
  00020	e5903150	 ldr         r3, [r0, #0x150]
  00024	e3530000	 cmp         r3, #0
  00028	0a000066	 beq         |$cleanUp$42834|

; 2293 :         goto cleanUp;
; 2294 : 
; 2295 :     if (m_cursorStore == NULL) 

  0002c	e5903178	 ldr         r3, [r0, #0x178]
  00030	e3530000	 cmp         r3, #0
  00034	0a000063	 beq         |$cleanUp$42834|

; 2296 :     {
; 2297 :         DEBUGMSG(GPE_ZONE_ERROR, (L"OMAPDDGPE::CursorOff: "
; 2298 :             L"No cursor store available\r\n"
; 2299 :         ));
; 2300 :         goto cleanUp;
; 2301 :     }
; 2302 : 
; 2303 :     // We support only 1,2,3 and 4 bytes per pixel
; 2304 :     bytesPerPixel = (m_pMode->Bpp + 7) >> 3;

  00038	e5903010	 ldr         r3, [r0, #0x10]
  0003c	e593300c	 ldr         r3, [r3, #0xC]
  00040	e2833007	 add         r3, r3, #7
  00044	e1a051c3	 mov         r5, r3, asr #3

; 2305 :     if (bytesPerPixel <= 0 || bytesPerPixel > 4) goto cleanUp;

  00048	e2453001	 sub         r3, r5, #1
  0004c	e3530003	 cmp         r3, #3
  00050	e58d500c	 str         r5, [sp, #0xC]
  00054	8a00005b	 bhi         |$cleanUp$42834|

; 2306 : 
; 2307 :     // Get some base metrics
; 2308 :     pFrame = (UCHAR*)m_pPrimarySurface->Buffer();

  00058	e5902004	 ldr         r2, [r0, #4]

; 2309 :     bytesPerLine = m_pPrimarySurface->Stride();
; 2310 : 
; 2311 :     for (yf = m_cursorRect.top, yc = 0; yf < m_cursorRect.bottom; yf++, yc++) 

  0005c	e590e15c	 ldr         lr, [r0, #0x15C]
  00060	e5903164	 ldr         r3, [r0, #0x164]
  00064	e5928008	 ldr         r8, [r2, #8]
  00068	e5921004	 ldr         r1, [r2, #4]
  0006c	e15e0003	 cmp         lr, r3
  00070	e58d8010	 str         r8, [sp, #0x10]
  00074	e3a07000	 mov         r7, #0
  00078	aa000050	 bge         |$LN43@CursorOff|

; 2306 : 
; 2307 :     // Get some base metrics
; 2308 :     pFrame = (UCHAR*)m_pPrimarySurface->Buffer();

  0007c	e026189e	 mla         r6, lr, r8, r1
  00080		 |$LL19@CursorOff|

; 2312 :     {
; 2313 :         // Check if we are done
; 2314 :         if (yf < 0) continue;

  00080	e35e0000	 cmp         lr, #0
  00084	4a000047	 bmi         |$LN18@CursorOff|

; 2315 :         if (yf >= m_pMode->height) break;

  00088	e5903010	 ldr         r3, [r0, #0x10]
  0008c	e5933008	 ldr         r3, [r3, #8]
  00090	e15e0003	 cmp         lr, r3
  00094	aa000049	 bge         |$LN43@CursorOff|

; 2316 : 
; 2317 :         pFrameLine = &pFrame[yf * bytesPerLine];
; 2318 :         pStoreLine = &m_cursorStore[yc * m_cursorSize.x * bytesPerPixel];

  00098	e5902168	 ldr         r2, [r0, #0x168]
  0009c	e5901178	 ldr         r1, [r0, #0x178]

; 2319 :     
; 2320 :         for (xf = m_cursorRect.left, xc = 0; xf < m_cursorRect.right; xf++, xc++) 

  000a0	e5904158	 ldr         r4, [r0, #0x158]
  000a4	e0030792	 mul         r3, r2, r7
  000a8	e5902160	 ldr         r2, [r0, #0x160]
  000ac	e0211593	 mla         r1, r3, r5, r1
  000b0	e1540002	 cmp         r4, r2
  000b4	aa00003b	 bge         |$LN18@CursorOff|
  000b8	e0843084	 add         r3, r4, r4, lsl #1
  000bc	e0833006	 add         r3, r3, r6
  000c0	e58d3000	 str         r3, [sp]
  000c4	e1a03001	 mov         r3, r1
  000c8	e1a02001	 mov         r2, r1
  000cc	e58d3004	 str         r3, [sp, #4]
  000d0	e0869084	 add         r9, r6, r4, lsl #1
  000d4	e1a0a001	 mov         r10, r1
  000d8	e086b104	 add         r11, r6, r4, lsl #2
  000dc	e58d2008	 str         r2, [sp, #8]
  000e0		 |$LL14@CursorOff|

; 2321 :         {
; 2322 :             // Check if we are done
; 2323 :             if (xf < 0) continue;

  000e0	e3540000	 cmp         r4, #0
  000e4	4a00001e	 bmi         |$LN13@CursorOff|

; 2324 :             if (xf >= m_pMode->width) break;

  000e8	e5903010	 ldr         r3, [r0, #0x10]
  000ec	e5933004	 ldr         r3, [r3, #4]
  000f0	e1540003	 cmp         r4, r3
  000f4	aa00002a	 bge         |$LN42@CursorOff|

; 2325 :     
; 2326 :             // Depending on bytes per pixel
; 2327 :             switch (bytesPerPixel) 

  000f8	e3550001	 cmp         r5, #1
  000fc	0a000016	 beq         |$LN7@CursorOff|
  00100	e3550002	 cmp         r5, #2
  00104	0a000011	 beq         |$LN6@CursorOff|
  00108	e3550003	 cmp         r5, #3
  0010c	0a000004	 beq         |$LN5@CursorOff|
  00110	e3550004	 cmp         r5, #4
  00114	1a000012	 bne         |$LN13@CursorOff|

; 2343 : 
; 2344 :                 case 4:
; 2345 :                     ((ULONG*)pFrameLine)[xf] = ((ULONG*)pStoreLine)[xc];

  00118	e5923000	 ldr         r3, [r2]
  0011c	e58b3000	 str         r3, [r11]

; 2346 :                     break;

  00120	ea00000f	 b           |$LN13@CursorOff|
  00124		 |$LN5@CursorOff|

; 2336 : 
; 2337 :                 case 3:
; 2338 :                     for (i = 0; i < bytesPerPixel; i++) {
; 2339 :                         data = pStoreLine[xc * bytesPerPixel + i];
; 2340 :                         pFrameLine[xf * bytesPerPixel + i] = data;
; 2341 :                     }                    
; 2342 :                     break;

  00124	e59d8000	 ldr         r8, [sp]
  00128	e59d5004	 ldr         r5, [sp, #4]
  0012c	e3a02000	 mov         r2, #0
  00130		 |$LL4@CursorOff|
  00130	e7d53002	 ldrb        r3, [r5, +r2]
  00134	e7c83002	 strb        r3, [r8, +r2]
  00138	e2822001	 add         r2, r2, #1
  0013c	e3520003	 cmp         r2, #3
  00140	bafffffa	 blt         |$LL4@CursorOff|
  00144	e59d500c	 ldr         r5, [sp, #0xC]
  00148	e59d2008	 ldr         r2, [sp, #8]
  0014c	ea000004	 b           |$LN13@CursorOff|
  00150		 |$LN6@CursorOff|

; 2331 :                     break;
; 2332 : 
; 2333 :                 case 2:
; 2334 :                     ((USHORT*)pFrameLine)[xf] = ((USHORT*)pStoreLine)[xc];

  00150	e1da30b0	 ldrh        r3, [r10]
  00154	e1c930b0	 strh        r3, [r9]

; 2335 :                     break;

  00158	ea000001	 b           |$LN13@CursorOff|
  0015c		 |$LN7@CursorOff|

; 2328 :             {
; 2329 :                 case 1:
; 2330 :                     pFrameLine[xf] = pStoreLine[xc];

  0015c	e5d13000	 ldrb        r3, [r1]
  00160	e7c63004	 strb        r3, [r6, +r4]
  00164		 |$LN13@CursorOff|
  00164	e5903160	 ldr         r3, [r0, #0x160]
  00168	e2844001	 add         r4, r4, #1
  0016c	e2822004	 add         r2, r2, #4
  00170	e1540003	 cmp         r4, r3
  00174	e59d3000	 ldr         r3, [sp]
  00178	e28bb004	 add         r11, r11, #4
  0017c	e2899002	 add         r9, r9, #2
  00180	e2833003	 add         r3, r3, #3
  00184	e58d3000	 str         r3, [sp]
  00188	e59d3004	 ldr         r3, [sp, #4]
  0018c	e58d2008	 str         r2, [sp, #8]
  00190	e28aa002	 add         r10, r10, #2
  00194	e2833003	 add         r3, r3, #3
  00198	e58d3004	 str         r3, [sp, #4]
  0019c	e2811001	 add         r1, r1, #1
  001a0	baffffce	 blt         |$LL14@CursorOff|
  001a4		 |$LN42@CursorOff|

; 2309 :     bytesPerLine = m_pPrimarySurface->Stride();
; 2310 : 
; 2311 :     for (yf = m_cursorRect.top, yc = 0; yf < m_cursorRect.bottom; yf++, yc++) 

  001a4	e59d8010	 ldr         r8, [sp, #0x10]
  001a8		 |$LN18@CursorOff|
  001a8	e5903164	 ldr         r3, [r0, #0x164]
  001ac	e28ee001	 add         lr, lr, #1
  001b0	e0866008	 add         r6, r6, r8
  001b4	e15e0003	 cmp         lr, r3
  001b8	e2877001	 add         r7, r7, #1
  001bc	baffffaf	 blt         |$LL19@CursorOff|
  001c0		 |$LN43@CursorOff|

; 2347 :             }                    
; 2348 :         }
; 2349 :     }
; 2350 : 
; 2351 :     // Cursor isn't visible now
; 2352 :     m_cursorVisible = FALSE;

  001c0	e3a03000	 mov         r3, #0
  001c4	e5803150	 str         r3, [r0, #0x150]
  001c8		 |$cleanUp$42834|

; 2353 : 
; 2354 : cleanUp: 
; 2355 :     DEBUGMSG(GPE_ZONE_CURSOR, (L"-OMAPDDGPE::CursonOff\r\n"));
; 2356 :     return;
; 2357 : }

  001c8	e28dd014	 add         sp, sp, #0x14
  001cc	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001d0	e12fff1e	 bx          lr
  001d4		 |$M43759|

			 ENDP  ; |?CursorOff@OMAPDDGPE@@QAAXXZ|, OMAPDDGPE::CursorOff

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|??0OMAPDDGPE@@QAA@XZ|			; OMAPDDGPE::OMAPDDGPE
	EXPORT	|??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@| [ DATA ] ; `string'
	IMPORT	|InitializeCriticalSection|
	IMPORT	|?SetSurfaceMgr@OMAPDisplayController@@QAAHPAVOMAPSurfaceManager@@@Z| ; OMAPDisplayController::SetSurfaceMgr
	IMPORT	|??0OMAPFlatSurfaceManager@@QAA@XZ|	; OMAPFlatSurfaceManager::OMAPFlatSurfaceManager
	IMPORT	|??0OMAPVrfbSurfaceManager@@QAA@XZ|	; OMAPVrfbSurfaceManager::OMAPVrfbSurfaceManager
	IMPORT	|?InitInterrupts@OMAPDisplayController@@QAAHKK@Z| ; OMAPDisplayController::InitInterrupts
	IMPORT	|?InitLCD@OMAPDisplayController@@QAAHXZ| ; OMAPDisplayController::InitLCD
	IMPORT	|?InitController@OMAPDisplayController@@QAAHHHH@Z| ; OMAPDisplayController::InitController
	IMPORT	|??0OMAPDisplayController@@QAA@XZ|	; OMAPDisplayController::OMAPDisplayController
	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|AdvertiseInterface|
	IMPORT	|GetModuleFileNameW|
	IMPORT	|g_hmodDisplayDll|
	IMPORT	|??0DDGPE@@QAA@XZ|			; DDGPE::DDGPE
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T43908| DCD	|$LN101@OMAPDDGPE@2|
	DCD	0xc0014f02

  00000			 AREA	 |.xdata|, DATA
|$T43904| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@| DCB "{"
	DCB	0x0, "E", 0x0, "B", 0x0, "9", 0x0, "1", 0x0, "C", 0x0, "7"
	DCB	0x0, "C", 0x0, "9", 0x0, "-", 0x0, "8", 0x0, "B", 0x0, "F"
	DCB	0x0, "6", 0x0, "-", 0x0, "4", 0x0, "a", 0x0, "2", 0x0, "d"
	DCB	0x0, "-", 0x0, "9", 0x0, "A", 0x0, "B", 0x0, "8", 0x0, "-"
	DCB	0x0, "6", 0x0, "9", 0x0, "7", 0x0, "2", 0x0, "4", 0x0, "E"
	DCB	0x0, "E", 0x0, "D", 0x0, "9", 0x0, "7", 0x0, "D", 0x0, "1"
	DCB	0x0, "}", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T43904|

  00008		 |??0OMAPDDGPE@@QAA@XZ| PROC		; OMAPDDGPE::OMAPDDGPE

; 246  : {

  00008		 |$LN101@OMAPDDGPE@2|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddf99	 sub         sp, sp, #0x99, 30
  00010		 |$M43905|
  00010	e1a02000	 mov         r2, r0
  00014	e58d2024	 str         r2, [sp, #0x24]
  00018	e59f3520	 ldr         r3, [pc, #0x520]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3260	 str         r3, [sp, #0x260]
  00024	eb000000	 bl          |??0DDGPE@@QAA@XZ|

; 247  :     GUID    guid;
; 248  :     DWORD   dwWidth,
; 249  :             dwHeight;
; 250  :     TCHAR   szTemp[MAX_PATH];
; 251  : 
; 252  :     DEBUGMSG(GPE_ZONE_INIT,(TEXT("OMAPDDGPE::OMAPDDGPE\r\n")));
; 253  : 
; 254  : 
; 255  :     //  No overlay surfaces enabled
; 256  :     m_pOverlay1Surf = NULL;
; 257  :     m_pOverlay2Surf = NULL;
; 258  : 
; 259  :     //  No TV out surface
; 260  :     m_pTVSurf = NULL;
; 261  : 
; 262  :     //  No GAPI game surface
; 263  :     m_bGameEnable = FALSE;
; 264  :     m_bGameScale  = TRUE;
; 265  :     m_pGameSurf   = NULL;
; 266  :     
; 267  :     m_bHdmiEnable = FALSE;
; 268  :     //  Defaults for TV Out settings
; 269  :     m_eTVPipeline           = OMAP_DSS_PIPELINE_VIDEO2;
; 270  : 
; 271  : 
; 272  :     // Convert display power class to GUID
; 273  :     if (!ConvertStringToGuid(PMCLASS_DISPLAY, &guid))

  00028	e59de024	 ldr         lr, [sp, #0x24]
  0002c	e59f3508	 ldr         r3, [pc, #0x508]
  00030	e59d2024	 ldr         r2, [sp, #0x24]
  00034	e3a04000	 mov         r4, #0
  00038	e58e40c0	 str         r4, [lr, #0xC0]
  0003c	e58e40c4	 str         r4, [lr, #0xC4]
  00040	e58e4108	 str         r4, [lr, #0x108]
  00044	e58e4138	 str         r4, [lr, #0x138]
  00048	e58e4140	 str         r4, [lr, #0x140]
  0004c	e58e4144	 str         r4, [lr, #0x144]
  00050	e3a04002	 mov         r4, #2
  00054	e59f14dc	 ldr         r1, [pc, #0x4DC]
  00058	e59f04d4	 ldr         r0, [pc, #0x4D4]
  0005c	e3a05001	 mov         r5, #1
  00060	e58e410c	 str         r4, [lr, #0x10C]
  00064	e58e513c	 str         r5, [lr, #0x13C]
  00068	e28de044	 add         lr, sp, #0x44
  0006c	e28d4040	 add         r4, sp, #0x40
  00070	e28d6038	 add         r6, sp, #0x38
  00074	e28d7034	 add         r7, sp, #0x34
  00078	e28d8030	 add         r8, sp, #0x30
  0007c	e28d902c	 add         r9, sp, #0x2C
  00080	e28da028	 add         r10, sp, #0x28
  00084	e28db04e	 add         r11, sp, #0x4E
  00088	e5823000	 str         r3, [r2]
  0008c	e28d503c	 add         r5, sp, #0x3C
  00090	e28d304c	 add         r3, sp, #0x4C
  00094	e28d2048	 add         r2, sp, #0x48
  00098	e58de020	 str         lr, [sp, #0x20]
  0009c	e58d401c	 str         r4, [sp, #0x1C]
  000a0	e58d5018	 str         r5, [sp, #0x18]
  000a4	e58d6014	 str         r6, [sp, #0x14]
  000a8	e58d7010	 str         r7, [sp, #0x10]
  000ac	e58d800c	 str         r8, [sp, #0xC]
  000b0	e58d9008	 str         r9, [sp, #8]
  000b4	e58da004	 str         r10, [sp, #4]
  000b8	e58db000	 str         r11, [sp]
  000bc	eb000000	 bl          swscanf
  000c0	e350000b	 cmp         r0, #0xB
  000c4	1a000111	 bne         |$LN96@OMAPDDGPE@2|
  000c8	e3a01000	 mov         r1, #0
  000cc	e28d0028	 add         r0, sp, #0x28
  000d0	e28de048	 add         lr, sp, #0x48
  000d4		 |$LL64@OMAPDDGPE@2|
  000d4	e4902004	 ldr         r2, [r0], #4
  000d8	e081300e	 add         r3, r1, lr
  000dc	e2811001	 add         r1, r1, #1
  000e0	e3510008	 cmp         r1, #8
  000e4	e5c32008	 strb        r2, [r3, #8]
  000e8	3afffff9	 bcc         |$LL64@OMAPDDGPE@2|

; 274  :     {
; 275  :         DEBUGMSG(GPE_ZONE_ERROR, (L"ERROR: Failed convert display power class '%s' to GUID\r\n"));
; 276  :         return;
; 277  :     }
; 278  : 
; 279  : 	// Get module's file name
; 280  : 	if (!GetModuleFileName(g_hmodDisplayDll, szTemp, sizeof(szTemp) / sizeof(szTemp[0])))

  000ec	e59f343c	 ldr         r3, [pc, #0x43C]
  000f0	e3a02f41	 mov         r2, #0x41, 30
  000f4	e28d1058	 add         r1, sp, #0x58
  000f8	e5930000	 ldr         r0, [r3]
  000fc		 |$cleanUp$43825|
  000fc	eb000000	 bl          GetModuleFileNameW
  00100	e3500000	 cmp         r0, #0
  00104	0a000101	 beq         |$LN96@OMAPDDGPE@2|

; 281  : 	{
; 282  :         DEBUGMSG(GPE_ZONE_ERROR, (L"ERROR: Failed to retrieve module file name\r\n"));
; 283  :         return;
; 284  : 	}
; 285  : 
; 286  :     // Advertise power class interface
; 287  :     if (!AdvertiseInterface(&guid, szTemp, TRUE))

  00108	e3a02001	 mov         r2, #1
  0010c	e28d1058	 add         r1, sp, #0x58
  00110	e28d0048	 add         r0, sp, #0x48
  00114	eb000000	 bl          AdvertiseInterface
  00118	e3500000	 cmp         r0, #0
  0011c	0a0000fb	 beq         |$LN96@OMAPDDGPE@2|
  00120	e3a03c05	 mov         r3, #5, 24

; 288  :     {
; 289  :         DEBUGMSG(GPE_ZONE_ERROR, (L"ERROR: Failed advertise display power class '%s'\r\n"));
; 290  :         return;
; 291  :     }
; 292  : 
; 293  : 
; 294  :     //  Allocate display controller
; 295  :     m_pDisplayContr = new OMAPDisplayController();

  00124	e3830044	 orr         r0, r3, #0x44
  00128	eb000000	 bl          |??2@YAPAXI@Z|
  0012c	e3500000	 cmp         r0, #0
  00130	0a000001	 beq         |$LN24@OMAPDDGPE@2|
  00134	eb000000	 bl          |??0OMAPDisplayController@@QAA@XZ|
  00138	ea000000	 b           |$LN25@OMAPDDGPE@2|
  0013c		 |$LN24@OMAPDDGPE@2|
  0013c	e3a00000	 mov         r0, #0
  00140		 |$LN25@OMAPDDGPE@2|
  00140	e59d4024	 ldr         r4, [sp, #0x24]

; 296  :     if (m_pDisplayContr == NULL)

  00144	e3500000	 cmp         r0, #0
  00148	e58400b0	 str         r0, [r4, #0xB0]
  0014c	0a0000f0	 beq         |$LN22@OMAPDDGPE@2|

; 297  :     {
; 298  :         DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to allocate display controller\r\n"));
; 299  :         return;
; 300  :     }
; 301  : 
; 302  :     // Is resize using ISP resizer enabled?
; 303  :     m_bDssIspRszEnabled = (g_Globals.m_dwDssIspRszEnabled) ? TRUE : FALSE; 

  00150	e59f53d4	 ldr         r5, [pc, #0x3D4]

; 304  : 
; 305  :     //  Initial settings for DVI
; 306  :     //m_bDVIEnable = LcdPdd_DVI_Enabled();
; 307  :     //m_pDisplayContr->DVISelect(m_bDVIEnable);
; 308  :     m_bDVIEnable = FALSE;

  00154	e3a07000	 mov         r7, #0
  00158	e595324c	 ldr         r3, [r5, #0x24C]
  0015c	e5847130	 str         r7, [r4, #0x130]
  00160	e3530000	 cmp         r3, #0
  00164	13a01001	 movne       r1, #1
  00168	03a01000	 moveq       r1, #0
  0016c	e5841148	 str         r1, [r4, #0x148]

; 309  :     
; 310  :     //  Setting for Gamma Correction
; 311  :     m_bEnableGammaCorr = (g_Globals.m_dwEnableGammaCorr) ? TRUE : FALSE;

  00170	e5953240	 ldr         r3, [r5, #0x240]
  00174	e3530000	 cmp         r3, #0
  00178	13a0e001	 movne       lr, #1
  0017c	03a0e000	 moveq       lr, #0
  00180	e584e134	 str         lr, [r4, #0x134]

; 312  : 
; 313  :     //  Initialize the controller
; 314  :     if( m_pDisplayContr->InitController(m_bEnableGammaCorr, g_Globals.m_dwEnableWaitForVerticalBlank,m_bDssIspRszEnabled) == FALSE )

  00184	e5952244	 ldr         r2, [r5, #0x244]
  00188	e1a03001	 mov         r3, r1
  0018c	e1a0100e	 mov         r1, lr
  00190	eb000000	 bl          |?InitController@OMAPDisplayController@@QAAHHHH@Z|
  00194	e3500000	 cmp         r0, #0
  00198	1a000008	 bne         |$LN17@OMAPDDGPE@2|

; 315  :     {
; 316  :         DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to initialize display controller\r\n"));
; 317  :         delete m_pDisplayContr;

  0019c	e59430b0	 ldr         r3, [r4, #0xB0]
  001a0	e1b00003	 movs        r0, r3
  001a4	15903000	 ldrne       r3, [r0]
  001a8	13a01001	 movne       r1, #1
  001ac	15933000	 ldrne       r3, [r3]
  001b0	11a0e00f	 movne       lr, pc
  001b4	112fff13	 bxne        r3
  001b8		 |$LN30@OMAPDDGPE@2|

; 318  :         m_pDisplayContr = NULL;

  001b8	e58470b0	 str         r7, [r4, #0xB0]

; 319  :         return;

  001bc	ea0000d4	 b           |$LN22@OMAPDDGPE@2|
  001c0		 |$LN17@OMAPDDGPE@2|

; 320  :     }
; 321  : 
; 322  :     //  Initialize the LCD
; 323  :     if( m_pDisplayContr->InitLCD() == FALSE )

  001c0	e59400b0	 ldr         r0, [r4, #0xB0]
  001c4	eb000000	 bl          |?InitLCD@OMAPDisplayController@@QAAHXZ|
  001c8	e3500000	 cmp         r0, #0
  001cc	1a000009	 bne         |$LN16@OMAPDDGPE@2|

; 324  :     {
; 325  :         DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to initialize LCD\r\n"));
; 326  :         delete m_pDisplayContr;

  001d0	e59430b0	 ldr         r3, [r4, #0xB0]
  001d4	e1b00003	 movs        r0, r3
  001d8	0afffff6	 beq         |$LN30@OMAPDDGPE@2|
  001dc	e5903000	 ldr         r3, [r0]
  001e0	e3a01001	 mov         r1, #1
  001e4	e5933000	 ldr         r3, [r3]
  001e8	e1a0e00f	 mov         lr, pc
  001ec	e12fff13	 bx          r3
  001f0	e58470b0	 str         r7, [r4, #0xB0]
  001f4	ea0000c6	 b           |$LN22@OMAPDDGPE@2|
  001f8		 |$LN16@OMAPDDGPE@2|

; 327  :         m_pDisplayContr = NULL;
; 328  :         return;
; 329  :     }
; 330  : 
; 331  :     //  Initialize the DSS interrupt handler
; 332  :     if( m_pDisplayContr->InitInterrupts(g_Globals.m_dwDSSIRQ, g_Globals.m_dwISTPriority) == FALSE )

  001f8	e595223c	 ldr         r2, [r5, #0x23C]
  001fc	e5951238	 ldr         r1, [r5, #0x238]
  00200	e59400b0	 ldr         r0, [r4, #0xB0]
  00204	eb000000	 bl          |?InitInterrupts@OMAPDisplayController@@QAAHKK@Z|
  00208	e3500000	 cmp         r0, #0
  0020c	1a000009	 bne         |$LN15@OMAPDDGPE@2|

; 333  :     {
; 334  :         DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to initialize DSS interrupts!\r\n"));
; 335  :         delete m_pDisplayContr;

  00210	e59430b0	 ldr         r3, [r4, #0xB0]
  00214	e1b00003	 movs        r0, r3
  00218	0affffe6	 beq         |$LN30@OMAPDDGPE@2|
  0021c	e5903000	 ldr         r3, [r0]
  00220	e3a01001	 mov         r1, #1
  00224	e5933000	 ldr         r3, [r3]
  00228	e1a0e00f	 mov         lr, pc
  0022c	e12fff13	 bx          r3
  00230	e58470b0	 str         r7, [r4, #0xB0]
  00234	ea0000b6	 b           |$LN22@OMAPDDGPE@2|
  00238		 |$LN15@OMAPDDGPE@2|

; 336  :         m_pDisplayContr = NULL;
; 337  :         return;
; 338  :     }
; 339  : 
; 340  :     //  Allocate and intialize surface memory manager
; 341  :     switch( g_Globals.m_dwSurfaceMgr )

  00238	e5953000	 ldr         r3, [r5]
  0023c	e3530000	 cmp         r3, #0
  00240	0a000008	 beq         |$LN12@OMAPDDGPE@2|
  00244	e3530001	 cmp         r3, #1

; 349  :             break;
; 350  : 
; 351  :         default:
; 352  :             m_pSurfaceMgr = NULL;

  00248	158470b4	 strne       r7, [r4, #0xB4]
  0024c	1a000010	 bne         |$LN93@OMAPDDGPE@2|
  00250	e3a00024	 mov         r0, #0x24
  00254	eb000000	 bl          |??2@YAPAXI@Z|
  00258	e3500000	 cmp         r0, #0
  0025c	0a000007	 beq         |$LN36@OMAPDDGPE@2|

; 345  :             break;
; 346  : 
; 347  :         case SURFACEMGR_VRFB:
; 348  :             m_pSurfaceMgr = new OMAPVrfbSurfaceManager();

  00260	eb000000	 bl          |??0OMAPVrfbSurfaceManager@@QAA@XZ|
  00264	ea000006	 b           |$LN37@OMAPDDGPE@2|
  00268		 |$LN12@OMAPDDGPE@2|

; 342  :     {
; 343  :         case SURFACEMGR_FLAT:
; 344  : 			m_pSurfaceMgr = new OMAPFlatSurfaceManager();

  00268	e3a00020	 mov         r0, #0x20
  0026c	eb000000	 bl          |??2@YAPAXI@Z|
  00270	e3500000	 cmp         r0, #0
  00274	0a000001	 beq         |$LN36@OMAPDDGPE@2|
  00278	eb000000	 bl          |??0OMAPFlatSurfaceManager@@QAA@XZ|
  0027c	ea000000	 b           |$LN37@OMAPDDGPE@2|
  00280		 |$LN36@OMAPDDGPE@2|
  00280	e3a00000	 mov         r0, #0
  00284		 |$LN37@OMAPDDGPE@2|

; 353  :             break;
; 354  :     }
; 355  : 
; 356  :     if (m_pSurfaceMgr == NULL)

  00284	e1a03000	 mov         r3, r0
  00288	e58400b4	 str         r0, [r4, #0xB4]
  0028c	e1b00003	 movs        r0, r3
  00290	1a000009	 bne         |$LN9@OMAPDDGPE@2|
  00294		 |$LN93@OMAPDDGPE@2|

; 357  :     {
; 358  :         DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to allocate surface manager\r\n"));
; 359  :         delete m_pDisplayContr;

  00294	e59430b0	 ldr         r3, [r4, #0xB0]
  00298	e1b00003	 movs        r0, r3
  0029c	0affffc5	 beq         |$LN30@OMAPDDGPE@2|
  002a0	e5903000	 ldr         r3, [r0]
  002a4	e3a01001	 mov         r1, #1
  002a8	e5933000	 ldr         r3, [r3]
  002ac	e1a0e00f	 mov         lr, pc
  002b0	e12fff13	 bx          r3
  002b4	e58470b0	 str         r7, [r4, #0xB0]
  002b8	ea000095	 b           |$LN22@OMAPDDGPE@2|
  002bc		 |$LN9@OMAPDDGPE@2|

; 360  :         m_pDisplayContr = NULL;
; 361  :         return;
; 362  :     }
; 363  : 
; 364  :     if( m_pSurfaceMgr->Initialize(g_Globals.m_dwOffscreenMemory) == FALSE )

  002bc	e5903000	 ldr         r3, [r0]
  002c0	e5951008	 ldr         r1, [r5, #8]
  002c4	e5933004	 ldr         r3, [r3, #4]
  002c8	e1a0e00f	 mov         lr, pc
  002cc	e12fff13	 bx          r3
  002d0	e3500000	 cmp         r0, #0
  002d4	1a000010	 bne         |$LN8@OMAPDDGPE@2|

; 365  :     {
; 366  :         DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to initialize surface manager\r\n"));
; 367  :         delete m_pDisplayContr;

  002d8	e59430b0	 ldr         r3, [r4, #0xB0]
  002dc	e1b00003	 movs        r0, r3
  002e0	15903000	 ldrne       r3, [r0]
  002e4	13a01001	 movne       r1, #1
  002e8	15933000	 ldrne       r3, [r3]
  002ec	11a0e00f	 movne       lr, pc
  002f0	112fff13	 bxne        r3

; 368  :         delete m_pSurfaceMgr;

  002f4	e59430b4	 ldr         r3, [r4, #0xB4]
  002f8	e1b00003	 movs        r0, r3
  002fc	15903000	 ldrne       r3, [r0]
  00300	13a01001	 movne       r1, #1
  00304	15933000	 ldrne       r3, [r3]
  00308	11a0e00f	 movne       lr, pc
  0030c	112fff13	 bxne        r3

; 369  :         m_pDisplayContr = NULL;

  00310	e58470b0	 str         r7, [r4, #0xB0]

; 370  :         m_pSurfaceMgr = NULL;

  00314	e58470b4	 str         r7, [r4, #0xB4]

; 371  :         return;

  00318	ea00007d	 b           |$LN22@OMAPDDGPE@2|
  0031c		 |$LN8@OMAPDDGPE@2|

; 372  :     }
; 373  : 
; 374  : 
; 375  :     //  Associate the surface manager with the display controller
; 376  :     m_pDisplayContr->SetSurfaceMgr( m_pSurfaceMgr );

  0031c	e59410b4	 ldr         r1, [r4, #0xB4]
  00320	e59400b0	 ldr         r0, [r4, #0xB0]
  00324	eb000000	 bl          |?SetSurfaceMgr@OMAPDisplayController@@QAAHPAVOMAPSurfaceManager@@@Z|

; 377  : 
; 378  :     //  Initial settings for TV out
; 379  :     m_bTVOutEnable          = (g_Globals.m_dwTVOutEnable) ? TRUE : FALSE;

  00328	e5953214	 ldr         r3, [r5, #0x214]

; 380  :     m_dwTvOut_FilterLevel   = (g_Globals.m_dwTvOut_FilterLevel <= TVOUT_SETTINGS_MAX_FILTER) ? g_Globals.m_dwTvOut_FilterLevel : TVOUT_SETTINGS_MAX_FILTER;
; 381  :     m_dwTvOut_AspectRatio_W = (g_Globals.m_dwTvOut_AspectRatio_W > 0) ? g_Globals.m_dwTvOut_AspectRatio_W : 1;
; 382  :     m_dwTvOut_AspectRatio_H = (g_Globals.m_dwTvOut_AspectRatio_H > 0) ? g_Globals.m_dwTvOut_AspectRatio_H : 1;
; 383  :     m_dwTvOut_Resize_W      = (g_Globals.m_dwTvOut_Resize_W  <= TVOUT_SETTINGS_MAX_RESIZE) ? g_Globals.m_dwTvOut_Resize_W : TVOUT_SETTINGS_MAX_RESIZE;
; 384  :     m_dwTvOut_Resize_W      = (g_Globals.m_dwTvOut_Resize_W  >= TVOUT_SETTINGS_MIN_RESIZE) ? g_Globals.m_dwTvOut_Resize_W : TVOUT_SETTINGS_MIN_RESIZE;
; 385  :     m_dwTvOut_Resize_H      = (g_Globals.m_dwTvOut_Resize_H  <= TVOUT_SETTINGS_MAX_RESIZE) ? g_Globals.m_dwTvOut_Resize_H : TVOUT_SETTINGS_MAX_RESIZE;
; 386  :     m_dwTvOut_Resize_H      = (g_Globals.m_dwTvOut_Resize_H  >= TVOUT_SETTINGS_MIN_RESIZE) ? g_Globals.m_dwTvOut_Resize_H : TVOUT_SETTINGS_MIN_RESIZE;
; 387  :     m_lTvOut_Offset_W       = g_Globals.m_lTvOut_Offset_W;      
; 388  :     m_lTvOut_Offset_H       = g_Globals.m_lTvOut_Offset_H;      
; 389  :     
; 390  :     //  Check for initial screen orientation
; 391  :     if( m_pSurfaceMgr->SupportsRotation() == TRUE )

  0032c	e59420b4	 ldr         r2, [r4, #0xB4]
  00330	e3530000	 cmp         r3, #0
  00334	13a03001	 movne       r3, #1
  00338	03a03000	 moveq       r3, #0
  0033c	e5843110	 str         r3, [r4, #0x110]
  00340	e5953218	 ldr         r3, [r5, #0x218]
  00344	e1a00002	 mov         r0, r2
  00348	e3530000	 cmp         r3, #0
  0034c	13a03000	 movne       r3, #0
  00350	e5843114	 str         r3, [r4, #0x114]
  00354	e595321c	 ldr         r3, [r5, #0x21C]
  00358	e3530000	 cmp         r3, #0
  0035c	03a03001	 moveq       r3, #1
  00360	e5843118	 str         r3, [r4, #0x118]
  00364	e5953220	 ldr         r3, [r5, #0x220]
  00368	e3530000	 cmp         r3, #0
  0036c	03a03001	 moveq       r3, #1
  00370	e584311c	 str         r3, [r4, #0x11C]
  00374	e5953224	 ldr         r3, [r5, #0x224]
  00378	e3530064	 cmp         r3, #0x64
  0037c	83a03064	 movhi       r3, #0x64
  00380	e5843120	 str         r3, [r4, #0x120]
  00384	e5953224	 ldr         r3, [r5, #0x224]
  00388	e3530050	 cmp         r3, #0x50
  0038c	33a03050	 movcc       r3, #0x50
  00390	e5843120	 str         r3, [r4, #0x120]
  00394	e5953228	 ldr         r3, [r5, #0x228]
  00398	e3530064	 cmp         r3, #0x64
  0039c	83a03064	 movhi       r3, #0x64
  003a0	e5843124	 str         r3, [r4, #0x124]
  003a4	e5953228	 ldr         r3, [r5, #0x228]
  003a8	e3530050	 cmp         r3, #0x50
  003ac	33a03050	 movcc       r3, #0x50
  003b0	e5843124	 str         r3, [r4, #0x124]
  003b4	e595322c	 ldr         r3, [r5, #0x22C]
  003b8	e5843128	 str         r3, [r4, #0x128]
  003bc	e5953230	 ldr         r3, [r5, #0x230]
  003c0	e584312c	 str         r3, [r4, #0x12C]
  003c4	e5923000	 ldr         r3, [r2]
  003c8	e5933020	 ldr         r3, [r3, #0x20]
  003cc	e1a0e00f	 mov         lr, pc
  003d0	e12fff13	 bx          r3
  003d4	e3500001	 cmp         r0, #1
  003d8	1a00000f	 bne         |$LN7@OMAPDDGPE@2|

; 392  :     {
; 393  :         //  Set initial rotation angle
; 394  :         switch( g_Globals.m_dwRotationAngle )

  003dc	e5952004	 ldr         r2, [r5, #4]
  003e0	e1b03002	 movs        r3, r2
  003e4	0a00000a	 beq         |$LN4@OMAPDDGPE@2|
  003e8	e3530001	 cmp         r3, #1
  003ec	0a000003	 beq         |$LN3@OMAPDDGPE@2|
  003f0	e3530002	 cmp         r3, #2
  003f4	0a000006	 beq         |$LN4@OMAPDDGPE@2|
  003f8	e3530004	 cmp         r3, #4

; 411  :                 
; 412  :             default:
; 413  :                 //  Default to angle 0                
; 414  :                 m_iGraphicsRotate = DMDO_0;
; 415  :                 g_Globals.m_dwRotationAngle = DMDO_0;
; 416  :                 dwWidth  = m_pDisplayContr->GetLCDWidth();
; 417  :                 dwHeight = m_pDisplayContr->GetLCDHeight();
; 418  :                 break;

  003fc	1a000006	 bne         |$LN7@OMAPDDGPE@2|
  00400		 |$LN3@OMAPDDGPE@2|

; 401  :                 dwHeight = m_pDisplayContr->GetLCDHeight();
; 402  :                 break;
; 403  : 
; 404  :             case DMDO_90:
; 405  :             case DMDO_270:
; 406  :                 //  Valid rotation values
; 407  :                 m_iGraphicsRotate = g_Globals.m_dwRotationAngle;
; 408  :                 dwWidth  = m_pDisplayContr->GetLCDHeight();

  00400	e59430b0	 ldr         r3, [r4, #0xB0]
  00404	e5842098	 str         r2, [r4, #0x98]
  00408	e59354b0	 ldr         r5, [r3, #0x4B0]

; 409  :                 dwHeight = m_pDisplayContr->GetLCDWidth();

  0040c	e59364ac	 ldr         r6, [r3, #0x4AC]

; 410  :                 break;

  00410	ea000007	 b           |$LN1@OMAPDDGPE@2|
  00414		 |$LN4@OMAPDDGPE@2|

; 395  :         {
; 396  :             case DMDO_0:
; 397  :             case DMDO_180:
; 398  :                 //  Valid rotation values
; 399  :                 m_iGraphicsRotate = g_Globals.m_dwRotationAngle;
; 400  :                 dwWidth  = m_pDisplayContr->GetLCDWidth();

  00414	e5842098	 str         r2, [r4, #0x98]

; 419  :         }
; 420  :     }
; 421  :     else

  00418	ea000002	 b           |$LN97@OMAPDDGPE@2|
  0041c		 |$LN7@OMAPDDGPE@2|

; 422  :     {
; 423  :         //  Default values for non-rotatable surface managers
; 424  :         m_iGraphicsRotate = DMDO_0;
; 425  :         g_Globals.m_dwRotationAngle = DMDO_0;

  0041c	e3a03000	 mov         r3, #0
  00420	e5847098	 str         r7, [r4, #0x98]
  00424	e5853004	 str         r3, [r5, #4]
  00428		 |$LN97@OMAPDDGPE@2|

; 426  :         dwWidth  = m_pDisplayContr->GetLCDWidth();

  00428	e59430b0	 ldr         r3, [r4, #0xB0]
  0042c	e59354ac	 ldr         r5, [r3, #0x4AC]

; 427  :         dwHeight = m_pDisplayContr->GetLCDHeight();

  00430	e59364b0	 ldr         r6, [r3, #0x4B0]
  00434		 |$LN1@OMAPDDGPE@2|

; 428  :     }
; 429  : 
; 430  : 
; 431  :     //  Update GPE attributes to match LCD defaults
; 432  :     m_nScreenWidth  = dwWidth;
; 433  :     m_nScreenHeight = dwHeight;
; 434  :     
; 435  :     m_pModeEx = &m_gpeDefaultMode;

  00434	e2843040	 add         r3, r4, #0x40

; 436  :     m_pMode = &m_gpeDefaultMode.modeInfo;
; 437  :     memset(m_pModeEx, 0, sizeof(GPEModeEx));

  00438	e1a00003	 mov         r0, r3
  0043c	e3a02058	 mov         r2, #0x58
  00440	e3a01000	 mov         r1, #0
  00444	e5845008	 str         r5, [r4, #8]
  00448	e584600c	 str         r6, [r4, #0xC]
  0044c	e5843024	 str         r3, [r4, #0x24]
  00450	e5843010	 str         r3, [r4, #0x10]
  00454	eb000000	 bl          memset

; 438  :     m_pModeEx->dwSize = sizeof(GPEModeEx);

  00458	e5943024	 ldr         r3, [r4, #0x24]
  0045c	e3a02058	 mov         r2, #0x58

; 439  :     m_pModeEx->dwVersion = GPEMODEEX_CURRENTVERSION;
; 440  : 
; 441  :     m_pMode->modeId = 0;
; 442  :     m_pMode->width = dwWidth;
; 443  :     m_pMode->height = dwHeight;
; 444  :     m_pMode->frequency = 60;

  00460	e3a0103c	 mov         r1, #0x3C
  00464	e5832018	 str         r2, [r3, #0x18]
  00468	e5943024	 ldr         r3, [r4, #0x24]
  0046c	e5837020	 str         r7, [r3, #0x20]
  00470	e5943010	 ldr         r3, [r4, #0x10]
  00474	e5837000	 str         r7, [r3]
  00478	e5943010	 ldr         r3, [r4, #0x10]
  0047c	e5835004	 str         r5, [r3, #4]
  00480	e5943010	 ldr         r3, [r4, #0x10]
  00484	e5836008	 str         r6, [r3, #8]
  00488	e5943010	 ldr         r3, [r4, #0x10]
  0048c	e5831010	 str         r1, [r3, #0x10]

; 445  :     m_pMode->Bpp = OMAPDDGPE::PixelFormatToBpp(m_pDisplayContr->GetLCDPixelFormat());

  00490	e59430b0	 ldr         r3, [r4, #0xB0]
  00494	e59304a8	 ldr         r0, [r3, #0x4A8]
  00498	eb000000	 bl          |?PixelFormatToBpp@OMAPDDGPE@@SAKW4OMAP_DSS_PIXELFORMAT@@@Z|
  0049c	e5943010	 ldr         r3, [r4, #0x10]
  004a0	e583000c	 str         r0, [r3, #0xC]

; 446  :     m_pMode->format = OMAPDDGPE::PixelFormatToGPEFormat(m_pDisplayContr->GetLCDPixelFormat());

  004a4	e59430b0	 ldr         r3, [r4, #0xB0]
  004a8	e59304a8	 ldr         r0, [r3, #0x4A8]
  004ac	eb000000	 bl          |?PixelFormatToGPEFormat@OMAPDDGPE@@SA?AW4EGPEFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z|
  004b0	e5943010	 ldr         r3, [r4, #0x10]
  004b4	e5830014	 str         r0, [r3, #0x14]

; 447  :     m_pModeEx->ePixelFormat = OMAPDDGPE::PixelFormatToDDGPEFormat(m_pDisplayContr->GetLCDPixelFormat());

  004b8	e59430b0	 ldr         r3, [r4, #0xB0]
  004bc	e59304a8	 ldr         r0, [r3, #0x4A8]
  004c0	eb000000	 bl          |?PixelFormatToDDGPEFormat@OMAPDDGPE@@SA?AW4EDDGPEPixelFormat@@W4OMAP_DSS_PIXELFORMAT@@@Z|
  004c4	e5942024	 ldr         r2, [r4, #0x24]
  004c8	e1a03000	 mov         r3, r0

; 448  : 
; 449  :     
; 450  :     //  Initialize a critical section for display driver operations that need serialization
; 451  :     InitializeCriticalSection( &m_csOperationLock );

  004cc	e284009c	 add         r0, r4, #0x9C
  004d0	e5823034	 str         r3, [r2, #0x34]
  004d4	eb000000	 bl          InitializeCriticalSection

; 452  : 
; 453  :     m_cursorVisible = FALSE;
; 454  :     m_cursorDisabled = TRUE;
; 455  :     m_cursorForcedOff = FALSE;
; 456  :     memset(&m_cursorRect, 0x0, sizeof(m_cursorRect));

  004d8	e3a01001	 mov         r1, #1
  004dc	e1a03004	 mov         r3, r4
  004e0	e3a02000	 mov         r2, #0
  004e4	e584114c	 str         r1, [r4, #0x14C]
  004e8	e5847150	 str         r7, [r4, #0x150]
  004ec	e5847154	 str         r7, [r4, #0x154]
  004f0	e5a32158	 str         r2, [r3, #0x158]!
  004f4	e5832004	 str         r2, [r3, #4]
  004f8	e5832008	 str         r2, [r3, #8]
  004fc	e583200c	 str         r2, [r3, #0xC]

; 457  :     m_cursorStore = NULL;

  00500	e5847178	 str         r7, [r4, #0x178]

; 458  :     m_cursorXor = NULL;

  00504	e584717c	 str         r7, [r4, #0x17C]

; 459  :     m_cursorAnd = NULL;

  00508	e5847180	 str         r7, [r4, #0x180]
  0050c	ea000000	 b           |$LN22@OMAPDDGPE@2|
  00510		 |$LN96@OMAPDDGPE@2|

; 246  : {

  00510	e59d4024	 ldr         r4, [sp, #0x24]

; 459  :     m_cursorAnd = NULL;

  00514		 |$LN22@OMAPDDGPE@2|

; 460  : 	
; 461  : #if DEBUG_NEON_MEMORY_LEAK
; 462  :     m_bNeonBlt = FALSE;
; 463  : 	m_dwNeonBltCount = 0;
; 464  :     m_dwNeonBltCountLastMessage = 0;
; 465  : 	m_dwAvailPhysDelta = 0;
; 466  : 	m_dwAvailPageFileDelta = 0;
; 467  : #endif
; 468  : }

  00514	e59d0260	 ldr         r0, [sp, #0x260]
  00518	eb000000	 bl          __security_check_cookie
  0051c	e1a00004	 mov         r0, r4
  00520	e28ddf99	 add         sp, sp, #0x99, 30
  00524	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00528	e12fff1e	 bx          lr
  0052c		 |$LN102@OMAPDDGPE@2|
  0052c		 |$LN103@OMAPDDGPE@2|
  0052c	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  00530		 |$LN104@OMAPDDGPE@2|
  00530	00000000	 DCD         |g_hmodDisplayDll|
  00534		 |$LN105@OMAPDDGPE@2|
  00534	00000000	 DCD         |??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@|
  00538		 |$LN106@OMAPDDGPE@2|
  00538	00000000	 DCD         |??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@|
  0053c		 |$LN107@OMAPDDGPE@2|
  0053c	00000000	 DCD         |??_7OMAPDDGPE@@6B@|
  00540		 |$LN108@OMAPDDGPE@2|
  00540	00000000	 DCD         |__security_cookie|
  00544		 |$M43906|

			 ENDP  ; |??0OMAPDDGPE@@QAA@XZ|, OMAPDDGPE::OMAPDDGPE

	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T43930| DCD	|$LN8@scalar|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GOMAPDDGPE@@UAAPAXI@Z| PROC	; OMAPDDGPE::`scalar deleting destructor'
  00000		 |$LN8@scalar|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43927|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	e59f301c	 ldr         r3, [pc, #0x1C]
  00010	e5853000	 str         r3, [r5]
  00014	eb000000	 bl          |??1DDGPE@@UAA@XZ|
  00018	e3140001	 tst         r4, #1
  0001c	11a00005	 movne       r0, r5
  00020	1b000000	 blne        |??3@YAXPAX@Z|
  00024	e1a00005	 mov         r0, r5
  00028	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$LN9@scalar|
  00030		 |$LN10@scalar|
  00030	00000000	 DCD         |??_7OMAPDDGPE@@6B@|
  00034		 |$M43928|

			 ENDP  ; |??_GOMAPDDGPE@@UAAPAXI@Z|, OMAPDDGPE::`scalar deleting destructor'

	IMPORT	|?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z| ; OMAPDisplayController::SetPipelineAttribs
	IMPORT	|EngCreatePalette|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\inc\dssai.h

  00000			 AREA	 |.pdata|, PDATA
|$T43986| DCD	|$LN43@SetMode|
	DCD	0x4000a902
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetMode@OMAPDDGPE@@UAAJHPAPAUHPALETTE__@@@Z| PROC ; OMAPDDGPE::SetMode

; 556  : {

  00000		 |$LN43@SetMode|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M43983|
  00008	e1a07002	 mov         r7, r2
  0000c	e1a06000	 mov         r6, r0

; 557  :     SCODE   scResult = E_FAIL;
; 558  :     BOOL    bResult;
; 559  : 
; 560  :     DEBUGMSG(GPE_ZONE_INIT,(TEXT("OMAPDDGPE::SetMode\r\n")));
; 561  : 
; 562  : 
; 563  :     //  Check display controller enabled
; 564  :     if( m_pDisplayContr == NULL )

  00010	e59630b0	 ldr         r3, [r6, #0xB0]
  00014	e1b00003	 movs        r0, r3
  00018	03a03116	 moveq       r3, #0x16, 2

; 565  :         return E_FAIL;

  0001c	03834901	 orreq       r4, r3, #1, 18
  00020	0a000099	 beq         |$cleanUp$42254|

; 566  : 
; 567  :     //  Only a single, default mode is supported
; 568  :     if( modeId == 0 )

  00024	e3510000	 cmp         r1, #0
  00028	1a000096	 bne         |$LN16@SetMode|

; 569  :     {
; 570  :         //  Allocate display primary surface for LCD
; 571  :         scResult = AllocSurface(
; 572  :                         &m_pPrimarySurf,
; 573  :                         m_pDisplayContr->GetLCDPixelFormat(),
; 574  :                         m_pDisplayContr->GetLCDWidth(),
; 575  :                         m_pDisplayContr->GetLCDHeight() );

  0002c	e5962000	 ldr         r2, [r6]
  00030	e59054b0	 ldr         r5, [r0, #0x4B0]
  00034	e59034ac	 ldr         r3, [r0, #0x4AC]
  00038	e59240f4	 ldr         r4, [r2, #0xF4]
  0003c	e59024a8	 ldr         r2, [r0, #0x4A8]
  00040	e1a00006	 mov         r0, r6
  00044	e28610bc	 add         r1, r6, #0xBC
  00048	e58d5000	 str         r5, [sp]
  0004c	e1a0e00f	 mov         lr, pc
  00050	e12fff14	 bx          r4
  00054	e1b04000	 movs        r4, r0

; 576  :         if (scResult != S_OK)

  00058	1a00008b	 bne         |$cleanUp$42254|

; 577  :         {
; 578  :             DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to allocate primary surface\r\n"));
; 579  :             goto cleanUp;
; 580  :         }
; 581  : 
; 582  :         //  Set GPE primary surface pointer
; 583  :         m_pPrimarySurface = m_pPrimarySurf;

  0005c	e59630bc	 ldr         r3, [r6, #0xBC]

; 584  : 
; 585  : 
; 586  :         //  Set the desired initial rotation angle if rotation is supported by the surface manager
; 587  :         if( m_pSurfaceMgr->SupportsRotation() == TRUE )

  00060	e59600b4	 ldr         r0, [r6, #0xB4]
  00064	e5863004	 str         r3, [r6, #4]
  00068	e5903000	 ldr         r3, [r0]
  0006c	e5933020	 ldr         r3, [r3, #0x20]
  00070	e1a0e00f	 mov         lr, pc
  00074	e12fff13	 bx          r3
  00078	e3500001	 cmp         r0, #1
  0007c	1a00002b	 bne         |$LN11@SetMode|

; 588  :         {
; 589  :             //  Change width and height of primary surface, but not the surface angle of the GPE surface
; 590  :             //  Have the display controller rotate the output of the primary surface
; 591  :             switch( m_iGraphicsRotate )

  00080	e5963098	 ldr         r3, [r6, #0x98]
  00084	e3530000	 cmp         r3, #0
  00088	0a00001e	 beq         |$LN10@SetMode|
  0008c	e3530001	 cmp         r3, #1
  00090	0a000014	 beq         |$LN9@SetMode|
  00094	e3530002	 cmp         r3, #2
  00098	0a00000a	 beq         |$LN8@SetMode|
  0009c	e3530004	 cmp         r3, #4
  000a0	1a000022	 bne         |$LN11@SetMode|

; 616  : 
; 617  :                 case DMDO_270:
; 618  :                     //  Set the rotation and orientation of the primary surface
; 619  :                     m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_ROTATED );

  000a4	e59600bc	 ldr         r0, [r6, #0xBC]
  000a8	e3a01001	 mov         r1, #1
  000ac	e5903000	 ldr         r3, [r0]
  000b0	e5933048	 ldr         r3, [r3, #0x48]
  000b4	e1a0e00f	 mov         lr, pc
  000b8	e12fff13	 bx          r3

; 620  :                     
; 621  :                     //  Set the output rotation angle for the pipeline
; 622  :                     m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_270 );

  000bc	e3a03c01	 mov         r3, #1, 24
  000c0	e383200e	 orr         r2, r3, #0xE

; 623  :                     break;

  000c4	ea000016	 b           |$LN40@SetMode|
  000c8		 |$LN8@SetMode|

; 608  : 
; 609  :                 case DMDO_180:
; 610  :                     //  Set the rotation and orientation of the primary surface
; 611  :                     m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_STANDARD );

  000c8	e59600bc	 ldr         r0, [r6, #0xBC]
  000cc	e3a01000	 mov         r1, #0
  000d0	e5903000	 ldr         r3, [r0]
  000d4	e5933048	 ldr         r3, [r3, #0x48]
  000d8	e1a0e00f	 mov         lr, pc
  000dc	e12fff13	 bx          r3

; 612  :                     
; 613  :                     //  Set the output rotation angle for the pipeline
; 614  :                     m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_180 );

  000e0	e3a020b4	 mov         r2, #0xB4

; 615  :                     break;

  000e4	ea00000e	 b           |$LN40@SetMode|
  000e8		 |$LN9@SetMode|

; 599  :                     break;
; 600  : 
; 601  :                 case DMDO_90:
; 602  :                     //  Set the rotation and orientation of the primary surface
; 603  :                     m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_ROTATED );

  000e8	e59600bc	 ldr         r0, [r6, #0xBC]
  000ec	e3a01001	 mov         r1, #1
  000f0	e5903000	 ldr         r3, [r0]
  000f4	e5933048	 ldr         r3, [r3, #0x48]
  000f8	e1a0e00f	 mov         lr, pc
  000fc	e12fff13	 bx          r3

; 604  :                     
; 605  :                     //  Set the output rotation angle for the pipeline
; 606  :                     m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_90 );

  00100	e3a0205a	 mov         r2, #0x5A

; 607  :                     break;

  00104	ea000006	 b           |$LN40@SetMode|
  00108		 |$LN10@SetMode|

; 592  :             {
; 593  :                 case DMDO_0:
; 594  :                     //  Set the rotation and orientation of the primary surface
; 595  :                     m_pPrimarySurf->SetOrientation( OMAP_SURF_ORIENTATION_STANDARD );

  00108	e59600bc	 ldr         r0, [r6, #0xBC]
  0010c	e3a01000	 mov         r1, #0
  00110	e5903000	 ldr         r3, [r0]
  00114	e5933048	 ldr         r3, [r3, #0x48]
  00118	e1a0e00f	 mov         lr, pc
  0011c	e12fff13	 bx          r3

; 596  :                     
; 597  :                     //  Set the output rotation angle for the pipeline
; 598  :                     m_pDisplayContr->RotatePipeline( OMAP_DSS_PIPELINE_GFX, OMAP_DSS_ROTATION_0 );

  00120	e3a02000	 mov         r2, #0
  00124		 |$LN40@SetMode|
  00124	e59600b0	 ldr         r0, [r6, #0xB0]
  00128	e3a01000	 mov         r1, #0
  0012c	eb000000	 bl          |?RotatePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_ROTATION@@@Z|
  00130		 |$LN11@SetMode|

; 624  :             }
; 625  :         }
; 626  :         
; 627  : 
; 628  :         //  Setup the attributes of the primary surface pipeline to match LCD attributes
; 629  :         bResult = m_pDisplayContr->SetPipelineAttribs(
; 630  :                                     OMAP_DSS_PIPELINE_GFX,
; 631  :                                     OMAP_DSS_DESTINATION_LCD,
; 632  :                                     m_pPrimarySurf->OmapSurface() );

  00130	e59630bc	 ldr         r3, [r6, #0xBC]
  00134	e59600b0	 ldr         r0, [r6, #0xB0]
  00138	e3a08000	 mov         r8, #0
  0013c	e593307c	 ldr         r3, [r3, #0x7C]
  00140	e3a02000	 mov         r2, #0
  00144	e3a01000	 mov         r1, #0
  00148	e58d8004	 str         r8, [sp, #4]
  0014c	e58d8000	 str         r8, [sp]
  00150	eb000000	 bl          |?SetPipelineAttribs@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@W4OMAP_DSS_DESTINATION@@PAVOMAPSurface@@KK@Z|
  00154	e3500000	 cmp         r0, #0

; 633  :         if( bResult == FALSE )

  00158	0a00004b	 beq         |$cleanUp$42254|

; 634  :         {
; 635  :             DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to set graphics pipeline attributes\r\n"));
; 636  :             goto cleanUp;
; 637  :         }
; 638  : 
; 639  :         //  Enable the pipeline
; 640  :         bResult = m_pDisplayContr->EnablePipeline(
; 641  :                                     OMAP_DSS_PIPELINE_GFX );

  0015c	e59600b0	 ldr         r0, [r6, #0xB0]
  00160	e3a01000	 mov         r1, #0
  00164	eb000000	 bl          |?EnablePipeline@OMAPDisplayController@@QAAHW4OMAP_DSS_PIPELINE@@@Z|
  00168	e3500000	 cmp         r0, #0

; 642  :         if( bResult == FALSE )

  0016c	0a000046	 beq         |$cleanUp$42254|

; 643  :         {
; 644  :             DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Unable to enable graphics pipeline\r\n"));
; 645  :             goto cleanUp;
; 646  :         }
; 647  : 
; 648  : 
; 649  :         //  Enable/disable TV out accordingly
; 650  :         m_pDisplayContr->EnableTvOut( m_bTVOutEnable );

  00170	e5961110	 ldr         r1, [r6, #0x110]
  00174	e59600b0	 ldr         r0, [r6, #0xB0]
  00178	eb000000	 bl          |?EnableTvOut@OMAPDisplayController@@QAAHH@Z|

; 651  : 
; 652  :         //  Get the best surface to display on the TV
; 653  :         DetermineTvOutSurface();

  0017c	e3a01000	 mov         r1, #0
  00180	e1a00006	 mov         r0, r6
  00184	eb000000	 bl          |?DetermineTvOutSurface@OMAPDDGPE@@QAAXH@Z|

; 654  : 
; 655  : 
; 656  :         //  Update extended mode information
; 657  :         m_pMode->width = m_pPrimarySurf->OmapSurface()->Width();

  00188	e59630bc	 ldr         r3, [r6, #0xBC]
  0018c	e3a01000	 mov         r1, #0
  00190	e593007c	 ldr         r0, [r3, #0x7C]
  00194	e5903000	 ldr         r3, [r0]
  00198	e5933008	 ldr         r3, [r3, #8]
  0019c	e1a0e00f	 mov         lr, pc
  001a0	e12fff13	 bx          r3
  001a4	e5963010	 ldr         r3, [r6, #0x10]

; 658  :         m_pMode->height = m_pPrimarySurf->OmapSurface()->Height();

  001a8	e3a01000	 mov         r1, #0
  001ac	e5830004	 str         r0, [r3, #4]
  001b0	e59630bc	 ldr         r3, [r6, #0xBC]
  001b4	e593007c	 ldr         r0, [r3, #0x7C]
  001b8	e5903000	 ldr         r3, [r0]
  001bc	e593300c	 ldr         r3, [r3, #0xC]
  001c0	e1a0e00f	 mov         lr, pc
  001c4	e12fff13	 bx          r3
  001c8	e5963010	 ldr         r3, [r6, #0x10]

; 659  :         m_pModeEx->lPitch = m_pPrimarySurf->OmapSurface()->Stride();

  001cc	e3a01000	 mov         r1, #0
  001d0	e5830008	 str         r0, [r3, #8]
  001d4	e59630bc	 ldr         r3, [r6, #0xBC]
  001d8	e593007c	 ldr         r0, [r3, #0x7C]
  001dc	e5903000	 ldr         r3, [r0]
  001e0	e5933010	 ldr         r3, [r3, #0x10]
  001e4	e1a0e00f	 mov         lr, pc
  001e8	e12fff13	 bx          r3
  001ec	e5963024	 ldr         r3, [r6, #0x24]
  001f0	e5830040	 str         r0, [r3, #0x40]

; 660  :                 
; 661  :         OMAPDDGPE::PixelFormatToBitMask(m_pPrimarySurf->OmapSurface()->PixelFormat(), 
; 662  :                                         &m_pModeEx->dwAlphaBitMask,
; 663  :                                         &m_pModeEx->dwRBitMask,
; 664  :                                         &m_pModeEx->dwGBitMask,
; 665  :                                         &m_pModeEx->dwBBitMask);

  001f4	e59630bc	 ldr         r3, [r6, #0xBC]
  001f8	e5961024	 ldr         r1, [r6, #0x24]
  001fc	e593207c	 ldr         r2, [r3, #0x7C]
  00200	e281e050	 add         lr, r1, #0x50
  00204	e281304c	 add         r3, r1, #0x4C
  00208	e5920004	 ldr         r0, [r2, #4]
  0020c	e2812048	 add         r2, r1, #0x48
  00210	e2811054	 add         r1, r1, #0x54
  00214	e58de000	 str         lr, [sp]
  00218	eb000000	 bl          |?PixelFormatToBitMask@OMAPDDGPE@@SAHW4OMAP_DSS_PIXELFORMAT@@PAK111@Z|

; 666  : 
; 667  : 
; 668  :         //  Allocate palette for selected mode
; 669  :         if (palette)

  0021c	e3570000	 cmp         r7, #0
  00220	0a000016	 beq         |$LN2@SetMode|

; 670  :         {
; 671  :             ULONG   uNumColors = (m_pModeEx->dwAlphaBitMask == 0) ? 3 : 4;

  00224	e5964024	 ldr         r4, [r6, #0x24]

; 672  :             ULONG   uColors[4];
; 673  : 
; 674  :             //  Colors are always in RGBA order
; 675  :             uColors[0] = m_pModeEx->dwRBitMask;
; 676  :             uColors[1] = m_pModeEx->dwGBitMask;
; 677  :             uColors[2] = m_pModeEx->dwBBitMask;
; 678  :             uColors[3] = m_pModeEx->dwAlphaBitMask;
; 679  : 
; 680  :             //  Create palette info for selected mode
; 681  :             *palette = EngCreatePalette (
; 682  :                             PAL_BITFIELDS,
; 683  :                             uNumColors,
; 684  :                             uColors,
; 685  :                             0,
; 686  :                             0,
; 687  :                             0);

  00228	e59fe070	 ldr         lr, [pc, #0x70]
  0022c	e58d8004	 str         r8, [sp, #4]
  00230	e5942048	 ldr         r2, [r4, #0x48]
  00234	e5943054	 ldr         r3, [r4, #0x54]
  00238	e59e5000	 ldr         r5, [lr]
  0023c	e58d2008	 str         r2, [sp, #8]
  00240	e594004c	 ldr         r0, [r4, #0x4C]
  00244	e3530000	 cmp         r3, #0
  00248	03a01003	 moveq       r1, #3
  0024c	e58d000c	 str         r0, [sp, #0xC]
  00250	e594e050	 ldr         lr, [r4, #0x50]
  00254	13a01004	 movne       r1, #4
  00258	e3a03000	 mov         r3, #0
  0025c	e58de010	 str         lr, [sp, #0x10]
  00260	e5944054	 ldr         r4, [r4, #0x54]
  00264	e28d2008	 add         r2, sp, #8
  00268	e3a00002	 mov         r0, #2
  0026c	e58d4014	 str         r4, [sp, #0x14]
  00270	e58d8000	 str         r8, [sp]
  00274	e1a0e00f	 mov         lr, pc
  00278	e12fff15	 bx          r5
  0027c	e5870000	 str         r0, [r7]
  00280		 |$LN2@SetMode|

; 688  :         }
; 689  : 
; 690  :         //  Success
; 691  :         scResult = S_OK;

  00280	e3a04000	 mov         r4, #0

; 692  :     }
; 693  :     else

  00284	ea000000	 b           |$cleanUp$42254|
  00288		 |$LN16@SetMode|

; 694  :     {
; 695  :         DEBUGMSG (GPE_ZONE_ERROR, (L"ERROR: Invalid modeId value %d\r\n", modeId));
; 696  :         scResult = E_INVALIDARG;

  00288	e59f400c	 ldr         r4, [pc, #0xC]
  0028c		 |$cleanUp$42254|

; 697  :     }
; 698  : 
; 699  : cleanUp:
; 700  :     //  Retrun result
; 701  :     return scResult;
; 702  : }

  0028c	e1a00004	 mov         r0, r4
  00290	e28dd018	 add         sp, sp, #0x18
  00294	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00298	e12fff1e	 bx          lr
  0029c		 |$LN44@SetMode|
  0029c		 |$LN45@SetMode|
  0029c	80070057	 DCD         0x80070057
  002a0		 |$LN46@SetMode|
  002a0	00000000	 DCD         |EngCreatePalette|
  002a4		 |$M43984|

			 ENDP  ; |?SetMode@OMAPDDGPE@@UAAJHPAPAUHPALETTE__@@@Z|, OMAPDDGPE::SetMode

; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T44051| DCD	|$LN43@SetPointer|
	DCD	0x40009f02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetPointerShape@OMAPDDGPE@@UAAJPAVGPESurf@@0HHHH@Z| PROC ; OMAPDDGPE::SetPointerShape

; 800  : {

  00000		 |$LN43@SetPointer|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd020	 sub         sp, sp, #0x20
  00008		 |$M44048|
  00008	e1a04000	 mov         r4, r0
  0000c	e58d4018	 str         r4, [sp, #0x18]
  00010	e1a08003	 mov         r8, r3
  00014	e1a0a001	 mov         r10, r1

; 801  :     SCODE sc = S_OK;
; 802  :     UCHAR *pAndPtr, *pXorPtr, *pAndLine, *pXorLine;
; 803  :     UCHAR andPtr, xorPtr, mask;
; 804  :     ULONG size;
; 805  :     int bytesPerPixel;
; 806  :     int row, col, i;
; 807  : 
; 808  :     UNREFERENCED_PARAMETER(pColorSurf);
; 809  : 
; 810  :     if (!g_Globals.m_dwCursorEnable)

  00018	e59f2258	 ldr         r2, [pc, #0x258]
  0001c	e3a05000	 mov         r5, #0
  00020	e5922234	 ldr         r2, [r2, #0x234]
  00024	e3520000	 cmp         r2, #0

; 811  :         return S_OK;

  00028	03a05000	 moveq       r5, #0
  0002c	0a00008d	 beq         |$LN19@SetPointer|

; 812  : 
; 813  :     DEBUGMSG(GPE_ZONE_CURSOR, (
; 814  :         L"+OMAPDDGPE::SetPointerShape(0x%08x, 0x%08x, %d, %d, %d, %d)\r\n",
; 815  :         pMask, pColorSurf, xHotspot, yHotspot, xSize, ySize
; 816  :     ));
; 817  : 
; 818  :     Lock();

  00030	e5943000	 ldr         r3, [r4]
  00034	e1a00004	 mov         r0, r4
  00038	e59330ec	 ldr         r3, [r3, #0xEC]
  0003c	e1a0e00f	 mov         lr, pc
  00040	e12fff13	 bx          r3

; 819  : 
; 820  :     // Turn current cursor off
; 821  :     CursorOff();

  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          |?CursorOff@OMAPDDGPE@@QAAXXZ|

; 822  : 
; 823  :     // Release memory associated with old cursor
; 824  :     delete [] m_cursorStore; 

  0004c	e5940178	 ldr         r0, [r4, #0x178]
  00050	eb000000	 bl          |??3@YAXPAX@Z|

; 825  :     m_cursorStore = NULL;
; 826  :     delete [] m_cursorXor; 

  00054	e594017c	 ldr         r0, [r4, #0x17C]
  00058	e3a06000	 mov         r6, #0
  0005c	e5846178	 str         r6, [r4, #0x178]
  00060	eb000000	 bl          |??3@YAXPAX@Z|

; 827  :     m_cursorXor = NULL;
; 828  :     delete [] m_cursorAnd; 

  00064	e5940180	 ldr         r0, [r4, #0x180]
  00068	e584617c	 str         r6, [r4, #0x17C]
  0006c	eb000000	 bl          |??3@YAXPAX@Z|

; 829  :     m_cursorAnd = NULL;
; 830  : 
; 831  :     // Is there a new mask?
; 832  :     if (pMask == NULL) 

  00070	e35a0000	 cmp         r10, #0

; 833  :     {
; 834  :         // No, so tag as disabled
; 835  :         m_cursorDisabled = TRUE;

  00074	03a03001	 moveq       r3, #1
  00078	0584314c	 streq       r3, [r4, #0x14C]
  0007c	e5846180	 str         r6, [r4, #0x180]
  00080	0a000073	 beq         |$cleanUp$42341|

; 836  :     } 
; 837  :     else 
; 838  :     {
; 839  :         // Yes, so tag as not disabled
; 840  :         m_cursorDisabled = FALSE;
; 841  : 
; 842  :         // Check if cursor size is correct
; 843  :         if (xSize > m_nScreenWidth || ySize > m_nScreenHeight) 

  00084	e5943008	 ldr         r3, [r4, #8]
  00088	e59d7048	 ldr         r7, [sp, #0x48]
  0008c	e584614c	 str         r6, [r4, #0x14C]
  00090	e1570003	 cmp         r7, r3
  00094	ca00006c	 bgt         |$LN14@SetPointer|
  00098	e594300c	 ldr         r3, [r4, #0xC]
  0009c	e59d604c	 ldr         r6, [sp, #0x4C]
  000a0	e1560003	 cmp         r6, r3
  000a4	ca000068	 bgt         |$LN14@SetPointer|

; 844  :         {
; 845  :             DEBUGMSG(GPE_ZONE_ERROR, (L"OMAPDDGPE::SetPointerShape: "
; 846  :                 L"Invalid cursor size %d, %d\r\n", xSize, ySize
; 847  :             ));
; 848  :             sc = E_FAIL;
; 849  :             goto cleanUp;
; 850  :         }
; 851  :         
; 852  :         // How many bytes we need per pixel on screen
; 853  :         bytesPerPixel = (m_pMode->Bpp + 7) >> 3;

  000a8	e5943010	 ldr         r3, [r4, #0x10]
  000ac	e593300c	 ldr         r3, [r3, #0xC]
  000b0	e2833007	 add         r3, r3, #7
  000b4	e1a031c3	 mov         r3, r3, asr #3

; 854  : 
; 855  :         // Cursor mask & store size
; 856  :         size = xSize * ySize * bytesPerPixel;

  000b8	e0090793	 mul         r9, r3, r7
  000bc	e58d3004	 str         r3, [sp, #4]

; 857  :         
; 858  :         // Allocate memory based on new cursor size
; 859  :         m_cursorStore = new UCHAR[size];

  000c0	e0000699	 mul         r0, r9, r6
  000c4	e58d901c	 str         r9, [sp, #0x1C]
  000c8	eb000000	 bl          |??2@YAPAXI@Z|
  000cc	e1a03000	 mov         r3, r0

; 860  :         m_cursorXor   = new UCHAR[size];

  000d0	e0000699	 mul         r0, r9, r6
  000d4	e5843178	 str         r3, [r4, #0x178]
  000d8	eb000000	 bl          |??2@YAPAXI@Z|
  000dc	e1a03000	 mov         r3, r0

; 861  :         m_cursorAnd   = new UCHAR[size];

  000e0	e0000699	 mul         r0, r9, r6
  000e4	e584317c	 str         r3, [r4, #0x17C]
  000e8	eb000000	 bl          |??2@YAPAXI@Z|

; 862  : 
; 863  :         if (m_cursorStore == NULL || m_cursorXor == NULL || m_cursorAnd == NULL) 

  000ec	e5943178	 ldr         r3, [r4, #0x178]
  000f0	e5840180	 str         r0, [r4, #0x180]
  000f4	e3530000	 cmp         r3, #0
  000f8	0a000050	 beq         |$LN11@SetPointer|
  000fc	e594317c	 ldr         r3, [r4, #0x17C]
  00100	e3530000	 cmp         r3, #0
  00104	0a00004d	 beq         |$LN11@SetPointer|
  00108	e3500000	 cmp         r0, #0
  0010c	0a00004b	 beq         |$LN11@SetPointer|

; 864  :         {
; 865  :             DEBUGMSG(GPE_ZONE_ERROR, (L"OMAPDDGPE::SetPointerShape: "
; 866  :                 L"Memory allocation for cursor buffers failed\r\n"
; 867  :             ));
; 868  :             sc = E_OUTOFMEMORY;
; 869  :             goto cleanUp;
; 870  :         }
; 871  : 
; 872  :         // Store size and hotspot for new cursor
; 873  :         m_cursorSize.x = xSize;
; 874  :         m_cursorSize.y = ySize;
; 875  :         m_cursorHotspot.x = xHotspot;
; 876  :         m_cursorHotspot.y = yHotspot;

  00110	e59d3044	 ldr         r3, [sp, #0x44]
  00114	e5847168	 str         r7, [r4, #0x168]
  00118	e584616c	 str         r6, [r4, #0x16C]
  0011c	e5843174	 str         r3, [r4, #0x174]
  00120	e5848170	 str         r8, [r4, #0x170]

; 877  : 
; 878  :         // Pointers to AND and XOR masks
; 879  :         pAndPtr = (UCHAR*)pMask->Buffer();

  00124	e59ab004	 ldr         r11, [r10, #4]

; 880  :         pXorPtr = (UCHAR*)pMask->Buffer() + (ySize * pMask->Stride());

  00128	e59a3008	 ldr         r3, [r10, #8]

; 881  : 
; 882  :         // store OR and AND mask for new cursor
; 883  :         for (row = 0; row < ySize; row++) 

  0012c	e3a00000	 mov         r0, #0
  00130	e58db014	 str         r11, [sp, #0x14]
  00134	e022b693	 mla         r2, r3, r6, r11
  00138	e3560000	 cmp         r6, #0
  0013c	e58d2010	 str         r2, [sp, #0x10]
  00140	da000043	 ble         |$cleanUp$42341|
  00144	e3a01000	 mov         r1, #0
  00148	e58d1008	 str         r1, [sp, #8]
  0014c		 |$LL9@SetPointer|

; 884  :         {
; 885  :             pAndLine = &m_cursorAnd[row * xSize * bytesPerPixel];

  0014c	e5943180	 ldr         r3, [r4, #0x180]

; 886  :             pXorLine = &m_cursorXor[row * xSize * bytesPerPixel];

  00150	e594217c	 ldr         r2, [r4, #0x17C]

; 887  :             for (col = 0; col < xSize; col++) 

  00154	e3a0e000	 mov         lr, #0
  00158	e0813003	 add         r3, r1, r3
  0015c	e0818002	 add         r8, r1, r2
  00160	e3570000	 cmp         r7, #0
  00164	da00002e	 ble         |$LN8@SetPointer|
  00168	e0433008	 sub         r3, r3, r8
  0016c	e59d5004	 ldr         r5, [sp, #4]
  00170	e59d1010	 ldr         r1, [sp, #0x10]
  00174	e58d300c	 str         r3, [sp, #0xC]
  00178	e1a04003	 mov         r4, r3
  0017c	e3a06080	 mov         r6, #0x80
  00180		 |$LL6@SetPointer|

; 888  :             {
; 889  :                 andPtr = pAndPtr[row * pMask->Stride() + (col >> 3)];

  00180	e59a2008	 ldr         r2, [r10, #8]

; 890  :                 xorPtr = pXorPtr[row * pMask->Stride() + (col >> 3)];
; 891  :                 mask = (UCHAR) (0x80 >> (col & 0x7));

  00184	e20e3007	 and         r3, lr, #7
  00188	e1a09336	 mov         r9, r6, lsr r3
  0018c	e0030092	 mul         r3, r2, r0

; 892  :                 for (i = 0; i < bytesPerPixel; i++) 

  00190	e3550000	 cmp         r5, #0
  00194	e08331ce	 add         r3, r3, lr, asr #3
  00198	e7d3200b	 ldrb        r2, [r3, +r11]
  0019c	e7d33001	 ldrb        r3, [r3, +r1]
  001a0	e5cd2000	 strb        r2, [sp]
  001a4	e5cd3001	 strb        r3, [sp, #1]
  001a8	da000015	 ble         |$LN5@SetPointer|
  001ac	e209b0ff	 and         r11, r9, #0xFF
  001b0	e20930ff	 and         r3, r9, #0xFF
  001b4	e5dd7000	 ldrb        r7, [sp]
  001b8	e1a09005	 mov         r9, r5
  001bc	e5dd5001	 ldrb        r5, [sp, #1]
  001c0	e58d300c	 str         r3, [sp, #0xC]
  001c4	e1a06003	 mov         r6, r3
  001c8	e1a02008	 mov         r2, r8
  001cc		 |$LL3@SetPointer|

; 893  :                 {
; 894  :                     pAndLine[col * bytesPerPixel + i] = andPtr&mask ? 0xFF : 0x00;

  001cc	e11b0007	 tst         r11, r7
  001d0	13a030ff	 movne       r3, #0xFF
  001d4	03a03000	 moveq       r3, #0

; 895  :                     pXorLine[col * bytesPerPixel + i] = xorPtr&mask ? 0xFF : 0x00;

  001d8	e1160005	 tst         r6, r5
  001dc	e7c43002	 strb        r3, [r4, +r2]
  001e0	13a030ff	 movne       r3, #0xFF
  001e4	03a03000	 moveq       r3, #0
  001e8	e4c23001	 strb        r3, [r2], #1
  001ec	e2599001	 subs        r9, r9, #1
  001f0	1afffff5	 bne         |$LL3@SetPointer|
  001f4	e59d7048	 ldr         r7, [sp, #0x48]
  001f8	e59db014	 ldr         r11, [sp, #0x14]
  001fc	e59d5004	 ldr         r5, [sp, #4]
  00200	e3a06080	 mov         r6, #0x80
  00204		 |$LN5@SetPointer|
  00204	e28ee001	 add         lr, lr, #1
  00208	e15e0007	 cmp         lr, r7
  0020c	e0888005	 add         r8, r8, r5
  00210	baffffda	 blt         |$LL6@SetPointer|
  00214	e59d4018	 ldr         r4, [sp, #0x18]
  00218	e59d604c	 ldr         r6, [sp, #0x4C]
  0021c	e59d1008	 ldr         r1, [sp, #8]
  00220	e59d901c	 ldr         r9, [sp, #0x1C]
  00224		 |$LN8@SetPointer|
  00224	e2800001	 add         r0, r0, #1
  00228	e0811009	 add         r1, r1, r9
  0022c	e1500006	 cmp         r0, r6
  00230	e58d1008	 str         r1, [sp, #8]
  00234	baffffc4	 blt         |$LL9@SetPointer|

; 896  :                 }                    
; 897  :             }
; 898  :         }

  00238	e3a05000	 mov         r5, #0
  0023c	ea000004	 b           |$cleanUp$42341|
  00240		 |$LN11@SetPointer|
  00240	e3a0313a	 mov         r3, #0x3A, 2
  00244	e3835807	 orr         r5, r3, #7, 16

; 899  :     }
; 900  : 
; 901  : cleanUp:

  00248	ea000001	 b           |$cleanUp$42341|
  0024c		 |$LN14@SetPointer|
  0024c	e3a03116	 mov         r3, #0x16, 2
  00250	e3835901	 orr         r5, r3, #1, 18
  00254		 |$cleanUp$42341|

; 902  :     Unlock();

  00254	e5943000	 ldr         r3, [r4]
  00258	e1a00004	 mov         r0, r4
  0025c	e59330f0	 ldr         r3, [r3, #0xF0]
  00260	e1a0e00f	 mov         lr, pc
  00264	e12fff13	 bx          r3

; 903  :     DEBUGMSG(GPE_ZONE_CURSOR, (L"-OMAPDDGPE::SetPointerShape(sc = 0x%08x)\r\n", sc));
; 904  :     return sc;

  00268		 |$LN19@SetPointer|

; 905  : }

  00268	e1a00005	 mov         r0, r5
  0026c	e28dd020	 add         sp, sp, #0x20
  00270	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00274	e12fff1e	 bx          lr
  00278		 |$LN44@SetPointer|
  00278		 |$LN45@SetPointer|
  00278	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  0027c		 |$M44049|

			 ENDP  ; |?SetPointerShape@OMAPDDGPE@@UAAJPAVGPESurf@@0HHHH@Z|, OMAPDDGPE::SetPointerShape


  00000			 AREA	 |.pdata|, PDATA
|$T44066| DCD	|$LN9@MovePointe|
	DCD	0x40002901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MovePointer@OMAPDDGPE@@UAAJHH@Z| PROC ; OMAPDDGPE::MovePointer

; 913  : {

  00000		 |$LN9@MovePointe|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M44063|
  00004	e1a04002	 mov         r4, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a05000	 mov         r5, r0

; 914  :     if (!g_Globals.m_dwCursorEnable)

  00010	e59f3088	 ldr         r3, [pc, #0x88]
  00014	e5933234	 ldr         r3, [r3, #0x234]
  00018	e3530000	 cmp         r3, #0

; 915  :         return S_OK;

  0001c	0a00001c	 beq         |$LN6@MovePointe|

; 916  : 
; 917  :     DEBUGMSG(GPE_ZONE_CURSOR, (L"+OMAPDDGPE::MovePointer(%d, %d)\r\n", xPosition, yPosition));
; 918  : 
; 919  :     Lock();

  00020	e5953000	 ldr         r3, [r5]
  00024	e59330ec	 ldr         r3, [r3, #0xEC]
  00028	e1a0e00f	 mov         lr, pc
  0002c	e12fff13	 bx          r3

; 920  : 
; 921  :     CursorOff();

  00030	e1a00005	 mov         r0, r5
  00034	eb000000	 bl          |?CursorOff@OMAPDDGPE@@QAAXXZ|

; 922  : 
; 923  :     if (xPosition != -1 || yPosition != -1) 

  00038	e3760001	 cmn         r6, #1
  0003c	1a000001	 bne         |$LN1@MovePointe|
  00040	e3740001	 cmn         r4, #1
  00044	0a00000d	 beq         |$LN2@MovePointe|
  00048		 |$LN1@MovePointe|

; 924  :     {
; 925  :         // Compute new cursor rect
; 926  :         m_cursorRect.left = xPosition - m_cursorHotspot.x;

  00048	e5953170	 ldr         r3, [r5, #0x170]

; 927  :         m_cursorRect.right = m_cursorRect.left + m_cursorSize.x;
; 928  :         m_cursorRect.top = yPosition - m_cursorHotspot.y;

  0004c	e5952174	 ldr         r2, [r5, #0x174]
  00050	e5951168	 ldr         r1, [r5, #0x168]

; 929  :         m_cursorRect.bottom = m_cursorRect.top + m_cursorSize.y;

  00054	e595016c	 ldr         r0, [r5, #0x16C]
  00058	e046e003	 sub         lr, r6, r3
  0005c	e0444002	 sub         r4, r4, r2
  00060	e08e3001	 add         r3, lr, r1
  00064	e0842000	 add         r2, r4, r0

; 930  :         CursorOn();

  00068	e1a00005	 mov         r0, r5
  0006c	e5853160	 str         r3, [r5, #0x160]
  00070	e5852164	 str         r2, [r5, #0x164]
  00074	e585e158	 str         lr, [r5, #0x158]
  00078	e585415c	 str         r4, [r5, #0x15C]
  0007c	eb000000	 bl          |?CursorOn@OMAPDDGPE@@QAAXXZ|
  00080		 |$LN2@MovePointe|

; 931  :     }
; 932  : 
; 933  :     Unlock();

  00080	e5953000	 ldr         r3, [r5]
  00084	e1a00005	 mov         r0, r5
  00088	e59330f0	 ldr         r3, [r3, #0xF0]
  0008c	e1a0e00f	 mov         lr, pc
  00090	e12fff13	 bx          r3
  00094		 |$LN6@MovePointe|

; 934  :     
; 935  :     DEBUGMSG(GPE_ZONE_CURSOR, (L"-OMAPDDGPE::MovePointer(sc = 0x%08x)\r\n", S_OK));
; 936  :     return  S_OK;

  00094	e3a00000	 mov         r0, #0

; 937  : }

  00098	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN10@MovePointe|
  000a0		 |$LN11@MovePointe|
  000a0	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  000a4		 |$M44064|

			 ENDP  ; |?MovePointer@OMAPDDGPE@@UAAJHH@Z|, OMAPDDGPE::MovePointer

	EXPORT	|?WrappedEmulatedLine@OMAPDDGPE@@AAAJPAUGPELineParms@@@Z| ; OMAPDDGPE::WrappedEmulatedLine
	IMPORT	|?EmulatedLine@GPE@@QAAJPAUGPELineParms@@@Z| ; GPE::EmulatedLine
	IMPORT	|?RotateRectl@GPE@@QAAXPAU_RECTL@@@Z|	; GPE::RotateRectl
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T44097| DCD	|$LN33@WrappedEmu|
	DCD	0x40009602
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WrappedEmulatedLine@OMAPDDGPE@@AAAJPAUGPELineParms@@@Z| PROC ; OMAPDDGPE::WrappedEmulatedLine

; 948  : {

  00000		 |$LN33@WrappedEmu|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M44094|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a05000	 mov         r5, r0

; 949  :     SCODE sc;
; 950  :     RECT bounds;
; 951  :     int N_plus_1;
; 952  : 
; 953  :     Lock();

  00010	e5953000	 ldr         r3, [r5]
  00014	e59330ec	 ldr         r3, [r3, #0xEC]
  00018	e1a0e00f	 mov         lr, pc
  0001c	e12fff13	 bx          r3

; 954  :     
; 955  :     // If cursor is on check for line overlap
; 956  :     if (m_cursorVisible && !m_cursorDisabled) 

  00020	e5953150	 ldr         r3, [r5, #0x150]
  00024	e3530000	 cmp         r3, #0
  00028	0a000069	 beq         |$LN2@WrappedEmu|
  0002c	e595314c	 ldr         r3, [r5, #0x14C]
  00030	e3530000	 cmp         r3, #0
  00034	1a000066	 bne         |$LN2@WrappedEmu|

; 957  :     {
; 958  :         // Calculate the bounding-rect to determine overlap with cursor
; 959  :         if (lineParameters->dN) 

  00038	e5943014	 ldr         r3, [r4, #0x14]
  0003c	e1b02003	 movs        r2, r3
  00040	0a000005	 beq         |$LN16@WrappedEmu|

; 960  :         {
; 961  :             // The line has a diagonal component
; 962  :             N_plus_1 = 2 + (
; 963  :                 (lineParameters->cPels * lineParameters->dN)/lineParameters->dM
; 964  :             );

  00044	e594300c	 ldr         r3, [r4, #0xC]
  00048	e5940010	 ldr         r0, [r4, #0x10]
  0004c	e0010392	 mul         r1, r2, r3
  00050	eb000000	 bl          __rt_udiv
  00054	e2800002	 add         r0, r0, #2

; 965  :         } 
; 966  :         else 

  00058	ea000000	 b           |$LN15@WrappedEmu|
  0005c		 |$LN16@WrappedEmu|

; 967  :         {
; 968  :             N_plus_1 = 1;

  0005c	e3a00001	 mov         r0, #1
  00060		 |$LN15@WrappedEmu|

; 969  :         }
; 970  : 
; 971  :         switch (lineParameters->iDir) 

  00060	e594201c	 ldr         r2, [r4, #0x1C]
  00064	e3520007	 cmp         r2, #7
  00068	8a000077	 bhi         |$LN4@WrappedEmu|
  0006c	e28f3004	 add         r3, pc, #4
  00070	e7d33002	 ldrb        r3, [r3, +r2]
  00074	e08ff003	 add         pc, pc, r3
  00078		 |$LN22@WrappedEmu|
  00078		 |$LN21@WrappedEmu|
  00078		 |$LN23@WrappedEmu|
  00078	04ed		 DCB         0x4
  00079		 |$LN24@WrappedEmu|
  00079	1ced		 DCB         0x1c
  0007a		 |$LN25@WrappedEmu|
  0007a	38ed		 DCB         0x38
  0007b		 |$LN26@WrappedEmu|
  0007b	58ed		 DCB         0x58
  0007c		 |$LN27@WrappedEmu|
  0007c	74ed		 DCB         0x74
  0007d		 |$LN28@WrappedEmu|
  0007d	94ed		 DCB         0x94
  0007e		 |$LN29@WrappedEmu|
  0007e	b4ed		 DCB         0xb4
  0007f		 |$LN30@WrappedEmu|
  0007f	d0ed		 DCB         0xd0
  00080		 |$LN12@WrappedEmu|

; 972  :         {
; 973  :             case 0:
; 974  :                 bounds.left = lineParameters->xStart;

  00080	e5946004	 ldr         r6, [r4, #4]

; 975  :                 bounds.top = lineParameters->yStart;
; 976  :                 bounds.right = lineParameters->xStart + lineParameters->cPels + 1;

  00084	e594300c	 ldr         r3, [r4, #0xC]
  00088	e5947008	 ldr         r7, [r4, #8]
  0008c	e0863003	 add         r3, r6, r3

; 977  :                 bounds.bottom = bounds.top + N_plus_1;

  00090	e0879000	 add         r9, r7, r0

; 978  :                 break;

  00094	ea000032	 b           |$LN20@WrappedEmu|
  00098		 |$LN11@WrappedEmu|

; 979  : 
; 980  :             case 1:
; 981  :                 bounds.left = lineParameters->xStart;
; 982  :                 bounds.top = lineParameters->yStart;

  00098	e5947008	 ldr         r7, [r4, #8]

; 983  :                 bounds.bottom = lineParameters->yStart + lineParameters->cPels + 1;

  0009c	e594300c	 ldr         r3, [r4, #0xC]
  000a0	e5946004	 ldr         r6, [r4, #4]
  000a4	e0873003	 add         r3, r7, r3
  000a8	e2839001	 add         r9, r3, #1

; 984  :                 bounds.right = bounds.left + N_plus_1;

  000ac	e0868000	 add         r8, r6, r0

; 985  :                 break;

  000b0	ea00002c	 b           |$LN13@WrappedEmu|
  000b4		 |$LN10@WrappedEmu|

; 986  : 
; 987  :             case 2:
; 988  :                 bounds.right = lineParameters->xStart + 1;

  000b4	e5943004	 ldr         r3, [r4, #4]

; 989  :                 bounds.top = lineParameters->yStart;

  000b8	e5947008	 ldr         r7, [r4, #8]

; 990  :                 bounds.bottom = lineParameters->yStart + lineParameters->cPels + 1;

  000bc	e594200c	 ldr         r2, [r4, #0xC]
  000c0	e2838001	 add         r8, r3, #1

; 991  :                 bounds.left = bounds.right - N_plus_1;

  000c4	e0486000	 sub         r6, r8, r0
  000c8	e0873002	 add         r3, r7, r2
  000cc	e2839001	 add         r9, r3, #1

; 992  :                 break;

  000d0	ea000024	 b           |$LN13@WrappedEmu|
  000d4		 |$LN9@WrappedEmu|

; 993  : 
; 994  :             case 3:
; 995  :                 bounds.right = lineParameters->xStart + 1;

  000d4	e5942004	 ldr         r2, [r4, #4]

; 996  :                 bounds.top = lineParameters->yStart;

  000d8	e5947008	 ldr         r7, [r4, #8]

; 997  :                 bounds.left = lineParameters->xStart - lineParameters->cPels;

  000dc	e594300c	 ldr         r3, [r4, #0xC]
  000e0	e2828001	 add         r8, r2, #1

; 998  :                 bounds.bottom = bounds.top + N_plus_1;

  000e4	e0879000	 add         r9, r7, r0
  000e8	e0426003	 sub         r6, r2, r3

; 999  :                 break;

  000ec	ea00001d	 b           |$LN13@WrappedEmu|
  000f0		 |$LN8@WrappedEmu|

; 1000 : 
; 1001 :             case 4:
; 1002 :                 bounds.right = lineParameters->xStart + 1;
; 1003 :                 bounds.bottom = lineParameters->yStart + 1;

  000f0	e5943008	 ldr         r3, [r4, #8]
  000f4	e5941004	 ldr         r1, [r4, #4]

; 1004 :                 bounds.left = lineParameters->xStart - lineParameters->cPels;

  000f8	e594200c	 ldr         r2, [r4, #0xC]
  000fc	e2839001	 add         r9, r3, #1

; 1005 :                 bounds.top = bounds.bottom - N_plus_1;

  00100	e0497000	 sub         r7, r9, r0
  00104	e2818001	 add         r8, r1, #1
  00108	e0416002	 sub         r6, r1, r2

; 1006 :                 break;

  0010c	ea000015	 b           |$LN13@WrappedEmu|
  00110		 |$LN7@WrappedEmu|

; 1007 : 
; 1008 :             case 5:
; 1009 :                 bounds.right = lineParameters->xStart + 1;

  00110	e5943004	 ldr         r3, [r4, #4]

; 1010 :                 bounds.bottom = lineParameters->yStart + 1;

  00114	e5941008	 ldr         r1, [r4, #8]

; 1011 :                 bounds.top = lineParameters->yStart - lineParameters->cPels;

  00118	e594200c	 ldr         r2, [r4, #0xC]
  0011c	e2838001	 add         r8, r3, #1

; 1012 :                 bounds.left = bounds.right - N_plus_1;

  00120	e0486000	 sub         r6, r8, r0
  00124	e2819001	 add         r9, r1, #1
  00128	e0417002	 sub         r7, r1, r2

; 1013 :                 break;

  0012c	ea00000d	 b           |$LN13@WrappedEmu|
  00130		 |$LN6@WrappedEmu|

; 1014 : 
; 1015 :             case 6:
; 1016 :                 bounds.left = lineParameters->xStart;

  00130	e5946004	 ldr         r6, [r4, #4]

; 1017 :                 bounds.bottom = lineParameters->yStart + 1;

  00134	e5942008	 ldr         r2, [r4, #8]

; 1018 :                 bounds.top = lineParameters->yStart - lineParameters->cPels;

  00138	e594300c	 ldr         r3, [r4, #0xC]

; 1019 :                 bounds.right = bounds.left + N_plus_1;

  0013c	e0868000	 add         r8, r6, r0
  00140	e2829001	 add         r9, r2, #1
  00144	e0427003	 sub         r7, r2, r3

; 1020 :                 break;

  00148	ea000006	 b           |$LN13@WrappedEmu|
  0014c		 |$LN5@WrappedEmu|

; 1021 : 
; 1022 :             case 7:
; 1023 :                 bounds.left = lineParameters->xStart;
; 1024 :                 bounds.bottom = lineParameters->yStart + 1;

  0014c	e5943008	 ldr         r3, [r4, #8]
  00150	e5946004	 ldr         r6, [r4, #4]

; 1025 :                 bounds.right = lineParameters->xStart + lineParameters->cPels + 1;

  00154	e594200c	 ldr         r2, [r4, #0xC]
  00158	e2839001	 add         r9, r3, #1

; 1026 :                 bounds.top = bounds.bottom - N_plus_1;

  0015c	e0497000	 sub         r7, r9, r0
  00160	e0863002	 add         r3, r6, r2
  00164		 |$LN20@WrappedEmu|

; 1025 :                 bounds.right = lineParameters->xStart + lineParameters->cPels + 1;

  00164	e2838001	 add         r8, r3, #1

; 1026 :                 bounds.top = bounds.bottom - N_plus_1;

  00168		 |$LN13@WrappedEmu|

; 1034 :                 goto cleanUp;
; 1035 :         }
; 1036 : 
; 1037 :         // If line overlap cursor, turn if off
; 1038 :         RECTL cursorRect = m_cursorRect;

  00168	e5951160	 ldr         r1, [r5, #0x160]
  0016c	e5950164	 ldr         r0, [r5, #0x164]
  00170	e5953158	 ldr         r3, [r5, #0x158]
  00174	e595215c	 ldr         r2, [r5, #0x15C]
  00178	e58d1008	 str         r1, [sp, #8]
  0017c	e58d000c	 str         r0, [sp, #0xC]

; 1039 :         RotateRectl(&cursorRect);

  00180	e28d1000	 add         r1, sp, #0
  00184	e1a00005	 mov         r0, r5
  00188	e58d3000	 str         r3, [sp]
  0018c	e58d2004	 str         r2, [sp, #4]
  00190	eb000000	 bl          |?RotateRectl@GPE@@QAAXPAU_RECTL@@@Z|

; 1040 : 
; 1041 :         if (cursorRect.top < bounds.bottom && 
; 1042 :             cursorRect.bottom > bounds.top &&
; 1043 :             cursorRect.left < bounds.right && 
; 1044 :             cursorRect.right > bounds.left
; 1045 :         ) 

  00194	e59d3004	 ldr         r3, [sp, #4]
  00198	e1530009	 cmp         r3, r9
  0019c	aa00000c	 bge         |$LN2@WrappedEmu|
  001a0	e59d300c	 ldr         r3, [sp, #0xC]
  001a4	e1530007	 cmp         r3, r7
  001a8	da000009	 ble         |$LN2@WrappedEmu|
  001ac	e59d3000	 ldr         r3, [sp]
  001b0	e1530008	 cmp         r3, r8
  001b4	aa000006	 bge         |$LN2@WrappedEmu|
  001b8	e59d3008	 ldr         r3, [sp, #8]
  001bc	e1530006	 cmp         r3, r6
  001c0	da000003	 ble         |$LN2@WrappedEmu|

; 1046 :         { 
; 1047 :             CursorOff();

  001c4	e1a00005	 mov         r0, r5
  001c8	eb000000	 bl          |?CursorOff@OMAPDDGPE@@QAAXXZ|

; 1048 :             m_cursorForcedOff = TRUE;

  001cc	e3a03001	 mov         r3, #1
  001d0	e5853154	 str         r3, [r5, #0x154]
  001d4		 |$LN2@WrappedEmu|

; 1049 :         }            
; 1050 :     }
; 1051 : 
; 1052 :     Unlock();

  001d4	e5953000	 ldr         r3, [r5]
  001d8	e1a00005	 mov         r0, r5
  001dc	e59330f0	 ldr         r3, [r3, #0xF0]
  001e0	e1a0e00f	 mov         lr, pc
  001e4	e12fff13	 bx          r3

; 1053 :     
; 1054 :     // Do emulated line
; 1055 :     sc = EmulatedLine(lineParameters);

  001e8	e1a01004	 mov         r1, r4
  001ec	e1a00005	 mov         r0, r5
  001f0	eb000000	 bl          |?EmulatedLine@GPE@@QAAJPAUGPELineParms@@@Z|

; 1056 : 
; 1057 :     // If cursor was forced off turn it back on
; 1058 :     if (m_cursorForcedOff) 

  001f4	e5953154	 ldr         r3, [r5, #0x154]
  001f8	e1a04000	 mov         r4, r0
  001fc	e3530000	 cmp         r3, #0
  00200	0a00000d	 beq         |$cleanUp$42407|

; 1059 :     {
; 1060 :         m_cursorForcedOff = FALSE;
; 1061 :         Lock();

  00204	e5953000	 ldr         r3, [r5]
  00208	e3a02000	 mov         r2, #0
  0020c	e1a00005	 mov         r0, r5
  00210	e59330ec	 ldr         r3, [r3, #0xEC]
  00214	e5852154	 str         r2, [r5, #0x154]
  00218	e1a0e00f	 mov         lr, pc
  0021c	e12fff13	 bx          r3

; 1062 :         CursorOn();

  00220	e1a00005	 mov         r0, r5
  00224	eb000000	 bl          |?CursorOn@OMAPDDGPE@@QAAXXZ|

; 1063 :         Unlock();

  00228	e5953000	 ldr         r3, [r5]
  0022c	e1a00005	 mov         r0, r5
  00230	e59330f0	 ldr         r3, [r3, #0xF0]
  00234	e1a0e00f	 mov         lr, pc
  00238	e12fff13	 bx          r3
  0023c		 |$cleanUp$42407|

; 1064 :     }
; 1065 : 
; 1066 : cleanUp:
; 1067 :     return sc;
; 1068 : }

  0023c	e1a00004	 mov         r0, r4
  00240	e28dd010	 add         sp, sp, #0x10
  00244	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00248	e12fff1e	 bx          lr
  0024c		 |$LN4@WrappedEmu|

; 1027 :                 break;
; 1028 : 
; 1029 :             default:
; 1030 :                 DEBUGMSG(GPE_ZONE_ERROR,(L"OMAPDDGPE::WrappedEmulatedLine: "
; 1031 :                     L"Invalid direction: %d\r\n", lineParameters->iDir
; 1032 :                 ));
; 1033 :                 sc = E_INVALIDARG;

  0024c	e59f4000	 ldr         r4, [pc]
  00250	eafffff9	 b           |$cleanUp$42407|
  00254		 |$LN34@WrappedEmu|
  00254		 |$LN35@WrappedEmu|
  00254	80070057	 DCD         0x80070057
  00258		 |$M44095|

			 ENDP  ; |?WrappedEmulatedLine@OMAPDDGPE@@AAAJPAUGPELineParms@@@Z|, OMAPDDGPE::WrappedEmulatedLine


  00000			 AREA	 |.pdata|, PDATA
|$T44112| DCD	|$LN12@Line|
	DCD	0x40000e00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Line@OMAPDDGPE@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z| PROC ; OMAPDDGPE::Line

; 1077 : {

  00000		 |$LN12@Line|
  00000		 |$M44109|
  00000	e3520000	 cmp         r2, #0

; 1078 :     DEBUGMSG (GPE_ZONE_LINE, (TEXT("OMAPDDGPE::Line\r\n")));
; 1079 : 
; 1080 :     if (phase == gpeSingle || phase == gpePrepare)

  00004	0a000001	 beq         |$LN5@Line|
  00008	e3520001	 cmp         r2, #1

; 1091 :         }
; 1092 :     }
; 1093 :     else if (phase == gpeComplete)

  0000c	1a000005	 bne         |$LN3@Line|
  00010		 |$LN5@Line|

; 1081 :     {
; 1082 :         DispPerfStart (ROP_LINE);
; 1083 : 
; 1084 :         if (lineParameters->pDst != m_pPrimarySurface)

  00010	e5912028	 ldr         r2, [r1, #0x28]
  00014	e5903004	 ldr         r3, [r0, #4]
  00018	e1520003	 cmp         r2, r3

; 1085 :         {
; 1086 :             lineParameters->pLine = &GPE::EmulatedLine;

  0001c	159f3010	 ldrne       r3, [pc, #0x10]

; 1087 :         }
; 1088 :         else
; 1089 :         {
; 1090 :             lineParameters->pLine = (SCODE (GPE::*)(struct GPELineParms *))&OMAPDDGPE::WrappedEmulatedLine;

  00020	059f3008	 ldreq       r3, [pc, #8]
  00024	e5813000	 str         r3, [r1]
  00028		 |$LN3@Line|

; 1094 :     {
; 1095 :         DispPerfEnd (0);
; 1096 :     }
; 1097 :     
; 1098 :     return S_OK;

  00028	e3a00000	 mov         r0, #0

; 1099 : }

  0002c	e12fff1e	 bx          lr
  00030		 |$LN13@Line|
  00030		 |$LN14@Line|
  00030	00000000	 DCD         |?WrappedEmulatedLine@OMAPDDGPE@@AAAJPAUGPELineParms@@@Z|
  00034		 |$LN15@Line|
  00034	00000000	 DCD         |?EmulatedLine@GPE@@QAAJPAUGPELineParms@@@Z|
  00038		 |$M44110|

			 ENDP  ; |?Line@OMAPDDGPE@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z|, OMAPDDGPE::Line

	IMPORT	|?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::DesignateBlt
	IMPORT	|?DMAFill@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::DMAFill
	IMPORT	|?DMASrcCopy@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z| ; OMAPDDGPE::DMASrcCopy
	IMPORT	|?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z| ; GPE::EmulatedBlt
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T44159| DCD	|$LN43@BltPrepare|
	DCD	0x4000b401
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\dss\ddgpe\omap_ddgpe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?BltPrepare@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::BltPrepare

; 1106 : {

  00000		 |$LN43@BltPrepare|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M44156|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 1107 :     RECTL rect;
; 1108 :     LONG swapTmp;
; 1109 : 
; 1110 :     DEBUGMSG (GPE_ZONE_BLT_LO, (TEXT("OMAPDDGPE::BltPrepare\r\n")));
; 1111 : 
; 1112 :     //  Display perf start
; 1113 :     DispPerfStart( blitParameters->rop4 );
; 1114 :     
; 1115 : 
; 1116 :     if (g_Globals.m_dwCursorEnable)

  0000c	e59f72b8	 ldr         r7, [pc, #0x2B8]
  00010	e5973234	 ldr         r3, [r7, #0x234]
  00014	e3530000	 cmp         r3, #0
  00018	0a00005d	 beq         |$LN25@BltPrepare|

; 1117 :     {
; 1118 :         Lock();

  0001c	e5943000	 ldr         r3, [r4]
  00020	e59330ec	 ldr         r3, [r3, #0xEC]
  00024	e1a0e00f	 mov         lr, pc
  00028	e12fff13	 bx          r3

; 1119 : 
; 1120 :         // Check if destination overlap with cursor
; 1121 :         if (blitParameters->pDst == m_pPrimarySurface && m_cursorVisible && !m_cursorDisabled) 

  0002c	e5952004	 ldr         r2, [r5, #4]
  00030	e5943004	 ldr         r3, [r4, #4]
  00034	e3a08001	 mov         r8, #1
  00038	e1520003	 cmp         r2, r3
  0003c	1a000029	 bne         |$LN19@BltPrepare|
  00040	e5943150	 ldr         r3, [r4, #0x150]
  00044	e3530000	 cmp         r3, #0
  00048	0a000026	 beq         |$LN19@BltPrepare|
  0004c	e594314c	 ldr         r3, [r4, #0x14C]
  00050	e3530000	 cmp         r3, #0
  00054	1a000023	 bne         |$LN19@BltPrepare|

; 1122 :         { 
; 1123 :             if (blitParameters->prclDst != NULL) 

  00058	e5953014	 ldr         r3, [r5, #0x14]
  0005c	e3530000	 cmp         r3, #0
  00060	0a00000d	 beq         |$LN23@BltPrepare|

; 1124 :             {
; 1125 :                 rect = *blitParameters->prclDst;     // if so, use it

  00064	e5932000	 ldr         r2, [r3]
  00068	e5930004	 ldr         r0, [r3, #4]
  0006c	e593e008	 ldr         lr, [r3, #8]
  00070	e593300c	 ldr         r3, [r3, #0xC]
  00074	e1a0100e	 mov         r1, lr

; 1126 : 
; 1127 :                 // There is no guarantee of a well
; 1128 :                 // ordered rect in blitParamters
; 1129 :                 // due to flipping and mirroring.
; 1130 :                 if (rect.top > rect.bottom) 

  00078	e1500003	 cmp         r0, r3
  0007c	e1a06003	 mov         r6, r3

; 1131 :                 {
; 1132 :                     swapTmp = rect.top;

  00080	c1a06000	 movgt       r6, r0

; 1133 :                     rect.top = rect.bottom;
; 1134 :                     rect.bottom = swapTmp;

  00084	c1a00003	 movgt       r0, r3

; 1135 :                 }
; 1136 :                 if (rect.left > rect.right) 

  00088	e152000e	 cmp         r2, lr
  0008c	da000006	 ble         |$LN20@BltPrepare|

; 1137 :                 {
; 1138 :                     swapTmp    = rect.left;

  00090	e1a01002	 mov         r1, r2

; 1139 :                     rect.left  = rect.right;
; 1140 :                     rect.right = swapTmp;

  00094	e1a0200e	 mov         r2, lr

; 1141 :                 }
; 1142 :             } 
; 1143 :             else 

  00098	ea000003	 b           |$LN20@BltPrepare|
  0009c		 |$LN23@BltPrepare|

; 1144 :             {
; 1145 :                 rect = m_cursorRect;

  0009c	e5942158	 ldr         r2, [r4, #0x158]
  000a0	e594015c	 ldr         r0, [r4, #0x15C]
  000a4	e5941160	 ldr         r1, [r4, #0x160]
  000a8	e5946164	 ldr         r6, [r4, #0x164]
  000ac		 |$LN20@BltPrepare|

; 1146 :             }
; 1147 : 
; 1148 :             // Turn off cursor if it overlap
; 1149 :             if (
; 1150 :                 m_cursorRect.top <= rect.bottom &&
; 1151 :                 m_cursorRect.bottom >= rect.top &&
; 1152 :                 m_cursorRect.left <= rect.right &&
; 1153 :                 m_cursorRect.right >= rect.left
; 1154 :             ) 

  000ac	e594315c	 ldr         r3, [r4, #0x15C]
  000b0	e1530006	 cmp         r3, r6
  000b4	ca00000b	 bgt         |$LN19@BltPrepare|
  000b8	e5943164	 ldr         r3, [r4, #0x164]
  000bc	e1530000	 cmp         r3, r0
  000c0	ba000008	 blt         |$LN19@BltPrepare|
  000c4	e5943158	 ldr         r3, [r4, #0x158]
  000c8	e1530001	 cmp         r3, r1
  000cc	ca000005	 bgt         |$LN19@BltPrepare|
  000d0	e5943160	 ldr         r3, [r4, #0x160]
  000d4	e1530002	 cmp         r3, r2
  000d8	ba000002	 blt         |$LN19@BltPrepare|

; 1155 :             {
; 1156 :                 CursorOff();

  000dc	e1a00004	 mov         r0, r4
  000e0	eb000000	 bl          |?CursorOff@OMAPDDGPE@@QAAXXZ|

; 1157 :                 m_cursorForcedOff = TRUE;

  000e4	e5848154	 str         r8, [r4, #0x154]
  000e8		 |$LN19@BltPrepare|

; 1158 :             }
; 1159 :         }
; 1160 : 
; 1161 :         // Check if source overlap with cursor
; 1162 :         if (blitParameters->pSrc == m_pPrimarySurface && m_cursorVisible && !m_cursorDisabled && !m_cursorForcedOff)

  000e8	e5952008	 ldr         r2, [r5, #8]
  000ec	e5943004	 ldr         r3, [r4, #4]
  000f0	e1520003	 cmp         r2, r3
  000f4	1a000021	 bne         |$LN15@BltPrepare|
  000f8	e5943150	 ldr         r3, [r4, #0x150]
  000fc	e3530000	 cmp         r3, #0
  00100	0a00001e	 beq         |$LN15@BltPrepare|
  00104	e594314c	 ldr         r3, [r4, #0x14C]
  00108	e3530000	 cmp         r3, #0
  0010c	1a00001b	 bne         |$LN15@BltPrepare|
  00110	e5943154	 ldr         r3, [r4, #0x154]
  00114	e3530000	 cmp         r3, #0
  00118	1a000018	 bne         |$LN15@BltPrepare|

; 1163 :         {
; 1164 :             if (blitParameters->prclSrc != NULL) {

  0011c	e5953018	 ldr         r3, [r5, #0x18]
  00120	e3530000	 cmp         r3, #0

; 1165 :                 rect = *blitParameters->prclSrc;

  00124	15930000	 ldrne       r0, [r3]
  00128	15931004	 ldrne       r1, [r3, #4]
  0012c	1593e008	 ldrne       lr, [r3, #8]
  00130	1593200c	 ldrne       r2, [r3, #0xC]

; 1166 :             } 
; 1167 :             else 
; 1168 :             {
; 1169 :                 rect = m_cursorRect;

  00134	05942164	 ldreq       r2, [r4, #0x164]

; 1170 :             }
; 1171 :             if (
; 1172 :                 m_cursorRect.top < rect.bottom && m_cursorRect.bottom > rect.top &&
; 1173 :                 m_cursorRect.left < rect.right && m_cursorRect.right > rect.left
; 1174 :             ) 

  00138	e594315c	 ldr         r3, [r4, #0x15C]
  0013c	05940158	 ldreq       r0, [r4, #0x158]
  00140	0594115c	 ldreq       r1, [r4, #0x15C]
  00144	0594e160	 ldreq       lr, [r4, #0x160]
  00148	e1530002	 cmp         r3, r2
  0014c	aa00000b	 bge         |$LN15@BltPrepare|
  00150	e5943164	 ldr         r3, [r4, #0x164]
  00154	e1530001	 cmp         r3, r1
  00158	da000008	 ble         |$LN15@BltPrepare|
  0015c	e5943158	 ldr         r3, [r4, #0x158]
  00160	e153000e	 cmp         r3, lr
  00164	aa000005	 bge         |$LN15@BltPrepare|
  00168	e5943160	 ldr         r3, [r4, #0x160]
  0016c	e1530000	 cmp         r3, r0
  00170	da000002	 ble         |$LN15@BltPrepare|

; 1175 :             {
; 1176 :                 CursorOff();

  00174	e1a00004	 mov         r0, r4
  00178	eb000000	 bl          |?CursorOff@OMAPDDGPE@@QAAXXZ|

; 1177 :                 m_cursorForcedOff = TRUE;

  0017c	e5848154	 str         r8, [r4, #0x154]
  00180		 |$LN15@BltPrepare|

; 1178 :             }
; 1179 :         }
; 1180 : 
; 1181 :         Unlock();

  00180	e5943000	 ldr         r3, [r4]
  00184	e1a00004	 mov         r0, r4
  00188	e59330f0	 ldr         r3, [r3, #0xF0]
  0018c	e1a0e00f	 mov         lr, pc
  00190	e12fff13	 bx          r3
  00194		 |$LN25@BltPrepare|

; 1182 :     }
; 1183 : 
; 1184 :     // Default to base emulated routine
; 1185 :     blitParameters->pBlt = &GPE::EmulatedBlt;

  00194	e59f3124	 ldr         r3, [pc, #0x124]

; 1186 : 
; 1187 :     //  Check for any ROPs that can be accelerated by HW
; 1188 :     if( blitParameters->pDst->InVideoMemory() )

  00198	e5951004	 ldr         r1, [r5, #4]
  0019c	e5853000	 str         r3, [r5]
  001a0	e5913020	 ldr         r3, [r1, #0x20]
  001a4	e3530000	 cmp         r3, #0
  001a8	0a000031	 beq         |$LN12@BltPrepare|

; 1189 :     { 
; 1190 :         switch( blitParameters->rop4 )

  001ac	e5953028	 ldr         r3, [r5, #0x28]
  001b0	e1b02003	 movs        r2, r3
  001b4	0a00002a	 beq         |$LN11@BltPrepare|
  001b8	e3a03b33	 mov         r3, #0x33, 22
  001bc	e38330cc	 orr         r3, r3, #0xCC
  001c0	e1520003	 cmp         r2, r3
  001c4	0a000010	 beq         |$LN7@BltPrepare|
  001c8	e3a03a0f	 mov         r3, #0xF, 20
  001cc	e38330f0	 orr         r3, r3, #0xF0
  001d0	e1520003	 cmp         r2, r3
  001d4	0a000005	 beq         |$LN9@BltPrepare|
  001d8	e3a03cff	 mov         r3, #0xFF, 24
  001dc	e38330ff	 orr         r3, r3, #0xFF
  001e0	e1520003	 cmp         r2, r3
  001e4	1a000022	 bne         |$LN12@BltPrepare|

; 1195 :                 break;
; 1196 :                 
; 1197 :             case 0xFFFF:  // WHITENESS
; 1198 :                 blitParameters->solidColor = 0x00FFFFFF;
; 1199 :                 blitParameters->pBlt = (SCODE (GPE::*)(struct GPEBltParms *)) &OMAPDDGPE::DMAFill;

  001e8	e3e024ff	 mvn         r2, #0xFF, 8

; 1200 :                 break;

  001ec	ea00001d	 b           |$LN38@BltPrepare|
  001f0		 |$LN9@BltPrepare|

; 1201 : 
; 1202 :             case 0xF0F0:  // PATCOPY
; 1203 :                 // Solid color only
; 1204 :                 // Disabled 32 bit sDMA PATCOPY, it causes CETK DirectDraw test failure
; 1205 :                 if( blitParameters->solidColor != -1 && blitParameters->pDst->Format() != gpe32Bpp)

  001f0	e5953020	 ldr         r3, [r5, #0x20]
  001f4	e3730001	 cmn         r3, #1
  001f8	0a00001d	 beq         |$LN12@BltPrepare|
  001fc	e591301c	 ldr         r3, [r1, #0x1C]
  00200	e3530006	 cmp         r3, #6
  00204	0a00001a	 beq         |$LN12@BltPrepare|

; 1206 :                 {
; 1207 :                     blitParameters->pBlt = (SCODE (GPE::*)(struct GPEBltParms *)) &OMAPDDGPE::DMAFill;
; 1208 :                 }
; 1209 :                 break;

  00208	ea000017	 b           |$LN39@BltPrepare|
  0020c		 |$LN7@BltPrepare|

; 1210 : 
; 1211 :             case 0xCCCC:  // SRCCOPY
; 1212 :                 if( blitParameters->pSrc->InVideoMemory() &&
; 1213 :                     (blitParameters->pSrc->Format() == blitParameters->pDst->Format()) &&
; 1214 :                     blitParameters->pLookup == NULL &&
; 1215 :                     blitParameters->pConvert == NULL &&
; 1216 :                     blitParameters->xPositive > 0 )

  0020c	e5952008	 ldr         r2, [r5, #8]
  00210	e5923020	 ldr         r3, [r2, #0x20]
  00214	e3530000	 cmp         r3, #0
  00218	0a000015	 beq         |$LN12@BltPrepare|
  0021c	e592201c	 ldr         r2, [r2, #0x1C]
  00220	e591301c	 ldr         r3, [r1, #0x1C]
  00224	e1520003	 cmp         r2, r3
  00228	1a000011	 bne         |$LN12@BltPrepare|
  0022c	e595303c	 ldr         r3, [r5, #0x3C]
  00230	e3530000	 cmp         r3, #0
  00234	1a00000e	 bne         |$LN12@BltPrepare|
  00238	e5953040	 ldr         r3, [r5, #0x40]
  0023c	e3530000	 cmp         r3, #0
  00240	1a00000b	 bne         |$LN12@BltPrepare|
  00244	e5953034	 ldr         r3, [r5, #0x34]
  00248	e3530000	 cmp         r3, #0
  0024c	da000008	 ble         |$LN12@BltPrepare|

; 1217 :                 {
; 1218 :                     //  Check the BLT flags
; 1219 :                     if( (blitParameters->bltFlags & ~(BLT_WAITVSYNC|BLT_WAITNOTBUSY)) == 0 )

  00250	e5953024	 ldr         r3, [r5, #0x24]
  00254	e3d3cb03	 bics        r12, r3, #3, 22
  00258	1a000005	 bne         |$LN12@BltPrepare|

; 1220 :                     //if( blitParameters->bltFlags == 0 )
; 1221 :                     {
; 1222 :                         blitParameters->pBlt = (SCODE (GPE::*)(struct GPEBltParms *)) &OMAPDDGPE::DMASrcCopy;

  0025c	e59f3064	 ldr         r3, [pc, #0x64]

; 1223 :                     }
; 1224 :                 }
; 1225 :                 break;                

  00260	ea000002	 b           |$LN40@BltPrepare|
  00264		 |$LN11@BltPrepare|

; 1191 :         {
; 1192 :             case 0x0000:  // BLACKNESS
; 1193 :                 blitParameters->solidColor = 0;
; 1194 :                 blitParameters->pBlt = (SCODE (GPE::*)(struct GPEBltParms *)) &OMAPDDGPE::DMAFill;

  00264	e3a02000	 mov         r2, #0
  00268		 |$LN38@BltPrepare|
  00268	e5852020	 str         r2, [r5, #0x20]
  0026c		 |$LN39@BltPrepare|
  0026c	e59f3050	 ldr         r3, [pc, #0x50]
  00270		 |$LN40@BltPrepare|
  00270	e5853000	 str         r3, [r5]
  00274		 |$LN12@BltPrepare|

; 1226 :         }
; 1227 :     }
; 1228 : 
; 1229 :     //  Check for any ROPs that can be accelerated by optimized SW
; 1230 :     if( g_Globals.m_dwEnableNeonBlts && blitParameters->pBlt == &GPE::EmulatedBlt)

  00274	e5973248	 ldr         r3, [r7, #0x248]
  00278	e3530000	 cmp         r3, #0
  0027c	0a000004	 beq         |$LN4@BltPrepare|
  00280	e5952000	 ldr         r2, [r5]
  00284	e59f3034	 ldr         r3, [pc, #0x34]
  00288	e1520003	 cmp         r2, r3

; 1231 :     {
; 1232 :         blitParameters->pBlt = (SCODE (GPE::*)(GPEBltParms*))(&OMAPDDGPE::DesignateBlt);

  0028c	059f3028	 ldreq       r3, [pc, #0x28]
  00290	05853000	 streq       r3, [r5]
  00294		 |$LN4@BltPrepare|

; 1233 :     }
; 1234 :     
; 1235 :     //  Display perf type
; 1236 :     if( blitParameters->pBlt != &GPE::EmulatedBlt ) 
; 1237 :         DispPerfType(DISPPERF_ACCEL_HARDWARE);
; 1238 :     else
; 1239 :         DispPerfType(DISPPERF_ACCEL_EMUL);
; 1240 : 
; 1241 : 	if( blitParameters->bltFlags & BLT_WAITVSYNC)

  00294	e5953024	 ldr         r3, [r5, #0x24]
  00298	e3130b02	 tst         r3, #2, 22

; 1242 :     {            
; 1243 :         WaitForVBlank();            

  0029c	15943000	 ldrne       r3, [r4]
  002a0	11a00004	 movne       r0, r4
  002a4	15933054	 ldrne       r3, [r3, #0x54]
  002a8	11a0e00f	 movne       lr, pc
  002ac	112fff13	 bxne        r3

; 1244 :     }
; 1245 : 
; 1246 :     return S_OK;

  002b0	e3a00000	 mov         r0, #0

; 1247 : }

  002b4	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  002b8	e12fff1e	 bx          lr
  002bc		 |$LN44@BltPrepare|
  002bc		 |$LN45@BltPrepare|
  002bc	00000000	 DCD         |?DesignateBlt@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  002c0		 |$LN46@BltPrepare|
  002c0	00000000	 DCD         |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  002c4		 |$LN47@BltPrepare|
  002c4	00000000	 DCD         |?DMAFill@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  002c8		 |$LN48@BltPrepare|
  002c8	00000000	 DCD         |?DMASrcCopy@OMAPDDGPE@@QAAJPAUGPEBltParms@@@Z|
  002cc		 |$LN49@BltPrepare|
  002cc	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  002d0		 |$M44157|

			 ENDP  ; |?BltPrepare@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::BltPrepare


  00000			 AREA	 |.pdata|, PDATA
|$T44175| DCD	|$LN7@BltComplet|
	DCD	0x40001f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?BltComplete@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z| PROC ; OMAPDDGPE::BltComplete

; 1254 : {

  00000		 |$LN7@BltComplet|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M44172|
  00004	e1a04000	 mov         r4, r0

; 1255 :     DEBUGMSG (GPE_ZONE_BLT_LO, (TEXT("OMAPDDGPE::BltComplete\r\n")));
; 1256 :     
; 1257 :     UNREFERENCED_PARAMETER(blitParameters);
; 1258 :     
; 1259 :     // need to wait for DMA based operations to complete, else CETK and cursor issues
; 1260 :     WaitForNotBusy();

  00008	e5943000	 ldr         r3, [r4]
  0000c	e5933060	 ldr         r3, [r3, #0x60]
  00010	e1a0e00f	 mov         lr, pc
  00014	e12fff13	 bx          r3

; 1261 : 
; 1262 :     if (g_Globals.m_dwCursorEnable)

  00018	e59f3058	 ldr         r3, [pc, #0x58]
  0001c	e5933234	 ldr         r3, [r3, #0x234]
  00020	e3530000	 cmp         r3, #0
  00024	0a000010	 beq         |$LN1@BltComplet|

; 1263 :     {
; 1264 :         // If cursor was forced off turn it back on
; 1265 :         if (m_cursorForcedOff) 

  00028	e5943154	 ldr         r3, [r4, #0x154]
  0002c	e3530000	 cmp         r3, #0
  00030	0a00000d	 beq         |$LN1@BltComplet|

; 1266 :         {
; 1267 :             m_cursorForcedOff = FALSE;
; 1268 :             Lock();

  00034	e5943000	 ldr         r3, [r4]
  00038	e3a02000	 mov         r2, #0
  0003c	e1a00004	 mov         r0, r4
  00040	e59330ec	 ldr         r3, [r3, #0xEC]
  00044	e5842154	 str         r2, [r4, #0x154]
  00048	e1a0e00f	 mov         lr, pc
  0004c	e12fff13	 bx          r3

; 1269 :             CursorOn();

  00050	e1a00004	 mov         r0, r4
  00054	eb000000	 bl          |?CursorOn@OMAPDDGPE@@QAAXXZ|

; 1270 :             Unlock();

  00058	e5943000	 ldr         r3, [r4]
  0005c	e1a00004	 mov         r0, r4
  00060	e59330f0	 ldr         r3, [r3, #0xF0]
  00064	e1a0e00f	 mov         lr, pc
  00068	e12fff13	 bx          r3
  0006c		 |$LN1@BltComplet|

; 1271 :         }
; 1272 :     }
; 1273 : 
; 1274 :     //  Display perf end
; 1275 :     DispPerfEnd(0);
; 1276 :     return S_OK;

  0006c	e3a00000	 mov         r0, #0

; 1277 : }

  00070	e8bd4010	 ldmia       sp!, {r4, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$LN8@BltComplet|
  00078		 |$LN9@BltComplet|
  00078	00000000	 DCD         |?g_Globals@@3VOMAPDDGPEGlobals@@A|
  0007c		 |$M44173|

			 ENDP  ; |?BltComplete@OMAPDDGPE@@UAAJPAUGPEBltParms@@@Z|, OMAPDDGPE::BltComplete

	END
