; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\SDHC\BASE\dma.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?m_cmdArrSize@CSDIOControllerBase@@2KB| [ DATA ] ; CSDIOControllerBase::m_cmdArrSize
	EXPORT	|?TxDmaSettings@@3UDmaConfigInfo_t@@A| [ DATA ] ; TxDmaSettings
	EXPORT	|?RxDmaSettings@@3UDmaConfigInfo_t@@A| [ DATA ] ; RxDmaSettings

  00000			 AREA	 |.data|, DATA
|?TxDmaSettings@@3UDmaConfigInfo_t@@A| DCD 0x2		; TxDmaSettings
	DCD	0x0
	DCD	0x0
	DCD	0x1000
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x4000040
	DCD	0x0
	DCD	0x20
	DCD	0x0
	%	4
|?RxDmaSettings@@3UDmaConfigInfo_t@@A| DCD 0x2		; RxDmaSettings
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x4000
	DCD	0x4000040
	DCD	0x1000000
	DCD	0x20
	DCD	0x0
	%	4

  00000			 AREA	 |.rdata|, DATA, READONLY
|?m_cmdArrSize@CSDIOControllerBase@@2KB| DCD 0x20	; CSDIOControllerBase::m_cmdArrSize
	EXPORT	|DmaConfigure|
	IMPORT	|DmaGetLogicalChannel|
	IMPORT	|memset|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T42106| DCD	|$LN9@DmaConfigu|
	DCD	0x40003901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaConfigure| PROC

; 166  : {

  00000		 |$LN9@DmaConfigu|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M42103|
  00004	e1a04003	 mov         r4, r3
  00008	e1a09002	 mov         r9, r2
  0000c	e1a06001	 mov         r6, r1
  00010	e1a05000	 mov         r5, r0

; 167  :     BOOL rc = FALSE;
; 168  :     OMAP_DMA_LC_REGS *pDmaLcReg = (OMAP_DMA_LC_REGS*)DmaGetLogicalChannel(hDmaChannel);

  00014	e3a08000	 mov         r8, #0
  00018	eb000000	 bl          DmaGetLogicalChannel
  0001c	e1b07000	 movs        r7, r0

; 169  :     if (pDmaLcReg == NULL || pConfigInfo == NULL)

  00020	0a00002c	 beq         |$cleanUp$39597|
  00024	e3560000	 cmp         r6, #0
  00028	0a00002a	 beq         |$cleanUp$39597|

; 170  :         {
; 171  :         goto cleanUp;
; 172  :         }
; 173  : 
; 174  :     // initialize dma DataInfo if necessary
; 175  :     if (pDataInfo != NULL)

  0002c	e3540000	 cmp         r4, #0
  00030	0a000005	 beq         |$LN1@DmaConfigu|

; 176  :         {
; 177  :         memset(pDataInfo, 0, sizeof(DmaDataInfo_t));

  00034	e3a02018	 mov         r2, #0x18
  00038	e3a01000	 mov         r1, #0
  0003c	e1a00004	 mov         r0, r4
  00040	eb000000	 bl          memset

; 178  :         pDataInfo->hDmaChannel = hDmaChannel;

  00044	e5845010	 str         r5, [r4, #0x10]

; 179  :         pDataInfo->pDmaLcReg = pDmaLcReg;

  00048	e5847014	 str         r7, [r4, #0x14]
  0004c		 |$LN1@DmaConfigu|

; 180  :         }
; 181  : 
; 182  :     // Disable the DMA in case it is running
; 183  :     CLRREG32(&pDmaLcReg->CCR, DMA_CCR_ENABLE);

  0004c	e5973000	 ldr         r3, [r7]

; 184  : 
; 185  :     // update syncmap
; 186  :     pConfigInfo->syncMap = syncMap;
; 187  : 
; 188  :     // Initialize logical channel registers
; 189  :     //
; 190  :     OUTREG32(&pDmaLcReg->CCR, 0);

  00050	e3a02000	 mov         r2, #0

; 191  :     OUTREG32(&pDmaLcReg->CLNK_CTRL, 0);
; 192  :     OUTREG32(&pDmaLcReg->COLOR, 0);
; 193  : 
; 194  :     // update CSDP
; 195  :     //  DATA_TYPE
; 196  :     //  DST
; 197  :     //  SRC
; 198  :     OUTREG32(&pDmaLcReg->CSDP, pConfigInfo->elemSize);
; 199  : 
; 200  :     // update CCR
; 201  :     //  DST_MODE
; 202  :     //  SRC_MODE
; 203  :     //  PRIO
; 204  :     //  SYNC
; 205  :     //
; 206  :     OUTREG32(&pDmaLcReg->CCR, pConfigInfo->srcAddrMode |
; 207  :         pConfigInfo->dstAddrMode | pConfigInfo->dmaPrio |
; 208  :         DMA_CCR_SYNC(syncMap) | pConfigInfo->synchTrigger |
; 209  :         pConfigInfo->synchMode
; 210  :         );

  00054	e2090060	 and         r0, r9, #0x60
  00058	e3c33080	 bic         r3, r3, #0x80
  0005c	e5873000	 str         r3, [r7]
  00060	e586902c	 str         r9, [r6, #0x2C]
  00064	e5872000	 str         r2, [r7]
  00068	e5872004	 str         r2, [r7, #4]
  0006c	e5872044	 str         r2, [r7, #0x44]
  00070	e5963000	 ldr         r3, [r6]

; 211  : 
; 212  :     // update CSEI
; 213  :     //
; 214  :     OUTREG32(&pDmaLcReg->CSEI, pConfigInfo->srcElemIndex);
; 215  : 
; 216  :     // update CDEI
; 217  :     //
; 218  :     OUTREG32(&pDmaLcReg->CDEI, pConfigInfo->dstElemIndex);
; 219  : 
; 220  :     // update CSFI
; 221  :     //
; 222  :     OUTREG32(&pDmaLcReg->CSFI, pConfigInfo->srcFrameIndex);
; 223  : 
; 224  :     // update CDFI
; 225  :     //
; 226  :     OUTREG32(&pDmaLcReg->CDFI, pConfigInfo->dstFrameIndex);
; 227  : 
; 228  :     // update CICR
; 229  :     //
; 230  :     OUTREG32(&pDmaLcReg->CICR , pConfigInfo->interrupts);
; 231  :     
; 232  :     rc = TRUE;

  00074	e3a08001	 mov         r8, #1
  00078	e5873010	 str         r3, [r7, #0x10]
  0007c	e5962024	 ldr         r2, [r6, #0x24]
  00080	e209301f	 and         r3, r9, #0x1F
  00084	e5961020	 ldr         r1, [r6, #0x20]
  00088	e1833700	 orr         r3, r3, r0, lsl #14
  0008c	e1833002	 orr         r3, r3, r2
  00090	e596201c	 ldr         r2, [r6, #0x1C]
  00094	e1833001	 orr         r3, r3, r1
  00098	e5961018	 ldr         r1, [r6, #0x18]
  0009c	e1833002	 orr         r3, r3, r2
  000a0	e596200c	 ldr         r2, [r6, #0xC]
  000a4	e1833001	 orr         r3, r3, r1
  000a8	e1833002	 orr         r3, r3, r2
  000ac	e5873000	 str         r3, [r7]
  000b0	e5963004	 ldr         r3, [r6, #4]
  000b4	e5873024	 str         r3, [r7, #0x24]
  000b8	e5963010	 ldr         r3, [r6, #0x10]
  000bc	e587302c	 str         r3, [r7, #0x2C]
  000c0	e5963008	 ldr         r3, [r6, #8]
  000c4	e5873028	 str         r3, [r7, #0x28]
  000c8	e5963014	 ldr         r3, [r6, #0x14]
  000cc	e5873030	 str         r3, [r7, #0x30]
  000d0	e5963028	 ldr         r3, [r6, #0x28]
  000d4	e5873008	 str         r3, [r7, #8]
  000d8		 |$cleanUp$39597|

; 233  : 
; 234  : cleanUp:
; 235  :     return rc;
; 236  : }

  000d8	e1a00008	 mov         r0, r8
  000dc	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000e0	e12fff1e	 bx          lr
  000e4		 |$M42104|

			 ENDP  ; |DmaConfigure|

	EXPORT	|DmaSetDstBuffer|

  00000			 AREA	 |.pdata|, PDATA
|$T42116| DCD	|$LN6@DmaSetDstB|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetDstBuffer| PROC

; 330  : {

  00000		 |$LN6@DmaSetDstB|
  00000		 |$M42113|

; 331  :     // save values
; 332  :     //
; 333  :     pDataInfo->pDstBuffer = pBuffer;
; 334  :     pDataInfo->PhysAddrDstBuffer = PhysAddr;
; 335  : 
; 336  :     // set destination address
; 337  :     //
; 338  :     if (pDataInfo->pDmaLcReg != NULL)

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e5801004	 str         r1, [r0, #4]
  00008	e580200c	 str         r2, [r0, #0xC]
  0000c	e3530000	 cmp         r3, #0

; 339  :         {
; 340  :         OUTREG32(&pDataInfo->pDmaLcReg->CDSA, PhysAddr);

  00010	15832020	 strne       r2, [r3, #0x20]

; 341  :         OUTREG32(&pDataInfo->pDmaLcReg->CDAC, PhysAddr);

  00014	15903014	 ldrne       r3, [r0, #0x14]
  00018	15832038	 strne       r2, [r3, #0x38]

; 342  :         }
; 343  : }

  0001c	e12fff1e	 bx          lr
  00020		 |$M42114|

			 ENDP  ; |DmaSetDstBuffer|

	EXPORT	|DmaSetSrcBuffer|

  00000			 AREA	 |.pdata|, PDATA
|$T42126| DCD	|$LN6@DmaSetSrcB|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetSrcBuffer| PROC

; 358  : {

  00000		 |$LN6@DmaSetSrcB|
  00000		 |$M42123|

; 359  :     // save values
; 360  :     //
; 361  :     pDataInfo->pSrcBuffer = pBuffer;
; 362  :     pDataInfo->PhysAddrSrcBuffer = PhysAddr;
; 363  : 
; 364  :     // set source address
; 365  :     //
; 366  :     if (pDataInfo->pDmaLcReg != NULL)

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e5801000	 str         r1, [r0]
  00008	e5802008	 str         r2, [r0, #8]
  0000c	e3530000	 cmp         r3, #0

; 367  :         {
; 368  :         OUTREG32(&pDataInfo->pDmaLcReg->CSSA, PhysAddr);

  00010	1583201c	 strne       r2, [r3, #0x1C]

; 369  :         OUTREG32(&pDataInfo->pDmaLcReg->CSAC, PhysAddr);

  00014	15903014	 ldrne       r3, [r0, #0x14]
  00018	15832034	 strne       r2, [r3, #0x34]

; 370  :         }
; 371  : }

  0001c	e12fff1e	 bx          lr
  00020		 |$M42124|

			 ENDP  ; |DmaSetSrcBuffer|

	EXPORT	|DmaSetElementAndFrameCount|

  00000			 AREA	 |.pdata|, PDATA
|$T42136| DCD	|$LN5@DmaSetElem|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetElementAndFrameCount| PROC

; 386  : {

  00000		 |$LN5@DmaSetElem|
  00000		 |$M42133|

; 387  :     // setup frame and element count for destination side
; 388  :     //
; 389  :     OUTREG32(&pDataInfo->pDmaLcReg->CEN , countElements);

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e5831014	 str         r1, [r3, #0x14]

; 390  :     OUTREG32(&pDataInfo->pDmaLcReg->CFN , countFrames);

  00008	e5903014	 ldr         r3, [r0, #0x14]
  0000c	e5832018	 str         r2, [r3, #0x18]

; 391  : }

  00010	e12fff1e	 bx          lr
  00014		 |$M42134|

			 ENDP  ; |DmaSetElementAndFrameCount|

	EXPORT	|DmaStop|

  00000			 AREA	 |.pdata|, PDATA
|$T42147| DCD	|$LN12@DmaStop|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaStop| PROC

; 449  : {

  00000		 |$LN12@DmaStop|
  00000	e24dd004	 sub         sp, sp, #4
  00004		 |$M42144|

; 450  :     volatile ULONG ulCCR;
; 451  :     BOOL breakLoop = FALSE;
; 452  : 
; 453  :     // disable standby in dma controller
; 454  :     //
; 455  :     CLRREG32(&pDataInfo->pDmaLcReg->CCR , DMA_CCR_ENABLE);

  00004	e5902014	 ldr         r2, [r0, #0x14]
  00008	e3a01000	 mov         r1, #0
  0000c	e5923000	 ldr         r3, [r2]
  00010	e3c33080	 bic         r3, r3, #0x80
  00014	e5823000	 str         r3, [r2]
  00018	e5902014	 ldr         r2, [r0, #0x14]
  0001c		 |$LL5@DmaStop|

; 456  : 
; 457  :     // ensure DMA transfer is completed by polling the active bits
; 458  :     //
; 459  :     while (breakLoop == FALSE)
; 460  :         {
; 461  :         ulCCR = INREG32(&pDataInfo->pDmaLcReg->CCR);

  0001c	e5923000	 ldr         r3, [r2]
  00020	e58d3000	 str         r3, [sp]

; 462  :         if ((ulCCR & DMA_CCR_WR_ACTIVE) || (ulCCR & DMA_CCR_RD_ACTIVE))

  00024	e59d3000	 ldr         r3, [sp]
  00028	e3130b01	 tst         r3, #1, 22
  0002c	059d3000	 ldreq       r3, [sp]
  00030	03130c02	 tsteq       r3, #2, 24

; 463  :             {
; 464  :             // fix this infinite loop
; 465  :             //
; 466  :             continue;
; 467  :             }
; 468  :         else
; 469  :             {
; 470  :             breakLoop = TRUE;

  00034	03a01001	 moveq       r1, #1
  00038	e3510000	 cmp         r1, #0
  0003c	0afffff6	 beq         |$LL5@DmaStop|

; 471  :             }
; 472  :         }
; 473  : 
; 474  : }

  00040	e28dd004	 add         sp, sp, #4
  00044	e12fff1e	 bx          lr
  00048		 |$M42145|

			 ENDP  ; |DmaStop|

	EXPORT	|DmaStart|

  00000			 AREA	 |.pdata|, PDATA
|$T42155| DCD	|$LN5@DmaStart|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaStart| PROC

; 487  : {

  00000		 |$LN5@DmaStart|
  00000		 |$M42152|

; 488  :     // enable the dma channel
; 489  :     //
; 490  :     SETREG32(&pDataInfo->pDmaLcReg->CCR , DMA_CCR_ENABLE);

  00000	e5902014	 ldr         r2, [r0, #0x14]
  00004	e5923000	 ldr         r3, [r2]
  00008	e3833080	 orr         r3, r3, #0x80
  0000c	e5823000	 str         r3, [r2]

; 491  : }

  00010	e12fff1e	 bx          lr
  00014		 |$M42153|

			 ENDP  ; |DmaStart|

	EXPORT	|?SDIO_InitDMA@CSDIOControllerBase@@QAAXXZ| ; CSDIOControllerBase::SDIO_InitDMA
	IMPORT	|DmaEnableInterrupts|
	IMPORT	|LocalAlloc|
	IMPORT	|DmaAllocateChannel|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdhc\base\dma.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T42163| DCD	|$LN15@SDIO_InitD|
	DCD	0x40002a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SDIO_InitDMA@CSDIOControllerBase@@QAAXXZ| PROC ; CSDIOControllerBase::SDIO_InitDMA

; 216  : {

  00000		 |$LN15@SDIO_InitD|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M42160|
  00004	e1a04000	 mov         r4, r0

; 217  :     // allocate dma channel
; 218  :     m_hRxDmaChannel = DmaAllocateChannel(DMA_TYPE_SYSTEM);

  00008	e3a00000	 mov         r0, #0
  0000c	eb000000	 bl          DmaAllocateChannel
  00010	e3500000	 cmp         r0, #0
  00014	e58400a4	 str         r0, [r4, #0xA4]

; 219  :     if (m_hRxDmaChannel != NULL)

  00018	0a00000a	 beq         |$LN7@SDIO_InitD|

; 220  :     {
; 221  : 	  DEBUGMSG(ZONE_INIT, (L"SDIO_InitDMA : RX DMA enabled\n"));
; 222  :       
; 223  :       m_RxDmaInfo = (DmaDataInfo_t *)LocalAlloc(LMEM_ZEROINIT,sizeof(DmaDataInfo_t));

  0001c	e3a01018	 mov         r1, #0x18
  00020	e3a00040	 mov         r0, #0x40
  00024	eb000000	 bl          LocalAlloc
  00028	e3500000	 cmp         r0, #0
  0002c	e58400a0	 str         r0, [r4, #0xA0]

; 224  :       if(!m_RxDmaInfo)

  00030	0a00001a	 beq         |$cleanUp$41287|

; 225  :       {
; 226  :         DEBUGMSG(SDCARD_ZONE_ERROR, (L"ERROR: SDIO_InitDMA: "
; 227  :                 L"Cannot allocate DMA on RX\r\n"
; 228  :                 ));
; 229  :         goto cleanUp;
; 230  :       }
; 231  : 
; 232  :       // Disable DMA interrupts for Transmit by passing in NULL for the event parameter
; 233  :       if (DmaEnableInterrupts(m_hRxDmaChannel, NULL) == FALSE)

  00034	e59400a4	 ldr         r0, [r4, #0xA4]
  00038	e3a01000	 mov         r1, #0
  0003c	eb000000	 bl          DmaEnableInterrupts
  00040	e3500000	 cmp         r0, #0
  00044	0a000015	 beq         |$cleanUp$41287|
  00048		 |$LN7@SDIO_InitD|

; 234  :       {
; 235  :         DEBUGMSG(SDCARD_ZONE_ERROR, (L"ERROR: SDIO_InitDMA: "
; 236  :           L"Failed to disable DMA TX interrupt\r\n"
; 237  :                ));
; 238  :         goto cleanUp;
; 239  :       }
; 240  :     }
; 241  :     
; 242  :     // allocate dma channel
; 243  :     m_hTxDmaChannel = DmaAllocateChannel(DMA_TYPE_SYSTEM);

  00048	e3a00000	 mov         r0, #0
  0004c	eb000000	 bl          DmaAllocateChannel
  00050	e3500000	 cmp         r0, #0
  00054	e584009c	 str         r0, [r4, #0x9C]

; 244  :     if (m_hTxDmaChannel != NULL)

  00058	0a000010	 beq         |$cleanUp$41287|

; 245  :     {
; 246  :       m_TxDmaInfo = (DmaDataInfo_t *)LocalAlloc(LMEM_ZEROINIT,sizeof(DmaDataInfo_t));

  0005c	e3a01018	 mov         r1, #0x18
  00060	e3a00040	 mov         r0, #0x40
  00064	eb000000	 bl          LocalAlloc
  00068	e3500000	 cmp         r0, #0
  0006c	e5840098	 str         r0, [r4, #0x98]

; 247  :       if(!m_TxDmaInfo)

  00070	0a00000a	 beq         |$cleanUp$41287|

; 248  :       {
; 249  :         DEBUGMSG(SDCARD_ZONE_ERROR, (L"ERROR: SDIO_InitDMA: "
; 250  :                 L"Cannot allocate DMA on TX\r\n"
; 251  :                 ));
; 252  :         goto cleanUp;
; 253  :       }
; 254  : 
; 255  :       m_TxDmaInfo->pSrcBuffer = NULL;

  00074	e3a02000	 mov         r2, #0
  00078	e5802000	 str         r2, [r0]

; 256  :       m_TxDmaInfo->pDstBuffer = NULL;

  0007c	e5943098	 ldr         r3, [r4, #0x98]

; 257  :       m_TxDmaInfo->PhysAddrSrcBuffer = 0;
; 258  :       m_TxDmaInfo->PhysAddrDstBuffer = 0;
; 259  :     
; 260  :       // Disable DMA interrupts for Transmit by passing in NULL for the event parameter
; 261  :       if (DmaEnableInterrupts(m_hTxDmaChannel, NULL) == FALSE)

  00080	e3a01000	 mov         r1, #0
  00084	e5832004	 str         r2, [r3, #4]
  00088	e5943098	 ldr         r3, [r4, #0x98]
  0008c	e5832008	 str         r2, [r3, #8]
  00090	e5943098	 ldr         r3, [r4, #0x98]
  00094	e583200c	 str         r2, [r3, #0xC]
  00098	e594009c	 ldr         r0, [r4, #0x9C]
  0009c	eb000000	 bl          DmaEnableInterrupts
  000a0		 |$cleanUp$41287|

; 262  :       {
; 263  :         DEBUGMSG(SDCARD_ZONE_ERROR, (L"ERROR: SDIO_InitDMA: "
; 264  :           L"Failed to disable DMA TX interrupt\r\n"
; 265  :                ));
; 266  :         goto cleanUp;
; 267  :       }
; 268  :     }
; 269  : 
; 270  : cleanUp: ;        
; 271  : }

  000a0	e8bd4010	 ldmia       sp!, {r4, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$M42161|

			 ENDP  ; |?SDIO_InitDMA@CSDIOControllerBase@@QAAXXZ|, CSDIOControllerBase::SDIO_InitDMA

	EXPORT	|?SDIO_DeinitDMA@CSDIOControllerBase@@QAAXXZ| ; CSDIOControllerBase::SDIO_DeinitDMA
	IMPORT	|DmaFreeChannel|
	IMPORT	|LocalFree|

  00000			 AREA	 |.pdata|, PDATA
|$T42171| DCD	|$LN9@SDIO_Deini|
	DCD	0x40001d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SDIO_DeinitDMA@CSDIOControllerBase@@QAAXXZ| PROC ; CSDIOControllerBase::SDIO_DeinitDMA

; 274  : {

  00000		 |$LN9@SDIO_Deini|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M42168|
  00004	e1a04000	 mov         r4, r0

; 275  :     if (m_TxDmaInfo)

  00008	e5943098	 ldr         r3, [r4, #0x98]
  0000c	e3a05000	 mov         r5, #0
  00010	e3530000	 cmp         r3, #0
  00014	0a000004	 beq         |$LN4@SDIO_Deini|

; 276  :     {
; 277  :       DmaStop(m_TxDmaInfo);

  00018	e1a00003	 mov         r0, r3
  0001c	eb000000	 bl          DmaStop

; 278  :       LocalFree(m_TxDmaInfo);

  00020	e5940098	 ldr         r0, [r4, #0x98]
  00024	eb000000	 bl          LocalFree

; 279  :       m_TxDmaInfo = NULL;

  00028	e5845098	 str         r5, [r4, #0x98]
  0002c		 |$LN4@SDIO_Deini|

; 280  :     }
; 281  :     
; 282  :     if (m_RxDmaInfo)

  0002c	e59430a0	 ldr         r3, [r4, #0xA0]
  00030	e3530000	 cmp         r3, #0
  00034	0a000004	 beq         |$LN3@SDIO_Deini|

; 283  :     {
; 284  :       DmaStop(m_RxDmaInfo);

  00038	e1a00003	 mov         r0, r3
  0003c	eb000000	 bl          DmaStop

; 285  :       LocalFree(m_RxDmaInfo);

  00040	e59400a0	 ldr         r0, [r4, #0xA0]
  00044	eb000000	 bl          LocalFree

; 286  :       m_RxDmaInfo = NULL;

  00048	e58450a0	 str         r5, [r4, #0xA0]
  0004c		 |$LN3@SDIO_Deini|

; 287  :     }
; 288  : 
; 289  :     // Free TX DMA channel
; 290  :     if (m_hTxDmaChannel != NULL) DmaFreeChannel(m_hTxDmaChannel);

  0004c	e594309c	 ldr         r3, [r4, #0x9C]
  00050	e3530000	 cmp         r3, #0
  00054	11a00003	 movne       r0, r3
  00058	1b000000	 blne        DmaFreeChannel

; 291  : 
; 292  :     // Free RX DMA channel
; 293  :     if (m_hRxDmaChannel != NULL) DmaFreeChannel(m_hRxDmaChannel);

  0005c	e59430a4	 ldr         r3, [r4, #0xA4]
  00060	e3530000	 cmp         r3, #0
  00064	11a00003	 movne       r0, r3
  00068	1b000000	 blne        DmaFreeChannel

; 294  : }

  0006c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$M42169|

			 ENDP  ; |?SDIO_DeinitDMA@CSDIOControllerBase@@QAAXXZ|, CSDIOControllerBase::SDIO_DeinitDMA

	EXPORT	|?SDIO_InitInputDMA@CSDIOControllerBase@@QAAXKK@Z| ; CSDIOControllerBase::SDIO_InitInputDMA
	IMPORT	|GetAddressByDevice|
	IMPORT	|SOCGetSDHCDeviceBySlot|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T42205| DCD	|$LN18@SDIO_InitI|
	DCD	0x40003601
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdhc\base\dma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SDIO_InitInputDMA@CSDIOControllerBase@@QAAXKK@Z| PROC ; CSDIOControllerBase::SDIO_InitInputDMA

; 304  : {

  00000		 |$LN18@SDIO_InitI|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M42202|
  00004	e1a07002	 mov         r7, r2
  00008	e1a08001	 mov         r8, r1
  0000c	e1a05000	 mov         r5, r0

; 305  :     DWORD dwChannel, dwAddr;
; 306  :     if ( m_dwSlot == MMCSLOT_1 ) 

  00010	e5953170	 ldr         r3, [r5, #0x170]
  00014	e3530001	 cmp         r3, #1

; 307  :     {
; 308  :       dwChannel = SDMA_REQ_MMC1_RX;
; 309  :       dwAddr = SDIO_INPUT_DMA_SOURCE1;

  00018	03a00001	 moveq       r0, #1
  0001c	03a0603e	 moveq       r6, #0x3E
  00020	0a000003	 beq         |$LN15@SDIO_InitI|

; 310  :     }
; 311  :     else if ( m_dwSlot == MMCSLOT_2 ) 

  00024	e3530002	 cmp         r3, #2
  00028	1a000027	 bne         |$LN2@SDIO_InitI|

; 312  :     {
; 313  :       dwChannel = SDMA_REQ_MMC2_RX;
; 314  :       dwAddr = SDIO_INPUT_DMA_SOURCE2;

  0002c	e3a00002	 mov         r0, #2
  00030	e3a06030	 mov         r6, #0x30
  00034		 |$LN15@SDIO_InitI|
  00034	eb000000	 bl          SOCGetSDHCDeviceBySlot
  00038	eb000000	 bl          GetAddressByDevice

; 315  :     }
; 316  :     else
; 317  :     {
; 318  :         ASSERT(0);
; 319  :         return;
; 320  :     }
; 321  :     
; 322  :     DmaConfigure (m_hRxDmaChannel,
; 323  :             &RxDmaSettings, dwChannel, m_RxDmaInfo);

  0003c	e59530a0	 ldr         r3, [r5, #0xA0]
  00040	e59f108c	 ldr         r1, [pc, #0x8C]
  00044	e2804e12	 add         r4, r0, #0x12, 28
  00048	e59500a4	 ldr         r0, [r5, #0xA4]
  0004c	e1a02006	 mov         r2, r6
  00050	eb000000	 bl          DmaConfigure

; 324  : 
; 325  :     // set up for Rx buffer as 4 frames
; 326  :     DmaSetElementAndFrameCount (m_RxDmaInfo,
; 327  :              (UINT16)(dwBlkSize/4), 
; 328  :              (UINT16)(dwBlkCnt));

  00054	e59500a0	 ldr         r0, [r5, #0xA0]
  00058	e1a03127	 mov         r3, r7, lsr #2
  0005c	e1a02803	 mov         r2, r3, lsl #16
  00060	e5903014	 ldr         r3, [r0, #0x14]
  00064	e1a02822	 mov         r2, r2, lsr #16
  00068	e1a01808	 mov         r1, r8, lsl #16
  0006c	e5832014	 str         r2, [r3, #0x14]
  00070	e5903014	 ldr         r3, [r0, #0x14]
  00074	e1a01821	 mov         r1, r1, lsr #16
  00078	e5831018	 str         r1, [r3, #0x18]

; 329  :     DmaSetDstBuffer (m_RxDmaInfo,
; 330  :              m_pDmaBuffer,
; 331  :              m_pDmaBufferPhys.LowPart);

  0007c	e59500a0	 ldr         r0, [r5, #0xA0]
  00080	e5951108	 ldr         r1, [r5, #0x108]
  00084	e59530fc	 ldr         r3, [r5, #0xFC]
  00088	e5902014	 ldr         r2, [r0, #0x14]
  0008c	e580100c	 str         r1, [r0, #0xC]
  00090	e5803004	 str         r3, [r0, #4]
  00094	e3520000	 cmp         r2, #0
  00098	15821020	 strne       r1, [r2, #0x20]
  0009c	15903014	 ldrne       r3, [r0, #0x14]
  000a0	15831038	 strne       r1, [r3, #0x38]

; 332  :     DmaSetSrcBuffer(m_RxDmaInfo,
; 333  :              (UINT8 *)&m_pbRegisters->MMCHS_DATA,
; 334  :              dwAddr);

  000a4	e59510a0	 ldr         r1, [r5, #0xA0]
  000a8	e595315c	 ldr         r3, [r5, #0x15C]
  000ac	e5912014	 ldr         r2, [r1, #0x14]
  000b0	e2833e12	 add         r3, r3, #0x12, 28
  000b4	e5813000	 str         r3, [r1]
  000b8	e3520000	 cmp         r2, #0
  000bc	e5814008	 str         r4, [r1, #8]
  000c0	1582401c	 strne       r4, [r2, #0x1C]
  000c4	15913014	 ldrne       r3, [r1, #0x14]
  000c8	15834034	 strne       r4, [r3, #0x34]
  000cc		 |$LN2@SDIO_InitI|

; 335  : 
; 336  : }

  000cc	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN19@SDIO_InitI|
  000d4		 |$LN20@SDIO_InitI|
  000d4	00000000	 DCD         |?RxDmaSettings@@3UDmaConfigInfo_t@@A|
  000d8		 |$M42203|

			 ENDP  ; |?SDIO_InitInputDMA@CSDIOControllerBase@@QAAXKK@Z|, CSDIOControllerBase::SDIO_InitInputDMA

	EXPORT	|?SDIO_StartInputDMA@CSDIOControllerBase@@QAAXXZ| ; CSDIOControllerBase::SDIO_StartInputDMA
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T42220| DCD	|$LN7@SDIO_Start|
	DCD	0x40000600
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdhc\base\dma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SDIO_StartInputDMA@CSDIOControllerBase@@QAAXXZ| PROC ; CSDIOControllerBase::SDIO_StartInputDMA

; 346  : {

  00000		 |$LN7@SDIO_Start|
  00000		 |$M42217|

; 347  :     DmaStart(m_RxDmaInfo);

  00000	e59030a0	 ldr         r3, [r0, #0xA0]
  00004	e5932014	 ldr         r2, [r3, #0x14]
  00008	e5923000	 ldr         r3, [r2]
  0000c	e3833080	 orr         r3, r3, #0x80
  00010	e5823000	 str         r3, [r2]

; 348  : }

  00014	e12fff1e	 bx          lr
  00018		 |$M42218|

			 ENDP  ; |?SDIO_StartInputDMA@CSDIOControllerBase@@QAAXXZ|, CSDIOControllerBase::SDIO_StartInputDMA

	EXPORT	|?SDIO_StopInputDMA@CSDIOControllerBase@@QAAXXZ| ; CSDIOControllerBase::SDIO_StopInputDMA

  00000			 AREA	 |.pdata|, PDATA
|$T42228| DCD	|$LN6@SDIO_StopI|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SDIO_StopInputDMA@CSDIOControllerBase@@QAAXXZ| PROC ; CSDIOControllerBase::SDIO_StopInputDMA

; 359  : {

  00000		 |$LN6@SDIO_StopI|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M42225|

; 360  :     if (m_RxDmaInfo)

  00004	e59030a0	 ldr         r3, [r0, #0xA0]
  00008	e3530000	 cmp         r3, #0

; 361  :     {
; 362  :       DmaStop(m_RxDmaInfo);

  0000c	11a00003	 movne       r0, r3
  00010	1b000000	 blne        DmaStop

; 363  :     }
; 364  : }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$M42226|

			 ENDP  ; |?SDIO_StopInputDMA@CSDIOControllerBase@@QAAXXZ|, CSDIOControllerBase::SDIO_StopInputDMA

	EXPORT	|?SDIO_InitOutputDMA@CSDIOControllerBase@@QAAXKK@Z| ; CSDIOControllerBase::SDIO_InitOutputDMA
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T42262| DCD	|$LN18@SDIO_InitO|
	DCD	0x40003601
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdhc\base\dma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SDIO_InitOutputDMA@CSDIOControllerBase@@QAAXKK@Z| PROC ; CSDIOControllerBase::SDIO_InitOutputDMA

; 374  : {

  00000		 |$LN18@SDIO_InitO|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M42259|
  00004	e1a07002	 mov         r7, r2
  00008	e1a08001	 mov         r8, r1
  0000c	e1a05000	 mov         r5, r0

; 375  :     DWORD dwChannel, dwAddr;
; 376  :     if ( m_dwSlot == MMCSLOT_1 ) 

  00010	e5953170	 ldr         r3, [r5, #0x170]
  00014	e3530001	 cmp         r3, #1

; 377  :     {
; 378  :       dwChannel = SDMA_REQ_MMC1_TX;
; 379  :       dwAddr = SDIO_OUTPUT_DMA_DEST1;

  00018	03a00001	 moveq       r0, #1
  0001c	03a0603d	 moveq       r6, #0x3D
  00020	0a000003	 beq         |$LN15@SDIO_InitO|

; 380  :     }
; 381  :     else if ( m_dwSlot == MMCSLOT_2 ) 

  00024	e3530002	 cmp         r3, #2
  00028	1a000027	 bne         |$LN2@SDIO_InitO|

; 382  :     {
; 383  :       dwChannel = SDMA_REQ_MMC2_TX;
; 384  :       dwAddr = SDIO_OUTPUT_DMA_DEST2;

  0002c	e3a00002	 mov         r0, #2
  00030	e3a0602f	 mov         r6, #0x2F
  00034		 |$LN15@SDIO_InitO|
  00034	eb000000	 bl          SOCGetSDHCDeviceBySlot
  00038	eb000000	 bl          GetAddressByDevice

; 385  :     }
; 386  :     else return;
; 387  :     
; 388  :     DmaConfigure (m_hTxDmaChannel,
; 389  :             &TxDmaSettings, dwChannel, m_TxDmaInfo);

  0003c	e5953098	 ldr         r3, [r5, #0x98]
  00040	e59f108c	 ldr         r1, [pc, #0x8C]
  00044	e2804e12	 add         r4, r0, #0x12, 28
  00048	e595009c	 ldr         r0, [r5, #0x9C]
  0004c	e1a02006	 mov         r2, r6
  00050	eb000000	 bl          DmaConfigure

; 390  :     
; 391  :     DmaSetElementAndFrameCount (m_TxDmaInfo,
; 392  :              (UINT16)(dwBlkSize/4), 
; 393  :              (UINT16)(dwBlkCnt));

  00054	e5950098	 ldr         r0, [r5, #0x98]
  00058	e1a03127	 mov         r3, r7, lsr #2
  0005c	e1a02803	 mov         r2, r3, lsl #16
  00060	e5903014	 ldr         r3, [r0, #0x14]
  00064	e1a02822	 mov         r2, r2, lsr #16
  00068	e1a01808	 mov         r1, r8, lsl #16
  0006c	e5832014	 str         r2, [r3, #0x14]
  00070	e5903014	 ldr         r3, [r0, #0x14]
  00074	e1a01821	 mov         r1, r1, lsr #16
  00078	e5831018	 str         r1, [r3, #0x18]

; 394  :     DmaSetSrcBuffer (m_TxDmaInfo,
; 395  :               m_pDmaBuffer,
; 396  :               m_pDmaBufferPhys.LowPart);

  0007c	e5950098	 ldr         r0, [r5, #0x98]
  00080	e5951108	 ldr         r1, [r5, #0x108]
  00084	e59530fc	 ldr         r3, [r5, #0xFC]
  00088	e5902014	 ldr         r2, [r0, #0x14]
  0008c	e5801008	 str         r1, [r0, #8]
  00090	e5803000	 str         r3, [r0]
  00094	e3520000	 cmp         r2, #0
  00098	1582101c	 strne       r1, [r2, #0x1C]
  0009c	15903014	 ldrne       r3, [r0, #0x14]
  000a0	15831034	 strne       r1, [r3, #0x34]

; 397  :     DmaSetDstBuffer(m_TxDmaInfo,
; 398  :               (UINT8 *)&m_pbRegisters->MMCHS_DATA,
; 399  :               dwAddr);

  000a4	e5951098	 ldr         r1, [r5, #0x98]
  000a8	e595315c	 ldr         r3, [r5, #0x15C]
  000ac	e5912014	 ldr         r2, [r1, #0x14]
  000b0	e2833e12	 add         r3, r3, #0x12, 28
  000b4	e5813004	 str         r3, [r1, #4]
  000b8	e3520000	 cmp         r2, #0
  000bc	e581400c	 str         r4, [r1, #0xC]
  000c0	15824020	 strne       r4, [r2, #0x20]
  000c4	15913014	 ldrne       r3, [r1, #0x14]
  000c8	15834038	 strne       r4, [r3, #0x38]
  000cc		 |$LN2@SDIO_InitO|

; 400  : }

  000cc	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN19@SDIO_InitO|
  000d4		 |$LN20@SDIO_InitO|
  000d4	00000000	 DCD         |?TxDmaSettings@@3UDmaConfigInfo_t@@A|
  000d8		 |$M42260|

			 ENDP  ; |?SDIO_InitOutputDMA@CSDIOControllerBase@@QAAXKK@Z|, CSDIOControllerBase::SDIO_InitOutputDMA

	EXPORT	|?SDIO_StartOutputDMA@CSDIOControllerBase@@QAAXXZ| ; CSDIOControllerBase::SDIO_StartOutputDMA
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T42277| DCD	|$LN7@SDIO_Start@2|
	DCD	0x40000600
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdhc\base\dma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SDIO_StartOutputDMA@CSDIOControllerBase@@QAAXXZ| PROC ; CSDIOControllerBase::SDIO_StartOutputDMA

; 410  : {

  00000		 |$LN7@SDIO_Start@2|
  00000		 |$M42274|

; 411  :     DmaStart(m_TxDmaInfo);

  00000	e5903098	 ldr         r3, [r0, #0x98]
  00004	e5932014	 ldr         r2, [r3, #0x14]
  00008	e5923000	 ldr         r3, [r2]
  0000c	e3833080	 orr         r3, r3, #0x80
  00010	e5823000	 str         r3, [r2]

; 412  : }

  00014	e12fff1e	 bx          lr
  00018		 |$M42275|

			 ENDP  ; |?SDIO_StartOutputDMA@CSDIOControllerBase@@QAAXXZ|, CSDIOControllerBase::SDIO_StartOutputDMA

	EXPORT	|?SDIO_StopOutputDMA@CSDIOControllerBase@@QAAXXZ| ; CSDIOControllerBase::SDIO_StopOutputDMA

  00000			 AREA	 |.pdata|, PDATA
|$T42285| DCD	|$LN6@SDIO_StopO|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SDIO_StopOutputDMA@CSDIOControllerBase@@QAAXXZ| PROC ; CSDIOControllerBase::SDIO_StopOutputDMA

; 423  : {

  00000		 |$LN6@SDIO_StopO|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M42282|

; 424  :     if (m_TxDmaInfo)

  00004	e5903098	 ldr         r3, [r0, #0x98]
  00008	e3530000	 cmp         r3, #0

; 425  :     {
; 426  :       DmaStop(m_TxDmaInfo);

  0000c	11a00003	 movne       r0, r3
  00010	1b000000	 blne        DmaStop

; 427  :     }
; 428  : }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$M42283|

			 ENDP  ; |?SDIO_StopOutputDMA@CSDIOControllerBase@@QAAXXZ|, CSDIOControllerBase::SDIO_StopOutputDMA

	EXPORT	|?DumpDMARegs@CSDIOControllerBase@@QAAXH@Z| ; CSDIOControllerBase::DumpDMARegs

  00000			 AREA	 |.pdata|, PDATA
|$T42292| DCD	|$LN5@DumpDMAReg|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DumpDMARegs@CSDIOControllerBase@@QAAXH@Z| PROC ; CSDIOControllerBase::DumpDMARegs

; 431  : {

  00000		 |$LN5@DumpDMAReg|
  00000		 |$M42289|

; 432  : 	UNREFERENCED_PARAMETER(inCh);
; 433  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M42290|

			 ENDP  ; |?DumpDMARegs@CSDIOControllerBase@@QAAXH@Z|, CSDIOControllerBase::DumpDMARegs

	END
