; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\PM\CONSTRAINTADAPTERS\DVFSCONSTRAINT\dvfsconstraint.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??2@YAPAXIPAX@Z|			; operator new
; File c:\wince600\public\common\sdk\inc\new

  00000			 AREA	 |.pdata|, PDATA
|$T40996| DCD	|$LN5@operator|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??2@YAPAXIPAX@Z| PROC			; operator new

; 73   :     {return (_P); }

  00000		 |$LN5@operator|
  00000		 |$M40993|
  00000	e1a00001	 mov         r0, r1
  00004	e12fff1e	 bx          lr
  00008		 |$M40994|

			 ENDP  ; |??2@YAPAXIPAX@Z|, operator new

	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.bss|, NOINIT
|s_OpmInfo| %	0x9c
|s_OpmInfo| %	0x9c
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\constraintadapters\dvfsconstraint\dvfsconstraint.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T41003| DCD	|$LN5@Lock|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@@YAXXZ| PROC			; Lock

; 91   : {

  00000		 |$LN5@Lock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41000|

; 92   :     EnterCriticalSection(&s_OpmInfo.cs);

  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          EnterCriticalSection

; 93   : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@Lock|
  00014		 |$LN7@Lock|
  00014	00000000	 DCD         |s_OpmInfo|
  00018		 |$M41001|

			 ENDP  ; |?Lock@@YAXXZ|, Lock

	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T41012| DCD	|$LN5@Unlock|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Unlock@@YAXXZ| PROC			; Unlock

; 104  : {

  00000		 |$LN5@Unlock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41009|

; 105  :     LeaveCriticalSection(&s_OpmInfo.cs);

  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          LeaveCriticalSection

; 106  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@Unlock|
  00014		 |$LN7@Unlock|
  00014	00000000	 DCD         |s_OpmInfo|
  00018		 |$M41010|

			 ENDP  ; |?Unlock@@YAXXZ|, Unlock

	EXPORT	|?IsHex@@YAHG@Z|			; IsHex

  00000			 AREA	 |.pdata|, PDATA
|$T41025| DCD	|$LN9@IsHex|
	DCD	0x40001000
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsHex@@YAHG@Z| PROC			; IsHex

; 116  : {

  00000		 |$LN9@IsHex|
  00000		 |$M41022|

; 117  :     if (c >= _T('0') && c <= _T('9')) return TRUE;

  00000	e3500030	 cmp         r0, #0x30
  00004	3a000003	 bcc         |$LN3@IsHex|
  00008	e3500039	 cmp         r0, #0x39
  0000c	8a000001	 bhi         |$LN3@IsHex|
  00010		 |$LN6@IsHex|
  00010	e3a00001	 mov         r0, #1

; 121  : }

  00014	e12fff1e	 bx          lr
  00018		 |$LN3@IsHex|

; 118  :     if (c >= _T('a') && c <= _T('f')) return TRUE;

  00018	e3500061	 cmp         r0, #0x61
  0001c	3a000001	 bcc         |$LN2@IsHex|
  00020	e3500066	 cmp         r0, #0x66
  00024	9afffff9	 bls         |$LN6@IsHex|
  00028		 |$LN2@IsHex|

; 119  :     if (c >= _T('A') && c <= _T('F')) return TRUE;

  00028	e3500041	 cmp         r0, #0x41
  0002c	3a000001	 bcc         |$LN1@IsHex|
  00030	e3500046	 cmp         r0, #0x46
  00034	9afffff5	 bls         |$LN6@IsHex|
  00038		 |$LN1@IsHex|

; 120  :     return FALSE;

  00038	e3a00000	 mov         r0, #0

; 121  : }

  0003c	e12fff1e	 bx          lr
  00040		 |$M41023|

			 ENDP  ; |?IsHex@@YAHG@Z|, IsHex

	EXPORT	|?ParseOppToOpmMap@@YAHPBGKPAKK@Z|	; ParseOppToOpmMap
	IMPORT	|wcstoul|

  00000			 AREA	 |.pdata|, PDATA
|$T41049| DCD	|$LN26@ParseOppTo|
	DCD	0x40003b02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ParseOppToOpmMap@@YAHPBGKPAKK@Z| PROC ; ParseOppToOpmMap

; 134  : {

  00000		 |$LN26@ParseOppTo|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M41046|
  00008	e1a0b003	 mov         r11, r3
  0000c	e58d2000	 str         r2, [sp]
  00010	e1b0a001	 movs        r10, r1
  00014	e1a08000	 mov         r8, r0

; 135  :     BOOL rc = FALSE;
; 136  :     DWORD count;
; 137  :     DWORD nStartPos = 0;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3004	 str         r3, [sp, #4]
  00020	e3a07000	 mov         r7, #0

; 138  :     DWORD nEndPos = 0;

  00024	e3a05000	 mov         r5, #0

; 139  :     DWORD nOppIndex = 0;

  00028	e3a09000	 mov         r9, #0

; 140  :     
; 141  :     // get end of string
; 142  :     while (nEndPos < nLen && nOppIndex < nMaxIndex)

  0002c	0a000029	 beq         |$LN22@ParseOppTo|
  00030		 |$LL15@ParseOppTo|
  00030	e159000b	 cmp         r9, r11
  00034	2a000027	 bcs         |$LN22@ParseOppTo|

; 143  :         {
; 144  :         count = 0;

  00038	e3a04000	 mov         r4, #0
  0003c	e0886085	 add         r6, r8, r5, lsl #1
  00040		 |$LL13@ParseOppTo|

; 145  :         do
; 146  :             {
; 147  :             if (IsHex(szOpp[nEndPos]))

  00040	e1d600b0	 ldrh        r0, [r6]
  00044	eb000000	 bl          |?IsHex@@YAHG@Z|
  00048	e3500000	 cmp         r0, #0
  0004c	0a000009	 beq         |$LN10@ParseOppTo|

; 148  :                 {
; 149  :                 count++;

  00050	e2844001	 add         r4, r4, #1

; 155  :                 {
; 156  :                 // got end marker
; 157  :                 break;
; 158  :                 }
; 159  :             else
; 160  :                 {
; 161  :                 // unexpected character
; 162  :                 goto cleanUp;
; 163  :                 }
; 164  : 
; 165  :             // check for too long hex values
; 166  :             if (count > 8 || count == 0) goto cleanUp;

  00054	e3540008	 cmp         r4, #8
  00058	e2855001	 add         r5, r5, #1
  0005c	e2866002	 add         r6, r6, #2
  00060	8a00001d	 bhi         |$cleanUp$39896|
  00064	e3540000	 cmp         r4, #0
  00068	0a00001b	 beq         |$cleanUp$39896|

; 167  :             }
; 168  :             while (nEndPos < nLen);

  0006c	e155000a	 cmp         r5, r10
  00070	3afffff2	 bcc         |$LL13@ParseOppTo|
  00074	ea000007	 b           |$LN11@ParseOppTo|
  00078		 |$LN10@ParseOppTo|

; 150  :                 nEndPos++;
; 151  :                 }
; 152  :             else if (szOpp[nEndPos] == _T(',') ||
; 153  :                      szOpp[nEndPos] == _T(' ') ||
; 154  :                      szOpp[nEndPos] == _T('\0'))

  00078	e0883085	 add         r3, r8, r5, lsl #1
  0007c	e1d330b0	 ldrh        r3, [r3]
  00080	e353002c	 cmp         r3, #0x2C
  00084	0a000003	 beq         |$LN11@ParseOppTo|
  00088	e3530020	 cmp         r3, #0x20
  0008c	0a000001	 beq         |$LN11@ParseOppTo|
  00090	e3530000	 cmp         r3, #0
  00094	1a000010	 bne         |$cleanUp$39896|
  00098		 |$LN11@ParseOppTo|

; 169  : 
; 170  :         // check for double NULL
; 171  :         if (count == 0) break;

  00098	e3540000	 cmp         r4, #0
  0009c	0a00000d	 beq         |$LN22@ParseOppTo|

; 172  : 
; 173  :         rgOppMap[nOppIndex] = _tcstoul(szOpp + nStartPos, NULL, 16);

  000a0	e59d3004	 ldr         r3, [sp, #4]
  000a4	e3a02010	 mov         r2, #0x10
  000a8	e3a01000	 mov         r1, #0
  000ac	e0880083	 add         r0, r8, r3, lsl #1
  000b0	eb000000	 bl          wcstoul

; 174  : 
; 175  :         // update for next class identifier
; 176  :         nEndPos++;

  000b4	e59d3000	 ldr         r3, [sp]
  000b8	e2855001	 add         r5, r5, #1

; 177  :         nStartPos = nEndPos;
; 178  :         nOppIndex++;

  000bc	e2899001	 add         r9, r9, #1
  000c0	e4830004	 str         r0, [r3], #4
  000c4	e155000a	 cmp         r5, r10
  000c8	e58d3000	 str         r3, [sp]
  000cc	e1a03005	 mov         r3, r5
  000d0	e58d3004	 str         r3, [sp, #4]
  000d4	3affffd5	 bcc         |$LL15@ParseOppTo|
  000d8		 |$LN22@ParseOppTo|

; 179  :         }
; 180  : 
; 181  :     rc = TRUE;

  000d8	e3a07001	 mov         r7, #1
  000dc		 |$cleanUp$39896|

; 182  :     
; 183  : cleanUp:
; 184  :     return rc;
; 185  : }

  000dc	e1a00007	 mov         r0, r7
  000e0	e28dd008	 add         sp, sp, #8
  000e4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000e8	e12fff1e	 bx          lr
  000ec		 |$M41047|

			 ENDP  ; |?ParseOppToOpmMap@@YAHPBGKPAKK@Z|, ParseOppToOpmMap

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?DVFS_InitConstraint@@YAPAXPBG@Z|	; DVFS_InitConstraint
	EXPORT	|??_C@_1GC@MFOCLLAG@?$AAD?$AAV?$AAF?$AAS?$AA_?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@MCEJPKI@?$AAD?$AAV?$AAF?$AAS?$AA_?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAo?$AAp?$AAm?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@BFINDJLA@?$AAO?$AAp?$AAm?$AAF?$AAl?$AAo?$AAo?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@JLOAIBPJ@?$AAC?$AAO?$AAR?$AAE?$AA1?$AAM?$AAa?$AAp?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@CKJNKENB@?$AAM?$AAP?$AAU?$AA1?$AAM?$AAa?$AAp?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@LAODCCDA@?$AAO?$AAp?$AAm?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@IDCKAMHD@?$AAO?$AAp?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@FBGIFOCP@?$AA?2?$AA3?$AA5?$AA1?$AA7?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LKEIENOA@?$AA?2?$AA3?$AA5?$AAx?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@PIGNEKJN@?$AA?2?$AA3?$AA7?$AAx?$AAx?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|RegCloseKey|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|KernelIoControl|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|wcscat|
	IMPORT	|wcscpy|
	IMPORT	|memset|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T41084| DCD	|$LN38@DVFS_InitC|
	DCD	0xc000bb03

  00000			 AREA	 |.xdata|, DATA
|$T41080| DCD	0xffffffe8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@MFOCLLAG@?$AAD?$AAV?$AAF?$AAS?$AA_?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd@| DCB "D"
	DCB	0x0, "V", 0x0, "F", 0x0, "S", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "U", 0x0, "n", 0x0, "s", 0x0, "u"
	DCB	0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "C", 0x0, "P", 0x0, "U", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "m", 0x0, "i", 0x0, "l", 0x0, "y"
	DCB	0x0, "=", 0x0, "(", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@MCEJPKI@?$AAD?$AAV?$AAF?$AAS?$AA_?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAo?$AAp?$AAm?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$DN@| DCB "D"
	DCB	0x0, "V", 0x0, "F", 0x0, "S", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "m", 0x0, "C"
	DCB	0x0, "u", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "o"
	DCB	0x0, "p", 0x0, "m", 0x0, "C", 0x0, "e", 0x0, "i", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "m", 0x0, "F"
	DCB	0x0, "l", 0x0, "o", 0x0, "o", 0x0, "r", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@BFINDJLA@?$AAO?$AAp?$AAm?$AAF?$AAl?$AAo?$AAo?$AAr?$AA?$AA@| DCB "O"
	DCB	0x0, "p", 0x0, "m", 0x0, "F", 0x0, "l", 0x0, "o", 0x0, "o"
	DCB	0x0, "r", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@JLOAIBPJ@?$AAC?$AAO?$AAR?$AAE?$AA1?$AAM?$AAa?$AAp?$AA?$AA@| DCB "C"
	DCB	0x0, "O", 0x0, "R", 0x0, "E", 0x0, "1", 0x0, "M", 0x0, "a"
	DCB	0x0, "p", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@CKJNKENB@?$AAM?$AAP?$AAU?$AA1?$AAM?$AAa?$AAp?$AA?$AA@| DCB "M", 0x0
	DCB	"P", 0x0, "U", 0x0, "1", 0x0, "M", 0x0, "a", 0x0, "p", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@LAODCCDA@?$AAO?$AAp?$AAm?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$AA@| DCB "O"
	DCB	0x0, "p", 0x0, "m", 0x0, "C", 0x0, "e", 0x0, "i", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@IDCKAMHD@?$AAO?$AAp?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$AA@| DCB "O", 0x0
	DCB	"p", 0x0, "m", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@FBGIFOCP@?$AA?2?$AA3?$AA5?$AA1?$AA7?$AA?$AA@| DCB "\\", 0x0, "3"
	DCB	0x0, "5", 0x0, "1", 0x0, "7", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LKEIENOA@?$AA?2?$AA3?$AA5?$AAx?$AAx?$AA?$AA@| DCB "\\", 0x0, "3"
	DCB	0x0, "5", 0x0, "x", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@PIGNEKJN@?$AA?2?$AA3?$AA7?$AAx?$AAx?$AA?$AA@| DCB "\\", 0x0, "3"
	DCB	0x0, "7", 0x0, "x", 0x0, "x", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T41080|

  00008		 |?DVFS_InitConstraint@@YAPAXPBG@Z| PROC ; DVFS_InitConstraint

; 359  : {

  00008		 |$LN38@DVFS_InitC|
  00008	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  0000c	e59fc2dc	 ldr         r12, [pc, #0x2DC]
  00010	e08dd00c	 add         sp, sp, r12
  00014		 |$M41081|
  00014	e1a04000	 mov         r4, r0
  00018	e59f32cc	 ldr         r3, [pc, #0x2CC]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3428	 str         r3, [sp, #0x428]

; 360  :     LONG code;
; 361  :     DWORD opm;
; 362  :     DWORD size;
; 363  :     HANDLE rc = NULL;
; 364  :     HKEY hKey = NULL;
; 365  :     _TCHAR szBuffer[MAX_PATH];
; 366  :     _TCHAR szRegKey[MAX_PATH];
; 367  :     DWORD cpuFamily = CPU_FAMILY_OMAP35XX;
; 368  :     
; 369  :     // Initialize data structure
; 370  :     memset(&s_OpmInfo, 0, sizeof(DVFSConstraintInfo_t));

  00024	e59f52bc	 ldr         r5, [pc, #0x2BC]
  00028	e3a03000	 mov         r3, #0
  0002c	e3a0e000	 mov         lr, #0
  00030	e1a00005	 mov         r0, r5
  00034	e3a0209c	 mov         r2, #0x9C
  00038	e3a01000	 mov         r1, #0
  0003c	e3a06000	 mov         r6, #0
  00040	e58d300c	 str         r3, [sp, #0xC]
  00044	e58de014	 str         lr, [sp, #0x14]
  00048	eb000000	 bl          memset

; 371  :     s_OpmInfo.opmCeiling = kOpm9;

  0004c	e3a03009	 mov         r3, #9
  00050	e585308c	 str         r3, [r5, #0x8C]

; 372  :     s_OpmInfo.opmFloor = kOpm0;    

  00054	e3a03000	 mov         r3, #0

; 373  :     s_OpmInfo.idxForce = (DWORD) -1;
; 374  :     s_OpmInfo.opmCurrent = (DWORD) kOpmUndefined;
; 375  : 
; 376  :     KernelIoControl(
; 377  :         IOCTL_HAL_GET_CPUFAMILY,
; 378  :         &cpuFamily,
; 379  :         sizeof(DWORD),
; 380  :         &cpuFamily,
; 381  :         sizeof(DWORD),
; 382  :         NULL
; 383  :         );

  00058	e5853090	 str         r3, [r5, #0x90]
  0005c	e3e03000	 mvn         r3, #0
  00060	e59f027c	 ldr         r0, [pc, #0x27C]
  00064	e5853094	 str         r3, [r5, #0x94]
  00068	e5853098	 str         r3, [r5, #0x98]
  0006c	e3a0e000	 mov         lr, #0
  00070	e3a07004	 mov         r7, #4
  00074	e28d3014	 add         r3, sp, #0x14
  00078	e3a02004	 mov         r2, #4
  0007c	e28d1014	 add         r1, sp, #0x14
  00080	e58de004	 str         lr, [sp, #4]
  00084	e58d7000	 str         r7, [sp]
  00088	eb000000	 bl          KernelIoControl

; 384  : 
; 385  :     _tcscpy(szRegKey, szContext);

  0008c	e1a01004	 mov         r1, r4
  00090	e28d0018	 add         r0, sp, #0x18
  00094	eb000000	 bl          wcscpy

; 386  : 
; 387  :     if( cpuFamily == CPU_FAMILY_DM37XX)

  00098	e59d1014	 ldr         r1, [sp, #0x14]
  0009c	e3510001	 cmp         r1, #1

; 388  :     {
; 389  :         _tcscat(szRegKey, _T("\\37xx"));

  000a0	059f1238	 ldreq       r1, [pc, #0x238]
  000a4	0a000005	 beq         |$LN35@DVFS_InitC|

; 390  :     }
; 391  :     else if( cpuFamily == CPU_FAMILY_OMAP35XX)

  000a8	e3510000	 cmp         r1, #0

; 392  :     {
; 393  :         _tcscat(szRegKey, _T("\\35xx"));

  000ac	059f1228	 ldreq       r1, [pc, #0x228]
  000b0	0a000002	 beq         |$LN35@DVFS_InitC|

; 394  :     }
; 395  :     else if( cpuFamily == CPU_FAMILY_AM35XX)

  000b4	e3510002	 cmp         r1, #2
  000b8	1a000072	 bne         |$LN19@DVFS_InitC|

; 396  :     {
; 397  :         _tcscat(szRegKey, _T("\\3517"));

  000bc	e59f1214	 ldr         r1, [pc, #0x214]
  000c0		 |$LN35@DVFS_InitC|
  000c0	e28d0018	 add         r0, sp, #0x18
  000c4	eb000000	 bl          wcscat

; 402  :         goto cleanUp;
; 403  :     }
; 404  : 	 
; 405  :     // read registry to get ceiling value    
; 406  :     code = ::RegOpenKeyEx(HKEY_LOCAL_MACHINE, szRegKey, 0, 0, &hKey);

  000c8	e28d300c	 add         r3, sp, #0xC
  000cc	e58d3000	 str         r3, [sp]
  000d0	e3a03000	 mov         r3, #0
  000d4	e3a02000	 mov         r2, #0
  000d8	e28d1018	 add         r1, sp, #0x18
  000dc	e3a0010a	 mov         r0, #0xA, 2
  000e0	eb000000	 bl          RegOpenKeyExW
  000e4	e3500000	 cmp         r0, #0

; 407  :     if (code != ERROR_SUCCESS) goto cleanUp;

  000e8	1a000068	 bne         |$cleanUp$40058|

; 408  : 
; 409  :     // get default opm
; 410  :     size = sizeof(Dvfs_OperatingMode_e);
; 411  :     code = RegQueryValueEx(hKey, REGEDIT_DVFS_DEFAULTOPM, 0, 0, 
; 412  :             (BYTE*)&opm, &size
; 413  :             );

  000ec	e59f11e0	 ldr         r1, [pc, #0x1E0]
  000f0	e59d000c	 ldr         r0, [sp, #0xC]
  000f4	e3a07004	 mov         r7, #4
  000f8	e28de008	 add         lr, sp, #8
  000fc	e28d4010	 add         r4, sp, #0x10
  00100	e3a03000	 mov         r3, #0
  00104	e3a02000	 mov         r2, #0
  00108	e58d7008	 str         r7, [sp, #8]
  0010c	e58de004	 str         lr, [sp, #4]
  00110	e58d4000	 str         r4, [sp]
  00114	eb000000	 bl          RegQueryValueExW
  00118	e3500000	 cmp         r0, #0

; 414  :     if (code != ERROR_SUCCESS) goto cleanUp;

  0011c	1a00005b	 bne         |$cleanUp$40058|

; 415  :     s_OpmInfo.opmCurrent= opm;

  00120	e59d3010	 ldr         r3, [sp, #0x10]

; 416  :     
; 417  :     // get ceiling value
; 418  :     size = sizeof(Dvfs_OperatingMode_e);
; 419  :     code = RegQueryValueEx(hKey, REGEDIT_DVFS_CEILING, 0, 0, 
; 420  :             (BYTE*)&opm, &size
; 421  :             );

  00124	e59f11a4	 ldr         r1, [pc, #0x1A4]
  00128	e59d000c	 ldr         r0, [sp, #0xC]
  0012c	e5853098	 str         r3, [r5, #0x98]
  00130	e3a07004	 mov         r7, #4
  00134	e28de008	 add         lr, sp, #8
  00138	e28d4010	 add         r4, sp, #0x10
  0013c	e3a03000	 mov         r3, #0
  00140	e3a02000	 mov         r2, #0
  00144	e58d7008	 str         r7, [sp, #8]
  00148	e58de004	 str         lr, [sp, #4]
  0014c	e58d4000	 str         r4, [sp]
  00150	eb000000	 bl          RegQueryValueExW
  00154	e3500000	 cmp         r0, #0

; 422  :     if (code != ERROR_SUCCESS) goto cleanUp;

  00158	1a00004c	 bne         |$cleanUp$40058|

; 423  :     s_OpmInfo.opmCeiling = min(opm, s_OpmInfo.opmCeiling);

  0015c	e595308c	 ldr         r3, [r5, #0x8C]
  00160	e59d2010	 ldr         r2, [sp, #0x10]

; 424  : 
; 425  :     // get Opp --> Opm map for mpu1
; 426  :     size = sizeof(szBuffer);
; 427  :     code = RegQueryValueEx(hKey, REGEDIT_DVFS_MPU1, 0, 0, 
; 428  :             (BYTE*)szBuffer, &size
; 429  :             );

  00164	e59f1160	 ldr         r1, [pc, #0x160]
  00168	e59d000c	 ldr         r0, [sp, #0xC]
  0016c	e1520003	 cmp         r2, r3
  00170	3585208c	 strcc       r2, [r5, #0x8C]
  00174	e3a07f82	 mov         r7, #0x82, 30
  00178	e28de008	 add         lr, sp, #8
  0017c	e28d4e22	 add         r4, sp, #0x22, 28
  00180	e3a02000	 mov         r2, #0
  00184	e3a03000	 mov         r3, #0
  00188	e58d7008	 str         r7, [sp, #8]
  0018c	e58de004	 str         lr, [sp, #4]
  00190	e58d4000	 str         r4, [sp]
  00194	eb000000	 bl          RegQueryValueExW
  00198	e3500000	 cmp         r0, #0

; 430  :     if (code != ERROR_SUCCESS) goto cleanUp;

  0019c	1a00003b	 bne         |$cleanUp$40058|

; 431  :     if (ParseOppToOpmMap(szBuffer, size/sizeof(_TCHAR), 
; 432  :             s_OpmInfo.rgVddMPU1, kOpmCount) == FALSE
; 433  :             )

  001a0	e59d1008	 ldr         r1, [sp, #8]
  001a4	e3a0300a	 mov         r3, #0xA
  001a8	e2852014	 add         r2, r5, #0x14
  001ac	e1a010a1	 mov         r1, r1, lsr #1
  001b0	e28d0e22	 add         r0, sp, #0x22, 28
  001b4	eb000000	 bl          |?ParseOppToOpmMap@@YAHPBGKPAKK@Z|
  001b8	e3500000	 cmp         r0, #0
  001bc	0a000033	 beq         |$cleanUp$40058|

; 434  :         {
; 435  :         goto cleanUp;
; 436  :         }
; 437  : 
; 438  :     // get Opp --> Opm map for core1
; 439  :     size = sizeof(szBuffer);
; 440  :     code = RegQueryValueEx(hKey, REGEDIT_DVFS_CORE1, 0, 0, 
; 441  :             (BYTE*)szBuffer, &size
; 442  :             );

  001c0	e59f1100	 ldr         r1, [pc, #0x100]
  001c4	e59d000c	 ldr         r0, [sp, #0xC]
  001c8	e3a07f82	 mov         r7, #0x82, 30
  001cc	e28de008	 add         lr, sp, #8
  001d0	e28d4e22	 add         r4, sp, #0x22, 28
  001d4	e3a03000	 mov         r3, #0
  001d8	e3a02000	 mov         r2, #0
  001dc	e58d7008	 str         r7, [sp, #8]
  001e0	e58de004	 str         lr, [sp, #4]
  001e4	e58d4000	 str         r4, [sp]
  001e8	eb000000	 bl          RegQueryValueExW
  001ec	e3500000	 cmp         r0, #0

; 443  :     if (code != ERROR_SUCCESS) goto cleanUp;

  001f0	1a000026	 bne         |$cleanUp$40058|

; 444  :     if (ParseOppToOpmMap(szBuffer, size/sizeof(_TCHAR), 
; 445  :             s_OpmInfo.rgVddCORE1, kOpmCount) == FALSE
; 446  :             )

  001f4	e59d1008	 ldr         r1, [sp, #8]
  001f8	e3a0300a	 mov         r3, #0xA
  001fc	e285203c	 add         r2, r5, #0x3C
  00200	e1a010a1	 mov         r1, r1, lsr #1
  00204	e28d0e22	 add         r0, sp, #0x22, 28
  00208	eb000000	 bl          |?ParseOppToOpmMap@@YAHPBGKPAKK@Z|
  0020c	e3500000	 cmp         r0, #0
  00210	0a00001e	 beq         |$cleanUp$40058|

; 447  :         {
; 448  :         goto cleanUp;
; 449  :         }
; 450  : 
; 451  :     // get floor value
; 452  :     size = sizeof(Dvfs_OperatingMode_e);
; 453  :     code = RegQueryValueEx(hKey, REGEDIT_DVFS_FLOOR, 0, 0, 
; 454  :             (BYTE*)&opm, &size
; 455  :             );

  00214	e59f10a8	 ldr         r1, [pc, #0xA8]
  00218	e59d000c	 ldr         r0, [sp, #0xC]
  0021c	e3a06004	 mov         r6, #4
  00220	e28de008	 add         lr, sp, #8
  00224	e28d4010	 add         r4, sp, #0x10
  00228	e3a03000	 mov         r3, #0
  0022c	e3a02000	 mov         r2, #0
  00230	e58d6008	 str         r6, [sp, #8]
  00234	e58de004	 str         lr, [sp, #4]
  00238	e58d4000	 str         r4, [sp]
  0023c	eb000000	 bl          RegQueryValueExW
  00240	e595208c	 ldr         r2, [r5, #0x8C]
  00244	e3500000	 cmp         r0, #0

; 456  :     if (code == ERROR_SUCCESS)

  00248	1a000006	 bne         |$LN34@DVFS_InitC|

; 457  :         {
; 458  :         s_OpmInfo.opmFloor = min(s_OpmInfo.opmCeiling, opm);

  0024c	e59d3010	 ldr         r3, [sp, #0x10]
  00250	e1520003	 cmp         r2, r3
  00254	31a03002	 movcc       r3, r2
  00258	35852090	 strcc       r2, [r5, #0x90]
  0025c	3a000002	 bcc         |$LN31@DVFS_InitC|
  00260	e5853090	 str         r3, [r5, #0x90]
  00264	ea000000	 b           |$LN31@DVFS_InitC|
  00268		 |$LN34@DVFS_InitC|
  00268	e5953090	 ldr         r3, [r5, #0x90]
  0026c		 |$LN31@DVFS_InitC|

; 459  :         }
; 460  : 
; 461  :     RETAILMSG(1,(L"DVFS_InitConstraint: opmCurrent=%d, opmCeiling=%d, opmFloor=%d", 
; 462  : 		s_OpmInfo.opmCurrent,
; 463  : 		s_OpmInfo.opmCeiling,
; 464  : 		s_OpmInfo.opmFloor
; 465  : 		));

  0026c	e5951098	 ldr         r1, [r5, #0x98]
  00270	e59f0048	 ldr         r0, [pc, #0x48]
  00274	eb000000	 bl          NKDbgPrintfW

; 466  : 
; 467  :     InitializeCriticalSection(&s_OpmInfo.cs);

  00278	e1a00005	 mov         r0, r5
  0027c	eb000000	 bl          InitializeCriticalSection

; 468  :     
; 469  :     rc = (HANDLE)&s_OpmInfo;

  00280	e1a06005	 mov         r6, r5
  00284	ea000001	 b           |$cleanUp$40058|
  00288		 |$LN19@DVFS_InitC|

; 398  :     }
; 399  :     else
; 400  :     {
; 401  :         RETAILMSG(ZONE_ERROR,(L"DVFS_InitConstraint: Unsupported CPU family=(%x)", cpuFamily));

  00288	e59f002c	 ldr         r0, [pc, #0x2C]
  0028c	eb000000	 bl          NKDbgPrintfW
  00290		 |$cleanUp$40058|

; 470  : 
; 471  : cleanUp:
; 472  :     if (hKey != NULL) 

  00290	e59d000c	 ldr         r0, [sp, #0xC]
  00294	e3500000	 cmp         r0, #0

; 473  :         RegCloseKey(hKey);

  00298	1b000000	 blne        RegCloseKey

; 474  :     return rc;

  0029c	e59d0428	 ldr         r0, [sp, #0x428]
  002a0	eb000000	 bl          __security_check_cookie

; 475  : } 

  002a4	e1a00006	 mov         r0, r6
  002a8	e3a0cb01	 mov         r12, #1, 22
  002ac	e38cc02c	 orr         r12, r12, #0x2C
  002b0	e08dd00c	 add         sp, sp, r12
  002b4	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  002b8	e12fff1e	 bx          lr
  002bc		 |$LN39@DVFS_InitC|
  002bc		 |$LN40@DVFS_InitC|
  002bc	00000000	 DCD         |??_C@_1GC@MFOCLLAG@?$AAD?$AAV?$AAF?$AAS?$AA_?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd@|
  002c0		 |$LN41@DVFS_InitC|
  002c0	00000000	 DCD         |??_C@_1HO@MCEJPKI@?$AAD?$AAV?$AAF?$AAS?$AA_?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAo?$AAp?$AAm?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$DN@|
  002c4		 |$LN42@DVFS_InitC|
  002c4	00000000	 DCD         |??_C@_1BC@BFINDJLA@?$AAO?$AAp?$AAm?$AAF?$AAl?$AAo?$AAo?$AAr?$AA?$AA@|
  002c8		 |$LN43@DVFS_InitC|
  002c8	00000000	 DCD         |??_C@_1BC@JLOAIBPJ@?$AAC?$AAO?$AAR?$AAE?$AA1?$AAM?$AAa?$AAp?$AA?$AA@|
  002cc		 |$LN44@DVFS_InitC|
  002cc	00000000	 DCD         |??_C@_1BA@CKJNKENB@?$AAM?$AAP?$AAU?$AA1?$AAM?$AAa?$AAp?$AA?$AA@|
  002d0		 |$LN45@DVFS_InitC|
  002d0	00000000	 DCD         |??_C@_1BG@LAODCCDA@?$AAO?$AAp?$AAm?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$AA@|
  002d4		 |$LN46@DVFS_InitC|
  002d4	00000000	 DCD         |??_C@_1BA@IDCKAMHD@?$AAO?$AAp?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$AA@|
  002d8		 |$LN47@DVFS_InitC|
  002d8	00000000	 DCD         |??_C@_1M@FBGIFOCP@?$AA?2?$AA3?$AA5?$AA1?$AA7?$AA?$AA@|
  002dc		 |$LN48@DVFS_InitC|
  002dc	00000000	 DCD         |??_C@_1M@LKEIENOA@?$AA?2?$AA3?$AA5?$AAx?$AAx?$AA?$AA@|
  002e0		 |$LN49@DVFS_InitC|
  002e0	00000000	 DCD         |??_C@_1M@PIGNEKJN@?$AA?2?$AA3?$AA7?$AAx?$AAx?$AA?$AA@|
  002e4		 |$LN50@DVFS_InitC|
  002e4	0101200c	 DCD         0x101200c
  002e8		 |$LN51@DVFS_InitC|
  002e8	00000000	 DCD         |s_OpmInfo|
  002ec		 |$LN52@DVFS_InitC|
  002ec	00000000	 DCD         |__security_cookie|
  002f0		 |$LN53@DVFS_InitC|
  002f0	fffffbd4	 DCD         0xfffffbd4
  002f4		 |$M41082|

			 ENDP  ; |?DVFS_InitConstraint@@YAPAXPBG@Z|, DVFS_InitConstraint

	EXPORT	|?DVFS_DeinitConstraint@@YAHPAX@Z|	; DVFS_DeinitConstraint
	IMPORT	|DeleteCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T41111| DCD	|$LN7@DVFS_Deini|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DVFS_DeinitConstraint@@YAHPAX@Z| PROC ; DVFS_DeinitConstraint

; 487  : {

  00000		 |$LN7@DVFS_Deini|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M41108|

; 488  :     BOOL rc = FALSE;
; 489  : 
; 490  :     // validate parameters
; 491  :     if (hConstraintAdapter != (HANDLE)&s_OpmInfo) goto cleanUp;

  00004	e59f4048	 ldr         r4, [pc, #0x48]
  00008	e3a03000	 mov         r3, #0
  0000c	e1500004	 cmp         r0, r4
  00010	1a00000c	 bne         |$cleanUp$40101|

; 492  : 
; 493  :     // reset structure
; 494  :     memset(&s_OpmInfo, 0, sizeof(DVFSConstraintInfo_t));

  00014	e3a0209c	 mov         r2, #0x9C
  00018	e3a01000	 mov         r1, #0
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          memset

; 495  :     s_OpmInfo.opmFloor = kOpm0;

  00024	e3a03000	 mov         r3, #0
  00028	e5843090	 str         r3, [r4, #0x90]

; 496  :     s_OpmInfo.opmCeiling = kOpm9;

  0002c	e3a03009	 mov         r3, #9
  00030	e584308c	 str         r3, [r4, #0x8C]

; 497  :     s_OpmInfo.idxForce = (DWORD) -1;

  00034	e3e03000	 mvn         r3, #0

; 498  : 
; 499  :     DeleteCriticalSection(&s_OpmInfo.cs);

  00038	e1a00004	 mov         r0, r4
  0003c	e5843094	 str         r3, [r4, #0x94]
  00040	eb000000	 bl          DeleteCriticalSection

; 500  : 
; 501  :     rc = TRUE;

  00044	e3a03001	 mov         r3, #1
  00048		 |$cleanUp$40101|

; 502  : 
; 503  : cleanUp:
; 504  :     return rc;
; 505  : } 

  00048	e1a00003	 mov         r0, r3
  0004c	e8bd4010	 ldmia       sp!, {r4, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN8@DVFS_Deini|
  00054		 |$LN9@DVFS_Deini|
  00054	00000000	 DCD         |s_OpmInfo|
  00058		 |$M41109|

			 ENDP  ; |?DVFS_DeinitConstraint@@YAHPAX@Z|, DVFS_DeinitConstraint

	EXPORT	|??0?$IndexList@K@@QAA@XZ|		; IndexList<unsigned long>::IndexList<unsigned long>
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\inc\indexlist.h

  00000			 AREA	 |.pdata|, PDATA
|$T41123| DCD	|$LN5@IndexList|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0?$IndexList@K@@QAA@XZ| PROC	; IndexList<unsigned long>::IndexList<unsigned long>

; 51   :     IndexList()

  00000		 |$LN5@IndexList|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M41120|
  00004	e1a04000	 mov         r4, r0

; 52   :     {        
; 53   :         memset(&m_Head, 0, sizeof(IndexData));

  00008	e3a02088	 mov         r2, #0x88
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          memset

; 54   :         m_maxIndex = INDEXED_CHUNK_SIZE - 1;

  00014	e3a0301f	 mov         r3, #0x1F
  00018	e5843088	 str         r3, [r4, #0x88]

; 55   :     }

  0001c	e1a00004	 mov         r0, r4
  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M41121|

			 ENDP  ; |??0?$IndexList@K@@QAA@XZ|, IndexList<unsigned long>::IndexList<unsigned long>

	EXPORT	|??1?$IndexList@K@@QAA@XZ|		; IndexList<unsigned long>::~IndexList<unsigned long>
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T41136| DCD	|$LN9@IndexList@2|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1?$IndexList@K@@QAA@XZ| PROC	; IndexList<unsigned long>::~IndexList<unsigned long>

; 58   :     {

  00000		 |$LN9@IndexList@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M41133|

; 59   :         IndexData *pCurrent;
; 60   :         IndexData *pDelete;
; 61   : 
; 62   :         pCurrent = m_Head.pNext;

  00004	e5903000	 ldr         r3, [r0]
  00008	e1b04003	 movs        r4, r3

; 63   :         while (pCurrent != NULL)

  0000c	0a000004	 beq         |$LN1@IndexList@2|
  00010		 |$LL2@IndexList@2|

; 64   :             {
; 65   :             pDelete = pCurrent;

  00010	e1a00004	 mov         r0, r4

; 66   :             pCurrent = pCurrent->pNext;

  00014	e5944000	 ldr         r4, [r4]

; 67   :             delete pDelete;

  00018	eb000000	 bl          |??3@YAXPAX@Z|
  0001c	e3540000	 cmp         r4, #0
  00020	1afffffa	 bne         |$LL2@IndexList@2|
  00024		 |$LN1@IndexList@2|

; 68   :             }
; 69   :     }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M41134|

			 ENDP  ; |??1?$IndexList@K@@QAA@XZ|, IndexList<unsigned long>::~IndexList<unsigned long>

	EXPORT	|?MaxIndex@?$IndexList@K@@QAAKXZ|	; IndexList<unsigned long>::MaxIndex

  00000			 AREA	 |.pdata|, PDATA
|$T41146| DCD	|$LN5@MaxIndex|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MaxIndex@?$IndexList@K@@QAAKXZ| PROC	; IndexList<unsigned long>::MaxIndex

; 76   :     {

  00000		 |$LN5@MaxIndex|
  00000		 |$M41143|

; 77   :         return m_maxIndex;

  00000	e5900088	 ldr         r0, [r0, #0x88]

; 78   :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M41144|

			 ENDP  ; |?MaxIndex@?$IndexList@K@@QAAKXZ|, IndexList<unsigned long>::MaxIndex

	EXPORT	|?NewIndex@?$IndexList@K@@QAAHPAPAKPAK@Z| ; IndexList<unsigned long>::NewIndex
	IMPORT	|??2@YAPAXI@Z|				; operator new

  00000			 AREA	 |.pdata|, PDATA
|$T41172| DCD	|$LN20@NewIndex|
	DCD	0x40003101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NewIndex@?$IndexList@K@@QAAHPAPAKPAK@Z| PROC ; IndexList<unsigned long>::NewIndex

; 81   :     {

  00000		 |$LN20@NewIndex|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M41169|
  00004	e1a09002	 mov         r9, r2
  00008	e1a0a001	 mov         r10, r1
  0000c	e1a08000	 mov         r8, r0

; 82   :         DWORD ffMask;
; 83   :         INT index = 0;        
; 84   :         BOOL rc = FALSE;        
; 85   :         IndexData *pCurrent;
; 86   : 
; 87   :         // find emtpy chunk
; 88   :         pCurrent = &m_Head;
; 89   :         while (pCurrent->ffMask == (-1))

  00010	e5983004	 ldr         r3, [r8, #4]
  00014	e3a05000	 mov         r5, #0
  00018	e3a06000	 mov         r6, #0
  0001c	e1a04008	 mov         r4, r8
  00020	ea000011	 b           |$LN15@NewIndex|
  00024		 |$LL7@NewIndex|

; 90   :             {
; 91   :             if (pCurrent->pNext == NULL)

  00024	e5943000	 ldr         r3, [r4]
  00028	e3530000	 cmp         r3, #0
  0002c	1a00000b	 bne         |$LN5@NewIndex|

; 92   :                 {
; 93   :                 IndexData *pNew = new IndexData;

  00030	e3a00088	 mov         r0, #0x88
  00034	eb000000	 bl          |??2@YAPAXI@Z|
  00038	e1b07000	 movs        r7, r0

; 94   :                 if (pNew == NULL) goto cleanUp;

  0003c	0a00001d	 beq         |$cleanUp$40253|

; 95   : 
; 96   :                 memset(pNew, 0, sizeof(IndexData));

  00040	e3a02088	 mov         r2, #0x88
  00044	e3a01000	 mov         r1, #0
  00048	e1a00007	 mov         r0, r7
  0004c	eb000000	 bl          memset

; 97   :                 pCurrent->pNext = pNew;

  00050	e5847000	 str         r7, [r4]

; 98   :                 m_maxIndex += INDEXED_CHUNK_SIZE;

  00054	e5983088	 ldr         r3, [r8, #0x88]
  00058	e2833020	 add         r3, r3, #0x20
  0005c	e5883088	 str         r3, [r8, #0x88]
  00060		 |$LN5@NewIndex|

; 99   :                 }
; 100  : 
; 101  :             index += INDEXED_CHUNK_SIZE;
; 102  :             pCurrent = pCurrent->pNext;

  00060	e5944000	 ldr         r4, [r4]
  00064	e2855020	 add         r5, r5, #0x20
  00068	e5943004	 ldr         r3, [r4, #4]
  0006c		 |$LN15@NewIndex|
  0006c	e3730001	 cmn         r3, #1
  00070	0affffeb	 beq         |$LL7@NewIndex|

; 103  :             }
; 104  : 
; 105  :         // get index within chunk
; 106  :         ffMask = pCurrent->ffMask;

  00074	e5942004	 ldr         r2, [r4, #4]

; 107  :         while ((ffMask & 1) == 1)

  00078	ea000001	 b           |$LN17@NewIndex|
  0007c		 |$LL2@NewIndex|

; 108  :             {
; 109  :             index++;
; 110  :             ffMask >>= 1;

  0007c	e1a020a2	 mov         r2, r2, lsr #1
  00080	e2855001	 add         r5, r5, #1
  00084		 |$LN17@NewIndex|
  00084	e2023001	 and         r3, r2, #1
  00088	e3530001	 cmp         r3, #1
  0008c	0afffffa	 beq         |$LL2@NewIndex|

; 111  :             }
; 112  : 
; 113  :         // copy empty slot info and mark as reserved
; 114  :         *pId = index;
; 115  :         *ppType = &(pCurrent->rgData[index & 0x1F]);

  00090	e205201f	 and         r2, r5, #0x1F
  00094	e2823002	 add         r3, r2, #2
  00098	e0843103	 add         r3, r4, r3, lsl #2
  0009c	e5895000	 str         r5, [r9]
  000a0	e58a3000	 str         r3, [r10]

; 116  :         pCurrent->ffMask |= (1 << (index & 0x1F));

  000a4	e5943004	 ldr         r3, [r4, #4]
  000a8	e3a01001	 mov         r1, #1

; 117  : 
; 118  :         rc = TRUE;

  000ac	e3a06001	 mov         r6, #1
  000b0	e1833211	 orr         r3, r3, r1, lsl r2
  000b4	e5843004	 str         r3, [r4, #4]
  000b8		 |$cleanUp$40253|

; 119  :     cleanUp:
; 120  :         return rc;
; 121  :     }

  000b8	e1a00006	 mov         r0, r6
  000bc	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000c0	e12fff1e	 bx          lr
  000c4		 |$M41170|

			 ENDP  ; |?NewIndex@?$IndexList@K@@QAAHPAPAKPAK@Z|, IndexList<unsigned long>::NewIndex

	EXPORT	|?DeleteIndex@?$IndexList@K@@QAAXK@Z|	; IndexList<unsigned long>::DeleteIndex

  00000			 AREA	 |.pdata|, PDATA
|$T41185| DCD	|$LN10@DeleteInde|
	DCD	0x40000e00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DeleteIndex@?$IndexList@K@@QAAXK@Z| PROC ; IndexList<unsigned long>::DeleteIndex

; 124  :     {

  00000		 |$LN10@DeleteInde|
  00000		 |$M41182|

; 125  :         IndexData *pCurrent;
; 126  :         DWORD chunkId = id >> 5;

  00000	e1b022a1	 movs        r2, r1, lsr #5

; 127  : 
; 128  :         // find chunk
; 129  :         pCurrent = &m_Head;
; 130  :         while (chunkId)

  00004	0a000005	 beq         |$LN2@DeleteInde|
  00008		 |$LL3@DeleteInde|

; 131  :             {
; 132  :             --chunkId;
; 133  :             pCurrent = pCurrent->pNext;

  00008	e5903000	 ldr         r3, [r0]
  0000c	e2422001	 sub         r2, r2, #1
  00010	e1b00003	 movs        r0, r3

; 134  :             if (pCurrent == NULL) return;            

  00014	0a000006	 beq         |$LN4@DeleteInde|

; 127  : 
; 128  :         // find chunk
; 129  :         pCurrent = &m_Head;
; 130  :         while (chunkId)

  00018	e3520000	 cmp         r2, #0
  0001c	1afffff9	 bne         |$LL3@DeleteInde|
  00020		 |$LN2@DeleteInde|

; 135  :             }
; 136  : 
; 137  :         // clear mask
; 138  :         pCurrent->ffMask &= ~(1 << (id & 0x1F));

  00020	e5903004	 ldr         r3, [r0, #4]
  00024	e201201f	 and         r2, r1, #0x1F
  00028	e3a01001	 mov         r1, #1
  0002c	e1c33211	 bic         r3, r3, r1, lsl r2
  00030	e5803004	 str         r3, [r0, #4]
  00034		 |$LN4@DeleteInde|

; 139  :     }

  00034	e12fff1e	 bx          lr
  00038		 |$M41183|

			 ENDP  ; |?DeleteIndex@?$IndexList@K@@QAAXK@Z|, IndexList<unsigned long>::DeleteIndex

	EXPORT	|?GetIndex@?$IndexList@K@@QAAPAKK@Z|	; IndexList<unsigned long>::GetIndex

  00000			 AREA	 |.pdata|, PDATA
|$T41202| DCD	|$LN12@GetIndex|
	DCD	0x40001100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetIndex@?$IndexList@K@@QAAPAKK@Z| PROC ; IndexList<unsigned long>::GetIndex

; 142  :     {

  00000		 |$LN12@GetIndex|
  00000		 |$M41199|

; 143  :         IndexData *pCurrent;
; 144  :         DWORD chunkId = id >> 5;

  00000	e1b022a1	 movs        r2, r1, lsr #5

; 145  : 
; 146  :         // find chunk
; 147  :         pCurrent = &m_Head;
; 148  :         while (chunkId)

  00004	0a000005	 beq         |$LN2@GetIndex|
  00008		 |$LL3@GetIndex|

; 149  :             {
; 150  :             --chunkId;
; 151  :             pCurrent = pCurrent->pNext;

  00008	e5903000	 ldr         r3, [r0]
  0000c	e2422001	 sub         r2, r2, #1
  00010	e1b00003	 movs        r0, r3

; 152  :             if (pCurrent == NULL) return NULL;   

  00014	0a000008	 beq         |$LN6@GetIndex|

; 145  : 
; 146  :         // find chunk
; 147  :         pCurrent = &m_Head;
; 148  :         while (chunkId)

  00018	e3520000	 cmp         r2, #0
  0001c	1afffff9	 bne         |$LL3@GetIndex|
  00020		 |$LN2@GetIndex|

; 153  :             }
; 154  : 
; 155  :         // clear mask
; 156  :         return (pCurrent->ffMask & (1 << (id & 0x1F))) ? 
; 157  :                     &(pCurrent->rgData[id & 0x1F]) : NULL;

  00020	e5903004	 ldr         r3, [r0, #4]
  00024	e201201f	 and         r2, r1, #0x1F
  00028	e3a01001	 mov         r1, #1
  0002c	e1130211	 tst         r3, r1, lsl r2
  00030	12823002	 addne       r3, r2, #2
  00034	10800103	 addne       r0, r0, r3, lsl #2

; 158  :     }

  00038	112fff1e	 bxne        lr
  0003c		 |$LN6@GetIndex|

; 153  :             }
; 154  : 
; 155  :         // clear mask
; 156  :         return (pCurrent->ffMask & (1 << (id & 0x1F))) ? 
; 157  :                     &(pCurrent->rgData[id & 0x1F]) : NULL;

  0003c	e3a00000	 mov         r0, #0

; 158  :     }

  00040	e12fff1e	 bx          lr
  00044		 |$M41200|

			 ENDP  ; |?GetIndex@?$IndexList@K@@QAAPAKK@Z|, IndexList<unsigned long>::GetIndex

	EXPORT	|??8iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator==
; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.pdata|, PDATA
|$T41215| DCD	|$LN7@operator@2|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??8iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator==

; 133  : 			{return (_Ptr == _X._Ptr); }

  00000		 |$LN7@operator@2|
  00000		 |$M41212|
  00000	e5902000	 ldr         r2, [r0]
  00004	e5913000	 ldr         r3, [r1]
  00008	e1520003	 cmp         r2, r3
  0000c	03a03001	 moveq       r3, #1
  00010	020300ff	 andeq       r0, r3, #0xFF
  00014	13a03000	 movne       r3, #0
  00018	120300ff	 andne       r0, r3, #0xFF
  0001c	e12fff1e	 bx          lr
  00020		 |$M41213|

			 ENDP  ; |??8iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator==

	EXPORT	|??0const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::const_iterator

  00000			 AREA	 |.pdata|, PDATA
|$T41225| DCD	|$LN5@const_iter|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::const_iterator

; 73   : 		const_iterator()

  00000		 |$LN5@const_iter|
  00000		 |$M41222|
  00000	e12fff1e	 bx          lr
  00004		 |$M41223|

			 ENDP  ; |??0const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::const_iterator

	EXPORT	|?_Mynode@const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAPAU_Node@23@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::_Mynode

  00000			 AREA	 |.pdata|, PDATA
|$T41235| DCD	|$LN5@Mynode|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Mynode@const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAPAU_Node@23@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::_Mynode

; 102  : 			{return (_Ptr); }

  00000		 |$LN5@Mynode|
  00000		 |$M41232|
  00000	e5900000	 ldr         r0, [r0]
  00004	e12fff1e	 bx          lr
  00008		 |$M41233|

			 ENDP  ; |?_Mynode@const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAPAU_Node@23@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::_Mynode

	EXPORT	|?_Next@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Next

  00000			 AREA	 |.pdata|, PDATA
|$T41245| DCD	|$LN5@Next|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Next@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Next

; 51   : 			{return ((_Nodepref)(*_P)._Next); }

  00000		 |$LN5@Next|
  00000		 |$M41242|
  00000	e12fff1e	 bx          lr
  00004		 |$M41243|

			 ENDP  ; |?_Next@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Next

	EXPORT	|?_Prev@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Prev

  00000			 AREA	 |.pdata|, PDATA
|$T41255| DCD	|$LN5@Prev|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Prev@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Prev

; 53   : 			{return ((_Nodepref)(*_P)._Prev); }

  00000		 |$LN5@Prev|
  00000		 |$M41252|
  00000	e2800004	 add         r0, r0, #4
  00004	e12fff1e	 bx          lr
  00008		 |$M41253|

			 ENDP  ; |?_Prev@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Prev

	EXPORT	|?_Value@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAUDVFSCallbackInfo_t@@PAU_Node@23@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Value

  00000			 AREA	 |.pdata|, PDATA
|$T41265| DCD	|$LN5@Value|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Value@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAUDVFSCallbackInfo_t@@PAU_Node@23@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Value

; 55   : 			{return ((_Vref)(*_P)._Value); }

  00000		 |$LN5@Value|
  00000		 |$M41262|
  00000	e2800008	 add         r0, r0, #8
  00004	e12fff1e	 bx          lr
  00008		 |$M41263|

			 ENDP  ; |?_Value@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAUDVFSCallbackInfo_t@@PAU_Node@23@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Value

	EXPORT	|?deallocate@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAXI@Z| ; std::allocator<DVFSCallbackInfo_t *>::deallocate
; File c:\wince600\public\common\sdk\inc\xmemory

  00000			 AREA	 |.pdata|, PDATA
|$T41273| DCD	|$LN5@deallocate|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?deallocate@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAXI@Z| PROC ; std::allocator<DVFSCallbackInfo_t *>::deallocate

; 83   :         {operator delete(_P); }

  00000		 |$LN5@deallocate|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41270|
  00004	e1a00001	 mov         r0, r1
  00008	eb000000	 bl          |??3@YAXPAX@Z|
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M41271|

			 ENDP  ; |?deallocate@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAXI@Z|, std::allocator<DVFSCallbackInfo_t *>::deallocate

	EXPORT	|??0const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::const_iterator
; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.pdata|, PDATA
|$T41284| DCD	|$LN5@const_iter@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::const_iterator

; 75   : 		const_iterator(_Nodeptr _P)

  00000		 |$LN5@const_iter@2|
  00000		 |$M41281|
  00000	e5801000	 str         r1, [r0]
  00004	e12fff1e	 bx          lr
  00008		 |$M41282|

			 ENDP  ; |??0const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::const_iterator

	EXPORT	|??$_Destroy@PAUDVFSCallbackInfo_t@@@std@@YAXPAPAUDVFSCallbackInfo_t@@@Z| ; std::_Destroy<DVFSCallbackInfo_t *>
; File c:\wince600\public\common\sdk\inc\xmemory

  00000			 AREA	 |.pdata|, PDATA
|$T41291| DCD	|$LN5@Destroy|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??$_Destroy@PAUDVFSCallbackInfo_t@@@std@@YAXPAPAUDVFSCallbackInfo_t@@@Z| PROC ; std::_Destroy<DVFSCallbackInfo_t *>

; 57   :     {_DESTRUCTOR(_Ty, _P); }

  00000		 |$LN5@Destroy|
  00000		 |$M41288|
  00000	e12fff1e	 bx          lr
  00004		 |$M41289|

			 ENDP  ; |??$_Destroy@PAUDVFSCallbackInfo_t@@@std@@YAXPAPAUDVFSCallbackInfo_t@@@Z|, std::_Destroy<DVFSCallbackInfo_t *>

	EXPORT	|??$_Allocate@D@std@@YAPADIPAD@Z|	; std::_Allocate<char>
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T41303| DCD	|$LN9@Allocate|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??$_Allocate@D@std@@YAPADIPAD@Z| PROC	; std::_Allocate<char>

; 43   :     {if (_N <= 0)

  00000		 |$LN9@Allocate|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M41300|
  00004	e1b04000	 movs        r4, r0
  00008	1a000004	 bne         |$LN3@Allocate|

; 44   :         _N = 0;

  0000c	e3a04000	 mov         r4, #0
  00010		 |$LN1@Allocate|

; 48   :     return ((_Ty _FARQ *)operator new(
; 49   :         (_SIZT)_N * sizeof (_Ty))); }

  00010	e1a00004	 mov         r0, r4
  00014		 |$LN6@Allocate|
  00014	eb000000	 bl          |??2@YAPAXI@Z|
  00018	e8bd4010	 ldmia       sp!, {r4, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$LN3@Allocate|

; 45   :     /* check for overflow */
; 46   :     else if (((_SIZT)(-1) / _N) < sizeof(_Ty))

  00020	e3e01000	 mvn         r1, #0
  00024	e1a00004	 mov         r0, r4
  00028	eb000000	 bl          __rt_udiv
  0002c	e3500001	 cmp         r0, #1
  00030	2afffff6	 bcs         |$LN1@Allocate|

; 47   :         return (_Ty _FARQ *)operator new((_SIZT)(-1));

  00034	e3e00000	 mvn         r0, #0
  00038	eafffff5	 b           |$LN6@Allocate|
  0003c		 |$M41301|

			 ENDP  ; |??$_Allocate@D@std@@YAPADIPAD@Z|, std::_Allocate<char>

	EXPORT	|??$_Construct@PAUDVFSCallbackInfo_t@@PAU1@@std@@YAXPAPAUDVFSCallbackInfo_t@@ABQAU1@@Z| ; std::_Construct<DVFSCallbackInfo_t *,DVFSCallbackInfo_t *>
; File c:\wince600\public\common\sdk\inc\new

  00000			 AREA	 |.pdata|, PDATA
|$T41318| DCD	|$LN9@Construct|
	DCD	0x40000400
; Function compile flags: /Ogspy
; File c:\wince600\public\common\sdk\inc\xmemory

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??$_Construct@PAUDVFSCallbackInfo_t@@PAU1@@std@@YAXPAPAUDVFSCallbackInfo_t@@ABQAU1@@Z| PROC ; std::_Construct<DVFSCallbackInfo_t *,DVFSCallbackInfo_t *>

; 53   :     {new ((void _FARQ *)_P) _T1(_V); }

  00000		 |$LN9@Construct|
  00000		 |$M41315|
  00000	e3500000	 cmp         r0, #0
  00004	15913000	 ldrne       r3, [r1]
  00008	15803000	 strne       r3, [r0]
  0000c	e12fff1e	 bx          lr
  00010		 |$M41316|

			 ENDP  ; |??$_Construct@PAUDVFSCallbackInfo_t@@PAU1@@std@@YAXPAPAUDVFSCallbackInfo_t@@ABQAU1@@Z|, std::_Construct<DVFSCallbackInfo_t *,DVFSCallbackInfo_t *>

	EXPORT	|?DVFS_CreateConstraint@@YAPAXPAX@Z|	; DVFS_CreateConstraint
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\constraintadapters\dvfsconstraint\dvfsconstraint.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T41330| DCD	|$LN9@DVFS_Creat|
	DCD	0x40001602
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DVFS_CreateConstraint@@YAPAXPAX@Z| PROC ; DVFS_CreateConstraint

; 517  : {

  00000		 |$LN9@DVFS_Creat|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M41327|

; 518  :     DWORD id;
; 519  :     DWORD *pDataNode;
; 520  :     HANDLE rc = NULL;
; 521  :     
; 522  :     // validate parameters
; 523  :     if (hConstraintAdapter != (HANDLE)&s_OpmInfo) goto cleanUp;

  00008	e59f3044	 ldr         r3, [pc, #0x44]
  0000c	e3a04000	 mov         r4, #0
  00010	e1500003	 cmp         r0, r3
  00014	1a000009	 bne         |$cleanUp$40113|

; 524  : 
; 525  :     // get new index
; 526  :     if (s_IndexList.NewIndex(&pDataNode, &id) == FALSE)

  00018	e59f0030	 ldr         r0, [pc, #0x30]
  0001c	e28d2004	 add         r2, sp, #4
  00020	e28d1000	 add         r1, sp, #0
  00024	eb000000	 bl          |?NewIndex@?$IndexList@K@@QAAHPAPAKPAK@Z|
  00028	e3500000	 cmp         r0, #0

; 527  :         {
; 528  :         goto cleanUp;
; 529  :         }
; 530  : 
; 531  :     // initialize values
; 532  :     rc = (HANDLE)(id + 1);
; 533  :     *pDataNode = (DWORD) kOpmUndefined;

  0002c	159d2000	 ldrne       r2, [sp]
  00030	159d3004	 ldrne       r3, [sp, #4]
  00034	13e01000	 mvnne       r1, #0
  00038	15821000	 strne       r1, [r2]
  0003c	12834001	 addne       r4, r3, #1
  00040		 |$cleanUp$40113|

; 534  : 
; 535  : cleanUp:    
; 536  :     return rc;
; 537  : } 

  00040	e1a00004	 mov         r0, r4
  00044	e28dd008	 add         sp, sp, #8
  00048	e8bd4010	 ldmia       sp!, {r4, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$LN10@DVFS_Creat|
  00050		 |$LN11@DVFS_Creat|
  00050	00000000	 DCD         |s_IndexList|
  00054		 |$LN12@DVFS_Creat|
  00054	00000000	 DCD         |s_OpmInfo|
  00058		 |$M41328|

			 ENDP  ; |?DVFS_CreateConstraint@@YAPAXPAX@Z|, DVFS_CreateConstraint

	EXPORT	|??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::iterator
; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.pdata|, PDATA
|$T41346| DCD	|$LN7@iterator|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::iterator

; 110  : 		iterator()

  00000		 |$LN7@iterator|
  00000		 |$M41343|
  00000	e12fff1e	 bx          lr
  00004		 |$M41344|

			 ENDP  ; |??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::iterator

	EXPORT	|??Diterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAAAPAUDVFSCallbackInfo_t@@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator*

  00000			 AREA	 |.pdata|, PDATA
|$T41359| DCD	|$LN7@operator@3|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??Diterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAAAPAUDVFSCallbackInfo_t@@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator*

; 115  : 			{return (_Acc::_Value(_Ptr)); }

  00000		 |$LN7@operator@3|
  00000		 |$M41356|
  00000	e5903000	 ldr         r3, [r0]
  00004	e2830008	 add         r0, r3, #8
  00008	e12fff1e	 bx          lr
  0000c		 |$M41357|

			 ENDP  ; |??Diterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAAAPAUDVFSCallbackInfo_t@@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator*

	EXPORT	|??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAAAV012@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator++

  00000			 AREA	 |.pdata|, PDATA
|$T41373| DCD	|$LN7@operator@4|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAAAV012@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator++

; 119  : 			{_Ptr = _Acc::_Next(_Ptr);

  00000		 |$LN7@operator@4|
  00000		 |$M41370|
  00000	e1a02000	 mov         r2, r0
  00004	e5923000	 ldr         r3, [r2]

; 120  : 			return (*this); }

  00008	e5933000	 ldr         r3, [r3]
  0000c	e5823000	 str         r3, [r2]
  00010	e12fff1e	 bx          lr
  00014		 |$M41371|

			 ENDP  ; |??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAAAV012@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator++

	EXPORT	|??9iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator!=

  00000			 AREA	 |.pdata|, PDATA
|$T41393| DCD	|$LN11@operator@5|
	DCD	0x40000b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??9iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator!=

; 135  : 			{return (!(*this == _X)); }

  00000		 |$LN11@operator@5|
  00000		 |$M41390|
  00000	e5902000	 ldr         r2, [r0]
  00004	e5913000	 ldr         r3, [r1]
  00008	e1520003	 cmp         r2, r3
  0000c	03a03001	 moveq       r3, #1
  00010	13a03000	 movne       r3, #0
  00014	e21330ff	 ands        r3, r3, #0xFF
  00018	03a03001	 moveq       r3, #1
  0001c	020300ff	 andeq       r0, r3, #0xFF
  00020	13a03000	 movne       r3, #0
  00024	120300ff	 andne       r0, r3, #0xFF
  00028	e12fff1e	 bx          lr
  0002c		 |$M41391|

			 ENDP  ; |??9iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator!=

	EXPORT	|?_Freenode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAXPAU_Node@12@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Freenode
; File c:\wince600\public\common\sdk\inc\xmemory

  00000			 AREA	 |.pdata|, PDATA
|$T41404| DCD	|$LN7@Freenode|
	DCD	0x40000501
; Function compile flags: /Ogspy
; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Freenode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAXPAU_Node@12@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Freenode

; 406  : 		{allocator.deallocate(_S, 1); }

  00000		 |$LN7@Freenode|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41401|
  00004	e1a00001	 mov         r0, r1
  00008	eb000000	 bl          |??3@YAXPAX@Z|
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M41402|

			 ENDP  ; |?_Freenode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAXPAU_Node@12@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Freenode

	EXPORT	|?destroy@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAPAUDVFSCallbackInfo_t@@@Z| ; std::allocator<DVFSCallbackInfo_t *>::destroy
; File c:\wince600\public\common\sdk\inc\xmemory

  00000			 AREA	 |.pdata|, PDATA
|$T41414| DCD	|$LN7@destroy|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?destroy@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAPAUDVFSCallbackInfo_t@@@Z| PROC ; std::allocator<DVFSCallbackInfo_t *>::destroy

; 87   :         {_Destroy(_P); }

  00000		 |$LN7@destroy|
  00000		 |$M41411|
  00000	e12fff1e	 bx          lr
  00004		 |$M41412|

			 ENDP  ; |?destroy@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAPAUDVFSCallbackInfo_t@@@Z|, std::allocator<DVFSCallbackInfo_t *>::destroy

	EXPORT	|??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::iterator
; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.pdata|, PDATA
|$T41428| DCD	|$LN7@iterator@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::iterator

; 112  : 		iterator(_Nodeptr _P)

  00000		 |$LN7@iterator@2|
  00000		 |$M41425|
  00000	e5801000	 str         r1, [r0]
  00004	e12fff1e	 bx          lr
  00008		 |$M41426|

			 ENDP  ; |??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::iterator

	EXPORT	|??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AV012@H@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator++

  00000			 AREA	 |.pdata|, PDATA
|$T41448| DCD	|$LN9@operator@6|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AV012@H@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator++

; 122  : 			{iterator _Tmp = *this;

  00000		 |$LN9@operator@6|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41445|
  00004	e1a0e000	 mov         lr, r0
  00008	e59e2000	 ldr         r2, [lr]

; 123  : 			++*this;
; 124  : 			return (_Tmp); }

  0000c	e1a00001	 mov         r0, r1
  00010	e5923000	 ldr         r3, [r2]
  00014	e5812000	 str         r2, [r1]
  00018	e58e3000	 str         r3, [lr]
  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M41446|

			 ENDP  ; |??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AV012@H@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator++

	EXPORT	|?_Charalloc@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAPADI@Z| ; std::allocator<DVFSCallbackInfo_t *>::_Charalloc
; File c:\wince600\public\common\sdk\inc\xmemory

  00000			 AREA	 |.pdata|, PDATA
|$T41469| DCD	|$LN11@Charalloc|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Charalloc@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAPADI@Z| PROC ; std::allocator<DVFSCallbackInfo_t *>::_Charalloc

; 80   :         {return (_Allocate((difference_type)_N,

  00000		 |$LN11@Charalloc|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M41466|
  00004	e1b04001	 movs        r4, r1

; 81   :             (char _FARQ *)0)); }

  00008	1a000004	 bne         |$LN5@Charalloc|
  0000c	e3a04000	 mov         r4, #0
  00010		 |$LN3@Charalloc|
  00010	e1a00004	 mov         r0, r4
  00014		 |$LN8@Charalloc|
  00014	eb000000	 bl          |??2@YAPAXI@Z|
  00018	e8bd4010	 ldmia       sp!, {r4, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$LN5@Charalloc|
  00020	e3e01000	 mvn         r1, #0
  00024	e1a00004	 mov         r0, r4
  00028	eb000000	 bl          __rt_udiv
  0002c	e3500001	 cmp         r0, #1
  00030	2afffff6	 bcs         |$LN3@Charalloc|
  00034	e3e00000	 mvn         r0, #0
  00038	eafffff5	 b           |$LN8@Charalloc|
  0003c		 |$M41467|

			 ENDP  ; |?_Charalloc@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAPADI@Z|, std::allocator<DVFSCallbackInfo_t *>::_Charalloc

	EXPORT	|?construct@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAPAUDVFSCallbackInfo_t@@ABQAU3@@Z| ; std::allocator<DVFSCallbackInfo_t *>::construct
; File c:\wince600\public\common\sdk\inc\new

  00000			 AREA	 |.pdata|, PDATA
|$T41492| DCD	|$LN11@construct|
	DCD	0x40000400
; Function compile flags: /Ogspy
; File c:\wince600\public\common\sdk\inc\xmemory

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?construct@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAPAUDVFSCallbackInfo_t@@ABQAU3@@Z| PROC ; std::allocator<DVFSCallbackInfo_t *>::construct

; 85   :         {_Construct(_P, _V); }

  00000		 |$LN11@construct|
  00000		 |$M41489|
  00000	e3510000	 cmp         r1, #0
  00004	15923000	 ldrne       r3, [r2]
  00008	15813000	 strne       r3, [r1]
  0000c	e12fff1e	 bx          lr
  00010		 |$M41490|

			 ENDP  ; |?construct@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAPAUDVFSCallbackInfo_t@@ABQAU3@@Z|, std::allocator<DVFSCallbackInfo_t *>::construct

	EXPORT	|?begin@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::begin
; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.pdata|, PDATA
|$T41516| DCD	|$LN11@begin|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?begin@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::begin

; 180  : 		{return (iterator(_Acc::_Next(_Head))); }

  00000		 |$LN11@begin|
  00000		 |$M41513|
  00000	e5903004	 ldr         r3, [r0, #4]
  00004	e1a00001	 mov         r0, r1
  00008	e5933000	 ldr         r3, [r3]
  0000c	e5813000	 str         r3, [r1]
  00010	e12fff1e	 bx          lr
  00014		 |$M41514|

			 ENDP  ; |?begin@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::begin

	EXPORT	|?end@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::end

  00000			 AREA	 |.pdata|, PDATA
|$T41536| DCD	|$LN9@end|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?end@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::end

; 184  : 		{return (iterator(_Head)); }

  00000		 |$LN9@end|
  00000		 |$M41533|
  00000	e5903004	 ldr         r3, [r0, #4]
  00004	e1a00001	 mov         r0, r1
  00008	e5813000	 str         r3, [r1]
  0000c	e12fff1e	 bx          lr
  00010		 |$M41534|

			 ENDP  ; |?end@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::end

	EXPORT	|?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::erase
; File c:\wince600\public\common\sdk\inc\xmemory

  00000			 AREA	 |.pdata|, PDATA
|$T41610| DCD	|$LN35@erase|
	DCD	0x40001603
; Function compile flags: /Ogspy
; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::erase

; 249  : 		{_Nodeptr _S = (_P++)._Mynode();

  00000		 |$LN35@erase|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d50f0	 stmdb       sp!, {r4 - r7, r12, lr}
  0000c		 |$M41607|
  0000c	e1a06001	 mov         r6, r1
  00010	e1a07000	 mov         r7, r0

; 250  : 		_Acc::_Next(_Acc::_Prev(_S)) = _Acc::_Next(_S);

  00014	e1a04002	 mov         r4, r2
  00018	e5b4e004	 ldr         lr, [r4, #4]!
  0001c	e5923000	 ldr         r3, [r2]

; 251  : 		_Acc::_Prev(_Acc::_Next(_S)) = _Acc::_Prev(_S);
; 252  : 		allocator.destroy(&_Acc::_Value(_S));
; 253  : 		_Freenode(_S);

  00020	e1a00002	 mov         r0, r2
  00024	e58e3000	 str         r3, [lr]
  00028	e5922000	 ldr         r2, [r2]
  0002c	e1a05003	 mov         r5, r3
  00030	e5943000	 ldr         r3, [r4]
  00034	e5823004	 str         r3, [r2, #4]
  00038	eb000000	 bl          |??3@YAXPAX@Z|

; 254  : 		--_Size;

  0003c	e5973008	 ldr         r3, [r7, #8]

; 255  : 		return (_P); }

  00040	e5865000	 str         r5, [r6]
  00044	e1a00006	 mov         r0, r6
  00048	e2433001	 sub         r3, r3, #1
  0004c	e5873008	 str         r3, [r7, #8]
  00050	e89d60f0	 ldmia       sp, {r4 - r7, sp, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M41608|

			 ENDP  ; |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::erase

	EXPORT	|?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@0@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::erase

  00000			 AREA	 |.pdata|, PDATA
|$T41661| DCD	|$LN22@erase@2|
	DCD	0x40001b04
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@0@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::erase

; 257  : 		{while (_F != _L)

  00000		 |$LN22@erase@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d50f0	 stmdb       sp!, {r4 - r7, r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41658|
  00010	e1a06003	 mov         r6, r3
  00014	e1a04002	 mov         r4, r2
  00018	e1a05001	 mov         r5, r1
  0001c	e1a07000	 mov         r7, r0
  00020		 |$LL2@erase@2|
  00020	e1540006	 cmp         r4, r6
  00024	03a02001	 moveq       r2, #1
  00028	13a02000	 movne       r2, #0
  0002c	e21230ff	 ands        r3, r2, #0xFF
  00030	03a03001	 moveq       r3, #1
  00034	13a03000	 movne       r3, #0
  00038	e21330ff	 ands        r3, r3, #0xFF

; 258  : 			erase(_F++);
; 259  : 		return (_F); }

  0003c	0a000005	 beq         |$LN1@erase@2|
  00040	e1a02004	 mov         r2, r4
  00044	e5944000	 ldr         r4, [r4]
  00048	e28d1000	 add         r1, sp, #0
  0004c	e1a00007	 mov         r0, r7
  00050	eb000000	 bl          |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@@Z|
  00054	eafffff1	 b           |$LL2@erase@2|
  00058		 |$LN1@erase@2|
  00058	e5854000	 str         r4, [r5]
  0005c	e1a00005	 mov         r0, r5
  00060	e28dd004	 add         sp, sp, #4
  00064	e89d60f0	 ldmia       sp, {r4 - r7, sp, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M41659|

			 ENDP  ; |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@0@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::erase

	EXPORT	|?_Buynode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAPAU_Node@12@PAU312@0@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Buynode

  00000			 AREA	 |.pdata|, PDATA
|$T41699| DCD	|$LN20@Buynode|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Buynode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAPAU_Node@12@PAU312@0@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Buynode

; 400  : 		{_Nodeptr _S = (_Nodeptr)allocator._Charalloc(

  00000		 |$LN20@Buynode|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M41696|
  00004	e1a04002	 mov         r4, r2
  00008	e1a05001	 mov         r5, r1

; 401  : 			1 * sizeof (_Node));

  0000c	e3a0000c	 mov         r0, #0xC
  00010	eb000000	 bl          |??2@YAPAXI@Z|

; 402  : 		_Acc::_Next(_S) = _Narg != 0 ? _Narg : _S;

  00014	e3550000	 cmp         r5, #0
  00018	01a05000	 moveq       r5, r0

; 403  : 		_Acc::_Prev(_S) = _Parg != 0 ? _Parg : _S;

  0001c	e3540000	 cmp         r4, #0
  00020	01a04000	 moveq       r4, r0
  00024	e5805000	 str         r5, [r0]
  00028	e5804004	 str         r4, [r0, #4]

; 404  : 		return (_S); }

  0002c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M41697|

			 ENDP  ; |?_Buynode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAPAU_Node@12@PAU312@0@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Buynode

	EXPORT	|?NotifyCallbacks@@YAXKK@Z|		; NotifyCallbacks

  00000			 AREA	 |.pdata|, PDATA
|$T41809| DCD	|$LN52@NotifyCall|
	DCD	0x40002201
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\constraintadapters\dvfsconstraint\dvfsconstraint.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NotifyCallbacks@@YAXKK@Z| PROC	; NotifyCallbacks

; 196  : {

  00000		 |$LN52@NotifyCall|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M41806|
  00004	e1a07001	 mov         r7, r1
  00008	e1a08000	 mov         r8, r0

; 197  :     list<DVFSCallbackInfo_t*>::iterator iter;
; 198  :     
; 199  :     for (iter = s_CallbackList.begin(); iter != s_CallbackList.end(); ++iter)

  0000c	e59f6070	 ldr         r6, [pc, #0x70]
  00010	e3a09801	 mov         r9, #1, 16
  00014	e596e004	 ldr         lr, [r6, #4]
  00018	e59e5000	 ldr         r5, [lr]
  0001c		 |$LL19@NotifyCall|
  0001c	e155000e	 cmp         r5, lr
  00020	03a03001	 moveq       r3, #1
  00024	13a03000	 movne       r3, #0
  00028	e21330ff	 ands        r3, r3, #0xFF
  0002c	03a03001	 moveq       r3, #1
  00030	13a03000	 movne       r3, #0
  00034	e21330ff	 ands        r3, r3, #0xFF
  00038	0a00000f	 beq         |$LN2@NotifyCall|

; 200  :         {
; 201  :         // don't notify the caller who triggered the change
; 202  :         if ((*iter)->idContext == idContext) continue;

  0003c	e1a02005	 mov         r2, r5
  00040	e5b23008	 ldr         r3, [r2, #8]!
  00044	e5933000	 ldr         r3, [r3]
  00048	e1530007	 cmp         r3, r7
  0004c	0a000008	 beq         |$LN3@NotifyCall|

; 203  : 
; 204  :         // notify callbacks
; 205  :         (*iter)->fnCallback((*iter)->hRefContext, 
; 206  :             CONSTRAINT_MSG_DVFS_NEWOPM,
; 207  :             (void*)newOpm,
; 208  :             sizeof(DWORD)
; 209  :             );

  00050	e5921000	 ldr         r1, [r2]
  00054	e3a03004	 mov         r3, #4
  00058	e1a02008	 mov         r2, r8
  0005c	e5910008	 ldr         r0, [r1, #8]
  00060	e5914004	 ldr         r4, [r1, #4]
  00064	e3891001	 orr         r1, r9, #1
  00068	e1a0e00f	 mov         lr, pc
  0006c	e12fff14	 bx          r4
  00070	e596e004	 ldr         lr, [r6, #4]
  00074		 |$LN3@NotifyCall|

; 197  :     list<DVFSCallbackInfo_t*>::iterator iter;
; 198  :     
; 199  :     for (iter = s_CallbackList.begin(); iter != s_CallbackList.end(); ++iter)

  00074	e5955000	 ldr         r5, [r5]
  00078	eaffffe7	 b           |$LL19@NotifyCall|
  0007c		 |$LN2@NotifyCall|

; 210  :         }
; 211  : }

  0007c	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN53@NotifyCall|
  00084		 |$LN54@NotifyCall|
  00084	00000000	 DCD         |s_CallbackList|
  00088		 |$M41807|

			 ENDP  ; |?NotifyCallbacks@@YAXKK@Z|, NotifyCallbacks

	EXPORT	|?UpdateOpm@@YAHK@Z|			; UpdateOpm
	EXPORT	|??_C@_1BE@DAEMMAAB@?$AAO?$AAP?$AAM?$AA?$CF?$AAd?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17MGNEPMPH@?$AA?5?$AA?9?$AAf?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	IMPORT	|PmxSendDeviceNotification|

  00000			 AREA	 |.pdata|, PDATA
|$T41843| DCD	|$LN31@UpdateOpm|
	DCD	0x4000a202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@DAEMMAAB@?$AAO?$AAP?$AAM?$AA?$CF?$AAd?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "P", 0x0, "M", 0x0, "%", 0x0, "d", 0x0, "%", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17MGNEPMPH@?$AA?5?$AA?9?$AAf?$AA?$AA@| DCB " ", 0x0, "-", 0x0, "f", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateOpm@@YAHK@Z| PROC		; UpdateOpm

; 223  : {

  00000		 |$LN31@UpdateOpm|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd0c4	 sub         sp, sp, #0xC4
  00008		 |$M41840|
  00008	e1a08000	 mov         r8, r0

; 224  :     int i;
; 225  :     DWORD opmOld;
; 226  :     DWORD opmNew = (DWORD) kOpmUndefined;
; 227  :     BOOL rc = FALSE;
; 228  :     DWORD dwNotificationMask = 0;
; 229  :     
; 230  :     IOCTL_DVFS_OPPNOTIFY_IN info;
; 231  :     IOCTL_OPP_REQUEST_IN oppRequest;
; 232  :     
; 233  :     // first check if there is a constraint being forced
; 234  :     if (s_OpmInfo.idxForce != -1)

  0000c	e59f5270	 ldr         r5, [pc, #0x270]
  00010	e3a07000	 mov         r7, #0
  00014	e3a0b000	 mov         r11, #0
  00018	e5956094	 ldr         r6, [r5, #0x94]
  0001c	e3a0906c	 mov         r9, #0x6C
  00020	e3a0a112	 mov         r10, #0x12, 2
  00024	e3760001	 cmn         r6, #1
  00028	0a000007	 beq         |$LN28@UpdateOpm|

; 235  :         {
; 236  :         DWORD *pDataNode;
; 237  :         pDataNode = s_IndexList.GetIndex(s_OpmInfo.idxForce);

  0002c	e59f024c	 ldr         r0, [pc, #0x24C]
  00030	e1a01006	 mov         r1, r6
  00034	eb000000	 bl          |?GetIndex@?$IndexList@K@@QAAPAKK@Z|
  00038	e3500000	 cmp         r0, #0

; 238  :         if (pDataNode != NULL)

  0003c	0a000002	 beq         |$LN28@UpdateOpm|

; 239  :             {
; 240  :             opmNew = *pDataNode;

  00040	e5904000	 ldr         r4, [r0]

; 241  :             }
; 242  :         }
; 243  : 
; 244  :     // get highest operating mode if not forced
; 245  :     if (opmNew == kOpmUndefined)

  00044	e3740001	 cmn         r4, #1
  00048	1a00001e	 bne         |$LN27@UpdateOpm|
  0004c		 |$LN28@UpdateOpm|

; 246  :         {
; 247  :         for (i = (signed)s_OpmInfo.opmCeiling; i >= (signed)s_OpmInfo.opmFloor; --i)

  0004c	e595408c	 ldr         r4, [r5, #0x8C]
  00050	e5951090	 ldr         r1, [r5, #0x90]
  00054	e1540001	 cmp         r4, r1
  00058	ba000007	 blt         |$LN9@UpdateOpm|
  0005c	e0852104	 add         r2, r5, r4, lsl #2
  00060		 |$LL13@UpdateOpm|

; 248  :             {
; 249  :             if (s_OpmInfo.opmTable[i] > 0)

  00060	e5923064	 ldr         r3, [r2, #0x64]
  00064	e3530000	 cmp         r3, #0
  00068	8a000014	 bhi         |$LN24@UpdateOpm|
  0006c	e2444001	 sub         r4, r4, #1
  00070	e1540001	 cmp         r4, r1
  00074	e2422004	 sub         r2, r2, #4
  00078	aafffff8	 bge         |$LL13@UpdateOpm|
  0007c		 |$LN9@UpdateOpm|

; 333  :         {
; 334  :         rc = TRUE;

  0007c	e3a06001	 mov         r6, #1
  00080		 |$cleanUp$40023|

; 335  :         }
; 336  : 
; 337  : cleanUp:
; 338  :     if (rc == FALSE)

  00080	e3560000	 cmp         r6, #0
  00084	1a000009	 bne         |$LN1@UpdateOpm|
  00088		 |$LN26@UpdateOpm|

; 339  :         {
; 340  :         info.ffInfo = dwNotificationMask & DVFS_CANCELNOTIFY_MASK;

  00088	e2071044	 and         r1, r7, #0x44

; 341  :         PmxSendDeviceNotification(DEVICEMEDIATOR_DVFS_LIST,
; 342  :                 info.ffInfo, IOCTL_DVFS_OPPNOTIFY, &info, sizeof(info),
; 343  :                 NULL, 0, NULL);

  0008c	e28d3010	 add         r3, sp, #0x10
  00090	e38a2b82	 orr         r2, r10, #0x82, 22
  00094	e3a00002	 mov         r0, #2
  00098	e58d1014	 str         r1, [sp, #0x14]
  0009c	e58db00c	 str         r11, [sp, #0xC]
  000a0	e58db008	 str         r11, [sp, #8]
  000a4	e58db004	 str         r11, [sp, #4]
  000a8	e58d9000	 str         r9, [sp]
  000ac	eb000000	 bl          PmxSendDeviceNotification
  000b0		 |$LN1@UpdateOpm|

; 344  :         }
; 345  : 
; 346  :     return rc;
; 347  : }

  000b0	e1a00006	 mov         r0, r6
  000b4	e28dd0c4	 add         sp, sp, #0xC4
  000b8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN24@UpdateOpm|

; 250  :                 {
; 251  :                 opmNew = (Dvfs_OperatingMode_e)i;
; 252  :                 break;
; 253  :                 }
; 254  :             }
; 255  :         }
; 256  : 
; 257  :     // Prepare to send notifications
; 258  :     if (opmNew != kOpmUndefined && s_OpmInfo.opmCurrent != opmNew)

  000c0	e3740001	 cmn         r4, #1
  000c4	0affffec	 beq         |$LN9@UpdateOpm|
  000c8		 |$LN27@UpdateOpm|
  000c8	e5953098	 ldr         r3, [r5, #0x98]
  000cc	e1530004	 cmp         r3, r4
  000d0	0affffe9	 beq         |$LN9@UpdateOpm|

; 259  :         {        
; 260  :         OALMSG(1, (L"OPM%d%s\r\n", opmNew, s_OpmInfo.idxForce == -1 ? L"" : L" -f"));

  000d4	e3760001	 cmn         r6, #1
  000d8	059f219c	 ldreq       r2, [pc, #0x19C]
  000dc	159f2194	 ldrne       r2, [pc, #0x194]
  000e0	e59f018c	 ldr         r0, [pc, #0x18C]
  000e4	e1a01004	 mov         r1, r4
  000e8	eb000000	 bl          NKDbgPrintfW

; 261  : 
; 262  :         opmOld = s_OpmInfo.opmCurrent;
; 263  : 
; 264  :         // initialize notification structure
; 265  :         info.dwCount = 0;
; 266  :         oppRequest.dwCount = 0;
; 267  :         info.size = sizeof(IOCTL_DVFS_OPPNOTIFY_IN);
; 268  :         oppRequest.size = sizeof(IOCTL_OPP_REQUEST_IN);
; 269  :         
; 270  :         // initialize structures      
; 271  :         if (s_OpmInfo.rgVddMPU1[opmOld] != s_OpmInfo.rgVddMPU1[opmNew])

  000ec	e5953098	 ldr         r3, [r5, #0x98]
  000f0	e0851104	 add         r1, r5, r4, lsl #2
  000f4	e5912014	 ldr         r2, [r1, #0x14]
  000f8	e085e103	 add         lr, r5, r3, lsl #2
  000fc	e59e6014	 ldr         r6, [lr, #0x14]
  00100	e3a0906c	 mov         r9, #0x6C
  00104	e3a0a048	 mov         r10, #0x48
  00108	e3a03000	 mov         r3, #0
  0010c	e3a00000	 mov         r0, #0
  00110	e1560002	 cmp         r6, r2
  00114	e58d3018	 str         r3, [sp, #0x18]
  00118	e58d0080	 str         r0, [sp, #0x80]
  0011c	e58d9010	 str         r9, [sp, #0x10]
  00120	e58da07c	 str         r10, [sp, #0x7C]
  00124	0a00000b	 beq         |$LN8@UpdateOpm|

; 272  :             {
; 273  :             //OALMSG(1, (L"MPU OPP%d -> OPP%d\r\n", s_OpmInfo.rgVddMPU1[opmOld], s_OpmInfo.rgVddMPU1[opmNew]));
; 274  :             dwNotificationMask |= DVFS_MPU1_PRE_NOTICE | 
; 275  :                                   DVFS_MPU1_POST_NOTICE | 
; 276  :                                   DVFS_MPU1_CANCEL_NOTICE;
; 277  : 
; 278  :             // update notification structure
; 279  :             info.rgOppInfo[info.dwCount].newOpp = s_OpmInfo.rgVddMPU1[opmNew];
; 280  :             info.rgOppInfo[info.dwCount].oldOpp = s_OpmInfo.rgVddMPU1[opmOld];
; 281  :             info.rgOppInfo[info.dwCount].domain = DVFS_MPU1_OPP;

  00128	e3a03010	 mov         r3, #0x10

; 282  :             info.dwCount++;
; 283  : 
; 284  :             // update kernel structure
; 285  :             oppRequest.rgOpps[oppRequest.dwCount] = s_OpmInfo.rgVddMPU1[opmNew];
; 286  :             oppRequest.rgDomains[oppRequest.dwCount] = DVFS_MPU1_OPP;

  0012c	e3a00010	 mov         r0, #0x10
  00130	e58d301c	 str         r3, [sp, #0x1C]
  00134	e58d0084	 str         r0, [sp, #0x84]
  00138	e3a03001	 mov         r3, #1

; 287  :             oppRequest.dwCount++;

  0013c	e3a00001	 mov         r0, #1
  00140	e58d3018	 str         r3, [sp, #0x18]
  00144	e58d0080	 str         r0, [sp, #0x80]
  00148	e3a07070	 mov         r7, #0x70
  0014c	e58d2020	 str         r2, [sp, #0x20]
  00150	e58d6024	 str         r6, [sp, #0x24]
  00154	e58d20a4	 str         r2, [sp, #0xA4]
  00158		 |$LN8@UpdateOpm|

; 288  :             }
; 289  : 
; 290  :         if (s_OpmInfo.rgVddCORE1[opmOld] != s_OpmInfo.rgVddCORE1[opmNew])

  00158	e59e603c	 ldr         r6, [lr, #0x3C]
  0015c	e591e03c	 ldr         lr, [r1, #0x3C]
  00160	e156000e	 cmp         r6, lr
  00164	0a00001b	 beq         |$LN7@UpdateOpm|

; 291  :             {
; 292  :             //OALMSG(1, (L"CORE OPP%d -> OPP%d\r\n", s_OpmInfo.rgVddCORE1[opmOld], s_OpmInfo.rgVddCORE1[opmNew]));
; 293  :             dwNotificationMask |= DVFS_CORE1_PRE_NOTICE | 
; 294  :                                   DVFS_CORE1_POST_NOTICE |
; 295  :                                   DVFS_CORE1_CANCEL_NOTICE;
; 296  : 
; 297  :             // update notification structure
; 298  :             info.rgOppInfo[info.dwCount].newOpp = s_OpmInfo.rgVddCORE1[opmNew];

  00168	e0832083	 add         r2, r3, r3, lsl #1
  0016c	e28d3010	 add         r3, sp, #0x10
  00170	e0833102	 add         r3, r3, r2, lsl #2
  00174	e583e010	 str         lr, [r3, #0x10]

; 299  :             info.rgOppInfo[info.dwCount].oldOpp = s_OpmInfo.rgVddCORE1[opmOld];

  00178	e59d3018	 ldr         r3, [sp, #0x18]
  0017c	e28d2010	 add         r2, sp, #0x10

; 300  :             info.rgOppInfo[info.dwCount].domain = DVFS_CORE1_OPP;
; 301  :             info.dwCount++;
; 302  : 
; 303  :             // update kernel structure
; 304  :             oppRequest.rgOpps[oppRequest.dwCount] = s_OpmInfo.rgVddCORE1[opmNew];

  00180	e28d107c	 add         r1, sp, #0x7C
  00184	e0833083	 add         r3, r3, r3, lsl #1
  00188	e0823103	 add         r3, r2, r3, lsl #2
  0018c	e5836014	 str         r6, [r3, #0x14]
  00190	e59d2018	 ldr         r2, [sp, #0x18]
  00194	e0813100	 add         r3, r1, r0, lsl #2
  00198	e583e028	 str         lr, [r3, #0x28]

; 305  :             oppRequest.rgDomains[oppRequest.dwCount] = DVFS_CORE1_OPP;

  0019c	e59d0080	 ldr         r0, [sp, #0x80]
  001a0	e0821082	 add         r1, r2, r2, lsl #1
  001a4	e28d207c	 add         r2, sp, #0x7C
  001a8	e28d3010	 add         r3, sp, #0x10
  001ac	e0822100	 add         r2, r2, r0, lsl #2
  001b0	e0833101	 add         r3, r3, r1, lsl #2
  001b4	e582b008	 str         r11, [r2, #8]

; 306  :             oppRequest.dwCount++;

  001b8	e59d2080	 ldr         r2, [sp, #0x80]
  001bc	e583b00c	 str         r11, [r3, #0xC]
  001c0	e59d3018	 ldr         r3, [sp, #0x18]
  001c4	e2822001	 add         r2, r2, #1
  001c8	e58d2080	 str         r2, [sp, #0x80]
  001cc	e2833001	 add         r3, r3, #1
  001d0	e58d3018	 str         r3, [sp, #0x18]
  001d4	e3877007	 orr         r7, r7, #7
  001d8		 |$LN7@UpdateOpm|

; 307  :             }
; 308  : 
; 309  :         // send pre-dvfs notification
; 310  :         info.ffInfo = dwNotificationMask & DVFS_PRENOTIFY_MASK;
; 311  :         rc = PmxSendDeviceNotification(DEVICEMEDIATOR_DVFS_LIST,
; 312  :                 info.ffInfo, IOCTL_DVFS_OPPNOTIFY, &info, sizeof(info),
; 313  :                 NULL, 0, NULL);

  001d8	e3a0a112	 mov         r10, #0x12, 2
  001dc	e2071011	 and         r1, r7, #0x11
  001e0	e3a0906c	 mov         r9, #0x6C
  001e4	e38a2b82	 orr         r2, r10, #0x82, 22
  001e8	e28d3010	 add         r3, sp, #0x10
  001ec	e3a00002	 mov         r0, #2
  001f0	e58d1014	 str         r1, [sp, #0x14]
  001f4	e58db00c	 str         r11, [sp, #0xC]
  001f8	e58db008	 str         r11, [sp, #8]
  001fc	e58db004	 str         r11, [sp, #4]
  00200	e58d9000	 str         r9, [sp]
  00204	eb000000	 bl          PmxSendDeviceNotification
  00208	e1b06000	 movs        r6, r0

; 314  :         if (rc == FALSE) goto cleanUp;

  0020c	0affff9d	 beq         |$LN26@UpdateOpm|

; 315  :                   
; 316  :         // change operating points
; 317  :         rc = KernelIoControl(IOCTL_OPP_REQUEST, &oppRequest, 
; 318  :                 sizeof(IOCTL_OPP_REQUEST_IN), 0, 0, 0
; 319  :                 );

  00210	e59f0058	 ldr         r0, [pc, #0x58]
  00214	e3a03000	 mov         r3, #0
  00218	e3a02048	 mov         r2, #0x48
  0021c	e28d107c	 add         r1, sp, #0x7C
  00220	e58db004	 str         r11, [sp, #4]
  00224	e58db000	 str         r11, [sp]
  00228	eb000000	 bl          KernelIoControl
  0022c	e1b06000	 movs        r6, r0

; 320  :         if (rc == FALSE) goto cleanUp;

  00230	0affff94	 beq         |$LN26@UpdateOpm|

; 321  : 
; 322  :         // send post-dvfs notification
; 323  :         info.ffInfo = dwNotificationMask & DVFS_POSTNOTIFY_MASK;

  00234	e2071022	 and         r1, r7, #0x22

; 324  :         PmxSendDeviceNotification(DEVICEMEDIATOR_DVFS_LIST,
; 325  :                 info.ffInfo, IOCTL_DVFS_OPPNOTIFY, &info, sizeof(info),
; 326  :                 NULL, 0, NULL);

  00238	e28d3010	 add         r3, sp, #0x10
  0023c	e38a2b82	 orr         r2, r10, #0x82, 22
  00240	e3a00002	 mov         r0, #2
  00244	e58d1014	 str         r1, [sp, #0x14]
  00248	e58db00c	 str         r11, [sp, #0xC]
  0024c	e58db008	 str         r11, [sp, #8]
  00250	e58db004	 str         r11, [sp, #4]
  00254	e58d9000	 str         r9, [sp]
  00258	eb000000	 bl          PmxSendDeviceNotification

; 327  : 
; 328  :         s_OpmInfo.opmCurrent = opmNew;
; 329  : 
; 330  :         NotifyCallbacks(opmNew, idContext);

  0025c	e1a01008	 mov         r1, r8
  00260	e1a00004	 mov         r0, r4
  00264	e5854098	 str         r4, [r5, #0x98]
  00268	eb000000	 bl          |?NotifyCallbacks@@YAXKK@Z|

; 331  :         }
; 332  :     else

  0026c	eaffff83	 b           |$cleanUp$40023|
  00270		 |$LN32@UpdateOpm|
  00270		 |$LN33@UpdateOpm|
  00270	01f50fd4	 DCD         0x1f50fd4
  00274		 |$LN34@UpdateOpm|
  00274	00000000	 DCD         |??_C@_1BE@DAEMMAAB@?$AAO?$AAP?$AAM?$AA?$CF?$AAd?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00278		 |$LN35@UpdateOpm|
  00278	00000000	 DCD         |??_C@_17MGNEPMPH@?$AA?5?$AA?9?$AAf?$AA?$AA@|
  0027c		 |$LN36@UpdateOpm|
  0027c	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  00280		 |$LN37@UpdateOpm|
  00280	00000000	 DCD         |s_IndexList|
  00284		 |$LN38@UpdateOpm|
  00284	00000000	 DCD         |s_OpmInfo|
  00288		 |$M41841|

			 ENDP  ; |?UpdateOpm@@YAHK@Z|, UpdateOpm

	EXPORT	|?DVFS_UpdateConstraint@@YAHPAXK0I@Z|	; DVFS_UpdateConstraint

  00000			 AREA	 |.pdata|, PDATA
|$T41880| DCD	|$LN30@DVFS_Updat|
	DCD	0x40003d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DVFS_UpdateConstraint@@YAHPAXK0I@Z| PROC ; DVFS_UpdateConstraint

; 552  : {

  00000		 |$LN30@DVFS_Updat|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M41877|
  00004	e1a04002	 mov         r4, r2
  00008	e1a08001	 mov         r8, r1

; 553  :     DWORD opmNew;
; 554  :     DWORD dwParam;    
; 555  :     BOOL rc = FALSE;

  0000c	e3a05000	 mov         r5, #0

; 556  :     DWORD *pDataNode;
; 557  :     DWORD id = (DWORD)hConstraintContext - 1;

  00010	e2406001	 sub         r6, r0, #1

; 558  :     
; 559  :     // validate parameters
; 560  :     if (size != sizeof(DWORD)) goto cleanUp;

  00014	e3530004	 cmp         r3, #4
  00018	1a000030	 bne         |$cleanUp$40133|

; 561  :     if (id > s_IndexList.MaxIndex()) goto cleanUp;

  0001c	e59f00cc	 ldr         r0, [pc, #0xCC]
  00020	e5903088	 ldr         r3, [r0, #0x88]
  00024	e1560003	 cmp         r6, r3
  00028	8a00002c	 bhi         |$cleanUp$40133|

; 562  : 
; 563  :     // get data node
; 564  :     pDataNode = s_IndexList.GetIndex(id);

  0002c	e1a01006	 mov         r1, r6
  00030	eb000000	 bl          |?GetIndex@?$IndexList@K@@QAAPAKK@Z|
  00034	e1b07000	 movs        r7, r0

; 565  :     if (pDataNode == NULL) goto cleanUp;

  00038	0a000028	 beq         |$cleanUp$40133|

; 566  : 
; 567  :     // determine new opm
; 568  :     dwParam = *(DWORD*)pParam;

  0003c	e5945000	 ldr         r5, [r4]

; 569  :     if (CONSTRAINT_STATE_NULL == dwParam)

  00040	e59f40a4	 ldr         r4, [pc, #0xA4]
  00044	e3e02000	 mvn         r2, #0
  00048	e3750801	 cmn         r5, #1, 16

; 570  :         {
; 571  :         //OALMSG(1, (L"DVFS_UpdateConstraint - undefined\r\n"));
; 572  :         opmNew = (DWORD) kOpmUndefined;

  0004c	01a05002	 moveq       r5, r2
  00050	0a000007	 beq         |$LN21@DVFS_Updat|
  00054	e3e03cff	 mvn         r3, #0xFF, 24

; 573  :         }
; 574  :     else if (CONSTRAINT_STATE_FLOOR == dwParam)

  00058	e22330fe	 eor         r3, r3, #0xFE
  0005c	e1550003	 cmp         r5, r3

; 575  :         {
; 576  :         //OALMSG(1, (L"DVFS_UpdateConstraint - FLOOR\r\n"));
; 577  :         opmNew = s_OpmInfo.opmFloor;

  00060	05945090	 ldreq       r5, [r4, #0x90]
  00064	0a000002	 beq         |$LN21@DVFS_Updat|

; 578  :         }
; 579  :     else 
; 580  :         {
; 581  :         //OALMSG(1, (L"DVFS_UpdateConstraint - OPM%d\r\n", dwParam));
; 582  :         opmNew = min(dwParam, s_OpmInfo.opmCeiling);

  00068	e594308c	 ldr         r3, [r4, #0x8C]
  0006c	e1550003	 cmp         r5, r3
  00070	21a05003	 movcs       r5, r3
  00074		 |$LN21@DVFS_Updat|

; 583  :         }
; 584  : 
; 585  :     if (s_OpmInfo.idxForce == id)

  00074	e5943094	 ldr         r3, [r4, #0x94]

; 586  :         {
; 587  :         s_OpmInfo.idxForce = (DWORD) -1;
; 588  :         }
; 589  : 
; 590  :     // serialize access
; 591  :     Lock();

  00078	e1a00004	 mov         r0, r4
  0007c	e1530006	 cmp         r3, r6
  00080	05842094	 streq       r2, [r4, #0x94]
  00084	eb000000	 bl          EnterCriticalSection

; 592  :            
; 593  :     // process constraint message
; 594  :     switch (msg)

  00088	e3580001	 cmp         r8, #1
  0008c	0a000002	 beq         |$LN3@DVFS_Updat|
  00090	e3580102	 cmp         r8, #2, 2
  00094	1a00000c	 bne         |$LN5@DVFS_Updat|

; 595  :         {
; 596  :         case DVFS_FORCE:
; 597  :             s_OpmInfo.idxForce = id;

  00098	e5846094	 str         r6, [r4, #0x94]
  0009c		 |$LN3@DVFS_Updat|

; 598  : 
; 599  :             //fall-through
; 600  :             
; 601  :         case CONSTRAINT_MSG_DVFS_REQUEST:
; 602  :             // update new constraint
; 603  :             if (*pDataNode != kOpmUndefined)

  0009c	e5973000	 ldr         r3, [r7]
  000a0	e3730001	 cmn         r3, #1

; 604  :                 {
; 605  :                 s_OpmInfo.opmTable[*pDataNode] -= 1;

  000a4	10842103	 addne       r2, r4, r3, lsl #2
  000a8	15923064	 ldrne       r3, [r2, #0x64]
  000ac	12433001	 subne       r3, r3, #1
  000b0	15823064	 strne       r3, [r2, #0x64]

; 606  :                 }
; 607  : 
; 608  :             if (opmNew != kOpmUndefined)

  000b4	e3750001	 cmn         r5, #1

; 609  :                 {
; 610  :                 s_OpmInfo.opmTable[opmNew] += 1;

  000b8	10842105	 addne       r2, r4, r5, lsl #2
  000bc	15923064	 ldrne       r3, [r2, #0x64]
  000c0	12833001	 addne       r3, r3, #1
  000c4	15823064	 strne       r3, [r2, #0x64]

; 611  :                 }
; 612  :             *pDataNode = opmNew;

  000c8	e5875000	 str         r5, [r7]
  000cc		 |$LN5@DVFS_Updat|

; 613  :             break;
; 614  :         }
; 615  :     
; 616  :     // update operating mode
; 617  :     rc = UpdateOpm(id);

  000cc	e1a00006	 mov         r0, r6
  000d0	eb000000	 bl          |?UpdateOpm@@YAHK@Z|
  000d4	e1a05000	 mov         r5, r0

; 618  :     
; 619  :     Unlock();

  000d8	e1a00004	 mov         r0, r4
  000dc	eb000000	 bl          LeaveCriticalSection
  000e0		 |$cleanUp$40133|

; 620  : 
; 621  : cleanUp:
; 622  :     return rc;
; 623  : } 

  000e0	e1a00005	 mov         r0, r5
  000e4	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000e8	e12fff1e	 bx          lr
  000ec		 |$LN31@DVFS_Updat|
  000ec		 |$LN32@DVFS_Updat|
  000ec	00000000	 DCD         |s_OpmInfo|
  000f0		 |$LN33@DVFS_Updat|
  000f0	00000000	 DCD         |s_IndexList|
  000f4		 |$M41878|

			 ENDP  ; |?DVFS_UpdateConstraint@@YAHPAXK0I@Z|, DVFS_UpdateConstraint

	EXPORT	|?DVFS_CloseConstraint@@YAHPAX@Z|	; DVFS_CloseConstraint
	IMPORT	|LocalFree|

  00000			 AREA	 |.pdata|, PDATA
|$T42013| DCD	|$LN68@DVFS_Close|
	DCD	0x40004a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DVFS_CloseConstraint@@YAHPAX@Z| PROC	; DVFS_CloseConstraint

; 635  : {

  00000		 |$LN68@DVFS_Close|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M42010|
  00008	e1a09000	 mov         r9, r0

; 636  :     DWORD *pDataNode;
; 637  :     BOOL rc = FALSE;
; 638  :     DWORD id = (DWORD)hConstraintContext - 1;
; 639  :     list<DVFSCallbackInfo_t*>::iterator iter;
; 640  : 
; 641  :     // validate
; 642  :     if (id > s_IndexList.MaxIndex()) goto cleanUp;

  0000c	e59f8110	 ldr         r8, [pc, #0x110]
  00010	e2496001	 sub         r6, r9, #1
  00014	e3a04000	 mov         r4, #0
  00018	e5983088	 ldr         r3, [r8, #0x88]
  0001c	e1560003	 cmp         r6, r3
  00020	8a000039	 bhi         |$cleanUp$40168|

; 643  : 
; 644  :     // get data node
; 645  :     pDataNode = s_IndexList.GetIndex(id);

  00024	e1a01006	 mov         r1, r6
  00028	e1a00008	 mov         r0, r8
  0002c	eb000000	 bl          |?GetIndex@?$IndexList@K@@QAAPAKK@Z|
  00030	e1b05000	 movs        r5, r0

; 646  :     if (pDataNode == NULL) goto cleanUp;

  00034	0a000034	 beq         |$cleanUp$40168|

; 647  : 
; 648  :     Lock();

  00038	e59f70e0	 ldr         r7, [pc, #0xE0]
  0003c	e1a00007	 mov         r0, r7
  00040	eb000000	 bl          EnterCriticalSection

; 649  : 
; 650  :     // free any forced constraint
; 651  :     if (s_OpmInfo.idxForce == id)

  00044	e5973094	 ldr         r3, [r7, #0x94]
  00048	e1530006	 cmp         r3, r6

; 652  :         {
; 653  :         s_OpmInfo.idxForce = (DWORD) -1;

  0004c	03e03000	 mvneq       r3, #0
  00050	05873094	 streq       r3, [r7, #0x94]

; 654  :         }
; 655  : 
; 656  :     // update operating mode
; 657  :     if (*pDataNode != kOpmUndefined)

  00054	e5953000	 ldr         r3, [r5]
  00058	e3730001	 cmn         r3, #1

; 658  :         {
; 659  :         s_OpmInfo.opmTable[*pDataNode] -= 1;

  0005c	10872103	 addne       r2, r7, r3, lsl #2
  00060	15923064	 ldrne       r3, [r2, #0x64]

; 660  :         UpdateOpm(id);

  00064	11a00006	 movne       r0, r6
  00068	12433001	 subne       r3, r3, #1
  0006c	15823064	 strne       r3, [r2, #0x64]
  00070	1b000000	 blne        |?UpdateOpm@@YAHK@Z|

; 661  :         }
; 662  :        
; 663  :     // remove any associated callbacks
; 664  :     for (iter = s_CallbackList.begin(); iter != s_CallbackList.end(); ++iter)

  00074	e59f50a0	 ldr         r5, [pc, #0xA0]
  00078	e5952004	 ldr         r2, [r5, #4]
  0007c	e5924000	 ldr         r4, [r2]
  00080		 |$LL29@DVFS_Close|
  00080	e1540002	 cmp         r4, r2
  00084	03a03001	 moveq       r3, #1
  00088	13a03000	 movne       r3, #0
  0008c	e21330ff	 ands        r3, r3, #0xFF
  00090	03a03001	 moveq       r3, #1
  00094	13a03000	 movne       r3, #0
  00098	e21330ff	 ands        r3, r3, #0xFF

; 681  : cleanUp:    
; 682  :     return rc;
; 683  : } 

  0009c	0a00000a	 beq         |$LN2@DVFS_Close|
  000a0	e5943008	 ldr         r3, [r4, #8]
  000a4	e593300c	 ldr         r3, [r3, #0xC]
  000a8	e1530009	 cmp         r3, r9
  000ac	15944000	 ldrne       r4, [r4]
  000b0	1afffff2	 bne         |$LL29@DVFS_Close|
  000b4	e5940008	 ldr         r0, [r4, #8]
  000b8	eb000000	 bl          LocalFree
  000bc	e1a02004	 mov         r2, r4
  000c0	e28d1000	 add         r1, sp, #0
  000c4	e1a00005	 mov         r0, r5
  000c8	eb000000	 bl          |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@@Z|
  000cc		 |$LN2@DVFS_Close|

; 665  :         {
; 666  :         if ((*iter)->hConstraintContext == hConstraintContext)
; 667  :             {
; 668  :             // free resources
; 669  :             LocalFree(*iter);
; 670  :             s_CallbackList.erase(iter);
; 671  :             rc = TRUE;
; 672  :             break;
; 673  :             }
; 674  :         }
; 675  : 
; 676  :     s_IndexList.DeleteIndex(id);    

  000cc	e1b022a6	 movs        r2, r6, lsr #5
  000d0	0a000005	 beq         |$LN56@DVFS_Close|
  000d4		 |$LL57@DVFS_Close|
  000d4	e5983000	 ldr         r3, [r8]
  000d8	e2422001	 sub         r2, r2, #1
  000dc	e1b08003	 movs        r8, r3
  000e0	0a000006	 beq         |$LN58@DVFS_Close|
  000e4	e3520000	 cmp         r2, #0
  000e8	1afffff9	 bne         |$LL57@DVFS_Close|
  000ec		 |$LN56@DVFS_Close|
  000ec	e5983004	 ldr         r3, [r8, #4]
  000f0	e206201f	 and         r2, r6, #0x1F
  000f4	e3a01001	 mov         r1, #1
  000f8	e1c33211	 bic         r3, r3, r1, lsl r2
  000fc	e5883004	 str         r3, [r8, #4]
  00100		 |$LN58@DVFS_Close|

; 677  :     Unlock();

  00100	e1a00007	 mov         r0, r7
  00104	eb000000	 bl          LeaveCriticalSection

; 678  :     
; 679  :     
; 680  :     rc = TRUE;

  00108	e3a04001	 mov         r4, #1
  0010c		 |$cleanUp$40168|

; 681  : cleanUp:    
; 682  :     return rc;
; 683  : } 

  0010c	e1a00004	 mov         r0, r4
  00110	e28dd004	 add         sp, sp, #4
  00114	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00118	e12fff1e	 bx          lr
  0011c		 |$LN69@DVFS_Close|
  0011c		 |$LN70@DVFS_Close|
  0011c	00000000	 DCD         |s_CallbackList|
  00120		 |$LN71@DVFS_Close|
  00120	00000000	 DCD         |s_OpmInfo|
  00124		 |$LN72@DVFS_Close|
  00124	00000000	 DCD         |s_IndexList|
  00128		 |$M42011|

			 ENDP  ; |?DVFS_CloseConstraint@@YAHPAX@Z|, DVFS_CloseConstraint

	EXPORT	|?DVFS_RemoveConstraintCallback@@YAHPAX@Z| ; DVFS_RemoveConstraintCallback

  00000			 AREA	 |.pdata|, PDATA
|$T42129| DCD	|$LN53@DVFS_Remov|
	DCD	0x40002502
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DVFS_RemoveConstraintCallback@@YAHPAX@Z| PROC ; DVFS_RemoveConstraintCallback

; 743  : {

  00000		 |$LN53@DVFS_Remov|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M42126|
  00008	e1a07000	 mov         r7, r0

; 744  :     BOOL rc = FALSE;
; 745  :     list<DVFSCallbackInfo_t*>::iterator iter;
; 746  :     
; 747  :     // find entry with matching callback info
; 748  :     Lock();

  0000c	e59f0078	 ldr         r0, [pc, #0x78]
  00010	e3a05000	 mov         r5, #0
  00014	eb000000	 bl          EnterCriticalSection

; 749  :     for (iter = s_CallbackList.begin(); iter != s_CallbackList.end(); ++iter)

  00018	e59f6070	 ldr         r6, [pc, #0x70]
  0001c	e5962004	 ldr         r2, [r6, #4]
  00020	e5924000	 ldr         r4, [r2]
  00024		 |$LL21@DVFS_Remov|
  00024	e1540002	 cmp         r4, r2
  00028	03a03001	 moveq       r3, #1
  0002c	13a03000	 movne       r3, #0
  00030	e21330ff	 ands        r3, r3, #0xFF
  00034	03a03001	 moveq       r3, #1
  00038	13a03000	 movne       r3, #0
  0003c	e21330ff	 ands        r3, r3, #0xFF

; 750  :         {
; 751  :         if ((*iter)->hCallbackContext == hConstraintCallback)
; 752  :             {
; 753  :             // free resources
; 754  :             LocalFree(*iter);
; 755  :             s_CallbackList.erase(iter);
; 756  :             rc = TRUE;
; 757  :             break;
; 758  :             }
; 759  :         }
; 760  :     Unlock();
; 761  : 
; 762  :     return rc;
; 763  : } 

  00040	0a00000b	 beq         |$LN2@DVFS_Remov|
  00044	e5943008	 ldr         r3, [r4, #8]
  00048	e5933010	 ldr         r3, [r3, #0x10]
  0004c	e1530007	 cmp         r3, r7
  00050	15944000	 ldrne       r4, [r4]
  00054	1afffff2	 bne         |$LL21@DVFS_Remov|
  00058	e5940008	 ldr         r0, [r4, #8]
  0005c	eb000000	 bl          LocalFree
  00060	e1a02004	 mov         r2, r4
  00064	e28d1000	 add         r1, sp, #0
  00068	e1a00006	 mov         r0, r6
  0006c	eb000000	 bl          |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@@Z|
  00070	e3a05001	 mov         r5, #1
  00074		 |$LN2@DVFS_Remov|
  00074	e59f0010	 ldr         r0, [pc, #0x10]
  00078	eb000000	 bl          LeaveCriticalSection
  0007c	e1a00005	 mov         r0, r5
  00080	e28dd004	 add         sp, sp, #4
  00084	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN54@DVFS_Remov|
  0008c		 |$LN55@DVFS_Remov|
  0008c	00000000	 DCD         |s_OpmInfo|
  00090		 |$LN56@DVFS_Remov|
  00090	00000000	 DCD         |s_CallbackList|
  00094		 |$M42127|

			 ENDP  ; |?DVFS_RemoveConstraintCallback@@YAHPAX@Z|, DVFS_RemoveConstraintCallback

	EXPORT	|??0?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@ABV?$allocator@PAUDVFSCallbackInfo_t@@@1@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >
; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.pdata|, PDATA
|$T42188| DCD	|$LN22@list|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@ABV?$allocator@PAUDVFSCallbackInfo_t@@@1@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >

; 145  : 		_Head(_Buynode()), _Size(0) {}

  00000		 |$LN22@list|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M42185|
  00004	e1a04000	 mov         r4, r0
  00008	e3a0000c	 mov         r0, #0xC
  0000c	eb000000	 bl          |??2@YAPAXI@Z|
  00010	e5800000	 str         r0, [r0]
  00014	e5800004	 str         r0, [r0, #4]
  00018	e3a03000	 mov         r3, #0
  0001c	e5840004	 str         r0, [r4, #4]
  00020	e1a00004	 mov         r0, r4
  00024	e5843008	 str         r3, [r4, #8]
  00028	e8bd4010	 ldmia       sp!, {r4, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M42186|

			 ENDP  ; |??0?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@ABV?$allocator@PAUDVFSCallbackInfo_t@@@1@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >

	EXPORT	|??1?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::~list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >
; File c:\wince600\public\common\sdk\inc\xmemory

  00000			 AREA	 |.pdata|, PDATA
|$T42248| DCD	|$LN23@list@2|
	DCD	0x40000f02
; Function compile flags: /Ogspy
; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::~list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >

; 165  : 		{erase(begin(), end());

  00000		 |$LN23@list@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M42245|
  00008	e1a04000	 mov         r4, r0
  0000c	e5943004	 ldr         r3, [r4, #4]
  00010	e28d1000	 add         r1, sp, #0
  00014	e5932000	 ldr         r2, [r3]
  00018	eb000000	 bl          |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@0@Z|

; 166  : 		_Freenode(_Head);

  0001c	e5940004	 ldr         r0, [r4, #4]
  00020	eb000000	 bl          |??3@YAXPAX@Z|

; 167  : 		_Head = 0, _Size = 0; }

  00024	e3a03000	 mov         r3, #0
  00028	e5843004	 str         r3, [r4, #4]
  0002c	e5843008	 str         r3, [r4, #8]
  00030	e28dd004	 add         sp, sp, #4
  00034	e8bd4010	 ldmia       sp!, {r4, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M42246|

			 ENDP  ; |??1?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::~list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >

	EXPORT	|?insert@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@ABQAUDVFSCallbackInfo_t@@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::insert

  00000			 AREA	 |.pdata|, PDATA
|$T42366| DCD	|$LN48@insert|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?insert@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@ABQAUDVFSCallbackInfo_t@@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::insert

; 232  : 		{_Nodeptr _S = _P._Mynode();

  00000		 |$LN48@insert|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M42363|
  00004	e1a09003	 mov         r9, r3
  00008	e1a04002	 mov         r4, r2
  0000c	e1a05001	 mov         r5, r1
  00010	e1a06000	 mov         r6, r0

; 233  : 		_Acc::_Prev(_S) = _Buynode(_S, _Acc::_Prev(_S));

  00014	e1a08004	 mov         r8, r4
  00018	e5b87004	 ldr         r7, [r8, #4]!
  0001c	e3a0000c	 mov         r0, #0xC
  00020	eb000000	 bl          |??2@YAPAXI@Z|
  00024	e3570000	 cmp         r7, #0
  00028	01a07000	 moveq       r7, r0
  0002c	e5804000	 str         r4, [r0]
  00030	e5807004	 str         r7, [r0, #4]

; 234  : 		_S = _Acc::_Prev(_S);

  00034	e1a02000	 mov         r2, r0
  00038	e5880000	 str         r0, [r8]

; 235  : 		_Acc::_Next(_Acc::_Prev(_S)) = _S;

  0003c	e5923004	 ldr         r3, [r2, #4]

; 236  : 		allocator.construct(&_Acc::_Value(_S), _X);

  00040	e2921008	 adds        r1, r2, #8

; 237  : 		++_Size;
; 238  : 		return (iterator(_S)); }

  00044	e5852000	 str         r2, [r5]
  00048	e5832000	 str         r2, [r3]
  0004c	15993000	 ldrne       r3, [r9]
  00050	e1a00005	 mov         r0, r5
  00054	15813000	 strne       r3, [r1]
  00058	e5963008	 ldr         r3, [r6, #8]
  0005c	e2833001	 add         r3, r3, #1
  00060	e5863008	 str         r3, [r6, #8]
  00064	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M42364|

			 ENDP  ; |?insert@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@ABQAUDVFSCallbackInfo_t@@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::insert

	EXPORT	|?push_back@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAXABQAUDVFSCallbackInfo_t@@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::push_back

  00000			 AREA	 |.pdata|, PDATA
|$T42394| DCD	|$LN11@push_back|
	DCD	0x40000902
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?push_back@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAXABQAUDVFSCallbackInfo_t@@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::push_back

; 222  : 		{insert(end(), _X); }

  00000		 |$LN11@push_back|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M42391|
  00008	e1a03001	 mov         r3, r1
  0000c	e5902004	 ldr         r2, [r0, #4]
  00010	e28d1000	 add         r1, sp, #0
  00014	eb000000	 bl          |?insert@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@ABQAUDVFSCallbackInfo_t@@@Z|
  00018	e28dd004	 add         sp, sp, #4
  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M42392|

			 ENDP  ; |?push_back@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAXABQAUDVFSCallbackInfo_t@@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::push_back

	EXPORT	|?DVFS_InsertConstraintCallback@@YAPAXPAX00I0@Z| ; DVFS_InsertConstraintCallback
	IMPORT	|LocalAlloc|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\constraintadapters\dvfsconstraint\dvfsconstraint.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T42447| DCD	|$LN25@DVFS_Inser|
	DCD	0x40002702
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DVFS_InsertConstraintCallback@@YAPAXPAX00I0@Z| PROC ; DVFS_InsertConstraintCallback

; 699  : {

  00000		 |$LN25@DVFS_Inser|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M42444|
  00008	e1a05001	 mov         r5, r1
  0000c	e1a04000	 mov         r4, r0

; 700  :     HANDLE rc = NULL;
; 701  :     DWORD *pDataNode;
; 702  :     DWORD id = (DWORD)hConstraintContext - 1;
; 703  :     DVFSCallbackInfo_t *pCallbackInfo;
; 704  : 
; 705  :     UNREFERENCED_PARAMETER(size);
; 706  :     UNREFERENCED_PARAMETER(pParam);
; 707  :     // validate
; 708  :     if (id > s_IndexList.MaxIndex()) goto cleanUp;

  00010	e59f0080	 ldr         r0, [pc, #0x80]
  00014	e2441001	 sub         r1, r4, #1
  00018	e5903088	 ldr         r3, [r0, #0x88]
  0001c	e1510003	 cmp         r1, r3
  00020	8a000016	 bhi         |$cleanUp$40195|

; 709  : 
; 710  :     // get data node
; 711  :     pDataNode = s_IndexList.GetIndex(id);

  00024	eb000000	 bl          |?GetIndex@?$IndexList@K@@QAAPAKK@Z|
  00028	e3500000	 cmp         r0, #0

; 712  :     if (pDataNode == NULL) goto cleanUp;

  0002c	0a000013	 beq         |$cleanUp$40195|

; 713  : 
; 714  :     // allocate callback structure
; 715  :     pCallbackInfo = (DVFSCallbackInfo_t*)LocalAlloc(LPTR, sizeof(DVFSCallbackInfo_t));

  00030	e3a01014	 mov         r1, #0x14
  00034	e3a00040	 mov         r0, #0x40
  00038	eb000000	 bl          LocalAlloc
  0003c	e1b02000	 movs        r2, r0
  00040	e58d2000	 str         r2, [sp]

; 716  :     if (pCallbackInfo == NULL) goto cleanUp;

  00044	0a00000d	 beq         |$cleanUp$40195|

; 717  : 
; 718  :     // initialize structure
; 719  :     pCallbackInfo->fnCallback = (ConstraintCallback)pCallback;
; 720  :     pCallbackInfo->hConstraintContext = hConstraintContext;
; 721  :     pCallbackInfo->hCallbackContext = pCallbackInfo;
; 722  :     pCallbackInfo->hRefContext = hRefContext;
; 723  :     
; 724  :     // insert into callback list
; 725  :     Lock();

  00048	e59d3014	 ldr         r3, [sp, #0x14]
  0004c	e59f003c	 ldr         r0, [pc, #0x3C]
  00050	e5825004	 str         r5, [r2, #4]
  00054	e582400c	 str         r4, [r2, #0xC]
  00058	e5822010	 str         r2, [r2, #0x10]
  0005c	e5823008	 str         r3, [r2, #8]
  00060	eb000000	 bl          EnterCriticalSection

; 726  :     s_CallbackList.push_back(pCallbackInfo);

  00064	e59f0028	 ldr         r0, [pc, #0x28]
  00068	e28d3000	 add         r3, sp, #0
  0006c	e28d1004	 add         r1, sp, #4
  00070	e5902004	 ldr         r2, [r0, #4]
  00074	eb000000	 bl          |?insert@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@ABQAUDVFSCallbackInfo_t@@@Z|

; 727  :     Unlock();

  00078	e59f0010	 ldr         r0, [pc, #0x10]
  0007c	eb000000	 bl          LeaveCriticalSection
  00080		 |$cleanUp$40195|

; 728  :     
; 729  : cleanUp:
; 730  :     return rc;

  00080	e3a00000	 mov         r0, #0

; 731  : } 

  00084	e28dd008	 add         sp, sp, #8
  00088	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN26@DVFS_Inser|
  00090		 |$LN27@DVFS_Inser|
  00090	00000000	 DCD         |s_OpmInfo|
  00094		 |$LN28@DVFS_Inser|
  00094	00000000	 DCD         |s_CallbackList|
  00098		 |$LN29@DVFS_Inser|
  00098	00000000	 DCD         |s_IndexList|
  0009c		 |$M42445|

			 ENDP  ; |?DVFS_InsertConstraintCallback@@YAPAXPAX00I0@Z|, DVFS_InsertConstraintCallback

	IMPORT	|atexit|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\inc\indexlist.h

  00000			 AREA	 |.pdata|, PDATA
|$T42461| DCD	|$LN7@dynamic|
	DCD	0x40000e01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\constraintadapters\dvfsconstraint\dvfsconstraint.cpp

  00000			 AREA	 |.text$yc|, CODE, ARM

  00000		 |??__Es_IndexList@@YAXXZ| PROC		; `dynamic initializer for 's_IndexList''

; 78   : static IndexList<DWORD>        s_IndexList;

  00000		 |$LN7@dynamic|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M42458|
  00004	e59f4028	 ldr         r4, [pc, #0x28]
  00008	e3a02088	 mov         r2, #0x88
  0000c	e3a01000	 mov         r1, #0
  00010	e1a00004	 mov         r0, r4
  00014	eb000000	 bl          memset
  00018	e59f0010	 ldr         r0, [pc, #0x10]
  0001c	e3a0301f	 mov         r3, #0x1F
  00020	e5843088	 str         r3, [r4, #0x88]
  00024	eb000000	 bl          atexit
  00028	e8bd4010	 ldmia       sp!, {r4, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$LN8@dynamic|
  00030		 |$LN9@dynamic|
  00030	00000000	 DCD         |??__Fs_IndexList@@YAXXZ|
  00034		 |$LN10@dynamic|
  00034	00000000	 DCD         |s_IndexList|
  00038		 |$M42459|

			 ENDP  ; |??__Es_IndexList@@YAXXZ|, `dynamic initializer for 's_IndexList''

; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.pdata|, PDATA
|$T42539| DCD	|$LN24@dynamic@2|
	DCD	0x40001001
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\constraintadapters\dvfsconstraint\dvfsconstraint.cpp

  00000			 AREA	 |.text$yc|, CODE, ARM

  00000		 |??__Es_CallbackList@@YAXXZ| PROC	; `dynamic initializer for 's_CallbackList''

; 79   : static list<DVFSCallbackInfo_t*> s_CallbackList;

  00000		 |$LN24@dynamic@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M42536|
  00004	e3a0000c	 mov         r0, #0xC
  00008	eb000000	 bl          |??2@YAPAXI@Z|
  0000c	e59f2028	 ldr         r2, [pc, #0x28]
  00010	e1a03000	 mov         r3, r0
  00014	e5833000	 str         r3, [r3]
  00018	e59f0018	 ldr         r0, [pc, #0x18]
  0001c	e5833004	 str         r3, [r3, #4]
  00020	e5823004	 str         r3, [r2, #4]
  00024	e3a03000	 mov         r3, #0
  00028	e5823008	 str         r3, [r2, #8]
  0002c	eb000000	 bl          atexit
  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$LN25@dynamic@2|
  00038		 |$LN26@dynamic@2|
  00038	00000000	 DCD         |??__Fs_CallbackList@@YAXXZ|
  0003c		 |$LN27@dynamic@2|
  0003c	00000000	 DCD         |s_CallbackList|
  00040		 |$M42537|

			 ENDP  ; |??__Es_CallbackList@@YAXXZ|, `dynamic initializer for 's_CallbackList''


  00000			 AREA	 |.pdata|, PDATA
|$T42563| DCD	|$LN12@dynamic@3|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text$yd|, CODE, ARM

  00000		 |??__Fs_IndexList@@YAXXZ| PROC		; `dynamic atexit destructor for 's_IndexList''
  00000		 |$LN12@dynamic@3|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M42560|
  00004	e59f3020	 ldr         r3, [pc, #0x20]
  00008	e5934000	 ldr         r4, [r3]
  0000c	ea000002	 b           |$LN9@dynamic@3|
  00010		 |$LL4@dynamic@3|
  00010	e1a00004	 mov         r0, r4
  00014	e5944000	 ldr         r4, [r4]
  00018	eb000000	 bl          |??3@YAXPAX@Z|
  0001c		 |$LN9@dynamic@3|
  0001c	e3540000	 cmp         r4, #0
  00020	1afffffa	 bne         |$LL4@dynamic@3|
  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$LN13@dynamic@3|
  0002c		 |$LN14@dynamic@3|
  0002c	00000000	 DCD         |s_IndexList|
  00030		 |$M42561|

			 ENDP  ; |??__Fs_IndexList@@YAXXZ|, `dynamic atexit destructor for 's_IndexList''


  00000			 AREA	 |.pdata|, PDATA
|$T42572| DCD	|$LN5@dynamic@4|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text$yd|, CODE, ARM

  00000		 |??__Fs_CallbackList@@YAXXZ| PROC	; `dynamic atexit destructor for 's_CallbackList''
  00000		 |$LN5@dynamic@4|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M42569|
  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          |??1?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ|
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@dynamic@4|
  00014		 |$LN7@dynamic@4|
  00014	00000000	 DCD         |s_CallbackList|
  00018		 |$M42570|

			 ENDP  ; |??__Fs_CallbackList@@YAXXZ|, `dynamic atexit destructor for 's_CallbackList''


  00138			 AREA	 |.bss|, NOINIT
|s_IndexList| %	0x8c
|s_CallbackList| % 0xc

  00000			 AREA	 |.CRT$XCU|, DATA
|s_IndexList$initializer$| DCD |??__Es_IndexList@@YAXXZ|
|s_CallbackList$initializer$| DCD |??__Es_CallbackList@@YAXXZ|
	END
