; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\PM\CONSTRAINTROOT\constraintadapter.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?IsHex@@YAHG@Z|			; IsHex
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\constraintroot\constraintadapter.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T33684| DCD	|$LN9@IsHex|
	DCD	0x40001000
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsHex@@YAHG@Z| PROC			; IsHex

; 39   : {

  00000		 |$LN9@IsHex|
  00000		 |$M33681|

; 40   :     if (c >= _T('0') && c <= _T('9')) return TRUE;

  00000	e3500030	 cmp         r0, #0x30
  00004	3a000003	 bcc         |$LN3@IsHex|
  00008	e3500039	 cmp         r0, #0x39
  0000c	8a000001	 bhi         |$LN3@IsHex|
  00010		 |$LN6@IsHex|
  00010	e3a00001	 mov         r0, #1

; 44   : }

  00014	e12fff1e	 bx          lr
  00018		 |$LN3@IsHex|

; 41   :     if (c >= _T('a') && c <= _T('f')) return TRUE;

  00018	e3500061	 cmp         r0, #0x61
  0001c	3a000001	 bcc         |$LN2@IsHex|
  00020	e3500066	 cmp         r0, #0x66
  00024	9afffff9	 bls         |$LN6@IsHex|
  00028		 |$LN2@IsHex|

; 42   :     if (c >= _T('A') && c <= _T('F')) return TRUE;

  00028	e3500041	 cmp         r0, #0x41
  0002c	3a000001	 bcc         |$LN1@IsHex|
  00030	e3500046	 cmp         r0, #0x46
  00034	9afffff5	 bls         |$LN6@IsHex|
  00038		 |$LN1@IsHex|

; 43   :     return FALSE;

  00038	e3a00000	 mov         r0, #0

; 44   : }

  0003c	e12fff1e	 bx          lr
  00040		 |$M33682|

			 ENDP  ; |?IsHex@@YAHG@Z|, IsHex

	EXPORT	|?ParseConstraintClassification@ConstraintAdapter@@IAAHPBGK@Z| ; ConstraintAdapter::ParseConstraintClassification
	IMPORT	|wcstoul|

  00000			 AREA	 |.pdata|, PDATA
|$T33707| DCD	|$LN26@ParseConst|
	DCD	0x40003c02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ParseConstraintClassification@ConstraintAdapter@@IAAHPBGK@Z| PROC ; ConstraintAdapter::ParseConstraintClassification

; 56   : {

  00000		 |$LN26@ParseConst|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M33704|
  00008	e1b0b002	 movs        r11, r2
  0000c	e1a0a001	 mov         r10, r1
  00010	e1a08000	 mov         r8, r0

; 57   :     BOOL rc = FALSE;
; 58   :     DWORD count;
; 59   :     DWORD nStartPos = 0;

  00014	e3a02000	 mov         r2, #0
  00018	e58d2004	 str         r2, [sp, #4]
  0001c	e3a07000	 mov         r7, #0

; 60   :     DWORD nEndPos = 0;

  00020	e3a04000	 mov         r4, #0

; 61   :     DWORD nClassIndex = 0;

  00024	e3a09000	 mov         r9, #0

; 62   :     
; 63   :     // get end of string
; 64   :     while (nEndPos < nLen)

  00028	0a00002a	 beq         |$LN22@ParseConst|
  0002c	e1a03008	 mov         r3, r8
  00030	e58d3000	 str         r3, [sp]
  00034		 |$LL15@ParseConst|

; 65   :         {
; 66   :         count = 0;

  00034	e3a05000	 mov         r5, #0
  00038	e08a6084	 add         r6, r10, r4, lsl #1
  0003c		 |$LL13@ParseConst|

; 67   :         do
; 68   :             {
; 69   :             if (IsHex(szClasses[nEndPos]))

  0003c	e1d600b0	 ldrh        r0, [r6]
  00040	eb000000	 bl          |?IsHex@@YAHG@Z|
  00044	e3500000	 cmp         r0, #0
  00048	0a000009	 beq         |$LN10@ParseConst|

; 70   :                 {
; 71   :                 count++;

  0004c	e2855001	 add         r5, r5, #1

; 77   :                 {
; 78   :                 // got end marker
; 79   :                 break;
; 80   :                 }
; 81   :             else
; 82   :                 {
; 83   :                 // unexpected character
; 84   :                 goto cleanUp;
; 85   :                 }
; 86   : 
; 87   :             // check for too long hex values
; 88   :             if (count > 8 || count == 0) goto cleanUp;

  00050	e3550008	 cmp         r5, #8
  00054	e2844001	 add         r4, r4, #1
  00058	e2866002	 add         r6, r6, #2
  0005c	8a00001f	 bhi         |$cleanUp$33559|
  00060	e3550000	 cmp         r5, #0
  00064	0a00001d	 beq         |$cleanUp$33559|

; 89   :             }
; 90   :             while (nEndPos < nLen);

  00068	e154000b	 cmp         r4, r11
  0006c	3afffff2	 bcc         |$LL13@ParseConst|
  00070	ea000007	 b           |$LN11@ParseConst|
  00074		 |$LN10@ParseConst|

; 72   :                 nEndPos++;
; 73   :                 }
; 74   :             else if (szClasses[nEndPos] == _T(',') ||
; 75   :                      szClasses[nEndPos] == _T(' ') ||
; 76   :                      szClasses[nEndPos] == _T('\0'))

  00074	e08a3084	 add         r3, r10, r4, lsl #1
  00078	e1d330b0	 ldrh        r3, [r3]
  0007c	e353002c	 cmp         r3, #0x2C
  00080	0a000003	 beq         |$LN11@ParseConst|
  00084	e3530020	 cmp         r3, #0x20
  00088	0a000001	 beq         |$LN11@ParseConst|
  0008c	e3530000	 cmp         r3, #0
  00090	1a000012	 bne         |$cleanUp$33559|
  00094		 |$LN11@ParseConst|

; 91   : 
; 92   :         // check for double NULL
; 93   :         if (count == 0) break;

  00094	e3550000	 cmp         r5, #0
  00098	0a00000e	 beq         |$LN22@ParseConst|

; 94   : 
; 95   :         m_rgClasses[nClassIndex] = _tcstoul(szClasses + nStartPos, NULL, 16);

  0009c	e59d3004	 ldr         r3, [sp, #4]
  000a0	e3a02010	 mov         r2, #0x10
  000a4	e3a01000	 mov         r1, #0
  000a8	e08a0083	 add         r0, r10, r3, lsl #1
  000ac	eb000000	 bl          wcstoul
  000b0	e59d3000	 ldr         r3, [sp]

; 96   : 
; 97   :         // update for next class identifier
; 98   :         nEndPos++;

  000b4	e2844001	 add         r4, r4, #1

; 99   :         nStartPos = nEndPos;
; 100  :         nClassIndex++;

  000b8	e2899001	 add         r9, r9, #1
  000bc	e5830628	 str         r0, [r3, #0x628]
  000c0	e2833004	 add         r3, r3, #4
  000c4	e58d3000	 str         r3, [sp]
  000c8	e1a03004	 mov         r3, r4
  000cc	e58d3004	 str         r3, [sp, #4]
  000d0	e154000b	 cmp         r4, r11
  000d4	3affffd6	 bcc         |$LL15@ParseConst|
  000d8		 |$LN22@ParseConst|

; 101  :         }
; 102  : 
; 103  :     m_nClassIds = nClassIndex;

  000d8	e5889008	 str         r9, [r8, #8]

; 104  :     rc = TRUE;

  000dc	e3a07001	 mov         r7, #1
  000e0		 |$cleanUp$33559|

; 105  :     
; 106  : cleanUp:
; 107  :     return rc;
; 108  : }

  000e0	e1a00007	 mov         r0, r7
  000e4	e28dd008	 add         sp, sp, #8
  000e8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000ec	e12fff1e	 bx          lr
  000f0		 |$M33705|

			 ENDP  ; |?ParseConstraintClassification@ConstraintAdapter@@IAAHPBGK@Z|, ConstraintAdapter::ParseConstraintClassification

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?Initialize@ConstraintAdapter@@QAAHPBG@Z| ; ConstraintAdapter::Initialize
	EXPORT	|??_C@_1CA@LOPKJJFD@?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAl?$AAa?$AAs?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17DJMMGLBL@?$AAD?$AAl?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@PJMPBMAL@?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|RegCloseKey|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|wcscpy|
	IMPORT	|wcslen|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T33731| DCD	|$LN19@Initialize|
	DCD	0xc0006402

  00000			 AREA	 |.xdata|, DATA
|$T33727| DCD	0xffffffe8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@LOPKJJFD@?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAl?$AAa?$AAs?$AAs?$AA?$AA@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "C", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "s", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17DJMMGLBL@?$AAD?$AAl?$AAl?$AA?$AA@| DCB "D", 0x0, "l", 0x0, "l", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| DCB "N", 0x0, "a", 0x0, "m"
	DCB	0x0, "e", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@PJMPBMAL@?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@| DCB "O", 0x0, "r", 0x0
	DCB	"d", 0x0, "e", 0x0, "r", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T33727|

  00008		 |?Initialize@ConstraintAdapter@@QAAHPBG@Z| PROC ; ConstraintAdapter::Initialize

; 119  : {

  00008		 |$LN19@Initialize|
  00008	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  0000c	e24ddf87	 sub         sp, sp, #0x87, 30
  00010		 |$M33728|
  00010	e1a04001	 mov         r4, r1
  00014	e1a06000	 mov         r6, r0
  00018	e59f3174	 ldr         r3, [pc, #0x174]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3218	 str         r3, [sp, #0x218]

; 120  :     LONG code;
; 121  :     DWORD size;
; 122  :     DWORD rc = FALSE;    
; 123  :     HKEY hKey = NULL;

  00024	e3a03000	 mov         r3, #0

; 124  :     _TCHAR szBuffer[MAX_PATH];
; 125  : 
; 126  :     // Save device registry key for later use
; 127  :     if (_tcslen(szContext) >= sizeof(m_szRegKey) / sizeof(m_szRegKey[0])) goto cleanUp;

  00028	e1a00004	 mov         r0, r4
  0002c	e58d300c	 str         r3, [sp, #0xC]
  00030	e3a05000	 mov         r5, #0
  00034	eb000000	 bl          wcslen
  00038	e3500f41	 cmp         r0, #0x41, 30
  0003c	2a00004a	 bcs         |$LN1@Initialize|

; 128  :     _tcscpy(m_szRegKey, szContext);

  00040	e1a01004	 mov         r1, r4
  00044	e2860f86	 add         r0, r6, #0x86, 30
  00048	eb000000	 bl          wcscpy

; 129  : 
; 130  :     // Open device registry key
; 131  :     code = ::RegOpenKeyEx(HKEY_LOCAL_MACHINE, szContext, 0, 0, &hKey);

  0004c	e28d300c	 add         r3, sp, #0xC
  00050	e58d3000	 str         r3, [sp]
  00054	e3a03000	 mov         r3, #0
  00058	e3a02000	 mov         r2, #0
  0005c	e1a01004	 mov         r1, r4
  00060	e3a0010a	 mov         r0, #0xA, 2
  00064	eb000000	 bl          RegOpenKeyExW
  00068	e3500000	 cmp         r0, #0

; 132  :     if (code != ERROR_SUCCESS) goto cleanUp;

  0006c	1a00003b	 bne         |$cleanUp$33575|

; 133  : 
; 134  :     // read load order
; 135  :     size = sizeof(m_dwOrder);
; 136  :     code = RegQueryValueEx(hKey, REGEDIT_CONSTRAINT_ORDER, 0, 0, (BYTE*)&m_dwOrder, &size);

  00070	e59f1118	 ldr         r1, [pc, #0x118]
  00074	e59d000c	 ldr         r0, [sp, #0xC]
  00078	e3a07004	 mov         r7, #4
  0007c	e28de008	 add         lr, sp, #8
  00080	e2864004	 add         r4, r6, #4
  00084	e3a03000	 mov         r3, #0
  00088	e3a02000	 mov         r2, #0
  0008c	e58d7008	 str         r7, [sp, #8]
  00090	e58de004	 str         lr, [sp, #4]
  00094	e58d4000	 str         r4, [sp]
  00098	eb000000	 bl          RegQueryValueExW
  0009c	e3500000	 cmp         r0, #0

; 137  :     if (code != ERROR_SUCCESS) goto cleanUp;

  000a0	1a00002e	 bne         |$cleanUp$33575|

; 138  : 
; 139  :     // read constraint name
; 140  :     size = sizeof(m_szConstraintName);
; 141  :     code = RegQueryValueEx(hKey, REGEDIT_CONSTRAINT_NAME, 0, 0, (BYTE*)&m_szConstraintName, &size);

  000a4	e59f10e0	 ldr         r1, [pc, #0xE0]
  000a8	e59d000c	 ldr         r0, [sp, #0xC]
  000ac	e3a07f82	 mov         r7, #0x82, 30
  000b0	e28de008	 add         lr, sp, #8
  000b4	e2864e42	 add         r4, r6, #0x42, 28
  000b8	e3a03000	 mov         r3, #0
  000bc	e3a02000	 mov         r2, #0
  000c0	e58d7008	 str         r7, [sp, #8]
  000c4	e58de004	 str         lr, [sp, #4]
  000c8	e58d4000	 str         r4, [sp]
  000cc	eb000000	 bl          RegQueryValueExW
  000d0	e3500000	 cmp         r0, #0

; 142  :     if (code != ERROR_SUCCESS) goto cleanUp;

  000d4	1a000021	 bne         |$cleanUp$33575|

; 143  : 
; 144  :     // read dll name
; 145  :     size = sizeof(m_szDll);
; 146  :     code = RegQueryValueEx(hKey, REGEDIT_CONSTRAINT_DLL, 0, 0, (BYTE*)&m_szDll, &size);

  000d8	e59f10a8	 ldr         r1, [pc, #0xA8]
  000dc	e59d000c	 ldr         r0, [sp, #0xC]
  000e0	e3a07f82	 mov         r7, #0x82, 30
  000e4	e28de008	 add         lr, sp, #8
  000e8	e286400c	 add         r4, r6, #0xC
  000ec	e3a03000	 mov         r3, #0
  000f0	e3a02000	 mov         r2, #0
  000f4	e58d7008	 str         r7, [sp, #8]
  000f8	e58de004	 str         lr, [sp, #4]
  000fc	e58d4000	 str         r4, [sp]
  00100	eb000000	 bl          RegQueryValueExW
  00104	e3500000	 cmp         r0, #0

; 147  :     if (code != ERROR_SUCCESS) goto cleanUp;

  00108	1a000014	 bne         |$cleanUp$33575|

; 148  : 
; 149  :     // read constraint classifications
; 150  :     size = sizeof(szBuffer);
; 151  :     code = RegQueryValueEx(hKey, REGEDIT_CONSTRAINT_CLASSES, 0, 0, (BYTE*)szBuffer, &size);

  0010c	e59f1070	 ldr         r1, [pc, #0x70]
  00110	e59d000c	 ldr         r0, [sp, #0xC]
  00114	e3a07f82	 mov         r7, #0x82, 30
  00118	e28de008	 add         lr, sp, #8
  0011c	e28d4010	 add         r4, sp, #0x10
  00120	e3a03000	 mov         r3, #0
  00124	e3a02000	 mov         r2, #0
  00128	e58d7008	 str         r7, [sp, #8]
  0012c	e58de004	 str         lr, [sp, #4]
  00130	e58d4000	 str         r4, [sp]
  00134	eb000000	 bl          RegQueryValueExW
  00138	e3500000	 cmp         r0, #0

; 152  :     if (code == ERROR_SUCCESS)

  0013c	1a000006	 bne         |$LN3@Initialize|

; 153  :         {
; 154  :         if (ParseConstraintClassification(szBuffer, size >> 1) == FALSE)

  00140	e59d3008	 ldr         r3, [sp, #8]
  00144	e28d1010	 add         r1, sp, #0x10
  00148	e1a00006	 mov         r0, r6
  0014c	e1a020a3	 mov         r2, r3, lsr #1
  00150	eb000000	 bl          |?ParseConstraintClassification@ConstraintAdapter@@IAAHPBGK@Z|
  00154	e3500000	 cmp         r0, #0
  00158	0a000000	 beq         |$cleanUp$33575|
  0015c		 |$LN3@Initialize|

; 155  :             {
; 156  :             goto cleanUp;
; 157  :             }
; 158  :         }
; 159  :     
; 160  :     // Done
; 161  :     rc = TRUE;

  0015c	e3a05001	 mov         r5, #1
  00160		 |$cleanUp$33575|

; 162  :     
; 163  : cleanUp:    
; 164  :     if (hKey != NULL) RegCloseKey(hKey);

  00160	e59d000c	 ldr         r0, [sp, #0xC]
  00164	e3500000	 cmp         r0, #0
  00168	1b000000	 blne        RegCloseKey
  0016c		 |$LN1@Initialize|

; 165  :     return rc;

  0016c	e59d0218	 ldr         r0, [sp, #0x218]
  00170	eb000000	 bl          __security_check_cookie

; 166  : }

  00174	e1a00005	 mov         r0, r5
  00178	e28ddf87	 add         sp, sp, #0x87, 30
  0017c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00180	e12fff1e	 bx          lr
  00184		 |$LN20@Initialize|
  00184		 |$LN21@Initialize|
  00184	00000000	 DCD         |??_C@_1CA@LOPKJJFD@?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAl?$AAa?$AAs?$AAs?$AA?$AA@|
  00188		 |$LN22@Initialize|
  00188	00000000	 DCD         |??_C@_17DJMMGLBL@?$AAD?$AAl?$AAl?$AA?$AA@|
  0018c		 |$LN23@Initialize|
  0018c	00000000	 DCD         |??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@|
  00190		 |$LN24@Initialize|
  00190	00000000	 DCD         |??_C@_1M@PJMPBMAL@?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@|
  00194		 |$LN25@Initialize|
  00194	00000000	 DCD         |__security_cookie|
  00198		 |$M33729|

			 ENDP  ; |?Initialize@ConstraintAdapter@@QAAHPBG@Z|, ConstraintAdapter::Initialize

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?PostInitialize@ConstraintAdapter@@QAAHXZ| ; ConstraintAdapter::PostInitialize
	EXPORT	|??_C@_1DC@FFEFBBEA@?$AAI?$AAn?$AAs?$AAe?$AAr?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@MIEIBCNG@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@KPFDBJFI@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@PEJPHCBL@?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@OIBGDBB@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@FICNHNOC@?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@DDNGAMNL@?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LLCLNBHO@?$AA?$CF?$AAs?$AA_?$AA?$CF?$AAs?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|GetProcAddressW|
	IMPORT	|swprintf|
	IMPORT	|LoadLibraryW|

  00000			 AREA	 |.pdata|, PDATA
|$T33755| DCD	|$LN19@PostInitia|
	DCD	0xc0006e02

  00000			 AREA	 |.xdata|, DATA
|$T33751| DCD	0xfffffff0

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@FFEFBBEA@?$AAI?$AAn?$AAs?$AAe?$AAr?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "s", 0x0, "e", 0x0, "r", 0x0, "t", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "C", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@MIEIBCNG@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "v", 0x0, "e", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "C", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@KPFDBJFI@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "s", 0x0, "e", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@PEJPHCBL@?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| DCB "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@OIBGDBB@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| DCB "C"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@FICNHNOC@?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@DDNGAMNL@?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LLCLNBHO@?$AA?$CF?$AAs?$AA_?$AA?$CF?$AAs?$AA?$AA@| DCB "%", 0x0
	DCB	"s", 0x0, "_", 0x0, "%", 0x0, "s", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T33751|

  00008		 |?PostInitialize@ConstraintAdapter@@QAAHXZ| PROC ; ConstraintAdapter::PostInitialize

; 175  : {

  00008		 |$LN19@PostInitia|
  00008	e92d4030	 stmdb       sp!, {r4, r5, lr}
  0000c	e24ddf83	 sub         sp, sp, #0x83, 30
  00010		 |$M33752|
  00010	e1a04000	 mov         r4, r0
  00014	e59f31a0	 ldr         r3, [pc, #0x1A0]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3208	 str         r3, [sp, #0x208]

; 176  :     BOOL rc = FALSE;
; 177  :     _TCHAR szBuffer[MAX_PATH];
; 178  :     
; 179  :     // Load library
; 180  :     m_hModule = ::LoadLibrary(m_szDll);

  00020	e284000c	 add         r0, r4, #0xC
  00024	e3a05000	 mov         r5, #0
  00028	eb000000	 bl          LoadLibraryW
  0002c	e3500000	 cmp         r0, #0
  00030	e5840000	 str         r0, [r4]

; 181  :     if (m_hModule == NULL) goto cleanUp;

  00034	0a000052	 beq         |$cleanUp$33605|

; 182  : 
; 183  :     //
; 184  :     // load functions
; 185  :     
; 186  :     // xxx_InitConstraint
; 187  :     _stprintf(szBuffer, FUNCTION_FMT, m_szConstraintName, INIT_NAME);

  00038	e59f3178	 ldr         r3, [pc, #0x178]
  0003c	e59f1158	 ldr         r1, [pc, #0x158]
  00040	e2842e42	 add         r2, r4, #0x42, 28
  00044	e28d0000	 add         r0, sp, #0
  00048	eb000000	 bl          swprintf

; 188  :     m_fns.InitConstraint = reinterpret_cast<fnInitConstraint>(
; 189  :                             ::GetProcAddress(m_hModule, szBuffer)
; 190  :                             );

  0004c	e5940000	 ldr         r0, [r4]
  00050	e28d1000	 add         r1, sp, #0
  00054	eb000000	 bl          GetProcAddressW
  00058	e3500000	 cmp         r0, #0
  0005c	e5840a28	 str         r0, [r4, #0xA28]

; 191  :     if (m_fns.InitConstraint == NULL) goto cleanUp;

  00060	0a000047	 beq         |$cleanUp$33605|

; 192  : 
; 193  :     // xxx_DeinitConstraint
; 194  :     _stprintf(szBuffer, FUNCTION_FMT, m_szConstraintName, DEINIT_NAME);

  00064	e59f3148	 ldr         r3, [pc, #0x148]
  00068	e59f112c	 ldr         r1, [pc, #0x12C]
  0006c	e2842e42	 add         r2, r4, #0x42, 28
  00070	e28d0000	 add         r0, sp, #0
  00074	eb000000	 bl          swprintf

; 195  :     m_fns.DeinitConstraint = reinterpret_cast<fnDeinitConstraint>(
; 196  :                             ::GetProcAddress(m_hModule, szBuffer)
; 197  :                             );

  00078	e5940000	 ldr         r0, [r4]
  0007c	e28d1000	 add         r1, sp, #0
  00080	eb000000	 bl          GetProcAddressW
  00084	e3500000	 cmp         r0, #0
  00088	e5840a2c	 str         r0, [r4, #0xA2C]

; 198  :     if (m_fns.DeinitConstraint == NULL) goto cleanUp;

  0008c	0a00003c	 beq         |$cleanUp$33605|

; 199  : 
; 200  :     // xxx_CreateConstraint
; 201  :     _stprintf(szBuffer, FUNCTION_FMT, m_szConstraintName, CREATE_NAME);

  00090	e59f3118	 ldr         r3, [pc, #0x118]
  00094	e59f1100	 ldr         r1, [pc, #0x100]
  00098	e2842e42	 add         r2, r4, #0x42, 28
  0009c	e28d0000	 add         r0, sp, #0
  000a0	eb000000	 bl          swprintf

; 202  :     m_fns.CreateConstraint = reinterpret_cast<fnCreateConstraint>(
; 203  :                             ::GetProcAddress(m_hModule, szBuffer)
; 204  :                             );

  000a4	e5940000	 ldr         r0, [r4]
  000a8	e28d1000	 add         r1, sp, #0
  000ac	eb000000	 bl          GetProcAddressW
  000b0	e3500000	 cmp         r0, #0
  000b4	e5840a30	 str         r0, [r4, #0xA30]

; 205  :     if (m_fns.CreateConstraint == NULL) goto cleanUp;

  000b8	0a000031	 beq         |$cleanUp$33605|

; 206  : 
; 207  :     // xxx_UpdateConstraint
; 208  :     _stprintf(szBuffer, FUNCTION_FMT, m_szConstraintName, UPDATE_NAME);

  000bc	e59f30e8	 ldr         r3, [pc, #0xE8]
  000c0	e59f10d4	 ldr         r1, [pc, #0xD4]
  000c4	e2842e42	 add         r2, r4, #0x42, 28
  000c8	e28d0000	 add         r0, sp, #0
  000cc	eb000000	 bl          swprintf

; 209  :     m_fns.UpdateConstraint = reinterpret_cast<fnUpdateConstraint>(
; 210  :                             ::GetProcAddress(m_hModule, szBuffer)
; 211  :                             );

  000d0	e5940000	 ldr         r0, [r4]
  000d4	e28d1000	 add         r1, sp, #0
  000d8	eb000000	 bl          GetProcAddressW
  000dc	e3500000	 cmp         r0, #0
  000e0	e5840a34	 str         r0, [r4, #0xA34]

; 212  :     if (m_fns.UpdateConstraint == NULL) goto cleanUp;

  000e4	0a000026	 beq         |$cleanUp$33605|

; 213  : 
; 214  :     // xxx_CloseConstraint
; 215  :     _stprintf(szBuffer, FUNCTION_FMT, m_szConstraintName, CLOSE_NAME);

  000e8	e59f30b8	 ldr         r3, [pc, #0xB8]
  000ec	e59f10a8	 ldr         r1, [pc, #0xA8]
  000f0	e2842e42	 add         r2, r4, #0x42, 28
  000f4	e28d0000	 add         r0, sp, #0
  000f8	eb000000	 bl          swprintf

; 216  :     m_fns.CloseConstraint = reinterpret_cast<fnCloseConstraint>(
; 217  :                             ::GetProcAddress(m_hModule, szBuffer)
; 218  :                             );

  000fc	e5940000	 ldr         r0, [r4]
  00100	e28d1000	 add         r1, sp, #0
  00104	eb000000	 bl          GetProcAddressW
  00108	e3500000	 cmp         r0, #0
  0010c	e5840a38	 str         r0, [r4, #0xA38]

; 219  :     if (m_fns.CloseConstraint == NULL) goto cleanUp;

  00110	0a00001b	 beq         |$cleanUp$33605|

; 220  : 
; 221  :     // xxx_CreateConstraintCallback
; 222  :     _stprintf(szBuffer, FUNCTION_FMT, m_szConstraintName, CREATECB_NAME);

  00114	e59f3088	 ldr         r3, [pc, #0x88]
  00118	e59f107c	 ldr         r1, [pc, #0x7C]
  0011c	e2842e42	 add         r2, r4, #0x42, 28
  00120	e28d0000	 add         r0, sp, #0
  00124	eb000000	 bl          swprintf

; 223  :     m_fns.InsertConstraintCallback = reinterpret_cast<fnInsertConstraintCallback>(
; 224  :                             ::GetProcAddress(m_hModule, szBuffer)
; 225  :                             );

  00128	e5940000	 ldr         r0, [r4]
  0012c	e28d1000	 add         r1, sp, #0
  00130	eb000000	 bl          GetProcAddressW

; 226  : 
; 227  :     // xxx_RemoveConstraintCallback
; 228  :     _stprintf(szBuffer, FUNCTION_FMT, m_szConstraintName, REMOVECB_NAME);

  00134	e59f3064	 ldr         r3, [pc, #0x64]
  00138	e59f105c	 ldr         r1, [pc, #0x5C]
  0013c	e1a02000	 mov         r2, r0
  00140	e5842a3c	 str         r2, [r4, #0xA3C]
  00144	e2842e42	 add         r2, r4, #0x42, 28
  00148	e28d0000	 add         r0, sp, #0
  0014c	eb000000	 bl          swprintf

; 229  :     m_fns.RemoveConstraintCallback = reinterpret_cast<fnRemoveConstraintCallback>(
; 230  :                             ::GetProcAddress(m_hModule, szBuffer)
; 231  :                             );

  00150	e5940000	 ldr         r0, [r4]
  00154	e28d1000	 add         r1, sp, #0
  00158	eb000000	 bl          GetProcAddressW

; 232  : 
; 233  :     // try to initialize constraint adapter
; 234  :     m_hConstraintAdapter = m_fns.InitConstraint(m_szRegKey);

  0015c	e1a03000	 mov         r3, r0
  00160	e5942a28	 ldr         r2, [r4, #0xA28]
  00164	e5843a40	 str         r3, [r4, #0xA40]
  00168	e2840f86	 add         r0, r4, #0x86, 30
  0016c	e1a0e00f	 mov         lr, pc
  00170	e12fff12	 bx          r2
  00174	e3500000	 cmp         r0, #0

; 235  :     rc = m_hConstraintAdapter != NULL;

  00178	13a05001	 movne       r5, #1
  0017c	03a05000	 moveq       r5, #0
  00180	e5840214	 str         r0, [r4, #0x214]
  00184		 |$cleanUp$33605|

; 236  :     
; 237  : cleanUp:
; 238  :     return rc;

  00184	e59d0208	 ldr         r0, [sp, #0x208]
  00188	eb000000	 bl          __security_check_cookie

; 239  : }

  0018c	e1a00005	 mov         r0, r5
  00190	e28ddf83	 add         sp, sp, #0x83, 30
  00194	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00198	e12fff1e	 bx          lr
  0019c		 |$LN20@PostInitia|
  0019c		 |$LN21@PostInitia|
  0019c	00000000	 DCD         |??_C@_1M@LLCLNBHO@?$AA?$CF?$AAs?$AA_?$AA?$CF?$AAs?$AA?$AA@|
  001a0		 |$LN22@PostInitia|
  001a0	00000000	 DCD         |??_C@_1DC@MIEIBCNG@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AA@|
  001a4		 |$LN23@PostInitia|
  001a4	00000000	 DCD         |??_C@_1DC@FFEFBBEA@?$AAI?$AAn?$AAs?$AAe?$AAr?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AA@|
  001a8		 |$LN24@PostInitia|
  001a8	00000000	 DCD         |??_C@_1CA@KPFDBJFI@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@|
  001ac		 |$LN25@PostInitia|
  001ac	00000000	 DCD         |??_C@_1CC@PEJPHCBL@?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@|
  001b0		 |$LN26@PostInitia|
  001b0	00000000	 DCD         |??_C@_1CC@OIBGDBB@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@|
  001b4		 |$LN27@PostInitia|
  001b4	00000000	 DCD         |??_C@_1CC@FICNHNOC@?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@|
  001b8		 |$LN28@PostInitia|
  001b8	00000000	 DCD         |??_C@_1BO@DDNGAMNL@?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@|
  001bc		 |$LN29@PostInitia|
  001bc	00000000	 DCD         |__security_cookie|
  001c0		 |$M33753|

			 ENDP  ; |?PostInitialize@ConstraintAdapter@@QAAHXZ|, ConstraintAdapter::PostInitialize

	EXPORT	|?Uninitialize@ConstraintAdapter@@QAAXXZ| ; ConstraintAdapter::Uninitialize
	IMPORT	|FreeLibrary|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T33775| DCD	|$LN7@Uninitiali|
	DCD	0x40002301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Uninitialize@ConstraintAdapter@@QAAXXZ| PROC ; ConstraintAdapter::Uninitialize

; 248  : {

  00000		 |$LN7@Uninitiali|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M33772|
  00004	e1a05000	 mov         r5, r0

; 249  :     if (m_fns.CloseConstraint != NULL && m_hConstraintAdapter != NULL)

  00008	e5953a38	 ldr         r3, [r5, #0xA38]
  0000c	e1b02003	 movs        r2, r3
  00010	15953214	 ldrne       r3, [r5, #0x214]
  00014	13530000	 cmpne       r3, #0

; 250  :         {
; 251  :         m_fns.CloseConstraint(m_hConstraintAdapter);

  00018	11a00003	 movne       r0, r3
  0001c	11a0e00f	 movne       lr, pc
  00020	112fff12	 bxne        r2

; 252  :         }
; 253  : 
; 254  :     if (m_hModule != NULL)

  00024	e5953000	 ldr         r3, [r5]
  00028	e3530000	 cmp         r3, #0

; 255  :         {
; 256  :         FreeLibrary(m_hModule);

  0002c	11a00003	 movne       r0, r3
  00030	1b000000	 blne        FreeLibrary

; 257  :         }
; 258  : 
; 259  :     // reset member variables
; 260  :     *m_szDll = NULL;
; 261  :     m_hModule = NULL;
; 262  :     m_dwOrder = 0;
; 263  :     m_nClassIds = 0;
; 264  :     *m_szRegKey = NULL;
; 265  :     *m_szConstraintName = NULL;
; 266  :     m_hConstraintAdapter = NULL;
; 267  :     memset(&m_fns, 0, sizeof(ConstraintAdapterFns));

  00034	e2853c0a	 add         r3, r5, #0xA, 24
  00038	e2830028	 add         r0, r3, #0x28
  0003c	e3a03000	 mov         r3, #0
  00040	e285ec02	 add         lr, r5, #2, 24
  00044	e2854b01	 add         r4, r5, #1, 22
  00048	e3a0201c	 mov         r2, #0x1C
  0004c	e3a01000	 mov         r1, #0
  00050	e1c530bc	 strh        r3, [r5, #0xC]
  00054	e5853000	 str         r3, [r5]
  00058	e5853004	 str         r3, [r5, #4]
  0005c	e5853008	 str         r3, [r5, #8]
  00060	e1ce31b8	 strh        r3, [lr, #0x18]
  00064	e1c432b0	 strh        r3, [r4, #0x20]
  00068	e5853214	 str         r3, [r5, #0x214]
  0006c	eb000000	 bl          memset

; 268  :     memset(m_rgClasses, 0, sizeof(DWORD)*MAX_CONSTRAINT_CLASSES);

  00070	e2853c06	 add         r3, r5, #6, 24
  00074	e2830028	 add         r0, r3, #0x28
  00078	e3a02b01	 mov         r2, #1, 22
  0007c	e3a01000	 mov         r1, #0
  00080	eb000000	 bl          memset

; 269  : }

  00084	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$M33773|

			 ENDP  ; |?Uninitialize@ConstraintAdapter@@QAAXXZ|, ConstraintAdapter::Uninitialize

	END
