; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\PM\POLICYADAPTERS\CPULOAD\cpuloadpolicy.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BK@GGPFJAKI@?$AAO?$AAp?$AAm?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@JBFHLCFD@?$AAO?$AAp?$AAm?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@PHGEHICJ@?$AAB?$AAo?$AAo?$AAt?$AAO?$AAp?$AAm?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@PIFCPJOI@?$AAN?$AAo?$AAm?$AAi?$AAn?$AAa?$AAl?$AAO?$AAp?$AAm?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@PCJGMNEF@?$AAF?$AAl?$AAo?$AAo?$AAr?$AAO?$AAp?$AAm?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@MDMFEMEA@?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AAO?$AAp?$AAm?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17MABAPADF@?$AAi?$AAr?$AAq?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@KFGACGKF@?$AAB?$AAo?$AAo?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@IFDCDHND@?$AAB?$AAo?$AAo?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@OJGHJKJA@?$AAp?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@DGBBDLHK@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@CDPNPEPF@?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@KHABJPHC@?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|s_bSleeping| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@GGPFJAKI@?$AAO?$AAp?$AAm?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AA?$AA@| DCB "O"
	DCB	0x0, "p", 0x0, "m", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "h", 0x0, "o", 0x0, "l", 0x0, "d", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@JBFHLCFD@?$AAO?$AAp?$AAm?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$AA@| DCB "O"
	DCB	0x0, "p", 0x0, "m", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "q"
	DCB	0x0, "u", 0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@PHGEHICJ@?$AAB?$AAo?$AAo?$AAt?$AAO?$AAp?$AAm?$AA?$AA@| DCB "B", 0x0
	DCB	"o", 0x0, "o", 0x0, "t", 0x0, "O", 0x0, "p", 0x0, "m", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@PIFCPJOI@?$AAN?$AAo?$AAm?$AAi?$AAn?$AAa?$AAl?$AAO?$AAp?$AAm?$AA?$AA@| DCB "N"
	DCB	0x0, "o", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "a", 0x0, "l"
	DCB	0x0, "O", 0x0, "p", 0x0, "m", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@PCJGMNEF@?$AAF?$AAl?$AAo?$AAo?$AAr?$AAO?$AAp?$AAm?$AA?$AA@| DCB "F"
	DCB	0x0, "l", 0x0, "o", 0x0, "o", 0x0, "r", 0x0, "O", 0x0, "p"
	DCB	0x0, "m", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@MDMFEMEA@?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AAO?$AAp?$AAm?$AA?$AA@| DCB "C"
	DCB	0x0, "e", 0x0, "i", 0x0, "l", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, "O", 0x0, "p", 0x0, "m", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|g_policyRegParams| DCD |??_C@_1BM@KHABJPHC@?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x20
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BM@CDPNPEPF@?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x24
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CG@DGBBDLHK@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x34
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BI@OJGHJKJA@?$AAp?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x38
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BM@IFDCDHND@?$AAB?$AAo?$AAo?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@|
	DCD	0x2
	DCD	0x1
	DCD	0x44
	DCD	0x208
	DCD	0x0
	DCD	|??_C@_1BI@KFGACGKF@?$AAB?$AAo?$AAo?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x40
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_17MABAPADF@?$AAi?$AAr?$AAq?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x24c
	DCD	0x4
	DCD	0x0
|g_CpuFamilypolicyRegParams| DCD |??_C@_1BG@MDMFEMEA@?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AAO?$AAp?$AAm?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x28
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BC@PCJGMNEF@?$AAF?$AAl?$AAo?$AAo?$AAr?$AAO?$AAp?$AAm?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x2c
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BG@PIFCPJOI@?$AAN?$AAo?$AAm?$AAi?$AAn?$AAa?$AAl?$AAO?$AAp?$AAm?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x30
	DCD	0x4
	DCD	0x3
	DCD	|??_C@_1BA@PHGEHICJ@?$AAB?$AAo?$AAo?$AAt?$AAO?$AAp?$AAm?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x3c
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BK@JBFHLCFD@?$AAO?$AAp?$AAm?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$AA@|
	DCD	0x3
	DCD	0x0
	DCD	0x2a0
	DCD	0x28
	DCD	0x0
	DCD	|??_C@_1BK@GGPFJAKI@?$AAO?$AAp?$AAm?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AA?$AA@|
	DCD	0x3
	DCD	0x0
	DCD	0x2c8
	DCD	0x28
	DCD	0x0

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17MABAPADF@?$AAi?$AAr?$AAq?$AA?$AA@| DCB "i", 0x0, "r", 0x0, "q", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@KFGACGKF@?$AAB?$AAo?$AAo?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| DCB "B"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@IFDCDHND@?$AAB?$AAo?$AAo?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| DCB "B"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, "E", 0x0, "v", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, "N", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@OJGHJKJA@?$AAp?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| DCB "p"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "2", 0x0, "5", 0x0, "6", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@DGBBDLHK@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "h", 0x0, "o", 0x0, "l", 0x0, "d", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@CDPNPEPF@?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@| DCB "M"
	DCB	0x0, "o", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "W", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "o", 0x0, "w"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@KHABJPHC@?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@| DCB "M"
	DCB	0x0, "o", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "P", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "o", 0x0, "d"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "T", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "P", 0x0, "U", 0x0
	DCB	"L", 0x0, "O", 0x0, "A", 0x0, "D", 0x0, "P", 0x0, "O", 0x0
	DCB	"L", 0x0, "I", 0x0, "C", 0x0, "Y", 0x0, 0x0, 0x0
	%	30
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"O", 0x0, "P", 0x0, "M", 0x0, 0x0, 0x0
	%	56
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCD	0x3
	EXPORT	|ResetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T36803| DCD	|$LN5@ResetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ResetEvent| PROC

; 223  : _inline BOOL ResetEvent(HANDLE h) {

  00000		 |$LN5@ResetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36800|

; 224  : 	return EventModify(h,EVENT_RESET);

  00004	e3a01002	 mov         r1, #2
  00008	eb000000	 bl          EventModify

; 225  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M36801|

			 ENDP  ; |ResetEvent|

	EXPORT	|SetEvent|

  00000			 AREA	 |.pdata|, PDATA
|$T36813| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36810|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M36811|

			 ENDP  ; |SetEvent|

	EXPORT	|?DvfsConstraintCallback@@YAHPAXK0I@Z|	; DvfsConstraintCallback

  00004			 AREA	 |.bss|, NOINIT
|s_currentOpm| % 0x4
|s_CpuPolicyInfo| % 0x2f4
|s_currentOpm| % 0x4

  00000			 AREA	 |.pdata|, PDATA
|$T36828| DCD	|$LN9@DvfsConstr|
	DCD	0x40001201
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\policyadapters\cpuload\cpuloadpolicy.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DvfsConstraintCallback@@YAHPAXK0I@Z| PROC ; DvfsConstraintCallback

; 184  : {

  00000		 |$LN9@DvfsConstr|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36825|
  00004	e3a03801	 mov         r3, #1, 16

; 185  :     UNREFERENCED_PARAMETER(size);
; 186  :     UNREFERENCED_PARAMETER(hRefContext);
; 187  :     if (msg == CONSTRAINT_MSG_DVFS_NEWOPM)

  00008	e3833001	 orr         r3, r3, #1
  0000c	e1510003	 cmp         r1, r3
  00010	1a000008	 bne         |$LN5@DvfsConstr|

; 188  :         {
; 189  :         s_currentOpm = (DWORD)pParam;

  00014	e59f1028	 ldr         r1, [pc, #0x28]

; 190  :         if (s_bSleeping == TRUE && s_currentOpm > kOpm0)

  00018	e59132f8	 ldr         r3, [r1, #0x2F8]
  0001c	e5812000	 str         r2, [r1]
  00020	e3530001	 cmp         r3, #1
  00024	1a000003	 bne         |$LN5@DvfsConstr|
  00028	e3520000	 cmp         r2, #0

; 191  :             {
; 192  :             // wake load monitor if sleeping
; 193  :             SetEvent(s_CpuPolicyInfo.hCpuLoadEvent);

  0002c	15910010	 ldrne       r0, [r1, #0x10]
  00030	13a01003	 movne       r1, #3
  00034	1b000000	 blne        EventModify
  00038		 |$LN5@DvfsConstr|

; 194  :             }
; 195  :         }
; 196  :     return TRUE;

  00038	e3a00001	 mov         r0, #1

; 197  : }

  0003c	e49de004	 ldr         lr, [sp], #4
  00040	e12fff1e	 bx          lr
  00044		 |$LN10@DvfsConstr|
  00044		 |$LN11@DvfsConstr|
  00044	00000000	 DCD         |s_currentOpm|
  00048		 |$M36826|

			 ENDP  ; |?DvfsConstraintCallback@@YAHPAXK0I@Z|, DvfsConstraintCallback

	EXPORT	|?UpdateTimeBuckets@@YAXPAUBucketInfo_t@@K@Z| ; UpdateTimeBuckets
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T36844| DCD	|$LN7@UpdateTime|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateTimeBuckets@@YAXPAUBucketInfo_t@@K@Z| PROC ; UpdateTimeBuckets

; 210  : {

  00000		 |$LN7@UpdateTime|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36841|
  00004	e1a05000	 mov         r5, r0

; 211  :     int idx = pBucketInfo->currentBucket;

  00008	e5953008	 ldr         r3, [r5, #8]

; 212  :     DWORD mhzSum = pBucketInfo->mhzSum;
; 213  : 
; 214  :     // subtract data point from running total
; 215  :     mhzSum -= pBucketInfo->rgBuckets[idx];

  0000c	e595e004	 ldr         lr, [r5, #4]

; 216  : 
; 217  :     // update with new data point
; 218  :     pBucketInfo->rgBuckets[idx] = mhz;
; 219  : 
; 220  :     // update running total
; 221  :     mhzSum += mhz;
; 222  :     pBucketInfo->mhzSum = mhzSum;
; 223  : 
; 224  :     // move to next bucket
; 225  :     pBucketInfo->units = min(pBucketInfo->units + 1, s_CpuPolicyInfo.bucketCount);

  00010	e59f0048	 ldr         r0, [pc, #0x48]
  00014	e0853103	 add         r3, r5, r3, lsl #2
  00018	e593200c	 ldr         r2, [r3, #0xC]
  0001c	e583100c	 str         r1, [r3, #0xC]
  00020	e5954000	 ldr         r4, [r5]
  00024	e04e3002	 sub         r3, lr, r2
  00028	e0833001	 add         r3, r3, r1
  0002c	e5853004	 str         r3, [r5, #4]
  00030	e5903014	 ldr         r3, [r0, #0x14]
  00034	e2842001	 add         r2, r4, #1
  00038	e1520003	 cmp         r2, r3
  0003c	21a02003	 movcs       r2, r3

; 226  :     pBucketInfo->currentBucket = (pBucketInfo->currentBucket + 1) % s_CpuPolicyInfo.bucketCount;

  00040	e5953008	 ldr         r3, [r5, #8]
  00044	e5852000	 str         r2, [r5]
  00048	e5900014	 ldr         r0, [r0, #0x14]
  0004c	e2831001	 add         r1, r3, #1
  00050	eb000000	 bl          __rt_udiv
  00054	e5851008	 str         r1, [r5, #8]

; 227  : 
; 228  :     DEBUGMSG(ZONE_INFO, (L"mhzSum=%d, avgmhz=%d, currentBucket=%d\r\n",
; 229  :         pBucketInfo->mhzSum >> FRACTION_PART,
; 230  :         (pBucketInfo->mhzSum / pBucketInfo->units) >> FRACTION_PART,
; 231  :         pBucketInfo->currentBucket)
; 232  :         );
; 233  : }

  00058	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN8@UpdateTime|
  00060		 |$LN9@UpdateTime|
  00060	00000000	 DCD         |s_CpuPolicyInfo|
  00064		 |$M36842|

			 ENDP  ; |?UpdateTimeBuckets@@YAXPAUBucketInfo_t@@K@Z|, UpdateTimeBuckets

	EXPORT	|?CpuLoadThreadFn@@YAKPAX@Z|		; CpuLoadThreadFn
	EXPORT	|??_C@_1GC@IJBIJFID@?$AAo?$AAp?$AAm?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$DN?$AAO?$AAP?$AAM?$AA?$CF?$AAd?$AA?0?$AA?5?$AAo?$AAp?$AAm?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AAO?$AAP?$AAM@| [ DATA ] ; `string'
	IMPORT	|InterruptMask|
	IMPORT	|PmxUpdateConstraint|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|GetIdleTime|
	IMPORT	|GetTickCount|
	IMPORT	|WaitForSingleObject|
	IMPORT	|memset|

  00300			 AREA	 |.bss|, NOINIT
|s_requestedOpm| % 0x4
|s_requestedOpm| % 0x4
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T36879| DCD	|$LN26@CpuLoadThr|
	DCD	0x40008402

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@IJBIJFID@?$AAo?$AAp?$AAm?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$DN?$AAO?$AAP?$AAM?$AA?$CF?$AAd?$AA?0?$AA?5?$AAo?$AAp?$AAm?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AAO?$AAP?$AAM@| DCB "o"
	DCB	0x0, "p", 0x0, "m", 0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, "=", 0x0, "O", 0x0, "P"
	DCB	0x0, "M", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "o"
	DCB	0x0, "p", 0x0, "m", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u"
	DCB	0x0, "e", 0x0, "s", 0x0, "t", 0x0, "=", 0x0, "O", 0x0, "P"
	DCB	0x0, "M", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "a"
	DCB	0x0, "v", 0x0, "g", 0x0, " ", 0x0, "m", 0x0, "h", 0x0, "z"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\policyadapters\cpuload\cpuloadpolicy.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CpuLoadThreadFn@@YAKPAX@Z| PROC	; CpuLoadThreadFn

; 242  : {

  00000		 |$LN26@CpuLoadThr|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M36876|

; 243  :     DWORD opm=0;
; 244  :     DWORD mhz;
; 245  :     DWORD cpuLoad;
; 246  :     DWORD tickTime;
; 247  :     DWORD idleTime;
; 248  :     DWORD lastTick = 0;
; 249  :     DWORD lastIdle = 0;
; 250  :     DWORD currentTick;
; 251  :     DWORD currentIdle;
; 252  :     DWORD code = WAIT_TIMEOUT;
; 253  :     DWORD ceilingOpm = s_CpuPolicyInfo.dwCeilingOpm;

  00008	e59f41fc	 ldr         r4, [pc, #0x1FC]
  0000c	e3a03000	 mov         r3, #0
  00010	e58d3000	 str         r3, [sp]

; 254  :     DWORD floorOpm = s_CpuPolicyInfo.dwFloorOpm;
; 255  :     DWORD timeOut = s_CpuPolicyInfo.dwBootTimeout;
; 256  :     BucketInfo_t *pBucketInfo = s_CpuPolicyInfo.pBucketInfo;
; 257  : 
; 258  :     UNREFERENCED_PARAMETER(pvParam);
; 259  : 
; 260  :     // wait for boot event or timeout
; 261  :     WaitForSingleObject(s_CpuPolicyInfo.hBootEvent, timeOut);

  00014	e59432f8	 ldr         r3, [r4, #0x2F8]
  00018	e5941048	 ldr         r1, [r4, #0x48]
  0001c	e5940018	 ldr         r0, [r4, #0x18]
  00020	e594b030	 ldr         r11, [r4, #0x30]
  00024	e5949034	 ldr         r9, [r4, #0x34]
  00028	e58d3004	 str         r3, [sp, #4]
  0002c	e3a05000	 mov         r5, #0
  00030	e3a07000	 mov         r7, #0
  00034	eb000000	 bl          WaitForSingleObject

; 262  : 
; 263  :     // start cpu monitor loop
; 264  :     s_bSleeping = FALSE;
; 265  :     while (s_CpuPolicyInfo.bExit == FALSE)

  00038	e5943024	 ldr         r3, [r4, #0x24]
  0003c	e3a02000	 mov         r2, #0
  00040	e58422fc	 str         r2, [r4, #0x2FC]
  00044	e3530000	 cmp         r3, #0
  00048	1a000069	 bne         |$LN11@CpuLoadThr|
  0004c	e59f61b0	 ldr         r6, [pc, #0x1B0]
  00050		 |$LL12@CpuLoadThr|

; 266  :         {
; 267  :         // get tick and idle times
; 268  :         currentTick = GetTickCount();

  00050	eb000000	 bl          GetTickCount
  00054	e1a08000	 mov         r8, r0

; 269  :         currentIdle = GetIdleTime();

  00058	eb000000	 bl          GetIdleTime
  0005c	e1a0a000	 mov         r10, r0

; 270  : 
; 271  :         // calculate tick and idle time from previous
; 272  :         tickTime = currentTick - lastTick;
; 273  :         idleTime = currentIdle - lastIdle;
; 274  : 
; 275  :         // check if there's tracked data
; 276  :         if (lastTick != 0)

  00060	e3550000	 cmp         r5, #0
  00064	0a000031	 beq         |$LN10@CpuLoadThr|

; 277  :             {
; 278  :             // initially set to 100% cpu load
; 279  :             cpuLoad = 1 << FRACTION_PART;

  00068	e3a02601	 mov         r2, #1, 12

; 280  :             if (tickTime != 0)

  0006c	e1580005	 cmp         r8, r5
  00070	0a000004	 beq         |$LN9@CpuLoadThr|

; 281  :                 {
; 282  :                 cpuLoad = cpuLoad - ((idleTime << FRACTION_PART) / tickTime);

  00074	e04a3007	 sub         r3, r10, r7
  00078	e1a01a03	 mov         r1, r3, lsl #20
  0007c	e0480005	 sub         r0, r8, r5
  00080	eb000000	 bl          __rt_udiv
  00084	e2602601	 rsb         r2, r0, #1, 12
  00088		 |$LN9@CpuLoadThr|

; 283  :                 }
; 284  : 
; 285  :             mhz = cpuLoad * s_CpuPolicyInfo.rgOpmFrequency[s_currentOpm];
; 286  :             UpdateTimeBuckets(s_CpuPolicyInfo.pBucketInfo, mhz);

  00088	e5943004	 ldr         r3, [r4, #4]
  0008c	e2841008	 add         r1, r4, #8
  00090	e59402f8	 ldr         r0, [r4, #0x2F8]
  00094	e0813103	 add         r3, r1, r3, lsl #2
  00098	e59332a0	 ldr         r3, [r3, #0x2A0]
  0009c	e0010293	 mul         r1, r3, r2
  000a0	eb000000	 bl          |?UpdateTimeBuckets@@YAXPAUBucketInfo_t@@K@Z|

; 287  : 
; 288  :             mhz = (s_CpuPolicyInfo.pBucketInfo->mhzSum / s_CpuPolicyInfo.pBucketInfo->units);

  000a4	e59432f8	 ldr         r3, [r4, #0x2F8]
  000a8	e5931004	 ldr         r1, [r3, #4]
  000ac	e5930000	 ldr         r0, [r3]
  000b0	eb000000	 bl          __rt_udiv

; 289  : 
; 290  :             // update opm if necessary
; 291  :             if (mhz > s_CpuPolicyInfo.rgOpmRange[s_requestedOpm].ceiling) opm = ceilingOpm;

  000b4	e5941000	 ldr         r1, [r4]
  000b8	e2843008	 add         r3, r4, #8
  000bc	e083e181	 add         lr, r3, r1, lsl #3
  000c0	e59e3254	 ldr         r3, [lr, #0x254]
  000c4	e1500003	 cmp         r0, r3

; 292  :             if (mhz <= s_CpuPolicyInfo.rgOpmRange[s_requestedOpm].floor) opm = max(s_requestedOpm - 1, floorOpm);

  000c8	e59e3250	 ldr         r3, [lr, #0x250]
  000cc	81a0200b	 movhi       r2, r11
  000d0	858db000	 strhi       r11, [sp]
  000d4	959d2000	 ldrls       r2, [sp]
  000d8	e1500003	 cmp         r0, r3
  000dc	8a000004	 bhi         |$LN16@CpuLoadThr|
  000e0	e2412001	 sub         r2, r1, #1
  000e4	e1520009	 cmp         r2, r9
  000e8	858d2000	 strhi       r2, [sp]
  000ec	91a02009	 movls       r2, r9
  000f0	958d9000	 strls       r9, [sp]
  000f4		 |$LN16@CpuLoadThr|

; 293  :             if ((opm > s_CpuPolicyInfo.dwNominalOpm) && (s_requestedOpm < s_CpuPolicyInfo.dwNominalOpm)) opm = s_CpuPolicyInfo.dwNominalOpm;

  000f4	e5943038	 ldr         r3, [r4, #0x38]
  000f8	e1520003	 cmp         r2, r3
  000fc	9a000002	 bls         |$LN6@CpuLoadThr|
  00100	e1510003	 cmp         r1, r3
  00104	31a02003	 movcc       r2, r3
  00108	358d3000	 strcc       r3, [sp]
  0010c		 |$LN6@CpuLoadThr|

; 294  : 
; 295  :             RETAILMSG(ZONE_OPM,
; 296  :                 (L"opmCurrent=OPM%d, opmRequest=OPM%d, avg mhz=%d\r\n",
; 297  :                 s_currentOpm, opm, mhz >> FRACTION_PART)
; 298  :                 );

  0010c	e5963440	 ldr         r3, [r6, #0x440]
  00110	e3130010	 tst         r3, #0x10
  00114	0a000008	 beq         |$LN5@CpuLoadThr|
  00118	e5941004	 ldr         r1, [r4, #4]
  0011c	e1a03a20	 mov         r3, r0, lsr #20
  00120	e59f00e0	 ldr         r0, [pc, #0xE0]
  00124	eb000000	 bl          NKDbgPrintfW

; 299  :             }
; 300  :         else

  00128	e59d2000	 ldr         r2, [sp]
  0012c	ea000001	 b           |$LN23@CpuLoadThr|
  00130		 |$LN10@CpuLoadThr|

; 301  :             {
; 302  :             opm = s_CpuPolicyInfo.dwNominalOpm;

  00130	e5942038	 ldr         r2, [r4, #0x38]
  00134	e58d2000	 str         r2, [sp]
  00138		 |$LN23@CpuLoadThr|
  00138	e5941000	 ldr         r1, [r4]
  0013c		 |$LN5@CpuLoadThr|

; 303  :             }
; 304  : 
; 305  :         // update operating point
; 306  :         if (s_requestedOpm != opm)

  0013c	e1510002	 cmp         r1, r2
  00140	0a000006	 beq         |$LN4@CpuLoadThr|

; 307  :             {
; 308  :             // update operating mode
; 309  :             PmxUpdateConstraint(s_CpuPolicyInfo.hDvfsConstraint,
; 310  :                         CONSTRAINT_MSG_DVFS_REQUEST,
; 311  :                         (void*)&opm,
; 312  :                         sizeof(DWORD)
; 313  :                         );

  00144	e5940008	 ldr         r0, [r4, #8]
  00148	e3a03004	 mov         r3, #4
  0014c	e28d2000	 add         r2, sp, #0
  00150	e3a01001	 mov         r1, #1
  00154	eb000000	 bl          PmxUpdateConstraint

; 314  : 
; 315  :             s_requestedOpm = opm;

  00158	e59d3000	 ldr         r3, [sp]
  0015c	e5843000	 str         r3, [r4]
  00160		 |$LN4@CpuLoadThr|

; 316  :             }
; 317  : 
; 318  :         if (s_currentOpm == kOpm0)

  00160	e5943004	 ldr         r3, [r4, #4]
  00164	e3530000	 cmp         r3, #0
  00168	1a000011	 bne         |$LN3@CpuLoadThr|

; 319  :             {
; 320  :             // clear bucket info
; 321  :             //
; 322  :             lastTick = lastIdle = 0;
; 323  :             memset(pBucketInfo, 0,
; 324  :                 sizeof(BucketInfo_t) +
; 325  :                 (sizeof(DWORD) * s_CpuPolicyInfo.bucketCount)
; 326  :                 );

  0016c	e594301c	 ldr         r3, [r4, #0x1C]
  00170	e59d0004	 ldr         r0, [sp, #4]
  00174	e3a01000	 mov         r1, #0
  00178	e2833003	 add         r3, r3, #3
  0017c	e1a02103	 mov         r2, r3, lsl #2
  00180	e3a07000	 mov         r7, #0
  00184	e3a05000	 mov         r5, #0
  00188	eb000000	 bl          memset

; 327  : 
; 328  :             // rely on cpu load monitor to check for
; 329  :             // cpu load threshold checks
; 330  :             timeOut = INFINITE;
; 331  :             s_bSleeping = TRUE;
; 332  :             ResetEvent(s_CpuPolicyInfo.hCpuLoadEvent);

  0018c	e5940014	 ldr         r0, [r4, #0x14]
  00190	e3a03001	 mov         r3, #1
  00194	e3a01002	 mov         r1, #2
  00198	e3e06000	 mvn         r6, #0
  0019c	e58432fc	 str         r3, [r4, #0x2FC]
  001a0	eb000000	 bl          EventModify

; 333  :             InterruptMask(s_CpuPolicyInfo.sysIntr, FALSE);

  001a4	e5940020	 ldr         r0, [r4, #0x20]
  001a8	e3a01000	 mov         r1, #0
  001ac	eb000000	 bl          InterruptMask

; 334  :             }
; 335  :         else

  001b0	ea000002	 b           |$LN2@CpuLoadThr|
  001b4		 |$LN3@CpuLoadThr|

; 336  :             {
; 337  :             // Disable cpu monitor interrupt as we want
; 338  :             // to wake periodically to check cpu load
; 339  :             //
; 340  :             timeOut = s_CpuPolicyInfo.dwMonitorPeriod;

  001b4	e5946028	 ldr         r6, [r4, #0x28]

; 341  : 
; 342  :             // update tick info
; 343  :             lastTick = currentTick;

  001b8	e1a05008	 mov         r5, r8

; 344  :             lastIdle = currentIdle;

  001bc	e1a0700a	 mov         r7, r10
  001c0		 |$LN2@CpuLoadThr|

; 345  :             }
; 346  :         code = WaitForSingleObject(s_CpuPolicyInfo.hCpuLoadEvent, timeOut);

  001c0	e5940014	 ldr         r0, [r4, #0x14]
  001c4	e1a01006	 mov         r1, r6
  001c8	eb000000	 bl          WaitForSingleObject
  001cc	e3500000	 cmp         r0, #0

; 347  : 
; 348  :         // If interrupt was generated disable cpu idle interrupt
; 349  :         if (code == WAIT_OBJECT_0)
; 350  :             {
; 351  :             s_bSleeping = FALSE;
; 352  :             InterruptMask(s_CpuPolicyInfo.sysIntr, TRUE);

  001d0	05940020	 ldreq       r0, [r4, #0x20]
  001d4	03a03000	 moveq       r3, #0
  001d8	03a01001	 moveq       r1, #1
  001dc	058432fc	 streq       r3, [r4, #0x2FC]
  001e0	0b000000	 bleq        InterruptMask
  001e4	e5943024	 ldr         r3, [r4, #0x24]
  001e8	e59f6014	 ldr         r6, [pc, #0x14]
  001ec	e3530000	 cmp         r3, #0
  001f0	0affff96	 beq         |$LL12@CpuLoadThr|
  001f4		 |$LN11@CpuLoadThr|

; 353  :             }
; 354  :         }
; 355  : 
; 356  :     return 0;

  001f4	e3a00000	 mov         r0, #0

; 357  : }

  001f8	e28dd008	 add         sp, sp, #8
  001fc	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00200	e12fff1e	 bx          lr
  00204		 |$LN27@CpuLoadThr|
  00204		 |$LN28@CpuLoadThr|
  00204	00000000	 DCD         |dpCurSettings|
  00208		 |$LN29@CpuLoadThr|
  00208	00000000	 DCD         |??_C@_1GC@IJBIJFID@?$AAo?$AAp?$AAm?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$DN?$AAO?$AAP?$AAM?$AA?$CF?$AAd?$AA?0?$AA?5?$AAo?$AAp?$AAm?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AAO?$AAP?$AAM@|
  0020c		 |$LN30@CpuLoadThr|
  0020c	00000000	 DCD         |s_requestedOpm|
  00210		 |$M36877|

			 ENDP  ; |?CpuLoadThreadFn@@YAKPAX@Z|, CpuLoadThreadFn

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?CPULD_InitPolicy@@YAPAXPBG@Z|		; CPULD_InitPolicy
	EXPORT	|??_C@_1FM@HPFHHCFK@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAC?$AAP@| [ DATA ] ; `string'
	EXPORT	|??_C@_19BINEIDCP@?$AAD?$AAV?$AAF?$AAS?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JC@FFHPOPCB@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?1?$AAM?$AAi?$AAs?$AAs?$AAi?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@LKAEFDF@?$AAf?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAf?$AAl?$AAo?$AAo?$AAr?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JG@OBJIFLGH@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?1?$AAM?$AAi?$AAs?$AAs?$AAi?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@FBGIFOCP@?$AA?2?$AA3?$AA5?$AA1?$AA7?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LKEIENOA@?$AA?2?$AA3?$AA5?$AAx?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@PIGNEKJN@?$AA?2?$AA3?$AA7?$AAx?$AAx?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|LocalAlloc|
	IMPORT	|PmxRegisterConstraintCallback|
	IMPORT	|PmxSetConstraintById|
	IMPORT	|InterruptInitialize|
	IMPORT	|CreateEventW|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|KernelIoControl|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|wcscat|
	IMPORT	|wcscpy|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T36924| DCD	|$LN46@CPULD_Init|
	DCD	0xc000e102

  00000			 AREA	 |.xdata|, DATA
|$T36920| DCD	0xffffffdc

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@HPFHHCFK@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAC?$AAP@| DCB "C"
	DCB	0x0, "P", 0x0, "U", 0x0, "L", 0x0, "D", 0x0, "_", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "l"
	DCB	0x0, "i", 0x0, "c", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "C"
	DCB	0x0, "P", 0x0, "U", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "m"
	DCB	0x0, "i", 0x0, "l", 0x0, "y", 0x0, "=", 0x0, "(", 0x0, "%"
	DCB	0x0, "x", 0x0, ")", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19BINEIDCP@?$AAD?$AAV?$AAF?$AAS?$AA?$AA@| DCB "D", 0x0, "V", 0x0, "F"
	DCB	0x0, "S", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@FFHPOPCB@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?1?$AAM?$AAi?$AAs?$AAs?$AAi?$AAn@| DCB "C"
	DCB	0x0, "P", 0x0, "U", 0x0, "L", 0x0, "D", 0x0, "_", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "l"
	DCB	0x0, "i", 0x0, "c", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, "/", 0x0, "M", 0x0, "i", 0x0, "s", 0x0, "s", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "B", 0x0, "o", 0x0, "o"
	DCB	0x0, "t", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "N", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%"
	DCB	0x0, "s", 0x0, ")", 0x0, ".", 0x0, " ", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a", 0x0, "d", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "l"
	DCB	0x0, "i", 0x0, "c", 0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@LKAEFDF@?$AAf?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAf?$AAl?$AAo?$AAo?$AAr?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$DN@| DCB "f"
	DCB	0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "n"
	DCB	0x0, "c", 0x0, "y", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "f", 0x0, "l", 0x0, "o", 0x0, "o", 0x0, "r"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "l", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JG@OBJIFLGH@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?1?$AAM?$AAi?$AAs?$AAs?$AAi?$AAn@| DCB "C"
	DCB	0x0, "P", 0x0, "U", 0x0, "L", 0x0, "D", 0x0, "_", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "l"
	DCB	0x0, "i", 0x0, "c", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, "/", 0x0, "M", 0x0, "i", 0x0, "s", 0x0, "s", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, ".", 0x0, " "
	DCB	0x0, " ", 0x0, "U", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "l", 0x0, "i", 0x0, "c", 0x0, "y", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@FBGIFOCP@?$AA?2?$AA3?$AA5?$AA1?$AA7?$AA?$AA@| DCB "\\", 0x0, "3"
	DCB	0x0, "5", 0x0, "1", 0x0, "7", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LKEIENOA@?$AA?2?$AA3?$AA5?$AAx?$AAx?$AA?$AA@| DCB "\\", 0x0, "3"
	DCB	0x0, "5", 0x0, "x", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@PIGNEKJN@?$AA?2?$AA3?$AA7?$AAx?$AAx?$AA?$AA@| DCB "\\", 0x0, "3"
	DCB	0x0, "7", 0x0, "x", 0x0, "x", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T36920|

  00008		 |?CPULD_InitPolicy@@YAPAXPBG@Z| PROC	; CPULD_InitPolicy

; 369  : {

  00008		 |$LN46@CPULD_Init|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24ddf86	 sub         sp, sp, #0x86, 30
  00010		 |$M36921|
  00010	e1a06000	 mov         r6, r0
  00014	e59f336c	 ldr         r3, [pc, #0x36C]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3214	 str         r3, [sp, #0x214]

; 370  :     int i, j;
; 371  :     int opmCount;
; 372  :     DWORD opmFreq;
; 373  :     HANDLE ret = NULL;
; 374  :     _TCHAR szRegKey[MAX_PATH];
; 375  :     DWORD cpuFamily = CPU_FAMILY_OMAP35XX;
; 376  : 
; 377  :     // initializt global structure
; 378  :     memset(&s_CpuPolicyInfo, 0, sizeof(CpuPolicyInfo_t));

  00020	e59f535c	 ldr         r5, [pc, #0x35C]
  00024	e3a03000	 mov         r3, #0
  00028	e3a02fbd	 mov         r2, #0xBD, 30
  0002c	e2850008	 add         r0, r5, #8
  00030	e3a01000	 mov         r1, #0
  00034	e3a08000	 mov         r8, #0
  00038	e58d3008	 str         r3, [sp, #8]
  0003c	eb000000	 bl          memset

; 379  : 	
; 380  :     KernelIoControl(
; 381  :         IOCTL_HAL_GET_CPUFAMILY,
; 382  :         &cpuFamily,
; 383  :         sizeof(DWORD),
; 384  :         &cpuFamily,
; 385  :         sizeof(DWORD),
; 386  :         NULL
; 387  :         );

  00040	e59f0338	 ldr         r0, [pc, #0x338]
  00044	e3a09000	 mov         r9, #0
  00048	e3a0a004	 mov         r10, #4
  0004c	e28d3008	 add         r3, sp, #8
  00050	e3a02004	 mov         r2, #4
  00054	e28d1008	 add         r1, sp, #8
  00058	e58d9004	 str         r9, [sp, #4]
  0005c	e58da000	 str         r10, [sp]
  00060	eb000000	 bl          KernelIoControl

; 388  : 
; 389  :     _tcscpy(szRegKey, szContext);

  00064	e1a01006	 mov         r1, r6
  00068	e28d000c	 add         r0, sp, #0xC
  0006c	eb000000	 bl          wcscpy

; 390  : 
; 391  :     if( cpuFamily == CPU_FAMILY_DM37XX)

  00070	e59d1008	 ldr         r1, [sp, #8]
  00074	e3510001	 cmp         r1, #1

; 392  :     {
; 393  :         _tcscat(szRegKey, _T("\\37xx"));

  00078	059f12fc	 ldreq       r1, [pc, #0x2FC]
  0007c	0a000005	 beq         |$LN41@CPULD_Init|

; 394  :     }
; 395  :     else if( cpuFamily == CPU_FAMILY_OMAP35XX)

  00080	e3510000	 cmp         r1, #0

; 396  :     {
; 397  :         _tcscat(szRegKey, _T("\\35xx"));

  00084	059f12ec	 ldreq       r1, [pc, #0x2EC]
  00088	0a000002	 beq         |$LN41@CPULD_Init|

; 398  :     }
; 399  :     else if( cpuFamily == CPU_FAMILY_AM35XX)

  0008c	e3510002	 cmp         r1, #2
  00090	1a0000a1	 bne         |$LN19@CPULD_Init|

; 400  :     {
; 401  :         _tcscat(szRegKey, _T("\\3517"));

  00094	e59f12d8	 ldr         r1, [pc, #0x2D8]
  00098		 |$LN41@CPULD_Init|
  00098	e28d000c	 add         r0, sp, #0xC
  0009c	eb000000	 bl          wcscat

; 406  :         goto cleanUp;
; 407  :     }
; 408  : 
; 409  :     // Read policy registry params
; 410  :     if (GetDeviceRegistryParams(
; 411  :         szContext, &s_CpuPolicyInfo, dimof(g_policyRegParams),
; 412  :         g_policyRegParams) != ERROR_SUCCESS)

  000a0	e59f42c8	 ldr         r4, [pc, #0x2C8]
  000a4	e3a02007	 mov         r2, #7
  000a8	e2851008	 add         r1, r5, #8
  000ac	e1a03004	 mov         r3, r4
  000b0	e1a00006	 mov         r0, r6
  000b4	eb000000	 bl          GetDeviceRegistryParams
  000b8	e3500000	 cmp         r0, #0

; 551  : 
; 552  :     ret = (HANDLE)&s_CpuPolicyInfo;

  000bc	1a000006	 bne         |$LN43@CPULD_Init|
  000c0	e28430a8	 add         r3, r4, #0xA8
  000c4	e3a02006	 mov         r2, #6
  000c8	e2851008	 add         r1, r5, #8
  000cc	e28d000c	 add         r0, sp, #0xC
  000d0	eb000000	 bl          GetDeviceRegistryParams
  000d4	e3500000	 cmp         r0, #0
  000d8	0a000006	 beq         |$LN14@CPULD_Init|
  000dc		 |$LN43@CPULD_Init|

; 413  :         {
; 414  :         RETAILMSG(ZONE_ERROR, (L"CPULD_InitPolicy: Invalid/Missing "
; 415  :             L"registry parameters.  Unloading policy\r\n")
; 416  :             );
; 417  :         goto cleanUp;
; 418  :         }
; 419  :     // Read policy registry params
; 420  :     if (GetDeviceRegistryParams(
; 421  :         szRegKey, &s_CpuPolicyInfo, dimof(g_CpuFamilypolicyRegParams),
; 422  :         g_CpuFamilypolicyRegParams) != ERROR_SUCCESS)
; 423  :         {
; 424  :         RETAILMSG(ZONE_ERROR, (L"CPULD_InitPolicy: Invalid/Missing "
; 425  :             L"registry parameters.  Unloading policy\r\n")
; 426  :             );

  000dc	e59f326c	 ldr         r3, [pc, #0x26C]
  000e0	e5933440	 ldr         r3, [r3, #0x440]
  000e4	e3130001	 tst         r3, #1
  000e8	0a000091	 beq         |$cleanUp$36676|
  000ec	e59f0278	 ldr         r0, [pc, #0x278]
  000f0	eb000000	 bl          NKDbgPrintfW

; 551  : 
; 552  :     ret = (HANDLE)&s_CpuPolicyInfo;

  000f4	ea00008e	 b           |$cleanUp$36676|
  000f8		 |$LN14@CPULD_Init|

; 427  :         goto cleanUp;
; 428  :         }
; 429  : 
; 430  :     // floor frequency
; 431  :     s_CpuPolicyInfo.rgOpmRange[0].floor = 0;

  000f8	e3a03000	 mov         r3, #0
  000fc	e5853258	 str         r3, [r5, #0x258]

; 432  :     s_CpuPolicyInfo.rgOpmRange[0].ceiling = s_CpuPolicyInfo.rgOpmThreshold[0] << FRACTION_PART;

  00100	e59532d0	 ldr         r3, [r5, #0x2D0]
  00104	e2852008	 add         r2, r5, #8
  00108	e1a03a03	 mov         r3, r3, lsl #20
  0010c	e585325c	 str         r3, [r5, #0x25C]
  00110	e5953030	 ldr         r3, [r5, #0x30]
  00114	e0822103	 add         r2, r2, r3, lsl #2

; 433  : 
; 434  :     // set upper bound to max frequency
; 435  :     opmFreq = s_CpuPolicyInfo.rgOpmFrequency[s_CpuPolicyInfo.dwCeilingOpm];
; 436  :     s_CpuPolicyInfo.rgOpmThreshold[s_CpuPolicyInfo.dwCeilingOpm] = opmFreq;

  00118	e59232a0	 ldr         r3, [r2, #0x2A0]
  0011c	e58232c8	 str         r3, [r2, #0x2C8]

; 437  : 
; 438  :     // everything else in the middle
; 439  :     i = 0;
; 440  :     j = 1;
; 441  :     opmCount = s_CpuPolicyInfo.dwCeilingOpm;

  00120	e5951030	 ldr         r1, [r5, #0x30]

; 442  :     while (opmCount--)

  00124	e3510000	 cmp         r1, #0
  00128	0a00000e	 beq         |$LN38@CPULD_Init|
  0012c	e2853008	 add         r3, r5, #8
  00130	e2830008	 add         r0, r3, #8
  00134	e285e008	 add         lr, r5, #8
  00138		 |$LL12@CPULD_Init|

; 443  :         {
; 444  :         // set floor and ceiling
; 445  :         s_CpuPolicyInfo.rgOpmRange[j].floor = s_CpuPolicyInfo.rgOpmThreshold[i] << FRACTION_PART;

  00138	e59e32c8	 ldr         r3, [lr, #0x2C8]

; 446  :         s_CpuPolicyInfo.rgOpmRange[j].ceiling = s_CpuPolicyInfo.rgOpmThreshold[j] << FRACTION_PART;

  0013c	e28e2004	 add         r2, lr, #4
  00140	e2511001	 subs        r1, r1, #1
  00144	e1a03a03	 mov         r3, r3, lsl #20
  00148	e5803250	 str         r3, [r0, #0x250]
  0014c	e59e32cc	 ldr         r3, [lr, #0x2CC]

; 447  : 
; 448  :         // next count
; 449  :         j++;
; 450  :         i++;

  00150	e1a0e002	 mov         lr, r2
  00154	e1a03a03	 mov         r3, r3, lsl #20
  00158	e5803254	 str         r3, [r0, #0x254]
  0015c	e2800008	 add         r0, r0, #8
  00160	1afffff4	 bne         |$LL12@CPULD_Init|

; 442  :     while (opmCount--)

  00164	e5951030	 ldr         r1, [r5, #0x30]
  00168		 |$LN38@CPULD_Init|

; 451  :         }
; 452  : 
; 453  :     for (i = 0; i <= (signed)s_CpuPolicyInfo.dwCeilingOpm; ++i)

  00168	e3a06000	 mov         r6, #0
  0016c	e3510000	 cmp         r1, #0
  00170	4a00000e	 bmi         |$LN8@CPULD_Init|
  00174	e2857008	 add         r7, r5, #8
  00178	e2854008	 add         r4, r5, #8
  0017c		 |$LL10@CPULD_Init|

; 454  :         {
; 455  :         RETAILMSG(1, (L"frequency=%d, floor=%d, ceiling=%d\r\n",
; 456  :             s_CpuPolicyInfo.rgOpmFrequency[i],
; 457  :             s_CpuPolicyInfo.rgOpmRange[i].floor >> FRACTION_PART,
; 458  :             s_CpuPolicyInfo.rgOpmRange[i].ceiling >> FRACTION_PART
; 459  :             ));

  0017c	e5943254	 ldr         r3, [r4, #0x254]
  00180	e5942250	 ldr         r2, [r4, #0x250]
  00184	e59712a0	 ldr         r1, [r7, #0x2A0]
  00188	e59f01d8	 ldr         r0, [pc, #0x1D8]
  0018c	e1a03a23	 mov         r3, r3, lsr #20
  00190	e1a02a22	 mov         r2, r2, lsr #20
  00194	eb000000	 bl          NKDbgPrintfW
  00198	e5953030	 ldr         r3, [r5, #0x30]
  0019c	e2866001	 add         r6, r6, #1
  001a0	e2844008	 add         r4, r4, #8
  001a4	e1560003	 cmp         r6, r3
  001a8	e2877004	 add         r7, r7, #4
  001ac	dafffff2	 ble         |$LL10@CPULD_Init|
  001b0		 |$LN8@CPULD_Init|

; 460  :         }
; 461  : 
; 462  :     // Open boot named event
; 463  :     s_CpuPolicyInfo.hBootEvent = CreateEvent(NULL,
; 464  :                                         TRUE,
; 465  :                                         FALSE,
; 466  :                                         s_CpuPolicyInfo.szBootEventName
; 467  :                                         );

  001b0	e2853008	 add         r3, r5, #8
  001b4	e2833044	 add         r3, r3, #0x44
  001b8	e3a02000	 mov         r2, #0
  001bc	e3a01001	 mov         r1, #1
  001c0	e3a00000	 mov         r0, #0
  001c4	eb000000	 bl          CreateEventW
  001c8	e3500000	 cmp         r0, #0
  001cc	e5850018	 str         r0, [r5, #0x18]

; 468  :     if (s_CpuPolicyInfo.hBootEvent == NULL)

  001d0	1a000007	 bne         |$LN7@CPULD_Init|

; 469  :         {
; 470  :         RETAILMSG(ZONE_ERROR, (L"CPULD_InitPolicy: Invalid/Missing "
; 471  :             L"BootEventName(%s).  Unloading policy\r\n",
; 472  :             s_CpuPolicyInfo.szBootEventName)
; 473  :             );

  001d4	e59f3174	 ldr         r3, [pc, #0x174]
  001d8	e5933440	 ldr         r3, [r3, #0x440]
  001dc	e3130001	 tst         r3, #1
  001e0	0a000053	 beq         |$cleanUp$36676|
  001e4	e2853008	 add         r3, r5, #8
  001e8	e59f0174	 ldr         r0, [pc, #0x174]
  001ec	e2831044	 add         r1, r3, #0x44

; 551  : 
; 552  :     ret = (HANDLE)&s_CpuPolicyInfo;

  001f0	ea00004e	 b           |$LN42@CPULD_Init|
  001f4		 |$LN7@CPULD_Init|

; 474  :         goto cleanUp;
; 475  :         }
; 476  : 
; 477  :     // Map SW CPUMONITOR interrupt
; 478  :     if (!KernelIoControl(
; 479  :             IOCTL_HAL_REQUEST_SYSINTR, &s_CpuPolicyInfo.irq,
; 480  :             sizeof(s_CpuPolicyInfo.irq),
; 481  :             &s_CpuPolicyInfo.sysIntr, sizeof(s_CpuPolicyInfo.sysIntr),
; 482  :             NULL
; 483  :             ))

  001f4	e59f0164	 ldr         r0, [pc, #0x164]
  001f8	e2852008	 add         r2, r5, #8
  001fc	e2853008	 add         r3, r5, #8
  00200	e2821f93	 add         r1, r2, #0x93, 30
  00204	e3a02004	 mov         r2, #4
  00208	e2833018	 add         r3, r3, #0x18
  0020c	e58d9004	 str         r9, [sp, #4]
  00210	e58da000	 str         r10, [sp]
  00214	eb000000	 bl          KernelIoControl
  00218	e3500000	 cmp         r0, #0
  0021c	0a000044	 beq         |$cleanUp$36676|

; 484  :         {
; 485  :         goto cleanUp;
; 486  :         }
; 487  : 
; 488  :     // Create interrupt event
; 489  :     s_CpuPolicyInfo.hCpuLoadEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00220	e3a03000	 mov         r3, #0
  00224	e3a02000	 mov         r2, #0
  00228	e3a01000	 mov         r1, #0
  0022c	e3a00000	 mov         r0, #0
  00230	eb000000	 bl          CreateEventW
  00234	e1b01000	 movs        r1, r0
  00238	e5851014	 str         r1, [r5, #0x14]

; 490  :     if (s_CpuPolicyInfo.hCpuLoadEvent == NULL)

  0023c	0a00003c	 beq         |$cleanUp$36676|

; 491  :         {
; 492  :         goto cleanUp;
; 493  :         }
; 494  : 
; 495  :     // bind system interrupt with event
; 496  :     InterruptInitialize(s_CpuPolicyInfo.sysIntr,
; 497  :                 s_CpuPolicyInfo.hCpuLoadEvent,
; 498  :                 &s_CpuPolicyInfo.dwInterruptThreshold,
; 499  :                 sizeof(s_CpuPolicyInfo.dwInterruptThreshold)
; 500  :                 );

  00240	e5950020	 ldr         r0, [r5, #0x20]
  00244	e2853008	 add         r3, r5, #8
  00248	e2832034	 add         r2, r3, #0x34
  0024c	e3a03004	 mov         r3, #4
  00250	eb000000	 bl          InterruptInitialize

; 501  : 
; 502  :     // don't enable interrupt until monitor thread is active
; 503  :     InterruptMask(s_CpuPolicyInfo.sysIntr, TRUE);

  00254	e5950020	 ldr         r0, [r5, #0x20]
  00258	e3a01001	 mov         r1, #1
  0025c	eb000000	 bl          InterruptMask

; 504  : 
; 505  :     // Set boot opm value
; 506  :     s_currentOpm = s_CpuPolicyInfo.dwBootOpm;

  00260	e5952044	 ldr         r2, [r5, #0x44]

; 507  :     s_requestedOpm = s_CpuPolicyInfo.dwBootOpm;
; 508  : 
; 509  :     // Obtain DVFS constraint handler
; 510  :     s_CpuPolicyInfo.hDvfsConstraint = PmxSetConstraintById(
; 511  :                                     CONSTRAINT_ID_DVFS,
; 512  :                                     CONSTRAINT_MSG_DVFS_REQUEST,
; 513  :                                     (void*)&s_currentOpm,
; 514  :                                     sizeof(DWORD)
; 515  :                                     );

  00264	e59f00f0	 ldr         r0, [pc, #0xF0]
  00268	e3a03004	 mov         r3, #4
  0026c	e5852004	 str         r2, [r5, #4]
  00270	e5852000	 str         r2, [r5]
  00274	e2852004	 add         r2, r5, #4
  00278	e3a01001	 mov         r1, #1
  0027c	eb000000	 bl          PmxSetConstraintById

; 516  : 
; 517  :     // register for DVFS change notifications
; 518  :     s_CpuPolicyInfo.hDvfsCallback = PmxRegisterConstraintCallback(
; 519  :                                         s_CpuPolicyInfo.hDvfsConstraint,
; 520  :                                         DvfsConstraintCallback,
; 521  :                                         NULL,
; 522  :                                         0,
; 523  :                                         (HANDLE)&s_CpuPolicyInfo
; 524  :                                         );

  00280	e59f10d0	 ldr         r1, [pc, #0xD0]
  00284	e1a04000	 mov         r4, r0
  00288	e285e008	 add         lr, r5, #8
  0028c	e3a03000	 mov         r3, #0
  00290	e3a02000	 mov         r2, #0
  00294	e5854008	 str         r4, [r5, #8]
  00298	e58de000	 str         lr, [sp]
  0029c	eb000000	 bl          PmxRegisterConstraintCallback
  002a0	e585000c	 str         r0, [r5, #0xC]

; 525  : 
; 526  :     // allocate buffer to hold history info
; 527  :     if (s_CpuPolicyInfo.dwMonitorWindow < s_CpuPolicyInfo.dwMonitorPeriod)

  002a4	e595102c	 ldr         r1, [r5, #0x2C]
  002a8	e5950028	 ldr         r0, [r5, #0x28]
  002ac	e1510000	 cmp         r1, r0

; 528  :         {
; 529  :         s_CpuPolicyInfo.dwMonitorWindow = s_CpuPolicyInfo.dwMonitorPeriod;

  002b0	31a01000	 movcc       r1, r0
  002b4	3585002c	 strcc       r0, [r5, #0x2C]

; 530  :         }
; 531  : 
; 532  :     s_CpuPolicyInfo.bucketCount = s_CpuPolicyInfo.dwMonitorWindow / s_CpuPolicyInfo.dwMonitorPeriod;

  002b8	eb000000	 bl          __rt_udiv
  002bc	e1a02000	 mov         r2, r0

; 533  :     s_CpuPolicyInfo.pBucketInfo = (BucketInfo_t*)LocalAlloc(LPTR,
; 534  :                                     sizeof(BucketInfo_t) +
; 535  :                                     (sizeof(DWORD) * s_CpuPolicyInfo.bucketCount)
; 536  :                                     );

  002c0	e2823003	 add         r3, r2, #3
  002c4	e1a01103	 mov         r1, r3, lsl #2
  002c8	e3a00040	 mov         r0, #0x40
  002cc	e585201c	 str         r2, [r5, #0x1C]
  002d0	eb000000	 bl          LocalAlloc
  002d4	e58502f8	 str         r0, [r5, #0x2F8]

; 537  : 
; 538  :     memset(s_CpuPolicyInfo.pBucketInfo, 0,
; 539  :                 sizeof(BucketInfo_t) +
; 540  :                 (sizeof(DWORD) * s_CpuPolicyInfo.bucketCount)
; 541  :                 );

  002d8	e595301c	 ldr         r3, [r5, #0x1C]
  002dc	e3a01000	 mov         r1, #0
  002e0	e2833003	 add         r3, r3, #3
  002e4	e1a02103	 mov         r2, r3, lsl #2
  002e8	eb000000	 bl          memset

; 542  : 
; 543  :     // Start running the thread that will check for the cpu load
; 544  :     s_CpuPolicyInfo.hCpuLoadThread = CreateThread(NULL, 0,
; 545  :                                             CpuLoadThreadFn, NULL, 0, NULL
; 546  :                                             );

  002ec	e59f2060	 ldr         r2, [pc, #0x60]
  002f0	e3a03000	 mov         r3, #0
  002f4	e3a01000	 mov         r1, #0
  002f8	e3a00000	 mov         r0, #0
  002fc	e58d9004	 str         r9, [sp, #4]
  00300	e58d9000	 str         r9, [sp]
  00304	eb000000	 bl          CreateThread
  00308	e5850010	 str         r0, [r5, #0x10]

; 547  : 
; 548  :     CeSetThreadPriority(s_CpuPolicyInfo.hCpuLoadThread,
; 549  :                       s_CpuPolicyInfo.priority256
; 550  :                       );

  0030c	e5951040	 ldr         r1, [r5, #0x40]
  00310	eb000000	 bl          CeSetThreadPriority

; 551  : 
; 552  :     ret = (HANDLE)&s_CpuPolicyInfo;

  00314	e2858008	 add         r8, r5, #8
  00318	ea000005	 b           |$cleanUp$36676|
  0031c		 |$LN19@CPULD_Init|

; 402  :     }
; 403  :     else
; 404  :     {
; 405  :         RETAILMSG(ZONE_ERROR,(L"CPULD_InitPolicy: Unsupported CPU family=(%x)", cpuFamily));

  0031c	e59f302c	 ldr         r3, [pc, #0x2C]
  00320	e5933440	 ldr         r3, [r3, #0x440]
  00324	e3130001	 tst         r3, #1
  00328	0a000001	 beq         |$cleanUp$36676|
  0032c	e59f0018	 ldr         r0, [pc, #0x18]
  00330		 |$LN42@CPULD_Init|
  00330	eb000000	 bl          NKDbgPrintfW
  00334		 |$cleanUp$36676|

; 553  : 
; 554  : cleanUp:
; 555  :     return ret;

  00334	e59d0214	 ldr         r0, [sp, #0x214]
  00338	eb000000	 bl          __security_check_cookie

; 556  : }

  0033c	e1a00008	 mov         r0, r8
  00340	e28ddf86	 add         sp, sp, #0x86, 30
  00344	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00348	e12fff1e	 bx          lr
  0034c		 |$LN47@CPULD_Init|
  0034c		 |$LN48@CPULD_Init|
  0034c	00000000	 DCD         |??_C@_1FM@HPFHHCFK@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAC?$AAP@|
  00350		 |$LN49@CPULD_Init|
  00350	00000000	 DCD         |dpCurSettings|
  00354		 |$LN50@CPULD_Init|
  00354	00000000	 DCD         |?CpuLoadThreadFn@@YAKPAX@Z|
  00358		 |$LN51@CPULD_Init|
  00358	00000000	 DCD         |?DvfsConstraintCallback@@YAHPAXK0I@Z|
  0035c		 |$LN52@CPULD_Init|
  0035c	00000000	 DCD         |??_C@_19BINEIDCP@?$AAD?$AAV?$AAF?$AAS?$AA?$AA@|
  00360		 |$LN53@CPULD_Init|
  00360	01010098	 DCD         0x1010098
  00364		 |$LN54@CPULD_Init|
  00364	00000000	 DCD         |??_C@_1JC@FFHPOPCB@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?1?$AAM?$AAi?$AAs?$AAs?$AAi?$AAn@|
  00368		 |$LN55@CPULD_Init|
  00368	00000000	 DCD         |??_C@_1EK@LKAEFDF@?$AAf?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAf?$AAl?$AAo?$AAo?$AAr?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$DN@|
  0036c		 |$LN56@CPULD_Init|
  0036c	00000000	 DCD         |??_C@_1JG@OBJIFLGH@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?1?$AAM?$AAi?$AAs?$AAs?$AAi?$AAn@|
  00370		 |$LN57@CPULD_Init|
  00370	00000000	 DCD         |g_policyRegParams|
  00374		 |$LN58@CPULD_Init|
  00374	00000000	 DCD         |??_C@_1M@FBGIFOCP@?$AA?2?$AA3?$AA5?$AA1?$AA7?$AA?$AA@|
  00378		 |$LN59@CPULD_Init|
  00378	00000000	 DCD         |??_C@_1M@LKEIENOA@?$AA?2?$AA3?$AA5?$AAx?$AAx?$AA?$AA@|
  0037c		 |$LN60@CPULD_Init|
  0037c	00000000	 DCD         |??_C@_1M@PIGNEKJN@?$AA?2?$AA3?$AA7?$AAx?$AAx?$AA?$AA@|
  00380		 |$LN61@CPULD_Init|
  00380	0101200c	 DCD         0x101200c
  00384		 |$LN62@CPULD_Init|
  00384	00000000	 DCD         |s_requestedOpm|
  00388		 |$LN63@CPULD_Init|
  00388	00000000	 DCD         |__security_cookie|
  0038c		 |$M36922|

			 ENDP  ; |?CPULD_InitPolicy@@YAPAXPBG@Z|, CPULD_InitPolicy

	EXPORT	|?CPULD_DeinitPolicy@@YAHPAX@Z|		; CPULD_DeinitPolicy
	IMPORT	|LocalFree|
	IMPORT	|PmxReleaseConstraint|
	IMPORT	|PmxUnregisterConstraintCallback|
	IMPORT	|InterruptDisable|
	IMPORT	|CloseHandle|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T36957| DCD	|$LN16@CPULD_Dein|
	DCD	0x40003001
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\policyadapters\cpuload\cpuloadpolicy.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CPULD_DeinitPolicy@@YAHPAX@Z| PROC	; CPULD_DeinitPolicy

; 568  : {

  00000		 |$LN16@CPULD_Dein|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36954|

; 569  :     BOOL rc = FALSE;
; 570  : 
; 571  :     // validate parameters
; 572  :     if (hPolicyAdapter != (HANDLE)&s_CpuPolicyInfo) goto cleanUp;

  00004	e59f40b0	 ldr         r4, [pc, #0xB0]
  00008	e3a03000	 mov         r3, #0
  0000c	e1500004	 cmp         r0, r4
  00010	1a000026	 bne         |$cleanUp$36715|

; 573  : 
; 574  :     if (s_CpuPolicyInfo.hCpuLoadThread != NULL)

  00014	e5943008	 ldr         r3, [r4, #8]
  00018	e3530000	 cmp         r3, #0
  0001c	0a000009	 beq         |$LN7@CPULD_Dein|

; 575  :         {
; 576  :         s_CpuPolicyInfo.bExit = TRUE;

  00020	e3a03001	 mov         r3, #1
  00024	e584301c	 str         r3, [r4, #0x1C]

; 577  :         SetEvent(s_CpuPolicyInfo.hCpuLoadEvent);

  00028	e594000c	 ldr         r0, [r4, #0xC]
  0002c	e3a01003	 mov         r1, #3
  00030	eb000000	 bl          EventModify

; 578  :         WaitForSingleObject(s_CpuPolicyInfo.hCpuLoadThread, INFINITE);

  00034	e5940008	 ldr         r0, [r4, #8]
  00038	e3e01000	 mvn         r1, #0
  0003c	eb000000	 bl          WaitForSingleObject

; 579  :         CloseHandle(s_CpuPolicyInfo.hCpuLoadThread);

  00040	e5940008	 ldr         r0, [r4, #8]
  00044	eb000000	 bl          CloseHandle
  00048		 |$LN7@CPULD_Dein|

; 580  :         }
; 581  : 
; 582  :     // release interrupt resources
; 583  :     if (s_CpuPolicyInfo.sysIntr != 0)

  00048	e5940018	 ldr         r0, [r4, #0x18]
  0004c	e3500000	 cmp         r0, #0

; 584  :         {
; 585  :         InterruptDisable(s_CpuPolicyInfo.sysIntr);

  00050	1b000000	 blne        InterruptDisable

; 586  :         }
; 587  : 
; 588  :     // release OS resources
; 589  :     if (s_CpuPolicyInfo.hBootEvent != NULL)

  00054	e5940010	 ldr         r0, [r4, #0x10]
  00058	e3500000	 cmp         r0, #0

; 590  :         {
; 591  :         CloseHandle(s_CpuPolicyInfo.hBootEvent);

  0005c	1b000000	 blne        CloseHandle

; 592  :         }
; 593  : 
; 594  :     if (s_CpuPolicyInfo.hCpuLoadEvent != NULL)

  00060	e594000c	 ldr         r0, [r4, #0xC]
  00064	e3500000	 cmp         r0, #0

; 595  :         {
; 596  :         CloseHandle(s_CpuPolicyInfo.hCpuLoadEvent);

  00068	1b000000	 blne        CloseHandle

; 597  :         }
; 598  : 
; 599  :     // release all PM resoureces
; 600  :     if (s_CpuPolicyInfo.hDvfsConstraint != NULL)

  0006c	e5940000	 ldr         r0, [r4]
  00070	e3500000	 cmp         r0, #0
  00074	0a000005	 beq         |$LN3@CPULD_Dein|

; 601  :         {
; 602  :         if (s_CpuPolicyInfo.hDvfsCallback != NULL)

  00078	e5941004	 ldr         r1, [r4, #4]
  0007c	e3510000	 cmp         r1, #0
  00080	0a000001	 beq         |$LN2@CPULD_Dein|

; 603  :             {
; 604  :             PmxUnregisterConstraintCallback(s_CpuPolicyInfo.hDvfsConstraint,
; 605  :                 s_CpuPolicyInfo.hDvfsCallback
; 606  :                 );

  00084	eb000000	 bl          PmxUnregisterConstraintCallback
  00088	e5940000	 ldr         r0, [r4]
  0008c		 |$LN2@CPULD_Dein|

; 607  :             }
; 608  :         PmxReleaseConstraint(s_CpuPolicyInfo.hDvfsConstraint);

  0008c	eb000000	 bl          PmxReleaseConstraint
  00090		 |$LN3@CPULD_Dein|

; 609  :         }
; 610  : 
; 611  :     if (s_CpuPolicyInfo.pBucketInfo != NULL)

  00090	e59402f0	 ldr         r0, [r4, #0x2F0]
  00094	e3500000	 cmp         r0, #0

; 612  :         {
; 613  :         LocalFree(s_CpuPolicyInfo.pBucketInfo);

  00098	1b000000	 blne        LocalFree

; 614  :         }
; 615  : 
; 616  :     // clear structures
; 617  :     memset(&s_CpuPolicyInfo, 0, sizeof(CpuPolicyInfo_t));

  0009c	e3a02fbd	 mov         r2, #0xBD, 30
  000a0	e3a01000	 mov         r1, #0
  000a4	e1a00004	 mov         r0, r4
  000a8	eb000000	 bl          memset

; 618  : 
; 619  :     rc = TRUE;

  000ac	e3a03001	 mov         r3, #1
  000b0		 |$cleanUp$36715|

; 620  : 
; 621  : cleanUp:
; 622  :     return rc;
; 623  : }

  000b0	e1a00003	 mov         r0, r3
  000b4	e8bd4010	 ldmia       sp!, {r4, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$LN17@CPULD_Dein|
  000bc		 |$LN18@CPULD_Dein|
  000bc	00000000	 DCD         |s_CpuPolicyInfo|
  000c0		 |$M36955|

			 ENDP  ; |?CPULD_DeinitPolicy@@YAHPAX@Z|, CPULD_DeinitPolicy

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|

  00000			 AREA	 |.pdata|, PDATA
|$T36970| DCD	|$LN8@DllMain|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllMain| PROC

; 639  : {

  00000		 |$LN8@DllMain|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36967|
  00004	e1a04000	 mov         r4, r0

; 640  :     UNREFERENCED_PARAMETER(pReserved);
; 641  : 
; 642  :     switch (reason)

  00008	e3510001	 cmp         r1, #1
  0000c	1a000003	 bne         |$LN2@DllMain|

; 643  :         {
; 644  :         case DLL_PROCESS_ATTACH:
; 645  :             RETAILREGISTERZONES((HMODULE)hDLL);

  00010	e59f1014	 ldr         r1, [pc, #0x14]
  00014	eb000000	 bl          RegisterDbgZones

; 646  :             DisableThreadLibraryCalls((HMODULE)hDLL);

  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          DisableThreadLibraryCalls
  00020		 |$LN2@DllMain|

; 647  :             break;
; 648  :         }
; 649  :     return TRUE;

  00020	e3a00001	 mov         r0, #1

; 650  : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$LN9@DllMain|
  0002c		 |$LN10@DllMain|
  0002c	00000000	 DCD         |dpCurSettings|
  00030		 |$M36968|

			 ENDP  ; |DllMain|

	END
