; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\PM\DEVICEMEDIATOR\dvfslist.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|ResetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T33095| DCD	|$LN5@ResetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ResetEvent| PROC

; 223  : _inline BOOL ResetEvent(HANDLE h) {

  00000		 |$LN5@ResetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M33092|

; 224  : 	return EventModify(h,EVENT_RESET);

  00004	e3a01002	 mov         r1, #2
  00008	eb000000	 bl          EventModify

; 225  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M33093|

			 ENDP  ; |ResetEvent|

	EXPORT	|??0DVFSElement@@QAA@PAVDeviceBase@@PAXKK@Z| ; DVFSElement::DVFSElement
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.h

  00000			 AREA	 |.pdata|, PDATA
|$T33108| DCD	|$LN5@DVFSElemen|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0DVFSElement@@QAA@PAVDeviceBase@@PAXKK@Z| PROC ; DVFSElement::DVFSElement

; 50   :         {        

  00000		 |$LN5@DVFSElemen|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M33105|
  00004	e59de004	 ldr         lr, [sp, #4]
  00008	e5803008	 str         r3, [r0, #8]
  0000c	e580200c	 str         r2, [r0, #0xC]
  00010	e580e010	 str         lr, [r0, #0x10]
  00014	e5801014	 str         r1, [r0, #0x14]

; 51   :         }

  00018	e49de004	 ldr         lr, [sp], #4
  0001c	e12fff1e	 bx          lr
  00020		 |$M33106|

			 ENDP  ; |??0DVFSElement@@QAA@PAVDeviceBase@@PAXKK@Z|, DVFSElement::DVFSElement

	EXPORT	|?Lock@DVFSList@@IAAXXZ|		; DVFSList::Lock
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T33116| DCD	|$LN5@Lock|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@DVFSList@@IAAXXZ| PROC		; DVFSList::Lock

; 93   :         {

  00000		 |$LN5@Lock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M33113|

; 94   :         ::EnterCriticalSection(&m_cs);

  00004	e2800010	 add         r0, r0, #0x10
  00008	eb000000	 bl          EnterCriticalSection

; 95   :         }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M33114|

			 ENDP  ; |?Lock@DVFSList@@IAAXXZ|, DVFSList::Lock

	EXPORT	|?Unlock@DVFSList@@IAAXXZ|		; DVFSList::Unlock
	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T33124| DCD	|$LN5@Unlock|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Unlock@DVFSList@@IAAXXZ| PROC	; DVFSList::Unlock

; 98   :         {

  00000		 |$LN5@Unlock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M33121|

; 99   :         ::LeaveCriticalSection(&m_cs);

  00004	e2800010	 add         r0, r0, #0x10
  00008	eb000000	 bl          LeaveCriticalSection

; 100  :         }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M33122|

			 ENDP  ; |?Unlock@DVFSList@@IAAXXZ|, DVFSList::Unlock

	EXPORT	|?Initialize@DVFSList@@UAAHXZ|		; DVFSList::Initialize
	IMPORT	|InitializeCriticalSection|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T33134| DCD	|$LN5@Initialize|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Initialize@DVFSList@@UAAHXZ| PROC	; DVFSList::Initialize

; 43   : {

  00000		 |$LN5@Initialize|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M33131|

; 44   :     ::InitializeCriticalSection(&m_cs);

  00004	e2800010	 add         r0, r0, #0x10
  00008	eb000000	 bl          InitializeCriticalSection

; 45   :     return TRUE;

  0000c	e3a00001	 mov         r0, #1

; 46   : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M33132|

			 ENDP  ; |?Initialize@DVFSList@@UAAHXZ|, DVFSList::Initialize

	EXPORT	|?Uninitialize@DVFSList@@UAAHXZ|	; DVFSList::Uninitialize
	IMPORT	|DeleteCriticalSection|
	IMPORT	|??3@YAXPAX@Z|				; operator delete
	IMPORT	|CloseHandle|

  00000			 AREA	 |.pdata|, PDATA
|$T33148| DCD	|$LN12@Uninitiali|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Uninitialize@DVFSList@@UAAHXZ| PROC	; DVFSList::Uninitialize

; 51   : {

  00000		 |$LN12@Uninitiali|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M33145|
  00004	e1a04000	 mov         r4, r0

; 52   :     // iterate through and release all elements
; 53   :     DVFSElement *pCurrent = m_pDVFSElementHead;

  00008	e5943024	 ldr         r3, [r4, #0x24]
  0000c	e1b05003	 movs        r5, r3

; 54   :     while (pCurrent != NULL)

  00010	0a00000d	 beq         |$LN4@Uninitiali|
  00014	e3a06000	 mov         r6, #0
  00018		 |$LL5@Uninitiali|

; 55   :         {
; 56   :         // move head pointer to next element
; 57   :         if (m_pDVFSElementHead == pCurrent->Flink) 

  00018	e5952000	 ldr         r2, [r5]
  0001c	e1530002	 cmp         r3, r2

; 58   :             {
; 59   :             m_pDVFSElementHead = NULL;

  00020	05846024	 streq       r6, [r4, #0x24]

; 60   :             }
; 61   :         else
; 62   :             {
; 63   :             m_pDVFSElementHead = (DVFSElement*)pCurrent->Flink;

  00024	15842024	 strne       r2, [r4, #0x24]

; 64   :             }
; 65   : 
; 66   :         if (pCurrent->m_AsyncEvent != NULL) ::CloseHandle(pCurrent->m_AsyncEvent);

  00028	e595300c	 ldr         r3, [r5, #0xC]
  0002c	e3530000	 cmp         r3, #0
  00030	11a00003	 movne       r0, r3
  00034	1b000000	 blne        CloseHandle

; 67   :         delete pCurrent;

  00038	e1a00005	 mov         r0, r5
  0003c	eb000000	 bl          |??3@YAXPAX@Z|

; 68   :         pCurrent = m_pDVFSElementHead;

  00040	e5943024	 ldr         r3, [r4, #0x24]
  00044	e1b05003	 movs        r5, r3
  00048	1afffff2	 bne         |$LL5@Uninitiali|
  0004c		 |$LN4@Uninitiali|

; 69   :         }
; 70   : 
; 71   :     ::DeleteCriticalSection(&m_cs);

  0004c	e2840010	 add         r0, r4, #0x10
  00050	eb000000	 bl          DeleteCriticalSection

; 72   :     return TRUE;

  00054	e3a00001	 mov         r0, #1

; 73   : }

  00058	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M33146|

			 ENDP  ; |?Uninitialize@DVFSList@@UAAHXZ|, DVFSList::Uninitialize

	EXPORT	|?InsertElementByOrder@DVFSList@@IAAXPAVDVFSElement@@@Z| ; DVFSList::InsertElementByOrder
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.h

  00000			 AREA	 |.pdata|, PDATA
|$T33169| DCD	|$LN23@InsertElem|
	DCD	0x40002701
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InsertElementByOrder@DVFSList@@IAAXPAVDVFSElement@@@Z| PROC ; DVFSList::InsertElementByOrder

; 78   : {

  00000		 |$LN23@InsertElem|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M33166|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0

; 79   :     Lock();

  0000c	e2850010	 add         r0, r5, #0x10
  00010	eb000000	 bl          EnterCriticalSection

; 80   :     if (m_pDVFSElementHead != NULL)

  00014	e5953024	 ldr         r3, [r5, #0x24]
  00018	e1b02003	 movs        r2, r3
  0001c	0a000017	 beq         |$LN11@InsertElem|

; 81   :         {        
; 82   :         // code is optimized on the assumption that higher priority
; 83   :         // elements will get loaded before lower priority elements
; 84   :         //
; 85   :         DVFSElement *pCurrent = m_pDVFSElementHead;

  00020	e5940008	 ldr         r0, [r4, #8]
  00024	e1a01002	 mov         r1, r2
  00028		 |$LL10@InsertElem|

; 86   :         do
; 87   :             {
; 88   :             pCurrent = (DVFSElement*)pCurrent->Blink;

  00028	e5911004	 ldr         r1, [r1, #4]

; 89   :             if (pCurrent->m_dwOrder < pElement->m_dwOrder) break;            

  0002c	e5913008	 ldr         r3, [r1, #8]
  00030	e1530000	 cmp         r3, r0
  00034	3a000001	 bcc         |$LN8@InsertElem|

; 90   :             }
; 91   :             while (pCurrent != m_pDVFSElementHead);

  00038	e1510002	 cmp         r1, r2
  0003c	1afffff9	 bne         |$LL10@InsertElem|
  00040		 |$LN8@InsertElem|

; 92   : 
; 93   :         // update head if necessary
; 94   :         if (pElement->m_dwOrder < m_pDVFSElementHead->m_dwOrder) 

  00040	e5923008	 ldr         r3, [r2, #8]
  00044	e1500003	 cmp         r0, r3

; 95   :             {
; 96   : #pragma warning(push)
; 97   : #pragma warning(disable:4127)
; 98   :             InsertTailList(m_pDVFSElementHead, pElement);

  00048	35923004	 ldrcc       r3, [r2, #4]
  0004c	35842000	 strcc       r2, [r4]
  00050	35843004	 strcc       r3, [r4, #4]
  00054	35834000	 strcc       r4, [r3]
  00058	35824004	 strcc       r4, [r2, #4]
  0005c	3a000009	 bcc         |$LN20@InsertElem|

; 99   : #pragma warning(pop)
; 100  : 
; 101  :             m_pDVFSElementHead = pElement;
; 102  :             }
; 103  :         else
; 104  :             {
; 105  :             // insert into list
; 106  :             InsertEntryList(pCurrent, pElement, pCurrent->Flink);

  00060	e5913000	 ldr         r3, [r1]
  00064	e5843000	 str         r3, [r4]
  00068	e5814000	 str         r4, [r1]
  0006c	e5942000	 ldr         r2, [r4]
  00070	e5923004	 ldr         r3, [r2, #4]
  00074	e5843004	 str         r3, [r4, #4]
  00078	e5824004	 str         r4, [r2, #4]

; 107  :             }
; 108  :         }
; 109  :     else

  0007c	ea000002	 b           |$LN1@InsertElem|
  00080		 |$LN11@InsertElem|

; 110  :         {
; 111  :         InitializeListHead(pElement);

  00080	e5844004	 str         r4, [r4, #4]
  00084	e5844000	 str         r4, [r4]
  00088		 |$LN20@InsertElem|

; 112  :         m_pDVFSElementHead = pElement;

  00088	e5854024	 str         r4, [r5, #0x24]
  0008c		 |$LN1@InsertElem|

; 113  :         }
; 114  : 
; 115  :     Unlock();

  0008c	e2850010	 add         r0, r5, #0x10
  00090	eb000000	 bl          LeaveCriticalSection

; 116  : }

  00094	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$M33167|

			 ENDP  ; |?InsertElementByOrder@DVFSList@@IAAXPAVDVFSElement@@@Z|, DVFSList::InsertElementByOrder

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?InsertDevice@DVFSList@@UAAHPBGPAVDeviceBase@@PAUHKEY__@@@Z| ; DVFSList::InsertDevice
	EXPORT	|??_C@_1CG@FKLAKBOO@?$AAD?$AAV?$AAF?$AAS?$AAA?$AAs?$AAy?$AAn?$AAc?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@EKANOLAD@?$AAD?$AAV?$AAF?$AAS?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@FDFHKIMD@?$AAD?$AAV?$AAF?$AAS?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|CreateEventW|
	IMPORT	|RegQueryValueExW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|wcslen|
	IMPORT	|__security_check_cookie|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.h

  00000			 AREA	 |.pdata|, PDATA
|$T33204| DCD	|$LN19@InsertDevi|
	DCD	0xc0005f02

  00000			 AREA	 |.xdata|, DATA
|$T33200| DCD	0xffffffdc

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@FKLAKBOO@?$AAD?$AAV?$AAF?$AAS?$AAA?$AAs?$AAy?$AAn?$AAc?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| DCB "D"
	DCB	0x0, "V", 0x0, "F", 0x0, "S", 0x0, "A", 0x0, "s", 0x0, "y"
	DCB	0x0, "n", 0x0, "c", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "N", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@EKANOLAD@?$AAD?$AAV?$AAF?$AAS?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@| DCB "D"
	DCB	0x0, "V", 0x0, "F", 0x0, "S", 0x0, "O", 0x0, "r", 0x0, "d"
	DCB	0x0, "e", 0x0, "r", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@FDFHKIMD@?$AAD?$AAV?$AAF?$AAS?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$AA@| DCB "D"
	DCB	0x0, "V", 0x0, "F", 0x0, "S", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "g", 0x0, "s", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T33200|

  00008		 |?InsertDevice@DVFSList@@UAAHPBGPAVDeviceBase@@PAUHKEY__@@@Z| PROC ; DVFSList::InsertDevice

; 125  : {

  00008		 |$LN19@InsertDevi|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24ddf89	 sub         sp, sp, #0x89, 30
  00010		 |$M33201|
  00010	e1a05003	 mov         r5, r3
  00014	e1a08002	 mov         r8, r2
  00018	e1a07000	 mov         r7, r0
  0001c	e59f315c	 ldr         r3, [pc, #0x15C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d3220	 str         r3, [sp, #0x220]

; 126  :     BOOL rc = FALSE;
; 127  :     
; 128  :     UNREFERENCED_PARAMETER(szDeviceName);
; 129  : 
; 130  :     // Get Notification flags
; 131  :     DWORD dwType = REG_DWORD;
; 132  :     DWORD ffDVFSNotificationType;
; 133  :     DWORD dwSize = sizeof(ffDVFSNotificationType);
; 134  :     if (::RegQueryValueEx(hKey, REGEDIT_DVFS_FLAGS, NULL, &dwType, 
; 135  :             (BYTE*)&ffDVFSNotificationType, &dwSize) != ERROR_SUCCESS)

  00028	e59f114c	 ldr         r1, [pc, #0x14C]
  0002c	e3a09004	 mov         r9, #4
  00030	e3a0a004	 mov         r10, #4
  00034	e28de00c	 add         lr, sp, #0xC
  00038	e28d4010	 add         r4, sp, #0x10
  0003c	e1a00005	 mov         r0, r5
  00040	e28d3008	 add         r3, sp, #8
  00044	e3a02000	 mov         r2, #0
  00048	e3a06000	 mov         r6, #0
  0004c	e58d9008	 str         r9, [sp, #8]
  00050	e58da00c	 str         r10, [sp, #0xC]
  00054	e58de004	 str         lr, [sp, #4]
  00058	e58d4000	 str         r4, [sp]
  0005c	eb000000	 bl          RegQueryValueExW
  00060	e3500000	 cmp         r0, #0
  00064	1a00003c	 bne         |$cleanUp$32921|

; 136  :         {
; 137  :         goto cleanUp;
; 138  :         }
; 139  : 
; 140  :     // Get Notification Order
; 141  :     DWORD dwOrder;
; 142  :     dwType = REG_DWORD;
; 143  :     dwSize = sizeof(dwOrder);
; 144  :     if (::RegQueryValueEx(hKey, REGEDIT_DVFS_ORDER, NULL, &dwType, 
; 145  :             (BYTE*)&dwOrder, &dwSize) != ERROR_SUCCESS)

  00068	e59f1108	 ldr         r1, [pc, #0x108]
  0006c	e3a09004	 mov         r9, #4
  00070	e3a0a004	 mov         r10, #4
  00074	e28de00c	 add         lr, sp, #0xC
  00078	e28d4014	 add         r4, sp, #0x14
  0007c	e28d3008	 add         r3, sp, #8
  00080	e3a02000	 mov         r2, #0
  00084	e1a00005	 mov         r0, r5
  00088	e58d9008	 str         r9, [sp, #8]
  0008c	e58da00c	 str         r10, [sp, #0xC]
  00090	e58de004	 str         lr, [sp, #4]
  00094	e58d4000	 str         r4, [sp]
  00098	eb000000	 bl          RegQueryValueExW
  0009c	e3500000	 cmp         r0, #0
  000a0	1a00002d	 bne         |$cleanUp$32921|

; 146  :         {
; 147  :         goto cleanUp;
; 148  :         }
; 149  : 
; 150  :     // Get ansync event name
; 151  :     HANDLE hEvent = NULL;
; 152  :     _TCHAR szEventName[MAX_PATH];
; 153  :     dwType = REG_SZ;
; 154  :     dwSize = sizeof(szEventName);
; 155  :     if (::RegQueryValueEx(hKey, REGEDIT_DVFS_ASYNCEVENT, NULL, &dwType,
; 156  :             (BYTE*)szEventName, &dwSize) == ERROR_SUCCESS)

  000a4	e59f10c8	 ldr         r1, [pc, #0xC8]
  000a8	e3a09001	 mov         r9, #1
  000ac	e3a0af82	 mov         r10, #0x82, 30
  000b0	e28de00c	 add         lr, sp, #0xC
  000b4	e28d4018	 add         r4, sp, #0x18
  000b8	e28d3008	 add         r3, sp, #8
  000bc	e3a02000	 mov         r2, #0
  000c0	e1a00005	 mov         r0, r5
  000c4	e3a05000	 mov         r5, #0
  000c8	e58d9008	 str         r9, [sp, #8]
  000cc	e58da00c	 str         r10, [sp, #0xC]
  000d0	e58de004	 str         lr, [sp, #4]
  000d4	e58d4000	 str         r4, [sp]
  000d8	eb000000	 bl          RegQueryValueExW
  000dc	e3500000	 cmp         r0, #0
  000e0	1a00000a	 bne         |$LN4@InsertDevi|

; 157  :         {
; 158  :         if (_tcslen(szEventName) > 0)

  000e4	e28d0018	 add         r0, sp, #0x18
  000e8	eb000000	 bl          wcslen
  000ec	e3500000	 cmp         r0, #0
  000f0	0a000006	 beq         |$LN4@InsertDevi|

; 159  :             {
; 160  :             hEvent = CreateEvent(NULL, TRUE, FALSE, szEventName);

  000f4	e28d3018	 add         r3, sp, #0x18
  000f8	e3a02000	 mov         r2, #0
  000fc	e3a01001	 mov         r1, #1
  00100	e3a00000	 mov         r0, #0
  00104	eb000000	 bl          CreateEventW
  00108	e1b05000	 movs        r5, r0

; 161  :             if (hEvent == NULL)

  0010c	0a000012	 beq         |$cleanUp$32921|
  00110		 |$LN4@InsertDevi|

; 162  :                 {
; 163  :                 goto cleanUp;
; 164  :                 }
; 165  :             }
; 166  :         }
; 167  : 
; 168  :     // create DVFS Element
; 169  :     DVFSElement *pElement = new DVFSElement(pDevice, hEvent, dwOrder, ffDVFSNotificationType);

  00110	e3a00018	 mov         r0, #0x18
  00114	eb000000	 bl          |??2@YAPAXI@Z|
  00118	e3500000	 cmp         r0, #0
  0011c	159d3010	 ldrne       r3, [sp, #0x10]
  00120	159d2014	 ldrne       r2, [sp, #0x14]
  00124	1580500c	 strne       r5, [r0, #0xC]
  00128	15803010	 strne       r3, [r0, #0x10]
  0012c	15802008	 strne       r2, [r0, #8]
  00130	15808014	 strne       r8, [r0, #0x14]
  00134	03a00000	 moveq       r0, #0

; 170  :     if (pElement == NULL)

  00138	e3500000	 cmp         r0, #0
  0013c	1a000002	 bne         |$LN2@InsertDevi|

; 171  :         {
; 172  :         CloseHandle(hEvent);

  00140	e1a00005	 mov         r0, r5
  00144	eb000000	 bl          CloseHandle

; 180  : 
; 181  : cleanUp:

  00148	ea000003	 b           |$cleanUp$32921|
  0014c		 |$LN2@InsertDevi|

; 173  :         goto cleanUp;
; 174  :         }
; 175  :         
; 176  :     // add it to list
; 177  :     InsertElementByOrder(pElement);

  0014c	e1a01000	 mov         r1, r0
  00150	e1a00007	 mov         r0, r7
  00154	eb000000	 bl          |?InsertElementByOrder@DVFSList@@IAAXPAVDVFSElement@@@Z|

; 178  : 
; 179  :     rc = TRUE;

  00158	e3a06001	 mov         r6, #1
  0015c		 |$cleanUp$32921|

; 182  :     return rc;    

  0015c	e59d0220	 ldr         r0, [sp, #0x220]
  00160	eb000000	 bl          __security_check_cookie

; 183  : }

  00164	e1a00006	 mov         r0, r6
  00168	e28ddf89	 add         sp, sp, #0x89, 30
  0016c	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00170	e12fff1e	 bx          lr
  00174		 |$LN20@InsertDevi|
  00174		 |$LN21@InsertDevi|
  00174	00000000	 DCD         |??_C@_1CG@FKLAKBOO@?$AAD?$AAV?$AAF?$AAS?$AAA?$AAs?$AAy?$AAn?$AAc?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@|
  00178		 |$LN22@InsertDevi|
  00178	00000000	 DCD         |??_C@_1BE@EKANOLAD@?$AAD?$AAV?$AAF?$AAS?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@|
  0017c		 |$LN23@InsertDevi|
  0017c	00000000	 DCD         |??_C@_1BE@FDFHKIMD@?$AAD?$AAV?$AAF?$AAS?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$AA@|
  00180		 |$LN24@InsertDevi|
  00180	00000000	 DCD         |__security_cookie|
  00184		 |$M33202|

			 ENDP  ; |?InsertDevice@DVFSList@@UAAHPBGPAVDeviceBase@@PAUHKEY__@@@Z|, DVFSList::InsertDevice

	EXPORT	|?RemoveDevice@DVFSList@@UAAHPBGPAVDeviceBase@@@Z| ; DVFSList::RemoveDevice
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.h

  00000			 AREA	 |.pdata|, PDATA
|$T33232| DCD	|$LN23@RemoveDevi|
	DCD	0x40002a01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RemoveDevice@DVFSList@@UAAHPBGPAVDeviceBase@@@Z| PROC ; DVFSList::RemoveDevice

; 191  : {   

  00000		 |$LN23@RemoveDevi|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M33229|
  00004	e1a07002	 mov         r7, r2
  00008	e1a05000	 mov         r5, r0

; 192  :     BOOL rc = TRUE;
; 193  :     DVFSElement *pRemove = NULL;
; 194  :     DVFSElement *pCurrent = m_pDVFSElementHead;
; 195  : 
; 196  :     UNREFERENCED_PARAMETER(szDeviceName);
; 197  :     
; 198  :     Lock();

  0000c	e5956024	 ldr         r6, [r5, #0x24]
  00010	e2850010	 add         r0, r5, #0x10
  00014	e3a04000	 mov         r4, #0
  00018	eb000000	 bl          EnterCriticalSection
  0001c		 |$LL12@RemoveDevi|

; 199  :     
; 200  :     // iterate through list and find element to remove
; 201  :     //
; 202  :     do
; 203  :         {
; 204  :         pCurrent = (DVFSElement*)pCurrent->Blink;

  0001c	e5966004	 ldr         r6, [r6, #4]

; 205  :         if (pCurrent->m_pDevice == pDevice)

  00020	e5963014	 ldr         r3, [r6, #0x14]
  00024	e1530007	 cmp         r3, r7
  00028	0a000003	 beq         |$LN20@RemoveDevi|

; 208  :             break;
; 209  :             }
; 210  :         }
; 211  :         while (pCurrent != m_pDVFSElementHead);

  0002c	e5953024	 ldr         r3, [r5, #0x24]
  00030	e1560003	 cmp         r6, r3
  00034	1afffff8	 bne         |$LL12@RemoveDevi|
  00038	ea000000	 b           |$LN10@RemoveDevi|
  0003c		 |$LN20@RemoveDevi|

; 206  :             {
; 207  :             pRemove = pCurrent;

  0003c	e1a04006	 mov         r4, r6
  00040		 |$LN10@RemoveDevi|

; 212  : 
; 213  :     // check for head ptr
; 214  :     //
; 215  :     if (pRemove == m_pDVFSElementHead)

  00040	e5953024	 ldr         r3, [r5, #0x24]
  00044	e1540003	 cmp         r4, r3
  00048	1a000003	 bne         |$LN6@RemoveDevi|

; 216  :         {
; 217  :         if (pRemove->Flink == pRemove)

  0004c	e5943000	 ldr         r3, [r4]
  00050	e1530004	 cmp         r3, r4

; 218  :             {
; 219  :             // previously only 1 element in the list.
; 220  :             m_pDVFSElementHead = NULL;

  00054	03a03000	 moveq       r3, #0

; 221  :             }
; 222  :         else
; 223  :             {
; 224  :             m_pDVFSElementHead = (DVFSElement*)pRemove->Flink;

  00058	e5853024	 str         r3, [r5, #0x24]
  0005c		 |$LN6@RemoveDevi|

; 225  :             }
; 226  :         }
; 227  : 
; 228  :     // free all allocated resources
; 229  :     if (pRemove != NULL)

  0005c	e3540000	 cmp         r4, #0
  00060	0a00000b	 beq         |$LN5@RemoveDevi|

; 230  :         {
; 231  : #pragma warning(push)
; 232  : #pragma warning(disable:4127)
; 233  :         RemoveEntryList(pRemove);

  00064	e5942004	 ldr         r2, [r4, #4]
  00068	e5943000	 ldr         r3, [r4]
  0006c	e5823000	 str         r3, [r2]
  00070	e5942000	 ldr         r2, [r4]
  00074	e5943004	 ldr         r3, [r4, #4]
  00078	e5823004	 str         r3, [r2, #4]

; 234  : #pragma warning(pop)
; 235  :         if (pRemove->m_AsyncEvent != NULL) ::CloseHandle(pRemove->m_AsyncEvent);

  0007c	e594300c	 ldr         r3, [r4, #0xC]
  00080	e3530000	 cmp         r3, #0
  00084	11a00003	 movne       r0, r3
  00088	1b000000	 blne        CloseHandle

; 236  :         delete pRemove;

  0008c	e1a00004	 mov         r0, r4
  00090	eb000000	 bl          |??3@YAXPAX@Z|
  00094		 |$LN5@RemoveDevi|

; 237  :         rc = TRUE;
; 238  :         }
; 239  : 
; 240  :     Unlock();

  00094	e2850010	 add         r0, r5, #0x10
  00098	eb000000	 bl          LeaveCriticalSection

; 241  :     return rc;

  0009c	e3a00001	 mov         r0, #1

; 242  : }

  000a0	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$M33230|

			 ENDP  ; |?RemoveDevice@DVFSList@@UAAHPBGPAVDeviceBase@@@Z|, DVFSList::RemoveDevice

	EXPORT	|?WaitForAcknowledgements@DVFSList@@IAAHPAPAXI@Z| ; DVFSList::WaitForAcknowledgements
	IMPORT	|GetEventData|
	IMPORT	|WaitForMultipleObjects|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.h

  00000			 AREA	 |.pdata|, PDATA
|$T33254| DCD	|$LN21@WaitForAck|
	DCD	0x40002601
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WaitForAcknowledgements@DVFSList@@IAAHPAPAXI@Z| PROC ; DVFSList::WaitForAcknowledgements

; 247  : {

  00000		 |$LN21@WaitForAck|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M33251|
  00004	e1a05002	 mov         r5, r2
  00008	e1a0a001	 mov         r10, r1
  0000c	e1a09000	 mov         r9, r0

; 248  :     UINT idx;
; 249  :     DWORD code;
; 250  :     BOOL rc = TRUE;
; 251  : 
; 252  :     Lock();

  00010	e2890010	 add         r0, r9, #0x10
  00014	e3a04001	 mov         r4, #1
  00018	eb000000	 bl          EnterCriticalSection
  0001c	e3a03c01	 mov         r3, #1, 24
  00020	e383b002	 orr         r11, r3, #2
  00024	e08a6105	 add         r6, r10, r5, lsl #2
  00028		 |$LL10@WaitForAck|

; 253  :     
; 254  :     // wait for all events to get signaled
; 255  :     while (rc != DVFS_FAIL_TRANSITION && (count > 0))

  00028	e3550000	 cmp         r5, #0
  0002c	0a000014	 beq         |$cleanUp$32982|

; 256  :         {
; 257  :         code = ::WaitForMultipleObjects(count, rgEvents, 0, MAX_ASYNC_TIMEOUT);

  00030	e3a03064	 mov         r3, #0x64
  00034	e3a02000	 mov         r2, #0
  00038	e1a0100a	 mov         r1, r10
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          WaitForMultipleObjects
  00044	e1a08000	 mov         r8, r0

; 258  :         switch (code)

  00048	e158000b	 cmp         r8, r11
  0004c	0a00000b	 beq         |$LN6@WaitForAck|

; 262  :                 goto cleanUp;
; 263  : 
; 264  :             default:
; 265  :                 // find which event got signaled
; 266  :                 //
; 267  :                 idx = code - WAIT_OBJECT_0;
; 268  : 
; 269  :                 // check if successful 
; 270  :                 if (GetEventData(rgEvents[idx]) == DVFS_FAIL_TRANSITION)

  00050	e1a0700a	 mov         r7, r10
  00054	e7b70108	 ldr         r0, [r7, +r8, lsl #2]!
  00058	eb000000	 bl          GetEventData
  0005c	e3700001	 cmn         r0, #1
  00060	0a000006	 beq         |$LN6@WaitForAck|

; 271  :                     {
; 272  :                     rc = FALSE;
; 273  :                     goto cleanUp;
; 274  :                     }
; 275  : 
; 276  :                 --count;

  00064	e2455001	 sub         r5, r5, #1

; 277  :                 if (idx < count)

  00068	e1580005	 cmp         r8, r5
  0006c	e2466004	 sub         r6, r6, #4
  00070	2affffec	 bcs         |$LL10@WaitForAck|

; 278  :                     {
; 279  :                     // replace signaled event with the one in the back
; 280  :                     rgEvents[idx] = rgEvents[count];

  00074	e5963000	 ldr         r3, [r6]
  00078	e5873000	 str         r3, [r7]
  0007c	eaffffe9	 b           |$LL10@WaitForAck|
  00080		 |$LN6@WaitForAck|

; 259  :             {
; 260  :             case WAIT_TIMEOUT:
; 261  :                 rc = FALSE;

  00080	e3a04000	 mov         r4, #0
  00084		 |$cleanUp$32982|

; 281  :                     }
; 282  :                 break;
; 283  :             }
; 284  :         }    
; 285  : 
; 286  : cleanUp:
; 287  :     Unlock();

  00084	e2890010	 add         r0, r9, #0x10
  00088	eb000000	 bl          LeaveCriticalSection

; 288  :     return rc;
; 289  : }

  0008c	e1a00004	 mov         r0, r4
  00090	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$M33252|

			 ENDP  ; |?WaitForAcknowledgements@DVFSList@@IAAHPAPAXI@Z|, DVFSList::WaitForAcknowledgements

	EXPORT	|?SendIoControl@DVFSList@@UAAHKKPAXK0KPAK@Z| ; DVFSList::SendIoControl
	IMPORT	|SetEventData|
	IMPORT	|__C_specific_handler|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.h

  00000			 AREA	 |.pdata|, PDATA
|$T33312| DCD	|$LN53@SendIoCont|
	DCD	0xc0008e06

  00000			 AREA	 |.pdata|, PDATA
|$T33314| DCD	|$LN28@SendIoCont|
	DCD	0x40000502

  00000			 AREA	 |.pdata|, PDATA
|$T33316| DCD	|$LN21@SendIoCont|
	DCD	0x40000602

  00000			 AREA	 |.xdata|, DATA
|$T33310| DCD	0x2
	DCD	|$LL32@SendIoCont|
	DCD	|$LN33@SendIoCont|
	DCD	|$LN28@SendIoCont|
	DCD	|$LN29@SendIoCont|
	DCD	|$LN25@SendIoCont|
	DCD	|$LN26@SendIoCont|
	DCD	|$LN21@SendIoCont|
	DCD	|$LN22@SendIoCont|
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T33310|

  00008		 |?SendIoControl@DVFSList@@UAAHKKPAXK0KPAK@Z| PROC ; DVFSList::SendIoControl

; 302  : { 

  00008		 |$LN53@SendIoCont|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d000f	 stmdb       sp!, {r0 - r3}
  00010	e92d5ff0	 stmdb       sp!, {r4 - r12, lr}
  00014	e28db028	 add         r11, sp, #0x28
  00018	e59fc248	 ldr         r12, [pc, #0x248]
  0001c	e08dd00c	 add         sp, sp, r12
  00020		 |$LN51@SendIoCont|
  00020	e50b3440	 str         r3, [r11, #-0x440]
  00024	e58b300c	 str         r3, [r11, #0xC]
  00028	e1a03002	 mov         r3, r2
  0002c	e50b343c	 str         r3, [r11, #-0x43C]
  00030	e58b3008	 str         r3, [r11, #8]
  00034	e1a0a001	 mov         r10, r1
  00038	e1a07000	 mov         r7, r0
  0003c	e50b7438	 str         r7, [r11, #-0x438]
  00040	e58b7000	 str         r7, [r11]

; 303  :     BOOL rc = TRUE;
; 304  :     DWORD nEvents = 0;
; 305  :     DVFSElement *pElement;
; 306  :     HANDLE rgEvents[DVFS_MAX_ASYNC_EVENTS];
; 307  :     
; 308  :     if (m_pDVFSElementHead == NULL) return rc;

  00044	e597e024	 ldr         lr, [r7, #0x24]
  00048	e3a09000	 mov         r9, #0
  0004c	e3a06001	 mov         r6, #1
  00050	e35e0000	 cmp         lr, #0
  00054	e50b9430	 str         r9, [r11, #-0x430]
  00058	03a06001	 moveq       r6, #1
  0005c	0a000073	 beq         |$LN18@SendIoCont|

; 309  : 
; 310  :     Lock();

  00060	e2870010	 add         r0, r7, #0x10
  00064	eb000000	 bl          EnterCriticalSection

; 311  :          
; 312  :     // iterate through all the objects and send notifications
; 313  :     // to all DVFS listeners
; 314  :     pElement = m_pDVFSElementHead;

  00068	e5975024	 ldr         r5, [r7, #0x24]
  0006c	e50b5434	 str         r5, [r11, #-0x434]

; 315  :     if (dwParam & (DVFS_CORE1_PRE_NOTICE | DVFS_MPU1_PRE_NOTICE))

  00070	e21a8011	 ands        r8, r10, #0x11
  00074	0a00004a	 beq         |$LN47@SendIoCont|

; 316  :         {
; 317  :         // mask out post notifications
; 318  :         dwParam &= (DVFS_CORE1_PRE_NOTICE | DVFS_MPU1_PRE_NOTICE);

  00078	e1a0a008	 mov         r10, r8
  0007c	e58b8004	 str         r8, [r11, #4]
  00080		 |$LN25@SendIoCont|

; 319  : 
; 320  :         // loop within exception handler so we handle failures gracefully
; 321  :         _try 

  00080	e59b4010	 ldr         r4, [r11, #0x10]
  00084		 |$LL14@SendIoCont|

; 322  :             {   
; 323  :             do
; 324  :                 {
; 325  :                 // check if a notification should be sent for this element
; 326  :                 if (pElement->m_ffDVFSNotificationType & dwParam)

  00084	e5953010	 ldr         r3, [r5, #0x10]
  00088	e1130008	 tst         r3, r8
  0008c	0a000023	 beq         |$LN9@SendIoCont|

; 327  :                     {
; 328  :                     // save off async events
; 329  :                     if (pElement->m_AsyncEvent != NULL)

  00090	e595300c	 ldr         r3, [r5, #0xC]
  00094	e3530000	 cmp         r3, #0
  00098	0a00000c	 beq         |$LN10@SendIoCont|

; 330  :                         {
; 331  :                         ::SetEventData(pElement->m_AsyncEvent, DVFS_RESET_TRANSITION);

  0009c	e1a00003	 mov         r0, r3
  000a0	e3a01000	 mov         r1, #0
  000a4	eb000000	 bl          SetEventData

; 332  :                         ::ResetEvent(pElement->m_AsyncEvent);

  000a8	e595000c	 ldr         r0, [r5, #0xC]
  000ac	e3a01002	 mov         r1, #2
  000b0	eb000000	 bl          EventModify

; 333  :                         rgEvents[nEvents] = pElement->m_AsyncEvent;

  000b4	e595200c	 ldr         r2, [r5, #0xC]
  000b8	e3e03084	 mvn         r3, #0x84
  000bc	e1a03183	 mov         r3, r3, lsl #3
  000c0	e08b3003	 add         r3, r11, r3
  000c4	e7832109	 str         r2, [r3, +r9, lsl #2]

; 334  :                         ++nEvents;

  000c8	e2899001	 add         r9, r9, #1
  000cc	e50b9430	 str         r9, [r11, #-0x430]
  000d0		 |$LN10@SendIoCont|

; 335  :                         }
; 336  : 
; 337  :                     // Send IOCTL to device
; 338  :                     rc = pElement->m_pDevice->SendIoControl(dwIoControlCode, lpInBuf, 
; 339  :                                 nInBufSize, lpOutBuf, nOutBufSize, lpBytesReturned
; 340  :                                 );

  000d0	e5950014	 ldr         r0, [r5, #0x14]
  000d4	e1a03004	 mov         r3, r4
  000d8	e51b2440	 ldr         r2, [r11, #-0x440]
  000dc	e590e000	 ldr         lr, [r0]
  000e0	e51b143c	 ldr         r1, [r11, #-0x43C]
  000e4	e59e400c	 ldr         r4, [lr, #0xC]
  000e8	e59b601c	 ldr         r6, [r11, #0x1C]
  000ec	e58d6008	 str         r6, [sp, #8]
  000f0	e59b6018	 ldr         r6, [r11, #0x18]
  000f4	e58d6004	 str         r6, [sp, #4]
  000f8	e59b6014	 ldr         r6, [r11, #0x14]
  000fc	e58d6000	 str         r6, [sp]
  00100	e1a0e00f	 mov         lr, pc
  00104	e12fff14	 bx          r4
  00108	e1b06000	 movs        r6, r0
  0010c	e50b642c	 str         r6, [r11, #-0x42C]

; 341  : 
; 342  :                     if (rc == FALSE || rc == DVFS_FAIL_TRANSITION) break;                

  00110	0a000007	 beq         |$LN26@SendIoCont|
  00114	e3760001	 cmn         r6, #1
  00118	0a000005	 beq         |$LN26@SendIoCont|
  0011c	e59b4010	 ldr         r4, [r11, #0x10]
  00120		 |$LN9@SendIoCont|

; 343  :                     }
; 344  : 
; 345  :                 // next element
; 346  :                 pElement = (DVFSElement*)pElement->Flink;

  00120	e5955000	 ldr         r5, [r5]
  00124	e50b5434	 str         r5, [r11, #-0x434]

; 347  :                 }
; 348  :                 while (pElement != m_pDVFSElementHead);

  00128	e5973024	 ldr         r3, [r7, #0x24]
  0012c	e1550003	 cmp         r5, r3
  00130	1affffd3	 bne         |$LL14@SendIoCont|
  00134		 |$LN26@SendIoCont|

; 349  :             }

  00134	e59b801c	 ldr         r8, [r11, #0x1C]
  00138	e59b4010	 ldr         r4, [r11, #0x10]
  0013c	ea00000c	 b           |$LN27@SendIoCont|
  00140		 |$LN22@SendIoCont|

; 351  :             {
; 352  :             rc = FALSE;

  00140	e3a06000	 mov         r6, #0
  00144	e50b642c	 str         r6, [r11, #-0x42C]
  00148	e59b7000	 ldr         r7, [r11]
  0014c	e50b7438	 str         r7, [r11, #-0x438]
  00150	e59b801c	 ldr         r8, [r11, #0x1C]
  00154	e59b4010	 ldr         r4, [r11, #0x10]
  00158	e59b300c	 ldr         r3, [r11, #0xC]
  0015c	e50b3440	 str         r3, [r11, #-0x440]
  00160	e59b3008	 ldr         r3, [r11, #8]
  00164	e50b343c	 str         r3, [r11, #-0x43C]
  00168	e59ba004	 ldr         r10, [r11, #4]
  0016c	e51b9430	 ldr         r9, [r11, #-0x430]
  00170	e51b5434	 ldr         r5, [r11, #-0x434]
  00174		 |$LN27@SendIoCont|

; 353  :             }
; 354  : 
; 355  :         // if successful so far wait for all async events
; 356  :         if (rc != FALSE && nEvents > 0)

  00174	e3560000	 cmp         r6, #0
  00178	0a00000b	 beq         |$LN50@SendIoCont|
  0017c	e3590000	 cmp         r9, #0
  00180	0a000009	 beq         |$LN50@SendIoCont|

; 357  :             {
; 358  :             // wait for all async objects to signal
; 359  :             rc = WaitForAcknowledgements(rgEvents, nEvents);

  00184	e1a02009	 mov         r2, r9
  00188	e3e01084	 mvn         r1, #0x84
  0018c	e1a01181	 mov         r1, r1, lsl #3
  00190	e08b1001	 add         r1, r11, r1
  00194	e1a00007	 mov         r0, r7
  00198	eb000000	 bl          |?WaitForAcknowledgements@DVFSList@@IAAHPAPAXI@Z|
  0019c	e1a06000	 mov         r6, r0
  001a0	ea000001	 b           |$LN50@SendIoCont|
  001a4		 |$LN47@SendIoCont|
  001a4	e59b801c	 ldr         r8, [r11, #0x1C]
  001a8	e59b4010	 ldr         r4, [r11, #0x10]
  001ac		 |$LN50@SendIoCont|
  001ac	e59b9018	 ldr         r9, [r11, #0x18]

; 360  :             }
; 361  :         }
; 362  : 
; 363  :     // post notifications are sent in reverse order
; 364  :     //
; 365  :     if (dwParam & (DVFS_CORE1_POST_NOTICE | DVFS_MPU1_POST_NOTICE))

  001b0	e31a0022	 tst         r10, #0x22
  001b4	0a00001b	 beq         |$LN34@SendIoCont|
  001b8		 |$LL32@SendIoCont|

; 366  :         {
; 367  :         _try 
; 368  :             { 
; 369  :             do
; 370  :                 {
; 371  :                 // next element
; 372  :                 pElement = (DVFSElement*)pElement->Blink;

  001b8	e5955004	 ldr         r5, [r5, #4]
  001bc	e50b5434	 str         r5, [r11, #-0x434]

; 373  :                 
; 374  :                 // check if a notification should be sent for this element
; 375  :                 if (pElement->m_ffDVFSNotificationType & dwParam)

  001c0	e5953010	 ldr         r3, [r5, #0x10]
  001c4	e113000a	 tst         r3, r10
  001c8	0a00000d	 beq         |$LN3@SendIoCont|

; 376  :                     {
; 377  :                     pElement->m_pDevice->SendIoControl(dwIoControlCode, lpInBuf, 
; 378  :                                 nInBufSize, lpOutBuf, nOutBufSize, lpBytesReturned
; 379  :                                 );            

  001cc	e5950014	 ldr         r0, [r5, #0x14]
  001d0	e1a03004	 mov         r3, r4
  001d4	e51b2440	 ldr         r2, [r11, #-0x440]
  001d8	e590e000	 ldr         lr, [r0]
  001dc	e51b143c	 ldr         r1, [r11, #-0x43C]
  001e0	e59e400c	 ldr         r4, [lr, #0xC]
  001e4	e58d8008	 str         r8, [sp, #8]
  001e8	e58d9004	 str         r9, [sp, #4]
  001ec	e59b7014	 ldr         r7, [r11, #0x14]
  001f0	e58d7000	 str         r7, [sp]
  001f4	e1a0e00f	 mov         lr, pc
  001f8	e12fff14	 bx          r4

; 351  :             {
; 352  :             rc = FALSE;

  001fc	e51b7438	 ldr         r7, [r11, #-0x438]
  00200	e59b4010	 ldr         r4, [r11, #0x10]

; 376  :                     {
; 377  :                     pElement->m_pDevice->SendIoControl(dwIoControlCode, lpInBuf, 
; 378  :                                 nInBufSize, lpOutBuf, nOutBufSize, lpBytesReturned
; 379  :                                 );            

  00204		 |$LN3@SendIoCont|

; 380  :                     }
; 381  :                 }
; 382  :                 while (pElement != m_pDVFSElementHead);

  00204	e5973024	 ldr         r3, [r7, #0x24]
  00208	e1550003	 cmp         r5, r3
  0020c	1affffe9	 bne         |$LL32@SendIoCont|
  00210		 |$LN33@SendIoCont|

; 383  :             }

  00210	ea000004	 b           |$LN34@SendIoCont|
  00214		 |$LN29@SendIoCont|

; 385  :             {
; 386  :             rc = FALSE;

  00214	e3a06000	 mov         r6, #0
  00218	e59b7000	 ldr         r7, [r11]
  0021c	ea000001	 b           |$LN34@SendIoCont|
  00220		 |$LN48@SendIoCont|

; 391  :     return rc;

  00220	e51b6438	 ldr         r6, [r11, #-0x438]
  00224	ea000001	 b           |$LN18@SendIoCont|
  00228		 |$LN34@SendIoCont|

; 387  :             }
; 388  :         }
; 389  :     
; 390  :     Unlock();

  00228	e2870010	 add         r0, r7, #0x10
  0022c	eb000000	 bl          LeaveCriticalSection
  00230		 |$LN18@SendIoCont|

; 392  : }

  00230	e1a00006	 mov         r0, r6
  00234	e24bd028	 sub         sp, r11, #0x28
  00238	e89d6ff0	 ldmia       sp, {r4 - r11, sp, lr}
  0023c	e12fff1e	 bx          lr

			 ENDP  ; |?SendIoControl@DVFSList@@UAAHKKPAXK0KPAK@Z|, DVFSList::SendIoControl

  00240		 |$LN28@SendIoCont|
  00240		 |$LN52@SendIoCont|

; 384  :         __except(EXCEPTION_EXECUTE_HANDLER) 

  00240	e52de004	 str         lr, [sp, #-4]!
  00244	e24dd00c	 sub         sp, sp, #0xC
  00248		 |$LN31@SendIoCont|
  00248		 |$LN56@SendIoCont|
  00248	e3a00001	 mov         r0, #1
  0024c		 |$LN30@SendIoCont|
  0024c	e28dd00c	 add         sp, sp, #0xC
  00250	e49df004	 ldr         pc, [sp], #4
  00254		 |$LN57@SendIoCont|
  00254		 |$LN21@SendIoCont|
  00254		 |$LN54@SendIoCont|

; 350  :         __except(EXCEPTION_EXECUTE_HANDLER) 

  00254	e52de004	 str         lr, [sp, #-4]!
  00258	e24dd00c	 sub         sp, sp, #0xC
  0025c		 |$LN24@SendIoCont|
  0025c		 |$LN58@SendIoCont|
  0025c	e3a00001	 mov         r0, #1
  00260		 |$LN23@SendIoCont|
  00260	e28dd00c	 add         sp, sp, #0xC
  00264	e49df004	 ldr         pc, [sp], #4
  00268		 |$LN60@SendIoCont|
  00268		 |$LN61@SendIoCont|
  00268	fffffbdc	 DCD         0xfffffbdc
  0026c		 |$LN59@SendIoCont|
  0026c		 |$LN55@SendIoCont|
	END
