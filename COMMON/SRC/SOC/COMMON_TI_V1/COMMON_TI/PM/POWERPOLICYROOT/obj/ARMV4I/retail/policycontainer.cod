; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\PM\POWERPOLICYROOT\policycontainer.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"/include:?_factory@?$$singleton@V?$$free_list@$$0GE@Vall"
	DCB	"ocator@ce@@@ce@@$$03V?$$static_allocator@V?$$free_list@$$"
	DCB	"0GE@Vallocator@ce@@@ce@@$$03@2@@ce@@1Ulock_factory@12@A "
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??0PolicyAdapter@@QAA@XZ|		; PolicyAdapter::PolicyAdapter
	IMPORT	|memset|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\powerpolicyroot\policyadapter.h

  00000			 AREA	 |.pdata|, PDATA
|$T36380| DCD	|$LN5@PolicyAdap|
	DCD	0x40001501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0PolicyAdapter@@QAA@XZ| PROC	; PolicyAdapter::PolicyAdapter

; 87   :     {

  00000		 |$LN5@PolicyAdap|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36377|
  00004	e1a05000	 mov         r5, r0

; 88   :         *m_szDll = NULL;
; 89   :         *m_szRegKey = NULL;
; 90   :         *m_szPolicyName = NULL;
; 91   :         memset(&m_fns, 0, sizeof(PolicyAdapterFns));

  00008	e2853c06	 add         r3, r5, #6, 24
  0000c	e2830024	 add         r0, r3, #0x24
  00010	e3a03000	 mov         r3, #0
  00014	e285ec02	 add         lr, r5, #2, 24
  00018	e2854b01	 add         r4, r5, #1, 22
  0001c	e3a02024	 mov         r2, #0x24
  00020	e3a01000	 mov         r1, #0
  00024	e5853000	 str         r3, [r5]
  00028	e5853004	 str         r3, [r5, #4]
  0002c	e5853210	 str         r3, [r5, #0x210]
  00030	e5853648	 str         r3, [r5, #0x648]
  00034	e585364c	 str         r3, [r5, #0x64C]
  00038	e1c530b8	 strh        r3, [r5, #8]
  0003c	e1ce31b4	 strh        r3, [lr, #0x14]
  00040	e1c431bc	 strh        r3, [r4, #0x1C]
  00044	eb000000	 bl          memset

; 92   :     }

  00048	e1a00005	 mov         r0, r5
  0004c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M36378|

			 ENDP  ; |??0PolicyAdapter@@QAA@XZ|, PolicyAdapter::PolicyAdapter

	EXPORT	|?GetLoadOrder@PolicyAdapter@@QAAKXZ|	; PolicyAdapter::GetLoadOrder

  00000			 AREA	 |.pdata|, PDATA
|$T36390| DCD	|$LN5@GetLoadOrd|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetLoadOrder@PolicyAdapter@@QAAKXZ| PROC ; PolicyAdapter::GetLoadOrder

; 102  :     {

  00000		 |$LN5@GetLoadOrd|
  00000		 |$M36387|

; 103  :         return m_dwOrder;

  00000	e5900004	 ldr         r0, [r0, #4]

; 104  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M36388|

			 ENDP  ; |?GetLoadOrder@PolicyAdapter@@QAAKXZ|, PolicyAdapter::GetLoadOrder

	EXPORT	|?IsAdapterId@PolicyAdapter@@QAAHPBG@Z|	; PolicyAdapter::IsAdapterId
	IMPORT	|_wcsicmp|
	IMPORT	|wcslen|

  00000			 AREA	 |.pdata|, PDATA
|$T36404| DCD	|$LN9@IsAdapterI|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsAdapterId@PolicyAdapter@@QAAHPBG@Z| PROC ; PolicyAdapter::IsAdapterId

; 110  :     {

  00000		 |$LN9@IsAdapterI|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36401|
  00004	e1b04001	 movs        r4, r1
  00008	e1a05000	 mov         r5, r0

; 111  :         if (szId == NULL || _tcslen(szId) >= MAX_PATH) return FALSE;

  0000c	0a00000b	 beq         |$LN1@IsAdapterI|
  00010	e1a00004	 mov         r0, r4
  00014	eb000000	 bl          wcslen
  00018	e3500f41	 cmp         r0, #0x41, 30
  0001c	2a000007	 bcs         |$LN1@IsAdapterI|

; 112  :         return _tcsicmp(m_szPolicyName, szId) == 0;

  00020	e2853b01	 add         r3, r5, #1, 22
  00024	e283001c	 add         r0, r3, #0x1C
  00028	e1a01004	 mov         r1, r4
  0002c	eb000000	 bl          _wcsicmp
  00030	e3500000	 cmp         r0, #0
  00034	03a00001	 moveq       r0, #1

; 113  :     }

  00038	08bd4030	 ldmeqia     sp!, {r4, r5, lr}
  0003c	012fff1e	 bxeq        lr
  00040		 |$LN1@IsAdapterI|

; 111  :         if (szId == NULL || _tcslen(szId) >= MAX_PATH) return FALSE;

  00040	e3a00000	 mov         r0, #0

; 113  :     }

  00044	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$M36402|

			 ENDP  ; |?IsAdapterId@PolicyAdapter@@QAAHPBG@Z|, PolicyAdapter::IsAdapterId

	EXPORT	|??2@YAPAXIPAX@Z|			; operator new
; File c:\wince600\public\common\sdk\inc\new

  00000			 AREA	 |.pdata|, PDATA
|$T36414| DCD	|$LN5@operator|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??2@YAPAXIPAX@Z| PROC			; operator new

; 73   :     {return (_P); }

  00000		 |$LN5@operator|
  00000		 |$M36411|
  00000	e1a00001	 mov         r0, r1
  00004	e12fff1e	 bx          lr
  00008		 |$M36412|

			 ENDP  ; |??2@YAPAXIPAX@Z|, operator new

	EXPORT	|??0critical_section@ce@@QAA@XZ|	; ce::critical_section::critical_section
	IMPORT	|InitializeCriticalSection|
; File c:\wince600\public\common\oak\inc\sync.hxx

  00000			 AREA	 |.pdata|, PDATA
|$T36424| DCD	|$LN5@critical_s|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0critical_section@ce@@QAA@XZ| PROC	; ce::critical_section::critical_section

; 125  :     critical_section()

  00000		 |$LN5@critical_s|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36421|
  00004	e1a04000	 mov         r4, r0
  00008	eb000000	 bl          InitializeCriticalSection
  0000c	e1a00004	 mov         r0, r4
  00010	e8bd4010	 ldmia       sp!, {r4, lr}
  00014	e12fff1e	 bx          lr
  00018		 |$M36422|

			 ENDP  ; |??0critical_section@ce@@QAA@XZ|, ce::critical_section::critical_section

	EXPORT	|??1critical_section@ce@@QAA@XZ|	; ce::critical_section::~critical_section
	IMPORT	|DeleteCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T36432| DCD	|$LN5@critical_s@2|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1critical_section@ce@@QAA@XZ| PROC	; ce::critical_section::~critical_section

; 129  :         {DeleteCriticalSection(this); }

  00000		 |$LN5@critical_s@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36429|
  00004	eb000000	 bl          DeleteCriticalSection
  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M36430|

			 ENDP  ; |??1critical_section@ce@@QAA@XZ|, ce::critical_section::~critical_section

	EXPORT	|?allocate@allocator@ce@@QBAPAXI@Z|	; ce::allocator::allocate
	IMPORT	|??2@YAPAXI@Z|				; operator new
; File c:\wince600\public\common\oak\inc\allocator.hxx

  00000			 AREA	 |.pdata|, PDATA
|$T36442| DCD	|$LN5@allocate|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?allocate@allocator@ce@@QBAPAXI@Z| PROC ; ce::allocator::allocate

; 106  :         {return operator new(Size); }

  00000		 |$LN5@allocate|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36439|
  00004	e1a00001	 mov         r0, r1
  00008	eb000000	 bl          |??2@YAPAXI@Z|
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M36440|

			 ENDP  ; |?allocate@allocator@ce@@QBAPAXI@Z|, ce::allocator::allocate

	EXPORT	|?deallocate@allocator@ce@@QBAXPAXI@Z|	; ce::allocator::deallocate
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T36450| DCD	|$LN5@deallocate|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?deallocate@allocator@ce@@QBAXPAXI@Z| PROC ; ce::allocator::deallocate

; 109  :         {operator delete(Ptr); }

  00000		 |$LN5@deallocate|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36447|
  00004	e1a00001	 mov         r0, r1
  00008	eb000000	 bl          |??3@YAXPAX@Z|
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M36448|

			 ENDP  ; |?deallocate@allocator@ce@@QBAXPAXI@Z|, ce::allocator::deallocate

	EXPORT	|?size@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBAIXZ| ; ce::list<PolicyAdapter *,ce::allocator>::size
; File c:\wince600\public\common\oak\inc\list.hxx

  00000			 AREA	 |.pdata|, PDATA
|$T36460| DCD	|$LN5@size|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?size@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBAIXZ| PROC ; ce::list<PolicyAdapter *,ce::allocator>::size

; 257  :         {return _Size; }

  00000		 |$LN5@size|
  00000		 |$M36457|
  00000	e590000c	 ldr         r0, [r0, #0xC]
  00004	e12fff1e	 bx          lr
  00008		 |$M36458|

			 ENDP  ; |?size@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBAIXZ|, ce::list<PolicyAdapter *,ce::allocator>::size

	EXPORT	|?empty@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBA_NXZ| ; ce::list<PolicyAdapter *,ce::allocator>::empty

  00000			 AREA	 |.pdata|, PDATA
|$T36472| DCD	|$LN7@empty|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?empty@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBA_NXZ| PROC ; ce::list<PolicyAdapter *,ce::allocator>::empty

; 261  :         {return _Size == 0; }

  00000		 |$LN7@empty|
  00000		 |$M36469|
  00000	e590300c	 ldr         r3, [r0, #0xC]
  00004	e3530000	 cmp         r3, #0
  00008	03a03001	 moveq       r3, #1
  0000c	020300ff	 andeq       r0, r3, #0xFF
  00010	13a03000	 movne       r3, #0
  00014	120300ff	 andne       r0, r3, #0xFF
  00018	e12fff1e	 bx          lr
  0001c		 |$M36470|

			 ENDP  ; |?empty@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBA_NXZ|, ce::list<PolicyAdapter *,ce::allocator>::empty

	EXPORT	|??Diterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBAAAPAVPolicyAdapter@@XZ| ; ce::list<PolicyAdapter *,ce::allocator>::iterator::operator*

  00000			 AREA	 |.pdata|, PDATA
|$T36482| DCD	|$LN5@operator@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??Diterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBAAAPAVPolicyAdapter@@XZ| PROC ; ce::list<PolicyAdapter *,ce::allocator>::iterator::operator*

; 526  :             {return _Ptr->_Value; }

  00000		 |$LN5@operator@2|
  00000		 |$M36479|
  00000	e5900000	 ldr         r0, [r0]
  00004	e12fff1e	 bx          lr
  00008		 |$M36480|

			 ENDP  ; |??Diterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBAAAPAVPolicyAdapter@@XZ|, ce::list<PolicyAdapter *,ce::allocator>::iterator::operator*

	EXPORT	|??Eiterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAAAAV012@XZ| ; ce::list<PolicyAdapter *,ce::allocator>::iterator::operator++

  00000			 AREA	 |.pdata|, PDATA
|$T36492| DCD	|$LN5@operator@3|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??Eiterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAAAAV012@XZ| PROC ; ce::list<PolicyAdapter *,ce::allocator>::iterator::operator++

; 530  :             {_Ptr = _Ptr->_Next;

  00000		 |$LN5@operator@3|
  00000		 |$M36489|
  00000	e1a02000	 mov         r2, r0
  00004	e5923000	 ldr         r3, [r2]

; 531  :             return (*this); }

  00008	e5933004	 ldr         r3, [r3, #4]
  0000c	e5823000	 str         r3, [r2]
  00010	e12fff1e	 bx          lr
  00014		 |$M36490|

			 ENDP  ; |??Eiterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAAAAV012@XZ|, ce::list<PolicyAdapter *,ce::allocator>::iterator::operator++

	EXPORT	|??Eiterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AV012@H@Z| ; ce::list<PolicyAdapter *,ce::allocator>::iterator::operator++

  00000			 AREA	 |.pdata|, PDATA
|$T36506| DCD	|$LN7@operator@4|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??Eiterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AV012@H@Z| PROC ; ce::list<PolicyAdapter *,ce::allocator>::iterator::operator++

; 533  :             {iterator Tmp = *this;

  00000		 |$LN7@operator@4|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36503|
  00004	e1a0e000	 mov         lr, r0
  00008	e59e2000	 ldr         r2, [lr]

; 534  :             ++*this;
; 535  :             return (Tmp); }

  0000c	e1a00001	 mov         r0, r1
  00010	e5923004	 ldr         r3, [r2, #4]
  00014	e5812000	 str         r2, [r1]
  00018	e58e3000	 str         r3, [lr]
  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M36504|

			 ENDP  ; |??Eiterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AV012@H@Z|, ce::list<PolicyAdapter *,ce::allocator>::iterator::operator++

	EXPORT	|?_Freenode@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@IAAXPAU_Node@12@@Z| ; ce::list<PolicyAdapter *,ce::allocator>::_Freenode
; File c:\wince600\public\common\oak\inc\allocator.hxx

  00000			 AREA	 |.pdata|, PDATA
|$T36517| DCD	|$LN7@Freenode|
	DCD	0x40000501
; Function compile flags: /Ogspy
; File c:\wince600\public\common\oak\inc\list.hxx

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Freenode@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@IAAXPAU_Node@12@@Z| PROC ; ce::list<PolicyAdapter *,ce::allocator>::_Freenode

; 574  :         {deallocate(Node, sizeof(_Node)); }

  00000		 |$LN7@Freenode|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36514|
  00004	e1a00001	 mov         r0, r1
  00008	eb000000	 bl          |??3@YAXPAX@Z|
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M36515|

			 ENDP  ; |?_Freenode@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@IAAXPAU_Node@12@@Z|, ce::list<PolicyAdapter *,ce::allocator>::_Freenode

	EXPORT	|??8iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBA_NABV012@@Z| ; ce::list<PolicyAdapter *,ce::allocator>::iterator::operator==

  00000			 AREA	 |.pdata|, PDATA
|$T36530| DCD	|$LN7@operator@5|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??8iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBA_NABV012@@Z| PROC ; ce::list<PolicyAdapter *,ce::allocator>::iterator::operator==

; 544  :             {return (_Ptr == it._Ptr); }

  00000		 |$LN7@operator@5|
  00000		 |$M36527|
  00000	e5902000	 ldr         r2, [r0]
  00004	e5913000	 ldr         r3, [r1]
  00008	e1520003	 cmp         r2, r3
  0000c	03a03001	 moveq       r3, #1
  00010	020300ff	 andeq       r0, r3, #0xFF
  00014	13a03000	 movne       r3, #0
  00018	120300ff	 andne       r0, r3, #0xFF
  0001c	e12fff1e	 bx          lr
  00020		 |$M36528|

			 ENDP  ; |??8iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBA_NABV012@@Z|, ce::list<PolicyAdapter *,ce::allocator>::iterator::operator==

	EXPORT	|??0const_iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA@XZ| ; ce::list<PolicyAdapter *,ce::allocator>::const_iterator::const_iterator

  00000			 AREA	 |.pdata|, PDATA
|$T36540| DCD	|$LN5@const_iter|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0const_iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA@XZ| PROC ; ce::list<PolicyAdapter *,ce::allocator>::const_iterator::const_iterator

; 482  :         const_iterator()

  00000		 |$LN5@const_iter|
  00000		 |$M36537|
  00000	e12fff1e	 bx          lr
  00004		 |$M36538|

			 ENDP  ; |??0const_iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA@XZ|, ce::list<PolicyAdapter *,ce::allocator>::const_iterator::const_iterator

	EXPORT	|?_MyNode@const_iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBAPAU_Node@23@XZ| ; ce::list<PolicyAdapter *,ce::allocator>::const_iterator::_MyNode

  00000			 AREA	 |.pdata|, PDATA
|$T36550| DCD	|$LN5@MyNode|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_MyNode@const_iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBAPAU_Node@23@XZ| PROC ; ce::list<PolicyAdapter *,ce::allocator>::const_iterator::_MyNode

; 511  :             {return (_Ptr); }

  00000		 |$LN5@MyNode|
  00000		 |$M36547|
  00000	e5900000	 ldr         r0, [r0]
  00004	e12fff1e	 bx          lr
  00008		 |$M36548|

			 ENDP  ; |?_MyNode@const_iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBAPAU_Node@23@XZ|, ce::list<PolicyAdapter *,ce::allocator>::const_iterator::_MyNode

	EXPORT	|??0const_iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA@PAU_Node@12@@Z| ; ce::list<PolicyAdapter *,ce::allocator>::const_iterator::const_iterator

  00000			 AREA	 |.pdata|, PDATA
|$T36561| DCD	|$LN5@const_iter@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0const_iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA@PAU_Node@12@@Z| PROC ; ce::list<PolicyAdapter *,ce::allocator>::const_iterator::const_iterator

; 484  :         const_iterator(_NodePtr _P)

  00000		 |$LN5@const_iter@2|
  00000		 |$M36558|
  00000	e5801000	 str         r1, [r0]
  00004	e12fff1e	 bx          lr
  00008		 |$M36559|

			 ENDP  ; |??0const_iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA@PAU_Node@12@@Z|, ce::list<PolicyAdapter *,ce::allocator>::const_iterator::const_iterator

	EXPORT	|?_Buynode@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@IAAPAU_Node@12@PAU312@@Z| ; ce::list<PolicyAdapter *,ce::allocator>::_Buynode
; File c:\wince600\public\common\oak\inc\allocator.hxx

  00000			 AREA	 |.pdata|, PDATA
|$T36576| DCD	|$LN9@Buynode|
	DCD	0x40001501
; Function compile flags: /Ogspy
; File c:\wince600\public\common\oak\inc\list.hxx

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Buynode@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@IAAPAU_Node@12@PAU312@@Z| PROC ; ce::list<PolicyAdapter *,ce::allocator>::_Buynode

; 551  :     {

  00000		 |$LN9@Buynode|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36573|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0

; 552  :         assert(WhereNode);
; 553  :         __assume(WhereNode);
; 554  :         assert(WhereNode->_Prev);
; 555  :         __assume(WhereNode->_Prev);
; 556  :         
; 557  :         if(_NodePtr NewNode = (_NodePtr)allocate(sizeof(_Node)))

  0000c	e3a0000c	 mov         r0, #0xC
  00010	eb000000	 bl          |??2@YAPAXI@Z|
  00014	e3500000	 cmp         r0, #0
  00018	0a00000a	 beq         |$LN2@Buynode|

; 558  :         {
; 559  :             NewNode->_Next = WhereNode;

  0001c	e5804004	 str         r4, [r0, #4]

; 560  :             NewNode->_Prev = WhereNode->_Prev;

  00020	e5943008	 ldr         r3, [r4, #8]

; 561  :             
; 562  :             WhereNode->_Prev->_Next = NewNode;
; 563  :             WhereNode->_Prev = NewNode;
; 564  :             
; 565  :             ++_Size;
; 566  :             
; 567  :             return NewNode;

  00024	e5803008	 str         r3, [r0, #8]
  00028	e5943008	 ldr         r3, [r4, #8]
  0002c	e5830004	 str         r0, [r3, #4]
  00030	e5840008	 str         r0, [r4, #8]
  00034	e595300c	 ldr         r3, [r5, #0xC]
  00038	e2833001	 add         r3, r3, #1
  0003c	e585300c	 str         r3, [r5, #0xC]

; 571  :     }

  00040	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN2@Buynode|

; 568  :         }
; 569  :         else
; 570  :             return NULL;

  00048	e3a00000	 mov         r0, #0

; 571  :     }

  0004c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M36574|

			 ENDP  ; |?_Buynode@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@IAAPAU_Node@12@PAU312@@Z|, ce::list<PolicyAdapter *,ce::allocator>::_Buynode

	EXPORT	|?erase@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AViterator@12@V312@@Z| ; ce::list<PolicyAdapter *,ce::allocator>::erase
; File c:\wince600\public\common\oak\inc\allocator.hxx

  00000			 AREA	 |.pdata|, PDATA
|$T36613| DCD	|$LN15@erase|
	DCD	0x40001503
; Function compile flags: /Ogspy
; File c:\wince600\public\common\oak\inc\list.hxx

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?erase@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AViterator@12@V312@@Z| PROC ; ce::list<PolicyAdapter *,ce::allocator>::erase

; 359  :     {

  00000		 |$LN15@erase|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5070	 stmdb       sp!, {r4 - r6, r12, lr}
  0000c		 |$M36610|
  0000c	e1a05001	 mov         r5, r1
  00010	e1a06000	 mov         r6, r0

; 360  :         assert(Where != end());
; 361  :         
; 362  :         _NodePtr WhereNode = (Where++)._MyNode();
; 363  : 
; 364  :         assert(WhereNode);
; 365  :         __assume(WhereNode);
; 366  :         assert(WhereNode->_Prev);
; 367  :         __assume(WhereNode->_Prev);
; 368  :         assert(WhereNode->_Next);
; 369  :         __assume(WhereNode->_Next);
; 370  :         
; 371  :         WhereNode->_Prev->_Next = WhereNode->_Next;

  00014	e592e008	 ldr         lr, [r2, #8]
  00018	e5923004	 ldr         r3, [r2, #4]

; 372  :         WhereNode->_Next->_Prev = WhereNode->_Prev;
; 373  :         
; 374  :         WhereNode->_Value.~T();
; 375  :         _Freenode(WhereNode);

  0001c	e1a00002	 mov         r0, r2
  00020	e1a04003	 mov         r4, r3
  00024	e58e3004	 str         r3, [lr, #4]
  00028	e592e004	 ldr         lr, [r2, #4]
  0002c	e5923008	 ldr         r3, [r2, #8]
  00030	e58e3008	 str         r3, [lr, #8]
  00034	eb000000	 bl          |??3@YAXPAX@Z|

; 376  :         
; 377  :         --_Size;

  00038	e596300c	 ldr         r3, [r6, #0xC]

; 378  :         
; 379  :         return Where;

  0003c	e5854000	 str         r4, [r5]

; 380  :     }

  00040	e1a00005	 mov         r0, r5
  00044	e2433001	 sub         r3, r3, #1
  00048	e586300c	 str         r3, [r6, #0xC]
  0004c	e89d6070	 ldmia       sp, {r4 - r6, sp, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M36611|

			 ENDP  ; |?erase@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AViterator@12@V312@@Z|, ce::list<PolicyAdapter *,ce::allocator>::erase

	EXPORT	|??0iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA@XZ| ; ce::list<PolicyAdapter *,ce::allocator>::iterator::iterator

  00000			 AREA	 |.pdata|, PDATA
|$T36626| DCD	|$LN7@iterator|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA@XZ| PROC ; ce::list<PolicyAdapter *,ce::allocator>::iterator::iterator

; 521  :         iterator()

  00000		 |$LN7@iterator|
  00000		 |$M36623|
  00000	e12fff1e	 bx          lr
  00004		 |$M36624|

			 ENDP  ; |??0iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA@XZ|, ce::list<PolicyAdapter *,ce::allocator>::iterator::iterator

	EXPORT	|??9iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBA_NABV012@@Z| ; ce::list<PolicyAdapter *,ce::allocator>::iterator::operator!=

  00000			 AREA	 |.pdata|, PDATA
|$T36646| DCD	|$LN11@operator@6|
	DCD	0x40000b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??9iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBA_NABV012@@Z| PROC ; ce::list<PolicyAdapter *,ce::allocator>::iterator::operator!=

; 546  :             {return (!(*this == it)); }

  00000		 |$LN11@operator@6|
  00000		 |$M36643|
  00000	e5902000	 ldr         r2, [r0]
  00004	e5913000	 ldr         r3, [r1]
  00008	e1520003	 cmp         r2, r3
  0000c	03a03001	 moveq       r3, #1
  00010	13a03000	 movne       r3, #0
  00014	e21330ff	 ands        r3, r3, #0xFF
  00018	03a03001	 moveq       r3, #1
  0001c	020300ff	 andeq       r0, r3, #0xFF
  00020	13a03000	 movne       r3, #0
  00024	120300ff	 andne       r0, r3, #0xFF
  00028	e12fff1e	 bx          lr
  0002c		 |$M36644|

			 ENDP  ; |??9iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QBA_NABV012@@Z|, ce::list<PolicyAdapter *,ce::allocator>::iterator::operator!=

	EXPORT	|??0iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA@PAU_Node@12@@Z| ; ce::list<PolicyAdapter *,ce::allocator>::iterator::iterator

  00000			 AREA	 |.pdata|, PDATA
|$T36660| DCD	|$LN7@iterator@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA@PAU_Node@12@@Z| PROC ; ce::list<PolicyAdapter *,ce::allocator>::iterator::iterator

; 523  :         iterator(_NodePtr _P)

  00000		 |$LN7@iterator@2|
  00000		 |$M36657|
  00000	e5801000	 str         r1, [r0]
  00004	e12fff1e	 bx          lr
  00008		 |$M36658|

			 ENDP  ; |??0iterator@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA@PAU_Node@12@@Z|, ce::list<PolicyAdapter *,ce::allocator>::iterator::iterator

	EXPORT	|??__Fcs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ@YAXXZ| ; `ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock'::`2'::`dynamic atexit destructor for 'cs''
	EXPORT	|??_B?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ@51| [ DATA ] ; `ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock'::`2'::`local static guard'
	EXPORT	|?get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ| ; ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock
	EXPORT	|?cs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@3@XZ@4V43@A| [ DATA ] ; `ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock'::`2'::cs
	IMPORT	|atexit|
; File c:\wince600\public\common\oak\inc\sync.hxx

  00000			 AREA	 |.bss|, NOINIT
|??_B?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ@51| % 0x4 ; `ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock'::`2'::`local static guard'

  00000			 AREA	 |.bss|, NOINIT
|?cs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@3@XZ@4V43@A| % 0x14 ; `ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock'::`2'::cs

  00000			 AREA	 |.pdata|, PDATA
|$T36672| DCD	|$LN8@get_lock|
	DCD	0x40001602
; Function compile flags: /Ogspy
; File c:\wince600\public\common\oak\inc\singleton.hxx

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ| PROC ; ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock

; 320  :     {

  00000		 |$LN8@get_lock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36669|

; 321  :         static critical_section cs;

  00008	e59f2044	 ldr         r2, [pc, #0x44]
  0000c	e5923000	 ldr         r3, [r2]
  00010	e3130001	 tst         r3, #1
  00014	1a000005	 bne         |$LN1@get_lock|
  00018	e59f0028	 ldr         r0, [pc, #0x28]
  0001c	e3833001	 orr         r3, r3, #1
  00020	e5823000	 str         r3, [r2]
  00024	eb000000	 bl          InitializeCriticalSection
  00028	e59f0020	 ldr         r0, [pc, #0x20]
  0002c	eb000000	 bl          atexit
  00030		 |$LN1@get_lock|

; 322  :         
; 323  :         //
; 324  :         // This statement forces compiler to instantiate _factory member
; 325  :         // thus assuring that lock_factory ctor is called. 
; 326  :         //
; 327  :         lock_factory* volatile p = &_factory;

  00030	e59f3014	 ldr         r3, [pc, #0x14]

; 328  : 
; 329  :         return cs;
; 330  :     }

  00034	e59f000c	 ldr         r0, [pc, #0xC]
  00038	e58d3000	 str         r3, [sp]
  0003c	e28dd004	 add         sp, sp, #4
  00040	e49de004	 ldr         lr, [sp], #4
  00044	e12fff1e	 bx          lr
  00048		 |$LN9@get_lock|
  00048		 |$LN10@get_lock|
  00048	00000000	 DCD         |?cs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@3@XZ@4V43@A|
  0004c		 |$LN11@get_lock|
  0004c	00000000	 DCD         |?_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@1Ulock_factory@12@A|
  00050		 |$LN12@get_lock|
  00050	00000000	 DCD         |??__Fcs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ@YAXXZ|
  00054		 |$LN13@get_lock|
  00054	00000000	 DCD         |??_B?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ@51|
  00058		 |$M36670|

			 ENDP  ; |?get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ|, ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock

	EXPORT	|??0lock_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@QAA@XZ| ; ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::lock_factory::lock_factory

  00000			 AREA	 |.pdata|, PDATA
|$T36687| DCD	|$LN5@lock_facto|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0lock_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@QAA@XZ| PROC ; ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::lock_factory::lock_factory

; 339  :         lock_factory()

  00000		 |$LN5@lock_facto|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36684|
  00004	e1a04000	 mov         r4, r0
  00008	eb000000	 bl          |?get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ|

; 340  :             {get_lock(); }

  0000c	e1a00004	 mov         r0, r4
  00010	e8bd4010	 ldmia       sp!, {r4, lr}
  00014	e12fff1e	 bx          lr
  00018		 |$M36685|

			 ENDP  ; |??0lock_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@QAA@XZ|, ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::lock_factory::lock_factory

	EXPORT	|?begin@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AViterator@12@XZ| ; ce::list<PolicyAdapter *,ce::allocator>::begin
; File c:\wince600\public\common\oak\inc\list.hxx

  00000			 AREA	 |.pdata|, PDATA
|$T36707| DCD	|$LN9@begin|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?begin@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AViterator@12@XZ| PROC ; ce::list<PolicyAdapter *,ce::allocator>::begin

; 229  :         {return (iterator(_Head->_Next)); }

  00000		 |$LN9@begin|
  00000		 |$M36704|
  00000	e5903000	 ldr         r3, [r0]
  00004	e1a00001	 mov         r0, r1
  00008	e5933004	 ldr         r3, [r3, #4]
  0000c	e5813000	 str         r3, [r1]
  00010	e12fff1e	 bx          lr
  00014		 |$M36705|

			 ENDP  ; |?begin@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AViterator@12@XZ|, ce::list<PolicyAdapter *,ce::allocator>::begin

	EXPORT	|?end@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AViterator@12@XZ| ; ce::list<PolicyAdapter *,ce::allocator>::end

  00000			 AREA	 |.pdata|, PDATA
|$T36727| DCD	|$LN9@end|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?end@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AViterator@12@XZ| PROC ; ce::list<PolicyAdapter *,ce::allocator>::end

; 236  :         {return (iterator(_Head)); }

  00000		 |$LN9@end|
  00000		 |$M36724|
  00000	e5903000	 ldr         r3, [r0]
  00004	e1a00001	 mov         r0, r1
  00008	e5813000	 str         r3, [r1]
  0000c	e12fff1e	 bx          lr
  00010		 |$M36725|

			 ENDP  ; |?end@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AViterator@12@XZ|, ce::list<PolicyAdapter *,ce::allocator>::end

	EXPORT	|??$insert@PAVPolicyAdapter@@@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AViterator@01@V201@ABQAVPolicyAdapter@@@Z| ; ce::list<PolicyAdapter *,ce::allocator>::insert<PolicyAdapter *>

  00000			 AREA	 |.pdata|, PDATA
|$T36774| DCD	|$LN22@insert|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??$insert@PAVPolicyAdapter@@@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AViterator@01@V201@ABQAVPolicyAdapter@@@Z| PROC ; ce::list<PolicyAdapter *,ce::allocator>::insert<PolicyAdapter *>

; 269  :     iterator insert(iterator Where, const _Val& Value)

  00000		 |$LN22@insert|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M36771|
  00004	e1a06003	 mov         r6, r3
  00008	e1a04001	 mov         r4, r1
  0000c	e1a05000	 mov         r5, r0

; 270  :     {
; 271  :         _NodePtr NewNode = _Buynode(Where._MyNode());

  00010	e1a01002	 mov         r1, r2
  00014	eb000000	 bl          |?_Buynode@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@IAAPAU_Node@12@PAU312@@Z|
  00018	e3500000	 cmp         r0, #0

; 272  :         
; 273  :         if(NewNode == NULL)
; 274  :             return end();

  0001c	05953000	 ldreq       r3, [r5]
  00020	05843000	 streq       r3, [r4]

; 275  : 
; 276  :         // To avoid using operator& for type T (which may be overloaded)
; 277  :         // we are constructing item in the memory pointed to by NewNode.
; 278  :         // This assumes that _Value is the first member.
; 279  :         new (NewNode) T(Value);

  00024	15963000	 ldrne       r3, [r6]

; 280  :         
; 281  :         return NewNode;

  00028	15840000	 strne       r0, [r4]
  0002c	15803000	 strne       r3, [r0]

; 282  :     }

  00030	e1a00004	 mov         r0, r4
  00034	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M36772|

			 ENDP  ; |??$insert@PAVPolicyAdapter@@@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AViterator@01@V201@ABQAVPolicyAdapter@@@Z|, ce::list<PolicyAdapter *,ce::allocator>::insert<PolicyAdapter *>

	EXPORT	|?Uninitialize@PolicyContainer@@QAAXXZ|	; PolicyContainer::Uninitialize
	IMPORT	|?Uninitialize@PolicyAdapter@@QAAXXZ|	; PolicyAdapter::Uninitialize

  00000			 AREA	 |.pdata|, PDATA
|$T36835| DCD	|$LN28@Uninitiali|
	DCD	0x40001301
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\powerpolicyroot\policycontainer.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Uninitialize@PolicyContainer@@QAAXXZ| PROC ; PolicyContainer::Uninitialize

; 29   : {

  00000		 |$LN28@Uninitiali|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36832|
  00004	e1a04000	 mov         r4, r0
  00008		 |$LL2@Uninitiali|

; 30   :     // Look for device by walking through list
; 31   :     while (empty() == FALSE)

  00008	e594300c	 ldr         r3, [r4, #0xC]
  0000c	e3530000	 cmp         r3, #0
  00010	03a03001	 moveq       r3, #1
  00014	13a03000	 movne       r3, #0
  00018	e21330ff	 ands        r3, r3, #0xFF

; 32   :         {
; 33   :         (*begin())->Uninitialize();
; 34   :         delete (*begin());
; 35   :         }

  0001c	1a000008	 bne         |$LN1@Uninitiali|
  00020	e5943000	 ldr         r3, [r4]
  00024	e5933004	 ldr         r3, [r3, #4]
  00028	e5930000	 ldr         r0, [r3]
  0002c	eb000000	 bl          |?Uninitialize@PolicyAdapter@@QAAXXZ|
  00030	e5943000	 ldr         r3, [r4]
  00034	e5933004	 ldr         r3, [r3, #4]
  00038	e5930000	 ldr         r0, [r3]
  0003c	eb000000	 bl          |??3@YAXPAX@Z|
  00040	eafffff0	 b           |$LL2@Uninitiali|
  00044		 |$LN1@Uninitiali|

; 36   : }

  00044	e8bd4010	 ldmia       sp!, {r4, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$M36833|

			 ENDP  ; |?Uninitialize@PolicyContainer@@QAAXXZ|, PolicyContainer::Uninitialize

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?Initialize@PolicyContainer@@QAAHPBG@Z| ; PolicyContainer::Initialize
	EXPORT	|??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|RegCloseKey|
	IMPORT	|?Initialize@PolicyAdapter@@QAAHPBG@Z|	; PolicyAdapter::Initialize
	IMPORT	|RegEnumKeyExW|
	IMPORT	|RegQueryInfoKeyW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|wcscpy|
	IMPORT	|memcpy|
	IMPORT	|__security_check_cookie|
; File c:\wince600\public\common\oak\inc\list.hxx

  00000			 AREA	 |.pdata|, PDATA
|$T37009| DCD	|$LN77@Initialize|
	DCD	0xc0008b03

  00000			 AREA	 |.xdata|, DATA
|$T37005| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@| DCB "\\", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\powerpolicyroot\policycontainer.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T37005|

  00008		 |?Initialize@PolicyContainer@@QAAHPBG@Z| PROC ; PolicyContainer::Initialize

; 47   : {

  00008		 |$LN77@Initialize|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e59fc21c	 ldr         r12, [pc, #0x21C]
  00010	e08dd00c	 add         sp, sp, r12
  00014		 |$M37006|
  00014	e1a06001	 mov         r6, r1
  00018	e1a07000	 mov         r7, r0
  0001c	e59f3208	 ldr         r3, [pc, #0x208]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d3644	 str         r3, [sp, #0x644]

; 48   :     BOOL rc = FALSE;
; 49   :     HKEY hKey = NULL;

  00028	e3a04000	 mov         r4, #0

; 50   :     LONG code;
; 51   :     DWORD size;
; 52   :     DWORD subKeys;    
; 53   :     int nRootKeyLen;
; 54   :     iterator iAdapter;
; 55   :     PolicyAdapter *pAdapter;
; 56   :     _TCHAR szBuffer[MAX_PATH];
; 57   :     _TCHAR szSubKeyBuffer[MAX_PATH * 2];
; 58   : 
; 59   : 
; 60   :     // Open template registry key
; 61   :     code = RegOpenKeyEx(HKEY_LOCAL_MACHINE, szContext, 0, 0, &hKey);

  0002c	e28de020	 add         lr, sp, #0x20
  00030	e3a03000	 mov         r3, #0
  00034	e3a02000	 mov         r2, #0
  00038	e3a0010a	 mov         r0, #0xA, 2
  0003c	e58d4020	 str         r4, [sp, #0x20]
  00040	e58de000	 str         lr, [sp]
  00044	e3a05000	 mov         r5, #0
  00048	eb000000	 bl          RegOpenKeyExW
  0004c	e3500000	 cmp         r0, #0

; 62   :     if (code != ERROR_SUCCESS)

  00050	1a000069	 bne         |$cleanUp$35597|

; 63   :         {
; 64   :         goto cleanUp;
; 65   :         }
; 66   : 
; 67   :     // copy text into buffer
; 68   :     nRootKeyLen = _tcslen(szContext);

  00054	e1a00006	 mov         r0, r6
  00058	eb000000	 bl          wcslen
  0005c	e1a04000	 mov         r4, r0

; 69   :     memcpy(szSubKeyBuffer, szContext, nRootKeyLen * sizeof(_TCHAR));

  00060	e1a02084	 mov         r2, r4, lsl #1
  00064	e1a01006	 mov         r1, r6
  00068	e28d0f8d	 add         r0, sp, #0x8D, 30
  0006c	eb000000	 bl          memcpy

; 70   : 
; 71   :     // append '\' to end of string
; 72   :     _tcscpy(szSubKeyBuffer + nRootKeyLen, L"\\");

  00070	e59f11b0	 ldr         r1, [pc, #0x1B0]
  00074	e28d3f8d	 add         r3, sp, #0x8D, 30
  00078	e0830084	 add         r0, r3, r4, lsl #1
  0007c	eb000000	 bl          wcscpy

; 73   :     ++nRootKeyLen;
; 74   : 
; 75   :     // Find number of subkeys
; 76   :     code = RegQueryInfoKey(hKey, 0, 0, 0, &subKeys, 0, 0, 0, 0, 0, 0, 0);

  00080	e59d0020	 ldr         r0, [sp, #0x20]
  00084	e28de024	 add         lr, sp, #0x24
  00088	e3a0a000	 mov         r10, #0
  0008c	e3a03000	 mov         r3, #0
  00090	e3a02000	 mov         r2, #0
  00094	e3a01000	 mov         r1, #0
  00098	e58de000	 str         lr, [sp]
  0009c	e2849001	 add         r9, r4, #1
  000a0	e58da01c	 str         r10, [sp, #0x1C]
  000a4	e58da018	 str         r10, [sp, #0x18]
  000a8	e58da014	 str         r10, [sp, #0x14]
  000ac	e58da010	 str         r10, [sp, #0x10]
  000b0	e58da00c	 str         r10, [sp, #0xC]
  000b4	e58da008	 str         r10, [sp, #8]
  000b8	e58da004	 str         r10, [sp, #4]
  000bc	eb000000	 bl          RegQueryInfoKeyW
  000c0	e3500000	 cmp         r0, #0

; 77   :     if (code != ERROR_SUCCESS)

  000c4	1a00004c	 bne         |$cleanUp$35597|

; 78   :         {
; 79   :         goto cleanUp;
; 80   :         }
; 81   : 
; 82   :     for (DWORD index = 0; index < subKeys; index++)

  000c8	e59d3024	 ldr         r3, [sp, #0x24]
  000cc	e3a06000	 mov         r6, #0
  000d0	e3530000	 cmp         r3, #0
  000d4	0a000047	 beq         |$LN8@Initialize|
  000d8	e28d8f8d	 add         r8, sp, #0x8D, 30
  000dc	e3a0bf41	 mov         r11, #0x41, 30
  000e0		 |$LL10@Initialize|

; 83   :         {
; 84   :         // Get subkey name
; 85   :         size = MAX_PATH;
; 86   :         code = RegEnumKeyEx(hKey, index, szBuffer, &size, 0, 0, 0, 0);

  000e0	e59d0020	 ldr         r0, [sp, #0x20]
  000e4	e28d3028	 add         r3, sp, #0x28
  000e8	e28d202c	 add         r2, sp, #0x2C
  000ec	e1a01006	 mov         r1, r6
  000f0	e58db028	 str         r11, [sp, #0x28]
  000f4	e58da00c	 str         r10, [sp, #0xC]
  000f8	e58da008	 str         r10, [sp, #8]
  000fc	e58da004	 str         r10, [sp, #4]
  00100	e58da000	 str         r10, [sp]
  00104	eb000000	 bl          RegEnumKeyExW
  00108	e3500000	 cmp         r0, #0

; 87   :         if (code != ERROR_SUCCESS)

  0010c	1a000035	 bne         |$LN9@Initialize|

; 88   :             {
; 89   :             continue;
; 90   :             }
; 91   : 
; 92   :         // Create child device object
; 93   :         pAdapter = new PolicyAdapter();

  00110	e3a00e65	 mov         r0, #0x65, 28
  00114	eb000000	 bl          |??2@YAPAXI@Z|
  00118	e1b05000	 movs        r5, r0
  0011c	0a00000f	 beq         |$LN17@Initialize|
  00120	e2853c06	 add         r3, r5, #6, 24
  00124	e285ec02	 add         lr, r5, #2, 24
  00128	e2854b01	 add         r4, r5, #1, 22
  0012c	e2830024	 add         r0, r3, #0x24
  00130	e3a02024	 mov         r2, #0x24
  00134	e3a01000	 mov         r1, #0
  00138	e585a000	 str         r10, [r5]
  0013c	e585a004	 str         r10, [r5, #4]
  00140	e585a210	 str         r10, [r5, #0x210]
  00144	e585a648	 str         r10, [r5, #0x648]
  00148	e585a64c	 str         r10, [r5, #0x64C]
  0014c	e1c5a0b8	 strh        r10, [r5, #8]
  00150	e1cea1b4	 strh        r10, [lr, #0x14]
  00154	e1c4a1bc	 strh        r10, [r4, #0x1C]
  00158	eb000000	 bl          memset
  0015c	ea000000	 b           |$LN18@Initialize|
  00160		 |$LN17@Initialize|
  00160	e3a05000	 mov         r5, #0
  00164		 |$LN18@Initialize|

; 94   :         if (pAdapter == NULL)

  00164	e3550000	 cmp         r5, #0
  00168	0a00001e	 beq         |$LN9@Initialize|

; 95   :             {
; 96   :             continue;
; 97   :             }
; 98   : 
; 99   :         // create a copy of key
; 100  :         _tcscpy(szSubKeyBuffer + nRootKeyLen, szBuffer);

  0016c	e28d102c	 add         r1, sp, #0x2C
  00170	e0880089	 add         r0, r8, r9, lsl #1
  00174	eb000000	 bl          wcscpy

; 101  : 
; 102  :         // Initialize child device object
; 103  :         if (!pAdapter->Initialize(szSubKeyBuffer))

  00178	e28d1f8d	 add         r1, sp, #0x8D, 30
  0017c	e1a00005	 mov         r0, r5
  00180	eb000000	 bl          |?Initialize@PolicyAdapter@@QAAHPBG@Z|
  00184	e3500000	 cmp         r0, #0
  00188	1a000002	 bne         |$LN5@Initialize|

; 104  :             {
; 105  :             // This will result in delete
; 106  :             delete pAdapter;

  0018c	e1a00005	 mov         r0, r5
  00190	eb000000	 bl          |??3@YAXPAX@Z|

; 107  :             continue;

  00194	ea000013	 b           |$LN9@Initialize|
  00198		 |$LN5@Initialize|

; 108  :             }
; 109  :         
; 110  :         // Add child object to array based on order 
; 111  :         for (iAdapter = begin(); 

  00198	e5970000	 ldr         r0, [r7]
  0019c	e5901004	 ldr         r1, [r0, #4]

; 112  :              iAdapter != end() && (*iAdapter)->GetLoadOrder() < pAdapter->GetLoadOrder();
; 113  :              ++iAdapter
; 114  :              );

  001a0		 |$LL31@Initialize|
  001a0	e1510000	 cmp         r1, r0
  001a4	03a03001	 moveq       r3, #1
  001a8	13a03000	 movne       r3, #0
  001ac	e21330ff	 ands        r3, r3, #0xFF
  001b0	03a03001	 moveq       r3, #1
  001b4	13a03000	 movne       r3, #0
  001b8	e21330ff	 ands        r3, r3, #0xFF

; 125  : }

  001bc	0a000005	 beq         |$LN2@Initialize|
  001c0	e5913000	 ldr         r3, [r1]
  001c4	e5952004	 ldr         r2, [r5, #4]
  001c8	e5933004	 ldr         r3, [r3, #4]
  001cc	e1530002	 cmp         r3, r2
  001d0	35911004	 ldrcc       r1, [r1, #4]
  001d4	3afffff1	 bcc         |$LL31@Initialize|
  001d8		 |$LN2@Initialize|

; 115  : 
; 116  :         // Insert 
; 117  :         insert(iAdapter, pAdapter);        

  001d8	e1a00007	 mov         r0, r7
  001dc	eb000000	 bl          |?_Buynode@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@IAAPAU_Node@12@PAU312@@Z|
  001e0	e3500000	 cmp         r0, #0
  001e4	15805000	 strne       r5, [r0]
  001e8		 |$LN9@Initialize|
  001e8	e59d3024	 ldr         r3, [sp, #0x24]
  001ec	e2866001	 add         r6, r6, #1
  001f0	e1560003	 cmp         r6, r3
  001f4	3affffb9	 bcc         |$LL10@Initialize|
  001f8		 |$LN8@Initialize|

; 118  :     }
; 119  :     
; 120  :     rc = TRUE;

  001f8	e3a05001	 mov         r5, #1
  001fc		 |$cleanUp$35597|

; 121  :     
; 122  : cleanUp:
; 123  :     if (hKey != NULL) RegCloseKey(hKey);

  001fc	e59d0020	 ldr         r0, [sp, #0x20]
  00200	e3500000	 cmp         r0, #0
  00204	1b000000	 blne        RegCloseKey

; 124  :     return rc;

  00208	e59d0644	 ldr         r0, [sp, #0x644]
  0020c	eb000000	 bl          __security_check_cookie

; 125  : }

  00210	e1a00005	 mov         r0, r5
  00214	e3a0cc06	 mov         r12, #6, 24
  00218	e38cc048	 orr         r12, r12, #0x48
  0021c	e08dd00c	 add         sp, sp, r12
  00220	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00224	e12fff1e	 bx          lr
  00228		 |$LN78@Initialize|
  00228		 |$LN79@Initialize|
  00228	00000000	 DCD         |??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@|
  0022c		 |$LN80@Initialize|
  0022c	00000000	 DCD         |__security_cookie|
  00230		 |$LN81@Initialize|
  00230	fffff9b8	 DCD         0xfffff9b8
  00234		 |$M37007|

			 ENDP  ; |?Initialize@PolicyContainer@@QAAHPBG@Z|, PolicyContainer::Initialize

	EXPORT	|?PostInitialize@PolicyContainer@@QAAHPAVPolicyRoot@@@Z| ; PolicyContainer::PostInitialize
	IMPORT	|?PostInitialize@PolicyAdapter@@QAAHPAVPolicyRoot@@@Z| ; PolicyAdapter::PostInitialize
; File c:\wince600\public\common\oak\inc\list.hxx

  00000			 AREA	 |.pdata|, PDATA
|$T37090| DCD	|$LN38@PostInitia|
	DCD	0x40002002
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\powerpolicyroot\policycontainer.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PostInitialize@PolicyContainer@@QAAHPAVPolicyRoot@@@Z| PROC ; PolicyContainer::PostInitialize

; 136  : {

  00000		 |$LN38@PostInitia|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M37087|
  00008	e1a08001	 mov         r8, r1
  0000c	e1a07000	 mov         r7, r0

; 137  :     // Look for device by walking through list
; 138  :     int nCount = size();
; 139  :     iterator iAdapterErase;
; 140  :     iterator iAdapter = begin();    

  00010	e5973000	 ldr         r3, [r7]
  00014	e597500c	 ldr         r5, [r7, #0xC]

; 141  :     while (nCount > 0)

  00018	e5936004	 ldr         r6, [r3, #4]
  0001c	ea000011	 b           |$LN35@PostInitia|
  00020		 |$LL4@PostInitia|

; 142  :         {
; 143  :         if ((*iAdapter)->PostInitialize(pPolicyRoot) == FALSE)

  00020	e5960000	 ldr         r0, [r6]
  00024	e1a01008	 mov         r1, r8
  00028	eb000000	 bl          |?PostInitialize@PolicyAdapter@@QAAHPAVPolicyRoot@@@Z|
  0002c	e3500000	 cmp         r0, #0
  00030	1a00000a	 bne         |$LN2@PostInitia|

; 144  :             {
; 145  :             iAdapterErase = iAdapter;

  00034	e1a04006	 mov         r4, r6

; 146  :             iAdapter++;
; 147  : 
; 148  :             (*iAdapterErase)->Uninitialize();

  00038	e5940000	 ldr         r0, [r4]
  0003c	e5966004	 ldr         r6, [r6, #4]
  00040	eb000000	 bl          |?Uninitialize@PolicyAdapter@@QAAXXZ|

; 149  :             delete *iAdapterErase;

  00044	e5940000	 ldr         r0, [r4]
  00048	eb000000	 bl          |??3@YAXPAX@Z|

; 150  :             erase(iAdapterErase);

  0004c	e1a02004	 mov         r2, r4
  00050	e28d1000	 add         r1, sp, #0
  00054	e1a00007	 mov         r0, r7
  00058	eb000000	 bl          |?erase@?$list@PAVPolicyAdapter@@Vallocator@ce@@@ce@@QAA?AViterator@12@V312@@Z|

; 151  :             }
; 152  :         else

  0005c	ea000000	 b           |$LN31@PostInitia|
  00060		 |$LN2@PostInitia|

; 153  :             {
; 154  :             iAdapter++;

  00060	e5966004	 ldr         r6, [r6, #4]
  00064		 |$LN31@PostInitia|

; 155  :             }
; 156  :         --nCount;

  00064	e2455001	 sub         r5, r5, #1
  00068		 |$LN35@PostInitia|
  00068	e3550000	 cmp         r5, #0
  0006c	caffffeb	 bgt         |$LL4@PostInitia|

; 157  :         }
; 158  :         
; 159  :     return TRUE;

  00070	e3a00001	 mov         r0, #1

; 160  : }

  00074	e28dd004	 add         sp, sp, #4
  00078	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$M37088|

			 ENDP  ; |?PostInitialize@PolicyContainer@@QAAHPAVPolicyRoot@@@Z|, PolicyContainer::PostInitialize

	EXPORT	|?FindAdapterById@PolicyContainer@@QAAPAVPolicyAdapter@@PBG@Z| ; PolicyContainer::FindAdapterById
; File c:\wince600\public\common\oak\inc\list.hxx

  00000			 AREA	 |.pdata|, PDATA
|$T37174| DCD	|$LN40@FindAdapte|
	DCD	0x40001b01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\powerpolicyroot\policycontainer.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FindAdapterById@PolicyContainer@@QAAPAVPolicyAdapter@@PBG@Z| PROC ; PolicyContainer::FindAdapterById

; 171  : {

  00000		 |$LN40@FindAdapte|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M37171|
  00004	e1b07001	 movs        r7, r1
  00008	e1a06000	 mov         r6, r0

; 172  :     PolicyAdapter *pAdapter = NULL;

  0000c	e3a05000	 mov         r5, #0

; 173  :     if (szId == NULL) return NULL;

  00010	03a05000	 moveq       r5, #0
  00014	0a000011	 beq         |$LN2@FindAdapte|

; 174  : 
; 175  :     // Look for device by walking through list
; 176  :     for (iterator iAdapter = begin(); iAdapter != end(); iAdapter++)

  00018	e5963000	 ldr         r3, [r6]
  0001c	e5934004	 ldr         r4, [r3, #4]
  00020		 |$LL16@FindAdapte|
  00020	e5963000	 ldr         r3, [r6]
  00024	e1540003	 cmp         r4, r3
  00028	03a03001	 moveq       r3, #1
  0002c	13a03000	 movne       r3, #0
  00030	e21330ff	 ands        r3, r3, #0xFF
  00034	03a03001	 moveq       r3, #1
  00038	13a03000	 movne       r3, #0
  0003c	e21330ff	 ands        r3, r3, #0xFF

; 181  :             break;
; 182  :             }
; 183  :         }
; 184  :         
; 185  :     return pAdapter;
; 186  : }

  00040	0a000006	 beq         |$LN2@FindAdapte|
  00044	e5940000	 ldr         r0, [r4]
  00048	e1a01007	 mov         r1, r7
  0004c	eb000000	 bl          |?IsAdapterId@PolicyAdapter@@QAAHPBG@Z|
  00050	e3500000	 cmp         r0, #0
  00054	05944004	 ldreq       r4, [r4, #4]
  00058	0afffff0	 beq         |$LL16@FindAdapte|

; 177  :         {
; 178  :         if ((*iAdapter)->IsAdapterId(szId) != FALSE)
; 179  :             {
; 180  :             pAdapter = *iAdapter;

  0005c	e5945000	 ldr         r5, [r4]
  00060		 |$LN2@FindAdapte|

; 181  :             break;
; 182  :             }
; 183  :         }
; 184  :         
; 185  :     return pAdapter;
; 186  : }

  00060	e1a00005	 mov         r0, r5
  00064	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M37172|

			 ENDP  ; |?FindAdapterById@PolicyContainer@@QAAPAVPolicyAdapter@@PBG@Z|, PolicyContainer::FindAdapterById

; File c:\wince600\public\common\oak\inc\singleton.hxx

  00000			 AREA	 |.pdata|, PDATA
|$T37184| DCD	|$LN7@factory|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text$yc|, CODE, ARM

  00000		 |??__E?_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@1Ulock_factory@12@A@@YAXXZ| PROC ; `dynamic initializer for 'ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::_factory''

; 390  :     {

  00000		 |$LN7@factory|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37181|
  00004	eb000000	 bl          |?get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ|
  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M37182|

			 ENDP  ; |??__E?_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@1Ulock_factory@12@A@@YAXXZ|, `dynamic initializer for 'ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::_factory''


  00000			 AREA	 |.pdata|, PDATA
|$T37194| DCD	|$LN7@dynamic|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text$yd|, CODE, ARM

  00000		 |??__Fcs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ@YAXXZ| PROC ; `ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock'::`2'::`dynamic atexit destructor for 'cs''
  00000		 |$LN7@dynamic|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37191|
  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          DeleteCriticalSection
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN8@dynamic|
  00014		 |$LN9@dynamic|
  00014	00000000	 DCD         |?cs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@3@XZ@4V43@A|
  00018		 |$M37192|

			 ENDP  ; |??__Fcs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ@YAXXZ|, `ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock'::`2'::`dynamic atexit destructor for 'cs''

	EXPORT	|?_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@1Ulock_factory@12@A| [ DATA ] ; ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::_factory

  00000			 AREA	 |.bss|, NOINIT
|?_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@1Ulock_factory@12@A| % 0x1 ; ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::_factory

  00000			 AREA	 |.CRT$XCU|, DATA
|?_factory$initializer$@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@1P6AXXZA| DCD |??__E?_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@1Ulock_factory@12@A@@YAXXZ| ; ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::_factory$initializer$
	END
