; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\PM\POWERPOLICYROOT\policyadapter.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"/include:?_factory@?$$singleton@V?$$free_list@$$0GE@Vall"
	DCB	"ocator@ce@@@ce@@$$03V?$$static_allocator@V?$$free_list@$$"
	DCB	"0GE@Vallocator@ce@@@ce@@$$03@2@@ce@@1Ulock_factory@12@A "
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??0critical_section@ce@@QAA@XZ|	; ce::critical_section::critical_section
	IMPORT	|InitializeCriticalSection|
; File c:\wince600\public\common\oak\inc\sync.hxx

  00000			 AREA	 |.pdata|, PDATA
|$T36631| DCD	|$LN5@critical_s|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0critical_section@ce@@QAA@XZ| PROC	; ce::critical_section::critical_section

; 125  :     critical_section()

  00000		 |$LN5@critical_s|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36628|
  00004	e1a04000	 mov         r4, r0
  00008	eb000000	 bl          InitializeCriticalSection
  0000c	e1a00004	 mov         r0, r4
  00010	e8bd4010	 ldmia       sp!, {r4, lr}
  00014	e12fff1e	 bx          lr
  00018		 |$M36629|

			 ENDP  ; |??0critical_section@ce@@QAA@XZ|, ce::critical_section::critical_section

	EXPORT	|??1critical_section@ce@@QAA@XZ|	; ce::critical_section::~critical_section
	IMPORT	|DeleteCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T36639| DCD	|$LN5@critical_s@2|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1critical_section@ce@@QAA@XZ| PROC	; ce::critical_section::~critical_section

; 129  :         {DeleteCriticalSection(this); }

  00000		 |$LN5@critical_s@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36636|
  00004	eb000000	 bl          DeleteCriticalSection
  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M36637|

			 ENDP  ; |??1critical_section@ce@@QAA@XZ|, ce::critical_section::~critical_section

	EXPORT	|?Initialize@PolicyAdapter@@QAAHPBG@Z|	; PolicyAdapter::Initialize
	EXPORT	|??_C@_17DJMMGLBL@?$AAD?$AAl?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@PJMPBMAL@?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|RegCloseKey|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|wcscpy|
	IMPORT	|wcslen|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\powerpolicyroot\policyadapter.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T36654| DCD	|$LN16@Initialize|
	DCD	0x40004902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17DJMMGLBL@?$AAD?$AAl?$AAl?$AA?$AA@| DCB "D", 0x0, "l", 0x0, "l", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| DCB "N", 0x0, "a", 0x0, "m"
	DCB	0x0, "e", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@PJMPBMAL@?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@| DCB "O", 0x0, "r", 0x0
	DCB	"d", 0x0, "e", 0x0, "r", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Initialize@PolicyAdapter@@QAAHPBG@Z| PROC ; PolicyAdapter::Initialize

; 41   : {

  00000		 |$LN16@Initialize|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M36651|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0

; 42   :     LONG code;
; 43   :     DWORD size;
; 44   :     DWORD rc = FALSE;    
; 45   :     HKEY hKey = NULL;

  00010	e3a03000	 mov         r3, #0

; 46   : 
; 47   :     // Save device registry key for later use
; 48   :     if (_tcslen(szContext) >= sizeof(m_szRegKey) / sizeof(m_szRegKey[0])) goto cleanUp;

  00014	e1a00004	 mov         r0, r4
  00018	e58d300c	 str         r3, [sp, #0xC]
  0001c	e3a05000	 mov         r5, #0
  00020	eb000000	 bl          wcslen
  00024	e3500f41	 cmp         r0, #0x41, 30
  00028	2a000036	 bcs         |$LN1@Initialize|

; 49   :     _tcscpy(m_szRegKey, szContext);

  0002c	e1a01004	 mov         r1, r4
  00030	e2860f85	 add         r0, r6, #0x85, 30
  00034	eb000000	 bl          wcscpy

; 50   : 
; 51   :     // Open device registry key
; 52   :     code = ::RegOpenKeyEx(HKEY_LOCAL_MACHINE, szContext, 0, 0, &hKey);

  00038	e28d300c	 add         r3, sp, #0xC
  0003c	e58d3000	 str         r3, [sp]
  00040	e3a03000	 mov         r3, #0
  00044	e3a02000	 mov         r2, #0
  00048	e1a01004	 mov         r1, r4
  0004c	e3a0010a	 mov         r0, #0xA, 2
  00050	eb000000	 bl          RegOpenKeyExW
  00054	e3500000	 cmp         r0, #0

; 53   :     if (code != ERROR_SUCCESS) goto cleanUp;

  00058	1a000027	 bne         |$cleanUp$35824|

; 54   : 
; 55   :     // read load order
; 56   :     size = sizeof(m_dwOrder);
; 57   :     code = RegQueryValueEx(hKey, REGEDIT_POLICY_ORDER, 0, 0, (BYTE*)&m_dwOrder, &size);

  0005c	e59f10bc	 ldr         r1, [pc, #0xBC]
  00060	e59d000c	 ldr         r0, [sp, #0xC]
  00064	e3a07004	 mov         r7, #4
  00068	e28de008	 add         lr, sp, #8
  0006c	e2864004	 add         r4, r6, #4
  00070	e3a03000	 mov         r3, #0
  00074	e3a02000	 mov         r2, #0
  00078	e58d7008	 str         r7, [sp, #8]
  0007c	e58de004	 str         lr, [sp, #4]
  00080	e58d4000	 str         r4, [sp]
  00084	eb000000	 bl          RegQueryValueExW
  00088	e3500000	 cmp         r0, #0

; 58   :     if (code != ERROR_SUCCESS) goto cleanUp;

  0008c	1a00001a	 bne         |$cleanUp$35824|

; 59   : 
; 60   :     // read constraint name
; 61   :     size = sizeof(m_szPolicyName);
; 62   :     code = RegQueryValueEx(hKey, REGEDIT_POLICY_NAME, 0, 0, (BYTE*)&m_szPolicyName, &size);

  00090	e2863b01	 add         r3, r6, #1, 22
  00094	e59f1080	 ldr         r1, [pc, #0x80]
  00098	e59d000c	 ldr         r0, [sp, #0xC]
  0009c	e283301c	 add         r3, r3, #0x1C
  000a0	e58d3000	 str         r3, [sp]
  000a4	e3a04f82	 mov         r4, #0x82, 30
  000a8	e28de008	 add         lr, sp, #8
  000ac	e3a03000	 mov         r3, #0
  000b0	e3a02000	 mov         r2, #0
  000b4	e58d4008	 str         r4, [sp, #8]
  000b8	e58de004	 str         lr, [sp, #4]
  000bc	eb000000	 bl          RegQueryValueExW
  000c0	e3500000	 cmp         r0, #0

; 63   :     if (code != ERROR_SUCCESS) goto cleanUp;

  000c4	1a00000c	 bne         |$cleanUp$35824|

; 64   : 
; 65   :     // read dll name
; 66   :     size = sizeof(m_szDll);
; 67   :     code = RegQueryValueEx(hKey, REGEDIT_POLICY_DLL, 0, 0, (BYTE*)&m_szDll, &size);

  000c8	e59f1048	 ldr         r1, [pc, #0x48]
  000cc	e59d000c	 ldr         r0, [sp, #0xC]
  000d0	e3a07f82	 mov         r7, #0x82, 30
  000d4	e28de008	 add         lr, sp, #8
  000d8	e2864008	 add         r4, r6, #8
  000dc	e3a03000	 mov         r3, #0
  000e0	e3a02000	 mov         r2, #0
  000e4	e58d7008	 str         r7, [sp, #8]
  000e8	e58de004	 str         lr, [sp, #4]
  000ec	e58d4000	 str         r4, [sp]
  000f0	eb000000	 bl          RegQueryValueExW
  000f4	e3500000	 cmp         r0, #0

; 68   :     if (code != ERROR_SUCCESS) goto cleanUp;
; 69   :     
; 70   :     // Done
; 71   :     rc = TRUE;

  000f8	03a05001	 moveq       r5, #1
  000fc		 |$cleanUp$35824|

; 72   :     
; 73   : cleanUp:    
; 74   :     if (hKey != NULL) RegCloseKey(hKey);

  000fc	e59d000c	 ldr         r0, [sp, #0xC]
  00100	e3500000	 cmp         r0, #0
  00104	1b000000	 blne        RegCloseKey
  00108		 |$LN1@Initialize|

; 75   :     return rc;
; 76   : }

  00108	e1a00005	 mov         r0, r5
  0010c	e28dd010	 add         sp, sp, #0x10
  00110	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00114	e12fff1e	 bx          lr
  00118		 |$LN17@Initialize|
  00118		 |$LN18@Initialize|
  00118	00000000	 DCD         |??_C@_17DJMMGLBL@?$AAD?$AAl?$AAl?$AA?$AA@|
  0011c		 |$LN19@Initialize|
  0011c	00000000	 DCD         |??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@|
  00120		 |$LN20@Initialize|
  00120	00000000	 DCD         |??_C@_1M@PJMPBMAL@?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@|
  00124		 |$M36652|

			 ENDP  ; |?Initialize@PolicyAdapter@@QAAHPBG@Z|, PolicyAdapter::Initialize

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?PostInitialize@PolicyAdapter@@QAAHPAVPolicyRoot@@@Z| ; PolicyAdapter::PostInitialize
	EXPORT	|??_C@_1CK@MKMELJJH@?$AAP?$AAr?$AAe?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@JCMOMFFI@?$AAP?$AAo?$AAs?$AAt?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@GKFFFLHB@?$AAP?$AAr?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@DCFPCHLO@?$AAP?$AAo?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@FHEHAOKJ@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@KPFBJADD@?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@HFNHAJFD@?$AAO?$AAp?$AAe?$AAn?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@KBEINNHC@?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@PAHFEOCJ@?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LLCLNBHO@?$AA?$CF?$AAs?$AA_?$AA?$CF?$AAs?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|?AddSystemChangeObserver@PolicyRoot@@QAAXPAVPolicyAdapter@@@Z| ; PolicyRoot::AddSystemChangeObserver
	IMPORT	|?AddDeviceChangeObserver@PolicyRoot@@QAAXPAVPolicyAdapter@@@Z| ; PolicyRoot::AddDeviceChangeObserver
	IMPORT	|GetProcAddressW|
	IMPORT	|swprintf|
	IMPORT	|LoadLibraryW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T36681| DCD	|$LN22@PostInitia|
	DCD	0xc0009402

  00000			 AREA	 |.xdata|, DATA
|$T36677| DCD	0xffffffe8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@MKMELJJH@?$AAP?$AAr?$AAe?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "e", 0x0, "S", 0x0, "y", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "m", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@JCMOMFFI@?$AAP?$AAo?$AAs?$AAt?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AA@| DCB "P"
	DCB	0x0, "o", 0x0, "s", 0x0, "t", 0x0, "S", 0x0, "y", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "m", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "g", 0x0, "e", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@GKFFFLHB@?$AAP?$AAr?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "e", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@DCFPCHLO@?$AAP?$AAo?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AA@| DCB "P"
	DCB	0x0, "o", 0x0, "s", 0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "g", 0x0, "e", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@FHEHAOKJ@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "s", 0x0, "e", 0x0, "P", 0x0, "o"
	DCB	0x0, "l", 0x0, "i", 0x0, "c", 0x0, "y", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@KPFBJADD@?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@| DCB "N"
	DCB	0x0, "o", 0x0, "t", 0x0, "i", 0x0, "f", 0x0, "y", 0x0, "P"
	DCB	0x0, "o", 0x0, "l", 0x0, "i", 0x0, "c", 0x0, "y", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@HFNHAJFD@?$AAO?$AAp?$AAe?$AAn?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@| DCB "O"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, "P", 0x0, "o", 0x0, "l"
	DCB	0x0, "i", 0x0, "c", 0x0, "y", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@KBEINNHC@?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "P"
	DCB	0x0, "o", 0x0, "l", 0x0, "i", 0x0, "c", 0x0, "y", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@PAHFEOCJ@?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "l"
	DCB	0x0, "i", 0x0, "c", 0x0, "y", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LLCLNBHO@?$AA?$CF?$AAs?$AA_?$AA?$CF?$AAs?$AA?$AA@| DCB "%", 0x0
	DCB	"s", 0x0, "_", 0x0, "%", 0x0, "s", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T36677|

  00008		 |?PostInitialize@PolicyAdapter@@QAAHPAVPolicyRoot@@@Z| PROC ; PolicyAdapter::PostInitialize

; 87   : {

  00008		 |$LN22@PostInitia|
  00008	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  0000c	e24ddf83	 sub         sp, sp, #0x83, 30
  00010		 |$M36678|
  00010	e1a07001	 mov         r7, r1
  00014	e1a04000	 mov         r4, r0
  00018	e59f3234	 ldr         r3, [pc, #0x234]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3208	 str         r3, [sp, #0x208]

; 88   :     BOOL rc = FALSE;
; 89   :     _TCHAR szBuffer[MAX_PATH];
; 90   :     
; 91   :     // Load library
; 92   :     m_hModule = ::LoadLibrary(m_szDll);

  00024	e2840008	 add         r0, r4, #8
  00028	e3a05000	 mov         r5, #0
  0002c	eb000000	 bl          LoadLibraryW
  00030	e3500000	 cmp         r0, #0
  00034	e5840000	 str         r0, [r4]

; 93   :     if (m_hModule == NULL) goto cleanUp;

  00038	0a000075	 beq         |$cleanUp$35850|

; 94   : 
; 95   :     //
; 96   :     // load functions
; 97   :     
; 98   :     // xxx_InitPolicy
; 99   :     _stprintf(szBuffer, FUNCTION_FMT, m_szPolicyName, INIT_NAME);

  0003c	e59f320c	 ldr         r3, [pc, #0x20C]
  00040	e59f11e4	 ldr         r1, [pc, #0x1E4]
  00044	e2846b01	 add         r6, r4, #1, 22
  00048	e286201c	 add         r2, r6, #0x1C
  0004c	e28d0000	 add         r0, sp, #0
  00050	eb000000	 bl          swprintf

; 100  :     m_fns.InitPolicy = reinterpret_cast<fnInitPolicy>(
; 101  :                             ::GetProcAddress(m_hModule, szBuffer)
; 102  :                             );

  00054	e5940000	 ldr         r0, [r4]
  00058	e28d1000	 add         r1, sp, #0
  0005c	eb000000	 bl          GetProcAddressW
  00060	e3500000	 cmp         r0, #0
  00064	e5840624	 str         r0, [r4, #0x624]

; 103  :     if (m_fns.InitPolicy == NULL) goto cleanUp;

  00068	0a000069	 beq         |$cleanUp$35850|

; 104  : 
; 105  :     // xxx_DeinitPolicy
; 106  :     _stprintf(szBuffer, FUNCTION_FMT, m_szPolicyName, DEINIT_NAME);

  0006c	e59f31d8	 ldr         r3, [pc, #0x1D8]
  00070	e59f11b4	 ldr         r1, [pc, #0x1B4]
  00074	e286201c	 add         r2, r6, #0x1C
  00078	e28d0000	 add         r0, sp, #0
  0007c	eb000000	 bl          swprintf

; 107  :     m_fns.DeinitPolicy = reinterpret_cast<fnDeinitPolicy>(
; 108  :                             ::GetProcAddress(m_hModule, szBuffer)
; 109  :                             );

  00080	e5940000	 ldr         r0, [r4]
  00084	e28d1000	 add         r1, sp, #0
  00088	eb000000	 bl          GetProcAddressW
  0008c	e3500000	 cmp         r0, #0
  00090	e5840628	 str         r0, [r4, #0x628]

; 110  :     if (m_fns.DeinitPolicy == NULL) goto cleanUp;

  00094	0a00005e	 beq         |$cleanUp$35850|

; 111  : 
; 112  :     // xxx_OpenPolicy
; 113  :     _stprintf(szBuffer, FUNCTION_FMT, m_szPolicyName, OPEN_NAME);

  00098	e59f31a8	 ldr         r3, [pc, #0x1A8]
  0009c	e59f1188	 ldr         r1, [pc, #0x188]
  000a0	e286201c	 add         r2, r6, #0x1C
  000a4	e28d0000	 add         r0, sp, #0
  000a8	eb000000	 bl          swprintf

; 114  :     m_fns.OpenPolicy = reinterpret_cast<fnOpenPolicy>(
; 115  :                             ::GetProcAddress(m_hModule, szBuffer)
; 116  :                             );

  000ac	e5940000	 ldr         r0, [r4]
  000b0	e28d1000	 add         r1, sp, #0
  000b4	eb000000	 bl          GetProcAddressW
  000b8	e3500000	 cmp         r0, #0
  000bc	e584062c	 str         r0, [r4, #0x62C]

; 117  : 
; 118  :     if (m_fns.OpenPolicy != NULL)

  000c0	0a000015	 beq         |$LN6@PostInitia|

; 119  :             {
; 120  :         // xxx_UpdatePolicy
; 121  :         _stprintf(szBuffer, FUNCTION_FMT, m_szPolicyName, NOTIFY_NAME);

  000c4	e59f3178	 ldr         r3, [pc, #0x178]
  000c8	e59f115c	 ldr         r1, [pc, #0x15C]
  000cc	e286201c	 add         r2, r6, #0x1C
  000d0	e28d0000	 add         r0, sp, #0
  000d4	eb000000	 bl          swprintf

; 122  :         m_fns.NotifyPolicy = reinterpret_cast<fnNotifyPolicy>(
; 123  :                                 ::GetProcAddress(m_hModule, szBuffer)
; 124  :                                 );

  000d8	e5940000	 ldr         r0, [r4]
  000dc	e28d1000	 add         r1, sp, #0
  000e0	eb000000	 bl          GetProcAddressW
  000e4	e3500000	 cmp         r0, #0
  000e8	e5840630	 str         r0, [r4, #0x630]

; 125  :         if (m_fns.NotifyPolicy == NULL) goto cleanUp;

  000ec	0a000048	 beq         |$cleanUp$35850|

; 126  : 
; 127  :         // xxx_ClosePolicy
; 128  :         _stprintf(szBuffer, FUNCTION_FMT, m_szPolicyName, CLOSE_NAME);

  000f0	e59f3148	 ldr         r3, [pc, #0x148]
  000f4	e59f1130	 ldr         r1, [pc, #0x130]
  000f8	e286201c	 add         r2, r6, #0x1C
  000fc	e28d0000	 add         r0, sp, #0
  00100	eb000000	 bl          swprintf

; 129  :         m_fns.ClosePolicy = reinterpret_cast<fnClosePolicy>(
; 130  :                                 ::GetProcAddress(m_hModule, szBuffer)
; 131  :                                 );

  00104	e5940000	 ldr         r0, [r4]
  00108	e28d1000	 add         r1, sp, #0
  0010c	eb000000	 bl          GetProcAddressW
  00110	e3500000	 cmp         r0, #0
  00114	e5840634	 str         r0, [r4, #0x634]

; 132  :         if (m_fns.ClosePolicy == NULL) goto cleanUp;

  00118	0a00003d	 beq         |$cleanUp$35850|
  0011c		 |$LN6@PostInitia|

; 133  :         }
; 134  : 
; 135  :     // device state change notification 
; 136  :     _stprintf(szBuffer, FUNCTION_FMT, m_szPolicyName, PREDEVICESTATE_NAME);

  0011c	e59f3118	 ldr         r3, [pc, #0x118]
  00120	e59f1104	 ldr         r1, [pc, #0x104]
  00124	e286201c	 add         r2, r6, #0x1C
  00128	e28d0000	 add         r0, sp, #0
  0012c	eb000000	 bl          swprintf

; 137  :     m_fns.PreDeviceStateChange = reinterpret_cast<fnDeviceStateChange>(
; 138  :                             ::GetProcAddress(m_hModule, szBuffer)
; 139  :                             );

  00130	e5940000	 ldr         r0, [r4]
  00134	e28d1000	 add         r1, sp, #0
  00138	eb000000	 bl          GetProcAddressW

; 140  : 
; 141  :     _stprintf(szBuffer, FUNCTION_FMT, m_szPolicyName, POSTDEVICESTATE_NAME);

  0013c	e59f30f4	 ldr         r3, [pc, #0xF4]
  00140	e59f10e4	 ldr         r1, [pc, #0xE4]
  00144	e1a02000	 mov         r2, r0
  00148	e5842638	 str         r2, [r4, #0x638]
  0014c	e286201c	 add         r2, r6, #0x1C
  00150	e28d0000	 add         r0, sp, #0
  00154	eb000000	 bl          swprintf

; 142  :     m_fns.PostDeviceStateChange = reinterpret_cast<fnDeviceStateChange>(
; 143  :                             ::GetProcAddress(m_hModule, szBuffer)
; 144  :                             );

  00158	e5940000	 ldr         r0, [r4]
  0015c	e28d1000	 add         r1, sp, #0
  00160	eb000000	 bl          GetProcAddressW

; 145  : 
; 146  :     if (m_fns.PreDeviceStateChange != NULL || m_fns.PostDeviceStateChange != NULL)

  00164	e5943638	 ldr         r3, [r4, #0x638]
  00168	e584063c	 str         r0, [r4, #0x63C]
  0016c	e3530000	 cmp         r3, #0
  00170	1a000001	 bne         |$LN3@PostInitia|
  00174	e3500000	 cmp         r0, #0
  00178	0a000002	 beq         |$LN4@PostInitia|
  0017c		 |$LN3@PostInitia|

; 147  :         {
; 148  :         pPolicyRoot->AddDeviceChangeObserver(this);

  0017c	e1a01004	 mov         r1, r4
  00180	e1a00007	 mov         r0, r7
  00184	eb000000	 bl          |?AddDeviceChangeObserver@PolicyRoot@@QAAXPAVPolicyAdapter@@@Z|
  00188		 |$LN4@PostInitia|

; 149  :         }
; 150  : 
; 151  :     // device state change notification 
; 152  :     _stprintf(szBuffer, FUNCTION_FMT, m_szPolicyName, PRESYSTEMSTATE_NAME);

  00188	e59f30a4	 ldr         r3, [pc, #0xA4]
  0018c	e59f1098	 ldr         r1, [pc, #0x98]
  00190	e286201c	 add         r2, r6, #0x1C
  00194	e28d0000	 add         r0, sp, #0
  00198	eb000000	 bl          swprintf

; 153  :     m_fns.PreSystemStateChange = reinterpret_cast<fnSystemStateChange>(
; 154  :                             ::GetProcAddress(m_hModule, szBuffer)
; 155  :                             );

  0019c	e5940000	 ldr         r0, [r4]
  001a0	e28d1000	 add         r1, sp, #0
  001a4	eb000000	 bl          GetProcAddressW

; 156  : 
; 157  :     _stprintf(szBuffer, FUNCTION_FMT, m_szPolicyName, POSTSYSTEMSTATE_NAME);

  001a8	e59f3080	 ldr         r3, [pc, #0x80]
  001ac	e59f1078	 ldr         r1, [pc, #0x78]
  001b0	e1a02000	 mov         r2, r0
  001b4	e5842640	 str         r2, [r4, #0x640]
  001b8	e286201c	 add         r2, r6, #0x1C
  001bc	e28d0000	 add         r0, sp, #0
  001c0	eb000000	 bl          swprintf

; 158  :     m_fns.PostSystemStateChange = reinterpret_cast<fnSystemStateChange>(
; 159  :                             ::GetProcAddress(m_hModule, szBuffer)
; 160  :                             );

  001c4	e5940000	 ldr         r0, [r4]
  001c8	e28d1000	 add         r1, sp, #0
  001cc	eb000000	 bl          GetProcAddressW

; 161  : 
; 162  :     if (m_fns.PreSystemStateChange != NULL || m_fns.PostSystemStateChange != NULL)

  001d0	e5943640	 ldr         r3, [r4, #0x640]
  001d4	e5840644	 str         r0, [r4, #0x644]
  001d8	e3530000	 cmp         r3, #0
  001dc	1a000001	 bne         |$LN1@PostInitia|
  001e0	e3500000	 cmp         r0, #0
  001e4	0a000002	 beq         |$LN2@PostInitia|
  001e8		 |$LN1@PostInitia|

; 163  :         {
; 164  :         pPolicyRoot->AddSystemChangeObserver(this);

  001e8	e1a01004	 mov         r1, r4
  001ec	e1a00007	 mov         r0, r7
  001f0	eb000000	 bl          |?AddSystemChangeObserver@PolicyRoot@@QAAXPAVPolicyAdapter@@@Z|
  001f4		 |$LN2@PostInitia|

; 165  :         }
; 166  :     
; 167  :     // try to initialize constraint adapter
; 168  :     m_hPolicyAdapter = m_fns.InitPolicy(m_szRegKey);

  001f4	e5943624	 ldr         r3, [r4, #0x624]
  001f8	e2840f85	 add         r0, r4, #0x85, 30
  001fc	e1a0e00f	 mov         lr, pc
  00200	e12fff13	 bx          r3
  00204	e3500000	 cmp         r0, #0

; 169  :     rc = m_hPolicyAdapter != NULL;

  00208	13a05001	 movne       r5, #1
  0020c	03a05000	 moveq       r5, #0
  00210	e5840210	 str         r0, [r4, #0x210]
  00214		 |$cleanUp$35850|

; 170  :     
; 171  : cleanUp:
; 172  :     return rc;

  00214	e59d0208	 ldr         r0, [sp, #0x208]
  00218	eb000000	 bl          __security_check_cookie

; 173  : }

  0021c	e1a00005	 mov         r0, r5
  00220	e28ddf83	 add         sp, sp, #0x83, 30
  00224	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00228	e12fff1e	 bx          lr
  0022c		 |$LN23@PostInitia|
  0022c		 |$LN24@PostInitia|
  0022c	00000000	 DCD         |??_C@_1M@LLCLNBHO@?$AA?$CF?$AAs?$AA_?$AA?$CF?$AAs?$AA?$AA@|
  00230		 |$LN25@PostInitia|
  00230	00000000	 DCD         |??_C@_1CM@JCMOMFFI@?$AAP?$AAo?$AAs?$AAt?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AA@|
  00234		 |$LN26@PostInitia|
  00234	00000000	 DCD         |??_C@_1CK@MKMELJJH@?$AAP?$AAr?$AAe?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AA@|
  00238		 |$LN27@PostInitia|
  00238	00000000	 DCD         |??_C@_1CM@DCFPCHLO@?$AAP?$AAo?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AA@|
  0023c		 |$LN28@PostInitia|
  0023c	00000000	 DCD         |??_C@_1CK@GKFFFLHB@?$AAP?$AAr?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?$AA@|
  00240		 |$LN29@PostInitia|
  00240	00000000	 DCD         |??_C@_1BI@FHEHAOKJ@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@|
  00244		 |$LN30@PostInitia|
  00244	00000000	 DCD         |??_C@_1BK@KPFBJADD@?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@|
  00248		 |$LN31@PostInitia|
  00248	00000000	 DCD         |??_C@_1BG@HFNHAJFD@?$AAO?$AAp?$AAe?$AAn?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@|
  0024c		 |$LN32@PostInitia|
  0024c	00000000	 DCD         |??_C@_1BK@KBEINNHC@?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@|
  00250		 |$LN33@PostInitia|
  00250	00000000	 DCD         |??_C@_1BG@PAHFEOCJ@?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?$AA@|
  00254		 |$LN34@PostInitia|
  00254	00000000	 DCD         |__security_cookie|
  00258		 |$M36679|

			 ENDP  ; |?PostInitialize@PolicyAdapter@@QAAHPAVPolicyRoot@@@Z|, PolicyAdapter::PostInitialize

	EXPORT	|?Uninitialize@PolicyAdapter@@QAAXXZ|	; PolicyAdapter::Uninitialize
	IMPORT	|FreeLibrary|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T36703| DCD	|$LN7@Uninitiali|
	DCD	0x40001d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Uninitialize@PolicyAdapter@@QAAXXZ| PROC ; PolicyAdapter::Uninitialize

; 182  : {

  00000		 |$LN7@Uninitiali|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36700|
  00004	e1a05000	 mov         r5, r0

; 183  :     if (m_fns.ClosePolicy != NULL && m_hPolicyAdapter != NULL)

  00008	e5953634	 ldr         r3, [r5, #0x634]
  0000c	e1b02003	 movs        r2, r3
  00010	15953210	 ldrne       r3, [r5, #0x210]
  00014	13530000	 cmpne       r3, #0

; 184  :         {
; 185  :         m_fns.ClosePolicy(m_hPolicyAdapter);

  00018	11a00003	 movne       r0, r3
  0001c	11a0e00f	 movne       lr, pc
  00020	112fff12	 bxne        r2

; 186  :         }
; 187  : 
; 188  :     if (m_hModule != NULL)

  00024	e5953000	 ldr         r3, [r5]
  00028	e3530000	 cmp         r3, #0

; 189  :         {
; 190  :         FreeLibrary(m_hModule);

  0002c	11a00003	 movne       r0, r3
  00030	1b000000	 blne        FreeLibrary

; 191  :         }
; 192  : 
; 193  :     // reset member variables
; 194  :     *m_szDll = NULL;
; 195  :     m_hModule = NULL;
; 196  :     m_dwOrder = 0;
; 197  :     *m_szRegKey = NULL;
; 198  :     *m_szPolicyName = NULL;
; 199  :     m_hPolicyAdapter = NULL;
; 200  :     memset(&m_fns, 0, sizeof(PolicyAdapterFns));

  00034	e2853c06	 add         r3, r5, #6, 24
  00038	e2830024	 add         r0, r3, #0x24
  0003c	e3a03000	 mov         r3, #0
  00040	e285ec02	 add         lr, r5, #2, 24
  00044	e2854b01	 add         r4, r5, #1, 22
  00048	e3a02024	 mov         r2, #0x24
  0004c	e3a01000	 mov         r1, #0
  00050	e1c530b8	 strh        r3, [r5, #8]
  00054	e5853000	 str         r3, [r5]
  00058	e5853004	 str         r3, [r5, #4]
  0005c	e1ce31b4	 strh        r3, [lr, #0x14]
  00060	e1c431bc	 strh        r3, [r4, #0x1C]
  00064	e5853210	 str         r3, [r5, #0x210]
  00068	eb000000	 bl          memset

; 201  : }

  0006c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$M36701|

			 ENDP  ; |?Uninitialize@PolicyAdapter@@QAAXXZ|, PolicyAdapter::Uninitialize

	EXPORT	|??__Fcs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ@YAXXZ| ; `ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock'::`2'::`dynamic atexit destructor for 'cs''
	EXPORT	|??_B?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ@51| [ DATA ] ; `ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock'::`2'::`local static guard'
	EXPORT	|?get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ| ; ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock
	EXPORT	|?cs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@3@XZ@4V43@A| [ DATA ] ; `ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock'::`2'::cs
	IMPORT	|atexit|
; File c:\wince600\public\common\oak\inc\sync.hxx

  00000			 AREA	 |.bss|, NOINIT
|??_B?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ@51| % 0x4 ; `ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock'::`2'::`local static guard'

  00000			 AREA	 |.bss|, NOINIT
|?cs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@3@XZ@4V43@A| % 0x14 ; `ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock'::`2'::cs

  00000			 AREA	 |.pdata|, PDATA
|$T36715| DCD	|$LN8@get_lock|
	DCD	0x40001602
; Function compile flags: /Ogspy
; File c:\wince600\public\common\oak\inc\singleton.hxx

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ| PROC ; ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock

; 320  :     {

  00000		 |$LN8@get_lock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36712|

; 321  :         static critical_section cs;

  00008	e59f2044	 ldr         r2, [pc, #0x44]
  0000c	e5923000	 ldr         r3, [r2]
  00010	e3130001	 tst         r3, #1
  00014	1a000005	 bne         |$LN1@get_lock|
  00018	e59f0028	 ldr         r0, [pc, #0x28]
  0001c	e3833001	 orr         r3, r3, #1
  00020	e5823000	 str         r3, [r2]
  00024	eb000000	 bl          InitializeCriticalSection
  00028	e59f0020	 ldr         r0, [pc, #0x20]
  0002c	eb000000	 bl          atexit
  00030		 |$LN1@get_lock|

; 322  :         
; 323  :         //
; 324  :         // This statement forces compiler to instantiate _factory member
; 325  :         // thus assuring that lock_factory ctor is called. 
; 326  :         //
; 327  :         lock_factory* volatile p = &_factory;

  00030	e59f3014	 ldr         r3, [pc, #0x14]

; 328  : 
; 329  :         return cs;
; 330  :     }

  00034	e59f000c	 ldr         r0, [pc, #0xC]
  00038	e58d3000	 str         r3, [sp]
  0003c	e28dd004	 add         sp, sp, #4
  00040	e49de004	 ldr         lr, [sp], #4
  00044	e12fff1e	 bx          lr
  00048		 |$LN9@get_lock|
  00048		 |$LN10@get_lock|
  00048	00000000	 DCD         |?cs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@3@XZ@4V43@A|
  0004c		 |$LN11@get_lock|
  0004c	00000000	 DCD         |?_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@1Ulock_factory@12@A|
  00050		 |$LN12@get_lock|
  00050	00000000	 DCD         |??__Fcs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ@YAXXZ|
  00054		 |$LN13@get_lock|
  00054	00000000	 DCD         |??_B?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ@51|
  00058		 |$M36713|

			 ENDP  ; |?get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ|, ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock

	EXPORT	|??0lock_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@QAA@XZ| ; ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::lock_factory::lock_factory

  00000			 AREA	 |.pdata|, PDATA
|$T36730| DCD	|$LN5@lock_facto|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0lock_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@QAA@XZ| PROC ; ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::lock_factory::lock_factory

; 339  :         lock_factory()

  00000		 |$LN5@lock_facto|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36727|
  00004	e1a04000	 mov         r4, r0
  00008	eb000000	 bl          |?get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ|

; 340  :             {get_lock(); }

  0000c	e1a00004	 mov         r0, r4
  00010	e8bd4010	 ldmia       sp!, {r4, lr}
  00014	e12fff1e	 bx          lr
  00018		 |$M36728|

			 ENDP  ; |??0lock_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@QAA@XZ|, ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::lock_factory::lock_factory


  00000			 AREA	 |.pdata|, PDATA
|$T36740| DCD	|$LN7@factory|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text$yc|, CODE, ARM

  00000		 |??__E?_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@1Ulock_factory@12@A@@YAXXZ| PROC ; `dynamic initializer for 'ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::_factory''

; 390  :     {

  00000		 |$LN7@factory|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36737|
  00004	eb000000	 bl          |?get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ|
  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M36738|

			 ENDP  ; |??__E?_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@1Ulock_factory@12@A@@YAXXZ|, `dynamic initializer for 'ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::_factory''


  00000			 AREA	 |.pdata|, PDATA
|$T36750| DCD	|$LN7@dynamic|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text$yd|, CODE, ARM

  00000		 |??__Fcs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ@YAXXZ| PROC ; `ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock'::`2'::`dynamic atexit destructor for 'cs''
  00000		 |$LN7@dynamic|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36747|
  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          DeleteCriticalSection
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN8@dynamic|
  00014		 |$LN9@dynamic|
  00014	00000000	 DCD         |?cs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@3@XZ@4V43@A|
  00018		 |$M36748|

			 ENDP  ; |??__Fcs@?1??get_lock@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@KAAAVcritical_section@2@XZ@YAXXZ|, `ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::get_lock'::`2'::`dynamic atexit destructor for 'cs''

	EXPORT	|?_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@1Ulock_factory@12@A| [ DATA ] ; ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::_factory

  00000			 AREA	 |.bss|, NOINIT
|?_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@1Ulock_factory@12@A| % 0x1 ; ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::_factory

  00000			 AREA	 |.CRT$XCU|, DATA
|?_factory$initializer$@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@1P6AXXZA| DCD |??__E?_factory@?$singleton@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03V?$static_allocator@V?$free_list@$0GE@Vallocator@ce@@@ce@@$03@2@@ce@@1Ulock_factory@12@A@@YAXXZ| ; ce::singleton<ce::free_list<100,ce::allocator>,4,ce::static_allocator<ce::free_list<100,ce::allocator>,4> >::_factory$initializer$
	END
