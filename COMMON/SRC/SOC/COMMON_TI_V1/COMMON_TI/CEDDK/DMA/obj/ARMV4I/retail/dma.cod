; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\CEDDK\DMA\dma.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_hDmaDrv| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|g_hDmaDrv| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|GetCurrentProcessId|
	IMPORT	|__GetUserKData|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T43989| DCD	|$LN5@GetCurrent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcessId| PROC

; 373  : _inline DWORD GetCurrentProcessId(void) {

  00000		 |$LN5@GetCurrent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43986|

; 374  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURPROC * sizeof(HANDLE)));

  00004	e3a0000c	 mov         r0, #0xC
  00008	eb000000	 bl          __GetUserKData

; 375  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M43987|

			 ENDP  ; |GetCurrentProcessId|

	EXPORT	|LoadDmaDriver|
	EXPORT	|??_C@_1M@GJIMDHLB@?$AAD?$AAM?$AAA?$AA1?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|CreateFileW|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\ceddk\dma\dma.c

  00000			 AREA	 |.pdata|, PDATA
|$T43999| DCD	|$LN6@LoadDmaDri|
	DCD	0x40001802

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@GJIMDHLB@?$AAD?$AAM?$AAA?$AA1?$AA?3?$AA?$AA@| DCB "D", 0x0, "M", 0x0
	DCB	"A", 0x0, "1", 0x0, ":", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LoadDmaDriver| PROC

; 46   : {

  00000		 |$LN6@LoadDmaDri|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M43996|

; 47   :     BOOL rc = FALSE;
; 48   :     g_hDmaDrv = CreateFile(L"DMA1:", 0, 0, NULL, 0, 0, NULL);

  00008	e59f004c	 ldr         r0, [pc, #0x4C]
  0000c	e3a0e000	 mov         lr, #0
  00010	e3a03000	 mov         r3, #0
  00014	e3a02000	 mov         r2, #0
  00018	e3a01000	 mov         r1, #0
  0001c	e3a04000	 mov         r4, #0
  00020	e58de008	 str         lr, [sp, #8]
  00024	e58de004	 str         lr, [sp, #4]
  00028	e58de000	 str         lr, [sp]
  0002c	eb000000	 bl          CreateFileW
  00030	e59f3020	 ldr         r3, [pc, #0x20]

; 49   :     if (g_hDmaDrv == INVALID_HANDLE_VALUE)

  00034	e3700001	 cmn         r0, #1

; 50   :         {
; 51   :         g_hDmaDrv = NULL;

  00038	03a02000	 moveq       r2, #0
  0003c	e5830000	 str         r0, [r3]
  00040	05832000	 streq       r2, [r3]

; 52   :         goto cleanUp;
; 53   :         }
; 54   : 
; 55   :     rc = TRUE;

  00044	13a04001	 movne       r4, #1
  00048		 |$cleanUp$43744|

; 56   : cleanUp:
; 57   :     return rc;
; 58   : }

  00048	e1a00004	 mov         r0, r4
  0004c	e28dd00c	 add         sp, sp, #0xC
  00050	e8bd4010	 ldmia       sp!, {r4, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$LN7@LoadDmaDri|
  00058		 |$LN8@LoadDmaDri|
  00058	00000000	 DCD         |g_hDmaDrv|
  0005c		 |$LN9@LoadDmaDri|
  0005c	00000000	 DCD         |??_C@_1M@GJIMDHLB@?$AAD?$AAM?$AAA?$AA1?$AA?3?$AA?$AA@|
  00060		 |$M43997|

			 ENDP  ; |LoadDmaDriver|

	EXPORT	|DmaEnableInterrupts|
	EXPORT	|??_C@_1HE@JBPHHPPH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|DeviceIoControl|
	IMPORT	|__C_specific_handler|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T44033| DCD	|$LN26@DmaEnableI|
	DCD	0xc0003504

  00000			 AREA	 |.pdata|, PDATA
|$T44035| DCD	|$LN11@DmaEnableI|
	DCD	0x40000902

  00000			 AREA	 |.xdata|, DATA
|$T44031| DCD	0x1
	DCD	|$LN15@DmaEnableI|
	DCD	|$LN16@DmaEnableI|
	DCD	|$LN11@DmaEnableI|
	DCD	|$LN12@DmaEnableI|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@JBPHHPPH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "C", 0x0, "E", 0x0, "D", 0x0, "D", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "t"
	DCB	0x0, "r", 0x0, "y", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "m"
	DCB	0x0, "a", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\ceddk\dma\dma.c

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T44031|

  00008		 |DmaEnableInterrupts| PROC

; 201  : {

  00008		 |$LN26@DmaEnableI|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d58f0	 stmdb       sp!, {r4 - r7, r11, r12, lr}
  00010	e28db01c	 add         r11, sp, #0x1C
  00014	e24dd024	 sub         sp, sp, #0x24
  00018		 |$LN24@DmaEnableI|
  00018	e1a07001	 mov         r7, r1
  0001c	e1a05000	 mov         r5, r0

; 202  :     BOOL rc = FALSE;
; 203  :     IOCTL_DMA_REGISTER_EVENTHANDLE_IN RegisterEvent;
; 204  :     CeddkDmaContext_t *pContext = (CeddkDmaContext_t*)hDmaChannel;
; 205  :     
; 206  :     // check if dma handle is valid
; 207  :     if (ValidateDmaDriver() == FALSE || hDmaChannel == NULL)

  00020	e59f60d4	 ldr         r6, [pc, #0xD4]
  00024	e3a04000	 mov         r4, #0
  00028	e50b4030	 str         r4, [r11, #-0x30]
  0002c	e5963000	 ldr         r3, [r6]
  00030	e3530000	 cmp         r3, #0
  00034	1a000002	 bne         |$LN22@DmaEnableI|
  00038	eb000000	 bl          LoadDmaDriver
  0003c	e3500000	 cmp         r0, #0
  00040	0a000021	 beq         |$cleanUp$43814|
  00044		 |$LN22@DmaEnableI|
  00044	e3550000	 cmp         r5, #0
  00048	0a00001f	 beq         |$cleanUp$43814|
  0004c		 |$LN15@DmaEnableI|

; 208  :         {
; 209  :         goto cleanUp;
; 210  :         }
; 211  : 
; 212  :     __try
; 213  :         {
; 214  :         if (pContext->cookie != DMA_HANDLE_CHANNEL_COOKIE)

  0004c	e5952000	 ldr         r2, [r5]
  00050	e59f30a0	 ldr         r3, [pc, #0xA0]
  00054	e1520003	 cmp         r2, r3
  00058	0a000000	 beq         |$LN2@DmaEnableI|

; 215  :             {
; 216  :             goto cleanUp;

  0005c	ea00001a	 b           |$cleanUp$43814|
  00060		 |$LN2@DmaEnableI|

; 217  :             }
; 218  : 
; 219  :         RegisterEvent.hEvent = hEvent;
; 220  :         RegisterEvent.processId = GetCurrentProcessId();

  00060	e3a0000c	 mov         r0, #0xC
  00064	e50b7024	 str         r7, [r11, #-0x24]
  00068	eb000000	 bl          __GetUserKData
  0006c	e50b0020	 str         r0, [r11, #-0x20]

; 221  :         RegisterEvent.pContext = &pContext->context;

  00070	e2853008	 add         r3, r5, #8
  00074	e50b3028	 str         r3, [r11, #-0x28]

; 222  :         if (!DeviceIoControl(g_hDmaDrv, IOCTL_DMA_REGISTER_EVENTHANDLE, 
; 223  :             (VOID*)&RegisterEvent, sizeof(IOCTL_DMA_REGISTER_EVENTHANDLE_IN), 
; 224  :             NULL, 0, NULL, NULL))

  00078	e5960000	 ldr         r0, [r6]
  0007c	e59f1070	 ldr         r1, [pc, #0x70]
  00080	e3a0e000	 mov         lr, #0
  00084	e3a0300c	 mov         r3, #0xC
  00088	e24b2028	 sub         r2, r11, #0x28
  0008c	e58de00c	 str         lr, [sp, #0xC]
  00090	e58de008	 str         lr, [sp, #8]
  00094	e58de004	 str         lr, [sp, #4]
  00098	e58de000	 str         lr, [sp]
  0009c	eb000000	 bl          DeviceIoControl
  000a0	e3500000	 cmp         r0, #0
  000a4	1a000000	 bne         |$LN1@DmaEnableI|

; 225  :             {
; 226  :             goto cleanUp;

  000a8	ea000007	 b           |$cleanUp$43814|
  000ac		 |$LN1@DmaEnableI|

; 227  :             }
; 228  :         rc = TRUE;

  000ac	e3a04001	 mov         r4, #1
  000b0	e50b4030	 str         r4, [r11, #-0x30]
  000b4		 |$LN16@DmaEnableI|

; 229  : 
; 230  :         }

  000b4	ea000004	 b           |$cleanUp$43814|
  000b8		 |$LN12@DmaEnableI|

; 232  :         {
; 233  :         RETAILMSG(TRUE, (L"ERROR! CEDDK: "
; 234  :             L"exception trying to enable dma interrupts\r\n"
; 235  :             ));

  000b8	e59f0030	 ldr         r0, [pc, #0x30]
  000bc	eb000000	 bl          NKDbgPrintfW
  000c0	e51b4030	 ldr         r4, [r11, #-0x30]
  000c4	ea000000	 b           |$cleanUp$43814|
  000c8		 |$LN23@DmaEnableI|

; 236  :         }
; 237  :     
; 238  : cleanUp:
; 239  :     return rc; 

  000c8	e51b402c	 ldr         r4, [r11, #-0x2C]
  000cc		 |$cleanUp$43814|

; 240  : }

  000cc	e1a00004	 mov         r0, r4
  000d0	e24bd01c	 sub         sp, r11, #0x1C
  000d4	e89d68f0	 ldmia       sp, {r4 - r7, r11, sp, lr}
  000d8	e12fff1e	 bx          lr

			 ENDP  ; |DmaEnableInterrupts|

  000dc		 |$LN11@DmaEnableI|
  000dc		 |$LN25@DmaEnableI|

; 231  :     __except (EXCEPTION_EXECUTE_HANDLER)

  000dc	e52de004	 str         lr, [sp, #-4]!
  000e0	e24dd010	 sub         sp, sp, #0x10
  000e4		 |$LN14@DmaEnableI|
  000e4		 |$LN28@DmaEnableI|
  000e4	e3a00001	 mov         r0, #1
  000e8		 |$LN13@DmaEnableI|
  000e8	e28dd010	 add         sp, sp, #0x10
  000ec	e49df004	 ldr         pc, [sp], #4
  000f0		 |$LN30@DmaEnableI|
  000f0		 |$LN31@DmaEnableI|
  000f0	00000000	 DCD         |??_C@_1HE@JBPHHPPH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@|
  000f4		 |$LN32@DmaEnableI|
  000f4	01da040c	 DCD         0x1da040c
  000f8		 |$LN33@DmaEnableI|
  000f8	43a608f0	 DCD         0x43a608f0
  000fc		 |$LN34@DmaEnableI|
  000fc	00000000	 DCD         |g_hDmaDrv|
  00100		 |$LN29@DmaEnableI|
  00100		 |$LN27@DmaEnableI|
	EXPORT	|DmaGetLogicalChannelId|
	EXPORT	|??_C@_1HG@KKAEFBLK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44070| DCD	|$LN26@DmaGetLogi|
	DCD	0xc0002704

  00000			 AREA	 |.pdata|, PDATA
|$T44072| DCD	|$LN13@DmaGetLogi|
	DCD	0x40000701

  00000			 AREA	 |.xdata|, DATA
|$T44068| DCD	0x1
	DCD	|$LN17@DmaGetLogi|
	DCD	|$LN18@DmaGetLogi|
	DCD	|$LN13@DmaGetLogi|
	DCD	|$LN14@DmaGetLogi|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@KKAEFBLK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "C", 0x0, "E", 0x0, "D", 0x0, "D", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "t"
	DCB	0x0, "r", 0x0, "y", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "m"
	DCB	0x0, "a", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "p", 0x0, "e"
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T44068|

  00008		 |DmaGetLogicalChannelId| PROC

; 250  : {

  00008		 |$LN26@DmaGetLogi|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5830	 stmdb       sp!, {r4, r5, r11, r12, lr}
  00010	e28db014	 add         r11, sp, #0x14
  00014	e24dd008	 sub         sp, sp, #8
  00018		 |$LN24@DmaGetLogi|
  00018	e1a05000	 mov         r5, r0

; 251  :     DWORD dwId = (DWORD) -1;
; 252  :     
; 253  :     // check if dma handle is valid
; 254  :     if (ValidateDmaDriver() == FALSE || hDmaChannel == NULL)

  0001c	e59f3098	 ldr         r3, [pc, #0x98]
  00020	e3e04000	 mvn         r4, #0
  00024	e50b401c	 str         r4, [r11, #-0x1C]
  00028	e5933000	 ldr         r3, [r3]
  0002c	e3530000	 cmp         r3, #0
  00030	1a000002	 bne         |$LN22@DmaGetLogi|
  00034	eb000000	 bl          LoadDmaDriver
  00038	e3500000	 cmp         r0, #0
  0003c	0a000014	 beq         |$cleanUp$43833|
  00040		 |$LN22@DmaGetLogi|
  00040	e3550000	 cmp         r5, #0
  00044	0a000012	 beq         |$cleanUp$43833|
  00048		 |$LN17@DmaGetLogi|

; 255  :         {
; 256  :         goto cleanUp;
; 257  :         }
; 258  : 
; 259  :     __try
; 260  :         {
; 261  :             {
; 262  :             CeddkDmaContext_t *pContext = (CeddkDmaContext_t*)hDmaChannel;
; 263  : 
; 264  :             if (pContext->cookie == DMA_HANDLE_CHANNEL_COOKIE)

  00048	e5952000	 ldr         r2, [r5]
  0004c	e59f3064	 ldr         r3, [pc, #0x64]
  00050	e1520003	 cmp         r2, r3

; 265  :                 {
; 266  :         dwId = pContext->context.index;

  00054	05954008	 ldreq       r4, [r5, #8]
  00058	050b401c	 streq       r4, [r11, #-0x1C]

; 267  :         }
; 268  :             }
; 269  :             if(dwId == -1)

  0005c	e3740001	 cmn         r4, #1

; 270  :                 {
; 271  :                 CeddkDmaDIChannelContext_t *pContext = (CeddkDmaDIChannelContext_t*)hDmaChannel;
; 272  :                 
; 273  :                 if(pContext->cookie == DMA_DEDICATED_CHANNEL_HANDLE_COOKIE)

  00060	059f304c	 ldreq       r3, [pc, #0x4C]
  00064	01520003	 cmpeq       r2, r3

; 274  :                 {
; 275  :                 dwId = pContext->index;

  00068	05954008	 ldreq       r4, [r5, #8]
  0006c	050b401c	 streq       r4, [r11, #-0x1C]

; 276  :                 }
; 277  :             }
; 278  :             if(dwId == -1)

  00070	e3740001	 cmn         r4, #1
  00074	1a000000	 bne         |$LN18@DmaGetLogi|

; 279  :             {
; 280  :             goto cleanUp;

  00078	ea000005	 b           |$cleanUp$43833|
  0007c		 |$LN18@DmaGetLogi|

; 281  :             }
; 282  :         }

  0007c	ea000004	 b           |$cleanUp$43833|
  00080		 |$LN14@DmaGetLogi|

; 284  :         {
; 285  :         RETAILMSG(TRUE, (L"ERROR! CEDDK: "
; 286  :             L"exception trying to enable dma repeat mode\r\n"
; 287  :             ));

  00080	e59f0028	 ldr         r0, [pc, #0x28]
  00084	eb000000	 bl          NKDbgPrintfW
  00088	e51b401c	 ldr         r4, [r11, #-0x1C]
  0008c	ea000000	 b           |$cleanUp$43833|
  00090		 |$LN23@DmaGetLogi|

; 288  :         }
; 289  :     
; 290  : cleanUp:
; 291  :     return dwId; 

  00090	e51b4018	 ldr         r4, [r11, #-0x18]
  00094		 |$cleanUp$43833|

; 292  : }

  00094	e1a00004	 mov         r0, r4
  00098	e24bd014	 sub         sp, r11, #0x14
  0009c	e89d6830	 ldmia       sp, {r4, r5, r11, sp, lr}
  000a0	e12fff1e	 bx          lr

			 ENDP  ; |DmaGetLogicalChannelId|

  000a4		 |$LN13@DmaGetLogi|
  000a4		 |$LN25@DmaGetLogi|

; 283  :     __except (EXCEPTION_EXECUTE_HANDLER)

  000a4	e52de004	 str         lr, [sp, #-4]!
  000a8		 |$LN16@DmaGetLogi|
  000a8		 |$LN28@DmaGetLogi|
  000a8	e3a00001	 mov         r0, #1
  000ac		 |$LN15@DmaGetLogi|
  000ac	e49df004	 ldr         pc, [sp], #4
  000b0		 |$LN30@DmaGetLogi|
  000b0		 |$LN31@DmaGetLogi|
  000b0	00000000	 DCD         |??_C@_1HG@KKAEFBLK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@|
  000b4		 |$LN32@DmaGetLogi|
  000b4	43a608f2	 DCD         0x43a608f2
  000b8		 |$LN33@DmaGetLogi|
  000b8	43a608f0	 DCD         0x43a608f0
  000bc		 |$LN34@DmaGetLogi|
  000bc	00000000	 DCD         |g_hDmaDrv|
  000c0		 |$LN29@DmaGetLogi|
  000c0		 |$LN27@DmaGetLogi|
	EXPORT	|DmaInterruptDone|
	EXPORT	|??_C@_1HM@LPPDCJDJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44107| DCD	|$LN24@DmaInterru|
	DCD	0xc0002e04

  00000			 AREA	 |.pdata|, PDATA
|$T44109| DCD	|$LN11@DmaInterru|
	DCD	0x40000902

  00000			 AREA	 |.xdata|, DATA
|$T44105| DCD	0x1
	DCD	|$LN15@DmaInterru|
	DCD	|$LN16@DmaInterru|
	DCD	|$LN11@DmaInterru|
	DCD	|$LN12@DmaInterru|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@LPPDCJDJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "C", 0x0, "E", 0x0, "D", 0x0, "D", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "t"
	DCB	0x0, "r", 0x0, "y", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "t", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T44105|

  00008		 |DmaInterruptDone| PROC

; 302  : {

  00008		 |$LN24@DmaInterru|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5870	 stmdb       sp!, {r4 - r6, r11, r12, lr}
  00010	e28db018	 add         r11, sp, #0x18
  00014	e24dd018	 sub         sp, sp, #0x18
  00018		 |$LN22@DmaInterru|
  00018	e1a05000	 mov         r5, r0

; 303  :     BOOL rc = FALSE;
; 304  :     CeddkDmaContext_t *pContext = (CeddkDmaContext_t*)hDmaChannel;
; 305  :     
; 306  :     // check if dma handle is valid
; 307  :     if (ValidateDmaDriver() == FALSE || hDmaChannel == NULL)

  0001c	e59f60bc	 ldr         r6, [pc, #0xBC]
  00020	e3a04000	 mov         r4, #0
  00024	e50b4020	 str         r4, [r11, #-0x20]
  00028	e5960000	 ldr         r0, [r6]
  0002c	e3500000	 cmp         r0, #0
  00030	1a000003	 bne         |$LN20@DmaInterru|
  00034	eb000000	 bl          LoadDmaDriver
  00038	e3500000	 cmp         r0, #0
  0003c	0a00001b	 beq         |$cleanUp$43854|
  00040	e5960000	 ldr         r0, [r6]
  00044		 |$LN20@DmaInterru|
  00044	e3550000	 cmp         r5, #0
  00048	0a000018	 beq         |$cleanUp$43854|
  0004c		 |$LN15@DmaInterru|

; 308  :         {
; 309  :         goto cleanUp;
; 310  :         }
; 311  : 
; 312  :     __try
; 313  :         {
; 314  :         if (pContext->cookie != DMA_HANDLE_CHANNEL_COOKIE)

  0004c	e5952000	 ldr         r2, [r5]
  00050	e59f3084	 ldr         r3, [pc, #0x84]
  00054	e1520003	 cmp         r2, r3
  00058	0a000000	 beq         |$LN2@DmaInterru|

; 315  :             {
; 316  :             goto cleanUp;

  0005c	ea000013	 b           |$cleanUp$43854|
  00060		 |$LN2@DmaInterru|

; 317  :             }
; 318  : 
; 319  :         if (!DeviceIoControl(g_hDmaDrv, IOCTL_DMA_INTERRUPTDONE, 
; 320  :             (VOID*)&pContext->context, sizeof(IOCTL_DMA_INTERRUPTDONE_IN), 
; 321  :             NULL, 0, NULL, NULL))

  00060	e59f1070	 ldr         r1, [pc, #0x70]
  00064	e3a0e000	 mov         lr, #0
  00068	e3a03010	 mov         r3, #0x10
  0006c	e2852008	 add         r2, r5, #8
  00070	e58de00c	 str         lr, [sp, #0xC]
  00074	e58de008	 str         lr, [sp, #8]
  00078	e58de004	 str         lr, [sp, #4]
  0007c	e58de000	 str         lr, [sp]
  00080	eb000000	 bl          DeviceIoControl
  00084	e3500000	 cmp         r0, #0
  00088	1a000000	 bne         |$LN1@DmaInterru|

; 322  :             {
; 323  :             goto cleanUp;

  0008c	ea000007	 b           |$cleanUp$43854|
  00090		 |$LN1@DmaInterru|

; 324  :             }
; 325  :         
; 326  :         rc = TRUE;

  00090	e3a04001	 mov         r4, #1
  00094	e50b4020	 str         r4, [r11, #-0x20]
  00098		 |$LN16@DmaInterru|

; 327  :         }

  00098	ea000004	 b           |$cleanUp$43854|
  0009c		 |$LN12@DmaInterru|

; 329  :         {
; 330  :         RETAILMSG(TRUE, (L"ERROR! CEDDK: "
; 331  :             L"exception trying to get last interrupt status\r\n"
; 332  :             ));

  0009c	e59f0030	 ldr         r0, [pc, #0x30]
  000a0	eb000000	 bl          NKDbgPrintfW
  000a4	e51b4020	 ldr         r4, [r11, #-0x20]
  000a8	ea000000	 b           |$cleanUp$43854|
  000ac		 |$LN21@DmaInterru|

; 333  :         }
; 334  :     
; 335  : cleanUp:
; 336  :     return rc; 

  000ac	e51b401c	 ldr         r4, [r11, #-0x1C]
  000b0		 |$cleanUp$43854|

; 337  : }

  000b0	e1a00004	 mov         r0, r4
  000b4	e24bd018	 sub         sp, r11, #0x18
  000b8	e89d6870	 ldmia       sp, {r4 - r6, r11, sp, lr}
  000bc	e12fff1e	 bx          lr

			 ENDP  ; |DmaInterruptDone|

  000c0		 |$LN11@DmaInterru|
  000c0		 |$LN23@DmaInterru|

; 328  :     __except (EXCEPTION_EXECUTE_HANDLER)

  000c0	e52de004	 str         lr, [sp, #-4]!
  000c4	e24dd010	 sub         sp, sp, #0x10
  000c8		 |$LN14@DmaInterru|
  000c8		 |$LN26@DmaInterru|
  000c8	e3a00001	 mov         r0, #1
  000cc		 |$LN13@DmaInterru|
  000cc	e28dd010	 add         sp, sp, #0x10
  000d0	e49df004	 ldr         pc, [sp], #4
  000d4		 |$LN28@DmaInterru|
  000d4		 |$LN29@DmaInterru|
  000d4	00000000	 DCD         |??_C@_1HM@LPPDCJDJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@|
  000d8		 |$LN30@DmaInterru|
  000d8	01da0414	 DCD         0x1da0414
  000dc		 |$LN31@DmaInterru|
  000dc	43a608f0	 DCD         0x43a608f0
  000e0		 |$LN32@DmaInterru|
  000e0	00000000	 DCD         |g_hDmaDrv|
  000e4		 |$LN27@DmaInterru|
  000e4		 |$LN25@DmaInterru|
	EXPORT	|DmaGetLogicalChannel|
	EXPORT	|??_C@_1GM@DOJMJKAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44145| DCD	|$LN27@DmaGetLogi@2|
	DCD	0xc0002804

  00000			 AREA	 |.pdata|, PDATA
|$T44147| DCD	|$LN13@DmaGetLogi@2|
	DCD	0x40000701

  00000			 AREA	 |.xdata|, DATA
|$T44143| DCD	0x1
	DCD	|$LN17@DmaGetLogi@2|
	DCD	|$LN18@DmaGetLogi@2|
	DCD	|$LN13@DmaGetLogi@2|
	DCD	|$LN14@DmaGetLogi@2|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@DOJMJKAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "C", 0x0, "E", 0x0, "D", 0x0, "D", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "t"
	DCB	0x0, "r", 0x0, "y", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "d", 0x0, "m", 0x0, "a", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T44143|

  00008		 |DmaGetLogicalChannel| PROC

; 347  : {

  00008		 |$LN27@DmaGetLogi@2|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5830	 stmdb       sp!, {r4, r5, r11, r12, lr}
  00010	e28db014	 add         r11, sp, #0x14
  00014	e24dd008	 sub         sp, sp, #8
  00018		 |$LN25@DmaGetLogi@2|
  00018	e1a05000	 mov         r5, r0

; 348  :     OMAP_DMA_LC_REGS* pChannel = NULL;
; 349  :     
; 350  :     // check if dma handle is valid
; 351  :     if (ValidateDmaDriver() == FALSE || hDmaChannel == NULL)

  0001c	e59f309c	 ldr         r3, [pc, #0x9C]
  00020	e3a04000	 mov         r4, #0
  00024	e50b401c	 str         r4, [r11, #-0x1C]
  00028	e5933000	 ldr         r3, [r3]
  0002c	e3530000	 cmp         r3, #0
  00030	1a000002	 bne         |$LN22@DmaGetLogi@2|
  00034	eb000000	 bl          LoadDmaDriver
  00038	e3500000	 cmp         r0, #0
  0003c	0a000015	 beq         |$cleanUp$43873|
  00040		 |$LN22@DmaGetLogi@2|
  00040	e3550000	 cmp         r5, #0
  00044	0a000013	 beq         |$cleanUp$43873|
  00048		 |$LN17@DmaGetLogi@2|

; 352  :         {
; 353  :         goto cleanUp;
; 354  :         }
; 355  : 
; 356  :     __try
; 357  :         {
; 358  :             {
; 359  :             CeddkDmaContext_t *pContext = (CeddkDmaContext_t*)hDmaChannel;
; 360  : 
; 361  :             if (pContext->cookie == DMA_HANDLE_CHANNEL_COOKIE)

  00048	e5952000	 ldr         r2, [r5]
  0004c	e59f3068	 ldr         r3, [pc, #0x68]
  00050	e1520003	 cmp         r2, r3

; 362  :                 {
; 363  :                 pChannel = pContext->pDmaChannel;

  00054	05954004	 ldreq       r4, [r5, #4]
  00058	050b401c	 streq       r4, [r11, #-0x1C]

; 364  :                 }
; 365  :             }
; 366  :             if(pChannel == NULL)

  0005c	e3540000	 cmp         r4, #0
  00060	1a000006	 bne         |$LN18@DmaGetLogi@2|

; 367  :                 {
; 368  :                 CeddkDmaDIChannelContext_t *pContext = (CeddkDmaDIChannelContext_t*)hDmaChannel;
; 369  : 
; 370  :                 if(pContext->cookie == DMA_DEDICATED_CHANNEL_HANDLE_COOKIE)

  00064	e59f304c	 ldr         r3, [pc, #0x4C]
  00068	e1520003	 cmp         r2, r3

; 371  :                 {
; 372  :                 pChannel = pContext->pDmaChannel;

  0006c	05954004	 ldreq       r4, [r5, #4]
  00070	050b401c	 streq       r4, [r11, #-0x1C]

; 373  :         }
; 374  :             }
; 375  :             if(pChannel == NULL)

  00074	e3540000	 cmp         r4, #0
  00078	1a000000	 bne         |$LN18@DmaGetLogi@2|

; 376  :             {
; 377  :             goto cleanUp;

  0007c	ea000005	 b           |$cleanUp$43873|
  00080		 |$LN18@DmaGetLogi@2|

; 378  :             }
; 379  :         }

  00080	ea000004	 b           |$cleanUp$43873|
  00084		 |$LN14@DmaGetLogi@2|

; 381  :         {
; 382  :         RETAILMSG(TRUE, (L"ERROR! CEDDK: "
; 383  :             L"exception trying to get dma registers\r\n"
; 384  :             ));

  00084	e59f0028	 ldr         r0, [pc, #0x28]
  00088	eb000000	 bl          NKDbgPrintfW
  0008c	e51b401c	 ldr         r4, [r11, #-0x1C]
  00090	ea000000	 b           |$cleanUp$43873|
  00094		 |$LN23@DmaGetLogi@2|

; 385  :         }
; 386  :     
; 387  : cleanUp:
; 388  :     return (void*)pChannel;

  00094	e51b4018	 ldr         r4, [r11, #-0x18]
  00098		 |$cleanUp$43873|

; 389  : }

  00098	e1a00004	 mov         r0, r4
  0009c	e24bd014	 sub         sp, r11, #0x14
  000a0	e89d6830	 ldmia       sp, {r4, r5, r11, sp, lr}
  000a4	e12fff1e	 bx          lr

			 ENDP  ; |DmaGetLogicalChannel|

  000a8		 |$LN13@DmaGetLogi@2|
  000a8		 |$LN26@DmaGetLogi@2|

; 380  :     __except (EXCEPTION_EXECUTE_HANDLER)

  000a8	e52de004	 str         lr, [sp, #-4]!
  000ac		 |$LN16@DmaGetLogi@2|
  000ac		 |$LN29@DmaGetLogi@2|
  000ac	e3a00001	 mov         r0, #1
  000b0		 |$LN15@DmaGetLogi@2|
  000b0	e49df004	 ldr         pc, [sp], #4
  000b4		 |$LN31@DmaGetLogi@2|
  000b4		 |$LN32@DmaGetLogi@2|
  000b4	00000000	 DCD         |??_C@_1GM@DOJMJKAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAr?$AAy?$AAi?$AAn?$AAg?$AA?5?$AAt@|
  000b8		 |$LN33@DmaGetLogi@2|
  000b8	43a608f2	 DCD         0x43a608f2
  000bc		 |$LN34@DmaGetLogi@2|
  000bc	43a608f0	 DCD         0x43a608f0
  000c0		 |$LN35@DmaGetLogi@2|
  000c0	00000000	 DCD         |g_hDmaDrv|
  000c4		 |$LN30@DmaGetLogi@2|
  000c4		 |$LN28@DmaGetLogi@2|
	EXPORT	|DmaDisableStandby|
	EXPORT	|??_C@_1FI@DFDPOLAA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAD?$AAm?$AAa?$AAD?$AAi?$AAs?$AAa?$AAb@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44186| DCD	|$LN30@DmaDisable|
	DCD	0xc0003d04

  00000			 AREA	 |.pdata|, PDATA
|$T44188| DCD	|$LN16@DmaDisable|
	DCD	0x40000a02

  00000			 AREA	 |.xdata|, DATA
|$T44184| DCD	0x1
	DCD	|$LN20@DmaDisable|
	DCD	|$LN21@DmaDisable|
	DCD	|$LN16@DmaDisable|
	DCD	|$LN17@DmaDisable|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@DFDPOLAA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAD?$AAm?$AAa?$AAD?$AAi?$AAs?$AAa?$AAb@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "C", 0x0, "E", 0x0, "D", 0x0, "D", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "b", 0x0, "y", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T44184|

  00008		 |DmaDisableStandby| PROC

; 399  : {

  00008		 |$LN30@DmaDisable|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d59f0	 stmdb       sp!, {r4 - r8, r11, r12, lr}
  00010	e28db020	 add         r11, sp, #0x20
  00014	e24dd024	 sub         sp, sp, #0x24
  00018		 |$LN28@DmaDisable|
  00018	e1a08001	 mov         r8, r1
  0001c	e1a05000	 mov         r5, r0

; 400  :     BOOL bDelicatedChannel = FALSE;
; 401  :     BOOL rc = FALSE;
; 402  :     IOCTL_DMA_DISABLESTANDBY_IN IoctlInput;
; 403  :     CeddkDmaContext_t *pContext = (CeddkDmaContext_t*)hDmaChannel;
; 404  :     CeddkDmaDIChannelContext_t  *pContext1= NULL;
; 405  :     
; 406  :     // check if dma handle is valid
; 407  :     if (ValidateDmaDriver() == FALSE || hDmaChannel == NULL)

  00020	e59f70f8	 ldr         r7, [pc, #0xF8]
  00024	e3a04000	 mov         r4, #0
  00028	e50b4034	 str         r4, [r11, #-0x34]
  0002c	e5970000	 ldr         r0, [r7]
  00030	e3a06000	 mov         r6, #0
  00034	e3500000	 cmp         r0, #0
  00038	1a000003	 bne         |$LN26@DmaDisable|
  0003c	eb000000	 bl          LoadDmaDriver
  00040	e3500000	 cmp         r0, #0
  00044	0a000028	 beq         |$cleanUp$43903|
  00048	e5970000	 ldr         r0, [r7]
  0004c		 |$LN26@DmaDisable|
  0004c	e3550000	 cmp         r5, #0
  00050	0a000025	 beq         |$cleanUp$43903|
  00054		 |$LN20@DmaDisable|

; 408  :         {
; 409  :         goto cleanUp;
; 410  :         }
; 411  : 
; 412  :     __try
; 413  :         {
; 414  :         if (pContext->cookie != DMA_HANDLE_CHANNEL_COOKIE)

  00054	e5952000	 ldr         r2, [r5]
  00058	e59f30bc	 ldr         r3, [pc, #0xBC]
  0005c	e1520003	 cmp         r2, r3
  00060	0a000006	 beq         |$LN7@DmaDisable|

; 415  :             {
; 416  :             pContext1 = (CeddkDmaDIChannelContext_t  *) hDmaChannel;
; 417  :             if (pContext1->cookie == DMA_DEDICATED_CHANNEL_HANDLE_COOKIE)

  00064	e59f30ac	 ldr         r3, [pc, #0xAC]
  00068	e1a06005	 mov         r6, r5
  0006c	e1520003	 cmp         r2, r3
  00070	0a000000	 beq         |$LN25@DmaDisable|

; 420  :                 }
; 421  :                 else
; 422  :                 {
; 423  :                 goto cleanUp;

  00074	ea00001c	 b           |$cleanUp$43903|
  00078		 |$LN25@DmaDisable|

; 418  :                 {
; 419  :                 bDelicatedChannel = TRUE;

  00078	e3a03001	 mov         r3, #1

; 424  :                 }
; 425  :             }
; 426  :             else

  0007c	ea000000	 b           |$LN4@DmaDisable|
  00080		 |$LN7@DmaDisable|

; 427  :             {
; 428  :                 bDelicatedChannel = FALSE;

  00080	e3a03000	 mov         r3, #0
  00084		 |$LN4@DmaDisable|

; 429  :             }
; 430  : 
; 431  :         IoctlInput.bNoStandby = noStandby;

  00084	e50b8028	 str         r8, [r11, #-0x28]

; 432  :         IoctlInput.bDelicatedChannel = bDelicatedChannel;

  00088	e50b3024	 str         r3, [r11, #-0x24]

; 433  : 
; 434  :         if (bDelicatedChannel)

  0008c	e3530000	 cmp         r3, #0

; 435  :             {
; 436  :             IoctlInput.pContext = (void *) pContext1;

  00090	150b602c	 strne       r6, [r11, #-0x2C]

; 437  :             }
; 438  :             else
; 439  :             {
; 440  :             IoctlInput.pContext = (void *) &pContext->context;

  00094	02853008	 addeq       r3, r5, #8
  00098	050b302c	 streq       r3, [r11, #-0x2C]

; 441  :             }
; 442  :         if (!DeviceIoControl(g_hDmaDrv, IOCTL_DMA_DISABLESTANDBY, 
; 443  :             (VOID*)&IoctlInput, sizeof(IOCTL_DMA_DISABLESTANDBY_IN),
; 444  :             NULL, 0, NULL, NULL))

  0009c	e59f1070	 ldr         r1, [pc, #0x70]
  000a0	e3a0e000	 mov         lr, #0
  000a4	e3a0300c	 mov         r3, #0xC
  000a8	e24b202c	 sub         r2, r11, #0x2C
  000ac	e58de00c	 str         lr, [sp, #0xC]
  000b0	e58de008	 str         lr, [sp, #8]
  000b4	e58de004	 str         lr, [sp, #4]
  000b8	e58de000	 str         lr, [sp]
  000bc	eb000000	 bl          DeviceIoControl
  000c0	e3500000	 cmp         r0, #0
  000c4	1a000000	 bne         |$LN1@DmaDisable|

; 445  :             {
; 446  :             goto cleanUp;

  000c8	ea000007	 b           |$cleanUp$43903|
  000cc		 |$LN1@DmaDisable|

; 447  :             }
; 448  : 
; 449  :         rc = TRUE;

  000cc	e3a04001	 mov         r4, #1
  000d0	e50b4034	 str         r4, [r11, #-0x34]
  000d4		 |$LN21@DmaDisable|

; 450  :         }

  000d4	ea000004	 b           |$cleanUp$43903|
  000d8		 |$LN17@DmaDisable|

; 452  :         {
; 453  :         RETAILMSG(TRUE, (L"ERROR! CEDDK: "
; 454  :             L"exception DmaDisableStandby\r\n"
; 455  :             ));

  000d8	e59f0030	 ldr         r0, [pc, #0x30]
  000dc	eb000000	 bl          NKDbgPrintfW
  000e0	e51b4034	 ldr         r4, [r11, #-0x34]
  000e4	ea000000	 b           |$cleanUp$43903|
  000e8		 |$LN27@DmaDisable|

; 456  :         }
; 457  : 
; 458  : cleanUp:
; 459  :     return rc; 

  000e8	e51b4030	 ldr         r4, [r11, #-0x30]
  000ec		 |$cleanUp$43903|

; 460  : }

  000ec	e1a00004	 mov         r0, r4
  000f0	e24bd020	 sub         sp, r11, #0x20
  000f4	e89d69f0	 ldmia       sp, {r4 - r8, r11, sp, lr}
  000f8	e12fff1e	 bx          lr

			 ENDP  ; |DmaDisableStandby|

  000fc		 |$LN16@DmaDisable|
  000fc		 |$LN29@DmaDisable|

; 451  :     __except (EXCEPTION_EXECUTE_HANDLER)

  000fc	e52de004	 str         lr, [sp, #-4]!
  00100	e24dd010	 sub         sp, sp, #0x10
  00104		 |$LN19@DmaDisable|
  00104		 |$LN32@DmaDisable|
  00104	e3a00001	 mov         r0, #1
  00108		 |$LN18@DmaDisable|
  00108	e28dd010	 add         sp, sp, #0x10
  0010c	e49df004	 ldr         pc, [sp], #4
  00110		 |$LN34@DmaDisable|
  00110		 |$LN35@DmaDisable|
  00110	00000000	 DCD         |??_C@_1FI@DFDPOLAA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAD?$AAm?$AAa?$AAD?$AAi?$AAs?$AAa?$AAb@|
  00114		 |$LN36@DmaDisable|
  00114	01da0418	 DCD         0x1da0418
  00118		 |$LN37@DmaDisable|
  00118	43a608f2	 DCD         0x43a608f2
  0011c		 |$LN38@DmaDisable|
  0011c	43a608f0	 DCD         0x43a608f0
  00120		 |$LN39@DmaDisable|
  00120	00000000	 DCD         |g_hDmaDrv|
  00124		 |$LN33@DmaDisable|
  00124		 |$LN31@DmaDisable|
	EXPORT	|DmaFreeChannel|
	EXPORT	|??_C@_1FM@OLMMJHOB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?8?$AAi?$AAn?$AAg@| [ DATA ] ; `string'
	IMPORT	|LocalFree|
	IMPORT	|MmUnmapIoSpace|

  00000			 AREA	 |.pdata|, PDATA
|$T44224| DCD	|$LN25@DmaFreeCha|
	DCD	0xc0004004

  00000			 AREA	 |.pdata|, PDATA
|$T44226| DCD	|$LN12@DmaFreeCha|
	DCD	0x40000902

  00000			 AREA	 |.xdata|, DATA
|$T44222| DCD	0x1
	DCD	|$LN16@DmaFreeCha|
	DCD	|$LN17@DmaFreeCha|
	DCD	|$LN12@DmaFreeCha|
	DCD	|$LN13@DmaFreeCha|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@OLMMJHOB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?8?$AAi?$AAn?$AAg@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "C", 0x0, "E", 0x0, "D", 0x0, "D", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, "'", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "d", 0x0, "m", 0x0, "a", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T44222|

  00008		 |DmaFreeChannel| PROC

; 136  : {

  00008		 |$LN25@DmaFreeCha|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5870	 stmdb       sp!, {r4 - r6, r11, r12, lr}
  00010	e28db018	 add         r11, sp, #0x18
  00014	e24dd018	 sub         sp, sp, #0x18
  00018		 |$LN23@DmaFreeCha|
  00018	e1a04000	 mov         r4, r0

; 137  :     BOOL rc = FALSE;
; 138  :     CeddkDmaContext_t *pContext = (CeddkDmaContext_t*)hDmaChannel;
; 139  :     
; 140  :     // check if dma handle is valid
; 141  :     if (ValidateDmaDriver() == FALSE || hDmaChannel == NULL)

  0001c	e59f6104	 ldr         r6, [pc, #0x104]
  00020	e3a05000	 mov         r5, #0
  00024	e50b5020	 str         r5, [r11, #-0x20]
  00028	e5963000	 ldr         r3, [r6]
  0002c	e3530000	 cmp         r3, #0
  00030	1a000002	 bne         |$LN21@DmaFreeCha|
  00034	eb000000	 bl          LoadDmaDriver
  00038	e3500000	 cmp         r0, #0
  0003c	0a00002d	 beq         |$cleanUp$43784|
  00040		 |$LN21@DmaFreeCha|
  00040	e3540000	 cmp         r4, #0
  00044	0a00002b	 beq         |$cleanUp$43784|
  00048		 |$LN16@DmaFreeCha|

; 142  :         {
; 143  :         goto cleanUp;
; 144  :         }
; 145  : 
; 146  :     __try
; 147  :         {
; 148  :         if (pContext->cookie != DMA_HANDLE_CHANNEL_COOKIE)

  00048	e5942000	 ldr         r2, [r4]
  0004c	e59f30d0	 ldr         r3, [pc, #0xD0]
  00050	e1520003	 cmp         r2, r3
  00054	0a000000	 beq         |$LN3@DmaFreeCha|

; 149  :             {
; 150  :             goto cleanUp;

  00058	ea000026	 b           |$cleanUp$43784|
  0005c		 |$LN3@DmaFreeCha|

; 151  :             }
; 152  :         
; 153  :         // unmap dma registers
; 154  :         if (pContext->pDmaChannel != NULL)

  0005c	e5943004	 ldr         r3, [r4, #4]
  00060	e3530000	 cmp         r3, #0
  00064	0a000019	 beq         |$LN2@DmaFreeCha|

; 155  :             {
; 156  :             // stop dma, break all links, and reset status
; 157  :             WRITE_REGISTER_ULONG(&pContext->pDmaChannel->CCR, 0x00000000);

  00068	e3a05000	 mov         r5, #0
  0006c	e5835000	 str         r5, [r3]

; 158  :             WRITE_REGISTER_ULONG(&pContext->pDmaChannel->CSR, 0x00000FFE);

  00070	e5942004	 ldr         r2, [r4, #4]
  00074	e3a03c0f	 mov         r3, #0xF, 24
  00078	e38330fe	 orr         r3, r3, #0xFE
  0007c	e582300c	 str         r3, [r2, #0xC]

; 159  :             WRITE_REGISTER_ULONG(&pContext->pDmaChannel->CLNK_CTRL, 0x00000000);

  00080	e5943004	 ldr         r3, [r4, #4]

; 160  : 
; 161  :             // unregister for all interrupts
; 162  :             DmaEnableInterrupts(hDmaChannel, NULL);

  00084	e3a01000	 mov         r1, #0
  00088	e1a00004	 mov         r0, r4
  0008c	e5835004	 str         r5, [r3, #4]
  00090	eb000000	 bl          DmaEnableInterrupts

; 163  : 
; 164  :             // release reserved dma channel
; 165  :             if (pContext->context.channelAddress != 0)

  00094	e5943010	 ldr         r3, [r4, #0x10]
  00098	e3530000	 cmp         r3, #0
  0009c	0a000008	 beq         |$LN1@DmaFreeCha|

; 166  :                 {
; 167  :                 DeviceIoControl(g_hDmaDrv, IOCTL_DMA_RELEASE_CHANNEL, 
; 168  :                     (VOID*)&pContext->context, sizeof(DmaChannelContext_t), NULL, 
; 169  :                     0, NULL, NULL);

  000a0	e59f1078	 ldr         r1, [pc, #0x78]
  000a4	e5960000	 ldr         r0, [r6]
  000a8	e3a03010	 mov         r3, #0x10
  000ac	e2842008	 add         r2, r4, #8
  000b0	e58d500c	 str         r5, [sp, #0xC]
  000b4	e58d5008	 str         r5, [sp, #8]
  000b8	e58d5004	 str         r5, [sp, #4]
  000bc	e58d5000	 str         r5, [sp]
  000c0	eb000000	 bl          DeviceIoControl
  000c4		 |$LN1@DmaFreeCha|

; 170  :                 }
; 171  : 
; 172  :             MmUnmapIoSpace((void*)pContext->pDmaChannel, 
; 173  :                 pContext->context.registerSize
; 174  :                 );

  000c4	e5941014	 ldr         r1, [r4, #0x14]
  000c8	e5940004	 ldr         r0, [r4, #4]
  000cc	eb000000	 bl          MmUnmapIoSpace
  000d0		 |$LN2@DmaFreeCha|

; 175  :             }
; 176  : 
; 177  :         LocalFree(pContext);

  000d0	e1a00004	 mov         r0, r4
  000d4	eb000000	 bl          LocalFree

; 178  :         rc = TRUE;

  000d8	e3a05001	 mov         r5, #1
  000dc	e50b5020	 str         r5, [r11, #-0x20]
  000e0		 |$LN17@DmaFreeCha|

; 179  :         }

  000e0	ea000004	 b           |$cleanUp$43784|
  000e4		 |$LN13@DmaFreeCha|

; 181  :         {
; 182  :         RETAILMSG(TRUE, (L"ERROR! CEDDK: "
; 183  :             L"exception free'ing dma handle\r\n"
; 184  :             ));

  000e4	e59f0030	 ldr         r0, [pc, #0x30]
  000e8	eb000000	 bl          NKDbgPrintfW
  000ec	e51b5020	 ldr         r5, [r11, #-0x20]
  000f0	ea000000	 b           |$cleanUp$43784|
  000f4		 |$LN22@DmaFreeCha|

; 185  :         }
; 186  : 
; 187  : cleanUp:
; 188  :     return rc; 

  000f4	e51b501c	 ldr         r5, [r11, #-0x1C]
  000f8		 |$cleanUp$43784|

; 189  : }

  000f8	e1a00005	 mov         r0, r5
  000fc	e24bd018	 sub         sp, r11, #0x18
  00100	e89d6870	 ldmia       sp, {r4 - r6, r11, sp, lr}
  00104	e12fff1e	 bx          lr

			 ENDP  ; |DmaFreeChannel|

  00108		 |$LN12@DmaFreeCha|
  00108		 |$LN24@DmaFreeCha|

; 180  :     __except (EXCEPTION_EXECUTE_HANDLER)

  00108	e52de004	 str         lr, [sp, #-4]!
  0010c	e24dd010	 sub         sp, sp, #0x10
  00110		 |$LN15@DmaFreeCha|
  00110		 |$LN27@DmaFreeCha|
  00110	e3a00001	 mov         r0, #1
  00114		 |$LN14@DmaFreeCha|
  00114	e28dd010	 add         sp, sp, #0x10
  00118	e49df004	 ldr         pc, [sp], #4
  0011c		 |$LN29@DmaFreeCha|
  0011c		 |$LN30@DmaFreeCha|
  0011c	00000000	 DCD         |??_C@_1FM@OLMMJHOB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?8?$AAi?$AAn?$AAg@|
  00120		 |$LN31@DmaFreeCha|
  00120	01da0408	 DCD         0x1da0408
  00124		 |$LN32@DmaFreeCha|
  00124	43a608f0	 DCD         0x43a608f0
  00128		 |$LN33@DmaFreeCha|
  00128	00000000	 DCD         |g_hDmaDrv|
  0012c		 |$LN28@DmaFreeCha|
  0012c		 |$LN26@DmaFreeCha|
	EXPORT	|DmaAllocateChannel|
	IMPORT	|MmMapIoSpace|
	IMPORT	|LocalAlloc|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T44252| DCD	|$LN14@DmaAllocat|
	DCD	0x40003f04
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaAllocateChannel| PROC

; 69   : {

  00000		 |$LN14@DmaAllocat|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5030	 stmdb       sp!, {r4, r5, r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M44249|

; 70   :     BOOL rc = FALSE;
; 71   :     PHYSICAL_ADDRESS pa;
; 72   :     CeddkDmaContext_t *pContext = NULL;
; 73   :     
; 74   :     // check if dma handle is valid
; 75   :     if (ValidateDmaDriver() == FALSE)

  00010	e59f50e0	 ldr         r5, [pc, #0xE0]
  00014	e3a04000	 mov         r4, #0
  00018	e5953000	 ldr         r3, [r5]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000002	 bne         |$LN10@DmaAllocat|
  00024	eb000000	 bl          LoadDmaDriver
  00028	e3500000	 cmp         r0, #0
  0002c	0a000025	 beq         |$LN1@DmaAllocat|
  00030		 |$LN10@DmaAllocat|

; 76   :         {
; 77   :         goto cleanUp;
; 78   :         }
; 79   : 
; 80   :     // allocate handle for dma
; 81   :     pContext = (CeddkDmaContext_t*)LocalAlloc(LPTR, sizeof(CeddkDmaContext_t));

  00030	e3a01018	 mov         r1, #0x18
  00034	e3a00040	 mov         r0, #0x40
  00038	eb000000	 bl          LocalAlloc
  0003c	e1b04000	 movs        r4, r0

; 82   :     if (pContext == NULL)

  00040	0a000020	 beq         |$LN1@DmaAllocat|

; 83   :         {
; 84   :         goto cleanUp;
; 85   :         }
; 86   : 
; 87   :     memset(pContext, 0, sizeof(CeddkDmaContext_t));

  00044	e3a02018	 mov         r2, #0x18
  00048	e3a01000	 mov         r1, #0
  0004c	e1a00004	 mov         r0, r4
  00050	eb000000	 bl          memset

; 88   :     pContext->cookie = DMA_HANDLE_CHANNEL_COOKIE;

  00054	e59f3098	 ldr         r3, [pc, #0x98]

; 89   :     if (!DeviceIoControl(
; 90   :             g_hDmaDrv, IOCTL_DMA_RESERVE_CHANNEL, (VOID*)&dmaType,
; 91   :             sizeof(IOCTL_DMA_RESERVE_IN), &pContext->context, 
; 92   :             sizeof(IOCTL_DMA_RESERVE_OUT), NULL, NULL))

  00058	e1a02004	 mov         r2, r4
  0005c	e59f108c	 ldr         r1, [pc, #0x8C]
  00060	e4823008	 str         r3, [r2], #8
  00064	e5950000	 ldr         r0, [r5]
  00068	e3a0e010	 mov         lr, #0x10
  0006c	e58d2000	 str         r2, [sp]
  00070	e3a05000	 mov         r5, #0
  00074	e28d2020	 add         r2, sp, #0x20
  00078	e3a03004	 mov         r3, #4
  0007c	e58d500c	 str         r5, [sp, #0xC]
  00080	e58d5008	 str         r5, [sp, #8]
  00084	e58de004	 str         lr, [sp, #4]
  00088	eb000000	 bl          DeviceIoControl
  0008c	e3500000	 cmp         r0, #0
  00090	0a000009	 beq         |$LN11@DmaAllocat|

; 93   :         {
; 94   :         goto cleanUp;
; 95   :         }
; 96   : 
; 97   :     // map memory to register
; 98   :     pa.HighPart = 0;
; 99   :     pa.LowPart = pContext->context.channelAddress;

  00094	e5940010	 ldr         r0, [r4, #0x10]

; 100  :     pContext->pDmaChannel = (OMAP_DMA_LC_REGS*)MmMapIoSpace(pa, 
; 101  :                                                 pContext->context.registerSize, 
; 102  :                                                 FALSE
; 103  :                                                 );

  00098	e5942014	 ldr         r2, [r4, #0x14]
  0009c	e3a01000	 mov         r1, #0
  000a0	e3a03000	 mov         r3, #0
  000a4	eb000000	 bl          MmMapIoSpace
  000a8	e3500000	 cmp         r0, #0
  000ac	e5840004	 str         r0, [r4, #4]

; 104  : 
; 105  :     if (pContext->pDmaChannel == NULL)

  000b0	1a000008	 bne         |$LN2@DmaAllocat|

; 106  :         {
; 107  :         DmaFreeChannel(pContext);

  000b4	e1a00004	 mov         r0, r4
  000b8	eb000000	 bl          DmaFreeChannel
  000bc		 |$LN11@DmaAllocat|

; 120  :         {
; 121  :         LocalFree(pContext);

  000bc	e1a00004	 mov         r0, r4
  000c0	eb000000	 bl          LocalFree

; 122  :         pContext = NULL;

  000c4	e3a04000	 mov         r4, #0
  000c8		 |$LN1@DmaAllocat|

; 123  :         }
; 124  :     
; 125  :     return pContext;    
; 126  : }

  000c8	e1a00004	 mov         r0, r4
  000cc	e28dd010	 add         sp, sp, #0x10
  000d0	e89d6030	 ldmia       sp, {r4, r5, sp, lr}
  000d4	e12fff1e	 bx          lr
  000d8		 |$LN2@DmaAllocat|

; 108  :         goto cleanUp;

  000d8	e3a03c0f	 mov         r3, #0xF, 24

; 109  :         }
; 110  : 
; 111  :     // clear status mask
; 112  :     WRITE_REGISTER_ULONG(&pContext->pDmaChannel->CSR, 0x00000FFE);

  000dc	e38330fe	 orr         r3, r3, #0xFE
  000e0	e580300c	 str         r3, [r0, #0xC]

; 113  :     WRITE_REGISTER_ULONG(&pContext->pDmaChannel->CLNK_CTRL, 0x00000000);

  000e4	e5943004	 ldr         r3, [r4, #4]
  000e8		 |$cleanUp$43754|
  000e8	e5835004	 str         r5, [r3, #4]

; 114  : 
; 115  :     rc = TRUE;
; 116  : 
; 117  : cleanUp:
; 118  :     // request dma channel
; 119  :     if (rc == FALSE && pContext != NULL)

  000ec	eafffff5	 b           |$LN1@DmaAllocat|
  000f0		 |$LN15@DmaAllocat|
  000f0		 |$LN16@DmaAllocat|
  000f0	01da0404	 DCD         0x1da0404
  000f4		 |$LN17@DmaAllocat|
  000f4	43a608f0	 DCD         0x43a608f0
  000f8		 |$LN18@DmaAllocat|
  000f8	00000000	 DCD         |g_hDmaDrv|
  000fc		 |$M44250|

			 ENDP  ; |DmaAllocateChannel|

	END
