; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\CEDDK\DMA\dma_dedicated.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
|?dwDmaStartIrq@?1??DmaDiAllocateInterrupt@@9@9| DCD 0xffffffff ; `DmaDiAllocateInterrupt'::`2'::dwDmaStartIrq

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1JK@NPBFIFGL@?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@MBKONHJG@?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAM?$AAA?$AA_@| [ DATA ] ; `string'
	IMPORT	|LocalFree|
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|KernelIoControl|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|DeviceIoControl|
	IMPORT	|g_hDmaDrv|
	IMPORT	|InterruptDisable|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\ceddk\dma\dma_dedicated.c

  00000			 AREA	 |.pdata|, PDATA
|$T44318| DCD	|$LN13@DmaDealloc|
	DCD	0x40004702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JK@NPBFIFGL@?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "e", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "H", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "R", 0x0, "E", 0x0, "L", 0x0, "E", 0x0, "A"
	DCB	0x0, "S", 0x0, "E", 0x0, "_", 0x0, "S", 0x0, "Y", 0x0, "S"
	DCB	0x0, "I", 0x0, "N", 0x0, "T", 0x0, "R", 0x0, " ", 0x0, "("
	DCB	0x0, "S", 0x0, "y", 0x0, "s", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "N", 0x0, "u", 0x0, "m", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "C", 0x0, "E"
	DCB	0x0, "D", 0x0, "D", 0x0, "K", 0x0, "\\", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "d", 0x0, "m"
	DCB	0x0, "a", 0x0, "_", 0x0, "d", 0x0, "e", 0x0, "d", 0x0, "i"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, "c", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@MBKONHJG@?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAM?$AAA?$AA_@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "e", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, "_", 0x0, "R", 0x0, "E", 0x0, "L", 0x0, "E", 0x0, "A"
	DCB	0x0, "S", 0x0, "E", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "D"
	DCB	0x0, "I", 0x0, "C", 0x0, "A", 0x0, "T", 0x0, "E", 0x0, "D"
	DCB	0x0, "_", 0x0, "I", 0x0, "N", 0x0, "T", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "U", 0x0, "P", 0x0, "T", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaDeallocateContext| PROC

; 257  : {

  00000		 |$LN13@DmaDealloc|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M44315|
  00008	e1b04000	 movs        r4, r0

; 258  :     if(pContext)

  0000c	0a000038	 beq         |$LN8@DmaDealloc|

; 259  :         {
; 260  :         //free DMA Driver resources for DMA interrupt
; 261  :          if(pContext->SysInterruptNum)

  00010	e594300c	 ldr         r3, [r4, #0xC]
  00014	e3530000	 cmp         r3, #0

; 262  :             {
; 263  :             InterruptDisable(pContext->SysInterruptNum);

  00018	11a00003	 movne       r0, r3
  0001c	1b000000	 blne        InterruptDisable

; 264  :             }
; 265  : 
; 266  :         if(pContext->IrqNum)

  00020	e5943008	 ldr         r3, [r4, #8]
  00024	e3530000	 cmp         r3, #0
  00028	0a000022	 beq         |$LN4@DmaDealloc|

; 267  :             {
; 268  :             if (!DeviceIoControl(
; 269  :                                 g_hDmaDrv, IOCTL_DMA_RELEASE_DEDICATED_INTERRUPT, 
; 270  :                                 (VOID*)&pContext->IrqNum, sizeof(IOCTL_DMA_RELEASE_DEDICATED_INTERRUPT_IN), 
; 271  :                                 NULL, 0, 
; 272  :                                 NULL, NULL))

  0002c	e59f30e4	 ldr         r3, [pc, #0xE4]
  00030	e59f10dc	 ldr         r1, [pc, #0xDC]
  00034	e3a05000	 mov         r5, #0
  00038	e5930000	 ldr         r0, [r3]
  0003c	e3a03004	 mov         r3, #4
  00040	e2842008	 add         r2, r4, #8
  00044	e58d500c	 str         r5, [sp, #0xC]
  00048	e58d5008	 str         r5, [sp, #8]
  0004c	e58d5004	 str         r5, [sp, #4]
  00050	e58d5000	 str         r5, [sp]
  00054	eb000000	 bl          DeviceIoControl
  00058	e3500000	 cmp         r0, #0
  0005c	1a000005	 bne         |$LN5@DmaDealloc|

; 273  :                 {
; 274  :                 ERRORMSG(TRUE, (
; 275  :                                 L"DmaDeallocateContext: IOCTL_DMA_RELEASE_DEDICATED_INTERRUPT failure\r\n"
; 276  :                                ));

  00060	e59f10a0	 ldr         r1, [pc, #0xA0]
  00064	e59f0098	 ldr         r0, [pc, #0x98]
  00068	e3a02f45	 mov         r2, #0x45, 30
  0006c	eb000000	 bl          NKDbgPrintfW
  00070	e59f0098	 ldr         r0, [pc, #0x98]
  00074	eb000000	 bl          NKDbgPrintfW
  00078		 |$LN5@DmaDealloc|

; 277  :                 //last error already set
; 278  :                 }
; 279  : 
; 280  :             if (!KernelIoControl(IOCTL_HAL_RELEASE_SYSINTR, 
; 281  :                                 &pContext->SysInterruptNum, sizeof(pContext->SysInterruptNum), 
; 282  :                                 NULL, 0, 
; 283  :                                 NULL)) 

  00078	e59f008c	 ldr         r0, [pc, #0x8C]
  0007c	e3a03000	 mov         r3, #0
  00080	e3a02004	 mov         r2, #4
  00084	e284100c	 add         r1, r4, #0xC
  00088	e58d5004	 str         r5, [sp, #4]
  0008c	e58d5000	 str         r5, [sp]
  00090	eb000000	 bl          KernelIoControl
  00094	e3500000	 cmp         r0, #0
  00098	1a000006	 bne         |$LN4@DmaDealloc|

; 284  :                 {
; 285  :                 ERRORMSG(TRUE, (
; 286  :                             L"DmaDeallocateContext "
; 287  :                             L"Failed IOCTL_HAL_RELEASE_SYSINTR (SysInterruptNum=%d)\r\n", pContext->SysInterruptNum
; 288  :                             ));

  0009c	e59f1064	 ldr         r1, [pc, #0x64]
  000a0	e59f005c	 ldr         r0, [pc, #0x5C]
  000a4	e3a02e12	 mov         r2, #0x12, 28
  000a8	eb000000	 bl          NKDbgPrintfW
  000ac	e594100c	 ldr         r1, [r4, #0xC]
  000b0	e59f0048	 ldr         r0, [pc, #0x48]
  000b4	eb000000	 bl          NKDbgPrintfW
  000b8		 |$LN4@DmaDealloc|

; 289  :                 //last error already set
; 290  :                 }
; 291  : 
; 292  :             }
; 293  : 
; 294  :         //unmap registers
; 295  :         if(pContext->pDmaRegs)

  000b8	e5943018	 ldr         r3, [r4, #0x18]
  000bc	e3530000	 cmp         r3, #0

; 296  :             {
; 297  :             MmUnmapIoSpace((PVOID)pContext->pDmaRegs, sizeof(OMAP_SDMA_REGS));

  000c0	13a01d32	 movne       r1, #0x32, 26
  000c4	11a00003	 movne       r0, r3
  000c8	1b000000	 blne        MmUnmapIoSpace

; 298  :             }
; 299  : 
; 300  :         //free memory
; 301  :         if(pContext->ChannelContextArray)

  000cc	e5943028	 ldr         r3, [r4, #0x28]
  000d0	e3530000	 cmp         r3, #0

; 302  :             {
; 303  :             LocalFree((PVOID)pContext->ChannelContextArray);

  000d4	11a00003	 movne       r0, r3
  000d8	1b000000	 blne        LocalFree

; 304  :             }
; 305  : 
; 306  :         if(pContext->hInterruptEvent)

  000dc	e5943024	 ldr         r3, [r4, #0x24]
  000e0	e3530000	 cmp         r3, #0

; 307  :             {
; 308  :             InterruptDisable(pContext->SysInterruptNum);

  000e4	1594000c	 ldrne       r0, [r4, #0xC]
  000e8	1b000000	 blne        InterruptDisable

; 309  :             }
; 310  :               
; 311  :         LocalFree(pContext);   

  000ec	e1a00004	 mov         r0, r4
  000f0	eb000000	 bl          LocalFree
  000f4		 |$LN8@DmaDealloc|

; 312  :         }
; 313  : }

  000f4	e28dd010	 add         sp, sp, #0x10
  000f8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000fc	e12fff1e	 bx          lr
  00100		 |$LN14@DmaDealloc|
  00100		 |$LN15@DmaDealloc|
  00100	00000000	 DCD         |??_C@_1JK@NPBFIFGL@?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT@|
  00104		 |$LN16@DmaDealloc|
  00104	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00108		 |$LN17@DmaDealloc|
  00108	00000000	 DCD         |??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0010c		 |$LN18@DmaDealloc|
  0010c	010100d8	 DCD         0x10100d8
  00110		 |$LN19@DmaDealloc|
  00110	00000000	 DCD         |??_C@_1IM@MBKONHJG@?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAM?$AAA?$AA_@|
  00114		 |$LN20@DmaDealloc|
  00114	01da0420	 DCD         0x1da0420
  00118		 |$LN21@DmaDealloc|
  00118	00000000	 DCD         |g_hDmaDrv|
  0011c		 |$M44316|

			 ENDP  ; |DmaDeallocateContext|

	EXPORT	|DmaDiDmaFreeInterrupt|
	EXPORT	|??_C@_1GG@MBAKFDLI@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAD?$AAm?$AAa?$AAF?$AAr?$AAe?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@OLMMJHOB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?8?$AAi?$AAn?$AAg@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@DOJBJKJ@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAD?$AAm?$AAa?$AAF?$AAr?$AAe?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH@| [ DATA ] ; `string'
	IMPORT	|DmaDisableStandby|
	IMPORT	|SetLastError|
	IMPORT	|LoadDmaDriver|
	IMPORT	|__C_specific_handler|

  00000			 AREA	 |.pdata|, PDATA
|$T44359| DCD	|$LN33@DmaDiDmaFr|
	DCD	0xc0007a04

  00000			 AREA	 |.pdata|, PDATA
|$T44361| DCD	|$LN18@DmaDiDmaFr|
	DCD	0x40000a01

  00000			 AREA	 |.xdata|, DATA
|$T44357| DCD	0x1
	DCD	|$LN22@DmaDiDmaFr|
	DCD	|$LN23@DmaDiDmaFr|
	DCD	|$LN18@DmaDiDmaFr|
	DCD	|$LN19@DmaDiDmaFr|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@MBAKFDLI@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAD?$AAm?$AAa?$AAF?$AAr?$AAe?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe?$AAD@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "V", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "D", 0x0, "m", 0x0, "a", 0x0, "D", 0x0, "r", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@OLMMJHOB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?8?$AAi?$AAn?$AAg@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "C", 0x0, "E", 0x0, "D", 0x0, "D", 0x0, "K", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, "'", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "d", 0x0, "m", 0x0, "a", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@DOJBJKJ@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAD?$AAm?$AAa?$AAF?$AAr?$AAe?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T44357|

  00008		 |DmaDiDmaFreeInterrupt| PROC

; 328  : {

  00008		 |$LN33@DmaDiDmaFr|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5bf0	 stmdb       sp!, {r4 - r9, r11, r12, lr}
  00010	e28db024	 add         r11, sp, #0x24
  00014	e24dd014	 sub         sp, sp, #0x14
  00018		 |$LN31@DmaDiDmaFr|
  00018	e1a04000	 mov         r4, r0

; 329  :     BOOL rc = FALSE;
; 330  :     CeddkDmaDIContext_t *pContext = (CeddkDmaDIContext_t*)hDmaInterrupt;
; 331  :     DWORD i;
; 332  : 
; 333  :     volatile ULONG ulCCR;
; 334  :     BOOL breakLoop = FALSE;
; 335  :     int  DelayCnt = 0x7FFF;
; 336  : 
; 337  :     // check if dma handle is valid
; 338  :     if (ValidateDmaDriver() == FALSE || hDmaInterrupt == NULL)

  0001c	e59f31f0	 ldr         r3, [pc, #0x1F0]
  00020	e3a02c7f	 mov         r2, #0x7F, 24
  00024	e3a05000	 mov         r5, #0
  00028	e5933000	 ldr         r3, [r3]
  0002c	e50b5034	 str         r5, [r11, #-0x34]
  00030	e3a08000	 mov         r8, #0
  00034	e3530000	 cmp         r3, #0
  00038	e38270ff	 orr         r7, r2, #0xFF
  0003c	1a000002	 bne         |$LN29@DmaDiDmaFr|
  00040	eb000000	 bl          LoadDmaDriver
  00044	e3500000	 cmp         r0, #0
  00048	0a00005a	 beq         |$LN11@DmaDiDmaFr|
  0004c		 |$LN29@DmaDiDmaFr|
  0004c	e3540000	 cmp         r4, #0
  00050	0a000058	 beq         |$LN11@DmaDiDmaFr|
  00054		 |$LN22@DmaDiDmaFr|

; 344  :         goto cleanUp;
; 345  :         }
; 346  : 
; 347  :     __try
; 348  :         {
; 349  :         if (pContext->cookie != DMA_DEDICATED_INTERRUPT_HANDLE_COOKIE)

  00054	e5942000	 ldr         r2, [r4]
  00058	e59f31b0	 ldr         r3, [pc, #0x1B0]
  0005c	e1520003	 cmp         r2, r3
  00060	0a000009	 beq         |$LN9@DmaDiDmaFr|

; 350  :             {
; 351  :             ERRORMSG(TRUE, (
; 352  :                         L"DmaDiDmaFreeInterrupt: Invalid Handle Type\r\n"
; 353  :                        ));

  00064	e59f1198	 ldr         r1, [pc, #0x198]
  00068	e59f0190	 ldr         r0, [pc, #0x190]
  0006c	e3a03c01	 mov         r3, #1, 24
  00070	e3832061	 orr         r2, r3, #0x61
  00074	eb000000	 bl          NKDbgPrintfW
  00078	e59f018c	 ldr         r0, [pc, #0x18C]
  0007c	eb000000	 bl          NKDbgPrintfW

; 354  :             SetLastError(ERROR_INVALID_HANDLE);

  00080	e3a00006	 mov         r0, #6
  00084	eb000000	 bl          SetLastError

; 355  :             goto cleanUp;

  00088	ea000054	 b           |$cleanUp$44160|
  0008c		 |$LN9@DmaDiDmaFr|

; 356  :             }
; 357  :         
; 358  :         for(i =0; i < pContext->NumberOfChannels; i++)

  0008c	e3a09000	 mov         r9, #0
  00090	e1a06009	 mov         r6, r9
  00094	e50b9030	 str         r9, [r11, #-0x30]
  00098	e3a05001	 mov         r5, #1
  0009c		 |$LL8@DmaDiDmaFr|
  0009c	e5943010	 ldr         r3, [r4, #0x10]
  000a0	e1560003	 cmp         r6, r3
  000a4	2a00002a	 bcs         |$LN6@DmaDiDmaFr|

; 359  :             {
; 360  :             DmaDisableStandby((HANDLE)&pContext->ChannelContextArray[i], TRUE);

  000a8	e5943028	 ldr         r3, [r4, #0x28]
  000ac	e3a01001	 mov         r1, #1
  000b0	e0830206	 add         r0, r3, r6, lsl #4
  000b4	eb000000	 bl          DmaDisableStandby

; 361  :             // stop dma, break all links, and reset status
; 362  :             WRITE_REGISTER_ULONG(&pContext->ChannelContextArray[i].pDmaChannel->CCR, 0x00000000);

  000b8	e5943028	 ldr         r3, [r4, #0x28]
  000bc	e0833206	 add         r3, r3, r6, lsl #4
  000c0	e5933004	 ldr         r3, [r3, #4]
  000c4	e5839000	 str         r9, [r3]
  000c8		 |$LL5@DmaDiDmaFr|

; 363  :             // ensure DMA transfer is completed by polling the active bits
; 364  :             //
; 365  :             while ((breakLoop == FALSE) && (DelayCnt != 0))

  000c8	e3580000	 cmp         r8, #0
  000cc	1a00000f	 bne         |$LN4@DmaDiDmaFr|
  000d0	e3570000	 cmp         r7, #0
  000d4	0a00000d	 beq         |$LN4@DmaDiDmaFr|

; 366  :             {
; 367  :             ulCCR = READ_REGISTER_ULONG(&pContext->ChannelContextArray[i].pDmaChannel->CCR);

  000d8	e5943028	 ldr         r3, [r4, #0x28]
  000dc	e0833206	 add         r3, r3, r6, lsl #4
  000e0	e5933004	 ldr         r3, [r3, #4]
  000e4	e5933000	 ldr         r3, [r3]
  000e8	e50b3038	 str         r3, [r11, #-0x38]

; 368  :             if ((ulCCR & DMA_CCR_WR_ACTIVE) || (ulCCR & DMA_CCR_RD_ACTIVE))

  000ec	e51b3038	 ldr         r3, [r11, #-0x38]
  000f0	e3130b01	 tst         r3, #1, 22
  000f4	051b3038	 ldreq       r3, [r11, #-0x38]
  000f8	03130c02	 tsteq       r3, #2, 24

; 371  :                //RETAILMSG (1,(TEXT("-->DmaDiDmaFreeInterrupt - DrainDMA (DelayCnt=%d)\r\n"), DelayCnt));
; 372  :                }
; 373  :             else
; 374  :                {
; 375  :                breakLoop = TRUE;

  000fc	01a08005	 moveq       r8, r5
  00100	050b502c	 streq       r5, [r11, #-0x2C]

; 369  :                {
; 370  :                DelayCnt--;

  00104	12477001	 subne       r7, r7, #1
  00108	150b7028	 strne       r7, [r11, #-0x28]

; 376  :                }
; 377  :             }

  0010c	eaffffed	 b           |$LL5@DmaDiDmaFr|
  00110		 |$LN4@DmaDiDmaFr|

; 378  : 
; 379  :             // re-enable standby in dma controller
; 380  :             //
; 381  :             DmaDisableStandby((HANDLE)&pContext->ChannelContextArray[i], FALSE);

  00110	e5943028	 ldr         r3, [r4, #0x28]
  00114	e3a01000	 mov         r1, #0
  00118	e0830206	 add         r0, r3, r6, lsl #4
  0011c	eb000000	 bl          DmaDisableStandby

; 382  :             WRITE_REGISTER_ULONG(&pContext->ChannelContextArray[i].pDmaChannel->CSR, 0x00000FFE);

  00120	e5943028	 ldr         r3, [r4, #0x28]
  00124	e3a02c0f	 mov         r2, #0xF, 24
  00128	e38220fe	 orr         r2, r2, #0xFE
  0012c	e0833206	 add         r3, r3, r6, lsl #4
  00130	e5933004	 ldr         r3, [r3, #4]
  00134	e583200c	 str         r2, [r3, #0xC]

; 383  :             WRITE_REGISTER_ULONG(&pContext->ChannelContextArray[i].pDmaChannel->CLNK_CTRL, 0x00000000);

  00138	e5943028	 ldr         r3, [r4, #0x28]
  0013c	e0833206	 add         r3, r3, r6, lsl #4
  00140	e5933004	 ldr         r3, [r3, #4]
  00144	e5839004	 str         r9, [r3, #4]
  00148	e2866001	 add         r6, r6, #1
  0014c	e50b6030	 str         r6, [r11, #-0x30]
  00150	eaffffd1	 b           |$LL8@DmaDiDmaFr|
  00154		 |$LN6@DmaDiDmaFr|

; 384  :             }
; 385  : 
; 386  :         // reset dma interrupts and status
; 387  :         WRITE_REGISTER_ULONG(pContext->pMaskRegister, 0x00000000);

  00154	e594301c	 ldr         r3, [r4, #0x1C]

; 388  :         WRITE_REGISTER_ULONG(pContext->pStatusRegister, 0xFFFFFFFF);

  00158	e3e02000	 mvn         r2, #0

; 389  : 
; 390  :         //free all the resources
; 391  :         DmaDeallocateContext(pContext);

  0015c	e1a00004	 mov         r0, r4
  00160	e5839000	 str         r9, [r3]
  00164	e5943020	 ldr         r3, [r4, #0x20]
  00168	e5832000	 str         r2, [r3]
  0016c	eb000000	 bl          DmaDeallocateContext

; 392  : 
; 393  :         SetLastError(ERROR_SUCCESS);

  00170	e3a00000	 mov         r0, #0
  00174	eb000000	 bl          SetLastError

; 394  :         rc = TRUE;

  00178	e50b5034	 str         r5, [r11, #-0x34]
  0017c		 |$LN23@DmaDiDmaFr|

; 395  :         }

  0017c	ea000017	 b           |$cleanUp$44160|
  00180		 |$LN19@DmaDiDmaFr|

; 397  :         {
; 398  :         ERRORMSG(TRUE, (
; 399  :                         L"ERROR! CEDDK: "
; 400  :                         L"exception free'ing dma handle\r\n"
; 401  :                        ));

  00180	e59f107c	 ldr         r1, [pc, #0x7C]
  00184	e59f0074	 ldr         r0, [pc, #0x74]
  00188	e3a03c01	 mov         r3, #1, 24
  0018c	e3832091	 orr         r2, r3, #0x91
  00190	eb000000	 bl          NKDbgPrintfW
  00194	e59f006c	 ldr         r0, [pc, #0x6C]
  00198	eb000000	 bl          NKDbgPrintfW
  0019c	e3a03b01	 mov         r3, #1, 22

; 402  :         SetLastError(ERROR_EXCEPTION_IN_SERVICE);

  001a0	e3830028	 orr         r0, r3, #0x28
  001a4	eb000000	 bl          SetLastError
  001a8	e51b5034	 ldr         r5, [r11, #-0x34]
  001ac	ea00000b	 b           |$cleanUp$44160|
  001b0		 |$LN30@DmaDiDmaFr|

; 403  :         }
; 404  : 
; 405  : cleanUp:
; 406  :     return rc; 

  001b0	e51b5038	 ldr         r5, [r11, #-0x38]
  001b4	ea000009	 b           |$cleanUp$44160|
  001b8		 |$LN11@DmaDiDmaFr|

; 339  :         {
; 340  :         ERRORMSG(TRUE, (
; 341  :                         L"DmaDiDmaFreeInterrupt: ValidateDmaDriver Failure\r\n"
; 342  :                        ));

  001b8	e59f1044	 ldr         r1, [pc, #0x44]
  001bc	e59f003c	 ldr         r0, [pc, #0x3C]
  001c0	e3a03c01	 mov         r3, #1, 24
  001c4	e3832056	 orr         r2, r3, #0x56
  001c8	eb000000	 bl          NKDbgPrintfW
  001cc	e59f0028	 ldr         r0, [pc, #0x28]
  001d0	eb000000	 bl          NKDbgPrintfW
  001d4	e3a03b01	 mov         r3, #1, 22

; 343  :         SetLastError(ERROR_DLL_INIT_FAILED);

  001d8	e383005a	 orr         r0, r3, #0x5A
  001dc	eb000000	 bl          SetLastError
  001e0		 |$cleanUp$44160|

; 407  : }

  001e0	e1a00005	 mov         r0, r5
  001e4	e24bd024	 sub         sp, r11, #0x24
  001e8	e89d6bf0	 ldmia       sp, {r4 - r9, r11, sp, lr}
  001ec	e12fff1e	 bx          lr

			 ENDP  ; |DmaDiDmaFreeInterrupt|

  001f0		 |$LN18@DmaDiDmaFr|
  001f0		 |$LN32@DmaDiDmaFr|

; 396  :     __except (TRUE)

  001f0	e52de004	 str         lr, [sp, #-4]!
  001f4		 |$LN21@DmaDiDmaFr|
  001f4		 |$LN35@DmaDiDmaFr|
  001f4	e3a00001	 mov         r0, #1
  001f8		 |$LN20@DmaDiDmaFr|
  001f8	e49df004	 ldr         pc, [sp], #4
  001fc		 |$LN37@DmaDiDmaFr|
  001fc		 |$LN38@DmaDiDmaFr|
  001fc	00000000	 DCD         |??_C@_1GG@MBAKFDLI@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAD?$AAm?$AAa?$AAF?$AAr?$AAe?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe?$AAD@|
  00200		 |$LN39@DmaDiDmaFr|
  00200	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00204		 |$LN40@DmaDiDmaFr|
  00204	00000000	 DCD         |??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00208		 |$LN41@DmaDiDmaFr|
  00208	00000000	 DCD         |??_C@_1FM@OLMMJHOB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAC?$AAE?$AAD?$AAD?$AAK?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAr?$AAe?$AAe?$AA?8?$AAi?$AAn?$AAg@|
  0020c		 |$LN42@DmaDiDmaFr|
  0020c	00000000	 DCD         |??_C@_1FK@DOJBJKJ@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAD?$AAm?$AAa?$AAF?$AAr?$AAe?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH@|
  00210		 |$LN43@DmaDiDmaFr|
  00210	43a608f1	 DCD         0x43a608f1
  00214		 |$LN44@DmaDiDmaFr|
  00214	00000000	 DCD         |g_hDmaDrv|
  00218		 |$LN36@DmaDiDmaFr|
  00218		 |$LN34@DmaDiDmaFr|
	EXPORT	|DmaDiFindInterruptChannelByIndex|
	EXPORT	|??_C@_1HM@PCAGOPDN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@JNJAEFCG@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@JDNHJBFB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44403| DCD	|$LN29@DmaDiFindI|
	DCD	0xc0004704

  00000			 AREA	 |.pdata|, PDATA
|$T44405| DCD	|$LN14@DmaDiFindI|
	DCD	0x40000a01

  00000			 AREA	 |.xdata|, DATA
|$T44401| DCD	0x1
	DCD	|$LN18@DmaDiFindI|
	DCD	|$LN19@DmaDiFindI|
	DCD	|$LN14@DmaDiFindI|
	DCD	|$LN15@DmaDiFindI|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@PCAGOPDN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "F", 0x0, "i"
	DCB	0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "x", 0x0, ":", 0x0, " ", 0x0, "V", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@JNJAEFCG@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "F", 0x0, "i"
	DCB	0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "x", 0x0, ":", 0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c"
	DCB	0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "d", 0x0, "m", 0x0, "a"
	DCB	0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "e", 0x0, "l", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@JDNHJBFB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "F", 0x0, "i"
	DCB	0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "x", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T44401|

  00008		 |DmaDiFindInterruptChannelByIndex| PROC

; 421  : {

  00008		 |$LN29@DmaDiFindI|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5830	 stmdb       sp!, {r4, r5, r11, r12, lr}
  00010	e28db014	 add         r11, sp, #0x14
  00014	e24dd00c	 sub         sp, sp, #0xC
  00018		 |$LN27@DmaDiFindI|
  00018	e1a05000	 mov         r5, r0

; 422  :     DWORD RetVal = (DWORD)-1;
; 423  :     CeddkDmaDIContext_t *pContext = (CeddkDmaDIContext_t*)hDmaInterrupt;
; 424  :     DWORD i;
; 425  :     
; 426  :     // check if dma handle is valid
; 427  :     if (ValidateDmaDriver() == FALSE || hDmaInterrupt == NULL)

  0001c	e59f3124	 ldr         r3, [pc, #0x124]
  00020	e3e04000	 mvn         r4, #0
  00024	e50b4020	 str         r4, [r11, #-0x20]
  00028	e5933000	 ldr         r3, [r3]
  0002c	e3530000	 cmp         r3, #0
  00030	1a000002	 bne         |$LN24@DmaDiFindI|
  00034	eb000000	 bl          LoadDmaDriver
  00038	e3500000	 cmp         r0, #0
  0003c	0a00002a	 beq         |$LN7@DmaDiFindI|
  00040		 |$LN24@DmaDiFindI|
  00040	e3550000	 cmp         r5, #0
  00044	0a000028	 beq         |$LN7@DmaDiFindI|
  00048		 |$LN18@DmaDiFindI|

; 433  :         goto cleanUp;
; 434  :         }
; 435  : 
; 436  :     __try
; 437  :         {
; 438  :         if (pContext->cookie != DMA_DEDICATED_INTERRUPT_HANDLE_COOKIE)

  00048	e5952000	 ldr         r2, [r5]
  0004c	e59f30f0	 ldr         r3, [pc, #0xF0]
  00050	e1520003	 cmp         r2, r3
  00054	0a000009	 beq         |$LN5@DmaDiFindI|

; 439  :             {
; 440  :             ERRORMSG(TRUE, (
; 441  :                         L"DmaDiFindInterruptChannelByIndex: Invalid Handle Type\r\n"
; 442  :                        ));

  00058	e59f10d8	 ldr         r1, [pc, #0xD8]
  0005c	e59f00d0	 ldr         r0, [pc, #0xD0]
  00060	e3a03c01	 mov         r3, #1, 24
  00064	e38320ba	 orr         r2, r3, #0xBA
  00068	eb000000	 bl          NKDbgPrintfW
  0006c	e59f00cc	 ldr         r0, [pc, #0xCC]
  00070	eb000000	 bl          NKDbgPrintfW

; 443  :             SetLastError(ERROR_INVALID_HANDLE);

  00074	e3a00006	 mov         r0, #6
  00078	eb000000	 bl          SetLastError

; 444  :             goto cleanUp;

  0007c	ea000024	 b           |$cleanUp$44195|
  00080		 |$LN5@DmaDiFindI|

; 445  :             }
; 446  : 
; 447  :         for(i =0; i < pContext->NumberOfChannels; i++)

  00080	e3a00000	 mov         r0, #0
  00084		 |$LN26@DmaDiFindI|
  00084	e50b001c	 str         r0, [r11, #-0x1C]
  00088	e5953010	 ldr         r3, [r5, #0x10]
  0008c	e1500003	 cmp         r0, r3
  00090	2a000009	 bcs         |$LN2@DmaDiFindI|

; 448  :             {
; 449  :             if(pContext->ChannelContextArray[i].ChannelIntMask & *pContext->pStatusRegister)

  00094	e5953028	 ldr         r3, [r5, #0x28]
  00098	e5951020	 ldr         r1, [r5, #0x20]
  0009c	e0833200	 add         r3, r3, r0, lsl #4
  000a0	e593200c	 ldr         r2, [r3, #0xC]
  000a4	e5913000	 ldr         r3, [r1]
  000a8	e1120003	 tst         r2, r3

; 450  :                 {
; 451  :                 RetVal = i;

  000ac	11a04000	 movne       r4, r0
  000b0	150b0020	 strne       r0, [r11, #-0x20]

; 445  :             }
; 446  : 
; 447  :         for(i =0; i < pContext->NumberOfChannels; i++)

  000b4	e2800001	 add         r0, r0, #1
  000b8	eafffff1	 b           |$LN26@DmaDiFindI|
  000bc		 |$LN2@DmaDiFindI|

; 452  :                 }
; 453  :             }
; 454  :         SetLastError(ERROR_SUCCESS);

  000bc	e3a00000	 mov         r0, #0
  000c0	eb000000	 bl          SetLastError
  000c4		 |$LN19@DmaDiFindI|

; 455  :         }

  000c4	ea000012	 b           |$cleanUp$44195|
  000c8		 |$LN15@DmaDiFindI|

; 457  :         {
; 458  :         RETAILMSG(TRUE, (L"DmaDiFindInterruptChannelByIndex: "
; 459  :             L"exception getting dma channel interrupt\r\n"
; 460  :             ));

  000c8	e59f006c	 ldr         r0, [pc, #0x6C]
  000cc	eb000000	 bl          NKDbgPrintfW
  000d0	e3a03b01	 mov         r3, #1, 22

; 461  :         SetLastError(ERROR_EXCEPTION_IN_SERVICE);

  000d4	e3830028	 orr         r0, r3, #0x28
  000d8	eb000000	 bl          SetLastError
  000dc	e51b4020	 ldr         r4, [r11, #-0x20]
  000e0	ea00000b	 b           |$cleanUp$44195|
  000e4		 |$LN25@DmaDiFindI|

; 462  :         }
; 463  : 
; 464  : cleanUp:
; 465  : 
; 466  :     return RetVal;

  000e4	e51b4018	 ldr         r4, [r11, #-0x18]
  000e8	ea000009	 b           |$cleanUp$44195|
  000ec		 |$LN7@DmaDiFindI|

; 428  :         {
; 429  :         ERRORMSG(TRUE, (
; 430  :                         L"DmaDiFindInterruptChannelByIndex: ValidateDmaDriver Failure\r\n"
; 431  :                        ));

  000ec	e59f1044	 ldr         r1, [pc, #0x44]
  000f0	e59f003c	 ldr         r0, [pc, #0x3C]
  000f4	e3a03c01	 mov         r3, #1, 24
  000f8	e38320af	 orr         r2, r3, #0xAF
  000fc	eb000000	 bl          NKDbgPrintfW
  00100	e59f0028	 ldr         r0, [pc, #0x28]
  00104	eb000000	 bl          NKDbgPrintfW
  00108	e3a03b01	 mov         r3, #1, 22

; 432  :         SetLastError(ERROR_DLL_INIT_FAILED);

  0010c	e383005a	 orr         r0, r3, #0x5A
  00110	eb000000	 bl          SetLastError
  00114		 |$cleanUp$44195|

; 467  : }

  00114	e1a00004	 mov         r0, r4
  00118	e24bd014	 sub         sp, r11, #0x14
  0011c	e89d6830	 ldmia       sp, {r4, r5, r11, sp, lr}
  00120	e12fff1e	 bx          lr

			 ENDP  ; |DmaDiFindInterruptChannelByIndex|

  00124		 |$LN14@DmaDiFindI|
  00124		 |$LN28@DmaDiFindI|

; 456  :     __except (TRUE)

  00124	e52de004	 str         lr, [sp, #-4]!
  00128		 |$LN17@DmaDiFindI|
  00128		 |$LN31@DmaDiFindI|
  00128	e3a00001	 mov         r0, #1
  0012c		 |$LN16@DmaDiFindI|
  0012c	e49df004	 ldr         pc, [sp], #4
  00130		 |$LN33@DmaDiFindI|
  00130		 |$LN34@DmaDiFindI|
  00130	00000000	 DCD         |??_C@_1HM@PCAGOPDN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@|
  00134		 |$LN35@DmaDiFindI|
  00134	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00138		 |$LN36@DmaDiFindI|
  00138	00000000	 DCD         |??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0013c		 |$LN37@DmaDiFindI|
  0013c	00000000	 DCD         |??_C@_1JI@JNJAEFCG@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@|
  00140		 |$LN38@DmaDiFindI|
  00140	00000000	 DCD         |??_C@_1HA@JDNHJBFB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAF?$AAi?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe?$AAx@|
  00144		 |$LN39@DmaDiFindI|
  00144	43a608f1	 DCD         0x43a608f1
  00148		 |$LN40@DmaDiFindI|
  00148	00000000	 DCD         |g_hDmaDrv|
  0014c		 |$LN32@DmaDiFindI|
  0014c		 |$LN30@DmaDiFindI|
	EXPORT	|DmaDiClearInterruptChannelByIndex|
	EXPORT	|??_C@_1HO@MGEODPEK@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JE@OBHPHHHD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@FNKOOPNH@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@KFHMPDBB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44444| DCD	|$LN25@DmaDiClear|
	DCD	0xc0005404

  00000			 AREA	 |.pdata|, PDATA
|$T44446| DCD	|$LN12@DmaDiClear|
	DCD	0x40000b01

  00000			 AREA	 |.xdata|, DATA
|$T44442| DCD	0x1
	DCD	|$LN16@DmaDiClear|
	DCD	|$LN17@DmaDiClear|
	DCD	|$LN12@DmaDiClear|
	DCD	|$LN13@DmaDiClear|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@MGEODPEK@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "C", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "x", 0x0, ":", 0x0, " ", 0x0, "V", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "D", 0x0, "m", 0x0, "a", 0x0, "D", 0x0, "r", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@OBHPHHHD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "C", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "x", 0x0, ":", 0x0, " ", 0x0, "e", 0x0, "x"
	DCB	0x0, "c", 0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "c"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@FNKOOPNH@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "C", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "x", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, " ", 0x0, "N", 0x0, "u", 0x0, "m", 0x0, "b"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@KFHMPDBB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "C", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, "B", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "x", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T44442|

  00008		 |DmaDiClearInterruptChannelByIndex| PROC

; 483  : {

  00008		 |$LN25@DmaDiClear|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5870	 stmdb       sp!, {r4 - r6, r11, r12, lr}
  00010	e28db018	 add         r11, sp, #0x18
  00014	e24dd008	 sub         sp, sp, #8
  00018		 |$LN23@DmaDiClear|
  00018	e1a06001	 mov         r6, r1
  0001c	e1a04000	 mov         r4, r0

; 484  :     BOOL rc = FALSE;
; 485  :     CeddkDmaDIContext_t *pContext = (CeddkDmaDIContext_t*)hDmaInterrupt;
; 486  :     
; 487  :     // check if dma handle is valid
; 488  :     if (ValidateDmaDriver() == FALSE || hDmaInterrupt == NULL)

  00020	e59f3158	 ldr         r3, [pc, #0x158]
  00024	e3a05000	 mov         r5, #0
  00028	e50b5020	 str         r5, [r11, #-0x20]
  0002c	e5933000	 ldr         r3, [r3]
  00030	e3530000	 cmp         r3, #0
  00034	1a000002	 bne         |$LN21@DmaDiClear|
  00038	eb000000	 bl          LoadDmaDriver
  0003c	e3500000	 cmp         r0, #0
  00040	0a000037	 beq         |$LN5@DmaDiClear|
  00044		 |$LN21@DmaDiClear|
  00044	e3540000	 cmp         r4, #0
  00048	0a000035	 beq         |$LN5@DmaDiClear|
  0004c		 |$LN16@DmaDiClear|

; 494  :         goto cleanUp;
; 495  :         }
; 496  : 
; 497  :     __try
; 498  :         {
; 499  :         if (pContext->cookie != DMA_DEDICATED_INTERRUPT_HANDLE_COOKIE)

  0004c	e5942000	 ldr         r2, [r4]
  00050	e59f3124	 ldr         r3, [pc, #0x124]
  00054	e1520003	 cmp         r2, r3
  00058	0a000009	 beq         |$LN3@DmaDiClear|

; 500  :             {
; 501  :             ERRORMSG(TRUE, (
; 502  :                         L"DmaDiClearInterruptChannelByIndex: Invalid Handle Type\r\n"
; 503  :                        ));

  0005c	e59f1108	 ldr         r1, [pc, #0x108]
  00060	e59f0100	 ldr         r0, [pc, #0x100]
  00064	e3a03c01	 mov         r3, #1, 24
  00068	e38320f7	 orr         r2, r3, #0xF7
  0006c	eb000000	 bl          NKDbgPrintfW
  00070	e59f0100	 ldr         r0, [pc, #0x100]
  00074	eb000000	 bl          NKDbgPrintfW

; 504  :             SetLastError(ERROR_INVALID_HANDLE);

  00078	e3a00006	 mov         r0, #6
  0007c	eb000000	 bl          SetLastError

; 505  :             goto cleanUp;

  00080	ea000030	 b           |$cleanUp$44217|
  00084		 |$LN3@DmaDiClear|

; 506  :             }
; 507  : 
; 508  :         if(ChannelIndex > pContext->NumberOfChannels)

  00084	e5943010	 ldr         r3, [r4, #0x10]
  00088	e1560003	 cmp         r6, r3
  0008c	9a00000a	 bls         |$LN2@DmaDiClear|

; 509  :             {
; 510  :             ERRORMSG(TRUE, (
; 511  :                         L"DmaDiClearInterruptChannelByIndex: Invalid Channel Number %d\r\n",
; 512  :                        ChannelIndex
; 513  :                        ));

  00090	e59f10d4	 ldr         r1, [pc, #0xD4]
  00094	e59f00cc	 ldr         r0, [pc, #0xCC]
  00098	e3a03c02	 mov         r3, #2, 24
  0009c	e3832001	 orr         r2, r3, #1
  000a0	eb000000	 bl          NKDbgPrintfW
  000a4	e59f00c8	 ldr         r0, [pc, #0xC8]
  000a8	e1a01006	 mov         r1, r6
  000ac	eb000000	 bl          NKDbgPrintfW

; 514  :             SetLastError(ERROR_INVALID_PARAMETER);

  000b0	e3a00057	 mov         r0, #0x57
  000b4	eb000000	 bl          SetLastError

; 515  :             goto cleanUp;

  000b8	ea000022	 b           |$cleanUp$44217|
  000bc		 |$LN2@DmaDiClear|

; 516  :             }
; 517  : 
; 518  :         *pContext->pStatusRegister = pContext->ChannelContextArray[ChannelIndex].ChannelIntMask;

  000bc	e5943028	 ldr         r3, [r4, #0x28]
  000c0	e5942020	 ldr         r2, [r4, #0x20]

; 519  : 
; 520  :         if(*pContext->pStatusRegister & pContext->ChannelContextArray[ChannelIndex].ChannelIntMask)
; 521  :             {
; 522  :             //most likely DMA4_CSRi was not cleared
; 523  :             DEBUGMSG(1, (
; 524  :                 L"DmaDiClearInterruptChannelByIndex: Channel %d was not cleared.\r\n",
; 525  :                ChannelIndex
; 526  :                ));
; 527  :             }
; 528  : 
; 529  :         rc = TRUE;
; 530  :         SetLastError(ERROR_SUCCESS);

  000c4	e3a00000	 mov         r0, #0
  000c8	e0833206	 add         r3, r3, r6, lsl #4
  000cc	e593300c	 ldr         r3, [r3, #0xC]
  000d0	e5823000	 str         r3, [r2]
  000d4	e5943020	 ldr         r3, [r4, #0x20]
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e3a05001	 mov         r5, #1
  000e0	e50b5020	 str         r5, [r11, #-0x20]
  000e4	eb000000	 bl          SetLastError
  000e8		 |$LN17@DmaDiClear|

; 531  :         }

  000e8	ea000016	 b           |$cleanUp$44217|
  000ec		 |$LN13@DmaDiClear|

; 533  :         {
; 534  :         ERRORMSG(TRUE, (
; 535  :             L"DmaDiClearInterruptChannelByIndex: "
; 536  :             L"exception clearing channel interrupt\r\n"
; 537  :             ));

  000ec	e59f1078	 ldr         r1, [pc, #0x78]
  000f0	e59f0070	 ldr         r0, [pc, #0x70]
  000f4	e3a03c02	 mov         r3, #2, 24
  000f8	e3832019	 orr         r2, r3, #0x19
  000fc	eb000000	 bl          NKDbgPrintfW
  00100	e59f0068	 ldr         r0, [pc, #0x68]
  00104	eb000000	 bl          NKDbgPrintfW
  00108	e3a03b01	 mov         r3, #1, 22

; 538  :         SetLastError(ERROR_EXCEPTION_IN_SERVICE);

  0010c	e3830028	 orr         r0, r3, #0x28
  00110	eb000000	 bl          SetLastError
  00114	e51b5020	 ldr         r5, [r11, #-0x20]
  00118	ea00000a	 b           |$cleanUp$44217|
  0011c		 |$LN22@DmaDiClear|

; 539  :         }
; 540  : 
; 541  : cleanUp:
; 542  : 
; 543  :     return rc;

  0011c	e51b501c	 ldr         r5, [r11, #-0x1C]
  00120	ea000008	 b           |$cleanUp$44217|
  00124		 |$LN5@DmaDiClear|

; 489  :         {
; 490  :         ERRORMSG(TRUE, (
; 491  :                         L"DmaDiClearInterruptChannelByIndex: ValidateDmaDriver Failure\r\n"
; 492  :                        ));

  00124	e59f1040	 ldr         r1, [pc, #0x40]
  00128	e59f0038	 ldr         r0, [pc, #0x38]
  0012c	e3a02f7b	 mov         r2, #0x7B, 30
  00130	eb000000	 bl          NKDbgPrintfW
  00134	e59f0028	 ldr         r0, [pc, #0x28]
  00138	eb000000	 bl          NKDbgPrintfW
  0013c	e3a03b01	 mov         r3, #1, 22

; 493  :         SetLastError(ERROR_DLL_INIT_FAILED);

  00140	e383005a	 orr         r0, r3, #0x5A
  00144	eb000000	 bl          SetLastError
  00148		 |$cleanUp$44217|

; 544  : }

  00148	e1a00005	 mov         r0, r5
  0014c	e24bd018	 sub         sp, r11, #0x18
  00150	e89d6870	 ldmia       sp, {r4 - r6, r11, sp, lr}
  00154	e12fff1e	 bx          lr

			 ENDP  ; |DmaDiClearInterruptChannelByIndex|

  00158		 |$LN12@DmaDiClear|
  00158		 |$LN24@DmaDiClear|

; 532  :     __except (TRUE)

  00158	e52de004	 str         lr, [sp, #-4]!
  0015c		 |$LN15@DmaDiClear|
  0015c		 |$LN27@DmaDiClear|
  0015c	e3a00001	 mov         r0, #1
  00160		 |$LN14@DmaDiClear|
  00160	e49df004	 ldr         pc, [sp], #4
  00164		 |$LN29@DmaDiClear|
  00164		 |$LN30@DmaDiClear|
  00164	00000000	 DCD         |??_C@_1HO@MGEODPEK@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@|
  00168		 |$LN31@DmaDiClear|
  00168	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  0016c		 |$LN32@DmaDiClear|
  0016c	00000000	 DCD         |??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00170		 |$LN33@DmaDiClear|
  00170	00000000	 DCD         |??_C@_1JE@OBHPHHHD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@|
  00174		 |$LN34@DmaDiClear|
  00174	00000000	 DCD         |??_C@_1HO@FNKOOPNH@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@|
  00178		 |$LN35@DmaDiClear|
  00178	00000000	 DCD         |??_C@_1HC@KFHMPDBB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAC?$AAl?$AAe?$AAa?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAB?$AAy?$AAI?$AAn?$AAd?$AAe@|
  0017c		 |$LN36@DmaDiClear|
  0017c	43a608f1	 DCD         0x43a608f1
  00180		 |$LN37@DmaDiClear|
  00180	00000000	 DCD         |g_hDmaDrv|
  00184		 |$LN28@DmaDiClear|
  00184		 |$LN26@DmaDiClear|
	EXPORT	|DmaDiInterruptDone|
	EXPORT	|??_C@_1GA@FDFNBJJB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe?$AAD?$AAm?$AAa?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@NEFDHMGL@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@NPICJGD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH?$AAa?$AAn?$AAd@| [ DATA ] ; `string'
	IMPORT	|InterruptDone|

  00000			 AREA	 |.pdata|, PDATA
|$T44485| DCD	|$LN23@DmaDiInter|
	DCD	0xc0004004

  00000			 AREA	 |.pdata|, PDATA
|$T44487| DCD	|$LN10@DmaDiInter|
	DCD	0x40000a01

  00000			 AREA	 |.xdata|, DATA
|$T44483| DCD	0x1
	DCD	|$LN14@DmaDiInter|
	DCD	|$LN15@DmaDiInter|
	DCD	|$LN10@DmaDiInter|
	DCD	|$LN11@DmaDiInter|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@FDFNBJJB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe?$AAD?$AAm?$AAa?$AAD@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "V", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@NEFDHMGL@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAl@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "c"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@NPICJGD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH?$AAa?$AAn?$AAd@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "H", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "T", 0x0, "y"
	DCB	0x0, "p", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T44483|

  00008		 |DmaDiInterruptDone| PROC

; 559  : {

  00008		 |$LN23@DmaDiInter|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5830	 stmdb       sp!, {r4, r5, r11, r12, lr}
  00010	e28db014	 add         r11, sp, #0x14
  00014	e24dd008	 sub         sp, sp, #8
  00018		 |$LN21@DmaDiInter|
  00018	e1a05000	 mov         r5, r0

; 560  :     BOOL rc = FALSE;
; 561  :     CeddkDmaDIContext_t *pContext = (CeddkDmaDIContext_t*)hDmaInterrupt;
; 562  :     
; 563  :     // check if dma handle is valid
; 564  :     // check if dma handle is valid
; 565  :     if (ValidateDmaDriver() == FALSE || hDmaInterrupt == NULL)

  0001c	e59f3108	 ldr         r3, [pc, #0x108]
  00020	e3a04000	 mov         r4, #0
  00024	e50b401c	 str         r4, [r11, #-0x1C]
  00028	e5933000	 ldr         r3, [r3]
  0002c	e3530000	 cmp         r3, #0
  00030	1a000002	 bne         |$LN19@DmaDiInter|
  00034	eb000000	 bl          LoadDmaDriver
  00038	e3500000	 cmp         r0, #0
  0003c	0a000023	 beq         |$LN3@DmaDiInter|
  00040		 |$LN19@DmaDiInter|
  00040	e3550000	 cmp         r5, #0
  00044	0a000021	 beq         |$LN3@DmaDiInter|
  00048		 |$LN14@DmaDiInter|

; 571  :         goto cleanUp;
; 572  :         }
; 573  : 
; 574  :     __try
; 575  :         {
; 576  :         if (pContext->cookie != DMA_DEDICATED_INTERRUPT_HANDLE_COOKIE)

  00048	e5952000	 ldr         r2, [r5]
  0004c	e59f30d4	 ldr         r3, [pc, #0xD4]
  00050	e1520003	 cmp         r2, r3
  00054	0a000008	 beq         |$LN1@DmaDiInter|

; 577  :             {
; 578  :             ERRORMSG(TRUE, (
; 579  :                         L"DmaDiInterruptDone: Invalid Handle Type\r\n"
; 580  :                        ));

  00058	e59f10bc	 ldr         r1, [pc, #0xBC]
  0005c	e59f00b4	 ldr         r0, [pc, #0xB4]
  00060	e3a02f91	 mov         r2, #0x91, 30
  00064	eb000000	 bl          NKDbgPrintfW
  00068	e59f00b4	 ldr         r0, [pc, #0xB4]
  0006c	eb000000	 bl          NKDbgPrintfW

; 581  :             SetLastError(ERROR_INVALID_HANDLE);

  00070	e3a00006	 mov         r0, #6
  00074	eb000000	 bl          SetLastError

; 582  :             goto cleanUp;

  00078	ea00001e	 b           |$cleanUp$44237|
  0007c		 |$LN1@DmaDiInter|

; 583  :             }
; 584  : 
; 585  :             InterruptDone(pContext->SysInterruptNum); 

  0007c	e595000c	 ldr         r0, [r5, #0xC]
  00080	eb000000	 bl          InterruptDone

; 586  :             rc = TRUE;

  00084	e3a04001	 mov         r4, #1

; 587  :             SetLastError(ERROR_SUCCESS);

  00088	e3a00000	 mov         r0, #0
  0008c	e50b401c	 str         r4, [r11, #-0x1C]
  00090	eb000000	 bl          SetLastError
  00094		 |$LN15@DmaDiInter|

; 588  : 
; 589  :         }

  00094	ea000017	 b           |$cleanUp$44237|
  00098		 |$LN11@DmaDiInter|

; 591  :         {
; 592  :         ERRORMSG(TRUE, (
; 593  :             L"DmaDiInterruptDone: "
; 594  :             L"exception clearing channel interrupt\r\n"
; 595  :             ));

  00098	e59f107c	 ldr         r1, [pc, #0x7C]
  0009c	e59f0074	 ldr         r0, [pc, #0x74]
  000a0	e3a03c02	 mov         r3, #2, 24
  000a4	e3832053	 orr         r2, r3, #0x53
  000a8	eb000000	 bl          NKDbgPrintfW
  000ac	e59f006c	 ldr         r0, [pc, #0x6C]
  000b0	eb000000	 bl          NKDbgPrintfW
  000b4	e3a03b01	 mov         r3, #1, 22

; 596  :         SetLastError(ERROR_EXCEPTION_IN_SERVICE);

  000b8	e3830028	 orr         r0, r3, #0x28
  000bc	eb000000	 bl          SetLastError
  000c0	e51b401c	 ldr         r4, [r11, #-0x1C]
  000c4	ea00000b	 b           |$cleanUp$44237|
  000c8		 |$LN20@DmaDiInter|

; 597  :         }
; 598  : 
; 599  : cleanUp:
; 600  : 
; 601  :     return rc;

  000c8	e51b4018	 ldr         r4, [r11, #-0x18]
  000cc	ea000009	 b           |$cleanUp$44237|
  000d0		 |$LN3@DmaDiInter|

; 566  :         {
; 567  :         ERRORMSG(TRUE, (
; 568  :                         L"DmaDiInterruptDone: ValidateDmaDriver Failure\r\n"
; 569  :                        ));

  000d0	e59f1044	 ldr         r1, [pc, #0x44]
  000d4	e59f003c	 ldr         r0, [pc, #0x3C]
  000d8	e3a03c02	 mov         r3, #2, 24
  000dc	e3832039	 orr         r2, r3, #0x39
  000e0	eb000000	 bl          NKDbgPrintfW
  000e4	e59f0028	 ldr         r0, [pc, #0x28]
  000e8	eb000000	 bl          NKDbgPrintfW
  000ec	e3a03b01	 mov         r3, #1, 22

; 570  :         SetLastError(ERROR_DLL_INIT_FAILED);

  000f0	e383005a	 orr         r0, r3, #0x5A
  000f4	eb000000	 bl          SetLastError
  000f8		 |$cleanUp$44237|

; 602  : }

  000f8	e1a00004	 mov         r0, r4
  000fc	e24bd014	 sub         sp, r11, #0x14
  00100	e89d6830	 ldmia       sp, {r4, r5, r11, sp, lr}
  00104	e12fff1e	 bx          lr

			 ENDP  ; |DmaDiInterruptDone|

  00108		 |$LN10@DmaDiInter|
  00108		 |$LN22@DmaDiInter|

; 590  :     __except (TRUE)

  00108	e52de004	 str         lr, [sp, #-4]!
  0010c		 |$LN13@DmaDiInter|
  0010c		 |$LN25@DmaDiInter|
  0010c	e3a00001	 mov         r0, #1
  00110		 |$LN12@DmaDiInter|
  00110	e49df004	 ldr         pc, [sp], #4
  00114		 |$LN27@DmaDiInter|
  00114		 |$LN28@DmaDiInter|
  00114	00000000	 DCD         |??_C@_1GA@FDFNBJJB@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe?$AAD?$AAm?$AAa?$AAD@|
  00118		 |$LN29@DmaDiInter|
  00118	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  0011c		 |$LN30@DmaDiInter|
  0011c	00000000	 DCD         |??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00120		 |$LN31@DmaDiInter|
  00120	00000000	 DCD         |??_C@_1HG@NEFDHMGL@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAc?$AAl@|
  00124		 |$LN32@DmaDiInter|
  00124	00000000	 DCD         |??_C@_1FE@NPICJGD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH?$AAa?$AAn?$AAd@|
  00128		 |$LN33@DmaDiInter|
  00128	43a608f1	 DCD         0x43a608f1
  0012c		 |$LN34@DmaDiInter|
  0012c	00000000	 DCD         |g_hDmaDrv|
  00130		 |$LN26@DmaDiInter|
  00130		 |$LN24@DmaDiInter|
	EXPORT	|DmaDiAllocateInterrupt|
	EXPORT	|??_C@_1GI@BNFFDFCM@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@BELIOLMC@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_19FOCAGMKL@?$AAI?$AAR?$AAQ?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@GCGOBMBN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JA@KILAOCLM@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAM@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@PLLCPBPA@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@BAJGPPFD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AAO?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@NOOLDBAN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	IMPORT	|InterruptInitialize|
	IMPORT	|GetIrqByDevice|
	IMPORT	|SOCGetDMADevice|
	IMPORT	|MmMapIoSpace|
	IMPORT	|GetLastError|
	IMPORT	|LocalAlloc|

  00000			 AREA	 |.pdata|, PDATA
|$T44531| DCD	|$LN37@DmaDiAlloc|
	DCD	0x4000e904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@BNFFDFCM@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@BELIOLMC@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "(", 0x0, "i"
	DCB	0x0, "r", 0x0, "q", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19FOCAGMKL@?$AAI?$AAR?$AAQ?$AA0?$AA?$AA@| DCB "I", 0x0, "R", 0x0, "Q"
	DCB	0x0, "0", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@GCGOBMBN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "M"
	DCB	0x0, "m", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, "I", 0x0, "o"
	DCB	0x0, "S", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@KILAOCLM@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAM@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "_", 0x0, "R", 0x0, "E", 0x0, "Q"
	DCB	0x0, "U", 0x0, "E", 0x0, "S", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "E", 0x0, "D", 0x0, "I", 0x0, "C", 0x0, "A", 0x0, "T"
	DCB	0x0, "E", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "T"
	DCB	0x0, "E", 0x0, "R", 0x0, "R", 0x0, "U", 0x0, "P", 0x0, "T"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@PLLCPBPA@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAa@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "m"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@BAJGPPFD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AAO?$AAf@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "N"
	DCB	0x0, "u", 0x0, "m", 0x0, "b", 0x0, "e", 0x0, "r", 0x0, "O"
	DCB	0x0, "f", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "e", 0x0, "l", 0x0, "s", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, "o", 0x0, " ", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "g"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@NOOLDBAN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "D", 0x0, "i", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "V"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "D", 0x0, "m", 0x0, "a", 0x0, "D", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaDiAllocateInterrupt| PROC

; 64   : {

  00000		 |$LN37@DmaDiAlloc|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d53f0	 stmdb       sp!, {r4 - r9, r12, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M44528|
  00010	e1a07002	 mov         r7, r2
  00014	e1a06001	 mov         r6, r1
  00018	e58d003c	 str         r0, [sp, #0x3C]

; 65   :     BOOL rc = FALSE;
; 66   :     static int dwDmaStartIrq = -1;
; 67   :     CeddkDmaDIContext_t *pContext = NULL;
; 68   :     DWORD i;
; 69   :     PHYSICAL_ADDRESS pa;
; 70   :     
; 71   :     // check if dma handle is valid
; 72   :     if (ValidateDmaDriver() == FALSE)

  0001c	e59f537c	 ldr         r5, [pc, #0x37C]
  00020	e3a04000	 mov         r4, #0
  00024	e5953000	 ldr         r3, [r5]
  00028	e3530000	 cmp         r3, #0
  0002c	1a00000c	 bne         |$LN19@DmaDiAlloc|
  00030	eb000000	 bl          LoadDmaDriver
  00034	e3500000	 cmp         r0, #0
  00038	1a000008	 bne         |$LN29@DmaDiAlloc|

; 73   :         {
; 74   :         ERRORMSG(TRUE, (
; 75   :                         L"DmaDiAllocateInterrupt: ValidateDmaDriver Failure\r\n"
; 76   :                        ));

  0003c	e59f132c	 ldr         r1, [pc, #0x32C]
  00040	e59f0324	 ldr         r0, [pc, #0x324]
  00044	e3a0204c	 mov         r2, #0x4C
  00048	eb000000	 bl          NKDbgPrintfW
  0004c	e59f0348	 ldr         r0, [pc, #0x348]
  00050	eb000000	 bl          NKDbgPrintfW
  00054	e3a03b01	 mov         r3, #1, 22

; 77   :         SetLastError(ERROR_DLL_INIT_FAILED);

  00058	e383005a	 orr         r0, r3, #0x5A

; 78   :         goto cleanUp;

  0005c	ea0000bb	 b           |$LN30@DmaDiAlloc|
  00060		 |$LN29@DmaDiAlloc|
  00060	e59d003c	 ldr         r0, [sp, #0x3C]
  00064		 |$LN19@DmaDiAlloc|

; 79   :         }
; 80   : 
; 81   :     // ensure valid request
; 82   :     if(NumberOfChannels > OMAP_DMA_LOGICAL_CHANNEL_COUNT)

  00064	e3500020	 cmp         r0, #0x20
  00068	9a000007	 bls         |$LN18@DmaDiAlloc|

; 83   :         {
; 84   :         ERRORMSG(TRUE, (
; 85   :                         L"DmaDiAllocateInterrupt: NumberOfChannels too large\r\n"
; 86   :                        ));

  0006c	e59f12fc	 ldr         r1, [pc, #0x2FC]
  00070	e59f02f4	 ldr         r0, [pc, #0x2F4]
  00074	e3a02056	 mov         r2, #0x56
  00078	eb000000	 bl          NKDbgPrintfW
  0007c	e59f0314	 ldr         r0, [pc, #0x314]
  00080	eb000000	 bl          NKDbgPrintfW

; 87   :         SetLastError(ERROR_INVALID_PARAMETER);

  00084	e3a00057	 mov         r0, #0x57

; 88   :         goto cleanUp;

  00088	ea0000b0	 b           |$LN30@DmaDiAlloc|
  0008c		 |$LN18@DmaDiAlloc|

; 89   :         }
; 90   : 
; 91   :     // allocate array of dma dedicated interrupt context
; 92   :     pContext = (CeddkDmaDIContext_t*)LocalAlloc(LPTR, sizeof(CeddkDmaDIContext_t));

  0008c	e3a0102c	 mov         r1, #0x2C
  00090	e3a00040	 mov         r0, #0x40
  00094	eb000000	 bl          LocalAlloc
  00098	e1b04000	 movs        r4, r0

; 93   :     if (pContext == NULL)

  0009c	1a000006	 bne         |$LN17@DmaDiAlloc|

; 94   :         {
; 95   :         ERRORMSG(TRUE, (
; 96   :                         L"DmaDiAllocateInterrupt: memory allocation failure\r\n"
; 97   :                        ));

  000a0	e3a02061	 mov         r2, #0x61
  000a4		 |$LN34@DmaDiAlloc|
  000a4	e59f02c0	 ldr         r0, [pc, #0x2C0]
  000a8	e59f12c0	 ldr         r1, [pc, #0x2C0]
  000ac	eb000000	 bl          NKDbgPrintfW
  000b0	e59f02dc	 ldr         r0, [pc, #0x2DC]
  000b4	eb000000	 bl          NKDbgPrintfW

; 98   :         //last error already set
; 99   :         goto cleanUp;

  000b8	ea00006c	 b           |$LN28@DmaDiAlloc|
  000bc		 |$LN17@DmaDiAlloc|

; 100  :         }
; 101  :     pContext->cookie = DMA_DEDICATED_INTERRUPT_HANDLE_COOKIE;

  000bc	e59f32cc	 ldr         r3, [pc, #0x2CC]

; 102  :     pContext->NumberOfChannels = NumberOfChannels;
; 103  : 
; 104  :     //request the interrupt and channels
; 105  :     {
; 106  :     IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT_OUT bufferOut;
; 107  : 
; 108  :     if (!DeviceIoControl(
; 109  :             g_hDmaDrv, IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT, 
; 110  :             (VOID*)&NumberOfChannels, sizeof(IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT_IN), 
; 111  :             (VOID*)&bufferOut, sizeof(IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT_OUT), 
; 112  :             NULL, NULL))

  000c0	e59f12c4	 ldr         r1, [pc, #0x2C4]
  000c4	e3a0800c	 mov         r8, #0xC
  000c8	e5843000	 str         r3, [r4]
  000cc	e59d303c	 ldr         r3, [sp, #0x3C]
  000d0	e28de010	 add         lr, sp, #0x10
  000d4	e3a09000	 mov         r9, #0
  000d8	e5843010	 str         r3, [r4, #0x10]
  000dc	e5950000	 ldr         r0, [r5]
  000e0	e3a03004	 mov         r3, #4
  000e4	e28d203c	 add         r2, sp, #0x3C
  000e8	e58d900c	 str         r9, [sp, #0xC]
  000ec	e58d9008	 str         r9, [sp, #8]
  000f0	e58d8004	 str         r8, [sp, #4]
  000f4	e58de000	 str         lr, [sp]
  000f8	eb000000	 bl          DeviceIoControl
  000fc	e3500000	 cmp         r0, #0
  00100	1a000009	 bne         |$LN16@DmaDiAlloc|

; 113  :         {
; 114  :         // ERROR_BUSY indcates that max channels or max interrupts requested, don't print error
; 115  :         if(GetLastError() != ERROR_BUSY)

  00104	eb000000	 bl          GetLastError
  00108	e35000aa	 cmp         r0, #0xAA
  0010c	0a000057	 beq         |$LN28@DmaDiAlloc|

; 116  :             {
; 117  :             ERRORMSG(TRUE, (
; 118  :                         L"DmaDiAllocateInterrupt: IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT failure\r\n"
; 119  :                        ));

  00110	e59f1258	 ldr         r1, [pc, #0x258]
  00114	e59f0250	 ldr         r0, [pc, #0x250]
  00118	e3a02077	 mov         r2, #0x77
  0011c	eb000000	 bl          NKDbgPrintfW
  00120	e59f0260	 ldr         r0, [pc, #0x260]
  00124	eb000000	 bl          NKDbgPrintfW
  00128	ea000050	 b           |$LN28@DmaDiAlloc|
  0012c		 |$LN16@DmaDiAlloc|

; 120  :             }
; 121  : 
; 122  :         //last error already set
; 123  :         goto cleanUp;
; 124  :         }
; 125  : 
; 126  :     pContext->IrqNum = bufferOut.IrqNum;

  0012c	e59d3010	 ldr         r3, [sp, #0x10]

; 127  :     pContext->DmaControllerPhysAddr = bufferOut.DmaControllerPhysAddr;

  00130	e59d2014	 ldr         r2, [sp, #0x14]

; 128  :     pContext->ffDmaChannels = bufferOut.ffDmaChannels;

  00134	e59d1018	 ldr         r1, [sp, #0x18]
  00138	e5843008	 str         r3, [r4, #8]
  0013c	e5842004	 str         r2, [r4, #4]
  00140	e5841014	 str         r1, [r4, #0x14]

; 129  :     }
; 130  : 
; 131  :     // allocate array of channel register pointers
; 132  :     pContext->ChannelContextArray = (CeddkDmaDIChannelContext_t *)LocalAlloc(LPTR, (sizeof(CeddkDmaDIChannelContext_t) * NumberOfChannels));

  00144	e59d303c	 ldr         r3, [sp, #0x3C]
  00148	e3a00040	 mov         r0, #0x40
  0014c	e1a01203	 mov         r1, r3, lsl #4
  00150	eb000000	 bl          LocalAlloc
  00154	e3500000	 cmp         r0, #0

; 133  :     if (pContext->ChannelContextArray == NULL)
; 134  :         {
; 135  :         ERRORMSG(TRUE, (
; 136  :                         L"DmaDiAllocateInterrupt: memory allocation failure\r\n"
; 137  :                        ));

  00158	03a02089	 moveq       r2, #0x89
  0015c	e5840028	 str         r0, [r4, #0x28]
  00160	0affffcf	 beq         |$LN34@DmaDiAlloc|

; 138  :         //last error already set
; 139  :         goto cleanUp;
; 140  :         }
; 141  :     
; 142  :     // map memory to registers
; 143  :     pa.HighPart = 0;
; 144  :     pa.LowPart = pContext->DmaControllerPhysAddr;

  00164	e5940004	 ldr         r0, [r4, #4]
  00168	e3a01000	 mov         r1, #0

; 145  :     pContext->pDmaRegs = (OMAP_SDMA_REGS*)MmMapIoSpace(pa, 
; 146  :                                                 sizeof(OMAP_SDMA_REGS), 
; 147  :                                                 FALSE
; 148  :                                                 );

  0016c	e3a03000	 mov         r3, #0
  00170	e3a02d32	 mov         r2, #0x32, 26
  00174	eb000000	 bl          MmMapIoSpace
  00178	e3500000	 cmp         r0, #0
  0017c	e5840018	 str         r0, [r4, #0x18]

; 149  :     if (pContext->pDmaRegs == NULL)

  00180	1a000006	 bne         |$LN13@DmaDiAlloc|

; 150  :         {
; 151  :         ERRORMSG(TRUE, (
; 152  :                         L"DmaDiAllocateInterrupt: MmMapIoSpace failure\r\n"
; 153  :                        ));

  00184	e59f11e4	 ldr         r1, [pc, #0x1E4]
  00188	e59f01dc	 ldr         r0, [pc, #0x1DC]
  0018c	e3a02099	 mov         r2, #0x99
  00190	eb000000	 bl          NKDbgPrintfW
  00194	e59f01e8	 ldr         r0, [pc, #0x1E8]
  00198	eb000000	 bl          NKDbgPrintfW
  0019c	ea000033	 b           |$LN28@DmaDiAlloc|
  001a0		 |$LN13@DmaDiAlloc|

; 154  :         //last error already set
; 155  :         goto cleanUp;
; 156  :         }
; 157  : 
; 158  :     // Get the Mask and Status registers for the coresponding SDMA IRQ
; 159  :     if (dwDmaStartIrq == -1)

  001a0	e59f51d8	 ldr         r5, [pc, #0x1D8]
  001a4	e5952000	 ldr         r2, [r5]
  001a8	e3720001	 cmn         r2, #1
  001ac	1a000005	 bne         |$LN12@DmaDiAlloc|

; 160  :     {
; 161  :         dwDmaStartIrq = GetIrqByDevice(SOCGetDMADevice(0),L"IRQ0");

  001b0	e3a00000	 mov         r0, #0
  001b4	eb000000	 bl          SOCGetDMADevice
  001b8	e59f11bc	 ldr         r1, [pc, #0x1BC]
  001bc	eb000000	 bl          GetIrqByDevice
  001c0	e1a02000	 mov         r2, r0
  001c4	e5852000	 str         r2, [r5]
  001c8		 |$LN12@DmaDiAlloc|

; 162  :     }
; 163  : 
; 164  :     pContext->pMaskRegister = (volatile DWORD*)(&pContext->pDmaRegs->DMA4_IRQENABLE_L0) + (pContext->IrqNum - dwDmaStartIrq);

  001c8	e5943008	 ldr         r3, [r4, #8]
  001cc	e5941018	 ldr         r1, [r4, #0x18]

; 165  :     pContext->pStatusRegister = (volatile DWORD*)(&pContext->pDmaRegs->DMA4_IRQSTATUS_L0) + (pContext->IrqNum - dwDmaStartIrq);
; 166  : 
; 167  :     // get system interrupt for irq
; 168  :     if (!KernelIoControl(IOCTL_HAL_REQUEST_SYSINTR, &pContext->IrqNum, 
; 169  :             sizeof(pContext->IrqNum), &pContext->SysInterruptNum, sizeof(pContext->SysInterruptNum), 
; 170  :             NULL)) 

  001d0	e59f01a0	 ldr         r0, [pc, #0x1A0]
  001d4	e0433002	 sub         r3, r3, r2
  001d8	e2832006	 add         r2, r3, #6
  001dc	e2833002	 add         r3, r3, #2
  001e0	e0813103	 add         r3, r1, r3, lsl #2
  001e4	e0812102	 add         r2, r1, r2, lsl #2
  001e8	e5843020	 str         r3, [r4, #0x20]
  001ec	e3a0e004	 mov         lr, #4
  001f0	e584201c	 str         r2, [r4, #0x1C]
  001f4	e284300c	 add         r3, r4, #0xC
  001f8	e3a02004	 mov         r2, #4
  001fc	e2841008	 add         r1, r4, #8
  00200	e58d9004	 str         r9, [sp, #4]
  00204	e58de000	 str         lr, [sp]
  00208	eb000000	 bl          KernelIoControl
  0020c	e3500000	 cmp         r0, #0
  00210	1a000007	 bne         |$LN11@DmaDiAlloc|

; 171  :         {
; 172  :         ERRORMSG(TRUE, (L"DmaDiAllocateInterrupt "
; 173  :             L"Failed map DMA interrupt(irq=%d)\r\n", pContext->IrqNum
; 174  :             ));

  00214	e59f1154	 ldr         r1, [pc, #0x154]
  00218	e59f014c	 ldr         r0, [pc, #0x14C]
  0021c	e3a020ae	 mov         r2, #0xAE
  00220	eb000000	 bl          NKDbgPrintfW
  00224	e5941008	 ldr         r1, [r4, #8]
  00228	e59f0144	 ldr         r0, [pc, #0x144]
  0022c	eb000000	 bl          NKDbgPrintfW

; 175  :         //last error already set
; 176  :         goto cleanUp;

  00230	ea00000e	 b           |$LN28@DmaDiAlloc|
  00234		 |$LN11@DmaDiAlloc|

; 177  :         }
; 178  : 
; 179  :     // register event handle with system interrupt
; 180  :     if (!InterruptInitialize(pContext->SysInterruptNum, hInterruptEvent, NULL, 0)) 

  00234	e594000c	 ldr         r0, [r4, #0xC]
  00238	e3a03000	 mov         r3, #0
  0023c	e3a02000	 mov         r2, #0
  00240	e1a01006	 mov         r1, r6
  00244	eb000000	 bl          InterruptInitialize
  00248	e3500000	 cmp         r0, #0
  0024c	1a00000d	 bne         |$LN10@DmaDiAlloc|

; 181  :         {
; 182  :         ERRORMSG(TRUE, (L"DmaDiAllocateInterrupt "
; 183  :             L"InterruptInitialize failed\r\n"
; 184  :             ));

  00250	e59f1118	 ldr         r1, [pc, #0x118]
  00254	e59f0110	 ldr         r0, [pc, #0x110]
  00258	e3a020b8	 mov         r2, #0xB8
  0025c	eb000000	 bl          NKDbgPrintfW
  00260	e59f0100	 ldr         r0, [pc, #0x100]
  00264	eb000000	 bl          NKDbgPrintfW

; 185  :         SetLastError(ERROR_GEN_FAILURE);

  00268	e3a0001f	 mov         r0, #0x1F
  0026c	eb000000	 bl          SetLastError
  00270		 |$LN28@DmaDiAlloc|

; 240  : 
; 241  : cleanUp:
; 242  :     // request dma channel
; 243  :     if (rc == FALSE && pContext != NULL)

  00270	e3540000	 cmp         r4, #0
  00274	0a000036	 beq         |$LN1@DmaDiAlloc|

; 244  :         {
; 245  :         DmaDeallocateContext(pContext);

  00278	e1a00004	 mov         r0, r4
  0027c	eb000000	 bl          DmaDeallocateContext

; 246  :         pContext = NULL;

  00280	e3a04000	 mov         r4, #0
  00284	ea000032	 b           |$LN1@DmaDiAlloc|
  00288		 |$LN10@DmaDiAlloc|

; 186  :         goto cleanUp;
; 187  :         }
; 188  :     else
; 189  :         {
; 190  :         pContext->hInterruptEvent = hInterruptEvent;
; 191  :         }
; 192  : 
; 193  :     // configure channel info
; 194  :     {
; 195  :     DWORD HandleIndex =0;
; 196  :     CeddkDmaDIChannelContext_t *pChannelContext = pContext->ChannelContextArray;

  00288	e5942028	 ldr         r2, [r4, #0x28]

; 197  :     DWORD ff = 1;
; 198  : 
; 199  :     for(i =0; i < OMAP_DMA_LOGICAL_CHANNEL_COUNT; i++)

  0028c	e59f50d0	 ldr         r5, [pc, #0xD0]
  00290	e5846024	 str         r6, [r4, #0x24]
  00294	e3a01001	 mov         r1, #1
  00298	e3a0e000	 mov         lr, #0
  0029c	e3a00000	 mov         r0, #0
  002a0		 |$LL8@DmaDiAlloc|

; 200  :         {
; 201  :         if(ff & pContext->ffDmaChannels)

  002a0	e5943014	 ldr         r3, [r4, #0x14]
  002a4	e1130001	 tst         r3, r1
  002a8	0a000008	 beq         |$LN5@DmaDiAlloc|

; 202  :             {
; 203  :             //initalize the cookie
; 204  :             pChannelContext->cookie = DMA_DEDICATED_CHANNEL_HANDLE_COOKIE;

  002ac	e5825000	 str         r5, [r2]

; 205  : 
; 206  :             //Save index of the channel
; 207  :             pChannelContext->index = i;

  002b0	e582e008	 str         lr, [r2, #8]

; 208  : 
; 209  :             //Save the bit mask
; 210  :             pChannelContext->ChannelIntMask = ff;

  002b4	e582100c	 str         r1, [r2, #0xC]

; 211  : 
; 212  :             // get pointer to the channel registers
; 213  :             pChannelContext->pDmaChannel = &pContext->pDmaRegs->CHNL_CTRL[i];

  002b8	e5943018	 ldr         r3, [r4, #0x18]
  002bc	e0833000	 add         r3, r3, r0
  002c0	e2833080	 add         r3, r3, #0x80
  002c4	e5823004	 str         r3, [r2, #4]

; 214  : 
; 215  :             //return a handle to the channel registers such that dma_utility functions can be used.
; 216  :             phChannelHandles[HandleIndex] = (void*) pChannelContext;

  002c8	e4872004	 str         r2, [r7], #4

; 217  : 
; 218  :             //Point to next entry
; 219  :             pChannelContext++;

  002cc	e2822010	 add         r2, r2, #0x10
  002d0		 |$LN5@DmaDiAlloc|
  002d0	e2800060	 add         r0, r0, #0x60
  002d4	e3500b03	 cmp         r0, #3, 22

; 220  :             HandleIndex++;
; 221  :             }
; 222  :         ff <<= 1;

  002d8	e1a01081	 mov         r1, r1, lsl #1
  002dc	e28ee001	 add         lr, lr, #1
  002e0	3affffee	 bcc         |$LL8@DmaDiAlloc|

; 223  :         }
; 224  :         
; 225  :     }
; 226  : 
; 227  :     // reset dma interrupts and status
; 228  :     WRITE_REGISTER_ULONG(pContext->pMaskRegister, pContext->ffDmaChannels);

  002e4	e5942014	 ldr         r2, [r4, #0x14]
  002e8	e594301c	 ldr         r3, [r4, #0x1C]

; 229  :     WRITE_REGISTER_ULONG(pContext->pStatusRegister, 0xFFFFFFFF);

  002ec	e3e00000	 mvn         r0, #0

; 230  : 
; 231  :     // clear interrupt status 
; 232  :     for(i =0; i < NumberOfChannels; i++)

  002f0	e3a01000	 mov         r1, #0
  002f4	e5832000	 str         r2, [r3]
  002f8	e5943020	 ldr         r3, [r4, #0x20]
  002fc	e5830000	 str         r0, [r3]
  00300	e59d303c	 ldr         r3, [sp, #0x3C]
  00304	e3530000	 cmp         r3, #0
  00308	0a00000f	 beq         |$LN2@DmaDiAlloc|
  0030c	e3a03c0f	 mov         r3, #0xF, 24
  00310	e38300fe	 orr         r0, r3, #0xFE
  00314	e3a02000	 mov         r2, #0
  00318		 |$LL4@DmaDiAlloc|

; 233  :         {
; 234  :         WRITE_REGISTER_ULONG(&pContext->ChannelContextArray[i].pDmaChannel->CSR, 0x00000FFE);

  00318	e5943028	 ldr         r3, [r4, #0x28]
  0031c	e2811001	 add         r1, r1, #1
  00320	e0833002	 add         r3, r3, r2
  00324	e5933004	 ldr         r3, [r3, #4]
  00328	e583000c	 str         r0, [r3, #0xC]

; 235  :         WRITE_REGISTER_ULONG(&pContext->ChannelContextArray[i].pDmaChannel->CLNK_CTRL, 0x00000000);

  0032c	e5943028	 ldr         r3, [r4, #0x28]
  00330	e0833002	 add         r3, r3, r2
  00334	e5933004	 ldr         r3, [r3, #4]
  00338	e2822010	 add         r2, r2, #0x10
  0033c	e5839004	 str         r9, [r3, #4]
  00340	e59d303c	 ldr         r3, [sp, #0x3C]
  00344	e1510003	 cmp         r1, r3
  00348	3afffff2	 bcc         |$LL4@DmaDiAlloc|
  0034c		 |$LN2@DmaDiAlloc|

; 236  :         }
; 237  : 
; 238  :     rc = TRUE;
; 239  :     SetLastError(ERROR_SUCCESS);

  0034c	e3a00000	 mov         r0, #0
  00350		 |$LN30@DmaDiAlloc|
  00350		 |$cleanUp$44066|
  00350	eb000000	 bl          SetLastError

; 246  :         pContext = NULL;

  00354		 |$LN1@DmaDiAlloc|

; 247  :         }
; 248  :     
; 249  :     return pContext;    
; 250  : }

  00354	e1a00004	 mov         r0, r4
  00358	e28dd01c	 add         sp, sp, #0x1C
  0035c	e89d63f0	 ldmia       sp, {r4 - r9, sp, lr}
  00360	e12fff1e	 bx          lr
  00364		 |$LN38@DmaDiAlloc|
  00364		 |$LN39@DmaDiAlloc|
  00364	43a608f2	 DCD         0x43a608f2
  00368		 |$LN40@DmaDiAlloc|
  00368	00000000	 DCD         |??_C@_1GI@BNFFDFCM@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@|
  0036c		 |$LN41@DmaDiAlloc|
  0036c	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00370		 |$LN42@DmaDiAlloc|
  00370	00000000	 DCD         |??_C@_1KO@IEMELEG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00374		 |$LN43@DmaDiAlloc|
  00374	00000000	 DCD         |??_C@_1HE@BELIOLMC@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa@|
  00378		 |$LN44@DmaDiAlloc|
  00378	01010098	 DCD         0x1010098
  0037c		 |$LN45@DmaDiAlloc|
  0037c	00000000	 DCD         |??_C@_19FOCAGMKL@?$AAI?$AAR?$AAQ?$AA0?$AA?$AA@|
  00380		 |$LN46@DmaDiAlloc|
  00380	00000000	 DCD         |?dwDmaStartIrq@?1??DmaDiAllocateInterrupt@@9@9|
  00384		 |$LN47@DmaDiAlloc|
  00384	00000000	 DCD         |??_C@_1FO@GCGOBMBN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS@|
  00388		 |$LN48@DmaDiAlloc|
  00388	00000000	 DCD         |??_C@_1JA@KILAOCLM@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAM@|
  0038c		 |$LN49@DmaDiAlloc|
  0038c	01da041c	 DCD         0x1da041c
  00390		 |$LN50@DmaDiAlloc|
  00390	43a608f1	 DCD         0x43a608f1
  00394		 |$LN51@DmaDiAlloc|
  00394	00000000	 DCD         |??_C@_1GI@PLLCPBPA@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAa@|
  00398		 |$LN52@DmaDiAlloc|
  00398	00000000	 DCD         |??_C@_1GK@BAJGPPFD@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AAO?$AAf@|
  0039c		 |$LN53@DmaDiAlloc|
  0039c	00000000	 DCD         |??_C@_1GI@NOOLDBAN@?$AAD?$AAm?$AAa?$AAD?$AAi?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AAa?$AAt?$AAe@|
  003a0		 |$LN54@DmaDiAlloc|
  003a0	00000000	 DCD         |g_hDmaDrv|
  003a4		 |$M44529|

			 ENDP  ; |DmaDiAllocateInterrupt|

	END
