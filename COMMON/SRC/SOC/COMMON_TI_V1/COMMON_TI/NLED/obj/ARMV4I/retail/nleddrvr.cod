; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\NLED\nleddrvr.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|g_BlinkParams|, 0x4

	 COMMON	|g_NLedCurrentState|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|g_hGPIO| %	0x4
|g_bExitThread| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T44821| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M44818|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M44819|

			 ENDP  ; |SetEvent|

	IMPORT	|GPIOClrBit|
	IMPORT	|GPIOSetBit|
	IMPORT	|g_dwNbLeds|
	IMPORT	|g_GPIOId|
	IMPORT	|g_GPIOActiveState|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\nled\nleddrvr.c

  00000			 AREA	 |.pdata|, PDATA
|$T44832| DCD	|$LN16@NLedDriver|
	DCD	0x40002301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NLedDriverSetLedState| PROC

; 82   : {

  00000		 |$LN16@NLedDriver|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M44829|

; 83   :     if (LedNum >= g_dwNbLeds)

  00004	e59f307c	 ldr         r3, [pc, #0x7C]
  00008	e5933000	 ldr         r3, [r3]
  0000c	e1500003	 cmp         r0, r3
  00010	2a00000c	 bcs         |$LN4@NLedDriver|

; 84   :     {
; 85   :         DEBUGMSG(ZONE_ERROR, (TEXT("ERROR: NLedDriverSetLedState: invalid NLED number: %d\r\n"), LedNum));
; 86   :         return;
; 87   :     }
; 88   : 
; 89   :     switch (LedState)

  00014	e3510000	 cmp         r1, #0
  00018	0a00000c	 beq         |$LN6@NLedDriver|
  0001c	e3510001	 cmp         r1, #1
  00020	1a000008	 bne         |$LN4@NLedDriver|

; 97   :             break;
; 98   : 
; 99   :         case 1:
; 100  :             // turn LED on
; 101  :             if (g_GPIOActiveState[LedNum])

  00024	e59f3058	 ldr         r3, [pc, #0x58]

; 102  :                 GPIOSetBit(g_hGPIO, g_GPIOId[LedNum]);

  00028	e59f2050	 ldr         r2, [pc, #0x50]
  0002c	e7933100	 ldr         r3, [r3, +r0, lsl #2]
  00030	e3530000	 cmp         r3, #0
  00034	e59f3040	 ldr         r3, [pc, #0x40]
  00038	e7931100	 ldr         r1, [r3, +r0, lsl #2]
  0003c	e5920000	 ldr         r0, [r2]

; 103  :             else

  00040	0a00000a	 beq         |$LN13@NLedDriver|
  00044		 |$LN12@NLedDriver|

; 95   :             else
; 96   :                 GPIOSetBit(g_hGPIO, g_GPIOId[LedNum]);

  00044	eb000000	 bl          GPIOSetBit
  00048		 |$LN4@NLedDriver|

; 104  :                 GPIOClrBit(g_hGPIO, g_GPIOId[LedNum]);
; 105  :             break;
; 106  :     }
; 107  : }

  00048	e49de004	 ldr         lr, [sp], #4
  0004c	e12fff1e	 bx          lr
  00050		 |$LN6@NLedDriver|

; 90   :     {
; 91   :         case 0:
; 92   :             // turn LED off 
; 93   :             if (g_GPIOActiveState[LedNum])

  00050	e59f302c	 ldr         r3, [pc, #0x2C]

; 94   :                 GPIOClrBit(g_hGPIO, g_GPIOId[LedNum]);

  00054	e59f2024	 ldr         r2, [pc, #0x24]
  00058	e7933100	 ldr         r3, [r3, +r0, lsl #2]
  0005c	e3530000	 cmp         r3, #0
  00060	e59f3014	 ldr         r3, [pc, #0x14]
  00064	e7931100	 ldr         r1, [r3, +r0, lsl #2]
  00068	e5920000	 ldr         r0, [r2]
  0006c	0afffff4	 beq         |$LN12@NLedDriver|
  00070		 |$LN13@NLedDriver|
  00070	eb000000	 bl          GPIOClrBit

; 104  :                 GPIOClrBit(g_hGPIO, g_GPIOId[LedNum]);
; 105  :             break;
; 106  :     }
; 107  : }

  00074	e49de004	 ldr         lr, [sp], #4
  00078	e12fff1e	 bx          lr
  0007c		 |$LN17@NLedDriver|
  0007c		 |$LN18@NLedDriver|
  0007c	00000000	 DCD         |g_GPIOId|
  00080		 |$LN19@NLedDriver|
  00080	00000000	 DCD         |g_hGPIO|
  00084		 |$LN20@NLedDriver|
  00084	00000000	 DCD         |g_GPIOActiveState|
  00088		 |$LN21@NLedDriver|
  00088	00000000	 DCD         |g_dwNbLeds|
  0008c		 |$M44830|

			 ENDP  ; |NLedDriverSetLedState|

	EXPORT	|NLedControlThread|
	IMPORT	|WaitForSingleObject|

  00008			 AREA	 |.bss|, NOINIT
|g_hLedHandle| % 0x4
|g_hLedHandle| % 0x4

  00000			 AREA	 |.pdata|, PDATA
|$T44873| DCD	|$LN47@NLedContro|
	DCD	0x40007a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NLedControlThread| PROC

; 112  : {

  00000		 |$LN47@NLedContro|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M44870|
  00004	e1a04000	 mov         r4, r0

; 113  :     int i;
; 114  : 
; 115  :     // turn NLED off
; 116  :     NLedDriverSetLedState(NLedID, 0);

  00008	e3a01000	 mov         r1, #0
  0000c	eb000000	 bl          NLedDriverSetLedState
  00010	e59f51cc	 ldr         r5, [pc, #0x1CC]
  00014	e59f71c4	 ldr         r7, [pc, #0x1C4]
  00018	e59f81bc	 ldr         r8, [pc, #0x1BC]
  0001c	e59fb1b4	 ldr         r11, [pc, #0x1B4]
  00020		 |$LL34@NLedContro|
  00020	e064a184	 rsb         r10, r4, r4, lsl #3
  00024	e0649184	 rsb         r9, r4, r4, lsl #3
  00028		 |$StateChangeDueToApiCall$44643|
  00028	e598300c	 ldr         r3, [r8, #0xC]

; 117  : 
; 118  :     for(;;)
; 119  :     {
; 120  :         StateChangeDueToApiCall:
; 121  : 
; 122  :         if (g_bExitThread == TRUE)

  0002c	e3530001	 cmp         r3, #1
  00030	0a000065	 beq         |$LN31@NLedContro|
  00034	e5953000	 ldr         r3, [r5]
  00038	e5972000	 ldr         r2, [r7]

; 123  :             break;
; 124  : 
; 125  :         // check unchanged NLED state
; 126  :         if ( g_NLedCurrentState[NLedID] == g_BlinkParams[NLedID].OffOnBlink )

  0003c	e083310a	 add         r3, r3, r10, lsl #2
  00040	e5933004	 ldr         r3, [r3, #4]
  00044	e7922104	 ldr         r2, [r2, +r4, lsl #2]
  00048	e1520003	 cmp         r2, r3
  0004c	1a00003f	 bne         |$LN14@NLedContro|

; 127  :         {
; 128  :             // handle blinking state
; 129  :             if ( g_NLedCurrentState[NLedID] == 2 )

  00050	e3520002	 cmp         r2, #2
  00054	1a000038	 bne         |$LN13@NLedContro|

; 130  :             {
; 131  :                 // Do meta cycle on blinks (just do regular blink cycle if Meta is 0)
; 132  :                 //DEBUGMSG(ZONE_FUNCTION, (TEXT("NLED%d MetaCycleOn %d periods\r\n"), NLedID, g_BlinkParams[NLedID].MetaCycleOn));
; 133  :                 for (i = 0; i < (g_BlinkParams[NLedID].MetaCycleOn == 0 ? 1 : g_BlinkParams[NLedID].MetaCycleOn); i++)

  00058	e3a06000	 mov         r6, #0
  0005c		 |$LL12@NLedContro|

; 113  :     int i;
; 114  : 
; 115  :     // turn NLED off
; 116  :     NLedDriverSetLedState(NLedID, 0);

  0005c	e5953000	 ldr         r3, [r5]

; 130  :             {
; 131  :                 // Do meta cycle on blinks (just do regular blink cycle if Meta is 0)
; 132  :                 //DEBUGMSG(ZONE_FUNCTION, (TEXT("NLED%d MetaCycleOn %d periods\r\n"), NLedID, g_BlinkParams[NLedID].MetaCycleOn));
; 133  :                 for (i = 0; i < (g_BlinkParams[NLedID].MetaCycleOn == 0 ? 1 : g_BlinkParams[NLedID].MetaCycleOn); i++)

  00060	e083310a	 add         r3, r3, r10, lsl #2
  00064	e5933014	 ldr         r3, [r3, #0x14]
  00068	e3530000	 cmp         r3, #0
  0006c	03a03001	 moveq       r3, #1
  00070	e1560003	 cmp         r6, r3
  00074	aa00001f	 bge         |$LN10@NLedContro|

; 134  :                 {
; 135  :                     // turn NLED on
; 136  :                     NLedDriverSetLedState(NLedID, 1);

  00078	e3a01001	 mov         r1, #1
  0007c	e1a00004	 mov         r0, r4
  00080	eb000000	 bl          NLedDriverSetLedState

; 137  : 
; 138  :                     // wait for on time (or change from API call)
; 139  :                     if ( WaitForSingleObject(g_hLedHandle[NLedID], (g_BlinkParams[NLedID].OnTime / 1000)) == WAIT_OBJECT_0 )

  00084	e5953000	 ldr         r3, [r5]
  00088	e5982000	 ldr         r2, [r8]
  0008c	e083310a	 add         r3, r3, r10, lsl #2
  00090	e593e00c	 ldr         lr, [r3, #0xC]
  00094	e7920104	 ldr         r0, [r2, +r4, lsl #2]
  00098	e0c32b9e	 smull       r2, r3, lr, r11
  0009c	e1a03343	 mov         r3, r3, asr #6
  000a0	e0831fa3	 add         r1, r3, r3, lsr #31
  000a4	eb000000	 bl          WaitForSingleObject
  000a8	e3500000	 cmp         r0, #0
  000ac	0affffdd	 beq         |$StateChangeDueToApiCall$44643|

; 140  :                         goto StateChangeDueToApiCall;
; 141  : 
; 142  :                     // turn NLED off
; 143  :                     NLedDriverSetLedState(NLedID, 0);

  000b0	e3a01000	 mov         r1, #0
  000b4	e1a00004	 mov         r0, r4
  000b8	eb000000	 bl          NLedDriverSetLedState

; 144  : 
; 145  :                     // wait for off time (or change from API call)
; 146  :                     if ( WaitForSingleObject(g_hLedHandle[NLedID], ((g_BlinkParams[NLedID].TotalCycleTime - g_BlinkParams[NLedID].OnTime) / 1000)) == WAIT_OBJECT_0 )

  000bc	e5953000	 ldr         r3, [r5]
  000c0	e5981000	 ldr         r1, [r8]
  000c4	e083310a	 add         r3, r3, r10, lsl #2
  000c8	e5932008	 ldr         r2, [r3, #8]
  000cc	e593300c	 ldr         r3, [r3, #0xC]
  000d0	e7910104	 ldr         r0, [r1, +r4, lsl #2]
  000d4	e042e003	 sub         lr, r2, r3
  000d8	e0c32b9e	 smull       r2, r3, lr, r11
  000dc	e1a03343	 mov         r3, r3, asr #6
  000e0	e0831fa3	 add         r1, r3, r3, lsr #31
  000e4	eb000000	 bl          WaitForSingleObject
  000e8	e3500000	 cmp         r0, #0
  000ec	0affffcb	 beq         |$LL34@NLedContro|

; 130  :             {
; 131  :                 // Do meta cycle on blinks (just do regular blink cycle if Meta is 0)
; 132  :                 //DEBUGMSG(ZONE_FUNCTION, (TEXT("NLED%d MetaCycleOn %d periods\r\n"), NLedID, g_BlinkParams[NLedID].MetaCycleOn));
; 133  :                 for (i = 0; i < (g_BlinkParams[NLedID].MetaCycleOn == 0 ? 1 : g_BlinkParams[NLedID].MetaCycleOn); i++)

  000f0	e2866001	 add         r6, r6, #1
  000f4	eaffffd8	 b           |$LL12@NLedContro|
  000f8		 |$LN10@NLedContro|

; 113  :     int i;
; 114  : 
; 115  :     // turn NLED off
; 116  :     NLedDriverSetLedState(NLedID, 0);

  000f8	e5953000	 ldr         r3, [r5]

; 147  :                         goto StateChangeDueToApiCall;
; 148  :                 }
; 149  : 
; 150  :                 // check for meta off specified, wait for that time period (or change from API call)
; 151  :                 //DEBUGMSG(ZONE_FUNCTION, (TEXT("NLED%d MetaCycleOff %d periods\r\n"), NLedID, g_BlinkParams[NLedID].MetaCycleOff));
; 152  :                 if ( g_BlinkParams[NLedID].MetaCycleOff > 0 )

  000fc	e0642184	 rsb         r2, r4, r4, lsl #3
  00100	e0833102	 add         r3, r3, r2, lsl #2
  00104	e5936018	 ldr         r6, [r3, #0x18]
  00108	e3560000	 cmp         r6, #0
  0010c	daffffc3	 ble         |$LL34@NLedContro|

; 153  :                 {
; 154  :                     if ( WaitForSingleObject(g_hLedHandle[NLedID], (((g_BlinkParams[NLedID].OffTime + g_BlinkParams[NLedID].OnTime) / 1000) * g_BlinkParams[NLedID].MetaCycleOff)) == WAIT_OBJECT_0 )

  00110	e5932010	 ldr         r2, [r3, #0x10]
  00114	e593300c	 ldr         r3, [r3, #0xC]
  00118	e5981000	 ldr         r1, [r8]
  0011c	e082e003	 add         lr, r2, r3
  00120	e0c32b9e	 smull       r2, r3, lr, r11
  00124	e7910104	 ldr         r0, [r1, +r4, lsl #2]
  00128	e1a03343	 mov         r3, r3, asr #6
  0012c	e0833fa3	 add         r3, r3, r3, lsr #31
  00130	e0010693	 mul         r1, r3, r6
  00134	eb000000	 bl          WaitForSingleObject

; 155  :                         goto StateChangeDueToApiCall;
; 156  :                 }
; 157  :             }
; 158  :             else

  00138	eaffffba	 b           |$StateChangeDueToApiCall$44643|
  0013c		 |$LN13@NLedContro|

; 159  :             {
; 160  :                 // LED state unchanged, do nothing for on or off state except wait for API change
; 161  :                 WaitForSingleObject(g_hLedHandle[NLedID], INFINITE);

  0013c	e5983000	 ldr         r3, [r8]
  00140	e3e01000	 mvn         r1, #0
  00144	e7930104	 ldr         r0, [r3, +r4, lsl #2]
  00148	eb000000	 bl          WaitForSingleObject

; 162  :                 #if ENABLE_DEBUG_MESSAGES
; 163  :                     DEBUGMSG(ZONE_FUNCTION, (TEXT("NLED # %d driver thread awakened:\r\n"), NLedID));
; 164  :                 #endif
; 165  :             }
; 166  :         }
; 167  :         else

  0014c	eaffffb5	 b           |$StateChangeDueToApiCall$44643|
  00150		 |$LN14@NLedContro|

; 113  :     int i;
; 114  : 
; 115  :     // turn NLED off
; 116  :     NLedDriverSetLedState(NLedID, 0);

  00150	e5953000	 ldr         r3, [r5]

; 168  :         {
; 169  :             // LED state changed, update NLED for new state
; 170  :             #if ENABLE_DEBUG_MESSAGES
; 171  :                 DEBUGMSG(ZONE_FUNCTION, (TEXT("NLED # %d driver thread: Mode change to %d\r\n"), NLedID, g_BlinkParams[NLedID].OffOnBlink));
; 172  :             #endif
; 173  :             if ( g_BlinkParams[NLedID].OffOnBlink == 0 )

  00154	e0833109	 add         r3, r3, r9, lsl #2
  00158	e5933004	 ldr         r3, [r3, #4]
  0015c	e3530000	 cmp         r3, #0
  00160	1a000005	 bne         |$LN3@NLedContro|

; 174  :             {
; 175  :                 NLedDriverSetLedState(NLedID, 0);

  00164	e3a01000	 mov         r1, #0
  00168	e1a00004	 mov         r0, r4
  0016c	eb000000	 bl          NLedDriverSetLedState

; 176  :                 g_NLedCurrentState[NLedID] = 0;

  00170	e5973000	 ldr         r3, [r7]
  00174	e3a02000	 mov         r2, #0
  00178	e7832104	 str         r2, [r3, +r4, lsl #2]
  0017c		 |$LN3@NLedContro|
  0017c	e5953000	 ldr         r3, [r5]

; 177  :             }
; 178  :             if ( g_BlinkParams[NLedID].OffOnBlink == 1 )

  00180	e0833109	 add         r3, r3, r9, lsl #2
  00184	e5933004	 ldr         r3, [r3, #4]
  00188	e3530001	 cmp         r3, #1
  0018c	1a000005	 bne         |$LN2@NLedContro|

; 179  :             {
; 180  :                 NLedDriverSetLedState(NLedID, 1);

  00190	e3a01001	 mov         r1, #1
  00194	e1a00004	 mov         r0, r4
  00198	eb000000	 bl          NLedDriverSetLedState

; 181  :                 g_NLedCurrentState[NLedID] = 1;

  0019c	e5973000	 ldr         r3, [r7]
  001a0	e3a02001	 mov         r2, #1
  001a4	e7832104	 str         r2, [r3, +r4, lsl #2]
  001a8		 |$LN2@NLedContro|
  001a8	e5953000	 ldr         r3, [r5]

; 182  :             }
; 183  :             if ( g_BlinkParams[NLedID].OffOnBlink == 2 )

  001ac	e0833109	 add         r3, r3, r9, lsl #2
  001b0	e5933004	 ldr         r3, [r3, #4]
  001b4	e3530002	 cmp         r3, #2
  001b8	1affff9a	 bne         |$StateChangeDueToApiCall$44643|
  001bc	e5973000	 ldr         r3, [r7]

; 184  :                 g_NLedCurrentState[NLedID] = 2;

  001c0	e3a02002	 mov         r2, #2
  001c4	e7832104	 str         r2, [r3, +r4, lsl #2]

; 185  :         }
; 186  :     }

  001c8	eaffff96	 b           |$StateChangeDueToApiCall$44643|
  001cc		 |$LN31@NLedContro|

; 187  : 
; 188  :     DEBUGMSG(ZONE_INIT, (TEXT("NLedControlThread exiting!!\r\n"), NLedID));
; 189  : 
; 190  :     return 0;

  001cc	e3a00000	 mov         r0, #0

; 191  : }

  001d0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001d4	e12fff1e	 bx          lr
  001d8		 |$LN48@NLedContro|
  001d8		 |$LN49@NLedContro|
  001d8	10624dd3	 DCD         0x10624dd3
  001dc		 |$LN50@NLedContro|
  001dc	00000000	 DCD         |g_hLedHandle|
  001e0		 |$LN51@NLedContro|
  001e0	00000000	 DCD         |g_NLedCurrentState|
  001e4		 |$LN52@NLedContro|
  001e4	00000000	 DCD         |g_BlinkParams|
  001e8		 |$M44871|

			 ENDP  ; |NLedControlThread|

	EXPORT	|NLedDriverGetDeviceInfo|
	IMPORT	|SetLastError|
	IMPORT	|g_LastLEDIsVibrator|

  00000			 AREA	 |.pdata|, PDATA
|$T44889| DCD	|$LN16@NLedDriver@2|
	DCD	0x40005d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NLedDriverGetDeviceInfo| PROC

; 200  : {

  00000		 |$LN16@NLedDriver@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M44886|
  00004	e1a0e001	 mov         lr, r1
  00008	e3500000	 cmp         r0, #0

; 201  :     if ( nInfoId == NLED_COUNT_INFO_ID )

  0000c	1a000007	 bne         |$LN11@NLedDriver@2|

; 202  :     {
; 203  :         struct NLED_COUNT_INFO * p = (struct NLED_COUNT_INFO*)pOutput;
; 204  : 
; 205  :         if (p == NULL)

  00010	e35e0000	 cmp         lr, #0
  00014	0a00004e	 beq         |$ReturnError$44672|

; 206  :             goto ReturnError;
; 207  : 
; 208  :         // Fill in number of leds
; 209  :         p->cLeds = g_dwNbLeds;

  00018	e59f314c	 ldr         r3, [pc, #0x14C]

; 210  :         DEBUGMSG(ZONE_INIT, (TEXT("NLEDDRV: NLedDriverGetDeviceInfo(NLED_COUNT_INFO_ID...) returning %d NLEDs\n"), g_dwNbLeds));
; 211  :         return TRUE;

  0001c	e3a00001	 mov         r0, #1
  00020	e5933000	 ldr         r3, [r3]
  00024	e58e3000	 str         r3, [lr]

; 275  : }

  00028	e8bd4010	 ldmia       sp!, {r4, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$LN11@NLedDriver@2|

; 212  :     }
; 213  : 
; 214  :     if ( nInfoId == NLED_SUPPORTS_INFO_ID )

  00030	e3500001	 cmp         r0, #1
  00034	1a000020	 bne         |$LN9@NLedDriver@2|

; 215  :     {
; 216  :         struct NLED_SUPPORTS_INFO * p = (struct NLED_SUPPORTS_INFO *)pOutput;
; 217  : 
; 218  :         if (p == NULL)

  00038	e35e0000	 cmp         lr, #0
  0003c	0a000044	 beq         |$ReturnError$44672|

; 219  :             goto ReturnError;
; 220  : 
; 221  :         if ( p->LedNum >= g_dwNbLeds )

  00040	e59f2124	 ldr         r2, [pc, #0x124]
  00044	e59e1000	 ldr         r1, [lr]
  00048	e5923000	 ldr         r3, [r2]
  0004c	e1510003	 cmp         r1, r3
  00050	2a00003f	 bcs         |$ReturnError$44672|

; 222  :             goto ReturnError;
; 223  : 
; 224  :         // Fill in LED capabilities
; 225  :         p->lCycleAdjust = 1000;         // Granularity of cycle time adjustments (microseconds)
; 226  :         p->fAdjustTotalCycleTime = TRUE;    // LED has an adjustable total cycle time
; 227  :         p->fAdjustOnTime = TRUE;            // @FIELD   LED has separate on time
; 228  :         p->fAdjustOffTime = TRUE;           // @FIELD   LED has separate off time
; 229  :         p->fMetaCycleOn = TRUE;             // @FIELD   LED can do blink n, pause, blink n, ...
; 230  :         p->fMetaCycleOff = TRUE;            // @FIELD   LED can do blink n, pause n, blink n, ...
; 231  : 
; 232  :         // override individual LED capabilities
; 233  :         if (g_LastLEDIsVibrator)

  00054	e59f3114	 ldr         r3, [pc, #0x114]
  00058	e3a00ffa	 mov         r0, #0xFA, 30
  0005c	e3a04001	 mov         r4, #1
  00060	e58e0004	 str         r0, [lr, #4]
  00064	e58e4008	 str         r4, [lr, #8]
  00068	e58e400c	 str         r4, [lr, #0xC]
  0006c	e58e4010	 str         r4, [lr, #0x10]
  00070	e58e4014	 str         r4, [lr, #0x14]
  00074	e58e4018	 str         r4, [lr, #0x18]
  00078	e5933000	 ldr         r3, [r3]
  0007c	e3530000	 cmp         r3, #0
  00080	0a00000a	 beq         |$LN5@NLedDriver@2|

; 234  :         {
; 235  :             if (p->LedNum == (g_dwNbLeds - 1))

  00084	e5923000	 ldr         r3, [r2]
  00088	e2433001	 sub         r3, r3, #1
  0008c	e1510003	 cmp         r1, r3

; 236  :             {
; 237  :                 // vibrate must be last NLED, reports special lCycleAdjust value
; 238  :                 p->lCycleAdjust = -1;               // Well that was obvious!

  00090	03e03000	 mvneq       r3, #0
  00094	058e3004	 streq       r3, [lr, #4]

; 239  :                 p->fAdjustTotalCycleTime = FALSE;   // LED has an adjustable total cycle time

  00098	03a03000	 moveq       r3, #0
  0009c	058e3008	 streq       r3, [lr, #8]

; 240  :                 p->fAdjustOnTime = FALSE;           // @FIELD   LED has separate on time

  000a0	058e300c	 streq       r3, [lr, #0xC]

; 241  :                 p->fAdjustOffTime = FALSE;          // @FIELD   LED has separate off time

  000a4	058e3010	 streq       r3, [lr, #0x10]

; 242  :                 p->fMetaCycleOn = FALSE;            // @FIELD   LED can do blink n, pause, blink n, ...

  000a8	058e3014	 streq       r3, [lr, #0x14]

; 243  :                 p->fMetaCycleOff = FALSE;           // @FIELD   LED can do blink n, pause n, blink n, ...

  000ac	058e3018	 streq       r3, [lr, #0x18]
  000b0		 |$LN5@NLedDriver@2|

; 244  :             }
; 245  :         }
; 246  :         return TRUE;

  000b0	e3a00001	 mov         r0, #1

; 275  : }

  000b4	e8bd4010	 ldmia       sp!, {r4, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$LN9@NLedDriver@2|

; 247  :     }
; 248  :     else if ( nInfoId == NLED_SETTINGS_INFO_ID )

  000bc	e3500002	 cmp         r0, #2
  000c0	1a000023	 bne         |$ReturnError$44672|

; 249  :     {
; 250  :         struct NLED_SETTINGS_INFO * p = (struct NLED_SETTINGS_INFO *)pOutput;
; 251  : 
; 252  :         if (p == NULL)

  000c4	e35e0000	 cmp         lr, #0
  000c8	0a000021	 beq         |$ReturnError$44672|

; 253  :             goto ReturnError;
; 254  : 
; 255  :         if ( p->LedNum >= g_dwNbLeds )

  000cc	e59f3098	 ldr         r3, [pc, #0x98]
  000d0	e59e1000	 ldr         r1, [lr]
  000d4	e5933000	 ldr         r3, [r3]
  000d8	e1510003	 cmp         r1, r3
  000dc	2a00001c	 bcs         |$ReturnError$44672|

; 256  :             goto ReturnError;
; 257  : 
; 258  :         // Fill in current LED settings
; 259  : 
; 260  :         // Get any individual current settings
; 261  :         p->OffOnBlink = g_BlinkParams[p->LedNum].OffOnBlink;

  000e0	e59f2080	 ldr         r2, [pc, #0x80]
  000e4	e0611181	 rsb         r1, r1, r1, lsl #3

; 262  :         p->TotalCycleTime = g_BlinkParams[p->LedNum].TotalCycleTime;
; 263  :         p->OnTime = g_BlinkParams[p->LedNum].OnTime;
; 264  :         p->OffTime = g_BlinkParams[p->LedNum].OffTime;
; 265  :         p->MetaCycleOn = g_BlinkParams[p->LedNum].MetaCycleOn;
; 266  :         p->MetaCycleOff = g_BlinkParams[p->LedNum].MetaCycleOff;
; 267  : 
; 268  :         return TRUE;

  000e8	e3a00001	 mov         r0, #1
  000ec	e5923000	 ldr         r3, [r2]
  000f0	e0833101	 add         r3, r3, r1, lsl #2
  000f4	e5933004	 ldr         r3, [r3, #4]
  000f8	e58e3004	 str         r3, [lr, #4]
  000fc	e5923000	 ldr         r3, [r2]
  00100	e0833101	 add         r3, r3, r1, lsl #2
  00104	e5933008	 ldr         r3, [r3, #8]
  00108	e58e3008	 str         r3, [lr, #8]
  0010c	e5923000	 ldr         r3, [r2]
  00110	e0833101	 add         r3, r3, r1, lsl #2
  00114	e593300c	 ldr         r3, [r3, #0xC]
  00118	e58e300c	 str         r3, [lr, #0xC]
  0011c	e5923000	 ldr         r3, [r2]
  00120	e0833101	 add         r3, r3, r1, lsl #2
  00124	e5933010	 ldr         r3, [r3, #0x10]
  00128	e58e3010	 str         r3, [lr, #0x10]
  0012c	e5923000	 ldr         r3, [r2]
  00130	e0833101	 add         r3, r3, r1, lsl #2
  00134	e5933014	 ldr         r3, [r3, #0x14]
  00138	e58e3014	 str         r3, [lr, #0x14]
  0013c	e5923000	 ldr         r3, [r2]
  00140	e0833101	 add         r3, r3, r1, lsl #2
  00144	e5933018	 ldr         r3, [r3, #0x18]
  00148	e58e3018	 str         r3, [lr, #0x18]

; 275  : }

  0014c	e8bd4010	 ldmia       sp!, {r4, lr}
  00150	e12fff1e	 bx          lr
  00154		 |$ReturnError$44672|

; 269  :     }
; 270  : 
; 271  : ReturnError:
; 272  : 
; 273  :     SetLastError(ERROR_INVALID_PARAMETER);

  00154	e3a00057	 mov         r0, #0x57
  00158	eb000000	 bl          SetLastError

; 274  :     return FALSE;

  0015c	e3a00000	 mov         r0, #0

; 275  : }

  00160	e8bd4010	 ldmia       sp!, {r4, lr}
  00164	e12fff1e	 bx          lr
  00168		 |$LN17@NLedDriver@2|
  00168		 |$LN18@NLedDriver@2|
  00168	00000000	 DCD         |g_BlinkParams|
  0016c		 |$LN19@NLedDriver@2|
  0016c	00000000	 DCD         |g_dwNbLeds|
  00170		 |$LN20@NLedDriver@2|
  00170	00000000	 DCD         |g_LastLEDIsVibrator|
  00174		 |$M44887|

			 ENDP  ; |NLedDriverGetDeviceInfo|

	EXPORT	|NLedDriverSetDevice|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T44908| DCD	|$LN18@NLedDriver@3|
	DCD	0x40007201
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\nled\nleddrvr.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NLedDriverSetDevice| PROC

; 284  : {

  00000		 |$LN18@NLedDriver@3|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M44905|
  00004	e1a0e001	 mov         lr, r1

; 285  :     struct NLED_SETTINGS_INFO * p = (struct NLED_SETTINGS_INFO *)pInput;
; 286  : 
; 287  :     if ( nInfoId == NLED_SETTINGS_INFO_ID )

  00008	e3500002	 cmp         r0, #2
  0000c	1a000065	 bne         |$ReturnError$44699|

; 288  :     {
; 289  :         if (pInput == NULL)

  00010	e35e0000	 cmp         lr, #0
  00014	0a000063	 beq         |$ReturnError$44699|

; 290  :             goto ReturnError;
; 291  : 
; 292  :         if ( p->LedNum >= g_dwNbLeds )

  00018	e59f31a4	 ldr         r3, [pc, #0x1A4]
  0001c	e59e5000	 ldr         r5, [lr]
  00020	e5933000	 ldr         r3, [r3]
  00024	e1550003	 cmp         r5, r3
  00028	2a00005e	 bcs         |$ReturnError$44699|

; 293  :             goto ReturnError;
; 294  : 
; 295  :         // check for invalid parameters
; 296  :         if ( p->OffOnBlink < 0 || p->OffOnBlink > 2 )

  0002c	e59e3004	 ldr         r3, [lr, #4]
  00030	e1b04003	 movs        r4, r3
  00034	4a00005b	 bmi         |$ReturnError$44699|
  00038	e3540002	 cmp         r4, #2
  0003c	ca000059	 bgt         |$ReturnError$44699|

; 297  :             goto ReturnError;
; 298  : 
; 299  :         // for blink state, check for valid times (why were integers used?)
; 300  :         if ( p->OffOnBlink == 2 )

  00040	1a000015	 bne         |$LN5@NLedDriver@3|

; 301  :             if (p->TotalCycleTime < p->OnTime ||
; 302  :                 p->TotalCycleTime < p->OffTime ||
; 303  :                 p->MetaCycleOn < 0 ||
; 304  :                 p->MetaCycleOff < 0 ||
; 305  :                 p->TotalCycleTime < 0 ||
; 306  :                 p->OnTime < 0 ||
; 307  :                 p->OffTime < 0 ||
; 308  :                 p->TotalCycleTime < p->OnTime + p->OffTime
; 309  :             )

  00044	e59e2008	 ldr         r2, [lr, #8]
  00048	e59e100c	 ldr         r1, [lr, #0xC]
  0004c	e1520001	 cmp         r2, r1
  00050	ba000054	 blt         |$ReturnError$44699|
  00054	e59e0010	 ldr         r0, [lr, #0x10]
  00058	e1520000	 cmp         r2, r0
  0005c	ba000051	 blt         |$ReturnError$44699|
  00060	e59e3014	 ldr         r3, [lr, #0x14]
  00064	e3530000	 cmp         r3, #0
  00068	ba00004e	 blt         |$ReturnError$44699|
  0006c	e59e3018	 ldr         r3, [lr, #0x18]
  00070	e3530000	 cmp         r3, #0
  00074	ba00004b	 blt         |$ReturnError$44699|
  00078	e3520000	 cmp         r2, #0
  0007c	4a000049	 bmi         |$ReturnError$44699|
  00080	e3510000	 cmp         r1, #0
  00084	4a000047	 bmi         |$ReturnError$44699|
  00088	e3500000	 cmp         r0, #0
  0008c	4a000045	 bmi         |$ReturnError$44699|
  00090	e0803001	 add         r3, r0, r1
  00094	e1520003	 cmp         r2, r3

; 310  :                 goto ReturnError;

  00098	ba000042	 blt         |$ReturnError$44699|
  0009c		 |$LN5@NLedDriver@3|

; 311  : 
; 312  :         // check for any changed NLED settings
; 313  :         if ( g_BlinkParams[p->LedNum].OffOnBlink != p->OffOnBlink ||
; 314  :              g_BlinkParams[p->LedNum].TotalCycleTime != p->TotalCycleTime ||
; 315  :              g_BlinkParams[p->LedNum].OnTime != p->OnTime ||
; 316  :              g_BlinkParams[p->LedNum].OffTime != p->OffTime ||
; 317  :              g_BlinkParams[p->LedNum].MetaCycleOn != p->MetaCycleOn ||
; 318  :              g_BlinkParams[p->LedNum].MetaCycleOff != p->MetaCycleOff
; 319  :         )

  0009c	e59f011c	 ldr         r0, [pc, #0x11C]
  000a0	e0652185	 rsb         r2, r5, r5, lsl #3
  000a4	e5903000	 ldr         r3, [r0]
  000a8	e0831102	 add         r1, r3, r2, lsl #2
  000ac	e5913004	 ldr         r3, [r1, #4]
  000b0	e1530004	 cmp         r3, r4
  000b4	1a000013	 bne         |$LN2@NLedDriver@3|
  000b8	e5912008	 ldr         r2, [r1, #8]
  000bc	e59e3008	 ldr         r3, [lr, #8]
  000c0	e1520003	 cmp         r2, r3
  000c4	1a00000f	 bne         |$LN2@NLedDriver@3|
  000c8	e591200c	 ldr         r2, [r1, #0xC]
  000cc	e59e300c	 ldr         r3, [lr, #0xC]
  000d0	e1520003	 cmp         r2, r3
  000d4	1a00000b	 bne         |$LN2@NLedDriver@3|
  000d8	e5912010	 ldr         r2, [r1, #0x10]
  000dc	e59e3010	 ldr         r3, [lr, #0x10]
  000e0	e1520003	 cmp         r2, r3
  000e4	1a000007	 bne         |$LN2@NLedDriver@3|
  000e8	e5912014	 ldr         r2, [r1, #0x14]
  000ec	e59e3014	 ldr         r3, [lr, #0x14]
  000f0	e1520003	 cmp         r2, r3
  000f4	1a000003	 bne         |$LN2@NLedDriver@3|
  000f8	e5912018	 ldr         r2, [r1, #0x18]
  000fc	e59e3018	 ldr         r3, [lr, #0x18]
  00100	e1520003	 cmp         r2, r3
  00104	0a000024	 beq         |$LN14@NLedDriver@3|
  00108		 |$LN2@NLedDriver@3|

; 320  :         {
; 321  :             // Update NLED settings
; 322  :             g_BlinkParams[p->LedNum].OffOnBlink = p->OffOnBlink;

  00108	e5814004	 str         r4, [r1, #4]

; 323  :             g_BlinkParams[p->LedNum].TotalCycleTime = p->TotalCycleTime;

  0010c	e59e3000	 ldr         r3, [lr]
  00110	e5901000	 ldr         r1, [r0]
  00114	e59e2008	 ldr         r2, [lr, #8]
  00118	e0633183	 rsb         r3, r3, r3, lsl #3
  0011c	e0813103	 add         r3, r1, r3, lsl #2
  00120	e5832008	 str         r2, [r3, #8]

; 324  :             g_BlinkParams[p->LedNum].OnTime = p->OnTime;

  00124	e59e3000	 ldr         r3, [lr]
  00128	e5901000	 ldr         r1, [r0]
  0012c	e59e200c	 ldr         r2, [lr, #0xC]
  00130	e0633183	 rsb         r3, r3, r3, lsl #3
  00134	e0813103	 add         r3, r1, r3, lsl #2
  00138	e583200c	 str         r2, [r3, #0xC]

; 325  :             g_BlinkParams[p->LedNum].OffTime = p->OffTime;

  0013c	e59e3000	 ldr         r3, [lr]
  00140	e5901000	 ldr         r1, [r0]
  00144	e59e2010	 ldr         r2, [lr, #0x10]
  00148	e0633183	 rsb         r3, r3, r3, lsl #3
  0014c	e0813103	 add         r3, r1, r3, lsl #2
  00150	e5832010	 str         r2, [r3, #0x10]

; 326  :             g_BlinkParams[p->LedNum].MetaCycleOn = p->MetaCycleOn;

  00154	e59e3000	 ldr         r3, [lr]
  00158	e5901000	 ldr         r1, [r0]
  0015c	e59e2014	 ldr         r2, [lr, #0x14]
  00160	e0633183	 rsb         r3, r3, r3, lsl #3
  00164	e0813103	 add         r3, r1, r3, lsl #2
  00168	e5832014	 str         r2, [r3, #0x14]

; 327  :             g_BlinkParams[p->LedNum].MetaCycleOff = p->MetaCycleOff;

  0016c	e59e3000	 ldr         r3, [lr]
  00170	e5900000	 ldr         r0, [r0]
  00174	e59e2018	 ldr         r2, [lr, #0x18]

; 328  : 
; 329  :             // wake up appropriate NLED thread
; 330  :             #if ENABLE_DEBUG_MESSAGES
; 331  :                 DEBUGMSG(ZONE_FUNCTION, (TEXT("NLED # %d change signaled\r\n"), p->LedNum));
; 332  :             #endif
; 333  : 
; 334  :             SetEvent(g_hLedHandle[p->LedNum]);

  00178	e59f103c	 ldr         r1, [pc, #0x3C]
  0017c	e0633183	 rsb         r3, r3, r3, lsl #3
  00180	e0803103	 add         r3, r0, r3, lsl #2
  00184	e5832018	 str         r2, [r3, #0x18]
  00188	e59e2000	 ldr         r2, [lr]
  0018c	e5913000	 ldr         r3, [r1]
  00190	e3a01003	 mov         r1, #3
  00194	e7930102	 ldr         r0, [r3, +r2, lsl #2]
  00198	eb000000	 bl          EventModify
  0019c		 |$LN14@NLedDriver@3|

; 335  :         }
; 336  : 
; 337  :         return TRUE;

  0019c	e3a00001	 mov         r0, #1

; 350  : }

  001a0	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  001a4	e12fff1e	 bx          lr
  001a8		 |$ReturnError$44699|

; 338  :     }
; 339  : 
; 340  : ReturnError:
; 341  : 
; 342  :     #if ENABLE_DEBUG_MESSAGES
; 343  :         if (p != NULL)
; 344  :             DEBUGMSG(ZONE_ERROR, (TEXT("NLED: NLedDriverSetDevice: NLED %x, Invalid parameter\r\n"), p->LedNum));
; 345  :     #endif
; 346  : 
; 347  :     SetLastError(ERROR_INVALID_PARAMETER);

  001a8	e3a00057	 mov         r0, #0x57
  001ac	eb000000	 bl          SetLastError

; 348  : 
; 349  :     return FALSE;

  001b0	e3a00000	 mov         r0, #0

; 350  : }

  001b4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  001b8	e12fff1e	 bx          lr
  001bc		 |$LN19@NLedDriver@3|
  001bc		 |$LN20@NLedDriver@3|
  001bc	00000000	 DCD         |g_hLedHandle|
  001c0		 |$LN21@NLedDriver@3|
  001c0	00000000	 DCD         |g_BlinkParams|
  001c4		 |$LN22@NLedDriver@3|
  001c4	00000000	 DCD         |g_dwNbLeds|
  001c8		 |$M44906|

			 ENDP  ; |NLedDriverSetDevice|

	EXPORT	|NLedDriverPowerDown|

  00000			 AREA	 |.pdata|, PDATA
|$T44926| DCD	|$LN18@NLedDriver@4|
	DCD	0x40003201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NLedDriverPowerDown| PROC

; 360  : {

  00000		 |$LN18@NLedDriver@4|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M44923|
  00004	e3500000	 cmp         r0, #0

; 361  :     UINT NledNum;
; 362  : 
; 363  :     if ( power_down )

  00008	0a000011	 beq         |$LN9@NLedDriver@4|

; 364  :     {
; 365  :         // shut off all NLEDs
; 366  :         for (NledNum = 0; NledNum < g_dwNbLeds; NledNum++)

  0000c	e59f40b0	 ldr         r4, [pc, #0xB0]
  00010	e3a05000	 mov         r5, #0
  00014	e5943000	 ldr         r3, [r4]
  00018	e3530000	 cmp         r3, #0
  0001c	0a000024	 beq         |$LN2@NLedDriver@4|
  00020	e59f6094	 ldr         r6, [pc, #0x94]
  00024	e3a07000	 mov         r7, #0
  00028		 |$LL8@NLedDriver@4|

; 367  :         {
; 368  :             NLedDriverSetLedState(NledNum, 0);

  00028	e3a01000	 mov         r1, #0
  0002c	e1a00005	 mov         r0, r5
  00030	eb000000	 bl          NLedDriverSetLedState

; 369  :             g_NLedCurrentState[NledNum] = 0;

  00034	e5963000	 ldr         r3, [r6]
  00038	e7837105	 str         r7, [r3, +r5, lsl #2]
  0003c	e5943000	 ldr         r3, [r4]
  00040	e2855001	 add         r5, r5, #1
  00044	e1550003	 cmp         r5, r3
  00048	3afffff6	 bcc         |$LL8@NLedDriver@4|

; 384  :             }
; 385  :         }
; 386  :     }
; 387  : }

  0004c	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN9@NLedDriver@4|

; 370  :         }
; 371  :     }
; 372  :     else
; 373  :     {
; 374  :         for (NledNum = 0; NledNum < g_dwNbLeds; NledNum++)

  00054	e59f6068	 ldr         r6, [pc, #0x68]
  00058	e3a04000	 mov         r4, #0
  0005c	e5962000	 ldr         r2, [r6]
  00060	e3520000	 cmp         r2, #0
  00064	0a000012	 beq         |$LN2@NLedDriver@4|
  00068	e59f7050	 ldr         r7, [pc, #0x50]
  0006c	e59f8048	 ldr         r8, [pc, #0x48]
  00070	e3a05000	 mov         r5, #0
  00074	e3a09001	 mov         r9, #1
  00078		 |$LL4@NLedDriver@4|
  00078	e5973000	 ldr         r3, [r7]

; 375  :         {
; 376  :             // On Power Up (Resume) turn on any LEDs that should be "ON".
; 377  :             //  the individual LED control threads will put the Blinking
; 378  :             //  LEDs back in their proper pre suspend state while "OFF" LEDs
; 379  :             //  will stay off.
; 380  :             if ( g_BlinkParams[NledNum].OffOnBlink == 1 )

  0007c	e0853003	 add         r3, r5, r3
  00080	e5933004	 ldr         r3, [r3, #4]
  00084	e3530001	 cmp         r3, #1
  00088	1a000005	 bne         |$LN3@NLedDriver@4|

; 381  :             {
; 382  :                 NLedDriverSetLedState(NledNum, 1);

  0008c	e3a01001	 mov         r1, #1
  00090	e1a00004	 mov         r0, r4
  00094	eb000000	 bl          NLedDriverSetLedState

; 383  :                 g_NLedCurrentState[NledNum] = 1;

  00098	e5983000	 ldr         r3, [r8]
  0009c	e7839104	 str         r9, [r3, +r4, lsl #2]
  000a0	e5962000	 ldr         r2, [r6]
  000a4		 |$LN3@NLedDriver@4|
  000a4	e2844001	 add         r4, r4, #1
  000a8	e1540002	 cmp         r4, r2
  000ac	e285501c	 add         r5, r5, #0x1C
  000b0	3afffff0	 bcc         |$LL4@NLedDriver@4|
  000b4		 |$LN2@NLedDriver@4|

; 384  :             }
; 385  :         }
; 386  :     }
; 387  : }

  000b4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$LN19@NLedDriver@4|
  000bc		 |$LN20@NLedDriver@4|
  000bc	00000000	 DCD         |g_NLedCurrentState|
  000c0		 |$LN21@NLedDriver@4|
  000c0	00000000	 DCD         |g_BlinkParams|
  000c4		 |$LN22@NLedDriver@4|
  000c4	00000000	 DCD         |g_dwNbLeds|
  000c8		 |$M44924|

			 ENDP  ; |NLedDriverPowerDown|

	EXPORT	|NLedDriverInitialize|
	IMPORT	|CreateThread|
	IMPORT	|CreateEventW|
	IMPORT	|GPIOSetMode|
	IMPORT	|malloc|
	IMPORT	|GPIOOpen|
	IMPORT	|NLedBoardInit|
	IMPORT	|NLedCpuFamily|

  00010			 AREA	 |.bss|, NOINIT
|g_hNewThread| % 0x4

  00000			 AREA	 |.pdata|, PDATA
|$T44959| DCD	|$LN39@NLedDriver@5|
	DCD	0x40008d02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NLedDriverInitialize| PROC

; 394  : {

  00000		 |$LN39@NLedDriver@5|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M44956|

; 395  :     BOOL bResult = TRUE;
; 396  : 
; 397  :     DWORD i;
; 398  : 
; 399  :     if( NLedCpuFamily == CPU_FAMILY_DM37XX)

  00008	e59f3220	 ldr         r3, [pc, #0x220]
  0000c	e59f4218	 ldr         r4, [pc, #0x218]
  00010	e3a06001	 mov         r6, #1
  00014	e5933000	 ldr         r3, [r3]
  00018	e3530001	 cmp         r3, #1

; 400  :     {
; 401  :         g_dwNbLeds=0;

  0001c	03a03000	 moveq       r3, #0
  00020	05843000	 streq       r3, [r4]
  00024	15943000	 ldrne       r3, [r4]

; 402  :     }
; 403  : 
; 404  :     if (g_dwNbLeds <=0)

  00028	e3530000	 cmp         r3, #0
  0002c	1a000001	 bne         |$LN18@NLedDriver@5|
  00030		 |$LN36@NLedDriver@5|

; 405  :     {
; 406  :         return FALSE;

  00030	e3a06000	 mov         r6, #0
  00034	ea000073	 b           |$LN4@NLedDriver@5|
  00038		 |$LN18@NLedDriver@5|

; 407  :     }
; 408  : 
; 409  :     if (NLedBoardInit() == FALSE)

  00038	eb000000	 bl          NLedBoardInit
  0003c	e3500000	 cmp         r0, #0

; 410  :     {
; 411  :         return FALSE;

  00040	0afffffa	 beq         |$LN36@NLedDriver@5|

; 412  :     }
; 413  :     
; 414  :     // Open gpio driver
; 415  :     g_hGPIO = GPIOOpen();

  00044	eb000000	 bl          GPIOOpen
  00048	e59f71d8	 ldr         r7, [pc, #0x1D8]
  0004c	e1b08000	 movs        r8, r0
  00050	e5878008	 str         r8, [r7, #8]

; 416  :     if (g_hGPIO == NULL)
; 417  :     {
; 418  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: NLedDriverInitialize: Failed to open Gpio driver!\r\n"));
; 419  :         return FALSE;

  00054	0afffff5	 beq         |$LN36@NLedDriver@5|

; 420  :     }
; 421  :     g_BlinkParams = (struct NLED_SETTINGS_INFO*) malloc(g_dwNbLeds*sizeof(struct NLED_SETTINGS_INFO));

  00058	e5943000	 ldr         r3, [r4]
  0005c	e0633183	 rsb         r3, r3, r3, lsl #3
  00060	e1a00103	 mov         r0, r3, lsl #2
  00064	eb000000	 bl          malloc

; 422  :     g_NLedCurrentState = (int*) malloc(g_dwNbLeds*sizeof(int));

  00068	e5942000	 ldr         r2, [r4]
  0006c	e59f91b0	 ldr         r9, [pc, #0x1B0]
  00070	e1a03000	 mov         r3, r0
  00074	e1a00102	 mov         r0, r2, lsl #2
  00078	e5893000	 str         r3, [r9]
  0007c	eb000000	 bl          malloc

; 423  :     g_hLedHandle = (HANDLE*) malloc(g_dwNbLeds*sizeof(HANDLE));

  00080	e5942000	 ldr         r2, [r4]
  00084	e59fa194	 ldr         r10, [pc, #0x194]
  00088	e1a03000	 mov         r3, r0
  0008c	e1a00102	 mov         r0, r2, lsl #2
  00090	e58a3000	 str         r3, [r10]
  00094	eb000000	 bl          malloc

; 424  :     g_hNewThread = (HANDLE*) malloc(g_dwNbLeds*sizeof(HANDLE));

  00098	e5943000	 ldr         r3, [r4]
  0009c	e1a05000	 mov         r5, r0
  000a0	e5875000	 str         r5, [r7]
  000a4	e1a00103	 mov         r0, r3, lsl #2
  000a8	eb000000	 bl          malloc

; 425  : 
; 426  : 
; 427  : 
; 428  :     // initialize the NLED state array and blink parameter structure
; 429  :     for (i = 0; i < g_dwNbLeds; i++)

  000ac	e5943000	 ldr         r3, [r4]
  000b0	e5870004	 str         r0, [r7, #4]
  000b4	e3a01000	 mov         r1, #0
  000b8	e3530000	 cmp         r3, #0
  000bc	e3a0b000	 mov         r11, #0
  000c0	0a00001b	 beq         |$LN13@NLedDriver@5|

; 420  :     }
; 421  :     g_BlinkParams = (struct NLED_SETTINGS_INFO*) malloc(g_dwNbLeds*sizeof(struct NLED_SETTINGS_INFO));

  000c4	e3a02000	 mov         r2, #0
  000c8		 |$LL15@NLedDriver@5|

; 430  :     {
; 431  :         g_BlinkParams[i].LedNum = i;

  000c8	e5993000	 ldr         r3, [r9]
  000cc	e7821003	 str         r1, [r2, +r3]

; 432  :         g_BlinkParams[i].OffOnBlink = 0;

  000d0	e5993000	 ldr         r3, [r9]
  000d4	e0823003	 add         r3, r2, r3
  000d8	e583b004	 str         r11, [r3, #4]

; 433  :         g_BlinkParams[i].TotalCycleTime = 0;

  000dc	e5993000	 ldr         r3, [r9]
  000e0	e0823003	 add         r3, r2, r3
  000e4	e583b008	 str         r11, [r3, #8]

; 434  :         g_BlinkParams[i].OnTime = 0;

  000e8	e5993000	 ldr         r3, [r9]
  000ec	e0823003	 add         r3, r2, r3
  000f0	e583b00c	 str         r11, [r3, #0xC]

; 435  :         g_BlinkParams[i].OffTime = 0;

  000f4	e5993000	 ldr         r3, [r9]
  000f8	e0823003	 add         r3, r2, r3
  000fc	e583b010	 str         r11, [r3, #0x10]

; 436  :         g_BlinkParams[i].MetaCycleOn = 0;

  00100	e5993000	 ldr         r3, [r9]
  00104	e0823003	 add         r3, r2, r3
  00108	e583b014	 str         r11, [r3, #0x14]

; 437  :         g_BlinkParams[i].MetaCycleOff = 0;

  0010c	e5993000	 ldr         r3, [r9]
  00110	e0823003	 add         r3, r2, r3
  00114	e583b018	 str         r11, [r3, #0x18]

; 438  :         g_NLedCurrentState[i] = 0;

  00118	e59a3000	 ldr         r3, [r10]
  0011c	e282201c	 add         r2, r2, #0x1C
  00120	e783b101	 str         r11, [r3, +r1, lsl #2]
  00124	e5943000	 ldr         r3, [r4]
  00128	e2811001	 add         r1, r1, #1
  0012c	e1510003	 cmp         r1, r3
  00130	3affffe4	 bcc         |$LL15@NLedDriver@5|
  00134		 |$LN13@NLedDriver@5|

; 439  :     }
; 440  : 
; 441  :     for ( i = 0; i < g_dwNbLeds; i++ )

  00134	e3a02000	 mov         r2, #0
  00138	e3530000	 cmp         r3, #0
  0013c	0a000006	 beq         |$LN10@NLedDriver@5|
  00140	e0451000	 sub         r1, r5, r0
  00144		 |$LL12@NLedDriver@5|

; 442  :     {
; 443  :         g_hLedHandle[i] = NULL;

  00144	e781b000	 str         r11, [r1, +r0]

; 444  :         g_hNewThread[i] = NULL;

  00148	e480b004	 str         r11, [r0], #4
  0014c	e5943000	 ldr         r3, [r4]
  00150	e2822001	 add         r2, r2, #1
  00154	e1520003	 cmp         r2, r3
  00158	3afffff9	 bcc         |$LL12@NLedDriver@5|
  0015c		 |$LN10@NLedDriver@5|

; 445  :     }
; 446  : 
; 447  :     // make NLED GPIO pins outputs
; 448  :     for ( i = 0; i < g_dwNbLeds; i++ )

  0015c	e3a05000	 mov         r5, #0
  00160	e3530000	 cmp         r3, #0
  00164	0a000009	 beq         |$LN35@NLedDriver@5|
  00168	e59f90ac	 ldr         r9, [pc, #0xAC]
  0016c		 |$LL9@NLedDriver@5|

; 449  :     {
; 450  :         GPIOSetMode(g_hGPIO, g_GPIOId[i], GPIO_DIR_OUTPUT);

  0016c	e4991004	 ldr         r1, [r9], #4
  00170	e3a02000	 mov         r2, #0
  00174	e1a00008	 mov         r0, r8
  00178	eb000000	 bl          GPIOSetMode
  0017c	e5943000	 ldr         r3, [r4]
  00180	e2855001	 add         r5, r5, #1
  00184	e1550003	 cmp         r5, r3
  00188	35978008	 ldrcc       r8, [r7, #8]
  0018c	3afffff6	 bcc         |$LL9@NLedDriver@5|
  00190		 |$LN35@NLedDriver@5|

; 451  :     }
; 452  :         
; 453  :     for ( i = 0; i < g_dwNbLeds; i++ )

  00190	e3a05000	 mov         r5, #0
  00194	e3530000	 cmp         r3, #0
  00198	0a00001a	 beq         |$LN4@NLedDriver@5|
  0019c		 |$LL6@NLedDriver@5|

; 454  :     {
; 455  :         g_hLedHandle[i] = CreateEvent(0, FALSE, FALSE, NULL);

  0019c	e3a03000	 mov         r3, #0
  001a0	e3a02000	 mov         r2, #0
  001a4	e3a01000	 mov         r1, #0
  001a8	e3a00000	 mov         r0, #0
  001ac	eb000000	 bl          CreateEventW
  001b0	e5973000	 ldr         r3, [r7]

; 456  :         g_hNewThread[i] = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)NLedControlThread, (LPVOID)i, 0, NULL);

  001b4	e59f205c	 ldr         r2, [pc, #0x5C]
  001b8	e3a01000	 mov         r1, #0
  001bc	e7830105	 str         r0, [r3, +r5, lsl #2]
  001c0	e1a03005	 mov         r3, r5
  001c4	e3a00000	 mov         r0, #0
  001c8	e58db004	 str         r11, [sp, #4]
  001cc	e58db000	 str         r11, [sp]
  001d0	eb000000	 bl          CreateThread
  001d4	e5973004	 ldr         r3, [r7, #4]
  001d8	e3500000	 cmp         r0, #0
  001dc	e7830105	 str         r0, [r3, +r5, lsl #2]

; 457  : 
; 458  :         if ( g_hNewThread[i] == NULL || g_hLedHandle[i] == NULL)

  001e0	0a000003	 beq         |$LN2@NLedDriver@5|
  001e4	e5973000	 ldr         r3, [r7]
  001e8	e7933105	 ldr         r3, [r3, +r5, lsl #2]
  001ec	e3530000	 cmp         r3, #0
  001f0	1a000000	 bne         |$LN5@NLedDriver@5|
  001f4		 |$LN2@NLedDriver@5|

; 459  :         {
; 460  :             DEBUGMSG(ZONE_ERROR, (TEXT("ERROR: NLedDriverInitialize: Could not create event and/or start thread.\r\n")));
; 461  :             bResult = FALSE;

  001f4	e3a06000	 mov         r6, #0
  001f8		 |$LN5@NLedDriver@5|

; 451  :     }
; 452  :         
; 453  :     for ( i = 0; i < g_dwNbLeds; i++ )

  001f8	e5943000	 ldr         r3, [r4]
  001fc	e2855001	 add         r5, r5, #1
  00200	e1550003	 cmp         r5, r3
  00204	3affffe4	 bcc         |$LL6@NLedDriver@5|
  00208		 |$LN4@NLedDriver@5|

; 462  :         }
; 463  :         else
; 464  :         {
; 465  :             DEBUGMSG(ZONE_INIT, (TEXT("NLedDriverInitialize: NLED # %d driver thread: (0x%X) started.\r\n"), i, g_hNewThread[i]));
; 466  :         }
; 467  :     }
; 468  : 
; 469  :     return bResult;
; 470  : }

  00208	e1a00006	 mov         r0, r6
  0020c	e28dd008	 add         sp, sp, #8
  00210	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00214	e12fff1e	 bx          lr
  00218		 |$LN40@NLedDriver@5|
  00218		 |$LN41@NLedDriver@5|
  00218	00000000	 DCD         |NLedControlThread|
  0021c		 |$LN42@NLedDriver@5|
  0021c	00000000	 DCD         |g_GPIOId|
  00220		 |$LN43@NLedDriver@5|
  00220	00000000	 DCD         |g_NLedCurrentState|
  00224		 |$LN44@NLedDriver@5|
  00224	00000000	 DCD         |g_BlinkParams|
  00228		 |$LN45@NLedDriver@5|
  00228	00000000	 DCD         |g_hLedHandle|
  0022c		 |$LN46@NLedDriver@5|
  0022c	00000000	 DCD         |g_dwNbLeds|
  00230		 |$LN47@NLedDriver@5|
  00230	00000000	 DCD         |NLedCpuFamily|
  00234		 |$M44957|

			 ENDP  ; |NLedDriverInitialize|

	EXPORT	|NLedDriverDeInitialize|
	IMPORT	|NLedBoardDeinit|
	IMPORT	|GPIOClose|
	IMPORT	|free|
	IMPORT	|CloseHandle|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T44984| DCD	|$LN16@NLedDriver@6|
	DCD	0x40003c01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\nled\nleddrvr.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NLedDriverDeInitialize| PROC

; 476  : {

  00000		 |$LN16@NLedDriver@6|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M44981|

; 477  :     DWORD i;
; 478  : 
; 479  :     DEBUGMSG(ZONE_INIT, (TEXT("NLEDDRV:  NLedDriverDeInitialize() Unloading driver...\r\n")));
; 480  : 
; 481  :     // Stop all threads, close handles
; 482  :     g_bExitThread = TRUE;
; 483  :     for ( i = 0; i < g_dwNbLeds; i++ )

  00004	e59f70e0	 ldr         r7, [pc, #0xE0]
  00008	e59f40d8	 ldr         r4, [pc, #0xD8]
  0000c	e3a02001	 mov         r2, #1
  00010	e5973000	 ldr         r3, [r7]
  00014	e584200c	 str         r2, [r4, #0xC]
  00018	e3a06000	 mov         r6, #0
  0001c	e3530000	 cmp         r3, #0
  00020	0a00001e	 beq         |$LN13@NLedDriver@6|
  00024	e3a08000	 mov         r8, #0
  00028		 |$LL6@NLedDriver@6|
  00028	e5943000	 ldr         r3, [r4]
  0002c	e1a05106	 mov         r5, r6, lsl #2

; 484  :     {
; 485  :         if (g_hLedHandle[i])

  00030	e7953003	 ldr         r3, [r5, +r3]
  00034	e3530000	 cmp         r3, #0

; 486  :             SetEvent(g_hLedHandle[i]);

  00038	13a01003	 movne       r1, #3
  0003c	11a00003	 movne       r0, r3
  00040	1b000000	 blne        EventModify
  00044	e5943004	 ldr         r3, [r4, #4]

; 487  : 
; 488  :         if (g_hNewThread[i])

  00048	e7953003	 ldr         r3, [r5, +r3]
  0004c	e3530000	 cmp         r3, #0
  00050	0a000005	 beq         |$LN2@NLedDriver@6|

; 489  :         {
; 490  :             WaitForSingleObject(g_hNewThread[i], INFINITE);

  00054	e3e01000	 mvn         r1, #0
  00058	e1a00003	 mov         r0, r3
  0005c	eb000000	 bl          WaitForSingleObject

; 491  :             CloseHandle(g_hNewThread[i]);

  00060	e5943004	 ldr         r3, [r4, #4]
  00064	e7950003	 ldr         r0, [r5, +r3]
  00068	eb000000	 bl          CloseHandle
  0006c		 |$LN2@NLedDriver@6|
  0006c	e5943000	 ldr         r3, [r4]

; 492  :         }
; 493  : 
; 494  :         if (g_hLedHandle[i])

  00070	e7953003	 ldr         r3, [r5, +r3]
  00074	e3530000	 cmp         r3, #0

; 495  :             CloseHandle(g_hLedHandle[i]);

  00078	11a00003	 movne       r0, r3
  0007c	1b000000	 blne        CloseHandle
  00080	e5943004	 ldr         r3, [r4, #4]
  00084	e5942000	 ldr         r2, [r4]
  00088	e2866001	 add         r6, r6, #1

; 496  : 
; 497  :         g_hNewThread[i] = NULL;

  0008c	e7858003	 str         r8, [r5, +r3]

; 498  :         g_hLedHandle[i] = NULL;

  00090	e7858002	 str         r8, [r5, +r2]
  00094	e5973000	 ldr         r3, [r7]
  00098	e1560003	 cmp         r6, r3
  0009c	3affffe1	 bcc         |$LL6@NLedDriver@6|
  000a0		 |$LN13@NLedDriver@6|

; 499  :     }
; 500  : 
; 501  :     free(g_BlinkParams);

  000a0	e59f303c	 ldr         r3, [pc, #0x3C]
  000a4	e5930000	 ldr         r0, [r3]
  000a8	eb000000	 bl          free

; 502  :     free(g_NLedCurrentState);

  000ac	e59f302c	 ldr         r3, [pc, #0x2C]
  000b0	e5930000	 ldr         r0, [r3]
  000b4	eb000000	 bl          free
  000b8	e5940000	 ldr         r0, [r4]

; 503  :     free(g_hLedHandle);

  000bc	eb000000	 bl          free
  000c0	e5940004	 ldr         r0, [r4, #4]

; 504  :     free(g_hNewThread);

  000c4	eb000000	 bl          free

; 505  : 
; 506  :     GPIOClose(g_hGPIO);

  000c8	e5940008	 ldr         r0, [r4, #8]
  000cc	eb000000	 bl          GPIOClose

; 507  :     
; 508  :     NLedBoardDeinit();

  000d0	eb000000	 bl          NLedBoardDeinit

; 509  : 
; 510  :     return TRUE;

  000d4	e3a00001	 mov         r0, #1

; 511  : }

  000d8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000dc	e12fff1e	 bx          lr
  000e0		 |$LN17@NLedDriver@6|
  000e0		 |$LN18@NLedDriver@6|
  000e0	00000000	 DCD         |g_NLedCurrentState|
  000e4		 |$LN19@NLedDriver@6|
  000e4	00000000	 DCD         |g_BlinkParams|
  000e8		 |$LN20@NLedDriver@6|
  000e8	00000000	 DCD         |g_hLedHandle|
  000ec		 |$LN21@NLedDriver@6|
  000ec	00000000	 DCD         |g_dwNbLeds|
  000f0		 |$M44982|

			 ENDP  ; |NLedDriverDeInitialize|

	END
