; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\OAL\OMAP_OALPADCFG\oalpadcfg.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|_PostInit| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALPadCfgPostInit|
	IMPORT	|InitializeCriticalSection|

  00004			 AREA	 |.bss|, NOINIT
|_cs|	%	0x14
|_cs|	%	0x14
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\oal\omap_oalpadcfg\oalpadcfg.c

  00000			 AREA	 |.pdata|, PDATA
|$T44657| DCD	|$LN5@OALPadCfgP|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPadCfgPostInit| PROC

; 45   : {

  00000		 |$LN5@OALPadCfgP|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M44654|

; 46   :     InitializeCriticalSection(&_cs);

  00004	e59f4018	 ldr         r4, [pc, #0x18]
  00008	e1a00004	 mov         r0, r4
  0000c	eb000000	 bl          InitializeCriticalSection

; 47   : 
; 48   : 	_PostInit = TRUE;

  00010	e3a03001	 mov         r3, #1
  00014	e5843018	 str         r3, [r4, #0x18]

; 49   : 
; 50   :     return TRUE;

  00018	e3a00001	 mov         r0, #1

; 51   : }

  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN6@OALPadCfgP|
  00024		 |$LN7@OALPadCfgP|
  00024	00000000	 DCD         |_cs|
  00028		 |$M44655|

			 ENDP  ; |OALPadCfgPostInit|

	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T44666| DCD	|$LN6@PadCfgLock|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PadCfgLock| PROC

; 53   : {

  00000		 |$LN6@PadCfgLock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M44663|

; 54   :     if (_PostInit)

  00004	e59f0010	 ldr         r0, [pc, #0x10]
  00008	e5903018	 ldr         r3, [r0, #0x18]
  0000c	e3530000	 cmp         r3, #0

; 55   :     {
; 56   :         EnterCriticalSection(&_cs);

  00010	1b000000	 blne        EnterCriticalSection

; 57   :     }
; 58   : }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$LN7@PadCfgLock|
  0001c		 |$LN8@PadCfgLock|
  0001c	00000000	 DCD         |_cs|
  00020		 |$M44664|

			 ENDP  ; |PadCfgLock|

	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T44675| DCD	|$LN6@PadCfgUnlo|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PadCfgUnlock| PROC

; 60   : {

  00000		 |$LN6@PadCfgUnlo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M44672|

; 61   :     if (_PostInit)

  00004	e59f0010	 ldr         r0, [pc, #0x10]
  00008	e5903018	 ldr         r3, [r0, #0x18]
  0000c	e3530000	 cmp         r3, #0

; 62   :     {
; 63   :         LeaveCriticalSection(&_cs);

  00010	1b000000	 blne        LeaveCriticalSection

; 64   :     }
; 65   : }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$LN7@PadCfgUnlo|
  0001c		 |$LN8@PadCfgUnlo|
  0001c	00000000	 DCD         |_cs|
  00020		 |$M44673|

			 ENDP  ; |PadCfgUnlock|


  00000			 AREA	 |.pdata|, PDATA
|$T44696| DCD	|$LN20@SortPadInf|
	DCD	0x40002801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SortPadInfoArray| PROC

; 254  : {

  00000		 |$LN20@SortPadInf|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M44693|
  00004	e1a08000	 mov         r8, r0

; 257  :     while (padArray[nbPad].padID != (UINT16) -1)

  00008	e1d830b0	 ldrh        r3, [r8]
  0000c	e3a02cff	 mov         r2, #0xFF, 24
  00010	e38210ff	 orr         r1, r2, #0xFF
  00014	e1530001	 cmp         r3, r1
  00018	e3a00000	 mov         r0, #0
  0001c	0a000004	 beq         |$LN8@SortPadInf|

; 255  :     int i,j;
; 256  :     int nbPad = 0;

  00020	e1a02008	 mov         r2, r8
  00024		 |$LL9@SortPadInf|

; 257  :     while (padArray[nbPad].padID != (UINT16) -1)

  00024	e1f230b8	 ldrh        r3, [r2, #8]!

; 258  :     {
; 259  :         nbPad++;

  00028	e2800001	 add         r0, r0, #1
  0002c	e1530001	 cmp         r3, r1
  00030	1afffffb	 bne         |$LL9@SortPadInf|
  00034		 |$LN8@SortPadInf|

; 260  :     }
; 261  :     //simple bubble sorting
; 262  :     for(i=0;i<(nbPad);i++)

  00034	e3500000	 cmp         r0, #0
  00038	da000016	 ble         |$LN5@SortPadInf|
  0003c	e2404001	 sub         r4, r0, #1
  00040	e1a06000	 mov         r6, r0
  00044		 |$LL7@SortPadInf|

; 263  :     {
; 264  :         for(j=0;j<(nbPad-1)-i;j++)

  00044	e3540000	 cmp         r4, #0
  00048	da00000f	 ble         |$LN6@SortPadInf|
  0004c	e1a05008	 mov         r5, r8
  00050	e1a07004	 mov         r7, r4
  00054		 |$LL4@SortPadInf|

; 265  :         {
; 266  :             if(padArray[j].padID > padArray[j+1].padID)

  00054	e1d520b8	 ldrh        r2, [r5, #8]
  00058	e1d530b0	 ldrh        r3, [r5]
  0005c	e1530002	 cmp         r3, r2

; 267  :             {
; 268  :                 PAD_INFO temp;
; 269  :                 temp = padArray[j];

  00060	85951000	 ldrhi       r1, [r5]
  00064	8595e004	 ldrhi       lr, [r5, #4]

; 270  :                 padArray[j] = padArray[j+1];

  00068	85953008	 ldrhi       r3, [r5, #8]
  0006c	8595200c	 ldrhi       r2, [r5, #0xC]

; 271  :                 padArray[j+1] = temp;

  00070	85851008	 strhi       r1, [r5, #8]
  00074	85853000	 strhi       r3, [r5]
  00078	85852004	 strhi       r2, [r5, #4]
  0007c	8585e00c	 strhi       lr, [r5, #0xC]
  00080	e2855008	 add         r5, r5, #8
  00084	e2577001	 subs        r7, r7, #1
  00088	1afffff1	 bne         |$LL4@SortPadInf|
  0008c		 |$LN6@SortPadInf|

; 260  :     }
; 261  :     //simple bubble sorting
; 262  :     for(i=0;i<(nbPad);i++)

  0008c	e2444001	 sub         r4, r4, #1
  00090	e2566001	 subs        r6, r6, #1
  00094	1affffea	 bne         |$LL7@SortPadInf|
  00098		 |$LN5@SortPadInf|

; 272  :             }
; 273  :         }
; 274  :     }
; 275  :     return nbPad;
; 276  : }

  00098	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$M44694|

			 ENDP  ; |SortPadInfoArray|

	EXPORT	|??_C@_1LI@PMKLMLGK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@HMOJBEID@?$AAP?$AAA?$AAD?$AA?5?$AA?$CF?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|

  0002c			 AREA	 |.bss|, NOINIT
|g_NbPads| %	0x4
|g_bspPadInfo| % 0x4
|g_NbPads| %	0x4

  00000			 AREA	 |.pdata|, PDATA
|$T44713| DCD	|$LN17@FindPad|
	DCD	0x40002601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LI@PMKLMLGK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "O", 0x0, "A"
	DCB	0x0, "L", 0x0, "\\", 0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P"
	DCB	0x0, "_", 0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "A"
	DCB	0x0, "D", 0x0, "C", 0x0, "F", 0x0, "G", 0x0, "\\", 0x0, "."
	DCB	0x0, "\\", 0x0, "o", 0x0, "a", 0x0, "l", 0x0, "p", 0x0, "a"
	DCB	0x0, "d", 0x0, "c", 0x0, "f", 0x0, "g", 0x0, ".", 0x0, "c"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@HMOJBEID@?$AAP?$AAA?$AAD?$AA?5?$AA?$CF?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr@| DCB "P"
	DCB	0x0, "A", 0x0, "D", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "u", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "p", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u"
	DCB	0x0, "r", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "a", 0x0, "r", 0x0, "r", 0x0, "a", 0x0, "y"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FindPad| PROC

; 280  : {    

  00000		 |$LN17@FindPad|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M44710|
  00004	e1a04000	 mov         r4, r0

; 281  :     int index = 0;
; 282  :     int inf = 0;
; 283  :     int sup = g_NbPads-1;

  00008	e59f3084	 ldr         r3, [pc, #0x84]
  0000c	e3a01000	 mov         r1, #0
  00010	e5932000	 ldr         r2, [r3]
  00014	e593e018	 ldr         lr, [r3, #0x18]
  00018	e2522001	 subs        r2, r2, #1

; 284  :     for(;;)
; 285  :     {
; 286  :         index = (inf+sup) / 2;

  0001c	e0823fa2	 add         r3, r2, r2, lsr #31
  00020	ea000007	 b           |$LN13@FindPad|
  00024		 |$LL8@FindPad|

; 288  :         {
; 289  :             //whatever the result this is the end of the search
; 290  :             break;
; 291  :         }
; 292  :         if (g_bspPadInfo[index].padID < padId)

  00024	e1530004	 cmp         r3, r4

; 293  :         {
; 294  :             inf = index+1;

  00028	32801001	 addcc       r1, r0, #1
  0002c	3a000001	 bcc         |$LN2@FindPad|

; 295  :         }
; 296  :         else if (g_bspPadInfo[index].padID > padId)

  00030	9a000012	 bls         |$LN9@FindPad|

; 297  :         {
; 298  :             sup = index-1;

  00034	e2402001	 sub         r2, r0, #1
  00038		 |$LN2@FindPad|

; 284  :     for(;;)
; 285  :     {
; 286  :         index = (inf+sup) / 2;

  00038	e0823001	 add         r3, r2, r1
  0003c	e0833fa3	 add         r3, r3, r3, lsr #31

; 287  :         if (inf == sup)

  00040	e1510002	 cmp         r1, r2
  00044		 |$LN13@FindPad|
  00044	e1a000c3	 mov         r0, r3, asr #1

; 299  :         }
; 300  :         else // (g_bspPadInfo[index].padID == padId)
; 301  :         {
; 302  :             return index;
; 303  :         } 
; 304  :     }
; 305  :     if (g_bspPadInfo[index].padID == padId)

  00048	e08e3180	 add         r3, lr, r0, lsl #3
  0004c	e1d330b0	 ldrh        r3, [r3]
  00050	1afffff3	 bne         |$LL8@FindPad|
  00054	e1530004	 cmp         r3, r4

; 306  :     {        
; 307  :             return index;

  00058	0a000008	 beq         |$LN9@FindPad|

; 308  :     }
; 309  :     ERRORMSG(1,(TEXT("PAD %d not found in pad configuration array\r\n"),padId));

  0005c	e59f102c	 ldr         r1, [pc, #0x2C]
  00060	e59f0024	 ldr         r0, [pc, #0x24]
  00064	e3a03c01	 mov         r3, #1, 24
  00068	e3832035	 orr         r2, r3, #0x35
  0006c	eb000000	 bl          NKDbgPrintfW
  00070	e59f0010	 ldr         r0, [pc, #0x10]
  00074	e1a01004	 mov         r1, r4
  00078	eb000000	 bl          NKDbgPrintfW

; 310  :     return -1;

  0007c	e3e00000	 mvn         r0, #0
  00080		 |$LN9@FindPad|

; 311  : }

  00080	e8bd4010	 ldmia       sp!, {r4, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN18@FindPad|
  00088		 |$LN19@FindPad|
  00088	00000000	 DCD         |??_C@_1FM@HMOJBEID@?$AAP?$AAA?$AAD?$AA?5?$AA?$CF?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr@|
  0008c		 |$LN20@FindPad|
  0008c	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00090		 |$LN21@FindPad|
  00090	00000000	 DCD         |??_C@_1LI@PMKLMLGK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00094		 |$LN22@FindPad|
  00094	00000000	 DCD         |g_NbPads|
  00098		 |$M44711|

			 ENDP  ; |FindPad|

	EXPORT	|OALPadCfgInit|
	IMPORT	|BSPGetAllPadsInfo|

  00000			 AREA	 |.pdata|, PDATA
|$T44753| DCD	|$LN24@OALPadCfgI|
	DCD	0x40002e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPadCfgInit| PROC

; 31   : {

  00000		 |$LN24@OALPadCfgI|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M44750|

; 32   :     g_bspPadInfo = BSPGetAllPadsInfo();

  00004	eb000000	 bl          BSPGetAllPadsInfo
  00008	e1a07000	 mov         r7, r0

; 33   :     g_NbPads = SortPadInfoArray(g_bspPadInfo); //sort the array to have better lookup performances

  0000c	e1d730b0	 ldrh        r3, [r7]
  00010	e59f909c	 ldr         r9, [pc, #0x9C]
  00014	e3a02cff	 mov         r2, #0xFF, 24
  00018	e38210ff	 orr         r1, r2, #0xFF
  0001c	e1530001	 cmp         r3, r1
  00020	e5897018	 str         r7, [r9, #0x18]
  00024	e3a0e000	 mov         lr, #0
  00028	0a000004	 beq         |$LN12@OALPadCfgI|

; 32   :     g_bspPadInfo = BSPGetAllPadsInfo();

  0002c	e1a02007	 mov         r2, r7

; 33   :     g_NbPads = SortPadInfoArray(g_bspPadInfo); //sort the array to have better lookup performances

  00030		 |$LL13@OALPadCfgI|
  00030	e1f230b8	 ldrh        r3, [r2, #8]!
  00034	e28ee001	 add         lr, lr, #1
  00038	e1530001	 cmp         r3, r1
  0003c	1afffffb	 bne         |$LL13@OALPadCfgI|
  00040		 |$LN12@OALPadCfgI|
  00040	e35e0000	 cmp         lr, #0
  00044	da000016	 ble         |$LN9@OALPadCfgI|
  00048	e24e4001	 sub         r4, lr, #1
  0004c	e1a0600e	 mov         r6, lr
  00050		 |$LL11@OALPadCfgI|
  00050	e3540000	 cmp         r4, #0
  00054	da00000f	 ble         |$LN10@OALPadCfgI|
  00058	e1a05007	 mov         r5, r7
  0005c	e1a08004	 mov         r8, r4
  00060		 |$LL8@OALPadCfgI|
  00060	e1d520b8	 ldrh        r2, [r5, #8]
  00064	e1d530b0	 ldrh        r3, [r5]
  00068	e1530002	 cmp         r3, r2
  0006c	85951000	 ldrhi       r1, [r5]
  00070	85950004	 ldrhi       r0, [r5, #4]
  00074	85953008	 ldrhi       r3, [r5, #8]
  00078	8595200c	 ldrhi       r2, [r5, #0xC]
  0007c	85851008	 strhi       r1, [r5, #8]
  00080	85853000	 strhi       r3, [r5]
  00084	85852004	 strhi       r2, [r5, #4]
  00088	8585000c	 strhi       r0, [r5, #0xC]
  0008c	e2855008	 add         r5, r5, #8
  00090	e2588001	 subs        r8, r8, #1
  00094	1afffff1	 bne         |$LL8@OALPadCfgI|
  00098		 |$LN10@OALPadCfgI|
  00098	e2444001	 sub         r4, r4, #1
  0009c	e2566001	 subs        r6, r6, #1
  000a0	1affffea	 bne         |$LL11@OALPadCfgI|
  000a4		 |$LN9@OALPadCfgI|
  000a4	e589e000	 str         lr, [r9]

; 34   :     if (g_bspPadInfo)
; 35   :     {
; 36   :         return TRUE;

  000a8	e3a00001	 mov         r0, #1

; 37   :     }
; 38   :     else
; 39   :     {
; 40   :         return FALSE;
; 41   :     }
; 42   : }

  000ac	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$LN25@OALPadCfgI|
  000b4		 |$LN26@OALPadCfgI|
  000b4	00000000	 DCD         |g_NbPads|
  000b8		 |$M44751|

			 ENDP  ; |OALPadCfgInit|

	EXPORT	|RequestPad|

  00000			 AREA	 |.pdata|, PDATA
|$T44775| DCD	|$LN14@RequestPad|
	DCD	0x40001f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RequestPad| PROC

; 68   : {    

  00000		 |$LN14@RequestPad|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M44772|

; 69   :     BOOL rc = FALSE;
; 70   :     int padIndex;
; 71   :     padIndex = FindPad(padid);

  00004	e3a05000	 mov         r5, #0
  00008	eb000000	 bl          FindPad
  0000c	e1a06000	 mov         r6, r0

; 72   :     if (padIndex == -1) 

  00010	e3760001	 cmn         r6, #1

; 73   :     {
; 74   :         return FALSE;

  00014	03a05000	 moveq       r5, #0
  00018	0a000013	 beq         |$LN9@RequestPad|

; 75   :     }
; 76   :     
; 77   :     if (padIndex < g_NbPads)

  0001c	e59f4054	 ldr         r4, [pc, #0x54]
  00020	e5943000	 ldr         r3, [r4]
  00024	e1560003	 cmp         r6, r3
  00028	aa00000f	 bge         |$LN9@RequestPad|

; 78   :     {
; 79   :         PadCfgLock();

  0002c	e594201c	 ldr         r2, [r4, #0x1C]
  00030	e3520000	 cmp         r2, #0
  00034	0a000002	 beq         |$LN6@RequestPad|
  00038	e2840004	 add         r0, r4, #4
  0003c	eb000000	 bl          EnterCriticalSection
  00040	e594201c	 ldr         r2, [r4, #0x1C]
  00044		 |$LN6@RequestPad|

; 80   :         if (!g_bspPadInfo[padIndex].inUse)

  00044	e5943018	 ldr         r3, [r4, #0x18]
  00048	e0831186	 add         r1, r3, r6, lsl #3
  0004c	e5913004	 ldr         r3, [r1, #4]
  00050	e3130902	 tst         r3, #2, 18

; 81   :         {
; 82   :             g_bspPadInfo[padIndex].inUse = 1;

  00054	03833902	 orreq       r3, r3, #2, 18
  00058	05813004	 streq       r3, [r1, #4]

; 83   :             rc = TRUE;

  0005c	03a05001	 moveq       r5, #1

; 84   :         }
; 85   :         PadCfgUnlock();

  00060	e3520000	 cmp         r2, #0
  00064	12840004	 addne       r0, r4, #4
  00068	1b000000	 blne        LeaveCriticalSection
  0006c		 |$LN9@RequestPad|

; 86   :     }
; 87   :     return rc;
; 88   : }

  0006c	e1a00005	 mov         r0, r5
  00070	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$LN15@RequestPad|
  00078		 |$LN16@RequestPad|
  00078	00000000	 DCD         |g_NbPads|
  0007c		 |$M44773|

			 ENDP  ; |RequestPad|

	EXPORT	|ReleasePad|
	IMPORT	|SOCSetPadConfig|

  00000			 AREA	 |.pdata|, PDATA
|$T44797| DCD	|$LN14@ReleasePad|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReleasePad| PROC

; 91   : {

  00000		 |$LN14@ReleasePad|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M44794|
  00004	e1a07000	 mov         r7, r0

; 92   :     BOOL rc = FALSE;
; 93   :     int padIndex;
; 94   :     padIndex = FindPad(padid);

  00008	e3a05000	 mov         r5, #0
  0000c	eb000000	 bl          FindPad
  00010	e1a06000	 mov         r6, r0

; 95   :     if (padIndex == -1) 

  00014	e3760001	 cmn         r6, #1

; 96   :     {
; 97   :         return FALSE;

  00018	03a05000	 moveq       r5, #0
  0001c	0a000018	 beq         |$LN9@ReleasePad|

; 98   :     }
; 99   :     
; 100  :     if (padIndex < g_NbPads)

  00020	e59f4068	 ldr         r4, [pc, #0x68]
  00024	e5943000	 ldr         r3, [r4]
  00028	e1560003	 cmp         r6, r3
  0002c	aa000014	 bge         |$LN9@ReleasePad|

; 101  :     {
; 102  :         PadCfgLock();

  00030	e594301c	 ldr         r3, [r4, #0x1C]
  00034	e3530000	 cmp         r3, #0
  00038	12840004	 addne       r0, r4, #4
  0003c	1b000000	 blne        EnterCriticalSection

; 103  :         if (g_bspPadInfo[padIndex].inUse)

  00040	e5943018	 ldr         r3, [r4, #0x18]
  00044	e083e186	 add         lr, r3, r6, lsl #3
  00048	e59e3004	 ldr         r3, [lr, #4]
  0004c	e3130902	 tst         r3, #2, 18
  00050	0a000007	 beq         |$LN1@ReleasePad|

; 104  :         {
; 105  :             g_bspPadInfo[padIndex].inUse = 0;

  00054	e3a01c7f	 mov         r1, #0x7F, 24
  00058	e3c32902	 bic         r2, r3, #2, 18

; 106  :             SOCSetPadConfig(padid,(UINT16) g_bspPadInfo[padIndex].Cfg); // configure the PIn with its default unused configuration

  0005c	e38130ff	 orr         r3, r1, #0xFF
  00060	e0021003	 and         r1, r2, r3
  00064	e1a00007	 mov         r0, r7
  00068	e58e2004	 str         r2, [lr, #4]
  0006c	eb000000	 bl          SOCSetPadConfig

; 107  :             rc = TRUE;

  00070	e3a05001	 mov         r5, #1
  00074		 |$LN1@ReleasePad|
  00074	e594301c	 ldr         r3, [r4, #0x1C]

; 108  :         }
; 109  :         PadCfgUnlock();

  00078	e3530000	 cmp         r3, #0
  0007c	12840004	 addne       r0, r4, #4
  00080	1b000000	 blne        LeaveCriticalSection
  00084		 |$LN9@ReleasePad|

; 110  :     }
; 111  :     return rc;
; 112  : }

  00084	e1a00005	 mov         r0, r5
  00088	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN15@ReleasePad|
  00090		 |$LN16@ReleasePad|
  00090	00000000	 DCD         |g_NbPads|
  00094		 |$M44795|

			 ENDP  ; |ReleasePad|

	EXPORT	|ConfigurePad|

  00000			 AREA	 |.pdata|, PDATA
|$T44820| DCD	|$LN14@ConfigureP|
	DCD	0x40002201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ConfigurePad| PROC

; 115  : {

  00000		 |$LN14@ConfigureP|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M44817|
  00004	e1a08001	 mov         r8, r1
  00008	e1a07000	 mov         r7, r0

; 116  :     BOOL rc = FALSE;    
; 117  :     int padIndex;
; 118  :     padIndex = FindPad(padId);

  0000c	e3a05000	 mov         r5, #0
  00010	eb000000	 bl          FindPad
  00014	e1a06000	 mov         r6, r0

; 119  :     if (padIndex == -1) 

  00018	e3760001	 cmn         r6, #1

; 120  :     {
; 121  :         return FALSE;

  0001c	03a05000	 moveq       r5, #0
  00020	0a000014	 beq         |$LN9@ConfigureP|

; 122  :     }
; 123  :     
; 124  :     if (padIndex < g_NbPads)

  00024	e59f4058	 ldr         r4, [pc, #0x58]
  00028	e5943000	 ldr         r3, [r4]
  0002c	e1560003	 cmp         r6, r3
  00030	aa000010	 bge         |$LN9@ConfigureP|

; 125  :     {
; 126  :         PadCfgLock();

  00034	e594301c	 ldr         r3, [r4, #0x1C]
  00038	e3530000	 cmp         r3, #0
  0003c	12840004	 addne       r0, r4, #4
  00040	1b000000	 blne        EnterCriticalSection

; 127  :         if (g_bspPadInfo[padIndex].inUse)

  00044	e5943018	 ldr         r3, [r4, #0x18]
  00048	e0833186	 add         r3, r3, r6, lsl #3
  0004c	e5933004	 ldr         r3, [r3, #4]
  00050	e3130902	 tst         r3, #2, 18
  00054	0a000003	 beq         |$LN1@ConfigureP|

; 128  :         {            
; 129  :             rc = SOCSetPadConfig(padId,cfg);            

  00058	e1a01008	 mov         r1, r8
  0005c	e1a00007	 mov         r0, r7
  00060	eb000000	 bl          SOCSetPadConfig
  00064	e1a05000	 mov         r5, r0
  00068		 |$LN1@ConfigureP|
  00068	e594301c	 ldr         r3, [r4, #0x1C]

; 130  :         }
; 131  :         PadCfgUnlock();

  0006c	e3530000	 cmp         r3, #0
  00070	12840004	 addne       r0, r4, #4
  00074	1b000000	 blne        LeaveCriticalSection
  00078		 |$LN9@ConfigureP|

; 132  :     }
; 133  :     return rc;
; 134  : }

  00078	e1a00005	 mov         r0, r5
  0007c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN15@ConfigureP|
  00084		 |$LN16@ConfigureP|
  00084	00000000	 DCD         |g_NbPads|
  00088		 |$M44818|

			 ENDP  ; |ConfigurePad|

	EXPORT	|GetPadConfiguration|
	IMPORT	|SOCGetPadConfig|

  00000			 AREA	 |.pdata|, PDATA
|$T44844| DCD	|$LN16@GetPadConf|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetPadConfiguration| PROC

; 137  : {

  00000		 |$LN16@GetPadConf|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M44841|
  00004	e1b08001	 movs        r8, r1
  00008	e1a07000	 mov         r7, r0

; 138  :     BOOL rc = FALSE;    

  0000c	e3a04000	 mov         r4, #0

; 139  :     int padIndex;
; 140  :     
; 141  :     if (pCfg == NULL)

  00010	1a000001	 bne         |$LN4@GetPadConf|
  00014		 |$LN13@GetPadConf|

; 142  :     {
; 143  :         return FALSE;

  00014	e3a04000	 mov         r4, #0
  00018	ea000019	 b           |$LN10@GetPadConf|
  0001c		 |$LN4@GetPadConf|

; 144  :     }
; 145  : 
; 146  :     padIndex = FindPad(padId);

  0001c	e1a00007	 mov         r0, r7
  00020	eb000000	 bl          FindPad
  00024	e1a06000	 mov         r6, r0

; 147  :     if (padIndex == -1) 

  00028	e3760001	 cmn         r6, #1

; 148  :     {
; 149  :         return FALSE;

  0002c	0afffff8	 beq         |$LN13@GetPadConf|

; 150  :     }
; 151  :     
; 152  :     if (padIndex < g_NbPads)

  00030	e59f5058	 ldr         r5, [pc, #0x58]
  00034	e5953000	 ldr         r3, [r5]
  00038	e1560003	 cmp         r6, r3
  0003c	aa000010	 bge         |$LN10@GetPadConf|

; 153  :     {
; 154  :         PadCfgLock();

  00040	e595301c	 ldr         r3, [r5, #0x1C]
  00044	e3530000	 cmp         r3, #0
  00048	12850004	 addne       r0, r5, #4
  0004c	1b000000	 blne        EnterCriticalSection

; 155  :         if (g_bspPadInfo[padIndex].inUse)

  00050	e5953018	 ldr         r3, [r5, #0x18]
  00054	e0833186	 add         r3, r3, r6, lsl #3
  00058	e5933004	 ldr         r3, [r3, #4]
  0005c	e3130902	 tst         r3, #2, 18
  00060	0a000003	 beq         |$LN1@GetPadConf|

; 156  :         {            
; 157  :             rc = SOCGetPadConfig(padId,pCfg);            

  00064	e1a01008	 mov         r1, r8
  00068	e1a00007	 mov         r0, r7
  0006c	eb000000	 bl          SOCGetPadConfig
  00070	e1a04000	 mov         r4, r0
  00074		 |$LN1@GetPadConf|
  00074	e595301c	 ldr         r3, [r5, #0x1C]

; 158  :         }
; 159  :         PadCfgUnlock();

  00078	e3530000	 cmp         r3, #0
  0007c	12850004	 addne       r0, r5, #4
  00080	1b000000	 blne        LeaveCriticalSection
  00084		 |$LN10@GetPadConf|

; 160  :     }
; 161  :     return rc;
; 162  : }

  00084	e1a00004	 mov         r0, r4
  00088	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN17@GetPadConf|
  00090		 |$LN18@GetPadConf|
  00090	00000000	 DCD         |g_NbPads|
  00094		 |$M44842|

			 ENDP  ; |GetPadConfiguration|

	EXPORT	|RequestAndConfigurePad|

  00000			 AREA	 |.pdata|, PDATA
|$T44868| DCD	|$LN16@RequestAnd|
	DCD	0x40002701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RequestAndConfigurePad| PROC

; 164  : {

  00000		 |$LN16@RequestAnd|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M44865|
  00004	e1a08001	 mov         r8, r1
  00008	e1a07000	 mov         r7, r0

; 165  :     BOOL rc = FALSE;    
; 166  :     int padIndex;
; 167  :     padIndex = FindPad(padId);

  0000c	e3a05000	 mov         r5, #0
  00010	eb000000	 bl          FindPad
  00014	e1a06000	 mov         r6, r0

; 168  :     if (padIndex == -1) 

  00018	e3760001	 cmn         r6, #1

; 169  :     {
; 170  :         return FALSE;

  0001c	03a05000	 moveq       r5, #0
  00020	0a000019	 beq         |$LN10@RequestAnd|

; 171  :     }
; 172  :     
; 173  :     if (padIndex < g_NbPads)

  00024	e59f406c	 ldr         r4, [pc, #0x6C]
  00028	e5943000	 ldr         r3, [r4]
  0002c	e1560003	 cmp         r6, r3
  00030	aa000015	 bge         |$LN10@RequestAnd|

; 174  :     {
; 175  :         PadCfgLock();

  00034	e594301c	 ldr         r3, [r4, #0x1C]
  00038	e3530000	 cmp         r3, #0
  0003c	12840004	 addne       r0, r4, #4
  00040	1b000000	 blne        EnterCriticalSection

; 176  :         if (!g_bspPadInfo[padIndex].inUse)

  00044	e5943018	 ldr         r3, [r4, #0x18]
  00048	e0833186	 add         r3, r3, r6, lsl #3
  0004c	e5933004	 ldr         r3, [r3, #4]
  00050	e3130902	 tst         r3, #2, 18
  00054	1a000008	 bne         |$LN13@RequestAnd|

; 177  :         {                
; 178  :             rc = SOCSetPadConfig(padId,cfg);            

  00058	e1a01008	 mov         r1, r8
  0005c	e1a00007	 mov         r0, r7
  00060	eb000000	 bl          SOCSetPadConfig
  00064	e1b05000	 movs        r5, r0

; 179  :             if (rc) 
; 180  :             {
; 181  :                 g_bspPadInfo[padIndex].inUse = 1;

  00068	15943018	 ldrne       r3, [r4, #0x18]
  0006c	10832186	 addne       r2, r3, r6, lsl #3
  00070	15923004	 ldrne       r3, [r2, #4]
  00074	13833902	 orrne       r3, r3, #2, 18
  00078	15823004	 strne       r3, [r2, #4]
  0007c		 |$LN13@RequestAnd|
  0007c	e594301c	 ldr         r3, [r4, #0x1C]

; 182  :             }
; 183  :         }
; 184  :         PadCfgUnlock();

  00080	e3530000	 cmp         r3, #0
  00084	12840004	 addne       r0, r4, #4
  00088	1b000000	 blne        LeaveCriticalSection
  0008c		 |$LN10@RequestAnd|

; 185  :     }
; 186  :     return rc;
; 187  : }

  0008c	e1a00005	 mov         r0, r5
  00090	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$LN17@RequestAnd|
  00098		 |$LN18@RequestAnd|
  00098	00000000	 DCD         |g_NbPads|
  0009c		 |$M44866|

			 ENDP  ; |RequestAndConfigurePad|

	EXPORT	|RequestAndConfigurePadArray|

  00000			 AREA	 |.pdata|, PDATA
|$T44901| DCD	|$LN28@RequestAnd@2|
	DCD	0x40003801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RequestAndConfigurePadArray| PROC

; 192  : {

  00000		 |$LN28@RequestAnd@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M44898|
  00004	e1a06000	 mov         r6, r0

; 193  :     BOOL rc = TRUE;
; 194  :     int i = 0;
; 195  :     
; 196  :     PadCfgLock();

  00008	e59f40cc	 ldr         r4, [pc, #0xCC]
  0000c	e594301c	 ldr         r3, [r4, #0x1C]
  00010	e3530000	 cmp         r3, #0
  00014	12840004	 addne       r0, r4, #4
  00018	1b000000	 blne        EnterCriticalSection

; 197  :     // Check that all pads are valid and released
; 198  :     i=0;

  0001c	e3a03cff	 mov         r3, #0xFF, 24
  00020	e38370ff	 orr         r7, r3, #0xFF
  00024	e1a05006	 mov         r5, r6
  00028		 |$LL7@RequestAnd@2|

; 199  :     while (rc && (padArray[i].padID != (UINT16) -1))

  00028	e1d500b0	 ldrh        r0, [r5]
  0002c	e1500007	 cmp         r0, r7
  00030	0a000012	 beq         |$LN6@RequestAnd@2|

; 200  :     {
; 201  :         int padIndex;
; 202  :         padIndex = FindPad(padArray[i].padID);

  00034	eb000000	 bl          FindPad

; 203  :         if (padIndex == -1) 

  00038	e3700001	 cmn         r0, #1
  0003c	0a000008	 beq         |$error$44526|

; 204  :         {
; 205  :             goto error;
; 206  :         }
; 207  :         if (padIndex >= g_NbPads)

  00040	e5943000	 ldr         r3, [r4]
  00044	e1500003	 cmp         r0, r3
  00048	aa000005	 bge         |$error$44526|

; 208  :         {
; 209  :             ASSERT(0);
; 210  :             goto error;
; 211  :         }
; 212  :         if (g_bspPadInfo[padIndex].inUse)

  0004c	e5943018	 ldr         r3, [r4, #0x18]
  00050	e0833180	 add         r3, r3, r0, lsl #3
  00054	e5933004	 ldr         r3, [r3, #4]
  00058	e3130902	 tst         r3, #2, 18

; 213  :         {                
; 214  :             goto error;
; 215  :         }
; 216  :         i++;

  0005c	02855008	 addeq       r5, r5, #8
  00060	0afffff0	 beq         |$LL7@RequestAnd@2|
  00064		 |$error$44526|

; 232  : 
; 233  : error:
; 234  :     PadCfgUnlock();

  00064	e594301c	 ldr         r3, [r4, #0x1C]
  00068	e3530000	 cmp         r3, #0
  0006c	12840004	 addne       r0, r4, #4
  00070	1b000000	 blne        LeaveCriticalSection

; 235  :     return FALSE;

  00074	e3a00000	 mov         r0, #0

; 236  : }

  00078	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN6@RequestAnd@2|

; 217  :     }
; 218  : 
; 219  :     // Request and Configure all pads
; 220  :     i = 0;

  00080	e3a03c7f	 mov         r3, #0x7F, 24
  00084	e38350ff	 orr         r5, r3, #0xFF
  00088		 |$LL2@RequestAnd@2|

; 221  :     while (rc && (padArray[i].padID != (UINT16) -1))

  00088	e1d600b0	 ldrh        r0, [r6]
  0008c	e1500007	 cmp         r0, r7
  00090	0a00000a	 beq         |$LN1@RequestAnd@2|

; 222  :     {
; 223  :         int padIndex;
; 224  :         padIndex = FindPad(padArray[i].padID);

  00094	eb000000	 bl          FindPad

; 225  :         g_bspPadInfo[padIndex].inUse = 1;

  00098	e5943018	 ldr         r3, [r4, #0x18]
  0009c	e0832180	 add         r2, r3, r0, lsl #3
  000a0	e5923004	 ldr         r3, [r2, #4]
  000a4	e3833902	 orr         r3, r3, #2, 18
  000a8	e5823004	 str         r3, [r2, #4]

; 226  :         SOCSetPadConfig(padArray[i].padID,(UINT16)padArray[i].Cfg);     

  000ac	e5963004	 ldr         r3, [r6, #4]
  000b0	e0d600b8	 ldrh        r0, [r6], #8
  000b4	e0031005	 and         r1, r3, r5
  000b8	eb000000	 bl          SOCSetPadConfig
  000bc	eafffff1	 b           |$LL2@RequestAnd@2|
  000c0		 |$LN1@RequestAnd@2|

; 227  :         i++;
; 228  :     }
; 229  : 
; 230  :     PadCfgUnlock();

  000c0	e594301c	 ldr         r3, [r4, #0x1C]
  000c4	e3530000	 cmp         r3, #0
  000c8	12840004	 addne       r0, r4, #4
  000cc	1b000000	 blne        LeaveCriticalSection

; 231  :     return TRUE;

  000d0	e3a00001	 mov         r0, #1

; 236  : }

  000d4	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$LN29@RequestAnd@2|
  000dc		 |$LN30@RequestAnd@2|
  000dc	00000000	 DCD         |g_NbPads|
  000e0		 |$M44899|

			 ENDP  ; |RequestAndConfigurePadArray|

	EXPORT	|ReleasePadArray|

  00000			 AREA	 |.pdata|, PDATA
|$T44916| DCD	|$LN9@ReleasePad@2|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReleasePadArray| PROC

; 239  : {   

  00000		 |$LN9@ReleasePad@2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M44913|
  00004	e1a04000	 mov         r4, r0

; 240  :     BOOL rc = TRUE;

  00008	e3a03cff	 mov         r3, #0xFF, 24
  0000c	e38350ff	 orr         r5, r3, #0xFF
  00010	e3a00001	 mov         r0, #1
  00014		 |$LL2@ReleasePad@2|

; 241  :     int i = 0;
; 242  :         
; 243  :     // Check that all pads are valid and released
; 244  :     i=0;
; 245  :     while (rc && (padArray[i].padID != (UINT16) -1))

  00014	e1d430b0	 ldrh        r3, [r4]
  00018	e1530005	 cmp         r3, r5
  0001c	0a000004	 beq         |$LN1@ReleasePad@2|

; 246  :     {
; 247  :        rc = ReleasePad(padArray[i].padID);

  00020	e1a00003	 mov         r0, r3
  00024	eb000000	 bl          ReleasePad
  00028	e3500000	 cmp         r0, #0

; 248  : 	   i++;

  0002c	e2844008	 add         r4, r4, #8
  00030	1afffff7	 bne         |$LL2@ReleasePad@2|
  00034		 |$LN1@ReleasePad@2|

; 249  :     }    
; 250  :     return rc;
; 251  : }

  00034	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M44914|

			 ENDP  ; |ReleasePadArray|

	EXPORT	|RequestDevicePads|
	IMPORT	|BSPGetDevicePadInfo|

  00000			 AREA	 |.pdata|, PDATA
|$T44928| DCD	|$LN6@RequestDev|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RequestDevicePads| PROC

; 314  : {

  00000		 |$LN6@RequestDev|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M44925|

; 315  :     BOOL rc = FALSE;
; 316  :     const PAD_INFO* p = BSPGetDevicePadInfo(device);

  00004	e3a04000	 mov         r4, #0
  00008	eb000000	 bl          BSPGetDevicePadInfo
  0000c	e3500000	 cmp         r0, #0

; 317  : 
; 318  :     if (p)

  00010	0a000001	 beq         |$LN1@RequestDev|

; 319  :     {
; 320  :         rc = RequestAndConfigurePadArray(p);

  00014	eb000000	 bl          RequestAndConfigurePadArray
  00018	e1a04000	 mov         r4, r0
  0001c		 |$LN1@RequestDev|

; 321  :     }
; 322  : 
; 323  :     return rc;
; 324  : }

  0001c	e1a00004	 mov         r0, r4
  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M44926|

			 ENDP  ; |RequestDevicePads|

	EXPORT	|ReleaseDevicePads|

  00000			 AREA	 |.pdata|, PDATA
|$T44940| DCD	|$LN6@ReleaseDev|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReleaseDevicePads| PROC

; 326  : {

  00000		 |$LN6@ReleaseDev|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M44937|

; 327  :     BOOL rc = FALSE;
; 328  :     const PAD_INFO* p = BSPGetDevicePadInfo(device);

  00004	e3a04000	 mov         r4, #0
  00008	eb000000	 bl          BSPGetDevicePadInfo
  0000c	e3500000	 cmp         r0, #0

; 329  :     
; 330  :     if (p)

  00010	0a000001	 beq         |$LN1@ReleaseDev|

; 331  :     {
; 332  :         rc = ReleasePadArray(p);

  00014	eb000000	 bl          ReleasePadArray
  00018	e1a04000	 mov         r4, r0
  0001c		 |$LN1@ReleaseDev|

; 333  :     }
; 334  : 
; 335  :     return rc;
; 336  : }

  0001c	e1a00004	 mov         r0, r4
  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M44938|

			 ENDP  ; |ReleaseDevicePads|

	END
