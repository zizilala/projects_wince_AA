; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\OAL\OMAP_POWER\power.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OEMInterruptPending|
	IMPORT	|OALIntrIsIrqPending|
	IMPORT	|OALIntrTranslateSysIntr|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\oal\omap_power\power.c

  00000			 AREA	 |.pdata|, PDATA
|$T44355| DCD	|$LN12@OEMInterru|
	DCD	0x40001a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMInterruptPending| PROC

; 53   : {

  00000		 |$LN12@OEMInterru|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M44352|

; 54   :     BOOL pending = FALSE;
; 55   :     const UINT32 *pIrqs;
; 56   :     UINT32 ix, count;
; 57   : 
; 58   :     if (OALIntrTranslateSysIntr(sysIntr, &count, &pIrqs))

  00008	e28d2004	 add         r2, sp, #4
  0000c	e28d1000	 add         r1, sp, #0
  00010	e3a04000	 mov         r4, #0
  00014	eb000000	 bl          OALIntrTranslateSysIntr
  00018	e3500000	 cmp         r0, #0
  0001c	0a00000d	 beq         |$LN9@OEMInterru|

; 59   :     {
; 60   :         for (ix = 0; ix < count && !pending; ix++)

  00020	e59d3000	 ldr         r3, [sp]
  00024	e3a05000	 mov         r5, #0
  00028	e3530000	 cmp         r3, #0
  0002c	0a000009	 beq         |$LN9@OEMInterru|
  00030		 |$LL3@OEMInterru|
  00030	e3540000	 cmp         r4, #0
  00034	1a000007	 bne         |$LN9@OEMInterru|

; 61   :         {
; 62   :             pending = OALIntrIsIrqPending(pIrqs[ix]);

  00038	e59d3004	 ldr         r3, [sp, #4]
  0003c	e7930105	 ldr         r0, [r3, +r5, lsl #2]
  00040	eb000000	 bl          OALIntrIsIrqPending
  00044	e59d3000	 ldr         r3, [sp]
  00048	e2855001	 add         r5, r5, #1
  0004c	e1a04000	 mov         r4, r0
  00050	e1550003	 cmp         r5, r3
  00054	3afffff5	 bcc         |$LL3@OEMInterru|
  00058		 |$LN9@OEMInterru|

; 63   :         }            
; 64   :     }
; 65   :         
; 66   :     return pending;
; 67   : }

  00058	e1a00004	 mov         r0, r4
  0005c	e28dd008	 add         sp, sp, #8
  00060	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M44353|

			 ENDP  ; |OEMInterruptPending|

	EXPORT	|OEMPowerOff|

  00000			 AREA	 |.pdata|, PDATA
|$T44362| DCD	|$LN5@OEMPowerOf|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPowerOff| PROC

; 76   : {

  00000		 |$LN5@OEMPowerOf|
  00000		 |$M44359|

; 77   : #if 0
; 78   : 
; 79   : 	DWORD  i		  = 0;
; 80   : 	UINT32 sysIntr;
; 81   :     UINT32 intr[3];
; 82   : 	UINT32 Count;
; 83   : 	UINT32* pIrqs;
; 84   : 	DWORD  deviceID;
; 85   : 	INTR_GPIO_CTXT* ctxt;
; 86   : 
; 87   :     // Give chance to do board specific stuff
; 88   :     BSPPowerOff();
; 89   : 
; 90   : 	// Save all interrupts masks
; 91   :     intr[0] = INREG32(&g_pIntr->pICLRegs->INTC_MIR0);
; 92   :     intr[1] = INREG32(&g_pIntr->pICLRegs->INTC_MIR1);
; 93   :     intr[2] = INREG32(&g_pIntr->pICLRegs->INTC_MIR2);
; 94   : 
; 95   : 	// Disable all interrupts
; 96   :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR0, OMAP_MPUIC_MASKALL);
; 97   :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR1, OMAP_MPUIC_MASKALL);
; 98   :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR2, OMAP_MPUIC_MASKALL);
; 99   : 
; 100  : 	// Save state then mask all GPIO interrupts
; 101  : 	for (i=0; i<g_pIntr->nbGpioBank; i++)
; 102  :     {
; 103  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];		
; 104  : 
; 105  : 		// Enable Bank clocks first
; 106  : 		EnableDeviceClocks(pCurrGpioCtxt->device, TRUE);
; 107  : 
; 108  : 		// Save current state
; 109  : 		pCurrGpioCtxt->restoreCtxt.IRQENABLE1 = INREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1);
; 110  : 		pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE = INREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE);
; 111  : 
; 112  : 		// Disable all GPIO interrupts in the bank
; 113  :         OUTREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1, 0);
; 114  :         OUTREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE, 0);
; 115  : 
; 116  : 		// Disable Bank clocks
; 117  : 		EnableDeviceClocksNoRefCount(pCurrGpioCtxt->device, FALSE);
; 118  : 	}
; 119  : 
; 120  :     // Enable wakeup sources interrupts
; 121  :     for (sysIntr = SYSINTR_DEVICES; sysIntr < SYSINTR_MAXIMUM; sysIntr++)
; 122  :     {
; 123  :         // Skip if sysIntr isn't allowed as wake source
; 124  :         if (!OALPowerWakeSource(sysIntr)) continue;
; 125  : 
; 126  : 		// Retrieve IRQs
; 127  : 		OALIntrTranslateSysIntr(sysIntr, &Count, &pIrqs);
; 128  : 
; 129  : 		// Loop into the IRQs
; 130  : 		for (i=0; i<Count; i++)
; 131  : 		{
; 132  : 			// We must handle the special case of the abstracted GPIO interrupts
; 133  : 			ctxt = GetGPIOCtxtByIrq(pIrqs[i]);
; 134  : 			if (ctxt)
; 135  : 			{
; 136  : 				// This is a GPIO interrupt, we need to enable its bank interrupt
; 137  : 				OALIntrEnableIrqs(1, &ctxt->bank_irq);
; 138  : 
; 139  : 				// Store its bank device ID for enabling its clocks
; 140  : 				deviceID = ctxt->device;
; 141  : 			}
; 142  : 			else
; 143  : 			{
; 144  : 				// This is NOT a GPIO interrupt, so we deduce the deviceid directly from its irq
; 145  : 				deviceID = GetDeviceByIrq(pIrqs[i]);
; 146  : 			}
; 147  : 
; 148  : 			// Enable Clocks for this device
; 149  : 			EnableDeviceClocksNoRefCount(deviceID, TRUE);
; 150  : 		}
; 151  : 
; 152  :         // Enable it as interrupt
; 153  :         OEMInterruptEnable(sysIntr, NULL, 0);
; 154  :   }
; 155  : 
; 156  : 	// Go to suspend mode
; 157  : 	//OALGoToSuspendMode();
; 158  : 
; 159  : 	/*
; 160  : 		Sleeping .... until waking up
; 161  : 	*/
; 162  : 
; 163  : 	// Find out about the wake up source
; 164  :     for (sysIntr = SYSINTR_DEVICES; sysIntr < SYSINTR_MAXIMUM; sysIntr++)
; 165  :     {            
; 166  : 		// Skip if sysIntr isn't allowed as wake source
; 167  : 		if (!OALPowerWakeSource(sysIntr)) continue;
; 168  : 
; 169  : 		// When this sysIntr is pending we find wake source
; 170  : 		if (OEMInterruptPending(sysIntr))
; 171  :         {
; 172  : 			g_oalWakeSource = sysIntr;
; 173  : 			break;
; 174  :         }
; 175  :     }
; 176  : 
; 177  : 	// Put GPIO interrupt state back to the way it was before suspend
; 178  : 	for (i=0; i<g_pIntr->nbGpioBank; i++)
; 179  :     {		
; 180  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];
; 181  : 
; 182  : 		// Enable Bank clocks first
; 183  : 		EnableDeviceClocksNoRefCount(pCurrGpioCtxt->device, TRUE);
; 184  : 
; 185  : 		// Write registers with the previously saved values
; 186  : 		OUTREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1, pCurrGpioCtxt->restoreCtxt.IRQENABLE1);
; 187  : 		OUTREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE, pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE);
; 188  : 
; 189  : 		// Disable Bank clocks
; 190  : 		EnableDeviceClocks(pCurrGpioCtxt->device, FALSE);
; 191  : 	}
; 192  : 
; 193  : 	// restore inetrrupt masks
; 194  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR0, intr[0]);
; 195  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR1, intr[1]);
; 196  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR2, intr[2]);  
; 197  : 
; 198  :     // Allow the BSP to perform board specific processing
; 199  :     BSPPowerOn();  
; 200  : #endif
; 201  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M44360|

			 ENDP  ; |OEMPowerOff|

	END
