ARM macroassembler      Page:1 
    1 00000000          ;/* 
    2 00000000          ;=============================================================================== 
    3 00000000          ;*             Texas Instruments OMAP(TM) Platform Software 
    4 00000000          ;* (c) Copyright Texas Instruments, Incorporated. All Rights Reserved. 
    5 00000000          ;* 
    6 00000000          ;* Use of this software is controlled by the terms and conditions found 
    7 00000000          ;* in the license agreement under which this software has been supplied. 
    8 00000000          ;* 
    9 00000000          ;=============================================================================== 
   10 00000000          ;*/ 
   11 00000000          ; 
   12 00000000          ;  File:  vfp.s 
   13 00000000            
   14 00000000                  INCLUDE kxarm.h 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000          ;++ 
   14 00000000          ; 
   15 00000000          ; 
   16 00000000          ; Module Name: 
   17 00000000          ; 
   18 00000000          ;    kxarm.h 
   19 00000000          ; 
   20 00000000          ; Abstract: 
   21 00000000          ; 
   22 00000000          ;    This is an implementation of the WINCE/ARM Calling Sequence 
   23 00000000          ;    Specification. 
   24 00000000          ; 
   25 00000000          ; Environment: 
   26 00000000          ;    String Library 
   27 00000000          ; 
   28 00000000          ; Revision History: 
   29 00000000          ;-- 
   30 00000000            
   31 00000000                          GBLS    VBar 
   32 00000000          VBar    SETS    "|" 
   33 00000000                          GBLL    HaveExceptHandler 
   34 00000000                          GBLS    AreaName 
   35 00000000                          GBLS    FuncName 
   36 00000000                          GBLS    PrologName 
   37 00000000                          GBLS    FuncEndName 
   38 00000000                          GBLS    ExceptHandler 
   39 00000000                          GBLS    ExceptData 
   40 00000000          AreaName SETS   "|.text|" 
   41 00000000          HaveExceptHandler SETL {FALSE} 
   42 00000000            
   43 00000000                  MACRO 
   44 00000000                  TEXTAREA 
   45 00000000                  AREA |.text|,ALIGN=2,CODE,READONLY 
   46 00000000          AreaName SETS "|.text|" 
   47 00000000                  MEND 
   48 00000000            
   49 00000000              MACRO 
   50 00000000              THUMBAREA 
   51 00000000              AREA |.text|,ALIGN=2,CODE,READONLY,THUMB 
   52 00000000          AreaName SETS "|.text|" 
   53 00000000              MEND 
   54 00000000            
   55 00000000                  MACRO 
   56 00000000                  STARTUPTEXT 
   57 00000000                  AREA |.astart|,ALIGN=2,CODE 
   58 00000000          AreaName SETS "|.astart|" 
   59 00000000                  MEND 
   60 00000000            
   61 00000000                  MACRO 
   62 00000000                  START_REGION    $NameBegin 
   63 00000000                  LCLS    TempName 
   64 00000000          TempName SETS    VBar:CC:"$NameBegin":CC:VBar 
   65 00000000                  EXPORT  $TempName[DATA] 
   66 00000000          $TempName 
   67 00000000                  MEND 
   68 00000000            
   69 00000000                  MACRO 
   70 00000000                  END_REGION              $NameEnd 
   71 00000000                  LCLS    TempName 
   72 00000000          TempName SETS    VBar:CC:"$NameEnd":CC:VBar 
   73 00000000                  EXPORT  $TempName[DATA] 
   74 00000000          $TempName 
   75 00000000                  MEND 
   76 00000000            
   77 00000000          ; 
   78 00000000          ;   This macro should be used if the assembly function is in ARM 
   79 00000000          ; 
   80 00000000            
   81 00000000                  MACRO 
   82 00000000                  NESTED_ARMENTRY $Name 
   83 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
   84 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
   85 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
   86 00000000                  LCLS    ExceptBit 
   87 00000000                  IF HaveExceptHandler 
   88 00000000          ExceptBit   SETS        "0x80000000" 
   89 00000000                  ELSE 
   90 00000000          ExceptBit   SETS        "0" 
   91 00000000                  ENDIF 
   92 00000000            
   93 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
   94 00000000                  DCD         $FuncName 
   95 00000000              DCD     (($PrologName-$FuncName)/4) :OR: ((($FuncEndName-$FuncName)/4):SHL:8) :OR: 0x40000000 :OR: $ExceptBit 
   96 00000000                  AREA $AreaName,CODE,READONLY 
   97 00000000                  ALIGN   2 
   98 00000000                  EXPORT  $FuncName [FUNC] 
   99 00000000                  IF HaveExceptHandler 
  100 00000000              DCD $ExceptHandler 
  101 00000000              DCD $ExceptData 
  102 00000000          HaveExceptHandler SETL {FALSE} 
  103 00000000                  ENDIF 
  104 00000000          $FuncName 
  105 00000000                  ROUT 
  106 00000000                  MEND 
  107 00000000            
  108 00000000          ; 
  109 00000000          ;   This macro should be used if the assembly function is in THUMB 
  110 00000000          ; 
  111 00000000                  MACRO 
  112 00000000                  NESTED_THUMBENTRY       $Name 
  113 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
  114 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
  115 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  116 00000000                  LCLS    ExceptBit 
  117 00000000                  IF HaveExceptHandler 
  118 00000000          ExceptBit   SETS        "0x80000000" 
  119 00000000                  ELSE 
  120 00000000          ExceptBit   SETS        "0" 
  121 00000000                  ENDIF 
  122 00000000            
  123 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
  124 00000000                  DCD         $FuncName 
  125 00000000              DCD     (($PrologName-$FuncName)/2) :OR: ((($FuncEndName-$FuncName)/2):SHL:8) :OR: $ExceptBit 
  126 00000000                  AREA $AreaName,CODE,READONLY 
  127 00000000                  ALIGN   2 
  128 00000000                  EXPORT  $FuncName [FUNC] 
  129 00000000                  IF HaveExceptHandler 
  130 00000000              DCD $ExceptHandler 
  131 00000000              DCD $ExceptData 
  132 00000000          HaveExceptHandler SETL {FALSE} 
  133 00000000                  ENDIF 
  134 00000000          $FuncName 
  135 00000000                  ROUT 
  136 00000000                  MEND 
  137 00000000            
  138 00000000          ; 
  139 00000000          ;   This macro should be used if the assembly function is in ARM 
  140 00000000          ; 
  141 00000000                  MACRO 
  142 00000000                  NESTED_ENTRY    $Name 
  143 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
  144 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
  145 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  146 00000000                  LCLS    ExceptBit 
  147 00000000                  IF HaveExceptHandler 
  148 00000000          ExceptBit   SETS        "0x80000000" 
  149 00000000                  ELSE 
  150 00000000          ExceptBit   SETS        "0" 
  151 00000000                  ENDIF 
  152 00000000            
  153 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
  154 00000000                  DCD         $FuncName 
  155 00000000              DCD     (($PrologName-$FuncName)/4) :OR: ((($FuncEndName-$FuncName)/4):SHL:8) :OR: 0x40000000 :OR: $ExceptBit 
  156 00000000                  AREA $AreaName,CODE,READONLY 
  157 00000000                  ALIGN   2 
  158 00000000                  EXPORT  $FuncName [FUNC] 
  159 00000000                  IF HaveExceptHandler 
  160 00000000              DCD $ExceptHandler 
  161 00000000              DCD $ExceptData 
  162 00000000          HaveExceptHandler SETL {FALSE} 
  163 00000000                  ENDIF 
  164 00000000          $FuncName 
  165 00000000                  ROUT 
  166 00000000                  MEND 
  167 00000000            
  168 00000000                  MACRO 
  169 00000000                  PROLOG_END 
  170 00000000          $PrologName 
  171 00000000                  MEND 
  172 00000000            
  173 00000000                  MACRO 
  174 00000000                  LEAF_ENTRY      $Name 
  175 00000000          FuncName SETS    VBar:CC:"$Name":CC:VBar 
  176 00000000          PrologName SETS "Invalid Prolog" 
  177 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  178 00000000                  ALIGN   2 
  179 00000000                  EXPORT  $FuncName [FUNC] 
  180 00000000          $FuncName 
  181 00000000                  ROUT 
  182 00000000                  MEND 
  183 00000000            
  184 00000000                  MACRO 
  185 00000000                  ALTERNATE_ENTRY $Name 
  186 00000000                  LCLS    TempName 
  187 00000000          TempName SETS    VBar:CC:"$Name":CC:VBar 
  188 00000000                  EXPORT  $TempName [FUNC] 
  189 00000000          $TempName 
  190 00000000                  MEND 
  191 00000000            
  192 00000000                  MACRO 
  193 00000000                  ENTRY_END       $Name 
  194 00000000          $FuncEndName 
  195 00000000                  MEND 
  196 00000000            
  197 00000000                  MACRO 
  198 00000000                  EXCEPTION_HANDLER       $Handler 
  199 00000000          ExceptHandler SETS    VBar:CC:"$Handler":CC:VBar 
  200 00000000          ExceptData SETS "0" 
  201 00000000          HaveExceptHandler SETL {TRUE} 
  202 00000000                  MEND 
  203 00000000            
  204 00000000                  MACRO 
  205 00000000                  EXCEPTION_HANDLER_DATA  $Handler, $HandlerData 
  206 00000000          ExceptHandler SETS    VBar:CC:"$Handler":CC:VBar 
  207 00000000          ExceptData SETS    VBar:CC:"$HandlerData":CC:VBar 
  208 00000000          HaveExceptHandler SETL {TRUE} 
  209 00000000                  MEND 
  210 00000000            
  211 00000000                  MACRO 
  212 00000000                  EXCEPTION_HANDLER_MILLICODE     $Handler, $HandlerData 
  213 00000000          ExceptHandler SETS    "$Handler" 
  214 00000000          ExceptData SETS    "$HandlerData" 
  215 00000000          HaveExceptHandler SETL {TRUE} 
  216 00000000                  MEND 
  217 00000000            
  218 00000000            
  219 00000000                  END 
   15 00000000            
   16 00000000                  EXPORT OALVFPGetFPSID 
   17 00000000                  EXPORT OALVFPEnable 
   18 00000000                   
   19 00000000                  TEXTAREA 
   45                           AREA |.text|,ALIGN=2,CODE,READONLY 
   46 00000000          AreaName SETS "|.text|" 
   20 00000000            
   21 00000000          ; Note: The VFP specific instructions cannot be assembled using the CE6 arm assembler. 
   22 00000000          ASSEMBLER_ARM_ARCH7_SUPPORT EQU 0 
   23 00000000            
   24 00000000          ;------------------------------------------------------------------------------- 
   25 00000000          ; 
   26 00000000          ;  Function:  OALVFPEnable 
   27 00000000          ; 
   28 00000000          ;  This function enables the Vector Floating Point system 
   29 00000000          ; 
   30 00000000                  LEAF_ENTRY OALVFPEnable 
  175 00000000          FuncName SETS    VBar:CC:"OALVFPEnable":CC:VBar 
  176 00000000          PrologName SETS "Invalid Prolog" 
  177 00000000          FuncEndName SETS    VBar:CC:"OALVFPEnable":CC:"_end":CC:VBar 
  178 00000000                  ALIGN   2 
  179 00000000                  EXPORT  |OALVFPEnable| [FUNC] 
  180 00000000          |OALVFPEnable| 
  181 00000000                  ROUT 
   31 00000000            
   32 00000000                  ; Enable access to co-processor cp10 and cp11 
   33 00000000                  ; for both kernel and user access 
   34 00000000 ee110f50         mrc     p15, 0, r0, c1, c0, 2 
   35 00000004            
   36 00000004 e3800503         orr     r0, r0, #(3 << 22)          ; Kernel+user access to cp11 
   37 00000008 e3800603         orr     r0, r0, #(3 << 20)          ; Kernel+user access to cp10 
   38 0000000c            
   39 0000000c ee010f50         mcr     p15, 0, r0, c1, c0, 2       ; Set co-processor access bits 
   40 00000010            
   41 00000010            
   42 00000010                  ; Enable VFP co-processor by setting EN bit in FPEXC register 
   43 00000010 e3a00000         mov     r0, #0 
   44 00000014 e3800101         orr     r0, r0, #(1 << 30)          ; EN (1=enable VFPLite and NEON coprocessor) 
   45 00000018            
   46 00000018 eee80a10         mcr     p10, 7, r0, c8, c0, 0       ; Set FPEXC register 
   47 0000001c            
   48 0000001c e1a0f00e         mov     pc, lr 
   49 00000020            
   50 00000020                  ENTRY_END OALVFPEnable 
  194 00000020          |OALVFPEnable_end| 
   51 00000020            
   52 00000020            
   53 00000020          ;------------------------------------------------------------------------------- 
   54 00000020          ; 
   55 00000020          ;  Function:  OALVFPGetFPSID 
   56 00000020          ; 
   57 00000020          ;  This function returns the Vector Floating Point FPSID register contents 
   58 00000020          ; 
   59 00000020                  LEAF_ENTRY OALVFPGetFPSID 
  175 00000020          FuncName SETS    VBar:CC:"OALVFPGetFPSID":CC:VBar 
  176 00000020          PrologName SETS "Invalid Prolog" 
  177 00000020          FuncEndName SETS    VBar:CC:"OALVFPGetFPSID":CC:"_end":CC:VBar 
  178 00000020                  ALIGN   2 
  179 00000020                  EXPORT  |OALVFPGetFPSID| [FUNC] 
  180 00000020          |OALVFPGetFPSID| 
  181 00000020                  ROUT 
   60 00000020            
   61 00000020                  ; Read the FPSID register 
   62 00000020 eef00a10         mrc     p10, 7, r0, c0, c0, 0 
   63 00000024 e1a0f00e         mov     pc, lr 
   64 00000028            
   65 00000028                  ENTRY_END OALVFPGetFPSID 
  194 00000028          |OALVFPGetFPSID_end| 
   66 00000028            
   67 00000028            
   68 00000028          ;------------------------------------------------------------------------------- 
   69 00000028          ; 
   70 00000028          ;  Function:  OALGetCACR 
   71 00000028          ; 
   72 00000028          ;  This function returns the Non-secure Access Control register contents 
   73 00000028          ; 
   74 00000028                  LEAF_ENTRY OALGetCACR 
  175 00000028          FuncName SETS    VBar:CC:"OALGetCACR":CC:VBar 
  176 00000028          PrologName SETS "Invalid Prolog" 
  177 00000028          FuncEndName SETS    VBar:CC:"OALGetCACR":CC:"_end":CC:VBar 
  178 00000028                  ALIGN   2 
  179 00000028                  EXPORT  |OALGetCACR| [FUNC] 
  180 00000028          |OALGetCACR| 
  181 00000028                  ROUT 
   75 00000028            
   76 00000028                  ; Read the CACR register 
   77 00000028 ee110f50         mrc     p15, 0, r0, c1, c0, 2 
   78 0000002c e1a0f00e         mov     pc, lr 
   79 00000030            
   80 00000030                  ENTRY_END OALGetCACR 
  194 00000030          |OALGetCACR_end| 
   81 00000030            
   82 00000030          ;------------------------------------------------------------------------------- 
   83 00000030          ; 
   84 00000030          ;  Function:  OALGetNACR 
   85 00000030          ; 
   86 00000030          ;  This function returns the Non-secure Access Control register contents 
   87 00000030          ; 
   88 00000030                  LEAF_ENTRY OALGetNACR 
  175 00000030          FuncName SETS    VBar:CC:"OALGetNACR":CC:VBar 
  176 00000030          PrologName SETS "Invalid Prolog" 
  177 00000030          FuncEndName SETS    VBar:CC:"OALGetNACR":CC:"_end":CC:VBar 
  178 00000030                  ALIGN   2 
  179 00000030                  EXPORT  |OALGetNACR| [FUNC] 
  180 00000030          |OALGetNACR| 
  181 00000030                  ROUT 
   89 00000030            
   90 00000030                  ; Read the NACR register 
   91 00000030 ee110f51         mrc     p15, 0, r0, c1, c1, 2 
   92 00000034 e1a0f00e         mov     pc, lr 
   93 00000038            
   94 00000038                  ENTRY_END OALGetNACR 
  194 00000038          |OALGetNACR_end| 
   95 00000038            
   96 00000038          VFP_ENABLE      EQU     0x40000000 
   97 00000038            
   98 00000038          ;------------------------------------------------------------------------------- 
   99 00000038          ; 
  100 00000038          ;  Function:  OALSaveNeonRegisters(DWORD * pSaveArea) 
  101 00000038          ; 
  102 00000038          ;  This function saves off all the Neon registers for a thread context switch 
  103 00000038          ; 
  104 00000038                  LEAF_ENTRY OALSaveNeonRegisters 
  175 00000038          FuncName SETS    VBar:CC:"OALSaveNeonRegisters":CC:VBar 
  176 00000038          PrologName SETS "Invalid Prolog" 
  177 00000038          FuncEndName SETS    VBar:CC:"OALSaveNeonRegisters":CC:"_end":CC:VBar 
  178 00000038                  ALIGN   2 
  179 00000038                  EXPORT  |OALSaveNeonRegisters| [FUNC] 
  180 00000038          |OALSaveNeonRegisters| 
  181 00000038                  ROUT 
  105 00000038            
  106 00000038                  ; save current VFP/Neon enable state 
  107 00000038           IF ASSEMBLER_ARM_ARCH7_SUPPORT = 1 
  109 00000038           ELSE 
  110 00000038 eef82a10         DCD         0xeef82a10  ; fmrx        r2, fpexc  
  111 0000003c           ENDIF 
  112 0000003c                   
  113 0000003c                  ; enable VFP/Neon 
  114 0000003c e3a01101         mov         r1, #VFP_ENABLE 
  115 00000040            
  116 00000040           IF ASSEMBLER_ARM_ARCH7_SUPPORT = 1 
  130 00000040           ELSE 
  131 00000040                  ; use hex values for NEON instructions 
  132 00000040 eee81a10         DCD         0xeee81a10  ; fmxr        fpexc, r1 
  133 00000044                  ; VFP/Neon registers not managed by CE6 kernel in every thread switch  
  134 00000044                  ; save all 32 Neon registers + FPSCR 
  135 00000044 eca00b20         DCD         0xeca00b20  ; vstmia.64   r0!, {d0-d15}  
  136 00000048 ece00b20         DCD         0xece00b20  ; vstmia.64   r0!,  {d16-d31}  
  137 0000004c eef13a10         DCD         0xeef13a10  ; fmrx        r3, fpscr 
  138 00000050 e5803000         str         r3, [r0] 
  139 00000054            
  140 00000054                  ; restore VFP/Neon enable state 
  141 00000054 eee82a10         DCD         0xeee82a10  ; fmxr        fpexc, r2  
  142 00000058            
  143 00000058           ENDIF   
  144 00000058            
  145 00000058 e1a0f00e         mov         pc, lr 
  146 0000005c                   
  147 0000005c                  ENTRY_END OALSaveNeonRegisters 
  194 0000005c          |OALSaveNeonRegisters_end| 
  148 0000005c            
  149 0000005c          ;------------------------------------------------------------------------------- 
  150 0000005c          ; 
  151 0000005c          ;  Function:  OALRestoreNeonRegisters(DWORD *pRestoreArea)  
  152 0000005c          ; 
  153 0000005c          ;  This function restores all the Neon registers for a thread context switch 
  154 0000005c          ; 
  155 0000005c                  LEAF_ENTRY OALRestoreNeonRegisters 
  175 0000005c          FuncName SETS    VBar:CC:"OALRestoreNeonRegisters":CC:VBar 
  176 0000005c          PrologName SETS "Invalid Prolog" 
  177 0000005c          FuncEndName SETS    VBar:CC:"OALRestoreNeonRegisters":CC:"_end":CC:VBar 
  178 0000005c                  ALIGN   2 
  179 0000005c                  EXPORT  |OALRestoreNeonRegisters| [FUNC] 
  180 0000005c          |OALRestoreNeonRegisters| 
  181 0000005c                  ROUT 
  156 0000005c            
  157 0000005c                  ; save current VFP/Neon enable state 
  158 0000005c           IF ASSEMBLER_ARM_ARCH7_SUPPORT = 1 
  160 0000005c           ELSE 
  161 0000005c eef82a10         DCD         0xeef82a10  ; fmrx        r2, fpexc  
  162 00000060           ENDIF 
  163 00000060            
  164 00000060                  ; enable VFP/Neon 
  165 00000060 e3a01101         mov         r1, #VFP_ENABLE 
  166 00000064            
  167 00000064           IF ASSEMBLER_ARM_ARCH7_SUPPORT = 1 
  178 00000064           ELSE 
  179 00000064 eee81a10         DCD         0xeee81a10  ; fmxr        fpexc, r1  
  180 00000068            
  181 00000068                  ; restore all 32 Neon registers + FPSCR 
  182 00000068 ecb00b20         DCD         0xecb00b20  ; vldmia.64   r0!, {d0-d15}  
  183 0000006c ecf00b20         DCD         0xecf00b20  ; vldmia.64   r0!,  {d16-d31}  
  184 00000070 e5903000         ldr         r3, [r0] 
  185 00000074 eee13a10         DCD         0xeee13a10  ; fmxr        fpscr, r3 
  186 00000078            
  187 00000078                  ; restore VFP/Neon enable state  
  188 00000078 eee82a10         DCD         0xeee82a10  ; fmxr        fpexc, r2  
  189 0000007c           ENDIF 
  190 0000007c                    
  191 0000007c e1a0f00e         mov         pc, lr 
  192 00000080                   
  193 00000080                  ENTRY_END OALRestoreNeonRegisters 
  194 00000080          |OALRestoreNeonRegisters_end| 
  194 00000080            
  195 00000080          ;------------------------------------------------------------------------------- 
  196 00000080          ; 
  197 00000080          ;  Function:  OALSaveAllVfpNeonRegisters(DWORD * pSaveArea) 
  198 00000080          ; 
  199 00000080          ;  This function saves off all the Neon registers prior to suspend 
  200 00000080          ; 
  201 00000080                  LEAF_ENTRY OALSaveAllVfpNeonRegisters 
  175 00000080          FuncName SETS    VBar:CC:"OALSaveAllVfpNeonRegisters":CC:VBar 
  176 00000080          PrologName SETS "Invalid Prolog" 
  177 00000080          FuncEndName SETS    VBar:CC:"OALSaveAllVfpNeonRegisters":CC:"_end":CC:VBar 
  178 00000080                  ALIGN   2 
  179 00000080                  EXPORT  |OALSaveAllVfpNeonRegisters| [FUNC] 
  180 00000080          |OALSaveAllVfpNeonRegisters| 
  181 00000080                  ROUT 
  202 00000080                  EXPORT OALSaveAllVfpNeonRegisters 
  203 00000080            
  204 00000080                  ; save current VFP/Neon enable state 
  205 00000080           IF ASSEMBLER_ARM_ARCH7_SUPPORT = 1 
  207 00000080           ELSE 
  208 00000080 eef82a10         DCD         0xeef82a10  ; fmrx        r2, fpexc  
  209 00000084           ENDIF 
  210 00000084                   
  211 00000084                  ; enable VFP/Neon 
  212 00000084 e3a01101         mov         r1, #VFP_ENABLE 
  213 00000088            
  214 00000088           IF ASSEMBLER_ARM_ARCH7_SUPPORT = 1 
  228 00000088           ELSE 
  229 00000088                  ; use hex values for NEON instructions 
  230 00000088                   
  231 00000088 eee81a10         DCD         0xeee81a10  ; fmxr        fpexc, r1 
  232 0000008c            
  233 0000008c                  ; save VFP/Neon data registers 
  234 0000008c eca00b20         DCD         0xeca00b20  ; vstmia.64   r0!, {d0-d15}  
  235 00000090 ece00b20         DCD         0xece00b20  ; vstmia.64   r0!, {d16-d31}  
  236 00000094                  ; save VFP/Neon FPSCR register 
  237 00000094 eef13a10         DCD         0xeef13a10  ; fmrx        r3, fpscr 
  238 00000098 e5a03000         str         r3, [r0]! 
  239 0000009c            
  240 0000009c                  ; save VFP/Neon enable state (FPEXC register) 
  241 0000009c e5802000         str         r2, [r0] 
  242 000000a0            
  243 000000a0           ENDIF   
  244 000000a0            
  245 000000a0 e1a0f00e         mov         pc, lr 
  246 000000a4                   
  247 000000a4                  ENTRY_END OALSaveAllVfpNeonRegisters 
  194 000000a4          |OALSaveAllVfpNeonRegisters_end| 
  248 000000a4            
  249 000000a4          ;------------------------------------------------------------------------------- 
  250 000000a4          ; 
  251 000000a4          ;  Function:  OALRestoreAllVfpNeonRegisters(DWORD *pRestoreArea)  
  252 000000a4          ; 
  253 000000a4          ;  This function restores all the Neon registers after resume 
  254 000000a4          ; 
  255 000000a4                  LEAF_ENTRY OALRestoreAllVfpNeonRegisters 
  175 000000a4          FuncName SETS    VBar:CC:"OALRestoreAllVfpNeonRegisters":CC:VBar 
  176 000000a4          PrologName SETS "Invalid Prolog" 
  177 000000a4          FuncEndName SETS    VBar:CC:"OALRestoreAllVfpNeonRegisters":CC:"_end":CC:VBar 
  178 000000a4                  ALIGN   2 
  179 000000a4                  EXPORT  |OALRestoreAllVfpNeonRegisters| [FUNC] 
  180 000000a4          |OALRestoreAllVfpNeonRegisters| 
  181 000000a4                  ROUT 
  256 000000a4                  EXPORT OALRestoreAllVfpNeonRegisters 
  257 000000a4            
  258 000000a4                  ; enable VFP/Neon 
  259 000000a4 e3a01101         mov         r1, #VFP_ENABLE 
  260 000000a8            
  261 000000a8           IF ASSEMBLER_ARM_ARCH7_SUPPORT = 1 
  273 000000a8           ELSE 
  274 000000a8 eee81a10         DCD         0xeee81a10  ; fmxr        fpexc, r1  
  275 000000ac            
  276 000000ac                  ; restore VFP/Neon data registers 
  277 000000ac ecb00b20         DCD         0xecb00b20  ; vldmia.64   r0!, {d0-d15}  
  278 000000b0 ecf00b20         DCD         0xecf00b20  ; vldmia.64   r0!,  {d16-d31}  
  279 000000b4                  ; restore VFP/Neon FPSCR register 
  280 000000b4 e5b03000         ldr         r3, [r0]! 
  281 000000b8 eee13a10         DCD         0xeee13a10  ; fmxr        fpscr, r3 
  282 000000bc                   
  283 000000bc                  ; restore VFP/Neon enable state (FPEXC register) 
  284 000000bc e5902000         ldr         r2, [r0] 
  285 000000c0 eee82a10         DCD         0xeee82a10  ; fmxr        fpexc, r2  
  286 000000c4           ENDIF 
  287 000000c4                    
  288 000000c4 e1a0f00e         mov         pc, lr 
  289 000000c8                   
  290 000000c8                  ENTRY_END OALRestoreAllVfpNeonRegisters 
  194 000000c8          |OALRestoreAllVfpNeonRegisters_end| 
  291 000000c8            
  292 000000c8            
  293 000000c8          ;------------------------------------------------------------------------------ 
  294 000000c8            
  295 000000c8                  END 
Assembly terminated, errors: 0, warnings: 0 
