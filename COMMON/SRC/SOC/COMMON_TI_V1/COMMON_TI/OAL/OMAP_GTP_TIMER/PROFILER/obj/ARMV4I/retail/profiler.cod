; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\OAL\OMAP_GTP_TIMER\PROFILER\profiler.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_oalProfilerEnabled| [ DATA ]
	EXPORT	|g_oalPerfTimerIrq| [ DATA ]
	EXPORT	|g_pPerfTimer| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|g_oalProfilerIncrement|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|g_oalProfilerEnabled| % 0x4
|g_pPerfTimer| % 0x4
|?PreviousValue@?1??OALTimerQueryPerformanceCounter@@9@9| % 0x8 ; `OALTimerQueryPerformanceCounter'::`2'::PreviousValue

  00000			 AREA	 |.data|, DATA
|g_oalPerfTimerIrq| DCD 0xffffffff

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALTimerQueryPerformanceFrequency|

  00010			 AREA	 |.bss|, NOINIT
|s_Frequency| %	0x4
|s_Frequency| %	0x4
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\oal\omap_gtp_timer\profiler\profiler.c

  00000			 AREA	 |.pdata|, PDATA
|$T45762| DCD	|$LN5@OALTimerQu|
	DCD	0x40000900
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerQueryPerformanceFrequency| PROC

; 137  : {    

  00000		 |$LN5@OALTimerQu|
  00000		 |$M45759|
  00000	e1a02000	 mov         r2, r0

; 138  :     pFrequency->QuadPart = s_Frequency;    

  00004	e59f3014	 ldr         r3, [pc, #0x14]
  00008	e3a01000	 mov         r1, #0

; 139  :     return TRUE;

  0000c	e3a00001	 mov         r0, #1
  00010	e5933000	 ldr         r3, [r3]
  00014	e5821004	 str         r1, [r2, #4]
  00018	e5823000	 str         r3, [r2]

; 140  : }

  0001c	e12fff1e	 bx          lr
  00020		 |$LN6@OALTimerQu|
  00020		 |$LN7@OALTimerQu|
  00020	00000000	 DCD         |s_Frequency|
  00024		 |$M45760|

			 ENDP  ; |OALTimerQueryPerformanceFrequency|

	EXPORT	|OALTimerQueryPerformanceCounter|
	IMPORT	|INTERRUPTS_ENABLE|

  00000			 AREA	 |.pdata|, PDATA
|$T45777| DCD	|$LN7@OALTimerQu@2|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerQueryPerformanceCounter| PROC

; 151  : {

  00000		 |$LN7@OALTimerQu@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45774|
  00004	e1a04000	 mov         r4, r0

; 152  :     static LARGE_INTEGER PreviousValue = {0, 0};
; 153  :     DWORD CurrentValue;
; 154  :     BOOL bInterruptsEnabled;
; 155  :     
; 156  :     bInterruptsEnabled = INTERRUPTS_ENABLE(FALSE);

  00008	e3a00000	 mov         r0, #0
  0000c	eb000000	 bl          INTERRUPTS_ENABLE

; 157  : 
; 158  :     CurrentValue = INREG32(&g_pPerfTimer->TCRR);

  00010	e59f1030	 ldr         r1, [pc, #0x30]
  00014	e5912000	 ldr         r2, [r1]

; 159  :     if (CurrentValue < PreviousValue.LowPart)

  00018	e5913008	 ldr         r3, [r1, #8]
  0001c	e5922028	 ldr         r2, [r2, #0x28]
  00020	e1520003	 cmp         r2, r3

; 160  :     {
; 161  :         // rollover, increment upper 32 bits
; 162  :         PreviousValue.HighPart++;

  00024	e591300c	 ldr         r3, [r1, #0xC]
  00028	32833001	 addcc       r3, r3, #1
  0002c	3581300c	 strcc       r3, [r1, #0xC]

; 163  :     }
; 164  :     PreviousValue.LowPart = CurrentValue;
; 165  :     pCounter->QuadPart = PreviousValue.QuadPart;            
; 166  : 
; 167  :     INTERRUPTS_ENABLE(bInterruptsEnabled);

  00030	e5812008	 str         r2, [r1, #8]
  00034	e884000c	 stmia       r4, {r2, r3}
  00038	eb000000	 bl          INTERRUPTS_ENABLE

; 168  : 
; 169  :     return TRUE;

  0003c	e3a00001	 mov         r0, #1

; 170  : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN8@OALTimerQu@2|
  00048		 |$LN9@OALTimerQu@2|
  00048	00000000	 DCD         |g_pPerfTimer|
  0004c		 |$M45775|

			 ENDP  ; |OALTimerQueryPerformanceCounter|

	EXPORT	|OEMProfileTimerEnable|
	IMPORT	|OALIntrEnableIrqs|
	IMPORT	|__rt_udiv64by64|

  00000			 AREA	 |.pdata|, PDATA
|$T45791| DCD	|$LN8@OEMProfile|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMProfileTimerEnable| PROC

; 176  : {

  00000		 |$LN8@OEMProfile|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M45788|

; 177  :     DWORD tcrr;
; 178  :     UINT64 val;
; 179  :     BOOL enabled;
; 180  :     
; 181  :     
; 182  :     // calculate interrupt intervals   
; 183  :     val = (UINT64) dwUSecInterval * (UINT64)s_Frequency;

  00004	e59f5084	 ldr         r5, [pc, #0x84]
  00008	e3a0393d	 mov         r3, #0x3D, 18

; 184  :     val = val / 1000000;

  0000c	e3832d09	 orr         r2, r3, #9, 26
  00010	e595e000	 ldr         lr, [r5]
  00014	e3a03000	 mov         r3, #0
  00018	e081009e	 umull       r0, r1, lr, r0
  0001c	eb000000	 bl          __rt_udiv64by64
  00020	e59f4064	 ldr         r4, [pc, #0x64]
  00024	e5840000	 str         r0, [r4]

; 185  :     g_oalProfilerIncrement = (UINT32) val;
; 186  : 
; 187  :     // Following code should not be interrupted
; 188  :     enabled = INTERRUPTS_ENABLE(FALSE);

  00028	e3a00000	 mov         r0, #0
  0002c	eb000000	 bl          INTERRUPTS_ENABLE

; 189  :     
; 190  :     // set interrupts at requested intervals
; 191  :     tcrr = INREG32(&g_pPerfTimer->TCRR) + g_oalProfilerIncrement;

  00030	e5951008	 ldr         r1, [r5, #8]
  00034	e5942000	 ldr         r2, [r4]
  00038	e1a04000	 mov         r4, r0
  0003c	e5913028	 ldr         r3, [r1, #0x28]

; 192  :     OUTREG32(&g_pPerfTimer->TMAR, tcrr);

  00040	e0833002	 add         r3, r3, r2
  00044	e5813038	 str         r3, [r1, #0x38]
  00048	e5952008	 ldr         r2, [r5, #8]
  0004c		 |$LL2@OEMProfile|

; 193  :     while ((INREG32(&g_pPerfTimer->TWPS) & GPTIMER_TWPS_TMAR) != 0);

  0004c	e5923034	 ldr         r3, [r2, #0x34]
  00050	e3130010	 tst         r3, #0x10
  00054	1afffffc	 bne         |$LL2@OEMProfile|

; 194  :     
; 195  :     // enable high perf interrupt
; 196  :     g_oalProfilerEnabled = TRUE;

  00058	e3a03001	 mov         r3, #1
  0005c	e5853004	 str         r3, [r5, #4]

; 197  :     SETREG32(&g_pPerfTimer->TCLR, GPTIMER_TCLR_CE);

  00060	e5923024	 ldr         r3, [r2, #0x24]

; 198  : 
; 199  :     // Enable profiling interrupt
; 200  :     OALIntrEnableIrqs(1, &g_oalPerfTimerIrq);

  00064	e59f101c	 ldr         r1, [pc, #0x1C]
  00068	e3a00001	 mov         r0, #1
  0006c	e3833040	 orr         r3, r3, #0x40
  00070	e5823024	 str         r3, [r2, #0x24]
  00074	eb000000	 bl          OALIntrEnableIrqs

; 201  : 
; 202  :     // Enable interrupts
; 203  :     INTERRUPTS_ENABLE(enabled);

  00078	e1a00004	 mov         r0, r4
  0007c	eb000000	 bl          INTERRUPTS_ENABLE

; 204  :     
; 205  : }

  00080	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN9@OEMProfile|
  00088		 |$LN10@OEMProfile|
  00088	00000000	 DCD         |g_oalPerfTimerIrq|
  0008c		 |$LN11@OEMProfile|
  0008c	00000000	 DCD         |g_oalProfilerIncrement|
  00090		 |$LN12@OEMProfile|
  00090	00000000	 DCD         |s_Frequency|
  00094		 |$M45789|

			 ENDP  ; |OEMProfileTimerEnable|

	EXPORT	|OEMProfileTimerDisable|
	IMPORT	|OALIntrDisableIrqs|

  00000			 AREA	 |.pdata|, PDATA
|$T45803| DCD	|$LN6@OEMProfile@2|
	DCD	0x40001701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMProfileTimerDisable| PROC

; 210  : {

  00000		 |$LN6@OEMProfile@2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M45800|

; 211  :     BOOL enabled;
; 212  :     
; 213  :     if (g_oalProfilerEnabled == FALSE) return;

  00004	e59f504c	 ldr         r5, [pc, #0x4C]
  00008	e5953000	 ldr         r3, [r5]
  0000c	e3530000	 cmp         r3, #0
  00010	0a00000d	 beq         |$LN2@OEMProfile@2|

; 214  : 
; 215  :     // Following code should not be interrupted
; 216  :     enabled = INTERRUPTS_ENABLE(FALSE);

  00014	e3a00000	 mov         r0, #0
  00018	eb000000	 bl          INTERRUPTS_ENABLE

; 217  : 
; 218  :     // Disable the profile timer interrupt
; 219  :     OALIntrDisableIrqs(1, &g_oalPerfTimerIrq);    

  0001c	e59f1030	 ldr         r1, [pc, #0x30]
  00020	e1a04000	 mov         r4, r0
  00024	e3a00001	 mov         r0, #1
  00028	eb000000	 bl          OALIntrDisableIrqs

; 220  : 
; 221  :     // Reset flag
; 222  :     g_oalProfilerEnabled = FALSE;
; 223  :     CLRREG32(&g_pPerfTimer->TCLR, GPTIMER_TCLR_CE);

  0002c	e5952004	 ldr         r2, [r5, #4]
  00030	e3a03000	 mov         r3, #0
  00034	e5853000	 str         r3, [r5]
  00038	e5923024	 ldr         r3, [r2, #0x24]

; 224  : 
; 225  :     // Enable interrupts
; 226  :     INTERRUPTS_ENABLE(enabled);

  0003c	e1a00004	 mov         r0, r4
  00040	e3c33040	 bic         r3, r3, #0x40
  00044	e5823024	 str         r3, [r2, #0x24]
  00048	eb000000	 bl          INTERRUPTS_ENABLE
  0004c		 |$LN2@OEMProfile@2|

; 227  : }

  0004c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN7@OEMProfile@2|
  00054		 |$LN8@OEMProfile@2|
  00054	00000000	 DCD         |g_oalPerfTimerIrq|
  00058		 |$LN9@OEMProfile@2|
  00058	00000000	 DCD         |g_oalProfilerEnabled|
  0005c		 |$M45801|

			 ENDP  ; |OEMProfileTimerDisable|

	EXPORT	|OALProfileTimerHit|
	IMPORT	|OALIntrDoneIrqs|
	IMPORT	|ProfilerHit|

  00000			 AREA	 |.pdata|, PDATA
|$T45815| DCD	|$LN5@OALProfile|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALProfileTimerHit| PROC

; 235  : {

  00000		 |$LN5@OALProfile|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M45812|

; 236  :     UINT32  tcrr;
; 237  : 
; 238  :     //  Call ProfileHit
; 239  :     ProfilerHit(ra);

  00004	eb000000	 bl          ProfilerHit

; 240  : 
; 241  :     // get current time
; 242  :     tcrr = INREG32(&g_pPerfTimer->TCRR);

  00008	e59f403c	 ldr         r4, [pc, #0x3C]

; 243  :     
; 244  :     // clear interrupt
; 245  :     OUTREG32(&g_pPerfTimer->TISR, 
; 246  :         GPTIMER_TISR_MAT | GPTIMER_TISR_OVF | GPTIMER_TISR_TCAR
; 247  :         );
; 248  : 
; 249  :     // setup for next interrupt        
; 250  :     OUTREG32(&g_pPerfTimer->TMAR, tcrr + g_oalProfilerIncrement);

  0000c	e59f2034	 ldr         r2, [pc, #0x34]
  00010	e3a05007	 mov         r5, #7
  00014	e5943000	 ldr         r3, [r4]

; 251  : 
; 252  :     // clear interrupt status
; 253  :     OALIntrDoneIrqs(1, &g_oalPerfTimerIrq);

  00018	e59f1024	 ldr         r1, [pc, #0x24]
  0001c	e3a00001	 mov         r0, #1
  00020	e593e028	 ldr         lr, [r3, #0x28]
  00024	e5835018	 str         r5, [r3, #0x18]
  00028	e5923000	 ldr         r3, [r2]
  0002c	e5942000	 ldr         r2, [r4]
  00030	e083300e	 add         r3, r3, lr
  00034	e5823038	 str         r3, [r2, #0x38]
  00038	eb000000	 bl          OALIntrDoneIrqs

; 254  : }

  0003c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$LN6@OALProfile|
  00044		 |$LN7@OALProfile|
  00044	00000000	 DCD         |g_oalPerfTimerIrq|
  00048		 |$LN8@OALProfile|
  00048	00000000	 DCD         |g_oalProfilerIncrement|
  0004c		 |$LN9@OALProfile|
  0004c	00000000	 DCD         |g_pPerfTimer|
  00050		 |$M45813|

			 ENDP  ; |OALProfileTimerHit|

	EXPORT	|OALPerformanceTimerInit|
	EXPORT	|??_C@_1EC@LAOAOKI@?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAa?$AAn?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAe?$AAn?$AAd?$AA?$CB?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@FFGFMCFN@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AAP?$AAr?$AAo?$AAf?$AAi?$AAl?$AAe?$AAr?$AA?5?$AAB?$AAu?$AAi?$AAl?$AAd?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@JOODGIBI@?$AA?9?$AA?9?$AA?9?$AAH?$AAi?$AAg?$AAh?$AA?5?$AAP?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAa?$AAn?$AAc?$AAe?$AA?5?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?5?$AAi?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@HBGAIADK@?$AA?9?$AA?9?$AA?9?$AAH?$AAi?$AAg?$AAh?$AA?5?$AAP?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAa?$AAn?$AAc?$AAe?$AA?5?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?5?$AAi?$AAs@| [ DATA ] ; `string'
	IMPORT	|g_pOemGlobal|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|BSPGetGPTPerfHighFreqClock|
	IMPORT	|GetIrqByDevice|
	IMPORT	|OALPAtoVA|
	IMPORT	|GetAddressByDevice|
	IMPORT	|BSPGetGPTPerfDevice|

  00000			 AREA	 |.pdata|, PDATA
|$T45829| DCD	|$LN12@OALPerform|
	DCD	0x40006201

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@LAOAOKI@?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAa?$AAn?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAe?$AAn?$AAd?$AA?$CB?$AA?$AN?$AA?6@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "c"
	DCB	0x0, "e", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "r"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, ")"
	DCB	0x0, " ", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@FFGFMCFN@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AAP?$AAr?$AAo?$AAf?$AAi?$AAl?$AAe?$AAr?$AA?5?$AAB?$AAu?$AAi?$AAl?$AAd?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$AN?$AA?6?$AA?$AA@| DCB "*"
	DCB	0x0, "*", 0x0, "*", 0x0, "*", 0x0, "P", 0x0, "r", 0x0, "o"
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "B", 0x0, "u", 0x0, "i", 0x0, "l", 0x0, "d", 0x0, "*"
	DCB	0x0, "*", 0x0, "*", 0x0, "*", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@JOODGIBI@?$AA?9?$AA?9?$AA?9?$AAH?$AAi?$AAg?$AAh?$AA?5?$AAP?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAa?$AAn?$AAc?$AAe?$AA?5?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?5?$AAi?$AAs@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "H", 0x0, "i", 0x0, "g", 0x0, "h"
	DCB	0x0, " ", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u"
	DCB	0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, " ", 0x0, "i"
	DCB	0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "h"
	DCB	0x0, "z", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@HBGAIADK@?$AA?9?$AA?9?$AA?9?$AAH?$AAi?$AAg?$AAh?$AA?5?$AAP?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAa?$AAn?$AAc?$AAe?$AA?5?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?5?$AAi?$AAs@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "H", 0x0, "i", 0x0, "g", 0x0, "h"
	DCB	0x0, " ", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u"
	DCB	0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, " ", 0x0, "i"
	DCB	0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "h"
	DCB	0x0, "z", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPerformanceTimerInit| PROC

; 49   : {

  00000		 |$LN12@OALPerform|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M45826|

; 50   :     UINT srcClock;
; 51   :     DWORD tclr = 0;	
; 52   : 
; 53   :     OMAP_DEVICE gptPerfDevice = BSPGetGPTPerfDevice();

  00004	eb000000	 bl          BSPGetGPTPerfDevice
  00008	e1a04000	 mov         r4, r0

; 54   :     if (gptPerfDevice == OMAP_DEVICE_NONE)

  0000c	e3740001	 cmn         r4, #1
  00010	0a00004f	 beq         |$LN6@OALPerform|

; 55   :     {
; 56   :         return;
; 57   :     }
; 58   : 
; 59   :     // map HighResTimer
; 60   :     g_pPerfTimer = OALPAtoUA(GetAddressByDevice(gptPerfDevice));

  00014	eb000000	 bl          GetAddressByDevice
  00018	e3a01000	 mov         r1, #0
  0001c	eb000000	 bl          OALPAtoVA
  00020	e59f515c	 ldr         r5, [pc, #0x15C]

; 61   :     g_oalPerfTimerIrq = GetIrqByDevice(gptPerfDevice,NULL);

  00024	e3a01000	 mov         r1, #0
  00028	e5850008	 str         r0, [r5, #8]
  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          GetIrqByDevice
  00034	e59f2144	 ldr         r2, [pc, #0x144]
  00038	e1a03000	 mov         r3, r0

; 62   : 
; 63   : 	// Select high frequency source clock and frequency
; 64   :     srcClock = BSPGetGPTPerfHighFreqClock(&s_Frequency);

  0003c	e1a00005	 mov         r0, r5
  00040	e5823000	 str         r3, [r2]
  00044	eb000000	 bl          BSPGetGPTPerfHighFreqClock

; 65   :     OALMSG(1, (L"---High Performance Frequency is %d hz------\r\n", s_Frequency));

  00048	e5951000	 ldr         r1, [r5]
  0004c	e59f0128	 ldr         r0, [pc, #0x128]
  00050	eb000000	 bl          NKDbgPrintfW

; 66   : 	//PrcmDeviceSetSourceClocks(gptPerfDevice,1,&srcClock);
; 67   :     // Enable GPTimer for high perf/monte carlo profiling
; 68   :     EnableDeviceClocks(gptPerfDevice, TRUE);

  00054	e3a01001	 mov         r1, #1
  00058	e1a00004	 mov         r0, r4
  0005c	eb000000	 bl          EnableDeviceClocks

; 69   : 
; 70   : 
; 71   :     // configure performance timer
; 72   :     //---------------------------------------------------
; 73   :     // Soft reset GPTIMER and wait until finished
; 74   :     SETREG32(&g_pPerfTimer->TIOCP, SYSCONFIG_SOFTRESET);

  00060	e5952008	 ldr         r2, [r5, #8]
  00064	e5923010	 ldr         r3, [r2, #0x10]
  00068	e3833002	 orr         r3, r3, #2
  0006c	e5823010	 str         r3, [r2, #0x10]
  00070	e5952008	 ldr         r2, [r5, #8]
  00074		 |$LL4@OALPerform|

; 75   :     while ((INREG32(&g_pPerfTimer->TISTAT) & GPTIMER_TISTAT_RESETDONE) == 0);

  00074	e5923014	 ldr         r3, [r2, #0x14]
  00078	e3130001	 tst         r3, #1
  0007c	0afffffc	 beq         |$LL4@OALPerform|
  00080	e3a03c02	 mov         r3, #2, 24

; 76   :  
; 77   :     // Enable smart idle and autoidle
; 78   :     // Set clock activity - FCLK can be  switched off, 
; 79   :     // L4 interface clock is maintained during wkup.
; 80   :     OUTREG32(&g_pPerfTimer->TIOCP, 
; 81   :         0x200 | SYSCONFIG_SMARTIDLE|SYSCONFIG_ENAWAKEUP|
; 82   :             SYSCONFIG_AUTOIDLE); 

  00084	e3833015	 orr         r3, r3, #0x15
  00088	e5823010	 str         r3, [r2, #0x10]

; 83   : 
; 84   :     // Select posted mode
; 85   :     SETREG32(&g_pPerfTimer->TSICR, GPTIMER_TSICR_POSTED);

  0008c	e5952008	 ldr         r2, [r5, #8]

; 86   : 
; 87   :     // clear match register
; 88   :     OUTREG32(&g_pPerfTimer->TMAR, 0xFFFFFFFF);

  00090	e3e04000	 mvn         r4, #0

; 89   :     
; 90   :     // clear interrupts
; 91   :     OUTREG32(&g_pPerfTimer->TISR, 0x00000000);

  00094	e3a0e000	 mov         lr, #0
  00098	e5923040	 ldr         r3, [r2, #0x40]

; 92   :     
; 93   :     // enable match interrupt
; 94   :     OUTREG32(&g_pPerfTimer->TIER, GPTIMER_TIER_MATCH);

  0009c	e3a01001	 mov         r1, #1

; 95   :     
; 96   :     // enable wakeups
; 97   :     OUTREG32(&g_pPerfTimer->TWER, GPTIMER_TWER_MATCH);
; 98   : 
; 99   :     // Set the load register value.
; 100  :     OUTREG32(&g_pPerfTimer->TLDR, 0x00000000);
; 101  :  
; 102  :     // Trigger a counter reload by writing    
; 103  :     OUTREG32(&g_pPerfTimer->TTGR, 0xFFFFFFFF);
; 104  : 
; 105  : 
; 106  : 
; 107  :     OALMSG(1, (L"****Profiler Build****\r\n"));

  000a0	e59f00d0	 ldr         r0, [pc, #0xD0]
  000a4	e3833004	 orr         r3, r3, #4
  000a8	e5823040	 str         r3, [r2, #0x40]
  000ac	e5953008	 ldr         r3, [r5, #8]
  000b0	e5834038	 str         r4, [r3, #0x38]
  000b4	e5953008	 ldr         r3, [r5, #8]
  000b8	e583e018	 str         lr, [r3, #0x18]
  000bc	e5953008	 ldr         r3, [r5, #8]
  000c0	e583101c	 str         r1, [r3, #0x1C]
  000c4	e5953008	 ldr         r3, [r5, #8]
  000c8	e5831020	 str         r1, [r3, #0x20]
  000cc	e5953008	 ldr         r3, [r5, #8]
  000d0	e583e02c	 str         lr, [r3, #0x2C]
  000d4	e5953008	 ldr         r3, [r5, #8]
  000d8	e5834030	 str         r4, [r3, #0x30]
  000dc	eb000000	 bl          NKDbgPrintfW

; 108  :     OALMSG(1, (L"---High Performance Frequency is %d hz---\r\n", s_Frequency));

  000e0	e5951000	 ldr         r1, [r5]
  000e4	e59f0088	 ldr         r0, [pc, #0x88]
  000e8	eb000000	 bl          NKDbgPrintfW

; 109  :     
; 110  :     // build tclr mask
; 111  :     tclr |= GPTIMER_TCLR_AR;
; 112  :     OUTREG32(&g_pPerfTimer->TCLR,  tclr);

  000ec	e5953008	 ldr         r3, [r5, #8]

; 113  :    
; 114  :     // Initialize high resolution timer function pointers
; 115  :     pQueryPerformanceFrequency = OALTimerQueryPerformanceFrequency;

  000f0	e59fe078	 ldr         lr, [pc, #0x78]
  000f4	e3a02002	 mov         r2, #2
  000f8	e5832024	 str         r2, [r3, #0x24]
  000fc	e59e2000	 ldr         r2, [lr]
  00100	e59f3064	 ldr         r3, [pc, #0x64]

; 116  :     pQueryPerformanceCounter = OALTimerQueryPerformanceCounter;    

  00104	e59f105c	 ldr         r1, [pc, #0x5C]

; 117  :     g_pOemGlobal->pfnProfileTimerEnable = OEMProfileTimerEnable;

  00108	e59f0054	 ldr         r0, [pc, #0x54]
  0010c	e5823034	 str         r3, [r2, #0x34]
  00110	e59e3000	 ldr         r3, [lr]

; 118  :     g_pOemGlobal->pfnProfileTimerDisable = OEMProfileTimerDisable;

  00114	e59f2044	 ldr         r2, [pc, #0x44]
  00118	e5831030	 str         r1, [r3, #0x30]
  0011c	e59e3000	 ldr         r3, [lr]
  00120	e58300a0	 str         r0, [r3, #0xA0]
  00124	e59e3000	 ldr         r3, [lr]
  00128	e58320a4	 str         r2, [r3, #0xA4]

; 119  :     
; 120  : 
; 121  :     //  Start the timer.  Also set for auto reload
; 122  :     SETREG32(&g_pPerfTimer->TCLR, GPTIMER_TCLR_ST);

  0012c	e5952008	 ldr         r2, [r5, #8]
  00130	e5923024	 ldr         r3, [r2, #0x24]
  00134	e3833001	 orr         r3, r3, #1
  00138	e5823024	 str         r3, [r2, #0x24]
  0013c	e5952008	 ldr         r2, [r5, #8]
  00140		 |$LL2@OALPerform|

; 123  :     while ((INREG32(&g_pPerfTimer->TWPS) & GPTIMER_TWPS_TCLR) != 0);

  00140	e5923034	 ldr         r3, [r2, #0x34]
  00144	e3130001	 tst         r3, #1
  00148	1afffffc	 bne         |$LL2@OALPerform|

; 124  :     
; 125  :     OALMSG(1, (L"OALPerformanceTimerInit() end!\r\n"));

  0014c	e59f0008	 ldr         r0, [pc, #8]
  00150	eb000000	 bl          NKDbgPrintfW
  00154		 |$LN6@OALPerform|

; 126  : }

  00154	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00158	e12fff1e	 bx          lr
  0015c		 |$LN13@OALPerform|
  0015c		 |$LN14@OALPerform|
  0015c	00000000	 DCD         |??_C@_1EC@LAOAOKI@?$AAO?$AAA?$AAL?$AAP?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAa?$AAn?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAe?$AAn?$AAd?$AA?$CB?$AA?$AN?$AA?6@|
  00160		 |$LN15@OALPerform|
  00160	00000000	 DCD         |OEMProfileTimerDisable|
  00164		 |$LN16@OALPerform|
  00164	00000000	 DCD         |OEMProfileTimerEnable|
  00168		 |$LN17@OALPerform|
  00168	00000000	 DCD         |OALTimerQueryPerformanceCounter|
  0016c		 |$LN18@OALPerform|
  0016c	00000000	 DCD         |OALTimerQueryPerformanceFrequency|
  00170		 |$LN19@OALPerform|
  00170	00000000	 DCD         |g_pOemGlobal|
  00174		 |$LN20@OALPerform|
  00174	00000000	 DCD         |??_C@_1FI@JOODGIBI@?$AA?9?$AA?9?$AA?9?$AAH?$AAi?$AAg?$AAh?$AA?5?$AAP?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAa?$AAn?$AAc?$AAe?$AA?5?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?5?$AAi?$AAs@|
  00178		 |$LN21@OALPerform|
  00178	00000000	 DCD         |??_C@_1DC@FFGFMCFN@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AAP?$AAr?$AAo?$AAf?$AAi?$AAl?$AAe?$AAr?$AA?5?$AAB?$AAu?$AAi?$AAl?$AAd?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$AN?$AA?6?$AA?$AA@|
  0017c		 |$LN22@OALPerform|
  0017c	00000000	 DCD         |??_C@_1FO@HBGAIADK@?$AA?9?$AA?9?$AA?9?$AAH?$AAi?$AAg?$AAh?$AA?5?$AAP?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAa?$AAn?$AAc?$AAe?$AA?5?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?5?$AAi?$AAs@|
  00180		 |$LN23@OALPerform|
  00180	00000000	 DCD         |g_oalPerfTimerIrq|
  00184		 |$LN24@OALPerform|
  00184	00000000	 DCD         |s_Frequency|
  00188		 |$M45827|

			 ENDP  ; |OALPerformanceTimerInit|

	END
