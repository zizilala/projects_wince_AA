; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\OAL\OMAP_WATCHDOG\watchdog.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|?fWatchdogInit@?1??WatchdogRefresh@@9@9| % 0x4		; `WatchdogRefresh'::`2'::fWatchdogInit

  00000			 AREA	 |.data|, DATA
|g_WatchdogDevice| DCD 0xffffffff

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	IMPORT	|EnableDeviceClocks|
	IMPORT	|OALPAtoVA|
	IMPORT	|GetAddressByDevice|
	IMPORT	|BPSGetWatchdogDevice|

  00004			 AREA	 |.bss|, NOINIT
|g_pWatchogTimerRegs| % 0x4
|g_dwWatchdogPeriod| % 0x4
|g_pWatchogTimerRegs| % 0x4
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\oal\omap_watchdog\watchdog.c

  00000			 AREA	 |.pdata|, PDATA
|$T43571| DCD	|$LN37@WatchdogRe|
	DCD	0x40004401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WatchdogRefresh| PROC

; 23   : {

  00000		 |$LN37@WatchdogRe|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43568|

; 24   :     static BOOL fWatchdogInit = FALSE;
; 25   :     if (fWatchdogInit == FALSE)

  00004	e59f5100	 ldr         r5, [pc, #0x100]
  00008	e5953008	 ldr         r3, [r5, #8]
  0000c	e3530000	 cmp         r3, #0
  00010	1a000033	 bne         |$LN28@WatchdogRe|

; 26   :     {
; 27   :         // Initialize watchdog hardware
; 28   :         g_WatchdogDevice = BPSGetWatchdogDevice();

  00014	eb000000	 bl          BPSGetWatchdogDevice
  00018	e59f40e8	 ldr         r4, [pc, #0xE8]
  0001c	e1a03000	 mov         r3, r0

; 29   :         g_pWatchogTimerRegs = OALPAtoUA(GetAddressByDevice(g_WatchdogDevice));

  00020	e5843000	 str         r3, [r4]
  00024	eb000000	 bl          GetAddressByDevice
  00028	e3a01000	 mov         r1, #0
  0002c	eb000000	 bl          OALPAtoVA
  00030	e1a03000	 mov         r3, r0

; 30   :         
; 31   :         // Make sure interface/functional clocks are running
; 32   :         EnableDeviceClocks(g_WatchdogDevice, TRUE);

  00034	e5940000	 ldr         r0, [r4]
  00038	e3a01001	 mov         r1, #1
  0003c	e5853000	 str         r3, [r5]
  00040	eb000000	 bl          EnableDeviceClocks

; 33   : 
; 34   : #if 0
; 35   :         SetDeviceIdleMode(g_WatchdogDevice,OMAP_SMART_IDLE_FLAG);
; 36   : #endif
; 37   : 
; 38   :         // Ensure the timer is stopped
; 39   :         // Note - writes are posted; must ensure they have completed before 
; 40   :         // writing to the same register again.
; 41   :         OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_DISABLE_SEQ1);

  00044	e5951000	 ldr         r1, [r5]
  00048	e3a03caa	 mov         r3, #0xAA, 24
  0004c	e38330aa	 orr         r3, r3, #0xAA
  00050	e5813048	 str         r3, [r1, #0x48]
  00054		 |$LL12@WatchdogRe|

; 42   :         while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  00054	e5913034	 ldr         r3, [r1, #0x34]
  00058	e3530000	 cmp         r3, #0
  0005c	1afffffc	 bne         |$LL12@WatchdogRe|
  00060	e3a03c55	 mov         r3, #0x55, 24

; 43   :         OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_DISABLE_SEQ2);

  00064	e3833055	 orr         r3, r3, #0x55
  00068	e5813048	 str         r3, [r1, #0x48]
  0006c		 |$LL10@WatchdogRe|

; 44   :         while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  0006c	e5913034	 ldr         r3, [r1, #0x34]
  00070	e3530000	 cmp         r3, #0
  00074	1afffffc	 bne         |$LL10@WatchdogRe|

; 45   :         
; 46   : 
; 47   :         // Set prescaler, so that the watcdog counter is incremented around every 1 ms (32768 Hz / 32 => 1024 Hz)
; 48   :         OUTREG32(&g_pWatchogTimerRegs->WCLR, WDOG_WCLR_PRESCALE(5) | WDOG_WCLR_PRES_ENABLE);    
; 49   :         
; 50   :         // Set reload value in both the reload register and base counter register
; 51   :         OUTREG32(&g_pWatchogTimerRegs->WLDR, (DWORD) (0-g_dwWatchdogPeriod));

  00078	e5953004	 ldr         r3, [r5, #4]
  0007c	e3a02034	 mov         r2, #0x34
  00080	e5812024	 str         r2, [r1, #0x24]
  00084	e2633000	 rsb         r3, r3, #0
  00088	e581302c	 str         r3, [r1, #0x2C]

; 52   :         OUTREG32(&g_pWatchogTimerRegs->WCRR, (DWORD) (0-g_dwWatchdogPeriod));

  0008c	e5813028	 str         r3, [r1, #0x28]
  00090		 |$LL8@WatchdogRe|

; 53   :         while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  00090	e5913034	 ldr         r3, [r1, #0x34]
  00094	e3530000	 cmp         r3, #0
  00098	1afffffc	 bne         |$LL8@WatchdogRe|
  0009c		 |$LL6@WatchdogRe|

; 54   :         
; 55   :         // Refresh the watchdog timer before starting it
; 56   :         while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  0009c	e5913034	 ldr         r3, [r1, #0x34]
  000a0	e3530000	 cmp         r3, #0
  000a4	1afffffc	 bne         |$LL6@WatchdogRe|

; 57   :         OUTREG32(&g_pWatchogTimerRegs->WTGR, INREG32(&g_pWatchogTimerRegs->WTGR) + 1);

  000a8	e5913030	 ldr         r3, [r1, #0x30]
  000ac	e3a02cbb	 mov         r2, #0xBB, 24

; 58   : 
; 59   :         // Start the watchdog timer
; 60   :         OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_ENABLE_SEQ1);

  000b0	e38220bb	 orr         r2, r2, #0xBB
  000b4	e2833001	 add         r3, r3, #1
  000b8	e5813030	 str         r3, [r1, #0x30]
  000bc	e5812048	 str         r2, [r1, #0x48]
  000c0		 |$LL4@WatchdogRe|

; 61   :         while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  000c0	e5913034	 ldr         r3, [r1, #0x34]
  000c4	e3530000	 cmp         r3, #0
  000c8	1afffffc	 bne         |$LL4@WatchdogRe|
  000cc	e3a03b11	 mov         r3, #0x11, 22

; 62   :         OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_ENABLE_SEQ2);

  000d0	e3833044	 orr         r3, r3, #0x44

; 63   :         
; 64   :         fWatchdogInit = TRUE;

  000d4	e3a02001	 mov         r2, #1
  000d8	e5813048	 str         r3, [r1, #0x48]
  000dc	e5852008	 str         r2, [r5, #8]
  000e0	ea000000	 b           |$LL2@WatchdogRe|
  000e4		 |$LN28@WatchdogRe|
  000e4	e5951000	 ldr         r1, [r5]
  000e8		 |$LL2@WatchdogRe|

; 65   :     }
; 66   :     
; 67   :     // Refresh the watchdog timer
; 68   :     while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  000e8	e5913034	 ldr         r3, [r1, #0x34]
  000ec	e3530000	 cmp         r3, #0
  000f0	1afffffc	 bne         |$LL2@WatchdogRe|

; 69   :     OUTREG32(&g_pWatchogTimerRegs->WTGR, INREG32(&g_pWatchogTimerRegs->WTGR) + 1);    

  000f4	e5913030	 ldr         r3, [r1, #0x30]
  000f8	e2833001	 add         r3, r3, #1
  000fc	e5813030	 str         r3, [r1, #0x30]

; 70   : }

  00100	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00104	e12fff1e	 bx          lr
  00108		 |$LN38@WatchdogRe|
  00108		 |$LN39@WatchdogRe|
  00108	00000000	 DCD         |g_WatchdogDevice|
  0010c		 |$LN40@WatchdogRe|
  0010c	00000000	 DCD         |g_pWatchogTimerRegs|
  00110		 |$M43569|

			 ENDP  ; |WatchdogRefresh|

	EXPORT	|OALWatchdogInit|
	IMPORT	|g_pOemGlobal|

  00000			 AREA	 |.pdata|, PDATA
|$T43583| DCD	|$LN5@OALWatchdo|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALWatchdogInit| PROC

; 73   : {

  00000		 |$LN5@OALWatchdo|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43580|

; 74   :     g_dwWatchdogPeriod = dwPeriod;
; 75   :     g_pOemGlobal->pfnRefreshWatchDog = WatchdogRefresh;

  00004	e59f5034	 ldr         r5, [pc, #0x34]
  00008	e59fe02c	 ldr         lr, [pc, #0x2C]

; 76   :     g_pOemGlobal->dwWatchDogPeriod = g_dwWatchdogPeriod / 2; //set the refresh period to half the watchdog period

  0000c	e1a040a0	 mov         r4, r0, lsr #1
  00010	e5953000	 ldr         r3, [r5]
  00014	e59f201c	 ldr         r2, [pc, #0x1C]
  00018	e583e094	 str         lr, [r3, #0x94]
  0001c	e5953000	 ldr         r3, [r5]
  00020	e5820000	 str         r0, [r2]
  00024	e5834098	 str         r4, [r3, #0x98]

; 77   :     g_pOemGlobal->dwWatchDogThreadPriority = dwThreadPriority;

  00028	e5953000	 ldr         r3, [r5]
  0002c	e583109c	 str         r1, [r3, #0x9C]

; 78   : }

  00030	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$LN6@OALWatchdo|
  00038		 |$LN7@OALWatchdo|
  00038	00000000	 DCD         |g_dwWatchdogPeriod|
  0003c		 |$LN8@OALWatchdo|
  0003c	00000000	 DCD         |WatchdogRefresh|
  00040		 |$LN9@OALWatchdo|
  00040	00000000	 DCD         |g_pOemGlobal|
  00044		 |$M43581|

			 ENDP  ; |OALWatchdogInit|

	EXPORT	|OALWatchdogEnable|

  00000			 AREA	 |.pdata|, PDATA
|$T43599| DCD	|$LN20@OALWatchdo@2|
	DCD	0x40003101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALWatchdogEnable| PROC

; 86   : {

  00000		 |$LN20@OALWatchdo@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43596|
  00004	e1a02000	 mov         r2, r0

; 87   :     if (g_WatchdogDevice != OMAP_DEVICE_NONE)

  00008	e59f30b0	 ldr         r3, [pc, #0xB0]
  0000c	e5930000	 ldr         r0, [r3]
  00010	e3700001	 cmn         r0, #1
  00014	0a000026	 beq         |$LN5@OALWatchdo@2|

; 88   :     {
; 89   :         if (bEnable == TRUE)

  00018	e3520001	 cmp         r2, #1
  0001c	1a000014	 bne         |$LN10@OALWatchdo@2|

; 90   :         {
; 91   :             // Enable clock
; 92   :             EnableDeviceClocks(g_WatchdogDevice, TRUE);

  00020	e3a01001	 mov         r1, #1
  00024	eb000000	 bl          EnableDeviceClocks
  00028	e59f308c	 ldr         r3, [pc, #0x8C]
  0002c	e5932000	 ldr         r2, [r3]
  00030		 |$LL9@OALWatchdo@2|

; 93   : 
; 94   :             // Refresh the watchdog timer
; 95   :             while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  00030	e5923034	 ldr         r3, [r2, #0x34]
  00034	e3530000	 cmp         r3, #0
  00038	1afffffc	 bne         |$LL9@OALWatchdo@2|

; 96   :             OUTREG32(&g_pWatchogTimerRegs->WTGR, INREG32(&g_pWatchogTimerRegs->WTGR) + 1);

  0003c	e5923030	 ldr         r3, [r2, #0x30]
  00040	e3a01cbb	 mov         r1, #0xBB, 24

; 97   : 
; 98   :             // Start Watchdog
; 99   :             OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_ENABLE_SEQ1);

  00044	e2833001	 add         r3, r3, #1
  00048	e5823030	 str         r3, [r2, #0x30]
  0004c	e38130bb	 orr         r3, r1, #0xBB
  00050	e5823048	 str         r3, [r2, #0x48]
  00054		 |$LL7@OALWatchdo@2|

; 100  :             while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  00054	e5923034	 ldr         r3, [r2, #0x34]
  00058	e3530000	 cmp         r3, #0
  0005c	1afffffc	 bne         |$LL7@OALWatchdo@2|
  00060	e3a03b11	 mov         r3, #0x11, 22

; 101  :             OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_ENABLE_SEQ2);

  00064	e3833044	 orr         r3, r3, #0x44
  00068	e5823048	 str         r3, [r2, #0x48]

; 113  :         }
; 114  :     }
; 115  : }

  0006c	e49de004	 ldr         lr, [sp], #4
  00070	e12fff1e	 bx          lr
  00074		 |$LN10@OALWatchdo@2|

; 102  :         }
; 103  :         else
; 104  :         {
; 105  :             // Ensure the timer is stopped
; 106  :             OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_DISABLE_SEQ1);

  00074	e59f3040	 ldr         r3, [pc, #0x40]
  00078	e3a02caa	 mov         r2, #0xAA, 24
  0007c	e38220aa	 orr         r2, r2, #0xAA
  00080	e5931000	 ldr         r1, [r3]
  00084	e5812048	 str         r2, [r1, #0x48]
  00088		 |$LL4@OALWatchdo@2|

; 107  :             while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  00088	e5913034	 ldr         r3, [r1, #0x34]
  0008c	e3530000	 cmp         r3, #0
  00090	1afffffc	 bne         |$LL4@OALWatchdo@2|
  00094	e3a03c55	 mov         r3, #0x55, 24

; 108  :             OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_DISABLE_SEQ2);

  00098	e3833055	 orr         r3, r3, #0x55
  0009c	e5813048	 str         r3, [r1, #0x48]
  000a0		 |$LL2@OALWatchdo@2|

; 109  :             while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  000a0	e5913034	 ldr         r3, [r1, #0x34]
  000a4	e3530000	 cmp         r3, #0
  000a8	1afffffc	 bne         |$LL2@OALWatchdo@2|

; 110  : 
; 111  :             // Disable clock
; 112  :             EnableDeviceClocks(g_WatchdogDevice, FALSE);

  000ac	e3a01000	 mov         r1, #0
  000b0	eb000000	 bl          EnableDeviceClocks
  000b4		 |$LN5@OALWatchdo@2|

; 113  :         }
; 114  :     }
; 115  : }

  000b4	e49de004	 ldr         lr, [sp], #4
  000b8	e12fff1e	 bx          lr
  000bc		 |$LN21@OALWatchdo@2|
  000bc		 |$LN22@OALWatchdo@2|
  000bc	00000000	 DCD         |g_pWatchogTimerRegs|
  000c0		 |$LN23@OALWatchdo@2|
  000c0	00000000	 DCD         |g_WatchdogDevice|
  000c4		 |$M43597|

			 ENDP  ; |OALWatchdogEnable|

	END
