ARM macroassembler      Page:1 
    1 00000000          ; 
    2 00000000          ;================================================================================ 
    3 00000000          ;             Texas Instruments OMAP(TM) Platform Software 
    4 00000000          ; (c) Copyright Texas Instruments, Incorporated. All Rights Reserved. 
    5 00000000          ; 
    6 00000000          ; Use of this software is controlled by the terms and conditions found 
    7 00000000          ; in the license agreement under which this software has been supplied. 
    8 00000000          ; 
    9 00000000          ;================================================================================ 
   10 00000000          ; 
   11 00000000          ;------------------------------------------------------------------------------- 
   12 00000000          ; 
   13 00000000          ;  File:  dcache.s 
   14 00000000          ; 
   15 00000000          ; 
   16 00000000                  INCLUDE kxarm.h 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000          ;++ 
   14 00000000          ; 
   15 00000000          ; 
   16 00000000          ; Module Name: 
   17 00000000          ; 
   18 00000000          ;    kxarm.h 
   19 00000000          ; 
   20 00000000          ; Abstract: 
   21 00000000          ; 
   22 00000000          ;    This is an implementation of the WINCE/ARM Calling Sequence 
   23 00000000          ;    Specification. 
   24 00000000          ; 
   25 00000000          ; Environment: 
   26 00000000          ;    String Library 
   27 00000000          ; 
   28 00000000          ; Revision History: 
   29 00000000          ;-- 
   30 00000000            
   31 00000000                          GBLS    VBar 
   32 00000000          VBar    SETS    "|" 
   33 00000000                          GBLL    HaveExceptHandler 
   34 00000000                          GBLS    AreaName 
   35 00000000                          GBLS    FuncName 
   36 00000000                          GBLS    PrologName 
   37 00000000                          GBLS    FuncEndName 
   38 00000000                          GBLS    ExceptHandler 
   39 00000000                          GBLS    ExceptData 
   40 00000000          AreaName SETS   "|.text|" 
   41 00000000          HaveExceptHandler SETL {FALSE} 
   42 00000000            
   43 00000000                  MACRO 
   44 00000000                  TEXTAREA 
   45 00000000                  AREA |.text|,ALIGN=2,CODE,READONLY 
   46 00000000          AreaName SETS "|.text|" 
   47 00000000                  MEND 
   48 00000000            
   49 00000000              MACRO 
   50 00000000              THUMBAREA 
   51 00000000              AREA |.text|,ALIGN=2,CODE,READONLY,THUMB 
   52 00000000          AreaName SETS "|.text|" 
   53 00000000              MEND 
   54 00000000            
   55 00000000                  MACRO 
   56 00000000                  STARTUPTEXT 
   57 00000000                  AREA |.astart|,ALIGN=2,CODE 
   58 00000000          AreaName SETS "|.astart|" 
   59 00000000                  MEND 
   60 00000000            
   61 00000000                  MACRO 
   62 00000000                  START_REGION    $NameBegin 
   63 00000000                  LCLS    TempName 
   64 00000000          TempName SETS    VBar:CC:"$NameBegin":CC:VBar 
   65 00000000                  EXPORT  $TempName[DATA] 
   66 00000000          $TempName 
   67 00000000                  MEND 
   68 00000000            
   69 00000000                  MACRO 
   70 00000000                  END_REGION              $NameEnd 
   71 00000000                  LCLS    TempName 
   72 00000000          TempName SETS    VBar:CC:"$NameEnd":CC:VBar 
   73 00000000                  EXPORT  $TempName[DATA] 
   74 00000000          $TempName 
   75 00000000                  MEND 
   76 00000000            
   77 00000000          ; 
   78 00000000          ;   This macro should be used if the assembly function is in ARM 
   79 00000000          ; 
   80 00000000            
   81 00000000                  MACRO 
   82 00000000                  NESTED_ARMENTRY $Name 
   83 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
   84 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
   85 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
   86 00000000                  LCLS    ExceptBit 
   87 00000000                  IF HaveExceptHandler 
   88 00000000          ExceptBit   SETS        "0x80000000" 
   89 00000000                  ELSE 
   90 00000000          ExceptBit   SETS        "0" 
   91 00000000                  ENDIF 
   92 00000000            
   93 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
   94 00000000                  DCD         $FuncName 
   95 00000000              DCD     (($PrologName-$FuncName)/4) :OR: ((($FuncEndName-$FuncName)/4):SHL:8) :OR: 0x40000000 :OR: $ExceptBit 
   96 00000000                  AREA $AreaName,CODE,READONLY 
   97 00000000                  ALIGN   2 
   98 00000000                  EXPORT  $FuncName [FUNC] 
   99 00000000                  IF HaveExceptHandler 
  100 00000000              DCD $ExceptHandler 
  101 00000000              DCD $ExceptData 
  102 00000000          HaveExceptHandler SETL {FALSE} 
  103 00000000                  ENDIF 
  104 00000000          $FuncName 
  105 00000000                  ROUT 
  106 00000000                  MEND 
  107 00000000            
  108 00000000          ; 
  109 00000000          ;   This macro should be used if the assembly function is in THUMB 
  110 00000000          ; 
  111 00000000                  MACRO 
  112 00000000                  NESTED_THUMBENTRY       $Name 
  113 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
  114 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
  115 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  116 00000000                  LCLS    ExceptBit 
  117 00000000                  IF HaveExceptHandler 
  118 00000000          ExceptBit   SETS        "0x80000000" 
  119 00000000                  ELSE 
  120 00000000          ExceptBit   SETS        "0" 
  121 00000000                  ENDIF 
  122 00000000            
  123 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
  124 00000000                  DCD         $FuncName 
  125 00000000              DCD     (($PrologName-$FuncName)/2) :OR: ((($FuncEndName-$FuncName)/2):SHL:8) :OR: $ExceptBit 
  126 00000000                  AREA $AreaName,CODE,READONLY 
  127 00000000                  ALIGN   2 
  128 00000000                  EXPORT  $FuncName [FUNC] 
  129 00000000                  IF HaveExceptHandler 
  130 00000000              DCD $ExceptHandler 
  131 00000000              DCD $ExceptData 
  132 00000000          HaveExceptHandler SETL {FALSE} 
  133 00000000                  ENDIF 
  134 00000000          $FuncName 
  135 00000000                  ROUT 
  136 00000000                  MEND 
  137 00000000            
  138 00000000          ; 
  139 00000000          ;   This macro should be used if the assembly function is in ARM 
  140 00000000          ; 
  141 00000000                  MACRO 
  142 00000000                  NESTED_ENTRY    $Name 
  143 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
  144 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
  145 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  146 00000000                  LCLS    ExceptBit 
  147 00000000                  IF HaveExceptHandler 
  148 00000000          ExceptBit   SETS        "0x80000000" 
  149 00000000                  ELSE 
  150 00000000          ExceptBit   SETS        "0" 
  151 00000000                  ENDIF 
  152 00000000            
  153 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
  154 00000000                  DCD         $FuncName 
  155 00000000              DCD     (($PrologName-$FuncName)/4) :OR: ((($FuncEndName-$FuncName)/4):SHL:8) :OR: 0x40000000 :OR: $ExceptBit 
  156 00000000                  AREA $AreaName,CODE,READONLY 
  157 00000000                  ALIGN   2 
  158 00000000                  EXPORT  $FuncName [FUNC] 
  159 00000000                  IF HaveExceptHandler 
  160 00000000              DCD $ExceptHandler 
  161 00000000              DCD $ExceptData 
  162 00000000          HaveExceptHandler SETL {FALSE} 
  163 00000000                  ENDIF 
  164 00000000          $FuncName 
  165 00000000                  ROUT 
  166 00000000                  MEND 
  167 00000000            
  168 00000000                  MACRO 
  169 00000000                  PROLOG_END 
  170 00000000          $PrologName 
  171 00000000                  MEND 
  172 00000000            
  173 00000000                  MACRO 
  174 00000000                  LEAF_ENTRY      $Name 
  175 00000000          FuncName SETS    VBar:CC:"$Name":CC:VBar 
  176 00000000          PrologName SETS "Invalid Prolog" 
  177 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  178 00000000                  ALIGN   2 
  179 00000000                  EXPORT  $FuncName [FUNC] 
  180 00000000          $FuncName 
  181 00000000                  ROUT 
  182 00000000                  MEND 
  183 00000000            
  184 00000000                  MACRO 
  185 00000000                  ALTERNATE_ENTRY $Name 
  186 00000000                  LCLS    TempName 
  187 00000000          TempName SETS    VBar:CC:"$Name":CC:VBar 
  188 00000000                  EXPORT  $TempName [FUNC] 
  189 00000000          $TempName 
  190 00000000                  MEND 
  191 00000000            
  192 00000000                  MACRO 
  193 00000000                  ENTRY_END       $Name 
  194 00000000          $FuncEndName 
  195 00000000                  MEND 
  196 00000000            
  197 00000000                  MACRO 
  198 00000000                  EXCEPTION_HANDLER       $Handler 
  199 00000000          ExceptHandler SETS    VBar:CC:"$Handler":CC:VBar 
  200 00000000          ExceptData SETS "0" 
  201 00000000          HaveExceptHandler SETL {TRUE} 
  202 00000000                  MEND 
  203 00000000            
  204 00000000                  MACRO 
  205 00000000                  EXCEPTION_HANDLER_DATA  $Handler, $HandlerData 
  206 00000000          ExceptHandler SETS    VBar:CC:"$Handler":CC:VBar 
  207 00000000          ExceptData SETS    VBar:CC:"$HandlerData":CC:VBar 
  208 00000000          HaveExceptHandler SETL {TRUE} 
  209 00000000                  MEND 
  210 00000000            
  211 00000000                  MACRO 
  212 00000000                  EXCEPTION_HANDLER_MILLICODE     $Handler, $HandlerData 
  213 00000000          ExceptHandler SETS    "$Handler" 
  214 00000000          ExceptData SETS    "$HandlerData" 
  215 00000000          HaveExceptHandler SETL {TRUE} 
  216 00000000                  MEND 
  217 00000000            
  218 00000000            
  219 00000000                  END 
   17 00000000                  INCLUDE armmacros.s 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000            
   14 00000000          ;/*********************************************************************** 
   15 00000000          ;  Copyright (c) ARM Limited 1998.  All rights reserved. 
   16 00000000          ; 
   17 00000000          ; NOTE: The CALL and CALLEQ macros shouldn't be used in OS startup code 
   18 00000000          ;       before the MMU is enabled since in the Thumbing case it relies 
   19 00000000          ;       on an absolute address which will be virtual in the case of the 
   20 00000000          ;       OS code and if the MMU isn't enabled, all branches should be 
   21 00000000          ;       relative (or a computed physical address). 
   22 00000000          ; 
   23 00000000          ;***********************************************************************/ 
   24 00000000            
   25 00000000            IF Interworking :LOR: Thumbing 
   26 00000000            
   27 00000000              MACRO 
   28 00000000              CALL $Fn 
   29 00000000              ldr     r12, =$Fn 
   30 00000000              mov     lr, pc 
   31 00000000              bx      r12 
   32 00000000              MEND 
   33 00000000            
   34 00000000              MACRO 
   35 00000000              CALLEQ $Fn 
   36 00000000              ldreq   r12, =$Fn 
   37 00000000              moveq   lr, pc 
   38 00000000              bxeq    r12 
   39 00000000              MEND 
   40 00000000            
   41 00000000              MACRO 
   42 00000000              RETURN 
   43 00000000              bx      lr 
   44 00000000              MEND 
   45 00000000            
   46 00000000              MACRO 
   47 00000000              RETURN_EQ 
   48 00000000              bxeq    lr 
   49 00000000              MEND 
   50 00000000            
   51 00000000              MACRO 
   52 00000000              RETURN_NE 
   53 00000000              bxne    lr 
   54 00000000              MEND 
   55 00000000            
   56 00000000            ELSE 
   83 00000000            ENDIF 
   84 00000000            
   85 00000000              END  
   18 00000000                  INCLUDE oal_cache.inc 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000          ;------------------------------------------------------------------------------ 
   14 00000000          ; 
   15 00000000          ;  File: oal_cache.inc 
   16 00000000          ; 
   17 00000000          ;  ARM assembly version of partial contents of oal_cache.h 
   18 00000000          ; 
   19 00000000            
   20 00000000          ;------------------------------------------------------------------------------- 
   21 00000000          ; 
   22 00000000          ;  Defines: L1xxx/L2xxx 
   23 00000000          ; 
   24 00000000          ;  Following defines are used in ARM assember to access OAL_CACHE_INFO 
   25 00000000          ;  structure members. It must be synchronized with OAL_CACHE_INFO definition. 
   26 00000000          ; 
   27 00000000            
   28 00000000          L1Flags         EQU     0 
   29 00000000          L1ISetsPerWay   EQU     4 
   30 00000000          L1INumWays      EQU     8 
   31 00000000          L1ILineSize     EQU     12 
   32 00000000          L1ISize         EQU     16 
   33 00000000          L1DSetsPerWay   EQU     20 
   34 00000000          L1DNumWays      EQU     24 
   35 00000000          L1DLineSize     EQU     28 
   36 00000000          L1DSize         EQU     32 
   37 00000000            
   38 00000000          L2Flags         EQU     36 
   39 00000000          L2ISetsPerWay   EQU     40 
   40 00000000          L2INumWays      EQU     44 
   41 00000000          L2ILineSize     EQU     48 
   42 00000000          L2ISize         EQU     52 
   43 00000000          L2DSetsPerWay   EQU     56 
   44 00000000          L2DNumWays      EQU     60 
   45 00000000          L2DLineSize     EQU     64 
   46 00000000          L2DSize         EQU     68 
   47 00000000            
   48 00000000          ;------------------------------------------------------------------------------- 
   49 00000000            
   50 00000000                          END 
   19 00000000            
   20 00000000                  IMPORT g_oalCacheInfo 
   21 00000000            
   22 00000000                  TEXTAREA 
   45                           AREA |.text|,ALIGN=2,CODE,READONLY 
   46 00000000          AreaName SETS "|.text|" 
   23 00000000            
   24 00000000            
   25 00000000          ;------------------------------------------------------------------------------- 
   26 00000000          ; 
   27 00000000          ;  Function:  OALCleanDCache 
   28 00000000          ; 
   29 00000000          ;  Entire cache operatations must be performed using set/way method operation at 
   30 00000000          ;  each level of the cache. 
   31 00000000          ; 
   32 00000000                  LEAF_ENTRY OALCleanDCache 
  175 00000000          FuncName SETS    VBar:CC:"OALCleanDCache":CC:VBar 
  176 00000000          PrologName SETS "Invalid Prolog" 
  177 00000000          FuncEndName SETS    VBar:CC:"OALCleanDCache":CC:"_end":CC:VBar 
  178 00000000                  ALIGN   2 
  179 00000000                  EXPORT  |OALCleanDCache| [FUNC] 
  180 00000000          |OALCleanDCache| 
  181 00000000                  ROUT 
   33 00000000            
   34 00000000 e92d4ef0         stmfd   sp!, {r4-r7, r9-r11, lr}        ; store off registers to stack 
   35 00000004            
   36 00000004 ee300f30         mrc     p15, 1, r0, c0, c0, 1           ; read clidr 
   37 00000008 e2103407         ands    r3, r0, #0x7000000   
   38 0000000c e1a03ba3         mov     r3, r3, lsr #23                 ; cache level value 
   39 00000010 0a00001b         beq     donea                
   40 00000014            
   41 00000014 e3a0a000         mov     r10, #0                         ; start clean at cache level 0 
   42 00000018 e08a20aa loop1a  add     r2, r10, r10, lsr #1            ; work out 3x current cache level 
   43 0000001c e1a01230         mov     r1, r0, lsr r2                  ; extract cache type bits from clidr 
   44 00000020 e2011007         and     r1, r1, #7                      ; mask of the bits for current cache only 
   45 00000024 e3510002         cmp     r1, #2                          ; see what cache we have at this level 
   46 00000028 ba000012         blt     skipa                           ; skip if no cache, or just i-cache 
   47 0000002c            
   48 0000002c ee40af10         mcr     p15, 2, r10, c0, c0, 0          ; select current cache level in cssr 
   49 00000030 e3a01000         mov     r1, #0 
   50 00000034 ee071f95         mcr     p15, 0, r1, c7, c5, 4           ; prefetch flush to sync the change to the cachesize id reg 
   51 00000038 ee301f10         mrc     p15, 1, r1, c0, c0, 0           ; read the new csidr 
   52 0000003c e2012007         and     r2, r1, #7                      ; extract the length of the cache lines 
   53 00000040 e2822004         add     r2, r2, #4                      ; add 4 (line length offset) 
   54 00000044 e59f4150         ldr     r4, =0x3ff 
   55 00000048 e01441a1         ands    r4, r4, r1, lsr #3              ; r4 is maximum number on the way size 
warning:Instruction clz not supported for -cpu "-arch 4t"
   56 0000004c e16f5f14         clz     r5, r4                          ; r5 find bit position of way size increment 
   57 00000050 e59f7148         ldr     r7, =0x7fff 
   58 00000054 e01776a1         ands    r7, r7, r1, lsr #13             ; r7 extract max number of the index size 
   59 00000058            
   60 00000058 e1a09004 loop2a  mov     r9, r4                          ; r9 is working copy of max way size 
   61 0000005c e18ab519 loop3a  orr     r11, r10, r9, lsl r5            ; factor way and cache number into r11 
   62 00000060 e18bb217         orr     r11, r11, r7, lsl r2            ; factor index number into r11 
   63 00000064            
   64 00000064 ee07bf5a         mcr     p15, 0, r11, c7, c10, 2         ; clean by set/way 
   65 00000068            
   66 00000068 e2599001         subs    r9, r9, #1                      ; decrement the way 
   67 0000006c aafffffa         bge     loop3a 
   68 00000070            
   69 00000070 e2577001         subs    r7, r7, #1                      ; decrement the index 
   70 00000074 aafffff7         bge     loop2a 
   71 00000078            
   72 00000078 e28aa002 skipa   add     r10, r10, #2                    ; increment cache number 
   73 0000007c e153000a         cmp     r3, r10 
   74 00000080 caffffe4         bgt     loop1a 
   75 00000084            
   76 00000084 e3a0a000 donea   mov     r10, #0                         ; swith back to cache level 0 
   77 00000088 ee40af10         mcr     p15, 2, r10, c0, c0, 0          ; select current cache level in cssr 
   78 0000008c            
   79 0000008c e3a02000         mov     r2, #0 
   80 00000090 ee072f9a         mcr     p15, 0, r2, c7, c10, 4          ; data sync barrier operation 
   81 00000094            
   82 00000094 e8bd4ef0         ldmfd   sp!, {r4-r7, r9-r11, lr}        ; restore registers 
   83 00000098            
   84 00000098                  RETURN 
   43 00000098 e12fff1e     bx      lr 
   85 0000009c            
   86 0000009c            
   87 0000009c            
   88 0000009c            
   89 0000009c          ;------------------------------------------------------------------------------- 
   90 0000009c          ; 
   91 0000009c          ;  Function:  OALCleanDCacheLines 
   92 0000009c          ; 
   93 0000009c                  LEAF_ENTRY OALCleanDCacheLines 
  175 0000009c          FuncName SETS    VBar:CC:"OALCleanDCacheLines":CC:VBar 
  176 0000009c          PrologName SETS "Invalid Prolog" 
  177 0000009c          FuncEndName SETS    VBar:CC:"OALCleanDCacheLines":CC:"_end":CC:VBar 
  178 0000009c                  ALIGN   2 
  179 0000009c                  EXPORT  |OALCleanDCacheLines| [FUNC] 
  180 0000009c          |OALCleanDCacheLines| 
  181 0000009c                  ROUT 
   94 0000009c            
   95 0000009c e59f2100         ldr     r2, =g_oalCacheInfo 
   96 000000a0 e592301c         ldr     r3, [r2, #L1DLineSize] 
   97 000000a4            
   98 000000a4 ee070f3a 10      mcr     p15, 0, r0, c7, c10, 1          ; clean entry 
   99 000000a8 e0800003         add     r0, r0, r3                      ; move to next entry 
  100 000000ac e0511003         subs    r1, r1, r3 
  101 000000b0 cafffffb         bgt     %b10                            ; loop while > 0 bytes left 
  102 000000b4            
  103 000000b4 e3a02000         mov     r2, #0 
  104 000000b8 ee072f9a         mcr     p15, 0, r2, c7, c10, 4          ; data sync barrier operation 
  105 000000bc            
  106 000000bc                  RETURN 
   43 000000bc e12fff1e     bx      lr 
  107 000000c0            
  108 000000c0            
  109 000000c0          ;------------------------------------------------------------------------------- 
  110 000000c0          ; 
  111 000000c0          ;  Function:  OALFlushDCache 
  112 000000c0          ; 
  113 000000c0          ;  Entire cache operatations must be performed using set/way method operation at 
  114 000000c0          ;  each level of the cache.  
  115 000000c0          ; 
  116 000000c0                  LEAF_ENTRY OALFlushDCache 
  175 000000c0          FuncName SETS    VBar:CC:"OALFlushDCache":CC:VBar 
  176 000000c0          PrologName SETS "Invalid Prolog" 
  177 000000c0          FuncEndName SETS    VBar:CC:"OALFlushDCache":CC:"_end":CC:VBar 
  178 000000c0                  ALIGN   2 
  179 000000c0                  EXPORT  |OALFlushDCache| [FUNC] 
  180 000000c0          |OALFlushDCache| 
  181 000000c0                  ROUT 
  117 000000c0            
  118 000000c0 e92d4ef0         stmfd   sp!, {r4-r7, r9-r11, lr}        ; store off registers to stack 
  119 000000c4            
  120 000000c4 ee300f30         mrc     p15, 1, r0, c0, c0, 1           ; read clidr 
  121 000000c8 e2103407         ands    r3, r0, #0x7000000   
  122 000000cc e1a03ba3         mov     r3, r3, lsr #23                 ; cache level value 
  123 000000d0 0a00001b         beq     doneb                
  124 000000d4            
  125 000000d4 e3a0a000         mov     r10, #0                         ; start clean at cache level 0 
  126 000000d8 e08a20aa loop1b  add     r2, r10, r10, lsr #1            ; work out 3x current cache level 
  127 000000dc e1a01230         mov     r1, r0, lsr r2                  ; extract cache type bits from clidr 
  128 000000e0 e2011007         and     r1, r1, #7                      ; mask of the bits for current cache only 
  129 000000e4 e3510002         cmp     r1, #2                          ; see what cache we have at this level 
  130 000000e8 ba000012         blt     skipb                           ; skip if no cache, or just i-cache 
  131 000000ec            
  132 000000ec ee40af10         mcr     p15, 2, r10, c0, c0, 0          ; select current cache level in cssr 
  133 000000f0 e3a01000         mov     r1, #0 
  134 000000f4 ee071f95         mcr     p15, 0, r1, c7, c5, 4           ; prefetch flush to sync the change to the cachesize id reg 
  135 000000f8 ee301f10         mrc     p15, 1, r1, c0, c0, 0           ; read the new csidr 
  136 000000fc e2012007         and     r2, r1, #7                      ; extract the length of the cache lines 
  137 00000100 e2822004         add     r2, r2, #4                      ; add 4 (line length offset) 
  138 00000104 e59f4090         ldr     r4, =0x3ff 
  139 00000108 e01441a1         ands    r4, r4, r1, lsr #3              ; r4 is maximum number on the way size 
warning:Instruction clz not supported for -cpu "-arch 4t"
  140 0000010c e16f5f14         clz     r5, r4                          ; r5 find bit position of way size increment 
  141 00000110 e59f7088         ldr     r7, =0x7fff 
  142 00000114 e01776a1         ands    r7, r7, r1, lsr #13             ; r7 extract max number of the index size 
  143 00000118            
  144 00000118 e1a09004 loop2b  mov     r9, r4                          ; r9 is working copy of max way size 
  145 0000011c e18ab519 loop3b  orr     r11, r10, r9, lsl r5            ; factor way and cache number into r11 
  146 00000120 e18bb217         orr     r11, r11, r7, lsl r2            ; factor index number into r11 
  147 00000124            
  148 00000124 ee07bf5e         mcr     p15, 0, r11, c7, c14, 2         ; clean and invalidate by set/way 
  149 00000128            
  150 00000128 e2599001         subs    r9, r9, #1                      ; decrement the way 
  151 0000012c aafffffa         bge     loop3b 
  152 00000130            
  153 00000130 e2577001         subs    r7, r7, #1                      ; decrement the index 
  154 00000134 aafffff7         bge     loop2b 
  155 00000138            
  156 00000138 e28aa002 skipb   add     r10, r10, #2                    ; increment cache number 
  157 0000013c e153000a         cmp     r3, r10 
  158 00000140 caffffe4         bgt     loop1b 
  159 00000144            
  160 00000144 e3a0a000 doneb   mov     r10, #0                         ; swith back to cache level 0 
  161 00000148 ee40af10         mcr     p15, 2, r10, c0, c0, 0          ; select current cache level in cssr 
  162 0000014c            
  163 0000014c e3a02000         mov     r2, #0 
  164 00000150 ee072f9a         mcr     p15, 0, r2, c7, c10, 4          ; data sync barrier operation 
  165 00000154            
  166 00000154            
  167 00000154 e8bd4ef0         ldmfd   sp!, {r4-r7, r9-r11, lr}        ; restore registers 
  168 00000158            
  169 00000158                  RETURN 
   43 00000158 e12fff1e     bx      lr 
  170 0000015c            
  171 0000015c            
  172 0000015c          ;------------------------------------------------------------------------------- 
  173 0000015c          ; 
  174 0000015c          ;  Function:  OALFlushDCacheLines 
  175 0000015c          ; 
  176 0000015c                  LEAF_ENTRY OALFlushDCacheLines 
  175 0000015c          FuncName SETS    VBar:CC:"OALFlushDCacheLines":CC:VBar 
  176 0000015c          PrologName SETS "Invalid Prolog" 
  177 0000015c          FuncEndName SETS    VBar:CC:"OALFlushDCacheLines":CC:"_end":CC:VBar 
  178 0000015c                  ALIGN   2 
  179 0000015c                  EXPORT  |OALFlushDCacheLines| [FUNC] 
  180 0000015c          |OALFlushDCacheLines| 
  181 0000015c                  ROUT 
  177 0000015c            
  178 0000015c e59f2040         ldr     r2, =g_oalCacheInfo 
  179 00000160 e592301c         ldr     r3, [r2, #L1DLineSize] 
  180 00000164            
  181 00000164 ee070f3e 10      mcr     p15, 0, r0, c7, c14, 1          ; clean and invalidate entry 
  182 00000168 e0800003         add     r0, r0, r3                      ; move to next 
  183 0000016c e0511003         subs    r1, r1, r3 
  184 00000170 cafffffb         bgt     %b10                            ; loop while > 0 bytes left 
  185 00000174            
  186 00000174 e3a02000         mov     r2, #0 
  187 00000178 ee072f9a         mcr     p15, 0, r2, c7, c10, 4          ; data sync barrier operation 
  188 0000017c            
  189 0000017c                  RETURN 
   43 0000017c e12fff1e     bx      lr 
  190 00000180            
  191 00000180            
  192 00000180          ;------------------------------------------------------------------------------- 
  193 00000180          ;  Function:  OALInvalidateDCacheLines 
  194 00000180          ; 
  195 00000180                  LEAF_ENTRY OALInvalidateDCacheLines 
  175 00000180          FuncName SETS    VBar:CC:"OALInvalidateDCacheLines":CC:VBar 
  176 00000180          PrologName SETS "Invalid Prolog" 
  177 00000180          FuncEndName SETS    VBar:CC:"OALInvalidateDCacheLines":CC:"_end":CC:VBar 
  178 00000180                  ALIGN   2 
  179 00000180                  EXPORT  |OALInvalidateDCacheLines| [FUNC] 
  180 00000180          |OALInvalidateDCacheLines| 
  181 00000180                  ROUT 
  196 00000180            
  197 00000180 e59f201c         ldr     r2, =g_oalCacheInfo 
  198 00000184 e592301c         ldr     r3, [r2, #L1DLineSize] 
  199 00000188            
  200 00000188 ee070f36 10      mcr     p15, 0, r0, c7, c6, 1           ; invalidate entry 
  201 0000018c e0800003         add     r0, r0, r3                      ; move to next 
  202 00000190 e0511003         subs    r1, r1, r3 
  203 00000194 cafffffb         bgt     %b10                            ; loop while > 0 bytes left 
  204 00000198            
  205 00000198                  RETURN 
   43 00000198 e12fff1e     bx      lr 
  206 0000019c            
  207 0000019c            
  208 0000019c                  END 
  209 0000019c 000003ff *literal pool: constant 
  209 000001a0 00007fff *literal pool: constant 
  209 000001a4 00000000 *literal pool: symbol:  g_oalCacheInfo + 0x0 
Assembly terminated, errors: 0, warnings: 2 
