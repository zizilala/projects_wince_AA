; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\OAL\CORTEXA8_CACHE\flush.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OEMCacheRangeFlush|
	EXPORT	|??_C@_1CM@BMDDLKDO@?$AA?9?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@FFFKHHBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@| [ DATA ] ; `string'
	IMPORT	|OALClearDTLB|
	IMPORT	|OALClearDTLBAsid|
	IMPORT	|OALClearDTLBEntry|
	IMPORT	|OALClearITLB|
	IMPORT	|OALClearITLBAsid|
	IMPORT	|OALClearITLBEntry|
	IMPORT	|OALGetContextID|
	IMPORT	|OALFlushICache|
	IMPORT	|OALFlushICacheLines|
	IMPORT	|OALFlushDCacheLines|
	IMPORT	|OALFlushDCache|
	IMPORT	|OALInvalidateDCacheLines|
	IMPORT	|OALCleanDCacheLines|
	IMPORT	|g_dwRangeLimit|
	IMPORT	|g_oalCacheInfo|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|__rt_udiv|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\oal\cortexa8_cache\flush.c

  00000			 AREA	 |.pdata|, PDATA
|$T44186| DCD	|$LN57@OEMCacheRa|
	DCD	0x40009401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@BMDDLKDO@?$AA?9?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "C", 0x0, "a", 0x0, "c"
	DCB	0x0, "h", 0x0, "e", 0x0, "R", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, "F", 0x0, "l", 0x0, "u", 0x0, "s", 0x0, "h"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@FFFKHHBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "C", 0x0, "a", 0x0, "c"
	DCB	0x0, "h", 0x0, "e", 0x0, "R", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, "F", 0x0, "l", 0x0, "u", 0x0, "s", 0x0, "h"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMCacheRangeFlush| PROC

; 78   : {

  00000		 |$LN57@OEMCacheRa|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M44183|
  00004	e1a07002	 mov         r7, r2
  00008	e1a04001	 mov         r4, r1
  0000c	e1a05000	 mov         r5, r0

; 79   : //    BOOL    bEnabled;
; 80   : 
; 81   :     OALMSG(OAL_CACHE&&OAL_VERBOSE, (
; 82   :         L"+OEMCacheRangeFlush(0x%08x, %d, 0x%08x)\r\n", pAddress, length, flags
; 83   :     ));

  00010	e59f8234	 ldr         r8, [pc, #0x234]
  00014	e5983440	 ldr         r3, [r8, #0x440]
  00018	e3130020	 tst         r3, #0x20
  0001c	13130902	 tstne       r3, #2, 18
  00020	159f0220	 ldrne       r0, [pc, #0x220]
  00024	11a03007	 movne       r3, r7
  00028	11a02004	 movne       r2, r4
  0002c	11a01005	 movne       r1, r5
  00030	1b000000	 blne        NKDbgPrintfW

; 84   : 
; 85   : 
; 86   :     //bEnabled = INTERRUPTS_ENABLE(FALSE);
; 87   : 
; 88   :     if ((flags & CACHE_SYNC_DISCARD) != 0) {

  00034	e59f9208	 ldr         r9, [pc, #0x208]
  00038	e59fa200	 ldr         r10, [pc, #0x200]
  0003c	e3170001	 tst         r7, #1
  00040	0a000006	 beq         |$LN44@OEMCacheRa|

; 89   :         // Write back and invalidate the selected portions of the data cache
; 90   :         if (length == 0 || pAddress == NULL) {

  00044	e3540000	 cmp         r4, #0
  00048	0a00002c	 beq         |$LN35@OEMCacheRa|
  0004c	e3550000	 cmp         r5, #0
  00050	0a00002a	 beq         |$LN35@OEMCacheRa|

; 91   :             OALFlushDCache();
; 92   :         } else {
; 93   :             // Normalize address to cache line alignment
; 94   :             UINT32 mask = g_oalCacheInfo.L1DLineSize - 1;

  00054	e599301c	 ldr         r3, [r9, #0x1C]

; 95   :             UINT32 address = (UINT32)pAddress & ~mask;
; 96   :             // Adjust size to reflect cache line alignment
; 97   :             length += (UINT32)pAddress - address;
; 98   :            // If range is bigger than cache range limit, flush all
; 99   :             if (length >= g_dwRangeLimit) {

  00058	e2433001	 sub         r3, r3, #1

; 100  :                 OALFlushDCache();
; 101  :             } else {                
; 102  :                 // Flush all the indicated cache entries
; 103  :                 OALFlushDCacheLines((VOID*)address, length);

  0005c	ea000021	 b           |$LN52@OEMCacheRa|
  00060		 |$LN44@OEMCacheRa|

; 104  :             }                
; 105  :         }
; 106  :     } else if ((flags & CACHE_SYNC_WRITEBACK) != 0) {

  00060	e3170004	 tst         r7, #4
  00064	0a00000e	 beq         |$LN37@OEMCacheRa|

; 107  :         // Write back the selected portion of the data cache
; 108  :         if (length == 0 || pAddress == NULL) {

  00068	e3540000	 cmp         r4, #0
  0006c	0a000023	 beq         |$LN35@OEMCacheRa|
  00070	e3550000	 cmp         r5, #0
  00074	0a000021	 beq         |$LN35@OEMCacheRa|

; 109  :             // OALCleanDCache();
; 110  :             OALFlushDCache();
; 111  :         } else {
; 112  :             // Normalize address to cache line alignment
; 113  :             UINT32 mask = g_oalCacheInfo.L1DLineSize - 1;

  00078	e599301c	 ldr         r3, [r9, #0x1C]

; 114  :             UINT32 address = (UINT32)pAddress & ~mask;
; 115  :             // Adjust size to reflect cache line alignment
; 116  :             length += (UINT32)pAddress - address;
; 117  :             // If range is bigger than cache range limit, clean all
; 118  :             if (length >= g_dwRangeLimit) {

  0007c	e59a2000	 ldr         r2, [r10]
  00080	e2433001	 sub         r3, r3, #1
  00084	e1c50003	 bic         r0, r5, r3
  00088	e0453000	 sub         r3, r5, r0
  0008c	e0844003	 add         r4, r4, r3
  00090	e1540002	 cmp         r4, r2

; 119  :                 // OALCleanDCache();
; 120  :                 OALFlushDCache();
; 121  :             } else {                

  00094	2a000019	 bcs         |$LN35@OEMCacheRa|

; 122  :                 // Flush all the indicated cache entries
; 123  :                 OALCleanDCacheLines((VOID*)address, length);

  00098	e1a01004	 mov         r1, r4
  0009c	eb000000	 bl          OALCleanDCacheLines
  000a0	ea00001a	 b           |$LN25@OEMCacheRa|
  000a4		 |$LN37@OEMCacheRa|

; 124  :             }                
; 125  :         }
; 126  :     } else if ((flags & TI_CACHE_SYNC_INVALIDATE) != 0) {

  000a4	e3170102	 tst         r7, #2, 2
  000a8	0a000018	 beq         |$LN25@OEMCacheRa|

; 127  :         // Invalidate the selected portion of the data cache
; 128  :         // Invalidate all data cache corrupts the execution 
; 129  :         // of the operating system.  Only process with given 
; 130  :         // buffers that are cache line aligned will be invalidated
; 131  :         // all others will be clean & invalidated
; 132  :         if ((length != 0) && (pAddress != NULL)) 

  000ac	e3540000	 cmp         r4, #0
  000b0	0a000016	 beq         |$LN25@OEMCacheRa|
  000b4	e3550000	 cmp         r5, #0
  000b8	0a000014	 beq         |$LN25@OEMCacheRa|

; 133  :         {
; 134  :             // Check for page alignment
; 135  :             if( ((DWORD)(pAddress) % g_oalCacheInfo.L1DLineSize) == 0 )

  000bc	e599601c	 ldr         r6, [r9, #0x1C]
  000c0	e1a01005	 mov         r1, r5
  000c4	e1a00006	 mov         r0, r6
  000c8	eb000000	 bl          __rt_udiv
  000cc	e3510000	 cmp         r1, #0
  000d0	1a000003	 bne         |$LN28@OEMCacheRa|

; 136  :             {
; 137  :                 // Invalidate the indicated cache entries
; 138  :                 OALInvalidateDCacheLines(pAddress, length);

  000d4	e1a01004	 mov         r1, r4
  000d8	e1a00005	 mov         r0, r5
  000dc	eb000000	 bl          OALInvalidateDCacheLines

; 139  :             }
; 140  :             else

  000e0	ea00000a	 b           |$LN25@OEMCacheRa|
  000e4		 |$LN28@OEMCacheRa|

; 141  :             {
; 142  :                 // Normalize address to cache line alignment
; 143  :                 UINT32 mask = g_oalCacheInfo.L1DLineSize - 1;

  000e4	e2463001	 sub         r3, r6, #1
  000e8		 |$LN52@OEMCacheRa|

; 144  :                 UINT32 address = (UINT32)pAddress & ~mask;

  000e8	e1c50003	 bic         r0, r5, r3

; 145  :                 // Adjust size to reflect cache line alignment
; 146  :                 length += (UINT32)pAddress - address;
; 147  :                 // If range is bigger than cache range limit, flush all
; 148  :                 if (length >= g_dwRangeLimit) {

  000ec	e59a2000	 ldr         r2, [r10]
  000f0	e0453000	 sub         r3, r5, r0
  000f4	e0844003	 add         r4, r4, r3
  000f8	e1540002	 cmp         r4, r2
  000fc	3a000001	 bcc         |$LN26@OEMCacheRa|
  00100		 |$LN35@OEMCacheRa|

; 149  :                     OALFlushDCache();

  00100	eb000000	 bl          OALFlushDCache

; 150  :                 } else {                

  00104	ea000001	 b           |$LN25@OEMCacheRa|
  00108		 |$LN26@OEMCacheRa|

; 151  :                     // Flush all the indicated cache entries
; 152  :                     OALFlushDCacheLines((VOID*)address, length);

  00108	e1a01004	 mov         r1, r4
  0010c	eb000000	 bl          OALFlushDCacheLines
  00110		 |$LN25@OEMCacheRa|

; 153  :                 }                
; 154  :             }
; 155  :         }                   
; 156  :     }
; 157  : 
; 158  : 
; 159  :     if ((flags & CACHE_SYNC_INSTRUCTIONS) != 0) {

  00110	e3170002	 tst         r7, #2
  00114	0a00000f	 beq         |$LN19@OEMCacheRa|

; 160  :         // WInvalidate the selected portions of the instruction cache
; 161  :         if (length == 0 || pAddress == NULL) {

  00118	e3540000	 cmp         r4, #0
  0011c	0a00000c	 beq         |$LN22@OEMCacheRa|
  00120	e3550000	 cmp         r5, #0
  00124	0a00000a	 beq         |$LN22@OEMCacheRa|

; 163  :         } else {
; 164  :             // Normalize address to cache line alignment
; 165  :             UINT32 mask = g_oalCacheInfo.L1ILineSize - 1;

  00128	e599300c	 ldr         r3, [r9, #0xC]

; 166  :             UINT32 address = (UINT32)pAddress & ~mask;
; 167  :             // Adjust size to reflect cache line alignment
; 168  :             length += (UINT32)pAddress - address;
; 169  :            // If range is bigger than cache range limit, flush all
; 170  :             if (length >= g_dwRangeLimit) {

  0012c	e59a2000	 ldr         r2, [r10]
  00130	e2433001	 sub         r3, r3, #1
  00134	e1c50003	 bic         r0, r5, r3
  00138	e0453000	 sub         r3, r5, r0
  0013c	e0844003	 add         r4, r4, r3
  00140	e1540002	 cmp         r4, r2

; 171  :                 OALFlushICache();
; 172  :             } else {                

  00144	2a000002	 bcs         |$LN22@OEMCacheRa|

; 173  :                 // Flush all the indicated cache entries
; 174  :                 OALFlushICacheLines((VOID*)address, length);

  00148	e1a01004	 mov         r1, r4
  0014c	eb000000	 bl          OALFlushICacheLines
  00150	ea000000	 b           |$LN19@OEMCacheRa|
  00154		 |$LN22@OEMCacheRa|

; 162  :             OALFlushICache();

  00154	eb000000	 bl          OALFlushICache
  00158		 |$LN19@OEMCacheRa|

; 175  :             }                
; 176  :         }
; 177  :     }
; 178  : 
; 179  : 
; 180  : #if (_WINCEOSVER>=600)
; 181  : 
; 182  :     //
; 183  :     //  TLB flushing for WinCE 6 and WinMobile 7
; 184  :     //
; 185  : 
; 186  :     //
; 187  :     //  Flush instruction TLB
; 188  :     //
; 189  :     if ((flags & CACHE_SYNC_FLUSH_I_TLB) != 0) {

  00158	e3e03b0d	 mvn         r3, #0xD, 22
  0015c	e22360fb	 eor         r6, r3, #0xFB
  00160	e3170008	 tst         r7, #8
  00164	0a000015	 beq         |$LN10@OEMCacheRa|

; 190  :         //  If the address is less than the kernel global space, OR with the ASID prior to clearing the TLB
; 191  :         //  otherwise clear the global TLB entry (no ASID)
; 192  :         if( length == 0 && pAddress == NULL)

  00168	e3540000	 cmp         r4, #0
  0016c	1a000001	 bne         |$LN17@OEMCacheRa|
  00170	e3550000	 cmp         r5, #0

; 193  :         {
; 194  :             // flush the whole TLB
; 195  :             OALClearITLB();

  00174	0a000010	 beq         |$LN11@OEMCacheRa|
  00178		 |$LN17@OEMCacheRa|

; 196  :         }
; 197  :         else if( (DWORD) pAddress < KERNEL_GLOBAL_ADDRESS )
; 198  :         {
; 199  :             if( length == (DWORD) PAGE_SIZE )

  00178	e5963000	 ldr         r3, [r6]
  0017c	e3550207	 cmp         r5, #7, 4
  00180	2a000008	 bcs         |$LN15@OEMCacheRa|
  00184	e1540003	 cmp         r4, r3
  00188	1a000003	 bne         |$LN14@OEMCacheRa|

; 200  :             {
; 201  :                 // flush process TLB entry (with ASID)
; 202  :                 OALClearITLBEntry((VOID*)((DWORD)pAddress | OALGetContextID()));

  0018c	eb000000	 bl          OALGetContextID
  00190	e1800005	 orr         r0, r0, r5

; 213  :             {
; 214  :                 // flush global TLB entry (no ASID)
; 215  :                 OALClearITLBEntry(pAddress);

  00194	eb000000	 bl          OALClearITLBEntry

; 216  :             }
; 217  :             else

  00198	ea000008	 b           |$LN10@OEMCacheRa|
  0019c		 |$LN14@OEMCacheRa|

; 203  :             }
; 204  :             else
; 205  :             {
; 206  :                 // flush the whole TLB for that ASID
; 207  :                 OALClearITLBAsid(OALGetContextID());

  0019c	eb000000	 bl          OALGetContextID
  001a0	eb000000	 bl          OALClearITLBAsid

; 208  :             }
; 209  :         }
; 210  :         else

  001a4	ea000005	 b           |$LN10@OEMCacheRa|
  001a8		 |$LN15@OEMCacheRa|

; 211  :         {
; 212  :             if( length == (DWORD) PAGE_SIZE )

  001a8	e1540003	 cmp         r4, r3
  001ac	1a000002	 bne         |$LN11@OEMCacheRa|

; 213  :             {
; 214  :                 // flush global TLB entry (no ASID)
; 215  :                 OALClearITLBEntry(pAddress);

  001b0	e1a00005	 mov         r0, r5
  001b4	eb000000	 bl          OALClearITLBEntry

; 216  :             }
; 217  :             else

  001b8	ea000000	 b           |$LN10@OEMCacheRa|
  001bc		 |$LN11@OEMCacheRa|

; 218  :             {
; 219  :                 // flush the whole TLB
; 220  :                 OALClearITLB();

  001bc	eb000000	 bl          OALClearITLB
  001c0		 |$LN10@OEMCacheRa|

; 221  :             }
; 222  :         }
; 223  :     }
; 224  : 
; 225  :     //
; 226  :     //  Flush data TLB
; 227  :     //
; 228  :     if ((flags & CACHE_SYNC_FLUSH_D_TLB) != 0) {

  001c0	e3170010	 tst         r7, #0x10
  001c4	0a000015	 beq         |$LN1@OEMCacheRa|

; 229  :         //  If the address is less than the kernel global space, OR with the ASID prior to clearing the TLB
; 230  :         //  otherwise clear the global TLB entry (no ASID)
; 231  :         if( length == 0 && pAddress == NULL)

  001c8	e3540000	 cmp         r4, #0
  001cc	1a000001	 bne         |$LN8@OEMCacheRa|
  001d0	e3550000	 cmp         r5, #0

; 232  :         {
; 233  :             // flush the whole TLB
; 234  :             OALClearDTLB();

  001d4	0a000010	 beq         |$LN2@OEMCacheRa|
  001d8		 |$LN8@OEMCacheRa|

; 235  :         }
; 236  :         else if( (DWORD) pAddress < KERNEL_GLOBAL_ADDRESS )
; 237  :         {
; 238  :             if( length == (DWORD) PAGE_SIZE )

  001d8	e5963000	 ldr         r3, [r6]
  001dc	e3550207	 cmp         r5, #7, 4
  001e0	2a000008	 bcs         |$LN6@OEMCacheRa|
  001e4	e1540003	 cmp         r4, r3
  001e8	1a000003	 bne         |$LN5@OEMCacheRa|

; 239  :             {
; 240  :                 // flush process TLB entry (with ASID)
; 241  :                 OALClearDTLBEntry((VOID*)((DWORD)pAddress | OALGetContextID()));

  001ec	eb000000	 bl          OALGetContextID
  001f0	e1800005	 orr         r0, r0, r5

; 252  :             {
; 253  :                 // flush global TLB entry (no ASID)
; 254  :                 OALClearDTLBEntry(pAddress);

  001f4	eb000000	 bl          OALClearDTLBEntry

; 255  :             }
; 256  :             else

  001f8	ea000008	 b           |$LN1@OEMCacheRa|
  001fc		 |$LN5@OEMCacheRa|

; 242  :             }
; 243  :             else
; 244  :             {
; 245  :                 // flush the whole TLB for that ASID
; 246  :                 OALClearDTLBAsid(OALGetContextID());

  001fc	eb000000	 bl          OALGetContextID
  00200	eb000000	 bl          OALClearDTLBAsid

; 247  :             }
; 248  :         }
; 249  :         else

  00204	ea000005	 b           |$LN1@OEMCacheRa|
  00208		 |$LN6@OEMCacheRa|

; 250  :         {
; 251  :             if( length == (DWORD) PAGE_SIZE )

  00208	e1540003	 cmp         r4, r3
  0020c	1a000002	 bne         |$LN2@OEMCacheRa|

; 252  :             {
; 253  :                 // flush global TLB entry (no ASID)
; 254  :                 OALClearDTLBEntry(pAddress);

  00210	e1a00005	 mov         r0, r5
  00214	eb000000	 bl          OALClearDTLBEntry

; 255  :             }
; 256  :             else

  00218	ea000000	 b           |$LN1@OEMCacheRa|
  0021c		 |$LN2@OEMCacheRa|

; 257  :             {
; 258  :                 // flush the whole TLB
; 259  :                 OALClearDTLB();

  0021c	eb000000	 bl          OALClearDTLB
  00220		 |$LN1@OEMCacheRa|

; 79   : //    BOOL    bEnabled;
; 80   : 
; 81   :     OALMSG(OAL_CACHE&&OAL_VERBOSE, (
; 82   :         L"+OEMCacheRangeFlush(0x%08x, %d, 0x%08x)\r\n", pAddress, length, flags
; 83   :     ));

  00220	e5983440	 ldr         r3, [r8, #0x440]

; 260  :             }
; 261  :         }
; 262  :     }
; 263  :     
; 264  : #else
; 265  : 
; 266  :     //
; 267  :     //  TLB flushing for WinMobile 6.x
; 268  :     //
; 269  : 
; 270  :     //  Flush for a demand page
; 271  : //    if ((length == PAGE_SIZE) && (flags & CACHE_SYNC_WRITEBACK)) {
; 272  : //        //    OALMSG(1, (L"PAGE flush pAddr = %8.8lx  zAddr = %8.8lx\r\n", pAddress, ZeroPtr(pAddress)));
; 273  : //        OALClearTLB();
; 274  : //    }
; 275  : 
; 276  :     //
; 277  :     //  Flush TLB
; 278  :     //
; 279  :     if ((flags & CACHE_SYNC_FLUSH_TLB) != 0) {
; 280  :         if (length == PAGE_SIZE) {
; 281  :             // flush one TLB entry
; 282  :             OALClearTLBEntry(pAddress);
; 283  :         } else {
; 284  :             // flush the whole TLB
; 285  :             OALClearTLB();
; 286  :         }
; 287  :     }
; 288  : 
; 289  : #endif 
; 290  : 
; 291  :     //INTERRUPTS_ENABLE(bEnabled);
; 292  : 
; 293  :     OALMSG(OAL_CACHE&&OAL_VERBOSE, (L"-OEMCacheRangeFlush\r\n"));

  00224	e3130020	 tst         r3, #0x20
  00228	13130902	 tstne       r3, #2, 18
  0022c	159f0008	 ldrne       r0, [pc, #8]
  00230	1b000000	 blne        NKDbgPrintfW

; 294  : }

  00234	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00238	e12fff1e	 bx          lr
  0023c		 |$LN58@OEMCacheRa|
  0023c		 |$LN59@OEMCacheRa|
  0023c	00000000	 DCD         |??_C@_1CM@BMDDLKDO@?$AA?9?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$AN?$AA?6?$AA?$AA@|
  00240		 |$LN60@OEMCacheRa|
  00240	00000000	 DCD         |g_dwRangeLimit|
  00244		 |$LN61@OEMCacheRa|
  00244	00000000	 DCD         |g_oalCacheInfo|
  00248		 |$LN62@OEMCacheRa|
  00248	00000000	 DCD         |??_C@_1FE@FFFKHHBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@|
  0024c		 |$LN63@OEMCacheRa|
  0024c	00000000	 DCD         |dpCurSettings|
  00250		 |$M44184|

			 ENDP  ; |OEMCacheRangeFlush|

	END
