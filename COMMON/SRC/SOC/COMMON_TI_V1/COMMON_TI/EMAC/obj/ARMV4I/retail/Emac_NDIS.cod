; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\EMAC\Emac_NDIS.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|DriverEntry|
	IMPORT	|NdisTerminateWrapper|
	IMPORT	|NdisMRegisterMiniport|
	IMPORT	|Emac_MiniportSendPacketsHandler|
	IMPORT	|Emac_MiniportReturnPacket|
	IMPORT	|Emac_MiniportSetInformation|
	IMPORT	|Emac_MiniportReset|
	IMPORT	|Emac_MiniportQueryInformation|
	IMPORT	|Emac_MiniportIsr|
	IMPORT	|Emac_MiniportInitialize|
	IMPORT	|Emac_MiniportHandleInterrupt|
	IMPORT	|Emac_MiniportHalt|
	IMPORT	|Emac_MiniportDisableInterrupt|
	IMPORT	|Emac_MiniportCheckForHang|
	IMPORT	|NdisInitializeWrapper|
	IMPORT	|memset|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\emac\emac_ndis.c

  00000			 AREA	 |.pdata|, PDATA
|$T50227| DCD	|$LN7@DriverEntr|
	DCD	0x40004a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DriverEntry| PROC

; 51   : {

  00000		 |$LN7@DriverEntr|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd080	 sub         sp, sp, #0x80
  00008		 |$M50224|
  00008	e1a02001	 mov         r2, r1
  0000c	e1a01000	 mov         r1, r0

; 52   :     NDIS_STATUS                   Status;
; 53   :     NDIS_HANDLE                   NdisWrapperHandle;
; 54   :     NDIS_MINIPORT_CHARACTERISTICS EmacChar;
; 55   : 
; 56   :     DEBUGMSG(DBG_FUNC, (L"---> DriverEntry\r\n"));
; 57   : 
; 58   :     /*  Notify the  NDIS library that driver is about to register itself as
; 59   :      *  a miniport. NDIS sets up the state it needs to track the driver and
; 60   :      *  returns an NDISWrapperHandle which driver uses for subsequent calls.
; 61   :      */
; 62   :     
; 63   :      NdisMInitializeWrapper(
; 64   :         &NdisWrapperHandle,
; 65   :         DriverObject,
; 66   :         RegistryPath,
; 67   :         NULL);

  00010	e3a03000	 mov         r3, #0
  00014	e28d0000	 add         r0, sp, #0
  00018	eb000000	 bl          NdisInitializeWrapper

; 68   : 
; 69   :     if (NdisWrapperHandle == NULL)

  0001c	e59db000	 ldr         r11, [sp]
  00020	e35b0000	 cmp         r11, #0

; 70   :     {
; 71   :         Status = NDIS_STATUS_FAILURE;
; 72   : 
; 73   :         DEBUGMSG(Status, (L"<--- DriverEntry failed to InitWrapper, Status=%x \r\n", Status));
; 74   :         return Status;

  00024	03a04107	 moveq       r4, #7, 2
  00028	0a00002f	 beq         |$LN1@DriverEntr|

; 75   :     }
; 76   : 
; 77   :     /* Fill in the Miniport characteristics structure with the version numbers 
; 78   :      * and the entry points for driver-supplied MiniportXxx 
; 79   :      */
; 80   :      
; 81   :     NdisZeroMemory(&EmacChar, sizeof(EmacChar));

  0002c	e3a0207c	 mov         r2, #0x7C
  00030	e3a01000	 mov         r1, #0
  00034	e28d0004	 add         r0, sp, #4
  00038	eb000000	 bl          memset

; 82   : 
; 83   :     EmacChar.MajorNdisVersion         = EMAC_NDIS_MAJOR_VERSION;
; 84   :     EmacChar.MinorNdisVersion         = EMAC_NDIS_MINOR_VERSION;
; 85   : 
; 86   :     EmacChar.CheckForHangHandler      = Emac_MiniportCheckForHang;

  0003c	e59f30e0	 ldr         r3, [pc, #0xE0]

; 87   :     EmacChar.DisableInterruptHandler  = Emac_MiniportDisableInterrupt;

  00040	e59f20d8	 ldr         r2, [pc, #0xD8]

; 88   :     EmacChar.EnableInterruptHandler   = NULL;
; 89   :     EmacChar.HaltHandler              = Emac_MiniportHalt;

  00044	e59f10d0	 ldr         r1, [pc, #0xD0]

; 90   :     EmacChar.HandleInterruptHandler   = Emac_MiniportHandleInterrupt;  
; 91   :     EmacChar.InitializeHandler        = Emac_MiniportInitialize;
; 92   :     EmacChar.ISRHandler               = Emac_MiniportIsr;  
; 93   :     EmacChar.QueryInformationHandler  = Emac_MiniportQueryInformation;
; 94   :     EmacChar.ReconfigureHandler       = NULL;  
; 95   :     EmacChar.ResetHandler             = Emac_MiniportReset;
; 96   :     EmacChar.SendHandler              = NULL;
; 97   :     EmacChar.SetInformationHandler    = Emac_MiniportSetInformation;
; 98   :     EmacChar.TransferDataHandler      = NULL;  
; 99   :     EmacChar.ReturnPacketHandler      = Emac_MiniportReturnPacket;
; 100  :     EmacChar.SendPacketsHandler       = Emac_MiniportSendPacketsHandler;
; 101  :     EmacChar.AllocateCompleteHandler  = NULL;

  00048	e58d300c	 str         r3, [sp, #0xC]

; 102  :     
; 103  :     DEBUGMSG(TRUE, (L"Calling NdisMRegisterMiniport with NDIS_MINIPORT_MAJOR_VERSION %d" \
; 104  :                      L"& NDIS_MINIPORT_MINOR_VERSION %d\r\n",
; 105  :                       NDIS_MINIPORT_MAJOR_VERSION,NDIS_MINIPORT_MINOR_VERSION));
; 106  :     
; 107  :     /* Calling NdisMRegisterMiniport causes driver's MiniportInitialise
; 108  :      * function to run in the context of NdisMRegisterMiniport.
; 109  :      */
; 110  :      
; 111  :     
; 112  :     Status = NdisMRegisterMiniport(
; 113  :                  NdisWrapperHandle,
; 114  :                  &EmacChar,
; 115  :                  sizeof(NDIS_MINIPORT_CHARACTERISTICS));

  0004c	e3a03005	 mov         r3, #5
  00050	e5cd3004	 strb        r3, [sp, #4]
  00054	e3a03000	 mov         r3, #0
  00058	e5cd3005	 strb        r3, [sp, #5]
  0005c	e3a03000	 mov         r3, #0
  00060	e58d3014	 str         r3, [sp, #0x14]
  00064	e3a03000	 mov         r3, #0
  00068	e58d302c	 str         r3, [sp, #0x2C]
  0006c	e3a03000	 mov         r3, #0
  00070	e58d3034	 str         r3, [sp, #0x34]
  00074	e59fe09c	 ldr         lr, [pc, #0x9C]
  00078	e59f4094	 ldr         r4, [pc, #0x94]
  0007c	e59f508c	 ldr         r5, [pc, #0x8C]
  00080	e59f6084	 ldr         r6, [pc, #0x84]
  00084	e59f707c	 ldr         r7, [pc, #0x7C]
  00088	e59f8074	 ldr         r8, [pc, #0x74]
  0008c	e59f906c	 ldr         r9, [pc, #0x6C]
  00090	e59fa064	 ldr         r10, [pc, #0x64]
  00094	e3a03000	 mov         r3, #0
  00098	e58d303c	 str         r3, [sp, #0x3C]
  0009c	e3a03000	 mov         r3, #0
  000a0	e58d2010	 str         r2, [sp, #0x10]
  000a4	e58d1018	 str         r1, [sp, #0x18]
  000a8	e3a0207c	 mov         r2, #0x7C
  000ac	e28d1004	 add         r1, sp, #4
  000b0	e1a0000b	 mov         r0, r11
  000b4	e58d3048	 str         r3, [sp, #0x48]
  000b8	e58de01c	 str         lr, [sp, #0x1C]
  000bc	e58d4020	 str         r4, [sp, #0x20]
  000c0	e58d5024	 str         r5, [sp, #0x24]
  000c4	e58d6028	 str         r6, [sp, #0x28]
  000c8	e58d7030	 str         r7, [sp, #0x30]
  000cc	e58d8038	 str         r8, [sp, #0x38]
  000d0	e58d9040	 str         r9, [sp, #0x40]
  000d4	e58da044	 str         r10, [sp, #0x44]
  000d8	eb000000	 bl          NdisMRegisterMiniport
  000dc	e1b04000	 movs        r4, r0

; 116  :     
; 117  :     if(Status != NDIS_STATUS_SUCCESS)
; 118  :     {
; 119  :         /* Call NdisTerminateWrapper, and return the error code to the OS. */
; 120  :         NdisTerminateWrapper(
; 121  :             NdisWrapperHandle, 
; 122  :             NULL);          /* Ignored */            

  000e0	159d0000	 ldrne       r0, [sp]
  000e4	13a01000	 movne       r1, #0
  000e8	1b000000	 blne        NdisTerminateWrapper
  000ec		 |$LN1@DriverEntr|

; 123  :     }
; 124  :         
; 125  :     DEBUGMSG(DBG_INFO, (L"<--- DriverEntry, Status= %x\r\n", Status));
; 126  : 
; 127  :     return Status;
; 128  :     
; 129  : }

  000ec	e1a00004	 mov         r0, r4
  000f0	e28dd080	 add         sp, sp, #0x80
  000f4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000f8	e12fff1e	 bx          lr
  000fc		 |$LN8@DriverEntr|
  000fc		 |$LN9@DriverEntr|
  000fc	00000000	 DCD         |Emac_MiniportSendPacketsHandler|
  00100		 |$LN10@DriverEntr|
  00100	00000000	 DCD         |Emac_MiniportReturnPacket|
  00104		 |$LN11@DriverEntr|
  00104	00000000	 DCD         |Emac_MiniportSetInformation|
  00108		 |$LN12@DriverEntr|
  00108	00000000	 DCD         |Emac_MiniportReset|
  0010c		 |$LN13@DriverEntr|
  0010c	00000000	 DCD         |Emac_MiniportQueryInformation|
  00110		 |$LN14@DriverEntr|
  00110	00000000	 DCD         |Emac_MiniportIsr|
  00114		 |$LN15@DriverEntr|
  00114	00000000	 DCD         |Emac_MiniportInitialize|
  00118		 |$LN16@DriverEntr|
  00118	00000000	 DCD         |Emac_MiniportHandleInterrupt|
  0011c		 |$LN17@DriverEntr|
  0011c	00000000	 DCD         |Emac_MiniportHalt|
  00120		 |$LN18@DriverEntr|
  00120	00000000	 DCD         |Emac_MiniportDisableInterrupt|
  00124		 |$LN19@DriverEntr|
  00124	00000000	 DCD         |Emac_MiniportCheckForHang|
  00128		 |$M50225|

			 ENDP  ; |DriverEntry|

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|

  00000			 AREA	 |.pdata|, PDATA
|$T50250| DCD	|$LN9@DllMain|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllMain| PROC

; 147  : {

  00000		 |$LN9@DllMain|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M50247|

; 148  :     switch (Reason)

  00004	e3510001	 cmp         r1, #1

; 149  :     {
; 150  :         case DLL_PROCESS_ATTACH:
; 151  :                 DEBUGREGISTER(DllInstance);
; 152  :                 DEBUGMSG(DBG_INIT, (L"EmacMiniport : DLL Process Attach\r\n"));
; 153  :                 DisableThreadLibraryCalls((HMODULE) DllInstance);

  00008	0b000000	 bleq        DisableThreadLibraryCalls

; 154  :                 break;
; 155  :                 
; 156  :         case DLL_PROCESS_DETACH:
; 157  :                 DEBUGMSG(DBG_INIT, (L"EmacMiniport :  DLL Process Detach\r\n"));
; 158  :                 break;
; 159  :     }
; 160  :     return TRUE;

  0000c	e3a00001	 mov         r0, #1

; 161  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M50248|

			 ENDP  ; |DllMain|

	END
