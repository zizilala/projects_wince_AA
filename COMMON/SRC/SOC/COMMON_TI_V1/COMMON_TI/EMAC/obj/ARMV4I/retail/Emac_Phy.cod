; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\EMAC\Emac_Phy.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|f_pMdioRegs|, 0x4


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|ReadPhyRegister|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\emac\emac_phy.c

  00000			 AREA	 |.pdata|, PDATA
|$T50116| DCD	|$LN11@ReadPhyReg|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReadPhyRegister| PROC

; 33   : {

  00000		 |$LN11@ReadPhyReg|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M50113|
  00004	e59f4054	 ldr         r4, [pc, #0x54]
  00008	e594e000	 ldr         lr, [r4]
  0000c		 |$LL4@ReadPhyReg|

; 34   :     /* Wait for any previous command to complete */ 
; 35   :     while ( (f_pMdioRegs->USERACCESS0 & MDIO_USERACCESS0_GO) != 0 )

  0000c	e59e3080	 ldr         r3, [lr, #0x80]
  00010	e3130102	 tst         r3, #2, 2
  00014	1afffffc	 bne         |$LL4@ReadPhyReg|
  00018	e3e03c03	 mvn         r3, #3, 24

; 36   :     {
; 37   :     }
; 38   :     f_pMdioRegs->USERACCESS0 =(
; 39   :                                 (MDIO_USERACCESS0_GO) |
; 40   :                                 (MDIO_USERACCESS0_WRITE_READ)|
; 41   :                                 ((RegNum & 0x1F) << 21) |
; 42   :                                 ((PhyAddr & 0x1F) << 16)
; 43   :                                 );

  0001c	e22320ff	 eor         r2, r3, #0xFF
  00020	e201301f	 and         r3, r1, #0x1F
  00024	e1832002	 orr         r2, r3, r2
  00028	e200301f	 and         r3, r0, #0x1F
  0002c	e1833282	 orr         r3, r3, r2, lsl #5
  00030	e1a03803	 mov         r3, r3, lsl #16
  00034	e58e3080	 str         r3, [lr, #0x80]
  00038	e5942000	 ldr         r2, [r4]
  0003c		 |$LL2@ReadPhyReg|

; 44   :     /* Wait for command to complete */
; 45   : 
; 46   :     while ( (f_pMdioRegs->USERACCESS0 & MDIO_USERACCESS0_GO) != 0 )

  0003c	e5923080	 ldr         r3, [r2, #0x80]
  00040	e3130102	 tst         r3, #2, 2
  00044	1afffffc	 bne         |$LL2@ReadPhyReg|

; 47   :     {
; 48   :     }
; 49   : 
; 50   :     return (f_pMdioRegs->USERACCESS0 & 0xFFFF);

  00048	e5922080	 ldr         r2, [r2, #0x80]
  0004c	e3a03cff	 mov         r3, #0xFF, 24
  00050	e38330ff	 orr         r3, r3, #0xFF
  00054	e0020003	 and         r0, r2, r3

; 51   : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN12@ReadPhyReg|
  00060		 |$LN13@ReadPhyReg|
  00060	00000000	 DCD         |f_pMdioRegs|
  00064		 |$M50114|

			 ENDP  ; |ReadPhyRegister|

	EXPORT	|WritePhyRegister|

  00000			 AREA	 |.pdata|, PDATA
|$T50129| DCD	|$LN8@WritePhyRe|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WritePhyRegister| PROC

; 69   : {

  00000		 |$LN8@WritePhyRe|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M50126|
  00004	e59f3040	 ldr         r3, [pc, #0x40]
  00008	e5934000	 ldr         r4, [r3]
  0000c		 |$LL2@WritePhyRe|

; 70   :     /* Wait for User access register to be ready */
; 71   : 
; 72   :     while ( (f_pMdioRegs->USERACCESS0 & MDIO_USERACCESS0_GO) != 0 )

  0000c	e5943080	 ldr         r3, [r4, #0x80]
  00010	e3130102	 tst         r3, #2, 2
  00014	1afffffc	 bne         |$LL2@WritePhyRe|
  00018	e3e03c01	 mvn         r3, #1, 24

; 73   :     {
; 74   :     }
; 75   : 
; 76   :     f_pMdioRegs->USERACCESS0 =(
; 77   :                                 (MDIO_USERACCESS0_GO) |
; 78   :                                 (MDIO_USERACCESS0_WRITE_WRITE) |
; 79   :                                 ((RegNum & 0x1F) << 21) |
; 80   :                                 ((PhyAddr & 0x1F) << 16) |
; 81   :                                 (Data & 0xFFFF)
; 82   :                                 );

  0001c	e223e0ff	 eor         lr, r3, #0xFF
  00020	e201301f	 and         r3, r1, #0x1F
  00024	e183e00e	 orr         lr, r3, lr
  00028	e3a01cff	 mov         r1, #0xFF, 24
  0002c	e200301f	 and         r3, r0, #0x1F
  00030	e38110ff	 orr         r1, r1, #0xFF
  00034	e183028e	 orr         r0, r3, lr, lsl #5
  00038	e0023001	 and         r3, r2, r1
  0003c	e1833800	 orr         r3, r3, r0, lsl #16
  00040	e5843080	 str         r3, [r4, #0x80]

; 83   : 
; 84   : }

  00044	e8bd4010	 ldmia       sp!, {r4, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN9@WritePhyRe|
  0004c		 |$LN10@WritePhyRe|
  0004c	00000000	 DCD         |f_pMdioRegs|
  00050		 |$M50127|

			 ENDP  ; |WritePhyRegister|

	EXPORT	|PhyFindLink|

  00000			 AREA	 |.pdata|, PDATA
|$T50151| DCD	|$LN17@PhyFindLin|
	DCD	0x40002201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PhyFindLink| PROC

; 96   : {

  00000		 |$LN17@PhyFindLin|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M50148|
  00004	e1a08000	 mov         r8, r0

; 97   :     UINT32 ActPhy    = 0;
; 98   :     UINT32 LinkState = 0;   /* To maintain link state  */
; 99   :     UINT32 PhyAddr   = 0;   /* Phy number to be probed */
; 100  :     UINT32 Regval    = 0;
; 101  : 
; 102  :     f_pMdioRegs = Adapter->m_pMdioRegsBase;

  00008	e5982010	 ldr         r2, [r8, #0x10]
  0000c	e59f3070	 ldr         r3, [pc, #0x70]
  00010	e3a06000	 mov         r6, #0

; 103  :     
; 104  :     ActPhy = f_pMdioRegs->ALIVE;

  00014	e3a04000	 mov         r4, #0
  00018	e5832000	 str         r2, [r3]
  0001c	e5923008	 ldr         r3, [r2, #8]
  00020	e1b05003	 movs        r5, r3

; 105  :     
; 106  :     DEBUGMSG(DBG_FUNC,(L"--->PHYFindLink \r\n")); 
; 107  :     
; 108  :     while(ActPhy != 0)

  00024	0a000012	 beq         |$LN1@PhyFindLin|
  00028	e3a03cff	 mov         r3, #0xFF, 24
  0002c	e38370ff	 orr         r7, r3, #0xFF
  00030	ea000001	 b           |$LN14@PhyFindLin|
  00034		 |$LL4@PhyFindLin|

; 109  :     {
; 110  :         /* find the next active phy */
; 111  :         while (0 == (ActPhy & BIT(0)))
; 112  :         {
; 113  :             PhyAddr++;
; 114  :             ActPhy >>= 1;

  00034	e1a050a5	 mov         r5, r5, lsr #1
  00038	e2844001	 add         r4, r4, #1
  0003c		 |$LN14@PhyFindLin|
  0003c	e3150001	 tst         r5, #1
  00040	0afffffb	 beq         |$LL4@PhyFindLin|

; 115  :         }
; 116  : 
; 117  :         /* Read the status register from Phy */
; 118  :         Regval = ReadPhyRegister(PhyAddr, MII_STATUS_REG);

  00044	e3a01001	 mov         r1, #1
  00048	e1a00004	 mov         r0, r4
  0004c	eb000000	 bl          ReadPhyRegister

; 119  :         DEBUGMSG(DBG_INFO, (L"Regval %x, PhyAddr %u, LinkState %d \r\n",Regval, PhyAddr, LinkState));
; 120  : 
; 121  :         /* update link status mask */
; 122  :         if (Regval != 0xFFFF)

  00050	e1500007	 cmp         r0, r7
  00054	1a000003	 bne         |$LN11@PhyFindLin|

; 127  : 			}
; 128  :             break;
; 129  :         }
; 130  : 
; 131  :         /* go to next phy */
; 132  :         PhyAddr++;

  00058	e2844001	 add         r4, r4, #1

; 133  :         ActPhy >>= 1;

  0005c	e1b050a5	 movs        r5, r5, lsr #1
  00060	1afffff5	 bne         |$LN14@PhyFindLin|

; 119  :         DEBUGMSG(DBG_INFO, (L"Regval %x, PhyAddr %u, LinkState %d \r\n",Regval, PhyAddr, LinkState));
; 120  : 
; 121  :         /* update link status mask */
; 122  :         if (Regval != 0xFFFF)

  00064	ea000002	 b           |$LN1@PhyFindLin|
  00068		 |$LN11@PhyFindLin|

; 123  :         {
; 124  : 			if (Regval & PHY_LINK_STATUS)

  00068	e3100004	 tst         r0, #4

; 125  : 			{
; 126  : 				LinkState |= 1 << PhyAddr;

  0006c	13a03001	 movne       r3, #1
  00070	11a06413	 movne       r6, r3, lsl r4
  00074		 |$LN1@PhyFindLin|

; 134  :     }
; 135  : 
; 136  : 	Adapter->m_ActivePhy = PhyAddr;

  00074	e58841a8	 str         r4, [r8, #0x1A8]

; 137  : 
; 138  :     DEBUGMSG(DBG_FUNC, (L"<---PHYFindLink\r\n")); 
; 139  : 
; 140  :     return (LinkState);
; 141  : }

  00078	e1a00006	 mov         r0, r6
  0007c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN18@PhyFindLin|
  00084		 |$LN19@PhyFindLin|
  00084	00000000	 DCD         |f_pMdioRegs|
  00088		 |$M50149|

			 ENDP  ; |PhyFindLink|

	EXPORT	|LinkChangeIntrHandler|

  00000			 AREA	 |.pdata|, PDATA
|$T50161| DCD	|$LN7@LinkChange|
	DCD	0x40002901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LinkChangeIntrHandler| PROC

; 153  : {

  00000		 |$LN7@LinkChange|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M50158|
  00004	e1a05000	 mov         r5, r0

; 154  :     f_pMdioRegs = Adapter->m_pMdioRegsBase;

  00008	e5953010	 ldr         r3, [r5, #0x10]
  0000c	e59f608c	 ldr         r6, [pc, #0x8C]

; 155  :     
; 156  :     DEBUGMSG(DBG_FUNC, (L"LinkChangeIntrHandler-->m_ActivePhy = 0x%X\r\n", Adapter->m_ActivePhy));
; 157  :     /* Extract the Link status for the active PHY */
; 158  :     if(0 == (f_pMdioRegs->LINK & (BIT(0) << Adapter->m_ActivePhy)))

  00010	e3a01001	 mov         r1, #1
  00014	e3a07001	 mov         r7, #1
  00018	e5863000	 str         r3, [r6]
  0001c	e593200c	 ldr         r2, [r3, #0xC]
  00020	e59531a8	 ldr         r3, [r5, #0x1A8]

; 159  :     {
; 160  :         Adapter->m_LinkStatus = DOWN;
; 161  :          /* Link was active last time, now it is down. */
; 162  :         NdisMIndicateStatus(Adapter->m_AdapterHandle,
; 163  :                                 NDIS_STATUS_MEDIA_DISCONNECT, 
; 164  :                                 (PVOID)0, 
; 165  :                                 0);

  00024	e5950000	 ldr         r0, [r5]
  00028	e1120311	 tst         r2, r1, lsl r3
  0002c	e3a03000	 mov         r3, #0
  00030	e3a02000	 mov         r2, #0
  00034	1a00000a	 bne         |$LN2@LinkChange|
  00038	e3a01131	 mov         r1, #0x31, 2
  0003c	e58571a4	 str         r7, [r5, #0x1A4]
  00040	e5904220	 ldr         r4, [r0, #0x220]
  00044	e3811801	 orr         r1, r1, #1, 16
  00048	e1a0e00f	 mov         lr, pc
  0004c	e12fff14	 bx          r4

; 166  :                     
; 167  :         NdisMIndicateStatusComplete(Adapter->m_AdapterHandle);   

  00050	e5950000	 ldr         r0, [r5]
  00054	e5903224	 ldr         r3, [r0, #0x224]
  00058	e1a0e00f	 mov         lr, pc
  0005c	e12fff13	 bx          r3

; 168  :         DEBUGMSG(DBG_INFO, (L"LinkChangeIntrHandler NDIS_STATUS_MEDIA_DISCONNECT\r\n"));
; 169  :     } 
; 170  :     else 

  00060	ea00000a	 b           |$LN1@LinkChange|
  00064		 |$LN2@LinkChange|

; 171  :     {   
; 172  :         Adapter->m_LinkStatus = UP;
; 173  :         /* Link was active last time, now it is up. */
; 174  :         NdisMIndicateStatus(Adapter->m_AdapterHandle,
; 175  :                                 NDIS_STATUS_MEDIA_CONNECT, 
; 176  :                                 (PVOID)0, 
; 177  :                                 0);

  00064	e3a0112d	 mov         r1, #0x2D, 2
  00068	e58531a4	 str         r3, [r5, #0x1A4]
  0006c	e5904220	 ldr         r4, [r0, #0x220]
  00070	e3811801	 orr         r1, r1, #1, 16
  00074	e3a03000	 mov         r3, #0
  00078	e1a0e00f	 mov         lr, pc
  0007c	e12fff14	 bx          r4

; 178  :         
; 179  :         NdisMIndicateStatusComplete(Adapter->m_AdapterHandle);

  00080	e5950000	 ldr         r0, [r5]
  00084	e5903224	 ldr         r3, [r0, #0x224]
  00088	e1a0e00f	 mov         lr, pc
  0008c	e12fff13	 bx          r3
  00090		 |$LN1@LinkChange|

; 180  :         DEBUGMSG(DBG_INFO, (L"LinkChangeIntrHandler NDIS_STATUS_MEDIA_CONNECT\r\n"));
; 181  :     } 
; 182  :     /* Acknowledge interrupt */
; 183  :     f_pMdioRegs->LINKINTMASKED = 0x1;

  00090	e5963000	 ldr         r3, [r6]
  00094	e5837014	 str         r7, [r3, #0x14]

; 184  : }

  00098	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN8@LinkChange|
  000a0		 |$LN9@LinkChange|
  000a0	00000000	 DCD         |f_pMdioRegs|
  000a4		 |$M50159|

			 ENDP  ; |LinkChangeIntrHandler|

	END
