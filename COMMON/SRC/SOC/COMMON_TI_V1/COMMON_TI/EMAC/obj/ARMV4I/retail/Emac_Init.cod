; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\EMAC\Emac_Init.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_HighestAcceptedMax| [ DATA ]

  00000			 AREA	 |.data|, DATA
|g_HighestAcceptedMax| DCD 0xffffffff
	DCD	0xffffffff

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|EmacAllocAdapterBlock|
	IMPORT	|NdisAllocateSpinLock|
	IMPORT	|NdisAllocateMemory|
	IMPORT	|memset|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\emac\emac_init.c

  00000			 AREA	 |.pdata|, PDATA
|$T51774| DCD	|$LN6@EmacAllocA|
	DCD	0x40002202
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EmacAllocAdapterBlock| PROC

; 37   : {

  00000		 |$LN6@EmacAllocA|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M51771|
  00008	e1a05000	 mov         r5, r0

; 38   :     PMINIPORT_ADAPTER     pTempAdapter;
; 39   :     NDIS_STATUS           Status;
; 40   : 
; 41   :     DEBUGMSG(DBG_FUNC, (L"--> NICAllocAdapter\r\n"));
; 42   : 
; 43   :     *pAdapter = NULL;
; 44   : 
; 45   :     /* Allocate memory for the adapter block now. */
; 46   : 
; 47   :     Status = NdisAllocateMemory(
; 48   :                 (PVOID *)&pTempAdapter,
; 49   :                 sizeof(MINIPORT_ADAPTER),
; 50   :                 0,              /* System space cached memory */
; 51   :                 g_HighestAcceptedMax);

  0000c	e59f3070	 ldr         r3, [pc, #0x70]
  00010	e3a02000	 mov         r2, #0
  00014	e5852000	 str         r2, [r5]
  00018	e5931004	 ldr         r1, [r3, #4]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e3a02000	 mov         r2, #0
  00024	e58d1000	 str         r1, [sp]
  00028	e3a01e3a	 mov         r1, #0x3A, 28
  0002c	e28d0004	 add         r0, sp, #4
  00030	eb000000	 bl          NdisAllocateMemory
  00034	e1a04000	 mov         r4, r0

; 52   : 
; 53   :     if (Status != NDIS_STATUS_SUCCESS)
; 54   :     {
; 55   :         DEBUGMSG(DBG_ERR, (L"EMAC:Initialize: NdisAllocateMemory(EMAC) failed\r\n"));
; 56   :     }
; 57   : 
; 58   :     /* Clear out the adapter block, which sets all default values to FALSE,
; 59   :      * or NULL.
; 60   :      */
; 61   : 
; 62   :     NdisZeroMemory (pTempAdapter, sizeof(MINIPORT_ADAPTER));

  00038	e59d0004	 ldr         r0, [sp, #4]
  0003c	e3a02e3a	 mov         r2, #0x3A, 28
  00040	e3a01000	 mov         r1, #0
  00044	eb000000	 bl          memset

; 63   : 
; 64   :     /* Allocating the spin locks */
; 65   : 
; 66   :     NdisAllocateSpinLock(&pTempAdapter->m_Lock);

  00048	e59d3004	 ldr         r3, [sp, #4]
  0004c	e2830058	 add         r0, r3, #0x58
  00050	eb000000	 bl          NdisAllocateSpinLock

; 67   :     NdisAllocateSpinLock(&pTempAdapter->m_SendLock);

  00054	e59d3004	 ldr         r3, [sp, #4]
  00058	e283006c	 add         r0, r3, #0x6C
  0005c	eb000000	 bl          NdisAllocateSpinLock

; 68   :     NdisAllocateSpinLock(&pTempAdapter->m_RcvLock);

  00060	e59d3004	 ldr         r3, [sp, #4]
  00064	e2830080	 add         r0, r3, #0x80
  00068	eb000000	 bl          NdisAllocateSpinLock

; 69   : 
; 70   : 
; 71   :     *pAdapter = pTempAdapter;

  0006c	e59d3004	 ldr         r3, [sp, #4]

; 72   : 
; 73   :     DEBUGMSG(DBG_FUNC, (L"<-- NICAllocAdapter Status=%x\r\n", Status));
; 74   : 
; 75   :     return Status;
; 76   : 
; 77   : }

  00070	e1a00004	 mov         r0, r4
  00074	e5853000	 str         r3, [r5]
  00078	e28dd008	 add         sp, sp, #8
  0007c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN7@EmacAllocA|
  00084		 |$LN8@EmacAllocA|
  00084	00000000	 DCD         |g_HighestAcceptedMax|
  00088		 |$M51772|

			 ENDP  ; |EmacAllocAdapterBlock|

	EXPORT	|EmacFreeAdapter|
	IMPORT	|g_EmacMemLayout|
	IMPORT	|NdisFreeSpinLock|
	IMPORT	|NdisMUnmapIoSpace|
	IMPORT	|NdisFreeMemory|
	IMPORT	|NdisFreeBufferPool|
	IMPORT	|NdisFreePacketPool|
	IMPORT	|NdisFreePacket|
	IMPORT	|NdisFreeBuffer|
	IMPORT	|NdisMDeregisterInterrupt|

  00000			 AREA	 |.pdata|, PDATA
|$T51794| DCD	|$LN29@EmacFreeAd|
	DCD	0x40008b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EmacFreeAdapter| PROC

; 89   : {

  00000		 |$LN29@EmacFreeAd|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M51791|
  00004	e1a05000	 mov         r5, r0

; 90   :     PEMAC_RXPKTS    pNextPkt;
; 91   :     PEMAC_RXPKTS    pCurPkt;
; 92   : 	PEMAC_RXBUFS	pNextBuf;
; 93   : 	PEMAC_RXBUFS	pCurBuf;
; 94   :     UINT            Count;
; 95   : 
; 96   :     DEBUGMSG(DBG_FUNC, (L"--> EmacFreeAdapter\r\n"));
; 97   : 
; 98   :     /*
; 99   :     * Check if the Interrupt has been registered, if so then deregister the
; 100  :     * interrupt for the adapter. Rest, all deallocation is done in reverse way
; 101  :     */
; 102  :     if(pAdapter->m_HwStatus != NdisHardwareStatusReset)

  00008	e59531a0	 ldr         r3, [r5, #0x1A0]
  0000c	e3530002	 cmp         r3, #2
  00010	0a00000d	 beq         |$LN17@EmacFreeAd|

; 103  :     {
; 104  :         if(pAdapter->m_RxIntrVector)

  00014	e1d53eb8	 ldrh        r3, [r5, #0xE8]
  00018	e3530000	 cmp         r3, #0

; 105  :         {
; 106  :             NdisMDeregisterInterrupt(&pAdapter->m_RxIntrInfo);

  0001c	12850098	 addne       r0, r5, #0x98
  00020	1b000000	 blne        NdisMDeregisterInterrupt

; 107  :         }
; 108  :         if(pAdapter->m_TxIntrVector)

  00024	e2853c01	 add         r3, r5, #1, 24
  00028	e1d333bc	 ldrh        r3, [r3, #0x3C]
  0002c	e3530000	 cmp         r3, #0

; 109  :         {
; 110  :             NdisMDeregisterInterrupt(&pAdapter->m_TxIntrInfo);

  00030	128500ec	 addne       r0, r5, #0xEC
  00034	1b000000	 blne        NdisMDeregisterInterrupt

; 111  :         }
; 112  :         if(pAdapter->m_LinkIntrVector)

  00038	e2853c01	 add         r3, r5, #1, 24
  0003c	e1d339b0	 ldrh        r3, [r3, #0x90]
  00040	e3530000	 cmp         r3, #0

; 113  :         {
; 114  :             NdisMDeregisterInterrupt(&pAdapter->m_LinkIntrInfo);

  00044	12850d05	 addne       r0, r5, #5, 26
  00048	1b000000	 blne        NdisMDeregisterInterrupt
  0004c		 |$LN17@EmacFreeAd|

; 115  :         }
; 116  :     }
; 117  : 
; 118  : 	pNextBuf = pAdapter->m_pBaseRxBufs;
; 119  : 	for (Count = 0; Count < pAdapter->m_NumEmacRxBufDesc ; Count++)

  0004c	e1d532b6	 ldrh        r3, [r5, #0x26]
  00050	e5956030	 ldr         r6, [r5, #0x30]
  00054	e3a07000	 mov         r7, #0
  00058	e3530000	 cmp         r3, #0
  0005c	e3a08000	 mov         r8, #0
  00060	0a000009	 beq         |$LN14@EmacFreeAd|
  00064		 |$LL16@EmacFreeAd|

; 120  : 	{
; 121  : 		pCurBuf = pNextBuf;
; 122  : 
; 123  : 		/* Free buffers from buffer pool */
; 124  : 		NdisFreeBuffer((PNDIS_BUFFER)pNextBuf->m_BufHandle);

  00064	e5960004	 ldr         r0, [r6, #4]
  00068	e1a04006	 mov         r4, r6
  0006c	eb000000	 bl          NdisFreeBuffer

; 125  : 
; 126  : 		pNextBuf->m_BufHandle = NULL;

  00070	e5868004	 str         r8, [r6, #4]

; 127  : 
; 128  : 		pNextBuf++;

  00074	e2866018	 add         r6, r6, #0x18

; 129  : 		pCurBuf->m_pNext = pNextBuf;

  00078	e5846000	 str         r6, [r4]
  0007c	e1d532b6	 ldrh        r3, [r5, #0x26]
  00080	e2877001	 add         r7, r7, #1
  00084	e1570003	 cmp         r7, r3
  00088	3afffff5	 bcc         |$LL16@EmacFreeAd|
  0008c		 |$LN14@EmacFreeAd|

; 130  : 	}
; 131  : 
; 132  :     if(NULL != pAdapter->m_pBaseRxPkts)

  0008c	e595302c	 ldr         r3, [r5, #0x2C]
  00090	e1b06003	 movs        r6, r3
  00094	0a00000d	 beq         |$LN10@EmacFreeAd|

; 133  :     {
; 134  :         pNextPkt = pAdapter->m_pBaseRxPkts;
; 135  :         for (Count = 0; Count < pAdapter->m_NumRxIndicatePkts ; Count++)

  00098	e1d532b4	 ldrh        r3, [r5, #0x24]
  0009c	e3a07000	 mov         r7, #0
  000a0	e3530000	 cmp         r3, #0
  000a4	0a000009	 beq         |$LN10@EmacFreeAd|
  000a8		 |$LL12@EmacFreeAd|

; 136  :         {
; 137  :             pCurPkt = pNextPkt;
; 138  : 
; 139  :             /* Free packets from packet pool */
; 140  :             NdisFreePacket((PNDIS_PACKET)pNextPkt->m_PktHandle);

  000a8	e5960004	 ldr         r0, [r6, #4]
  000ac	e1a04006	 mov         r4, r6
  000b0	eb000000	 bl          NdisFreePacket

; 141  : 
; 142  :             pNextPkt->m_PktHandle = NULL;

  000b4	e5868004	 str         r8, [r6, #4]

; 143  : 
; 144  :             pNextPkt++;

  000b8	e2866014	 add         r6, r6, #0x14

; 145  :             pCurPkt->m_pNext = pNextPkt;

  000bc	e5846000	 str         r6, [r4]
  000c0	e1d532b4	 ldrh        r3, [r5, #0x24]
  000c4	e2877001	 add         r7, r7, #1
  000c8	e1570003	 cmp         r7, r3
  000cc	3afffff5	 bcc         |$LL12@EmacFreeAd|
  000d0		 |$LN10@EmacFreeAd|

; 146  :         }
; 147  :     }
; 148  : 
; 149  :     if(NULL != pAdapter->m_RecvPacketPool)

  000d0	e595301c	 ldr         r3, [r5, #0x1C]
  000d4	e3530000	 cmp         r3, #0
  000d8	0a000002	 beq         |$LN9@EmacFreeAd|

; 150  :     {
; 151  :         NdisFreePacketPool(pAdapter->m_RecvPacketPool);

  000dc	e1a00003	 mov         r0, r3
  000e0	eb000000	 bl          NdisFreePacketPool

; 152  :         pAdapter->m_RecvPacketPool = NULL;

  000e4	e585801c	 str         r8, [r5, #0x1C]
  000e8		 |$LN9@EmacFreeAd|

; 153  :     }
; 154  : 
; 155  :     NdisFreeBufferPool(pAdapter->m_RecvBufferPool);

  000e8	e5950020	 ldr         r0, [r5, #0x20]
  000ec	eb000000	 bl          NdisFreeBufferPool

; 156  :     pAdapter->m_RecvBufferPool = NULL;
; 157  : 
; 158  : 	if(pAdapter->m_HwStatus != NdisHardwareStatusReset)

  000f0	e59531a0	 ldr         r3, [r5, #0x1A0]
  000f4	e5858020	 str         r8, [r5, #0x20]
  000f8	e3530002	 cmp         r3, #2
  000fc	0a000047	 beq         |$LN8@EmacFreeAd|

; 159  : 	{
; 160  : 		if(NULL != pAdapter->m_pBaseRxPkts)

  00100	e595302c	 ldr         r3, [r5, #0x2C]
  00104	e1b00003	 movs        r0, r3
  00108	0a000005	 beq         |$LN7@EmacFreeAd|

; 161  : 		{
; 162  : 			NdisFreeMemory(pAdapter->m_pBaseRxPkts,
; 163  : 						pAdapter->m_NumRxIndicatePkts * sizeof(EMAC_RXPKTS),
; 164  : 						0);

  0010c	e1d532b4	 ldrh        r3, [r5, #0x24]
  00110	e3a02000	 mov         r2, #0
  00114	e0833103	 add         r3, r3, r3, lsl #2
  00118	e1a01103	 mov         r1, r3, lsl #2
  0011c	eb000000	 bl          NdisFreeMemory

; 165  : 
; 166  : 			pAdapter->m_pBaseRxPkts = NULL;

  00120	e585802c	 str         r8, [r5, #0x2C]
  00124		 |$LN7@EmacFreeAd|

; 167  : 		}
; 168  : 
; 169  : 		if(NULL != pAdapter->m_pBaseRxBufs)

  00124	e5953030	 ldr         r3, [r5, #0x30]
  00128	e1b00003	 movs        r0, r3
  0012c	0a000005	 beq         |$LN6@EmacFreeAd|

; 170  : 		{
; 171  : 			NdisFreeMemory(pAdapter->m_pBaseRxBufs,
; 172  : 					pAdapter->m_NumEmacRxBufDesc * sizeof(EMAC_RXBUFS),
; 173  : 					0);

  00130	e1d532b6	 ldrh        r3, [r5, #0x26]
  00134	e3a02000	 mov         r2, #0
  00138	e0833083	 add         r3, r3, r3, lsl #1
  0013c	e1a01183	 mov         r1, r3, lsl #3
  00140	eb000000	 bl          NdisFreeMemory

; 174  : 
; 175  : 			pAdapter->m_pBaseRxBufs = NULL;

  00144	e5858030	 str         r8, [r5, #0x30]
  00148		 |$LN6@EmacFreeAd|

; 176  : 		}
; 177  : 
; 178  : 		if(NULL != (VOID *)pAdapter->m_RxBufsBase)

  00148	e595303c	 ldr         r3, [r5, #0x3C]
  0014c	e1b01003	 movs        r1, r3
  00150	0a000005	 beq         |$LN5@EmacFreeAd|

; 179  : 		{
; 180  : 			NdisMUnmapIoSpace(pAdapter->m_AdapterHandle,
; 181  : 					(PVOID)pAdapter->m_RxBufsBase,
; 182  : 					(pAdapter->m_NumEmacRxBufDesc * EMAC_MAX_PKT_BUFFER_SIZE)
; 183  : 					);

  00154	e1d532b6	 ldrh        r3, [r5, #0x26]
  00158	e5950000	 ldr         r0, [r5]
  0015c	e0833083	 add         r3, r3, r3, lsl #1
  00160	e1a02483	 mov         r2, r3, lsl #9
  00164	eb000000	 bl          NdisMUnmapIoSpace

; 184  : 
; 185  : 			pAdapter->m_RxBufsBase = 0;

  00168	e585803c	 str         r8, [r5, #0x3C]
  0016c		 |$LN5@EmacFreeAd|

; 186  : 		}
; 187  : 
; 188  : 		if(NULL != pAdapter->m_pBaseTxPkts)

  0016c	e5953034	 ldr         r3, [r5, #0x34]
  00170	e1b00003	 movs        r0, r3
  00174	0a000005	 beq         |$LN4@EmacFreeAd|

; 189  : 		{
; 190  : 			NdisFreeMemory(pAdapter->m_pBaseTxPkts,
; 191  : 					pAdapter->m_MaxPacketPerTransmit * sizeof(EMAC_TXPKT),
; 192  : 					0);

  00178	e1d532b8	 ldrh        r3, [r5, #0x28]
  0017c	e3a02000	 mov         r2, #0
  00180	e0833103	 add         r3, r3, r3, lsl #2
  00184	e1a01103	 mov         r1, r3, lsl #2
  00188	eb000000	 bl          NdisFreeMemory

; 193  : 
; 194  : 			pAdapter->m_pBaseTxPkts = NULL;

  0018c	e5858034	 str         r8, [r5, #0x34]
  00190		 |$LN4@EmacFreeAd|

; 195  : 		}
; 196  : 
; 197  : 		if(NULL != pAdapter->m_pBaseTxBufs)

  00190	e5953038	 ldr         r3, [r5, #0x38]
  00194	e1b00003	 movs        r0, r3
  00198	0a000005	 beq         |$LN3@EmacFreeAd|

; 198  : 		{
; 199  : 			NdisFreeMemory(pAdapter->m_pBaseTxBufs,
; 200  : 				pAdapter->m_MaxTxEmacBufs * sizeof(EMAC_TXBUF),
; 201  : 				0);

  0019c	e1d532ba	 ldrh        r3, [r5, #0x2A]
  001a0	e3a02000	 mov         r2, #0
  001a4	e0833083	 add         r3, r3, r3, lsl #1
  001a8	e1a01183	 mov         r1, r3, lsl #3
  001ac	eb000000	 bl          NdisFreeMemory

; 202  : 
; 203  : 			pAdapter->m_pBaseTxBufs = NULL;

  001b0	e5858038	 str         r8, [r5, #0x38]
  001b4		 |$LN3@EmacFreeAd|

; 204  : 		}
; 205  : 
; 206  : 		if(NULL != (VOID *)pAdapter->m_TxBufBase)

  001b4	e5953048	 ldr         r3, [r5, #0x48]
  001b8	e3530000	 cmp         r3, #0
  001bc	0a000005	 beq         |$LN2@EmacFreeAd|

; 207  : 		{
; 208  : 			NdisMUnmapIoSpace(pAdapter->m_AdapterHandle,
; 209  : 					(PVOID)pAdapter->m_TxBufBase,
; 210  : 					(EMAC_MAX_TX_BUFFERS * EMAC_MAX_ETHERNET_PKT_SIZE)
; 211  : 					);

  001c0	e5950000	 ldr         r0, [r5]
  001c4	e3a02a5e	 mov         r2, #0x5E, 20
  001c8	e3822c0a	 orr         r2, r2, #0xA, 24
  001cc	e1a01003	 mov         r1, r3
  001d0	eb000000	 bl          NdisMUnmapIoSpace

; 212  : 
; 213  : 			pAdapter->m_TxBufBase = 0;

  001d4	e5858048	 str         r8, [r5, #0x48]
  001d8		 |$LN2@EmacFreeAd|

; 214  : 		}
; 215  : 
; 216  : 		NdisFreeSpinLock(&pAdapter->m_Lock);

  001d8	e2850058	 add         r0, r5, #0x58
  001dc	eb000000	 bl          NdisFreeSpinLock

; 217  : 		NdisFreeSpinLock(&pAdapter->m_SendLock);

  001e0	e285006c	 add         r0, r5, #0x6C
  001e4	eb000000	 bl          NdisFreeSpinLock

; 218  : 		NdisFreeSpinLock(&pAdapter->m_RcvLock);

  001e8	e2850080	 add         r0, r5, #0x80
  001ec	eb000000	 bl          NdisFreeSpinLock

; 219  : 
; 220  : 		if(pAdapter->m_EmacIRamBase)

  001f0	e595300c	 ldr         r3, [r5, #0xC]
  001f4	e1b01003	 movs        r1, r3
  001f8	0a000004	 beq         |$LN1@EmacFreeAd|

; 221  : 		{
; 222  : 			NdisMUnmapIoSpace(pAdapter->m_AdapterHandle,
; 223  : 							  (PVOID)pAdapter->m_EmacIRamBase,
; 224  : 							  g_EmacMemLayout.EMAC_TOTAL_MEMORY);

  001fc	e59f3024	 ldr         r3, [pc, #0x24]
  00200	e5950000	 ldr         r0, [r5]
  00204	e5932010	 ldr         r2, [r3, #0x10]
  00208	eb000000	 bl          NdisMUnmapIoSpace

; 225  : 
; 226  : 			pAdapter->m_EmacIRamBase = 0;

  0020c	e585800c	 str         r8, [r5, #0xC]
  00210		 |$LN1@EmacFreeAd|

; 227  : 		}
; 228  : 
; 229  : 		/* Finally free adapter memory itself  */
; 230  : 		NdisFreeMemory((PVOID)pAdapter,
; 231  : 					sizeof(MINIPORT_ADAPTER),
; 232  : 					0);

  00210	e3a02000	 mov         r2, #0
  00214	e3a01e3a	 mov         r1, #0x3A, 28
  00218	e1a00005	 mov         r0, r5
  0021c	eb000000	 bl          NdisFreeMemory
  00220		 |$LN8@EmacFreeAd|

; 233  : 	}
; 234  : 
; 235  :     DEBUGMSG(DBG_FUNC, (L"<-- EmacFreeAdapter \r\n"));
; 236  : }

  00220	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00224	e12fff1e	 bx          lr
  00228		 |$LN30@EmacFreeAd|
  00228		 |$LN31@EmacFreeAd|
  00228	00000000	 DCD         |g_EmacMemLayout|
  0022c		 |$M51792|

			 ENDP  ; |EmacFreeAdapter|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|EmacReadEEProm|
	EXPORT	|??_C@_1HC@GJGDDJAL@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?8?$AAs?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AA?$CF?$AA0?$AA2?$AAX?$AA?3?$AA?$CF?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@JPGELFIC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|KernelIoControl|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T51813| DCD	|$LN6@EmacReadEE|
	DCD	0xc0003e02

  00000			 AREA	 |.xdata|, DATA
|$T51809| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@GJGDDJAL@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?8?$AAs?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AA?$CF?$AA0?$AA2?$AAX?$AA?3?$AA?$CF?$AA0@| DCB "A"
	DCB	0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "'", 0x0, "s", 0x0, " ", 0x0, "M", 0x0, "A", 0x0, "C"
	DCB	0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, ":", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, ":", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "X", 0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X"
	DCB	0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@JPGELFIC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "M", 0x0, "A", 0x0, "C", 0x0, " "
	DCB	0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T51809|

  00008		 |EmacReadEEProm| PROC

; 248  : {

  00008		 |$LN6@EmacReadEE|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M51810|
  00010	e1a08000	 mov         r8, r0
  00014	e59f30e0	 ldr         r3, [pc, #0xE0]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3018	 str         r3, [sp, #0x18]

; 249  :     
; 250  :     BOOL    RetVal = FALSE;
; 251  :     UINT8   ReadBuffer[ETH_LENGTH_OF_ADDRESS] = {0x20,0x20,0x30,0x30,0x40,0x40};    
; 252  :     DWORD   dwKernelRet = 0;
; 253  : 
; 254  :     /* Get the MAC address from the kernel */
; 255  :     if (!KernelIoControl(IOCTL_HAL_GET_MAC_ADDRESS,
; 256  :                          NULL, 0, &ReadBuffer, sizeof(ReadBuffer), &dwKernelRet))

  00020	e28de00c	 add         lr, sp, #0xC
  00024	e59f00cc	 ldr         r0, [pc, #0xCC]
  00028	e58de004	 str         lr, [sp, #4]
  0002c	e3a0e006	 mov         lr, #6
  00030	e3a04020	 mov         r4, #0x20
  00034	e3a05020	 mov         r5, #0x20
  00038	e3a06030	 mov         r6, #0x30
  0003c	e3a07030	 mov         r7, #0x30
  00040	e3a09040	 mov         r9, #0x40
  00044	e3a0a040	 mov         r10, #0x40
  00048	e3a0b000	 mov         r11, #0
  0004c	e28d3010	 add         r3, sp, #0x10
  00050	e3a02000	 mov         r2, #0
  00054	e3a01000	 mov         r1, #0
  00058	e58de000	 str         lr, [sp]
  0005c	e5cd4010	 strb        r4, [sp, #0x10]
  00060	e5cd5011	 strb        r5, [sp, #0x11]
  00064	e5cd6012	 strb        r6, [sp, #0x12]
  00068	e5cd7013	 strb        r7, [sp, #0x13]
  0006c	e5cd9014	 strb        r9, [sp, #0x14]
  00070	e5cda015	 strb        r10, [sp, #0x15]
  00074	e58db00c	 str         r11, [sp, #0xC]
  00078	eb000000	 bl          KernelIoControl
  0007c	e3500000	 cmp         r0, #0
  00080	1a000005	 bne         |$LN1@EmacReadEE|

; 257  :     {
; 258  :         RETAILMSG( TRUE,(TEXT("Failed to read MAC address\r\n")));

  00084	e59f0068	 ldr         r0, [pc, #0x68]
  00088	eb000000	 bl          NKDbgPrintfW

; 259  :         return RetVal;

  0008c	e59d0018	 ldr         r0, [sp, #0x18]
  00090	eb000000	 bl          __security_check_cookie
  00094	e3a00000	 mov         r0, #0
  00098	ea000011	 b           |$LN2@EmacReadEE|
  0009c		 |$LN1@EmacReadEE|

; 260  :     }
; 261  : 
; 262  :     /* Fill to Adapter structure */
; 263  :     memcpy(pAdapter->m_MACAddress, ReadBuffer, ETH_LENGTH_OF_ADDRESS);

  0009c	e59de010	 ldr         lr, [sp, #0x10]
  000a0	e1dd41b4	 ldrh        r4, [sp, #0x14]

; 264  : 
; 265  :     RETAILMSG( TRUE,(TEXT("Adapter's MAC address is %02X:%02X:%02X:%02X:%02X:%02X\r\n"),
; 266  :                 ReadBuffer[0], ReadBuffer[1], ReadBuffer[2],
; 267  :                 ReadBuffer[3], ReadBuffer[4], ReadBuffer[5] ));

  000a4	e5dd5015	 ldrb        r5, [sp, #0x15]
  000a8	e5dd6014	 ldrb        r6, [sp, #0x14]
  000ac	e5dd7013	 ldrb        r7, [sp, #0x13]
  000b0	e5dd3012	 ldrb        r3, [sp, #0x12]
  000b4	e5dd2011	 ldrb        r2, [sp, #0x11]
  000b8	e5dd1010	 ldrb        r1, [sp, #0x10]
  000bc	e59f002c	 ldr         r0, [pc, #0x2C]
  000c0	e588e014	 str         lr, [r8, #0x14]
  000c4	e1c841b8	 strh        r4, [r8, #0x18]
  000c8	e58d5008	 str         r5, [sp, #8]
  000cc	e58d6004	 str         r6, [sp, #4]
  000d0	e58d7000	 str         r7, [sp]
  000d4	eb000000	 bl          NKDbgPrintfW

; 268  :    
; 269  :     RetVal = TRUE;
; 270  : 
; 271  :    return (RetVal);

  000d8	e59d0018	 ldr         r0, [sp, #0x18]
  000dc	eb000000	 bl          __security_check_cookie
  000e0	e3a00001	 mov         r0, #1
  000e4		 |$LN2@EmacReadEE|

; 272  : }

  000e4	e28dd01c	 add         sp, sp, #0x1C
  000e8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000ec	e12fff1e	 bx          lr
  000f0		 |$LN7@EmacReadEE|
  000f0		 |$LN8@EmacReadEE|
  000f0	00000000	 DCD         |??_C@_1HC@GJGDDJAL@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?8?$AAs?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAi?$AAs?$AA?5?$AA?$CF?$AA0?$AA2?$AAX?$AA?3?$AA?$CF?$AA0@|
  000f4		 |$LN9@EmacReadEE|
  000f4	00000000	 DCD         |??_C@_1DK@JPGELFIC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  000f8		 |$LN10@EmacReadEE|
  000f8	01011020	 DCD         0x1011020
  000fc		 |$LN11@EmacReadEE|
  000fc	00000000	 DCD         |__security_cookie|
  00100		 |$M51811|

			 ENDP  ; |EmacReadEEProm|

	EXPORT	|NICReadAdapterInfo|
	EXPORT	|??_C@_15BMCNAON@?$AAR?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_15NHJLDDPA@?$AAT?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19ECFIEPNF@?$AAM?$AAI?$AAS?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@JNLHMBE@?$AAE?$AAm?$AAa?$AAc?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@FEBAGMNM@?$AAE?$AAM?$AAA?$AAC?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NdisCloseConfiguration|
	IMPORT	|AllocPhysMem|
	IMPORT	|GetIrqByDevice|
	IMPORT	|SOCGetEMACDevice|
	IMPORT	|NdisReadConfiguration|
	IMPORT	|NdisOpenConfiguration|

  00000			 AREA	 |.pdata|, PDATA
|$T51834| DCD	|$LN13@NICReadAda|
	DCD	0x40006b02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15BMCNAON@?$AAR?$AAX?$AA?$AA@| DCB "R", 0x0, "X", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15NHJLDDPA@?$AAT?$AAX?$AA?$AA@| DCB "T", 0x0, "X", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19ECFIEPNF@?$AAM?$AAI?$AAS?$AAC?$AA?$AA@| DCB "M", 0x0, "I", 0x0, "S"
	DCB	0x0, "C", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@JNLHMBE@?$AAE?$AAm?$AAa?$AAc?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@FEBAGMNM@?$AAE?$AAM?$AAA?$AAC?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?$AA@| DCB "E"
	DCB	0x0, "M", 0x0, "A", 0x0, "C", 0x0, "B", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, "B", 0x0, "a", 0x0, "s"
	DCB	0x0, "e", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NICReadAdapterInfo| PROC

; 287  : {

  00000		 |$LN13@NICReadAda|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd024	 sub         sp, sp, #0x24
  00008		 |$M51831|
  00008	e1a02001	 mov         r2, r1
  0000c	e1a05000	 mov         r5, r0

; 288  :     DWORD                               phys = 0;
; 289  :     DWORD                               dwEmacIndex = 0;
; 290  :     NDIS_STATUS                         Status = NDIS_STATUS_SUCCESS;
; 291  :     NDIS_HANDLE                         ConfigurationHandle;
; 292  :     PNDIS_CONFIGURATION_PARAMETER       pReturnedValue;
; 293  :     NDIS_STRING                         EmacDeviceRegName = NDIS_STRING_CONST("EmacDevice");
; 294  :     NDIS_STRING                         RxIntRegName = NDIS_STRING_CONST("RxIntrNum");
; 295  :     NDIS_STRING                         TxIntRegName = NDIS_STRING_CONST("TxIntrNum");
; 296  :     NDIS_STRING                         LinkIntRegName = NDIS_STRING_CONST("LinkIntrNum");
; 297  :     NDIS_STRING                         PhysBufRegName = NDIS_STRING_CONST("EMACBufferBase");

  00010	e59f1190	 ldr         r1, [pc, #0x190]
  00014	e59f3188	 ldr         r3, [pc, #0x188]
  00018	e3a0e000	 mov         lr, #0
  0001c	e58d1020	 str         r1, [sp, #0x20]
  00020	e3a06000	 mov         r6, #0
  00024	e3a07014	 mov         r7, #0x14
  00028	e3a08016	 mov         r8, #0x16
  0002c	e3a0901c	 mov         r9, #0x1C
  00030	e3a0a01e	 mov         r10, #0x1E

; 298  : 
; 299  :     DEBUGMSG(DBG_FUNC, (L"--> NICReadAdapterInfo\r\n"));
; 300  : 
; 301  :     /* Open the registry for this adapter */
; 302  :     NdisOpenConfiguration(
; 303  :         &Status,
; 304  :         &ConfigurationHandle,
; 305  :         WrapperConfigurationContext);

  00034	e28d1010	 add         r1, sp, #0x10
  00038	e28d0004	 add         r0, sp, #4
  0003c	e58d3018	 str         r3, [sp, #0x18]
  00040	e58de008	 str         lr, [sp, #8]
  00044	e3a04000	 mov         r4, #0
  00048	e58d6004	 str         r6, [sp, #4]
  0004c	e1cd71b4	 strh        r7, [sp, #0x14]
  00050	e1cd81b6	 strh        r8, [sp, #0x16]
  00054	e1cd91bc	 strh        r9, [sp, #0x1C]
  00058	e1cda1be	 strh        r10, [sp, #0x1E]
  0005c	eb000000	 bl          NdisOpenConfiguration

; 306  : 
; 307  :     if (Status != NDIS_STATUS_SUCCESS)

  00060	e59d0004	 ldr         r0, [sp, #4]
  00064	e3500000	 cmp         r0, #0

; 308  :     {
; 309  :         DEBUGMSG(DBG_WARN, (L"NdisOpenConfiguration failed\r\n"));
; 310  :         return Status;

  00068	1a000047	 bne         |$LN8@NICReadAda|

; 311  :     }
; 312  :  
; 313  :     /* Get the configuration value for a specific parameter for EMAC device number */    
; 314  :     NdisReadConfiguration(&Status, &pReturnedValue, ConfigurationHandle,
; 315  :                           &EmacDeviceRegName, NdisParameterInteger);

  0006c	e59d2010	 ldr         r2, [sp, #0x10]
  00070	e3a06000	 mov         r6, #0
  00074	e28d3014	 add         r3, sp, #0x14
  00078	e28d100c	 add         r1, sp, #0xC
  0007c	e28d0004	 add         r0, sp, #4
  00080	e58d6000	 str         r6, [sp]
  00084	eb000000	 bl          NdisReadConfiguration

; 316  :     if (Status == NDIS_STATUS_SUCCESS)

  00088	e59d3004	 ldr         r3, [sp, #4]
  0008c	e3530000	 cmp         r3, #0

; 317  :     {        
; 318  :         dwEmacIndex = pReturnedValue->ParameterData.IntegerData;

  00090	059d300c	 ldreq       r3, [sp, #0xC]
  00094	05934004	 ldreq       r4, [r3, #4]

; 319  :     }
; 320  :     pAdapter->m_device = SOCGetEMACDevice(dwEmacIndex);

  00098	e1a00004	 mov         r0, r4
  0009c	eb000000	 bl          SOCGetEMACDevice

; 321  : 
; 322  : #if 0
; 323  :     /* Get the configuration value for a specific parameter for Interrupt number */
; 324  :     NdisReadConfiguration(&Status, &pReturnedValue, ConfigurationHandle,
; 325  :                           &RxIntRegName, NdisParameterInteger);
; 326  : 
; 327  :     if (Status != NDIS_STATUS_SUCCESS)
; 328  :     {
; 329  :         ERRORMSG(TRUE, (L"Failed to read Interrupt number for EMAC.\r\n"));
; 330  :         return Status;
; 331  :     }
; 332  :     else
; 333  :     {
; 334  :         RETAILMSG(FALSE, (L"NICReadAdapterInfo: Successfull read Int no.\r\n"));
; 335  :     }
; 336  : 
; 337  :      /* Populate the interrupt vector */
; 338  :     pAdapter->m_RxIntrVector = (USHORT)pReturnedValue->ParameterData.IntegerData;
; 339  :     
; 340  :     NdisReadConfiguration(&Status, &pReturnedValue, ConfigurationHandle,
; 341  :                           &TxIntRegName, NdisParameterInteger);
; 342  : 
; 343  :     if (Status != NDIS_STATUS_SUCCESS)
; 344  :     {
; 345  :         ERRORMSG(TRUE, (L"Failed to read Interrupt number for EMAC.\r\n"));
; 346  :         return Status;
; 347  :     }
; 348  :     else
; 349  :     {
; 350  :         RETAILMSG(FALSE, (L"NICReadAdapterInfo: Successfull read Int no.\r\n"));
; 351  :     }
; 352  : 
; 353  :      /* Populate the interrupt vector */
; 354  :     pAdapter->m_TxIntrVector = (USHORT)pReturnedValue->ParameterData.IntegerData;
; 355  :     
; 356  :     NdisReadConfiguration(&Status, &pReturnedValue, ConfigurationHandle,
; 357  :                           &LinkIntRegName, NdisParameterInteger);
; 358  : 
; 359  :     if (Status != NDIS_STATUS_SUCCESS)
; 360  :     {
; 361  :         ERRORMSG(TRUE, (L"Failed to read Interrupt number for EMAC.\r\n"));
; 362  :         return Status;
; 363  :     }
; 364  :     else
; 365  :     {
; 366  :         RETAILMSG(FALSE, (L"NICReadAdapterInfo: Successfull read Int no.\r\n"));
; 367  :     }
; 368  : 
; 369  :      /* Populate the interrupt vector */
; 370  :     pAdapter->m_LinkIntrVector = (USHORT)pReturnedValue->ParameterData.IntegerData;
; 371  : #else
; 372  :     pAdapter->m_RxIntrVector = (USHORT) GetIrqByDevice(pAdapter->m_device,L"RX");

  000a0	e59f10f8	 ldr         r1, [pc, #0xF8]
  000a4	e1a03000	 mov         r3, r0
  000a8	e5853094	 str         r3, [r5, #0x94]
  000ac	eb000000	 bl          GetIrqByDevice

; 373  :     pAdapter->m_TxIntrVector = (USHORT) GetIrqByDevice(pAdapter->m_device,L"TX");

  000b0	e59f10e4	 ldr         r1, [pc, #0xE4]
  000b4	e1a03000	 mov         r3, r0
  000b8	e5950094	 ldr         r0, [r5, #0x94]
  000bc	e1c53eb8	 strh        r3, [r5, #0xE8]
  000c0	eb000000	 bl          GetIrqByDevice

; 374  :     pAdapter->m_LinkIntrVector = (USHORT) GetIrqByDevice(pAdapter->m_device,L"MISC");

  000c4	e59f10cc	 ldr         r1, [pc, #0xCC]
  000c8	e1a03000	 mov         r3, r0
  000cc	e5950094	 ldr         r0, [r5, #0x94]
  000d0	e2854c01	 add         r4, r5, #1, 24
  000d4	e1c433bc	 strh        r3, [r4, #0x3C]
  000d8	eb000000	 bl          GetIrqByDevice

; 375  : #endif
; 376  : 
; 377  :     /* Get the configuration value for a specific parameter for physical buffers */
; 378  :     NdisReadConfiguration(&Status, &pReturnedValue, ConfigurationHandle,
; 379  :                           &PhysBufRegName, NdisParameterInteger);

  000dc	e59d2010	 ldr         r2, [sp, #0x10]
  000e0	e1a03000	 mov         r3, r0
  000e4	e1c439b0	 strh        r3, [r4, #0x90]
  000e8	e28d301c	 add         r3, sp, #0x1C
  000ec	e28d0004	 add         r0, sp, #4
  000f0	e28d100c	 add         r1, sp, #0xC
  000f4	e58d6000	 str         r6, [sp]
  000f8	eb000000	 bl          NdisReadConfiguration

; 380  : 
; 381  :     if (Status != NDIS_STATUS_SUCCESS)

  000fc	e59d3004	 ldr         r3, [sp, #4]
  00100	e3530000	 cmp         r3, #0
  00104	0a00000c	 beq         |$LN5@NICReadAda|

; 382  :     {
; 383  :         PVOID* pv = NULL;        
; 384  : 
; 385  :         // TODO : Currently hardcoded, should be replace with a real computation
; 386  :         pv = AllocPhysMem(768*1024, PAGE_READWRITE, 0, 0,&phys);

  00108	e28d3008	 add         r3, sp, #8
  0010c	e58d3000	 str         r3, [sp]
  00110	e3a03000	 mov         r3, #0
  00114	e3a02000	 mov         r2, #0
  00118	e3a01004	 mov         r1, #4
  0011c	e3a00703	 mov         r0, #3, 14
  00120	eb000000	 bl          AllocPhysMem

; 387  :         if (pv)
; 388  :         {                
; 389  :             RETAILMSG(FALSE, (L"NICReadAdapterInfo: Allocated Buffers 0x%X.\r\n", (DWORD) phys));
; 390  :             Status = NDIS_STATUS_SUCCESS;
; 391  :         }
; 392  :         else
; 393  :         {
; 394  :             RETAILMSG(FALSE, (L"NICReadAdapterInfo:Unable to get physicall buffers\r\n"));
; 395  :         }
; 396  :     }
; 397  :     else

  00124	e59d2008	 ldr         r2, [sp, #8]
  00128	e3500000	 cmp         r0, #0
  0012c	0a000005	 beq         |$LN2@NICReadAda|
  00130	e3a03000	 mov         r3, #0
  00134	e58d3004	 str         r3, [sp, #4]
  00138	ea000002	 b           |$LN2@NICReadAda|
  0013c		 |$LN5@NICReadAda|

; 398  :     {
; 399  :         RETAILMSG(FALSE, (L"NICReadAdapterInfo: Successfull read phys base as 0x%X.\r\n",
; 400  :                          (DWORD) pReturnedValue->ParameterData.IntegerData));
; 401  :         phys = (DWORD) pReturnedValue->ParameterData.IntegerData;

  0013c	e59d300c	 ldr         r3, [sp, #0xC]
  00140	e5932004	 ldr         r2, [r3, #4]
  00144	e58d2008	 str         r2, [sp, #8]
  00148		 |$LN2@NICReadAda|

; 402  :     }
; 403  : 
; 404  :     /* Populate the local structures with the Buffer base read from registry */
; 405  :     NdisSetPhysicalAddressLow (pAdapter->m_RxBufsBasePa,
; 406  :                                phys);
; 407  :     NdisSetPhysicalAddressHigh (pAdapter->m_RxBufsBasePa, 0);
; 408  : 
; 409  :     NdisSetPhysicalAddressLow (pAdapter->m_TxBufBasePa,
; 410  :                                (phys +
; 411  :                                 (EMAC_MAX_RXBUF_DESCS * (EMAC_MAX_PKT_BUFFER_SIZE))));
; 412  :     NdisSetPhysicalAddressHigh (pAdapter->m_TxBufBasePa, 0);
; 413  : 
; 414  :     DEBUGMSG(DBG_FUNC, (L"pAdapter->m_TxBufBasePa=%p\r\n", pAdapter->m_TxBufBasePa));
; 415  :     DEBUGMSG(DBG_FUNC, (L"pAdapter->m_RxBufsBasePa=%p\r\n", pAdapter->m_RxBufsBasePa));
; 416  : 
; 417  :      /* Close the registry */
; 418  :     NdisCloseConfiguration(ConfigurationHandle);

  00148	e59d0010	 ldr         r0, [sp, #0x10]
  0014c	e2823806	 add         r3, r2, #6, 16
  00150	e5852040	 str         r2, [r5, #0x40]
  00154	e5856044	 str         r6, [r5, #0x44]
  00158	e5853050	 str         r3, [r5, #0x50]
  0015c	e5856054	 str         r6, [r5, #0x54]
  00160	eb000000	 bl          NdisCloseConfiguration

; 419  : 
; 420  :     /* Read MAC information stored in EEPROM */
; 421  : 
; 422  :     if(FALSE == EmacReadEEProm (pAdapter))

  00164	e1a00005	 mov         r0, r5
  00168	eb000000	 bl          EmacReadEEProm
  0016c	e3500000	 cmp         r0, #0

; 423  :     {
; 424  :         DEBUGMSG(DBG_FUNC, (L"Unable to read MAC address from Adapter \r\n"));
; 425  :         return (NDIS_STATUS_FAILURE);
; 426  :     }
; 427  : 
; 428  :     /* Filling Rx information */
; 429  :     pAdapter->m_NumEmacRxBufDesc        =  EMAC_MAX_RXBUF_DESCS;

  00170	13a03c01	 movne       r3, #1, 24
  00174	03a00107	 moveq       r0, #7, 2

; 430  :     pAdapter->m_NumRxIndicatePkts       =  NDIS_INDICATE_PKTS;
; 431  : 
; 432  :     /* Filling Tx information */
; 433  :     pAdapter->m_MaxPacketPerTransmit    = MAX_NUM_PACKETS_PER_SEND;
; 434  :     pAdapter->m_MaxTxEmacBufs           = EMAC_MAX_TXBUF_DESCS;
; 435  : 
; 436  : 
; 437  :     DEBUGMSG(DBG_FUNC, (L"<-- NICReadAdapterInfo, Status=%x\r\n", Status));
; 438  : 
; 439  :     return (Status);

  00178	159d0004	 ldrne       r0, [sp, #4]
  0017c	11c532b6	 strneh      r3, [r5, #0x26]
  00180	11c532b4	 strneh      r3, [r5, #0x24]
  00184	11c532b8	 strneh      r3, [r5, #0x28]
  00188	11c532ba	 strneh      r3, [r5, #0x2A]
  0018c		 |$LN8@NICReadAda|

; 440  : }

  0018c	e28dd024	 add         sp, sp, #0x24
  00190	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00194	e12fff1e	 bx          lr
  00198		 |$LN14@NICReadAda|
  00198		 |$LN15@NICReadAda|
  00198	00000000	 DCD         |??_C@_19ECFIEPNF@?$AAM?$AAI?$AAS?$AAC?$AA?$AA@|
  0019c		 |$LN16@NICReadAda|
  0019c	00000000	 DCD         |??_C@_15NHJLDDPA@?$AAT?$AAX?$AA?$AA@|
  001a0		 |$LN17@NICReadAda|
  001a0	00000000	 DCD         |??_C@_15BMCNAON@?$AAR?$AAX?$AA?$AA@|
  001a4		 |$LN18@NICReadAda|
  001a4	00000000	 DCD         |??_C@_1BG@JNLHMBE@?$AAE?$AAm?$AAa?$AAc?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@|
  001a8		 |$LN19@NICReadAda|
  001a8	00000000	 DCD         |??_C@_1BO@FEBAGMNM@?$AAE?$AAM?$AAA?$AAC?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?$AA@|
  001ac		 |$M51832|

			 ENDP  ; |NICReadAdapterInfo|

	EXPORT	|NICSelfTest|

  00000			 AREA	 |.pdata|, PDATA
|$T51849| DCD	|$LN5@NICSelfTes|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NICSelfTest| PROC

; 452  : {

  00000		 |$LN5@NICSelfTes|
  00000		 |$M51846|

; 453  :     /* TBD */
; 454  : 
; 455  :     return (NDIS_STATUS_SUCCESS);

  00000	e3a00000	 mov         r0, #0

; 456  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M51847|

			 ENDP  ; |NICSelfTest|

	EXPORT	|Emac_MiniportInitialize|
	EXPORT	|??_C@_1HG@FLMCAIKK@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@BKDKNCLO@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAE?$AAt?$AAh?$AAH?$AAw?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@LBFALBHL@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@NDLANGAH@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@CNKJNDFE@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@PNDOGDJ@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAM?$AAa?$AAp?$AAA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@KJACGMBF@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAR?$AAe?$AAa?$AAd@| [ DATA ] ; `string'
	IMPORT	|NICInitializeAdapter|
	IMPORT	|EthHwInit|
	IMPORT	|RequestDevicePads|
	IMPORT	|NdisMRegisterInterrupt|
	IMPORT	|Emac_MiniportDisableInterrupt|
	IMPORT	|NICInitRecv|
	IMPORT	|NICInitSend|
	IMPORT	|NICMapAdapterRegs|
	IMPORT	|NdisMSetAttributesEx|

  00000			 AREA	 |.pdata|, PDATA
|$T51874| DCD	|$LN36@Emac_Minip|
	DCD	0x40008b02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@FLMCAIKK@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "I", 0x0, "C", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@BKDKNCLO@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAE?$AAt?$AAh?$AAH?$AAw?$AAI?$AAn@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "E", 0x0, "t", 0x0, "h", 0x0, "H", 0x0, "w", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@LBFALBHL@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, "P", 0x0, "a", 0x0, "d", 0x0, "s", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@NDLANGAH@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "I", 0x0, "C", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "R", 0x0, "e", 0x0, "c", 0x0, "v", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@CNKJNDFE@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "I", 0x0, "C", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@PNDOGDJ@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAM?$AAa?$AAp?$AAA@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "I", 0x0, "C", 0x0, "M", 0x0, "a", 0x0, "p"
	DCB	0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "s", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@KJACGMBF@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAR?$AAe?$AAa?$AAd@| DCB "E"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "M", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "I", 0x0, "C", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Emac_MiniportInitialize| PROC

; 491  : {

  00000		 |$LN36@Emac_Minip|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M51871|
  00008	e3530000	 cmp         r3, #0

; 492  :     NDIS_STATUS       Status;
; 493  :     PEMAC_ADAPTER     pAdapter = NULL;

  0000c	e3a00000	 mov         r0, #0
  00010	e58d000c	 str         r0, [sp, #0xC]

; 494  :     UINT              Index;
; 495  : 
; 496  :     DEBUGMSG (DBG_FUNC,(L"+Emac_MiniportInitialize()\r\n"));
; 497  : 
; 498  :      do
; 499  :     {
; 500  :         /* Find the media type we support, we
; 501  :          * are checking for 802.3 MediaType.
; 502  :          */
; 503  :         for (Index = 0; Index < MediumArraySize; ++Index)

  00014	e3a0e000	 mov         lr, #0
  00018	0a000006	 beq         |$LN31@Emac_Minip|
  0001c		 |$LL20@Emac_Minip|

; 504  :         {
; 505  :             if (MediumArray[Index] == NIC_MEDIA_TYPE)

  0001c	e5920000	 ldr         r0, [r2]
  00020	e3500000	 cmp         r0, #0
  00024	0a000003	 beq         |$LN31@Emac_Minip|
  00028	e28ee001	 add         lr, lr, #1
  0002c	e15e0003	 cmp         lr, r3
  00030	e2822004	 add         r2, r2, #4
  00034	3afffff8	 bcc         |$LL20@Emac_Minip|
  00038		 |$LN31@Emac_Minip|

; 506  :             {
; 507  :                 break;
; 508  :             }
; 509  :         }
; 510  : 
; 511  :         if (Index == MediumArraySize)

  00038	e15e0003	 cmp         lr, r3
  0003c	03a03167	 moveq       r3, #0x67, 2

; 512  :         {
; 513  :             DEBUGMSG(DBG_WARN, (L"Expected media (%x) is not in MediumArray.\r\n",
; 514  :                                                         NIC_MEDIA_TYPE));
; 515  :             Status = NDIS_STATUS_UNSUPPORTED_MEDIA;

  00040	03835801	 orreq       r5, r3, #1, 16
  00044	0a00006d	 beq         |$LN1@Emac_Minip|

; 516  :             break;
; 517  :         }
; 518  : 
; 519  :         *SelectedMediumIndex = Index;
; 520  : 
; 521  : 
; 522  :         /* Allocate Emac Miniport Adapter structure */
; 523  : 
; 524  :         Status = EmacAllocAdapterBlock(&pAdapter);

  00048	e28d000c	 add         r0, sp, #0xC
  0004c	e581e000	 str         lr, [r1]
  00050	eb000000	 bl          EmacAllocAdapterBlock
  00054	e59d400c	 ldr         r4, [sp, #0xC]
  00058	e1b05000	 movs        r5, r0

; 525  : 
; 526  :         if (Status != NDIS_STATUS_SUCCESS)

  0005c	1a000063	 bne         |$LN21@Emac_Minip|

; 527  :         {
; 528  :             break;
; 529  :         }
; 530  : 
; 531  :         pAdapter->m_AdapterHandle = MiniportAdapterHandle;

  00060	e59d0020	 ldr         r0, [sp, #0x20]

; 532  : 
; 533  :         /* Initialise Hardware status */
; 534  :         pAdapter->m_HwStatus = NdisHardwareStatusNotReady;

  00064	e3a03004	 mov         r3, #4

; 535  : 
; 536  :         /* Inform NDIS of the attributes of our adapter.
; 537  :          * This has to be done before calling NdisMRegisterXxx or NdisXxxx function
; 538  :          * that depends on the information supplied to NdisMSetAttributesEx
; 539  :          * e.g. NdisMAllocateMapRegisters
; 540  :          */
; 541  :         NdisMSetAttributes (
; 542  :             MiniportAdapterHandle,
; 543  :             (NDIS_HANDLE) pAdapter,
; 544  :             TRUE,                    /* True since ours is Bus Master */
; 545  :             NdisInterfaceInternal);  /* We have internal controller */

  00068	e3a06000	 mov         r6, #0
  0006c	e5840000	 str         r0, [r4]
  00070	e58431a0	 str         r3, [r4, #0x1A0]
  00074	e3a03008	 mov         r3, #8
  00078	e3a02000	 mov         r2, #0
  0007c	e1a01004	 mov         r1, r4
  00080	e58d6000	 str         r6, [sp]
  00084	eb000000	 bl          NdisMSetAttributesEx

; 546  : 
; 547  :         /* Reading all relevant information from adapter
; 548  :          * etc. and filling it in to our adapter structure
; 549  :          */
; 550  : 
; 551  :         Status = NICReadAdapterInfo(
; 552  :                     pAdapter,
; 553  :                     WrapperConfigurationContext);

  00088	e59d1024	 ldr         r1, [sp, #0x24]
  0008c	e1a00004	 mov         r0, r4
  00090	eb000000	 bl          NICReadAdapterInfo
  00094	e1b05000	 movs        r5, r0

; 554  : 
; 555  :         if (Status != NDIS_STATUS_SUCCESS)

  00098	0a000002	 beq         |$LN14@Emac_Minip|

; 556  :         {
; 557  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: NICReadAdapterInfo is failed.\r\n"));

  0009c	e59f0184	 ldr         r0, [pc, #0x184]
  000a0	eb000000	 bl          NKDbgPrintfW

; 558  :             break;

  000a4	ea000051	 b           |$LN21@Emac_Minip|
  000a8		 |$LN14@Emac_Minip|

; 559  :         }
; 560  :         /* Allocate all other memory blocks
; 561  :          *
; 562  :          */
; 563  :         Status = NICMapAdapterRegs(pAdapter);

  000a8	e1a00004	 mov         r0, r4
  000ac	eb000000	 bl          NICMapAdapterRegs
  000b0	e1b05000	 movs        r5, r0

; 564  :         if (Status != NDIS_STATUS_SUCCESS)

  000b4	0a000002	 beq         |$LN13@Emac_Minip|

; 565  :         {
; 566  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: NICMapAdapterRegs is failed.\r\n"));

  000b8	e59f0164	 ldr         r0, [pc, #0x164]
  000bc	eb000000	 bl          NKDbgPrintfW
  000c0	ea00004a	 b           |$LN21@Emac_Minip|
  000c4		 |$LN13@Emac_Minip|

; 567  :             break;
; 568  :         }
; 569  : 
; 570  :         /* Init send data structures */
; 571  : 
; 572  :         Status = NICInitSend(pAdapter);

  000c4	e1a00004	 mov         r0, r4
  000c8	eb000000	 bl          NICInitSend
  000cc	e1b05000	 movs        r5, r0

; 573  :         if (Status != NDIS_STATUS_SUCCESS)

  000d0	0a000002	 beq         |$LN12@Emac_Minip|

; 574  :         {
; 575  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: NICInitSend is failed.\r\n"));

  000d4	e59f0144	 ldr         r0, [pc, #0x144]
  000d8	eb000000	 bl          NKDbgPrintfW
  000dc	ea000043	 b           |$LN21@Emac_Minip|
  000e0		 |$LN12@Emac_Minip|

; 576  :             break;
; 577  :         }
; 578  :         /* Init receive data structures */
; 579  : 
; 580  :         Status = NICInitRecv(pAdapter);

  000e0	e1a00004	 mov         r0, r4
  000e4	eb000000	 bl          NICInitRecv
  000e8	e1b05000	 movs        r5, r0

; 581  :         if (Status != NDIS_STATUS_SUCCESS)

  000ec	0a000002	 beq         |$LN11@Emac_Minip|

; 582  :         {
; 583  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: NICInitRecv is failed.\r\n"));

  000f0	e59f0124	 ldr         r0, [pc, #0x124]
  000f4	eb000000	 bl          NKDbgPrintfW
  000f8	ea00003c	 b           |$LN21@Emac_Minip|
  000fc		 |$LN11@Emac_Minip|

; 584  :             break;
; 585  :         }
; 586  : 
; 587  :         /* Disable interrupts here which is as soon as possible */
; 588  : 
; 589  :         Emac_MiniportDisableInterrupt(pAdapter);

  000fc	e1a00004	 mov         r0, r4
  00100	eb000000	 bl          Emac_MiniportDisableInterrupt

; 590  : 
; 591  :          /*  Register the interrupt */
; 592  : 
; 593  :         Status = NdisMRegisterInterrupt(
; 594  :                      &pAdapter->m_RxIntrInfo,
; 595  :                      pAdapter->m_AdapterHandle,
; 596  :                      pAdapter->m_RxIntrVector,
; 597  :                      0,          //ignored
; 598  :                      FALSE,      // RequestISR
; 599  :                      FALSE,      // SharedInterrupt
; 600  :                      0);         //ignored

  00104	e1a00004	 mov         r0, r4
  00108	e4901098	 ldr         r1, [r0], #0x98
  0010c	e1d42eb8	 ldrh        r2, [r4, #0xE8]
  00110	e3a03000	 mov         r3, #0
  00114	e58d6008	 str         r6, [sp, #8]
  00118	e58d6004	 str         r6, [sp, #4]
  0011c	e58d6000	 str         r6, [sp]
  00120	eb000000	 bl          NdisMRegisterInterrupt
  00124	e1b05000	 movs        r5, r0

; 601  :         if (Status != NDIS_STATUS_SUCCESS)

  00128	1a000030	 bne         |$LN21@Emac_Minip|

; 602  :         {
; 603  :             DEBUGMSG(DBG_ERR, (L"Emac_MiniportInitialize: NdisMRegisterInterrupt(m_RxIntrVector) failed\r\n"));
; 604  :             break;
; 605  :         }
; 606  : 
; 607  :         if(pAdapter->m_TxIntrVector)

  0012c	e2843c01	 add         r3, r4, #1, 24
  00130	e1d333bc	 ldrh        r3, [r3, #0x3C]
  00134	e1b02003	 movs        r2, r3
  00138	0a000008	 beq         |$LN8@Emac_Minip|

; 608  :         {
; 609  :             Status = NdisMRegisterInterrupt(
; 610  :                          &pAdapter->m_TxIntrInfo,
; 611  :                          pAdapter->m_AdapterHandle,
; 612  :                          pAdapter->m_TxIntrVector,
; 613  :                          0,          //ignored
; 614  :                          FALSE,      // RequestISR
; 615  :                          FALSE,      // SharedInterrupt
; 616  :                          0);         //ignored

  0013c	e1a00004	 mov         r0, r4
  00140	e49010ec	 ldr         r1, [r0], #0xEC
  00144	e3a03000	 mov         r3, #0
  00148	e58d6008	 str         r6, [sp, #8]
  0014c	e58d6004	 str         r6, [sp, #4]
  00150	e58d6000	 str         r6, [sp]
  00154	eb000000	 bl          NdisMRegisterInterrupt
  00158	e1b05000	 movs        r5, r0

; 617  :             if (Status != NDIS_STATUS_SUCCESS)

  0015c	1a000023	 bne         |$LN21@Emac_Minip|
  00160		 |$LN8@Emac_Minip|

; 618  :             {
; 619  :                 DEBUGMSG(DBG_ERR, (L"Emac_MiniportInitialize: NdisMRegisterInterrupt(m_TxIntrVector) failed\r\n"));
; 620  :                 break;
; 621  :             }
; 622  :         }
; 623  : 
; 624  :         if(pAdapter->m_LinkIntrVector)

  00160	e2843c01	 add         r3, r4, #1, 24
  00164	e1d339b0	 ldrh        r3, [r3, #0x90]
  00168	e1b02003	 movs        r2, r3
  0016c	0a000008	 beq         |$LN6@Emac_Minip|

; 625  :         {
; 626  :             Status = NdisMRegisterInterrupt(
; 627  :                          &pAdapter->m_LinkIntrInfo,
; 628  :                          pAdapter->m_AdapterHandle,
; 629  :                          pAdapter->m_LinkIntrVector,
; 630  :                          0,          //ignored
; 631  :                          FALSE,      // RequestISR
; 632  :                          FALSE,      // SharedInterrupt
; 633  :                          0);         //ignored

  00170	e1a00004	 mov         r0, r4
  00174	e4901140	 ldr         r1, [r0], #0x140
  00178	e3a03000	 mov         r3, #0
  0017c	e58d6008	 str         r6, [sp, #8]
  00180	e58d6004	 str         r6, [sp, #4]
  00184	e58d6000	 str         r6, [sp]
  00188	eb000000	 bl          NdisMRegisterInterrupt
  0018c	e1b05000	 movs        r5, r0

; 634  :             if (Status != NDIS_STATUS_SUCCESS)

  00190	1a000016	 bne         |$LN21@Emac_Minip|
  00194		 |$LN6@Emac_Minip|

; 635  :             {
; 636  :                 DEBUGMSG(DBG_ERR, (L"Emac_MiniportInitialize: NdisMRegisterInterrupt(m_LinkIntrVector) failed\r\n"));
; 637  :                 break;
; 638  :             }
; 639  :         }
; 640  : 
; 641  :         /* About to initialise */
; 642  : 
; 643  :         pAdapter->m_HwStatus = NdisHardwareStatusInitializing;

  00194	e3a03001	 mov         r3, #1
  00198	e58431a0	 str         r3, [r4, #0x1A0]

; 644  : 
; 645  :         /* request and configure the pads used by the EMAC device*/
; 646  :         if (!RequestDevicePads(pAdapter->m_device))

  0019c	e5940094	 ldr         r0, [r4, #0x94]
  001a0	eb000000	 bl          RequestDevicePads
  001a4	e3500000	 cmp         r0, #0
  001a8	1a000003	 bne         |$LN5@Emac_Minip|

; 647  :         {
; 648  :             Status = NDIS_STATUS_FAILURE;
; 649  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: RequestDevicePads failed.\r\n"));

  001ac	e59f0064	 ldr         r0, [pc, #0x64]
  001b0		 |$LN33@Emac_Minip|
  001b0	e3a05107	 mov         r5, #7, 2
  001b4	eb000000	 bl          NKDbgPrintfW
  001b8	ea00000c	 b           |$LN21@Emac_Minip|
  001bc		 |$LN5@Emac_Minip|

; 650  :             break;
; 651  :         }
; 652  : 
; 653  :         /* Init the hardware and set up everything */
; 654  :         if (!EthHwInit())

  001bc	eb000000	 bl          EthHwInit
  001c0	e3500000	 cmp         r0, #0

; 655  :         {
; 656  :             Status = NDIS_STATUS_FAILURE;
; 657  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: EthHwInit failed.\r\n"));

  001c4	059f0048	 ldreq       r0, [pc, #0x48]
  001c8	0afffff8	 beq         |$LN33@Emac_Minip|

; 658  :             break;
; 659  :         }
; 660  : 
; 661  :         Status = NICInitializeAdapter(pAdapter);

  001cc	e1a00004	 mov         r0, r4
  001d0	eb000000	 bl          NICInitializeAdapter
  001d4	e1b05000	 movs        r5, r0

; 662  :         if (Status != NDIS_STATUS_SUCCESS)

  001d8	0a000002	 beq         |$LN3@Emac_Minip|

; 663  :         {
; 664  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: NICInitializeAdapter is failed.\r\n"));

  001dc	e59f002c	 ldr         r0, [pc, #0x2C]
  001e0	eb000000	 bl          NKDbgPrintfW
  001e4	ea000001	 b           |$LN21@Emac_Minip|
  001e8		 |$LN3@Emac_Minip|

; 665  :             break;
; 666  :         }
; 667  : 
; 668  :         /* Test our adapter hardware */
; 669  : 
; 670  :         Status = NICSelfTest(pAdapter);

  001e8	e3a05000	 mov         r5, #0

; 671  :         if (Status != NDIS_STATUS_SUCCESS)
; 672  :         {
; 673  :             RETAILMSG(TRUE, (L"Emac_MiniportInitialize: NICSelfTest is failed.\r\n"));
; 674  :             break;
; 675  :         }
; 676  : 
; 677  :         /* Test is successful , make a status transition */
; 678  :         pAdapter->m_HwStatus = NdisHardwareStatusReady;

  001ec	e58461a0	 str         r6, [r4, #0x1A0]
  001f0		 |$LN21@Emac_Minip|

; 679  : 
; 680  :     } while (FALSE);
; 681  : 
; 682  :     if (pAdapter && Status != NDIS_STATUS_SUCCESS)

  001f0	e3540000	 cmp         r4, #0
  001f4	13550000	 cmpne       r5, #0

; 683  :     {
; 684  :        /* Free allocated memory and resources held */
; 685  :        EmacFreeAdapter(pAdapter);

  001f8	11a00004	 movne       r0, r4
  001fc	1b000000	 blne        EmacFreeAdapter
  00200		 |$LN1@Emac_Minip|

; 686  :     }
; 687  : 
; 688  :     DEBUGMSG (DBG_FUNC,(L"<--Emac_MiniportInitialize()\r\n"));
; 689  : 
; 690  :     return Status;
; 691  : 
; 692  : }

  00200	e1a00005	 mov         r0, r5
  00204	e28dd010	 add         sp, sp, #0x10
  00208	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0020c	e12fff1e	 bx          lr
  00210		 |$LN37@Emac_Minip|
  00210		 |$LN38@Emac_Minip|
  00210	00000000	 DCD         |??_C@_1HG@FLMCAIKK@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@|
  00214		 |$LN39@Emac_Minip|
  00214	00000000	 DCD         |??_C@_1FK@BKDKNCLO@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAE?$AAt?$AAh?$AAH?$AAw?$AAI?$AAn@|
  00218		 |$LN40@Emac_Minip|
  00218	00000000	 DCD         |??_C@_1GK@LBFALBHL@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt@|
  0021c		 |$LN41@Emac_Minip|
  0021c	00000000	 DCD         |??_C@_1GE@NDLANGAH@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@|
  00220		 |$LN42@Emac_Minip|
  00220	00000000	 DCD         |??_C@_1GE@CNKJNDFE@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAI?$AAn?$AAi?$AAt@|
  00224		 |$LN43@Emac_Minip|
  00224	00000000	 DCD         |??_C@_1HA@PNDOGDJ@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAM?$AAa?$AAp?$AAA@|
  00228		 |$LN44@Emac_Minip|
  00228	00000000	 DCD         |??_C@_1HC@KJACGMBF@?$AAE?$AAm?$AAa?$AAc?$AA_?$AAM?$AAi?$AAn?$AAi?$AAp?$AAo?$AAr?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAN?$AAI?$AAC?$AAR?$AAe?$AAa?$AAd@|
  0022c		 |$M51872|

			 ENDP  ; |Emac_MiniportInitialize|

	END
