; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\EMAC\Emac_Filter.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|EmacClearMulticastAddressTable|
	IMPORT	|memset|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\emac\emac_filter.c

  00000			 AREA	 |.pdata|, PDATA
|$T50323| DCD	|$LN5@EmacClearM|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EmacClearMulticastAddressTable| PROC

; 30   : {

  00000		 |$LN5@EmacClearM|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M50320|
  00004	e1a04000	 mov         r4, r0

; 31   :     PEMAC_ADAPTER   pAdapter;
; 32   :     NDIS_STATUS     Status = NDIS_STATUS_SUCCESS;
; 33   :     
; 34   :     /*
; 35   :      * Recover the Adapter pointer from the MiniportAdapterContext.
; 36   :      */
; 37   :     pAdapter = (PEMAC_ADAPTER)MiniportAdapterContext;
; 38   : 
; 39   :     DEBUGMSG(DBG_FUNC, 
; 40   :             (L"Entering EmacClearMulticastAddressTable Function \r\n"));
; 41   :    
; 42   :     /* 
; 43   :      * Clear the receive Multicast table in the hardware first. 
; 44   :      * Disable the receive Filter before writing into the receive Filter
; 45   :      * memory.
; 46   :      */
; 47   :     pAdapter->m_pEmacRegsBase->MACHASH1 = 0x0;

  00008	e5943004	 ldr         r3, [r4, #4]
  0000c	e3a05000	 mov         r5, #0

; 48   :     pAdapter->m_pEmacRegsBase->MACHASH2 = 0x0;
; 49   : 
; 50   :     /* Clear the receive multicast table in the software */
; 51   :     NdisZeroMemory(pAdapter->m_MulticastTable,
; 52   :                   sizeof(pAdapter->m_MulticastTable));

  00010	e3a02d06	 mov         r2, #6, 26
  00014	e58351d8	 str         r5, [r3, #0x1D8]
  00018	e5943004	 ldr         r3, [r4, #4]
  0001c	e3a01000	 mov         r1, #0
  00020	e2840f7b	 add         r0, r4, #0x7B, 30
  00024	e58351dc	 str         r5, [r3, #0x1DC]
  00028	eb000000	 bl          memset

; 53   :                   
; 54   :     pAdapter->m_NumMulticastEntries = 0;

  0002c	e584536c	 str         r5, [r4, #0x36C]

; 55   : 
; 56   :     
; 57   :     /* Return success*/
; 58   :     return Status;

  00030	e3a00000	 mov         r0, #0

; 59   : }

  00034	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M50321|

			 ENDP  ; |EmacClearMulticastAddressTable|

	EXPORT	|ComputeHashValue|

  00000			 AREA	 |.pdata|, PDATA
|$T50341| DCD	|$LN15@ComputeHas|
	DCD	0x40001f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ComputeHashValue| PROC

; 72   : {

  00000		 |$LN15@ComputeHas|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M50338|

; 73   :    UINT     OutIndex;
; 74   :    UINT     InIndex;
; 75   :    UINT     Result=0;

  00004	e3a05000	 mov         r5, #0

; 76   :    USHORT   HashFunVal;
; 77   :    UCHAR    BitPos;
; 78   :    UCHAR    MACAddrIndex;
; 79   :    
; 80   :     for(OutIndex = 0; OutIndex < 6; OutIndex++)

  00008	e3a04000	 mov         r4, #0
  0000c		 |$LL6@ComputeHas|

; 81   :         {
; 82   :         
; 83   :         /* After each of 6 bits calculation value should be reset to low */
; 84   :         HashFunVal =0;

  0000c	e3a06000	 mov         r6, #0
  00010	e1a07004	 mov         r7, r4
  00014	e3a08008	 mov         r8, #8
  00018		 |$LL3@ComputeHas|

; 85   :       
; 86   :         for(InIndex = 0; InIndex < 8; InIndex++)
; 87   :             {
; 88   :             /* Calculate the bit position among 48 bits in mac address acc. to
; 89   :              * algorithm in TRM 
; 90   :              */
; 91   :             
; 92   :             BitPos = OutIndex + 6*InIndex;

  00018	e207e0ff	 and         lr, r7, #0xFF

; 93   :             
; 94   :             /* Here we need to calculate the MAC array index where the particular
; 95   :              * BitPos exists also pAddress[0] indicates 47-40 bits and so on
; 96   :              * so reversing is taken care by substracting 5
; 97   :              */
; 98   :              
; 99   :             MACAddrIndex = 5 - BitPos/8 ;

  0001c	e1a031ae	 mov         r3, lr, lsr #3

; 100  :             
; 101  :             /* This expression calulates the BitPos value (either high or low)
; 102  :              * and subsequently XOR ing with 8 BitPos and storing it in HashFunVal
; 103  :              * which should be also 0 or 1 acc. to TRM
; 104  :              */
; 105  :              
; 106  :             HashFunVal ^= ( pAddress[MACAddrIndex] >> (BitPos % 8)) & BIT(0) ;

  00020	e1b0200e	 movs        r2, lr
  00024	e2633005	 rsb         r3, r3, #5
  00028	42822007	 addmi       r2, r2, #7
  0002c	e20330ff	 and         r3, r3, #0xFF
  00030	e7d31000	 ldrb        r1, [r3, +r0]
  00034	e1a021c2	 mov         r2, r2, asr #3
  00038	e04e3182	 sub         r3, lr, r2, lsl #3
  0003c	e20330ff	 and         r3, r3, #0xFF
  00040	e1a03331	 mov         r3, r1, lsr r3
  00044	e2877006	 add         r7, r7, #6
  00048	e1a03803	 mov         r3, r3, lsl #16
  0004c	e1a03823	 mov         r3, r3, lsr #16
  00050	e2033001	 and         r3, r3, #1
  00054	e0236006	 eor         r6, r3, r6
  00058	e2588001	 subs        r8, r8, #1
  0005c	1affffed	 bne         |$LL3@ComputeHas|

; 107  :             
; 108  :             }
; 109  :             
; 110  :         /* Storing value each of 6 bits in the Result by ORRing each bit 
; 111  :          * of it by the value obtained 
; 112  :          */
; 113  :                 
; 114  :         Result |= HashFunVal << OutIndex;

  00060	e1855416	 orr         r5, r5, r6, lsl r4
  00064	e2844001	 add         r4, r4, #1
  00068	e3540006	 cmp         r4, #6
  0006c	3affffe6	 bcc         |$LL6@ComputeHas|

; 115  :         
; 116  :         }
; 117  :               
; 118  :    /* Since we are interested only in last 6 bits returning the same */
; 119  :    
; 120  :    return (USHORT)(Result & 0x3F);

  00070	e205003f	 and         r0, r5, #0x3F

; 121  :    
; 122  : }

  00074	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$M50339|

			 ENDP  ; |ComputeHashValue|

	EXPORT	|EmacAddMulticastAddress|

  00000			 AREA	 |.pdata|, PDATA
|$T50354| DCD	|$LN10@EmacAddMul|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EmacAddMulticastAddress| PROC

; 136  : {

  00000		 |$LN10@EmacAddMul|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M50351|
  00004	e1a04000	 mov         r4, r0

; 137  :     
; 138  :     PEMAC_ADAPTER   pAdapter;
; 139  :     UINT32          HashValue;
; 140  :     /*
; 141  :      * Recover the Adapter pointer from the MiniportAdapterContext.
; 142  :      */
; 143  :     pAdapter = (PEMAC_ADAPTER)MiniportAdapterContext;
; 144  : 
; 145  :     
; 146  :     /* 
; 147  :      * Check if the MacAddress is a multicast address.
; 148  :      */ 
; 149  :     if((MacAddress[0] & BIT(0)) == 0) 

  00008	e5d13000	 ldrb        r3, [r1]
  0000c	e3130001	 tst         r3, #1
  00010	03a03157	 moveq       r3, #0x57, 2

; 150  :     {
; 151  :         return NDIS_STATUS_INVALID_DATA;

  00014	03830801	 orreq       r0, r3, #1, 16

; 168  : }

  00018	08bd4010	 ldmeqia     sp!, {r4, lr}
  0001c	012fff1e	 bxeq        lr

; 152  :     }
; 153  :     /* Compute the Hash value which is number between 0 to 63 is generated */
; 154  :     
; 155  :     HashValue = ComputeHashValue(MacAddress);   

  00020	e1a00001	 mov         r0, r1
  00024	eb000000	 bl          ComputeHashValue

; 156  :     
; 157  :     if (HashValue < 32 ) 

  00028	e3500020	 cmp         r0, #0x20

; 158  :     {
; 159  :         pAdapter->m_pEmacRegsBase->MACHASH1 = (0x1 << HashValue);

  0002c	35942004	 ldrcc       r2, [r4, #4]
  00030	33a03001	 movcc       r3, #1
  00034	31a03013	 movcc       r3, r3, lsl r0
  00038	358231d8	 strcc       r3, [r2, #0x1D8]

; 156  :     
; 157  :     if (HashValue < 32 ) 

  0003c	3a000005	 bcc         |$LN1@EmacAddMul|

; 160  :     }
; 161  :     else if ((HashValue >= 32 ) && (HashValue < 64 ))  

  00040	e3500040	 cmp         r0, #0x40

; 162  :     {    
; 163  :         pAdapter->m_pEmacRegsBase->MACHASH2 = (0x1 << (HashValue-32));

  00044	35942004	 ldrcc       r2, [r4, #4]
  00048	32403020	 subcc       r3, r0, #0x20
  0004c	33a01001	 movcc       r1, #1
  00050	31a03311	 movcc       r3, r1, lsl r3
  00054	358231dc	 strcc       r3, [r2, #0x1DC]
  00058		 |$LN1@EmacAddMul|

; 164  :     }
; 165  :     
; 166  :     /* Return success*/
; 167  :     return NDIS_STATUS_SUCCESS;

  00058	e3a00000	 mov         r0, #0

; 168  : }

  0005c	e8bd4010	 ldmia       sp!, {r4, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$M50352|

			 ENDP  ; |EmacAddMulticastAddress|

	EXPORT	|Emac_MiniportSetInformation|
	IMPORT	|EMACModStateChange|
	IMPORT	|EmacDisableInterrupts|
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T50390| DCD	|$LN45@Emac_Minip|
	DCD	0x40009a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Emac_MiniportSetInformation| PROC

; 206  : {

  00000		 |$LN45@Emac_Minip|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M50387|
  00004	e1a04003	 mov         r4, r3
  00008	e1a07002	 mov         r7, r2
  0000c	e1b06000	 movs        r6, r0

; 207  :     PEMAC_ADAPTER           pAdapter;
; 208  :     NDIS_STATUS             Status;
; 209  :     DWORD                   PacketFilter;
; 210  :     DWORD                   EmacPktFilter;
; 211  :     PUCHAR                  MacAddress;
; 212  :     DWORD                   Index;
; 213  :     NDIS_DEVICE_POWER_STATE PowerState;
; 214  :     
; 215  :     DEBUGMSG(DBG_FUNC && DBG_OID, 
; 216  :             (L"--->Emac_MiniportSetInformation %08x \r\n",Oid));
; 217  : 
; 218  :     /*
; 219  :      * Recover the Adapter pointer from the MiniportAdapterContext.
; 220  :      */
; 221  :     pAdapter = (PEMAC_ADAPTER)MiniportAdapterContext;
; 222  : 
; 223  :     if(pAdapter == (PEMAC_ADAPTER) NULL)

  00010	03a03801	 moveq       r3, #1, 16

; 224  :     {
; 225  :         return NDIS_STATUS_NOT_ACCEPTED;

  00014	03830003	 orreq       r0, r3, #3

; 418  :             break;
; 419  :     }
; 420  :     
; 421  :     DEBUGMSG(DBG_FUNC && DBG_OID, (L"<-- Emac_MiniportSetInformation 0x%08X \r\n",Status));
; 422  :     return(Status);
; 423  : }

  00018	08bd47f0	 ldmeqia     sp!, {r4 - r10, lr}
  0001c	012fff1e	 bxeq        lr

; 226  :     }
; 227  :     /*
; 228  :      * Set the Bytes read and Bytes Needed to be 0, so that if we return due
; 229  :      * to failure, it will be valid.
; 230  :      */
; 231  :     *BytesRead = 0;

  00020	e59d5020	 ldr         r5, [sp, #0x20]

; 232  :     *BytesNeeded  = 0;

  00024	e59de024	 ldr         lr, [sp, #0x24]

; 233  : 
; 234  :     switch( Oid )

  00028	e59f3234	 ldr         r3, [pc, #0x234]
  0002c	e3a09000	 mov         r9, #0
  00030	e5859000	 str         r9, [r5]
  00034	e58e9000	 str         r9, [lr]
  00038	e1510003	 cmp         r1, r3
  0003c	0a00005f	 beq         |$LN20@Emac_Minip|
  00040	e59f3218	 ldr         r3, [pc, #0x218]
  00044	e1510003	 cmp         r1, r3
  00048	0a000057	 beq         |$LN12@Emac_Minip|
  0004c	e59f3208	 ldr         r3, [pc, #0x208]
  00050	e1510003	 cmp         r1, r3
  00054	0a00002a	 beq         |$LN27@Emac_Minip|
  00058	e59f31f8	 ldr         r3, [pc, #0x1F8]
  0005c	e1510003	 cmp         r1, r3
  00060	0a000003	 beq         |$LN10@Emac_Minip|
  00064	e3a0315f	 mov         r3, #0x5F, 2
  00068		 |$LN40@Emac_Minip|

; 410  :                     break;
; 411  :                 };
; 412  :             }
; 413  :             break;
; 414  : 
; 415  :         default:
; 416  :             /* Set the status as NDIS_STATUS_INVALID_OID */
; 417  :             Status = NDIS_STATUS_INVALID_OID;

  00068	e3830801	 orr         r0, r3, #1, 16

; 418  :             break;
; 419  :     }
; 420  :     
; 421  :     DEBUGMSG(DBG_FUNC && DBG_OID, (L"<-- Emac_MiniportSetInformation 0x%08X \r\n",Status));
; 422  :     return(Status);
; 423  : }

  0006c	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN10@Emac_Minip|

; 376  : 
; 377  :         case OID_PNP_SET_POWER:
; 378  :             DEBUGMSG(DBG_FUNC, (TEXT ("Emac_Filter: SetInformation: Got OID_PNP_SET_POWER\r\n")));
; 379  :             if (!InformationBuffer || InformationBufferLength < sizeof(NDIS_DEVICE_POWER_STATE))

  00074	e3570000	 cmp         r7, #0
  00078	0a00001a	 beq         |$LN8@Emac_Minip|
  0007c	e3540004	 cmp         r4, #4
  00080	3a000018	 bcc         |$LN8@Emac_Minip|

; 380  :             {
; 381  :                 // Buffer not big enough
; 382  :                 Status = NDIS_STATUS_INVALID_LENGTH;
; 383  :                 *BytesRead = 0;
; 384  :                 *BytesNeeded = sizeof(PowerState);
; 385  :             }
; 386  :             else
; 387  :             {
; 388  :                 NdisMoveMemory(&PowerState, (PUCHAR)InformationBuffer, sizeof(PowerState));

  00084	e5d70000	 ldrb        r0, [r7]
  00088	e5d73001	 ldrb        r3, [r7, #1]
  0008c	e5d72002	 ldrb        r2, [r7, #2]
  00090	e5d71003	 ldrb        r1, [r7, #3]
  00094	e1803403	 orr         r3, r0, r3, lsl #8
  00098	e1833802	 orr         r3, r3, r2, lsl #16
  0009c	e1833c01	 orr         r3, r3, r1, lsl #24

; 389  :                 switch (PowerState)

  000a0	e3530001	 cmp         r3, #1
  000a4	0a00000d	 beq         |$LN4@Emac_Minip|
  000a8	e3530004	 cmp         r3, #4

; 404  :                 default:
; 405  :                     // Unsupported
; 406  :                     DEBUGMSG(DBG_ERR, (TEXT ("Emac_Filter: SetInformation: Unsupported power state\r\n")));
; 407  :                     *BytesRead = sizeof(PowerState);

  000ac	13a03004	 movne       r3, #4
  000b0	15853000	 strne       r3, [r5]
  000b4	13a03103	 movne       r3, #3, 2

; 408  :                     *BytesNeeded = 0;
; 409  :                     Status = NDIS_STATUS_NOT_SUPPORTED;

  000b8	138300bb	 orrne       r0, r3, #0xBB
  000bc	158e9000	 strne       r9, [lr]

; 418  :             break;
; 419  :     }
; 420  :     
; 421  :     DEBUGMSG(DBG_FUNC && DBG_OID, (L"<-- Emac_MiniportSetInformation 0x%08X \r\n",Status));
; 422  :     return(Status);
; 423  : }

  000c0	18bd47f0	 ldmneia     sp!, {r4 - r10, lr}
  000c4	112fff1e	 bxne        lr

; 397  :                 case NdisDeviceStateD3:
; 398  :                     // Power down device
; 399  :                     DEBUGMSG(1, (TEXT ("Emac_Filter: SetInformation: Setting power state to D3\r\n")));
; 400  : 					EmacDisableInterrupts(pAdapter);

  000c8	e1a00006	 mov         r0, r6
  000cc	eb000000	 bl          EmacDisableInterrupts

; 401  :                     EMACModStateChange(pAdapter->m_device,DISABLED);

  000d0	e3a01002	 mov         r1, #2
  000d4		 |$LN42@Emac_Minip|
  000d4	e5960094	 ldr         r0, [r6, #0x94]
  000d8	eb000000	 bl          EMACModStateChange

; 402  :                     Status = NDIS_STATUS_SUCCESS;
; 403  :                     break;

  000dc	ea000059	 b           |$LN38@Emac_Minip|
  000e0		 |$LN4@Emac_Minip|

; 390  :                 {
; 391  :                 case NdisDeviceStateD0:
; 392  :                     // Power on device
; 393  :                     DEBUGMSG(1, (TEXT ("Emac_Filter: SetInformation: Setting power state to D0\r\n")));
; 394  :                     EMACModStateChange(pAdapter->m_device,ENABLED);

  000e0	e3a01001	 mov         r1, #1

; 395  :                     Status = NDIS_STATUS_SUCCESS;
; 396  :                     break;

  000e4	eafffffa	 b           |$LN42@Emac_Minip|
  000e8		 |$LN8@Emac_Minip|
  000e8	e3a03153	 mov         r3, #0x53, 2
  000ec	e3a02004	 mov         r2, #4
  000f0	e5859000	 str         r9, [r5]
  000f4	e3830801	 orr         r0, r3, #1, 16
  000f8	e58e2000	 str         r2, [lr]

; 418  :             break;
; 419  :     }
; 420  :     
; 421  :     DEBUGMSG(DBG_FUNC && DBG_OID, (L"<-- Emac_MiniportSetInformation 0x%08X \r\n",Status));
; 422  :     return(Status);
; 423  : }

  000fc	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00100	e12fff1e	 bx          lr
  00104		 |$LN27@Emac_Minip|

; 235  :     {
; 236  :         case OID_802_3_MULTICAST_LIST:
; 237  :             /*
; 238  :              * Check if the InformationBufferLength is multiple of Ethernet
; 239  :              * Mac address size.
; 240  :              */
; 241  :             if ((InformationBufferLength % ETH_LENGTH_OF_ADDRESS) != 0)

  00104	e59f3148	 ldr         r3, [pc, #0x148]
  00108	e0832394	 umull       r2, r3, r4, r3
  0010c	e1a08123	 mov         r8, r3, lsr #2
  00110	e0883088	 add         r3, r8, r8, lsl #1
  00114	e0543083	 subs        r3, r4, r3, lsl #1
  00118	0a000001	 beq         |$LN26@Emac_Minip|
  0011c		 |$LN41@Emac_Minip|
  0011c	e3a03153	 mov         r3, #0x53, 2

; 242  :             {
; 243  :                 return (NDIS_STATUS_INVALID_LENGTH);

  00120	eaffffd0	 b           |$LN40@Emac_Minip|
  00124		 |$LN26@Emac_Minip|

; 244  :             }
; 245  :             
; 246  :             /* 
; 247  :              * Clear old multicast entries, if any, before accepting a 
; 248  :              * set of new ones.
; 249  :              */
; 250  :              
; 251  :             EmacClearMulticastAddressTable(pAdapter);

  00124	e5963004	 ldr         r3, [r6, #4]
  00128	e286af7b	 add         r10, r6, #0x7B, 30
  0012c	e3a02d06	 mov         r2, #6, 26
  00130	e58391d8	 str         r9, [r3, #0x1D8]
  00134	e5963004	 ldr         r3, [r6, #4]
  00138	e3a01000	 mov         r1, #0
  0013c	e1a0000a	 mov         r0, r10
  00140	e58391dc	 str         r9, [r3, #0x1DC]
  00144	eb000000	 bl          memset
  00148	e586936c	 str         r9, [r6, #0x36C]

; 252  : 
; 253  :             if (InformationBufferLength == 0)

  0014c	e3540000	 cmp         r4, #0

; 254  :             {
; 255  :                 return NDIS_STATUS_SUCCESS;

  00150	0a00003c	 beq         |$LN38@Emac_Minip|

; 256  :             }
; 257  :                 
; 258  :             /*
; 259  :              * For each of the MAC address in the Information Buffer, call
; 260  :              * HALAddMulticastAddress. The HALAddMulticastAddress handles any
; 261  :              * errors in the Multicast Address/Duplicates etc.
; 262  :              */
; 263  :              
; 264  :             MacAddress = (PUCHAR) InformationBuffer;
; 265  :             
; 266  :             for( Index = 0; 
; 267  :                  Index < (InformationBufferLength /ETH_LENGTH_OF_ADDRESS); 
; 268  :                  Index ++
; 269  :                )

  00154	e3a09000	 mov         r9, #0
  00158	e3580000	 cmp         r8, #0
  0015c	0a000010	 beq         |$LN22@Emac_Minip|
  00160		 |$LL24@Emac_Minip|

; 270  :             {
; 271  :                 Status = EmacAddMulticastAddress( pAdapter, MacAddress); 

  00160	e1a01007	 mov         r1, r7
  00164	e1a00006	 mov         r0, r6
  00168	eb000000	 bl          EmacAddMulticastAddress
  0016c	e3500000	 cmp         r0, #0

; 272  :                 if(NDIS_STATUS_SUCCESS != Status)

  00170	1a000035	 bne         |$LN28@Emac_Minip|

; 273  :                 {
; 274  :                     return(Status);
; 275  :                 }    
; 276  :                 MacAddress += ETH_LENGTH_OF_ADDRESS;

  00174	e2877006	 add         r7, r7, #6

; 277  :                 
; 278  :                 NdisMoveMemory(pAdapter->m_MulticastTable[Index], 
; 279  :                         (PUINT8) MacAddress,
; 280  :                         ETH_LENGTH_OF_ADDRESS);

  00178	e1a01007	 mov         r1, r7
  0017c	e3a02006	 mov         r2, #6
  00180	e1a0000a	 mov         r0, r10
  00184	eb000000	 bl          memcpy

; 281  :                      
; 282  :                 pAdapter->m_NumMulticastEntries ++;

  00188	e596336c	 ldr         r3, [r6, #0x36C]
  0018c	e2899001	 add         r9, r9, #1
  00190	e28aa006	 add         r10, r10, #6
  00194	e2833001	 add         r3, r3, #1
  00198	e586336c	 str         r3, [r6, #0x36C]
  0019c	e1590008	 cmp         r9, r8
  001a0	3affffee	 bcc         |$LL24@Emac_Minip|
  001a4		 |$LN22@Emac_Minip|

; 283  :             }   
; 284  :                 
; 285  :             /* 
; 286  :              * Set Bytes Read as InformationBufferLength,  & status as
; 287  :              * success 
; 288  :              */
; 289  :             *BytesRead = InformationBufferLength;

  001a4	e5854000	 str         r4, [r5]

; 290  :              Status = NDIS_STATUS_SUCCESS;
; 291  :              break;

  001a8	ea000026	 b           |$LN38@Emac_Minip|
  001ac		 |$LN12@Emac_Minip|

; 359  :             
; 360  :             break;
; 361  : 
; 362  :         case OID_GEN_CURRENT_LOOKAHEAD:
; 363  :             /*
; 364  :              * We are going to indicate the full ethernet frame, and hence if
; 365  :              * somebody tries to set the lookahead, then set the status as
; 366  :              * success.
; 367  :              */
; 368  :             if (InformationBufferLength != 4)

  001ac	e3540004	 cmp         r4, #4

; 369  :             {
; 370  :                 return (NDIS_STATUS_INVALID_LENGTH);

  001b0	1affffd9	 bne         |$LN41@Emac_Minip|

; 371  :             }   
; 372  :             /* Set Bytes Read as 4, & status as success */
; 373  :             *BytesRead = 4;

  001b4	e3a03004	 mov         r3, #4
  001b8	e5853000	 str         r3, [r5]

; 374  :             Status = NDIS_STATUS_SUCCESS;
; 375  :             break;

  001bc	ea000021	 b           |$LN38@Emac_Minip|
  001c0		 |$LN20@Emac_Minip|

; 292  : 
; 293  :         case OID_GEN_CURRENT_PACKET_FILTER:
; 294  :             
; 295  :             /* Check that the InformationBufferLength is sizeof(ULONG) */
; 296  :             if (InformationBufferLength != sizeof(ULONG))

  001c0	e3540004	 cmp         r4, #4

; 297  :             {
; 298  :                 return (NDIS_STATUS_INVALID_LENGTH);

  001c4	1affffd4	 bne         |$LN41@Emac_Minip|

; 299  :             }            
; 300  :             /*
; 301  :              * Now check if there are any unsupported Packet filter types that
; 302  :              * have been requested. If so return NDIS_STATUS_NOT_SUPPORTED.
; 303  :              */
; 304  :             NdisMoveMemory((PVOID)&PacketFilter, InformationBuffer,
; 305  :                            sizeof(ULONG));

  001c8	e5d71000	 ldrb        r1, [r7]
  001cc	e5d73001	 ldrb        r3, [r7, #1]
  001d0	e5d72002	 ldrb        r2, [r7, #2]
  001d4	e5d70003	 ldrb        r0, [r7, #3]
  001d8	e1813403	 orr         r3, r1, r3, lsl #8
  001dc	e1833802	 orr         r3, r3, r2, lsl #16
  001e0	e3a01a0f	 mov         r1, #0xF, 20
  001e4	e1832c00	 orr         r2, r3, r0, lsl #24

; 306  :             
; 307  :             if (PacketFilter & (NDIS_PACKET_TYPE_ALL_FUNCTIONAL |
; 308  :                                 NDIS_PACKET_TYPE_SOURCE_ROUTING |
; 309  :                                 NDIS_PACKET_TYPE_SMT |
; 310  :                                 NDIS_PACKET_TYPE_MAC_FRAME |
; 311  :                                 NDIS_PACKET_TYPE_FUNCTIONAL |
; 312  :                                 NDIS_PACKET_TYPE_GROUP |
; 313  :                                 NDIS_PACKET_TYPE_ALL_LOCAL
; 314  :                                 ))  

  001e8	e38130d0	 orr         r3, r1, #0xD0
  001ec	e1120003	 tst         r2, r3
  001f0	13a03103	 movne       r3, #3, 2

; 315  :                                 
; 316  :             {
; 317  :                 DEBUGMSG(DBG_WARN, 
; 318  :                          (L"Emac_MiniportSetInformation: Invalid PacketFilter\r\n"));
; 319  :                 Status = NDIS_STATUS_NOT_SUPPORTED;
; 320  :                 *BytesRead = 4;

  001f4	13a02004	 movne       r2, #4
  001f8	138300bb	 orrne       r0, r3, #0xBB
  001fc	15852000	 strne       r2, [r5]

; 418  :             break;
; 419  :     }
; 420  :     
; 421  :     DEBUGMSG(DBG_FUNC && DBG_OID, (L"<-- Emac_MiniportSetInformation 0x%08X \r\n",Status));
; 422  :     return(Status);
; 423  : }

  00200	18bd47f0	 ldmneia     sp!, {r4 - r10, lr}
  00204	112fff1e	 bxne        lr

; 321  :                 break;
; 322  :             }
; 323  :             
; 324  :             /* 
; 325  :              * Convert the NDIS Packet filter mapping into the EMAC
; 326  :              * Receive packet Filter mapping. 
; 327  :              */
; 328  :             
; 329  :             EmacPktFilter = 0;

  00208	e3a01000	 mov         r1, #0

; 330  :             
; 331  :             if((PacketFilter & NDIS_PACKET_TYPE_ALL_MULTICAST) ||
; 332  :                (PacketFilter & NDIS_PACKET_TYPE_PROMISCUOUS))

  0020c	e3120004	 tst         r2, #4
  00210	1a000001	 bne         |$LN16@Emac_Minip|
  00214	e3120020	 tst         r2, #0x20
  00218	0a000000	 beq         |$LN17@Emac_Minip|
  0021c		 |$LN16@Emac_Minip|

; 333  :             {    
; 334  :                 EmacPktFilter |= EMAC_RXMBPENABLE_RXCAFEN_ENABLE;

  0021c	e3a01602	 mov         r1, #2, 12
  00220		 |$LN17@Emac_Minip|

; 335  :             }    
; 336  :             
; 337  :             if(PacketFilter & NDIS_PACKET_TYPE_BROADCAST)

  00220	e3120008	 tst         r2, #8

; 338  :             {
; 339  :                 EmacPktFilter |= EMAC_RXMBPENABLE_RXBROADEN;
; 340  :             }
; 341  :             
; 342  :             if(PacketFilter & NDIS_PACKET_TYPE_DIRECTED)
; 343  :             {
; 344  :                 /* Always supported */
; 345  :             }
; 346  :             if(PacketFilter & NDIS_PACKET_TYPE_MULTICAST)
; 347  :             { 
; 348  :                 EmacPktFilter |= EMAC_RXMBPENABLE_RXMULTIEN;
; 349  :             }
; 350  :             /* Set the current packet filter to EMAC Filter register */
; 351  :             pAdapter->m_pEmacRegsBase->RXMBPENABLE = EmacPktFilter;

  00224	e5963004	 ldr         r3, [r6, #4]
  00228	13811a02	 orrne       r1, r1, #2, 20
  0022c	e3120002	 tst         r2, #2
  00230	13811020	 orrne       r1, r1, #0x20

; 352  :             
; 353  :             /* Set Bytes Read as InformationBufferLength, & status as success */
; 354  :             *BytesRead = InformationBufferLength;

  00234	e3a00004	 mov         r0, #4

; 355  :             
; 356  :             /* Update PacketFilter but we always have NDIS_PACKET_TYPE_DIRECTED set */
; 357  :             pAdapter->m_PacketFilter = (PacketFilter|NDIS_PACKET_TYPE_DIRECTED);

  00238	e5831100	 str         r1, [r3, #0x100]
  0023c	e3822001	 orr         r2, r2, #1
  00240	e5850000	 str         r0, [r5]
  00244	e58621ac	 str         r2, [r6, #0x1AC]
  00248		 |$LN38@Emac_Minip|

; 358  :             Status = NDIS_STATUS_SUCCESS;

  00248	e3a00000	 mov         r0, #0
  0024c		 |$LN28@Emac_Minip|

; 418  :             break;
; 419  :     }
; 420  :     
; 421  :     DEBUGMSG(DBG_FUNC && DBG_OID, (L"<-- Emac_MiniportSetInformation 0x%08X \r\n",Status));
; 422  :     return(Status);
; 423  : }

  0024c	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00250	e12fff1e	 bx          lr
  00254		 |$LN46@Emac_Minip|
  00254		 |$LN47@Emac_Minip|
  00254	aaaaaaab	 DCD         0xaaaaaaab
  00258		 |$LN48@Emac_Minip|
  00258	fd010101	 DCD         0xfd010101
  0025c		 |$LN49@Emac_Minip|
  0025c	01010103	 DCD         0x1010103
  00260		 |$LN50@Emac_Minip|
  00260	0001010f	 DCD         0x1010f
  00264		 |$LN51@Emac_Minip|
  00264	0001010e	 DCD         0x1010e
  00268		 |$M50388|

			 ENDP  ; |Emac_MiniportSetInformation|

	END
