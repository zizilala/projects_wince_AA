; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\MCBSP\mcbsp.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BK@BGKPHNBC@?$AAS?$AAi?$AAd?$AAe?$AAT?$AAo?$AAn?$AAe?$AAG?$AAa?$AAi?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@CFMCAEIC@?$AAS?$AAi?$AAd?$AAe?$AAT?$AAo?$AAn?$AAe?$AAF?$AAI?$AAR?$AAC?$AAo?$AAe?$AAf?$AAf?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@NJLMEFHJ@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAM?$AAc?$AAB?$AAS?$AAP?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@IJFGJEPN@?$AAN?$AAu?$AAm?$AAO?$AAf?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@KLENBPPJ@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAM?$AAc?$AAB?$AAS?$AAP?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@PLKHMOHN@?$AAN?$AAu?$AAm?$AAO?$AAf?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@HLBKJNHG@?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AAM?$AAo?$AAd?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@JHNJBOCI@?$AAT?$AAD?$AAM?$AAW?$AAo?$AAr?$AAd?$AAs?$AAP?$AAe?$AAr?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@NDNBPAIO@?$AAJ?$AAu?$AAs?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AAM?$AAo?$AAd?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@BJGPPEBK@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAR?$AAe?$AAs?$AAy?$AAn?$AAc?$AAS?$AAr?$AAg?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@FNLDIOCN@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAD?$AAi?$AAv?$AAi?$AAd?$AAe?$AAr?$AAS?$AAr?$AAg?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@NEGEOLJO@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAW?$AAi?$AAd?$AAt?$AAh?$AAS?$AAr?$AAg?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@PDFDKALM@?$AAC?$AAL?$AAK?$AAS?$AAP?$AAi?$AAn?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@OBJFCJHD@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAS?$AAr?$AAg?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@BBAMBIEG@?$AAF?$AAi?$AAf?$AAo?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AAR?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@DMGDACCC@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAy?$AAn?$AAc?$AAP?$AAo?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AAR?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@JCPHLKBM@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAP?$AAo?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AAR?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LNNGHMHN@?$AAP?$AAh?$AAa?$AAs?$AAe?$AAR?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@HDLLMKEM@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAy?$AAn?$AAc?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAR?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@LLMMAOPL@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAM?$AAo?$AAd?$AAe?$AAR?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@HCDFPEOL@?$AAD?$AAa?$AAt?$AAa?$AAD?$AAe?$AAl?$AAa?$AAy?$AAR?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@PEPDAHIH@?$AAR?$AAe?$AAv?$AAe?$AAr?$AAs?$AAe?$AAM?$AAo?$AAd?$AAe?$AAR?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@MHFFPLFL@?$AAF?$AAi?$AAf?$AAo?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AAT?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OKDKOBDP@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAy?$AAn?$AAc?$AAP?$AAo?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AAT?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@EEKOFJAB@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAP?$AAo?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AAT?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@GLIPJPGA@?$AAP?$AAh?$AAa?$AAs?$AAe?$AAT?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@KFOCCJFB@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAy?$AAn?$AAc?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAT?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@GNJFONOG@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAM?$AAo?$AAd?$AAe?$AAT?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@KEGMBHPG@?$AAD?$AAa?$AAt?$AAa?$AAD?$AAe?$AAl?$AAa?$AAy?$AAT?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@CCKKOEJK@?$AAR?$AAe?$AAv?$AAe?$AAr?$AAs?$AAe?$AAM?$AAo?$AAd?$AAe?$AAT?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@KGFAFKJI@?$AAW?$AAo?$AAr?$AAd?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA2?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@IDHNNHLA@?$AAW?$AAo?$AAr?$AAd?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@JOAEBIPC@?$AAW?$AAo?$AAr?$AAd?$AAs?$AAP?$AAe?$AAr?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@KALKMJLN@?$AAL?$AAo?$AAo?$AAp?$AAb?$AAa?$AAc?$AAk?$AAM?$AAo?$AAd?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@GFAEFODG@?$AAU?$AAs?$AAe?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAo?$AAr?$AAM?$AAc?$AAb?$AAs?$AAp?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@CGEFNBAB@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@BJJLAMLA@?$AAT?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@EHBPBEHF@?$AAR?$AAx?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@DFOOEOPF@?$AAT?$AAx?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@IMFNHKKP@?$AAD?$AAm?$AAa?$AAR?$AAx?$AAS?$AAy?$AAn?$AAc?$AAM?$AAa?$AAp?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@IHOOHHK@?$AAD?$AAm?$AAa?$AAT?$AAx?$AAS?$AAy?$AAn?$AAc?$AAM?$AAa?$AAp?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@LBBNFMDB@?$AAM?$AAe?$AAm?$AAL?$AAe?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@INLDIDEN@?$AAM?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@HPNHFNHI@?$AAM?$AAc?$AAB?$AAS?$AAP?$AAP?$AAr?$AAo?$AAf?$AAi?$AAl?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DEVICE_IFC_MCBSP_GUID| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@BGKPHNBC@?$AAS?$AAi?$AAd?$AAe?$AAT?$AAo?$AAn?$AAe?$AAG?$AAa?$AAi?$AAn?$AA?$AA@| DCB "S"
	DCB	0x0, "i", 0x0, "d", 0x0, "e", 0x0, "T", 0x0, "o", 0x0, "n"
	DCB	0x0, "e", 0x0, "G", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@CFMCAEIC@?$AAS?$AAi?$AAd?$AAe?$AAT?$AAo?$AAn?$AAe?$AAF?$AAI?$AAR?$AAC?$AAo?$AAe?$AAf?$AAf?$AA?$AA@| DCB "S"
	DCB	0x0, "i", 0x0, "d", 0x0, "e", 0x0, "T", 0x0, "o", 0x0, "n"
	DCB	0x0, "e", 0x0, "F", 0x0, "I", 0x0, "R", 0x0, "C", 0x0, "o"
	DCB	0x0, "e", 0x0, "f", 0x0, "f", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@NJLMEFHJ@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAM?$AAc?$AAB?$AAS?$AAP?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAs?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "M"
	DCB	0x0, "c", 0x0, "B", 0x0, "S", 0x0, "P", 0x0, "R", 0x0, "x"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, "s", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@IJFGJEPN@?$AAN?$AAu?$AAm?$AAO?$AAf?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAs?$AA?$AA@| DCB "N"
	DCB	0x0, "u", 0x0, "m", 0x0, "O", 0x0, "f", 0x0, "R", 0x0, "x"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, "s", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@KLENBPPJ@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAM?$AAc?$AAB?$AAS?$AAP?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAs?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "M"
	DCB	0x0, "c", 0x0, "B", 0x0, "S", 0x0, "P", 0x0, "T", 0x0, "x"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, "s", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@PLKHMOHN@?$AAN?$AAu?$AAm?$AAO?$AAf?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAs?$AA?$AA@| DCB "N"
	DCB	0x0, "u", 0x0, "m", 0x0, "O", 0x0, "f", 0x0, "T", 0x0, "x"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, "s", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@HLBKJNHG@?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AAM?$AAo?$AAd?$AAe?$AA?$AA@| DCB "P"
	DCB	0x0, "a", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@JHNJBOCI@?$AAT?$AAD?$AAM?$AAW?$AAo?$AAr?$AAd?$AAs?$AAP?$AAe?$AAr?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$AA@| DCB "T"
	DCB	0x0, "D", 0x0, "M", 0x0, "W", 0x0, "o", 0x0, "r", 0x0, "d"
	DCB	0x0, "s", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "F", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NDNBPAIO@?$AAJ?$AAu?$AAs?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AAM?$AAo?$AAd?$AAe?$AA?$AA@| DCB "J"
	DCB	0x0, "u", 0x0, "s", 0x0, "t", 0x0, "i", 0x0, "f", 0x0, "i"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@BJGPPEBK@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAR?$AAe?$AAs?$AAy?$AAn?$AAc?$AAS?$AAr?$AAg?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "R", 0x0, "e"
	DCB	0x0, "s", 0x0, "y", 0x0, "n", 0x0, "c", 0x0, "S", 0x0, "r"
	DCB	0x0, "g", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@FNLDIOCN@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAD?$AAi?$AAv?$AAi?$AAd?$AAe?$AAr?$AAS?$AAr?$AAg?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "D", 0x0, "i"
	DCB	0x0, "v", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "r", 0x0, "S"
	DCB	0x0, "r", 0x0, "g", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@NEGEOLJO@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAW?$AAi?$AAd?$AAt?$AAh?$AAS?$AAr?$AAg?$AA?$AA@| DCB "F"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "W", 0x0, "i"
	DCB	0x0, "d", 0x0, "t", 0x0, "h", 0x0, "S", 0x0, "r", 0x0, "g"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@PDFDKALM@?$AAC?$AAL?$AAK?$AAS?$AAP?$AAi?$AAn?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@| DCB "C"
	DCB	0x0, "L", 0x0, "K", 0x0, "S", 0x0, "P", 0x0, "i", 0x0, "n"
	DCB	0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c", 0x0, "e"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@OBJFCJHD@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAS?$AAr?$AAg?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "S", 0x0, "o"
	DCB	0x0, "u", 0x0, "r", 0x0, "c", 0x0, "e", 0x0, "S", 0x0, "r"
	DCB	0x0, "g", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@BBAMBIEG@?$AAF?$AAi?$AAf?$AAo?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AAR?$AAx?$AA?$AA@| DCB "F"
	DCB	0x0, "i", 0x0, "f", 0x0, "o", 0x0, "T", 0x0, "h", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "h", 0x0, "o", 0x0, "l", 0x0, "d"
	DCB	0x0, "R", 0x0, "x", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@DMGDACCC@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAy?$AAn?$AAc?$AAP?$AAo?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AAR?$AAx?$AA?$AA@| DCB "F"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "S", 0x0, "y"
	DCB	0x0, "n", 0x0, "c", 0x0, "P", 0x0, "o", 0x0, "l", 0x0, "a"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "y", 0x0, "R", 0x0, "x"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@JCPHLKBM@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAP?$AAo?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AAR?$AAx?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "P", 0x0, "o"
	DCB	0x0, "l", 0x0, "a", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "y"
	DCB	0x0, "R", 0x0, "x", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LNNGHMHN@?$AAP?$AAh?$AAa?$AAs?$AAe?$AAR?$AAx?$AA?$AA@| DCB "P", 0x0
	DCB	"h", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, "R", 0x0, "x", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@HDLLMKEM@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAy?$AAn?$AAc?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAR?$AAx?$AA?$AA@| DCB "F"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "S", 0x0, "y"
	DCB	0x0, "n", 0x0, "c", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "R", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@LLMMAOPL@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAM?$AAo?$AAd?$AAe?$AAR?$AAx?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "M", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, "R", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@HCDFPEOL@?$AAD?$AAa?$AAt?$AAa?$AAD?$AAe?$AAl?$AAa?$AAy?$AAR?$AAx?$AA?$AA@| DCB "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, "D", 0x0, "e", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, "R", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@PEPDAHIH@?$AAR?$AAe?$AAv?$AAe?$AAr?$AAs?$AAe?$AAM?$AAo?$AAd?$AAe?$AAR?$AAx?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, "e"
	DCB	0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, "R", 0x0, "x"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@MHFFPLFL@?$AAF?$AAi?$AAf?$AAo?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AAT?$AAx?$AA?$AA@| DCB "F"
	DCB	0x0, "i", 0x0, "f", 0x0, "o", 0x0, "T", 0x0, "h", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "h", 0x0, "o", 0x0, "l", 0x0, "d"
	DCB	0x0, "T", 0x0, "x", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OKDKOBDP@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAy?$AAn?$AAc?$AAP?$AAo?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AAT?$AAx?$AA?$AA@| DCB "F"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "S", 0x0, "y"
	DCB	0x0, "n", 0x0, "c", 0x0, "P", 0x0, "o", 0x0, "l", 0x0, "a"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "y", 0x0, "T", 0x0, "x"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@EEKOFJAB@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAP?$AAo?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AAT?$AAx?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "P", 0x0, "o"
	DCB	0x0, "l", 0x0, "a", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "y"
	DCB	0x0, "T", 0x0, "x", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@GLIPJPGA@?$AAP?$AAh?$AAa?$AAs?$AAe?$AAT?$AAx?$AA?$AA@| DCB "P", 0x0
	DCB	"h", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, "T", 0x0, "x", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@KFOCCJFB@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAy?$AAn?$AAc?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAT?$AAx?$AA?$AA@| DCB "F"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "S", 0x0, "y"
	DCB	0x0, "n", 0x0, "c", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "T", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@GNJFONOG@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAM?$AAo?$AAd?$AAe?$AAT?$AAx?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "M", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, "T", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@KEGMBHPG@?$AAD?$AAa?$AAt?$AAa?$AAD?$AAe?$AAl?$AAa?$AAy?$AAT?$AAx?$AA?$AA@| DCB "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, "D", 0x0, "e", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, "T", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@CCKKOEJK@?$AAR?$AAe?$AAv?$AAe?$AAr?$AAs?$AAe?$AAM?$AAo?$AAd?$AAe?$AAT?$AAx?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, "e"
	DCB	0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, "T", 0x0, "x"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@KGFAFKJI@?$AAW?$AAo?$AAr?$AAd?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA2?$AA?$AA@| DCB "W"
	DCB	0x0, "o", 0x0, "r", 0x0, "d", 0x0, "L", 0x0, "e", 0x0, "n"
	DCB	0x0, "g", 0x0, "t", 0x0, "h", 0x0, "2", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@IDHNNHLA@?$AAW?$AAo?$AAr?$AAd?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@| DCB "W"
	DCB	0x0, "o", 0x0, "r", 0x0, "d", 0x0, "L", 0x0, "e", 0x0, "n"
	DCB	0x0, "g", 0x0, "t", 0x0, "h", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@JOAEBIPC@?$AAW?$AAo?$AAr?$AAd?$AAs?$AAP?$AAe?$AAr?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$AA@| DCB "W"
	DCB	0x0, "o", 0x0, "r", 0x0, "d", 0x0, "s", 0x0, "P", 0x0, "e"
	DCB	0x0, "r", 0x0, "F", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@KALKMJLN@?$AAL?$AAo?$AAo?$AAp?$AAb?$AAa?$AAc?$AAk?$AAM?$AAo?$AAd?$AAe?$AA?$AA@| DCB "L"
	DCB	0x0, "o", 0x0, "o", 0x0, "p", 0x0, "b", 0x0, "a", 0x0, "c"
	DCB	0x0, "k", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@GFAEFODG@?$AAU?$AAs?$AAe?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAo?$AAr?$AAM?$AAc?$AAb?$AAs?$AAp?$AA?$AA@| DCB "U"
	DCB	0x0, "s", 0x0, "e", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, "F", 0x0, "o"
	DCB	0x0, "r", 0x0, "M", 0x0, "c", 0x0, "b", 0x0, "s", 0x0, "p"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@CGEFNBAB@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@BJJLAMLA@?$AAT?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@EHBPBEHF@?$AAR?$AAx?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "P", 0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "y", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@DFOOEOPF@?$AAT?$AAx?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "P", 0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "y", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@IMFNHKKP@?$AAD?$AAm?$AAa?$AAR?$AAx?$AAS?$AAy?$AAn?$AAc?$AAM?$AAa?$AAp?$AA?$AA@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "R", 0x0, "x", 0x0, "S", 0x0, "y"
	DCB	0x0, "n", 0x0, "c", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@IHOOHHK@?$AAD?$AAm?$AAa?$AAT?$AAx?$AAS?$AAy?$AAn?$AAc?$AAM?$AAa?$AAp?$AA?$AA@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "T", 0x0, "x", 0x0, "S", 0x0, "y"
	DCB	0x0, "n", 0x0, "c", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@LBBNFMDB@?$AAM?$AAe?$AAm?$AAL?$AAe?$AAn?$AA?$AA@| DCB "M", 0x0, "e"
	DCB	0x0, "m", 0x0, "L", 0x0, "e", 0x0, "n", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@INLDIDEN@?$AAM?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?$AA@| DCB "M", 0x0
	DCB	"e", 0x0, "m", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@HPNHFNHI@?$AAM?$AAc?$AAB?$AAS?$AAP?$AAP?$AAr?$AAo?$AAf?$AAi?$AAl?$AAe?$AA?$AA@| DCB "M"
	DCB	0x0, "c", 0x0, "B", 0x0, "S", 0x0, "P", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.data|, DATA
|s_TxDmaSettings| DCD 0x2
	DCD	0x0
	DCD	0x0
	DCD	0x1000
	DCD	0x0
	DCD	0x400
	DCD	0x0
	DCD	0x4800040
	DCD	0x0
	DCD	0x40020
	DCD	0x28
	%	4
|s_RxDmaSettings| DCD 0x2
	DCD	0x0
	DCD	0x10
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x4000
	DCD	0x4000040
	DCD	0x1000000
	DCD	0x40020
	DCD	0x28
	%	4

  00000			 AREA	 |.rdata|, DATA, READONLY
|DEVICE_IFC_MCBSP_GUID| DCD 0x172504cf
	DCW	0x7352
	DCW	0x4b2d
	DCB	0xbd
	DCB	0xc3
	DCB	0x44
	DCB	0x93
	DCB	0xdd
	DCB	0x67
	DCB	0xc1
	DCB	0x35
|s_deviceRegParams| DCD |??_C@_1BK@HPNHFNHI@?$AAM?$AAc?$AAB?$AAS?$AAP?$AAP?$AAr?$AAo?$AAf?$AAi?$AAl?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x8c
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BA@INLDIDEN@?$AAM?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?$AA@|
	DCD	0x3
	DCD	0x1
	DCD	0x90
	DCD	0xc
	DCD	0x0
	DCD	|??_C@_1O@LBBNFMDB@?$AAM?$AAe?$AAm?$AAL?$AAe?$AAn?$AA?$AA@|
	DCD	0x3
	DCD	0x1
	DCD	0x9c
	DCD	0xc
	DCD	0x0
	DCD	|??_C@_1BK@IHOOHHK@?$AAD?$AAm?$AAa?$AAT?$AAx?$AAS?$AAy?$AAn?$AAc?$AAM?$AAa?$AAp?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xa8
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BK@IMFNHKKP@?$AAD?$AAm?$AAa?$AAR?$AAx?$AAS?$AAy?$AAn?$AAc?$AAM?$AAa?$AAp?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xac
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BG@DFOOEOPF@?$AAT?$AAx?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xb0
	DCD	0x4
	DCD	0x82
	DCD	|??_C@_1BG@EHBPBEHF@?$AAR?$AAx?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xb4
	DCD	0x4
	DCD	0x82
	DCD	|??_C@_1BK@BJJLAMLA@?$AAT?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xbc
	DCD	0x4
	DCD	0x2000
	DCD	|??_C@_1BK@CGEFNBAB@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xb8
	DCD	0x4
	DCD	0x2000
	DCD	|??_C@_1CI@GFAEFODG@?$AAU?$AAs?$AAe?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AAF?$AAo?$AAr?$AAM?$AAc?$AAb?$AAs?$AAp?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xc0
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BK@KALKMJLN@?$AAL?$AAo?$AAo?$AAp?$AAb?$AAa?$AAc?$AAk?$AAM?$AAo?$AAd?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xc4
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BM@JOAEBIPC@?$AAW?$AAo?$AAr?$AAd?$AAs?$AAP?$AAe?$AAr?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xc8
	DCD	0x4
	DCD	0x1
	DCD	|??_C@_1BG@IDHNNHLA@?$AAW?$AAo?$AAr?$AAd?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xcc
	DCD	0x4
	DCD	0x20
	DCD	|??_C@_1BI@KGFAFKJI@?$AAW?$AAo?$AAr?$AAd?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA2?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xd0
	DCD	0x4
	DCD	0x20
	DCD	|??_C@_1BM@CCKKOEJK@?$AAR?$AAe?$AAv?$AAe?$AAr?$AAs?$AAe?$AAM?$AAo?$AAd?$AAe?$AAT?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xd4
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BI@KEGMBHPG@?$AAD?$AAa?$AAt?$AAa?$AAD?$AAe?$AAl?$AAa?$AAy?$AAT?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xd8
	DCD	0x4
	DCD	0x1
	DCD	|??_C@_1BI@GNJFONOG@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAM?$AAo?$AAd?$AAe?$AAT?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xdc
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CE@KFOCCJFB@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAy?$AAn?$AAc?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAT?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xe0
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BA@GLIPJPGA@?$AAP?$AAh?$AAa?$AAs?$AAe?$AAT?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xe4
	DCD	0x4
	DCD	0x1
	DCD	|??_C@_1CA@EEKOFJAB@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAP?$AAo?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AAT?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xe8
	DCD	0x4
	DCD	0x1
	DCD	|??_C@_1CI@OKDKOBDP@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAy?$AAn?$AAc?$AAP?$AAo?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AAT?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xec
	DCD	0x4
	DCD	0x1
	DCD	|??_C@_1CA@MHFFPLFL@?$AAF?$AAi?$AAf?$AAo?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AAT?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xf0
	DCD	0x4
	DCD	0x7f
	DCD	|??_C@_1BM@PEPDAHIH@?$AAR?$AAe?$AAv?$AAe?$AAr?$AAs?$AAe?$AAM?$AAo?$AAd?$AAe?$AAR?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xf4
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BI@HCDFPEOL@?$AAD?$AAa?$AAt?$AAa?$AAD?$AAe?$AAl?$AAa?$AAy?$AAR?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xf8
	DCD	0x4
	DCD	0x1
	DCD	|??_C@_1BI@LLMMAOPL@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAM?$AAo?$AAd?$AAe?$AAR?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xfc
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CE@HDLLMKEM@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAy?$AAn?$AAc?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAR?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x100
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BA@LNNGHMHN@?$AAP?$AAh?$AAa?$AAs?$AAe?$AAR?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x104
	DCD	0x4
	DCD	0x1
	DCD	|??_C@_1CA@JCPHLKBM@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAP?$AAo?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AAR?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x108
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CI@DMGDACCC@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAS?$AAy?$AAn?$AAc?$AAP?$AAo?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AAR?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x10c
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CA@BBAMBIEG@?$AAF?$AAi?$AAf?$AAo?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AAR?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x110
	DCD	0x4
	DCD	0x7f
	DCD	|??_C@_1BO@OBJFCJHD@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAS?$AAr?$AAg?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x114
	DCD	0x4
	DCD	0x4
	DCD	|??_C@_1BM@PDFDKALM@?$AAC?$AAL?$AAK?$AAS?$AAP?$AAi?$AAn?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x124
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BM@NEGEOLJO@?$AAF?$AAr?$AAa?$AAm?$AAe?$AAW?$AAi?$AAd?$AAt?$AAh?$AAS?$AAr?$AAg?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x118
	DCD	0x4
	DCD	0x10
	DCD	|??_C@_1CA@FNLDIOCN@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAD?$AAi?$AAv?$AAi?$AAd?$AAe?$AAr?$AAS?$AAr?$AAg?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x11c
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BO@BJGPPEBK@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAR?$AAe?$AAs?$AAy?$AAn?$AAc?$AAS?$AAr?$AAg?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x120
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CE@NDNBPAIO@?$AAJ?$AAu?$AAs?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AAM?$AAo?$AAd?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x128
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CC@JHNJBOCI@?$AAT?$AAD?$AAM?$AAW?$AAo?$AAr?$AAd?$AAs?$AAP?$AAe?$AAr?$AAF?$AAr?$AAa?$AAm?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x12c
	DCD	0x4
	DCD	0x2
	DCD	|??_C@_1BM@HLBKJNHG@?$AAP?$AAa?$AAr?$AAt?$AAi?$AAt?$AAi?$AAo?$AAn?$AAM?$AAo?$AAd?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x130
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CA@PLKHMOHN@?$AAN?$AAu?$AAm?$AAO?$AAf?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAs?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x134
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CM@KLENBPPJ@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAM?$AAc?$AAB?$AAS?$AAP?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAs?$AA?$AA@|
	DCD	0x3
	DCD	0x0
	DCD	0x138
	DCD	0x10
	DCD	0x0
	DCD	|??_C@_1CA@IJFGJEPN@?$AAN?$AAu?$AAm?$AAO?$AAf?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAs?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x148
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CM@NJLMEFHJ@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAM?$AAc?$AAB?$AAS?$AAP?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAs?$AA?$AA@|
	DCD	0x3
	DCD	0x0
	DCD	0x14c
	DCD	0x10
	DCD	0x0
	DCD	|??_C@_1CC@CFMCAEIC@?$AAS?$AAi?$AAd?$AAe?$AAT?$AAo?$AAn?$AAe?$AAF?$AAI?$AAR?$AAC?$AAo?$AAe?$AAf?$AAf?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x16c
	DCD	0x200
	DCD	0x0
	DCD	|??_C@_1BK@BGKPHNBC@?$AAS?$AAi?$AAd?$AAe?$AAT?$AAo?$AAn?$AAe?$AAG?$AAa?$AAi?$AAn?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x56c
	DCD	0x4
	DCD	0x0
	EXPORT	|GetCurrentThread|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T38081| DCD	|$LN5@GetCurrent|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentThread| PROC

; 351  : _inline HANDLE GetCurrentThread(void) {

  00000		 |$LN5@GetCurrent|
  00000		 |$M38078|

; 352  : 	return ((HANDLE)(SH_CURTHREAD+SYS_HANDLE_BASE));

  00000	e3a00041	 mov         r0, #0x41

; 353  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M38079|

			 ENDP  ; |GetCurrentThread|

	EXPORT	|GetCurrentProcessId|
	IMPORT	|__GetUserKData|

  00000			 AREA	 |.pdata|, PDATA
|$T38090| DCD	|$LN5@GetCurrent@2|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcessId| PROC

; 373  : _inline DWORD GetCurrentProcessId(void) {

  00000		 |$LN5@GetCurrent@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M38087|

; 374  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURPROC * sizeof(HANDLE)));

  00004	e3a0000c	 mov         r0, #0xC
  00008	eb000000	 bl          __GetUserKData

; 375  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M38088|

			 ENDP  ; |GetCurrentProcessId|

	EXPORT	|?IsEqualGUID@@YAHABU_GUID@@0@Z|	; IsEqualGUID
	IMPORT	|memcmp|
; File c:\wince600\public\common\sdk\inc\objbase.h

  00000			 AREA	 |.pdata|, PDATA
|$T38104| DCD	|$LN7@IsEqualGUI|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsEqualGUID@@YAHABU_GUID@@0@Z| PROC	; IsEqualGUID

; 493  : {

  00000		 |$LN7@IsEqualGUI|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M38101|

; 494  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00004	e3a02010	 mov         r2, #0x10
  00008	eb000000	 bl          memcmp
  0000c	e3500000	 cmp         r0, #0
  00010	03a00001	 moveq       r0, #1

; 495  : }

  00014	049de004	 ldreq       lr, [sp], #4

; 494  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00018	13a00000	 movne       r0, #0

; 495  : }

  0001c	149de004	 ldrne       lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M38102|

			 ENDP  ; |?IsEqualGUID@@YAHABU_GUID@@0@Z|, IsEqualGUID

	EXPORT	|DmaGetStatus|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T38114| DCD	|$LN5@DmaGetStat|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaGetStatus| PROC

; 570  : {

  00000		 |$LN5@DmaGetStat|
  00000		 |$M38111|

; 571  :     return INREG32(&pDataInfo->pDmaLcReg->CSR);

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e593000c	 ldr         r0, [r3, #0xC]

; 572  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M38112|

			 ENDP  ; |DmaGetStatus|

	EXPORT	|DmaClearStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T38123| DCD	|$LN5@DmaClearSt|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaClearStatus| PROC

; 586  : {

  00000		 |$LN5@DmaClearSt|
  00000		 |$M38120|

; 587  :     OUTREG32(&pDataInfo->pDmaLcReg->CSR, dwStatus);

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e583100c	 str         r1, [r3, #0xC]

; 588  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M38121|

			 ENDP  ; |DmaClearStatus|

	EXPORT	|??0McbspProfile_t@@QAA@PAUMcBSPDevice_t@@@Z| ; McbspProfile_t::McbspProfile_t
	EXPORT	|??_7McbspProfile_t@@6B@| [ DATA ]	; McbspProfile_t::`vftable'
	IMPORT	|??_EMcbspProfile_t@@UAAPAXI@Z|, WEAK |??_GMcbspProfile_t@@UAAPAXI@Z| ; McbspProfile_t::`vector deleting destructor', McbspProfile_t::`scalar deleting destructor'
	IMPORT	|?Initialize@McbspProfile_t@@UAAXXZ|	; McbspProfile_t::Initialize
	IMPORT	|?ContextRestore@McbspProfile_t@@UAAXXZ| ; McbspProfile_t::ContextRestore
	IMPORT	|?EnableSampleRateGenerator@McbspProfile_t@@UAAXXZ| ; McbspProfile_t::EnableSampleRateGenerator
	IMPORT	|?EnableTransmitter@McbspProfile_t@@UAAXXZ| ; McbspProfile_t::EnableTransmitter
	IMPORT	|?EnableReceiver@McbspProfile_t@@UAAXXZ| ; McbspProfile_t::EnableReceiver
	IMPORT	|?ResetSampleRateGenerator@McbspProfile_t@@UAAXXZ| ; McbspProfile_t::ResetSampleRateGenerator
	IMPORT	|?ResetTransmitter@McbspProfile_t@@UAAXXZ| ; McbspProfile_t::ResetTransmitter
	IMPORT	|?ResetReceiver@McbspProfile_t@@UAAXXZ|	; McbspProfile_t::ResetReceiver
	IMPORT	|?ClearIRQStatus@McbspProfile_t@@UAAXXZ| ; McbspProfile_t::ClearIRQStatus
	IMPORT	|_purecall|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\mcbspprofile.h

  00000			 AREA	 |.pdata|, PDATA
|$T38134| DCD	|$LN5@McbspProfi|
	DCD	0x40000600

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7McbspProfile_t@@6B@| DCD |??_EMcbspProfile_t@@UAAPAXI@Z| ; McbspProfile_t::`vftable'
	DCD	|?Initialize@McbspProfile_t@@UAAXXZ|
	DCD	|?ContextRestore@McbspProfile_t@@UAAXXZ|
	DCD	|?EnableSampleRateGenerator@McbspProfile_t@@UAAXXZ|
	DCD	|?EnableTransmitter@McbspProfile_t@@UAAXXZ|
	DCD	|?EnableReceiver@McbspProfile_t@@UAAXXZ|
	DCD	|?ResetSampleRateGenerator@McbspProfile_t@@UAAXXZ|
	DCD	|?ResetTransmitter@McbspProfile_t@@UAAXXZ|
	DCD	|?ResetReceiver@McbspProfile_t@@UAAXXZ|
	DCD	|?ClearIRQStatus@McbspProfile_t@@UAAXXZ|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0McbspProfile_t@@QAA@PAUMcBSPDevice_t@@@Z| PROC ; McbspProfile_t::McbspProfile_t

; 35   :     McbspProfile_t(McBSPDevice_t *pDevice)

  00000		 |$LN5@McbspProfi|
  00000		 |$M38131|
  00000	e1a02000	 mov         r2, r0
  00004	e59f3008	 ldr         r3, [pc, #8]

; 36   :         {
; 37   :         DEBUGMSG(ZONE_FUNCTION, (L"MCP:*%S\r\n", __FUNCTION__));
; 38   :         m_pDevice = pDevice;

  00008	e5821004	 str         r1, [r2, #4]

; 39   :         };

  0000c	e5823000	 str         r3, [r2]
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@McbspProfi|
  00014		 |$LN7@McbspProfi|
  00014	00000000	 DCD         |??_7McbspProfile_t@@6B@|
  00018		 |$M38132|

			 ENDP  ; |??0McbspProfile_t@@QAA@PAUMcBSPDevice_t@@@Z|, McbspProfile_t::McbspProfile_t

	EXPORT	|??1McbspProfile_t@@UAA@XZ|		; McbspProfile_t::~McbspProfile_t

  00000			 AREA	 |.pdata|, PDATA
|$T38144| DCD	|$LN5@McbspProfi@2|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1McbspProfile_t@@UAA@XZ| PROC	; McbspProfile_t::~McbspProfile_t

; 40   :     virtual ~McbspProfile_t() {};

  00000		 |$LN5@McbspProfi@2|
  00000		 |$M38141|
  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5803000	 str         r3, [r0]
  00008	e12fff1e	 bx          lr
  0000c		 |$LN6@McbspProfi@2|
  0000c		 |$LN7@McbspProfi@2|
  0000c	00000000	 DCD         |??_7McbspProfile_t@@6B@|
  00010		 |$M38142|

			 ENDP  ; |??1McbspProfile_t@@UAA@XZ|, McbspProfile_t::~McbspProfile_t

	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T38160| DCD	|$LN8@scalar|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GMcbspProfile_t@@UAAPAXI@Z| PROC	; McbspProfile_t::`scalar deleting destructor'
  00000		 |$LN8@scalar|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M38157|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3014	 ldr         r3, [pc, #0x14]
  0000c	e3110001	 tst         r1, #1
  00010	e5843000	 str         r3, [r4]
  00014	1b000000	 blne        |??3@YAXPAX@Z|
  00018	e1a00004	 mov         r0, r4
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN9@scalar|
  00024		 |$LN10@scalar|
  00024	00000000	 DCD         |??_7McbspProfile_t@@6B@|
  00028		 |$M38158|

			 ENDP  ; |??_GMcbspProfile_t@@UAAPAXI@Z|, McbspProfile_t::`scalar deleting destructor'

	EXPORT	|??0I2SSlaveProfile_t@@QAA@PAUMcBSPDevice_t@@@Z| ; I2SSlaveProfile_t::I2SSlaveProfile_t
	EXPORT	|??_7I2SSlaveProfile_t@@6B@| [ DATA ]	; I2SSlaveProfile_t::`vftable'
	EXPORT	|?GetMode@I2SSlaveProfile_t@@UAA?AW4McBSPProfile_e@@XZ| ; I2SSlaveProfile_t::GetMode
	EXPORT	|?SetTxChannelsRequested@I2SSlaveProfile_t@@UAAXXZ| ; I2SSlaveProfile_t::SetTxChannelsRequested
	EXPORT	|?SetRxChannelsRequested@I2SSlaveProfile_t@@UAAXXZ| ; I2SSlaveProfile_t::SetRxChannelsRequested
	IMPORT	|??_EI2SSlaveProfile_t@@UAAPAXI@Z|, WEAK |??_GI2SSlaveProfile_t@@UAAPAXI@Z| ; I2SSlaveProfile_t::`vector deleting destructor', I2SSlaveProfile_t::`scalar deleting destructor'
	IMPORT	|?Initialize@I2SSlaveProfile_t@@UAAXXZ|	; I2SSlaveProfile_t::Initialize
	IMPORT	|?ContextRestore@I2SSlaveProfile_t@@UAAXXZ| ; I2SSlaveProfile_t::ContextRestore

  00000			 AREA	 |.pdata|, PDATA
|$T38176| DCD	|$LN7@I2SSlavePr|
	DCD	0x40000600

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7I2SSlaveProfile_t@@6B@| DCD |??_EI2SSlaveProfile_t@@UAAPAXI@Z| ; I2SSlaveProfile_t::`vftable'
	DCD	|?Initialize@I2SSlaveProfile_t@@UAAXXZ|
	DCD	|?ContextRestore@I2SSlaveProfile_t@@UAAXXZ|
	DCD	|?EnableSampleRateGenerator@McbspProfile_t@@UAAXXZ|
	DCD	|?EnableTransmitter@McbspProfile_t@@UAAXXZ|
	DCD	|?EnableReceiver@McbspProfile_t@@UAAXXZ|
	DCD	|?ResetSampleRateGenerator@McbspProfile_t@@UAAXXZ|
	DCD	|?ResetTransmitter@McbspProfile_t@@UAAXXZ|
	DCD	|?ResetReceiver@McbspProfile_t@@UAAXXZ|
	DCD	|?ClearIRQStatus@McbspProfile_t@@UAAXXZ|
	DCD	|?GetMode@I2SSlaveProfile_t@@UAA?AW4McBSPProfile_e@@XZ|
	DCD	|?SetTxChannelsRequested@I2SSlaveProfile_t@@UAAXXZ|
	DCD	|?SetRxChannelsRequested@I2SSlaveProfile_t@@UAAXXZ|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0I2SSlaveProfile_t@@QAA@PAUMcBSPDevice_t@@@Z| PROC ; I2SSlaveProfile_t::I2SSlaveProfile_t

; 67   :         {

  00000		 |$LN7@I2SSlavePr|
  00000		 |$M38173|
  00000	e1a02000	 mov         r2, r0
  00004	e59f3008	 ldr         r3, [pc, #8]
  00008	e5821004	 str         r1, [r2, #4]

; 68   :         DEBUGMSG(ZONE_FUNCTION, (L"MCP:*%S\r\n", __FUNCTION__));
; 69   :         }

  0000c	e5823000	 str         r3, [r2]
  00010	e12fff1e	 bx          lr
  00014		 |$LN8@I2SSlavePr|
  00014		 |$LN9@I2SSlavePr|
  00014	00000000	 DCD         |??_7I2SSlaveProfile_t@@6B@|
  00018		 |$M38174|

			 ENDP  ; |??0I2SSlaveProfile_t@@QAA@PAUMcBSPDevice_t@@@Z|, I2SSlaveProfile_t::I2SSlaveProfile_t

	EXPORT	|??1I2SSlaveProfile_t@@UAA@XZ|		; I2SSlaveProfile_t::~I2SSlaveProfile_t

  00000			 AREA	 |.pdata|, PDATA
|$T38189| DCD	|$LN7@I2SSlavePr@2|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1I2SSlaveProfile_t@@UAA@XZ| PROC	; I2SSlaveProfile_t::~I2SSlaveProfile_t

; 70   :     virtual ~I2SSlaveProfile_t() {};

  00000		 |$LN7@I2SSlavePr@2|
  00000		 |$M38186|
  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5803000	 str         r3, [r0]
  00008	e12fff1e	 bx          lr
  0000c		 |$LN8@I2SSlavePr@2|
  0000c		 |$LN9@I2SSlavePr@2|
  0000c	00000000	 DCD         |??_7McbspProfile_t@@6B@|
  00010		 |$M38187|

			 ENDP  ; |??1I2SSlaveProfile_t@@UAA@XZ|, I2SSlaveProfile_t::~I2SSlaveProfile_t


  00000			 AREA	 |.pdata|, PDATA
|$T38200| DCD	|$LN5@GetMode|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetMode@I2SSlaveProfile_t@@UAA?AW4McBSPProfile_e@@XZ| PROC ; I2SSlaveProfile_t::GetMode

; 76   :         {

  00000		 |$LN5@GetMode|
  00000		 |$M38197|

; 77   :         return kMcBSPProfile_I2S_Slave;

  00000	e3a00000	 mov         r0, #0

; 78   :         }

  00004	e12fff1e	 bx          lr
  00008		 |$M38198|

			 ENDP  ; |?GetMode@I2SSlaveProfile_t@@UAA?AW4McBSPProfile_e@@XZ|, I2SSlaveProfile_t::GetMode


  00000			 AREA	 |.pdata|, PDATA
|$T38207| DCD	|$LN5@SetTxChann|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetTxChannelsRequested@I2SSlaveProfile_t@@UAAXXZ| PROC ; I2SSlaveProfile_t::SetTxChannelsRequested

; 79   :     void SetTxChannelsRequested() {};

  00000		 |$LN5@SetTxChann|
  00000		 |$M38204|
  00000	e12fff1e	 bx          lr
  00004		 |$M38205|

			 ENDP  ; |?SetTxChannelsRequested@I2SSlaveProfile_t@@UAAXXZ|, I2SSlaveProfile_t::SetTxChannelsRequested


  00000			 AREA	 |.pdata|, PDATA
|$T38214| DCD	|$LN5@SetRxChann|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetRxChannelsRequested@I2SSlaveProfile_t@@UAAXXZ| PROC ; I2SSlaveProfile_t::SetRxChannelsRequested

; 80   :     void SetRxChannelsRequested() {};

  00000		 |$LN5@SetRxChann|
  00000		 |$M38211|
  00000	e12fff1e	 bx          lr
  00004		 |$M38212|

			 ENDP  ; |?SetRxChannelsRequested@I2SSlaveProfile_t@@UAAXXZ|, I2SSlaveProfile_t::SetRxChannelsRequested


  00000			 AREA	 |.pdata|, PDATA
|$T38233| DCD	|$LN10@scalar@2|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GI2SSlaveProfile_t@@UAAPAXI@Z| PROC ; I2SSlaveProfile_t::`scalar deleting destructor'
  00000		 |$LN10@scalar@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M38230|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3014	 ldr         r3, [pc, #0x14]
  0000c	e3110001	 tst         r1, #1
  00010	e5843000	 str         r3, [r4]
  00014	1b000000	 blne        |??3@YAXPAX@Z|
  00018	e1a00004	 mov         r0, r4
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN11@scalar@2|
  00024		 |$LN12@scalar@2|
  00024	00000000	 DCD         |??_7McbspProfile_t@@6B@|
  00028		 |$M38231|

			 ENDP  ; |??_GI2SSlaveProfile_t@@UAAPAXI@Z|, I2SSlaveProfile_t::`scalar deleting destructor'

	EXPORT	|??0I2SMasterProfile_t@@QAA@PAUMcBSPDevice_t@@@Z| ; I2SMasterProfile_t::I2SMasterProfile_t
	EXPORT	|??_7I2SMasterProfile_t@@6B@| [ DATA ]	; I2SMasterProfile_t::`vftable'
	EXPORT	|?GetMode@I2SMasterProfile_t@@UAA?AW4McBSPProfile_e@@XZ| ; I2SMasterProfile_t::GetMode
	EXPORT	|?SetTxChannelsRequested@I2SMasterProfile_t@@UAAXXZ| ; I2SMasterProfile_t::SetTxChannelsRequested
	EXPORT	|?SetRxChannelsRequested@I2SMasterProfile_t@@UAAXXZ| ; I2SMasterProfile_t::SetRxChannelsRequested
	IMPORT	|??_EI2SMasterProfile_t@@UAAPAXI@Z|, WEAK |??_GI2SMasterProfile_t@@UAAPAXI@Z| ; I2SMasterProfile_t::`vector deleting destructor', I2SMasterProfile_t::`scalar deleting destructor'
	IMPORT	|?Initialize@I2SMasterProfile_t@@UAAXXZ| ; I2SMasterProfile_t::Initialize
	IMPORT	|?ContextRestore@I2SMasterProfile_t@@UAAXXZ| ; I2SMasterProfile_t::ContextRestore

  00000			 AREA	 |.pdata|, PDATA
|$T38249| DCD	|$LN7@I2SMasterP|
	DCD	0x40000600

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7I2SMasterProfile_t@@6B@| DCD |??_EI2SMasterProfile_t@@UAAPAXI@Z| ; I2SMasterProfile_t::`vftable'
	DCD	|?Initialize@I2SMasterProfile_t@@UAAXXZ|
	DCD	|?ContextRestore@I2SMasterProfile_t@@UAAXXZ|
	DCD	|?EnableSampleRateGenerator@McbspProfile_t@@UAAXXZ|
	DCD	|?EnableTransmitter@McbspProfile_t@@UAAXXZ|
	DCD	|?EnableReceiver@McbspProfile_t@@UAAXXZ|
	DCD	|?ResetSampleRateGenerator@McbspProfile_t@@UAAXXZ|
	DCD	|?ResetTransmitter@McbspProfile_t@@UAAXXZ|
	DCD	|?ResetReceiver@McbspProfile_t@@UAAXXZ|
	DCD	|?ClearIRQStatus@McbspProfile_t@@UAAXXZ|
	DCD	|?GetMode@I2SMasterProfile_t@@UAA?AW4McBSPProfile_e@@XZ|
	DCD	|?SetTxChannelsRequested@I2SMasterProfile_t@@UAAXXZ|
	DCD	|?SetRxChannelsRequested@I2SMasterProfile_t@@UAAXXZ|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0I2SMasterProfile_t@@QAA@PAUMcBSPDevice_t@@@Z| PROC ; I2SMasterProfile_t::I2SMasterProfile_t

; 95   :         {

  00000		 |$LN7@I2SMasterP|
  00000		 |$M38246|
  00000	e1a02000	 mov         r2, r0
  00004	e59f3008	 ldr         r3, [pc, #8]
  00008	e5821004	 str         r1, [r2, #4]

; 96   :         DEBUGMSG(ZONE_FUNCTION, (L"MCP:*%S\r\n", __FUNCTION__));
; 97   :         }

  0000c	e5823000	 str         r3, [r2]
  00010	e12fff1e	 bx          lr
  00014		 |$LN8@I2SMasterP|
  00014		 |$LN9@I2SMasterP|
  00014	00000000	 DCD         |??_7I2SMasterProfile_t@@6B@|
  00018		 |$M38247|

			 ENDP  ; |??0I2SMasterProfile_t@@QAA@PAUMcBSPDevice_t@@@Z|, I2SMasterProfile_t::I2SMasterProfile_t

	EXPORT	|??1I2SMasterProfile_t@@UAA@XZ|		; I2SMasterProfile_t::~I2SMasterProfile_t

  00000			 AREA	 |.pdata|, PDATA
|$T38262| DCD	|$LN7@I2SMasterP@2|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1I2SMasterProfile_t@@UAA@XZ| PROC	; I2SMasterProfile_t::~I2SMasterProfile_t

; 98   :     virtual ~I2SMasterProfile_t() {};

  00000		 |$LN7@I2SMasterP@2|
  00000		 |$M38259|
  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5803000	 str         r3, [r0]
  00008	e12fff1e	 bx          lr
  0000c		 |$LN8@I2SMasterP@2|
  0000c		 |$LN9@I2SMasterP@2|
  0000c	00000000	 DCD         |??_7McbspProfile_t@@6B@|
  00010		 |$M38260|

			 ENDP  ; |??1I2SMasterProfile_t@@UAA@XZ|, I2SMasterProfile_t::~I2SMasterProfile_t


  00000			 AREA	 |.pdata|, PDATA
|$T38273| DCD	|$LN5@GetMode@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetMode@I2SMasterProfile_t@@UAA?AW4McBSPProfile_e@@XZ| PROC ; I2SMasterProfile_t::GetMode

; 104  :         {

  00000		 |$LN5@GetMode@2|
  00000		 |$M38270|

; 105  :         return kMcBSPProfile_I2S_Master;

  00000	e3a00001	 mov         r0, #1

; 106  :         }

  00004	e12fff1e	 bx          lr
  00008		 |$M38271|

			 ENDP  ; |?GetMode@I2SMasterProfile_t@@UAA?AW4McBSPProfile_e@@XZ|, I2SMasterProfile_t::GetMode


  00000			 AREA	 |.pdata|, PDATA
|$T38280| DCD	|$LN5@SetTxChann@2|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetTxChannelsRequested@I2SMasterProfile_t@@UAAXXZ| PROC ; I2SMasterProfile_t::SetTxChannelsRequested

; 107  :     void SetTxChannelsRequested() {};

  00000		 |$LN5@SetTxChann@2|
  00000		 |$M38277|
  00000	e12fff1e	 bx          lr
  00004		 |$M38278|

			 ENDP  ; |?SetTxChannelsRequested@I2SMasterProfile_t@@UAAXXZ|, I2SMasterProfile_t::SetTxChannelsRequested


  00000			 AREA	 |.pdata|, PDATA
|$T38287| DCD	|$LN5@SetRxChann@2|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetRxChannelsRequested@I2SMasterProfile_t@@UAAXXZ| PROC ; I2SMasterProfile_t::SetRxChannelsRequested

; 108  :     void SetRxChannelsRequested() {};

  00000		 |$LN5@SetRxChann@2|
  00000		 |$M38284|
  00000	e12fff1e	 bx          lr
  00004		 |$M38285|

			 ENDP  ; |?SetRxChannelsRequested@I2SMasterProfile_t@@UAAXXZ|, I2SMasterProfile_t::SetRxChannelsRequested


  00000			 AREA	 |.pdata|, PDATA
|$T38306| DCD	|$LN10@scalar@3|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GI2SMasterProfile_t@@UAAPAXI@Z| PROC ; I2SMasterProfile_t::`scalar deleting destructor'
  00000		 |$LN10@scalar@3|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M38303|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3014	 ldr         r3, [pc, #0x14]
  0000c	e3110001	 tst         r1, #1
  00010	e5843000	 str         r3, [r4]
  00014	1b000000	 blne        |??3@YAXPAX@Z|
  00018	e1a00004	 mov         r0, r4
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN11@scalar@3|
  00024		 |$LN12@scalar@3|
  00024	00000000	 DCD         |??_7McbspProfile_t@@6B@|
  00028		 |$M38304|

			 ENDP  ; |??_GI2SMasterProfile_t@@UAAPAXI@Z|, I2SMasterProfile_t::`scalar deleting destructor'

	EXPORT	|??0TDMProfile_t@@QAA@PAUMcBSPDevice_t@@@Z| ; TDMProfile_t::TDMProfile_t
	EXPORT	|??_7TDMProfile_t@@6B@| [ DATA ]	; TDMProfile_t::`vftable'
	EXPORT	|?GetMode@TDMProfile_t@@UAA?AW4McBSPProfile_e@@XZ| ; TDMProfile_t::GetMode
	IMPORT	|??_ETDMProfile_t@@UAAPAXI@Z|, WEAK |??_GTDMProfile_t@@UAAPAXI@Z| ; TDMProfile_t::`vector deleting destructor', TDMProfile_t::`scalar deleting destructor'
	IMPORT	|?Initialize@TDMProfile_t@@UAAXXZ|	; TDMProfile_t::Initialize
	IMPORT	|?ContextRestore@TDMProfile_t@@UAAXXZ|	; TDMProfile_t::ContextRestore
	IMPORT	|?SetTxChannelsRequested@TDMProfile_t@@UAAXXZ| ; TDMProfile_t::SetTxChannelsRequested
	IMPORT	|?SetRxChannelsRequested@TDMProfile_t@@UAAXXZ| ; TDMProfile_t::SetRxChannelsRequested

  00000			 AREA	 |.pdata|, PDATA
|$T38322| DCD	|$LN7@TDMProfile|
	DCD	0x40000600

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7TDMProfile_t@@6B@| DCD |??_ETDMProfile_t@@UAAPAXI@Z| ; TDMProfile_t::`vftable'
	DCD	|?Initialize@TDMProfile_t@@UAAXXZ|
	DCD	|?ContextRestore@TDMProfile_t@@UAAXXZ|
	DCD	|?EnableSampleRateGenerator@McbspProfile_t@@UAAXXZ|
	DCD	|?EnableTransmitter@McbspProfile_t@@UAAXXZ|
	DCD	|?EnableReceiver@McbspProfile_t@@UAAXXZ|
	DCD	|?ResetSampleRateGenerator@McbspProfile_t@@UAAXXZ|
	DCD	|?ResetTransmitter@McbspProfile_t@@UAAXXZ|
	DCD	|?ResetReceiver@McbspProfile_t@@UAAXXZ|
	DCD	|?ClearIRQStatus@McbspProfile_t@@UAAXXZ|
	DCD	|?GetMode@TDMProfile_t@@UAA?AW4McBSPProfile_e@@XZ|
	DCD	|?SetTxChannelsRequested@TDMProfile_t@@UAAXXZ|
	DCD	|?SetRxChannelsRequested@TDMProfile_t@@UAAXXZ|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0TDMProfile_t@@QAA@PAUMcBSPDevice_t@@@Z| PROC ; TDMProfile_t::TDMProfile_t

; 122  :         {

  00000		 |$LN7@TDMProfile|
  00000		 |$M38319|
  00000	e1a02000	 mov         r2, r0
  00004	e59f3008	 ldr         r3, [pc, #8]
  00008	e5821004	 str         r1, [r2, #4]

; 123  :         DEBUGMSG(ZONE_FUNCTION, (L"MCP:*%S\r\n", __FUNCTION__));
; 124  :         }

  0000c	e5823000	 str         r3, [r2]
  00010	e12fff1e	 bx          lr
  00014		 |$LN8@TDMProfile|
  00014		 |$LN9@TDMProfile|
  00014	00000000	 DCD         |??_7TDMProfile_t@@6B@|
  00018		 |$M38320|

			 ENDP  ; |??0TDMProfile_t@@QAA@PAUMcBSPDevice_t@@@Z|, TDMProfile_t::TDMProfile_t

	EXPORT	|??1TDMProfile_t@@UAA@XZ|		; TDMProfile_t::~TDMProfile_t

  00000			 AREA	 |.pdata|, PDATA
|$T38335| DCD	|$LN7@TDMProfile@2|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1TDMProfile_t@@UAA@XZ| PROC		; TDMProfile_t::~TDMProfile_t

; 125  :     virtual ~TDMProfile_t() {};

  00000		 |$LN7@TDMProfile@2|
  00000		 |$M38332|
  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5803000	 str         r3, [r0]
  00008	e12fff1e	 bx          lr
  0000c		 |$LN8@TDMProfile@2|
  0000c		 |$LN9@TDMProfile@2|
  0000c	00000000	 DCD         |??_7McbspProfile_t@@6B@|
  00010		 |$M38333|

			 ENDP  ; |??1TDMProfile_t@@UAA@XZ|, TDMProfile_t::~TDMProfile_t


  00000			 AREA	 |.pdata|, PDATA
|$T38346| DCD	|$LN5@GetMode@3|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetMode@TDMProfile_t@@UAA?AW4McBSPProfile_e@@XZ| PROC ; TDMProfile_t::GetMode

; 131  :         {

  00000		 |$LN5@GetMode@3|
  00000		 |$M38343|

; 132  :         return kMcBSPProfile_TDM;

  00000	e3a00002	 mov         r0, #2

; 133  :         }

  00004	e12fff1e	 bx          lr
  00008		 |$M38344|

			 ENDP  ; |?GetMode@TDMProfile_t@@UAA?AW4McBSPProfile_e@@XZ|, TDMProfile_t::GetMode


  00000			 AREA	 |.pdata|, PDATA
|$T38365| DCD	|$LN10@scalar@4|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GTDMProfile_t@@UAAPAXI@Z| PROC	; TDMProfile_t::`scalar deleting destructor'
  00000		 |$LN10@scalar@4|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M38362|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3014	 ldr         r3, [pc, #0x14]
  0000c	e3110001	 tst         r1, #1
  00010	e5843000	 str         r3, [r4]
  00014	1b000000	 blne        |??3@YAXPAX@Z|
  00018	e1a00004	 mov         r0, r4
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN11@scalar@4|
  00024		 |$LN12@scalar@4|
  00024	00000000	 DCD         |??_7McbspProfile_t@@6B@|
  00028		 |$M38363|

			 ENDP  ; |??_GTDMProfile_t@@UAAPAXI@Z|, TDMProfile_t::`scalar deleting destructor'

	EXPORT	|?SetMaxLoopCount@DataPort_t@@QAAXXZ|	; DataPort_t::SetMaxLoopCount
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.h

  00000			 AREA	 |.pdata|, PDATA
|$T38375| DCD	|$LN5@SetMaxLoop|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetMaxLoopCount@DataPort_t@@QAAXXZ| PROC ; DataPort_t::SetMaxLoopCount

; 79   :     {

  00000		 |$LN5@SetMaxLoop|
  00000		 |$M38372|

; 80   :         m_DmaLoopCounter = DMA_SAFETY_LOOP_NUM;

  00000	e3e03102	 mvn         r3, #2, 2
  00004	e5803020	 str         r3, [r0, #0x20]

; 81   :     }

  00008	e12fff1e	 bx          lr
  0000c		 |$M38373|

			 ENDP  ; |?SetMaxLoopCount@DataPort_t@@QAAXXZ|, DataPort_t::SetMaxLoopCount

	EXPORT	|?GetSamplesPerPage@DataPort_t@@QBAHXZ|	; DataPort_t::GetSamplesPerPage

  00000			 AREA	 |.pdata|, PDATA
|$T38385| DCD	|$LN5@GetSamples|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetSamplesPerPage@DataPort_t@@QBAHXZ| PROC ; DataPort_t::GetSamplesPerPage

; 89   :     {

  00000		 |$LN5@GetSamples|
  00000		 |$M38382|

; 90   :         return m_SamplesPerPage;

  00000	e5900050	 ldr         r0, [r0, #0x50]

; 91   :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M38383|

			 ENDP  ; |?GetSamplesPerPage@DataPort_t@@QBAHXZ|, DataPort_t::GetSamplesPerPage

	EXPORT	|?DecrementLoopCount@DataPort_t@@QAAHXZ| ; DataPort_t::DecrementLoopCount

  00000			 AREA	 |.pdata|, PDATA
|$T38395| DCD	|$LN5@DecrementL|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DecrementLoopCount@DataPort_t@@QAAHXZ| PROC ; DataPort_t::DecrementLoopCount

; 94   :     {

  00000		 |$LN5@DecrementL|
  00000		 |$M38392|

; 95   :         return --m_DmaLoopCounter;

  00000	e5903020	 ldr         r3, [r0, #0x20]
  00004	e2433001	 sub         r3, r3, #1
  00008	e5803020	 str         r3, [r0, #0x20]
  0000c	e1a00003	 mov         r0, r3

; 96   :     }

  00010	e12fff1e	 bx          lr
  00014		 |$M38393|

			 ENDP  ; |?DecrementLoopCount@DataPort_t@@QAAHXZ|, DataPort_t::DecrementLoopCount

	EXPORT	|?GetDmaInfo@DataPort_t@@QAAPAUDmaDataInfo_t@@XZ| ; DataPort_t::GetDmaInfo

  00000			 AREA	 |.pdata|, PDATA
|$T38405| DCD	|$LN5@GetDmaInfo|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDmaInfo@DataPort_t@@QAAPAUDmaDataInfo_t@@XZ| PROC ; DataPort_t::GetDmaInfo

; 99   :     {

  00000		 |$LN5@GetDmaInfo|
  00000		 |$M38402|

; 100  :         return &m_DmaInfo;

  00000	e2800004	 add         r0, r0, #4

; 101  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M38403|

			 ENDP  ; |?GetDmaInfo@DataPort_t@@QAAPAUDmaDataInfo_t@@XZ|, DataPort_t::GetDmaInfo

	EXPORT	|?GetState@DataPort_t@@QBA?AW4McBSPPortState_e@@XZ| ; DataPort_t::GetState

  00000			 AREA	 |.pdata|, PDATA
|$T38415| DCD	|$LN5@GetState|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetState@DataPort_t@@QBA?AW4McBSPPortState_e@@XZ| PROC ; DataPort_t::GetState

; 104  :     {

  00000		 |$LN5@GetState|
  00000		 |$M38412|

; 105  :         return m_PortState;

  00000	e5900024	 ldr         r0, [r0, #0x24]

; 106  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M38413|

			 ENDP  ; |?GetState@DataPort_t@@QBA?AW4McBSPPortState_e@@XZ|, DataPort_t::GetState

	EXPORT	|?Lock@DataPort_t@@QAAXXZ|		; DataPort_t::Lock

  00000			 AREA	 |.pdata|, PDATA
|$T38422| DCD	|$LN5@Lock|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@DataPort_t@@QAAXXZ| PROC	; DataPort_t::Lock

; 108  :     void Lock()    {}

  00000		 |$LN5@Lock|
  00000		 |$M38419|
  00000	e12fff1e	 bx          lr
  00004		 |$M38420|

			 ENDP  ; |?Lock@DataPort_t@@QAAXXZ|, DataPort_t::Lock

	EXPORT	|?Unlock@DataPort_t@@QAAXXZ|		; DataPort_t::Unlock

  00000			 AREA	 |.pdata|, PDATA
|$T38429| DCD	|$LN5@Unlock|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Unlock@DataPort_t@@QAAXXZ| PROC	; DataPort_t::Unlock

; 109  :     void Unlock()  {}

  00000		 |$LN5@Unlock|
  00000		 |$M38426|
  00000	e12fff1e	 bx          lr
  00004		 |$M38427|

			 ENDP  ; |?Unlock@DataPort_t@@QAAXXZ|, DataPort_t::Unlock

	EXPORT	|?RequestDmaStop@DataPort_t@@QAAXXZ|	; DataPort_t::RequestDmaStop

  00000			 AREA	 |.pdata|, PDATA
|$T38437| DCD	|$LN6@RequestDma|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RequestDmaStop@DataPort_t@@QAAXXZ| PROC ; DataPort_t::RequestDmaStop

; 122  :     {

  00000		 |$LN6@RequestDma|
  00000		 |$M38434|

; 123  :         if (m_DmaLoopCounter) m_DmaLoopCounter = 1;

  00000	e5903020	 ldr         r3, [r0, #0x20]
  00004	e3530000	 cmp         r3, #0
  00008	13a03001	 movne       r3, #1
  0000c	15803020	 strne       r3, [r0, #0x20]

; 124  :     }

  00010	e12fff1e	 bx          lr
  00014		 |$M38435|

			 ENDP  ; |?RequestDmaStop@DataPort_t@@QAAXXZ|, DataPort_t::RequestDmaStop

	EXPORT	|?GetActiveInstance@DataPort_t@@QBAPAUMcBSPInstance_t@@XZ| ; DataPort_t::GetActiveInstance

  00000			 AREA	 |.pdata|, PDATA
|$T38447| DCD	|$LN5@GetActiveI|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetActiveInstance@DataPort_t@@QBAPAUMcBSPInstance_t@@XZ| PROC ; DataPort_t::GetActiveInstance

; 127  :     {

  00000		 |$LN5@GetActiveI|
  00000		 |$M38444|

; 128  :         return m_pActiveInstance;

  00000	e5900054	 ldr         r0, [r0, #0x54]

; 129  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M38445|

			 ENDP  ; |?GetActiveInstance@DataPort_t@@QBAPAUMcBSPInstance_t@@XZ|, DataPort_t::GetActiveInstance

	EXPORT	|?SetActiveInstance@DataPort_t@@QAAXPAUMcBSPInstance_t@@@Z| ; DataPort_t::SetActiveInstance

  00000			 AREA	 |.pdata|, PDATA
|$T38456| DCD	|$LN5@SetActiveI|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetActiveInstance@DataPort_t@@QAAXPAUMcBSPInstance_t@@@Z| PROC ; DataPort_t::SetActiveInstance

; 132  :     {

  00000		 |$LN5@SetActiveI|
  00000		 |$M38453|

; 133  :         m_pActiveInstance = pInstance;

  00000	e5801054	 str         r1, [r0, #0x54]

; 134  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M38454|

			 ENDP  ; |?SetActiveInstance@DataPort_t@@QAAXPAUMcBSPInstance_t@@@Z|, DataPort_t::SetActiveInstance

	EXPORT	|MCP_Open|
	IMPORT	|InterlockedIncrement|
	IMPORT	|LocalAlloc|
	IMPORT	|memset|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\mcbsp.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T38469| DCD	|$LN10@MCP_Open|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MCP_Open| PROC

; 588  : {

  00000		 |$LN10@MCP_Open|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M38466|
  00004	e1b05000	 movs        r5, r0

; 589  :     DWORD rc = (DWORD)NULL;

  00008	e3a04000	 mov         r4, #0

; 590  :     McBSPDevice_t *pDevice = (McBSPDevice_t*)context;
; 591  :     McBSPInstance_t *pInstance = NULL;
; 592  : 
; 593  : 	UNREFERENCED_PARAMETER(shareMode);
; 594  : 	UNREFERENCED_PARAMETER(accessCode);
; 595  : 
; 596  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x,0x%08x, 0x%08x)\r\n",
; 597  :         __FUNCTION__, context, accessCode, shareMode
; 598  :         ));
; 599  : 
; 600  :     // Check if we get correct context
; 601  :     if ((pDevice == NULL) ||
; 602  :         (pDevice->cookie != MCBSP_DEVICE_COOKIE))

  0000c	0a000011	 beq         |$cleanUp$37531|
  00010	e5952000	 ldr         r2, [r5]
  00014	e59f304c	 ldr         r3, [pc, #0x4C]
  00018	e1520003	 cmp         r2, r3
  0001c	1a00000d	 bne         |$cleanUp$37531|

; 603  :         {
; 604  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Open: "
; 605  :             L"Incorrect context parameter\r\n"
; 606  :             ));
; 607  :         goto cleanUp;
; 608  :         }
; 609  : 
; 610  :     // Create device structure
; 611  :     pInstance = (McBSPInstance_t*)LocalAlloc(LPTR, sizeof(McBSPInstance_t));

  00020	e3a01020	 mov         r1, #0x20
  00024	e3a00040	 mov         r0, #0x40
  00028	eb000000	 bl          LocalAlloc
  0002c	e1b06000	 movs        r6, r0

; 612  :     if (pInstance == NULL)

  00030	0a000008	 beq         |$cleanUp$37531|

; 613  :         {
; 614  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Open: "
; 615  :             L"Failed allocate BSP instance structure\r\n"
; 616  :             ));
; 617  :         goto cleanUp;
; 618  :         }
; 619  : 
; 620  :     // Set cookie
; 621  :     memset(pInstance, 0, sizeof(McBSPInstance_t));

  00034	e3a02020	 mov         r2, #0x20
  00038	e3a01000	 mov         r1, #0
  0003c	e1a00006	 mov         r0, r6
  00040	eb000000	 bl          memset

; 622  :     pInstance->cookie = MCBSP_INSTANCE_COOKIE;

  00044	e59f3018	 ldr         r3, [pc, #0x18]

; 623  : 
; 624  :     // Save device reference
; 625  :     pInstance->pDevice = pDevice;
; 626  : 
; 627  :     // Increment number of open instances
; 628  :     InterlockedIncrement(&pDevice->instances);

  00048	e2850004	 add         r0, r5, #4
  0004c	e8860028	 stmia       r6, {r3, r5}
  00050	eb000000	 bl          InterlockedIncrement

; 629  : 
; 630  :     // Sanity check number of instances
; 631  :     ASSERT(pDevice->instances > 0);
; 632  : 
; 633  :     // Done...
; 634  :     rc = (DWORD)pInstance;

  00054	e1a04006	 mov         r4, r6
  00058		 |$cleanUp$37531|

; 635  : 
; 636  : cleanUp:
; 637  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S(rc = 0x%08x)\r\n", __FUNCTION__, rc));
; 638  :     return rc;
; 639  : }

  00058	e1a00004	 mov         r0, r4
  0005c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN11@MCP_Open|
  00064		 |$LN12@MCP_Open|
  00064	62737049	 DCD         0x62737049
  00068		 |$LN13@MCP_Open|
  00068	62737044	 DCD         0x62737044
  0006c		 |$M38467|

			 ENDP  ; |MCP_Open|

	EXPORT	|MCP_Close|
	IMPORT	|LocalFree|
	IMPORT	|InterlockedDecrement|

  00000			 AREA	 |.pdata|, PDATA
|$T38483| DCD	|$LN8@MCP_Close|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MCP_Close| PROC

; 654  : {

  00000		 |$LN8@MCP_Close|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M38480|
  00004	e1b04000	 movs        r4, r0

; 655  :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 656  :     McBSPDevice_t *pDevice;
; 657  :     McBSPInstance_t *pInstance = (McBSPInstance_t*)context;
; 658  : 
; 659  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, context));
; 660  : 
; 661  :     // Check if we get correct context
; 662  :     if ((pInstance == NULL) ||
; 663  :         (pInstance->cookie != MCBSP_INSTANCE_COOKIE))

  0000c	0a000009	 beq         |$cleanUp$37553|
  00010	e5942000	 ldr         r2, [r4]
  00014	e59f3024	 ldr         r3, [pc, #0x24]
  00018	e1520003	 cmp         r2, r3
  0001c	1a000005	 bne         |$cleanUp$37553|

; 664  :         {
; 665  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Close: "
; 666  :             L"Incorrect context paramer\r\n"
; 667  :             ));
; 668  :         goto cleanUp;
; 669  :         }
; 670  : 
; 671  :     // Get device context
; 672  :     pDevice = pInstance->pDevice;
; 673  : 
; 674  :     // Sanity check number of instances
; 675  :     ASSERT(pDevice->instances > 0);
; 676  : 
; 677  :     // Decrement number of open instances
; 678  :     InterlockedDecrement(&pDevice->instances);

  00020	e5943004	 ldr         r3, [r4, #4]
  00024	e2830004	 add         r0, r3, #4
  00028	eb000000	 bl          InterlockedDecrement

; 679  : 
; 680  :     // Free instance structure
; 681  :     LocalFree(pInstance);

  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          LocalFree

; 682  : 
; 683  :     // Done...
; 684  :     rc = TRUE;

  00034	e3a00001	 mov         r0, #1
  00038		 |$cleanUp$37553|

; 685  : 
; 686  : cleanUp:
; 687  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S(rc = 0x%08x)\r\n", __FUNCTION__, rc));
; 688  :     return rc;
; 689  : }

  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN9@MCP_Close|
  00040		 |$LN10@MCP_Close|
  00040	62737049	 DCD         0x62737049
  00044		 |$M38481|

			 ENDP  ; |MCP_Close|

	EXPORT	|ClearTransferInfo|

  00000			 AREA	 |.pdata|, PDATA
|$T38493| DCD	|$LN5@ClearTrans|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ClearTransferInfo| PROC

; 872  : {

  00000		 |$LN5@ClearTrans|
  00000		 |$M38490|

; 873  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S\r\n", __FUNCTION__));
; 874  : 
; 875  :     pInstance->pTransferCallback = NULL;

  00000	e3a03000	 mov         r3, #0
  00004	e5803008	 str         r3, [r0, #8]

; 876  :     pInstance->fnRxCommand = NULL;

  00008	e5803014	 str         r3, [r0, #0x14]

; 877  :     pInstance->fnRxPopulateBuffer = NULL;

  0000c	e5803010	 str         r3, [r0, #0x10]

; 878  :     pInstance->fnTxCommand = NULL;

  00010	e5803018	 str         r3, [r0, #0x18]

; 879  :     pInstance->fnTxPopulateBuffer = NULL;

  00014	e580300c	 str         r3, [r0, #0xC]

; 880  :     pInstance->fnMutexLock = NULL;

  00018	e580301c	 str         r3, [r0, #0x1C]

; 881  : 
; 882  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 883  : }

  0001c	e12fff1e	 bx          lr
  00020		 |$M38491|

			 ENDP  ; |ClearTransferInfo|

	EXPORT	|EnableClocks|
	IMPORT	|SetDevicePowerState|

  00000			 AREA	 |.pdata|, PDATA
|$T38502| DCD	|$LN9@EnableCloc|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EnableClocks| PROC

; 896  : {

  00000		 |$LN9@EnableCloc|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M38499|
  00004	e3510000	 cmp         r1, #0
  00008	e1a04000	 mov         r4, r0

; 897  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x, %d)\r\n", __FUNCTION__,
; 898  :         pDevice, bEnable
; 899  :         ));
; 900  : 
; 901  :     if (bEnable)

  0000c	0a000009	 beq         |$LN4@EnableCloc|

; 902  :         {
; 903  :         if (pDevice->nActivityRefCount == 0)

  00010	e594307c	 ldr         r3, [r4, #0x7C]
  00014	e3530000	 cmp         r3, #0

; 904  :             {
; 905  :             SetDevicePowerState(pDevice->hParentBus, D0, NULL);

  00018	05940008	 ldreq       r0, [r4, #8]
  0001c	03a02000	 moveq       r2, #0
  00020	03a01000	 moveq       r1, #0
  00024	0b000000	 bleq        SetDevicePowerState

; 906  :             }
; 907  :         InterlockedIncrement(&pDevice->nActivityRefCount);

  00028	e284007c	 add         r0, r4, #0x7C
  0002c	eb000000	 bl          InterlockedIncrement

; 915  :             }
; 916  :         }
; 917  : 
; 918  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 919  : }

  00030	e8bd4010	 ldmia       sp!, {r4, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$LN4@EnableCloc|

; 908  :         }
; 909  :     else
; 910  :         {
; 911  :         InterlockedDecrement(&pDevice->nActivityRefCount);

  00038	e284007c	 add         r0, r4, #0x7C
  0003c	eb000000	 bl          InterlockedDecrement

; 912  :         if (pDevice->nActivityRefCount == 0)

  00040	e594307c	 ldr         r3, [r4, #0x7C]
  00044	e3530000	 cmp         r3, #0

; 913  :             {
; 914  :             SetDevicePowerState(pDevice->hParentBus, D4, NULL);

  00048	05940008	 ldreq       r0, [r4, #8]
  0004c	03a02000	 moveq       r2, #0
  00050	03a01004	 moveq       r1, #4
  00054	0b000000	 bleq        SetDevicePowerState

; 915  :             }
; 916  :         }
; 917  : 
; 918  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 919  : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M38500|

			 ENDP  ; |EnableClocks|

	EXPORT	|StartTransmit|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.h

  00000			 AREA	 |.pdata|, PDATA
|$T38539| DCD	|$LN25@StartTrans|
	DCD	0x40004d01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\mcbsp.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |StartTransmit| PROC

; 932  : {

  00000		 |$LN25@StartTrans|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M38536|
  00004	e1a07000	 mov         r7, r0

; 933  :     INT nActiveStreams = 0;
; 934  :     DataPort_t *pDataPort = pInstance->pDevice->pTxPort;

  00008	e5975004	 ldr         r5, [r7, #4]

; 935  :     McBSPDevice_t *pDevice = pInstance->pDevice;
; 936  : 
; 937  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pInstance));
; 938  : 
; 939  :     pDataPort->Lock();
; 940  : 
; 941  :     // always set the loop counter to maximum loop count on
; 942  :     // start of transmit.  This is to handle the case when
; 943  :     // the last page of data is being rendered while another
; 944  :     // start request is made.  Effectively, prevents the
; 945  :     // the audio from stopping and continues on with new
; 946  :     // data stream
; 947  :     //
; 948  :     pDataPort->SetMaxLoopCount();

  0000c	e3e02102	 mvn         r2, #2, 2
  00010	e5956078	 ldr         r6, [r5, #0x78]

; 949  : 
; 950  :     if (pDataPort->GetState() == kMcBSP_Port_Idle)

  00014	e5963024	 ldr         r3, [r6, #0x24]
  00018	e5862020	 str         r2, [r6, #0x20]
  0001c	e3530001	 cmp         r3, #1
  00020	1a000041	 bne         |$LN2@StartTrans|

; 951  :         {
; 952  :         // start rendering from beginning of buffer
; 953  :         //
; 954  :         pDataPort->ResetDataBuffer();

  00024	e5963000	 ldr         r3, [r6]
  00028	e1a00006	 mov         r0, r6
  0002c	e5933008	 ldr         r3, [r3, #8]
  00030	e1a0e00f	 mov         lr, pc
  00034	e12fff13	 bx          r3

; 955  : 
; 956  :         // retrieve 2 pages worth of audio data to render
; 957  :         //
; 958  :         pDataPort->SetActiveInstance(pInstance);
; 959  :         nActiveStreams = pInstance->fnTxPopulateBuffer(
; 960  :             pDataPort->GetDataBuffer(DataPort_t::kBufferStart),
; 961  :             pInstance->pTransferCallback,
; 962  :             pDataPort->GetDataBufferSize()
; 963  :             );

  00038	e5963000	 ldr         r3, [r6]
  0003c	e1a00006	 mov         r0, r6
  00040	e5867054	 str         r7, [r6, #0x54]
  00044	e5933004	 ldr         r3, [r3, #4]
  00048	e1a0e00f	 mov         lr, pc
  0004c	e12fff13	 bx          r3
  00050	e5963000	 ldr         r3, [r6]
  00054	e1a04000	 mov         r4, r0
  00058	e3a01000	 mov         r1, #0
  0005c	e5933020	 ldr         r3, [r3, #0x20]
  00060	e1a00006	 mov         r0, r6
  00064	e1a0e00f	 mov         lr, pc
  00068	e12fff13	 bx          r3
  0006c	e5971008	 ldr         r1, [r7, #8]
  00070	e597300c	 ldr         r3, [r7, #0xC]
  00074	e1a02004	 mov         r2, r4
  00078	e1a0e00f	 mov         lr, pc
  0007c	e12fff13	 bx          r3

; 964  : 
; 965  :         // do any preprocessing required if we're in left justification
; 966  :         // mode
; 967  :         //
; 968  :         pDataPort->PreprocessDataForRender(
; 969  :             DataPort_t::kBufferStart,
; 970  :             pDataPort->GetSamplesPerPage() * 2
; 971  :             );

  00080	e5963000	 ldr         r3, [r6]
  00084	e5962050	 ldr         r2, [r6, #0x50]
  00088	e3a01000	 mov         r1, #0
  0008c	e5933028	 ldr         r3, [r3, #0x28]
  00090	e1a02082	 mov         r2, r2, lsl #1
  00094	e1a00006	 mov         r0, r6
  00098	e1a0e00f	 mov         lr, pc
  0009c	e12fff13	 bx          r3

; 972  : 
; 973  :         // enable interface clock
; 974  :         //
; 975  :         EnableClocks(pDevice, TRUE);

  000a0	e595307c	 ldr         r3, [r5, #0x7C]
  000a4	e3530000	 cmp         r3, #0
  000a8	05950008	 ldreq       r0, [r5, #8]
  000ac	03a02000	 moveq       r2, #0
  000b0	03a01000	 moveq       r1, #0
  000b4	0b000000	 bleq        SetDevicePowerState
  000b8	e285007c	 add         r0, r5, #0x7C
  000bc	eb000000	 bl          InterlockedIncrement

; 976  :         if (pDevice->fMcBSPActivity == 0)

  000c0	e5953080	 ldr         r3, [r5, #0x80]
  000c4	e3530000	 cmp         r3, #0

; 977  :             {
; 978  :             // turn-on SRG (Sample rate generator)
; 979  :             //
; 980  :             pDevice->pMcbspProfile->EnableSampleRateGenerator();

  000c8	05950070	 ldreq       r0, [r5, #0x70]
  000cc	05903000	 ldreq       r3, [r0]
  000d0	0593300c	 ldreq       r3, [r3, #0xC]
  000d4	01a0e00f	 moveq       lr, pc
  000d8	012fff13	 bxeq        r3

; 981  :             }
; 982  :         pDevice->fMcBSPActivity |= MCBSP_TX_ACTIVE;

  000dc	e5953080	 ldr         r3, [r5, #0x80]

; 983  : 
; 984  :         // Enable transmitter
; 985  :         //
; 986  :         pDevice->pMcbspProfile->EnableTransmitter();

  000e0	e5950070	 ldr         r0, [r5, #0x70]
  000e4	e3833001	 orr         r3, r3, #1
  000e8	e5853080	 str         r3, [r5, #0x80]
  000ec	e5903000	 ldr         r3, [r0]
  000f0	e5933010	 ldr         r3, [r3, #0x10]
  000f4	e1a0e00f	 mov         lr, pc
  000f8	e12fff13	 bx          r3

; 987  : 
; 988  :         // inform client of activation
; 989  :         //
; 990  :         pInstance->fnTxCommand(kExternalDrvrDx_Start,
; 991  :             pInstance->pTransferCallback, NULL
; 992  :             );

  000fc	e5971008	 ldr         r1, [r7, #8]
  00100	e5973018	 ldr         r3, [r7, #0x18]
  00104	e3a02000	 mov         r2, #0
  00108	e3a00001	 mov         r0, #1
  0010c	e1a0e00f	 mov         lr, pc
  00110	e12fff13	 bx          r3

; 993  : 
; 994  :         // Enable DMA for transmitter
; 995  :         //
; 996  :         pDataPort->StartDma(TRUE/*transmit mode*/);

  00114	e5963000	 ldr         r3, [r6]
  00118	e3a01001	 mov         r1, #1
  0011c	e1a00006	 mov         r0, r6
  00120	e5933014	 ldr         r3, [r3, #0x14]
  00124	e1a0e00f	 mov         lr, pc
  00128	e12fff13	 bx          r3
  0012c		 |$LN2@StartTrans|

; 997  :         }
; 998  : 
; 999  :     pDataPort->Unlock();
; 1000 : 
; 1001 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1002 : }

  0012c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00130	e12fff1e	 bx          lr
  00134		 |$M38537|

			 ENDP  ; |StartTransmit|

	EXPORT	|StartReceive|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.h

  00000			 AREA	 |.pdata|, PDATA
|$T38572| DCD	|$LN23@StartRecei|
	DCD	0x40003401
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\mcbsp.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |StartReceive| PROC

; 1015 : {

  00000		 |$LN23@StartRecei|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M38569|
  00004	e1a06000	 mov         r6, r0

; 1016 :     DataPort_t *pDataPort = pInstance->pDevice->pRxPort;

  00008	e5964004	 ldr         r4, [r6, #4]

; 1017 :     McBSPDevice_t *pDevice = pInstance->pDevice;
; 1018 : 
; 1019 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pInstance));
; 1020 : 
; 1021 :     pDataPort->Lock();
; 1022 : 
; 1023 :     pDataPort->SetMaxLoopCount();

  0000c	e3e02102	 mvn         r2, #2, 2
  00010	e5945074	 ldr         r5, [r4, #0x74]

; 1024 : 
; 1025 :     if (pDataPort->GetState() == kMcBSP_Port_Idle)

  00014	e5953024	 ldr         r3, [r5, #0x24]
  00018	e5852020	 str         r2, [r5, #0x20]
  0001c	e3530001	 cmp         r3, #1
  00020	1a000028	 bne         |$LN2@StartRecei|

; 1026 :         {
; 1027 :         // start recording from beginning of buffer
; 1028 :         //
; 1029 :         pDataPort->ResetDataBuffer();

  00024	e5953000	 ldr         r3, [r5]
  00028	e1a00005	 mov         r0, r5
  0002c	e5933008	 ldr         r3, [r3, #8]
  00030	e1a0e00f	 mov         lr, pc
  00034	e12fff13	 bx          r3

; 1030 : 
; 1031 :         // enable interface clock
; 1032 :         //
; 1033 :         EnableClocks(pDevice, TRUE);

  00038	e594307c	 ldr         r3, [r4, #0x7C]
  0003c	e3530000	 cmp         r3, #0
  00040	05940008	 ldreq       r0, [r4, #8]
  00044	03a02000	 moveq       r2, #0
  00048	03a01000	 moveq       r1, #0
  0004c	0b000000	 bleq        SetDevicePowerState
  00050	e284007c	 add         r0, r4, #0x7C
  00054	eb000000	 bl          InterlockedIncrement

; 1034 :         pDataPort->SetActiveInstance(pInstance);

  00058	e5856054	 str         r6, [r5, #0x54]

; 1035 :         if (pDevice->fMcBSPActivity == 0)

  0005c	e5943080	 ldr         r3, [r4, #0x80]
  00060	e3530000	 cmp         r3, #0

; 1036 :             {
; 1037 :             // turn-on SRG (Sample rate generator)
; 1038 :             pDevice->pMcbspProfile->EnableSampleRateGenerator();

  00064	05940070	 ldreq       r0, [r4, #0x70]
  00068	05903000	 ldreq       r3, [r0]
  0006c	0593300c	 ldreq       r3, [r3, #0xC]
  00070	01a0e00f	 moveq       lr, pc
  00074	012fff13	 bxeq        r3

; 1039 :             }
; 1040 :         pDevice->fMcBSPActivity |= MCBSP_RX_ACTIVE;

  00078	e5943080	 ldr         r3, [r4, #0x80]

; 1041 : 
; 1042 :         // Enable recevier
; 1043 :         //
; 1044 :         pDevice->pMcbspProfile->EnableReceiver();

  0007c	e5940070	 ldr         r0, [r4, #0x70]
  00080	e3833002	 orr         r3, r3, #2
  00084	e5843080	 str         r3, [r4, #0x80]
  00088	e5903000	 ldr         r3, [r0]
  0008c	e5933014	 ldr         r3, [r3, #0x14]
  00090	e1a0e00f	 mov         lr, pc
  00094	e12fff13	 bx          r3

; 1045 : 
; 1046 :         // inform client of activation
; 1047 :         //
; 1048 :         pInstance->fnRxCommand(kExternalDrvrDx_Start,
; 1049 :             pInstance->pTransferCallback, NULL
; 1050 :             );

  00098	e5961008	 ldr         r1, [r6, #8]
  0009c	e5963014	 ldr         r3, [r6, #0x14]
  000a0	e3a02000	 mov         r2, #0
  000a4	e3a00001	 mov         r0, #1
  000a8	e1a0e00f	 mov         lr, pc
  000ac	e12fff13	 bx          r3

; 1051 : 
; 1052 :         // Enable dma for receiver
; 1053 :         //
; 1054 :         pDataPort->StartDma(FALSE/*receiver mode*/);

  000b0	e5953000	 ldr         r3, [r5]
  000b4	e3a01000	 mov         r1, #0
  000b8	e1a00005	 mov         r0, r5
  000bc	e5933014	 ldr         r3, [r3, #0x14]
  000c0	e1a0e00f	 mov         lr, pc
  000c4	e12fff13	 bx          r3
  000c8		 |$LN2@StartRecei|

; 1055 :         }
; 1056 : 
; 1057 :     pDataPort->Unlock();
; 1058 : 
; 1059 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1060 : }

  000c8	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000cc	e12fff1e	 bx          lr
  000d0		 |$M38570|

			 ENDP  ; |StartReceive|

	EXPORT	|StopTransmit|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.h

  00000			 AREA	 |.pdata|, PDATA
|$T38606| DCD	|$LN23@StopTransm|
	DCD	0x40002b01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\mcbsp.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |StopTransmit| PROC

; 1073 : {

  00000		 |$LN23@StopTransm|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M38603|
  00004	e1a04000	 mov         r4, r0

; 1074 :     DataPort_t *pDataPort = pDevice->pTxPort;

  00008	e5945078	 ldr         r5, [r4, #0x78]

; 1075 :     McBSPInstance_t *pInstance = pDataPort->GetActiveInstance();
; 1076 : 
; 1077 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S\r\n", __FUNCTION__));
; 1078 : 
; 1079 :     pDataPort->Lock();
; 1080 : 
; 1081 :     if (pDataPort->GetState() == kMcBSP_Port_Active)

  0000c	e5953024	 ldr         r3, [r5, #0x24]
  00010	e5956054	 ldr         r6, [r5, #0x54]
  00014	e3530002	 cmp         r3, #2
  00018	1a000021	 bne         |$LN2@StopTransm|

; 1082 :         {
; 1083 :         // Stop DMA
; 1084 :         //
; 1085 :         pDataPort->StopDma();

  0001c	e5953000	 ldr         r3, [r5]
  00020	e1a00005	 mov         r0, r5
  00024	e5933010	 ldr         r3, [r3, #0x10]
  00028	e1a0e00f	 mov         lr, pc
  0002c	e12fff13	 bx          r3

; 1086 :         pDevice->pMcbspProfile->ResetTransmitter();

  00030	e5940070	 ldr         r0, [r4, #0x70]
  00034	e5903000	 ldr         r3, [r0]
  00038	e593301c	 ldr         r3, [r3, #0x1C]
  0003c	e1a0e00f	 mov         lr, pc
  00040	e12fff13	 bx          r3

; 1087 : 
; 1088 :         // Clear McBSP IRQ Status register
; 1089 :         //
; 1090 :         pDevice->pMcbspProfile->ClearIRQStatus();

  00044	e5940070	 ldr         r0, [r4, #0x70]
  00048	e5903000	 ldr         r3, [r0]
  0004c	e5933024	 ldr         r3, [r3, #0x24]
  00050	e1a0e00f	 mov         lr, pc
  00054	e12fff13	 bx          r3

; 1091 : 
; 1092 :         // if no activity then turn-off power
; 1093 :         //
; 1094 :         pDevice->fMcBSPActivity &= ~MCBSP_TX_ACTIVE;

  00058	e5943080	 ldr         r3, [r4, #0x80]

; 1095 :         if (pDevice->fMcBSPActivity == 0)
; 1096 :             {
; 1097 :             // turn-off SRG (Sample rate generator)
; 1098 :             //pDevice->pMcbspProfile->ResetSampleRateGenerator();
; 1099 :             }
; 1100 : 
; 1101 :         pDataPort->SetActiveInstance(NULL);

  0005c	e3a02000	 mov         r2, #0

; 1102 : 
; 1103 :         // disable interface clock
; 1104 :         EnableClocks(pDevice, FALSE);

  00060	e284007c	 add         r0, r4, #0x7C
  00064	e3c33001	 bic         r3, r3, #1
  00068	e5843080	 str         r3, [r4, #0x80]
  0006c	e5852054	 str         r2, [r5, #0x54]
  00070	eb000000	 bl          InterlockedDecrement
  00074	e594307c	 ldr         r3, [r4, #0x7C]
  00078	e3530000	 cmp         r3, #0
  0007c	05940008	 ldreq       r0, [r4, #8]
  00080	03a02000	 moveq       r2, #0
  00084	03a01004	 moveq       r1, #4
  00088	0b000000	 bleq        SetDevicePowerState

; 1105 : 
; 1106 :         // inform client of state change
; 1107 :         //
; 1108 :         pInstance->fnTxCommand(kExternalDrvrDx_Stop,
; 1109 :             pInstance->pTransferCallback, NULL
; 1110 :             );

  0008c	e5961008	 ldr         r1, [r6, #8]
  00090	e5963018	 ldr         r3, [r6, #0x18]
  00094	e3a02000	 mov         r2, #0
  00098	e3a00000	 mov         r0, #0
  0009c	e1a0e00f	 mov         lr, pc
  000a0	e12fff13	 bx          r3
  000a4		 |$LN2@StopTransm|

; 1111 :         }
; 1112 : 
; 1113 :     pDataPort->Unlock();
; 1114 : 
; 1115 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1116 : }

  000a4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$M38604|

			 ENDP  ; |StopTransmit|

	EXPORT	|StopReceive|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.h

  00000			 AREA	 |.pdata|, PDATA
|$T38640| DCD	|$LN23@StopReceiv|
	DCD	0x40002b01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\mcbsp.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |StopReceive| PROC

; 1129 : {

  00000		 |$LN23@StopReceiv|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M38637|
  00004	e1a04000	 mov         r4, r0

; 1130 :     DataPort_t *pDataPort = pDevice->pRxPort;

  00008	e5945074	 ldr         r5, [r4, #0x74]

; 1131 :     McBSPInstance_t *pInstance = pDataPort->GetActiveInstance();
; 1132 : 
; 1133 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S\r\n", __FUNCTION__));
; 1134 : 
; 1135 :     pDataPort->Lock();
; 1136 : 
; 1137 :     if (pDataPort->GetState() == kMcBSP_Port_Active)

  0000c	e5953024	 ldr         r3, [r5, #0x24]
  00010	e5956054	 ldr         r6, [r5, #0x54]
  00014	e3530002	 cmp         r3, #2
  00018	1a000021	 bne         |$LN2@StopReceiv|

; 1138 :         {
; 1139 :         // Stop DMA
; 1140 :         //
; 1141 :         pDataPort->StopDma();

  0001c	e5953000	 ldr         r3, [r5]
  00020	e1a00005	 mov         r0, r5
  00024	e5933010	 ldr         r3, [r3, #0x10]
  00028	e1a0e00f	 mov         lr, pc
  0002c	e12fff13	 bx          r3

; 1142 :         pDevice->pMcbspProfile->ResetReceiver();

  00030	e5940070	 ldr         r0, [r4, #0x70]
  00034	e5903000	 ldr         r3, [r0]
  00038	e5933020	 ldr         r3, [r3, #0x20]
  0003c	e1a0e00f	 mov         lr, pc
  00040	e12fff13	 bx          r3

; 1143 : 
; 1144 :         // Clear McBSP IRQ Status register
; 1145 :         //
; 1146 :         pDevice->pMcbspProfile->ClearIRQStatus();

  00044	e5940070	 ldr         r0, [r4, #0x70]
  00048	e5903000	 ldr         r3, [r0]
  0004c	e5933024	 ldr         r3, [r3, #0x24]
  00050	e1a0e00f	 mov         lr, pc
  00054	e12fff13	 bx          r3

; 1147 : 
; 1148 :         // if no activity then turn-off power
; 1149 :         //
; 1150 :         pDevice->fMcBSPActivity &= ~MCBSP_RX_ACTIVE;

  00058	e5943080	 ldr         r3, [r4, #0x80]

; 1151 :         if (pDevice->fMcBSPActivity == 0)
; 1152 :             {
; 1153 :             // turn-off SRG (Sample rate generator)
; 1154 :             //pDevice->pMcbspProfile->ResetSampleRateGenerator();
; 1155 :             }
; 1156 : 
; 1157 :         pDataPort->SetActiveInstance(NULL);

  0005c	e3a02000	 mov         r2, #0

; 1158 : 
; 1159 :         // disable interface clock
; 1160 :         //
; 1161 :         EnableClocks(pDevice, FALSE);

  00060	e284007c	 add         r0, r4, #0x7C
  00064	e3c33002	 bic         r3, r3, #2
  00068	e5843080	 str         r3, [r4, #0x80]
  0006c	e5852054	 str         r2, [r5, #0x54]
  00070	eb000000	 bl          InterlockedDecrement
  00074	e594307c	 ldr         r3, [r4, #0x7C]
  00078	e3530000	 cmp         r3, #0
  0007c	05940008	 ldreq       r0, [r4, #8]
  00080	03a02000	 moveq       r2, #0
  00084	03a01004	 moveq       r1, #4
  00088	0b000000	 bleq        SetDevicePowerState

; 1162 : 
; 1163 :         // inform client of state change
; 1164 :         //
; 1165 :         pInstance->fnRxCommand(kExternalDrvrDx_Stop,
; 1166 :             pInstance->pTransferCallback, NULL
; 1167 :             );

  0008c	e5961008	 ldr         r1, [r6, #8]
  00090	e5963014	 ldr         r3, [r6, #0x14]
  00094	e3a02000	 mov         r2, #0
  00098	e3a00000	 mov         r0, #0
  0009c	e1a0e00f	 mov         lr, pc
  000a0	e12fff13	 bx          r3
  000a4		 |$LN2@StopReceiv|

; 1168 :         }
; 1169 :     pDataPort->Unlock();
; 1170 : 
; 1171 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1172 : }

  000a4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$M38638|

			 ENDP  ; |StopReceive|

	EXPORT	|TxCommand|
	IMPORT	|?SetSrcPhysAddr@DataPort_t@@QAAXK@Z|	; DataPort_t::SetSrcPhysAddr
	IMPORT	|?SetDstPhysAddr@DataPort_t@@QAAXK@Z|	; DataPort_t::SetDstPhysAddr
	IMPORT	|??2@YAPAXI@Z|				; operator new
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.h

  00000			 AREA	 |.pdata|, PDATA
|$T38744| DCD	|$LN79@TxCommand|
	DCD	0x4000a701
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\mcbsp.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TxCommand| PROC

; 1187 : {

  00000		 |$LN79@TxCommand|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M38741|
  00004	e1b04002	 movs        r4, r2
  00008	e1a07001	 mov         r7, r1

; 1188 :     McBSPInstance_t *pInstance = (McBSPInstance_t*)pData;
; 1189 :     McBSPDevice_t *pDevice = pInstance->pDevice;

  0000c	e5976004	 ldr         r6, [r7, #4]

; 1190 :     UINT nCount = 0;
; 1191 : 
; 1192 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S\r\n", __FUNCTION__));
; 1193 : 
; 1194 :     if (pPortConfigInfo != NULL)

  00010	0a000010	 beq         |$LN17@TxCommand|

; 1195 :         {
; 1196 :         // Populate the requested configuration information receieved from
; 1197 :         // mcbsp client
; 1198 :         //
; 1199 :         pDevice->mcbspProfile = pPortConfigInfo->portProfile;

  00014	e5943000	 ldr         r3, [r4]

; 1200 :         pDevice->numOfTxChannels = pPortConfigInfo->numOfChannels;
; 1201 :         for (nCount = 0; nCount < pDevice->numOfTxChannels; nCount++)

  00018	e3a02000	 mov         r2, #0
  0001c	e586308c	 str         r3, [r6, #0x8C]
  00020	e5943004	 ldr         r3, [r4, #4]
  00024	e3530000	 cmp         r3, #0
  00028	e5863134	 str         r3, [r6, #0x134]
  0002c	0a000009	 beq         |$LN17@TxCommand|
  00030	e1a0e006	 mov         lr, r6
  00034	e0441006	 sub         r1, r4, r6
  00038		 |$LL19@TxCommand|

; 1202 :             {
; 1203 :             pDevice->requestedTxChannels[nCount] =
; 1204 :                 pPortConfigInfo->requestedChannels[nCount];

  00038	e081300e	 add         r3, r1, lr
  0003c	e5933008	 ldr         r3, [r3, #8]
  00040	e2822001	 add         r2, r2, #1
  00044	e58e3138	 str         r3, [lr, #0x138]
  00048	e5963134	 ldr         r3, [r6, #0x134]
  0004c	e28ee004	 add         lr, lr, #4
  00050	e1520003	 cmp         r2, r3
  00054	3afffff7	 bcc         |$LL19@TxCommand|
  00058		 |$LN17@TxCommand|

; 1205 :             }
; 1206 :         }
; 1207 : 
; 1208 :     switch (cmd)

  00058	e3500000	 cmp         r0, #0
  0005c	0a00007f	 beq         |$LN5@TxCommand|
  00060	e3500001	 cmp         r0, #1
  00064	0a000010	 beq         |$LN14@TxCommand|
  00068	e3500002	 cmp         r0, #2
  0006c	0a000007	 beq         |$LN3@TxCommand|
  00070	e3500003	 cmp         r0, #3
  00074	1a000081	 bne         |$LN59@TxCommand|

; 1300 : 
; 1301 :         case kExternalDrvrDx_Reconfig:
; 1302 :             DEBUGMSG(ZONE_INFO, (L"MCP: TxCommand - McBSP reconfig\r\n"));
; 1303 : 
; 1304 :             pDevice->pTxPort->Lock();
; 1305 : 
; 1306 :             // Reconfigure the McBSP registers
; 1307 :             //
; 1308 :             pDevice->pMcbspProfile->Initialize();

  00078	e5960070	 ldr         r0, [r6, #0x70]
  0007c	e5903000	 ldr         r3, [r0]
  00080	e5933004	 ldr         r3, [r3, #4]
  00084	e1a0e00f	 mov         lr, pc
  00088	e12fff13	 bx          r3

; 1309 : 
; 1310 :             // Note: Need to check if we need to re-initialize the dataports
; 1311 : 
; 1312 :             pDevice->pTxPort->Unlock();
; 1313 :             break;

  0008c	ea00007b	 b           |$LN59@TxCommand|
  00090		 |$LN3@TxCommand|

; 1286 :                 }
; 1287 :             pDevice->pTxPort->Unlock();
; 1288 :             break;
; 1289 : 
; 1290 :         case kExternalDrvrDx_ImmediateStop:
; 1291 :             DEBUGMSG(ZONE_INFO, (L"MCP: TxCommand - Abort transmit\r\n"));
; 1292 : 
; 1293 :             pDevice->pTxPort->Lock();
; 1294 :             if (pDevice->pTxPort->GetState() == kMcBSP_Port_Active)

  00090	e5963078	 ldr         r3, [r6, #0x78]
  00094	e5933024	 ldr         r3, [r3, #0x24]
  00098	e3530002	 cmp         r3, #2
  0009c	1a000077	 bne         |$LN59@TxCommand|

; 1295 :                 {
; 1296 :                 StopTransmit(pDevice);

  000a0	e1a00006	 mov         r0, r6
  000a4	eb000000	 bl          StopTransmit

; 1297 :                 }
; 1298 :             pDevice->pTxPort->Unlock();
; 1299 :             break;

  000a8	ea000074	 b           |$LN59@TxCommand|
  000ac		 |$LN14@TxCommand|

; 1209 :         {
; 1210 :         case kExternalDrvrDx_Start:
; 1211 :             DEBUGMSG(ZONE_INFO, (L"MCP: TxCommand - Starting transmit\r\n"));
; 1212 : 
; 1213 :             if ((pDevice->pMcbspProfile != NULL) &&
; 1214 :                 ((DWORD)pDevice->pMcbspProfile->GetMode() != pDevice->mcbspProfile))

  000ac	e5963070	 ldr         r3, [r6, #0x70]
  000b0	e1b00003	 movs        r0, r3
  000b4	0a000066	 beq         |$LN49@TxCommand|
  000b8	e5903000	 ldr         r3, [r0]
  000bc	e5933028	 ldr         r3, [r3, #0x28]
  000c0	e1a0e00f	 mov         lr, pc
  000c4	e12fff13	 bx          r3
  000c8	e596308c	 ldr         r3, [r6, #0x8C]
  000cc	e1500003	 cmp         r0, r3
  000d0	0a00005f	 beq         |$LN49@TxCommand|

; 1215 :                 {
; 1216 :                 // Request clocks (interface & functional) to access the
; 1217 :                 // device registers
; 1218 :                 //
; 1219 :                 EnableClocks(pDevice, TRUE);

  000d4	e596307c	 ldr         r3, [r6, #0x7C]
  000d8	e3530000	 cmp         r3, #0
  000dc	05960008	 ldreq       r0, [r6, #8]
  000e0	03a02000	 moveq       r2, #0
  000e4	03a01000	 moveq       r1, #0
  000e8	0b000000	 bleq        SetDevicePowerState
  000ec	e286007c	 add         r0, r6, #0x7C
  000f0	eb000000	 bl          InterlockedIncrement

; 1220 : 
; 1221 :                 delete pDevice->pMcbspProfile;

  000f4	e5963070	 ldr         r3, [r6, #0x70]
  000f8	e1b00003	 movs        r0, r3
  000fc	15903000	 ldrne       r3, [r0]
  00100	13a01001	 movne       r1, #1
  00104	15933000	 ldrne       r3, [r3]
  00108	11a0e00f	 movne       lr, pc
  0010c	112fff13	 bxne        r3

; 1222 :                 if (pDevice->mcbspProfile == kMcBSPProfile_I2S_Slave)

  00110	e596308c	 ldr         r3, [r6, #0x8C]
  00114	e3530000	 cmp         r3, #0
  00118	1a000006	 bne         |$LN12@TxCommand|

; 1223 :                     {
; 1224 :                     pDevice->pMcbspProfile = new I2SSlaveProfile_t(pDevice);

  0011c	e3a00008	 mov         r0, #8
  00120	eb000000	 bl          |??2@YAPAXI@Z|
  00124	e3500000	 cmp         r0, #0
  00128	0a000013	 beq         |$LN29@TxCommand|
  0012c	e59f3164	 ldr         r3, [pc, #0x164]

; 1231 :                     {
; 1232 :                     pDevice->pMcbspProfile = new TDMProfile_t(pDevice);

  00130	e8800048	 stmia       r0, {r3, r6}
  00134	ea000011	 b           |$LN30@TxCommand|
  00138		 |$LN12@TxCommand|

; 1225 :                     }
; 1226 :                 else if (pDevice->mcbspProfile == kMcBSPProfile_I2S_Master)

  00138	e3530001	 cmp         r3, #1
  0013c	1a000006	 bne         |$LN10@TxCommand|

; 1227 :                     {
; 1228 :                     pDevice->pMcbspProfile = new I2SMasterProfile_t(pDevice);

  00140	e3a00008	 mov         r0, #8
  00144	eb000000	 bl          |??2@YAPAXI@Z|
  00148	e3500000	 cmp         r0, #0
  0014c	0a00000a	 beq         |$LN29@TxCommand|
  00150	e59f313c	 ldr         r3, [pc, #0x13C]

; 1231 :                     {
; 1232 :                     pDevice->pMcbspProfile = new TDMProfile_t(pDevice);

  00154	e8800048	 stmia       r0, {r3, r6}
  00158	ea000008	 b           |$LN30@TxCommand|
  0015c		 |$LN10@TxCommand|

; 1229 :                     }
; 1230 :                 else if (pDevice->mcbspProfile == kMcBSPProfile_TDM)

  0015c	e3530002	 cmp         r3, #2
  00160	1a000007	 bne         |$LN8@TxCommand|

; 1231 :                     {
; 1232 :                     pDevice->pMcbspProfile = new TDMProfile_t(pDevice);

  00164	e3a00008	 mov         r0, #8
  00168	eb000000	 bl          |??2@YAPAXI@Z|
  0016c	e3500000	 cmp         r0, #0
  00170	159f3118	 ldrne       r3, [pc, #0x118]
  00174	18800048	 stmneia     r0, {r3, r6}
  00178	1a000000	 bne         |$LN30@TxCommand|
  0017c		 |$LN29@TxCommand|
  0017c	e3a00000	 mov         r0, #0
  00180		 |$LN30@TxCommand|
  00180	e5860070	 str         r0, [r6, #0x70]
  00184		 |$LN8@TxCommand|

; 1233 :                     }
; 1234 :                 if (pDevice->pMcbspProfile == NULL)

  00184	e5963070	 ldr         r3, [r6, #0x70]
  00188	e1b00003	 movs        r0, r3
  0018c	0a00003b	 beq         |$LN59@TxCommand|

; 1235 :                     {
; 1236 :                     DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: TxCommand: "
; 1237 :                         L"Failed memory allocation or Unknown Profile Request\r\n"
; 1238 :                         ));
; 1239 :                     break;
; 1240 :                     }
; 1241 : 
; 1242 :                 // Initialise the Mcbsp profile handler object
; 1243 :                 //
; 1244 :                 pDevice->pMcbspProfile->Initialize();

  00190	e5903000	 ldr         r3, [r0]
  00194	e5933004	 ldr         r3, [r3, #4]
  00198	e1a0e00f	 mov         lr, pc
  0019c	e12fff13	 bx          r3

; 1245 : 
; 1246 :                 if ((pDevice->mcbspProfile == kMcBSPProfile_TDM) &&
; 1247 :                     (pPortConfigInfo != NULL))

  001a0	e596308c	 ldr         r3, [r6, #0x8C]
  001a4	e3530002	 cmp         r3, #2
  001a8	1a000005	 bne         |$LN6@TxCommand|
  001ac	e3540000	 cmp         r4, #0

; 1248 :                     {
; 1249 :                     pDevice->pMcbspProfile->SetTxChannelsRequested();

  001b0	15960070	 ldrne       r0, [r6, #0x70]
  001b4	15903000	 ldrne       r3, [r0]
  001b8	1593302c	 ldrne       r3, [r3, #0x2C]
  001bc	11a0e00f	 movne       lr, pc
  001c0	112fff13	 bxne        r3
  001c4		 |$LN6@TxCommand|

; 1250 :                     }
; 1251 : 
; 1252 :                 // Restore DMA contexts
; 1253 :                 //
; 1254 :                 pDevice->pTxPort->RestoreDMAcontext(&s_TxDmaSettings,
; 1255 :                     pDevice->sizeTxBuffer, (WORD)pDevice->dmaTxSyncMap
; 1256 :                     );

  001c4	e5960078	 ldr         r0, [r6, #0x78]
  001c8	e59630a8	 ldr         r3, [r6, #0xA8]
  001cc	e59f50b8	 ldr         r5, [pc, #0xB8]
  001d0	e5901000	 ldr         r1, [r0]
  001d4	e59620bc	 ldr         r2, [r6, #0xBC]
  001d8	e1a03803	 mov         r3, r3, lsl #16
  001dc	e591401c	 ldr         r4, [r1, #0x1C]
  001e0	e1a01005	 mov         r1, r5
  001e4	e1a03823	 mov         r3, r3, lsr #16
  001e8	e1a0e00f	 mov         lr, pc
  001ec	e12fff14	 bx          r4

; 1257 : 
; 1258 :                 pDevice->pRxPort->RestoreDMAcontext(&s_RxDmaSettings,
; 1259 :                     pDevice->sizeRxBuffer,(WORD)pDevice->dmaRxSyncMap
; 1260 :                     );

  001f0	e5960074	 ldr         r0, [r6, #0x74]
  001f4	e59630ac	 ldr         r3, [r6, #0xAC]
  001f8	e59620b8	 ldr         r2, [r6, #0xB8]
  001fc	e590e000	 ldr         lr, [r0]
  00200	e1a03803	 mov         r3, r3, lsl #16
  00204	e1a03823	 mov         r3, r3, lsr #16
  00208	e59e401c	 ldr         r4, [lr, #0x1C]
  0020c	e2851030	 add         r1, r5, #0x30
  00210	e1a0e00f	 mov         lr, pc
  00214	e12fff14	 bx          r4

; 1261 : 
; 1262 :                 pDevice->pTxPort->SetDstPhysAddr(
; 1263 :                     (DWORD)pDevice->pPhysAddrMcBSP +
; 1264 :                     offset(OMAP35XX_MCBSP_REGS_t, DXR)
; 1265 :                     );

  00218	e5963018	 ldr         r3, [r6, #0x18]
  0021c	e5960078	 ldr         r0, [r6, #0x78]
  00220	e2831008	 add         r1, r3, #8
  00224	eb000000	 bl          |?SetDstPhysAddr@DataPort_t@@QAAXK@Z|

; 1266 : 
; 1267 :                 pDevice->pRxPort->SetSrcPhysAddr(
; 1268 :                     (DWORD)pDevice->pPhysAddrMcBSP +
; 1269 :                     offset(OMAP35XX_MCBSP_REGS_t, DRR)
; 1270 :                     );

  00228	e5961018	 ldr         r1, [r6, #0x18]
  0022c	e5960074	 ldr         r0, [r6, #0x74]
  00230	eb000000	 bl          |?SetSrcPhysAddr@DataPort_t@@QAAXK@Z|

; 1271 : 
; 1272 :                 EnableClocks(pDevice, FALSE);

  00234	e286007c	 add         r0, r6, #0x7C
  00238	eb000000	 bl          InterlockedDecrement
  0023c	e596307c	 ldr         r3, [r6, #0x7C]
  00240	e3530000	 cmp         r3, #0
  00244	05960008	 ldreq       r0, [r6, #8]
  00248	03a02000	 moveq       r2, #0
  0024c	03a01004	 moveq       r1, #4
  00250	0b000000	 bleq        SetDevicePowerState
  00254		 |$LN49@TxCommand|

; 1273 :                 }
; 1274 : 
; 1275 :             StartTransmit(pInstance);

  00254	e1a00007	 mov         r0, r7
  00258	eb000000	 bl          StartTransmit

; 1276 : 
; 1277 :             break;

  0025c	ea000007	 b           |$LN59@TxCommand|
  00260		 |$LN5@TxCommand|

; 1278 : 
; 1279 :         case kExternalDrvrDx_Stop:
; 1280 :             DEBUGMSG(ZONE_INFO, (L"MCP: TxCommand - Stopping transmit\r\n"));
; 1281 : 
; 1282 :             pDevice->pTxPort->Lock();
; 1283 :             if (pDevice->pTxPort->GetState() == kMcBSP_Port_Active)

  00260	e5962078	 ldr         r2, [r6, #0x78]
  00264	e5923024	 ldr         r3, [r2, #0x24]
  00268	e3530002	 cmp         r3, #2
  0026c	1a000003	 bne         |$LN59@TxCommand|

; 1284 :                 {
; 1285 :                 pDevice->pTxPort->RequestDmaStop();

  00270	e5923020	 ldr         r3, [r2, #0x20]
  00274	e3530000	 cmp         r3, #0
  00278	13a03001	 movne       r3, #1
  0027c	15823020	 strne       r3, [r2, #0x20]
  00280		 |$LN59@TxCommand|

; 1314 :         }
; 1315 : 
; 1316 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1317 : 
; 1318 :     return 1;

  00280	e3a00001	 mov         r0, #1

; 1319 : }

  00284	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00288	e12fff1e	 bx          lr
  0028c		 |$LN80@TxCommand|
  0028c		 |$LN81@TxCommand|
  0028c	00000000	 DCD         |s_TxDmaSettings|
  00290		 |$LN82@TxCommand|
  00290	00000000	 DCD         |??_7TDMProfile_t@@6B@|
  00294		 |$LN83@TxCommand|
  00294	00000000	 DCD         |??_7I2SMasterProfile_t@@6B@|
  00298		 |$LN84@TxCommand|
  00298	00000000	 DCD         |??_7I2SSlaveProfile_t@@6B@|
  0029c		 |$M38742|

			 ENDP  ; |TxCommand|

	EXPORT	|RxCommand|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.h

  00000			 AREA	 |.pdata|, PDATA
|$T38853| DCD	|$LN79@RxCommand|
	DCD	0x4000a701
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\mcbsp.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RxCommand| PROC

; 1334 : {

  00000		 |$LN79@RxCommand|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M38850|
  00004	e1b04002	 movs        r4, r2
  00008	e1a07001	 mov         r7, r1

; 1335 :     McBSPInstance_t *pInstance = (McBSPInstance_t*)pData;
; 1336 :     McBSPDevice_t *pDevice = pInstance->pDevice;

  0000c	e5976004	 ldr         r6, [r7, #4]

; 1337 :     UINT nCount = 0;
; 1338 : 
; 1339 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S\r\n", __FUNCTION__));
; 1340 : 
; 1341 :     if (pPortConfigInfo != NULL)

  00010	0a000010	 beq         |$LN17@RxCommand|

; 1342 :         {
; 1343 :         // Populate the requested configuration information receieved from
; 1344 :         // mcbsp client
; 1345 :         //
; 1346 :         pDevice->mcbspProfile = pPortConfigInfo->portProfile;

  00014	e5943000	 ldr         r3, [r4]

; 1347 :         pDevice->numOfRxChannels = pPortConfigInfo->numOfChannels;
; 1348 :         for (nCount = 0; nCount < pDevice->numOfRxChannels; nCount++)

  00018	e3a02000	 mov         r2, #0
  0001c	e586308c	 str         r3, [r6, #0x8C]
  00020	e5943004	 ldr         r3, [r4, #4]
  00024	e3530000	 cmp         r3, #0
  00028	e5863148	 str         r3, [r6, #0x148]
  0002c	0a000009	 beq         |$LN17@RxCommand|
  00030	e1a0e006	 mov         lr, r6
  00034	e0441006	 sub         r1, r4, r6
  00038		 |$LL19@RxCommand|

; 1349 :             {
; 1350 :             pDevice->requestedRxChannels[nCount] =
; 1351 :                 pPortConfigInfo->requestedChannels[nCount];

  00038	e081300e	 add         r3, r1, lr
  0003c	e5933008	 ldr         r3, [r3, #8]
  00040	e2822001	 add         r2, r2, #1
  00044	e58e314c	 str         r3, [lr, #0x14C]
  00048	e5963148	 ldr         r3, [r6, #0x148]
  0004c	e28ee004	 add         lr, lr, #4
  00050	e1520003	 cmp         r2, r3
  00054	3afffff7	 bcc         |$LL19@RxCommand|
  00058		 |$LN17@RxCommand|

; 1352 :             }
; 1353 :         }
; 1354 : 
; 1355 :     switch (cmd)

  00058	e3500000	 cmp         r0, #0
  0005c	0a00007f	 beq         |$LN5@RxCommand|
  00060	e3500001	 cmp         r0, #1
  00064	0a000010	 beq         |$LN14@RxCommand|
  00068	e3500002	 cmp         r0, #2
  0006c	0a000007	 beq         |$LN3@RxCommand|
  00070	e3500003	 cmp         r0, #3
  00074	1a000081	 bne         |$LN59@RxCommand|

; 1447 : 
; 1448 :         case kExternalDrvrDx_Reconfig:
; 1449 :             DEBUGMSG(ZONE_INFO, (L"MCP: RxCommand - McBSP reconfig\r\n"));
; 1450 : 
; 1451 :             pDevice->pRxPort->Lock();
; 1452 : 
; 1453 :             // Reconfigure the McBSP registers
; 1454 :             //
; 1455 :             pDevice->pMcbspProfile->Initialize();

  00078	e5960070	 ldr         r0, [r6, #0x70]
  0007c	e5903000	 ldr         r3, [r0]
  00080	e5933004	 ldr         r3, [r3, #4]
  00084	e1a0e00f	 mov         lr, pc
  00088	e12fff13	 bx          r3

; 1456 : 
; 1457 :             // Note: Need to check if we need to re-initialize the dataports
; 1458 : 
; 1459 :             pDevice->pRxPort->Unlock();
; 1460 :             break;

  0008c	ea00007b	 b           |$LN59@RxCommand|
  00090		 |$LN3@RxCommand|

; 1433 :                 }
; 1434 :             pDevice->pRxPort->Unlock();
; 1435 :             break;
; 1436 : 
; 1437 :         case kExternalDrvrDx_ImmediateStop:
; 1438 :             DEBUGMSG(ZONE_INFO, (L"MCP: RxCommand - Abort Receive\r\n"));
; 1439 : 
; 1440 :             pDevice->pRxPort->Lock();
; 1441 :             if (pDevice->pRxPort->GetState() == kMcBSP_Port_Active)

  00090	e5963074	 ldr         r3, [r6, #0x74]
  00094	e5933024	 ldr         r3, [r3, #0x24]
  00098	e3530002	 cmp         r3, #2
  0009c	1a000077	 bne         |$LN59@RxCommand|

; 1442 :                 {
; 1443 :                 StopReceive(pDevice);

  000a0	e1a00006	 mov         r0, r6
  000a4	eb000000	 bl          StopReceive

; 1444 :                 }
; 1445 :             pDevice->pRxPort->Unlock();
; 1446 :             break;

  000a8	ea000074	 b           |$LN59@RxCommand|
  000ac		 |$LN14@RxCommand|

; 1356 :         {
; 1357 :         case kExternalDrvrDx_Start:
; 1358 :             DEBUGMSG(ZONE_INFO, (L"MCP: RxCommand - Starting Receive\r\n"));
; 1359 : 
; 1360 :             if ((pDevice->pMcbspProfile != NULL) &&
; 1361 :                 ((DWORD)pDevice->pMcbspProfile->GetMode() != pDevice->mcbspProfile))

  000ac	e5963070	 ldr         r3, [r6, #0x70]
  000b0	e1b00003	 movs        r0, r3
  000b4	0a000066	 beq         |$LN49@RxCommand|
  000b8	e5903000	 ldr         r3, [r0]
  000bc	e5933028	 ldr         r3, [r3, #0x28]
  000c0	e1a0e00f	 mov         lr, pc
  000c4	e12fff13	 bx          r3
  000c8	e596308c	 ldr         r3, [r6, #0x8C]
  000cc	e1500003	 cmp         r0, r3
  000d0	0a00005f	 beq         |$LN49@RxCommand|

; 1362 :                 {
; 1363 :                 // Request clocks (interface & functional) to access the
; 1364 :                 // device registers
; 1365 :                 //
; 1366 :                 EnableClocks(pDevice, TRUE);

  000d4	e596307c	 ldr         r3, [r6, #0x7C]
  000d8	e3530000	 cmp         r3, #0
  000dc	05960008	 ldreq       r0, [r6, #8]
  000e0	03a02000	 moveq       r2, #0
  000e4	03a01000	 moveq       r1, #0
  000e8	0b000000	 bleq        SetDevicePowerState
  000ec	e286007c	 add         r0, r6, #0x7C
  000f0	eb000000	 bl          InterlockedIncrement

; 1367 : 
; 1368 :                 delete pDevice->pMcbspProfile;

  000f4	e5963070	 ldr         r3, [r6, #0x70]
  000f8	e1b00003	 movs        r0, r3
  000fc	15903000	 ldrne       r3, [r0]
  00100	13a01001	 movne       r1, #1
  00104	15933000	 ldrne       r3, [r3]
  00108	11a0e00f	 movne       lr, pc
  0010c	112fff13	 bxne        r3

; 1369 :                 if (pDevice->mcbspProfile == kMcBSPProfile_I2S_Slave)

  00110	e596308c	 ldr         r3, [r6, #0x8C]
  00114	e3530000	 cmp         r3, #0
  00118	1a000006	 bne         |$LN12@RxCommand|

; 1370 :                     {
; 1371 :                     pDevice->pMcbspProfile = new I2SSlaveProfile_t(pDevice);

  0011c	e3a00008	 mov         r0, #8
  00120	eb000000	 bl          |??2@YAPAXI@Z|
  00124	e3500000	 cmp         r0, #0
  00128	0a000013	 beq         |$LN29@RxCommand|
  0012c	e59f3164	 ldr         r3, [pc, #0x164]

; 1378 :                     {
; 1379 :                     pDevice->pMcbspProfile = new TDMProfile_t(pDevice);

  00130	e8800048	 stmia       r0, {r3, r6}
  00134	ea000011	 b           |$LN30@RxCommand|
  00138		 |$LN12@RxCommand|

; 1372 :                     }
; 1373 :                 else if (pDevice->mcbspProfile == kMcBSPProfile_I2S_Master)

  00138	e3530001	 cmp         r3, #1
  0013c	1a000006	 bne         |$LN10@RxCommand|

; 1374 :                     {
; 1375 :                     pDevice->pMcbspProfile = new I2SMasterProfile_t(pDevice);

  00140	e3a00008	 mov         r0, #8
  00144	eb000000	 bl          |??2@YAPAXI@Z|
  00148	e3500000	 cmp         r0, #0
  0014c	0a00000a	 beq         |$LN29@RxCommand|
  00150	e59f313c	 ldr         r3, [pc, #0x13C]

; 1378 :                     {
; 1379 :                     pDevice->pMcbspProfile = new TDMProfile_t(pDevice);

  00154	e8800048	 stmia       r0, {r3, r6}
  00158	ea000008	 b           |$LN30@RxCommand|
  0015c		 |$LN10@RxCommand|

; 1376 :                     }
; 1377 :                 else if (pDevice->mcbspProfile == kMcBSPProfile_TDM)

  0015c	e3530002	 cmp         r3, #2
  00160	1a000007	 bne         |$LN8@RxCommand|

; 1378 :                     {
; 1379 :                     pDevice->pMcbspProfile = new TDMProfile_t(pDevice);

  00164	e3a00008	 mov         r0, #8
  00168	eb000000	 bl          |??2@YAPAXI@Z|
  0016c	e3500000	 cmp         r0, #0
  00170	159f3118	 ldrne       r3, [pc, #0x118]
  00174	18800048	 stmneia     r0, {r3, r6}
  00178	1a000000	 bne         |$LN30@RxCommand|
  0017c		 |$LN29@RxCommand|
  0017c	e3a00000	 mov         r0, #0
  00180		 |$LN30@RxCommand|
  00180	e5860070	 str         r0, [r6, #0x70]
  00184		 |$LN8@RxCommand|

; 1380 :                     }
; 1381 :                 if (pDevice->pMcbspProfile == NULL)

  00184	e5963070	 ldr         r3, [r6, #0x70]
  00188	e1b00003	 movs        r0, r3
  0018c	0a00003b	 beq         |$LN59@RxCommand|

; 1382 :                     {
; 1383 :                     DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: RxCommand: "
; 1384 :                         L"Failed memory  or Unknown Profile Request\r\n"
; 1385 :                         ));
; 1386 :                     break;
; 1387 :                     }
; 1388 : 
; 1389 :                 // Initialise the Mcbsp profile handler object
; 1390 :                 //
; 1391 :                 pDevice->pMcbspProfile->Initialize();

  00190	e5903000	 ldr         r3, [r0]
  00194	e5933004	 ldr         r3, [r3, #4]
  00198	e1a0e00f	 mov         lr, pc
  0019c	e12fff13	 bx          r3

; 1392 : 
; 1393 :                 if ((pDevice->mcbspProfile == kMcBSPProfile_TDM) &&
; 1394 :                     (pPortConfigInfo != NULL))

  001a0	e596308c	 ldr         r3, [r6, #0x8C]
  001a4	e3530002	 cmp         r3, #2
  001a8	1a000005	 bne         |$LN6@RxCommand|
  001ac	e3540000	 cmp         r4, #0

; 1395 :                     {
; 1396 :                     pDevice->pMcbspProfile->SetRxChannelsRequested();

  001b0	15960070	 ldrne       r0, [r6, #0x70]
  001b4	15903000	 ldrne       r3, [r0]
  001b8	15933030	 ldrne       r3, [r3, #0x30]
  001bc	11a0e00f	 movne       lr, pc
  001c0	112fff13	 bxne        r3
  001c4		 |$LN6@RxCommand|

; 1397 :                     }
; 1398 : 
; 1399 :                 // Restore DMA contexts
; 1400 :                 //
; 1401 :                 pDevice->pTxPort->RestoreDMAcontext(&s_TxDmaSettings,
; 1402 :                     pDevice->sizeTxBuffer, (WORD)pDevice->dmaTxSyncMap
; 1403 :                     );

  001c4	e5960078	 ldr         r0, [r6, #0x78]
  001c8	e59630a8	 ldr         r3, [r6, #0xA8]
  001cc	e59f50b8	 ldr         r5, [pc, #0xB8]
  001d0	e5901000	 ldr         r1, [r0]
  001d4	e59620bc	 ldr         r2, [r6, #0xBC]
  001d8	e1a03803	 mov         r3, r3, lsl #16
  001dc	e591401c	 ldr         r4, [r1, #0x1C]
  001e0	e1a01005	 mov         r1, r5
  001e4	e1a03823	 mov         r3, r3, lsr #16
  001e8	e1a0e00f	 mov         lr, pc
  001ec	e12fff14	 bx          r4

; 1404 : 
; 1405 :                 pDevice->pRxPort->RestoreDMAcontext(&s_RxDmaSettings,
; 1406 :                     pDevice->sizeRxBuffer,(WORD)pDevice->dmaRxSyncMap
; 1407 :                     );

  001f0	e5960074	 ldr         r0, [r6, #0x74]
  001f4	e59630ac	 ldr         r3, [r6, #0xAC]
  001f8	e59620b8	 ldr         r2, [r6, #0xB8]
  001fc	e590e000	 ldr         lr, [r0]
  00200	e1a03803	 mov         r3, r3, lsl #16
  00204	e1a03823	 mov         r3, r3, lsr #16
  00208	e59e401c	 ldr         r4, [lr, #0x1C]
  0020c	e2851030	 add         r1, r5, #0x30
  00210	e1a0e00f	 mov         lr, pc
  00214	e12fff14	 bx          r4

; 1408 : 
; 1409 :                 pDevice->pTxPort->SetDstPhysAddr(
; 1410 :                     (DWORD)pDevice->pPhysAddrMcBSP +
; 1411 :                     offset(OMAP35XX_MCBSP_REGS_t, DXR)
; 1412 :                     );

  00218	e5963018	 ldr         r3, [r6, #0x18]
  0021c	e5960078	 ldr         r0, [r6, #0x78]
  00220	e2831008	 add         r1, r3, #8
  00224	eb000000	 bl          |?SetDstPhysAddr@DataPort_t@@QAAXK@Z|

; 1413 : 
; 1414 :                 pDevice->pRxPort->SetSrcPhysAddr(
; 1415 :                     (DWORD)pDevice->pPhysAddrMcBSP +
; 1416 :                     offset(OMAP35XX_MCBSP_REGS_t, DRR)
; 1417 :                     );

  00228	e5961018	 ldr         r1, [r6, #0x18]
  0022c	e5960074	 ldr         r0, [r6, #0x74]
  00230	eb000000	 bl          |?SetSrcPhysAddr@DataPort_t@@QAAXK@Z|

; 1418 : 
; 1419 :                 EnableClocks(pDevice, FALSE);

  00234	e286007c	 add         r0, r6, #0x7C
  00238	eb000000	 bl          InterlockedDecrement
  0023c	e596307c	 ldr         r3, [r6, #0x7C]
  00240	e3530000	 cmp         r3, #0
  00244	05960008	 ldreq       r0, [r6, #8]
  00248	03a02000	 moveq       r2, #0
  0024c	03a01004	 moveq       r1, #4
  00250	0b000000	 bleq        SetDevicePowerState
  00254		 |$LN49@RxCommand|

; 1420 :                 }
; 1421 : 
; 1422 :             StartReceive(pInstance);

  00254	e1a00007	 mov         r0, r7
  00258	eb000000	 bl          StartReceive

; 1423 : 
; 1424 :             break;

  0025c	ea000007	 b           |$LN59@RxCommand|
  00260		 |$LN5@RxCommand|

; 1425 : 
; 1426 :         case kExternalDrvrDx_Stop:
; 1427 :             DEBUGMSG(ZONE_INFO, (L"MCP: RxCommand - Stopping Receive\r\n"));
; 1428 : 
; 1429 :             pDevice->pRxPort->Lock();
; 1430 :             if (pDevice->pRxPort->GetState() == kMcBSP_Port_Active)

  00260	e5962074	 ldr         r2, [r6, #0x74]
  00264	e5923024	 ldr         r3, [r2, #0x24]
  00268	e3530002	 cmp         r3, #2
  0026c	1a000003	 bne         |$LN59@RxCommand|

; 1431 :                 {
; 1432 :                 pDevice->pRxPort->RequestDmaStop();

  00270	e5923020	 ldr         r3, [r2, #0x20]
  00274	e3530000	 cmp         r3, #0
  00278	13a03001	 movne       r3, #1
  0027c	15823020	 strne       r3, [r2, #0x20]
  00280		 |$LN59@RxCommand|

; 1461 :         }
; 1462 : 
; 1463 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1464 : 
; 1465 :     return 1;

  00280	e3a00001	 mov         r0, #1

; 1466 : }

  00284	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00288	e12fff1e	 bx          lr
  0028c		 |$LN80@RxCommand|
  0028c		 |$LN81@RxCommand|
  0028c	00000000	 DCD         |s_TxDmaSettings|
  00290		 |$LN82@RxCommand|
  00290	00000000	 DCD         |??_7TDMProfile_t@@6B@|
  00294		 |$LN83@RxCommand|
  00294	00000000	 DCD         |??_7I2SMasterProfile_t@@6B@|
  00298		 |$LN84@RxCommand|
  00298	00000000	 DCD         |??_7I2SSlaveProfile_t@@6B@|
  0029c		 |$M38851|

			 ENDP  ; |RxCommand|

	EXPORT	|IST_TxDMA|
	IMPORT	|DmaInterruptDone|
	IMPORT	|WaitForSingleObject|
	IMPORT	|CeSetThreadPriority|
	IMPORT	|__C_specific_handler|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.h

  00000			 AREA	 |.pdata|, PDATA
|$T38918| DCD	|$LN45@IST_TxDMA|
	DCD	0xc0006304

  00000			 AREA	 |.pdata|, PDATA
|$T38920| DCD	|$LN13@IST_TxDMA|
	DCD	0x40000301

  00000			 AREA	 |.xdata|, DATA
|$T38916| DCD	0x1
	DCD	|$LN17@IST_TxDMA|
	DCD	|$LN18@IST_TxDMA|
	DCD	|$LN13@IST_TxDMA|
	DCD	|$LN14@IST_TxDMA|
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\mcbsp.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T38916|

  00008		 |IST_TxDMA| PROC

; 1478 : {

  00008		 |$LN45@IST_TxDMA|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d59f0	 stmdb       sp!, {r4 - r8, r11, r12, lr}
  00010	e28db020	 add         r11, sp, #0x20
  00014	e24dd00c	 sub         sp, sp, #0xC
  00018		 |$LN43@IST_TxDMA|
  00018	e1a06000	 mov         r6, r0

; 1479 :     DWORD status = 0;
; 1480 :     McBSPInstance_t* pInstance = NULL;
; 1481 :     McBSPDevice_t* pDevice = (McBSPDevice_t*)pParam;
; 1482 :     DataPort_t *pDataPort = pDevice->pTxPort;

  0001c	e5965078	 ldr         r5, [r6, #0x78]

; 1483 :     DmaDataInfo_t *pDMAInfo = pDataPort->GetDmaInfo();
; 1484 : 
; 1485 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1486 : 
; 1487 : #if (UNDER_CE < 600)
; 1488 :     SetProcPermissions((ULONG)-1);
; 1489 : #endif
; 1490 :     CeSetThreadPriority(GetCurrentThread(), pDevice->priorityDmaTx);

  00020	e59610b0	 ldr         r1, [r6, #0xB0]
  00024	e50b5028	 str         r5, [r11, #-0x28]
  00028	e3a00041	 mov         r0, #0x41
  0002c	e2858004	 add         r8, r5, #4
  00030	e50b8024	 str         r8, [r11, #-0x24]
  00034	e50b602c	 str         r6, [r11, #-0x2C]
  00038	eb000000	 bl          CeSetThreadPriority
  0003c		 |$LL9@IST_TxDMA|

; 1491 : 
; 1492 : 	for(;;)
; 1493 :         {
; 1494 :         if (WaitForSingleObject(pDataPort->m_hEvent, INFINITE) == WAIT_OBJECT_0)

  0003c	e5950058	 ldr         r0, [r5, #0x58]
  00040	e3e01000	 mvn         r1, #0
  00044	eb000000	 bl          WaitForSingleObject
  00048	e3500000	 cmp         r0, #0
  0004c	1afffffa	 bne         |$LL9@IST_TxDMA|

; 1495 :             {
; 1496 : 
; 1497 : 			if (pDevice->bTxExitThread)

  00050	e5963084	 ldr         r3, [r6, #0x84]
  00054	e3530000	 cmp         r3, #0

; 1574 :                 {
; 1575 :                 DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR - exception in TxIST\r\n"));
; 1576 :                 }
; 1577 :             }
; 1578 :         }
; 1579 : 
; 1580 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1581 : 
; 1582 :     return 0;

  00058	13a00000	 movne       r0, #0

; 1495 :             {
; 1496 : 
; 1497 : 			if (pDevice->bTxExitThread)

  0005c	1a000049	 bne         |$LN10@IST_TxDMA|

; 1498 : 			{
; 1499 : 				break;
; 1500 : 			}
; 1501 : 
; 1502 :             // check active buffer
; 1503 :             //
; 1504 :             status = DmaGetStatus(pDMAInfo);

  00060	e5983014	 ldr         r3, [r8, #0x14]
  00064	e593400c	 ldr         r4, [r3, #0xC]

; 1505 : 
; 1506 :             DEBUGMSG(ZONE_IST,
; 1507 :                 (L"MCP: Transmit DMA Interrupt(status=0x%04x)\r\n", status)
; 1508 :                 );
; 1509 : 
; 1510 :             DmaClearStatus(pDMAInfo, status);

  00068	e583400c	 str         r4, [r3, #0xC]

; 1511 : 
; 1512 :             // clear interrupt
; 1513 :             //
; 1514 :             DmaInterruptDone(pDataPort->m_hDmaChannel);

  0006c	e595005c	 ldr         r0, [r5, #0x5C]
  00070	eb000000	 bl          DmaInterruptDone

; 1515 : 
; 1516 :             pInstance = pDataPort->GetActiveInstance();

  00074	e5953054	 ldr         r3, [r5, #0x54]
  00078	e1b07003	 movs        r7, r3

; 1517 :             if (pInstance == NULL)

  0007c	1a000002	 bne         |$LN5@IST_TxDMA|

; 1518 :                 {
; 1519 :                 StopTransmit(pDevice);

  00080	e1a00006	 mov         r0, r6
  00084	eb000000	 bl          StopTransmit

; 1520 :                 continue;

  00088	eaffffeb	 b           |$LL9@IST_TxDMA|
  0008c		 |$LN5@IST_TxDMA|
  0008c		 |$LN17@IST_TxDMA|

; 1521 :                 }
; 1522 : 
; 1523 :             __try
; 1524 :                 {
; 1525 :                 DEBUGMSG(ZONE_IST, (L"MCP: DMA Tx IST loopCounter=%d\r\n",
; 1526 :                     pDataPort->GetLoopCount())
; 1527 :                     );
; 1528 : 
; 1529 :                 pInstance->fnMutexLock(TRUE, INFINITE,
; 1530 :                     pInstance->pTransferCallback
; 1531 :                     );

  0008c	e5972008	 ldr         r2, [r7, #8]
  00090	e597301c	 ldr         r3, [r7, #0x1C]
  00094	e3e01000	 mvn         r1, #0
  00098	e3a00001	 mov         r0, #1
  0009c	e1a0e00f	 mov         lr, pc
  000a0	e12fff13	 bx          r3

; 1532 : 
; 1533 :                 pDataPort->Lock();
; 1534 : 
; 1535 :                 if (pDataPort->DecrementLoopCount() <= 0)

  000a4	e5953020	 ldr         r3, [r5, #0x20]
  000a8	e2433001	 sub         r3, r3, #1
  000ac	e5853020	 str         r3, [r5, #0x20]
  000b0	e3530000	 cmp         r3, #0
  000b4	ca000002	 bgt         |$LN3@IST_TxDMA|

; 1536 :                     {
; 1537 :                     StopTransmit(pDevice);

  000b8	e1a00006	 mov         r0, r6
  000bc	eb000000	 bl          StopTransmit
  000c0	ea000024	 b           |$LN1@IST_TxDMA|
  000c4		 |$LN3@IST_TxDMA|

; 1538 :                     }
; 1539 :                 else if (status & (DMA_CICR_BLOCK_IE | DMA_CICR_FRAME_IE))

  000c4	e3140028	 tst         r4, #0x28
  000c8	0a000022	 beq         |$LN1@IST_TxDMA|

; 1540 :                     {
; 1541 :                     // Clear McBSP IRQ Status register
; 1542 :                     //
; 1543 :                     pDevice->pMcbspProfile->ClearIRQStatus();

  000cc	e5960070	 ldr         r0, [r6, #0x70]
  000d0	e5903000	 ldr         r3, [r0]
  000d4	e5933024	 ldr         r3, [r3, #0x24]
  000d8	e1a0e00f	 mov         lr, pc
  000dc	e12fff13	 bx          r3

; 1544 : 
; 1545 :                     //  swap buffer
; 1546 :                     //
; 1547 :                     pDataPort->SwapBuffer(TRUE /*tx mode*/);

  000e0	e5953000	 ldr         r3, [r5]
  000e4	e3a01001	 mov         r1, #1
  000e8	e1a00005	 mov         r0, r5
  000ec	e5933024	 ldr         r3, [r3, #0x24]
  000f0	e1a0e00f	 mov         lr, pc
  000f4	e12fff13	 bx          r3

; 1548 : 
; 1549 :                     // populate the non-active buffer
; 1550 :                     //
; 1551 :                     pInstance->fnTxPopulateBuffer(
; 1552 :                         pDataPort->GetDataBuffer(DataPort_t::kBufferInactive),
; 1553 :                         pInstance->pTransferCallback,
; 1554 :                         ((pDataPort->GetDataBufferSize()) >> 1)
; 1555 :                         );

  000f8	e5953000	 ldr         r3, [r5]
  000fc	e1a00005	 mov         r0, r5
  00100	e5933004	 ldr         r3, [r3, #4]
  00104	e1a0e00f	 mov         lr, pc
  00108	e12fff13	 bx          r3
  0010c	e5953000	 ldr         r3, [r5]
  00110	e1a04000	 mov         r4, r0
  00114	e3a01003	 mov         r1, #3
  00118	e5933020	 ldr         r3, [r3, #0x20]
  0011c	e1a00005	 mov         r0, r5
  00120	e1a0e00f	 mov         lr, pc
  00124	e12fff13	 bx          r3
  00128	e5971008	 ldr         r1, [r7, #8]
  0012c	e597300c	 ldr         r3, [r7, #0xC]
  00130	e1a020c4	 mov         r2, r4, asr #1
  00134	e1a0e00f	 mov         lr, pc
  00138	e12fff13	 bx          r3

; 1556 : 
; 1557 :                     // perform preprocessing
; 1558 :                     //
; 1559 :                     pDataPort->PreprocessDataForRender(
; 1560 :                         DataPort_t::kBufferInactive,
; 1561 :                         pDataPort->GetSamplesPerPage()
; 1562 :                         );

  0013c	e5953000	 ldr         r3, [r5]
  00140	e5952050	 ldr         r2, [r5, #0x50]
  00144	e3a01003	 mov         r1, #3
  00148	e5933028	 ldr         r3, [r3, #0x28]
  0014c	e1a00005	 mov         r0, r5
  00150	e1a0e00f	 mov         lr, pc
  00154	e12fff13	 bx          r3
  00158		 |$LN1@IST_TxDMA|

; 1563 :                     }
; 1564 : 
; 1565 :                 pDataPort->Unlock();
; 1566 :                 pInstance->fnMutexLock(FALSE, INFINITE,
; 1567 :                     pInstance->pTransferCallback
; 1568 :                     );

  00158	e5972008	 ldr         r2, [r7, #8]
  0015c	e597301c	 ldr         r3, [r7, #0x1C]
  00160	e3e01000	 mvn         r1, #0
  00164	e3a00000	 mov         r0, #0
  00168	e1a0e00f	 mov         lr, pc
  0016c	e12fff13	 bx          r3
  00170		 |$LN18@IST_TxDMA|

; 1569 : 
; 1570 :                 DEBUGMSG(ZONE_IST, (L"MCP: DMA Tx IST interrupt done\r\n"));
; 1571 : 
; 1572 :                 }

  00170	eaffffb1	 b           |$LL9@IST_TxDMA|
  00174		 |$LN14@IST_TxDMA|

; 1573 :             __except(EXCEPTION_EXECUTE_HANDLER)

  00174	e51b602c	 ldr         r6, [r11, #-0x2C]
  00178	e51b5028	 ldr         r5, [r11, #-0x28]
  0017c	e51b8024	 ldr         r8, [r11, #-0x24]
  00180	eaffffad	 b           |$LL9@IST_TxDMA|
  00184		 |$LN42@IST_TxDMA|
  00184	e51b0024	 ldr         r0, [r11, #-0x24]
  00188		 |$LN10@IST_TxDMA|

; 1583 : }

  00188	e24bd020	 sub         sp, r11, #0x20
  0018c	e89d69f0	 ldmia       sp, {r4 - r8, r11, sp, lr}
  00190	e12fff1e	 bx          lr

			 ENDP  ; |IST_TxDMA|

  00194		 |$LN13@IST_TxDMA|
  00194		 |$LN44@IST_TxDMA|

; 1573 :             __except(EXCEPTION_EXECUTE_HANDLER)

  00194	e52de004	 str         lr, [sp, #-4]!
  00198		 |$LN16@IST_TxDMA|
  00198		 |$LN47@IST_TxDMA|
  00198	e3a00001	 mov         r0, #1
  0019c		 |$LN15@IST_TxDMA|
  0019c	e49df004	 ldr         pc, [sp], #4
  001a0		 |$LN48@IST_TxDMA|
  001a0		 |$LN46@IST_TxDMA|
	EXPORT	|IST_RxDMA|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\dataport.h

  00000			 AREA	 |.pdata|, PDATA
|$T38983| DCD	|$LN45@IST_RxDMA|
	DCD	0xc0006304

  00000			 AREA	 |.pdata|, PDATA
|$T38985| DCD	|$LN13@IST_RxDMA|
	DCD	0x40000301

  00000			 AREA	 |.xdata|, DATA
|$T38981| DCD	0x1
	DCD	|$LN17@IST_RxDMA|
	DCD	|$LN18@IST_RxDMA|
	DCD	|$LN13@IST_RxDMA|
	DCD	|$LN14@IST_RxDMA|
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\mcbsp.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T38981|

  00008		 |IST_RxDMA| PROC

; 1596 : {

  00008		 |$LN45@IST_RxDMA|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d59f0	 stmdb       sp!, {r4 - r8, r11, r12, lr}
  00010	e28db020	 add         r11, sp, #0x20
  00014	e24dd00c	 sub         sp, sp, #0xC
  00018		 |$LN43@IST_RxDMA|
  00018	e1a06000	 mov         r6, r0

; 1597 :     DWORD status = 0;
; 1598 :     McBSPInstance_t* pInstance = NULL;
; 1599 :     McBSPDevice_t* pDevice = (McBSPDevice_t*)pParam;
; 1600 :     DataPort_t *pDataPort = pDevice->pRxPort;

  0001c	e5965074	 ldr         r5, [r6, #0x74]

; 1601 :     DmaDataInfo_t *pDMAInfo = pDataPort->GetDmaInfo();
; 1602 : 
; 1603 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1604 : 
; 1605 : #if (UNDER_CE < 600)
; 1606 :     SetProcPermissions((ULONG)-1);
; 1607 : #endif
; 1608 :     CeSetThreadPriority(GetCurrentThread(), pDevice->priorityDmaRx);

  00020	e59610b4	 ldr         r1, [r6, #0xB4]
  00024	e50b5028	 str         r5, [r11, #-0x28]
  00028	e3a00041	 mov         r0, #0x41
  0002c	e2858004	 add         r8, r5, #4
  00030	e50b8024	 str         r8, [r11, #-0x24]
  00034	e50b602c	 str         r6, [r11, #-0x2C]
  00038	eb000000	 bl          CeSetThreadPriority
  0003c		 |$LL9@IST_RxDMA|

; 1609 : 
; 1610 :     for(;;)
; 1611 :     {
; 1612 :         if (WaitForSingleObject(pDataPort->m_hEvent, INFINITE) == WAIT_OBJECT_0)

  0003c	e5950058	 ldr         r0, [r5, #0x58]
  00040	e3e01000	 mvn         r1, #0
  00044	eb000000	 bl          WaitForSingleObject
  00048	e3500000	 cmp         r0, #0
  0004c	1afffffa	 bne         |$LL9@IST_RxDMA|

; 1613 :         {
; 1614 : 
; 1615 : 		if (pDevice->bRxExitThread)

  00050	e5963088	 ldr         r3, [r6, #0x88]
  00054	e3530000	 cmp         r3, #0

; 1692 :             {
; 1693 :             DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR - exception in RxIST\r\n"));
; 1694 :             }
; 1695 :         }
; 1696 :     }
; 1697 : 
; 1698 : 
; 1699 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1700 : 
; 1701 :     return 0;

  00058	13a00000	 movne       r0, #0

; 1613 :         {
; 1614 : 
; 1615 : 		if (pDevice->bRxExitThread)

  0005c	1a000049	 bne         |$LN10@IST_RxDMA|

; 1616 : 		{
; 1617 : 			break;
; 1618 : 		}
; 1619 : 
; 1620 :         // check active buffer
; 1621 :         //
; 1622 :         status = DmaGetStatus(pDMAInfo);

  00060	e5983014	 ldr         r3, [r8, #0x14]
  00064	e593400c	 ldr         r4, [r3, #0xC]

; 1623 : 
; 1624 :         DEBUGMSG(ZONE_IST,
; 1625 :             (L"MCP:Receive DMA Interrupt(status=0x%04x)\r\n", status)
; 1626 :             );
; 1627 : 
; 1628 :         DmaClearStatus(pDMAInfo, status);

  00068	e583400c	 str         r4, [r3, #0xC]

; 1629 : 
; 1630 :         // clear interrupt
; 1631 :         //
; 1632 :         DmaInterruptDone(pDataPort->m_hDmaChannel);

  0006c	e595005c	 ldr         r0, [r5, #0x5C]
  00070	eb000000	 bl          DmaInterruptDone

; 1633 : 
; 1634 :         pInstance = pDataPort->GetActiveInstance();

  00074	e5953054	 ldr         r3, [r5, #0x54]
  00078	e1b07003	 movs        r7, r3

; 1635 :         if (pInstance == NULL)

  0007c	1a000002	 bne         |$LN5@IST_RxDMA|

; 1636 :             {
; 1637 :             StopReceive(pDevice);

  00080	e1a00006	 mov         r0, r6
  00084	eb000000	 bl          StopReceive

; 1638 :             continue;

  00088	eaffffeb	 b           |$LL9@IST_RxDMA|
  0008c		 |$LN5@IST_RxDMA|
  0008c		 |$LN17@IST_RxDMA|

; 1639 :             }
; 1640 : 
; 1641 :         __try
; 1642 :             {
; 1643 :             DEBUGMSG(ZONE_IST, (L"MCP: DMA Rx IST loopCounter=%d\r\n",
; 1644 :                 pDataPort->GetLoopCount())
; 1645 :                 );
; 1646 : 
; 1647 :             pInstance->fnMutexLock(TRUE, INFINITE,
; 1648 :                 pInstance->pTransferCallback);

  0008c	e5972008	 ldr         r2, [r7, #8]
  00090	e597301c	 ldr         r3, [r7, #0x1C]
  00094	e3e01000	 mvn         r1, #0
  00098	e3a00001	 mov         r0, #1
  0009c	e1a0e00f	 mov         lr, pc
  000a0	e12fff13	 bx          r3

; 1649 : 
; 1650 :             pDataPort->Lock();
; 1651 : 
; 1652 :             if (pDataPort->DecrementLoopCount() <= 0)

  000a4	e5953020	 ldr         r3, [r5, #0x20]
  000a8	e2433001	 sub         r3, r3, #1
  000ac	e5853020	 str         r3, [r5, #0x20]
  000b0	e3530000	 cmp         r3, #0
  000b4	ca000002	 bgt         |$LN3@IST_RxDMA|

; 1653 :                 {
; 1654 :                 StopReceive(pDevice);

  000b8	e1a00006	 mov         r0, r6
  000bc	eb000000	 bl          StopReceive
  000c0	ea000024	 b           |$LN1@IST_RxDMA|
  000c4		 |$LN3@IST_RxDMA|

; 1655 :                 }
; 1656 :             else if (status & (DMA_CICR_BLOCK_IE | DMA_CICR_FRAME_IE))

  000c4	e3140028	 tst         r4, #0x28
  000c8	0a000022	 beq         |$LN1@IST_RxDMA|

; 1657 :                 {
; 1658 :                 // Clear McBSP IRQ Status register
; 1659 :                 //
; 1660 :                 pDevice->pMcbspProfile->ClearIRQStatus();

  000cc	e5960070	 ldr         r0, [r6, #0x70]
  000d0	e5903000	 ldr         r3, [r0]
  000d4	e5933024	 ldr         r3, [r3, #0x24]
  000d8	e1a0e00f	 mov         lr, pc
  000dc	e12fff13	 bx          r3

; 1661 : 
; 1662 :                 //  swap buffer
; 1663 :                 //
; 1664 :                 pDataPort->SwapBuffer(FALSE /*rx mode*/);

  000e0	e5953000	 ldr         r3, [r5]
  000e4	e3a01000	 mov         r1, #0
  000e8	e1a00005	 mov         r0, r5
  000ec	e5933024	 ldr         r3, [r3, #0x24]
  000f0	e1a0e00f	 mov         lr, pc
  000f4	e12fff13	 bx          r3

; 1665 : 
; 1666 :                 // perform preprocessing
; 1667 :                 //
; 1668 :                 pDataPort->PostprocessDataForCapture(
; 1669 :                     DataPort_t::kBufferInactive,
; 1670 :                     pDataPort->GetSamplesPerPage());

  000f8	e5953000	 ldr         r3, [r5]
  000fc	e5952050	 ldr         r2, [r5, #0x50]
  00100	e3a01003	 mov         r1, #3
  00104	e593302c	 ldr         r3, [r3, #0x2C]
  00108	e1a00005	 mov         r0, r5
  0010c	e1a0e00f	 mov         lr, pc
  00110	e12fff13	 bx          r3

; 1671 : 
; 1672 :                 // populate the non-active buffer
; 1673 :                 //
; 1674 :                 pInstance->fnRxPopulateBuffer(
; 1675 :                     pDataPort->GetDataBuffer(DataPort_t::kBufferInactive),
; 1676 :                     pInstance->pTransferCallback,
; 1677 :                     ((pDataPort->GetDataBufferSize()) >> 1)
; 1678 :                     );

  00114	e5953000	 ldr         r3, [r5]
  00118	e1a00005	 mov         r0, r5
  0011c	e5933004	 ldr         r3, [r3, #4]
  00120	e1a0e00f	 mov         lr, pc
  00124	e12fff13	 bx          r3
  00128	e5953000	 ldr         r3, [r5]
  0012c	e1a04000	 mov         r4, r0
  00130	e3a01003	 mov         r1, #3
  00134	e5933020	 ldr         r3, [r3, #0x20]
  00138	e1a00005	 mov         r0, r5
  0013c	e1a0e00f	 mov         lr, pc
  00140	e12fff13	 bx          r3
  00144	e5971008	 ldr         r1, [r7, #8]
  00148	e5973010	 ldr         r3, [r7, #0x10]
  0014c	e1a020c4	 mov         r2, r4, asr #1
  00150	e1a0e00f	 mov         lr, pc
  00154	e12fff13	 bx          r3
  00158		 |$LN1@IST_RxDMA|

; 1679 : 
; 1680 :                 }
; 1681 : 
; 1682 :             pDataPort->Unlock();
; 1683 : 
; 1684 :             pInstance->fnMutexLock(FALSE, INFINITE,
; 1685 :                 pInstance->pTransferCallback
; 1686 :                 );

  00158	e5972008	 ldr         r2, [r7, #8]
  0015c	e597301c	 ldr         r3, [r7, #0x1C]
  00160	e3e01000	 mvn         r1, #0
  00164	e3a00000	 mov         r0, #0
  00168	e1a0e00f	 mov         lr, pc
  0016c	e12fff13	 bx          r3
  00170		 |$LN18@IST_RxDMA|

; 1687 : 
; 1688 :             DEBUGMSG(ZONE_IST, (L"MCP: DMA Rx IST interrupt done\r\n"));
; 1689 : 
; 1690 :             }

  00170	eaffffb1	 b           |$LL9@IST_RxDMA|
  00174		 |$LN14@IST_RxDMA|

; 1691 :         __except(EXCEPTION_EXECUTE_HANDLER)

  00174	e51b602c	 ldr         r6, [r11, #-0x2C]
  00178	e51b5028	 ldr         r5, [r11, #-0x28]
  0017c	e51b8024	 ldr         r8, [r11, #-0x24]
  00180	eaffffad	 b           |$LL9@IST_RxDMA|
  00184		 |$LN42@IST_RxDMA|
  00184	e51b0024	 ldr         r0, [r11, #-0x24]
  00188		 |$LN10@IST_RxDMA|

; 1702 : }

  00188	e24bd020	 sub         sp, r11, #0x20
  0018c	e89d69f0	 ldmia       sp, {r4 - r8, r11, sp, lr}
  00190	e12fff1e	 bx          lr

			 ENDP  ; |IST_RxDMA|

  00194		 |$LN13@IST_RxDMA|
  00194		 |$LN44@IST_RxDMA|

; 1691 :         __except(EXCEPTION_EXECUTE_HANDLER)

  00194	e52de004	 str         lr, [sp, #-4]!
  00198		 |$LN16@IST_RxDMA|
  00198		 |$LN47@IST_RxDMA|
  00198	e3a00001	 mov         r0, #1
  0019c		 |$LN15@IST_RxDMA|
  0019c	e49df004	 ldr         pc, [sp], #4
  001a0		 |$LN48@IST_RxDMA|
  001a0		 |$LN46@IST_RxDMA|
	EXPORT	|MCP_Deinit|
	IMPORT	|CloseBusAccessHandle|
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|ReleaseDevicePads|

  00000			 AREA	 |.pdata|, PDATA
|$T39022| DCD	|$LN28@MCP_Deinit|
	DCD	0x40003e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MCP_Deinit| PROC

; 497  : {

  00000		 |$LN28@MCP_Deinit|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39019|
  00004	e1b04000	 movs        r4, r0

; 498  :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 499  :     McBSPDevice_t *pDevice = (McBSPDevice_t*)context;
; 500  : 
; 501  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, context));
; 502  : 
; 503  :     // Check if we get correct context
; 504  :     if ((pDevice == NULL) ||
; 505  :         (pDevice->cookie != MCBSP_DEVICE_COOKIE))

  0000c	0a000036	 beq         |$cleanUp$37497|
  00010	e5942000	 ldr         r2, [r4]
  00014	e59f30d8	 ldr         r3, [pc, #0xD8]
  00018	e1520003	 cmp         r2, r3
  0001c	1a000032	 bne         |$cleanUp$37497|

; 506  :         {
; 507  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Deinit: "
; 508  :             L"Incorrect context paramer\r\n"
; 509  :             ));
; 510  :         goto cleanUp;
; 511  :         }
; 512  : 
; 513  :     // Check for open instances
; 514  :     if (pDevice->instances > 0)

  00020	e5943004	 ldr         r3, [r4, #4]
  00024	e3530000	 cmp         r3, #0
  00028	ca00002f	 bgt         |$cleanUp$37497|

; 515  :         {
; 516  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Deinit: "
; 517  :             L"Deinit with active instance (%d instances active)\r\n",
; 518  :             pDevice->instances
; 519  :             ));
; 520  :         goto cleanUp;
; 521  :         }
; 522  : 
; 523  :     if (pDevice->pTxPort != NULL)

  0002c	e5943078	 ldr         r3, [r4, #0x78]
  00030	e1b00003	 movs        r0, r3

; 524  :         {
; 525  :         delete pDevice->pTxPort;

  00034	15903000	 ldrne       r3, [r0]
  00038	13a01001	 movne       r1, #1
  0003c	15933000	 ldrne       r3, [r3]
  00040	11a0e00f	 movne       lr, pc
  00044	112fff13	 bxne        r3

; 526  :         }
; 527  : 
; 528  :     if (pDevice->pRxPort != NULL)

  00048	e5943074	 ldr         r3, [r4, #0x74]
  0004c	e1b00003	 movs        r0, r3

; 529  :         {
; 530  :         delete pDevice->pRxPort;

  00050	15903000	 ldrne       r3, [r0]
  00054	13a01001	 movne       r1, #1
  00058	15933000	 ldrne       r3, [r3]
  0005c	11a0e00f	 movne       lr, pc
  00060	112fff13	 bxne        r3

; 531  :         }
; 532  : 
; 533  :     if( pDevice->pMcbspProfile != NULL)

  00064	e5943070	 ldr         r3, [r4, #0x70]
  00068	e1b00003	 movs        r0, r3

; 534  :         {
; 535  :         delete pDevice->pMcbspProfile;

  0006c	15903000	 ldrne       r3, [r0]
  00070	13a01001	 movne       r1, #1
  00074	15933000	 ldrne       r3, [r3]
  00078	11a0e00f	 movne       lr, pc
  0007c	112fff13	 bxne        r3

; 536  :         }
; 537  : 
; 538  : 	// Release pads
; 539  : 	ReleaseDevicePads(pDevice->deviceID);

  00080	e594000c	 ldr         r0, [r4, #0xC]
  00084	eb000000	 bl          ReleaseDevicePads

; 540  : 
; 541  : 	// Disable Clocks
; 542  :     //EnableDeviceClocks(pDevice->deviceID, FALSE);
; 543  :     EnableClocks(pDevice, FALSE);

  00088	e284007c	 add         r0, r4, #0x7C
  0008c	eb000000	 bl          InterlockedDecrement
  00090	e594307c	 ldr         r3, [r4, #0x7C]
  00094	e3530000	 cmp         r3, #0
  00098	05940008	 ldreq       r0, [r4, #8]
  0009c	03a02000	 moveq       r2, #0
  000a0	03a01004	 moveq       r1, #4
  000a4	0b000000	 bleq        SetDevicePowerState

; 544  : 
; 545  :     // Unmap BSP controller registers
; 546  :     if (pDevice->pMcbspRegs != NULL)

  000a8	e594301c	 ldr         r3, [r4, #0x1C]
  000ac	e3530000	 cmp         r3, #0

; 547  :         {
; 548  :         MmUnmapIoSpace((VOID*)pDevice->pMcbspRegs, pDevice->memLen[0]);

  000b0	1594109c	 ldrne       r1, [r4, #0x9C]
  000b4	11a00003	 movne       r0, r3
  000b8	1b000000	 blne        MmUnmapIoSpace

; 549  :         }
; 550  : 
; 551  :     // Unmap BSP controller registers
; 552  :     if (pDevice->pSideToneRegs != NULL)

  000bc	e594306c	 ldr         r3, [r4, #0x6C]
  000c0	e3530000	 cmp         r3, #0

; 553  :         {
; 554  :         MmUnmapIoSpace((VOID*)pDevice->pSideToneRegs, pDevice->memLen[2]);

  000c4	159410a4	 ldrne       r1, [r4, #0xA4]
  000c8	11a00003	 movne       r0, r3
  000cc	1b000000	 blne        MmUnmapIoSpace

; 555  :         }
; 556  : 
; 557  :     // Close parent bus
; 558  :     if (pDevice->hParentBus != NULL)

  000d0	e5943008	 ldr         r3, [r4, #8]
  000d4	e3530000	 cmp         r3, #0

; 559  :         {
; 560  :         CloseBusAccessHandle(pDevice->hParentBus);

  000d8	11a00003	 movne       r0, r3
  000dc	1b000000	 blne        CloseBusAccessHandle

; 561  :         }
; 562  : 
; 563  :     // Free device structure
; 564  :     LocalFree(pDevice);

  000e0	e1a00004	 mov         r0, r4
  000e4	eb000000	 bl          LocalFree

; 565  : 
; 566  :     // Done
; 567  :     rc = TRUE;

  000e8	e3a00001	 mov         r0, #1
  000ec		 |$cleanUp$37497|

; 568  : 
; 569  : cleanUp:
; 570  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S(rc = 0x%08x)\r\n", __FUNCTION__, rc));
; 571  :     return rc;
; 572  : }

  000ec	e8bd4010	 ldmia       sp!, {r4, lr}
  000f0	e12fff1e	 bx          lr
  000f4		 |$LN29@MCP_Deinit|
  000f4		 |$LN30@MCP_Deinit|
  000f4	62737044	 DCD         0x62737044
  000f8		 |$M39020|

			 ENDP  ; |MCP_Deinit|

	EXPORT	|CopyTransferInfo|

  00000			 AREA	 |.pdata|, PDATA
|$T39034| DCD	|$LN5@CopyTransf|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CopyTransferInfo| PROC

; 844  : {

  00000		 |$LN5@CopyTransf|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39031|

; 845  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S\r\n", __FUNCTION__));
; 846  : 
; 847  :     pInstance->pTransferCallback = pTransferDataIn->pInData;

  00004	e5913000	 ldr         r3, [r1]

; 848  :     pInstance->fnRxCommand = pTransferDataIn->pfnInRxCommand;
; 849  :     pInstance->fnRxPopulateBuffer = pTransferDataIn->pfnInRxPopulateBuffer;
; 850  :     pInstance->fnTxCommand = pTransferDataIn->pfnInTxCommand;
; 851  :     pInstance->fnTxPopulateBuffer = pTransferDataIn->pfnInTxPopulateBuffer;
; 852  :     pInstance->fnMutexLock = pTransferDataIn->pfnMutexLock;
; 853  : 
; 854  :     pTransferDataOut->pOutData = pInstance;
; 855  :     pTransferDataOut->pfnOutRxCommand = RxCommand;

  00008	e59fe03c	 ldr         lr, [pc, #0x3C]

; 856  :     pTransferDataOut->pfnOutTxCommand = TxCommand;

  0000c	e59f4034	 ldr         r4, [pc, #0x34]
  00010	e5803008	 str         r3, [r0, #8]
  00014	e5913008	 ldr         r3, [r1, #8]
  00018	e5803014	 str         r3, [r0, #0x14]
  0001c	e5913010	 ldr         r3, [r1, #0x10]
  00020	e5803010	 str         r3, [r0, #0x10]
  00024	e5913004	 ldr         r3, [r1, #4]
  00028	e5803018	 str         r3, [r0, #0x18]
  0002c	e591300c	 ldr         r3, [r1, #0xC]
  00030	e580300c	 str         r3, [r0, #0xC]
  00034	e5913014	 ldr         r3, [r1, #0x14]
  00038	e580301c	 str         r3, [r0, #0x1C]
  0003c	e8824011	 stmia       r2, {r0, r4, lr}

; 857  : 
; 858  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 859  : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN6@CopyTransf|
  00048		 |$LN7@CopyTransf|
  00048	00000000	 DCD         |TxCommand|
  0004c		 |$LN8@CopyTransf|
  0004c	00000000	 DCD         |RxCommand|
  00050		 |$M39032|

			 ENDP  ; |CopyTransferInfo|

	EXPORT	|MCP_Init|
	IMPORT	|??0DataPort_t@@QAA@PAUMcBSPDevice_t@@@Z| ; DataPort_t::DataPort_t
	IMPORT	|?SocMcbspDevConf@@YAXPAUMcBSPDevice_t@@@Z| ; SocMcbspDevConf
	IMPORT	|RequestDevicePads|
	IMPORT	|GetDeviceByAddress|
	IMPORT	|MmMapIoSpace|
	IMPORT	|CreateBusAccessHandle|
	IMPORT	|GetDeviceRegistryParams|

  00000			 AREA	 |.pdata|, PDATA
|$T39112| DCD	|$LN70@MCP_Init|
	DCD	0x4000b902
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MCP_Init| PROC

; 279  : {

  00000		 |$LN70@MCP_Init|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M39109|
  00008	e1a04000	 mov         r4, r0

; 280  :     DWORD rc = 0;
; 281  :     HRESULT status = ERROR_SUCCESS;
; 282  :     McBSPDevice_t *pDevice = NULL;
; 283  :     PHYSICAL_ADDRESS pa;
; 284  : 
; 285  : 	UNREFERENCED_PARAMETER(pBusContext);
; 286  : 
; 287  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x, 0x%08x)\r\n", __FUNCTION__,
; 288  :         szContext, pBusContext
; 289  :         ));
; 290  : 
; 291  :     // Create device structure
; 292  :     //
; 293  :     pDevice = (McBSPDevice_t *)LocalAlloc(LPTR, sizeof(McBSPDevice_t));

  0000c	e3a01e57	 mov         r1, #0x57, 28
  00010	e3a00040	 mov         r0, #0x40
  00014	e3a07000	 mov         r7, #0
  00018	eb000000	 bl          LocalAlloc
  0001c	e1b06000	 movs        r6, r0

; 294  :     if (pDevice == NULL)
; 295  :         {
; 296  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Init: "
; 297  :             L"Failed allocate McBSP controller structure\r\n"
; 298  :             ));
; 299  :         status = E_FAIL;
; 300  :         goto cleanUp;

  00020	0a0000a1	 beq         |$cleanUp$37400|

; 301  :         }
; 302  : 
; 303  :     // Set McBSP device structure with 0
; 304  :     memset(pDevice, 0, sizeof(McBSPDevice_t));

  00024	e3a02e57	 mov         r2, #0x57, 28
  00028	e3a01000	 mov         r1, #0
  0002c	e1a00006	 mov         r0, r6
  00030	eb000000	 bl          memset

; 305  : 
; 306  :     // Set cookie
; 307  :     pDevice->cookie = MCBSP_DEVICE_COOKIE;

  00034	e59f22a4	 ldr         r2, [pc, #0x2A4]

; 308  : 
; 309  : 	// Initialize flags
; 310  : 	pDevice->bRxExitThread = FALSE;
; 311  : 	pDevice->bTxExitThread = FALSE;
; 312  : 
; 313  :     // Read device parameters
; 314  :     //
; 315  :     if (GetDeviceRegistryParams(
; 316  :         szContext, pDevice, dimof(s_deviceRegParams), s_deviceRegParams
; 317  :         ) != ERROR_SUCCESS)

  00038	e59f329c	 ldr         r3, [pc, #0x29C]
  0003c	e3a0e000	 mov         lr, #0
  00040	e5862000	 str         r2, [r6]
  00044	e3a0202c	 mov         r2, #0x2C
  00048	e1a01006	 mov         r1, r6
  0004c	e1a00004	 mov         r0, r4
  00050	e586e088	 str         lr, [r6, #0x88]
  00054	e586e084	 str         lr, [r6, #0x84]
  00058	eb000000	 bl          GetDeviceRegistryParams
  0005c	e3500000	 cmp         r0, #0

; 318  :         {
; 319  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Init: "
; 320  :             L"Failed to read McBSP driver registry parameters\r\n"
; 321  :             ));
; 322  :         status = E_FAIL;
; 323  :         goto cleanUp;

  00060	1a000091	 bne         |$cleanUp$37400|

; 324  :         }
; 325  : 
; 326  :     // Allocate memory to store the configuration information to device
; 327  :     //
; 328  :     pDevice->pConfigInfo = new McBSPDeviceConfiguration_t;

  00064	e3a00070	 mov         r0, #0x70
  00068	eb000000	 bl          |??2@YAPAXI@Z|
  0006c	e3500000	 cmp         r0, #0
  00070	e5860068	 str         r0, [r6, #0x68]

; 329  :     if (pDevice->pConfigInfo == NULL)
; 330  :         {
; 331  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Init: "
; 332  :             L"Failed memory allocation \r\n"
; 333  :             ));
; 334  :         status = E_FAIL;
; 335  :         goto cleanUp;

  00074	0a00008c	 beq         |$cleanUp$37400|

; 336  :         }
; 337  :     // Set ConfigInfo structure with 0
; 338  :     memset(pDevice->pConfigInfo, 0, sizeof(McBSPDeviceConfiguration_t));

  00078	e3a02070	 mov         r2, #0x70
  0007c	e3a01000	 mov         r1, #0
  00080	eb000000	 bl          memset

; 339  : 
; 340  :     // Open parent bus
; 341  :     //
; 342  :     pDevice->hParentBus = CreateBusAccessHandle(szContext);

  00084	e1a00004	 mov         r0, r4
  00088	eb000000	 bl          CreateBusAccessHandle
  0008c	e3500000	 cmp         r0, #0
  00090	e5860008	 str         r0, [r6, #8]

; 343  :     if (pDevice->hParentBus == NULL)
; 344  :         {
; 345  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Init: "
; 346  :             L"Failed open parent bus driver\r\n"
; 347  :             ));
; 348  :         status = E_FAIL;
; 349  :         goto cleanUp;

  00094	0a000084	 beq         |$cleanUp$37400|

; 350  :         }
; 351  : 
; 352  :     // Device address - Physical & Virtual
; 353  :     //
; 354  :     pDevice->pPhysAddrMcBSP = (OMAP35XX_MCBSP_REGS_t*)pDevice->memBase[0];

  00098	e596e090	 ldr         lr, [r6, #0x90]

; 355  :     pa.QuadPart = pDevice->memBase[0];
; 356  :     pDevice->pMcbspRegs = (OMAP35XX_MCBSP_REGS_t*)MmMapIoSpace(
; 357  :         pa, pDevice->memLen[0], FALSE
; 358  :         );

  0009c	e596209c	 ldr         r2, [r6, #0x9C]
  000a0	e3a01000	 mov         r1, #0
  000a4	e1a0000e	 mov         r0, lr
  000a8	e3a03000	 mov         r3, #0
  000ac	e586e018	 str         lr, [r6, #0x18]
  000b0	eb000000	 bl          MmMapIoSpace
  000b4	e3500000	 cmp         r0, #0
  000b8	e586001c	 str         r0, [r6, #0x1C]

; 359  :     if (pDevice->pMcbspRegs == NULL)
; 360  :         {
; 361  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Init: "
; 362  :             L"Failed map McBSP controller registers\r\n"
; 363  :             ));
; 364  :         status = E_FAIL;
; 365  :         goto cleanUp;

  000bc	0a00007a	 beq         |$cleanUp$37400|

; 366  :         }
; 367  : 
; 368  :     // Get the device ID
; 369  :     //
; 370  : 	pDevice->deviceID = GetDeviceByAddress(pDevice->memBase[0]);

  000c0	e5960090	 ldr         r0, [r6, #0x90]
  000c4	eb000000	 bl          GetDeviceByAddress
  000c8	e586000c	 str         r0, [r6, #0xC]

; 371  : 	if (pDevice->deviceID == OMAP_DEVICE_NONE)

  000cc	e3700001	 cmn         r0, #1

; 372  : 	{
; 373  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Init: "
; 374  :             L"Failed to get McBSP controller's device ID\r\n"
; 375  :             ));
; 376  :         status = E_FAIL;
; 377  :         goto cleanUp;

  000d0	0a000075	 beq         |$cleanUp$37400|

; 378  : 	}
; 379  : 
; 380  :    
; 381  : 	// Request pads 
; 382  :     if (!RequestDevicePads(pDevice->deviceID))

  000d4	eb000000	 bl          RequestDevicePads
  000d8	e3500000	 cmp         r0, #0

; 383  :     {
; 384  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Init: "
; 385  :             L"RequestDevicePads failed\r\n"
; 386  :             ));
; 387  :         status = E_FAIL;
; 388  :         goto cleanUp;

  000dc	0a000072	 beq         |$cleanUp$37400|

; 389  :     }
; 390  : 
; 391  :     // Request clocks (interface & functional) to access the device registers
; 392  :     //
; 393  :     //EnableDeviceClocks(pDevice->deviceID, TRUE);
; 394  :     EnableClocks(pDevice, TRUE);

  000e0	e596307c	 ldr         r3, [r6, #0x7C]
  000e4	e3530000	 cmp         r3, #0
  000e8	05960008	 ldreq       r0, [r6, #8]
  000ec	03a02000	 moveq       r2, #0
  000f0	03a01000	 moveq       r1, #0
  000f4	0b000000	 bleq        SetDevicePowerState
  000f8	e286007c	 add         r0, r6, #0x7C
  000fc	eb000000	 bl          InterlockedIncrement

; 395  : 
; 396  :     // Create the profile based on the setting in the mcbsp registry
; 397  :     //
; 398  :     if (pDevice->mcbspProfile == kMcBSPProfile_I2S_Slave)

  00100	e596308c	 ldr         r3, [r6, #0x8C]
  00104	e3530000	 cmp         r3, #0
  00108	1a000006	 bne         |$LN15@MCP_Init|

; 399  :         {
; 400  :         pDevice->pMcbspProfile = new I2SSlaveProfile_t(pDevice);

  0010c	e3a00008	 mov         r0, #8
  00110	eb000000	 bl          |??2@YAPAXI@Z|
  00114	e3500000	 cmp         r0, #0
  00118	0a000013	 beq         |$LN36@MCP_Init|
  0011c	e59f31b4	 ldr         r3, [pc, #0x1B4]

; 407  :         {
; 408  :         pDevice->pMcbspProfile = new TDMProfile_t(pDevice);

  00120	e8800048	 stmia       r0, {r3, r6}
  00124	ea000011	 b           |$LN37@MCP_Init|
  00128		 |$LN15@MCP_Init|

; 401  :         }
; 402  :     else if (pDevice->mcbspProfile == kMcBSPProfile_I2S_Master)

  00128	e3530001	 cmp         r3, #1
  0012c	1a000006	 bne         |$LN13@MCP_Init|

; 403  :         {
; 404  :         pDevice->pMcbspProfile = new I2SMasterProfile_t(pDevice);

  00130	e3a00008	 mov         r0, #8
  00134	eb000000	 bl          |??2@YAPAXI@Z|
  00138	e3500000	 cmp         r0, #0
  0013c	0a00000a	 beq         |$LN36@MCP_Init|
  00140	e59f318c	 ldr         r3, [pc, #0x18C]

; 407  :         {
; 408  :         pDevice->pMcbspProfile = new TDMProfile_t(pDevice);

  00144	e8800048	 stmia       r0, {r3, r6}
  00148	ea000008	 b           |$LN37@MCP_Init|
  0014c		 |$LN13@MCP_Init|

; 405  :         }
; 406  :     else if (pDevice->mcbspProfile == kMcBSPProfile_TDM)

  0014c	e3530002	 cmp         r3, #2
  00150	1a000007	 bne         |$LN11@MCP_Init|

; 407  :         {
; 408  :         pDevice->pMcbspProfile = new TDMProfile_t(pDevice);

  00154	e3a00008	 mov         r0, #8
  00158	eb000000	 bl          |??2@YAPAXI@Z|
  0015c	e3500000	 cmp         r0, #0
  00160	159f3168	 ldrne       r3, [pc, #0x168]
  00164	18800048	 stmneia     r0, {r3, r6}
  00168	1a000000	 bne         |$LN37@MCP_Init|
  0016c		 |$LN36@MCP_Init|
  0016c	e3a00000	 mov         r0, #0
  00170		 |$LN37@MCP_Init|
  00170	e5860070	 str         r0, [r6, #0x70]
  00174		 |$LN11@MCP_Init|

; 409  :         }
; 410  :     if (pDevice->pMcbspProfile == NULL)

  00174	e5963070	 ldr         r3, [r6, #0x70]
  00178	e1b00003	 movs        r0, r3

; 411  :         {
; 412  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Init: "
; 413  :             L"Failed memory allocation or Unknown Profile Request\r\n"
; 414  :             ));
; 415  :         status = E_FAIL;
; 416  :         goto cleanUp;

  0017c	0a00004a	 beq         |$cleanUp$37400|

; 417  :         }
; 418  : 
; 419  :     // Initialise the Mcbsp profile handler object
; 420  :     //
; 421  :     pDevice->pMcbspProfile->Initialize();

  00180	e5903000	 ldr         r3, [r0]
  00184	e5933004	 ldr         r3, [r3, #4]
  00188	e1a0e00f	 mov         lr, pc
  0018c	e12fff13	 bx          r3

; 422  : 
; 423  : 	// Perform SOC-specific configuration
; 424  : 	SocMcbspDevConf(pDevice);

  00190	e1a00006	 mov         r0, r6
  00194	eb000000	 bl          |?SocMcbspDevConf@@YAXPAUMcBSPDevice_t@@@Z|

; 425  : 
; 426  :     // Allocate & Initialize the device port objects
; 427  :     //
; 428  :     pDevice->pTxPort = new DataPort_t(pDevice);

  00198	e3a00060	 mov         r0, #0x60
  0019c	eb000000	 bl          |??2@YAPAXI@Z|
  001a0	e3500000	 cmp         r0, #0
  001a4	0a000003	 beq         |$LN38@MCP_Init|
  001a8	e1a01006	 mov         r1, r6
  001ac	eb000000	 bl          |??0DataPort_t@@QAA@PAUMcBSPDevice_t@@@Z|
  001b0	e1a03000	 mov         r3, r0
  001b4	ea000000	 b           |$LN39@MCP_Init|
  001b8		 |$LN38@MCP_Init|
  001b8	e3a03000	 mov         r3, #0
  001bc		 |$LN39@MCP_Init|

; 429  :     pDevice->pRxPort = new DataPort_t(pDevice);

  001bc	e3a00060	 mov         r0, #0x60
  001c0	e5863078	 str         r3, [r6, #0x78]
  001c4	eb000000	 bl          |??2@YAPAXI@Z|
  001c8	e3500000	 cmp         r0, #0
  001cc	0a000002	 beq         |$LN40@MCP_Init|
  001d0	e1a01006	 mov         r1, r6
  001d4	eb000000	 bl          |??0DataPort_t@@QAA@PAUMcBSPDevice_t@@@Z|
  001d8	ea000000	 b           |$LN41@MCP_Init|
  001dc		 |$LN40@MCP_Init|
  001dc	e3a00000	 mov         r0, #0
  001e0		 |$LN41@MCP_Init|
  001e0	e5860074	 str         r0, [r6, #0x74]

; 430  : 
; 431  :     if ((pDevice->pRxPort == NULL) ||
; 432  :         (pDevice->pTxPort == NULL))

  001e4	e3500000	 cmp         r0, #0
  001e8	0a00002f	 beq         |$cleanUp$37400|
  001ec	e5963078	 ldr         r3, [r6, #0x78]
  001f0	e1b00003	 movs        r0, r3
  001f4	0a00002c	 beq         |$cleanUp$37400|

; 433  :         {
; 434  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Init: "
; 435  :             L"Failed to allocate rx/tx data port object\r\n"
; 436  :             ));
; 437  :         status = E_FAIL;
; 438  :         goto cleanUp;
; 439  :         }
; 440  : 
; 441  :     if (pDevice->pTxPort->Initialize(&s_TxDmaSettings,
; 442  :         pDevice->sizeTxBuffer,(WORD)pDevice->dmaTxSyncMap, IST_TxDMA
; 443  :         ) == FALSE)

  001f8	e5903000	 ldr         r3, [r0]
  001fc	e59610a8	 ldr         r1, [r6, #0xA8]
  00200	e59f80c4	 ldr         r8, [pc, #0xC4]
  00204	e59f40bc	 ldr         r4, [pc, #0xBC]
  00208	e5935018	 ldr         r5, [r3, #0x18]
  0020c	e1a03801	 mov         r3, r1, lsl #16
  00210	e59620bc	 ldr         r2, [r6, #0xBC]
  00214	e1a03823	 mov         r3, r3, lsr #16
  00218	e1a01008	 mov         r1, r8
  0021c	e58d4000	 str         r4, [sp]
  00220	e1a0e00f	 mov         lr, pc
  00224	e12fff15	 bx          r5
  00228	e3500000	 cmp         r0, #0

; 444  :         {
; 445  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Init: "
; 446  :             L"Failed to initialize tx port\r\n"
; 447  :             ));
; 448  :         status = E_FAIL;
; 449  :         goto cleanUp;

  0022c	0a00001e	 beq         |$cleanUp$37400|

; 450  :         }
; 451  : 
; 452  :     if (pDevice->pRxPort->Initialize(&s_RxDmaSettings,
; 453  :         pDevice->sizeRxBuffer,(WORD)pDevice->dmaRxSyncMap, IST_RxDMA
; 454  :         ) == FALSE)

  00230	e5960074	 ldr         r0, [r6, #0x74]
  00234	e59630ac	 ldr         r3, [r6, #0xAC]
  00238	e59f5084	 ldr         r5, [pc, #0x84]
  0023c	e5901000	 ldr         r1, [r0]
  00240	e59620b8	 ldr         r2, [r6, #0xB8]
  00244	e1a03803	 mov         r3, r3, lsl #16
  00248	e5914018	 ldr         r4, [r1, #0x18]
  0024c	e2881030	 add         r1, r8, #0x30
  00250	e1a03823	 mov         r3, r3, lsr #16
  00254	e58d5000	 str         r5, [sp]
  00258	e1a0e00f	 mov         lr, pc
  0025c	e12fff14	 bx          r4
  00260	e3500000	 cmp         r0, #0

; 455  :         {
; 456  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_Init: "
; 457  :             L"Failed to initialize rx port\r\n"
; 458  :             ));
; 459  :         status = E_FAIL;
; 460  :         goto cleanUp;

  00264	0a000010	 beq         |$cleanUp$37400|

; 461  :         }
; 462  : 
; 463  :     pDevice->pTxPort->SetDstPhysAddr(
; 464  :         (DWORD)pDevice->pPhysAddrMcBSP + offset(OMAP35XX_MCBSP_REGS_t, DXR));

  00268	e5963018	 ldr         r3, [r6, #0x18]
  0026c	e5960078	 ldr         r0, [r6, #0x78]
  00270	e2831008	 add         r1, r3, #8
  00274	eb000000	 bl          |?SetDstPhysAddr@DataPort_t@@QAAXK@Z|

; 465  : 
; 466  :     pDevice->pRxPort->SetSrcPhysAddr(
; 467  :         (DWORD)pDevice->pPhysAddrMcBSP + offset(OMAP35XX_MCBSP_REGS_t, DRR));

  00278	e5961018	 ldr         r1, [r6, #0x18]
  0027c	e5960074	 ldr         r0, [r6, #0x74]
  00280	eb000000	 bl          |?SetSrcPhysAddr@DataPort_t@@QAAXK@Z|

; 468  : 
; 469  :     //EnableDeviceClocks(pDevice->deviceID, FALSE);
; 470  :     EnableClocks(pDevice, FALSE);

  00284	e286007c	 add         r0, r6, #0x7C
  00288	eb000000	 bl          InterlockedDecrement
  0028c	e596307c	 ldr         r3, [r6, #0x7C]
  00290	e3530000	 cmp         r3, #0
  00294	05960008	 ldreq       r0, [r6, #8]
  00298	03a02000	 moveq       r2, #0
  0029c	03a01004	 moveq       r1, #4
  002a0	0b000000	 bleq        SetDevicePowerState

; 471  :     ASSERT(pDevice->nActivityRefCount == 0);
; 472  : 
; 473  :     // Done...
; 474  :     rc = (DWORD)pDevice;

  002a4	e1a07006	 mov         r7, r6
  002a8	ea000001	 b           |$LN1@MCP_Init|
  002ac		 |$cleanUp$37400|

; 475  : 
; 476  : cleanUp:
; 477  :     if (status == E_FAIL)
; 478  :         {
; 479  :         MCP_Deinit((DWORD)pDevice);

  002ac	e1a00006	 mov         r0, r6
  002b0	eb000000	 bl          MCP_Deinit
  002b4		 |$LN1@MCP_Init|

; 480  :         }
; 481  : 
; 482  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S(rc = 0x%08x)\r\n", __FUNCTION__, rc));
; 483  :     return rc;
; 484  : }

  002b4	e1a00007	 mov         r0, r7
  002b8	e28dd004	 add         sp, sp, #4
  002bc	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  002c0	e12fff1e	 bx          lr
  002c4		 |$LN71@MCP_Init|
  002c4		 |$LN72@MCP_Init|
  002c4	00000000	 DCD         |IST_RxDMA|
  002c8		 |$LN73@MCP_Init|
  002c8	00000000	 DCD         |IST_TxDMA|
  002cc		 |$LN74@MCP_Init|
  002cc	00000000	 DCD         |s_TxDmaSettings|
  002d0		 |$LN75@MCP_Init|
  002d0	00000000	 DCD         |??_7TDMProfile_t@@6B@|
  002d4		 |$LN76@MCP_Init|
  002d4	00000000	 DCD         |??_7I2SMasterProfile_t@@6B@|
  002d8		 |$LN77@MCP_Init|
  002d8	00000000	 DCD         |??_7I2SSlaveProfile_t@@6B@|
  002dc		 |$LN78@MCP_Init|
  002dc	00000000	 DCD         |s_deviceRegParams|
  002e0		 |$LN79@MCP_Init|
  002e0	62737044	 DCD         0x62737044
  002e4		 |$M39110|

			 ENDP  ; |MCP_Init|

	EXPORT	|MCP_IOControl|
	IMPORT	|SetLastError|
	IMPORT	|CeSafeCopyMemory|
	IMPORT	|GetCallerProcess|
; File c:\wince600\public\common\sdk\inc\objbase.h

  00000			 AREA	 |.pdata|, PDATA
|$T39158| DCD	|$LN37@MCP_IOCont|
	DCD	0x40008c02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\mcbsp.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MCP_IOControl| PROC

; 708  : {

  00000		 |$LN37@MCP_IOCont|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M39155|
  00008	e1a09003	 mov         r9, r3
  0000c	e1a06002	 mov         r6, r2
  00010	e1a05000	 mov         r5, r0

; 709  :     BOOL rc = FALSE;
; 710  :     McBSPInstance_t *pInstance = (McBSPInstance_t*)context;
; 711  :     McBSPDevice_t  *pDevice = pInstance->pDevice;
; 712  :     DEVICE_IFC_MCBSP ifc;
; 713  : 
; 714  :     DEBUGMSG(ZONE_FUNCTION, (
; 715  :         L"MCP:+%S(0x%08x, 0x%08x, 0x%08x, %d, 0x%08x, %d, 0x%08x)\r\n",
; 716  :         __FUNCTION__, context, code, pInBuffer, inSize, pOutBuffer, outSize,
; 717  :          pOutSize
; 718  :         ));
; 719  : 
; 720  :     // Check if we get correct context
; 721  :     if ((pInstance == NULL) ||
; 722  :         (pInstance->cookie != MCBSP_INSTANCE_COOKIE))

  00014	e5954000	 ldr         r4, [r5]
  00018	e59fe20c	 ldr         lr, [pc, #0x20C]
  0001c	e5958004	 ldr         r8, [r5, #4]
  00020	e3a07000	 mov         r7, #0
  00024	e154000e	 cmp         r4, lr
  00028	1a000075	 bne         |$cleanUp$37575|
  0002c	e3a03822	 mov         r3, #0x22, 16

; 723  :         {
; 724  :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_IOControl: "
; 725  :             L"Incorrect context paramer\r\n"
; 726  :             ));
; 727  :         goto cleanUp;
; 728  :         }
; 729  : 
; 730  :     switch (code)

  00030	e383eb01	 orr         lr, r3, #1, 22
  00034	e151000e	 cmp         r1, lr
  00038	0a00004c	 beq         |$LN12@MCP_IOCont|
  0003c	e3a03405	 mov         r3, #5, 8
  00040	e3833004	 orr         r3, r3, #4
  00044	e1510003	 cmp         r1, r3
  00048	0a000034	 beq         |$LN14@MCP_IOCont|
  0004c	e3a03405	 mov         r3, #5, 8
  00050	e3833008	 orr         r3, r3, #8
  00054	e1510003	 cmp         r1, r3
  00058	0a000027	 beq         |$LN13@MCP_IOCont|
  0005c	e59f31c4	 ldr         r3, [pc, #0x1C4]
  00060	e1510003	 cmp         r1, r3
  00064	1a000066	 bne         |$cleanUp$37575|

; 783  :                     {
; 784  :                     SetLastError(ERROR_INVALID_PARAMETER);
; 785  :                     break;
; 786  :                     }
; 787  :                 rc = TRUE;
; 788  :                 break;
; 789  :                 }
; 790  : 
; 791  :             SetLastError(ERROR_INVALID_PARAMETER);
; 792  :             break;
; 793  : 
; 794  :         case IOCTL_CONTEXT_RESTORE:
; 795  :             if(pDevice != NULL)

  00068	e3580000	 cmp         r8, #0
  0006c	0a000029	 beq         |$LN2@MCP_IOCont|

; 796  :                 {
; 797  :                 pDevice->pMcbspProfile->ContextRestore();

  00070	e5980070	 ldr         r0, [r8, #0x70]
  00074	e5903000	 ldr         r3, [r0]
  00078	e5933008	 ldr         r3, [r3, #8]
  0007c	e1a0e00f	 mov         lr, pc
  00080	e12fff13	 bx          r3

; 798  : 
; 799  :                 pDevice->pTxPort->RestoreDMAcontext(&s_TxDmaSettings,
; 800  :                     pDevice->sizeTxBuffer, (WORD)pDevice->dmaTxSyncMap
; 801  :                     );

  00084	e5980078	 ldr         r0, [r8, #0x78]
  00088	e59830a8	 ldr         r3, [r8, #0xA8]
  0008c	e59f5190	 ldr         r5, [pc, #0x190]
  00090	e5901000	 ldr         r1, [r0]
  00094	e59820bc	 ldr         r2, [r8, #0xBC]
  00098	e1a03803	 mov         r3, r3, lsl #16
  0009c	e591401c	 ldr         r4, [r1, #0x1C]
  000a0	e1a01005	 mov         r1, r5
  000a4	e1a03823	 mov         r3, r3, lsr #16
  000a8	e1a0e00f	 mov         lr, pc
  000ac	e12fff14	 bx          r4

; 802  : 
; 803  :                 pDevice->pRxPort->RestoreDMAcontext(&s_RxDmaSettings,
; 804  :                     pDevice->sizeRxBuffer,(WORD)pDevice->dmaRxSyncMap
; 805  :                     );

  000b0	e5980074	 ldr         r0, [r8, #0x74]
  000b4	e59830ac	 ldr         r3, [r8, #0xAC]
  000b8	e59820b8	 ldr         r2, [r8, #0xB8]
  000bc	e590e000	 ldr         lr, [r0]
  000c0	e1a03803	 mov         r3, r3, lsl #16
  000c4	e1a03823	 mov         r3, r3, lsr #16
  000c8	e59e401c	 ldr         r4, [lr, #0x1C]
  000cc	e2851030	 add         r1, r5, #0x30
  000d0	e1a0e00f	 mov         lr, pc
  000d4	e12fff14	 bx          r4

; 806  : 
; 807  :                 pDevice->pTxPort->SetDstPhysAddr(
; 808  :                     (DWORD)pDevice->pPhysAddrMcBSP +
; 809  :                     offset(OMAP35XX_MCBSP_REGS_t, DXR)
; 810  :                     );

  000d8	e5983018	 ldr         r3, [r8, #0x18]
  000dc	e5980078	 ldr         r0, [r8, #0x78]
  000e0	e2831008	 add         r1, r3, #8
  000e4	eb000000	 bl          |?SetDstPhysAddr@DataPort_t@@QAAXK@Z|

; 811  : 
; 812  :                 pDevice->pRxPort->SetSrcPhysAddr(
; 813  :                     (DWORD)pDevice->pPhysAddrMcBSP +
; 814  :                     offset(OMAP35XX_MCBSP_REGS_t, DRR)
; 815  :                     );

  000e8	e5981018	 ldr         r1, [r8, #0x18]
  000ec	e5980074	 ldr         r0, [r8, #0x74]
  000f0	eb000000	 bl          |?SetSrcPhysAddr@DataPort_t@@QAAXK@Z|
  000f4	e3a07001	 mov         r7, #1
  000f8	ea000041	 b           |$cleanUp$37575|
  000fc		 |$LN13@MCP_IOCont|

; 738  : 
; 739  :         case IOCTL_EXTERNAL_DRVR_UNREGISTER_TRANSFERCALLBACKS:
; 740  :             ClearTransferInfo(pInstance);

  000fc	e3a03000	 mov         r3, #0
  00100	e5853008	 str         r3, [r5, #8]
  00104	e5853014	 str         r3, [r5, #0x14]
  00108	e5853010	 str         r3, [r5, #0x10]
  0010c	e5853018	 str         r3, [r5, #0x18]
  00110	e585300c	 str         r3, [r5, #0xC]
  00114	e585301c	 str         r3, [r5, #0x1C]

; 811  : 
; 812  :                 pDevice->pRxPort->SetSrcPhysAddr(
; 813  :                     (DWORD)pDevice->pPhysAddrMcBSP +
; 814  :                     offset(OMAP35XX_MCBSP_REGS_t, DRR)
; 815  :                     );

  00118		 |$LN2@MCP_IOCont|

; 741  :             rc = TRUE;

  00118	e3a07001	 mov         r7, #1

; 742  :             break;

  0011c	ea000038	 b           |$cleanUp$37575|
  00120		 |$LN14@MCP_IOCont|

; 731  :         {
; 732  :         case IOCTL_EXTERNAL_DRVR_REGISTER_TRANSFERCALLBACKS:
; 733  :             CopyTransferInfo(pInstance,
; 734  :                              (EXTERNAL_DRVR_DATA_TRANSFER_IN*)pInBuffer,
; 735  :                              (EXTERNAL_DRVR_DATA_TRANSFER_OUT*)pOutBuffer);

  00120	e5963000	 ldr         r3, [r6]
  00124	e59d0024	 ldr         r0, [sp, #0x24]
  00128	e59f10f0	 ldr         r1, [pc, #0xF0]
  0012c	e5853008	 str         r3, [r5, #8]
  00130	e5963008	 ldr         r3, [r6, #8]
  00134	e59f20e0	 ldr         r2, [pc, #0xE0]

; 736  :             rc = TRUE;

  00138	e3a07001	 mov         r7, #1
  0013c	e5853014	 str         r3, [r5, #0x14]
  00140	e5963010	 ldr         r3, [r6, #0x10]
  00144	e5853010	 str         r3, [r5, #0x10]
  00148	e5963004	 ldr         r3, [r6, #4]
  0014c	e5853018	 str         r3, [r5, #0x18]
  00150	e596300c	 ldr         r3, [r6, #0xC]
  00154	e585300c	 str         r3, [r5, #0xC]
  00158	e5963014	 ldr         r3, [r6, #0x14]
  0015c	e585301c	 str         r3, [r5, #0x1C]
  00160	e5805000	 str         r5, [r0]
  00164	e5801008	 str         r1, [r0, #8]
  00168	e5802004	 str         r2, [r0, #4]

; 737  :             break;

  0016c	ea000024	 b           |$cleanUp$37575|
  00170		 |$LN12@MCP_IOCont|

; 743  : 
; 744  :         case IOCTL_DDK_GET_DRIVER_IFC:
; 745  :             // We can give interface only to our peer in device process
; 746  :             if (GetCurrentProcessId() != (DWORD)GetCallerProcess())

  00170	e3a0000c	 mov         r0, #0xC
  00174	eb000000	 bl          __GetUserKData
  00178	e1a04000	 mov         r4, r0
  0017c	eb000000	 bl          GetCallerProcess
  00180	e1540000	 cmp         r4, r0

; 747  :                 {
; 748  :                 DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: MCP_IOControl: "
; 749  :                     L"IOCTL_DDK_GET_DRIVER_IFC can be called only from "
; 750  :                     L"device process (caller process id 0x%08x)\r\n",
; 751  :                     GetCallerProcess()
; 752  :                     ));
; 753  :                 SetLastError(ERROR_ACCESS_DENIED);

  00184	13a00005	 movne       r0, #5
  00188	1a00001c	 bne         |$LN33@MCP_IOCont|

; 754  :                 break;
; 755  :                 }
; 756  : 
; 757  :             // Check input parameters
; 758  :             if ((pInBuffer == NULL) ||
; 759  :                 (inSize < sizeof(GUID)))

  0018c	e3560000	 cmp         r6, #0
  00190	0a000019	 beq         |$LN9@MCP_IOCont|
  00194	e3590010	 cmp         r9, #0x10
  00198	3a000017	 bcc         |$LN9@MCP_IOCont|

; 762  :                 break;
; 763  :                 }
; 764  : 
; 765  :             if (IsEqualGUID(*(GUID*)pInBuffer, DEVICE_IFC_MCBSP_GUID))

  0019c	e59f1074	 ldr         r1, [pc, #0x74]
  001a0	e3a02010	 mov         r2, #0x10
  001a4	e1a00006	 mov         r0, r6
  001a8	eb000000	 bl          memcmp
  001ac	e3500000	 cmp         r0, #0
  001b0	1a000011	 bne         |$LN9@MCP_IOCont|

; 766  :                 {
; 767  :                 if (pOutSize != NULL)

  001b4	e59d302c	 ldr         r3, [sp, #0x2C]

; 768  :                     {
; 769  :                     *pOutSize = sizeof(DEVICE_IFC_MCBSP);
; 770  :                     }
; 771  :                 if ((pOutBuffer == NULL) ||
; 772  :                     (outSize < sizeof(DEVICE_IFC_MCBSP)))

  001b8	e59d0024	 ldr         r0, [sp, #0x24]
  001bc	e3530000	 cmp         r3, #0
  001c0	13a02008	 movne       r2, #8
  001c4	15832000	 strne       r2, [r3]
  001c8	e3500000	 cmp         r0, #0
  001cc	0a00000a	 beq         |$LN9@MCP_IOCont|
  001d0	e59d3028	 ldr         r3, [sp, #0x28]
  001d4	e3530008	 cmp         r3, #8
  001d8	3a000007	 bcc         |$LN9@MCP_IOCont|

; 773  :                     {
; 774  :                     SetLastError(ERROR_INVALID_PARAMETER);
; 775  :                     break;
; 776  :                     }
; 777  :                 ifc.context = context;
; 778  :                 ifc.pfnIOctl = MCP_IOControl;

  001dc	e59f3030	 ldr         r3, [pc, #0x30]

; 779  : 
; 780  :                 if (!CeSafeCopyMemory(pOutBuffer, &ifc,
; 781  :                     sizeof(DEVICE_IFC_MCBSP)
; 782  :                     ))

  001e0	e3a02008	 mov         r2, #8
  001e4	e28d1000	 add         r1, sp, #0
  001e8	e58d3004	 str         r3, [sp, #4]
  001ec	e58d5000	 str         r5, [sp]
  001f0	eb000000	 bl          CeSafeCopyMemory
  001f4	e3500000	 cmp         r0, #0
  001f8	1affffc6	 bne         |$LN2@MCP_IOCont|
  001fc		 |$LN9@MCP_IOCont|

; 760  :                 {
; 761  :                 SetLastError(ERROR_INVALID_PARAMETER);

  001fc	e3a00057	 mov         r0, #0x57
  00200		 |$LN33@MCP_IOCont|
  00200	eb000000	 bl          SetLastError
  00204		 |$cleanUp$37575|

; 816  :                 }
; 817  :             else
; 818  :                 {
; 819  :                 DEBUGMSG( ZONE_ERROR, (L"MCP: ERROR: MCP_IOControl: "
; 820  :                     L"IOCTL_CONTEXT_RESTORE_NOTIFY Failed\r\n"));
; 821  :                 }
; 822  :             rc = TRUE;
; 823  :             break;
; 824  :         }
; 825  : 
; 826  : cleanUp:
; 827  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S(rc = 0x%08x)\r\n", __FUNCTION__, rc));
; 828  :     return rc;
; 829  : }

  00204	e1a00007	 mov         r0, r7
  00208	e28dd008	 add         sp, sp, #8
  0020c	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00210	e12fff1e	 bx          lr
  00214		 |$LN38@MCP_IOCont|
  00214		 |$LN39@MCP_IOCont|
  00214	00000000	 DCD         |MCP_IOControl|
  00218		 |$LN40@MCP_IOCont|
  00218	00000000	 DCD         |DEVICE_IFC_MCBSP_GUID|
  0021c		 |$LN41@MCP_IOCont|
  0021c	00000000	 DCD         |TxCommand|
  00220		 |$LN42@MCP_IOCont|
  00220	00000000	 DCD         |RxCommand|
  00224		 |$LN43@MCP_IOCont|
  00224	00000000	 DCD         |s_TxDmaSettings|
  00228		 |$LN44@MCP_IOCont|
  00228	80038140	 DCD         0x80038140
  0022c		 |$LN45@MCP_IOCont|
  0022c	62737049	 DCD         0x62737049
  00230		 |$M39156|

			 ENDP  ; |MCP_IOControl|

	END
