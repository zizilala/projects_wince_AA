; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\MCBSP\mcbspconfig.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|f_rgWordLength| DCD 0x8
	DCD	0xc
	DCD	0x10
	DCD	0x14
	DCD	0x18
	DCD	0x20
	EXPORT	|mcbsp_GetRegistryValues|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\mcbsp\mcbspconfig.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T37131| DCD	|$LN98@mcbsp_GetR|
	DCD	0x40012001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_GetRegistryValues| PROC

; 90   : {

  00000		 |$LN98@mcbsp_GetR|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M37128|

; 91   :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 92   : 
; 93   :     //------------------------
; 94   :     // SRG values
; 95   :     //------------------------
; 96   : 
; 97   :     // use SRG clock source from registry
; 98   :     switch (pDevice->clockSourceSRG)

  00004	e5903114	 ldr         r3, [r0, #0x114]
  00008	e3a07004	 mov         r7, #4
  0000c	e3a06003	 mov         r6, #3
  00010	e3530000	 cmp         r3, #0
  00014	e3a04002	 mov         r4, #2
  00018	e3a01000	 mov         r1, #0
  0001c	e3a05001	 mov         r5, #1
  00020	0a000012	 beq         |$LN83@mcbsp_GetR|
  00024	e3530001	 cmp         r3, #1
  00028	0a00000d	 beq         |$LN82@mcbsp_GetR|
  0002c	e3530002	 cmp         r3, #2
  00030	0a000008	 beq         |$LN81@mcbsp_GetR|
  00034	e3530003	 cmp         r3, #3
  00038	0a000003	 beq         |$LN80@mcbsp_GetR|
  0003c	e3530004	 cmp         r3, #4

; 112  :         case kMcBSP_SRG_SRC_CLKX_PIN:
; 113  :             pDevice->pConfigInfo->SRGClkSrc = kMcBSP_SRG_SRC_CLKX_PIN;
; 114  :             break;
; 115  :         default:
; 116  :             pDevice->pConfigInfo->SRGClkSrc = kMcBSP_SRG_SRC_CLKX_PIN;

  00040	e5903068	 ldr         r3, [r0, #0x68]
  00044	e583705c	 str         r7, [r3, #0x5C]
  00048	ea00000a	 b           |$LN84@mcbsp_GetR|
  0004c		 |$LN80@mcbsp_GetR|

; 109  :         case kMcBSP_SRG_SRC_CLKR_PIN:
; 110  :             pDevice->pConfigInfo->SRGClkSrc = kMcBSP_SRG_SRC_CLKR_PIN;

  0004c	e5903068	 ldr         r3, [r0, #0x68]
  00050	e583605c	 str         r6, [r3, #0x5C]

; 111  :             break;

  00054	ea000007	 b           |$LN84@mcbsp_GetR|
  00058		 |$LN81@mcbsp_GetR|

; 106  :         case kMcBSP_SRG_SRC_CPU_CLK:
; 107  :             pDevice->pConfigInfo->SRGClkSrc = kMcBSP_SRG_SRC_CPU_CLK;

  00058	e5903068	 ldr         r3, [r0, #0x68]
  0005c	e583405c	 str         r4, [r3, #0x5C]

; 108  :             break;

  00060	ea000004	 b           |$LN84@mcbsp_GetR|
  00064		 |$LN82@mcbsp_GetR|

; 102  :             break;
; 103  :         case kMcBSP_SRG_SRC_CLKS_PIN_FALL:
; 104  :             pDevice->pConfigInfo->SRGClkSrc = kMcBSP_SRG_SRC_CLKS_PIN_FALL;

  00064	e5903068	 ldr         r3, [r0, #0x68]
  00068	e583505c	 str         r5, [r3, #0x5C]

; 105  :             break;

  0006c	ea000001	 b           |$LN84@mcbsp_GetR|
  00070		 |$LN83@mcbsp_GetR|

; 99   :         {
; 100  :         case kMcBSP_SRG_SRC_CLKS_PIN_RISE:
; 101  :             pDevice->pConfigInfo->SRGClkSrc = kMcBSP_SRG_SRC_CLKS_PIN_RISE;

  00070	e5903068	 ldr         r3, [r0, #0x68]
  00074	e583105c	 str         r1, [r3, #0x5C]
  00078		 |$LN84@mcbsp_GetR|

; 117  :         }
; 118  : 
; 119  :     // use frame width from registry
; 120  :     pDevice->pConfigInfo->SRGFrameWidth = (UINT32)pDevice->frameWidthSRG;

  00078	e5902068	 ldr         r2, [r0, #0x68]
  0007c	e5903118	 ldr         r3, [r0, #0x118]

; 121  : 
; 122  :     // use clock divider from registry
; 123  :     pDevice->pConfigInfo->SRGClkDivFactor = (UINT32)pDevice->clockDividerSRG;
; 124  : 
; 125  :     // use clock resync from registry
; 126  :     if (pDevice->clockResyncSRG)

  00080	e3a08902	 mov         r8, #2, 18

; 127  :         {
; 128  :         pDevice->pConfigInfo->SRGClkSyncMode = MCBSP_SRGR2_GSYNC;
; 129  :         }
; 130  :     else
; 131  :         {
; 132  :         pDevice->pConfigInfo->SRGClkSyncMode = 0;
; 133  :         }
; 134  : 
; 135  :     //------------------------
; 136  :     // Transmit and receive values
; 137  :     //------------------------
; 138  : 
; 139  :     // use frame length from registry
; 140  :     pDevice->pConfigInfo->TxFrameLength = (UINT32)pDevice->wordsPerFrame;
; 141  :     pDevice->pConfigInfo->RxFrameLength = (UINT32)pDevice->wordsPerFrame;
; 142  : 
; 143  :     // use word length from registry
; 144  :     switch (pDevice->wordLength)

  00084	e3a0e005	 mov         lr, #5
  00088	e5823060	 str         r3, [r2, #0x60]
  0008c	e5902068	 ldr         r2, [r0, #0x68]
  00090	e590311c	 ldr         r3, [r0, #0x11C]
  00094	e5823064	 str         r3, [r2, #0x64]
  00098	e5903120	 ldr         r3, [r0, #0x120]
  0009c	e3530000	 cmp         r3, #0
  000a0	e5903068	 ldr         r3, [r0, #0x68]
  000a4	15838068	 strne       r8, [r3, #0x68]
  000a8	05831068	 streq       r1, [r3, #0x68]
  000ac	e5902068	 ldr         r2, [r0, #0x68]
  000b0	e59030c8	 ldr         r3, [r0, #0xC8]
  000b4	e5823030	 str         r3, [r2, #0x30]
  000b8	e5902068	 ldr         r2, [r0, #0x68]
  000bc	e59030c8	 ldr         r3, [r0, #0xC8]
  000c0	e5823004	 str         r3, [r2, #4]
  000c4	e59030cc	 ldr         r3, [r0, #0xCC]
  000c8	e3530008	 cmp         r3, #8
  000cc	0a000022	 beq         |$LN73@mcbsp_GetR|
  000d0	e353000c	 cmp         r3, #0xC
  000d4	0a00001b	 beq         |$LN72@mcbsp_GetR|
  000d8	e3530010	 cmp         r3, #0x10
  000dc	0a000014	 beq         |$LN71@mcbsp_GetR|
  000e0	e3530014	 cmp         r3, #0x14
  000e4	0a00000d	 beq         |$LN70@mcbsp_GetR|
  000e8	e3530018	 cmp         r3, #0x18
  000ec	0a000006	 beq         |$LN69@mcbsp_GetR|
  000f0	e3530020	 cmp         r3, #0x20

; 166  :         case 32:
; 167  :             pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_32;
; 168  :             pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_32;
; 169  :             break;
; 170  :         default:
; 171  :             pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_16;

  000f4	e5903068	 ldr         r3, [r0, #0x68]

; 172  :             pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_16;

  000f8	1a00000e	 bne         |$LN88@mcbsp_GetR|
  000fc	e583e034	 str         lr, [r3, #0x34]
  00100	e5903068	 ldr         r3, [r0, #0x68]
  00104	e583e008	 str         lr, [r3, #8]
  00108	ea000017	 b           |$LN74@mcbsp_GetR|
  0010c		 |$LN69@mcbsp_GetR|

; 162  :         case 24:
; 163  :             pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_24;

  0010c	e5903068	 ldr         r3, [r0, #0x68]
  00110	e5837034	 str         r7, [r3, #0x34]

; 164  :             pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_24;

  00114	e5903068	 ldr         r3, [r0, #0x68]
  00118	e5837008	 str         r7, [r3, #8]

; 165  :             break;

  0011c	ea000012	 b           |$LN74@mcbsp_GetR|
  00120		 |$LN70@mcbsp_GetR|

; 158  :         case 20:
; 159  :             pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_20;

  00120	e5903068	 ldr         r3, [r0, #0x68]
  00124	e5836034	 str         r6, [r3, #0x34]

; 160  :             pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_20;

  00128	e5903068	 ldr         r3, [r0, #0x68]
  0012c	e5836008	 str         r6, [r3, #8]

; 161  :             break;

  00130	ea00000d	 b           |$LN74@mcbsp_GetR|
  00134		 |$LN71@mcbsp_GetR|

; 154  :         case 16:
; 155  :             pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_16;

  00134	e5903068	 ldr         r3, [r0, #0x68]
  00138		 |$LN88@mcbsp_GetR|
  00138	e5834034	 str         r4, [r3, #0x34]

; 156  :             pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_16;

  0013c	e5903068	 ldr         r3, [r0, #0x68]
  00140	e5834008	 str         r4, [r3, #8]

; 157  :             break;

  00144	ea000008	 b           |$LN74@mcbsp_GetR|
  00148		 |$LN72@mcbsp_GetR|

; 149  :             break;
; 150  :         case 12:
; 151  :             pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_12;

  00148	e5903068	 ldr         r3, [r0, #0x68]
  0014c	e5835034	 str         r5, [r3, #0x34]

; 152  :             pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_12;

  00150	e5903068	 ldr         r3, [r0, #0x68]
  00154	e5835008	 str         r5, [r3, #8]

; 153  :             break;

  00158	ea000003	 b           |$LN74@mcbsp_GetR|
  0015c		 |$LN73@mcbsp_GetR|

; 145  :         {
; 146  :         case 8:
; 147  :             pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_8;

  0015c	e5903068	 ldr         r3, [r0, #0x68]
  00160	e5831034	 str         r1, [r3, #0x34]

; 148  :             pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_8;

  00164	e5903068	 ldr         r3, [r0, #0x68]
  00168	e5831008	 str         r1, [r3, #8]
  0016c		 |$LN74@mcbsp_GetR|

; 173  :         }
; 174  : 
; 175  :     // use transmit dual phase from registry
; 176  :     if (pDevice->phaseTx)

  0016c	e59030e4	 ldr         r3, [r0, #0xE4]
  00170	e3530000	 cmp         r3, #0

; 177  :         {
; 178  :         pDevice->pConfigInfo->TxPhase = MCBSP_PHASE_DUAL;

  00174	e5903068	 ldr         r3, [r0, #0x68]
  00178	0a00001f	 beq         |$LN66@mcbsp_GetR|
  0017c	e583804c	 str         r8, [r3, #0x4C]

; 179  : 
; 180  :         // use transmit word length from registry
; 181  :         switch (pDevice->wordLength2)

  00180	e59030d0	 ldr         r3, [r0, #0xD0]
  00184	e3530008	 cmp         r3, #8
  00188	0a000018	 beq         |$LN63@mcbsp_GetR|
  0018c	e353000c	 cmp         r3, #0xC
  00190	0a000013	 beq         |$LN62@mcbsp_GetR|
  00194	e3530010	 cmp         r3, #0x10
  00198	0a00000e	 beq         |$LN61@mcbsp_GetR|
  0019c	e3530014	 cmp         r3, #0x14
  001a0	0a000009	 beq         |$LN60@mcbsp_GetR|
  001a4	e3530018	 cmp         r3, #0x18
  001a8	0a000004	 beq         |$LN59@mcbsp_GetR|
  001ac	e3530020	 cmp         r3, #0x20

; 201  :             default:
; 202  :                 pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_16;

  001b0	e5903068	 ldr         r3, [r0, #0x68]
  001b4	1a000008	 bne         |$LN89@mcbsp_GetR|

; 198  :             case 32:
; 199  :                 pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_32;

  001b8	e583e038	 str         lr, [r3, #0x38]

; 200  :                 break;

  001bc	ea00000f	 b           |$LN56@mcbsp_GetR|
  001c0		 |$LN59@mcbsp_GetR|

; 195  :             case 24:
; 196  :                 pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_24;

  001c0	e5903068	 ldr         r3, [r0, #0x68]
  001c4	e5837038	 str         r7, [r3, #0x38]

; 197  :                 break;

  001c8	ea00000c	 b           |$LN56@mcbsp_GetR|
  001cc		 |$LN60@mcbsp_GetR|

; 192  :             case 20:
; 193  :                 pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_20;

  001cc	e5903068	 ldr         r3, [r0, #0x68]
  001d0	e5836038	 str         r6, [r3, #0x38]

; 194  :                 break;

  001d4	ea000009	 b           |$LN56@mcbsp_GetR|
  001d8		 |$LN61@mcbsp_GetR|

; 189  :             case 16:
; 190  :                 pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_16;

  001d8	e5903068	 ldr         r3, [r0, #0x68]
  001dc		 |$LN89@mcbsp_GetR|
  001dc	e5834038	 str         r4, [r3, #0x38]

; 191  :                 break;

  001e0	ea000006	 b           |$LN56@mcbsp_GetR|
  001e4		 |$LN62@mcbsp_GetR|

; 185  :                 break;
; 186  :             case 12:
; 187  :                 pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_12;

  001e4	e5903068	 ldr         r3, [r0, #0x68]
  001e8	e5835038	 str         r5, [r3, #0x38]

; 188  :                 break;

  001ec	ea000003	 b           |$LN56@mcbsp_GetR|
  001f0		 |$LN63@mcbsp_GetR|

; 182  :             {
; 183  :             case 8:
; 184  :                 pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_8;

  001f0	e5903068	 ldr         r3, [r0, #0x68]
  001f4	e5831038	 str         r1, [r3, #0x38]

; 203  :             }
; 204  :         }
; 205  :     else

  001f8	ea000000	 b           |$LN56@mcbsp_GetR|
  001fc		 |$LN66@mcbsp_GetR|

; 206  :         {
; 207  :         pDevice->pConfigInfo->TxPhase = MCBSP_PHASE_SINGLE;

  001fc	e583104c	 str         r1, [r3, #0x4C]
  00200		 |$LN56@mcbsp_GetR|

; 208  :         }
; 209  : 
; 210  :      // use receive phase from registry
; 211  :     if (pDevice->phaseRx)

  00200	e5903104	 ldr         r3, [r0, #0x104]
  00204	e3530000	 cmp         r3, #0

; 212  :         {
; 213  :         pDevice->pConfigInfo->RxPhase = MCBSP_PHASE_DUAL;

  00208	e5903068	 ldr         r3, [r0, #0x68]
  0020c	0a00001f	 beq         |$LN55@mcbsp_GetR|
  00210	e5838020	 str         r8, [r3, #0x20]

; 214  : 
; 215  :         // use transmit word length from registry
; 216  :         switch (pDevice->wordLength2)

  00214	e59030d0	 ldr         r3, [r0, #0xD0]
  00218	e3530008	 cmp         r3, #8
  0021c	0a000018	 beq         |$LN52@mcbsp_GetR|
  00220	e353000c	 cmp         r3, #0xC
  00224	0a000013	 beq         |$LN51@mcbsp_GetR|
  00228	e3530010	 cmp         r3, #0x10
  0022c	0a00000e	 beq         |$LN50@mcbsp_GetR|
  00230	e3530014	 cmp         r3, #0x14
  00234	0a000009	 beq         |$LN49@mcbsp_GetR|
  00238	e3530018	 cmp         r3, #0x18
  0023c	0a000004	 beq         |$LN48@mcbsp_GetR|
  00240	e3530020	 cmp         r3, #0x20

; 236  :             default:
; 237  :                 pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_16;

  00244	e5903068	 ldr         r3, [r0, #0x68]
  00248	1a000008	 bne         |$LN90@mcbsp_GetR|

; 233  :             case 32:
; 234  :                 pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_32;

  0024c	e583e00c	 str         lr, [r3, #0xC]

; 235  :                 break;

  00250	ea00000f	 b           |$LN45@mcbsp_GetR|
  00254		 |$LN48@mcbsp_GetR|

; 230  :             case 24:
; 231  :                 pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_24;

  00254	e5903068	 ldr         r3, [r0, #0x68]
  00258	e583700c	 str         r7, [r3, #0xC]

; 232  :                 break;

  0025c	ea00000c	 b           |$LN45@mcbsp_GetR|
  00260		 |$LN49@mcbsp_GetR|

; 227  :             case 20:
; 228  :                 pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_20;

  00260	e5903068	 ldr         r3, [r0, #0x68]
  00264	e583600c	 str         r6, [r3, #0xC]

; 229  :                 break;

  00268	ea000009	 b           |$LN45@mcbsp_GetR|
  0026c		 |$LN50@mcbsp_GetR|

; 224  :             case 16:
; 225  :                 pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_16;

  0026c	e5903068	 ldr         r3, [r0, #0x68]
  00270		 |$LN90@mcbsp_GetR|
  00270	e583400c	 str         r4, [r3, #0xC]

; 226  :                 break;

  00274	ea000006	 b           |$LN45@mcbsp_GetR|
  00278		 |$LN51@mcbsp_GetR|

; 220  :                 break;
; 221  :             case 12:
; 222  :                 pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_12;

  00278	e5903068	 ldr         r3, [r0, #0x68]
  0027c	e583500c	 str         r5, [r3, #0xC]

; 223  :                 break;

  00280	ea000003	 b           |$LN45@mcbsp_GetR|
  00284		 |$LN52@mcbsp_GetR|

; 217  :             {
; 218  :             case 8:
; 219  :                 pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_8;

  00284	e5903068	 ldr         r3, [r0, #0x68]
  00288	e583100c	 str         r1, [r3, #0xC]

; 238  :             }
; 239  :         }
; 240  :     else

  0028c	ea000000	 b           |$LN45@mcbsp_GetR|
  00290		 |$LN55@mcbsp_GetR|

; 241  :         {
; 242  :         pDevice->pConfigInfo->RxPhase = MCBSP_PHASE_SINGLE;

  00290	e5831020	 str         r1, [r3, #0x20]
  00294		 |$LN45@mcbsp_GetR|

; 243  :         }
; 244  : 
; 245  :     // use data delay from registry
; 246  :     switch (pDevice->dataDelayTx)

  00294	e59030d8	 ldr         r3, [r0, #0xD8]
  00298	e3530000	 cmp         r3, #0
  0029c	0a000009	 beq         |$LN42@mcbsp_GetR|
  002a0	e3530001	 cmp         r3, #1
  002a4	0a000004	 beq         |$LN41@mcbsp_GetR|
  002a8	e3530002	 cmp         r3, #2

; 257  :         default:
; 258  :             pDevice->pConfigInfo->TxDataDelay = MCBSP_DATDLY_1BIT;

  002ac	e5903068	 ldr         r3, [r0, #0x68]
  002b0	1a000002	 bne         |$LN91@mcbsp_GetR|

; 254  :         case MCBSP_DATDLY_2BIT:
; 255  :             pDevice->pConfigInfo->TxDataDelay = MCBSP_DATDLY_2BIT;

  002b4	e5834040	 str         r4, [r3, #0x40]

; 256  :             break;

  002b8	ea000004	 b           |$LN43@mcbsp_GetR|
  002bc		 |$LN41@mcbsp_GetR|

; 250  :             break;
; 251  :         case MCBSP_DATDLY_1BIT:
; 252  :             pDevice->pConfigInfo->TxDataDelay = MCBSP_DATDLY_1BIT;

  002bc	e5903068	 ldr         r3, [r0, #0x68]
  002c0		 |$LN91@mcbsp_GetR|
  002c0	e5835040	 str         r5, [r3, #0x40]

; 253  :             break;

  002c4	ea000001	 b           |$LN43@mcbsp_GetR|
  002c8		 |$LN42@mcbsp_GetR|

; 247  :         {
; 248  :         case MCBSP_DATDLY_0BIT:
; 249  :             pDevice->pConfigInfo->TxDataDelay = MCBSP_DATDLY_0BIT;

  002c8	e5903068	 ldr         r3, [r0, #0x68]
  002cc	e5831040	 str         r1, [r3, #0x40]
  002d0		 |$LN43@mcbsp_GetR|

; 259  :         }
; 260  : 
; 261  :     // use data delay from registry
; 262  :     switch (pDevice->dataDelayRx)

  002d0	e59030f8	 ldr         r3, [r0, #0xF8]
  002d4	e3530000	 cmp         r3, #0
  002d8	0a000009	 beq         |$LN36@mcbsp_GetR|
  002dc	e3530001	 cmp         r3, #1
  002e0	0a000004	 beq         |$LN35@mcbsp_GetR|
  002e4	e3530002	 cmp         r3, #2

; 273  :         default:
; 274  :             pDevice->pConfigInfo->RxDataDelay = MCBSP_DATDLY_1BIT;

  002e8	e5903068	 ldr         r3, [r0, #0x68]
  002ec	1a000002	 bne         |$LN92@mcbsp_GetR|

; 270  :         case MCBSP_DATDLY_2BIT:
; 271  :             pDevice->pConfigInfo->RxDataDelay = MCBSP_DATDLY_2BIT;

  002f0	e5834014	 str         r4, [r3, #0x14]

; 272  :             break;

  002f4	ea000004	 b           |$LN37@mcbsp_GetR|
  002f8		 |$LN35@mcbsp_GetR|

; 266  :             break;
; 267  :         case MCBSP_DATDLY_1BIT:
; 268  :             pDevice->pConfigInfo->RxDataDelay = MCBSP_DATDLY_1BIT;

  002f8	e5903068	 ldr         r3, [r0, #0x68]
  002fc		 |$LN92@mcbsp_GetR|
  002fc	e5835014	 str         r5, [r3, #0x14]

; 269  :             break;

  00300	ea000001	 b           |$LN37@mcbsp_GetR|
  00304		 |$LN36@mcbsp_GetR|

; 263  :         {
; 264  :         case MCBSP_DATDLY_0BIT:
; 265  :             pDevice->pConfigInfo->RxDataDelay = MCBSP_DATDLY_0BIT;

  00304	e5903068	 ldr         r3, [r0, #0x68]
  00308	e5831014	 str         r1, [r3, #0x14]
  0030c		 |$LN37@mcbsp_GetR|

; 275  :         }
; 276  : 
; 277  :     //------------------------
; 278  :     // Transmit values
; 279  :     //------------------------
; 280  : 
; 281  :     // use transmit frame sync source from registry
; 282  :     switch (pDevice->frameSyncSourceTx)

  0030c	e59030e0	 ldr         r3, [r0, #0xE0]
  00310	e3530000	 cmp         r3, #0
  00314	0a000009	 beq         |$LN30@mcbsp_GetR|
  00318	e3530002	 cmp         r3, #2
  0031c	0a000004	 beq         |$LN29@mcbsp_GetR|
  00320	e3530003	 cmp         r3, #3

; 296  :         default:
; 297  :             pDevice->pConfigInfo->TxFrameSyncSource =
; 298  :                 kMcBSP_Tx_FS_SRC_External;

  00324	e5903068	 ldr         r3, [r0, #0x68]
  00328	1a000005	 bne         |$LN93@mcbsp_GetR|

; 292  :         case kMcBSP_Tx_FS_SRC_SRG:
; 293  :             pDevice->pConfigInfo->TxFrameSyncSource =
; 294  :                 kMcBSP_Tx_FS_SRC_SRG;

  0032c	e5836048	 str         r6, [r3, #0x48]

; 295  :             break;

  00330	ea000004	 b           |$LN31@mcbsp_GetR|
  00334		 |$LN29@mcbsp_GetR|

; 287  :             break;
; 288  :         case kMcBSP_Tx_FS_SRC_DSR_XSR_COPY:
; 289  :             pDevice->pConfigInfo->TxFrameSyncSource =
; 290  :                 kMcBSP_Tx_FS_SRC_DSR_XSR_COPY;

  00334	e5903068	 ldr         r3, [r0, #0x68]
  00338	e5834048	 str         r4, [r3, #0x48]

; 291  :             break;

  0033c	ea000001	 b           |$LN31@mcbsp_GetR|
  00340		 |$LN30@mcbsp_GetR|

; 283  :         {
; 284  :         case kMcBSP_Tx_FS_SRC_External:
; 285  :             pDevice->pConfigInfo->TxFrameSyncSource =
; 286  :                 kMcBSP_Tx_FS_SRC_External;

  00340	e5903068	 ldr         r3, [r0, #0x68]
  00344		 |$LN93@mcbsp_GetR|
  00344	e5831048	 str         r1, [r3, #0x48]
  00348		 |$LN31@mcbsp_GetR|

; 299  :         }
; 300  : 
; 301  :     // use CLKXM from registry
; 302  :     if (pDevice->clockModeTx)

  00348	e59030dc	 ldr         r3, [r0, #0xDC]

; 303  :         {
; 304  :         pDevice->pConfigInfo->TxClockSource = MCBSP_PCR_CLKXM;
; 305  :         }
; 306  :     else
; 307  :         {
; 308  :         pDevice->pConfigInfo->TxClockSource = 0;
; 309  :         }
; 310  : 
; 311  :     // use FSXP from registry
; 312  :     if (pDevice->frameSyncPolarityTx)

  0034c	e3a0e008	 mov         lr, #8
  00350	e3530000	 cmp         r3, #0
  00354	e5903068	 ldr         r3, [r0, #0x68]
  00358	13a02c02	 movne       r2, #2, 24
  0035c	15832044	 strne       r2, [r3, #0x44]
  00360	05831044	 streq       r1, [r3, #0x44]
  00364	e59030ec	 ldr         r3, [r0, #0xEC]
  00368	e3530000	 cmp         r3, #0

; 313  :         {
; 314  :         pDevice->pConfigInfo->TxFrameSyncPolarity = MCBSP_PCR_FSXP;

  0036c	e5903068	 ldr         r3, [r0, #0x68]
  00370	1583e058	 strne       lr, [r3, #0x58]

; 315  :         }
; 316  :     else
; 317  :         {
; 318  :         pDevice->pConfigInfo->TxFrameSyncPolarity = 0;

  00374	05831058	 streq       r1, [r3, #0x58]

; 319  :         }
; 320  : 
; 321  :     // use CLKXP from registry
; 322  :     if (pDevice->clockPolarityTx)

  00378	e59030e8	 ldr         r3, [r0, #0xE8]
  0037c	e3530000	 cmp         r3, #0

; 323  :         {
; 324  :         pDevice->pConfigInfo->TxClkPolarity = MCBSP_PCR_CLKXP;

  00380	e5903068	 ldr         r3, [r0, #0x68]
  00384	15834054	 strne       r4, [r3, #0x54]

; 325  :         }
; 326  :     else
; 327  :         {
; 328  :         pDevice->pConfigInfo->TxClkPolarity = 0;

  00388	05831054	 streq       r1, [r3, #0x54]

; 329  :         }
; 330  : 
; 331  :     // use Reverse Mode from registry
; 332  :     if (pDevice->reverseModeTx)

  0038c	e59030d4	 ldr         r3, [r0, #0xD4]
  00390	e3530000	 cmp         r3, #0

; 333  :         {
; 334  :         pDevice->pConfigInfo->TxReverse = MCBSP_REVERSE_LSB_FIRST;

  00394	e5903068	 ldr         r3, [r0, #0x68]
  00398	1583e03c	 strne       lr, [r3, #0x3C]

; 335  :         }
; 336  :     else
; 337  :         {
; 338  :         pDevice->pConfigInfo->TxReverse = MCBSP_REVERSE_MSB_FIRST;

  0039c	0583103c	 streq       r1, [r3, #0x3C]

; 339  :         }
; 340  : 
; 341  :     //------------------------
; 342  :     // Receive values
; 343  :     //------------------------
; 344  : 
; 345  :     // use FSRM from registry
; 346  :     if (pDevice->frameSyncSourceRx)

  003a0	e5903100	 ldr         r3, [r0, #0x100]
  003a4	e3530000	 cmp         r3, #0

; 347  :         {
; 348  :         pDevice->pConfigInfo->RxFrameSyncSource = MCBSP_PCR_FSRM;

  003a8	e5903068	 ldr         r3, [r0, #0x68]
  003ac	13a02b01	 movne       r2, #1, 22
  003b0	1583201c	 strne       r2, [r3, #0x1C]

; 349  :         }
; 350  :     else
; 351  :         {
; 352  :         pDevice->pConfigInfo->RxFrameSyncSource = 0;

  003b4	0583101c	 streq       r1, [r3, #0x1C]

; 353  :         }
; 354  : 
; 355  :     // use CLKRM from registry
; 356  :     if (pDevice->clockModeRx)

  003b8	e59030fc	 ldr         r3, [r0, #0xFC]
  003bc	e3530000	 cmp         r3, #0

; 357  :         {
; 358  :         pDevice->pConfigInfo->RxClockSource = MCBSP_PCR_CLKRM;

  003c0	e5903068	 ldr         r3, [r0, #0x68]
  003c4	13a02c01	 movne       r2, #1, 24
  003c8	15832018	 strne       r2, [r3, #0x18]

; 359  :         }
; 360  :     else
; 361  :         {
; 362  :         pDevice->pConfigInfo->RxClockSource = 0;

  003cc	05831018	 streq       r1, [r3, #0x18]

; 363  :         }
; 364  : 
; 365  :     // use FSRP from registry
; 366  :     if (pDevice->frameSyncPolarityRx)

  003d0	e590310c	 ldr         r3, [r0, #0x10C]
  003d4	e3530000	 cmp         r3, #0

; 367  :         {
; 368  :         pDevice->pConfigInfo->RxFrameSyncPolarity = MCBSP_PCR_FSRP;

  003d8	e5903068	 ldr         r3, [r0, #0x68]
  003dc	1583702c	 strne       r7, [r3, #0x2C]

; 369  :         }
; 370  :     else
; 371  :         {
; 372  :         pDevice->pConfigInfo->RxFrameSyncPolarity = 0;

  003e0	0583102c	 streq       r1, [r3, #0x2C]

; 373  :         }
; 374  : 
; 375  :     // use CLKRP from registry
; 376  :     if (pDevice->clockPolarityRx)

  003e4	e5903108	 ldr         r3, [r0, #0x108]
  003e8	e3530000	 cmp         r3, #0

; 377  :         {
; 378  :         pDevice->pConfigInfo->RxClkPolarity = MCBSP_PCR_CLKRP;

  003ec	e5903068	 ldr         r3, [r0, #0x68]
  003f0	15835028	 strne       r5, [r3, #0x28]

; 379  :         }
; 380  :     else
; 381  :         {
; 382  :         pDevice->pConfigInfo->RxClkPolarity = 0;

  003f4	05831028	 streq       r1, [r3, #0x28]

; 383  :         }
; 384  : 
; 385  :     // use loopback mode from registry
; 386  :     if (pDevice->loopbackMode)

  003f8	e59030c4	 ldr         r3, [r0, #0xC4]
  003fc	e3530000	 cmp         r3, #0

; 387  :         {
; 388  :         pDevice->pConfigInfo->AnalogLoopBackMode = MCBSP_SPCR1_ALB_ENABLE;

  00400	e5903068	 ldr         r3, [r0, #0x68]
  00404	15838000	 strne       r8, [r3]

; 389  :         }
; 390  :     else
; 391  :         {
; 392  :         pDevice->pConfigInfo->AnalogLoopBackMode = 0;

  00408	05831000	 streq       r1, [r3]

; 393  :         }
; 394  : 
; 395  :     // use justification mode from registry
; 396  :     switch (pDevice->justificationMode << 13)

  0040c	e5903128	 ldr         r3, [r0, #0x128]
  00410	e1b03683	 movs        r3, r3, lsl #13
  00414	0a00000b	 beq         |$LN6@mcbsp_GetR|
  00418	e3530a02	 cmp         r3, #2, 20
  0041c	0a000005	 beq         |$LN5@mcbsp_GetR|
  00420	e3530901	 cmp         r3, #1, 18

; 406  :         case MCBSP_SPCR1_RJUST_LJ_ZEROFILL:
; 407  :             pDevice->pConfigInfo->JustificationMode =
; 408  :                 MCBSP_SPCR1_RJUST_LJ_ZEROFILL;
; 409  :             break;
; 410  :         default:
; 411  :             pDevice->pConfigInfo->JustificationMode =
; 412  :                 MCBSP_SPCR1_RJUST_RJ_ZEROFILL;

  00424	e5903068	 ldr         r3, [r0, #0x68]
  00428	1a000007	 bne         |$LN94@mcbsp_GetR|
  0042c	e3a02901	 mov         r2, #1, 18
  00430	e583206c	 str         r2, [r3, #0x6C]
  00434	ea000005	 b           |$LN7@mcbsp_GetR|
  00438		 |$LN5@mcbsp_GetR|

; 401  :             break;
; 402  :         case MCBSP_SPCR1_RJUST_RJ_SIGNFILL:
; 403  :             pDevice->pConfigInfo->JustificationMode =
; 404  :                 MCBSP_SPCR1_RJUST_RJ_SIGNFILL;

  00438	e5903068	 ldr         r3, [r0, #0x68]
  0043c	e3a02a02	 mov         r2, #2, 20
  00440	e583206c	 str         r2, [r3, #0x6C]

; 405  :             break;

  00444	ea000001	 b           |$LN7@mcbsp_GetR|
  00448		 |$LN6@mcbsp_GetR|

; 397  :         {
; 398  :         case MCBSP_SPCR1_RJUST_RJ_ZEROFILL:
; 399  :             pDevice->pConfigInfo->JustificationMode =
; 400  :                 MCBSP_SPCR1_RJUST_RJ_ZEROFILL;

  00448	e5903068	 ldr         r3, [r0, #0x68]
  0044c		 |$LN94@mcbsp_GetR|
  0044c	e583106c	 str         r1, [r3, #0x6C]
  00450		 |$LN7@mcbsp_GetR|

; 413  :         }
; 414  : 
; 415  :     // use Reverse Mode from registry
; 416  :     if (pDevice->reverseModeRx)

  00450	e59030f4	 ldr         r3, [r0, #0xF4]

; 417  :         {
; 418  :         pDevice->pConfigInfo->RxReverse = MCBSP_REVERSE_LSB_FIRST;
; 419  :         }
; 420  :     else
; 421  :         {
; 422  :         pDevice->pConfigInfo->RxReverse = MCBSP_REVERSE_MSB_FIRST;
; 423  :         }
; 424  : 
; 425  :     pDevice->pConfigInfo->RxSyncError = MCBSP_SPCR1_RINTM_RSYNCERR;

  00454	e3a02030	 mov         r2, #0x30
  00458	e3530000	 cmp         r3, #0
  0045c	e5903068	 ldr         r3, [r0, #0x68]
  00460	1583e010	 strne       lr, [r3, #0x10]
  00464	05831010	 streq       r1, [r3, #0x10]
  00468	e5903068	 ldr         r3, [r0, #0x68]
  0046c	e5832024	 str         r2, [r3, #0x24]

; 426  :     pDevice->pConfigInfo->TxSyncError = MCBSP_SPCR2_XINTM_XSYNCERR;

  00470	e5903068	 ldr         r3, [r0, #0x68]
  00474	e5832050	 str         r2, [r3, #0x50]

; 427  : 
; 428  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 429  : }

  00478	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0047c	e12fff1e	 bx          lr
  00480		 |$M37129|

			 ENDP  ; |mcbsp_GetRegistryValues|

	EXPORT	|mcbsp_ConfigureForMaster|

  00000			 AREA	 |.pdata|, PDATA
|$T37139| DCD	|$LN5@mcbsp_Conf|
	DCD	0x40004001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ConfigureForMaster| PROC

; 440  : {

  00000		 |$LN5@mcbsp_Conf|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M37136|

; 441  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 442  : 
; 443  :     //------------------------
; 444  :     // SRG values
; 445  :     //------------------------
; 446  : 
; 447  :     // SRG clock source
; 448  :     // value: 0(rising CLKS), 1(falling CLKS), 2(CPU), 3(CLKRI),  4(CLKXI)
; 449  :     pDevice->pConfigInfo->SRGClkSrc = kMcBSP_SRG_SRC_CLKS_PIN_FALL;

  00004	e5903068	 ldr         r3, [r0, #0x68]
  00008	e3a06001	 mov         r6, #1

; 450  : 
; 451  :     // frame width
; 452  :     pDevice->pConfigInfo->SRGFrameWidth = 16;

  0000c	e3a02010	 mov         r2, #0x10
  00010	e583605c	 str         r6, [r3, #0x5C]
  00014	e5903068	 ldr         r3, [r0, #0x68]

; 453  : 
; 454  :     // use clock divider based on frequency (input clk is 256 * 48KHz fclock)
; 455  :     // sampling frequency = 48Khz
; 456  :     //clkgdv = (clk rate /(sample rate * (bit_per_sample * 2))) - 1
; 457  :     pDevice->pConfigInfo->SRGClkDivFactor = 7;

  00018	e3a01007	 mov         r1, #7

; 458  : 
; 459  :     // clock resync
; 460  :     // Value: MCBSP_SRGR2_GSYNC or 0
; 461  :     pDevice->pConfigInfo->SRGClkSyncMode = 0;

  0001c	e3a07000	 mov         r7, #0
  00020	e5832060	 str         r2, [r3, #0x60]
  00024	e5903068	 ldr         r3, [r0, #0x68]

; 462  : 
; 463  :     //------------------------
; 464  :     // Transmit and receive values
; 465  :     //------------------------
; 466  : #if 1
; 467  :     // Single phase
; 468  : 
; 469  :     // frame length
; 470  :     pDevice->pConfigInfo->TxFrameLength = 1;
; 471  :     pDevice->pConfigInfo->RxFrameLength = 1;
; 472  : 
; 473  :     // word length
; 474  :     pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_32;

  00028	e3a02005	 mov         r2, #5

; 475  :     pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_32;
; 476  : 
; 477  :     // dual phase
; 478  :     // value: MCBSP_PHASE_DUAL or MCBSP_PHASE_SINGLE
; 479  :     pDevice->pConfigInfo->TxPhase = MCBSP_PHASE_SINGLE;
; 480  :     pDevice->pConfigInfo->RxPhase = MCBSP_PHASE_SINGLE;
; 481  : 
; 482  : #else
; 483  :     // Dual phase
; 484  : 
; 485  :     // frame length
; 486  :     pDevice->pConfigInfo->TxFrameLength = 1;
; 487  :     pDevice->pConfigInfo->RxFrameLength = 1;
; 488  : 
; 489  :     // word length
; 490  :     pDevice->pConfigInfo->TxWordLength = kMcBSP_Word_Length_16;
; 491  :     pDevice->pConfigInfo->RxWordLength = kMcBSP_Word_Length_16;
; 492  : 
; 493  :     // dual phase
; 494  :     // value: MCBSP_PHASE_DUAL or MCBSP_PHASE_SINGLE
; 495  :     pDevice->pConfigInfo->TxPhase = MCBSP_PHASE_DUAL;
; 496  :     pDevice->pConfigInfo->RxPhase = MCBSP_PHASE_DUAL;
; 497  : 
; 498  :     // word length 2 ( for dual phase)
; 499  :     pDevice->pConfigInfo->TxWordLength2 = kMcBSP_Word_Length_16;
; 500  :     pDevice->pConfigInfo->RxWordLength2 = kMcBSP_Word_Length_16;
; 501  : #endif
; 502  :     // use data delay from registry
; 503  :     // Value: 0, 1, or 2 bits
; 504  :     pDevice->pConfigInfo->TxDataDelay = 1;
; 505  :     pDevice->pConfigInfo->RxDataDelay = 1;
; 506  : 
; 507  :     //------------------------
; 508  :     // Transmit values
; 509  :     //------------------------
; 510  : 
; 511  :     // transmit frame sync source
; 512  :     // Value: 0 (ext), 2 (int xmit), or 3 (int SRG)
; 513  :     pDevice->pConfigInfo->TxFrameSyncSource = kMcBSP_Tx_FS_SRC_SRG;

  0002c	e3a0e003	 mov         lr, #3
  00030	e5831064	 str         r1, [r3, #0x64]
  00034	e5903068	 ldr         r3, [r0, #0x68]

; 514  : 
; 515  :     // CLKXM
; 516  :     // Value: MCBSP_PCR_CLKXM or 0(external clock drivers CLKX)
; 517  :     pDevice->pConfigInfo->TxClockSource = MCBSP_PCR_CLKXM;

  00038	e3a01c02	 mov         r1, #2, 24

; 518  : 
; 519  :     // FSXP
; 520  :     // Value: MCBSP_PCR_FSXP or 0(active high)
; 521  :     pDevice->pConfigInfo->TxFrameSyncPolarity = 0;
; 522  : 
; 523  :     // CLKXP
; 524  :     // Value: MCBSP_PCR_CLKXP or 0(rising edge)
; 525  :     pDevice->pConfigInfo->TxClkPolarity = 0;
; 526  : 
; 527  :     // Reverse Mode
; 528  :     // value: MCBSP_REVERSE_MSB_FIRST or MCBSP_REVERSE_LSB_FIRST
; 529  :     pDevice->pConfigInfo->TxReverse = MCBSP_REVERSE_MSB_FIRST;
; 530  : 
; 531  :     //------------------------
; 532  :     // Receive values
; 533  :     //------------------------
; 534  : 
; 535  :     //  FSRM
; 536  :     // Value: MCBSP_PCR_FSRM or 0(external clock drivers frame sync)
; 537  :     pDevice->pConfigInfo->RxFrameSyncSource = MCBSP_PCR_FSRM;

  0003c	e3a05b01	 mov         r5, #1, 22
  00040	e5837068	 str         r7, [r3, #0x68]
  00044	e5903068	 ldr         r3, [r0, #0x68]

; 538  : 
; 539  :     // CLKRM from registry
; 540  :     // Value: MCBSP_PCR_CLKRM or 0(external clock drivers CLKR)
; 541  :     pDevice->pConfigInfo->RxClockSource = MCBSP_PCR_CLKRM;

  00048	e3a04c01	 mov         r4, #1, 24
  0004c	e5836030	 str         r6, [r3, #0x30]
  00050	e5903068	 ldr         r3, [r0, #0x68]
  00054	e5836004	 str         r6, [r3, #4]
  00058	e5903068	 ldr         r3, [r0, #0x68]
  0005c	e5832034	 str         r2, [r3, #0x34]
  00060	e5903068	 ldr         r3, [r0, #0x68]
  00064	e5832008	 str         r2, [r3, #8]
  00068	e5903068	 ldr         r3, [r0, #0x68]
  0006c	e583704c	 str         r7, [r3, #0x4C]
  00070	e5903068	 ldr         r3, [r0, #0x68]
  00074	e5837020	 str         r7, [r3, #0x20]
  00078	e5903068	 ldr         r3, [r0, #0x68]
  0007c	e5836040	 str         r6, [r3, #0x40]
  00080	e5903068	 ldr         r3, [r0, #0x68]
  00084	e5836014	 str         r6, [r3, #0x14]
  00088	e5903068	 ldr         r3, [r0, #0x68]
  0008c	e583e048	 str         lr, [r3, #0x48]
  00090	e5903068	 ldr         r3, [r0, #0x68]
  00094	e5831044	 str         r1, [r3, #0x44]
  00098	e5903068	 ldr         r3, [r0, #0x68]
  0009c	e5837058	 str         r7, [r3, #0x58]
  000a0	e5903068	 ldr         r3, [r0, #0x68]
  000a4	e5837054	 str         r7, [r3, #0x54]
  000a8	e5903068	 ldr         r3, [r0, #0x68]
  000ac	e583703c	 str         r7, [r3, #0x3C]
  000b0	e5903068	 ldr         r3, [r0, #0x68]
  000b4	e583501c	 str         r5, [r3, #0x1C]
  000b8	e5903068	 ldr         r3, [r0, #0x68]
  000bc	e5834018	 str         r4, [r3, #0x18]

; 542  : 
; 543  :     // FSRP
; 544  :     // Value: MCBSP_PCR_FSRP or 0(active high)
; 545  :     pDevice->pConfigInfo->RxFrameSyncPolarity = 0;

  000c0	e5903068	 ldr         r3, [r0, #0x68]
  000c4	e583702c	 str         r7, [r3, #0x2C]

; 546  : 
; 547  :     // CLKRP
; 548  :     // Value: MCBSP_PCR_CLKRP or 0(falling edge)
; 549  :     pDevice->pConfigInfo->RxClkPolarity = MCBSP_PCR_CLKRP;

  000c8	e5903068	 ldr         r3, [r0, #0x68]
  000cc	e5836028	 str         r6, [r3, #0x28]

; 550  : 
; 551  :     // loopback mode (MCBSP_SPCR1_ALB_ENABLE or 0)
; 552  :     pDevice->pConfigInfo->AnalogLoopBackMode = 0;

  000d0	e5903068	 ldr         r3, [r0, #0x68]
  000d4	e5837000	 str         r7, [r3]

; 553  : 
; 554  :     // justification mode
; 555  :     //(right, zero fill), (right, sign fill), or (left)
; 556  :     pDevice->pConfigInfo->JustificationMode = MCBSP_SPCR1_RJUST_RJ_ZEROFILL;

  000d8	e5903068	 ldr         r3, [r0, #0x68]
  000dc	e583706c	 str         r7, [r3, #0x6C]

; 557  : 
; 558  :     // Reverse Mode
; 559  :     // value: MCBSP_REVERSE_MSB_FIRST or MCBSP_REVERSE_LSB_FIRST
; 560  :     pDevice->pConfigInfo->RxReverse = MCBSP_REVERSE_MSB_FIRST;

  000e0	e5903068	 ldr         r3, [r0, #0x68]
  000e4	e5837010	 str         r7, [r3, #0x10]

; 561  : 
; 562  :     pDevice->pConfigInfo->RxSyncError = 0;

  000e8	e5903068	 ldr         r3, [r0, #0x68]
  000ec	e5837024	 str         r7, [r3, #0x24]

; 563  :     pDevice->pConfigInfo->TxSyncError = 0;

  000f0	e5903068	 ldr         r3, [r0, #0x68]
  000f4	e5837050	 str         r7, [r3, #0x50]

; 564  : 
; 565  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 566  : }

  000f8	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000fc	e12fff1e	 bx          lr
  00100		 |$M37137|

			 ENDP  ; |mcbsp_ConfigureForMaster|

	EXPORT	|mcbsp_ResetShadowRegisters|
	IMPORT	|Sleep|

  00000			 AREA	 |.pdata|, PDATA
|$T37153| DCD	|$LN13@mcbsp_Rese|
	DCD	0x40002701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ResetShadowRegisters| PROC

; 577  : {

  00000		 |$LN13@mcbsp_Rese|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37150|
  00004	e1a04000	 mov         r4, r0

; 578  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 579  : 
; 580  :     UINT counter = 0;
; 581  :     // Do a software reset of McBSP
; 582  :     pDevice->shadowRegs.SYSCONFIG = MCBSP_SYSCONFIG_SOFTRESET;
; 583  :     OUTREG32(&pDevice->pMcbspRegs->SYSCONFIG, pDevice->shadowRegs.SYSCONFIG);

  00008	e594301c	 ldr         r3, [r4, #0x1C]
  0000c	e3a02002	 mov         r2, #2
  00010	e584204c	 str         r2, [r4, #0x4C]
  00014	e583208c	 str         r2, [r3, #0x8C]

; 584  : 
; 585  :     // Read to confirm if the reset is done
; 586  :     while (INREG32(&pDevice->pMcbspRegs->SYSCONFIG) & MCBSP_SYSCONFIG_SOFTRESET)

  00018	e3a05000	 mov         r5, #0
  0001c	ea000004	 b           |$LN10@mcbsp_Rese|
  00020		 |$LL3@mcbsp_Rese|

; 587  :         {
; 588  :         Sleep(1);

  00020	e3a00001	 mov         r0, #1
  00024	eb000000	 bl          Sleep

; 589  :         if (counter++ > MAX_WAIT_FOR_RESET)

  00028	e3550064	 cmp         r5, #0x64
  0002c	e2855001	 add         r5, r5, #1
  00030	8a000003	 bhi         |$LN8@mcbsp_Rese|
  00034		 |$LN10@mcbsp_Rese|
  00034	e594301c	 ldr         r3, [r4, #0x1C]
  00038	e593308c	 ldr         r3, [r3, #0x8C]
  0003c	e3130002	 tst         r3, #2
  00040	1afffff6	 bne         |$LL3@mcbsp_Rese|
  00044		 |$LN8@mcbsp_Rese|

; 590  :             {
; 591  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: MCP:%S: Reset Timeout\r\n",
; 592  :                 __FUNCTION__));
; 593  :             break;
; 594  :             }
; 595  :         }
; 596  : 
; 597  :     pDevice->shadowRegs.SPCR2 = 0;
; 598  :     pDevice->shadowRegs.SPCR1 = 0;
; 599  :     pDevice->shadowRegs.RCR2 = 0;
; 600  :     pDevice->shadowRegs.RCR1 = 0;
; 601  :     pDevice->shadowRegs.XCR2 = 0;
; 602  :     pDevice->shadowRegs.XCR1 = 0;
; 603  :     pDevice->shadowRegs.SRGR2 = MCBSP_SRGR2_CLKSM;

  00044	e3a03a02	 mov         r3, #2, 20

; 604  :     pDevice->shadowRegs.SRGR1 = 1;

  00048	e3a02001	 mov         r2, #1
  0004c	e3a01000	 mov         r1, #0
  00050	e5843038	 str         r3, [r4, #0x38]
  00054	e584203c	 str         r2, [r4, #0x3C]
  00058	e5841020	 str         r1, [r4, #0x20]
  0005c	e5841024	 str         r1, [r4, #0x24]
  00060	e5841028	 str         r1, [r4, #0x28]
  00064	e584102c	 str         r1, [r4, #0x2C]
  00068	e5841030	 str         r1, [r4, #0x30]
  0006c	e5841034	 str         r1, [r4, #0x34]

; 605  :     pDevice->shadowRegs.PCR = 0;

  00070	e5841040	 str         r1, [r4, #0x40]

; 606  :     pDevice->shadowRegs.THRSH1 = 0;

  00074	e5841044	 str         r1, [r4, #0x44]

; 607  :     pDevice->shadowRegs.THRSH2 = 0;

  00078	e5841048	 str         r1, [r4, #0x48]

; 608  :     pDevice->shadowRegs.SYSCONFIG = 0;

  0007c	e584104c	 str         r1, [r4, #0x4C]

; 609  :     pDevice->shadowRegs.WAKEUPEN = 0;

  00080	e5841050	 str         r1, [r4, #0x50]

; 610  :     pDevice->shadowRegs.MCR1 = 0;

  00084	e5841054	 str         r1, [r4, #0x54]

; 611  :     pDevice->shadowRegs.MCR2 = 0;

  00088	e5841058	 str         r1, [r4, #0x58]

; 612  :     pDevice->shadowRegs.RCERA = 0;

  0008c	e584105c	 str         r1, [r4, #0x5C]

; 613  :     pDevice->shadowRegs.XCERA = 0;

  00090	e5841060	 str         r1, [r4, #0x60]

; 614  : 
; 615  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 616  : }

  00094	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$M37151|

			 ENDP  ; |mcbsp_ResetShadowRegisters|

	EXPORT	|mcbsp_ConfigureSampleRateGenerator|

  00000			 AREA	 |.pdata|, PDATA
|$T37163| DCD	|$LN15@mcbsp_Conf@2|
	DCD	0x40003d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ConfigureSampleRateGenerator| PROC

; 627  : {

  00000		 |$LN15@mcbsp_Conf@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M37160|
  00004	e1a05000	 mov         r5, r0

; 628  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 629  : 
; 630  :     // update register: SRGR1
; 631  :     //------------------------
; 632  :     // set FWID
; 633  :     // set CLKGDIV
; 634  :     //
; 635  :     ASSERT(pDevice->pConfigInfo->SRGFrameWidth > 0 &&
; 636  :            pDevice->pConfigInfo->SRGFrameWidth <= 256 &&
; 637  :            pDevice->pConfigInfo->SRGClkDivFactor < 256);
; 638  :     pDevice->shadowRegs.SRGR1 |=
; 639  :         MCBSP_SRGR1_FWID(pDevice->pConfigInfo->SRGFrameWidth) |
; 640  :         pDevice->pConfigInfo->SRGClkDivFactor;

  00008	e5956068	 ldr         r6, [r5, #0x68]
  0000c	e595103c	 ldr         r1, [r5, #0x3C]
  00010	e5963060	 ldr         r3, [r6, #0x60]
  00014	e5962064	 ldr         r2, [r6, #0x64]
  00018	e2433001	 sub         r3, r3, #1
  0001c	e20330ff	 and         r3, r3, #0xFF
  00020	e1823403	 orr         r3, r2, r3, lsl #8
  00024	e1833001	 orr         r3, r3, r1
  00028	e585303c	 str         r3, [r5, #0x3C]

; 641  : 
; 642  :     // update register: SRGR2
; 643  :     //------------------------
; 644  :     // set GSYNC
; 645  :     // set FPER
; 646  :     //
; 647  :     // for auto calculation of the frame period
; 648  :     // assumes transmit and receive word lengths are the same
; 649  :     // assumes transmit and receive words per frame are the same
; 650  :     // assumes transmit and receive phases are the same (either single or
; 651  :     //  dual phase)
; 652  : 
; 653  :     if (pDevice->pConfigInfo->TxPhase == MCBSP_PHASE_DUAL)

  0002c	e596304c	 ldr         r3, [r6, #0x4C]
  00030	e3530902	 cmp         r3, #2, 18
  00034	1a00000d	 bne         |$LN8@mcbsp_Conf@2|

; 654  :         {
; 655  :         // in dual phase transmit1 and transmit2 words per frame are the same
; 656  :         pDevice->shadowRegs.SRGR2 |= pDevice->pConfigInfo->SRGClkSyncMode |
; 657  :             ((((pDevice->pConfigInfo->TxFrameLength) *
; 658  :             (f_rgWordLength[pDevice->pConfigInfo->TxWordLength])) +
; 659  :             ((pDevice->pConfigInfo->TxFrameLength) *
; 660  :             (f_rgWordLength[pDevice->pConfigInfo->TxWordLength2]))) -1);

  00038	e5962038	 ldr         r2, [r6, #0x38]
  0003c	e59f10ac	 ldr         r1, [pc, #0xAC]
  00040	e5963034	 ldr         r3, [r6, #0x34]
  00044	e5964030	 ldr         r4, [r6, #0x30]
  00048	e7912102	 ldr         r2, [r1, +r2, lsl #2]
  0004c	e7913103	 ldr         r3, [r1, +r3, lsl #2]
  00050	e5961068	 ldr         r1, [r6, #0x68]
  00054	e595e038	 ldr         lr, [r5, #0x38]
  00058	e0823003	 add         r3, r2, r3
  0005c	e0020493	 mul         r2, r3, r4
  00060	e2423001	 sub         r3, r2, #1
  00064	e1833001	 orr         r3, r3, r1
  00068	e183300e	 orr         r3, r3, lr

; 661  :         }
; 662  :     else

  0006c	ea000009	 b           |$LN11@mcbsp_Conf@2|
  00070		 |$LN8@mcbsp_Conf@2|

; 663  :         {
; 664  :         pDevice->shadowRegs.SRGR2 |= pDevice->pConfigInfo->SRGClkSyncMode |
; 665  :             (((pDevice->pConfigInfo->TxFrameLength) *
; 666  :             (f_rgWordLength[pDevice->pConfigInfo->TxWordLength])) -1);

  00070	e5962034	 ldr         r2, [r6, #0x34]
  00074	e59f3074	 ldr         r3, [pc, #0x74]
  00078	e5961030	 ldr         r1, [r6, #0x30]
  0007c	e596e068	 ldr         lr, [r6, #0x68]
  00080	e7932102	 ldr         r2, [r3, +r2, lsl #2]
  00084	e5950038	 ldr         r0, [r5, #0x38]
  00088	e0030192	 mul         r3, r2, r1
  0008c	e2433001	 sub         r3, r3, #1
  00090	e183300e	 orr         r3, r3, lr
  00094	e1833000	 orr         r3, r3, r0
  00098		 |$LN11@mcbsp_Conf@2|
  00098	e5853038	 str         r3, [r5, #0x38]

; 667  :         }
; 668  : 
; 669  :     // set CLKSM
; 670  :     //
; 671  :     if (pDevice->pConfigInfo->SRGClkSrc == kMcBSP_SRG_SRC_CPU_CLK ||
; 672  :         pDevice->pConfigInfo->SRGClkSrc == kMcBSP_SRG_SRC_CLKX_PIN)

  0009c	e596305c	 ldr         r3, [r6, #0x5C]
  000a0	e3530002	 cmp         r3, #2
  000a4	0a00000c	 beq         |$LN5@mcbsp_Conf@2|
  000a8	e3530004	 cmp         r3, #4
  000ac	0a00000a	 beq         |$LN5@mcbsp_Conf@2|

; 678  :         }
; 679  :     else
; 680  :         {
; 681  :         // Sample-rate generator source is either CLKRI(SCLKME=1) or
; 682  :         // CLKS(SCLKME=0)
; 683  :         //
; 684  :         pDevice->shadowRegs.SRGR2 &= ~MCBSP_SRGR2_CLKSM;

  000b0	e5953038	 ldr         r3, [r5, #0x38]
  000b4	e3c33a02	 bic         r3, r3, #2, 20
  000b8	e5853038	 str         r3, [r5, #0x38]

; 685  :         if (pDevice->pConfigInfo->SRGClkSrc == kMcBSP_SRG_SRC_CLKS_PIN_FALL)

  000bc	e596205c	 ldr         r2, [r6, #0x5C]
  000c0	e3520001	 cmp         r2, #1

; 686  :             {
; 687  :             // Falling CLKS
; 688  :             //
; 689  :             pDevice->shadowRegs.SRGR2 |= MCBSP_SRGR2_CLKSP;

  000c4	03833901	 orreq       r3, r3, #1, 18
  000c8	0a000005	 beq         |$LN12@mcbsp_Conf@2|

; 690  :             }
; 691  :         else if (pDevice->pConfigInfo->SRGClkSrc ==
; 692  :             kMcBSP_SRG_SRC_CLKS_PIN_RISE)

  000cc	e3520000	 cmp         r2, #0
  000d0	1a000004	 bne         |$LN1@mcbsp_Conf@2|

; 693  :             {
; 694  :             // Rising CLKS
; 695  :             //
; 696  :             pDevice->shadowRegs.SRGR2 &= ~MCBSP_SRGR2_CLKSP;

  000d4	e3c33901	 bic         r3, r3, #1, 18
  000d8	ea000001	 b           |$LN12@mcbsp_Conf@2|
  000dc		 |$LN5@mcbsp_Conf@2|

; 673  :         {
; 674  :         // Sample-rate generator source is either CLKXI(SCLKME=1) or
; 675  :         // FCLK(SCLKME=0)
; 676  :         //
; 677  :         pDevice->shadowRegs.SRGR2 |= MCBSP_SRGR2_CLKSM;

  000dc	e5953038	 ldr         r3, [r5, #0x38]
  000e0	e3833a02	 orr         r3, r3, #2, 20
  000e4		 |$LN12@mcbsp_Conf@2|
  000e4	e5853038	 str         r3, [r5, #0x38]
  000e8		 |$LN1@mcbsp_Conf@2|

; 697  :             }
; 698  :         }
; 699  : 
; 700  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 701  : }

  000e8	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000ec	e12fff1e	 bx          lr
  000f0		 |$LN16@mcbsp_Conf@2|
  000f0		 |$LN17@mcbsp_Conf@2|
  000f0	00000000	 DCD         |f_rgWordLength|
  000f4		 |$M37161|

			 ENDP  ; |mcbsp_ConfigureSampleRateGenerator|

	EXPORT	|mcbsp_ConfigureTransmitter|

  00000			 AREA	 |.pdata|, PDATA
|$T37174| DCD	|$LN13@mcbsp_Conf@3|
	DCD	0x40003e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ConfigureTransmitter| PROC

; 712  : {

  00000		 |$LN13@mcbsp_Conf@3|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M37171|

; 713  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 714  : 
; 715  :     // update register: SPCR1
; 716  :     //------------------------
; 717  :     // set DLB
; 718  :     // set DXENA
; 719  :     //
; 720  :     pDevice->shadowRegs.SPCR1 |= pDevice->pConfigInfo->AnalogLoopBackMode |
; 721  :         MCBSP_SPCR1_DXENA;

  00004	e5906068	 ldr         r6, [r0, #0x68]
  00008	e5902024	 ldr         r2, [r0, #0x24]

; 722  : 
; 723  :     // update register: XCR1
; 724  :     //------------------------
; 725  :     // set XFRLEN1
; 726  :     // set XWDLEN1
; 727  :     //
; 728  :     ASSERT(pDevice->pConfigInfo->TxFrameLength <= 128 &&
; 729  :            pDevice->pConfigInfo->TxFrameLength > 0);
; 730  :     pDevice->shadowRegs.XCR1 |=
; 731  :         MCBSP_FRAME_LENGTH(pDevice->pConfigInfo->TxFrameLength)|
; 732  :         MCBSP_WORD_LENGTH(pDevice->pConfigInfo->TxWordLength);

  0000c	e590e034	 ldr         lr, [r0, #0x34]
  00010	e5963000	 ldr         r3, [r6]

; 733  : 
; 734  :     // update register: XCR2
; 735  :     //------------------------
; 736  :     // NOTE:
; 737  :     //      We are always ignoring Tx frame sync errors
; 738  :     //
; 739  :     // set XPHASE
; 740  :     // set XFRLEN2
; 741  :     // set XWDLEN2
; 742  :     // set XREVERSE
; 743  :     // set XDATDLY
; 744  :     // set XREVERSE
; 745  :     //
; 746  :     // in dual phase transmit1 and transmit2 words per frame are the same
; 747  : 
; 748  :     pDevice->shadowRegs.XCR2 |= pDevice->pConfigInfo->TxPhase |
; 749  :         MCBSP_FRAME_LENGTH(pDevice->pConfigInfo->TxFrameLength)|
; 750  :         MCBSP_WORD_LENGTH(pDevice->pConfigInfo->TxWordLength2) |
; 751  :         pDevice->pConfigInfo->TxReverse |
; 752  :         pDevice->pConfigInfo->TxDataDelay;

  00014	e5904030	 ldr         r4, [r0, #0x30]

; 753  : 
; 754  :     // update register: PCR
; 755  :     //------------------------
; 756  :     // set CLKXM
; 757  :     // set FSXP
; 758  :     // set CLKXP
; 759  :     //
; 760  :     pDevice->shadowRegs.PCR |= pDevice->pConfigInfo->TxClockSource |
; 761  :         pDevice->pConfigInfo->TxFrameSyncPolarity |
; 762  :         pDevice->pConfigInfo->TxClkPolarity;

  00018	e5905040	 ldr         r5, [r0, #0x40]
  0001c	e1833002	 orr         r3, r3, r2
  00020	e3833080	 orr         r3, r3, #0x80
  00024	e5803024	 str         r3, [r0, #0x24]
  00028	e5963030	 ldr         r3, [r6, #0x30]
  0002c	e5961034	 ldr         r1, [r6, #0x34]
  00030	e2433001	 sub         r3, r3, #1
  00034	e203207f	 and         r2, r3, #0x7F
  00038	e2013007	 and         r3, r1, #7
  0003c	e1833182	 orr         r3, r3, r2, lsl #3
  00040	e18e3283	 orr         r3, lr, r3, lsl #5
  00044	e5803034	 str         r3, [r0, #0x34]
  00048	e5963030	 ldr         r3, [r6, #0x30]
  0004c	e5961038	 ldr         r1, [r6, #0x38]
  00050	e596e04c	 ldr         lr, [r6, #0x4C]
  00054	e2433001	 sub         r3, r3, #1
  00058	e203207f	 and         r2, r3, #0x7F
  0005c	e2013007	 and         r3, r1, #7
  00060	e5961040	 ldr         r1, [r6, #0x40]
  00064	e1833182	 orr         r3, r3, r2, lsl #3
  00068	e596203c	 ldr         r2, [r6, #0x3C]
  0006c	e18e3283	 orr         r3, lr, r3, lsl #5
  00070	e1833001	 orr         r3, r3, r1
  00074	e1833002	 orr         r3, r3, r2
  00078	e1833004	 orr         r3, r3, r4
  0007c	e5803030	 str         r3, [r0, #0x30]
  00080	e5961058	 ldr         r1, [r6, #0x58]
  00084	e5963054	 ldr         r3, [r6, #0x54]
  00088	e5962044	 ldr         r2, [r6, #0x44]
  0008c	e1813003	 orr         r3, r1, r3
  00090	e1833002	 orr         r3, r3, r2
  00094	e1833005	 orr         r3, r3, r5
  00098	e5803040	 str         r3, [r0, #0x40]

; 763  : 
; 764  : 
; 765  :     // set SCLKME
; 766  :     //
; 767  :     if (pDevice->pConfigInfo->SRGClkSrc == kMcBSP_SRG_SRC_CLKX_PIN ||
; 768  :         pDevice->pConfigInfo->SRGClkSrc == kMcBSP_SRG_SRC_CLKR_PIN)

  0009c	e596205c	 ldr         r2, [r6, #0x5C]
  000a0	e3520004	 cmp         r2, #4
  000a4	13520003	 cmpne       r2, #3

; 769  :         {
; 770  :         // Sample-rate generator source is either CLKXI(CLKSM=1) or
; 771  :         // CLKRI(CLKSM=0)
; 772  :         //
; 773  :         pDevice->shadowRegs.PCR |= MCBSP_PCR_SCLKME;
; 774  :         }
; 775  :     else
; 776  :         {
; 777  :         pDevice->shadowRegs.PCR &= ~MCBSP_PCR_SCLKME;

  000a8	13c33080	 bicne       r3, r3, #0x80
  000ac	03833080	 orreq       r3, r3, #0x80
  000b0	e5803040	 str         r3, [r0, #0x40]

; 778  :         }
; 779  : 
; 780  :     // update register: PCR
; 781  :     //------------------------
; 782  :     // set FSXM
; 783  :     //
; 784  :     // update register: SRGR2
; 785  :     //------------------------
; 786  :     // set FSGM
; 787  :     //
; 788  :     switch (pDevice->pConfigInfo->TxFrameSyncSource)

  000b4	e5963048	 ldr         r3, [r6, #0x48]
  000b8	e3530002	 cmp         r3, #2
  000bc	0a000004	 beq         |$LN1@mcbsp_Conf@3|
  000c0	e3530003	 cmp         r3, #3
  000c4	1a000005	 bne         |$LN3@mcbsp_Conf@3|

; 789  :         {
; 790  :         case kMcBSP_Tx_FS_SRC_SRG:
; 791  :             pDevice->shadowRegs.SRGR2 |= MCBSP_SRGR2_FSGM;

  000c8	e5903038	 ldr         r3, [r0, #0x38]
  000cc	e3833a01	 orr         r3, r3, #1, 20
  000d0	e5803038	 str         r3, [r0, #0x38]
  000d4		 |$LN1@mcbsp_Conf@3|

; 792  : 
; 793  :             // fall-through
; 794  : 
; 795  :         case kMcBSP_Tx_FS_SRC_DSR_XSR_COPY:
; 796  :             pDevice->shadowRegs.PCR |= MCBSP_PCR_FSXM;

  000d4	e5903040	 ldr         r3, [r0, #0x40]
  000d8	e3833b02	 orr         r3, r3, #2, 22
  000dc	e5803040	 str         r3, [r0, #0x40]
  000e0		 |$LN3@mcbsp_Conf@3|

; 797  :         }
; 798  : 
; 799  : 
; 800  :     // update register: SPCR2
; 801  :     //------------------------
; 802  :     // NOTE:
; 803  :     //      Only set XINTM when in DMA mode
; 804  :     //
; 805  :     // set XINTM
; 806  :     //
; 807  :     pDevice->shadowRegs.SPCR2 |= pDevice->pConfigInfo->TxSyncError;

  000e0	e5962050	 ldr         r2, [r6, #0x50]
  000e4	e5903020	 ldr         r3, [r0, #0x20]
  000e8	e1823003	 orr         r3, r2, r3
  000ec	e5803020	 str         r3, [r0, #0x20]

; 808  : 
; 809  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 810  : }

  000f0	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000f4	e12fff1e	 bx          lr
  000f8		 |$M37172|

			 ENDP  ; |mcbsp_ConfigureTransmitter|

	EXPORT	|mcbsp_ConfigureReceiver|

  00000			 AREA	 |.pdata|, PDATA
|$T37182| DCD	|$LN5@mcbsp_Conf@4|
	DCD	0x40002f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ConfigureReceiver| PROC

; 822  : {

  00000		 |$LN5@mcbsp_Conf@4|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M37179|
  00004	e1a08000	 mov         r8, r0

; 823  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 824  : 
; 825  :     // update register: SPCR1
; 826  :     //------------------------
; 827  :     // set RJUST
; 828  :     //
; 829  :     pDevice->shadowRegs.SPCR1 |= pDevice->pConfigInfo->JustificationMode;

  00008	e5987068	 ldr         r7, [r8, #0x68]
  0000c	e5982024	 ldr         r2, [r8, #0x24]

; 830  : 
; 831  :     // update register: RCR1
; 832  :     //------------------------
; 833  :     // set RFRLEN1
; 834  :     // set RWDLEN1
; 835  :     //
; 836  :     ASSERT(pDevice->pConfigInfo->RxFrameLength <= 128 &&
; 837  :            pDevice->pConfigInfo->RxFrameLength > 0);
; 838  : 
; 839  :     pDevice->shadowRegs.RCR1 |=
; 840  :         MCBSP_FRAME_LENGTH(pDevice->pConfigInfo->RxFrameLength)|
; 841  :         MCBSP_WORD_LENGTH(pDevice->pConfigInfo->RxWordLength);

  00010	e598e02c	 ldr         lr, [r8, #0x2C]
  00014	e597306c	 ldr         r3, [r7, #0x6C]

; 842  : 
; 843  :     // update register: RCR2
; 844  :     //------------------------
; 845  :     // NOTE:
; 846  :     //      We are always ignoring Rx frame sync errors
; 847  :     //
; 848  :     // set RPHASE
; 849  :     // set RFRLEN2
; 850  :     // set RWDLEN2
; 851  :     // set RREVERSE
; 852  :     // set RDATDLY
; 853  :     // set RREVERSE
; 854  :     //
; 855  :     // in dual phase receive1 and receive2 words per frame are the same
; 856  : 
; 857  :     pDevice->shadowRegs.RCR2 |= pDevice->pConfigInfo->RxPhase |
; 858  :         MCBSP_FRAME_LENGTH(pDevice->pConfigInfo->RxFrameLength)|
; 859  :         MCBSP_WORD_LENGTH(pDevice->pConfigInfo->RxWordLength2) |
; 860  :         pDevice->pConfigInfo->RxReverse |
; 861  :         pDevice->pConfigInfo->RxDataDelay;

  00018	e5984028	 ldr         r4, [r8, #0x28]

; 862  : 
; 863  :     // update register: PCR
; 864  :     //-----------------------
; 865  :     // set FSRM
; 866  :     // set FSRP
; 867  :     // set CLKRP
; 868  :     // set CLKRM
; 869  :     //
; 870  :     pDevice->shadowRegs.PCR |= pDevice->pConfigInfo->RxFrameSyncSource |
; 871  :         pDevice->pConfigInfo->RxFrameSyncPolarity |
; 872  :         pDevice->pConfigInfo->RxClkPolarity |
; 873  :         pDevice->pConfigInfo->RxClockSource;

  0001c	e5986040	 ldr         r6, [r8, #0x40]
  00020	e1833002	 orr         r3, r3, r2
  00024	e5883024	 str         r3, [r8, #0x24]
  00028	e5973004	 ldr         r3, [r7, #4]
  0002c	e5971008	 ldr         r1, [r7, #8]

; 874  : 
; 875  :     // update register: SPCR2
; 876  :     //------------------------
; 877  :     // NOTE:
; 878  :     //      Only set RINTM when in DMA mode
; 879  :     //
; 880  :     // set RINTM
; 881  :     //
; 882  :     pDevice->shadowRegs.SPCR1 |= pDevice->pConfigInfo->RxSyncError;

  00030	e5985024	 ldr         r5, [r8, #0x24]
  00034	e2433001	 sub         r3, r3, #1
  00038	e203207f	 and         r2, r3, #0x7F
  0003c	e2013007	 and         r3, r1, #7
  00040	e1833182	 orr         r3, r3, r2, lsl #3
  00044	e18e3283	 orr         r3, lr, r3, lsl #5
  00048	e588302c	 str         r3, [r8, #0x2C]
  0004c	e5973004	 ldr         r3, [r7, #4]
  00050	e597100c	 ldr         r1, [r7, #0xC]
  00054	e597e020	 ldr         lr, [r7, #0x20]
  00058	e2433001	 sub         r3, r3, #1
  0005c	e203207f	 and         r2, r3, #0x7F
  00060	e2013007	 and         r3, r1, #7
  00064	e5971014	 ldr         r1, [r7, #0x14]
  00068	e1833182	 orr         r3, r3, r2, lsl #3
  0006c	e5972010	 ldr         r2, [r7, #0x10]
  00070	e18e3283	 orr         r3, lr, r3, lsl #5
  00074	e1833001	 orr         r3, r3, r1
  00078	e1833002	 orr         r3, r3, r2
  0007c	e1833004	 orr         r3, r3, r4
  00080	e5883028	 str         r3, [r8, #0x28]
  00084	e597002c	 ldr         r0, [r7, #0x2C]
  00088	e5973028	 ldr         r3, [r7, #0x28]
  0008c	e597201c	 ldr         r2, [r7, #0x1C]
  00090	e5971018	 ldr         r1, [r7, #0x18]
  00094	e1803003	 orr         r3, r0, r3
  00098	e1833002	 orr         r3, r3, r2
  0009c	e1833001	 orr         r3, r3, r1
  000a0	e1833006	 orr         r3, r3, r6
  000a4	e5883040	 str         r3, [r8, #0x40]
  000a8	e5973024	 ldr         r3, [r7, #0x24]
  000ac	e1833005	 orr         r3, r3, r5
  000b0	e5883024	 str         r3, [r8, #0x24]

; 883  : 
; 884  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 885  : }

  000b4	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$M37180|

			 ENDP  ; |mcbsp_ConfigureReceiver|

	EXPORT	|mcbsp_ClearIRQStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T37190| DCD	|$LN5@mcbsp_Clea|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ClearIRQStatus| PROC

; 896  : {

  00000		 |$LN5@mcbsp_Clea|
  00000		 |$M37187|

; 897  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 898  : 
; 899  :     // Clear the IRQ status
; 900  :     //
; 901  :     OUTREG32(&pDevice->pMcbspRegs->IRQSTATUS, 0xFFFF);

  00000	e590201c	 ldr         r2, [r0, #0x1C]
  00004	e3a03cff	 mov         r3, #0xFF, 24
  00008	e38330ff	 orr         r3, r3, #0xFF
  0000c	e58230a0	 str         r3, [r2, #0xA0]

; 902  : 
; 903  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 904  : }

  00010	e12fff1e	 bx          lr
  00014		 |$M37188|

			 ENDP  ; |mcbsp_ClearIRQStatus|

	EXPORT	|mcbsp_UpdateRegisters|

  00000			 AREA	 |.pdata|, PDATA
|$T37198| DCD	|$LN5@mcbsp_Upda|
	DCD	0x40003401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_UpdateRegisters| PROC

; 914  : {

  00000		 |$LN5@mcbsp_Upda|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37195|

; 915  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 916  : 
; 917  :     OUTREG32(&pDevice->pMcbspRegs->SRGR1, pDevice->shadowRegs.SRGR1);

  00004	e590201c	 ldr         r2, [r0, #0x1C]
  00008	e590303c	 ldr         r3, [r0, #0x3C]

; 918  :     OUTREG32(&pDevice->pMcbspRegs->SRGR2, pDevice->shadowRegs.SRGR2);
; 919  :     OUTREG32(&pDevice->pMcbspRegs->PCR, pDevice->shadowRegs.PCR);
; 920  :     OUTREG32(&pDevice->pMcbspRegs->XCR1, pDevice->shadowRegs.XCR1);
; 921  :     OUTREG32(&pDevice->pMcbspRegs->XCR2, pDevice->shadowRegs.XCR2);
; 922  :     OUTREG32(&pDevice->pMcbspRegs->RCR1, pDevice->shadowRegs.RCR1);
; 923  :     OUTREG32(&pDevice->pMcbspRegs->RCR2, pDevice->shadowRegs.RCR2);
; 924  :     OUTREG32(&pDevice->pMcbspRegs->SPCR2, pDevice->shadowRegs.SPCR2);
; 925  :     OUTREG32(&pDevice->pMcbspRegs->SPCR1, pDevice->shadowRegs.SPCR1);
; 926  : 
; 927  :     //McBSP RX Threshold settings for FIFO
; 928  :     //
; 929  :     pDevice->shadowRegs.THRSH1 = pDevice->fifoThresholdRx;
; 930  :     OUTREG32(&pDevice->pMcbspRegs->THRSH1, pDevice->shadowRegs.THRSH1);
; 931  : 
; 932  :     //McBSP TX Threshold settings for FIFO
; 933  :     //
; 934  :     pDevice->shadowRegs.THRSH2 = pDevice->fifoThresholdTx;
; 935  :     OUTREG32(&pDevice->pMcbspRegs->THRSH2, pDevice->shadowRegs.THRSH2);
; 936  : 
; 937  :     // Set McBSP in smart Idle mode and enable mcbsp wakeup
; 938  :     // Also the clockactivity to be set to 0 ( McBSP2_ICLK clock can be switched
; 939  :     // off and PRCM functional clock can be switched off
; 940  :     //
; 941  :     pDevice->shadowRegs.SYSCONFIG = MCBSP_SYSCONFIG_SMARTIDLE |
; 942  :                                     MCBSP_SYSCONFIG_ENAWAKEUP |
; 943  :                                     MCBSP_SYSCONFIG_CLOCKACTIVITY(0);

  0000c	e3a0e014	 mov         lr, #0x14

; 944  :     OUTREG32(&pDevice->pMcbspRegs->SYSCONFIG, pDevice->shadowRegs.SYSCONFIG);
; 945  : 
; 946  :     // Clocks in McBSP are shutoff when both IDLE_EN=1 and its power domain is
; 947  :     // in idle mode(Force idle or Smart idle)
; 948  :     pDevice->shadowRegs.PCR |= MCBSP_PCR_IDLE_EN;
; 949  :     OUTREG32(&pDevice->pMcbspRegs->PCR, pDevice->shadowRegs.PCR);
; 950  : 
; 951  :     // Set McBSP wake up enable register
; 952  :     //
; 953  :     pDevice->shadowRegs.WAKEUPEN = MCBSP_WAKEUPEN_XEMPTYEOFEN |
; 954  :                                    MCBSP_WAKEUPEN_XRDYEN |
; 955  :                                    MCBSP_WAKEUPEN_RRDYEN;

  00010	e3a01b11	 mov         r1, #0x11, 22
  00014	e582302c	 str         r3, [r2, #0x2C]
  00018	e590201c	 ldr         r2, [r0, #0x1C]
  0001c	e5903038	 ldr         r3, [r0, #0x38]
  00020	e3811008	 orr         r1, r1, #8
  00024	e5823028	 str         r3, [r2, #0x28]
  00028	e590201c	 ldr         r2, [r0, #0x1C]
  0002c	e5903040	 ldr         r3, [r0, #0x40]
  00030	e5823048	 str         r3, [r2, #0x48]
  00034	e590201c	 ldr         r2, [r0, #0x1C]
  00038	e5903034	 ldr         r3, [r0, #0x34]
  0003c	e5823024	 str         r3, [r2, #0x24]
  00040	e590201c	 ldr         r2, [r0, #0x1C]
  00044	e5903030	 ldr         r3, [r0, #0x30]
  00048	e5823020	 str         r3, [r2, #0x20]
  0004c	e590201c	 ldr         r2, [r0, #0x1C]
  00050	e590302c	 ldr         r3, [r0, #0x2C]
  00054	e582301c	 str         r3, [r2, #0x1C]
  00058	e590201c	 ldr         r2, [r0, #0x1C]
  0005c	e5903028	 ldr         r3, [r0, #0x28]
  00060	e5823018	 str         r3, [r2, #0x18]
  00064	e590201c	 ldr         r2, [r0, #0x1C]
  00068	e5903020	 ldr         r3, [r0, #0x20]
  0006c	e5823010	 str         r3, [r2, #0x10]
  00070	e590201c	 ldr         r2, [r0, #0x1C]
  00074	e5903024	 ldr         r3, [r0, #0x24]
  00078	e5823014	 str         r3, [r2, #0x14]
  0007c	e5903110	 ldr         r3, [r0, #0x110]
  00080	e590201c	 ldr         r2, [r0, #0x1C]
  00084	e5803044	 str         r3, [r0, #0x44]
  00088	e5823094	 str         r3, [r2, #0x94]
  0008c	e59030f0	 ldr         r3, [r0, #0xF0]
  00090	e590201c	 ldr         r2, [r0, #0x1C]
  00094	e5803048	 str         r3, [r0, #0x48]
  00098	e5823090	 str         r3, [r2, #0x90]
  0009c	e590301c	 ldr         r3, [r0, #0x1C]
  000a0	e580e04c	 str         lr, [r0, #0x4C]
  000a4	e583e08c	 str         lr, [r3, #0x8C]
  000a8	e5903040	 ldr         r3, [r0, #0x40]
  000ac	e590201c	 ldr         r2, [r0, #0x1C]
  000b0	e3833901	 orr         r3, r3, #1, 18
  000b4	e5803040	 str         r3, [r0, #0x40]
  000b8	e5823048	 str         r3, [r2, #0x48]

; 956  :     OUTREG32(&pDevice->pMcbspRegs->WAKEUPEN, pDevice->shadowRegs.WAKEUPEN);

  000bc	e590301c	 ldr         r3, [r0, #0x1C]
  000c0	e5801050	 str         r1, [r0, #0x50]
  000c4	e58310a8	 str         r1, [r3, #0xA8]

; 957  : 
; 958  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 959  : }

  000c8	e49de004	 ldr         lr, [sp], #4
  000cc	e12fff1e	 bx          lr
  000d0		 |$M37196|

			 ENDP  ; |mcbsp_UpdateRegisters|

	EXPORT	|mcbsp_ResetSampleRateGenerator|

  00000			 AREA	 |.pdata|, PDATA
|$T37206| DCD	|$LN5@mcbsp_Rese@2|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ResetSampleRateGenerator| PROC

; 969  : {

  00000		 |$LN5@mcbsp_Rese@2|
  00000		 |$M37203|

; 970  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 971  : 
; 972  :     pDevice->shadowRegs.SPCR2 &=
; 973  :         ~(MCBSP_SPCR2_GRST_RSTCLR | MCBSP_SPCR2_FRST_RSTCLR);

  00000	e5903020	 ldr         r3, [r0, #0x20]

; 974  :     OUTREG32(&pDevice->pMcbspRegs->SPCR2, pDevice->shadowRegs.SPCR2);

  00004	e590201c	 ldr         r2, [r0, #0x1C]
  00008	e3c330c0	 bic         r3, r3, #0xC0
  0000c	e5803020	 str         r3, [r0, #0x20]
  00010	e5823010	 str         r3, [r2, #0x10]

; 975  : 
; 976  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 977  : }

  00014	e12fff1e	 bx          lr
  00018		 |$M37204|

			 ENDP  ; |mcbsp_ResetSampleRateGenerator|

	EXPORT	|mcbsp_EnableSampleRateGenerator|

  00000			 AREA	 |.pdata|, PDATA
|$T37214| DCD	|$LN5@mcbsp_Enab|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_EnableSampleRateGenerator| PROC

; 987  : {

  00000		 |$LN5@mcbsp_Enab|
  00000		 |$M37211|

; 988  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 989  : 
; 990  :     pDevice->shadowRegs.SPCR2 |=
; 991  :         MCBSP_SPCR2_GRST_RSTCLR | MCBSP_SPCR2_FRST_RSTCLR;

  00000	e5903020	 ldr         r3, [r0, #0x20]

; 992  :     OUTREG32(&pDevice->pMcbspRegs->SPCR2, pDevice->shadowRegs.SPCR2);

  00004	e590201c	 ldr         r2, [r0, #0x1C]
  00008	e38330c0	 orr         r3, r3, #0xC0
  0000c	e5803020	 str         r3, [r0, #0x20]
  00010	e5823010	 str         r3, [r2, #0x10]

; 993  : 
; 994  :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 995  : }

  00014	e12fff1e	 bx          lr
  00018		 |$M37212|

			 ENDP  ; |mcbsp_EnableSampleRateGenerator|

	EXPORT	|mcbsp_ResetTransmitter|

  00000			 AREA	 |.pdata|, PDATA
|$T37222| DCD	|$LN5@mcbsp_Rese@3|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ResetTransmitter| PROC

; 1006 : {

  00000		 |$LN5@mcbsp_Rese@3|
  00000		 |$M37219|

; 1007 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1008 : 
; 1009 :     pDevice->shadowRegs.SPCR2 &= ~MCBSP_SPCR2_XRST_RSTCLR;

  00000	e5903020	 ldr         r3, [r0, #0x20]

; 1010 :     OUTREG32(&pDevice->pMcbspRegs->SPCR2, pDevice->shadowRegs.SPCR2);

  00004	e590201c	 ldr         r2, [r0, #0x1C]
  00008	e3c33001	 bic         r3, r3, #1
  0000c	e5803020	 str         r3, [r0, #0x20]
  00010	e5823010	 str         r3, [r2, #0x10]

; 1011 : 
; 1012 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1013 : }

  00014	e12fff1e	 bx          lr
  00018		 |$M37220|

			 ENDP  ; |mcbsp_ResetTransmitter|

	EXPORT	|mcbsp_EnableTransmitter|

  00000			 AREA	 |.pdata|, PDATA
|$T37230| DCD	|$LN5@mcbsp_Enab@2|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_EnableTransmitter| PROC

; 1024 : {

  00000		 |$LN5@mcbsp_Enab@2|
  00000		 |$M37227|

; 1025 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1026 : 
; 1027 :     pDevice->shadowRegs.SPCR2 |= MCBSP_SPCR2_XRST_RSTCLR;

  00000	e5903020	 ldr         r3, [r0, #0x20]

; 1028 :     OUTREG32(&pDevice->pMcbspRegs->SPCR2, pDevice->shadowRegs.SPCR2);

  00004	e590201c	 ldr         r2, [r0, #0x1C]
  00008	e3833001	 orr         r3, r3, #1
  0000c	e5803020	 str         r3, [r0, #0x20]
  00010	e5823010	 str         r3, [r2, #0x10]

; 1029 : 
; 1030 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1031 : }

  00014	e12fff1e	 bx          lr
  00018		 |$M37228|

			 ENDP  ; |mcbsp_EnableTransmitter|

	EXPORT	|mcbsp_ResetReceiver|

  00000			 AREA	 |.pdata|, PDATA
|$T37238| DCD	|$LN5@mcbsp_Rese@4|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ResetReceiver| PROC

; 1042 : {

  00000		 |$LN5@mcbsp_Rese@4|
  00000		 |$M37235|

; 1043 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1044 : 
; 1045 :     pDevice->shadowRegs.SPCR1 &= ~MCBSP_SPCR1_RRST_RSTCLR;

  00000	e5903024	 ldr         r3, [r0, #0x24]

; 1046 :     OUTREG32(&pDevice->pMcbspRegs->SPCR1, pDevice->shadowRegs.SPCR1);

  00004	e590201c	 ldr         r2, [r0, #0x1C]
  00008	e3c33001	 bic         r3, r3, #1
  0000c	e5803024	 str         r3, [r0, #0x24]
  00010	e5823014	 str         r3, [r2, #0x14]

; 1047 : 
; 1048 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1049 : }

  00014	e12fff1e	 bx          lr
  00018		 |$M37236|

			 ENDP  ; |mcbsp_ResetReceiver|

	EXPORT	|mcbsp_EnableReceiver|

  00000			 AREA	 |.pdata|, PDATA
|$T37246| DCD	|$LN5@mcbsp_Enab@3|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_EnableReceiver| PROC

; 1060 : {

  00000		 |$LN5@mcbsp_Enab@3|
  00000		 |$M37243|

; 1061 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1062 : 
; 1063 :     pDevice->shadowRegs.SPCR1 |= MCBSP_SPCR1_RRST_RSTCLR;

  00000	e5903024	 ldr         r3, [r0, #0x24]

; 1064 :     OUTREG32(&pDevice->pMcbspRegs->SPCR1, pDevice->shadowRegs.SPCR1);

  00004	e590201c	 ldr         r2, [r0, #0x1C]
  00008	e3833001	 orr         r3, r3, #1
  0000c	e5803024	 str         r3, [r0, #0x24]
  00010	e5823014	 str         r3, [r2, #0x14]

; 1065 : 
; 1066 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1067 : }

  00014	e12fff1e	 bx          lr
  00018		 |$M37244|

			 ENDP  ; |mcbsp_EnableReceiver|

	EXPORT	|mcbsp_ConfigI2SProfile|

  00000			 AREA	 |.pdata|, PDATA
|$T37254| DCD	|$LN5@mcbsp_Conf@5|
	DCD	0x40002c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ConfigI2SProfile| PROC

; 1077 : {

  00000		 |$LN5@mcbsp_Conf@5|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37251|
  00004	e1a05000	 mov         r5, r0

; 1078 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1079 : 
; 1080 :     pDevice->shadowRegs.MCR1 = 0;
; 1081 :     pDevice->shadowRegs.MCR2 = 0;
; 1082 :     pDevice->shadowRegs.RCERA = 0;
; 1083 :     pDevice->shadowRegs.XCERA = 0;
; 1084 : 
; 1085 :     OUTREG32(&pDevice->pMcbspRegs->MCR1, pDevice->shadowRegs.MCR1);

  00008	e595301c	 ldr         r3, [r5, #0x1C]
  0000c	e3a02000	 mov         r2, #0
  00010	e5852054	 str         r2, [r5, #0x54]
  00014	e5852058	 str         r2, [r5, #0x58]
  00018	e585205c	 str         r2, [r5, #0x5C]
  0001c	e5852060	 str         r2, [r5, #0x60]
  00020	e5832034	 str         r2, [r3, #0x34]

; 1086 :     OUTREG32(&pDevice->pMcbspRegs->MCR2, pDevice->shadowRegs.MCR1);

  00024	e595201c	 ldr         r2, [r5, #0x1C]
  00028	e5953054	 ldr         r3, [r5, #0x54]
  0002c	e5823030	 str         r3, [r2, #0x30]

; 1087 :     OUTREG32(&pDevice->pMcbspRegs->RCERA, pDevice->shadowRegs.RCERA);

  00030	e595201c	 ldr         r2, [r5, #0x1C]
  00034	e595305c	 ldr         r3, [r5, #0x5C]
  00038	e5823038	 str         r3, [r2, #0x38]

; 1088 :     OUTREG32(&pDevice->pMcbspRegs->XCERA, pDevice->shadowRegs.XCERA);

  0003c	e595201c	 ldr         r2, [r5, #0x1C]
  00040	e5953060	 ldr         r3, [r5, #0x60]
  00044	e5823040	 str         r3, [r2, #0x40]

; 1089 : 
; 1090 :     pDevice->shadowRegs.XCR1 |= MCBSP_FRAME_LENGTH(pDevice->pConfigInfo->TxFrameLength)|
; 1091 :                                MCBSP_WORD_LENGTH(pDevice->pConfigInfo->TxWordLength);

  00048	e5952068	 ldr         r2, [r5, #0x68]
  0004c	e595e034	 ldr         lr, [r5, #0x34]

; 1092 :     OUTREG32(&pDevice->pMcbspRegs->XCR1, pDevice->shadowRegs.XCR1);

  00050	e595401c	 ldr         r4, [r5, #0x1C]
  00054	e5923030	 ldr         r3, [r2, #0x30]
  00058	e5921034	 ldr         r1, [r2, #0x34]
  0005c	e2433001	 sub         r3, r3, #1
  00060	e203207f	 and         r2, r3, #0x7F
  00064	e2013007	 and         r3, r1, #7
  00068	e1833182	 orr         r3, r3, r2, lsl #3
  0006c	e18e3283	 orr         r3, lr, r3, lsl #5
  00070	e5853034	 str         r3, [r5, #0x34]
  00074	e5843024	 str         r3, [r4, #0x24]

; 1093 : 
; 1094 :     pDevice->shadowRegs.RCR1 |= MCBSP_FRAME_LENGTH(pDevice->pConfigInfo->RxFrameLength)|
; 1095 :                                MCBSP_WORD_LENGTH(pDevice->pConfigInfo->RxWordLength);

  00078	e5952068	 ldr         r2, [r5, #0x68]
  0007c	e595002c	 ldr         r0, [r5, #0x2C]

; 1096 :     OUTREG32(&pDevice->pMcbspRegs->RCR1, pDevice->shadowRegs.RCR1);

  00080	e595e01c	 ldr         lr, [r5, #0x1C]
  00084	e5923004	 ldr         r3, [r2, #4]
  00088	e5921008	 ldr         r1, [r2, #8]
  0008c	e2433001	 sub         r3, r3, #1
  00090	e203207f	 and         r2, r3, #0x7F
  00094	e2013007	 and         r3, r1, #7
  00098	e1833182	 orr         r3, r3, r2, lsl #3
  0009c	e1803283	 orr         r3, r0, r3, lsl #5
  000a0	e585302c	 str         r3, [r5, #0x2C]
  000a4	e58e301c	 str         r3, [lr, #0x1C]

; 1097 : 
; 1098 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1099 : }

  000a8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$M37252|

			 ENDP  ; |mcbsp_ConfigI2SProfile|

	EXPORT	|mcbsp_ConfigTDMTxChannels|

  00000			 AREA	 |.pdata|, PDATA
|$T37275| DCD	|$LN23@mcbsp_Conf@6|
	DCD	0x40006d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ConfigTDMTxChannels| PROC

; 1206 : {

  00000		 |$LN23@mcbsp_Conf@6|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M37272|
  00004	e1a0e000	 mov         lr, r0

; 1207 :     DWORD channelToEnable = 0;
; 1208 :     UINT  nCount = 0;
; 1209 :     DWORD regVal = 0;
; 1210 : 
; 1211 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1212 : 
; 1213 :     // Channel selection among the available 128 channels
; 1214 :     // which is distributed equally among 8 blocks.
; 1215 :     //
; 1216 :     for (nCount= 0; nCount < pDevice->numOfTxChannels; nCount++)

  00008	e59e3134	 ldr         r3, [lr, #0x134]
  0000c	e3a05000	 mov         r5, #0
  00010	e3530000	 cmp         r3, #0
  00014	9a000061	 bls         |$LN12@mcbsp_Conf@6|
  00018	e59f7190	 ldr         r7, [pc, #0x190]
  0001c	e59f8188	 ldr         r8, [pc, #0x188]
  00020	e59f9180	 ldr         r9, [pc, #0x180]
  00024	e1a0600e	 mov         r6, lr
  00028	e3a0a001	 mov         r10, #1
  0002c	e3a0b001	 mov         r11, #1
  00030	e3a00001	 mov         r0, #1
  00034		 |$LL14@mcbsp_Conf@6|

; 1217 :         {
; 1218 :         switch ((pDevice->requestedTxChannels[nCount]) / MAX_CHANNEL_PER_BLOCK)

  00034	e5964138	 ldr         r4, [r6, #0x138]
  00038	e1a03224	 mov         r3, r4, lsr #4
  0003c	e3530040	 cmp         r3, #0x40
  00040	8a00002e	 bhi         |$LN17@mcbsp_Conf@6|
  00044	0a000023	 beq         |$LN5@mcbsp_Conf@6|
  00048	e3530000	 cmp         r3, #0
  0004c	0a00001b	 beq         |$LN9@mcbsp_Conf@6|
  00050	e3530010	 cmp         r3, #0x10
  00054	0a000013	 beq         |$LN8@mcbsp_Conf@6|
  00058	e3530020	 cmp         r3, #0x20
  0005c	0a000007	 beq         |$LN7@mcbsp_Conf@6|
  00060	e3530030	 cmp         r3, #0x30
  00064	1a000048	 bne         |$LN13@mcbsp_Conf@6|

; 1246 : 
; 1247 :             case kMcBSP_Block3:
; 1248 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1249 :                     (kMcBSP_Block3 + MAX_CHANNEL_PER_BLOCK);
; 1250 : 
; 1251 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERD);

  00068	e59e101c	 ldr         r1, [lr, #0x1C]
  0006c	e204203f	 and         r2, r4, #0x3F
  00070	e5913058	 ldr         r3, [r1, #0x58]

; 1252 :                 regVal |= (1<<channelToEnable);

  00074	e183321a	 orr         r3, r3, r10, lsl r2

; 1253 :                 OUTREG32(&pDevice->pMcbspRegs->XCERD, regVal);

  00078	e5813058	 str         r3, [r1, #0x58]

; 1254 :                 break;

  0007c	ea000042	 b           |$LN13@mcbsp_Conf@6|
  00080		 |$LN7@mcbsp_Conf@6|

; 1237 : 
; 1238 :             case kMcBSP_Block2:
; 1239 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1240 :                     (kMcBSP_Block2 + MAX_CHANNEL_PER_BLOCK);

  00080	e0831794	 umull       r1, r3, r4, r7

; 1241 : 
; 1242 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERC);

  00084	e59e001c	 ldr         r0, [lr, #0x1C]

; 1243 :                 regVal |= (1<<channelToEnable);

  00088	e3a01001	 mov         r1, #1
  0008c	e1a032a3	 mov         r3, r3, lsr #5
  00090	e5902054	 ldr         r2, [r0, #0x54]
  00094	e0833083	 add         r3, r3, r3, lsl #1
  00098	e0443203	 sub         r3, r4, r3, lsl #4
  0009c	e1823311	 orr         r3, r2, r1, lsl r3

; 1244 :                 OUTREG32(&pDevice->pMcbspRegs->XCERC, regVal);

  000a0	e5803054	 str         r3, [r0, #0x54]

; 1245 :                 break;

  000a4	ea000037	 b           |$LN20@mcbsp_Conf@6|
  000a8		 |$LN8@mcbsp_Conf@6|

; 1228 : 
; 1229 :             case kMcBSP_Block1:
; 1230 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1231 :                     (kMcBSP_Block1 + MAX_CHANNEL_PER_BLOCK);
; 1232 : 
; 1233 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERB);

  000a8	e59e101c	 ldr         r1, [lr, #0x1C]
  000ac	e204201f	 and         r2, r4, #0x1F
  000b0	e5913044	 ldr         r3, [r1, #0x44]

; 1234 :                 regVal |= (1<<channelToEnable);

  000b4	e183321b	 orr         r3, r3, r11, lsl r2

; 1235 :                 OUTREG32(&pDevice->pMcbspRegs->XCERB, regVal);

  000b8	e5813044	 str         r3, [r1, #0x44]

; 1236 :                 break;

  000bc	ea000032	 b           |$LN13@mcbsp_Conf@6|
  000c0		 |$LN9@mcbsp_Conf@6|

; 1219 :             {
; 1220 :             case kMcBSP_Block0:
; 1221 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1222 :                     (kMcBSP_Block0 + MAX_CHANNEL_PER_BLOCK);
; 1223 : 
; 1224 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERA);

  000c0	e59e101c	 ldr         r1, [lr, #0x1C]
  000c4	e204200f	 and         r2, r4, #0xF
  000c8	e5913040	 ldr         r3, [r1, #0x40]

; 1225 :                 regVal |= (1<<channelToEnable);

  000cc	e1833210	 orr         r3, r3, r0, lsl r2

; 1226 :                 OUTREG32(&pDevice->pMcbspRegs->XCERA, regVal);

  000d0	e5813040	 str         r3, [r1, #0x40]

; 1227 :                 break;

  000d4	ea00002c	 b           |$LN13@mcbsp_Conf@6|
  000d8		 |$LN5@mcbsp_Conf@6|

; 1255 : 
; 1256 :             case kMcBSP_Block4:
; 1257 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1258 :                     (kMcBSP_Block4 + MAX_CHANNEL_PER_BLOCK);

  000d8	e0831894	 umull       r1, r3, r4, r8

; 1259 : 
; 1260 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERE);

  000dc	e59e001c	 ldr         r0, [lr, #0x1C]

; 1261 :                 regVal |= (1<<channelToEnable);

  000e0	e3a01001	 mov         r1, #1
  000e4	e1a03323	 mov         r3, r3, lsr #6
  000e8	e5902064	 ldr         r2, [r0, #0x64]
  000ec	e0833103	 add         r3, r3, r3, lsl #2
  000f0	e0443203	 sub         r3, r4, r3, lsl #4
  000f4	e1823311	 orr         r3, r2, r1, lsl r3

; 1262 :                 OUTREG32(&pDevice->pMcbspRegs->XCERE, regVal);

  000f8	e5803064	 str         r3, [r0, #0x64]

; 1263 :                 break;

  000fc	ea000021	 b           |$LN20@mcbsp_Conf@6|
  00100		 |$LN17@mcbsp_Conf@6|

; 1217 :         {
; 1218 :         switch ((pDevice->requestedTxChannels[nCount]) / MAX_CHANNEL_PER_BLOCK)

  00100	e3530050	 cmp         r3, #0x50
  00104	0a000016	 beq         |$LN4@mcbsp_Conf@6|
  00108	e3530060	 cmp         r3, #0x60
  0010c	0a000008	 beq         |$LN3@mcbsp_Conf@6|
  00110	e3530070	 cmp         r3, #0x70

; 1282 : 
; 1283 :             case kMcBSP_Block7:
; 1284 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1285 :                     (kMcBSP_Block7 + MAX_CHANNEL_PER_BLOCK);
; 1286 : 
; 1287 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERH);
; 1288 :                 regVal |= (1<<channelToEnable);
; 1289 :                 OUTREG32(&pDevice->pMcbspRegs->XCERH, regVal);
; 1290 :                 break;
; 1291 : 
; 1292 :             default:
; 1293 :                 DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: mcbsp_ConfigTDMTxChannels: "
; 1294 :                     L"Invalid Channel Request\r\n"
; 1295 :                     ));
; 1296 :                 break;

  00114	1a00001c	 bne         |$LN13@mcbsp_Conf@6|
  00118	e59e101c	 ldr         r1, [lr, #0x1C]
  0011c	e204207f	 and         r2, r4, #0x7F
  00120	e3a04001	 mov         r4, #1
  00124	e5913078	 ldr         r3, [r1, #0x78]
  00128	e1833214	 orr         r3, r3, r4, lsl r2
  0012c	e5813078	 str         r3, [r1, #0x78]
  00130	ea000015	 b           |$LN13@mcbsp_Conf@6|
  00134		 |$LN3@mcbsp_Conf@6|

; 1272 :                 break;
; 1273 : 
; 1274 :             case kMcBSP_Block6:
; 1275 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1276 :                     (kMcBSP_Block6 + MAX_CHANNEL_PER_BLOCK);

  00134	e0821994	 umull       r1, r2, r4, r9

; 1277 : 
; 1278 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERG);

  00138	e59e001c	 ldr         r0, [lr, #0x1C]

; 1279 :                 regVal |= (1<<channelToEnable);

  0013c	e3a01001	 mov         r1, #1
  00140	e0443002	 sub         r3, r4, r2
  00144	e08230a3	 add         r3, r2, r3, lsr #1
  00148	e1a03323	 mov         r3, r3, lsr #6
  0014c	e5902074	 ldr         r2, [r0, #0x74]
  00150	e0633183	 rsb         r3, r3, r3, lsl #3
  00154	e0443203	 sub         r3, r4, r3, lsl #4
  00158	e1823311	 orr         r3, r2, r1, lsl r3

; 1280 :                 OUTREG32(&pDevice->pMcbspRegs->XCERG, regVal);

  0015c	e5803074	 str         r3, [r0, #0x74]

; 1281 :                 break;

  00160	ea000008	 b           |$LN20@mcbsp_Conf@6|
  00164		 |$LN4@mcbsp_Conf@6|

; 1264 : 
; 1265 :             case kMcBSP_Block5:
; 1266 :                 channelToEnable = pDevice->requestedTxChannels[nCount] %
; 1267 :                     (kMcBSP_Block5 + MAX_CHANNEL_PER_BLOCK);

  00164	e0831794	 umull       r1, r3, r4, r7

; 1268 : 
; 1269 :                 regVal = INREG32(&pDevice->pMcbspRegs->XCERF);

  00168	e59e001c	 ldr         r0, [lr, #0x1C]

; 1270 :                 regVal |= (1<<channelToEnable);

  0016c	e3a01001	 mov         r1, #1
  00170	e1a03323	 mov         r3, r3, lsr #6
  00174	e5902068	 ldr         r2, [r0, #0x68]
  00178	e0833083	 add         r3, r3, r3, lsl #1
  0017c	e0443283	 sub         r3, r4, r3, lsl #5
  00180	e1823311	 orr         r3, r2, r1, lsl r3

; 1271 :                 OUTREG32(&pDevice->pMcbspRegs->XCERF, regVal);

  00184	e5803068	 str         r3, [r0, #0x68]
  00188		 |$LN20@mcbsp_Conf@6|
  00188	e3a00001	 mov         r0, #1
  0018c		 |$LN13@mcbsp_Conf@6|
  0018c	e59e3134	 ldr         r3, [lr, #0x134]
  00190	e2855001	 add         r5, r5, #1
  00194	e2866004	 add         r6, r6, #4
  00198	e1550003	 cmp         r5, r3
  0019c	3affffa4	 bcc         |$LL14@mcbsp_Conf@6|
  001a0		 |$LN12@mcbsp_Conf@6|

; 1297 :             }
; 1298 :         }
; 1299 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1300 : }

  001a0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001a4	e12fff1e	 bx          lr
  001a8		 |$LN24@mcbsp_Conf@6|
  001a8		 |$LN25@mcbsp_Conf@6|
  001a8	24924925	 DCD         0x24924925
  001ac		 |$LN26@mcbsp_Conf@6|
  001ac	cccccccd	 DCD         0xcccccccd
  001b0		 |$LN27@mcbsp_Conf@6|
  001b0	aaaaaaab	 DCD         0xaaaaaaab
  001b4		 |$M37273|

			 ENDP  ; |mcbsp_ConfigTDMTxChannels|

	EXPORT	|mcbsp_ConfigTDMRxChannels|

  00000			 AREA	 |.pdata|, PDATA
|$T37300| DCD	|$LN23@mcbsp_Conf@7|
	DCD	0x40006d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ConfigTDMRxChannels| PROC

; 1310 : {

  00000		 |$LN23@mcbsp_Conf@7|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M37297|
  00004	e1a0e000	 mov         lr, r0

; 1311 :     DWORD channelToEnable = 0;
; 1312 :     UINT  nCount = 0;
; 1313 :     DWORD regVal = 0;
; 1314 : 
; 1315 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1316 : 
; 1317 :     // Channel selection among the available 128 channels
; 1318 :     // which is distributed equally among 8 blocks.
; 1319 :     //
; 1320 :     for (nCount= 0; nCount < pDevice->numOfRxChannels; nCount++)

  00008	e59e3148	 ldr         r3, [lr, #0x148]
  0000c	e3a05000	 mov         r5, #0
  00010	e3530000	 cmp         r3, #0
  00014	9a000061	 bls         |$LN12@mcbsp_Conf@7|
  00018	e59f7190	 ldr         r7, [pc, #0x190]
  0001c	e59f8188	 ldr         r8, [pc, #0x188]
  00020	e59f9180	 ldr         r9, [pc, #0x180]
  00024	e1a0600e	 mov         r6, lr
  00028	e3a0a001	 mov         r10, #1
  0002c	e3a0b001	 mov         r11, #1
  00030	e3a00001	 mov         r0, #1
  00034		 |$LL14@mcbsp_Conf@7|

; 1321 :         {
; 1322 :         switch ((pDevice->requestedRxChannels[nCount]) / MAX_CHANNEL_PER_BLOCK)

  00034	e596414c	 ldr         r4, [r6, #0x14C]
  00038	e1a03224	 mov         r3, r4, lsr #4
  0003c	e3530040	 cmp         r3, #0x40
  00040	8a00002e	 bhi         |$LN17@mcbsp_Conf@7|
  00044	0a000023	 beq         |$LN5@mcbsp_Conf@7|
  00048	e3530000	 cmp         r3, #0
  0004c	0a00001b	 beq         |$LN9@mcbsp_Conf@7|
  00050	e3530010	 cmp         r3, #0x10
  00054	0a000013	 beq         |$LN8@mcbsp_Conf@7|
  00058	e3530020	 cmp         r3, #0x20
  0005c	0a000007	 beq         |$LN7@mcbsp_Conf@7|
  00060	e3530030	 cmp         r3, #0x30
  00064	1a000048	 bne         |$LN13@mcbsp_Conf@7|

; 1350 : 
; 1351 :             case kMcBSP_Block3:
; 1352 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1353 :                     (kMcBSP_Block3 + MAX_CHANNEL_PER_BLOCK);
; 1354 : 
; 1355 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERD);

  00068	e59e101c	 ldr         r1, [lr, #0x1C]
  0006c	e204203f	 and         r2, r4, #0x3F
  00070	e5913050	 ldr         r3, [r1, #0x50]

; 1356 :                 regVal |= (1<<channelToEnable);

  00074	e183321a	 orr         r3, r3, r10, lsl r2

; 1357 :                 OUTREG32(&pDevice->pMcbspRegs->RCERD, regVal);

  00078	e5813050	 str         r3, [r1, #0x50]

; 1358 :                 break;

  0007c	ea000042	 b           |$LN13@mcbsp_Conf@7|
  00080		 |$LN7@mcbsp_Conf@7|

; 1341 : 
; 1342 :             case kMcBSP_Block2:
; 1343 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1344 :                     (kMcBSP_Block2 + MAX_CHANNEL_PER_BLOCK);

  00080	e0831794	 umull       r1, r3, r4, r7

; 1345 : 
; 1346 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERC);

  00084	e59e001c	 ldr         r0, [lr, #0x1C]

; 1347 :                 regVal |= (1<<channelToEnable);

  00088	e3a01001	 mov         r1, #1
  0008c	e1a032a3	 mov         r3, r3, lsr #5
  00090	e590204c	 ldr         r2, [r0, #0x4C]
  00094	e0833083	 add         r3, r3, r3, lsl #1
  00098	e0443203	 sub         r3, r4, r3, lsl #4
  0009c	e1823311	 orr         r3, r2, r1, lsl r3

; 1348 :                 OUTREG32(&pDevice->pMcbspRegs->RCERC, regVal);

  000a0	e580304c	 str         r3, [r0, #0x4C]

; 1349 :                 break;

  000a4	ea000037	 b           |$LN20@mcbsp_Conf@7|
  000a8		 |$LN8@mcbsp_Conf@7|

; 1332 : 
; 1333 :             case kMcBSP_Block1:
; 1334 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1335 :                     (kMcBSP_Block1 + MAX_CHANNEL_PER_BLOCK);
; 1336 : 
; 1337 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERB);

  000a8	e59e101c	 ldr         r1, [lr, #0x1C]
  000ac	e204201f	 and         r2, r4, #0x1F
  000b0	e591303c	 ldr         r3, [r1, #0x3C]

; 1338 :                 regVal |= (1<<channelToEnable);

  000b4	e183321b	 orr         r3, r3, r11, lsl r2

; 1339 :                 OUTREG32(&pDevice->pMcbspRegs->RCERB, regVal);

  000b8	e581303c	 str         r3, [r1, #0x3C]

; 1340 :                 break;

  000bc	ea000032	 b           |$LN13@mcbsp_Conf@7|
  000c0		 |$LN9@mcbsp_Conf@7|

; 1323 :             {
; 1324 :             case kMcBSP_Block0:
; 1325 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1326 :                     (kMcBSP_Block0 + MAX_CHANNEL_PER_BLOCK);
; 1327 : 
; 1328 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERA);

  000c0	e59e101c	 ldr         r1, [lr, #0x1C]
  000c4	e204200f	 and         r2, r4, #0xF
  000c8	e5913038	 ldr         r3, [r1, #0x38]

; 1329 :                 regVal |= (1<<channelToEnable);

  000cc	e1833210	 orr         r3, r3, r0, lsl r2

; 1330 :                 OUTREG32(&pDevice->pMcbspRegs->RCERA, regVal);

  000d0	e5813038	 str         r3, [r1, #0x38]

; 1331 :                 break;

  000d4	ea00002c	 b           |$LN13@mcbsp_Conf@7|
  000d8		 |$LN5@mcbsp_Conf@7|

; 1359 : 
; 1360 :             case kMcBSP_Block4:
; 1361 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1362 :                     (kMcBSP_Block4 + MAX_CHANNEL_PER_BLOCK);

  000d8	e0831894	 umull       r1, r3, r4, r8

; 1363 : 
; 1364 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERE);

  000dc	e59e001c	 ldr         r0, [lr, #0x1C]

; 1365 :                 regVal |= (1<<channelToEnable);

  000e0	e3a01001	 mov         r1, #1
  000e4	e1a03323	 mov         r3, r3, lsr #6
  000e8	e590205c	 ldr         r2, [r0, #0x5C]
  000ec	e0833103	 add         r3, r3, r3, lsl #2
  000f0	e0443203	 sub         r3, r4, r3, lsl #4
  000f4	e1823311	 orr         r3, r2, r1, lsl r3

; 1366 :                 OUTREG32(&pDevice->pMcbspRegs->RCERE, regVal);

  000f8	e580305c	 str         r3, [r0, #0x5C]

; 1367 :                 break;

  000fc	ea000021	 b           |$LN20@mcbsp_Conf@7|
  00100		 |$LN17@mcbsp_Conf@7|

; 1321 :         {
; 1322 :         switch ((pDevice->requestedRxChannels[nCount]) / MAX_CHANNEL_PER_BLOCK)

  00100	e3530050	 cmp         r3, #0x50
  00104	0a000016	 beq         |$LN4@mcbsp_Conf@7|
  00108	e3530060	 cmp         r3, #0x60
  0010c	0a000008	 beq         |$LN3@mcbsp_Conf@7|
  00110	e3530070	 cmp         r3, #0x70

; 1386 : 
; 1387 :             case kMcBSP_Block7:
; 1388 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1389 :                     (kMcBSP_Block7 + MAX_CHANNEL_PER_BLOCK);
; 1390 : 
; 1391 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERH);
; 1392 :                 regVal |= (1<<channelToEnable);
; 1393 :                 OUTREG32(&pDevice->pMcbspRegs->RCERH, regVal);
; 1394 :                 break;
; 1395 : 
; 1396 :             default:
; 1397 :                 DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR:mcbsp_ConfigTDMRxChannels: "
; 1398 :                     L"Invalid Channel Request\r\n"
; 1399 :                     ));
; 1400 :                 break;

  00114	1a00001c	 bne         |$LN13@mcbsp_Conf@7|
  00118	e59e101c	 ldr         r1, [lr, #0x1C]
  0011c	e204207f	 and         r2, r4, #0x7F
  00120	e3a04001	 mov         r4, #1
  00124	e5913070	 ldr         r3, [r1, #0x70]
  00128	e1833214	 orr         r3, r3, r4, lsl r2
  0012c	e5813070	 str         r3, [r1, #0x70]
  00130	ea000015	 b           |$LN13@mcbsp_Conf@7|
  00134		 |$LN3@mcbsp_Conf@7|

; 1376 :                 break;
; 1377 : 
; 1378 :             case kMcBSP_Block6:
; 1379 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1380 :                     (kMcBSP_Block6 + MAX_CHANNEL_PER_BLOCK);

  00134	e0821994	 umull       r1, r2, r4, r9

; 1381 : 
; 1382 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERG);

  00138	e59e001c	 ldr         r0, [lr, #0x1C]

; 1383 :                 regVal |= (1<<channelToEnable);

  0013c	e3a01001	 mov         r1, #1
  00140	e0443002	 sub         r3, r4, r2
  00144	e08230a3	 add         r3, r2, r3, lsr #1
  00148	e1a03323	 mov         r3, r3, lsr #6
  0014c	e590206c	 ldr         r2, [r0, #0x6C]
  00150	e0633183	 rsb         r3, r3, r3, lsl #3
  00154	e0443203	 sub         r3, r4, r3, lsl #4
  00158	e1823311	 orr         r3, r2, r1, lsl r3

; 1384 :                 OUTREG32(&pDevice->pMcbspRegs->RCERG, regVal);

  0015c	e580306c	 str         r3, [r0, #0x6C]

; 1385 :                 break;

  00160	ea000008	 b           |$LN20@mcbsp_Conf@7|
  00164		 |$LN4@mcbsp_Conf@7|

; 1368 : 
; 1369 :             case kMcBSP_Block5:
; 1370 :                 channelToEnable = pDevice->requestedRxChannels[nCount] %
; 1371 :                     (kMcBSP_Block5 + MAX_CHANNEL_PER_BLOCK);

  00164	e0831794	 umull       r1, r3, r4, r7

; 1372 : 
; 1373 :                 regVal = INREG32(&pDevice->pMcbspRegs->RCERF);

  00168	e59e001c	 ldr         r0, [lr, #0x1C]

; 1374 :                 regVal |= (1<<channelToEnable);

  0016c	e3a01001	 mov         r1, #1
  00170	e1a03323	 mov         r3, r3, lsr #6
  00174	e5902060	 ldr         r2, [r0, #0x60]
  00178	e0833083	 add         r3, r3, r3, lsl #1
  0017c	e0443283	 sub         r3, r4, r3, lsl #5
  00180	e1823311	 orr         r3, r2, r1, lsl r3

; 1375 :                 OUTREG32(&pDevice->pMcbspRegs->RCERF, regVal);

  00184	e5803060	 str         r3, [r0, #0x60]
  00188		 |$LN20@mcbsp_Conf@7|
  00188	e3a00001	 mov         r0, #1
  0018c		 |$LN13@mcbsp_Conf@7|
  0018c	e59e3148	 ldr         r3, [lr, #0x148]
  00190	e2855001	 add         r5, r5, #1
  00194	e2866004	 add         r6, r6, #4
  00198	e1550003	 cmp         r5, r3
  0019c	3affffa4	 bcc         |$LL14@mcbsp_Conf@7|
  001a0		 |$LN12@mcbsp_Conf@7|

; 1401 :             }
; 1402 :         }
; 1403 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1404 : }

  001a0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001a4	e12fff1e	 bx          lr
  001a8		 |$LN24@mcbsp_Conf@7|
  001a8		 |$LN25@mcbsp_Conf@7|
  001a8	24924925	 DCD         0x24924925
  001ac		 |$LN26@mcbsp_Conf@7|
  001ac	cccccccd	 DCD         0xcccccccd
  001b0		 |$LN27@mcbsp_Conf@7|
  001b0	aaaaaaab	 DCD         0xaaaaaaab
  001b4		 |$M37298|

			 ENDP  ; |mcbsp_ConfigTDMRxChannels|

	EXPORT	|mcbsp_SideToneEnable|

  00000			 AREA	 |.pdata|, PDATA
|$T37313| DCD	|$LN5@mcbsp_Side|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_SideToneEnable| PROC

; 1475 : {

  00000		 |$LN5@mcbsp_Side|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37310|

; 1476 :     DWORD regVal = 0;
; 1477 : 
; 1478 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1479 : 
; 1480 :     // Mapping the McBSP channels
; 1481 :     //
; 1482 :     pDevice->sideToneTxMapChannel0 = INREG32(&pDevice->pMcbspRegs->XCERA);

  00004	e590101c	 ldr         r1, [r0, #0x1C]

; 1483 :     pDevice->sideToneRxMapChannel0 = INREG32(&pDevice->pMcbspRegs->RCERA);
; 1484 : 
; 1485 :     pDevice->sideToneTxMapChannel1 = 0;

  00008	e3a0e000	 mov         lr, #0
  0000c	e5913040	 ldr         r3, [r1, #0x40]

; 1486 :     pDevice->sideToneRxMapChannel1 = 0;
; 1487 : 
; 1488 :     // Enable side tone from mcbsp register, map mcbsp input and output
; 1489 :     // channels
; 1490 :     //
; 1491 :     regVal = (MCBSP_SSELCR_SIDETONEEN |
; 1492 :         MCBSP_SSELCR_OCH0ASSIGN(pDevice->sideToneTxMapChannel0) |
; 1493 :         MCBSP_SSELCR_OCH1ASSIGN(pDevice->sideToneTxMapChannel1) |
; 1494 :         MCBSP_SSELCR_ICH0ASSIGN(pDevice->sideToneRxMapChannel0) |
; 1495 :         MCBSP_SSELCR_ICH1ASSIGN(pDevice->sideToneRxMapChannel1));
; 1496 : 
; 1497 :     OUTREG32(&pDevice->pMcbspRegs->SSELCR, regVal);

  00010	e580315c	 str         r3, [r0, #0x15C]
  00014	e5912038	 ldr         r2, [r1, #0x38]
  00018	e3833040	 orr         r3, r3, #0x40
  0001c	e580e164	 str         lr, [r0, #0x164]
  00020	e1823203	 orr         r3, r2, r3, lsl #4
  00024	e5802160	 str         r2, [r0, #0x160]
  00028	e580e168	 str         lr, [r0, #0x168]
  0002c	e58130bc	 str         r3, [r1, #0xBC]

; 1498 : 
; 1499 :     // Enable side tone in side tone register.
; 1500 :     //
; 1501 :     regVal = INREG32(&pDevice->pSideToneRegs->SSELCR);

  00030	e590206c	 ldr         r2, [r0, #0x6C]
  00034	e592302c	 ldr         r3, [r2, #0x2C]

; 1502 :     regVal |= ST_SSELCR_SIDETONEEN;

  00038	e3833001	 orr         r3, r3, #1

; 1503 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);

  0003c	e582302c	 str         r3, [r2, #0x2C]

; 1504 : 
; 1505 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1506 : }

  00040	e49de004	 ldr         lr, [sp], #4
  00044	e12fff1e	 bx          lr
  00048		 |$M37311|

			 ENDP  ; |mcbsp_SideToneEnable|

	EXPORT	|mcbsp_SideToneDisable|

  00000			 AREA	 |.pdata|, PDATA
|$T37321| DCD	|$LN5@mcbsp_Side@2|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_SideToneDisable| PROC

; 1516 : {

  00000		 |$LN5@mcbsp_Side@2|
  00000		 |$M37318|

; 1517 :     DWORD regVal = 0;
; 1518 : 
; 1519 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1520 : 
; 1521 :     // API to disable side tone
; 1522 :     //
; 1523 :     OUTREG32(&pDevice->pMcbspRegs->SSELCR, regVal);

  00000	e590301c	 ldr         r3, [r0, #0x1C]
  00004	e3a02000	 mov         r2, #0
  00008	e58320bc	 str         r2, [r3, #0xBC]

; 1524 :     regVal = 0;
; 1525 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);

  0000c	e590306c	 ldr         r3, [r0, #0x6C]
  00010	e583202c	 str         r2, [r3, #0x2C]

; 1526 : 
; 1527 :     // Mute
; 1528 :     //
; 1529 :     regVal = 0;
; 1530 :     OUTREG32(&pDevice->pSideToneRegs->SGAINCR, regVal);

  00014	e590306c	 ldr         r3, [r0, #0x6C]
  00018	e5832024	 str         r2, [r3, #0x24]

; 1531 : 
; 1532 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1533 : }

  0001c	e12fff1e	 bx          lr
  00020		 |$M37319|

			 ENDP  ; |mcbsp_SideToneDisable|

	EXPORT	|mcbsp_SideToneWriteReset|

  00000			 AREA	 |.pdata|, PDATA
|$T37332| DCD	|$LN5@mcbsp_Side@3|
	DCD	0x40000d00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_SideToneWriteReset| PROC

; 1617 : {

  00000		 |$LN5@mcbsp_Side@3|
  00000		 |$M37329|

; 1618 :     DWORD regVal = 0;
; 1619 : 
; 1620 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1621 : 
; 1622 :     // Reset Coeff write done bit which was set for previous write
; 1623 :     //
; 1624 :     regVal = INREG32(&pDevice->pSideToneRegs->SSELCR);

  00000	e590206c	 ldr         r2, [r0, #0x6C]

; 1625 :     regVal &= ~(ST_SSELCR_COEFFWRDONE);
; 1626 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);
; 1627 : 
; 1628 :     // API to Reset Coeff register for write process
; 1629 :     //
; 1630 :     regVal = INREG32(&pDevice->pSideToneRegs->SSELCR);
; 1631 :     regVal &= ~(ST_SSELCR_COEFFWREN);

  00004	e592302c	 ldr         r3, [r2, #0x2C]
  00008	e3c33004	 bic         r3, r3, #4
  0000c	e582302c	 str         r3, [r2, #0x2C]
  00010	e590206c	 ldr         r2, [r0, #0x6C]
  00014	e592302c	 ldr         r3, [r2, #0x2C]
  00018	e3c33002	 bic         r3, r3, #2

; 1632 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);

  0001c	e582302c	 str         r3, [r2, #0x2C]

; 1633 : 
; 1634 :     regVal = INREG32(&pDevice->pSideToneRegs->SSELCR);

  00020	e590206c	 ldr         r2, [r0, #0x6C]
  00024	e592302c	 ldr         r3, [r2, #0x2C]

; 1635 :     regVal |= ST_SSELCR_COEFFWREN;

  00028	e3833002	 orr         r3, r3, #2

; 1636 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);

  0002c	e582302c	 str         r3, [r2, #0x2C]

; 1637 : 
; 1638 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1639 : }

  00030	e12fff1e	 bx          lr
  00034		 |$M37330|

			 ENDP  ; |mcbsp_SideToneWriteReset|

	EXPORT	|mcbsp_SideToneReadReset|

  00000			 AREA	 |.pdata|, PDATA
|$T37343| DCD	|$LN5@mcbsp_Side@4|
	DCD	0x40000d00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_SideToneReadReset| PROC

; 1649 : {

  00000		 |$LN5@mcbsp_Side@4|
  00000		 |$M37340|

; 1650 :     DWORD regVal = 0;
; 1651 : 
; 1652 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1653 : 
; 1654 :     // Reset Coeff write done bit which was set for previous read
; 1655 :     //
; 1656 :     regVal = INREG32(&pDevice->pSideToneRegs->SSELCR);

  00000	e590206c	 ldr         r2, [r0, #0x6C]

; 1657 :     regVal &= ~(ST_SSELCR_COEFFWRDONE);
; 1658 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);
; 1659 : 
; 1660 :     // API to Reset Coeff register for read process
; 1661 :     //
; 1662 :     regVal = INREG32(&pDevice->pSideToneRegs->SSELCR);
; 1663 :     regVal |= ST_SSELCR_COEFFWREN;
; 1664 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);
; 1665 : 
; 1666 :     regVal = INREG32(&pDevice->pSideToneRegs->SSELCR);
; 1667 :     regVal &= ~(ST_SSELCR_COEFFWREN);

  00004	e592302c	 ldr         r3, [r2, #0x2C]
  00008	e3c33004	 bic         r3, r3, #4
  0000c	e582302c	 str         r3, [r2, #0x2C]
  00010	e590206c	 ldr         r2, [r0, #0x6C]
  00014	e592302c	 ldr         r3, [r2, #0x2C]
  00018	e3833002	 orr         r3, r3, #2
  0001c	e582302c	 str         r3, [r2, #0x2C]
  00020	e590206c	 ldr         r2, [r0, #0x6C]
  00024	e592302c	 ldr         r3, [r2, #0x2C]
  00028	e3c33002	 bic         r3, r3, #2

; 1668 :     OUTREG32(&pDevice->pSideToneRegs->SSELCR, regVal);

  0002c	e582302c	 str         r3, [r2, #0x2C]

; 1669 : 
; 1670 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1671 : }

  00030	e12fff1e	 bx          lr
  00034		 |$M37341|

			 ENDP  ; |mcbsp_SideToneReadReset|

	EXPORT	|mcbsp_SideToneAutoIdle|

  00000			 AREA	 |.pdata|, PDATA
|$T37351| DCD	|$LN5@mcbsp_Side@5|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_SideToneAutoIdle| PROC

; 1681 : {

  00000		 |$LN5@mcbsp_Side@5|
  00000		 |$M37348|

; 1682 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1683 : 
; 1684 :     // API for sidetone to enable/disable auto idle mode
; 1685 :     //
; 1686 :     OUTREG32(&pDevice->pSideToneRegs->SYSCONFIG, ST_SYSCONFIG_AUTOIDLE);

  00000	e590306c	 ldr         r3, [r0, #0x6C]
  00004	e3a02001	 mov         r2, #1
  00008	e5832010	 str         r2, [r3, #0x10]

; 1687 : 
; 1688 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1689 : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M37349|

			 ENDP  ; |mcbsp_SideToneAutoIdle|

	EXPORT	|mcbsp_SideToneInterruptEnable|

  00000			 AREA	 |.pdata|, PDATA
|$T37359| DCD	|$LN5@mcbsp_Side@6|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_SideToneInterruptEnable| PROC

; 1699 : {

  00000		 |$LN5@mcbsp_Side@6|
  00000		 |$M37356|

; 1700 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1701 : 
; 1702 :     // API to enable sidetone interrupt
; 1703 :     //
; 1704 :     OUTREG32(&pDevice->pSideToneRegs->IRQENABLE, ST_IRQENABLE_OVRRERROREN);

  00000	e590306c	 ldr         r3, [r0, #0x6C]
  00004	e3a02001	 mov         r2, #1
  00008	e583201c	 str         r2, [r3, #0x1C]

; 1705 : 
; 1706 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1707 : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M37357|

			 ENDP  ; |mcbsp_SideToneInterruptEnable|

	EXPORT	|mcbsp_SideToneInterruptStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T37367| DCD	|$LN5@mcbsp_Side@7|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_SideToneInterruptStatus| PROC

; 1717 : {

  00000		 |$LN5@mcbsp_Side@7|
  00000		 |$M37364|

; 1718 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1719 : 
; 1720 :     // API to read interrupt status.
; 1721 :     //
; 1722 :     INREG32(&pDevice->pSideToneRegs->IRQSTATUS);

  00000	e590306c	 ldr         r3, [r0, #0x6C]
  00004	e5933018	 ldr         r3, [r3, #0x18]

; 1723 : 
; 1724 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1725 : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M37365|

			 ENDP  ; |mcbsp_SideToneInterruptStatus|

	EXPORT	|mcbsp_SideToneResetInterrupt|

  00000			 AREA	 |.pdata|, PDATA
|$T37375| DCD	|$LN5@mcbsp_Side@8|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_SideToneResetInterrupt| PROC

; 1735 : {

  00000		 |$LN5@mcbsp_Side@8|
  00000		 |$M37372|

; 1736 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1737 : 
; 1738 :     // API to reset IRQ Status register
; 1739 :     //
; 1740 :     OUTREG32(&pDevice->pSideToneRegs->IRQSTATUS, ST_IRQSTATUS_OVRRERROR);

  00000	e590306c	 ldr         r3, [r0, #0x6C]
  00004	e3a02001	 mov         r2, #1
  00008	e5832018	 str         r2, [r3, #0x18]

; 1741 : 
; 1742 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1743 : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M37373|

			 ENDP  ; |mcbsp_SideToneResetInterrupt|

	EXPORT	|mcbsp_DumpReg|
	EXPORT	|??_C@_1CE@NBPNEGE@?$AAS?$AAP?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@PMBNDED@?$AAS?$AAP?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@NNPBCEOM@?$AAR?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@JJFAABPE@?$AAR?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@FMMBDKKJ@?$AAX?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@BIGABPLB@?$AAX?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@DFJBGMCC@?$AAS?$AAR?$AAG?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@DHEPGLAF@?$AAS?$AAR?$AAG?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@BAKANEPH@?$AAM?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@FEABPBOP@?$AAM?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@CEEMHBJF@?$AAP?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@FIINDDBJ@?$AAT?$AAH?$AAR?$AAS?$AAH?$AA1?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@KKNKNOOB@?$AAT?$AAH?$AAR?$AAS?$AAH?$AA2?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@BFHPMMGC@?$AAW?$AAA?$AAK?$AAE?$AAU?$AAP?$AAE?$AAN?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@EGIBJING@?$AAS?$AAY?$AAS?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T37417| DCD	|$LN37@mcbsp_Dump|
	DCD	0x40004301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NBPNEGE@?$AAS?$AAP?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "C", 0x0, "R", 0x0, "2", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@PMBNDED@?$AAS?$AAP?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "C", 0x0, "R", 0x0, "1", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NNPBCEOM@?$AAR?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "C", 0x0, "R", 0x0, "2", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@JJFAABPE@?$AAR?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "C", 0x0, "R", 0x0, "1", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FMMBDKKJ@?$AAX?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "X"
	DCB	0x0, "C", 0x0, "R", 0x0, "2", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@BIGABPLB@?$AAX?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "X"
	DCB	0x0, "C", 0x0, "R", 0x0, "1", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@DFJBGMCC@?$AAS?$AAR?$AAG?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "R", 0x0, "G", 0x0, "R", 0x0, "2", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@DHEPGLAF@?$AAS?$AAR?$AAG?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "R", 0x0, "G", 0x0, "R", 0x0, "1", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@BAKANEPH@?$AAM?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "C", 0x0, "R", 0x0, "2", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FEABPBOP@?$AAM?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "C", 0x0, "R", 0x0, "1", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@CEEMHBJF@?$AAP?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "C", 0x0, "R", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FIINDDBJ@?$AAT?$AAH?$AAR?$AAS?$AAH?$AA1?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "H", 0x0, "R", 0x0, "S", 0x0, "H", 0x0, "1", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@KKNKNOOB@?$AAT?$AAH?$AAR?$AAS?$AAH?$AA2?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "H", 0x0, "R", 0x0, "S", 0x0, "H", 0x0, "2", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@BFHPMMGC@?$AAW?$AAA?$AAK?$AAE?$AAU?$AAP?$AAE?$AAN?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "W"
	DCB	0x0, "A", 0x0, "K", 0x0, "E", 0x0, "U", 0x0, "P", 0x0, "E"
	DCB	0x0, "N", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@EGIBJING@?$AAS?$AAY?$AAS?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "Y", 0x0, "S", 0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F"
	DCB	0x0, "I", 0x0, "G", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_DumpReg| PROC

; 1755 : {

  00000		 |$LN37@mcbsp_Dump|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37414|
  00004	e1a03000	 mov         r3, r0

; 1756 :     OMAP35XX_MCBSP_REGS_t *pMcbspRegs = pDevice->pMcbspRegs;
; 1757 : 
; 1758 :     RETAILMSG(1,(szMsg));

  00008	e593401c	 ldr         r4, [r3, #0x1C]
  0000c	e1a00001	 mov         r0, r1
  00010	eb000000	 bl          NKDbgPrintfW

; 1759 :     RETAILMSG(1,(TEXT("SPCR2    : %08x\r\n"), INREG32(&pMcbspRegs->SPCR2)));

  00014	e5941010	 ldr         r1, [r4, #0x10]
  00018	e59f00e8	 ldr         r0, [pc, #0xE8]
  0001c	eb000000	 bl          NKDbgPrintfW

; 1760 :     RETAILMSG(1,(TEXT("SPCR1    : %08x\r\n"), INREG32(&pMcbspRegs->SPCR1)));

  00020	e5941014	 ldr         r1, [r4, #0x14]
  00024	e59f00d8	 ldr         r0, [pc, #0xD8]
  00028	eb000000	 bl          NKDbgPrintfW

; 1761 :     RETAILMSG(1,(TEXT("RCR2     : %08x\r\n"), INREG32(&pMcbspRegs->RCR2)));

  0002c	e5941018	 ldr         r1, [r4, #0x18]
  00030	e59f00c8	 ldr         r0, [pc, #0xC8]
  00034	eb000000	 bl          NKDbgPrintfW

; 1762 :     RETAILMSG(1,(TEXT("RCR1     : %08x\r\n"), INREG32(&pMcbspRegs->RCR1)));

  00038	e594101c	 ldr         r1, [r4, #0x1C]
  0003c	e59f00b8	 ldr         r0, [pc, #0xB8]
  00040	eb000000	 bl          NKDbgPrintfW

; 1763 :     RETAILMSG(1,(TEXT("XCR2     : %08x\r\n"), INREG32(&pMcbspRegs->XCR2)));

  00044	e5941020	 ldr         r1, [r4, #0x20]
  00048	e59f00a8	 ldr         r0, [pc, #0xA8]
  0004c	eb000000	 bl          NKDbgPrintfW

; 1764 :     RETAILMSG(1,(TEXT("XCR1     : %08x\r\n"), INREG32(&pMcbspRegs->XCR1)));

  00050	e5941024	 ldr         r1, [r4, #0x24]
  00054	e59f0098	 ldr         r0, [pc, #0x98]
  00058	eb000000	 bl          NKDbgPrintfW

; 1765 :     RETAILMSG(1,(TEXT("SRGR2    : %08x\r\n"), INREG32(&pMcbspRegs->SRGR2)));

  0005c	e5941028	 ldr         r1, [r4, #0x28]
  00060	e59f0088	 ldr         r0, [pc, #0x88]
  00064	eb000000	 bl          NKDbgPrintfW

; 1766 :     RETAILMSG(1,(TEXT("SRGR1    : %08x\r\n"), INREG32(&pMcbspRegs->SRGR1)));

  00068	e594102c	 ldr         r1, [r4, #0x2C]
  0006c	e59f0078	 ldr         r0, [pc, #0x78]
  00070	eb000000	 bl          NKDbgPrintfW

; 1767 :     RETAILMSG(1,(TEXT("MCR2     : %08x\r\n"), INREG32(&pMcbspRegs->MCR2)));

  00074	e5941030	 ldr         r1, [r4, #0x30]
  00078	e59f0068	 ldr         r0, [pc, #0x68]
  0007c	eb000000	 bl          NKDbgPrintfW

; 1768 :     RETAILMSG(1,(TEXT("MCR1     : %08x\r\n"), INREG32(&pMcbspRegs->MCR1)));

  00080	e5941034	 ldr         r1, [r4, #0x34]
  00084	e59f0058	 ldr         r0, [pc, #0x58]
  00088	eb000000	 bl          NKDbgPrintfW

; 1769 :     RETAILMSG(1,(TEXT("PCR      : %08x\r\n"), INREG32(&pMcbspRegs->PCR)));

  0008c	e5941048	 ldr         r1, [r4, #0x48]
  00090	e59f0048	 ldr         r0, [pc, #0x48]
  00094	eb000000	 bl          NKDbgPrintfW

; 1770 :     RETAILMSG(1,(TEXT("THRSH1   : %08x\r\n"), INREG32(&pMcbspRegs->THRSH1)));

  00098	e5941094	 ldr         r1, [r4, #0x94]
  0009c	e59f0038	 ldr         r0, [pc, #0x38]
  000a0	eb000000	 bl          NKDbgPrintfW

; 1771 :     RETAILMSG(1,(TEXT("THRSH2   : %08x\r\n"), INREG32(&pMcbspRegs->THRSH2)));

  000a4	e5941090	 ldr         r1, [r4, #0x90]
  000a8	e59f0028	 ldr         r0, [pc, #0x28]
  000ac	eb000000	 bl          NKDbgPrintfW

; 1772 :     RETAILMSG(1,(TEXT("WAKEUPEN : %08x\r\n"), INREG32(&pMcbspRegs->WAKEUPEN)));

  000b0	e59410a8	 ldr         r1, [r4, #0xA8]
  000b4	e59f0018	 ldr         r0, [pc, #0x18]
  000b8	eb000000	 bl          NKDbgPrintfW

; 1773 :     RETAILMSG(1,(TEXT("SYSCONFIG : %08x\r\n"), INREG32(&pMcbspRegs->SYSCONFIG)));

  000bc	e594108c	 ldr         r1, [r4, #0x8C]
  000c0	e59f0008	 ldr         r0, [pc, #8]
  000c4	eb000000	 bl          NKDbgPrintfW

; 1774 : 
; 1775 : }

  000c8	e8bd4010	 ldmia       sp!, {r4, lr}
  000cc	e12fff1e	 bx          lr
  000d0		 |$LN38@mcbsp_Dump|
  000d0		 |$LN39@mcbsp_Dump|
  000d0	00000000	 DCD         |??_C@_1CG@EGIBJING@?$AAS?$AAY?$AAS?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000d4		 |$LN40@mcbsp_Dump|
  000d4	00000000	 DCD         |??_C@_1CE@BFHPMMGC@?$AAW?$AAA?$AAK?$AAE?$AAU?$AAP?$AAE?$AAN?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000d8		 |$LN41@mcbsp_Dump|
  000d8	00000000	 DCD         |??_C@_1CE@KKNKNOOB@?$AAT?$AAH?$AAR?$AAS?$AAH?$AA2?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000dc		 |$LN42@mcbsp_Dump|
  000dc	00000000	 DCD         |??_C@_1CE@FIINDDBJ@?$AAT?$AAH?$AAR?$AAS?$AAH?$AA1?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000e0		 |$LN43@mcbsp_Dump|
  000e0	00000000	 DCD         |??_C@_1CE@CEEMHBJF@?$AAP?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000e4		 |$LN44@mcbsp_Dump|
  000e4	00000000	 DCD         |??_C@_1CE@FEABPBOP@?$AAM?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000e8		 |$LN45@mcbsp_Dump|
  000e8	00000000	 DCD         |??_C@_1CE@BAKANEPH@?$AAM?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000ec		 |$LN46@mcbsp_Dump|
  000ec	00000000	 DCD         |??_C@_1CE@DHEPGLAF@?$AAS?$AAR?$AAG?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000f0		 |$LN47@mcbsp_Dump|
  000f0	00000000	 DCD         |??_C@_1CE@DFJBGMCC@?$AAS?$AAR?$AAG?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000f4		 |$LN48@mcbsp_Dump|
  000f4	00000000	 DCD         |??_C@_1CE@BIGABPLB@?$AAX?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000f8		 |$LN49@mcbsp_Dump|
  000f8	00000000	 DCD         |??_C@_1CE@FMMBDKKJ@?$AAX?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000fc		 |$LN50@mcbsp_Dump|
  000fc	00000000	 DCD         |??_C@_1CE@JJFAABPE@?$AAR?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00100		 |$LN51@mcbsp_Dump|
  00100	00000000	 DCD         |??_C@_1CE@NNPBCEOM@?$AAR?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00104		 |$LN52@mcbsp_Dump|
  00104	00000000	 DCD         |??_C@_1CE@PMBNDED@?$AAS?$AAP?$AAC?$AAR?$AA1?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00108		 |$LN53@mcbsp_Dump|
  00108	00000000	 DCD         |??_C@_1CE@NBPNEGE@?$AAS?$AAP?$AAC?$AAR?$AA2?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0010c		 |$M37415|

			 ENDP  ; |mcbsp_DumpReg|

	EXPORT	|mcbsp_ConfigCommonRegisters|

  00000			 AREA	 |.pdata|, PDATA
|$T37453| DCD	|$LN14@mcbsp_Conf@8|
	DCD	0x40002401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ConfigCommonRegisters| PROC

; 54   : {

  00000		 |$LN14@mcbsp_Conf@8|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37450|
  00004	e1a04000	 mov         r4, r0

; 55   :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 56   : 
; 57   :     // initialize shadow registers
; 58   :     //
; 59   :     mcbsp_ResetShadowRegisters(pDevice);

  00008	eb000000	 bl          mcbsp_ResetShadowRegisters

; 60   : 
; 61   :     // overwrite default configuration with registry values
; 62   :     //
; 63   :     if (pDevice->useRegistryForMcbsp)

  0000c	e59430c0	 ldr         r3, [r4, #0xC0]
  00010	e3530000	 cmp         r3, #0

; 64   :         {
; 65   :         mcbsp_GetRegistryValues(pDevice);

  00014	11a00004	 movne       r0, r4
  00018	1b000000	 blne        mcbsp_GetRegistryValues

; 66   :         }
; 67   : 
; 68   :     mcbsp_ResetSampleRateGenerator(pDevice);

  0001c	e5943020	 ldr         r3, [r4, #0x20]
  00020	e594201c	 ldr         r2, [r4, #0x1C]

; 69   :     mcbsp_ResetTransmitter(pDevice);
; 70   :     mcbsp_ResetReceiver(pDevice);
; 71   : 
; 72   :     mcbsp_ConfigureSampleRateGenerator(pDevice);

  00024	e1a00004	 mov         r0, r4
  00028	e3c330c0	 bic         r3, r3, #0xC0
  0002c	e5843020	 str         r3, [r4, #0x20]
  00030	e5823010	 str         r3, [r2, #0x10]
  00034	e5943020	 ldr         r3, [r4, #0x20]
  00038	e594201c	 ldr         r2, [r4, #0x1C]
  0003c	e3c33001	 bic         r3, r3, #1
  00040	e5843020	 str         r3, [r4, #0x20]
  00044	e5823010	 str         r3, [r2, #0x10]
  00048	e5943024	 ldr         r3, [r4, #0x24]
  0004c	e594201c	 ldr         r2, [r4, #0x1C]
  00050	e3c33001	 bic         r3, r3, #1
  00054	e5843024	 str         r3, [r4, #0x24]
  00058	e5823014	 str         r3, [r2, #0x14]
  0005c	eb000000	 bl          mcbsp_ConfigureSampleRateGenerator

; 73   :     mcbsp_ConfigureTransmitter(pDevice);

  00060	e1a00004	 mov         r0, r4
  00064	eb000000	 bl          mcbsp_ConfigureTransmitter

; 74   :     mcbsp_ConfigureReceiver(pDevice);

  00068	e1a00004	 mov         r0, r4
  0006c	eb000000	 bl          mcbsp_ConfigureReceiver

; 75   :     mcbsp_ClearIRQStatus(pDevice);

  00070	e594201c	 ldr         r2, [r4, #0x1C]
  00074	e3a03cff	 mov         r3, #0xFF, 24
  00078	e38330ff	 orr         r3, r3, #0xFF

; 76   :     mcbsp_UpdateRegisters(pDevice);

  0007c	e1a00004	 mov         r0, r4
  00080	e58230a0	 str         r3, [r2, #0xA0]
  00084	eb000000	 bl          mcbsp_UpdateRegisters

; 77   : 
; 78   :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 79   : }

  00088	e8bd4010	 ldmia       sp!, {r4, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$M37451|

			 ENDP  ; |mcbsp_ConfigCommonRegisters|

	EXPORT	|mcbsp_ConfigTDMProfile|

  00000			 AREA	 |.pdata|, PDATA
|$T37468| DCD	|$LN10@mcbsp_Conf@9|
	DCD	0x40003501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_ConfigTDMProfile| PROC

; 1109 : {

  00000		 |$LN10@mcbsp_Conf@9|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37465|
  00004	e1a04000	 mov         r4, r0

; 1110 :     DWORD regVal = 0;
; 1111 : 
; 1112 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1113 : 
; 1114 :     // Configure McBSP phase TDM profile should be configured in single phase
; 1115 :     // only, reason refer TRM McBSP TDM mode section.
; 1116 :     //
; 1117 :     regVal = INREG32(&pDevice->pMcbspRegs->XCR2);

  00008	e594201c	 ldr         r2, [r4, #0x1C]
  0000c	e5923020	 ldr         r3, [r2, #0x20]

; 1118 :     regVal |= MCBSP_PHASE_SINGLE;
; 1119 :     OUTREG32(&pDevice->pMcbspRegs->XCR2, regVal);

  00010	e5823020	 str         r3, [r2, #0x20]

; 1120 : 
; 1121 :     regVal = INREG32(&pDevice->pMcbspRegs->RCR2);

  00014	e594201c	 ldr         r2, [r4, #0x1C]
  00018	e5923018	 ldr         r3, [r2, #0x18]

; 1122 :     regVal |= MCBSP_PHASE_SINGLE;
; 1123 :     OUTREG32(&pDevice->pMcbspRegs->RCR2, regVal);

  0001c	e5823018	 str         r3, [r2, #0x18]

; 1124 : 
; 1125 :     // Configure frame length and word length
; 1126 :     //
; 1127 :     regVal = (MCBSP_FRAME_LENGTH (pDevice->tdmWordsPerFrame) |
; 1128 :         MCBSP_WORD_LENGTH (kMcBSP_Word_Length_16));

  00020	e594312c	 ldr         r3, [r4, #0x12C]

; 1129 :     OUTREG32(&pDevice->pMcbspRegs->XCR1, regVal);

  00024	e594201c	 ldr         r2, [r4, #0x1C]
  00028	e2433001	 sub         r3, r3, #1
  0002c	e203307f	 and         r3, r3, #0x7F
  00030	e1a03403	 mov         r3, r3, lsl #8
  00034	e3833040	 orr         r3, r3, #0x40
  00038	e5823024	 str         r3, [r2, #0x24]

; 1130 : 
; 1131 :     regVal = (MCBSP_FRAME_LENGTH (pDevice->tdmWordsPerFrame) |
; 1132 :         MCBSP_WORD_LENGTH (kMcBSP_Word_Length_16));

  0003c	e594312c	 ldr         r3, [r4, #0x12C]

; 1133 :     OUTREG32(&pDevice->pMcbspRegs->RCR1, regVal);

  00040	e594201c	 ldr         r2, [r4, #0x1C]
  00044	e2433001	 sub         r3, r3, #1
  00048	e203307f	 and         r3, r3, #0x7F
  0004c	e1a03403	 mov         r3, r3, lsl #8
  00050	e3833040	 orr         r3, r3, #0x40
  00054	e582301c	 str         r3, [r2, #0x1C]

; 1134 : 
; 1135 :     // Configure partition mode, multichannel selection
; 1136 :     //
; 1137 :     if ( pDevice->partitionMode == kMcBSP_2PartitionMode)

  00058	e5943130	 ldr         r3, [r4, #0x130]
  0005c	e3530000	 cmp         r3, #0
  00060	1a000009	 bne         |$LN4@mcbsp_Conf@9|

; 1138 :         {
; 1139 :         // Rx partition mode and multichannel config
; 1140 :         //
; 1141 :         regVal = INREG32(&pDevice->pMcbspRegs->MCR1);

  00064	e594201c	 ldr         r2, [r4, #0x1C]

; 1142 : 
; 1143 :         regVal &= ~(MCBSP_PARTITION_MODE);

  00068	e5923034	 ldr         r3, [r2, #0x34]
  0006c	e3c33c02	 bic         r3, r3, #2, 24

; 1144 :         regVal |= (MCBSP_PARTITION_A_BLOCK(0) |
; 1145 :             MCBSP_PARTITION_B_BLOCK(0) |
; 1146 :             MCBSP_MCR1_RMCM_RX);

  00070	e3833001	 orr         r3, r3, #1

; 1147 : 
; 1148 :         OUTREG32(&pDevice->pMcbspRegs->MCR1, regVal);

  00074	e5823034	 str         r3, [r2, #0x34]

; 1149 : 
; 1150 :         // Tx partition mode and multichannel config
; 1151 :         //
; 1152 :         regVal = INREG32(&pDevice->pMcbspRegs->MCR2);

  00078	e594201c	 ldr         r2, [r4, #0x1C]
  0007c	e5923030	 ldr         r3, [r2, #0x30]

; 1153 : 
; 1154 :         regVal &= ~(MCBSP_PARTITION_MODE);

  00080	e3c33c02	 bic         r3, r3, #2, 24

; 1155 :         regVal |= (MCBSP_PARTITION_A_BLOCK(0) |
; 1156 :             MCBSP_PARTITION_B_BLOCK(0) |
; 1157 :             MCBSP_MCR2_RMCM_TX(1));

  00084	e3833001	 orr         r3, r3, #1

; 1158 : 
; 1159 :         OUTREG32(&pDevice->pMcbspRegs->MCR2, regVal);

  00088	ea00000a	 b           |$LN7@mcbsp_Conf@9|
  0008c		 |$LN4@mcbsp_Conf@9|

; 1160 :         }
; 1161 :     else if (pDevice->partitionMode == kMcBSP_8PartitionMode)

  0008c	e3530001	 cmp         r3, #1
  00090	1a000009	 bne         |$LN2@mcbsp_Conf@9|

; 1162 :         {
; 1163 :         // Rx partition mode and multichannel config
; 1164 :         //
; 1165 :         regVal = INREG32(&pDevice->pMcbspRegs->MCR1);

  00094	e594201c	 ldr         r2, [r4, #0x1C]

; 1166 : 
; 1167 :         regVal |= (MCBSP_PARTITION_MODE);
; 1168 :         regVal |= (MCBSP_PARTITION_A_BLOCK(0) |
; 1169 :             MCBSP_PARTITION_B_BLOCK(0) |
; 1170 :             MCBSP_MCR1_RMCM_RX);

  00098	e3a03c02	 mov         r3, #2, 24
  0009c	e3831001	 orr         r1, r3, #1
  000a0	e5923034	 ldr         r3, [r2, #0x34]
  000a4	e1833001	 orr         r3, r3, r1

; 1171 : 
; 1172 :         OUTREG32(&pDevice->pMcbspRegs->MCR1, regVal);

  000a8	e5823034	 str         r3, [r2, #0x34]

; 1173 : 
; 1174 :         // Tx partition mode and multichannel config
; 1175 :         //
; 1176 :         regVal = INREG32(&pDevice->pMcbspRegs->MCR2);

  000ac	e594201c	 ldr         r2, [r4, #0x1C]
  000b0	e5923030	 ldr         r3, [r2, #0x30]

; 1177 : 
; 1178 :         regVal |= (MCBSP_PARTITION_MODE);
; 1179 :         regVal |= (MCBSP_PARTITION_A_BLOCK(0) |
; 1180 :             MCBSP_PARTITION_B_BLOCK(0) |
; 1181 :             MCBSP_MCR2_RMCM_TX(1));

  000b4	e1833001	 orr         r3, r3, r1
  000b8		 |$LN7@mcbsp_Conf@9|

; 1182 : 
; 1183 :         OUTREG32(&pDevice->pMcbspRegs->MCR2, regVal);

  000b8	e5823030	 str         r3, [r2, #0x30]
  000bc		 |$LN2@mcbsp_Conf@9|

; 1184 :         }
; 1185 :     else
; 1186 :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: mcbsp_ConfigTDMProfile: "
; 1187 :                 L"Partition Mode unknown\r\n"
; 1188 :                 ));
; 1189 : 
; 1190 :     // Enable the requested channels for Tx/Rx
; 1191 :     //
; 1192 :     mcbsp_ConfigTDMTxChannels(pDevice);

  000bc	e1a00004	 mov         r0, r4
  000c0	eb000000	 bl          mcbsp_ConfigTDMTxChannels

; 1193 :     mcbsp_ConfigTDMRxChannels(pDevice);

  000c4	e1a00004	 mov         r0, r4
  000c8	eb000000	 bl          mcbsp_ConfigTDMRxChannels

; 1194 : 
; 1195 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1196 : }

  000cc	e8bd4010	 ldmia       sp!, {r4, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$M37466|

			 ENDP  ; |mcbsp_ConfigTDMProfile|

	EXPORT	|mcbsp_SideToneWriteFIRCoeff|

  00000			 AREA	 |.pdata|, PDATA
|$T37494| DCD	|$LN15@mcbsp_Side@9|
	DCD	0x40003101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_SideToneWriteFIRCoeff| PROC

; 1543 : {

  00000		 |$LN15@mcbsp_Side@9|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37491|

; 1545 : 
; 1546 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1547 : 
; 1548 :     // Disable side tone before writing FIR coefficients reason refer TRM
; 1549 :     //
; 1550 :     mcbsp_SideToneDisable(pDevice);

  00004	e590301c	 ldr         r3, [r0, #0x1C]
  00008	e3a0e000	 mov         lr, #0

; 1551 : 
; 1552 :     // write reset before FIR coeff is written
; 1553 :     //
; 1554 :     mcbsp_SideToneWriteReset(pDevice);

  0000c	e583e0bc	 str         lr, [r3, #0xBC]
  00010	e590306c	 ldr         r3, [r0, #0x6C]
  00014	e583e02c	 str         lr, [r3, #0x2C]
  00018	e590306c	 ldr         r3, [r0, #0x6C]
  0001c	e583e024	 str         lr, [r3, #0x24]
  00020	e590206c	 ldr         r2, [r0, #0x6C]
  00024	e592302c	 ldr         r3, [r2, #0x2C]
  00028	e3c33004	 bic         r3, r3, #4
  0002c	e582302c	 str         r3, [r2, #0x2C]
  00030	e590206c	 ldr         r2, [r0, #0x6C]
  00034	e592302c	 ldr         r3, [r2, #0x2C]
  00038	e3c33002	 bic         r3, r3, #2
  0003c	e582302c	 str         r3, [r2, #0x2C]
  00040	e590206c	 ldr         r2, [r0, #0x6C]
  00044	e592302c	 ldr         r3, [r2, #0x2C]
  00048	e3833002	 orr         r3, r3, #2
  0004c	e582302c	 str         r3, [r2, #0x2C]

; 1555 : 
; 1556 :     // Write FIR coefficients
; 1557 :     //
; 1558 :     while ((INREG32(&pDevice->pSideToneRegs->SSELCR) &
; 1559 :         ST_SSELCR_COEFFWRDONE) == 0)

  00050	e590306c	 ldr         r3, [r0, #0x6C]
  00054	e593302c	 ldr         r3, [r3, #0x2C]
  00058	e3130004	 tst         r3, #4
  0005c	1a000008	 bne         |$LN1@mcbsp_Side@9|

; 1544 :     DWORD nCount = 0;

  00060	e1a01000	 mov         r1, r0
  00064		 |$LL2@mcbsp_Side@9|

; 1560 :         {
; 1561 :         OUTREG32(&pDevice->pSideToneRegs->SFIRCR,
; 1562 :             ST_SFIRCR_FIRCOEFF(pDevice->sideToneFIRCoeffWrite[++nCount]));

  00064	e2811004	 add         r1, r1, #4
  00068	e591316c	 ldr         r3, [r1, #0x16C]
  0006c	e590206c	 ldr         r2, [r0, #0x6C]
  00070	e5823028	 str         r3, [r2, #0x28]
  00074	e590306c	 ldr         r3, [r0, #0x6C]
  00078	e593302c	 ldr         r3, [r3, #0x2C]
  0007c	e3130004	 tst         r3, #4
  00080	0afffff7	 beq         |$LL2@mcbsp_Side@9|
  00084		 |$LN1@mcbsp_Side@9|

; 1563 :         };
; 1564 : 
; 1565 :     // After FIR coeff write enable the side tone.
; 1566 :     //
; 1567 :     mcbsp_SideToneEnable(pDevice);

  00084	e590101c	 ldr         r1, [r0, #0x1C]
  00088	e5913040	 ldr         r3, [r1, #0x40]
  0008c	e580315c	 str         r3, [r0, #0x15C]
  00090	e5912038	 ldr         r2, [r1, #0x38]
  00094	e3833040	 orr         r3, r3, #0x40
  00098	e580e164	 str         lr, [r0, #0x164]
  0009c	e1823203	 orr         r3, r2, r3, lsl #4
  000a0	e5802160	 str         r2, [r0, #0x160]
  000a4	e580e168	 str         lr, [r0, #0x168]
  000a8	e58130bc	 str         r3, [r1, #0xBC]
  000ac	e590206c	 ldr         r2, [r0, #0x6C]
  000b0	e592302c	 ldr         r3, [r2, #0x2C]
  000b4	e3833001	 orr         r3, r3, #1
  000b8	e582302c	 str         r3, [r2, #0x2C]

; 1568 : 
; 1569 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1570 : }

  000bc	e49de004	 ldr         lr, [sp], #4
  000c0	e12fff1e	 bx          lr
  000c4		 |$M37492|

			 ENDP  ; |mcbsp_SideToneWriteFIRCoeff|

	EXPORT	|mcbsp_SideToneReadFIRCoeff|

  00000			 AREA	 |.pdata|, PDATA
|$T37520| DCD	|$LN15@mcbsp_Side@10|
	DCD	0x40003101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_SideToneReadFIRCoeff| PROC

; 1580 : {

  00000		 |$LN15@mcbsp_Side@10|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37517|

; 1582 : 
; 1583 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1584 : 
; 1585 :     // Disable side tone before reading FIR coefficients reason refer TRM
; 1586 :     //
; 1587 :     mcbsp_SideToneDisable(pDevice);

  00004	e590301c	 ldr         r3, [r0, #0x1C]
  00008	e3a0e000	 mov         lr, #0

; 1588 : 
; 1589 :     // Read reset
; 1590 :     //
; 1591 :     mcbsp_SideToneReadReset(pDevice);

  0000c	e583e0bc	 str         lr, [r3, #0xBC]
  00010	e590306c	 ldr         r3, [r0, #0x6C]
  00014	e583e02c	 str         lr, [r3, #0x2C]
  00018	e590306c	 ldr         r3, [r0, #0x6C]
  0001c	e583e024	 str         lr, [r3, #0x24]
  00020	e590206c	 ldr         r2, [r0, #0x6C]
  00024	e592302c	 ldr         r3, [r2, #0x2C]
  00028	e3c33004	 bic         r3, r3, #4
  0002c	e582302c	 str         r3, [r2, #0x2C]
  00030	e590206c	 ldr         r2, [r0, #0x6C]
  00034	e592302c	 ldr         r3, [r2, #0x2C]
  00038	e3833002	 orr         r3, r3, #2
  0003c	e582302c	 str         r3, [r2, #0x2C]
  00040	e590206c	 ldr         r2, [r0, #0x6C]
  00044	e592302c	 ldr         r3, [r2, #0x2C]
  00048	e3c33002	 bic         r3, r3, #2
  0004c	e582302c	 str         r3, [r2, #0x2C]

; 1592 : 
; 1593 :     // Read FIR coefficients
; 1594 :     //
; 1595 :     while ((INREG32(&pDevice->pSideToneRegs->SSELCR) &
; 1596 :         ST_SSELCR_COEFFWRDONE) == 0)

  00050	e590306c	 ldr         r3, [r0, #0x6C]
  00054	e593302c	 ldr         r3, [r3, #0x2C]
  00058	e3130004	 tst         r3, #4
  0005c	1a000008	 bne         |$LN1@mcbsp_Side@10|

; 1581 :     DWORD nCount = 0;

  00060	e1a02000	 mov         r2, r0
  00064		 |$LL2@mcbsp_Side@10|

; 1597 :         {
; 1598 :         pDevice->sideToneFIRCoeffRead[++nCount] =
; 1599 :             INREG32(&pDevice->pSideToneRegs->SFIRCR);

  00064	e590306c	 ldr         r3, [r0, #0x6C]
  00068	e2822004	 add         r2, r2, #4
  0006c	e5933028	 ldr         r3, [r3, #0x28]
  00070	e582336c	 str         r3, [r2, #0x36C]
  00074	e590306c	 ldr         r3, [r0, #0x6C]
  00078	e593302c	 ldr         r3, [r3, #0x2C]
  0007c	e3130004	 tst         r3, #4
  00080	0afffff7	 beq         |$LL2@mcbsp_Side@10|
  00084		 |$LN1@mcbsp_Side@10|

; 1600 :         };
; 1601 : 
; 1602 :     // After FIR coeff write enable the side tone.
; 1603 :     //
; 1604 :     mcbsp_SideToneEnable(pDevice);

  00084	e590101c	 ldr         r1, [r0, #0x1C]
  00088	e5913040	 ldr         r3, [r1, #0x40]
  0008c	e580315c	 str         r3, [r0, #0x15C]
  00090	e5912038	 ldr         r2, [r1, #0x38]
  00094	e3833040	 orr         r3, r3, #0x40
  00098	e580e164	 str         lr, [r0, #0x164]
  0009c	e1823203	 orr         r3, r2, r3, lsl #4
  000a0	e5802160	 str         r2, [r0, #0x160]
  000a4	e580e168	 str         lr, [r0, #0x168]
  000a8	e58130bc	 str         r3, [r1, #0xBC]
  000ac	e590206c	 ldr         r2, [r0, #0x6C]
  000b0	e592302c	 ldr         r3, [r2, #0x2C]
  000b4	e3833001	 orr         r3, r3, #1
  000b8	e582302c	 str         r3, [r2, #0x2C]

; 1605 : 
; 1606 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1607 : }

  000bc	e49de004	 ldr         lr, [sp], #4
  000c0	e12fff1e	 bx          lr
  000c4		 |$M37518|

			 ENDP  ; |mcbsp_SideToneReadFIRCoeff|

	EXPORT	|mcbsp_SideToneInit|
	IMPORT	|MmMapIoSpace|
	IMPORT	|SOCGetMCBSPSidetoneAddress|

  00000			 AREA	 |.pdata|, PDATA
|$T37539| DCD	|$LN13@mcbsp_Side@11|
	DCD	0x40002b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |mcbsp_SideToneInit| PROC

; 1415 : {

  00000		 |$LN13@mcbsp_Side@11|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37536|
  00004	e1a04000	 mov         r4, r0

; 1416 :     DWORD regVal = 0;
; 1417 :     PHYSICAL_ADDRESS pa;
; 1418 :     OMAP35XX_MCBSP_REGS_ST_t *pSideToneRegs = NULL;
; 1419 : 
; 1420 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:+%S(0x%08x)\r\n", __FUNCTION__, pDevice));
; 1421 : 
; 1422 :     // McBSP1,4,5 do not have sidetone support, so the physical address will be NULL
; 1423 : 	pDevice->pPhysAddrSidetone = (OMAP35XX_MCBSP_REGS_t*)SOCGetMCBSPSidetoneAddress(pDevice->deviceID);

  00008	e594000c	 ldr         r0, [r4, #0xC]
  0000c	eb000000	 bl          SOCGetMCBSPSidetoneAddress
  00010	e3500000	 cmp         r0, #0
  00014	e5840014	 str         r0, [r4, #0x14]

; 1424 :     if (pDevice->pPhysAddrSidetone == NULL)

  00018	0a000021	 beq         |$cleanUp$36846|

; 1425 :     {
; 1426 :         goto cleanUp;
; 1427 :     }
; 1428 : 
; 1429 :     // Map BSP controller
; 1430 :     //
; 1431 :     pa.QuadPart = (LONGLONG)pDevice->pPhysAddrSidetone;

  0001c	e1a01fc0	 mov         r1, r0, asr #31

; 1432 :     pSideToneRegs = (OMAP35XX_MCBSP_REGS_ST_t*)
; 1433 :         MmMapIoSpace(pa, sizeof(OMAP35XX_MCBSP_REGS_ST_t), FALSE);

  00020	e3a03000	 mov         r3, #0
  00024	e3a02030	 mov         r2, #0x30
  00028	eb000000	 bl          MmMapIoSpace
  0002c	e3500000	 cmp         r0, #0

; 1434 :     if (pSideToneRegs == NULL)

  00030	0a00001b	 beq         |$cleanUp$36846|

; 1435 :         {
; 1436 :         DEBUGMSG(ZONE_ERROR, (L"MCP: ERROR: mcbsp_SideToneInit: "
; 1437 :             L"Failed to map Side Tone controller registers\r\n"
; 1438 :             ));
; 1439 :         goto cleanUp;
; 1440 :         }
; 1441 : 
; 1442 :     pDevice->pSideToneRegs = pSideToneRegs;
; 1443 : 
; 1444 :     // Enable Side tone
; 1445 :     //
; 1446 :     mcbsp_SideToneEnable(pDevice);

  00034	e594101c	 ldr         r1, [r4, #0x1C]
  00038	e584006c	 str         r0, [r4, #0x6C]
  0003c	e3a00000	 mov         r0, #0
  00040	e5913040	 ldr         r3, [r1, #0x40]
  00044	e584315c	 str         r3, [r4, #0x15C]
  00048	e5912038	 ldr         r2, [r1, #0x38]
  0004c	e3833040	 orr         r3, r3, #0x40
  00050	e5840164	 str         r0, [r4, #0x164]
  00054	e1823203	 orr         r3, r2, r3, lsl #4
  00058	e5842160	 str         r2, [r4, #0x160]
  0005c	e5840168	 str         r0, [r4, #0x168]
  00060	e58130bc	 str         r3, [r1, #0xBC]
  00064	e594206c	 ldr         r2, [r4, #0x6C]

; 1447 : 
; 1448 :     // Start writing FIR coeff.
; 1449 :     //
; 1450 :     mcbsp_SideToneWriteFIRCoeff(pDevice);

  00068	e1a00004	 mov         r0, r4
  0006c	e592302c	 ldr         r3, [r2, #0x2C]
  00070	e3833001	 orr         r3, r3, #1
  00074	e582302c	 str         r3, [r2, #0x2C]
  00078	eb000000	 bl          mcbsp_SideToneWriteFIRCoeff

; 1451 : 
; 1452 :     // Apply desired gain value for chan 0 and chan 1
; 1453 :     //
; 1454 :     regVal = (ST_SGAINCR_CH0GAIN(pDevice->sideToneGain) |
; 1455 :               ST_SGAINCR_CH1GAIN(pDevice->sideToneGain));

  0007c	e594156c	 ldr         r1, [r4, #0x56C]
  00080	e3a03cff	 mov         r3, #0xFF, 24
  00084	e38330ff	 orr         r3, r3, #0xFF

; 1456 : 
; 1457 :     OUTREG32(&pDevice->pSideToneRegs->SGAINCR, regVal);

  00088	e594206c	 ldr         r2, [r4, #0x6C]
  0008c	e0013003	 and         r3, r1, r3
  00090	e1833801	 orr         r3, r3, r1, lsl #16
  00094	e5823024	 str         r3, [r2, #0x24]

; 1458 : 
; 1459 :     // Enable auto idle for sidetone.
; 1460 :     //
; 1461 :     mcbsp_SideToneAutoIdle(pDevice);

  00098	e594306c	 ldr         r3, [r4, #0x6C]
  0009c	e3a02001	 mov         r2, #1
  000a0	e5832010	 str         r2, [r3, #0x10]
  000a4		 |$cleanUp$36846|

; 1462 : 
; 1463 : cleanUp:
; 1464 :     DEBUGMSG(ZONE_FUNCTION, (L"MCP:-%S\r\n", __FUNCTION__));
; 1465 : }

  000a4	e8bd4010	 ldmia       sp!, {r4, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$M37537|

			 ENDP  ; |mcbsp_SideToneInit|

	END
