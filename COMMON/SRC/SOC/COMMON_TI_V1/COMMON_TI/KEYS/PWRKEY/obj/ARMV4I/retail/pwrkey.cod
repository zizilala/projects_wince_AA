; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\KEYS\PWRKEY\pwrkey.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BC@JHNNEHFE@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@PBJLKMGC@?$AAd?$AAe?$AAb?$AAo?$AAu?$AAn?$AAc?$AAe?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@NEOABOKH@?$AAp?$AAi?$AAn?$AAI?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@JHNNEHFE@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@PBJLKMGC@?$AAd?$AAe?$AAb?$AAo?$AAu?$AAn?$AAc?$AAe?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@| DCB "d"
	DCB	0x0, "e", 0x0, "b", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "c"
	DCB	0x0, "e", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "o"
	DCB	0x0, "d", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@NEOABOKH@?$AAp?$AAi?$AAn?$AAI?$AAd?$AA?$AA@| DCB "p", 0x0, "i", 0x0
	DCB	"n", 0x0, "I", 0x0, "d", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "p", 0x0, "w", 0x0, "r", 0x0, "k", 0x0, "e", 0x0, "y", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0
	%	56
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCD	0x3

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|s_deviceRegParams| DCD |??_C@_1M@NEOABOKH@?$AAp?$AAi?$AAn?$AAI?$AAd?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x4
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BO@PBJLKMGC@?$AAd?$AAe?$AAb?$AAo?$AAu?$AAn?$AAc?$AAe?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x1c
	DCD	0x4
	DCD	0x32
	DCD	|??_C@_1BC@JHNNEHFE@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x18
	DCD	0x4
	DCD	0xfa
	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T43832| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43829|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M43830|

			 ENDP  ; |SetEvent|

	EXPORT	|PKD_Deinit|
	IMPORT	|LocalFree|
	IMPORT	|CloseHandle|
	IMPORT	|GPIOClose|
	IMPORT	|GPIOInterruptDisable|
	IMPORT	|WaitForSingleObject|

  00000			 AREA	 |.pdata|, PDATA
|$T43847| DCD	|$LN12@PKD_Deinit|
	DCD	0x40002101
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\keys\pwrkey\pwrkey.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PKD_Deinit| PROC

; 177  : {

  00000		 |$LN12@PKD_Deinit|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43844|
  00004	e1b04000	 movs        r4, r0

; 178  :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 179  :     T_PWRKEY_DEVICE *pDevice = (T_PWRKEY_DEVICE*) context;
; 180  : 
; 181  :     if (pDevice == NULL)

  0000c	0a00001a	 beq         |$cleanUp$43705|

; 182  :     {
; 183  :         goto cleanUp;
; 184  :     }
; 185  :     if (pDevice->hIntrThread)

  00010	e5943010	 ldr         r3, [r4, #0x10]
  00014	e3530000	 cmp         r3, #0
  00018	0a000007	 beq         |$LN4@PKD_Deinit|

; 186  :     {
; 187  :         pDevice->fTerminateThread = TRUE;
; 188  :         SetEvent(pDevice->hIntrEvent);

  0001c	e594000c	 ldr         r0, [r4, #0xC]
  00020	e3a03001	 mov         r3, #1
  00024	e3a01003	 mov         r1, #3
  00028	e5843014	 str         r3, [r4, #0x14]
  0002c	eb000000	 bl          EventModify

; 189  :         WaitForSingleObject(pDevice->hIntrThread,INFINITE);

  00030	e5940010	 ldr         r0, [r4, #0x10]
  00034	e3e01000	 mvn         r1, #0
  00038	eb000000	 bl          WaitForSingleObject
  0003c		 |$LN4@PKD_Deinit|

; 190  :     }
; 191  :     if (pDevice->dwSysintr != SYSINTR_UNDEFINED)

  0003c	e5942008	 ldr         r2, [r4, #8]
  00040	e3720001	 cmn         r2, #1

; 192  :     {
; 193  :         GPIOInterruptDisable(pDevice->hGpio,pDevice->pinId,pDevice->dwSysintr);

  00044	15941004	 ldrne       r1, [r4, #4]
  00048	15940000	 ldrne       r0, [r4]
  0004c	1b000000	 blne        GPIOInterruptDisable

; 194  :     }
; 195  :     if (pDevice->hGpio)

  00050	e5943000	 ldr         r3, [r4]
  00054	e3530000	 cmp         r3, #0

; 196  :     {
; 197  :         GPIOClose(pDevice->hGpio);

  00058	11a00003	 movne       r0, r3
  0005c	1b000000	 blne        GPIOClose

; 198  :     }
; 199  :     if (pDevice->hIntrEvent)

  00060	e594300c	 ldr         r3, [r4, #0xC]
  00064	e3530000	 cmp         r3, #0

; 200  :     {
; 201  :         CloseHandle(pDevice->hIntrEvent);

  00068	11a00003	 movne       r0, r3
  0006c	1b000000	 blne        CloseHandle

; 202  :     }
; 203  :     LocalFree(pDevice);

  00070	e1a00004	 mov         r0, r4
  00074	eb000000	 bl          LocalFree

; 204  : 
; 205  :     rc = TRUE;

  00078	e3a00001	 mov         r0, #1
  0007c		 |$cleanUp$43705|

; 206  : 
; 207  : cleanUp:
; 208  : 
; 209  :     return rc;
; 210  : }

  0007c	e8bd4010	 ldmia       sp!, {r4, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$M43845|

			 ENDP  ; |PKD_Deinit|

	EXPORT	|PKD_Open|

  00000			 AREA	 |.pdata|, PDATA
|$T43857| DCD	|$LN5@PKD_Open|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PKD_Open| PROC

; 224  : {

  00000		 |$LN5@PKD_Open|
  00000		 |$M43854|

; 225  :     UNREFERENCED_PARAMETER(context);
; 226  :     UNREFERENCED_PARAMETER(accessCode);
; 227  :     UNREFERENCED_PARAMETER(shareMode);
; 228  :     return context;
; 229  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M43855|

			 ENDP  ; |PKD_Open|

	EXPORT	|PKD_Close|

  00000			 AREA	 |.pdata|, PDATA
|$T43866| DCD	|$LN5@PKD_Close|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PKD_Close| PROC

; 241  : {

  00000		 |$LN5@PKD_Close|
  00000		 |$M43863|

; 242  :     UNREFERENCED_PARAMETER(context);
; 243  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 244  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43864|

			 ENDP  ; |PKD_Close|

	EXPORT	|PKD_PowerUp|

  00000			 AREA	 |.pdata|, PDATA
|$T43873| DCD	|$LN5@PKD_PowerU|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PKD_PowerUp| PROC

; 258  : {

  00000		 |$LN5@PKD_PowerU|
  00000		 |$M43870|

; 259  :     UNREFERENCED_PARAMETER(context);
; 260  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M43871|

			 ENDP  ; |PKD_PowerUp|

	EXPORT	|PKD_PowerDown|

  00000			 AREA	 |.pdata|, PDATA
|$T43880| DCD	|$LN5@PKD_PowerD|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PKD_PowerDown| PROC

; 272  : {

  00000		 |$LN5@PKD_PowerD|
  00000		 |$M43877|

; 273  :     UNREFERENCED_PARAMETER(context);
; 274  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M43878|

			 ENDP  ; |PKD_PowerDown|

	EXPORT	|PKD_IOControl|

  00000			 AREA	 |.pdata|, PDATA
|$T43889| DCD	|$LN5@PKD_IOCont|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PKD_IOControl| PROC

; 292  : {

  00000		 |$LN5@PKD_IOCont|
  00000		 |$M43886|

; 293  :     BOOL rc = FALSE;
; 294  :     UNREFERENCED_PARAMETER(context);    
; 295  :     UNREFERENCED_PARAMETER(code);    
; 296  :     UNREFERENCED_PARAMETER(pInBuffer);    
; 297  :     UNREFERENCED_PARAMETER(inSize);    
; 298  :     UNREFERENCED_PARAMETER(pOutBuffer);    
; 299  :     UNREFERENCED_PARAMETER(outSize);    
; 300  :     UNREFERENCED_PARAMETER(pOutSize);    
; 301  :     return rc;

  00000	e3a00000	 mov         r0, #0

; 302  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43887|

			 ENDP  ; |PKD_IOControl|

	EXPORT	|PKD_IntrThread|
	EXPORT	|??_C@_1CO@IHCFLGPB@?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|SetSystemPowerState|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|GPIOGetBit|
	IMPORT	|GPIOInterruptDone|

  00000			 AREA	 |.pdata|, PDATA
|$T43907| DCD	|$LN21@PKD_IntrTh|
	DCD	0x40002601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@IHCFLGPB@?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "K"
	DCB	0x0, "e", 0x0, "y", 0x0, " ", 0x0, "p", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, "e", 0x0, "d", 0x0, "!", 0x0, "!"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PKD_IntrThread| PROC

; 314  : {

  00000		 |$LN21@PKD_IntrTh|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43904|
  00004	e1a04000	 mov         r4, r0

; 315  :     T_PWRKEY_DEVICE *pDevice = (T_PWRKEY_DEVICE*) pContext;
; 316  :     while (!pDevice->fTerminateThread)

  00008	ea00001b	 b           |$LN2@PKD_IntrTh|
  0000c		 |$LL8@PKD_IntrTh|

; 317  :     {
; 318  :         // Wait for pwrkey interrupt
; 319  :         if (WaitForSingleObject(pDevice->hIntrEvent, INFINITE) == WAIT_OBJECT_0)

  0000c	e594000c	 ldr         r0, [r4, #0xC]
  00010	e3e01000	 mvn         r1, #0
  00014	eb000000	 bl          WaitForSingleObject
  00018	e3500000	 cmp         r0, #0
  0001c	1a000016	 bne         |$LN2@PKD_IntrTh|
  00020		 |$LL5@PKD_IntrTh|

; 320  :         {
; 321  :             GPIOInterruptDone(pDevice->hGpio,pDevice->pinId,pDevice->dwSysintr);            
; 322  :             while (WaitForSingleObject(pDevice->hIntrEvent, pDevice->debouncePeriod) == WAIT_OBJECT_0)
; 323  :             {
; 324  :                 GPIOInterruptDone(pDevice->hGpio,pDevice->pinId,pDevice->dwSysintr);

  00020	e5942008	 ldr         r2, [r4, #8]
  00024	e5941004	 ldr         r1, [r4, #4]
  00028	e5940000	 ldr         r0, [r4]
  0002c	eb000000	 bl          GPIOInterruptDone
  00030	e594101c	 ldr         r1, [r4, #0x1C]
  00034	e594000c	 ldr         r0, [r4, #0xC]
  00038	eb000000	 bl          WaitForSingleObject
  0003c	e3500000	 cmp         r0, #0
  00040	0afffff6	 beq         |$LL5@PKD_IntrTh|

; 325  :             }            
; 326  :             if (pDevice->fTerminateThread)

  00044	e5943014	 ldr         r3, [r4, #0x14]
  00048	e3530000	 cmp         r3, #0
  0004c	1a00000d	 bne         |$LN16@PKD_IntrTh|

; 327  :             {
; 328  :                 break;
; 329  :             }
; 330  :             if (GPIOGetBit(pDevice->hGpio,pDevice->pinId) == 0)

  00050	e5941004	 ldr         r1, [r4, #4]
  00054	e5940000	 ldr         r0, [r4]
  00058	eb000000	 bl          GPIOGetBit
  0005c	e3500000	 cmp         r0, #0
  00060	1a000005	 bne         |$LN2@PKD_IntrTh|

; 331  :             {
; 332  :                 // Key is pressed for more than xxx ms
; 333  :                 RETAILMSG(1,(TEXT("Power Key pressed!!!\r\n")));

  00064	e59f0028	 ldr         r0, [pc, #0x28]
  00068	eb000000	 bl          NKDbgPrintfW

; 334  :                 // suspend system
; 335  :                 SetSystemPowerState(NULL, POWER_STATE_SUSPEND, POWER_FORCE);

  0006c	e3a02a01	 mov         r2, #1, 20
  00070	e3a01602	 mov         r1, #2, 12
  00074	e3a00000	 mov         r0, #0
  00078	eb000000	 bl          SetSystemPowerState
  0007c		 |$LN2@PKD_IntrTh|

; 336  :             }
; 337  :         }
; 338  :         if (pDevice->fTerminateThread)

  0007c	e5943014	 ldr         r3, [r4, #0x14]
  00080	e3530000	 cmp         r3, #0
  00084	0affffe0	 beq         |$LL8@PKD_IntrTh|
  00088		 |$LN16@PKD_IntrTh|

; 339  :         {
; 340  :             break;
; 341  :         }
; 342  : 
; 343  :     }
; 344  : 
; 345  :     DEBUGMSG(ZONE_IST, (L"-PKD_IntrThread\r\n"));
; 346  :     return ERROR_SUCCESS;

  00088	e3a00000	 mov         r0, #0

; 347  : }

  0008c	e8bd4010	 ldmia       sp!, {r4, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$LN22@PKD_IntrTh|
  00094		 |$LN23@PKD_IntrTh|
  00094	00000000	 DCD         |??_C@_1CO@IHCFLGPB@?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAp?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  00098		 |$M43905|

			 ENDP  ; |PKD_IntrThread|

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|

  00000			 AREA	 |.pdata|, PDATA
|$T43920| DCD	|$LN8@DllMain|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllMain| PROC

; 362  : {

  00000		 |$LN8@DllMain|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43917|
  00004	e1a04000	 mov         r4, r0

; 363  :     UNREFERENCED_PARAMETER(pReserved);
; 364  :     switch (reason)

  00008	e3510001	 cmp         r1, #1
  0000c	1a000003	 bne         |$LN2@DllMain|

; 365  :     {
; 366  :     case DLL_PROCESS_ATTACH:
; 367  :         RETAILREGISTERZONES((HMODULE)hDLL);

  00010	e59f1014	 ldr         r1, [pc, #0x14]
  00014	eb000000	 bl          RegisterDbgZones

; 368  :         DisableThreadLibraryCalls((HMODULE)hDLL);

  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          DisableThreadLibraryCalls
  00020		 |$LN2@DllMain|

; 369  :         break;
; 370  :     }
; 371  :     return TRUE;

  00020	e3a00001	 mov         r0, #1

; 372  : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$LN9@DllMain|
  0002c		 |$LN10@DllMain|
  0002c	00000000	 DCD         |dpCurSettings|
  00030		 |$M43918|

			 ENDP  ; |DllMain|

	EXPORT	|PKD_Init|
	IMPORT	|CeSetThreadPriority|
	IMPORT	|GPIOInterruptInitialize|
	IMPORT	|GPIOSetMode|
	IMPORT	|GPIOOpen|
	IMPORT	|CreateThread|
	IMPORT	|CreateEventW|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|malloc|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T43936| DCD	|$LN12@PKD_Init|
	DCD	0x40004702
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PKD_Init| PROC

; 109  : {

  00000		 |$LN12@PKD_Init|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M43933|
  00008	e1a06000	 mov         r6, r0

; 110  :     DWORD rc = (DWORD)NULL;    
; 111  :     T_PWRKEY_DEVICE* pDevice = malloc(sizeof(T_PWRKEY_DEVICE));

  0000c	e3a00020	 mov         r0, #0x20
  00010	e3a05000	 mov         r5, #0
  00014	eb000000	 bl          malloc
  00018	e1b04000	 movs        r4, r0

; 112  : 
; 113  :     UNREFERENCED_PARAMETER(pBusContext);
; 114  : 
; 115  :     if (pDevice==NULL) return 0;

  0001c	03a05000	 moveq       r5, #0
  00020	0a000037	 beq         |$LN1@PKD_Init|

; 116  :     memset(pDevice,0,sizeof(T_PWRKEY_DEVICE));

  00024	e3a02020	 mov         r2, #0x20
  00028	e3a01000	 mov         r1, #0
  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          memset

; 117  :     pDevice->dwSysintr = (DWORD) SYSINTR_UNDEFINED;
; 118  : 
; 119  :     // Read parameters from registry
; 120  :     if (GetDeviceRegistryParams(
; 121  :         szContext, 
; 122  :         pDevice, 
; 123  :         dimof(s_deviceRegParams), 
; 124  :         s_deviceRegParams) != ERROR_SUCCESS)

  00034	e59f30dc	 ldr         r3, [pc, #0xDC]
  00038	e3e0e000	 mvn         lr, #0
  0003c	e3a02003	 mov         r2, #3
  00040	e1a01004	 mov         r1, r4
  00044	e1a00006	 mov         r0, r6
  00048	e584e008	 str         lr, [r4, #8]
  0004c	eb000000	 bl          GetDeviceRegistryParams
  00050	e3500000	 cmp         r0, #0
  00054	1a000028	 bne         |$LN9@PKD_Init|

; 125  :     {
; 126  :         DEBUGMSG(ZONE_ERROR, (TEXT("ERROR: PKD_Init: Error reading from Registry.\r\n")));
; 127  :         goto cleanUp;
; 128  :     }
; 129  : 
; 130  :     // Create interrupt event
; 131  :     pDevice->hIntrEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00058	e3a03000	 mov         r3, #0
  0005c	e3a02000	 mov         r2, #0
  00060	e3a01000	 mov         r1, #0
  00064	e3a00000	 mov         r0, #0
  00068	eb000000	 bl          CreateEventW
  0006c	e3500000	 cmp         r0, #0
  00070	e584000c	 str         r0, [r4, #0xC]

; 132  :     if (pDevice->hIntrEvent == NULL)

  00074	0a000020	 beq         |$LN9@PKD_Init|

; 133  :     {
; 134  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: PKD_Init: Failed create interrupt event\r\n"));
; 135  :         goto cleanUp;
; 136  :     }
; 137  : 
; 138  :     pDevice->hIntrThread = CreateThread(NULL, 0, PKD_IntrThread, pDevice, 0, NULL);

  00078	e59f2094	 ldr         r2, [pc, #0x94]
  0007c	e3a0e000	 mov         lr, #0
  00080	e1a03004	 mov         r3, r4
  00084	e3a01000	 mov         r1, #0
  00088	e3a00000	 mov         r0, #0
  0008c	e58de004	 str         lr, [sp, #4]
  00090	e58de000	 str         lr, [sp]
  00094	eb000000	 bl          CreateThread
  00098	e3500000	 cmp         r0, #0
  0009c	e5840010	 str         r0, [r4, #0x10]

; 139  :     if (!pDevice->hIntrThread)

  000a0	0a000015	 beq         |$LN9@PKD_Init|

; 140  :     {
; 141  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: PKD_Init: Failed create interrupt thread\r\n"));
; 142  :         goto cleanUp;
; 143  :     }
; 144  : 
; 145  : 
; 146  :     pDevice->hGpio = GPIOOpen();        

  000a4	eb000000	 bl          GPIOOpen

; 147  :     GPIOSetMode(pDevice->hGpio,pDevice->pinId,GPIO_DIR_INPUT | GPIO_INT_LOW);

  000a8	e5941004	 ldr         r1, [r4, #4]
  000ac	e1a03000	 mov         r3, r0
  000b0	e3a02009	 mov         r2, #9
  000b4	e5843000	 str         r3, [r4]
  000b8	eb000000	 bl          GPIOSetMode

; 148  :     if (!GPIOInterruptInitialize(pDevice->hGpio,pDevice->pinId,&pDevice->dwSysintr,pDevice->hIntrEvent))

  000bc	e594300c	 ldr         r3, [r4, #0xC]
  000c0	e5941004	 ldr         r1, [r4, #4]
  000c4	e5940000	 ldr         r0, [r4]
  000c8	e2842008	 add         r2, r4, #8
  000cc	eb000000	 bl          GPIOInterruptInitialize
  000d0	e3500000	 cmp         r0, #0
  000d4	0a000008	 beq         |$LN9@PKD_Init|

; 149  :     {
; 150  :         goto cleanUp;
; 151  :     }    
; 152  :     GPIOInterruptDone(pDevice->hGpio,pDevice->pinId,pDevice->dwSysintr);

  000d8	e5942008	 ldr         r2, [r4, #8]
  000dc	e5941004	 ldr         r1, [r4, #4]
  000e0	e5940000	 ldr         r0, [r4]
  000e4	eb000000	 bl          GPIOInterruptDone

; 153  : 
; 154  :     // Set thread priority
; 155  :     CeSetThreadPriority(pDevice->hIntrThread,pDevice->threadPriority);

  000e8	e5941018	 ldr         r1, [r4, #0x18]
  000ec	e5940010	 ldr         r0, [r4, #0x10]
  000f0	eb000000	 bl          CeSetThreadPriority

; 156  : 
; 157  :     // Return non-null value
; 158  :     rc = (DWORD)pDevice;

  000f4	e1a05004	 mov         r5, r4
  000f8		 |$cleanUp$43681|

; 159  : cleanUp:
; 160  :     if (rc == (DWORD)NULL)

  000f8	ea000001	 b           |$LN1@PKD_Init|
  000fc		 |$LN9@PKD_Init|

; 161  :     {
; 162  :         PKD_Deinit((DWORD) pDevice);

  000fc	e1a00004	 mov         r0, r4
  00100	eb000000	 bl          PKD_Deinit
  00104		 |$LN1@PKD_Init|

; 163  :     }
; 164  :     return rc;
; 165  : }

  00104	e1a00005	 mov         r0, r5
  00108	e28dd008	 add         sp, sp, #8
  0010c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00110	e12fff1e	 bx          lr
  00114		 |$LN13@PKD_Init|
  00114		 |$LN14@PKD_Init|
  00114	00000000	 DCD         |PKD_IntrThread|
  00118		 |$LN15@PKD_Init|
  00118	00000000	 DCD         |s_deviceRegParams|
  0011c		 |$M43934|

			 ENDP  ; |PKD_Init|

	END
