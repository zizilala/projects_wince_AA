; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BACKLIGHT\bkldrvapi.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?g_pBacklight@@3PAVCBacklightRoot@@A| [ DATA ] ; g_pBacklight

  00000			 AREA	 |.bss|, NOINIT
|?g_pBacklight@@3PAVCBacklightRoot@@A| % 0x4		; g_pBacklight
	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T32687| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M32684|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M32685|

			 ENDP  ; |SetEvent|

	IMPORT	|LocalFree|
	IMPORT	|FreeLibrary|
	IMPORT	|CloseHandle|
	IMPORT	|WaitForSingleObject|

  00000			 AREA	 |.pdata|, PDATA
|$T32699| DCD	|$LN11@FreeContex|
	DCD	0x40002301
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\backlight\bkldrvapi.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FreeContext@@YAXPAUBKL_MDD_INFO@@@Z| PROC ; FreeContext

; 34   : {

  00000		 |$LN11@FreeContex|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M32696|
  00004	e1b04000	 movs        r4, r0

; 35   :     if(pBKLinfo)

  00008	0a00001c	 beq         |$LN4@FreeContex|

; 36   :     {
; 37   :         if(pBKLinfo->hBklThread)

  0000c	e5943220	 ldr         r3, [r4, #0x220]
  00010	e3530000	 cmp         r3, #0
  00014	0a000009	 beq         |$LN3@FreeContex|

; 38   :         {
; 39   :             // Thread has begun - wait for it to finish
; 40   :             pBKLinfo->fExit = TRUE;
; 41   :             SetEvent(pBKLinfo->hExitEvent);

  00018	e594021c	 ldr         r0, [r4, #0x21C]
  0001c	e3a03001	 mov         r3, #1
  00020	e3a01003	 mov         r1, #3
  00024	e5843228	 str         r3, [r4, #0x228]
  00028	eb000000	 bl          EventModify

; 42   :             WaitForSingleObject(pBKLinfo->hBklThread, INFINITE);

  0002c	e5940220	 ldr         r0, [r4, #0x220]
  00030	e3e01000	 mvn         r1, #0
  00034	eb000000	 bl          WaitForSingleObject

; 43   :             CloseHandle(pBKLinfo->hBklThread);

  00038	e5940220	 ldr         r0, [r4, #0x220]
  0003c	eb000000	 bl          CloseHandle
  00040		 |$LN3@FreeContex|

; 44   :         }
; 45   :         
; 46   :         if(pBKLinfo->hExitEvent)

  00040	e594321c	 ldr         r3, [r4, #0x21C]
  00044	e3530000	 cmp         r3, #0

; 47   :         {
; 48   :             CloseHandle(pBKLinfo->hExitEvent);

  00048	11a00003	 movne       r0, r3
  0004c	1b000000	 blne        CloseHandle

; 49   :         }
; 50   :         
; 51   :          g_pBacklight->Uninitialize();

  00050	e59f3030	 ldr         r3, [pc, #0x30]
  00054	e5930000	 ldr         r0, [r3]
  00058	e5903000	 ldr         r3, [r0]
  0005c	e5933004	 ldr         r3, [r3, #4]
  00060	e1a0e00f	 mov         lr, pc
  00064	e12fff13	 bx          r3

; 52   : 
; 53   :         if (pBKLinfo->hCoreDll) 

  00068	e5943230	 ldr         r3, [r4, #0x230]
  0006c	e3530000	 cmp         r3, #0

; 54   :         {
; 55   :             FreeLibrary(pBKLinfo->hCoreDll);

  00070	11a00003	 movne       r0, r3
  00074	1b000000	 blne        FreeLibrary

; 56   :         }
; 57   :             
; 58   : 
; 59   :         LocalFree(pBKLinfo);

  00078	e1a00004	 mov         r0, r4
  0007c	eb000000	 bl          LocalFree
  00080		 |$LN4@FreeContex|

; 60   :     }
; 61   : }

  00080	e8bd4010	 ldmia       sp!, {r4, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN12@FreeContex|
  00088		 |$LN13@FreeContex|
  00088	00000000	 DCD         |?g_pBacklight@@3PAVCBacklightRoot@@A|
  0008c		 |$M32697|

			 ENDP  ; |?FreeContext@@YAXPAUBKL_MDD_INFO@@@Z|, FreeContext

	EXPORT	|BKL_Init|
	EXPORT	|??_C@_1DA@PCOFNLNE@?$AAG?$AAe?$AAt?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAE?$AAx?$AA2?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@CJKPFBEK@?$AAc?$AAo?$AAr?$AAe?$AAd?$AAl?$AAl?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|CreateThread|
	IMPORT	|?fnBackLightThread@@YAKPAX@Z|		; fnBackLightThread
	IMPORT	|GetProcAddressW|
	IMPORT	|LoadLibraryW|
	IMPORT	|CreateEventW|
	IMPORT	|RegCloseKey|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|LocalAlloc|
	IMPORT	|?GetBacklightObject@@YAPAVCBacklightRoot@@XZ| ; GetBacklightObject
	IMPORT	|IsDVIMode|

  00000			 AREA	 |.pdata|, PDATA
|$T32714| DCD	|$LN24@BKL_Init|
	DCD	0x40006a02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@PCOFNLNE@?$AAG?$AAe?$AAt?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAE?$AAx?$AA2?$AA?$AA@| DCB "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "y", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "m", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "s", 0x0, "E", 0x0, "x", 0x0, "2", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@CJKPFBEK@?$AAc?$AAo?$AAr?$AAe?$AAd?$AAl?$AAl?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@| DCB "c"
	DCB	0x0, "o", 0x0, "r", 0x0, "e", 0x0, "d", 0x0, "l", 0x0, "l"
	DCB	0x0, ".", 0x0, "d", 0x0, "l", 0x0, "l", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| DCB "N", 0x0, "a", 0x0, "m"
	DCB	0x0, "e", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BKL_Init| PROC

; 75   : {   

  00000		 |$LN24@BKL_Init|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M32711|
  00008	e1a06000	 mov         r6, r0

; 76   :     DWORD dwStatus, dwSize, dwType;
; 77   :     HKEY hkDevice = NULL;

  0000c	e3a03000	 mov         r3, #0
  00010	e58d3008	 str         r3, [sp, #8]

; 78   :     BKL_MDD_INFO *pBKLinfo = NULL;

  00014	e3a04000	 mov         r4, #0

; 79   : 
; 80   :     UNREFERENCED_PARAMETER(lpvBusContext);
; 81   :    
; 82   :     if (IsDVIMode())

  00018	eb000000	 bl          IsDVIMode
  0001c	e3500000	 cmp         r0, #0

; 83   :         return 0;

  00020	1a000056	 bne         |$LN21@BKL_Init|

; 84   :     
; 85   :     DEBUGMSG(ZONE_BACKLIGHT, (TEXT("+BKL_Init() context %s.\r\n"), pContext));
; 86   : 
; 87   : 
; 88   :     g_pBacklight = GetBacklightObject();

  00024	eb000000	 bl          |?GetBacklightObject@@YAPAVCBacklightRoot@@XZ|
  00028	e59f5174	 ldr         r5, [pc, #0x174]
  0002c	e3500000	 cmp         r0, #0
  00030	e5850000	 str         r0, [r5]

; 89   :     if (g_pBacklight == NULL)

  00034	0a00004c	 beq         |$error$32487|

; 90   :     {
; 91   :         goto error;
; 92   :     }
; 93   : 
; 94   :     // Allocate enough storage for this instance of our backlight
; 95   :     pBKLinfo = (BKL_MDD_INFO *)LocalAlloc(LPTR, sizeof(BKL_MDD_INFO));

  00038	e3a01f8d	 mov         r1, #0x8D, 30
  0003c	e3a00040	 mov         r0, #0x40
  00040	eb000000	 bl          LocalAlloc
  00044	e1b04000	 movs        r4, r0

; 96   :     if (pBKLinfo == NULL)

  00048	0a000047	 beq         |$error$32487|

; 97   :     {
; 98   :         DEBUGMSG(ZONE_ERROR, (L"ERROR: BKL_Init: "
; 99   :             L"Failed allocate BKL_MDD_INFO device structure\r\n" ));
; 100  :         goto error;
; 101  :     }
; 102  : 
; 103  :     // get device name from registry
; 104  :     dwStatus = RegOpenKeyEx(HKEY_LOCAL_MACHINE, pContext, 0, 0, &hkDevice);

  0004c	e28d3008	 add         r3, sp, #8
  00050	e58d3000	 str         r3, [sp]
  00054	e3a03000	 mov         r3, #0
  00058	e3a02000	 mov         r2, #0
  0005c	e1a01006	 mov         r1, r6
  00060	e3a0010a	 mov         r0, #0xA, 2
  00064	eb000000	 bl          RegOpenKeyExW
  00068	e3500000	 cmp         r0, #0

; 105  :     if(dwStatus != ERROR_SUCCESS) 

  0006c	1a00003e	 bne         |$error$32487|

; 106  :     {
; 107  :         DEBUGMSG(ZONE_ERROR, (TEXT("BLK_Init: OpenDeviceKey failed with %u\r\n"), dwStatus));
; 108  :         goto error;
; 109  :     }
; 110  :     dwSize = sizeof(pBKLinfo->szName);
; 111  :     dwStatus = RegQueryValueEx(hkDevice, DEVLOAD_DEVNAME_VALNAME, NULL, &dwType, (LPBYTE)pBKLinfo->szName, &dwSize);

  00070	e59f1128	 ldr         r1, [pc, #0x128]
  00074	e59d0008	 ldr         r0, [sp, #8]
  00078	e3a07c01	 mov         r7, #1, 24
  0007c	e28de00c	 add         lr, sp, #0xC
  00080	e28d3010	 add         r3, sp, #0x10
  00084	e3a02000	 mov         r2, #0
  00088	e58d700c	 str         r7, [sp, #0xC]
  0008c	e58de004	 str         lr, [sp, #4]
  00090	e58d4000	 str         r4, [sp]
  00094	eb000000	 bl          RegQueryValueExW
  00098	e3500000	 cmp         r0, #0

; 112  :     if(dwStatus != ERROR_SUCCESS)

  0009c	1a000032	 bne         |$error$32487|

; 113  :     {
; 114  :         DEBUGMSG(ZONE_ERROR, (TEXT("BLK_Init: RegQueryValueEx failed with %u\r\n"), dwStatus));
; 115  :         goto error;
; 116  : 
; 117  :     }
; 118  :     RegCloseKey(hkDevice);

  000a0	e59d0008	 ldr         r0, [sp, #8]
  000a4	eb000000	 bl          RegCloseKey

; 119  :     hkDevice = NULL;

  000a8	e3a03000	 mov         r3, #0
  000ac	e58d3008	 str         r3, [sp, #8]

; 120  : 
; 121  :     // create exit event to be set by deinit:
; 122  :     pBKLinfo->hExitEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  000b0	e3a03000	 mov         r3, #0
  000b4	e3a02000	 mov         r2, #0
  000b8	e3a01000	 mov         r1, #0
  000bc	e3a00000	 mov         r0, #0
  000c0	eb000000	 bl          CreateEventW
  000c4	e3500000	 cmp         r0, #0
  000c8	e584021c	 str         r0, [r4, #0x21C]

; 123  :     if(NULL == pBKLinfo->hExitEvent)

  000cc	0a000026	 beq         |$error$32487|

; 124  :     {
; 125  :         DEBUGMSG(ZONE_ERROR, (TEXT("BLK_Init: OpenDeviceKey failed with %u\r\n"), dwStatus));
; 126  :         goto error;
; 127  :     }
; 128  : 
; 129  :     pBKLinfo->hCoreDll = LoadLibrary(TEXT("coredll.dll"));

  000d0	e59f00c4	 ldr         r0, [pc, #0xC4]
  000d4	eb000000	 bl          LoadLibraryW
  000d8	e3500000	 cmp         r0, #0
  000dc	e5840230	 str         r0, [r4, #0x230]

; 130  :     if (NULL != pBKLinfo->hCoreDll) 

  000e0	0a000002	 beq         |$LN6@BKL_Init|

; 131  :     {
; 132  :         pBKLinfo->pfnGetSystemPowerStatusEx2 = (PFN_GetSystemPowerStatusEx2)
; 133  :             GetProcAddress(pBKLinfo->hCoreDll, TEXT("GetSystemPowerStatusEx2"));

  000e4	e59f10ac	 ldr         r1, [pc, #0xAC]
  000e8	eb000000	 bl          GetProcAddressW
  000ec	e584022c	 str         r0, [r4, #0x22C]
  000f0		 |$LN6@BKL_Init|

; 134  :         if (!pBKLinfo->pfnGetSystemPowerStatusEx2) 
; 135  :         {
; 136  :             DEBUGMSG(ZONE_WARN,  (TEXT("GetProcAddress failed for GetSystemPowerStatusEx2. Assuming always on AC power.\r\n")));
; 137  :         }
; 138  :     }
; 139  : 
; 140  : //MYS     pBKLinfo->dwPddContext = BacklightInit(pContext, lpvBusContext, &(pBKLinfo->dwCurState));
; 141  :     if (g_pBacklight->Initialize(pContext) == FALSE)

  000f0	e5950000	 ldr         r0, [r5]
  000f4	e1a01006	 mov         r1, r6
  000f8	e5903000	 ldr         r3, [r0]
  000fc	e5933000	 ldr         r3, [r3]
  00100	e1a0e00f	 mov         lr, pc
  00104	e12fff13	 bx          r3
  00108	e3500000	 cmp         r0, #0
  0010c	0a000016	 beq         |$error$32487|

; 142  :         {
; 143  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: BKL_Init: "
; 144  :             L"Failed to initialize backlight object\r\n"
; 145  :             ));
; 146  :         goto error;
; 147  :         }
; 148  :     
; 149  :     // if there are no user settings for this, we act as if they are selected:
; 150  :     pBKLinfo->fBatteryTapOn = TRUE;

  00110	e3a03001	 mov         r3, #1

; 151  :     pBKLinfo->fExternalTapOn = TRUE;
; 152  : 
; 153  :     // in case there is no setting for this:
; 154  :     pBKLinfo->dwBattTimeout = 0;

  00114	e3a06000	 mov         r6, #0
  00118	e5843200	 str         r3, [r4, #0x200]
  0011c	e5843204	 str         r3, [r4, #0x204]
  00120	e5846208	 str         r6, [r4, #0x208]

; 155  :     pBKLinfo->dwACTimeout = 0;

  00124	e584620c	 str         r6, [r4, #0x20C]

; 156  : 
; 157  :     pBKLinfo->dwCurState = D0;

  00128	e5846214	 str         r6, [r4, #0x214]

; 158  :     g_pBacklight->SetPowerState(pBKLinfo->dwCurState);

  0012c	e5950000	 ldr         r0, [r5]
  00130	e3a01000	 mov         r1, #0
  00134	e5903000	 ldr         r3, [r0]
  00138	e5933008	 ldr         r3, [r3, #8]
  0013c	e1a0e00f	 mov         lr, pc
  00140	e12fff13	 bx          r3

; 159  :  
; 160  :     //create thread to wait for reg / power source changes:
; 161  :     pBKLinfo->hBklThread = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)fnBackLightThread, pBKLinfo, 0, NULL);

  00144	e59f2048	 ldr         r2, [pc, #0x48]
  00148	e1a03004	 mov         r3, r4
  0014c	e3a01000	 mov         r1, #0
  00150	e3a00000	 mov         r0, #0
  00154	e58d6004	 str         r6, [sp, #4]
  00158	e58d6000	 str         r6, [sp]
  0015c	eb000000	 bl          CreateThread
  00160	e3500000	 cmp         r0, #0
  00164	e5840220	 str         r0, [r4, #0x220]

; 162  :     if(NULL == pBKLinfo->hBklThread)
; 163  :     {
; 164  :         DEBUGMSG(ZONE_ERROR, (TEXT("BLK_Init: OpenDeviceKey failed with %u\r\n"), dwStatus));
; 165  :         goto error;
; 166  :     }
; 167  : 
; 168  :     DEBUGMSG(ZONE_BACKLIGHT, (TEXT("-BKL_Init().\r\n")));
; 169  : 
; 170  :     return (DWORD) pBKLinfo;

  00168	1a000005	 bne         |$LN19@BKL_Init|
  0016c		 |$error$32487|

; 171  : 
; 172  : error:
; 173  :     if(hkDevice)

  0016c	e59d0008	 ldr         r0, [sp, #8]
  00170	e3500000	 cmp         r0, #0

; 174  :     {
; 175  :         RegCloseKey(hkDevice);

  00174	1b000000	 blne        RegCloseKey

; 176  :     }
; 177  : 
; 178  :     FreeContext(pBKLinfo);    

  00178	e1a00004	 mov         r0, r4
  0017c	eb000000	 bl          |?FreeContext@@YAXPAUBKL_MDD_INFO@@@Z|
  00180		 |$LN21@BKL_Init|

; 179  : 
; 180  :     return 0;

  00180	e3a04000	 mov         r4, #0
  00184		 |$LN19@BKL_Init|

; 181  : 
; 182  : }

  00184	e1a00004	 mov         r0, r4
  00188	e28dd014	 add         sp, sp, #0x14
  0018c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00190	e12fff1e	 bx          lr
  00194		 |$LN25@BKL_Init|
  00194		 |$LN26@BKL_Init|
  00194	00000000	 DCD         |?fnBackLightThread@@YAKPAX@Z|
  00198		 |$LN27@BKL_Init|
  00198	00000000	 DCD         |??_C@_1DA@PCOFNLNE@?$AAG?$AAe?$AAt?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAE?$AAx?$AA2?$AA?$AA@|
  0019c		 |$LN28@BKL_Init|
  0019c	00000000	 DCD         |??_C@_1BI@CJKPFBEK@?$AAc?$AAo?$AAr?$AAe?$AAd?$AAl?$AAl?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@|
  001a0		 |$LN29@BKL_Init|
  001a0	00000000	 DCD         |??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@|
  001a4		 |$LN30@BKL_Init|
  001a4	00000000	 DCD         |?g_pBacklight@@3PAVCBacklightRoot@@A|
  001a8		 |$M32712|

			 ENDP  ; |BKL_Init|

	EXPORT	|BKL_Deinit|
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T32731| DCD	|$LN7@BKL_Deinit|
	DCD	0x40000e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BKL_Deinit| PROC

; 187  : {

  00000		 |$LN7@BKL_Deinit|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M32728|
  00004	e3500000	 cmp         r0, #0

; 188  :     BKL_MDD_INFO *pBKLinfo = NULL;
; 189  :     DEBUGMSG(ZONE_BACKLIGHT, (TEXT("BKL_Deinit().\r\n")));
; 190  : 
; 191  :     // Verify our context
; 192  :     if(! dwContext)
; 193  :     {
; 194  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: BKL_Deinit: "
; 195  :             L"Incorrect context paramer\r\n" ));
; 196  : 
; 197  :         return FALSE;

  00008	03a00000	 moveq       r0, #0

; 210  : }

  0000c	049de004	 ldreq       lr, [sp], #4
  00010	012fff1e	 bxeq        lr

; 198  :     }
; 199  : 
; 200  :     pBKLinfo = (BKL_MDD_INFO *) dwContext;
; 201  : 
; 202  :     FreeContext(pBKLinfo);

  00014	eb000000	 bl          |?FreeContext@@YAXPAUBKL_MDD_INFO@@@Z|

; 203  : 
; 204  :     if (g_pBacklight)

  00018	e59f3014	 ldr         r3, [pc, #0x14]
  0001c	e5930000	 ldr         r0, [r3]
  00020	e3500000	 cmp         r0, #0

; 205  :     {
; 206  :         delete g_pBacklight;

  00024	1b000000	 blne        |??3@YAXPAX@Z|

; 207  :     }
; 208  :     
; 209  :     return TRUE;

  00028	e3a00001	 mov         r0, #1

; 210  : }

  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$LN8@BKL_Deinit|
  00034		 |$LN9@BKL_Deinit|
  00034	00000000	 DCD         |?g_pBacklight@@3PAVCBacklightRoot@@A|
  00038		 |$M32729|

			 ENDP  ; |BKL_Deinit|

	EXPORT	|BKL_Open|

  00000			 AREA	 |.pdata|, PDATA
|$T32743| DCD	|$LN5@BKL_Open|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BKL_Open| PROC

; 215  : {

  00000		 |$LN5@BKL_Open|
  00000		 |$M32740|

; 216  :     UNREFERENCED_PARAMETER(dwAccess);
; 217  :     UNREFERENCED_PARAMETER(dwShareMode);
; 218  :     DEBUGMSG(ZONE_BACKLIGHT, (TEXT("BKL_Open().\r\n")));
; 219  :     return dwClientContext;
; 220  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M32741|

			 ENDP  ; |BKL_Open|

	EXPORT	|BKL_Close|

  00000			 AREA	 |.pdata|, PDATA
|$T32755| DCD	|$LN7@BKL_Close|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BKL_Close| PROC

; 225  : {

  00000		 |$LN7@BKL_Close|
  00000		 |$M32752|
  00000	e3500000	 cmp         r0, #0

; 226  :     DEBUGMSG(ZONE_BACKLIGHT, (TEXT("BKL_Close().\r\n")));
; 227  :     return (dwOpenContext != 0);

  00004	13a00001	 movne       r0, #1
  00008	03a00000	 moveq       r0, #0

; 228  : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M32753|

			 ENDP  ; |BKL_Close|

	EXPORT	|BKL_IOControl|
	EXPORT	|??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|SetLastError|
	IMPORT	|ReleasePowerRequirement|
	IMPORT	|SetPowerRequirement|
	IMPORT	|StringCbCatW|
	IMPORT	|?GetBestSupportedState@@YAHPAUBKL_MDD_INFO@@W4_CEDEVICE_POWER_STATE@@PAW42@@Z| ; GetBestSupportedState
	IMPORT	|__C_specific_handler|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T32819| DCD	|$LN75@BKL_IOCont|
	DCD	0xc000a204

  00000			 AREA	 |.pdata|, PDATA
|$T32821| DCD	|$LN34@BKL_IOCont|
	DCD	0x40000502

  00000			 AREA	 |.pdata|, PDATA
|$T32823| DCD	|$LN55@BKL_IOCont|
	DCD	0x40000502

  00000			 AREA	 |.pdata|, PDATA
|$T32825| DCD	|$LN48@BKL_IOCont|
	DCD	0x40000502

  00000			 AREA	 |.pdata|, PDATA
|$T32827| DCD	|$LN41@BKL_IOCont|
	DCD	0x40000a02

  00000			 AREA	 |.xdata|, DATA
|$T32817| DCD	0x4
	DCD	|$LN38@BKL_IOCont|
	DCD	|$LN39@BKL_IOCont|
	DCD	|$LN34@BKL_IOCont|
	DCD	|$LN35@BKL_IOCont|
	DCD	|$LN59@BKL_IOCont|
	DCD	|$LN60@BKL_IOCont|
	DCD	|$LN55@BKL_IOCont|
	DCD	|$LN56@BKL_IOCont|
	DCD	|$LN52@BKL_IOCont|
	DCD	|$LN53@BKL_IOCont|
	DCD	|$LN48@BKL_IOCont|
	DCD	|$LN49@BKL_IOCont|
	DCD	|$LN45@BKL_IOCont|
	DCD	|$LN46@BKL_IOCont|
	DCD	|$LN41@BKL_IOCont|
	DCD	|$LN42@BKL_IOCont|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@| DCB "\\", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T32817|

  00008		 |BKL_IOControl| PROC

; 235  : {

  00008		 |$LN75@BKL_IOCont|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d58f0	 stmdb       sp!, {r4 - r7, r11, r12, lr}
  00010	e28db01c	 add         r11, sp, #0x1C
  00014	e24dd00c	 sub         sp, sp, #0xC
  00018		 |$LN73@BKL_IOCont|
  00018	e1b05000	 movs        r5, r0

; 236  :     DWORD dwErr = ERROR_INVALID_PARAMETER;

  0001c	e3a04057	 mov         r4, #0x57
  00020	e50b4024	 str         r4, [r11, #-0x24]

; 237  :     BKL_MDD_INFO *pBKLinfo = NULL;
; 238  : 
; 239  :     UNREFERENCED_PARAMETER(nInBufSize);
; 240  :     UNREFERENCED_PARAMETER(lpInBuf);
; 241  : 
; 242  :     DEBUGMSG(ZONE_BACKLIGHT,(TEXT("BKL_IOControl IOCTL code = %d\r\n"), dwIoControlCode));
; 243  : 
; 244  :     // Verify context
; 245  :     if( !dwOpenContext )

  00024	1a000001	 bne         |$LN30@BKL_IOCont|
  00028		 |$LN72@BKL_IOCont|

; 246  :     {
; 247  :         DEBUGMSG(ZONE_ERROR, (
; 248  :             L"ERROR: BKL_Deinit: "
; 249  :             L"Incorrect context paramer\r\n" 
; 250  :         ));
; 251  : 
; 252  :         return FALSE;

  00028	e3a00000	 mov         r0, #0
  0002c	ea000094	 b           |$LN1@BKL_IOCont|
  00030		 |$LN30@BKL_IOCont|
  00030	e3a03832	 mov         r3, #0x32, 16

; 253  :     }
; 254  : 
; 255  :     pBKLinfo = (BKL_MDD_INFO *) dwOpenContext;
; 256  : 
; 257  :     switch (dwIoControlCode) 

  00034	e3833a01	 orr         r3, r3, #1, 20
  00038	e1510003	 cmp         r1, r3
  0003c	0a00006c	 beq         |$LN27@BKL_IOCont|
  00040	e59f32a8	 ldr         r3, [pc, #0x2A8]
  00044	e1510003	 cmp         r1, r3
  00048	0a00005c	 beq         |$LN6@BKL_IOCont|
  0004c	e59f3298	 ldr         r3, [pc, #0x298]
  00050	e1510003	 cmp         r1, r3
  00054	0a00000f	 beq         |$LN20@BKL_IOCont|
  00058	e59f3288	 ldr         r3, [pc, #0x288]
  0005c	e1510003	 cmp         r1, r3
  00060	1a000082	 bne         |$LN40@BKL_IOCont|

; 279  :                 {
; 280  :                     DEBUGMSG(ZONE_BACKLIGHT, (TEXT("exception in ioctl\r\n")));
; 281  :                 }
; 282  :             }
; 283  : 
; 284  :             break;
; 285  : 
; 286  :         case IOCTL_POWER_QUERY: // determines whether changing power state is feasible
; 287  :                 DEBUGMSG(ZONE_BACKLIGHT,(TEXT("BKL: Received IOCTL_POWER_QUERY\r\n")));
; 288  :                 if (lpOutBuf && nOutBufSize >= sizeof(CEDEVICE_POWER_STATE)) 

  00064	e59b2000	 ldr         r2, [r11]
  00068	e3520000	 cmp         r2, #0
  0006c	0a00007f	 beq         |$LN40@BKL_IOCont|
  00070	e59b3004	 ldr         r3, [r11, #4]
  00074	e3530004	 cmp         r3, #4
  00078	3a00007c	 bcc         |$LN40@BKL_IOCont|
  0007c		 |$LN45@BKL_IOCont|

; 289  :                 {
; 290  :                     // Return a good status on any valid query, since we are always ready to
; 291  :                     // change power states (if asked for state we don't support, we move to next highest, eg D3->D4).
; 292  :                     __try 
; 293  :                     {
; 294  :                         CEDEVICE_POWER_STATE ReqDx = *(PCEDEVICE_POWER_STATE)lpOutBuf;

  0007c	e5923000	 ldr         r3, [r2]

; 295  : 
; 296  :                         if (VALID_DX(ReqDx)) 

  00080	e3530004	 cmp         r3, #4

; 297  :                         {
; 298  :                             // This is a valid Dx state so return a good status.
; 299  :                             dwErr = ERROR_SUCCESS;

  00084	93a04000	 movls       r4, #0
  00088	950b4024	 strls       r4, [r11, #-0x24]
  0008c		 |$LN46@BKL_IOCont|

; 300  :                         }
; 301  : 
; 302  :                         DEBUGMSG(ZONE_BACKLIGHT, (TEXT("BKL: IOCTL_POWER_QUERY %s\r\n"), dwErr == ERROR_SUCCESS ? (TEXT("succeeded")) : (TEXT("failed")) ));
; 303  :                     }

  0008c	ea000077	 b           |$LN40@BKL_IOCont|
  00090		 |$LN42@BKL_IOCont|

; 304  :                     __except(EXCEPTION_EXECUTE_HANDLER) 

  00090	e51b4024	 ldr         r4, [r11, #-0x24]
  00094	ea000075	 b           |$LN40@BKL_IOCont|
  00098		 |$LN20@BKL_IOCont|

; 305  :                     {
; 306  :                         DEBUGMSG(ZONE_BACKLIGHT, (TEXT("Exception in ioctl\r\n")));
; 307  :                     }
; 308  :                 }
; 309  :                 break;
; 310  : 
; 311  :             break;
; 312  : 
; 313  :         case IOCTL_POWER_SET: // requests a change from one device power state to another
; 314  :                 DEBUGMSG(ZONE_BACKLIGHT,(TEXT("BKL: Received IOCTL_POWER_SET\r\n")));
; 315  :                 if (lpOutBuf && nOutBufSize >= sizeof(CEDEVICE_POWER_STATE)) 

  00098	e59b7000	 ldr         r7, [r11]
  0009c	e3570000	 cmp         r7, #0
  000a0	0a000072	 beq         |$LN40@BKL_IOCont|
  000a4	e59b3004	 ldr         r3, [r11, #4]
  000a8	e3530004	 cmp         r3, #4
  000ac	3a00006f	 bcc         |$LN40@BKL_IOCont|
  000b0		 |$LN52@BKL_IOCont|

; 316  :                 {
; 317  :                     __try 
; 318  :                     {
; 319  :                         CEDEVICE_POWER_STATE ReqDx = *(PCEDEVICE_POWER_STATE)lpOutBuf;

  000b0	e5973000	 ldr         r3, [r7]

; 320  : 
; 321  :                         DEBUGMSG(ZONE_BACKLIGHT, (TEXT("IOCTL_POWER_SET request to D%u \r\n"), ReqDx));
; 322  :                         if (VALID_DX(ReqDx)) 

  000b4	e3530004	 cmp         r3, #4
  000b8	8a00003d	 bhi         |$LN53@BKL_IOCont|

; 323  :                         {
; 324  :                             CEDEVICE_POWER_STATE SupportedDx = ReqDx;
; 325  :                             
; 326  :                             // figure out which state to ask driver to go to:
; 327  :                             if(GetBestSupportedState(pBKLinfo, ReqDx, &SupportedDx))

  000bc	e24b2020	 sub         r2, r11, #0x20
  000c0	e1a01003	 mov         r1, r3
  000c4	e1a00005	 mov         r0, r5
  000c8	e50b3020	 str         r3, [r11, #-0x20]
  000cc	eb000000	 bl          |?GetBestSupportedState@@YAHPAUBKL_MDD_INFO@@W4_CEDEVICE_POWER_STATE@@PAW42@@Z|
  000d0	e3500000	 cmp         r0, #0
  000d4	0a000036	 beq         |$LN53@BKL_IOCont|

; 328  :                             {       
; 329  :                                  pBKLinfo->dwCurState = SupportedDx;

  000d8	e51b3020	 ldr         r3, [r11, #-0x20]

; 330  :                                  g_pBacklight->SetPowerState(pBKLinfo->dwCurState);

  000dc	e59f21fc	 ldr         r2, [pc, #0x1FC]
  000e0	e5853214	 str         r3, [r5, #0x214]
  000e4	e5920000	 ldr         r0, [r2]
  000e8	e1a01003	 mov         r1, r3
  000ec	e5903000	 ldr         r3, [r0]
  000f0	e5933008	 ldr         r3, [r3, #8]
  000f4	e1a0e00f	 mov         lr, pc
  000f8	e12fff13	 bx          r3

; 331  : 
; 332  :                                 // keep display driver on while backlight is on:
; 333  :                                 if(D0 == SupportedDx)

  000fc	e51b3020	 ldr         r3, [r11, #-0x20]
  00100	e3530000	 cmp         r3, #0
  00104	1a000021	 bne         |$LN15@BKL_IOCont|

; 334  :                                 {   
; 335  :                                     PTCHAR pszDevice;       // to hold device name (GUID + interface name)                                    
; 336  :                                     UINT uMaxDeviceBytes;   // memory allocated to hold device name
; 337  : 
; 338  :                                     // allow space for null terminator + separating '\':
; 339  :                                     uMaxDeviceBytes = (sizeof(PMCLASS_DISPLAY) + sizeof(pBKLinfo->szDisplayInterface) + 2*sizeof(TCHAR));
; 340  :                                     pszDevice = (PTCHAR)LocalAlloc(0, uMaxDeviceBytes);

  00108	e3a04c01	 mov         r4, #1, 24
  0010c	e3841052	 orr         r1, r4, #0x52
  00110	e3a00000	 mov         r0, #0
  00114	eb000000	 bl          LocalAlloc
  00118	e1b06000	 movs        r6, r0

; 341  :                                     if(pszDevice != NULL)

  0011c	0a00001d	 beq         |$LN70@BKL_IOCont|

; 342  :                                     {
; 343  :                                         // copy null-terminated GUID string
; 344  :                                         ASSERT(SUCCEEDED(StringCbCopy(pszDevice, uMaxDeviceBytes, PMCLASS_DISPLAY)));
; 345  :                                         
; 346  :                                         // concatenate '\' separator + display interface name:
; 347  :                                         if (FAILED(StringCbCat(pszDevice, uMaxDeviceBytes, TEXT("\\")))) 

  00120	e59f21bc	 ldr         r2, [pc, #0x1BC]
  00124	e3841052	 orr         r1, r4, #0x52
  00128	e1a00006	 mov         r0, r6
  0012c	eb000000	 bl          StringCbCatW
  00130	e3500000	 cmp         r0, #0

; 348  :                                         {
; 349  :                                             dwErr = ERROR_INSUFFICIENT_BUFFER;

  00134	43a0307a	 movmi       r3, #0x7A
  00138	450b3024	 strmi       r3, [r11, #-0x24]
  0013c	43a04000	 movmi       r4, #0

; 342  :                                     {
; 343  :                                         // copy null-terminated GUID string
; 344  :                                         ASSERT(SUCCEEDED(StringCbCopy(pszDevice, uMaxDeviceBytes, PMCLASS_DISPLAY)));
; 345  :                                         
; 346  :                                         // concatenate '\' separator + display interface name:
; 347  :                                         if (FAILED(StringCbCat(pszDevice, uMaxDeviceBytes, TEXT("\\")))) 

  00140	4a00000f	 bmi         |$LN10@BKL_IOCont|

; 350  :                                         }                                        
; 351  :                                         else if (FAILED(StringCbCat(pszDevice, uMaxDeviceBytes, pBKLinfo->szDisplayInterface))) 

  00144	e2852c01	 add         r2, r5, #1, 24
  00148	e3841052	 orr         r1, r4, #0x52
  0014c	e1a00006	 mov         r0, r6
  00150	eb000000	 bl          StringCbCatW
  00154	e3500000	 cmp         r0, #0

; 354  :                                         }      
; 355  :                                         else

  00158	e3a04000	 mov         r4, #0

; 352  :                                         {
; 353  :                                             dwErr = ERROR_INSUFFICIENT_BUFFER;

  0015c	43a0307a	 movmi       r3, #0x7A
  00160	450b3024	 strmi       r3, [r11, #-0x24]

; 350  :                                         }                                        
; 351  :                                         else if (FAILED(StringCbCat(pszDevice, uMaxDeviceBytes, pBKLinfo->szDisplayInterface))) 

  00164	4a000006	 bmi         |$LN10@BKL_IOCont|

; 356  :                                         {
; 357  :                                             pBKLinfo->hDDIPowerReq = SetPowerRequirement(pszDevice, D0, POWER_NAME, NULL, 0);

  00168	e3a03000	 mov         r3, #0
  0016c	e3a02001	 mov         r2, #1
  00170	e3a01000	 mov         r1, #0
  00174	e1a00006	 mov         r0, r6
  00178	e58d4000	 str         r4, [sp]
  0017c	eb000000	 bl          SetPowerRequirement
  00180	e5850224	 str         r0, [r5, #0x224]
  00184		 |$LN10@BKL_IOCont|

; 358  :                                         }
; 359  :                                         LocalFree(pszDevice);

  00184	e1a00006	 mov         r0, r6
  00188	eb000000	 bl          LocalFree

; 360  :                                     }
; 361  :                                 }
; 362  :                                 else

  0018c	ea000002	 b           |$LN9@BKL_IOCont|
  00190		 |$LN15@BKL_IOCont|

; 363  :                                 {
; 364  :                                     ReleasePowerRequirement(pBKLinfo->hDDIPowerReq);

  00190	e5950224	 ldr         r0, [r5, #0x224]
  00194	eb000000	 bl          ReleasePowerRequirement
  00198		 |$LN70@BKL_IOCont|
  00198	e3a04000	 mov         r4, #0
  0019c		 |$LN9@BKL_IOCont|

; 365  :                                 }
; 366  : //MYS                                pBKLinfo->dwCurState=SupportedDx;
; 367  :                                 
; 368  :                                 // tell pm which state we went to:
; 369  :                                 *(PCEDEVICE_POWER_STATE) lpOutBuf = SupportedDx;

  0019c	e51b3020	 ldr         r3, [r11, #-0x20]

; 370  :                                 *lpBytesReturned = sizeof(CEDEVICE_POWER_STATE);

  001a0	e59b2008	 ldr         r2, [r11, #8]
  001a4	e3a01004	 mov         r1, #4
  001a8	e5873000	 str         r3, [r7]
  001ac	e5821000	 str         r1, [r2]

; 371  : 
; 372  :                                 dwErr = ERROR_SUCCESS;

  001b0	e50b4024	 str         r4, [r11, #-0x24]
  001b4		 |$LN53@BKL_IOCont|

; 373  :                                 DEBUGMSG(ZONE_BACKLIGHT, (TEXT("IOCTL_POWER_SET to D%u \r\n"), ReqDx));
; 374  :                                 
; 375  :                             }
; 376  :                             else
; 377  :                             {
; 378  :                                 DEBUGMSG(ZONE_BACKLIGHT, (TEXT("Unsupported state request D%u\r\n"), ReqDx));
; 379  :                             }
; 380  :                         }
; 381  :                         else 
; 382  :                         {
; 383  :                             DEBUGMSG(ZONE_BACKLIGHT, (TEXT("Invalid state request D%u\r\n"), ReqDx));
; 384  :                         }
; 385  :                     }

  001b4	ea00002d	 b           |$LN40@BKL_IOCont|
  001b8		 |$LN49@BKL_IOCont|

; 386  :                     __except(EXCEPTION_EXECUTE_HANDLER) 

  001b8	e51b4024	 ldr         r4, [r11, #-0x24]
  001bc	ea00002b	 b           |$LN40@BKL_IOCont|
  001c0		 |$LN6@BKL_IOCont|

; 387  :                     {
; 388  :                         DEBUGMSG(ZONE_BACKLIGHT, (TEXT("Exception in ioctl\r\n")));
; 389  :                     }
; 390  :                 }
; 391  :                 break;
; 392  : 
; 393  :         case IOCTL_POWER_GET: // gets the current device power state
; 394  :                DEBUGMSG(ZONE_BACKLIGHT,(TEXT("BKL: Received IOCTL_POWER_GET\r\n")));
; 395  :                 if (lpOutBuf != NULL && nOutBufSize >= sizeof(CEDEVICE_POWER_STATE)) 

  001c0	e59b2000	 ldr         r2, [r11]
  001c4	e3520000	 cmp         r2, #0
  001c8	0a000028	 beq         |$LN40@BKL_IOCont|
  001cc	e59b3004	 ldr         r3, [r11, #4]
  001d0	e3530004	 cmp         r3, #4
  001d4	3a000025	 bcc         |$LN40@BKL_IOCont|
  001d8		 |$LN59@BKL_IOCont|

; 396  :                 {
; 397  :                     __try 
; 398  :                     {
; 399  :                         CEDEVICE_POWER_STATE   CurrentDx;   
; 400  : 
; 401  :                         CurrentDx = pBKLinfo->dwCurState; 

  001d8	e5953214	 ldr         r3, [r5, #0x214]

; 402  :                         *(PCEDEVICE_POWER_STATE)lpOutBuf = CurrentDx;  

  001dc	e5823000	 str         r3, [r2]

; 403  : 
; 404  :                         dwErr = ERROR_SUCCESS;

  001e0	e3a04000	 mov         r4, #0
  001e4	e50b4024	 str         r4, [r11, #-0x24]
  001e8		 |$LN60@BKL_IOCont|

; 405  : 
; 406  :                         DEBUGMSG(ZONE_BACKLIGHT, (TEXT("IOCTL_POWER_GET: passing back %u\r\n"), CurrentDx));  
; 407  :                     }

  001e8	ea000020	 b           |$LN40@BKL_IOCont|
  001ec		 |$LN56@BKL_IOCont|

; 408  :                     __except(EXCEPTION_EXECUTE_HANDLER) 

  001ec	e51b4024	 ldr         r4, [r11, #-0x24]
  001f0	ea00001e	 b           |$LN40@BKL_IOCont|
  001f4		 |$LN27@BKL_IOCont|

; 258  :     {
; 259  :         case IOCTL_POWER_CAPABILITIES:  
; 260  :             DEBUGMSG(ZONE_BACKLIGHT, (TEXT("BKL: IOCTL_POWER_CAPABILITIES\r\n")));
; 261  :             if (lpOutBuf && nOutBufSize >= sizeof (POWER_CAPABILITIES) && lpBytesReturned) 

  001f4	e59b6000	 ldr         r6, [r11]
  001f8	e3560000	 cmp         r6, #0
  001fc	0a00001b	 beq         |$LN40@BKL_IOCont|
  00200	e59b3004	 ldr         r3, [r11, #4]
  00204	e3530030	 cmp         r3, #0x30
  00208	3a000018	 bcc         |$LN40@BKL_IOCont|
  0020c	e59b7008	 ldr         r7, [r11, #8]
  00210	e3570000	 cmp         r7, #0
  00214	0a000015	 beq         |$LN40@BKL_IOCont|
  00218		 |$LN38@BKL_IOCont|

; 262  :             {
; 263  :                 __try 
; 264  :                 {
; 265  :                     PPOWER_CAPABILITIES PowerCaps = (PPOWER_CAPABILITIES)lpOutBuf;
; 266  : 
; 267  :                     memset(PowerCaps, 0, sizeof(*PowerCaps));

  00218	e3a02030	 mov         r2, #0x30
  0021c	e3a01000	 mov         r1, #0
  00220	e1a00006	 mov         r0, r6
  00224	eb000000	 bl          memset

; 268  :                     PowerCaps->DeviceDx = g_pBacklight->BacklightGetSupportedStates();

  00228	e59f30b0	 ldr         r3, [pc, #0xB0]
  0022c	e5930000	 ldr         r0, [r3]
  00230	e5903000	 ldr         r3, [r0]
  00234	e593300c	 ldr         r3, [r3, #0xC]
  00238	e1a0e00f	 mov         lr, pc
  0023c	e12fff13	 bx          r3
  00240	e5c60000	 strb        r0, [r6]

; 269  : 
; 270  :                      *lpBytesReturned = sizeof(*PowerCaps);

  00244	e3a03030	 mov         r3, #0x30
  00248	e5873000	 str         r3, [r7]

; 271  : 
; 272  :                     pBKLinfo->ucSupportedStatesMask = PowerCaps->DeviceDx;

  0024c	e5d63000	 ldrb        r3, [r6]
  00250	e5c53218	 strb        r3, [r5, #0x218]

; 273  : 
; 274  :                     ASSERT(pBKLinfo->ucSupportedStatesMask < 0x20);
; 275  :                     
; 276  :                     dwErr = ERROR_SUCCESS;

  00254	e3a04000	 mov         r4, #0
  00258	e50b4024	 str         r4, [r11, #-0x24]
  0025c		 |$LN39@BKL_IOCont|

; 277  :                 }

  0025c	ea000003	 b           |$LN40@BKL_IOCont|
  00260		 |$LN35@BKL_IOCont|

; 278  :                 __except(EXCEPTION_EXECUTE_HANDLER) 

  00260	e51b4024	 ldr         r4, [r11, #-0x24]
  00264	ea000001	 b           |$LN40@BKL_IOCont|
  00268		 |$LN71@BKL_IOCont|

; 424  :     } 
; 425  :     else 
; 426  :     {
; 427  :        return TRUE;

  00268	e51b0020	 ldr         r0, [r11, #-0x20]
  0026c	ea000004	 b           |$LN1@BKL_IOCont|
  00270		 |$LN40@BKL_IOCont|

; 409  :                     {
; 410  :                         DEBUGMSG(ZONE_BACKLIGHT, (TEXT("Exception in ioctl\r\n")));
; 411  :                     }
; 412  :                 }
; 413  : 
; 414  :             break;
; 415  :         
; 416  :         default:     
; 417  :             break;
; 418  :     }
; 419  : 
; 420  :     SetLastError(dwErr);

  00270	e1a00004	 mov         r0, r4
  00274	eb000000	 bl          SetLastError

; 421  :     if(dwErr != ERROR_SUCCESS) 

  00278	e3540000	 cmp         r4, #0

; 422  :     {
; 423  :         return FALSE;

  0027c	1affff69	 bne         |$LN72@BKL_IOCont|

; 424  :     } 
; 425  :     else 
; 426  :     {
; 427  :        return TRUE;

  00280	e3a00001	 mov         r0, #1
  00284		 |$LN1@BKL_IOCont|

; 428  :     }
; 429  : 
; 430  : }

  00284	e24bd01c	 sub         sp, r11, #0x1C
  00288	e89d68f0	 ldmia       sp, {r4 - r7, r11, sp, lr}
  0028c	e12fff1e	 bx          lr

			 ENDP  ; |BKL_IOControl|

  00290		 |$LN34@BKL_IOCont|
  00290		 |$LN74@BKL_IOCont|

; 278  :                 __except(EXCEPTION_EXECUTE_HANDLER) 

  00290	e52de004	 str         lr, [sp, #-4]!
  00294	e24dd004	 sub         sp, sp, #4
  00298		 |$LN37@BKL_IOCont|
  00298		 |$LN80@BKL_IOCont|
  00298	e3a00001	 mov         r0, #1
  0029c		 |$LN36@BKL_IOCont|
  0029c	e28dd004	 add         sp, sp, #4
  002a0	e49df004	 ldr         pc, [sp], #4
  002a4		 |$LN81@BKL_IOCont|
  002a4		 |$LN55@BKL_IOCont|
  002a4		 |$LN76@BKL_IOCont|

; 408  :                     __except(EXCEPTION_EXECUTE_HANDLER) 

  002a4	e52de004	 str         lr, [sp, #-4]!
  002a8	e24dd004	 sub         sp, sp, #4
  002ac		 |$LN58@BKL_IOCont|
  002ac		 |$LN82@BKL_IOCont|
  002ac	e3a00001	 mov         r0, #1
  002b0		 |$LN57@BKL_IOCont|
  002b0	e28dd004	 add         sp, sp, #4
  002b4	e49df004	 ldr         pc, [sp], #4
  002b8		 |$LN83@BKL_IOCont|
  002b8		 |$LN48@BKL_IOCont|
  002b8		 |$LN77@BKL_IOCont|

; 386  :                     __except(EXCEPTION_EXECUTE_HANDLER) 

  002b8	e52de004	 str         lr, [sp, #-4]!
  002bc	e24dd004	 sub         sp, sp, #4
  002c0		 |$LN51@BKL_IOCont|
  002c0		 |$LN84@BKL_IOCont|
  002c0	e3a00001	 mov         r0, #1
  002c4		 |$LN50@BKL_IOCont|
  002c4	e28dd004	 add         sp, sp, #4
  002c8	e49df004	 ldr         pc, [sp], #4
  002cc		 |$LN85@BKL_IOCont|
  002cc		 |$LN41@BKL_IOCont|
  002cc		 |$LN78@BKL_IOCont|

; 304  :                     __except(EXCEPTION_EXECUTE_HANDLER) 

  002cc	e52de004	 str         lr, [sp, #-4]!
  002d0	e24dd004	 sub         sp, sp, #4
  002d4		 |$LN44@BKL_IOCont|
  002d4		 |$LN86@BKL_IOCont|
  002d4	e3a00001	 mov         r0, #1
  002d8		 |$LN43@BKL_IOCont|
  002d8	e28dd004	 add         sp, sp, #4
  002dc	e49df004	 ldr         pc, [sp], #4
  002e0		 |$LN88@BKL_IOCont|
  002e0		 |$LN89@BKL_IOCont|
  002e0	00000000	 DCD         |?g_pBacklight@@3PAVCBacklightRoot@@A|
  002e4		 |$LN90@BKL_IOCont|
  002e4	00000000	 DCD         |??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@|
  002e8		 |$LN91@BKL_IOCont|
  002e8	0032100c	 DCD         0x32100c
  002ec		 |$LN92@BKL_IOCont|
  002ec	00321008	 DCD         0x321008
  002f0		 |$LN93@BKL_IOCont|
  002f0	00321004	 DCD         0x321004
  002f4		 |$LN87@BKL_IOCont|
  002f4		 |$LN79@BKL_IOCont|
	EXPORT	|DllMain|

  00000			 AREA	 |.pdata|, PDATA
|$T32855| DCD	|$LN9@DllMain|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllMain| PROC

; 436  : {

  00000		 |$LN9@DllMain|
  00000		 |$M32852|

; 437  :     UNREFERENCED_PARAMETER(hinstDll);
; 438  :     UNREFERENCED_PARAMETER(Reserved);
; 439  :     
; 440  :     switch(Reason) {
; 441  :     case DLL_PROCESS_ATTACH:
; 442  :         DEBUGREGISTER((HMODULE)hinstDll);
; 443  :         DEBUGMSG(ZONE_BACKLIGHT, (TEXT("DllMain(): dll attach.\r\n")));
; 444  :         break;
; 445  :         
; 446  :     case DLL_PROCESS_DETACH:
; 447  :         DEBUGMSG(ZONE_BACKLIGHT, (TEXT("DllMain(): dll detach.\r\n")));
; 448  :         break;
; 449  :     }
; 450  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 451  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M32853|

			 ENDP  ; |DllMain|

	END
