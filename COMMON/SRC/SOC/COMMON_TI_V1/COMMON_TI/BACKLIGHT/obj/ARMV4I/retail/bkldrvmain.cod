; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BACKLIGHT\bkldrvmain.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?dpCurSettings@@3U_DBGPARAM@@A| [ DATA ] ; dpCurSettings

  00000			 AREA	 |.rdata|, DATA, READONLY
|DeviceStateMasks| DCB 0x1
	DCB	0x2
	DCB	0x4
	DCB	0x8
	DCB	0x10

  00000			 AREA	 |.data|, DATA
|?dpCurSettings@@3U_DBGPARAM@@A| DCB "b", 0x0, "a", 0x0, "c", 0x0, "k", 0x0
	DCB	"l", 0x0, "i", 0x0, "g", 0x0, "h", 0x0, "t", 0x0, 0x0, 0x0 ; dpCurSettings
	%	44
	DCB	"B", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "l", 0x0, "i", 0x0
	DCB	"g", 0x0, "h", 0x0, "t", 0x0, 0x0, 0x0
	%	44
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"M", 0x0, "i", 0x0, "s", 0x0, "c", 0x0, 0x0, 0x0
	%	54
	DCB	0x0, 0x0
	%	62
	DCB	0x0, 0x0
	%	62
	DCB	0x0, 0x0
	%	62
	DCB	0x0, 0x0
	%	62
	DCB	0x0, 0x0
	%	62
	DCB	0x0, 0x0
	%	62
	DCB	0x0, 0x0
	%	62
	DCB	0x0, 0x0
	%	62
	DCB	0x0, 0x0
	%	62
	DCB	0x0, 0x0
	%	62
	DCB	0x0, 0x0
	%	62
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, 0x0, 0x0
	%	48
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, 0x0, 0x0
	%	52
	DCD	0xc003
	EXPORT	|?ConvertStringToGuid@@YAHPBGPAU_GUID@@@Z| ; ConvertStringToGuid
	EXPORT	|??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@| [ DATA ] ; `string'
	IMPORT	|swscanf|
	IMPORT	|__C_specific_handler|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\backlight\bkldrvmain.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T32575| DCD	|$LN23@ConvertStr|
	DCD	0xc0003204

  00000			 AREA	 |.pdata|, PDATA
|$T32577| DCD	|$LN9@ConvertStr|
	DCD	0x40000602

  00000			 AREA	 |.xdata|, DATA
|$T32573| DCD	0x1
	DCD	|$LN13@ConvertStr|
	DCD	|$LN14@ConvertStr|
	DCD	|$LN9@ConvertStr|
	DCD	|$LN10@ConvertStr|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@| DCB "{"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, "-"
	DCB	0x0, "%", 0x0, "0", 0x0, "4", 0x0, "X", 0x0, "-", 0x0, "%"
	DCB	0x0, "0", 0x0, "4", 0x0, "X", 0x0, "-", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X"
	DCB	0x0, "-", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, "}", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T32573|

  00008		 |?ConvertStringToGuid@@YAHPBGPAU_GUID@@@Z| PROC ; ConvertStringToGuid

; 69   : {

  00008		 |$LN23@ConvertStr|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5ff0	 stmdb       sp!, {r4 - r12, lr}
  00010	e28db028	 add         r11, sp, #0x28
  00014	e24dd050	 sub         sp, sp, #0x50
  00018		 |$LN21@ConvertStr|
  00018	e1a02001	 mov         r2, r1
  0001c	e50b2050	 str         r2, [r11, #-0x50]

; 70   :     // ConvertStringToGuid
; 71   :     // this routine converts a string into a GUID and returns TRUE if the
; 72   :     // conversion was successful.
; 73   : 
; 74   :     // Local variables.
; 75   :     UINT Data4[8];
; 76   :     int  Count;
; 77   :     BOOL Ok = FALSE;

  00020	e3a03000	 mov         r3, #0
  00024	e50b3054	 str         r3, [r11, #-0x54]
  00028		 |$LN13@ConvertStr|

; 78   :     LPWSTR GuidFormat = L"{%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}";
; 79   : 
; 80   :     DEBUGCHK(Guid != NULL && GuidString != NULL);
; 81   : 
; 82   :     __try 
; 83   :     {
; 84   : 
; 85   :       if (_stscanf(GuidString, GuidFormat, &Guid->Data1, 
; 86   :         &Guid->Data2, &Guid->Data3, &Data4[0], &Data4[1], &Data4[2], &Data4[3], 
; 87   :         &Data4[4], &Data4[5], &Data4[6], &Data4[7]) == 11) 

  00028	e59f10b4	 ldr         r1, [pc, #0xB4]
  0002c	e24be02c	 sub         lr, r11, #0x2C
  00030	e24b4030	 sub         r4, r11, #0x30
  00034	e24b5034	 sub         r5, r11, #0x34
  00038	e24b6038	 sub         r6, r11, #0x38
  0003c	e24b703c	 sub         r7, r11, #0x3C
  00040	e24b8040	 sub         r8, r11, #0x40
  00044	e24b9044	 sub         r9, r11, #0x44
  00048	e24ba048	 sub         r10, r11, #0x48
  0004c	e2823004	 add         r3, r2, #4
  00050	e58de020	 str         lr, [sp, #0x20]
  00054	e58d401c	 str         r4, [sp, #0x1C]
  00058	e58d5018	 str         r5, [sp, #0x18]
  0005c	e58d6014	 str         r6, [sp, #0x14]
  00060	e58d7010	 str         r7, [sp, #0x10]
  00064	e58d800c	 str         r8, [sp, #0xC]
  00068	e58d9008	 str         r9, [sp, #8]
  0006c	e58da004	 str         r10, [sp, #4]
  00070	e51b4050	 ldr         r4, [r11, #-0x50]
  00074	e284e006	 add         lr, r4, #6
  00078	e58de000	 str         lr, [sp]
  0007c	eb000000	 bl          swscanf
  00080	e350000b	 cmp         r0, #0xB
  00084	1a000008	 bne         |$LN1@ConvertStr|

; 88   :       {
; 89   : 
; 90   :           for (Count = 0; Count < (sizeof(Data4) / sizeof(Data4[0])); Count++) 

  00088	e3a01000	 mov         r1, #0
  0008c		 |$LN20@ConvertStr|
  0008c	e50b104c	 str         r1, [r11, #-0x4C]
  00090	e3510008	 cmp         r1, #8

; 91   :           {
; 92   :               Guid->Data4[Count] = (UCHAR) Data4[Count];

  00094	324b3048	 subcc       r3, r11, #0x48
  00098	37932101	 ldrcc       r2, [r3, +r1, lsl #2]
  0009c	30813004	 addcc       r3, r1, r4
  000a0	35c32008	 strccb      r2, [r3, #8]
  000a4	32811001	 addcc       r1, r1, #1

; 88   :       {
; 89   : 
; 90   :           for (Count = 0; Count < (sizeof(Data4) / sizeof(Data4[0])); Count++) 

  000a8	3afffff7	 bcc         |$LN20@ConvertStr|
  000ac		 |$LN1@ConvertStr|

; 93   :           }
; 94   :       }
; 95   : 
; 96   :       Ok = TRUE;

  000ac	e3a00001	 mov         r0, #1
  000b0	e50b0054	 str         r0, [r11, #-0x54]
  000b4		 |$LN14@ConvertStr|

; 97   :     }

  000b4	ea000002	 b           |$LN6@ConvertStr|
  000b8		 |$LN10@ConvertStr|

; 98   :     __except(EXCEPTION_EXECUTE_HANDLER) 

  000b8	e51b0054	 ldr         r0, [r11, #-0x54]
  000bc	ea000000	 b           |$LN6@ConvertStr|
  000c0		 |$LN19@ConvertStr|

; 99   :     {
; 100  :         DEBUGMSG(ZONE_ERROR, (TEXT("exception in convertstringtoguid\r\n")));
; 101  :     }
; 102  : 
; 103  :     return Ok;

  000c0	e51b0050	 ldr         r0, [r11, #-0x50]
  000c4		 |$LN6@ConvertStr|

; 104  : }

  000c4	e24bd028	 sub         sp, r11, #0x28
  000c8	e89d6ff0	 ldmia       sp, {r4 - r11, sp, lr}
  000cc	e12fff1e	 bx          lr

			 ENDP  ; |?ConvertStringToGuid@@YAHPBGPAU_GUID@@@Z|, ConvertStringToGuid

  000d0		 |$LN9@ConvertStr|
  000d0		 |$LN22@ConvertStr|

; 98   :     __except(EXCEPTION_EXECUTE_HANDLER) 

  000d0	e52de004	 str         lr, [sp, #-4]!
  000d4	e24dd024	 sub         sp, sp, #0x24
  000d8		 |$LN12@ConvertStr|
  000d8		 |$LN25@ConvertStr|
  000d8	e3a00001	 mov         r0, #1
  000dc		 |$LN11@ConvertStr|
  000dc	e28dd024	 add         sp, sp, #0x24
  000e0	e49df004	 ldr         pc, [sp], #4
  000e4		 |$LN27@ConvertStr|
  000e4		 |$LN28@ConvertStr|
  000e4	00000000	 DCD         |??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@|
  000e8		 |$LN26@ConvertStr|
  000e8		 |$LN24@ConvertStr|
	EXPORT	|?UpdateACStatus@@YAXPAUBKL_MDD_INFO@@@Z| ; UpdateACStatus
	EXPORT	|??_C@_1FI@GIAHMGCK@?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAA?$AAP?$AAI?$AAR?$AAe?$AAa?$AAd@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|WaitForAPIReady|

  00000			 AREA	 |.pdata|, PDATA
|$T32594| DCD	|$LN15@UpdateACSt|
	DCD	0x40002402

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@GIAHMGCK@?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAA?$AAP?$AAI?$AAR?$AAe?$AAa?$AAd@| DCB "B"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, "l", 0x0, "i", 0x0, "g"
	DCB	0x0, "h", 0x0, "t", 0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r"
	DCB	0x0, "A", 0x0, "P", 0x0, "I", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateACStatus@@YAXPAUBKL_MDD_INFO@@@Z| PROC ; UpdateACStatus

; 110  : {

  00000		 |$LN15@UpdateACSt|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd038	 sub         sp, sp, #0x38
  00008		 |$M32591|
  00008	e1a04000	 mov         r4, r0

; 111  :     SYSTEM_POWER_STATUS_EX2 SysPower;
; 112  : 
; 113  :     static fFirstTime = TRUE;
; 114  : 
; 115  :     // make sure that GWES APIs ready before calling: 
; 116  :     if (WAIT_OBJECT_0 != WaitForAPIReady(SH_GDI, INFINITE))

  0000c	e3e01000	 mvn         r1, #0
  00010	e3a00050	 mov         r0, #0x50
  00014	eb000000	 bl          WaitForAPIReady
  00018	e3500000	 cmp         r0, #0
  0001c	0a000006	 beq         |$LN7@UpdateACSt|

; 117  :     {
; 118  :         RETAILMSG(ZONE_ERROR, (TEXT("Backlight driver: WaitForAPIReady failed.\r\n")));

  00020	e59f3064	 ldr         r3, [pc, #0x64]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130001	 tst         r3, #1
  0002c	0a000012	 beq         |$LN1@UpdateACSt|
  00030	e59f0050	 ldr         r0, [pc, #0x50]
  00034	eb000000	 bl          NKDbgPrintfW

; 119  :         return;

  00038	ea00000f	 b           |$LN1@UpdateACSt|
  0003c		 |$LN7@UpdateACSt|

; 120  :     }
; 121  : 
; 122  :     if (pBKLinfo->pfnGetSystemPowerStatusEx2) 

  0003c	e594322c	 ldr         r3, [r4, #0x22C]
  00040	e3530000	 cmp         r3, #0
  00044	0a00000a	 beq         |$LN6@UpdateACSt|

; 123  :     {
; 124  :         if ((*pBKLinfo->pfnGetSystemPowerStatusEx2)(&SysPower, sizeof(SysPower), FALSE))

  00048	e3a02000	 mov         r2, #0
  0004c	e3a01038	 mov         r1, #0x38
  00050	e28d0000	 add         r0, sp, #0
  00054	e1a0e00f	 mov         lr, pc
  00058	e12fff13	 bx          r3
  0005c	e3500000	 cmp         r0, #0
  00060	0a000005	 beq         |$LN1@UpdateACSt|

; 125  :         {
; 126  :             if (SysPower.ACLineStatus & AC_LINE_ONLINE)

  00064	e5dd3000	 ldrb        r3, [sp]
  00068	e3130001	 tst         r3, #1

; 127  :             {
; 128  :                 pBKLinfo->fOnAC = TRUE;
; 129  :             }
; 130  :             else
; 131  :             {
; 132  :                 pBKLinfo->fOnAC = FALSE;

  0006c	03a03000	 moveq       r3, #0
  00070	0a000000	 beq         |$LN12@UpdateACSt|
  00074		 |$LN6@UpdateACSt|

; 133  :             }
; 134  :         }
; 135  :         else
; 136  :         {
; 137  :             DEBUGMSG(ZONE_BACKLIGHT, (TEXT("GetSystemPowerStstusEx2 failed with error 0x%x.\r\n"), GetLastError()));
; 138  :             
; 139  :         }
; 140  :     }
; 141  :     else 
; 142  :     {
; 143  :         // There are no battery APIs so assume that we are always on AC power.
; 144  :         pBKLinfo->fOnAC = TRUE;

  00074	e3a03001	 mov         r3, #1
  00078		 |$LN12@UpdateACSt|
  00078	e5843210	 str         r3, [r4, #0x210]
  0007c		 |$LN1@UpdateACSt|

; 145  :     }
; 146  :     
; 147  :     return;    
; 148  :     
; 149  : }

  0007c	e28dd038	 add         sp, sp, #0x38
  00080	e8bd4010	 ldmia       sp!, {r4, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN16@UpdateACSt|
  00088		 |$LN17@UpdateACSt|
  00088	00000000	 DCD         |??_C@_1FI@GIAHMGCK@?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAA?$AAP?$AAI?$AAR?$AAe?$AAa?$AAd@|
  0008c		 |$LN18@UpdateACSt|
  0008c	00000000	 DCD         |?dpCurSettings@@3U_DBGPARAM@@A|
  00090		 |$M32592|

			 ENDP  ; |?UpdateACStatus@@YAXPAUBKL_MDD_INFO@@@Z|, UpdateACStatus

	EXPORT	|?GetBestSupportedState@@YAHPAUBKL_MDD_INFO@@W4_CEDEVICE_POWER_STATE@@PAW42@@Z| ; GetBestSupportedState

  00000			 AREA	 |.pdata|, PDATA
|$T32614| DCD	|$LN37@GetBestSup|
	DCD	0x40002900
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetBestSupportedState@@YAHPAUBKL_MDD_INFO@@W4_CEDEVICE_POWER_STATE@@PAW42@@Z| PROC ; GetBestSupportedState

; 166  : {

  00000		 |$LN37@GetBestSup|
  00000		 |$M32611|
  00000	e3510000	 cmp         r1, #0
  00004	e1a03000	 mov         r3, r0

; 167  :     BOOL fRet = TRUE;   // assume there's a suitable state we can go to

  00008	e3a00001	 mov         r0, #1

; 168  :     
; 169  :     switch(ReqDx)

  0000c	0a000021	 beq         |$LN26@GetBestSup|
  00010	e3510001	 cmp         r1, #1
  00014	0a000017	 beq         |$LN25@GetBestSup|
  00018	e3510002	 cmp         r1, #2
  0001c	0a00000f	 beq         |$LN16@GetBestSup|
  00020	e3510003	 cmp         r1, #3
  00024	0a000007	 beq         |$LN9@GetBestSup|
  00028	e3510004	 cmp         r1, #4
  0002c	1a00001b	 bne         |$LN27@GetBestSup|

; 220  :             }
; 221  :             else if(pBKLinfo->ucSupportedStatesMask & DeviceStateMasks[D4])
; 222  :             {
; 223  :                 *SetDx = D4;
; 224  :             }
; 225  :             else
; 226  :             {
; 227  :                 fRet = FALSE;
; 228  :             }
; 229  :             break;
; 230  :         case D4:
; 231  :             if(pBKLinfo->ucSupportedStatesMask & DeviceStateMasks[D4])

  00030	e5d33218	 ldrb        r3, [r3, #0x218]
  00034		 |$LN8@GetBestSup|
  00034	e3130010	 tst         r3, #0x10
  00038	0a000014	 beq         |$LN18@GetBestSup|

; 232  :             {
; 233  :                 *SetDx = D4;

  0003c	e3a03004	 mov         r3, #4

; 170  :     {
; 171  :         case D0:
; 172  :             *SetDx = D0;

  00040	e5823000	 str         r3, [r2]

; 234  :             }
; 235  :             else
; 236  :             {
; 237  :                 fRet = FALSE;
; 238  :             }
; 239  :             break;  
; 240  :         default:
; 241  :             ASSERT(FALSE);
; 242  :             break;
; 243  :             
; 244  :     }   
; 245  : 
; 246  :     return fRet;
; 247  : }

  00044	e12fff1e	 bx          lr
  00048		 |$LN9@GetBestSup|

; 201  :             }
; 202  :             else if(pBKLinfo->ucSupportedStatesMask & DeviceStateMasks[D3])
; 203  :             {
; 204  :                 *SetDx = D3;
; 205  :             }
; 206  :             else if(pBKLinfo->ucSupportedStatesMask & DeviceStateMasks[D4])
; 207  :             {
; 208  :                 *SetDx = D4;
; 209  :             }                       
; 210  :             else
; 211  :             {
; 212  :                 fRet = FALSE;
; 213  :             }
; 214  :             break;
; 215  : 
; 216  :         case D3:
; 217  :             if(pBKLinfo->ucSupportedStatesMask & DeviceStateMasks[D3])

  00048	e5d33218	 ldrb        r3, [r3, #0x218]
  0004c		 |$LN15@GetBestSup|
  0004c	e3130008	 tst         r3, #8
  00050	0afffff7	 beq         |$LN8@GetBestSup|

; 218  :             {
; 219  :                 *SetDx = D3;

  00054	e3a03003	 mov         r3, #3

; 170  :     {
; 171  :         case D0:
; 172  :             *SetDx = D0;

  00058	e5823000	 str         r3, [r2]

; 234  :             }
; 235  :             else
; 236  :             {
; 237  :                 fRet = FALSE;
; 238  :             }
; 239  :             break;  
; 240  :         default:
; 241  :             ASSERT(FALSE);
; 242  :             break;
; 243  :             
; 244  :     }   
; 245  : 
; 246  :     return fRet;
; 247  : }

  0005c	e12fff1e	 bx          lr
  00060		 |$LN16@GetBestSup|

; 194  :             }
; 195  :             break;
; 196  :         
; 197  :         case D2:
; 198  :             if(pBKLinfo->ucSupportedStatesMask & DeviceStateMasks[D2])

  00060	e5d33218	 ldrb        r3, [r3, #0x218]
  00064		 |$LN24@GetBestSup|
  00064	e3130004	 tst         r3, #4
  00068	0afffff7	 beq         |$LN15@GetBestSup|

; 199  :             {
; 200  :                 *SetDx = D2;

  0006c	e3a03002	 mov         r3, #2

; 170  :     {
; 171  :         case D0:
; 172  :             *SetDx = D0;

  00070	e5823000	 str         r3, [r2]

; 234  :             }
; 235  :             else
; 236  :             {
; 237  :                 fRet = FALSE;
; 238  :             }
; 239  :             break;  
; 240  :         default:
; 241  :             ASSERT(FALSE);
; 242  :             break;
; 243  :             
; 244  :     }   
; 245  : 
; 246  :     return fRet;
; 247  : }

  00074	e12fff1e	 bx          lr
  00078		 |$LN25@GetBestSup|

; 173  :             break;
; 174  :         case D1:
; 175  :             if(pBKLinfo->ucSupportedStatesMask & DeviceStateMasks[D1])

  00078	e5d33218	 ldrb        r3, [r3, #0x218]
  0007c	e3130002	 tst         r3, #2
  00080	0afffff7	 beq         |$LN24@GetBestSup|

; 176  :             {
; 177  :                 *SetDx = D1;

  00084	e3a03001	 mov         r3, #1

; 170  :     {
; 171  :         case D0:
; 172  :             *SetDx = D0;

  00088	e5823000	 str         r3, [r2]

; 234  :             }
; 235  :             else
; 236  :             {
; 237  :                 fRet = FALSE;
; 238  :             }
; 239  :             break;  
; 240  :         default:
; 241  :             ASSERT(FALSE);
; 242  :             break;
; 243  :             
; 244  :     }   
; 245  : 
; 246  :     return fRet;
; 247  : }

  0008c	e12fff1e	 bx          lr
  00090		 |$LN18@GetBestSup|

; 178  :             }            
; 179  :             else if(pBKLinfo->ucSupportedStatesMask & DeviceStateMasks[D2])
; 180  :             {
; 181  :                 *SetDx = D2;
; 182  :             }
; 183  :             else if(pBKLinfo->ucSupportedStatesMask & DeviceStateMasks[D3])
; 184  :             {
; 185  :                 *SetDx = D3;
; 186  :             }
; 187  :             else if(pBKLinfo->ucSupportedStatesMask & DeviceStateMasks[D4])
; 188  :             {
; 189  :                 *SetDx = D4;
; 190  :             }
; 191  :             else
; 192  :             {
; 193  :                 fRet = FALSE;

  00090	e3a00000	 mov         r0, #0

; 234  :             }
; 235  :             else
; 236  :             {
; 237  :                 fRet = FALSE;
; 238  :             }
; 239  :             break;  
; 240  :         default:
; 241  :             ASSERT(FALSE);
; 242  :             break;
; 243  :             
; 244  :     }   
; 245  : 
; 246  :     return fRet;
; 247  : }

  00094	e12fff1e	 bx          lr
  00098		 |$LN26@GetBestSup|

; 170  :     {
; 171  :         case D0:
; 172  :             *SetDx = D0;

  00098	e3a03000	 mov         r3, #0
  0009c	e5823000	 str         r3, [r2]
  000a0		 |$LN27@GetBestSup|

; 234  :             }
; 235  :             else
; 236  :             {
; 237  :                 fRet = FALSE;
; 238  :             }
; 239  :             break;  
; 240  :         default:
; 241  :             ASSERT(FALSE);
; 242  :             break;
; 243  :             
; 244  :     }   
; 245  : 
; 246  :     return fRet;
; 247  : }

  000a0	e12fff1e	 bx          lr
  000a4		 |$M32612|

			 ENDP  ; |?GetBestSupportedState@@YAHPAUBKL_MDD_INFO@@W4_CEDEVICE_POWER_STATE@@PAW42@@Z|, GetBestSupportedState

	EXPORT	|?IsTapOn@@YAHPAUBKL_MDD_INFO@@@Z|	; IsTapOn

  00000			 AREA	 |.pdata|, PDATA
|$T32630| DCD	|$LN13@IsTapOn|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsTapOn@@YAHPAUBKL_MDD_INFO@@@Z| PROC ; IsTapOn

; 253  : {

  00000		 |$LN13@IsTapOn|
  00000		 |$M32627|

; 254  :     if(pBKLinfo->fOnAC)

  00000	e5903210	 ldr         r3, [r0, #0x210]
  00004	e3530000	 cmp         r3, #0

; 255  :     {
; 256  :         return (pBKLinfo->fExternalTapOn? TRUE : FALSE);

  00008	15903204	 ldrne       r3, [r0, #0x204]

; 257  :     }
; 258  :     else
; 259  :     {
; 260  :         return (pBKLinfo->fBatteryTapOn? TRUE : FALSE);

  0000c	05903200	 ldreq       r3, [r0, #0x200]
  00010	e3530000	 cmp         r3, #0
  00014	13a00001	 movne       r0, #1
  00018	03a00000	 moveq       r0, #0

; 261  :     }
; 262  :     
; 263  : }

  0001c	e12fff1e	 bx          lr
  00020		 |$M32628|

			 ENDP  ; |?IsTapOn@@YAHPAUBKL_MDD_INFO@@@Z|, IsTapOn

	EXPORT	|?GetTimeout@@YAKPAUBKL_MDD_INFO@@@Z|	; GetTimeout

  00000			 AREA	 |.pdata|, PDATA
|$T32640| DCD	|$LN7@GetTimeout|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetTimeout@@YAKPAUBKL_MDD_INFO@@@Z| PROC ; GetTimeout

; 266  : {

  00000		 |$LN7@GetTimeout|
  00000		 |$M32637|

; 267  :     if(pBKLinfo->fOnAC)

  00000	e5903210	 ldr         r3, [r0, #0x210]
  00004	e3530000	 cmp         r3, #0

; 268  :     {
; 269  :         return pBKLinfo->dwACTimeout;        

  00008	1590020c	 ldrne       r0, [r0, #0x20C]

; 270  :     }
; 271  :     else
; 272  :     {
; 273  :         return pBKLinfo->dwBattTimeout;        

  0000c	05900208	 ldreq       r0, [r0, #0x208]

; 274  :     }
; 275  : 
; 276  : }

  00010	e12fff1e	 bx          lr
  00014		 |$M32638|

			 ENDP  ; |?GetTimeout@@YAKPAUBKL_MDD_INFO@@@Z|, GetTimeout

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?BacklightUpdateMDDRegSettings@@YAXPAUBKL_MDD_INFO@@@Z| ; BacklightUpdateMDDRegSettings
	EXPORT	|??_C@_1BE@PJBHBNNG@?$AAA?$AAC?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@PELGLPFE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@FKEHPNLB@?$AAA?$AAC?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AAO?$AAn?$AAT?$AAa?$AAp?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@BFBCCLIP@?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AAO?$AAn?$AAT?$AAa?$AAp?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@MGKPHPG@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?2?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|RegCloseKey|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T32656| DCD	|$LN12@BacklightU|
	DCD	0xc0005e02

  00000			 AREA	 |.xdata|, DATA
|$T32652| DCD	0xffffffe8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@PJBHBNNG@?$AAA?$AAC?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| DCB "A"
	DCB	0x0, "C", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@PELGLPFE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| DCB "B"
	DCB	0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "y"
	DCB	0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u"
	DCB	0x0, "t", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@FKEHPNLB@?$AAA?$AAC?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AAO?$AAn?$AAT?$AAa?$AAp?$AA?$AA@| DCB "A"
	DCB	0x0, "C", 0x0, "B", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "l"
	DCB	0x0, "i", 0x0, "g", 0x0, "h", 0x0, "t", 0x0, "O", 0x0, "n"
	DCB	0x0, "T", 0x0, "a", 0x0, "p", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@BFBCCLIP@?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AAO?$AAn?$AAT?$AAa?$AAp?$AA?$AA@| DCB "B"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, "l", 0x0, "i", 0x0, "g"
	DCB	0x0, "h", 0x0, "t", 0x0, "O", 0x0, "n", 0x0, "T", 0x0, "a"
	DCB	0x0, "p", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@MGKPHPG@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?2?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?$AA@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "P", 0x0, "a", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "\\"
	DCB	0x0, "B", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "l", 0x0, "i"
	DCB	0x0, "g", 0x0, "h", 0x0, "t", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T32652|

  00008		 |?BacklightUpdateMDDRegSettings@@YAXPAUBKL_MDD_INFO@@@Z| PROC ; BacklightUpdateMDDRegSettings

; 282  : {

  00008		 |$LN12@BacklightU|
  00008	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  0000c	e24ddf47	 sub         sp, sp, #0x47, 30
  00010		 |$M32653|
  00010	e1a05000	 mov         r5, r0
  00014	e59f3160	 ldr         r3, [pc, #0x160]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3118	 str         r3, [sp, #0x118]

; 283  :     DWORD   retCode;
; 284  :     BYTE    ValueData[MAX_PATH];
; 285  :     DWORD    dwType;
; 286  :     void    *bData = ValueData;
; 287  :     DWORD   cbData;
; 288  :     HKEY    hKey;
; 289  : 
; 290  :     DEBUGMSG(ZONE_BACKLIGHT,(TEXT("+BacklightReadMDDReg\r\n")));
; 291  :     retCode = RegOpenKeyEx (HKEY_CURRENT_USER, BACKLIGHT_REGKEY, 0, KEY_ALL_ACCESS, &hKey);

  00020	e59f1150	 ldr         r1, [pc, #0x150]
  00024	e3a0380f	 mov         r3, #0xF, 16
  00028	e28de010	 add         lr, sp, #0x10
  0002c	e383303f	 orr         r3, r3, #0x3F
  00030	e3a02000	 mov         r2, #0
  00034	e3a00106	 mov         r0, #6, 2
  00038	e58de000	 str         lr, [sp]
  0003c	eb000000	 bl          RegOpenKeyExW
  00040	e3500000	 cmp         r0, #0

; 292  :     if (retCode == ERROR_SUCCESS)

  00044	1a00003f	 bne         |$exit$32368|

; 293  :     {
; 294  :         //Battery Tap
; 295  :         dwType=REG_DWORD;
; 296  :         cbData = MAX_PATH;
; 297  :         retCode = RegQueryValueEx(hKey, TEXT("BacklightOnTap"), NULL, &dwType, (LPBYTE) bData, (LPDWORD)&cbData);

  00048	e59f1124	 ldr         r1, [pc, #0x124]
  0004c	e59d0010	 ldr         r0, [sp, #0x10]
  00050	e3a06004	 mov         r6, #4
  00054	e3a07f41	 mov         r7, #0x41, 30
  00058	e28de008	 add         lr, sp, #8
  0005c	e28d4014	 add         r4, sp, #0x14
  00060	e28d300c	 add         r3, sp, #0xC
  00064	e3a02000	 mov         r2, #0
  00068	e58d600c	 str         r6, [sp, #0xC]
  0006c	e58d7008	 str         r7, [sp, #8]
  00070	e58de004	 str         lr, [sp, #4]
  00074	e58d4000	 str         r4, [sp]
  00078	eb000000	 bl          RegQueryValueExW
  0007c	e3500000	 cmp         r0, #0

; 298  :         if (retCode == ERROR_SUCCESS)
; 299  :         {
; 300  :             pBKLinfo->fBatteryTapOn = (*(DWORD *)bData );

  00080	059d3014	 ldreq       r3, [sp, #0x14]

; 301  :         }
; 302  :         //External Tap
; 303  :         dwType=REG_DWORD;
; 304  :         cbData = MAX_PATH;
; 305  :         retCode = RegQueryValueEx(hKey, TEXT("ACBacklightOnTap"), NULL, &dwType, (LPBYTE) bData, (LPDWORD)&cbData);

  00084	e59f10e4	 ldr         r1, [pc, #0xE4]
  00088	e59d0010	 ldr         r0, [sp, #0x10]
  0008c	05853200	 streq       r3, [r5, #0x200]
  00090	e3a06004	 mov         r6, #4
  00094	e3a07f41	 mov         r7, #0x41, 30
  00098	e28de008	 add         lr, sp, #8
  0009c	e28d4014	 add         r4, sp, #0x14
  000a0	e28d300c	 add         r3, sp, #0xC
  000a4	e3a02000	 mov         r2, #0
  000a8	e58d600c	 str         r6, [sp, #0xC]
  000ac	e58d7008	 str         r7, [sp, #8]
  000b0	e58de004	 str         lr, [sp, #4]
  000b4	e58d4000	 str         r4, [sp]
  000b8	eb000000	 bl          RegQueryValueExW
  000bc	e3500000	 cmp         r0, #0

; 306  :         if (retCode == ERROR_SUCCESS)
; 307  :         {
; 308  :             pBKLinfo->fExternalTapOn = (*(DWORD *)bData );

  000c0	059d3014	 ldreq       r3, [sp, #0x14]

; 309  :         }
; 310  :         //Backlight on battery timeout (we may need to turn the backlight off)
; 311  :         dwType=REG_DWORD;
; 312  :         cbData = MAX_PATH;
; 313  :         retCode = RegQueryValueEx(hKey, TEXT("BatteryTimeout"), NULL, &dwType, (LPBYTE) bData, (LPDWORD)&cbData);

  000c4	e59f10a0	 ldr         r1, [pc, #0xA0]
  000c8	e59d0010	 ldr         r0, [sp, #0x10]
  000cc	05853204	 streq       r3, [r5, #0x204]
  000d0	e3a06004	 mov         r6, #4
  000d4	e3a07f41	 mov         r7, #0x41, 30
  000d8	e28de008	 add         lr, sp, #8
  000dc	e28d4014	 add         r4, sp, #0x14
  000e0	e28d300c	 add         r3, sp, #0xC
  000e4	e3a02000	 mov         r2, #0
  000e8	e58d600c	 str         r6, [sp, #0xC]
  000ec	e58d7008	 str         r7, [sp, #8]
  000f0	e58de004	 str         lr, [sp, #4]
  000f4	e58d4000	 str         r4, [sp]
  000f8	eb000000	 bl          RegQueryValueExW
  000fc	e3500000	 cmp         r0, #0

; 314  :         if (retCode == ERROR_SUCCESS)
; 315  :         {
; 316  :             pBKLinfo->dwBattTimeout = (*(DWORD *)bData );

  00100	059d3014	 ldreq       r3, [sp, #0x14]

; 317  :         }
; 318  :         //Backlight on AC timeout
; 319  :         dwType=REG_DWORD;
; 320  :         cbData = MAX_PATH;        
; 321  :         retCode = RegQueryValueEx(hKey, TEXT("ACTimeout"), NULL, &dwType, (LPBYTE) bData, (LPDWORD)&cbData);

  00104	e59f105c	 ldr         r1, [pc, #0x5C]
  00108	e59d0010	 ldr         r0, [sp, #0x10]
  0010c	05853208	 streq       r3, [r5, #0x208]
  00110	e3a06004	 mov         r6, #4
  00114	e3a07f41	 mov         r7, #0x41, 30
  00118	e28de008	 add         lr, sp, #8
  0011c	e28d4014	 add         r4, sp, #0x14
  00120	e28d300c	 add         r3, sp, #0xC
  00124	e3a02000	 mov         r2, #0
  00128	e58d600c	 str         r6, [sp, #0xC]
  0012c	e58d7008	 str         r7, [sp, #8]
  00130	e58de004	 str         lr, [sp, #4]
  00134	e58d4000	 str         r4, [sp]
  00138	eb000000	 bl          RegQueryValueExW
  0013c	e3500000	 cmp         r0, #0

; 322  :         if (retCode == ERROR_SUCCESS)
; 323  :         {
; 324  :             pBKLinfo->dwACTimeout = (*(DWORD *)bData );

  00140	059d3014	 ldreq       r3, [sp, #0x14]
  00144	0585320c	 streq       r3, [r5, #0x20C]
  00148		 |$exit$32368|

; 325  :         }
; 326  :         
; 327  :     }
; 328  : 
; 329  :     goto exit;
; 330  :     
; 331  : exit:
; 332  :     if(hKey)

  00148	e59d0010	 ldr         r0, [sp, #0x10]
  0014c	e3500000	 cmp         r0, #0

; 333  :     {
; 334  :         RegCloseKey(hKey);

  00150	1b000000	 blne        RegCloseKey
  00154	e59d0118	 ldr         r0, [sp, #0x118]
  00158	eb000000	 bl          __security_check_cookie

; 335  :     }
; 336  : 
; 337  :     DEBUGMSG(ZONE_BACKLIGHT,(TEXT("-BacklightReadMDDReg\r\n")));
; 338  :     
; 339  : }

  0015c	e28ddf47	 add         sp, sp, #0x47, 30
  00160	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00164	e12fff1e	 bx          lr
  00168		 |$LN13@BacklightU|
  00168		 |$LN14@BacklightU|
  00168	00000000	 DCD         |??_C@_1BE@PJBHBNNG@?$AAA?$AAC?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@|
  0016c		 |$LN15@BacklightU|
  0016c	00000000	 DCD         |??_C@_1BO@PELGLPFE@?$AAB?$AAa?$AAt?$AAt?$AAe?$AAr?$AAy?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@|
  00170		 |$LN16@BacklightU|
  00170	00000000	 DCD         |??_C@_1CC@FKEHPNLB@?$AAA?$AAC?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AAO?$AAn?$AAT?$AAa?$AAp?$AA?$AA@|
  00174		 |$LN17@BacklightU|
  00174	00000000	 DCD         |??_C@_1BO@BFBCCLIP@?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AAO?$AAn?$AAT?$AAa?$AAp?$AA?$AA@|
  00178		 |$LN18@BacklightU|
  00178	00000000	 DCD         |??_C@_1CO@MGKPHPG@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?2?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?$AA@|
  0017c		 |$LN19@BacklightU|
  0017c	00000000	 DCD         |__security_cookie|
  00180		 |$M32654|

			 ENDP  ; |?BacklightUpdateMDDRegSettings@@YAXPAUBKL_MDD_INFO@@@Z|, BacklightUpdateMDDRegSettings

	EXPORT	|?BKL_SetDevicePower@@YAXPAUBKL_MDD_INFO@@W4_CEDEVICE_POWER_STATE@@@Z| ; BKL_SetDevicePower
	IMPORT	|SetDevicePower|

  00000			 AREA	 |.pdata|, PDATA
|$T32673| DCD	|$LN5@BKL_SetDev|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?BKL_SetDevicePower@@YAXPAUBKL_MDD_INFO@@W4_CEDEVICE_POWER_STATE@@@Z| PROC ; BKL_SetDevicePower

; 347  : {

  00000		 |$LN5@BKL_SetDev|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M32670|
  00004	e1a02001	 mov         r2, r1

; 348  :     SetDevicePower(pBKLinfo->szName, POWER_NAME, bklPowerState);

  00008	e3a01001	 mov         r1, #1
  0000c	eb000000	 bl          SetDevicePower

; 349  :     
; 350  :     return;
; 351  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M32671|

			 ENDP  ; |?BKL_SetDevicePower@@YAXPAUBKL_MDD_INFO@@W4_CEDEVICE_POWER_STATE@@@Z|, BKL_SetDevicePower

	EXPORT	|?UpdateBacklight@@YAXPAUBKL_MDD_INFO@@K@Z| ; UpdateBacklight

  00000			 AREA	 |.pdata|, PDATA
|$T32747| DCD	|$LN53@UpdateBack|
	DCD	0x40004001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateBacklight@@YAXPAUBKL_MDD_INFO@@K@Z| PROC ; UpdateBacklight

; 358  : {

  00000		 |$LN53@UpdateBack|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M32744|
  00004	e1a04000	 mov         r4, r0

; 359  :     BOOL    fTapOnPrev, fTapOnNew;
; 360  :     DWORD   dwTimeoutPrev, dwTimeoutNew;
; 361  :     BOOL    fSetPowerOff = FALSE;
; 362  :     BOOL    fReleasePwrOff = FALSE;
; 363  :     
; 364  :     fTapOnPrev = IsTapOn(pBKLinfo);

  00008	e5943210	 ldr         r3, [r4, #0x210]
  0000c	e1b02003	 movs        r2, r3
  00010	15943204	 ldrne       r3, [r4, #0x204]
  00014	05943200	 ldreq       r3, [r4, #0x200]
  00018	e3530000	 cmp         r3, #0
  0001c	13a05001	 movne       r5, #1
  00020	03a05000	 moveq       r5, #0

; 365  :     dwTimeoutPrev = GetTimeout(pBKLinfo);

  00024	e3520000	 cmp         r2, #0
  00028	1594620c	 ldrne       r6, [r4, #0x20C]
  0002c	05946208	 ldreq       r6, [r4, #0x208]

; 366  : 
; 367  :     switch(dwReason)

  00030	e3510000	 cmp         r1, #0
  00034	0a000004	 beq         |$LN5@UpdateBack|
  00038	e3510001	 cmp         r1, #1
  0003c	1a000004	 bne         |$LN6@UpdateBack|

; 372  :             break;
; 373  : 
; 374  :         case BKL_EVENT_POWER_MSG:
; 375  :             // AC Status changed?
; 376  :             UpdateACStatus(pBKLinfo);

  00040	e1a00004	 mov         r0, r4
  00044	eb000000	 bl          |?UpdateACStatus@@YAXPAUBKL_MDD_INFO@@@Z|

; 377  :             break;

  00048	ea000001	 b           |$LN6@UpdateBack|
  0004c		 |$LN5@UpdateBack|

; 368  :     {
; 369  :         case BKL_EVENT_REG:
; 370  :             // Have registry keys changed?
; 371  :             BacklightUpdateMDDRegSettings(pBKLinfo);  

  0004c	e1a00004	 mov         r0, r4
  00050	eb000000	 bl          |?BacklightUpdateMDDRegSettings@@YAXPAUBKL_MDD_INFO@@@Z|
  00054		 |$LN6@UpdateBack|

; 378  :     };
; 379  :     
; 380  :     dwTimeoutNew = GetTimeout(pBKLinfo);

  00054	e5943210	 ldr         r3, [r4, #0x210]
  00058	e3530000	 cmp         r3, #0
  0005c	1594120c	 ldrne       r1, [r4, #0x20C]
  00060	05941208	 ldreq       r1, [r4, #0x208]

; 381  :     fTapOnNew = IsTapOn(pBKLinfo);

  00064	e3530000	 cmp         r3, #0
  00068	15943204	 ldrne       r3, [r4, #0x204]
  0006c	05943200	 ldreq       r3, [r4, #0x200]
  00070	e3530000	 cmp         r3, #0
  00074	13a03001	 movne       r3, #1
  00078	03a03000	 moveq       r3, #0

; 382  :     
; 383  :     // 'Tap On' settings just unchecked or 'Turn off backlight' timer option just selected:
; 384  :     fSetPowerOff = ( ((dwTimeoutPrev != TURNOFFIMMEDIATELY) && (dwTimeoutNew == TURNOFFIMMEDIATELY)) \
; 385  :                     || ((fTapOnPrev && !fTapOnNew)));

  0007c	e3760001	 cmn         r6, #1
  00080	0a000001	 beq         |$LN10@UpdateBack|
  00084	e3710001	 cmn         r1, #1
  00088	0a000003	 beq         |$LN12@UpdateBack|
  0008c		 |$LN10@UpdateBack|
  0008c	e3550000	 cmp         r5, #0
  00090	0a000003	 beq         |$LN11@UpdateBack|
  00094	e3530000	 cmp         r3, #0
  00098	1a000001	 bne         |$LN11@UpdateBack|
  0009c		 |$LN12@UpdateBack|
  0009c	e3a02001	 mov         r2, #1
  000a0	ea000000	 b           |$LN13@UpdateBack|
  000a4		 |$LN11@UpdateBack|
  000a4	e3a02000	 mov         r2, #0
  000a8		 |$LN13@UpdateBack|

; 386  :     // 'Tap On' setting just checked or 'Turn off backlight' timer option just deselected:
; 387  :     fReleasePwrOff = (((dwTimeoutPrev == TURNOFFIMMEDIATELY) && (dwTimeoutNew != TURNOFFIMMEDIATELY) ) \
; 388  :                     || (!fTapOnPrev && fTapOnNew));

  000a8	e3760001	 cmn         r6, #1
  000ac	1a000001	 bne         |$LN14@UpdateBack|
  000b0	e3710001	 cmn         r1, #1
  000b4	1a000003	 bne         |$LN16@UpdateBack|
  000b8		 |$LN14@UpdateBack|
  000b8	e3550000	 cmp         r5, #0
  000bc	1a000003	 bne         |$LN15@UpdateBack|
  000c0	e3530000	 cmp         r3, #0
  000c4	0a000001	 beq         |$LN15@UpdateBack|
  000c8		 |$LN16@UpdateBack|
  000c8	e3a03001	 mov         r3, #1
  000cc	ea000000	 b           |$LN17@UpdateBack|
  000d0		 |$LN15@UpdateBack|
  000d0	e3a03000	 mov         r3, #0
  000d4		 |$LN17@UpdateBack|

; 389  :     
; 390  :     if(fSetPowerOff)   

  000d4	e3520000	 cmp         r2, #0

; 391  :     {
; 392  :         BKL_SetDevicePower(pBKLinfo, D4);

  000d8	13a02004	 movne       r2, #4
  000dc	1a000002	 bne         |$LN50@UpdateBack|

; 393  :     }
; 394  :     else if (fReleasePwrOff) 

  000e0	e3530000	 cmp         r3, #0
  000e4	0a000003	 beq         |$LN44@UpdateBack|

; 395  :     {
; 396  :         BKL_SetDevicePower(pBKLinfo, PwrDeviceUnspecified);

  000e8	e3e02000	 mvn         r2, #0
  000ec		 |$LN50@UpdateBack|
  000ec	e3a01001	 mov         r1, #1
  000f0	e1a00004	 mov         r0, r4
  000f4	eb000000	 bl          SetDevicePower
  000f8		 |$LN44@UpdateBack|

; 397  :     }
; 398  :     
; 399  : 
; 400  : }

  000f8	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000fc	e12fff1e	 bx          lr
  00100		 |$M32745|

			 ENDP  ; |?UpdateBacklight@@YAXPAUBKL_MDD_INFO@@K@Z|, UpdateBacklight

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?fnBackLightThread@@YAKPAX@Z|		; fnBackLightThread
	EXPORT	|??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@| [ DATA ] ; `string'
	IMPORT	|CeFindNextRegChange|
	IMPORT	|CeFindCloseRegChange|
	IMPORT	|StopDeviceNotifications|
	IMPORT	|CloseMsgQueue|
	IMPORT	|StopPowerNotifications|
	IMPORT	|ReadMsgQueue|
	IMPORT	|WaitForMultipleObjects|
	IMPORT	|?g_pBacklight@@3PAVCBacklightRoot@@A|	; g_pBacklight
	IMPORT	|CeFindFirstRegChange|
	IMPORT	|RequestDeviceNotifications|
	IMPORT	|RequestPowerNotifications|
	IMPORT	|CreateMsgQueue|
	IMPORT	|memcpy|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T32775| DCD	|$LN49@fnBackLigh|
	DCD	0xc000b802

  00000			 AREA	 |.xdata|, DATA
|$T32771| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@| DCB "{"
	DCB	0x0, "E", 0x0, "B", 0x0, "9", 0x0, "1", 0x0, "C", 0x0, "7"
	DCB	0x0, "C", 0x0, "9", 0x0, "-", 0x0, "8", 0x0, "B", 0x0, "F"
	DCB	0x0, "6", 0x0, "-", 0x0, "4", 0x0, "a", 0x0, "2", 0x0, "d"
	DCB	0x0, "-", 0x0, "9", 0x0, "A", 0x0, "B", 0x0, "8", 0x0, "-"
	DCB	0x0, "6", 0x0, "9", 0x0, "7", 0x0, "2", 0x0, "4", 0x0, "E"
	DCB	0x0, "E", 0x0, "D", 0x0, "9", 0x0, "7", 0x0, "D", 0x0, "1"
	DCB	0x0, "}", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T32771|

  00008		 |?fnBackLightThread@@YAKPAX@Z| PROC	; fnBackLightThread

; 408  : { 

  00008		 |$LN49@fnBackLigh|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddf61	 sub         sp, sp, #0x61, 30
  00010		 |$M32772|
  00010	e59f32cc	 ldr         r3, [pc, #0x2CC]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3180	 str         r3, [sp, #0x180]

; 409  :     DWORD    dwResult;
; 410  :     MSGQUEUEOPTIONS msgopts;
; 411  :     HANDLE  hPwrNotification = NULL;
; 412  :     HANDLE  hPowerNotificationMsgs = NULL;    
; 413  :     HKEY    hKey = NULL;

  0001c	e3a03000	 mov         r3, #0
  00020	e58d3008	 str         r3, [sp, #8]
  00024	e1b06000	 movs        r6, r0

; 414  :     HANDLE  WaitEvents[BKL_NUM_EVENTS];    
; 415  :     HANDLE  hEventRegistryChange = NULL;

  00028	e3a04000	 mov         r4, #0

; 416  :     DWORD   dwSize;    
; 417  :     DWORD   dwFlags;
; 418  :     HANDLE  hDisplayNotifications = NULL;

  0002c	e3a08000	 mov         r8, #0

; 419  :     HANDLE  hDisplayNotificationMsgs = NULL;

  00030	e3a05000	 mov         r5, #0

; 420  :     GUID    idInterface;
; 421  :     BKL_MDD_INFO *pBKLinfo = NULL;
; 422  :     
; 423  :     DEBUGMSG(ZONE_BACKLIGHT,(TEXT("+fnBackLightRegThread\r\n")));
; 424  : 
; 425  :     // Verify context
; 426  :     if(! pvArgument)
; 427  :     {
; 428  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: BacklightThread: "
; 429  :             L"Incorrect context paramer\r\n" ));
; 430  : 
; 431  :         return FALSE;

  00034	0a00008a	 beq         |$LN1@fnBackLigh|

; 432  :     }
; 433  : 
; 434  :     pBKLinfo = (BKL_MDD_INFO*) pvArgument;
; 435  : 
; 436  : 
; 437  :     // create msg queue for power status change notification (AC->Battery and vice versa)
; 438  :     memset(&msgopts, 0, sizeof(msgopts));

  00038	e3a02014	 mov         r2, #0x14
  0003c	e3a01000	 mov         r1, #0
  00040	e28d001c	 add         r0, sp, #0x1C
  00044	eb000000	 bl          memset

; 439  :     msgopts.dwSize = sizeof(msgopts);
; 440  :     msgopts.dwFlags = 0;
; 441  :     msgopts.dwMaxMessages = 0;                  // no max number of messages

  00048	e3a01000	 mov         r1, #0

; 442  :     msgopts.cbMaxMessage = sizeof(POWER_BROADCAST);   // max size of each msg

  0004c	e3a00010	 mov         r0, #0x10

; 443  :     msgopts.bReadAccess = TRUE;

  00050	e58d1024	 str         r1, [sp, #0x24]
  00054	e58d0028	 str         r0, [sp, #0x28]
  00058	e3a03014	 mov         r3, #0x14
  0005c	e3a02000	 mov         r2, #0
  00060	e3a0e001	 mov         lr, #1

; 444  :     hPowerNotificationMsgs = CreateMsgQueue(NULL, &msgopts);

  00064	e28d101c	 add         r1, sp, #0x1C
  00068	e3a00000	 mov         r0, #0
  0006c	e58d301c	 str         r3, [sp, #0x1C]
  00070	e58d2020	 str         r2, [sp, #0x20]
  00074	e58de02c	 str         lr, [sp, #0x2C]
  00078	eb000000	 bl          CreateMsgQueue
  0007c	e1b09000	 movs        r9, r0

; 445  : 
; 446  :     if (!hPowerNotificationMsgs) 

  00080	0a000074	 beq         |$LN2@fnBackLigh|

; 447  :     {
; 448  :         DEBUGMSG(ZONE_ERROR, (TEXT("BKL: Create message queue failed\r\n")));
; 449  :         goto exit;
; 450  :     }
; 451  :     // request notification of power status changes:
; 452  :     hPwrNotification = RequestPowerNotifications(hPowerNotificationMsgs, PBT_POWERSTATUSCHANGE);

  00084	e3a01004	 mov         r1, #4
  00088	e1a00009	 mov         r0, r9
  0008c	eb000000	 bl          RequestPowerNotifications
  00090	e1b0a000	 movs        r10, r0
  00094	e58da010	 str         r10, [sp, #0x10]

; 453  :     if (!hPwrNotification) 

  00098	0a000063	 beq         |$LN6@fnBackLigh|

; 454  :     {
; 455  :         DEBUGMSG(ZONE_ERROR, (TEXT("BKL: register power notification failed\r\n")));
; 456  :         goto exit;
; 457  :     }
; 458  : 
; 459  :     // create msg queue for display device interface notifications:
; 460  :     msgopts.cbMaxMessage = PNP_QUEUE_SIZE;

  0009c	e3a03e12	 mov         r3, #0x12, 28

; 461  :     hDisplayNotificationMsgs = CreateMsgQueue(NULL, &msgopts);

  000a0	e28d101c	 add         r1, sp, #0x1C
  000a4	e3a00000	 mov         r0, #0
  000a8	e58d3028	 str         r3, [sp, #0x28]
  000ac	eb000000	 bl          CreateMsgQueue
  000b0	e1b05000	 movs        r5, r0

; 462  :     if (!hDisplayNotificationMsgs) 

  000b4	0a00005a	 beq         |$exit$32419|

; 463  :     {
; 464  :         DEBUGMSG(ZONE_ERROR, (TEXT("BKL: Create message queue failed\r\n")));
; 465  :         goto exit;
; 466  :     }
; 467  : 
; 468  :     if(!ConvertStringToGuid(PMCLASS_DISPLAY, &idInterface)) 

  000b8	e59f0220	 ldr         r0, [pc, #0x220]
  000bc	e28d1040	 add         r1, sp, #0x40
  000c0	eb000000	 bl          |?ConvertStringToGuid@@YAHPBGPAU_GUID@@@Z|
  000c4	e3500000	 cmp         r0, #0
  000c8	0a000055	 beq         |$exit$32419|

; 469  :     {
; 470  :         DEBUGMSG(ZONE_ERROR, (TEXT("can't convert PMCLASS_DISPLAY string to GUID\r\n")));  
; 471  :         goto exit;
; 472  :     }
; 473  : 
; 474  :     hDisplayNotifications = RequestDeviceNotifications(&idInterface, hDisplayNotificationMsgs, TRUE);

  000cc	e3a02001	 mov         r2, #1
  000d0	e1a01005	 mov         r1, r5
  000d4	e28d0040	 add         r0, sp, #0x40
  000d8	eb000000	 bl          RequestDeviceNotifications
  000dc	e1b08000	 movs        r8, r0
  000e0	e58d8018	 str         r8, [sp, #0x18]

; 475  :     // get display driver name (required to keep display driver on with SetPowerRequirement):
; 476  :     if(!hDisplayNotifications)

  000e4	0a00004e	 beq         |$exit$32419|

; 477  :     {
; 478  :         DEBUGMSG(ZONE_ERROR, (TEXT("RequestDeviceNotifications failed\r\n")));
; 479  :         goto exit;
; 480  :     }    
; 481  :     
; 482  :     dwResult = RegOpenKeyEx(HKEY_CURRENT_USER, BACKLIGHT_REGKEY, 0, KEY_NOTIFY, &hKey);

  000e8	e59f11ec	 ldr         r1, [pc, #0x1EC]
  000ec	e28de008	 add         lr, sp, #8
  000f0	e3a03010	 mov         r3, #0x10
  000f4	e3a02000	 mov         r2, #0
  000f8	e3a00106	 mov         r0, #6, 2
  000fc	e58de000	 str         lr, [sp]
  00100	eb000000	 bl          RegOpenKeyExW
  00104	e3500000	 cmp         r0, #0

; 483  :     if(ERROR_SUCCESS  != dwResult)

  00108	1a000045	 bne         |$exit$32419|

; 484  :     {
; 485  :         goto exit;
; 486  :     }
; 487  :     // Request notification of backlight registry changes:
; 488  :     hEventRegistryChange = CeFindFirstRegChange(hKey, FALSE, REG_NOTIFY_CHANGE_LAST_SET);

  0010c	e59d0008	 ldr         r0, [sp, #8]
  00110	e3a02004	 mov         r2, #4
  00114	e3a01000	 mov         r1, #0
  00118	eb000000	 bl          CeFindFirstRegChange
  0011c	e1a04000	 mov         r4, r0

; 489  :     if(INVALID_HANDLE_VALUE == hEventRegistryChange)

  00120	e3740001	 cmn         r4, #1
  00124	0a00003e	 beq         |$exit$32419|

; 490  :     {   
; 491  :         DEBUGMSG(ZONE_ERROR, (TEXT("BKL: CeFindFirstRegChange failed\r\n")));        
; 492  :         goto exit;
; 493  :     }
; 494  :     RegCloseKey(hKey);

  00128	e59d0008	 ldr         r0, [sp, #8]
  0012c	eb000000	 bl          RegCloseKey

; 495  :     hKey = NULL;

  00130	e3a03000	 mov         r3, #0

; 496  : 
; 497  :     BacklightUpdateMDDRegSettings(pBKLinfo);

  00134	e1a00006	 mov         r0, r6
  00138	e58d3008	 str         r3, [sp, #8]
  0013c	eb000000	 bl          |?BacklightUpdateMDDRegSettings@@YAXPAUBKL_MDD_INFO@@@Z|

; 498  :     UpdateACStatus(pBKLinfo);

  00140	e1a00006	 mov         r0, r6
  00144	eb000000	 bl          |?UpdateACStatus@@YAXPAUBKL_MDD_INFO@@@Z|

; 499  : 
; 500  :     WaitEvents[BKL_EVENT_REG] = hEventRegistryChange;
; 501  :     WaitEvents[BKL_EVENT_POWER_MSG] = hPowerNotificationMsgs;
; 502  :     WaitEvents[BKL_EVENT_EXIT] = pBKLinfo->hExitEvent;

  00148	e596321c	 ldr         r3, [r6, #0x21C]

; 503  :     WaitEvents[BKL_EVENT_DISPLAY_MSG] = hDisplayNotificationMsgs;
; 504  : 
; 505  :     pBKLinfo->fExit = FALSE;

  0014c	e3a02000	 mov         r2, #0
  00150	e59f7180	 ldr         r7, [pc, #0x180]
  00154	e58d3038	 str         r3, [sp, #0x38]
  00158	e58d4030	 str         r4, [sp, #0x30]
  0015c	e58d9034	 str         r9, [sp, #0x34]
  00160	e58d503c	 str         r5, [sp, #0x3C]
  00164	e5862228	 str         r2, [r6, #0x228]
  00168	e28db014	 add         r11, sp, #0x14
  0016c	e28da014	 add         r10, sp, #0x14
  00170	e3a08000	 mov         r8, #0
  00174		 |$LL24@fnBackLigh|

; 506  :     
; 507  :     while(!pBKLinfo->fExit)
; 508  :     {
; 509  :         dwResult = WaitForMultipleObjects(BKL_NUM_EVENTS, &WaitEvents[0], FALSE, INFINITE);

  00174	e3e03000	 mvn         r3, #0
  00178	e3a02000	 mov         r2, #0
  0017c	e28d1030	 add         r1, sp, #0x30
  00180	e3a00004	 mov         r0, #4
  00184	eb000000	 bl          WaitForMultipleObjects
  00188	e3500000	 cmp         r0, #0

; 510  :         switch(dwResult)

  0018c	0a00004b	 beq         |$LN20@fnBackLigh|
  00190	e3500001	 cmp         r0, #1
  00194	0a000038	 beq         |$LN19@fnBackLigh|
  00198	e3500003	 cmp         r0, #3
  0019c	1a00001b	 bne         |$LN7@fnBackLigh|

; 547  : 
; 548  :             case (WAIT_OBJECT_0 + BKL_EVENT_DISPLAY_MSG):
; 549  :             {
; 550  :                 union 
; 551  :                 {
; 552  :                     UCHAR deviceBuf[PNP_QUEUE_SIZE];
; 553  :                     DEVDETAIL devDetail;
; 554  :                 } u;
; 555  :                 
; 556  :                 DEBUGMSG(ZONE_BACKLIGHT,(TEXT("Display driver interface notification\r\n")));
; 557  :                 if (!ReadMsgQueue(hDisplayNotificationMsgs, u.deviceBuf, PNP_QUEUE_SIZE, &dwSize, 0, &dwFlags)) 

  001a0	e28d300c	 add         r3, sp, #0xC
  001a4	e3a02e12	 mov         r2, #0x12, 28
  001a8	e28d1060	 add         r1, sp, #0x60
  001ac	e1a00005	 mov         r0, r5
  001b0	e58db004	 str         r11, [sp, #4]
  001b4	e58d8000	 str         r8, [sp]
  001b8	eb000000	 bl          ReadMsgQueue
  001bc	e3500000	 cmp         r0, #0
  001c0	0a000012	 beq         |$LN7@fnBackLigh|

; 558  :                 {
; 559  :                     DEBUGMSG(ZONE_BACKLIGHT,(TEXT("ReadMsgQueue failed\r\n")));  
; 560  :                     ASSERT(FALSE);
; 561  :                 }
; 562  :                 else if(dwSize >= sizeof(DEVDETAIL)) 

  001c4	e59d300c	 ldr         r3, [sp, #0xC]
  001c8	e3530020	 cmp         r3, #0x20
  001cc	3a00000f	 bcc         |$LN7@fnBackLigh|

; 563  :                 {
; 564  :                     PDEVDETAIL pDevDetail = &u.devDetail;
; 565  : 
; 566  :                     if (pDevDetail->cbName < 0)

  001d0	e59d7078	 ldr         r7, [sp, #0x78]
  001d4	e3570000	 cmp         r7, #0
  001d8	4a00000b	 bmi         |$LN45@fnBackLigh|

; 567  :                     {
; 568  :                         DEBUGMSG(ZONE_ERROR,(TEXT("Invalid cbName value\r\n")));                        
; 569  :                     }
; 570  :                     else if(( (pDevDetail->cbName + sizeof(TCHAR) < sizeof(pBKLinfo->szDisplayInterface) ) 
; 571  :                         && ( (int)(pDevDetail->cbName + sizeof(TCHAR)) > pDevDetail->cbName) ))

  001dc	e2873002	 add         r3, r7, #2
  001e0	e3530c01	 cmp         r3, #1, 24
  001e4	2a000008	 bcs         |$LN45@fnBackLigh|
  001e8	e1530007	 cmp         r3, r7
  001ec	da000006	 ble         |$LN45@fnBackLigh|

; 572  :                     {
; 573  :                         memcpy(pBKLinfo->szDisplayInterface, pDevDetail->szName, pDevDetail->cbName);

  001f0	e1a02007	 mov         r2, r7
  001f4	e28d107c	 add         r1, sp, #0x7C
  001f8	e2860c01	 add         r0, r6, #1, 24
  001fc	eb000000	 bl          memcpy

; 574  :                         // make sure it's null terminated:
; 575  :                         pBKLinfo->szDisplayInterface[pDevDetail->cbName] = '\0';

  00200	e0863087	 add         r3, r6, r7, lsl #1
  00204	e2833c01	 add         r3, r3, #1, 24
  00208	e1c380b0	 strh        r8, [r3]
  0020c		 |$LN45@fnBackLigh|

; 517  : 
; 518  :                 CeFindNextRegChange(hEventRegistryChange);      

  0020c	e59f70c4	 ldr         r7, [pc, #0xC4]
  00210		 |$LN7@fnBackLigh|
  00210	e5963228	 ldr         r3, [r6, #0x228]
  00214	e3530000	 cmp         r3, #0
  00218	0affffd5	 beq         |$LL24@fnBackLigh|
  0021c	e59d8018	 ldr         r8, [sp, #0x18]
  00220	e59da010	 ldr         r10, [sp, #0x10]
  00224		 |$exit$32419|

; 576  :                     } 
; 577  :                 }
; 578  :                 else
; 579  :                 {
; 580  :                     DEBUGMSG(ZONE_BACKLIGHT,(TEXT("insufficient buffer for device message\r\n")));  
; 581  :                 }
; 582  :             }
; 583  :             break;
; 584  : 
; 585  :             case(WAIT_OBJECT_0 + BKL_EVENT_EXIT):
; 586  :             {
; 587  :                 DEBUGMSG(ZONE_BACKLIGHT,(TEXT("Backlight exiting\r\n")));                
; 588  :             }
; 589  :             break;
; 590  :             
; 591  :             default:
; 592  :             {
; 593  :                 ASSERT(FALSE);
; 594  :             }
; 595  :             
; 596  :         }
; 597  :         
; 598  :     }
; 599  : 
; 600  :     exit:
; 601  :         
; 602  :     if (hPwrNotification)
; 603  :     {
; 604  :         StopPowerNotifications(hPwrNotification);

  00224	e1a0000a	 mov         r0, r10
  00228	eb000000	 bl          StopPowerNotifications
  0022c		 |$LN6@fnBackLigh|

; 605  :     }
; 606  :     if (hPowerNotificationMsgs)
; 607  :     {
; 608  :         CloseMsgQueue(hPowerNotificationMsgs);

  0022c	e1a00009	 mov         r0, r9
  00230	eb000000	 bl          CloseMsgQueue

; 609  :     }
; 610  :     if (hDisplayNotifications)

  00234	e3580000	 cmp         r8, #0

; 611  :     {
; 612  :         StopDeviceNotifications(hDisplayNotifications);

  00238	11a00008	 movne       r0, r8
  0023c	1b000000	 blne        StopDeviceNotifications

; 613  :     }    
; 614  :     if (hDisplayNotificationMsgs)

  00240	e3550000	 cmp         r5, #0

; 615  :     {
; 616  :         CloseMsgQueue(hDisplayNotificationMsgs);

  00244	11a00005	 movne       r0, r5
  00248	1b000000	 blne        CloseMsgQueue

; 617  :     }
; 618  :     if(hEventRegistryChange)

  0024c	e3540000	 cmp         r4, #0

; 619  :     {
; 620  :         CeFindCloseRegChange(hEventRegistryChange);

  00250	11a00004	 movne       r0, r4
  00254	1b000000	 blne        CeFindCloseRegChange
  00258		 |$LN2@fnBackLigh|

; 621  :     }
; 622  :     if(hKey)

  00258	e59d0008	 ldr         r0, [sp, #8]
  0025c	e3500000	 cmp         r0, #0

; 623  :     {
; 624  :         RegCloseKey(hKey);

  00260	1b000000	 blne        RegCloseKey
  00264		 |$LN1@fnBackLigh|

; 625  :     }
; 626  :     
; 627  :     DEBUGMSG(ZONE_BACKLIGHT,(TEXT("-fnBackLightRegThread\r\n")));
; 628  : 
; 629  :     return 0;

  00264	e59d0180	 ldr         r0, [sp, #0x180]
  00268	eb000000	 bl          __security_check_cookie
  0026c	e3a00000	 mov         r0, #0

; 630  : }

  00270	e28ddf61	 add         sp, sp, #0x61, 30
  00274	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00278	e12fff1e	 bx          lr
  0027c		 |$LN19@fnBackLigh|

; 519  : 
; 520  :                 // Tell PDD that the backlight reg settings changed:
; 521  : //MYS                 BacklightRegChanged( pBKLinfo->dwPddContext );
; 522  :             }
; 523  :             break;
; 524  :             
; 525  :             case (WAIT_OBJECT_0 + BKL_EVENT_POWER_MSG):
; 526  :             {
; 527  :                 POWER_BROADCAST PwrMsgBuf;
; 528  :                 
; 529  :                 DEBUGMSG(ZONE_BACKLIGHT,(TEXT("Power status change to/from AC\r\n")));
; 530  :                 if (!ReadMsgQueue(hPowerNotificationMsgs, &PwrMsgBuf, sizeof(PwrMsgBuf), &dwSize, 0, &dwFlags)) 

  0027c	e28d300c	 add         r3, sp, #0xC
  00280	e3a02010	 mov         r2, #0x10
  00284	e28d1050	 add         r1, sp, #0x50
  00288	e1a00009	 mov         r0, r9
  0028c	e58da004	 str         r10, [sp, #4]
  00290	e58d8000	 str         r8, [sp]
  00294	eb000000	 bl          ReadMsgQueue

; 531  :                 {
; 532  :                     DEBUGMSG(ZONE_BACKLIGHT,(TEXT("ReadMsgQueue failed\r\n")));  
; 533  :                     ASSERT(FALSE);
; 534  :                 }
; 535  : 
; 536  :                 UpdateBacklight(pBKLinfo, BKL_EVENT_POWER_MSG);

  00298	e3a01001	 mov         r1, #1
  0029c	e1a00006	 mov         r0, r6
  002a0	eb000000	 bl          |?UpdateBacklight@@YAXPAUBKL_MDD_INFO@@K@Z|

; 537  :                 if (pBKLinfo->fOnAC)
; 538  : DEBUGMSG(ZONE_BACKLIGHT,(TEXT("Power status change %s\r\n"),pBKLinfo->fOnAC ? L"to AC" :L"to Batt"));
; 539  : 
; 540  :                 // tell PDD that power source changed:
; 541  : //MYS                BacklightPwrSrcChanged(pBKLinfo->fOnAC, pBKLinfo->dwPddContext );
; 542  :                g_pBacklight->SetPowerState(pBKLinfo->dwCurState);

  002a4	e5970000	 ldr         r0, [r7]
  002a8	e5961214	 ldr         r1, [r6, #0x214]
  002ac	e5903000	 ldr         r3, [r0]
  002b0	e5933008	 ldr         r3, [r3, #8]
  002b4	e1a0e00f	 mov         lr, pc
  002b8	e12fff13	 bx          r3

; 543  : 
; 544  :                 
; 545  :             }
; 546  :             break;

  002bc	eaffffd3	 b           |$LN7@fnBackLigh|
  002c0		 |$LN20@fnBackLigh|

; 511  :         {
; 512  :             case(WAIT_OBJECT_0 + BKL_EVENT_REG):
; 513  :             {
; 514  :                 DEBUGMSG(ZONE_BACKLIGHT,(TEXT("Backlight mdd registry change\r\n")));
; 515  : 
; 516  :                 UpdateBacklight(pBKLinfo, BKL_EVENT_REG);

  002c0	e3a01000	 mov         r1, #0
  002c4	e1a00006	 mov         r0, r6
  002c8	eb000000	 bl          |?UpdateBacklight@@YAXPAUBKL_MDD_INFO@@K@Z|

; 517  : 
; 518  :                 CeFindNextRegChange(hEventRegistryChange);      

  002cc	e1a00004	 mov         r0, r4
  002d0	eb000000	 bl          CeFindNextRegChange
  002d4	eaffffcd	 b           |$LN7@fnBackLigh|
  002d8		 |$LN50@fnBackLigh|
  002d8		 |$LN51@fnBackLigh|
  002d8	00000000	 DCD         |?g_pBacklight@@3PAVCBacklightRoot@@A|
  002dc		 |$LN52@fnBackLigh|
  002dc	00000000	 DCD         |??_C@_1CO@MGKPHPG@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAP?$AAa?$AAn?$AAe?$AAl?$AA?2?$AAB?$AAa?$AAc?$AAk?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?$AA@|
  002e0		 |$LN53@fnBackLigh|
  002e0	00000000	 DCD         |??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@|
  002e4		 |$LN54@fnBackLigh|
  002e4	00000000	 DCD         |__security_cookie|
  002e8		 |$M32773|

			 ENDP  ; |?fnBackLightThread@@YAKPAX@Z|, fnBackLightThread

	END
