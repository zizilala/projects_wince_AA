; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\SDMA\dma.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BI@OJGHJKJA@?$AAp?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@MIOPDHCM@?$AAD?$AAm?$AAa?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|s_deviceRegParams| DCD |??_C@_1BC@MIOPDHCM@?$AAD?$AAm?$AAa?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$AA@|
	DCD	0x3
	DCD	0x0
	DCD	0x8
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BI@OJGHJKJA@?$AAp?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x10
	DCD	0x4
	DCD	0x61

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@OJGHJKJA@?$AAp?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| DCB "p"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "2", 0x0, "5", 0x0, "6", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@MIOPDHCM@?$AAD?$AAm?$AAa?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$AA@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "I", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "x", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "D", 0x0, "M", 0x0, "A", 0x0, 0x0, 0x0
	%	56
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0
	%	56
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCD	0x3
	EXPORT	|??0DmaControllerBase@@QAA@H@Z|		; DmaControllerBase::DmaControllerBase
	EXPORT	|??_7DmaControllerBase@@6B@| [ DATA ]	; DmaControllerBase::`vftable'
	IMPORT	|_purecall|
	IMPORT	|?StartInterruptThread@DmaControllerBase@@UAAHKK@Z| ; DmaControllerBase::StartInterruptThread
	IMPORT	|?ReserveChannel@DmaControllerBase@@UAAHPAUDmaChannelContext_t@@@Z| ; DmaControllerBase::ReserveChannel
	IMPORT	|?ReleaseChannel@DmaControllerBase@@UAAXPBUDmaChannelContext_t@@@Z| ; DmaControllerBase::ReleaseChannel
	IMPORT	|?Uninitialize@DmaControllerBase@@UAAXXZ| ; DmaControllerBase::Uninitialize
	IMPORT	|?Initialize@DmaControllerBase@@UAAHABT_LARGE_INTEGER@@K@Z| ; DmaControllerBase::Initialize
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmacontroller.h

  00000			 AREA	 |.pdata|, PDATA
|$T36519| DCD	|$LN5@DmaControl|
	DCD	0x40000a00

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7DmaControllerBase@@6B@| DCD |_purecall|		; DmaControllerBase::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|?StartInterruptThread@DmaControllerBase@@UAAHKK@Z|
	DCD	|?ReserveChannel@DmaControllerBase@@UAAHPAUDmaChannelContext_t@@@Z|
	DCD	|?ReleaseChannel@DmaControllerBase@@UAAXPBUDmaChannelContext_t@@@Z|
	DCD	|?Uninitialize@DmaControllerBase@@UAAXXZ|
	DCD	|?Initialize@DmaControllerBase@@UAAHABT_LARGE_INTEGER@@K@Z|
	DCD	|_purecall|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0DmaControllerBase@@QAA@H@Z| PROC	; DmaControllerBase::DmaControllerBase

; 51   :     {

  00000		 |$LN5@DmaControl|
  00000		 |$M36516|
  00000	e59f301c	 ldr         r3, [pc, #0x1C]
  00004	e3a02000	 mov         r2, #0
  00008	e5802004	 str         r2, [r0, #4]
  0000c	e5803000	 str         r3, [r0]
  00010	e5801008	 str         r1, [r0, #8]
  00014	e580200c	 str         r2, [r0, #0xC]
  00018	e5802010	 str         r2, [r0, #0x10]
  0001c	e5802014	 str         r2, [r0, #0x14]

; 52   :     }

  00020	e12fff1e	 bx          lr
  00024		 |$LN6@DmaControl|
  00024		 |$LN7@DmaControl|
  00024	00000000	 DCD         |??_7DmaControllerBase@@6B@|
  00028		 |$M36517|

			 ENDP  ; |??0DmaControllerBase@@QAA@H@Z|, DmaControllerBase::DmaControllerBase

	EXPORT	|??0SystemDmaController@@QAA@XZ|	; SystemDmaController::SystemDmaController
	EXPORT	|??_7SystemDmaController@@6B@| [ DATA ]	; SystemDmaController::`vftable'
	IMPORT	|?EnableInterrupt@SystemDmaController@@MAAXHH@Z| ; SystemDmaController::EnableInterrupt
	IMPORT	|?GetInterruptMask@SystemDmaController@@UAAHPAXPAK@Z| ; SystemDmaController::GetInterruptMask
	IMPORT	|?ClearInterruptMask@SystemDmaController@@UAAHPAXK@Z| ; SystemDmaController::ClearInterruptMask
	IMPORT	|?Uninitialize@SystemDmaController@@UAAXXZ| ; SystemDmaController::Uninitialize
	IMPORT	|?DisableStandby@SystemDmaController@@UAAHPAXH@Z| ; SystemDmaController::DisableStandby
	IMPORT	|?Initialize@SystemDmaController@@UAAHABT_LARGE_INTEGER@@KPAK@Z| ; SystemDmaController::Initialize
	IMPORT	|?DI_ReserveInterrupt@SystemDmaController@@UAAHKPAK00@Z| ; SystemDmaController::DI_ReserveInterrupt
	IMPORT	|?DI_ReleaseInterrupt@SystemDmaController@@UAAHK@Z| ; SystemDmaController::DI_ReleaseInterrupt

  00000			 AREA	 |.pdata|, PDATA
|$T36536| DCD	|$LN12@SystemDmaC|
	DCD	0x40001601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7SystemDmaController@@6B@| DCD |?EnableInterrupt@SystemDmaController@@MAAXHH@Z| ; SystemDmaController::`vftable'
	DCD	|?GetInterruptMask@SystemDmaController@@UAAHPAXPAK@Z|
	DCD	|?ClearInterruptMask@SystemDmaController@@UAAHPAXK@Z|
	DCD	|?StartInterruptThread@DmaControllerBase@@UAAHKK@Z|
	DCD	|?ReserveChannel@DmaControllerBase@@UAAHPAUDmaChannelContext_t@@@Z|
	DCD	|?ReleaseChannel@DmaControllerBase@@UAAXPBUDmaChannelContext_t@@@Z|
	DCD	|?Uninitialize@SystemDmaController@@UAAXXZ|
	DCD	|?Initialize@DmaControllerBase@@UAAHABT_LARGE_INTEGER@@K@Z|
	DCD	|?DisableStandby@SystemDmaController@@UAAHPAXH@Z|
	DCD	|?Initialize@SystemDmaController@@UAAHABT_LARGE_INTEGER@@KPAK@Z|
	DCD	|?DI_ReserveInterrupt@SystemDmaController@@UAAHKPAK00@Z|
	DCD	|?DI_ReleaseInterrupt@SystemDmaController@@UAAHK@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0SystemDmaController@@QAA@XZ| PROC	; SystemDmaController::SystemDmaController

; 204  :     {

  00000		 |$LN12@SystemDmaC|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36533|
  00004	e59f3048	 ldr         r3, [pc, #0x48]
  00008	e3a02020	 mov         r2, #0x20
  0000c	e3a01000	 mov         r1, #0
  00010	e5803000	 str         r3, [r0]
  00014	e5802008	 str         r2, [r0, #8]
  00018	e1a03000	 mov         r3, r0
  0001c	e5801004	 str         r1, [r0, #4]
  00020	e580100c	 str         r1, [r0, #0xC]
  00024	e5801010	 str         r1, [r0, #0x10]
  00028	e5801014	 str         r1, [r0, #0x14]
  0002c	e5801024	 str         r1, [r0, #0x24]
  00030	e3a02004	 mov         r2, #4
  00034	e3e0e000	 mvn         lr, #0
  00038		 |$LL3@SystemDmaC|

; 205  :     int i;
; 206  : 
; 207  :     for(i=0; i < OMAP_DMA_INTERRUPT_COUNT; i++)
; 208  :         {
; 209  :         m_IrqNumsArray[i] = (DWORD)-1;

  00038	e583e03c	 str         lr, [r3, #0x3C]

; 210  :         m_AllocatedIntArray[i] = FALSE;

  0003c	e583104c	 str         r1, [r3, #0x4C]
  00040	e2833004	 add         r3, r3, #4
  00044	e2522001	 subs        r2, r2, #1
  00048	1afffffa	 bne         |$LL3@SystemDmaC|

; 211  :         }
; 212  :     }

  0004c	e49de004	 ldr         lr, [sp], #4
  00050	e12fff1e	 bx          lr
  00054		 |$LN13@SystemDmaC|
  00054		 |$LN14@SystemDmaC|
  00054	00000000	 DCD         |??_7SystemDmaController@@6B@|
  00058		 |$M36534|

			 ENDP  ; |??0SystemDmaController@@QAA@XZ|, SystemDmaController::SystemDmaController

	EXPORT	|??1SystemDmaController@@QAA@XZ|	; SystemDmaController::~SystemDmaController

  00000			 AREA	 |.pdata|, PDATA
|$T36546| DCD	|$LN5@SystemDmaC@2|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1SystemDmaController@@QAA@XZ| PROC	; SystemDmaController::~SystemDmaController

; 215  :     {

  00000		 |$LN5@SystemDmaC@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36543|
  00004	e1a02000	 mov         r2, r0
  00008	e59f300c	 ldr         r3, [pc, #0xC]

; 216  :         Uninitialize();

  0000c	e5823000	 str         r3, [r2]
  00010	eb000000	 bl          |?Uninitialize@SystemDmaController@@UAAXXZ|

; 217  :     }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$LN6@SystemDmaC@2|
  0001c		 |$LN7@SystemDmaC@2|
  0001c	00000000	 DCD         |??_7SystemDmaController@@6B@|
  00020		 |$M36544|

			 ENDP  ; |??1SystemDmaController@@QAA@XZ|, SystemDmaController::~SystemDmaController

	EXPORT	|?InitializeDevice@@YAHPAUDevice_t@@@Z|	; InitializeDevice
	EXPORT	|??_C@_1MM@FBHDPICO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AA?$CI?$AAD?$AAM?$AAA?$AA?$CJ?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?3?$AAF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KM@BDFIBLIG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AA?$CI?$AAD?$AAM?$AAA?$AA?$CJ?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?3?$AAF@| [ DATA ] ; `string'
	EXPORT	|??_C@_19FOCAGMKL@?$AAI?$AAR?$AAQ?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19OGJMALMO@?$AAI?$AAR?$AAQ?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19PECJKECA@?$AAI?$AAR?$AAQ?$AA2?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19EMJFMDEF@?$AAI?$AAR?$AAQ?$AA3?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KI@PEEAJLIM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AA?$CI?$AAD?$AAM?$AAA?$AA?$CJ?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?3?$AAU@| [ DATA ] ; `string'
	IMPORT	|GetAddressByDevice|
	IMPORT	|GetIrqByDevice|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|GetLastError|
	IMPORT	|??2@YAPAXI@Z|				; operator new
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dma.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T36570| DCD	|$LN20@Initialize|
	DCD	0x40006302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1MM@FBHDPICO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AA?$CI?$AAD?$AAM?$AAA?$AA?$CJ?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?3?$AAF@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "(", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, ")", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, ":"
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "s", 0x0, "y", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "m", 0x0, " ", 0x0, "d", 0x0, "m", 0x0, "a", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@BDFIBLIG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AA?$CI?$AAD?$AAM?$AAA?$AA?$CJ?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?3?$AAF@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "(", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, ")", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, ":"
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, " ", 0x0, "s", 0x0, "y", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "m", 0x0, " ", 0x0, "d", 0x0, "m"
	DCB	0x0, "a", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, "(", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19FOCAGMKL@?$AAI?$AAR?$AAQ?$AA0?$AA?$AA@| DCB "I", 0x0, "R", 0x0, "Q"
	DCB	0x0, "0", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19OGJMALMO@?$AAI?$AAR?$AAQ?$AA1?$AA?$AA@| DCB "I", 0x0, "R", 0x0, "Q"
	DCB	0x0, "1", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19PECJKECA@?$AAI?$AAR?$AAQ?$AA2?$AA?$AA@| DCB "I", 0x0, "R", 0x0, "Q"
	DCB	0x0, "2", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19EMJFMDEF@?$AAI?$AAR?$AAQ?$AA3?$AA?$AA@| DCB "I", 0x0, "R", 0x0, "Q"
	DCB	0x0, "3", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KI@PEEAJLIM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AA?$CI?$AAD?$AAM?$AAA?$AA?$CJ?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?3?$AAU@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "(", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, ")", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, ":"
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "s", 0x0, "y", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "m", 0x0, " ", 0x0, "d", 0x0, "m", 0x0, "a", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InitializeDevice@@YAHPAUDevice_t@@@Z| PROC ; InitializeDevice

; 107  : {

  00000		 |$LN20@Initialize|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M36567|
  00008	e1a05000	 mov         r5, r0

; 108  :     DEBUGMSG(ZONE_FUNCTION, (
; 109  :         L"+InitializeDevice(0x%08x)\r\n", pDevice
; 110  :         ));
; 111  : 
; 112  :     BOOL rc = FALSE;
; 113  :     PHYSICAL_ADDRESS pa;
; 114  :     DWORD SysIntArray[OMAP_DMA_INTERRUPT_COUNT];
; 115  :     
; 116  :     // create instance of objects
; 117  :     pDevice->pSystemController = new SystemDmaController();

  0000c	e3a0006c	 mov         r0, #0x6C
  00010	e3a06000	 mov         r6, #0
  00014	eb000000	 bl          |??2@YAPAXI@Z|
  00018	e3500000	 cmp         r0, #0
  0001c	0a000001	 beq         |$LN9@Initialize|
  00020	eb000000	 bl          |??0SystemDmaController@@QAA@XZ|
  00024	ea000000	 b           |$LN10@Initialize|
  00028		 |$LN9@Initialize|
  00028	e3a00000	 mov         r0, #0
  0002c		 |$LN10@Initialize|
  0002c	e5850014	 str         r0, [r5, #0x14]

; 118  :     if (pDevice->pSystemController == NULL)

  00030	e3500000	 cmp         r0, #0
  00034	1a000008	 bne         |$LN6@Initialize|

; 119  :         {
; 120  :         RETAILMSG(ZONE_ERROR, (L"ERROR! (DMA) InitializeDevice :"
; 121  :             L"Unable to allocate system dma controller(err=0x%08X)",
; 122  :             GetLastError()
; 123  :             ));

  00038	e59f3130	 ldr         r3, [pc, #0x130]
  0003c	e5933440	 ldr         r3, [r3, #0x440]
  00040	e3130001	 tst         r3, #1
  00044	0a000044	 beq         |$cleanUp$36209|
  00048	eb000000	 bl          GetLastError
  0004c	e1a01000	 mov         r1, r0
  00050	e59f0130	 ldr         r0, [pc, #0x130]

; 149  :         {
; 150  :         RETAILMSG(ZONE_ERROR, (L"ERROR! (DMA) InitializeDevice :"
; 151  :             L"Failed to start interrupt thread for system dma controller"
; 152  :             L"(err=0x%08X)",
; 153  :             GetLastError()
; 154  :             ));

  00054	eb000000	 bl          NKDbgPrintfW

; 159  : 
; 160  : cleanUp:

  00058	ea00003f	 b           |$cleanUp$36209|
  0005c		 |$LN6@Initialize|

; 124  :         goto cleanUp;
; 125  :         }
; 126  : 
; 127  :     SysIntArray[0] = GetIrqByDevice(pDevice->SdmaDevice,L"IRQ0");

  0005c	e59f1120	 ldr         r1, [pc, #0x120]
  00060	e5950004	 ldr         r0, [r5, #4]
  00064	eb000000	 bl          GetIrqByDevice

; 128  :     SysIntArray[1] = GetIrqByDevice(pDevice->SdmaDevice,L"IRQ1");

  00068	e59f1110	 ldr         r1, [pc, #0x110]
  0006c	e1a03000	 mov         r3, r0
  00070	e5950004	 ldr         r0, [r5, #4]
  00074	e58d3008	 str         r3, [sp, #8]
  00078	eb000000	 bl          GetIrqByDevice

; 129  :     SysIntArray[2] = GetIrqByDevice(pDevice->SdmaDevice,L"IRQ2");

  0007c	e59f10f8	 ldr         r1, [pc, #0xF8]
  00080	e1a03000	 mov         r3, r0
  00084	e5950004	 ldr         r0, [r5, #4]
  00088	e58d300c	 str         r3, [sp, #0xC]
  0008c	eb000000	 bl          GetIrqByDevice

; 130  :     SysIntArray[3] = GetIrqByDevice(pDevice->SdmaDevice,L"IRQ3");

  00090	e59f10e0	 ldr         r1, [pc, #0xE0]
  00094	e1a03000	 mov         r3, r0
  00098	e5950004	 ldr         r0, [r5, #4]
  0009c	e58d3010	 str         r3, [sp, #0x10]
  000a0	eb000000	 bl          GetIrqByDevice
  000a4	e1a03000	 mov         r3, r0

; 131  :     // initialize objects
; 132  :     pa.HighPart = 0;
; 133  :     pa.LowPart = GetAddressByDevice(pDevice->SdmaDevice);

  000a8	e5950004	 ldr         r0, [r5, #4]
  000ac	e3a02000	 mov         r2, #0
  000b0	e58d3014	 str         r3, [sp, #0x14]
  000b4	e58d2004	 str         r2, [sp, #4]
  000b8	eb000000	 bl          GetAddressByDevice

; 134  :     if (pDevice->pSystemController->Initialize(
; 135  :             pa,
; 136  : 			sizeof(OMAP_SDMA_REGS),
; 137  :             SysIntArray) == FALSE)

  000bc	e595e014	 ldr         lr, [r5, #0x14]
  000c0	e58d0000	 str         r0, [sp]
  000c4	e28d3008	 add         r3, sp, #8
  000c8	e59e1000	 ldr         r1, [lr]
  000cc	e3a02d32	 mov         r2, #0x32, 26
  000d0	e1a0000e	 mov         r0, lr
  000d4	e5914024	 ldr         r4, [r1, #0x24]
  000d8	e28d1000	 add         r1, sp, #0
  000dc	e1a0e00f	 mov         lr, pc
  000e0	e12fff14	 bx          r4
  000e4	e3500000	 cmp         r0, #0
  000e8	1a000008	 bne         |$LN4@Initialize|

; 138  :         {
; 139  :         RETAILMSG(ZONE_ERROR, (L"ERROR! (DMA) InitializeDevice :"
; 140  :             L"Failed to initialize system dma controller(err=0x%08X)",
; 141  :             GetLastError()
; 142  :             ));

  000ec	e59f307c	 ldr         r3, [pc, #0x7C]
  000f0	e5933440	 ldr         r3, [r3, #0x440]
  000f4	e3130001	 tst         r3, #1
  000f8	0a000017	 beq         |$cleanUp$36209|
  000fc	eb000000	 bl          GetLastError
  00100	e1a01000	 mov         r1, r0
  00104	e59f0068	 ldr         r0, [pc, #0x68]

; 149  :         {
; 150  :         RETAILMSG(ZONE_ERROR, (L"ERROR! (DMA) InitializeDevice :"
; 151  :             L"Failed to start interrupt thread for system dma controller"
; 152  :             L"(err=0x%08X)",
; 153  :             GetLastError()
; 154  :             ));

  00108	eb000000	 bl          NKDbgPrintfW

; 159  : 
; 160  : cleanUp:

  0010c	ea000012	 b           |$cleanUp$36209|
  00110		 |$LN4@Initialize|

; 143  :         goto cleanUp;
; 144  :         }
; 145  : 
; 146  :     // start interrupt handlers
; 147  :     if (pDevice->pSystemController->StartInterruptThread(
; 148  :             SysIntArray[0], pDevice->priority) == FALSE)

  00110	e5950014	 ldr         r0, [r5, #0x14]
  00114	e5952010	 ldr         r2, [r5, #0x10]
  00118	e59d1008	 ldr         r1, [sp, #8]
  0011c	e5903000	 ldr         r3, [r0]
  00120	e593300c	 ldr         r3, [r3, #0xC]
  00124	e1a0e00f	 mov         lr, pc
  00128	e12fff13	 bx          r3
  0012c	e3500000	 cmp         r0, #0
  00130	1a000008	 bne         |$LN2@Initialize|

; 149  :         {
; 150  :         RETAILMSG(ZONE_ERROR, (L"ERROR! (DMA) InitializeDevice :"
; 151  :             L"Failed to start interrupt thread for system dma controller"
; 152  :             L"(err=0x%08X)",
; 153  :             GetLastError()
; 154  :             ));

  00134	e59f3034	 ldr         r3, [pc, #0x34]
  00138	e5933440	 ldr         r3, [r3, #0x440]
  0013c	e3130001	 tst         r3, #1
  00140	0a000005	 beq         |$cleanUp$36209|
  00144	eb000000	 bl          GetLastError
  00148	e1a01000	 mov         r1, r0
  0014c	e59f0018	 ldr         r0, [pc, #0x18]
  00150	eb000000	 bl          NKDbgPrintfW

; 159  : 
; 160  : cleanUp:

  00154	ea000000	 b           |$cleanUp$36209|
  00158		 |$LN2@Initialize|

; 155  :         goto cleanUp;
; 156  :         }
; 157  : 
; 158  :     rc = TRUE;

  00158	e3a06001	 mov         r6, #1
  0015c		 |$cleanUp$36209|

; 161  :     DEBUGMSG(ZONE_FUNCTION, (
; 162  :         L"-InitializeDevice(rc=%d)\r\n", rc
; 163  :         ));
; 164  :     return rc;
; 165  : }

  0015c	e1a00006	 mov         r0, r6
  00160	e28dd018	 add         sp, sp, #0x18
  00164	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00168	e12fff1e	 bx          lr
  0016c		 |$LN21@Initialize|
  0016c		 |$LN22@Initialize|
  0016c	00000000	 DCD         |??_C@_1MM@FBHDPICO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AA?$CI?$AAD?$AAM?$AAA?$AA?$CJ?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?3?$AAF@|
  00170		 |$LN23@Initialize|
  00170	00000000	 DCD         |dpCurSettings|
  00174		 |$LN24@Initialize|
  00174	00000000	 DCD         |??_C@_1KM@BDFIBLIG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AA?$CI?$AAD?$AAM?$AAA?$AA?$CJ?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?3?$AAF@|
  00178		 |$LN25@Initialize|
  00178	00000000	 DCD         |??_C@_19EMJFMDEF@?$AAI?$AAR?$AAQ?$AA3?$AA?$AA@|
  0017c		 |$LN26@Initialize|
  0017c	00000000	 DCD         |??_C@_19PECJKECA@?$AAI?$AAR?$AAQ?$AA2?$AA?$AA@|
  00180		 |$LN27@Initialize|
  00180	00000000	 DCD         |??_C@_19OGJMALMO@?$AAI?$AAR?$AAQ?$AA1?$AA?$AA@|
  00184		 |$LN28@Initialize|
  00184	00000000	 DCD         |??_C@_19FOCAGMKL@?$AAI?$AAR?$AAQ?$AA0?$AA?$AA@|
  00188		 |$LN29@Initialize|
  00188	00000000	 DCD         |??_C@_1KI@PEEAJLIM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AA?$CI?$AAD?$AAM?$AAA?$AA?$CJ?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?3?$AAU@|
  0018c		 |$M36568|

			 ENDP  ; |?InitializeDevice@@YAHPAUDevice_t@@@Z|, InitializeDevice

	EXPORT	|??_GSystemDmaController@@QAAPAXI@Z|	; SystemDmaController::`scalar deleting destructor'
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T36593| DCD	|$LN8@scalar|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GSystemDmaController@@QAAPAXI@Z| PROC ; SystemDmaController::`scalar deleting destructor'
  00000		 |$LN8@scalar|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36590|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	e59f301c	 ldr         r3, [pc, #0x1C]
  00010	e5853000	 str         r3, [r5]
  00014	eb000000	 bl          |?Uninitialize@SystemDmaController@@UAAXXZ|
  00018	e3140001	 tst         r4, #1
  0001c	11a00005	 movne       r0, r5
  00020	1b000000	 blne        |??3@YAXPAX@Z|
  00024	e1a00005	 mov         r0, r5
  00028	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$LN9@scalar|
  00030		 |$LN10@scalar|
  00030	00000000	 DCD         |??_7SystemDmaController@@6B@|
  00034		 |$M36591|

			 ENDP  ; |??_GSystemDmaController@@QAAPAXI@Z|, SystemDmaController::`scalar deleting destructor'

	EXPORT	|?DMA_Open@@YAKKKK@Z|			; DMA_Open
	IMPORT	|InterlockedIncrement|
	IMPORT	|LocalAlloc|

  00000			 AREA	 |.pdata|, PDATA
|$T36607| DCD	|$LN10@DMA_Open|
	DCD	0x40001d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMA_Open@@YAKKKK@Z| PROC		; DMA_Open

; 315  : {

  00000		 |$LN10@DMA_Open|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M36604|
  00004	e1b06000	 movs        r6, r0

; 316  :     DWORD rc = (DWORD)NULL;

  00008	e3a05000	 mov         r5, #0

; 317  :     Device_t *pDevice = (Device_t*)context;
; 318  :     Instance_t *pInstance = NULL;
; 319  : 
; 320  :     UNREFERENCED_PARAMETER(context);
; 321  :     UNREFERENCED_PARAMETER(accessCode);
; 322  :     UNREFERENCED_PARAMETER(shareMode);
; 323  : 
; 324  :     DEBUGMSG(ZONE_FUNCTION, (
; 325  :         L"+DMA_Open(0x%08x, 0x%08x, 0x%08x\r\n", context, accessCode, shareMode
; 326  :         ));
; 327  : 
; 328  :     // Check if we get correct context
; 329  :     if ((pDevice == NULL) || (pDevice->cookie != DMA_DEVICE_COOKIE))

  0000c	0a000013	 beq         |$cleanUp$36285|
  00010	e5962000	 ldr         r2, [r6]
  00014	e59f3054	 ldr         r3, [pc, #0x54]
  00018	e1520003	 cmp         r2, r3
  0001c	1a00000f	 bne         |$cleanUp$36285|

; 330  :         {
; 331  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: DMA_Open: "
; 332  :             L"Incorrect context parameter\r\n"
; 333  :             ));
; 334  :         goto cleanUp;
; 335  :         }
; 336  : 
; 337  :     // Create device structure
; 338  :     pInstance = (Instance_t*)LocalAlloc(LPTR, sizeof(Instance_t));

  00020	e3a01010	 mov         r1, #0x10
  00024	e3a00040	 mov         r0, #0x40
  00028	eb000000	 bl          LocalAlloc
  0002c	e1b04000	 movs        r4, r0

; 339  :     if (pInstance == NULL)

  00030	0a00000a	 beq         |$cleanUp$36285|

; 340  :         {
; 341  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: DMA_Open: "
; 342  :             L"Failed allocate DMA instance structure\r\n"
; 343  :             ));
; 344  :         goto cleanUp;
; 345  :         }
; 346  : 
; 347  :     // Set cookie
; 348  :     memset(pInstance, 0, sizeof(Instance_t));

  00034	e3a02000	 mov         r2, #0

; 349  :     pInstance->cookie = DMA_INSTANCE_COOKIE;

  00038	e59f302c	 ldr         r3, [pc, #0x2C]
  0003c	e5842000	 str         r2, [r4]
  00040	e5842004	 str         r2, [r4, #4]
  00044	e5842008	 str         r2, [r4, #8]
  00048	e584200c	 str         r2, [r4, #0xC]

; 350  : 
; 351  :     // Save device reference
; 352  :     pInstance->pDevice = pDevice;
; 353  : 
; 354  :     // Increment number of open instances
; 355  :     InterlockedIncrement(&pDevice->instances);

  0004c	e286002c	 add         r0, r6, #0x2C
  00050	e5843000	 str         r3, [r4]
  00054	e5846004	 str         r6, [r4, #4]
  00058	eb000000	 bl          InterlockedIncrement

; 356  : 
; 357  :     // Sanity check number of instances
; 358  :     ASSERT(pDevice->instances > 0);
; 359  : 
; 360  :     // Done...
; 361  :     rc = (DWORD)pInstance;

  0005c	e1a05004	 mov         r5, r4
  00060		 |$cleanUp$36285|

; 362  : 
; 363  : cleanUp:
; 364  :     DEBUGMSG(ZONE_FUNCTION, (L"-DMA_Open(rc = 0x%08x)\r\n", rc));
; 365  :     return rc;
; 366  : }

  00060	e1a00005	 mov         r0, r5
  00064	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$LN11@DMA_Open|
  0006c		 |$LN12@DMA_Open|
  0006c	646d6149	 DCD         0x646d6149
  00070		 |$LN13@DMA_Open|
  00070	646d6144	 DCD         0x646d6144
  00074		 |$M36605|

			 ENDP  ; |?DMA_Open@@YAKKKK@Z|, DMA_Open

	EXPORT	|?DMA_Close@@YAHK@Z|			; DMA_Close
	IMPORT	|LocalFree|
	IMPORT	|InterlockedDecrement|

  00000			 AREA	 |.pdata|, PDATA
|$T36621| DCD	|$LN8@DMA_Close|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMA_Close@@YAHK@Z| PROC		; DMA_Close

; 378  : {

  00000		 |$LN8@DMA_Close|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36618|
  00004	e1b04000	 movs        r4, r0

; 379  :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 380  :     Device_t *pDevice;
; 381  :     Instance_t *pInstance = (Instance_t*)context;
; 382  : 
; 383  :     DEBUGMSG(ZONE_FUNCTION, (L"+DMA_Close(0x%08x)\r\n", context));
; 384  : 
; 385  :     // Check if we get correct context
; 386  :     if ((pInstance == NULL) || (pInstance->cookie != DMA_INSTANCE_COOKIE))

  0000c	0a000009	 beq         |$cleanUp$36307|
  00010	e5942000	 ldr         r2, [r4]
  00014	e59f3024	 ldr         r3, [pc, #0x24]
  00018	e1520003	 cmp         r2, r3
  0001c	1a000005	 bne         |$cleanUp$36307|

; 387  :         {
; 388  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: DMA_Read: "
; 389  :             L"Incorrect context paramer\r\n"
; 390  :             ));
; 391  :         goto cleanUp;
; 392  :         }
; 393  : 
; 394  :     // Get device context
; 395  :     pDevice = pInstance->pDevice;
; 396  : 
; 397  :     // Sanity check number of instances
; 398  :     ASSERT(pDevice->instances > 0);
; 399  : 
; 400  :     // Decrement number of open instances
; 401  :     InterlockedDecrement(&pDevice->instances);

  00020	e5943004	 ldr         r3, [r4, #4]
  00024	e283002c	 add         r0, r3, #0x2C
  00028	eb000000	 bl          InterlockedDecrement

; 402  : 
; 403  :     // Free instance structure
; 404  :     LocalFree(pInstance);

  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          LocalFree

; 405  : 
; 406  :     // Done...
; 407  :     rc = TRUE;

  00034	e3a00001	 mov         r0, #1
  00038		 |$cleanUp$36307|

; 408  : 
; 409  : cleanUp:
; 410  :     DEBUGMSG(ZONE_FUNCTION, (L"-DMA_Close(rc = %d)\r\n", rc));
; 411  :     return rc;
; 412  : }

  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN9@DMA_Close|
  00040		 |$LN10@DMA_Close|
  00040	646d6149	 DCD         0x646d6149
  00044		 |$M36619|

			 ENDP  ; |?DMA_Close@@YAHK@Z|, DMA_Close

	EXPORT	|?DMA_IOControl@@YAHKKPAEK0KPAK@Z|	; DMA_IOControl
	IMPORT	|SetLastError|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|?SetSecondaryInterruptHandler@DmaControllerBase@@QAAHPBUDmaChannelContext_t@@PAXK@Z| ; DmaControllerBase::SetSecondaryInterruptHandler
	IMPORT	|?InterruptDone@DmaControllerBase@@QAAHPBUDmaChannelContext_t@@@Z| ; DmaControllerBase::InterruptDone
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T36650| DCD	|$LN62@DMA_IOCont|
	DCD	0x4000c302
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMA_IOControl@@YAHKKPAEK0KPAK@Z| PROC ; DMA_IOControl

; 431  : {

  00000		 |$LN62@DMA_IOCont|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36647|
  00008	e1a06003	 mov         r6, r3
  0000c	e1a05002	 mov         r5, r2

; 432  :     BOOL rc = FALSE;
; 433  :     Instance_t *pInstance = (Instance_t*)context;
; 434  :     Device_t *pDevice = pInstance->pDevice;
; 435  : 
; 436  :     UNREFERENCED_PARAMETER(pOutSize);
; 437  : 
; 438  :     DEBUGMSG(ZONE_FUNCTION, (
; 439  :         L"+DMA_IOControl(0x%08x, 0x%08x, 0x%08x, %d, 0x%08x, %d, 0x%08x)\r\n",
; 440  :         context, code, pInBuffer, inSize, pOutBuffer, outSize, pOutSize
; 441  :         ));
; 442  : 
; 443  :     // Check if we get correct context
; 444  :     if ((pInstance == NULL) || (pInstance->cookie != DMA_INSTANCE_COOKIE))

  00010	e5904000	 ldr         r4, [r0]
  00014	e59fe2ec	 ldr         lr, [pc, #0x2EC]
  00018	e5907004	 ldr         r7, [r0, #4]
  0001c	e3a08000	 mov         r8, #0
  00020	e154000e	 cmp         r4, lr
  00024	1a0000ac	 bne         |$cleanUp$36328|

; 445  :         {
; 446  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: DMA_IOControl: "
; 447  :             L"Incorrect context paramer\r\n"
; 448  :             ));
; 449  :         goto cleanUp;
; 450  :         }
; 451  : 
; 452  :     switch (code)

  00028	e59f02d4	 ldr         r0, [pc, #0x2D4]
  0002c	e1510000	 cmp         r1, r0
  00030	0a000085	 beq         |$LN41@DMA_IOCont|
  00034	e59f02c4	 ldr         r0, [pc, #0x2C4]
  00038	e1510000	 cmp         r1, r0
  0003c	0a00006e	 beq         |$LN32@DMA_IOCont|
  00040	e59f02b4	 ldr         r0, [pc, #0x2B4]
  00044	e1510000	 cmp         r1, r0
  00048	0a000059	 beq         |$LN24@DMA_IOCont|
  0004c	e59f02a4	 ldr         r0, [pc, #0x2A4]
  00050	e1510000	 cmp         r1, r0
  00054	0a000047	 beq         |$LN49@DMA_IOCont|
  00058	e59f3294	 ldr         r3, [pc, #0x294]
  0005c	e1510003	 cmp         r1, r3
  00060	0a00002d	 beq         |$LN16@DMA_IOCont|
  00064	e59f3284	 ldr         r3, [pc, #0x284]
  00068	e1510003	 cmp         r1, r3
  0006c	0a000011	 beq         |$LN6@DMA_IOCont|
  00070	e59f3274	 ldr         r3, [pc, #0x274]
  00074	e1510003	 cmp         r1, r3
  00078	1a000097	 bne         |$cleanUp$36328|

; 695  :             LeaveCriticalSection(&pDevice->cs);
; 696  :             }
; 697  :             break;
; 698  : 
; 699  :         case IOCTL_DMA_RELEASE_DEDICATED_INTERRUPT:
; 700  :             {
; 701  :             SystemDmaController *pController;
; 702  :             DEBUGMSG(ZONE_INFO, (L"DMA: IOCTL_DMA_RELEASE_DEDICATED_INTERRUPT\r\n"));
; 703  : 
; 704  :             if (pInBuffer == NULL || inSize != sizeof(IOCTL_DMA_RELEASE_DEDICATED_INTERRUPT_IN))

  0007c	e3550000	 cmp         r5, #0
  00080	0a000093	 beq         |$LN39@DMA_IOCont|
  00084	e3560004	 cmp         r6, #4
  00088	1a000091	 bne         |$LN39@DMA_IOCont|

; 705  :                 {
; 706  :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: DMA_IOControl: "
; 707  :                     L"IOCTL_DMA_RELEASE_DEDICATED_INTERRUPT invalid parameters\r\n"
; 708  :                     ));
; 709  :                 SetLastError(ERROR_INVALID_PARAMETER);
; 710  :                 break;
; 711  :                 }
; 712  : 
; 713  :             //assume this is a system interrupt
; 714  :             pController = pDevice->pSystemController;
; 715  :             
; 716  :             EnterCriticalSection(&pDevice->cs);

  0008c	e5974014	 ldr         r4, [r7, #0x14]
  00090	e2870018	 add         r0, r7, #0x18
  00094	eb000000	 bl          EnterCriticalSection

; 717  :             rc = pController->DI_ReleaseInterrupt(*((DWORD*)pInBuffer));

  00098	e5943000	 ldr         r3, [r4]
  0009c	e5951000	 ldr         r1, [r5]
  000a0	e1a00004	 mov         r0, r4
  000a4	e593302c	 ldr         r3, [r3, #0x2C]
  000a8	e1a0e00f	 mov         lr, pc
  000ac	e12fff13	 bx          r3
  000b0	e1a08000	 mov         r8, r0
  000b4	ea000083	 b           |$LN58@DMA_IOCont|
  000b8		 |$LN6@DMA_IOCont|

; 662  :             LeaveCriticalSection(&pDevice->cs);
; 663  :             }
; 664  :             break;
; 665  :             
; 666  :         case IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT:
; 667  :             {
; 668  :             SystemDmaController *pController;
; 669  :             IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT_OUT *pIoctlOutput;
; 670  :             DEBUGMSG(ZONE_INFO, (L"DMA: IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT\r\n"));
; 671  : 
; 672  :             if (pOutBuffer == NULL || outSize != sizeof(IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT_OUT) ||
; 673  :                 pInBuffer == NULL || inSize != sizeof(IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT_IN))

  000b8	e59d9020	 ldr         r9, [sp, #0x20]
  000bc	e3590000	 cmp         r9, #0
  000c0	0a000083	 beq         |$LN39@DMA_IOCont|
  000c4	e59d3024	 ldr         r3, [sp, #0x24]
  000c8	e353000c	 cmp         r3, #0xC
  000cc	1a000080	 bne         |$LN39@DMA_IOCont|
  000d0	e3550000	 cmp         r5, #0
  000d4	0a00007e	 beq         |$LN39@DMA_IOCont|
  000d8	e3560004	 cmp         r6, #4
  000dc	1a00007c	 bne         |$LN39@DMA_IOCont|

; 674  :                 {
; 675  :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: DMA_IOControl: "
; 676  :                     L"IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT invalid parameters\r\n"
; 677  :                     ));
; 678  :                 SetLastError(ERROR_INVALID_PARAMETER);
; 679  :                 break;
; 680  :                 }
; 681  : 
; 682  :             // Cast pOutBuffer
; 683  :             pIoctlOutput = (IOCTL_DMA_REQUEST_DEDICATED_INTERRUPT_OUT*)pOutBuffer;
; 684  : 
; 685  :             //assume this is a system interrupt
; 686  :             pController = pDevice->pSystemController;
; 687  :             
; 688  :             EnterCriticalSection(&pDevice->cs);

  000e0	e5976014	 ldr         r6, [r7, #0x14]
  000e4	e2870018	 add         r0, r7, #0x18
  000e8	eb000000	 bl          EnterCriticalSection

; 689  :             rc = pController->DI_ReserveInterrupt(
; 690  :                                                 *((DWORD*)pInBuffer), 
; 691  :                                                 &pIoctlOutput->IrqNum,
; 692  :                                                 &pIoctlOutput->DmaControllerPhysAddr,
; 693  :                                                 &pIoctlOutput->ffDmaChannels
; 694  :                                               );

  000ec	e5963000	 ldr         r3, [r6]
  000f0	e5951000	 ldr         r1, [r5]
  000f4	e2894008	 add         r4, r9, #8
  000f8	e5935028	 ldr         r5, [r3, #0x28]
  000fc	e2893004	 add         r3, r9, #4
  00100	e1a02009	 mov         r2, r9
  00104	e1a00006	 mov         r0, r6
  00108	e58d4000	 str         r4, [sp]
  0010c	e1a0e00f	 mov         lr, pc
  00110	e12fff15	 bx          r5

; 717  :             rc = pController->DI_ReleaseInterrupt(*((DWORD*)pInBuffer));

  00114	e1a08000	 mov         r8, r0
  00118	ea00006a	 b           |$LN58@DMA_IOCont|
  0011c		 |$LN16@DMA_IOCont|

; 596  :                 {
; 597  :                 case DMA_TYPE_SYSTEM:
; 598  :                     pController = pDevice->pSystemController;
; 599  :                     break;
; 600  : 
; 601  :                 default:
; 602  :                     SetLastError(ERROR_INVALID_PARAMETER);
; 603  :                     goto cleanUp;                
; 604  :                 }
; 605  : 
; 606  :             EnterCriticalSection(&pDevice->cs);
; 607  :             rc = pController->SetSecondaryInterruptHandler(
; 608  :                     pRegisterEvent->pContext,
; 609  :                     pRegisterEvent->hEvent,
; 610  :                     pRegisterEvent->processId
; 611  :                     );
; 612  :             LeaveCriticalSection(&pDevice->cs);
; 613  :             }
; 614  :             break; 
; 615  : 
; 616  :         case IOCTL_DMA_DISABLESTANDBY:
; 617  :             {
; 618  :             DmaControllerBase *pController;
; 619  :             IOCTL_DMA_DISABLESTANDBY_IN *pIoctlInput;
; 620  :             DEBUGMSG(ZONE_INFO, (L"DMA: IOCTL_DMA_DISABLESTANDBY\r\n"));
; 621  : 
; 622  :             if (pInBuffer == NULL || inSize != sizeof(IOCTL_DMA_DISABLESTANDBY_IN))

  0011c	e3550000	 cmp         r5, #0
  00120	0a00006b	 beq         |$LN39@DMA_IOCont|
  00124	e356000c	 cmp         r6, #0xC
  00128	1a000069	 bne         |$LN39@DMA_IOCont|

; 623  :                 {
; 624  :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: DMA_IOControl: "
; 625  :                     L"IOCTL_DMA_DISABLESTANDBY invalid parameters\r\n"
; 626  :                     ));
; 627  :                 SetLastError(ERROR_INVALID_PARAMETER);
; 628  :                 break;
; 629  :                 }
; 630  : 
; 631  :             // Cast pInBuffer
; 632  :             pIoctlInput = (IOCTL_DMA_DISABLESTANDBY_IN*)pInBuffer;
; 633  : #if (_WINCEOSVER<600)
; 634  :             pIoctlInput->pContext = (DmaChannelContext_t*)MapCallerPtr(
; 635  :                     pIoctlInput->pContext, sizeof(DmaChannelContext_t)
; 636  :                     );
; 637  : #endif
; 638  : 
; 639  :             if (!pIoctlInput->bDelicatedChannel)

  0012c	e5953008	 ldr         r3, [r5, #8]
  00130	e3530000	 cmp         r3, #0
  00134	1a000003	 bne         |$LN13@DMA_IOCont|

; 640  :             {
; 641  :             switch (pIoctlInput->pContext->type)

  00138	e5953000	 ldr         r3, [r5]
  0013c	e5933004	 ldr         r3, [r3, #4]
  00140	e3530000	 cmp         r3, #0

; 718  :             LeaveCriticalSection(&pDevice->cs);
; 719  :             }
; 720  :             break;
; 721  :             
; 722  :         }
; 723  : 
; 724  : cleanUp:

  00144	1a000062	 bne         |$LN39@DMA_IOCont|
  00148		 |$LN13@DMA_IOCont|

; 642  :                 {
; 643  :                 case DMA_TYPE_SYSTEM:
; 644  :                     pController = pDevice->pSystemController;
; 645  :                     break;
; 646  : 
; 647  :                 default:
; 648  :                     SetLastError(ERROR_INVALID_PARAMETER);
; 649  :                     goto cleanUp;                
; 650  :                     }
; 651  :             }
; 652  :             else
; 653  :             {
; 654  :                 pController = pDevice->pSystemController;

  00148	e5974014	 ldr         r4, [r7, #0x14]

; 655  :                 }
; 656  : 
; 657  :             EnterCriticalSection(&pDevice->cs);

  0014c	e2870018	 add         r0, r7, #0x18
  00150	eb000000	 bl          EnterCriticalSection

; 658  :             rc = pController->DisableStandby(
; 659  :                     pIoctlInput->pContext,
; 660  :                     pIoctlInput->bNoStandby
; 661  :                     );

  00154	e5943000	 ldr         r3, [r4]
  00158	e5952004	 ldr         r2, [r5, #4]
  0015c	e5951000	 ldr         r1, [r5]
  00160	e5933020	 ldr         r3, [r3, #0x20]
  00164	e1a00004	 mov         r0, r4
  00168	e1a0e00f	 mov         lr, pc
  0016c	e12fff13	 bx          r3

; 717  :             rc = pController->DI_ReleaseInterrupt(*((DWORD*)pInBuffer));

  00170	e1a08000	 mov         r8, r0
  00174	ea000053	 b           |$LN58@DMA_IOCont|
  00178		 |$LN49@DMA_IOCont|

; 453  :         { 
; 454  :         case IOCTL_DMA_INTERRUPTDONE:
; 455  :             {
; 456  :             DmaControllerBase *pController;
; 457  :             IOCTL_DMA_INTERRUPTDONE_IN *pContext;
; 458  :             DEBUGMSG(ZONE_INFO, (L"DMA: IOCTL_DMA_INTERRUPTDONE\r\n"));
; 459  : 
; 460  :             if (pInBuffer == NULL || 
; 461  :                 inSize != sizeof(IOCTL_DMA_INTERRUPTDONE_IN))

  00178	e3550000	 cmp         r5, #0
  0017c	0a000054	 beq         |$LN39@DMA_IOCont|
  00180	e3560010	 cmp         r6, #0x10
  00184	1a000052	 bne         |$LN39@DMA_IOCont|

; 462  :                 {
; 463  :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: DMA_IOControl: "
; 464  :                     L"IOCTL_DMA_INTERRUPTDONE invalid parameters\r\n"
; 465  :                     ));
; 466  :                 SetLastError(ERROR_INVALID_PARAMETER);
; 467  :                 break;
; 468  :                 }
; 469  : 
; 470  :             pContext = (IOCTL_DMA_INTERRUPTDONE_IN*)pInBuffer;
; 471  :             switch (pContext->type)

  00188	e5953004	 ldr         r3, [r5, #4]
  0018c	e3530000	 cmp         r3, #0

; 718  :             LeaveCriticalSection(&pDevice->cs);
; 719  :             }
; 720  :             break;
; 721  :             
; 722  :         }
; 723  : 
; 724  : cleanUp:

  00190	1a00004f	 bne         |$LN39@DMA_IOCont|
  00194	e5974014	 ldr         r4, [r7, #0x14]
  00198	e2870018	 add         r0, r7, #0x18
  0019c	eb000000	 bl          EnterCriticalSection
  001a0	e1a01005	 mov         r1, r5
  001a4	e1a00004	 mov         r0, r4
  001a8	eb000000	 bl          |?InterruptDone@DmaControllerBase@@QAAHPBUDmaChannelContext_t@@@Z|
  001ac	e1a08000	 mov         r8, r0
  001b0	ea000044	 b           |$LN58@DMA_IOCont|
  001b4		 |$LN24@DMA_IOCont|

; 555  :                 {
; 556  :                 case DMA_TYPE_SYSTEM:
; 557  :                     pController = pDevice->pSystemController;
; 558  :                     break;
; 559  : 
; 560  :                 default:
; 561  :                     SetLastError(ERROR_INVALID_PARAMETER);
; 562  :                     goto cleanUp;                
; 563  :                 }
; 564  : 
; 565  :             EnterCriticalSection(&pDevice->cs);
; 566  :             pController->ReleaseChannel(pContext);
; 567  :             LeaveCriticalSection(&pDevice->cs);
; 568  :             rc = TRUE;
; 569  :             }
; 570  :             break;
; 571  : 
; 572  :         case IOCTL_DMA_REGISTER_EVENTHANDLE:
; 573  :             {
; 574  :             DmaControllerBase *pController;
; 575  :             IOCTL_DMA_REGISTER_EVENTHANDLE_IN *pRegisterEvent;
; 576  :             DEBUGMSG(ZONE_INFO, (L"DMA: IOCTL_DMA_REGISTER_EVENTHANDLE\r\n"));
; 577  : 
; 578  :             if (pInBuffer == NULL || inSize != sizeof(IOCTL_DMA_REGISTER_EVENTHANDLE_IN))

  001b4	e3550000	 cmp         r5, #0
  001b8	0a000045	 beq         |$LN39@DMA_IOCont|
  001bc	e356000c	 cmp         r6, #0xC
  001c0	1a000043	 bne         |$LN39@DMA_IOCont|

; 579  :                 {
; 580  :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: DMA_IOControl: "
; 581  :                     L"IOCTL_DMA_REGISTER_EVENTHANDLE invalid parameters\r\n"
; 582  :                     ));
; 583  :                 SetLastError(ERROR_INVALID_PARAMETER);
; 584  :                 break;
; 585  :                 }
; 586  : 
; 587  :             pRegisterEvent = (IOCTL_DMA_REGISTER_EVENTHANDLE_IN*)pInBuffer;
; 588  : 
; 589  : #if (_WINCEOSVER<600)
; 590  :             pRegisterEvent->pContext = (DmaChannelContext_t*)MapCallerPtr(
; 591  :                     pRegisterEvent->pContext, sizeof(DmaChannelContext_t)
; 592  :                     );
; 593  : #endif
; 594  :             
; 595  :             switch (pRegisterEvent->pContext->type)

  001c4	e5953000	 ldr         r3, [r5]
  001c8	e5933004	 ldr         r3, [r3, #4]
  001cc	e3530000	 cmp         r3, #0

; 718  :             LeaveCriticalSection(&pDevice->cs);
; 719  :             }
; 720  :             break;
; 721  :             
; 722  :         }
; 723  : 
; 724  : cleanUp:

  001d0	1a00003f	 bne         |$LN39@DMA_IOCont|
  001d4	e5974014	 ldr         r4, [r7, #0x14]
  001d8	e2870018	 add         r0, r7, #0x18
  001dc	eb000000	 bl          EnterCriticalSection
  001e0	e5953008	 ldr         r3, [r5, #8]
  001e4	e5952004	 ldr         r2, [r5, #4]
  001e8	e5951000	 ldr         r1, [r5]
  001ec	e1a00004	 mov         r0, r4
  001f0	eb000000	 bl          |?SetSecondaryInterruptHandler@DmaControllerBase@@QAAHPBUDmaChannelContext_t@@PAXK@Z|
  001f4	e1a08000	 mov         r8, r0
  001f8	ea000032	 b           |$LN58@DMA_IOCont|
  001fc		 |$LN32@DMA_IOCont|

; 532  :                 }
; 533  :             LeaveCriticalSection(&pDevice->cs);
; 534  :             rc = TRUE;
; 535  :             }            
; 536  :             break;
; 537  : 
; 538  :         case IOCTL_DMA_RELEASE_CHANNEL:
; 539  :             {
; 540  :             DmaControllerBase *pController;
; 541  :             IOCTL_DMA_RELEASE_IN *pContext;
; 542  :             DEBUGMSG(ZONE_INFO, (L"DMA: IOCTL_DMA_RELEASE_CHANNEL\r\n"));
; 543  : 
; 544  :             if (pInBuffer == NULL || inSize != sizeof(IOCTL_DMA_RELEASE_IN))

  001fc	e3550000	 cmp         r5, #0
  00200	0a000033	 beq         |$LN39@DMA_IOCont|
  00204	e3560010	 cmp         r6, #0x10
  00208	1a000031	 bne         |$LN39@DMA_IOCont|

; 545  :                 {
; 546  :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: DMA_IOControl: "
; 547  :                     L"IOCTL_DMA_RELEASE_CHANNEL invalid parameters\r\n"
; 548  :                     ));
; 549  :                 SetLastError(ERROR_INVALID_PARAMETER);
; 550  :                 break;
; 551  :                 }
; 552  : 
; 553  :             pContext = (IOCTL_DMA_RELEASE_IN*)pInBuffer;
; 554  :             switch (pContext->type)

  0020c	e5953004	 ldr         r3, [r5, #4]
  00210	e3530000	 cmp         r3, #0

; 718  :             LeaveCriticalSection(&pDevice->cs);
; 719  :             }
; 720  :             break;
; 721  :             
; 722  :         }
; 723  : 
; 724  : cleanUp:

  00214	1a00002e	 bne         |$LN39@DMA_IOCont|
  00218	e5974014	 ldr         r4, [r7, #0x14]
  0021c	e2870018	 add         r0, r7, #0x18
  00220	eb000000	 bl          EnterCriticalSection
  00224	e5943000	 ldr         r3, [r4]
  00228	e1a01005	 mov         r1, r5
  0022c	e1a00004	 mov         r0, r4
  00230	e5933014	 ldr         r3, [r3, #0x14]
  00234	e1a0e00f	 mov         lr, pc
  00238	e12fff13	 bx          r3
  0023c		 |$LN33@DMA_IOCont|
  0023c	e2870018	 add         r0, r7, #0x18
  00240	eb000000	 bl          LeaveCriticalSection
  00244	e3a08001	 mov         r8, #1
  00248	ea000023	 b           |$cleanUp$36328|
  0024c		 |$LN41@DMA_IOCont|

; 472  :                 {
; 473  :                 case DMA_TYPE_SYSTEM:
; 474  :                     pController = pDevice->pSystemController;
; 475  :                     break;
; 476  : 
; 477  :                 default:
; 478  :                     SetLastError(ERROR_INVALID_PARAMETER);
; 479  :                     goto cleanUp;               
; 480  :                 }
; 481  :             EnterCriticalSection(&pDevice->cs);
; 482  :             rc = pController->InterruptDone(pContext);
; 483  :             LeaveCriticalSection(&pDevice->cs);
; 484  :             }
; 485  :             break;
; 486  :             
; 487  :         case IOCTL_DMA_RESERVE_CHANNEL:
; 488  :             {
; 489  :             DmaControllerBase *pController;
; 490  :             IOCTL_DMA_RESERVE_IN *pDmaType;
; 491  :             IOCTL_DMA_RESERVE_OUT *pContext;
; 492  :             DEBUGMSG(ZONE_INFO, (L"DMA: IOCTL_DMA_RESERVE_CHANNEL\r\n"));
; 493  :             
; 494  :             // check for correct parameters
; 495  :             if (pOutBuffer == NULL || outSize != sizeof(IOCTL_DMA_RESERVE_OUT) ||
; 496  :                 pInBuffer == NULL || inSize != sizeof(IOCTL_DMA_RESERVE_IN))

  0024c	e59d9020	 ldr         r9, [sp, #0x20]
  00250	e3590000	 cmp         r9, #0
  00254	0a00001e	 beq         |$LN39@DMA_IOCont|
  00258	e59d3024	 ldr         r3, [sp, #0x24]
  0025c	e3530010	 cmp         r3, #0x10
  00260	1a00001b	 bne         |$LN39@DMA_IOCont|
  00264	e3550000	 cmp         r5, #0
  00268	0a000019	 beq         |$LN39@DMA_IOCont|
  0026c	e3560004	 cmp         r6, #4
  00270	1a000017	 bne         |$LN39@DMA_IOCont|

; 502  :                 break;
; 503  :                 }
; 504  : 
; 505  :             // if successful allocate memory            
; 506  :             pDmaType = (IOCTL_DMA_RESERVE_IN*)pInBuffer;
; 507  :             pContext = (IOCTL_DMA_RESERVE_OUT*)pOutBuffer;
; 508  :             switch (*pDmaType)

  00274	e5953000	 ldr         r3, [r5]
  00278	e3530000	 cmp         r3, #0

; 718  :             LeaveCriticalSection(&pDevice->cs);
; 719  :             }
; 720  :             break;
; 721  :             
; 722  :         }
; 723  : 
; 724  : cleanUp:

  0027c	1a000014	 bne         |$LN39@DMA_IOCont|
  00280	e5974014	 ldr         r4, [r7, #0x14]
  00284	e3a03000	 mov         r3, #0
  00288	e5893000	 str         r3, [r9]
  0028c	e5893004	 str         r3, [r9, #4]
  00290	e5893008	 str         r3, [r9, #8]
  00294	e589300c	 str         r3, [r9, #0xC]
  00298	e5953000	 ldr         r3, [r5]
  0029c	e2870018	 add         r0, r7, #0x18
  002a0	e5893004	 str         r3, [r9, #4]
  002a4	eb000000	 bl          EnterCriticalSection
  002a8	e5943000	 ldr         r3, [r4]
  002ac	e1a01009	 mov         r1, r9
  002b0	e1a00004	 mov         r0, r4
  002b4	e5933010	 ldr         r3, [r3, #0x10]
  002b8	e1a0e00f	 mov         lr, pc
  002bc	e12fff13	 bx          r3
  002c0	e3500000	 cmp         r0, #0
  002c4	1affffdc	 bne         |$LN33@DMA_IOCont|
  002c8		 |$LN58@DMA_IOCont|

; 509  :                 {
; 510  :                 case DMA_TYPE_SYSTEM:
; 511  :                     pController = pDevice->pSystemController;
; 512  :                     break;
; 513  : 
; 514  :                 default:
; 515  :                     SetLastError(ERROR_INVALID_PARAMETER);
; 516  :                     goto cleanUp;
; 517  :                 }
; 518  : 
; 519  :             // reset context information
; 520  :             memset(pContext, 0, sizeof(IOCTL_DMA_RESERVE_OUT));
; 521  : 
; 522  :             // copy context information
; 523  :             pContext->type = *pDmaType;
; 524  :             EnterCriticalSection(&pDevice->cs);
; 525  :             if (pController->ReserveChannel(pContext) == FALSE)
; 526  :                 {
; 527  :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: DMA_IOControl: "
; 528  :                     L"IOCTL_DMA_RESERVE_CHANNEL: failed\r\n"
; 529  :                     ));
; 530  :                 LeaveCriticalSection(&pDevice->cs);

  002c8	e2870018	 add         r0, r7, #0x18
  002cc	eb000000	 bl          LeaveCriticalSection

; 531  :                 break;

  002d0	ea000001	 b           |$cleanUp$36328|
  002d4		 |$LN39@DMA_IOCont|

; 497  :                 {
; 498  :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: DMA_IOControl: "
; 499  :                     L"IOCTL_DMA_RESERVE_CHANNEL invalid parameters\r\n"
; 500  :                     ));
; 501  :                 SetLastError(ERROR_INVALID_PARAMETER);

  002d4	e3a00057	 mov         r0, #0x57
  002d8	eb000000	 bl          SetLastError
  002dc		 |$cleanUp$36328|

; 725  :     DEBUGMSG(ZONE_FUNCTION, (L"-DMA_IOControl(rc = %d)\r\n", rc));
; 726  :     return rc;
; 727  : }

  002dc	e1a00008	 mov         r0, r8
  002e0	e28dd004	 add         sp, sp, #4
  002e4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  002e8	e12fff1e	 bx          lr
  002ec		 |$LN63@DMA_IOCont|
  002ec		 |$LN64@DMA_IOCont|
  002ec	01da0420	 DCD         0x1da0420
  002f0		 |$LN65@DMA_IOCont|
  002f0	01da041c	 DCD         0x1da041c
  002f4		 |$LN66@DMA_IOCont|
  002f4	01da0418	 DCD         0x1da0418
  002f8		 |$LN67@DMA_IOCont|
  002f8	01da0414	 DCD         0x1da0414
  002fc		 |$LN68@DMA_IOCont|
  002fc	01da040c	 DCD         0x1da040c
  00300		 |$LN69@DMA_IOCont|
  00300	01da0408	 DCD         0x1da0408
  00304		 |$LN70@DMA_IOCont|
  00304	01da0404	 DCD         0x1da0404
  00308		 |$LN71@DMA_IOCont|
  00308	646d6149	 DCD         0x646d6149
  0030c		 |$M36648|

			 ENDP  ; |?DMA_IOControl@@YAHKKPAEK0KPAK@Z|, DMA_IOControl

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|

  00000			 AREA	 |.pdata|, PDATA
|$T36670| DCD	|$LN8@DllMain|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllMain| PROC

; 743  : {

  00000		 |$LN8@DllMain|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36667|
  00004	e1a04000	 mov         r4, r0

; 744  :     UNREFERENCED_PARAMETER(pReserved);
; 745  :     switch (reason)

  00008	e3510001	 cmp         r1, #1
  0000c	1a000003	 bne         |$LN2@DllMain|

; 746  :         {
; 747  :         case DLL_PROCESS_ATTACH:
; 748  :             RETAILREGISTERZONES((HMODULE)hDLL);

  00010	e59f1014	 ldr         r1, [pc, #0x14]
  00014	eb000000	 bl          RegisterDbgZones

; 749  :             DisableThreadLibraryCalls((HMODULE)hDLL);

  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          DisableThreadLibraryCalls
  00020		 |$LN2@DllMain|

; 750  :             break;
; 751  :         }
; 752  :     return TRUE;

  00020	e3a00001	 mov         r0, #1

; 753  : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$LN9@DllMain|
  0002c		 |$LN10@DllMain|
  0002c	00000000	 DCD         |dpCurSettings|
  00030		 |$M36668|

			 ENDP  ; |DllMain|

	EXPORT	|?DMA_Deinit@@YAHK@Z|			; DMA_Deinit
	IMPORT	|DeleteCriticalSection|
	IMPORT	|EnableDeviceClocks|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmacontroller.h

  00000			 AREA	 |.pdata|, PDATA
|$T36697| DCD	|$LN18@DMA_Deinit|
	DCD	0x40002801
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMA_Deinit@@YAHK@Z| PROC		; DMA_Deinit

; 255  : {

  00000		 |$LN18@DMA_Deinit|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36694|
  00004	e1b04000	 movs        r4, r0

; 256  :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 257  :     Device_t *pDevice = (Device_t*)context;
; 258  : 
; 259  :     DEBUGMSG(ZONE_FUNCTION, (L"+DMA_Deinit(0x%08x)\r\n", context));
; 260  : 
; 261  :     // Check if we get correct context
; 262  :     if ((pDevice == NULL) || (pDevice->cookie != DMA_DEVICE_COOKIE))

  0000c	0a00001f	 beq         |$cleanUp$36258|
  00010	e5942000	 ldr         r2, [r4]
  00014	e59f3080	 ldr         r3, [pc, #0x80]
  00018	e1520003	 cmp         r2, r3
  0001c	1a00001b	 bne         |$cleanUp$36258|

; 263  :         {
; 264  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: DMA_Deinit: "
; 265  :             L"Incorrect context paramer\r\n"
; 266  :             ));
; 267  :         goto cleanUp;
; 268  :         }
; 269  : 
; 270  :     // Check for open instances
; 271  :     if (pDevice->instances > 0)

  00020	e594302c	 ldr         r3, [r4, #0x2C]
  00024	e3530000	 cmp         r3, #0
  00028	ca000018	 bgt         |$cleanUp$36258|

; 272  :         {
; 273  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: DMA_Deinit: "
; 274  :             L"Deinit with active instance (%d instances active)\r\n",
; 275  :             pDevice->instances
; 276  :             ));
; 277  :         goto cleanUp;
; 278  :         }
; 279  : 
; 280  :     if (pDevice->pSystemController != NULL)

  0002c	e5943014	 ldr         r3, [r4, #0x14]
  00030	e3530000	 cmp         r3, #0
  00034	0a00000d	 beq         |$LN9@DMA_Deinit|

; 281  :         {
; 282  :         pDevice->pSystemController->Uninitialize();

  00038	e1a00003	 mov         r0, r3
  0003c	e5903000	 ldr         r3, [r0]
  00040	e5933018	 ldr         r3, [r3, #0x18]
  00044	e1a0e00f	 mov         lr, pc
  00048	e12fff13	 bx          r3

; 283  :         delete pDevice->pSystemController;

  0004c	e5943014	 ldr         r3, [r4, #0x14]
  00050	e1b05003	 movs        r5, r3
  00054	0a000005	 beq         |$LN9@DMA_Deinit|
  00058	e59f3038	 ldr         r3, [pc, #0x38]
  0005c	e1a00005	 mov         r0, r5
  00060	e5853000	 str         r3, [r5]
  00064	eb000000	 bl          |?Uninitialize@SystemDmaController@@UAAXXZ|
  00068	e1a00005	 mov         r0, r5
  0006c	eb000000	 bl          |??3@YAXPAX@Z|
  00070		 |$LN9@DMA_Deinit|

; 284  :         }
; 285  : 
; 286  :     // Set hardware to D4
; 287  : 	EnableDeviceClocks(pDevice->SdmaDevice, FALSE);

  00070	e5940004	 ldr         r0, [r4, #4]
  00074	e3a01000	 mov         r1, #0
  00078	eb000000	 bl          EnableDeviceClocks

; 288  : 
; 289  : 	// Delete critical section
; 290  :     DeleteCriticalSection(&pDevice->cs);

  0007c	e2840018	 add         r0, r4, #0x18
  00080	eb000000	 bl          DeleteCriticalSection

; 291  :  
; 292  :     // Free device structure
; 293  :     LocalFree(pDevice);

  00084	e1a00004	 mov         r0, r4
  00088	eb000000	 bl          LocalFree

; 294  : 
; 295  :     // Done
; 296  :     rc = TRUE;

  0008c	e3a00001	 mov         r0, #1
  00090		 |$cleanUp$36258|

; 297  : 
; 298  : cleanUp:
; 299  :     DEBUGMSG(ZONE_FUNCTION, (L"-DMA_Deinit(rc = %d)\r\n", rc));
; 300  :     return rc;
; 301  : }

  00090	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$LN19@DMA_Deinit|
  00098		 |$LN20@DMA_Deinit|
  00098	00000000	 DCD         |??_7SystemDmaController@@6B@|
  0009c		 |$LN21@DMA_Deinit|
  0009c	646d6144	 DCD         0x646d6144
  000a0		 |$M36695|

			 ENDP  ; |?DMA_Deinit@@YAHK@Z|, DMA_Deinit

	EXPORT	|?DMA_Init@@YAKPBGPBX@Z|		; DMA_Init
	IMPORT	|SOCGetDMADevice|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T36714| DCD	|$LN13@DMA_Init|
	DCD	0x40002901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMA_Init@@YAKPBGPBX@Z| PROC		; DMA_Init

; 179  : {

  00000		 |$LN13@DMA_Init|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M36711|
  00004	e1a06000	 mov         r6, r0

; 180  :     DWORD rc = (DWORD)NULL;
; 181  : 
; 182  :     UNREFERENCED_PARAMETER(pBusContext);
; 183  :     UNREFERENCED_PARAMETER(szContext);
; 184  : 
; 185  :     DEBUGMSG(ZONE_FUNCTION, (
; 186  :         L"+DMA_Init(%s, 0x%08x)\r\n", szContext, pBusContext
; 187  :         ));
; 188  : 
; 189  :     // Create device structure
; 190  :     Device_t *pDevice = (Device_t *)LocalAlloc(LPTR, sizeof(Device_t));

  00008	e3a01030	 mov         r1, #0x30
  0000c	e3a00040	 mov         r0, #0x40
  00010	e3a05000	 mov         r5, #0
  00014	eb000000	 bl          LocalAlloc
  00018	e1b04000	 movs        r4, r0

; 191  :     if (pDevice == NULL)

  0001c	0a000019	 beq         |$LN10@DMA_Init|

; 192  :         {
; 193  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: DMA_Init: "
; 194  :             L"Failed allocate DMA controller structure\r\n"
; 195  :             ));
; 196  :         goto cleanUp;
; 197  :         }
; 198  : 
; 199  :     // initialize memory
; 200  :     memset(pDevice, 0, sizeof(Device_t));

  00020	e3a02030	 mov         r2, #0x30
  00024	e3a01000	 mov         r1, #0
  00028	e1a00004	 mov         r0, r4
  0002c	eb000000	 bl          memset

; 201  : 
; 202  :     // Set cookie
; 203  :     pDevice->cookie = DMA_DEVICE_COOKIE;

  00030	e59f3068	 ldr         r3, [pc, #0x68]

; 204  : 
; 205  :     // Initalize critical section
; 206  :     InitializeCriticalSection(&pDevice->cs);

  00034	e1a00004	 mov         r0, r4
  00038	e4803018	 str         r3, [r0], #0x18
  0003c	eb000000	 bl          InitializeCriticalSection

; 207  : 
; 208  :     // Read device parameters
; 209  :     if (GetDeviceRegistryParams(
; 210  :             szContext, pDevice, dimof(s_deviceRegParams), s_deviceRegParams
; 211  :             ) != ERROR_SUCCESS)

  00040	e59f3054	 ldr         r3, [pc, #0x54]
  00044	e3a02002	 mov         r2, #2
  00048	e1a01004	 mov         r1, r4
  0004c	e1a00006	 mov         r0, r6
  00050	eb000000	 bl          GetDeviceRegistryParams
  00054	e3500000	 cmp         r0, #0
  00058	1a00000a	 bne         |$LN10@DMA_Init|

; 212  :         {
; 213  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: DMA_Init: "
; 214  :             L"Failed read DMA driver registry parameters\r\n"
; 215  :             ));
; 216  :         goto cleanUp;
; 217  :         }
; 218  :         
; 219  : 	// Retrieve device ID
; 220  :     pDevice->SdmaDevice = SOCGetDMADevice(pDevice->SdmaIndex);

  0005c	e5940008	 ldr         r0, [r4, #8]
  00060	eb000000	 bl          SOCGetDMADevice
  00064	e1a03000	 mov         r3, r0

; 221  :     
; 222  :     // Set hardware to full power
; 223  : 	EnableDeviceClocks(pDevice->SdmaDevice, TRUE);

  00068	e3a01001	 mov         r1, #1
  0006c	e5843004	 str         r3, [r4, #4]
  00070	eb000000	 bl          EnableDeviceClocks

; 224  :     
; 225  :     // DMA will be in smart idle mode so we don't need to
; 226  :     // ever set the power state of the DMA to D4
; 227  : 
; 228  :     // initialize general dma controller
; 229  :     if (InitializeDevice(pDevice) == FALSE)

  00074	e1a00004	 mov         r0, r4
  00078	eb000000	 bl          |?InitializeDevice@@YAHPAUDevice_t@@@Z|
  0007c	e3500000	 cmp         r0, #0

; 230  :         {
; 231  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: DMA_Init: "
; 232  :             L"Failed to initialize device\r\n"
; 233  :             ));
; 234  :         goto cleanUp;        
; 235  :         }
; 236  : 
; 237  :     rc = (DWORD)pDevice;

  00080	11a05004	 movne       r5, r4
  00084		 |$cleanUp$36235|
  00084	1a000001	 bne         |$LN1@DMA_Init|
  00088		 |$LN10@DMA_Init|

; 238  :     
; 239  : cleanUp:
; 240  :     if (rc == 0) DMA_Deinit((DWORD)pDevice);

  00088	e1a00004	 mov         r0, r4
  0008c	eb000000	 bl          |?DMA_Deinit@@YAHK@Z|
  00090		 |$LN1@DMA_Init|

; 241  :     DEBUGMSG(ZONE_FUNCTION, (L"-DMA_Init(rc = %d)\r\n", rc));
; 242  :     return rc;
; 243  : }

  00090	e1a00005	 mov         r0, r5
  00094	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN14@DMA_Init|
  0009c		 |$LN15@DMA_Init|
  0009c	00000000	 DCD         |s_deviceRegParams|
  000a0		 |$LN16@DMA_Init|
  000a0	646d6144	 DCD         0x646d6144
  000a4		 |$M36712|

			 ENDP  ; |?DMA_Init@@YAKPBGPBX@Z|, DMA_Init

	END
