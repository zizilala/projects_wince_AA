; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\SDMA\dmamediator.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T36201| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36198|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M36199|

			 ENDP  ; |SetEvent|

	EXPORT	|GetCurrentProcess|

  00000			 AREA	 |.pdata|, PDATA
|$T36210| DCD	|$LN5@GetCurrent|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcess| PROC

; 361  : _inline HANDLE GetCurrentProcess(void) {

  00000		 |$LN5@GetCurrent|
  00000		 |$M36207|

; 362  : 	return ((HANDLE)(SH_CURPROC+SYS_HANDLE_BASE));

  00000	e3a00042	 mov         r0, #0x42

; 363  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M36208|

			 ENDP  ; |GetCurrentProcess|

	EXPORT	|?InterruptHandler@DmaMediator@@KAKPAX@Z| ; DmaMediator::InterruptHandler
	EXPORT	|??_C@_1IA@HIKFKCCG@?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAe@| [ DATA ] ; `string'
	IMPORT	|InterruptDone|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|WaitForSingleObject|
	IMPORT	|__C_specific_handler|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmamediator.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T36238| DCD	|$LN23@InterruptH|
	DCD	0xc0002504

  00000			 AREA	 |.pdata|, PDATA
|$T36240| DCD	|$LN10@InterruptH|
	DCD	0x40000501

  00000			 AREA	 |.xdata|, DATA
|$T36236| DCD	0x1
	DCD	|$LN14@InterruptH|
	DCD	|$LN15@InterruptH|
	DCD	|$LN10@InterruptH|
	DCD	|$LN11@InterruptH|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@HIKFKCCG@?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAe@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "M", 0x0, "e", 0x0, "d", 0x0, "i"
	DCB	0x0, "a", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, ":"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, "H", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "e", 0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T36236|

  00008		 |?InterruptHandler@DmaMediator@@KAKPAX@Z| PROC ; DmaMediator::InterruptHandler

; 37   : {

  00008		 |$LN23@InterruptH|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5830	 stmdb       sp!, {r4, r5, r11, r12, lr}
  00010	e28db014	 add         r11, sp, #0x14
  00014	e24dd008	 sub         sp, sp, #8
  00018		 |$LN21@InterruptH|
  00018	e1a04000	 mov         r4, r0

; 38   :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaMediator::InterruptHandler: "
; 39   :         L"pData=0x%08X\r\n",pData
; 40   :         ));
; 41   :     
; 42   :     DmaMediator* pMediator = (DmaMediator*)pData;
; 43   :     DWORD sysIntr = pMediator->m_sysIntr;

  0001c	e5945010	 ldr         r5, [r4, #0x10]
  00020	e50b401c	 str         r4, [r11, #-0x1C]
  00024	e50b5018	 str         r5, [r11, #-0x18]
  00028		 |$LL4@InterruptH|
  00028		 |$LN14@InterruptH|

; 44   : 
; 45   :     for(;;)
; 46   :         {
; 47   :         __try
; 48   :             {
; 49   :             // wait for interrupt
; 50   :             WaitForSingleObject(pMediator->m_hEvent, INFINITE);            

  00028	e594000c	 ldr         r0, [r4, #0xC]
  0002c	e3e01000	 mvn         r1, #0
  00030	eb000000	 bl          WaitForSingleObject

; 51   :             if (pMediator->m_bExit == TRUE) break;

  00034	e5943004	 ldr         r3, [r4, #4]
  00038	e3530001	 cmp         r3, #1
  0003c	1a000000	 bne         |$LN1@InterruptH|
  00040	ea00000f	 b           |$LN3@InterruptH|
  00044		 |$LN1@InterruptH|

; 52   : 
; 53   :             DEBUGMSG(ZONE_IST, (L"DmaMediator::InterruptHandler: "
; 54   :                 L"received dma interrupt\r\n"
; 55   :                 ));
; 56   : 
; 57   :             // process interrupt
; 58   :             pMediator->ProcessInterrupt();

  00044	e5943000	 ldr         r3, [r4]
  00048	e1a00004	 mov         r0, r4
  0004c	e5933004	 ldr         r3, [r3, #4]
  00050	e1a0e00f	 mov         lr, pc
  00054	e12fff13	 bx          r3
  00058		 |$LN15@InterruptH|

; 59   :             }

  00058	ea000006	 b           |$LN16@InterruptH|
  0005c		 |$LN11@InterruptH|

; 61   :             {
; 62   :             RETAILMSG(ZONE_ERROR, (L"DmaMediator::InterruptHandler: "
; 63   :                 L"exception in interrupt handler\r\n"
; 64   :                 ));

  0005c	e59f3048	 ldr         r3, [pc, #0x48]
  00060	e5933440	 ldr         r3, [r3, #0x440]
  00064	e3130001	 tst         r3, #1
  00068	159f0038	 ldrne       r0, [pc, #0x38]
  0006c	1b000000	 blne        NKDbgPrintfW
  00070	e51b401c	 ldr         r4, [r11, #-0x1C]
  00074	e51b5018	 ldr         r5, [r11, #-0x18]
  00078		 |$LN16@InterruptH|

; 65   :             }
; 66   :         // reset for next interrupt
; 67   :         ::InterruptDone(sysIntr);

  00078	e1a00005	 mov         r0, r5
  0007c	eb000000	 bl          InterruptDone

; 68   :         }

  00080	eaffffe8	 b           |$LL4@InterruptH|
  00084		 |$LN3@InterruptH|

; 69   : 
; 70   :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaMediator::InterruptHandler\r\n"));
; 71   :     return 1;

  00084	e3a00001	 mov         r0, #1
  00088	ea000000	 b           |$LN5@InterruptH|
  0008c		 |$LN20@InterruptH|
  0008c	e51b0018	 ldr         r0, [r11, #-0x18]
  00090		 |$LN5@InterruptH|

; 72   : }

  00090	e24bd014	 sub         sp, r11, #0x14
  00094	e89d6830	 ldmia       sp, {r4, r5, r11, sp, lr}
  00098	e12fff1e	 bx          lr

			 ENDP  ; |?InterruptHandler@DmaMediator@@KAKPAX@Z|, DmaMediator::InterruptHandler

  0009c		 |$LN10@InterruptH|
  0009c		 |$LN22@InterruptH|

; 60   :         __except (EXCEPTION_EXECUTE_HANDLER)

  0009c	e52de004	 str         lr, [sp, #-4]!
  000a0		 |$LN13@InterruptH|
  000a0		 |$LN25@InterruptH|
  000a0	e3a00001	 mov         r0, #1
  000a4		 |$LN12@InterruptH|
  000a4	e49df004	 ldr         pc, [sp], #4
  000a8		 |$LN27@InterruptH|
  000a8		 |$LN28@InterruptH|
  000a8	00000000	 DCD         |??_C@_1IA@HIKFKCCG@?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAe@|
  000ac		 |$LN29@InterruptH|
  000ac	00000000	 DCD         |dpCurSettings|
  000b0		 |$LN26@InterruptH|
  000b0		 |$LN24@InterruptH|
	EXPORT	|?SetDmaController@DmaMediator@@QAAXPAXPAVDmaControllerBase@@@Z| ; DmaMediator::SetDmaController

  00000			 AREA	 |.pdata|, PDATA
|$T36257| DCD	|$LN5@SetDmaCont|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetDmaController@DmaMediator@@QAAXPAXPAVDmaControllerBase@@@Z| PROC ; DmaMediator::SetDmaController

; 81   : {

  00000		 |$LN5@SetDmaCont|
  00000		 |$M36254|

; 82   :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaMediator::SetDmaController"
; 83   :         L"context=0x%08X, pDmaController=0x%08X\r\n",
; 84   :         context, pDmaController
; 85   :         ));
; 86   : 
; 87   :     m_context = context;

  00000	e5801020	 str         r1, [r0, #0x20]

; 88   :     m_pDmaController = pDmaController;

  00004	e5802024	 str         r2, [r0, #0x24]

; 89   :     
; 90   : 
; 91   :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaMediator::SetDmaController\r\n"));
; 92   : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M36255|

			 ENDP  ; |?SetDmaController@DmaMediator@@QAAXPAXPAVDmaControllerBase@@@Z|, DmaMediator::SetDmaController

	EXPORT	|?StopInterruptHandler@DmaMediator@@QAAXXZ| ; DmaMediator::StopInterruptHandler
	IMPORT	|KernelIoControl|
	IMPORT	|InterruptDisable|
	IMPORT	|CloseHandle|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T36269| DCD	|$LN10@StopInterr|
	DCD	0x40002802
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmamediator.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?StopInterruptHandler@DmaMediator@@QAAXXZ| PROC ; DmaMediator::StopInterruptHandler

; 177  : {

  00000		 |$LN10@StopInterr|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M36266|
  00008	e1a04000	 mov         r4, r0

; 178  :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaMediator::StopInterruptHandler\r\n"));
; 179  : 
; 180  :     // stop thread
; 181  :     if (m_hEvent != NULL)

  0000c	e594300c	 ldr         r3, [r4, #0xC]
  00010	e3a05000	 mov         r5, #0
  00014	e1b00003	 movs        r0, r3
  00018	0a00000f	 beq         |$LN3@StopInterr|

; 182  :         {
; 183  :         if (m_hIST != NULL)

  0001c	e5943008	 ldr         r3, [r4, #8]
  00020	e3530000	 cmp         r3, #0
  00024	0a000009	 beq         |$LN2@StopInterr|

; 184  :             {
; 185  :             // Signal stop to thread
; 186  :             m_bExit = TRUE;

  00028	e3a03001	 mov         r3, #1

; 187  :             
; 188  :             // Set event to wake it
; 189  :             SetEvent(m_hEvent);

  0002c	e3a01003	 mov         r1, #3
  00030	e5843004	 str         r3, [r4, #4]
  00034	eb000000	 bl          EventModify

; 190  :             
; 191  :             // Wait until thread exits
; 192  :             WaitForSingleObject(m_hIST, INFINITE);

  00038	e5940008	 ldr         r0, [r4, #8]
  0003c	e3e01000	 mvn         r1, #0
  00040	eb000000	 bl          WaitForSingleObject

; 193  :             
; 194  :             // Close handle
; 195  :             CloseHandle(m_hIST);

  00044	e5940008	 ldr         r0, [r4, #8]
  00048	eb000000	 bl          CloseHandle

; 196  : 
; 197  :             // reinit
; 198  :             m_hIST = NULL;

  0004c	e5845008	 str         r5, [r4, #8]
  00050		 |$LN2@StopInterr|

; 199  :             }
; 200  : 
; 201  :         // close event handle
; 202  :         CloseHandle(m_hEvent);

  00050	e594000c	 ldr         r0, [r4, #0xC]
  00054	eb000000	 bl          CloseHandle

; 203  :         m_hEvent = NULL;

  00058	e584500c	 str         r5, [r4, #0xC]
  0005c		 |$LN3@StopInterr|

; 204  :         }
; 205  : 
; 206  :     // unregister system interrupt
; 207  :     if (m_sysIntr != 0)

  0005c	e5943010	 ldr         r3, [r4, #0x10]
  00060	e3530000	 cmp         r3, #0
  00064	0a000009	 beq         |$LN1@StopInterr|

; 208  :         {
; 209  :         InterruptDisable(m_sysIntr);

  00068	e1a00003	 mov         r0, r3
  0006c	eb000000	 bl          InterruptDisable

; 210  :         KernelIoControl(
; 211  :             IOCTL_HAL_RELEASE_SYSINTR, &m_sysIntr,
; 212  :             sizeof(m_sysIntr), NULL, 0, NULL
; 213  :             );

  00070	e59f0024	 ldr         r0, [pc, #0x24]
  00074	e3a03000	 mov         r3, #0
  00078	e3a02004	 mov         r2, #4
  0007c	e2841010	 add         r1, r4, #0x10
  00080	e58d5004	 str         r5, [sp, #4]
  00084	e58d5000	 str         r5, [sp]
  00088	eb000000	 bl          KernelIoControl

; 214  : 
; 215  :         // reinit
; 216  :         m_sysIntr = 0;

  0008c	e5845010	 str         r5, [r4, #0x10]
  00090		 |$LN1@StopInterr|

; 217  :         }    
; 218  : 
; 219  :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaMediator::StopInterruptHandler\r\n"));
; 220  : }

  00090	e28dd008	 add         sp, sp, #8
  00094	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN11@StopInterr|
  0009c		 |$LN12@StopInterr|
  0009c	010100d8	 DCD         0x10100d8
  000a0		 |$M36267|

			 ENDP  ; |?StopInterruptHandler@DmaMediator@@QAAXXZ|, DmaMediator::StopInterruptHandler

	EXPORT	|?ProcessInterrupt@DmaMediator@@MAAHXZ|	; DmaMediator::ProcessInterrupt
	EXPORT	|??_C@_1EK@LOCPFGLK@?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAr?$AA?5?$AAd?$AAm?$AAa?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAm?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@CDEDOPNL@?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAd?$AAm?$AAa?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAm?$AAa?$AAs?$AAk@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@KHPJDBGO@?$AAW?$AAA?$AAR?$AAN?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr@| [ DATA ] ; `string'
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T36296| DCD	|$LN22@ProcessInt|
	DCD	0x40003f02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@LOCPFGLK@?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAr?$AA?5?$AAd?$AAm?$AAa?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAm?$AAa@| DCB "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "e"
	DCB	0x0, "a", 0x0, "r", 0x0, " ", 0x0, "d", 0x0, "m", 0x0, "a"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "s", 0x0, "k", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@CDEDOPNL@?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAd?$AAm?$AAa?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAm?$AAa?$AAs?$AAk@| DCB "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "d", 0x0, "m", 0x0, "a", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "s"
	DCB	0x0, "k", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@KHPJDBGO@?$AAW?$AAA?$AAR?$AAN?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, "!", 0x0, " ", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "M", 0x0, "e", 0x0, "d", 0x0, "i"
	DCB	0x0, "a", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, ":"
	DCB	0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmamediator.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ProcessInterrupt@DmaMediator@@MAAHXZ| PROC ; DmaMediator::ProcessInterrupt

; 226  : {

  00000		 |$LN22@ProcessInt|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36293|
  00008	e1a06000	 mov         r6, r0

; 227  :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaMediator::ProcessInterrupt\r\n"));
; 228  : 
; 229  :     // get the dma's which caused the interrupt
; 230  :     BOOL rc = FALSE;
; 231  :     DWORD dwInterruptMask;
; 232  :     DWORD dwInterruptOrigMask;
; 233  :     if (m_pDmaController->GetInterruptMask(m_context, &dwInterruptOrigMask) == FALSE)

  0000c	e5960024	 ldr         r0, [r6, #0x24]
  00010	e5961020	 ldr         r1, [r6, #0x20]
  00014	e28d2000	 add         r2, sp, #0
  00018	e5903000	 ldr         r3, [r0]
  0001c	e3a07000	 mov         r7, #0
  00020	e5933004	 ldr         r3, [r3, #4]
  00024	e1a0e00f	 mov         lr, pc
  00028	e12fff13	 bx          r3
  0002c	e3500000	 cmp         r0, #0
  00030	1a000005	 bne         |$LN8@ProcessInt|

; 234  :         {
; 235  :         RETAILMSG(ZONE_WARN, (L"WARN! DmaMediator::ProcessInterrupt: ",
; 236  :             L"failed to get dma interrupt mask\r\n"
; 237  :             ));

  00034	e59f30b8	 ldr         r3, [pc, #0xB8]
  00038	e5933440	 ldr         r3, [r3, #0x440]
  0003c	e3130002	 tst         r3, #2
  00040	0a000025	 beq         |$cleanUp$36050|
  00044	e59f10ac	 ldr         r1, [pc, #0xAC]

; 238  :         goto cleanUp;

  00048	ea00001f	 b           |$LN19@ProcessInt|
  0004c		 |$LN8@ProcessInt|

; 239  :         }
; 240  : 
; 241  :     // filter mask to only include valid logical channels
; 242  :     dwInterruptMask = dwInterruptOrigMask & (0xFFFFFFFF >> (32 - m_dmaChannelCount));

  0004c	e5963018	 ldr         r3, [r6, #0x18]
  00050	e59d2000	 ldr         r2, [sp]
  00054	e3e01000	 mvn         r1, #0
  00058	e2633020	 rsb         r3, r3, #0x20
  0005c	e0125331	 ands        r5, r2, r1, lsr r3

; 243  : 
; 244  :     // loop through and service all interrupts for logical channels
; 245  :     int i = 0;    

  00060	e3a04000	 mov         r4, #0

; 246  :     while (dwInterruptMask)

  00064	0a00000b	 beq         |$LN5@ProcessInt|
  00068	e3a08001	 mov         r8, #1
  0006c		 |$LL6@ProcessInt|

; 247  :         {
; 248  :         if (dwInterruptMask & 1)

  0006c	e3150001	 tst         r5, #1

; 249  :             {
; 250  :             // notify secondary interrupts
; 251  :             if ((1 << i) & m_ffSIHList)

  00070	15963014	 ldrne       r3, [r6, #0x14]
  00074	11130418	 tstne       r3, r8, lsl r4

; 252  :                 {
; 253  :                 SetEvent(m_pDmaChannelInfo[i].secondaryEventHandle);

  00078	1596301c	 ldrne       r3, [r6, #0x1C]
  0007c	13a01003	 movne       r1, #3
  00080	17930184	 ldrne       r0, [r3, +r4, lsl #3]
  00084	1b000000	 blne        EventModify

; 254  :                 }
; 255  : 
; 256  :             DEBUGMSG(ZONE_INFO, (L"ERROR! DmaMediator::ProcessInterrupt: "
; 257  :                 L"dwInterruptMask(0x%08X)\r\n",
; 258  :                 dwInterruptMask
; 259  :                 ));
; 260  :             }
; 261  :         ++i;

  00088	e2844001	 add         r4, r4, #1

; 262  :         dwInterruptMask >>= 1;

  0008c	e1b050a5	 movs        r5, r5, lsr #1
  00090	1afffff5	 bne         |$LL6@ProcessInt|

; 246  :     while (dwInterruptMask)

  00094	e59d2000	 ldr         r2, [sp]
  00098		 |$LN5@ProcessInt|

; 263  :         }
; 264  : 
; 265  :     if (m_pDmaController->ClearInterruptMask(m_context, dwInterruptOrigMask) == FALSE)

  00098	e5960024	 ldr         r0, [r6, #0x24]
  0009c	e5961020	 ldr         r1, [r6, #0x20]
  000a0	e5903000	 ldr         r3, [r0]
  000a4	e5933008	 ldr         r3, [r3, #8]
  000a8	e1a0e00f	 mov         lr, pc
  000ac	e12fff13	 bx          r3
  000b0	e3500000	 cmp         r0, #0
  000b4	1a000007	 bne         |$LN2@ProcessInt|

; 266  :         {
; 267  :         RETAILMSG(ZONE_WARN, (L"WARN! DmaMediator::ProcessInterrupt: ",
; 268  :             L"failed to clear dma interrupt mask\r\n"
; 269  :             ));

  000b8	e59f3034	 ldr         r3, [pc, #0x34]
  000bc	e5933440	 ldr         r3, [r3, #0x440]
  000c0	e3130002	 tst         r3, #2
  000c4	0a000004	 beq         |$cleanUp$36050|
  000c8	e59f1020	 ldr         r1, [pc, #0x20]
  000cc		 |$LN19@ProcessInt|
  000cc	e59f0018	 ldr         r0, [pc, #0x18]
  000d0	eb000000	 bl          NKDbgPrintfW

; 274  : cleanUp:

  000d4	ea000000	 b           |$cleanUp$36050|
  000d8		 |$LN2@ProcessInt|

; 270  :         goto cleanUp;
; 271  :         }
; 272  :     
; 273  :     rc = TRUE;

  000d8	e3a07001	 mov         r7, #1
  000dc		 |$cleanUp$36050|

; 275  :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaMediator::ProcessInterrupt: "
; 276  :         L"(rc=%d)\r\n", rc
; 277  :         ));
; 278  :     
; 279  :     return rc;
; 280  : }

  000dc	e1a00007	 mov         r0, r7
  000e0	e28dd004	 add         sp, sp, #4
  000e4	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000e8	e12fff1e	 bx          lr
  000ec		 |$LN23@ProcessInt|
  000ec		 |$LN24@ProcessInt|
  000ec	00000000	 DCD         |??_C@_1EM@KHPJDBGO@?$AAW?$AAA?$AAR?$AAN?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr@|
  000f0		 |$LN25@ProcessInt|
  000f0	00000000	 DCD         |??_C@_1EK@LOCPFGLK@?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAr?$AA?5?$AAd?$AAm?$AAa?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAm?$AAa@|
  000f4		 |$LN26@ProcessInt|
  000f4	00000000	 DCD         |dpCurSettings|
  000f8		 |$LN27@ProcessInt|
  000f8	00000000	 DCD         |??_C@_1EG@CDEDOPNL@?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAd?$AAm?$AAa?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAm?$AAa?$AAs?$AAk@|
  000fc		 |$M36294|

			 ENDP  ; |?ProcessInterrupt@DmaMediator@@MAAHXZ|, DmaMediator::ProcessInterrupt

	EXPORT	|?SetEventHandler@DmaMediator@@QAAHHPAXK@Z| ; DmaMediator::SetEventHandler
	EXPORT	|??_C@_1KI@KNOHBGEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KC@PNLANBE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@FCPGKFG@?$AAW?$AAA?$AAR?$AAN?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl@| [ DATA ] ; `string'
	IMPORT	|DuplicateHandle|
	IMPORT	|GetLastError|
	IMPORT	|OpenProcess|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T36329| DCD	|$LN25@SetEventHa|
	DCD	0x40006c02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KI@KNOHBGEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "D", 0x0, "m", 0x0, "a", 0x0, "M", 0x0, "e", 0x0, "d"
	DCB	0x0, "i", 0x0, "a", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, ":"
	DCB	0x0, ":", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "E", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, "H", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "u", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "d", 0x0, "u"
	DCB	0x0, "p", 0x0, "l", 0x0, "i", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KC@PNLANBE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "D", 0x0, "m", 0x0, "a", 0x0, "M", 0x0, "e", 0x0, "d"
	DCB	0x0, "i", 0x0, "a", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, ":"
	DCB	0x0, ":", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "E", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, "H", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "p", 0x0, "r", 0x0, "o", 0x0, "c"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "("
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@FCPGKFG@?$AAW?$AAA?$AAR?$AAN?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, "!", 0x0, " ", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "M", 0x0, "e", 0x0, "d", 0x0, "i"
	DCB	0x0, "a", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, ":"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "E", 0x0, "v", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "I", 0x0, "H", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "y", 0x0, " ", 0x0, "e"
	DCB	0x0, "x", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "s", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmamediator.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetEventHandler@DmaMediator@@QAAHHPAXK@Z| PROC ; DmaMediator::SetEventHandler

; 315  : {

  00000		 |$LN25@SetEventHa|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M36326|
  00008	e1a08003	 mov         r8, r3
  0000c	e1b04002	 movs        r4, r2
  00010	e1a06001	 mov         r6, r1
  00014	e1a05000	 mov         r5, r0

; 316  :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaMediator::SetEventHandler: " 
; 317  :         L"index=%d, hEvent=0x%08X, processId=0x%08X\r\n", 
; 318  :         index, hEvent, processId
; 319  :         ));
; 320  :     
; 321  :     BOOL rc = FALSE;
; 322  :     HANDLE hLocalHandle = NULL;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d300c	 str         r3, [sp, #0xC]

; 323  :     
; 324  :     DEBUGMSG(ZONE_INFO, (L"DmaMediator::SetEventHandler: "
; 325  :         L"Setting event handler(0x%08X) for index(%d)", hEvent, index
; 326  :         ));
; 327  : 
; 328  :     // Disable/Enable interrupts for logical channel
; 329  :     EnableInterrupt(index, hEvent != NULL);

  00020	e5953000	 ldr         r3, [r5]
  00024	13a02001	 movne       r2, #1
  00028	e3a07000	 mov         r7, #0
  0002c	e5933000	 ldr         r3, [r3]
  00030	03a02000	 moveq       r2, #0
  00034	e1a01006	 mov         r1, r6
  00038	e1a00005	 mov         r0, r5
  0003c	e1a0e00f	 mov         lr, pc
  00040	e12fff13	 bx          r3

; 330  : 
; 331  :     ASSERT(m_pDmaChannelInfo);
; 332  :     ASSERT(index < m_dmaChannelCount);
; 333  :     if (hEvent != NULL)
; 334  :         {        
; 335  :         HANDLE hProc;
; 336  :         BOOL bResult;
; 337  :         
; 338  :         // make sure there isn't someone else already registered
; 339  :         if (m_pDmaChannelInfo[index].secondaryEventHandle != NULL)

  00044	e595301c	 ldr         r3, [r5, #0x1C]
  00048	e3540000	 cmp         r4, #0
  0004c	e7933186	 ldr         r3, [r3, +r6, lsl #3]
  00050	0a000042	 beq         |$LN9@SetEventHa|
  00054	e3530000	 cmp         r3, #0
  00058	0a000007	 beq         |$LN8@SetEventHa|

; 340  :             {
; 341  :             RETAILMSG(ZONE_WARN, (L"WARN! DmaMediator::SetEventHandler: "
; 342  :                 L"SIH already exists(%d)\r\n", index
; 343  :                 ));

  0005c	e59f3140	 ldr         r3, [pc, #0x140]
  00060	e5933440	 ldr         r3, [r3, #0x440]
  00064	e3130002	 tst         r3, #2
  00068	0a000048	 beq         |$cleanUp$36088|
  0006c	e59f0138	 ldr         r0, [pc, #0x138]
  00070	e1a01006	 mov         r1, r6
  00074	eb000000	 bl          NKDbgPrintfW

; 344  :             goto cleanUp;

  00078	ea000044	 b           |$cleanUp$36088|
  0007c		 |$LN8@SetEventHa|

; 345  :             }
; 346  : 
; 347  :         // get process handle which owns the event handle
; 348  :         hProc = OpenProcess(0, FALSE, processId);

  0007c	e1a02008	 mov         r2, r8
  00080	e3a01000	 mov         r1, #0
  00084	e3a00000	 mov         r0, #0
  00088	eb000000	 bl          OpenProcess
  0008c	e1b08000	 movs        r8, r0

; 349  :         if (hProc == NULL)

  00090	1a00000f	 bne         |$LN6@SetEventHa|

; 350  :             {
; 351  :             RETAILMSG(ZONE_ERROR, (L"ERROR! DmaMediator::SetEventHandler: "
; 352  :                 L"Unable to get process handle (err=0x%08X)\r\n",
; 353  :                 GetLastError()
; 354  :                 ));

  00094	e59f3108	 ldr         r3, [pc, #0x108]
  00098	e5933440	 ldr         r3, [r3, #0x440]
  0009c	e3130001	 tst         r3, #1
  000a0	0a000003	 beq         |$LN16@SetEventHa|
  000a4	eb000000	 bl          GetLastError
  000a8	e1a01000	 mov         r1, r0
  000ac	e59f00f4	 ldr         r0, [pc, #0xF4]
  000b0	eb000000	 bl          NKDbgPrintfW
  000b4		 |$LN16@SetEventHa|

; 355  :             EnableInterrupt(index, FALSE);

  000b4	e5953000	 ldr         r3, [r5]
  000b8	e3a02000	 mov         r2, #0
  000bc	e1a01006	 mov         r1, r6
  000c0	e5933000	 ldr         r3, [r3]
  000c4	e1a00005	 mov         r0, r5
  000c8	e1a0e00f	 mov         lr, pc
  000cc	e12fff13	 bx          r3

; 392  : cleanUp:

  000d0	ea00002e	 b           |$cleanUp$36088|
  000d4		 |$LN6@SetEventHa|

; 356  :             goto cleanUp;
; 357  :             }
; 358  :         
; 359  :         // create duplicate handle and close process handle
; 360  :         bResult = DuplicateHandle(hProc, hEvent, GetCurrentProcess(),
; 361  :                         &hLocalHandle, 0, FALSE, DUPLICATE_SAME_ACCESS);

  000d4	e3a03002	 mov         r3, #2
  000d8	e58d3008	 str         r3, [sp, #8]
  000dc	e3a0e000	 mov         lr, #0
  000e0	e28d300c	 add         r3, sp, #0xC
  000e4	e3a02042	 mov         r2, #0x42
  000e8	e1a01004	 mov         r1, r4
  000ec	e1a00008	 mov         r0, r8
  000f0	e58de004	 str         lr, [sp, #4]
  000f4	e58de000	 str         lr, [sp]
  000f8	eb000000	 bl          DuplicateHandle
  000fc	e1a04000	 mov         r4, r0

; 362  : 
; 363  :         CloseHandle(hProc);

  00100	e1a00008	 mov         r0, r8
  00104	eb000000	 bl          CloseHandle

; 364  : 
; 365  :         // check if we have a valid local copy of event handle
; 366  :         if (bResult == FALSE)

  00108	e3540000	 cmp         r4, #0
  0010c	1a00000f	 bne         |$LN4@SetEventHa|

; 367  :             {
; 368  :             RETAILMSG(ZONE_ERROR, (L"ERROR! DmaMediator::SetEventHandler: "
; 369  :                 L"unable to duplicate event handle err(0x%08X)\r\n",
; 370  :                 GetLastError()
; 371  :                 ));

  00110	e59f308c	 ldr         r3, [pc, #0x8C]
  00114	e5933440	 ldr         r3, [r3, #0x440]
  00118	e3130001	 tst         r3, #1
  0011c	0a000003	 beq         |$LN18@SetEventHa|
  00120	eb000000	 bl          GetLastError
  00124	e1a01000	 mov         r1, r0
  00128	e59f0070	 ldr         r0, [pc, #0x70]
  0012c	eb000000	 bl          NKDbgPrintfW
  00130		 |$LN18@SetEventHa|

; 372  :             EnableInterrupt(index, FALSE);

  00130	e5953000	 ldr         r3, [r5]
  00134	e3a02000	 mov         r2, #0
  00138	e1a01006	 mov         r1, r6
  0013c	e5933000	 ldr         r3, [r3]
  00140	e1a00005	 mov         r0, r5
  00144	e1a0e00f	 mov         lr, pc
  00148	e12fff13	 bx          r3

; 392  : cleanUp:

  0014c	ea00000f	 b           |$cleanUp$36088|
  00150		 |$LN4@SetEventHa|

; 373  :             goto cleanUp;
; 374  :             }
; 375  : 
; 376  :         // update SIH list
; 377  :         m_ffSIHList |= (1 << index);

  00150	e5953014	 ldr         r3, [r5, #0x14]
  00154	e3a02001	 mov         r2, #1
  00158	e1833612	 orr         r3, r3, r2, lsl r6
  0015c	ea000006	 b           |$LN22@SetEventHa|
  00160		 |$LN9@SetEventHa|

; 378  :         
; 379  :         }
; 380  :     else if (m_pDmaChannelInfo[index].secondaryEventHandle != NULL)

  00160	e3530000	 cmp         r3, #0
  00164	0a000005	 beq         |$LN1@SetEventHa|

; 381  :         {
; 382  :         // delete old handle if there was one
; 383  :         CloseHandle(m_pDmaChannelInfo[index].secondaryEventHandle);

  00168	e1a00003	 mov         r0, r3
  0016c	eb000000	 bl          CloseHandle

; 384  : 
; 385  :         // update SIH list
; 386  :         m_ffSIHList &= ~(1 << index);

  00170	e5953014	 ldr         r3, [r5, #0x14]
  00174	e3a02001	 mov         r2, #1
  00178	e1c33612	 bic         r3, r3, r2, lsl r6
  0017c		 |$LN22@SetEventHa|
  0017c	e5853014	 str         r3, [r5, #0x14]
  00180		 |$LN1@SetEventHa|

; 387  :         }
; 388  : 
; 389  :     m_pDmaChannelInfo[index].secondaryEventHandle = hLocalHandle;

  00180	e595201c	 ldr         r2, [r5, #0x1C]
  00184	e59d300c	 ldr         r3, [sp, #0xC]

; 390  : 
; 391  :     rc = TRUE;

  00188	e3a07001	 mov         r7, #1
  0018c	e7823186	 str         r3, [r2, +r6, lsl #3]
  00190		 |$cleanUp$36088|

; 393  :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaMediator::SetEventHandler(rc=%d)\r\n", rc));
; 394  :     return rc;
; 395  : }

  00190	e1a00007	 mov         r0, r7
  00194	e28dd010	 add         sp, sp, #0x10
  00198	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0019c	e12fff1e	 bx          lr
  001a0		 |$LN26@SetEventHa|
  001a0		 |$LN27@SetEventHa|
  001a0	00000000	 DCD         |??_C@_1KI@KNOHBGEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd@|
  001a4		 |$LN28@SetEventHa|
  001a4	00000000	 DCD         |dpCurSettings|
  001a8		 |$LN29@SetEventHa|
  001a8	00000000	 DCD         |??_C@_1KC@PNLANBE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd@|
  001ac		 |$LN30@SetEventHa|
  001ac	00000000	 DCD         |??_C@_1HK@FCPGKFG@?$AAW?$AAA?$AAR?$AAN?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl@|
  001b0		 |$M36327|

			 ENDP  ; |?SetEventHandler@DmaMediator@@QAAHHPAXK@Z|, DmaMediator::SetEventHandler

	EXPORT	|?Initialize@DmaMediator@@QAAHHQCUOMAP_DMA_LC_REGS@@@Z| ; DmaMediator::Initialize
	EXPORT	|??_C@_1IK@BGLCGHBJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@KIGJMDBN@?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5@| [ DATA ] ; `string'
	IMPORT	|LocalAlloc|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T36356| DCD	|$LN19@Initialize|
	DCD	0x40003301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IK@BGLCGHBJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "D", 0x0, "m", 0x0, "a", 0x0, "M", 0x0, "e", 0x0, "d"
	DCB	0x0, "i", 0x0, "a", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "a", 0x0, "r", 0x0, "r", 0x0, "a", 0x0, "y", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@KIGJMDBN@?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "M", 0x0, "e", 0x0, "d", 0x0, "i"
	DCB	0x0, "a", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, ":"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y"
	DCB	0x0, " ", 0x0, "a", 0x0, "l", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "y", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "a"
	DCB	0x0, "r", 0x0, "r", 0x0, "a", 0x0, "y", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Initialize@DmaMediator@@QAAHHQCUOMAP_DMA_LC_REGS@@@Z| PROC ; DmaMediator::Initialize

; 404  : {

  00000		 |$LN19@Initialize|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M36353|
  00004	e1a06002	 mov         r6, r2
  00008	e1a07001	 mov         r7, r1
  0000c	e1a04000	 mov         r4, r0

; 405  :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaMediator::Initialize: " 
; 406  :         L"count=%d\r\n", count
; 407  :         ));
; 408  : 
; 409  :     BOOL rc = FALSE;
; 410  : 
; 411  :     // make sure memory isn't already allocated
; 412  :     ASSERT(m_pDmaChannelInfo == NULL);
; 413  :     if (m_pDmaChannelInfo != NULL)

  00010	e594301c	 ldr         r3, [r4, #0x1C]
  00014	e3a05000	 mov         r5, #0
  00018	e3530000	 cmp         r3, #0
  0001c	0a000006	 beq         |$LN7@Initialize|

; 414  :         {
; 415  :         RETAILMSG(ZONE_WARN, (L"DmaMediator::Initialize: "
; 416  :             L"memory already allocated for array\r\n"
; 417  :             ));

  00020	e59f309c	 ldr         r3, [pc, #0x9C]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130002	 tst         r3, #2
  0002c	0a000020	 beq         |$cleanUp$36109|
  00030	e59f0090	 ldr         r0, [pc, #0x90]

; 425  :         {
; 426  :         RETAILMSG(ZONE_ERROR, (L"ERROR! DmaMediator::Initialize: "
; 427  :             L"memory allocation failed for array\r\n"
; 428  :             ));

  00034	eb000000	 bl          NKDbgPrintfW

; 442  :     
; 443  :     rc = TRUE;

  00038	ea00001d	 b           |$cleanUp$36109|
  0003c		 |$LN7@Initialize|

; 418  :         goto cleanUp;
; 419  :         }
; 420  : 
; 421  :     // allocate memory and initialize
; 422  :     m_pDmaChannelInfo = (DmaChannelInfo_t*)LocalAlloc(LPTR, 
; 423  :                                         sizeof(DmaChannelInfo_t) * count);

  0003c	e1a01187	 mov         r1, r7, lsl #3
  00040	e3a00040	 mov         r0, #0x40
  00044	eb000000	 bl          LocalAlloc
  00048	e3500000	 cmp         r0, #0
  0004c	e584001c	 str         r0, [r4, #0x1C]

; 424  :     if (m_pDmaChannelInfo == NULL)

  00050	1a000006	 bne         |$LN5@Initialize|

; 425  :         {
; 426  :         RETAILMSG(ZONE_ERROR, (L"ERROR! DmaMediator::Initialize: "
; 427  :             L"memory allocation failed for array\r\n"
; 428  :             ));

  00054	e59f3068	 ldr         r3, [pc, #0x68]
  00058	e5933440	 ldr         r3, [r3, #0x440]
  0005c	e3130001	 tst         r3, #1
  00060	0a000013	 beq         |$cleanUp$36109|
  00064	e59f0054	 ldr         r0, [pc, #0x54]
  00068	eb000000	 bl          NKDbgPrintfW

; 442  :     
; 443  :     rc = TRUE;

  0006c	ea000010	 b           |$cleanUp$36109|
  00070		 |$LN5@Initialize|

; 429  :         goto cleanUp;
; 430  :         }
; 431  : 
; 432  :     memset(m_pDmaChannelInfo, 0, sizeof(DmaChannelInfo_t) * count);

  00070	e1a02187	 mov         r2, r7, lsl #3
  00074	e3a01000	 mov         r1, #0
  00078	eb000000	 bl          memset

; 433  : 
; 434  :     // copy virtual address of dma logical channels
; 435  :     m_dmaChannelCount = count;

  0007c	e5847018	 str         r7, [r4, #0x18]

; 436  :     for (int i = 0; i < count; ++i)

  00080	e3a02000	 mov         r2, #0
  00084	e3570000	 cmp         r7, #0
  00088	da000006	 ble         |$LN1@Initialize|
  0008c		 |$LL3@Initialize|

; 437  :         {
; 438  :         m_pDmaChannelInfo[i].pDmaRegs = &rgDmaChannels[i];

  0008c	e594301c	 ldr         r3, [r4, #0x1C]
  00090	e0833182	 add         r3, r3, r2, lsl #3
  00094	e2822001	 add         r2, r2, #1
  00098	e5836004	 str         r6, [r3, #4]
  0009c	e2866060	 add         r6, r6, #0x60
  000a0	e1520007	 cmp         r2, r7
  000a4	bafffff8	 blt         |$LL3@Initialize|
  000a8		 |$LN1@Initialize|

; 439  :         }
; 440  : 
; 441  :     m_ffSIHList = 0;

  000a8	e3a03000	 mov         r3, #0
  000ac	e5843014	 str         r3, [r4, #0x14]

; 442  :     
; 443  :     rc = TRUE;

  000b0	e3a05001	 mov         r5, #1
  000b4		 |$cleanUp$36109|

; 444  : cleanUp:
; 445  :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaMediator::Initialize(rc=%d)\r\n", rc));
; 446  :     return rc;
; 447  : }

  000b4	e1a00005	 mov         r0, r5
  000b8	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN20@Initialize|
  000c0		 |$LN21@Initialize|
  000c0	00000000	 DCD         |??_C@_1IK@BGLCGHBJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5@|
  000c4		 |$LN22@Initialize|
  000c4	00000000	 DCD         |dpCurSettings|
  000c8		 |$LN23@Initialize|
  000c8	00000000	 DCD         |??_C@_1HM@KIGJMDBN@?$AAD?$AAm?$AAa?$AAM?$AAe?$AAd?$AAi?$AAa?$AAt?$AAo?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5@|
  000cc		 |$M36354|

			 ENDP  ; |?Initialize@DmaMediator@@QAAHHQCUOMAP_DMA_LC_REGS@@@Z|, DmaMediator::Initialize

	EXPORT	|?Uninitialize@DmaMediator@@QAAXXZ|	; DmaMediator::Uninitialize
	IMPORT	|LocalFree|

  00000			 AREA	 |.pdata|, PDATA
|$T36371| DCD	|$LN12@Uninitiali|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Uninitialize@DmaMediator@@QAAXXZ| PROC ; DmaMediator::Uninitialize

; 453  : {

  00000		 |$LN12@Uninitiali|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36368|
  00004	e1a04000	 mov         r4, r0

; 454  :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaMediator::Uninitialize\r\n"));
; 455  : 
; 456  :     // stop interrupt thread
; 457  :     StopInterruptHandler();

  00008	eb000000	 bl          |?StopInterruptHandler@DmaMediator@@QAAXXZ|

; 458  :     
; 459  :     if (m_pDmaChannelInfo != NULL)

  0000c	e594301c	 ldr         r3, [r4, #0x1C]
  00010	e3530000	 cmp         r3, #0
  00014	0a000010	 beq         |$LN5@Uninitiali|

; 460  :         {
; 461  :         // free local copy of handles
; 462  :         for (int i = 0; i < m_dmaChannelCount; ++i)

  00018	e5943018	 ldr         r3, [r4, #0x18]
  0001c	e3a05000	 mov         r5, #0
  00020	e3530000	 cmp         r3, #0
  00024	da000008	 ble         |$LN2@Uninitiali|
  00028		 |$LL4@Uninitiali|

; 463  :             {
; 464  :             if (m_pDmaChannelInfo[i].secondaryEventHandle != NULL)

  00028	e594301c	 ldr         r3, [r4, #0x1C]
  0002c	e7933185	 ldr         r3, [r3, +r5, lsl #3]
  00030	e3530000	 cmp         r3, #0

; 465  :                 {
; 466  :                 CloseHandle(m_pDmaChannelInfo[i].secondaryEventHandle);

  00034	11a00003	 movne       r0, r3
  00038	1b000000	 blne        CloseHandle
  0003c	e5943018	 ldr         r3, [r4, #0x18]
  00040	e2855001	 add         r5, r5, #1
  00044	e1550003	 cmp         r5, r3
  00048	bafffff6	 blt         |$LL4@Uninitiali|
  0004c		 |$LN2@Uninitiali|

; 467  :                 }
; 468  :             }
; 469  : 
; 470  :         // free memory
; 471  :         LocalFree(m_pDmaChannelInfo);

  0004c	e594001c	 ldr         r0, [r4, #0x1C]
  00050	eb000000	 bl          LocalFree

; 472  :         m_pDmaChannelInfo = NULL;

  00054	e3a03000	 mov         r3, #0
  00058	e584301c	 str         r3, [r4, #0x1C]
  0005c		 |$LN5@Uninitiali|

; 473  :         }
; 474  : 
; 475  :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaMediator::Uninitialize\r\n"));
; 476  : }

  0005c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$M36369|

			 ENDP  ; |?Uninitialize@DmaMediator@@QAAXXZ|, DmaMediator::Uninitialize

	EXPORT	|?StartInterruptHandler@DmaMediator@@QAAHKK@Z| ; DmaMediator::StartInterruptHandler
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|InterruptInitialize|
	IMPORT	|CreateEventW|

  00000			 AREA	 |.pdata|, PDATA
|$T36384| DCD	|$LN17@StartInter|
	DCD	0x40003a04
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?StartInterruptHandler@DmaMediator@@QAAHKK@Z| PROC ; DmaMediator::StartInterruptHandler

; 101  : {

  00000		 |$LN17@StartInter|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d50f0	 stmdb       sp!, {r4 - r7, r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M36381|
  00010	e1a06002	 mov         r6, r2
  00014	e1a04000	 mov         r4, r0

; 102  :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaMediator::StartInterruptHandler: "
; 103  :         L"irq=%d, priority=%d\r\n",
; 104  :         irq, priority
; 105  :         ));
; 106  : 
; 107  :     BOOL rc = FALSE;
; 108  : 
; 109  :     // make sure we have a way of getting cause of interrupt
; 110  :     if (m_pDmaController == NULL)

  00018	e5943024	 ldr         r3, [r4, #0x24]
  0001c	e3a05000	 mov         r5, #0
  00020	e3530000	 cmp         r3, #0
  00024	0a000027	 beq         |$LN14@StartInter|

; 111  :         {
; 112  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: DmaMediator::StartInterruptHandler: "
; 113  :             L"DmaController not set\r\n"
; 114  :             ));
; 115  :         goto cleanUp;
; 116  :         }
; 117  :     
; 118  :     // get system interrupt for irq
; 119  :     if (!KernelIoControl(IOCTL_HAL_REQUEST_SYSINTR, &irq, 
; 120  :             sizeof(irq), &m_sysIntr, sizeof(m_sysIntr), 
; 121  :             NULL)) 

  00028	e59f00b4	 ldr         r0, [pc, #0xB4]
  0002c	e3a0e004	 mov         lr, #4
  00030	e3a07000	 mov         r7, #0
  00034	e2843010	 add         r3, r4, #0x10
  00038	e3a02004	 mov         r2, #4
  0003c	e28d1024	 add         r1, sp, #0x24
  00040	e58d7004	 str         r7, [sp, #4]
  00044	e58de000	 str         lr, [sp]
  00048	eb000000	 bl          KernelIoControl
  0004c	e3500000	 cmp         r0, #0
  00050	0a00001c	 beq         |$LN14@StartInter|

; 122  :         {
; 123  :         DEBUGMSG(ZONE_WARN, (L"ERROR: DmaMediator::StartInterruptHandler: "
; 124  :             L"Failed map DMA interrupt(irq=%d)\r\n", irq
; 125  :             ));
; 126  :         goto cleanUp;
; 127  :         }
; 128  : 
; 129  :     // create thread event handle
; 130  :     m_hEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00054	e3a03000	 mov         r3, #0
  00058	e3a02000	 mov         r2, #0
  0005c	e3a01000	 mov         r1, #0
  00060	e3a00000	 mov         r0, #0
  00064	eb000000	 bl          CreateEventW
  00068	e1b01000	 movs        r1, r0
  0006c	e584100c	 str         r1, [r4, #0xC]

; 131  :     if (m_hEvent == NULL) 

  00070	0a000014	 beq         |$LN14@StartInter|

; 132  :         {
; 133  :         DEBUGMSG(ZONE_WARN, (L"ERROR: DmaMediator::StartInterruptHandler: "
; 134  :             L"Failed create event object for interrupt\r\n"
; 135  :             ));
; 136  :         goto cleanUp;
; 137  :         }
; 138  : 
; 139  :     // register event handle with system interrupt
; 140  :     if (!InterruptInitialize(m_sysIntr, m_hEvent, NULL, 0)) 

  00074	e5940010	 ldr         r0, [r4, #0x10]
  00078	e3a03000	 mov         r3, #0
  0007c	e3a02000	 mov         r2, #0
  00080	eb000000	 bl          InterruptInitialize
  00084	e3500000	 cmp         r0, #0
  00088	0a00000e	 beq         |$LN14@StartInter|

; 141  :         {
; 142  :         DEBUGMSG(ZONE_WARN, (L"ERROR: DmaMediator::StartInterruptHandler: "
; 143  :             L"InterruptInitialize failed\r\n"
; 144  :             ));
; 145  :         goto cleanUp;
; 146  :         }
; 147  : 
; 148  :     // spawn thread
; 149  :     m_bExit = FALSE;
; 150  :     m_hIST = CreateThread(NULL, 0, InterruptHandler, this, 0, NULL);

  0008c	e59f204c	 ldr         r2, [pc, #0x4C]
  00090	e1a03004	 mov         r3, r4
  00094	e3a01000	 mov         r1, #0
  00098	e3a00000	 mov         r0, #0
  0009c	e5847004	 str         r7, [r4, #4]
  000a0	e58d7004	 str         r7, [sp, #4]
  000a4	e58d7000	 str         r7, [sp]
  000a8	eb000000	 bl          CreateThread
  000ac	e3500000	 cmp         r0, #0
  000b0	e5840008	 str         r0, [r4, #8]

; 151  :     if (!m_hIST)

  000b4	0a000003	 beq         |$LN14@StartInter|

; 152  :         {
; 153  :         DEBUGMSG(ZONE_WARN, (L"ERROR: DmaMediator::StartInterruptHandler: "
; 154  :             L"Failed create interrupt thread\r\n"
; 155  :             ));
; 156  :         goto cleanUp;
; 157  :         }
; 158  : 
; 159  :     // set thread priority
; 160  :     CeSetThreadPriority(m_hIST, priority);

  000b8	e1a01006	 mov         r1, r6
  000bc	eb000000	 bl          CeSetThreadPriority

; 161  : 
; 162  :     rc = TRUE;

  000c0	e3a05001	 mov         r5, #1
  000c4		 |$cleanUp$36016|

; 163  :     
; 164  : cleanUp:
; 165  :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaMediator::StartInterruptHandler: "
; 166  :         L"rc=%d\r\n", rc
; 167  :         ));
; 168  :     if (rc == FALSE) StopInterruptHandler();

  000c4	ea000001	 b           |$LN1@StartInter|
  000c8		 |$LN14@StartInter|
  000c8	e1a00004	 mov         r0, r4
  000cc	eb000000	 bl          |?StopInterruptHandler@DmaMediator@@QAAXXZ|
  000d0		 |$LN1@StartInter|

; 169  :     
; 170  :     return rc;
; 171  : }

  000d0	e1a00005	 mov         r0, r5
  000d4	e28dd008	 add         sp, sp, #8
  000d8	e89d60f0	 ldmia       sp, {r4 - r7, sp, lr}
  000dc	e12fff1e	 bx          lr
  000e0		 |$LN18@StartInter|
  000e0		 |$LN19@StartInter|
  000e0	00000000	 DCD         |?InterruptHandler@DmaMediator@@KAKPAX@Z|
  000e4		 |$LN20@StartInter|
  000e4	01010098	 DCD         0x1010098
  000e8		 |$M36382|

			 ENDP  ; |?StartInterruptHandler@DmaMediator@@QAAHKK@Z|, DmaMediator::StartInterruptHandler

	EXPORT	|?ResetChannel@DmaMediator@@QAAHH@Z|	; DmaMediator::ResetChannel

  00000			 AREA	 |.pdata|, PDATA
|$T36398| DCD	|$LN6@ResetChann|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResetChannel@DmaMediator@@QAAHH@Z| PROC ; DmaMediator::ResetChannel

; 285  : {

  00000		 |$LN6@ResetChann|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36395|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 286  :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaMediator::ResetChannel: " 
; 287  :         L"index=%d\r\n", index
; 288  :         ));
; 289  : 
; 290  :     // disable interrupts
; 291  :     EnableInterrupt(index, FALSE);

  0000c	e5943000	 ldr         r3, [r4]
  00010	e3a02000	 mov         r2, #0
  00014	e5933000	 ldr         r3, [r3]
  00018	e1a0e00f	 mov         lr, pc
  0001c	e12fff13	 bx          r3

; 292  : 
; 293  :     // create mask and use it to see if anything was set for the dma channel
; 294  :     DWORD dwMask = (1 << index);
; 295  :     if (m_ffSIHList & dwMask)

  00020	e5943014	 ldr         r3, [r4, #0x14]
  00024	e3a02001	 mov         r2, #1
  00028	e1130512	 tst         r3, r2, lsl r5

; 296  :         {
; 297  :         SetEventHandler(index, NULL, 0);

  0002c	13a03000	 movne       r3, #0
  00030	13a02000	 movne       r2, #0
  00034	11a01005	 movne       r1, r5
  00038	11a00004	 movne       r0, r4
  0003c	1b000000	 blne        |?SetEventHandler@DmaMediator@@QAAHHPAXK@Z|

; 298  :         }
; 299  : 
; 300  :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaMediator::ResetChannel: " 
; 301  :         L"index=%d\r\n", index
; 302  :         ));
; 303  : 
; 304  :     return TRUE;

  00040	e3a00001	 mov         r0, #1

; 305  : }

  00044	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$M36396|

			 ENDP  ; |?ResetChannel@DmaMediator@@QAAHH@Z|, DmaMediator::ResetChannel

	END
