; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\SDMA\dmacontroller.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?FindUnusedChannel@DmaControllerBase@@IAAHXZ| ; DmaControllerBase::FindUnusedChannel
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmacontroller.h

  00000			 AREA	 |.pdata|, PDATA
|$T37844| DCD	|$LN11@FindUnused|
	DCD	0x40001701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FindUnusedChannel@DmaControllerBase@@IAAHXZ| PROC ; DmaControllerBase::FindUnusedChannel

; 60   :     {

  00000		 |$LN11@FindUnused|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37841|
  00004	e1a02000	 mov         r2, r0

; 61   :         // if mask is zero then channel is available
; 62   :         int i = 0;
; 63   :         int ff = 1;
; 64   :         while ((ff & m_ffDmaChannels) && (i < m_maxChannels))

  00008	e5924004	 ldr         r4, [r2, #4]
  0000c	e3a00000	 mov         r0, #0
  00010	e3a01001	 mov         r1, #1
  00014	e3140001	 tst         r4, #1
  00018	0a000007	 beq         |$LN8@FindUnused|
  0001c	e592e008	 ldr         lr, [r2, #8]
  00020		 |$LL3@FindUnused|
  00020	e150000e	 cmp         r0, lr
  00024	aa000004	 bge         |$LN8@FindUnused|
  00028	e5923004	 ldr         r3, [r2, #4]

; 65   :             {
; 66   :             ff <<= 1;

  0002c	e1a01081	 mov         r1, r1, lsl #1

; 67   :             ++i;

  00030	e2800001	 add         r0, r0, #1
  00034	e1130001	 tst         r3, r1
  00038	1afffff8	 bne         |$LL3@FindUnused|
  0003c		 |$LN8@FindUnused|

; 68   :             }
; 69   :         
; 70   :         if (i >= m_maxChannels)

  0003c	e5923008	 ldr         r3, [r2, #8]
  00040	e1500003	 cmp         r0, r3

; 71   :             {
; 72   :             ff = 0;

  00044	a3a01000	 movge       r1, #0

; 73   :             i = -1;
; 74   :             }
; 75   :         
; 76   :         m_ffDmaChannels |= ff;        

  00048	e1843001	 orr         r3, r4, r1
  0004c	e5823004	 str         r3, [r2, #4]
  00050	a3e00000	 mvnge       r0, #0

; 77   :         return i;
; 78   :     }

  00054	e8bd4010	 ldmia       sp!, {r4, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M37842|

			 ENDP  ; |?FindUnusedChannel@DmaControllerBase@@IAAHXZ|, DmaControllerBase::FindUnusedChannel

	EXPORT	|?ResetUsedChannel@DmaControllerBase@@IAAXH@Z| ; DmaControllerBase::ResetUsedChannel

  00000			 AREA	 |.pdata|, PDATA
|$T37853| DCD	|$LN5@ResetUsedC|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResetUsedChannel@DmaControllerBase@@IAAXH@Z| PROC ; DmaControllerBase::ResetUsedChannel

; 81   :     {

  00000		 |$LN5@ResetUsedC|
  00000		 |$M37850|

; 82   :         // debug check to see if channel was actually reserved
; 83   :         ASSERT((1 << channel) & m_ffDmaChannels);
; 84   :         m_ffDmaChannels &= ~(1 << channel); 

  00000	e5903004	 ldr         r3, [r0, #4]
  00004	e3a02001	 mov         r2, #1
  00008	e1c33112	 bic         r3, r3, r2, lsl r1
  0000c	e5803004	 str         r3, [r0, #4]

; 85   :     }

  00010	e12fff1e	 bx          lr
  00014		 |$M37851|

			 ENDP  ; |?ResetUsedChannel@DmaControllerBase@@IAAXH@Z|, DmaControllerBase::ResetUsedChannel

	EXPORT	|?ResetUsedChannelsBulk@DmaControllerBase@@IAAXK@Z| ; DmaControllerBase::ResetUsedChannelsBulk

  00000			 AREA	 |.pdata|, PDATA
|$T37862| DCD	|$LN5@ResetUsedC@2|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResetUsedChannelsBulk@DmaControllerBase@@IAAXK@Z| PROC ; DmaControllerBase::ResetUsedChannelsBulk

; 88   :     {

  00000		 |$LN5@ResetUsedC@2|
  00000		 |$M37859|

; 89   :         m_ffDmaChannels &= ~(Mask); 

  00000	e5903004	 ldr         r3, [r0, #4]
  00004	e1c33001	 bic         r3, r3, r1
  00008	e5803004	 str         r3, [r0, #4]

; 90   :     }

  0000c	e12fff1e	 bx          lr
  00010		 |$M37860|

			 ENDP  ; |?ResetUsedChannelsBulk@DmaControllerBase@@IAAXK@Z|, DmaControllerBase::ResetUsedChannelsBulk

	EXPORT	|?DI_FindUnusedInterrupt@SystemDmaController@@IAAHXZ| ; SystemDmaController::DI_FindUnusedInterrupt

  00000			 AREA	 |.pdata|, PDATA
|$T37878| DCD	|$LN15@DI_FindUnu|
	DCD	0x40001400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DI_FindUnusedInterrupt@SystemDmaController@@IAAHXZ| PROC ; SystemDmaController::DI_FindUnusedInterrupt

; 224  :     {

  00000		 |$LN15@DI_FindUnu|
  00000		 |$M37875|
  00000	e1a01000	 mov         r1, r0

; 225  :         int i;
; 226  :         
; 227  :         for(i = 0; i < OMAP_DMA_INTERRUPT_COUNT; i++)

  00004	e3a00000	 mov         r0, #0
  00008	e1a02001	 mov         r2, r1
  0000c		 |$LL5@DI_FindUnu|

; 228  :             {
; 229  :             if( (m_IrqNumsArray[i] != -1) &&
; 230  :                 (m_AllocatedIntArray[i] == FALSE))

  0000c	e592303c	 ldr         r3, [r2, #0x3C]
  00010	e3730001	 cmn         r3, #1
  00014	0a000002	 beq         |$LN4@DI_FindUnu|
  00018	e592304c	 ldr         r3, [r2, #0x4C]
  0001c	e3530000	 cmp         r3, #0
  00020	0a000004	 beq         |$LN9@DI_FindUnu|
  00024		 |$LN4@DI_FindUnu|

; 225  :         int i;
; 226  :         
; 227  :         for(i = 0; i < OMAP_DMA_INTERRUPT_COUNT; i++)

  00024	e2800001	 add         r0, r0, #1
  00028	e3500004	 cmp         r0, #4
  0002c	e2822004	 add         r2, r2, #4
  00030	bafffff5	 blt         |$LL5@DI_FindUnu|
  00034	ea000002	 b           |$LN12@DI_FindUnu|
  00038		 |$LN9@DI_FindUnu|

; 231  :                 {
; 232  :                 m_AllocatedIntArray[i] = TRUE;

  00038	e0813100	 add         r3, r1, r0, lsl #2
  0003c	e3a02001	 mov         r2, #1
  00040	e583204c	 str         r2, [r3, #0x4C]
  00044		 |$LN12@DI_FindUnu|

; 233  :                 break;
; 234  :                 }
; 235  :             }
; 236  :         
; 237  :         if (i >= OMAP_DMA_INTERRUPT_COUNT)

  00044	e3500004	 cmp         r0, #4

; 238  :             {
; 239  :             i = -1;

  00048	a3e00000	 mvnge       r0, #0

; 240  :             }
; 241  :                
; 242  :         return i;
; 243  :     }

  0004c	e12fff1e	 bx          lr
  00050		 |$M37876|

			 ENDP  ; |?DI_FindUnusedInterrupt@SystemDmaController@@IAAHXZ|, SystemDmaController::DI_FindUnusedInterrupt

	EXPORT	|?DI_ResetUsedInterrupt@SystemDmaController@@IAAHK@Z| ; SystemDmaController::DI_ResetUsedInterrupt

  00000			 AREA	 |.pdata|, PDATA
|$T37895| DCD	|$LN15@DI_ResetUs|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DI_ResetUsedInterrupt@SystemDmaController@@IAAHK@Z| PROC ; SystemDmaController::DI_ResetUsedInterrupt

; 246  :     {

  00000		 |$LN15@DI_ResetUs|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37892|
  00004	e1a0e000	 mov         lr, r0

; 247  :         int i;
; 248  : 
; 249  :         for(i = 0; i < OMAP_DMA_INTERRUPT_COUNT; i++)

  00008	e3a00000	 mov         r0, #0
  0000c	e1a0200e	 mov         r2, lr
  00010		 |$LL5@DI_ResetUs|

; 250  :             {
; 251  :             if((m_IrqNumsArray[i] == IrqNum) && 
; 252  :                (m_AllocatedIntArray[i] == TRUE))

  00010	e592303c	 ldr         r3, [r2, #0x3C]
  00014	e1530001	 cmp         r3, r1
  00018	1a000002	 bne         |$LN4@DI_ResetUs|
  0001c	e592304c	 ldr         r3, [r2, #0x4C]
  00020	e3530001	 cmp         r3, #1
  00024	0a000004	 beq         |$LN9@DI_ResetUs|
  00028		 |$LN4@DI_ResetUs|

; 247  :         int i;
; 248  : 
; 249  :         for(i = 0; i < OMAP_DMA_INTERRUPT_COUNT; i++)

  00028	e2800001	 add         r0, r0, #1
  0002c	e3500004	 cmp         r0, #4
  00030	e2822004	 add         r2, r2, #4
  00034	bafffff5	 blt         |$LL5@DI_ResetUs|
  00038	ea000002	 b           |$LN12@DI_ResetUs|
  0003c		 |$LN9@DI_ResetUs|

; 253  :                 {
; 254  :                 m_AllocatedIntArray[i] = FALSE;

  0003c	e08e3100	 add         r3, lr, r0, lsl #2
  00040	e3a02000	 mov         r2, #0
  00044	e583204c	 str         r2, [r3, #0x4C]
  00048		 |$LN12@DI_ResetUs|

; 255  :                 break;
; 256  :                 }
; 257  :             }
; 258  : 
; 259  :         if (i >= OMAP_DMA_INTERRUPT_COUNT)

  00048	e3500004	 cmp         r0, #4

; 260  :             {
; 261  :             i = -1;

  0004c	a3e00000	 mvnge       r0, #0

; 262  :             }
; 263  :                
; 264  :         return i;
; 265  :     }

  00050	e49de004	 ldr         lr, [sp], #4
  00054	e12fff1e	 bx          lr
  00058		 |$M37893|

			 ENDP  ; |?DI_ResetUsedInterrupt@SystemDmaController@@IAAHK@Z|, SystemDmaController::DI_ResetUsedInterrupt

	EXPORT	|??0DmaMediator@@QAA@XZ|		; DmaMediator::DmaMediator
	EXPORT	|??_7DmaMediator@@6B@| [ DATA ]		; DmaMediator::`vftable'
	EXPORT	|?EnableInterrupt@DmaMediator@@MAAXHH@Z| ; DmaMediator::EnableInterrupt
	IMPORT	|?ProcessInterrupt@DmaMediator@@MAAHXZ|	; DmaMediator::ProcessInterrupt
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmamediator.h

  00000			 AREA	 |.pdata|, PDATA
|$T37905| DCD	|$LN5@DmaMediato|
	DCD	0x40000b00

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7DmaMediator@@6B@| DCD |?EnableInterrupt@DmaMediator@@MAAXHH@Z| ; DmaMediator::`vftable'
	DCD	|?ProcessInterrupt@DmaMediator@@MAAHXZ|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0DmaMediator@@QAA@XZ| PROC		; DmaMediator::DmaMediator

; 69   :     {

  00000		 |$LN5@DmaMediato|
  00000		 |$M37902|
  00000	e59f3020	 ldr         r3, [pc, #0x20]
  00004	e3a02000	 mov         r2, #0
  00008	e5802008	 str         r2, [r0, #8]
  0000c	e5803000	 str         r3, [r0]
  00010	e5802010	 str         r2, [r0, #0x10]
  00014	e5802014	 str         r2, [r0, #0x14]
  00018	e5802018	 str         r2, [r0, #0x18]
  0001c	e580201c	 str         r2, [r0, #0x1C]
  00020	e5802024	 str         r2, [r0, #0x24]

; 70   :     }

  00024	e12fff1e	 bx          lr
  00028		 |$LN6@DmaMediato|
  00028		 |$LN7@DmaMediato|
  00028	00000000	 DCD         |??_7DmaMediator@@6B@|
  0002c		 |$M37903|

			 ENDP  ; |??0DmaMediator@@QAA@XZ|, DmaMediator::DmaMediator


  00000			 AREA	 |.pdata|, PDATA
|$T37917| DCD	|$LN6@EnableInte|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableInterrupt@DmaMediator@@MAAXHH@Z| PROC ; DmaMediator::EnableInterrupt

; 101  :     {

  00000		 |$LN6@EnableInte|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37914|

; 102  :         // check for state change
; 103  :         BOOL bStateChange = m_ffSIHList & (1 << index);

  00004	e5903014	 ldr         r3, [r0, #0x14]
  00008	e3a0e001	 mov         lr, #1
  0000c	e003311e	 and         r3, r3, lr, lsl r1

; 104  :         bStateChange ^= bEnable;

  00010	e0233002	 eor         r3, r3, r2

; 105  :                 
; 106  :         if (bStateChange == TRUE)

  00014	e3530001	 cmp         r3, #1

; 107  :             {
; 108  :             m_pDmaController->EnableInterrupt(index, bEnable);

  00018	05900024	 ldreq       r0, [r0, #0x24]
  0001c	05903000	 ldreq       r3, [r0]
  00020	05933000	 ldreq       r3, [r3]
  00024	01a0e00f	 moveq       lr, pc
  00028	012fff13	 bxeq        r3

; 109  :             }
; 110  :     }

  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$M37915|

			 ENDP  ; |?EnableInterrupt@DmaMediator@@MAAXHH@Z|, DmaMediator::EnableInterrupt

	EXPORT	|?InterruptDone@DmaMediator@@QAAHH@Z|	; DmaMediator::InterruptDone

  00000			 AREA	 |.pdata|, PDATA
|$T37929| DCD	|$LN6@InterruptD|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InterruptDone@DmaMediator@@QAAHH@Z| PROC ; DmaMediator::InterruptDone

; 173  :     { 

  00000		 |$LN6@InterruptD|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37926|
  00004	e1a02000	 mov         r2, r0

; 174  :         BOOL bReset = FALSE;
; 175  :         if (m_ffSIHList & (1 << index))

  00008	e5923014	 ldr         r3, [r2, #0x14]
  0000c	e3a0e001	 mov         lr, #1
  00010	e3a00000	 mov         r0, #0
  00014	e113011e	 tst         r3, lr, lsl r1
  00018	0a000006	 beq         |$LN1@InterruptD|

; 176  :             {
; 177  :             m_pDmaController->EnableInterrupt(index, TRUE); 

  0001c	e5920024	 ldr         r0, [r2, #0x24]
  00020	e3a02001	 mov         r2, #1
  00024	e5903000	 ldr         r3, [r0]
  00028	e5933000	 ldr         r3, [r3]
  0002c	e1a0e00f	 mov         lr, pc
  00030	e12fff13	 bx          r3

; 178  :             bReset = TRUE;

  00034	e3a00001	 mov         r0, #1
  00038		 |$LN1@InterruptD|

; 179  :             }
; 180  :         return bReset;
; 181  :     }

  00038	e49de004	 ldr         lr, [sp], #4
  0003c	e12fff1e	 bx          lr
  00040		 |$M37927|

			 ENDP  ; |?InterruptDone@DmaMediator@@QAAHH@Z|, DmaMediator::InterruptDone

	EXPORT	|?Initialize@DmaControllerBase@@UAAHABT_LARGE_INTEGER@@K@Z| ; DmaControllerBase::Initialize
	EXPORT	|??_C@_1IC@PHOICJFD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@CLGOBNPN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@| [ DATA ] ; `string'
	IMPORT	|LocalAlloc|
	IMPORT	|?Initialize@DmaMediator@@QAAHHQCUOMAP_DMA_LC_REGS@@@Z| ; DmaMediator::Initialize
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|??2@YAPAXI@Z|				; operator new

  00000			 AREA	 |.pdata|, PDATA
|$T37953| DCD	|$LN22@Initialize|
	DCD	0x40003b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@PHOICJFD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "D", 0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "a", 0x0, "r", 0x0, "r", 0x0, "a"
	DCB	0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@CLGOBNPN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "D", 0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "D", 0x0, "m", 0x0, "a", 0x0, "M"
	DCB	0x0, "e", 0x0, "d", 0x0, "i", 0x0, "a", 0x0, "t", 0x0, "o"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmacontroller.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Initialize@DmaControllerBase@@UAAHABT_LARGE_INTEGER@@K@Z| PROC ; DmaControllerBase::Initialize

; 36   : {

  00000		 |$LN22@Initialize|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37950|
  00004	e1a04000	 mov         r4, r0

; 37   :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaControllerBase::Initialize\r\n"));
; 38   :     
; 39   :     BOOL rc = FALSE;
; 40   : 
; 41   :     UNREFERENCED_PARAMETER(pa);
; 42   :     UNREFERENCED_PARAMETER(size);
; 43   : 
; 44   :     ASSERT(m_pDmaMediator == NULL);
; 45   :     m_pDmaMediator = new DmaMediator();

  00008	e3a00028	 mov         r0, #0x28
  0000c	e3a05000	 mov         r5, #0
  00010	eb000000	 bl          |??2@YAPAXI@Z|
  00014	e3500000	 cmp         r0, #0
  00018	0a000009	 beq         |$LN10@Initialize|
  0001c	e59f30c4	 ldr         r3, [pc, #0xC4]
  00020	e3a02000	 mov         r2, #0
  00024	e5802008	 str         r2, [r0, #8]
  00028	e5803000	 str         r3, [r0]
  0002c	e5802010	 str         r2, [r0, #0x10]
  00030	e5802014	 str         r2, [r0, #0x14]
  00034	e5802018	 str         r2, [r0, #0x18]
  00038	e580201c	 str         r2, [r0, #0x1C]
  0003c	e5802024	 str         r2, [r0, #0x24]
  00040	ea000000	 b           |$LN11@Initialize|
  00044		 |$LN10@Initialize|
  00044	e3a00000	 mov         r0, #0
  00048		 |$LN11@Initialize|
  00048	e584000c	 str         r0, [r4, #0xC]

; 46   :     if (m_pDmaMediator == NULL)

  0004c	e3500000	 cmp         r0, #0
  00050	1a00000d	 bne         |$LN7@Initialize|

; 47   :         {
; 48   :         RETAILMSG(ZONE_ERROR, (L"ERROR: DmaControllerBase::Initialize: "
; 49   :             L"Failed to allocate DmaMediator\r\n"
; 50   :             ));

  00054	e59f3084	 ldr         r3, [pc, #0x84]
  00058	e5933440	 ldr         r3, [r3, #0x440]
  0005c	e3130001	 tst         r3, #1
  00060	0a000001	 beq         |$LN18@Initialize|
  00064	e59f0078	 ldr         r0, [pc, #0x78]
  00068		 |$LN19@Initialize|
  00068	eb000000	 bl          NKDbgPrintfW
  0006c		 |$LN18@Initialize|

; 72   :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaControllerBase::Initialize"
; 73   :         L"(rc=%d)\r\n", rc
; 74   :         ));
; 75   : 
; 76   :     if (rc == FALSE) Uninitialize();    

  0006c	e5943000	 ldr         r3, [r4]
  00070	e1a00004	 mov         r0, r4
  00074	e5933018	 ldr         r3, [r3, #0x18]
  00078	e1a0e00f	 mov         lr, pc
  0007c	e12fff13	 bx          r3
  00080		 |$LN1@Initialize|

; 77   :     return rc;
; 78   : }

  00080	e1a00005	 mov         r0, r5
  00084	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN7@Initialize|

; 51   :         goto cleanUp;
; 52   :         }
; 53   : 
; 54   :     // initialize observers
; 55   :     if (m_pDmaMediator->Initialize(m_maxChannels, m_rgChannels) == FALSE)

  0008c	e5942014	 ldr         r2, [r4, #0x14]
  00090	e5941008	 ldr         r1, [r4, #8]
  00094	eb000000	 bl          |?Initialize@DmaMediator@@QAAHHQCUOMAP_DMA_LC_REGS@@@Z|
  00098	e3500000	 cmp         r0, #0
  0009c	0afffff2	 beq         |$LN18@Initialize|

; 56   :         {
; 57   :         goto cleanUp;
; 58   :         }
; 59   : 
; 60   :     m_rgChannelPhysAddr = (DWORD*)LocalAlloc(LPTR, sizeof(DWORD) * m_maxChannels);

  000a0	e5943008	 ldr         r3, [r4, #8]
  000a4	e3a00040	 mov         r0, #0x40
  000a8	e1a01103	 mov         r1, r3, lsl #2
  000ac	eb000000	 bl          LocalAlloc
  000b0	e3500000	 cmp         r0, #0
  000b4	e5840010	 str         r0, [r4, #0x10]

; 61   :     if (m_rgChannelPhysAddr == NULL)

  000b8	1a000005	 bne         |$LN3@Initialize|

; 62   :         {
; 63   :         RETAILMSG(ZONE_ERROR, (L"ERROR: DmaControllerBase::Initialize: "
; 64   :             L"Failed to allocate array\r\n"
; 65   :             ));

  000bc	e59f301c	 ldr         r3, [pc, #0x1C]
  000c0	e5933440	 ldr         r3, [r3, #0x440]
  000c4	e3130001	 tst         r3, #1
  000c8	0affffe7	 beq         |$LN18@Initialize|
  000cc	e59f0008	 ldr         r0, [pc, #8]

; 70   : 
; 71   : cleanUp:

  000d0	eaffffe4	 b           |$LN19@Initialize|
  000d4		 |$LN3@Initialize|

; 66   :         goto cleanUp;
; 67   :         }
; 68   : 
; 69   :     rc = TRUE;

  000d4	e3a05001	 mov         r5, #1
  000d8		 |$cleanUp$37520|

; 72   :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaControllerBase::Initialize"
; 73   :         L"(rc=%d)\r\n", rc
; 74   :         ));
; 75   : 
; 76   :     if (rc == FALSE) Uninitialize();    

  000d8	eaffffe8	 b           |$LN1@Initialize|
  000dc		 |$LN23@Initialize|
  000dc		 |$LN24@Initialize|
  000dc	00000000	 DCD         |??_C@_1IC@PHOICJFD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@|
  000e0		 |$LN25@Initialize|
  000e0	00000000	 DCD         |dpCurSettings|
  000e4		 |$LN26@Initialize|
  000e4	00000000	 DCD         |??_C@_1IO@CLGOBNPN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@|
  000e8		 |$LN27@Initialize|
  000e8	00000000	 DCD         |??_7DmaMediator@@6B@|
  000ec		 |$M37951|

			 ENDP  ; |?Initialize@DmaControllerBase@@UAAHABT_LARGE_INTEGER@@K@Z|, DmaControllerBase::Initialize

	EXPORT	|?Uninitialize@DmaControllerBase@@UAAXXZ| ; DmaControllerBase::Uninitialize
	IMPORT	|LocalFree|
	IMPORT	|??3@YAXPAX@Z|				; operator delete
	IMPORT	|?Uninitialize@DmaMediator@@QAAXXZ|	; DmaMediator::Uninitialize

  00000			 AREA	 |.pdata|, PDATA
|$T37967| DCD	|$LN7@Uninitiali|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Uninitialize@DmaControllerBase@@UAAXXZ| PROC ; DmaControllerBase::Uninitialize

; 84   : {

  00000		 |$LN7@Uninitiali|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37964|
  00004	e1a04000	 mov         r4, r0

; 85   :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaControllerBase::Uninitialize\r\n"));
; 86   : 
; 87   :     if (m_pDmaMediator != NULL)

  00008	e594300c	 ldr         r3, [r4, #0xC]
  0000c	e3a05000	 mov         r5, #0
  00010	e3530000	 cmp         r3, #0
  00014	0a000004	 beq         |$LN2@Uninitiali|

; 88   :         {
; 89   :         m_pDmaMediator->Uninitialize();

  00018	e1a00003	 mov         r0, r3
  0001c	eb000000	 bl          |?Uninitialize@DmaMediator@@QAAXXZ|

; 90   :         delete m_pDmaMediator;

  00020	e594000c	 ldr         r0, [r4, #0xC]
  00024	eb000000	 bl          |??3@YAXPAX@Z|

; 91   :         m_pDmaMediator = NULL;

  00028	e584500c	 str         r5, [r4, #0xC]
  0002c		 |$LN2@Uninitiali|

; 92   :         }
; 93   :     
; 94   :     if (m_rgChannelPhysAddr != NULL)

  0002c	e5943010	 ldr         r3, [r4, #0x10]
  00030	e3530000	 cmp         r3, #0
  00034	0a000002	 beq         |$LN1@Uninitiali|

; 95   :         {
; 96   :         LocalFree(m_rgChannelPhysAddr);

  00038	e1a00003	 mov         r0, r3
  0003c	eb000000	 bl          LocalFree

; 97   :         m_rgChannelPhysAddr = NULL;

  00040	e5845010	 str         r5, [r4, #0x10]
  00044		 |$LN1@Uninitiali|

; 98   :         }
; 99   : 
; 100  :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaControllerBase::Uninitialize\r\n"));
; 101  : }

  00044	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$M37965|

			 ENDP  ; |?Uninitialize@DmaControllerBase@@UAAXXZ|, DmaControllerBase::Uninitialize

	EXPORT	|?ReserveChannel@DmaControllerBase@@UAAHPAUDmaChannelContext_t@@@Z| ; DmaControllerBase::ReserveChannel

  00000			 AREA	 |.pdata|, PDATA
|$T37980| DCD	|$LN7@ReserveCha|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ReserveChannel@DmaControllerBase@@UAAHPAUDmaChannelContext_t@@@Z| PROC ; DmaControllerBase::ReserveChannel

; 107  : {

  00000		 |$LN7@ReserveCha|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M37977|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 108  :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaControllerBase::ReserveChannel\r\n"));
; 109  : 
; 110  :     DWORD rc = 0;
; 111  : 
; 112  :     // check map for an unused channel
; 113  :     int i = FindUnusedChannel();

  0000c	e3a04000	 mov         r4, #0
  00010	eb000000	 bl          |?FindUnusedChannel@DmaControllerBase@@IAAHXZ|

; 114  :     if (i == -1)

  00014	e3700001	 cmn         r0, #1
  00018	0a00000d	 beq         |$cleanUp$37548|

; 115  :         {
; 116  :         DEBUGMSG(ZONE_WARN, (L"WARN: DmaControllerBase::ReserveChannel: "
; 117  :             L"All DMA channels in use!!!!!!\r\n"
; 118  :             ));
; 119  :         goto cleanUp;
; 120  :         }
; 121  : 
; 122  :     // return physical address of channel    
; 123  :     ASSERT(i < m_maxChannels);
; 124  :     pContext->index = i;

  0001c	e5860000	 str         r0, [r6]

; 125  :     pContext->channelAddress = m_rgChannelPhysAddr[i];

  00020	e5953010	 ldr         r3, [r5, #0x10]

; 126  :     pContext->registerSize = sizeof(OMAP_DMA_LC_REGS);

  00024	e3a01060	 mov         r1, #0x60

; 127  : 
; 128  :     // reset interrupts for logical channel
; 129  :     EnableInterrupt(i, FALSE);

  00028	e3a02000	 mov         r2, #0
  0002c	e7933100	 ldr         r3, [r3, +r0, lsl #2]
  00030	e586100c	 str         r1, [r6, #0xC]
  00034	e1a01000	 mov         r1, r0
  00038	e5863008	 str         r3, [r6, #8]
  0003c	e5953000	 ldr         r3, [r5]
  00040	e1a00005	 mov         r0, r5
  00044	e5933000	 ldr         r3, [r3]
  00048	e1a0e00f	 mov         lr, pc
  0004c	e12fff13	 bx          r3

; 130  :      
; 131  :     rc = TRUE;    

  00050	e3a04001	 mov         r4, #1
  00054		 |$cleanUp$37548|

; 132  : cleanUp:
; 133  :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaControllerBase::ReserveChannel"
; 134  :         L"(0x%08X)\r\n", rc
; 135  :         ));
; 136  :     return rc;
; 137  : }

  00054	e1a00004	 mov         r0, r4
  00058	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M37978|

			 ENDP  ; |?ReserveChannel@DmaControllerBase@@UAAHPAUDmaChannelContext_t@@@Z|, DmaControllerBase::ReserveChannel

	EXPORT	|?ReleaseChannel@DmaControllerBase@@UAAXPBUDmaChannelContext_t@@@Z| ; DmaControllerBase::ReleaseChannel
	EXPORT	|??_C@_1LG@MNCLIHGA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs@| [ DATA ] ; `string'
	IMPORT	|?ResetChannel@DmaMediator@@QAAHH@Z|	; DmaMediator::ResetChannel
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmacontroller.h

  00000			 AREA	 |.pdata|, PDATA
|$T37995| DCD	|$LN11@ReleaseCha|
	DCD	0x40002101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LG@MNCLIHGA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "D", 0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, "R", 0x0, "e", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "s", 0x0, "e", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "x"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, " ", 0x0, "i"
	DCB	0x0, "s", 0x0, " ", 0x0, "u", 0x0, "s", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "d", 0x0, "m", 0x0, "a", 0x0, " ", 0x0, "c", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmacontroller.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ReleaseChannel@DmaControllerBase@@UAAXPBUDmaChannelContext_t@@@Z| PROC ; DmaControllerBase::ReleaseChannel

; 143  : {

  00000		 |$LN11@ReleaseCha|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37992|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 144  :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaControllerBase::ReleaseChannel"
; 145  :         L"(0x%08X)\r\n",pContext
; 146  :         ));
; 147  : 
; 148  :     if (pContext->index >= m_maxChannels)

  0000c	e5951000	 ldr         r1, [r5]
  00010	e5943008	 ldr         r3, [r4, #8]
  00014	e1510003	 cmp         r1, r3
  00018	ba000007	 blt         |$LN2@ReleaseCha|

; 149  :         {
; 150  :         RETAILMSG(ZONE_ERROR, (L"ERROR! DmaControllerBase::ReleaseChannel: "
; 151  :             L"invalid index(%d) is used to release dma channel",
; 152  :             pContext->index
; 153  :             ));

  0001c	e59f305c	 ldr         r3, [pc, #0x5C]
  00020	e5933440	 ldr         r3, [r3, #0x440]
  00024	e3130001	 tst         r3, #1
  00028	0a000011	 beq         |$cleanUp$37560|
  0002c	e59f0048	 ldr         r0, [pc, #0x48]
  00030	eb000000	 bl          NKDbgPrintfW

; 162  :     
; 163  : cleanUp:
; 164  :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaControllerBase::ReleaseChannel\r\n"));
; 165  : }

  00034	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$LN2@ReleaseCha|

; 154  :         goto cleanUp;
; 155  :         }
; 156  : 
; 157  :     // stop dma channel
; 158  :     ASSERT(m_rgChannels != NULL);  
; 159  :     EnableInterrupt(pContext->index, FALSE);

  0003c	e5943000	 ldr         r3, [r4]
  00040	e3a02000	 mov         r2, #0
  00044	e1a00004	 mov         r0, r4
  00048	e5933000	 ldr         r3, [r3]
  0004c	e1a0e00f	 mov         lr, pc
  00050	e12fff13	 bx          r3

; 160  :     m_pDmaMediator->ResetChannel(pContext->index);

  00054	e5951000	 ldr         r1, [r5]
  00058	e594000c	 ldr         r0, [r4, #0xC]
  0005c	eb000000	 bl          |?ResetChannel@DmaMediator@@QAAHH@Z|

; 161  :     ResetUsedChannel(pContext->index);

  00060	e5952000	 ldr         r2, [r5]
  00064	e5943004	 ldr         r3, [r4, #4]
  00068	e3a01001	 mov         r1, #1
  0006c	e1c33211	 bic         r3, r3, r1, lsl r2
  00070	e5843004	 str         r3, [r4, #4]
  00074		 |$cleanUp$37560|

; 162  :     
; 163  : cleanUp:
; 164  :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaControllerBase::ReleaseChannel\r\n"));
; 165  : }

  00074	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN12@ReleaseCha|
  0007c		 |$LN13@ReleaseCha|
  0007c	00000000	 DCD         |??_C@_1LG@MNCLIHGA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs@|
  00080		 |$LN14@ReleaseCha|
  00080	00000000	 DCD         |dpCurSettings|
  00084		 |$M37993|

			 ENDP  ; |?ReleaseChannel@DmaControllerBase@@UAAXPBUDmaChannelContext_t@@@Z|, DmaControllerBase::ReleaseChannel

	EXPORT	|?StartInterruptThread@DmaControllerBase@@UAAHKK@Z| ; DmaControllerBase::StartInterruptThread
	IMPORT	|?StartInterruptHandler@DmaMediator@@QAAHKK@Z| ; DmaMediator::StartInterruptHandler

  00000			 AREA	 |.pdata|, PDATA
|$T38010| DCD	|$LN5@StartInter|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?StartInterruptThread@DmaControllerBase@@UAAHKK@Z| PROC ; DmaControllerBase::StartInterruptThread

; 173  : {

  00000		 |$LN5@StartInter|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M38007|

; 174  :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaControllerBase::StartInterruptThread: "
; 175  :         L"(irq=%d, priority=%d)\r\n", irq, priority
; 176  :         ));
; 177  : 
; 178  :     BOOL rc = FALSE;
; 179  :     rc = m_pDmaMediator->StartInterruptHandler(irq, priority);

  00004	e590000c	 ldr         r0, [r0, #0xC]
  00008	eb000000	 bl          |?StartInterruptHandler@DmaMediator@@QAAHKK@Z|

; 180  :     
; 181  :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaControllerBase::StartInterruptThread: "
; 182  :         L"rc=%d\r\n", rc
; 183  :         ));
; 184  :     return rc;
; 185  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M38008|

			 ENDP  ; |?StartInterruptThread@DmaControllerBase@@UAAHKK@Z|, DmaControllerBase::StartInterruptThread

	EXPORT	|?SetSecondaryInterruptHandler@DmaControllerBase@@QAAHPBUDmaChannelContext_t@@PAXK@Z| ; DmaControllerBase::SetSecondaryInterruptHandler
	EXPORT	|??_C@_1JA@PONGHOCH@?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAa?$AAr?$AAy?$AAI@| [ DATA ] ; `string'
	IMPORT	|?SetEventHandler@DmaMediator@@QAAHHPAXK@Z| ; DmaMediator::SetEventHandler

  00000			 AREA	 |.pdata|, PDATA
|$T38027| DCD	|$LN9@SetSeconda|
	DCD	0x40001501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@PONGHOCH@?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAa?$AAr?$AAy?$AAI@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, ":", 0x0, ":"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "e", 0x0, "c"
	DCB	0x0, "o", 0x0, "n", 0x0, "d", 0x0, "a", 0x0, "r", 0x0, "y"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, "H", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "x", 0x0, " ", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetSecondaryInterruptHandler@DmaControllerBase@@QAAHPBUDmaChannelContext_t@@PAXK@Z| PROC ; DmaControllerBase::SetSecondaryInterruptHandler

; 195  : {

  00000		 |$LN9@SetSeconda|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M38024|

; 196  :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaControllerBase::SetSecondaryInterruptHandler: "
; 197  :         L"context=0x%08X, hEvent=0x%08X, processId=0x%08X\r\n", 
; 198  :         pContext, hEvent, processId
; 199  :         ));
; 200  : 
; 201  :     BOOL rc = FALSE;
; 202  : 
; 203  :     // verify the context is valid
; 204  :     int index = pContext->index;

  00004	e5911000	 ldr         r1, [r1]

; 205  :     if (index >= m_maxChannels)

  00008	e590e008	 ldr         lr, [r0, #8]
  0000c	e3a04000	 mov         r4, #0
  00010	e151000e	 cmp         r1, lr
  00014	ba000006	 blt         |$LN2@SetSeconda|

; 206  :         {
; 207  :         RETAILMSG(ZONE_ERROR, (L"DmaControllerBase::SetSecondaryInterruptHandler: "
; 208  :             L"invalid index (0x%08X)", index
; 209  :             ));

  00018	e59f3030	 ldr         r3, [pc, #0x30]
  0001c	e5933440	 ldr         r3, [r3, #0x440]
  00020	e3130001	 tst         r3, #1
  00024	0a000005	 beq         |$cleanUp$37583|
  00028	e59f001c	 ldr         r0, [pc, #0x1C]
  0002c	eb000000	 bl          NKDbgPrintfW

; 210  :         goto cleanUp;

  00030	ea000002	 b           |$cleanUp$37583|
  00034		 |$LN2@SetSeconda|

; 211  :         }
; 212  :     
; 213  :     // enable/disable repreat mode   
; 214  :     rc = m_pDmaMediator->SetEventHandler(index, hEvent, processId);

  00034	e590000c	 ldr         r0, [r0, #0xC]
  00038	eb000000	 bl          |?SetEventHandler@DmaMediator@@QAAHHPAXK@Z|
  0003c	e1a04000	 mov         r4, r0
  00040		 |$cleanUp$37583|

; 215  : 
; 216  : cleanUp:    
; 217  :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaControllerBase::SetSecondaryInterruptHandler\r\n"));
; 218  :     return rc;
; 219  : }

  00040	e1a00004	 mov         r0, r4
  00044	e8bd4010	 ldmia       sp!, {r4, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN10@SetSeconda|
  0004c		 |$LN11@SetSeconda|
  0004c	00000000	 DCD         |??_C@_1JA@PONGHOCH@?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAa?$AAr?$AAy?$AAI@|
  00050		 |$LN12@SetSeconda|
  00050	00000000	 DCD         |dpCurSettings|
  00054		 |$M38025|

			 ENDP  ; |?SetSecondaryInterruptHandler@DmaControllerBase@@QAAHPBUDmaChannelContext_t@@PAXK@Z|, DmaControllerBase::SetSecondaryInterruptHandler

	EXPORT	|?InterruptDone@DmaControllerBase@@QAAHPBUDmaChannelContext_t@@@Z| ; DmaControllerBase::InterruptDone
	EXPORT	|??_C@_1IE@OLFCAEKN@?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAL?$AAa?$AAs?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T38045| DCD	|$LN9@InterruptD@2|
	DCD	0x40001501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@OLFCAEKN@?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAL?$AAa?$AAs?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr@| DCB "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, ":", 0x0, ":"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "L", 0x0, "a", 0x0, "s"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "x", 0x0, " ", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InterruptDone@DmaControllerBase@@QAAHPBUDmaChannelContext_t@@@Z| PROC ; DmaControllerBase::InterruptDone

; 227  : {

  00000		 |$LN9@InterruptD@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M38042|

; 228  :     DEBUGMSG(ZONE_FUNCTION, (L"+DmaControllerBase::InterruptDone: "
; 229  :         L"context=0x%08X\r\n", pContext
; 230  :         ));
; 231  : 
; 232  :     BOOL rc = FALSE;
; 233  : 
; 234  :     // verify the context is valid
; 235  :     int index = pContext->index;

  00004	e5911000	 ldr         r1, [r1]

; 236  :     if (index >= m_maxChannels)

  00008	e5903008	 ldr         r3, [r0, #8]
  0000c	e3a04000	 mov         r4, #0
  00010	e1510003	 cmp         r1, r3
  00014	ba000006	 blt         |$LN2@InterruptD@2|

; 237  :         {
; 238  :         RETAILMSG(ZONE_ERROR, (L"DmaControllerBase::GetLastInterruptStatus: "
; 239  :             L"invalid index (0x%08X)", index
; 240  :             ));

  00018	e59f3030	 ldr         r3, [pc, #0x30]
  0001c	e5933440	 ldr         r3, [r3, #0x440]
  00020	e3130001	 tst         r3, #1
  00024	0a000005	 beq         |$cleanUp$37595|
  00028	e59f001c	 ldr         r0, [pc, #0x1C]
  0002c	eb000000	 bl          NKDbgPrintfW

; 241  :         goto cleanUp;

  00030	ea000002	 b           |$cleanUp$37595|
  00034		 |$LN2@InterruptD@2|

; 242  :         }
; 243  :     
; 244  :     // enable interrupt
; 245  :     rc = m_pDmaMediator->InterruptDone(index); 

  00034	e590000c	 ldr         r0, [r0, #0xC]
  00038	eb000000	 bl          |?InterruptDone@DmaMediator@@QAAHH@Z|
  0003c	e1a04000	 mov         r4, r0
  00040		 |$cleanUp$37595|

; 246  : 
; 247  : cleanUp:    
; 248  :     DEBUGMSG(ZONE_FUNCTION, (L"-DmaControllerBase::InterruptDone\r\n"));
; 249  :     return rc;
; 250  : }

  00040	e1a00004	 mov         r0, r4
  00044	e8bd4010	 ldmia       sp!, {r4, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN10@InterruptD@2|
  0004c		 |$LN11@InterruptD@2|
  0004c	00000000	 DCD         |??_C@_1IE@OLFCAEKN@?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAB?$AAa?$AAs?$AAe?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAL?$AAa?$AAs?$AAt?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr@|
  00050		 |$LN12@InterruptD@2|
  00050	00000000	 DCD         |dpCurSettings|
  00054		 |$M38043|

			 ENDP  ; |?InterruptDone@DmaControllerBase@@QAAHPBUDmaChannelContext_t@@@Z|, DmaControllerBase::InterruptDone

	EXPORT	|?Initialize@SystemDmaController@@UAAHABT_LARGE_INTEGER@@KPAK@Z| ; SystemDmaController::Initialize
	IMPORT	|HalContextUpdateDirtyRegister|
	IMPORT	|?SetDmaController@DmaMediator@@QAAXPAXPAVDmaControllerBase@@@Z| ; DmaMediator::SetDmaController
	IMPORT	|MmMapIoSpace|
	IMPORT	|InitializeCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T38069| DCD	|$LN21@Initialize@2|
	DCD	0x40005101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Initialize@SystemDmaController@@UAAHABT_LARGE_INTEGER@@KPAK@Z| PROC ; SystemDmaController::Initialize

; 259  : {

  00000		 |$LN21@Initialize@2|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M38066|
  00004	e1a04003	 mov         r4, r3
  00008	e1a07002	 mov         r7, r2
  0000c	e1a06001	 mov         r6, r1
  00010	e1a05000	 mov         r5, r0

; 260  :     DEBUGMSG(ZONE_FUNCTION, (L"+SystemDmaController::Initialize\r\n"));
; 261  : 
; 262  :     BOOL rc = FALSE;
; 263  :     int i;
; 264  : 
; 265  :     InitializeCriticalSection(&m_cs);

  00014	e2850028	 add         r0, r5, #0x28
  00018	e3a08000	 mov         r8, #0
  0001c	eb000000	 bl          InitializeCriticalSection
  00020	e1a00005	 mov         r0, r5

; 266  :     
; 267  :     //Set up DMA Interrupt mapping memory
; 268  :     for(i=0; i < OMAP_DMA_INTERRUPT_COUNT; i++)

  00024	e0442005	 sub         r2, r4, r5
  00028	e3a01004	 mov         r1, #4
  0002c		 |$LL11@Initialize@2|

; 269  :         {
; 270  :         m_IrqNumsArray[i] = SysInterruptArray[i];

  0002c	e7923000	 ldr         r3, [r2, +r0]
  00030	e2511001	 subs        r1, r1, #1
  00034	e580303c	 str         r3, [r0, #0x3C]
  00038	e2800004	 add         r0, r0, #4
  0003c	1afffffa	 bne         |$LL11@Initialize@2|

; 271  :         }
; 272  : 
; 273  :     // reserve the fist interrupt for non-dedicated interrupt use
; 274  :     m_AllocatedIntArray[0] = TRUE;

  00040	e3a03001	 mov         r3, #1
  00044	e585304c	 str         r3, [r5, #0x4C]

; 275  : 
; 276  :     //save the address of the controller
; 277  :     m_DmaControllerPhysAddr = pa.LowPart;

  00048	e596e000	 ldr         lr, [r6]

; 278  : 
; 279  :     // map virtual address to hardware register
; 280  :     m_pDmaController = (OMAP_SDMA_REGS*)MmMapIoSpace(pa, size, FALSE);

  0004c	e3a03000	 mov         r3, #0
  00050	e1a02007	 mov         r2, r7
  00054	e585e01c	 str         lr, [r5, #0x1C]
  00058	e5960000	 ldr         r0, [r6]
  0005c	e5961004	 ldr         r1, [r6, #4]
  00060	eb000000	 bl          MmMapIoSpace
  00064	e3500000	 cmp         r0, #0
  00068	e5850024	 str         r0, [r5, #0x24]

; 281  :     if (m_pDmaController == NULL)

  0006c	0a00002c	 beq         |$LN18@Initialize@2|

; 282  :         {
; 283  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SystemDmaController::Initialize: "
; 284  :             L"Failed map System DMA controller registers\r\n"
; 285  :             ));
; 286  :         goto cleanUp;
; 287  :         }
; 288  :     m_registerSize = size;
; 289  : 
; 290  :     // set pointer to dma logical channels
; 291  :     m_rgChannels = m_pDmaController->CHNL_CTRL;

  00070	e2803080	 add         r3, r0, #0x80

; 292  : 
; 293  :     if (DmaControllerBase::Initialize(pa, size) == FALSE)

  00074	e1a00005	 mov         r0, r5
  00078	e1a02007	 mov         r2, r7
  0007c	e1a01006	 mov         r1, r6
  00080	e5853014	 str         r3, [r5, #0x14]
  00084	e5857020	 str         r7, [r5, #0x20]
  00088	eb000000	 bl          |?Initialize@DmaControllerBase@@UAAHABT_LARGE_INTEGER@@K@Z|
  0008c	e3500000	 cmp         r0, #0
  00090	0a000023	 beq         |$LN18@Initialize@2|

; 294  :         {
; 295  :         goto cleanUp;
; 296  :         }    
; 297  : 
; 298  :     // set dma controller
; 299  :     m_pDmaMediator->SetDmaController((HANDLE)1, this);

  00094	e595000c	 ldr         r0, [r5, #0xC]
  00098	e1a02005	 mov         r2, r5
  0009c	e3a01001	 mov         r1, #1
  000a0	eb000000	 bl          |?SetDmaController@DmaMediator@@QAAXPAXPAVDmaControllerBase@@@Z|

; 300  : 
; 301  :     // init disable standby count
; 302  :     m_dwDisableStandbyCount=0;

  000a4	e3a0e000	 mov         lr, #0

; 303  : 
; 304  :     // populate physical address of logical dma channel into array
; 305  :     DWORD ChannelPhysAddr = pa.LowPart + offset(OMAP_SDMA_REGS, CHNL_CTRL);
; 306  :     for (int i = 0; i < m_maxChannels; ++i)

  000a8	e5952008	 ldr         r2, [r5, #8]
  000ac	e585e018	 str         lr, [r5, #0x18]
  000b0	e5963000	 ldr         r3, [r6]
  000b4	e3a01000	 mov         r1, #0
  000b8	e3520000	 cmp         r2, #0
  000bc	e2830080	 add         r0, r3, #0x80
  000c0	da000006	 ble         |$LN2@Initialize@2|
  000c4		 |$LL4@Initialize@2|

; 307  :         {
; 308  :         m_rgChannelPhysAddr[i] = ChannelPhysAddr;

  000c4	e5953010	 ldr         r3, [r5, #0x10]
  000c8	e7830101	 str         r0, [r3, +r1, lsl #2]
  000cc	e5953008	 ldr         r3, [r5, #8]
  000d0	e2811001	 add         r1, r1, #1

; 309  :         ChannelPhysAddr += sizeof(OMAP_DMA_LC_REGS);

  000d4	e2800060	 add         r0, r0, #0x60
  000d8	e1510003	 cmp         r1, r3
  000dc	bafffff8	 blt         |$LL4@Initialize@2|
  000e0		 |$LN2@Initialize@2|

; 310  :         }
; 311  : 
; 312  :     // reset dma interrupts and status
; 313  :     OUTREG32(&m_pDmaController->DMA4_IRQENABLE_L0, 0x00000000);

  000e0	e5953024	 ldr         r3, [r5, #0x24]

; 314  :     OUTREG32(&m_pDmaController->DMA4_IRQSTATUS_L0, 0xFFFFFFFF);

  000e4	e3e00000	 mvn         r0, #0
  000e8	e3a02a02	 mov         r2, #2, 20
  000ec	e583e018	 str         lr, [r3, #0x18]
  000f0	e5953024	 ldr         r3, [r5, #0x24]

; 315  : 
; 316  :     // AUTO IDLE mode
; 317  :     OUTREG32(&m_pDmaController->DMA4_OCP_SYSCONFIG, 
; 318  :         SYSCONFIG_AUTOIDLE | SYSCONFIG_SMARTSTANDBY | SYSCONFIG_SMARTIDLE
; 319  :         );

  000f4	e3821011	 orr         r1, r2, #0x11
  000f8	e3a028ff	 mov         r2, #0xFF, 16
  000fc	e5830008	 str         r0, [r3, #8]
  00100	e5953024	 ldr         r3, [r5, #0x24]

; 320  :     
; 321  :     OUTREG32(&m_pDmaController->DMA4_GCR, 
; 322  :         DMA_GCR_ARBITRATION_RATE(0xFF) | DMA_GCR_HITHREAD_RSVP(0) |
; 323  :         DMA_GCR_FIFODEPTH(64)
; 324  :         );

  00104	e3822040	 orr         r2, r2, #0x40

; 325  : 
; 326  :     // indicate DMA registers need to be saved for OFF mode
; 327  :     HalContextUpdateDirtyRegister(HAL_CONTEXTSAVE_DMA);

  00108	e3a00004	 mov         r0, #4
  0010c	e583102c	 str         r1, [r3, #0x2C]
  00110	e5953024	 ldr         r3, [r5, #0x24]
  00114	e5832078	 str         r2, [r3, #0x78]
  00118	eb000000	 bl          HalContextUpdateDirtyRegister

; 328  :     
; 329  :     rc = TRUE;

  0011c	e3a08001	 mov         r8, #1
  00120		 |$cleanUp$37613|

; 330  : 
; 331  : cleanUp:
; 332  :     DEBUGMSG(ZONE_FUNCTION, (L"-SystemDmaController::Initialize"
; 333  :         L"(rc=%d)\r\n", rc
; 334  :         ));
; 335  :     
; 336  :     if (rc == FALSE) Uninitialize();

  00120	ea000004	 b           |$LN1@Initialize@2|
  00124		 |$LN18@Initialize@2|
  00124	e5953000	 ldr         r3, [r5]
  00128	e1a00005	 mov         r0, r5
  0012c	e5933018	 ldr         r3, [r3, #0x18]
  00130	e1a0e00f	 mov         lr, pc
  00134	e12fff13	 bx          r3
  00138		 |$LN1@Initialize@2|

; 337  :     return rc;
; 338  : }

  00138	e1a00008	 mov         r0, r8
  0013c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00140	e12fff1e	 bx          lr
  00144		 |$M38067|

			 ENDP  ; |?Initialize@SystemDmaController@@UAAHABT_LARGE_INTEGER@@KPAK@Z|, SystemDmaController::Initialize

	EXPORT	|?Uninitialize@SystemDmaController@@UAAXXZ| ; SystemDmaController::Uninitialize
	IMPORT	|DeleteCriticalSection|
	IMPORT	|MmUnmapIoSpace|

  00000			 AREA	 |.pdata|, PDATA
|$T38077| DCD	|$LN6@Uninitiali@2|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Uninitialize@SystemDmaController@@UAAXXZ| PROC ; SystemDmaController::Uninitialize

; 344  : {

  00000		 |$LN6@Uninitiali@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M38074|
  00004	e1a04000	 mov         r4, r0

; 345  :     DEBUGMSG(ZONE_FUNCTION, (L"+SystemDmaController::Uninitialize\r\n"));
; 346  :     
; 347  :     DmaControllerBase::Uninitialize();

  00008	eb000000	 bl          |?Uninitialize@DmaControllerBase@@UAAXXZ|

; 348  :     if (m_pDmaController != NULL)

  0000c	e5943024	 ldr         r3, [r4, #0x24]
  00010	e3530000	 cmp         r3, #0
  00014	0a000006	 beq         |$LN1@Uninitiali@2|

; 349  :         {
; 350  :         MmUnmapIoSpace((void*)m_pDmaController, m_registerSize);

  00018	e5941020	 ldr         r1, [r4, #0x20]
  0001c	e1a00003	 mov         r0, r3
  00020	eb000000	 bl          MmUnmapIoSpace

; 351  :         m_rgChannels = NULL;

  00024	e3a03000	 mov         r3, #0
  00028	e5843014	 str         r3, [r4, #0x14]

; 352  :         m_pDmaController = NULL;

  0002c	e5843024	 str         r3, [r4, #0x24]

; 353  :         m_registerSize = 0;

  00030	e5843020	 str         r3, [r4, #0x20]
  00034		 |$LN1@Uninitiali@2|

; 354  :         }
; 355  : 
; 356  :     DeleteCriticalSection(&m_cs);

  00034	e2840028	 add         r0, r4, #0x28
  00038	eb000000	 bl          DeleteCriticalSection

; 357  : 
; 358  :     DEBUGMSG(ZONE_FUNCTION, (L"-SystemDmaController::Uninitialize\r\n"));
; 359  : }

  0003c	e8bd4010	 ldmia       sp!, {r4, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M38075|

			 ENDP  ; |?Uninitialize@SystemDmaController@@UAAXXZ|, SystemDmaController::Uninitialize

	EXPORT	|?EnableInterrupt@SystemDmaController@@MAAXHH@Z| ; SystemDmaController::EnableInterrupt
	IMPORT	|LeaveCriticalSection|
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T38089| DCD	|$LN8@EnableInte@2|
	DCD	0x40001701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableInterrupt@SystemDmaController@@MAAXHH@Z| PROC ; SystemDmaController::EnableInterrupt

; 368  : {

  00000		 |$LN8@EnableInte@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M38086|
  00004	e1a04002	 mov         r4, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a05000	 mov         r5, r0

; 369  :     DEBUGMSG(ZONE_FUNCTION, (L"+SystemDmaController::EnableInterrupt: "
; 370  :         L"i=0x%08X, bEnable=0x%08X\r\n", index, bEnable
; 371  :         ));
; 372  :     
; 373  :     // enable/disable DMA interrupts
; 374  :     DWORD mask = (1 << index);
; 375  : 
; 376  :     EnterCriticalSection(&m_cs);

  00010	e2850028	 add         r0, r5, #0x28
  00014	e3a07001	 mov         r7, #1
  00018	eb000000	 bl          EnterCriticalSection

; 377  :     SETREG32(&m_pDmaController->DMA4_IRQSTATUS_L0, mask);

  0001c	e595e024	 ldr         lr, [r5, #0x24]

; 378  :     if (bEnable == TRUE)

  00020	e3540001	 cmp         r4, #1

; 379  :         {
; 380  :         SETREG32(&m_pDmaController->DMA4_IRQENABLE_L0, mask);        
; 381  :         }
; 382  :     else
; 383  :         {
; 384  :         CLRREG32(&m_pDmaController->DMA4_IRQENABLE_L0, mask);        
; 385  :         }
; 386  :     LeaveCriticalSection(&m_cs);

  00024	e2850028	 add         r0, r5, #0x28
  00028	e59e3008	 ldr         r3, [lr, #8]
  0002c	e1833617	 orr         r3, r3, r7, lsl r6
  00030	e58e3008	 str         r3, [lr, #8]
  00034	e5952024	 ldr         r2, [r5, #0x24]
  00038	e5923018	 ldr         r3, [r2, #0x18]
  0003c	01833617	 orreq       r3, r3, r7, lsl r6
  00040	11c33617	 bicne       r3, r3, r7, lsl r6
  00044	e5823018	 str         r3, [r2, #0x18]
  00048	eb000000	 bl          LeaveCriticalSection

; 387  : 
; 388  :     // indicate DMA registers need to be saved for OFF mode
; 389  :     HalContextUpdateDirtyRegister(HAL_CONTEXTSAVE_DMA);

  0004c	e3a00004	 mov         r0, #4
  00050	eb000000	 bl          HalContextUpdateDirtyRegister

; 390  : 
; 391  :     DEBUGMSG(ZONE_FUNCTION, (L"-SystemDmaController::EnableInterrupt\r\n"));
; 392  : }

  00054	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M38087|

			 ENDP  ; |?EnableInterrupt@SystemDmaController@@MAAXHH@Z|, SystemDmaController::EnableInterrupt

	EXPORT	|?GetInterruptMask@SystemDmaController@@UAAHPAXPAK@Z| ; SystemDmaController::GetInterruptMask

  00000			 AREA	 |.pdata|, PDATA
|$T38100| DCD	|$LN5@GetInterru|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetInterruptMask@SystemDmaController@@UAAHPAXPAK@Z| PROC ; SystemDmaController::GetInterruptMask

; 400  : {

  00000		 |$LN5@GetInterru|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M38097|
  00004	e1a05002	 mov         r5, r2
  00008	e1a04000	 mov         r4, r0

; 401  :     UNREFERENCED_PARAMETER(context);
; 402  :     UNREFERENCED_PARAMETER(pdwMask);
; 403  : 
; 404  :     DEBUGMSG(ZONE_FUNCTION, (L"+SystemDmaController::GetInterruptMask: "
; 405  :         L"context=0x%08X, pdwMask=0x%08X\r\n", context, pdwMask
; 406  :         ));
; 407  :     
; 408  :     // get enabled, pending DMA interrupts
; 409  :     EnterCriticalSection(&m_cs);

  0000c	e2840028	 add         r0, r4, #0x28
  00010	eb000000	 bl          EnterCriticalSection

; 410  :     *pdwMask = INREG32(&m_pDmaController->DMA4_IRQSTATUS_L0);

  00014	e5943024	 ldr         r3, [r4, #0x24]

; 411  :     *pdwMask &= INREG32(&m_pDmaController->DMA4_IRQENABLE_L0);
; 412  :     LeaveCriticalSection(&m_cs);

  00018	e2840028	 add         r0, r4, #0x28
  0001c	e5931008	 ldr         r1, [r3, #8]
  00020	e5851000	 str         r1, [r5]
  00024	e5943024	 ldr         r3, [r4, #0x24]
  00028	e5933018	 ldr         r3, [r3, #0x18]
  0002c	e0033001	 and         r3, r3, r1
  00030	e5853000	 str         r3, [r5]
  00034	eb000000	 bl          LeaveCriticalSection

; 413  : 
; 414  :     DEBUGMSG(ZONE_FUNCTION, (L"-SystemDmaController::GetInterruptMaskS\r\n"));
; 415  :     return TRUE;

  00038	e3a00001	 mov         r0, #1

; 416  : }

  0003c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M38098|

			 ENDP  ; |?GetInterruptMask@SystemDmaController@@UAAHPAXPAK@Z|, SystemDmaController::GetInterruptMask

	EXPORT	|?ClearInterruptMask@SystemDmaController@@UAAHPAXK@Z| ; SystemDmaController::ClearInterruptMask

  00000			 AREA	 |.pdata|, PDATA
|$T38111| DCD	|$LN5@ClearInter|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ClearInterruptMask@SystemDmaController@@UAAHPAXK@Z| PROC ; SystemDmaController::ClearInterruptMask

; 424  : {

  00000		 |$LN5@ClearInter|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M38108|
  00004	e1a05002	 mov         r5, r2
  00008	e1a04000	 mov         r4, r0

; 425  :     UNREFERENCED_PARAMETER(context);
; 426  :     
; 427  :     DEBUGMSG(ZONE_FUNCTION, (L"+SystemDmaController::ClearInterruptMask: "
; 428  :         L"context=0x%08X, dwMask=0x%08X\r\n", context, dwMask
; 429  :         ));
; 430  :         
; 431  :     // disable interrupts
; 432  :     EnterCriticalSection(&m_cs);

  0000c	e2840028	 add         r0, r4, #0x28
  00010	eb000000	 bl          EnterCriticalSection

; 433  :     CLRREG32(&m_pDmaController->DMA4_IRQENABLE_L0, dwMask);

  00014	e5941024	 ldr         r1, [r4, #0x24]

; 434  :     
; 435  :     // reset status bits
; 436  :     OUTREG32(&m_pDmaController->DMA4_IRQSTATUS_L0, dwMask);
; 437  :     LeaveCriticalSection(&m_cs);

  00018	e2840028	 add         r0, r4, #0x28
  0001c	e5913018	 ldr         r3, [r1, #0x18]
  00020	e1c33005	 bic         r3, r3, r5
  00024	e5813018	 str         r3, [r1, #0x18]
  00028	e5943024	 ldr         r3, [r4, #0x24]
  0002c	e5835008	 str         r5, [r3, #8]
  00030	eb000000	 bl          LeaveCriticalSection

; 438  : 
; 439  :     // indicate DMA registers need to be saved for OFF mode
; 440  :     HalContextUpdateDirtyRegister(HAL_CONTEXTSAVE_DMA);

  00034	e3a00004	 mov         r0, #4
  00038	eb000000	 bl          HalContextUpdateDirtyRegister

; 441  : 
; 442  :     DEBUGMSG(ZONE_FUNCTION, (L"-SystemDmaController::ClearInterruptMask\r\n"));
; 443  :     return TRUE;

  0003c	e3a00001	 mov         r0, #1

; 444  : }

  00040	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M38109|

			 ENDP  ; |?ClearInterruptMask@SystemDmaController@@UAAHPAXK@Z|, SystemDmaController::ClearInterruptMask

	EXPORT	|?DisableStandby@SystemDmaController@@UAAHPAXH@Z| ; SystemDmaController::DisableStandby

  00000			 AREA	 |.pdata|, PDATA
|$T38124| DCD	|$LN9@DisableSta|
	DCD	0x40002701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DisableStandby@SystemDmaController@@UAAHPAXH@Z| PROC ; SystemDmaController::DisableStandby

; 453  : {

  00000		 |$LN9@DisableSta|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M38121|
  00004	e1a04002	 mov         r4, r2
  00008	e1a05000	 mov         r5, r0

; 454  :     ULONG ocpSysconfig;
; 455  : 
; 456  :     UNREFERENCED_PARAMETER(context);
; 457  :     
; 458  :     DEBUGMSG(ZONE_FUNCTION, (L"+SystemDmaController::DisableStandby: "
; 459  :         L"context=0x%08X, noStandby=0x%08X\r\n", context, noStandby
; 460  :         ));
; 461  : 
; 462  :     EnterCriticalSection(&m_cs);

  0000c	e2850028	 add         r0, r5, #0x28
  00010	eb000000	 bl          EnterCriticalSection

; 463  :     if (noStandby)
; 464  :         {
; 465  :         if (m_dwDisableStandbyCount++ == 0)

  00014	e5953018	 ldr         r3, [r5, #0x18]
  00018	e3540000	 cmp         r4, #0
  0001c	0a00000d	 beq         |$LN4@DisableSta|
  00020	e3530000	 cmp         r3, #0
  00024	e2833001	 add         r3, r3, #1
  00028	e5853018	 str         r3, [r5, #0x18]
  0002c	1a000015	 bne         |$LN1@DisableSta|

; 466  :             {
; 467  :             ocpSysconfig = INREG32(&m_pDmaController->DMA4_OCP_SYSCONFIG);

  00030	e595e024	 ldr         lr, [r5, #0x24]
  00034	e3e03a02	 mvn         r3, #2, 20

; 468  :             ocpSysconfig &= ~(SYSCONFIG_IDLE_MASK | SYSCONFIG_STANDBY_MASK);

  00038	e2231010	 eor         r1, r3, #0x10
  0003c	e59e302c	 ldr         r3, [lr, #0x2C]
  00040	e3a02a01	 mov         r2, #1, 20

; 469  :             ocpSysconfig |= (SYSCONFIG_NOIDLE | SYSCONFIG_NOSTANDBY);

  00044	e3822008	 orr         r2, r2, #8
  00048	e0033001	 and         r3, r3, r1
  0004c	e1833002	 orr         r3, r3, r2

; 470  :             OUTREG32(&m_pDmaController->DMA4_OCP_SYSCONFIG, ocpSysconfig);

  00050	e58e302c	 str         r3, [lr, #0x2C]

; 471  :             }
; 472  :         }
; 473  :     else

  00054	ea00000b	 b           |$LN1@DisableSta|
  00058		 |$LN4@DisableSta|

; 474  :         {
; 475  :         // assumes Standby is only manipulated in this class
; 476  :         // in the Initialize function and in this function
; 477  :         if (--m_dwDisableStandbyCount == 0)

  00058	e2533001	 subs        r3, r3, #1
  0005c	e5853018	 str         r3, [r5, #0x18]
  00060	1a000008	 bne         |$LN1@DisableSta|

; 478  :             {
; 479  :             ocpSysconfig = INREG32(&m_pDmaController->DMA4_OCP_SYSCONFIG);

  00064	e5950024	 ldr         r0, [r5, #0x24]
  00068	e3e03a01	 mvn         r3, #1, 20

; 480  :             ocpSysconfig &= ~(SYSCONFIG_IDLE_MASK | SYSCONFIG_STANDBY_MASK);

  0006c	e2231008	 eor         r1, r3, #8
  00070	e590302c	 ldr         r3, [r0, #0x2C]
  00074	e3a02a02	 mov         r2, #2, 20

; 481  :             ocpSysconfig |= (SYSCONFIG_SMARTIDLE | SYSCONFIG_SMARTSTANDBY);

  00078	e3822010	 orr         r2, r2, #0x10
  0007c	e0033001	 and         r3, r3, r1
  00080	e1833002	 orr         r3, r3, r2

; 482  :             OUTREG32(&m_pDmaController->DMA4_OCP_SYSCONFIG, ocpSysconfig);

  00084	e580302c	 str         r3, [r0, #0x2C]
  00088		 |$LN1@DisableSta|

; 483  :             }
; 484  :         }
; 485  :     LeaveCriticalSection(&m_cs);

  00088	e2850028	 add         r0, r5, #0x28
  0008c	eb000000	 bl          LeaveCriticalSection

; 486  : 
; 487  :     DEBUGMSG(ZONE_FUNCTION, (L"-SystemDmaController::DisableStandby\r\n"));
; 488  :     return TRUE;

  00090	e3a00001	 mov         r0, #1

; 489  : }

  00094	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$M38122|

			 ENDP  ; |?DisableStandby@SystemDmaController@@UAAHPAXH@Z|, SystemDmaController::DisableStandby

	EXPORT	|?DI_ReserveInterrupt@SystemDmaController@@UAAHKPAK00@Z| ; SystemDmaController::DI_ReserveInterrupt
	IMPORT	|SetLastError|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmacontroller.h

  00000			 AREA	 |.pdata|, PDATA
|$T38149| DCD	|$LN22@DI_Reserve|
	DCD	0x40003d01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmacontroller.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DI_ReserveInterrupt@SystemDmaController@@UAAHKPAK00@Z| PROC ; SystemDmaController::DI_ReserveInterrupt

; 499  : {

  00000		 |$LN22@DI_Reserve|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M38146|
  00004	e1a0e003	 mov         lr, r3
  00008	e1a0a002	 mov         r10, r2
  0000c	e1a08001	 mov         r8, r1
  00010	e1a04000	 mov         r4, r0

; 500  :     BOOL rc = FALSE;

  00014	e3a07000	 mov         r7, #0

; 501  :     DWORD ReserevedInterrupt = (DWORD)-1;
; 502  :     int ReserevedChannel = -1;
; 503  :     DWORD i = 0;
; 504  : 
; 505  :     DEBUGMSG(ZONE_FUNCTION, (L"+SystemDmaController::DI_ReserveInterrupt: "
; 506  :         L"NumberOfChannels=%d\r\n", NumberOfChannels
; 507  :         ));
; 508  : 
; 509  :     //check for valid number of channels
; 510  :     if(NumberOfChannels > OMAP_DMA_LOGICAL_CHANNEL_COUNT)

  00018	e3580020	 cmp         r8, #0x20
  0001c	9a000002	 bls         |$LN11@DI_Reserve|

; 511  :         {
; 512  :         DEBUGMSG(TRUE, (
; 513  :                         L"ERROR: SystemDmaController::DI_ReserveInterrupt: NumberOfChannels too large\r\n"
; 514  :                        ));
; 515  :         SetLastError(ERROR_INVALID_PARAMETER);

  00020	e3a00057	 mov         r0, #0x57
  00024	eb000000	 bl          SetLastError
  00028	ea00002e	 b           |$LN1@DI_Reserve|
  0002c		 |$LN11@DI_Reserve|

; 516  :         goto cleanUp;
; 517  :         }
; 518  : 
; 519  :     *p_DmaControllerPhysAddr = m_DmaControllerPhysAddr;

  0002c	e594301c	 ldr         r3, [r4, #0x1C]

; 520  : 
; 521  :     // check map for an unused interrupt
; 522  :     ReserevedInterrupt = DI_FindUnusedInterrupt();

  00030	e1a00004	 mov         r0, r4
  00034	e58e3000	 str         r3, [lr]
  00038	eb000000	 bl          |?DI_FindUnusedInterrupt@SystemDmaController@@IAAHXZ|
  0003c	e1a06000	 mov         r6, r0

; 523  :     if (ReserevedInterrupt == -1)

  00040	e3760001	 cmn         r6, #1
  00044	1a000002	 bne         |$LN9@DI_Reserve|

; 524  :         {
; 525  :         DEBUGMSG(ZONE_WARN, (L"WARN: SystemDmaController::DI_ReserveInterrupt: "
; 526  :             L"All DMA interrupts in use!!!!!!\r\n"
; 527  :             ));
; 528  :         SetLastError(ERROR_BUSY);

  00048	e3a000aa	 mov         r0, #0xAA
  0004c	eb000000	 bl          SetLastError

; 560  :         }

  00050	ea00001f	 b           |$cleanUp$37717|
  00054		 |$LN9@DI_Reserve|

; 529  :         goto cleanUp;
; 530  :         }
; 531  :     *pIrqNum = m_IrqNumsArray[ReserevedInterrupt];

  00054	e0845106	 add         r5, r4, r6, lsl #2
  00058	e595303c	 ldr         r3, [r5, #0x3C]

; 532  : 
; 533  :     //reserve channels
; 534  :     m_ffDmaChannelsPerInterrupt[ReserevedInterrupt] = 0;

  0005c	e3a0b000	 mov         r11, #0

; 535  :     for(i = 0; i < NumberOfChannels; i++)

  00060	e3a09000	 mov         r9, #0
  00064	e58a3000	 str         r3, [r10]
  00068	e585b05c	 str         r11, [r5, #0x5C]
  0006c	e3580000	 cmp         r8, #0
  00070	0a00000d	 beq         |$LN5@DI_Reserve|
  00074	e3a0a001	 mov         r10, #1
  00078		 |$LL7@DI_Reserve|

; 536  :         {
; 537  :         ReserevedChannel = FindUnusedChannel();

  00078	e1a00004	 mov         r0, r4
  0007c	eb000000	 bl          |?FindUnusedChannel@DmaControllerBase@@IAAHXZ|

; 538  :         if(ReserevedChannel == -1)

  00080	e3700001	 cmn         r0, #1
  00084	0a000006	 beq         |$LN17@DI_Reserve|

; 544  :             break;
; 545  :             }
; 546  : 
; 547  :         //save off the channels allocated to to the interrupt
; 548  :         m_ffDmaChannelsPerInterrupt[ReserevedInterrupt] |= 1<<ReserevedChannel;

  00088	e595305c	 ldr         r3, [r5, #0x5C]
  0008c	e2899001	 add         r9, r9, #1
  00090	e1590008	 cmp         r9, r8
  00094	e183301a	 orr         r3, r3, r10, lsl r0
  00098	e585305c	 str         r3, [r5, #0x5C]
  0009c	3afffff5	 bcc         |$LL7@DI_Reserve|

; 538  :         if(ReserevedChannel == -1)

  000a0	ea000001	 b           |$LN5@DI_Reserve|
  000a4		 |$LN17@DI_Reserve|

; 539  :             {
; 540  :             DEBUGMSG(ZONE_WARN, (L"WARN: SystemDmaController::DI_ReserveInterrupt: "
; 541  :             L"All DMA Channels in use!!!!!!\r\n"
; 542  :             ));
; 543  :             SetLastError(ERROR_BUSY);

  000a4	e3a000aa	 mov         r0, #0xAA
  000a8	eb000000	 bl          SetLastError
  000ac		 |$LN5@DI_Reserve|

; 549  :         }
; 550  : 
; 551  :     if(i == NumberOfChannels)

  000ac	e1590008	 cmp         r9, r8

; 552  :         {
; 553  :         rc = TRUE; 
; 554  :         *pffDmaChannels = m_ffDmaChannelsPerInterrupt[ReserevedInterrupt];

  000b0	059d3024	 ldreq       r3, [sp, #0x24]
  000b4	e595205c	 ldr         r2, [r5, #0x5C]
  000b8	03a07001	 moveq       r7, #1
  000bc	05832000	 streq       r2, [r3]
  000c0	0a000008	 beq         |$LN1@DI_Reserve|

; 555  :         }
; 556  :     else
; 557  :         {
; 558  :         ResetUsedChannelsBulk(m_ffDmaChannelsPerInterrupt[ReserevedInterrupt]);

  000c4	e5943004	 ldr         r3, [r4, #4]
  000c8	e1c33002	 bic         r3, r3, r2
  000cc	e5843004	 str         r3, [r4, #4]

; 559  :         m_ffDmaChannelsPerInterrupt[ReserevedInterrupt] = 0;

  000d0	e585b05c	 str         r11, [r5, #0x5C]
  000d4		 |$cleanUp$37717|

; 561  : 
; 562  : cleanUp:
; 563  : 
; 564  :     if((!rc) && (ReserevedInterrupt != -1))

  000d4	e3760001	 cmn         r6, #1

; 565  :         {
; 566  :         //release the reserverd interrupt
; 567  :         DI_ResetUsedInterrupt(m_IrqNumsArray[ReserevedInterrupt]);

  000d8	10843106	 addne       r3, r4, r6, lsl #2
  000dc	1593103c	 ldrne       r1, [r3, #0x3C]
  000e0	11a00004	 movne       r0, r4
  000e4	1b000000	 blne        |?DI_ResetUsedInterrupt@SystemDmaController@@IAAHK@Z|
  000e8		 |$LN1@DI_Reserve|

; 568  :         }
; 569  : 
; 570  :     DEBUGMSG(ZONE_FUNCTION, (L"-SystemDmaController::ReserveInterrupt\r\n"));
; 571  :     return rc;
; 572  : }

  000e8	e1a00007	 mov         r0, r7
  000ec	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000f0	e12fff1e	 bx          lr
  000f4		 |$M38147|

			 ENDP  ; |?DI_ReserveInterrupt@SystemDmaController@@UAAHKPAK00@Z|, SystemDmaController::DI_ReserveInterrupt

	EXPORT	|?DI_ReleaseInterrupt@SystemDmaController@@UAAHK@Z| ; SystemDmaController::DI_ReleaseInterrupt
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmacontroller.h

  00000			 AREA	 |.pdata|, PDATA
|$T38166| DCD	|$LN8@DI_Release|
	DCD	0x40001001
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\sdma\dmacontroller.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DI_ReleaseInterrupt@SystemDmaController@@UAAHK@Z| PROC ; SystemDmaController::DI_ReleaseInterrupt

; 581  : {

  00000		 |$LN8@DI_Release|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M38163|
  00004	e1a05000	 mov         r5, r0

; 582  :     BOOL rc = FALSE;
; 583  :     DWORD ReserevedInterrupt = (DWORD)-1;
; 584  : 
; 585  :     ReserevedInterrupt = DI_ResetUsedInterrupt(IrqNum);

  00008	e3a04000	 mov         r4, #0
  0000c	eb000000	 bl          |?DI_ResetUsedInterrupt@SystemDmaController@@IAAHK@Z|

; 586  : 
; 587  :     if(ReserevedInterrupt != -1)

  00010	e3700001	 cmn         r0, #1
  00014	10851100	 addne       r1, r5, r0, lsl #2

; 588  :         {
; 589  :         //release the channels to the interrupt
; 590  :         ResetUsedChannelsBulk(m_ffDmaChannelsPerInterrupt[ReserevedInterrupt]);

  00018	1591205c	 ldrne       r2, [r1, #0x5C]
  0001c	15953004	 ldrne       r3, [r5, #4]

; 591  :         m_ffDmaChannelsPerInterrupt[ReserevedInterrupt] = 0;

  00020	13a00000	 movne       r0, #0

; 592  :         rc = TRUE;

  00024	13a04001	 movne       r4, #1
  00028	11c33002	 bicne       r3, r3, r2
  0002c	15853004	 strne       r3, [r5, #4]
  00030	1581005c	 strne       r0, [r1, #0x5C]

; 593  :         }
; 594  : 
; 595  :     return rc;
; 596  : }

  00034	e1a00004	 mov         r0, r4
  00038	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M38164|

			 ENDP  ; |?DI_ReleaseInterrupt@SystemDmaController@@UAAHK@Z|, SystemDmaController::DI_ReleaseInterrupt

	END
