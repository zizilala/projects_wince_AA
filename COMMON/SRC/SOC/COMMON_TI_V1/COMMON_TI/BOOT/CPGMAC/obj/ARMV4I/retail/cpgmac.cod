; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\CPGMAC\cpgmac.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|dmaBuffer|, 0x4

	 COMMON	|emac_rx_desc|, 0x4

	 COMMON	|startOfCPPIArea|, 0x4

	 COMMON	|active_phy_addr|, 0x1

	 COMMON	|emac_tx_desc|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|emac_rx_active_head| % 0x4
|emac_rx_active_tail| % 0x4

  00000			 AREA	 |.data|, DATA
|?emac_rx_queue_active@?1??EMACGetFrame@@9@9| DCD 0x1	; `EMACGetFrame'::`2'::emac_rx_queue_active

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|EMACEnableInts|

  00008			 AREA	 |.bss|, NOINIT
|g_pEmacSys| %	0x4
|g_pEmacSys| %	0x4
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\boot\cpgmac\cpgmac.c

  00000			 AREA	 |.pdata|, PDATA
|$T43739| DCD	|$LN5@EMACEnable|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EMACEnableInts| PROC

; 42   : {

  00000		 |$LN5@EMACEnable|
  00000		 |$M43736|

; 43   :     g_pEmacSys->C0RXEN = 0x01;

  00000	e59f300c	 ldr         r3, [pc, #0xC]
  00004	e3a02001	 mov         r2, #1
  00008	e5933000	 ldr         r3, [r3]
  0000c	e5832014	 str         r2, [r3, #0x14]

; 44   : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN6@EMACEnable|
  00014		 |$LN7@EMACEnable|
  00014	00000000	 DCD         |g_pEmacSys|
  00018		 |$M43737|

			 ENDP  ; |EMACEnableInts|

	EXPORT	|EMACDisableInts|

  00000			 AREA	 |.pdata|, PDATA
|$T43748| DCD	|$LN5@EMACDisabl|
	DCD	0x40000900
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EMACDisableInts| PROC

; 47   : {

  00000		 |$LN5@EMACDisabl|
  00000		 |$M43745|

; 48   :     g_pEmacSys->C0RXTHRESHEN = 0x0;

  00000	e59f3018	 ldr         r3, [pc, #0x18]
  00004	e3a02000	 mov         r2, #0
  00008	e5933000	 ldr         r3, [r3]
  0000c	e5832010	 str         r2, [r3, #0x10]

; 49   :     g_pEmacSys->C0RXEN = 0x0;

  00010	e5832014	 str         r2, [r3, #0x14]

; 50   :     g_pEmacSys->C0TXEN = 0x0;

  00014	e5832018	 str         r2, [r3, #0x18]

; 51   :     g_pEmacSys->C0MISCEN = 0x0;

  00018	e583201c	 str         r2, [r3, #0x1C]

; 52   : }

  0001c	e12fff1e	 bx          lr
  00020		 |$LN6@EMACDisabl|
  00020		 |$LN7@EMACDisabl|
  00020	00000000	 DCD         |g_pEmacSys|
  00024		 |$M43746|

			 ENDP  ; |EMACDisableInts|

	EXPORT	|EMACMulticastList|

  00000			 AREA	 |.pdata|, PDATA
|$T43759| DCD	|$LN5@EMACMultic|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EMACMulticastList| PROC

; 55   : {

  00000		 |$LN5@EMACMultic|
  00000		 |$M43756|

; 56   :     // Not supported	 
; 57   :     UNREFERENCED_PARAMETER(pAddresses);
; 58   :     UNREFERENCED_PARAMETER(count);
; 59   :     return FALSE;

  00000	e3a00000	 mov         r0, #0

; 60   : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43757|

			 ENDP  ; |EMACMulticastList|

	EXPORT	|EMACCurrentPacketFilter|

  00000			 AREA	 |.pdata|, PDATA
|$T43766| DCD	|$LN5@EMACCurren|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EMACCurrentPacketFilter| PROC

; 63   : {

  00000		 |$LN5@EMACCurren|
  00000		 |$M43763|

; 64   :     // Not supported
; 65   :     UNREFERENCED_PARAMETER(filter);
; 66   : }

  00000	e12fff1e	 bx          lr
  00004		 |$M43764|

			 ENDP  ; |EMACCurrentPacketFilter|

	EXPORT	|PhyReadReg|

  00010			 AREA	 |.bss|, NOINIT
|g_pMdio| %	0x4
|g_pMdio| %	0x4

  00000			 AREA	 |.pdata|, PDATA
|$T43781| DCD	|$LN12@PhyReadReg|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PhyReadReg| PROC

; 72   : {

  00000		 |$LN12@PhyReadReg|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43778|
  00004	e59f305c	 ldr         r3, [pc, #0x5C]
  00008	e593e000	 ldr         lr, [r3]
  0000c		 |$LL5@PhyReadReg|

; 73   :     int	tmp;
; 74   : 
; 75   :     // Wait for MDIO to be ready
; 76   :     while (g_pMdio->USERACCESS0 & MDIO_USERACCESS0_GO);

  0000c	e59e3080	 ldr         r3, [lr, #0x80]
  00010	e3130102	 tst         r3, #2, 2
  00014	1afffffc	 bne         |$LL5@PhyReadReg|
  00018	e3e040ff	 mvn         r4, #0xFF

; 77   : 
; 78   :     g_pMdio->USERACCESS0 = MDIO_USERACCESS0_GO |
; 79   :         MDIO_USERACCESS0_WRITE_READ |
; 80   :         ((reg_num & 0x1f) << 21) |
; 81   :         ((phy_addr & 0x1f) << 16);

  0001c	e201301f	 and         r3, r1, #0x1F
  00020	e1831104	 orr         r1, r3, r4, lsl #2
  00024	e200301f	 and         r3, r0, #0x1F
  00028	e1833281	 orr         r3, r3, r1, lsl #5
  0002c	e1a03803	 mov         r3, r3, lsl #16
  00030	e58e3080	 str         r3, [lr, #0x80]
  00034		 |$LL3@PhyReadReg|

; 82   : 
; 83   :     // Wait for command to complete
; 84   :     while ((tmp = g_pMdio->USERACCESS0) & MDIO_USERACCESS0_GO);

  00034	e59e3080	 ldr         r3, [lr, #0x80]
  00038	e3130102	 tst         r3, #2, 2
  0003c	1afffffc	 bne         |$LL3@PhyReadReg|

; 85   : 
; 86   :     if (tmp & MDIO_USERACCESS0_ACK) {

  00040	e3130202	 tst         r3, #2, 4

; 87   :         *data = (UINT16) tmp;

  00044	11c230b0	 strneh      r3, [r2]

; 88   :         return TRUE;

  00048	13a00001	 movne       r0, #1

; 93   : }

  0004c	18bd4010	 ldmneia     sp!, {r4, lr}

; 88   :         return TRUE;

  00050	03a03cff	 moveq       r3, #0xFF, 24

; 89   :     }
; 90   : 
; 91   :     *data = (UINT16) -1;

  00054	038330ff	 orreq       r3, r3, #0xFF
  00058	01c230b0	 streqh      r3, [r2]

; 92   :     return FALSE;

  0005c	03a00000	 moveq       r0, #0

; 93   : }

  00060	08bd4010	 ldmeqia     sp!, {r4, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$LN13@PhyReadReg|
  00068		 |$LN14@PhyReadReg|
  00068	00000000	 DCD         |g_pMdio|
  0006c		 |$M43779|

			 ENDP  ; |PhyReadReg|

	EXPORT	|PhyWriteReg|

  00000			 AREA	 |.pdata|, PDATA
|$T43797| DCD	|$LN11@PhyWriteRe|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PhyWriteReg| PROC

; 97   : {

  00000		 |$LN11@PhyWriteRe|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43794|
  00004	e59f3040	 ldr         r3, [pc, #0x40]
  00008	e593e000	 ldr         lr, [r3]
  0000c		 |$LL4@PhyWriteRe|

; 98   : 
; 99   :     // Wait for MDIO to be ready
; 100  :     while (g_pMdio->USERACCESS0 & MDIO_USERACCESS0_GO);

  0000c	e59e3080	 ldr         r3, [lr, #0x80]
  00010	e3130102	 tst         r3, #2, 2
  00014	1afffffc	 bne         |$LL4@PhyWriteRe|
  00018	e3e040ff	 mvn         r4, #0xFF

; 101  : 
; 102  :     g_pMdio->USERACCESS0 = MDIO_USERACCESS0_GO |
; 103  :         MDIO_USERACCESS0_WRITE_WRITE |
; 104  :         ((reg_num & 0x1f) << 21) |
; 105  :         ((phy_addr & 0x1f) << 16) |
; 106  :         (data & 0xffff);

  0001c	e201301f	 and         r3, r1, #0x1F
  00020	e1831084	 orr         r1, r3, r4, lsl #1
  00024	e200301f	 and         r3, r0, #0x1F
  00028	e1833281	 orr         r3, r3, r1, lsl #5
  0002c	e1823803	 orr         r3, r2, r3, lsl #16
  00030	e58e3080	 str         r3, [lr, #0x80]
  00034		 |$LL2@PhyWriteRe|

; 107  : 
; 108  :     // Wait for command to complete
; 109  :     while (g_pMdio->USERACCESS0 & MDIO_USERACCESS0_GO);

  00034	e59e3080	 ldr         r3, [lr, #0x80]
  00038	e3130102	 tst         r3, #2, 2
  0003c	1afffffc	 bne         |$LL2@PhyWriteRe|

; 110  : 
; 111  :     return TRUE;

  00040	e3a00001	 mov         r0, #1

; 112  : }

  00044	e8bd4010	 ldmia       sp!, {r4, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN12@PhyWriteRe|
  0004c		 |$LN13@PhyWriteRe|
  0004c	00000000	 DCD         |g_pMdio|
  00050		 |$M43795|

			 ENDP  ; |PhyWriteReg|

	EXPORT	|EnableMDIO|

  00000			 AREA	 |.pdata|, PDATA
|$T43807| DCD	|$LN9@EnableMDIO|
	DCD	0x40000a00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EnableMDIO| PROC

; 183  : {

  00000		 |$LN9@EnableMDIO|
  00000		 |$M43804|

; 184  :     UINT32 clkdiv;
; 185  :     clkdiv = (EMAC_MDIO_BUS_FREQ / EMAC_MDIO_CLOCK_FREQ) - 1;
; 186  :     if (clkdiv > 0xFF)
; 187  :     {
; 188  :         clkdiv = 0xFF;
; 189  :     }
; 190  :     g_pMdio->CONTROL = (clkdiv & 0xff) |
; 191  :         MDIO_CONTROL_ENABLE |
; 192  :         MDIO_CONTROL_FAULT |
; 193  :         MDIO_CONTROL_FAULTEN;

  00000	e59f301c	 ldr         r3, [pc, #0x1C]
  00004	e59f2014	 ldr         r2, [pc, #0x14]
  00008	e5931000	 ldr         r1, [r3]
  0000c	e5812004	 str         r2, [r1, #4]
  00010		 |$LL2@EnableMDIO|

; 194  : 
; 195  :     while (g_pMdio->CONTROL & MDIO_CONTROL_IDLE) ;

  00010	e5913004	 ldr         r3, [r1, #4]
  00014	e3130102	 tst         r3, #2, 2
  00018	1afffffc	 bne         |$LL2@EnableMDIO|

; 196  : }

  0001c	e12fff1e	 bx          lr
  00020		 |$LN10@EnableMDIO|
  00020		 |$LN11@EnableMDIO|
  00020	400c00ff	 DCD         0x400c00ff
  00024		 |$LN12@EnableMDIO|
  00024	00000000	 DCD         |g_pMdio|
  00028		 |$M43805|

			 ENDP  ; |EnableMDIO|

	EXPORT	|PhyInit|
	EXPORT	|??_C@_1DA@HMCKPEPE@?$AAN?$AAo?$AA?5?$AAE?$AAT?$AAH?$AA?5?$AAP?$AAH?$AAY?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?$CB?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|OALStall|
	IMPORT	|_CountLeadingZeros|

  00000			 AREA	 |.pdata|, PDATA
|$T43837| DCD	|$LN24@PhyInit|
	DCD	0x40002201

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@HMCKPEPE@?$AAN?$AAo?$AA?5?$AAE?$AAT?$AAH?$AA?5?$AAP?$AAH?$AAY?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?$CB?$AA?6?$AA?$AA@| DCB "N"
	DCB	0x0, "o", 0x0, " ", 0x0, "E", 0x0, "T", 0x0, "H", 0x0, " "
	DCB	0x0, "P", 0x0, "H", 0x0, "Y", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PhyInit| PROC

; 198  : {

  00000		 |$LN24@PhyInit|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43834|

; 199  : 
; 200  :     UINT32 i;
; 201  :     UINT8 phyAddr = (UINT8)-1;
; 202  :     //Initialize MDIO
; 203  :     EnableMDIO();

  00004	e59f5078	 ldr         r5, [pc, #0x78]
  00008	e59f3070	 ldr         r3, [pc, #0x70]
  0000c	e5952000	 ldr         r2, [r5]
  00010	e5823004	 str         r3, [r2, #4]
  00014		 |$LL9@PhyInit|
  00014	e5923004	 ldr         r3, [r2, #4]
  00018	e3130102	 tst         r3, #2, 2
  0001c	1afffffc	 bne         |$LL9@PhyInit|

; 204  : 
; 205  :     for (i = 0; i < 256; i++) {

  00020	e3a04000	 mov         r4, #0
  00024		 |$LL5@PhyInit|

; 206  :         if (g_pMdio->ALIVE)

  00024	e5923008	 ldr         r3, [r2, #8]
  00028	e3530000	 cmp         r3, #0
  0002c	1a000005	 bne         |$LN15@PhyInit|

; 207  :             break;
; 208  :         OALStall(10);

  00030	e3a0000a	 mov         r0, #0xA
  00034	eb000000	 bl          OALStall
  00038	e2844001	 add         r4, r4, #1
  0003c	e5952000	 ldr         r2, [r5]
  00040	e3540c01	 cmp         r4, #1, 24
  00044	3afffff6	 bcc         |$LL5@PhyInit|
  00048		 |$LN15@PhyInit|

; 209  :     }
; 210  : 
; 211  :     if (i >= 256) {

  00048	e3540c01	 cmp         r4, #1, 24
  0004c	3a000004	 bcc         |$LN1@PhyInit|

; 212  :         RETAILMSG(1, (L"No ETH PHY detected!!!\n"));

  00050	e59f0024	 ldr         r0, [pc, #0x24]
  00054	eb000000	 bl          NKDbgPrintfW

; 213  :         return  (UINT8) -1;

  00058	e3a000ff	 mov         r0, #0xFF

; 218  : }

  0005c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN1@PhyInit|

; 214  :     }
; 215  :     phyAddr = (UINT8) (31 - _CountLeadingZeros(g_pMdio->ALIVE));

  00064	e5920008	 ldr         r0, [r2, #8]
  00068	eb000000	 bl          _CountLeadingZeros
  0006c	e260301f	 rsb         r3, r0, #0x1F

; 216  : 
; 217  :     return phyAddr;

  00070	e20300ff	 and         r0, r3, #0xFF

; 218  : }

  00074	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN25@PhyInit|
  0007c		 |$LN26@PhyInit|
  0007c	00000000	 DCD         |??_C@_1DA@HMCKPEPE@?$AAN?$AAo?$AA?5?$AAE?$AAT?$AAH?$AA?5?$AAP?$AAH?$AAY?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?$CB?$AA?6?$AA?$AA@|
  00080		 |$LN27@PhyInit|
  00080	400c00ff	 DCD         0x400c00ff
  00084		 |$LN28@PhyInit|
  00084	00000000	 DCD         |g_pMdio|
  00088		 |$M43835|

			 ENDP  ; |PhyInit|

	EXPORT	|PhyReadIds|

  00000			 AREA	 |.pdata|, PDATA
|$T43851| DCD	|$LN8@PhyReadIds|
	DCD	0x40001802
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PhyReadIds| PROC

; 221  : {

  00000		 |$LN8@PhyReadIds|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43848|

; 222  :     UINT16 id1;
; 223  :     UINT16 id2;
; 224  :     if (!PhyReadReg(active_phy_addr, PHY_PHYIDR1, &id1)) 

  00008	e59f404c	 ldr         r4, [pc, #0x4C]
  0000c	e28d2000	 add         r2, sp, #0
  00010	e3a01002	 mov         r1, #2
  00014	e5d40000	 ldrb        r0, [r4]
  00018	eb000000	 bl          PhyReadReg
  0001c	e3500000	 cmp         r0, #0
  00020	1a000001	 bne         |$LN2@PhyReadIds|
  00024		 |$LN5@PhyReadIds|

; 225  :     {
; 226  :         return 0;

  00024	e3a00000	 mov         r0, #0
  00028	ea000008	 b           |$LN3@PhyReadIds|
  0002c		 |$LN2@PhyReadIds|

; 227  :     }
; 228  :     if (!PhyReadReg(active_phy_addr, PHY_PHYIDR2, &id2)) 

  0002c	e5d40000	 ldrb        r0, [r4]
  00030	e28d2002	 add         r2, sp, #2
  00034	e3a01003	 mov         r1, #3
  00038	eb000000	 bl          PhyReadReg
  0003c	e3500000	 cmp         r0, #0

; 229  :     {
; 230  :         return 0;

  00040	0afffff7	 beq         |$LN5@PhyReadIds|

; 231  :     }
; 232  :     return (id1 << 16) | id2;

  00044	e1dd20b0	 ldrh        r2, [sp]
  00048	e1dd30b2	 ldrh        r3, [sp, #2]
  0004c	e1830802	 orr         r0, r3, r2, lsl #16
  00050		 |$LN3@PhyReadIds|

; 233  : }

  00050	e28dd004	 add         sp, sp, #4
  00054	e8bd4010	 ldmia       sp!, {r4, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$LN9@PhyReadIds|
  0005c		 |$LN10@PhyReadIds|
  0005c	00000000	 DCD         |active_phy_addr|
  00060		 |$M43849|

			 ENDP  ; |PhyReadIds|

	EXPORT	|PhySoftReset|

  00000			 AREA	 |.pdata|, PDATA
|$T43861| DCD	|$LN9@PhySoftRes|
	DCD	0x40001202
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PhySoftReset| PROC

; 236  : {

  00000		 |$LN9@PhySoftRes|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43858|

; 237  :     UINT16 tmp;
; 238  :     PhyWriteReg(active_phy_addr, PHY_BMCR, (1 << 15));

  00008	e59f4034	 ldr         r4, [pc, #0x34]
  0000c	e3a02902	 mov         r2, #2, 18
  00010	e3a01000	 mov         r1, #0
  00014	e5d40000	 ldrb        r0, [r4]
  00018	eb000000	 bl          PhyWriteReg
  0001c		 |$LL3@PhySoftRes|

; 239  :     do
; 240  :     {
; 241  :         PhyReadReg(active_phy_addr, PHY_BMCR , &tmp);

  0001c	e5d40000	 ldrb        r0, [r4]
  00020	e28d2000	 add         r2, sp, #0
  00024	e3a01000	 mov         r1, #0
  00028	eb000000	 bl          PhyReadReg

; 242  : 
; 243  :     }while (tmp & (1 << 15));	

  0002c	e1dd30b0	 ldrh        r3, [sp]
  00030	e3130902	 tst         r3, #2, 18
  00034	1afffff8	 bne         |$LL3@PhySoftRes|

; 244  : }

  00038	e28dd004	 add         sp, sp, #4
  0003c	e8bd4010	 ldmia       sp!, {r4, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$LN10@PhySoftRes|
  00044		 |$LN11@PhySoftRes|
  00044	00000000	 DCD         |active_phy_addr|
  00048		 |$M43859|

			 ENDP  ; |PhySoftReset|


  00000			 AREA	 |.pdata|, PDATA
|$T43872| DCD	|$LN6@LinkIsOK|
	DCD	0x40001002
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LinkIsOK| PROC

; 248  : {

  00000		 |$LN6@LinkIsOK|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43869|

; 249  :     UINT16	tmp;
; 250  : 
; 251  :     if (PhyReadReg(active_phy_addr, PHY_BMSR, &tmp) && (tmp & 0x04)) 

  00008	e59f302c	 ldr         r3, [pc, #0x2C]
  0000c	e28d2000	 add         r2, sp, #0
  00010	e3a01001	 mov         r1, #1
  00014	e5d30000	 ldrb        r0, [r3]
  00018	eb000000	 bl          PhyReadReg
  0001c	e3500000	 cmp         r0, #0
  00020	11dd30b0	 ldrneh      r3, [sp]
  00024	13130004	 tstne       r3, #4

; 252  :     {
; 253  :         return TRUE;

  00028	13a00001	 movne       r0, #1

; 254  :     }
; 255  : 
; 256  :     return FALSE;

  0002c	03a00000	 moveq       r0, #0

; 257  : }

  00030	e28dd004	 add         sp, sp, #4
  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$LN7@LinkIsOK|
  0003c		 |$LN8@LinkIsOK|
  0003c	00000000	 DCD         |active_phy_addr|
  00040		 |$M43870|

			 ENDP  ; |LinkIsOK|


  00000			 AREA	 |.pdata|, PDATA
|$T43894| DCD	|$LN18@GetLinkSta|
	DCD	0x40002802
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetLinkStatus| PROC

; 260  : {

  00000		 |$LN18@GetLinkSta|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43891|
  00008	e1a05001	 mov         r5, r1
  0000c	e1a04000	 mov         r4, r0

; 261  :     UINT16	anlpar;
; 262  : 
; 263  :     if (LinkIsOK() == FALSE)

  00010	e59f6084	 ldr         r6, [pc, #0x84]
  00014	e28d2000	 add         r2, sp, #0
  00018	e3a01001	 mov         r1, #1
  0001c	e5d60000	 ldrb        r0, [r6]
  00020	eb000000	 bl          PhyReadReg
  00024	e3500000	 cmp         r0, #0
  00028	0a000017	 beq         |$LN11@GetLinkSta|
  0002c	e1dd30b0	 ldrh        r3, [sp]
  00030	e3130004	 tst         r3, #4
  00034	0a000014	 beq         |$LN11@GetLinkSta|

; 265  : 
; 266  :     if (PhyReadReg(active_phy_addr,PHY_ANLPAR,&anlpar) == FALSE)

  00038	e5d60000	 ldrb        r0, [r6]
  0003c	e28d2000	 add         r2, sp, #0
  00040	e3a01005	 mov         r1, #5
  00044	eb000000	 bl          PhyReadReg
  00048	e3500000	 cmp         r0, #0

; 267  :         return FALSE;

  0004c	0a00000e	 beq         |$LN11@GetLinkSta|

; 268  : 
; 269  :     if (pFullDuplex)

  00050	e1dd30b0	 ldrh        r3, [sp]
  00054	e3550000	 cmp         r5, #0
  00058	0a000003	 beq         |$LN4@GetLinkSta|

; 270  :     {
; 271  :         if (anlpar & (GEN_PHY_ANEG_100DUP | GEN_PHY_ANEG_10DUP ) ) 

  0005c	e3130d05	 tst         r3, #5, 26

; 272  :         {
; 273  :             *pFullDuplex = TRUE;			

  00060	13a02001	 movne       r2, #1

; 274  :         } 
; 275  :         else 
; 276  :         {
; 277  :             *pFullDuplex = FALSE;

  00064	03a02000	 moveq       r2, #0
  00068	e5852000	 str         r2, [r5]
  0006c		 |$LN4@GetLinkSta|

; 278  :         }
; 279  :     }
; 280  : 
; 281  :     if (pSpeed)

  0006c	e3540000	 cmp         r4, #0
  00070	0a000003	 beq         |$LN1@GetLinkSta|

; 282  :     {
; 283  :         if (anlpar & (GEN_PHY_ANEG_100DUP | GEN_PHY_ANEG_100TX ) ) 

  00074	e3130d06	 tst         r3, #6, 26

; 284  :         {
; 285  :             *pSpeed = SPEED_100MBPS;

  00078	13a03064	 movne       r3, #0x64

; 286  : 
; 287  :         } else 
; 288  :         {
; 289  :             *pSpeed = SPEED_10MBPS;

  0007c	03a0300a	 moveq       r3, #0xA
  00080	e5843000	 str         r3, [r4]
  00084		 |$LN1@GetLinkSta|

; 290  :         }
; 291  :     }
; 292  :     return TRUE;

  00084	e3a00001	 mov         r0, #1
  00088	ea000000	 b           |$LN9@GetLinkSta|

; 261  :     UINT16	anlpar;
; 262  : 
; 263  :     if (LinkIsOK() == FALSE)

  0008c		 |$LN11@GetLinkSta|

; 264  :         return FALSE;

  0008c	e3a00000	 mov         r0, #0
  00090		 |$LN9@GetLinkSta|

; 293  : }

  00090	e28dd004	 add         sp, sp, #4
  00094	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN19@GetLinkSta|
  0009c		 |$LN20@GetLinkSta|
  0009c	00000000	 DCD         |active_phy_addr|
  000a0		 |$M43892|

			 ENDP  ; |GetLinkStatus|


  00000			 AREA	 |.pdata|, PDATA
|$T43920| DCD	|$LN18@PhyAutoNeg|
	DCD	0x40006102
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PhyAutoNegociate| PROC

; 297  : {

  00000		 |$LN18@PhyAutoNeg|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43917|

; 298  :     UINT16	tmp,val;
; 299  :     unsigned long cntr =0;
; 300  :     if (!PhyReadReg(active_phy_addr, PHY_BMCR, &tmp))

  00008	e59f4170	 ldr         r4, [pc, #0x170]
  0000c	e28d2002	 add         r2, sp, #2
  00010	e3a01000	 mov         r1, #0
  00014	e5d40000	 ldrb        r0, [r4]
  00018	e3a05000	 mov         r5, #0
  0001c	eb000000	 bl          PhyReadReg
  00020	e3500000	 cmp         r0, #0

; 301  :     {
; 302  :         return(0);

  00024	0a000051	 beq         |$LN11@PhyAutoNeg|

; 303  :     }
; 304  : 
; 305  :     val = tmp | GEN_PHY_CTRL_DUP | GEN_PHY_CTRL_ENA_ANEG | GEN_PHY_CTRL_SPD_SEL ;

  00028	e1dd30b2	 ldrh        r3, [sp, #2]

; 306  :     PhyWriteReg(active_phy_addr, PHY_BMCR, val);

  0002c	e5d40000	 ldrb        r0, [r4]
  00030	e3a01000	 mov         r1, #0
  00034	e3832c31	 orr         r2, r3, #0x31, 24
  00038	e1cd20b0	 strh        r2, [sp]
  0003c	eb000000	 bl          PhyWriteReg

; 307  :     PhyReadReg(active_phy_addr, PHY_BMCR, &val);

  00040	e5d40000	 ldrb        r0, [r4]
  00044	e28d2000	 add         r2, sp, #0
  00048	e3a01000	 mov         r1, #0
  0004c	eb000000	 bl          PhyReadReg

; 308  : 
; 309  :     PhyReadReg(active_phy_addr,PHY_ANAR, &val);

  00050	e5d40000	 ldrb        r0, [r4]
  00054	e28d2000	 add         r2, sp, #0
  00058	e3a01004	 mov         r1, #4
  0005c	eb000000	 bl          PhyReadReg

; 310  :     val |= ( GEN_PHY_ANEG_100DUP | GEN_PHY_ANEG_100TX | GEN_PHY_ANEG_10DUP | GEN_PHY_ANEG_10TX );
; 311  :     PhyWriteReg(active_phy_addr, PHY_ANAR, val);

  00060	e1dd30b0	 ldrh        r3, [sp]
  00064	e5d40000	 ldrb        r0, [r4]
  00068	e3a01004	 mov         r1, #4
  0006c	e3832e1e	 orr         r2, r3, #0x1E, 28
  00070	eb000000	 bl          PhyWriteReg

; 312  :     PhyReadReg(active_phy_addr,PHY_ANAR, &val);

  00074	e5d40000	 ldrb        r0, [r4]
  00078	e28d2000	 add         r2, sp, #0
  0007c	e3a01004	 mov         r1, #4
  00080	eb000000	 bl          PhyReadReg

; 313  : 
; 314  : 
; 315  :     PhyReadReg(active_phy_addr, PHY_BMCR, &tmp);

  00084	e5d40000	 ldrb        r0, [r4]
  00088	e28d2002	 add         r2, sp, #2
  0008c	e3a01000	 mov         r1, #0
  00090	eb000000	 bl          PhyReadReg

; 316  : 
; 317  :     /* Restart Auto_negotiation  */
; 318  :     tmp |= PHY_BMCR_RST_NEG;

  00094	e1dd30b2	 ldrh        r3, [sp, #2]

; 319  :     PhyWriteReg(active_phy_addr, PHY_BMCR, tmp);

  00098	e5d40000	 ldrb        r0, [r4]
  0009c	e3a01000	 mov         r1, #0
  000a0	e3832c02	 orr         r2, r3, #2, 24
  000a4	e1cd20b2	 strh        r2, [sp, #2]
  000a8	eb000000	 bl          PhyWriteReg
  000ac	e3a06c27	 mov         r6, #0x27, 24
  000b0		 |$LL7@PhyAutoNeg|

; 320  : 
; 321  :     /*check AutoNegotiate complete */
; 322  :     do{
; 323  :         OALStall(10000);

  000b0	e3860010	 orr         r0, r6, #0x10
  000b4	eb000000	 bl          OALStall

; 324  :         cntr++;
; 325  : 
; 326  :         if (PhyReadReg(active_phy_addr, PHY_BMSR, &tmp)){

  000b8	e5d40000	 ldrb        r0, [r4]
  000bc	e28d2002	 add         r2, sp, #2
  000c0	e3a01001	 mov         r1, #1
  000c4	e2855001	 add         r5, r5, #1
  000c8	eb000000	 bl          PhyReadReg
  000cc	e3500000	 cmp         r0, #0
  000d0	0a000002	 beq         |$LN6@PhyAutoNeg|

; 327  :             if(tmp & PHY_BMSR_AUTN_COMP)

  000d4	e1dd30b2	 ldrh        r3, [sp, #2]
  000d8	e3130020	 tst         r3, #0x20
  000dc	1a000001	 bne         |$LN5@PhyAutoNeg|
  000e0		 |$LN6@PhyAutoNeg|

; 328  :             {
; 329  :                 //autoneg complete
; 330  :                 break;
; 331  :             }
; 332  :         }
; 333  :     }while(cntr < 200 );

  000e0	e35500c8	 cmp         r5, #0xC8
  000e4	3afffff1	 bcc         |$LL7@PhyAutoNeg|
  000e8		 |$LN5@PhyAutoNeg|

; 334  : 
; 335  :     if (!PhyReadReg(active_phy_addr, PHY_BMSR, &tmp))

  000e8	e5d40000	 ldrb        r0, [r4]
  000ec	e28d2002	 add         r2, sp, #2
  000f0	e3a01001	 mov         r1, #1
  000f4	eb000000	 bl          PhyReadReg
  000f8	e3500000	 cmp         r0, #0

; 336  :         return(0);

  000fc	0a00001b	 beq         |$LN11@PhyAutoNeg|

; 337  : 
; 338  :     PhyReadReg(active_phy_addr,PHY_BMCR,&val);

  00100	e5d40000	 ldrb        r0, [r4]
  00104	e28d2000	 add         r2, sp, #0
  00108	e3a01000	 mov         r1, #0
  0010c	eb000000	 bl          PhyReadReg

; 339  : 
; 340  :     PhyReadReg(active_phy_addr,PHY_ANAR,&val);

  00110	e5d40000	 ldrb        r0, [r4]
  00114	e28d2000	 add         r2, sp, #0
  00118	e3a01004	 mov         r1, #4
  0011c	eb000000	 bl          PhyReadReg

; 341  : 
; 342  :     PhyReadReg(active_phy_addr,PHY_ANLPAR,&val);

  00120	e5d40000	 ldrb        r0, [r4]
  00124	e28d2000	 add         r2, sp, #0
  00128	e3a01005	 mov         r1, #5
  0012c	eb000000	 bl          PhyReadReg

; 343  : 
; 344  :     PhyReadReg(active_phy_addr,PHY_ANER,&val);

  00130	e5d40000	 ldrb        r0, [r4]
  00134	e28d2000	 add         r2, sp, #0
  00138	e3a01006	 mov         r1, #6
  0013c	eb000000	 bl          PhyReadReg

; 345  : 
; 346  : 
; 347  :     if (!(tmp & PHY_BMSR_AUTN_COMP))

  00140	e1dd30b2	 ldrh        r3, [sp, #2]
  00144	e3130020	 tst         r3, #0x20

; 348  :         return(0);

  00148	0a000008	 beq         |$LN11@PhyAutoNeg|

; 349  : 
; 350  :     return(LinkIsOK());

  0014c	e5d40000	 ldrb        r0, [r4]
  00150	e28d2002	 add         r2, sp, #2
  00154	e3a01001	 mov         r1, #1
  00158	eb000000	 bl          PhyReadReg
  0015c	e3500000	 cmp         r0, #0
  00160	11dd30b2	 ldrneh      r3, [sp, #2]
  00164	13130004	 tstne       r3, #4
  00168	13a00001	 movne       r0, #1
  0016c	1a000000	 bne         |$LN12@PhyAutoNeg|
  00170		 |$LN11@PhyAutoNeg|
  00170	e3a00000	 mov         r0, #0
  00174		 |$LN12@PhyAutoNeg|

; 351  : }

  00174	e28dd004	 add         sp, sp, #4
  00178	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0017c	e12fff1e	 bx          lr
  00180		 |$LN19@PhyAutoNeg|
  00180		 |$LN20@PhyAutoNeg|
  00180	00000000	 DCD         |active_phy_addr|
  00184		 |$M43918|

			 ENDP  ; |PhyAutoNegociate|

	EXPORT	|EMACInit|
	EXPORT	|??_C@_1DM@HDLLGNPK@?$AAL?$AAi?$AAn?$AAk?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?9?$AAd?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?5?$AA?$CF?$AAd?$AA?5?$AAM?$AAB?$AAi?$AAt?$AAs?$AA?1?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19OMCCBHAG@?$AAH?$AAa?$AAl?$AAf?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19GFKHPIAA@?$AAF?$AAu?$AAl?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@POIKKPOP@?$AAA?$AAu?$AAt?$AAo?$AAn?$AAe?$AAg?$AAo?$AAc?$AAi?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?5?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?5?$AAt?$AAh@| [ DATA ] ; `string'
	IMPORT	|OALVAtoPA|
	IMPORT	|OALPAtoVA|
	IMPORT	|memset|

  00018			 AREA	 |.bss|, NOINIT
|g_pEmacMod| %	0x4

  00000			 AREA	 |.pdata|, PDATA
|$T44011| DCD	|$LN86@EMACInit|
	DCD	0x40010602

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@HDLLGNPK@?$AAL?$AAi?$AAn?$AAk?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?9?$AAd?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?5?$AA?$CF?$AAd?$AA?5?$AAM?$AAB?$AAi?$AAt?$AAs?$AA?1?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "L"
	DCB	0x0, "i", 0x0, "n", 0x0, "k", 0x0, " ", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, "-", 0x0, "d", 0x0, "u", 0x0, "p"
	DCB	0x0, "l", 0x0, "e", 0x0, "x", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "M", 0x0, "B", 0x0, "i", 0x0, "t", 0x0, "s"
	DCB	0x0, "/", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19OMCCBHAG@?$AAH?$AAa?$AAl?$AAf?$AA?$AA@| DCB "H", 0x0, "a", 0x0, "l"
	DCB	0x0, "f", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19GFKHPIAA@?$AAF?$AAu?$AAl?$AAl?$AA?$AA@| DCB "F", 0x0, "u", 0x0, "l"
	DCB	0x0, "l", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@POIKKPOP@?$AAA?$AAu?$AAt?$AAo?$AAn?$AAe?$AAg?$AAo?$AAc?$AAi?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?5?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?5?$AAt?$AAh@| DCB "A"
	DCB	0x0, "u", 0x0, "t", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "g"
	DCB	0x0, "o", 0x0, "c", 0x0, "i", 0x0, "a", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, " ", 0x0, "C"
	DCB	0x0, "h", 0x0, "e", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "t"
	DCB	0x0, "h", 0x0, "e", 0x0, " ", 0x0, "e", 0x0, "t", 0x0, "h"
	DCB	0x0, "e", 0x0, "r", 0x0, "n", 0x0, "e", 0x0, "t", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EMACInit| PROC

; 355  : {

  00000		 |$LN86@EMACInit|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M44008|
  00008	e1a05002	 mov         r5, r2
  0000c	e1a02000	 mov         r2, r0

; 356  :     DWORD phyID;
; 357  :     REG32* addr;
; 358  :     int i;
; 359  :     BYTE* byteMac = (BYTE*) mac;
; 360  :     DWORD oldMac[2];
; 361  :     EMAC_DESC* rx_desc;
; 362  :     DWORD speed;
; 363  :     BOOL fullduplex;
; 364  : 
; 365  :     UNREFERENCED_PARAMETER(offset);
; 366  : 
; 367  :     if ((DWORD) pAddress < 0x80000000)

  00010	e3520102	 cmp         r2, #2, 2
  00014	2a000002	 bcs         |$LN32@EMACInit|

; 368  :     {
; 369  :         pAddress = OALPAtoUA((DWORD)pAddress);

  00018	e3a01000	 mov         r1, #0
  0001c	eb000000	 bl          OALPAtoVA
  00020	e1a02000	 mov         r2, r0
  00024		 |$LN32@EMACInit|

; 370  :     }
; 371  : 
; 372  :     g_pEmacMod	= (EMAC_MODULE_REGS *)	(pAddress + 0x10000);

  00024	e59f63e8	 ldr         r6, [pc, #0x3E8]

; 373  :     g_pMdio		= (EMAC_MDIO_REGS *)	(pAddress + 0x30000);
; 374  :     g_pEmacSys	= (EMAC_SUBSYS_REGS *)	(pAddress);
; 375  :     startOfCPPIArea = (pAddress + 0x20000);
; 376  :     emac_rx_desc = (EMAC_DESC*)	(startOfCPPIArea);
; 377  :     emac_tx_desc = (EMAC_DESC*)	(startOfCPPIArea + sizeof(EMAC_DESC)*EMAC_MAX_RX_BUFFERS);

  00028	e59fe3e0	 ldr         lr, [pc, #0x3E0]
  0002c	e2820802	 add         r0, r2, #2, 16
  00030	e59fb3d4	 ldr         r11, [pc, #0x3D4]
  00034	e59f83ac	 ldr         r8, [pc, #0x3AC]
  00038	e2801080	 add         r1, r0, #0x80
  0003c	e5862008	 str         r2, [r6, #8]
  00040	e58e1000	 str         r1, [lr]
  00044	e2824801	 add         r4, r2, #1, 16
  00048	e2823803	 add         r3, r2, #3, 16

; 378  :     memset(startOfCPPIArea,0,8*1024);

  0004c	e3a02a02	 mov         r2, #2, 20
  00050	e3a01000	 mov         r1, #0
  00054	e8860018	 stmia       r6, {r3, r4}
  00058	e58b0000	 str         r0, [r11]
  0005c	e5880000	 str         r0, [r8]
  00060	eb000000	 bl          memset

; 379  : 
; 380  :     g_pEmacMod->MACINDEX = 0;

  00064	e3a09000	 mov         r9, #0
  00068	e5849508	 str         r9, [r4, #0x508]

; 381  :     oldMac[0] = g_pEmacMod->MACSRCADDRLO;

  0006c	e59431d0	 ldr         r3, [r4, #0x1D0]

; 382  :     oldMac[1] = g_pEmacMod->MACSRCADDRHI;

  00070	e594e1d4	 ldr         lr, [r4, #0x1D4]
  00074	e1b04003	 movs        r4, r3

; 383  : 
; 384  :     if ((oldMac[0]!=0)||(oldMac[1]!=0))

  00078	1a000001	 bne         |$LN30@EMACInit|
  0007c	e35e0000	 cmp         lr, #0
  00080	0a000009	 beq         |$LN31@EMACInit|
  00084		 |$LN30@EMACInit|

; 385  :     {
; 386  :         byteMac[0]=(BYTE) (oldMac[1] >> 0);
; 387  :         byteMac[1]=(BYTE) (oldMac[1] >> 8);

  00084	e1a0342e	 mov         r3, lr, lsr #8

; 388  :         byteMac[2]=(BYTE) (oldMac[1] >> 16);

  00088	e1a0282e	 mov         r2, lr, lsr #16

; 389  :         byteMac[3]=(BYTE) (oldMac[1] >> 24);

  0008c	e1a01c2e	 mov         r1, lr, lsr #24

; 390  :         byteMac[4]=(BYTE) (oldMac[0] >> 0);
; 391  :         byteMac[5]=(BYTE) (oldMac[0] >> 8);

  00090	e1a00424	 mov         r0, r4, lsr #8
  00094	e5c53001	 strb        r3, [r5, #1]
  00098	e5c52002	 strb        r2, [r5, #2]
  0009c	e5c51003	 strb        r1, [r5, #3]
  000a0	e5c50005	 strb        r0, [r5, #5]
  000a4	e5c5e000	 strb        lr, [r5]
  000a8	e5c54004	 strb        r4, [r5, #4]
  000ac		 |$LN31@EMACInit|

; 392  :     }
; 393  : 
; 394  :     active_phy_addr = PhyInit();

  000ac	eb000000	 bl          PhyInit
  000b0	e59f7344	 ldr         r7, [pc, #0x344]

; 395  :     if (active_phy_addr == -1)

  000b4	e3700001	 cmn         r0, #1
  000b8	e5c70000	 strb        r0, [r7]

; 396  :     {
; 397  :         return FALSE;

  000bc	0a000091	 beq         |$LN82@EMACInit|

; 398  :     }
; 399  :     phyID = PhyReadIds();

  000c0	eb000000	 bl          PhyReadIds

; 400  : 
; 401  :     switch (phyID) {
; 402  :         default:
; 403  :             break;
; 404  :     }
; 405  : 
; 406  :     if (LinkIsOK() == FALSE)

  000c4	e5d70000	 ldrb        r0, [r7]
  000c8	e28d2000	 add         r2, sp, #0
  000cc	e3a01001	 mov         r1, #1
  000d0	eb000000	 bl          PhyReadReg
  000d4	e3500000	 cmp         r0, #0
  000d8	0a000002	 beq         |$LN45@EMACInit|
  000dc	e1dd30b0	 ldrh        r3, [sp]
  000e0	e3130004	 tst         r3, #4
  000e4	1a000000	 bne         |$LN25@EMACInit|
  000e8		 |$LN45@EMACInit|

; 407  :     {
; 408  :         /* Soft reset the PHY */
; 409  :         PhySoftReset();

  000e8	eb000000	 bl          PhySoftReset
  000ec		 |$LN25@EMACInit|

; 410  :     }
; 411  : 
; 412  :     /* Reset EMAC module and disable interrupts in wrapper */
; 413  :     g_pEmacMod->SOFTRESET = 1;

  000ec	e596e004	 ldr         lr, [r6, #4]
  000f0	e3a01001	 mov         r1, #1
  000f4	e58e1174	 str         r1, [lr, #0x174]
  000f8		 |$LL24@EMACInit|

; 414  :     while (g_pEmacMod->SOFTRESET != 0);

  000f8	e59e3174	 ldr         r3, [lr, #0x174]
  000fc	e3530000	 cmp         r3, #0
  00100	1afffffc	 bne         |$LL24@EMACInit|

; 415  :     g_pEmacSys->SOFTRESET = 1;

  00104	e5962008	 ldr         r2, [r6, #8]
  00108	e5821004	 str         r1, [r2, #4]
  0010c		 |$LL22@EMACInit|

; 416  :     while (g_pEmacSys->SOFTRESET != 0);

  0010c	e5923004	 ldr         r3, [r2, #4]
  00110	e3530000	 cmp         r3, #0
  00114	1afffffc	 bne         |$LL22@EMACInit|

; 417  : 
; 418  :     g_pEmacSys->C0RXEN = g_pEmacSys->C1RXEN = g_pEmacSys->C2RXEN = 0;

  00118	e5829034	 str         r9, [r2, #0x34]
  0011c	e5829024	 str         r9, [r2, #0x24]
  00120	e5829014	 str         r9, [r2, #0x14]

; 419  :     g_pEmacSys->C0TXEN = g_pEmacSys->C1TXEN = g_pEmacSys->C2TXEN = 0;

  00124	e5829038	 str         r9, [r2, #0x38]
  00128	e5829028	 str         r9, [r2, #0x28]
  0012c	e5829018	 str         r9, [r2, #0x18]

; 420  :     g_pEmacSys->C0MISCEN = g_pEmacSys->C1MISCEN = g_pEmacSys->C2MISCEN = 0;

  00130	e582903c	 str         r9, [r2, #0x3C]
  00134	e582902c	 str         r9, [r2, #0x2C]
  00138	e582901c	 str         r9, [r2, #0x1C]

; 421  : 
; 422  :     g_pEmacMod->TXCONTROL = 0x01;

  0013c	e58e1004	 str         r1, [lr, #4]

; 423  :     g_pEmacMod->RXCONTROL = 0x01;
; 424  : 
; 425  :     /* Set MAC Addresses & Init multicast Hash to 0 (disable any multicast receive) */
; 426  :     /* Using channel 0 only - other channels are disabled */
; 427  :     for (i = 0; i < 8; i++) {

  00140	e58e1014	 str         r1, [lr, #0x14]
  00144	e3a04000	 mov         r4, #0
  00148		 |$LL20@EMACInit|

; 428  :         g_pEmacMod->MACINDEX = i;

  00148	e58e4508	 str         r4, [lr, #0x508]

; 429  :         g_pEmacMod->MACADDRLO =	(byteMac[5] << 8) |(byteMac[4] << 0) | (1 << 19) | (1 << 20); /* bits 8-0 */;

  0014c	e5d53005	 ldrb        r3, [r5, #5]
  00150	e5d52004	 ldrb        r2, [r5, #4]
  00154	e2844001	 add         r4, r4, #1
  00158	e3833b06	 orr         r3, r3, #6, 22
  0015c	e1823403	 orr         r3, r2, r3, lsl #8
  00160	e58e3500	 str         r3, [lr, #0x500]

; 430  :         g_pEmacMod->MACADDRHI = (byteMac[3] << 24) |(byteMac[2] << 16) | 
; 431  :             (byteMac[1] << 8)  |(byteMac[0] << 0);

  00164	e5d50003	 ldrb        r0, [r5, #3]
  00168	e5d53002	 ldrb        r3, [r5, #2]
  0016c	e5d52001	 ldrb        r2, [r5, #1]
  00170	e5d51000	 ldrb        r1, [r5]
  00174	e1833400	 orr         r3, r3, r0, lsl #8
  00178	e1823403	 orr         r3, r2, r3, lsl #8
  0017c	e1813403	 orr         r3, r1, r3, lsl #8
  00180	e58e3504	 str         r3, [lr, #0x504]
  00184	e3540008	 cmp         r4, #8
  00188	baffffee	 blt         |$LL20@EMACInit|

; 432  :     }
; 433  : 
; 434  :     g_pEmacMod->MACHASH1 = 0;

  0018c	e58e91d8	 str         r9, [lr, #0x1D8]

; 435  :     g_pEmacMod->MACHASH2 = 0;

  00190	e58e91dc	 str         r9, [lr, #0x1DC]

; 436  : 
; 437  :     /* Set source MAC address - REQUIRED for pause frames */
; 438  :     g_pEmacMod->MACSRCADDRLO=	(byteMac[5] << 8) |(byteMac[4] << 0);

  00194	e5d52005	 ldrb        r2, [r5, #5]
  00198	e5d53004	 ldrb        r3, [r5, #4]

; 439  :     g_pEmacMod->MACSRCADDRHI = (byteMac[3] << 24) |(byteMac[2] << 16) | 
; 440  :         (byteMac[1] << 8)  |(byteMac[0] << 0);

  0019c	e1833402	 orr         r3, r3, r2, lsl #8
  001a0	e58e31d0	 str         r3, [lr, #0x1D0]
  001a4	e5d50003	 ldrb        r0, [r5, #3]
  001a8	e5d53002	 ldrb        r3, [r5, #2]
  001ac	e5d52001	 ldrb        r2, [r5, #1]
  001b0	e5d51000	 ldrb        r1, [r5]
  001b4	e1833400	 orr         r3, r3, r0, lsl #8
  001b8	e1823403	 orr         r3, r2, r3, lsl #8
  001bc	e1813403	 orr         r3, r1, r3, lsl #8
  001c0	e58e31d4	 str         r3, [lr, #0x1D4]

; 441  : 
; 442  : 
; 443  :     /* Set DMA 8 TX / 8 RX Head pointers to 0 */
; 444  :     addr = &g_pEmacMod->TX0HDP;

  001c4	e28e3c06	 add         r3, lr, #6, 24
  001c8	e3a02010	 mov         r2, #0x10
  001cc		 |$LL17@EMACInit|

; 445  :     for(i = 0; i < 16; i++)
; 446  :         *addr++ = 0;

  001cc	e4839004	 str         r9, [r3], #4
  001d0	e2522001	 subs        r2, r2, #1
  001d4	1afffffc	 bne         |$LL17@EMACInit|

; 447  : 
; 448  :     addr = &g_pEmacMod->RX0HDP;

  001d8	e28e3e62	 add         r3, lr, #0x62, 28
  001dc	e3a02010	 mov         r2, #0x10
  001e0		 |$LL14@EMACInit|

; 449  :     for(i = 0; i < 16; i++)
; 450  :         *addr++ = 0;

  001e0	e4839004	 str         r9, [r3], #4
  001e4	e2522001	 subs        r2, r2, #1
  001e8	1afffffc	 bne         |$LL14@EMACInit|

; 451  : 
; 452  :     /* Clear Statistics (do this before setting MacControl register) */
; 453  :     addr = &g_pEmacMod->RXGOODFRAMES;

  001ec	e28e3c02	 add         r3, lr, #2, 24
  001f0	e3a02024	 mov         r2, #0x24
  001f4		 |$LL11@EMACInit|

; 454  :     for(i = 0; i < EMAC_STATS_REGS; i++)
; 455  :         *addr++ = 0;

  001f4	e4839004	 str         r9, [r3], #4
  001f8	e2522001	 subs        r2, r2, #1
  001fc	1afffffc	 bne         |$LL11@EMACInit|

; 456  : 
; 457  :     g_pEmacMod->MACHASH1 = 0;

  00200	e58e91d8	 str         r9, [lr, #0x1D8]

; 458  :     g_pEmacMod->MACHASH2 = 0;

  00204	e58e91dc	 str         r9, [lr, #0x1DC]

; 459  : 
; 460  : 
; 461  : 
; 462  :     /* Create RX queue and set receive process in place */
; 463  :     rx_desc = emac_rx_desc;

  00208	e5984000	 ldr         r4, [r8]

; 464  :     emac_rx_active_head = emac_rx_desc;
; 465  :     for (i = 0; i < EMAC_MAX_RX_BUFFERS; i++) {

  0020c	e59fa1f4	 ldr         r10, [pc, #0x1F4]
  00210	e3a03c05	 mov         r3, #5, 24
  00214	e59f91e8	 ldr         r9, [pc, #0x1E8]
  00218	e586400c	 str         r4, [r6, #0xC]
  0021c	e3a05000	 mov         r5, #0
  00220	e38380ea	 orr         r8, r3, #0xEA
  00224	e3a07000	 mov         r7, #0
  00228		 |$LL8@EMACInit|

; 466  :         if (i != (EMAC_MAX_RX_BUFFERS -1))

  00228	e3550007	 cmp         r5, #7
  0022c	0a000008	 beq         |$LN5@EMACInit|

; 467  :         {
; 468  :             rx_desc->next = BD_TO_HW( (UINT32)(rx_desc + 1) );

  00230	e2943010	 adds        r3, r4, #0x10
  00234	03a03000	 moveq       r3, #0
  00238	05843000	 streq       r3, [r4]
  0023c	0a000006	 beq         |$LN4@EMACInit|
  00240	e59b3000	 ldr         r3, [r11]
  00244	e0443003	 sub         r3, r4, r3
  00248	e0833009	 add         r3, r3, r9
  0024c	e5843000	 str         r3, [r4]

; 469  :         }
; 470  :         else

  00250	ea000001	 b           |$LN4@EMACInit|
  00254		 |$LN5@EMACInit|

; 471  :         {
; 472  :             emac_rx_active_tail = rx_desc;

  00254	e5864010	 str         r4, [r6, #0x10]

; 473  :             /* Set the last descriptor's "next" parameter to 0 to end the RX desc list */
; 474  :             rx_desc->next = 0;

  00258	e5847000	 str         r7, [r4]
  0025c		 |$LN4@EMACInit|

; 475  :         }
; 476  :         rx_desc->buffer = OALVAtoPA(dmaBuffer + (i * (EMAC_MAX_ETHERNET_PKT_SIZE + EMAC_PKT_ALIGN)));

  0025c	e59a2000	 ldr         r2, [r10]
  00260	e0853085	 add         r3, r5, r5, lsl #1
  00264	e0820483	 add         r0, r2, r3, lsl #9
  00268	eb000000	 bl          OALVAtoPA

; 477  :         rx_desc->BufOffLen = EMAC_MAX_ETHERNET_PKT_SIZE;
; 478  :         rx_desc->PktFlgLen = EMAC_DSC_FLAG_OWNER;

  0026c	e3a03202	 mov         r3, #2, 4
  00270	e2855001	 add         r5, r5, #1
  00274	e584300c	 str         r3, [r4, #0xC]
  00278	e5840004	 str         r0, [r4, #4]
  0027c	e5848008	 str         r8, [r4, #8]

; 479  :         rx_desc++;

  00280	e2844010	 add         r4, r4, #0x10
  00284	e3550008	 cmp         r5, #8
  00288	baffffe6	 blt         |$LL8@EMACInit|

; 480  :     }
; 481  : 
; 482  : 
; 483  : 
; 484  :     /* Enable TX/RX */
; 485  :     g_pEmacMod->RXMAXLEN = EMAC_MAX_ETHERNET_PKT_SIZE;

  0028c	e5964004	 ldr         r4, [r6, #4]

; 486  :     g_pEmacMod->RXBUFFEROFFSET = 0;
; 487  : 
; 488  :     /* No fancy configs - Use this for promiscous for debug - EMAC_RXMBPENABLE_RXCAFEN_ENABLE */
; 489  :     g_pEmacMod->RXMBPENABLE = EMAC_RXMBPENABLE_RXBROADEN;
; 490  : 
; 491  :     /* Enable ch 0 only */
; 492  :     g_pEmacMod->RXUNICASTSET = 0x01;
; 493  : 
; 494  :     /* Clear all unused RX channel interrupts */
; 495  :     g_pEmacMod->RXINTMASKCLEAR = 0xFF;
; 496  : 
; 497  :     /* Enable the Rx channel interrupt mask registers.
; 498  :      * Setting channel0   RX channel interrupts
; 499  :      */
; 500  :     g_pEmacMod->RXINTMASKSET = 0x1;
; 501  : 
; 502  :     /* Enable MII interface and Full duplex mode */
; 503  : 
; 504  :     EnableMDIO();

  00290	e3a03a02	 mov         r3, #2, 20
  00294	e5962000	 ldr         r2, [r6]
  00298	e584810c	 str         r8, [r4, #0x10C]
  0029c	e5847110	 str         r7, [r4, #0x110]
  002a0	e5843100	 str         r3, [r4, #0x100]
  002a4	e59f3154	 ldr         r3, [pc, #0x154]
  002a8	e3a00001	 mov         r0, #1
  002ac	e3a010ff	 mov         r1, #0xFF
  002b0	e5840104	 str         r0, [r4, #0x104]
  002b4	e58410ac	 str         r1, [r4, #0xAC]
  002b8	e59f713c	 ldr         r7, [pc, #0x13C]
  002bc	e58400a8	 str         r0, [r4, #0xA8]
  002c0	e5823004	 str         r3, [r2, #4]
  002c4		 |$LL49@EMACInit|
  002c4	e5923004	 ldr         r3, [r2, #4]
  002c8	e3130102	 tst         r3, #2, 2
  002cc	1afffffc	 bne         |$LL49@EMACInit|

; 505  :     if (LinkIsOK() == FALSE)

  002d0	e5d70000	 ldrb        r0, [r7]
  002d4	e28d2000	 add         r2, sp, #0
  002d8	e3a01001	 mov         r1, #1
  002dc	eb000000	 bl          PhyReadReg
  002e0	e3500000	 cmp         r0, #0
  002e4	0a000002	 beq         |$LN53@EMACInit|
  002e8	e1dd30b0	 ldrh        r3, [sp]
  002ec	e3130004	 tst         r3, #4
  002f0	1a000009	 bne         |$LN2@EMACInit|
  002f4		 |$LN53@EMACInit|

; 506  :     {
; 507  :         /* Init MDIO & get link state */
; 508  :         if (!PhyAutoNegociate())

  002f4	eb000000	 bl          PhyAutoNegociate
  002f8	e3500000	 cmp         r0, #0
  002fc	1a000005	 bne         |$LN83@EMACInit|

; 509  :         {
; 510  :             RETAILMSG(1,(TEXT("Autonegociation failed. Check the ethernet cable\r\n")));

  00300	e59f00f0	 ldr         r0, [pc, #0xF0]
  00304	eb000000	 bl          NKDbgPrintfW
  00308		 |$LN82@EMACInit|

; 516  :     {
; 517  :         return FALSE;

  00308	e3a00000	 mov         r0, #0

; 527  : 
; 528  : 
; 529  :     return TRUE;

  0030c		 |$LN33@EMACInit|

; 530  : }

  0030c	e28dd004	 add         sp, sp, #4
  00310	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00314	e12fff1e	 bx          lr
  00318		 |$LN83@EMACInit|

; 511  :             return FALSE;

  00318	e5964004	 ldr         r4, [r6, #4]
  0031c		 |$LN2@EMACInit|

; 512  :         }
; 513  :     }
; 514  : 
; 515  :     if (GetLinkStatus(&speed,&fullduplex) == FALSE)

  0031c	e5d70000	 ldrb        r0, [r7]
  00320	e28d2000	 add         r2, sp, #0
  00324	e3a01001	 mov         r1, #1
  00328	eb000000	 bl          PhyReadReg
  0032c	e3500000	 cmp         r0, #0
  00330	0afffff4	 beq         |$LN82@EMACInit|
  00334	e1dd30b0	 ldrh        r3, [sp]
  00338	e3130004	 tst         r3, #4
  0033c	0afffff1	 beq         |$LN82@EMACInit|
  00340	e5d70000	 ldrb        r0, [r7]
  00344	e28d2000	 add         r2, sp, #0
  00348	e3a01005	 mov         r1, #5
  0034c	eb000000	 bl          PhyReadReg
  00350	e3500000	 cmp         r0, #0
  00354	0affffeb	 beq         |$LN82@EMACInit|
  00358	e1dd30b0	 ldrh        r3, [sp]
  0035c	e3130d05	 tst         r3, #5, 26
  00360	13a02001	 movne       r2, #1
  00364	03a02000	 moveq       r2, #0
  00368	e3130d06	 tst         r3, #6, 26
  0036c	13a01064	 movne       r1, #0x64
  00370	03a0100a	 moveq       r1, #0xA

; 518  :     }
; 519  :     g_pEmacMod->MACCONTROL = EMAC_MACCONTROL_MIIEN_ENABLE |
; 520  :         (fullduplex ? EMAC_MACCONTROL_FULLDUPLEX_ENABLE : 0) |
; 521  :         ((speed == SPEED_100MBPS) ? EMAC_MACCONTROL_RMII_SPEED : 0);

  00374	e3520000	 cmp         r2, #0
  00378	13a00001	 movne       r0, #1
  0037c	03a00000	 moveq       r0, #0
  00380	e3510064	 cmp         r1, #0x64
  00384	03a03902	 moveq       r3, #2, 18
  00388	13a03000	 movne       r3, #0
  0038c	e1833000	 orr         r3, r3, r0
  00390	e3833020	 orr         r3, r3, #0x20

; 522  : 
; 523  :     RETAILMSG(1,(TEXT("Link : %s-duplex %d MBits/s\r\n"),fullduplex?L"Full":L"Half",speed));

  00394	e3520000	 cmp         r2, #0
  00398	e5843160	 str         r3, [r4, #0x160]
  0039c	159f3050	 ldrne       r3, [pc, #0x50]
  003a0	059f3048	 ldreq       r3, [pc, #0x48]
  003a4	e59f0040	 ldr         r0, [pc, #0x40]
  003a8	e1a02001	 mov         r2, r1
  003ac	e1a01003	 mov         r1, r3
  003b0	eb000000	 bl          NKDbgPrintfW

; 524  : 
; 525  :     /* Start receive process */
; 526  :     g_pEmacMod->RX0HDP = BD_TO_HW((UINT32)emac_rx_desc);

  003b4	e59f302c	 ldr         r3, [pc, #0x2C]

; 527  : 
; 528  : 
; 529  :     return TRUE;

  003b8	e3a00001	 mov         r0, #1
  003bc	e5931000	 ldr         r1, [r3]
  003c0	e3510000	 cmp         r1, #0
  003c4	159b3000	 ldrne       r3, [r11]
  003c8	03a02000	 moveq       r2, #0
  003cc	13a0261e	 movne       r2, #0x1E, 12
  003d0	10413003	 subne       r3, r1, r3
  003d4	13822802	 orrne       r2, r2, #2, 16
  003d8	10832002	 addne       r2, r3, r2
  003dc	e5963004	 ldr         r3, [r6, #4]
  003e0	e5832620	 str         r2, [r3, #0x620]
  003e4	eaffffc8	 b           |$LN33@EMACInit|
  003e8		 |$LN87@EMACInit|
  003e8		 |$LN88@EMACInit|
  003e8	00000000	 DCD         |emac_rx_desc|
  003ec		 |$LN89@EMACInit|
  003ec	00000000	 DCD         |??_C@_1DM@HDLLGNPK@?$AAL?$AAi?$AAn?$AAk?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?9?$AAd?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?5?$AA?$CF?$AAd?$AA?5?$AAM?$AAB?$AAi?$AAt?$AAs?$AA?1?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  003f0		 |$LN90@EMACInit|
  003f0	00000000	 DCD         |??_C@_19OMCCBHAG@?$AAH?$AAa?$AAl?$AAf?$AA?$AA@|
  003f4		 |$LN91@EMACInit|
  003f4	00000000	 DCD         |??_C@_19GFKHPIAA@?$AAF?$AAu?$AAl?$AAl?$AA?$AA@|
  003f8		 |$LN92@EMACInit|
  003f8	00000000	 DCD         |??_C@_1GG@POIKKPOP@?$AAA?$AAu?$AAt?$AAo?$AAn?$AAe?$AAg?$AAo?$AAc?$AAi?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?5?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?5?$AAt?$AAh@|
  003fc		 |$LN93@EMACInit|
  003fc	00000000	 DCD         |active_phy_addr|
  00400		 |$LN94@EMACInit|
  00400	400c00ff	 DCD         0x400c00ff
  00404		 |$LN95@EMACInit|
  00404	01e20010	 DCD         0x1e20010
  00408		 |$LN96@EMACInit|
  00408	00000000	 DCD         |dmaBuffer|
  0040c		 |$LN97@EMACInit|
  0040c	00000000	 DCD         |startOfCPPIArea|
  00410		 |$LN98@EMACInit|
  00410	00000000	 DCD         |emac_tx_desc|
  00414		 |$LN99@EMACInit|
  00414	00000000	 DCD         |g_pMdio|
  00418		 |$M44009|

			 ENDP  ; |EMACInit|

	EXPORT	|DumpDesc|
	EXPORT	|??_C@_1CE@GEFIDPNM@?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@OEMIKODG@?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@JIDBHF@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@PFGBJBME@?$AAB?$AAu?$AAf?$AAO?$AAf?$AAf?$AAL?$AAe?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@OLKAILJK@?$AAP?$AAk?$AAt?$AAF?$AAl?$AAg?$AAL?$AAe?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44032| DCD	|$LN5@DumpDesc|
	DCD	0x40001801

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@GEFIDPNM@?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "d"
	DCB	0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r", 0x0, "i", 0x0, "p"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@OEMIKODG@?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "n"
	DCB	0x0, "e", 0x0, "x", 0x0, "t", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@JIDBHF@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@PFGBJBME@?$AAB?$AAu?$AAf?$AAO?$AAf?$AAf?$AAL?$AAe?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "B"
	DCB	0x0, "u", 0x0, "f", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, "L"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@OLKAILJK@?$AAP?$AAk?$AAt?$AAF?$AAl?$AAg?$AAL?$AAe?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "k", 0x0, "t", 0x0, "F", 0x0, "l", 0x0, "g", 0x0, "L"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DumpDesc| PROC

; 533  : {

  00000		 |$LN5@DumpDesc|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M44029|
  00004	e1a04000	 mov         r4, r0

; 534  : 	UNREFERENCED_PARAMETER(pDdesc);
; 535  : 
; 536  :     RETAILMSG(1,(TEXT("descriptor 0x%x\r\n"),pDdesc));

  00008	e59f004c	 ldr         r0, [pc, #0x4C]
  0000c	e1a01004	 mov         r1, r4
  00010	eb000000	 bl          NKDbgPrintfW

; 537  :     RETAILMSG(1,(TEXT("next 0x%x\r\n"),pDdesc->next));

  00014	e5941000	 ldr         r1, [r4]
  00018	e59f0038	 ldr         r0, [pc, #0x38]
  0001c	eb000000	 bl          NKDbgPrintfW

; 538  :     RETAILMSG(1,(TEXT("buffer 0x%x\r\n"),pDdesc->buffer));

  00020	e5941004	 ldr         r1, [r4, #4]
  00024	e59f0028	 ldr         r0, [pc, #0x28]
  00028	eb000000	 bl          NKDbgPrintfW

; 539  :     RETAILMSG(1,(TEXT("BufOffLen 0x%x\r\n"),pDdesc->BufOffLen));

  0002c	e5941008	 ldr         r1, [r4, #8]
  00030	e59f0018	 ldr         r0, [pc, #0x18]
  00034	eb000000	 bl          NKDbgPrintfW

; 540  :     RETAILMSG(1,(TEXT("PktFlgLen 0x%x\r\n"),pDdesc->PktFlgLen));

  00038	e594100c	 ldr         r1, [r4, #0xC]
  0003c	e59f0008	 ldr         r0, [pc, #8]
  00040	eb000000	 bl          NKDbgPrintfW

; 541  : }

  00044	e8bd4010	 ldmia       sp!, {r4, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN6@DumpDesc|
  0004c		 |$LN7@DumpDesc|
  0004c	00000000	 DCD         |??_C@_1CC@OLKAILJK@?$AAP?$AAk?$AAt?$AAF?$AAl?$AAg?$AAL?$AAe?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00050		 |$LN8@DumpDesc|
  00050	00000000	 DCD         |??_C@_1CC@PFGBJBME@?$AAB?$AAu?$AAf?$AAO?$AAf?$AAf?$AAL?$AAe?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00054		 |$LN9@DumpDesc|
  00054	00000000	 DCD         |??_C@_1BM@JIDBHF@?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00058		 |$LN10@DumpDesc|
  00058	00000000	 DCD         |??_C@_1BI@OEMIKODG@?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0005c		 |$LN11@DumpDesc|
  0005c	00000000	 DCD         |??_C@_1CE@GEFIDPNM@?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00060		 |$M44030|

			 ENDP  ; |DumpDesc|

	EXPORT	|EMACSendFrame|
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T44056| DCD	|$LN13@EMACSendFr|
	DCD	0x40003001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EMACSendFrame| PROC

; 543  : {

  00000		 |$LN13@EMACSendFr|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M44053|
  00004	e1a05001	 mov         r5, r1

; 544  :     int tx_send_loop = 0;
; 545  :     UCHAR* buffer = (dmaBuffer + (EMAC_MAX_RX_BUFFERS * (EMAC_MAX_ETHERNET_PKT_SIZE + EMAC_PKT_ALIGN)));

  00008	e59f30ac	 ldr         r3, [pc, #0xAC]

; 546  :     //	RETAILMSG(1,(TEXT("sending %d bytes (0x%x)(0x%x)\r\n"),length,src_buffer,OALVAtoPA((UINT8 *) src_buffer)));
; 547  : 
; 548  :     /* Check packet size and if < EMAC_MIN_ETHERNET_PKT_SIZE, pad it up */
; 549  :     if (length < EMAC_MIN_ETHERNET_PKT_SIZE) 

  0000c	e355003c	 cmp         r5, #0x3C

; 550  :     {
; 551  :         length = EMAC_MIN_ETHERNET_PKT_SIZE;

  00010	33a0503c	 movcc       r5, #0x3C
  00014	e5936000	 ldr         r6, [r3]

; 552  :     }
; 553  : 
; 554  :     memcpy(buffer,src_buffer,length);

  00018	e1a01000	 mov         r1, r0
  0001c	e1a02005	 mov         r2, r5
  00020	e2860a03	 add         r0, r6, #3, 20
  00024	eb000000	 bl          memcpy

; 555  :     /* Populate the TX descriptor */
; 556  :     emac_tx_desc->next = 0;

  00028	e59f4088	 ldr         r4, [pc, #0x88]
  0002c	e3a02000	 mov         r2, #0

; 557  :     emac_tx_desc->buffer = OALVAtoPA((UINT8 *) buffer);

  00030	e2860a03	 add         r0, r6, #3, 20
  00034	e5943000	 ldr         r3, [r4]
  00038	e5832000	 str         r2, [r3]
  0003c	eb000000	 bl          OALVAtoPA
  00040	e5943000	 ldr         r3, [r4]
  00044	e3a01cff	 mov         r1, #0xFF, 24
  00048	e5830004	 str         r0, [r3, #4]

; 558  :     emac_tx_desc->BufOffLen = (length & 0xffff);

  0004c	e5942000	 ldr         r2, [r4]
  00050	e38130ff	 orr         r3, r1, #0xFF
  00054	e0053003	 and         r3, r5, r3
  00058	e5823008	 str         r3, [r2, #8]

; 559  :     emac_tx_desc->PktFlgLen = ((length & 0xffff) |
; 560  :         EMAC_DSC_FLAG_SOP |
; 561  :         EMAC_DSC_FLAG_OWNER |
; 562  :         EMAC_DSC_FLAG_EOP);

  0005c	e5942000	 ldr         r2, [r4]
  00060	e383320e	 orr         r3, r3, #0xE, 4
  00064	e582300c	 str         r3, [r2, #0xC]

; 563  : 
; 564  :     //	DumpDesc(emac_tx_desc);
; 565  : 
; 566  : 
; 567  :     /* Send the packet */
; 568  :     g_pEmacMod->TX0HDP = BD_TO_HW((unsigned int) emac_tx_desc);

  00068	e5941000	 ldr         r1, [r4]
  0006c	e3510000	 cmp         r1, #0
  00070	159f303c	 ldrne       r3, [pc, #0x3C]
  00074	03a01000	 moveq       r1, #0
  00078	13a0261e	 movne       r2, #0x1E, 12
  0007c	15933000	 ldrne       r3, [r3]
  00080	13822802	 orrne       r2, r2, #2, 16
  00084	10413003	 subne       r3, r1, r3
  00088	10831002	 addne       r1, r3, r2
  0008c	e59f301c	 ldr         r3, [pc, #0x1C]
  00090	e5932000	 ldr         r2, [r3]
  00094	e5821600	 str         r1, [r2, #0x600]
  00098		 |$LL2@EMACSendFr|

; 569  : 
; 570  :     /* Wait for packet to complete or link down */
; 571  :     while (!(g_pEmacMod->TXINTSTATRAW & 0x01))

  00098	e5923080	 ldr         r3, [r2, #0x80]
  0009c	e3130001	 tst         r3, #1
  000a0	0afffffc	 beq         |$LL2@EMACSendFr|

; 572  :     {
; 573  :         tx_send_loop++;
; 574  :     }
; 575  : 
; 576  :     return 0;

  000a4	e3a00000	 mov         r0, #0

; 577  : }

  000a8	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN14@EMACSendFr|
  000b0		 |$LN15@EMACSendFr|
  000b0	00000000	 DCD         |g_pEmacMod|
  000b4		 |$LN16@EMACSendFr|
  000b4	00000000	 DCD         |startOfCPPIArea|
  000b8		 |$LN17@EMACSendFr|
  000b8	00000000	 DCD         |emac_tx_desc|
  000bc		 |$LN18@EMACSendFr|
  000bc	00000000	 DCD         |dmaBuffer|
  000c0		 |$M44054|

			 ENDP  ; |EMACSendFrame|

	EXPORT	|EMACGetFrame|
	EXPORT	|??_C@_1EK@JONNMNMN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAe?$AAm?$AAa?$AAc?$AA_?$AAr?$AAc?$AAv?$AA_?$AAp?$AAk?$AAt?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAc@| [ DATA ] ; `string'
	IMPORT	|SocAckInterrupt|

  00000			 AREA	 |.pdata|, PDATA
|$T44091| DCD	|$LN30@EMACGetFra|
	DCD	0x40005b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@JONNMNMN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAe?$AAm?$AAa?$AAc?$AA_?$AAr?$AAc?$AAv?$AA_?$AAp?$AAk?$AAt?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAc@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "e"
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, "_", 0x0, "r", 0x0, "c"
	DCB	0x0, "v", 0x0, "_", 0x0, "p", 0x0, "k", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EMACGetFrame| PROC

; 580  : {

  00000		 |$LN30@EMACGetFra|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M44088|
  00004	e1a07001	 mov         r7, r1
  00008	e1a08000	 mov         r8, r0

; 581  :     EMAC_DESC *rx_curr_desc;
; 582  :     EMAC_DESC *curr_desc;
; 583  :     EMAC_DESC *tail_desc;
; 584  :     int status, ret = -1;
; 585  :     static int			emac_rx_queue_active = 1;
; 586  : 
; 587  : 
; 588  :     *length = 0;
; 589  :     rx_curr_desc = emac_rx_active_head;

  0000c	e59f5154	 ldr         r5, [pc, #0x154]
  00010	e3a0a000	 mov         r10, #0
  00014	e1c7a0b0	 strh        r10, [r7]
  00018	e5954008	 ldr         r4, [r5, #8]

; 590  :     status = rx_curr_desc->PktFlgLen;

  0001c	e594600c	 ldr         r6, [r4, #0xC]

; 591  :     if ((rx_curr_desc) && ((status & EMAC_DSC_FLAG_OWNER) == 0)) 

  00020	e3160202	 tst         r6, #2, 4
  00024	1a000044	 bne         |$LN1@EMACGetFra|

; 592  :     {
; 593  :         if (status & EMAC_DSC_RX_ERROR_FRAME) 

  00028	e31607ff	 tst         r6, #0xFF, 14
  0002c	0a000002	 beq         |$LN9@EMACGetFra|

; 594  :         {
; 595  :             /* Error in packet - discard it and requeue desc */
; 596  :             RETAILMSG (1, (L"WARN: emac_rcv_pkt: Error in packet\n"));

  00030	e59f012c	 ldr         r0, [pc, #0x12C]
  00034	eb000000	 bl          NKDbgPrintfW

; 597  :         } else 

  00038	ea000008	 b           |$LN8@EMACGetFra|
  0003c		 |$LN9@EMACGetFra|

; 598  :         {
; 599  :             ret = rx_curr_desc->BufOffLen & 0xffff;
; 600  :             // packet is good...copy to input buffer.
; 601  :             *length = (USHORT)(rx_curr_desc->BufOffLen & 0xffff);

  0003c	e5943008	 ldr         r3, [r4, #8]

; 602  :             memcpy(dest_buffer, OALPAtoUA(rx_curr_desc->buffer), *length);

  00040	e3a01000	 mov         r1, #0
  00044	e1c730b0	 strh        r3, [r7]
  00048	e5940004	 ldr         r0, [r4, #4]
  0004c	eb000000	 bl          OALPAtoVA
  00050	e1d720b0	 ldrh        r2, [r7]
  00054	e1a01000	 mov         r1, r0
  00058	e1a00008	 mov         r0, r8
  0005c	eb000000	 bl          memcpy
  00060		 |$LN8@EMACGetFra|

; 603  :             //RETAILMSG(1,(TEXT("received 1 frame : %d  bytes\r\n"), *length));
; 604  :             //			dumpPacket(dest_buffer, *length);
; 605  :         }
; 606  : 
; 607  :         /* Ack received packet descriptor */
; 608  :         g_pEmacMod->RX0CP = BD_TO_HW((unsigned int) rx_curr_desc);

  00060	e59f80f8	 ldr         r8, [pc, #0xF8]
  00064	e3a0361e	 mov         r3, #0x1E, 12
  00068	e3830802	 orr         r0, r3, #2, 16
  0006c	e5983000	 ldr         r3, [r8]
  00070	e5959000	 ldr         r9, [r5]

; 609  :         curr_desc = rx_curr_desc;
; 610  :         emac_rx_active_head =
; 611  :             (EMAC_DESC *) (HW_TO_BD(rx_curr_desc->next));
; 612  : 
; 613  : 
; 614  :         if (status & EMAC_DSC_FLAG_EOQ) 

  00074	e59f10e0	 ldr         r1, [pc, #0xE0]
  00078	e0443003	 sub         r3, r4, r3
  0007c	e0833000	 add         r3, r3, r0
  00080	e5893660	 str         r3, [r9, #0x660]
  00084	e5943000	 ldr         r3, [r4]
  00088	e598e000	 ldr         lr, [r8]
  0008c	e3530000	 cmp         r3, #0
  00090	1083300e	 addne       r3, r3, lr
  00094	03a02000	 moveq       r2, #0
  00098	10432000	 subne       r2, r3, r0
  0009c	e5852008	 str         r2, [r5, #8]
  000a0	e3160201	 tst         r6, #1, 4
  000a4	0a000005	 beq         |$LN25@EMACGetFra|

; 615  :         {
; 616  :             if (emac_rx_active_head) 

  000a8	e3520000	 cmp         r2, #0

; 617  :             {
; 618  :                 g_pEmacMod->RX0HDP =
; 619  :                     BD_TO_HW((unsigned int) emac_rx_active_head);

  000ac	1042300e	 subne       r3, r2, lr
  000b0	10833000	 addne       r3, r3, r0
  000b4	15893620	 strne       r3, [r9, #0x620]

; 620  :             } 
; 621  :             else 
; 622  :             {
; 623  :                 emac_rx_queue_active = 0;

  000b8	03a03000	 moveq       r3, #0
  000bc	05813000	 streq       r3, [r1]
  000c0		 |$LN25@EMACGetFra|
  000c0	e3a03c05	 mov         r3, #5, 24

; 624  :             }
; 625  :         }
; 626  : 
; 627  :         /* Recycle RX descriptor */
; 628  :         rx_curr_desc->BufOffLen = EMAC_MAX_ETHERNET_PKT_SIZE;

  000c4	e38330ea	 orr         r3, r3, #0xEA

; 629  :         rx_curr_desc->PktFlgLen = EMAC_DSC_FLAG_OWNER;

  000c8	e3a0e202	 mov         lr, #2, 4
  000cc	e5843008	 str         r3, [r4, #8]
  000d0	e584e00c	 str         lr, [r4, #0xC]

; 630  :         rx_curr_desc->next = 0;

  000d4	e584a000	 str         r10, [r4]

; 631  : 
; 632  :         if (emac_rx_active_head == 0) 

  000d8	e3520000	 cmp         r2, #0
  000dc	1a000007	 bne         |$LN4@EMACGetFra|
  000e0	e5913000	 ldr         r3, [r1]

; 633  :         {
; 634  :             emac_rx_active_head = curr_desc;

  000e4	e5854008	 str         r4, [r5, #8]

; 635  :             emac_rx_active_tail = curr_desc;

  000e8	e585400c	 str         r4, [r5, #0xC]

; 636  :             if (emac_rx_queue_active == 0) 

  000ec	e3530000	 cmp         r3, #0
  000f0	1a000011	 bne         |$LN1@EMACGetFra|

; 637  :             {
; 638  :                 g_pEmacMod->RX0HDP =
; 639  :                     BD_TO_HW((unsigned int) emac_rx_active_head);
; 640  :                 emac_rx_queue_active = 1;

  000f4	e3a02001	 mov         r2, #1
  000f8	e5812000	 str         r2, [r1]

; 641  :             }
; 642  :         } 
; 643  :         else 

  000fc	ea00000a	 b           |$LN27@EMACGetFra|
  00100		 |$LN4@EMACGetFra|

; 644  :         {
; 645  :             tail_desc = emac_rx_active_tail;

  00100	e595200c	 ldr         r2, [r5, #0xC]

; 646  :             emac_rx_active_tail = curr_desc;
; 647  :             tail_desc->next = BD_TO_HW((unsigned int) curr_desc);

  00104	e5983000	 ldr         r3, [r8]
  00108	e585400c	 str         r4, [r5, #0xC]

; 648  :             status = tail_desc->PktFlgLen;

  0010c	e592100c	 ldr         r1, [r2, #0xC]
  00110	e0443003	 sub         r3, r4, r3
  00114	e0833000	 add         r3, r3, r0
  00118	e5823000	 str         r3, [r2]

; 649  :             if (status & EMAC_DSC_FLAG_EOQ) 

  0011c	e3110201	 tst         r1, #1, 4
  00120	0a000005	 beq         |$LN1@EMACGetFra|

; 650  :             {
; 651  :                 status &= ~EMAC_DSC_FLAG_EOQ;

  00124	e3c13201	 bic         r3, r1, #1, 4

; 652  :                 tail_desc->PktFlgLen = status;

  00128	e582300c	 str         r3, [r2, #0xC]
  0012c		 |$LN27@EMACGetFra|

; 653  :                 g_pEmacMod->RX0HDP = BD_TO_HW((unsigned int) curr_desc);

  0012c	e5983000	 ldr         r3, [r8]
  00130	e0443003	 sub         r3, r4, r3
  00134	e0833000	 add         r3, r3, r0
  00138	e5893620	 str         r3, [r9, #0x620]
  0013c		 |$LN1@EMACGetFra|

; 654  :             }
; 655  :         }
; 656  :     }
; 657  : 
; 658  : 	SocAckInterrupt(0xF);

  0013c	e3a0000f	 mov         r0, #0xF
  00140	eb000000	 bl          SocAckInterrupt

; 659  : 	g_pEmacMod->MACEOIVECTOR = 0x1;

  00144	e5953000	 ldr         r3, [r5]
  00148	e3a02001	 mov         r2, #1
  0014c	e5832094	 str         r2, [r3, #0x94]

; 660  : 
; 661  :     return  *length;

  00150	e1d700b0	 ldrh        r0, [r7]

; 662  : }

  00154	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00158	e12fff1e	 bx          lr
  0015c		 |$LN31@EMACGetFra|
  0015c		 |$LN32@EMACGetFra|
  0015c	00000000	 DCD         |?emac_rx_queue_active@?1??EMACGetFrame@@9@9|
  00160		 |$LN33@EMACGetFra|
  00160	00000000	 DCD         |startOfCPPIArea|
  00164		 |$LN34@EMACGetFra|
  00164	00000000	 DCD         |??_C@_1EK@JONNMNMN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAe?$AAm?$AAa?$AAc?$AA_?$AAr?$AAc?$AAv?$AA_?$AAp?$AAk?$AAt?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAc@|
  00168		 |$LN35@EMACGetFra|
  00168	00000000	 DCD         |g_pEmacMod|
  0016c		 |$M44089|

			 ENDP  ; |EMACGetFrame|

	EXPORT	|EMACInitDMABuffer|

  00000			 AREA	 |.pdata|, PDATA
|$T44107| DCD	|$LN6@EMACInitDM|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EMACInitDMABuffer| PROC

; 667  : {

  00000		 |$LN6@EMACInitDM|
  00000		 |$M44104|

; 668  :     dmaBuffer = (UINT8*) address;

  00000	e59f3010	 ldr         r3, [pc, #0x10]

; 669  :     if (size < ((EMAC_MAX_RX_BUFFERS + EMAC_MAX_TX_BUFFERS) * (EMAC_MAX_ETHERNET_PKT_SIZE + EMAC_PKT_ALIGN)))

  00004	e3510c36	 cmp         r1, #0x36, 24
  00008	e5830000	 str         r0, [r3]

; 670  :     {
; 671  :         return FALSE;

  0000c	33a00000	 movcc       r0, #0

; 672  :     }
; 673  :     return TRUE;

  00010	23a00001	 movcs       r0, #1

; 674  : }

  00014	e12fff1e	 bx          lr
  00018		 |$LN7@EMACInitDM|
  00018		 |$LN8@EMACInitDM|
  00018	00000000	 DCD         |dmaBuffer|
  0001c		 |$M44105|

			 ENDP  ; |EMACInitDMABuffer|

	END
