; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\FLASHSTORE\flashstore.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|OALFlashStoreOpen|
	EXPORT	|??_C@_1EE@DLLAKNKJ@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@FKJBCKDO@?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?1?$AAs?$AAe?$AAc?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@LGNOEKEA@?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?0?$AA?5?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@DBMLJPHK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAG?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@JPMDHDDC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@MODMACFL@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|FMD_GetBlockStatus|
	IMPORT	|FMD_GetInfo|
	IMPORT	|FMD_Init|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.bss|, NOINIT
|?flashContext@?1??OALFlashStoreOpen@@9@9| % 0xae4	; `OALFlashStoreOpen'::`2'::flashContext
|?flashContext@?1??OALFlashStoreOpen@@9@9| % 0xae4	; `OALFlashStoreOpen'::`2'::flashContext
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\boot\flashstore\flashstore.c

  00000			 AREA	 |.pdata|, PDATA
|$T44975| DCD	|$LN31@OALFlashSt|
	DCD	0xc0006602

  00000			 AREA	 |.xdata|, DATA
|$T44971| DCD	0xffffffec

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@DLLAKNKJ@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "("
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@FKJBCKDO@?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?1?$AAs?$AAe?$AAc?$AAt@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, "/", 0x0, "s", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e"
	DCB	0x0, "r", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "b"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@LGNOEKEA@?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?0?$AA?5?$AA?$CF?$AAd@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "s", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "s", 0x0, "/", 0x0, "b", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@DBMLJPHK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAG?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@JPMDHDDC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@MODMACFL@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T44971|

  00008		 |OALFlashStoreOpen| PROC

; 77   : {

  00008		 |$LN31@OALFlashSt|
  00008	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  0000c	e24ddfe5	 sub         sp, sp, #0xE5, 30
  00010		 |$M44972|
  00010	e1a04000	 mov         r4, r0
  00014	e59f3180	 ldr         r3, [pc, #0x180]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3390	 str         r3, [sp, #0x390]

; 78   :     static OAL_FLASH_CONTEXT flashContext;
; 79   :     HANDLE hFlash = NULL;
; 80   :     PCI_REG_INFO regInfo;
; 81   :     FlashInfo flashInfo;
; 82   :     ULONG block;
; 83   :     DWORD status;
; 84   : 
; 85   : 
; 86   :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"+OALFlashStoreOpen(0x%08x)\r\n", address));

  00020	e59f5170	 ldr         r5, [pc, #0x170]
  00024	e3a06000	 mov         r6, #0
  00028	e5953440	 ldr         r3, [r5, #0x440]
  0002c	e3130a02	 tst         r3, #2, 20
  00030	13130004	 tstne       r3, #4
  00034	159f0158	 ldrne       r0, [pc, #0x158]
  00038	11a01004	 movne       r1, r4
  0003c	1b000000	 blne        NKDbgPrintfW

; 87   : 
; 88   :     // Open FMD to access NAND
; 89   :     
; 90   :     regInfo.MemBase.Reg[0] = address;
; 91   :     flashContext.pFmd = FMD_Init(NULL, &regInfo, NULL);

  00040	e3a02000	 mov         r2, #0
  00044	e28d1010	 add         r1, sp, #0x10
  00048	e3a00000	 mov         r0, #0
  0004c	e58d4320	 str         r4, [sp, #0x320]
  00050	eb000000	 bl          FMD_Init
  00054	e59f4134	 ldr         r4, [pc, #0x134]
  00058	e3500000	 cmp         r0, #0
  0005c	e5840000	 str         r0, [r4]

; 92   :     if (flashContext.pFmd == NULL)

  00060	1a000005	 bne         |$LN6@OALFlashSt|

; 93   :         {
; 94   :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreOpen: "
; 95   :             L"FMD_Init call failed!\r\n"
; 96   :             ));

  00064	e5953440	 ldr         r3, [r5, #0x440]
  00068	e3130001	 tst         r3, #1
  0006c	0a000036	 beq         |$cleanUp$44478|
  00070	e59f0114	 ldr         r0, [pc, #0x114]
  00074	eb000000	 bl          NKDbgPrintfW

; 97   :         goto cleanUp;

  00078	ea000033	 b           |$cleanUp$44478|
  0007c		 |$LN6@OALFlashSt|

; 98   :         }
; 99   : 
; 100  :     // Get flash info
; 101  :     if (!FMD_GetInfo(&flashInfo))

  0007c	e28d0000	 add         r0, sp, #0
  00080	eb000000	 bl          FMD_GetInfo
  00084	e3500000	 cmp         r0, #0
  00088	1a000005	 bne         |$LN5@OALFlashSt|
  0008c	e5953440	 ldr         r3, [r5, #0x440]

; 102  :         {
; 103  :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreOpen: "
; 104  :             L"FMD_GetInfo call failed!\r\n"
; 105  :             ));

  00090	e3130001	 tst         r3, #1
  00094	0a00002c	 beq         |$cleanUp$44478|
  00098	e59f00e8	 ldr         r0, [pc, #0xE8]
  0009c	eb000000	 bl          NKDbgPrintfW
  000a0	ea000029	 b           |$cleanUp$44478|
  000a4		 |$LN5@OALFlashSt|

; 106  :         goto cleanUp;
; 107  :         }
; 108  :     flashContext.sectorSize = flashInfo.wDataBytesPerSector;

  000a4	e1dd30be	 ldrh        r3, [sp, #0xE]

; 109  :     flashContext.sectorsPerBlock = flashInfo.wSectorsPerBlock;

  000a8	e1dd20bc	 ldrh        r2, [sp, #0xC]

; 110  :     flashContext.blocksOnFlash = flashInfo.dwNumBlocks;

  000ac	e59d1004	 ldr         r1, [sp, #4]
  000b0	e5843004	 str         r3, [r4, #4]
  000b4	e5842008	 str         r2, [r4, #8]

; 111  :     flashContext.blockPos = 0;

  000b8	e3a03000	 mov         r3, #0
  000bc	e584100c	 str         r1, [r4, #0xC]
  000c0	e5843014	 str         r3, [r4, #0x14]

; 112  :     flashContext.badBlocksAtPos = 0;

  000c4	e3a03000	 mov         r3, #0
  000c8	e5843018	 str         r3, [r4, #0x18]

; 113  :     flashContext.reservedBlocks = 0;

  000cc	e3a03000	 mov         r3, #0
  000d0	e5843010	 str         r3, [r4, #0x10]

; 114  : 
; 115  :     // Get number of reserved blocks
; 116  :     block = 0;

  000d4	e3a06000	 mov         r6, #0

; 117  :     while (block < flashContext.blocksOnFlash)

  000d8	e3510000	 cmp         r1, #0
  000dc	0a00000e	 beq         |$LN26@OALFlashSt|
  000e0		 |$LL4@OALFlashSt|

; 118  :         {
; 119  :         status = FMD_GetBlockStatus(block);

  000e0	e1a00006	 mov         r0, r6
  000e4	eb000000	 bl          FMD_GetBlockStatus

; 120  :         if ((status & BLOCK_STATUS_BAD) != 0)

  000e8	e3100002	 tst         r0, #2

; 121  :             {
; 122  :             block++;
; 123  :             continue;

  000ec	1a000004	 bne         |$LN27@OALFlashSt|

; 124  :             }
; 125  :         if ((status & BLOCK_STATUS_RESERVED) == 0) break;

  000f0	e3100008	 tst         r0, #8
  000f4	0a000007	 beq         |$LN25@OALFlashSt|

; 126  :         flashContext.reservedBlocks++;

  000f8	e5943010	 ldr         r3, [r4, #0x10]

; 127  :         block++;

  000fc	e2833001	 add         r3, r3, #1
  00100	e5843010	 str         r3, [r4, #0x10]
  00104		 |$LN27@OALFlashSt|
  00104	e594100c	 ldr         r1, [r4, #0xC]
  00108	e2866001	 add         r6, r6, #1
  0010c	e1560001	 cmp         r6, r1
  00110	3afffff2	 bcc         |$LL4@OALFlashSt|

; 117  :     while (block < flashContext.blocksOnFlash)

  00114	ea000000	 b           |$LN26@OALFlashSt|
  00118		 |$LN25@OALFlashSt|
  00118	e594100c	 ldr         r1, [r4, #0xC]
  0011c		 |$LN26@OALFlashSt|

; 93   :         {
; 94   :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreOpen: "
; 95   :             L"FMD_Init call failed!\r\n"
; 96   :             ));

  0011c	e5953440	 ldr         r3, [r5, #0x440]

; 128  :         }
; 129  : 
; 130  :     OALMSG(OAL_INFO, (L"OALFlashStoreOpen: "
; 131  :         L"%d blocks, %d sectors/block\r\n",
; 132  :         flashContext.blocksOnFlash, flashContext.sectorsPerBlock
; 133  :         ));

  00120	e3130008	 tst         r3, #8
  00124	15942008	 ldrne       r2, [r4, #8]
  00128	159f0054	 ldrne       r0, [pc, #0x54]
  0012c	1b000000	 blne        NKDbgPrintfW
  00130	e5953440	 ldr         r3, [r5, #0x440]

; 134  :     OALMSG(OAL_INFO, (L"OALFlashStoreOpen: "
; 135  :         L"%d bytes/sector, %d reserved blocks\r\n",
; 136  :         flashContext.sectorSize, flashContext.reservedBlocks
; 137  :         ));

  00134	e3130008	 tst         r3, #8
  00138	15942010	 ldrne       r2, [r4, #0x10]
  0013c	15941004	 ldrne       r1, [r4, #4]
  00140	159f0038	 ldrne       r0, [pc, #0x38]
  00144	1b000000	 blne        NKDbgPrintfW

; 138  : 
; 139  :     // Done
; 140  :     hFlash = &flashContext;

  00148	e1a06004	 mov         r6, r4
  0014c		 |$cleanUp$44478|
  0014c	e5953440	 ldr         r3, [r5, #0x440]

; 141  : 
; 142  : cleanUp:
; 143  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 144  :         L"-OALFlashStoreOpen(rc = 0x%08x)\r\n", hFlash
; 145  :         ));

  00150	e3130a02	 tst         r3, #2, 20
  00154	13130004	 tstne       r3, #4
  00158	159f001c	 ldrne       r0, [pc, #0x1C]
  0015c	11a01006	 movne       r1, r6
  00160	1b000000	 blne        NKDbgPrintfW

; 146  :     return hFlash;

  00164	e59d0390	 ldr         r0, [sp, #0x390]
  00168	eb000000	 bl          __security_check_cookie

; 147  : }

  0016c	e1a00006	 mov         r0, r6
  00170	e28ddfe5	 add         sp, sp, #0xE5, 30
  00174	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00178	e12fff1e	 bx          lr
  0017c		 |$LN32@OALFlashSt|
  0017c		 |$LN33@OALFlashSt|
  0017c	00000000	 DCD         |??_C@_1EE@DLLAKNKJ@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@|
  00180		 |$LN34@OALFlashSt|
  00180	00000000	 DCD         |??_C@_1HC@FKJBCKDO@?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?1?$AAs?$AAe?$AAc?$AAt@|
  00184		 |$LN35@OALFlashSt|
  00184	00000000	 DCD         |??_C@_1GC@LGNOEKEA@?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?0?$AA?5?$AA?$CF?$AAd@|
  00188		 |$LN36@OALFlashSt|
  00188	00000000	 DCD         |??_C@_1GK@DBMLJPHK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAG?$AAe@|
  0018c		 |$LN37@OALFlashSt|
  0018c	00000000	 DCD         |??_C@_1GE@JPMDHDDC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn@|
  00190		 |$LN38@OALFlashSt|
  00190	00000000	 DCD         |?flashContext@?1??OALFlashStoreOpen@@9@9|
  00194		 |$LN39@OALFlashSt|
  00194	00000000	 DCD         |??_C@_1DK@MODMACFL@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00198		 |$LN40@OALFlashSt|
  00198	00000000	 DCD         |dpCurSettings|
  0019c		 |$LN41@OALFlashSt|
  0019c	00000000	 DCD         |__security_cookie|
  001a0		 |$M44973|

			 ENDP  ; |OALFlashStoreOpen|

	EXPORT	|OALFlashStoreBlockSize|

  00000			 AREA	 |.pdata|, PDATA
|$T44996| DCD	|$LN5@OALFlashSt@2|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashStoreBlockSize| PROC

; 849  : {

  00000		 |$LN5@OALFlashSt@2|
  00000		 |$M44993|

; 850  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 851  :     return pFlash->sectorsPerBlock * pFlash->sectorSize;

  00000	e5902008	 ldr         r2, [r0, #8]
  00004	e5903004	 ldr         r3, [r0, #4]

; 852  : }

  00008	e0000392	 mul         r0, r2, r3
  0000c	e12fff1e	 bx          lr
  00010		 |$M44994|

			 ENDP  ; |OALFlashStoreBlockSize|

	EXPORT	|OALFlashStoreSectorSize|

  00000			 AREA	 |.pdata|, PDATA
|$T45006| DCD	|$LN5@OALFlashSt@3|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashStoreSectorSize| PROC

; 860  : {

  00000		 |$LN5@OALFlashSt@3|
  00000		 |$M45003|

; 861  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 862  :     return pFlash->sectorSize;

  00000	e5900004	 ldr         r0, [r0, #4]

; 863  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M45004|

			 ENDP  ; |OALFlashStoreSectorSize|

	EXPORT	|OALFlashStoreClose|
	IMPORT	|FMD_Deinit|

  00000			 AREA	 |.pdata|, PDATA
|$T45014| DCD	|$LN6@OALFlashSt@4|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashStoreClose| PROC

; 871  : {

  00000		 |$LN6@OALFlashSt@4|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45011|
  00004	e1a04000	 mov         r4, r0

; 872  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 873  : 
; 874  :     if (pFlash->pFmd != NULL)

  00008	e5943000	 ldr         r3, [r4]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000003	 beq         |$LN1@OALFlashSt@4|

; 875  :         {
; 876  :         FMD_Deinit(pFlash->pFmd);

  00014	e1a00003	 mov         r0, r3
  00018	eb000000	 bl          FMD_Deinit

; 877  :         pFlash->pFmd = NULL;

  0001c	e3a03000	 mov         r3, #0
  00020	e5843000	 str         r3, [r4]
  00024		 |$LN1@OALFlashSt@4|

; 878  :         }
; 879  : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M45012|

			 ENDP  ; |OALFlashStoreClose|

	EXPORT	|??_C@_1DE@JONHLDDF@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45034| DCD	|$LN16@SeekToBloc|
	DCD	0x40002801

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@JONHLDDF@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "k", 0x0, "i", 0x0, "p", 0x0, " ", 0x0, "b", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SeekToBlock| PROC

; 889  : {

  00000		 |$LN16@SeekToBloc|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M45031|
  00004	e1a07001	 mov         r7, r1
  00008	e1a04000	 mov         r4, r0

; 890  :     BOOL rc = FALSE;
; 891  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 892  :     ULONG blockPos, badBlocks;
; 893  : 
; 894  :     if (block < pFlash->blockPos)

  0000c	e5943014	 ldr         r3, [r4, #0x14]
  00010	e3a08000	 mov         r8, #0
  00014	e1570003	 cmp         r7, r3

; 895  :         {
; 896  :         pFlash->blockPos = 0;

  00018	33a03000	 movcc       r3, #0
  0001c	35843014	 strcc       r3, [r4, #0x14]

; 897  :         pFlash->badBlocksAtPos = 0;
; 898  :         }
; 899  : 
; 900  :     blockPos = pFlash->blockPos;

  00020	e5945014	 ldr         r5, [r4, #0x14]
  00024	35843018	 strcc       r3, [r4, #0x18]

; 901  :     badBlocks = pFlash->badBlocksAtPos;

  00028	e5946018	 ldr         r6, [r4, #0x18]

; 902  :     while (blockPos < block)

  0002c	e1550007	 cmp         r5, r7
  00030	2a000012	 bcs         |$LN3@SeekToBloc|
  00034	e59fa060	 ldr         r10, [pc, #0x60]
  00038		 |$LL4@SeekToBloc|

; 903  :         {
; 904  :         // Check if we don't run out of flash
; 905  :         if ((blockPos + badBlocks) >= pFlash->blocksOnFlash)

  00038	e594300c	 ldr         r3, [r4, #0xC]
  0003c	e0869005	 add         r9, r6, r5
  00040	e1590003	 cmp         r9, r3
  00044	2a00000e	 bcs         |$LN12@SeekToBloc|

; 906  :             {
; 907  :             pFlash->blockPos = blockPos;
; 908  :             pFlash->badBlocksAtPos = badBlocks;
; 909  :             goto cleanUp;
; 910  :             }
; 911  :         // If block is marked as bad, add bad blocks and try next one
; 912  :         if ((FMD_GetBlockStatus(blockPos + badBlocks) & BLOCK_STATUS_BAD) != 0)

  00048	e1a00009	 mov         r0, r9
  0004c	eb000000	 bl          FMD_GetBlockStatus
  00050	e3100002	 tst         r0, #2
  00054	0a000006	 beq         |$LN1@SeekToBloc|

; 913  :             {
; 914  :             OALMSG(OAL_WARN, (L"WARN: "
; 915  :                 L"Skip bad block %d\r\n", blockPos + badBlocks
; 916  :                 ));

  00058	e59a3440	 ldr         r3, [r10, #0x440]
  0005c	e3130002	 tst         r3, #2
  00060	159f0030	 ldrne       r0, [pc, #0x30]
  00064	11a01009	 movne       r1, r9
  00068	1b000000	 blne        NKDbgPrintfW

; 917  :             badBlocks++;

  0006c	e2866001	 add         r6, r6, #1

; 918  :             continue;

  00070	ea000000	 b           |$LN13@SeekToBloc|
  00074		 |$LN1@SeekToBloc|

; 919  :             }
; 920  :         blockPos++;

  00074	e2855001	 add         r5, r5, #1
  00078		 |$LN13@SeekToBloc|

; 902  :     while (blockPos < block)

  00078	e1550007	 cmp         r5, r7
  0007c	3affffed	 bcc         |$LL4@SeekToBloc|
  00080		 |$LN3@SeekToBloc|

; 926  :     rc = TRUE;

  00080	e3a08001	 mov         r8, #1
  00084		 |$LN12@SeekToBloc|

; 921  :         }
; 922  : 
; 923  :     // Done
; 924  :     pFlash->blockPos = blockPos;
; 925  :     pFlash->badBlocksAtPos = badBlocks;

  00084	e5846018	 str         r6, [r4, #0x18]
  00088	e5845014	 str         r5, [r4, #0x14]

; 927  : 
; 928  : cleanUp:
; 929  :     return rc;
; 930  : }

  0008c	e1a00008	 mov         r0, r8
  00090		 |$cleanUp$44785|
  00090	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$LN17@SeekToBloc|
  00098		 |$LN18@SeekToBloc|
  00098	00000000	 DCD         |??_C@_1DE@JONHLDDF@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0009c		 |$LN19@SeekToBloc|
  0009c	00000000	 DCD         |dpCurSettings|
  000a0		 |$M45032|

			 ENDP  ; |SeekToBlock|


  00000			 AREA	 |.pdata|, PDATA
|$T45054| DCD	|$LN15@IsSectorEm|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IsSectorEmpty| PROC

; 941  : {

  00000		 |$LN15@IsSectorEm|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45051|
  00004	e1a04000	 mov         r4, r0

; 942  :     BOOL rc = FALSE;
; 943  :     ULONG idx;
; 944  : 
; 945  :     if (pSectorInfo->dwReserved1 != 0xFFFFFFFF) goto cleanUp;

  00008	e5923000	 ldr         r3, [r2]
  0000c	e3a00000	 mov         r0, #0
  00010	e3730001	 cmn         r3, #1
  00014	1a000011	 bne         |$cleanUp$44798|

; 946  :     if (pSectorInfo->wReserved2 != 0xFFFF) goto cleanUp;

  00018	e1d2e0b6	 ldrh        lr, [r2, #6]
  0001c	e3a03cff	 mov         r3, #0xFF, 24
  00020	e38330ff	 orr         r3, r3, #0xFF
  00024	e15e0003	 cmp         lr, r3
  00028	1a00000c	 bne         |$cleanUp$44798|

; 947  :     if (pSectorInfo->bOEMReserved != 0xFF) goto cleanUp;

  0002c	e5d23004	 ldrb        r3, [r2, #4]
  00030	e35300ff	 cmp         r3, #0xFF
  00034	1a000009	 bne         |$cleanUp$44798|

; 948  : 
; 949  :     for (idx = 0; idx < sectorSize; idx++)

  00038	e3a02000	 mov         r2, #0
  0003c	e3510000	 cmp         r1, #0
  00040	0a000005	 beq         |$LN2@IsSectorEm|
  00044		 |$LL4@IsSectorEm|

; 950  :         {
; 951  :         if (pData[idx] != 0xFF) goto cleanUp;

  00044	e7d23004	 ldrb        r3, [r2, +r4]
  00048	e35300ff	 cmp         r3, #0xFF
  0004c	1a000003	 bne         |$cleanUp$44798|
  00050	e2822001	 add         r2, r2, #1
  00054	e1520001	 cmp         r2, r1
  00058	3afffff9	 bcc         |$LL4@IsSectorEm|
  0005c		 |$LN2@IsSectorEm|

; 952  :         }
; 953  : 
; 954  :     rc = TRUE;

  0005c	e3a00001	 mov         r0, #1
  00060		 |$cleanUp$44798|

; 955  : 
; 956  : cleanUp:
; 957  :     return rc;
; 958  : }

  00060	e8bd4010	 ldmia       sp!, {r4, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M45052|

			 ENDP  ; |IsSectorEmpty|

	EXPORT	|??_C@_1KM@MOFGEBEH@?$AA?5?$AA?5?$AA?5?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAN?$AAu?$AAm?$AAP?$AA?$DN?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@FBKBGCAF@?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?5?$AA?$CF?$AAu?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAo?$AAn?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@IDNHMBKN@?$AA?5?$AA?5?$AA?5?$AA?5?$AAN?$AAa?$AAm?$AAe?$AA?$DN?$AA?$CF?$AAs?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?$DN?$AA?$CF?$AAu?$AA?0?$AA?5?$AAB?$AAl?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@LIDNJIDD@?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?5?$AA?$CF?$AAu?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_08GODGKFDB@MSFLSH50?$AA@| [ DATA ] ; `string'
	IMPORT	|FMD_ReadSector|
	IMPORT	|memcpy|
	IMPORT	|memcmp|

  00000			 AREA	 |.pdata|, PDATA
|$T45087| DCD	|$LN35@BuildLayou|
	DCD	0x4000a302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@MOFGEBEH@?$AA?5?$AA?5?$AA?5?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAN?$AAu?$AAm?$AAP?$AA?$DN?$AA0?$AAx@| DCB " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "T", 0x0, "y", 0x0, "p"
	DCB	0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "N", 0x0, "u", 0x0, "m", 0x0, "P", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "N"
	DCB	0x0, "u", 0x0, "m", 0x0, "L", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "S", 0x0, "e"
	DCB	0x0, "c", 0x0, "/", 0x0, "B", 0x0, "l", 0x0, "k", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "B", 0x0, "/", 0x0, "B", 0x0, "l", 0x0, "k", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@FBKBGCAF@?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?5?$AA?$CF?$AAu?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAo?$AAn?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "s", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "s"
	DCB	0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@IDNHMBKN@?$AA?5?$AA?5?$AA?5?$AA?5?$AAN?$AAa?$AAm?$AAe?$AA?$DN?$AA?$CF?$AAs?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?$DN?$AA?$CF?$AAu?$AA?0?$AA?5?$AAB?$AAl?$AAo@| DCB " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "N", 0x0, "a", 0x0, "m"
	DCB	0x0, "e", 0x0, "=", 0x0, "%", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, " "
	DCB	0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "="
	DCB	0x0, "%", 0x0, "u", 0x0, ",", 0x0, " ", 0x0, "B", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "s", 0x0, "=", 0x0, "%"
	DCB	0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@LIDNJIDD@?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?5?$AA?$CF?$AAu?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAo@| DCB "F"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "s", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "r", 0x0, "v", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, ":", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08GODGKFDB@MSFLSH50?$AA@| DCB "MSFLSH50", 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BuildLayoutInfo| PROC

; 967  : {

  00000		 |$LN35@BuildLayou|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M45084|
  00008	e1a06000	 mov         r6, r0

; 968  :     BOOL rc = FALSE;
; 969  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 970  :     SectorInfo sectorInfo;
; 971  :     FlashLayoutSector *pSector;
; 972  :     ULONG block, sector, sectorInBlock;
; 973  :     ULONG mbrSector;
; 974  :     ULONG ix;
; 975  : 
; 976  : 
; 977  :     // First check if we support this flash
; 978  :     if (pFlash->sectorSize > sizeof(pFlash->sectorBuffer))

  0000c	e5963004	 ldr         r3, [r6, #4]
  00010	e3a07000	 mov         r7, #0
  00014	e3530b02	 cmp         r3, #2, 22
  00018	8a00008f	 bhi         |$cleanUp$44818|

; 979  :         {
; 980  :         goto cleanUp;
; 981  :         }
; 982  : 
; 983  :     // Seek to first unreserved block
; 984  :     SeekToBlock(hFlash, pFlash->reservedBlocks);

  0001c	e5961010	 ldr         r1, [r6, #0x10]
  00020	eb000000	 bl          SeekToBlock

; 985  : 
; 986  :     // Parse flash memory
; 987  :     block = pFlash->blockPos + pFlash->badBlocksAtPos;

  00024	e5961018	 ldr         r1, [r6, #0x18]
  00028	e5963014	 ldr         r3, [r6, #0x14]

; 988  :     sector = block * pFlash->sectorsPerBlock;

  0002c	e5962008	 ldr         r2, [r6, #8]

; 989  :     mbrSector = (ULONG) -1;
; 990  :     sectorInBlock = 0;
; 991  :     while (block < pFlash->blocksOnFlash)

  00030	e596e00c	 ldr         lr, [r6, #0xC]
  00034	e0814003	 add         r4, r1, r3
  00038	e0080492	 mul         r8, r2, r4
  0003c	e154000e	 cmp         r4, lr
  00040	e3e05000	 mvn         r5, #0
  00044	e3a09000	 mov         r9, #0
  00048	2a000083	 bcs         |$cleanUp$44818|
  0004c	e3a03caa	 mov         r3, #0xAA, 24
  00050	e59f7230	 ldr         r7, [pc, #0x230]
  00054	e383a055	 orr         r10, r3, #0x55
  00058	e286bb01	 add         r11, r6, #1, 22
  0005c		 |$LL16@BuildLayou|

; 992  :         {
; 993  :         // If we are at beginning of block, check if it isn't bad
; 994  :         if (sectorInBlock == 0)

  0005c	e3590000	 cmp         r9, #0
  00060	1a00000e	 bne         |$LN13@BuildLayou|

; 995  :             {
; 996  :             // Skip block if it is marked as bad
; 997  :             if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_BAD) != 0)

  00064	e1a00004	 mov         r0, r4
  00068	eb000000	 bl          FMD_GetBlockStatus
  0006c	e3100002	 tst         r0, #2
  00070	0a00000a	 beq         |$LN13@BuildLayou|

; 998  :                 {
; 999  :                 OALMSG(OAL_WARN, (L"WARN: "
; 1000 :                     L"Skip bad block %d\r\n", block
; 1001 :                     ));

  00074	e5973440	 ldr         r3, [r7, #0x440]
  00078	e3130002	 tst         r3, #2
  0007c	159f0200	 ldrne       r0, [pc, #0x200]
  00080	11a01004	 movne       r1, r4
  00084	1b000000	 blne        NKDbgPrintfW

; 1002 :                 block++;
; 1003 :                 pFlash->badBlocksAtPos++;

  00088	e5963018	 ldr         r3, [r6, #0x18]

; 1004 :                 sector += pFlash->sectorsPerBlock;

  0008c	e5962008	 ldr         r2, [r6, #8]
  00090	e2833001	 add         r3, r3, #1
  00094	e5863018	 str         r3, [r6, #0x18]
  00098	e0888002	 add         r8, r8, r2

; 1005 :                 continue;

  0009c	ea000020	 b           |$LN32@BuildLayou|
  000a0		 |$LN13@BuildLayou|

; 1006 :                 }
; 1007 :             }
; 1008 : 
; 1009 :         // Read sector
; 1010 :         if (!FMD_ReadSector(sector, pFlash->sectorBuffer, &sectorInfo, 1))

  000a0	e3a03001	 mov         r3, #1
  000a4	e28d2010	 add         r2, sp, #0x10
  000a8	e2861fb9	 add         r1, r6, #0xB9, 30
  000ac	e1a00008	 mov         r0, r8
  000b0	eb000000	 bl          FMD_ReadSector

; 1011 :             {
; 1012 :             }
; 1013 : 
; 1014 :         // Did we found both (MBR + FLS)?
; 1015 :         if ((mbrSector != -1) && IS_VALID_FLS(pFlash->sectorBuffer)) break;

  000b4	e3750001	 cmn         r5, #1
  000b8	0a000005	 beq         |$LN11@BuildLayou|
  000bc	e59f11bc	 ldr         r1, [pc, #0x1BC]
  000c0	e3a02008	 mov         r2, #8
  000c4	e2860fb9	 add         r0, r6, #0xB9, 30
  000c8	eb000000	 bl          memcmp
  000cc	e3500000	 cmp         r0, #0
  000d0	0a000017	 beq         |$LN29@BuildLayou|
  000d4		 |$LN11@BuildLayou|

; 1016 : 
; 1017 :         // Check for MBR in sector...
; 1018 :         mbrSector = IS_VALID_BOOTSEC(pFlash->sectorBuffer) ? sector : -1;

  000d4	e1db3eb2	 ldrh        r3, [r11, #0xE2]
  000d8	e153000a	 cmp         r3, r10
  000dc	1a000006	 bne         |$LN23@BuildLayou|
  000e0	e5d632e4	 ldrb        r3, [r6, #0x2E4]
  000e4	e35300eb	 cmp         r3, #0xEB
  000e8	0a000001	 beq         |$LN22@BuildLayou|
  000ec	e35300e9	 cmp         r3, #0xE9
  000f0	1a000001	 bne         |$LN23@BuildLayou|
  000f4		 |$LN22@BuildLayou|
  000f4	e1a05008	 mov         r5, r8
  000f8	ea000000	 b           |$LN24@BuildLayou|
  000fc		 |$LN23@BuildLayou|
  000fc	e3e05000	 mvn         r5, #0
  00100		 |$LN24@BuildLayou|

; 1019 : 
; 1020 :         // Move to next sector
; 1021 :         sector++;
; 1022 :         sectorInBlock++;
; 1023 :         if (sectorInBlock  >= pFlash->sectorsPerBlock)

  00100	e5963008	 ldr         r3, [r6, #8]
  00104	e2899001	 add         r9, r9, #1
  00108	e2888001	 add         r8, r8, #1
  0010c	e1590003	 cmp         r9, r3
  00110	3a000004	 bcc         |$LN10@BuildLayou|

; 1024 :             {
; 1025 :             block++;
; 1026 :             pFlash->blockPos++;

  00114	e5963014	 ldr         r3, [r6, #0x14]

; 1027 :             sectorInBlock = 0;

  00118	e3a09000	 mov         r9, #0
  0011c	e2833001	 add         r3, r3, #1
  00120	e5863014	 str         r3, [r6, #0x14]
  00124		 |$LN32@BuildLayou|

; 1024 :             {
; 1025 :             block++;
; 1026 :             pFlash->blockPos++;

  00124	e2844001	 add         r4, r4, #1

; 1027 :             sectorInBlock = 0;

  00128		 |$LN10@BuildLayou|
  00128	e596300c	 ldr         r3, [r6, #0xC]
  0012c	e1540003	 cmp         r4, r3
  00130	3affffc9	 bcc         |$LL16@BuildLayou|
  00134		 |$LN29@BuildLayou|

; 1028 :             }
; 1029 :         }
; 1030 : 
; 1031 :     // If we parse all flash without success, fail
; 1032 :     if (mbrSector == -1) goto cleanUp;

  00134	e3750001	 cmn         r5, #1
  00138	e3a07000	 mov         r7, #0
  0013c	0a000046	 beq         |$cleanUp$44818|

; 1033 : 
; 1034 :     // At this moment there is flash layout in buffer
; 1035 :     pSector = (FlashLayoutSector *)pFlash->sectorBuffer;

  00140	e2864fb9	 add         r4, r6, #0xB9, 30

; 1036 : 
; 1037 :     // Get and check number of reserved regions
; 1038 :     pFlash->reservedRegions = pSector->cbReservedEntries/sizeof(ReservedEntry);

  00144	e5943008	 ldr         r3, [r4, #8]
  00148	e1a03223	 mov         r3, r3, lsr #4
  0014c	e586301c	 str         r3, [r6, #0x1C]

; 1039 :     if (pFlash->reservedRegions > dimof(pFlash->reservedRegion)) goto cleanUp;

  00150	e3530010	 cmp         r3, #0x10
  00154	8a000040	 bhi         |$cleanUp$44818|

; 1040 : 
; 1041 :     // Copy reserved regions info
; 1042 :     memcpy(
; 1043 :         pFlash->reservedRegion, (ReservedEntry*)&pSector[1],
; 1044 :         pFlash->reservedRegions * sizeof(ReservedEntry)
; 1045 :         );

  00158	e1a02203	 mov         r2, r3, lsl #4
  0015c	e2841010	 add         r1, r4, #0x10
  00160	e2860020	 add         r0, r6, #0x20
  00164	eb000000	 bl          memcpy

; 1046 : 
; 1047 :     // Get and check number of regions
; 1048 :     pFlash->regions = pSector->cbRegionEntries/sizeof(FlashRegion);

  00168	e594000c	 ldr         r0, [r4, #0xC]
  0016c	e59f3108	 ldr         r3, [pc, #0x108]
  00170	e0821390	 umull       r1, r2, r0, r3
  00174	e0403002	 sub         r3, r0, r2
  00178	e08230a3	 add         r3, r2, r3, lsr #1
  0017c	e1a03223	 mov         r3, r3, lsr #4
  00180	e5863120	 str         r3, [r6, #0x120]

; 1049 :     if (pFlash->regions > dimof(pFlash->region)) goto cleanUp;

  00184	e3530010	 cmp         r3, #0x10
  00188	8a000033	 bhi         |$cleanUp$44818|

; 1050 : 
; 1051 :     // Copy regions info
; 1052 :     memcpy(
; 1053 :         pFlash->region, (UCHAR *)&pSector[1] + pSector->cbReservedEntries,
; 1054 :         pFlash->regions * sizeof(FlashRegion)
; 1055 :         );

  0018c	e5941008	 ldr         r1, [r4, #8]
  00190	e0633183	 rsb         r3, r3, r3, lsl #3
  00194	e1a02103	 mov         r2, r3, lsl #2
  00198	e0813004	 add         r3, r1, r4
  0019c	e2831010	 add         r1, r3, #0x10
  001a0	e2860f49	 add         r0, r6, #0x49, 30
  001a4	eb000000	 bl          memcpy

; 1056 : 
; 1057 :     // print flash regions to debug output
; 1058 :     OALMSG(OAL_LOG_INFO, (
; 1059 :         L"Flash contains %u reserved regions:\r\n", pFlash->reservedRegions
; 1060 :         ));

  001a8	e596101c	 ldr         r1, [r6, #0x1C]
  001ac	e59f00c4	 ldr         r0, [pc, #0xC4]
  001b0	eb000000	 bl          NKDbgPrintfW

; 1061 :     for (ix = 0; ix < pFlash->reservedRegions; ix++)

  001b4	e596301c	 ldr         r3, [r6, #0x1C]
  001b8	e3a05000	 mov         r5, #0
  001bc	e3530000	 cmp         r3, #0
  001c0	9a00000a	 bls         |$LN4@BuildLayou|
  001c4	e1a04006	 mov         r4, r6
  001c8		 |$LL6@BuildLayou|

; 1062 :         {
; 1063 :         OALMSG(OAL_LOG_INFO, (
; 1064 :             L"    Name=%s, Start block=%u, Blocks=%u\r\n",
; 1065 :             pFlash->reservedRegion[ix].szName,
; 1066 :             pFlash->reservedRegion[ix].dwStartBlock,
; 1067 :             pFlash->reservedRegion[ix].dwNumBlocks
; 1068 :             ));

  001c8	e594302c	 ldr         r3, [r4, #0x2C]
  001cc	e5942028	 ldr         r2, [r4, #0x28]
  001d0	e59f009c	 ldr         r0, [pc, #0x9C]
  001d4	e2841020	 add         r1, r4, #0x20
  001d8	eb000000	 bl          NKDbgPrintfW
  001dc	e596301c	 ldr         r3, [r6, #0x1C]
  001e0	e2855001	 add         r5, r5, #1
  001e4	e2844010	 add         r4, r4, #0x10
  001e8	e1550003	 cmp         r5, r3
  001ec	3afffff5	 bcc         |$LL6@BuildLayou|
  001f0		 |$LN4@BuildLayou|

; 1069 :         }
; 1070 : 
; 1071 :     OALMSG(OAL_LOG_INFO, (
; 1072 :         L"Flash contains %u regions:\r\n", pFlash->regions
; 1073 :         ));

  001f0	e5961120	 ldr         r1, [r6, #0x120]
  001f4	e59f0074	 ldr         r0, [pc, #0x74]
  001f8	eb000000	 bl          NKDbgPrintfW

; 1074 :     for (ix = 0; ix < pFlash->regions; ix++)

  001fc	e5963120	 ldr         r3, [r6, #0x120]
  00200	e3a08000	 mov         r8, #0
  00204	e3530000	 cmp         r3, #0
  00208	9a000012	 bls         |$LN1@BuildLayou|
  0020c	e1a07006	 mov         r7, r6
  00210		 |$LL3@BuildLayou|

; 1075 :         {
; 1076 :         OALMSG(OAL_LOG_INFO, (
; 1077 :             L"    Type=%d, Start=0x%x, NumP=0x%x, NumL=0x%x, Sec/Blk=0x%x, "
; 1078 :             L"B/Blk=0x%x, Compact=%d\r\n",
; 1079 :             pFlash->region[ix].regionType,
; 1080 :             pFlash->region[ix].dwStartPhysBlock,
; 1081 :             pFlash->region[ix].dwNumPhysBlocks,
; 1082 :             pFlash->region[ix].dwNumLogicalBlocks,
; 1083 :             pFlash->region[ix].dwSectorsPerBlock,
; 1084 :             pFlash->region[ix].dwBytesPerBlock,
; 1085 :             pFlash->region[ix].dwCompactBlocks
; 1086 :             ));

  00210	e597013c	 ldr         r0, [r7, #0x13C]
  00214	e597e138	 ldr         lr, [r7, #0x138]
  00218	e5974134	 ldr         r4, [r7, #0x134]
  0021c	e5975130	 ldr         r5, [r7, #0x130]
  00220	e597312c	 ldr         r3, [r7, #0x12C]
  00224	e5972128	 ldr         r2, [r7, #0x128]
  00228	e5971124	 ldr         r1, [r7, #0x124]
  0022c	e58d000c	 str         r0, [sp, #0xC]
  00230	e59f0034	 ldr         r0, [pc, #0x34]
  00234	e58de008	 str         lr, [sp, #8]
  00238	e58d4004	 str         r4, [sp, #4]
  0023c	e58d5000	 str         r5, [sp]
  00240	eb000000	 bl          NKDbgPrintfW
  00244	e5963120	 ldr         r3, [r6, #0x120]
  00248	e2888001	 add         r8, r8, #1
  0024c	e287701c	 add         r7, r7, #0x1C
  00250	e1580003	 cmp         r8, r3
  00254	3affffed	 bcc         |$LL3@BuildLayou|
  00258		 |$LN1@BuildLayou|

; 1087 :         }
; 1088 : 
; 1089 :     rc = TRUE;

  00258	e3a07001	 mov         r7, #1
  0025c		 |$cleanUp$44818|

; 1090 : 
; 1091 : cleanUp:
; 1092 :     return rc;
; 1093 : }

  0025c	e1a00007	 mov         r0, r7
  00260	e28dd018	 add         sp, sp, #0x18
  00264	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00268	e12fff1e	 bx          lr
  0026c		 |$LN36@BuildLayou|
  0026c		 |$LN37@BuildLayou|
  0026c	00000000	 DCD         |??_C@_1KM@MOFGEBEH@?$AA?5?$AA?5?$AA?5?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAN?$AAu?$AAm?$AAP?$AA?$DN?$AA0?$AAx@|
  00270		 |$LN38@BuildLayou|
  00270	00000000	 DCD         |??_C@_1DK@FBKBGCAF@?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?5?$AA?$CF?$AAu?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAo?$AAn?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  00274		 |$LN39@BuildLayou|
  00274	00000000	 DCD         |??_C@_1FC@IDNHMBKN@?$AA?5?$AA?5?$AA?5?$AA?5?$AAN?$AAa?$AAm?$AAe?$AA?$DN?$AA?$CF?$AAs?$AA?0?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?$DN?$AA?$CF?$AAu?$AA?0?$AA?5?$AAB?$AAl?$AAo@|
  00278		 |$LN40@BuildLayou|
  00278	00000000	 DCD         |??_C@_1EM@LIDNJIDD@?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?5?$AA?$CF?$AAu?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAo@|
  0027c		 |$LN41@BuildLayou|
  0027c	24924925	 DCD         0x24924925
  00280		 |$LN42@BuildLayou|
  00280	00000000	 DCD         |??_C@_08GODGKFDB@MSFLSH50?$AA@|
  00284		 |$LN43@BuildLayou|
  00284	00000000	 DCD         |??_C@_1DE@JONHLDDF@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00288		 |$LN44@BuildLayou|
  00288	00000000	 DCD         |dpCurSettings|
  0028c		 |$M45085|

			 ENDP  ; |BuildLayoutInfo|

	EXPORT	|OALFlashStoreWrite|
	EXPORT	|??_C@_1DO@DHDNAGME@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KE@CHNFEMEO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAr?$AAr?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@CIDFMKMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@FLMJGLLL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAu?$AAn?$AA?5?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JG@BJDMMIFN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IE@BDHDNOD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KK@LPEKIKDN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LA@OCBPILJB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KG@OCIIDMHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@NGCJEILF@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| [ DATA ] ; `string'
	IMPORT	|FMD_WriteSector|
	IMPORT	|FMD_SetBlockStatus|
	IMPORT	|FMD_EraseBlock|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T45187| DCD	|$LN87@OALFlashSt@5|
	DCD	0x4000f902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@DHDNAGME@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KE@CHNFEMEO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAr?$AAr?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, ",", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, " ", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "b", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@CIDFMKMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "a"
	DCB	0x0, "s", 0x0, " ", 0x0, "b", 0x0, "a", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@FLMJGLLL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAu?$AAn?$AA?5?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "R", 0x0, "u", 0x0, "n", 0x0, " "
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "f"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "s", 0x0, " ", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "m"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JG@BJDMMIFN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@BDHDNOD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "a", 0x0, "s"
	DCB	0x0, "e", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "r", 0x0, "k", 0x0, " ", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "a", 0x0, "s", 0x0, " ", 0x0, "b"
	DCB	0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KK@LPEKIKDN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "e"
	DCB	0x0, "k", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "b"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "(", 0x0, "a", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "s", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LA@OCBPILJB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "m"
	DCB	0x0, "u", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "b", 0x0, "e"
	DCB	0x0, " ", 0x0, "m", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i"
	DCB	0x0, "p", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "o", 0x0, "f"
	DCB	0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "(", 0x0, "o", 0x0, "f", 0x0, "f", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KG@OCIIDMHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, " ", 0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "m", 0x0, "u", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, " ", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "b"
	DCB	0x0, "o", 0x0, "u", 0x0, "n", 0x0, "d", 0x0, "a", 0x0, "r"
	DCB	0x0, "y", 0x0, " ", 0x0, "(", 0x0, "o", 0x0, "f", 0x0, "f"
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@NGCJEILF@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashStoreWrite| PROC

; 160  : {

  00000		 |$LN87@OALFlashSt@5|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd020	 sub         sp, sp, #0x20
  00008		 |$M45184|
  00008	e1a06003	 mov         r6, r3
  0000c	e1a03002	 mov         r3, r2
  00010	e58d3010	 str         r3, [sp, #0x10]
  00014	e58d600c	 str         r6, [sp, #0xC]
  00018	e1a08001	 mov         r8, r1
  0001c	e1a05000	 mov         r5, r0

; 161  :     BOOL rc = FALSE;
; 162  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 163  :     ULONG offset, sector, block;
; 164  :     ULONG sectorInBlock, sectorDataSize;
; 165  :     ULONG startSector, startBlock;
; 166  :     SectorInfo sectorInfo, *pSectorInfo;
; 167  :     ULONG retry;
; 168  : 
; 169  : 
; 170  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 171  :         L"+OALFlashStoreWrite(0x%08x, 0x%08x, 0x%08x, 0x%08x, %d, %d)\r\n",
; 172  :         hFlash, start, pData, dataSize, includeSectorInfo, offsetReservedBlocks
; 173  :         ));

  00020	e59f43b8	 ldr         r4, [pc, #0x3B8]
  00024	e59d9048	 ldr         r9, [sp, #0x48]
  00028	e59d7044	 ldr         r7, [sp, #0x44]
  0002c	e594e440	 ldr         lr, [r4, #0x440]
  00030	e3a0a000	 mov         r10, #0
  00034	e31e0a02	 tst         lr, #2, 20
  00038	131e0004	 tstne       lr, #4
  0003c	159f0398	 ldrne       r0, [pc, #0x398]
  00040	11a02008	 movne       r2, r8
  00044	11a01005	 movne       r1, r5
  00048	158d9008	 strne       r9, [sp, #8]
  0004c	158d7004	 strne       r7, [sp, #4]
  00050	158d6000	 strne       r6, [sp]
  00054	1b000000	 blne        NKDbgPrintfW

; 174  : 
; 175  :     sectorDataSize = pFlash->sectorSize;

  00058	e5956004	 ldr         r6, [r5, #4]

; 176  :     if (includeSectorInfo) sectorDataSize += sizeof(SectorInfo);

  0005c	e3570000	 cmp         r7, #0

; 177  : 
; 178  :     // First get socket start block number
; 179  :     startSector = start/pFlash->sectorSize;

  00060	e1a01008	 mov         r1, r8
  00064	e1a0b006	 mov         r11, r6
  00068	e1a00006	 mov         r0, r6
  0006c	1286b008	 addne       r11, r6, #8
  00070	eb000000	 bl          __rt_udiv

; 180  :     startBlock = startSector/pFlash->sectorsPerBlock;

  00074	e5959008	 ldr         r9, [r5, #8]
  00078	e1a07000	 mov         r7, r0
  0007c	e1a01007	 mov         r1, r7
  00080	e1a00009	 mov         r0, r9
  00084	eb000000	 bl          __rt_udiv

; 181  : 
; 182  :     // We support only write on sector boundary...
; 183  :     offset = start - startSector * pFlash->sectorSize;

  00088	e0030796	 mul         r3, r6, r7
  0008c	e1a06000	 mov         r6, r0
  00090	e0581003	 subs        r1, r8, r3

; 184  :     if (offset > 0)

  00094	0a000005	 beq         |$LN23@OALFlashSt@5|
  00098	e5943440	 ldr         r3, [r4, #0x440]

; 185  :         {
; 186  :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreWrite: "
; 187  :             L"Flash write must start on sector boundary (offset %d)\r\n",
; 188  :             offset
; 189  :             ));

  0009c	e3130001	 tst         r3, #1
  000a0	0a00005f	 beq         |$cleanUp$44525|
  000a4	e59f032c	 ldr         r0, [pc, #0x32C]
  000a8	eb000000	 bl          NKDbgPrintfW

; 190  :         goto cleanUp;

  000ac	ea00005c	 b           |$cleanUp$44525|
  000b0		 |$LN23@OALFlashSt@5|

; 191  :         }
; 192  : 
; 193  :     // And only full sectors
; 194  :     offset = dataSize - (dataSize/sectorDataSize) * sectorDataSize;

  000b0	e59d100c	 ldr         r1, [sp, #0xC]
  000b4	e1a0000b	 mov         r0, r11
  000b8	eb000000	 bl          __rt_udiv
  000bc	e59d200c	 ldr         r2, [sp, #0xC]
  000c0	e0030b90	 mul         r3, r0, r11
  000c4	e0521003	 subs        r1, r2, r3

; 195  :     if (offset > 0)

  000c8	0a000005	 beq         |$LN22@OALFlashSt@5|
  000cc	e5943440	 ldr         r3, [r4, #0x440]

; 196  :         {
; 197  :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreRead: "
; 198  :             L"Flash read size must be multiple of sector size (offset %d)\r\n",
; 199  :             offset
; 200  :             ));

  000d0	e3130001	 tst         r3, #1
  000d4	0a000052	 beq         |$cleanUp$44525|
  000d8	e59f02f4	 ldr         r0, [pc, #0x2F4]
  000dc	eb000000	 bl          NKDbgPrintfW
  000e0	ea00004f	 b           |$cleanUp$44525|
  000e4		 |$LN22@OALFlashSt@5|

; 201  :         goto cleanUp;
; 202  :         }
; 203  : 
; 204  :     // Offset reserved blocks if required
; 205  :     if (offsetReservedBlocks)

  000e4	e59d3048	 ldr         r3, [sp, #0x48]

; 206  :         {
; 207  :         startBlock +=  pFlash->reservedBlocks;
; 208  :         startSector += pFlash->reservedBlocks * pFlash->sectorsPerBlock;
; 209  :         }
; 210  : 
; 211  :     // Seek to start block
; 212  :     if (!SeekToBlock(pFlash, startBlock))

  000e8	e1a00005	 mov         r0, r5
  000ec	e3530000	 cmp         r3, #0
  000f0	15953010	 ldrne       r3, [r5, #0x10]
  000f4	10866003	 addne       r6, r6, r3
  000f8	e1a01006	 mov         r1, r6
  000fc	10277993	 mlane       r7, r3, r9, r7
  00100	eb000000	 bl          SeekToBlock
  00104	e3500000	 cmp         r0, #0
  00108	1a000008	 bne         |$LN20@OALFlashSt@5|
  0010c	e5943440	 ldr         r3, [r4, #0x440]

; 213  :         {
; 214  :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreWrite: "
; 215  :             L"Failed seek to block %d (address 0x%08x, %d bad blocks)\r\n",
; 216  :             startBlock, start, pFlash->badBlocksAtPos
; 217  :             ));

  00110	e3130001	 tst         r3, #1
  00114	0a000042	 beq         |$cleanUp$44525|
  00118	e5953018	 ldr         r3, [r5, #0x18]
  0011c	e59f02ac	 ldr         r0, [pc, #0x2AC]
  00120	e1a02008	 mov         r2, r8
  00124	e1a01006	 mov         r1, r6
  00128	eb000000	 bl          NKDbgPrintfW

; 218  :         goto cleanUp;

  0012c	ea00003c	 b           |$cleanUp$44525|
  00130		 |$LN20@OALFlashSt@5|

; 219  :         }
; 220  : 
; 221  :     // Start write to flash
; 222  :     offset = 0;
; 223  :     sector = startSector + pFlash->badBlocksAtPos * pFlash->sectorsPerBlock;

  00130	e5951018	 ldr         r1, [r5, #0x18]
  00134	e5952008	 ldr         r2, [r5, #8]
  00138	e3a09000	 mov         r9, #0

; 224  :     block = startBlock + pFlash->badBlocksAtPos;

  0013c	e0816006	 add         r6, r1, r6

; 225  :     sectorInBlock = sector - block * pFlash->sectorsPerBlock;

  00140	e0030692	 mul         r3, r2, r6
  00144	e0287291	 mla         r8, r1, r2, r7

; 226  :     while (offset < dataSize)

  00148	e59d200c	 ldr         r2, [sp, #0xC]
  0014c	e3520000	 cmp         r2, #0
  00150	e048a003	 sub         r10, r8, r3
  00154	0a000094	 beq         |$LN75@OALFlashSt@5|
  00158	e3a03cff	 mov         r3, #0xFF, 24
  0015c	e38310ff	 orr         r1, r3, #0xFF
  00160	e58d1014	 str         r1, [sp, #0x14]
  00164		 |$LN81@OALFlashSt@5|
  00164	e3a000fc	 mov         r0, #0xFC
  00168	e3e02000	 mvn         r2, #0

; 227  :         {
; 228  :         // If it is first sector in block, check and erase block
; 229  :         if (sectorInBlock == 0)

  0016c	e35a0000	 cmp         r10, #0
  00170	1a000038	 bne         |$LN72@OALFlashSt@5|

; 230  :             {
; 231  :             // First check if block exists
; 232  :             if (block >= pFlash->blocksOnFlash)

  00174	e595300c	 ldr         r3, [r5, #0xC]
  00178	e1560003	 cmp         r6, r3
  0017c	2a000084	 bcs         |$LN66@OALFlashSt@5|

; 238  :                 }
; 239  :             // Skip block if it is marked as bad
; 240  :             if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_BAD) != 0)

  00180	e1a00006	 mov         r0, r6
  00184	eb000000	 bl          FMD_GetBlockStatus
  00188	e3100002	 tst         r0, #2
  0018c	0a00000b	 beq         |$LN15@OALFlashSt@5|

; 241  :                 {
; 242  :                 OALMSG(OAL_WARN, (L"WARN: "
; 243  :                     L"Skip bad block %d\r\n", block
; 244  :                     ));

  00190	e5943440	 ldr         r3, [r4, #0x440]
  00194	e3130002	 tst         r3, #2
  00198	159f022c	 ldrne       r0, [pc, #0x22C]
  0019c	11a01006	 movne       r1, r6
  001a0	1b000000	 blne        NKDbgPrintfW
  001a4		 |$LN37@OALFlashSt@5|

; 245  :                 block++;
; 246  :                 pFlash->badBlocksAtPos++;

  001a4	e5953018	 ldr         r3, [r5, #0x18]

; 247  :                 sector += pFlash->sectorsPerBlock;

  001a8	e5952008	 ldr         r2, [r5, #8]
  001ac	e2866001	 add         r6, r6, #1
  001b0	e2833001	 add         r3, r3, #1
  001b4	e5853018	 str         r3, [r5, #0x18]
  001b8	e0888002	 add         r8, r8, r2

; 248  :                 continue;

  001bc	ea00005b	 b           |$LN70@OALFlashSt@5|
  001c0		 |$LN15@OALFlashSt@5|

; 249  :                 }
; 250  :             // Erase block
; 251  :             retry = 4;

  001c0	e3a07004	 mov         r7, #4
  001c4		 |$LL14@OALFlashSt@5|

; 252  :             do
; 253  :                 {
; 254  :                 if (FMD_EraseBlock(block)) break;

  001c4	e1a00006	 mov         r0, r6
  001c8	eb000000	 bl          FMD_EraseBlock
  001cc	e3500000	 cmp         r0, #0
  001d0	1a000001	 bne         |$LN12@OALFlashSt@5|

; 255  :                 }
; 256  :             while (--retry > 0);

  001d4	e2577001	 subs        r7, r7, #1
  001d8	1afffff9	 bne         |$LL14@OALFlashSt@5|
  001dc		 |$LN12@OALFlashSt@5|

; 257  :             // If erase failed
; 258  :             if (retry == 0)

  001dc	e3570000	 cmp         r7, #0
  001e0	1a000019	 bne         |$LN80@OALFlashSt@5|

; 259  :                 {
; 260  :                 OALMSG(OAL_WARN, (L"WARN: OALFlashStoreWrite: "
; 261  :                     L"Failed erase block %d, mark it as bad\r\n", block
; 262  :                     ));

  001e4	e5943440	 ldr         r3, [r4, #0x440]
  001e8	e3130002	 tst         r3, #2
  001ec	159f01d4	 ldrne       r0, [pc, #0x1D4]
  001f0	11a01006	 movne       r1, r6
  001f4	1b000000	 blne        NKDbgPrintfW

; 263  :                 if (!FMD_SetBlockStatus(block, BLOCK_STATUS_BAD))

  001f8	e3a01002	 mov         r1, #2
  001fc	e1a00006	 mov         r0, r6
  00200	eb000000	 bl          FMD_SetBlockStatus
  00204	e3500000	 cmp         r0, #0
  00208	1affffe5	 bne         |$LN37@OALFlashSt@5|
  0020c	e5943440	 ldr         r3, [r4, #0x440]

; 264  :                     {
; 265  :                     OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreWrite: "
; 266  :                         L"Failed set block %d status as bad\r\n", block
; 267  :                         ));

  00210	e3130001	 tst         r3, #1
  00214	159f01a8	 ldrne       r0, [pc, #0x1A8]
  00218	11a01006	 movne       r1, r6
  0021c	1b000000	 blne        NKDbgPrintfW
  00220		 |$LN79@OALFlashSt@5|

; 330  :         }
; 331  : 
; 332  :     // Done
; 333  :     rc = TRUE;

  00220	e3a0a000	 mov         r10, #0
  00224		 |$cleanUp$44525|

; 161  :     BOOL rc = FALSE;
; 162  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 163  :     ULONG offset, sector, block;
; 164  :     ULONG sectorInBlock, sectorDataSize;
; 165  :     ULONG startSector, startBlock;
; 166  :     SectorInfo sectorInfo, *pSectorInfo;
; 167  :     ULONG retry;
; 168  : 
; 169  : 
; 170  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 171  :         L"+OALFlashStoreWrite(0x%08x, 0x%08x, 0x%08x, 0x%08x, %d, %d)\r\n",
; 172  :         hFlash, start, pData, dataSize, includeSectorInfo, offsetReservedBlocks
; 173  :         ));

  00224	e5943440	 ldr         r3, [r4, #0x440]

; 334  : 
; 335  : cleanUp:
; 336  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"-OALFlashStoreWrite(rc = %d)\r\n", rc));

  00228	e3130a02	 tst         r3, #2, 20
  0022c	13130004	 tstne       r3, #4
  00230	159f0188	 ldrne       r0, [pc, #0x188]
  00234	11a0100a	 movne       r1, r10
  00238	1b000000	 blne        NKDbgPrintfW

; 337  :     return rc;
; 338  : }

  0023c	e1a0000a	 mov         r0, r10
  00240	e28dd020	 add         sp, sp, #0x20
  00244	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00248	e12fff1e	 bx          lr
  0024c		 |$LN80@OALFlashSt@5|

; 226  :     while (offset < dataSize)

  0024c	e59d1014	 ldr         r1, [sp, #0x14]
  00250	e3e02000	 mvn         r2, #0
  00254	e3a000fc	 mov         r0, #0xFC
  00258		 |$LN72@OALFlashSt@5|

; 268  :                     goto cleanUp;
; 269  :                     }
; 270  :                 block++;
; 271  :                 pFlash->badBlocksAtPos++;
; 272  :                 sector += pFlash->sectorsPerBlock;
; 273  :                 continue;
; 274  :                 }
; 275  :             }
; 276  : 
; 277  :         // Prepare sector info
; 278  :         if (includeSectorInfo)

  00258	e59d3044	 ldr         r3, [sp, #0x44]
  0025c	e3530000	 cmp         r3, #0
  00260	0a00000c	 beq         |$LN8@OALFlashSt@5|

; 279  :             {
; 280  :             pSectorInfo = (SectorInfo*)(pData + offset + pFlash->sectorSize);

  00264	e5953004	 ldr         r3, [r5, #4]
  00268	e59de010	 ldr         lr, [sp, #0x10]
  0026c	e0833009	 add         r3, r3, r9
  00270	e083200e	 add         r2, r3, lr

; 281  :             if (pSectorInfo->bBadBlock != 0xFF)

  00274	e5d23005	 ldrb        r3, [r2, #5]
  00278	e35300ff	 cmp         r3, #0xFF
  0027c	0a00000c	 beq         |$LN6@OALFlashSt@5|
  00280	e5943440	 ldr         r3, [r4, #0x440]

; 282  :                 {
; 283  :                 OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreWrite: "
; 284  :                     L"Corrupted data, sector info can't have set bad block\r\n"
; 285  :                     ));

  00284	e3130001	 tst         r3, #1
  00288	0affffe4	 beq         |$LN79@OALFlashSt@5|
  0028c	e59f0128	 ldr         r0, [pc, #0x128]
  00290	eb000000	 bl          NKDbgPrintfW
  00294	eaffffe1	 b           |$LN79@OALFlashSt@5|
  00298		 |$LN8@OALFlashSt@5|

; 286  :                 goto cleanUp;
; 287  :                 }
; 288  :             }
; 289  :         else
; 290  :             {
; 291  :             memset(&sectorInfo, 0xFF, sizeof(sectorInfo));
; 292  :             if (!offsetReservedBlocks) sectorInfo.bOEMReserved = (BYTE)

  00298	e59d3048	 ldr         r3, [sp, #0x48]
  0029c	e59de010	 ldr         lr, [sp, #0x10]
  002a0	e58d2018	 str         r2, [sp, #0x18]
  002a4	e3530000	 cmp         r3, #0
  002a8	e58d201c	 str         r2, [sp, #0x1C]

; 293  :                 ~(OEM_BLOCK_RESERVED|OEM_BLOCK_READONLY);

  002ac	05cd001c	 streqb      r0, [sp, #0x1C]

; 294  :             pSectorInfo = &sectorInfo;

  002b0	e28d2018	 add         r2, sp, #0x18
  002b4		 |$LN6@OALFlashSt@5|

; 295  :             }
; 296  : 
; 297  :         // Write sector only if it isn't empty
; 298  :         if (!IsSectorEmpty(pData + offset, pFlash->sectorSize, pSectorInfo))

  002b4	e5923000	 ldr         r3, [r2]
  002b8	e3730001	 cmn         r3, #1
  002bc	1a000020	 bne         |$LN71@OALFlashSt@5|
  002c0	e1d230b6	 ldrh        r3, [r2, #6]
  002c4	e1530001	 cmp         r3, r1
  002c8	1a00001d	 bne         |$LN71@OALFlashSt@5|
  002cc	e5d23004	 ldrb        r3, [r2, #4]
  002d0	e35300ff	 cmp         r3, #0xFF
  002d4	1a00001a	 bne         |$LN71@OALFlashSt@5|
  002d8	e5953004	 ldr         r3, [r5, #4]
  002dc	e3a01000	 mov         r1, #0
  002e0	e3530000	 cmp         r3, #0
  002e4	9a000007	 bls         |$LN73@OALFlashSt@5|
  002e8	e089000e	 add         r0, r9, lr
  002ec		 |$LL52@OALFlashSt@5|
  002ec	e7d03001	 ldrb        r3, [r0, +r1]
  002f0	e35300ff	 cmp         r3, #0xFF
  002f4	1a000012	 bne         |$LN71@OALFlashSt@5|
  002f8	e5953004	 ldr         r3, [r5, #4]
  002fc	e2811001	 add         r1, r1, #1
  00300	e1510003	 cmp         r1, r3
  00304	3afffff8	 bcc         |$LL52@OALFlashSt@5|
  00308		 |$cleanUp$45128|
  00308		 |$LN73@OALFlashSt@5|

; 314  :                     }
; 315  :                 // If we get there we can't recover
; 316  :                 goto cleanUp;
; 317  :                 }
; 318  :             }
; 319  : 
; 320  :         // Move to next sector
; 321  :         sector++;
; 322  :         sectorInBlock++;
; 323  :         if (sectorInBlock  >= pFlash->sectorsPerBlock)

  00308	e5953008	 ldr         r3, [r5, #8]
  0030c	e28aa001	 add         r10, r10, #1
  00310	e2888001	 add         r8, r8, #1
  00314	e15a0003	 cmp         r10, r3

; 324  :             {
; 325  :             block++;
; 326  :             pFlash->blockPos++;

  00318	25953014	 ldrcs       r3, [r5, #0x14]
  0031c	22866001	 addcs       r6, r6, #1

; 327  :             sectorInBlock = 0;

  00320	23a0a000	 movcs       r10, #0
  00324	22833001	 addcs       r3, r3, #1
  00328	25853014	 strcs       r3, [r5, #0x14]

; 328  :             }
; 329  :         offset += sectorDataSize;

  0032c	e089900b	 add         r9, r9, r11
  00330		 |$LN70@OALFlashSt@5|
  00330	e59d300c	 ldr         r3, [sp, #0xC]
  00334	e1590003	 cmp         r9, r3
  00338	2a00001b	 bcs         |$LN75@OALFlashSt@5|

; 226  :     while (offset < dataSize)

  0033c	e59d1014	 ldr         r1, [sp, #0x14]
  00340	eaffff87	 b           |$LN81@OALFlashSt@5|
  00344		 |$LN71@OALFlashSt@5|

; 299  :             {
; 300  :             // Write sector
; 301  :             if (!FMD_WriteSector(sector, pData + offset, pSectorInfo, 1))

  00344	e3a03001	 mov         r3, #1
  00348	e089100e	 add         r1, r9, lr
  0034c	e1a00008	 mov         r0, r8
  00350	eb000000	 bl          FMD_WriteSector
  00354	e3500000	 cmp         r0, #0
  00358	1affffea	 bne         |$LN73@OALFlashSt@5|
  0035c	e5943440	 ldr         r3, [r4, #0x440]

; 302  :                 {
; 303  :                 OALMSG(OAL_WARN, (L"WARN: OALFlashStoreWrite: "
; 304  :                     L"Failed write sector %d (%d sector in block %d)\r\n",
; 305  :                     sector, sectorInBlock, block
; 306  :                     ));

  00360	e3130002	 tst         r3, #2
  00364	159f004c	 ldrne       r0, [pc, #0x4C]
  00368	11a03006	 movne       r3, r6
  0036c	11a0200a	 movne       r2, r10
  00370	11a01008	 movne       r1, r8
  00374	1b000000	 blne        NKDbgPrintfW

; 307  :                 // Try erase block and write again
; 308  :                 if (offset >= (sectorInBlock * sectorDataSize))

  00378	e0030b9a	 mul         r3, r10, r11
  0037c	e1590003	 cmp         r9, r3
  00380	3affffa6	 bcc         |$LN79@OALFlashSt@5|

; 309  :                     {
; 310  :                     offset -= (sectorInBlock * sectorDataSize);
; 311  :                     sector -= sectorInBlock;

  00384	e048800a	 sub         r8, r8, r10

; 312  :                     sectorInBlock = 0;

  00388	e3a0a000	 mov         r10, #0
  0038c	e0499003	 sub         r9, r9, r3

; 313  :                     continue;

  00390	eaffffe6	 b           |$LN70@OALFlashSt@5|
  00394		 |$LN66@OALFlashSt@5|

; 161  :     BOOL rc = FALSE;
; 162  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 163  :     ULONG offset, sector, block;
; 164  :     ULONG sectorInBlock, sectorDataSize;
; 165  :     ULONG startSector, startBlock;
; 166  :     SectorInfo sectorInfo, *pSectorInfo;
; 167  :     ULONG retry;
; 168  : 
; 169  : 
; 170  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 171  :         L"+OALFlashStoreWrite(0x%08x, 0x%08x, 0x%08x, 0x%08x, %d, %d)\r\n",
; 172  :         hFlash, start, pData, dataSize, includeSectorInfo, offsetReservedBlocks
; 173  :         ));

  00394	e5943440	 ldr         r3, [r4, #0x440]

; 233  :                 {
; 234  :                 OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreWrite: "
; 235  :                     L"Run out of blocks on flash memory\r\n"
; 236  :                     ));

  00398	e3130001	 tst         r3, #1
  0039c	0affff9f	 beq         |$LN79@OALFlashSt@5|
  003a0	e59f000c	 ldr         r0, [pc, #0xC]
  003a4	eb000000	 bl          NKDbgPrintfW

; 237  :                 goto cleanUp;

  003a8	eaffff9c	 b           |$LN79@OALFlashSt@5|
  003ac		 |$LN75@OALFlashSt@5|

; 330  :         }
; 331  : 
; 332  :     // Done
; 333  :     rc = TRUE;

  003ac	e3a0a001	 mov         r10, #1
  003b0	eaffff9b	 b           |$cleanUp$44525|
  003b4		 |$LN88@OALFlashSt@5|
  003b4		 |$LN89@OALFlashSt@5|
  003b4	00000000	 DCD         |??_C@_1HO@FLMJGLLL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAR?$AAu?$AAn?$AA?5?$AAo@|
  003b8		 |$LN90@OALFlashSt@5|
  003b8	00000000	 DCD         |??_C@_1JG@BJDMMIFN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@|
  003bc		 |$LN91@OALFlashSt@5|
  003bc	00000000	 DCD         |??_C@_1KE@CHNFEMEO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAC?$AAo?$AAr?$AAr?$AAu@|
  003c0		 |$LN92@OALFlashSt@5|
  003c0	00000000	 DCD         |??_C@_1DO@DHDNAGME@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  003c4		 |$LN93@OALFlashSt@5|
  003c4	00000000	 DCD         |??_C@_1HO@CIDFMKMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@|
  003c8		 |$LN94@OALFlashSt@5|
  003c8	00000000	 DCD         |??_C@_1IE@BDHDNOD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@|
  003cc		 |$LN95@OALFlashSt@5|
  003cc	00000000	 DCD         |??_C@_1DE@JONHLDDF@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  003d0		 |$LN96@OALFlashSt@5|
  003d0	00000000	 DCD         |??_C@_1KK@LPEKIKDN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@|
  003d4		 |$LN97@OALFlashSt@5|
  003d4	00000000	 DCD         |??_C@_1LA@OCBPILJB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5@|
  003d8		 |$LN98@OALFlashSt@5|
  003d8	00000000	 DCD         |??_C@_1KG@OCIIDMHN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh@|
  003dc		 |$LN99@OALFlashSt@5|
  003dc	00000000	 DCD         |??_C@_1HM@NGCJEILF@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@|
  003e0		 |$LN100@OALFlashSt@5|
  003e0	00000000	 DCD         |dpCurSettings|
  003e4		 |$M45185|

			 ENDP  ; |OALFlashStoreWrite|

	EXPORT	|OALFlashStoreRead|
	EXPORT	|??_C@_1DM@KJHIDCKC@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JE@BGBADADK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@LNEGDDBN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAu?$AAn?$AA?5?$AAo?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KI@BBPBIBEF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KC@GLMKKJJO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@HAFKLFGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45259| DCD	|$LN55@OALFlashSt@6|
	DCD	0x4000b302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@KJHIDCKC@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "("
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@BGBADADK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@LNEGDDBN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAu?$AAn?$AA?5?$AAo?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "R", 0x0, "u", 0x0, "n", 0x0, " ", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " "
	DCB	0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "s"
	DCB	0x0, " ", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KI@BBPBIBEF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "e", 0x0, "k"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "b", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "(", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "s", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KC@GLMKKJJO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "m", 0x0, "u", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "b", 0x0, "o", 0x0, "u"
	DCB	0x0, "n", 0x0, "d", 0x0, "a", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "(", 0x0, "o", 0x0, "f", 0x0, "f", 0x0, "s", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@HAFKLFGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashStoreRead| PROC

; 351  : {

  00000		 |$LN55@OALFlashSt@6|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd020	 sub         sp, sp, #0x20
  00008		 |$M45256|
  00008	e1a06003	 mov         r6, r3
  0000c	e1a03002	 mov         r3, r2
  00010	e58d300c	 str         r3, [sp, #0xC]
  00014	e58d6010	 str         r6, [sp, #0x10]
  00018	e1a08001	 mov         r8, r1
  0001c	e1a04000	 mov         r4, r0

; 352  :     BOOL rc = FALSE;
; 353  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 354  :     ULONG offset, sector, block;
; 355  :     ULONG sectorInBlock, sectorDataSize;
; 356  :     ULONG startSector, startBlock;
; 357  :     SectorInfo sectorInfo, *pSectorInfo;
; 358  :     ULONG retry;
; 359  : 
; 360  : 
; 361  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 362  :         L"+OALFlashStoreRead(0x%08x, 0x%08x, 0x%08x, 0x%08x, %d, %d)\r\n",
; 363  :         hFlash, start, pData, dataSize, includeSectorInfo, offsetReservedBlocks
; 364  :         ));

  00020	e59f5288	 ldr         r5, [pc, #0x288]
  00024	e59d9048	 ldr         r9, [sp, #0x48]
  00028	e59d7044	 ldr         r7, [sp, #0x44]
  0002c	e595e440	 ldr         lr, [r5, #0x440]
  00030	e31e0a02	 tst         lr, #2, 20
  00034	131e0004	 tstne       lr, #4
  00038	159f0288	 ldrne       r0, [pc, #0x288]
  0003c	11a02008	 movne       r2, r8
  00040	11a01004	 movne       r1, r4
  00044	158d9008	 strne       r9, [sp, #8]
  00048	158d7004	 strne       r7, [sp, #4]
  0004c	158d6000	 strne       r6, [sp]
  00050	1b000000	 blne        NKDbgPrintfW

; 365  : 
; 366  :     sectorDataSize = pFlash->sectorSize;

  00054	e5946004	 ldr         r6, [r4, #4]

; 367  :     if (includeSectorInfo) sectorDataSize += sizeof(SectorInfo);

  00058	e3570000	 cmp         r7, #0

; 368  : 
; 369  :     // First get socket start block number
; 370  :     startSector = start/pFlash->sectorSize;

  0005c	e1a01008	 mov         r1, r8
  00060	e1a0b006	 mov         r11, r6
  00064	e1a00006	 mov         r0, r6
  00068	1286b008	 addne       r11, r6, #8
  0006c	eb000000	 bl          __rt_udiv

; 371  :     startBlock = startSector/pFlash->sectorsPerBlock;

  00070	e594a008	 ldr         r10, [r4, #8]
  00074	e1a07000	 mov         r7, r0
  00078	e1a01007	 mov         r1, r7
  0007c	e1a0000a	 mov         r0, r10
  00080	eb000000	 bl          __rt_udiv

; 372  : 
; 373  :     // We support only read on sector boundary...
; 374  :     offset = start - startSector * pFlash->sectorSize;

  00084	e0030796	 mul         r3, r6, r7
  00088	e1a06000	 mov         r6, r0
  0008c	e0581003	 subs        r1, r8, r3

; 375  :     if (offset > 0)

  00090	0a00000f	 beq         |$LN17@OALFlashSt@6|
  00094	e5953440	 ldr         r3, [r5, #0x440]

; 376  :         {
; 377  :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreRead: "
; 378  :             L"Flash read must start on sector boundary (offset %d)\r\n",
; 379  :             offset
; 380  :             ));

  00098	e3130001	 tst         r3, #1
  0009c	0a000001	 beq         |$LN49@OALFlashSt@6|
  000a0	e59f021c	 ldr         r0, [pc, #0x21C]
  000a4		 |$LN51@OALFlashSt@6|
  000a4	eb000000	 bl          NKDbgPrintfW
  000a8		 |$LN49@OALFlashSt@6|

; 482  :         }
; 483  : 
; 484  :     // Done
; 485  :     rc = TRUE;

  000a8	e3a04000	 mov         r4, #0
  000ac		 |$cleanUp$44601|

; 352  :     BOOL rc = FALSE;
; 353  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 354  :     ULONG offset, sector, block;
; 355  :     ULONG sectorInBlock, sectorDataSize;
; 356  :     ULONG startSector, startBlock;
; 357  :     SectorInfo sectorInfo, *pSectorInfo;
; 358  :     ULONG retry;
; 359  : 
; 360  : 
; 361  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 362  :         L"+OALFlashStoreRead(0x%08x, 0x%08x, 0x%08x, 0x%08x, %d, %d)\r\n",
; 363  :         hFlash, start, pData, dataSize, includeSectorInfo, offsetReservedBlocks
; 364  :         ));

  000ac	e5953440	 ldr         r3, [r5, #0x440]

; 486  : 
; 487  : cleanUp:
; 488  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"-OALFlashStoreRead(rc = %d)\r\n", rc));

  000b0	e3130a02	 tst         r3, #2, 20
  000b4	13130004	 tstne       r3, #4
  000b8	159f0200	 ldrne       r0, [pc, #0x200]
  000bc	11a01004	 movne       r1, r4
  000c0	1b000000	 blne        NKDbgPrintfW

; 489  :     return rc;
; 490  : }

  000c4	e1a00004	 mov         r0, r4
  000c8	e28dd020	 add         sp, sp, #0x20
  000cc	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN17@OALFlashSt@6|

; 381  :         goto cleanUp;
; 382  :         }
; 383  : 
; 384  :     // And only full sectors
; 385  :     offset = dataSize - (dataSize/sectorDataSize) * sectorDataSize;

  000d4	e59d1010	 ldr         r1, [sp, #0x10]
  000d8	e1a0000b	 mov         r0, r11
  000dc	eb000000	 bl          __rt_udiv
  000e0	e59d2010	 ldr         r2, [sp, #0x10]
  000e4	e0030b90	 mul         r3, r0, r11
  000e8	e0521003	 subs        r1, r2, r3

; 386  :     if (offset > 0)

  000ec	0a000004	 beq         |$LN16@OALFlashSt@6|
  000f0	e5953440	 ldr         r3, [r5, #0x440]

; 387  :         {
; 388  :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreRead: "
; 389  :             L"Flash read size must be multiple of sector size (offset %d)\r\n",
; 390  :             offset
; 391  :             ));

  000f4	e3130001	 tst         r3, #1
  000f8	0affffea	 beq         |$LN49@OALFlashSt@6|
  000fc	e59f01b8	 ldr         r0, [pc, #0x1B8]

; 392  :         goto cleanUp;

  00100	eaffffe7	 b           |$LN51@OALFlashSt@6|
  00104		 |$LN16@OALFlashSt@6|

; 393  :         }
; 394  : 
; 395  :     // Offset reserved blocks if required
; 396  :     if (offsetReservedBlocks)

  00104	e3590000	 cmp         r9, #0

; 397  :         {
; 398  :         startBlock +=  pFlash->reservedBlocks;

  00108	15943010	 ldrne       r3, [r4, #0x10]

; 399  :         startSector += pFlash->reservedBlocks * pFlash->sectorsPerBlock;
; 400  :         }
; 401  : 
; 402  :     // Seek to start block
; 403  :     if (!SeekToBlock(pFlash, startBlock))

  0010c	e1a00004	 mov         r0, r4
  00110	10866003	 addne       r6, r6, r3
  00114	e1a01006	 mov         r1, r6
  00118	10277a93	 mlane       r7, r3, r10, r7
  0011c	eb000000	 bl          SeekToBlock
  00120	e3500000	 cmp         r0, #0
  00124	1a000008	 bne         |$LN14@OALFlashSt@6|
  00128	e5953440	 ldr         r3, [r5, #0x440]

; 404  :         {
; 405  :         OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreRead: "
; 406  :             L"Failed seek to block %d (address 0x%08x, %d bad blocks)\r\n",
; 407  :             startBlock, start, pFlash->badBlocksAtPos
; 408  :             ));

  0012c	e3130001	 tst         r3, #1
  00130	0affffdc	 beq         |$LN49@OALFlashSt@6|
  00134	e5943018	 ldr         r3, [r4, #0x18]
  00138	e59f0178	 ldr         r0, [pc, #0x178]
  0013c	e1a02008	 mov         r2, r8
  00140	e1a01006	 mov         r1, r6
  00144	eb000000	 bl          NKDbgPrintfW

; 409  :         goto cleanUp;

  00148	eaffffd6	 b           |$LN49@OALFlashSt@6|
  0014c		 |$LN14@OALFlashSt@6|

; 410  :         }
; 411  : 
; 412  : 
; 413  :     // Start read
; 414  :     offset = 0;
; 415  :     sector = startSector + pFlash->badBlocksAtPos * pFlash->sectorsPerBlock;

  0014c	e5941018	 ldr         r1, [r4, #0x18]
  00150	e5942008	 ldr         r2, [r4, #8]
  00154	e3a03000	 mov         r3, #0

; 416  :     block = startBlock + pFlash->badBlocksAtPos;

  00158	e0816006	 add         r6, r1, r6
  0015c	e58d3014	 str         r3, [sp, #0x14]

; 417  :     sectorInBlock = sector - block * pFlash->sectorsPerBlock;

  00160	e0030692	 mul         r3, r2, r6
  00164	e0287291	 mla         r8, r1, r2, r7

; 418  :     while (offset < dataSize)

  00168	e59d2010	 ldr         r2, [sp, #0x10]
  0016c	e3520000	 cmp         r2, #0
  00170	e0487003	 sub         r7, r8, r3
  00174	0a00003a	 beq         |$LN12@OALFlashSt@6|
  00178		 |$LL13@OALFlashSt@6|

; 419  :         {
; 420  :         // If it is first sector in block, check and erase block
; 421  :         if (sectorInBlock == 0)

  00178	e3570000	 cmp         r7, #0
  0017c	1a000013	 bne         |$LN9@OALFlashSt@6|

; 422  :             {
; 423  :             // First check if block exists
; 424  :             if (block >= pFlash->blocksOnFlash)

  00180	e594300c	 ldr         r3, [r4, #0xC]
  00184	e1560003	 cmp         r6, r3
  00188	2a000037	 bcs         |$LN41@OALFlashSt@6|

; 430  :                 }
; 431  :             // Skip block if it is marked as bad
; 432  :             if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_BAD) != 0)

  0018c	e1a00006	 mov         r0, r6
  00190	eb000000	 bl          FMD_GetBlockStatus
  00194	e3100002	 tst         r0, #2
  00198	0a00000c	 beq         |$LN9@OALFlashSt@6|

; 433  :                 {
; 434  :                 OALMSG(OAL_WARN, (L"WARN: "
; 435  :                     L"Skip bad block %d\r\n", block
; 436  :                     ));

  0019c	e5953440	 ldr         r3, [r5, #0x440]
  001a0	e3130002	 tst         r3, #2
  001a4	159f0108	 ldrne       r0, [pc, #0x108]
  001a8	11a01006	 movne       r1, r6
  001ac	1b000000	 blne        NKDbgPrintfW

; 437  :                 block++;
; 438  :                 pFlash->badBlocksAtPos++;

  001b0	e5943018	 ldr         r3, [r4, #0x18]

; 439  :                 sector += pFlash->sectorsPerBlock;

  001b4	e5942008	 ldr         r2, [r4, #8]

; 440  :                 continue;

  001b8	e59d0014	 ldr         r0, [sp, #0x14]
  001bc	e2833001	 add         r3, r3, #1
  001c0	e5843018	 str         r3, [r4, #0x18]
  001c4	e2866001	 add         r6, r6, #1
  001c8	e0888002	 add         r8, r8, r2
  001cc	ea000021	 b           |$LN43@OALFlashSt@6|
  001d0		 |$LN9@OALFlashSt@6|

; 441  :                 }
; 442  :             }
; 443  : 
; 444  :         // Prepare sector info location
; 445  :         if (includeSectorInfo)

  001d0	e59d3044	 ldr         r3, [sp, #0x44]
  001d4	e59d500c	 ldr         r5, [sp, #0xC]

; 446  :             {
; 447  :             pSectorInfo = (SectorInfo*)(pData + offset + pFlash->sectorSize);
; 448  :             }
; 449  :         else
; 450  :             {
; 451  :             pSectorInfo = &sectorInfo;
; 452  :             }
; 453  : 
; 454  :         // Read sector
; 455  :         retry = 4;

  001d8	e3a09004	 mov         r9, #4
  001dc	e3530000	 cmp         r3, #0
  001e0	15943004	 ldrne       r3, [r4, #4]
  001e4	1083a005	 addne       r10, r3, r5
  001e8	028da018	 addeq       r10, sp, #0x18
  001ec		 |$LL6@OALFlashSt@6|

; 456  :         do
; 457  :             {
; 458  :             if (FMD_ReadSector(sector, pData + offset, pSectorInfo, 1)) break;

  001ec	e3a03001	 mov         r3, #1
  001f0	e1a0200a	 mov         r2, r10
  001f4	e1a01005	 mov         r1, r5
  001f8	e1a00008	 mov         r0, r8
  001fc	eb000000	 bl          FMD_ReadSector
  00200	e3500000	 cmp         r0, #0
  00204	1a000001	 bne         |$LN4@OALFlashSt@6|

; 459  :             }
; 460  :         while (--retry > 0);

  00208	e2599001	 subs        r9, r9, #1
  0020c	1afffff6	 bne         |$LL6@OALFlashSt@6|
  00210		 |$LN4@OALFlashSt@6|

; 461  : 
; 462  :         // If read failed, exit...
; 463  :         if (retry == 0)

  00210	e59f5098	 ldr         r5, [pc, #0x98]
  00214	e3590000	 cmp         r9, #0
  00218	0a000019	 beq         |$LN42@OALFlashSt@6|

; 469  :             goto cleanUp;
; 470  :             }
; 471  : 
; 472  :         // Move to next sector
; 473  :         sector++;
; 474  :         sectorInBlock++;
; 475  :         if (sectorInBlock  >= pFlash->sectorsPerBlock)

  0021c	e5943008	 ldr         r3, [r4, #8]
  00220	e2877001	 add         r7, r7, #1

; 476  :             {
; 477  :             block++;
; 478  :             pFlash->blockPos++;
; 479  :             sectorInBlock = 0;
; 480  :             }
; 481  :         offset += sectorDataSize;

  00224	e59d0014	 ldr         r0, [sp, #0x14]
  00228	e1570003	 cmp         r7, r3
  0022c	25943014	 ldrcs       r3, [r4, #0x14]
  00230	e080000b	 add         r0, r0, r11
  00234	e2888001	 add         r8, r8, #1
  00238	22833001	 addcs       r3, r3, #1
  0023c	25843014	 strcs       r3, [r4, #0x14]
  00240	e59d300c	 ldr         r3, [sp, #0xC]
  00244	22866001	 addcs       r6, r6, #1
  00248	23a07000	 movcs       r7, #0
  0024c	e083300b	 add         r3, r3, r11
  00250	e58d300c	 str         r3, [sp, #0xC]
  00254	e58d0014	 str         r0, [sp, #0x14]
  00258		 |$LN43@OALFlashSt@6|
  00258	e59d3010	 ldr         r3, [sp, #0x10]
  0025c	e1500003	 cmp         r0, r3
  00260	3affffc4	 bcc         |$LL13@OALFlashSt@6|
  00264		 |$LN12@OALFlashSt@6|

; 482  :         }
; 483  : 
; 484  :     // Done
; 485  :     rc = TRUE;

  00264	e3a04001	 mov         r4, #1
  00268	eaffff8f	 b           |$cleanUp$44601|
  0026c		 |$LN41@OALFlashSt@6|

; 352  :     BOOL rc = FALSE;
; 353  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 354  :     ULONG offset, sector, block;
; 355  :     ULONG sectorInBlock, sectorDataSize;
; 356  :     ULONG startSector, startBlock;
; 357  :     SectorInfo sectorInfo, *pSectorInfo;
; 358  :     ULONG retry;
; 359  : 
; 360  : 
; 361  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 362  :         L"+OALFlashStoreRead(0x%08x, 0x%08x, 0x%08x, 0x%08x, %d, %d)\r\n",
; 363  :         hFlash, start, pData, dataSize, includeSectorInfo, offsetReservedBlocks
; 364  :         ));

  0026c	e5953440	 ldr         r3, [r5, #0x440]

; 425  :                 {
; 426  :                 OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreRead: "
; 427  :                     L"Run out of blocks on flash memory\r\n"
; 428  :                     ));

  00270	e3130001	 tst         r3, #1
  00274	0affff8b	 beq         |$LN49@OALFlashSt@6|
  00278	e59f002c	 ldr         r0, [pc, #0x2C]
  0027c	eb000000	 bl          NKDbgPrintfW

; 429  :                 goto cleanUp;

  00280	eaffff88	 b           |$LN49@OALFlashSt@6|
  00284		 |$LN42@OALFlashSt@6|

; 352  :     BOOL rc = FALSE;
; 353  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 354  :     ULONG offset, sector, block;
; 355  :     ULONG sectorInBlock, sectorDataSize;
; 356  :     ULONG startSector, startBlock;
; 357  :     SectorInfo sectorInfo, *pSectorInfo;
; 358  :     ULONG retry;
; 359  : 
; 360  : 
; 361  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 362  :         L"+OALFlashStoreRead(0x%08x, 0x%08x, 0x%08x, 0x%08x, %d, %d)\r\n",
; 363  :         hFlash, start, pData, dataSize, includeSectorInfo, offsetReservedBlocks
; 364  :         ));

  00284	e5950440	 ldr         r0, [r5, #0x440]

; 464  :             {
; 465  :             OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreRead: "
; 466  :                 L"Failed read sector %d (%d sector in block %d)\r\n",
; 467  :                 sector, sectorInBlock, block
; 468  :                 ));

  00288	e3100001	 tst         r0, #1
  0028c	0affff85	 beq         |$LN49@OALFlashSt@6|
  00290	e59f0010	 ldr         r0, [pc, #0x10]
  00294	e1a03006	 mov         r3, r6
  00298	e1a02007	 mov         r2, r7
  0029c	e1a01008	 mov         r1, r8
  002a0	eb000000	 bl          NKDbgPrintfW
  002a4	eaffff7f	 b           |$LN49@OALFlashSt@6|
  002a8		 |$LN56@OALFlashSt@6|
  002a8		 |$LN57@OALFlashSt@6|
  002a8	00000000	 DCD         |??_C@_1JE@BGBADADK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@|
  002ac		 |$LN58@OALFlashSt@6|
  002ac	00000000	 DCD         |??_C@_1HM@LNEGDDBN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAR?$AAu?$AAn?$AA?5?$AAo?$AAu@|
  002b0		 |$LN59@OALFlashSt@6|
  002b0	00000000	 DCD         |dpCurSettings|
  002b4		 |$LN60@OALFlashSt@6|
  002b4	00000000	 DCD         |??_C@_1DE@JONHLDDF@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  002b8		 |$LN61@OALFlashSt@6|
  002b8	00000000	 DCD         |??_C@_1KI@BBPBIBEF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@|
  002bc		 |$LN62@OALFlashSt@6|
  002bc	00000000	 DCD         |??_C@_1LA@OCBPILJB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5@|
  002c0		 |$LN63@OALFlashSt@6|
  002c0	00000000	 DCD         |??_C@_1DM@KJHIDCKC@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  002c4		 |$LN64@OALFlashSt@6|
  002c4	00000000	 DCD         |??_C@_1KC@GLMKKJJO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5@|
  002c8		 |$LN65@OALFlashSt@6|
  002c8	00000000	 DCD         |??_C@_1HK@HAFKLFGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  002cc		 |$M45257|

			 ENDP  ; |OALFlashStoreRead|

	EXPORT	|OALFlashStoreErase|
	EXPORT	|??_C@_1DO@GHPAFAFJ@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@HCGPHIPI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IE@DFIGNOEA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@COEEAOKJ@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@CGLPBIPN@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45308| DCD	|$LN39@OALFlashSt@7|
	DCD	0x40007402

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@GHPAFAFJ@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "E", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@HCGPHIPI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "E", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "a"
	DCB	0x0, "s", 0x0, " ", 0x0, "b", 0x0, "a", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@DFIGNOEA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, "E", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "a", 0x0, "s"
	DCB	0x0, "e", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "r", 0x0, "k", 0x0, " ", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "a", 0x0, "s", 0x0, " ", 0x0, "b"
	DCB	0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@COEEAOKJ@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "e"
	DCB	0x0, "E", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "S", 0x0, "k", 0x0, "i", 0x0, "p", 0x0, " "
	DCB	0x0, "b", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@CGLPBIPN@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "E", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashStoreErase| PROC

; 501  : {

  00000		 |$LN39@OALFlashSt@7|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M45305|
  00008	e1a0a003	 mov         r10, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1a08001	 mov         r8, r1
  00014	e1a05000	 mov         r5, r0

; 502  :     BOOL rc = FALSE;
; 503  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 504  :     ULONG sector, block, count, offset;
; 505  :     ULONG retry;
; 506  : 
; 507  : 
; 508  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 509  :         L"+OALFlashStoreErase(0x%08x, 0x%08x, 0x%08x, %d)\r\n",
; 510  :         hFlash, start, size, offsetReservedBlocks
; 511  :         ));

  00018	e59f61ac	 ldr         r6, [pc, #0x1AC]
  0001c	e3a09000	 mov         r9, #0
  00020	e5962440	 ldr         r2, [r6, #0x440]
  00024	e3120a02	 tst         r2, #2, 20
  00028	13120004	 tstne       r2, #4
  0002c	159f0194	 ldrne       r0, [pc, #0x194]
  00030	11a03007	 movne       r3, r7
  00034	11a02008	 movne       r2, r8
  00038	11a01005	 movne       r1, r5
  0003c	158da000	 strne       r10, [sp]
  00040	1b000000	 blne        NKDbgPrintfW

; 512  : 
; 513  :     // First get socket start block number
; 514  :     sector = (start + pFlash->sectorSize - 1)/pFlash->sectorSize;

  00044	e595b004	 ldr         r11, [r5, #4]

; 515  :     block = (sector + pFlash->sectorsPerBlock - 1)/pFlash->sectorsPerBlock;

  00048	e5954008	 ldr         r4, [r5, #8]
  0004c	e08b3008	 add         r3, r11, r8
  00050	e2431001	 sub         r1, r3, #1
  00054	e1a0000b	 mov         r0, r11
  00058	eb000000	 bl          __rt_udiv
  0005c	e0843000	 add         r3, r4, r0
  00060	e2431001	 sub         r1, r3, #1
  00064	e1a00004	 mov         r0, r4
  00068	eb000000	 bl          __rt_udiv

; 516  : 
; 517  :     // Offset reserved blocks
; 518  :     if (offsetReservedBlocks) block += pFlash->reservedBlocks;

  0006c	e35a0000	 cmp         r10, #0
  00070	15953010	 ldrne       r3, [r5, #0x10]
  00074	e1a04000	 mov         r4, r0
  00078	10844003	 addne       r4, r4, r3

; 519  : 
; 520  :     // Find number of blocks to erase
; 521  :     if (size == -1)

  0007c	e3770001	 cmn         r7, #1

; 522  :         {
; 523  :         count = pFlash->blocksOnFlash - block;

  00080	0595300c	 ldreq       r3, [r5, #0xC]
  00084	00438004	 subeq       r8, r3, r4
  00088	0a000006	 beq         |$LN11@OALFlashSt@7|

; 524  :         }
; 525  :     else
; 526  :         {
; 527  :         offset = block * pFlash->sectorsPerBlock * pFlash->sectorSize - start;

  0008c	e5953008	 ldr         r3, [r5, #8]
  00090	e0000b93	 mul         r0, r3, r11
  00094	e0030490	 mul         r3, r0, r4

; 528  :         size -= offset;
; 529  :         count = size/(pFlash->sectorsPerBlock * pFlash->sectorSize);

  00098	e0483003	 sub         r3, r8, r3
  0009c	e0831007	 add         r1, r3, r7
  000a0	eb000000	 bl          __rt_udiv
  000a4	e1a08000	 mov         r8, r0
  000a8		 |$LN11@OALFlashSt@7|

; 530  :         }
; 531  : 
; 532  :     if (!SeekToBlock(pFlash, block)) goto cleanUp;

  000a8	e1a01004	 mov         r1, r4
  000ac	e1a00005	 mov         r0, r5
  000b0	eb000000	 bl          SeekToBlock
  000b4	e3500000	 cmp         r0, #0
  000b8	0a000034	 beq         |$cleanUp$44652|

; 533  : 
; 534  :     // Compensate for bad blocks
; 535  :     block += pFlash->badBlocksAtPos;

  000bc	e5953018	 ldr         r3, [r5, #0x18]

; 536  :     while ((count > 0) && (block < pFlash->blocksOnFlash))

  000c0	e0844003	 add         r4, r4, r3
  000c4	ea00002e	 b           |$LN35@OALFlashSt@7|
  000c8		 |$LL9@OALFlashSt@7|
  000c8	e595300c	 ldr         r3, [r5, #0xC]
  000cc	e1540003	 cmp         r4, r3
  000d0	2a00002d	 bcs         |$LN34@OALFlashSt@7|

; 537  :         {
; 538  : 
; 539  :         // Skip block if it is marked as bad
; 540  :         if ((FMD_GetBlockStatus(block) & BLOCK_STATUS_BAD) != 0)

  000d4	e1a00004	 mov         r0, r4
  000d8	eb000000	 bl          FMD_GetBlockStatus
  000dc	e3100002	 tst         r0, #2
  000e0	0a000008	 beq         |$LN7@OALFlashSt@7|

; 541  :             {
; 542  :             OALMSG(OAL_WARN, (L"WARN: OALFlashStoreErase: "
; 543  :                 L"Skip bad block %d\r\n", block
; 544  :                 ));

  000e4	e5963440	 ldr         r3, [r6, #0x440]
  000e8	e3130002	 tst         r3, #2
  000ec	159f00d0	 ldrne       r0, [pc, #0xD0]
  000f0	11a01004	 movne       r1, r4
  000f4	1b000000	 blne        NKDbgPrintfW
  000f8		 |$LN18@OALFlashSt@7|

; 545  :             block++;
; 546  :             pFlash->badBlocksAtPos++;

  000f8	e5953018	 ldr         r3, [r5, #0x18]
  000fc	e2833001	 add         r3, r3, #1
  00100	e5853018	 str         r3, [r5, #0x18]

; 547  :             continue;

  00104	ea00001d	 b           |$LN36@OALFlashSt@7|
  00108		 |$LN7@OALFlashSt@7|

; 548  :             }
; 549  : 
; 550  :         // Erase block
; 551  :         retry = 4;

  00108	e3a07004	 mov         r7, #4
  0010c		 |$LL6@OALFlashSt@7|

; 552  :         do
; 553  :             {
; 554  :             if (FMD_EraseBlock(block)) break;

  0010c	e1a00004	 mov         r0, r4
  00110	eb000000	 bl          FMD_EraseBlock
  00114	e3500000	 cmp         r0, #0
  00118	1a000001	 bne         |$LN4@OALFlashSt@7|

; 555  :             }
; 556  :         while (--retry > 0);

  0011c	e2577001	 subs        r7, r7, #1
  00120	1afffff9	 bne         |$LL6@OALFlashSt@7|
  00124		 |$LN4@OALFlashSt@7|

; 557  : 
; 558  :         // If erase failed
; 559  :         if (retry == 0)

  00124	e3570000	 cmp         r7, #0
  00128	1a000010	 bne         |$LN2@OALFlashSt@7|

; 560  :             {
; 561  :             OALMSG(OAL_WARN, (L"WARN: OALFlashStoreErase: "
; 562  :                 L"Failed erase block %d, mark it as bad\r\n", block
; 563  :                 ));

  0012c	e5963440	 ldr         r3, [r6, #0x440]
  00130	e3130002	 tst         r3, #2
  00134	159f0084	 ldrne       r0, [pc, #0x84]
  00138	11a01004	 movne       r1, r4
  0013c	1b000000	 blne        NKDbgPrintfW

; 564  :             if (!FMD_SetBlockStatus(block, BLOCK_STATUS_BAD))

  00140	e3a01002	 mov         r1, #2
  00144	e1a00004	 mov         r0, r4
  00148	eb000000	 bl          FMD_SetBlockStatus
  0014c	e3500000	 cmp         r0, #0
  00150	1affffe8	 bne         |$LN18@OALFlashSt@7|

; 565  :                 {
; 566  :                 OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreErase: "
; 567  :                     L"Failed set block %d status as bad\r\n", block
; 568  :                     ));

  00154	e5963440	 ldr         r3, [r6, #0x440]
  00158	e3130001	 tst         r3, #1
  0015c	0a00000b	 beq         |$cleanUp$44652|
  00160	e59f0054	 ldr         r0, [pc, #0x54]
  00164	e1a01004	 mov         r1, r4
  00168	eb000000	 bl          NKDbgPrintfW

; 569  :                 goto cleanUp;

  0016c	ea000007	 b           |$cleanUp$44652|
  00170		 |$LN2@OALFlashSt@7|

; 570  :                 }
; 571  :             block++;
; 572  :             pFlash->badBlocksAtPos++;
; 573  :             continue;
; 574  :             }
; 575  : 
; 576  :         // Move to next block
; 577  :         count--;
; 578  :         block++;
; 579  :         pFlash->blockPos++;

  00170	e5953014	 ldr         r3, [r5, #0x14]
  00174	e2488001	 sub         r8, r8, #1
  00178	e2833001	 add         r3, r3, #1
  0017c	e5853014	 str         r3, [r5, #0x14]
  00180		 |$LN36@OALFlashSt@7|
  00180	e2844001	 add         r4, r4, #1
  00184		 |$LN35@OALFlashSt@7|

; 536  :     while ((count > 0) && (block < pFlash->blocksOnFlash))

  00184	e3580000	 cmp         r8, #0
  00188	1affffce	 bne         |$LL9@OALFlashSt@7|
  0018c		 |$LN34@OALFlashSt@7|

; 580  :         }
; 581  : 
; 582  :     // Done
; 583  :     rc = TRUE;

  0018c	e3a09001	 mov         r9, #1
  00190		 |$cleanUp$44652|

; 565  :                 {
; 566  :                 OALMSG(OAL_ERROR, (L"ERROR: OALFlashStoreErase: "
; 567  :                     L"Failed set block %d status as bad\r\n", block
; 568  :                     ));

  00190	e5963440	 ldr         r3, [r6, #0x440]

; 584  : 
; 585  : cleanUp:
; 586  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"-OALFlashStoreErase(rc = %d)\r\n", rc));

  00194	e3130a02	 tst         r3, #2, 20
  00198	13130004	 tstne       r3, #4
  0019c	159f0014	 ldrne       r0, [pc, #0x14]
  001a0	11a01009	 movne       r1, r9
  001a4	1b000000	 blne        NKDbgPrintfW

; 587  :     return rc;
; 588  : }

  001a8	e1a00009	 mov         r0, r9
  001ac	e28dd004	 add         sp, sp, #4
  001b0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001b4	e12fff1e	 bx          lr
  001b8		 |$LN40@OALFlashSt@7|
  001b8		 |$LN41@OALFlashSt@7|
  001b8	00000000	 DCD         |??_C@_1DO@GHPAFAFJ@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  001bc		 |$LN42@OALFlashSt@7|
  001bc	00000000	 DCD         |??_C@_1HO@HCGPHIPI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@|
  001c0		 |$LN43@OALFlashSt@7|
  001c0	00000000	 DCD         |??_C@_1IE@DFIGNOEA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@|
  001c4		 |$LN44@OALFlashSt@7|
  001c4	00000000	 DCD         |??_C@_1FM@COEEAOKJ@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb@|
  001c8		 |$LN45@OALFlashSt@7|
  001c8	00000000	 DCD         |??_C@_1GE@CGLPBIPN@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@|
  001cc		 |$LN46@OALFlashSt@7|
  001cc	00000000	 DCD         |dpCurSettings|
  001d0		 |$M45306|

			 ENDP  ; |OALFlashStoreErase|

	EXPORT	|OALFlashStoreBufferedRead|
	EXPORT	|??_C@_1EM@DFFPJPPN@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@PIJOJJGP@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45342| DCD	|$LN18@OALFlashSt@8|
	DCD	0x40004602

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@DFFPJPPN@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "e", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@PIJOJJGP@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "e", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashStoreBufferedRead| PROC

; 600  : {

  00000		 |$LN18@OALFlashSt@8|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M45339|
  00008	e1a07003	 mov         r7, r3
  0000c	e58d2008	 str         r2, [sp, #8]
  00010	e1a09001	 mov         r9, r1
  00014	e1a08000	 mov         r8, r0

; 601  :     BOOL rc = FALSE;
; 602  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 603  :     ULONG offset, copySize;
; 604  : 
; 605  : 
; 606  :     OALMSG(OAL_FLASH&&OAL_FUNC, (
; 607  :         L"+OALFlashStoreBufferedRead(0x%08x, 0x%08x, 0x%08x, %d)\r\n",
; 608  :         hFlash, start, size, offsetReservedBlocks
; 609  :         ));

  00018	e59f60f4	 ldr         r6, [pc, #0xF4]
  0001c	e59db030	 ldr         r11, [sp, #0x30]
  00020	e5965440	 ldr         r5, [r6, #0x440]
  00024	e3150a02	 tst         r5, #2, 20
  00028	0a000007	 beq         |$LN6@OALFlashSt@8|
  0002c	e3150004	 tst         r5, #4
  00030	0a000005	 beq         |$LN6@OALFlashSt@8|
  00034	e59f00d4	 ldr         r0, [pc, #0xD4]
  00038	e1a02009	 mov         r2, r9
  0003c	e1a01008	 mov         r1, r8
  00040	e58db000	 str         r11, [sp]
  00044	eb000000	 bl          NKDbgPrintfW
  00048	e5965440	 ldr         r5, [r6, #0x440]
  0004c		 |$LN6@OALFlashSt@8|

; 610  : 
; 611  :     //  Calculate offset into starting block
; 612  :     offset = start - (start / pFlash->sectorSize) * pFlash->sectorSize;

  0004c	e5984004	 ldr         r4, [r8, #4]
  00050	e1a01009	 mov         r1, r9
  00054	e1a00004	 mov         r0, r4
  00058	eb000000	 bl          __rt_udiv
  0005c	e0030490	 mul         r3, r0, r4

; 613  : 
; 614  :     //  Read data from flash without sector boundary and size restrictions
; 615  :     while( size > 0 )

  00060	e3570000	 cmp         r7, #0
  00064	e049a003	 sub         r10, r9, r3
  00068	0a00001b	 beq         |$LN2@OALFlashSt@8|
  0006c	e2885fb9	 add         r5, r8, #0xB9, 30
  00070	e3a0e000	 mov         lr, #0
  00074		 |$LL3@OALFlashSt@8|

; 616  :     {
; 617  :         //  Read whole sector into temp buffer
; 618  :         rc = OALFlashStoreRead(
; 619  :             hFlash, start - offset, pFlash->sectorBuffer, pFlash->sectorSize,
; 620  :             FALSE, offsetReservedBlocks
; 621  :             );

  00074	e5983004	 ldr         r3, [r8, #4]
  00078	e1a02005	 mov         r2, r5
  0007c	e049100a	 sub         r1, r9, r10
  00080	e1a00008	 mov         r0, r8
  00084	e58db004	 str         r11, [sp, #4]
  00088	e58de000	 str         lr, [sp]
  0008c	eb000000	 bl          OALFlashStoreRead
  00090	e1b04000	 movs        r4, r0

; 622  :         if (!rc)

  00094	0a00001a	 beq         |$LN15@OALFlashSt@8|

; 623  :             {
; 624  :             goto cleanUp;
; 625  :             }
; 626  :         
; 627  :         // Determine amount to copy
; 628  :         copySize = (size > pFlash->sectorSize - offset) ? pFlash->sectorSize - offset : size;

  00098	e5983004	 ldr         r3, [r8, #4]

; 629  : 
; 630  :         // Copy data to given address
; 631  :         memcpy(
; 632  :             pData, pFlash->sectorBuffer + offset, copySize
; 633  :             );

  0009c	e085100a	 add         r1, r5, r10
  000a0	e043400a	 sub         r4, r3, r10
  000a4	e59da008	 ldr         r10, [sp, #8]
  000a8	e1570004	 cmp         r7, r4
  000ac	91a04007	 movls       r4, r7
  000b0	e1a02004	 mov         r2, r4
  000b4	e1a0000a	 mov         r0, r10
  000b8	eb000000	 bl          memcpy

; 634  : 
; 635  :         // Shift pointers
; 636  :         pData += copySize;

  000bc	e08aa004	 add         r10, r10, r4
  000c0	e58da008	 str         r10, [sp, #8]

; 637  :         start += copySize;
; 638  :         size  -= copySize;
; 639  :         offset = 0;

  000c4	e3a0a000	 mov         r10, #0
  000c8	e0899004	 add         r9, r9, r4
  000cc	e0577004	 subs        r7, r7, r4
  000d0	e3a0e000	 mov         lr, #0
  000d4	1affffe6	 bne         |$LL3@OALFlashSt@8|

; 613  : 
; 614  :     //  Read data from flash without sector boundary and size restrictions
; 615  :     while( size > 0 )

  000d8	e5965440	 ldr         r5, [r6, #0x440]
  000dc		 |$LN2@OALFlashSt@8|

; 640  :     }
; 641  : 
; 642  :     // Done
; 643  :     rc = TRUE;

  000dc	e3a04001	 mov         r4, #1
  000e0		 |$cleanUp$44692|

; 644  :     
; 645  : cleanUp:
; 646  :     OALMSG(OAL_FLASH&&OAL_FUNC, (L"-OALFlashStoreBufferedRead(rc = %d)\r\n", rc));

  000e0	e3150a02	 tst         r5, #2, 20
  000e4	13150004	 tstne       r5, #4
  000e8	159f001c	 ldrne       r0, [pc, #0x1C]
  000ec	11a01004	 movne       r1, r4
  000f0	1b000000	 blne        NKDbgPrintfW

; 647  :     return rc;
; 648  : }

  000f4	e1a00004	 mov         r0, r4
  000f8	e28dd00c	 add         sp, sp, #0xC
  000fc	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00100	e12fff1e	 bx          lr
  00104		 |$LN15@OALFlashSt@8|

; 640  :     }
; 641  : 
; 642  :     // Done
; 643  :     rc = TRUE;

  00104	e5965440	 ldr         r5, [r6, #0x440]
  00108	eafffff4	 b           |$cleanUp$44692|
  0010c		 |$LN19@OALFlashSt@8|
  0010c		 |$LN20@OALFlashSt@8|
  0010c	00000000	 DCD         |??_C@_1EM@DFFPJPPN@?$AA?9?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5@|
  00110		 |$LN21@OALFlashSt@8|
  00110	00000000	 DCD         |??_C@_1HC@PIJOJJGP@?$AA?$CL?$AAO?$AAA?$AAL?$AAF?$AAl?$AAa?$AAs?$AAh?$AAS?$AAt?$AAo?$AAr?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  00114		 |$LN22@OALFlashSt@8|
  00114	00000000	 DCD         |dpCurSettings|
  00118		 |$M45340|

			 ENDP  ; |OALFlashStoreBufferedRead|

	EXPORT	|OALFlashStoreReadFromReservedRegion|
	IMPORT	|strcmp|

  00000			 AREA	 |.pdata|, PDATA
|$T45371| DCD	|$LN23@OALFlashSt@9|
	DCD	0x40007002
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashStoreReadFromReservedRegion| PROC

; 660  : {

  00000		 |$LN23@OALFlashSt@9|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M45368|
  00008	e1a09003	 mov         r9, r3
  0000c	e1a0a002	 mov         r10, r2
  00010	e1a0b001	 mov         r11, r1
  00014	e1a05000	 mov         r5, r0

; 661  :     BOOL rc = FALSE;
; 662  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 663  :     ULONG regionSize, offset, ix;
; 664  : 
; 665  : 
; 666  :     // Try build layout info if there are no reserved regions yet...
; 667  :     if ((pFlash->reservedRegions == 0) && !BuildLayoutInfo(hFlash))

  00018	e595e01c	 ldr         lr, [r5, #0x1C]
  0001c	e3a07000	 mov         r7, #0
  00020	e35e0000	 cmp         lr, #0
  00024	1a000002	 bne         |$LN14@OALFlashSt@9|
  00028	eb000000	 bl          BuildLayoutInfo
  0002c	e3500000	 cmp         r0, #0
  00030	0a00005e	 beq         |$cleanUp$44712|
  00034		 |$LN14@OALFlashSt@9|

; 668  :         {
; 669  :         goto cleanUp;
; 670  :         }
; 671  : 
; 672  :     // Find reserved region with given name
; 673  :     for (ix = 0; ix < pFlash->reservedRegions; ix++)

  00034	e595e01c	 ldr         lr, [r5, #0x1C]
  00038	e3a04000	 mov         r4, #0
  0003c	e1b0800e	 movs        r8, lr
  00040	0a000009	 beq         |$LN20@OALFlashSt@9|
  00044	e2856020	 add         r6, r5, #0x20
  00048		 |$LL13@OALFlashSt@9|

; 674  :         {
; 675  :         if (strcmp(name, pFlash->reservedRegion[ix].szName) == 0) break;

  00048	e1a01006	 mov         r1, r6
  0004c	e1a0000b	 mov         r0, r11
  00050	eb000000	 bl          strcmp
  00054	e3500000	 cmp         r0, #0
  00058	0a000003	 beq         |$LN20@OALFlashSt@9|
  0005c	e2844001	 add         r4, r4, #1
  00060	e1540008	 cmp         r4, r8
  00064	e2866010	 add         r6, r6, #0x10
  00068	3afffff6	 bcc         |$LL13@OALFlashSt@9|
  0006c		 |$LN20@OALFlashSt@9|

; 676  :         }
; 677  : 
; 678  :     // If there isn't one we are done
; 679  :     if (ix >= pFlash->reservedRegions) goto cleanUp;

  0006c	e1540008	 cmp         r4, r8
  00070	2a00004e	 bcs         |$cleanUp$44712|

; 680  : 
; 681  :     // Get reserved partition size
; 682  :     regionSize =  pFlash->reservedRegion[ix].dwNumBlocks;
; 683  :     regionSize *= pFlash->sectorsPerBlock * pFlash->sectorSize;

  00074	e5953008	 ldr         r3, [r5, #8]
  00078	e595b004	 ldr         r11, [r5, #4]
  0007c	e0850204	 add         r0, r5, r4, lsl #4
  00080	e590102c	 ldr         r1, [r0, #0x2C]
  00084	e002039b	 mul         r2, r11, r3
  00088	e0010192	 mul         r1, r2, r1

; 684  : 
; 685  :     // Check if there is enough space for request
; 686  :     if ((start >= regionSize) || ((regionSize - start) < size))

  0008c	e15a0001	 cmp         r10, r1
  00090	2a000046	 bcs         |$cleanUp$44712|
  00094	e59d602c	 ldr         r6, [sp, #0x2C]
  00098	e041200a	 sub         r2, r1, r10
  0009c	e1520006	 cmp         r2, r6
  000a0	3a000042	 bcc         |$cleanUp$44712|

; 687  :         {
; 688  :         goto cleanUp;
; 689  :         }
; 690  : 
; 691  :     // Calculate read start
; 692  :     offset  = pFlash->reservedRegion[ix].dwStartBlock;
; 693  :     offset *= pFlash->sectorsPerBlock * pFlash->sectorSize;

  000a4	e1a0400b	 mov         r4, r11

; 694  :     start += offset;

  000a8	e5901028	 ldr         r1, [r0, #0x28]
  000ac	e0020394	 mul         r2, r4, r3

; 695  : 
; 696  :     // Read partial sector
; 697  :     offset = start - (start / pFlash->sectorSize) * pFlash->sectorSize;

  000b0	e1a00004	 mov         r0, r4
  000b4	e028a192	 mla         r8, r2, r1, r10
  000b8	e1a01008	 mov         r1, r8
  000bc	eb000000	 bl          __rt_udiv
  000c0	e0020490	 mul         r2, r0, r4
  000c4	e3a0a001	 mov         r10, #1
  000c8	e0584002	 subs        r4, r8, r2
  000cc	e3a07000	 mov         r7, #0

; 698  :     if (offset > 0)

  000d0	0a000015	 beq         |$LN6@OALFlashSt@9|

; 699  :         {
; 700  :         rc = OALFlashStoreRead(
; 701  :             hFlash, start - offset, pFlash->sectorBuffer, pFlash->sectorSize,
; 702  :             FALSE, TRUE
; 703  :             );

  000d4	e1a0300b	 mov         r3, r11
  000d8	e2852fb9	 add         r2, r5, #0xB9, 30
  000dc	e0481004	 sub         r1, r8, r4
  000e0	e1a00005	 mov         r0, r5
  000e4	e58da004	 str         r10, [sp, #4]
  000e8	e58d7000	 str         r7, [sp]
  000ec	eb000000	 bl          OALFlashStoreRead
  000f0	e1b07000	 movs        r7, r0

; 704  :         if (!rc)

  000f4	0a00002d	 beq         |$cleanUp$44712|

; 705  :             {
; 706  :             goto cleanUp;
; 707  :             }
; 708  :         // Copy data
; 709  :         memcpy(
; 710  :             pData, pFlash->sectorBuffer + offset, pFlash->sectorSize - offset
; 711  :             );

  000f8	e5952004	 ldr         r2, [r5, #4]
  000fc	e0843005	 add         r3, r4, r5
  00100	e2831fb9	 add         r1, r3, #0xB9, 30
  00104	e0422004	 sub         r2, r2, r4
  00108	e1a00009	 mov         r0, r9
  0010c	eb000000	 bl          memcpy

; 712  :         // Shift pointers
; 713  :         pData += pFlash->sectorSize - offset;

  00110	e5953004	 ldr         r3, [r5, #4]
  00114	e3a07000	 mov         r7, #0
  00118	e0432004	 sub         r2, r3, r4

; 714  :         start += pFlash->sectorSize - offset;
; 715  :         size -= pFlash->sectorSize - offset;

  0011c	e0443003	 sub         r3, r4, r3
  00120	e0866003	 add         r6, r6, r3
  00124	e0899002	 add         r9, r9, r2
  00128	e0888002	 add         r8, r8, r2
  0012c		 |$LN6@OALFlashSt@9|

; 716  :         }
; 717  : 
; 718  :     // Calculate last partial sector
; 719  :     offset = size - (size / pFlash->sectorSize) * pFlash->sectorSize;

  0012c	e5954004	 ldr         r4, [r5, #4]
  00130	e1a01006	 mov         r1, r6
  00134	e1a00004	 mov         r0, r4
  00138	eb000000	 bl          __rt_udiv
  0013c	e0030490	 mul         r3, r0, r4

; 720  :     if (offset > 0) size -= offset;
; 721  :     
; 722  :     // Read data
; 723  :     rc = OALFlashStoreRead(hFlash, start, pData, size, FALSE, TRUE);

  00140	e1a02009	 mov         r2, r9
  00144	e0564003	 subs        r4, r6, r3
  00148	10466004	 subne       r6, r6, r4
  0014c	e1a03006	 mov         r3, r6
  00150	e1a01008	 mov         r1, r8
  00154	e1a00005	 mov         r0, r5
  00158	e58da004	 str         r10, [sp, #4]
  0015c	e58d7000	 str         r7, [sp]
  00160	eb000000	 bl          OALFlashStoreRead
  00164	e1b07000	 movs        r7, r0

; 724  :     if (!rc)

  00168	0a000010	 beq         |$cleanUp$44712|

; 725  :         {
; 726  :         goto cleanUp;
; 727  :         }
; 728  : 
; 729  :     // Read partial sector
; 730  :     if (offset > 0)

  0016c	e3540000	 cmp         r4, #0
  00170	0a00000d	 beq         |$LN2@OALFlashSt@9|

; 731  :         {
; 732  :         // Shift pointers
; 733  :         pData += size;
; 734  :         start += size;
; 735  :         // Read last sector
; 736  :         rc = OALFlashStoreRead(
; 737  :             hFlash, start, pFlash->sectorBuffer, pFlash->sectorSize, FALSE, TRUE
; 738  :             );

  00174	e5953004	 ldr         r3, [r5, #4]
  00178	e3a0e000	 mov         lr, #0
  0017c	e2852fb9	 add         r2, r5, #0xB9, 30
  00180	e0881006	 add         r1, r8, r6
  00184	e1a00005	 mov         r0, r5
  00188	e58da004	 str         r10, [sp, #4]
  0018c	e58de000	 str         lr, [sp]
  00190	eb000000	 bl          OALFlashStoreRead
  00194	e1b07000	 movs        r7, r0

; 739  :         if (!rc)

  00198	0a000004	 beq         |$cleanUp$44712|

; 740  :             {
; 741  :             goto cleanUp;
; 742  :             }
; 743  :         // Copy data
; 744  :         memcpy(pData, pFlash->sectorBuffer, offset);

  0019c	e1a02004	 mov         r2, r4
  001a0	e2851fb9	 add         r1, r5, #0xB9, 30
  001a4	e0890006	 add         r0, r9, r6
  001a8	eb000000	 bl          memcpy
  001ac		 |$LN2@OALFlashSt@9|

; 745  :         }
; 746  : 
; 747  :     // Done
; 748  :     rc = TRUE;

  001ac	e3a07001	 mov         r7, #1
  001b0		 |$cleanUp$44712|

; 749  :     
; 750  : cleanUp:
; 751  :     return rc;
; 752  : }

  001b0	e1a00007	 mov         r0, r7
  001b4	e28dd008	 add         sp, sp, #8
  001b8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001bc	e12fff1e	 bx          lr
  001c0		 |$M45369|

			 ENDP  ; |OALFlashStoreReadFromReservedRegion|

	EXPORT	|OALFlashStoreWriteToReservedRegion|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T45395| DCD	|$LN22@OALFlashSt@10|
	DCD	0x40005c02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALFlashStoreWriteToReservedRegion| PROC

; 764  : {

  00000		 |$LN22@OALFlashSt@10|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M45392|
  00008	e1a0b003	 mov         r11, r3
  0000c	e1a09002	 mov         r9, r2
  00010	e1a0a001	 mov         r10, r1
  00014	e1a05000	 mov         r5, r0

; 765  :     BOOL rc = FALSE;
; 766  :     OAL_FLASH_CONTEXT *pFlash = hFlash;
; 767  :     ULONG regionSize, offset, ix;
; 768  : 
; 769  : 
; 770  :     // Start must be sector aligned
; 771  :     if ((start % pFlash->sectorSize) != 0)

  00018	e5950004	 ldr         r0, [r5, #4]
  0001c	e1a01009	 mov         r1, r9
  00020	e3a07000	 mov         r7, #0
  00024	eb000000	 bl          __rt_udiv
  00028	e3510000	 cmp         r1, #0
  0002c	1a00004b	 bne         |$cleanUp$44743|

; 772  :         {
; 773  :         goto cleanUp;
; 774  :         }
; 775  : 
; 776  :     // Try build layout info if there are no reserved regions yet...
; 777  :     if ((pFlash->reservedRegions == 0) && !BuildLayoutInfo(hFlash))

  00030	e595e01c	 ldr         lr, [r5, #0x1C]
  00034	e35e0000	 cmp         lr, #0
  00038	1a000003	 bne         |$LN12@OALFlashSt@10|
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          BuildLayoutInfo
  00044	e3500000	 cmp         r0, #0
  00048	0a000044	 beq         |$cleanUp$44743|
  0004c		 |$LN12@OALFlashSt@10|

; 778  :         {
; 779  :         goto cleanUp;
; 780  :         }
; 781  : 
; 782  :     // Find reserved region with given name
; 783  :     for (ix = 0; ix < pFlash->reservedRegions; ix++)

  0004c	e595301c	 ldr         r3, [r5, #0x1C]
  00050	e3a04000	 mov         r4, #0
  00054	e1b08003	 movs        r8, r3
  00058	0a000009	 beq         |$LN19@OALFlashSt@10|
  0005c	e2856020	 add         r6, r5, #0x20
  00060		 |$LL11@OALFlashSt@10|

; 784  :         {
; 785  :         if (strcmp(name, pFlash->reservedRegion[ix].szName) == 0) break;

  00060	e1a01006	 mov         r1, r6
  00064	e1a0000a	 mov         r0, r10
  00068	eb000000	 bl          strcmp
  0006c	e3500000	 cmp         r0, #0
  00070	0a000003	 beq         |$LN19@OALFlashSt@10|
  00074	e2844001	 add         r4, r4, #1
  00078	e1540008	 cmp         r4, r8
  0007c	e2866010	 add         r6, r6, #0x10
  00080	3afffff6	 bcc         |$LL11@OALFlashSt@10|
  00084		 |$LN19@OALFlashSt@10|

; 786  :         }
; 787  : 
; 788  :     // If there isn't one we are done
; 789  :     if (ix >= pFlash->reservedRegions) goto cleanUp;

  00084	e1540008	 cmp         r4, r8
  00088	2a000034	 bcs         |$cleanUp$44743|

; 790  : 
; 791  :     // Get reserved partition size
; 792  :     regionSize =  pFlash->reservedRegion[ix].dwNumBlocks;
; 793  :     regionSize *= pFlash->sectorsPerBlock * pFlash->sectorSize;

  0008c	e5950008	 ldr         r0, [r5, #8]
  00090	e5951004	 ldr         r1, [r5, #4]
  00094	e085e204	 add         lr, r5, r4, lsl #4
  00098	e59e202c	 ldr         r2, [lr, #0x2C]
  0009c	e0030091	 mul         r3, r1, r0
  000a0	e0020293	 mul         r2, r3, r2

; 794  : 
; 795  :     // Check if there is enough space for request
; 796  :     if ((start >= regionSize) || ((regionSize - start) < size))

  000a4	e1590002	 cmp         r9, r2
  000a8	2a00002c	 bcs         |$cleanUp$44743|
  000ac	e59d602c	 ldr         r6, [sp, #0x2C]
  000b0	e0423009	 sub         r3, r2, r9
  000b4	e1530006	 cmp         r3, r6
  000b8	3a000028	 bcc         |$cleanUp$44743|

; 797  :         {
; 798  :         goto cleanUp;
; 799  :         }
; 800  : 
; 801  :     // Calculate read start
; 802  :     offset  = pFlash->reservedRegion[ix].dwStartBlock;
; 803  :     offset *= pFlash->sectorsPerBlock * pFlash->sectorSize;

  000bc	e1a04001	 mov         r4, r1

; 804  :     start += offset;

  000c0	e59e2028	 ldr         r2, [lr, #0x28]

; 805  : 
; 806  :     // Calculate last partial sector
; 807  :     offset = size - (size / pFlash->sectorSize) * pFlash->sectorSize;

  000c4	e0030094	 mul         r3, r4, r0
  000c8	e1a01006	 mov         r1, r6
  000cc	e1a00004	 mov         r0, r4
  000d0	e0289293	 mla         r8, r3, r2, r9
  000d4	eb000000	 bl          __rt_udiv
  000d8	e0030490	 mul         r3, r0, r4

; 808  :     if (offset > 0) size -= offset;
; 809  : 
; 810  :     // Read data
; 811  :     rc = OALFlashStoreWrite(hFlash, start, pData, size, FALSE, TRUE);

  000dc	e3a09001	 mov         r9, #1
  000e0	e0564003	 subs        r4, r6, r3
  000e4	10466004	 subne       r6, r6, r4
  000e8	e3a0a000	 mov         r10, #0
  000ec	e1a03006	 mov         r3, r6
  000f0	e1a0200b	 mov         r2, r11
  000f4	e1a01008	 mov         r1, r8
  000f8	e1a00005	 mov         r0, r5
  000fc	e58d9004	 str         r9, [sp, #4]
  00100	e58da000	 str         r10, [sp]
  00104	eb000000	 bl          OALFlashStoreWrite
  00108	e1b07000	 movs        r7, r0

; 812  :     if (!rc)

  0010c	0a000013	 beq         |$cleanUp$44743|

; 813  :         {
; 814  :         goto cleanUp;
; 815  :         }
; 816  : 
; 817  :     // Write partial sector
; 818  :     if (offset > 0)

  00110	e3540000	 cmp         r4, #0
  00114	0a000010	 beq         |$LN1@OALFlashSt@10|

; 819  :         {
; 820  :         // Shift pointers
; 821  :         pData += size;
; 822  :         start += size;
; 823  :         // Fill buffer
; 824  :         memset(pFlash->sectorBuffer, 0xFF, pFlash->sectorSize);

  00118	e5952004	 ldr         r2, [r5, #4]
  0011c	e2850fb9	 add         r0, r5, #0xB9, 30
  00120	e3a010ff	 mov         r1, #0xFF
  00124	eb000000	 bl          memset

; 825  :         memcpy(pFlash->sectorBuffer, pData, offset);

  00128	e1a02004	 mov         r2, r4
  0012c	e08b1006	 add         r1, r11, r6
  00130	e2850fb9	 add         r0, r5, #0xB9, 30
  00134	eb000000	 bl          memcpy

; 826  :         // Write last sector
; 827  :         rc = OALFlashStoreWrite(
; 828  :             hFlash, start, pFlash->sectorBuffer, pFlash->sectorSize, FALSE, TRUE
; 829  :             );

  00138	e5953004	 ldr         r3, [r5, #4]
  0013c	e2852fb9	 add         r2, r5, #0xB9, 30
  00140	e0881006	 add         r1, r8, r6
  00144	e1a00005	 mov         r0, r5
  00148	e58d9004	 str         r9, [sp, #4]
  0014c	e58da000	 str         r10, [sp]
  00150	eb000000	 bl          OALFlashStoreWrite
  00154	e1b07000	 movs        r7, r0

; 830  :         if (!rc)

  00158	0a000000	 beq         |$cleanUp$44743|
  0015c		 |$LN1@OALFlashSt@10|

; 831  :             {
; 832  :             goto cleanUp;
; 833  :             }
; 834  :         }
; 835  : 
; 836  :     // Done
; 837  :     rc = TRUE;

  0015c	e3a07001	 mov         r7, #1
  00160		 |$cleanUp$44743|

; 838  : 
; 839  : cleanUp:
; 840  :     return rc;
; 841  : }

  00160	e1a00007	 mov         r0, r7
  00164	e28dd008	 add         sp, sp, #8
  00168	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0016c	e12fff1e	 bx          lr
  00170		 |$M45393|

			 ENDP  ; |OALFlashStoreWriteToReservedRegion|

	END
