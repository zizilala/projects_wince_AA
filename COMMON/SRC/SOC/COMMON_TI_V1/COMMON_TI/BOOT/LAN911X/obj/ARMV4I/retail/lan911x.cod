; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\LAN911X\lan911x.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|g_pLAN911X| %	0x4
|g_dwChipId| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\boot\lan911x\lan911x.c

  00000			 AREA	 |.pdata|, PDATA
|$T43582| DCD	|$LN11@ReadMacCSR|
	DCD	0x40000d00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReadMacCSR| PROC

; 208  : {

  00000		 |$LN11@ReadMacCSR|
  00000		 |$M43579|
  00000	e59f3028	 ldr         r3, [pc, #0x28]
  00004	e5932000	 ldr         r2, [r3]
  00008		 |$LL4@ReadMacCSR|

; 209  :     while ( (MAC_CSR_CMD_BUSY & READ_REGISTER_ULONG(&g_pLAN911X->mac_csr_cmd)));

  00008	e59230a4	 ldr         r3, [r2, #0xA4]
  0000c	e3130102	 tst         r3, #2, 2
  00010	1afffffc	 bne         |$LL4@ReadMacCSR|

; 210  :     WRITE_REGISTER_ULONG((PULONG)&g_pLAN911X->mac_csr_cmd, MAC_CSR_CMD_BUSY | MAC_CSR_CMD_READ | Register); 

  00014	e3803103	 orr         r3, r0, #3, 2
  00018	e58230a4	 str         r3, [r2, #0xA4]
  0001c		 |$LL2@ReadMacCSR|

; 211  :     while ( (MAC_CSR_CMD_BUSY & READ_REGISTER_ULONG(&g_pLAN911X->mac_csr_cmd)));

  0001c	e59230a4	 ldr         r3, [r2, #0xA4]
  00020	e3130102	 tst         r3, #2, 2
  00024	1afffffc	 bne         |$LL2@ReadMacCSR|

; 212  :     return READ_REGISTER_ULONG(&g_pLAN911X->mac_csr_data);

  00028	e59200a8	 ldr         r0, [r2, #0xA8]

; 213  : }

  0002c	e12fff1e	 bx          lr
  00030		 |$LN12@ReadMacCSR|
  00030		 |$LN13@ReadMacCSR|
  00030	00000000	 DCD         |g_pLAN911X|
  00034		 |$M43580|

			 ENDP  ; |ReadMacCSR|


  00000			 AREA	 |.pdata|, PDATA
|$T43595| DCD	|$LN11@WriteMacCS|
	DCD	0x40000d00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WriteMacCSR| PROC

; 216  : {

  00000		 |$LN11@WriteMacCS|
  00000		 |$M43592|
  00000	e59f3028	 ldr         r3, [pc, #0x28]
  00004	e5932000	 ldr         r2, [r3]
  00008		 |$LL4@WriteMacCS|

; 217  :     while ( (MAC_CSR_CMD_BUSY & READ_REGISTER_ULONG(&g_pLAN911X->mac_csr_cmd)));

  00008	e59230a4	 ldr         r3, [r2, #0xA4]
  0000c	e3130102	 tst         r3, #2, 2
  00010	1afffffc	 bne         |$LL4@WriteMacCS|

; 218  :     WRITE_REGISTER_ULONG(&g_pLAN911X->mac_csr_data, Data);
; 219  :     WRITE_REGISTER_ULONG((PULONG)&g_pLAN911X->mac_csr_cmd, MAC_CSR_CMD_BUSY | Register);

  00014	e3803102	 orr         r3, r0, #2, 2
  00018	e58210a8	 str         r1, [r2, #0xA8]
  0001c	e58230a4	 str         r3, [r2, #0xA4]
  00020		 |$LL2@WriteMacCS|

; 220  :     while ( (MAC_CSR_CMD_BUSY & READ_REGISTER_ULONG(&g_pLAN911X->mac_csr_cmd)));

  00020	e59230a4	 ldr         r3, [r2, #0xA4]
  00024	e3130102	 tst         r3, #2, 2
  00028	1afffffc	 bne         |$LL2@WriteMacCS|

; 221  : }

  0002c	e12fff1e	 bx          lr
  00030		 |$LN12@WriteMacCS|
  00030		 |$LN13@WriteMacCS|
  00030	00000000	 DCD         |g_pLAN911X|
  00034		 |$M43593|

			 ENDP  ; |WriteMacCSR|


  00000			 AREA	 |.pdata|, PDATA
|$T43666| DCD	|$LN64@ReadPhy|
	DCD	0x40003000
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReadPhy| PROC

; 224  : {

  00000		 |$LN64@ReadPhy|
  00000		 |$M43663|
  00000	e59f30b4	 ldr         r3, [pc, #0xB4]
  00004	e3a0111b	 mov         r1, #0x1B, 2
  00008	e5932000	 ldr         r2, [r3]

; 225  :     while (MII_ACC_MIIBZY & ReadMacCSR(MAC_MII_ACC_INDEX));

  0000c		 |$LL10@ReadPhy|
  0000c	e59230a4	 ldr         r3, [r2, #0xA4]
  00010	e3130102	 tst         r3, #2, 2
  00014	1afffffc	 bne         |$LL10@ReadPhy|
  00018	e58210a4	 str         r1, [r2, #0xA4]
  0001c		 |$LL8@ReadPhy|
  0001c	e59230a4	 ldr         r3, [r2, #0xA4]
  00020	e3130102	 tst         r3, #2, 2
  00024	1afffffc	 bne         |$LL8@ReadPhy|
  00028	e59230a8	 ldr         r3, [r2, #0xA8]
  0002c	e3130001	 tst         r3, #1
  00030	1afffff5	 bne         |$LL10@ReadPhy|

; 226  :     WriteMacCSR(MAC_MII_ACC_INDEX, 0x801 | (Register << 6));

  00034		 |$LL16@ReadPhy|
  00034	e59230a4	 ldr         r3, [r2, #0xA4]
  00038	e3130102	 tst         r3, #2, 2
  0003c	1afffffc	 bne         |$LL16@ReadPhy|
  00040	e3a03b02	 mov         r3, #2, 22
  00044	e3833001	 orr         r3, r3, #1
  00048	e1833300	 orr         r3, r3, r0, lsl #6
  0004c	e58230a8	 str         r3, [r2, #0xA8]
  00050	e3a0311a	 mov         r3, #0x1A, 2
  00054	e58230a4	 str         r3, [r2, #0xA4]
  00058		 |$LL14@ReadPhy|
  00058	e59230a4	 ldr         r3, [r2, #0xA4]
  0005c	e3130102	 tst         r3, #2, 2
  00060	1afffffc	 bne         |$LL14@ReadPhy|

; 227  :     while (MII_ACC_MIIBZY & ReadMacCSR(MAC_MII_ACC_INDEX));

  00064		 |$LL22@ReadPhy|
  00064	e59230a4	 ldr         r3, [r2, #0xA4]
  00068	e3130102	 tst         r3, #2, 2
  0006c	1afffffc	 bne         |$LL22@ReadPhy|
  00070	e58210a4	 str         r1, [r2, #0xA4]
  00074		 |$LL20@ReadPhy|
  00074	e59230a4	 ldr         r3, [r2, #0xA4]
  00078	e3130102	 tst         r3, #2, 2
  0007c	1afffffc	 bne         |$LL20@ReadPhy|
  00080	e59230a8	 ldr         r3, [r2, #0xA8]
  00084	e3130001	 tst         r3, #1
  00088	1afffff5	 bne         |$LL22@ReadPhy|

; 228  :     return (UINT16) ReadMacCSR(MAC_MII_DATA_INDEX);

  0008c		 |$LL28@ReadPhy|
  0008c	e59230a4	 ldr         r3, [r2, #0xA4]
  00090	e3130102	 tst         r3, #2, 2
  00094	1afffffc	 bne         |$LL28@ReadPhy|
  00098	e3a0311f	 mov         r3, #0x1F, 2
  0009c	e58230a4	 str         r3, [r2, #0xA4]
  000a0		 |$LL26@ReadPhy|
  000a0	e59230a4	 ldr         r3, [r2, #0xA4]
  000a4	e3130102	 tst         r3, #2, 2
  000a8	1afffffc	 bne         |$LL26@ReadPhy|
  000ac	e59230a8	 ldr         r3, [r2, #0xA8]
  000b0	e1a00803	 mov         r0, r3, lsl #16
  000b4	e1a00820	 mov         r0, r0, lsr #16

; 229  : }

  000b8	e12fff1e	 bx          lr
  000bc		 |$LN65@ReadPhy|
  000bc		 |$LN66@ReadPhy|
  000bc	00000000	 DCD         |g_pLAN911X|
  000c0		 |$M43664|

			 ENDP  ; |ReadPhy|

	EXPORT	|LAN911XSendFrame|
	EXPORT	|??_C@_1EG@GCJBAFHN@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CB?$AA?5?$AA?5?$AA0?$AAx?$AA?$CF?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@CALKBHOJ@?$AAN?$AAo?$AAt?$AA?5?$AAe?$AAn?$AAo?$AAu?$AAg?$AAh?$AA?5?$AAr?$AAo?$AAo?$AAm?$AA?5?$AAi?$AAn?$AA?5?$AAT?$AAX?$AA?5?$AAF?$AAI?$AAF?$AAO?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALLogSerial|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T43695| DCD	|$LN25@LAN911XSen|
	DCD	0x40003c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@GCJBAFHN@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CB?$AA?5?$AA?5?$AA0?$AAx?$AA?$CF?$AAx@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "t"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "m", 0x0, "i"
	DCB	0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, "!", 0x0, " ", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@CALKBHOJ@?$AAN?$AAo?$AAt?$AA?5?$AAe?$AAn?$AAo?$AAu?$AAg?$AAh?$AA?5?$AAr?$AAo?$AAo?$AAm?$AA?5?$AAi?$AAn?$AA?5?$AAT?$AAX?$AA?5?$AAF?$AAI?$AAF?$AAO?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "N"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "o"
	DCB	0x0, "u", 0x0, "g", 0x0, "h", 0x0, " ", 0x0, "r", 0x0, "o"
	DCB	0x0, "o", 0x0, "m", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "T", 0x0, "X", 0x0, " ", 0x0, "F", 0x0, "I", 0x0, "F"
	DCB	0x0, "O", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN911XSendFrame| PROC

; 409  : {

  00000		 |$LN25@LAN911XSen|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43692|

; 410  :     UINT16 RetCode = 1;
; 411  :     UINT32 dwTemp;
; 412  :     UINT32 dwAlignedAddr;
; 413  :     UINT32 dwOffset;
; 414  :     // Send complete packet in one frame
; 415  :     // Note that this controller allows/requires DWORD writes to FIFO,
; 416  :     // and is configured to strip off extra data at the beginning and 
; 417  :     // end of the packet.
; 418  : 
; 419  :     // Verify space in TX fifo (should always be available)
; 420  :     if (length > (6 + (READ_REGISTER_ULONG(&g_pLAN911X->tx_fifo_inf) & TX_FIFO_INF_TDFREE)))

  00004	e59f30e0	 ldr         r3, [pc, #0xE0]
  00008	e3a02cff	 mov         r2, #0xFF, 24
  0000c	e38220ff	 orr         r2, r2, #0xFF
  00010	e593e000	 ldr         lr, [r3]
  00014	e3a04001	 mov         r4, #1
  00018	e59e3080	 ldr         r3, [lr, #0x80]
  0001c	e0033002	 and         r3, r3, r2
  00020	e2833006	 add         r3, r3, #6
  00024	e1510003	 cmp         r1, r3
  00028	9a000006	 bls         |$LN8@LAN911XSen|

; 421  :     {
; 422  :         OALMSGS(OAL_ETHER, (L"Not enough room in TX FIFO!\r\n"));

  0002c	e59f30b0	 ldr         r3, [pc, #0xB0]
  00030	e5933440	 ldr         r3, [r3, #0x440]
  00034	e3130a02	 tst         r3, #2, 20
  00038	0a000025	 beq         |$ErrorReturn$43268|
  0003c	e59f00a4	 ldr         r0, [pc, #0xA4]
  00040	eb000000	 bl          OALLogSerial

; 423  :         goto ErrorReturn;

  00044	ea000022	 b           |$ErrorReturn$43268|
  00048		 |$LN8@LAN911XSen|

; 424  :     }
; 425  : 
; 426  :     // TX_CMD_A
; 427  :     dwOffset = (UINT32)pBuffer & 0x3;

  00048	e2105003	 ands        r5, r0, #3
  0004c	e1813805	 orr         r3, r1, r5, lsl #16

; 428  :     dwTemp = dwOffset << TX_CMD_DATA_OFFSET;
; 429  :     dwTemp |= TX_CMD_FIRST_SEG | TX_CMD_LAST_SEG;
; 430  :     dwTemp |= length;
; 431  :     WRITE_REGISTER_ULONG(&g_pLAN911X->tx_fifo, dwTemp);

  00050	e3833a03	 orr         r3, r3, #3, 20
  00054	e58e3020	 str         r3, [lr, #0x20]

; 432  : 
; 433  :     // TX_CMD_B
; 434  :     WRITE_REGISTER_ULONG(&g_pLAN911X->tx_fifo, length);
; 435  : 
; 436  :     dwAlignedAddr = (UINT32)pBuffer & 0xFFFFFFFC;

  00058	e3c00003	 bic         r0, r0, #3
  0005c	e58e1020	 str         r1, [lr, #0x20]

; 437  : 
; 438  :     // Copy data in DWORD quantities
; 439  : 
; 440  :     // Copy unaligned data at the beginning of the buffer
; 441  :     if (dwOffset)
; 442  :     {
; 443  :         WRITE_REGISTER_ULONG(&g_pLAN911X->tx_fifo, *(UINT32 *)dwAlignedAddr);

  00060	14902004	 ldrne       r2, [r0], #4

; 444  :         dwAlignedAddr += 4;
; 445  :         length = length - (4 - dwOffset);

  00064	10853001	 addne       r3, r5, r1
  00068	12431004	 subne       r1, r3, #4
  0006c	158e2020	 strne       r2, [lr, #0x20]

; 446  :     }
; 447  : 
; 448  :     // Source buffer is now aligned, copy complete DWORDs
; 449  :     while (length >= 4)

  00070	e3510004	 cmp         r1, #4
  00074	3a000005	 bcc         |$LN5@LAN911XSen|
  00078	e1a02121	 mov         r2, r1, lsr #2
  0007c		 |$LL6@LAN911XSen|

; 450  :     {
; 451  :         WRITE_REGISTER_ULONG(&g_pLAN911X->tx_fifo, *(UINT32 *)(dwAlignedAddr));

  0007c	e4903004	 ldr         r3, [r0], #4

; 452  :         length = length - 4;

  00080	e2411004	 sub         r1, r1, #4
  00084	e2522001	 subs        r2, r2, #1
  00088	e58e3020	 str         r3, [lr, #0x20]
  0008c	1afffffa	 bne         |$LL6@LAN911XSen|
  00090		 |$LN5@LAN911XSen|

; 453  :         dwAlignedAddr += 4;
; 454  :     }
; 455  : 
; 456  :     // Copy any remaining bytes
; 457  :     if (length > 0)

  00090	e3510000	 cmp         r1, #0

; 458  :         WRITE_REGISTER_ULONG(&g_pLAN911X->tx_fifo, *(UINT32 *)(dwAlignedAddr));

  00094	15903000	 ldrne       r3, [r0]
  00098	158e3020	 strne       r3, [lr, #0x20]
  0009c		 |$LL3@LAN911XSen|

; 459  : 
; 460  :     // Wait for TX complete
; 461  :     while (!(TX_FIFO_INF_TXSUSED & READ_REGISTER_ULONG(&g_pLAN911X->tx_fifo_inf)));

  0009c	e59e3080	 ldr         r3, [lr, #0x80]
  000a0	e31308ff	 tst         r3, #0xFF, 16
  000a4	0afffffc	 beq         |$LL3@LAN911XSen|

; 462  : 
; 463  :     // Read status, popped from tx status fifo
; 464  :     dwTemp = READ_REGISTER_ULONG(&g_pLAN911X->tx_status_fifo);

  000a8	e59e1048	 ldr         r1, [lr, #0x48]

; 465  :     if (TX_STATUS_FIFO_ES & dwTemp)

  000ac	e3110902	 tst         r1, #2, 18
  000b0	0a000006	 beq         |$LN1@LAN911XSen|

; 466  :     {
; 467  :         OALMSGS(OAL_ETHER, (L"Error transmitting buffer!  0x%x\r\n", dwTemp));

  000b4	e59f3028	 ldr         r3, [pc, #0x28]
  000b8	e5933440	 ldr         r3, [r3, #0x440]
  000bc	e3130a02	 tst         r3, #2, 20
  000c0	0a000003	 beq         |$ErrorReturn$43268|
  000c4	e59f0014	 ldr         r0, [pc, #0x14]
  000c8	eb000000	 bl          OALLogSerial

; 468  :         goto ErrorReturn;

  000cc	ea000000	 b           |$ErrorReturn$43268|
  000d0		 |$LN1@LAN911XSen|

; 469  :     }
; 470  : 
; 471  :     RetCode = 0;

  000d0	e3a04000	 mov         r4, #0
  000d4		 |$ErrorReturn$43268|

; 472  : 
; 473  : ErrorReturn:
; 474  :     return RetCode;
; 475  : }

  000d4	e1a00004	 mov         r0, r4
  000d8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000dc	e12fff1e	 bx          lr
  000e0		 |$LN26@LAN911XSen|
  000e0		 |$LN27@LAN911XSen|
  000e0	00000000	 DCD         |??_C@_1EG@GCJBAFHN@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAm?$AAi?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CB?$AA?5?$AA?5?$AA0?$AAx?$AA?$CF?$AAx@|
  000e4		 |$LN28@LAN911XSen|
  000e4	00000000	 DCD         |dpCurSettings|
  000e8		 |$LN29@LAN911XSen|
  000e8	00000000	 DCD         |??_C@_1DM@CALKBHOJ@?$AAN?$AAo?$AAt?$AA?5?$AAe?$AAn?$AAo?$AAu?$AAg?$AAh?$AA?5?$AAr?$AAo?$AAo?$AAm?$AA?5?$AAi?$AAn?$AA?5?$AAT?$AAX?$AA?5?$AAF?$AAI?$AAF?$AAO?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  000ec		 |$LN30@LAN911XSen|
  000ec	00000000	 DCD         |g_pLAN911X|
  000f0		 |$M43693|

			 ENDP  ; |LAN911XSendFrame|

	EXPORT	|LAN911XGetFrame|
	EXPORT	|??_C@_1EC@CDIADGHO@?$AAR?$AAX?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@NFIEPIMK@?$AAI?$AAn?$AAp?$AAu?$AAt?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAs?$AAm?$AAa?$AAl?$AAl?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@DJPMDJBC@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?$CB?$AA?5?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN@| [ DATA ] ; `string'
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T43731| DCD	|$LN38@LAN911XGet|
	DCD	0x40007502

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@CDIADGHO@?$AAR?$AAX?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6@| DCB "R"
	DCB	0x0, "X", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "D", 0x0, "W", 0x0, "O", 0x0, "R", 0x0, "D"
	DCB	0x0, " ", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "g", 0x0, "n"
	DCB	0x0, "e", 0x0, "d", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@NFIEPIMK@?$AAI?$AAn?$AAp?$AAu?$AAt?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAs?$AAm?$AAa?$AAl?$AAl?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "p", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, "o", 0x0, " ", 0x0, "s", 0x0, "m"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@DJPMDJBC@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?$CB?$AA?5?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "e"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, "!"
	DCB	0x0, " ", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN911XGetFrame| PROC

; 480  : {

  00000		 |$LN38@LAN911XGet|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43728|
  00008	e1a06001	 mov         r6, r1
  0000c	e1b07000	 movs        r7, r0

; 481  :     UINT32 cbLength;
; 482  :     UINT32 dwTemp;
; 483  :     UINT32 dwOffset;
; 484  : 
; 485  :     // Sanity check
; 486  :     if (!pBuffer || !pLength)

  00010	0a000008	 beq         |$LN18@LAN911XGet|
  00014	e3560000	 cmp         r6, #0
  00018	0a000006	 beq         |$LN18@LAN911XGet|

; 488  : 
; 489  :     // Check to see if data is available
; 490  :     if (!(RX_FIFO_INF_RXSUSED & READ_REGISTER_ULONG(&g_pLAN911X->rx_fifo_inf)))

  0001c	e59f81ac	 ldr         r8, [pc, #0x1AC]
  00020	e5984000	 ldr         r4, [r8]
  00024	e594307c	 ldr         r3, [r4, #0x7C]
  00028	e31308ff	 tst         r3, #0xFF, 16
  0002c	1a000005	 bne         |$LN17@LAN911XGet|

; 491  :     {
; 492  :         // No packet available
; 493  :         *pLength = 0;

  00030	e3a03000	 mov         r3, #0
  00034	e1c630b0	 strh        r3, [r6]
  00038		 |$LN18@LAN911XGet|

; 487  :         return 0;

  00038	e3a00000	 mov         r0, #0
  0003c		 |$LN20@LAN911XGet|

; 592  : }

  0003c	e28dd004	 add         sp, sp, #4
  00040	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN17@LAN911XGet|

; 494  :         return  *pLength;
; 495  :     }
; 496  : 
; 497  :     // At least one packet is available, get status
; 498  :     dwTemp = READ_REGISTER_ULONG(&g_pLAN911X->rx_status_fifo);

  00048	e5941040	 ldr         r1, [r4, #0x40]

; 499  :     cbLength = (dwTemp & RX_STATUS_FIFO_LENGTH_MASK) >> RX_STATUS_FIFO_LENGTH_OFFSET;

  0004c	e1a03101	 mov         r3, r1, lsl #2
  00050	e1a05923	 mov         r5, r3, lsr #18

; 500  :     if (RX_STATUS_FIFO_ES & dwTemp)

  00054	e3110902	 tst         r1, #2, 18
  00058	0a000017	 beq         |$LN16@LAN911XGet|

; 501  :     {
; 502  :         OALMSGS(OAL_ETHER, (L"Error in received packet!  0x%x\r\n", dwTemp));

  0005c	e59f3160	 ldr         r3, [pc, #0x160]
  00060	e5933440	 ldr         r3, [r3, #0x440]
  00064	e3130a02	 tst         r3, #2, 20
  00068	0a000002	 beq         |$LN22@LAN911XGet|
  0006c	e59f0158	 ldr         r0, [pc, #0x158]
  00070	eb000000	 bl          OALLogSerial
  00074	e5984000	 ldr         r4, [r8]
  00078		 |$LN22@LAN911XGet|

; 503  :         // Purge packet
; 504  :         if (cbLength < 32)

  00078	e3550020	 cmp         r5, #0x20
  0007c	2a000006	 bcs         |$LN15@LAN911XGet|

; 505  :         {
; 506  :             // Should never occur, since we don't pass bad packets
; 507  :             // Read appropriate number of DWORDs to clear packet
; 508  :             cbLength += 3;

  00080	e2853003	 add         r3, r5, #3

; 509  :             cbLength >>= 2;

  00084	e1b02123	 movs        r2, r3, lsr #2

; 510  :             for (; cbLength != 0; cbLength--)

  00088	0a000008	 beq         |$LN9@LAN911XGet|
  0008c		 |$LL14@LAN911XGet|

; 511  :                 READ_REGISTER_ULONG(&g_pLAN911X->rx_fifo);

  0008c	e5943000	 ldr         r3, [r4]
  00090	e2522001	 subs        r2, r2, #1
  00094	1afffffc	 bne         |$LL14@LAN911XGet|

; 512  :         }
; 513  :         else

  00098	ea000004	 b           |$LN9@LAN911XGet|
  0009c		 |$LN15@LAN911XGet|

; 514  :         {
; 515  :             WRITE_REGISTER_ULONG(&g_pLAN911X->rx_dp_ctrl, (DWORD) RX_DP_CTRL_FFWD);

  0009c	e3a03102	 mov         r3, #2, 2
  000a0	e5843078	 str         r3, [r4, #0x78]
  000a4		 |$LL10@LAN911XGet|

; 516  :             while (RX_DP_CTRL_FFWD & READ_REGISTER_ULONG(&g_pLAN911X->rx_dp_ctrl));

  000a4	e5943078	 ldr         r3, [r4, #0x78]
  000a8	e3130102	 tst         r3, #2, 2
  000ac	1afffffc	 bne         |$LL10@LAN911XGet|
  000b0		 |$LN9@LAN911XGet|

; 517  :         }
; 518  : 
; 519  :         *pLength = 0;

  000b0	e3a03000	 mov         r3, #0
  000b4	e1c630b0	 strh        r3, [r6]

; 520  :         goto ErrorReturn;

  000b8	ea00003c	 b           |$ErrorReturn$43321|
  000bc		 |$LN16@LAN911XGet|

; 521  :     }
; 522  : 
; 523  :     //length returned is Total frame length minus FCS length so
; 524  :     //reduce cbLength by 4 bytes
; 525  :     cbLength = (cbLength > FCS_LENGTH)? (cbLength - FCS_LENGTH) : 0;
; 526  :     
; 527  :     // Check input buffer size
; 528  :     if (*pLength < cbLength)

  000bc	e1d630b0	 ldrh        r3, [r6]
  000c0	e3550004	 cmp         r5, #4
  000c4	82455004	 subhi       r5, r5, #4
  000c8	93a05000	 movls       r5, #0
  000cc	e1530005	 cmp         r3, r5
  000d0	2a00000c	 bcs         |$LN8@LAN911XGet|

; 529  :     {
; 530  :         // Shouldn't ever occur
; 531  :         OALMSGS(OAL_ETHER, (L"Input buffer too small!\r\n"));

  000d4	e59f30e8	 ldr         r3, [pc, #0xE8]
  000d8	e5933440	 ldr         r3, [r3, #0x440]
  000dc	e3130a02	 tst         r3, #2, 20
  000e0	0a000002	 beq         |$LN26@LAN911XGet|
  000e4	e59f00dc	 ldr         r0, [pc, #0xDC]
  000e8	eb000000	 bl          OALLogSerial
  000ec	e5984000	 ldr         r4, [r8]
  000f0		 |$LN26@LAN911XGet|

; 532  :         // Dump packet 
; 533  :         WRITE_REGISTER_ULONG(&g_pLAN911X->rx_dp_ctrl, (DWORD) RX_DP_CTRL_FFWD);

  000f0	e3a03102	 mov         r3, #2, 2
  000f4	e5843078	 str         r3, [r4, #0x78]
  000f8		 |$LL7@LAN911XGet|

; 534  :         while (RX_DP_CTRL_FFWD & READ_REGISTER_ULONG(&g_pLAN911X->rx_dp_ctrl));

  000f8	e5943078	 ldr         r3, [r4, #0x78]
  000fc	e3130102	 tst         r3, #2, 2
  00100	1afffffc	 bne         |$LL7@LAN911XGet|

; 535  :         *pLength = 0;
; 536  :         goto ErrorReturn;

  00104	eaffffe9	 b           |$LN9@LAN911XGet|
  00108		 |$LN8@LAN911XGet|

; 537  :     }
; 538  : 
; 539  :     // return length in provided parameter
; 540  :     *pLength = (UINT16) cbLength;

  00108	e1c650b0	 strh        r5, [r6]

; 541  : 
; 542  :     // Check to ensure pBuffer is aligned on a DWORD boundary.
; 543  :     // If not, configure controller for additional pad bytes,
; 544  :     // and read initial DWORD
; 545  :     dwOffset = (UINT32)pBuffer & 0x3;

  0010c	e2179003	 ands        r9, r7, #3

; 546  :     if (dwOffset)

  00110	0a000014	 beq         |$LN5@LAN911XGet|

; 547  :     {
; 548  :         // This should never happen
; 549  :         OALMSGS(OAL_ETHER, (L"RX buffer not DWORD aligned...\r\n"));

  00114	e59f30a8	 ldr         r3, [pc, #0xA8]
  00118	e5933440	 ldr         r3, [r3, #0x440]
  0011c	e3130a02	 tst         r3, #2, 20
  00120	0a000002	 beq         |$LN28@LAN911XGet|
  00124	e59f0094	 ldr         r0, [pc, #0x94]
  00128	eb000000	 bl          OALLogSerial
  0012c	e5984000	 ldr         r4, [r8]
  00130		 |$LN28@LAN911XGet|

; 550  : 
; 551  :         // Configure to add padding prior real bytes in first dword read
; 552  :         // NOTE - there is a discrepancy in the docs on changing this parameter.  One
; 553  :         // place indicates this can only be changed on RX is off and data purged, another
; 554  :         // just says you can't change it while reading a packet.  We don't expect to ever
; 555  :         // be in this condition, but code is here anyway...
; 556  :         WRITE_REGISTER_ULONG(&g_pLAN911X->rx_cfg, dwOffset << RX_CFG_RXDOFF_OFFSET);

  00130	e1a03409	 mov         r3, r9, lsl #8
  00134	e584306c	 str         r3, [r4, #0x6C]

; 557  : 
; 558  :         // Read first dword, copy real bytes into user buffer 
; 559  :         dwTemp = READ_REGISTER_ULONG(&g_pLAN911X->rx_fifo);

  00138	e5943000	 ldr         r3, [r4]

; 560  :         memcpy(pBuffer, (UINT8 *)((UINT8 *)&dwTemp + dwOffset), 4-dwOffset);

  0013c	e28d1000	 add         r1, sp, #0
  00140	e2692004	 rsb         r2, r9, #4
  00144	e0891001	 add         r1, r9, r1
  00148	e1a00007	 mov         r0, r7
  0014c	e58d3000	 str         r3, [sp]
  00150	eb000000	 bl          memcpy

; 561  :         pBuffer = pBuffer + 4-dwOffset;

  00154	e0473009	 sub         r3, r7, r9

; 562  :         cbLength = cbLength - (4 - dwOffset);

  00158	e0892005	 add         r2, r9, r5
  0015c	e2837004	 add         r7, r3, #4
  00160	e2425004	 sub         r5, r2, #4

; 563  :         // user buffer should now be DWORD aligned
; 564  :     }
; 565  :     else

  00164	ea000001	 b           |$LN33@LAN911XGet|
  00168		 |$LN5@LAN911XGet|

; 566  :         WRITE_REGISTER_ULONG(&g_pLAN911X->rx_cfg, 0);

  00168	e3a03000	 mov         r3, #0
  0016c	e584306c	 str         r3, [r4, #0x6C]
  00170		 |$LN33@LAN911XGet|

; 567  : 
; 568  : 
; 569  :     // Read complete DWORDs into provided buffer
; 570  :     while (cbLength >= 4)

  00170	e3550004	 cmp         r5, #4
  00174	3a000005	 bcc         |$LN2@LAN911XGet|
  00178	e1a02125	 mov         r2, r5, lsr #2
  0017c		 |$LL3@LAN911XGet|

; 571  :     {
; 572  :         *(ULONG *)pBuffer = READ_REGISTER_ULONG(&g_pLAN911X->rx_fifo);

  0017c	e5943000	 ldr         r3, [r4]

; 573  :         cbLength = cbLength - 4;

  00180	e2455004	 sub         r5, r5, #4
  00184	e2522001	 subs        r2, r2, #1
  00188	e4873004	 str         r3, [r7], #4
  0018c	1afffffa	 bne         |$LL3@LAN911XGet|
  00190		 |$LN2@LAN911XGet|

; 574  :         pBuffer = pBuffer + 4;
; 575  :     }
; 576  : 
; 577  :     // Read any remaining bytes into buffer
; 578  :     if (cbLength)

  00190	e3550000	 cmp         r5, #0

; 579  :     {
; 580  :         dwTemp = READ_REGISTER_ULONG(&g_pLAN911X->rx_fifo);

  00194	15943000	 ldrne       r3, [r4]

; 581  :         memcpy(pBuffer, &dwTemp, cbLength);

  00198	11a02005	 movne       r2, r5
  0019c	128d1000	 addne       r1, sp, #0
  001a0	11a00007	 movne       r0, r7
  001a4	158d3000	 strne       r3, [sp]
  001a8	1b000000	 blne        memcpy

; 582  : 
; 583  :     }
; 584  : 
; 585  :     //read the four byte FCS from FIFO and discard it
; 586  :     dwTemp = READ_REGISTER_ULONG(&g_pLAN911X->rx_fifo);

  001ac	e5943000	 ldr         r3, [r4]
  001b0		 |$ErrorReturn$43321|

; 587  :     
; 588  : ErrorReturn:
; 589  :     // Acknowledge RX interrupt
; 590  :     WRITE_REGISTER_ULONG(&g_pLAN911X->int_sts, INT_STS_RSFL);

  001b0	e3a03008	 mov         r3, #8
  001b4	e5843058	 str         r3, [r4, #0x58]

; 591  :     return  *pLength;

  001b8	e1d600b0	 ldrh        r0, [r6]
  001bc	eaffff9e	 b           |$LN20@LAN911XGet|
  001c0		 |$LN39@LAN911XGet|
  001c0		 |$LN40@LAN911XGet|
  001c0	00000000	 DCD         |??_C@_1EC@CDIADGHO@?$AAR?$AAX?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6@|
  001c4		 |$LN41@LAN911XGet|
  001c4	00000000	 DCD         |dpCurSettings|
  001c8		 |$LN42@LAN911XGet|
  001c8	00000000	 DCD         |??_C@_1DE@NFIEPIMK@?$AAI?$AAn?$AAp?$AAu?$AAt?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAs?$AAm?$AAa?$AAl?$AAl?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  001cc		 |$LN43@LAN911XGet|
  001cc	00000000	 DCD         |??_C@_1EE@DJPMDJBC@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?$CB?$AA?5?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN@|
  001d0		 |$LN44@LAN911XGet|
  001d0	00000000	 DCD         |g_pLAN911X|
  001d4		 |$M43729|

			 ENDP  ; |LAN911XGetFrame|

	EXPORT	|LAN911XEnableInts|

  00000			 AREA	 |.pdata|, PDATA
|$T43744| DCD	|$LN5@LAN911XEna|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN911XEnableInts| PROC

; 597  : {

  00000		 |$LN5@LAN911XEna|
  00000		 |$M43741|

; 598  :     // Unmask RS status fifo interrupt
; 599  :     // Global interrupt is already enabled
; 600  :     WRITE_REGISTER_ULONG(&g_pLAN911X->int_en, INT_EN_RSFL);

  00000	e59f300c	 ldr         r3, [pc, #0xC]
  00004	e3a02008	 mov         r2, #8
  00008	e5933000	 ldr         r3, [r3]
  0000c	e583205c	 str         r2, [r3, #0x5C]

; 601  : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN6@LAN911XEna|
  00014		 |$LN7@LAN911XEna|
  00014	00000000	 DCD         |g_pLAN911X|
  00018		 |$M43742|

			 ENDP  ; |LAN911XEnableInts|

	EXPORT	|LAN911XDisableInts|

  00000			 AREA	 |.pdata|, PDATA
|$T43753| DCD	|$LN5@LAN911XDis|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN911XDisableInts| PROC

; 606  : {

  00000		 |$LN5@LAN911XDis|
  00000		 |$M43750|

; 607  :     WRITE_REGISTER_ULONG(&g_pLAN911X->int_en, 0);

  00000	e59f300c	 ldr         r3, [pc, #0xC]
  00004	e3a02000	 mov         r2, #0
  00008	e5933000	 ldr         r3, [r3]
  0000c	e583205c	 str         r2, [r3, #0x5C]

; 608  : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN6@LAN911XDis|
  00014		 |$LN7@LAN911XDis|
  00014	00000000	 DCD         |g_pLAN911X|
  00018		 |$M43751|

			 ENDP  ; |LAN911XDisableInts|

	EXPORT	|LAN911XCurrentPacketFilter|

  00000			 AREA	 |.pdata|, PDATA
|$T43762| DCD	|$LN5@LAN911XCur|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN911XCurrentPacketFilter| PROC

; 613  : {

  00000		 |$LN5@LAN911XCur|
  00000		 |$M43759|

; 614  :     // Not supported
; 615  :     // Must exist though because it's called through a 
; 616  :     // function pointer that isn't checked 
; 617  :     UNREFERENCED_PARAMETER(filter);
; 618  : 
; 619  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M43760|

			 ENDP  ; |LAN911XCurrentPacketFilter|

	EXPORT	|LAN911XMulticastList|

  00000			 AREA	 |.pdata|, PDATA
|$T43771| DCD	|$LN5@LAN911XMul|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN911XMulticastList| PROC

; 624  : {

  00000		 |$LN5@LAN911XMul|
  00000		 |$M43768|

; 625  :     // Not supported
; 626  :     UNREFERENCED_PARAMETER(pAddresses);
; 627  :     UNREFERENCED_PARAMETER(count);
; 628  :     return FALSE;

  00000	e3a00000	 mov         r0, #0

; 629  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43769|

			 ENDP  ; |LAN911XMulticastList|

	EXPORT	|LAN911XFindController|
	EXPORT	|??_C@_1KI@DMEFCEJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@KGEACGLH@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAE?$AAt?$AAh?$AAe?$AAr?$AAn?$AAe?$AAt?$AA?5?$AAc?$AAh?$AAi?$AAp?$AA?5?$AAI?$AAD?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?$CB@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T43784| DCD	|$LN10@LAN911XFin|
	DCD	0x40003201

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KI@DMEFCEJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "B", 0x0, "O"
	DCB	0x0, "O", 0x0, "T", 0x0, "\\", 0x0, "L", 0x0, "A", 0x0, "N"
	DCB	0x0, "9", 0x0, "1", 0x0, "1", 0x0, "X", 0x0, "\\", 0x0, "."
	DCB	0x0, "\\", 0x0, "l", 0x0, "a", 0x0, "n", 0x0, "9", 0x0, "1"
	DCB	0x0, "1", 0x0, "x", 0x0, ".", 0x0, "c", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@KGEACGLH@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAE?$AAt?$AAh?$AAe?$AAr?$AAn?$AAe?$AAt?$AA?5?$AAc?$AAh?$AAi?$AAp?$AA?5?$AAI?$AAD?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?$CB@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "E", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, "r"
	DCB	0x0, "n", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "h"
	DCB	0x0, "i", 0x0, "p", 0x0, " ", 0x0, "I", 0x0, "D", 0x0, " "
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN911XFindController| PROC

; 635  : {

  00000		 |$LN10@LAN911XFin|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43781|

; 636  :     BOOL RetCode = FALSE;
; 637  :     DWORD dwTemp;
; 638  :     LAN911X_REGS* pCtrl;
; 639  :     pCtrl = (LAN911X_REGS*) pAddr;
; 640  :     // Verify chip exists
; 641  :     dwTemp = READ_REGISTER_ULONG(&pCtrl->id_rev);

  00004	e590e050	 ldr         lr, [r0, #0x50]

; 642  :     // dummy read
; 643  :     dwTemp = READ_REGISTER_ULONG(&pCtrl->id_rev);

  00008	e5905050	 ldr         r5, [r0, #0x50]
  0000c	e3e03cff	 mvn         r3, #0xFF, 24

; 644  : 
; 645  :     g_dwChipId = dwTemp & 0xFFFF0000; 

  00010	e59f20ac	 ldr         r2, [pc, #0xAC]
  00014	e22330ff	 eor         r3, r3, #0xFF
  00018	e3a04745	 mov         r4, #0x45, 14
  0001c	e0050003	 and         r0, r5, r3

; 646  :     
; 647  :     switch(g_dwChipId)

  00020	e3843801	 orr         r3, r4, #1, 16
  00024	e1500003	 cmp         r0, r3
  00028	e5820000	 str         r0, [r2]
  0002c	e3a04000	 mov         r4, #0
  00030	0a00001a	 beq         |$LN3@LAN911XFin|
  00034	e3a03745	 mov         r3, #0x45, 14
  00038	e3833802	 orr         r3, r3, #2, 16
  0003c	e1500003	 cmp         r0, r3
  00040	0a000016	 beq         |$LN3@LAN911XFin|
  00044	e3a03745	 mov         r3, #0x45, 14
  00048	e3833803	 orr         r3, r3, #3, 16
  0004c	e1500003	 cmp         r0, r3
  00050	0a000012	 beq         |$LN3@LAN911XFin|
  00054	e3500746	 cmp         r0, #0x46, 14
  00058	0a000010	 beq         |$LN3@LAN911XFin|
  0005c	e3a03492	 mov         r3, #0x92, 8
  00060	e3833602	 orr         r3, r3, #2, 12
  00064	e1500003	 cmp         r0, r3
  00068	0a00000c	 beq         |$LN3@LAN911XFin|
  0006c	e3a03493	 mov         r3, #0x93, 8
  00070	e3833811	 orr         r3, r3, #0x11, 16
  00074	e1500003	 cmp         r0, r3
  00078	0a000008	 beq         |$LN3@LAN911XFin|

; 648  :     {
; 649  :         case 0x93110000:
; 650  :         case 0x92200000:
; 651  :         case 0x01180000:
; 652  :         case 0x01170000:
; 653  :         case 0x01160000:
; 654  :         case 0x01150000:
; 655  :         break;
; 656  :     default:
; 657  :         ERRORMSG(1, (L"Invalid Ethernet chip ID (0x%x)!\r\n", dwTemp));

  0007c	e59f103c	 ldr         r1, [pc, #0x3C]
  00080	e59f0034	 ldr         r0, [pc, #0x34]
  00084	e3a03c02	 mov         r3, #2, 24
  00088	e3832091	 orr         r2, r3, #0x91
  0008c	eb000000	 bl          NKDbgPrintfW
  00090	e59f0020	 ldr         r0, [pc, #0x20]
  00094	e1a01005	 mov         r1, r5
  00098	eb000000	 bl          NKDbgPrintfW

; 658  :         goto ErrorReturn;

  0009c	ea000002	 b           |$ErrorReturn$43387|
  000a0		 |$LN3@LAN911XFin|

; 659  :     }
; 660  :     //// Wake chip from sleep state - write any value to the byte register, poll PMT ready bit
; 661  :     //WRITE_REGISTER_ULONG((PULONG)&pCtrl->byte_test, 0);
; 662  :     //while ( !(PMT_CTL_READY & READ_REGISTER_ULONG((PULONG)&pCtrl->pmt_ctrl)));
; 663  : 
; 664  :     if (pdwID)    

  000a0	e3510000	 cmp         r1, #0

; 665  :         *pdwID = dwTemp;

  000a4	15815000	 strne       r5, [r1]

; 666  : 
; 667  :     RetCode = TRUE;

  000a8	e3a04001	 mov         r4, #1
  000ac		 |$ErrorReturn$43387|

; 668  : 
; 669  : ErrorReturn:
; 670  :     return RetCode;
; 671  : }

  000ac	e1a00004	 mov         r0, r4
  000b0	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$LN11@LAN911XFin|
  000b8		 |$LN12@LAN911XFin|
  000b8	00000000	 DCD         |??_C@_1EG@KGEACGLH@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAE?$AAt?$AAh?$AAe?$AAr?$AAn?$AAe?$AAt?$AA?5?$AAc?$AAh?$AAi?$AAp?$AA?5?$AAI?$AAD?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?$CB@|
  000bc		 |$LN13@LAN911XFin|
  000bc	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  000c0		 |$LN14@LAN911XFin|
  000c0	00000000	 DCD         |??_C@_1KI@DMEFCEJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  000c4		 |$LN15@LAN911XFin|
  000c4	00000000	 DCD         |g_dwChipId|
  000c8		 |$M43782|

			 ENDP  ; |LAN911XFindController|


  00000			 AREA	 |.pdata|, PDATA
|$T43863| DCD	|$LN77@LAN911XEep|
	DCD	0x40006f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN911XEepromWrite| PROC

; 676  : {

  00000		 |$LN77@LAN911XEep|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M43860|
  00004	e1a09002	 mov         r9, r2
  00008	e1a08001	 mov         r8, r1
  0000c	e1a07000	 mov         r7, r0

; 677  :     UINT8 index;
; 678  :     BOOL RetCode = FALSE;

  00010	e59f31a0	 ldr         r3, [pc, #0x1A0]
  00014	e3a02493	 mov         r2, #0x93, 8
  00018	e3a06000	 mov         r6, #0
  0001c	e5935004	 ldr         r5, [r3, #4]
  00020	e593e000	 ldr         lr, [r3]
  00024	e3824811	 orr         r4, r2, #0x11, 16
  00028		 |$LL16@LAN911XEep|

; 679  : 
; 680  :     // Unlock eeprom
; 681  :     while ( (E2P_CMD_BUSY & READ_EEPROM_CMD(g_pLAN911X)));

  00028	e1550004	 cmp         r5, r4
  0002c	028e3f6d	 addeq       r3, lr, #0x6D, 30
  00030	128e30b0	 addne       r3, lr, #0xB0
  00034	e5933000	 ldr         r3, [r3]
  00038	e3130102	 tst         r3, #2, 2
  0003c	1afffff9	 bne         |$LL16@LAN911XEep|

; 682  :     // Issue erase/write enable
; 683  :     WRITE_EEPROM_CMD(g_pLAN911X, (ULONG) (E2P_CMD_EWEN | E2P_CMD_TIMEOUT | E2P_CMD_BUSY ));

  00040	e1550004	 cmp         r5, r4
  00044	03a03802	 moveq       r3, #2, 16
  00048	13a03c02	 movne       r3, #2, 24
  0004c	028e2f6d	 addeq       r2, lr, #0x6D, 30
  00050	e383320a	 orr         r3, r3, #0xA, 4
  00054	128e20b0	 addne       r2, lr, #0xB0
  00058	e5823000	 str         r3, [r2]
  0005c		 |$LL14@LAN911XEep|

; 684  :     // Wait for command to complete
; 685  :     while ( (E2P_CMD_BUSY & READ_EEPROM_CMD(g_pLAN911X)));

  0005c	e1550004	 cmp         r5, r4
  00060	028e3f6d	 addeq       r3, lr, #0x6D, 30
  00064	128e30b0	 addne       r3, lr, #0xB0
  00068	e5933000	 ldr         r3, [r3]
  0006c	e3130102	 tst         r3, #2, 2
  00070	1afffff9	 bne         |$LL14@LAN911XEep|

; 686  :     // Check for timeout
; 687  :     if (E2P_CMD_TIMEOUT & READ_EEPROM_CMD(g_pLAN911X))

  00074	e1550004	 cmp         r5, r4
  00078	028e3f6d	 addeq       r3, lr, #0x6D, 30
  0007c	128e30b0	 addne       r3, lr, #0xB0
  00080	e5933000	 ldr         r3, [r3]
  00084	03a02802	 moveq       r2, #2, 16
  00088	13a02c02	 movne       r2, #2, 24
  0008c	e1130002	 tst         r3, r2
  00090	1a000038	 bne         |$ErrorReturn$43412|

; 688  :     {
; 689  :         goto ErrorReturn;
; 690  :     }
; 691  :     index = 0;

  00094	e3a00000	 mov         r0, #0
  00098		 |$LL11@LAN911XEep|

; 692  :     
; 693  : 
; 694  :     do 
; 695  :     {
; 696  :         // Erase location
; 697  :         WRITE_EEPROM_CMD(g_pLAN911X, (Offset + index) | E2P_CMD_ERASE | E2P_CMD_TIMEOUT | E2P_CMD_BUSY );

  00098	e1550004	 cmp         r5, r4
  0009c	03a03802	 moveq       r3, #2, 16
  000a0	13a03c02	 movne       r3, #2, 24
  000a4	e0801009	 add         r1, r0, r9
  000a8	e1813003	 orr         r3, r1, r3
  000ac	028e2f6d	 addeq       r2, lr, #0x6D, 30
  000b0	e383320d	 orr         r3, r3, #0xD, 4
  000b4	128e20b0	 addne       r2, lr, #0xB0
  000b8	e5823000	 str         r3, [r2]
  000bc		 |$LL8@LAN911XEep|

; 698  :         // Wait for command to complete
; 699  :         while ( (E2P_CMD_BUSY & READ_EEPROM_CMD(g_pLAN911X)));

  000bc	e1550004	 cmp         r5, r4
  000c0	028e3f6d	 addeq       r3, lr, #0x6D, 30
  000c4	128e30b0	 addne       r3, lr, #0xB0
  000c8	e5933000	 ldr         r3, [r3]
  000cc	e3130102	 tst         r3, #2, 2
  000d0	1afffff9	 bne         |$LL8@LAN911XEep|

; 700  : 
; 701  :         // Check for timeout
; 702  :         if (E2P_CMD_TIMEOUT & READ_EEPROM_CMD(g_pLAN911X))

  000d4	e1550004	 cmp         r5, r4
  000d8	028e3f6d	 addeq       r3, lr, #0x6D, 30
  000dc	128e30b0	 addne       r3, lr, #0xB0
  000e0	e5933000	 ldr         r3, [r3]
  000e4	03a02802	 moveq       r2, #2, 16
  000e8	13a02c02	 movne       r2, #2, 24
  000ec	e1130002	 tst         r3, r2
  000f0	1a000020	 bne         |$ErrorReturn$43412|

; 703  :         {            
; 704  :             goto ErrorReturn;
; 705  :         }
; 706  :         
; 707  :         WRITE_EEPROM_DATA(g_pLAN911X, *pValue);

  000f4	e5d73000	 ldrb        r3, [r7]
  000f8	e1550004	 cmp         r5, r4
  000fc	028e2f6e	 addeq       r2, lr, #0x6E, 30
  00100	128e20b4	 addne       r2, lr, #0xB4

; 708  :         WRITE_EEPROM_CMD(g_pLAN911X, (Offset + index) | E2P_CMD_WRITE | E2P_CMD_TIMEOUT | E2P_CMD_BUSY );

  00104	e1550004	 cmp         r5, r4
  00108	e5823000	 str         r3, [r2]
  0010c	03a03802	 moveq       r3, #2, 16
  00110	13a03c02	 movne       r3, #2, 24
  00114	e1813003	 orr         r3, r1, r3
  00118	028e2f6d	 addeq       r2, lr, #0x6D, 30
  0011c	e383320b	 orr         r3, r3, #0xB, 4
  00120	128e20b0	 addne       r2, lr, #0xB0
  00124	e5823000	 str         r3, [r2]
  00128		 |$LL5@LAN911XEep|

; 709  :         // Wait for command to complete
; 710  :         while ( (E2P_CMD_BUSY & READ_EEPROM_CMD(g_pLAN911X)));

  00128	e1550004	 cmp         r5, r4
  0012c	028e3f6d	 addeq       r3, lr, #0x6D, 30
  00130	128e30b0	 addne       r3, lr, #0xB0
  00134	e5933000	 ldr         r3, [r3]
  00138	e3130102	 tst         r3, #2, 2
  0013c	1afffff9	 bne         |$LL5@LAN911XEep|

; 711  :         // Check for timeout
; 712  :         if (E2P_CMD_TIMEOUT & READ_EEPROM_CMD(g_pLAN911X))

  00140	e1550004	 cmp         r5, r4
  00144	028e3f6d	 addeq       r3, lr, #0x6D, 30
  00148	128e30b0	 addne       r3, lr, #0xB0
  0014c	e5933000	 ldr         r3, [r3]
  00150	03a02802	 moveq       r2, #2, 16
  00154	13a02c02	 movne       r2, #2, 24
  00158	e1130002	 tst         r3, r2
  0015c	1a000005	 bne         |$ErrorReturn$43412|

; 713  :         {
; 714  :             goto ErrorReturn;
; 715  :         }
; 716  : 
; 717  :         pValue++;
; 718  :         index++;

  00160	e2803001	 add         r3, r0, #1
  00164	e20300ff	 and         r0, r3, #0xFF

; 719  :     }
; 720  :     while (index < Length);

  00168	e1500008	 cmp         r0, r8
  0016c	e2877001	 add         r7, r7, #1
  00170	3affffc8	 bcc         |$LL11@LAN911XEep|

; 721  : 
; 722  :     RetCode = TRUE;

  00174	e3a06001	 mov         r6, #1
  00178		 |$ErrorReturn$43412|

; 723  : 
; 724  : ErrorReturn:
; 725  : 
; 726  :     // Issue erase/write disable
; 727  :     WRITE_EEPROM_CMD(g_pLAN911X,(ULONG)( E2P_CMD_EWDS | E2P_CMD_TIMEOUT | E2P_CMD_BUSY ));

  00178	e1550004	 cmp         r5, r4
  0017c	03a03802	 moveq       r3, #2, 16
  00180	13a03c02	 movne       r3, #2, 24
  00184	028e2f6d	 addeq       r2, lr, #0x6D, 30
  00188	e3833209	 orr         r3, r3, #9, 4
  0018c	128e20b0	 addne       r2, lr, #0xB0
  00190	e5823000	 str         r3, [r2]
  00194		 |$LL2@LAN911XEep|

; 728  :     // Wait for command to complete
; 729  :     while ( (E2P_CMD_BUSY & READ_EEPROM_CMD(g_pLAN911X)));

  00194	e1550004	 cmp         r5, r4
  00198	028e3f6d	 addeq       r3, lr, #0x6D, 30
  0019c	128e30b0	 addne       r3, lr, #0xB0
  001a0	e5933000	 ldr         r3, [r3]
  001a4	e3130102	 tst         r3, #2, 2
  001a8	1afffff9	 bne         |$LL2@LAN911XEep|

; 730  : 
; 731  :     return RetCode;
; 732  : }

  001ac	e1a00006	 mov         r0, r6
  001b0	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  001b4	e12fff1e	 bx          lr
  001b8		 |$LN78@LAN911XEep|
  001b8		 |$LN79@LAN911XEep|
  001b8	00000000	 DCD         |g_pLAN911X|
  001bc		 |$M43861|

			 ENDP  ; |LAN911XEepromWrite|

	EXPORT	|LAN911XGetMacAddress|

  00000			 AREA	 |.pdata|, PDATA
|$T43943| DCD	|$LN77@LAN911XGet@2|
	DCD	0x40005302
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN911XGetMacAddress| PROC

; 736  : {

  00000		 |$LN77@LAN911XGet@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43940|
  00008	e1a06001	 mov         r6, r1
  0000c	e1a04000	 mov         r4, r0

; 737  :     BOOL RetCode = FALSE;
; 738  :     DWORD dwTemp;
; 739  :     LAN911X_REGS* pCtrl;
; 740  : 
; 741  :     if (!LAN911XFindController(pAddr,&dwTemp))

  00010	e28d1000	 add         r1, sp, #0
  00014	e3a05000	 mov         r5, #0
  00018	eb000000	 bl          LAN911XFindController
  0001c	e3500000	 cmp         r0, #0

; 742  :     {     
; 743  :         return FALSE;

  00020	03a05000	 moveq       r5, #0
  00024	0a000043	 beq         |$ErrorReturn$43476|

; 744  :     }
; 745  : 
; 746  :     g_pLAN911X = pCtrl = (LAN911X_REGS*) pAddr;

  00028	e59f3118	 ldr         r3, [pc, #0x118]

; 747  :     
; 748  : 	// Force update from eeprom    
; 749  :     WRITE_EEPROM_CMD(pCtrl, (ULONG) (E2P_CMD_RELOAD | E2P_CMD_TIMEOUT | E2P_CMD_BUSY ));

  0002c	e3a02493	 mov         r2, #0x93, 8
  00030	e3821811	 orr         r1, r2, #0x11, 16
  00034	e5930004	 ldr         r0, [r3, #4]
  00038	e5834000	 str         r4, [r3]
  0003c	e1500001	 cmp         r0, r1
  00040	03a03802	 moveq       r3, #2, 16
  00044	13a03c02	 movne       r3, #2, 24
  00048	02842f6d	 addeq       r2, r4, #0x6D, 30
  0004c	e383320f	 orr         r3, r3, #0xF, 4
  00050	128420b0	 addne       r2, r4, #0xB0
  00054	e5823000	 str         r3, [r2]
  00058		 |$LL10@LAN911XGet@2|

; 750  :     // Check for MAC load from EEPROM done
; 751  :     while ( (E2P_CMD_BUSY & READ_EEPROM_CMD(pCtrl)));

  00058	e1500001	 cmp         r0, r1
  0005c	02843f6d	 addeq       r3, r4, #0x6D, 30
  00060	128430b0	 addne       r3, r4, #0xB0
  00064	e5933000	 ldr         r3, [r3]
  00068	e3130102	 tst         r3, #2, 2
  0006c	1afffff9	 bne         |$LL10@LAN911XGet@2|
  00070		 |$LL8@LAN911XGet@2|

; 752  :     while ( !(PMT_CTL_READY & READ_REGISTER_ULONG((PULONG)&pCtrl->pmt_ctrl)));

  00070	e5943084	 ldr         r3, [r4, #0x84]
  00074	e3130001	 tst         r3, #1
  00078	0afffffc	 beq         |$LL8@LAN911XGet@2|

; 753  :     
; 754  :     // do it TWICE because sometimes it doesn't wor properly with only one RELOAD
; 755  :     WRITE_EEPROM_CMD(pCtrl, (ULONG) (E2P_CMD_RELOAD | E2P_CMD_TIMEOUT | E2P_CMD_BUSY ));

  0007c	e1500001	 cmp         r0, r1
  00080	03a03802	 moveq       r3, #2, 16
  00084	13a03c02	 movne       r3, #2, 24
  00088	02842f6d	 addeq       r2, r4, #0x6D, 30
  0008c	e383320f	 orr         r3, r3, #0xF, 4
  00090	128420b0	 addne       r2, r4, #0xB0
  00094	e5823000	 str         r3, [r2]
  00098		 |$LL6@LAN911XGet@2|

; 756  :     while ( (E2P_CMD_BUSY & READ_EEPROM_CMD(pCtrl)));

  00098	e1500001	 cmp         r0, r1
  0009c	02843f6d	 addeq       r3, r4, #0x6D, 30
  000a0	128430b0	 addne       r3, r4, #0xB0
  000a4	e5933000	 ldr         r3, [r3]
  000a8	e3130102	 tst         r3, #2, 2
  000ac	1afffff9	 bne         |$LL6@LAN911XGet@2|
  000b0		 |$LL4@LAN911XGet@2|

; 757  :     while ( !(PMT_CTL_READY & READ_REGISTER_ULONG((PULONG)&pCtrl->pmt_ctrl)));

  000b0	e5943084	 ldr         r3, [r4, #0x84]
  000b4	e3130001	 tst         r3, #1
  000b8	0afffffc	 beq         |$LL4@LAN911XGet@2|

; 758  :     
; 759  : 
; 760  : 
; 761  :     if (!(E2P_CMD_MAC_LOADED & READ_EEPROM_CMD(pCtrl)))

  000bc	e1500001	 cmp         r0, r1
  000c0	02843f6d	 addeq       r3, r4, #0x6D, 30
  000c4	128430b0	 addne       r3, r4, #0xB0
  000c8	e5933000	 ldr         r3, [r3]
  000cc	03a02801	 moveq       r2, #1, 16
  000d0	13a02c01	 movne       r2, #1, 24
  000d4	e1130002	 tst         r3, r2
  000d8	0a000016	 beq         |$ErrorReturn$43476|

; 762  :     {
; 763  : #if defined(SIMULATED_MAC_ADDRESS0) && defined(SIMULATED_MAC_ADDRESS1) && defined(SIMULATED_MAC_ADDRESS2)
; 764  :         mac[0] = SIMULATED_MAC_ADDRESS0;
; 765  :         mac[1] = SIMULATED_MAC_ADDRESS1;
; 766  :         mac[2] = SIMULATED_MAC_ADDRESS2;
; 767  :         WriteMacCSR(MAC_ADDRL_INDEX, ((DWORD) mac[1]) << 16 | mac[0]);
; 768  :         WriteMacCSR(MAC_ADDRH_INDEX, (DWORD) mac[2]);
; 769  :         RetCode = TRUE;
; 770  : #else
; 771  :         goto ErrorReturn;
; 772  : #endif
; 773  :     }
; 774  :     else
; 775  :     {
; 776  :         dwTemp = ReadMacCSR(MAC_ADDRL_INDEX);

  000dc		 |$LL33@LAN911XGet@2|
  000dc	e59430a4	 ldr         r3, [r4, #0xA4]
  000e0	e3130102	 tst         r3, #2, 2
  000e4	1afffffc	 bne         |$LL33@LAN911XGet@2|
  000e8	e3a0310f	 mov         r3, #0xF, 2
  000ec	e58430a4	 str         r3, [r4, #0xA4]
  000f0		 |$LL31@LAN911XGet@2|
  000f0	e59430a4	 ldr         r3, [r4, #0xA4]
  000f4	e3130102	 tst         r3, #2, 2
  000f8	1afffffc	 bne         |$LL31@LAN911XGet@2|
  000fc	e59420a8	 ldr         r2, [r4, #0xA8]

; 777  :         mac[0] = (UINT16)(dwTemp & 0xFFFF);
; 778  :         mac[1] = (UINT16)(dwTemp >> 16);

  00100	e1a03822	 mov         r3, r2, lsr #16
  00104	e1c630b2	 strh        r3, [r6, #2]
  00108	e1c620b0	 strh        r2, [r6]

; 779  :         mac[2] = (UINT16)(ReadMacCSR(MAC_ADDRH_INDEX) & 0xFFFF);

  0010c		 |$LL39@LAN911XGet@2|
  0010c	e59430a4	 ldr         r3, [r4, #0xA4]
  00110	e3130102	 tst         r3, #2, 2
  00114	1afffffc	 bne         |$LL39@LAN911XGet@2|
  00118	e3a0310b	 mov         r3, #0xB, 2
  0011c	e58430a4	 str         r3, [r4, #0xA4]
  00120		 |$LL37@LAN911XGet@2|
  00120	e59430a4	 ldr         r3, [r4, #0xA4]
  00124	e3130102	 tst         r3, #2, 2
  00128	1afffffc	 bne         |$LL37@LAN911XGet@2|
  0012c	e59430a8	 ldr         r3, [r4, #0xA8]

; 780  :         RetCode = TRUE;

  00130	e3a05001	 mov         r5, #1
  00134	e1c630b4	 strh        r3, [r6, #4]
  00138		 |$ErrorReturn$43476|

; 781  :     }
; 782  : 
; 783  : #if !defined(SIMULATED_MAC_ADDRESS0) || !defined(SIMULATED_MAC_ADDRESS1) || !defined(SIMULATED_MAC_ADDRESS2)
; 784  : ErrorReturn:
; 785  : #endif
; 786  :     return RetCode;
; 787  : }

  00138	e1a00005	 mov         r0, r5
  0013c	e28dd004	 add         sp, sp, #4
  00140	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00144	e12fff1e	 bx          lr
  00148		 |$LN78@LAN911XGet@2|
  00148		 |$LN79@LAN911XGet@2|
  00148	00000000	 DCD         |g_pLAN911X|
  0014c		 |$M43941|

			 ENDP  ; |LAN911XGetMacAddress|

	EXPORT	|LAN911XSetMacAddress|

  00000			 AREA	 |.pdata|, PDATA
|$T43966| DCD	|$LN17@LAN911XSet|
	DCD	0x40002a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN911XSetMacAddress| PROC

; 790  : {

  00000		 |$LN17@LAN911XSet|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43963|
  00008	e1a06001	 mov         r6, r1
  0000c	e1a04000	 mov         r4, r0

; 791  :     BOOL RetCode = FALSE;
; 792  :     UINT8 temp;    
; 793  :     LAN911X_REGS* pCtrl;
; 794  : 
; 795  :     pCtrl = (LAN911X_REGS*) pAddr;
; 796  :  
; 797  :     // Write leading 0xa5
; 798  :     temp = 0xA5;

  00010	e3a030a5	 mov         r3, #0xA5

; 799  :     if (!LAN911XEepromWrite(&temp, 1, 0))

  00014	e3a02000	 mov         r2, #0
  00018	e3a01001	 mov         r1, #1
  0001c	e28d0000	 add         r0, sp, #0
  00020	e5cd3000	 strb        r3, [sp]
  00024	e3a05000	 mov         r5, #0
  00028	eb000000	 bl          LAN911XEepromWrite
  0002c	e3500000	 cmp         r0, #0
  00030	0a000017	 beq         |$ErrorReturn$43492|

; 800  :     {
; 801  :         goto ErrorReturn;
; 802  :     }
; 803  : 
; 804  :     // Write MAC address
; 805  :     if (!LAN911XEepromWrite((UINT8 *)mac, 6, 1))

  00034	e3a02001	 mov         r2, #1
  00038	e3a01006	 mov         r1, #6
  0003c	e1a00006	 mov         r0, r6
  00040	eb000000	 bl          LAN911XEepromWrite
  00044	e3500000	 cmp         r0, #0
  00048	0a000011	 beq         |$ErrorReturn$43492|

; 806  :     {
; 807  :         goto ErrorReturn;
; 808  :     }
; 809  :     
; 810  :     // Force reload of MAC
; 811  :     WRITE_EEPROM_CMD(pCtrl, (ULONG) (E2P_CMD_RELOAD | E2P_CMD_TIMEOUT | E2P_CMD_BUSY ));

  0004c	e59f3050	 ldr         r3, [pc, #0x50]
  00050	e3a02493	 mov         r2, #0x93, 8
  00054	e3821811	 orr         r1, r2, #0x11, 16
  00058	e5930000	 ldr         r0, [r3]
  0005c	e1500001	 cmp         r0, r1
  00060	03a03802	 moveq       r3, #2, 16
  00064	13a03c02	 movne       r3, #2, 24
  00068	02842f6d	 addeq       r2, r4, #0x6D, 30
  0006c	e383320f	 orr         r3, r3, #0xF, 4
  00070	128420b0	 addne       r2, r4, #0xB0
  00074	e5823000	 str         r3, [r2]
  00078		 |$LL2@LAN911XSet|

; 812  :     // Wait for command to complete
; 813  :     while ( (E2P_CMD_BUSY & READ_EEPROM_CMD(pCtrl)));

  00078	e1500001	 cmp         r0, r1
  0007c	02843f6d	 addeq       r3, r4, #0x6D, 30
  00080	128430b0	 addne       r3, r4, #0xB0
  00084	e5933000	 ldr         r3, [r3]
  00088	e3130102	 tst         r3, #2, 2
  0008c	1afffff9	 bne         |$LL2@LAN911XSet|

; 814  : 
; 815  :     RetCode = TRUE;

  00090	e3a05001	 mov         r5, #1
  00094		 |$ErrorReturn$43492|

; 816  : 
; 817  : ErrorReturn:
; 818  :     return RetCode;
; 819  : }

  00094	e1a00005	 mov         r0, r5
  00098	e28dd004	 add         sp, sp, #4
  0009c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN18@LAN911XSet|
  000a4		 |$LN19@LAN911XSet|
  000a4	00000000	 DCD         |g_dwChipId|
  000a8		 |$M43964|

			 ENDP  ; |LAN911XSetMacAddress|

	EXPORT	|LAN911XInit|
	EXPORT	|??_C@_1IE@KFEKGLKJ@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AAX?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAm?$AAa?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@JIECDPON@?$AA1?$AA0?$AAM?$AAb?$AAp?$AAs?$AA?0?$AA?5?$AAH?$AAa?$AAl?$AAf?$AA?5?$AAD?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@CFGPBEPG@?$AA1?$AA0?$AA0?$AAM?$AAb?$AAp?$AAs?$AA?0?$AA?5?$AAH?$AAa?$AAl?$AAf?$AA?5?$AAD?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@IHIEPLGN@?$AA1?$AA0?$AAM?$AAb?$AAp?$AAs?$AA?0?$AA?5?$AAF?$AAu?$AAl?$AAl?$AA?5?$AAD?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@DKKJNAHG@?$AA1?$AA0?$AA0?$AAM?$AAb?$AAp?$AAs?$AA?0?$AA?5?$AAF?$AAu?$AAl?$AAl?$AA?5?$AAD?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@ECEBOIGE@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@EEDCFFGI@?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAE?$AAs?$AAt?$AAa?$AAb?$AAl?$AAi?$AAs?$AAh?$AAe?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@FBJAOFLG@?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?5?$AA?5?$AAA?$AAb?$AAo?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JK@NKCKLILE@?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAE?$AAE?$AAP?$AAR?$AAO?$AAM?$AA?$CB@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@FCBDMEID@?$AAS?$AAo?$AAf?$AAt?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$CB?$AA?$CB?$AA?5?$AA?$CI?$AAH?$AAW?$AA_?$AAC?$AAF?$AAG?$AA?5?$AA?$DN?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@ELGKCHGO@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AAX?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|OEMKitlGetSecs|
	IMPORT	|OALStall|
	IMPORT	|OALPAtoVA|

  00000			 AREA	 |.pdata|, PDATA
|$T44107| DCD	|$LN144@LAN911XIni|
	DCD	0x40010202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@KFEKGLKJ@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AAX?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAm?$AAa?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2@| DCB "-"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "1"
	DCB	0x0, "X", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "("
	DCB	0x0, "m", 0x0, "a", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, ":", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "x", 0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x"
	DCB	0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "t", 0x0, "C", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@JIECDPON@?$AA1?$AA0?$AAM?$AAb?$AAp?$AAs?$AA?0?$AA?5?$AAH?$AAa?$AAl?$AAf?$AA?5?$AAD?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "1"
	DCB	0x0, "0", 0x0, "M", 0x0, "b", 0x0, "p", 0x0, "s", 0x0, ","
	DCB	0x0, " ", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "f", 0x0, " "
	DCB	0x0, "D", 0x0, "u", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@CFGPBEPG@?$AA1?$AA0?$AA0?$AAM?$AAb?$AAp?$AAs?$AA?0?$AA?5?$AAH?$AAa?$AAl?$AAf?$AA?5?$AAD?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "1"
	DCB	0x0, "0", 0x0, "0", 0x0, "M", 0x0, "b", 0x0, "p", 0x0, "s"
	DCB	0x0, ",", 0x0, " ", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "f"
	DCB	0x0, " ", 0x0, "D", 0x0, "u", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@IHIEPLGN@?$AA1?$AA0?$AAM?$AAb?$AAp?$AAs?$AA?0?$AA?5?$AAF?$AAu?$AAl?$AAl?$AA?5?$AAD?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "1"
	DCB	0x0, "0", 0x0, "M", 0x0, "b", 0x0, "p", 0x0, "s", 0x0, ","
	DCB	0x0, " ", 0x0, "F", 0x0, "u", 0x0, "l", 0x0, "l", 0x0, " "
	DCB	0x0, "D", 0x0, "u", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@DKKJNAHG@?$AA1?$AA0?$AA0?$AAM?$AAb?$AAp?$AAs?$AA?0?$AA?5?$AAF?$AAu?$AAl?$AAl?$AA?5?$AAD?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "1"
	DCB	0x0, "0", 0x0, "0", 0x0, "M", 0x0, "b", 0x0, "p", 0x0, "s"
	DCB	0x0, ",", 0x0, " ", 0x0, "F", 0x0, "u", 0x0, "l", 0x0, "l"
	DCB	0x0, " ", 0x0, "D", 0x0, "u", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@ECEBOIGE@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@EEDCFFGI@?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAE?$AAs?$AAt?$AAa?$AAb?$AAl?$AAi?$AAs?$AAh?$AAe?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "L"
	DCB	0x0, "i", 0x0, "n", 0x0, "k", 0x0, " ", 0x0, "E", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "i", 0x0, "s"
	DCB	0x0, "h", 0x0, "e", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@FBJAOFLG@?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?5?$AA?5?$AAA?$AAb?$AAo?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| DCB "L"
	DCB	0x0, "i", 0x0, "n", 0x0, "k", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, "!", 0x0, "!"
	DCB	0x0, " ", 0x0, " ", 0x0, "A", 0x0, "b", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JK@NKCKLILE@?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAE?$AAE?$AAP?$AAR?$AAO?$AAM?$AA?$CB@| DCB "M"
	DCB	0x0, "A", 0x0, "C", 0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "u"
	DCB	0x0, "n", 0x0, "d", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "E", 0x0, "E", 0x0, "P", 0x0, "R", 0x0, "O", 0x0, "M"
	DCB	0x0, "!", 0x0, "!", 0x0, " ", 0x0, " ", 0x0, "u", 0x0, "s"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "e", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "c", 0x0, " "
	DCB	0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o", 0x0, "m"
	DCB	0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " ", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@FCBDMEID@?$AAS?$AAo?$AAf?$AAt?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$CB?$AA?$CB?$AA?5?$AA?$CI?$AAH?$AAW?$AA_?$AAC?$AAF?$AAG?$AA?5?$AA?$DN?$AA?5?$AA0@| DCB "S"
	DCB	0x0, "o", 0x0, "f", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, "!"
	DCB	0x0, "!", 0x0, " ", 0x0, "(", 0x0, "H", 0x0, "W", 0x0, "_"
	DCB	0x0, "C", 0x0, "F", 0x0, "G", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, " "
	DCB	0x0, "A", 0x0, "b", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@ELGKCHGO@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AAX?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "+"
	DCB	0x0, "L", 0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "1"
	DCB	0x0, "X", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LAN911XInit| PROC

; 240  : {

  00000		 |$LN144@LAN911XIni|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M44104|
  00008	e1a08002	 mov         r8, r2
  0000c	e1a06000	 mov         r6, r0

; 241  :     BOOL RetCode = FALSE;
; 242  :     DWORD dwTemp;
; 243  :     UINT32 StartTime;
; 244  : 
; 245  : 	UNREFERENCED_PARAMETER(offset);
; 246  : 
; 247  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 248  :         L"+LAN911XInit(0x%08x, 0x%08x, 0x%08x)\r\n", pAddress, offset, mac
; 249  :         ));

  00010	e59f53ec	 ldr         r5, [pc, #0x3EC]
  00014	e3a09000	 mov         r9, #0
  00018	e5953440	 ldr         r3, [r5, #0x440]
  0001c	e3130a02	 tst         r3, #2, 20
  00020	13130004	 tstne       r3, #4
  00024	159f03d4	 ldrne       r0, [pc, #0x3D4]
  00028	11a02001	 movne       r2, r1
  0002c	11a03008	 movne       r3, r8
  00030	11a01006	 movne       r1, r6
  00034	1b000000	 blne        OALLogSerial

; 250  :     // Save address
; 251  :     if ((DWORD) pAddress > 0x80000000)

  00038	e3560102	 cmp         r6, #2, 2

; 252  :     {
; 253  :         g_pLAN911X = (LAN911X_REGS*)pAddress;
; 254  :     }
; 255  :     else

  0003c	8a000003	 bhi         |$LN140@LAN911XIni|

; 256  :     {
; 257  :         g_pLAN911X = (LAN911X_REGS*)OALPAtoUA((DWORD) pAddress);

  00040	e3a01000	 mov         r1, #0
  00044	e1a00006	 mov         r0, r6
  00048	eb000000	 bl          OALPAtoVA
  0004c	e1a06000	 mov         r6, r0
  00050		 |$LN140@LAN911XIni|
  00050	e59f43a4	 ldr         r4, [pc, #0x3A4]

; 258  :     }
; 259  : 
; 260  :     // wake chip, check for valid ID, wait for ready
; 261  :     if (!LAN911XFindController(g_pLAN911X,&dwTemp))

  00054	e28d1010	 add         r1, sp, #0x10
  00058	e1a00006	 mov         r0, r6
  0005c	e5846000	 str         r6, [r4]
  00060	eb000000	 bl          LAN911XFindController
  00064	e3500000	 cmp         r0, #0
  00068	0a0000c1	 beq         |$ErrorReturn$43179|

; 262  :         goto ErrorReturn;
; 263  :      
; 264  :     // Issue soft reset, wait for soft reset to finish or timeout
; 265  :     WRITE_REGISTER_ULONG((PULONG)&g_pLAN911X->hw_cfg, HW_CFG_SRST | HW_CFG_SF | (5<<16));

  0006c	e5942000	 ldr         r2, [r4]
  00070	e3a03815	 mov         r3, #0x15, 16
  00074	e3833001	 orr         r3, r3, #1
  00078	e5823074	 str         r3, [r2, #0x74]
  0007c		 |$LL23@LAN911XIni|

; 266  :     do 
; 267  :     {
; 268  :         dwTemp = READ_REGISTER_ULONG((PULONG)&g_pLAN911X->hw_cfg);

  0007c	e5921074	 ldr         r1, [r2, #0x74]

; 269  :     }
; 270  :     while ((dwTemp & HW_CFG_SRST) && !(dwTemp & HW_CFG_SRST_TIMEOUT));

  00080	e3110001	 tst         r1, #1
  00084	0a000001	 beq         |$LN20@LAN911XIni|
  00088	e3110002	 tst         r1, #2
  0008c	0afffffa	 beq         |$LL23@LAN911XIni|
  00090		 |$LN20@LAN911XIni|

; 271  :     if (dwTemp & HW_CFG_SRST_TIMEOUT)

  00090	e3110002	 tst         r1, #2
  00094	0a000005	 beq         |$LL18@LAN911XIni|

; 272  :     {
; 273  :         OALMSGS(OAL_ERROR, (L"Soft reset timeout!! (HW_CFG = 0x%x) Aborting...\r\n", dwTemp));

  00098	e5953440	 ldr         r3, [r5, #0x440]
  0009c	e3130001	 tst         r3, #1
  000a0	0a0000b3	 beq         |$ErrorReturn$43179|
  000a4	e59f034c	 ldr         r0, [pc, #0x34C]
  000a8	eb000000	 bl          OALLogSerial

; 274  :         goto ErrorReturn;

  000ac	ea0000b0	 b           |$ErrorReturn$43179|
  000b0		 |$LL18@LAN911XIni|

; 275  :     }
; 276  :     // wait for chip ready
; 277  :     while ( !(PMT_CTL_READY & READ_REGISTER_ULONG((PULONG)&g_pLAN911X->pmt_ctrl)));    

  000b0	e5923084	 ldr         r3, [r2, #0x84]
  000b4	e3130001	 tst         r3, #1
  000b8	0afffffc	 beq         |$LL18@LAN911XIni|

; 278  : 
; 279  :     
; 280  :     // reset the PHY, wait for reset done
; 281  :     WRITE_REGISTER_ULONG((PULONG)&g_pLAN911X->pmt_ctrl, PMT_CTL_PHY_RESET | READ_REGISTER_ULONG((PULONG)&g_pLAN911X->pmt_ctrl));

  000bc	e5923084	 ldr         r3, [r2, #0x84]
  000c0	e3833b01	 orr         r3, r3, #1, 22
  000c4	e5823084	 str         r3, [r2, #0x84]
  000c8		 |$LL16@LAN911XIni|

; 282  :     while ( (PMT_CTL_PHY_RESET & READ_REGISTER_ULONG((PULONG)&g_pLAN911X->pmt_ctrl)));

  000c8	e5923084	 ldr         r3, [r2, #0x84]
  000cc	e3130b01	 tst         r3, #1, 22
  000d0	1afffffc	 bne         |$LL16@LAN911XIni|

; 283  : 
; 284  :     // extra delay to allow PHY to enter operational state (finish reset and start RX_CLK/TX_CLK)
; 285  :     OALStall(1000);

  000d4	e3a00ffa	 mov         r0, #0xFA, 30
  000d8	eb000000	 bl          OALStall

; 286  :    
; 287  :     
; 288  : 
; 289  :     // Default FIFO allocation (5K TX, 11K RX)
; 290  :     // Set Store and Forward
; 291  :     WRITE_REGISTER_ULONG((PULONG)&g_pLAN911X->hw_cfg, HW_CFG_SF | (5<<16));

  000dc	e5940000	 ldr         r0, [r4]

; 292  : 
; 293  :     // set flow control high to 7KB, low to 3.5KB, backpressure duration 50us/500us (10/100)
; 294  :     WRITE_REGISTER_ULONG((PULONG)&g_pLAN911X->afc_cfg, 0x006e3740);
; 295  : 
; 296  :     if (!(E2P_CMD_MAC_LOADED & READ_EEPROM_CMD(g_pLAN911X)))

  000e0	e5941004	 ldr         r1, [r4, #4]
  000e4	e3a02493	 mov         r2, #0x93, 8
  000e8	e3a03815	 mov         r3, #0x15, 16
  000ec	e3a0e86e	 mov         lr, #0x6E, 16
  000f0	e5803074	 str         r3, [r0, #0x74]
  000f4	e3822811	 orr         r2, r2, #0x11, 16
  000f8	e38e3ddd	 orr         r3, lr, #0xDD, 26
  000fc	e1510002	 cmp         r1, r2
  00100	e58030ac	 str         r3, [r0, #0xAC]
  00104	02803f6d	 addeq       r3, r0, #0x6D, 30
  00108	128030b0	 addne       r3, r0, #0xB0
  0010c	e5933000	 ldr         r3, [r3]
  00110	03a02801	 moveq       r2, #1, 16
  00114	13a02c01	 movne       r2, #1, 24
  00118	e1130002	 tst         r3, r2
  0011c	1a00001c	 bne         |$LN14@LAN911XIni|

; 297  :     {
; 298  : #if defined(SIMULATED_MAC_ADDRESS0) && defined(SIMULATED_MAC_ADDRESS1) && defined(SIMULATED_MAC_ADDRESS2)
; 299  :         OALMSGS(OAL_ERROR, (L"MAC address not found in EEPROM, using simulated MAC address\r\n"));
; 300  :         mac[0] = SIMULATED_MAC_ADDRESS0;
; 301  :         mac[1] = SIMULATED_MAC_ADDRESS1;
; 302  :         mac[2] = SIMULATED_MAC_ADDRESS2;
; 303  : #else
; 304  :         OALMSGS(OAL_ERROR, (L"MAC address not found in EEPROM!!  using the mac address from the settings\r\n"));

  00120	e5953440	 ldr         r3, [r5, #0x440]
  00124	e3130001	 tst         r3, #1
  00128	0a000002	 beq         |$LN37@LAN911XIni|
  0012c	e59f02c0	 ldr         r0, [pc, #0x2C0]
  00130	eb000000	 bl          OALLogSerial
  00134	e5940000	 ldr         r0, [r4]
  00138		 |$LN37@LAN911XIni|

; 305  : #endif           
; 306  :         WriteMacCSR(MAC_ADDRL_INDEX, ((DWORD) mac[1]) << 16 | mac[0]);

  00138	e1d820b2	 ldrh        r2, [r8, #2]
  0013c	e1d830b0	 ldrh        r3, [r8]
  00140	e1832802	 orr         r2, r3, r2, lsl #16
  00144		 |$LL58@LAN911XIni|
  00144	e59030a4	 ldr         r3, [r0, #0xA4]
  00148	e3130102	 tst         r3, #2, 2
  0014c	1afffffc	 bne         |$LL58@LAN911XIni|
  00150	e3a0310e	 mov         r3, #0xE, 2
  00154	e58020a8	 str         r2, [r0, #0xA8]
  00158	e58030a4	 str         r3, [r0, #0xA4]
  0015c		 |$LL56@LAN911XIni|
  0015c	e59030a4	 ldr         r3, [r0, #0xA4]
  00160	e3130102	 tst         r3, #2, 2
  00164	1afffffc	 bne         |$LL56@LAN911XIni|

; 307  :         WriteMacCSR(MAC_ADDRH_INDEX, (DWORD) mac[2]);

  00168	e1d820b4	 ldrh        r2, [r8, #4]
  0016c		 |$LL64@LAN911XIni|
  0016c	e59030a4	 ldr         r3, [r0, #0xA4]
  00170	e3130102	 tst         r3, #2, 2
  00174	1afffffc	 bne         |$LL64@LAN911XIni|
  00178	e3a0310a	 mov         r3, #0xA, 2
  0017c	e58020a8	 str         r2, [r0, #0xA8]
  00180	e58030a4	 str         r3, [r0, #0xA4]
  00184		 |$LL62@LAN911XIni|
  00184	e59030a4	 ldr         r3, [r0, #0xA4]
  00188	e3130102	 tst         r3, #2, 2
  0018c	1afffffc	 bne         |$LL62@LAN911XIni|

; 308  : 
; 309  :     }
; 310  :     else

  00190	ea000002	 b           |$LN13@LAN911XIni|
  00194		 |$LN14@LAN911XIni|

; 311  :     {        
; 312  :         LAN911XGetMacAddress(g_pLAN911X,mac);

  00194	e1a01008	 mov         r1, r8
  00198	eb000000	 bl          LAN911XGetMacAddress
  0019c	e5940000	 ldr         r0, [r4]
  001a0		 |$LN13@LAN911XIni|

; 313  :         DEBUGMSG(1,(TEXT("MAC ADDR in EEPROM: %x:%x:%x:%x:%x:%x\r\n"),mac[0] & 0xFF,(mac[0]>>8) & 0xFF,
; 314  :             mac[1] & 0xFF,(mac[1]>>8) & 0xFF,
; 315  :             mac[2] & 0xFF,(mac[2]>>8) & 0xFF));
; 316  :     }
; 317  : 
; 318  :     // Setup GPIO pins for link status
; 319  :     WRITE_REGISTER_ULONG((PULONG)&g_pLAN911X->gpio_cfg, (0x70000000));

  001a0	e3a03207	 mov         r3, #7, 4
  001a4	e5803088	 str         r3, [r0, #0x88]

; 320  :     // Configure interrupt to fire on a single received packet, initially disabled
; 321  :     WRITE_REGISTER_ULONG(&g_pLAN911X->fifo_int, 1);

  001a8	e3a03001	 mov         r3, #1
  001ac	e5803068	 str         r3, [r0, #0x68]

; 322  :     // Mask all int sources level interrupt
; 323  :     WRITE_REGISTER_ULONG(&g_pLAN911X->int_en, 0);

  001b0	e3a03000	 mov         r3, #0
  001b4	e580305c	 str         r3, [r0, #0x5C]

; 324  :     // Clear any potential interrupt (shouldn't be any)
; 325  :     WRITE_REGISTER_ULONG(&g_pLAN911X->int_sts, 0xFFFFFFFF);

  001b8	e3e03000	 mvn         r3, #0
  001bc	e3a02c01	 mov         r2, #1, 24
  001c0	e5803058	 str         r3, [r0, #0x58]

; 326  : 
; 327  :     // Configure IRQ pin
; 328  :     WRITE_REGISTER_ULONG(&g_pLAN911X->irq_cfg, IRQ_CONFIGURATION_VALUE);

  001c4	e3823001	 orr         r3, r2, #1
  001c8	e5803054	 str         r3, [r0, #0x54]

; 329  : 
; 330  :     // Depend on SPEED_SEL configuration for link parameters.  
; 331  :     // SPEED_SEL high, autonegotiation is enabled by default at 100Mbps
; 332  :     // SPEED_SEL low, autonogation is disabled and default is 10Mbps/half duplex
; 333  : 
; 334  : #if 0
; 335  :     // DR - This code is failing on some hubs/switches.
; 336  :     // Disable for now as it's not critical, debug and re-enable later if needed
; 337  :     // Override hardware strapping, advertise all capability
; 338  :     // Enable and start autonegotiation
; 339  :     WritePhy(PHY_AUTO_ADVERTISE_INDEX, 0x1E0);
; 340  :     WritePhy(PHY_CONTROL_INDEX, 0x1200);
; 341  : #endif
; 342  : 
; 343  :     // Wait for PHY link status to be complete
; 344  :     StartTime = OEMEthGetSecs();

  001cc	eb000000	 bl          OEMKitlGetSecs
  001d0	e2807003	 add         r7, r0, #3
  001d4		 |$LL12@LAN911XIni|

; 345  :     do
; 346  :     {
; 347  :         dwTemp = ReadPhy(PHY_STATUS_INDEX);

  001d4	e3a00001	 mov         r0, #1
  001d8	eb000000	 bl          ReadPhy
  001dc	e1a06000	 mov         r6, r0

; 348  :         if (PHY_STATUS_LINKUP & dwTemp)

  001e0	e3160004	 tst         r6, #4
  001e4	1a000002	 bne         |$LN10@LAN911XIni|

; 349  :             break;
; 350  :     }
; 351  :     while (OEMEthGetSecs() < (StartTime + LINK_TIMEOUT_SECS));

  001e8	eb000000	 bl          OEMKitlGetSecs
  001ec	e1500007	 cmp         r0, r7
  001f0	3afffff7	 bcc         |$LL12@LAN911XIni|
  001f4		 |$LN10@LAN911XIni|

; 352  : 
; 353  :     if (!(dwTemp & PHY_STATUS_LINKUP))

  001f4	e5953440	 ldr         r3, [r5, #0x440]
  001f8	e3160004	 tst         r6, #4
  001fc	1a000004	 bne         |$LN8@LAN911XIni|

; 354  :     {
; 355  :         OALMSGS(OAL_ERROR, (L"Link not detected!!  Aborting\r\n"));

  00200	e3130001	 tst         r3, #1
  00204	0a00005a	 beq         |$ErrorReturn$43179|
  00208	e59f01e0	 ldr         r0, [pc, #0x1E0]
  0020c	eb000000	 bl          OALLogSerial

; 356  :         goto ErrorReturn;

  00210	ea000057	 b           |$ErrorReturn$43179|
  00214		 |$LN8@LAN911XIni|

; 357  :     }
; 358  : 
; 359  :     // Document link parameters, set MAC CR register accordingly
; 360  :     OALMSGS(OAL_ETHER, (L"Link Established: "));

  00214	e3130a02	 tst         r3, #2, 20
  00218	159f01cc	 ldrne       r0, [pc, #0x1CC]
  0021c	1b000000	 blne        OALLogSerial

; 361  :     switch((0x001C & ReadPhy(PHY_SPECIAL_CTL_STS_INDEX)) >> 2)

  00220	e3a0001f	 mov         r0, #0x1F
  00224	eb000000	 bl          ReadPhy
  00228	e1a03d80	 mov         r3, r0, lsl #27
  0022c	e1a03ea3	 mov         r3, r3, lsr #29
  00230	e3530001	 cmp         r3, #1
  00234	0a00003c	 beq         |$LN5@LAN911XIni|
  00238	e3530002	 cmp         r3, #2
  0023c	0a00002a	 beq         |$LN3@LAN911XIni|
  00240	e3530005	 cmp         r3, #5
  00244	0a000017	 beq         |$LN4@LAN911XIni|
  00248	e3530006	 cmp         r3, #6
  0024c	e5953440	 ldr         r3, [r5, #0x440]
  00250	0a000004	 beq         |$LN2@LAN911XIni|

; 379  :     default:
; 380  :         OALMSGS(OAL_ETHER, (L"Invalid mode setting!!\r\n"));

  00254	e3130a02	 tst         r3, #2, 20
  00258	0a000045	 beq         |$ErrorReturn$43179|
  0025c	e59f0184	 ldr         r0, [pc, #0x184]
  00260	eb000000	 bl          OALLogSerial
  00264	ea000042	 b           |$ErrorReturn$43179|
  00268		 |$LN2@LAN911XIni|

; 375  :     case 6:
; 376  :         OALMSGS(OAL_ETHER, (L"100Mbps, Full Duplex\r\n"));

  00268	e3130a02	 tst         r3, #2, 20
  0026c	159f0170	 ldrne       r0, [pc, #0x170]
  00270	1b000000	 blne        OALLogSerial
  00274	e5942000	 ldr         r2, [r4]

; 377  :         WriteMacCSR(MAC_MAC_CR_INDEX, MAC_CR_FDPX|MAC_CR_TXEN|MAC_CR_RXEN);

  00278		 |$LL88@LAN911XIni|
  00278	e59230a4	 ldr         r3, [r2, #0xA4]
  0027c	e3130102	 tst         r3, #2, 2
  00280	1afffffc	 bne         |$LL88@LAN911XIni|
  00284	e3a03601	 mov         r3, #1, 12
  00288	e383300c	 orr         r3, r3, #0xC
  0028c	e58230a8	 str         r3, [r2, #0xA8]
  00290	e3a03106	 mov         r3, #6, 2
  00294	e58230a4	 str         r3, [r2, #0xA4]
  00298		 |$LL86@LAN911XIni|
  00298	e59230a4	 ldr         r3, [r2, #0xA4]
  0029c	e3130102	 tst         r3, #2, 2
  002a0	1afffffc	 bne         |$LL86@LAN911XIni|

; 378  :         break;

  002a4	ea00002f	 b           |$LN67@LAN911XIni|
  002a8		 |$LN4@LAN911XIni|

; 366  :         break;
; 367  :     case 5:
; 368  :         OALMSGS(OAL_ETHER, (L"10Mbps, Full Duplex\r\n"));

  002a8	e5953440	 ldr         r3, [r5, #0x440]
  002ac	e3130a02	 tst         r3, #2, 20
  002b0	159f0128	 ldrne       r0, [pc, #0x128]
  002b4	1b000000	 blne        OALLogSerial
  002b8	e5942000	 ldr         r2, [r4]

; 369  :         WriteMacCSR(MAC_MAC_CR_INDEX, MAC_CR_FDPX|MAC_CR_TXEN|MAC_CR_RXEN);

  002bc		 |$LL76@LAN911XIni|
  002bc	e59230a4	 ldr         r3, [r2, #0xA4]
  002c0	e3130102	 tst         r3, #2, 2
  002c4	1afffffc	 bne         |$LL76@LAN911XIni|
  002c8	e3a03601	 mov         r3, #1, 12
  002cc	e383300c	 orr         r3, r3, #0xC
  002d0	e58230a8	 str         r3, [r2, #0xA8]
  002d4	e3a03106	 mov         r3, #6, 2
  002d8	e58230a4	 str         r3, [r2, #0xA4]
  002dc		 |$LL74@LAN911XIni|
  002dc	e59230a4	 ldr         r3, [r2, #0xA4]
  002e0	e3130102	 tst         r3, #2, 2
  002e4	1afffffc	 bne         |$LL74@LAN911XIni|

; 370  :         break;

  002e8	ea00001e	 b           |$LN67@LAN911XIni|
  002ec		 |$LN3@LAN911XIni|

; 371  :     case 2:
; 372  :         OALMSGS(OAL_ETHER, (L"100Mbps, Half Duplex\r\n"));

  002ec	e5953440	 ldr         r3, [r5, #0x440]
  002f0	e3130a02	 tst         r3, #2, 20
  002f4	159f00e0	 ldrne       r0, [pc, #0xE0]
  002f8	1b000000	 blne        OALLogSerial
  002fc	e5942000	 ldr         r2, [r4]

; 373  :         WriteMacCSR(MAC_MAC_CR_INDEX, MAC_CR_TXEN|MAC_CR_RXEN);

  00300		 |$LL82@LAN911XIni|
  00300	e59230a4	 ldr         r3, [r2, #0xA4]
  00304	e3130102	 tst         r3, #2, 2
  00308	1afffffc	 bne         |$LL82@LAN911XIni|
  0030c	e3a0300c	 mov         r3, #0xC
  00310	e58230a8	 str         r3, [r2, #0xA8]
  00314	e3a03106	 mov         r3, #6, 2
  00318	e58230a4	 str         r3, [r2, #0xA4]
  0031c		 |$LL80@LAN911XIni|
  0031c	e59230a4	 ldr         r3, [r2, #0xA4]
  00320	e3130102	 tst         r3, #2, 2
  00324	1afffffc	 bne         |$LL80@LAN911XIni|

; 374  :         break;

  00328	ea00000e	 b           |$LN67@LAN911XIni|
  0032c		 |$LN5@LAN911XIni|

; 362  :     {
; 363  :     case 1:
; 364  :         OALMSGS(OAL_ETHER, (L"10Mbps, Half Duplex\r\n"));

  0032c	e5953440	 ldr         r3, [r5, #0x440]
  00330	e3130a02	 tst         r3, #2, 20
  00334	159f009c	 ldrne       r0, [pc, #0x9C]
  00338	1b000000	 blne        OALLogSerial
  0033c	e5942000	 ldr         r2, [r4]

; 365  :         WriteMacCSR(MAC_MAC_CR_INDEX, MAC_CR_TXEN|MAC_CR_RXEN);

  00340		 |$LL70@LAN911XIni|
  00340	e59230a4	 ldr         r3, [r2, #0xA4]
  00344	e3130102	 tst         r3, #2, 2
  00348	1afffffc	 bne         |$LL70@LAN911XIni|
  0034c	e3a0300c	 mov         r3, #0xC
  00350	e58230a8	 str         r3, [r2, #0xA8]
  00354	e3a03106	 mov         r3, #6, 2
  00358	e58230a4	 str         r3, [r2, #0xA4]
  0035c		 |$LL68@LAN911XIni|
  0035c	e59230a4	 ldr         r3, [r2, #0xA4]
  00360	e3130102	 tst         r3, #2, 2
  00364	1afffffc	 bne         |$LL68@LAN911XIni|
  00368		 |$LN67@LAN911XIni|

; 381  :         goto ErrorReturn;
; 382  :     }
; 383  : 
; 384  :     // Enable transmitter
; 385  :     WRITE_REGISTER_ULONG(&g_pLAN911X->tx_cfg, TX_CFG_TX_ON);

  00368	e3a03002	 mov         r3, #2
  0036c	e5823070	 str         r3, [r2, #0x70]

; 386  : 
; 387  :     RetCode = TRUE;

  00370	e3a09001	 mov         r9, #1
  00374		 |$ErrorReturn$43179|
  00374	e5953440	 ldr         r3, [r5, #0x440]

; 388  : 
; 389  : ErrorReturn:
; 390  :     OALMSGS(OAL_ETHER&&OAL_FUNC, (
; 391  :         L"-LAN911XInit(mac = %02x:%02x:%02x:%02x:%02x:%02x, RetCode = %d)\r\n",
; 392  :         mac[0]&0xFF, mac[0]>>8, mac[1]&0xFF, mac[1]>>8, mac[2]&0xFF, mac[2]>>8,
; 393  :         RetCode
; 394  :         ));

  00378	e3130a02	 tst         r3, #2, 20
  0037c	0a000010	 beq         |$LN53@LAN911XIni|
  00380	e3130004	 tst         r3, #4
  00384	0a00000e	 beq         |$LN53@LAN911XIni|
  00388	e1d820b4	 ldrh        r2, [r8, #4]
  0038c	e1d8e0b2	 ldrh        lr, [r8, #2]
  00390	e1d840b0	 ldrh        r4, [r8]
  00394	e1a03422	 mov         r3, r2, lsr #8
  00398	e59f0034	 ldr         r0, [pc, #0x34]
  0039c	e20220ff	 and         r2, r2, #0xFF
  003a0	e1a0142e	 mov         r1, lr, lsr #8
  003a4	e58d2004	 str         r2, [sp, #4]
  003a8	e58d3008	 str         r3, [sp, #8]
  003ac	e58d1000	 str         r1, [sp]
  003b0	e1a02424	 mov         r2, r4, lsr #8
  003b4	e20e30ff	 and         r3, lr, #0xFF
  003b8	e20410ff	 and         r1, r4, #0xFF
  003bc	e58d900c	 str         r9, [sp, #0xC]
  003c0	eb000000	 bl          OALLogSerial
  003c4		 |$LN53@LAN911XIni|

; 395  : 
; 396  : 
; 397  :     return RetCode;
; 398  : }

  003c4	e1a00009	 mov         r0, r9
  003c8	e28dd014	 add         sp, sp, #0x14
  003cc	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  003d0	e12fff1e	 bx          lr
  003d4		 |$LN145@LAN911XIni|
  003d4		 |$LN146@LAN911XIni|
  003d4	00000000	 DCD         |??_C@_1IE@KFEKGLKJ@?$AA?9?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AAX?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAm?$AAa?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2?$AAx?$AA?3?$AA?$CF?$AA0?$AA2@|
  003d8		 |$LN147@LAN911XIni|
  003d8	00000000	 DCD         |??_C@_1CM@JIECDPON@?$AA1?$AA0?$AAM?$AAb?$AAp?$AAs?$AA?0?$AA?5?$AAH?$AAa?$AAl?$AAf?$AA?5?$AAD?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  003dc		 |$LN148@LAN911XIni|
  003dc	00000000	 DCD         |??_C@_1CO@CFGPBEPG@?$AA1?$AA0?$AA0?$AAM?$AAb?$AAp?$AAs?$AA?0?$AA?5?$AAH?$AAa?$AAl?$AAf?$AA?5?$AAD?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  003e0		 |$LN149@LAN911XIni|
  003e0	00000000	 DCD         |??_C@_1CM@IHIEPLGN@?$AA1?$AA0?$AAM?$AAb?$AAp?$AAs?$AA?0?$AA?5?$AAF?$AAu?$AAl?$AAl?$AA?5?$AAD?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  003e4		 |$LN150@LAN911XIni|
  003e4	00000000	 DCD         |??_C@_1CO@DKKJNAHG@?$AA1?$AA0?$AA0?$AAM?$AAb?$AAp?$AAs?$AA?0?$AA?5?$AAF?$AAu?$AAl?$AAl?$AA?5?$AAD?$AAu?$AAp?$AAl?$AAe?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  003e8		 |$LN151@LAN911XIni|
  003e8	00000000	 DCD         |??_C@_1DC@ECEBOIGE@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  003ec		 |$LN152@LAN911XIni|
  003ec	00000000	 DCD         |??_C@_1CG@EEDCFFGI@?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAE?$AAs?$AAt?$AAa?$AAb?$AAl?$AAi?$AAs?$AAh?$AAe?$AAd?$AA?3?$AA?5?$AA?$AA@|
  003f0		 |$LN153@LAN911XIni|
  003f0	00000000	 DCD         |??_C@_1EA@FBJAOFLG@?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$CB?$AA?$CB?$AA?5?$AA?5?$AAA?$AAb?$AAo?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@|
  003f4		 |$LN154@LAN911XIni|
  003f4	00000000	 DCD         |??_C@_1JK@NKCKLILE@?$AAM?$AAA?$AAC?$AA?5?$AAa?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAE?$AAE?$AAP?$AAR?$AAO?$AAM?$AA?$CB@|
  003f8		 |$LN155@LAN911XIni|
  003f8	00000000	 DCD         |??_C@_1GG@FCBDMEID@?$AAS?$AAo?$AAf?$AAt?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$CB?$AA?$CB?$AA?5?$AA?$CI?$AAH?$AAW?$AA_?$AAC?$AAF?$AAG?$AA?5?$AA?$DN?$AA?5?$AA0@|
  003fc		 |$LN156@LAN911XIni|
  003fc	00000000	 DCD         |g_pLAN911X|
  00400		 |$LN157@LAN911XIni|
  00400	00000000	 DCD         |??_C@_1EO@ELGKCHGO@?$AA?$CL?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AAX?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF@|
  00404		 |$LN158@LAN911XIni|
  00404	00000000	 DCD         |dpCurSettings|
  00408		 |$M44105|

			 ENDP  ; |LAN911XInit|

	END
