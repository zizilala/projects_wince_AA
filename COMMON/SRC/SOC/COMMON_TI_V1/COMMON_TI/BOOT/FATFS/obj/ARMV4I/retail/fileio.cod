; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\FATFS\fileio.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|ExtendedPartionBaseSector|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|FatBufferSectorNumber| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	IMPORT	|memcpy|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\boot\fatfs\fileio.c

  00000			 AREA	 |.pdata|, PDATA
|$T43526| DCD	|$LN5@BpbCopy|
	DCD	0x40005c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BpbCopy| PROC

; 86   : {

  00000		 |$LN5@BpbCopy|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43523|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 87   :     memcpy(&bpb->bytes_per_sector, &bpbPacked->bytes_per_sector, sizeof(bpb->bytes_per_sector));

  0000c	e5d52000	 ldrb        r2, [r5]
  00010	e5d53001	 ldrb        r3, [r5, #1]

; 88   :     memcpy(&bpb->sectors_per_cluster, &bpbPacked->sectors_per_cluster, sizeof(bpb->sectors_per_cluster));

  00014	e1a0e004	 mov         lr, r4
  00018	e1823403	 orr         r3, r2, r3, lsl #8
  0001c	e0ce30b2	 strh        r3, [lr], #2
  00020	e5d53002	 ldrb        r3, [r5, #2]
  00024	e5ce3000	 strb        r3, [lr]

; 89   :     memcpy(&bpb->reserved_sectors, &bpbPacked->reserved_sectors, sizeof(bpb->reserved_sectors));

  00028	e5d52003	 ldrb        r2, [r5, #3]
  0002c	e5d53004	 ldrb        r3, [r5, #4]
  00030	e1823403	 orr         r3, r2, r3, lsl #8
  00034	e1c430b4	 strh        r3, [r4, #4]

; 90   :     memcpy(&bpb->number_of_fats, &bpbPacked->number_of_fats, sizeof(bpb->number_of_fats));

  00038	e5d53005	 ldrb        r3, [r5, #5]
  0003c	e5c43006	 strb        r3, [r4, #6]

; 91   :     memcpy(&bpb->number_of_root_directory_entries, &bpbPacked->number_of_root_directory_entries, sizeof(bpb->number_of_root_directory_entries));

  00040	e5d52006	 ldrb        r2, [r5, #6]
  00044	e5d53007	 ldrb        r3, [r5, #7]
  00048	e1823403	 orr         r3, r2, r3, lsl #8
  0004c	e1c430b8	 strh        r3, [r4, #8]

; 92   :     memcpy(&bpb->total_sectors, &bpbPacked->total_sectors, sizeof(bpb->total_sectors));

  00050	e5d52008	 ldrb        r2, [r5, #8]
  00054	e5d53009	 ldrb        r3, [r5, #9]
  00058	e1823403	 orr         r3, r2, r3, lsl #8
  0005c	e1c430ba	 strh        r3, [r4, #0xA]

; 93   :     memcpy(&bpb->media_descriptor, &bpbPacked->media_descriptor, sizeof(bpb->media_descriptor));

  00060	e5d5300a	 ldrb        r3, [r5, #0xA]
  00064	e5c4300c	 strb        r3, [r4, #0xC]

; 94   :     memcpy(&bpb->sectors_per_fat, &bpbPacked->sectors_per_fat, sizeof(bpb->sectors_per_fat));

  00068	e5d5200b	 ldrb        r2, [r5, #0xB]
  0006c	e5d5300c	 ldrb        r3, [r5, #0xC]
  00070	e1823403	 orr         r3, r2, r3, lsl #8
  00074	e1c430be	 strh        r3, [r4, #0xE]

; 95   :     memcpy(&bpb->sectors_per_track, &bpbPacked->sectors_per_track, sizeof(bpb->sectors_per_track));

  00078	e5d5200d	 ldrb        r2, [r5, #0xD]
  0007c	e5d5300e	 ldrb        r3, [r5, #0xE]
  00080	e1823403	 orr         r3, r2, r3, lsl #8
  00084	e1c431b0	 strh        r3, [r4, #0x10]

; 96   :     memcpy(&bpb->number_of_heads, &bpbPacked->number_of_heads, sizeof(bpb->number_of_heads));

  00088	e5d5200f	 ldrb        r2, [r5, #0xF]
  0008c	e5d53010	 ldrb        r3, [r5, #0x10]
  00090	e1823403	 orr         r3, r2, r3, lsl #8
  00094	e1c431b2	 strh        r3, [r4, #0x12]

; 97   :     memcpy(&bpb->number_of_hidden_sectors, &bpbPacked->number_of_hidden_sectors, sizeof(bpb->number_of_hidden_sectors));

  00098	e5d52011	 ldrb        r2, [r5, #0x11]
  0009c	e5d53012	 ldrb        r3, [r5, #0x12]
  000a0	e1823403	 orr         r3, r2, r3, lsl #8
  000a4	e1c431b4	 strh        r3, [r4, #0x14]

; 98   :     memcpy(&bpb->number_of_hidden_sectors_high, &bpbPacked->number_of_hidden_sectors_high, sizeof(bpb->number_of_hidden_sectors_high));

  000a8	e5d52013	 ldrb        r2, [r5, #0x13]
  000ac	e5d53014	 ldrb        r3, [r5, #0x14]
  000b0	e1823403	 orr         r3, r2, r3, lsl #8
  000b4	e1c431b6	 strh        r3, [r4, #0x16]

; 99   :     memcpy(&bpb->big_total_sectors, &bpbPacked->big_total_sectors, sizeof(bpb->big_total_sectors));

  000b8	e5d50015	 ldrb        r0, [r5, #0x15]
  000bc	e5d53016	 ldrb        r3, [r5, #0x16]
  000c0	e5d52017	 ldrb        r2, [r5, #0x17]
  000c4	e5d51018	 ldrb        r1, [r5, #0x18]
  000c8	e1803403	 orr         r3, r0, r3, lsl #8
  000cc	e1833802	 orr         r3, r3, r2, lsl #16
  000d0	e1833c01	 orr         r3, r3, r1, lsl #24
  000d4	e5843018	 str         r3, [r4, #0x18]

; 100  :     memcpy(&bpb->big_sectors_per_fat, &bpbPacked->big_sectors_per_fat, sizeof(bpb->big_sectors_per_fat));

  000d8	e5d50019	 ldrb        r0, [r5, #0x19]
  000dc	e5d5301a	 ldrb        r3, [r5, #0x1A]
  000e0	e5d5201b	 ldrb        r2, [r5, #0x1B]
  000e4	e5d5101c	 ldrb        r1, [r5, #0x1C]
  000e8	e1803403	 orr         r3, r0, r3, lsl #8
  000ec	e1833802	 orr         r3, r3, r2, lsl #16
  000f0	e1833c01	 orr         r3, r3, r1, lsl #24
  000f4	e584301c	 str         r3, [r4, #0x1C]

; 101  :     memcpy(&bpb->ext_flags, &bpbPacked->ext_flags, sizeof(bpb->ext_flags));

  000f8	e5d5201d	 ldrb        r2, [r5, #0x1D]
  000fc	e5d5301e	 ldrb        r3, [r5, #0x1E]
  00100	e1823403	 orr         r3, r2, r3, lsl #8
  00104	e1c432b0	 strh        r3, [r4, #0x20]

; 102  :     memcpy(&bpb->fs_version, &bpbPacked->fs_version, sizeof(bpb->fs_version));

  00108	e5d5201f	 ldrb        r2, [r5, #0x1F]
  0010c	e5d53020	 ldrb        r3, [r5, #0x20]
  00110	e1823403	 orr         r3, r2, r3, lsl #8
  00114	e1c432b2	 strh        r3, [r4, #0x22]

; 103  :     memcpy(&bpb->root_dir_starting_cluster, &bpbPacked->root_dir_starting_cluster, sizeof(bpb->root_dir_starting_cluster));

  00118	e5d50021	 ldrb        r0, [r5, #0x21]
  0011c	e5d53022	 ldrb        r3, [r5, #0x22]
  00120	e5d52023	 ldrb        r2, [r5, #0x23]
  00124	e5d51024	 ldrb        r1, [r5, #0x24]
  00128	e1803403	 orr         r3, r0, r3, lsl #8
  0012c	e1833802	 orr         r3, r3, r2, lsl #16
  00130	e1833c01	 orr         r3, r3, r1, lsl #24
  00134	e5843024	 str         r3, [r4, #0x24]

; 104  :     memcpy(&bpb->fs_info_sector, &bpbPacked->fs_info_sector, sizeof(bpb->fs_info_sector));

  00138	e5d52025	 ldrb        r2, [r5, #0x25]
  0013c	e5d53026	 ldrb        r3, [r5, #0x26]
  00140	e1823403	 orr         r3, r2, r3, lsl #8
  00144	e1c432b8	 strh        r3, [r4, #0x28]

; 105  :     memcpy(&bpb->backup_boot_sector, &bpbPacked->backup_boot_sector, sizeof(bpb->backup_boot_sector));

  00148	e5d52027	 ldrb        r2, [r5, #0x27]
  0014c	e5d53028	 ldrb        r3, [r5, #0x28]

; 106  :     memcpy(&bpb->reserved, &bpbPacked->reserved, sizeof(bpb->reserved));

  00150	e284002c	 add         r0, r4, #0x2C
  00154	e2851029	 add         r1, r5, #0x29
  00158	e1823403	 orr         r3, r2, r3, lsl #8
  0015c	e3a0200c	 mov         r2, #0xC
  00160	e1c432ba	 strh        r3, [r4, #0x2A]
  00164	eb000000	 bl          memcpy

; 107  : }

  00168	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0016c	e12fff1e	 bx          lr
  00170		 |$M43524|

			 ENDP  ; |BpbCopy|


  00000			 AREA	 |.pdata|, PDATA
|$T43538| DCD	|$LN7@ByteIsPowe|
	DCD	0x40001400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ByteIsPowerOfTwo| PROC

; 145  : {

  00000		 |$LN7@ByteIsPowe|
  00000		 |$M43535|

; 146  :     return ( b == 1 || b == 2 || b == 4 || b == 8 || b == 16 || b == 32 || b == 64 || b == 128 || b == 256 );

  00000	e3500001	 cmp         r0, #1
  00004	0a00000f	 beq         |$LN3@ByteIsPowe|
  00008	e3500002	 cmp         r0, #2
  0000c	0a00000d	 beq         |$LN3@ByteIsPowe|
  00010	e3500004	 cmp         r0, #4
  00014	0a00000b	 beq         |$LN3@ByteIsPowe|
  00018	e3500008	 cmp         r0, #8
  0001c	0a000009	 beq         |$LN3@ByteIsPowe|
  00020	e3500010	 cmp         r0, #0x10
  00024	0a000007	 beq         |$LN3@ByteIsPowe|
  00028	e3500020	 cmp         r0, #0x20
  0002c	0a000005	 beq         |$LN3@ByteIsPowe|
  00030	e3500040	 cmp         r0, #0x40
  00034	0a000003	 beq         |$LN3@ByteIsPowe|
  00038	e3500080	 cmp         r0, #0x80
  0003c	13500c01	 cmpne       r0, #1, 24
  00040	13a00000	 movne       r0, #0

; 147  : }

  00044	112fff1e	 bxne        lr
  00048		 |$LN3@ByteIsPowe|

; 146  :     return ( b == 1 || b == 2 || b == 4 || b == 8 || b == 16 || b == 32 || b == 64 || b == 128 || b == 256 );

  00048	e3a00001	 mov         r0, #1

; 147  : }

  0004c	e12fff1e	 bx          lr
  00050		 |$M43536|

			 ENDP  ; |ByteIsPowerOfTwo|


  00004			 AREA	 |.bss|, NOINIT
|FilesysInfo| %	0x48
|FilesysInfo| %	0x48
|FatBuffer| %	0x200

  00000			 AREA	 |.pdata|, PDATA
|$T43571| DCD	|$LN59@FileIoRead|
	DCD	0x4000fa02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FileIoReadNextSectors| PROC

; 164  : {

  00000		 |$LN59@FileIoRead|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M43568|
  00008	e1cd30b0	 strh        r3, [sp]
  0000c	e58d2008	 str         r2, [sp, #8]
  00010	e1a05001	 mov         r5, r1
  00014	e1a0a000	 mov         r10, r0

; 165  :     UINT32 SectorNumber;
; 166  :     UINT16 FatOffsetInSector, FatSectorNumber;
; 167  :     #if BOOTLOADER_SUPPORTS_FAT12
; 168  :         UINT16 FatOffsetInByte;
; 169  :     #endif
; 170  : 
; 171  :     int status;
; 172  : 
; 173  :     if (numSectors == 0)

  00018	e1b00003	 movs        r0, r3
  0001c	e58d0014	 str         r0, [sp, #0x14]

; 174  :         return FILEIO_STATUS_OK;  // done by default

  00020	03a00000	 moveq       r0, #0
  00024	0a00001b	 beq         |$LN45@FileIoRead|

; 175  : 
; 176  :     // check if is this an attempt to read past the end of the file
; 177  :     if (pFile->current_sector_in_cluster == CURRENT_SECTOR_EOF_VALUE)

  00028	e1d541bc	 ldrh        r4, [r5, #0x1C]
  0002c	e3a03cff	 mov         r3, #0xFF, 24
  00030	e38380ff	 orr         r8, r3, #0xFF
  00034	e1540008	 cmp         r4, r8

; 178  :     {
; 179  :         #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 180  :             OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoReadNextSectors EOF\r\n"));
; 181  :         #endif
; 182  :         return FILEIO_STATUS_READ_EOF;

  00038	03a00004	 moveq       r0, #4
  0003c	0a000015	 beq         |$LN45@FileIoRead|

; 183  :     }
; 184  :         
; 185  :     // check for invalid current_cluster
; 186  :     switch (FilesysInfo.FatType)

  00040	e3a03cff	 mov         r3, #0xFF, 24
  00044	e59f6398	 ldr         r6, [pc, #0x398]
  00048	e38390f8	 orr         r9, r3, #0xF8
  0004c	e3a03c0f	 mov         r3, #0xF, 24
  00050	e383b0f8	 orr         r11, r3, #0xF8
  00054	e5963044	 ldr         r3, [r6, #0x44]
  00058	e3530001	 cmp         r3, #1
  0005c	0a000019	 beq         |$LN40@FileIoRead|
  00060	e3530002	 cmp         r3, #2
  00064	0a00000e	 beq         |$LN37@FileIoRead|
  00068	e3530003	 cmp         r3, #3
  0006c	1a00001e	 bne         |$LN39@FileIoRead|

; 199  :             break;
; 200  :         #endif
; 201  : 
; 202  :         #if BOOTLOADER_SUPPORTS_FAT32
; 203  :         case FAT_TYPE_FAT32:
; 204  :             if (pFile->current_cluster < FAT32_CLUSTER_NEXT_START || (pFile->current_cluster > FAT32_CLUSTER_NEXT_END && pFile->current_cluster < FAT32_CLUSTER_LAST_START))

  00070	e5952018	 ldr         r2, [r5, #0x18]
  00074	e3520001	 cmp         r2, #1
  00078	3a000005	 bcc         |$LN38@FileIoRead|
  0007c	e3e0320f	 mvn         r3, #0xF, 4
  00080	e2233010	 eor         r3, r3, #0x10
  00084	e1520003	 cmp         r2, r3
  00088	9a000017	 bls         |$LN39@FileIoRead|
  0008c	e372028f	 cmn         r2, #0x8F, 4
  00090		 |$LN53@FileIoRead|

; 205  :             {
; 206  :                 #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 207  :                     OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoReadNextSectors failed, invalide current_cluster 0x%x\r\n", pFile->current_cluster));
; 208  :                 #endif
; 209  :                 return FILEIO_STATUS_READ_FAILED;
; 210  :             }
; 211  :             break;

  00090	2a000015	 bcs         |$LN39@FileIoRead|
  00094		 |$LN38@FileIoRead|

; 191  :                 return FILEIO_STATUS_READ_FAILED;

  00094	e3a00003	 mov         r0, #3
  00098		 |$LN45@FileIoRead|

; 512  : } // FileIoReadNextSectors  

  00098	e28dd018	 add         sp, sp, #0x18
  0009c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN37@FileIoRead|

; 192  :             break;
; 193  :         #endif
; 194  : 
; 195  :         #if BOOTLOADER_SUPPORTS_FAT16
; 196  :         case FAT_TYPE_FAT16:
; 197  :             if (pFile->current_cluster < FAT16_CLUSTER_NEXT_START || (pFile->current_cluster > FAT16_CLUSTER_NEXT_END && pFile->current_cluster < FAT16_CLUSTER_LAST_START))

  000a4	e5952018	 ldr         r2, [r5, #0x18]
  000a8	e3520001	 cmp         r2, #1
  000ac	3afffff8	 bcc         |$LN38@FileIoRead|
  000b0	e3a03cff	 mov         r3, #0xFF, 24
  000b4	e38330ef	 orr         r3, r3, #0xEF
  000b8	e1520003	 cmp         r2, r3
  000bc	9a00000a	 bls         |$LN39@FileIoRead|
  000c0	e1520009	 cmp         r2, r9

; 198  :                 return FILEIO_STATUS_READ_FAILED;

  000c4	eafffff1	 b           |$LN53@FileIoRead|
  000c8		 |$LN40@FileIoRead|

; 187  :     {
; 188  :         #if BOOTLOADER_SUPPORTS_FAT12
; 189  :         case FAT_TYPE_FAT12:
; 190  :             if (pFile->current_cluster < FAT12_CLUSTER_NEXT_START || (pFile->current_cluster > FAT12_CLUSTER_NEXT_END && pFile->current_cluster < FAT12_CLUSTER_LAST_START))

  000c8	e5952018	 ldr         r2, [r5, #0x18]
  000cc	e3520001	 cmp         r2, #1
  000d0	3affffef	 bcc         |$LN38@FileIoRead|
  000d4	e3a03c0f	 mov         r3, #0xF, 24
  000d8	e38330ef	 orr         r3, r3, #0xEF
  000dc	e1520003	 cmp         r2, r3
  000e0	9a000001	 bls         |$LN39@FileIoRead|
  000e4	e152000b	 cmp         r2, r11
  000e8	3affffe9	 bcc         |$LN38@FileIoRead|
  000ec		 |$LN39@FileIoRead|

; 212  :         #endif
; 213  :     }
; 214  : 
; 215  :     // calculate the sector number, used to read sector later
; 216  :     // file data area starting sector
; 217  :     SectorNumber = FilesysInfo.file_data_area_start;
; 218  :     // plus first sector of current cluster 
; 219  :     // Note: first 2 fat entries are reserved, making first cluster in file area = 2
; 220  :     // ??? The reserved fat entry stuff is poorly documented, this code may be wrong
; 221  :     #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 222  :         if (pFile->current_cluster < 2)
; 223  :             OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoReadNextSectors() called with current_cluster < 2!\r\n"));
; 224  :     #endif
; 225  :     SectorNumber += (pFile->current_cluster - 2) * (FilesysInfo.BiosParameterBlock.sectors_per_cluster);

  000ec	e5957018	 ldr         r7, [r5, #0x18]
  000f0	e5d61002	 ldrb        r1, [r6, #2]

; 226  :     // plus sector offset within cluster
; 227  :     SectorNumber += pFile->current_sector_in_cluster;
; 228  : 
; 229  :     // increment current_sector_in_cluster and check if this reads the last sector in the cluster
; 230  :     pFile->current_sector_in_cluster = pFile->current_sector_in_cluster + numSectors;

  000f4	e0843000	 add         r3, r4, r0
  000f8	e1a0e803	 mov         lr, r3, lsl #16
  000fc	e2472002	 sub         r2, r7, #2
  00100	e5960040	 ldr         r0, [r6, #0x40]
  00104	e1a0e82e	 mov         lr, lr, lsr #16
  00108	e0214192	 mla         r1, r2, r1, r4
  0010c	e1c5e1bc	 strh        lr, [r5, #0x1C]

; 231  :     if (pFile->current_sector_in_cluster >= (FilesysInfo.BiosParameterBlock.sectors_per_cluster))

  00110	e5d63002	 ldrb        r3, [r6, #2]
  00114	e0811000	 add         r1, r1, r0
  00118	e59f42c0	 ldr         r4, [pc, #0x2C0]
  0011c	e58d1004	 str         r1, [sp, #4]
  00120	e15e0003	 cmp         lr, r3
  00124	3a000094	 bcc         |$LN16@FileIoRead|

; 232  :     {
; 233  :         // the current read reads the last sector in the current cluster, 
; 234  :         // get the next cluster number from the FAT
; 235  :         switch (FilesysInfo.FatType)

  00128	e5963044	 ldr         r3, [r6, #0x44]
  0012c	e3530001	 cmp         r3, #1
  00130	0a000048	 beq         |$LN28@FileIoRead|
  00134	e3530002	 cmp         r3, #2
  00138	0a000025	 beq         |$LN15@FileIoRead|
  0013c	e3530003	 cmp         r3, #3
  00140	1a00008d	 bne         |$LN16@FileIoRead|

; 398  : 
; 399  :             #endif
; 400  : 
; 401  :             #if BOOTLOADER_SUPPORTS_FAT32
; 402  :             case FAT_TYPE_FAT32:
; 403  :                 // check to see if this was the last cluster, set flag so next read returns EOF
; 404  :                 if (pFile->current_cluster >= FAT32_CLUSTER_LAST_START)

  00144	e377028f	 cmn         r7, #0x8F, 4

; 405  :                 {
; 406  :                     pFile->current_sector_in_cluster = CURRENT_SECTOR_EOF_VALUE;
; 407  :                 }
; 408  :                 else

  00148	2a00008a	 bcs         |$LN52@FileIoRead|

; 409  :                 {           
; 410  :                     FatOffsetInSector = (UINT16) ((pFile->current_cluster * 4) % SECTOR_SIZE);

  0014c	e1a03107	 mov         r3, r7, lsl #2

; 411  :                     FatSectorNumber = (UINT16) ((pFile->current_cluster * 4) / SECTOR_SIZE);

  00150	e1a034a3	 mov         r3, r3, lsr #9

; 412  : 
; 413  :                     #if FILEIO_USE_FAT_SECTOR_BUFFER
; 414  :                         // if not already contained in FatBuffer,
; 415  :                         // read sector containing next fat entry, FatSectorNumber is an
; 416  :                         // offset from the start of the partition + reserved area
; 417  :                         if (FatBufferSectorNumber != FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors)

  00154	e1d620b4	 ldrh        r2, [r6, #4]
  00158	e1a03803	 mov         r3, r3, lsl #16
  0015c	e5961038	 ldr         r1, [r6, #0x38]
  00160	e1a03823	 mov         r3, r3, lsr #16
  00164	e0823003	 add         r3, r2, r3
  00168	e5962248	 ldr         r2, [r6, #0x248]
  0016c	e3a00c01	 mov         r0, #1, 24
  00170	e0839001	 add         r9, r3, r1
  00174	e38030ff	 orr         r3, r0, #0xFF
  00178	e1520009	 cmp         r2, r9
  0017c	e0037107	 and         r7, r3, r7, lsl #2
  00180	0a00000c	 beq         |$LN5@FileIoRead|

; 418  :                         {
; 419  :                             FatBufferSectorNumber = FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors;
; 420  :                             if (pfileio_ops->read_sector(pfileio_ops->drive_info, FatBufferSectorNumber + ExtendedPartionBaseSector, FatBuffer) != ATA_STATUS_OK)

  00184	e5943000	 ldr         r3, [r4]
  00188	e59a0010	 ldr         r0, [r10, #0x10]
  0018c	e59a4008	 ldr         r4, [r10, #8]
  00190	e0831009	 add         r1, r3, r9
  00194	e2862048	 add         r2, r6, #0x48
  00198	e5869248	 str         r9, [r6, #0x248]
  0019c	e1a0e00f	 mov         lr, pc
  001a0	e12fff14	 bx          r4
  001a4	e3500000	 cmp         r0, #0
  001a8	0a000002	 beq         |$LN5@FileIoRead|
  001ac		 |$LN54@FileIoRead|

; 421  :                             {
; 422  :                                 #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 423  :                                     OALMSG(OAL_INFO, 
; 424  :                                         (L"BOOTLOADER: FileIoReadNextSectors failed reading FAT: LBA 0x%x (cluster 0x%x, sector 0x%x)\r\n",
; 425  :                                         FatBufferSectorNumber + ExtendedPartionBaseSector, 
; 426  :                                         pFile->current_cluster, 
; 427  :                                         pFile->current_sector_in_cluster)
; 428  :                                           );
; 429  :                                 #endif
; 430  :                                 FatBufferSectorNumber = 0;

  001ac	e3a03000	 mov         r3, #0
  001b0	e5863248	 str         r3, [r6, #0x248]

; 431  :                                 return FILEIO_STATUS_READ_FAILED;

  001b4	eaffffb6	 b           |$LN38@FileIoRead|
  001b8		 |$LN5@FileIoRead|

; 432  :                             }
; 433  :                         }
; 434  :                         //  update current fat index
; 435  :                         pFile->current_cluster = (*(((UINT32 *)FatBuffer) + (FatOffsetInSector/4))) & FAT32_CLUSTER_MASK;

  001b8	e1a02127	 mov         r2, r7, lsr #2
  001bc	e2863048	 add         r3, r6, #0x48
  001c0	e7933102	 ldr         r3, [r3, +r2, lsl #2]

; 436  :                     #else
; 437  :                         // read sector containing next fat entry, FatSectorNumber is an
; 438  :                         // offset from the start of the partition + reserved area
; 439  :                         if (pfileio_ops->read_sector(pfileio_ops->drive_info, 
; 440  :                                                      (FilesysInfo.partition_start + FatSectorNumber + 
; 441  :                                                       FilesysInfo.BiosParameterBlock.reserved_sectors) + 
; 442  :                                                       ExtendedPartionBaseSector, 
; 443  :                                                      pBuffer
; 444  :                                                     )
; 445  :                                        != ATA_STATUS_OK
; 446  :                            )
; 447  :                         {
; 448  :                             #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 449  :                                 OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (FAT) failed\r\n", 
; 450  :                                          (FilesysInfo.partition_start + FatSectorNumber + 
; 451  :                                           FilesysInfo.BiosParameterBlock.reserved_sectors) + 
; 452  :                                           ExtendedPartionBaseSector)
; 453  :                                       );
; 454  :                             #endif
; 455  :                             return FILEIO_STATUS_READ_FAILED;
; 456  :                         }
; 457  : 
; 458  :                         //  update current fat index
; 459  :                         pFile->current_cluster = *(((UINT32 *)pBuffer) + (FatOffsetInSector/4)) & FAT32_CLUSTER_MASK;
; 460  :                     #endif
; 461  :                     //  reset current_sector_in_cluster
; 462  :                     pFile->current_sector_in_cluster = 0;

  001c4	e3c3320f	 bic         r3, r3, #0xF, 4
  001c8	e5853018	 str         r3, [r5, #0x18]

; 463  : 
; 464  :                     if (pFile->current_cluster >= FAT32_CLUSTER_LAST_START)

  001cc	e373028f	 cmn         r3, #0x8F, 4

; 465  :                     {
; 466  :                         // no more clusters, signal end of file or directory
; 467  :                         pFile->current_sector_in_cluster = CURRENT_SECTOR_EOF_VALUE;
; 468  :                     }
; 469  :                 }
; 470  :                 break;

  001d0	ea000064	 b           |$LN56@FileIoRead|
  001d4		 |$LN15@FileIoRead|

; 340  :                     }
; 341  :                 }
; 342  :                 break;
; 343  :             #endif
; 344  : 
; 345  :             #if BOOTLOADER_SUPPORTS_FAT16
; 346  :             case FAT_TYPE_FAT16:
; 347  :                 // check to see if this was the last cluster, set flag so next read returns EOF
; 348  :                 if (pFile->current_cluster >= FAT16_CLUSTER_LAST_START)

  001d4	e1570009	 cmp         r7, r9

; 349  :                 {
; 350  :                     pFile->current_sector_in_cluster = CURRENT_SECTOR_EOF_VALUE;
; 351  :                 }
; 352  :                 else

  001d8	2a000066	 bcs         |$LN52@FileIoRead|

; 353  :                 {           
; 354  :                     FatOffsetInSector = (UINT16) ((pFile->current_cluster * 2) % SECTOR_SIZE);

  001dc	e1a03087	 mov         r3, r7, lsl #1

; 355  :                     FatSectorNumber = (UINT16) ((pFile->current_cluster * 2) / SECTOR_SIZE);

  001e0	e1a034a3	 mov         r3, r3, lsr #9

; 356  : 
; 357  :                     #if FILEIO_USE_FAT_SECTOR_BUFFER
; 358  :                         // if not already contained in FatBuffer,
; 359  :                         // read sector containing next fat entry, FatSectorNumber is an
; 360  :                         // offset from the start of the partition + reserved area
; 361  :                         if (FatBufferSectorNumber != FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors)

  001e4	e1d620b4	 ldrh        r2, [r6, #4]
  001e8	e1a03803	 mov         r3, r3, lsl #16
  001ec	e5961038	 ldr         r1, [r6, #0x38]
  001f0	e1a03823	 mov         r3, r3, lsr #16
  001f4	e0823003	 add         r3, r2, r3
  001f8	e5962248	 ldr         r2, [r6, #0x248]
  001fc	e3a00c01	 mov         r0, #1, 24
  00200	e083b001	 add         r11, r3, r1
  00204	e38030ff	 orr         r3, r0, #0xFF
  00208	e152000b	 cmp         r2, r11
  0020c	e0037087	 and         r7, r3, r7, lsl #1
  00210	0a000009	 beq         |$LN11@FileIoRead|

; 362  :                         {
; 363  :                             FatBufferSectorNumber = FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors;
; 364  :                             if (pfileio_ops->read_sector(pfileio_ops->drive_info, FatBufferSectorNumber + ExtendedPartionBaseSector, FatBuffer) != ATA_STATUS_OK)

  00214	e5943000	 ldr         r3, [r4]
  00218	e59a0010	 ldr         r0, [r10, #0x10]
  0021c	e59a4008	 ldr         r4, [r10, #8]
  00220	e083100b	 add         r1, r3, r11
  00224	e2862048	 add         r2, r6, #0x48
  00228	e586b248	 str         r11, [r6, #0x248]
  0022c	e1a0e00f	 mov         lr, pc
  00230	e12fff14	 bx          r4
  00234	e3500000	 cmp         r0, #0

; 365  :                             {
; 366  :                                 #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 367  :                                     OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (FAT) failed\r\n", FatBufferSectorNumber + ExtendedPartionBaseSector));
; 368  :                                 #endif
; 369  :                                 FatBufferSectorNumber = 0;
; 370  :                                 return FILEIO_STATUS_READ_FAILED;

  00238	1affffdb	 bne         |$LN54@FileIoRead|
  0023c		 |$LN11@FileIoRead|

; 371  :                             }
; 372  :                         }
; 373  :                         //  update current fat index
; 374  :                         pFile->current_cluster = *(((UINT16 *)FatBuffer) + (FatOffsetInSector/2));

  0023c	e1a020a7	 mov         r2, r7, lsr #1
  00240	e2863048	 add         r3, r6, #0x48
  00244	e0833082	 add         r3, r3, r2, lsl #1
  00248	e1d330b0	 ldrh        r3, [r3]

; 375  :                     #else
; 376  :                         // read sector containing next fat entry, FatSectorNumber is an
; 377  :                         // offset from the start of the partition + reserved area
; 378  :                         if (pfileio_ops->read_sector(pfileio_ops->drive_info, (FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors) + ExtendedPartionBaseSector, pBuffer) != ATA_STATUS_OK)
; 379  :                         {
; 380  :                             #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 381  :                                 OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (FAT) failed\r\n", (FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors) + ExtendedPartionBaseSector));
; 382  :                             #endif
; 383  :                             return FILEIO_STATUS_READ_FAILED;
; 384  :                         }
; 385  :                         //  update current fat index
; 386  :                         pFile->current_cluster = *(((UINT16 *)pBuffer) + (FatOffsetInSector/2));
; 387  :                     #endif
; 388  :                     //  reset current_sector_in_cluster
; 389  :                     pFile->current_sector_in_cluster = 0;

  0024c	e5853018	 str         r3, [r5, #0x18]

; 390  : 
; 391  :                     // check to see if this was the last cluster, set flag so next read returns EOF
; 392  :                     if (pFile->current_cluster >= FAT16_CLUSTER_LAST_START)

  00250	e1530009	 cmp         r3, r9

; 393  :                     {
; 394  :                         pFile->current_sector_in_cluster = CURRENT_SECTOR_EOF_VALUE;
; 395  :                     }
; 396  :                 }
; 397  :                 break;

  00254	ea000043	 b           |$LN56@FileIoRead|
  00258		 |$LN28@FileIoRead|

; 236  :         {
; 237  :             #if BOOTLOADER_SUPPORTS_FAT12
; 238  :             case FAT_TYPE_FAT12:
; 239  :                 if (pFile->current_cluster >= FAT12_CLUSTER_LAST_START)

  00258	e157000b	 cmp         r7, r11

; 240  :                 {
; 241  :                     pFile->current_sector_in_cluster = CURRENT_SECTOR_EOF_VALUE;
; 242  :                 }
; 243  :                 else

  0025c	2a000045	 bcs         |$LN52@FileIoRead|

; 244  :                 {
; 245  :                     //   FatOffsetInByte is 0 if fat entry starts on byte boundary, 1 if in mid-byte
; 246  :                     //   FatOffsetInSector is a byte pointer to byte containing first part of 12 bit fat entry
; 247  :                     FatOffsetInByte = (UINT16) (pFile->current_cluster & 1);
; 248  :                     FatOffsetInSector = (UINT16) (((pFile->current_cluster * 3) / 2) % SECTOR_SIZE);

  00260	e0871087	 add         r1, r7, r7, lsl #1

; 249  :                     FatSectorNumber = (UINT16) (((pFile->current_cluster * 3) / 2) / SECTOR_SIZE);

  00264	e1a03521	 mov         r3, r1, lsr #10

; 250  : 
; 251  :                     #if FILEIO_USE_FAT_SECTOR_BUFFER
; 252  :                         // if not already contained in FatBuffer, read sector containing next fat entry.
; 253  :                         // FatSectorNumber is an offset from the start of the partition + reserved area
; 254  :                         if (FatBufferSectorNumber != FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors)

  00268	e1d620b4	 ldrh        r2, [r6, #4]
  0026c	e1a03803	 mov         r3, r3, lsl #16
  00270	e1a03823	 mov         r3, r3, lsr #16
  00274	e5960038	 ldr         r0, [r6, #0x38]
  00278	e58d3010	 str         r3, [sp, #0x10]
  0027c	e0823003	 add         r3, r2, r3
  00280	e5962248	 ldr         r2, [r6, #0x248]
  00284	e1a01b01	 mov         r1, r1, lsl #22
  00288	e083e000	 add         lr, r3, r0
  0028c	e152000e	 cmp         r2, lr
  00290	e58de00c	 str         lr, [sp, #0xC]
  00294	e1a09ba1	 mov         r9, r1, lsr #23
  00298	0a00000b	 beq         |$LN24@FileIoRead|

; 255  :                         {
; 256  :                             FatBufferSectorNumber = FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors;
; 257  :                             if (pfileio_ops->read_sector(pfileio_ops->drive_info, FatBufferSectorNumber + ExtendedPartionBaseSector, FatBuffer) != ATA_STATUS_OK)

  0029c	e5943000	 ldr         r3, [r4]
  002a0	e59a0010	 ldr         r0, [r10, #0x10]
  002a4	e59a4008	 ldr         r4, [r10, #8]
  002a8	e083100e	 add         r1, r3, lr
  002ac	e1a0300e	 mov         r3, lr
  002b0	e5863248	 str         r3, [r6, #0x248]
  002b4	e2862048	 add         r2, r6, #0x48
  002b8	e1a0e00f	 mov         lr, pc
  002bc	e12fff14	 bx          r4
  002c0	e3500000	 cmp         r0, #0

; 258  :                             {
; 259  :                                 #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 260  :                                     OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (FAT) failed\r\n", FatBufferSectorNumber + ExtendedPartionBaseSector));
; 261  :                                 #endif
; 262  :                                 FatBufferSectorNumber = 0;
; 263  :                                 return FILEIO_STATUS_READ_FAILED;

  002c4	1affffb8	 bne         |$LN54@FileIoRead|

; 250  : 
; 251  :                     #if FILEIO_USE_FAT_SECTOR_BUFFER
; 252  :                         // if not already contained in FatBuffer, read sector containing next fat entry.
; 253  :                         // FatSectorNumber is an offset from the start of the partition + reserved area
; 254  :                         if (FatBufferSectorNumber != FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors)

  002c8	e59f4110	 ldr         r4, [pc, #0x110]
  002cc		 |$LN24@FileIoRead|

; 264  :                             }
; 265  :                         }
; 266  :                         // build current fat index from two bytes (which may be in different sectors)
; 267  :                         // get data from first byte of containing current FAT entry
; 268  :                         if (FatOffsetInByte)
; 269  :                             pFile->current_cluster = (*(((UINT8 *)FatBuffer) + FatOffsetInSector) >> 4) & 0xf;  // lower 4 bits of 12 from upper half of byte

  002cc	e2863048	 add         r3, r6, #0x48
  002d0	e7d93003	 ldrb        r3, [r9, +r3]
  002d4	e2177001	 ands        r7, r7, #1
  002d8	11a03223	 movne       r3, r3, lsr #4

; 270  :                         else
; 271  :                             pFile->current_cluster = *(((UINT8 *)FatBuffer) + FatOffsetInSector);   // lower 8 bits of 12 from entire byte

  002dc	e5853018	 str         r3, [r5, #0x18]
  002e0	e3a03c01	 mov         r3, #1, 24

; 272  :                     #else
; 273  :                         // read sector containing (at least the beginning of) the next fat entry
; 274  :                         if (pfileio_ops->read_sector(pfileio_ops->drive_info, (FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors) + ExtendedPartionBaseSector, pBuffer) != ATA_STATUS_OK)
; 275  :                         {
; 276  :                             #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 277  :                                 OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (FAT) failed\r\n", (FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors) + ExtendedPartionBaseSector));
; 278  :                             #endif
; 279  :                             return FILEIO_STATUS_READ_FAILED;
; 280  :                         }
; 281  : 
; 282  :                         // build current fat index from two bytes (which may be in different sectors)
; 283  :                         // get data from first byte of containing current FAT entry
; 284  :                         if (FatOffsetInByte)
; 285  :                             pFile->current_cluster = (*(((UINT8 *)pBuffer) + FatOffsetInSector) >> 4) & 0xf;    // lower 4 bits of 12 from upper half of byte
; 286  :                         else
; 287  :                             pFile->current_cluster = *(((UINT8 *)pBuffer) + FatOffsetInSector); // lower 8 bits of 12 from entire byte
; 288  :                     #endif
; 289  : 
; 290  :                     // get data from second byte of FAT12 entry, first check if fat entry spans sector
; 291  :                     if (FatOffsetInSector == 511)

  002e4	e38330ff	 orr         r3, r3, #0xFF
  002e8	e1590003	 cmp         r9, r3
  002ec	1a000011	 bne         |$LN21@FileIoRead|

; 292  :                     {
; 293  :                         // second byte spans sector, read next sector, reset offset
; 294  :                         #if FILEIO_USE_FAT_SECTOR_BUFFER
; 295  :                             FatBufferSectorNumber = FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors + 1;

  002f0	e1d630b4	 ldrh        r3, [r6, #4]

; 296  :                             if (pfileio_ops->read_sector(pfileio_ops->drive_info, FatBufferSectorNumber + ExtendedPartionBaseSector, FatBuffer) != ATA_STATUS_OK)

  002f4	e59d0010	 ldr         r0, [sp, #0x10]
  002f8	e5962038	 ldr         r2, [r6, #0x38]
  002fc	e5941000	 ldr         r1, [r4]
  00300	e0833000	 add         r3, r3, r0
  00304	e0833002	 add         r3, r3, r2
  00308	e2834001	 add         r4, r3, #1
  0030c	e59a0010	 ldr         r0, [r10, #0x10]
  00310	e59a3008	 ldr         r3, [r10, #8]
  00314	e0811004	 add         r1, r1, r4
  00318	e5864248	 str         r4, [r6, #0x248]
  0031c	e2862048	 add         r2, r6, #0x48
  00320	e1a0e00f	 mov         lr, pc
  00324	e12fff13	 bx          r3
  00328	e3500000	 cmp         r0, #0

; 297  :                             {
; 298  :                                 #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 299  :                                     OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (FAT) failed\r\n", FatBufferSectorNumber + ExtendedPartionBaseSector));
; 300  :                                 #endif
; 301  :                                 FatBufferSectorNumber = 0;
; 302  :                                 return FILEIO_STATUS_READ_FAILED;

  0032c	1affff9e	 bne         |$LN54@FileIoRead|

; 303  :                             }
; 304  :                         #else
; 305  :                             if (pfileio_ops->read_sector(pfileio_ops->drive_info, (FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors + 1) + ExtendedPartionBaseSector, pBuffer) != ATA_STATUS_OK)
; 306  :                             {
; 307  :                                 #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 308  :                                     OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (FAT) failed\r\n", (FilesysInfo.partition_start + FatSectorNumber + FilesysInfo.BiosParameterBlock.reserved_sectors + 1) + ExtendedPartionBaseSector));
; 309  :                                 #endif
; 310  :                                 return FILEIO_STATUS_READ_FAILED;
; 311  :                             }
; 312  :                         #endif
; 313  :                         FatOffsetInSector = 0;

  00330	e3a02000	 mov         r2, #0

; 314  :                     }
; 315  :                     else

  00334	ea000000	 b           |$LN19@FileIoRead|
  00338		 |$LN21@FileIoRead|

; 316  :                     {
; 317  :                         // second byte is in current sector, just increment offset
; 318  :                         FatOffsetInSector += 1;

  00338	e2892001	 add         r2, r9, #1
  0033c		 |$LN19@FileIoRead|

; 319  :                     }
; 320  : 
; 321  :                     //  build remainder of current fat index from the next byte
; 322  :                     #if FILEIO_USE_FAT_SECTOR_BUFFER
; 323  :                         if (FatOffsetInByte)

  0033c	e3570000	 cmp         r7, #0

; 324  :                             pFile->current_cluster |= *(((UINT8 *)FatBuffer) + FatOffsetInSector) << 4;         // upper 8 of 12 from entire byte

  00340	e2863048	 add         r3, r6, #0x48
  00344	17d22003	 ldrneb      r2, [r2, +r3]
  00348	15953018	 ldrne       r3, [r5, #0x18]
  0034c	11833202	 orrne       r3, r3, r2, lsl #4

; 325  :                         else
; 326  :                             pFile->current_cluster |= (*(((UINT8 *)FatBuffer) + FatOffsetInSector) & 0xf) << 8; // upper 4 of 12 from lower half of byte

  00350	07d23003	 ldreqb      r3, [r2, +r3]
  00354	05952018	 ldreq       r2, [r5, #0x18]
  00358	0203300f	 andeq       r3, r3, #0xF
  0035c	01823403	 orreq       r3, r2, r3, lsl #8
  00360	e5853018	 str         r3, [r5, #0x18]

; 327  :                     #else
; 328  :                         if (FatOffsetInByte)
; 329  :                             pFile->current_cluster |= *(((UINT8 *)pBuffer) + FatOffsetInSector) << 4;           // upper 8 of 12 from entire byte
; 330  :                         else
; 331  :                             pFile->current_cluster |= (*(((UINT8 *)pBuffer) + FatOffsetInSector) & 0xf) << 8;   // upper 4 of 12 from lower half of byte
; 332  :                     #endif
; 333  :                     //  reset current_sector_in_cluster
; 334  :                     pFile->current_sector_in_cluster = 0;
; 335  : 
; 336  :                     // check to see if this was the last cluster, set flag so next read returns EOF
; 337  :                     if (pFile->current_cluster >= FAT12_CLUSTER_LAST_START)

  00364	e153000b	 cmp         r3, r11
  00368		 |$LN56@FileIoRead|
  00368	e3a02000	 mov         r2, #0
  0036c	e59d1004	 ldr         r1, [sp, #4]
  00370	e1c521bc	 strh        r2, [r5, #0x1C]
  00374	3a000000	 bcc         |$LN16@FileIoRead|
  00378		 |$LN52@FileIoRead|

; 338  :                     {
; 339  :                         pFile->current_sector_in_cluster = CURRENT_SECTOR_EOF_VALUE;

  00378	e1c581bc	 strh        r8, [r5, #0x1C]
  0037c		 |$LN16@FileIoRead|

; 471  :             #endif
; 472  :         }
; 473  :     }
; 474  : 
; 475  :     if (numSectors > 1)
; 476  :     {
; 477  :         status = pfileio_ops->read_multi_sectors(
; 478  :                              pfileio_ops->drive_info, 
; 479  :                              (FilesysInfo.partition_start + SectorNumber) + 
; 480  :                                  ExtendedPartionBaseSector, 
; 481  :                              pBuffer,
; 482  :                              numSectors);

  0037c	e59f305c	 ldr         r3, [pc, #0x5C]
  00380	e59d7014	 ldr         r7, [sp, #0x14]
  00384	e59a0010	 ldr         r0, [r10, #0x10]
  00388	e5932000	 ldr         r2, [r3]
  0038c	e5963038	 ldr         r3, [r6, #0x38]
  00390	e3570001	 cmp         r7, #1
  00394	e0823003	 add         r3, r2, r3
  00398	e59d2008	 ldr         r2, [sp, #8]
  0039c	e0831001	 add         r1, r3, r1
  003a0	9a000004	 bls         |$LN3@FileIoRead|
  003a4	e59a400c	 ldr         r4, [r10, #0xC]
  003a8	e1dd30b0	 ldrh        r3, [sp]
  003ac	e1a0e00f	 mov         lr, pc
  003b0	e12fff14	 bx          r4

; 483  :     }
; 484  :     else

  003b4	ea000002	 b           |$LN2@FileIoRead|
  003b8		 |$LN3@FileIoRead|

; 485  :     {
; 486  :         status = pfileio_ops->read_sector(
; 487  :                              pfileio_ops->drive_info, 
; 488  :                              (FilesysInfo.partition_start + SectorNumber) + 
; 489  :                                  ExtendedPartionBaseSector, 
; 490  :                              pBuffer);

  003b8	e59a4008	 ldr         r4, [r10, #8]
  003bc	e1a0e00f	 mov         lr, pc
  003c0	e12fff14	 bx          r4
  003c4		 |$LN2@FileIoRead|

; 491  :     }
; 492  : 
; 493  :     // read the requested sector
; 494  :     if (status != ATA_STATUS_OK)

  003c4	e3500000	 cmp         r0, #0

; 495  :     {
; 496  :         #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 497  :             OALMSG(OAL_INFO, 
; 498  :               (L"BL: FileIoReadNextSectors failed reading: LBA 0x%x, cluster 0x%x, sec in cluster 0x%x, num sec %d\r\n", 
; 499  :                (FilesysInfo.partition_start + SectorNumber) + ExtendedPartionBaseSector, 
; 500  :                pFile->current_cluster - 2, 
; 501  :                pFile->current_sector_in_cluster,
; 502  :                numSectors
; 503  :               ));
; 504  :         #endif
; 505  :         return FILEIO_STATUS_READ_FAILED;

  003c8	1affff31	 bne         |$LN38@FileIoRead|

; 506  :     }
; 507  : 
; 508  :     // update sector count
; 509  :     pFile->current_sector += numSectors;

  003cc	e5953014	 ldr         r3, [r5, #0x14]

; 510  :     
; 511  :     return FILEIO_STATUS_OK;

  003d0	e3a00000	 mov         r0, #0
  003d4	e0873003	 add         r3, r7, r3
  003d8	e5853014	 str         r3, [r5, #0x14]
  003dc	eaffff2d	 b           |$LN45@FileIoRead|
  003e0		 |$LN60@FileIoRead|
  003e0		 |$LN61@FileIoRead|
  003e0	00000000	 DCD         |ExtendedPartionBaseSector|
  003e4		 |$LN62@FileIoRead|
  003e4	00000000	 DCD         |FilesysInfo|
  003e8		 |$M43569|

			 ENDP  ; |FileIoReadNextSectors|

	EXPORT	|FileNameToDirEntry|
	EXPORT	|??_C@_08GGFKNFHG@?5?5?5?5?5?5?5?5?$AA@| [ DATA ] ; `string'
	IMPORT	|toupper|

  00000			 AREA	 |.pdata|, PDATA
|$T43592| DCD	|$LN21@FileNameTo|
	DCD	0x40003301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08GGFKNFHG@?5?5?5?5?5?5?5?5?$AA@| DCB "        ", 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FileNameToDirEntry| PROC

; 523  : {

  00000		 |$LN21@FileNameTo|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M43589|
  00004	e1a07002	 mov         r7, r2
  00008	e1a08001	 mov         r8, r1
  0000c	e1a05000	 mov         r5, r0

; 524  :     int i, j;
; 525  : 
; 526  :     // fill name and extension with blanks
; 527  :     strcpy(pName, "        ");

  00010	e59f10b0	 ldr         r1, [pc, #0xB0]
  00014	e3a02009	 mov         r2, #9
  00018	e1a00008	 mov         r0, r8
  0001c	eb000000	 bl          memcpy

; 528  :     strcpy(pExtension, "   ");

  00020	e3a03000	 mov         r3, #0
  00024	e3a02020	 mov         r2, #0x20
  00028	e5c73003	 strb        r3, [r7, #3]
  0002c	e5c72000	 strb        r2, [r7]
  00030	e5c72001	 strb        r2, [r7, #1]
  00034	e5c72002	 strb        r2, [r7, #2]

; 529  : 
; 530  :     //OALMSG(1, (L"FileNameToDirEntry: \""));
; 531  : 
; 532  :     // copy name
; 533  :     for (i = 0; i < 8; i++)

  00038	e3a04000	 mov         r4, #0
  0003c	e1a06005	 mov         r6, r5
  00040		 |$LL11@FileNameTo|

; 534  :     {
; 535  :         if (pFileName[i] && pFileName[i] != L'.')

  00040	e1d630b0	 ldrh        r3, [r6]
  00044	e1b00003	 movs        r0, r3
  00048	0a00000a	 beq         |$LN8@FileNameTo|
  0004c	e350002e	 cmp         r0, #0x2E
  00050	0a000008	 beq         |$LN8@FileNameTo|

; 536  :         {
; 537  :             pName[i] = (CHAR) toupper((CHAR)(pFileName[i]));

  00054	e1a00c03	 mov         r0, r3, lsl #24
  00058	e1a00c40	 mov         r0, r0, asr #24
  0005c	eb000000	 bl          toupper
  00060	e1a03000	 mov         r3, r0
  00064	e7c43008	 strb        r3, [r4, +r8]
  00068	e2844001	 add         r4, r4, #1
  0006c	e3540008	 cmp         r4, #8
  00070	e2866002	 add         r6, r6, #2
  00074	bafffff1	 blt         |$LL11@FileNameTo|
  00078		 |$LN8@FileNameTo|

; 538  :             //OALMSG(1, (L"%c", (CHAR)(pName[i])));
; 539  :         }
; 540  :         else
; 541  :             break;
; 542  :     }
; 543  : 
; 544  :     //OALMSG(1, (L"."));
; 545  : 
; 546  :     // check for extension
; 547  :     if (pFileName[i] == L'.')

  00078	e0853084	 add         r3, r5, r4, lsl #1
  0007c	e1d330b0	 ldrh        r3, [r3]
  00080	e353002e	 cmp         r3, #0x2E
  00084	1a00000d	 bne         |$LN18@FileNameTo|

; 548  :     {
; 549  :         // skip period
; 550  :         i++;

  00088	e2843001	 add         r3, r4, #1
  0008c	e0855083	 add         r5, r5, r3, lsl #1

; 551  :         // copy extension
; 552  :         for (j = 0; j < 3; j++)

  00090	e3a04000	 mov         r4, #0
  00094		 |$LL5@FileNameTo|

; 553  :         {
; 554  :             if (pFileName[i])

  00094	e1d530b0	 ldrh        r3, [r5]
  00098	e3530000	 cmp         r3, #0
  0009c	0a000007	 beq         |$LN18@FileNameTo|

; 555  :             {
; 556  :                 pExtension[j] = (CHAR)toupper((BYTE)(pFileName[i++]));

  000a0	e20300ff	 and         r0, r3, #0xFF
  000a4	eb000000	 bl          toupper
  000a8	e1a03000	 mov         r3, r0
  000ac	e7c43007	 strb        r3, [r4, +r7]
  000b0	e2844001	 add         r4, r4, #1
  000b4	e3540003	 cmp         r4, #3
  000b8	e2855002	 add         r5, r5, #2
  000bc	bafffff4	 blt         |$LL5@FileNameTo|
  000c0		 |$LN18@FileNameTo|

; 557  :                 //OALMSG(1, (L"%c", (CHAR)(pExtension[j])));
; 558  :             }
; 559  :             else
; 560  :                 break;
; 561  :         }
; 562  :     }
; 563  : 
; 564  :     //OALMSG(1, (L"\"\r\n"));
; 565  : }

  000c0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000c4	e12fff1e	 bx          lr
  000c8		 |$LN22@FileNameTo|
  000c8		 |$LN23@FileNameTo|
  000c8	00000000	 DCD         |??_C@_08GGFKNFHG@?5?5?5?5?5?5?5?5?$AA@|
  000cc		 |$M43590|

			 ENDP  ; |FileNameToDirEntry|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|FileIoInit|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__rt_sdiv|
	IMPORT	|__rt_udiv|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T43644| DCD	|$LN58@FileIoInit|
	DCD	0xc000d302

  00000			 AREA	 |.xdata|, DATA
|$T43640| DCD	0xffffffdc
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T43640|

  00008		 |FileIoInit| PROC

; 579  : {

  00008		 |$LN58@FileIoInit|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24ddf81	 sub         sp, sp, #0x81, 30
  00010		 |$M43641|
  00010	e1a06000	 mov         r6, r0
  00014	e59f3334	 ldr         r3, [pc, #0x334]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3200	 str         r3, [sp, #0x200]

; 580  :     UINT16 Sector[SECTOR_SIZE/2];
; 581  :     UINT8 * pSector = (UINT8 *)Sector;
; 582  :     int status;
; 583  :     int i;
; 584  :     UINT32 boot_sector = 0;
; 585  :     UCHAR partition_type = 0;
; 586  :     int ExtendedPartitionDepth = 0;
; 587  :     int PartitionTableEntryCount = 4;
; 588  :         
; 589  :     // initialize device driver
; 590  :     #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 591  :         OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoInit() calling init.\r\n"));
; 592  :     #endif
; 593  : 
; 594  :     // assume no extented partion, no offset
; 595  :     ExtendedPartionBaseSector = 0;

  00020	e59fa324	 ldr         r10, [pc, #0x324]
  00024	e3a03000	 mov         r3, #0

; 596  : 
; 597  :     if ((status = pfileio_ops->init(pfileio_ops->drive_info)) != ATA_STATUS_OK)

  00028	e3a08000	 mov         r8, #0
  0002c	e58a3000	 str         r3, [r10]
  00030	e5960010	 ldr         r0, [r6, #0x10]
  00034	e5963000	 ldr         r3, [r6]
  00038	e3a04000	 mov         r4, #0
  0003c	e3a07004	 mov         r7, #4
  00040	e1a0e00f	 mov         lr, pc
  00044	e12fff13	 bx          r3
  00048	e3500000	 cmp         r0, #0

; 598  :         return FILEIO_STATUS_INIT_FAILED;

  0004c	1a000064	 bne         |$LN42@FileIoInit|

; 599  : 
; 600  :     // the identify drive command is optional, used only to display information for debugging
; 601  :     //if (pfileio_ops->identify && pfileio_ops->identify(pfileio_ops->drive_info, pSector) != ATA_STATUS_OK)
; 602  :     //  return FILEIO_STATUS_INIT_FAILED;
; 603  :     if (pfileio_ops->identify)

  00050	e5963004	 ldr         r3, [r6, #4]
  00054	e3530000	 cmp         r3, #0

; 604  :         pfileio_ops->identify(pfileio_ops->drive_info, pSector);

  00058	15960010	 ldrne       r0, [r6, #0x10]
  0005c	128d1000	 addne       r1, sp, #0
  00060	11a0e00f	 movne       lr, pc
  00064	112fff13	 bxne        r3

; 605  : 
; 606  :     #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 607  :         OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoInit() calling read_sector to get partition table\r\n"));
; 608  :     #endif
; 609  : 
; 610  : CheckPartitionTable:
; 611  : 
; 612  :     // read in candidate partition table sector
; 613  :     if (pfileio_ops->read_sector(pfileio_ops->drive_info, boot_sector + ExtendedPartionBaseSector, pSector) != ATA_STATUS_OK)

  00068	e59a1000	 ldr         r1, [r10]
  0006c	e5960010	 ldr         r0, [r6, #0x10]
  00070	e5963008	 ldr         r3, [r6, #8]
  00074	e28d2000	 add         r2, sp, #0
  00078	e1a0e00f	 mov         lr, pc
  0007c	e12fff13	 bx          r3
  00080	e3500000	 cmp         r0, #0
  00084	1a000056	 bne         |$LN42@FileIoInit|
  00088	e28d9000	 add         r9, sp, #0
  0008c		 |$CheckPartitionTable$43348|

; 619  :     }
; 620  : 
; 621  :     #if BOOTLOADER_DEBUG_DUMP_SECTOR_ZERO || BOOTLOADER_DEBUG_DUMP_ALL_SECTORS
; 622  :         DumpData((unsigned char *)pSector, 512);
; 623  :     #endif
; 624  :         
; 625  :     // check for valid BPB (Bios Parameter Block) in sector zero (old DOS disk organization, no partition table)
; 626  :     //if ( (*pSector == 0xe9 || *pSector == 0xeb) && (((PBOOT_SECTOR)pSector)->bpb.bytes_per_sector == 512) )
; 627  :     //if ( (*pSector == 0xe9 || *pSector == 0xeb) && ((BYTE_STRUCT_2_READ(((PBOOT_SECTOR)pSector)->bpb.bytes_per_sector)) == 512) )
; 628  :     if (   
; 629  :         (*pSector == 0xe9 || *pSector == 0xeb) &&
; 630  :         ((BYTE_STRUCT_2_READ(((PBOOT_SECTOR)pSector)->bpb.bytes_per_sector)) == 512) &&
; 631  :         ByteIsPowerOfTwo(((PBOOT_SECTOR)pSector)->bpb.sectors_per_cluster) &&
; 632  :         (((PBOOT_SECTOR)pSector)->bpb.media_descriptor == 0xf8)
; 633  :     )

  0008c	e5dd3000	 ldrb        r3, [sp]
  00090	e35300e9	 cmp         r3, #0xE9
  00094	0a000001	 beq         |$LN27@FileIoInit|
  00098	e35300eb	 cmp         r3, #0xEB
  0009c	1a00001a	 bne         |$LN28@FileIoInit|
  000a0		 |$LN27@FileIoInit|
  000a0	e5dd200c	 ldrb        r2, [sp, #0xC]
  000a4	e5dd300b	 ldrb        r3, [sp, #0xB]
  000a8	e1833402	 orr         r3, r3, r2, lsl #8
  000ac	e3530c02	 cmp         r3, #2, 24
  000b0	1a000015	 bne         |$LN28@FileIoInit|
  000b4	e5dd300d	 ldrb        r3, [sp, #0xD]
  000b8	e3530001	 cmp         r3, #1
  000bc	0a00000f	 beq         |$LN37@FileIoInit|
  000c0	e3530002	 cmp         r3, #2
  000c4	0a00000d	 beq         |$LN37@FileIoInit|
  000c8	e3530004	 cmp         r3, #4
  000cc	0a00000b	 beq         |$LN37@FileIoInit|
  000d0	e3530008	 cmp         r3, #8
  000d4	0a000009	 beq         |$LN37@FileIoInit|
  000d8	e3530010	 cmp         r3, #0x10
  000dc	0a000007	 beq         |$LN37@FileIoInit|
  000e0	e3530020	 cmp         r3, #0x20
  000e4	0a000005	 beq         |$LN37@FileIoInit|
  000e8	e3530040	 cmp         r3, #0x40
  000ec	0a000003	 beq         |$LN37@FileIoInit|
  000f0	e3530080	 cmp         r3, #0x80
  000f4	0a000001	 beq         |$LN37@FileIoInit|
  000f8	e3530c01	 cmp         r3, #1, 24
  000fc	1a000002	 bne         |$LN28@FileIoInit|
  00100		 |$LN37@FileIoInit|
  00100	e5dd3015	 ldrb        r3, [sp, #0x15]
  00104	e35300f8	 cmp         r3, #0xF8
  00108	0a00003b	 beq         |$LN43@FileIoInit|
  0010c		 |$LN28@FileIoInit|

; 654  :     }
; 655  : 
; 656  :     // assume that sector 0 contains a partition table
; 657  :     #if BOOTLOADER_DEBUG_DISPLAY_PARTITION_TABLE
; 658  :         for (i = 0; i < PartitionTableEntryCount; i++)
; 659  :         {
; 660  :             OALMSG(OAL_INFO, (L"BOOTLOADER: PartitionTable[%d] Flag:0x%x, Type:0x%x, Start:0x%X, Size:0x%X\r\n", 
; 661  :                 i,
; 662  :                 ((PPARTITION_TABLE)pSector)->Entry[i].ActivePartitionFlag, 
; 663  :                 ((PPARTITION_TABLE)pSector)->Entry[i].PartitionType, 
; 664  :                 ((PPARTITION_TABLE)pSector)->Entry[i].PartitionStartLBA, 
; 665  :                 ((PPARTITION_TABLE)pSector)->Entry[i].PartitionSize));
; 666  :         }
; 667  :     #endif
; 668  : 
; 669  :     // search the partition table for the active partition
; 670  :     for (i = 0; i < PartitionTableEntryCount; i++)

  0010c	e3a05000	 mov         r5, #0
  00110	e3570000	 cmp         r7, #0
  00114	da000014	 ble         |$LN22@FileIoInit|
  00118	e28d2000	 add         r2, sp, #0
  0011c		 |$LL24@FileIoInit|

; 671  :     {
; 672  :         if (((PPARTITION_TABLE)pSector)->Entry[i].ActivePartitionFlag == 0x80 || ((PPARTITION_TABLE)pSector)->Entry[i].PartitionType != 0x00)

  0011c	e5d231be	 ldrb        r3, [r2, #0x1BE]
  00120	e3530080	 cmp         r3, #0x80
  00124	0a000007	 beq         |$LN41@FileIoInit|
  00128	e5d231c2	 ldrb        r3, [r2, #0x1C2]
  0012c	e3530000	 cmp         r3, #0
  00130	1a000004	 bne         |$LN41@FileIoInit|
  00134	e2855001	 add         r5, r5, #1
  00138	e1550007	 cmp         r5, r7
  0013c	e2822010	 add         r2, r2, #0x10
  00140	bafffff5	 blt         |$LL24@FileIoInit|

; 680  :     {
; 681  :         #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 682  :             OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoInit() no active partition found\r\n"));
; 683  :         #endif
; 684  : 
; 685  :         return FILEIO_STATUS_INIT_FAILED;
; 686  :     }
; 687  : 
; 688  :     #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 689  :         OALMSG(OAL_INFO, (L"BOOTLOADER: trying partition %d\r\n", i));
; 690  :     #endif
; 691  : 
; 692  :     // check partition type
; 693  :     switch (partition_type)

  00144	ea000008	 b           |$LN22@FileIoInit|
  00148		 |$LN41@FileIoInit|

; 673  :         {
; 674  :             boot_sector = ((PPARTITION_TABLE)pSector)->Entry[i].PartitionStartLBA;

  00148	e089e205	 add         lr, r9, r5, lsl #4
  0014c	e5de01c6	 ldrb        r0, [lr, #0x1C6]
  00150	e5de31c7	 ldrb        r3, [lr, #0x1C7]
  00154	e5de21c8	 ldrb        r2, [lr, #0x1C8]
  00158	e5de11c9	 ldrb        r1, [lr, #0x1C9]
  0015c	e1803403	 orr         r3, r0, r3, lsl #8
  00160	e1833802	 orr         r3, r3, r2, lsl #16

; 675  :             partition_type = ((PPARTITION_TABLE)pSector)->Entry[i].PartitionType;

  00164	e5de41c2	 ldrb        r4, [lr, #0x1C2]
  00168	e1838c01	 orr         r8, r3, r1, lsl #24
  0016c		 |$LN22@FileIoInit|

; 676  :             break;
; 677  :         }
; 678  :     }
; 679  :     if (i == PartitionTableEntryCount)

  0016c	e1550007	 cmp         r5, r7
  00170	0a00001b	 beq         |$LN42@FileIoInit|

; 680  :     {
; 681  :         #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 682  :             OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoInit() no active partition found\r\n"));
; 683  :         #endif
; 684  : 
; 685  :         return FILEIO_STATUS_INIT_FAILED;
; 686  :     }
; 687  : 
; 688  :     #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 689  :         OALMSG(OAL_INFO, (L"BOOTLOADER: trying partition %d\r\n", i));
; 690  :     #endif
; 691  : 
; 692  :     // check partition type
; 693  :     switch (partition_type)

  00174	e3540006	 cmp         r4, #6
  00178	ca000006	 bgt         |$LN34@FileIoInit|
  0017c	0a00002b	 beq         |$LN15@FileIoInit|
  00180	e3540001	 cmp         r4, #1
  00184	0a000027	 beq         |$LN16@FileIoInit|
  00188	e3540004	 cmp         r4, #4
  0018c	0a000027	 beq         |$LN15@FileIoInit|
  00190	e3540005	 cmp         r4, #5
  00194	ea000006	 b           |$LN51@FileIoInit|
  00198		 |$LN34@FileIoInit|
  00198	e354000b	 cmp         r4, #0xB
  0019c	ba000010	 blt         |$LN42@FileIoInit|
  001a0	e354000c	 cmp         r4, #0xC
  001a4	da000023	 ble         |$LN14@FileIoInit|
  001a8	e354000e	 cmp         r4, #0xE
  001ac	0a00001f	 beq         |$LN15@FileIoInit|
  001b0	e354000f	 cmp         r4, #0xF
  001b4		 |$LN51@FileIoInit|
  001b4	1a00000a	 bne         |$LN42@FileIoInit|

; 722  :             break;
; 723  :         #endif
; 724  : 
; 725  :         case 0x05:
; 726  :         case 0x0f:
; 727  :             #if BOOTLOADER_DEBUG_DISPLAY_PARTITION_TABLE
; 728  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: Active partition type is EXTENDED DOS, reading extended partition table\r\n"));
; 729  :             #endif
; 730  :             ExtendedPartitionDepth++;
; 731  :             PartitionTableEntryCount = 2;
; 732  :             ExtendedPartionBaseSector = boot_sector;

  001b8	e58a8000	 str         r8, [r10]
  001bc	e5960010	 ldr         r0, [r6, #0x10]
  001c0	e5963008	 ldr         r3, [r6, #8]
  001c4	e1a01008	 mov         r1, r8

; 733  :             // sector addressing now is relative to partition table sector
; 734  :             boot_sector = 0;

  001c8	e3a08000	 mov         r8, #0
  001cc	e28d2000	 add         r2, sp, #0
  001d0	e3a07002	 mov         r7, #2
  001d4	e1a0e00f	 mov         lr, pc
  001d8	e12fff13	 bx          r3
  001dc	e3500000	 cmp         r0, #0
  001e0	0affffa9	 beq         |$CheckPartitionTable$43348|
  001e4		 |$LN42@FileIoInit|

; 614  :     {
; 615  :         #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 616  :             OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (PT) failed\r\n", boot_sector + ExtendedPartionBaseSector));
; 617  :         #endif
; 618  :         return FILEIO_STATUS_INIT_FAILED;

  001e4	e59d0200	 ldr         r0, [sp, #0x200]
  001e8	eb000000	 bl          __security_check_cookie
  001ec	e3a00001	 mov         r0, #1

; 735  :             goto CheckPartitionTable;
; 736  :             break;
; 737  : 
; 738  :         default:
; 739  :             #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 740  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: Active partition type is not supported (0x%x)\r\n", partition_type));
; 741  :             #endif
; 742  :             return FILEIO_STATUS_INIT_FAILED;

  001f0		 |$LN32@FileIoInit|

; 893  : }

  001f0	e28ddf81	 add         sp, sp, #0x81, 30
  001f4	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  001f8	e12fff1e	 bx          lr
  001fc		 |$LN43@FileIoInit|

; 634  :     {
; 635  :         boot_sector = 0;
; 636  : 
; 637  :         if ( (BYTE_STRUCT_2_READ(((PBOOT_SECTOR)pSector)->bpb.sectors_per_fat)) == 0)

  001fc	e5dd2017	 ldrb        r2, [sp, #0x17]
  00200	e5dd3016	 ldrb        r3, [sp, #0x16]

; 638  :         {
; 639  :             // assume FAT32 for now...
; 640  :             FilesysInfo.FatType = FAT_TYPE_FAT32;

  00204	e59f513c	 ldr         r5, [pc, #0x13C]
  00208	e3a08000	 mov         r8, #0
  0020c	e1933402	 orrs        r3, r3, r2, lsl #8
  00210	03a03003	 moveq       r3, #3

; 641  :             #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 642  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: Found BPB in sector zero, assuming FAT32 with no partition table\r\n"));
; 643  :             #endif
; 644  :         }
; 645  :         else
; 646  :         {
; 647  :             // assume FAT16 for now...
; 648  :             FilesysInfo.FatType = FAT_TYPE_FAT16;

  00214	05853044	 streq       r3, [r5, #0x44]
  00218	0a000012	 beq         |$NoPartitionTable$43360|
  0021c	e3a03002	 mov         r3, #2
  00220	e5853044	 str         r3, [r5, #0x44]

; 649  :             #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 650  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: Found BPB in sector zero, assuming FAT16 with no partition table\r\n"));
; 651  :             #endif
; 652  :         }
; 653  :         goto NoPartitionTable;

  00224	ea00000f	 b           |$NoPartitionTable$43360|
  00228		 |$LN16@FileIoInit|

; 694  :     {
; 695  :         #if BOOTLOADER_SUPPORTS_FAT12
; 696  :         case 0x01:
; 697  :             #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 698  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: Active partition type is FAT12\r\n"));
; 699  :             #endif
; 700  :             FilesysInfo.FatType = FAT_TYPE_FAT12;

  00228	e3a03001	 mov         r3, #1

; 701  :             break;

  0022c	ea000002	 b           |$LN52@FileIoInit|
  00230		 |$LN15@FileIoInit|

; 702  :         #endif
; 703  :         
; 704  :         #if BOOTLOADER_SUPPORTS_FAT16
; 705  :         case 0x04:
; 706  :         case 0x06:
; 707  :         case 0x0e:
; 708  :             #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 709  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: Active partition type is FAT16\r\n"));
; 710  :             #endif
; 711  :             FilesysInfo.FatType = FAT_TYPE_FAT16;

  00230	e3a03002	 mov         r3, #2

; 712  :             break;

  00234	ea000000	 b           |$LN52@FileIoInit|
  00238		 |$LN14@FileIoInit|

; 713  :         #endif
; 714  : 
; 715  :         #if BOOTLOADER_SUPPORTS_FAT32
; 716  :         case 0x0b:
; 717  :         case 0x0c:
; 718  :             #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 719  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: Active partition type is FAT32\r\n"));
; 720  :             #endif
; 721  :             FilesysInfo.FatType = FAT_TYPE_FAT32;

  00238	e3a03003	 mov         r3, #3
  0023c		 |$LN52@FileIoInit|
  0023c	e59f5104	 ldr         r5, [pc, #0x104]

; 743  :             break;
; 744  :     }                   
; 745  : 
; 746  :     #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 747  :         OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoInit() calling read_sector to read MBR for active partition\r\n"));
; 748  :     #endif
; 749  : 
; 750  :     // read in the master boot record (MBR), fill in the BPB
; 751  :     if (pfileio_ops->read_sector(pfileio_ops->drive_info, boot_sector + ExtendedPartionBaseSector, pSector) != ATA_STATUS_OK)

  00240	e28d2000	 add         r2, sp, #0
  00244	e5853044	 str         r3, [r5, #0x44]
  00248	e59a3000	 ldr         r3, [r10]
  0024c	e5960010	 ldr         r0, [r6, #0x10]
  00250	e5964008	 ldr         r4, [r6, #8]
  00254	e0831008	 add         r1, r3, r8
  00258	e1a0e00f	 mov         lr, pc
  0025c	e12fff14	 bx          r4
  00260	e3500000	 cmp         r0, #0

; 752  :     {
; 753  :         #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 754  :             OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (MBR) failed\r\n", boot_sector + ExtendedPartionBaseSector));
; 755  :         #endif
; 756  :         return FILEIO_STATUS_INIT_FAILED;

  00264	1affffde	 bne         |$LN42@FileIoInit|
  00268		 |$NoPartitionTable$43360|

; 757  :     }
; 758  :     
; 759  : NoPartitionTable:
; 760  : 
; 761  :     #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 762  :         OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoInit() copying BPB into FilesysInfo structure.\r\n"));
; 763  :     #endif
; 764  :     // copy bpb info from sector buffer to bpb
; 765  :     //FilesysInfo.BiosParameterBlock = ((BOOT_SECTOR *)pSector)->bpb;
; 766  :     BpbCopy(&FilesysInfo.BiosParameterBlock, &((BOOT_SECTOR *)pSector)->bpb);

  00268	e28d100b	 add         r1, sp, #0xB
  0026c	e1a00005	 mov         r0, r5
  00270	eb000000	 bl          BpbCopy

; 767  : 
; 768  :     #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 769  :         OALMSG(OAL_INFO, (L"BOOTLOADER: boot sector BPB for valid partition\r\n"));
; 770  :         OALMSG(OAL_INFO, (L"BOOTLOADER: sector size:     %X\r\n", FilesysInfo.BiosParameterBlock.bytes_per_sector));
; 771  :         OALMSG(OAL_INFO, (L"BOOTLOADER: sec/cluster:     %X\r\n", FilesysInfo.BiosParameterBlock.sectors_per_cluster));
; 772  :         OALMSG(OAL_INFO, (L"BOOTLOADER: rsvd sectors:    %X\r\n", FilesysInfo.BiosParameterBlock.reserved_sectors));
; 773  :         OALMSG(OAL_INFO, (L"BOOTLOADER: # FATs:          %X\r\n", FilesysInfo.BiosParameterBlock.number_of_fats));
; 774  :         OALMSG(OAL_INFO, (L"BOOTLOADER: media descipt:   %X\r\n", FilesysInfo.BiosParameterBlock.media_descriptor));
; 775  :         OALMSG(OAL_INFO, (L"BOOTLOADER: sec/track        %X\r\n", FilesysInfo.BiosParameterBlock.sectors_per_track));
; 776  :         OALMSG(OAL_INFO, (L"BOOTLOADER: # heads          %X\r\n", FilesysInfo.BiosParameterBlock.number_of_heads));
; 777  : 
; 778  :         #if BOOTLOADER_SUPPORTS_FAT32
; 779  :         if (FilesysInfo.FatType != FAT_TYPE_FAT32)
; 780  :         {
; 781  :         #endif
; 782  :             OALMSG(OAL_INFO, (L"BOOTLOADER: # root dir ent:  %X\r\n", FilesysInfo.BiosParameterBlock.number_of_root_directory_entries));
; 783  :             OALMSG(OAL_INFO, (L"BOOTLOADER: sec/fat:         %X\r\n", FilesysInfo.BiosParameterBlock.sectors_per_fat));
; 784  : 
; 785  :             #if BOOTLOADER_SUPPORTS_EBPB || BOOTLOADER_SUPPORTS_FAT32
; 786  :             if (FilesysInfo.BiosParameterBlock.total_sectors == 0)
; 787  :             {
; 788  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: total sectors:   %X\r\n", FilesysInfo.BiosParameterBlock.big_total_sectors));
; 789  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: # hidden sec:    %X\r\n", (UINT32) FilesysInfo.BiosParameterBlock.number_of_hidden_sectors_high << 16 || (UINT32) FilesysInfo.BiosParameterBlock.number_of_hidden_sectors));
; 790  :             }
; 791  :             else
; 792  :             #endif
; 793  :             {
; 794  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: total sectors:   %X\r\n", FilesysInfo.BiosParameterBlock.total_sectors));
; 795  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: # hidden sec:    %X\r\n", FilesysInfo.BiosParameterBlock.number_of_hidden_sectors));
; 796  :             }
; 797  :         #if BOOTLOADER_SUPPORTS_FAT32
; 798  :         }
; 799  :         else
; 800  :         {
; 801  :             OALMSG(OAL_INFO, (L"BOOTLOADER: root dir str cl: %X\r\n", FilesysInfo.BiosParameterBlock.root_dir_starting_cluster));
; 802  :             OALMSG(OAL_INFO, (L"BOOTLOADER: b# total sectors:%X\r\n", FilesysInfo.BiosParameterBlock.big_total_sectors));
; 803  :             OALMSG(OAL_INFO, (L"BOOTLOADER: b# sec/fat:      %X\r\n", FilesysInfo.BiosParameterBlock.big_sectors_per_fat));
; 804  :             OALMSG(OAL_INFO, (L"BOOTLOADER: b# hidden sec:   %X\r\n", (UINT32) FilesysInfo.BiosParameterBlock.number_of_hidden_sectors_high << 16 || (UINT32) FilesysInfo.BiosParameterBlock.number_of_hidden_sectors));
; 805  :         }
; 806  :         #endif
; 807  :     #endif
; 808  : 
; 809  :     #if BOOTLOADER_SUPPORTS_SPECIAL_FAT12_CHECK
; 810  :         // switch to FAT12 if total number of clusters is too small (under 4096)
; 811  :         
; 812  :         // divide by zero check
; 813  :         if (FilesysInfo.BiosParameterBlock.sectors_per_cluster == 0)

  00274	e5d52002	 ldrb        r2, [r5, #2]
  00278	e1b00002	 movs        r0, r2

; 814  :         {
; 815  :             #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 816  :                 OALMSG(OAL_INFO, (L"BOOTLOADER: ERROR - sectors_per_cluster is 0!!\r\n"));
; 817  :             #endif
; 818  :             return FILEIO_STATUS_INIT_FAILED;

  0027c	0affffd8	 beq         |$LN42@FileIoInit|

; 819  :         }
; 820  : 
; 821  :         // check for partition type override due to small number of sectors
; 822  :         if (FilesysInfo.BiosParameterBlock.total_sectors == 0)

  00280	e1d530ba	 ldrh        r3, [r5, #0xA]
  00284	e3530000	 cmp         r3, #0
  00288	1a000008	 bne         |$LN9@FileIoInit|

; 823  :         {
; 824  :             if ((FilesysInfo.BiosParameterBlock.big_total_sectors / FilesysInfo.BiosParameterBlock.sectors_per_cluster) <= 4087)

  0028c	e5951018	 ldr         r1, [r5, #0x18]
  00290	eb000000	 bl          __rt_udiv
  00294	e3a03c0f	 mov         r3, #0xF, 24
  00298	e38330f7	 orr         r3, r3, #0xF7
  0029c	e1530000	 cmp         r3, r0
  002a0	3a000009	 bcc         |$LN49@FileIoInit|
  002a4		 |$LN54@FileIoInit|

; 825  :             {
; 826  :                 #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 827  :                     OALMSG(OAL_INFO, (L"BOOTLOADER: Disk has under 4096 clusters, switching to FAT12\r\n"));
; 828  :                 #endif
; 829  :                 FilesysInfo.FatType = FAT_TYPE_FAT12;

  002a4	e3a02001	 mov         r2, #1
  002a8	e5852044	 str         r2, [r5, #0x44]

; 830  :             }
; 831  :         }
; 832  :         else            

  002ac	ea000007	 b           |$LN6@FileIoInit|
  002b0		 |$LN9@FileIoInit|

; 833  :         {
; 834  :             if ((FilesysInfo.BiosParameterBlock.total_sectors / FilesysInfo.BiosParameterBlock.sectors_per_cluster) <= 4087)

  002b0	e1a00002	 mov         r0, r2
  002b4	e1a01003	 mov         r1, r3
  002b8	eb000000	 bl          __rt_sdiv
  002bc	e3a03c0f	 mov         r3, #0xF, 24
  002c0	e38330f7	 orr         r3, r3, #0xF7
  002c4	e1530000	 cmp         r3, r0

; 835  :             {
; 836  :                 #if BOOTLOADER_DEBUG_DISPLAY_BPB
; 837  :                     OALMSG(OAL_INFO, (L"BOOTLOADER: Disk has under 4096 clusters, switching to FAT12\r\n"));
; 838  :                 #endif
; 839  :                 FilesysInfo.FatType = FAT_TYPE_FAT12;

  002c8	aafffff5	 bge         |$LN54@FileIoInit|
  002cc		 |$LN49@FileIoInit|
  002cc	e5952044	 ldr         r2, [r5, #0x44]
  002d0		 |$LN6@FileIoInit|

; 840  :             }
; 841  :         }
; 842  : 
; 843  :     #endif
; 844  : 
; 845  :     // sanity check - sector size
; 846  :     if (FilesysInfo.BiosParameterBlock.bytes_per_sector != SECTOR_SIZE)

  002d0	e1d530b0	 ldrh        r3, [r5]
  002d4	e3530c02	 cmp         r3, #2, 24

; 847  :     {
; 848  :         return FILEIO_STATUS_INIT_FAILED;

  002d8	1affffc1	 bne         |$LN42@FileIoInit|

; 849  :     }
; 850  : 
; 851  :     #if BOOTLOADER_DEBUG_DISPLAY_CALLS
; 852  :         OALMSG(OAL_INFO, (L"BOOTLOADER: FileIoInit() initializing data structures.\r\n"));
; 853  :     #endif
; 854  :     FilesysInfo.partition_start = boot_sector;

  002dc	e5858038	 str         r8, [r5, #0x38]

; 855  : 
; 856  :     switch (FilesysInfo.FatType)

  002e0	e3520000	 cmp         r2, #0
  002e4	0a000013	 beq         |$LN3@FileIoInit|
  002e8	e3520002	 cmp         r2, #2
  002ec	9a000009	 bls         |$LN2@FileIoInit|
  002f0	e3520003	 cmp         r2, #3
  002f4	1a00000f	 bne         |$LN3@FileIoInit|

; 870  : 
; 871  :             //FilesysInfo.number_of_hidden_sectors = FilesysInfo.BiosParameterBlock.number_of_hidden_sectors;
; 872  :             //FilesysInfo.total_sectors = FilesysInfo.BiosParameterBlock.total_sectors;
; 873  :             //FilesysInfo.sectors_per_fat = FilesysInfo.BiosParameterBlock.sectors_per_fat;
; 874  : 
; 875  :             break;
; 876  :         #endif
; 877  :         
; 878  :         #if BOOTLOADER_SUPPORTS_FAT32
; 879  :         case FAT_TYPE_FAT32:
; 880  :             // compute file data area starting sector (first sector after FATs and reserved sectors)
; 881  :             FilesysInfo.file_data_area_start = 
; 882  :                 FilesysInfo.BiosParameterBlock.reserved_sectors + 
; 883  :                (FilesysInfo.BiosParameterBlock.number_of_fats * FilesysInfo.BiosParameterBlock.big_sectors_per_fat);

  002f8	e5d51006	 ldrb        r1, [r5, #6]
  002fc	e595201c	 ldr         r2, [r5, #0x1C]
  00300	e1d530b4	 ldrh        r3, [r5, #4]
  00304	e0233291	 mla         r3, r1, r2, r3
  00308	e5853040	 str         r3, [r5, #0x40]

; 884  : 
; 885  :             // save root directory starting cluster
; 886  :             FilesysInfo.root_directory_start = FilesysInfo.BiosParameterBlock.root_dir_starting_cluster;

  0030c	e5953024	 ldr         r3, [r5, #0x24]
  00310	e585303c	 str         r3, [r5, #0x3C]

; 887  : 
; 888  :             break;

  00314	ea000007	 b           |$LN3@FileIoInit|
  00318		 |$LN2@FileIoInit|

; 857  :     {
; 858  :         #if BOOTLOADER_SUPPORTS_FAT12 || BOOTLOADER_SUPPORTS_FAT16
; 859  :         case FAT_TYPE_FAT12:
; 860  :         case FAT_TYPE_FAT16:
; 861  :             // compute root directory starting sector
; 862  :             FilesysInfo.root_directory_start = 
; 863  :                 FilesysInfo.BiosParameterBlock.reserved_sectors + 
; 864  :                 (FilesysInfo.BiosParameterBlock.number_of_fats * FilesysInfo.BiosParameterBlock.sectors_per_fat);

  00318	e1d510be	 ldrh        r1, [r5, #0xE]
  0031c	e5d52006	 ldrb        r2, [r5, #6]
  00320	e1d530b4	 ldrh        r3, [r5, #4]
  00324	e0223291	 mla         r2, r1, r2, r3
  00328	e585203c	 str         r2, [r5, #0x3C]

; 865  : 
; 866  :             // compute file data area starting sector
; 867  :             FilesysInfo.file_data_area_start = 
; 868  :                 FilesysInfo.root_directory_start + 
; 869  :                 (FilesysInfo.BiosParameterBlock.number_of_root_directory_entries / (SECTOR_SIZE/sizeof(DIRECTORY_ENTRY)) );

  0032c	e1d530b8	 ldrh        r3, [r5, #8]
  00330	e0823223	 add         r3, r2, r3, lsr #4
  00334	e5853040	 str         r3, [r5, #0x40]
  00338		 |$LN3@FileIoInit|

; 889  :         #endif
; 890  :     }
; 891  : 
; 892  :     return FILEIO_STATUS_OK;

  00338	e59d0200	 ldr         r0, [sp, #0x200]
  0033c	eb000000	 bl          __security_check_cookie
  00340	e3a00000	 mov         r0, #0
  00344	eaffffa9	 b           |$LN32@FileIoInit|
  00348		 |$LN59@FileIoInit|
  00348		 |$LN60@FileIoInit|
  00348	00000000	 DCD         |FilesysInfo|
  0034c		 |$LN61@FileIoInit|
  0034c	00000000	 DCD         |ExtendedPartionBaseSector|
  00350		 |$LN62@FileIoInit|
  00350	00000000	 DCD         |__security_cookie|
  00354		 |$M43642|

			 ENDP  ; |FileIoInit|

	EXPORT	|FileIoOpen|

  00000			 AREA	 |.pdata|, PDATA
|$T43708| DCD	|$LN81@FileIoOpen|
	DCD	0x40008801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FileIoOpen| PROC

; 907  : {

  00000		 |$LN81@FileIoOpen|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M43705|
  00004	e1a05001	 mov         r5, r1
  00008	e1a0a000	 mov         r10, r0

; 908  :     UINT32 sector_number = 0;
; 909  :     int status;
; 910  :     int entry;
; 911  :     int i;
; 912  :     UINT16 DirEntryCount = 0;
; 913  :     void * pSector = &pFile->buffer;
; 914  : 
; 915  :     switch (FilesysInfo.FatType)

  0000c	e59f6208	 ldr         r6, [pc, #0x208]
  00010	e59f3200	 ldr         r3, [pc, #0x200]
  00014	e3a09000	 mov         r9, #0
  00018	e596e044	 ldr         lr, [r6, #0x44]
  0001c	e3a0b000	 mov         r11, #0
  00020	e2858024	 add         r8, r5, #0x24
  00024	e35e0000	 cmp         lr, #0
  00028	e3a04000	 mov         r4, #0
  0002c	0a00001c	 beq         |$LN69@FileIoOpen|
  00030	e35e0002	 cmp         lr, #2
  00034	9a00000e	 bls         |$LN32@FileIoOpen|
  00038	e35e0003	 cmp         lr, #3
  0003c	1a000018	 bne         |$LN69@FileIoOpen|

; 930  :             }
; 931  : 
; 932  :             break;
; 933  :         #endif
; 934  : 
; 935  :         #if BOOTLOADER_SUPPORTS_FAT32
; 936  :         case FAT_TYPE_FAT32:
; 937  :             // setup to read first directory sector
; 938  :             pFile->current_cluster = FilesysInfo.root_directory_start;

  00040	e596e03c	 ldr         lr, [r6, #0x3C]

; 939  :             pFile->current_sector_in_cluster = 0;
; 940  :             pFile->current_sector = 0;
; 941  :             pFile->bytes_in_buffer = 0;
; 942  : 
; 943  :             if ((status = FileIoReadNextSectors(pfileio_ops, pFile, pSector, 1)) != FILEIO_STATUS_OK)

  00044	e3a03001	 mov         r3, #1
  00048	e1a02008	 mov         r2, r8
  0004c	e585e018	 str         lr, [r5, #0x18]
  00050	e1c541bc	 strh        r4, [r5, #0x1C]
  00054	e5854014	 str         r4, [r5, #0x14]
  00058	e5854020	 str         r4, [r5, #0x20]
  0005c	eb000000	 bl          FileIoReadNextSectors
  00060		 |$LN75@FileIoOpen|
  00060	e3500000	 cmp         r0, #0
  00064	0a00000d	 beq         |$LN68@FileIoOpen|
  00068		 |$LN50@FileIoOpen|

; 1035 :                     return FILEIO_STATUS_OPEN_FAILED;

  00068	e3a00002	 mov         r0, #2

; 1059 : }

  0006c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN32@FileIoOpen|

; 916  :     {
; 917  :         #if BOOTLOADER_SUPPORTS_FAT12 || BOOTLOADER_SUPPORTS_FAT16
; 918  :         case FAT_TYPE_FAT12:
; 919  :         case FAT_TYPE_FAT16:
; 920  :             // starting sector of directory
; 921  :             sector_number = FilesysInfo.root_directory_start;
; 922  : 
; 923  :             // read directory sector
; 924  :             if ((status = pfileio_ops->read_sector(pfileio_ops->drive_info, (FilesysInfo.partition_start + sector_number) + ExtendedPartionBaseSector, pSector)) != ATA_STATUS_OK)

  00074	e5932000	 ldr         r2, [r3]
  00078	e5963038	 ldr         r3, [r6, #0x38]
  0007c	e596903c	 ldr         r9, [r6, #0x3C]
  00080	e59a0010	 ldr         r0, [r10, #0x10]
  00084	e0823003	 add         r3, r2, r3
  00088	e59a4008	 ldr         r4, [r10, #8]
  0008c	e0831009	 add         r1, r3, r9
  00090	e1a02008	 mov         r2, r8
  00094	e1a0e00f	 mov         lr, pc
  00098	e12fff14	 bx          r4
  0009c	eaffffef	 b           |$LN75@FileIoOpen|
  000a0		 |$LN68@FileIoOpen|

; 925  :             {
; 926  :                 #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 927  :                     OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (DIR) failed\r\n", (FilesysInfo.partition_start + sector_number) + ExtendedPartionBaseSector));
; 928  :                 #endif
; 929  :                 return FILEIO_STATUS_OPEN_FAILED;

  000a0	e596e044	 ldr         lr, [r6, #0x44]
  000a4		 |$LN69@FileIoOpen|
  000a4	e3a010e5	 mov         r1, #0xE5
  000a8		 |$LL28@FileIoOpen|

; 944  :                 return FILEIO_STATUS_OPEN_FAILED;
; 945  :             
; 946  :             break;
; 947  :         #endif
; 948  :     }
; 949  : 
; 950  :     // scan the entire root directory looking for the file
; 951  :     for ( ; ; )
; 952  :     {
; 953  :         // check each directory entry in the sector
; 954  :         #if BOOTLOADER_SUPPORTS_FAT32
; 955  :         for (entry = 0; (entry < SECTOR_SIZE/sizeof(DIRECTORY_ENTRY)) && (FilesysInfo.FatType == FAT_TYPE_FAT32 ? 1 : (DirEntryCount < FilesysInfo.BiosParameterBlock.number_of_root_directory_entries)); entry++)

  000a8	e3a07000	 mov         r7, #0
  000ac	e1a04008	 mov         r4, r8
  000b0		 |$LL26@FileIoOpen|
  000b0	e35e0003	 cmp         lr, #3
  000b4	0a000002	 beq         |$LN55@FileIoOpen|
  000b8	e1d630b8	 ldrh        r3, [r6, #8]
  000bc	e15b0003	 cmp         r11, r3
  000c0	2a000028	 bcs         |$LN37@FileIoOpen|
  000c4		 |$LN55@FileIoOpen|

; 956  :         #else
; 957  :         for (entry = 0; (entry < SECTOR_SIZE/sizeof(DIRECTORY_ENTRY)) && (DirEntryCount < FilesysInfo.BiosParameterBlock.number_of_root_directory_entries); entry++)
; 958  :         #endif      
; 959  :         {
; 960  :             UINT8 * pName = (((DIRECTORY_ENTRY *)pSector) + entry)->filename;
; 961  :             UINT8 Attribute = (((DIRECTORY_ENTRY *)pSector) + entry)->attribute;
; 962  :             
; 963  :             // bump count of total directory entries scanned
; 964  :             DirEntryCount++;
; 965  : 
; 966  :             // skip long file names, subdirectories and volume lable
; 967  :             if (/* Attribute == 0x0f || */ (Attribute & 0x18))

  000c4	e5d4200b	 ldrb        r2, [r4, #0xB]
  000c8	e28b3001	 add         r3, r11, #1
  000cc	e1a0b803	 mov         r11, r3, lsl #16
  000d0	e1a0b82b	 mov         r11, r11, lsr #16
  000d4	e3120018	 tst         r2, #0x18
  000d8	1a00001e	 bne         |$LN25@FileIoOpen|

; 968  :                 continue;
; 969  : 
; 970  :             // skip special directory entries
; 971  :             if (pName[0] == 0x00 || pName[0] == 0xe5)

  000dc	e5d43000	 ldrb        r3, [r4]
  000e0	e3530000	 cmp         r3, #0
  000e4	0a00001b	 beq         |$LN25@FileIoOpen|
  000e8	e35300e5	 cmp         r3, #0xE5
  000ec	0a000019	 beq         |$LN25@FileIoOpen|

; 972  :                 continue;
; 973  :             
; 974  :             if (pName[0] == 0x05)

  000f0	e3530005	 cmp         r3, #5

; 975  :                 pName[0] = 0xe5;

  000f4	05c41000	 streqb      r1, [r4]
  000f8	0596e044	 ldreq       lr, [r6, #0x44]

; 976  :                 
; 977  :             #if BOOTLOADER_DEBUG_DISPLAY_DIRECTORY_ENTRIES
; 978  :                 OALMSG(OAL_INFO, (L"  Directory Entry #%d: <%c%c%c%c%c%c%c%c %c%c%c> ", DirEntryCount, pName[0], pName[1], pName[2], pName[3], pName[4], pName[5], pName[6], pName[7], pExtension[0], pExtension[1], pExtension[2]));
; 979  :             #endif
; 980  : 
; 981  :             // compare name
; 982  :             for (i = 0; i < 8; i++)

  000fc	e3a01000	 mov         r1, #0
  00100		 |$LL19@FileIoOpen|

; 983  :             {
; 984  :                 if ((((DIRECTORY_ENTRY *)pSector) + entry)->filename[i] != pFile->name[i])

  00100	e7d42001	 ldrb        r2, [r4, +r1]
  00104	e19130d5	 ldrsb       r3, [r1, +r5]
  00108	e1520003	 cmp         r2, r3
  0010c	1a000002	 bne         |$LN46@FileIoOpen|
  00110	e2811001	 add         r1, r1, #1
  00114	e3510008	 cmp         r1, #8
  00118	bafffff8	 blt         |$LL19@FileIoOpen|
  0011c		 |$LN46@FileIoOpen|

; 985  :                     break;
; 986  :             }
; 987  :             if (i == 8)

  0011c	e3510008	 cmp         r1, #8
  00120	1a00000b	 bne         |$LN74@FileIoOpen|

; 988  :             {
; 989  :                 // compare extension
; 990  :                 for (i = 0; i < 3; i++) 

  00124	e3a00000	 mov         r0, #0
  00128		 |$LL14@FileIoOpen|

; 991  :                 {
; 992  :                     if ((((DIRECTORY_ENTRY *)pSector) + entry)->extension[i] != pFile->extension[i])

  00128	e0843000	 add         r3, r4, r0
  0012c	e5d31008	 ldrb        r1, [r3, #8]
  00130	e0802005	 add         r2, r0, r5
  00134	e1d230d9	 ldrsb       r3, [r2, #9]
  00138	e1510003	 cmp         r1, r3
  0013c	1a000002	 bne         |$LN47@FileIoOpen|
  00140	e2800001	 add         r0, r0, #1
  00144	e3500003	 cmp         r0, #3
  00148	bafffff6	 blt         |$LL14@FileIoOpen|
  0014c		 |$LN47@FileIoOpen|

; 993  :                         break;
; 994  :                 }
; 995  :                 if (i == 3) 

  0014c	e3500003	 cmp         r0, #3
  00150	0a000021	 beq         |$LN48@FileIoOpen|
  00154		 |$LN74@FileIoOpen|
  00154	e3a010e5	 mov         r1, #0xE5
  00158		 |$LN25@FileIoOpen|

; 944  :                 return FILEIO_STATUS_OPEN_FAILED;
; 945  :             
; 946  :             break;
; 947  :         #endif
; 948  :     }
; 949  : 
; 950  :     // scan the entire root directory looking for the file
; 951  :     for ( ; ; )
; 952  :     {
; 953  :         // check each directory entry in the sector
; 954  :         #if BOOTLOADER_SUPPORTS_FAT32
; 955  :         for (entry = 0; (entry < SECTOR_SIZE/sizeof(DIRECTORY_ENTRY)) && (FilesysInfo.FatType == FAT_TYPE_FAT32 ? 1 : (DirEntryCount < FilesysInfo.BiosParameterBlock.number_of_root_directory_entries)); entry++)

  00158	e2877001	 add         r7, r7, #1
  0015c	e3570010	 cmp         r7, #0x10
  00160	e2844020	 add         r4, r4, #0x20
  00164	3affffd1	 bcc         |$LL26@FileIoOpen|
  00168		 |$LN37@FileIoOpen|

; 1014 :                 }
; 1015 :             }
; 1016 :             #if BOOTLOADER_DEBUG_DISPLAY_DIRECTORY_ENTRIES
; 1017 :                 OALMSG(OAL_INFO, (L"\r\n"));
; 1018 :             #endif
; 1019 :         }                
; 1020 : 
; 1021 :         switch (FilesysInfo.FatType)

  00168	e35e0000	 cmp         lr, #0
  0016c	0affffcd	 beq         |$LL28@FileIoOpen|
  00170	e35e0002	 cmp         lr, #2
  00174	9a000009	 bls         |$LN5@FileIoOpen|
  00178	e35e0003	 cmp         lr, #3
  0017c	1affffc9	 bne         |$LL28@FileIoOpen|

; 1039 :                 {
; 1040 :                     #if BOOTLOADER_DEBUG_DISPLAY_ERRORS
; 1041 :                         OALMSG(OAL_INFO, (L"BOOTLOADER: read_sector %u (next DIR) failed\r\n", (FilesysInfo.partition_start + sector_number) + ExtendedPartionBaseSector));
; 1042 :                     #endif
; 1043 :                     return FILEIO_STATUS_OPEN_FAILED;
; 1044 :                 }
; 1045 : 
; 1046 :                 break;
; 1047 :             #endif
; 1048 : 
; 1049 :             #if BOOTLOADER_SUPPORTS_FAT32
; 1050 :             case FAT_TYPE_FAT32:
; 1051 :                 // try to read the next directory sector
; 1052 :                 if ((status = FileIoReadNextSectors(pfileio_ops, pFile, pSector, 1)) != FILEIO_STATUS_OK)

  00180	e3a03001	 mov         r3, #1
  00184	e1a02008	 mov         r2, r8
  00188	e1a01005	 mov         r1, r5
  0018c	e1a0000a	 mov         r0, r10
  00190	eb000000	 bl          FileIoReadNextSectors
  00194		 |$LN78@FileIoOpen|
  00194	e3500000	 cmp         r0, #0
  00198	1affffb2	 bne         |$LN50@FileIoOpen|

; 1053 :                     return FILEIO_STATUS_OPEN_FAILED;
; 1054 : 
; 1055 :                 break;

  0019c	eaffffbf	 b           |$LN68@FileIoOpen|
  001a0		 |$LN5@FileIoOpen|

; 1022 :         {
; 1023 :             #if BOOTLOADER_SUPPORTS_FAT12 || BOOTLOADER_SUPPORTS_FAT16
; 1024 :             case FAT_TYPE_FAT12:
; 1025 :             case FAT_TYPE_FAT16:
; 1026 :                 // point to next sector
; 1027 :                 sector_number++;
; 1028 : 
; 1029 :                 #if BOOTLOADER_DEBUG_DISPLAY_DIRECTORY_ENTRIES
; 1030 :                     OALMSG(OAL_INFO, (L"Next directory sector %d, file data area start %d\r\n", sector_number, FilesysInfo.file_data_area_start));
; 1031 :                 #endif
; 1032 : 
; 1033 :                 // check for end of directory
; 1034 :                 if (sector_number >= FilesysInfo.file_data_area_start)

  001a0	e5963040	 ldr         r3, [r6, #0x40]
  001a4	e2899001	 add         r9, r9, #1
  001a8	e1590003	 cmp         r9, r3
  001ac	2affffad	 bcs         |$LN50@FileIoOpen|

; 1036 : 
; 1037 :                 // read next directory sector
; 1038 :                 if ((status = pfileio_ops->read_sector(pfileio_ops->drive_info, (FilesysInfo.partition_start + sector_number) + ExtendedPartionBaseSector, pSector)) != ATA_STATUS_OK)

  001b0	e59f3060	 ldr         r3, [pc, #0x60]
  001b4	e59a0010	 ldr         r0, [r10, #0x10]
  001b8	e59a4008	 ldr         r4, [r10, #8]
  001bc	e5932000	 ldr         r2, [r3]
  001c0	e5963038	 ldr         r3, [r6, #0x38]
  001c4	e0823003	 add         r3, r2, r3
  001c8	e0831009	 add         r1, r3, r9
  001cc	e1a02008	 mov         r2, r8
  001d0	e1a0e00f	 mov         lr, pc
  001d4	e12fff14	 bx          r4

; 1056 :             #endif
; 1057 :         }
; 1058 :     }

  001d8	eaffffed	 b           |$LN78@FileIoOpen|
  001dc		 |$LN48@FileIoOpen|

; 996  :                 {
; 997  :                     // save starting cluster information
; 998  :                     
; 999  :                     #if BOOTLOADER_SUPPORTS_FAT32
; 1000 :                     if (FilesysInfo.FatType == FAT_TYPE_FAT32)

  001dc	e35e0003	 cmp         lr, #3

; 1001 :                         pFile->current_cluster = ((UINT32)((((DIRECTORY_ENTRY *)pSector) + entry)->starting_cluster)) | (((UINT32)((((DIRECTORY_ENTRY *)pSector) + entry)->starting_cluster_high)) << 16);

  001e0	e0881287	 add         r1, r8, r7, lsl #5
  001e4	e1d131ba	 ldrh        r3, [r1, #0x1A]
  001e8	01d121b4	 ldreqh      r2, [r1, #0x14]

; 1002 :                     else
; 1003 :                     #endif
; 1004 :                         pFile->current_cluster = (((DIRECTORY_ENTRY *)pSector) + entry)->starting_cluster;
; 1005 :                     pFile->current_sector_in_cluster = 0;
; 1006 :                     pFile->file_size = (((DIRECTORY_ENTRY *)pSector) + entry)->file_size;
; 1007 :                     // initialize other stuff in File handle
; 1008 :                     pFile->current_sector = 0;
; 1009 :                     pFile->bytes_in_buffer = 0;
; 1010 :                     #if BOOTLOADER_DEBUG_DISPLAY_DIRECTORY_ENTRIES
; 1011 :                         OALMSG(OAL_INFO, (L"Found file, starting cluster = %x, file size = %X\r\n", pFile->current_cluster, pFile->file_size));
; 1012 :                     #endif
; 1013 :                     return FILEIO_STATUS_OK;

  001ec	e3a00000	 mov         r0, #0
  001f0	01833802	 orreq       r3, r3, r2, lsl #16
  001f4	e3a02000	 mov         r2, #0
  001f8	e1c521bc	 strh        r2, [r5, #0x1C]
  001fc	e5853018	 str         r3, [r5, #0x18]
  00200	e591301c	 ldr         r3, [r1, #0x1C]
  00204	e5852014	 str         r2, [r5, #0x14]
  00208	e5852020	 str         r2, [r5, #0x20]
  0020c	e5853010	 str         r3, [r5, #0x10]

; 1059 : }

  00210	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00214	e12fff1e	 bx          lr
  00218		 |$LN82@FileIoOpen|
  00218		 |$LN83@FileIoOpen|
  00218	00000000	 DCD         |ExtendedPartionBaseSector|
  0021c		 |$LN84@FileIoOpen|
  0021c	00000000	 DCD         |FilesysInfo|
  00220		 |$M43706|

			 ENDP  ; |FileIoOpen|

	EXPORT	|FileIoRead|

  00000			 AREA	 |.pdata|, PDATA
|$T43740| DCD	|$LN28@FileIoRead@2|
	DCD	0x40004301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FileIoRead| PROC

; 1077 : {

  00000		 |$LN28@FileIoRead@2|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M43737|
  00004	e1b04003	 movs        r4, r3
  00008	e1a06002	 mov         r6, r2
  0000c	e1a05001	 mov         r5, r1
  00010	e1a08000	 mov         r8, r0

; 1078 :     int status;
; 1079 :     UINT8 * s;
; 1080 : 
; 1081 :     UINT32 numSectorsToRead = 0;
; 1082 :             
; 1083 :     while (Count)

  00014	0a000038	 beq         |$LN11@FileIoRead@2|
  00018	e59f90e8	 ldr         r9, [pc, #0xE8]
  0001c	e3a0ac02	 mov         r10, #2, 24
  00020		 |$LL12@FileIoRead@2|

; 1084 :     {
; 1085 :         // create pointer to start of valid data in buffer
; 1086 :         s = pFile->buffer + (SECTOR_SIZE - pFile->bytes_in_buffer); 

  00020	e595e020	 ldr         lr, [r5, #0x20]
  00024	e045e00e	 sub         lr, r5, lr
  00028	e28e2f89	 add         r2, lr, #0x89, 30
  0002c		 |$LL10@FileIoRead@2|

; 1087 : 
; 1088 :         // if any bytes are in the buffer copy them to destination
; 1089 :         while (Count && pFile->bytes_in_buffer)

  0002c	e595e020	 ldr         lr, [r5, #0x20]
  00030	e35e0000	 cmp         lr, #0
  00034	0a000019	 beq         |$LN25@FileIoRead@2|

; 1090 :         {
; 1091 :             *pDest = *s;

  00038	e4d2e001	 ldrb        lr, [r2], #1

; 1092 :             pDest++;
; 1093 :             s++;
; 1094 :             Count--;

  0003c	e2544001	 subs        r4, r4, #1
  00040	e4c6e001	 strb        lr, [r6], #1

; 1095 :             pFile->bytes_in_buffer--;

  00044	e5953020	 ldr         r3, [r5, #0x20]
  00048	e2433001	 sub         r3, r3, #1
  0004c	e5853020	 str         r3, [r5, #0x20]
  00050	1afffff5	 bne         |$LL10@FileIoRead@2|

; 1131 :                 return status;
; 1132 : 
; 1133 :             pDest += (SECTOR_SIZE * numSectorsToRead);
; 1134 :             Count -= (SECTOR_SIZE * numSectorsToRead);

  00054	ea000011	 b           |$LN25@FileIoRead@2|
  00058		 |$LL8@FileIoRead@2|

; 1096 :         }
; 1097 : 
; 1098 :         // Note: After the above while loop, the read is sector aligned
; 1099 : 
; 1100 :         // if Count is at least one sector size then read sector directly into caller's buffer
; 1101 :         while (Count >= SECTOR_SIZE)
; 1102 :         {
; 1103 :             if (Count < 2*SECTOR_SIZE)

  00058	e3540b01	 cmp         r4, #1, 22
  0005c	3a000012	 bcc         |$LN18@FileIoRead@2|

; 1111 :     
; 1112 :                 break;
; 1113 :             }
; 1114 : 
; 1115 :             // Condition for multi sector read is met 
; 1116 :             // read sectors in the cluster
; 1117 :             numSectorsToRead = Count/SECTOR_SIZE;  // number of sectors to read
; 1118 : 
; 1119 :             // make sure numSectorsToRead is within the current cluster's limit
; 1120 :             // number of sectors remain in cluster to be read
; 1121 :             if (numSectorsToRead + pFile->current_sector_in_cluster > FilesysInfo.BiosParameterBlock.sectors_per_cluster)

  00060	e1d521bc	 ldrh        r2, [r5, #0x1C]
  00064	e5d91002	 ldrb        r1, [r9, #2]
  00068	e1a074a4	 mov         r7, r4, lsr #9
  0006c	e0823007	 add         r3, r2, r7
  00070	e1530001	 cmp         r3, r1

; 1122 :             {
; 1123 :                 // TODO: what if this is the last cluster of the file.
; 1124 :                 //       in that case, the cluster may be partially filled.
; 1125 :                 //Read all the remaining sectors in the cluster
; 1126 :                 numSectorsToRead = (FilesysInfo.BiosParameterBlock.sectors_per_cluster - pFile->current_sector_in_cluster);

  00074	80417002	 subhi       r7, r1, r2

; 1127 :             }
; 1128 : 
; 1129 :             status = FileIoReadNextSectors(pfileio_ops, pFile, pDest, (UINT16)numSectorsToRead);

  00078	e1a03807	 mov         r3, r7, lsl #16
  0007c	e1a03823	 mov         r3, r3, lsr #16
  00080	e1a02006	 mov         r2, r6
  00084	e1a01005	 mov         r1, r5
  00088	e1a00008	 mov         r0, r8
  0008c	eb000000	 bl          FileIoReadNextSectors
  00090	e3500000	 cmp         r0, #0

; 1130 :             if (status != FILEIO_STATUS_OK)

  00094	1a000019	 bne         |$LN13@FileIoRead@2|

; 1131 :                 return status;
; 1132 : 
; 1133 :             pDest += (SECTOR_SIZE * numSectorsToRead);
; 1134 :             Count -= (SECTOR_SIZE * numSectorsToRead);

  00098	e0444487	 sub         r4, r4, r7, lsl #9
  0009c	e0866487	 add         r6, r6, r7, lsl #9
  000a0		 |$LN25@FileIoRead@2|
  000a0	e3540c02	 cmp         r4, #2, 24
  000a4	2affffeb	 bcs         |$LL8@FileIoRead@2|

; 1139 :         {
; 1140 :             if ((status = FileIoReadNextSectors(pfileio_ops, pFile, pFile->buffer, 1)) != FILEIO_STATUS_OK)

  000a8	ea000008	 b           |$LN7@FileIoRead@2|
  000ac		 |$LN18@FileIoRead@2|

; 1104 :             {
; 1105 :                 // can only read SINGLE sector
; 1106 :                 if ((status = FileIoReadNextSectors(pfileio_ops, pFile, pDest, 1)) != FILEIO_STATUS_OK)

  000ac	e3a03001	 mov         r3, #1
  000b0	e1a02006	 mov         r2, r6
  000b4	e1a01005	 mov         r1, r5
  000b8	e1a00008	 mov         r0, r8
  000bc	eb000000	 bl          FileIoReadNextSectors
  000c0	e3500000	 cmp         r0, #0
  000c4	1a00000d	 bne         |$LN13@FileIoRead@2|

; 1107 :                     return status;
; 1108 :     
; 1109 :                 pDest += SECTOR_SIZE;

  000c8	e2866c02	 add         r6, r6, #2, 24

; 1110 :                 Count -= SECTOR_SIZE;

  000cc	e2444c02	 sub         r4, r4, #2, 24
  000d0		 |$LN7@FileIoRead@2|

; 1135 :         }
; 1136 : 
; 1137 :         // if Count is not zero, read a sector into the file structure sector buffer
; 1138 :         if (Count)

  000d0	e3540000	 cmp         r4, #0
  000d4	0a000008	 beq         |$LN11@FileIoRead@2|

; 1139 :         {
; 1140 :             if ((status = FileIoReadNextSectors(pfileio_ops, pFile, pFile->buffer, 1)) != FILEIO_STATUS_OK)

  000d8	e3a03001	 mov         r3, #1
  000dc	e2852024	 add         r2, r5, #0x24
  000e0	e1a01005	 mov         r1, r5
  000e4	e1a00008	 mov         r0, r8
  000e8	eb000000	 bl          FileIoReadNextSectors
  000ec	e3500000	 cmp         r0, #0
  000f0	1a000002	 bne         |$LN13@FileIoRead@2|

; 1141 :                 return status;
; 1142 :             pFile->bytes_in_buffer = SECTOR_SIZE;

  000f4	e585a020	 str         r10, [r5, #0x20]

; 1078 :     int status;
; 1079 :     UINT8 * s;
; 1080 : 
; 1081 :     UINT32 numSectorsToRead = 0;
; 1082 :             
; 1083 :     while (Count)

  000f8	eaffffc8	 b           |$LL12@FileIoRead@2|
  000fc		 |$LN11@FileIoRead@2|

; 1143 :         }
; 1144 :     }
; 1145 :     return FILEIO_STATUS_OK;

  000fc	e3a00000	 mov         r0, #0
  00100		 |$LN13@FileIoRead@2|

; 1146 : }

  00100	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00104	e12fff1e	 bx          lr
  00108		 |$LN29@FileIoRead@2|
  00108		 |$LN30@FileIoRead@2|
  00108	00000000	 DCD         |FilesysInfo|
  0010c		 |$M43738|

			 ENDP  ; |FileIoRead|

	END
