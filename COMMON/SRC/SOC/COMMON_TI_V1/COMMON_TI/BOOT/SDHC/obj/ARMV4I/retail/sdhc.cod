; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\SDHC\sdhc.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|gwaCMD| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|m_dwMaxClockRate|, 0x4

	 COMMON	|m_TransferClass|, 0x2

	 COMMON	|m_dwMemBase|, 0x4

	 COMMON	|m_pbRegisters|, 0x4

	 COMMON	|m_hTWL|, 0x4

	 COMMON	|m_dwSDIOCard|, 0x4

	 COMMON	|m_usMaxBlockLen|, 0x2

	 COMMON	|g_hGPIO|, 0x4

	 COMMON	|m_dwSDIOPriority|, 0x4

	 COMMON	|m_dwMemLen|, 0x4

	 COMMON	|m_dwControllerSysIntr|, 0x4

	 COMMON	|m_wDTOTimeout|, 0x2

	 COMMON	|m_fCardInitialized|, 0x4

	 COMMON	|m_fAppCmdMode|, 0x4

	 COMMON	|m_LastCommand|, 0x4

	 COMMON	|m_fInitialized|, 0x4

	 COMMON	|m_dwMaxTimeout|, 0x4

	 COMMON	|m_dwCDPriority|, 0x4

	 COMMON	|m_fCardPresent|, 0x4

	 COMMON	|m_wCTOTimeout|, 0x2

	 COMMON	|m_dwSlot|, 0x4

	 COMMON	|m_fCardInserted|, 0x4

	 COMMON	|m_fMMCMode|, 0x4

	 COMMON	|m_dwCPURev|, 0x4

	 COMMON	|m_fFirstTime|, 0x4


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|gwaCMD| DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x1
	%	1
	DCD	0x120000
	DCB	0x1
	DCB	0x0
	DCB	0x1
	%	1
	DCD	0x90000
	DCB	0x1
	DCB	0x0
	DCB	0x1
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x2
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x30000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x10000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x10000
	DCB	0x0
	DCB	0x0
	DCB	0x1
	%	1
	DCD	0x220010
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0xc30000
	DCB	0x1
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x1a0000
	DCB	0x1
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x220032
	DCB	0x1
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x220032
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x1
	%	1
	DCD	0x230000
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x20010
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x220022
	DCB	0x1
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x220022
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x30000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x30000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20010
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x30000
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x1
	DCB	0x1
	%	1
	DCD	0x20000
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x1
	DCB	0x0
	%	1
	DCD	0x220000
	DCB	0x2
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x2
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x220000
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x1
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x20000
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\boot\sdhc\sdhc.c

  00000			 AREA	 |.pdata|, PDATA
|$T44729| DCD	|$LN5@SystemCloc|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SystemClockOn| PROC

; 192  : {

  00000		 |$LN5@SystemCloc|
  00000		 |$M44726|

; 193  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M44727|

			 ENDP  ; |SystemClockOn|


  00000			 AREA	 |.pdata|, PDATA
|$T44736| DCD	|$LN5@SystemCloc@2|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SystemClockOff| PROC

; 196  : {

  00000		 |$LN5@SystemCloc@2|
  00000		 |$M44733|

; 197  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M44734|

			 ENDP  ; |SystemClockOff|

	EXPORT	|SdhcCardDetect|
	IMPORT	|GPIOGetBit|
	IMPORT	|BSPGetSDHCCardDetect|

  00000			 AREA	 |.pdata|, PDATA
|$T44746| DCD	|$LN11@SdhcCardDe|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SdhcCardDetect| PROC

; 201  : {

  00000		 |$LN11@SdhcCardDe|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M44743|

; 202  :     DWORD pinState=1;
; 203  : 
; 204  :     switch (m_dwSlot)

  00004	e59f3040	 ldr         r3, [pc, #0x40]
  00008	e5933000	 ldr         r3, [r3]
  0000c	e3530001	 cmp         r3, #1
  00010	1a000009	 bne         |$LN8@SdhcCardDe|

; 205  :     {
; 206  :         case MMCSLOT_1:
; 207  :                pinState = GPIOGetBit(g_hGPIO,BSPGetSDHCCardDetect(MMCSLOT_1));

  00014	e3a00001	 mov         r0, #1
  00018	eb000000	 bl          BSPGetSDHCCardDetect
  0001c	e59f3024	 ldr         r3, [pc, #0x24]
  00020	e1a01000	 mov         r1, r0
  00024	e5930000	 ldr         r0, [r3]
  00028	eb000000	 bl          GPIOGetBit
  0002c	e3500000	 cmp         r0, #0

; 222  :     else 
; 223  :         return TRUE;

  00030	03a00001	 moveq       r0, #1

; 224  : }

  00034	049de004	 ldreq       lr, [sp], #4
  00038	012fff1e	 bxeq        lr
  0003c		 |$LN8@SdhcCardDe|

; 208  :             break;
; 209  : 
; 210  : #if 0   
; 211  :         // MMCSLOT_2 not supported
; 212  :         case MMCSLOT_2:
; 213  :             OALTritonRead(m_hTWL, TWL_GPIODATAIN1, &regval);
; 214  :             regval &= (1<<1);   //GPIO.1
; 215  :             break;
; 216  : #endif
; 217  :     }
; 218  : 
; 219  :     // card detect is active low
; 220  :     if (pinState) 
; 221  :         return FALSE;

  0003c	e3a00000	 mov         r0, #0

; 224  : }

  00040	e49de004	 ldr         lr, [sp], #4
  00044	e12fff1e	 bx          lr
  00048		 |$LN12@SdhcCardDe|
  00048		 |$LN13@SdhcCardDe|
  00048	00000000	 DCD         |g_hGPIO|
  0004c		 |$LN14@SdhcCardDe|
  0004c	00000000	 DCD         |m_dwSlot|
  00050		 |$M44744|

			 ENDP  ; |SdhcCardDetect|

	IMPORT	|GPIOPullup|
	IMPORT	|GPIOSetMode|
	IMPORT	|GPIOOpen|

  00000			 AREA	 |.pdata|, PDATA
|$T44758| DCD	|$LN8@Initialize|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitializeT2GPIO| PROC

; 227  : {    

  00000		 |$LN8@Initialize|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M44755|

; 228  :     g_hGPIO = GPIOOpen();

  00004	eb000000	 bl          GPIOOpen

; 229  : 
; 230  :     // configure card detect GPIO
; 231  :     switch (m_dwSlot)

  00008	e59f3050	 ldr         r3, [pc, #0x50]
  0000c	e59f4048	 ldr         r4, [pc, #0x48]
  00010	e5933000	 ldr         r3, [r3]
  00014	e5840000	 str         r0, [r4]
  00018	e3530001	 cmp         r3, #1
  0001c	1a00000b	 bne         |$LN2@Initialize|

; 232  :     {
; 233  :         case MMCSLOT_1:
; 234  : 
; 235  :             // Configure GPIO for card detect
; 236  :             GPIOSetMode(g_hGPIO, BSPGetSDHCCardDetect(MMCSLOT_1),GPIO_DIR_INPUT|GPIO_DEBOUNCE_ENABLE);

  00020	e3a00001	 mov         r0, #1
  00024	eb000000	 bl          BSPGetSDHCCardDetect
  00028	e1a01000	 mov         r1, r0
  0002c	e5940000	 ldr         r0, [r4]
  00030	e3a02021	 mov         r2, #0x21
  00034	eb000000	 bl          GPIOSetMode

; 237  :             GPIOPullup(g_hGPIO, BSPGetSDHCCardDetect(MMCSLOT_1),GPIO_PULLUP_ENABLE);

  00038	e3a00001	 mov         r0, #1
  0003c	eb000000	 bl          BSPGetSDHCCardDetect
  00040	e1a01000	 mov         r1, r0
  00044	e5940000	 ldr         r0, [r4]
  00048	e3a02001	 mov         r2, #1
  0004c	eb000000	 bl          GPIOPullup
  00050		 |$LN2@Initialize|

; 238  :    
; 239  :             // Configure GPIO card detect as input with both edge interrupts
; 240  :             // GPIOSetMode(m_hGPIO, MMC1_GPIO_CARDDET, GPIO_DIR_INPUT | GPIO_INT_LOW_HIGH | GPIO_INT_HIGH_LOW);
; 241  :             //  m_dwCDIntrId = TWL_INTR_GPIO_0;
; 242  :             break;
; 243  : 
; 244  : #if 0   
; 245  :         // MMCSLOT_2 not supported
; 246  :         case MMCSLOT_2:
; 247  :             // Configure GPIO for card detect
; 248  :             OALTritonRead(m_hTWL, TWL_GPIO_CTRL, &regval);
; 249  :             regval |= T2_GPIO_MODULE_ENABLE_MASK;
; 250  :             OALTritonWrite(m_hTWL, TWL_GPIO_CTRL, regval);
; 251  : 
; 252  :             // Configure GPIO card detect pullup / pulldown
; 253  :             OALTritonRead(m_hTWL, TWL_GPIOPUPDCTR1, &regval);
; 254  :             regval &= MMC2_GPIO_CARDDET_PU_PD_MASK;
; 255  :             regval |= MMC2_GPIO_CARDDET_PU;
; 256  :             OALTritonWrite(m_hTWL, TWL_GPIOPUPDCTR1, regval);
; 257  : 
; 258  :             // Configure GPIO card detect debounce
; 259  :             OALTritonRead(m_hTWL, TWL_GPIO_DEBEN1, &regval);
; 260  :             regval |= MMC2_GPIO_CARDDET_DEB;
; 261  :             OALTritonWrite(m_hTWL, TWL_GPIO_DEBEN1, regval);
; 262  : 
; 263  :             // Configure GPIO card as input with both edge interrupts
; 264  :             GPIOSetMode(m_hGPIO, MMC2_GPIO_CARDDET, GPIO_DIR_INPUT | GPIO_INT_LOW_HIGH | GPIO_INT_HIGH_LOW);
; 265  : 
; 266  :             m_dwCDIntrId = TWL_INTR_GPIO_1;
; 267  : 
; 268  :             break;
; 269  : #endif
; 270  :     }
; 271  : 
; 272  :    return TRUE;

  00050	e3a00001	 mov         r0, #1

; 273  : }

  00054	e8bd4010	 ldmia       sp!, {r4, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$LN9@Initialize|
  0005c		 |$LN10@Initialize|
  0005c	00000000	 DCD         |g_hGPIO|
  00060		 |$LN11@Initialize|
  00060	00000000	 DCD         |m_dwSlot|
  00064		 |$M44756|

			 ENDP  ; |InitializeT2GPIO|

	EXPORT	|??_C@_1DA@PKLOKBNI@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAW?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@PKNJPAKP@?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAS?$AAD?$AAH?$AAC?$AA?5?$AAH?$AAW?$AA?3?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?5?$AAR?$AAS?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|dpCurSettings|
	IMPORT	|OALGetTickCount|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|OALPAtoVA|
	IMPORT	|GetAddressByDevice|
	IMPORT	|SOCGetSDHCDeviceBySlot|

  00000			 AREA	 |.pdata|, PDATA
|$T44796| DCD	|$LN29@Initialize@2|
	DCD	0x40004f01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@PKLOKBNI@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAW?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "H", 0x0, "W", 0x0, ":"
	DCB	0x0, " ", 0x0, "T", 0x0, "I", 0x0, "M", 0x0, "E", 0x0, "O"
	DCB	0x0, "U", 0x0, "T", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@PKNJPAKP@?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAS?$AAD?$AAH?$AAC?$AA?5?$AAH?$AAW?$AA?3?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?5?$AAR?$AAS?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "S", 0x0, "D"
	DCB	0x0, "H", 0x0, "C", 0x0, " ", 0x0, "H", 0x0, "W", 0x0, ":"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "R", 0x0, "S", 0x0, "T", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitializeHardware| PROC

; 276  : {

  00000		 |$LN29@Initialize@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M44793|

; 277  :     DWORD               dwCurrentTickCount;
; 278  :     DWORD               dwTimeout;
; 279  :     DWORD               dwCountStart;
; 280  :     BOOL                fTimeoutOverflow = FALSE;
; 281  : 
; 282  :     m_dwMaxClockRate = 20000000;

  00004	e59f212c	 ldr         r2, [pc, #0x12C]
  00008	e59f3124	 ldr         r3, [pc, #0x124]

; 283  : 
; 284  :     m_pbRegisters = OALPAtoUA(GetAddressByDevice(SOCGetSDHCDeviceBySlot(Slot)));

  0000c	e3a06000	 mov         r6, #0
  00010	e5823000	 str         r3, [r2]
  00014	eb000000	 bl          SOCGetSDHCDeviceBySlot
  00018	eb000000	 bl          GetAddressByDevice
  0001c	e3a01000	 mov         r1, #0
  00020	eb000000	 bl          OALPAtoVA
  00024	e59f7104	 ldr         r7, [pc, #0x104]
  00028	e1a03000	 mov         r3, r0

; 285  :         
; 286  :     // Reset the controller
; 287  :     OALMSG(1, (TEXT("Init SDHC HW: controller RST\r\n")));

  0002c	e59f00f8	 ldr         r0, [pc, #0xF8]
  00030	e5873000	 str         r3, [r7]
  00034	eb000000	 bl          NKDbgPrintfW

; 288  :     OUTREG32(&m_pbRegisters->MMCHS_SYSCONFIG, MMCHS_SYSCONFIG_SOFTRESET);

  00038	e5973000	 ldr         r3, [r7]
  0003c	e3a02002	 mov         r2, #2
  00040	e5832010	 str         r2, [r3, #0x10]

; 289  : 
; 290  :     // calculate timeout conditions
; 291  :     dwCountStart = OALGetTickCount();

  00044	eb000000	 bl          OALGetTickCount

; 292  :     dwTimeout = dwCountStart + m_dwMaxTimeout;

  00048	e59f30d8	 ldr         r3, [pc, #0xD8]
  0004c	e1a04000	 mov         r4, r0
  00050	e5933000	 ldr         r3, [r3]
  00054	e0835004	 add         r5, r3, r4

; 293  :     if ( dwTimeout < dwCountStart )

  00058	e1550004	 cmp         r5, r4
  0005c	2a00000b	 bcs         |$LN22@Initialize@2|

; 294  :         fTimeoutOverflow = TRUE;

  00060	e3a06001	 mov         r6, #1

; 295  : 
; 296  :     // Verify that reset has completed.
; 297  :     while (!(INREG32(&m_pbRegisters->MMCHS_SYSSTATUS) & MMCHS_SYSSTATUS_RESETDONE))

  00064	ea000009	 b           |$LN22@Initialize@2|
  00068		 |$LL3@Initialize@2|

; 298  :     {
; 299  :         OALMSGX(1, (TEXT("Init HW: MMCHS_SYSSTATUS = 0x%X\r\n"), INREG32(&m_pbRegisters->MMCHS_SYSSTATUS)));
; 300  : 
; 301  :         // check for a timeout
; 302  :         dwCurrentTickCount = OALGetTickCount();

  00068	eb000000	 bl          OALGetTickCount

; 303  :         if ( fTimeoutOverflow ? ( dwTimeout < dwCurrentTickCount && dwCurrentTickCount < dwCountStart )
; 304  :             : ( dwTimeout < dwCurrentTickCount || dwCurrentTickCount < dwCountStart ) )

  0006c	e3560000	 cmp         r6, #0
  00070	0a000002	 beq         |$LN11@Initialize@2|
  00074	e1550000	 cmp         r5, r0
  00078	2a000004	 bcs         |$LN22@Initialize@2|
  0007c	ea000001	 b           |$LN26@Initialize@2|
  00080		 |$LN11@Initialize@2|
  00080	e1550000	 cmp         r5, r0
  00084	3a00001b	 bcc         |$LN21@Initialize@2|
  00088		 |$LN26@Initialize@2|
  00088	e1500004	 cmp         r0, r4
  0008c	3a000019	 bcc         |$LN21@Initialize@2|
  00090		 |$LN22@Initialize@2|

; 295  : 
; 296  :     // Verify that reset has completed.
; 297  :     while (!(INREG32(&m_pbRegisters->MMCHS_SYSSTATUS) & MMCHS_SYSSTATUS_RESETDONE))

  00090	e5973000	 ldr         r3, [r7]
  00094	e5933014	 ldr         r3, [r3, #0x14]
  00098	e3130001	 tst         r3, #1
  0009c	0afffff1	 beq         |$LL3@Initialize@2|

; 308  :         }
; 309  :     }
; 310  :     InitializeT2GPIO();

  000a0	eb000000	 bl          GPIOOpen
  000a4	e59f3078	 ldr         r3, [pc, #0x78]
  000a8	e59f4070	 ldr         r4, [pc, #0x70]
  000ac	e5933000	 ldr         r3, [r3]
  000b0	e5840000	 str         r0, [r4]
  000b4	e3530001	 cmp         r3, #1
  000b8	1a00000b	 bne         |$LN16@Initialize@2|
  000bc	e3a00001	 mov         r0, #1
  000c0	eb000000	 bl          BSPGetSDHCCardDetect
  000c4	e1a01000	 mov         r1, r0
  000c8	e5940000	 ldr         r0, [r4]
  000cc	e3a02021	 mov         r2, #0x21
  000d0	eb000000	 bl          GPIOSetMode
  000d4	e3a00001	 mov         r0, #1
  000d8	eb000000	 bl          BSPGetSDHCCardDetect
  000dc	e1a01000	 mov         r1, r0
  000e0	e5940000	 ldr         r0, [r4]
  000e4	e3a02001	 mov         r2, #1
  000e8	eb000000	 bl          GPIOPullup
  000ec		 |$LN16@Initialize@2|

; 311  :     return TRUE;

  000ec	e3a00001	 mov         r0, #1

; 312  : }

  000f0	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000f4	e12fff1e	 bx          lr
  000f8		 |$LN21@Initialize@2|

; 305  :         {
; 306  :             OALMSG(OAL_ERROR, (TEXT("InitializeHW: TIMEOUT\r\n")));

  000f8	e59f301c	 ldr         r3, [pc, #0x1C]
  000fc	e5933440	 ldr         r3, [r3, #0x440]
  00100	e3130001	 tst         r3, #1
  00104	159f000c	 ldrne       r0, [pc, #0xC]
  00108	1b000000	 blne        NKDbgPrintfW

; 307  :             return FALSE;

  0010c	e3a00000	 mov         r0, #0

; 312  : }

  00110	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00114	e12fff1e	 bx          lr
  00118		 |$LN30@Initialize@2|
  00118		 |$LN31@Initialize@2|
  00118	00000000	 DCD         |??_C@_1DA@PKLOKBNI@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAW?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  0011c		 |$LN32@Initialize@2|
  0011c	00000000	 DCD         |dpCurSettings|
  00120		 |$LN33@Initialize@2|
  00120	00000000	 DCD         |g_hGPIO|
  00124		 |$LN34@Initialize@2|
  00124	00000000	 DCD         |m_dwSlot|
  00128		 |$LN35@Initialize@2|
  00128	00000000	 DCD         |m_dwMaxTimeout|
  0012c		 |$LN36@Initialize@2|
  0012c	00000000	 DCD         |??_C@_1DO@PKNJPAKP@?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAS?$AAD?$AAH?$AAC?$AA?5?$AAH?$AAW?$AA?3?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?5?$AAR?$AAS?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  00130		 |$LN37@Initialize@2|
  00130	00000000	 DCD         |m_pbRegisters|
  00134		 |$LN38@Initialize@2|
  00134	01312d00	 DCD         0x1312d00
  00138		 |$LN39@Initialize@2|
  00138	00000000	 DCD         |m_dwMaxClockRate|
  0013c		 |$M44794|

			 ENDP  ; |InitializeHardware|


  00000			 AREA	 |.pdata|, PDATA
|$T44816| DCD	|$LN5@Read_MMC_S|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Read_MMC_STAT| PROC

; 392  : {

  00000		 |$LN5@Read_MMC_S|
  00000		 |$M44813|

; 393  :     DWORD dwVal;
; 394  :     dwVal = INREG32(&m_pbRegisters->MMCHS_STAT);

  00000	e59f3008	 ldr         r3, [pc, #8]
  00004	e5933000	 ldr         r3, [r3]
  00008	e5930130	 ldr         r0, [r3, #0x130]

; 395  :     return dwVal;
; 396  : }

  0000c	e12fff1e	 bx          lr
  00010		 |$LN6@Read_MMC_S|
  00010		 |$LN7@Read_MMC_S|
  00010	00000000	 DCD         |m_pbRegisters|
  00014		 |$M44814|

			 ENDP  ; |Read_MMC_STAT|


  00000			 AREA	 |.pdata|, PDATA
|$T44826| DCD	|$LN5@Write_MMC_|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Write_MMC_STAT| PROC

; 399  : {

  00000		 |$LN5@Write_MMC_|
  00000		 |$M44823|

; 400  :     OUTREG32(&m_pbRegisters->MMCHS_STAT, dwVal);

  00000	e59f3008	 ldr         r3, [pc, #8]
  00004	e5933000	 ldr         r3, [r3]
  00008	e5830130	 str         r0, [r3, #0x130]

; 401  : }

  0000c	e12fff1e	 bx          lr
  00010		 |$LN6@Write_MMC_|
  00010		 |$LN7@Write_MMC_|
  00010	00000000	 DCD         |m_pbRegisters|
  00014		 |$M44824|

			 ENDP  ; |Write_MMC_STAT|


  00000			 AREA	 |.pdata|, PDATA
|$T44836| DCD	|$LN5@Set_MMC_ST|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Set_MMC_STAT| PROC

; 404  : {

  00000		 |$LN5@Set_MMC_ST|
  00000		 |$M44833|

; 405  :     SETREG32(&m_pbRegisters->MMCHS_STAT, dwVal);

  00000	e59f3010	 ldr         r3, [pc, #0x10]
  00004	e5932000	 ldr         r2, [r3]
  00008	e5923130	 ldr         r3, [r2, #0x130]
  0000c	e1833000	 orr         r3, r3, r0
  00010	e5823130	 str         r3, [r2, #0x130]

; 406  : }

  00014	e12fff1e	 bx          lr
  00018		 |$LN6@Set_MMC_ST|
  00018		 |$LN7@Set_MMC_ST|
  00018	00000000	 DCD         |m_pbRegisters|
  0001c		 |$M44834|

			 ENDP  ; |Set_MMC_STAT|

	EXPORT	|??_C@_1CI@EBIAGFPN@?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44868| DCD	|$LN26@MmcReset|
	DCD	0x40002d01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@EBIAGFPN@?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "M", 0x0, "C", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MmcReset| PROC

; 410  : {

  00000		 |$LN26@MmcReset|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M44865|

; 411  :     DWORD               dwCurrentTickCount;
; 412  :     DWORD               dwTimeout;
; 413  :     DWORD               dwCountStart;
; 414  :     BOOL                fTimeoutOverflow = FALSE;
; 415  : 
; 416  :     OALMSGX(1, (TEXT("MMC Reset\r\n")));
; 417  : 
; 418  :     dwResetBits &= (MMCHS_SYSCTL_SRA | MMCHS_SYSCTL_SRC | MMCHS_SYSCTL_SRD);
; 419  : 
; 420  :     // Reset the controller
; 421  :     SETREG32(&m_pbRegisters->MMCHS_SYSCTL, dwResetBits);

  00004	e59f40a4	 ldr         r4, [pc, #0xA4]
  00008	e2007407	 and         r7, r0, #7, 8
  0000c	e3a06000	 mov         r6, #0
  00010	e5942000	 ldr         r2, [r4]
  00014	e592312c	 ldr         r3, [r2, #0x12C]
  00018	e1833007	 orr         r3, r3, r7
  0001c	e582312c	 str         r3, [r2, #0x12C]

; 422  : 
; 423  :     // calculate timeout conditions
; 424  :     dwCountStart = OALGetTickCount();

  00020	eb000000	 bl          OALGetTickCount

; 425  : 
; 426  :     dwTimeout = dwCountStart + m_dwMaxTimeout;

  00024	e59f3080	 ldr         r3, [pc, #0x80]
  00028	e1a08000	 mov         r8, r0
  0002c	e5933000	 ldr         r3, [r3]
  00030	e0835008	 add         r5, r3, r8

; 427  :     if ( dwTimeout < dwCountStart )

  00034	e1550008	 cmp         r5, r8
  00038	2a00000a	 bcs         |$LN9@MmcReset|

; 428  :         fTimeoutOverflow = TRUE;

  0003c	e3a06001	 mov         r6, #1

; 429  : 
; 430  :     // Verify that reset has completed.
; 431  :     while ((INREG32(&m_pbRegisters->MMCHS_SYSCTL) & dwResetBits))

  00040	ea000008	 b           |$LN9@MmcReset|
  00044		 |$LL3@MmcReset|

; 432  :     {
; 433  :         // check for a timeout
; 434  :         dwCurrentTickCount = OALGetTickCount();

  00044	eb000000	 bl          OALGetTickCount

; 435  :         if ( fTimeoutOverflow ? ( dwTimeout < dwCurrentTickCount && dwCurrentTickCount < dwCountStart )
; 436  :             : ( dwTimeout < dwCurrentTickCount ) )

  00048	e3560000	 cmp         r6, #0
  0004c	0a000003	 beq         |$LN11@MmcReset|
  00050	e1550000	 cmp         r5, r0
  00054	2a000003	 bcs         |$LN9@MmcReset|
  00058	e1500008	 cmp         r0, r8
  0005c	ea000000	 b           |$LN23@MmcReset|
  00060		 |$LN11@MmcReset|
  00060	e1550000	 cmp         r5, r0
  00064		 |$LN23@MmcReset|
  00064	3a000004	 bcc         |$LN16@MmcReset|
  00068		 |$LN9@MmcReset|

; 429  : 
; 430  :     // Verify that reset has completed.
; 431  :     while ((INREG32(&m_pbRegisters->MMCHS_SYSCTL) & dwResetBits))

  00068	e5943000	 ldr         r3, [r4]
  0006c	e593312c	 ldr         r3, [r3, #0x12C]
  00070	e1130007	 tst         r3, r7
  00074	1afffff2	 bne         |$LL3@MmcReset|
  00078	ea000004	 b           |$LN21@MmcReset|
  0007c		 |$LN16@MmcReset|

; 437  :         {
; 438  :             OALMSG(OAL_ERROR, (TEXT("MMC Reset timeout\r\n")));

  0007c	e59f3024	 ldr         r3, [pc, #0x24]
  00080	e5933440	 ldr         r3, [r3, #0x440]
  00084	e3130001	 tst         r3, #1
  00088	159f0014	 ldrne       r0, [pc, #0x14]
  0008c	1b000000	 blne        NKDbgPrintfW
  00090		 |$LN21@MmcReset|
  00090	e5943000	 ldr         r3, [r4]

; 439  :             break;
; 440  :         }
; 441  :     }
; 442  :     // enable autoidle, disable wakeup, enable smart-idle, ClockActivity (interface and functional clocks may be switched off)
; 443  :     OUTREG32(&m_pbRegisters->MMCHS_SYSCONFIG, MMCHS_SYSCONFIG_AUTOIDLE | MMCHS_SYSCONFIG_SIDLEMODE(SIDLE_SMART));

  00094	e3a02011	 mov         r2, #0x11
  00098	e5832010	 str         r2, [r3, #0x10]

; 444  : }

  0009c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN27@MmcReset|
  000a4		 |$LN28@MmcReset|
  000a4	00000000	 DCD         |??_C@_1CI@EBIAGFPN@?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  000a8		 |$LN29@MmcReset|
  000a8	00000000	 DCD         |dpCurSettings|
  000ac		 |$LN30@MmcReset|
  000ac	00000000	 DCD         |m_dwMaxTimeout|
  000b0		 |$LN31@MmcReset|
  000b0	00000000	 DCD         |m_pbRegisters|
  000b4		 |$M44866|

			 ENDP  ; |MmcReset|


  00000			 AREA	 |.pdata|, PDATA
|$T44880| DCD	|$LN5@EnableSDHC|
	DCD	0x40000900
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EnableSDHCInterrupts| PROC

; 470  : {

  00000		 |$LN5@EnableSDHC|
  00000		 |$M44877|

; 471  :     OUTREG32(&m_pbRegisters->MMCHS_ISE, MMC_INT_EN_MASK);

  00000	e59f2018	 ldr         r2, [pc, #0x18]
  00004	e3a03833	 mov         r3, #0x33, 16
  00008	e3831033	 orr         r1, r3, #0x33
  0000c	e5923000	 ldr         r3, [r2]
  00010	e5831138	 str         r1, [r3, #0x138]

; 472  :     OUTREG32(&m_pbRegisters->MMCHS_IE,  MMC_INT_EN_MASK);

  00014	e5923000	 ldr         r3, [r2]
  00018	e5831134	 str         r1, [r3, #0x134]

; 473  : }

  0001c	e12fff1e	 bx          lr
  00020		 |$LN6@EnableSDHC|
  00020		 |$LN7@EnableSDHC|
  00020	00000000	 DCD         |m_pbRegisters|
  00024		 |$M44878|

			 ENDP  ; |EnableSDHCInterrupts|

	EXPORT	|SdhcSetClockRate|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T44906| DCD	|$LN21@SdhcSetClo|
	DCD	0x40004901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SdhcSetClockRate| PROC

; 484  : {

  00000		 |$LN21@SdhcSetClo|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M44903|
  00004	e1a05000	 mov         r5, r0

; 485  :     DWORD dwTimeout = 500;
; 486  :     INT32 dwRegValue;
; 487  :     DWORD dwDiv;
; 488  :     DWORD dwClockRate = *pdwRate;
; 489  : 
; 490  :     OALMSGX(OAL_FUNC, (TEXT("SdhcSetClockRate %d\r\n"), *pdwRate));
; 491  : 
; 492  :     if (dwClockRate > m_dwMaxClockRate)

  00008	e59f3110	 ldr         r3, [pc, #0x110]
  0000c	e5952000	 ldr         r2, [r5]
  00010	e5933000	 ldr         r3, [r3]
  00014	e1520003	 cmp         r2, r3

; 493  :         dwClockRate = m_dwMaxClockRate;

  00018	81a02003	 movhi       r2, r3

; 494  : 
; 495  :     // calculate the register value
; 496  :     dwDiv = (DWORD)((MMCSD_CLOCK_INPUT + dwClockRate - 1) / dwClockRate);

  0001c	e59f30f8	 ldr         r3, [pc, #0xF8]
  00020	e1a00002	 mov         r0, r2
  00024	e0821003	 add         r1, r2, r3
  00028	eb000000	 bl          __rt_udiv

; 497  : 
; 498  :     //OALMSGX(OAL_INFO, (TEXT("actual wDiv = 0x%x  requested:0x%x"), dwDiv, *pdwRate));
; 499  :     // Only 10 bits available for the divider, so mmc base clock / 1024 is minimum.
; 500  :     if ( dwDiv > 0x03FF )

  0002c	e3a03c03	 mov         r3, #3, 24

; 501  :         dwDiv = 0x03FF;
; 502  : 
; 503  :     //OALMSGX(OAL_INFO, (TEXT("dwDiv = 0x%x 0x%x"), dwDiv, *pdwRate));
; 504  : 
; 505  :     // Program the divisor, but leave the rest of the register alone.
; 506  :     dwRegValue = INREG32(&m_pbRegisters->MMCHS_SYSCTL);

  00030	e59f60e0	 ldr         r6, [pc, #0xE0]
  00034	e38330ff	 orr         r3, r3, #0xFF
  00038	e1a04000	 mov         r4, r0
  0003c	e1540003	 cmp         r4, r3

; 507  : 
; 508  :     dwRegValue = (dwRegValue & ~MMCHS_SYSCTL_CLKD_MASK) | MMCHS_SYSCTL_CLKD(dwDiv);
; 509  :     dwRegValue = (dwRegValue & ~MMCHS_SYSCTL_DTO_MASK) | MMCHS_SYSCTL_DTO(0x0e); // DTO
; 510  :     dwRegValue &= ~MMCHS_SYSCTL_CEN;
; 511  :     dwRegValue &= ~MMCHS_SYSCTL_ICE;
; 512  : 
; 513  :     CLRREG32(&m_pbRegisters->MMCHS_SYSCTL, MMCHS_SYSCTL_CEN);

  00040	e596e000	 ldr         lr, [r6]
  00044	81a04003	 movhi       r4, r3
  00048	e3e03cff	 mvn         r3, #0xFF, 24

; 514  : 
; 515  :     OUTREG32(&m_pbRegisters->MMCHS_SYSCTL, dwRegValue);

  0004c	e22310c0	 eor         r1, r3, #0xC0
  00050	e59e312c	 ldr         r3, [lr, #0x12C]
  00054	e59e212c	 ldr         r2, [lr, #0x12C]
  00058	e3e00801	 mvn         r0, #1, 16
  0005c	e0031001	 and         r1, r3, r1
  00060	e3c23004	 bic         r3, r2, #4
  00064	e58e312c	 str         r3, [lr, #0x12C]
  00068	e1813304	 orr         r3, r1, r4, lsl #6
  0006c	e2200005	 eor         r0, r0, #5
  00070	e5962000	 ldr         r2, [r6]
  00074	e0033000	 and         r3, r3, r0
  00078	e383380e	 orr         r3, r3, #0xE, 16
  0007c	e582312c	 str         r3, [r2, #0x12C]

; 516  : 
; 517  :     SETREG32(&m_pbRegisters->MMCHS_SYSCTL, MMCHS_SYSCTL_ICE); // enable internal clock

  00080	e5962000	 ldr         r2, [r6]

; 518  : 
; 519  :     dwTimeout = 500;

  00084	e3a01f7d	 mov         r1, #0x7D, 30
  00088	e592312c	 ldr         r3, [r2, #0x12C]
  0008c	e3833001	 orr         r3, r3, #1
  00090	e582312c	 str         r3, [r2, #0x12C]

; 520  :     while (((INREG32(&m_pbRegisters->MMCHS_SYSCTL) & MMCHS_SYSCTL_ICS) != MMCHS_SYSCTL_ICS) && (dwTimeout>0))

  00094	e5962000	 ldr         r2, [r6]
  00098	ea000002	 b           |$LN16@SdhcSetClo|
  0009c		 |$LL4@SdhcSetClo|
  0009c	e3510000	 cmp         r1, #0
  000a0	0a000004	 beq         |$LN13@SdhcSetClo|

; 521  :     {
; 522  :         dwTimeout--;

  000a4	e2411001	 sub         r1, r1, #1
  000a8		 |$LN16@SdhcSetClo|

; 520  :     while (((INREG32(&m_pbRegisters->MMCHS_SYSCTL) & MMCHS_SYSCTL_ICS) != MMCHS_SYSCTL_ICS) && (dwTimeout>0))

  000a8	e592312c	 ldr         r3, [r2, #0x12C]

; 521  :     {
; 522  :         dwTimeout--;

  000ac	e2033002	 and         r3, r3, #2
  000b0	e3530002	 cmp         r3, #2
  000b4	1afffff8	 bne         |$LL4@SdhcSetClo|
  000b8		 |$LN13@SdhcSetClo|

; 523  :     }
; 524  : 
; 525  :     SETREG32(&m_pbRegisters->MMCHS_SYSCTL, MMCHS_SYSCTL_CEN);

  000b8	e592312c	 ldr         r3, [r2, #0x12C]

; 526  :     SETREG32(&m_pbRegisters->MMCHS_HCTL, MMCHS_HCTL_SDBP); // power up the card
; 527  : 
; 528  :     dwTimeout = 500;

  000bc	e3a01f7d	 mov         r1, #0x7D, 30
  000c0	e3833004	 orr         r3, r3, #4
  000c4	e582312c	 str         r3, [r2, #0x12C]
  000c8	e5962000	 ldr         r2, [r6]
  000cc	e5923128	 ldr         r3, [r2, #0x128]
  000d0	e3833c01	 orr         r3, r3, #1, 24
  000d4	e5823128	 str         r3, [r2, #0x128]

; 529  :     while (((INREG32(&m_pbRegisters->MMCHS_SYSCTL) & MMCHS_SYSCTL_CEN) != MMCHS_SYSCTL_CEN) && (dwTimeout>0))

  000d8	e5962000	 ldr         r2, [r6]
  000dc	ea000002	 b           |$LN18@SdhcSetClo|
  000e0		 |$LL2@SdhcSetClo|
  000e0	e3510000	 cmp         r1, #0
  000e4	0a000004	 beq         |$LN14@SdhcSetClo|

; 530  :     {
; 531  :         dwTimeout--;

  000e8	e2411001	 sub         r1, r1, #1
  000ec		 |$LN18@SdhcSetClo|

; 529  :     while (((INREG32(&m_pbRegisters->MMCHS_SYSCTL) & MMCHS_SYSCTL_CEN) != MMCHS_SYSCTL_CEN) && (dwTimeout>0))

  000ec	e592312c	 ldr         r3, [r2, #0x12C]

; 530  :     {
; 531  :         dwTimeout--;

  000f0	e2033004	 and         r3, r3, #4
  000f4	e3530004	 cmp         r3, #4
  000f8	1afffff8	 bne         |$LL2@SdhcSetClo|
  000fc		 |$LN14@SdhcSetClo|

; 532  :     }
; 533  : 
; 534  :     *pdwRate = MMCSD_CLOCK_INPUT / dwDiv;

  000fc	e59f1010	 ldr         r1, [pc, #0x10]
  00100	e1a00004	 mov         r0, r4
  00104	eb000000	 bl          __rt_udiv
  00108	e5850000	 str         r0, [r5]

; 535  :     OALMSGX(OAL_FUNC, (TEXT("SDHC: clock = %d\r\n"), *pdwRate));
; 536  : }

  0010c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00110	e12fff1e	 bx          lr
  00114		 |$LN22@SdhcSetClo|
  00114		 |$LN23@SdhcSetClo|
  00114	05b8d800	 DCD         0x5b8d800
  00118		 |$LN24@SdhcSetClo|
  00118	00000000	 DCD         |m_pbRegisters|
  0011c		 |$LN25@SdhcSetClo|
  0011c	05b8d7ff	 DCD         0x5b8d7ff
  00120		 |$LN26@SdhcSetClo|
  00120	00000000	 DCD         |m_dwMaxClockRate|
  00124		 |$M44904|

			 ENDP  ; |SdhcSetClockRate|

	EXPORT	|??_C@_1CI@DLLABNKH@?$AAS?$AAD?$AAH?$AAC?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAs?$AAl?$AAo?$AAt?$AA?5?$AAn?$AAu?$AAm?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44924| DCD	|$LN23@SetSDVSVol|
	DCD	0x40003101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@DLLABNKH@?$AAS?$AAD?$AAH?$AAC?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAs?$AAl?$AAo?$AAt?$AA?5?$AAn?$AAu?$AAm?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, " ", 0x0, "b", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "s", 0x0, "l", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "n", 0x0, "u", 0x0, "m", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetSDVSVoltage| PROC

; 539  : {

  00000		 |$LN23@SetSDVSVol|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M44921|

; 540  :     UINT32 val1, val2;
; 541  : 
; 542  :     if ( m_dwSlot == MMCSLOT_1 )

  00004	e59f30b4	 ldr         r3, [pc, #0xB4]
  00008	e5933000	 ldr         r3, [r3]
  0000c	e3530001	 cmp         r3, #1
  00010	1a000012	 bne         |$LN16@SetSDVSVol|

; 543  :     {
; 544  :         if (m_dwCPURev == 1) // ES 1.0

  00014	e59f309c	 ldr         r3, [pc, #0x9C]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e3530001	 cmp         r3, #1

; 545  :         {
; 546  :           val1 = MMCHS_CAPA_VS30;
; 547  :           val2 = MMCHS_HCTL_SDVS_3V0;

  00020	0a000018	 beq         |$LN11@SetSDVSVol|

; 548  :         }
; 549  :         else if (m_dwCPURev == 2) // ES 2.0

  00024	e3530002	 cmp         r3, #2

; 550  :         {
; 551  :           val1 = MMCHS_CAPA_VS18;
; 552  :           val2 = MMCHS_HCTL_SDVS_1V8;

  00028	1a000016	 bne         |$LN11@SetSDVSVol|
  0002c		 |$LN3@SetSDVSVol|

; 596  :         {
; 597  :           val1 = MMCHS_CAPA_VS18;
; 598  :           val2 = MMCHS_HCTL_SDVS_1V8;

  0002c	e3a0ec0a	 mov         lr, #0xA, 24
  00030	e3a00301	 mov         r0, #1, 6
  00034		 |$LN2@SetSDVSVol|

; 599  :         }
; 600  :         SETREG32(&m_pbRegisters->MMCHS_CAPA, val1);

  00034	e59f1080	 ldr         r1, [pc, #0x80]
  00038	e5912000	 ldr         r2, [r1]
  0003c	e5923140	 ldr         r3, [r2, #0x140]
  00040	e1833000	 orr         r3, r3, r0
  00044	e5823140	 str         r3, [r2, #0x140]

; 601  :         SETREG32(&m_pbRegisters->MMCHS_HCTL, val2);

  00048	e5912000	 ldr         r2, [r1]
  0004c	e5923128	 ldr         r3, [r2, #0x128]
  00050	e183300e	 orr         r3, r3, lr
  00054	e5823128	 str         r3, [r2, #0x128]

; 606  :         return;
; 607  :     }
; 608  : }

  00058	e49de004	 ldr         lr, [sp], #4
  0005c	e12fff1e	 bx          lr
  00060		 |$LN16@SetSDVSVol|

; 553  :         }
; 554  :         else if (m_dwCPURev == 3) // ES 2.1
; 555  :         {
; 556  : #ifdef MMCHS1_LOW_VOLTAGE
; 557  :           val1 = MMCHS_CAPA_VS18;
; 558  :           val2 = MMCHS_HCTL_SDVS_1V8;
; 559  : #else
; 560  :           val1 = MMCHS_CAPA_VS30;
; 561  :           val2 = MMCHS_HCTL_SDVS_3V0;
; 562  : #endif
; 563  :         }
; 564  :         else
; 565  :         {
; 566  :           val1 = MMCHS_CAPA_VS30;
; 567  :           val2 = MMCHS_HCTL_SDVS_3V0;
; 568  :         }
; 569  : 
; 570  :         SETREG32(&m_pbRegisters->MMCHS_CAPA, val1);
; 571  :         SETREG32(&m_pbRegisters->MMCHS_HCTL, val2);
; 572  :     }
; 573  :     else if (m_dwSlot == MMCSLOT_2)

  00060	e3530002	 cmp         r3, #2
  00064	1a00000a	 bne         |$LN8@SetSDVSVol|

; 574  :     {
; 575  :         if (m_dwCPURev == 1) // ES 1.0

  00068	e59f3048	 ldr         r3, [pc, #0x48]
  0006c	e5933000	 ldr         r3, [r3]
  00070	e3530001	 cmp         r3, #1

; 576  :         {
; 577  :           val1 = MMCHS_CAPA_VS18;
; 578  :           val2 = MMCHS_HCTL_SDVS_1V8;

  00074	0affffec	 beq         |$LN3@SetSDVSVol|

; 579  :         }
; 580  :         else if (m_dwCPURev == 2) // ES 2.0

  00078	e3530002	 cmp         r3, #2

; 581  :         {
; 582  :           val1 = MMCHS_CAPA_VS18;
; 583  :           val2 = MMCHS_HCTL_SDVS_1V8;

  0007c	0affffea	 beq         |$LN3@SetSDVSVol|

; 584  :         }
; 585  :         else if (m_dwCPURev == 3) // ES 2.1

  00080	e3530003	 cmp         r3, #3
  00084	1affffe8	 bne         |$LN3@SetSDVSVol|
  00088		 |$LN11@SetSDVSVol|

; 586  :         {
; 587  : #ifdef MMCHS2_LOW_VOLTAGE
; 588  :           val1 = MMCHS_CAPA_VS18;
; 589  :           val2 = MMCHS_HCTL_SDVS_1V8;
; 590  : #else
; 591  :           val1 = MMCHS_CAPA_VS30;

  00088	e3a00402	 mov         r0, #2, 8

; 592  :           val2 = MMCHS_HCTL_SDVS_3V0;

  0008c	e3a0eb03	 mov         lr, #3, 22

; 593  : #endif
; 594  :         }
; 595  :         else

  00090	eaffffe7	 b           |$LN2@SetSDVSVol|
  00094		 |$LN8@SetSDVSVol|

; 602  :     }
; 603  :     else
; 604  :     {
; 605  :         OALMSG(OAL_ERROR, (L"SDHC bad slot num\r\n"));

  00094	e59f3018	 ldr         r3, [pc, #0x18]
  00098	e5933440	 ldr         r3, [r3, #0x440]
  0009c	e3130001	 tst         r3, #1
  000a0	159f0008	 ldrne       r0, [pc, #8]
  000a4	1b000000	 blne        NKDbgPrintfW

; 606  :         return;
; 607  :     }
; 608  : }

  000a8	e49de004	 ldr         lr, [sp], #4
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN24@SetSDVSVol|
  000b0		 |$LN25@SetSDVSVol|
  000b0	00000000	 DCD         |??_C@_1CI@DLLABNKH@?$AAS?$AAD?$AAH?$AAC?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAs?$AAl?$AAo?$AAt?$AA?5?$AAn?$AAu?$AAm?$AA?$AN?$AA?6?$AA?$AA@|
  000b4		 |$LN26@SetSDVSVol|
  000b4	00000000	 DCD         |dpCurSettings|
  000b8		 |$LN27@SetSDVSVol|
  000b8	00000000	 DCD         |m_dwCPURev|
  000bc		 |$LN28@SetSDVSVol|
  000bc	00000000	 DCD         |m_pbRegisters|
  000c0		 |$LN29@SetSDVSVol|
  000c0	00000000	 DCD         |m_dwSlot|
  000c4		 |$M44922|

			 ENDP  ; |SetSDVSVoltage|


  00000			 AREA	 |.pdata|, PDATA
|$T44940| DCD	|$LN6@UpdateSyst|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UpdateSystemClock| PROC

; 619  : {

  00000		 |$LN6@UpdateSyst|
  00000		 |$M44937|
  00000	e3500000	 cmp         r0, #0

; 620  :     //OALMSGX(OAL_FUNC, (L"+UpdateSystemClock()\r\n"));
; 621  :     if (enable)
; 622  :     {
; 623  :         // enable autoidle, disable wakeup, enable smart-idle, ClockActivity (interface and functional clocks may be switched off)
; 624  :         OUTREG32(&m_pbRegisters->MMCHS_SYSCONFIG, MMCHS_SYSCONFIG_AUTOIDLE | MMCHS_SYSCONFIG_SIDLEMODE(SIDLE_IGNORE));

  00004	159f3010	 ldrne       r3, [pc, #0x10]
  00008	13a02009	 movne       r2, #9

; 625  :     }
; 626  : 
; 627  :     return TRUE;

  0000c	e3a00001	 mov         r0, #1
  00010	15933000	 ldrne       r3, [r3]
  00014	15832010	 strne       r2, [r3, #0x10]

; 628  : }

  00018	e12fff1e	 bx          lr
  0001c		 |$LN7@UpdateSyst|
  0001c		 |$LN8@UpdateSyst|
  0001c	00000000	 DCD         |m_pbRegisters|
  00020		 |$M44938|

			 ENDP  ; |UpdateSystemClock|


  00000			 AREA	 |.pdata|, PDATA
|$T44965| DCD	|$LN17@SendCmdNoR|
	DCD	0x40002801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SendCmdNoResp| PROC

; 632  : {

  00000		 |$LN17@SendCmdNoR|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M44962|

; 633  :     DWORD MMC_CMD;
; 634  :     DWORD dwVal;
; 635  :     DWORD dwTimeout;
; 636  : 
; 637  :     OUTREG32(&m_pbRegisters->MMCHS_STAT, 0xFFFFFFFF);

  00004	e59f4090	 ldr         r4, [pc, #0x90]
  00008	e3e0e000	 mvn         lr, #0
  0000c	e3a02b4e	 mov         r2, #0x4E, 22
  00010	e5943000	 ldr         r3, [r4]

; 638  :     dwTimeout = 80000;

  00014	e3822080	 orr         r2, r2, #0x80
  00018	e583e130	 str         lr, [r3, #0x130]

; 639  :     while (((INREG32(&m_pbRegisters->MMCHS_PSTATE) & MMCHS_PSTAT_CMDI)) && (dwTimeout>0))

  0001c	e594e000	 ldr         lr, [r4]
  00020	ea000002	 b           |$LN14@SendCmdNoR|
  00024		 |$LL5@SendCmdNoR|
  00024	e3520000	 cmp         r2, #0
  00028	0a000003	 beq         |$LN12@SendCmdNoR|

; 640  :     {
; 641  :         dwTimeout--;

  0002c	e2422001	 sub         r2, r2, #1
  00030		 |$LN14@SendCmdNoR|

; 639  :     while (((INREG32(&m_pbRegisters->MMCHS_PSTATE) & MMCHS_PSTAT_CMDI)) && (dwTimeout>0))

  00030	e59e3124	 ldr         r3, [lr, #0x124]

; 640  :     {
; 641  :         dwTimeout--;

  00034	e3130001	 tst         r3, #1
  00038	1afffff9	 bne         |$LL5@SendCmdNoR|
  0003c		 |$LN12@SendCmdNoR|

; 642  :     }
; 643  : 
; 644  :     MMC_CMD = MMCHS_INDX(cmd);
; 645  :     MMC_CMD |= gwaCMD[cmd].flags;

  0003c	e59f3054	 ldr         r3, [pc, #0x54]

; 646  : 
; 647  :     // Program the argument into the argument registers
; 648  :     OUTREG32(&m_pbRegisters->MMCHS_ARG, arg);

  00040	e3a05c13	 mov         r5, #0x13, 24
  00044	e0833180	 add         r3, r3, r0, lsl #3
  00048	e5933004	 ldr         r3, [r3, #4]
  0004c	e58e1108	 str         r1, [lr, #0x108]

; 649  :     // Issue the command.
; 650  :     OUTREG32(&m_pbRegisters->MMCHS_CMD, MMC_CMD);

  00050	e5942000	 ldr         r2, [r4]
  00054	e1833c00	 orr         r3, r3, r0, lsl #24

; 651  : 
; 652  :     dwTimeout = 5000;

  00058	e3851088	 orr         r1, r5, #0x88
  0005c	e582310c	 str         r3, [r2, #0x10C]
  00060	e3a03211	 mov         r3, #0x11, 4
  00064	e5942000	 ldr         r2, [r4]
  00068	e3830801	 orr         r0, r3, #1, 16
  0006c		 |$LL3@SendCmdNoR|

; 654  :     {
; 655  :         dwTimeout --;
; 656  :         dwVal = INREG32(&m_pbRegisters->MMCHS_STAT);

  0006c	e5923130	 ldr         r3, [r2, #0x130]
  00070	e2411001	 sub         r1, r1, #1

; 657  :         if (dwVal & (MMCHS_STAT_CC | MMCHS_STAT_CTO | MMCHS_STAT_CERR)) 

  00074	e1130000	 tst         r3, r0
  00078	1a000001	 bne         |$LN10@SendCmdNoR|

; 653  :     while (dwTimeout > 0)

  0007c	e3510000	 cmp         r1, #0
  00080	1afffff9	 bne         |$LL3@SendCmdNoR|
  00084		 |$LN10@SendCmdNoR|

; 658  :             break;
; 659  :     }
; 660  : 
; 661  :     dwVal = INREG32(&m_pbRegisters->MMCHS_STAT);

  00084	e5923130	 ldr         r3, [r2, #0x130]

; 662  :     OUTREG32(&m_pbRegisters->MMCHS_STAT, dwVal);
; 663  :     // always return 0 if no response needed
; 664  :     return SD_API_STATUS_SUCCESS;

  00088	e3a00000	 mov         r0, #0
  0008c	e5823130	 str         r3, [r2, #0x130]

; 665  : }

  00090	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$LN18@SendCmdNoR|
  00098		 |$LN19@SendCmdNoR|
  00098	00000000	 DCD         |gwaCMD|
  0009c		 |$LN20@SendCmdNoR|
  0009c	00000000	 DCD         |m_pbRegisters|
  000a0		 |$M44963|

			 ENDP  ; |SendCmdNoResp|


  00000			 AREA	 |.pdata|, PDATA
|$T44999| DCD	|$LN24@SendInitSe|
	DCD	0x40003301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SendInitSequence| PROC

; 669  : {

  00000		 |$LN24@SendInitSe|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M44996|

; 670  :     DWORD dwCount;
; 671  : 
; 672  :     OUTREG32(&m_pbRegisters->MMCHS_IE,  0xFFFFFEFF);

  00004	e59f00bc	 ldr         r0, [pc, #0xBC]
  00008	e3e02c01	 mvn         r2, #1, 24
  0000c	e3a0e00a	 mov         lr, #0xA
  00010	e5903000	 ldr         r3, [r0]
  00014	e3e05000	 mvn         r5, #0

; 673  :     SETREG32(&m_pbRegisters->MMCHS_CON, MMCHS_CON_INIT);

  00018	e3a06b4e	 mov         r6, #0x4E, 22
  0001c	e5832134	 str         r2, [r3, #0x134]
  00020	e5902000	 ldr         r2, [r0]
  00024	e3a07000	 mov         r7, #0
  00028	e3a08c13	 mov         r8, #0x13, 24
  0002c	e592302c	 ldr         r3, [r2, #0x2C]
  00030	e3833002	 orr         r3, r3, #2
  00034	e582302c	 str         r3, [r2, #0x2C]
  00038	e3a03211	 mov         r3, #0x11, 4
  0003c	e3834801	 orr         r4, r3, #1, 16
  00040		 |$LL3@SendInitSe|

; 674  : 
; 675  :     for (dwCount = 0; dwCount < 10; dwCount ++)
; 676  :     {
; 677  :         SendCmdNoResp(SD_CMD_GO_IDLE_STATE, 0xFFFFFFFF);

  00040	e5903000	 ldr         r3, [r0]
  00044	e3862080	 orr         r2, r6, #0x80
  00048	e5835130	 str         r5, [r3, #0x130]
  0004c	e5901000	 ldr         r1, [r0]
  00050	ea000002	 b           |$LN21@SendInitSe|
  00054		 |$LL10@SendInitSe|
  00054	e3520000	 cmp         r2, #0
  00058	0a000003	 beq         |$LN19@SendInitSe|
  0005c	e2422001	 sub         r2, r2, #1
  00060		 |$LN21@SendInitSe|
  00060	e5913124	 ldr         r3, [r1, #0x124]
  00064	e3130001	 tst         r3, #1
  00068	1afffff9	 bne         |$LL10@SendInitSe|
  0006c		 |$LN19@SendInitSe|
  0006c	e5815108	 str         r5, [r1, #0x108]
  00070	e5903000	 ldr         r3, [r0]
  00074	e3882088	 orr         r2, r8, #0x88
  00078	e583710c	 str         r7, [r3, #0x10C]
  0007c	e5901000	 ldr         r1, [r0]
  00080		 |$LL8@SendInitSe|
  00080	e5913130	 ldr         r3, [r1, #0x130]
  00084	e2422001	 sub         r2, r2, #1
  00088	e1130004	 tst         r3, r4
  0008c	1a000001	 bne         |$LN16@SendInitSe|
  00090	e3520000	 cmp         r2, #0
  00094	1afffff9	 bne         |$LL8@SendInitSe|
  00098		 |$LN16@SendInitSe|
  00098	e5913130	 ldr         r3, [r1, #0x130]
  0009c	e25ee001	 subs        lr, lr, #1
  000a0	e5813130	 str         r3, [r1, #0x130]
  000a4	1affffe5	 bne         |$LL3@SendInitSe|

; 678  :     }
; 679  :     OUTREG32(&m_pbRegisters->MMCHS_STAT, 0xFFFFFFFF);

  000a8	e5903000	 ldr         r3, [r0]

; 680  :     CLRREG32(&m_pbRegisters->MMCHS_CON, MMCHS_CON_INIT);

  000ac	e5835130	 str         r5, [r3, #0x130]
  000b0	e5902000	 ldr         r2, [r0]
  000b4	e592302c	 ldr         r3, [r2, #0x2C]
  000b8	e3c33002	 bic         r3, r3, #2
  000bc	e582302c	 str         r3, [r2, #0x2C]

; 681  : }

  000c0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000c4	e12fff1e	 bx          lr
  000c8		 |$LN25@SendInitSe|
  000c8		 |$LN26@SendInitSe|
  000c8	00000000	 DCD         |m_pbRegisters|
  000cc		 |$M44997|

			 ENDP  ; |SendInitSequence|


  00000			 AREA	 |.pdata|, PDATA
|$T45030| DCD	|$LN31@SendComman|
	DCD	0x40005001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SendCommand| PROC

; 685  : {

  00000		 |$LN31@SendComman|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M45027|

; 686  :     DWORD MMC_CMD;
; 687  :     DWORD dwTimeout;
; 688  :     DWORD Cmd = pRequest->CommandCode;
; 689  :     DWORD Arg = pRequest->CommandArgument;
; 690  :     UINT16 respType = pRequest->CommandResponse.ResponseType;

  00004	e590301c	 ldr         r3, [r0, #0x1C]
  00008	e5d0e014	 ldrb        lr, [r0, #0x14]

; 691  :     DWORD dwRegVal;
; 692  : 
; 693  :     m_TransferClass = pRequest->TransferClass;

  0000c	e5902010	 ldr         r2, [r0, #0x10]
  00010	e59f1124	 ldr         r1, [pc, #0x124]
  00014	e5907018	 ldr         r7, [r0, #0x18]
  00018	e1a04803	 mov         r4, r3, lsl #16
  0001c	e1a04824	 mov         r4, r4, lsr #16
  00020	e1c120b0	 strh        r2, [r1]

; 694  : 
; 695  :     OALMSGX(OAL_IO, (TEXT("SendCommand() - Cmd = 0x%x Arg = 0x%x respType = 0x%x m_TransferClass = 0x%x\r\n"),
; 696  :         Cmd, Arg, respType, m_TransferClass));
; 697  : 
; 698  :     if ((Cmd == SD_CMD_IO_RW_EXTENDED) || (Cmd == SD_CMD_IO_RW_DIRECT))

  00024	e35e0035	 cmp         lr, #0x35
  00028	0a000007	 beq         |$LN14@SendComman|
  0002c	e35e0034	 cmp         lr, #0x34
  00030	0a000005	 beq         |$LN14@SendComman|

; 701  :     } 
; 702  :     else if ((Cmd == SD_CMD_MMC_SEND_OPCOND) || (Cmd == SD_CMD_GO_IDLE_STATE))

  00034	e35e0001	 cmp         lr, #1
  00038	0a000001	 beq         |$LN11@SendComman|
  0003c	e35e0000	 cmp         lr, #0
  00040	1a000004	 bne         |$LN12@SendComman|
  00044		 |$LN11@SendComman|

; 703  :     {
; 704  :         m_dwSDIOCard = 0;

  00044	e3a02000	 mov         r2, #0
  00048	ea000000	 b           |$LN26@SendComman|
  0004c		 |$LN14@SendComman|

; 699  :     {
; 700  :         m_dwSDIOCard = 1;

  0004c	e3a02001	 mov         r2, #1
  00050		 |$LN26@SendComman|
  00050	e59f30e0	 ldr         r3, [pc, #0xE0]
  00054	e5832000	 str         r2, [r3]
  00058		 |$LN12@SendComman|

; 705  :     }
; 706  : 
; 707  :     if ( m_TransferClass == SD_READ || m_TransferClass == SD_WRITE )
; 708  :     {
; 709  :         OALMSGX(OAL_IO, (TEXT("SendCommand RW (Cmd=0x%X, Arg=0x%x, RespType=0x%X, Data=0x%x <%dx%d>) starts\r\n"),
; 710  :             Cmd, Arg, respType, (m_TransferClass==SD_COMMAND)?FALSE:TRUE, pRequest->NumBlocks, pRequest->BlockSize ) );
; 711  :     }
; 712  :     else
; 713  :     {
; 714  :         OALMSGX(OAL_IO, (TEXT("SendCommand (Cmd=0x%X, Arg=0x%x, RespType=0x%X, Data=0x%x) starts\r\n"),
; 715  :             Cmd, Arg, respType, (m_TransferClass==SD_COMMAND)?FALSE:TRUE) );
; 716  :     }
; 717  : 
; 718  :     // turn the clock on
; 719  :     UpdateSystemClock(TRUE);

  00058	e59f60d4	 ldr         r6, [pc, #0xD4]
  0005c	e3a05009	 mov         r5, #9

; 720  : 
; 721  :     Write_MMC_STAT(0xFFFFFFFF);

  00060	e3e08000	 mvn         r8, #0
  00064	e5963000	 ldr         r3, [r6]

; 722  :     dwTimeout = 2000;

  00068	e3a02e7d	 mov         r2, #0x7D, 28
  0006c	e5835010	 str         r5, [r3, #0x10]
  00070	e5963000	 ldr         r3, [r6]
  00074	e5838130	 str         r8, [r3, #0x130]

; 723  :     while (((INREG32(&m_pbRegisters->MMCHS_PSTATE) & MMCHS_PSTAT_CMDI)) && (dwTimeout>0))

  00078	e5965000	 ldr         r5, [r6]
  0007c	ea000002	 b           |$LN28@SendComman|
  00080		 |$LL7@SendComman|
  00080	e3520000	 cmp         r2, #0
  00084	0a000003	 beq         |$LN25@SendComman|

; 724  :     {
; 725  :         dwTimeout--;

  00088	e2422001	 sub         r2, r2, #1
  0008c		 |$LN28@SendComman|

; 723  :     while (((INREG32(&m_pbRegisters->MMCHS_PSTATE) & MMCHS_PSTAT_CMDI)) && (dwTimeout>0))

  0008c	e5953124	 ldr         r3, [r5, #0x124]

; 724  :     {
; 725  :         dwTimeout--;

  00090	e3130001	 tst         r3, #1
  00094	1afffff9	 bne         |$LL7@SendComman|
  00098		 |$LN25@SendComman|

; 726  :     }
; 727  :     MMC_CMD = MMCHS_INDX(Cmd);
; 728  : 
; 729  :     MMC_CMD |= gwaCMD[Cmd].flags;

  00098	e59f3090	 ldr         r3, [pc, #0x90]

; 730  :     if ((Cmd == SD_CMD_SELECT_DESELECT_CARD) && (respType == NoResponse))

  0009c	e35e0007	 cmp         lr, #7
  000a0	03540000	 cmpeq       r4, #0
  000a4	e083318e	 add         r3, r3, lr, lsl #3
  000a8	e5933004	 ldr         r3, [r3, #4]
  000ac	e1833c0e	 orr         r3, r3, lr, lsl #24

; 731  :     {
; 732  :         MMC_CMD &= ~MMCHS_RSP_MASK;

  000b0	03c33803	 biceq       r3, r3, #3, 16

; 733  :         MMC_CMD |= MMCHS_RSP_NONE;
; 734  :     }
; 735  : 
; 736  :     MMC_CMD &= ~MMCHS_CMD_DE;

  000b4	e3c34001	 bic         r4, r3, #1

; 737  : 
; 738  :     if (Cmd == SD_CMD_IO_RW_EXTENDED)

  000b8	e35e0035	 cmp         lr, #0x35
  000bc	1a000002	 bne         |$LN3@SendComman|

; 739  :     {
; 740  :         if (pRequest->NumBlocks > 1)

  000c0	e590303c	 ldr         r3, [r0, #0x3C]
  000c4	e3530001	 cmp         r3, #1

; 741  :         {
; 742  :            MMC_CMD |= MMCHS_CMD_MSBS | MMCHS_CMD_BCE;

  000c8	83844022	 orrhi       r4, r4, #0x22
  000cc		 |$LN3@SendComman|

; 743  :         }
; 744  :     }
; 745  : 
; 746  :     if ( m_TransferClass == SD_READ )

  000cc	e1d130b0	 ldrh        r3, [r1]
  000d0	e3530000	 cmp         r3, #0
  000d4	1a000008	 bne         |$LN2@SendComman|

; 747  :     {
; 748  :         MMC_CMD |= MMCHS_CMD_DDIR;
; 749  : 
; 750  :         dwRegVal = (DWORD)(pRequest->BlockSize & 0xFFFF);

  000d8	e5901040	 ldr         r1, [r0, #0x40]
  000dc	e3a03cff	 mov         r3, #0xFF, 24

; 751  :         dwRegVal += ((DWORD)(pRequest->NumBlocks & 0xFFFF)) << 16;

  000e0	e590203c	 ldr         r2, [r0, #0x3C]
  000e4	e38330ff	 orr         r3, r3, #0xFF
  000e8	e0013003	 and         r3, r1, r3

; 752  :         OALMSGX(OAL_IO, (TEXT("SendCommand() - BlockSize = %d, NumBlocks = %d, MMCHS_BLK = 0x%x\n"), pRequest->BlockSize, pRequest->NumBlocks, dwRegVal));
; 753  :         OUTREG32(&m_pbRegisters->MMCHS_BLK, dwRegVal);

  000ec	e0833802	 add         r3, r3, r2, lsl #16
  000f0	e5853104	 str         r3, [r5, #0x104]
  000f4	e5965000	 ldr         r5, [r6]
  000f8	e3844010	 orr         r4, r4, #0x10
  000fc		 |$LN2@SendComman|

; 754  :         OALMSGX(OAL_IO, (TEXT("SendCommand() - read back MMCHS_BLK = 0x%x\n"), INREG32(&m_pbRegisters->MMCHS_BLK)));
; 755  :     }
; 756  : #if 0
; 757  :     else if ( m_TransferClass == SD_WRITE )
; 758  :     {
; 759  :         MMC_CMD &= ~MMCHS_CMD_DDIR;
; 760  : 
; 761  :         dwRegVal = (DWORD)(pRequest->BlockSize & 0xFFFF);
; 762  :         dwRegVal += ((DWORD)(pRequest->NumBlocks & 0xFFFF)) << 16;
; 763  :         OUTREG32(&m_pbRegisters->MMCHS_BLK, dwRegVal);
; 764  :     }
; 765  : #endif
; 766  :     //check for card initialization is done.
; 767  :     if (!m_fCardInitialized && (Cmd == SD_CMD_READ_SINGLE_BLOCK))

  000fc	e59f2028	 ldr         r2, [pc, #0x28]

; 768  :         m_fCardInitialized = TRUE;
; 769  : 
; 770  :     // Program the argument into the argument registers
; 771  :     OUTREG32(&m_pbRegisters->MMCHS_ARG, Arg);
; 772  : 
; 773  :     OALMSGX(OAL_IO, (TEXT("SendCommand() - registers:Command = 0x%x, MMCHS_ARG = 0x%x\n"), MMC_CMD, INREG32(&m_pbRegisters->MMCHS_ARG)));
; 774  : 
; 775  :     // Issue the command.
; 776  :     OUTREG32(&m_pbRegisters->MMCHS_CMD, MMC_CMD);
; 777  : 
; 778  :     return SD_API_STATUS_SUCCESS;

  00100	e3a00000	 mov         r0, #0
  00104	e5923000	 ldr         r3, [r2]
  00108	e3530000	 cmp         r3, #0
  0010c	035e0011	 cmpeq       lr, #0x11
  00110	03a03001	 moveq       r3, #1
  00114	05823000	 streq       r3, [r2]
  00118	e5857108	 str         r7, [r5, #0x108]
  0011c	e5963000	 ldr         r3, [r6]
  00120	e583410c	 str         r4, [r3, #0x10C]

; 779  : }

  00124	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00128	e12fff1e	 bx          lr
  0012c		 |$LN32@SendComman|
  0012c		 |$LN33@SendComman|
  0012c	00000000	 DCD         |m_fCardInitialized|
  00130		 |$LN34@SendComman|
  00130	00000000	 DCD         |gwaCMD|
  00134		 |$LN35@SendComman|
  00134	00000000	 DCD         |m_pbRegisters|
  00138		 |$LN36@SendComman|
  00138	00000000	 DCD         |m_dwSDIOCard|
  0013c		 |$LN37@SendComman|
  0013c	00000000	 DCD         |m_TransferClass|
  00140		 |$M45028|

			 ENDP  ; |SendCommand|

	EXPORT	|SdhcHandleInsertion|

  00000			 AREA	 |.pdata|, PDATA
|$T45084| DCD	|$LN37@SdhcHandle|
	DCD	0x40005802
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SdhcHandleInsertion| PROC

; 785  : {

  00000		 |$LN37@SdhcHandle|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M45081|

; 786  :     DWORD dwClockRate = SD_DEFAULT_CARD_ID_CLOCK_RATE;
; 787  :     DWORD dwTimeout;
; 788  : 
; 789  :     m_fCardPresent = TRUE;

  00008	e59f214c	 ldr         r2, [pc, #0x14C]

; 790  :     m_dwSDIOCard = 0;

  0000c	e59f1144	 ldr         r1, [pc, #0x144]
  00010	e3a03b61	 mov         r3, #0x61, 22
  00014	e3a00001	 mov         r0, #1
  00018	e5820000	 str         r0, [r2]
  0001c	e3833e2a	 orr         r3, r3, #0x2A, 28
  00020	e3a0e000	 mov         lr, #0

; 791  : 
; 792  :     OALMSGX(OAL_INFO, (TEXT("HandleInsertion\r\n")));
; 793  : 
; 794  :     // Card power handled by PMIC and card_detect signal turn power to the card on
; 795  :     //??? TurnCardPowerOn();
; 796  : 
; 797  :     SystemClockOn();
; 798  : 
; 799  :     MmcReset(SOFT_RESET_ALL);

  00024	e3a00401	 mov         r0, #1, 8
  00028	e58d3000	 str         r3, [sp]
  0002c	e581e000	 str         lr, [r1]
  00030	eb000000	 bl          MmcReset

; 800  : 
; 801  :     // Check for debounce stable
; 802  :     dwTimeout = 5000;
; 803  :     while (((INREG32(&m_pbRegisters->MMCHS_PSTATE) & 0x00020000)!= 0x00020000) && (dwTimeout>0))

  00034	e59f6118	 ldr         r6, [pc, #0x118]
  00038	e3a03c13	 mov         r3, #0x13, 24
  0003c	e3832088	 orr         r2, r3, #0x88
  00040	e5961000	 ldr         r1, [r6]
  00044	ea000002	 b           |$LN34@SdhcHandle|
  00048		 |$LL3@SdhcHandle|
  00048	e3520000	 cmp         r2, #0
  0004c	0a000004	 beq         |$LN32@SdhcHandle|

; 804  :     {
; 805  :         dwTimeout--;

  00050	e2422001	 sub         r2, r2, #1
  00054		 |$LN34@SdhcHandle|

; 800  : 
; 801  :     // Check for debounce stable
; 802  :     dwTimeout = 5000;
; 803  :     while (((INREG32(&m_pbRegisters->MMCHS_PSTATE) & 0x00020000)!= 0x00020000) && (dwTimeout>0))

  00054	e5913124	 ldr         r3, [r1, #0x124]

; 804  :     {
; 805  :         dwTimeout--;

  00058	e2033802	 and         r3, r3, #2, 16
  0005c	e3530802	 cmp         r3, #2, 16
  00060	1afffff8	 bne         |$LL3@SdhcHandle|
  00064		 |$LN32@SdhcHandle|

; 806  :     }
; 807  : 
; 808  :     OUTREG32(&m_pbRegisters->MMCHS_CON, 0x01 << 7); // CDP
; 809  : 
; 810  :     SetSDVSVoltage();

  00064	e59f50e4	 ldr         r5, [pc, #0xE4]
  00068	e3a03080	 mov         r3, #0x80
  0006c	e581302c	 str         r3, [r1, #0x2C]
  00070	e5953000	 ldr         r3, [r5]
  00074	e59f40d0	 ldr         r4, [pc, #0xD0]
  00078	e3530001	 cmp         r3, #1
  0007c	1a00000f	 bne         |$LN23@SdhcHandle|
  00080	e5943000	 ldr         r3, [r4]
  00084	e3530001	 cmp         r3, #1
  00088	0a000015	 beq         |$LN18@SdhcHandle|
  0008c	e3530002	 cmp         r3, #2
  00090	1a000013	 bne         |$LN18@SdhcHandle|
  00094		 |$LN10@SdhcHandle|
  00094	e3a00c0a	 mov         r0, #0xA, 24
  00098	e3a01301	 mov         r1, #1, 6
  0009c		 |$LN9@SdhcHandle|
  0009c	e5962000	 ldr         r2, [r6]
  000a0	e5923140	 ldr         r3, [r2, #0x140]
  000a4	e1833001	 orr         r3, r3, r1
  000a8	e5823140	 str         r3, [r2, #0x140]
  000ac	e5962000	 ldr         r2, [r6]
  000b0	e5923128	 ldr         r3, [r2, #0x128]
  000b4	e1833000	 orr         r3, r3, r0
  000b8	e5823128	 str         r3, [r2, #0x128]
  000bc	ea000010	 b           |$LN26@SdhcHandle|
  000c0		 |$LN23@SdhcHandle|
  000c0	e3530002	 cmp         r3, #2
  000c4	1a000009	 bne         |$LN15@SdhcHandle|
  000c8	e5943000	 ldr         r3, [r4]
  000cc	e3530001	 cmp         r3, #1
  000d0	0affffef	 beq         |$LN10@SdhcHandle|
  000d4	e3530002	 cmp         r3, #2
  000d8	0affffed	 beq         |$LN10@SdhcHandle|
  000dc	e3530003	 cmp         r3, #3
  000e0	1affffeb	 bne         |$LN10@SdhcHandle|
  000e4		 |$LN18@SdhcHandle|
  000e4	e3a01402	 mov         r1, #2, 8
  000e8	e3a00b03	 mov         r0, #3, 22
  000ec	eaffffea	 b           |$LN9@SdhcHandle|
  000f0		 |$LN15@SdhcHandle|
  000f0	e59f3050	 ldr         r3, [pc, #0x50]
  000f4	e5933440	 ldr         r3, [r3, #0x440]
  000f8	e3130001	 tst         r3, #1
  000fc	159f0040	 ldrne       r0, [pc, #0x40]
  00100	1b000000	 blne        NKDbgPrintfW
  00104		 |$LN26@SdhcHandle|

; 811  : 
; 812  :     SdhcSetClockRate(&dwClockRate);

  00104	e28d0000	 add         r0, sp, #0
  00108	eb000000	 bl          SdhcSetClockRate

; 813  : #ifndef MMCHS1_LOW_VOLTAGE
; 814  :     if (m_dwSlot == MMCSLOT_1 && m_dwCPURev == 3)

  0010c	e5953000	 ldr         r3, [r5]
  00110	e3530001	 cmp         r3, #1
  00114	05943000	 ldreq       r3, [r4]
  00118	03530003	 cmpeq       r3, #3

; 815  :     {
; 816  :         SendInitSequence();

  0011c	0b000000	 bleq        SendInitSequence

; 817  :     }
; 818  : #endif
; 819  :     EnableSDHCInterrupts();

  00120	e5963000	 ldr         r3, [r6]
  00124	e3a02833	 mov         r2, #0x33, 16
  00128	e3822033	 orr         r2, r2, #0x33
  0012c	e5832138	 str         r2, [r3, #0x138]
  00130	e5963000	 ldr         r3, [r6]
  00134	e5832134	 str         r2, [r3, #0x134]

; 820  : 
; 821  :     // indicate device arrival
; 822  :     //IndicateSlotStateChange(DeviceInserted);
; 823  : }

  00138	e28dd004	 add         sp, sp, #4
  0013c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00140	e12fff1e	 bx          lr
  00144		 |$LN38@SdhcHandle|
  00144		 |$LN39@SdhcHandle|
  00144	00000000	 DCD         |??_C@_1CI@DLLABNKH@?$AAS?$AAD?$AAH?$AAC?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAs?$AAl?$AAo?$AAt?$AA?5?$AAn?$AAu?$AAm?$AA?$AN?$AA?6?$AA?$AA@|
  00148		 |$LN40@SdhcHandle|
  00148	00000000	 DCD         |dpCurSettings|
  0014c		 |$LN41@SdhcHandle|
  0014c	00000000	 DCD         |m_dwCPURev|
  00150		 |$LN42@SdhcHandle|
  00150	00000000	 DCD         |m_dwSlot|
  00154		 |$LN43@SdhcHandle|
  00154	00000000	 DCD         |m_pbRegisters|
  00158		 |$LN44@SdhcHandle|
  00158	00000000	 DCD         |m_dwSDIOCard|
  0015c		 |$LN45@SdhcHandle|
  0015c	00000000	 DCD         |m_fCardPresent|
  00160		 |$M45082|

			 ENDP  ; |SdhcHandleInsertion|

	EXPORT	|SdhcBusRequestHandler|

  00000			 AREA	 |.pdata|, PDATA
|$T45103| DCD	|$LN6@SdhcBusReq|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SdhcBusRequestHandler| PROC

; 917  : {

  00000		 |$LN6@SdhcBusReq|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45100|

; 918  :     SD_API_STATUS   status;
; 919  : 
; 920  :     OALMSGX(OAL_IO, (TEXT("SDHCBusRequestHandler - CMD::[%d]\r\n"), pRequest->CommandCode));
; 921  : 
; 922  :     status = SendCommand(pRequest);

  00004	eb000000	 bl          SendCommand
  00008	e3500000	 cmp         r0, #0

; 923  : 
; 924  :     if (!SD_API_SUCCESS(status))
; 925  :     {
; 926  :         DEBUGMSG(OAL_ERROR, (TEXT("SDHCDBusRequestHandler() - Error sending command:0x%x\r\n"), pRequest->CommandCode));
; 927  :         goto cleanUp;      
; 928  :     }
; 929  : 
; 930  :     // we will handle the command response interrupt on another thread
; 931  :     status = SD_API_STATUS_PENDING;

  0000c	53a00001	 movpl       r0, #1
  00010		 |$cleanUp$44414|

; 932  : 
; 933  : cleanUp:
; 934  : 
; 935  :     return status;
; 936  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M45101|

			 ENDP  ; |SdhcBusRequestHandler|

	EXPORT	|SdhcSetSlotPowerState|

  00000			 AREA	 |.pdata|, PDATA
|$T45116| DCD	|$LN11@SdhcSetSlo|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SdhcSetSlotPowerState| PROC

; 1177 : {

  00000		 |$LN11@SdhcSetSlo|
  00000		 |$M45113|

; 1178 :     if (state < D3)
; 1179 :     {
; 1180 :         SystemClockOn();
; 1181 :     }
; 1182 :     else
; 1183 :     {
; 1184 :         SystemClockOff();
; 1185 :     }
; 1186 : }

  00000	e12fff1e	 bx          lr
  00004		 |$M45114|

			 ENDP  ; |SdhcSetSlotPowerState|

	EXPORT	|??_C@_1GK@EBPKPBPE@?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAU?$AAn?$AAr?$AAe?$AAc?$AAo?$AAg?$AAn?$AAi@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45155| DCD	|$LN32@GetCommand|
	DCD	0x40005701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@EBPKPBPE@?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAU?$AAn?$AAr?$AAe?$AAc?$AAo?$AAg?$AAn?$AAi@| DCB "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "s"
	DCB	0x0, "p", 0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "U", 0x0, "n"
	DCB	0x0, "r", 0x0, "e", 0x0, "c", 0x0, "o", 0x0, "g", 0x0, "n"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o", 0x0, "n", 0x0, "s"
	DCB	0x0, "e", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCommandResponse| PROC

; 1195 : {

  00000		 |$LN32@GetCommand|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45152|
  00004	e1a0e000	 mov         lr, r0

; 1196 :     DWORD  dwRegVal;
; 1197 :     PUCHAR  respBuff;       // response buffer
; 1198 :     DWORD dwRSP;
; 1199 : 
; 1200 :     dwRegVal = Read_MMC_STAT();

  00008	e59f4148	 ldr         r4, [pc, #0x148]
  0000c	e3a03211	 mov         r3, #0x11, 4

; 1201 : 
; 1202 :     OALMSGX(OAL_IO, (TEXT("SDHC: MMC_STAT = 0x%X.\r\n"), dwRegVal));
; 1203 : 
; 1204 : 
; 1205 :     if ( dwRegVal & (MMCHS_STAT_CC | MMCHS_STAT_CERR | MMCHS_STAT_CCRC))

  00010	e3832802	 orr         r2, r3, #2, 16
  00014	e5941000	 ldr         r1, [r4]
  00018	e5913130	 ldr         r3, [r1, #0x130]
  0001c	e1130002	 tst         r3, r2
  00020	0a000047	 beq         |$LN12@GetCommand|

; 1206 :     {
; 1207 :         respBuff = pRequest->CommandResponse.ResponseBuffer;
; 1208 : 
; 1209 :         switch (pRequest->CommandResponse.ResponseType)

  00024	e59e201c	 ldr         r2, [lr, #0x1C]
  00028	e3520008	 cmp         r2, #8
  0002c	8a00003f	 bhi         |$LN1@GetCommand|
  00030	e1a03082	 mov         r3, r2, lsl #1
  00034	e083300f	 add         r3, r3, pc
  00038	e1d330b4	 ldrh        r3, [r3, #4]
  0003c	e08ff003	 add         pc, pc, r3
  00040		 |$LN20@GetCommand|
  00040		 |$LN19@GetCommand|
  00040		 |$LN21@GetCommand|
  00040	0100		 DCW         0x100
  00042		 |$LN22@GetCommand|
  00042	0010		 DCW         0x10
  00044		 |$LN23@GetCommand|
  00044	0010		 DCW         0x10
  00046		 |$LN24@GetCommand|
  00046	005c		 DCW         0x5c
  00048		 |$LN25@GetCommand|
  00048	0048		 DCW         0x48
  0004a		 |$LN26@GetCommand|
  0004a	0048		 DCW         0x48
  0004c		 |$LN27@GetCommand|
  0004c	0050		 DCW         0x50
  0004e		 |$LN28@GetCommand|
  0004e	0050		 DCW         0x50
  00050		 |$LN29@GetCommand|
  00050	0048		 DCW         0x48
  00052		 |$LN37@GetCommand|

; 1326 : }

  00052	0048		 DCW         0x48
  00054		 |$LN5@GetCommand|

; 1210 :         {
; 1211 :             case NoResponse:
; 1212 :                 break;
; 1213 : 
; 1214 :             case ResponseR1:
; 1215 :             case ResponseR1b:
; 1216 :                 //--- SHORT RESPONSE (48 bits total)---
; 1217 :                 // Format: { START_BIT(1) | TRANSMISSION_BIT(1) | COMMAND_INDEX(6) | CARD_STATUS(32) | CRC7(7) | END_BIT(1) }
; 1218 :                 // NOTE: START_BIT and TRANSMISSION_BIT = 0, END_BIT = 1
; 1219 :                 //
; 1220 :                 // Dummy byte needed by calling function.
; 1221 :                 *respBuff = (BYTE)(START_BIT | TRANSMISSION_BIT | pRequest->CommandCode);

  00054	e5de3014	 ldrb        r3, [lr, #0x14]
  00058		 |$LN18@GetCommand|

; 1222 : 
; 1223 :                 dwRSP = INREG32(&m_pbRegisters->MMCHS_RSP10);
; 1224 : 
; 1225 :                 *(respBuff + 1) = (BYTE)(dwRSP & 0xFF);
; 1226 :                 *(respBuff + 2) = (BYTE)(dwRSP >> 8);
; 1227 :                 *(respBuff + 3) = (BYTE)(dwRSP >> 16);
; 1228 :                 *(respBuff + 4) = (BYTE)(dwRSP >> 24);
; 1229 : 
; 1230 : 
; 1231 :                 *(respBuff + 5) = (BYTE)(END_RESERVED | END_BIT);

  00058	e3a020ff	 mov         r2, #0xFF
  0005c		 |$LN17@GetCommand|
  0005c	e5ce3020	 strb        r3, [lr, #0x20]
  00060	e5943000	 ldr         r3, [r4]
  00064	e5930110	 ldr         r0, [r3, #0x110]
  00068	e5ce2025	 strb        r2, [lr, #0x25]
  0006c	e1a03420	 mov         r3, r0, lsr #8
  00070	e1a02820	 mov         r2, r0, lsr #16
  00074	e1a01c20	 mov         r1, r0, lsr #24
  00078	e5ce3022	 strb        r3, [lr, #0x22]
  0007c	e5ce2023	 strb        r2, [lr, #0x23]
  00080	e5ce1024	 strb        r1, [lr, #0x24]
  00084	e5ce0021	 strb        r0, [lr, #0x21]

; 1232 : 
; 1233 :                 OALMSGX(OAL_IO, (TEXT("GetCommandResponse() - R1 R1b : 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x \r\n"), *(respBuff + 0),
; 1234 :                     *(respBuff + 1), *(respBuff + 2), *(respBuff + 3), *(respBuff + 4), *(respBuff + 5)));
; 1235 :                 OALMSGX(OAL_IO, (TEXT("GetCmdResponse returned [%x %x %x %x %x]\r\n"),
; 1236 :                     respBuff[0], respBuff[1], respBuff[2], respBuff[3], respBuff[4], respBuff[5] ));
; 1237 :                 break;

  00088	ea00002d	 b           |$LN12@GetCommand|
  0008c		 |$LN4@GetCommand|

; 1238 : 
; 1239 :             case ResponseR3:
; 1240 :             case ResponseR4:
; 1241 :             case ResponseR7:
; 1242 :                 OALMSGX(OAL_IO, (TEXT("ResponseR3 ResponseR4\r\n")));
; 1243 :                 //--- SHORT RESPONSE (48 bits total)---
; 1244 :                 // Format: { START_BIT(1) | TRANSMISSION_BIT(1) | RESERVED(6) | CARD_STATUS(32) | RESERVED(7) | END_BIT(1) }
; 1245 :                 //
; 1246 :                 *respBuff = (BYTE)(START_BIT | TRANSMISSION_BIT | START_RESERVED);

  0008c	e3a0303f	 mov         r3, #0x3F

; 1247 : 
; 1248 :                 dwRSP = INREG32(&m_pbRegisters->MMCHS_RSP10);
; 1249 : 
; 1250 :                 *(respBuff + 1) = (BYTE)(dwRSP & 0xFF);
; 1251 :                 *(respBuff + 2) = (BYTE)(dwRSP >> 8);
; 1252 :                 *(respBuff + 3) = (BYTE)(dwRSP >> 16);
; 1253 :                 *(respBuff + 4) = (BYTE)(dwRSP >> 24);
; 1254 : 
; 1255 :                 *(respBuff + 5) = (BYTE)(END_RESERVED | END_BIT);
; 1256 : 
; 1257 :                 OALMSGX(OAL_IO, (TEXT("GetCmdResponse returned [%x %x %x %x %x]\r\n"),
; 1258 :                     respBuff[0], respBuff[1], respBuff[2], respBuff[3], respBuff[4], respBuff[5] ));
; 1259 :                 break;

  00090	eafffff0	 b           |$LN18@GetCommand|
  00094		 |$LN3@GetCommand|

; 1260 : 
; 1261 :             case ResponseR5:
; 1262 :             case ResponseR6:
; 1263 :                 OALMSGX(OAL_IO, (TEXT("ResponseR5 ResponseR6\r\n")));
; 1264 :                 //--- SHORT RESPONSE (48 bits total)---
; 1265 :                 // Format: { START_BIT(1) | TRANSMISSION_BIT(1) | COMMAND_INDEX(6) | RCA(16) | CARD_STATUS(16) | CRC7(7) | END_BIT(1) }
; 1266 :                 //
; 1267 :                 *respBuff = (BYTE)(START_BIT | TRANSMISSION_BIT | pRequest->CommandCode);

  00094	e5de3014	 ldrb        r3, [lr, #0x14]

; 1268 : 
; 1269 :                 dwRSP = INREG32(&m_pbRegisters->MMCHS_RSP10);
; 1270 : 
; 1271 :                 *(respBuff + 1) = (BYTE)(dwRSP & 0xFF);
; 1272 :                 *(respBuff + 2) = (BYTE)(dwRSP >> 8);
; 1273 :                 *(respBuff + 3) = (BYTE)(dwRSP >> 16);
; 1274 :                 *(respBuff + 4) = (BYTE)(dwRSP >> 24);
; 1275 : 
; 1276 :                 *(respBuff + 5) = (BYTE)(END_BIT);

  00098	e3a02001	 mov         r2, #1

; 1277 : 
; 1278 :                 OALMSGX(OAL_IO, (TEXT("GetCommandResponse() - R5 R6 : 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x \r\n"), *(respBuff + 0),
; 1279 :                     *(respBuff + 1), *(respBuff + 2), *(respBuff + 3), *(respBuff + 4), *(respBuff + 5)));
; 1280 : 
; 1281 :                 OALMSGX(OAL_IO, (TEXT("GetCmdResponse returned [%x %x %x %x %x]\r\n"),
; 1282 :                     respBuff[0], respBuff[1], respBuff[2], respBuff[3], respBuff[4], respBuff[5] ));
; 1283 :                 break;

  0009c	eaffffee	 b           |$LN17@GetCommand|
  000a0		 |$LN2@GetCommand|

; 1284 : 
; 1285 :             case ResponseR2:
; 1286 :                 dwRSP = INREG32(&m_pbRegisters->MMCHS_RSP10);

  000a0	e5910110	 ldr         r0, [r1, #0x110]

; 1287 : 
; 1288 :                 *(respBuff + 0) = (BYTE)(dwRSP & 0xFF);
; 1289 :                 *(respBuff + 1) = (BYTE)(dwRSP >> 8);

  000a4	e1a03420	 mov         r3, r0, lsr #8

; 1290 :                 *(respBuff + 2) = (BYTE)(dwRSP >> 16);

  000a8	e1a02820	 mov         r2, r0, lsr #16

; 1291 :                 *(respBuff + 3) = (BYTE)(dwRSP >> 24);

  000ac	e1a01c20	 mov         r1, r0, lsr #24
  000b0	e5ce3021	 strb        r3, [lr, #0x21]
  000b4	e5ce2022	 strb        r2, [lr, #0x22]
  000b8	e5ce1023	 strb        r1, [lr, #0x23]
  000bc	e5ce0020	 strb        r0, [lr, #0x20]

; 1292 : 
; 1293 :                 dwRSP = INREG32(&m_pbRegisters->MMCHS_RSP32);

  000c0	e5943000	 ldr         r3, [r4]
  000c4	e5930114	 ldr         r0, [r3, #0x114]

; 1294 : 
; 1295 :                 *(respBuff + 4) = (BYTE)(dwRSP & 0xFF);
; 1296 :                 *(respBuff + 5) = (BYTE)(dwRSP >> 8);

  000c8	e1a03420	 mov         r3, r0, lsr #8

; 1297 :                 *(respBuff + 6) = (BYTE)(dwRSP >> 16);

  000cc	e1a02820	 mov         r2, r0, lsr #16

; 1298 :                 *(respBuff + 7) = (BYTE)(dwRSP >> 24);

  000d0	e1a01c20	 mov         r1, r0, lsr #24
  000d4	e5ce3025	 strb        r3, [lr, #0x25]
  000d8	e5ce2026	 strb        r2, [lr, #0x26]
  000dc	e5ce1027	 strb        r1, [lr, #0x27]
  000e0	e5ce0024	 strb        r0, [lr, #0x24]

; 1299 : 
; 1300 :                 dwRSP = INREG32(&m_pbRegisters->MMCHS_RSP54);

  000e4	e5943000	 ldr         r3, [r4]
  000e8	e5930118	 ldr         r0, [r3, #0x118]

; 1301 : 
; 1302 :                 *(respBuff + 8) = (BYTE)(dwRSP & 0xFF);
; 1303 :                 *(respBuff + 9) = (BYTE)(dwRSP >> 8);

  000ec	e1a03420	 mov         r3, r0, lsr #8

; 1304 :                 *(respBuff + 10) = (BYTE)(dwRSP >> 16);

  000f0	e1a02820	 mov         r2, r0, lsr #16

; 1305 :                 *(respBuff + 11) = (BYTE)(dwRSP >> 24);

  000f4	e1a01c20	 mov         r1, r0, lsr #24
  000f8	e5ce3029	 strb        r3, [lr, #0x29]
  000fc	e5ce202a	 strb        r2, [lr, #0x2A]
  00100	e5ce102b	 strb        r1, [lr, #0x2B]
  00104	e5ce0028	 strb        r0, [lr, #0x28]

; 1306 : 
; 1307 : 
; 1308 :                 dwRSP = INREG32(&m_pbRegisters->MMCHS_RSP76);

  00108	e5943000	 ldr         r3, [r4]
  0010c	e593011c	 ldr         r0, [r3, #0x11C]

; 1309 : 
; 1310 :                 *(respBuff + 12) = (BYTE)(dwRSP & 0xFF);
; 1311 :                 *(respBuff + 13) = (BYTE)(dwRSP >> 8);

  00110	e1a03420	 mov         r3, r0, lsr #8

; 1312 :                 *(respBuff + 14) = (BYTE)(dwRSP >> 16);

  00114	e1a02820	 mov         r2, r0, lsr #16

; 1313 :                 *(respBuff + 15) = (BYTE)(dwRSP >> 24);

  00118	e1a01c20	 mov         r1, r0, lsr #24
  0011c	e5ce302d	 strb        r3, [lr, #0x2D]
  00120	e5ce202e	 strb        r2, [lr, #0x2E]
  00124	e5ce102f	 strb        r1, [lr, #0x2F]
  00128	e5ce002c	 strb        r0, [lr, #0x2C]

; 1314 : 
; 1315 :                 OALMSGX(OAL_IO, (TEXT("GetCmdResponse returned [%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x]\r\n"),
; 1316 :                     respBuff[0], respBuff[1], respBuff[2], respBuff[3], respBuff[4], respBuff[5], respBuff[6], respBuff[7],
; 1317 :                     respBuff[8], respBuff[9], respBuff[10], respBuff[11], respBuff[12], respBuff[13], respBuff[14], respBuff[15]));
; 1318 :                 break;

  0012c	ea000004	 b           |$LN12@GetCommand|
  00130		 |$LN1@GetCommand|

; 1319 : 
; 1320 :             default:
; 1321 :                 OALMSG(OAL_ERROR, (TEXT("GetCommandResponse() - Unrecognized response type!\r\n")));

  00130	e59f301c	 ldr         r3, [pc, #0x1C]
  00134	e5933440	 ldr         r3, [r3, #0x440]
  00138	e3130001	 tst         r3, #1
  0013c	159f000c	 ldrne       r0, [pc, #0xC]
  00140	1b000000	 blne        NKDbgPrintfW
  00144		 |$LN12@GetCommand|

; 1322 :                 break;
; 1323 :         }
; 1324 :     }
; 1325 :     return SD_API_STATUS_SUCCESS;

  00144	e3a00000	 mov         r0, #0

; 1326 : }

  00148	e8bd4010	 ldmia       sp!, {r4, lr}
  0014c	e12fff1e	 bx          lr
  00150		 |$LN33@GetCommand|
  00150		 |$LN34@GetCommand|
  00150	00000000	 DCD         |??_C@_1GK@EBPKPBPE@?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAR?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAU?$AAn?$AAr?$AAe?$AAc?$AAo?$AAg?$AAn?$AAi@|
  00154		 |$LN35@GetCommand|
  00154	00000000	 DCD         |dpCurSettings|
  00158		 |$LN36@GetCommand|
  00158	00000000	 DCD         |m_pbRegisters|
  0015c		 |$M45153|

			 ENDP  ; |GetCommandResponse|

	EXPORT	|??_C@_1DM@FAHGNIG@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@ILIIGKGF@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA0?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@EHCCGKPL@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA1?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45282| DCD	|$LN108@SDIPolling|
	DCD	0x4000b002

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@FAHGNIG@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA3?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "I", 0x0, "P", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "I", 0x0, "M", 0x0, "E", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, "3", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@ILIIGKGF@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA0?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "I", 0x0, "P", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "I", 0x0, "M", 0x0, "E", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, "0", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@EHCCGKPL@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA1?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "I", 0x0, "P", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "I", 0x0, "M", 0x0, "E", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, "1", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDIPollingReceive| PROC

; 1334 : {

  00000		 |$LN108@SDIPolling|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M45279|
  00008	e1a06001	 mov         r6, r1
  0000c	e1a05000	 mov         r5, r0

; 1335 :     DWORD fifoSizeW, blockLengthW; // Almost Full level and block length
; 1336 :     DWORD dwCount1, dwCount2;
; 1337 :     DWORD MMC_STAT;
; 1338 :     DWORD MmcPstateRegValue;
; 1339 :     //DWORD *pbuf = (DWORD *) pBuff;
; 1340 :     DWORD __unaligned *pbuf2 = (DWORD *) pBuff;
; 1341 :     DWORD dwCurrentTickCount;
; 1342 :     DWORD dwTimeout;
; 1343 :     DWORD dwCountStart;
; 1344 :     BOOL fTimeoutOverflow = FALSE;
; 1345 : 
; 1346 :     OALMSGX(OAL_IO, (TEXT("SDIPollingReceive(0x%x, %d)\r\n"), pBuff, dwLen));
; 1347 :     //check the parameters
; 1348 : 
; 1349 :     OALMSGX(OAL_IO, (TEXT("SDIPollingReceive reading MMC_STAT\r\n")));
; 1350 :     MMC_STAT = Read_MMC_STAT();

  00010	e59f72a4	 ldr         r7, [pc, #0x2A4]
  00014	e3a0a000	 mov         r10, #0
  00018	e5973000	 ldr         r3, [r7]
  0001c	e5932130	 ldr         r2, [r3, #0x130]

; 1351 :     OALMSGX(OAL_IO, (TEXT("SDIPollingReceive reading MMCHS_PSTATE\r\n")));
; 1352 :     MmcPstateRegValue = INREG32(&m_pbRegisters->MMCHS_PSTATE);

  00020	e5933124	 ldr         r3, [r3, #0x124]

; 1353 : 
; 1354 :     // calculate timeout conditions
; 1355 :     OALMSGX(OAL_IO, (TEXT("SDIPollingReceive OALGetTickCount\r\n")));
; 1356 :     dwCountStart = OALGetTickCount();

  00024	eb000000	 bl          OALGetTickCount

; 1357 :     dwTimeout = dwCountStart + m_dwMaxTimeout;

  00028	e59f3280	 ldr         r3, [pc, #0x280]
  0002c	e1a08000	 mov         r8, r0
  00030	e5933000	 ldr         r3, [r3]
  00034	e0839008	 add         r9, r3, r8

; 1358 :     if ( dwTimeout < dwCountStart )
; 1359 :         fTimeoutOverflow = TRUE;

  00038	e3a03c01	 mov         r3, #1, 24
  0003c	e1590008	 cmp         r9, r8

; 1360 : 
; 1361 :     if (dwLen % MMC_BLOCK_SIZE || m_dwSDIOCard)

  00040	e38330ff	 orr         r3, r3, #0xFF
  00044	33a0a001	 movcc       r10, #1
  00048	e1160003	 tst         r6, r3
  0004c	1a000046	 bne         |$LN91@SDIPolling|
  00050	e59f3260	 ldr         r3, [pc, #0x260]
  00054	e5933000	 ldr         r3, [r3]
  00058	e3530000	 cmp         r3, #0
  0005c	1a000042	 bne         |$LN91@SDIPolling|

; 1381 :         }
; 1382 :     } 
; 1383 :     else
; 1384 :     {
; 1385 :       OALMSGX(OAL_IO, (TEXT("SDIPollingReceive ready to read data\r\n")));
; 1386 :       fifoSizeW = INREG32(&m_pbRegisters->MMCHS_BLK) & 0xFFFF;

  00060	e5974000	 ldr         r4, [r7]
  00064	e3a03cff	 mov         r3, #0xFF, 24
  00068	e38320ff	 orr         r2, r3, #0xFF
  0006c	e5943104	 ldr         r3, [r4, #0x104]

; 1387 :       OALMSGX(OAL_IO, (TEXT("SDIPollingReceive fifoSizeW %d\r\n"), fifoSizeW));
; 1388 :       blockLengthW = dwLen / fifoSizeW;

  00070	e1a01006	 mov         r1, r6
  00074	e0033002	 and         r3, r3, r2
  00078	e1a00003	 mov         r0, r3
  0007c	e58d3000	 str         r3, [sp]
  00080	eb000000	 bl          __rt_udiv
  00084	e1b0b000	 movs        r11, r0

; 1389 :       OALMSGX(OAL_IO, (TEXT("SDIPollingReceive blockLengthW %d\r\n"), blockLengthW));
; 1390 :       for (dwCount1 = 0; dwCount1 < blockLengthW; dwCount1++)

  00088	e3a06000	 mov         r6, #0
  0008c	0a00004f	 beq         |$LN18@SDIPolling|

; 1391 :       {
; 1392 :         OALMSGX(OAL_IO, (TEXT("SDIPollingReceive set MMCHS_STAT BBR\r\n")));
; 1393 :         // Wait for Block ready for read
; 1394 :         while ((Read_MMC_STAT() & MMCHS_STAT_BRR) != MMCHS_STAT_BRR)

  00090	ea00000a	 b           |$LL16@SDIPolling|
  00094		 |$LL13@SDIPolling|

; 1395 :         {
; 1396 :           // check for a timeout
; 1397 :           dwCurrentTickCount = OALGetTickCount();

  00094	eb000000	 bl          OALGetTickCount

; 1398 :           if ( fTimeoutOverflow ? ( dwTimeout < dwCurrentTickCount && dwCurrentTickCount < dwCountStart )
; 1399 :             : ( dwTimeout < dwCurrentTickCount || dwCurrentTickCount < dwCountStart ) )

  00098	e35a0000	 cmp         r10, #0
  0009c	0a000002	 beq         |$LN42@SDIPolling|
  000a0	e1590000	 cmp         r9, r0
  000a4	2a000004	 bcs         |$LN90@SDIPolling|
  000a8	ea000001	 b           |$LN100@SDIPolling|
  000ac		 |$LN42@SDIPolling|
  000ac	e1590000	 cmp         r9, r0
  000b0	3a00001c	 bcc         |$LN84@SDIPolling|
  000b4		 |$LN100@SDIPolling|
  000b4	e1500008	 cmp         r0, r8
  000b8	3a00001a	 bcc         |$LN84@SDIPolling|
  000bc		 |$LN90@SDIPolling|

; 1391 :       {
; 1392 :         OALMSGX(OAL_IO, (TEXT("SDIPollingReceive set MMCHS_STAT BBR\r\n")));
; 1393 :         // Wait for Block ready for read
; 1394 :         while ((Read_MMC_STAT() & MMCHS_STAT_BRR) != MMCHS_STAT_BRR)

  000bc	e5974000	 ldr         r4, [r7]
  000c0		 |$LL16@SDIPolling|
  000c0	e5943130	 ldr         r3, [r4, #0x130]
  000c4	e2033020	 and         r3, r3, #0x20
  000c8	e3530020	 cmp         r3, #0x20
  000cc	1afffff0	 bne         |$LL13@SDIPolling|

; 1402 :             goto READ_ERROR;
; 1403 :           }
; 1404 :         }
; 1405 :         Set_MMC_STAT(MMCHS_STAT_BRR);

  000d0	e5943130	 ldr         r3, [r4, #0x130]

; 1406 : 
; 1407 :         // Get all data from DATA register and write in user buffer
; 1408 :         OALMSGX(OAL_IO, (TEXT("SDIPollingReceive reading data 2\r\n")));
; 1409 :         for (dwCount2 = 0; dwCount2 < (fifoSizeW/sizeof(DWORD)); dwCount2++)

  000d4	e59d2000	 ldr         r2, [sp]
  000d8	e3833020	 orr         r3, r3, #0x20
  000dc	e5843130	 str         r3, [r4, #0x130]
  000e0	e1b0e122	 movs        lr, r2, lsr #2
  000e4	0a00000b	 beq         |$LN15@SDIPolling|
  000e8		 |$LL10@SDIPolling|

; 1410 :         {
; 1411 :             *pbuf2 = INREG32(&m_pbRegisters->MMCHS_DATA) ;

  000e8	e5973000	 ldr         r3, [r7]
  000ec	e25ee001	 subs        lr, lr, #1
  000f0	e5930120	 ldr         r0, [r3, #0x120]
  000f4	e1a03420	 mov         r3, r0, lsr #8
  000f8	e1a02820	 mov         r2, r0, lsr #16
  000fc	e1a01c20	 mov         r1, r0, lsr #24
  00100	e5c53001	 strb        r3, [r5, #1]
  00104	e5c52002	 strb        r2, [r5, #2]
  00108	e5c51003	 strb        r1, [r5, #3]
  0010c	e5c50000	 strb        r0, [r5]

; 1412 :             pbuf2++;

  00110	e2855004	 add         r5, r5, #4
  00114	1afffff3	 bne         |$LL10@SDIPolling|
  00118		 |$LN15@SDIPolling|

; 1389 :       OALMSGX(OAL_IO, (TEXT("SDIPollingReceive blockLengthW %d\r\n"), blockLengthW));
; 1390 :       for (dwCount1 = 0; dwCount1 < blockLengthW; dwCount1++)

  00118	e2866001	 add         r6, r6, #1
  0011c	e156000b	 cmp         r6, r11
  00120	2a00002a	 bcs         |$LN18@SDIPolling|
  00124	eaffffe4	 b           |$LN90@SDIPolling|
  00128		 |$LN84@SDIPolling|

; 1400 :           {
; 1401 :             OALMSG(OAL_ERROR, (TEXT("SDIPollingReceive: TIMEOUT1\r\n")));

  00128	e59f3178	 ldr         r3, [pc, #0x178]
  0012c	e5933440	 ldr         r3, [r3, #0x440]
  00130	e3130001	 tst         r3, #1
  00134	0a000056	 beq         |$READ_ERROR$44587|
  00138	e59f0174	 ldr         r0, [pc, #0x174]

; 1430 :         {
; 1431 :             OALMSG(OAL_ERROR, (TEXT("SDIPollingReceive: TIMEOUT3\r\n")));

  0013c	eb000000	 bl          NKDbgPrintfW

; 1449 :     }
; 1450 : 
; 1451 : 
; 1452 : READ_ERROR:
; 1453 : 
; 1454 :     OALMSGX(OAL_IO, (TEXT("SDIPollingReceive error\r\n")));
; 1455 :     return FALSE;

  00140	ea000053	 b           |$READ_ERROR$44587|
  00144		 |$LL24@SDIPolling|

; 1364 :         {
; 1365 :            // check for a timeout
; 1366 :            dwCurrentTickCount = OALGetTickCount();

  00144	eb000000	 bl          OALGetTickCount

; 1367 :            if ( fTimeoutOverflow ? ( dwTimeout < dwCurrentTickCount && dwCurrentTickCount < dwCountStart )
; 1368 :              : ( dwTimeout < dwCurrentTickCount || dwCurrentTickCount < dwCountStart ) )

  00148	e35a0000	 cmp         r10, #0
  0014c	0a000002	 beq         |$LN34@SDIPolling|
  00150	e1590000	 cmp         r9, r0
  00154	2a000004	 bcs         |$LN91@SDIPolling|
  00158	ea000001	 b           |$LN103@SDIPolling|
  0015c		 |$LN34@SDIPolling|
  0015c	e1590000	 cmp         r9, r0
  00160	3a000023	 bcc         |$LN85@SDIPolling|
  00164		 |$LN103@SDIPolling|
  00164	e1500008	 cmp         r0, r8
  00168	3a000021	 bcc         |$LN85@SDIPolling|
  0016c		 |$LN91@SDIPolling|

; 1362 :     {
; 1363 :         while ((Read_MMC_STAT() & MMCHS_STAT_BRR) != MMCHS_STAT_BRR)

  0016c	e5972000	 ldr         r2, [r7]
  00170	e5923130	 ldr         r3, [r2, #0x130]
  00174	e2033020	 and         r3, r3, #0x20
  00178	e3530020	 cmp         r3, #0x20
  0017c	1afffff0	 bne         |$LL24@SDIPolling|

; 1371 :               goto READ_ERROR;
; 1372 :            }
; 1373 :         }
; 1374 :         Set_MMC_STAT(MMCHS_STAT_BRR);

  00180	e5923130	 ldr         r3, [r2, #0x130]

; 1375 :         fifoSizeW = dwLen / sizeof(DWORD);

  00184	e1a0e126	 mov         lr, r6, lsr #2

; 1376 :         if (dwLen % sizeof(DWORD)) fifoSizeW++;

  00188	e3160003	 tst         r6, #3
  0018c	e3833020	 orr         r3, r3, #0x20
  00190	128ee001	 addne       lr, lr, #1
  00194	e5823130	 str         r3, [r2, #0x130]

; 1377 :         for (dwCount2 = 0; dwCount2 < fifoSizeW; dwCount2++)

  00198	e35e0000	 cmp         lr, #0
  0019c	0a00000b	 beq         |$LN18@SDIPolling|
  001a0		 |$LL20@SDIPolling|

; 1378 :         {
; 1379 :             *pbuf2 = INREG32(&m_pbRegisters->MMCHS_DATA);

  001a0	e5973000	 ldr         r3, [r7]
  001a4	e25ee001	 subs        lr, lr, #1
  001a8	e5930120	 ldr         r0, [r3, #0x120]
  001ac	e1a03420	 mov         r3, r0, lsr #8
  001b0	e1a02820	 mov         r2, r0, lsr #16
  001b4	e1a01c20	 mov         r1, r0, lsr #24
  001b8	e5c53001	 strb        r3, [r5, #1]
  001bc	e5c52002	 strb        r2, [r5, #2]
  001c0	e5c51003	 strb        r1, [r5, #3]
  001c4	e5c50000	 strb        r0, [r5]

; 1380 :             pbuf2++;

  001c8	e2855004	 add         r5, r5, #4
  001cc	1afffff3	 bne         |$LL20@SDIPolling|
  001d0		 |$LN18@SDIPolling|

; 1413 :         }
; 1414 :       }
; 1415 :     }
; 1416 :     // recalculate timeout conditions
; 1417 :     dwCountStart = OALGetTickCount();

  001d0	eb000000	 bl          OALGetTickCount

; 1418 :     dwTimeout = dwCountStart + m_dwMaxTimeout;

  001d4	e59f20d4	 ldr         r2, [pc, #0xD4]
  001d8	e1a04000	 mov         r4, r0
  001dc	e5923000	 ldr         r3, [r2]
  001e0	e0835004	 add         r5, r3, r4

; 1419 :     if ( dwTimeout < dwCountStart )

  001e4	e1550004	 cmp         r5, r4
  001e8	2a000008	 bcs         |$LN7@SDIPolling|

; 1420 :         fTimeoutOverflow = TRUE;

  001ec	e3a06001	 mov         r6, #1

; 1421 :     else

  001f0	ea000012	 b           |$LN92@SDIPolling|
  001f4		 |$LN85@SDIPolling|

; 1369 :            {
; 1370 :               OALMSG(OAL_ERROR, (TEXT("SDIPollingReceive: TIMEOUT0\r\n")));

  001f4	e59f30ac	 ldr         r3, [pc, #0xAC]
  001f8	e5933440	 ldr         r3, [r3, #0x440]
  001fc	e3130001	 tst         r3, #1
  00200	0a000023	 beq         |$READ_ERROR$44587|
  00204	e59f00a0	 ldr         r0, [pc, #0xA0]

; 1430 :         {
; 1431 :             OALMSG(OAL_ERROR, (TEXT("SDIPollingReceive: TIMEOUT3\r\n")));

  00208	eb000000	 bl          NKDbgPrintfW

; 1449 :     }
; 1450 : 
; 1451 : 
; 1452 : READ_ERROR:
; 1453 : 
; 1454 :     OALMSGX(OAL_IO, (TEXT("SDIPollingReceive error\r\n")));
; 1455 :     return FALSE;

  0020c	ea000020	 b           |$READ_ERROR$44587|
  00210		 |$LN7@SDIPolling|

; 1422 :         fTimeoutOverflow = FALSE;

  00210	e3a06000	 mov         r6, #0

; 1423 : 
; 1424 :     while (((Read_MMC_STAT()&MMCHS_STAT_TC) != MMCHS_STAT_TC))

  00214	ea000009	 b           |$LN92@SDIPolling|
  00218		 |$LL5@SDIPolling|

; 1425 :     {
; 1426 :         // check for a timeout
; 1427 :         dwCurrentTickCount = OALGetTickCount();

  00218	eb000000	 bl          OALGetTickCount

; 1428 :         if ( fTimeoutOverflow ? ( dwTimeout < dwCurrentTickCount && dwCurrentTickCount < dwCountStart )
; 1429 :            : ( dwTimeout < dwCurrentTickCount || dwCurrentTickCount < dwCountStart ) )

  0021c	e3560000	 cmp         r6, #0
  00220	0a000002	 beq         |$LN50@SDIPolling|
  00224	e1550000	 cmp         r5, r0
  00228	2a000004	 bcs         |$LN92@SDIPolling|
  0022c	ea000001	 b           |$LN105@SDIPolling|
  00230		 |$LN50@SDIPolling|
  00230	e1550000	 cmp         r5, r0
  00234	3a000011	 bcc         |$LN86@SDIPolling|
  00238		 |$LN105@SDIPolling|
  00238	e1500004	 cmp         r0, r4
  0023c	3a00000f	 bcc         |$LN86@SDIPolling|
  00240		 |$LN92@SDIPolling|

; 1423 : 
; 1424 :     while (((Read_MMC_STAT()&MMCHS_STAT_TC) != MMCHS_STAT_TC))

  00240	e5972000	 ldr         r2, [r7]
  00244	e5923130	 ldr         r3, [r2, #0x130]
  00248	e2033002	 and         r3, r3, #2
  0024c	e3530002	 cmp         r3, #2
  00250	1afffff0	 bne         |$LL5@SDIPolling|

; 1432 :             goto READ_ERROR;
; 1433 :         }
; 1434 :     }
; 1435 : 
; 1436 :     Set_MMC_STAT(MMCHS_STAT_TC);

  00254	e5923130	 ldr         r3, [r2, #0x130]
  00258	e3833002	 orr         r3, r3, #2
  0025c	e5823130	 str         r3, [r2, #0x130]

; 1437 :     // Check if there is no CRC error
; 1438 :     if (!(Read_MMC_STAT() & MMCHS_STAT_DCRC))

  00260	e5972000	 ldr         r2, [r7]
  00264	e5923130	 ldr         r3, [r2, #0x130]
  00268	e3130602	 tst         r3, #2, 12

; 1439 :     {
; 1440 :         MMC_STAT = Read_MMC_STAT();

  0026c	e5923130	 ldr         r3, [r2, #0x130]

; 1441 :         Write_MMC_STAT(MMC_STAT);
; 1442 :         return TRUE;

  00270	e5823130	 str         r3, [r2, #0x130]
  00274	1a000006	 bne         |$READ_ERROR$44587|
  00278	e3a00001	 mov         r0, #1
  0027c	ea000005	 b           |$LN28@SDIPolling|
  00280		 |$LN86@SDIPolling|

; 1430 :         {
; 1431 :             OALMSG(OAL_ERROR, (TEXT("SDIPollingReceive: TIMEOUT3\r\n")));

  00280	e59f3020	 ldr         r3, [pc, #0x20]
  00284	e5933440	 ldr         r3, [r3, #0x440]
  00288	e3130001	 tst         r3, #1
  0028c	159f0010	 ldrne       r0, [pc, #0x10]
  00290	1b000000	 blne        NKDbgPrintfW
  00294		 |$READ_ERROR$44587|

; 1443 :     }
; 1444 :     else
; 1445 :     {
; 1446 :         MMC_STAT = Read_MMC_STAT();
; 1447 :         Write_MMC_STAT(MMC_STAT);
; 1448 :         return FALSE;

  00294	e3a00000	 mov         r0, #0
  00298		 |$LN28@SDIPolling|

; 1456 : }

  00298	e28dd004	 add         sp, sp, #4
  0029c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  002a0	e12fff1e	 bx          lr
  002a4		 |$LN109@SDIPolling|
  002a4		 |$LN110@SDIPolling|
  002a4	00000000	 DCD         |??_C@_1DM@FAHGNIG@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA3?$AA?$AN?$AA?6?$AA?$AA@|
  002a8		 |$LN111@SDIPolling|
  002a8	00000000	 DCD         |dpCurSettings|
  002ac		 |$LN112@SDIPolling|
  002ac	00000000	 DCD         |??_C@_1DM@ILIIGKGF@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA0?$AA?$AN?$AA?6?$AA?$AA@|
  002b0		 |$LN113@SDIPolling|
  002b0	00000000	 DCD         |m_dwMaxTimeout|
  002b4		 |$LN114@SDIPolling|
  002b4	00000000	 DCD         |??_C@_1DM@EHCCGKPL@?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?3?$AA?5?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA1?$AA?$AN?$AA?6?$AA?$AA@|
  002b8		 |$LN115@SDIPolling|
  002b8	00000000	 DCD         |m_dwSDIOCard|
  002bc		 |$LN116@SDIPolling|
  002bc	00000000	 DCD         |m_pbRegisters|
  002c0		 |$M45280|

			 ENDP  ; |SDIPollingReceive|

	EXPORT	|SdhcSetInterface|

  00000			 AREA	 |.pdata|, PDATA
|$T45307| DCD	|$LN14@SdhcSetInt|
	DCD	0x40000d00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SdhcSetInterface| PROC

; 449  : {

  00000		 |$LN14@SdhcSetInt|
  00000		 |$M45304|

; 450  :     UpdateSystemClock(TRUE);

  00000	e59f2028	 ldr         r2, [pc, #0x28]
  00004	e3a01009	 mov         r1, #9

; 451  :     if (SD_INTERFACE_SD_4BIT == mode)

  00008	e3500001	 cmp         r0, #1
  0000c	e5923000	 ldr         r3, [r2]
  00010	e5831010	 str         r1, [r3, #0x10]

; 452  :     {
; 453  :         OALMSGX(OAL_INFO, (TEXT("SDHC: 4 bit mode\r\n")));
; 454  :         SETREG32(&m_pbRegisters->MMCHS_HCTL, MMCHS_HCTL_DTW);

  00014	e5922000	 ldr         r2, [r2]
  00018	e5923128	 ldr         r3, [r2, #0x128]
  0001c	03833002	 orreq       r3, r3, #2

; 455  :         //OALMSGX(OAL_INFO, (TEXT("SdhcSetInterface MMCHS_HCTL value = %X\r\n"), m_pbRegisters->MMCHS_HCTL ));
; 456  :     }
; 457  :     else
; 458  :     {
; 459  :         OALMSGX(OAL_INFO, (TEXT("SDHC: 1 bit mode\r\n")));
; 460  :         CLRREG32(&m_pbRegisters->MMCHS_HCTL, MMCHS_HCTL_DTW);

  00020	05823128	 streq       r3, [r2, #0x128]
  00024	13c33002	 bicne       r3, r3, #2
  00028	15823128	 strne       r3, [r2, #0x128]

; 461  :         //OALMSGX(OAL_INFO, (TEXT("SdhcSetInterface MMCHS_HCTL value = %X\r\n"), m_pbRegisters->MMCHS_HCTL ));
; 462  :     }
; 463  : 
; 464  :     // ??? SdhcSetClockRate(&pInterface->ClockRate);
; 465  :     UpdateSystemClock(FALSE);
; 466  : }

  0002c	e12fff1e	 bx          lr
  00030		 |$LN15@SdhcSetInt|
  00030		 |$LN16@SdhcSetInt|
  00030	00000000	 DCD         |m_pbRegisters|
  00034		 |$M45305|

			 ENDP  ; |SdhcSetInterface|

	EXPORT	|??_C@_1EG@HOIABLIC@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@HNKHACLA@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAg?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAf?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@JOOFMKFB@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@LNFDCIBN@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@PLCIGAJB@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@OHDKIEBD@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAR?$AAC?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@MBAMAGDP@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAB?$AAU?$AAS?$AAY?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@GCMKJBGI@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALStall|

  00000			 AREA	 |.pdata|, PDATA
|$T45388| DCD	|$LN80@CommandCom|
	DCD	0x4000ae01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@HOIABLIC@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "D", 0x0, "I", 0x0, "P", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, "R", 0x0, "e", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@HNKHACLA@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAg?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAf?$AAo?$AAr@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "g"
	DCB	0x0, "e", 0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, ":", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@JOOFMKFB@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAC@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " "
	DCB	0x0, "C", 0x0, "T", 0x0, "O", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@LNFDCIBN@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAD@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " "
	DCB	0x0, "D", 0x0, "C", 0x0, "R", 0x0, "C", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@PLCIGAJB@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAD@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " "
	DCB	0x0, "D", 0x0, "T", 0x0, "O", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@OHDKIEBD@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAR?$AAC?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "C", 0x0, "R", 0x0, "C", 0x0, " ", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@MBAMAGDP@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAB?$AAU?$AAS?$AAY?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "C"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, " ", 0x0, "B", 0x0, "U"
	DCB	0x0, "S", 0x0, "Y", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@GCMKJBGI@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "C"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CommandCompleteHandler| PROC

; 943  : {

  00000		 |$LN80@CommandCom|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M45385|
  00004	e1a06000	 mov         r6, r0

; 944  :     DWORD               dwCurrentTickCount;
; 945  :     DWORD               dwTimeout;
; 946  :     DWORD               dwCountStart;
; 947  :     BOOL                fTimeoutOverflow = FALSE;
; 948  :     SD_API_STATUS       status = SD_API_STATUS_PENDING;
; 949  :     DWORD MMC_STAT;
; 950  :     DWORD MmcPstateRegValue;
; 951  :     DWORD MmcStatBits;
; 952  : 
; 953  :     OALMSGX(OAL_FUNC, (TEXT("SDHC CommandCompleteHandler\r\n")));
; 954  : 
; 955  :     MMC_STAT = Read_MMC_STAT();

  00008	e59fa2a4	 ldr         r10, [pc, #0x2A4]
  0000c	e3a09000	 mov         r9, #0
  00010	e3a04001	 mov         r4, #1
  00014	e59a3000	 ldr         r3, [r10]
  00018	e5938130	 ldr         r8, [r3, #0x130]
  0001c	e1a02003	 mov         r2, r3

; 956  :     MmcPstateRegValue = INREG32(&m_pbRegisters->MMCHS_PSTATE);

  00020	e5923124	 ldr         r3, [r2, #0x124]

; 957  : 
; 958  :     if ( MmcPstateRegValue & MMCHS_PSTAT_DATI )

  00024	e3130002	 tst         r3, #2
  00028	0a000024	 beq         |$LN73@CommandCom|

; 959  :     {
; 960  :         if ( pRequest->CommandResponse.ResponseType == ResponseR1b )

  0002c	e596301c	 ldr         r3, [r6, #0x1C]
  00030	e3530002	 cmp         r3, #2
  00034	1a000021	 bne         |$LN73@CommandCom|

; 961  :         {
; 962  :             OALMSGX(OAL_WARN, (TEXT("SDHC: Card busy after command\r\n")));
; 963  :             // calculate timeout conditions
; 964  :             dwCountStart = OALGetTickCount();

  00038	eb000000	 bl          OALGetTickCount

; 965  :             dwTimeout = dwCountStart + m_dwMaxTimeout;

  0003c	e59f326c	 ldr         r3, [pc, #0x26C]
  00040	e1a07000	 mov         r7, r0
  00044	e5933000	 ldr         r3, [r3]
  00048	e0835007	 add         r5, r3, r7
  0004c	e59a3000	 ldr         r3, [r10]

; 966  :             if ( dwTimeout < dwCountStart )

  00050	e1550007	 cmp         r5, r7

; 967  :                 fTimeoutOverflow = TRUE;

  00054	33a09001	 movcc       r9, #1

; 968  : 
; 969  :             MMC_STAT = Read_MMC_STAT();

  00058	e5938130	 ldr         r8, [r3, #0x130]
  0005c	e1a02003	 mov         r2, r3

; 970  :             MmcPstateRegValue = INREG32(&m_pbRegisters->MMCHS_PSTATE);

  00060	e5923124	 ldr         r3, [r2, #0x124]

; 971  : 
; 972  :             while ( (MmcPstateRegValue & MMCHS_PSTAT_DATI) && !( MMC_STAT & ( MMCHS_STAT_CCRC | MMCHS_STAT_CTO | MMCHS_STAT_DCRC | MMCHS_STAT_DTO )) )

  00064	e3130002	 tst         r3, #2
  00068	0a000014	 beq         |$LN73@CommandCom|
  0006c		 |$LL25@CommandCom|
  0006c	e3180833	 tst         r8, #0x33, 16
  00070	1a000012	 bne         |$LN73@CommandCom|

; 973  :             {
; 974  :                 OALStall(2 * 1000);

  00074	e3a00e7d	 mov         r0, #0x7D, 28
  00078	eb000000	 bl          OALStall

; 975  : 
; 976  :                 MMC_STAT = Read_MMC_STAT();

  0007c	e59a3000	 ldr         r3, [r10]
  00080	e5938130	 ldr         r8, [r3, #0x130]

; 977  :                 MmcPstateRegValue = INREG32(&m_pbRegisters->MMCHS_PSTATE);

  00084	e593b124	 ldr         r11, [r3, #0x124]

; 978  : 
; 979  :                 // check for card ejection
; 980  :                 if ( !SdhcCardDetect() )

  00088	eb000000	 bl          SdhcCardDetect
  0008c	e3500000	 cmp         r0, #0
  00090	0a000034	 beq         |$LN66@CommandCom|

; 985  :                 }
; 986  : 
; 987  :                 // check for a timeout
; 988  :                 dwCurrentTickCount = OALGetTickCount();

  00094	eb000000	 bl          OALGetTickCount

; 989  :                 if ( fTimeoutOverflow ? ( dwTimeout < dwCurrentTickCount && dwCurrentTickCount < dwCountStart )
; 990  :                     : ( dwTimeout < dwCurrentTickCount ) )

  00098	e3590000	 cmp         r9, #0
  0009c	0a000003	 beq         |$LN37@CommandCom|
  000a0	e1550000	 cmp         r5, r0
  000a4	2a000003	 bcs         |$LN35@CommandCom|
  000a8	e1500007	 cmp         r0, r7
  000ac	ea000000	 b           |$LN76@CommandCom|
  000b0		 |$LN37@CommandCom|
  000b0	e1550000	 cmp         r5, r0
  000b4		 |$LN76@CommandCom|
  000b4	3a000024	 bcc         |$LN67@CommandCom|
  000b8		 |$LN35@CommandCom|

; 971  : 
; 972  :             while ( (MmcPstateRegValue & MMCHS_PSTAT_DATI) && !( MMC_STAT & ( MMCHS_STAT_CCRC | MMCHS_STAT_CTO | MMCHS_STAT_DCRC | MMCHS_STAT_DTO )) )

  000b8	e31b0002	 tst         r11, #2
  000bc	1affffea	 bne         |$LL25@CommandCom|
  000c0		 |$LN73@CommandCom|

; 995  :                 }
; 996  :             }
; 997  : 
; 998  :             //OALMSG(OAL_WARN, (TEXT("Card exited busy state.\r\n")));
; 999  :         }
; 1000 :     }
; 1001 : 
; 1002 :     MmcStatBits = 0;
; 1003 : 
; 1004 :     if ( MMC_STAT & MMCHS_STAT_CCRC ) // command CRC error

  000c0	e59f71d0	 ldr         r7, [pc, #0x1D0]
  000c4	e3180802	 tst         r8, #2, 16
  000c8	e3a05000	 mov         r5, #0

; 1005 :     {
; 1006 :         status = SD_API_STATUS_CRC_ERROR;
; 1007 :         MmcStatBits |= MMCHS_STAT_CCRC;
; 1008 :         OALMSG(OAL_ERROR, (TEXT("SDHC: command CRC error!\r\n")));

  000cc	15973440	 ldrne       r3, [r7, #0x440]
  000d0	13a04137	 movne       r4, #0x37, 2
  000d4	13a05802	 movne       r5, #2, 16
  000d8	13130001	 tstne       r3, #1
  000dc	159f01c8	 ldrne       r0, [pc, #0x1C8]
  000e0	1b000000	 blne        NKDbgPrintfW

; 1009 :     }
; 1010 :     if ( MMC_STAT & MMCHS_STAT_DTO ) // data timeout

  000e4	e3180601	 tst         r8, #1, 12
  000e8	15973440	 ldrne       r3, [r7, #0x440]

; 1011 :     {
; 1012 :         status = SD_API_STATUS_RESPONSE_TIMEOUT;

  000ec	13a04153	 movne       r4, #0x53, 2

; 1013 :         MmcStatBits |= MMCHS_STAT_DTO;

  000f0	13855601	 orrne       r5, r5, #1, 12

; 1014 :         OALMSG(OAL_ERROR, (TEXT("SDHC: command response timeout DTO!\r\n")));

  000f4	13130001	 tstne       r3, #1
  000f8	159f01a8	 ldrne       r0, [pc, #0x1A8]
  000fc	1b000000	 blne        NKDbgPrintfW

; 1015 :     }
; 1016 :     if ( MMC_STAT & MMCHS_STAT_DCRC ) // data CRC error

  00100	e3180602	 tst         r8, #2, 12
  00104	15973440	 ldrne       r3, [r7, #0x440]

; 1017 :     {
; 1018 :         status = SD_API_STATUS_RESPONSE_TIMEOUT;

  00108	13a04153	 movne       r4, #0x53, 2

; 1019 :         MmcStatBits |= MMCHS_STAT_DCRC;

  0010c	13855602	 orrne       r5, r5, #2, 12

; 1020 :         OALMSG(OAL_ERROR, (TEXT("SDHC: command response timeout DCRC!\r\n")));

  00110	13130001	 tstne       r3, #1
  00114	159f0188	 ldrne       r0, [pc, #0x188]
  00118	1b000000	 blne        NKDbgPrintfW

; 1021 :     }
; 1022 :     if ( MMC_STAT & MMCHS_STAT_CTO ) // command response timeout

  0011c	e3180801	 tst         r8, #1, 16
  00120	15973440	 ldrne       r3, [r7, #0x440]

; 1023 :     {
; 1024 :         status = SD_API_STATUS_RESPONSE_TIMEOUT;

  00124	13a04153	 movne       r4, #0x53, 2

; 1025 :         MmcStatBits |= MMCHS_STAT_CTO;

  00128	13855801	 orrne       r5, r5, #1, 16

; 1026 :         OALMSG(OAL_ERROR, (TEXT("SDHC: command response timeout CTO!\r\n")));

  0012c	13130001	 tstne       r3, #1
  00130	159f0168	 ldrne       r0, [pc, #0x168]
  00134	1b000000	 blne        NKDbgPrintfW

; 1027 :     }
; 1028 :     if ( MmcStatBits ) 

  00138	e3550000	 cmp         r5, #0
  0013c	0a000010	 beq         |$LN17@CommandCom|
  00140	e59a3000	 ldr         r3, [r10]

; 1029 :     {
; 1030 :         // clear the status error bits
; 1031 :         Write_MMC_STAT(MmcStatBits);

  00144	e5835130	 str         r5, [r3, #0x130]

; 1032 :         goto TRANSFER_DONE;

  00148	ea000033	 b           |$TRANSFER_DONE$44441|
  0014c		 |$LN67@CommandCom|

; 991  :                 {
; 992  :                     OALMSG(OAL_ERROR, (TEXT("SDHC: Card BUSY timeout!\r\n")));

  0014c	e59f3144	 ldr         r3, [pc, #0x144]
  00150	e5933440	 ldr         r3, [r3, #0x440]
  00154	e3130001	 tst         r3, #1
  00158	159f013c	 ldrne       r0, [pc, #0x13C]
  0015c	1b000000	 blne        NKDbgPrintfW

; 993  :                     status = SD_API_STATUS_RESPONSE_TIMEOUT;

  00160	e3a04153	 mov         r4, #0x53, 2

; 994  :                     goto TRANSFER_DONE;

  00164	ea00003f	 b           |$LN75@CommandCom|
  00168		 |$LN66@CommandCom|

; 981  :                 {
; 982  :                     OALMSG(OAL_ERROR, (TEXT("SDHC: Card removed!\r\n")));

  00168	e59f3128	 ldr         r3, [pc, #0x128]
  0016c	e5933440	 ldr         r3, [r3, #0x440]
  00170	e3130001	 tst         r3, #1
  00174	159f0118	 ldrne       r0, [pc, #0x118]
  00178	1b000000	 blne        NKDbgPrintfW
  0017c		 |$LN31@CommandCom|

; 983  :                     status = SD_API_STATUS_DEVICE_REMOVED;

  0017c	e3a04147	 mov         r4, #0x47, 2

; 984  :                     goto TRANSFER_DONE;

  00180	ea000038	 b           |$LN75@CommandCom|
  00184		 |$LN17@CommandCom|

; 1033 :     }
; 1034 : 
; 1035 :     // get the response information
; 1036 :     if (pRequest->CommandResponse.ResponseType == NoResponse)

  00184	e596301c	 ldr         r3, [r6, #0x1C]
  00188	e3530000	 cmp         r3, #0

; 1037 :     {
; 1038 :         OALMSGX(OAL_IO, (TEXT("SDHC: no response (none expected)\r\n")));
; 1039 :         status = SD_API_STATUS_SUCCESS;

  0018c	03a04000	 moveq       r4, #0
  00190	0a000023	 beq         |$LN69@CommandCom|

; 1040 :         goto TRANSFER_DONE;
; 1041 :     }
; 1042 :     else
; 1043 :     {
; 1044 :         status =  GetCommandResponse(pRequest);

  00194	e1a00006	 mov         r0, r6
  00198	eb000000	 bl          GetCommandResponse
  0019c	e1b04000	 movs        r4, r0

; 1045 :         if (!SD_API_SUCCESS(status))

  001a0	5a000006	 bpl         |$LN14@CommandCom|

; 1046 :         {
; 1047 :             OALMSG(OAL_ERROR, (TEXT("SDHC: Error getting response for command:0x%x\r\n"), pRequest->CommandCode));

  001a4	e5973440	 ldr         r3, [r7, #0x440]
  001a8	e3130001	 tst         r3, #1
  001ac	0a00001a	 beq         |$TRANSFER_DONE$44441|
  001b0	e5d61014	 ldrb        r1, [r6, #0x14]
  001b4	e59f00d4	 ldr         r0, [pc, #0xD4]
  001b8	eb000000	 bl          NKDbgPrintfW

; 1048 :             goto TRANSFER_DONE;     

  001bc	ea000016	 b           |$TRANSFER_DONE$44441|
  001c0		 |$LN14@CommandCom|

; 1049 :         }
; 1050 :     }
; 1051 : 
; 1052 :     if (SD_COMMAND != pRequest->TransferClass) // data transfer

  001c0	e5963010	 ldr         r3, [r6, #0x10]
  001c4	e3530002	 cmp         r3, #2
  001c8	0a000013	 beq         |$TRANSFER_DONE$44441|

; 1053 :     {
; 1054 :         DWORD cbTransfer = TRANSFER_SIZE(pRequest);

  001cc	e5962040	 ldr         r2, [r6, #0x40]
  001d0	e596103c	 ldr         r1, [r6, #0x3C]

; 1055 :         BOOL     fRet;
; 1056 : 
; 1057 :         switch (pRequest->TransferClass)

  001d4	e3530000	 cmp         r3, #0
  001d8	1a00000a	 bne         |$LN9@CommandCom|

; 1058 :         {
; 1059 :         case SD_READ:
; 1060 :             fRet = SDIPollingReceive(pRequest->pBlockBuffer, cbTransfer);

  001dc	e5960048	 ldr         r0, [r6, #0x48]
  001e0	e0010192	 mul         r1, r2, r1
  001e4	eb000000	 bl          SDIPollingReceive
  001e8	e3500000	 cmp         r0, #0

; 1061 :             if (!fRet)

  001ec	1a000005	 bne         |$LN9@CommandCom|

; 1062 :             {
; 1063 :                 OALMSG(OAL_ERROR, (TEXT("SDHC: SDIPollingReceive() failed\r\n")));

  001f0	e5973440	 ldr         r3, [r7, #0x440]
  001f4	e3130001	 tst         r3, #1
  001f8	159f008c	 ldrne       r0, [pc, #0x8C]
  001fc	1b000000	 blne        NKDbgPrintfW

; 1064 :                 status = SD_API_STATUS_DATA_ERROR;

  00200	e3a04133	 mov         r4, #0x33, 2

; 1065 :                 goto TRANSFER_DONE;

  00204	ea000017	 b           |$LN75@CommandCom|
  00208		 |$LN9@CommandCom|

; 1066 :             }
; 1067 :             else
; 1068 :             {
; 1069 : #ifdef DEBUG
; 1070 :                 DWORD dwTemp = 0;
; 1071 :                 while ( dwTemp < cbTransfer && (dwTemp < (HEXBUFSIZE / 2 - 1) ) )
; 1072 :                 {
; 1073 :                     szHexBuf[dwTemp*2] = pRequest->pBlockBuffer[dwTemp] / 16;
; 1074 :                     szHexBuf[dwTemp*2+1] = pRequest->pBlockBuffer[dwTemp] % 16;
; 1075 : 
; 1076 :                     if ( szHexBuf[dwTemp*2] < 10 )
; 1077 :                         szHexBuf[dwTemp*2] += '0';
; 1078 :                     else
; 1079 :                         szHexBuf[dwTemp*2] += 'a' - 10;
; 1080 : 
; 1081 :                     if ( szHexBuf[dwTemp*2+1] < 10 )
; 1082 :                         szHexBuf[dwTemp*2+1] += '0';
; 1083 :                     else
; 1084 :                         szHexBuf[dwTemp*2+1] += 'a' - 10;
; 1085 : 
; 1086 :                     dwTemp++;
; 1087 :                 }
; 1088 :                 szHexBuf[dwTemp*2] = 0;
; 1089 :                 OALMSGX(OAL_IO, (TEXT("PollingReceive succesfully received %d bytes\r\n  {%S}\r\n"), cbTransfer, szHexBuf));
; 1090 : #endif
; 1091 :             }
; 1092 :             break;
; 1093 : 
; 1094 : #if 0
; 1095 :         case SD_WRITE:
; 1096 :             {
; 1097 : #ifdef DEBUG
; 1098 :                 DWORD dwTemp = 0;
; 1099 :                 while ( dwTemp < cbTransfer && (dwTemp < (HEXBUFSIZE / 2 - 1) ) )
; 1100 :                 {
; 1101 :                     szHexBuf[dwTemp*2] = pRequest->pBlockBuffer[dwTemp] / 16;
; 1102 :                     szHexBuf[dwTemp*2+1] = pRequest->pBlockBuffer[dwTemp] % 16;
; 1103 : 
; 1104 :                     if ( szHexBuf[dwTemp*2] < 10 )
; 1105 :                         szHexBuf[dwTemp*2] += '0';
; 1106 :                     else
; 1107 :                         szHexBuf[dwTemp*2] += 'a' - 10;
; 1108 : 
; 1109 :                     if ( szHexBuf[dwTemp*2+1] < 10 )
; 1110 :                         szHexBuf[dwTemp*2+1] += '0';
; 1111 :                     else
; 1112 :                         szHexBuf[dwTemp*2+1] += 'a' - 10;
; 1113 : 
; 1114 :                     dwTemp++;
; 1115 :                 }
; 1116 :                 szHexBuf[dwTemp*2] = 0;
; 1117 : #endif
; 1118 :             }
; 1119 : 
; 1120 :             fRet = SDIPollingTransmit(pRequest->pBlockBuffer, cbTransfer);
; 1121 :             if ( !fRet )
; 1122 :             {
; 1123 :                 OALMSG(OAL_ERROR, (TEXT("SDHC: SDIPollingTransmit() failed\r\n")));
; 1124 : #ifdef DEBUG
; 1125 :                 OALMSGX(OAL_IO, (TEXT("PollingTransmit failed to send %d bytes\r\n  {%S}\r\n"), cbTransfer, szHexBuf ));
; 1126 : #endif
; 1127 :                 status = SD_API_STATUS_DATA_ERROR;
; 1128 :                 goto TRANSFER_DONE;
; 1129 :             }
; 1130 : #ifdef DEBUG
; 1131 :             else
; 1132 :             {
; 1133 :                 OALMSGX(OAL_IO, (TEXT("PollingTransmit succesfully sent %d bytes\r\n  {%S}\r\n"), cbTransfer, szHexBuf ));
; 1134 :             }
; 1135 : #endif
; 1136 :             break;
; 1137 : #endif
; 1138 :         }
; 1139 : 
; 1140 :         if (!m_fCardPresent)

  00208	e59f3078	 ldr         r3, [pc, #0x78]
  0020c	e5933000	 ldr         r3, [r3]
  00210	e3530000	 cmp         r3, #0

; 1141 :             status = SD_API_STATUS_DEVICE_REMOVED;
; 1142 :         else

  00214	0affffd8	 beq         |$LN31@CommandCom|

; 1143 :             status = SD_API_STATUS_SUCCESS;

  00218	e3a04000	 mov         r4, #0
  0021c		 |$TRANSFER_DONE$44441|

; 1144 :     }
; 1145 : 
; 1146 : TRANSFER_DONE:
; 1147 : 
; 1148 :     if ( status == SD_API_STATUS_SUCCESS )

  0021c	e3540000	 cmp         r4, #0
  00220	1a000010	 bne         |$LN75@CommandCom|
  00224		 |$LN69@CommandCom|

; 1149 :     {
; 1150 :         if ( m_fAppCmdMode )

  00224	e59f2058	 ldr         r2, [pc, #0x58]
  00228	e5923000	 ldr         r3, [r2]
  0022c	e3530000	 cmp         r3, #0

; 1151 :         {
; 1152 :             m_fAppCmdMode = FALSE;

  00230	13a03000	 movne       r3, #0
  00234	1a000005	 bne         |$LN77@CommandCom|

; 1153 :             OALMSGX(OAL_IO, (TEXT("SDHC: go to Standard Command Mode\r\n")));
; 1154 :         }
; 1155 :         else if ( pRequest && pRequest->CommandCode == 55 )

  00238	e3560000	 cmp         r6, #0
  0023c	0a000004	 beq         |$LN2@CommandCom|
  00240	e5d63014	 ldrb        r3, [r6, #0x14]
  00244	e3530037	 cmp         r3, #0x37
  00248	1a000001	 bne         |$LN2@CommandCom|

; 1156 :         {
; 1157 :             m_fAppCmdMode = TRUE;

  0024c	e3a03001	 mov         r3, #1
  00250		 |$LN77@CommandCom|
  00250	e5823000	 str         r3, [r2]
  00254		 |$LN2@CommandCom|

; 1158 :             OALMSGX(OAL_IO, (TEXT("SDHC: go to Application Specific Command Mode\r\n")));
; 1159 :         }
; 1160 : 
; 1161 :         if ( pRequest->CommandCode == SD_CMD_MMC_SEND_OPCOND )

  00254	e5d63014	 ldrb        r3, [r6, #0x14]
  00258	e3530001	 cmp         r3, #1

; 1162 :         {
; 1163 :             OALMSGX(OAL_IO, (TEXT("SDHC: Card is MMC\r\n") ) );
; 1164 :             m_fMMCMode = TRUE;

  0025c	059f301c	 ldreq       r3, [pc, #0x1C]
  00260	03a02001	 moveq       r2, #1
  00264	05832000	 streq       r2, [r3]
  00268		 |$LN75@CommandCom|
  00268	e59a2000	 ldr         r2, [r10]

; 1165 :         }
; 1166 :     }
; 1167 : 
; 1168 :     // Clear the MMC_STAT register
; 1169 :     MMC_STAT = Read_MMC_STAT();
; 1170 :     Write_MMC_STAT(MMC_STAT); 
; 1171 :     //UpdateSystemClock(FALSE);
; 1172 : 
; 1173 :     return status;
; 1174 : }

  0026c	e1a00004	 mov         r0, r4
  00270	e5923130	 ldr         r3, [r2, #0x130]
  00274	e5823130	 str         r3, [r2, #0x130]
  00278	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0027c	e12fff1e	 bx          lr
  00280		 |$LN81@CommandCom|
  00280		 |$LN82@CommandCom|
  00280	00000000	 DCD         |m_fMMCMode|
  00284		 |$LN83@CommandCom|
  00284	00000000	 DCD         |m_fAppCmdMode|
  00288		 |$LN84@CommandCom|
  00288	00000000	 DCD         |m_fCardPresent|
  0028c		 |$LN85@CommandCom|
  0028c	00000000	 DCD         |??_C@_1EG@HOIABLIC@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAS?$AAD?$AAI?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd@|
  00290		 |$LN86@CommandCom|
  00290	00000000	 DCD         |??_C@_1GA@HNKHACLA@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAg?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAf?$AAo?$AAr@|
  00294		 |$LN87@CommandCom|
  00294	00000000	 DCD         |??_C@_1CM@GCMKJBGI@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  00298		 |$LN88@CommandCom|
  00298	00000000	 DCD         |dpCurSettings|
  0029c		 |$LN89@CommandCom|
  0029c	00000000	 DCD         |??_C@_1DG@MBAMAGDP@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAB?$AAU?$AAS?$AAY?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  002a0		 |$LN90@CommandCom|
  002a0	00000000	 DCD         |??_C@_1EM@JOOFMKFB@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAC@|
  002a4		 |$LN91@CommandCom|
  002a4	00000000	 DCD         |??_C@_1EO@LNFDCIBN@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAD@|
  002a8		 |$LN92@CommandCom|
  002a8	00000000	 DCD         |??_C@_1EM@PLCIGAJB@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAs?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?5?$AAD@|
  002ac		 |$LN93@CommandCom|
  002ac	00000000	 DCD         |??_C@_1DG@OHDKIEBD@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAR?$AAC?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  002b0		 |$LN94@CommandCom|
  002b0	00000000	 DCD         |m_dwMaxTimeout|
  002b4		 |$LN95@CommandCom|
  002b4	00000000	 DCD         |m_pbRegisters|
  002b8		 |$M45386|

			 ENDP  ; |CommandCompleteHandler|

	IMPORT	|SocSdhcDevconf|
	IMPORT	|OALGetSiliconIdCode|

  00000			 AREA	 |.pdata|, PDATA
|$T45435| DCD	|$LN19@SdhcContro|
	DCD	0x40005002
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SdhcControllerInit| PROC

; 338  : {

  00000		 |$LN19@SdhcContro|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M45432|

; 339  :     DWORD dwClockRate;
; 340  :     DWORD dwIDVal;
; 341  : 
; 342  :     m_fFirstTime = TRUE;

  00008	e59f312c	 ldr         r3, [pc, #0x12C]

; 343  :     m_fAppCmdMode = FALSE;
; 344  : 
; 345  :     m_pbRegisters = NULL;
; 346  :     m_fCardPresent = FALSE;

  0000c	e59f1124	 ldr         r1, [pc, #0x124]

; 347  : 
; 348  :     m_dwMaxTimeout = DEFAULT_TIMEOUT_VALUE;
; 349  :     m_fMMCMode = FALSE;
; 350  : 
; 351  :     m_dwSlot = MMCSLOT_1;
; 352  :     m_dwSDIOCard = 0;
; 353  : 
; 354  :     // initialize dvfs variables
; 355  :     m_fCardInitialized = FALSE;
; 356  :     m_TransferClass = 0;

  00010	e3a07001	 mov         r7, #1
  00014	e5837000	 str         r7, [r3]
  00018	e3a03000	 mov         r3, #0
  0001c	e5813000	 str         r3, [r1]
  00020	e59fe10c	 ldr         lr, [pc, #0x10C]
  00024	e3a03c27	 mov         r3, #0x27, 24
  00028	e3837010	 orr         r7, r3, #0x10
  0002c	e59f60fc	 ldr         r6, [pc, #0xFC]
  00030	e3a03000	 mov         r3, #0
  00034	e58e3000	 str         r3, [lr]
  00038	e59f80ec	 ldr         r8, [pc, #0xEC]
  0003c	e3a03001	 mov         r3, #1
  00040	e5863000	 str         r3, [r6]
  00044	e59f40dc	 ldr         r4, [pc, #0xDC]
  00048	e3a03000	 mov         r3, #0
  0004c	e5883000	 str         r3, [r8]
  00050	e59f20cc	 ldr         r2, [pc, #0xCC]
  00054	e59f90c4	 ldr         r9, [pc, #0xC4]
  00058	e59f50bc	 ldr         r5, [pc, #0xBC]
  0005c	e59f00b4	 ldr         r0, [pc, #0xB4]
  00060	e3a03000	 mov         r3, #0
  00064	e5843000	 str         r3, [r4]
  00068	e3a03000	 mov         r3, #0
  0006c	e3a0a000	 mov         r10, #0
  00070	e3a0b000	 mov         r11, #0
  00074	e1c530b0	 strh        r3, [r5]
  00078	e582a000	 str         r10, [r2]
  0007c	e589b000	 str         r11, [r9]
  00080	e5807000	 str         r7, [r0]

; 357  : 
; 358  :     dwIDVal = OALGetSiliconIdCode();        

  00084	eb000000	 bl          OALGetSiliconIdCode

; 359  :     m_dwCPURev = (dwIDVal >> 28) + 1;

  00088	e59f2084	 ldr         r2, [pc, #0x84]
  0008c	e1a03e20	 mov         r3, r0, lsr #28

; 360  :     //OALMSG(1, (TEXT("cpu_rev: %d \r\n"), m_dwCPURev));
; 361  : 
; 362  : #if 0
; 363  :     //35xx-ES1.0  Sil errata fix
; 364  :     BusIoControl(m_hParentBus, IOCTL_BUS_REQUEST_CLOCK, &id, sizeof(id), NULL, 0, NULL, NULL);
; 365  : #endif
; 366  : 
; 367  :     InitializeHardware(m_dwSlot);

  00090	e5960000	 ldr         r0, [r6]
  00094	e2833001	 add         r3, r3, #1
  00098	e5823000	 str         r3, [r2]
  0009c	eb000000	 bl          InitializeHardware

; 368  : 
; 369  :     // turn power and system clocks on
; 370  :     SocSdhcDevconf(m_dwSlot);

  000a0	e5960000	 ldr         r0, [r6]
  000a4	eb000000	 bl          SocSdhcDevconf
  000a8	e3a03a61	 mov         r3, #0x61, 20

; 371  : 
; 372  :     SystemClockOn();
; 373  : 
; 374  :     dwClockRate = MMCSD_CLOCK_INIT;

  000ac	e3833d2a	 orr         r3, r3, #0x2A, 26

; 375  :     SdhcSetClockRate(&dwClockRate);

  000b0	e28d0000	 add         r0, sp, #0
  000b4	e58d3000	 str         r3, [sp]
  000b8	eb000000	 bl          SdhcSetClockRate

; 376  :     
; 377  :     // use 1 bit MMC mode
; 378  :     SdhcSetInterface(SD_INTERFACE_SD_MMC_1BIT);

  000bc	e5993000	 ldr         r3, [r9]
  000c0	e3a02009	 mov         r2, #9

; 379  : 
; 380  :     // Initialize the slot
; 381  :     MmcReset(SOFT_RESET_ALL);

  000c4	e3a00401	 mov         r0, #1, 8
  000c8	e5832010	 str         r2, [r3, #0x10]
  000cc	e5992000	 ldr         r2, [r9]
  000d0	e5923128	 ldr         r3, [r2, #0x128]
  000d4	e3c33002	 bic         r3, r3, #2
  000d8	e5823128	 str         r3, [r2, #0x128]
  000dc	eb000000	 bl          MmcReset

; 382  :     OALStall(10 * 1000); // Allow time for card to power down after a device reset

  000e0	e1a00007	 mov         r0, r7
  000e4	eb000000	 bl          OALStall

; 383  : #ifdef DEBUG
; 384  :     DumpRegisters();
; 385  : #endif
; 386  :     EnableSDHCInterrupts();

  000e8	e5993000	 ldr         r3, [r9]
  000ec	e3a02833	 mov         r2, #0x33, 16
  000f0	e3822033	 orr         r2, r2, #0x33

; 387  : 
; 388  :     m_dwSDIOCard = 0;

  000f4	e5832138	 str         r2, [r3, #0x138]
  000f8	e5993000	 ldr         r3, [r9]
  000fc	e3a01000	 mov         r1, #0
  00100	e5832134	 str         r2, [r3, #0x134]
  00104	e5881000	 str         r1, [r8]

; 389  : }

  00108	e28dd004	 add         sp, sp, #4
  0010c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00110	e12fff1e	 bx          lr
  00114		 |$LN20@SdhcContro|
  00114		 |$LN21@SdhcContro|
  00114	00000000	 DCD         |m_dwCPURev|
  00118		 |$LN22@SdhcContro|
  00118	00000000	 DCD         |m_dwMaxTimeout|
  0011c		 |$LN23@SdhcContro|
  0011c	00000000	 DCD         |m_TransferClass|
  00120		 |$LN24@SdhcContro|
  00120	00000000	 DCD         |m_pbRegisters|
  00124		 |$LN25@SdhcContro|
  00124	00000000	 DCD         |m_fAppCmdMode|
  00128		 |$LN26@SdhcContro|
  00128	00000000	 DCD         |m_fCardInitialized|
  0012c		 |$LN27@SdhcContro|
  0012c	00000000	 DCD         |m_dwSDIOCard|
  00130		 |$LN28@SdhcContro|
  00130	00000000	 DCD         |m_dwSlot|
  00134		 |$LN29@SdhcContro|
  00134	00000000	 DCD         |m_fMMCMode|
  00138		 |$LN30@SdhcContro|
  00138	00000000	 DCD         |m_fCardPresent|
  0013c		 |$LN31@SdhcContro|
  0013c	00000000	 DCD         |m_fFirstTime|
  00140		 |$M45433|

			 ENDP  ; |SdhcControllerInit|

	EXPORT	|SdhcControllerIstThread|

  00000			 AREA	 |.pdata|, PDATA
|$T45464| DCD	|$LN8@SdhcContro@2|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SdhcControllerIstThread| PROC

; 864  : {

  00000		 |$LN8@SdhcContro@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45461|
  00004	e1a0e000	 mov         lr, r0

; 865  :     DWORD dwStat;
; 866  :     SD_API_STATUS Status = SD_API_STATUS_PENDING;
; 867  :     
; 868  :     // ???
; 869  :     //UpdateSystemClock(TRUE);
; 870  : 
; 871  :     // check for interrupt pending
; 872  :     dwStat = Read_MMC_STAT();

  00008	e59f302c	 ldr         r3, [pc, #0x2C]
  0000c	e3a02211	 mov         r2, #0x11, 4

; 873  :     dwStat &= INREG32(&m_pbRegisters->MMCHS_IE);
; 874  :     if ( dwStat & (MMCHS_STAT_CC|MMCHS_STAT_CERR|MMCHS_STAT_CCRC|MMCHS_STAT_CTO|MMCHS_STAT_DTO|MMCHS_STAT_DCRC) )

  00010	e3821833	 orr         r1, r2, #0x33, 16
  00014	e5933000	 ldr         r3, [r3]
  00018	e3a00001	 mov         r0, #1
  0001c	e5932130	 ldr         r2, [r3, #0x130]
  00020	e5933134	 ldr         r3, [r3, #0x134]
  00024	e0033002	 and         r3, r3, r2
  00028	e1130001	 tst         r3, r1

; 875  :     {
; 876  :         Status = CommandCompleteHandler(pRequest);

  0002c	11a0000e	 movne       r0, lr
  00030	1b000000	 blne        CommandCompleteHandler

; 877  :     }
; 878  : 
; 879  :     return Status;
; 880  : }

  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$LN9@SdhcContro@2|
  0003c		 |$LN10@SdhcContro@2|
  0003c	00000000	 DCD         |m_pbRegisters|
  00040		 |$M45462|

			 ENDP  ; |SdhcControllerIstThread|

	EXPORT	|SdhcInitialize|

  00000			 AREA	 |.pdata|, PDATA
|$T45475| DCD	|$LN5@SdhcInitia|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SdhcInitialize| PROC

; 891  : {

  00000		 |$LN5@SdhcInitia|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45472|

; 892  :     SD_API_STATUS status = SD_API_STATUS_INSUFFICIENT_RESOURCES; // intermediate status
; 893  : 
; 894  :     OALMSGX(1, (TEXT("SDHC init\r\n")));
; 895  : 
; 896  :     SdhcControllerInit();

  00004	eb000000	 bl          SdhcControllerInit

; 897  : 
; 898  :     m_fInitialized = TRUE;

  00008	e59f3010	 ldr         r3, [pc, #0x10]
  0000c	e3a02001	 mov         r2, #1

; 899  : 
; 900  :     status = SD_API_STATUS_SUCCESS;
; 901  : 
; 902  :     return status;

  00010	e3a00000	 mov         r0, #0
  00014	e5832000	 str         r2, [r3]

; 903  : }

  00018	e49de004	 ldr         lr, [sp], #4
  0001c	e12fff1e	 bx          lr
  00020		 |$LN6@SdhcInitia|
  00020		 |$LN7@SdhcInitia|
  00020	00000000	 DCD         |m_fInitialized|
  00024		 |$M45473|

			 ENDP  ; |SdhcInitialize|

	END
