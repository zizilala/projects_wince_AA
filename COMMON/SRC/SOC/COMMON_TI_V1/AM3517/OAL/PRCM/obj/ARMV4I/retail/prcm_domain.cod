; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\OAL\PRCM\prcm_domain.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|_CoreClockDomain| [ DATA ]
	EXPORT	|_PeripheralClockDomain| [ DATA ]
	EXPORT	|_UsbHostClockDomain| [ DATA ]
	EXPORT	|_EmulationClockDomain| [ DATA ]
	EXPORT	|_MpuClockDomain| [ DATA ]
	EXPORT	|_DssClockDomain| [ DATA ]
	EXPORT	|_NeonClockDomain| [ DATA ]
	EXPORT	|_SgxClockDomain| [ DATA ]
	EXPORT	|_WakeupPowerDomain| [ DATA ]
	EXPORT	|_CorePowerDomain| [ DATA ]
	EXPORT	|_PeripheralPowerDomain| [ DATA ]
	EXPORT	|_UsbHostPowerDomain| [ DATA ]
	EXPORT	|_MpuPowerDomain| [ DATA ]
	EXPORT	|_DssPowerDomain| [ DATA ]
	EXPORT	|_NeonPowerDomain| [ DATA ]
	EXPORT	|_Iva2PowerDomain| [ DATA ]
	EXPORT	|_CameraPowerDomain| [ DATA ]
	EXPORT	|_SgxPowerDomain| [ DATA ]
	EXPORT	|s_DomainTable| [ DATA ]

  00000			 AREA	 |.data|, DATA
|_CoreClockDomain| DCD 0x3
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	0x2
	DCD	0x9
	DCD	0x0
	DCD	0x4
|_PeripheralClockDomain| DCD 0x1
	DCD	0x2
	DCD	0x0
	DCD	0x0
|_UsbHostClockDomain| DCD 0x1
	DCD	0x3
	DCD	0x0
	DCD	0x0
|_EmulationClockDomain| DCD 0x1
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_MpuClockDomain| DCD 0x1
	DCD	0x5
	DCD	0x0
	DCD	0x0
|_DssClockDomain| DCD 0x1
	DCD	0x6
	DCD	0x0
	DCD	0x0
|_NeonClockDomain| DCD 0x1
	DCD	0x7
	DCD	0x0
	DCD	0x0
|_SgxClockDomain| DCD 0x1
	DCD	0x8
	DCD	0x0
	DCD	0x0
|_WakeupPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_CorePowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_PeripheralPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x13
|_UsbHostPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x13
|_MpuPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0xa1
|_DssPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x12
|_NeonPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x2
|_Iva2PowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0xb3
|_CameraPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x12
|_SgxPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x12
|s_DomainTable| DCD 0x0
	DCD	0x0
	DCD	|_WakeupPowerDomain|
	DCD	0x0
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xc
	DCD	|_CorePowerDomain|
	DCD	|_CoreClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xf
	DCD	|_PeripheralPowerDomain|
	DCD	|_PeripheralClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xf
	DCD	|_UsbHostPowerDomain|
	DCD	|_UsbHostClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0x8
	DCD	0x0
	DCD	|_EmulationClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xd
	DCD	|_MpuPowerDomain|
	DCD	|_MpuClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xf
	DCD	|_DssPowerDomain|
	DCD	|_DssClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xd
	DCD	|_NeonPowerDomain|
	DCD	|_NeonClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xf
	DCD	|_SgxPowerDomain|
	DCD	|_SgxClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|Lock|
	IMPORT	|EnterCriticalSection|
	IMPORT	|g_bSingleThreaded|
	IMPORT	|g_PrcmPostInit|
	IMPORT	|g_rgPrcmMutex|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\oal\prcm\prcm_priv.h

  00000			 AREA	 |.pdata|, PDATA
|$T47291| DCD	|$LN6@Lock|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lock|	 PROC

; 266  : {

  00000		 |$LN6@Lock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47288|

; 267  :     if (g_PrcmPostInit && !g_bSingleThreaded) 

  00004	e59f3034	 ldr         r3, [pc, #0x34]
  00008	e5933000	 ldr         r3, [r3]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000006	 beq         |$LN1@Lock|
  00014	e59f3020	 ldr         r3, [pc, #0x20]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e3530000	 cmp         r3, #0

; 268  :         {
; 269  :         EnterCriticalSection(&g_rgPrcmMutex[mutexId]);

  00020	059f2010	 ldreq       r2, [pc, #0x10]
  00024	00803100	 addeq       r3, r0, r0, lsl #2
  00028	00820103	 addeq       r0, r2, r3, lsl #2
  0002c	0b000000	 bleq        EnterCriticalSection
  00030		 |$LN1@Lock|

; 270  :         }
; 271  : }

  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$LN7@Lock|
  00038		 |$LN8@Lock|
  00038	00000000	 DCD         |g_rgPrcmMutex|
  0003c		 |$LN9@Lock|
  0003c	00000000	 DCD         |g_bSingleThreaded|
  00040		 |$LN10@Lock|
  00040	00000000	 DCD         |g_PrcmPostInit|
  00044		 |$M47289|

			 ENDP  ; |Lock|

	EXPORT	|Unlock|
	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T47303| DCD	|$LN6@Unlock|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Unlock| PROC

; 277  : {

  00000		 |$LN6@Unlock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47300|

; 278  :     if (g_PrcmPostInit && !g_bSingleThreaded)

  00004	e59f3034	 ldr         r3, [pc, #0x34]
  00008	e5933000	 ldr         r3, [r3]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000006	 beq         |$LN1@Unlock|
  00014	e59f3020	 ldr         r3, [pc, #0x20]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e3530000	 cmp         r3, #0

; 279  :         {
; 280  :         LeaveCriticalSection(&g_rgPrcmMutex[mutexId]);

  00020	059f2010	 ldreq       r2, [pc, #0x10]
  00024	00803100	 addeq       r3, r0, r0, lsl #2
  00028	00820103	 addeq       r0, r2, r3, lsl #2
  0002c	0b000000	 bleq        LeaveCriticalSection
  00030		 |$LN1@Unlock|

; 281  :         }
; 282  : }

  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$LN7@Unlock|
  00038		 |$LN8@Unlock|
  00038	00000000	 DCD         |g_rgPrcmMutex|
  0003c		 |$LN9@Unlock|
  0003c	00000000	 DCD         |g_bSingleThreaded|
  00040		 |$LN10@Unlock|
  00040	00000000	 DCD         |g_PrcmPostInit|
  00044		 |$M47301|

			 ENDP  ; |Unlock|

	EXPORT	|??_C@_1DE@IEBANBBC@?$AA?9?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LI@HACPIACF@?$AA?$CL?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\oal\prcm\prcm_domain.c

  00000			 AREA	 |.pdata|, PDATA
|$T47324| DCD	|$LN10@DomainInit|
	DCD	0x40001e01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@IEBANBBC@?$AA?9?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "_", 0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i"
	DCB	0x0, "n", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LI@HACPIACF@?$AA?$CL?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "+"
	DCB	0x0, "_", 0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i"
	DCB	0x0, "n", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "("
	DCB	0x0, "p", 0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i"
	DCB	0x0, "n", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "p", 0x0, "m"
	DCB	0x0, "_", 0x0, "p", 0x0, "w", 0x0, "s", 0x0, "t", 0x0, "c"
	DCB	0x0, "t", 0x0, "r", 0x0, "l", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, "p", 0x0, "m"
	DCB	0x0, "_", 0x0, "w", 0x0, "k", 0x0, "d", 0x0, "e", 0x0, "p"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, ",", 0x0, " ", 0x0, "c", 0x0, "m", 0x0, "_"
	DCB	0x0, "s", 0x0, "l", 0x0, "e", 0x0, "e", 0x0, "p", 0x0, "d"
	DCB	0x0, "e", 0x0, "p", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_DomainInitialize| PROC

; 250  : {

  00000		 |$LN10@DomainInit|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M47321|
  00004	e1a06003	 mov         r6, r3
  00008	e1a08002	 mov         r8, r2
  0000c	e1a07001	 mov         r7, r1
  00010	e1a04000	 mov         r4, r0

; 251  :     BOOL rc = TRUE;
; 252  :     OALMSG(OAL_FUNC, (L"+_DomainInitialize("
; 253  :         L"pDomain=0x%08X, pm_pwstctrl=0x%08X"
; 254  :         L"pm_wkdep=0x%08X, cm_sleepdep=0x%08X)\r\n", 
; 255  :         pDomain, pm_pwstctrl, cm_sleepdep)
; 256  :         );

  00014	e59f5058	 ldr         r5, [pc, #0x58]
  00018	e595e440	 ldr         lr, [r5, #0x440]
  0001c	e31e0004	 tst         lr, #4
  00020	159f0048	 ldrne       r0, [pc, #0x48]
  00024	11a02007	 movne       r2, r7
  00028	11a01004	 movne       r1, r4
  0002c	1b000000	 blne        NKDbgPrintfW

; 257  : 
; 258  :     // all values are normalized and then cached in SDRAM
; 259  :     if (pDomain == NULL) goto cleanUp;

  00030	e3540000	 cmp         r4, #0

; 260  :     
; 261  :     // domain power state
; 262  :     pDomain->powerState = (pm_pwstctrl & POWERSTATE_MASK) >> POWERSTATE_SHIFT;

  00034	12071003	 andne       r1, r7, #3

; 263  : 
; 264  :     // wake and sleep dependencies
; 265  :     pDomain->wakeDependency = (pm_wkdep & WKDEP_MASK) >> WKDEP_SHIFT;

  00038	120820ff	 andne       r2, r8, #0xFF

; 266  :     pDomain->sleepDependency = (cm_sleepdep & SLEEPDEP_MASK) >> SLEEPDEP_SHIFT;

  0003c	120630ff	 andne       r3, r6, #0xFF
  00040	15841000	 strne       r1, [r4]
  00044	1584200c	 strne       r2, [r4, #0xC]
  00048	15843008	 strne       r3, [r4, #8]
  0004c		 |$cleanUp$46835|
  0004c	e5953440	 ldr         r3, [r5, #0x440]

; 267  : 
; 268  : cleanUp:
; 269  :     OALMSG(OAL_FUNC, (L"-_DomainInitialize()=%d\r\n", rc));

  00050	e3130004	 tst         r3, #4
  00054	159f0010	 ldrne       r0, [pc, #0x10]
  00058	13a01001	 movne       r1, #1
  0005c	1b000000	 blne        NKDbgPrintfW

; 270  :     return rc;    

  00060	e3a00001	 mov         r0, #1

; 271  : }

  00064	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$LN11@DomainInit|
  0006c		 |$LN12@DomainInit|
  0006c	00000000	 DCD         |??_C@_1DE@IEBANBBC@?$AA?9?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00070		 |$LN13@DomainInit|
  00070	00000000	 DCD         |??_C@_1LI@HACPIACF@?$AA?$CL?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  00074		 |$LN14@DomainInit|
  00074	00000000	 DCD         |dpCurSettings|
  00078		 |$M47322|

			 ENDP  ; |_DomainInitialize|

	IMPORT	|g_pPrcmCm|
	IMPORT	|s_SrcClockTable|

  00000			 AREA	 |.pdata|, PDATA
|$T47367| DCD	|$LN33@DomainCloc|
	DCD	0x40005d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_DomainClockRestore| PROC

; 279  : {

  00000		 |$LN33@DomainCloc|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47364|

; 280  :     UINT i;
; 281  :     UINT val;
; 282  :     UINT parentClock;
; 283  :     SrcClockDivisorTable_t *pDivisors;
; 284  : 
; 285  :     extern SrcClockMap s_SrcClockTable;
; 286  : 
; 287  :     switch (powerDomain)

  00004	e3500002	 cmp         r0, #2
  00008	0a000028	 beq         |$LN7@DomainCloc|
  0000c	e3500006	 cmp         r0, #6
  00010	0a000019	 beq         |$LN6@DomainCloc|
  00014	e3500008	 cmp         r0, #8
  00018	1a000050	 bne         |$LN8@DomainCloc|

; 308  :         case POWERDOMAIN_SGX:
; 309  :             // verify parent clock is valid       
; 310  :             pDivisors = s_SrcClockTable[kSGX_FCLK].pDivisors;

  0001c	e59f314c	 ldr         r3, [pc, #0x14C]

; 311  :             parentClock = s_SrcClockTable[kSGX_FCLK].parentClk;
; 312  :             for (i = 0; i < pDivisors->count; ++i)

  00020	e3a01000	 mov         r1, #0
  00024	e59305ac	 ldr         r0, [r3, #0x5AC]
  00028	e59345a0	 ldr         r4, [r3, #0x5A0]
  0002c	e5903000	 ldr         r3, [r0]
  00030	e1b0e003	 movs        lr, r3
  00034	0a000049	 beq         |$LN8@DomainCloc|

; 308  :         case POWERDOMAIN_SGX:
; 309  :             // verify parent clock is valid       
; 310  :             pDivisors = s_SrcClockTable[kSGX_FCLK].pDivisors;

  00038	e1a02000	 mov         r2, r0
  0003c		 |$LL4@DomainCloc|

; 313  :                 {
; 314  :                 if (parentClock == pDivisors->SourceClock[i].id)

  0003c	e5923004	 ldr         r3, [r2, #4]
  00040	e1540003	 cmp         r4, r3
  00044	0a000004	 beq         |$LN29@DomainCloc|
  00048	e2811001	 add         r1, r1, #1
  0004c	e151000e	 cmp         r1, lr
  00050	e2822008	 add         r2, r2, #8
  00054	3afffff8	 bcc         |$LL4@DomainCloc|
  00058	ea000040	 b           |$LN8@DomainCloc|
  0005c		 |$LN29@DomainCloc|

; 315  :                     {
; 316  :                     // write to hw
; 317  :                     OUTREG32(&g_pPrcmCm->pOMAP_SGX_CM->CM_CLKSEL_SGX, 
; 318  :                         CLKSEL_SGX(pDivisors->SourceClock[i].divisor)
; 319  :                         );

  0005c	e59f2108	 ldr         r2, [pc, #0x108]
  00060	e0803181	 add         r3, r0, r1, lsl #3
  00064	e5933008	 ldr         r3, [r3, #8]
  00068	e5922000	 ldr         r2, [r2]
  0006c	e2031007	 and         r1, r3, #7
  00070	e5923020	 ldr         r3, [r2, #0x20]
  00074	e5831040	 str         r1, [r3, #0x40]

; 320  :                     break;
; 321  :                     }
; 322  :                 }
; 323  :             break;

  00078	ea000038	 b           |$LN8@DomainCloc|
  0007c		 |$LN6@DomainCloc|

; 300  :             break;
; 301  : 
; 302  :         case POWERDOMAIN_DSS:
; 303  :             // write to hw
; 304  :             OUTREG32(&g_pPrcmCm->pOMAP_DSS_CM->CM_CLKSEL_DSS,
; 305  :                 CLKSEL_DSS1(s_SrcClockTable[kDSS1_ALWON_FCLK].pDivisors->SourceClock[0].divisor) |
; 306  :                 CLKSEL_TV(s_SrcClockTable[k54M_FCLK].pDivisors->SourceClock[0].divisor));

  0007c	e59f30ec	 ldr         r3, [pc, #0xEC]
  00080	e59f20e4	 ldr         r2, [pc, #0xE4]
  00084	e5930598	 ldr         r0, [r3, #0x598]
  00088	e5931098	 ldr         r1, [r3, #0x98]
  0008c	e5922000	 ldr         r2, [r2]
  00090	e5903008	 ldr         r3, [r0, #8]
  00094	e5911008	 ldr         r1, [r1, #8]
  00098	e5920018	 ldr         r0, [r2, #0x18]
  0009c	e203201f	 and         r2, r3, #0x1F
  000a0	e201301f	 and         r3, r1, #0x1F
  000a4	e1833402	 orr         r3, r3, r2, lsl #8
  000a8	e5803040	 str         r3, [r0, #0x40]

; 307  :             break;

  000ac	ea00002b	 b           |$LN8@DomainCloc|
  000b0		 |$LN7@DomainCloc|

; 288  :         {
; 289  :         case POWERDOMAIN_PERIPHERAL:
; 290  :             // build mask
; 291  :             val = s_SrcClockTable[kGPT2_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT2 : 0;

  000b0	e59f20b8	 ldr         r2, [pc, #0xB8]
  000b4	e59235c8	 ldr         r3, [r2, #0x5C8]
  000b8	e353000b	 cmp         r3, #0xB

; 292  :             val |= s_SrcClockTable[kGPT3_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT3 : 0;

  000bc	e59235dc	 ldr         r3, [r2, #0x5DC]
  000c0	03a01001	 moveq       r1, #1
  000c4	13a01000	 movne       r1, #0
  000c8	e353000b	 cmp         r3, #0xB

; 293  :             val |= s_SrcClockTable[kGPT4_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT4 : 0;

  000cc	e59235f0	 ldr         r3, [r2, #0x5F0]
  000d0	03a00002	 moveq       r0, #2
  000d4	13a00000	 movne       r0, #0
  000d8	e353000b	 cmp         r3, #0xB

; 294  :             val |= s_SrcClockTable[kGPT5_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT5 : 0;

  000dc	e5923604	 ldr         r3, [r2, #0x604]
  000e0	e1800001	 orr         r0, r0, r1
  000e4	03a01004	 moveq       r1, #4
  000e8	13a01000	 movne       r1, #0
  000ec	e353000b	 cmp         r3, #0xB

; 295  :             val |= s_SrcClockTable[kGPT6_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT6 : 0;

  000f0	e5923618	 ldr         r3, [r2, #0x618]
  000f4	e1810000	 orr         r0, r1, r0
  000f8	03a01008	 moveq       r1, #8
  000fc	13a01000	 movne       r1, #0
  00100	e353000b	 cmp         r3, #0xB

; 296  :             val |= s_SrcClockTable[kGPT7_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT7 : 0;

  00104	e592362c	 ldr         r3, [r2, #0x62C]
  00108	e1810000	 orr         r0, r1, r0
  0010c	03a01010	 moveq       r1, #0x10
  00110	13a01000	 movne       r1, #0
  00114	e353000b	 cmp         r3, #0xB

; 297  :             val |= s_SrcClockTable[kGPT8_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT8 : 0;

  00118	e5923640	 ldr         r3, [r2, #0x640]
  0011c	e1810000	 orr         r0, r1, r0
  00120	03a01020	 moveq       r1, #0x20
  00124	13a01000	 movne       r1, #0
  00128	e353000b	 cmp         r3, #0xB

; 298  :             val |= s_SrcClockTable[kGPT9_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT9 : 0;

  0012c	e5923654	 ldr         r3, [r2, #0x654]
  00130	e1810000	 orr         r0, r1, r0
  00134	03a01040	 moveq       r1, #0x40
  00138	13a01000	 movne       r1, #0
  0013c	e353000b	 cmp         r3, #0xB

; 299  :             OUTREG32(&g_pPrcmCm->pOMAP_PER_CM->CM_CLKSEL_PER, val);

  00140	e59f3024	 ldr         r3, [pc, #0x24]
  00144	03a02080	 moveq       r2, #0x80
  00148	e1811000	 orr         r1, r1, r0
  0014c	e5933000	 ldr         r3, [r3]
  00150	13a02000	 movne       r2, #0
  00154	e1822001	 orr         r2, r2, r1
  00158	e5933008	 ldr         r3, [r3, #8]
  0015c	e5832040	 str         r2, [r3, #0x40]
  00160		 |$LN8@DomainCloc|

; 324  :         }
; 325  : 
; 326  :     return TRUE;

  00160	e3a00001	 mov         r0, #1

; 327  : }

  00164	e8bd4010	 ldmia       sp!, {r4, lr}
  00168	e12fff1e	 bx          lr
  0016c		 |$LN34@DomainCloc|
  0016c		 |$LN35@DomainCloc|
  0016c	00000000	 DCD         |g_pPrcmCm|
  00170		 |$LN36@DomainCloc|
  00170	00000000	 DCD         |s_SrcClockTable|
  00174		 |$M47365|

			 ENDP  ; |_DomainClockRestore|

	EXPORT	|??_C@_1EG@MJBAHCAP@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@GHDCOMKL@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAC?$AAl?$AAo@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47388| DCD	|$LN15@PrcmDomain|
	DCD	0x40002501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@MJBAHCAP@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@GHDCOMKL@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAC?$AAl?$AAo@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, "(", 0x0, "p", 0x0, "C", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "c", 0x0, "m", 0x0, "_", 0x0, "c", 0x0, "l", 0x0, "k"
	DCB	0x0, "s", 0x0, "t", 0x0, "c", 0x0, "t", 0x0, "r", 0x0, "l"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDomainClockInitialize| PROC

; 336  : {

  00000		 |$LN15@PrcmDomain|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M47385|
  00004	e1a06001	 mov         r6, r1
  00008	e1a04000	 mov         r4, r0

; 337  :     UINT i;
; 338  :     UINT temp;
; 339  :     BOOL rc = TRUE;
; 340  :     OALMSG(OAL_FUNC, (L"+_PrcmDomainClockInitialize("
; 341  :         L"pClockStates=0x%08X, cm_clkstctrl=0x%08X\r\n", 
; 342  :         pClockStates,  cm_clkstctrl)
; 343  :         );

  0000c	e59f507c	 ldr         r5, [pc, #0x7C]
  00010	e5953440	 ldr         r3, [r5, #0x440]
  00014	e3130004	 tst         r3, #4
  00018	159f006c	 ldrne       r0, [pc, #0x6C]
  0001c	11a02006	 movne       r2, r6
  00020	11a01004	 movne       r1, r4
  00024	1b000000	 blne        NKDbgPrintfW

; 344  : 
; 345  :     // all values are normalized and then cached in SDRAM
; 346  :     if (pClockStates == NULL) goto cleanUp;

  00028	e3540000	 cmp         r4, #0
  0002c	0a00000d	 beq         |$cleanUp$46877|

; 347  : 
; 348  :     for (i = 0; i < pClockStates->count; ++i)

  00030	e5943000	 ldr         r3, [r4]
  00034	e3a01000	 mov         r1, #0
  00038	e3530000	 cmp         r3, #0
  0003c	9a000009	 bls         |$cleanUp$46877|
  00040	e1a02004	 mov         r2, r4
  00044		 |$LL3@PrcmDomain|

; 349  :         {  
; 350  :         temp = cm_clkstctrl >> pClockStates->rgClockDomains[i].clockShift;        

  00044	e592300c	 ldr         r3, [r2, #0xC]
  00048	e2811001	 add         r1, r1, #1
  0004c	e1a03336	 mov         r3, r6, lsr r3

; 351  :         pClockStates->rgClockDomains[i].clockState = (temp & CLKSTCTRL_MASK) >> CLKSTCTRL_SHIFT; 

  00050	e2033003	 and         r3, r3, #3
  00054	e5823008	 str         r3, [r2, #8]
  00058	e5943000	 ldr         r3, [r4]
  0005c	e282200c	 add         r2, r2, #0xC
  00060	e1510003	 cmp         r1, r3
  00064	3afffff6	 bcc         |$LL3@PrcmDomain|
  00068		 |$cleanUp$46877|

; 337  :     UINT i;
; 338  :     UINT temp;
; 339  :     BOOL rc = TRUE;
; 340  :     OALMSG(OAL_FUNC, (L"+_PrcmDomainClockInitialize("
; 341  :         L"pClockStates=0x%08X, cm_clkstctrl=0x%08X\r\n", 
; 342  :         pClockStates,  cm_clkstctrl)
; 343  :         );

  00068	e5953440	 ldr         r3, [r5, #0x440]

; 352  :         }
; 353  :     
; 354  : cleanUp:
; 355  :     OALMSG(OAL_FUNC, (L"-_PrcmDomainClockInitialize()=%d\r\n", rc));

  0006c	e3130004	 tst         r3, #4
  00070	159f0010	 ldrne       r0, [pc, #0x10]
  00074	13a01001	 movne       r1, #1
  00078	1b000000	 blne        NKDbgPrintfW

; 356  :     return rc;    

  0007c	e3a00001	 mov         r0, #1

; 357  : }

  00080	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN16@PrcmDomain|
  00088		 |$LN17@PrcmDomain|
  00088	00000000	 DCD         |??_C@_1EG@MJBAHCAP@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@|
  0008c		 |$LN18@PrcmDomain|
  0008c	00000000	 DCD         |??_C@_1IO@GHDCOMKL@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAC?$AAl?$AAo@|
  00090		 |$LN19@PrcmDomain|
  00090	00000000	 DCD         |dpCurSettings|
  00094		 |$M47386|

			 ENDP  ; |_PrcmDomainClockInitialize|

	IMPORT	|g_pPrcmRestore|
	IMPORT	|GetPrmRegisterSet|
	IMPORT	|GetCmRegisterSet|

  00000			 AREA	 |.pdata|, PDATA
|$T47412| DCD	|$LN18@PrcmDomain@2|
	DCD	0x40003901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |_PrcmDomainHwUpdate| PROC

; 366  : {

  00000		 |$LN18@PrcmDomain@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47409|
  00004	e1a05001	 mov         r5, r1
  00008	e1a06000	 mov         r6, r0

; 367  :     BOOL rc = TRUE;
; 368  :     UINT pm_wkdep;
; 369  : //    UINT pm_pwstctrl;
; 370  :     UINT cm_sleepdep;
; 371  :     UINT cm_clkstctrl;   
; 372  :     OMAP_CM_REGS   *pCmRegs;
; 373  :     OMAP_PRM_REGS  *pPrmRegs;
; 374  :     ClockDomainInfo_t  *pClockStates;    
; 375  :     PowerDomainState_t *pDomainState;
; 376  :     
; 377  :     // update the following hw registers
; 378  :     // PM_WKDEP_xxx
; 379  :     // CM_SLEEPDEP_xxx
; 380  :     // PM_PWSTCTRL_xxx.POWERSTATE
; 381  :     // CM_CLKSTCTRL_xxx
; 382  : 
; 383  :     pCmRegs = GetCmRegisterSet(powerDomain);

  0000c	eb000000	 bl          GetCmRegisterSet
  00010	e1a04000	 mov         r4, r0

; 384  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  00014	e1a00006	 mov         r0, r6
  00018	eb000000	 bl          GetPrmRegisterSet

; 385  :     pClockStates = s_DomainTable[powerDomain].pClockStates;

  0001c	e59f20bc	 ldr         r2, [pc, #0xBC]
  00020	e0663186	 rsb         r3, r6, r6, lsl #3
  00024	e0823103	 add         r3, r2, r3, lsl #2

; 386  :     pDomainState = s_DomainTable[powerDomain].pDomainState;

  00028	e5932008	 ldr         r2, [r3, #8]
  0002c	e593e00c	 ldr         lr, [r3, #0xC]
  00030	e1b01002	 movs        r1, r2

; 387  :         
; 388  :     if (pDomainState != NULL)

  00034	0a00000b	 beq         |$LN9@PrcmDomain@2|

; 389  :         {
; 390  :         if (ffMask & DOMAIN_UPDATE_WKUPDEP)

  00038	e3150001	 tst         r5, #1

; 391  :             {
; 392  :             pm_wkdep = INREG32(&pPrmRegs->PM_WKDEP_xxx) & ~WKDEP_MASK;

  0003c	159030c8	 ldrne       r3, [r0, #0xC8]

; 393  :             pm_wkdep |= pDomainState->wakeDependency << WKDEP_SHIFT;

  00040	1591200c	 ldrne       r2, [r1, #0xC]
  00044	13c330ff	 bicne       r3, r3, #0xFF
  00048	11823003	 orrne       r3, r2, r3

; 394  :             OUTREG32(&pPrmRegs->PM_WKDEP_xxx, pm_wkdep);

  0004c	158030c8	 strne       r3, [r0, #0xC8]

; 395  :             }
; 396  : 
; 397  :         if (ffMask & DOMAIN_UPDATE_SLEEPDEP)

  00050	e3150002	 tst         r5, #2

; 398  :             {
; 399  :             cm_sleepdep = INREG32(&pCmRegs->CM_SLEEPDEP_xxx) & ~SLEEPDEP_MASK;

  00054	15943044	 ldrne       r3, [r4, #0x44]

; 400  :             cm_sleepdep |= pDomainState->sleepDependency << SLEEPDEP_SHIFT;

  00058	15912008	 ldrne       r2, [r1, #8]
  0005c	13c330ff	 bicne       r3, r3, #0xFF
  00060	11823003	 orrne       r3, r2, r3

; 401  :             OUTREG32(&pCmRegs->CM_SLEEPDEP_xxx, cm_sleepdep);

  00064	15843044	 strne       r3, [r4, #0x44]
  00068		 |$LN9@PrcmDomain@2|

; 402  :             }
; 403  :         }
; 404  : 
; 405  :     if (pClockStates != NULL)

  00068	e35e0000	 cmp         lr, #0
  0006c	0a000017	 beq         |$LN1@PrcmDomain@2|

; 406  :         {
; 407  :         if (ffMask & DOMAIN_UPDATE_CLOCKSTATE)

  00070	e3150008	 tst         r5, #8
  00074	0a000015	 beq         |$LN1@PrcmDomain@2|

; 408  :             {
; 409  :             UINT i;
; 410  :             cm_clkstctrl = INREG32(&pCmRegs->CM_CLKSTCTRL_xxx);
; 411  :             for (i = 0; i < pClockStates->count; ++i)

  00078	e59e3000	 ldr         r3, [lr]
  0007c	e5940048	 ldr         r0, [r4, #0x48]
  00080	e1b05003	 movs        r5, r3
  00084	0a000007	 beq         |$LN4@PrcmDomain@2|
  00088	e3a07003	 mov         r7, #3
  0008c		 |$LL6@PrcmDomain@2|

; 412  :                 {
; 413  :                 cm_clkstctrl &= ~(CLKSTCTRL_MASK << pClockStates->rgClockDomains[i].clockShift);
; 414  :                 cm_clkstctrl |= (pClockStates->rgClockDomains[i].clockState << pClockStates->rgClockDomains[i].clockShift) << CLKSTCTRL_SHIFT;

  0008c	e59e100c	 ldr         r1, [lr, #0xC]
  00090	e59e2008	 ldr         r2, [lr, #8]
  00094	e28ee00c	 add         lr, lr, #0xC
  00098	e1c03117	 bic         r3, r0, r7, lsl r1
  0009c	e2555001	 subs        r5, r5, #1
  000a0	e1830112	 orr         r0, r3, r2, lsl r1
  000a4	1afffff8	 bne         |$LL6@PrcmDomain@2|
  000a8		 |$LN4@PrcmDomain@2|

; 415  :                 }
; 416  :             OUTREG32(&pCmRegs->CM_CLKSTCTRL_xxx, cm_clkstctrl);
; 417  : 
; 418  :             // save context
; 419  :             if (powerDomain == POWERDOMAIN_MPU)

  000a8	e3560005	 cmp         r6, #5

; 420  :                 {
; 421  :                 OUTREG32(&g_pPrcmRestore->CM_CLKSTCTRL_MPU, cm_clkstctrl);

  000ac	059f3028	 ldreq       r3, [pc, #0x28]
  000b0	e5840048	 str         r0, [r4, #0x48]
  000b4	05933000	 ldreq       r3, [r3]
  000b8	05830038	 streq       r0, [r3, #0x38]
  000bc	0a000003	 beq         |$LN1@PrcmDomain@2|

; 422  :                 }
; 423  :             else if (powerDomain == POWERDOMAIN_CORE)

  000c0	e3560001	 cmp         r6, #1

; 424  :                 {
; 425  :                 OUTREG32(&g_pPrcmRestore->CM_CLKSTCTRL_CORE, cm_clkstctrl);

  000c4	059f3010	 ldreq       r3, [pc, #0x10]
  000c8	05933000	 ldreq       r3, [r3]
  000cc	0583003c	 streq       r0, [r3, #0x3C]
  000d0		 |$LN1@PrcmDomain@2|

; 426  :                 }
; 427  :             }
; 428  :         }
; 429  :     
; 430  :     return rc;

  000d0	e3a00001	 mov         r0, #1

; 431  : }

  000d4	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$LN19@PrcmDomain@2|
  000dc		 |$LN20@PrcmDomain@2|
  000dc	00000000	 DCD         |g_pPrcmRestore|
  000e0		 |$LN21@PrcmDomain@2|
  000e0	00000000	 DCD         |s_DomainTable|
  000e4		 |$M47410|

			 ENDP  ; |_PrcmDomainHwUpdate|

	EXPORT	|PrcmDomainSetPowerStateInternal|
	IMPORT	|OALWakeupLatency_UpdateDomainState|

  00000			 AREA	 |.pdata|, PDATA
|$T47430| DCD	|$LN9@PrcmDomain@3|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDomainSetPowerStateInternal| PROC

; 441  : {

  00000		 |$LN9@PrcmDomain@3|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M47427|
  00004	e1a07003	 mov         r7, r3
  00008	e1a08002	 mov         r8, r2
  0000c	e1a09001	 mov         r9, r1
  00010	e1a05000	 mov         r5, r0

; 442  :     BOOL rc = FALSE;

  00014	e3a06000	 mov         r6, #0

; 443  :     PowerDomainState_t *pDomainState;
; 444  :     
; 445  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  00018	e355000a	 cmp         r5, #0xA
  0001c	2a000018	 bcs         |$cleanUp$46936|

; 446  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_POWERSTATE) == 0) goto cleanUp;

  00020	e59f4068	 ldr         r4, [pc, #0x68]
  00024	e065e185	 rsb         lr, r5, r5, lsl #3
  00028	e084010e	 add         r0, r4, lr, lsl #2
  0002c	e590e004	 ldr         lr, [r0, #4]
  00030	e31e0004	 tst         lr, #4
  00034	0a000012	 beq         |$cleanUp$46936|

; 447  : 
; 448  :     // update internal state information 
; 449  :     pDomainState = s_DomainTable[powerDomain].pDomainState;

  00038	e590e008	 ldr         lr, [r0, #8]
  0003c	e1b0400e	 movs        r4, lr

; 450  :     if (pDomainState == NULL) goto cleanUp;

  00040	0a00000f	 beq         |$cleanUp$46936|

; 451  :     
; 452  :     // POWERSTATE_OFF                      0
; 453  :     // POWERSTATE_RETENTION                1
; 454  :     // POWERSTATE_INACTIVE                 2
; 455  :     // POWERSTATE_ON                       3
; 456  : 
; 457  :     // LOGICRETSTATE_LOGICOFF_DOMAINRET    1
; 458  :     // LOGICRETSTATE_LOGICRET_DOMAINRET    4
; 459  : 
; 460  :     //OALMSG(1, (L"Domain %d -> P%d L%d\r\n", powerDomain, powerState, logicState));
; 461  : 
; 462  :     Lock(Mutex_Domain);

  00044	e3a00002	 mov         r0, #2
  00048	eb000000	 bl          Lock

; 463  :     powerState &= POWERSTATE_MASK;

  0004c	e2091003	 and         r1, r9, #3

; 464  :     powerState >>= POWERSTATE_SHIFT;
; 465  :     pDomainState->powerState = powerState;
; 466  :     pDomainState->logicState = logicState & LOGICRETSTATE;

  00050	e2082004	 and         r2, r8, #4
  00054	e8840006	 stmia       r4, {r1, r2}

; 467  :     rc = _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_POWERSTATE);

  00058	e3a01004	 mov         r1, #4
  0005c	e1a00005	 mov         r0, r5
  00060	eb000000	 bl          _PrcmDomainHwUpdate

; 468  : 
; 469  :     // check if we need to notify of a power state change
; 470  :     if (bNotify == TRUE)

  00064	e3570001	 cmp         r7, #1

; 471  :         {
; 472  :         // update latency information
; 473  :         OALWakeupLatency_UpdateDomainState(powerDomain, 
; 474  :             pDomainState->powerState, 
; 475  :             pDomainState->logicState
; 476  :             );

  00068	05942004	 ldreq       r2, [r4, #4]
  0006c	05941000	 ldreq       r1, [r4]
  00070	e1a06000	 mov         r6, r0
  00074	01a00005	 moveq       r0, r5
  00078	0b000000	 bleq        OALWakeupLatency_UpdateDomainState

; 477  :         }
; 478  :     Unlock(Mutex_Domain);

  0007c	e3a00002	 mov         r0, #2
  00080	eb000000	 bl          Unlock
  00084		 |$cleanUp$46936|

; 479  :     
; 480  : cleanUp:    
; 481  :     
; 482  :     return rc;
; 483  : }

  00084	e1a00006	 mov         r0, r6
  00088	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN10@PrcmDomain@3|
  00090		 |$LN11@PrcmDomain@3|
  00090	00000000	 DCD         |s_DomainTable|
  00094		 |$M47428|

			 ENDP  ; |PrcmDomainSetPowerStateInternal|

	EXPORT	|DomainGetDeviceContextState|

  00000			 AREA	 |.pdata|, PDATA
|$T47448| DCD	|$LN8@DomainGetD|
	DCD	0x40001c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DomainGetDeviceContextState| PROC

; 492  : {

  00000		 |$LN8@DomainGetD|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47445|
  00004	e1a07002	 mov         r7, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a05000	 mov         r5, r0

; 493  :     int idx;
; 494  :     BOOL rc;
; 495  :     OMAP_PRM_REGS *pPrmRegs;
; 496  :     
; 497  :     // Get array index 
; 498  :     idx = pInfo->offset - cm_offset(CM_ICLKEN1_xxx);

  00010	e5963008	 ldr         r3, [r6, #8]

; 499  :     Lock(Mutex_Domain);

  00014	e3a00002	 mov         r0, #2
  00018	e2434010	 sub         r4, r3, #0x10
  0001c	eb000000	 bl          Lock

; 500  : 
; 501  :     // get current power state of domain
; 502  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  00020	e1a00005	 mov         r0, r5
  00024	eb000000	 bl          GetPrmRegisterSet

; 503  :    
; 504  :     // get device context state
; 505  :     rc = s_DomainTable[powerDomain].rgDeviceContextState[idx] & pInfo->mask;

  00028	e59fe03c	 ldr         lr, [pc, #0x3C]
  0002c	e0653185	 rsb         r3, r5, r5, lsl #3
  00030	e0833004	 add         r3, r3, r4
  00034	e08e2103	 add         r2, lr, r3, lsl #2
  00038	e5924010	 ldr         r4, [r2, #0x10]
  0003c	e5965004	 ldr         r5, [r6, #4]

; 506  : 
; 507  :     // update device context state
; 508  :     if (bSet == TRUE)

  00040	e3570001	 cmp         r7, #1

; 509  :         {
; 510  :         s_DomainTable[powerDomain].rgDeviceContextState[idx] |= pInfo->mask;        
; 511  :         }
; 512  :     Unlock(Mutex_Domain);

  00044	e3a00002	 mov         r0, #2
  00048	01853004	 orreq       r3, r5, r4
  0004c	05823010	 streq       r3, [r2, #0x10]
  00050	eb000000	 bl          Unlock

; 513  :     
; 514  :     return rc != 0;

  00054	e1150004	 tst         r5, r4
  00058	13a00001	 movne       r0, #1

; 515  : }

  0005c	18bd40f0	 ldmneia     sp!, {r4 - r7, lr}

; 513  :     
; 514  :     return rc != 0;

  00060	03a00000	 moveq       r0, #0

; 515  : }

  00064	08bd40f0	 ldmeqia     sp!, {r4 - r7, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$LN9@DomainGetD|
  0006c		 |$LN10@DomainGetD|
  0006c	00000000	 DCD         |s_DomainTable|
  00070		 |$M47446|

			 ENDP  ; |DomainGetDeviceContextState|

	EXPORT	|DomainInitialize|
	EXPORT	|??_C@_1DC@PHJGNBDE@?$AA?9?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@KJPIEGMJ@?$AA?$CL?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47511| DCD	|$LN36@DomainInit@2|
	DCD	0x40005b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@PHJGNBDE@?$AA?9?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@KJPIEGMJ@?$AA?$CL?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DomainInitialize| PROC

; 520  : {

  00000		 |$LN36@DomainInit@2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M47508|

; 521  :     UINT            i;
; 522  :     BOOL            rc = TRUE;
; 523  :     UINT            cm_clkstctrl;
; 524  :     UINT            pm_pwstctrl;
; 525  :     UINT            pm_wkdep;
; 526  :     UINT            cm_sleepdep;
; 527  :     OMAP_CM_REGS   *pCmRegs;
; 528  :     OMAP_PRM_REGS  *pPrmRegs;
; 529  :     
; 530  :     
; 531  :     OALMSG(OAL_FUNC, (L"+DomainInitialize()\r\n"));

  00004	e59f415c	 ldr         r4, [pc, #0x15C]
  00008	e5943440	 ldr         r3, [r4, #0x440]
  0000c	e3130004	 tst         r3, #4
  00010	159f014c	 ldrne       r0, [pc, #0x14C]
  00014	1b000000	 blne        NKDbgPrintfW

; 532  : 
; 533  :     for (i = 0; i < POWERDOMAIN_COUNT; ++i)

  00018	e59f7140	 ldr         r7, [pc, #0x140]
  0001c	e3a08000	 mov         r8, #0
  00020	e3a0b000	 mov         r11, #0
  00024		 |$LL6@DomainInit@2|

; 534  :         {        
; 535  :         pCmRegs = GetCmRegisterSet(i);

  00024	e1a00008	 mov         r0, r8
  00028	eb000000	 bl          GetCmRegisterSet
  0002c	e1a05000	 mov         r5, r0

; 536  :         pPrmRegs = GetPrmRegisterSet(i);

  00030	e1a00008	 mov         r0, r8
  00034	eb000000	 bl          GetPrmRegisterSet

; 537  : 
; 538  :         pm_wkdep = 0;
; 539  :         if (s_DomainTable[i].ffValidationMask & DOMAIN_UPDATE_WKUPDEP)

  00038	e5973004	 ldr         r3, [r7, #4]
  0003c	e3a09000	 mov         r9, #0

; 540  :             {
; 541  :             pm_wkdep = INREG32(&pPrmRegs->PM_WKDEP_xxx);
; 542  :             }
; 543  : 
; 544  :         cm_sleepdep = 0;

  00040	e3a06000	 mov         r6, #0
  00044	e3130001	 tst         r3, #1
  00048	159090c8	 ldrne       r9, [r0, #0xC8]

; 545  :         if (s_DomainTable[i].ffValidationMask & DOMAIN_UPDATE_SLEEPDEP)

  0004c	e3130002	 tst         r3, #2

; 546  :             {
; 547  :             cm_sleepdep = INREG32(&pCmRegs->CM_SLEEPDEP_xxx);

  00050	15956044	 ldrne       r6, [r5, #0x44]

; 548  :             }
; 549  : 
; 550  :         pm_pwstctrl = 0;
; 551  :         cm_clkstctrl = 0;
; 552  : 
; 553  :         if (s_DomainTable[i].ffValidationMask & DOMAIN_UPDATE_CLOCKSTATE)

  00054	e3130008	 tst         r3, #8

; 554  :             {
; 555  :             cm_clkstctrl = INREG32(&pCmRegs->CM_CLKSTCTRL_xxx);
; 556  :             }
; 557  : 
; 558  :         _DomainInitialize(s_DomainTable[i].pDomainState, 
; 559  :             pm_pwstctrl, pm_wkdep, cm_sleepdep
; 560  :             );

  00058	e5943440	 ldr         r3, [r4, #0x440]
  0005c	e3a0a000	 mov         r10, #0
  00060	1595a048	 ldrne       r10, [r5, #0x48]
  00064	e5975008	 ldr         r5, [r7, #8]
  00068	e3130004	 tst         r3, #4
  0006c	159f00e8	 ldrne       r0, [pc, #0xE8]
  00070	11a03006	 movne       r3, r6
  00074	13a02000	 movne       r2, #0
  00078	11a01005	 movne       r1, r5
  0007c	1b000000	 blne        NKDbgPrintfW
  00080	e3550000	 cmp         r5, #0
  00084	120930ff	 andne       r3, r9, #0xFF
  00088	120620ff	 andne       r2, r6, #0xFF
  0008c	1585300c	 strne       r3, [r5, #0xC]
  00090	15852008	 strne       r2, [r5, #8]
  00094	1585b000	 strne       r11, [r5]
  00098		 |$cleanUp$47471|
  00098	e5943440	 ldr         r3, [r4, #0x440]
  0009c	e3130004	 tst         r3, #4
  000a0	159f00b0	 ldrne       r0, [pc, #0xB0]
  000a4	13a01001	 movne       r1, #1
  000a8	1b000000	 blne        NKDbgPrintfW
  000ac	e5943440	 ldr         r3, [r4, #0x440]

; 561  : 
; 562  :         _PrcmDomainClockInitialize(s_DomainTable[i].pClockStates, 
; 563  :             cm_clkstctrl
; 564  :             );

  000b0	e597500c	 ldr         r5, [r7, #0xC]
  000b4	e3130004	 tst         r3, #4
  000b8	159f0094	 ldrne       r0, [pc, #0x94]
  000bc	11a0200a	 movne       r2, r10
  000c0	11a01005	 movne       r1, r5
  000c4	1b000000	 blne        NKDbgPrintfW
  000c8	e3550000	 cmp         r5, #0
  000cc	0a00000d	 beq         |$cleanUp$47488|
  000d0	e5953000	 ldr         r3, [r5]
  000d4	e3a01000	 mov         r1, #0
  000d8	e3530000	 cmp         r3, #0
  000dc	9a000009	 bls         |$cleanUp$47488|
  000e0	e1a02005	 mov         r2, r5
  000e4		 |$LL22@DomainInit@2|
  000e4	e592300c	 ldr         r3, [r2, #0xC]
  000e8	e2811001	 add         r1, r1, #1
  000ec	e1a0333a	 mov         r3, r10, lsr r3
  000f0	e2033003	 and         r3, r3, #3
  000f4	e5823008	 str         r3, [r2, #8]
  000f8	e5953000	 ldr         r3, [r5]
  000fc	e282200c	 add         r2, r2, #0xC
  00100	e1510003	 cmp         r1, r3
  00104	3afffff6	 bcc         |$LL22@DomainInit@2|
  00108		 |$cleanUp$47488|
  00108	e5943440	 ldr         r3, [r4, #0x440]
  0010c	e3130004	 tst         r3, #4
  00110	159f0038	 ldrne       r0, [pc, #0x38]
  00114	13a01001	 movne       r1, #1
  00118	1b000000	 blne        NKDbgPrintfW
  0011c	e2888001	 add         r8, r8, #1
  00120	e358000a	 cmp         r8, #0xA
  00124	e287701c	 add         r7, r7, #0x1C
  00128	3affffbd	 bcc         |$LL6@DomainInit@2|
  0012c	e5943440	 ldr         r3, [r4, #0x440]

; 565  :         }
; 566  : 
; 567  : 
; 568  :     OALMSG(OAL_FUNC, (L"-DomainInitialize()=%d\r\n", rc));

  00130	e3130004	 tst         r3, #4
  00134	159f0010	 ldrne       r0, [pc, #0x10]
  00138	13a01001	 movne       r1, #1
  0013c	1b000000	 blne        NKDbgPrintfW

; 569  :     return rc;    

  00140	e3a00001	 mov         r0, #1

; 570  : }

  00144	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00148	e12fff1e	 bx          lr
  0014c		 |$LN37@DomainInit@2|
  0014c		 |$LN38@DomainInit@2|
  0014c	00000000	 DCD         |??_C@_1DC@PHJGNBDE@?$AA?9?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00150		 |$LN39@DomainInit@2|
  00150	00000000	 DCD         |??_C@_1EG@MJBAHCAP@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@|
  00154		 |$LN40@DomainInit@2|
  00154	00000000	 DCD         |??_C@_1IO@GHDCOMKL@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAC?$AAl?$AAo@|
  00158		 |$LN41@DomainInit@2|
  00158	00000000	 DCD         |??_C@_1DE@IEBANBBC@?$AA?9?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0015c		 |$LN42@DomainInit@2|
  0015c	00000000	 DCD         |??_C@_1LI@HACPIACF@?$AA?$CL?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  00160		 |$LN43@DomainInit@2|
  00160	00000000	 DCD         |s_DomainTable|
  00164		 |$LN44@DomainInit@2|
  00164	00000000	 DCD         |??_C@_1CM@KJPIEGMJ@?$AA?$CL?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00168		 |$LN45@DomainInit@2|
  00168	00000000	 DCD         |dpCurSettings|
  0016c		 |$M47509|

			 ENDP  ; |DomainInitialize|

	EXPORT	|PrcmRestoreDomain|

  00000			 AREA	 |.pdata|, PDATA
|$T47537| DCD	|$LN11@PrcmRestor|
	DCD	0x40002201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmRestoreDomain| PROC

; 580  : {

  00000		 |$LN11@PrcmRestor|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47534|
  00004	e1a04000	 mov         r4, r0

; 581  :     UINT i;
; 582  :     BOOL rc = TRUE;
; 583  :     UINT cm_sleepdep;
; 584  :     UINT cm_clkstctrl;   
; 585  :     OMAP_CM_REGS   *pCmRegs;
; 586  :     OMAP_PRM_REGS  *pPrmRegs;
; 587  :     ClockDomainInfo_t  *pClockStates;    
; 588  :     PowerDomainState_t *pDomainState;
; 589  :     
; 590  :     // initialize variables
; 591  :     pCmRegs = GetCmRegisterSet(powerDomain);

  00008	eb000000	 bl          GetCmRegisterSet
  0000c	e1a06000	 mov         r6, r0

; 592  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  00010	e1a00004	 mov         r0, r4
  00014	eb000000	 bl          GetPrmRegisterSet

; 593  :     pClockStates = s_DomainTable[powerDomain].pClockStates;

  00018	e59f2064	 ldr         r2, [pc, #0x64]
  0001c	e0643184	 rsb         r3, r4, r4, lsl #3

; 594  :     pDomainState = s_DomainTable[powerDomain].pDomainState;
; 595  :         
; 596  :     // restore clk src dividers
; 597  :     _DomainClockRestore(powerDomain);

  00020	e1a00004	 mov         r0, r4
  00024	e0824103	 add         r4, r2, r3, lsl #2
  00028	e594500c	 ldr         r5, [r4, #0xC]
  0002c	e5947008	 ldr         r7, [r4, #8]
  00030	eb000000	 bl          _DomainClockRestore

; 598  : 
; 599  :     if (s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_SLEEPDEP)

  00034	e5943004	 ldr         r3, [r4, #4]

; 600  :         {
; 601  :         // restore sleep dependencies
; 602  :         cm_sleepdep = INREG32(&pCmRegs->CM_SLEEPDEP_xxx) & ~SLEEPDEP_MASK;
; 603  :         cm_sleepdep |= pDomainState->sleepDependency << SLEEPDEP_SHIFT;
; 604  :         OUTREG32(&pCmRegs->CM_SLEEPDEP_xxx, cm_sleepdep);
; 605  :         }
; 606  : 
; 607  :     // restore clock state
; 608  :     cm_clkstctrl = 0;
; 609  :     for (i = 0; i < pClockStates->count; ++i)

  00038	e3a01000	 mov         r1, #0
  0003c	e3130002	 tst         r3, #2
  00040	15963044	 ldrne       r3, [r6, #0x44]
  00044	15972008	 ldrne       r2, [r7, #8]
  00048	13c330ff	 bicne       r3, r3, #0xFF
  0004c	11823003	 orrne       r3, r2, r3
  00050	15863044	 strne       r3, [r6, #0x44]
  00054	e5953000	 ldr         r3, [r5]
  00058	e1b00003	 movs        r0, r3
  0005c	0a000004	 beq         |$LN1@PrcmRestor|
  00060		 |$LL3@PrcmRestor|

; 610  :         {
; 611  :         cm_clkstctrl |= (pClockStates->rgClockDomains[i].clockState << pClockStates->rgClockDomains[i].clockShift) << CLKSTCTRL_SHIFT;

  00060	e5952008	 ldr         r2, [r5, #8]
  00064	e5b5300c	 ldr         r3, [r5, #0xC]!
  00068	e2500001	 subs        r0, r0, #1
  0006c	e1811312	 orr         r1, r1, r2, lsl r3
  00070	1afffffa	 bne         |$LL3@PrcmRestor|
  00074		 |$LN1@PrcmRestor|

; 612  :         }
; 613  :     OUTREG32(&pCmRegs->CM_CLKSTCTRL_xxx, cm_clkstctrl);

  00074	e5861048	 str         r1, [r6, #0x48]

; 614  : 
; 615  :     return rc;

  00078	e3a00001	 mov         r0, #1

; 616  : }

  0007c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN12@PrcmRestor|
  00084		 |$LN13@PrcmRestor|
  00084	00000000	 DCD         |s_DomainTable|
  00088		 |$M47535|

			 ENDP  ; |PrcmRestoreDomain|

	EXPORT	|PrcmDomainSetWakeupDependency|
	EXPORT	|??_C@_1EM@KMAAEICN@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KE@GFMBGEDA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47560| DCD	|$LN18@PrcmDomain@4|
	DCD	0x40003a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@KMAAEICN@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "W", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, "u"
	DCB	0x0, "p", 0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KE@GFMBGEDA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "W", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, "u"
	DCB	0x0, "p", 0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "("
	DCB	0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "f", 0x0, "f"
	DCB	0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "b", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDomainSetWakeupDependency| PROC

; 625  : {

  00000		 |$LN18@PrcmDomain@4|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M47557|
  00004	e1a08002	 mov         r8, r2
  00008	e1a09001	 mov         r9, r1
  0000c	e1a06000	 mov         r6, r0

; 626  :     BOOL rc = FALSE;
; 627  :     PowerDomainState_t *pDomainState;
; 628  :     if (!g_bSingleThreaded)

  00010	e59fa0cc	 ldr         r10, [pc, #0xCC]
  00014	e59f70c4	 ldr         r7, [pc, #0xC4]
  00018	e3a05000	 mov         r5, #0
  0001c	e59a3000	 ldr         r3, [r10]
  00020	e3530000	 cmp         r3, #0
  00024	1a000006	 bne         |$LN14@PrcmDomain@4|

; 629  :         OALMSG(OAL_FUNC, (L"+PrcmDomainSetWakeupDependency"
; 630  :             L"(powerDomain=%d, ffDependency=0x%08X, bEnable=%d)\r\n", 
; 631  :             powerDomain, ffDependency, bEnable));

  00028	e5973440	 ldr         r3, [r7, #0x440]
  0002c	e3130004	 tst         r3, #4
  00030	159f00a4	 ldrne       r0, [pc, #0xA4]
  00034	11a03008	 movne       r3, r8
  00038	11a02009	 movne       r2, r9
  0003c	11a01006	 movne       r1, r6
  00040	1b000000	 blne        NKDbgPrintfW
  00044		 |$LN14@PrcmDomain@4|

; 632  :     
; 633  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  00044	e356000a	 cmp         r6, #0xA
  00048	2a000016	 bcs         |$cleanUp$47009|

; 634  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_WKUPDEP) == 0) goto cleanUp;

  0004c	e59f2084	 ldr         r2, [pc, #0x84]
  00050	e0663186	 rsb         r3, r6, r6, lsl #3
  00054	e0822103	 add         r2, r2, r3, lsl #2
  00058	e5923004	 ldr         r3, [r2, #4]
  0005c	e3130001	 tst         r3, #1
  00060	0a000010	 beq         |$cleanUp$47009|

; 635  : 
; 636  :     // update internal state information 
; 637  :     pDomainState = s_DomainTable[powerDomain].pDomainState;

  00064	e5923008	 ldr         r3, [r2, #8]
  00068	e1b04003	 movs        r4, r3

; 638  :     if (pDomainState == NULL) goto cleanUp;

  0006c	0a00000d	 beq         |$cleanUp$47009|

; 639  : 
; 640  :     Lock(Mutex_Domain);

  00070	e3a00002	 mov         r0, #2
  00074	eb000000	 bl          Lock

; 641  :     ffDependency &= WKDEP_MASK;
; 642  :     ffDependency >>= WKDEP_SHIFT;
; 643  :     if (bEnable != FALSE)
; 644  :         {
; 645  :         pDomainState->wakeDependency |= ffDependency; 

  00078	e594300c	 ldr         r3, [r4, #0xC]
  0007c	e20920ff	 and         r2, r9, #0xFF
  00080	e3580000	 cmp         r8, #0
  00084	11833002	 orrne       r3, r3, r2

; 646  :         }
; 647  :     else
; 648  :         {
; 649  :         pDomainState->wakeDependency &= ~ffDependency; 

  00088	01c33002	 biceq       r3, r3, r2

; 650  :         }
; 651  : 
; 652  :     rc = _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_WKUPDEP);

  0008c	e3a01001	 mov         r1, #1
  00090	e1a00006	 mov         r0, r6
  00094	e584300c	 str         r3, [r4, #0xC]
  00098	eb000000	 bl          _PrcmDomainHwUpdate
  0009c	e1a05000	 mov         r5, r0

; 653  :     Unlock(Mutex_Domain);

  000a0	e3a00002	 mov         r0, #2
  000a4	eb000000	 bl          Unlock
  000a8		 |$cleanUp$47009|
  000a8	e59a3000	 ldr         r3, [r10]

; 654  :     
; 655  : cleanUp:        
; 656  :     if (!g_bSingleThreaded)

  000ac	e3530000	 cmp         r3, #0
  000b0	1a000004	 bne         |$LN12@PrcmDomain@4|
  000b4	e5973440	 ldr         r3, [r7, #0x440]

; 657  :         OALMSG(OAL_FUNC, (L"-PrcmDomainSetWakeupDependency()=%d\r\n", rc));

  000b8	e3130004	 tst         r3, #4
  000bc	159f0010	 ldrne       r0, [pc, #0x10]
  000c0	11a01005	 movne       r1, r5
  000c4	1b000000	 blne        NKDbgPrintfW
  000c8		 |$LN12@PrcmDomain@4|

; 658  :     return rc;
; 659  : }

  000c8	e1a00005	 mov         r0, r5
  000cc	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN19@PrcmDomain@4|
  000d4		 |$LN20@PrcmDomain@4|
  000d4	00000000	 DCD         |??_C@_1EM@KMAAEICN@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ@|
  000d8		 |$LN21@PrcmDomain@4|
  000d8	00000000	 DCD         |s_DomainTable|
  000dc		 |$LN22@PrcmDomain@4|
  000dc	00000000	 DCD         |??_C@_1KE@GFMBGEDA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp@|
  000e0		 |$LN23@PrcmDomain@4|
  000e0	00000000	 DCD         |dpCurSettings|
  000e4		 |$LN24@PrcmDomain@4|
  000e4	00000000	 DCD         |g_bSingleThreaded|
  000e8		 |$M47558|

			 ENDP  ; |PrcmDomainSetWakeupDependency|

	EXPORT	|PrcmDomainSetSleepDependency|
	EXPORT	|??_C@_1EK@HCAJMEHB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KC@MCEKLACC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp?$AAo@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47586| DCD	|$LN15@PrcmDomain@5|
	DCD	0x40003201

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@HCAJMEHB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ?$AA?$DN@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "l", 0x0, "e", 0x0, "e", 0x0, "p"
	DCB	0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "(", 0x0, ")"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KC@MCEKLACC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp?$AAo@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "l", 0x0, "e", 0x0, "e", 0x0, "p"
	DCB	0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "(", 0x0, "p"
	DCB	0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "f", 0x0, "f", 0x0, "D"
	DCB	0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "n", 0x0, "c", 0x0, "y", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "b", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDomainSetSleepDependency| PROC

; 668  : {

  00000		 |$LN15@PrcmDomain@5|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M47583|
  00004	e1a07002	 mov         r7, r2
  00008	e1a08001	 mov         r8, r1
  0000c	e1a06000	 mov         r6, r0

; 669  :     BOOL rc = FALSE;
; 670  :     PowerDomainState_t *pDomainState;
; 671  :     OALMSG(OAL_FUNC, (L"+PrcmDomainSetSleepDependency"
; 672  :         L"(powerDomain=%d, ffDependency=0x%08X, bEnable=%d)\r\n", 
; 673  :         powerDomain, ffDependency, bEnable));

  00010	e59f90ac	 ldr         r9, [pc, #0xAC]
  00014	e3a05000	 mov         r5, #0
  00018	e5993440	 ldr         r3, [r9, #0x440]
  0001c	e3130004	 tst         r3, #4
  00020	159f0098	 ldrne       r0, [pc, #0x98]
  00024	11a03007	 movne       r3, r7
  00028	11a02008	 movne       r2, r8
  0002c	11a01006	 movne       r1, r6
  00030	1b000000	 blne        NKDbgPrintfW

; 674  :     
; 675  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  00034	e356000a	 cmp         r6, #0xA
  00038	2a000016	 bcs         |$cleanUp$47030|

; 676  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_SLEEPDEP) == 0) goto cleanUp;

  0003c	e59fe078	 ldr         lr, [pc, #0x78]
  00040	e0663186	 rsb         r3, r6, r6, lsl #3
  00044	e08e0103	 add         r0, lr, r3, lsl #2
  00048	e5903004	 ldr         r3, [r0, #4]
  0004c	e3130002	 tst         r3, #2
  00050	0a000010	 beq         |$cleanUp$47030|

; 677  : 
; 678  :     // update internal state information 
; 679  :     pDomainState = s_DomainTable[powerDomain].pDomainState;

  00054	e5903008	 ldr         r3, [r0, #8]
  00058	e1b04003	 movs        r4, r3

; 680  :     if (pDomainState == NULL) goto cleanUp;

  0005c	0a00000d	 beq         |$cleanUp$47030|

; 681  :     
; 682  :     Lock(Mutex_Domain);

  00060	e3a00002	 mov         r0, #2
  00064	eb000000	 bl          Lock

; 683  :     ffDependency &= SLEEPDEP_MASK;
; 684  :     ffDependency >>= SLEEPDEP_SHIFT;
; 685  :     if (bEnable != FALSE)
; 686  :         {
; 687  :         pDomainState->sleepDependency |= ffDependency; 

  00068	e5943008	 ldr         r3, [r4, #8]
  0006c	e20820ff	 and         r2, r8, #0xFF
  00070	e3570000	 cmp         r7, #0
  00074	11833002	 orrne       r3, r3, r2

; 688  :         }
; 689  :     else
; 690  :         {
; 691  :         pDomainState->sleepDependency &= ~ffDependency; 

  00078	01c33002	 biceq       r3, r3, r2

; 692  :         }
; 693  : 
; 694  :     rc = _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_SLEEPDEP);

  0007c	e3a01002	 mov         r1, #2
  00080	e1a00006	 mov         r0, r6
  00084	e5843008	 str         r3, [r4, #8]
  00088	eb000000	 bl          _PrcmDomainHwUpdate
  0008c	e1a05000	 mov         r5, r0

; 695  :     Unlock(Mutex_Domain);

  00090	e3a00002	 mov         r0, #2
  00094	eb000000	 bl          Unlock
  00098		 |$cleanUp$47030|
  00098	e5993440	 ldr         r3, [r9, #0x440]

; 696  :     
; 697  : cleanUp:        
; 698  :     OALMSG(OAL_FUNC, (L"-PrcmDomainSetSleepDependency()=%d\r\n", rc));

  0009c	e3130004	 tst         r3, #4
  000a0	159f0010	 ldrne       r0, [pc, #0x10]
  000a4	11a01005	 movne       r1, r5
  000a8	1b000000	 blne        NKDbgPrintfW

; 699  :     return rc;
; 700  : }

  000ac	e1a00005	 mov         r0, r5
  000b0	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$LN16@PrcmDomain@5|
  000b8		 |$LN17@PrcmDomain@5|
  000b8	00000000	 DCD         |??_C@_1EK@HCAJMEHB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ?$AA?$DN@|
  000bc		 |$LN18@PrcmDomain@5|
  000bc	00000000	 DCD         |s_DomainTable|
  000c0		 |$LN19@PrcmDomain@5|
  000c0	00000000	 DCD         |??_C@_1KC@MCEKLACC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp?$AAo@|
  000c4		 |$LN20@PrcmDomain@5|
  000c4	00000000	 DCD         |dpCurSettings|
  000c8		 |$M47584|

			 ENDP  ; |PrcmDomainSetSleepDependency|

	EXPORT	|PrcmDomainSetPowerState|
	EXPORT	|??_C@_1EA@IIPEHBKG@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@KLIMMIKC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@| [ DATA ] ; `string'
	IMPORT	|OALGetTickCount|

  00000			 AREA	 |.pdata|, PDATA
|$T47615| DCD	|$LN15@PrcmDomain@6|
	DCD	0x40004301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@IIPEHBKG@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@KLIMMIKC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "p", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDomainSetPowerState| PROC

; 709  : {

  00000		 |$LN15@PrcmDomain@6|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M47612|
  00004	e1a05002	 mov         r5, r2
  00008	e1a04001	 mov         r4, r1
  0000c	e1a07000	 mov         r7, r0

; 710  :     BOOL rc;
; 711  :     UINT temp;
; 712  :     UINT clockState = CLKSTCTRL_DISABLED;
; 713  :     UINT oldPowerState = (UINT)-1;
; 714  :     OMAP_CM_REGS *pCmRegs;
; 715  :     
; 716  :     OALMSG(OAL_FUNC, (L"+PrcmDomainSetPowerState"
; 717  :         L"(powerDomain=%d, powerState=0x%08X)\r\n", 
; 718  :         powerDomain, powerState));

  00010	e59fb0f0	 ldr         r11, [pc, #0xF0]
  00014	e3a08000	 mov         r8, #0
  00018	e3e06000	 mvn         r6, #0
  0001c	e59b3440	 ldr         r3, [r11, #0x440]
  00020	e3130004	 tst         r3, #4
  00024	159f00d8	 ldrne       r0, [pc, #0xD8]
  00028	11a02004	 movne       r2, r4
  0002c	11a01007	 movne       r1, r7
  00030	1b000000	 blne        NKDbgPrintfW

; 719  :     
; 720  :     // get old power states to check if power domain needs a sw wakeup
; 721  :     if (s_DomainTable[powerDomain].pClockStates != NULL)

  00034	e59f90c4	 ldr         r9, [pc, #0xC4]
  00038	e067a187	 rsb         r10, r7, r7, lsl #3

; 722  :         {
; 723  :         clockState = s_DomainTable[powerDomain].pClockStates->rgClockDomains[0].clockState;
; 724  :         }
; 725  : 
; 726  :     if (s_DomainTable[powerDomain].pDomainState != NULL)
; 727  :         {
; 728  :         oldPowerState = s_DomainTable[powerDomain].pDomainState->powerState;
; 729  :         }
; 730  :     
; 731  :     rc = PrcmDomainSetPowerStateInternal(powerDomain, powerState, logicState, TRUE);

  0003c	e1a02005	 mov         r2, r5
  00040	e089110a	 add         r1, r9, r10, lsl #2
  00044	e591300c	 ldr         r3, [r1, #0xC]
  00048	e1a00007	 mov         r0, r7
  0004c	e3530000	 cmp         r3, #0
  00050	15938008	 ldrne       r8, [r3, #8]
  00054	e5913008	 ldr         r3, [r1, #8]
  00058	e1a01004	 mov         r1, r4
  0005c	e3530000	 cmp         r3, #0
  00060	15936000	 ldrne       r6, [r3]
  00064	e3a03001	 mov         r3, #1
  00068	eb000000	 bl          PrcmDomainSetPowerStateInternal
  0006c	e1a05000	 mov         r5, r0

; 732  :     
; 733  :     // force a sleep to sleep transition through software since it
; 734  :     // isn't supported in hardware
; 735  :     if (oldPowerState != -1 && clockState == CLKSTCTRL_AUTOMATIC &&        
; 736  :         s_DomainTable[powerDomain].refCount == 0 && oldPowerState != powerState)

  00070	e3760001	 cmn         r6, #1
  00074	0a000018	 beq         |$LN3@PrcmDomain@6|
  00078	e3580003	 cmp         r8, #3
  0007c	1a000016	 bne         |$LN3@PrcmDomain@6|
  00080	e799310a	 ldr         r3, [r9, +r10, lsl #2]
  00084	e3530000	 cmp         r3, #0
  00088	1a000013	 bne         |$LN3@PrcmDomain@6|
  0008c	e1560004	 cmp         r6, r4
  00090	0a000011	 beq         |$LN3@PrcmDomain@6|

; 737  :         {        
; 738  :         pCmRegs = GetCmRegisterSet(powerDomain);

  00094	e1a00007	 mov         r0, r7
  00098	eb000000	 bl          GetCmRegisterSet
  0009c	e1a04000	 mov         r4, r0

; 739  :     
; 740  :         // force sw wake-up of power domain
; 741  :         temp = INREG32(&pCmRegs->CM_CLKSTCTRL_xxx);

  000a0	e5943048	 ldr         r3, [r4, #0x48]

; 742  :         temp &= ~CLKSTCTRL_MASK;
; 743  :         temp |= CLKSTCTRL_WAKEUP;

  000a4	e3c33003	 bic         r3, r3, #3
  000a8	e3833002	 orr         r3, r3, #2

; 744  :         OUTREG32(&pCmRegs->CM_CLKSTCTRL_xxx, temp);

  000ac	e5843048	 str         r3, [r4, #0x48]

; 745  : 
; 746  :         // wait for clock to be activated
; 747  :         temp = OALGetTickCount() + 1;

  000b0	eb000000	 bl          OALGetTickCount
  000b4	e2806001	 add         r6, r0, #1
  000b8		 |$LL2@PrcmDomain@6|

; 748  :         while (INREG32(&pCmRegs->CM_CLKSTST_xxx) == 0 && temp > OALGetTickCount());

  000b8	e594304c	 ldr         r3, [r4, #0x4C]
  000bc	e3530000	 cmp         r3, #0
  000c0	1a000002	 bne         |$LN1@PrcmDomain@6|
  000c4	eb000000	 bl          OALGetTickCount
  000c8	e1560000	 cmp         r6, r0
  000cc	8afffff9	 bhi         |$LL2@PrcmDomain@6|
  000d0		 |$LN1@PrcmDomain@6|

; 749  : 
; 750  :         // put clock back to automatic mode
; 751  :         temp = INREG32(&pCmRegs->CM_CLKSTCTRL_xxx);

  000d0	e5943048	 ldr         r3, [r4, #0x48]

; 752  :         temp &= ~CLKSTCTRL_MASK;
; 753  :         temp |= CLKSTCTRL_AUTOMATIC;

  000d4	e3833003	 orr         r3, r3, #3

; 754  :         OUTREG32(&pCmRegs->CM_CLKSTCTRL_xxx, temp);

  000d8	e5843048	 str         r3, [r4, #0x48]
  000dc		 |$LN3@PrcmDomain@6|

; 755  :         }
; 756  :     
; 757  :     OALMSG(OAL_FUNC, (L"+PrcmDomainSetPowerState()=%d\r\n", rc));

  000dc	e59b3440	 ldr         r3, [r11, #0x440]
  000e0	e3130004	 tst         r3, #4
  000e4	159f0010	 ldrne       r0, [pc, #0x10]
  000e8	11a01005	 movne       r1, r5
  000ec	1b000000	 blne        NKDbgPrintfW

; 758  :     return rc;
; 759  : }

  000f0	e1a00005	 mov         r0, r5
  000f4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000f8	e12fff1e	 bx          lr
  000fc		 |$LN16@PrcmDomain@6|
  000fc		 |$LN17@PrcmDomain@6|
  000fc	00000000	 DCD         |??_C@_1EA@IIPEHBKG@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00100		 |$LN18@PrcmDomain@6|
  00100	00000000	 DCD         |s_DomainTable|
  00104		 |$LN19@PrcmDomain@6|
  00104	00000000	 DCD         |??_C@_1HM@KLIMMIKC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@|
  00108		 |$LN20@PrcmDomain@6|
  00108	00000000	 DCD         |dpCurSettings|
  0010c		 |$M47613|

			 ENDP  ; |PrcmDomainSetPowerState|

	EXPORT	|PrcmDomainSetClockState|
	EXPORT	|??_C@_1EA@JEMFKOAK@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JM@MEHAOEAE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47643| DCD	|$LN22@PrcmDomain@7|
	DCD	0x40004501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JEMFKOAK@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JM@MEHAOEAE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "c", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "D", 0x0, "o", 0x0, "m"
	DCB	0x0, "a", 0x0, "i", 0x0, "n", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDomainSetClockState| PROC

; 768  : {

  00000		 |$LN22@PrcmDomain@7|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M47640|
  00004	e1a0a002	 mov         r10, r2
  00008	e1a09001	 mov         r9, r1
  0000c	e1a06000	 mov         r6, r0

; 769  :     UINT i;
; 770  :     BOOL rc = FALSE;
; 771  :     ClockDomainInfo_t *pClockStates;
; 772  :     if (!g_bSingleThreaded)

  00010	e59f80f8	 ldr         r8, [pc, #0xF8]
  00014	e59f70f0	 ldr         r7, [pc, #0xF0]
  00018	e3a04000	 mov         r4, #0
  0001c	e5983000	 ldr         r3, [r8]
  00020	e3530000	 cmp         r3, #0
  00024	1a000006	 bne         |$LN19@PrcmDomain@7|

; 773  :         OALMSG(OAL_FUNC, (L"+PrcmDomainSetClockState"
; 774  :             L"(powerDomain=%d, clockDomain=%d, clockState=0x%08X)\r\n", 
; 775  :             powerDomain, clockDomain, clockState));

  00028	e5973440	 ldr         r3, [r7, #0x440]
  0002c	e3130004	 tst         r3, #4
  00030	159f00d0	 ldrne       r0, [pc, #0xD0]
  00034	11a0300a	 movne       r3, r10
  00038	11a02009	 movne       r2, r9
  0003c	11a01006	 movne       r1, r6
  00040	1b000000	 blne        NKDbgPrintfW
  00044		 |$LN19@PrcmDomain@7|

; 776  : 
; 777  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  00044	e356000a	 cmp         r6, #0xA
  00048	2a000021	 bcs         |$cleanUp$47084|

; 778  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_CLOCKSTATE) == 0) goto cleanUp;

  0004c	e59f20b0	 ldr         r2, [pc, #0xB0]
  00050	e0663186	 rsb         r3, r6, r6, lsl #3
  00054	e0822103	 add         r2, r2, r3, lsl #2
  00058	e5923004	 ldr         r3, [r2, #4]
  0005c	e3130008	 tst         r3, #8
  00060	0a00001b	 beq         |$cleanUp$47084|

; 779  : 
; 780  :     // update internal state information 
; 781  :     pClockStates = s_DomainTable[powerDomain].pClockStates;

  00064	e592300c	 ldr         r3, [r2, #0xC]
  00068	e1b05003	 movs        r5, r3

; 782  :     if (pClockStates == NULL) goto cleanUp;

  0006c	0a000018	 beq         |$cleanUp$47084|

; 783  : 
; 784  :     Lock(Mutex_Domain);

  00070	e3a00002	 mov         r0, #2
  00074	eb000000	 bl          Lock

; 785  :     for (i = 0; i < pClockStates->count; ++i)

  00078	e5953000	 ldr         r3, [r5]
  0007c	e3a01000	 mov         r1, #0
  00080	e1b00003	 movs        r0, r3
  00084	0a00000f	 beq         |$LN3@PrcmDomain@7|

; 783  : 
; 784  :     Lock(Mutex_Domain);

  00088	e1a02005	 mov         r2, r5
  0008c		 |$LL5@PrcmDomain@7|

; 786  :         {
; 787  :         if (pClockStates->rgClockDomains[i].clockDomain == (ClockDomain_e) clockDomain)

  0008c	e5923004	 ldr         r3, [r2, #4]
  00090	e1530009	 cmp         r3, r9
  00094	0a000004	 beq         |$LN17@PrcmDomain@7|
  00098	e2811001	 add         r1, r1, #1
  0009c	e1510000	 cmp         r1, r0
  000a0	e282200c	 add         r2, r2, #0xC
  000a4	3afffff8	 bcc         |$LL5@PrcmDomain@7|
  000a8	ea000006	 b           |$LN3@PrcmDomain@7|
  000ac		 |$LN17@PrcmDomain@7|

; 788  :             {
; 789  :             clockState &= CLKSTCTRL_MASK;
; 790  :             clockState >>= CLKSTCTRL_SHIFT;
; 791  :             pClockStates->rgClockDomains[i].clockState = clockState;

  000ac	e0813081	 add         r3, r1, r1, lsl #1
  000b0	e0852103	 add         r2, r5, r3, lsl #2
  000b4	e20a3003	 and         r3, r10, #3

; 792  :             _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_CLOCKSTATE);

  000b8	e3a01008	 mov         r1, #8
  000bc	e1a00006	 mov         r0, r6
  000c0	e5823008	 str         r3, [r2, #8]
  000c4	eb000000	 bl          _PrcmDomainHwUpdate
  000c8		 |$LN3@PrcmDomain@7|

; 793  :             break;
; 794  :             }
; 795  :         }    
; 796  :     Unlock(Mutex_Domain);

  000c8	e3a00002	 mov         r0, #2
  000cc	eb000000	 bl          Unlock

; 797  :     rc = TRUE;

  000d0	e3a04001	 mov         r4, #1
  000d4		 |$cleanUp$47084|
  000d4	e5983000	 ldr         r3, [r8]

; 798  :     
; 799  : cleanUp:        
; 800  :     if (!g_bSingleThreaded)

  000d8	e3530000	 cmp         r3, #0
  000dc	1a000004	 bne         |$LN14@PrcmDomain@7|
  000e0	e5973440	 ldr         r3, [r7, #0x440]

; 801  :         OALMSG(OAL_FUNC, (L"-PrcmDomainSetClockState()=%d\r\n", rc));

  000e4	e3130004	 tst         r3, #4
  000e8	159f0010	 ldrne       r0, [pc, #0x10]
  000ec	11a01004	 movne       r1, r4
  000f0	1b000000	 blne        NKDbgPrintfW
  000f4		 |$LN14@PrcmDomain@7|

; 802  :     return rc;
; 803  : }

  000f4	e1a00004	 mov         r0, r4
  000f8	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000fc	e12fff1e	 bx          lr
  00100		 |$LN23@PrcmDomain@7|
  00100		 |$LN24@PrcmDomain@7|
  00100	00000000	 DCD         |??_C@_1EA@JEMFKOAK@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00104		 |$LN25@PrcmDomain@7|
  00104	00000000	 DCD         |s_DomainTable|
  00108		 |$LN26@PrcmDomain@7|
  00108	00000000	 DCD         |??_C@_1JM@MEHAOEAE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@|
  0010c		 |$LN27@PrcmDomain@7|
  0010c	00000000	 DCD         |dpCurSettings|
  00110		 |$LN28@PrcmDomain@7|
  00110	00000000	 DCD         |g_bSingleThreaded|
  00114		 |$M47641|

			 ENDP  ; |PrcmDomainSetClockState|

	EXPORT	|PrcmDomainSetClockStateKernel|

  00000			 AREA	 |.pdata|, PDATA
|$T47667| DCD	|$LN15@PrcmDomain@8|
	DCD	0x40002701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDomainSetClockStateKernel| PROC

; 815  : {

  00000		 |$LN15@PrcmDomain@8|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47664|
  00004	e1a07002	 mov         r7, r2
  00008	e1a06000	 mov         r6, r0

; 816  :     UINT i;
; 817  :     BOOL rc = FALSE;

  0000c	e3a00000	 mov         r0, #0

; 818  :     ClockDomainInfo_t *pClockStates;
; 819  : 
; 820  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  00010	e356000a	 cmp         r6, #0xA
  00014	2a00001d	 bcs         |$cleanUp$47107|

; 821  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_CLOCKSTATE) == 0) goto cleanUp;

  00018	e59fe078	 ldr         lr, [pc, #0x78]
  0001c	e0663186	 rsb         r3, r6, r6, lsl #3
  00020	e08ee103	 add         lr, lr, r3, lsl #2
  00024	e59e3004	 ldr         r3, [lr, #4]
  00028	e3130008	 tst         r3, #8
  0002c	0a000017	 beq         |$cleanUp$47107|

; 822  : 
; 823  :     // update internal state information 
; 824  :     pClockStates = s_DomainTable[powerDomain].pClockStates;

  00030	e59e300c	 ldr         r3, [lr, #0xC]
  00034	e1b05003	 movs        r5, r3

; 825  :     if (pClockStates == NULL) goto cleanUp;

  00038	0a000014	 beq         |$cleanUp$47107|

; 826  : 
; 827  :     for (i = 0; i < pClockStates->count; ++i)

  0003c	e5953000	 ldr         r3, [r5]
  00040	e3a0e000	 mov         lr, #0
  00044	e1b00003	 movs        r0, r3
  00048	0a00000f	 beq         |$LN2@PrcmDomain@8|
  0004c	e1a04005	 mov         r4, r5
  00050		 |$LL4@PrcmDomain@8|

; 828  :         {
; 829  :         if (pClockStates->rgClockDomains[i].clockDomain == (ClockDomain_e) clockDomain)

  00050	e5943004	 ldr         r3, [r4, #4]
  00054	e1530001	 cmp         r3, r1
  00058	0a000004	 beq         |$LN11@PrcmDomain@8|
  0005c	e28ee001	 add         lr, lr, #1
  00060	e15e0000	 cmp         lr, r0
  00064	e284400c	 add         r4, r4, #0xC
  00068	3afffff8	 bcc         |$LL4@PrcmDomain@8|
  0006c	ea000006	 b           |$LN2@PrcmDomain@8|
  00070		 |$LN11@PrcmDomain@8|

; 830  :             {
; 831  :             clockState &= CLKSTCTRL_MASK;
; 832  :             clockState >>= CLKSTCTRL_SHIFT;
; 833  :             pClockStates->rgClockDomains[i].clockState = clockState;

  00070	e08e308e	 add         r3, lr, lr, lsl #1
  00074	e0852103	 add         r2, r5, r3, lsl #2
  00078	e2073003	 and         r3, r7, #3

; 834  :             _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_CLOCKSTATE);

  0007c	e3a01008	 mov         r1, #8
  00080	e1a00006	 mov         r0, r6
  00084	e5823008	 str         r3, [r2, #8]
  00088	eb000000	 bl          _PrcmDomainHwUpdate
  0008c		 |$LN2@PrcmDomain@8|

; 835  :             break;
; 836  :             }
; 837  :         }    
; 838  :     rc = TRUE;

  0008c	e3a00001	 mov         r0, #1
  00090		 |$cleanUp$47107|

; 839  :     
; 840  : cleanUp:        
; 841  :     return rc;
; 842  : }

  00090	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$LN16@PrcmDomain@8|
  00098		 |$LN17@PrcmDomain@8|
  00098	00000000	 DCD         |s_DomainTable|
  0009c		 |$M47665|

			 ENDP  ; |PrcmDomainSetClockStateKernel|

	EXPORT	|PrcmDomainSetMemoryState|
	EXPORT	|??_C@_1EC@GMFKPCKF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LA@DDOCINBK@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47686| DCD	|$LN11@PrcmDomain@9|
	DCD	0x40002901

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@GMFKPCKF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LA@DDOCINBK@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "(", 0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "m"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "M", 0x0, "a", 0x0, "s", 0x0, "k", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDomainSetMemoryState| PROC

; 851  : {

  00000		 |$LN11@PrcmDomain@9|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M47683|
  00004	e1a06002	 mov         r6, r2
  00008	e1a07001	 mov         r7, r1
  0000c	e1a05000	 mov         r5, r0

; 852  : //    UINT val;    
; 853  :     BOOL rc = FALSE;
; 854  :     OMAP_PRM_REGS *pPrmRegs;
; 855  :     OALMSG(OAL_FUNC, (L"+PrcmDomainSetMemoryState"
; 856  :         L"(powerDomain=%d, memoryState=0x%08X, memoryStateMask=0x%08X)\r\n", 
; 857  :         powerDomain, memoryState, memoryStateMask));

  00010	e59f8088	 ldr         r8, [pc, #0x88]
  00014	e3a04000	 mov         r4, #0
  00018	e5983440	 ldr         r3, [r8, #0x440]
  0001c	e3130004	 tst         r3, #4
  00020	159f0074	 ldrne       r0, [pc, #0x74]
  00024	11a03006	 movne       r3, r6
  00028	11a02007	 movne       r2, r7
  0002c	11a01005	 movne       r1, r5
  00030	1b000000	 blne        NKDbgPrintfW

; 858  : 
; 859  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  00034	e1a00005	 mov         r0, r5
  00038	eb000000	 bl          GetPrmRegisterSet
  0003c	e3500000	 cmp         r0, #0

; 860  :     if (pPrmRegs == NULL) goto cleanUp;

  00040	0a00000b	 beq         |$cleanUp$47129|

; 861  : 
; 862  :     Lock(Mutex_Domain);

  00044	e3a00002	 mov         r0, #2
  00048	eb000000	 bl          Lock

; 863  :     // update cached logic state
; 864  :     if (memoryStateMask & LOGICRETSTATE)

  0004c	e3160004	 tst         r6, #4

; 865  :         {
; 866  :         s_DomainTable[powerDomain].pDomainState->logicState = memoryState & LOGICRETSTATE_MASK;

  00050	159f2040	 ldrne       r2, [pc, #0x40]
  00054	10653185	 rsbne       r3, r5, r5, lsl #3
  00058	12071004	 andne       r1, r7, #4
  0005c	10823103	 addne       r3, r2, r3, lsl #2
  00060	15933008	 ldrne       r3, [r3, #8]

; 867  :         }
; 868  : 
; 869  :     Unlock(Mutex_Domain);

  00064	e3a00002	 mov         r0, #2
  00068	15831004	 strne       r1, [r3, #4]
  0006c	eb000000	 bl          Unlock

; 870  :     
; 871  :     rc = TRUE;

  00070	e3a04001	 mov         r4, #1
  00074		 |$cleanUp$47129|

; 872  :     
; 873  : cleanUp:        
; 874  :     OALMSG(OAL_FUNC, (L"-PrcmDomainSetMemoryState()=%d\r\n", rc));

  00074	e5983440	 ldr         r3, [r8, #0x440]
  00078	e3130004	 tst         r3, #4
  0007c	159f0010	 ldrne       r0, [pc, #0x10]
  00080	11a01004	 movne       r1, r4
  00084	1b000000	 blne        NKDbgPrintfW

; 875  :     return rc;
; 876  : }

  00088	e1a00004	 mov         r0, r4
  0008c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$LN12@PrcmDomain@9|
  00094		 |$LN13@PrcmDomain@9|
  00094	00000000	 DCD         |??_C@_1EC@GMFKPCKF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@|
  00098		 |$LN14@PrcmDomain@9|
  00098	00000000	 DCD         |s_DomainTable|
  0009c		 |$LN15@PrcmDomain@9|
  0009c	00000000	 DCD         |??_C@_1LA@DDOCINBK@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD@|
  000a0		 |$LN16@PrcmDomain@9|
  000a0	00000000	 DCD         |dpCurSettings|
  000a4		 |$M47684|

			 ENDP  ; |PrcmDomainSetMemoryState|

	EXPORT	|PrcmDomainClearWakeupStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T47705| DCD	|$LN7@PrcmDomain@10|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDomainClearWakeupStatus| PROC

; 888  : {

  00000		 |$LN7@PrcmDomain@10|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47702|
  00004	e1a05000	 mov         r5, r0

; 889  :     UINT val;    
; 890  :     BOOL rc = FALSE;
; 891  :     OMAP_PRM_REGS *pPrmRegs;
; 892  :     //OALMSG(OAL_FUNC, (L"+PrcmDomainClearWakeupStatus"
; 893  :     //    L"(powerDomain=%d)\r\n", 
; 894  :     //    powerDomain)
; 895  :     //    );
; 896  : 
; 897  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  00008	e3a04000	 mov         r4, #0
  0000c	eb000000	 bl          GetPrmRegisterSet
  00010	e3500000	 cmp         r0, #0

; 898  :     if (pPrmRegs == NULL) goto cleanUp;

  00014	0a000005	 beq         |$cleanUp$47141|

; 899  : 
; 900  :     // This routine should only be called during system boot-up or
; 901  :     // from OEMIdle, OEMPowerOff.  Hence, serialization within this routine
; 902  :     // should not be performed.
; 903  : 
; 904  :     val = INREG32(&pPrmRegs->PM_WKST_xxx);

  00018	e59030b0	 ldr         r3, [r0, #0xB0]

; 905  :     OUTREG32(&pPrmRegs->PM_WKST_xxx, val);
; 906  :     if (powerDomain == POWERDOMAIN_CORE) 

  0001c	e3550001	 cmp         r5, #1

; 907  :         {
; 908  :         val = INREG32(&pPrmRegs->PM_WKST3_xxx);
; 909  :         OUTREG32(&pPrmRegs->PM_WKST3_xxx, val);
; 910  :         }
; 911  :     
; 912  :     rc = TRUE;

  00020	e3a04001	 mov         r4, #1
  00024	e58030b0	 str         r3, [r0, #0xB0]
  00028	059030b8	 ldreq       r3, [r0, #0xB8]
  0002c	058030b8	 streq       r3, [r0, #0xB8]
  00030		 |$cleanUp$47141|

; 913  :     
; 914  : cleanUp:        
; 915  :     //OALMSG(OAL_FUNC, (L"-PrcmDomainClearWakeupStatus()=%d\r\n", rc));
; 916  :     return rc;
; 917  : }

  00030	e1a00004	 mov         r0, r4
  00034	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M47703|

			 ENDP  ; |PrcmDomainClearWakeupStatus|

	EXPORT	|PrcmDomainUpdateRefCount|
	IMPORT	|InterlockedDecrement|
	IMPORT	|InterlockedIncrement|

  00000			 AREA	 |.pdata|, PDATA
|$T47714| DCD	|$LN7@PrcmDomain@11|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDomainUpdateRefCount| PROC

; 925  : {    

  00000		 |$LN7@PrcmDomain@11|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47711|
  00004	e3510000	 cmp         r1, #0

; 926  :     // update refcount
; 927  :     if (bEnable)
; 928  :         {
; 929  :         InterlockedIncrement((LONG*)&s_DomainTable[powerDomain].refCount);

  00008	e59f2020	 ldr         r2, [pc, #0x20]
  0000c	e0603180	 rsb         r3, r0, r0, lsl #3
  00010	e0820103	 add         r0, r2, r3, lsl #2
  00014	0a000002	 beq         |$LN2@PrcmDomain@11|
  00018	eb000000	 bl          InterlockedIncrement

; 934  :         }
; 935  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$LN2@PrcmDomain@11|

; 930  :         }
; 931  :     else
; 932  :         {
; 933  :         InterlockedDecrement((LONG*)&s_DomainTable[powerDomain].refCount);

  00024	eb000000	 bl          InterlockedDecrement

; 934  :         }
; 935  : }

  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$LN8@PrcmDomain@11|
  00030		 |$LN9@PrcmDomain@11|
  00030	00000000	 DCD         |s_DomainTable|
  00034		 |$M47712|

			 ENDP  ; |PrcmDomainUpdateRefCount|

	EXPORT	|PrcmProcessPostMpuWakeup|
	IMPORT	|g_pPrcmPrm|

  00000			 AREA	 |.pdata|, PDATA
|$T47724| DCD	|$LN5@PrcmProces|
	DCD	0x40001800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmProcessPostMpuWakeup| PROC

; 940  : {

  00000		 |$LN5@PrcmProces|
  00000		 |$M47721|

; 941  :     // NOTE:
; 942  :     //  This routine should only be called in OEMIdle where IRQ's are disabled
; 943  :     //
; 944  :     DWORD val;
; 945  : 
; 946  :     // core
; 947  :     OUTREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_WKST1_CORE,
; 948  :         INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_WKST1_CORE)
; 949  :         );

  00000	e59f1054	 ldr         r1, [pc, #0x54]
  00004	e5913000	 ldr         r3, [r1]
  00008	e5932004	 ldr         r2, [r3, #4]
  0000c	e59230b0	 ldr         r3, [r2, #0xB0]
  00010	e58230b0	 str         r3, [r2, #0xB0]

; 950  : 
; 951  :     OUTREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_WKST3_CORE,
; 952  :         INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_WKST3_CORE)
; 953  :         );

  00014	e5913000	 ldr         r3, [r1]
  00018	e5932004	 ldr         r2, [r3, #4]
  0001c	e59230b8	 ldr         r3, [r2, #0xB8]
  00020	e58230b8	 str         r3, [r2, #0xB8]

; 954  : 
; 955  :     // peripheral
; 956  :     OUTREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_WKST_PER,
; 957  :         INREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_WKST_PER)
; 958  :         );

  00024	e5913000	 ldr         r3, [r1]
  00028	e5932008	 ldr         r2, [r3, #8]
  0002c	e59230b0	 ldr         r3, [r2, #0xB0]
  00030	e58230b0	 str         r3, [r2, #0xB0]

; 959  : 
; 960  :     // usbhost
; 961  :     OUTREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->PM_WKST_USBHOST,
; 962  :         INREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->PM_WKST_USBHOST)
; 963  :         );

  00034	e5913000	 ldr         r3, [r1]
  00038	e593200c	 ldr         r2, [r3, #0xC]
  0003c	e59230b0	 ldr         r3, [r2, #0xB0]
  00040	e58230b0	 str         r3, [r2, #0xB0]

; 964  : 
; 965  :     // clear irq status for mpu
; 966  :     val = INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU);

  00044	e5913000	 ldr         r3, [r1]
  00048	e5932028	 ldr         r2, [r3, #0x28]
  0004c	e5923018	 ldr         r3, [r2, #0x18]

; 967  :     OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU, 
; 968  :         val & PRM_IRQENABLE_WKUP_EN
; 969  :         );

  00050	e2033001	 and         r3, r3, #1
  00054	e5823018	 str         r3, [r2, #0x18]

; 970  : 
; 971  : }

  00058	e12fff1e	 bx          lr
  0005c		 |$LN6@PrcmProces|
  0005c		 |$LN7@PrcmProces|
  0005c	00000000	 DCD         |g_pPrcmPrm|
  00060		 |$M47722|

			 ENDP  ; |PrcmProcessPostMpuWakeup|

	EXPORT	|PrcmDomainClearReset|

  00000			 AREA	 |.pdata|, PDATA
|$T47733| DCD	|$LN5@PrcmDomain@12|
	DCD	0x40002300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDomainClearReset| PROC

; 976  : {

  00000		 |$LN5@PrcmDomain@12|
  00000		 |$M47730|

; 977  :     // Clear the Resest states
; 978  :     OUTREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->RM_RSTST_CORE, 
; 979  :             INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->RM_RSTST_CORE)); 

  00000	e59f1080	 ldr         r1, [pc, #0x80]
  00004	e5913000	 ldr         r3, [r1]
  00008	e5932004	 ldr         r2, [r3, #4]
  0000c	e5923058	 ldr         r3, [r2, #0x58]
  00010	e5823058	 str         r3, [r2, #0x58]

; 980  : 
; 981  :     OUTREG32(&g_pPrcmPrm->pOMAP_MPU_PRM->RM_RSTST_MPU, 
; 982  :             INREG32(&g_pPrcmPrm->pOMAP_MPU_PRM->RM_RSTST_MPU)); 

  00014	e5913000	 ldr         r3, [r1]
  00018	e5932014	 ldr         r2, [r3, #0x14]
  0001c	e5923058	 ldr         r3, [r2, #0x58]
  00020	e5823058	 str         r3, [r2, #0x58]

; 983  : 
; 984  :     OUTREG32(&g_pPrcmPrm->pOMAP_EMU_PRM->RM_RSTST_EMU, 
; 985  :             INREG32(&g_pPrcmPrm->pOMAP_EMU_PRM->RM_RSTST_EMU)); 

  00024	e5913000	 ldr         r3, [r1]
  00028	e5932010	 ldr         r2, [r3, #0x10]
  0002c	e5923058	 ldr         r3, [r2, #0x58]
  00030	e5823058	 str         r3, [r2, #0x58]

; 986  : 
; 987  :     OUTREG32(&g_pPrcmPrm->pOMAP_PER_PRM->RM_RSTST_PER,
; 988  :             INREG32(&g_pPrcmPrm->pOMAP_PER_PRM->RM_RSTST_PER)); 

  00034	e5913000	 ldr         r3, [r1]
  00038	e5932008	 ldr         r2, [r3, #8]
  0003c	e5923058	 ldr         r3, [r2, #0x58]
  00040	e5823058	 str         r3, [r2, #0x58]

; 989  : 
; 990  :     OUTREG32(&g_pPrcmPrm->pOMAP_SGX_PRM->RM_RSTST_SGX,
; 991  :             INREG32(&g_pPrcmPrm->pOMAP_SGX_PRM->RM_RSTST_SGX)); 

  00044	e5913000	 ldr         r3, [r1]
  00048	e5932020	 ldr         r2, [r3, #0x20]
  0004c	e5923058	 ldr         r3, [r2, #0x58]
  00050	e5823058	 str         r3, [r2, #0x58]

; 992  : 
; 993  :     OUTREG32(&g_pPrcmPrm->pOMAP_DSS_PRM->RM_RSTST_DSS,
; 994  :             INREG32(&g_pPrcmPrm->pOMAP_DSS_PRM->RM_RSTST_DSS)); 

  00054	e5913000	 ldr         r3, [r1]
  00058	e5932018	 ldr         r2, [r3, #0x18]
  0005c	e5923058	 ldr         r3, [r2, #0x58]
  00060	e5823058	 str         r3, [r2, #0x58]

; 995  : 
; 996  :     OUTREG32(&g_pPrcmPrm->pOMAP_NEON_PRM->RM_RSTST_NEON,
; 997  :             INREG32(&g_pPrcmPrm->pOMAP_NEON_PRM->RM_RSTST_NEON)); 

  00064	e5913000	 ldr         r3, [r1]
  00068	e593201c	 ldr         r2, [r3, #0x1C]
  0006c	e5923058	 ldr         r3, [r2, #0x58]
  00070	e5823058	 str         r3, [r2, #0x58]

; 998  : 
; 999  :     OUTREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->RM_RSTST_USBHOST,
; 1000 :             INREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->RM_RSTST_USBHOST)); 

  00074	e5913000	 ldr         r3, [r1]
  00078	e593200c	 ldr         r2, [r3, #0xC]
  0007c	e5923058	 ldr         r3, [r2, #0x58]
  00080	e5823058	 str         r3, [r2, #0x58]

; 1001 : }

  00084	e12fff1e	 bx          lr
  00088		 |$LN6@PrcmDomain@12|
  00088		 |$LN7@PrcmDomain@12|
  00088	00000000	 DCD         |g_pPrcmPrm|
  0008c		 |$M47731|

			 ENDP  ; |PrcmDomainClearReset|

	END
