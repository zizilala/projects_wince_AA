; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\OAL\PRCM\prcm.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_pSysCtrlGenReg| [ DATA ]
	EXPORT	|g_PrcmPostInit| [ DATA ]
	EXPORT	|g_bSingleThreaded| [ DATA ]
	EXPORT	|g_pCPUInfo| [ DATA ]
	EXPORT	|fnCpuStart| [ DATA ]
	EXPORT	|fnOALCPUIdle| [ DATA ]
	EXPORT	|fnOALUpdateCoreFreq| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|prevGpioIClkState|, 0x4

	 COMMON	|prevGpioFClkState|, 0x4

	 COMMON	|g_pPrcmPrm|, 0x4

	 COMMON	|g_rgPrcmMutex|, 0x78

	 COMMON	|g_pPrcmCm|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|g_pSysCtrlGenReg| % 0x4
|g_PrcmPostInit| % 0x4
|g_bSingleThreaded| % 0x4
|g_pCPUInfo| %	0x4
|fnCpuStart| %	0x4
|fnOALCPUIdle| % 0x4
|fnOALUpdateCoreFreq| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|Lock|
	IMPORT	|EnterCriticalSection|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\oal\prcm\prcm_priv.h

  00000			 AREA	 |.pdata|, PDATA
|$T47291| DCD	|$LN6@Lock|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lock|	 PROC

; 266  : {

  00000		 |$LN6@Lock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47288|

; 267  :     if (g_PrcmPostInit && !g_bSingleThreaded) 

  00004	e59f202c	 ldr         r2, [pc, #0x2C]
  00008	e5923000	 ldr         r3, [r2]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000005	 beq         |$LN1@Lock|
  00014	e5923004	 ldr         r3, [r2, #4]
  00018	e3530000	 cmp         r3, #0

; 268  :         {
; 269  :         EnterCriticalSection(&g_rgPrcmMutex[mutexId]);

  0001c	059f2010	 ldreq       r2, [pc, #0x10]
  00020	00803100	 addeq       r3, r0, r0, lsl #2
  00024	00820103	 addeq       r0, r2, r3, lsl #2
  00028	0b000000	 bleq        EnterCriticalSection
  0002c		 |$LN1@Lock|

; 270  :         }
; 271  : }

  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$LN7@Lock|
  00034		 |$LN8@Lock|
  00034	00000000	 DCD         |g_rgPrcmMutex|
  00038		 |$LN9@Lock|
  00038	00000000	 DCD         |g_PrcmPostInit|
  0003c		 |$M47289|

			 ENDP  ; |Lock|

	EXPORT	|Unlock|
	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T47302| DCD	|$LN6@Unlock|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Unlock| PROC

; 277  : {

  00000		 |$LN6@Unlock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47299|

; 278  :     if (g_PrcmPostInit && !g_bSingleThreaded)

  00004	e59f202c	 ldr         r2, [pc, #0x2C]
  00008	e5923000	 ldr         r3, [r2]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000005	 beq         |$LN1@Unlock|
  00014	e5923004	 ldr         r3, [r2, #4]
  00018	e3530000	 cmp         r3, #0

; 279  :         {
; 280  :         LeaveCriticalSection(&g_rgPrcmMutex[mutexId]);

  0001c	059f2010	 ldreq       r2, [pc, #0x10]
  00020	00803100	 addeq       r3, r0, r0, lsl #2
  00024	00820103	 addeq       r0, r2, r3, lsl #2
  00028	0b000000	 bleq        LeaveCriticalSection
  0002c		 |$LN1@Unlock|

; 281  :         }
; 282  : }

  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$LN7@Unlock|
  00034		 |$LN8@Unlock|
  00034	00000000	 DCD         |g_rgPrcmMutex|
  00038		 |$LN9@Unlock|
  00038	00000000	 DCD         |g_PrcmPostInit|
  0003c		 |$M47300|

			 ENDP  ; |Unlock|

	EXPORT	|IS_IOPAD_EVENT_PENDING|
	IMPORT	|g_pIntr|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\oal\prcm\prcm.c

  00000			 AREA	 |.pdata|, PDATA
|$T47317| DCD	|$LN10@IS_IOPAD_E|
	DCD	0x40000e00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IS_IOPAD_EVENT_PENDING| PROC

; 54   : {

  00000		 |$LN10@IS_IOPAD_E|
  00000		 |$M47314|

; 55   :     BOOL dwVal = 0;
; 56   :     DWORD i = 0;
; 57   : 
; 58   :     for (i=0;i<g_pIntr->nbGpioBank;i++)

  00000	e59f302c	 ldr         r3, [pc, #0x2C]
  00004	e3a00000	 mov         r0, #0
  00008	e5932000	 ldr         r2, [r3]
  0000c	e5923004	 ldr         r3, [r2, #4]
  00010	e1b01003	 movs        r1, r3
  00014	0a000005	 beq         |$LN1@IS_IOPAD_E|
  00018	e5922008	 ldr         r2, [r2, #8]
  0001c		 |$LL3@IS_IOPAD_E|

; 59   :     {    
; 60   :         dwVal |= g_pIntr->pGpioCtxt[i].padWakeupEvent;

  0001c	e592301c	 ldr         r3, [r2, #0x1C]
  00020	e2822020	 add         r2, r2, #0x20
  00024	e2511001	 subs        r1, r1, #1
  00028	e1830000	 orr         r0, r3, r0
  0002c	1afffffa	 bne         |$LL3@IS_IOPAD_E|
  00030		 |$LN1@IS_IOPAD_E|

; 61   :     }
; 62   : 
; 63   :     return dwVal;
; 64   : }

  00030	e12fff1e	 bx          lr
  00034		 |$LN11@IS_IOPAD_E|
  00034		 |$LN12@IS_IOPAD_E|
  00034	00000000	 DCD         |g_pIntr|
  00038		 |$M47315|

			 ENDP  ; |IS_IOPAD_EVENT_PENDING|

	EXPORT	|PrcmCapturePrevPowerState|

  00000			 AREA	 |.pdata|, PDATA
|$T47326| DCD	|$LN5@PrcmCaptur|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmCapturePrevPowerState| PROC

; 192  : {

  00000		 |$LN5@PrcmCaptur|
  00000		 |$M47323|

; 193  :     // Stub, nothing to do on AM3517
; 194  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M47324|

			 ENDP  ; |PrcmCapturePrevPowerState|

	EXPORT	|PrcmProfilePrevPowerState|

  00000			 AREA	 |.pdata|, PDATA
|$T47333| DCD	|$LN5@PrcmProfil|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmProfilePrevPowerState| PROC

; 202  : {

  00000		 |$LN5@PrcmProfil|
  00000		 |$M47330|

; 203  :     UNREFERENCED_PARAMETER(timer_val);
; 204  :     UNREFERENCED_PARAMETER(wakeup_delay);
; 205  :     // Stub, nothing to do on AM3517
; 206  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M47331|

			 ENDP  ; |PrcmProfilePrevPowerState|

	EXPORT	|PrcmInitializePrevPowerState|

  00000			 AREA	 |.pdata|, PDATA
|$T47340| DCD	|$LN5@PrcmInitia|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmInitializePrevPowerState| PROC

; 211  : {

  00000		 |$LN5@PrcmInitia|
  00000		 |$M47337|

; 212  :     // Stub, nothing to do on AM3517
; 213  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M47338|

			 ENDP  ; |PrcmInitializePrevPowerState|

	EXPORT	|GetCmRegisterSet|

  00000			 AREA	 |.pdata|, PDATA
|$T47361| DCD	|$LN27@GetCmRegis|
	DCD	0x40002f00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCmRegisterSet| PROC

; 220  : {

  00000		 |$LN27@GetCmRegis|
  00000		 |$M47358|

; 221  :     switch (powerDomain)

  00000	e3500008	 cmp         r0, #8
  00004	8a000029	 bhi         |$LN10@GetCmRegis|
  00008	e28f3004	 add         r3, pc, #4
  0000c	e7d33000	 ldrb        r3, [r3, +r0]
  00010	e08ff003	 add         pc, pc, r3
  00014		 |$LN15@GetCmRegis|
  00014		 |$LN14@GetCmRegis|
  00014		 |$LN16@GetCmRegis|
  00014	08ed		 DCB         0x8
  00015		 |$LN17@GetCmRegis|
  00015	18ed		 DCB         0x18
  00016		 |$LN18@GetCmRegis|
  00016	28ed		 DCB         0x28
  00017		 |$LN19@GetCmRegis|
  00017	38ed		 DCB         0x38
  00018		 |$LN20@GetCmRegis|
  00018	48ed		 DCB         0x48
  00019		 |$LN21@GetCmRegis|
  00019	58ed		 DCB         0x58
  0001a		 |$LN22@GetCmRegis|
  0001a	68ed		 DCB         0x68
  0001b		 |$LN23@GetCmRegis|
  0001b	78ed		 DCB         0x78
  0001c		 |$LN24@GetCmRegis|
  0001c	88ed		 DCB         0x88
  0001d		 |$LN30@GetCmRegis|

; 252  : }

  0001d	88ed		 DCB         0x88
  0001e		 |$LN31@GetCmRegis|
  0001e	88ed		 DCB         0x88
  0001f		 |$LN32@GetCmRegis|
  0001f	88ed		 DCB         0x88
  00020		 |$LN9@GetCmRegis|

; 222  :         {
; 223  :         case POWERDOMAIN_WAKEUP:
; 224  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_WKUP_CM;

  00020	e59f3090	 ldr         r3, [pc, #0x90]
  00024	e5933000	 ldr         r3, [r3]
  00028	e5930000	 ldr         r0, [r3]

; 252  : }

  0002c	e12fff1e	 bx          lr
  00030		 |$LN8@GetCmRegis|

; 225  : 
; 226  :         case POWERDOMAIN_CORE:
; 227  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_CORE_CM;

  00030	e59f3080	 ldr         r3, [pc, #0x80]
  00034	e5933000	 ldr         r3, [r3]
  00038	e5930004	 ldr         r0, [r3, #4]

; 252  : }

  0003c	e12fff1e	 bx          lr
  00040		 |$LN7@GetCmRegis|

; 228  : 
; 229  :         case POWERDOMAIN_PERIPHERAL:
; 230  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_PER_CM;

  00040	e59f3070	 ldr         r3, [pc, #0x70]
  00044	e5933000	 ldr         r3, [r3]
  00048	e5930008	 ldr         r0, [r3, #8]

; 252  : }

  0004c	e12fff1e	 bx          lr
  00050		 |$LN6@GetCmRegis|

; 231  : 
; 232  :         case POWERDOMAIN_USBHOST:
; 233  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_USBHOST_CM;

  00050	e59f3060	 ldr         r3, [pc, #0x60]
  00054	e5933000	 ldr         r3, [r3]
  00058	e593000c	 ldr         r0, [r3, #0xC]

; 252  : }

  0005c	e12fff1e	 bx          lr
  00060		 |$LN5@GetCmRegis|

; 234  : 
; 235  :         case POWERDOMAIN_EMULATION:
; 236  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_EMU_CM;

  00060	e59f3050	 ldr         r3, [pc, #0x50]
  00064	e5933000	 ldr         r3, [r3]
  00068	e5930010	 ldr         r0, [r3, #0x10]

; 252  : }

  0006c	e12fff1e	 bx          lr
  00070		 |$LN4@GetCmRegis|

; 237  : 
; 238  :         case POWERDOMAIN_MPU:
; 239  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_MPU_CM;

  00070	e59f3040	 ldr         r3, [pc, #0x40]
  00074	e5933000	 ldr         r3, [r3]
  00078	e5930014	 ldr         r0, [r3, #0x14]

; 252  : }

  0007c	e12fff1e	 bx          lr
  00080		 |$LN3@GetCmRegis|

; 240  : 
; 241  :         case POWERDOMAIN_DSS:
; 242  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_DSS_CM;

  00080	e59f3030	 ldr         r3, [pc, #0x30]
  00084	e5933000	 ldr         r3, [r3]
  00088	e5930018	 ldr         r0, [r3, #0x18]

; 252  : }

  0008c	e12fff1e	 bx          lr
  00090		 |$LN2@GetCmRegis|

; 243  : 
; 244  :         case POWERDOMAIN_NEON:
; 245  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_NEON_CM;

  00090	e59f3020	 ldr         r3, [pc, #0x20]
  00094	e5933000	 ldr         r3, [r3]
  00098	e593001c	 ldr         r0, [r3, #0x1C]

; 252  : }

  0009c	e12fff1e	 bx          lr
  000a0		 |$LN1@GetCmRegis|

; 246  : 
; 247  :         case POWERDOMAIN_SGX:
; 248  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_SGX_CM;

  000a0	e59f3010	 ldr         r3, [pc, #0x10]
  000a4	e5933000	 ldr         r3, [r3]
  000a8	e5930020	 ldr         r0, [r3, #0x20]

; 252  : }

  000ac	e12fff1e	 bx          lr
  000b0		 |$LN10@GetCmRegis|

; 249  :         }
; 250  : 
; 251  :     return NULL;

  000b0	e3a00000	 mov         r0, #0

; 252  : }

  000b4	e12fff1e	 bx          lr
  000b8		 |$LN28@GetCmRegis|
  000b8		 |$LN29@GetCmRegis|
  000b8	00000000	 DCD         |g_pPrcmCm|
  000bc		 |$M47359|

			 ENDP  ; |GetCmRegisterSet|

	EXPORT	|GetPrmRegisterSet|

  00000			 AREA	 |.pdata|, PDATA
|$T47387| DCD	|$LN27@GetPrmRegi|
	DCD	0x40002f00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetPrmRegisterSet| PROC

; 259  : {

  00000		 |$LN27@GetPrmRegi|
  00000		 |$M47384|

; 260  :     switch (powerDomain)

  00000	e3500008	 cmp         r0, #8
  00004	8a000029	 bhi         |$LN10@GetPrmRegi|
  00008	e28f3004	 add         r3, pc, #4
  0000c	e7d33000	 ldrb        r3, [r3, +r0]
  00010	e08ff003	 add         pc, pc, r3
  00014		 |$LN15@GetPrmRegi|
  00014		 |$LN14@GetPrmRegi|
  00014		 |$LN16@GetPrmRegi|
  00014	08ed		 DCB         0x8
  00015		 |$LN17@GetPrmRegi|
  00015	18ed		 DCB         0x18
  00016		 |$LN18@GetPrmRegi|
  00016	28ed		 DCB         0x28
  00017		 |$LN19@GetPrmRegi|
  00017	38ed		 DCB         0x38
  00018		 |$LN20@GetPrmRegi|
  00018	48ed		 DCB         0x48
  00019		 |$LN21@GetPrmRegi|
  00019	58ed		 DCB         0x58
  0001a		 |$LN22@GetPrmRegi|
  0001a	68ed		 DCB         0x68
  0001b		 |$LN23@GetPrmRegi|
  0001b	78ed		 DCB         0x78
  0001c		 |$LN24@GetPrmRegi|
  0001c	88ed		 DCB         0x88
  0001d		 |$LN30@GetPrmRegi|

; 291  : }

  0001d	88ed		 DCB         0x88
  0001e		 |$LN31@GetPrmRegi|
  0001e	88ed		 DCB         0x88
  0001f		 |$LN32@GetPrmRegi|
  0001f	88ed		 DCB         0x88
  00020		 |$LN9@GetPrmRegi|

; 261  :         {
; 262  :         case POWERDOMAIN_WAKEUP:
; 263  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_WKUP_PRM;

  00020	e59f3090	 ldr         r3, [pc, #0x90]
  00024	e5933000	 ldr         r3, [r3]
  00028	e5930000	 ldr         r0, [r3]

; 291  : }

  0002c	e12fff1e	 bx          lr
  00030		 |$LN8@GetPrmRegi|

; 264  : 
; 265  :         case POWERDOMAIN_CORE:
; 266  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_CORE_PRM;

  00030	e59f3080	 ldr         r3, [pc, #0x80]
  00034	e5933000	 ldr         r3, [r3]
  00038	e5930004	 ldr         r0, [r3, #4]

; 291  : }

  0003c	e12fff1e	 bx          lr
  00040		 |$LN7@GetPrmRegi|

; 267  : 
; 268  :         case POWERDOMAIN_PERIPHERAL:
; 269  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_PER_PRM;

  00040	e59f3070	 ldr         r3, [pc, #0x70]
  00044	e5933000	 ldr         r3, [r3]
  00048	e5930008	 ldr         r0, [r3, #8]

; 291  : }

  0004c	e12fff1e	 bx          lr
  00050		 |$LN6@GetPrmRegi|

; 270  : 
; 271  :         case POWERDOMAIN_USBHOST:
; 272  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_USBHOST_PRM;

  00050	e59f3060	 ldr         r3, [pc, #0x60]
  00054	e5933000	 ldr         r3, [r3]
  00058	e593000c	 ldr         r0, [r3, #0xC]

; 291  : }

  0005c	e12fff1e	 bx          lr
  00060		 |$LN5@GetPrmRegi|

; 273  : 
; 274  :         case POWERDOMAIN_EMULATION:
; 275  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_EMU_PRM;

  00060	e59f3050	 ldr         r3, [pc, #0x50]
  00064	e5933000	 ldr         r3, [r3]
  00068	e5930010	 ldr         r0, [r3, #0x10]

; 291  : }

  0006c	e12fff1e	 bx          lr
  00070		 |$LN4@GetPrmRegi|

; 276  : 
; 277  :         case POWERDOMAIN_MPU:
; 278  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_MPU_PRM;

  00070	e59f3040	 ldr         r3, [pc, #0x40]
  00074	e5933000	 ldr         r3, [r3]
  00078	e5930014	 ldr         r0, [r3, #0x14]

; 291  : }

  0007c	e12fff1e	 bx          lr
  00080		 |$LN3@GetPrmRegi|

; 279  : 
; 280  :         case POWERDOMAIN_DSS:
; 281  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_DSS_PRM;

  00080	e59f3030	 ldr         r3, [pc, #0x30]
  00084	e5933000	 ldr         r3, [r3]
  00088	e5930018	 ldr         r0, [r3, #0x18]

; 291  : }

  0008c	e12fff1e	 bx          lr
  00090		 |$LN2@GetPrmRegi|

; 282  : 
; 283  :         case POWERDOMAIN_NEON:
; 284  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_NEON_PRM;

  00090	e59f3020	 ldr         r3, [pc, #0x20]
  00094	e5933000	 ldr         r3, [r3]
  00098	e593001c	 ldr         r0, [r3, #0x1C]

; 291  : }

  0009c	e12fff1e	 bx          lr
  000a0		 |$LN1@GetPrmRegi|

; 285  : 
; 286  :         case POWERDOMAIN_SGX:
; 287  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_SGX_PRM;

  000a0	e59f3010	 ldr         r3, [pc, #0x10]
  000a4	e5933000	 ldr         r3, [r3]
  000a8	e5930020	 ldr         r0, [r3, #0x20]

; 291  : }

  000ac	e12fff1e	 bx          lr
  000b0		 |$LN10@GetPrmRegi|

; 288  :         }
; 289  : 
; 290  :     return NULL;

  000b0	e3a00000	 mov         r0, #0

; 291  : }

  000b4	e12fff1e	 bx          lr
  000b8		 |$LN28@GetPrmRegi|
  000b8		 |$LN29@GetPrmRegi|
  000b8	00000000	 DCD         |g_pPrcmPrm|
  000bc		 |$M47385|

			 ENDP  ; |GetPrmRegisterSet|

	EXPORT	|PrcmInterruptEnable|

  00000			 AREA	 |.pdata|, PDATA
|$T47407| DCD	|$LN7@PrcmInterr|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmInterruptEnable| PROC

; 299  : {

  00000		 |$LN7@PrcmInterr|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47404|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0

; 300  :     UINT val;
; 301  :     Lock(Mutex_Intr);

  0000c	e3a00005	 mov         r0, #5
  00010	eb000000	 bl          Lock

; 302  : 
; 303  :     // enable/disable prcm interrupts
; 304  :     val = INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQENABLE_MPU);

  00014	e59f302c	 ldr         r3, [pc, #0x2C]

; 305  :     val = (bEnable != FALSE) ? (val | mask) : (val & ~mask);

  00018	e3540000	 cmp         r4, #0

; 306  :     OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQENABLE_MPU, val);
; 307  : 
; 308  :     Unlock(Mutex_Intr);

  0001c	e3a00005	 mov         r0, #5
  00020	e5933000	 ldr         r3, [r3]
  00024	e5932028	 ldr         r2, [r3, #0x28]
  00028	e592301c	 ldr         r3, [r2, #0x1C]
  0002c	11834005	 orrne       r4, r3, r5
  00030	01c34005	 biceq       r4, r3, r5
  00034	e582401c	 str         r4, [r2, #0x1C]
  00038	eb000000	 bl          Unlock

; 309  :     return val;
; 310  : }

  0003c	e1a00004	 mov         r0, r4
  00040	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN8@PrcmInterr|
  00048		 |$LN9@PrcmInterr|
  00048	00000000	 DCD         |g_pPrcmPrm|
  0004c		 |$M47405|

			 ENDP  ; |PrcmInterruptEnable|

	EXPORT	|PrcmInterruptClearStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T47420| DCD	|$LN5@PrcmInterr@2|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmInterruptClearStatus| PROC

; 317  : {

  00000		 |$LN5@PrcmInterr@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47417|
  00004	e1a01000	 mov         r1, r0

; 318  :     UINT val;
; 319  : 
; 320  :     // This routine should only be called during system boot-up or
; 321  :     // from OEMIdle.  Hence, serialization within this routine
; 322  :     // should not be performed.
; 323  : 
; 324  :     // clear prcm interrupt status
; 325  :     val = INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU);

  00008	e59fe02c	 ldr         lr, [pc, #0x2C]
  0000c	e59e3000	 ldr         r3, [lr]
  00010	e5932028	 ldr         r2, [r3, #0x28]
  00014	e5920018	 ldr         r0, [r2, #0x18]

; 326  :     OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU, val & mask);

  00018	e0003001	 and         r3, r0, r1
  0001c	e5823018	 str         r3, [r2, #0x18]

; 327  : 
; 328  :     // wakeup
; 329  :     OUTREG32(&g_pPrcmPrm->pOMAP_WKUP_PRM->PM_WKST_WKUP,
; 330  :         INREG32(&g_pPrcmPrm->pOMAP_WKUP_PRM->PM_WKST_WKUP) | CM_CLKEN_IO
; 331  :         );

  00020	e59e3000	 ldr         r3, [lr]

; 332  : 
; 333  :     // return the status prior to clearing the status
; 334  :     return val;
; 335  : }

  00024	e5932000	 ldr         r2, [r3]
  00028	e59230b0	 ldr         r3, [r2, #0xB0]
  0002c	e3833c01	 orr         r3, r3, #1, 24
  00030	e58230b0	 str         r3, [r2, #0xB0]
  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$LN6@PrcmInterr@2|
  0003c		 |$LN7@PrcmInterr@2|
  0003c	00000000	 DCD         |g_pPrcmPrm|
  00040		 |$M47418|

			 ENDP  ; |PrcmInterruptClearStatus|

	EXPORT	|PrcmInterruptProcess|

  00000			 AREA	 |.pdata|, PDATA
|$T47443| DCD	|$LN20@PrcmInterr@3|
	DCD	0x40003501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmInterruptProcess| PROC

; 342  : {

  00000		 |$LN20@PrcmInterr@3|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M47440|
  00004	e1a0a000	 mov         r10, r0

; 343  :     UINT val;
; 344  :     UINT32 gpioMask;
; 345  :     UINT32 *pStatus;
; 346  :     UINT8 gpioGroup;
; 347  :     UINT irq;
; 348  :     UINT sysIntr = SYSINTR_NOP;
; 349  : 
; 350  :     // This routine should only be called during system boot-up or
; 351  :     // from OEMIdle.  Hence, serialization within this routine
; 352  :     // should not be performed.
; 353  : 
; 354  :     // clear prcm interrupt status
; 355  :     val = INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU);

  00008	e59f70c0	 ldr         r7, [pc, #0xC0]
  0000c	e3a04000	 mov         r4, #0
  00010	e5978000	 ldr         r8, [r7]
  00014	e5983028	 ldr         r3, [r8, #0x28]
  00018	e5939018	 ldr         r9, [r3, #0x18]

; 356  : 
; 357  :     if (val & PRM_IRQENABLE_IO_EN)

  0001c	e3190c02	 tst         r9, #2, 24
  00020	0a00001c	 beq         |$IOPadIntrProcessDone$46926|

; 358  :         {
; 359  :         // Check if there is a GPIO IO pad event occured and return the
; 360  :         // corresponding IRQ number.
; 361  : 
; 362  :         if (IS_IOPAD_EVENT_PENDING())// || TODO ADD

  00024	eb000000	 bl          IS_IOPAD_EVENT_PENDING
  00028	e3500000	 cmp         r0, #0
  0002c	0a000019	 beq         |$IOPadIntrProcessDone$46926|

; 363  :                                      //OEMGetIOPadWakeupStatus(s_rgPadWakeupEvents))
; 364  :             {
; 365  :                 // Process the events
; 366  :                 for (gpioGroup = 1; gpioGroup < g_pIntr->nbGpioBank; gpioGroup++)

  00030	e59f3094	 ldr         r3, [pc, #0x94]
  00034	e3a01001	 mov         r1, #1
  00038	e5933000	 ldr         r3, [r3]
  0003c	e5935004	 ldr         r5, [r3, #4]
  00040	e3550001	 cmp         r5, #1
  00044	9a000013	 bls         |$IOPadIntrProcessDone$46926|
  00048	e5936008	 ldr         r6, [r3, #8]
  0004c		 |$LL8@PrcmInterr@3|

; 367  :                 {
; 368  :                     irq = g_pIntr->pGpioCtxt[gpioGroup].irq_start;//IRQ_GPIO_0 + (gpioGroup * 32);

  0004c	e1a02006	 mov         r2, r6
  00050	e7b2e281	 ldr         lr, [r2, +r1, lsl #5]!

; 369  :                     pStatus = &g_pIntr->pGpioCtxt[gpioGroup].padWakeupEvent;//&(s_rgPadWakeupEvents[gpioGroup]);
; 370  : 
; 371  :                     for (gpioMask = 1; gpioMask != 0; gpioMask <<= 1, irq++)

  00054	e3a00001	 mov         r0, #1
  00058	e5b2301c	 ldr         r3, [r2, #0x1C]!
  0005c		 |$LL5@PrcmInterr@3|

; 372  :                     {
; 373  :                         if ((gpioMask & *pStatus) != 0)

  0005c	e1130000	 tst         r3, r0
  00060	1a000007	 bne         |$LN15@PrcmInterr@3|
  00064	e1b00080	 movs        r0, r0, lsl #1
  00068	e28ee001	 add         lr, lr, #1
  0006c	1afffffa	 bne         |$LL5@PrcmInterr@3|
  00070	e2813001	 add         r3, r1, #1
  00074	e20310ff	 and         r1, r3, #0xFF
  00078	e1510005	 cmp         r1, r5
  0007c	3afffff2	 bcc         |$LL8@PrcmInterr@3|
  00080	ea000004	 b           |$IOPadIntrProcessDone$46926|
  00084		 |$LN15@PrcmInterr@3|

; 374  :                         {
; 375  :                             *pStatus &= ~gpioMask;

  00084	e5923000	 ldr         r3, [r2]

; 376  :                             sysIntr = irq;

  00088	e1a0400e	 mov         r4, lr
  0008c	e1c33000	 bic         r3, r3, r0
  00090	e5823000	 str         r3, [r2]
  00094	e5978000	 ldr         r8, [r7]
  00098		 |$IOPadIntrProcessDone$46926|

; 377  :                             goto IOPadIntrProcessDone;
; 378  :                         }
; 379  :                     }
; 380  :                 }
; 381  :             }
; 382  :         }
; 383  : 
; 384  : IOPadIntrProcessDone:
; 385  : 
; 386  :     if (IS_IOPAD_EVENT_PENDING() == FALSE)

  00098	eb000000	 bl          IS_IOPAD_EVENT_PENDING
  0009c	e3500000	 cmp         r0, #0

; 387  :     {
; 388  :         OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU, val & mask);

  000a0	05982028	 ldreq       r2, [r8, #0x28]
  000a4	0009300a	 andeq       r3, r9, r10

; 389  : 
; 390  :         OUTREG32(&g_pPrcmPrm->pOMAP_WKUP_PRM->PM_WKST_WKUP,
; 391  :             INREG32(&g_pPrcmPrm->pOMAP_WKUP_PRM->PM_WKST_WKUP) | CM_CLKEN_IO
; 392  :             );
; 393  :     }
; 394  : 
; 395  :     // return the status prior to clearing the status
; 396  :     return sysIntr;
; 397  : }

  000a8	e1a00004	 mov         r0, r4
  000ac	05823018	 streq       r3, [r2, #0x18]
  000b0	05973000	 ldreq       r3, [r7]
  000b4	05932000	 ldreq       r2, [r3]
  000b8	059230b0	 ldreq       r3, [r2, #0xB0]
  000bc	03833c01	 orreq       r3, r3, #1, 24
  000c0	058230b0	 streq       r3, [r2, #0xB0]
  000c4	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$LN21@PrcmInterr@3|
  000cc		 |$LN22@PrcmInterr@3|
  000cc	00000000	 DCD         |g_pIntr|
  000d0		 |$LN23@PrcmInterr@3|
  000d0	00000000	 DCD         |g_pPrcmPrm|
  000d4		 |$M47441|

			 ENDP  ; |PrcmInterruptProcess|

	IMPORT	|OALPAtoVA|
	IMPORT	|OALGetTTBR|

  00000			 AREA	 |.pdata|, PDATA
|$T47456| DCD	|$LN5@ClearXNBit|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ClearXNBit| PROC

; 405  : {

  00000		 |$LN5@ClearXNBit|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47453|

; 406  :     const UINT ARM_L1_NO_EXECUTE = 0x00000010;
; 407  : 
; 408  :     DWORD   idxL1MMU = ((DWORD)pvAddr) >> 20;

  00004	e1a04a20	 mov         r4, r0, lsr #20

; 409  :     DWORD  *pL1MMUTbl = (DWORD*)OALPAtoVA(OALGetTTBR(), FALSE);

  00008	eb000000	 bl          OALGetTTBR
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA

; 410  : 
; 411  :     pL1MMUTbl[idxL1MMU] &= ~ARM_L1_NO_EXECUTE;

  00014	e7b03104	 ldr         r3, [r0, +r4, lsl #2]!
  00018	e3c33010	 bic         r3, r3, #0x10
  0001c	e5803000	 str         r3, [r0]

; 412  : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M47454|

			 ENDP  ; |ClearXNBit|

	EXPORT	|OALSRAMFnInit|
	EXPORT	|??_C@_1CG@CDLGGGJO@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@LIGGGGFA@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OEMCacheRangeFlush|
	IMPORT	|OALCPUEnd|
	IMPORT	|OALVAtoPA|
	IMPORT	|OALInvalidateTlb|
	IMPORT	|OALUpdateCoreFreq|
	IMPORT	|OALCPUIdle|
	IMPORT	|OALCPUStart|
	IMPORT	|g_pTimerRegs|
	IMPORT	|g_pSDRCRegs|
	IMPORT	|dwOEMSRAMStartOffset|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|dwOEMMPUContextRestore|
	IMPORT	|dwOEMHighSecurity|
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T47497| DCD	|$LN15@OALSRAMFnI|
	DCD	0x40008901

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@CDLGGGJO@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "S", 0x0, "R", 0x0, "A"
	DCB	0x0, "M", 0x0, "F", 0x0, "n", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@LIGGGGFA@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "S", 0x0, "R", 0x0, "A"
	DCB	0x0, "M", 0x0, "F", 0x0, "n", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALSRAMFnInit| PROC

; 423  : {

  00000		 |$LN15@OALSRAMFnI|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M47494|

; 424  :     pInvalidateTlb  fnInvalidateTlb;
; 425  : 
; 426  :     OALMSG(OAL_FUNC, (L"+OALSRAMFnInit()\r\n"));

  00004	e59fb214	 ldr         r11, [pc, #0x214]
  00008	e59b3440	 ldr         r3, [r11, #0x440]
  0000c	e3130004	 tst         r3, #4
  00010	159f0204	 ldrne       r0, [pc, #0x204]
  00014	1b000000	 blne        NKDbgPrintfW

; 427  : 
; 428  : #pragma warning (push)
; 429  : #pragma warning (disable:4152) //disable warning that prevents using function pointers as data pointers
; 430  : 
; 431  :     // get reference to SRAM
; 432  :     fnCpuStart = OALPAtoVA(OMAP_SRAM_PA + dwOEMSRAMStartOffset, FALSE);

  00018	e59f31f8	 ldr         r3, [pc, #0x1F8]
  0001c	e3a02101	 mov         r2, #1, 2
  00020	e3822602	 orr         r2, r2, #2, 12
  00024	e5933000	 ldr         r3, [r3]
  00028	e3a01000	 mov         r1, #0
  0002c	e0830002	 add         r0, r3, r2
  00030	eb000000	 bl          OALPAtoVA

; 433  : 
; 434  :     // initialize cpu idle data structure
; 435  :     g_pCPUInfo = (CPU_INFO*)OALPAtoVA(dwOEMMPUContextRestore, FALSE);

  00034	e59f91d8	 ldr         r9, [pc, #0x1D8]
  00038	e59fa1d0	 ldr         r10, [pc, #0x1D0]
  0003c	e1a03000	 mov         r3, r0
  00040	e5990000	 ldr         r0, [r9]
  00044	e3a01000	 mov         r1, #0
  00048	e58a3004	 str         r3, [r10, #4]
  0004c	eb000000	 bl          OALPAtoVA

; 436  :     g_pCPUInfo->SDRC_REGS = (UINT)g_pSDRCRegs;

  00050	e59f31b4	 ldr         r3, [pc, #0x1B4]

; 437  :     g_pCPUInfo->MPU_CM_REGS = (UINT)g_pPrcmCm->pOMAP_MPU_CM;

  00054	e59f41ac	 ldr         r4, [pc, #0x1AC]
  00058	e58a0000	 str         r0, [r10]
  0005c	e5933000	 ldr         r3, [r3]

; 438  :     g_pCPUInfo->CORE_CM_REGS = (UINT)g_pPrcmCm->pOMAP_CORE_CM;
; 439  :     g_pCPUInfo->MPU_PRM_REGS = (UINT)g_pPrcmPrm->pOMAP_MPU_PRM;

  00060	e59f119c	 ldr         r1, [pc, #0x19C]

; 440  :     g_pCPUInfo->CORE_PRM_REGS = (UINT)g_pPrcmPrm->pOMAP_CORE_PRM;
; 441  : 	g_pCPUInfo->GLOBAL_PRM_REGS = (UINT)g_pPrcmPrm->pOMAP_GLOBAL_PRM;
; 442  :     g_pCPUInfo->GPTIMER_REGS = (UINT)g_pTimerRegs;

  00064	e59fe194	 ldr         lr, [pc, #0x194]
  00068	e5803000	 str         r3, [r0]
  0006c	e5943000	 ldr         r3, [r4]
  00070	e59a2000	 ldr         r2, [r10]

; 443  :     g_pCPUInfo->CLOCK_CTRL_CM_REGS = (UINT)g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM;
; 444  :     g_pCPUInfo->MPU_CONTEXT_VA = (UINT)g_pCPUInfo + sizeof(CPU_INFO);
; 445  :     g_pCPUInfo->MPU_CONTEXT_PA = (UINT)dwOEMMPUContextRestore + sizeof(CPU_INFO);
; 446  :     g_pCPUInfo->OMAP_DEVICE_TYPE = dwOEMHighSecurity;

  00074	e59f6180	 ldr         r6, [pc, #0x180]
  00078	e5933014	 ldr         r3, [r3, #0x14]

; 447  : 
; 448  :     // Populate fnOALCPUIdle function pointer with SRAM address of
; 449  :     // OALCPUIdle function.
; 450  :     fnOALCPUIdle = (pCPUIdle)((UINT)fnCpuStart + 
; 451  :                                 ((UINT)OALCPUIdle - (UINT)OALCPUStart)); 

  0007c	e59f8174	 ldr         r8, [pc, #0x174]
  00080	e59f716c	 ldr         r7, [pc, #0x16C]
  00084	e5823004	 str         r3, [r2, #4]
  00088	e5943000	 ldr         r3, [r4]
  0008c	e59a2000	 ldr         r2, [r10]

; 452  :     
; 453  :     fnOALUpdateCoreFreq = (pOALUpdateCoreFreq)((UINT)fnCpuStart +
; 454  :                                 ((UINT)OALUpdateCoreFreq - (UINT)OALCPUStart));

  00090	e59f5158	 ldr         r5, [pc, #0x158]
  00094	e5933004	 ldr         r3, [r3, #4]

; 455  : 
; 456  :     // Populate fnTlbValidate function pointer with SDRAM address of
; 457  :     // OALInvalidateTlb function which will be called by restore.s 
; 458  :     // after mpu restore.
; 459  :     fnInvalidateTlb = OALPAtoVA(OALVAtoPA(OALInvalidateTlb), FALSE);

  00098	e59f014c	 ldr         r0, [pc, #0x14C]
  0009c	e5823008	 str         r3, [r2, #8]
  000a0	e5913000	 ldr         r3, [r1]
  000a4	e59a2000	 ldr         r2, [r10]
  000a8	e5933014	 ldr         r3, [r3, #0x14]
  000ac	e5823014	 str         r3, [r2, #0x14]
  000b0	e5913000	 ldr         r3, [r1]
  000b4	e59a2000	 ldr         r2, [r10]
  000b8	e5933004	 ldr         r3, [r3, #4]
  000bc	e5823018	 str         r3, [r2, #0x18]
  000c0	e5913000	 ldr         r3, [r1]
  000c4	e59a2000	 ldr         r2, [r10]
  000c8	e5933024	 ldr         r3, [r3, #0x24]
  000cc	e582301c	 str         r3, [r2, #0x1C]
  000d0	e59e2000	 ldr         r2, [lr]
  000d4	e59a3000	 ldr         r3, [r10]
  000d8	e5832010	 str         r2, [r3, #0x10]
  000dc	e5943000	 ldr         r3, [r4]
  000e0	e59a2000	 ldr         r2, [r10]
  000e4	e593302c	 ldr         r3, [r3, #0x2C]
  000e8	e582300c	 str         r3, [r2, #0xC]
  000ec	e59a2000	 ldr         r2, [r10]
  000f0	e282304c	 add         r3, r2, #0x4C
  000f4	e5823024	 str         r3, [r2, #0x24]
  000f8	e5993000	 ldr         r3, [r9]
  000fc	e59a2000	 ldr         r2, [r10]
  00100	e283304c	 add         r3, r3, #0x4C
  00104	e5823020	 str         r3, [r2, #0x20]
  00108	e5962000	 ldr         r2, [r6]
  0010c	e59a3000	 ldr         r3, [r10]
  00110	e5832034	 str         r2, [r3, #0x34]
  00114	e59a3004	 ldr         r3, [r10, #4]
  00118	e0433008	 sub         r3, r3, r8
  0011c	e0832007	 add         r2, r3, r7
  00120	e0833005	 add         r3, r3, r5
  00124	e58a300c	 str         r3, [r10, #0xC]
  00128	e58a2008	 str         r2, [r10, #8]
  0012c	eb000000	 bl          OALVAtoPA
  00130	e3a01000	 mov         r1, #0
  00134	eb000000	 bl          OALPAtoVA

; 460  : 
; 461  :     // update the TLB Inv addr in cpuInfo
; 462  :     g_pCPUInfo->TLB_INV_FUNC_ADDR = (UINT)fnInvalidateTlb;

  00138	e59a3000	 ldr         r3, [r10]
  0013c	e1a05000	 mov         r5, r0
  00140	e5835030	 str         r5, [r3, #0x30]

; 463  : 
; 464  :     // Kernel marks all uncached adress as "no execute", we need to clear
; 465  :     // it here since we're going to run some routines from non-cached memory
; 466  :     ClearXNBit(fnCpuStart);

  00144	e59a3004	 ldr         r3, [r10, #4]
  00148	e1a04a23	 mov         r4, r3, lsr #20
  0014c	eb000000	 bl          OALGetTTBR
  00150	e3a01000	 mov         r1, #0
  00154	eb000000	 bl          OALPAtoVA
  00158	e7b03104	 ldr         r3, [r0, +r4, lsl #2]!
  0015c	e3c33010	 bic         r3, r3, #0x10
  00160	e5803000	 str         r3, [r0]

; 467  :     ClearXNBit(fnOALCPUIdle);

  00164	e59a3008	 ldr         r3, [r10, #8]
  00168	e1a04a23	 mov         r4, r3, lsr #20
  0016c	eb000000	 bl          OALGetTTBR
  00170	e3a01000	 mov         r1, #0
  00174	eb000000	 bl          OALPAtoVA
  00178	e7b03104	 ldr         r3, [r0, +r4, lsl #2]!

; 468  :     ClearXNBit(fnInvalidateTlb);

  0017c	e1a04a25	 mov         r4, r5, lsr #20
  00180	e3c33010	 bic         r3, r3, #0x10
  00184	e5803000	 str         r3, [r0]
  00188	eb000000	 bl          OALGetTTBR
  0018c	e3a01000	 mov         r1, #0
  00190	eb000000	 bl          OALPAtoVA
  00194	e7b03104	 ldr         r3, [r0, +r4, lsl #2]!

; 469  : 
; 470  :     // We assume OALCPUStart code is *always* the first function in the
; 471  :     // group of routines which get copied to SRAM and OALCPULast is last
; 472  :     memcpy(fnCpuStart, OALCPUStart, (UINT)OALCPUEnd - (UINT)OALCPUStart);

  00198	e59f5048	 ldr         r5, [pc, #0x48]
  0019c	e1a04008	 mov         r4, r8
  001a0	e1a01008	 mov         r1, r8
  001a4	e3c33010	 bic         r3, r3, #0x10
  001a8	e5803000	 str         r3, [r0]
  001ac	e59a0004	 ldr         r0, [r10, #4]
  001b0	e0452004	 sub         r2, r5, r4
  001b4	eb000000	 bl          memcpy

; 473  : 
; 474  :     //  Flush the cache to ensure idle code is in SRAM
; 475  :     OEMCacheRangeFlush( fnCpuStart, (UINT)OALCPUEnd - (UINT)OALCPUStart, CACHE_SYNC_ALL );

  001b8	e59a0004	 ldr         r0, [r10, #4]
  001bc	e3a0207f	 mov         r2, #0x7F
  001c0	e0451004	 sub         r1, r5, r4
  001c4	eb000000	 bl          OEMCacheRangeFlush

; 476  : 
; 477  : #pragma warning (pop)
; 478  : 
; 479  :     OALMSG(OAL_FUNC, (L"-OALSRAMFnInit()\r\n"));

  001c8	e59b3440	 ldr         r3, [r11, #0x440]
  001cc	e3130004	 tst         r3, #4
  001d0	159f000c	 ldrne       r0, [pc, #0xC]
  001d4	1b000000	 blne        NKDbgPrintfW

; 480  : 
; 481  :     return TRUE;

  001d8	e3a00001	 mov         r0, #1

; 482  : }

  001dc	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001e0	e12fff1e	 bx          lr
  001e4		 |$LN16@OALSRAMFnI|
  001e4		 |$LN17@OALSRAMFnI|
  001e4	00000000	 DCD         |??_C@_1CG@CDLGGGJO@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  001e8		 |$LN18@OALSRAMFnI|
  001e8	00000000	 DCD         |OALCPUEnd|
  001ec		 |$LN19@OALSRAMFnI|
  001ec	00000000	 DCD         |OALInvalidateTlb|
  001f0		 |$LN20@OALSRAMFnI|
  001f0	00000000	 DCD         |OALUpdateCoreFreq|
  001f4		 |$LN21@OALSRAMFnI|
  001f4	00000000	 DCD         |OALCPUIdle|
  001f8		 |$LN22@OALSRAMFnI|
  001f8	00000000	 DCD         |OALCPUStart|
  001fc		 |$LN23@OALSRAMFnI|
  001fc	00000000	 DCD         |dwOEMHighSecurity|
  00200		 |$LN24@OALSRAMFnI|
  00200	00000000	 DCD         |g_pTimerRegs|
  00204		 |$LN25@OALSRAMFnI|
  00204	00000000	 DCD         |g_pPrcmPrm|
  00208		 |$LN26@OALSRAMFnI|
  00208	00000000	 DCD         |g_pPrcmCm|
  0020c		 |$LN27@OALSRAMFnI|
  0020c	00000000	 DCD         |g_pSDRCRegs|
  00210		 |$LN28@OALSRAMFnI|
  00210	00000000	 DCD         |g_pCPUInfo|
  00214		 |$LN29@OALSRAMFnI|
  00214	00000000	 DCD         |dwOEMMPUContextRestore|
  00218		 |$LN30@OALSRAMFnI|
  00218	00000000	 DCD         |dwOEMSRAMStartOffset|
  0021c		 |$LN31@OALSRAMFnI|
  0021c	00000000	 DCD         |??_C@_1CG@LIGGGGFA@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00220		 |$LN32@OALSRAMFnI|
  00220	00000000	 DCD         |dpCurSettings|
  00224		 |$M47495|

			 ENDP  ; |OALSRAMFnInit|

	EXPORT	|OALSDRCRefreshCounter|

  00000			 AREA	 |.pdata|, PDATA
|$T47523| DCD	|$LN5@OALSDRCRef|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALSDRCRefreshCounter| PROC

; 495  : {

  00000		 |$LN5@OALSDRCRef|
  00000		 |$M47520|

; 496  :     g_pCPUInfo->SDRC_HIGH_RFR_FREQ = highFreq;

  00000	e59f2010	 ldr         r2, [pc, #0x10]
  00004	e5923000	 ldr         r3, [r2]
  00008	e5830028	 str         r0, [r3, #0x28]

; 497  :     g_pCPUInfo->SDRC_LOW_RFR_FREQ = lowFreq;

  0000c	e5923000	 ldr         r3, [r2]
  00010	e583102c	 str         r1, [r3, #0x2C]

; 498  : }

  00014	e12fff1e	 bx          lr
  00018		 |$LN6@OALSDRCRef|
  00018		 |$LN7@OALSDRCRef|
  00018	00000000	 DCD         |g_pCPUInfo|
  0001c		 |$M47521|

			 ENDP  ; |OALSDRCRefreshCounter|

	EXPORT	|OALSavePrcmContext|
	IMPORT	|g_pPrcmRestore|

  00000			 AREA	 |.pdata|, PDATA
|$T47532| DCD	|$LN6@OALSavePrc|
	DCD	0x40005401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALSavePrcmContext| PROC

; 508  : {

  00000		 |$LN6@OALSavePrc|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47529|

; 509  :     // check for valid pointers
; 510  :     if (g_pPrcmRestore == NULL) return;

  00004	e59f0140	 ldr         r0, [pc, #0x140]
  00008	e590e000	 ldr         lr, [r0]
  0000c	e35e0000	 cmp         lr, #0
  00010	0a000049	 beq         |$LN2@OALSavePrc|

; 511  : 
; 512  :     // save prcm restore registers
; 513  : 
; 514  :     OUTREG32(&g_pPrcmRestore->PRM_CLKSRC_CTRL,
; 515  :         INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_CLKSRC_CTRL)
; 516  :         );

  00014	e59f212c	 ldr         r2, [pc, #0x12C]

; 517  : 
; 518  :     OUTREG32(&g_pPrcmRestore->PRM_CLKSEL,
; 519  :         INREG32(&g_pPrcmPrm->pOMAP_CLOCK_CONTROL_PRM->PRM_CLKSEL)
; 520  :         );
; 521  : 
; 522  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL_CORE,
; 523  :         INREG32(&g_pPrcmCm->pOMAP_CORE_CM->CM_CLKSEL_CORE)
; 524  :         );

  00018	e59f1124	 ldr         r1, [pc, #0x124]

; 525  : 
; 526  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL_WKUP,
; 527  :         INREG32(&g_pPrcmCm->pOMAP_WKUP_CM->CM_CLKSEL_WKUP)
; 528  :         );
; 529  : 
; 530  :     OUTREG32(&g_pPrcmRestore->CM_CLKEN_PLL,
; 531  :         INREG32(&g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM->CM_CLKEN_PLL)
; 532  :         );
; 533  : 
; 534  :     //  ROM code polls for 23ms waiting for DPLL4 to lock and if autoidle is stored
; 535  :     //  then DPLL4 goes into bypass and the poll times out. This poll should not be there
; 536  :     //  in ROM code for a wake up reset, it is only needed for power on or warm reset.
; 537  : 
; 538  :     //  To avoid romcode 23ms delay clear auto idle setting in scratchpad register.
; 539  :     //  It is restored in  OALContextRestore function in oem_pm.c
; 540  :     OUTREG32(&g_pPrcmRestore->CM_AUTOIDLE_PLL, 0x0);

  0001c	e3a04000	 mov         r4, #0
  00020	e5923000	 ldr         r3, [r2]
  00024	e5933024	 ldr         r3, [r3, #0x24]
  00028	e5933070	 ldr         r3, [r3, #0x70]
  0002c	e58e3000	 str         r3, [lr]
  00030	e5923000	 ldr         r3, [r2]
  00034	e5902000	 ldr         r2, [r0]
  00038	e593302c	 ldr         r3, [r3, #0x2C]
  0003c	e5933040	 ldr         r3, [r3, #0x40]
  00040	e5823004	 str         r3, [r2, #4]
  00044	e5913000	 ldr         r3, [r1]
  00048	e5902000	 ldr         r2, [r0]
  0004c	e5933004	 ldr         r3, [r3, #4]
  00050	e5933040	 ldr         r3, [r3, #0x40]
  00054	e5823008	 str         r3, [r2, #8]
  00058	e5913000	 ldr         r3, [r1]
  0005c	e5902000	 ldr         r2, [r0]
  00060	e5933000	 ldr         r3, [r3]
  00064	e5933040	 ldr         r3, [r3, #0x40]
  00068	e582300c	 str         r3, [r2, #0xC]
  0006c	e5913000	 ldr         r3, [r1]
  00070	e5902000	 ldr         r2, [r0]
  00074	e593302c	 ldr         r3, [r3, #0x2C]
  00078	e5933000	 ldr         r3, [r3]
  0007c	e5823010	 str         r3, [r2, #0x10]
  00080	e5903000	 ldr         r3, [r0]
  00084	e5834014	 str         r4, [r3, #0x14]

; 541  : 
; 542  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL1_PLL,
; 543  :         INREG32(&g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM->CM_CLKSEL1_PLL)
; 544  :         );

  00088	e5913000	 ldr         r3, [r1]
  0008c	e5902000	 ldr         r2, [r0]
  00090	e593302c	 ldr         r3, [r3, #0x2C]
  00094	e5933040	 ldr         r3, [r3, #0x40]
  00098	e5823018	 str         r3, [r2, #0x18]

; 545  : 
; 546  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL2_PLL,
; 547  :         INREG32(&g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM->CM_CLKSEL2_PLL)
; 548  :         );

  0009c	e5913000	 ldr         r3, [r1]
  000a0	e5902000	 ldr         r2, [r0]
  000a4	e593302c	 ldr         r3, [r3, #0x2C]
  000a8	e5933044	 ldr         r3, [r3, #0x44]
  000ac	e582301c	 str         r3, [r2, #0x1C]

; 549  : 
; 550  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL3_PLL,
; 551  :         INREG32(&g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM->CM_CLKSEL3_PLL)
; 552  :         );

  000b0	e5913000	 ldr         r3, [r1]
  000b4	e5902000	 ldr         r2, [r0]
  000b8	e593302c	 ldr         r3, [r3, #0x2C]
  000bc	e5933048	 ldr         r3, [r3, #0x48]
  000c0	e5823020	 str         r3, [r2, #0x20]

; 553  : 
; 554  :     OUTREG32(&g_pPrcmRestore->CM_CLKEN_PLL_MPU,
; 555  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKEN_PLL_MPU)
; 556  :         );

  000c4	e5913000	 ldr         r3, [r1]
  000c8	e5902000	 ldr         r2, [r0]
  000cc	e5933014	 ldr         r3, [r3, #0x14]
  000d0	e5933004	 ldr         r3, [r3, #4]
  000d4	e5823024	 str         r3, [r2, #0x24]

; 557  : 
; 558  :     OUTREG32(&g_pPrcmRestore->CM_AUTOIDLE_PLL_MPU,
; 559  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_AUTOIDLE_PLL_MPU)
; 560  :         );

  000d8	e5913000	 ldr         r3, [r1]
  000dc	e5902000	 ldr         r2, [r0]
  000e0	e5933014	 ldr         r3, [r3, #0x14]
  000e4	e5933034	 ldr         r3, [r3, #0x34]
  000e8	e5823028	 str         r3, [r2, #0x28]

; 561  : 
; 562  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL1_PLL_MPU,
; 563  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKSEL1_PLL_MPU)
; 564  :         );

  000ec	e5913000	 ldr         r3, [r1]
  000f0	e5902000	 ldr         r2, [r0]
  000f4	e5933014	 ldr         r3, [r3, #0x14]
  000f8	e5933040	 ldr         r3, [r3, #0x40]
  000fc	e582302c	 str         r3, [r2, #0x2C]

; 565  : 
; 566  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL2_PLL_MPU,
; 567  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKSEL2_PLL_MPU)
; 568  :         );

  00100	e5913000	 ldr         r3, [r1]
  00104	e5902000	 ldr         r2, [r0]
  00108	e5933014	 ldr         r3, [r3, #0x14]
  0010c	e5933044	 ldr         r3, [r3, #0x44]
  00110	e5823030	 str         r3, [r2, #0x30]

; 569  : 
; 570  :     OUTREG32(&g_pPrcmRestore->CM_CLKSTCTRL_MPU,
; 571  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKSTCTRL_MPU)
; 572  :         );

  00114	e5913000	 ldr         r3, [r1]
  00118	e5902000	 ldr         r2, [r0]
  0011c	e5933014	 ldr         r3, [r3, #0x14]
  00120	e5933048	 ldr         r3, [r3, #0x48]
  00124	e5823038	 str         r3, [r2, #0x38]

; 573  : 
; 574  :     OUTREG32(&g_pPrcmRestore->CM_CLKSTCTRL_CORE,
; 575  :         INREG32(&g_pPrcmCm->pOMAP_CORE_CM->CM_CLKSTCTRL_CORE)
; 576  :         );

  00128	e5913000	 ldr         r3, [r1]
  0012c	e5902000	 ldr         r2, [r0]
  00130	e5933004	 ldr         r3, [r3, #4]
  00134	e5933048	 ldr         r3, [r3, #0x48]
  00138	e582303c	 str         r3, [r2, #0x3C]
  0013c		 |$LN2@OALSavePrc|

; 577  : }

  0013c	e8bd4010	 ldmia       sp!, {r4, lr}
  00140	e12fff1e	 bx          lr
  00144		 |$LN7@OALSavePrc|
  00144		 |$LN8@OALSavePrc|
  00144	00000000	 DCD         |g_pPrcmCm|
  00148		 |$LN9@OALSavePrc|
  00148	00000000	 DCD         |g_pPrcmPrm|
  0014c		 |$LN10@OALSavePrc|
  0014c	00000000	 DCD         |g_pPrcmRestore|
  00150		 |$M47530|

			 ENDP  ; |OALSavePrcmContext|

	EXPORT	|OALSaveSdrcContext|
	IMPORT	|g_pSdrcRestore|

  00000			 AREA	 |.pdata|, PDATA
|$T47543| DCD	|$LN6@OALSaveSdr|
	DCD	0x40005e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALSaveSdrcContext| PROC

; 587  : {

  00000		 |$LN6@OALSaveSdr|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47540|

; 588  :     // check for valid pointers
; 589  :     if (g_pSdrcRestore == NULL) return;

  00004	e59f0168	 ldr         r0, [pc, #0x168]
  00008	e5902000	 ldr         r2, [r0]
  0000c	e3520000	 cmp         r2, #0
  00010	0a000054	 beq         |$LN2@OALSaveSdr|

; 590  : 
; 591  :     OUTREG16(&g_pSdrcRestore->SYSCONFIG,
; 592  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_SYSCONFIG)
; 593  :         );

  00014	e59f1154	 ldr         r1, [pc, #0x154]

; 594  : 
; 595  :     OUTREG16(&g_pSdrcRestore->CS_CFG,
; 596  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_CS_CFG)
; 597  :         );
; 598  : 
; 599  :     OUTREG16(&g_pSdrcRestore->SHARING,
; 600  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_SHARING)
; 601  :         );
; 602  : 
; 603  :     OUTREG16(&g_pSdrcRestore->ERR_TYPE,
; 604  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_ERR_TYPE)
; 605  :         );
; 606  : 
; 607  :     OUTREG32(&g_pSdrcRestore->DLLA_CTRL,
; 608  :         INREG32(&g_pSDRCRegs->SDRC_DLLA_CTRL)
; 609  :         );
; 610  : 
; 611  :     OUTREG32(&g_pSdrcRestore->DLLB_CTRL,
; 612  :         INREG32(&g_pSDRCRegs->SDRC_DLLB_CTRL)
; 613  :         );
; 614  : 
; 615  :     OUTREG32(&g_pSdrcRestore->POWER,
; 616  :         INREG32(&g_pSDRCRegs->SDRC_POWER)
; 617  :         );
; 618  : 
; 619  :     OUTREG32(&g_pSdrcRestore->MCFG_0,
; 620  :         INREG32(&g_pSDRCRegs->SDRC_MCFG_0)
; 621  :         );
; 622  : 
; 623  :     OUTREG16(&g_pSdrcRestore->MR_0,
; 624  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_MR_0)
; 625  :         );
; 626  : 
; 627  :     OUTREG32(&g_pSdrcRestore->ACTIM_CTRLA_0,
; 628  :         INREG32(&g_pSDRCRegs->SDRC_ACTIM_CTRLA_0)
; 629  :         );
; 630  : 
; 631  :     OUTREG32(&g_pSdrcRestore->ACTIM_CTRLB_0,
; 632  :         INREG32(&g_pSDRCRegs->SDRC_ACTIM_CTRLB_0)
; 633  :         );
; 634  : 
; 635  :     OUTREG32(&g_pSdrcRestore->RFR_CTRL_0,
; 636  :         INREG32(&g_pSDRCRegs->SDRC_RFR_CTRL_0)
; 637  :         );
; 638  : 
; 639  :     OUTREG32(&g_pSdrcRestore->MCFG_1,
; 640  :         INREG32(&g_pSDRCRegs->SDRC_MCFG_1)
; 641  :         );
; 642  : 
; 643  :     OUTREG16(&g_pSdrcRestore->MR_1,
; 644  :         INREG32(&g_pSDRCRegs->SDRC_MR_1)
; 645  :         );
; 646  : 
; 647  :     OUTREG32(&g_pSdrcRestore->ACTIM_CTRLA_1,
; 648  :         INREG32(&g_pSDRCRegs->SDRC_ACTIM_CTRLA_1)
; 649  :         );
; 650  : 
; 651  :     OUTREG32(&g_pSdrcRestore->ACTIM_CTRLB_1,
; 652  :         INREG32(&g_pSDRCRegs->SDRC_ACTIM_CTRLB_1)
; 653  :         );
; 654  : 
; 655  :     OUTREG32(&g_pSdrcRestore->RFR_CTRL_1,
; 656  :         INREG32(&g_pSDRCRegs->SDRC_RFR_CTRL_1)
; 657  :         );
; 658  : 
; 659  :     OUTREG16(&g_pSdrcRestore->EMR1_0, 0);

  00018	e3a0e000	 mov         lr, #0
  0001c	e5913000	 ldr         r3, [r1]
  00020	e5933010	 ldr         r3, [r3, #0x10]
  00024	e1c230b0	 strh        r3, [r2]
  00028	e5913000	 ldr         r3, [r1]
  0002c	e5902000	 ldr         r2, [r0]
  00030	e5933040	 ldr         r3, [r3, #0x40]
  00034	e1c230b2	 strh        r3, [r2, #2]
  00038	e5913000	 ldr         r3, [r1]
  0003c	e5902000	 ldr         r2, [r0]
  00040	e5933044	 ldr         r3, [r3, #0x44]
  00044	e1c230b4	 strh        r3, [r2, #4]
  00048	e5913000	 ldr         r3, [r1]
  0004c	e5902000	 ldr         r2, [r0]
  00050	e593304c	 ldr         r3, [r3, #0x4C]
  00054	e1c230b6	 strh        r3, [r2, #6]
  00058	e5913000	 ldr         r3, [r1]
  0005c	e5902000	 ldr         r2, [r0]
  00060	e5933060	 ldr         r3, [r3, #0x60]
  00064	e5823008	 str         r3, [r2, #8]
  00068	e5913000	 ldr         r3, [r1]
  0006c	e5902000	 ldr         r2, [r0]
  00070	e5933068	 ldr         r3, [r3, #0x68]
  00074	e582300c	 str         r3, [r2, #0xC]
  00078	e5913000	 ldr         r3, [r1]
  0007c	e5902000	 ldr         r2, [r0]
  00080	e5933070	 ldr         r3, [r3, #0x70]
  00084	e5823010	 str         r3, [r2, #0x10]
  00088	e5913000	 ldr         r3, [r1]
  0008c	e5902000	 ldr         r2, [r0]
  00090	e5933080	 ldr         r3, [r3, #0x80]
  00094	e5823018	 str         r3, [r2, #0x18]
  00098	e5913000	 ldr         r3, [r1]
  0009c	e5902000	 ldr         r2, [r0]
  000a0	e5933084	 ldr         r3, [r3, #0x84]
  000a4	e1c231bc	 strh        r3, [r2, #0x1C]
  000a8	e5913000	 ldr         r3, [r1]
  000ac	e5902000	 ldr         r2, [r0]
  000b0	e593309c	 ldr         r3, [r3, #0x9C]
  000b4	e5823024	 str         r3, [r2, #0x24]
  000b8	e5913000	 ldr         r3, [r1]
  000bc	e5902000	 ldr         r2, [r0]
  000c0	e59330a0	 ldr         r3, [r3, #0xA0]
  000c4	e5823028	 str         r3, [r2, #0x28]
  000c8	e5913000	 ldr         r3, [r1]
  000cc	e5902000	 ldr         r2, [r0]
  000d0	e59330a4	 ldr         r3, [r3, #0xA4]
  000d4	e582302c	 str         r3, [r2, #0x2C]
  000d8	e5913000	 ldr         r3, [r1]
  000dc	e5902000	 ldr         r2, [r0]
  000e0	e59330b0	 ldr         r3, [r3, #0xB0]
  000e4	e5823034	 str         r3, [r2, #0x34]
  000e8	e5913000	 ldr         r3, [r1]
  000ec	e5902000	 ldr         r2, [r0]
  000f0	e59330b4	 ldr         r3, [r3, #0xB4]
  000f4	e1c233b8	 strh        r3, [r2, #0x38]
  000f8	e5913000	 ldr         r3, [r1]
  000fc	e5902000	 ldr         r2, [r0]
  00100	e59330c4	 ldr         r3, [r3, #0xC4]
  00104	e5823040	 str         r3, [r2, #0x40]
  00108	e5913000	 ldr         r3, [r1]
  0010c	e5902000	 ldr         r2, [r0]
  00110	e59330c8	 ldr         r3, [r3, #0xC8]
  00114	e5823044	 str         r3, [r2, #0x44]
  00118	e5913000	 ldr         r3, [r1]
  0011c	e5902000	 ldr         r2, [r0]
  00120	e59330d4	 ldr         r3, [r3, #0xD4]
  00124	e5823048	 str         r3, [r2, #0x48]
  00128	e5903000	 ldr         r3, [r0]
  0012c	e1c3e1be	 strh        lr, [r3, #0x1E]

; 660  :     OUTREG16(&g_pSdrcRestore->EMR2_0, 0);

  00130	e5903000	 ldr         r3, [r0]
  00134	e1c3e2b0	 strh        lr, [r3, #0x20]

; 661  :     OUTREG16(&g_pSdrcRestore->EMR3_0, 0);

  00138	e5903000	 ldr         r3, [r0]
  0013c	e1c3e2b2	 strh        lr, [r3, #0x22]

; 662  :     OUTREG16(&g_pSdrcRestore->EMR1_1, 0);

  00140	e5903000	 ldr         r3, [r0]
  00144	e1c3e3ba	 strh        lr, [r3, #0x3A]

; 663  :     OUTREG16(&g_pSdrcRestore->EMR2_1, 0);

  00148	e5903000	 ldr         r3, [r0]
  0014c	e1c3e3bc	 strh        lr, [r3, #0x3C]

; 664  :     OUTREG16(&g_pSdrcRestore->EMR3_1, 0);

  00150	e5903000	 ldr         r3, [r0]
  00154	e1c3e3be	 strh        lr, [r3, #0x3E]

; 665  :     OUTREG16(&g_pSdrcRestore->DCDL_1_CTRL, 0);

  00158	e5903000	 ldr         r3, [r0]
  0015c	e1c3e4bc	 strh        lr, [r3, #0x4C]

; 666  :     OUTREG16(&g_pSdrcRestore->DCDL_2_CTRL, 0);

  00160	e5903000	 ldr         r3, [r0]
  00164	e1c3e4be	 strh        lr, [r3, #0x4E]
  00168		 |$LN2@OALSaveSdr|

; 667  : }

  00168	e49de004	 ldr         lr, [sp], #4
  0016c	e12fff1e	 bx          lr
  00170		 |$LN7@OALSaveSdr|
  00170		 |$LN8@OALSaveSdr|
  00170	00000000	 DCD         |g_pSDRCRegs|
  00174		 |$LN9@OALSaveSdr|
  00174	00000000	 DCD         |g_pSdrcRestore|
  00178		 |$M47541|

			 ENDP  ; |OALSaveSdrcContext|

	EXPORT	|PrcmInit|
	EXPORT	|??_C@_1BM@IGMJLLMF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@IDHFLFIL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|DeviceInitialize|
	IMPORT	|ClockInitialize|
	IMPORT	|DomainInitialize|
	IMPORT	|ResetInitialize|

  00000			 AREA	 |.pdata|, PDATA
|$T47558| DCD	|$LN9@PrcmInit|
	DCD	0x40001c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@IGMJLLMF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@IDHFLFIL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmInit| PROC

; 679  : {

  00000		 |$LN9@PrcmInit|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47555|
  00004	e1a05000	 mov         r5, r0

; 680  :     OALMSG(OAL_FUNC, (L"+PrcmInit()\r\n"));

  00008	e59f405c	 ldr         r4, [pc, #0x5C]
  0000c	e5943440	 ldr         r3, [r4, #0x440]
  00010	e3130004	 tst         r3, #4
  00014	159f004c	 ldrne       r0, [pc, #0x4C]
  00018	1b000000	 blne        NKDbgPrintfW

; 681  : 
; 682  :     // initialize global pointer to the PRCM registers
; 683  :     g_pPrcmPrm  = pInfo->pPrcmPrm;

  0001c	e59f2040	 ldr         r2, [pc, #0x40]
  00020	e5953000	 ldr         r3, [r5]

; 684  :     g_pPrcmCm   = pInfo->pPrcmCm;

  00024	e59f1034	 ldr         r1, [pc, #0x34]
  00028	e5823000	 str         r3, [r2]
  0002c	e5953004	 ldr         r3, [r5, #4]
  00030	e5813000	 str         r3, [r1]

; 685  : 
; 686  :     // initialize all internal data structures
; 687  :     ResetInitialize();

  00034	eb000000	 bl          ResetInitialize

; 688  :     DomainInitialize();

  00038	eb000000	 bl          DomainInitialize

; 689  :     ClockInitialize();

  0003c	eb000000	 bl          ClockInitialize

; 690  :     DeviceInitialize();

  00040	eb000000	 bl          DeviceInitialize

; 691  : 
; 692  :     OALMSG(OAL_FUNC, (L"-PrcmInit()\r\n"));

  00044	e5943440	 ldr         r3, [r4, #0x440]
  00048	e3130004	 tst         r3, #4
  0004c	159f0008	 ldrne       r0, [pc, #8]
  00050	1b000000	 blne        NKDbgPrintfW

; 693  : }

  00054	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$LN10@PrcmInit|
  0005c		 |$LN11@PrcmInit|
  0005c	00000000	 DCD         |??_C@_1BM@IGMJLLMF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00060		 |$LN12@PrcmInit|
  00060	00000000	 DCD         |g_pPrcmCm|
  00064		 |$LN13@PrcmInit|
  00064	00000000	 DCD         |g_pPrcmPrm|
  00068		 |$LN14@PrcmInit|
  00068	00000000	 DCD         |??_C@_1BM@IDHFLFIL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0006c		 |$LN15@PrcmInit|
  0006c	00000000	 DCD         |dpCurSettings|
  00070		 |$M47556|

			 ENDP  ; |PrcmInit|

	EXPORT	|PrcmPostInit|
	EXPORT	|??_C@_1CE@FFFGKDPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@JMJGFEAL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|InitializeCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T47577| DCD	|$LN14@PrcmPostIn|
	DCD	0x40001b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FFFGKDPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "P", 0x0, "o"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@JMJGFEAL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "P", 0x0, "o"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmPostInit| PROC

; 703  : {

  00000		 |$LN14@PrcmPostIn|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M47574|

; 704  :     int i;
; 705  :     OALMSG(OAL_FUNC, (L"+PrcmPostInit()\r\n"));

  00004	e59f605c	 ldr         r6, [pc, #0x5C]
  00008	e5963440	 ldr         r3, [r6, #0x440]
  0000c	e3130004	 tst         r3, #4
  00010	159f004c	 ldrne       r0, [pc, #0x4C]
  00014	1b000000	 blne        NKDbgPrintfW

; 706  : 
; 707  :     // initialize synchronization objects
; 708  :     for (i = 0; i < Mutex_Count; ++i)

  00018	e59f4040	 ldr         r4, [pc, #0x40]
  0001c	e3a05006	 mov         r5, #6
  00020		 |$LL3@PrcmPostIn|

; 709  :         {
; 710  :         InitializeCriticalSection(&g_rgPrcmMutex[i]);

  00020	e1a00004	 mov         r0, r4
  00024	eb000000	 bl          InitializeCriticalSection
  00028	e2844014	 add         r4, r4, #0x14
  0002c	e2555001	 subs        r5, r5, #1
  00030	1afffffa	 bne         |$LL3@PrcmPostIn|

; 711  :         }
; 712  : 
; 713  :     // update flag indicating PRCM library is fully initialized
; 714  :     g_PrcmPostInit = TRUE;
; 715  : 
; 716  :     OALMSG(OAL_FUNC, (L"-PrcmPostInit()\r\n"));

  00034	e5962440	 ldr         r2, [r6, #0x440]
  00038	e59f301c	 ldr         r3, [pc, #0x1C]
  0003c	e3a01001	 mov         r1, #1
  00040	e3120004	 tst         r2, #4
  00044	159f000c	 ldrne       r0, [pc, #0xC]
  00048	e5831000	 str         r1, [r3]
  0004c	1b000000	 blne        NKDbgPrintfW

; 717  : };

  00050	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$LN15@PrcmPostIn|
  00058		 |$LN16@PrcmPostIn|
  00058	00000000	 DCD         |??_C@_1CE@FFFGKDPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0005c		 |$LN17@PrcmPostIn|
  0005c	00000000	 DCD         |g_PrcmPostInit|
  00060		 |$LN18@PrcmPostIn|
  00060	00000000	 DCD         |g_rgPrcmMutex|
  00064		 |$LN19@PrcmPostIn|
  00064	00000000	 DCD         |??_C@_1CE@JMJGFEAL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00068		 |$LN20@PrcmPostIn|
  00068	00000000	 DCD         |dpCurSettings|
  0006c		 |$M47575|

			 ENDP  ; |PrcmPostInit|

	EXPORT	|PrcmContextRestoreInit|
	IMPORT	|OALCPURestoreContext|
	IMPORT	|g_pContextRestore|

  00000			 AREA	 |.pdata|, PDATA
|$T47590| DCD	|$LN8@PrcmContex|
	DCD	0x40003101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmContextRestoreInit| PROC

; 727  : {

  00000		 |$LN8@PrcmContex|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47587|

; 728  :     // store the oem context restore address
; 729  :     if (g_pContextRestore == NULL) return;

  00004	e59f40b4	 ldr         r4, [pc, #0xB4]
  00008	e5943000	 ldr         r3, [r4]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000023	 beq         |$LN1@PrcmContex|

; 730  : 
; 731  :     OUTREG32(&g_pContextRestore->BOOT_CONFIG_ADDR, 0);
; 732  : #pragma warning (push)
; 733  : #pragma warning (disable:4152) //disable warning that prevents using function pointers as data pointers
; 734  :     OUTREG32(&g_pContextRestore->PUBLIC_RESTORE_ADDR, OALVAtoPA(OALCPURestoreContext));

  00014	e59f00a0	 ldr         r0, [pc, #0xA0]
  00018	e3a05000	 mov         r5, #0
  0001c	e5835000	 str         r5, [r3]
  00020	eb000000	 bl          OALVAtoPA
  00024	e5943000	 ldr         r3, [r4]

; 735  : #pragma warning (pop)
; 736  : 
; 737  :     OUTREG32(&g_pContextRestore->SECURE_SRAM_RESTORE_ADDR, 0);
; 738  :     OUTREG32(&g_pContextRestore->SDRC_MODULE_SEMAPHORE, 0);
; 739  :     OUTREG32(&g_pContextRestore->OEM_CPU_INFO_DATA_PA, dwOEMMPUContextRestore);

  00028	e59f1088	 ldr         r1, [pc, #0x88]

; 740  :     OUTREG32(&g_pContextRestore->OEM_CPU_INFO_DATA_VA, g_pCPUInfo);
; 741  :     OUTREG32(&g_pContextRestore->PRCM_BLOCK_OFFSET, 0);
; 742  :     OUTREG32(&g_pContextRestore->SDRC_BLOCK_OFFSET, 0);
; 743  : 
; 744  :     if (g_pPrcmRestore != NULL)

  0002c	e59fe080	 ldr         lr, [pc, #0x80]
  00030	e5830004	 str         r0, [r3, #4]
  00034	e5943000	 ldr         r3, [r4]
  00038	e59f0070	 ldr         r0, [pc, #0x70]
  0003c	e5835008	 str         r5, [r3, #8]
  00040	e5943000	 ldr         r3, [r4]
  00044	e583500c	 str         r5, [r3, #0xC]
  00048	e5942000	 ldr         r2, [r4]
  0004c	e5913000	 ldr         r3, [r1]
  00050	e582301c	 str         r3, [r2, #0x1C]
  00054	e5942000	 ldr         r2, [r4]
  00058	e5903000	 ldr         r3, [r0]
  0005c	e5823020	 str         r3, [r2, #0x20]
  00060	e5943000	 ldr         r3, [r4]
  00064	e5835010	 str         r5, [r3, #0x10]
  00068	e5943000	 ldr         r3, [r4]
  0006c	e5835014	 str         r5, [r3, #0x14]
  00070	e59e3000	 ldr         r3, [lr]
  00074	e3530000	 cmp         r3, #0

; 745  :         {
; 746  :         OUTREG32(&g_pContextRestore->PRCM_BLOCK_OFFSET,
; 747  :             (UINT)g_pPrcmRestore - (UINT)g_pContextRestore
; 748  :             );

  00078	15942000	 ldrne       r2, [r4]
  0007c	10433002	 subne       r3, r3, r2
  00080	15823010	 strne       r3, [r2, #0x10]

; 749  :         OALSavePrcmContext();

  00084	1b000000	 blne        OALSavePrcmContext

; 750  :         }
; 751  : 
; 752  :     if (g_pSdrcRestore != NULL)

  00088	e59f301c	 ldr         r3, [pc, #0x1C]
  0008c	e5933000	 ldr         r3, [r3]
  00090	e3530000	 cmp         r3, #0

; 753  :         {
; 754  :         OUTREG32(&g_pContextRestore->SDRC_BLOCK_OFFSET,
; 755  :             (UINT)g_pSdrcRestore - (UINT)g_pContextRestore
; 756  :             );

  00094	15942000	 ldrne       r2, [r4]
  00098	10433002	 subne       r3, r3, r2
  0009c	15823014	 strne       r3, [r2, #0x14]

; 757  :         OALSaveSdrcContext();

  000a0	1b000000	 blne        OALSaveSdrcContext
  000a4		 |$LN1@PrcmContex|

; 758  :         }
; 759  : }

  000a4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN9@PrcmContex|
  000ac		 |$LN10@PrcmContex|
  000ac	00000000	 DCD         |g_pSdrcRestore|
  000b0		 |$LN11@PrcmContex|
  000b0	00000000	 DCD         |g_pCPUInfo|
  000b4		 |$LN12@PrcmContex|
  000b4	00000000	 DCD         |g_pPrcmRestore|
  000b8		 |$LN13@PrcmContex|
  000b8	00000000	 DCD         |dwOEMMPUContextRestore|
  000bc		 |$LN14@PrcmContex|
  000bc	00000000	 DCD         |OALCPURestoreContext|
  000c0		 |$LN15@PrcmContex|
  000c0	00000000	 DCD         |g_pContextRestore|
  000c4		 |$M47588|

			 ENDP  ; |PrcmContextRestoreInit|

	EXPORT	|PrcmContextRestore|

  00000			 AREA	 |.pdata|, PDATA
|$T47604| DCD	|$LN5@PrcmContex@2|
	DCD	0x40002001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmContextRestore| PROC

; 769  : {

  00000		 |$LN5@PrcmContex@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47601|

; 770  : 
; 771  : #pragma warning (push)
; 772  : #pragma warning (disable:4152) //disable warning that prevents using function pointers as data pointers
; 773  :     memcpy(fnCpuStart, OALCPUStart, (UINT)OALCPUEnd - (UINT)OALCPUStart);

  00004	e59f3070	 ldr         r3, [pc, #0x70]
  00008	e59f2068	 ldr         r2, [pc, #0x68]
  0000c	e59fe060	 ldr         lr, [pc, #0x60]
  00010	e5930000	 ldr         r0, [r3]
  00014	e1a01002	 mov         r1, r2
  00018	e04e2002	 sub         r2, lr, r2
  0001c	eb000000	 bl          memcpy

; 774  : #pragma warning (pop)
; 775  : 
; 776  :     OUTREG32(&g_pPrcmCm->pOMAP_CORE_CM->CM_CLKSTCTRL_CORE,
; 777  :         INREG32(&g_pPrcmRestore->CM_CLKSTCTRL_CORE)
; 778  :         );

  00020	e59fe048	 ldr         lr, [pc, #0x48]
  00024	e59f0040	 ldr         r0, [pc, #0x40]
  00028	e59e3000	 ldr         r3, [lr]
  0002c	e5901000	 ldr         r1, [r0]
  00030	e5932004	 ldr         r2, [r3, #4]
  00034	e591303c	 ldr         r3, [r1, #0x3C]
  00038	e5823048	 str         r3, [r2, #0x48]

; 779  : 
; 780  :     OUTREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKSTCTRL_MPU,
; 781  :         INREG32(&g_pPrcmRestore->CM_CLKSTCTRL_MPU)
; 782  :         );

  0003c	e59e3000	 ldr         r3, [lr]
  00040	e5901000	 ldr         r1, [r0]
  00044	e5932014	 ldr         r2, [r3, #0x14]
  00048	e5913038	 ldr         r3, [r1, #0x38]
  0004c	e5823048	 str         r3, [r2, #0x48]

; 783  : 
; 784  :    OUTREG32(&g_pPrcmCm->pOMAP_WKUP_CM->CM_CLKSEL_WKUP,
; 785  :         INREG32(&g_pPrcmRestore->CM_CLKSEL_WKUP)
; 786  :         );

  00050	e59e3000	 ldr         r3, [lr]
  00054	e5901000	 ldr         r1, [r0]
  00058	e5932000	 ldr         r2, [r3]
  0005c	e591300c	 ldr         r3, [r1, #0xC]
  00060	e5823040	 str         r3, [r2, #0x40]

; 787  : }

  00064	e49de004	 ldr         lr, [sp], #4
  00068	e12fff1e	 bx          lr
  0006c		 |$LN6@PrcmContex@2|
  0006c		 |$LN7@PrcmContex@2|
  0006c	00000000	 DCD         |g_pPrcmRestore|
  00070		 |$LN8@PrcmContex@2|
  00070	00000000	 DCD         |g_pPrcmCm|
  00074		 |$LN9@PrcmContex@2|
  00074	00000000	 DCD         |OALCPUEnd|
  00078		 |$LN10@PrcmContex@2|
  00078	00000000	 DCD         |OALCPUStart|
  0007c		 |$LN11@PrcmContex@2|
  0007c	00000000	 DCD         |fnCpuStart|
  00080		 |$M47602|

			 ENDP  ; |PrcmContextRestore|

	EXPORT	|PrcmSuspend|
	IMPORT	|OALTimerStart|
	IMPORT	|PrcmProcessPostMpuWakeup|
	IMPORT	|OALContextRestore|
	IMPORT	|OALWakeupLatency_PopState|
	IMPORT	|PrcmRegsSnapshot|
	IMPORT	|PrcmSaveRefCounts|
	IMPORT	|OALWakeupLatency_SaveSnapshot|
	IMPORT	|g_PrcmDebugSuspendResume|
	IMPORT	|OALWakeupLatency_PushState|
	IMPORT	|OALContextSave|
	IMPORT	|OALWakeupLatency_IsChipOff|
	IMPORT	|OALWakeupLatency_GetSuspendState|
	IMPORT	|PrcmDeviceEnableClocksKernel|
	IMPORT	|OALTimerSetReg|

  00000			 AREA	 |.pdata|, PDATA
|$T47621| DCD	|$LN8@PrcmSuspen|
	DCD	0x40003d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmSuspend| PROC

; 800  : {

  00000		 |$LN8@PrcmSuspen|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47618|

; 801  :     DWORD latencyState;
; 802  :     UINT32 prevCoreState;
; 803  :     UINT32 prevMpuState;
; 804  :     UINT32 prevPerState;
; 805  : 
; 806  :     
; 807  :     //--------------------------------------------------------------------------
; 808  :     // perform power down sequence
; 809  :     //--------------------------------------------------------------------------
; 810  : 
; 811  :     // Disable match interrupt
; 812  :     OALTimerSetReg(&g_pTimerRegs->TIER, 0);

  00004	e59f30e4	 ldr         r3, [pc, #0xE4]
  00008	e3a01000	 mov         r1, #0
  0000c	e5933000	 ldr         r3, [r3]
  00010	e283001c	 add         r0, r3, #0x1C
  00014	eb000000	 bl          OALTimerSetReg

; 813  : 
; 814  :     // Get the previous MPU, CORE and PER power state
; 815  :     prevMpuState = INREG32(&g_pPrcmPrm->pOMAP_MPU_PRM->PM_PWSTST_MPU);

  00018	e59f30cc	 ldr         r3, [pc, #0xCC]

; 816  :     prevCoreState = INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_PWSTST_CORE);
; 817  :     prevPerState = INREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_PWSTST_PER);
; 818  : 
; 819  :     PrcmDeviceEnableClocksKernel(OMAP_DEVICE_GPTIMER1, FALSE);

  0001c	e3a01000	 mov         r1, #0
  00020	e3a0001f	 mov         r0, #0x1F
  00024	e5933000	 ldr         r3, [r3]
  00028	e5932014	 ldr         r2, [r3, #0x14]
  0002c	e593e004	 ldr         lr, [r3, #4]
  00030	e5933008	 ldr         r3, [r3, #8]
  00034	e59250e4	 ldr         r5, [r2, #0xE4]
  00038	e59e60e4	 ldr         r6, [lr, #0xE4]
  0003c	e59370e4	 ldr         r7, [r3, #0xE4]
  00040	eb000000	 bl          PrcmDeviceEnableClocksKernel

; 820  : 
; 821  :     // use the latency module to transition to a valid sleep state
; 822  :     latencyState = OALWakeupLatency_GetSuspendState();

  00044	eb000000	 bl          OALWakeupLatency_GetSuspendState
  00048	e1a04000	 mov         r4, r0

; 823  :     if (OALWakeupLatency_IsChipOff(latencyState))

  0004c	eb000000	 bl          OALWakeupLatency_IsChipOff
  00050	e3500000	 cmp         r0, #0
  00054	0a000002	 beq         |$LN2@PrcmSuspen|

; 824  :         {
; 825  :         if (!OALContextSave())

  00058	eb000000	 bl          OALContextSave
  0005c	e3500000	 cmp         r0, #0
  00060	0a000019	 beq         |$cleanUp$47172|
  00064		 |$LN2@PrcmSuspen|

; 826  :             {
; 827  :             // wake-up will fail so just return
; 828  :             goto cleanUp;
; 829  :             }
; 830  :         }
; 831  :     OALWakeupLatency_PushState(latencyState);

  00064	e1a00004	 mov         r0, r4
  00068	eb000000	 bl          OALWakeupLatency_PushState

; 832  : 
; 833  : 
; 834  :     // Move SoC/CPU to idle mode
; 835  :     
; 836  : 
; 837  : #ifndef SHIP_BUILD
; 838  :     if (g_PrcmDebugSuspendResume)

  0006c	e59f3074	 ldr         r3, [pc, #0x74]
  00070	e5933000	 ldr         r3, [r3]
  00074	e3530000	 cmp         r3, #0
  00078	0a000002	 beq         |$LN1@PrcmSuspen|

; 839  :     {
; 840  :         OALWakeupLatency_SaveSnapshot();

  0007c	eb000000	 bl          OALWakeupLatency_SaveSnapshot

; 841  :         PrcmSaveRefCounts();

  00080	eb000000	 bl          PrcmSaveRefCounts

; 842  : 		PrcmRegsSnapshot();

  00084	eb000000	 bl          PrcmRegsSnapshot
  00088		 |$LN1@PrcmSuspen|

; 843  : 	}
; 844  : #endif
; 845  : 		
; 846  :     PrcmDeviceEnableClocksKernel(OMAP_DEVICE_SCMCTRL, FALSE);

  00088	e3a01000	 mov         r1, #0
  0008c	e3a00002	 mov         r0, #2
  00090	eb000000	 bl          PrcmDeviceEnableClocksKernel

; 847  : 
; 848  :     // Move SoC/CPU to idle mode (suspend)
; 849  :     fnOALCPUIdle(g_pCPUInfo);

  00094	e59f4048	 ldr         r4, [pc, #0x48]
  00098	e5943008	 ldr         r3, [r4, #8]
  0009c	e5940000	 ldr         r0, [r4]
  000a0	e1a0e00f	 mov         lr, pc
  000a4	e12fff13	 bx          r3

; 850  : 
; 851  :     // resume starts here...
; 852  : 
; 853  :     PrcmDeviceEnableClocksKernel(OMAP_DEVICE_SCMCTRL, TRUE);

  000a8	e3a01001	 mov         r1, #1
  000ac	e3a00002	 mov         r0, #2
  000b0	eb000000	 bl          PrcmDeviceEnableClocksKernel

; 854  : 
; 855  :     OALWakeupLatency_PopState();

  000b4	eb000000	 bl          OALWakeupLatency_PopState

; 856  : 
; 857  :     OALContextRestore(prevMpuState, prevCoreState, prevPerState);

  000b8	e1a02007	 mov         r2, r7
  000bc	e1a01006	 mov         r1, r6
  000c0	e1a00005	 mov         r0, r5
  000c4	eb000000	 bl          OALContextRestore

; 858  : 
; 859  :     PrcmProcessPostMpuWakeup();

  000c8	eb000000	 bl          PrcmProcessPostMpuWakeup
  000cc		 |$cleanUp$47172|

; 860  : 
; 861  :     // UNDONE:
; 862  :     //   Need to update curridlehigh and curridlelow to track cpu loads
; 863  : 
; 864  : cleanUp:
; 865  :     // restart GPTIMER1
; 866  :     PrcmDeviceEnableClocksKernel(OMAP_DEVICE_GPTIMER1, TRUE);

  000cc	e3a01001	 mov         r1, #1
  000d0	e3a0001f	 mov         r0, #0x1F
  000d4	eb000000	 bl          PrcmDeviceEnableClocksKernel

; 867  : 	
; 868  :     OALTimerStart();

  000d8	eb000000	 bl          OALTimerStart

; 869  : 
; 870  : }

  000dc	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000e0	e12fff1e	 bx          lr
  000e4		 |$LN9@PrcmSuspen|
  000e4		 |$LN10@PrcmSuspen|
  000e4	00000000	 DCD         |g_pCPUInfo|
  000e8		 |$LN11@PrcmSuspen|
  000e8	00000000	 DCD         |g_PrcmDebugSuspendResume|
  000ec		 |$LN12@PrcmSuspen|
  000ec	00000000	 DCD         |g_pPrcmPrm|
  000f0		 |$LN13@PrcmSuspen|
  000f0	00000000	 DCD         |g_pTimerRegs|
  000f4		 |$M47619|

			 ENDP  ; |PrcmSuspend|

	EXPORT	|OALIoCtlPrcmDeviceGetDeviceManagementTable|
	EXPORT	|??_C@_1GO@KIJCCOCF@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@ELGNEBJK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@| [ DATA ] ; `string'
	IMPORT	|PrcmDeviceEnableIClock|
	IMPORT	|PrcmDeviceEnableClocks|
	IMPORT	|PrcmClockGetSystemClockFrequency|
	IMPORT	|OALMux_UpdateOnDeviceStateChange|
	IMPORT	|PrcmDeviceGetContextState|
	IMPORT	|PrcmDeviceEnableAutoIdle|
	IMPORT	|PrcmDeviceSetSourceClocks|
	IMPORT	|PrcmDeviceEnableFClock|

  00000			 AREA	 |.pdata|, PDATA
|$T47642| DCD	|$LN12@OALIoCtlPr|
	DCD	0x40003801

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@KIJCCOCF@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "M", 0x0, "a", 0x0, "n"
	DCB	0x0, "a", 0x0, "g", 0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "T", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@ELGNEBJK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "M", 0x0, "a", 0x0, "n"
	DCB	0x0, "a", 0x0, "g", 0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "T", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlPrcmDeviceGetDeviceManagementTable| PROC

; 885  : {

  00000		 |$LN12@OALIoCtlPr|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M47639|
  00004	e1a07003	 mov         r7, r3

; 886  :     BOOL rc = FALSE;
; 887  :     OMAP_DEVCLKMGMT_FNTABLE *pfnTbl;
; 888  : 
; 889  :     UNREFERENCED_PARAMETER(inSize);
; 890  :     UNREFERENCED_PARAMETER(pInBuffer);
; 891  :     UNREFERENCED_PARAMETER(code);
; 892  : 
; 893  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmDeviceGetDeviceManagementTable\r\n"));

  00008	e59f80cc	 ldr         r8, [pc, #0xCC]
  0000c	e3a04000	 mov         r4, #0
  00010	e5981440	 ldr         r1, [r8, #0x440]
  00014	e3110a01	 tst         r1, #1, 20
  00018	0a000004	 beq         |$LN6@OALIoCtlPr|
  0001c	e3110004	 tst         r1, #4
  00020	0a000002	 beq         |$LN6@OALIoCtlPr|
  00024	e59f00ac	 ldr         r0, [pc, #0xAC]
  00028	eb000000	 bl          NKDbgPrintfW
  0002c	e5981440	 ldr         r1, [r8, #0x440]
  00030		 |$LN6@OALIoCtlPr|

; 894  :     if (pOutBuffer == NULL || outSize < sizeof(OMAP_DEVCLKMGMT_FNTABLE))

  00030	e3570000	 cmp         r7, #0
  00034	0a000016	 beq         |$cleanUp$47195|
  00038	e59d2018	 ldr         r2, [sp, #0x18]
  0003c	e3520020	 cmp         r2, #0x20
  00040	3a000013	 bcc         |$cleanUp$47195|

; 895  :         {
; 896  :         goto cleanUp;
; 897  :         }
; 898  : 
; 899  :     // update return information
; 900  :     //
; 901  :     if (pOutSize != NULL) *pOutSize = sizeof(OMAP_DEVCLKMGMT_FNTABLE);

  00044	e59d301c	 ldr         r3, [sp, #0x1C]

; 902  : 
; 903  :     // update function pointers
; 904  :     //
; 905  :     pfnTbl = (OMAP_DEVCLKMGMT_FNTABLE*)pOutBuffer;    
; 906  :     pfnTbl->pfnEnableDeviceClocks= PrcmDeviceEnableClocks;
; 907  :     pfnTbl->pfnEnableDeviceIClock= PrcmDeviceEnableIClock;
; 908  :     pfnTbl->pfnEnableDeviceFClock= PrcmDeviceEnableFClock;

  00048	e59f1084	 ldr         r1, [pc, #0x84]

; 909  :     pfnTbl->pfnSetSourceDeviceClocks = PrcmDeviceSetSourceClocks;

  0004c	e59f007c	 ldr         r0, [pc, #0x7C]
  00050	e3530000	 cmp         r3, #0
  00054	13a02020	 movne       r2, #0x20

; 910  :     pfnTbl->pfnEnableDeviceClockAutoIdle = PrcmDeviceEnableAutoIdle;

  00058	e59fe06c	 ldr         lr, [pc, #0x6C]

; 911  :     pfnTbl->pfnGetDeviceContextState = PrcmDeviceGetContextState;

  0005c	e59f4064	 ldr         r4, [pc, #0x64]

; 912  :     pfnTbl->pfnUpdateOnDeviceStateChange = OALMux_UpdateOnDeviceStateChange;

  00060	e59f505c	 ldr         r5, [pc, #0x5C]

; 913  :     pfnTbl->pfnGetSystemClockFrequency = PrcmClockGetSystemClockFrequency;

  00064	e59f6054	 ldr         r6, [pc, #0x54]
  00068	15832000	 strne       r2, [r3]
  0006c	e59f3048	 ldr         r3, [pc, #0x48]
  00070	e59f2040	 ldr         r2, [pc, #0x40]
  00074	e287c008	 add         r12, r7, #8
  00078	e88c4002	 stmia       r12, {r1, lr}
  0007c	e5873000	 str         r3, [r7]
  00080	e5872004	 str         r2, [r7, #4]
  00084	e287c010	 add         r12, r7, #0x10
  00088	e88c0071	 stmia       r12, {r0, r4 - r6}

; 914  :     rc = TRUE;

  0008c	e3a04001	 mov         r4, #1
  00090	e5981440	 ldr         r1, [r8, #0x440]
  00094		 |$cleanUp$47195|

; 915  : 
; 916  : cleanUp:
; 917  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlPrcmDeviceGetDeviceManagementTable(rc = %d)\r\n", rc));

  00094	e3110901	 tst         r1, #1, 18
  00098	13110004	 tstne       r1, #4
  0009c	159f0010	 ldrne       r0, [pc, #0x10]
  000a0	11a01004	 movne       r1, r4
  000a4	1b000000	 blne        NKDbgPrintfW

; 918  :     return rc;
; 919  : }

  000a8	e1a00004	 mov         r0, r4
  000ac	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$LN13@OALIoCtlPr|
  000b4		 |$LN14@OALIoCtlPr|
  000b4	00000000	 DCD         |??_C@_1GO@KIJCCOCF@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@|
  000b8		 |$LN15@OALIoCtlPr|
  000b8	00000000	 DCD         |PrcmDeviceEnableIClock|
  000bc		 |$LN16@OALIoCtlPr|
  000bc	00000000	 DCD         |PrcmDeviceEnableClocks|
  000c0		 |$LN17@OALIoCtlPr|
  000c0	00000000	 DCD         |PrcmClockGetSystemClockFrequency|
  000c4		 |$LN18@OALIoCtlPr|
  000c4	00000000	 DCD         |OALMux_UpdateOnDeviceStateChange|
  000c8		 |$LN19@OALIoCtlPr|
  000c8	00000000	 DCD         |PrcmDeviceGetContextState|
  000cc		 |$LN20@OALIoCtlPr|
  000cc	00000000	 DCD         |PrcmDeviceEnableAutoIdle|
  000d0		 |$LN21@OALIoCtlPr|
  000d0	00000000	 DCD         |PrcmDeviceSetSourceClocks|
  000d4		 |$LN22@OALIoCtlPr|
  000d4	00000000	 DCD         |PrcmDeviceEnableFClock|
  000d8		 |$LN23@OALIoCtlPr|
  000d8	00000000	 DCD         |??_C@_1FM@ELGNEBJK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@|
  000dc		 |$LN24@OALIoCtlPr|
  000dc	00000000	 DCD         |dpCurSettings|
  000e0		 |$M47640|

			 ENDP  ; |OALIoCtlPrcmDeviceGetDeviceManagementTable|

	END
