; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\OAL\POWER\power.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OEMInterruptPending|
	EXPORT	|??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALIntrIsIrqPending|
	IMPORT	|OALIntrTranslateSysIntr|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\oal\power\power.c

  00000			 AREA	 |.pdata|, PDATA
|$T47181| DCD	|$LN16@OEMInterru|
	DCD	0x40002c02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "P", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "P", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMInterruptPending| PROC

; 71   : {

  00000		 |$LN16@OEMInterru|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M47178|
  00008	e1a05000	 mov         r5, r0

; 72   :     BOOL pending = FALSE;
; 73   :     const UINT32 *pIrqs;
; 74   :     UINT32 ix, count;
; 75   : 
; 76   :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 77   :         L"+OEMInterruptPending(%d)\r\n", sysIntr
; 78   :         ));

  0000c	e59f6098	 ldr         r6, [pc, #0x98]
  00010	e3a04000	 mov         r4, #0
  00014	e5963440	 ldr         r3, [r6, #0x440]
  00018	e3130901	 tst         r3, #1, 18
  0001c	13130902	 tstne       r3, #2, 18
  00020	159f0080	 ldrne       r0, [pc, #0x80]
  00024	11a01005	 movne       r1, r5
  00028	1b000000	 blne        NKDbgPrintfW

; 79   : 
; 80   :     if (OALIntrTranslateSysIntr(sysIntr, &count, &pIrqs))

  0002c	e28d2004	 add         r2, sp, #4
  00030	e28d1000	 add         r1, sp, #0
  00034	e1a00005	 mov         r0, r5
  00038	eb000000	 bl          OALIntrTranslateSysIntr
  0003c	e3500000	 cmp         r0, #0
  00040	0a00000d	 beq         |$LN13@OEMInterru|

; 81   :         {
; 82   :         for (ix = 0; ix < count && !pending; ix++)

  00044	e59d3000	 ldr         r3, [sp]
  00048	e3a05000	 mov         r5, #0
  0004c	e3530000	 cmp         r3, #0
  00050	0a000009	 beq         |$LN13@OEMInterru|
  00054		 |$LL3@OEMInterru|
  00054	e3540000	 cmp         r4, #0
  00058	1a000007	 bne         |$LN13@OEMInterru|

; 83   :             {
; 84   :             pending = OALIntrIsIrqPending(pIrqs[ix]);

  0005c	e59d3004	 ldr         r3, [sp, #4]
  00060	e7930105	 ldr         r0, [r3, +r5, lsl #2]
  00064	eb000000	 bl          OALIntrIsIrqPending
  00068	e59d3000	 ldr         r3, [sp]
  0006c	e2855001	 add         r5, r5, #1
  00070	e1a04000	 mov         r4, r0
  00074	e1550003	 cmp         r5, r3
  00078	3afffff5	 bcc         |$LL3@OEMInterru|
  0007c		 |$LN13@OEMInterru|

; 85   :             }            
; 86   :         }
; 87   :         
; 88   :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 89   :         L"-OEMInterruptPending(rc = %d)\r\n", pending
; 90   :         ));

  0007c	e5963440	 ldr         r3, [r6, #0x440]
  00080	e3130901	 tst         r3, #1, 18
  00084	13130902	 tstne       r3, #2, 18
  00088	159f0014	 ldrne       r0, [pc, #0x14]
  0008c	11a01004	 movne       r1, r4
  00090	1b000000	 blne        NKDbgPrintfW

; 91   :     return pending;
; 92   : }

  00094	e1a00004	 mov         r0, r4
  00098	e28dd008	 add         sp, sp, #8
  0009c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN17@OEMInterru|
  000a4		 |$LN18@OEMInterru|
  000a4	00000000	 DCD         |??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000a8		 |$LN19@OEMInterru|
  000a8	00000000	 DCD         |??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000ac		 |$LN20@OEMInterru|
  000ac	00000000	 DCD         |dpCurSettings|
  000b0		 |$M47179|

			 ENDP  ; |OEMInterruptPending|

	EXPORT	|OEMPowerOff|
	EXPORT	|??_C@_1DG@KDDHMOEO@?$AA?$AN?$AA?6?$AAW?$AAa?$AAk?$AAe?$AA?5?$AAd?$AAu?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@GGDDDJNF@?$AA?5?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@GJLEBCKC@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAw?$AAa?$AAk?$AAe?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|DumpPrcmRegsSnapshot|
	IMPORT	|PrcmDumpSavedRefCounts|
	IMPORT	|OALWakeupLatency_DumpSnapshot|
	IMPORT	|g_PrcmDebugSuspendResume|
	IMPORT	|BSPPowerOn|
	IMPORT	|PrcmSuspend|
	IMPORT	|OEMInterruptEnable|
	IMPORT	|OALPowerWakeSource|
	IMPORT	|OALIntrEnableIrqs|
	IMPORT	|g_pIntr|
	IMPORT	|BSPPowerOff|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|BSPGetGPTPerfDevice|
	IMPORT	|KITLIoctl|
	IMPORT	|OALWatchdogEnable|
	IMPORT	|g_oalWakeSource|

  00000			 AREA	 |.pdata|, PDATA
|$T47214| DCD	|$LN37@OEMPowerOf|
	DCD	0x4000a202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@KDDHMOEO@?$AA?$AN?$AA?6?$AAW?$AAa?$AAk?$AAe?$AA?5?$AAd?$AAu?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "W", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, " "
	DCB	0x0, "d", 0x0, "u", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "S", 0x0, "Y", 0x0, "S", 0x0, "I", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@GGDDDJNF@?$AA?5?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, " ", 0x0, "S", 0x0, "Y", 0x0, "S", 0x0, "I", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@GJLEBCKC@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAw?$AAa?$AAk?$AAe?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "w", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, " ", 0x0, "s"
	DCB	0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPowerOff| PROC

; 103  : {

  00000		 |$LN37@OEMPowerOf|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M47211|

; 104  :     DWORD i;
; 105  :     UINT32 sysIntr;
; 106  :     UINT intr[3];
; 107  :     BOOL bPowerOn;
; 108  : 
; 109  :     // UNDONE: verify if this is still necessary
; 110  :     // Disable hardware watchdog
; 111  :     OALWatchdogEnable(FALSE);

  00008	e3a00000	 mov         r0, #0
  0000c	eb000000	 bl          OALWatchdogEnable

; 112  :     
; 113  :     // Make sure that KITL is powered off
; 114  :     bPowerOn = FALSE;
; 115  :     KITLIoctl(IOCTL_KITL_POWER_CALL, &bPowerOn, sizeof(bPowerOn), NULL, 0, NULL);    

  00010	e59f0264	 ldr         r0, [pc, #0x264]
  00014	e3a03000	 mov         r3, #0
  00018	e58d3008	 str         r3, [sp, #8]
  0001c	e3a0a000	 mov         r10, #0
  00020	e3a03000	 mov         r3, #0
  00024	e3a02004	 mov         r2, #4
  00028	e28d1008	 add         r1, sp, #8
  0002c	e58da004	 str         r10, [sp, #4]
  00030	e58da000	 str         r10, [sp]
  00034	eb000000	 bl          KITLIoctl

; 116  : 
; 117  :     // Disable GPTimer2 (used for high perf/monte carlo profiling)
; 118  :     EnableDeviceClocks(BSPGetGPTPerfDevice(), FALSE);

  00038	eb000000	 bl          BSPGetGPTPerfDevice
  0003c	e3a01000	 mov         r1, #0
  00040	eb000000	 bl          EnableDeviceClocks

; 119  : 
; 120  :     // Give chance to do board specific stuff
; 121  :     BSPPowerOff();

  00044	eb000000	 bl          BSPPowerOff

; 122  : 
; 123  :     //----------------------------------------------
; 124  :     // capture all enabled interrupts and disable interrupts
; 125  :     intr[0] = INREG32(&g_pIntr->pICLRegs->INTC_MIR0);

  00048	e59f6234	 ldr         r6, [pc, #0x234]

; 126  :     intr[1] = INREG32(&g_pIntr->pICLRegs->INTC_MIR1);
; 127  :     intr[2] = INREG32(&g_pIntr->pICLRegs->INTC_MIR2);
; 128  : 
; 129  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET0, OMAP_MPUIC_MASKALL);

  0004c	e3e02000	 mvn         r2, #0

; 130  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET1, OMAP_MPUIC_MASKALL);
; 131  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET2, OMAP_MPUIC_MASKALL);
; 132  : 
; 133  :     //----------------------------------------------
; 134  :     // Context Save/Restore       
; 135  : 	// Save state then mask all GPIO interrupts
; 136  : 	for (i=0; i<g_pIntr->nbGpioBank; i++)

  00050	e3a05000	 mov         r5, #0
  00054	e5963000	 ldr         r3, [r6]
  00058	e5933000	 ldr         r3, [r3]
  0005c	e5937084	 ldr         r7, [r3, #0x84]
  00060	e59380a4	 ldr         r8, [r3, #0xA4]
  00064	e59390c4	 ldr         r9, [r3, #0xC4]
  00068	e583208c	 str         r2, [r3, #0x8C]
  0006c	e5963000	 ldr         r3, [r6]
  00070	e5933000	 ldr         r3, [r3]
  00074	e58320ac	 str         r2, [r3, #0xAC]
  00078	e5963000	 ldr         r3, [r6]
  0007c	e5933000	 ldr         r3, [r3]
  00080	e58320cc	 str         r2, [r3, #0xCC]
  00084	e5962000	 ldr         r2, [r6]
  00088	e5923004	 ldr         r3, [r2, #4]
  0008c	e3530000	 cmp         r3, #0
  00090	9a000013	 bls         |$LN18@OEMPowerOf|

; 104  :     DWORD i;
; 105  :     UINT32 sysIntr;
; 106  :     UINT intr[3];
; 107  :     BOOL bPowerOn;
; 108  : 
; 109  :     // UNDONE: verify if this is still necessary
; 110  :     // Disable hardware watchdog
; 111  :     OALWatchdogEnable(FALSE);

  00094	e3a04000	 mov         r4, #0
  00098		 |$LL20@OEMPowerOf|

; 130  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET1, OMAP_MPUIC_MASKALL);
; 131  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET2, OMAP_MPUIC_MASKALL);
; 132  : 
; 133  :     //----------------------------------------------
; 134  :     // Context Save/Restore       
; 135  : 	// Save state then mask all GPIO interrupts
; 136  : 	for (i=0; i<g_pIntr->nbGpioBank; i++)

  00098	e5923008	 ldr         r3, [r2, #8]

; 137  :     {
; 138  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];
; 139  : 
; 140  : 		// Save current state
; 141  : 		pCurrGpioCtxt->restoreCtxt.IRQENABLE1 = INREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1);
; 142  : 		pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE = INREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE);
; 143  : 
; 144  : 		// Disable all GPIO interrupts in the bank
; 145  :         OUTREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1, 0);
; 146  :         OUTREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE, 0);
; 147  : 
; 148  :         OALIntrEnableIrqs(1,&pCurrGpioCtxt->bank_irq);

  0009c	e3a00001	 mov         r0, #1
  000a0	e084e003	 add         lr, r4, r3
  000a4	e59e200c	 ldr         r2, [lr, #0xC]
  000a8	e28e1008	 add         r1, lr, #8
  000ac	e592301c	 ldr         r3, [r2, #0x1C]
  000b0	e58e3014	 str         r3, [lr, #0x14]
  000b4	e5923020	 ldr         r3, [r2, #0x20]
  000b8	e58e3018	 str         r3, [lr, #0x18]
  000bc	e582a01c	 str         r10, [r2, #0x1C]
  000c0	e59e300c	 ldr         r3, [lr, #0xC]
  000c4	e583a020	 str         r10, [r3, #0x20]
  000c8	eb000000	 bl          OALIntrEnableIrqs
  000cc	e5962000	 ldr         r2, [r6]
  000d0	e2855001	 add         r5, r5, #1
  000d4	e2844020	 add         r4, r4, #0x20
  000d8	e5923004	 ldr         r3, [r2, #4]
  000dc	e1550003	 cmp         r5, r3
  000e0	3affffec	 bcc         |$LL20@OEMPowerOf|
  000e4		 |$LN18@OEMPowerOf|

; 149  : 	}
; 150  : 
; 151  : /*
; 152  :     //----------------------------------------------
; 153  :     // Clear all enabled IO PAD wakeups for GPIOs
; 154  :     for (i = 0; i < g_pIntr->nbGpioBank; ++i) 
; 155  :         {
; 156  :         irq = g_pIntr->pGpioCtxt[i].irq_start;
; 157  :         mask = wkup[i];
; 158  :         while (mask != 0)
; 159  :             {
; 160  :             // If a GPIO was wakeup enabled, then clear the wakeup
; 161  :             if (mask & 0x1)
; 162  :                 {
; 163  :                 OEMEnableIOPadWakeup((irq - IRQ_GPIO_0), FALSE);
; 164  :                 }
; 165  :             
; 166  :             irq++;
; 167  :             mask >>= 1;    
; 168  :             }
; 169  :         }
; 170  : */
; 171  : 
; 172  :     //----------------------------------------------
; 173  :     // Enable wake sources interrupts
; 174  :     for (sysIntr = SYSINTR_DEVICES; sysIntr < SYSINTR_MAXIMUM; sysIntr++)

  000e4	e3a04008	 mov         r4, #8
  000e8		 |$LL17@OEMPowerOf|

; 175  :         {
; 176  :         // Skip if sysIntr isn't allowed as wake source
; 177  :         if (!OALPowerWakeSource(sysIntr)) 

  000e8	e1a00004	 mov         r0, r4
  000ec	eb000000	 bl          OALPowerWakeSource
  000f0	e3500000	 cmp         r0, #0

; 178  : 		    continue;
; 179  : 
; 180  :         // Enable it as interrupt
; 181  :         OEMInterruptEnable(sysIntr, NULL, 0);

  000f4	13a02000	 movne       r2, #0
  000f8	13a01000	 movne       r1, #0
  000fc	11a00004	 movne       r0, r4
  00100	1b000000	 blne        OEMInterruptEnable
  00104	e2844001	 add         r4, r4, #1
  00108	e3540048	 cmp         r4, #0x48
  0010c	3afffff5	 bcc         |$LL17@OEMPowerOf|

; 182  :         }
; 183  : 
; 184  :     // enter full retention
; 185  :     PrcmSuspend();

  00110	eb000000	 bl          PrcmSuspend

; 186  :     
; 187  :     //----------------------------------------------
; 188  :     // Find wakeup source
; 189  :     for (sysIntr = SYSINTR_DEVICES; sysIntr < SYSINTR_MAXIMUM; sysIntr++)

  00114	e59f5164	 ldr         r5, [pc, #0x164]
  00118	e3a04008	 mov         r4, #8
  0011c		 |$LL13@OEMPowerOf|

; 190  :         {            
; 191  :         // Skip if sysIntr isn't allowed as wake source
; 192  :         if (!OALPowerWakeSource(sysIntr)) 

  0011c	e1a00004	 mov         r0, r4
  00120	eb000000	 bl          OALPowerWakeSource
  00124	e3500000	 cmp         r0, #0
  00128	0a000003	 beq         |$LN12@OEMPowerOf|

; 193  : 		    continue;
; 194  : 
; 195  :         // When this sysIntr is pending we find wake source
; 196  :         if (OEMInterruptPending(sysIntr))

  0012c	e1a00004	 mov         r0, r4
  00130	eb000000	 bl          OEMInterruptPending
  00134	e3500000	 cmp         r0, #0
  00138	1a000003	 bne         |$LN28@OEMPowerOf|
  0013c		 |$LN12@OEMPowerOf|

; 186  :     
; 187  :     //----------------------------------------------
; 188  :     // Find wakeup source
; 189  :     for (sysIntr = SYSINTR_DEVICES; sysIntr < SYSINTR_MAXIMUM; sysIntr++)

  0013c	e2844001	 add         r4, r4, #1
  00140	e3540048	 cmp         r4, #0x48
  00144	3afffff4	 bcc         |$LL13@OEMPowerOf|
  00148	ea000000	 b           |$LN34@OEMPowerOf|
  0014c		 |$LN28@OEMPowerOf|

; 197  :             {
; 198  :             g_oalWakeSource = sysIntr;

  0014c	e5854000	 str         r4, [r5]
  00150		 |$LN34@OEMPowerOf|

; 199  :             break;
; 200  :             }
; 201  :         }
; 202  :   
; 203  :     //----------------------------------------------
; 204  :     // Context Save/Restore
; 205  :     // Put GPIO interrupt state back to the way it was before suspend
; 206  :     for (i=0; i<g_pIntr->nbGpioBank; i++)

  00150	e5962000	 ldr         r2, [r6]
  00154	e3a0e000	 mov         lr, #0
  00158	e5923004	 ldr         r3, [r2, #4]
  0015c	e3530000	 cmp         r3, #0
  00160	9a00000e	 bls         |$LN6@OEMPowerOf|
  00164	e3a00000	 mov         r0, #0
  00168		 |$LL8@OEMPowerOf|
  00168	e5923008	 ldr         r3, [r2, #8]
  0016c	e28ee001	 add         lr, lr, #1
  00170	e0801003	 add         r1, r0, r3

; 207  :     {
; 208  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];		
; 209  : 
; 210  :         // Write registers with the previously saved values
; 211  :         OUTREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1, pCurrGpioCtxt->restoreCtxt.IRQENABLE1);

  00174	e591200c	 ldr         r2, [r1, #0xC]
  00178	e5913014	 ldr         r3, [r1, #0x14]
  0017c	e2800020	 add         r0, r0, #0x20
  00180	e582301c	 str         r3, [r2, #0x1C]

; 212  :         OUTREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE, pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE);

  00184	e591200c	 ldr         r2, [r1, #0xC]
  00188	e5913018	 ldr         r3, [r1, #0x18]
  0018c	e5823020	 str         r3, [r2, #0x20]
  00190	e5962000	 ldr         r2, [r6]
  00194	e5923004	 ldr         r3, [r2, #4]
  00198	e15e0003	 cmp         lr, r3
  0019c	3afffff1	 bcc         |$LL8@OEMPowerOf|
  001a0		 |$LN6@OEMPowerOf|

; 213  : 
; 214  :     }
; 215  : 
; 216  : /*
; 217  :     //-------------------------------------------------------
; 218  :     // Enable all previously enabled IO PAD wakeups for GPIOs
; 219  :     for (i = 0; i < g_pIntr->nbGpioBank; ++i) 
; 220  :         {
; 221  :         irq = g_pIntr->pGpioCtxt[i].irq_start;
; 222  :         mask = wkup[i];
; 223  :         while (mask != 0)
; 224  :             {
; 225  :             // If a GPIO was wakeup enabled, then clear the wakeup
; 226  :             if (mask & 0x1)
; 227  :                 {
; 228  :                 OEMEnableIOPadWakeup((irq - IRQ_GPIO_0), TRUE);
; 229  :                 }
; 230  :             
; 231  :             irq++;
; 232  :             mask >z>= 1;    
; 233  :             }
; 234  :         }
; 235  : */
; 236  : 
; 237  :     //----------------------------------------------
; 238  :     // Re-enable interrupts    
; 239  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR0, ~intr[0]);

  001a0	e5922000	 ldr         r2, [r2]
  001a4	e1e03007	 mvn         r3, r7

; 240  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR1, ~intr[1]);

  001a8	e1e01008	 mvn         r1, r8
  001ac	e5823088	 str         r3, [r2, #0x88]
  001b0	e5963000	 ldr         r3, [r6]

; 241  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR2, ~intr[2]);  

  001b4	e1e02009	 mvn         r2, r9
  001b8	e5933000	 ldr         r3, [r3]
  001bc	e58310a8	 str         r1, [r3, #0xA8]
  001c0	e5963000	 ldr         r3, [r6]
  001c4	e5933000	 ldr         r3, [r3]
  001c8	e58320c8	 str         r2, [r3, #0xC8]

; 242  :     
; 243  :     //----------------------------------------------
; 244  :     // Do board specific stuff    
; 245  :     BSPPowerOn();    

  001cc	eb000000	 bl          BSPPowerOn

; 246  : 
; 247  :     // Enable GPTimer (used for high perf/monte carlo profiling)
; 248  :     EnableDeviceClocks(BSPGetGPTPerfDevice(), TRUE);

  001d0	eb000000	 bl          BSPGetGPTPerfDevice
  001d4	e3a01001	 mov         r1, #1
  001d8	eb000000	 bl          EnableDeviceClocks

; 249  : 
; 250  :     // Reinitialize KITL
; 251  :     bPowerOn = TRUE;
; 252  :     KITLIoctl(IOCTL_KITL_POWER_CALL, &bPowerOn, sizeof(bPowerOn), NULL, 0, NULL);    

  001dc	e59f0098	 ldr         r0, [pc, #0x98]
  001e0	e3a03001	 mov         r3, #1
  001e4	e58d3008	 str         r3, [sp, #8]
  001e8	e3a03000	 mov         r3, #0
  001ec	e3a02004	 mov         r2, #4
  001f0	e28d1008	 add         r1, sp, #8
  001f4	e58da004	 str         r10, [sp, #4]
  001f8	e58da000	 str         r10, [sp]
  001fc	eb000000	 bl          KITLIoctl

; 253  :     
; 254  :     // Enable hardware watchdog
; 255  :     OALWatchdogEnable(TRUE);

  00200	e3a00001	 mov         r0, #1
  00204	eb000000	 bl          OALWatchdogEnable

; 256  : 	
; 257  : #ifndef SHIP_BUILD
; 258  :     if (g_PrcmDebugSuspendResume)

  00208	e59f3068	 ldr         r3, [pc, #0x68]
  0020c	e5933000	 ldr         r3, [r3]
  00210	e3530000	 cmp         r3, #0
  00214	0a000011	 beq         |$LN5@OEMPowerOf|

; 259  : 	{
; 260  :         OALMSG(1, (L"Enable wake sources:\r\n"));

  00218	e59f0054	 ldr         r0, [pc, #0x54]
  0021c	eb000000	 bl          NKDbgPrintfW

; 261  :         for (sysIntr = SYSINTR_FIRMWARE; sysIntr < SYSINTR_MAXIMUM; sysIntr++)

  00220	e3a04010	 mov         r4, #0x10
  00224		 |$LL4@OEMPowerOf|

; 262  :         {
; 263  :             if (OALPowerWakeSource(sysIntr)) 

  00224	e1a00004	 mov         r0, r4
  00228	eb000000	 bl          OALPowerWakeSource
  0022c	e3500000	 cmp         r0, #0

; 264  :                 OALMSG(1, (L"  SYSINTR %d\r\n", sysIntr));

  00230	159f0038	 ldrne       r0, [pc, #0x38]
  00234	11a01004	 movne       r1, r4
  00238	1b000000	 blne        NKDbgPrintfW
  0023c	e2844001	 add         r4, r4, #1
  00240	e3540048	 cmp         r4, #0x48
  00244	3afffff6	 bcc         |$LL4@OEMPowerOf|

; 265  :         }
; 266  : 
; 267  :     	OALMSG(1, (L"\r\nWake due to SYSINTR %d\r\n", g_oalWakeSource));

  00248	e5951000	 ldr         r1, [r5]
  0024c	e59f0018	 ldr         r0, [pc, #0x18]
  00250	eb000000	 bl          NKDbgPrintfW

; 268  :         OALWakeupLatency_DumpSnapshot();

  00254	eb000000	 bl          OALWakeupLatency_DumpSnapshot

; 269  :         PrcmDumpSavedRefCounts();

  00258	eb000000	 bl          PrcmDumpSavedRefCounts

; 270  :         DumpPrcmRegsSnapshot();

  0025c	eb000000	 bl          DumpPrcmRegsSnapshot
  00260		 |$LN5@OEMPowerOf|

; 271  :     }
; 272  : #endif
; 273  : }

  00260	e28dd00c	 add         sp, sp, #0xC
  00264	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00268	e12fff1e	 bx          lr
  0026c		 |$LN38@OEMPowerOf|
  0026c		 |$LN39@OEMPowerOf|
  0026c	00000000	 DCD         |??_C@_1DG@KDDHMOEO@?$AA?$AN?$AA?6?$AAW?$AAa?$AAk?$AAe?$AA?5?$AAd?$AAu?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00270		 |$LN40@OEMPowerOf|
  00270	00000000	 DCD         |??_C@_1BO@GGDDDJNF@?$AA?5?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00274		 |$LN41@OEMPowerOf|
  00274	00000000	 DCD         |??_C@_1CO@GJLEBCKC@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAw?$AAa?$AAk?$AAe?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  00278		 |$LN42@OEMPowerOf|
  00278	00000000	 DCD         |g_PrcmDebugSuspendResume|
  0027c		 |$LN43@OEMPowerOf|
  0027c	01010144	 DCD         0x1010144
  00280		 |$LN44@OEMPowerOf|
  00280	00000000	 DCD         |g_oalWakeSource|
  00284		 |$LN45@OEMPowerOf|
  00284	00000000	 DCD         |g_pIntr|
  00288		 |$M47212|

			 ENDP  ; |OEMPowerOff|

	END
