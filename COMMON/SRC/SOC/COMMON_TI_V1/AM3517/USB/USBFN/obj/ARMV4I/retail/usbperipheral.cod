; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\USB\USBFN\usbperipheral.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|ChipCfgLock|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbfn\usbperipheral.c

  00000			 AREA	 |.pdata|, PDATA
|$T46946| DCD	|$LN5@ChipCfgLoc|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ChipCfgLock| PROC

; 44   : {

  00000		 |$LN5@ChipCfgLoc|
  00000		 |$M46943|

; 45   : 	UNREFERENCED_PARAMETER(pSysConfRegs);
; 46   : 	UNREFERENCED_PARAMETER(lock);
; 47   : 
; 48   :     // Not available on AM3517
; 49   : }

  00000	e12fff1e	 bx          lr
  00004		 |$M46944|

			 ENDP  ; |ChipCfgLock|


  00000			 AREA	 |.pdata|, PDATA
|$T46968| DCD	|$LN18@UsbPhyPowe|
	DCD	0x40002201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UsbPhyPowerCtrl| PROC

; 66   : {

  00000		 |$LN18@UsbPhyPowe|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M46965|

; 67   :     OMAP_SYSC_GENERAL_REGS *pSysConfRegs = pPddContext->pSysConfRegs;

  00004	e5903028	 ldr         r3, [r0, #0x28]
  00008	e1b04003	 movs        r4, r3

; 68   : 
; 69   :     /* start the on-chip PHY and its PLL */
; 70   :     if (pSysConfRegs != NULL)

  0000c	0a00001a	 beq         |$LN2@UsbPhyPowe|

; 71   :     {
; 72   :         UINT32 nPhyCtl = INREG32(&pSysConfRegs->CONTROL_DEVCONF2);

  00010	e594e310	 ldr         lr, [r4, #0x310]

; 73   : 
; 74   :         if (enable == TRUE)

  00014	e3510001	 cmp         r1, #1
  00018	1a000011	 bne         |$LN5@UsbPhyPowe|

; 75   :         {
; 76   :             // Unlock USBPHY_CTL reg
; 77   :             ChipCfgLock(pSysConfRegs, FALSE);
; 78   : 
; 79   : 			MASKREG32(&pSysConfRegs->CONTROL_DEVCONF2, DEVCONF2_USBOTG_REFFREQ, DEVCONF2_USBOTG_REFFREQ_13MHZ);

  0001c	e5943310	 ldr         r3, [r4, #0x310]

; 80   : 
; 81   :             // Take Phy out of reset
; 82   :             nPhyCtl &= ~(DEVCONF2_USBOTG_PHY_RESET);
; 83   :             OUTREG32(&pSysConfRegs->CONTROL_DEVCONF2, nPhyCtl);

  00020	e59f205c	 ldr         r2, [pc, #0x5C]
  00024	e3ce0010	 bic         r0, lr, #0x10
  00028	e3c33c0f	 bic         r3, r3, #0xF, 24
  0002c	e3a0ec36	 mov         lr, #0x36, 24
  00030	e3833c06	 orr         r3, r3, #6, 24
  00034	e0001002	 and         r1, r0, r2

; 84   : 
; 85   :             // Start on-chip PHY and PLL's
; 86   :             nPhyCtl |= (DEVCONF2_USBOTG_PHY_PLLON     | 
; 87   :                         DEVCONF2_USBOTG_SESSENDEN     |
; 88   :                         DEVCONF2_USBOTG_VBUSDETECTEN  |
; 89   : 						DEVCONF2_USBOTG_REFFREQ_13MHZ |
; 90   :                         DEVCONF2_USBOTG_DATAPOLARITY  );

  00038	e38e2022	 orr         r2, lr, #0x22
  0003c	e5843310	 str         r3, [r4, #0x310]
  00040	e1813002	 orr         r3, r1, r2
  00044	e5840310	 str         r0, [r4, #0x310]

; 91   :             nPhyCtl &= ~(DEVCONF2_USBOTG_POWERDOWNOTG |
; 92   : 						 DEVCONF2_USBPHY_GPIO_MODE	  |
; 93   : 						 DEVCONF2_USBOTG_OTGMODE	  |
; 94   :                          DEVCONF2_USBOTG_PHY_PD       );
; 95   : 
; 96   :             OUTREG32(&pSysConfRegs->CONTROL_DEVCONF2, nPhyCtl);

  00048	e5843310	 str         r3, [r4, #0x310]
  0004c		 |$LL4@UsbPhyPowe|

; 97   :             //Sleep(1);
; 98   : 
; 99   :             // wait until ready
; 100  :             while ((INREG32(&pSysConfRegs->CONTROL_DEVCONF2) & DEVCONF2_USBOTG_PWR_CLKGOOD) != DEVCONF2_USBOTG_PWR_CLKGOOD)

  0004c	e5943310	 ldr         r3, [r4, #0x310]
  00050	e2033080	 and         r3, r3, #0x80
  00054	e3530080	 cmp         r3, #0x80
  00058	1afffffb	 bne         |$LL4@UsbPhyPowe|

; 120  :         }
; 121  : 
; 122  :         // Lock USBPHY_CTL reg
; 123  :         ChipCfgLock(pSysConfRegs, TRUE);
; 124  :     }
; 125  : 
; 126  :     return ;
; 127  : }

  0005c	e8bd4010	 ldmia       sp!, {r4, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN5@UsbPhyPowe|

; 101  :             {
; 102  :                 //Sleep(20);
; 103  :             }
; 104  :         }
; 105  :         else
; 106  :         {
; 107  :             // Unlock USBPHY_CTL reg
; 108  :             ChipCfgLock(pSysConfRegs, FALSE);
; 109  : 
; 110  :             // Only power down the USB2.0 PHY if USB1.1 PHY not in use
; 111  :             if (!pPddContext->fUSB11Enabled)

  00064	e5903260	 ldr         r3, [r0, #0x260]
  00068	e3530000	 cmp         r3, #0

; 112  :             {
; 113  :                 nPhyCtl |= DEVCONF2_USBOTG_PHY_PD;

  0006c	038ee008	 orreq       lr, lr, #8
  00070	e3ce3020	 bic         r3, lr, #0x20

; 114  :             }
; 115  : 
; 116  :             // Power down the OTG
; 117  :             nPhyCtl |= DEVCONF2_USBOTG_POWERDOWNOTG;

  00074	e3833004	 orr         r3, r3, #4

; 118  : 			nPhyCtl &= ~DEVCONF2_USBOTG_PHY_PLLON;
; 119  :             OUTREG32(&pSysConfRegs->CONTROL_DEVCONF2, nPhyCtl);

  00078	e5843310	 str         r3, [r4, #0x310]
  0007c		 |$LN2@UsbPhyPowe|

; 120  :         }
; 121  : 
; 122  :         // Lock USBPHY_CTL reg
; 123  :         ChipCfgLock(pSysConfRegs, TRUE);
; 124  :     }
; 125  : 
; 126  :     return ;
; 127  : }

  0007c	e8bd4010	 ldmia       sp!, {r4, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN19@UsbPhyPowe|
  00084		 |$LN20@UsbPhyPowe|
  00084	ff7f3ff3	 DCD         0xff7f3ff3
  00088		 |$M46966|

			 ENDP  ; |UsbPhyPowerCtrl|

	EXPORT	|DumpUsbRegisters|

  00000			 AREA	 |.pdata|, PDATA
|$T46977| DCD	|$LN5@DumpUsbReg|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DumpUsbRegisters| PROC

; 144  : {

  00000		 |$LN5@DumpUsbReg|
  00000		 |$M46974|

; 145  : 	UNREFERENCED_PARAMETER(pPdd);
; 146  : 
; 147  :     return;
; 148  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M46975|

			 ENDP  ; |DumpUsbRegisters|

	EXPORT	|HandleRxEndPoint|
	IMPORT	|ContinueRxTransfer|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T46992| DCD	|$LN12@HandleRxEn|
	DCD	0x40003a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HandleRxEndPoint| PROC

; 169  : {

  00000		 |$LN12@HandleRxEn|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M46989|
  00008	e1a07001	 mov         r7, r1
  0000c	e1a05000	 mov         r5, r0

; 170  :     CSL_UsbRegs *pBase = pPddContext->pUsbdRegs;
; 171  :     UsbFnEp  *pEP      = &pPddContext->ep[endPoint];

  00010	e0673207	 rsb         r3, r7, r7, lsl #4

; 172  :     UINT16 epCsrVal    = 0;
; 173  :     BOOL reportPkt     = FALSE;
; 174  :     DWORD rc           = ERROR_SUCCESS;
; 175  :     USB_DEVICE_REQUEST udr;
; 176  : 
; 177  :     LOCK_ENDPOINT (pPddContext);

  00014	e595401c	 ldr         r4, [r5, #0x1C]
  00018	e2850e27	 add         r0, r5, #0x27, 28
  0001c	e0856103	 add         r6, r5, r3, lsl #2
  00020	e3a08000	 mov         r8, #0
  00024	eb000000	 bl          EnterCriticalSection

; 178  : 
; 179  :     /* Read the EP Status and Count Registers */
; 180  :     epCsrVal = pBase->EPCSR[ endPoint ].PERI_RXCSR;

  00028	e0843207	 add         r3, r4, r7, lsl #4
  0002c	e2831c05	 add         r1, r3, #5, 24
  00030	e1d120b6	 ldrh        r2, [r1, #6]

; 181  : 
; 182  :     PRINTMSG(FALSE, /*TRUE, */
; 183  :              (L"EP %u RXSCR 0x%08x\r\n",
; 184  :               endPoint, epCsrVal));
; 185  : 
; 186  :     /* Check if the Host has sent a Stall on this Ep */
; 187  :     if ((epCsrVal & MGC_M_RXCSR_P_SENTSTALL) != 0)

  00034	e3120040	 tst         r2, #0x40
  00038	0a00000f	 beq         |$LN7@HandleRxEn|
  0003c	e3a03cff	 mov         r3, #0xFF, 24

; 188  :     {
; 189  :         /*
; 190  :          * Host has sent a STALL on this EP. Clear it and do not
; 191  :          * overwrite the SENDSTALL BIT.
; 192  :          */
; 193  :         epCsrVal &= ~MGC_M_RXCSR_P_SENTSTALL;

  00040	e38330bf	 orr         r3, r3, #0xBF
  00044	e0023003	 and         r3, r2, r3

; 194  :         pBase->EPCSR[ endPoint ].PERI_RXCSR = epCsrVal;

  00048	e1c130b6	 strh        r3, [r1, #6]

; 195  : 
; 196  :         /*
; 197  :          * Should we inform the MDD about the EndPoint Stall
; 198  :          * by simulating a SETUP Packet of ENDPOINT CLEAR FEATURE
; 199  :          */
; 200  :         udr.bmRequestType = USB_REQUEST_FOR_ENDPOINT;
; 201  :         udr.bRequest = USB_REQUEST_CLEAR_FEATURE;

  0004c	e3a01001	 mov         r1, #1

; 202  :         udr.wValue   = USB_FEATURE_ENDPOINT_STALL;
; 203  :         udr.wIndex   = (BYTE) endPoint;

  00050	e20730ff	 and         r3, r7, #0xFF
  00054	e3a02002	 mov         r2, #2
  00058	e3a00000	 mov         r0, #0

; 204  :         udr.wLength  = 0;

  0005c	e3a0e000	 mov         lr, #0
  00060	e5cd1001	 strb        r1, [sp, #1]
  00064	e1cd30b4	 strh        r3, [sp, #4]
  00068	e5cd2000	 strb        r2, [sp]
  0006c	e1cd00b2	 strh        r0, [sp, #2]
  00070	e1cde0b6	 strh        lr, [sp, #6]

; 205  :         PRINTMSG(ZONE_PDD_RX,
; 206  :                  (_T("Got IN_SENT_STALL EP %u \r\n"), endPoint));
; 207  :         reportPkt    = TRUE;

  00074	e3a08001	 mov         r8, #1
  00078	ea000008	 b           |$LN3@HandleRxEn|
  0007c		 |$LN7@HandleRxEn|

; 208  :     }
; 209  :     else if ((epCsrVal & MGC_M_RXCSR_P_OVERRUN) != 0)

  0007c	e3120004	 tst         r2, #4
  00080	13a03cff	 movne       r3, #0xFF, 24

; 210  :     {
; 211  :         /* Overrun bit set. The Host cannot load data into the
; 212  :          * OUT FIFO. Clear this Bit
; 213  :          */
; 214  :         epCsrVal &= ~MGC_M_RXCSR_P_OVERRUN ;

  00084	138330fb	 orrne       r3, r3, #0xFB
  00088	10023003	 andne       r3, r2, r3

; 215  :         pBase->EPCSR[ endPoint ].PERI_RXCSR = epCsrVal;

  0008c	11c130b6	 strneh      r3, [r1, #6]
  00090	1a000002	 bne         |$LN3@HandleRxEn|

; 216  :         PRINTMSG(ZONE_PDD_RX,
; 217  :                  (L"RxPkt Overrun on EP %u\r\n",
; 218  :                   endPoint));
; 219  :     }
; 220  :     /* Else Check if RxPktRdy is Set */
; 221  :     else if ((epCsrVal & MGC_M_RXCSR_RXPKTRDY) != 0)

  00094	e3120001	 tst         r2, #1

; 222  :     {
; 223  :         /* Move into RX Mode by updating the EP Status Struct */
; 224  :         pEP->epStage = MGC_END0_STAGE_RX;

  00098	13a03003	 movne       r3, #3
  0009c	158632a0	 strne       r3, [r6, #0x2A0]
  000a0		 |$LN3@HandleRxEn|

; 225  :     }
; 226  :     UNLOCK_ENDPOINT(pPddContext);

  000a0	e2850e27	 add         r0, r5, #0x27, 28
  000a4	eb000000	 bl          LeaveCriticalSection

; 227  : 
; 228  :     if (!pEP->usingDma)

  000a8	e59632ac	 ldr         r3, [r6, #0x2AC]
  000ac	e3530000	 cmp         r3, #0

; 229  :         ContinueRxTransfer (pPddContext, endPoint) ;

  000b0	01a01007	 moveq       r1, r7
  000b4	01a00005	 moveq       r0, r5
  000b8	0b000000	 bleq        ContinueRxTransfer

; 230  : 
; 231  :     /* Final Check: If the Host has requested for a Stall on any endPoint,
; 232  :      * we will be informing to the Host through constructing a Clear
; 233  :      * EndPoint feature SETUP Pkt. This needs to be notified to MDD
; 234  :      */
; 235  :     if (reportPkt == TRUE)

  000bc	e3580001	 cmp         r8, #1

; 236  :     {
; 237  :         pPddContext->pfnNotify(pPddContext->pMddContext, UFN_MSG_SETUP_PACKET,
; 238  :                                (DWORD) &udr);

  000c0	05950010	 ldreq       r0, [r5, #0x10]
  000c4	05953014	 ldreq       r3, [r5, #0x14]
  000c8	028d2000	 addeq       r2, sp, #0
  000cc	03a01004	 moveq       r1, #4
  000d0	01a0e00f	 moveq       lr, pc
  000d4	012fff13	 bxeq        r3

; 239  :     }
; 240  :     return (rc);

  000d8	e3a00000	 mov         r0, #0

; 241  : 
; 242  : }

  000dc	e28dd008	 add         sp, sp, #8
  000e0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000e4	e12fff1e	 bx          lr
  000e8		 |$M46990|

			 ENDP  ; |HandleRxEndPoint|

	EXPORT	|HandleTxEndPoint|
	IMPORT	|ContinueTxTransfer|
	IMPORT	|TxDmaFifoComplete|

  00000			 AREA	 |.pdata|, PDATA
|$T47007| DCD	|$LN13@HandleTxEn|
	DCD	0x40004302
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HandleTxEndPoint| PROC

; 263  : {

  00000		 |$LN13@HandleTxEn|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M47004|
  00008	e1a06001	 mov         r6, r1
  0000c	e1a05000	 mov         r5, r0

; 264  :     CSL_UsbRegs  *pBase = pPddContext->pUsbdRegs;
; 265  :     UsbFnEp  *pEP        = &pPddContext->ep[endPoint];

  00010	e0663206	 rsb         r3, r6, r6, lsl #4

; 266  :     USB_DEVICE_REQUEST udr;
; 267  :     UINT16 epCsrVal;
; 268  :     BOOL reportPkt = FALSE;
; 269  :     DWORD rc = ERROR_SUCCESS;
; 270  : 
; 271  :     LOCK_ENDPOINT (pPddContext);

  00014	e595401c	 ldr         r4, [r5, #0x1C]
  00018	e2850e27	 add         r0, r5, #0x27, 28
  0001c	e0857103	 add         r7, r5, r3, lsl #2
  00020	e3a08000	 mov         r8, #0
  00024	eb000000	 bl          EnterCriticalSection

; 272  : 
; 273  :     /* Read the EP Status and Count Registers */
; 274  :     epCsrVal = pBase->EPCSR[ endPoint ].PERI_TXCSR;

  00028	e0843206	 add         r3, r4, r6, lsl #4
  0002c	e2831c05	 add         r1, r3, #5, 24
  00030	e1d120b2	 ldrh        r2, [r1, #2]

; 275  : 
; 276  :     PRINTMSG(FALSE, /*ZONE_SEND ZONE_FUNCTION, TRUE,  */
; 277  :              (L"EP %u: TXCSR 0x%08x\r\n",
; 278  :               endPoint, epCsrVal));
; 279  : 
; 280  :     /* Check if we have received a Stall on this EP */
; 281  :     if ((epCsrVal & MGC_M_TXCSR_P_SENTSTALL) != 0)

  00034	e3120020	 tst         r2, #0x20
  00038	0a00000f	 beq         |$LN8@HandleTxEn|
  0003c	e3a03cff	 mov         r3, #0xFF, 24

; 282  :     {
; 283  :         /* Host has sent a Stall to the Tx EP.Clear it */
; 284  :         epCsrVal &= ~MGC_M_TXCSR_P_SENTSTALL;

  00040	e38330df	 orr         r3, r3, #0xDF
  00044	e0022003	 and         r2, r2, r3

; 285  :         pBase->EPCSR[ endPoint ].PERI_TXCSR = epCsrVal;
; 286  : 
; 287  :         /* Should we inform the MDD about the EndPoint Stall
; 288  :          * by simulating a SETUP Packet of ENDPOINT CLEAR FEATURE
; 289  :          */
; 290  :         udr.bmRequestType = USB_REQUEST_FOR_ENDPOINT;
; 291  :         udr.bRequest = USB_REQUEST_CLEAR_FEATURE;
; 292  :         udr.wValue = USB_FEATURE_ENDPOINT_STALL;
; 293  :         udr.wIndex = USB_ENDPOINT_DIRECTION_MASK | (BYTE) endPoint;

  00048	e20630ff	 and         r3, r6, #0xFF

; 294  :         udr.wLength = 0;

  0004c	e3a08000	 mov         r8, #0
  00050	e3833080	 orr         r3, r3, #0x80
  00054	e1c120b2	 strh        r2, [r1, #2]
  00058	e3a00002	 mov         r0, #2
  0005c	e3a0e001	 mov         lr, #1
  00060	e3a04000	 mov         r4, #0
  00064	e1cd80b6	 strh        r8, [sp, #6]
  00068	e1cd30b4	 strh        r3, [sp, #4]
  0006c	e5cd0000	 strb        r0, [sp]
  00070	e5cde001	 strb        lr, [sp, #1]
  00074	e1cd40b2	 strh        r4, [sp, #2]

; 295  : 
; 296  :         PRINTMSG(ZONE_PDD_TX,
; 297  :                  (_T("Got OUT_SENT_STALL EP %u \r\n"), endPoint));
; 298  :         reportPkt = TRUE;

  00078	e3a08001	 mov         r8, #1
  0007c		 |$LN8@HandleTxEn|

; 299  :     }
; 300  : 
; 301  :     if ((epCsrVal & MGC_M_TXCSR_P_UNDERRUN) != 0)

  0007c	e3120004	 tst         r2, #4
  00080	13a03cff	 movne       r3, #0xFF, 24

; 302  :     {
; 303  :         /* Received next IN token already - just clear the bit */
; 304  :         epCsrVal &= ~( MGC_M_TXCSR_P_UNDERRUN);

  00084	138330fb	 orrne       r3, r3, #0xFB
  00088	10022003	 andne       r2, r2, r3

; 305  :         pBase->EPCSR[ endPoint ].PERI_TXCSR = epCsrVal;

  0008c	11c120b2	 strneh      r2, [r1, #2]

; 306  :     }
; 307  : 
; 308  :     if ((epCsrVal & MGC_M_TXCSR1_FIFONOTEMPTY) != 0)

  00090	e3120002	 tst         r2, #2
  00094	13a03cff	 movne       r3, #0xFF, 24

; 309  :     {
; 310  :         epCsrVal &= ~( MGC_M_TXCSR1_FIFONOTEMPTY);

  00098	138330fd	 orrne       r3, r3, #0xFD
  0009c	10023003	 andne       r3, r2, r3

; 311  :         pBase->EPCSR[ endPoint ].PERI_TXCSR = epCsrVal;
; 312  :     }
; 313  : 
; 314  :     UNLOCK_ENDPOINT(pPddContext);

  000a0	e2850e27	 add         r0, r5, #0x27, 28
  000a4	11c130b2	 strneh      r3, [r1, #2]
  000a8	eb000000	 bl          LeaveCriticalSection

; 315  : 
; 316  :     if (pEP->epStage == MGC_END0_STAGE_TX || pEP->epStage == MGC_END0_STAGE_ACKWAIT)

  000ac	e59732a0	 ldr         r3, [r7, #0x2A0]
  000b0	e3530002	 cmp         r3, #2
  000b4	0a000001	 beq         |$LN4@HandleTxEn|
  000b8	e3530006	 cmp         r3, #6
  000bc	1a000007	 bne         |$LN2@HandleTxEn|
  000c0		 |$LN4@HandleTxEn|

; 317  :     {
; 318  :         // If using DMA we were waiting for the packet to go out of FIFO onto the bus
; 319  :         if (pEP->usingDma)

  000c0	e59732ac	 ldr         r3, [r7, #0x2AC]

; 320  :             TxDmaFifoComplete(pPddContext, endPoint) ;

  000c4	e1a01006	 mov         r1, r6
  000c8	e1a00005	 mov         r0, r5
  000cc	e3530000	 cmp         r3, #0
  000d0	0a000001	 beq         |$LN3@HandleTxEn|
  000d4	eb000000	 bl          TxDmaFifoComplete

; 321  :         else

  000d8	ea000000	 b           |$LN2@HandleTxEn|
  000dc		 |$LN3@HandleTxEn|

; 322  :             ContinueTxTransfer (pPddContext, endPoint) ;

  000dc	eb000000	 bl          ContinueTxTransfer
  000e0		 |$LN2@HandleTxEn|

; 323  :     }
; 324  : 
; 325  :     /* Final Check: If the Host has requested for a Stall on any endPoint,
; 326  :      * we will be informing to the Host through constructing a Clear
; 327  :      * EndPoint feature SETUP Pkt. This needs to be notified to MDD
; 328  :      */
; 329  :     if (reportPkt == TRUE)

  000e0	e3580001	 cmp         r8, #1

; 330  :     {
; 331  :         pPddContext->pfnNotify(pPddContext->pMddContext, UFN_MSG_SETUP_PACKET,
; 332  :                                (DWORD) &udr);

  000e4	05950010	 ldreq       r0, [r5, #0x10]
  000e8	05953014	 ldreq       r3, [r5, #0x14]
  000ec	028d2000	 addeq       r2, sp, #0
  000f0	03a01004	 moveq       r1, #4
  000f4	01a0e00f	 moveq       lr, pc
  000f8	012fff13	 bxeq        r3

; 333  :     }
; 334  : 
; 335  :     return (rc);

  000fc	e3a00000	 mov         r0, #0

; 336  : }

  00100	e28dd008	 add         sp, sp, #8
  00104	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00108	e12fff1e	 bx          lr
  0010c		 |$M47005|

			 ENDP  ; |HandleTxEndPoint|

	EXPORT	|UsbPddEp0IntrHandler|
	EXPORT	|??_C@_1JE@NBAFIMMN@?$AAU?$AAs?$AAb?$AAP?$AAd?$AAd?$AAE?$AAp?$AA0?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@EBDELBLD@?$AAU?$AAs?$AAb?$AAP?$AAd?$AAd?$AAE?$AAp?$AA0?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAS?$AAE@| [ DATA ] ; `string'
	IMPORT	|SetupUsbRequest|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|ContinueEp0TxTransfer|
	IMPORT	|ContinueEp0RxTransfer|
	IMPORT	|Sleep|

  00000			 AREA	 |.pdata|, PDATA
|$T47026| DCD	|$LN39@UsbPddEp0I|
	DCD	0x4000b101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@NBAFIMMN@?$AAU?$AAs?$AAb?$AAP?$AAd?$AAd?$AAE?$AAp?$AA0?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAs@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "E"
	DCB	0x0, "p", 0x0, "0", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, "u", 0x0, "p", 0x0, " "
	DCB	0x0, "p", 0x0, "k", 0x0, "t", 0x0, " ", 0x0, "b", 0x0, "e"
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, "e", 0x0, " ", 0x0, "p"
	DCB	0x0, "r", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "o", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "u"
	DCB	0x0, "p", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m", 0x0, "p"
	DCB	0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, "!"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@EBDELBLD@?$AAU?$AAs?$AAb?$AAP?$AAd?$AAd?$AAE?$AAp?$AA0?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAS?$AAE@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "E"
	DCB	0x0, "p", 0x0, "0", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "S"
	DCB	0x0, "E", 0x0, "T", 0x0, "U", 0x0, "P", 0x0, " ", 0x0, "p"
	DCB	0x0, "k", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UsbPddEp0IntrHandler| PROC

; 354  : {

  00000		 |$LN39@UsbPddEp0I|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M47023|
  00004	e1a05000	 mov         r5, r0

; 355  :     USBFNPDDCONTEXT *pPdd = (USBFNPDDCONTEXT *)pPddContext;
; 356  :     CSL_UsbRegs *pBase = pPdd->pUsbdRegs;
; 357  :     UsbFnEp     *pEP = NULL;
; 358  :     volatile UCHAR *pFifoReg = NULL;
; 359  :     UINT8       epNum = 0;
; 360  :     UINT16      ep0Csr;
; 361  :     UINT16      ep0Count;
; 362  :     BOOL        zeroLenSetup = FALSE;
; 363  :     BOOL        reportPkt = FALSE;
; 364  :     STransfer   *pTransfer;
; 365  : 
; 366  :     LOCK_ENDPOINT(pPdd);

  00008	e595401c	 ldr         r4, [r5, #0x1C]
  0000c	e2850e27	 add         r0, r5, #0x27, 28
  00010	e3a07000	 mov         r7, #0
  00014	eb000000	 bl          EnterCriticalSection

; 367  : 
; 368  :     pEP = &pPdd->ep[epNum];
; 369  :     pTransfer = pEP->pTransfer;
; 370  :     pFifoReg = (UCHAR *)(&pBase->FIFO[ epNum ]);
; 371  : 
; 372  :     ep0Csr = pBase->EPCSR[ epNum ].PERI_TXCSR;

  00018	e2846c05	 add         r6, r4, #5, 24
  0001c	e1d620b2	 ldrh        r2, [r6, #2]

; 373  :     ep0Count = pBase->EPCSR[ epNum ].RXCOUNT;

  00020	e2848c05	 add         r8, r4, #5, 24

; 374  : 
; 375  :     PRINTMSG(ZONE_PDD_EP0, (L"UsbPddEp0IntrHandler: CSR 0x%08x, COUNT %u\r\n",
; 376  :                            ep0Csr, ep0Count));
; 377  : 
; 378  :     /* Check if controller has sent a STALL condition to the host */
; 379  :     if ((ep0Csr & MGC_M_CSR0_P_SENTSTALL) != 0)

  00024	e59542a4	 ldr         r4, [r5, #0x2A4]
  00028	e1d8e0b8	 ldrh        lr, [r8, #8]
  0002c	e3120004	 tst         r2, #4
  00030	0a00000a	 beq         |$LN31@UsbPddEp0I|
  00034	e3a03cff	 mov         r3, #0xFF, 24

; 380  :     {
; 381  :         PRINTMSG(ZONE_PDD_EP0, (L"UsbPddEp0IntrHandler: SENTSTALL indicated\r\n"));
; 382  :         ep0Csr &= ~MGC_EP0_STALL_BITS;

  00038	e38330db	 orr         r3, r3, #0xDB
  0003c	e0023003	 and         r3, r2, r3

; 383  :         pBase->EPCSR[ epNum ].PERI_TXCSR = ep0Csr;
; 384  :         Sleep(1);

  00040	e3a00001	 mov         r0, #1
  00044	e1c630b2	 strh        r3, [r6, #2]
  00048	eb000000	 bl          Sleep

; 385  :         pEP->epStage = MGC_END0_START;

  0004c	e3a03001	 mov         r3, #1
  00050	e58532a0	 str         r3, [r5, #0x2A0]

; 386  :         pPdd->fWaitingForHandshake = FALSE;

  00054	e3a03000	 mov         r3, #0
  00058	e585364c	 str         r3, [r5, #0x64C]

; 387  :         goto done;

  0005c	ea00008a	 b           |$done$46773|
  00060		 |$LN31@UsbPddEp0I|

; 388  :     }
; 389  : 
; 390  :     /* Received a SETUPEND from host? */
; 391  :     if ((ep0Csr & MGC_M_CSR0_P_SETUPEND) != 0)

  00060	e3a0a001	 mov         r10, #1
  00064	e3120010	 tst         r2, #0x10
  00068	0a00001f	 beq         |$LN26@UsbPddEp0I|

; 392  :     {
; 393  :         PRINTMSG(ZONE_PDD_EP0, (L"UsbPddEp0IntrHandler: SETUPEND received\r\n"));
; 394  : 
; 395  :         /* Acknowledge the SETUPEND Request From host  */
; 396  :         ep0Csr &= ~MGC_M_CSR0_P_SETUPEND;
; 397  :         pBase->EPCSR[ epNum ].PERI_TXCSR = MGC_M_CSR0_P_SVDSETUPEND;

  0006c	e3a03080	 mov         r3, #0x80

; 398  :         Sleep(1);

  00070	e3a00001	 mov         r0, #1
  00074	e1c630b2	 strh        r3, [r6, #2]
  00078	eb000000	 bl          Sleep

; 399  : 
; 400  :         /* Now Tell MDD also that the current Transaction is cancelled */
; 401  :         pEP->epStage = MGC_END0_START;

  0007c	e585a2a0	 str         r10, [r5, #0x2A0]

; 402  : 
; 403  :         if (pPdd->fHasQueuedSetupRequest)

  00080	e5953650	 ldr         r3, [r5, #0x650]
  00084	e3530000	 cmp         r3, #0

; 404  :         {
; 405  :             PRINTMSG(ZONE_PDD_EP0, (L"UsbPddEp0IntrHandler: SETUPEND - Cancelling queued setup pkt\r\n"));
; 406  :             pPdd->fHasQueuedSetupRequest = FALSE;

  00088	13a03000	 movne       r3, #0
  0008c	15853650	 strne       r3, [r5, #0x650]
  00090	1a000011	 bne         |$LN27@UsbPddEp0I|

; 407  :         }
; 408  :         else if (pTransfer)

  00094	e3540000	 cmp         r4, #0
  00098	0a00000f	 beq         |$LN27@UsbPddEp0I|
  0009c	e3a03c01	 mov         r3, #1, 24

; 409  :         {
; 410  :             PRINTMSG(ZONE_PDD_EP0, (L"UsbPddEp0IntrHandler: SETUPEND - Cancelling transfer\r\n"));
; 411  :             pTransfer->dwUsbError = UFN_CANCELED_ERROR;

  000a0	e3833001	 orr         r3, r3, #1

; 412  :             pEP->pTransfer = NULL;

  000a4	e3a09000	 mov         r9, #0
  000a8	e5843014	 str         r3, [r4, #0x14]

; 413  :             UNLOCK_ENDPOINT(pPdd);

  000ac	e2850e27	 add         r0, r5, #0x27, 28
  000b0	e58592a4	 str         r9, [r5, #0x2A4]
  000b4	eb000000	 bl          LeaveCriticalSection

; 414  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_TRANSFER_COMPLETE, (DWORD)pTransfer);

  000b8	e5950010	 ldr         r0, [r5, #0x10]
  000bc	e5953014	 ldr         r3, [r5, #0x14]
  000c0	e1a02004	 mov         r2, r4
  000c4	e3a01064	 mov         r1, #0x64
  000c8	e1a0e00f	 mov         lr, pc
  000cc	e12fff13	 bx          r3

; 415  :             LOCK_ENDPOINT(pPdd);

  000d0	e2850e27	 add         r0, r5, #0x27, 28
  000d4	eb000000	 bl          EnterCriticalSection

; 416  :             pPdd->fWaitingForHandshake = FALSE;

  000d8	e585964c	 str         r9, [r5, #0x64C]
  000dc		 |$LN27@UsbPddEp0I|

; 417  :         }
; 418  : 
; 419  :         /* Received new setup? */
; 420  :         ep0Csr = pBase->EPCSR[ epNum ].PERI_TXCSR;

  000dc	e1d630b2	 ldrh        r3, [r6, #2]

; 421  :         ep0Count = pBase->EPCSR[ epNum ].RXCOUNT;

  000e0	e1d8e0b8	 ldrh        lr, [r8, #8]

; 422  :         if (ep0Csr == 0)

  000e4	e1b02003	 movs        r2, r3
  000e8	0a000067	 beq         |$done$46773|
  000ec		 |$LN26@UsbPddEp0I|

; 423  :             goto done;
; 424  :     }
; 425  : 
; 426  :     /* Handle Zero Packet case and mid-transfer states.
; 427  :      * Zero packet case: This can happen when the Host has sent a Zero
; 428  :      * Length packet Interrupt on the EP0. This is typically used when:
; 429  :      * 1. The Host has received the previous data correctly and has
; 430  :      * acknowledged the same.
; 431  :      * 2. There is a huge amount of transfer to be done and we are
; 432  :      * responding back to the Host in chunks. After the transfer of
; 433  :      * each chunk, the host will send an interrupt with zero packet
; 434  :      * length. And the RXPKTRDY or TXPKTRDY will not be set.
; 435  :      */
; 436  :     if (((ep0Csr == 0x00) && (ep0Count == 0x00)) ||
; 437  :         pEP->epStage == MGC_END0_STAGE_STATUSIN ||
; 438  :         pEP->epStage == MGC_END0_STAGE_STATUSOUT ||
; 439  :         pEP->epStage == MGC_END0_STAGE_TX ||
; 440  :         pEP->epStage == MGC_END0_STAGE_RX ||
; 441  :         pEP->epStage == MGC_END0_STAGE_ACKWAIT)

  000ec	e3520000	 cmp         r2, #0
  000f0	1a000001	 bne         |$LN23@UsbPddEp0I|
  000f4	e35e0000	 cmp         lr, #0
  000f8	0a00000a	 beq         |$LN24@UsbPddEp0I|
  000fc		 |$LN23@UsbPddEp0I|
  000fc	e59532a0	 ldr         r3, [r5, #0x2A0]
  00100	e3530004	 cmp         r3, #4
  00104	0a000007	 beq         |$LN24@UsbPddEp0I|
  00108	e3530005	 cmp         r3, #5
  0010c	0a000005	 beq         |$LN24@UsbPddEp0I|
  00110	e3530002	 cmp         r3, #2
  00114	0a000003	 beq         |$LN24@UsbPddEp0I|
  00118	e3530003	 cmp         r3, #3
  0011c	0a000001	 beq         |$LN24@UsbPddEp0I|
  00120	e3530006	 cmp         r3, #6
  00124	1a000024	 bne         |$LN15@UsbPddEp0I|
  00128		 |$LN24@UsbPddEp0I|

; 442  :     {
; 443  :         switch (pEP->epStage)

  00128	e59532a0	 ldr         r3, [r5, #0x2A0]
  0012c	e3530002	 cmp         r3, #2
  00130	0a000017	 beq         |$LN20@UsbPddEp0I|
  00134	da000019	 ble         |$LN21@UsbPddEp0I|
  00138	e3530004	 cmp         r3, #4
  0013c	da000010	 ble         |$LN19@UsbPddEp0I|
  00140	e3530005	 cmp         r3, #5
  00144	0a000012	 beq         |$LN20@UsbPddEp0I|
  00148	e3530006	 cmp         r3, #6
  0014c	1a000013	 bne         |$LN21@UsbPddEp0I|

; 455  :         case MGC_END0_STAGE_ACKWAIT:
; 456  :             /* Can now report zero data setup */
; 457  :             pEP->epStage = MGC_END0_START;
; 458  :             UNLOCK_ENDPOINT(pPdd);

  00150	e2850e27	 add         r0, r5, #0x27, 28
  00154	e585a2a0	 str         r10, [r5, #0x2A0]
  00158	eb000000	 bl          LeaveCriticalSection

; 459  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_SETUP_PACKET, (DWORD)&pPdd->setupRequest);

  0015c	e2853c06	 add         r3, r5, #6, 24
  00160	e5950010	 ldr         r0, [r5, #0x10]
  00164	e5954014	 ldr         r4, [r5, #0x14]
  00168	e2832044	 add         r2, r3, #0x44
  0016c	e3a01004	 mov         r1, #4
  00170	e1a0e00f	 mov         lr, pc
  00174	e12fff14	 bx          r4

; 460  :             LOCK_ENDPOINT(pPdd);

  00178	e2850e27	 add         r0, r5, #0x27, 28
  0017c	eb000000	 bl          EnterCriticalSection

; 461  :             break;

  00180	ea000006	 b           |$LN21@UsbPddEp0I|
  00184		 |$LN19@UsbPddEp0I|

; 449  :             break;
; 450  :         case MGC_END0_STAGE_RX:
; 451  :         case MGC_END0_STAGE_STATUSIN:
; 452  :             /* Continue with the Previous Transfer */
; 453  :             ContinueEp0RxTransfer(pPdd, epNum) ;

  00184	e3a01000	 mov         r1, #0
  00188	e1a00005	 mov         r0, r5
  0018c	eb000000	 bl          ContinueEp0RxTransfer

; 454  :             break;

  00190	ea000002	 b           |$LN21@UsbPddEp0I|
  00194		 |$LN20@UsbPddEp0I|

; 444  :         {
; 445  :         case MGC_END0_STAGE_TX:
; 446  :         case MGC_END0_STAGE_STATUSOUT:
; 447  :             /* Continue with the Previous Transfer */
; 448  :             ContinueEp0TxTransfer(pPdd, epNum);

  00194	e3a01000	 mov         r1, #0
  00198	e1a00005	 mov         r0, r5
  0019c	eb000000	 bl          ContinueEp0TxTransfer
  001a0		 |$LN21@UsbPddEp0I|

; 462  :         default:
; 463  :             PRINTMSG(ZONE_PDD_EP0, (L"UsbPddEp0IntrHandler: ZLP on EP0 stage %d\r\n", pEP->epStage));
; 464  :             break;
; 465  :         }
; 466  :         /* If still in a mid-transfer state then we are done */
; 467  :         if (pEP->epStage != MGC_END0_START)

  001a0	e59532a0	 ldr         r3, [r5, #0x2A0]
  001a4	e3530001	 cmp         r3, #1
  001a8	1a000037	 bne         |$done$46773|

; 468  :             goto done;
; 469  : 
; 470  :         /* Received new setup? */
; 471  :         ep0Csr = pBase->EPCSR[ epNum ].PERI_TXCSR;

  001ac	e1d630b2	 ldrh        r3, [r6, #2]

; 472  :         ep0Count = pBase->EPCSR[ epNum ].RXCOUNT;

  001b0	e1d8e0b8	 ldrh        lr, [r8, #8]

; 473  :         if (ep0Csr == 0)

  001b4	e1b02003	 movs        r2, r3
  001b8	0a000033	 beq         |$done$46773|
  001bc		 |$LN15@UsbPddEp0I|

; 474  :             goto done;
; 475  :     }
; 476  : 
; 477  :     DEBUGCHK(pEP->epStage == MGC_END0_START);
; 478  : 
; 479  :     /* Received new setup packet? */
; 480  :     if ((ep0Csr & MGC_M_CSR0_RXPKTRDY) != 0)

  001bc	e3120001	 tst         r2, #1
  001c0	0a000031	 beq         |$done$46773|

; 481  :     {
; 482  :         if (ep0Count != 8)

  001c4	e35e0008	 cmp         lr, #8
  001c8	0a000003	 beq         |$LN13@UsbPddEp0I|

; 483  :         {
; 484  :             PRINTMSG(ZONE_ERROR, (L"UsbPddEp0IntrHandler: Invalid SETUP pkt len %d\r\n", ep0Count));

  001cc	e59f00ec	 ldr         r0, [pc, #0xEC]
  001d0	e1a0100e	 mov         r1, lr
  001d4	eb000000	 bl          NKDbgPrintfW
  001d8	ea000029	 b           |$LN3@UsbPddEp0I|
  001dc		 |$LN13@UsbPddEp0I|

; 485  :         }
; 486  :         else if (pPdd->fWaitingForHandshake)

  001dc	e595364c	 ldr         r3, [r5, #0x64C]
  001e0	e3530000	 cmp         r3, #0
  001e4	0a000012	 beq         |$LN11@UsbPddEp0I|

; 487  :         {
; 488  :             /* The RNDIS client driver (and probably others) must not be sent a new
; 489  :              * SETUP packet until it calls UfnPdd_SendControlStatusHandshake() for the
; 490  :              * previous setup.  Queue a new setup pkt until this happens.
; 491  :              */
; 492  :             if (pPdd->fHasQueuedSetupRequest)

  001e8	e5953650	 ldr         r3, [r5, #0x650]
  001ec	e3530000	 cmp         r3, #0
  001f0	0a000002	 beq         |$LN10@UsbPddEp0I|

; 493  :             {
; 494  :                 PRINTMSG(ZONE_ERROR, (L"UsbPddEp0IntrHandler: Received setup pkt before previous setup completed!"));

  001f4	e59f00c0	 ldr         r0, [pc, #0xC0]
  001f8	eb000000	 bl          NKDbgPrintfW

; 495  :                 DEBUGCHK(0);
; 496  :                 goto done;

  001fc	ea000022	 b           |$done$46773|
  00200		 |$LN10@UsbPddEp0I|

; 497  :             }
; 498  : 
; 499  :             SetupUsbRequest(pPdd, &pPdd->queuedSetupRequest, epNum, ep0Count);

  00200	e2853c06	 add         r3, r5, #6, 24
  00204	e2831054	 add         r1, r3, #0x54
  00208	e1a0300e	 mov         r3, lr
  0020c	e3a02000	 mov         r2, #0
  00210	e1a00005	 mov         r0, r5
  00214	eb000000	 bl          SetupUsbRequest

; 500  :             pPdd->fHasQueuedSetupRequest = TRUE;
; 501  :             PRINTMSG(ZONE_PDD_EP0, (L"UsbPddEp0IntrHandler: Queuing setup pkt, len %d",
; 502  :                                     pPdd->queuedSetupRequest.wLength));
; 503  : 
; 504  :             /* Complete the setup transfer */
; 505  :             if (pPdd->queuedSetupRequest.wLength == 0)

  00218	e5d5265a	 ldrb        r2, [r5, #0x65A]
  0021c	e5d5365b	 ldrb        r3, [r5, #0x65B]
  00220	e585a650	 str         r10, [r5, #0x650]
  00224	e1923403	 orrs        r3, r2, r3, lsl #8

; 555  :     {
; 556  :         pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_SETUP_PACKET, (DWORD)&pPdd->setupRequest);

  00228	1a000015	 bne         |$LN3@UsbPddEp0I|

; 519  :             {
; 520  :                 /* Zero Data Length SETUP Pkt */
; 521  :                 zeroLenSetup = TRUE;
; 522  :                 pEP->epStage = MGC_END0_STAGE_ACKWAIT;
; 523  :             }
; 524  :             else if ((pPdd->setupRequest.bmRequestType & USB_ENDPOINT_DIRECTION_MASK) != 0)
; 525  :             {
; 526  :                 pEP->epStage = MGC_END0_STAGE_TX;
; 527  :                 reportPkt = TRUE;
; 528  :             }
; 529  :             else
; 530  :             {
; 531  :                 pEP->epStage = MGC_END0_STAGE_RX;
; 532  :                 reportPkt = TRUE;
; 533  :             }
; 534  :         }
; 535  : 
; 536  :         /* Complete the setup transfer */
; 537  :         if (zeroLenSetup)
; 538  :         {
; 539  :             /* Zero Data Length SETUP Pkt - clear PKTRDY and set DATAEND */
; 540  :             pBase->EPCSR[ epNum ].PERI_TXCSR = MGC_M_CSR0_P_SVDRXPKTRDY | MGC_M_CSR0_P_DATAEND;

  0022c	e3a03048	 mov         r3, #0x48

; 541  :         }
; 542  :         else

  00230	ea000014	 b           |$LN35@UsbPddEp0I|
  00234		 |$LN11@UsbPddEp0I|

; 506  :             {
; 507  :                 zeroLenSetup = TRUE;
; 508  :             }
; 509  :         }
; 510  :         else
; 511  :         {
; 512  :             SetupUsbRequest(pPdd, &pPdd->setupRequest, epNum, ep0Count);

  00234	e2853c06	 add         r3, r5, #6, 24
  00238	e2831044	 add         r1, r3, #0x44
  0023c	e1a0300e	 mov         r3, lr
  00240	e3a02000	 mov         r2, #0
  00244	e1a00005	 mov         r0, r5
  00248	eb000000	 bl          SetupUsbRequest

; 513  : 
; 514  :             PRINTMSG(ZONE_PDD_EP0, (L"UsbPddEp0IntrHandler received setup pkt, len %d",
; 515  :                                     pPdd->setupRequest.wLength));
; 516  :             pPdd->fWaitingForHandshake = TRUE;
; 517  : 
; 518  :             if (pPdd->setupRequest.wLength == 0)

  0024c	e5d5264a	 ldrb        r2, [r5, #0x64A]
  00250	e5d5364b	 ldrb        r3, [r5, #0x64B]
  00254	e585a64c	 str         r10, [r5, #0x64C]
  00258	e1923403	 orrs        r3, r2, r3, lsl #8

; 555  :     {
; 556  :         pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_SETUP_PACKET, (DWORD)&pPdd->setupRequest);

  0025c	03a03006	 moveq       r3, #6
  00260	058532a0	 streq       r3, [r5, #0x2A0]
  00264	03a03048	 moveq       r3, #0x48
  00268	0a000006	 beq         |$LN35@UsbPddEp0I|
  0026c	e5d53644	 ldrb        r3, [r5, #0x644]
  00270	e3a07001	 mov         r7, #1
  00274	e3130080	 tst         r3, #0x80
  00278	13a03002	 movne       r3, #2
  0027c	03a03003	 moveq       r3, #3
  00280	e58532a0	 str         r3, [r5, #0x2A0]
  00284		 |$LN3@UsbPddEp0I|

; 543  :         {
; 544  :             /* Clear PKTRDY */
; 545  :             pBase->EPCSR[ epNum ].PERI_TXCSR = MGC_M_CSR0_P_SVDRXPKTRDY;

  00284	e3a03040	 mov         r3, #0x40
  00288		 |$LN35@UsbPddEp0I|
  00288	e1c630b2	 strh        r3, [r6, #2]
  0028c		 |$done$46773|

; 546  :         }
; 547  :     }
; 548  : 
; 549  : done:
; 550  : 
; 551  :     UNLOCK_ENDPOINT(pPdd);

  0028c	e2850e27	 add         r0, r5, #0x27, 28
  00290	eb000000	 bl          LeaveCriticalSection

; 552  : 
; 553  :     /* Report setup pkt to MDD */
; 554  :     if (reportPkt == TRUE)

  00294	e3570001	 cmp         r7, #1

; 555  :     {
; 556  :         pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_SETUP_PACKET, (DWORD)&pPdd->setupRequest);

  00298	02853c06	 addeq       r3, r5, #6, 24
  0029c	05950010	 ldreq       r0, [r5, #0x10]
  002a0	05954014	 ldreq       r4, [r5, #0x14]
  002a4	02832044	 addeq       r2, r3, #0x44
  002a8	03a01004	 moveq       r1, #4
  002ac	01a0e00f	 moveq       lr, pc
  002b0	012fff14	 bxeq        r4

; 557  :     }
; 558  : 
; 559  :     return;
; 560  : }

  002b4	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  002b8	e12fff1e	 bx          lr
  002bc		 |$LN40@UsbPddEp0I|
  002bc		 |$LN41@UsbPddEp0I|
  002bc	00000000	 DCD         |??_C@_1JE@NBAFIMMN@?$AAU?$AAs?$AAb?$AAP?$AAd?$AAd?$AAE?$AAp?$AA0?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAs@|
  002c0		 |$LN42@UsbPddEp0I|
  002c0	00000000	 DCD         |??_C@_1GC@EBDELBLD@?$AAU?$AAs?$AAb?$AAP?$AAd?$AAd?$AAE?$AAp?$AA0?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAS?$AAE@|
  002c4		 |$M47024|

			 ENDP  ; |UsbPddEp0IntrHandler|

	EXPORT	|UsbPddTxRxIntrHandler|

  00000			 AREA	 |.pdata|, PDATA
|$T47047| DCD	|$LN15@UsbPddTxRx|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UsbPddTxRxIntrHandler| PROC

; 583  : {

  00000		 |$LN15@UsbPddTxRx|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47044|
  00004	e1a07001	 mov         r7, r1
  00008	e1a06000	 mov         r6, r0

; 584  :     USBFNPDDCONTEXT *pPdd = (USBFNPDDCONTEXT *)pPddContext;
; 585  : 
; 586  :     PRINTMSG(ZONE_FUNCTION, (L"+UsbPddTxRxIntrHandler TxIntr 0x%04x RxIntr 0x%04x\r\n",
; 587  :                              intrTxReg, intrRxReg));
; 588  : 
; 589  :     /* Handle tx/rx on endpoints; each bit of intrTxReg is an endpoint,
; 590  :      * endpoint 0 first (p35 of the manual) bc is "SPECIAL" treatment;
; 591  :      * WARNING: when operating as device you might start receving traffic
; 592  :      * to ep0 before anything else happens so be ready for it
; 593  :      */
; 594  : 	{
; 595  :         UINT  bShift = 0;
; 596  :         UINT32 reg;
; 597  : 
; 598  :         /* RX on endpoints */
; 599  :         reg = intrRxReg;
; 600  :         bShift = 1;

  0000c	e3a05001	 mov         r5, #1

; 601  :         reg >>= 1;

  00010	e1b040a2	 movs        r4, r2, lsr #1

; 602  :         while (reg != 0)

  00014	0a000007	 beq         |$LN5@UsbPddTxRx|
  00018		 |$LL6@UsbPddTxRx|

; 603  :         {
; 604  :             if (reg & 1)

  00018	e3140001	 tst         r4, #1

; 605  :             {
; 606  :                 /* Working in DeviceMode, Invoke Rx EP Interrupt Handler */
; 607  :                 PRINTMSG(FALSE, /* ZONE_SEND TRUE */
; 608  :                          (L"EP %u RX Handling IntrRxReg 0x%04x\r\n", bShift, intrRxReg));
; 609  :                 HandleRxEndPoint(pPdd, (UINT16)bShift);

  0001c	11a01805	 movne       r1, r5, lsl #16
  00020	11a01821	 movne       r1, r1, lsr #16
  00024	11a00006	 movne       r0, r6
  00028	1b000000	 blne        HandleRxEndPoint

; 610  :             }
; 611  : 
; 612  :             reg >>= 1;

  0002c	e1b040a4	 movs        r4, r4, lsr #1

; 613  :             bShift++;

  00030	e2855001	 add         r5, r5, #1
  00034	1afffff7	 bne         |$LL6@UsbPddTxRx|
  00038		 |$LN5@UsbPddTxRx|

; 614  :         }
; 615  :         /* TX on endpoints */
; 616  :         reg = intrTxReg;
; 617  :         bShift = 1;

  00038	e3a05001	 mov         r5, #1

; 618  :         reg >>= 1;

  0003c	e1b040a7	 movs        r4, r7, lsr #1

; 619  :         while (reg != 0)

  00040	0a000007	 beq         |$LN2@UsbPddTxRx|
  00044		 |$LL3@UsbPddTxRx|

; 620  :         {
; 621  :             if (reg & 1)

  00044	e3140001	 tst         r4, #1

; 622  :             {
; 623  :                 /* Working in DeviceMode, Invoke EP Interrupt Handler */
; 624  :                 PRINTMSG(FALSE, /*ZONE_SEND TRUE, */
; 625  :                          (L"EP %u TX Handling IntrTxReg 0x%04x\r\n", bShift, intrTxReg));
; 626  :                 HandleTxEndPoint(pPdd, (UINT16)bShift);

  00048	11a01805	 movne       r1, r5, lsl #16
  0004c	11a01821	 movne       r1, r1, lsr #16
  00050	11a00006	 movne       r0, r6
  00054	1b000000	 blne        HandleTxEndPoint

; 627  :             }
; 628  :             reg >>= 1;

  00058	e1b040a4	 movs        r4, r4, lsr #1

; 629  :             bShift++;

  0005c	e2855001	 add         r5, r5, #1
  00060	1afffff7	 bne         |$LL3@UsbPddTxRx|
  00064		 |$LN2@UsbPddTxRx|

; 630  :         }
; 631  : 	}
; 632  : 
; 633  :     return;
; 634  : }

  00064	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M47045|

			 ENDP  ; |UsbPddTxRxIntrHandler|

	EXPORT	|HandleUsbCoreInterrupt|
	EXPORT	|??_C@_1BE@DLNBLDGP@?$AA?$CL?$AAR?$AAE?$AAS?$AAU?$AAM?$AAE?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47058| DCD	|$LN14@HandleUsbC|
	DCD	0x40000901

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@DLNBLDGP@?$AA?$CL?$AAR?$AAE?$AAS?$AAU?$AAM?$AAE?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "R", 0x0, "E", 0x0, "S", 0x0, "U", 0x0, "M", 0x0, "E"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HandleUsbCoreInterrupt| PROC

; 656  : {

  00000		 |$LN14@HandleUsbC|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47055|

; 657  :     USBFNPDDCONTEXT *pPdd = (USBFNPDDCONTEXT *)pPddContext;
; 658  : 
; 659  :     PRINTMSG(ZONE_FUNCTION, (L"+UsbPdd_IntrStage0 INTRUSB 0x%04x\r\n",
; 660  :                              intrUsb));
; 661  : 
; 662  :     if (intrUsb & (1 << 8))

  00004	e3110c01	 tst         r1, #1, 24
  00008	1a000002	 bne         |$LN5@HandleUsbC|

; 663  :     {
; 664  :         /* once basic ID sensing behaves, this
; 665  :          * will have work to do
; 666  :          */
; 667  :         DumpUsbRegisters (pPdd);
; 668  :         PRINTMSG(ZONE_PDD_INIT, (L"InterruptThread: DRVVBUS 0x%04x\r\n",
; 669  :                                 ((CSL_UsbRegs *)pPdd->pUsbdRegs)->STATR));
; 670  :     }
; 671  :     else
; 672  :     {
; 673  :         /* As a Device, very little processing for RESUME, however
; 674  :          * as a Host, we need to take up further actions
; 675  :          */
; 676  :         if (intrUsb & MGC_M_INTR_RESUME)

  0000c	e3110002	 tst         r1, #2

; 677  :         {
; 678  :             PRINTMSG(TRUE, /*ZONE_PDD_INIT, */ (L"+RESUME\r\n"));

  00010	159f0008	 ldrne       r0, [pc, #8]
  00014	1b000000	 blne        NKDbgPrintfW
  00018		 |$LN5@HandleUsbC|

; 679  :         }
; 680  :         /* p35 MUSBHDRC manual for the order of the tests */
; 681  :         if (intrUsb & MGC_M_INTR_SESSREQ)
; 682  :         {
; 683  :             PRINTMSG(ZONE_PDD_INIT, (L"+SESSION_REQUEST (HOST_MODE)\r\n"));
; 684  :         }
; 685  :         /* VBUSError is bad, shutdown &  go to error mode and ignore
; 686  :          * the other interrups; p35 MUSBHDRC manual for the order
; 687  :          of the tests */
; 688  :         if (intrUsb & MGC_M_INTR_VBUSERROR)
; 689  :         {
; 690  :             PRINTMSG(ZONE_PDD_INIT, (L"V_BUS ERROR??? stopping host\r\n"));
; 691  :         }
; 692  :         /* connect is valid only when in host mode; ignore it if in device mode;
; 693  :            p35 MUSBHDRC manual for the order of the tests */
; 694  :         if (intrUsb & MGC_M_INTR_CONNECT)
; 695  :         {
; 696  :             PRINTMSG(ZONE_PDD_INIT, (L"RECEIVED CONNECT (goto host mode)\r\n"));
; 697  : 
; 698  :         }
; 699  :         if (intrUsb & MGC_M_INTR_RESET)
; 700  :         {
; 701  :             PRINTMSG(ZONE_PDD_INIT, /*TRUE, */ (L"BUS RESET\r\n"));
; 702  :             /*PRINTMSG(TRUE, (L"+RESUME\r\n"));    */
; 703  :         }
; 704  :         /* As per the Mentor Graphics Documentation, USB Core
; 705  :          * Interrupts like SOF, Disconnect and SUSPEND needs to
; 706  :          * be addressed only after EndPoint Interrupt Processing
; 707  :          */
; 708  :     }
; 709  :     return ;
; 710  : }

  00018	e49de004	 ldr         lr, [sp], #4
  0001c	e12fff1e	 bx          lr
  00020		 |$LN15@HandleUsbC|
  00020		 |$LN16@HandleUsbC|
  00020	00000000	 DCD         |??_C@_1BE@DLNBLDGP@?$AA?$CL?$AAR?$AAE?$AAS?$AAU?$AAM?$AAE?$AA?$AN?$AA?6?$AA?$AA@|
  00024		 |$M47056|

			 ENDP  ; |HandleUsbCoreInterrupt|

	EXPORT	|USBPeripheralInit|
	IMPORT	|USBFNPDD_PowerVBUS|

  00000			 AREA	 |.pdata|, PDATA
|$T47103| DCD	|$LN24@USBPeriphe|
	DCD	0x40002f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |USBPeripheralInit| PROC

; 729  : {

  00000		 |$LN24@USBPeriphe|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47100|
  00004	e1a04000	 mov         r4, r0

; 730  :     CSL_UsbRegs *pUsbRegs                = pPddContext->pUsbdRegs;
; 731  : 	//OMAP_SYSC_GENERAL_REGS *pSysConfRegs = pPddContext->pSysConfRegs;
; 732  : 
; 733  :     PRINTMSG(ZONE_FUNCTION, (L"+USBPeripheralInit\r\n"));
; 734  : 
; 735  :     // Determine if USB 1.1 is in use
; 736  : 	pPddContext->fUSB11Enabled = TRUE; // TODO : find out the corresponding register for AM3517

  00008	e3a03001	 mov         r3, #1

; 737  : 
; 738  :     /* VSbus off */
; 739  :     USBFNPDD_PowerVBUS(FALSE);

  0000c	e594501c	 ldr         r5, [r4, #0x1C]
  00010	e3a00000	 mov         r0, #0
  00014	e5843260	 str         r3, [r4, #0x260]
  00018	eb000000	 bl          USBFNPDD_PowerVBUS

; 740  : 
; 741  :     // Reset USB controller
; 742  :     pUsbRegs->CTRLR |= BIT0;

  0001c	e5953004	 ldr         r3, [r5, #4]
  00020	e3833001	 orr         r3, r3, #1
  00024	e5853004	 str         r3, [r5, #4]
  00028		 |$LL2@USBPeriphe|

; 743  :     while((pUsbRegs->CTRLR & BIT0) != 0);

  00028	e5953004	 ldr         r3, [r5, #4]
  0002c	e3130001	 tst         r3, #1
  00030	1afffffc	 bne         |$LL2@USBPeriphe|

; 744  : 
; 745  :     // Start the on-chip PHY and its PLL
; 746  :     UsbPhyPowerCtrl(pPddContext, TRUE);

  00034	e3a01001	 mov         r1, #1
  00038	e1a00004	 mov         r0, r4
  0003c	eb000000	 bl          UsbPhyPowerCtrl

; 747  : 
; 748  :     // Stop the on-chip PHY and its PLL
; 749  :     UsbPhyPowerCtrl(pPddContext, FALSE);

  00040	e5943028	 ldr         r3, [r4, #0x28]
  00044	e1b01003	 movs        r1, r3
  00048	0a000006	 beq         |$LN6@USBPeriphe|
  0004c	e5943260	 ldr         r3, [r4, #0x260]
  00050	e5912310	 ldr         r2, [r1, #0x310]
  00054	e3530000	 cmp         r3, #0
  00058	03822008	 orreq       r2, r2, #8
  0005c	e3c23020	 bic         r3, r2, #0x20
  00060	e3833004	 orr         r3, r3, #4
  00064	e5813310	 str         r3, [r1, #0x310]
  00068		 |$LN6@USBPeriphe|

; 750  : 
; 751  : #ifndef UFN_DISABLE_HIGH_SPEED
; 752  :     /* Enable high speed */
; 753  :     pUsbRegs->POWER = MGC_M_POWER_HSENAB;

  00068	e3a03020	 mov         r3, #0x20

; 754  : #endif
; 755  : 
; 756  :     // If RNDIS Mode is required, then CTRL BIT 4 needs to be set
; 757  : #ifdef USB_RNDIS_MODE
; 758  :     pUsbRegs->CTRLR |= BIT4;
; 759  : #endif
; 760  : 
; 761  :     /* start the on-chip PHY and its PLL */
; 762  :     UsbPhyPowerCtrl(pPddContext, TRUE);

  0006c	e3a01001	 mov         r1, #1
  00070	e1a00004	 mov         r0, r4
  00074	e5c53401	 strb        r3, [r5, #0x401]
  00078	eb000000	 bl          UsbPhyPowerCtrl

; 763  : 
; 764  :     /* Disable All Interrupts
; 765  :      * NOTE: The USB Controller Definition of MASK Set and Clear
; 766  :      * is different from the conventional meaning. Here MASK SET means
; 767  :      * that the Interrupt is enabled and MASK Clear means Interrupts
; 768  :      * are disabled. Hence do not write into the INTMSKSETR
; 769  :      * Register of the controller during startup initialization
; 770  :      */
; 771  : 
; 772  : 	pUsbRegs->CORE_INTMSKCLRR = USB_CORE_INTR_MASK_ALL ;

  0007c	e3e034fe	 mvn         r3, #0xFE, 8
  00080	e5853054	 str         r3, [r5, #0x54]

; 773  :     pUsbRegs->EP_INTMSKCLRR = USB_EP_INTR_MASK_ALL ;

  00084	e3e03801	 mvn         r3, #1, 16

; 774  :     pUsbRegs->EOIR = 0x00;

  00088	e3a02000	 mov         r2, #0
  0008c	e5853034	 str         r3, [r5, #0x34]
  00090	e5852060	 str         r2, [r5, #0x60]

; 775  : 
; 776  :     /* Configure the Controller UINT BIT First */
; 777  :     pUsbRegs->CTRLR &= ~BIT3;

  00094	e5953004	 ldr         r3, [r5, #4]

; 778  : 
; 779  :     /* INTRUSBE Register Initialization for USB Core Interrupts */
; 780  :     OUTREG8(&pUsbRegs->INTRUSBE, 0xf7);
; 781  :     OUTREG8(&pUsbRegs->TESTMODE, 0);
; 782  : 
; 783  :     /* Clear BIT0 For Operating in Peripheral Mode */
; 784  :     //pUsbRegs->DEVCTL = 0;
; 785  : 
; 786  :     /* Initial Function Address set to zero */
; 787  :     OUTREG8(&pUsbRegs->FADDR, 0);
; 788  : 
; 789  :     /* SOFTCONN set in USBPeripheralStart() */
; 790  : 
; 791  :     PRINTMSG (ZONE_FUNCTION, (_T("Common USB IntrEnable 0x%02x OTG DEVCTL 0x%02x\r\n"),
; 792  :                       pUsbRegs->INTRUSBE,
; 793  :                       pUsbRegs->DEVCTL));
; 794  : 
; 795  :     DumpUsbRegisters(pPddContext);
; 796  : 
; 797  :     PRINTMSG(ZONE_FUNCTION, (L"-USBPeripheralInit\r\n"));
; 798  : 
; 799  :     return (TRUE) ;

  00098	e3a00001	 mov         r0, #1
  0009c	e3c33008	 bic         r3, r3, #8
  000a0	e5853004	 str         r3, [r5, #4]
  000a4	e3a030f7	 mov         r3, #0xF7
  000a8	e5c5340b	 strb        r3, [r5, #0x40B]
  000ac	e5c5240f	 strb        r2, [r5, #0x40F]
  000b0	e5c52400	 strb        r2, [r5, #0x400]

; 800  : }

  000b4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$M47101|

			 ENDP  ; |USBPeripheralInit|

	EXPORT	|USBPeripheralStart|
	EXPORT	|??_C@_1CM@IGDHCANN@?$AA?$CL?$AAU?$AAS?$AAB?$AAP?$AAe?$AAr?$AAi?$AAp?$AAh?$AAe?$AAr?$AAa?$AAl?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47114| DCD	|$LN5@USBPeriphe@2|
	DCD	0x40000b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@IGDHCANN@?$AA?$CL?$AAU?$AAS?$AAB?$AAP?$AAe?$AAr?$AAi?$AAp?$AAh?$AAe?$AAr?$AAa?$AAl?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "i", 0x0, "p", 0x0, "h", 0x0, "e", 0x0, "r", 0x0, "a"
	DCB	0x0, "l", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |USBPeripheralStart| PROC

; 815  : {

  00000		 |$LN5@USBPeriphe@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47111|
  00004	e1a03000	 mov         r3, r0

; 816  :     CSL_UsbRegs *pUsbRegs = pPddContext->pUsbdRegs;
; 817  : 
; 818  :     PRINTMSG(ZONE_FUNCTION, (L"+USBPeripheralStart\r\n"));
; 819  : 	RETAILMSG(TRUE, (L"+USBPeripheralStart\r\n"));

  00008	e59f0018	 ldr         r0, [pc, #0x18]
  0000c	e593401c	 ldr         r4, [r3, #0x1C]
  00010	eb000000	 bl          NKDbgPrintfW

; 820  : 
; 821  :     /* enable and start session */
; 822  : #ifdef UFN_DISABLE_HIGH_SPEED
; 823  :     pUsbRegs->POWER = MGC_M_POWER_SOFTCONN;
; 824  : #else
; 825  :     pUsbRegs->POWER = MGC_M_POWER_SOFTCONN | MGC_M_POWER_HSENAB;

  00014	e3a03060	 mov         r3, #0x60
  00018	e5c43401	 strb        r3, [r4, #0x401]

; 826  : #endif
; 827  : 
; 828  :     PRINTMSG(ZONE_FUNCTION, (L"-USBPeripheralStart\r\n"));
; 829  : 
; 830  :     return (TRUE) ;

  0001c	e3a00001	 mov         r0, #1

; 831  : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$LN6@USBPeriphe@2|
  00028		 |$LN7@USBPeriphe@2|
  00028	00000000	 DCD         |??_C@_1CM@IGDHCANN@?$AA?$CL?$AAU?$AAS?$AAB?$AAP?$AAe?$AAr?$AAi?$AAp?$AAh?$AAe?$AAr?$AAa?$AAl?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0002c		 |$M47112|

			 ENDP  ; |USBPeripheralStart|

	EXPORT	|USBPeripheralDeinit|
	IMPORT	|ReleaseDevicePads|

  00000			 AREA	 |.pdata|, PDATA
|$T47154| DCD	|$LN19@USBPeriphe@3|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |USBPeripheralDeinit| PROC

; 849  : {

  00000		 |$LN19@USBPeriphe@3|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47151|
  00004	e1a04000	 mov         r4, r0

; 850  :     CSL_UsbRegs  *pUsbRegs = pPddContext->pUsbdRegs;
; 851  : 
; 852  :     PRINTMSG(ZONE_FUNCTION, (L"+USBPeripheralDeinit\r\n"));
; 853  : 
; 854  :     /* End the session */
; 855  : #ifdef UFN_DISABLE_HIGH_SPEED
; 856  :     pUsbRegs->POWER = 0;
; 857  : #else
; 858  :     pUsbRegs->POWER = MGC_M_POWER_HSENAB;

  00008	e594301c	 ldr         r3, [r4, #0x1C]
  0000c	e3a02020	 mov         r2, #0x20

; 859  : #endif
; 860  : 
; 861  :     // For Peripheral mode of Operation, Switch OFF the VBUS
; 862  :     USBFNPDD_PowerVBUS(FALSE);

  00010	e3a00000	 mov         r0, #0
  00014	e5c32401	 strb        r2, [r3, #0x401]
  00018	eb000000	 bl          USBFNPDD_PowerVBUS

; 863  : 
; 864  :     // Disable the on-chip PHY and its PLL
; 865  :     UsbPhyPowerCtrl(pPddContext, FALSE);

  0001c	e5943028	 ldr         r3, [r4, #0x28]
  00020	e1b01003	 movs        r1, r3
  00024	0a000006	 beq         |$LN4@USBPeriphe@3|
  00028	e5943260	 ldr         r3, [r4, #0x260]
  0002c	e5912310	 ldr         r2, [r1, #0x310]
  00030	e3530000	 cmp         r3, #0
  00034	03822008	 orreq       r2, r2, #8
  00038	e3c23020	 bic         r3, r2, #0x20
  0003c	e3833004	 orr         r3, r3, #4
  00040	e5813310	 str         r3, [r1, #0x310]
  00044		 |$LN4@USBPeriphe@3|

; 866  : 
; 867  : 	// Request pads
; 868  : 	ReleaseDevicePads(OMAP_DEVICE_HSOTGUSB);

  00044	e3a0004f	 mov         r0, #0x4F
  00048	eb000000	 bl          ReleaseDevicePads

; 869  : 
; 870  :     PRINTMSG(ZONE_FUNCTION, (L"-USBPeripheralDeinit\r\n"));
; 871  : 
; 872  :     return (TRUE) ;

  0004c	e3a00001	 mov         r0, #1

; 873  : }

  00050	e8bd4010	 ldmia       sp!, {r4, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M47152|

			 ENDP  ; |USBPeripheralDeinit|

	EXPORT	|USBPeripheralEndSession|

  00000			 AREA	 |.pdata|, PDATA
|$T47165| DCD	|$LN5@USBPeriphe@4|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |USBPeripheralEndSession| PROC

; 888  : {

  00000		 |$LN5@USBPeriphe@4|
  00000		 |$M47162|

; 889  :     CSL_UsbRegs  *pUsbRegs = pPddContext->pUsbdRegs;

  00000	e590201c	 ldr         r2, [r0, #0x1C]

; 890  : 
; 891  :     PRINTMSG(ZONE_FUNCTION, (L"+USBPeripheralPowerDown\r\n"));
; 892  : 
; 893  :     /* End the session */
; 894  : #ifdef UFN_DISABLE_HIGH_SPEED
; 895  :     pUsbRegs->POWER = 0;
; 896  : #else
; 897  :     pUsbRegs->POWER = MGC_M_POWER_HSENAB;

  00004	e3a03020	 mov         r3, #0x20

; 898  : #endif
; 899  : 
; 900  :     /* Clear session bit */
; 901  :     pUsbRegs->DEVCTL &= ~0x01;
; 902  : 
; 903  :     return (TRUE) ;

  00008	e3a00001	 mov         r0, #1
  0000c	e5c23401	 strb        r3, [r2, #0x401]
  00010	e5d23460	 ldrb        r3, [r2, #0x460]
  00014	e20330fe	 and         r3, r3, #0xFE
  00018	e5c23460	 strb        r3, [r2, #0x460]

; 904  : }

  0001c	e12fff1e	 bx          lr
  00020		 |$M47163|

			 ENDP  ; |USBPeripheralEndSession|

	EXPORT	|USBPeripheralPowerDown|

  00000			 AREA	 |.pdata|, PDATA
|$T47203| DCD	|$LN19@USBPeriphe@5|
	DCD	0x40000c00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |USBPeripheralPowerDown| PROC

; 919  : {

  00000		 |$LN19@USBPeriphe@5|
  00000		 |$M47200|

; 920  :     PRINTMSG(ZONE_FUNCTION, (L"+USBPeripheralPowerDown\r\n"));
; 921  : 
; 922  :     /* Disable the on-chip PHY and its PLL */
; 923  :     UsbPhyPowerCtrl(pPddContext, FALSE);

  00000	e5903028	 ldr         r3, [r0, #0x28]
  00004	e1b01003	 movs        r1, r3
  00008	0a000006	 beq         |$LN4@USBPeriphe@5|
  0000c	e5903260	 ldr         r3, [r0, #0x260]
  00010	e5912310	 ldr         r2, [r1, #0x310]
  00014	e3530000	 cmp         r3, #0
  00018	03822008	 orreq       r2, r2, #8
  0001c	e3c23020	 bic         r3, r2, #0x20
  00020	e3833004	 orr         r3, r3, #4
  00024	e5813310	 str         r3, [r1, #0x310]
  00028		 |$LN4@USBPeriphe@5|

; 924  : 
; 925  : 	PRINTMSG(ZONE_FUNCTION, (L"-USBPeripheralPowerDown\r\n"));
; 926  : 
; 927  :     return (TRUE) ;

  00028	e3a00001	 mov         r0, #1

; 928  : }

  0002c	e12fff1e	 bx          lr
  00030		 |$M47201|

			 ENDP  ; |USBPeripheralPowerDown|

	EXPORT	|USBPeripheralPowerUp|
	EXPORT	|??_C@_1DA@BJPGBPFB@?$AA?$CL?$AAU?$AAS?$AAB?$AAP?$AAe?$AAr?$AAi?$AAp?$AAh?$AAe?$AAr?$AAa?$AAl?$AAP?$AAo?$AAw?$AAe?$AAr?$AAU?$AAp?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47214| DCD	|$LN5@USBPeriphe@6|
	DCD	0x40001701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@BJPGBPFB@?$AA?$CL?$AAU?$AAS?$AAB?$AAP?$AAe?$AAr?$AAi?$AAp?$AAh?$AAe?$AAr?$AAa?$AAl?$AAP?$AAo?$AAw?$AAe?$AAr?$AAU?$AAp?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "i", 0x0, "p", 0x0, "h", 0x0, "e", 0x0, "r", 0x0, "a"
	DCB	0x0, "l", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, "U", 0x0, "p", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |USBPeripheralPowerUp| PROC

; 943  : {

  00000		 |$LN5@USBPeriphe@6|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47211|
  00004	e1a04000	 mov         r4, r0

; 944  :     CSL_UsbRegs  *pUsbRegs = pPddContext->pUsbdRegs;
; 945  : 
; 946  :     PRINTMSG(ZONE_FUNCTION, (L"+USBPeripheralPowerUp\r\n"));
; 947  : 	RETAILMSG(TRUE, (L"+USBPeripheralPowerUp\r\n"));

  00008	e59f0048	 ldr         r0, [pc, #0x48]
  0000c	e594501c	 ldr         r5, [r4, #0x1C]
  00010	eb000000	 bl          NKDbgPrintfW

; 948  : 
; 949  :     /* Start the on-chip PHY and its PLL */
; 950  :     UsbPhyPowerCtrl(pPddContext, TRUE);

  00014	e3a01001	 mov         r1, #1
  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          UsbPhyPowerCtrl

; 951  : 
; 952  : #ifndef UFN_DISABLE_HIGH_SPEED
; 953  :     /* Enable high speed */
; 954  :     pUsbRegs->POWER = MGC_M_POWER_HSENAB;

  00020	e3a03020	 mov         r3, #0x20
  00024	e5c53401	 strb        r3, [r5, #0x401]

; 955  : #endif
; 956  : 
; 957  :     /* Configure the Controller UINT BIT First */
; 958  :     pUsbRegs->CTRLR &= ~BIT3;

  00028	e5953004	 ldr         r3, [r5, #4]

; 959  : 
; 960  :     pUsbRegs->TESTMODE = 0;
; 961  : 
; 962  :     /* Initial Function Address set to zero */
; 963  :     pUsbRegs->FADDR = 0;
; 964  :     
; 965  :     /* Set session bit */
; 966  :     pUsbRegs->DEVCTL |= 0x01;
; 967  : 
; 968  :     PRINTMSG(ZONE_FUNCTION, (L"-USBPeripheralPowerUp\r\n"));
; 969  : 
; 970  :     return (TRUE) ;

  0002c	e3a00001	 mov         r0, #1
  00030	e3c33008	 bic         r3, r3, #8
  00034	e5853004	 str         r3, [r5, #4]
  00038	e3a03000	 mov         r3, #0
  0003c	e5c5340f	 strb        r3, [r5, #0x40F]
  00040	e5c53400	 strb        r3, [r5, #0x400]
  00044	e5d53460	 ldrb        r3, [r5, #0x460]
  00048	e3833001	 orr         r3, r3, #1
  0004c	e5c53460	 strb        r3, [r5, #0x460]

; 971  : }

  00050	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$LN6@USBPeriphe@6|
  00058		 |$LN7@USBPeriphe@6|
  00058	00000000	 DCD         |??_C@_1DA@BJPGBPFB@?$AA?$CL?$AAU?$AAS?$AAB?$AAP?$AAe?$AAr?$AAi?$AAp?$AAh?$AAe?$AAr?$AAa?$AAl?$AAP?$AAo?$AAw?$AAe?$AAr?$AAU?$AAp?$AA?$AN?$AA?6?$AA?$AA@|
  0005c		 |$M47212|

			 ENDP  ; |USBPeripheralPowerUp|

	END
