; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\USB\USBCDMA\usbcdma.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|g_scheduleRx| % 0x3c
|g_scheduleTx| % 0x3c
|g_hDc|	%	0x4

  00000			 AREA	 |.data|, DATA
|g_Dc|	DCD	0x0
	%	16
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0x0
	DCD	0x65
	DCD	0x0
	DCD	0x0
	DCD	0x0
	%	4
	DCD	0x0
	%	4
	DCD	0x400
	DCD	0x0
	DCD	0x0
	%	4
	DCW	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCD	0x0
	%	4
	DCD	0x0
	DCD	0x0
	DCD	0x0
	%	4
	DCD	0x0
	DCD	0x0
	DCD	0x0
	%	4
	DCW	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCD	0x0
	%	4
	DCD	0x0
	DCD	0x0
	DCD	0x0
	%	4
	DCD	0x0
	DCD	0x0
	DCD	0x0
	%	4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T46180| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M46177|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M46178|

			 ENDP  ; |SetEvent|

	EXPORT	|DllEntry|
	IMPORT	|DisableThreadLibraryCalls|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbcdma\usbcdma.c

  00000			 AREA	 |.pdata|, PDATA
|$T46191| DCD	|$LN9@DllEntry|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllEntry| PROC

; 140  : {

  00000		 |$LN9@DllEntry|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M46188|

; 141  : 	UNREFERENCED_PARAMETER(lpvReserved);
; 142  : 
; 143  :     switch (dwReason)

  00004	e3510001	 cmp         r1, #1

; 144  :     {
; 145  :         case DLL_PROCESS_ATTACH:
; 146  :             DEBUGMSG(ZONE_INIT, (_T("USBCDMA: DLL_PROCESS_ATTACH\r\n")));
; 147  :             DEBUGREGISTER(hInstDll);
; 148  :             DisableThreadLibraryCalls((HMODULE)hInstDll);

  00008	0b000000	 bleq        DisableThreadLibraryCalls

; 149  :             break;
; 150  : 
; 151  :         case DLL_PROCESS_DETACH:
; 152  :             DEBUGMSG(ZONE_INIT, (_T("USBCDMA: DLL_PROCESS_DETACH\r\n")));
; 153  :             break;
; 154  :     }
; 155  :     return TRUE;

  0000c	e3a00001	 mov         r0, #1

; 156  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M46189|

			 ENDP  ; |DllEntry|

	EXPORT	|UCD_Close|

  00000			 AREA	 |.pdata|, PDATA
|$T46200| DCD	|$LN5@UCD_Close|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UCD_Close| PROC

; 168  : { 

  00000		 |$LN5@UCD_Close|
  00000		 |$M46197|

; 169  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 170  : 
; 171  : 	return TRUE;

  00000	e3a00001	 mov         r0, #1

; 172  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M46198|

			 ENDP  ; |UCD_Close|

	EXPORT	|UCD_Read|

  00000			 AREA	 |.pdata|, PDATA
|$T46209| DCD	|$LN5@UCD_Read|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UCD_Read| PROC

; 178  : { 

  00000		 |$LN5@UCD_Read|
  00000		 |$M46206|

; 179  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 180  : 	UNREFERENCED_PARAMETER(pBuffer);
; 181  : 	UNREFERENCED_PARAMETER(Count);
; 182  : 
; 183  : 	return 0;

  00000	e3a00000	 mov         r0, #0

; 184  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M46207|

			 ENDP  ; |UCD_Read|

	EXPORT	|UCD_Write|

  00000			 AREA	 |.pdata|, PDATA
|$T46218| DCD	|$LN5@UCD_Write|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UCD_Write| PROC

; 190  : { 

  00000		 |$LN5@UCD_Write|
  00000		 |$M46215|

; 191  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 192  : 	UNREFERENCED_PARAMETER(pBuffer);
; 193  : 	UNREFERENCED_PARAMETER(Count);
; 194  : 
; 195  : 	return 0;

  00000	e3a00000	 mov         r0, #0

; 196  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M46216|

			 ENDP  ; |UCD_Write|

	EXPORT	|UCD_Seek|

  00000			 AREA	 |.pdata|, PDATA
|$T46227| DCD	|$LN5@UCD_Seek|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UCD_Seek| PROC

; 202  : { 

  00000		 |$LN5@UCD_Seek|
  00000		 |$M46224|

; 203  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 204  : 	UNREFERENCED_PARAMETER(Amount);
; 205  : 	UNREFERENCED_PARAMETER(Type);
; 206  : 
; 207  : 	return 0; 

  00000	e3a00000	 mov         r0, #0

; 208  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M46225|

			 ENDP  ; |UCD_Seek|

	EXPORT	|UCD_Open|

  00000			 AREA	 |.pdata|, PDATA
|$T46237| DCD	|$LN5@UCD_Open|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UCD_Open| PROC

; 214  : { 

  00000		 |$LN5@UCD_Open|
  00000		 |$M46234|

; 215  : 	UNREFERENCED_PARAMETER(AccessCode);
; 216  : 	UNREFERENCED_PARAMETER(ShareMode);
; 217  : 
; 218  : 	return hDeviceContext; 
; 219  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M46235|

			 ENDP  ; |UCD_Open|

	EXPORT	|UCD_IOControl|

  00000			 AREA	 |.pdata|, PDATA
|$T46246| DCD	|$LN6@UCD_IOCont|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UCD_IOControl| PROC

; 229  : {

  00000		 |$LN6@UCD_IOCont|
  00000		 |$M46243|

; 230  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 231  : 	UNREFERENCED_PARAMETER(dwCode);
; 232  : 	UNREFERENCED_PARAMETER(pBufIn);
; 233  : 	UNREFERENCED_PARAMETER(dwLenIn);
; 234  : 	UNREFERENCED_PARAMETER(dwLenOut);
; 235  : 	UNREFERENCED_PARAMETER(pBufOut);
; 236  : 
; 237  :     if (pdwActualOut != NULL)
; 238  :         pdwActualOut = 0;
; 239  : 
; 240  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 241  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M46244|

			 ENDP  ; |UCD_IOControl|

	EXPORT	|USBCDMA_KickCompletionCallback|
	EXPORT	|??_C@_1JI@BDAMFJJD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@LPKNOOCH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IE@MOIJBOHA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T46259| DCD	|$LN11@USBCDMA_Ki|
	DCD	0x40003501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@BDAMFJJD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "K", 0x0, "i", 0x0, "c", 0x0, "k"
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "C", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "U", 0x0, "S"
	DCB	0x0, "B", 0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "u"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@LPKNOOCH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "K", 0x0, "i", 0x0, "c", 0x0, "k"
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "C", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "A", 0x0, "M", 0x0, "3", 0x0, "5", 0x0, "1", 0x0, "7"
	DCB	0x0, "\\", 0x0, "U", 0x0, "S", 0x0, "B", 0x0, "\\", 0x0, "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "u", 0x0, "s", 0x0, "b"
	DCB	0x0, "c", 0x0, "d", 0x0, "m", 0x0, "a", 0x0, ".", 0x0, "c"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@MOIJBOHA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "K", 0x0, "i", 0x0, "c", 0x0, "k"
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "C", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "D", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "s"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbcdma\usbcdma.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |USBCDMA_KickCompletionCallback| PROC

; 619  : {

  00000		 |$LN11@USBCDMA_Ki|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M46256|
  00004	e1a04000	 mov         r4, r0

; 620  :     UsbModule *pUsbModule = NULL;
; 621  : 
; 622  :     DEBUGMSG(ZONE_IST,
; 623  :         (L"+USBCDMA_KickCompletionCallback: 0x%08x\r\n",
; 624  :         hUsbModule));
; 625  : 
; 626  :     // Check driver state
; 627  :     if (g_hDc == 0) 

  00008	e59f30c0	 ldr         r3, [pc, #0xC0]
  0000c	e5933000	 ldr         r3, [r3]
  00010	e3530000	 cmp         r3, #0
  00014	1a000008	 bne         |$LN3@USBCDMA_Ki|

; 628  : 	{
; 629  :         ERRORMSG(1,
; 630  :             (L" USBCDMA_KickCompletionCallback: ERROR - Driver not initialised\r\n"));

  00018	e59f10a0	 ldr         r1, [pc, #0xA0]
  0001c	e59f0098	 ldr         r0, [pc, #0x98]
  00020	e3a03c02	 mov         r3, #2, 24
  00024	e3832076	 orr         r2, r3, #0x76
  00028	eb000000	 bl          NKDbgPrintfW
  0002c	e59f0098	 ldr         r0, [pc, #0x98]
  00030	eb000000	 bl          NKDbgPrintfW

; 657  : 
; 658  : done:
; 659  :     DEBUGMSG(ZONE_IST,
; 660  :         (L"-USBCDMA_KickCompletionCallback\r\n"));
; 661  : }

  00034	e8bd4010	 ldmia       sp!, {r4, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$LN3@USBCDMA_Ki|

; 631  :         goto done;
; 632  :     }
; 633  : 
; 634  :     // This function is thread-safe so we don't bother locking here
; 635  : 
; 636  :     // Check input parameters
; 637  :     if ((hUsbModule != (HANDLE)&g_Dc.usb[0]) && (hUsbModule != (HANDLE)&g_Dc.usb[1])) 

  0003c	e59f2084	 ldr         r2, [pc, #0x84]
  00040	e2823050	 add         r3, r2, #0x50
  00044	e1540003	 cmp         r4, r3
  00048	0a00000c	 beq         |$LN2@USBCDMA_Ki|
  0004c	e2823080	 add         r3, r2, #0x80
  00050	e1540003	 cmp         r4, r3
  00054	0a000009	 beq         |$LN2@USBCDMA_Ki|

; 638  : 	{
; 639  :         ERRORMSG(1,
; 640  :             (L" USBCDMA_KickCompletionCallback: ERROR - Invalid handle 0x%08x\r\n",
; 641  :             hUsbModule));

  00058	e59f1060	 ldr         r1, [pc, #0x60]
  0005c	e59f0058	 ldr         r0, [pc, #0x58]
  00060	e3a03c02	 mov         r3, #2, 24
  00064	e3832081	 orr         r2, r3, #0x81
  00068	eb000000	 bl          NKDbgPrintfW
  0006c	e59f0050	 ldr         r0, [pc, #0x50]
  00070		 |$LN8@USBCDMA_Ki|
  00070	e1a01004	 mov         r1, r4
  00074	eb000000	 bl          NKDbgPrintfW

; 657  : 
; 658  : done:
; 659  :     DEBUGMSG(ZONE_IST,
; 660  :         (L"-USBCDMA_KickCompletionCallback\r\n"));
; 661  : }

  00078	e8bd4010	 ldmia       sp!, {r4, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN2@USBCDMA_Ki|

; 642  :         goto done;
; 643  :     }
; 644  : 
; 645  :     pUsbModule = (UsbModule *)hUsbModule;
; 646  : 
; 647  :     // Check module state
; 648  :     if (pUsbModule->callback == NULL) 

  00080	e5943024	 ldr         r3, [r4, #0x24]
  00084	e3530000	 cmp         r3, #0
  00088	1a000005	 bne         |$LN1@USBCDMA_Ki|

; 649  : 	{
; 650  :         ERRORMSG(1,
; 651  :             (L" USBCDMA_KickCompletionCallback: ERROR - USB module not registered 0x%08x\r\n",
; 652  :             pUsbModule));

  0008c	e59f102c	 ldr         r1, [pc, #0x2C]
  00090	e59f0024	 ldr         r0, [pc, #0x24]
  00094	e3a02fa3	 mov         r2, #0xA3, 30
  00098	eb000000	 bl          NKDbgPrintfW
  0009c	e59f0014	 ldr         r0, [pc, #0x14]

; 653  :         goto done;

  000a0	eafffff2	 b           |$LN8@USBCDMA_Ki|
  000a4		 |$LN1@USBCDMA_Ki|

; 654  :     }
; 655  : 
; 656  :     SetEvent(g_Dc.hIntrEvent);

  000a4	e592001c	 ldr         r0, [r2, #0x1C]
  000a8	e3a01003	 mov         r1, #3
  000ac	eb000000	 bl          EventModify
  000b0		 |$done$45827|

; 657  : 
; 658  : done:
; 659  :     DEBUGMSG(ZONE_IST,
; 660  :         (L"-USBCDMA_KickCompletionCallback\r\n"));
; 661  : }

  000b0	e8bd4010	 ldmia       sp!, {r4, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$LN12@USBCDMA_Ki|
  000b8		 |$LN13@USBCDMA_Ki|
  000b8	00000000	 DCD         |??_C@_1JI@BDAMFJJD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@|
  000bc		 |$LN14@USBCDMA_Ki|
  000bc	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  000c0		 |$LN15@USBCDMA_Ki|
  000c0	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  000c4		 |$LN16@USBCDMA_Ki|
  000c4	00000000	 DCD         |??_C@_1IC@LPKNOOCH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@|
  000c8		 |$LN17@USBCDMA_Ki|
  000c8	00000000	 DCD         |g_Dc|
  000cc		 |$LN18@USBCDMA_Ki|
  000cc	00000000	 DCD         |??_C@_1IE@MOIJBOHA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@|
  000d0		 |$LN19@USBCDMA_Ki|
  000d0	00000000	 DCD         |g_hDc|
  000d4		 |$M46257|

			 ENDP  ; |USBCDMA_KickCompletionCallback|

	EXPORT	|USBCDMA_DescriptorVAtoPA|
	EXPORT	|??_C@_1JC@IJPNBLNA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@DJAEHIDJ@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@DKEJBHH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T46280| DCD	|$LN12@USBCDMA_De|
	DCD	0x40003c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@IJPNBLNA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "V", 0x0, "A", 0x0, "t", 0x0, "o", 0x0, "P", 0x0, "A"
	DCB	0x0, ":", 0x0, " ", 0x0, "V", 0x0, "i", 0x0, "r", 0x0, "t"
	DCB	0x0, "u", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "a", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "o", 0x0, "u", 0x0, "t"
	DCB	0x0, "s", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, " ", 0x0, "T"
	DCB	0x0, "D", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@DJAEHIDJ@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "V", 0x0, "A", 0x0, "t", 0x0, "o", 0x0, "P", 0x0, "A"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@DKEJBHH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "V", 0x0, "A", 0x0, "t", 0x0, "o", 0x0, "P", 0x0, "A"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "D", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "s"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |USBCDMA_DescriptorVAtoPA| PROC

; 666  : {

  00000		 |$LN12@USBCDMA_De|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M46277|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0

; 667  :     UINT32 pa = 0;
; 668  : 
; 669  :     // Check driver state
; 670  :     if (g_hDc == 0) 

  0000c	e59f30d8	 ldr         r3, [pc, #0xD8]
  00010	e3a06000	 mov         r6, #0
  00014	e5933000	 ldr         r3, [r3]
  00018	e3530000	 cmp         r3, #0
  0001c	1a000007	 bne         |$LN6@USBCDMA_De|

; 671  : 	{
; 672  :         ERRORMSG(1,
; 673  :             (L" USBCDMA_DescriptorVAtoPA: ERROR - Driver not initialised\r\n"));

  00020	e59f10b4	 ldr         r1, [pc, #0xB4]
  00024	e59f00ac	 ldr         r0, [pc, #0xAC]
  00028	e3a03c02	 mov         r3, #2, 24
  0002c	e38320a1	 orr         r2, r3, #0xA1
  00030	eb000000	 bl          NKDbgPrintfW
  00034	e59f00ac	 ldr         r0, [pc, #0xAC]
  00038	eb000000	 bl          NKDbgPrintfW

; 674  :         goto done;

  0003c	ea000021	 b           |$done$45845|
  00040		 |$LN6@USBCDMA_De|

; 675  :     }
; 676  : 
; 677  :     // This function is thread-safe so we don't bother locking here
; 678  : 
; 679  :     // Check input parameters
; 680  :     if ((hUsbModule != (HANDLE)&g_Dc.usb[0]) && (hUsbModule != (HANDLE)&g_Dc.usb[1])) 

  00040	e59f209c	 ldr         r2, [pc, #0x9C]
  00044	e2823050	 add         r3, r2, #0x50
  00048	e1550003	 cmp         r5, r3
  0004c	0a000009	 beq         |$LN5@USBCDMA_De|
  00050	e2823080	 add         r3, r2, #0x80
  00054	e1550003	 cmp         r5, r3
  00058	0a000006	 beq         |$LN5@USBCDMA_De|

; 681  : 	{
; 682  :         ERRORMSG(1,
; 683  :             (L" USBCDMA_DescriptorVAtoPA: ERROR - Invalid handle 0x%08x\r\n",
; 684  :             hUsbModule));

  0005c	e59f1078	 ldr         r1, [pc, #0x78]
  00060	e59f0070	 ldr         r0, [pc, #0x70]
  00064	e3a02fab	 mov         r2, #0xAB, 30
  00068	eb000000	 bl          NKDbgPrintfW
  0006c	e59f006c	 ldr         r0, [pc, #0x6C]
  00070	e1a01005	 mov         r1, r5

; 685  :         goto done;

  00074	ea000012	 b           |$LN9@USBCDMA_De|
  00078		 |$LN5@USBCDMA_De|

; 686  :     }
; 687  : 
; 688  :     if (va != NULL) 

  00078	e3540000	 cmp         r4, #0
  0007c	0a000011	 beq         |$done$45845|

; 689  : 	{
; 690  :         UINT32 vaPoolBase  = (UINT32)g_Dc.pvTdPool;
; 691  :         UINT32 vaPoolLimit = (UINT32)g_Dc.pvTdPool + g_Dc.cbTdPoolSize;
; 692  : 
; 693  :         if (((UINT32)va < vaPoolBase) || ((UINT32)va > vaPoolLimit))

  00080	e5921030	 ldr         r1, [r2, #0x30]
  00084	e1540001	 cmp         r4, r1
  00088	3a000006	 bcc         |$LN2@USBCDMA_De|
  0008c	e5923040	 ldr         r3, [r2, #0x40]
  00090	e0833001	 add         r3, r3, r1
  00094	e1540003	 cmp         r4, r3

; 698  : 		}
; 699  :         else
; 700  : 		{
; 701  :             pa = g_Dc.paTdPool.LowPart + ((UINT32)va - vaPoolBase);

  00098	95923038	 ldrls       r3, [r2, #0x38]
  0009c	90433001	 subls       r3, r3, r1
  000a0	90836004	 addls       r6, r3, r4
  000a4	9a000007	 bls         |$done$45845|
  000a8		 |$LN2@USBCDMA_De|

; 694  : 		{
; 695  :             ERRORMSG(1,
; 696  :                 (L" USBCDMA_DescriptorVAtoPA: Virtual address is outside TD pool - 0x%08x\r\n",
; 697  :                 va));

  000a8	e59f102c	 ldr         r1, [pc, #0x2C]
  000ac	e59f0024	 ldr         r0, [pc, #0x24]
  000b0	e3a03c02	 mov         r3, #2, 24
  000b4	e38320b9	 orr         r2, r3, #0xB9
  000b8	eb000000	 bl          NKDbgPrintfW
  000bc	e59f0010	 ldr         r0, [pc, #0x10]
  000c0	e1a01004	 mov         r1, r4
  000c4		 |$LN9@USBCDMA_De|
  000c4	eb000000	 bl          NKDbgPrintfW
  000c8		 |$done$45845|

; 702  : 		}
; 703  :     }
; 704  : 
; 705  : done:
; 706  :     return pa;
; 707  : }

  000c8	e1a00006	 mov         r0, r6
  000cc	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN13@USBCDMA_De|
  000d4		 |$LN14@USBCDMA_De|
  000d4	00000000	 DCD         |??_C@_1JC@IJPNBLNA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu@|
  000d8		 |$LN15@USBCDMA_De|
  000d8	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  000dc		 |$LN16@USBCDMA_De|
  000dc	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  000e0		 |$LN17@USBCDMA_De|
  000e0	00000000	 DCD         |??_C@_1HG@DJAEHIDJ@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@|
  000e4		 |$LN18@USBCDMA_De|
  000e4	00000000	 DCD         |g_Dc|
  000e8		 |$LN19@USBCDMA_De|
  000e8	00000000	 DCD         |??_C@_1HI@DKEJBHH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@|
  000ec		 |$LN20@USBCDMA_De|
  000ec	00000000	 DCD         |g_hDc|
  000f0		 |$M46278|

			 ENDP  ; |USBCDMA_DescriptorVAtoPA|

	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T46303| DCD	|$LN18@ConfigureS|
	DCD	0x40004102
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ConfigureScheduler| PROC

; 760  : {

  00000		 |$LN18@ConfigureS|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd020	 sub         sp, sp, #0x20
  00008		 |$M46300|

; 761  :     UINT32 max_entry = max(USB_CPPI_MAX_TX_CHANNELS,
; 762  :                            USB_CPPI_MAX_RX_CHANNELS);
; 763  :     UINT32 entryCount = 0;
; 764  :     UINT32 scheduleTable[SCHEDULE_TABLE_ENTRIES] = {0};

  00008	e3a03000	 mov         r3, #0
  0000c	e3a0201c	 mov         r2, #0x1C
  00010	e3a01000	 mov         r1, #0
  00014	e28d0004	 add         r0, sp, #4
  00018	e58d3000	 str         r3, [sp]
  0001c	e3a04000	 mov         r4, #0
  00020	eb000000	 bl          memset

; 765  :     UINT32 scheduleBits;
; 766  :     UINT32 i;
; 767  : 
; 768  :     // disable scheduler while we update
; 769  :     g_Dc.pCppiRegs->DMA_SCHED_CTRL = 0;

  00024	e59f60d4	 ldr         r6, [pc, #0xD4]
  00028	e59f70cc	 ldr         r7, [pc, #0xCC]
  0002c	e3a02000	 mov         r2, #0
  00030	e596302c	 ldr         r3, [r6, #0x2C]

; 770  : 
; 771  :     // update schedule register values based on 
; 772  :     // g_scheduleTx and g_scheduleRx
; 773  :     for(i=0; i<max_entry; i++)

  00034	e3a0e000	 mov         lr, #0
  00038	e3a05000	 mov         r5, #0
  0003c	e2833a01	 add         r3, r3, #1, 20
  00040	e5832000	 str         r2, [r3]
  00044	e287803c	 add         r8, r7, #0x3C

; 774  :     {
; 775  :         // add Tx to the schedule, if enabled
; 776  :         if((i < USB_CPPI_MAX_TX_CHANNELS)&&(g_scheduleTx[i] == TRUE))

  00048	e35e000f	 cmp         lr, #0xF
  0004c		 |$LN15@ConfigureS|
  0004c	2a000015	 bcs         |$LN7@ConfigureS|
  00050	e798310e	 ldr         r3, [r8, +lr, lsl #2]
  00054	e3530001	 cmp         r3, #1

; 777  :         {
; 778  :             scheduleBits = (i << ((entryCount * 8) % 32));
; 779  :             scheduleTable[(entryCount/4)] |= scheduleBits;

  00058	01a03124	 moveq       r3, r4, lsr #2
  0005c	028d1000	 addeq       r1, sp, #0
  00060	07b12103	 ldreq       r2, [r1, +r3, lsl #2]!
  00064	0205301f	 andeq       r3, r5, #0x1F

; 780  :             entryCount++;

  00068	02844001	 addeq       r4, r4, #1
  0006c	02855008	 addeq       r5, r5, #8
  00070	0182331e	 orreq       r3, r2, lr, lsl r3
  00074	05813000	 streq       r3, [r1]

; 781  :         }
; 782  :         // add Rx to the schedule, if enabled
; 783  :         if((i < USB_CPPI_MAX_RX_CHANNELS)&&(g_scheduleRx[i] == TRUE))

  00078	e797310e	 ldr         r3, [r7, +lr, lsl #2]
  0007c	e3530001	 cmp         r3, #1
  00080	1a000008	 bne         |$LN7@ConfigureS|

; 784  :         {
; 785  :             scheduleBits = ((0x80 + i) << ((entryCount * 8) % 32));
; 786  :             scheduleTable[(entryCount/4)] |= scheduleBits;

  00084	e1a03124	 mov         r3, r4, lsr #2
  00088	e28d0000	 add         r0, sp, #0
  0008c	e7b01103	 ldr         r1, [r0, +r3, lsl #2]!
  00090	e205201f	 and         r2, r5, #0x1F
  00094	e28e3080	 add         r3, lr, #0x80

; 787  :             entryCount++;

  00098	e2844001	 add         r4, r4, #1
  0009c	e1813213	 orr         r3, r1, r3, lsl r2
  000a0	e2855008	 add         r5, r5, #8
  000a4	e5803000	 str         r3, [r0]
  000a8		 |$LN7@ConfigureS|
  000a8	e28ee001	 add         lr, lr, #1
  000ac	e35e000f	 cmp         lr, #0xF
  000b0	baffffe5	 blt         |$LN15@ConfigureS|

; 788  :         }
; 789  :     }
; 790  : 
; 791  :     // update schedule
; 792  :     for(i=0;i<SCHEDULE_TABLE_ENTRIES;i++)

  000b4	e28d3000	 add         r3, sp, #0
  000b8	e243eb06	 sub         lr, r3, #6, 22
  000bc	e3a01b06	 mov         r1, #6, 22
  000c0	e3a00008	 mov         r0, #8
  000c4		 |$LL3@ConfigureS|

; 793  :     {
; 794  :         DEBUGMSG(ZONE_VERBOSE,(L"ConfigureScheduler: scheduleTable[%d]=0x%x\r\n", i, scheduleTable[i]));
; 795  :         g_Dc.pCppiRegs->CDMASTWORD[i] = scheduleTable[i];

  000c4	e596202c	 ldr         r2, [r6, #0x2C]
  000c8	e79e3001	 ldr         r3, [lr, +r1]
  000cc	e2500001	 subs        r0, r0, #1
  000d0	e7813002	 str         r3, [r1, +r2]
  000d4	e2811004	 add         r1, r1, #4
  000d8	1afffff9	 bne         |$LL3@ConfigureS|

; 796  :     }
; 797  : 
; 798  :     // update schedule control register
; 799  :     g_Dc.pCppiRegs->DMA_SCHED_CTRL = 0x80000000 | (entryCount - 1);

  000dc	e596102c	 ldr         r1, [r6, #0x2C]
  000e0	e2443001	 sub         r3, r4, #1
  000e4	e3832102	 orr         r2, r3, #2, 2
  000e8	e2813a01	 add         r3, r1, #1, 20
  000ec	e5832000	 str         r2, [r3]

; 800  :     DEBUGMSG(ZONE_VERBOSE,(L"ConfigureScheduler: DMA_SCHED_CTRL = 0x%x\r\n", g_Dc.pCppiRegs->DMA_SCHED_CTRL));
; 801  : }

  000f0	e28dd020	 add         sp, sp, #0x20
  000f4	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000f8	e12fff1e	 bx          lr
  000fc		 |$LN19@ConfigureS|
  000fc		 |$LN20@ConfigureS|
  000fc	00000000	 DCD         |g_scheduleRx|
  00100		 |$LN21@ConfigureS|
  00100	00000000	 DCD         |g_Dc|
  00104		 |$M46301|

			 ENDP  ; |ConfigureScheduler|

	EXPORT	|USBCDMA_DescriptorPAtoVA|
	EXPORT	|??_C@_1JE@OELNOEDH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAP?$AAh?$AAy?$AAs?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@CDAMMNLN@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@OHEAJBDD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T46319| DCD	|$LN12@USBCDMA_De@2|
	DCD	0x40003c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@OELNOEDH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAP?$AAh?$AAy?$AAs?$AAi@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "P", 0x0, "A", 0x0, "t", 0x0, "o", 0x0, "V", 0x0, "A"
	DCB	0x0, ":", 0x0, " ", 0x0, "P", 0x0, "h", 0x0, "y", 0x0, "s"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "o", 0x0, "u"
	DCB	0x0, "t", 0x0, "s", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, " "
	DCB	0x0, "T", 0x0, "D", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "o"
	DCB	0x0, "l", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@CDAMMNLN@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "P", 0x0, "A", 0x0, "t", 0x0, "o", 0x0, "V", 0x0, "A"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@OHEAJBDD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "P", 0x0, "A", 0x0, "t", 0x0, "o", 0x0, "V", 0x0, "A"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "D", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "s"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |USBCDMA_DescriptorPAtoVA| PROC

; 806  : {

  00000		 |$LN12@USBCDMA_De@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M46316|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0

; 807  :     void *va = NULL;
; 808  : 
; 809  :     // Check driver state
; 810  :     if (g_hDc == 0) 

  0000c	e59f30d8	 ldr         r3, [pc, #0xD8]
  00010	e3a06000	 mov         r6, #0
  00014	e5933000	 ldr         r3, [r3]
  00018	e3530000	 cmp         r3, #0
  0001c	1a000007	 bne         |$LN6@USBCDMA_De@2|

; 811  : 	{
; 812  :         ERRORMSG(1,
; 813  :             (L" USBCDMA_DescriptorPAtoVA: ERROR - Driver not initialised\r\n"));

  00020	e59f10b4	 ldr         r1, [pc, #0xB4]
  00024	e59f00ac	 ldr         r0, [pc, #0xAC]
  00028	e3a03c03	 mov         r3, #3, 24
  0002c	e383202d	 orr         r2, r3, #0x2D
  00030	eb000000	 bl          NKDbgPrintfW
  00034	e59f00ac	 ldr         r0, [pc, #0xAC]
  00038	eb000000	 bl          NKDbgPrintfW

; 814  :         goto done;

  0003c	ea000021	 b           |$done$45903|
  00040		 |$LN6@USBCDMA_De@2|

; 815  :     }
; 816  : 
; 817  :     // This function is thread-safe so we don't bother locking here
; 818  : 
; 819  :     // Check input parameters
; 820  :     if ((hUsbModule != (HANDLE)&g_Dc.usb[0]) && (hUsbModule != (HANDLE)&g_Dc.usb[1])) 

  00040	e59f209c	 ldr         r2, [pc, #0x9C]
  00044	e2823050	 add         r3, r2, #0x50
  00048	e1550003	 cmp         r5, r3
  0004c	0a000009	 beq         |$LN5@USBCDMA_De@2|
  00050	e2823080	 add         r3, r2, #0x80
  00054	e1550003	 cmp         r5, r3
  00058	0a000006	 beq         |$LN5@USBCDMA_De@2|

; 821  : 	{
; 822  :         ERRORMSG(1,
; 823  :             (L" USBCDMA_DescriptorPAtoVA: ERROR - Invalid handle 0x%08x\r\n",
; 824  :             hUsbModule));

  0005c	e59f1078	 ldr         r1, [pc, #0x78]
  00060	e59f0070	 ldr         r0, [pc, #0x70]
  00064	e3a02fce	 mov         r2, #0xCE, 30
  00068	eb000000	 bl          NKDbgPrintfW
  0006c	e59f006c	 ldr         r0, [pc, #0x6C]
  00070	e1a01005	 mov         r1, r5

; 825  :         goto done;

  00074	ea000012	 b           |$LN9@USBCDMA_De@2|
  00078		 |$LN5@USBCDMA_De@2|

; 826  :     }
; 827  : 
; 828  :     if (pa != 0) 

  00078	e3540000	 cmp         r4, #0
  0007c	0a000011	 beq         |$done$45903|

; 829  : 	{
; 830  :         UINT32 paPoolBase  = g_Dc.paTdPool.LowPart;
; 831  :         UINT32 paPoolLimit = g_Dc.paTdPool.LowPart + g_Dc.cbTdPoolSize;
; 832  : 
; 833  :         if ((pa < paPoolBase) || (pa > paPoolLimit))

  00080	e5921038	 ldr         r1, [r2, #0x38]
  00084	e1540001	 cmp         r4, r1
  00088	3a000006	 bcc         |$LN2@USBCDMA_De@2|
  0008c	e5923040	 ldr         r3, [r2, #0x40]
  00090	e0833001	 add         r3, r3, r1
  00094	e1540003	 cmp         r4, r3

; 838  : 		}
; 839  :         else
; 840  : 		{
; 841  :             va = (void *)(((UINT32)g_Dc.pvTdPool) + (pa - paPoolBase));

  00098	95923030	 ldrls       r3, [r2, #0x30]
  0009c	90433001	 subls       r3, r3, r1
  000a0	90836004	 addls       r6, r3, r4
  000a4	9a000007	 bls         |$done$45903|
  000a8		 |$LN2@USBCDMA_De@2|

; 834  : 		{
; 835  :             ERRORMSG(1,
; 836  :                 (L" USBCDMA_DescriptorPAtoVA: Physical address is outside TD pool - 0x%08x\r\n",
; 837  :                 pa));

  000a8	e59f102c	 ldr         r1, [pc, #0x2C]
  000ac	e59f0024	 ldr         r0, [pc, #0x24]
  000b0	e3a03c03	 mov         r3, #3, 24
  000b4	e3832045	 orr         r2, r3, #0x45
  000b8	eb000000	 bl          NKDbgPrintfW
  000bc	e59f0010	 ldr         r0, [pc, #0x10]
  000c0	e1a01004	 mov         r1, r4
  000c4		 |$LN9@USBCDMA_De@2|
  000c4	eb000000	 bl          NKDbgPrintfW
  000c8		 |$done$45903|

; 842  : 		}
; 843  :     }
; 844  : 
; 845  : done:
; 846  :     return va;
; 847  : }

  000c8	e1a00006	 mov         r0, r6
  000cc	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN13@USBCDMA_De@2|
  000d4		 |$LN14@USBCDMA_De@2|
  000d4	00000000	 DCD         |??_C@_1JE@OELNOEDH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAP?$AAh?$AAy?$AAs?$AAi@|
  000d8		 |$LN15@USBCDMA_De@2|
  000d8	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  000dc		 |$LN16@USBCDMA_De@2|
  000dc	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  000e0		 |$LN17@USBCDMA_De@2|
  000e0	00000000	 DCD         |??_C@_1HG@CDAMMNLN@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@|
  000e4		 |$LN18@USBCDMA_De@2|
  000e4	00000000	 DCD         |g_Dc|
  000e8		 |$LN19@USBCDMA_De@2|
  000e8	00000000	 DCD         |??_C@_1HI@OHEAJBDD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@|
  000ec		 |$LN20@USBCDMA_De@2|
  000ec	00000000	 DCD         |g_hDc|
  000f0		 |$M46317|

			 ENDP  ; |USBCDMA_DescriptorPAtoVA|

	IMPORT	|WaitForSingleObject|

  00000			 AREA	 |.pdata|, PDATA
|$T46344| DCD	|$LN21@IntrThread|
	DCD	0x40002a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IntrThread| PROC

; 1008 : {

  00000		 |$LN21@IntrThread|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M46341|

; 1009 : 	UNREFERENCED_PARAMETER(lpParameter);
; 1010 : 
; 1011 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 1012 :         (L"+USBCDMA: IntrThread\n"));
; 1013 : 
; 1014 :     while (!g_Dc.fIntrThreadClosing)

  00004	e59f4098	 ldr         r4, [pc, #0x98]
  00008		 |$LN4@IntrThread|
  00008	e5943028	 ldr         r3, [r4, #0x28]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000002	 beq         |$LL8@IntrThread|
  00014		 |$LN17@IntrThread|

; 1040 : 
; 1041 :         // In AM3517, this thread is not directly
; 1042 :         // handling interrupts.
; 1043 : #if 0
; 1044 :         InterruptDone(g_Dc.dwSysIntr);
; 1045 : #endif
; 1046 : 
; 1047 :         DEBUGMSG(ZONE_IST && ZONE_VERBOSE,
; 1048 :             (L"-USBCDMA: IntrThread - ISR\r\n"));
; 1049 :     }
; 1050 : 
; 1051 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 1052 :         (L"-USBCDMA: IntrThread\n"));
; 1053 : 
; 1054 :     return 0;

  00014	e3a00000	 mov         r0, #0

; 1055 : }

  00018	e8bd4010	 ldmia       sp!, {r4, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$LL8@IntrThread|

; 1015 :     {
; 1016 :         WaitForSingleObject(g_Dc.hIntrEvent, INFINITE);

  00020	e594001c	 ldr         r0, [r4, #0x1C]
  00024	e3e01000	 mvn         r1, #0
  00028	eb000000	 bl          WaitForSingleObject

; 1017 : 
; 1018 :         DEBUGMSG(ZONE_IST && ZONE_VERBOSE,
; 1019 :             (L"+USBCDMA: IntrThread - ISR\r\n"));
; 1020 : 
; 1021 :         if (g_Dc.fIntrThreadClosing)

  0002c	e5943028	 ldr         r3, [r4, #0x28]
  00030	e3530000	 cmp         r3, #0
  00034	1afffff6	 bne         |$LN17@IntrThread|
  00038		 |$LL5@IntrThread|
  00038	e594302c	 ldr         r3, [r4, #0x2C]

; 1022 : 		{
; 1023 :             break;
; 1024 : 		}
; 1025 : 
; 1026 : 		while (((g_Dc.pCppiRegs->PEND1) & USB_CPPI_PEND1_QMSK_HOST) ||
; 1027 : 			   ((g_Dc.pCppiRegs->PEND2) & USB_CPPI_PEND2_QMSK_HOST) ||
; 1028 : 			   ((g_Dc.pCppiRegs->PEND2) & USB_CPPI_PEND2_QMSK_FN)	)

  0003c	e2833a03	 add         r3, r3, #3, 20
  00040	e5933094	 ldr         r3, [r3, #0x94]
  00044	e3130102	 tst         r3, #2, 2
  00048	1a000007	 bne         |$LN3@IntrThread|
  0004c	e594302c	 ldr         r3, [r4, #0x2C]
  00050	e2832a03	 add         r2, r3, #3, 20
  00054	e5923098	 ldr         r3, [r2, #0x98]
  00058	e3130012	 tst         r3, #0x12
  0005c	1a000002	 bne         |$LN3@IntrThread|
  00060	e5923098	 ldr         r3, [r2, #0x98]
  00064	e3130015	 tst         r3, #0x15
  00068	0affffe6	 beq         |$LN4@IntrThread|
  0006c		 |$LN3@IntrThread|

; 1029 :         {
; 1030 :             if (g_Dc.usb[0].callback)

  0006c	e5943074	 ldr         r3, [r4, #0x74]
  00070	e3530000	 cmp         r3, #0

; 1031 : 			{
; 1032 :                 g_Dc.usb[0].callback(g_Dc.usb[0].param);

  00074	15940078	 ldrne       r0, [r4, #0x78]
  00078	15943074	 ldrne       r3, [r4, #0x74]
  0007c	11a0e00f	 movne       lr, pc
  00080	112fff13	 bxne        r3

; 1033 : 			}
; 1034 : 
; 1035 :             if (g_Dc.usb[1].callback)

  00084	e59430a4	 ldr         r3, [r4, #0xA4]
  00088	e3530000	 cmp         r3, #0
  0008c	0affffe9	 beq         |$LL5@IntrThread|

; 1036 : 			{
; 1037 :                 g_Dc.usb[1].callback(g_Dc.usb[1].param);

  00090	e59400a8	 ldr         r0, [r4, #0xA8]
  00094	e59430a4	 ldr         r3, [r4, #0xA4]
  00098	e1a0e00f	 mov         lr, pc
  0009c	e12fff13	 bx          r3

; 1038 : 			}
; 1039 :         }

  000a0	eaffffe4	 b           |$LL5@IntrThread|
  000a4		 |$LN22@IntrThread|
  000a4		 |$LN23@IntrThread|
  000a4	00000000	 DCD         |g_Dc|
  000a8		 |$M46342|

			 ENDP  ; |IntrThread|

	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T46353| DCD	|$LN5@Lock|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lock|	 PROC

; 1058 : {

  00000		 |$LN5@Lock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M46350|

; 1059 :     EnterCriticalSection(&g_Dc.csLock);

  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          EnterCriticalSection

; 1060 : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@Lock|
  00014		 |$LN7@Lock|
  00014	00000000	 DCD         |g_Dc|
  00018		 |$M46351|

			 ENDP  ; |Lock|

	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T46362| DCD	|$LN5@Unlock|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Unlock| PROC

; 1063 : {

  00000		 |$LN5@Unlock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M46359|

; 1064 :     LeaveCriticalSection(&g_Dc.csLock);

  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          LeaveCriticalSection

; 1065 : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@Unlock|
  00014		 |$LN7@Unlock|
  00014	00000000	 DCD         |g_Dc|
  00018		 |$M46360|

			 ENDP  ; |Unlock|


  00000			 AREA	 |.pdata|, PDATA
|$T46382| DCD	|$LN15@TdPoolInit|
	DCD	0x40001701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TdPoolInit| PROC

; 1068 : {

  00000		 |$LN15@TdPoolInit|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M46379|

; 1069 :     /* Only initialise once */
; 1070 :     if (g_Dc.fTdPoolInitialised)

  00004	e59f404c	 ldr         r4, [pc, #0x4C]
  00008	e5943044	 ldr         r3, [r4, #0x44]
  0000c	e3530000	 cmp         r3, #0

; 1071 :         return TRUE;

  00010	13a00001	 movne       r0, #1

; 1102 : }

  00014	18bd4010	 ldmneia     sp!, {r4, lr}
  00018	112fff1e	 bxne        lr

; 1072 : 
; 1073 :     DEBUGMSG(ZONE_INIT,
; 1074 :         (L"+TdPoolInit: %u TDs\r\n",
; 1075 :         USB_CPPI_TD_COUNT));
; 1076 : 
; 1077 :     Lock();

  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          EnterCriticalSection

; 1078 :     DEBUGCHK(g_Dc.pvTdPool != NULL);
; 1079 :     {
; 1080 :     unsigned n;
; 1081 :     TEARDOWN_DESCRIPTOR* pTd = g_Dc.pvTdPool;

  00024	e5943030	 ldr         r3, [r4, #0x30]
  00028	e3a02020	 mov         r2, #0x20
  0002c	e3a01326	 mov         r1, #0x26, 6
  00030		 |$LL3@TdPoolInit|

; 1082 :     for (n = 0; n < USB_CPPI_TD_COUNT; n++, pTd++) {
; 1083 :         pTd->DescInfo = (UINT32)(USB_CPPI41_DESC_TYPE_TEARDOWN << USB_CPPI41_DESC_TYPE_SHIFT);

  00030	e4831020	 str         r1, [r3], #0x20
  00034	e2522001	 subs        r2, r2, #1
  00038	1afffffc	 bne         |$LL3@TdPoolInit|

; 1084 : 
; 1085 :         DEBUGMSG(ZONE_INIT && ZONE_VERBOSE,
; 1086 :             (L"TD %04u: PAddr 0x%08x VAddr 0x%08x\r\n",
; 1087 :             n,
; 1088 :             USBCDMA_DescriptorVAtoPA((HANDLE)&g_Dc.usb[0], pTd),
; 1089 :             pTd));
; 1090 :     }
; 1091 :     }
; 1092 :     g_Dc.fTdPoolInitialised = TRUE;

  0003c	e3a03001	 mov         r3, #1

; 1093 :     Unlock();

  00040	e1a00004	 mov         r0, r4
  00044	e5843044	 str         r3, [r4, #0x44]
  00048	eb000000	 bl          LeaveCriticalSection

; 1094 : 
; 1095 :     DEBUGMSG(ZONE_INIT,
; 1096 :         (L"-TdPoolInit: %s\r\n",
; 1097 :         g_Dc.fTdPoolInitialised ?
; 1098 :             L"SUCCEEDED" :
; 1099 :             L"FALIED"));
; 1100 : 
; 1101 :     return g_Dc.fTdPoolInitialised;

  0004c	e5940044	 ldr         r0, [r4, #0x44]

; 1102 : }

  00050	e8bd4010	 ldmia       sp!, {r4, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$LN16@TdPoolInit|
  00058		 |$LN17@TdPoolInit|
  00058	00000000	 DCD         |g_Dc|
  0005c		 |$M46380|

			 ENDP  ; |TdPoolInit|


  00000			 AREA	 |.pdata|, PDATA
|$T46397| DCD	|$LN10@TdPoolDein|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TdPoolDeinit| PROC

; 1105 : {

  00000		 |$LN10@TdPoolDein|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M46394|

; 1106 :     /* Only deinitialise once */
; 1107 :     if (g_Dc.fTdPoolInitialised == FALSE)

  00004	e59f4040	 ldr         r4, [pc, #0x40]
  00008	e5943044	 ldr         r3, [r4, #0x44]
  0000c	e3530000	 cmp         r3, #0
  00010	0a00000b	 beq         |$LN6@TdPoolDein|

; 1108 :         return;
; 1109 : 
; 1110 :     DEBUGMSG(ZONE_INIT,
; 1111 :         (L"+TdPoolDeinit\r\n"));
; 1112 : 
; 1113 :     Lock();

  00014	e1a00004	 mov         r0, r4
  00018	eb000000	 bl          EnterCriticalSection

; 1114 :     g_Dc.fTdPoolInitialised = FALSE;

  0001c	e3a03000	 mov         r3, #0
  00020	e5843044	 str         r3, [r4, #0x44]

; 1115 :     g_Dc.paTdPool.QuadPart = 0;

  00024	e3a03000	 mov         r3, #0
  00028	e5843038	 str         r3, [r4, #0x38]
  0002c	e3a03000	 mov         r3, #0
  00030	e584303c	 str         r3, [r4, #0x3C]

; 1116 :     g_Dc.pvTdPool = NULL;

  00034	e3a03000	 mov         r3, #0

; 1117 :     Unlock();

  00038	e1a00004	 mov         r0, r4
  0003c	e5843030	 str         r3, [r4, #0x30]
  00040	eb000000	 bl          LeaveCriticalSection
  00044		 |$LN6@TdPoolDein|

; 1118 : 
; 1119 :     DEBUGMSG(ZONE_INIT,
; 1120 :         (L"-TdPoolDeinit\r\n"));
; 1121 : }

  00044	e8bd4010	 ldmia       sp!, {r4, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN11@TdPoolDein|
  0004c		 |$LN12@TdPoolDein|
  0004c	00000000	 DCD         |g_Dc|
  00050		 |$M46395|

			 ENDP  ; |TdPoolDeinit|

	EXPORT	|??_C@_1DK@LONLLCCG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T46412| DCD	|$LN10@QueuePush|
	DCD	0x40002601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@LONLLCCG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r"
	DCB	0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |QueuePush| PROC

; 1162 : {

  00000		 |$LN10@QueuePush|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M46409|
  00004	e1b04001	 movs        r4, r1
  00008	e1a06000	 mov         r6, r0

; 1163 :     UINT32 value = 0;
; 1164 : 
; 1165 :     if (pDescriptor != NULL)

  0000c	e59f5080	 ldr         r5, [pc, #0x80]
  00010	e3a02000	 mov         r2, #0
  00014	0a000015	 beq         |$LN5@QueuePush|

; 1166 :     {
; 1167 :         UINT32 addr  = USBCDMA_DescriptorVAtoPA((HANDLE)&g_Dc.usb[0],pDescriptor);

  00018	e1a01004	 mov         r1, r4
  0001c	e2850050	 add         r0, r5, #0x50
  00020	eb000000	 bl          USBCDMA_DescriptorVAtoPA

; 1168 :         UINT32 size  = 0;
; 1169 : 
; 1170 :         UINT32 type = (*(UINT32*)pDescriptor & USB_CPPI41_DESC_TYPE_MASK) >> USB_CPPI41_DESC_TYPE_SHIFT;

  00024	e5943000	 ldr         r3, [r4]
  00028	e1a07000	 mov         r7, r0
  0002c	e3a04000	 mov         r4, #0
  00030	e1a08da3	 mov         r8, r3, lsr #27

; 1171 :         switch (type)

  00034	e3580013	 cmp         r8, #0x13
  00038	0a000008	 beq         |$LN2@QueuePush|

; 1175 :             break;
; 1176 : 
; 1177 :         default:
; 1178 :             ERRORMSG(TRUE,
; 1179 :                 (L"Invalid descriptor type %u\r\n",
; 1180 :                 type));

  0003c	e59f104c	 ldr         r1, [pc, #0x4C]
  00040	e59f0044	 ldr         r0, [pc, #0x44]
  00044	e3a03b01	 mov         r3, #1, 22
  00048	e383209c	 orr         r2, r3, #0x9C
  0004c	eb000000	 bl          NKDbgPrintfW
  00050	e59f0030	 ldr         r0, [pc, #0x30]
  00054	e1a01008	 mov         r1, r8
  00058	eb000000	 bl          NKDbgPrintfW
  0005c	ea000000	 b           |$LN3@QueuePush|
  00060		 |$LN2@QueuePush|

; 1172 :         {
; 1173 :         case USB_CPPI41_DESC_TYPE_TEARDOWN: /* Teardown descriptor */
; 1174 :             size = (USB_CPPI_TD_SIZE - 24) / 4;

  00060	e3a04002	 mov         r4, #2
  00064		 |$LN3@QueuePush|

; 1181 :         }
; 1182 : 
; 1183 :         value = ((addr & QMGR_QUEUE_N_REG_D_DESC_ADDR_MASK) |
; 1184 :                  (size & QMGR_QUEUE_N_REG_D_DESCSZ_MASK));

  00064	e3c7201f	 bic         r2, r7, #0x1F
  00068	e204301f	 and         r3, r4, #0x1F
  0006c	e1822003	 orr         r2, r2, r3
  00070		 |$LN5@QueuePush|

; 1185 :     }
; 1186 : 
; 1187 :     g_Dc.pCppiRegs->QMQUEUEMGMT[nQueue].QCTRLD = value;

  00070	e595302c	 ldr         r3, [r5, #0x2C]
  00074	e0833206	 add         r3, r3, r6, lsl #4
  00078	e2833a05	 add         r3, r3, #5, 20
  0007c	e583200c	 str         r2, [r3, #0xC]

; 1188 : 
; 1189 :     DEBUGMSG(ZONE_INFO && 0, (L"QueuePush: Queue %u, Value 0x%08x\r\n", nQueue, value));
; 1190 : }

  00080	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN11@QueuePush|
  00088		 |$LN12@QueuePush|
  00088	00000000	 DCD         |??_C@_1DK@LONLLCCG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@|
  0008c		 |$LN13@QueuePush|
  0008c	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00090		 |$LN14@QueuePush|
  00090	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00094		 |$LN15@QueuePush|
  00094	00000000	 DCD         |g_Dc|
  00098		 |$M46410|

			 ENDP  ; |QueuePush|


  00000			 AREA	 |.pdata|, PDATA
|$T46430| DCD	|$LN10@Log2|
	DCD	0x40000900
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Log2|	 PROC

; 1198 : {

  00000		 |$LN10@Log2|
  00000		 |$M46427|
  00000	e1b03000	 movs        r3, r0

; 1199 :     unsigned log2 = 0;

  00004	e3a00000	 mov         r0, #0

; 1200 : 
; 1201 :     while (n != 0) 

  00008	0a000004	 beq         |$LN1@Log2|
  0000c		 |$LL3@Log2|

; 1202 : 	{
; 1203 :         n >>= 1;

  0000c	e1b030a3	 movs        r3, r3, lsr #1

; 1204 :         log2++;

  00010	e2800001	 add         r0, r0, #1
  00014	1afffffc	 bne         |$LL3@Log2|

; 1205 :     }
; 1206 : 
; 1207 :     if (log2 > 0)

  00018	e3500000	 cmp         r0, #0

; 1208 : 	{
; 1209 :         log2--;

  0001c	12400001	 subne       r0, r0, #1
  00020		 |$LN1@Log2|

; 1210 : 	}
; 1211 : 
; 1212 :     return log2;
; 1213 : }

  00020	e12fff1e	 bx          lr
  00024		 |$M46428|

			 ENDP  ; |Log2|

	EXPORT	|USBCDMA_DeregisterUsbModule|
	EXPORT	|??_C@_1JC@LHKEEGKI@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@ECLLDLPE@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@JCCFFDOB@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@| [ DATA ] ; `string'
	IMPORT	|HalFreeCommonBuffer|

  00000			 AREA	 |.pdata|, PDATA
|$T46471| DCD	|$LN35@USBCDMA_De@3|
	DCD	0x40007b02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@LHKEEGKI@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "U", 0x0, "s", 0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d"
	DCB	0x0, "u", 0x0, "l", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "U", 0x0, "S", 0x0, "B", 0x0, " ", 0x0, "m"
	DCB	0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@ECLLDLPE@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "U", 0x0, "s", 0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d"
	DCB	0x0, "u", 0x0, "l", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@JCCFFDOB@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "U", 0x0, "s", 0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d"
	DCB	0x0, "u", 0x0, "l", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "s", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |USBCDMA_DeregisterUsbModule| PROC

; 512  : {

  00000		 |$LN35@USBCDMA_De@3|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M46468|
  00008	e1a05000	 mov         r5, r0

; 513  :     BOOL fRC = FALSE;
; 514  :     UsbModule *pUsbModule;
; 515  :     int i;
; 516  : 
; 517  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 518  :         (L"+USBCDMA_DeregisterUsbModule: 0x%08x\r\n",
; 519  :         hUsbModule));
; 520  : 
; 521  :     // Check driver state
; 522  :     if (g_hDc == 0) 

  0000c	e59f61d4	 ldr         r6, [pc, #0x1D4]
  00010	e3a07000	 mov         r7, #0
  00014	e5963078	 ldr         r3, [r6, #0x78]
  00018	e3530000	 cmp         r3, #0
  0001c	1a000006	 bne         |$LN10@USBCDMA_De@3|

; 523  : 	{
; 524  :         ERRORMSG(1, (L" USBCDMA_DeregisterUsbModule: ERROR - Driver not initialised\r\n"));

  00020	e59f11b0	 ldr         r1, [pc, #0x1B0]
  00024	e59f01a8	 ldr         r0, [pc, #0x1A8]
  00028	e3a02f83	 mov         r2, #0x83, 30
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e59f01ac	 ldr         r0, [pc, #0x1AC]
  00034	eb000000	 bl          NKDbgPrintfW

; 525  :         goto done_unlocked;

  00038	ea000060	 b           |$done_unlocked$45797|
  0003c		 |$LN10@USBCDMA_De@3|

; 526  :     }
; 527  : 
; 528  :     Lock();

  0003c	e59f419c	 ldr         r4, [pc, #0x19C]
  00040	e1a00004	 mov         r0, r4
  00044	eb000000	 bl          EnterCriticalSection

; 529  : 
; 530  :     // Stop CDMA scheduler
; 531  :     for(i=0;i<USB_CPPI_MAX_TX_CHANNELS;i++)
; 532  :         g_scheduleTx[i] = FALSE;

  00048	e286303c	 add         r3, r6, #0x3C
  0004c	e283203c	 add         r2, r3, #0x3C
  00050	e3a01000	 mov         r1, #0
  00054		 |$LN28@USBCDMA_De@3|
  00054	e4831004	 str         r1, [r3], #4
  00058	e1530002	 cmp         r3, r2
  0005c	1afffffc	 bne         |$LN28@USBCDMA_De@3|

; 533  :     for(i=0;i<USB_CPPI_MAX_RX_CHANNELS;i++)
; 534  :         g_scheduleRx[i] = FALSE;

  00060	e3a02000	 mov         r2, #0
  00064	e286303c	 add         r3, r6, #0x3C
  00068		 |$LN30@USBCDMA_De@3|
  00068	e4862004	 str         r2, [r6], #4
  0006c	e1560003	 cmp         r6, r3
  00070	1afffffc	 bne         |$LN30@USBCDMA_De@3|

; 535  :     ConfigureScheduler();

  00074	eb000000	 bl          ConfigureScheduler

; 536  : 
; 537  :     // Check input parameters
; 538  :     if ((hUsbModule != (HANDLE)&g_Dc.usb[0]) && (hUsbModule != (HANDLE)&g_Dc.usb[1])) 

  00078	e2843050	 add         r3, r4, #0x50
  0007c	e1550003	 cmp         r5, r3
  00080	0a00000b	 beq         |$LN3@USBCDMA_De@3|
  00084	e2843080	 add         r3, r4, #0x80
  00088	e1550003	 cmp         r5, r3
  0008c	0a000008	 beq         |$LN3@USBCDMA_De@3|

; 539  : 	{
; 540  :         ERRORMSG(1,
; 541  :             (L" USBCDMA_DeregisterUsbModule: ERROR - Invalid handle 0x%08x\r\n",
; 542  :             hUsbModule));

  00090	e59f1140	 ldr         r1, [pc, #0x140]
  00094	e59f0138	 ldr         r0, [pc, #0x138]
  00098	e3a03c02	 mov         r3, #2, 24
  0009c	e383201e	 orr         r2, r3, #0x1E
  000a0	eb000000	 bl          NKDbgPrintfW
  000a4	e59f0130	 ldr         r0, [pc, #0x130]
  000a8		 |$LN32@USBCDMA_De@3|
  000a8	e1a01005	 mov         r1, r5
  000ac	eb000000	 bl          NKDbgPrintfW

; 543  :         goto done;

  000b0	ea000040	 b           |$done$45808|
  000b4		 |$LN3@USBCDMA_De@3|

; 544  :     }
; 545  : 
; 546  :     pUsbModule = (UsbModule *)hUsbModule;
; 547  : 
; 548  :     // Check module state
; 549  :     if (pUsbModule->callback == NULL) 

  000b4	e5953024	 ldr         r3, [r5, #0x24]
  000b8	e3530000	 cmp         r3, #0
  000bc	1a000006	 bne         |$LN2@USBCDMA_De@3|

; 550  : 	{
; 551  :         ERRORMSG(1,
; 552  :             (L" USBCDMA_DeregisterUsbModule: ERROR - USB module not registered 0x%08x\r\n",
; 553  :             pUsbModule));

  000c0	e59f1110	 ldr         r1, [pc, #0x110]
  000c4	e59f0108	 ldr         r0, [pc, #0x108]
  000c8	e3a03c02	 mov         r3, #2, 24
  000cc	e3832029	 orr         r2, r3, #0x29
  000d0	eb000000	 bl          NKDbgPrintfW
  000d4	e59f00f4	 ldr         r0, [pc, #0xF4]

; 554  :         goto done;

  000d8	eafffff2	 b           |$LN32@USBCDMA_De@3|
  000dc		 |$LN2@USBCDMA_De@3|

; 555  :     }
; 556  : 
; 557  :     // Deinitialise the shared teardown descriptor pool when the last module deregisters
; 558  :     if (pUsbModule == &g_Dc.usb[0])

  000dc	e2843050	 add         r3, r4, #0x50
  000e0	e1550003	 cmp         r5, r3
  000e4	1a00000e	 bne         |$LN20@USBCDMA_De@3|

; 559  : 	{
; 560  :         TdPoolDeinit();

  000e8	e5943044	 ldr         r3, [r4, #0x44]
  000ec	e3530000	 cmp         r3, #0
  000f0	0a00000b	 beq         |$LN20@USBCDMA_De@3|
  000f4	e1a00004	 mov         r0, r4
  000f8	eb000000	 bl          EnterCriticalSection
  000fc	e3a03000	 mov         r3, #0
  00100	e5843044	 str         r3, [r4, #0x44]
  00104	e3a03000	 mov         r3, #0
  00108	e5843038	 str         r3, [r4, #0x38]
  0010c	e3a03000	 mov         r3, #0
  00110	e584303c	 str         r3, [r4, #0x3C]
  00114	e3a03000	 mov         r3, #0
  00118	e1a00004	 mov         r0, r4
  0011c	e5843030	 str         r3, [r4, #0x30]
  00120	eb000000	 bl          LeaveCriticalSection
  00124		 |$LN20@USBCDMA_De@3|

; 561  : 	}
; 562  : 
; 563  :     // Free the USB module's resources
; 564  :     {
; 565  : 		DMA_ADAPTER_OBJECT Adapter;
; 566  : 		Adapter.ObjectSize = sizeof(DMA_ADAPTER_OBJECT);
; 567  : 		Adapter.InterfaceType = Internal;
; 568  : 		Adapter.BusNumber = 0;
; 569  : 
; 570  : 		// Free the USB module's linking RAM
; 571  : 		HalFreeCommonBuffer(
; 572  : 			&Adapter,
; 573  : 			pUsbModule->cbLinkingRamSize,
; 574  : 			pUsbModule->paLinkingRam,
; 575  : 			pUsbModule->pvLinkingRam,
; 576  : 			FALSE);

  00124	e5950014	 ldr         r0, [r5, #0x14]
  00128	e5952018	 ldr         r2, [r5, #0x18]
  0012c	e595301c	 ldr         r3, [r5, #0x1C]
  00130	e5951020	 ldr         r1, [r5, #0x20]
  00134	e58d0000	 str         r0, [sp]
  00138	e3a0e00c	 mov         lr, #0xC
  0013c	e3a06000	 mov         r6, #0
  00140	e3a07000	 mov         r7, #0
  00144	e3a08000	 mov         r8, #0
  00148	e28d0008	 add         r0, sp, #8
  0014c	e1cde0b8	 strh        lr, [sp, #8]
  00150	e58d600c	 str         r6, [sp, #0xC]
  00154	e58d7010	 str         r7, [sp, #0x10]
  00158	e58d8004	 str         r8, [sp, #4]
  0015c	eb000000	 bl          HalFreeCommonBuffer

; 577  : 
; 578  : 		// Reset the USB module's linking RAM parameters
; 579  : 		pUsbModule->cbLinkingRamSize      = 0;
; 580  : 		pUsbModule->paLinkingRam.QuadPart = 0;
; 581  : 		pUsbModule->pvLinkingRam          = NULL;
; 582  : 
; 583  : 		// Free the USB module's descriptor pool
; 584  : 		HalFreeCommonBuffer(
; 585  : 			&Adapter,
; 586  : 			pUsbModule->cbPoolSize,
; 587  : 			pUsbModule->paPool,
; 588  : 			pUsbModule->pvPool,
; 589  : 			FALSE);

  00160	e595e004	 ldr         lr, [r5, #4]
  00164	e5952008	 ldr         r2, [r5, #8]
  00168	e595300c	 ldr         r3, [r5, #0xC]
  0016c	e5951010	 ldr         r1, [r5, #0x10]
  00170	e28d0008	 add         r0, sp, #8
  00174	e58de000	 str         lr, [sp]
  00178	e5858020	 str         r8, [r5, #0x20]
  0017c	e5858018	 str         r8, [r5, #0x18]
  00180	e585801c	 str         r8, [r5, #0x1C]
  00184	e5858014	 str         r8, [r5, #0x14]
  00188	e58d8004	 str         r8, [sp, #4]
  0018c	eb000000	 bl          HalFreeCommonBuffer

; 590  : 
; 591  : 		// Clear the USB module's pool parameters
; 592  : 		pUsbModule->cbPoolSize      = 0;

  00190	e5858010	 str         r8, [r5, #0x10]

; 593  : 		pUsbModule->paPool.QuadPart = 0;

  00194	e5858008	 str         r8, [r5, #8]
  00198	e585800c	 str         r8, [r5, #0xC]

; 594  : 		pUsbModule->pvPool          = NULL;

  0019c	e5858004	 str         r8, [r5, #4]

; 595  : 		pUsbModule->cbHdSize        = 0;

  001a0	e5c58002	 strb        r8, [r5, #2]

; 596  : 		pUsbModule->nHdCount        = 0;

  001a4	e1c580b0	 strh        r8, [r5]

; 597  :     }
; 598  : 
; 599  :     g_Dc.nNextUsbModule--;

  001a8	e5943048	 ldr         r3, [r4, #0x48]

; 600  : 
; 601  :     fRC = TRUE;

  001ac	e3a07001	 mov         r7, #1
  001b0	e2433001	 sub         r3, r3, #1
  001b4	e5843048	 str         r3, [r4, #0x48]
  001b8		 |$done$45808|

; 602  : 
; 603  : done:
; 604  :     Unlock();

  001b8	e1a00004	 mov         r0, r4
  001bc	eb000000	 bl          LeaveCriticalSection
  001c0		 |$done_unlocked$45797|

; 605  : 
; 606  : done_unlocked:
; 607  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 608  :         (L"-USBCDMA_DeregisterUsbModule: %s\r\n",
; 609  :         fRC ?
; 610  :             L"SUCCEEDED" :
; 611  :             L"FAILED"));
; 612  : 
; 613  :     return fRC;
; 614  : }

  001c0	e1a00007	 mov         r0, r7
  001c4	e28dd014	 add         sp, sp, #0x14
  001c8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  001cc	e12fff1e	 bx          lr
  001d0		 |$LN36@USBCDMA_De@3|
  001d0		 |$LN37@USBCDMA_De@3|
  001d0	00000000	 DCD         |??_C@_1JC@LHKEEGKI@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@|
  001d4		 |$LN38@USBCDMA_De@3|
  001d4	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  001d8		 |$LN39@USBCDMA_De@3|
  001d8	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  001dc		 |$LN40@USBCDMA_De@3|
  001dc	00000000	 DCD         |??_C@_1HM@ECLLDLPE@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@|
  001e0		 |$LN41@USBCDMA_De@3|
  001e0	00000000	 DCD         |g_Dc|
  001e4		 |$LN42@USBCDMA_De@3|
  001e4	00000000	 DCD         |??_C@_1HO@JCCFFDOB@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@|
  001e8		 |$LN43@USBCDMA_De@3|
  001e8	00000000	 DCD         |g_scheduleRx|
  001ec		 |$M46469|

			 ENDP  ; |USBCDMA_DeregisterUsbModule|

	EXPORT	|USBCDMA_ConfigureScheduleRx|

  00000			 AREA	 |.pdata|, PDATA
|$T46488| DCD	|$LN7@USBCDMA_Co|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |USBCDMA_ConfigureScheduleRx| PROC

; 714  : {

  00000		 |$LN7@USBCDMA_Co|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M46485|

; 715  :     // Check input parameter
; 716  :     if(chanNum >= USB_CPPI_MAX_RX_CHANNELS)

  00004	e350000f	 cmp         r0, #0xF
  00008	2a000004	 bcs         |$LN1@USBCDMA_Co|

; 717  :     {
; 718  :         // invalid parameter
; 719  :         return;
; 720  :     }
; 721  : 
; 722  :     // Check current state - only need to reconfigure if
; 723  :     // required state is different
; 724  :     if(g_scheduleRx[chanNum] != enable)

  0000c	e59f2014	 ldr         r2, [pc, #0x14]
  00010	e7b23100	 ldr         r3, [r2, +r0, lsl #2]!
  00014	e1530001	 cmp         r3, r1

; 725  :     {
; 726  :         // update scheduler list
; 727  :         g_scheduleRx[chanNum] = enable;

  00018	15821000	 strne       r1, [r2]

; 728  :         // reconfigure scheduler
; 729  :         ConfigureScheduler();

  0001c	1b000000	 blne        ConfigureScheduler
  00020		 |$LN1@USBCDMA_Co|

; 730  :     }
; 731  : }

  00020	e49de004	 ldr         lr, [sp], #4
  00024	e12fff1e	 bx          lr
  00028		 |$LN8@USBCDMA_Co|
  00028		 |$LN9@USBCDMA_Co|
  00028	00000000	 DCD         |g_scheduleRx|
  0002c		 |$M46486|

			 ENDP  ; |USBCDMA_ConfigureScheduleRx|

	EXPORT	|USBCDMA_ConfigureScheduleTx|

  00000			 AREA	 |.pdata|, PDATA
|$T46499| DCD	|$LN7@USBCDMA_Co@2|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |USBCDMA_ConfigureScheduleTx| PROC

; 737  : {

  00000		 |$LN7@USBCDMA_Co@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M46496|

; 738  :     // Check input parameter
; 739  :     if(chanNum >= USB_CPPI_MAX_TX_CHANNELS)

  00004	e350000f	 cmp         r0, #0xF
  00008	2a000004	 bcs         |$LN1@USBCDMA_Co@2|

; 740  :     {
; 741  :         // invalid parameter
; 742  :         return;
; 743  :     }
; 744  : 
; 745  :     // Check current state - only need to reconfigure if
; 746  :     // required state is different
; 747  :     if(g_scheduleTx[chanNum] != enable)

  0000c	e59f2014	 ldr         r2, [pc, #0x14]
  00010	e7b23100	 ldr         r3, [r2, +r0, lsl #2]!
  00014	e1530001	 cmp         r3, r1

; 748  :     {
; 749  :         // update scheduler list
; 750  :         g_scheduleTx[chanNum] = enable;

  00018	15821000	 strne       r1, [r2]

; 751  :         // reconfigure scheduler
; 752  :         ConfigureScheduler();

  0001c	1b000000	 blne        ConfigureScheduler
  00020		 |$LN1@USBCDMA_Co@2|

; 753  :     }
; 754  : }

  00020	e49de004	 ldr         lr, [sp], #4
  00024	e12fff1e	 bx          lr
  00028		 |$LN8@USBCDMA_Co@2|
  00028		 |$LN9@USBCDMA_Co@2|
  00028	00000000	 DCD         |g_scheduleTx|
  0002c		 |$M46497|

			 ENDP  ; |USBCDMA_ConfigureScheduleTx|

	EXPORT	|UCD_Deinit|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|InterruptDisable|
	IMPORT	|CloseHandle|
	IMPORT	|TerminateThread|

  00000			 AREA	 |.pdata|, PDATA
|$T46525| DCD	|$LN23@UCD_Deinit|
	DCD	0x40004701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UCD_Deinit| PROC

; 946  : {

  00000		 |$LN23@UCD_Deinit|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M46522|

; 947  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 948  :         (L"+UCD_Deinit\r\n"));
; 949  : 
; 950  :     if (hDeviceContext != (DWORD)&g_Dc) {

  00004	e59f410c	 ldr         r4, [pc, #0x10C]
  00008	e59f5104	 ldr         r5, [pc, #0x104]
  0000c	e1500004	 cmp         r0, r4
  00010	1a000038	 bne         |$done$45957|

; 951  :         DEBUGMSG(ZONE_ERROR,
; 952  :             (L" UCD_Deinit: ERROR - Invalid handle 0x%08x\r\n",
; 953  :             hDeviceContext));
; 954  :         goto done;
; 955  :     }
; 956  : 
; 957  :     Lock();

  00014	e1a00004	 mov         r0, r4
  00018	eb000000	 bl          EnterCriticalSection

; 958  : 
; 959  :     // Ensure that any registered modules are deregistered
; 960  :     while (g_Dc.nNextUsbModule)

  0001c	e5943048	 ldr         r3, [r4, #0x48]
  00020	e3530000	 cmp         r3, #0
  00024	0a000008	 beq         |$LN6@UCD_Deinit|
  00028	e2846050	 add         r6, r4, #0x50
  0002c		 |$LL7@UCD_Deinit|

; 961  :         USBCDMA_DeregisterUsbModule((HANDLE)&g_Dc.usb[--g_Dc.nNextUsbModule]);

  0002c	e2432001	 sub         r2, r3, #1
  00030	e0823082	 add         r3, r2, r2, lsl #1
  00034	e0860203	 add         r0, r6, r3, lsl #4
  00038	e5842048	 str         r2, [r4, #0x48]
  0003c	eb000000	 bl          USBCDMA_DeregisterUsbModule
  00040	e5943048	 ldr         r3, [r4, #0x48]
  00044	e3530000	 cmp         r3, #0
  00048	1afffff7	 bne         |$LL7@UCD_Deinit|
  0004c		 |$LN6@UCD_Deinit|

; 962  : 
; 963  :     g_Dc.fIntrThreadClosing = TRUE;

  0004c	e3a03001	 mov         r3, #1
  00050	e5843028	 str         r3, [r4, #0x28]

; 964  : 
; 965  :     if (g_Dc.hIntrEvent) {

  00054	e594001c	 ldr         r0, [r4, #0x1C]
  00058	e3500000	 cmp         r0, #0
  0005c	0a000016	 beq         |$LN5@UCD_Deinit|

; 966  :         SetEvent(g_Dc.hIntrEvent);

  00060	e3a01003	 mov         r1, #3
  00064	eb000000	 bl          EventModify

; 967  :         if (g_Dc.hIntrThread) {

  00068	e5940020	 ldr         r0, [r4, #0x20]
  0006c	e3500000	 cmp         r0, #0
  00070	0a00000a	 beq         |$LN4@UCD_Deinit|
  00074	e3a03c13	 mov         r3, #0x13, 24

; 968  :             if (WaitForSingleObject(g_Dc.hIntrThread, 5000) != WAIT_OBJECT_0 ) {

  00078	e3831088	 orr         r1, r3, #0x88
  0007c	eb000000	 bl          WaitForSingleObject
  00080	e3500000	 cmp         r0, #0

; 969  :                 DEBUGCHK(0);
; 970  : #pragma warning(push)
; 971  : #pragma warning(disable:6258)
; 972  :                 TerminateThread(g_Dc.hIntrThread, (DWORD)-1);

  00084	15940020	 ldrne       r0, [r4, #0x20]
  00088	13e01000	 mvnne       r1, #0
  0008c	1b000000	 blne        TerminateThread

; 973  : #pragma warning(pop)
; 974  :             }
; 975  :             CloseHandle(g_Dc.hIntrThread);

  00090	e5940020	 ldr         r0, [r4, #0x20]
  00094	eb000000	 bl          CloseHandle

; 976  :             g_Dc.hIntrThread = NULL;

  00098	e3a03000	 mov         r3, #0
  0009c	e5843020	 str         r3, [r4, #0x20]
  000a0		 |$LN4@UCD_Deinit|

; 977  :         }
; 978  :         InterruptDisable(g_Dc.dwSysIntr);

  000a0	e5940018	 ldr         r0, [r4, #0x18]
  000a4	eb000000	 bl          InterruptDisable

; 979  :         CloseHandle(g_Dc.hIntrEvent);

  000a8	e594001c	 ldr         r0, [r4, #0x1C]
  000ac	eb000000	 bl          CloseHandle

; 980  :         g_Dc.hIntrEvent = NULL;

  000b0	e3a03000	 mov         r3, #0
  000b4	e584301c	 str         r3, [r4, #0x1C]

; 981  :     }
; 982  :     else

  000b8	ea000001	 b           |$LN2@UCD_Deinit|
  000bc		 |$LN5@UCD_Deinit|

; 983  :         InterruptDisable(g_Dc.dwSysIntr);

  000bc	e5940018	 ldr         r0, [r4, #0x18]
  000c0	eb000000	 bl          InterruptDisable
  000c4		 |$LN2@UCD_Deinit|

; 984  : 
; 985  :     if (g_Dc.pCppiRegs) 

  000c4	e594002c	 ldr         r0, [r4, #0x2C]
  000c8	e3500000	 cmp         r0, #0
  000cc	0a000003	 beq         |$LN1@UCD_Deinit|

; 986  : 	{
; 987  :         MmUnmapIoSpace(g_Dc.pCppiRegs, sizeof(CppiRegs));

  000d0	e3a01c5e	 mov         r1, #0x5E, 24
  000d4	eb000000	 bl          MmUnmapIoSpace

; 988  :         g_Dc.pCppiRegs = NULL;

  000d8	e3a03000	 mov         r3, #0
  000dc	e584302c	 str         r3, [r4, #0x2C]
  000e0		 |$LN1@UCD_Deinit|

; 989  :     }
; 990  : 
; 991  :     g_hDc = 0;

  000e0	e3a03000	 mov         r3, #0

; 992  : 
; 993  :     Unlock();

  000e4	e1a00004	 mov         r0, r4
  000e8	e5853000	 str         r3, [r5]
  000ec	eb000000	 bl          LeaveCriticalSection

; 994  : 
; 995  :     DeleteCriticalSection(&g_Dc.csLock);

  000f0	e1a00004	 mov         r0, r4
  000f4	eb000000	 bl          DeleteCriticalSection
  000f8		 |$done$45957|

; 996  : 
; 997  : done:
; 998  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 999  :         (L"-UCD_Deinit: %s\r\n",
; 1000 :         (g_hDc == 0) ?
; 1001 :             L"SUCCEEDED" :
; 1002 :             L"FAILED"));
; 1003 : 
; 1004 :     return (g_hDc == 0);

  000f8	e5953000	 ldr         r3, [r5]
  000fc	e3530000	 cmp         r3, #0
  00100	03a00001	 moveq       r0, #1

; 1005 : }

  00104	08bd4070	 ldmeqia     sp!, {r4 - r6, lr}

; 996  : 
; 997  : done:
; 998  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 999  :         (L"-UCD_Deinit: %s\r\n",
; 1000 :         (g_hDc == 0) ?
; 1001 :             L"SUCCEEDED" :
; 1002 :             L"FAILED"));
; 1003 : 
; 1004 :     return (g_hDc == 0);

  00108	13a00000	 movne       r0, #0

; 1005 : }

  0010c	18bd4070	 ldmneia     sp!, {r4 - r6, lr}
  00110	e12fff1e	 bx          lr
  00114		 |$LN24@UCD_Deinit|
  00114		 |$LN25@UCD_Deinit|
  00114	00000000	 DCD         |g_hDc|
  00118		 |$LN26@UCD_Deinit|
  00118	00000000	 DCD         |g_Dc|
  0011c		 |$M46523|

			 ENDP  ; |UCD_Deinit|


  00000			 AREA	 |.pdata|, PDATA
|$T46584| DCD	|$LN33@TdFreeQueu|
	DCD	0x40004001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TdFreeQueueInit| PROC

; 1124 : {

  00000		 |$LN33@TdFreeQueu|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M46581|

; 1125 :     BOOL fInitialised = FALSE;
; 1126 : 
; 1127 :     DEBUGMSG(ZONE_INIT,
; 1128 :         (L"+TdFreeQueueInit\r\n"));
; 1129 : 
; 1130 :     /* Teardown descriptor pool must be initialised before teardown free queue */
; 1131 :     TdPoolInit();

  00004	e59f40f0	 ldr         r4, [pc, #0xF0]
  00008	e5943044	 ldr         r3, [r4, #0x44]
  0000c	e3530000	 cmp         r3, #0
  00010	1a00000b	 bne         |$LN14@TdFreeQueu|
  00014	e1a00004	 mov         r0, r4
  00018	eb000000	 bl          EnterCriticalSection
  0001c	e5943030	 ldr         r3, [r4, #0x30]
  00020	e3a02020	 mov         r2, #0x20
  00024	e3a01326	 mov         r1, #0x26, 6
  00028		 |$LL8@TdFreeQueu|
  00028	e4831020	 str         r1, [r3], #0x20
  0002c	e2522001	 subs        r2, r2, #1
  00030	1afffffc	 bne         |$LL8@TdFreeQueu|
  00034	e3a03001	 mov         r3, #1
  00038	e1a00004	 mov         r0, r4
  0003c	e5843044	 str         r3, [r4, #0x44]
  00040	eb000000	 bl          LeaveCriticalSection
  00044		 |$LN14@TdFreeQueu|

; 1132 : 
; 1133 :     Lock();

  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          EnterCriticalSection

; 1134 : 
; 1135 :     g_Dc.pCppiRegs->TDFDQ =
; 1136 :         (USB_CPPI_XXCMPL_QMGR << 12) |
; 1137 :         (USB_CPPI_TDFREE_QNUM << 0);

  0004c	e594302c	 ldr         r3, [r4, #0x2C]
  00050	e3a0200f	 mov         r2, #0xF

; 1138 : 
; 1139 :     {
; 1140 : 		unsigned n;
; 1141 : 		TEARDOWN_DESCRIPTOR *pTd = g_Dc.pvTdPool;

  00054	e3a09020	 mov         r9, #0x20
  00058	e5832004	 str         r2, [r3, #4]
  0005c	e5945030	 ldr         r5, [r4, #0x30]
  00060	e3a0ab01	 mov         r10, #1, 22
  00064		 |$LL3@TdFreeQueu|

; 1142 : 		for (n = 0; n < USB_CPPI_TD_COUNT; n++, pTd++)
; 1143 : 		{
; 1144 : 			QueuePush(USB_CPPI_TDFREE_QNUM, pTd);

  00064	e3a02000	 mov         r2, #0
  00068	e3550000	 cmp         r5, #0
  0006c	0a000014	 beq         |$LN22@TdFreeQueu|
  00070	e1a01005	 mov         r1, r5
  00074	e2840050	 add         r0, r4, #0x50
  00078	eb000000	 bl          USBCDMA_DescriptorVAtoPA
  0007c	e5953000	 ldr         r3, [r5]
  00080	e1a08000	 mov         r8, r0
  00084	e3a06000	 mov         r6, #0
  00088	e1a07da3	 mov         r7, r3, lsr #27
  0008c	e3570013	 cmp         r7, #0x13
  00090	0a000007	 beq         |$LN19@TdFreeQueu|
  00094	e59f105c	 ldr         r1, [pc, #0x5C]
  00098	e59f0054	 ldr         r0, [pc, #0x54]
  0009c	e38a209c	 orr         r2, r10, #0x9C
  000a0	eb000000	 bl          NKDbgPrintfW
  000a4	e59f0044	 ldr         r0, [pc, #0x44]
  000a8	e1a01007	 mov         r1, r7
  000ac	eb000000	 bl          NKDbgPrintfW
  000b0	ea000000	 b           |$LN20@TdFreeQueu|
  000b4		 |$LN19@TdFreeQueu|
  000b4	e3a06002	 mov         r6, #2
  000b8		 |$LN20@TdFreeQueu|
  000b8	e3c8201f	 bic         r2, r8, #0x1F
  000bc	e206301f	 and         r3, r6, #0x1F
  000c0	e1822003	 orr         r2, r2, r3
  000c4		 |$LN22@TdFreeQueu|
  000c4	e594302c	 ldr         r3, [r4, #0x2C]
  000c8	e2855020	 add         r5, r5, #0x20
  000cc	e2599001	 subs        r9, r9, #1
  000d0	e2833a05	 add         r3, r3, #5, 20
  000d4	e58320fc	 str         r2, [r3, #0xFC]
  000d8	1affffe1	 bne         |$LL3@TdFreeQueu|

; 1145 : 		}
; 1146 :     }
; 1147 : 
; 1148 :     fInitialised = TRUE;
; 1149 : 
; 1150 :     Unlock();

  000dc	e1a00004	 mov         r0, r4
  000e0	eb000000	 bl          LeaveCriticalSection

; 1151 : 
; 1152 :     DEBUGMSG(ZONE_INIT,
; 1153 :         (L"-TdFreeQueueInit: %s\r\n",
; 1154 :         fInitialised ?
; 1155 :             L"SUCCEEDED" :
; 1156 :             L"FALIED"));
; 1157 : 
; 1158 :     return fInitialised;

  000e4	e3a00001	 mov         r0, #1

; 1159 : }

  000e8	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000ec	e12fff1e	 bx          lr
  000f0		 |$LN34@TdFreeQueu|
  000f0		 |$LN35@TdFreeQueu|
  000f0	00000000	 DCD         |??_C@_1DK@LONLLCCG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@|
  000f4		 |$LN36@TdFreeQueu|
  000f4	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  000f8		 |$LN37@TdFreeQueu|
  000f8	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  000fc		 |$LN38@TdFreeQueu|
  000fc	00000000	 DCD         |g_Dc|
  00100		 |$M46582|

			 ENDP  ; |TdFreeQueueInit|


  00000			 AREA	 |.pdata|, PDATA
|$T46613| DCD	|$LN14@IsPow2|
	DCD	0x40000e00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IsPow2| PROC

; 1193 : {

  00000		 |$LN14@IsPow2|
  00000		 |$M46610|
  00000	e3500000	 cmp         r0, #0

; 1194 :     return ((unsigned int)(1 << Log2(n)) == n);

  00004	e1a02000	 mov         r2, r0
  00008	e3a03000	 mov         r3, #0
  0000c	0a000004	 beq         |$LN5@IsPow2|
  00010		 |$LL7@IsPow2|
  00010	e1b020a2	 movs        r2, r2, lsr #1
  00014	e2833001	 add         r3, r3, #1
  00018	1afffffc	 bne         |$LL7@IsPow2|
  0001c	e3530000	 cmp         r3, #0
  00020	12433001	 subne       r3, r3, #1
  00024		 |$LN5@IsPow2|
  00024	e3a02001	 mov         r2, #1
  00028	e1500312	 cmp         r0, r2, lsl r3
  0002c	03a00001	 moveq       r0, #1
  00030	13a00000	 movne       r0, #0

; 1195 : }

  00034	e12fff1e	 bx          lr
  00038		 |$M46611|

			 ENDP  ; |IsPow2|

	EXPORT	|USBCDMA_RegisterUsbModule|
	EXPORT	|??_C@_1HE@BGFLAGEJ@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@KJEGINGG@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KM@NNNFEEDP@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LE@EFPEDKKD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1II@GAJJLCIH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@MPLEJILA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@LCDFCJNL@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@GIAMIHPK@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@IECGBIPL@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	IMPORT	|HalAllocateCommonBuffer|

  00000			 AREA	 |.pdata|, PDATA
|$T46779| DCD	|$LN113@USBCDMA_Re|
	DCD	0x40015202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@BGFLAGEJ@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "n", 0x0, "H", 0x0, "d", 0x0, "C", 0x0, "o"
	DCB	0x0, "u", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@KJEGINGG@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "c", 0x0, "b", 0x0, "H", 0x0, "d", 0x0, "S"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@NNNFEEDP@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " ", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "k", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "R", 0x0, "A", 0x0, "M", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LE@EFPEDKKD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r", 0x0, "i", 0x0, "p"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "p", 0x0, "o"
	DCB	0x0, "o", 0x0, "l", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@GAJJLCIH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "u"
	DCB	0x0, "l", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "y", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@MPLEJILA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "b"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@LCDFCJNL@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "p", 0x0, "p", 0x0, "v", 0x0, "H", 0x0, "d"
	DCB	0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@GIAMIHPK@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "p", 0x0, "p", 0x0, "a", 0x0, "H", 0x0, "d"
	DCB	0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@IECGBIPL@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "D"
	DCB	0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |USBCDMA_RegisterUsbModule| PROC

; 251  : {

  00000		 |$LN113@USBCDMA_Re|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd01c	 sub         sp, sp, #0x1C
  00008		 |$M46776|
  00008	e1a08003	 mov         r8, r3
  0000c	e58d8004	 str         r8, [sp, #4]
  00010	e1a0b002	 mov         r11, r2
  00014	e1a07001	 mov         r7, r1
  00018	e1a06000	 mov         r6, r0

; 252  :     HANDLE hUsbModule = NULL;
; 253  :     UsbModule *pUsbModule = NULL;
; 254  :     int i;
; 255  : 
; 256  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 257  :     (L"+USBCDMA_RegisterUsbModule: %u HDs, %u bytes, 0x%08x, 0x%08x, 0x%08x, 0x%08x\r\n",
; 258  :         nHdCount,
; 259  :         cbHdSize,
; 260  :         ppaHdPool,
; 261  :         ppvHdPool,
; 262  :         callback,
; 263  :         param));
; 264  : 
; 265  :     // Check driver state
; 266  :     if (g_hDc == 0) 

  0001c	e59f9520	 ldr         r9, [pc, #0x520]
  00020	e3a04000	 mov         r4, #0
  00024	e58d4000	 str         r4, [sp]
  00028	e5990078	 ldr         r0, [r9, #0x78]
  0002c	e3a05000	 mov         r5, #0
  00030	e3500000	 cmp         r0, #0
  00034	1a000007	 bne         |$LN28@USBCDMA_Re|

; 267  : 	{
; 268  :         ERRORMSG(1,
; 269  :             (L" USBCDMA_RegisterUsbModule: ERROR - Driver not initialised\r\n"));

  00038	e59f14dc	 ldr         r1, [pc, #0x4DC]
  0003c	e59f04d4	 ldr         r0, [pc, #0x4D4]
  00040	e3a03c01	 mov         r3, #1, 24
  00044	e383200d	 orr         r2, r3, #0xD
  00048	eb000000	 bl          NKDbgPrintfW
  0004c	e59f04ec	 ldr         r0, [pc, #0x4EC]
  00050	eb000000	 bl          NKDbgPrintfW

; 270  :         goto done_unlocked;

  00054	ea000128	 b           |$LN101@USBCDMA_Re|
  00058		 |$LN28@USBCDMA_Re|

; 271  :     }
; 272  : 
; 273  :     Lock();

  00058	e59f44dc	 ldr         r4, [pc, #0x4DC]
  0005c	e1a00004	 mov         r0, r4
  00060	eb000000	 bl          EnterCriticalSection

; 274  : 
; 275  :     // Check input parameters
; 276  : 
; 277  :     if (!IsPow2(nHdCount) || (nHdCount < 32) || (nHdCount > 4096)) 

  00064	e1b01006	 movs        r1, r6
  00068	e1a02001	 mov         r2, r1
  0006c	e3a03000	 mov         r3, #0
  00070	0a000004	 beq         |$LN37@USBCDMA_Re|
  00074		 |$LL39@USBCDMA_Re|
  00074	e1b020a2	 movs        r2, r2, lsr #1
  00078	e2833001	 add         r3, r3, #1
  0007c	1afffffc	 bne         |$LL39@USBCDMA_Re|
  00080	e3530000	 cmp         r3, #0
  00084	12433001	 subne       r3, r3, #1
  00088		 |$LN37@USBCDMA_Re|
  00088	e3a02001	 mov         r2, #1
  0008c	e1510312	 cmp         r1, r2, lsl r3
  00090	1a00010c	 bne         |$LN26@USBCDMA_Re|
  00094	e3560020	 cmp         r6, #0x20
  00098	3a00010a	 bcc         |$LN26@USBCDMA_Re|
  0009c	e3560a01	 cmp         r6, #1, 20
  000a0	8a000108	 bhi         |$LN26@USBCDMA_Re|

; 282  :         goto done;
; 283  :     }
; 284  : 
; 285  :     if (!IsPow2(cbHdSize) || (cbHdSize < 32)) 

  000a4	e1b01007	 movs        r1, r7
  000a8	e1a02001	 mov         r2, r1
  000ac	e3a03000	 mov         r3, #0
  000b0	0a000004	 beq         |$LN46@USBCDMA_Re|
  000b4		 |$LL48@USBCDMA_Re|
  000b4	e1b020a2	 movs        r2, r2, lsr #1
  000b8	e2833001	 add         r3, r3, #1
  000bc	1afffffc	 bne         |$LL48@USBCDMA_Re|
  000c0	e3530000	 cmp         r3, #0
  000c4	12433001	 subne       r3, r3, #1
  000c8		 |$LN46@USBCDMA_Re|
  000c8	e3a02001	 mov         r2, #1
  000cc	e1510312	 cmp         r1, r2, lsl r3
  000d0	1a0000f4	 bne         |$LN24@USBCDMA_Re|
  000d4	e3570020	 cmp         r7, #0x20
  000d8	3a0000f2	 bcc         |$LN24@USBCDMA_Re|

; 291  :     }
; 292  : 
; 293  :     if (ppaHdPool == NULL) 

  000dc	e35b0000	 cmp         r11, #0
  000e0	1a000007	 bne         |$LN23@USBCDMA_Re|

; 294  : 	{
; 295  :         ERRORMSG(1,
; 296  :             (L" USBCDMA_RegisterUsbModule: ERROR - Invalid ppaHdPool 0x%08x\r\n",
; 297  :             ppaHdPool));

  000e4	e59f1430	 ldr         r1, [pc, #0x430]
  000e8	e59f0428	 ldr         r0, [pc, #0x428]
  000ec	e3a03c01	 mov         r3, #1, 24
  000f0	e3832029	 orr         r2, r3, #0x29
  000f4	eb000000	 bl          NKDbgPrintfW
  000f8	e59f0438	 ldr         r0, [pc, #0x438]
  000fc	e3a01000	 mov         r1, #0

; 298  :         goto done;

  00100	ea0000f7	 b           |$LN108@USBCDMA_Re|
  00104		 |$LN23@USBCDMA_Re|

; 299  :     }
; 300  : 
; 301  :     if (ppvHdPool == NULL) 

  00104	e3580000	 cmp         r8, #0
  00108	1a000007	 bne         |$LN22@USBCDMA_Re|

; 302  : 	{
; 303  :         ERRORMSG(1,
; 304  :             (L" USBCDMA_RegisterUsbModule: ERROR - Invalid ppvHdPool 0x%08x\r\n",
; 305  :             ppvHdPool));

  0010c	e59f1408	 ldr         r1, [pc, #0x408]
  00110	e59f0400	 ldr         r0, [pc, #0x400]
  00114	e3a03c01	 mov         r3, #1, 24
  00118	e3832031	 orr         r2, r3, #0x31
  0011c	eb000000	 bl          NKDbgPrintfW
  00120	e59f040c	 ldr         r0, [pc, #0x40C]
  00124	e3a01000	 mov         r1, #0
  00128	ea0000ed	 b           |$LN108@USBCDMA_Re|
  0012c		 |$LN22@USBCDMA_Re|

; 306  :         goto done;
; 307  :     }
; 308  : 
; 309  :     if (callback == NULL) 

  0012c	e59da040	 ldr         r10, [sp, #0x40]
  00130	e35a0000	 cmp         r10, #0
  00134	1a000007	 bne         |$LN21@USBCDMA_Re|

; 310  : 	{
; 311  :         ERRORMSG(1,
; 312  :             (L" USBCDMA_RegisterUsbModule: ERROR - Invalid callback 0x%08x\r\n",
; 313  :             callback));

  00138	e59f13dc	 ldr         r1, [pc, #0x3DC]
  0013c	e59f03d4	 ldr         r0, [pc, #0x3D4]
  00140	e3a03c01	 mov         r3, #1, 24
  00144	e3832039	 orr         r2, r3, #0x39
  00148	eb000000	 bl          NKDbgPrintfW
  0014c	e59f03dc	 ldr         r0, [pc, #0x3DC]
  00150	e3a01000	 mov         r1, #0
  00154	ea0000e2	 b           |$LN108@USBCDMA_Re|
  00158		 |$LN21@USBCDMA_Re|

; 314  :         goto done;
; 315  :     }
; 316  : 
; 317  :     // Initialise [OUT] parameters
; 318  :     (*ppaHdPool).QuadPart = 0;

  00158	e3a03000	 mov         r3, #0
  0015c	e58b3000	 str         r3, [r11]
  00160	e58b3004	 str         r3, [r11, #4]

; 319  :     (*ppvHdPool) = NULL;

  00164	e5883000	 str         r3, [r8]

; 320  : 
; 321  :     // Check driver state
; 322  :     if (g_Dc.nNextUsbModule >= 2) 

  00168	e5941048	 ldr         r1, [r4, #0x48]
  0016c	e3510002	 cmp         r1, #2
  00170	3a000007	 bcc         |$LN20@USBCDMA_Re|

; 323  : 	{
; 324  :         ERRORMSG(1,
; 325  :             (L" USBCDMA_RegisterUsbModule: ERROR - %u modules already registered\r\n",
; 326  :             g_Dc.nNextUsbModule));

  00174	e59f13a0	 ldr         r1, [pc, #0x3A0]
  00178	e59f0398	 ldr         r0, [pc, #0x398]
  0017c	e3a03c01	 mov         r3, #1, 24
  00180	e3832046	 orr         r2, r3, #0x46
  00184	eb000000	 bl          NKDbgPrintfW
  00188	e5941048	 ldr         r1, [r4, #0x48]
  0018c	e59f0398	 ldr         r0, [pc, #0x398]

; 327  :         goto done;

  00190	ea0000d3	 b           |$LN108@USBCDMA_Re|
  00194		 |$LN20@USBCDMA_Re|

; 328  :     }
; 329  : 
; 330  :     pUsbModule = &g_Dc.usb[g_Dc.nNextUsbModule];
; 331  : 
; 332  :     // Check the USB module state is uninitialised
; 333  :     DEBUGCHK(pUsbModule->nHdCount == 0);
; 334  :     DEBUGCHK(pUsbModule->cbHdSize == 0);
; 335  :     DEBUGCHK(pUsbModule->pvPool == NULL);
; 336  :     DEBUGCHK(pUsbModule->paPool.QuadPart == 0);
; 337  :     DEBUGCHK(pUsbModule->cbPoolSize == 0);
; 338  :     DEBUGCHK(pUsbModule->pvLinkingRam == NULL);
; 339  :     DEBUGCHK(pUsbModule->paLinkingRam.QuadPart == 0);
; 340  :     DEBUGCHK(pUsbModule->cbLinkingRamSize == 0);
; 341  :     //DEBUGCHK(pUsbModule->callback == NULL);
; 342  :     //DEBUGCHK(pUsbModule->param == NULL);
; 343  : 
; 344  :     // Allocate the USB module's host descriptor pool
; 345  :     {
; 346  : 		DMA_ADAPTER_OBJECT Adapter;
; 347  : 		VOID *pvPool;
; 348  : 		PHYSICAL_ADDRESS paPool;
; 349  : 		ULONG cbPoolSize = nHdCount * cbHdSize;

  00194	e0812081	 add         r2, r1, r1, lsl #1
  00198	e2843050	 add         r3, r4, #0x50

; 350  : 
; 351  : 		// The first module to register allocates additional space at the end of its host descriptor
; 352  : 		// pool for the shared teardown descriptor pool
; 353  : 		if (g_Dc.nNextUsbModule == 0)

  0019c	e3510000	 cmp         r1, #0
  001a0	e0835202	 add         r5, r3, r2, lsl #4

; 354  : 		{
; 355  : 			cbPoolSize += g_Dc.cbTdPoolSize;

  001a4	05943040	 ldreq       r3, [r4, #0x40]
  001a8	e0080697	 mul         r8, r7, r6
  001ac	00283697	 mlaeq       r8, r7, r6, r3

; 356  : 		}
; 357  : 
; 358  : 		Adapter.ObjectSize = sizeof(DMA_ADAPTER_OBJECT);

  001b0	e3a0300c	 mov         r3, #0xC

; 359  : 		Adapter.InterfaceType = Internal;

  001b4	e3a02000	 mov         r2, #0

; 360  : 		Adapter.BusNumber = 0;

  001b8	e3a01000	 mov         r1, #0
  001bc	e1cd31b0	 strh        r3, [sp, #0x10]
  001c0	e58d2014	 str         r2, [sp, #0x14]
  001c4	e58d1018	 str         r1, [sp, #0x18]

; 361  : 
; 362  : 		pvPool = HalAllocateCommonBuffer(
; 363  : 			&Adapter,
; 364  : 			cbPoolSize,
; 365  : 			&paPool,
; 366  : 			FALSE);

  001c8	e3a03000	 mov         r3, #0
  001cc	e1a01008	 mov         r1, r8
  001d0	e28d2008	 add         r2, sp, #8
  001d4	e28d0010	 add         r0, sp, #0x10
  001d8	eb000000	 bl          HalAllocateCommonBuffer
  001dc	e3500000	 cmp         r0, #0

; 367  : 
; 368  : 		if (pvPool == NULL) 

  001e0	1a000006	 bne         |$LN18@USBCDMA_Re|

; 369  : 		{
; 370  : 			ERRORMSG(1,
; 371  : 				(L" USBCDMA_RegisterUsbModule: ERROR - Failed to allocate %u bytes for the descriptor pool\r\n", 
; 372  : 				cbPoolSize));

  001e4	e59f1330	 ldr         r1, [pc, #0x330]
  001e8	e59f0328	 ldr         r0, [pc, #0x328]
  001ec	e3a02f5d	 mov         r2, #0x5D, 30
  001f0	eb000000	 bl          NKDbgPrintfW
  001f4	e59f032c	 ldr         r0, [pc, #0x32C]
  001f8	e1a01008	 mov         r1, r8

; 373  : 			goto done;

  001fc	ea0000b8	 b           |$LN108@USBCDMA_Re|
  00200		 |$LN18@USBCDMA_Re|

; 374  : 		}
; 375  : 
; 376  : 		// Set the USB module's pool parameters
; 377  : 		pUsbModule->nHdCount   = nHdCount;
; 378  : 		pUsbModule->cbHdSize   = cbHdSize;
; 379  : 		pUsbModule->pvPool     = pvPool;
; 380  : 		pUsbModule->paPool     = paPool;

  00200	e59d3008	 ldr         r3, [sp, #8]
  00204	e59d200c	 ldr         r2, [sp, #0xC]
  00208	e1c560b0	 strh        r6, [r5]
  0020c	e285c004	 add         r12, r5, #4
  00210	e88c0009	 stmia       r12, {r0, r3}
  00214	e285c00c	 add         r12, r5, #0xC
  00218	e88c0104	 stmia       r12, {r2, r8}
  0021c	e5c57002	 strb        r7, [r5, #2]

; 381  : 		pUsbModule->cbPoolSize = cbPoolSize;
; 382  :     }
; 383  : 
; 384  :     // Save information about the shared teardown descriptor memory area
; 385  :     if (g_Dc.nNextUsbModule == 0) {

  00220	e5942048	 ldr         r2, [r4, #0x48]
  00224	e3520000	 cmp         r2, #0
  00228	1a000017	 bne         |$LN15@USBCDMA_Re|

; 386  :         g_Dc.pvTdPool = (VOID *)((UINT)pUsbModule->pvPool + (nHdCount * cbHdSize));

  0022c	e0230796	 mla         r3, r6, r7, r0
  00230	e5843030	 str         r3, [r4, #0x30]

; 387  :         g_Dc.paTdPool.LowPart = pUsbModule->paPool.LowPart + (nHdCount * cbHdSize);

  00234	e5953008	 ldr         r3, [r5, #8]
  00238	e0233697	 mla         r3, r7, r6, r3
  0023c	e5843038	 str         r3, [r4, #0x38]

; 388  :     }
; 389  : 
; 390  :     // Initialise the shared teardown descriptor pool when the first module registers
; 391  :     if (g_Dc.nNextUsbModule == 0)
; 392  : 	{
; 393  :         if (!TdPoolInit())

  00240	e5943044	 ldr         r3, [r4, #0x44]
  00244	e3530000	 cmp         r3, #0
  00248	1a00000f	 bne         |$LN15@USBCDMA_Re|
  0024c	e1a00004	 mov         r0, r4
  00250	eb000000	 bl          EnterCriticalSection
  00254	e5943030	 ldr         r3, [r4, #0x30]
  00258	e3a02020	 mov         r2, #0x20
  0025c	e3a01326	 mov         r1, #0x26, 6
  00260		 |$LL53@USBCDMA_Re|
  00260	e4831020	 str         r1, [r3], #0x20
  00264	e2522001	 subs        r2, r2, #1
  00268	1afffffc	 bne         |$LL53@USBCDMA_Re|
  0026c	e3a03001	 mov         r3, #1
  00270	e1a00004	 mov         r0, r4
  00274	e5843044	 str         r3, [r4, #0x44]
  00278	eb000000	 bl          LeaveCriticalSection
  0027c	e5943044	 ldr         r3, [r4, #0x44]
  00280	e3530000	 cmp         r3, #0
  00284	0a000097	 beq         |$done$45722|
  00288	e5942048	 ldr         r2, [r4, #0x48]
  0028c		 |$LN15@USBCDMA_Re|

; 394  : 		{
; 395  :             goto done;
; 396  : 		}
; 397  : 	}
; 398  :     // Allocate the USB module's linking RAM
; 399  :     {
; 400  :     DMA_ADAPTER_OBJECT Adapter;
; 401  :     VOID *pvLinkingRam;
; 402  :     PHYSICAL_ADDRESS paLinkingRam;
; 403  :     ULONG cbLinkingRamSize = nHdCount * sizeof(UINT32);

  0028c	e1a08106	 mov         r8, r6, lsl #2

; 404  : 
; 405  :     // The first module to register allocates additional linking RAM for the teardown descriptors
; 406  :     if (g_Dc.nNextUsbModule == 0)

  00290	e3520000	 cmp         r2, #0

; 407  : 	{
; 408  :         cbLinkingRamSize += (USB_CPPI_TD_COUNT * sizeof(UINT32));
; 409  : 	}
; 410  : 
; 411  :     Adapter.ObjectSize = sizeof(DMA_ADAPTER_OBJECT);
; 412  :     Adapter.InterfaceType = Internal;

  00294	e3a02000	 mov         r2, #0
  00298	e3a0300c	 mov         r3, #0xC

; 413  :     Adapter.BusNumber = 0;

  0029c	e3a01000	 mov         r1, #0
  002a0	02888080	 addeq       r8, r8, #0x80
  002a4	e58d2014	 str         r2, [sp, #0x14]
  002a8	e1cd31b0	 strh        r3, [sp, #0x10]
  002ac	e58d1018	 str         r1, [sp, #0x18]

; 414  : 
; 415  :     pvLinkingRam = HalAllocateCommonBuffer(
; 416  :         &Adapter,
; 417  :         cbLinkingRamSize,
; 418  :         &paLinkingRam,
; 419  :         FALSE);

  002b0	e28d2008	 add         r2, sp, #8
  002b4	e1a01008	 mov         r1, r8
  002b8	e3a03000	 mov         r3, #0
  002bc	e28d0010	 add         r0, sp, #0x10
  002c0	eb000000	 bl          HalAllocateCommonBuffer
  002c4	e3500000	 cmp         r0, #0

; 420  : 
; 421  :     if (pvLinkingRam == NULL) 

  002c8	1a000007	 bne         |$LN13@USBCDMA_Re|

; 422  : 	{
; 423  :         ERRORMSG(1,
; 424  :             (L" USBCDMA_RegisterUsbModule: ERROR - Failed to allocate %u bytes for the linking RAM\r\n", 
; 425  :             cbLinkingRamSize));

  002cc	e59f1248	 ldr         r1, [pc, #0x248]
  002d0	e59f0240	 ldr         r0, [pc, #0x240]
  002d4	e3a03c01	 mov         r3, #1, 24
  002d8	e38320a9	 orr         r2, r3, #0xA9
  002dc	eb000000	 bl          NKDbgPrintfW
  002e0	e59f023c	 ldr         r0, [pc, #0x23C]
  002e4	e1a01008	 mov         r1, r8
  002e8	ea00007d	 b           |$LN108@USBCDMA_Re|
  002ec		 |$LN13@USBCDMA_Re|

; 426  :         goto done;
; 427  :     }
; 428  : 
; 429  :     // Set the USB module's linking RAM parameters
; 430  :     pUsbModule->pvLinkingRam     = pvLinkingRam;
; 431  :     pUsbModule->paLinkingRam     = paLinkingRam;

  002ec	e59d3008	 ldr         r3, [sp, #8]
  002f0	e59d200c	 ldr         r2, [sp, #0xC]

; 432  :     pUsbModule->cbLinkingRamSize = cbLinkingRamSize;
; 433  :     }
; 434  : 
; 435  :     // Set the USB module's callback parameters
; 436  :     pUsbModule->callback = callback;
; 437  :     pUsbModule->param    = param;

  002f4	e59d1044	 ldr         r1, [sp, #0x44]
  002f8	e285c014	 add         r12, r5, #0x14
  002fc	e88c0009	 stmia       r12, {r0, r3}
  00300	e285c01c	 add         r12, r5, #0x1C
  00304	e88c0504	 stmia       r12, {r2, r8, r10}
  00308	e5851028	 str         r1, [r5, #0x28]

; 438  : 
; 439  :     // Setup the USB CPPI linking RAM registers
; 440  :     if (g_Dc.nNextUsbModule == 0) {

  0030c	e5943048	 ldr         r3, [r4, #0x48]

; 441  :         g_Dc.pCppiRegs->LRAM0BASE = pUsbModule->paLinkingRam.LowPart;

  00310	e5952018	 ldr         r2, [r5, #0x18]
  00314	e3530000	 cmp         r3, #0
  00318	e594302c	 ldr         r3, [r4, #0x2C]
  0031c	02833dc2	 addeq       r3, r3, #0xC2, 26
  00320	05832000	 streq       r2, [r3]

; 442  :         g_Dc.pCppiRegs->LRAM0SIZE = pUsbModule->cbLinkingRamSize;

  00324	0594302c	 ldreq       r3, [r4, #0x2C]
  00328	05952020	 ldreq       r2, [r5, #0x20]
  0032c	02833a03	 addeq       r3, r3, #3, 20
  00330	05832084	 streq       r2, [r3, #0x84]

; 443  :     }
; 444  :     else {
; 445  :         g_Dc.pCppiRegs->LRAM1BASE = pUsbModule->paLinkingRam.LowPart;

  00334	12833a03	 addne       r3, r3, #3, 20
  00338	15832088	 strne       r2, [r3, #0x88]

; 446  :     }
; 447  : 
; 448  :     // Setup the USB CPPI memory region registers
; 449  :     if (g_Dc.nNextUsbModule == 0) {

  0033c	e5943048	 ldr         r3, [r4, #0x48]

; 450  :         g_Dc.pCppiRegs->QMMEMREGION[0].QMEMRBASE = pUsbModule->paPool.LowPart;

  00340	e5952008	 ldr         r2, [r5, #8]
  00344	e3530000	 cmp         r3, #0
  00348	e594302c	 ldr         r3, [r4, #0x2C]

; 451  :         g_Dc.pCppiRegs->QMMEMREGION[0].QMEMRCTRL =
; 452  :             ((0                         ) << 16) | /* Start index */
; 453  :             ((Log2(cbHdSize)         - 5) <<  8) | /* Desc. size  */
; 454  :             ((Log2(nHdCount   )      - 5) <<  0);  /* Desc. count */

  0034c	e2833901	 add         r3, r3, #1, 18
  00350	1a00001f	 bne         |$LN10@USBCDMA_Re|
  00354	e3570000	 cmp         r7, #0
  00358	e5832000	 str         r2, [r3]
  0035c	e3a01000	 mov         r1, #0
  00360	0a000004	 beq         |$LN61@USBCDMA_Re|
  00364		 |$LL63@USBCDMA_Re|
  00364	e1b070a7	 movs        r7, r7, lsr #1
  00368	e2811001	 add         r1, r1, #1
  0036c	1afffffc	 bne         |$LL63@USBCDMA_Re|
  00370	e3510000	 cmp         r1, #0
  00374	12411001	 subne       r1, r1, #1
  00378		 |$LN61@USBCDMA_Re|
  00378	e1b02006	 movs        r2, r6
  0037c	e3a03000	 mov         r3, #0
  00380	0a000004	 beq         |$LN66@USBCDMA_Re|
  00384		 |$LL68@USBCDMA_Re|
  00384	e1b020a2	 movs        r2, r2, lsr #1
  00388	e2833001	 add         r3, r3, #1
  0038c	1afffffc	 bne         |$LL68@USBCDMA_Re|
  00390	e3530000	 cmp         r3, #0
  00394	12433001	 subne       r3, r3, #1
  00398		 |$LN66@USBCDMA_Re|
  00398	e594202c	 ldr         r2, [r4, #0x2C]
  0039c	e2411005	 sub         r1, r1, #5
  003a0	e2433005	 sub         r3, r3, #5
  003a4	e2822901	 add         r2, r2, #1, 18
  003a8	e1833401	 orr         r3, r3, r1, lsl #8
  003ac	e5823004	 str         r3, [r2, #4]

; 455  : 
; 456  :         g_Dc.pCppiRegs->QMMEMREGION[1].QMEMRBASE = g_Dc.paTdPool.LowPart;

  003b0	e594302c	 ldr         r3, [r4, #0x2C]
  003b4	e5942038	 ldr         r2, [r4, #0x38]

; 457  :         g_Dc.pCppiRegs->QMMEMREGION[1].QMEMRCTRL =
; 458  :             ((nHdCount                  ) << 16) | /* Start index */
; 459  :             ((USB_CPPI_TD_SIZE_POW2  - 5) <<  8) | /* Desc. size  */
; 460  :             ((USB_CPPI_TD_COUNT_POW2 - 5) <<  0);  /* Desc. count */

  003b8	e1a01806	 mov         r1, r6, lsl #16
  003bc	e2833901	 add         r3, r3, #1, 18
  003c0	e5832010	 str         r2, [r3, #0x10]
  003c4	e594302c	 ldr         r3, [r4, #0x2C]
  003c8	e2833901	 add         r3, r3, #1, 18
  003cc	e5831014	 str         r1, [r3, #0x14]

; 461  :     }
; 462  :     else {

  003d0	ea000019	 b           |$LN9@USBCDMA_Re|
  003d4		 |$LN10@USBCDMA_Re|

; 463  :         UINT16 index = g_Dc.usb[0].nHdCount + USB_CPPI_TD_COUNT;
; 464  :         g_Dc.pCppiRegs->QMMEMREGION[2].QMEMRBASE = pUsbModule->paPool.LowPart;

  003d4	e1d415b0	 ldrh        r1, [r4, #0x50]
  003d8	e5832020	 str         r2, [r3, #0x20]

; 465  :         g_Dc.pCppiRegs->QMMEMREGION[2].QMEMRCTRL =
; 466  :             ((index                     ) << 16) | /* Start index */
; 467  :             ((Log2(cbHdSize)         - 5) <<  8) | /* Desc. size  */
; 468  :             ((Log2(nHdCount)         - 5) <<  0);  /* Desc. count */

  003dc	e3570000	 cmp         r7, #0
  003e0	e2811020	 add         r1, r1, #0x20
  003e4	e3a03000	 mov         r3, #0
  003e8	0a000004	 beq         |$LN71@USBCDMA_Re|
  003ec		 |$LL73@USBCDMA_Re|
  003ec	e1b070a7	 movs        r7, r7, lsr #1
  003f0	e2833001	 add         r3, r3, #1
  003f4	1afffffc	 bne         |$LL73@USBCDMA_Re|
  003f8	e3530000	 cmp         r3, #0
  003fc	12433001	 subne       r3, r3, #1
  00400		 |$LN71@USBCDMA_Re|
  00400	e3560000	 cmp         r6, #0
  00404	e3a00000	 mov         r0, #0
  00408	0a000004	 beq         |$LN76@USBCDMA_Re|
  0040c		 |$LL78@USBCDMA_Re|
  0040c	e1b060a6	 movs        r6, r6, lsr #1
  00410	e2800001	 add         r0, r0, #1
  00414	1afffffc	 bne         |$LL78@USBCDMA_Re|
  00418	e3500000	 cmp         r0, #0
  0041c	12400001	 subne       r0, r0, #1
  00420		 |$LN76@USBCDMA_Re|
  00420	e594202c	 ldr         r2, [r4, #0x2C]
  00424	e2433005	 sub         r3, r3, #5
  00428	e1831401	 orr         r1, r3, r1, lsl #8
  0042c	e2403005	 sub         r3, r0, #5
  00430	e1833401	 orr         r3, r3, r1, lsl #8
  00434	e2822901	 add         r2, r2, #1, 18
  00438	e5823024	 str         r3, [r2, #0x24]
  0043c		 |$LN9@USBCDMA_Re|

; 469  :     }
; 470  : 
; 471  :     if (!TdFreeQueueInit())

  0043c	eb000000	 bl          TdFreeQueueInit
  00440	e3500000	 cmp         r0, #0
  00444	0a000027	 beq         |$done$45722|

; 472  : 	{
; 473  :         goto done;
; 474  : 	}
; 475  : 
; 476  :     // Finalise [OUT] parameters
; 477  :     (*ppaHdPool) = pUsbModule->paPool;

  00448	e5953008	 ldr         r3, [r5, #8]

; 478  :     (*ppvHdPool) = pUsbModule->pvPool;
; 479  : 
; 480  :     g_Dc.nNextUsbModule++;
; 481  :     hUsbModule = (HANDLE)pUsbModule;
; 482  : 
; 483  :     // Start CDMA scheduler based on initial values
; 484  :     // (Tx enabled, Rx disabled)
; 485  :     for(i=0;i<USB_CPPI_MAX_TX_CHANNELS;i++)
; 486  :         g_scheduleTx[i] = TRUE;

  0044c	e59d0004	 ldr         r0, [sp, #4]
  00450	e289203c	 add         r2, r9, #0x3C
  00454	e58b3000	 str         r3, [r11]
  00458	e595300c	 ldr         r3, [r5, #0xC]
  0045c	e58d5000	 str         r5, [sp]
  00460	e3a0e001	 mov         lr, #1
  00464	e58b3004	 str         r3, [r11, #4]
  00468	e5953004	 ldr         r3, [r5, #4]
  0046c	e282103c	 add         r1, r2, #0x3C
  00470	e5803000	 str         r3, [r0]
  00474	e5943048	 ldr         r3, [r4, #0x48]
  00478	e2833001	 add         r3, r3, #1
  0047c	e5843048	 str         r3, [r4, #0x48]
  00480		 |$LN104@USBCDMA_Re|
  00480	e482e004	 str         lr, [r2], #4
  00484	e1520001	 cmp         r2, r1
  00488	1afffffc	 bne         |$LN104@USBCDMA_Re|

; 487  :     for(i=0;i<USB_CPPI_MAX_RX_CHANNELS;i++)
; 488  :         g_scheduleRx[i] = FALSE;

  0048c	e3a02000	 mov         r2, #0
  00490	e289303c	 add         r3, r9, #0x3C
  00494		 |$LN106@USBCDMA_Re|
  00494	e4892004	 str         r2, [r9], #4
  00498	e1590003	 cmp         r9, r3
  0049c	1afffffc	 bne         |$LN106@USBCDMA_Re|

; 489  :     ConfigureScheduler();

  004a0	eb000000	 bl          ConfigureScheduler
  004a4	ea00000f	 b           |$done$45722|
  004a8		 |$LN24@USBCDMA_Re|

; 286  : 	{
; 287  :         ERRORMSG(1,
; 288  :             (L" USBCDMA_RegisterUsbModule: ERROR - Invalid cbHdSize %u\r\n",
; 289  :             cbHdSize));

  004a8	e59f106c	 ldr         r1, [pc, #0x6C]
  004ac	e59f0064	 ldr         r0, [pc, #0x64]
  004b0	e3a03c01	 mov         r3, #1, 24
  004b4	e3832021	 orr         r2, r3, #0x21
  004b8	eb000000	 bl          NKDbgPrintfW
  004bc	e59f005c	 ldr         r0, [pc, #0x5C]
  004c0	e1a01007	 mov         r1, r7

; 290  :         goto done;

  004c4	ea000006	 b           |$LN108@USBCDMA_Re|
  004c8		 |$LN26@USBCDMA_Re|

; 278  : 	{
; 279  :         ERRORMSG(1,
; 280  :             (L" USBCDMA_RegisterUsbModule: ERROR - Invalid nHdCount %u\r\n",
; 281  :             nHdCount));

  004c8	e59f104c	 ldr         r1, [pc, #0x4C]
  004cc	e59f0044	 ldr         r0, [pc, #0x44]
  004d0	e3a03c01	 mov         r3, #1, 24
  004d4	e3832019	 orr         r2, r3, #0x19
  004d8	eb000000	 bl          NKDbgPrintfW
  004dc	e59f0030	 ldr         r0, [pc, #0x30]
  004e0	e1a01006	 mov         r1, r6
  004e4		 |$LN108@USBCDMA_Re|
  004e4	eb000000	 bl          NKDbgPrintfW
  004e8		 |$done$45722|

; 490  : 
; 491  : done:
; 492  :     Unlock();

  004e8	e1a00004	 mov         r0, r4
  004ec	eb000000	 bl          LeaveCriticalSection

; 493  : 
; 494  : done_unlocked:
; 495  :     if (hUsbModule == NULL)

  004f0	e59d4000	 ldr         r4, [sp]
  004f4		 |$done_unlocked$45718|
  004f4	e3540000	 cmp         r4, #0
  004f8	1a000001	 bne         |$LN1@USBCDMA_Re|
  004fc		 |$LN101@USBCDMA_Re|

; 496  : 	{
; 497  :         USBCDMA_DeregisterUsbModule((HANDLE)pUsbModule);

  004fc	e1a00005	 mov         r0, r5
  00500	eb000000	 bl          USBCDMA_DeregisterUsbModule
  00504		 |$LN1@USBCDMA_Re|

; 498  : 	}
; 499  : 
; 500  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 501  :         (L"-USBCDMA_RegisterUsbModule: %s\r\n",
; 502  :         (hUsbModule != NULL) ?
; 503  :             L"SUCCEEDED" :
; 504  :             L"FAILED"));
; 505  : 
; 506  :     return hUsbModule;
; 507  : }

  00504	e1a00004	 mov         r0, r4
  00508	e28dd01c	 add         sp, sp, #0x1C
  0050c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00510	e12fff1e	 bx          lr
  00514		 |$LN114@USBCDMA_Re|
  00514		 |$LN115@USBCDMA_Re|
  00514	00000000	 DCD         |??_C@_1HE@BGFLAGEJ@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00518		 |$LN116@USBCDMA_Re|
  00518	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  0051c		 |$LN117@USBCDMA_Re|
  0051c	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00520		 |$LN118@USBCDMA_Re|
  00520	00000000	 DCD         |??_C@_1HE@KJEGINGG@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00524		 |$LN119@USBCDMA_Re|
  00524	00000000	 DCD         |??_C@_1KM@NNNFEEDP@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00528		 |$LN120@USBCDMA_Re|
  00528	00000000	 DCD         |??_C@_1LE@EFPEDKKD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  0052c		 |$LN121@USBCDMA_Re|
  0052c	00000000	 DCD         |??_C@_1II@GAJJLCIH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00530		 |$LN122@USBCDMA_Re|
  00530	00000000	 DCD         |??_C@_1HM@MPLEJILA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00534		 |$LN123@USBCDMA_Re|
  00534	00000000	 DCD         |??_C@_1HO@LCDFCJNL@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00538		 |$LN124@USBCDMA_Re|
  00538	00000000	 DCD         |??_C@_1HO@GIAMIHPK@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  0053c		 |$LN125@USBCDMA_Re|
  0053c	00000000	 DCD         |g_Dc|
  00540		 |$LN126@USBCDMA_Re|
  00540	00000000	 DCD         |??_C@_1HK@IECGBIPL@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00544		 |$LN127@USBCDMA_Re|
  00544	00000000	 DCD         |g_scheduleRx|
  00548		 |$M46777|

			 ENDP  ; |USBCDMA_RegisterUsbModule|

	EXPORT	|UCD_Init|
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|CreateEventW|
	IMPORT	|MmMapIoSpace|
	IMPORT	|InitializeCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T46809| DCD	|$LN14@UCD_Init|
	DCD	0x40003802
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UCD_Init| PROC

; 850  : {

  00000		 |$LN14@UCD_Init|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M46806|

; 851  :     PHYSICAL_ADDRESS pa;
; 852  : 
; 853  : 	UNREFERENCED_PARAMETER(pContext);
; 854  : 	UNREFERENCED_PARAMETER(dwBusContext);
; 855  : 
; 856  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 857  :         (L"+UCD_Init\r\n"));
; 858  : 
; 859  :     if (g_hDc != 0)

  00008	e59f50cc	 ldr         r5, [pc, #0xCC]
  0000c	e5950000	 ldr         r0, [r5]
  00010	e3500000	 cmp         r0, #0
  00014	1a00002b	 bne         |$LN1@UCD_Init|

; 860  : 	{
; 861  :         goto done_unlocked;
; 862  : 	}
; 863  : 
; 864  :     InitializeCriticalSection(&g_Dc.csLock);

  00018	e59f40b8	 ldr         r4, [pc, #0xB8]
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          InitializeCriticalSection

; 865  : 
; 866  :     Lock();

  00024	e1a00004	 mov         r0, r4
  00028	eb000000	 bl          EnterCriticalSection

; 867  : 
; 868  :     pa.LowPart = AM3517_CPPI_REGS_PA;
; 869  :     g_Dc.pCppiRegs = (CppiRegs *)MmMapIoSpace(pa, sizeof(CppiRegs), FALSE);

  0002c	e59d100c	 ldr         r1, [sp, #0xC]
  00030	e3a03317	 mov         r3, #0x17, 6
  00034	e3830a41	 orr         r0, r3, #0x41, 20
  00038	e3a03000	 mov         r3, #0
  0003c	e3a02c5e	 mov         r2, #0x5E, 24
  00040	eb000000	 bl          MmMapIoSpace
  00044	e3500000	 cmp         r0, #0
  00048	e584002c	 str         r0, [r4, #0x2C]

; 870  :     if (g_Dc.pCppiRegs == NULL)

  0004c	0a000015	 beq         |$done$45931|

; 871  :     {
; 872  :         DEBUGMSG(ZONE_ERROR,
; 873  :             (L" UCD_Init: ERROR - Failed to map CPPI register space\r\n"));
; 874  :         goto done;
; 875  :     }
; 876  : 
; 877  :     DEBUGCHK(g_Dc.hIntrEvent == NULL);
; 878  :     g_Dc.hIntrEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00050	e3a03000	 mov         r3, #0
  00054	e3a02000	 mov         r2, #0
  00058	e3a01000	 mov         r1, #0
  0005c	e3a00000	 mov         r0, #0
  00060	eb000000	 bl          CreateEventW
  00064	e3500000	 cmp         r0, #0
  00068	e584001c	 str         r0, [r4, #0x1C]

; 879  :     if (g_Dc.hIntrEvent == NULL) 

  0006c	0a00000d	 beq         |$done$45931|

; 880  : 	{
; 881  :         DEBUGMSG(ZONE_ERROR,
; 882  :             (L" UCD_Init: ERROR - CreateEvent failed\r\n"));
; 883  :         goto done;
; 884  :     }
; 885  : 
; 886  :     // AM35x : The CDMA controller does not have a dedicated interrupt.
; 887  :     // Therefore, the host and function drivers check the pending
; 888  :     // queue register(s) on a USB controller interrupt and process
; 889  :     // the completion queues if they indicate a DMA transfer has completed.
; 890  :     // However, the event and thread in this driver is still required to 
; 891  :     // process teardown completion.
; 892  : #if 0
; 893  : 	{
; 894  :     DWORD BytesRet = 0;
; 895  : 
; 896  :     if (!KernelIoControl(IOCTL_HAL_REQUEST_SYSINTR, &g_Dc.dwIrqVal, sizeof(DWORD),
; 897  :             &g_Dc.dwSysIntr, sizeof(DWORD), &BytesRet))
; 898  :     {
; 899  :         DEBUGMSG(ZONE_ERROR,
; 900  :             (L" UCD_Init: ERROR - Failed to request SYSINTR for IRQ%u\r\n",
; 901  :             g_Dc.dwIrqVal));
; 902  :         goto done;
; 903  :     }
; 904  : 
; 905  :     InterruptDisable(g_Dc.dwSysIntr);
; 906  :     if (!InterruptInitialize(g_Dc.dwSysIntr, g_Dc.hIntrEvent, NULL, 0)) {
; 907  :         DEBUGMSG(ZONE_ERROR,
; 908  :             (L" UCD_Init - ERROR - InterruptInitialize failed\r\n"));
; 909  :         goto done;
; 910  :     }
; 911  : 	}
; 912  : #endif
; 913  : 
; 914  :     DEBUGCHK(g_Dc.hIntrThread == NULL);
; 915  :     DEBUGCHK(g_Dc.fIntrThreadClosing == FALSE);
; 916  :     g_Dc.hIntrThread = CreateThread(NULL, 0, IntrThread, NULL, 0, NULL);

  00070	e59f205c	 ldr         r2, [pc, #0x5C]
  00074	e3a0e000	 mov         lr, #0
  00078	e3a03000	 mov         r3, #0
  0007c	e3a01000	 mov         r1, #0
  00080	e3a00000	 mov         r0, #0
  00084	e58de004	 str         lr, [sp, #4]
  00088	e58de000	 str         lr, [sp]
  0008c	eb000000	 bl          CreateThread
  00090	e3500000	 cmp         r0, #0
  00094	e5840020	 str         r0, [r4, #0x20]

; 917  :     if (g_Dc.hIntrThread == NULL) 

  00098	0a000002	 beq         |$done$45931|

; 918  : 	{
; 919  :         DEBUGMSG(ZONE_ERROR,
; 920  :             (L" UCD_Init: ERROR - CreateThread failed\r\n"));
; 921  :         goto done;
; 922  :     }
; 923  :     CeSetThreadPriority(g_Dc.hIntrThread, g_Dc.nIntrThreadPriority);

  0009c	e5941024	 ldr         r1, [r4, #0x24]
  000a0	eb000000	 bl          CeSetThreadPriority

; 924  : 
; 925  :     g_hDc = (DWORD)&g_Dc;

  000a4	e5854000	 str         r4, [r5]
  000a8		 |$done$45931|

; 926  : 
; 927  : done:
; 928  :     Unlock();

  000a8	e1a00004	 mov         r0, r4
  000ac	eb000000	 bl          LeaveCriticalSection

; 929  : 
; 930  : done_unlocked:
; 931  :     if (g_hDc == 0)

  000b0	e5950000	 ldr         r0, [r5]
  000b4		 |$done_unlocked$45925|
  000b4	e3500000	 cmp         r0, #0
  000b8	1a000002	 bne         |$LN1@UCD_Init|

; 932  : 	{
; 933  :         UCD_Deinit((DWORD)&g_Dc);

  000bc	e1a00004	 mov         r0, r4
  000c0	eb000000	 bl          UCD_Deinit
  000c4	e5950000	 ldr         r0, [r5]
  000c8		 |$LN1@UCD_Init|

; 934  : 	}
; 935  : 
; 936  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 937  :         (L"-UCD_Init: %s\r\n",
; 938  :         g_hDc ?
; 939  :             L"SUCCEEDED" :
; 940  :             L"FAILED"));
; 941  : 
; 942  :     return g_hDc;
; 943  : }

  000c8	e28dd010	 add         sp, sp, #0x10
  000cc	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN15@UCD_Init|
  000d4		 |$LN16@UCD_Init|
  000d4	00000000	 DCD         |IntrThread|
  000d8		 |$LN17@UCD_Init|
  000d8	00000000	 DCD         |g_Dc|
  000dc		 |$LN18@UCD_Init|
  000dc	00000000	 DCD         |g_hDc|
  000e0		 |$M46807|

			 ENDP  ; |UCD_Init|

	END
