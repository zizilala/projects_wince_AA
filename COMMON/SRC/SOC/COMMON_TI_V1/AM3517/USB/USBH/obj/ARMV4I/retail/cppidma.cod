; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\USB\USBH\cppidma.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T40207| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40204|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M40205|

			 ENDP  ; |SetEvent|

	EXPORT	|?AddRef@CCppiDmaChannel@@QAAIXZ|	; CCppiDmaChannel::AddRef
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T40217| DCD	|$LN5@AddRef|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AddRef@CCppiDmaChannel@@QAAIXZ| PROC	; CCppiDmaChannel::AddRef

; 60   :     UINT32 AddRef      () { return ++m_nRefCount; }

  00000		 |$LN5@AddRef|
  00000		 |$M40214|
  00000	e5903008	 ldr         r3, [r0, #8]
  00004	e2833001	 add         r3, r3, #1
  00008	e5803008	 str         r3, [r0, #8]
  0000c	e1a00003	 mov         r0, r3
  00010	e12fff1e	 bx          lr
  00014		 |$M40215|

			 ENDP  ; |?AddRef@CCppiDmaChannel@@QAAIXZ|, CCppiDmaChannel::AddRef

	EXPORT	|?Release@CCppiDmaChannel@@QAAIXZ|	; CCppiDmaChannel::Release

  00000			 AREA	 |.pdata|, PDATA
|$T40227| DCD	|$LN5@Release|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Release@CCppiDmaChannel@@QAAIXZ| PROC ; CCppiDmaChannel::Release

; 61   :     UINT32 Release     () { return --m_nRefCount; }

  00000		 |$LN5@Release|
  00000		 |$M40224|
  00000	e5903008	 ldr         r3, [r0, #8]
  00004	e2433001	 sub         r3, r3, #1
  00008	e5803008	 str         r3, [r0, #8]
  0000c	e1a00003	 mov         r0, r3
  00010	e12fff1e	 bx          lr
  00014		 |$M40225|

			 ENDP  ; |?Release@CCppiDmaChannel@@QAAIXZ|, CCppiDmaChannel::Release

	EXPORT	|?GetRefCount@CCppiDmaChannel@@QAAIXZ|	; CCppiDmaChannel::GetRefCount

  00000			 AREA	 |.pdata|, PDATA
|$T40237| DCD	|$LN5@GetRefCoun|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetRefCount@CCppiDmaChannel@@QAAIXZ| PROC ; CCppiDmaChannel::GetRefCount

; 62   :     UINT32 GetRefCount () { return   m_nRefCount; }

  00000		 |$LN5@GetRefCoun|
  00000		 |$M40234|
  00000	e5900008	 ldr         r0, [r0, #8]
  00004	e12fff1e	 bx          lr
  00008		 |$M40235|

			 ENDP  ; |?GetRefCount@CCppiDmaChannel@@QAAIXZ|, CCppiDmaChannel::GetRefCount

	EXPORT	|?ChLock@CCppiDmaChannel@@IAAXXZ|	; CCppiDmaChannel::ChLock
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T40245| DCD	|$LN5@ChLock|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ChLock@CCppiDmaChannel@@IAAXXZ| PROC	; CCppiDmaChannel::ChLock

; 83   :     void ChLock   () { EnterCriticalSection(&m_csLock); }

  00000		 |$LN5@ChLock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40242|
  00004	e2800044	 add         r0, r0, #0x44
  00008	eb000000	 bl          EnterCriticalSection
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M40243|

			 ENDP  ; |?ChLock@CCppiDmaChannel@@IAAXXZ|, CCppiDmaChannel::ChLock

	EXPORT	|?ChUnlock@CCppiDmaChannel@@IAAXXZ|	; CCppiDmaChannel::ChUnlock
	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T40253| DCD	|$LN5@ChUnlock|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ChUnlock@CCppiDmaChannel@@IAAXXZ| PROC ; CCppiDmaChannel::ChUnlock

; 84   :     void ChUnlock () { LeaveCriticalSection(&m_csLock); }

  00000		 |$LN5@ChUnlock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40250|
  00004	e2800044	 add         r0, r0, #0x44
  00008	eb000000	 bl          LeaveCriticalSection
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M40251|

			 ENDP  ; |?ChUnlock@CCppiDmaChannel@@IAAXXZ|, CCppiDmaChannel::ChUnlock

	EXPORT	|?ChannelNumber@CCppiDmaChannel@@IBAEXZ| ; CCppiDmaChannel::ChannelNumber

  00000			 AREA	 |.pdata|, PDATA
|$T40263| DCD	|$LN5@ChannelNum|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ChannelNumber@CCppiDmaChannel@@IBAEXZ| PROC ; CCppiDmaChannel::ChannelNumber

; 99   :     UINT8  ChannelNumber()     const { return m_chNum; }

  00000		 |$LN5@ChannelNum|
  00000		 |$M40260|
  00000	e5d0003c	 ldrb        r0, [r0, #0x3C]
  00004	e12fff1e	 bx          lr
  00008		 |$M40261|

			 ENDP  ; |?ChannelNumber@CCppiDmaChannel@@IBAEXZ|, CCppiDmaChannel::ChannelNumber

	EXPORT	|?IsOut@CCppiDmaChannel@@IBAHXZ|	; CCppiDmaChannel::IsOut

  00000			 AREA	 |.pdata|, PDATA
|$T40273| DCD	|$LN5@IsOut|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsOut@CCppiDmaChannel@@IBAHXZ| PROC	; CCppiDmaChannel::IsOut

; 105  :     BOOL   IsOut()             const { return m_fIsOut; }

  00000		 |$LN5@IsOut|
  00000		 |$M40270|
  00000	e5900034	 ldr         r0, [r0, #0x34]
  00004	e12fff1e	 bx          lr
  00008		 |$M40271|

			 ENDP  ; |?IsOut@CCppiDmaChannel@@IBAHXZ|, CCppiDmaChannel::IsOut

	EXPORT	|?IsIn@CCppiDmaChannel@@IBAHXZ|		; CCppiDmaChannel::IsIn

  00000			 AREA	 |.pdata|, PDATA
|$T40285| DCD	|$LN7@IsIn|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsIn@CCppiDmaChannel@@IBAHXZ| PROC	; CCppiDmaChannel::IsIn

; 106  :     BOOL   IsIn()              const { return !m_fIsOut; }

  00000		 |$LN7@IsIn|
  00000		 |$M40282|
  00000	e5903034	 ldr         r3, [r0, #0x34]
  00004	e3530000	 cmp         r3, #0
  00008	03a00001	 moveq       r0, #1
  0000c	13a00000	 movne       r0, #0
  00010	e12fff1e	 bx          lr
  00014		 |$M40283|

			 ENDP  ; |?IsIn@CCppiDmaChannel@@IBAHXZ|, CCppiDmaChannel::IsIn

	EXPORT	|?IsInUse@CCppiDmaChannel@@IBAHXZ|	; CCppiDmaChannel::IsInUse

  00000			 AREA	 |.pdata|, PDATA
|$T40297| DCD	|$LN7@IsInUse|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsInUse@CCppiDmaChannel@@IBAHXZ| PROC ; CCppiDmaChannel::IsInUse

; 107  :     BOOL   IsInUse()           const { return m_nTransferFrames > 0; }

  00000		 |$LN7@IsInUse|
  00000		 |$M40294|
  00000	e5903074	 ldr         r3, [r0, #0x74]
  00004	e3530000	 cmp         r3, #0
  00008	83a00001	 movhi       r0, #1
  0000c	93a00000	 movls       r0, #0
  00010	e12fff1e	 bx          lr
  00014		 |$M40295|

			 ENDP  ; |?IsInUse@CCppiDmaChannel@@IBAHXZ|, CCppiDmaChannel::IsInUse

	EXPORT	|?IsIso@CCppiDmaChannel@@IBAHXZ|	; CCppiDmaChannel::IsIso

  00000			 AREA	 |.pdata|, PDATA
|$T40309| DCD	|$LN7@IsIso|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsIso@CCppiDmaChannel@@IBAHXZ| PROC	; CCppiDmaChannel::IsIso

; 110  :     BOOL   IsIso()             const { return m_epType == USB_ENDPOINT_TYPE_ISOCHRONOUS; }

  00000		 |$LN7@IsIso|
  00000		 |$M40306|
  00000	e5d03062	 ldrb        r3, [r0, #0x62]
  00004	e3530001	 cmp         r3, #1
  00008	03a00001	 moveq       r0, #1
  0000c	13a00000	 movne       r0, #0
  00010	e12fff1e	 bx          lr
  00014		 |$M40307|

			 ENDP  ; |?IsIso@CCppiDmaChannel@@IBAHXZ|, CCppiDmaChannel::IsIso

	EXPORT	|?IsRndisMode@CCppiDmaChannel@@IBAHXZ|	; CCppiDmaChannel::IsRndisMode

  00000			 AREA	 |.pdata|, PDATA
|$T40321| DCD	|$LN7@IsRndisMod|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsRndisMode@CCppiDmaChannel@@IBAHXZ| PROC ; CCppiDmaChannel::IsRndisMode

; 111  :     BOOL   IsRndisMode()       const { return m_fIsRndisMode != 0; }

  00000		 |$LN7@IsRndisMod|
  00000		 |$M40318|
  00000	e59030b0	 ldr         r3, [r0, #0xB0]
  00004	e3530000	 cmp         r3, #0
  00008	13a00001	 movne       r0, #1
  0000c	03a00000	 moveq       r0, #0
  00010	e12fff1e	 bx          lr
  00014		 |$M40319|

			 ENDP  ; |?IsRndisMode@CCppiDmaChannel@@IBAHXZ|, CCppiDmaChannel::IsRndisMode

	EXPORT	|?IsCancelPending@CCppiDmaChannel@@IBAHXZ| ; CCppiDmaChannel::IsCancelPending

  00000			 AREA	 |.pdata|, PDATA
|$T40331| DCD	|$LN5@IsCancelPe|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsCancelPending@CCppiDmaChannel@@IBAHXZ| PROC ; CCppiDmaChannel::IsCancelPending

; 112  :     BOOL   IsCancelPending()   const { return m_fIsCancelPending; }

  00000		 |$LN5@IsCancelPe|
  00000		 |$M40328|
  00000	e5900058	 ldr         r0, [r0, #0x58]
  00004	e12fff1e	 bx          lr
  00008		 |$M40329|

			 ENDP  ; |?IsCancelPending@CCppiDmaChannel@@IBAHXZ|, CCppiDmaChannel::IsCancelPending

	EXPORT	|?Lock@CCppiDmaController@@IAAXXZ|	; CCppiDmaController::Lock

  00000			 AREA	 |.pdata|, PDATA
|$T40339| DCD	|$LN5@Lock|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@CCppiDmaController@@IAAXXZ| PROC ; CCppiDmaController::Lock

; 181  :     void Lock   () { EnterCriticalSection(&m_csLock); }

  00000		 |$LN5@Lock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40336|
  00004	eb000000	 bl          EnterCriticalSection
  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M40337|

			 ENDP  ; |?Lock@CCppiDmaController@@IAAXXZ|, CCppiDmaController::Lock

	EXPORT	|?Unlock@CCppiDmaController@@IAAXXZ|	; CCppiDmaController::Unlock

  00000			 AREA	 |.pdata|, PDATA
|$T40347| DCD	|$LN5@Unlock|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Unlock@CCppiDmaController@@IAAXXZ| PROC ; CCppiDmaController::Unlock

; 182  :     void Unlock () { LeaveCriticalSection(&m_csLock); }

  00000		 |$LN5@Unlock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40344|
  00004	eb000000	 bl          LeaveCriticalSection
  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M40345|

			 ENDP  ; |?Unlock@CCppiDmaController@@IAAXXZ|, CCppiDmaController::Unlock

	EXPORT	|?PvUsbRegs@CCppiDmaController@@IAAPAUCSL_UsbRegs@@XZ| ; CCppiDmaController::PvUsbRegs

  00000			 AREA	 |.pdata|, PDATA
|$T40357| DCD	|$LN5@PvUsbRegs|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PvUsbRegs@CCppiDmaController@@IAAPAUCSL_UsbRegs@@XZ| PROC ; CCppiDmaController::PvUsbRegs

; 185  :     CSL_UsbRegs*  PvUsbRegs  () { return m_pUsbRegs;  }

  00000		 |$LN5@PvUsbRegs|
  00000		 |$M40354|
  00000	e5900018	 ldr         r0, [r0, #0x18]
  00004	e12fff1e	 bx          lr
  00008		 |$M40355|

			 ENDP  ; |?PvUsbRegs@CCppiDmaController@@IAAPAUCSL_UsbRegs@@XZ|, CCppiDmaController::PvUsbRegs

	EXPORT	|?PvCppiRegs@CCppiDmaController@@IAAPAUCSL_CppiRegs@@XZ| ; CCppiDmaController::PvCppiRegs

  00000			 AREA	 |.pdata|, PDATA
|$T40367| DCD	|$LN5@PvCppiRegs|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PvCppiRegs@CCppiDmaController@@IAAPAUCSL_CppiRegs@@XZ| PROC ; CCppiDmaController::PvCppiRegs

; 186  :     CSL_CppiRegs* PvCppiRegs () { return m_pCppiRegs; }

  00000		 |$LN5@PvCppiRegs|
  00000		 |$M40364|
  00000	e590001c	 ldr         r0, [r0, #0x1C]
  00004	e12fff1e	 bx          lr
  00008		 |$M40365|

			 ENDP  ; |?PvCppiRegs@CCppiDmaController@@IAAPAUCSL_CppiRegs@@XZ|, CCppiDmaController::PvCppiRegs

	EXPORT	|?PoolLock@CCppiDmaController@@IAAXXZ|	; CCppiDmaController::PoolLock

  00000			 AREA	 |.pdata|, PDATA
|$T40375| DCD	|$LN5@PoolLock|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PoolLock@CCppiDmaController@@IAAXXZ| PROC ; CCppiDmaController::PoolLock

; 205  :     void PoolLock   () { EnterCriticalSection(&m_csPoolLock); }

  00000		 |$LN5@PoolLock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40372|
  00004	e2800f4b	 add         r0, r0, #0x4B, 30
  00008	eb000000	 bl          EnterCriticalSection
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M40373|

			 ENDP  ; |?PoolLock@CCppiDmaController@@IAAXXZ|, CCppiDmaController::PoolLock

	EXPORT	|?PoolUnlock@CCppiDmaController@@IAAXXZ| ; CCppiDmaController::PoolUnlock

  00000			 AREA	 |.pdata|, PDATA
|$T40383| DCD	|$LN5@PoolUnlock|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PoolUnlock@CCppiDmaController@@IAAXXZ| PROC ; CCppiDmaController::PoolUnlock

; 206  :     void PoolUnlock () { LeaveCriticalSection(&m_csPoolLock); }

  00000		 |$LN5@PoolUnlock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40380|
  00004	e2800f4b	 add         r0, r0, #0x4B, 30
  00008	eb000000	 bl          LeaveCriticalSection
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M40381|

			 ENDP  ; |?PoolUnlock@CCppiDmaController@@IAAXXZ|, CCppiDmaController::PoolUnlock

	EXPORT	|??0CCppiDmaChannel@@QAA@PAVCCppiDmaController@@EP6AXPAV0@IIIIPAX2@Z@Z| ; CCppiDmaChannel::CCppiDmaChannel
	EXPORT	|??_C@_1CA@KIDFAHAB@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAs?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@DIIKGLIP@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AAs?$AA?5?$AAa?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JO@GFKEKIMG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@EIGIDAKC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_7CCppiDmaChannel@@6B@| [ DATA ]	; CCppiDmaChannel::`vftable'
	IMPORT	|LocalAlloc|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|HalAllocateCommonBuffer|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|??_ECCppiDmaChannel@@UAAPAXI@Z|, WEAK |??_GCCppiDmaChannel@@UAAPAXI@Z| ; CCppiDmaChannel::`vector deleting destructor', CCppiDmaChannel::`scalar deleting destructor'
	IMPORT	|_purecall|

  00000			 AREA	 |.pdata|, PDATA
|$T40419| DCD	|$LN24@CCppiDmaCh|
	DCD	0x40008002

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@KIDFAHAB@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAs?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "a", 0x0, "r", 0x0, "g", 0x0, "s", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@DIIKGLIP@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AAs?$AA?5?$AAa?$AAr@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "a"
	DCB	0x0, "m", 0x0, "e", 0x0, " ", 0x0, "l", 0x0, "e", 0x0, "n"
	DCB	0x0, "g", 0x0, "t", 0x0, "h", 0x0, "s", 0x0, " ", 0x0, "a"
	DCB	0x0, "r", 0x0, "r", 0x0, "a", 0x0, "y", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JO@GFKEKIMG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "A", 0x0, "M", 0x0, "3", 0x0, "5", 0x0, "1", 0x0, "7"
	DCB	0x0, "\\", 0x0, "U", 0x0, "S", 0x0, "B", 0x0, "\\", 0x0, "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "H", 0x0, "\\", 0x0, ".", 0x0, "\\"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "d", 0x0, "m"
	DCB	0x0, "a", 0x0, ".", 0x0, "c", 0x0, "p", 0x0, "p", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@EIGIDAKC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CCppiDmaChannel@@6B@| DCD |??_ECCppiDmaChannel@@UAAPAXI@Z| ; CCppiDmaChannel::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CCppiDmaChannel@@QAA@PAVCCppiDmaController@@EP6AXPAV0@IIIIPAX2@Z@Z| PROC ; CCppiDmaChannel::CCppiDmaChannel

; 48   : {

  00000		 |$LN24@CCppiDmaCh|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M40416|
  00008	e1a08003	 mov         r8, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1b05001	 movs        r5, r1
  00014	e1a06000	 mov         r6, r0
  00018	e59fe1dc	 ldr         lr, [pc, #0x1DC]
  0001c	e586e000	 str         lr, [r6]

; 49   :     DEBUGMSG(ZONE_INIT || CPPI_DBG_CHANNEL,
; 50   :         (L"+CCppiDmaChannel: 0x%08x, EP %u, 0x%08x\r\n",
; 51   :         pController,
; 52   :         epNum,
; 53   :         pCallback));
; 54   : 
; 55   :     if ((pController == NULL) ||
; 56   :         (pController->PvUsbRegs() == NULL) ||
; 57   :         (pController->PvCppiRegs() == NULL) ||
; 58   :         (epNum == 0))

  00020	0a000066	 beq         |$LN3@CCppiDmaCh|
  00024	e595e018	 ldr         lr, [r5, #0x18]
  00028	e35e0000	 cmp         lr, #0
  0002c	0a000063	 beq         |$LN3@CCppiDmaCh|
  00030	e595e01c	 ldr         lr, [r5, #0x1C]
  00034	e35e0000	 cmp         lr, #0
  00038	0a000060	 beq         |$LN3@CCppiDmaCh|
  0003c	e1b04007	 movs        r4, r7
  00040	0a00005e	 beq         |$LN3@CCppiDmaCh|

; 61   :         DEBUGCHK(FALSE);
; 62   :         return;
; 63   :     }
; 64   : 
; 65   :     InitializeCriticalSection(&m_csLock);

  00044	e2860044	 add         r0, r6, #0x44
  00048	eb000000	 bl          InitializeCriticalSection

; 66   : 
; 67   :     // Save channel info
; 68   :     m_nRefCount = 0;

  0004c	e3a03000	 mov         r3, #0
  00050	e5863008	 str         r3, [r6, #8]

; 69   :     m_pController = pController;

  00054	e586500c	 str         r5, [r6, #0xC]

; 70   :     m_pUsbRegs = pController->PvUsbRegs();

  00058	e595e018	 ldr         lr, [r5, #0x18]

; 71   :     m_pCppiRegs = pController->PvCppiRegs();
; 72   :     m_nCppiChannelOffset = pController->m_nCppiChannelOffset;
; 73   :     m_pvBuffer = NULL;
; 74   :     m_paBuffer.QuadPart = 0;
; 75   :     m_cbBuffer = CPPI_MAX_BUFFER;
; 76   :     m_fIsTeardownPending = FALSE;
; 77   :     m_fIsOut = FALSE;
; 78   :     m_chNum = epNum - 1;

  0005c	e28430ff	 add         r3, r4, #0xFF
  00060	e20340ff	 and         r4, r3, #0xFF
  00064	e586e010	 str         lr, [r6, #0x10]
  00068	e595301c	 ldr         r3, [r5, #0x1C]

; 79   :     m_epNum = epNum;
; 80   :     m_qNum = 0;
; 81   :     m_pCallback = pCallback;
; 82   :     m_pUsbEpcsrRegs = &m_pUsbRegs->EPCSR[m_epNum];

  0006c	e1a0000e	 mov         r0, lr
  00070	e2871050	 add         r1, r7, #0x50
  00074	e5863018	 str         r3, [r6, #0x18]
  00078	e5d53028	 ldrb        r3, [r5, #0x28]

; 83   :     m_pCppiChannelRegs = &m_pCppiRegs->CDMACHANNEL[m_chNum + m_nCppiChannelOffset];

  0007c	e5962018	 ldr         r2, [r6, #0x18]
  00080	e3a09801	 mov         r9, #1, 16
  00084	e5c63020	 strb        r3, [r6, #0x20]
  00088	e20330ff	 and         r3, r3, #0xFF
  0008c	e0843003	 add         r3, r4, r3
  00090	e2833040	 add         r3, r3, #0x40
  00094	e080e201	 add         lr, r0, r1, lsl #4

; 84   : 
; 85   :     // Defaults
; 86   :     m_epAddr = 0;
; 87   :     m_fnAddr = 0;
; 88   :     m_epType = 0;
; 89   :     m_epMaxPkt = 0;
; 90   :     m_nMaxBD = 0;
; 91   :     m_pvTransferBuffer = NULL;
; 92   :     m_paTransferBuffer = 0;
; 93   :     m_nTransferFrames = 0;
; 94   :     m_pTransferFrameLengths = NULL;
; 95   :     m_pTransferFrameLengthsActual = NULL;
; 96   :     m_pdwIsochErrors = NULL;
; 97   :     m_pdwIsochLengths = NULL;
; 98   :     m_nTransferLength = 0;
; 99   :     m_nTransferOptions = 0;
; 100  :     m_pTransferCookie1 = NULL;
; 101  :     m_pTransferCookie2 = NULL;
; 102  :     m_nTransferComplete = 0;
; 103  :     m_nTransferFramesComplete = 0;
; 104  :     m_nSegmentPending = 0;
; 105  :     m_nSegmentFramesPending = 0;
; 106  :     m_nSegmentFramesComplete = 0;
; 107  :     m_nSegmentComplete = 0;
; 108  :     m_fIsRndisMode = FALSE;
; 109  :     m_fIsCancelPending = FALSE;
; 110  :     m_nCancelStatus = USB_CANCELED_ERROR;
; 111  : 
; 112  :     // Allocate DMA buffer
; 113  :     DMA_ADAPTER_OBJECT Adapter;
; 114  :     Adapter.ObjectSize = sizeof(DMA_ADAPTER_OBJECT);
; 115  :     Adapter.InterfaceType = Internal;
; 116  :     Adapter.BusNumber = 0;
; 117  : 
; 118  :     m_pvBuffer = (UINT8*)HalAllocateCommonBuffer(&Adapter, m_cbBuffer, &m_paBuffer, FALSE);

  00098	e3a0a000	 mov         r10, #0
  0009c	e0823283	 add         r3, r2, r3, lsl #5
  000a0	e3a05c01	 mov         r5, #1, 24
  000a4	e586a024	 str         r10, [r6, #0x24]
  000a8	e586a028	 str         r10, [r6, #0x28]
  000ac	e586a02c	 str         r10, [r6, #0x2C]
  000b0	e5869030	 str         r9, [r6, #0x30]
  000b4	e586e014	 str         lr, [r6, #0x14]
  000b8	e586301c	 str         r3, [r6, #0x1C]
  000bc	e3855001	 orr         r5, r5, #1
  000c0	e3a0b000	 mov         r11, #0
  000c4	e3a09000	 mov         r9, #0
  000c8	e3a0a00c	 mov         r10, #0xC
  000cc	e3a0e000	 mov         lr, #0
  000d0	e3a03000	 mov         r3, #0
  000d4	e2862028	 add         r2, r6, #0x28
  000d8	e3a01801	 mov         r1, #1, 16
  000dc	e28d0000	 add         r0, sp, #0
  000e0	e5869038	 str         r9, [r6, #0x38]
  000e4	e5869034	 str         r9, [r6, #0x34]
  000e8	e5c6403c	 strb        r4, [r6, #0x3C]
  000ec	e5c6703d	 strb        r7, [r6, #0x3D]
  000f0	e5c6903e	 strb        r9, [r6, #0x3E]
  000f4	e5868040	 str         r8, [r6, #0x40]
  000f8	e5c69060	 strb        r9, [r6, #0x60]
  000fc	e5c69061	 strb        r9, [r6, #0x61]
  00100	e5c69062	 strb        r9, [r6, #0x62]
  00104	e1c696b4	 strh        r9, [r6, #0x64]
  00108	e5869068	 str         r9, [r6, #0x68]
  0010c	e586906c	 str         r9, [r6, #0x6C]
  00110	e5869070	 str         r9, [r6, #0x70]
  00114	e5869074	 str         r9, [r6, #0x74]
  00118	e5869078	 str         r9, [r6, #0x78]
  0011c	e586907c	 str         r9, [r6, #0x7C]
  00120	e5869080	 str         r9, [r6, #0x80]
  00124	e5869084	 str         r9, [r6, #0x84]
  00128	e5869088	 str         r9, [r6, #0x88]
  0012c	e586908c	 str         r9, [r6, #0x8C]
  00130	e5869090	 str         r9, [r6, #0x90]
  00134	e5869094	 str         r9, [r6, #0x94]
  00138	e5869098	 str         r9, [r6, #0x98]
  0013c	e586909c	 str         r9, [r6, #0x9C]
  00140	e58690a0	 str         r9, [r6, #0xA0]
  00144	e58690a4	 str         r9, [r6, #0xA4]
  00148	e58690a8	 str         r9, [r6, #0xA8]
  0014c	e58690ac	 str         r9, [r6, #0xAC]
  00150	e58690b0	 str         r9, [r6, #0xB0]
  00154	e5869058	 str         r9, [r6, #0x58]
  00158	e586505c	 str         r5, [r6, #0x5C]
  0015c	e1cda0b0	 strh        r10, [sp]
  00160	e58db004	 str         r11, [sp, #4]
  00164	e58de008	 str         lr, [sp, #8]
  00168	eb000000	 bl          HalAllocateCommonBuffer
  0016c	e3500000	 cmp         r0, #0
  00170	e5860024	 str         r0, [r6, #0x24]

; 119  :     DEBUGCHK(m_pvBuffer != NULL);
; 120  :     if (!m_pvBuffer)

  00174	1a000005	 bne         |$LN2@CCppiDmaCh|

; 121  :     {
; 122  :         ERRORMSG(1, (L"Failed to allocate buffer!\r\n"));

  00178	e59f1070	 ldr         r1, [pc, #0x70]
  0017c	e59f0068	 ldr         r0, [pc, #0x68]
  00180	e3a0207a	 mov         r2, #0x7A
  00184	eb000000	 bl          NKDbgPrintfW
  00188	e59f0068	 ldr         r0, [pc, #0x68]

; 123  :         return;

  0018c	ea000010	 b           |$LN21@CCppiDmaCh|
  00190		 |$LN2@CCppiDmaCh|

; 124  :     }
; 125  : 
; 126  :     // Allocate frame lengths array
; 127  :     m_pTransferFrameLengthsActual = (UINT32*)LocalAlloc(LPTR, CPPI_MAX_DESCR * sizeof(UINT32));

  00190	e3a01b01	 mov         r1, #1, 22
  00194	e3a00040	 mov         r0, #0x40
  00198	eb000000	 bl          LocalAlloc
  0019c	e3500000	 cmp         r0, #0
  001a0	e586007c	 str         r0, [r6, #0x7C]

; 128  :     DEBUGCHK(m_pTransferFrameLengthsActual != NULL);
; 129  :     if (!m_pTransferFrameLengthsActual)

  001a4	1a00000b	 bne         |$LN8@CCppiDmaCh|

; 130  :     {
; 131  :         ERRORMSG(1, (L"Failed to alloc frame lengths array!\r\n"));

  001a8	e59f1040	 ldr         r1, [pc, #0x40]
  001ac	e59f0038	 ldr         r0, [pc, #0x38]
  001b0	e3a02083	 mov         r2, #0x83
  001b4	eb000000	 bl          NKDbgPrintfW
  001b8	e59f0034	 ldr         r0, [pc, #0x34]

; 132  :         return;

  001bc	ea000004	 b           |$LN21@CCppiDmaCh|
  001c0		 |$LN3@CCppiDmaCh|

; 59   :     {
; 60   :         ERRORMSG(1, (L"Invalid args!\r\n"));

  001c0	e59f1028	 ldr         r1, [pc, #0x28]
  001c4	e59f0020	 ldr         r0, [pc, #0x20]
  001c8	e3a0203c	 mov         r2, #0x3C
  001cc	eb000000	 bl          NKDbgPrintfW
  001d0	e59f0010	 ldr         r0, [pc, #0x10]
  001d4		 |$LN21@CCppiDmaCh|
  001d4	eb000000	 bl          NKDbgPrintfW
  001d8		 |$LN8@CCppiDmaCh|

; 133  :     }
; 134  : 
; 135  :     DEBUGMSG(ZONE_INIT || CPPI_DBG_CHANNEL,
; 136  :         (L"-CCppiDmaChannel: Ch %u, EP %u\r\n",
; 137  :         m_chNum,
; 138  :         m_epNum));
; 139  : }

  001d8	e1a00006	 mov         r0, r6
  001dc	e28dd00c	 add         sp, sp, #0xC
  001e0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001e4	e12fff1e	 bx          lr
  001e8		 |$LN25@CCppiDmaCh|
  001e8		 |$LN26@CCppiDmaCh|
  001e8	00000000	 DCD         |??_C@_1CA@KIDFAHAB@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAs?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  001ec		 |$LN27@CCppiDmaCh|
  001ec	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  001f0		 |$LN28@CCppiDmaCh|
  001f0	00000000	 DCD         |??_C@_1JO@GFKEKIMG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  001f4		 |$LN29@CCppiDmaCh|
  001f4	00000000	 DCD         |??_C@_1EO@DIIKGLIP@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AAs?$AA?5?$AAa?$AAr@|
  001f8		 |$LN30@CCppiDmaCh|
  001f8	00000000	 DCD         |??_C@_1DK@EIGIDAKC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  001fc		 |$LN31@CCppiDmaCh|
  001fc	00000000	 DCD         |??_7CCppiDmaChannel@@6B@|
  00200		 |$M40417|

			 ENDP  ; |??0CCppiDmaChannel@@QAA@PAVCCppiDmaController@@EP6AXPAV0@IIIIPAX2@Z@Z|, CCppiDmaChannel::CCppiDmaChannel

	EXPORT	|??1CCppiDmaChannel@@UAA@XZ|		; CCppiDmaChannel::~CCppiDmaChannel
	IMPORT	|DeleteCriticalSection|
	IMPORT	|HalFreeCommonBuffer|
	IMPORT	|LocalFree|

  00000			 AREA	 |.pdata|, PDATA
|$T40434| DCD	|$LN5@CCppiDmaCh@2|
	DCD	0x40002102
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CCppiDmaChannel@@UAA@XZ| PROC	; CCppiDmaChannel::~CCppiDmaChannel

; 143  : {

  00000		 |$LN5@CCppiDmaCh@2|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M40431|
  00008	e1a05000	 mov         r5, r0
  0000c	e59f306c	 ldr         r3, [pc, #0x6C]

; 144  :     DEBUGMSG(ZONE_INIT || CPPI_DBG_CHANNEL,
; 145  :         (L"+~CCppiDmaChannel: %s Ch %u, EP %u\r\n",
; 146  :         IsOut() ? L"OUT" : L"IN",
; 147  :         m_chNum,
; 148  :         m_epNum));
; 149  : 
; 150  :     // Make sure we are cleaned up correctly
; 151  :     DEBUGCHK(!IsInUse());
; 152  : 
; 153  :     // Free frame lengths array
; 154  :     m_pTransferFrameLengthsActual = (UINT32*)LocalFree((HLOCAL)m_pTransferFrameLengthsActual);

  00010	e595007c	 ldr         r0, [r5, #0x7C]
  00014	e5853000	 str         r3, [r5]
  00018	eb000000	 bl          LocalFree

; 155  :     DEBUGCHK(m_pTransferFrameLengthsActual == NULL);
; 156  : 
; 157  :     // Free DMA buffer
; 158  :     DMA_ADAPTER_OBJECT Adapter;
; 159  :     Adapter.ObjectSize = sizeof(DMA_ADAPTER_OBJECT);
; 160  :     Adapter.InterfaceType = Internal;
; 161  :     Adapter.BusNumber = 0;
; 162  :     HalFreeCommonBuffer(&Adapter, m_cbBuffer, m_paBuffer, m_pvBuffer, FALSE);

  0001c	e5954024	 ldr         r4, [r5, #0x24]
  00020	e5952028	 ldr         r2, [r5, #0x28]
  00024	e595302c	 ldr         r3, [r5, #0x2C]
  00028	e5951030	 ldr         r1, [r5, #0x30]
  0002c	e1a0e000	 mov         lr, r0
  00030	e3a0600c	 mov         r6, #0xC
  00034	e3a07000	 mov         r7, #0
  00038	e3a08000	 mov         r8, #0
  0003c	e3a09000	 mov         r9, #0
  00040	e28d0008	 add         r0, sp, #8
  00044	e58d4000	 str         r4, [sp]
  00048	e585e07c	 str         lr, [r5, #0x7C]
  0004c	e1cd60b8	 strh        r6, [sp, #8]
  00050	e58d700c	 str         r7, [sp, #0xC]
  00054	e58d8010	 str         r8, [sp, #0x10]
  00058	e58d9004	 str         r9, [sp, #4]
  0005c	eb000000	 bl          HalFreeCommonBuffer

; 163  :     m_pvBuffer = NULL;
; 164  : 
; 165  :     m_pCppiRegs = NULL;
; 166  :     m_pUsbRegs = NULL;
; 167  : 
; 168  :     DeleteCriticalSection(&m_csLock);

  00060	e2850044	 add         r0, r5, #0x44
  00064	e5859024	 str         r9, [r5, #0x24]
  00068	e5859018	 str         r9, [r5, #0x18]
  0006c	e5859010	 str         r9, [r5, #0x10]
  00070	eb000000	 bl          DeleteCriticalSection

; 169  : 
; 170  :     DEBUGMSG(ZONE_INIT || CPPI_DBG_CHANNEL,
; 171  :         (L"-~CCppiDmaChannel\r\n"));
; 172  : }

  00074	e28dd014	 add         sp, sp, #0x14
  00078	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN6@CCppiDmaCh@2|
  00080		 |$LN7@CCppiDmaCh@2|
  00080	00000000	 DCD         |??_7CCppiDmaChannel@@6B@|
  00084		 |$M40432|

			 ENDP  ; |??1CCppiDmaChannel@@UAA@XZ|, CCppiDmaChannel::~CCppiDmaChannel

	EXPORT	|?ReleaseSegment@CCppiDmaChannel@@IAAXXZ| ; CCppiDmaChannel::ReleaseSegment
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|memmove|
	IMPORT	|MmMapIoSpace|
	IMPORT	|__rt_udiv|
	IMPORT	|memcpy|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T40505| DCD	|$LN74@ReleaseSeg|
	DCD	0x4000b301
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ReleaseSegment@CCppiDmaChannel@@IAAXXZ| PROC ; CCppiDmaChannel::ReleaseSegment

; 394  : {

  00000		 |$LN74@ReleaseSeg|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M40502|
  00004	e1a04000	 mov         r4, r0

; 395  :     DEBUGCHK(m_nSegmentFramesPending > 0);
; 396  : 
; 397  :     if (m_nSegmentPending)

  00008	e59430a0	 ldr         r3, [r4, #0xA0]
  0000c	e3a09000	 mov         r9, #0
  00010	e1b02003	 movs        r2, r3
  00014	0a00009e	 beq         |$LN35@ReleaseSeg|

; 398  :     {
; 399  :         DEBUGCHK(m_pvTransferBuffer || m_paTransferBuffer);
; 400  : 
; 401  :         if (m_paTransferBuffer)

  00018	e5943070	 ldr         r3, [r4, #0x70]
  0001c	e1b00003	 movs        r0, r3

; 402  :         {
; 403  :             if (IsIn())

  00020	e5943034	 ldr         r3, [r4, #0x34]
  00024	0a000033	 beq         |$LN34@ReleaseSeg|
  00028	e3530000	 cmp         r3, #0
  0002c	1a00002e	 bne         |$LN33@ReleaseSeg|

; 404  :             {
; 405  :                 if (IsIso())

  00030	e5d43062	 ldrb        r3, [r4, #0x62]
  00034	e3530001	 cmp         r3, #1
  00038	1a000027	 bne         |$LN32@ReleaseSeg|

; 406  :                 {
; 407  :                     // For ISO we may need to compress the buffer
; 408  :                     if (m_nTransferOptions & USB_COMPRESS_ISOCH)

  0003c	e594308c	 ldr         r3, [r4, #0x8C]
  00040	e3130b02	 tst         r3, #2, 22
  00044	0a000028	 beq         |$LN33@ReleaseSeg|

; 409  :                     {
; 410  :                         PHYSICAL_ADDRESS pa;
; 411  :                         UINT8 *pvIBuffer;
; 412  : 
; 413  :                         pa.QuadPart = m_paTransferBuffer;

  00048	e3a01000	 mov         r1, #0

; 414  :                         pvIBuffer = (UINT8 *)MmMapIoSpace(pa, m_nSegmentPending, FALSE);

  0004c	e3a03000	 mov         r3, #0
  00050	eb000000	 bl          MmMapIoSpace
  00054	e1b05000	 movs        r5, r0

; 415  : 
; 416  :                         if (pvIBuffer)

  00058	0a00001a	 beq         |$LN30@ReleaseSeg|

; 417  :                         {
; 418  :                             // Compress the buffer starting with frame #1
; 419  :                             UINT8 *pvDesctBuffer = pvIBuffer + m_pTransferFrameLengthsActual[0];

  0005c	e594007c	 ldr         r0, [r4, #0x7C]

; 420  :                             UINT8 *pvSrcBuffer = pvIBuffer + m_pTransferFrameLengths[0];

  00060	e5943078	 ldr         r3, [r4, #0x78]

; 421  : 
; 422  :                             for (UINT32 i = 1; i < m_nSegmentFramesComplete; i ++)

  00064	e59410a8	 ldr         r1, [r4, #0xA8]
  00068	e5902000	 ldr         r2, [r0]
  0006c	e5933000	 ldr         r3, [r3]
  00070	e3a06001	 mov         r6, #1
  00074	e0827005	 add         r7, r2, r5
  00078	e0838005	 add         r8, r3, r5
  0007c	e3510001	 cmp         r1, #1
  00080	9a00000d	 bls         |$LN27@ReleaseSeg|
  00084		 |$LL29@ReleaseSeg|

; 423  :                             {
; 424  :                                 memmove(pvDesctBuffer, pvSrcBuffer, m_pTransferFrameLengthsActual[i]);

  00084	e7902106	 ldr         r2, [r0, +r6, lsl #2]
  00088	e1a01008	 mov         r1, r8
  0008c	e1a00007	 mov         r0, r7
  00090	eb000000	 bl          memmove

; 425  :                                 pvDesctBuffer += m_pTransferFrameLengthsActual[i];

  00094	e594007c	 ldr         r0, [r4, #0x7C]

; 426  :                                 pvSrcBuffer += m_pTransferFrameLengths[0];

  00098	e5943078	 ldr         r3, [r4, #0x78]
  0009c	e59410a8	 ldr         r1, [r4, #0xA8]
  000a0	e7902106	 ldr         r2, [r0, +r6, lsl #2]
  000a4	e5933000	 ldr         r3, [r3]
  000a8	e2866001	 add         r6, r6, #1
  000ac	e0877002	 add         r7, r7, r2
  000b0	e0888003	 add         r8, r8, r3
  000b4	e1560001	 cmp         r6, r1
  000b8	3afffff1	 bcc         |$LL29@ReleaseSeg|
  000bc		 |$LN27@ReleaseSeg|

; 427  :                             }
; 428  : 
; 429  :                             MmUnmapIoSpace(pvIBuffer, m_nSegmentPending);

  000bc	e59410a0	 ldr         r1, [r4, #0xA0]
  000c0	e1a00005	 mov         r0, r5
  000c4	eb000000	 bl          MmUnmapIoSpace
  000c8		 |$LN30@ReleaseSeg|

; 430  :                         }
; 431  :                         else
; 432  :                         {
; 433  :                             // There is nothing we can do about it!
; 434  :                             DEBUGCHK(FALSE);
; 435  :                         }
; 436  : 
; 437  :                         m_paTransferBuffer += m_nSegmentComplete;

  000c8	e59420ac	 ldr         r2, [r4, #0xAC]
  000cc	e5943070	 ldr         r3, [r4, #0x70]
  000d0	e0823003	 add         r3, r2, r3

; 447  :                 }
; 448  :             }
; 449  :             else // Out
; 450  :             {
; 451  :                 m_paTransferBuffer += m_nSegmentPending;

  000d4	e5843070	 str         r3, [r4, #0x70]

; 452  :             }
; 453  :         }
; 454  :         else // Virtual buffer

  000d8	ea000032	 b           |$LN13@ReleaseSeg|
  000dc		 |$LN32@ReleaseSeg|

; 438  :                     }
; 439  :                     else // Uncompressed
; 440  :                     {
; 441  :                         m_paTransferBuffer += m_nSegmentPending;
; 442  :                     }
; 443  :                 }
; 444  :                 else // Non-ISO
; 445  :                 {
; 446  :                     m_paTransferBuffer += m_nSegmentComplete;

  000dc	e59430ac	 ldr         r3, [r4, #0xAC]
  000e0	e0803003	 add         r3, r0, r3

; 447  :                 }
; 448  :             }
; 449  :             else // Out
; 450  :             {
; 451  :                 m_paTransferBuffer += m_nSegmentPending;

  000e4	e5843070	 str         r3, [r4, #0x70]

; 452  :             }
; 453  :         }
; 454  :         else // Virtual buffer

  000e8	ea00002e	 b           |$LN13@ReleaseSeg|
  000ec		 |$LN33@ReleaseSeg|

; 447  :                 }
; 448  :             }
; 449  :             else // Out
; 450  :             {
; 451  :                 m_paTransferBuffer += m_nSegmentPending;

  000ec	e0803002	 add         r3, r0, r2
  000f0	e5843070	 str         r3, [r4, #0x70]

; 452  :             }
; 453  :         }
; 454  :         else // Virtual buffer

  000f4	ea00002b	 b           |$LN13@ReleaseSeg|
  000f8		 |$LN34@ReleaseSeg|

; 455  :         {
; 456  :             if (IsIn())

  000f8	e3530000	 cmp         r3, #0
  000fc	1a000026	 bne         |$LN21@ReleaseSeg|

; 457  :             {
; 458  :                 if (IsIso())

  00100	e5d43062	 ldrb        r3, [r4, #0x62]
  00104	e3530001	 cmp         r3, #1
  00108	1a00001e	 bne         |$LN20@ReleaseSeg|

; 459  :                 {
; 460  :                     // For ISO the received frames could be smaller than requested,
; 461  :                     // thus we have to copy the whole buffer unless the client opted
; 462  :                     // for a compressed transfer.
; 463  :                     if (m_nTransferOptions & USB_COMPRESS_ISOCH)

  0010c	e594308c	 ldr         r3, [r4, #0x8C]
  00110	e3130b02	 tst         r3, #2, 22
  00114	0a000016	 beq         |$LN19@ReleaseSeg|

; 464  :                     {
; 465  :                         UINT8 *pvBuffer = m_pvBuffer;
; 466  : 
; 467  :                         for (UINT32 i = 0; i < m_nSegmentFramesComplete; i ++)

  00118	e59430a8	 ldr         r3, [r4, #0xA8]
  0011c	e5946024	 ldr         r6, [r4, #0x24]
  00120	e3a05000	 mov         r5, #0
  00124	e3530000	 cmp         r3, #0
  00128	9a00001e	 bls         |$LN13@ReleaseSeg|
  0012c	e594007c	 ldr         r0, [r4, #0x7C]
  00130		 |$LL18@ReleaseSeg|

; 468  :                         {
; 469  :                             memcpy(m_pvTransferBuffer, pvBuffer, m_pTransferFrameLengthsActual[i]);

  00130	e7902105	 ldr         r2, [r0, +r5, lsl #2]
  00134	e594006c	 ldr         r0, [r4, #0x6C]
  00138	e1a01006	 mov         r1, r6
  0013c	eb000000	 bl          memcpy

; 470  :                             m_pvTransferBuffer += m_pTransferFrameLengthsActual[i];

  00140	e594007c	 ldr         r0, [r4, #0x7C]
  00144	e594206c	 ldr         r2, [r4, #0x6C]

; 471  :                             pvBuffer += m_pTransferFrameLengths[i];

  00148	e5941078	 ldr         r1, [r4, #0x78]
  0014c	e7903105	 ldr         r3, [r0, +r5, lsl #2]
  00150	e0833002	 add         r3, r3, r2
  00154	e584306c	 str         r3, [r4, #0x6C]
  00158	e7913105	 ldr         r3, [r1, +r5, lsl #2]
  0015c	e59420a8	 ldr         r2, [r4, #0xA8]
  00160	e2855001	 add         r5, r5, #1
  00164	e0866003	 add         r6, r6, r3
  00168	e1550002	 cmp         r5, r2
  0016c	3affffef	 bcc         |$LL18@ReleaseSeg|

; 472  :                         }
; 473  :                     }
; 474  :                     else

  00170	ea00000c	 b           |$LN13@ReleaseSeg|
  00174		 |$LN19@ReleaseSeg|

; 475  :                     {
; 476  :                         // Copy the whole segment
; 477  :                         memcpy(m_pvTransferBuffer, m_pvBuffer, m_nSegmentPending);

  00174	e5941024	 ldr         r1, [r4, #0x24]
  00178	e594006c	 ldr         r0, [r4, #0x6C]
  0017c	eb000000	 bl          memcpy

; 478  :                         m_pvTransferBuffer += m_nSegmentPending;

  00180	e59420a0	 ldr         r2, [r4, #0xA0]

; 479  :                     }
; 480  :                 }
; 481  :                 else

  00184	ea000004	 b           |$LN21@ReleaseSeg|
  00188		 |$LN20@ReleaseSeg|

; 482  :                 {
; 483  :                     // Copy completed segment to the user buffer
; 484  :                     memcpy(m_pvTransferBuffer, m_pvBuffer, m_nSegmentComplete);

  00188	e59420ac	 ldr         r2, [r4, #0xAC]
  0018c	e5941024	 ldr         r1, [r4, #0x24]
  00190	e594006c	 ldr         r0, [r4, #0x6C]
  00194	eb000000	 bl          memcpy

; 485  :                     m_pvTransferBuffer += m_nSegmentComplete;

  00198	e59420ac	 ldr         r2, [r4, #0xAC]
  0019c		 |$LN21@ReleaseSeg|

; 486  :                 }
; 487  :             }
; 488  :             else // Out
; 489  :             {
; 490  :                 m_pvTransferBuffer += m_nSegmentPending;

  0019c	e594306c	 ldr         r3, [r4, #0x6C]
  001a0	e0823003	 add         r3, r2, r3
  001a4	e584306c	 str         r3, [r4, #0x6C]
  001a8		 |$LN13@ReleaseSeg|

; 491  :             }
; 492  :         }
; 493  : 
; 494  :         if (IsIso())

  001a8	e5d43062	 ldrb        r3, [r4, #0x62]
  001ac	e3530001	 cmp         r3, #1
  001b0	1a000032	 bne         |$LN4@ReleaseSeg|

; 495  :         {
; 496  :             // Copy ISO frame lengths
; 497  :             if (m_pdwIsochLengths)

  001b4	e5943084	 ldr         r3, [r4, #0x84]
  001b8	e3530000	 cmp         r3, #0
  001bc	0a00000d	 beq         |$LN8@ReleaseSeg|

; 498  :             {
; 499  :                 for (UINT32 i = 0; i < m_nSegmentFramesComplete; i ++)

  001c0	e59430a8	 ldr         r3, [r4, #0xA8]
  001c4	e3a0e000	 mov         lr, #0
  001c8	e3530000	 cmp         r3, #0
  001cc	9a000009	 bls         |$LN8@ReleaseSeg|
  001d0		 |$LL10@ReleaseSeg|

; 500  :                 {
; 501  :                     m_pdwIsochLengths[i + m_nTransferFramesComplete] = m_pTransferFrameLengthsActual[i];

  001d0	e594307c	 ldr         r3, [r4, #0x7C]
  001d4	e594209c	 ldr         r2, [r4, #0x9C]
  001d8	e5940084	 ldr         r0, [r4, #0x84]
  001dc	e793110e	 ldr         r1, [r3, +lr, lsl #2]
  001e0	e082300e	 add         r3, r2, lr
  001e4	e28ee001	 add         lr, lr, #1
  001e8	e7801103	 str         r1, [r0, +r3, lsl #2]
  001ec	e59430a8	 ldr         r3, [r4, #0xA8]
  001f0	e15e0003	 cmp         lr, r3
  001f4	3afffff5	 bcc         |$LL10@ReleaseSeg|
  001f8		 |$LN8@ReleaseSeg|

; 502  :                     //RETAILMSG(1, (L"IsochLen[%d] = %d", i+m_nTransferFramesComplete, m_pdwIsochLengths[i]));
; 503  :                 }
; 504  :             }
; 505  : 
; 506  :             // Set ISO error flags
; 507  :             if (m_pdwIsochErrors)

  001f8	e5943080	 ldr         r3, [r4, #0x80]
  001fc	e3530000	 cmp         r3, #0
  00200	0a00001e	 beq         |$LN4@ReleaseSeg|

; 508  :             {
; 509  :                 for (UINT32 i = 0; i < m_nSegmentFramesComplete; i ++)

  00204	e59430a8	 ldr         r3, [r4, #0xA8]
  00208	e3a05000	 mov         r5, #0
  0020c	e3530000	 cmp         r3, #0
  00210	9a00001a	 bls         |$LN4@ReleaseSeg|
  00214	e3a06009	 mov         r6, #9
  00218		 |$LL6@ReleaseSeg|

; 510  :                 {
; 511  :                     // Short packets not allowed?
; 512  :                     if (((m_nTransferLength % (UINT32)m_epMaxPkt) == 0) &&
; 513  :                         ((m_nTransferOptions & USB_SHORT_TRANSFER_OK) == 0) &&
; 514  :                         ((m_pTransferFrameLengthsActual[i] % (UINT32)m_epMaxPkt) != 0))

  00218	e5941088	 ldr         r1, [r4, #0x88]
  0021c	e1d406b4	 ldrh        r0, [r4, #0x64]
  00220	eb000000	 bl          __rt_udiv
  00224	e3510000	 cmp         r1, #0
  00228	1a00000c	 bne         |$LN3@ReleaseSeg|
  0022c	e594308c	 ldr         r3, [r4, #0x8C]
  00230	e3130c02	 tst         r3, #2, 24
  00234	1a000009	 bne         |$LN3@ReleaseSeg|
  00238	e594307c	 ldr         r3, [r4, #0x7C]
  0023c	e1d406b4	 ldrh        r0, [r4, #0x64]
  00240	e7931105	 ldr         r1, [r3, +r5, lsl #2]
  00244	eb000000	 bl          __rt_udiv
  00248	e3510000	 cmp         r1, #0

; 515  :                     {
; 516  :                         // Indicate underrun error
; 517  :                         m_pdwIsochErrors[i + m_nTransferFramesComplete] = USB_DATA_UNDERRUN_ERROR;

  0024c	1594309c	 ldrne       r3, [r4, #0x9C]
  00250	15942080	 ldrne       r2, [r4, #0x80]
  00254	10833005	 addne       r3, r3, r5
  00258	17826103	 strne       r6, [r2, +r3, lsl #2]
  0025c	1a000003	 bne         |$LN5@ReleaseSeg|
  00260		 |$LN3@ReleaseSeg|

; 518  :                         //RETAILMSG(1, (L"IsochErr[%d] = UNDERRUN", i + m_nTransferFramesComplete));
; 519  :                     }
; 520  :                     else
; 521  :                     {
; 522  :                         m_pdwIsochErrors[i + m_nTransferFramesComplete] = USB_NO_ERROR;

  00260	e594309c	 ldr         r3, [r4, #0x9C]
  00264	e5942080	 ldr         r2, [r4, #0x80]
  00268	e0833005	 add         r3, r3, r5
  0026c	e7829103	 str         r9, [r2, +r3, lsl #2]
  00270		 |$LN5@ReleaseSeg|
  00270	e59430a8	 ldr         r3, [r4, #0xA8]
  00274	e2855001	 add         r5, r5, #1
  00278	e1550003	 cmp         r5, r3
  0027c	3affffe5	 bcc         |$LL6@ReleaseSeg|
  00280		 |$LN4@ReleaseSeg|

; 523  :                         //RETAILMSG(1, (L"IsochErr[%d] = NO_ERROR", i + m_nTransferFramesComplete));
; 524  :                     }
; 525  :                 }
; 526  :             }
; 527  :         }
; 528  : 
; 529  :         m_nTransferComplete += m_nSegmentComplete;

  00280	e59420ac	 ldr         r2, [r4, #0xAC]
  00284	e5943098	 ldr         r3, [r4, #0x98]

; 530  :         m_nSegmentComplete = 0;

  00288	e58490ac	 str         r9, [r4, #0xAC]
  0028c	e0823003	 add         r3, r2, r3
  00290	e5843098	 str         r3, [r4, #0x98]
  00294		 |$LN35@ReleaseSeg|

; 531  :     }
; 532  : 
; 533  :     if (m_pTransferFrameLengths)

  00294	e5943078	 ldr         r3, [r4, #0x78]

; 534  :     {
; 535  :         m_pTransferFrameLengths += m_nSegmentFramesComplete;
; 536  :     }
; 537  : 
; 538  :     m_nTransferFramesComplete += m_nSegmentFramesComplete;
; 539  :     m_nSegmentFramesComplete = 0;
; 540  : 
; 541  :     m_nSegmentPending = 0;

  00298	e58490a0	 str         r9, [r4, #0xA0]

; 542  :     m_nSegmentFramesPending = 0;

  0029c	e58490a4	 str         r9, [r4, #0xA4]
  002a0	e1b02003	 movs        r2, r3
  002a4	159430a8	 ldrne       r3, [r4, #0xA8]
  002a8	10823103	 addne       r3, r2, r3, lsl #2
  002ac	e59420a8	 ldr         r2, [r4, #0xA8]
  002b0	15843078	 strne       r3, [r4, #0x78]
  002b4	e594309c	 ldr         r3, [r4, #0x9C]
  002b8	e58490a8	 str         r9, [r4, #0xA8]
  002bc	e0823003	 add         r3, r2, r3
  002c0	e584309c	 str         r3, [r4, #0x9C]

; 543  : }

  002c4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  002c8	e12fff1e	 bx          lr
  002cc		 |$M40503|

			 ENDP  ; |?ReleaseSegment@CCppiDmaChannel@@IAAXXZ|, CCppiDmaChannel::ReleaseSegment

	EXPORT	|?UpdateRndisMode@CCppiDmaChannel@@IAAXH@Z| ; CCppiDmaChannel::UpdateRndisMode
	EXPORT	|??_C@_1JA@BDDMFJN@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAR?$AAn?$AAd?$AAi?$AAs?$AAM?$AAo?$AAd@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T40538| DCD	|$LN49@UpdateRndi|
	DCD	0x40007801

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@BDDMFJN@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAR?$AAn?$AAd?$AAi?$AAs?$AAM?$AAo?$AAd@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":", 0x0, ":", 0x0, "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "R"
	DCB	0x0, "n", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "M", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, " ", 0x0, "n", 0x0, "u"
	DCB	0x0, "m", 0x0, "b", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateRndisMode@CCppiDmaChannel@@IAAXH@Z| PROC ; CCppiDmaChannel::UpdateRndisMode

; 580  : {

  00000		 |$LN49@UpdateRndi|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40535|
  00004	e1a0e001	 mov         lr, r1
  00008	e1a04000	 mov         r4, r0

; 581  : 	volatile UINT32* pRndisReg = NULL;
; 582  :     UINT32 rndisRegVal;
; 583  :     UINT32 mode;
; 584  : 
; 585  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 586  :         (L"+CCppiDmaChannel::UpdateRndisMode: %s\n",
; 587  :         fIsRndisMode ?
; 588  :         L"TRUE" :
; 589  :         L"FALSE"));
; 590  : 
; 591  : 
; 592  :     /* Mode
; 593  :        00: Transparent
; 594  :        01: RNDIS
; 595  :        10: CDC
; 596  :        11: Generic RNDIS
; 597  :     */
; 598  :     if  (m_fIsOut)

  0000c	e5943034	 ldr         r3, [r4, #0x34]

; 599  : 	{
; 600  : 		pRndisReg = &m_pUsbRegs->TXMODE;
; 601  : 	}
; 602  :     else
; 603  : 	{
; 604  : 		pRndisReg = &m_pUsbRegs->RXMODE;
; 605  : 	}
; 606  : 
; 607  : 	rndisRegVal = *pRndisReg;
; 608  :     mode = 0x3 << (m_chNum * 2);

  00010	e3a00003	 mov         r0, #3
  00014	e3530000	 cmp         r3, #0
  00018	e5943010	 ldr         r3, [r4, #0x10]
  0001c	12832070	 addne       r2, r3, #0x70
  00020	02832074	 addeq       r2, r3, #0x74
  00024	e5d4303c	 ldrb        r3, [r4, #0x3C]
  00028	e5921000	 ldr         r1, [r2]

; 609  : 
; 610  :     if (fIsRndisMode)

  0002c	e35e0000	 cmp         lr, #0
  00030	e1a03083	 mov         r3, r3, lsl #1

; 611  : 	{
; 612  :         rndisRegVal |= mode;

  00034	11811310	 orrne       r1, r1, r0, lsl r3

; 613  : 	}
; 614  :     else
; 615  : 	{
; 616  :         rndisRegVal &= ~mode;

  00038	01c11310	 biceq       r1, r1, r0, lsl r3

; 617  : 	}
; 618  : 
; 619  :     if (*pRndisReg != rndisRegVal)

  0003c	e5923000	 ldr         r3, [r2]
  00040	e1530001	 cmp         r3, r1

; 620  :     {
; 621  :         *pRndisReg = rndisRegVal;

  00044	15821000	 strne       r1, [r2]

; 622  :     }
; 623  : 
; 624  :     m_fIsRndisMode = fIsRndisMode;

  00048	e584e0b0	 str         lr, [r4, #0xB0]

; 625  : 
; 626  :     // The generic RNDIS size register is only used for receive channels
; 627  :     if (fIsRndisMode && !m_fIsOut)

  0004c	e35e0000	 cmp         lr, #0
  00050	0a00005d	 beq         |$LN29@UpdateRndi|
  00054	e5943034	 ldr         r3, [r4, #0x34]
  00058	e3530000	 cmp         r3, #0
  0005c	1a00005a	 bne         |$LN29@UpdateRndi|

; 628  :     {
; 629  :         // Round transfer size up to multiple of EP size
; 630  :         UINT32 rndisSize = ((m_nTransferLength + m_epMaxPkt - 1) / m_epMaxPkt) * m_epMaxPkt;

  00060	e1d456b4	 ldrh        r5, [r4, #0x64]
  00064	e5943088	 ldr         r3, [r4, #0x88]
  00068	e1a00005	 mov         r0, r5
  0006c	e0853003	 add         r3, r5, r3
  00070	e2431001	 sub         r1, r3, #1
  00074	eb000000	 bl          __rt_udiv

; 631  :         if (rndisSize == 0)
; 632  :             rndisSize = m_epMaxPkt;
; 633  : 
; 634  :         // Set the Generic RNDIS EP reg
; 635  :         switch (m_chNum)

  00078	e5d4103c	 ldrb        r1, [r4, #0x3C]
  0007c	e0120590	 muls        r2, r0, r5
  00080	01a02005	 moveq       r2, r5
  00084	e351000e	 cmp         r1, #0xE
  00088	8a000047	 bhi         |$LN1@UpdateRndi|
  0008c	e1a03081	 mov         r3, r1, lsl #1
  00090	e083300f	 add         r3, r3, pc
  00094	e1d330b4	 ldrh        r3, [r3, #4]
  00098	e08ff003	 add         pc, pc, r3
  0009c		 |$LN31@UpdateRndi|
  0009c		 |$LN30@UpdateRndi|
  0009c		 |$LN32@UpdateRndi|
  0009c	001c		 DCW         0x1c
  0009e		 |$LN33@UpdateRndi|
  0009e	002c		 DCW         0x2c
  000a0		 |$LN34@UpdateRndi|
  000a0	003c		 DCW         0x3c
  000a2		 |$LN35@UpdateRndi|
  000a2	004c		 DCW         0x4c
  000a4		 |$LN36@UpdateRndi|
  000a4	005c		 DCW         0x5c
  000a6		 |$LN37@UpdateRndi|
  000a6	006c		 DCW         0x6c
  000a8		 |$LN38@UpdateRndi|
  000a8	007c		 DCW         0x7c
  000aa		 |$LN39@UpdateRndi|
  000aa	008c		 DCW         0x8c
  000ac		 |$LN40@UpdateRndi|
  000ac	009c		 DCW         0x9c
  000ae		 |$LN41@UpdateRndi|
  000ae	00ac		 DCW         0xac
  000b0		 |$LN42@UpdateRndi|
  000b0	00bc		 DCW         0xbc
  000b2		 |$LN43@UpdateRndi|
  000b2	00cc		 DCW         0xcc
  000b4		 |$LN44@UpdateRndi|
  000b4	00dc		 DCW         0xdc
  000b6		 |$LN45@UpdateRndi|
  000b6	00ec		 DCW         0xec
  000b8		 |$LN46@UpdateRndi|
  000b8	00fc		 DCW         0xfc
  000ba		 |$LN54@UpdateRndi|

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  000ba	00fc		 DCW         0xfc
  000bc		 |$LN16@UpdateRndi|

; 636  :         {
; 637  :         case 0  : m_pUsbRegs->GENRNDISSZ1  = rndisSize; break;

  000bc	e5943010	 ldr         r3, [r4, #0x10]
  000c0	e5832080	 str         r2, [r3, #0x80]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  000c4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$LN15@UpdateRndi|

; 638  :         case 1  : m_pUsbRegs->GENRNDISSZ2  = rndisSize; break;

  000cc	e5943010	 ldr         r3, [r4, #0x10]
  000d0	e5832084	 str         r2, [r3, #0x84]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  000d4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$LN14@UpdateRndi|

; 639  :         case 2  : m_pUsbRegs->GENRNDISSZ3  = rndisSize; break;

  000dc	e5943010	 ldr         r3, [r4, #0x10]
  000e0	e5832088	 str         r2, [r3, #0x88]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  000e4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000e8	e12fff1e	 bx          lr
  000ec		 |$LN13@UpdateRndi|

; 640  :         case 3  : m_pUsbRegs->GENRNDISSZ4  = rndisSize; break;

  000ec	e5943010	 ldr         r3, [r4, #0x10]
  000f0	e583208c	 str         r2, [r3, #0x8C]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  000f4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000f8	e12fff1e	 bx          lr
  000fc		 |$LN12@UpdateRndi|

; 641  :         case 4  : m_pUsbRegs->GENRNDISSZ5  = rndisSize; break;

  000fc	e5943010	 ldr         r3, [r4, #0x10]
  00100	e5832090	 str         r2, [r3, #0x90]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  00104	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00108	e12fff1e	 bx          lr
  0010c		 |$LN11@UpdateRndi|

; 642  :         case 5  : m_pUsbRegs->GENRNDISSZ6  = rndisSize; break;

  0010c	e5943010	 ldr         r3, [r4, #0x10]
  00110	e5832094	 str         r2, [r3, #0x94]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  00114	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00118	e12fff1e	 bx          lr
  0011c		 |$LN10@UpdateRndi|

; 643  :         case 6  : m_pUsbRegs->GENRNDISSZ7  = rndisSize; break;

  0011c	e5943010	 ldr         r3, [r4, #0x10]
  00120	e5832098	 str         r2, [r3, #0x98]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  00124	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00128	e12fff1e	 bx          lr
  0012c		 |$LN9@UpdateRndi|

; 644  :         case 7  : m_pUsbRegs->GENRNDISSZ8  = rndisSize; break;

  0012c	e5943010	 ldr         r3, [r4, #0x10]
  00130	e583209c	 str         r2, [r3, #0x9C]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  00134	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00138	e12fff1e	 bx          lr
  0013c		 |$LN8@UpdateRndi|

; 645  :         case 8  : m_pUsbRegs->GENRNDISSZ9  = rndisSize; break;

  0013c	e5943010	 ldr         r3, [r4, #0x10]
  00140	e58320a0	 str         r2, [r3, #0xA0]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  00144	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00148	e12fff1e	 bx          lr
  0014c		 |$LN7@UpdateRndi|

; 646  :         case 9  : m_pUsbRegs->GENRNDISSZ10 = rndisSize; break;

  0014c	e5943010	 ldr         r3, [r4, #0x10]
  00150	e58320a4	 str         r2, [r3, #0xA4]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  00154	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00158	e12fff1e	 bx          lr
  0015c		 |$LN6@UpdateRndi|

; 647  :         case 10 : m_pUsbRegs->GENRNDISSZ11 = rndisSize; break;

  0015c	e5943010	 ldr         r3, [r4, #0x10]
  00160	e58320a8	 str         r2, [r3, #0xA8]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  00164	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00168	e12fff1e	 bx          lr
  0016c		 |$LN5@UpdateRndi|

; 648  :         case 11 : m_pUsbRegs->GENRNDISSZ12 = rndisSize; break;

  0016c	e5943010	 ldr         r3, [r4, #0x10]
  00170	e58320ac	 str         r2, [r3, #0xAC]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  00174	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00178	e12fff1e	 bx          lr
  0017c		 |$LN4@UpdateRndi|

; 649  :         case 12 : m_pUsbRegs->GENRNDISSZ13 = rndisSize; break;

  0017c	e5943010	 ldr         r3, [r4, #0x10]
  00180	e58320b0	 str         r2, [r3, #0xB0]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  00184	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00188	e12fff1e	 bx          lr
  0018c		 |$LN3@UpdateRndi|

; 650  :         case 13 : m_pUsbRegs->GENRNDISSZ14 = rndisSize; break;

  0018c	e5943010	 ldr         r3, [r4, #0x10]
  00190	e58320b4	 str         r2, [r3, #0xB4]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  00194	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00198	e12fff1e	 bx          lr
  0019c		 |$LN2@UpdateRndi|

; 651  :         case 14 : m_pUsbRegs->GENRNDISSZ15 = rndisSize; break;

  0019c	e5943010	 ldr         r3, [r4, #0x10]
  001a0	e58320b8	 str         r2, [r3, #0xB8]

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  001a4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  001a8	e12fff1e	 bx          lr
  001ac		 |$LN1@UpdateRndi|

; 652  :         default:
; 653  :             ERRORMSG(TRUE,
; 654  :                 (L" CCppiDmaChannel::UpdateRndisMode: ERROR - Invalid channel number %u!\r\n",
; 655  :                 m_chNum));

  001ac	e59f1028	 ldr         r1, [pc, #0x28]
  001b0	e59f0020	 ldr         r0, [pc, #0x20]
  001b4	e3a03c02	 mov         r3, #2, 24
  001b8	e383208f	 orr         r2, r3, #0x8F
  001bc	eb000000	 bl          NKDbgPrintfW
  001c0	e5d4103c	 ldrb        r1, [r4, #0x3C]
  001c4	e59f0008	 ldr         r0, [pc, #8]
  001c8	eb000000	 bl          NKDbgPrintfW
  001cc		 |$LN29@UpdateRndi|

; 656  :             break;
; 657  :         }
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 661  :         (L"-CCppiDmaChannel::UpdateRndisMode: Ch %u MODE RegVal 0x%08x\n",
; 662  :         m_chNum,
; 663  :         *pRndisReg));
; 664  : }

  001cc	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  001d0	e12fff1e	 bx          lr
  001d4		 |$LN50@UpdateRndi|
  001d4		 |$LN51@UpdateRndi|
  001d4	00000000	 DCD         |??_C@_1JA@BDDMFJN@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAR?$AAn?$AAd?$AAi?$AAs?$AAM?$AAo?$AAd@|
  001d8		 |$LN52@UpdateRndi|
  001d8	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  001dc		 |$LN53@UpdateRndi|
  001dc	00000000	 DCD         |??_C@_1JO@GFKEKIMG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  001e0		 |$M40536|

			 ENDP  ; |?UpdateRndisMode@CCppiDmaChannel@@IAAXH@Z|, CCppiDmaChannel::UpdateRndisMode

	EXPORT	|?KickCompletionCallback@CCppiDmaChannel@@IAAXXZ| ; CCppiDmaChannel::KickCompletionCallback
	IMPORT	|USBCDMA_KickCompletionCallback|

  00000			 AREA	 |.pdata|, PDATA
|$T40551| DCD	|$LN5@KickComple|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?KickCompletionCallback@CCppiDmaChannel@@IAAXXZ| PROC ; CCppiDmaChannel::KickCompletionCallback

; 667  : {

  00000		 |$LN5@KickComple|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40548|

; 668  :     USBCDMA_KickCompletionCallback(m_pController->m_hUsbCdma);

  00004	e590300c	 ldr         r3, [r0, #0xC]
  00008	e5930020	 ldr         r0, [r3, #0x20]
  0000c	eb000000	 bl          USBCDMA_KickCompletionCallback

; 669  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M40549|

			 ENDP  ; |?KickCompletionCallback@CCppiDmaChannel@@IAAXXZ|, CCppiDmaChannel::KickCompletionCallback

	EXPORT	|??0CCppiDmaRxChannel@@QAA@PAVCCppiDmaController@@EP6AXPAVCCppiDmaChannel@@IIIIPAX2@Z@Z| ; CCppiDmaRxChannel::CCppiDmaRxChannel
	EXPORT	|??_7CCppiDmaRxChannel@@6B@| [ DATA ]	; CCppiDmaRxChannel::`vftable'
	EXPORT	|?IssueTransfer@CCppiDmaRxChannel@@UAAHEEEGPAXIIIPAIPAK2I00@Z| ; CCppiDmaRxChannel::IssueTransfer
	EXPORT	|?CancelTransfer@CCppiDmaRxChannel@@UAAHXZ| ; CCppiDmaRxChannel::CancelTransfer
	EXPORT	|?ValidateTransferState@CCppiDmaRxChannel@@UAAHXZ| ; CCppiDmaRxChannel::ValidateTransferState
	EXPORT	|?ProcessCompletedPacket@CCppiDmaRxChannel@@UAAXPAU_HOST_DESCRIPTOR@@@Z| ; CCppiDmaRxChannel::ProcessCompletedPacket
	IMPORT	|USBCDMA_ConfigureScheduleRx|
	IMPORT	|??_ECCppiDmaRxChannel@@UAAPAXI@Z|, WEAK |??_GCCppiDmaRxChannel@@UAAPAXI@Z| ; CCppiDmaRxChannel::`vector deleting destructor', CCppiDmaRxChannel::`scalar deleting destructor'

  00000			 AREA	 |.pdata|, PDATA
|$T40564| DCD	|$LN5@CCppiDmaRx|
	DCD	0x40001901

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CCppiDmaRxChannel@@6B@| DCD |??_ECCppiDmaRxChannel@@UAAPAXI@Z| ; CCppiDmaRxChannel::`vftable'
	DCD	|?IssueTransfer@CCppiDmaRxChannel@@UAAHEEEGPAXIIIPAIPAK2I00@Z|
	DCD	|?CancelTransfer@CCppiDmaRxChannel@@UAAHXZ|
	DCD	|?ValidateTransferState@CCppiDmaRxChannel@@UAAHXZ|
	DCD	|?ProcessCompletedPacket@CCppiDmaRxChannel@@UAAXPAU_HOST_DESCRIPTOR@@@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CCppiDmaRxChannel@@QAA@PAVCCppiDmaController@@EP6AXPAVCCppiDmaChannel@@IIIIPAX2@Z@Z| PROC ; CCppiDmaRxChannel::CCppiDmaRxChannel

; 711  : {

  00000		 |$LN5@CCppiDmaRx|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40561|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??0CCppiDmaChannel@@QAA@PAVCCppiDmaController@@EP6AXPAV0@IIIIPAX2@Z@Z|
  00010	e59f3048	 ldr         r3, [pc, #0x48]

; 712  :     DEBUGMSG(ZONE_INIT || CPPI_DBG_CHANNEL,
; 713  :         (L"+CCppiDmaRxChannel\r\n"));
; 714  : 
; 715  :     m_fIsOut = FALSE;
; 716  :     m_qNum = pController->m_nRxQueueOffset + m_chNum;
; 717  : 
; 718  :     // Disable EP interrupt
; 719  :     m_pUsbRegs->EP_INTMSKCLRR = (1 << (m_epNum + USB_OTG_RXINT_SHIFT));

  00014	e5d5203d	 ldrb        r2, [r5, #0x3D]
  00018	e3a01000	 mov         r1, #0
  0001c	e5853000	 str         r3, [r5]
  00020	e5d5303c	 ldrb        r3, [r5, #0x3C]
  00024	e5851034	 str         r1, [r5, #0x34]
  00028	e5d41029	 ldrb        r1, [r4, #0x29]
  0002c	e595e010	 ldr         lr, [r5, #0x10]
  00030	e2822010	 add         r2, r2, #0x10
  00034	e3a00001	 mov         r0, #1
  00038	e0813003	 add         r3, r1, r3
  0003c	e1a02210	 mov         r2, r0, lsl r2
  00040	e5c5303e	 strb        r3, [r5, #0x3E]
  00044	e58e2034	 str         r2, [lr, #0x34]

; 720  : 
; 721  :     // Enable Rx for this channel in the DMA scheduler
; 722  :     USBCDMA_ConfigureScheduleRx(m_chNum, TRUE);

  00048	e5d5003c	 ldrb        r0, [r5, #0x3C]
  0004c	e3a01001	 mov         r1, #1
  00050	eb000000	 bl          USBCDMA_ConfigureScheduleRx

; 723  : 
; 724  :     DEBUGMSG(ZONE_INIT || CPPI_DBG_CHANNEL,
; 725  :         (L"-CCppiDmaRxChannel\r\n"));
; 726  : }

  00054	e1a00005	 mov         r0, r5
  00058	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN6@CCppiDmaRx|
  00060		 |$LN7@CCppiDmaRx|
  00060	00000000	 DCD         |??_7CCppiDmaRxChannel@@6B@|
  00064		 |$M40562|

			 ENDP  ; |??0CCppiDmaRxChannel@@QAA@PAVCCppiDmaController@@EP6AXPAVCCppiDmaChannel@@IIIIPAX2@Z@Z|, CCppiDmaRxChannel::CCppiDmaRxChannel

	EXPORT	|??1CCppiDmaRxChannel@@UAA@XZ|		; CCppiDmaRxChannel::~CCppiDmaRxChannel

  00000			 AREA	 |.pdata|, PDATA
|$T40574| DCD	|$LN5@CCppiDmaRx@2|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CCppiDmaRxChannel@@UAA@XZ| PROC	; CCppiDmaRxChannel::~CCppiDmaRxChannel

; 730  : {

  00000		 |$LN5@CCppiDmaRx@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40571|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3058	 ldr         r3, [pc, #0x58]

; 731  :     DEBUGMSG(ZONE_INIT || CPPI_DBG_CHANNEL,
; 732  :         (L"+~CCppiDmaRxChannel: %s Ch %u, EP %u\r\n",
; 733  :         IsOut() ? L"OUT" : L"IN",
; 734  :         m_chNum,
; 735  :         m_epNum));
; 736  : 
; 737  :     // Disable Rx for this channel in the DMA scheduler
; 738  :     USBCDMA_ConfigureScheduleRx(m_chNum, FALSE);

  0000c	e5d4003c	 ldrb        r0, [r4, #0x3C]
  00010	e3a01000	 mov         r1, #0
  00014	e5843000	 str         r3, [r4]
  00018	eb000000	 bl          USBCDMA_ConfigureScheduleRx

; 739  : 
; 740  :     // Flush FIFO and clear status bits
; 741  :     m_pUsbEpcsrRegs->RXCSR = 
; 742  :         MGC_M_RXCSR_FLUSHFIFO |
; 743  :         MGC_M_RXCSR_H_RXSTALL |
; 744  :         MGC_M_RXCSR_H_ERROR |
; 745  :         MGC_M_RXCSR_DATAERROR |
; 746  :         MGC_M_RXCSR_RXPKTRDY;

  0001c	e5943014	 ldr         r3, [r4, #0x14]
  00020	e3a0205d	 mov         r2, #0x5D

; 747  : 
; 748  :     // Clear EP interrupt
; 749  :     m_pUsbRegs->EP_INTCLRR = 1 << (m_epNum + USB_OTG_RXINT_SHIFT);

  00024	e3a01001	 mov         r1, #1
  00028	e1c320b6	 strh        r2, [r3, #6]
  0002c	e5d4303d	 ldrb        r3, [r4, #0x3D]
  00030	e5942010	 ldr         r2, [r4, #0x10]

; 750  : 
; 751  :     // Restore EP interrupt
; 752  :     m_pUsbRegs->EP_INTMSKSETR = 1 << (m_epNum + USB_OTG_RXINT_SHIFT);

  00034	e3a0e001	 mov         lr, #1
  00038	e2833010	 add         r3, r3, #0x10
  0003c	e1a03311	 mov         r3, r1, lsl r3

; 753  : 
; 754  :     DEBUGMSG(ZONE_INIT || CPPI_DBG_CHANNEL,
; 755  :         (L"+~CCppiDmaRxChannel\r\n"));
; 756  : }

  00040	e1a00004	 mov         r0, r4
  00044	e5823028	 str         r3, [r2, #0x28]
  00048	e5d4303d	 ldrb        r3, [r4, #0x3D]
  0004c	e5942010	 ldr         r2, [r4, #0x10]
  00050	e2833010	 add         r3, r3, #0x10
  00054	e1a0331e	 mov         r3, lr, lsl r3
  00058	e5823030	 str         r3, [r2, #0x30]
  0005c	eb000000	 bl          |??1CCppiDmaChannel@@UAA@XZ|
  00060	e8bd4010	 ldmia       sp!, {r4, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$LN6@CCppiDmaRx@2|
  00068		 |$LN7@CCppiDmaRx@2|
  00068	00000000	 DCD         |??_7CCppiDmaRxChannel@@6B@|
  0006c		 |$M40572|

			 ENDP  ; |??1CCppiDmaRxChannel@@UAA@XZ|, CCppiDmaRxChannel::~CCppiDmaRxChannel

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T40597| DCD	|$LN17@ValidateTr|
	DCD	0x40001c01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ValidateTransferState@CCppiDmaRxChannel@@UAAHXZ| PROC ; CCppiDmaRxChannel::ValidateTransferState

; 1139 : {

  00000		 |$LN17@ValidateTr|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40594|

; 1140 :     BOOL fStateOK = TRUE;
; 1141 : 
; 1142 :     if (IsInUse())

  00004	e5903074	 ldr         r3, [r0, #0x74]
  00008	e3a02001	 mov         r2, #1
  0000c	e3530000	 cmp         r3, #0
  00010	9a000013	 bls         |$LN1@ValidateTr|

; 1143 :     {
; 1144 :         // Check for errors
; 1145 :         UINT16 nCsr = m_pUsbEpcsrRegs->RXCSR;

  00014	e5901014	 ldr         r1, [r0, #0x14]
  00018	e1d1e0b6	 ldrh        lr, [r1, #6]

; 1146 :         if (nCsr & (MGC_M_RXCSR_H_RXSTALL | MGC_M_RXCSR_H_ERROR | MGC_M_RXCSR_DATAERROR))

  0001c	e31e004c	 tst         lr, #0x4C
  00020	0a00000a	 beq         |$LN5@ValidateTr|
  00024	e3a03a02	 mov         r3, #2, 20

; 1147 :         {
; 1148 :             DEBUGMSG(CPPI_DBG_ERROR,
; 1149 :                 (L" CCppiDmaRxChannel:: ERROR - Ch %u, EP %u, CSR 0x%08x\r\n",
; 1150 :                 m_chNum,
; 1151 :                 m_epNum,
; 1152 :                 nCsr));
; 1153 : 
; 1154 :             // Simply disable receiver, flush RX FIFO and leave status bits set
; 1155 :             m_pUsbEpcsrRegs->RXCSR =
; 1156 :                 MGC_M_RXCSR_DMAENAB |
; 1157 :                 MGC_M_RXCSR_FLUSHFIFO |
; 1158 :                 MGC_M_RXCSR_H_RXSTALL |
; 1159 :                 MGC_M_RXCSR_H_ERROR |
; 1160 :                 MGC_M_RXCSR_DATAERROR |
; 1161 :                 MGC_M_RXCSR_RXPKTRDY;

  00028	e383305d	 orr         r3, r3, #0x5D

; 1162 : 
; 1163 :             if (nCsr & MGC_M_RXCSR_H_RXSTALL)

  0002c	e31e0040	 tst         lr, #0x40
  00030	e1c130b6	 strh        r3, [r1, #6]

; 1164 :             {
; 1165 :                 m_nCancelStatus = USB_STALL_ERROR;

  00034	13a03004	 movne       r3, #4

; 1166 :             }
; 1167 :             else
; 1168 :             {
; 1169 :                 m_nCancelStatus = USB_DEVICE_NOT_RESPONDING_ERROR;

  00038	03a03005	 moveq       r3, #5
  0003c	e580305c	 str         r3, [r0, #0x5C]

; 1170 :             }
; 1171 : 
; 1172 :             // Need to perform a cancel (teardown) to clear out all HDs.  This is picked up
; 1173 :             // from the processing thread in CCppiDmaController::ValidateTransferState().
; 1174 :             m_fIsCancelPending = TRUE;

  00040	e3a03001	 mov         r3, #1
  00044	e5803058	 str         r3, [r0, #0x58]

; 1175 :             fStateOK = FALSE;

  00048	e3a02000	 mov         r2, #0
  0004c	ea000004	 b           |$LN1@ValidateTr|
  00050		 |$LN5@ValidateTr|

; 1176 :         }
; 1177 :         else if ((nCsr & MGC_M_RXCSR_DMAENAB) != MGC_M_RXCSR_DMAENAB)

  00050	e20e3a02	 and         r3, lr, #2, 20
  00054	e3530a02	 cmp         r3, #2, 20
  00058	13a03a02	 movne       r3, #2, 20

; 1178 :         {
; 1179 :             DEBUGMSG(ZONE_WARNING,
; 1180 :                 (L" CCppiDmaRxChannel::ValidateTransferState: WARNING - RX DMA reset, EP %u, CSR 0x%08x\r\n",
; 1181 :                 m_epNum, nCsr));
; 1182 :             m_pUsbEpcsrRegs->RXCSR =
; 1183 :                 MGC_M_RXCSR_DMAENAB |
; 1184 :                 MGC_M_RXCSR_H_RXSTALL |
; 1185 :                 MGC_M_RXCSR_H_ERROR |
; 1186 :                 MGC_M_RXCSR_DATAERROR |
; 1187 :                 MGC_M_RXCSR_RXPKTRDY;

  0005c	1383304d	 orrne       r3, r3, #0x4D
  00060	11c130b6	 strneh      r3, [r1, #6]
  00064		 |$LN1@ValidateTr|

; 1188 :         }
; 1189 :     }
; 1190 : 
; 1191 :     return fStateOK;
; 1192 : }

  00064	e1a00002	 mov         r0, r2
  00068	e49de004	 ldr         lr, [sp], #4
  0006c	e12fff1e	 bx          lr
  00070		 |$M40595|

			 ENDP  ; |?ValidateTransferState@CCppiDmaRxChannel@@UAAHXZ|, CCppiDmaRxChannel::ValidateTransferState

	EXPORT	|??1CCppiDmaTxChannel@@UAA@XZ|		; CCppiDmaTxChannel::~CCppiDmaTxChannel
	EXPORT	|??_7CCppiDmaTxChannel@@6B@| [ DATA ]	; CCppiDmaTxChannel::`vftable'
	EXPORT	|?IssueTransfer@CCppiDmaTxChannel@@UAAHEEEGPAXIIIPAIPAK2I00@Z| ; CCppiDmaTxChannel::IssueTransfer
	EXPORT	|?CancelTransfer@CCppiDmaTxChannel@@UAAHXZ| ; CCppiDmaTxChannel::CancelTransfer
	EXPORT	|?ValidateTransferState@CCppiDmaTxChannel@@UAAHXZ| ; CCppiDmaTxChannel::ValidateTransferState
	EXPORT	|?ProcessCompletedPacket@CCppiDmaTxChannel@@UAAXPAU_HOST_DESCRIPTOR@@@Z| ; CCppiDmaTxChannel::ProcessCompletedPacket
	IMPORT	|CloseHandle|
	IMPORT	|TerminateThread|
	IMPORT	|WaitForSingleObject|
	IMPORT	|??_ECCppiDmaTxChannel@@UAAPAXI@Z|, WEAK |??_GCCppiDmaTxChannel@@UAAPAXI@Z| ; CCppiDmaTxChannel::`vector deleting destructor', CCppiDmaTxChannel::`scalar deleting destructor'
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T40609| DCD	|$LN8@CCppiDmaTx|
	DCD	0x40002a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CCppiDmaTxChannel@@6B@| DCD |??_ECCppiDmaTxChannel@@UAAPAXI@Z| ; CCppiDmaTxChannel::`vftable'
	DCD	|?IssueTransfer@CCppiDmaTxChannel@@UAAHEEEGPAXIIIPAIPAK2I00@Z|
	DCD	|?CancelTransfer@CCppiDmaTxChannel@@UAAHXZ|
	DCD	|?ValidateTransferState@CCppiDmaTxChannel@@UAAHXZ|
	DCD	|?ProcessCompletedPacket@CCppiDmaTxChannel@@UAAXPAU_HOST_DESCRIPTOR@@@Z|
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CCppiDmaTxChannel@@UAA@XZ| PROC	; CCppiDmaTxChannel::~CCppiDmaTxChannel

; 1452 : {

  00000		 |$LN8@CCppiDmaTx|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40606|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3094	 ldr         r3, [pc, #0x94]

; 1453 :     DEBUGMSG(ZONE_INIT || CPPI_DBG_CHANNEL,
; 1454 :         (L"+~CCppiDmaTxChannel: %s Ch %u, EP %u\r\n",
; 1455 :         IsOut() ? L"OUT" : L"IN",
; 1456 :         m_chNum,
; 1457 :         m_epNum));
; 1458 : 
; 1459 :     m_fDrainThreadClosing = TRUE;
; 1460 :     SetEvent(m_hDrainEvent);

  0000c	e59400bc	 ldr         r0, [r4, #0xBC]
  00010	e3a02001	 mov         r2, #1
  00014	e3a01003	 mov         r1, #3
  00018	e5843000	 str         r3, [r4]
  0001c	e58420b8	 str         r2, [r4, #0xB8]
  00020	eb000000	 bl          EventModify

; 1461 :     if (WaitForSingleObject(m_hDrainThread, 5000) != WAIT_OBJECT_0 ) {

  00024	e59400c0	 ldr         r0, [r4, #0xC0]
  00028	e3a03c13	 mov         r3, #0x13, 24
  0002c	e3831088	 orr         r1, r3, #0x88
  00030	eb000000	 bl          WaitForSingleObject
  00034	e3500000	 cmp         r0, #0

; 1462 :         DEBUGCHK(0);
; 1463 : #pragma warning(push)
; 1464 : #pragma warning(disable: 6258)
; 1465 :         TerminateThread(m_hDrainThread, (DWORD)-1);

  00038	159400c0	 ldrne       r0, [r4, #0xC0]
  0003c	13e01000	 mvnne       r1, #0
  00040	1b000000	 blne        TerminateThread

; 1466 : #pragma warning(pop)
; 1467 :     }
; 1468 :     CloseHandle(m_hDrainThread);

  00044	e59400c0	 ldr         r0, [r4, #0xC0]
  00048	eb000000	 bl          CloseHandle

; 1469 :     m_hDrainThread = NULL;
; 1470 :     CloseHandle(m_hDrainEvent);

  0004c	e59400bc	 ldr         r0, [r4, #0xBC]
  00050	e3a05000	 mov         r5, #0
  00054	e58450c0	 str         r5, [r4, #0xC0]
  00058	eb000000	 bl          CloseHandle

; 1471 :     m_hDrainEvent = NULL;
; 1472 : 
; 1473 :     // Flush FIFO and clear status bits
; 1474 :     m_pUsbEpcsrRegs->TXCSR =
; 1475 :         MGC_M_TXCSR_FLUSHFIFO |
; 1476 :         MGC_M_TXCSR_H_NAKTIMEOUT |
; 1477 :         MGC_M_TXCSR_H_RXSTALL |
; 1478 :         MGC_M_TXCSR_H_ERROR |
; 1479 :         MGC_M_TXCSR_FIFONOTEMPTY;

  0005c	e5943014	 ldr         r3, [r4, #0x14]
  00060	e3a020ae	 mov         r2, #0xAE
  00064	e58450bc	 str         r5, [r4, #0xBC]
  00068	e1c320b2	 strh        r2, [r3, #2]

; 1480 : 
; 1481 :     // Clear EP interrupt
; 1482 :     m_pUsbRegs->EP_INTCLRR = (1 << (m_epNum + USB_OTG_TXINT_SHIFT));

  0006c	e5d4303d	 ldrb        r3, [r4, #0x3D]
  00070	e5942010	 ldr         r2, [r4, #0x10]
  00074	e3a01001	 mov         r1, #1
  00078	e1a03311	 mov         r3, r1, lsl r3

; 1483 : 
; 1484 :     // Restore EP interrupt
; 1485 :     m_pUsbRegs->EP_INTMSKSETR = (1 << (m_epNum + USB_OTG_TXINT_SHIFT));

  0007c	e3a01001	 mov         r1, #1
  00080	e5823028	 str         r3, [r2, #0x28]
  00084	e5d4303d	 ldrb        r3, [r4, #0x3D]
  00088	e5942010	 ldr         r2, [r4, #0x10]

; 1486 : 
; 1487 :     DEBUGMSG(ZONE_INIT || CPPI_DBG_CHANNEL,
; 1488 :         (L"+~CCppiDmaTxChannel\r\n"));
; 1489 : }

  0008c	e1a00004	 mov         r0, r4
  00090	e1a03311	 mov         r3, r1, lsl r3
  00094	e5823030	 str         r3, [r2, #0x30]
  00098	eb000000	 bl          |??1CCppiDmaChannel@@UAA@XZ|
  0009c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN9@CCppiDmaTx|
  000a4		 |$LN10@CCppiDmaTx|
  000a4	00000000	 DCD         |??_7CCppiDmaTxChannel@@6B@|
  000a8		 |$M40607|

			 ENDP  ; |??1CCppiDmaTxChannel@@UAA@XZ|, CCppiDmaTxChannel::~CCppiDmaTxChannel

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T40632| DCD	|$LN17@ValidateTr@2|
	DCD	0x40001c01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ValidateTransferState@CCppiDmaTxChannel@@UAAHXZ| PROC ; CCppiDmaTxChannel::ValidateTransferState

; 1843 : {

  00000		 |$LN17@ValidateTr@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40629|

; 1844 :     BOOL fStateOK = TRUE;
; 1845 : 
; 1846 :     if (IsInUse())

  00004	e5903074	 ldr         r3, [r0, #0x74]
  00008	e3a02001	 mov         r2, #1
  0000c	e3530000	 cmp         r3, #0
  00010	9a000013	 bls         |$LN1@ValidateTr@2|

; 1847 :     {
; 1848 :         // Check for errors
; 1849 :         UINT16 nCsr = m_pUsbEpcsrRegs->TXCSR;

  00014	e5901014	 ldr         r1, [r0, #0x14]
  00018	e1d1e0b2	 ldrh        lr, [r1, #2]

; 1850 :         if (nCsr & (MGC_M_TXCSR_H_NAKTIMEOUT | MGC_M_TXCSR_H_RXSTALL | MGC_M_TXCSR_H_ERROR))

  0001c	e31e00a4	 tst         lr, #0xA4
  00020	0a00000a	 beq         |$LN5@ValidateTr@2|
  00024	e3a03a03	 mov         r3, #3, 20

; 1851 :         {
; 1852 :             DEBUGMSG(CPPI_DBG_ERROR,
; 1853 :                 (L" CCppiDmaTxChannel:: ERROR - Ch %u, EP %u, CSR 0x%08x\r\n",
; 1854 :                 m_chNum,
; 1855 :                 m_epNum,
; 1856 :                 nCsr));
; 1857 : 
; 1858 :             // Flush FIFO and leave status bits set
; 1859 :             m_pUsbEpcsrRegs->TXCSR =
; 1860 :                 MGC_M_TXCSR_MODE |
; 1861 :                 MGC_M_TXCSR_DMAENAB |
; 1862 :                 MGC_M_TXCSR_FLUSHFIFO |
; 1863 :                 MGC_M_TXCSR_H_NAKTIMEOUT |
; 1864 :                 MGC_M_TXCSR_H_RXSTALL |
; 1865 :                 MGC_M_TXCSR_H_ERROR |
; 1866 :                 MGC_M_TXCSR_FIFONOTEMPTY;

  00028	e38330ae	 orr         r3, r3, #0xAE

; 1867 : 
; 1868 :             if (nCsr & MGC_M_TXCSR_H_RXSTALL)

  0002c	e31e0020	 tst         lr, #0x20
  00030	e1c130b2	 strh        r3, [r1, #2]

; 1869 :             {
; 1870 :                 m_nCancelStatus = USB_STALL_ERROR;

  00034	13a03004	 movne       r3, #4

; 1871 :             }
; 1872 :             else
; 1873 :             {
; 1874 :                 m_nCancelStatus = USB_DEVICE_NOT_RESPONDING_ERROR;

  00038	03a03005	 moveq       r3, #5
  0003c	e580305c	 str         r3, [r0, #0x5C]

; 1875 :             }
; 1876 : 
; 1877 :             // Need to perform a cancel (teardown) to clear out all HDs.  This is picked up
; 1878 :             // from the processing thread in CCppiDmaController::ValidateTransferState().
; 1879 :             m_fIsCancelPending = TRUE;

  00040	e3a03001	 mov         r3, #1
  00044	e5803058	 str         r3, [r0, #0x58]

; 1880 :             fStateOK = FALSE;

  00048	e3a02000	 mov         r2, #0
  0004c	ea000004	 b           |$LN1@ValidateTr@2|
  00050		 |$LN5@ValidateTr@2|

; 1881 :         }
; 1882 :         else if ((nCsr & (MGC_M_TXCSR_MODE | MGC_M_TXCSR_DMAENAB)) != (MGC_M_TXCSR_MODE | MGC_M_TXCSR_DMAENAB))

  00050	e20e3a03	 and         r3, lr, #3, 20
  00054	e3530a03	 cmp         r3, #3, 20
  00058	13a03a03	 movne       r3, #3, 20

; 1883 :         {
; 1884 :             DEBUGMSG(ZONE_WARNING,
; 1885 :                 (L" CCppiDmaTxChannel::ValidateTransferState: WARNING - TX MODE/DMA reset, EP %u, CSR 0x%08x\r\n",
; 1886 :                 m_epNum, nCsr));
; 1887 :             m_pUsbEpcsrRegs->TXCSR =
; 1888 :                 MGC_M_TXCSR_MODE |
; 1889 :                 MGC_M_TXCSR_DMAENAB |
; 1890 :                 MGC_M_TXCSR_H_NAKTIMEOUT |
; 1891 :                 MGC_M_TXCSR_H_RXSTALL |
; 1892 :                 MGC_M_TXCSR_H_ERROR |
; 1893 :                 MGC_M_TXCSR_FIFONOTEMPTY;

  0005c	138330a6	 orrne       r3, r3, #0xA6
  00060	11c130b2	 strneh      r3, [r1, #2]
  00064		 |$LN1@ValidateTr@2|

; 1894 :         }
; 1895 :     }
; 1896 : 
; 1897 :     return fStateOK;
; 1898 : }

  00064	e1a00002	 mov         r0, r2
  00068	e49de004	 ldr         lr, [sp], #4
  0006c	e12fff1e	 bx          lr
  00070		 |$M40630|

			 ENDP  ; |?ValidateTransferState@CCppiDmaTxChannel@@UAAHXZ|, CCppiDmaTxChannel::ValidateTransferState

	EXPORT	|?OnTransferComplete@CCppiDmaTxChannel@@QAAXXZ| ; CCppiDmaTxChannel::OnTransferComplete

  00000			 AREA	 |.pdata|, PDATA
|$T40645| DCD	|$LN10@OnTransfer|
	DCD	0x40002b02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OnTransferComplete@CCppiDmaTxChannel@@QAAXXZ| PROC ; CCppiDmaTxChannel::OnTransferComplete

; 2044 : {

  00000		 |$LN10@OnTransfer|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M40642|
  00008	e1a04000	 mov         r4, r0

; 2045 :     UINT32 nCsr;
; 2046 : 
; 2047 :     DEBUGMSG(CPPI_DBG_TX || ZONE_VERBOSE,
; 2048 :         (L"+CCppiDmaTxChannel::OnTransferComplete: %s Ch %u (EP %u)\r\n",
; 2049 :         m_fIsOut ? L"OUT" : L"IN",
; 2050 :         m_chNum,
; 2051 :         m_epNum));
; 2052 : 
; 2053 :     // Need to check for errors (e.g. stalls) AFTER packet written 
; 2054 :     // out to bus.  Transfer will be cancelled on error.
; 2055 :     if (!ValidateTransferState())

  0000c	e5943000	 ldr         r3, [r4]
  00010	e593300c	 ldr         r3, [r3, #0xC]
  00014	e1a0e00f	 mov         lr, pc
  00018	e12fff13	 bx          r3
  0001c	e3500000	 cmp         r0, #0
  00020	0a00001e	 beq         |$_done$39610|

; 2056 :         goto _done;
; 2057 : 
; 2058 :     nCsr = m_pUsbEpcsrRegs->TXCSR;
; 2059 : 
; 2060 :     // Ensure TX MODE and DMAENAB remain set (they are sometimes reset)
; 2061 :     m_pUsbRegs->TXCSR =
; 2062 :         MGC_M_TXCSR_MODE |
; 2063 :         MGC_M_TXCSR_DMAENAB |
; 2064 :         MGC_M_TXCSR_H_NAKTIMEOUT |
; 2065 :         MGC_M_TXCSR_H_RXSTALL |
; 2066 :         MGC_M_TXCSR_H_ERROR |
; 2067 :         MGC_M_TXCSR_FIFONOTEMPTY;

  00024	e5943010	 ldr         r3, [r4, #0x10]
  00028	e5941014	 ldr         r1, [r4, #0x14]
  0002c	e3a00a03	 mov         r0, #3, 20
  00030	e2832b01	 add         r2, r3, #1, 22
  00034	e1d110b2	 ldrh        r1, [r1, #2]
  00038	e38030a6	 orr         r3, r0, #0xA6
  0003c	e1c231b2	 strh        r3, [r2, #0x12]

; 2068 : 
; 2069 :     // Save information for the callback below, before cleaning-up
; 2070 :     UINT32 nTransferLength = m_nTransferLength;
; 2071 :     UINT32 nTransferComplete = m_nTransferComplete;
; 2072 : 
; 2073 :     // Cleanup *before* the callback (to prevent IssueTransfer calls while m_nTransferLength and
; 2074 :     // m_nTransferFrames are still non-zero)
; 2075 :     m_pvTransferBuffer = NULL;
; 2076 :     m_paTransferBuffer = 0;
; 2077 :     m_nTransferLength = 0;
; 2078 :     m_nTransferFrames = 0;
; 2079 :     m_nSegmentPending = 0;
; 2080 :     m_nSegmentFramesPending = 0;
; 2081 : 
; 2082 :     // Let the client know the transfer has been completed
; 2083 :     if (m_pCallback)

  00040	e5943040	 ldr         r3, [r4, #0x40]
  00044	e5942088	 ldr         r2, [r4, #0x88]
  00048	e3a00000	 mov         r0, #0
  0004c	e1b06003	 movs        r6, r3
  00050	e5943098	 ldr         r3, [r4, #0x98]
  00054	e584006c	 str         r0, [r4, #0x6C]
  00058	e5840070	 str         r0, [r4, #0x70]
  0005c	e5840088	 str         r0, [r4, #0x88]
  00060	e5840074	 str         r0, [r4, #0x74]
  00064	e58400a0	 str         r0, [r4, #0xA0]
  00068	e58400a4	 str         r0, [r4, #0xA4]
  0006c	0a00000b	 beq         |$_done$39610|

; 2084 :     {
; 2085 :         m_pCallback(
; 2086 :             this,
; 2087 :             m_nStatus,
; 2088 :             nTransferLength,
; 2089 :             nTransferComplete,
; 2090 :             (nCsr & MGC_M_TXCSR_H_DATATOGGLE) ? USB_TOGGLE_CARRY : 0,
; 2091 :             m_pTransferCookie1,
; 2092 :             m_pTransferCookie2);

  00070	e5940094	 ldr         r0, [r4, #0x94]
  00074	e594e090	 ldr         lr, [r4, #0x90]
  00078	e3110c01	 tst         r1, #1, 24
  0007c	13a05102	 movne       r5, #2, 2
  00080	03a05000	 moveq       r5, #0
  00084	e59410c4	 ldr         r1, [r4, #0xC4]
  00088	e58d0008	 str         r0, [sp, #8]
  0008c	e1a00004	 mov         r0, r4
  00090	e58d5000	 str         r5, [sp]
  00094	e58de004	 str         lr, [sp, #4]
  00098	e1a0e00f	 mov         lr, pc
  0009c	e12fff16	 bx          r6
  000a0		 |$_done$39610|

; 2093 :     }
; 2094 : 
; 2095 : _done:
; 2096 :     DEBUGMSG(CPPI_DBG_TX || ZONE_VERBOSE,
; 2097 :         (L"-CCppiDmaTxChannel::OnTransferComplete\r\n"));
; 2098 : }

  000a0	e28dd00c	 add         sp, sp, #0xC
  000a4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$M40643|

			 ENDP  ; |?OnTransferComplete@CCppiDmaTxChannel@@QAAXXZ|, CCppiDmaTxChannel::OnTransferComplete

	EXPORT	|?IsFifoEmpty@CCppiDmaTxChannel@@QBAHXZ| ; CCppiDmaTxChannel::IsFifoEmpty

  00000			 AREA	 |.pdata|, PDATA
|$T40657| DCD	|$LN7@IsFifoEmpt|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsFifoEmpty@CCppiDmaTxChannel@@QBAHXZ| PROC ; CCppiDmaTxChannel::IsFifoEmpty

; 2101 : {

  00000		 |$LN7@IsFifoEmpt|
  00000		 |$M40654|

; 2102 :     return ((m_pUsbEpcsrRegs->TXCSR & MGC_M_TXCSR_TXPKTRDY) == 0);

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e1d330b2	 ldrh        r3, [r3, #2]
  00008	e3130001	 tst         r3, #1
  0000c	03a00001	 moveq       r0, #1
  00010	13a00000	 movne       r0, #0

; 2103 : }

  00014	e12fff1e	 bx          lr
  00018		 |$M40655|

			 ENDP  ; |?IsFifoEmpty@CCppiDmaTxChannel@@QBAHXZ|, CCppiDmaTxChannel::IsFifoEmpty

	EXPORT	|?KickDrainThread@CCppiDmaTxChannel@@QAAXXZ| ; CCppiDmaTxChannel::KickDrainThread
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T40669| DCD	|$LN7@KickDrainT|
	DCD	0x40000601
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?KickDrainThread@CCppiDmaTxChannel@@QAAXXZ| PROC ; CCppiDmaTxChannel::KickDrainThread

; 2106 : {

  00000		 |$LN7@KickDrainT|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40666|

; 2107 :     SetEvent(m_hDrainEvent);

  00004	e59000bc	 ldr         r0, [r0, #0xBC]
  00008	e3a01003	 mov         r1, #3
  0000c	eb000000	 bl          EventModify

; 2108 : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M40667|

			 ENDP  ; |?KickDrainThread@CCppiDmaTxChannel@@QAAXXZ|, CCppiDmaTxChannel::KickDrainThread

	EXPORT	|?DrainThread@CCppiDmaTxChannel@@QAAKXZ| ; CCppiDmaTxChannel::DrainThread
	IMPORT	|Sleep|

  00000			 AREA	 |.pdata|, PDATA
|$T40696| DCD	|$LN24@DrainThrea|
	DCD	0x40001c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DrainThread@CCppiDmaTxChannel@@QAAKXZ| PROC ; CCppiDmaTxChannel::DrainThread

; 2111 : {

  00000		 |$LN24@DrainThrea|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40693|
  00004	e1a04000	 mov         r4, r0

; 2112 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 2113 :         (L"+CCppiDmaTxChannel::DrainThread\n"));
; 2114 : 
; 2115 :     while (!m_fDrainThreadClosing)

  00008	ea000012	 b           |$LN19@DrainThrea|
  0000c		 |$LL5@DrainThrea|

; 2116 :     {
; 2117 :         DEBUGMSG(ZONE_PDD_DMA && ZONE_VERBOSE,
; 2118 :             (L" CCppiDmaTxChannel::DrainThread: Waiting...\r\n"));
; 2119 : 
; 2120 :         WaitForSingleObject(m_hDrainEvent, INFINITE);

  0000c	e59400bc	 ldr         r0, [r4, #0xBC]
  00010	e3e01000	 mvn         r1, #0
  00014	eb000000	 bl          WaitForSingleObject

; 2121 : 
; 2122 :         DEBUGMSG(ZONE_PDD_DMA && ZONE_VERBOSE,
; 2123 :             (L" CCppiDmaTxChannel::DrainThread: Released\r\n"));
; 2124 : 
; 2125 :         while ((!m_fDrainThreadClosing) && (!IsFifoEmpty()))

  00018	ea000005	 b           |$LN21@DrainThrea|
  0001c		 |$LL3@DrainThrea|
  0001c	e5943014	 ldr         r3, [r4, #0x14]
  00020	e1d330b2	 ldrh        r3, [r3, #2]
  00024	e3130001	 tst         r3, #1
  00028	0a000005	 beq         |$LN16@DrainThrea|

; 2126 :             Sleep(1);

  0002c	e3a00001	 mov         r0, #1
  00030	eb000000	 bl          Sleep
  00034		 |$LN21@DrainThrea|
  00034	e59430b8	 ldr         r3, [r4, #0xB8]
  00038	e3530000	 cmp         r3, #0
  0003c	0afffff6	 beq         |$LL3@DrainThrea|

; 2121 : 
; 2122 :         DEBUGMSG(ZONE_PDD_DMA && ZONE_VERBOSE,
; 2123 :             (L" CCppiDmaTxChannel::DrainThread: Released\r\n"));
; 2124 : 
; 2125 :         while ((!m_fDrainThreadClosing) && (!IsFifoEmpty()))

  00040	ea000007	 b           |$LN17@DrainThrea|
  00044		 |$LN16@DrainThrea|

; 2127 : 
; 2128 :         if (!m_fDrainThreadClosing)

  00044	e59430b8	 ldr         r3, [r4, #0xB8]
  00048	e3530000	 cmp         r3, #0
  0004c	1a000004	 bne         |$LN17@DrainThrea|

; 2129 :             OnTransferComplete();

  00050	e1a00004	 mov         r0, r4
  00054	eb000000	 bl          |?OnTransferComplete@CCppiDmaTxChannel@@QAAXXZ|
  00058		 |$LN19@DrainThrea|
  00058	e59430b8	 ldr         r3, [r4, #0xB8]
  0005c	e3530000	 cmp         r3, #0
  00060	0affffe9	 beq         |$LL5@DrainThrea|
  00064		 |$LN17@DrainThrea|

; 2130 :     }
; 2131 : 
; 2132 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 2133 :         (L"-CCppiDmaTxChannel::DrainThread\n"));
; 2134 : 
; 2135 :     return 0;

  00064	e3a00000	 mov         r0, #0

; 2136 : }

  00068	e8bd4010	 ldmia       sp!, {r4, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$M40694|

			 ENDP  ; |?DrainThread@CCppiDmaTxChannel@@QAAKXZ|, CCppiDmaTxChannel::DrainThread

	EXPORT	|?DrainThreadStub@CCppiDmaTxChannel@@SAKPAX@Z| ; CCppiDmaTxChannel::DrainThreadStub

  00000			 AREA	 |.pdata|, PDATA
|$T40706| DCD	|$LN5@DrainThrea@2|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DrainThreadStub@CCppiDmaTxChannel@@SAKPAX@Z| PROC ; CCppiDmaTxChannel::DrainThreadStub

; 2139 : {

  00000		 |$LN5@DrainThrea@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40703|

; 2140 :     return ((CCppiDmaTxChannel*)lpParameter)->DrainThread();

  00004	eb000000	 bl          |?DrainThread@CCppiDmaTxChannel@@QAAKXZ|

; 2141 : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M40704|

			 ENDP  ; |?DrainThreadStub@CCppiDmaTxChannel@@SAKPAX@Z|, CCppiDmaTxChannel::DrainThreadStub

	EXPORT	|??0CCppiDmaController@@QAA@K@Z|	; CCppiDmaController::CCppiDmaController
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T40718| DCD	|$LN5@CCppiDmaCo|
	DCD	0x40002001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CCppiDmaController@@QAA@K@Z| PROC	; CCppiDmaController::CCppiDmaController

; 2150 : {

  00000		 |$LN5@CCppiDmaCo|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40715|
  00004	e1a04000	 mov         r4, r0

; 2151 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE, (L"+CCppiDmaController::CCppiDmaController\r\n"));
; 2152 : 
; 2153 :     InitializeCriticalSection(&m_csLock);

  00008	e5841024	 str         r1, [r4, #0x24]
  0000c	eb000000	 bl          InitializeCriticalSection

; 2154 :     m_paUsbRegs = 0;
; 2155 :     m_pUsbRegs = NULL;
; 2156 :     m_pCppiRegs = NULL;
; 2157 :     m_hUsbCdma = NULL;
; 2158 : 
; 2159 :     m_nCppiChannelOffset = 0;
; 2160 :     m_nRxQueueOffset = USB_CPPI_RX_QNUM;
; 2161 :     m_nTxQueueOffset = USB_CPPI_TX_QNUM;

  00010	e3a03020	 mov         r3, #0x20
  00014	e3a05000	 mov         r5, #0

; 2162 : 
; 2163 :     memset(m_pTxChannels, 0, sizeof(m_pTxChannels));

  00018	e3a02078	 mov         r2, #0x78
  0001c	e3a01000	 mov         r1, #0
  00020	e284002c	 add         r0, r4, #0x2C
  00024	e5c4302a	 strb        r3, [r4, #0x2A]
  00028	e5845014	 str         r5, [r4, #0x14]
  0002c	e5845018	 str         r5, [r4, #0x18]
  00030	e584501c	 str         r5, [r4, #0x1C]
  00034	e5845020	 str         r5, [r4, #0x20]
  00038	e5c45028	 strb        r5, [r4, #0x28]
  0003c	e5c45029	 strb        r5, [r4, #0x29]
  00040	eb000000	 bl          memset

; 2164 :     memset(m_pRxChannels, 0, sizeof(m_pRxChannels));

  00044	e3a02078	 mov         r2, #0x78
  00048	e3a01000	 mov         r1, #0
  0004c	e28400a4	 add         r0, r4, #0xA4
  00050	eb000000	 bl          memset

; 2165 : 
; 2166 :     m_pvPool = NULL;
; 2167 :     m_paPool.QuadPart = 0;
; 2168 :     m_cbPoolSize = 0;
; 2169 :     InitializeCriticalSection(&m_csPoolLock);

  00054	e2840f4b	 add         r0, r4, #0x4B, 30
  00058	e584511c	 str         r5, [r4, #0x11C]
  0005c	e5845120	 str         r5, [r4, #0x120]
  00060	e5845124	 str         r5, [r4, #0x124]
  00064	e5845128	 str         r5, [r4, #0x128]
  00068	eb000000	 bl          InitializeCriticalSection

; 2170 : 
; 2171 :     m_pvHdPool = NULL;

  0006c	e5845140	 str         r5, [r4, #0x140]

; 2172 :     m_pvHdPoolHead = NULL;

  00070	e5845144	 str         r5, [r4, #0x144]

; 2173 : 
; 2174 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE, (L"-CCppiDmaController::CCppiDmaController\r\n"));
; 2175 : }

  00074	e1a00004	 mov         r0, r4
  00078	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$M40716|

			 ENDP  ; |??0CCppiDmaController@@QAA@K@Z|, CCppiDmaController::CCppiDmaController

	EXPORT	|??1CCppiDmaController@@QAA@XZ|		; CCppiDmaController::~CCppiDmaController

  00000			 AREA	 |.pdata|, PDATA
|$T40726| DCD	|$LN5@CCppiDmaCo@2|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CCppiDmaController@@QAA@XZ| PROC	; CCppiDmaController::~CCppiDmaController

; 2179 : {

  00000		 |$LN5@CCppiDmaCo@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40723|
  00004	e1a04000	 mov         r4, r0

; 2180 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE, (L"+~CCppiDmaController::CCppiDmaController\r\n"));
; 2181 : 
; 2182 :     DEBUGCHK(m_paUsbRegs == 0);
; 2183 :     DEBUGCHK(m_pvPool == 0);
; 2184 :     DEBUGCHK(m_pvHdPoolHead == 0);
; 2185 : 
; 2186 :     DeleteCriticalSection(&m_csPoolLock);

  00008	e2840f4b	 add         r0, r4, #0x4B, 30
  0000c	eb000000	 bl          DeleteCriticalSection

; 2187 :     DeleteCriticalSection(&m_csLock);

  00010	e1a00004	 mov         r0, r4
  00014	eb000000	 bl          DeleteCriticalSection

; 2188 : 
; 2189 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE, (L"-~CCppiDmaController::CCppiDmaController\r\n"));
; 2190 : }

  00018	e8bd4010	 ldmia       sp!, {r4, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M40724|

			 ENDP  ; |??1CCppiDmaController@@QAA@XZ|, CCppiDmaController::~CCppiDmaController

	EXPORT	|?ReleaseChannel@CCppiDmaController@@QAAXPAVCCppiDmaChannel@@@Z| ; CCppiDmaController::ReleaseChannel
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T40762| DCD	|$LN25@ReleaseCha|
	DCD	0x40002601
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ReleaseChannel@CCppiDmaController@@QAAXPAVCCppiDmaChannel@@@Z| PROC ; CCppiDmaController::ReleaseChannel

; 2379 : {

  00000		 |$LN25@ReleaseCha|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M40759|
  00004	e1b06001	 movs        r6, r1
  00008	e1a05000	 mov         r5, r0

; 2380 :     UINT8 chNum;
; 2381 :     BOOL isOut;
; 2382 : 
; 2383 :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 2384 :         (L"+CCppiDmaController::ReleaseChannel\r\n"));
; 2385 : 
; 2386 :     DEBUGCHK(pChannel != NULL);
; 2387 :     if(pChannel != NULL)

  0000c	0a00001f	 beq         |$LN21@ReleaseCha|

; 2388 :     {
; 2389 :         // Go safe
; 2390 :         Lock();

  00010	eb000000	 bl          EnterCriticalSection

; 2391 : 
; 2392 :         DEBUGCHK(pChannel->GetRefCount());
; 2393 :         DEBUGCHK(m_paUsbRegs != 0);
; 2394 : 
; 2395 :         chNum = pChannel->ChannelNumber();
; 2396 :         isOut = pChannel->IsOut();
; 2397 : 
; 2398 :         // Some extra debug checks
; 2399 :         DEBUGCHK(chNum < USB_CPPI_MAX_CHANNELS);
; 2400 : 
; 2401 :         // Cancel pending operation if any
; 2402 :         pChannel->CancelTransfer();

  00014	e5963000	 ldr         r3, [r6]
  00018	e5d6403c	 ldrb        r4, [r6, #0x3C]
  0001c	e5967034	 ldr         r7, [r6, #0x34]
  00020	e5933008	 ldr         r3, [r3, #8]
  00024	e1a00006	 mov         r0, r6
  00028	e1a0e00f	 mov         lr, pc
  0002c	e12fff13	 bx          r3

; 2403 : 
; 2404 :         // Release channel ref
; 2405 :         pChannel->Release();

  00030	e5963008	 ldr         r3, [r6, #8]
  00034	e2533001	 subs        r3, r3, #1
  00038	e5863008	 str         r3, [r6, #8]

; 2406 : 
; 2407 :         if (!pChannel->GetRefCount())

  0003c	1a000011	 bne         |$LN9@ReleaseCha|

; 2408 :         {
; 2409 :             if (isOut)

  00040	e3570000	 cmp         r7, #0
  00044	0a000005	 beq         |$LN4@ReleaseCha|

; 2410 :             {
; 2411 :                 if(chNum < USB_CPPI_MAX_CHANNELS)

  00048	e354001e	 cmp         r4, #0x1E
  0004c	2a000007	 bcs         |$LN1@ReleaseCha|

; 2412 :                 {
; 2413 :                     DEBUGCHK(pChannel == m_pTxChannels[chNum]);
; 2414 :                     m_pTxChannels[chNum] = NULL;

  00050	e0853104	 add         r3, r5, r4, lsl #2
  00054	e3a02000	 mov         r2, #0
  00058	e583202c	 str         r2, [r3, #0x2C]

; 2415 :                 }
; 2416 :             }
; 2417 :             else

  0005c	ea000003	 b           |$LN1@ReleaseCha|
  00060		 |$LN4@ReleaseCha|

; 2418 :             {
; 2419 :                 if(chNum < USB_CPPI_MAX_CHANNELS)

  00060	e354001e	 cmp         r4, #0x1E

; 2420 :                 {
; 2421 :                     DEBUGCHK(pChannel == m_pRxChannels[chNum]);
; 2422 :                     m_pRxChannels[chNum] = NULL;

  00064	30853104	 addcc       r3, r5, r4, lsl #2
  00068	33a02000	 movcc       r2, #0
  0006c	358320a4	 strcc       r2, [r3, #0xA4]
  00070		 |$LN1@ReleaseCha|

; 2423 :                 }
; 2424 :             }
; 2425 : 
; 2426 :             // Delete the channel object
; 2427 :             delete pChannel;

  00070	e5963000	 ldr         r3, [r6]
  00074	e3a01001	 mov         r1, #1
  00078	e1a00006	 mov         r0, r6
  0007c	e5933000	 ldr         r3, [r3]
  00080	e1a0e00f	 mov         lr, pc
  00084	e12fff13	 bx          r3
  00088		 |$LN9@ReleaseCha|

; 2428 :         }
; 2429 : 
; 2430 :         // Go unsafe
; 2431 :         Unlock();

  00088	e1a00005	 mov         r0, r5
  0008c	eb000000	 bl          LeaveCriticalSection
  00090		 |$LN21@ReleaseCha|

; 2432 :     }
; 2433 : 
; 2434 :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 2435 :         (L"-CCppiDmaController::ReleaseChannel\r\n"));
; 2436 : }

  00090	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$M40760|

			 ENDP  ; |?ReleaseChannel@CCppiDmaController@@QAAXPAVCCppiDmaChannel@@@Z|, CCppiDmaController::ReleaseChannel

	EXPORT	|?ValidateTransferState@CCppiDmaController@@IAAHXZ| ; CCppiDmaController::ValidateTransferState
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T40783| DCD	|$LN20@ValidateTr@3|
	DCD	0x40003201
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ValidateTransferState@CCppiDmaController@@IAAHXZ| PROC ; CCppiDmaController::ValidateTransferState

; 2486 : {

  00000		 |$LN20@ValidateTr@3|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M40780|
  00004	e1a04000	 mov         r4, r0

; 2487 :     BOOL fStateOK = TRUE;

  00008	e3a05001	 mov         r5, #1
  0000c	e3a0601e	 mov         r6, #0x1E
  00010		 |$LL9@ValidateTr@3|

; 2488 : 
; 2489 :     for (unsigned i = 0; i < USB_CPPI_MAX_CHANNELS; i ++)
; 2490 :     {
; 2491 :         if (m_pRxChannels[i])

  00010	e59430a4	 ldr         r3, [r4, #0xA4]
  00014	e3530000	 cmp         r3, #0
  00018	0a000010	 beq         |$LN5@ValidateTr@3|

; 2492 :         {
; 2493 :             if (!m_pRxChannels[i]->ValidateTransferState() ||
; 2494 :                 m_pRxChannels[i]->IsCancelPending())

  0001c	e1a00003	 mov         r0, r3
  00020	e5903000	 ldr         r3, [r0]
  00024	e593300c	 ldr         r3, [r3, #0xC]
  00028	e1a0e00f	 mov         lr, pc
  0002c	e12fff13	 bx          r3
  00030	e3500000	 cmp         r0, #0
  00034	0a000003	 beq         |$LN4@ValidateTr@3|
  00038	e59430a4	 ldr         r3, [r4, #0xA4]
  0003c	e5933058	 ldr         r3, [r3, #0x58]
  00040	e3530000	 cmp         r3, #0
  00044	0a000005	 beq         |$LN5@ValidateTr@3|
  00048		 |$LN4@ValidateTr@3|

; 2495 :             {
; 2496 :                 m_pRxChannels[i]->CancelTransfer();

  00048	e59400a4	 ldr         r0, [r4, #0xA4]
  0004c	e5903000	 ldr         r3, [r0]
  00050	e5933008	 ldr         r3, [r3, #8]
  00054	e1a0e00f	 mov         lr, pc
  00058	e12fff13	 bx          r3

; 2497 :                 fStateOK = FALSE;

  0005c	e3a05000	 mov         r5, #0
  00060		 |$LN5@ValidateTr@3|

; 2498 :             }
; 2499 :         }
; 2500 : 
; 2501 :         if (m_pTxChannels[i])

  00060	e594302c	 ldr         r3, [r4, #0x2C]
  00064	e3530000	 cmp         r3, #0
  00068	0a000010	 beq         |$LN8@ValidateTr@3|

; 2502 :         {
; 2503 :             if (!m_pTxChannels[i]->ValidateTransferState() ||
; 2504 :                 m_pTxChannels[i]->IsCancelPending())

  0006c	e1a00003	 mov         r0, r3
  00070	e5903000	 ldr         r3, [r0]
  00074	e593300c	 ldr         r3, [r3, #0xC]
  00078	e1a0e00f	 mov         lr, pc
  0007c	e12fff13	 bx          r3
  00080	e3500000	 cmp         r0, #0
  00084	0a000003	 beq         |$LN1@ValidateTr@3|
  00088	e594302c	 ldr         r3, [r4, #0x2C]
  0008c	e5933058	 ldr         r3, [r3, #0x58]
  00090	e3530000	 cmp         r3, #0
  00094	0a000005	 beq         |$LN8@ValidateTr@3|
  00098		 |$LN1@ValidateTr@3|

; 2505 :             {
; 2506 :                 m_pTxChannels[i]->CancelTransfer();

  00098	e594002c	 ldr         r0, [r4, #0x2C]
  0009c	e5903000	 ldr         r3, [r0]
  000a0	e5933008	 ldr         r3, [r3, #8]
  000a4	e1a0e00f	 mov         lr, pc
  000a8	e12fff13	 bx          r3

; 2507 :                 fStateOK = FALSE;

  000ac	e3a05000	 mov         r5, #0
  000b0		 |$LN8@ValidateTr@3|
  000b0	e2844004	 add         r4, r4, #4
  000b4	e2566001	 subs        r6, r6, #1
  000b8	1affffd4	 bne         |$LL9@ValidateTr@3|

; 2508 :             }
; 2509 :         }
; 2510 :     }
; 2511 : 
; 2512 :     return fStateOK;
; 2513 : }

  000bc	e1a00005	 mov         r0, r5
  000c0	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000c4	e12fff1e	 bx          lr
  000c8		 |$M40781|

			 ENDP  ; |?ValidateTransferState@CCppiDmaController@@IAAHXZ|, CCppiDmaController::ValidateTransferState

	EXPORT	|?PoolDeinit@CCppiDmaController@@IAAXXZ| ; CCppiDmaController::PoolDeinit
	IMPORT	|USBCDMA_DeregisterUsbModule|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T40797| DCD	|$LN10@PoolDeinit|
	DCD	0x40001501
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PoolDeinit@CCppiDmaController@@IAAXXZ| PROC ; CCppiDmaController::PoolDeinit

; 2675 : {

  00000		 |$LN10@PoolDeinit|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40794|
  00004	e1a04000	 mov         r4, r0

; 2676 :     // Only deinitialise once
; 2677 :     if (m_pvPool == NULL)

  00008	e594311c	 ldr         r3, [r4, #0x11C]
  0000c	e3530000	 cmp         r3, #0
  00010	0a00000d	 beq         |$LN6@PoolDeinit|

; 2678 :         return;
; 2679 : 
; 2680 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 2681 :         (L"+CCppiDmaController::PoolDeinit\r\n"));
; 2682 : 
; 2683 :     PoolLock();

  00014	e2840f4b	 add         r0, r4, #0x4B, 30
  00018	eb000000	 bl          EnterCriticalSection

; 2684 : 
; 2685 :     m_pvHdPool = NULL;
; 2686 :     m_pvHdPoolHead = NULL;
; 2687 : 
; 2688 :     USBCDMA_DeregisterUsbModule(m_hUsbCdma);

  0001c	e5940020	 ldr         r0, [r4, #0x20]
  00020	e3a05000	 mov         r5, #0
  00024	e5845140	 str         r5, [r4, #0x140]
  00028	e5845144	 str         r5, [r4, #0x144]
  0002c	eb000000	 bl          USBCDMA_DeregisterUsbModule

; 2689 :     m_hUsbCdma = NULL;
; 2690 : 
; 2691 :     m_cbPoolSize = 0;
; 2692 :     m_paPool.QuadPart = 0;
; 2693 :     m_pvPool = NULL;
; 2694 : 
; 2695 :     PoolUnlock();

  00030	e2840f4b	 add         r0, r4, #0x4B, 30
  00034	e5845020	 str         r5, [r4, #0x20]
  00038	e5845128	 str         r5, [r4, #0x128]
  0003c	e5845120	 str         r5, [r4, #0x120]
  00040	e5845124	 str         r5, [r4, #0x124]
  00044	e584511c	 str         r5, [r4, #0x11C]
  00048	eb000000	 bl          LeaveCriticalSection
  0004c		 |$LN6@PoolDeinit|

; 2696 : 
; 2697 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 2698 :         (L"-CCppiDmaController::PoolDeinit\r\n"));
; 2699 : }

  0004c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M40795|

			 ENDP  ; |?PoolDeinit@CCppiDmaController@@IAAXXZ|, CCppiDmaController::PoolDeinit

	EXPORT	|?HdAlloc@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@XZ| ; CCppiDmaController::HdAlloc
	EXPORT	|??_C@_1JA@LOOKCNP@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAH?$AAd?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAE?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1NC@IOKLCPNE@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAH?$AAd?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAF?$AAA@| [ DATA ] ; `string'
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T40818| DCD	|$LN16@HdAlloc|
	DCD	0x40002701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@LOOKCNP@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAH?$AAd?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAE?$AAR@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, ":", 0x0, "H", 0x0, "d", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "M", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "g", 0x0, "n", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "d", 0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r", 0x0, "i"
	DCB	0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1NC@IOKLCPNE@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAH?$AAd?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAF?$AAA@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, ":", 0x0, "H", 0x0, "d", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "A", 0x0, "I", 0x0, "L", 0x0, "E", 0x0, "D", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, " "
	DCB	0x0, "o", 0x0, "f", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "s"
	DCB	0x0, "c", 0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o"
	DCB	0x0, "r", 0x0, "s", 0x0, " ", 0x0, "(", 0x0, "i", 0x0, "n"
	DCB	0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, " ", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r"
	DCB	0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "C"
	DCB	0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r"
	DCB	0x0, "y", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, ")", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HdAlloc@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@XZ| PROC ; CCppiDmaController::HdAlloc

; 2749 : {

  00000		 |$LN16@HdAlloc|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40815|
  00004	e1a05000	 mov         r5, r0

; 2750 :     HOST_DESCRIPTOR* pHd;
; 2751 : 
; 2752 :     PoolLock();

  00008	e2850f4b	 add         r0, r5, #0x4B, 30
  0000c	eb000000	 bl          EnterCriticalSection

; 2753 :     pHd = m_pvHdPoolHead;

  00010	e5953144	 ldr         r3, [r5, #0x144]

; 2754 :     if (pHd) {
; 2755 :         m_pvHdPoolHead = pHd->next;
; 2756 :         pHd->NextPtr = NULL;
; 2757 :     }
; 2758 :     PoolUnlock();

  00014	e2850f4b	 add         r0, r5, #0x4B, 30
  00018	e1b04003	 movs        r4, r3
  0001c	15943028	 ldrne       r3, [r4, #0x28]
  00020	13a02000	 movne       r2, #0
  00024	15853144	 strne       r3, [r5, #0x144]
  00028	15842014	 strne       r2, [r4, #0x14]
  0002c	eb000000	 bl          LeaveCriticalSection

; 2759 : 
; 2760 :     if (pHd == NULL) {

  00030	e3540000	 cmp         r4, #0
  00034	1a000007	 bne         |$LN2@HdAlloc|

; 2761 :         ERRORMSG(1,
; 2762 :             (L" CCppiDmaController::HdAlloc: FAILED - Out of descriptors (increase DescriptorCount registry setting)!\r\n"));

  00038	e59f1054	 ldr         r1, [pc, #0x54]
  0003c	e59f004c	 ldr         r0, [pc, #0x4C]
  00040	e3a03c0a	 mov         r3, #0xA, 24
  00044	e38320ca	 orr         r2, r3, #0xCA
  00048	eb000000	 bl          NKDbgPrintfW
  0004c	e59f0044	 ldr         r0, [pc, #0x44]
  00050	eb000000	 bl          NKDbgPrintfW

; 2763 :     }
; 2764 :     else {

  00054	ea000009	 b           |$LN8@HdAlloc|
  00058		 |$LN2@HdAlloc|

; 2765 :         ERRORMSG(((UINT32)pHd & (CPPI_HD_ALIGN - 1)),
; 2766 :             (L" CCppiDmaController::HdAlloc: ERROR - Misaligned descriptor - 0x%08x!\r\n",
; 2767 :             pHd));

  00058	e314003f	 tst         r4, #0x3F
  0005c	0a000007	 beq         |$LN8@HdAlloc|
  00060	e59f102c	 ldr         r1, [pc, #0x2C]
  00064	e59f0024	 ldr         r0, [pc, #0x24]
  00068	e3a03c0a	 mov         r3, #0xA, 24
  0006c	e38320cf	 orr         r2, r3, #0xCF
  00070	eb000000	 bl          NKDbgPrintfW
  00074	e59f0010	 ldr         r0, [pc, #0x10]
  00078	e1a01004	 mov         r1, r4
  0007c	eb000000	 bl          NKDbgPrintfW
  00080		 |$LN8@HdAlloc|

; 2768 :     }
; 2769 : 
; 2770 :     return pHd;
; 2771 : }

  00080	e1a00004	 mov         r0, r4
  00084	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN17@HdAlloc|
  0008c		 |$LN18@HdAlloc|
  0008c	00000000	 DCD         |??_C@_1JA@LOOKCNP@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAH?$AAd?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAE?$AAR@|
  00090		 |$LN19@HdAlloc|
  00090	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00094		 |$LN20@HdAlloc|
  00094	00000000	 DCD         |??_C@_1JO@GFKEKIMG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00098		 |$LN21@HdAlloc|
  00098	00000000	 DCD         |??_C@_1NC@IOKLCPNE@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAH?$AAd?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAF?$AAA@|
  0009c		 |$M40816|

			 ENDP  ; |?HdAlloc@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@XZ|, CCppiDmaController::HdAlloc

	EXPORT	|?HdFree@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@PAU2@@Z| ; CCppiDmaController::HdFree
	EXPORT	|??_C@_1HK@DDEFFNKO@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAH?$AAd?$AAF?$AAr?$AAe?$AAe?$AA?3?$AA?5?$AAN?$AAo?$AAt@| [ DATA ] ; `string'
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T40844| DCD	|$LN14@HdFree|
	DCD	0x40001f01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@DDEFFNKO@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAH?$AAd?$AAF?$AAr?$AAe?$AAe?$AA?3?$AA?5?$AAN?$AAo?$AAt@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, ":", 0x0, "H", 0x0, "d", 0x0, "F", 0x0, "r"
	DCB	0x0, "e", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "N", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "a", 0x0, " ", 0x0, "H", 0x0, "o"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "s"
	DCB	0x0, "c", 0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HdFree@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@PAU2@@Z| PROC ; CCppiDmaController::HdFree

; 2774 : {

  00000		 |$LN14@HdFree|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M40841|
  00004	e1b04001	 movs        r4, r1
  00008	e1a05000	 mov         r5, r0

; 2775 :     UINT32 type;
; 2776 : 
; 2777 :     DEBUGCHK(pHd != NULL);
; 2778 :     if (!pHd)
; 2779 :         return pHd;

  0000c	0a000013	 beq         |$LN11@HdFree|

; 2780 : 
; 2781 :     type = (pHd->DescInfo & USB_CPPI41_DESC_TYPE_MASK) >> USB_CPPI41_DESC_TYPE_SHIFT;

  00010	e5943000	 ldr         r3, [r4]
  00014	e1a06da3	 mov         r6, r3, lsr #27

; 2782 :     if (type != USB_CPPI41_DESC_TYPE_HOST) {

  00018	e3560010	 cmp         r6, #0x10
  0001c	0a000008	 beq         |$LN1@HdFree|

; 2783 :         ERRORMSG(1,
; 2784 :             (L" CCppiDmaController::HdFree: Not a Host descriptor type %u\r\n",
; 2785 :             type));

  00020	e59f1050	 ldr         r1, [pc, #0x50]
  00024	e59f0048	 ldr         r0, [pc, #0x48]
  00028	e3a03c0a	 mov         r3, #0xA, 24
  0002c	e38320e1	 orr         r2, r3, #0xE1
  00030	eb000000	 bl          NKDbgPrintfW
  00034	e59f0034	 ldr         r0, [pc, #0x34]
  00038	e1a01006	 mov         r1, r6
  0003c	eb000000	 bl          NKDbgPrintfW

; 2786 :         return pHd;

  00040	ea000007	 b           |$LN3@HdFree|
  00044		 |$LN1@HdFree|

; 2787 :     }
; 2788 : 
; 2789 :     PoolLock();

  00044	e2850f4b	 add         r0, r5, #0x4B, 30
  00048	eb000000	 bl          EnterCriticalSection

; 2790 :     pHd->next = m_pvHdPoolHead;

  0004c	e5953144	 ldr         r3, [r5, #0x144]

; 2791 :     m_pvHdPoolHead = pHd;
; 2792 :     PoolUnlock();

  00050	e2850f4b	 add         r0, r5, #0x4B, 30
  00054	e5843028	 str         r3, [r4, #0x28]
  00058	e5854144	 str         r4, [r5, #0x144]
  0005c	eb000000	 bl          LeaveCriticalSection
  00060		 |$LN11@HdFree|

; 2793 : 
; 2794 :     return NULL;

  00060	e3a04000	 mov         r4, #0
  00064		 |$LN3@HdFree|

; 2795 : }

  00064	e1a00004	 mov         r0, r4
  00068	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$LN15@HdFree|
  00070		 |$LN16@HdFree|
  00070	00000000	 DCD         |??_C@_1HK@DDEFFNKO@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAH?$AAd?$AAF?$AAr?$AAe?$AAe?$AA?3?$AA?5?$AAN?$AAo?$AAt@|
  00074		 |$LN17@HdFree|
  00074	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00078		 |$LN18@HdFree|
  00078	00000000	 DCD         |??_C@_1JO@GFKEKIMG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0007c		 |$M40842|

			 ENDP  ; |?HdFree@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@PAU2@@Z|, CCppiDmaController::HdFree

	EXPORT	|?DescriptorVAtoPA@CCppiDmaController@@IAAIPAX@Z| ; CCppiDmaController::DescriptorVAtoPA
	IMPORT	|USBCDMA_DescriptorVAtoPA|

  00000			 AREA	 |.pdata|, PDATA
|$T40861| DCD	|$LN9@Descriptor|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DescriptorVAtoPA@CCppiDmaController@@IAAIPAX@Z| PROC ; CCppiDmaController::DescriptorVAtoPA

; 2798 : {

  00000		 |$LN9@Descriptor|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40858|
  00004	e3510000	 cmp         r1, #0
  00008	e1a0e000	 mov         lr, r0

; 2799 :     UINT32 pa = 0;

  0000c	e3a00000	 mov         r0, #0

; 2800 : 
; 2801 :     if (va != NULL) {

  00010	0a00000c	 beq         |$LN1@Descriptor|

; 2802 :         UINT32 vaPoolBase  = (UINT32)m_pvPool;

  00014	e59e211c	 ldr         r2, [lr, #0x11C]

; 2803 :         UINT32 vaPoolLimit = (UINT32)m_pvPool + m_cbPoolSize;
; 2804 : 
; 2805 :         if (((UINT32)va < vaPoolBase) || ((UINT32)va > vaPoolLimit))

  00018	e1510002	 cmp         r1, r2
  0001c	3a000007	 bcc         |$LN2@Descriptor|
  00020	e59e3128	 ldr         r3, [lr, #0x128]
  00024	e0833002	 add         r3, r3, r2
  00028	e1510003	 cmp         r1, r3

; 2807 :         else
; 2808 :             pa = m_paPool.LowPart + ((UINT32)va - vaPoolBase);

  0002c	959e3120	 ldrls       r3, [lr, #0x120]
  00030	90433002	 subls       r3, r3, r2
  00034	90830001	 addls       r0, r3, r1

; 2809 :     }
; 2810 : 
; 2811 :     return pa;
; 2812 : }

  00038	949de004	 ldrls       lr, [sp], #4
  0003c	912fff1e	 bxls        lr
  00040		 |$LN2@Descriptor|

; 2806 :             pa = USBCDMA_DescriptorVAtoPA(m_hUsbCdma, va);

  00040	e59e0020	 ldr         r0, [lr, #0x20]
  00044	eb000000	 bl          USBCDMA_DescriptorVAtoPA
  00048		 |$LN1@Descriptor|

; 2809 :     }
; 2810 : 
; 2811 :     return pa;
; 2812 : }

  00048	e49de004	 ldr         lr, [sp], #4
  0004c	e12fff1e	 bx          lr
  00050		 |$M40859|

			 ENDP  ; |?DescriptorVAtoPA@CCppiDmaController@@IAAIPAX@Z|, CCppiDmaController::DescriptorVAtoPA

	EXPORT	|?DescriptorPAtoVA@CCppiDmaController@@IAAPAXI@Z| ; CCppiDmaController::DescriptorPAtoVA
	IMPORT	|USBCDMA_DescriptorPAtoVA|

  00000			 AREA	 |.pdata|, PDATA
|$T40874| DCD	|$LN9@Descriptor@2|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DescriptorPAtoVA@CCppiDmaController@@IAAPAXI@Z| PROC ; CCppiDmaController::DescriptorPAtoVA

; 2815 : {

  00000		 |$LN9@Descriptor@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40871|
  00004	e3510000	 cmp         r1, #0
  00008	e1a0e000	 mov         lr, r0

; 2816 :     void *va = NULL;

  0000c	e3a00000	 mov         r0, #0

; 2817 : 
; 2818 :     if (pa != 0) {

  00010	0a00000c	 beq         |$LN1@Descriptor@2|

; 2819 :         UINT32 paPoolBase  = m_paPool.LowPart;

  00014	e59e2120	 ldr         r2, [lr, #0x120]

; 2820 :         UINT32 paPoolLimit = m_paPool.LowPart + m_cbPoolSize;
; 2821 : 
; 2822 :         if ((pa < paPoolBase) || (pa > paPoolLimit))

  00018	e1510002	 cmp         r1, r2
  0001c	3a000007	 bcc         |$LN2@Descriptor@2|
  00020	e59e3128	 ldr         r3, [lr, #0x128]
  00024	e0833002	 add         r3, r3, r2
  00028	e1510003	 cmp         r1, r3

; 2824 :         else
; 2825 :             va = (void *)(((UINT32)m_pvPool) + (pa - paPoolBase));

  0002c	959e311c	 ldrls       r3, [lr, #0x11C]
  00030	90433002	 subls       r3, r3, r2
  00034	90830001	 addls       r0, r3, r1

; 2826 :     }
; 2827 : 
; 2828 :     return va;
; 2829 : }

  00038	949de004	 ldrls       lr, [sp], #4
  0003c	912fff1e	 bxls        lr
  00040		 |$LN2@Descriptor@2|

; 2823 :             va = USBCDMA_DescriptorPAtoVA(m_hUsbCdma, pa);

  00040	e59e0020	 ldr         r0, [lr, #0x20]
  00044	eb000000	 bl          USBCDMA_DescriptorPAtoVA
  00048		 |$LN1@Descriptor@2|

; 2826 :     }
; 2827 : 
; 2828 :     return va;
; 2829 : }

  00048	e49de004	 ldr         lr, [sp], #4
  0004c	e12fff1e	 bx          lr
  00050		 |$M40872|

			 ENDP  ; |?DescriptorPAtoVA@CCppiDmaController@@IAAPAXI@Z|, CCppiDmaController::DescriptorPAtoVA

	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T40885| DCD	|$LN6@scalar|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCCppiDmaChannel@@UAAPAXI@Z| PROC	; CCppiDmaChannel::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40882|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??1CCppiDmaChannel@@UAA@XZ|
  00010	e3140001	 tst         r4, #1
  00014	11a00005	 movne       r0, r5
  00018	1b000000	 blne        |??3@YAXPAX@Z|
  0001c	e1a00005	 mov         r0, r5
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M40883|

			 ENDP  ; |??_GCCppiDmaChannel@@UAAPAXI@Z|, CCppiDmaChannel::`scalar deleting destructor'


  00000			 AREA	 |.pdata|, PDATA
|$T40896| DCD	|$LN6@scalar@2|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCCppiDmaRxChannel@@UAAPAXI@Z| PROC ; CCppiDmaRxChannel::`scalar deleting destructor'
  00000		 |$LN6@scalar@2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40893|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??1CCppiDmaRxChannel@@UAA@XZ|
  00010	e3140001	 tst         r4, #1
  00014	11a00005	 movne       r0, r5
  00018	1b000000	 blne        |??3@YAXPAX@Z|
  0001c	e1a00005	 mov         r0, r5
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M40894|

			 ENDP  ; |??_GCCppiDmaRxChannel@@UAAPAXI@Z|, CCppiDmaRxChannel::`scalar deleting destructor'

	EXPORT	|??0CCppiDmaTxChannel@@QAA@PAVCCppiDmaController@@EP6AXPAVCCppiDmaChannel@@IIIIPAX2@Z@Z| ; CCppiDmaTxChannel::CCppiDmaTxChannel
	IMPORT	|CeSetThreadPriority|
	IMPORT	|g_IstThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|CreateEventW|

  00000			 AREA	 |.pdata|, PDATA
|$T40909| DCD	|$LN5@CCppiDmaTx@2|
	DCD	0x40002f02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CCppiDmaTxChannel@@QAA@PAVCCppiDmaController@@EP6AXPAVCCppiDmaChannel@@IIIIPAX2@Z@Z| PROC ; CCppiDmaTxChannel::CCppiDmaTxChannel

; 1430 : {

  00000		 |$LN5@CCppiDmaTx@2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M40906|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a05000	 mov         r5, r0
  00010	eb000000	 bl          |??0CCppiDmaChannel@@QAA@PAVCCppiDmaController@@EP6AXPAV0@IIIIPAX2@Z@Z|
  00014	e59f309c	 ldr         r3, [pc, #0x9C]

; 1431 :     DEBUGMSG(ZONE_INIT || CPPI_DBG_CHANNEL,
; 1432 :         (L"+CCppiDmaTxChannel\r\n"));
; 1433 : 
; 1434 :     m_fIsOut = TRUE;

  00018	e3a02001	 mov         r2, #1
  0001c	e5852034	 str         r2, [r5, #0x34]

; 1435 :     m_qNum = pController->m_nTxQueueOffset + (2 * m_chNum);

  00020	e5d5203c	 ldrb        r2, [r5, #0x3C]
  00024	e5853000	 str         r3, [r5]
  00028	e5d4102a	 ldrb        r1, [r4, #0x2A]

; 1436 : 
; 1437 :     m_fDrainThreadClosing = FALSE;

  0002c	e3a04000	 mov         r4, #0

; 1438 :     m_hDrainEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00030	e3a03000	 mov         r3, #0
  00034	e0812082	 add         r2, r1, r2, lsl #1
  00038	e5c5203e	 strb        r2, [r5, #0x3E]
  0003c	e3a02000	 mov         r2, #0
  00040	e3a01000	 mov         r1, #0
  00044	e3a00000	 mov         r0, #0
  00048	e58540b8	 str         r4, [r5, #0xB8]
  0004c	eb000000	 bl          CreateEventW

; 1439 :     m_hDrainThread = CreateThread(NULL, 0, DrainThreadStub, this, 0, NULL);

  00050	e59f205c	 ldr         r2, [pc, #0x5C]
  00054	e1a03000	 mov         r3, r0
  00058	e58530bc	 str         r3, [r5, #0xBC]
  0005c	e1a03005	 mov         r3, r5
  00060	e3a00000	 mov         r0, #0
  00064	e3a01000	 mov         r1, #0
  00068	e58d4004	 str         r4, [sp, #4]
  0006c	e58d4000	 str         r4, [sp]
  00070	eb000000	 bl          CreateThread

; 1440 :     CeSetThreadPriority(m_hDrainThread, g_IstThreadPriority + 1);

  00074	e59f3034	 ldr         r3, [pc, #0x34]
  00078	e58500c0	 str         r0, [r5, #0xC0]
  0007c	e5933000	 ldr         r3, [r3]
  00080	e2831001	 add         r1, r3, #1
  00084	eb000000	 bl          CeSetThreadPriority

; 1441 :     m_nStatus = USB_NO_ERROR;
; 1442 : 
; 1443 :     // Disable EP interrupt
; 1444 :     m_pUsbRegs->EP_INTMSKCLRR = (1 << (m_epNum + USB_OTG_TXINT_SHIFT));

  00088	e5d5303d	 ldrb        r3, [r5, #0x3D]
  0008c	e5952010	 ldr         r2, [r5, #0x10]
  00090	e3a01001	 mov         r1, #1
  00094	e1a03311	 mov         r3, r1, lsl r3
  00098	e58540c4	 str         r4, [r5, #0xC4]
  0009c	e5823034	 str         r3, [r2, #0x34]

; 1445 : 
; 1446 :     DEBUGMSG(ZONE_INIT || CPPI_DBG_CHANNEL,
; 1447 :         (L"-CCppiDmaTxChannel\r\n"));
; 1448 : }

  000a0	e1a00005	 mov         r0, r5
  000a4	e28dd008	 add         sp, sp, #8
  000a8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN6@CCppiDmaTx@2|
  000b0		 |$LN7@CCppiDmaTx@2|
  000b0	00000000	 DCD         |g_IstThreadPriority|
  000b4		 |$LN8@CCppiDmaTx@2|
  000b4	00000000	 DCD         |?DrainThreadStub@CCppiDmaTxChannel@@SAKPAX@Z|
  000b8		 |$LN9@CCppiDmaTx@2|
  000b8	00000000	 DCD         |??_7CCppiDmaTxChannel@@6B@|
  000bc		 |$M40907|

			 ENDP  ; |??0CCppiDmaTxChannel@@QAA@PAVCCppiDmaController@@EP6AXPAVCCppiDmaChannel@@IIIIPAX2@Z@Z|, CCppiDmaTxChannel::CCppiDmaTxChannel


  00000			 AREA	 |.pdata|, PDATA
|$T40924| DCD	|$LN6@scalar@3|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCCppiDmaTxChannel@@UAAPAXI@Z| PROC ; CCppiDmaTxChannel::`scalar deleting destructor'
  00000		 |$LN6@scalar@3|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40921|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??1CCppiDmaTxChannel@@UAA@XZ|
  00010	e3140001	 tst         r4, #1
  00014	11a00005	 movne       r0, r5
  00018	1b000000	 blne        |??3@YAXPAX@Z|
  0001c	e1a00005	 mov         r0, r5
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M40922|

			 ENDP  ; |??_GCCppiDmaTxChannel@@UAAPAXI@Z|, CCppiDmaTxChannel::`scalar deleting destructor'

	EXPORT	|?Deinitialize@CCppiDmaController@@QAAXXZ| ; CCppiDmaController::Deinitialize
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T40952| DCD	|$LN26@Deinitiali|
	DCD	0x40003601
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Deinitialize@CCppiDmaController@@QAAXXZ| PROC ; CCppiDmaController::Deinitialize

; 2244 : {

  00000		 |$LN26@Deinitiali|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M40949|
  00004	e1a04000	 mov         r4, r0

; 2245 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 2246 :         (L"+CCppiDmaController::Deinitialize\r\n"));
; 2247 : 
; 2248 :     Lock();

  00008	eb000000	 bl          EnterCriticalSection

; 2249 : 
; 2250 :     if (m_paUsbRegs)

  0000c	e5943014	 ldr         r3, [r4, #0x14]
  00010	e3530000	 cmp         r3, #0
  00014	0a000029	 beq         |$LN9@Deinitiali|

; 2251 :     {
; 2252 :         UINT32 i;
; 2253 : 
; 2254 :         // Abort any pending OUT transfers and release TX DMA channels
; 2255 :         for (i = 0; i < USB_CPPI_MAX_CHANNELS; i ++)

  00018	e1a05004	 mov         r5, r4
  0001c	e3a0601e	 mov         r6, #0x1E
  00020	e3a07000	 mov         r7, #0
  00024		 |$LL8@Deinitiali|

; 2256 :         {
; 2257 :             if (m_pTxChannels[i])

  00024	e595302c	 ldr         r3, [r5, #0x2C]
  00028	e1b00003	 movs        r0, r3
  0002c	0a00000b	 beq         |$LN7@Deinitiali|

; 2258 :             {
; 2259 :                 DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 2260 :                     (L"CCppiDmaController::Deinitialize: Closing TX channel\r\n", i));
; 2261 :                 m_pTxChannels[i]->CancelTransfer();

  00030	e5903000	 ldr         r3, [r0]
  00034	e5933008	 ldr         r3, [r3, #8]
  00038	e1a0e00f	 mov         lr, pc
  0003c	e12fff13	 bx          r3

; 2262 :                 delete m_pTxChannels[i];

  00040	e595302c	 ldr         r3, [r5, #0x2C]
  00044	e1b00003	 movs        r0, r3
  00048	15903000	 ldrne       r3, [r0]
  0004c	13a01001	 movne       r1, #1
  00050	15933000	 ldrne       r3, [r3]
  00054	11a0e00f	 movne       lr, pc
  00058	112fff13	 bxne        r3

; 2263 :                 m_pTxChannels[i] = NULL;

  0005c	e585702c	 str         r7, [r5, #0x2C]
  00060		 |$LN7@Deinitiali|
  00060	e2855004	 add         r5, r5, #4
  00064	e2566001	 subs        r6, r6, #1
  00068	1affffed	 bne         |$LL8@Deinitiali|

; 2264 :             }
; 2265 :         }
; 2266 : 
; 2267 :         // Abort any pending IN transfers and release RX DMA channels
; 2268 :         for (i = 0; i < USB_CPPI_MAX_CHANNELS; i ++)

  0006c	e1a05004	 mov         r5, r4
  00070	e3a0601e	 mov         r6, #0x1E
  00074		 |$LL4@Deinitiali|

; 2269 :         {
; 2270 :             if (m_pRxChannels[i])

  00074	e59530a4	 ldr         r3, [r5, #0xA4]
  00078	e1b00003	 movs        r0, r3
  0007c	0a00000b	 beq         |$LN3@Deinitiali|

; 2271 :             {
; 2272 :                 DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 2273 :                     (L"CCppiDmaController::Deinitialize: Closing RX channel\r\n", i));
; 2274 :                 m_pRxChannels[i]->CancelTransfer();

  00080	e5903000	 ldr         r3, [r0]
  00084	e5933008	 ldr         r3, [r3, #8]
  00088	e1a0e00f	 mov         lr, pc
  0008c	e12fff13	 bx          r3

; 2275 :                 delete m_pRxChannels[i];

  00090	e59530a4	 ldr         r3, [r5, #0xA4]
  00094	e1b00003	 movs        r0, r3
  00098	15903000	 ldrne       r3, [r0]
  0009c	13a01001	 movne       r1, #1
  000a0	15933000	 ldrne       r3, [r3]
  000a4	11a0e00f	 movne       lr, pc
  000a8	112fff13	 bxne        r3

; 2276 :                 m_pRxChannels[i] = NULL;

  000ac	e58570a4	 str         r7, [r5, #0xA4]
  000b0		 |$LN3@Deinitiali|
  000b0	e2855004	 add         r5, r5, #4
  000b4	e2566001	 subs        r6, r6, #1
  000b8	1affffed	 bne         |$LL4@Deinitiali|

; 2277 :             }
; 2278 :         }
; 2279 : 
; 2280 :         m_paUsbRegs = 0;

  000bc	e5847014	 str         r7, [r4, #0x14]
  000c0		 |$LN9@Deinitiali|

; 2281 :     }
; 2282 : 
; 2283 :     Unlock();

  000c0	e1a00004	 mov         r0, r4
  000c4	eb000000	 bl          LeaveCriticalSection

; 2284 : 
; 2285 :     PoolDeinit();

  000c8	e1a00004	 mov         r0, r4
  000cc	eb000000	 bl          |?PoolDeinit@CCppiDmaController@@IAAXXZ|

; 2286 : 
; 2287 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 2288 :         (L"-CCppiDmaController::Deinitialize\r\n"));
; 2289 : }

  000d0	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000d4	e12fff1e	 bx          lr
  000d8		 |$M40950|

			 ENDP  ; |?Deinitialize@CCppiDmaController@@QAAXXZ|, CCppiDmaController::Deinitialize

	EXPORT	|?AllocChannel@CCppiDmaController@@QAAPAVCCppiDmaChannel@@EEP6AXPAV2@IIIIPAX1@Z@Z| ; CCppiDmaController::AllocChannel
	EXPORT	|??_C@_1HG@OBAJDHJC@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@POFIPIAC@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JA@DCBMPOIF@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe@| [ DATA ] ; `string'
	IMPORT	|??2@YAPAXI@Z|				; operator new
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T40991| DCD	|$LN32@AllocChann|
	DCD	0x40004601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@OBAJDHJC@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, ":", 0x0, "A", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "e", 0x0, "l", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "O", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "f"
	DCB	0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@POFIPIAC@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, ":", 0x0, "A", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "e", 0x0, "l", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@DCBMPOIF@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, ":", 0x0, "A", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "e", 0x0, "l", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, " ", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, " "
	DCB	0x0, "o", 0x0, "f", 0x0, " ", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "g", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, "/"
	DCB	0x0, "%", 0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AllocChannel@CCppiDmaController@@QAAPAVCCppiDmaChannel@@EEP6AXPAV2@IIIIPAX1@Z@Z| PROC ; CCppiDmaController::AllocChannel

; 2296 : {

  00000		 |$LN32@AllocChann|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M40988|
  00004	e1a09003	 mov         r9, r3
  00008	e1a07002	 mov         r7, r2
  0000c	e1a08001	 mov         r8, r1
  00010	e1a05000	 mov         r5, r0

; 2297 :     UINT8 chNum = epNum - 1;

  00014	e288e0ff	 add         lr, r8, #0xFF
  00018	e20e60ff	 and         r6, lr, #0xFF

; 2298 :     CCppiDmaChannel* pChannel = NULL;
; 2299 : 
; 2300 :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 2301 :         (L"+CCppiDmaController::AllocChannel: EP %u/0x%02x\r\n",
; 2302 :         epNum,
; 2303 :         epAddr));
; 2304 : 
; 2305 :     if (chNum >= USB_CPPI_MAX_CHANNELS)

  0001c	e356001e	 cmp         r6, #0x1E
  00020	e3a04000	 mov         r4, #0
  00024	3a000004	 bcc         |$LN10@AllocChann|

; 2306 :     {
; 2307 :         RETAILMSG(CPPI_DBG_ERROR,
; 2308 :             (L" CCppiDmaController::AllocChannel: ERROR - Channel out of range %u/%u\r\n",
; 2309 :             chNum,
; 2310 :             USB_CPPI_MAX_CHANNELS));

  00028	e59f00e4	 ldr         r0, [pc, #0xE4]
  0002c	e3a0201e	 mov         r2, #0x1E
  00030	e1a01006	 mov         r1, r6
  00034	eb000000	 bl          NKDbgPrintfW

; 2311 :         goto _doneUnsafe;

  00038	ea000030	 b           |$_doneUnsafe$39705|
  0003c		 |$LN10@AllocChann|

; 2312 :     }
; 2313 : 
; 2314 :     // Go safe
; 2315 :     Lock();

  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          EnterCriticalSection

; 2316 : 
; 2317 :     if (!m_paUsbRegs)

  00044	e5953014	 ldr         r3, [r5, #0x14]
  00048	e3530000	 cmp         r3, #0

; 2318 :     {
; 2319 :         RETAILMSG(CPPI_DBG_ERROR,
; 2320 :             (L" CCppiDmaController::AllocChannel: ERROR - DMA controller not initialized\r\n"));

  0004c	059f00bc	 ldreq       r0, [pc, #0xBC]
  00050	0a000027	 beq         |$LN29@AllocChann|

; 2321 :         goto _doneSafe;
; 2322 :     }
; 2323 : 
; 2324 :     if (USB_ENDPOINT_DIRECTION_OUT(epAddr))

  00054	e3170080	 tst         r7, #0x80

; 2325 :     {
; 2326 :         // Allocate OUT channel
; 2327 :         if (!m_pTxChannels[chNum])

  00058	e0854106	 add         r4, r5, r6, lsl #2
  0005c	1a00000f	 bne         |$LN6@AllocChann|
  00060	e594302c	 ldr         r3, [r4, #0x2C]
  00064	e3530000	 cmp         r3, #0
  00068	1a00000a	 bne         |$LN5@AllocChann|

; 2328 :         {
; 2329 :             m_pTxChannels[chNum] = new CCppiDmaTxChannel(this, epNum, pCallback);

  0006c	e3a000c8	 mov         r0, #0xC8
  00070	eb000000	 bl          |??2@YAPAXI@Z|
  00074	e3500000	 cmp         r0, #0
  00078	0a000004	 beq         |$LN17@AllocChann|
  0007c	e1a03009	 mov         r3, r9
  00080	e1a02008	 mov         r2, r8
  00084	e1a01005	 mov         r1, r5
  00088	eb000000	 bl          |??0CCppiDmaTxChannel@@QAA@PAVCCppiDmaController@@EP6AXPAVCCppiDmaChannel@@IIIIPAX2@Z@Z|
  0008c	ea000000	 b           |$LN18@AllocChann|
  00090		 |$LN17@AllocChann|
  00090	e3a00000	 mov         r0, #0
  00094		 |$LN18@AllocChann|
  00094	e584002c	 str         r0, [r4, #0x2C]
  00098		 |$LN5@AllocChann|

; 2330 :         }
; 2331 : 
; 2332 :         pChannel = m_pTxChannels[chNum];

  00098	e594402c	 ldr         r4, [r4, #0x2C]

; 2333 :     }
; 2334 :     else

  0009c	ea00000e	 b           |$LN4@AllocChann|
  000a0		 |$LN6@AllocChann|

; 2335 :     {
; 2336 :         // Allocate IN channel
; 2337 :         if (!m_pRxChannels[chNum])

  000a0	e59430a4	 ldr         r3, [r4, #0xA4]
  000a4	e3530000	 cmp         r3, #0
  000a8	1a00000a	 bne         |$LN3@AllocChann|

; 2338 :         {
; 2339 :             m_pRxChannels[chNum] = new CCppiDmaRxChannel(this, epNum, pCallback);

  000ac	e3a000b8	 mov         r0, #0xB8
  000b0	eb000000	 bl          |??2@YAPAXI@Z|
  000b4	e3500000	 cmp         r0, #0
  000b8	0a000004	 beq         |$LN19@AllocChann|
  000bc	e1a03009	 mov         r3, r9
  000c0	e1a02008	 mov         r2, r8
  000c4	e1a01005	 mov         r1, r5
  000c8	eb000000	 bl          |??0CCppiDmaRxChannel@@QAA@PAVCCppiDmaController@@EP6AXPAVCCppiDmaChannel@@IIIIPAX2@Z@Z|
  000cc	ea000000	 b           |$LN20@AllocChann|
  000d0		 |$LN19@AllocChann|
  000d0	e3a00000	 mov         r0, #0
  000d4		 |$LN20@AllocChann|
  000d4	e58400a4	 str         r0, [r4, #0xA4]
  000d8		 |$LN3@AllocChann|

; 2340 :         }
; 2341 : 
; 2342 :         pChannel = m_pRxChannels[chNum];

  000d8	e59440a4	 ldr         r4, [r4, #0xA4]
  000dc		 |$LN4@AllocChann|

; 2343 :     }
; 2344 : 
; 2345 :     if (pChannel)

  000dc	e3540000	 cmp         r4, #0

; 2346 :     {
; 2347 :         pChannel->AddRef();

  000e0	15943008	 ldrne       r3, [r4, #8]
  000e4	12833001	 addne       r3, r3, #1
  000e8	15843008	 strne       r3, [r4, #8]
  000ec	1a000001	 bne         |$_doneSafe$39709|

; 2348 : 
; 2349 :         DEBUGMSG(CPPI_DBG_CHANNEL,
; 2350 :             (L" CCppiDmaController::AllocChannel: AddRef(%u) %s Ch %u (EP %u/0x%02x)\r\n",
; 2351 :             pChannel->GetRefCount(),
; 2352 :             USB_ENDPOINT_DIRECTION_OUT(epAddr) ? L"OUT" : L"IN",
; 2353 :             chNum,
; 2354 :             epNum,
; 2355 :             epAddr));
; 2356 :     }
; 2357 :     else
; 2358 :     {
; 2359 :         RETAILMSG(CPPI_DBG_ERROR,
; 2360 :             (L" CCppiDmaController::AllocChannel: ERROR - Out of memory\r\n"));

  000f0	e59f0014	 ldr         r0, [pc, #0x14]
  000f4		 |$LN29@AllocChann|
  000f4	eb000000	 bl          NKDbgPrintfW
  000f8		 |$_doneSafe$39709|

; 2361 :     }
; 2362 : 
; 2363 : _doneSafe:
; 2364 : 
; 2365 :     // Go unsafe
; 2366 :     Unlock();

  000f8	e1a00005	 mov         r0, r5
  000fc	eb000000	 bl          LeaveCriticalSection
  00100		 |$_doneUnsafe$39705|

; 2367 : 
; 2368 : _doneUnsafe:
; 2369 :     DEBUGMSG(ZONE_PDD_DMA || ZONE_VERBOSE,
; 2370 :         (L"-CCppiDmaController::AllocChannel: EP %u/0x%02x\r\n",
; 2371 :         epNum,
; 2372 :         epAddr));
; 2373 : 
; 2374 :     return pChannel;
; 2375 : }

  00100	e1a00004	 mov         r0, r4
  00104	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00108	e12fff1e	 bx          lr
  0010c		 |$LN33@AllocChann|
  0010c		 |$LN34@AllocChann|
  0010c	00000000	 DCD         |??_C@_1HG@OBAJDHJC@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe@|
  00110		 |$LN35@AllocChann|
  00110	00000000	 DCD         |??_C@_1JI@POFIPIAC@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe@|
  00114		 |$LN36@AllocChann|
  00114	00000000	 DCD         |??_C@_1JA@DCBMPOIF@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe@|
  00118		 |$M40989|

			 ENDP  ; |?AllocChannel@CCppiDmaController@@QAAPAVCCppiDmaChannel@@EEP6AXPAV2@IIIIPAX1@Z@Z|, CCppiDmaController::AllocChannel

	EXPORT	|?QueuePush@CCppiDmaController@@IAAXEPAX@Z| ; CCppiDmaController::QueuePush
	EXPORT	|??_C@_1DK@LONLLCCG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T41011| DCD	|$LN13@QueuePush|
	DCD	0x40002801

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@LONLLCCG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r"
	DCB	0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?QueuePush@CCppiDmaController@@IAAXEPAX@Z| PROC ; CCppiDmaController::QueuePush

; 2439 : {

  00000		 |$LN13@QueuePush|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M41008|
  00004	e1b04002	 movs        r4, r2
  00008	e1a07001	 mov         r7, r1
  0000c	e1a06000	 mov         r6, r0

; 2440 :     UINT32 value = 0;

  00010	e3a0e000	 mov         lr, #0

; 2441 :     UINT32 type = 0;
; 2442 : 
; 2443 :     if (pD != NULL)

  00014	0a000018	 beq         |$LN6@QueuePush|

; 2444 :     {
; 2445 :         UINT32 addr  = DescriptorVAtoPA(pD);

  00018	e1a01004	 mov         r1, r4
  0001c	eb000000	 bl          |?DescriptorVAtoPA@CCppiDmaController@@IAAIPAX@Z|

; 2446 :         UINT32 size  = 0;
; 2447 : 
; 2448 :         type = (*(UINT32*)pD & USB_CPPI41_DESC_TYPE_MASK) >> USB_CPPI41_DESC_TYPE_SHIFT;

  00020	e5943000	 ldr         r3, [r4]
  00024	e1a08000	 mov         r8, r0
  00028	e3a04000	 mov         r4, #0
  0002c	e1a05da3	 mov         r5, r3, lsr #27

; 2449 :         switch (type)

  00030	e3550010	 cmp         r5, #0x10
  00034	0a00000c	 beq         |$LN3@QueuePush|
  00038	e3550013	 cmp         r5, #0x13
  0003c	0a000008	 beq         |$LN2@QueuePush|

; 2458 : 
; 2459 :         default:
; 2460 :             ERRORMSG(TRUE,
; 2461 :                 (L"Invalid descriptor type %u\r\n",
; 2462 :                 type));

  00040	e59f1054	 ldr         r1, [pc, #0x54]
  00044	e59f004c	 ldr         r0, [pc, #0x4C]
  00048	e3a03c09	 mov         r3, #9, 24
  0004c	e383209e	 orr         r2, r3, #0x9E
  00050	eb000000	 bl          NKDbgPrintfW
  00054	e59f0038	 ldr         r0, [pc, #0x38]
  00058	e1a01005	 mov         r1, r5
  0005c	eb000000	 bl          NKDbgPrintfW
  00060	ea000002	 b           |$LN10@QueuePush|
  00064		 |$LN2@QueuePush|

; 2453 :             break;
; 2454 : 
; 2455 :         case USB_CPPI41_DESC_TYPE_TEARDOWN: /* Teardown descriptor */
; 2456 :             size = (USB_CPPI_TD_SIZE - 24) / 4;

  00064	e3a04002	 mov         r4, #2

; 2457 :             break;

  00068	ea000000	 b           |$LN10@QueuePush|
  0006c		 |$LN3@QueuePush|

; 2450 :         {
; 2451 :         case USB_CPPI41_DESC_TYPE_HOST:     /* Host descriptor */
; 2452 :             size = (CPPI_HD_SIZE - 24) / 4;

  0006c	e3a0400a	 mov         r4, #0xA
  00070		 |$LN10@QueuePush|

; 2463 :         }
; 2464 : 
; 2465 :         value = ((addr & QMGR_QUEUE_N_REG_D_DESC_ADDR_MASK) |
; 2466 :                  (size & QMGR_QUEUE_N_REG_D_DESCSZ_MASK   ));

  00070	e3c8201f	 bic         r2, r8, #0x1F
  00074	e204301f	 and         r3, r4, #0x1F
  00078	e182e003	 orr         lr, r2, r3
  0007c		 |$LN6@QueuePush|

; 2467 :     }
; 2468 : 
; 2469 :     m_pCppiRegs->QMQUEUEMGMT[qNum].QCTRLD = value;

  0007c	e596301c	 ldr         r3, [r6, #0x1C]
  00080	e0833207	 add         r3, r3, r7, lsl #4
  00084	e2833a05	 add         r3, r3, #5, 20
  00088	e583e00c	 str         lr, [r3, #0xC]

; 2470 : 
; 2471 :     DEBUGMSG(ZONE_PDD_DMA && ZONE_VERBOSE,
; 2472 :         (L" CCppiDmaController::QueuePush: type %d, queue %u, value 0x%08x\r\n", type, qNum, value));
; 2473 : }

  0008c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$LN14@QueuePush|
  00094		 |$LN15@QueuePush|
  00094	00000000	 DCD         |??_C@_1DK@LONLLCCG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@|
  00098		 |$LN16@QueuePush|
  00098	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  0009c		 |$LN17@QueuePush|
  0009c	00000000	 DCD         |??_C@_1JO@GFKEKIMG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  000a0		 |$M41009|

			 ENDP  ; |?QueuePush@CCppiDmaController@@IAAXEPAX@Z|, CCppiDmaController::QueuePush

	EXPORT	|?QueuePop@CCppiDmaController@@IAAPAXE@Z| ; CCppiDmaController::QueuePop

  00000			 AREA	 |.pdata|, PDATA
|$T41027| DCD	|$LN5@QueuePop|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?QueuePop@CCppiDmaController@@IAAPAXE@Z| PROC ; CCppiDmaController::QueuePop

; 2476 : {

  00000		 |$LN5@QueuePop|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41024|

; 2477 :     UINT32 value = m_pCppiRegs->QMQUEUEMGMT[qNum].QCTRLD & QMGR_QUEUE_N_REG_D_DESC_ADDR_MASK;

  00004	e590301c	 ldr         r3, [r0, #0x1C]

; 2478 : 
; 2479 :     DEBUGMSG(ZONE_PDD_DMA && ZONE_VERBOSE,
; 2480 :         (L" CCppiDmaController::QueuePop: queue %u, value 0x%08x\r\n", qNum, value));
; 2481 : 
; 2482 :     return DescriptorPAtoVA(value);

  00008	e0833201	 add         r3, r3, r1, lsl #4
  0000c	e2833a05	 add         r3, r3, #5, 20
  00010	e593300c	 ldr         r3, [r3, #0xC]
  00014	e3c3101f	 bic         r1, r3, #0x1F
  00018	eb000000	 bl          |?DescriptorPAtoVA@CCppiDmaController@@IAAPAXI@Z|

; 2483 : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M41025|

			 ENDP  ; |?QueuePop@CCppiDmaController@@IAAPAXE@Z|, CCppiDmaController::QueuePop

	EXPORT	|?ProcessCompletedTeardown@CCppiDmaChannel@@IAAXPAU_TEARDOWN_DESCRIPTOR@@@Z| ; CCppiDmaChannel::ProcessCompletedTeardown
	EXPORT	|??_C@_1LA@LDALGLMI@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@KGOIJOOD@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T41043| DCD	|$LN13@ProcessCom|
	DCD	0x40002d01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LA@LDALGLMI@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":", 0x0, ":", 0x0, "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, "T", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, ":"
	DCB	0x0, " ", 0x0, "%", 0x0, "s", 0x0, " ", 0x0, "C", 0x0, "h"
	DCB	0x0, " ", 0x0, "%", 0x0, "u", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "N", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "t", 0x0, "h", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "c"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@KGOIJOOD@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":", 0x0, ":", 0x0, "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, "T", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, ":"
	DCB	0x0, " ", 0x0, "%", 0x0, "s", 0x0, " ", 0x0, "C", 0x0, "h"
	DCB	0x0, " ", 0x0, "%", 0x0, "u", 0x0, ",", 0x0, " ", 0x0, "N"
	DCB	0x0, "U", 0x0, "L", 0x0, "L", 0x0, " ", 0x0, "T", 0x0, "D"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@| DCB "I", 0x0, "N", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@| DCB "O", 0x0, "U", 0x0, "T", 0x0
	DCB	0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ProcessCompletedTeardown@CCppiDmaChannel@@IAAXPAU_TEARDOWN_DESCRIPTOR@@@Z| PROC ; CCppiDmaChannel::ProcessCompletedTeardown

; 546  : {

  00000		 |$LN13@ProcessCom|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M41040|
  00004	e1a06001	 mov         r6, r1
  00008	e1a04000	 mov         r4, r0

; 547  : #ifndef SHIP_BUILD
; 548  :     WCHAR* szDir = m_fIsOut ? L"OUT" : L"IN";

  0000c	e5943034	 ldr         r3, [r4, #0x34]
  00010	e3530000	 cmp         r3, #0
  00014	159f5094	 ldrne       r5, [pc, #0x94]
  00018	059f508c	 ldreq       r5, [pc, #0x8C]

; 549  : #endif
; 550  : 
; 551  :     DEBUGMSG(ZONE_PDD_DMA,
; 552  :         (L"+CCppiDmaChannel::ProcessCompletedTeardown: %s Ch %u\r\n",
; 553  :         szDir,
; 554  :         m_chNum));
; 555  : 
; 556  :     if (pTd == NULL) {

  0001c	e3560000	 cmp         r6, #0
  00020	1a000009	 bne         |$LN2@ProcessCom|

; 557  :         ERRORMSG(TRUE,
; 558  :             (L" CCppiDmaChannel::ProcessCompletedTeardown: %s Ch %u, NULL TD\r\n",
; 559  :             szDir,
; 560  :             m_chNum));

  00024	e59f1078	 ldr         r1, [pc, #0x78]
  00028	e59f0070	 ldr         r0, [pc, #0x70]
  0002c	e3a02e23	 mov         r2, #0x23, 28
  00030	eb000000	 bl          NKDbgPrintfW
  00034	e5d4203c	 ldrb        r2, [r4, #0x3C]
  00038	e59f0068	 ldr         r0, [pc, #0x68]
  0003c	e1a01005	 mov         r1, r5
  00040	eb000000	 bl          NKDbgPrintfW

; 571  :     }
; 572  : 
; 573  :     DEBUGMSG(ZONE_PDD_DMA,
; 574  :         (L"-CCppiDmaChannel::ProcessCompletedTeardown: %s Ch %u\r\n",
; 575  :         szDir,
; 576  :         m_chNum));
; 577  : }

  00044	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN2@ProcessCom|

; 561  :     }
; 562  :     else
; 563  :     {
; 564  :         ERRORMSG(m_fIsTeardownPending == FALSE,
; 565  :             (L" CCppiDmaChannel::ProcessCompletedTeardown: %s Ch %u - Not requested for this channel\r\n",
; 566  :             szDir,
; 567  :             m_chNum));

  0004c	e5943038	 ldr         r3, [r4, #0x38]
  00050	e3530000	 cmp         r3, #0
  00054	1a000008	 bne         |$LN9@ProcessCom|
  00058	e59f1044	 ldr         r1, [pc, #0x44]
  0005c	e59f003c	 ldr         r0, [pc, #0x3C]
  00060	e3a03c02	 mov         r3, #2, 24
  00064	e3832037	 orr         r2, r3, #0x37
  00068	eb000000	 bl          NKDbgPrintfW
  0006c	e5d4203c	 ldrb        r2, [r4, #0x3C]
  00070	e59f0024	 ldr         r0, [pc, #0x24]
  00074	e1a01005	 mov         r1, r5
  00078	eb000000	 bl          NKDbgPrintfW
  0007c		 |$LN9@ProcessCom|

; 568  : 
; 569  :         m_pController->QueuePush(USB_CPPI_TDFREE_QNUM, pTd);

  0007c	e594000c	 ldr         r0, [r4, #0xC]
  00080	e1a02006	 mov         r2, r6
  00084	e3a0100f	 mov         r1, #0xF
  00088	eb000000	 bl          |?QueuePush@CCppiDmaController@@IAAXEPAX@Z|

; 570  :         m_fIsTeardownPending = FALSE;

  0008c	e3a03000	 mov         r3, #0
  00090	e5843038	 str         r3, [r4, #0x38]

; 571  :     }
; 572  : 
; 573  :     DEBUGMSG(ZONE_PDD_DMA,
; 574  :         (L"-CCppiDmaChannel::ProcessCompletedTeardown: %s Ch %u\r\n",
; 575  :         szDir,
; 576  :         m_chNum));
; 577  : }

  00094	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN14@ProcessCom|
  0009c		 |$LN15@ProcessCom|
  0009c	00000000	 DCD         |??_C@_1LA@LDALGLMI@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt@|
  000a0		 |$LN16@ProcessCom|
  000a0	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  000a4		 |$LN17@ProcessCom|
  000a4	00000000	 DCD         |??_C@_1JO@GFKEKIMG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  000a8		 |$LN18@ProcessCom|
  000a8	00000000	 DCD         |??_C@_1IA@KGOIJOOD@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt@|
  000ac		 |$LN19@ProcessCom|
  000ac	00000000	 DCD         |??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@|
  000b0		 |$LN20@ProcessCom|
  000b0	00000000	 DCD         |??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@|
  000b4		 |$M41041|

			 ENDP  ; |?ProcessCompletedTeardown@CCppiDmaChannel@@IAAXPAU_TEARDOWN_DESCRIPTOR@@@Z|, CCppiDmaChannel::ProcessCompletedTeardown

	EXPORT	|?QueuePush@CCppiDmaChannel@@IAAXPAX@Z|	; CCppiDmaChannel::QueuePush

  00000			 AREA	 |.pdata|, PDATA
|$T41059| DCD	|$LN5@QueuePush@2|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?QueuePush@CCppiDmaChannel@@IAAXPAX@Z| PROC ; CCppiDmaChannel::QueuePush

; 672  : {

  00000		 |$LN5@QueuePush@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41056|
  00004	e1a02001	 mov         r2, r1

; 673  :     m_pController->QueuePush(m_qNum, pD);

  00008	e5d0103e	 ldrb        r1, [r0, #0x3E]
  0000c	e590000c	 ldr         r0, [r0, #0xC]
  00010	eb000000	 bl          |?QueuePush@CCppiDmaController@@IAAXEPAX@Z|

; 674  : }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$M41057|

			 ENDP  ; |?QueuePush@CCppiDmaChannel@@IAAXPAX@Z|, CCppiDmaChannel::QueuePush

	EXPORT	|?QueuePop@CCppiDmaChannel@@IAAPAXXZ|	; CCppiDmaChannel::QueuePop

  00000			 AREA	 |.pdata|, PDATA
|$T41078| DCD	|$LN7@QueuePop@2|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?QueuePop@CCppiDmaChannel@@IAAPAXXZ| PROC ; CCppiDmaChannel::QueuePop

; 677  : {

  00000		 |$LN7@QueuePop@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41075|

; 678  :     return m_pController->QueuePop(m_qNum);

  00004	e590200c	 ldr         r2, [r0, #0xC]
  00008	e5d0103e	 ldrb        r1, [r0, #0x3E]
  0000c	e592301c	 ldr         r3, [r2, #0x1C]
  00010	e1a00002	 mov         r0, r2
  00014	e0833201	 add         r3, r3, r1, lsl #4
  00018	e2833a05	 add         r3, r3, #5, 20
  0001c	e593300c	 ldr         r3, [r3, #0xC]
  00020	e3c3101f	 bic         r1, r3, #0x1F
  00024	eb000000	 bl          |?DescriptorPAtoVA@CCppiDmaController@@IAAPAXI@Z|

; 679  : }

  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$M41076|

			 ENDP  ; |?QueuePop@CCppiDmaChannel@@IAAPAXXZ|, CCppiDmaChannel::QueuePop

	EXPORT	|??_C@_1LO@IKNKCAJE@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf@| [ DATA ] ; `string'
	IMPORT	|GetTickCount|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T41118| DCD	|$LN35@CancelTran|
	DCD	0x40007102

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LO@IKNKCAJE@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "R", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "C", 0x0, "a", 0x0, "n", 0x0, "c", 0x0, "e"
	DCB	0x0, "l", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, " ", 0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "(", 0x0, "E", 0x0, "P", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, ")", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "d", 0x0, "-"
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "(", 0x0, "l"
	DCB	0x0, "o", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "e"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r"
	DCB	0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, ")"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CancelTransfer@CCppiDmaRxChannel@@UAAHXZ| PROC ; CCppiDmaRxChannel::CancelTransfer

; 935  : {

  00000		 |$LN35@CancelTran|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M41115|
  00008	e1a04000	 mov         r4, r0

; 936  :     BOOL fResult = FALSE;
; 937  : 
; 938  : #ifndef SHIP_BUILD
; 939  :     WCHAR* szDir = m_fIsOut ? L"OUT" : L"IN";

  0000c	e5943034	 ldr         r3, [r4, #0x34]

; 940  : #endif
; 941  : 
; 942  :     DEBUGMSG(CPPI_DBG_RX || ZONE_VERBOSE,
; 943  :         (L"+CCppiDmaRxChannel::CancelTransfer: %s Ch %u (EP %u)\r\n",
; 944  :         szDir,
; 945  :         m_chNum,
; 946  :         m_epNum));
; 947  : 
; 948  :     // Go safe
; 949  :     ChLock();

  00010	e2840044	 add         r0, r4, #0x44
  00014	e3a05000	 mov         r5, #0
  00018	e3530000	 cmp         r3, #0
  0001c	159f619c	 ldrne       r6, [pc, #0x19C]
  00020	059f6194	 ldreq       r6, [pc, #0x194]
  00024	eb000000	 bl          EnterCriticalSection

; 950  : 
; 951  :     // Only if there is a pending DMA transfer
; 952  :     if (IsInUse())

  00028	e5943074	 ldr         r3, [r4, #0x74]
  0002c	e3530000	 cmp         r3, #0
  00030	9a000059	 bls         |$LN10@CancelTran|

; 953  :     {
; 954  :         m_fIsTeardownPending = TRUE;
; 955  : 
; 956  :         // 1. Disable receiver, flush RX FIFO and clear status bits
; 957  :         m_pUsbEpcsrRegs->RXCSR =
; 958  :             MGC_M_RXCSR_FLUSHFIFO |
; 959  :             MGC_M_RXCSR_H_RXSTALL |
; 960  :             MGC_M_RXCSR_H_ERROR |
; 961  :             MGC_M_RXCSR_DATAERROR |
; 962  :             MGC_M_RXCSR_RXPKTRDY;

  00034	e5943014	 ldr         r3, [r4, #0x14]
  00038	e3a02001	 mov         r2, #1
  0003c	e3a0805d	 mov         r8, #0x5D
  00040	e5842038	 str         r2, [r4, #0x38]
  00044	e1c380b6	 strh        r8, [r3, #6]

; 963  : 
; 964  :         // 2. Set USB controller TD bit
; 965  :         m_pUsbRegs->TEARDOWN |= ((1 << m_epNum) << USB_OTG_RXTD_SHIFT);

  00048	e5940010	 ldr         r0, [r4, #0x10]
  0004c	e5d4203d	 ldrb        r2, [r4, #0x3D]
  00050	e3a0e001	 mov         lr, #1
  00054	e590301c	 ldr         r3, [r0, #0x1C]

; 966  : 
; 967  :         // 3. Initiate channel tear-down
; 968  :         m_pCppiChannelRegs->RXGCR =
; 969  :             BIT31 | /* Enable */
; 970  :             BIT30 | /* Tear-down */
; 971  :             BIT24 | /* Retry on starvation */
; 972  :             BIT14 | /* Host descriptor type (default) */ /*
; 973  :             qmgr |
; 974  :             qnum */ USB_CPPI_RXCMPL_QNUM_HOST;

  00058	e59f1158	 ldr         r1, [pc, #0x158]
  0005c	e183321e	 orr         r3, r3, lr, lsl r2
  00060	e580301c	 str         r3, [r0, #0x1C]
  00064	e594301c	 ldr         r3, [r4, #0x1C]
  00068	e5831008	 str         r1, [r3, #8]

; 975  : 
; 976  :         // 4. Wait for CDMA completion and retry (due to TX disconnect issue)
; 977  :         if (m_fIsTeardownPending)

  0006c	e5943038	 ldr         r3, [r4, #0x38]
  00070	e3530000	 cmp         r3, #0

; 978  :             Sleep(10);

  00074	13a0000a	 movne       r0, #0xA
  00078	1b000000	 blne        Sleep

; 979  : 
; 980  :         DWORD tc0 = GetTickCount();

  0007c	eb000000	 bl          GetTickCount

; 981  :         while ((m_fIsTeardownPending) && ((GetTickCount() - tc0) < 2000)) {

  00080	e5943038	 ldr         r3, [r4, #0x38]
  00084	e1a05000	 mov         r5, r0
  00088	e3530000	 cmp         r3, #0
  0008c	0a000011	 beq         |$LN31@CancelTran|
  00090	e3a07001	 mov         r7, #1
  00094		 |$LL8@CancelTran|
  00094	eb000000	 bl          GetTickCount
  00098	e0403005	 sub         r3, r0, r5
  0009c	e3530e7d	 cmp         r3, #0x7D, 28
  000a0	2a00000c	 bcs         |$LN31@CancelTran|

; 982  :             m_pUsbRegs->TEARDOWN |= ((1 << m_epNum) << USB_OTG_RXTD_SHIFT);

  000a4	e5941010	 ldr         r1, [r4, #0x10]
  000a8	e5d4203d	 ldrb        r2, [r4, #0x3D]
  000ac	e591301c	 ldr         r3, [r1, #0x1C]
  000b0	e1833217	 orr         r3, r3, r7, lsl r2
  000b4	e581301c	 str         r3, [r1, #0x1C]

; 983  :             KickCompletionCallback();

  000b8	e594300c	 ldr         r3, [r4, #0xC]
  000bc	e5930020	 ldr         r0, [r3, #0x20]
  000c0	eb000000	 bl          USBCDMA_KickCompletionCallback

; 984  :             Sleep(10);

  000c4	e3a0000a	 mov         r0, #0xA
  000c8	eb000000	 bl          Sleep
  000cc	e5943038	 ldr         r3, [r4, #0x38]
  000d0	e3530000	 cmp         r3, #0
  000d4	1affffee	 bne         |$LL8@CancelTran|
  000d8		 |$LN31@CancelTran|

; 985  :         }
; 986  : 
; 987  :         /* 5. Set USB controller TD bit */
; 988  :         m_pUsbRegs->TEARDOWN |= ((1 << m_epNum) << USB_OTG_RXTD_SHIFT);

  000d8	e5940010	 ldr         r0, [r4, #0x10]
  000dc	e5d4203d	 ldrb        r2, [r4, #0x3D]
  000e0	e3a01001	 mov         r1, #1
  000e4	e590301c	 ldr         r3, [r0, #0x1C]
  000e8	e1833211	 orr         r3, r3, r1, lsl r2
  000ec	e580301c	 str         r3, [r0, #0x1C]

; 989  : 
; 990  :         /* 6. Flush the EP's FIFO */
; 991  :         m_pUsbEpcsrRegs->RXCSR =
; 992  :             MGC_M_RXCSR_FLUSHFIFO |
; 993  :             MGC_M_RXCSR_H_RXSTALL |
; 994  :             MGC_M_RXCSR_H_ERROR |
; 995  :             MGC_M_RXCSR_DATAERROR |
; 996  :             MGC_M_RXCSR_RXPKTRDY;

  000f0	e5943014	 ldr         r3, [r4, #0x14]
  000f4	e1c380b6	 strh        r8, [r3, #6]

; 997  : 
; 998  :         if (m_fIsTeardownPending) {

  000f8	e5943038	 ldr         r3, [r4, #0x38]
  000fc	e3530000	 cmp         r3, #0
  00100	0a000007	 beq         |$LN28@CancelTran|

; 999  :             RETAILMSG(CPPI_DBG_ERROR,
; 1000 :                 (L" CCppiDmaRxChannel::CancelTransfer: %s Ch %u (EP %u) - Timed-out (lost teardown descriptor)!\r\n",
; 1001 :                 szDir,
; 1002 :                 m_chNum,
; 1003 :                 m_epNum));

  00104	e5d4303d	 ldrb        r3, [r4, #0x3D]
  00108	e5d4203c	 ldrb        r2, [r4, #0x3C]
  0010c	e59f00a0	 ldr         r0, [pc, #0xA0]
  00110	e1a01006	 mov         r1, r6
  00114	eb000000	 bl          NKDbgPrintfW

; 1004 :         }
; 1005 : 
; 1006 :         // Pop all aborted BDs from the channel's queue and free them
; 1007 :         for(;;) {
; 1008 :             HOST_DESCRIPTOR* pHd = (HOST_DESCRIPTOR*)QueuePop();

  00118	ea000001	 b           |$LN28@CancelTran|
  0011c		 |$LL5@CancelTran|

; 1009 :             if (pHd != NULL) {
; 1010 :                 m_pController->HdFree(pHd);

  0011c	e594000c	 ldr         r0, [r4, #0xC]
  00120	eb000000	 bl          |?HdFree@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@PAU2@@Z|
  00124		 |$LN28@CancelTran|
  00124	e1a00004	 mov         r0, r4
  00128	eb000000	 bl          |?QueuePop@CCppiDmaChannel@@IAAPAXXZ|
  0012c	e1b01000	 movs        r1, r0
  00130	1afffff9	 bne         |$LL5@CancelTran|

; 1011 :                 DEBUGMSG(ZONE_WARNING,
; 1012 :                     (L" CCppiDmaRxChannel::CancelTransfer: Recovered %s BD on queue %u after tear-down\r\n",
; 1013 :                     szDir,
; 1014 :                     m_qNum));
; 1015 :             }
; 1016 :             else
; 1017 :                 break;
; 1018 :         }
; 1019 : 
; 1020 :         DEBUGMSG(CPPI_DBG_RX,
; 1021 :             (L" CCppiDmaRxChannel::CancelTransfer: %s - Cancelled %u/%u\r\n",
; 1022 :             szDir,
; 1023 :             m_nTransferComplete,
; 1024 :             m_nTransferLength));
; 1025 : 
; 1026 :         // Cancel complete
; 1027 :         m_fIsCancelPending = FALSE;
; 1028 : 
; 1029 :         // Let the client know we are canceling this transfer
; 1030 :         if (m_pCallback)

  00134	e5943040	 ldr         r3, [r4, #0x40]
  00138	e3a06000	 mov         r6, #0
  0013c	e5846058	 str         r6, [r4, #0x58]
  00140	e1b05003	 movs        r5, r3
  00144	0a00000a	 beq         |$LN1@CancelTran|

; 1031 :         {
; 1032 :             m_pCallback(
; 1033 :                 this,
; 1034 :                 m_nCancelStatus,
; 1035 :                 m_nTransferLength,
; 1036 :                 m_nTransferComplete,
; 1037 :                 0,
; 1038 :                 m_pTransferCookie1,
; 1039 :                 m_pTransferCookie2);

  00148	e5940094	 ldr         r0, [r4, #0x94]
  0014c	e594e090	 ldr         lr, [r4, #0x90]
  00150	e5943098	 ldr         r3, [r4, #0x98]
  00154	e5942088	 ldr         r2, [r4, #0x88]
  00158	e594105c	 ldr         r1, [r4, #0x5C]
  0015c	e58d0008	 str         r0, [sp, #8]
  00160	e1a00004	 mov         r0, r4
  00164	e58de004	 str         lr, [sp, #4]
  00168	e58d6000	 str         r6, [sp]
  0016c	e1a0e00f	 mov         lr, pc
  00170	e12fff15	 bx          r5
  00174		 |$LN1@CancelTran|
  00174	e3a03c01	 mov         r3, #1, 24

; 1040 :         }
; 1041 : 
; 1042 :         // Cleanup
; 1043 :         m_pvTransferBuffer = NULL;
; 1044 :         m_paTransferBuffer = 0;
; 1045 :         m_nTransferLength = 0;
; 1046 :         m_nTransferFrames = 0;
; 1047 :         m_nSegmentPending = 0;
; 1048 :         m_nSegmentFramesPending = 0;
; 1049 :         m_nCancelStatus = USB_CANCELED_ERROR;

  00178	e3833001	 orr         r3, r3, #1
  0017c	e584305c	 str         r3, [r4, #0x5C]
  00180	e584606c	 str         r6, [r4, #0x6C]
  00184	e5846070	 str         r6, [r4, #0x70]
  00188	e5846088	 str         r6, [r4, #0x88]
  0018c	e5846074	 str         r6, [r4, #0x74]
  00190	e58460a0	 str         r6, [r4, #0xA0]
  00194	e58460a4	 str         r6, [r4, #0xA4]

; 1050 : 
; 1051 :         // Done
; 1052 :         fResult = TRUE;

  00198	e3a05001	 mov         r5, #1
  0019c		 |$LN10@CancelTran|

; 1053 :     }
; 1054 : 
; 1055 :     // Go unsafe
; 1056 :     ChUnlock();

  0019c	e2840044	 add         r0, r4, #0x44
  001a0	eb000000	 bl          LeaveCriticalSection

; 1057 : 
; 1058 :     DEBUGMSG(CPPI_DBG_RX || ZONE_VERBOSE,
; 1059 :         (L"-CCppiDmaRxChannel::CancelTransfer: %s Ch %u (EP %u) - %s\r\n",
; 1060 :         szDir,
; 1061 :         m_chNum,
; 1062 :         m_epNum,
; 1063 :         m_fIsTeardownPending ?
; 1064 :             L"FAILED!" :
; 1065 :             L"SUCCEEDED"));
; 1066 : 
; 1067 :     return fResult;
; 1068 : }

  001a4	e1a00005	 mov         r0, r5
  001a8	e28dd00c	 add         sp, sp, #0xC
  001ac	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  001b0	e12fff1e	 bx          lr
  001b4		 |$LN36@CancelTran|
  001b4		 |$LN37@CancelTran|
  001b4	00000000	 DCD         |??_C@_1LO@IKNKCAJE@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf@|
  001b8		 |$LN38@CancelTran|
  001b8	c1004041	 DCD         0xc1004041
  001bc		 |$LN39@CancelTran|
  001bc	00000000	 DCD         |??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@|
  001c0		 |$LN40@CancelTran|
  001c0	00000000	 DCD         |??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@|
  001c4		 |$M41116|

			 ENDP  ; |?CancelTransfer@CCppiDmaRxChannel@@UAAHXZ|, CCppiDmaRxChannel::CancelTransfer

	EXPORT	|??_C@_1LO@MEBENBLP@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf@| [ DATA ] ; `string'
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T41163| DCD	|$LN35@CancelTran@2|
	DCD	0x40007102

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LO@MEBENBLP@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "T", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "C", 0x0, "a", 0x0, "n", 0x0, "c", 0x0, "e"
	DCB	0x0, "l", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, " ", 0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "(", 0x0, "E", 0x0, "P", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, ")", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "d", 0x0, "-"
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "(", 0x0, "l"
	DCB	0x0, "o", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "e"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r"
	DCB	0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, ")"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CancelTransfer@CCppiDmaTxChannel@@UAAHXZ| PROC ; CCppiDmaTxChannel::CancelTransfer

; 1661 : {

  00000		 |$LN35@CancelTran@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M41160|
  00008	e1a04000	 mov         r4, r0

; 1662 :     BOOL fResult = FALSE;
; 1663 : 
; 1664 : #ifndef SHIP_BUILD
; 1665 :     WCHAR* szDir = m_fIsOut ? L"OUT" : L"IN";

  0000c	e5943034	 ldr         r3, [r4, #0x34]

; 1666 : #endif
; 1667 : 
; 1668 :     DEBUGMSG(CPPI_DBG_TX || ZONE_VERBOSE,
; 1669 :         (L"+CCppiDmaTxChannel::CancelTransfer: %s Ch %u (EP %u)\r\n",
; 1670 :         szDir,
; 1671 :         m_chNum,
; 1672 :         m_epNum));
; 1673 : 
; 1674 :     // Go safe
; 1675 :     ChLock();

  00010	e2840044	 add         r0, r4, #0x44
  00014	e3a05000	 mov         r5, #0
  00018	e3530000	 cmp         r3, #0
  0001c	159f619c	 ldrne       r6, [pc, #0x19C]
  00020	059f6194	 ldreq       r6, [pc, #0x194]
  00024	eb000000	 bl          EnterCriticalSection

; 1676 : 
; 1677 :     // Only if there is a pending DMA transfer
; 1678 :     if (IsInUse())

  00028	e5943074	 ldr         r3, [r4, #0x74]
  0002c	e3530000	 cmp         r3, #0
  00030	9a00005a	 bls         |$LN10@CancelTran@2|

; 1679 :     {
; 1680 :         m_fIsTeardownPending = TRUE;
; 1681 : 
; 1682 :         // 1. Initiate channel tear-down
; 1683 :         m_pCppiChannelRegs->TXGCR =
; 1684 :             BIT31 | /* Enable */
; 1685 :             BIT30 | /* Tear-down */ /*
; 1686 :             qmgr |
; 1687 :             qnum */ USB_CPPI_TXCMPL_QNUM_HOST;

  00034	e594301c	 ldr         r3, [r4, #0x1C]
  00038	e3a02001	 mov         r2, #1
  0003c	e3a011ff	 mov         r1, #0xFF, 2
  00040	e5842038	 str         r2, [r4, #0x38]
  00044	e5831000	 str         r1, [r3]

; 1688 : 
; 1689 :         // 2. Set USB controller TD bit
; 1690 :         m_pUsbRegs->TEARDOWN |= ((1 << m_epNum) << USB_OTG_TXTD_SHIFT);

  00048	e5941010	 ldr         r1, [r4, #0x10]
  0004c	e5d4303d	 ldrb        r3, [r4, #0x3D]
  00050	e3a00001	 mov         r0, #1
  00054	e591201c	 ldr         r2, [r1, #0x1C]
  00058	e1a03310	 mov         r3, r0, lsl r3
  0005c	e1823803	 orr         r3, r2, r3, lsl #16
  00060	e581301c	 str         r3, [r1, #0x1C]

; 1691 : 
; 1692 :         // 3. Wait for CDMA completion and retry (due to TX disconnect issue)
; 1693 :         if (m_fIsTeardownPending)

  00064	e5943038	 ldr         r3, [r4, #0x38]
  00068	e3530000	 cmp         r3, #0

; 1694 :             Sleep(10);

  0006c	13a0000a	 movne       r0, #0xA
  00070	1b000000	 blne        Sleep

; 1695 : 
; 1696 :         DWORD tc0 = GetTickCount();

  00074	eb000000	 bl          GetTickCount

; 1697 :         while ((m_fIsTeardownPending) && ((GetTickCount() - tc0) < 2000)) {

  00078	e5943038	 ldr         r3, [r4, #0x38]
  0007c	e1a05000	 mov         r5, r0
  00080	e3530000	 cmp         r3, #0
  00084	0a000012	 beq         |$LN31@CancelTran@2|
  00088	e3a07001	 mov         r7, #1
  0008c		 |$LL8@CancelTran@2|
  0008c	eb000000	 bl          GetTickCount
  00090	e0403005	 sub         r3, r0, r5
  00094	e3530e7d	 cmp         r3, #0x7D, 28
  00098	2a00000d	 bcs         |$LN31@CancelTran@2|

; 1698 :             m_pUsbRegs->TEARDOWN |= ((1 << m_epNum) << USB_OTG_TXTD_SHIFT);

  0009c	e5941010	 ldr         r1, [r4, #0x10]
  000a0	e5d4303d	 ldrb        r3, [r4, #0x3D]
  000a4	e591201c	 ldr         r2, [r1, #0x1C]
  000a8	e1a03317	 mov         r3, r7, lsl r3
  000ac	e1823803	 orr         r3, r2, r3, lsl #16
  000b0	e581301c	 str         r3, [r1, #0x1C]

; 1699 :             KickCompletionCallback();

  000b4	e594300c	 ldr         r3, [r4, #0xC]
  000b8	e5930020	 ldr         r0, [r3, #0x20]
  000bc	eb000000	 bl          USBCDMA_KickCompletionCallback

; 1700 :             Sleep(10);

  000c0	e3a0000a	 mov         r0, #0xA
  000c4	eb000000	 bl          Sleep
  000c8	e5943038	 ldr         r3, [r4, #0x38]
  000cc	e3530000	 cmp         r3, #0
  000d0	1affffed	 bne         |$LL8@CancelTran@2|
  000d4		 |$LN31@CancelTran@2|

; 1701 :         }
; 1702 : 
; 1703 :         // 4. Set USB controller TD bit
; 1704 :         m_pUsbRegs->TEARDOWN |= ((1 << m_epNum) << USB_OTG_TXTD_SHIFT);

  000d4	e5940010	 ldr         r0, [r4, #0x10]
  000d8	e5d4303d	 ldrb        r3, [r4, #0x3D]
  000dc	e3a01001	 mov         r1, #1
  000e0	e590201c	 ldr         r2, [r0, #0x1C]
  000e4	e1a03311	 mov         r3, r1, lsl r3

; 1705 : 
; 1706 :         // 5. Flush FIFO and clear status bits
; 1707 :         m_pUsbEpcsrRegs->TXCSR =
; 1708 :             MGC_M_TXCSR_FLUSHFIFO |
; 1709 :             MGC_M_TXCSR_H_NAKTIMEOUT |
; 1710 :             MGC_M_TXCSR_H_RXSTALL |
; 1711 :             MGC_M_TXCSR_H_ERROR |
; 1712 :             MGC_M_TXCSR_FIFONOTEMPTY;

  000e8	e3a010ae	 mov         r1, #0xAE
  000ec	e1823803	 orr         r3, r2, r3, lsl #16
  000f0	e580301c	 str         r3, [r0, #0x1C]
  000f4	e5943014	 ldr         r3, [r4, #0x14]
  000f8	e1c310b2	 strh        r1, [r3, #2]

; 1713 : 
; 1714 :         if (m_fIsTeardownPending) {

  000fc	e5943038	 ldr         r3, [r4, #0x38]
  00100	e3530000	 cmp         r3, #0
  00104	0a000007	 beq         |$LN28@CancelTran@2|

; 1715 :             RETAILMSG(CPPI_DBG_ERROR,
; 1716 :                 (L" CCppiDmaTxChannel::CancelTransfer: %s Ch %u (EP %u) - Timed-out (lost teardown descriptor)!\r\n",
; 1717 :                 szDir,
; 1718 :                 m_chNum,
; 1719 :                 m_epNum));

  00108	e5d4303d	 ldrb        r3, [r4, #0x3D]
  0010c	e5d4203c	 ldrb        r2, [r4, #0x3C]
  00110	e59f00a0	 ldr         r0, [pc, #0xA0]
  00114	e1a01006	 mov         r1, r6
  00118	eb000000	 bl          NKDbgPrintfW

; 1720 :         }
; 1721 : 
; 1722 :         // Pop all aborted BDs from the channel's queue and free them
; 1723 :         for(;;) {
; 1724 :             HOST_DESCRIPTOR* pHd = (HOST_DESCRIPTOR*)QueuePop();

  0011c	ea000001	 b           |$LN28@CancelTran@2|
  00120		 |$LL5@CancelTran@2|

; 1725 :             if (pHd != NULL) {
; 1726 :                 m_pController->HdFree(pHd);

  00120	e594000c	 ldr         r0, [r4, #0xC]
  00124	eb000000	 bl          |?HdFree@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@PAU2@@Z|
  00128		 |$LN28@CancelTran@2|
  00128	e1a00004	 mov         r0, r4
  0012c	eb000000	 bl          |?QueuePop@CCppiDmaChannel@@IAAPAXXZ|
  00130	e1b01000	 movs        r1, r0
  00134	1afffff9	 bne         |$LL5@CancelTran@2|

; 1727 :                 DEBUGMSG(ZONE_WARNING/*0*/,
; 1728 :                     (L" CCppiDmaTxChannel::CancelTransfer: Recovered %s BD on queue %u after tear-down\r\n",
; 1729 :                     szDir,
; 1730 :                     m_qNum));
; 1731 :             }
; 1732 :             else
; 1733 :                 break;
; 1734 :         }
; 1735 : 
; 1736 :         DEBUGMSG(CPPI_DBG_TX,
; 1737 :             (L" CCppiDmaTxChannel::CancelTransfer: %s - Cancelled %u/%u\r\n",
; 1738 :             szDir,
; 1739 :             m_nTransferComplete,
; 1740 :             m_nTransferLength));
; 1741 : 
; 1742 :         // Cancel complete
; 1743 :         m_fIsCancelPending = FALSE;
; 1744 : 
; 1745 :         // Let the client know we are canceling this transfer
; 1746 :         if (m_pCallback)

  00138	e5943040	 ldr         r3, [r4, #0x40]
  0013c	e3a06000	 mov         r6, #0
  00140	e5846058	 str         r6, [r4, #0x58]
  00144	e1b05003	 movs        r5, r3
  00148	0a00000a	 beq         |$LN1@CancelTran@2|

; 1747 :         {
; 1748 :             m_pCallback(
; 1749 :                 this,
; 1750 :                 m_nCancelStatus,
; 1751 :                 m_nTransferLength,
; 1752 :                 m_nTransferComplete,
; 1753 :                 0,
; 1754 :                 m_pTransferCookie1,
; 1755 :                 m_pTransferCookie2);

  0014c	e5940094	 ldr         r0, [r4, #0x94]
  00150	e594e090	 ldr         lr, [r4, #0x90]
  00154	e5943098	 ldr         r3, [r4, #0x98]
  00158	e5942088	 ldr         r2, [r4, #0x88]
  0015c	e594105c	 ldr         r1, [r4, #0x5C]
  00160	e58d0008	 str         r0, [sp, #8]
  00164	e1a00004	 mov         r0, r4
  00168	e58de004	 str         lr, [sp, #4]
  0016c	e58d6000	 str         r6, [sp]
  00170	e1a0e00f	 mov         lr, pc
  00174	e12fff15	 bx          r5
  00178		 |$LN1@CancelTran@2|
  00178	e3a03c01	 mov         r3, #1, 24

; 1756 :         }
; 1757 : 
; 1758 :         // Cleanup
; 1759 :         m_pvTransferBuffer = NULL;
; 1760 :         m_paTransferBuffer = 0;
; 1761 :         m_nTransferLength = 0;
; 1762 :         m_nTransferFrames = 0;
; 1763 :         m_nSegmentPending = 0;
; 1764 :         m_nSegmentFramesPending = 0;
; 1765 :         m_nCancelStatus = USB_CANCELED_ERROR;

  0017c	e3833001	 orr         r3, r3, #1
  00180	e584305c	 str         r3, [r4, #0x5C]
  00184	e584606c	 str         r6, [r4, #0x6C]
  00188	e5846070	 str         r6, [r4, #0x70]
  0018c	e5846088	 str         r6, [r4, #0x88]
  00190	e5846074	 str         r6, [r4, #0x74]
  00194	e58460a0	 str         r6, [r4, #0xA0]
  00198	e58460a4	 str         r6, [r4, #0xA4]

; 1766 : 
; 1767 :         // Done
; 1768 :         fResult = TRUE;

  0019c	e3a05001	 mov         r5, #1
  001a0		 |$LN10@CancelTran@2|

; 1769 :     }
; 1770 : 
; 1771 :     // Go unsafe
; 1772 :     ChUnlock();

  001a0	e2840044	 add         r0, r4, #0x44
  001a4	eb000000	 bl          LeaveCriticalSection

; 1773 : 
; 1774 :     DEBUGMSG(CPPI_DBG_TX || ZONE_VERBOSE,
; 1775 :         (L"-CCppiDmaTxChannel::CancelTransfer: %s Ch %u (EP %u) - %s\r\n",
; 1776 :         szDir,
; 1777 :         m_chNum,
; 1778 :         m_epNum,
; 1779 :         m_fIsTeardownPending ?
; 1780 :             L"FAILED!" :
; 1781 :             L"SUCCEEDED"));
; 1782 : 
; 1783 :     return fResult;
; 1784 : }

  001a8	e1a00005	 mov         r0, r5
  001ac	e28dd00c	 add         sp, sp, #0xC
  001b0	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  001b4	e12fff1e	 bx          lr
  001b8		 |$LN36@CancelTran@2|
  001b8		 |$LN37@CancelTran@2|
  001b8	00000000	 DCD         |??_C@_1LO@MEBENBLP@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAC?$AAa?$AAn?$AAc?$AAe?$AAl?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf@|
  001bc		 |$LN38@CancelTran@2|
  001bc	00000000	 DCD         |??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@|
  001c0		 |$LN39@CancelTran@2|
  001c0	00000000	 DCD         |??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@|
  001c4		 |$M41161|

			 ENDP  ; |?CancelTransfer@CCppiDmaTxChannel@@UAAHXZ|, CCppiDmaTxChannel::CancelTransfer

	EXPORT	|?ProcessCompletionEvent@CCppiDmaController@@IAAXPAX@Z| ; CCppiDmaController::ProcessCompletionEvent
	EXPORT	|??_C@_1DK@BKCENHLF@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T41188| DCD	|$LN26@ProcessCom@2|
	DCD	0x40003001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@BKCENHLF@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r"
	DCB	0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ProcessCompletionEvent@CCppiDmaController@@IAAXPAX@Z| PROC ; CCppiDmaController::ProcessCompletionEvent

; 2516 : {

  00000		 |$LN26@ProcessCom@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M41185|
  00004	e3510000	 cmp         r1, #0

; 2517 :     DEBUGMSG(ZONE_PDD_DMA && ZONE_VERBOSE,
; 2518 :         (L"+CCppiDmaController::ProcessCompletionEvent: 0x%08x\r\n"));
; 2519 : 
; 2520 :     DEBUGCHK(pD != NULL);
; 2521 :     if (pD == NULL)

  00008	0a000027	 beq         |$LN8@ProcessCom@2|

; 2522 :         return;
; 2523 : 
; 2524 :     UINT32 type = (*(UINT32*)pD & USB_CPPI41_DESC_TYPE_MASK) >> USB_CPPI41_DESC_TYPE_SHIFT;

  0000c	e5913000	 ldr         r3, [r1]
  00010	e1a04da3	 mov         r4, r3, lsr #27

; 2525 : 
; 2526 :     DEBUGMSG(ZONE_PDD_DMA && ZONE_VERBOSE,
; 2527 :         (L" CCppiDmaController::ProcessCompletionEvent: type %u\r\n", type));
; 2528 : 
; 2529 :     switch (type)

  00014	e3540010	 cmp         r4, #0x10
  00018	0a000017	 beq         |$LN11@ProcessCom@2|
  0001c	e3540013	 cmp         r4, #0x13
  00020	0a000009	 beq         |$LN6@ProcessCom@2|

; 2564 :             else
; 2565 :                 DEBUGMSG(ZONE_ERROR,
; 2566 :                     (L" CCppiDmaController::ProcessCompletionEvent(TD): ERROR - Ch %u deleted\r\n",
; 2567 :                     chanNum - m_nCppiChannelOffset));
; 2568 :             break;
; 2569 :         }
; 2570 : 
; 2571 :     default:
; 2572 :         ERRORMSG(TRUE,
; 2573 :             (L"Unknown descriptor type %u\r\n",
; 2574 :             type));

  00024	e59f1090	 ldr         r1, [pc, #0x90]
  00028	e59f0088	 ldr         r0, [pc, #0x88]
  0002c	e3a03c0a	 mov         r3, #0xA, 24
  00030	e383200e	 orr         r2, r3, #0xE
  00034	eb000000	 bl          NKDbgPrintfW
  00038	e59f0074	 ldr         r0, [pc, #0x74]
  0003c	e1a01004	 mov         r1, r4
  00040	eb000000	 bl          NKDbgPrintfW

; 2575 :     }
; 2576 : 
; 2577 :     DEBUGMSG(ZONE_PDD_DMA && ZONE_VERBOSE,
; 2578 :         (L"-CCppiDmaController::ProcessCompletionEvent\r\n"));
; 2579 : }

  00044	e8bd4010	 ldmia       sp!, {r4, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN6@ProcessCom@2|

; 2544 :             else
; 2545 :                 DEBUGMSG(ZONE_ERROR,
; 2546 :                     (L" CCppiDmaController::ProcessCompletionEvent(HD): ERROR - Ch %u deleted\r\n",
; 2547 :                     chanNum));
; 2548 :             break;
; 2549 :         }
; 2550 : 
; 2551 :     case USB_CPPI41_DESC_TYPE_TEARDOWN: /* Teardown Descriptor */
; 2552 :         {
; 2553 :             TEARDOWN_DESCRIPTOR* pTd = (TEARDOWN_DESCRIPTOR*)pD;
; 2554 :             CCppiDmaChannel* pChannel = NULL;
; 2555 :             BYTE chanNum  = (BYTE)((pTd->DescInfo & 0x0001f) >> 0);

  0004c	e203201f	 and         r2, r3, #0x1F

; 2556 :             BOOL transmit = (pTd->DescInfo & 0x10000) ? FALSE : TRUE;

  00050	e3130801	 tst         r3, #1, 16

; 2557 :             if (transmit)
; 2558 :                 pChannel = m_pTxChannels[chanNum - m_nCppiChannelOffset];

  00054	e5d03028	 ldrb        r3, [r0, #0x28]
  00058	e0423003	 sub         r3, r2, r3
  0005c	e0803103	 add         r3, r0, r3, lsl #2
  00060	0593002c	 ldreq       r0, [r3, #0x2C]

; 2559 :             else
; 2560 :                 pChannel = m_pRxChannels[chanNum - m_nCppiChannelOffset];

  00064	159300a4	 ldrne       r0, [r3, #0xA4]

; 2561 : 
; 2562 :             if (pChannel)

  00068	e3500000	 cmp         r0, #0
  0006c	0a00000e	 beq         |$LN8@ProcessCom@2|

; 2563 :                 pChannel->ProcessCompletedTeardown(pTd);

  00070	eb000000	 bl          |?ProcessCompletedTeardown@CCppiDmaChannel@@IAAXPAU_TEARDOWN_DESCRIPTOR@@@Z|

; 2575 :     }
; 2576 : 
; 2577 :     DEBUGMSG(ZONE_PDD_DMA && ZONE_VERBOSE,
; 2578 :         (L"-CCppiDmaController::ProcessCompletionEvent\r\n"));
; 2579 : }

  00074	e8bd4010	 ldmia       sp!, {r4, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN11@ProcessCom@2|

; 2530 :     {
; 2531 :     case USB_CPPI41_DESC_TYPE_HOST: /* Host Descriptor */
; 2532 :         {
; 2533 :             HOST_DESCRIPTOR* pHd = (HOST_DESCRIPTOR*)pD;
; 2534 :             CCppiDmaChannel* pChannel = NULL;
; 2535 :             BYTE chanNum  = (BYTE)((pHd->TagInfo2 & 0x1f0) >> 4);

  0007c	e5912030	 ldr         r2, [r1, #0x30]
  00080	e1a03b82	 mov         r3, r2, lsl #23
  00084	e1a03da3	 mov         r3, r3, lsr #27

; 2536 :             BOOL transmit = (pHd->TagInfo2 & 0x200) ? TRUE : FALSE;
; 2537 :             if (transmit)
; 2538 :                 pChannel = m_pTxChannels[chanNum];

  00088	e0803103	 add         r3, r0, r3, lsl #2
  0008c	e3120c02	 tst         r2, #2, 24
  00090	1593002c	 ldrne       r0, [r3, #0x2C]

; 2539 :             else
; 2540 :                 pChannel = m_pRxChannels[chanNum];

  00094	059300a4	 ldreq       r0, [r3, #0xA4]

; 2541 : 
; 2542 :             if (pChannel)

  00098	e3500000	 cmp         r0, #0

; 2543 :                 pChannel->ProcessCompletedPacket(pHd);

  0009c	15903000	 ldrne       r3, [r0]
  000a0	15933010	 ldrne       r3, [r3, #0x10]
  000a4	11a0e00f	 movne       lr, pc
  000a8	112fff13	 bxne        r3
  000ac		 |$LN8@ProcessCom@2|

; 2575 :     }
; 2576 : 
; 2577 :     DEBUGMSG(ZONE_PDD_DMA && ZONE_VERBOSE,
; 2578 :         (L"-CCppiDmaController::ProcessCompletionEvent\r\n"));
; 2579 : }

  000ac	e8bd4010	 ldmia       sp!, {r4, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$LN27@ProcessCom@2|
  000b4		 |$LN28@ProcessCom@2|
  000b4	00000000	 DCD         |??_C@_1DK@BKCENHLF@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@|
  000b8		 |$LN29@ProcessCom@2|
  000b8	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  000bc		 |$LN30@ProcessCom@2|
  000bc	00000000	 DCD         |??_C@_1JO@GFKEKIMG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  000c0		 |$M41186|

			 ENDP  ; |?ProcessCompletionEvent@CCppiDmaController@@IAAXPAX@Z|, CCppiDmaController::ProcessCompletionEvent

	EXPORT	|?OnCompletionEvent@CCppiDmaController@@IAAXXZ| ; CCppiDmaController::OnCompletionEvent

  00000			 AREA	 |.pdata|, PDATA
|$T41223| DCD	|$LN20@OnCompleti|
	DCD	0x40002e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OnCompletionEvent@CCppiDmaController@@IAAXXZ| PROC ; CCppiDmaController::OnCompletionEvent

; 2582 : {

  00000		 |$LN20@OnCompleti|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M41220|
  00004	e1a05000	 mov         r5, r0
  00008		 |$LN17@OnCompleti|

; 2583 :     UINT32 pending1, pending2;
; 2584 : 
; 2585 :     DEBUGMSG(ZONE_PDD_DMA && ZONE_VERBOSE,
; 2586 :         (L"+CCppiDmaController::OnCompletionEvent\r\n"));
; 2587 : 
; 2588 : 
; 2589 : 	pending1 = m_pCppiRegs->PEND1;

  00008	e595101c	 ldr         r1, [r5, #0x1C]

; 2590 : 	pending2 = m_pCppiRegs->PEND2;

  0000c	e2813a03	 add         r3, r1, #3, 20
  00010	e5933094	 ldr         r3, [r3, #0x94]
  00014	e2812a03	 add         r2, r1, #3, 20
  00018	e5924098	 ldr         r4, [r2, #0x98]

; 2591 : 	while ((pending1 & USB_CPPI_PEND1_QMSK_HOST) ||
; 2592 : 		   (pending2 & USB_CPPI_PEND2_QMSK_HOST) )

  0001c	e2133102	 ands        r3, r3, #2, 2
  00020	1a000001	 bne         |$LN4@OnCompleti|
  00024	e3140012	 tst         r4, #0x12
  00028	0a000020	 beq         |$LN5@OnCompleti|
  0002c		 |$LN4@OnCompleti|

; 2593 : 	{
; 2594 :         if (pending1 & QUEUE_N_BITMASK(USB_CPPI_TXCMPL_QNUM_HOST))

  0002c	e3530000	 cmp         r3, #0
  00030	0a000007	 beq         |$LN3@OnCompleti|

; 2595 : 		{
; 2596 :             void* pD = QueuePop(USB_CPPI_TXCMPL_QNUM_HOST);

  00034	e2813c53	 add         r3, r1, #0x53, 24
  00038	e59330fc	 ldr         r3, [r3, #0xFC]
  0003c	e1a00005	 mov         r0, r5
  00040	e3c3101f	 bic         r1, r3, #0x1F
  00044	eb000000	 bl          |?DescriptorPAtoVA@CCppiDmaController@@IAAPAXI@Z|
  00048	e1a01000	 mov         r1, r0

; 2597 :             ProcessCompletionEvent(pD);

  0004c	e1a00005	 mov         r0, r5
  00050	eb000000	 bl          |?ProcessCompletionEvent@CCppiDmaController@@IAAXPAX@Z|
  00054		 |$LN3@OnCompleti|

; 2598 :         }
; 2599 :         if (pending2 & QUEUE_N_BITMASK(USB_CPPI_RXCMPL_QNUM_HOST)) 

  00054	e3140002	 tst         r4, #2
  00058	0a000008	 beq         |$LN2@OnCompleti|

; 2600 : 		{
; 2601 :             void* pD = QueuePop(USB_CPPI_RXCMPL_QNUM_HOST);

  0005c	e595301c	 ldr         r3, [r5, #0x1C]
  00060	e1a00005	 mov         r0, r5
  00064	e2833b15	 add         r3, r3, #0x15, 22
  00068	e593301c	 ldr         r3, [r3, #0x1C]
  0006c	e3c3101f	 bic         r1, r3, #0x1F
  00070	eb000000	 bl          |?DescriptorPAtoVA@CCppiDmaController@@IAAPAXI@Z|
  00074	e1a01000	 mov         r1, r0

; 2602 :             ProcessCompletionEvent(pD);

  00078	e1a00005	 mov         r0, r5
  0007c	eb000000	 bl          |?ProcessCompletionEvent@CCppiDmaController@@IAAXPAX@Z|
  00080		 |$LN2@OnCompleti|

; 2603 :         }
; 2604 :         if (pending2 & QUEUE_N_BITMASK(USB_CPPI_TDCMPL_QNUM)) 

  00080	e3140010	 tst         r4, #0x10
  00084	0affffdf	 beq         |$LN17@OnCompleti|

; 2605 : 		{
; 2606 :             void* pD = QueuePop(USB_CPPI_TDCMPL_QNUM);

  00088	e595301c	 ldr         r3, [r5, #0x1C]
  0008c	e1a00005	 mov         r0, r5
  00090	e2833b15	 add         r3, r3, #0x15, 22
  00094	e593304c	 ldr         r3, [r3, #0x4C]
  00098	e3c3101f	 bic         r1, r3, #0x1F
  0009c	eb000000	 bl          |?DescriptorPAtoVA@CCppiDmaController@@IAAPAXI@Z|
  000a0	e1a01000	 mov         r1, r0

; 2607 :             ProcessCompletionEvent(pD);

  000a4	e1a00005	 mov         r0, r5
  000a8	eb000000	 bl          |?ProcessCompletionEvent@CCppiDmaController@@IAAXPAX@Z|

; 2608 :         }
; 2609 : 		pending1 = m_pCppiRegs->PEND1;
; 2610 : 		pending2 = m_pCppiRegs->PEND2;
; 2611 :     }

  000ac	eaffffd5	 b           |$LN17@OnCompleti|
  000b0		 |$LN5@OnCompleti|

; 2612 : 
; 2613 :     DEBUGMSG(ZONE_PDD_DMA && ZONE_VERBOSE,
; 2614 :         (L"-CCppiDmaController::OnCompletionEvent\r\n"));
; 2615 : }

  000b0	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$M41221|

			 ENDP  ; |?OnCompletionEvent@CCppiDmaController@@IAAXXZ|, CCppiDmaController::OnCompletionEvent

	EXPORT	|?CompletionCallback@CCppiDmaController@@KAXPAX@Z| ; CCppiDmaController::CompletionCallback
	EXPORT	|??_C@_1JA@GIBCJNIM@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T41233| DCD	|$LN8@Completion|
	DCD	0x40001301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@GIBCJNIM@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, ":", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p"
	DCB	0x0, "l", 0x0, "e", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "C", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "b", 0x0, "a"
	DCB	0x0, "c", 0x0, "k", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a"
	DCB	0x0, "m", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CompletionCallback@CCppiDmaController@@KAXPAX@Z| PROC ; CCppiDmaController::CompletionCallback

; 2618 : {

  00000		 |$LN8@Completion|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41230|
  00004	e3500000	 cmp         r0, #0

; 2619 :     if (param == NULL) {

  00008	1a000009	 bne         |$LN1@Completion|

; 2620 :         ERRORMSG(TRUE,
; 2621 :             (L" CCppiDmaController::CompletionCallback: ERROR - Invalid param 0x%08x\r\n",
; 2622 :             param));

  0000c	e59f1034	 ldr         r1, [pc, #0x34]
  00010	e59f002c	 ldr         r0, [pc, #0x2C]
  00014	e3a03c0a	 mov         r3, #0xA, 24
  00018	e383203e	 orr         r2, r3, #0x3E
  0001c	eb000000	 bl          NKDbgPrintfW
  00020	e59f0018	 ldr         r0, [pc, #0x18]
  00024	e3a01000	 mov         r1, #0
  00028	eb000000	 bl          NKDbgPrintfW

; 2627 : }

  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$LN1@Completion|

; 2623 :         return;
; 2624 :     }
; 2625 : 
; 2626 :     ((CCppiDmaController*)param)->OnCompletionEvent();

  00034	eb000000	 bl          |?OnCompletionEvent@CCppiDmaController@@IAAXXZ|

; 2627 : }

  00038	e49de004	 ldr         lr, [sp], #4
  0003c	e12fff1e	 bx          lr
  00040		 |$LN9@Completion|
  00040		 |$LN10@Completion|
  00040	00000000	 DCD         |??_C@_1JA@GIBCJNIM@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC@|
  00044		 |$LN11@Completion|
  00044	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00048		 |$LN12@Completion|
  00048	00000000	 DCD         |??_C@_1JO@GFKEKIMG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0004c		 |$M41231|

			 ENDP  ; |?CompletionCallback@CCppiDmaController@@KAXPAX@Z|, CCppiDmaController::CompletionCallback

	EXPORT	|?HdPoolInit@CCppiDmaController@@IAAXXZ| ; CCppiDmaController::HdPoolInit
	EXPORT	|?PoolInit@CCppiDmaController@@IAAHXZ|	; CCppiDmaController::PoolInit
	EXPORT	|??_C@_1HK@PDIDIINM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AA?$CF?$AAu?$AA?5?$AAb?$AAy?$AAt@| [ DATA ] ; `string'
	IMPORT	|USBCDMA_RegisterUsbModule|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T41260| DCD	|$LN17@PoolInit|
	DCD	0x40003902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@PDIDIINM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AA?$CF?$AAu?$AA?5?$AAb?$AAy?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "u", 0x0, " ", 0x0, "b", 0x0, "y"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " "
	DCB	0x0, "d", 0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r", 0x0, "i"
	DCB	0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "o", 0x0, "l", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PoolInit@CCppiDmaController@@IAAHXZ| PROC ; CCppiDmaController::PoolInit

; 2630 : {

  00000		 |$LN17@PoolInit|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M41257|
  00008	e1a05000	 mov         r5, r0

; 2631 :     // Only initialise once
; 2632 :     if (m_pvPool != NULL)

  0000c	e595311c	 ldr         r3, [r5, #0x11C]
  00010	e3530000	 cmp         r3, #0

; 2633 :         return TRUE;

  00014	1a000028	 bne         |$LN14@PoolInit|

; 2634 : 
; 2635 :     UINT16 nHdCount = (UINT16)m_dwDescriptorCount;

  00018	e5953024	 ldr         r3, [r5, #0x24]

; 2636 : 
; 2637 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 2638 :         (L"+CCppiDmaController::PoolInit: %u HDs\r\n",
; 2639 :         nHdCount));
; 2640 : 
; 2641 :     PoolLock();

  0001c	e2850f4b	 add         r0, r5, #0x4B, 30
  00020	e1a04803	 mov         r4, r3, lsl #16
  00024	e1a04824	 mov         r4, r4, lsr #16
  00028	eb000000	 bl          EnterCriticalSection

; 2642 : 
; 2643 :     m_hUsbCdma = USBCDMA_RegisterUsbModule(
; 2644 :         nHdCount,
; 2645 :         CPPI_HD_SIZE,
; 2646 :         &m_paPool,
; 2647 :         &m_pvPool,
; 2648 :         CompletionCallback,
; 2649 :         this);

  0002c	e59f10ac	 ldr         r1, [pc, #0xAC]
  00030	e2853f47	 add         r3, r5, #0x47, 30
  00034	e2852e12	 add         r2, r5, #0x12, 28
  00038	e58d1000	 str         r1, [sp]
  0003c	e3a01040	 mov         r1, #0x40
  00040	e1a00004	 mov         r0, r4
  00044	e58d5004	 str         r5, [sp, #4]
  00048	eb000000	 bl          USBCDMA_RegisterUsbModule
  0004c	e1a03000	 mov         r3, r0

; 2650 : 
; 2651 :     m_cbPoolSize = nHdCount * CPPI_HD_SIZE;
; 2652 :     m_pvHdPool = NULL;
; 2653 :     m_pvHdPoolHead = NULL;
; 2654 : 
; 2655 :     PoolUnlock();

  00050	e5853020	 str         r3, [r5, #0x20]
  00054	e3a03000	 mov         r3, #0
  00058	e1a02304	 mov         r2, r4, lsl #6
  0005c	e2850f4b	 add         r0, r5, #0x4B, 30
  00060	e5853140	 str         r3, [r5, #0x140]
  00064	e5853144	 str         r3, [r5, #0x144]
  00068	e5852128	 str         r2, [r5, #0x128]
  0006c	eb000000	 bl          LeaveCriticalSection

; 2656 : 
; 2657 :     ERRORMSG(m_pvPool == NULL,
; 2658 :         (L"ERROR: Failed to allocate %u bytes for the descriptor pool\r\n",
; 2659 :         m_cbPoolSize));

  00070	e595311c	 ldr         r3, [r5, #0x11C]
  00074	e3530000	 cmp         r3, #0
  00078	1a00000a	 bne         |$LN13@PoolInit|
  0007c	e59f1058	 ldr         r1, [pc, #0x58]
  00080	e59f0050	 ldr         r0, [pc, #0x50]
  00084	e3a03c0a	 mov         r3, #0xA, 24
  00088	e3832063	 orr         r2, r3, #0x63
  0008c	eb000000	 bl          NKDbgPrintfW
  00090	e5951128	 ldr         r1, [r5, #0x128]
  00094	e59f0038	 ldr         r0, [pc, #0x38]
  00098	eb000000	 bl          NKDbgPrintfW

; 2660 : 
; 2661 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 2662 :         (L"-CCppiDmaController::PoolInit: %s - Allocated space for %u HDs\r\n",
; 2663 :         (m_pvPool != NULL) ?
; 2664 :             L"SUCCEEDED" :
; 2665 :             L"FALIED",
; 2666 :         nHdCount));
; 2667 : 
; 2668 :     if (m_pvPool)

  0009c	e595311c	 ldr         r3, [r5, #0x11C]
  000a0	e3530000	 cmp         r3, #0
  000a4	0a000006	 beq         |$LN7@PoolInit|
  000a8		 |$LN13@PoolInit|

; 2669 :         HdPoolInit();

  000a8	e1a00005	 mov         r0, r5
  000ac	eb000000	 bl          |?HdPoolInit@CCppiDmaController@@IAAXXZ|

; 2670 : 
; 2671 :     return (m_pvPool != NULL);

  000b0	e595311c	 ldr         r3, [r5, #0x11C]
  000b4	e3530000	 cmp         r3, #0
  000b8	0a000001	 beq         |$LN7@PoolInit|
  000bc		 |$LN14@PoolInit|
  000bc	e3a00001	 mov         r0, #1
  000c0	ea000000	 b           |$LN8@PoolInit|
  000c4		 |$LN7@PoolInit|
  000c4	e3a00000	 mov         r0, #0
  000c8		 |$LN8@PoolInit|

; 2672 : }

  000c8	e28dd008	 add         sp, sp, #8
  000cc	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN18@PoolInit|
  000d4		 |$LN19@PoolInit|
  000d4	00000000	 DCD         |??_C@_1HK@PDIDIINM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AA?$CF?$AAu?$AA?5?$AAb?$AAy?$AAt@|
  000d8		 |$LN20@PoolInit|
  000d8	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  000dc		 |$LN21@PoolInit|
  000dc	00000000	 DCD         |??_C@_1JO@GFKEKIMG@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  000e0		 |$LN22@PoolInit|
  000e0	00000000	 DCD         |?CompletionCallback@CCppiDmaController@@KAXPAX@Z|
  000e4		 |$M41258|

			 ENDP  ; |?PoolInit@CCppiDmaController@@IAAHXZ|, CCppiDmaController::PoolInit

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T41283| DCD	|$LN16@HdPoolInit|
	DCD	0x40002001
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HdPoolInit@CCppiDmaController@@IAAXXZ| PROC ; CCppiDmaController::HdPoolInit

; 2702 : {

  00000		 |$LN16@HdPoolInit|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M41280|
  00004	e1a04000	 mov         r4, r0

; 2703 :     unsigned nHdCount = m_dwDescriptorCount;
; 2704 :     unsigned n = 0;
; 2705 : 
; 2706 :     // Only initialise once
; 2707 :     if (m_pvHdPool != NULL)

  00008	e5943140	 ldr         r3, [r4, #0x140]
  0000c	e5946024	 ldr         r6, [r4, #0x24]
  00010	e3530000	 cmp         r3, #0
  00014	1a000017	 bne         |$done$39878|

; 2708 :         goto done;
; 2709 : 
; 2710 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 2711 :         (L"+CCppiDmaController::HdPoolInit: %u HDs\r\n", nHdCount));
; 2712 : 
; 2713 :     // The descriptor pool must be initialised before the host descriptor pool
; 2714 :     PoolInit();

  00018	eb000000	 bl          |?PoolInit@CCppiDmaController@@IAAHXZ|

; 2715 :     DEBUGCHK(m_pvPool != NULL);
; 2716 : 
; 2717 :     // The host descriptor pool begins at the base of the descriptor pool
; 2718 :     HOST_DESCRIPTOR* pHd = (HOST_DESCRIPTOR*)m_pvPool;

  0001c	e594511c	 ldr         r5, [r4, #0x11C]

; 2719 :     m_pvHdPool = (HOST_DESCRIPTOR*)&pHd[0];
; 2720 : 
; 2721 :     PoolLock();

  00020	e2840f4b	 add         r0, r4, #0x4B, 30
  00024	e5845140	 str         r5, [r4, #0x140]
  00028	eb000000	 bl          EnterCriticalSection

; 2722 : 
; 2723 :     // Build the host descriptor free list
; 2724 :     m_pvHdPoolHead = NULL;

  0002c	e3a03000	 mov         r3, #0
  00030	e5843144	 str         r3, [r4, #0x144]

; 2725 :     for (n = 0; n < nHdCount; n++, pHd++)

  00034	e3560000	 cmp         r6, #0
  00038	0a00000c	 beq         |$LN1@HdPoolInit|
  0003c	e3a07102	 mov         r7, #2, 2
  00040		 |$LL3@HdPoolInit|

; 2726 :     {
; 2727 :         // Set descriptor type to 'host'
; 2728 :         pHd->DescInfo = (UINT32)(USB_CPPI41_DESC_TYPE_HOST << USB_CPPI41_DESC_TYPE_SHIFT);
; 2729 : 
; 2730 :         // Host descriptors have their physical address in their 'addr' member
; 2731 :         pHd->addr = DescriptorVAtoPA(pHd);

  00040	e1a01005	 mov         r1, r5
  00044	e1a00004	 mov         r0, r4
  00048	e5857000	 str         r7, [r5]
  0004c	eb000000	 bl          |?DescriptorVAtoPA@CCppiDmaController@@IAAIPAX@Z|
  00050	e1a03000	 mov         r3, r0

; 2732 : 
; 2733 :         HdFree(pHd);

  00054	e1a00004	 mov         r0, r4
  00058	e1a01005	 mov         r1, r5
  0005c	e585302c	 str         r3, [r5, #0x2C]
  00060	eb000000	 bl          |?HdFree@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@PAU2@@Z|
  00064	e2855040	 add         r5, r5, #0x40
  00068	e2566001	 subs        r6, r6, #1
  0006c	1afffff3	 bne         |$LL3@HdPoolInit|
  00070		 |$LN1@HdPoolInit|

; 2734 : 
; 2735 :         DEBUGMSG(0 /*ZONE_INIT && ZONE_VERBOSE*/,
; 2736 :             (L"HD %04u: PAddr 0x%08x VAddr 0x%08x\r\n",
; 2737 :             n, pHd->addr, pHd));
; 2738 :     }
; 2739 : 
; 2740 :     PoolUnlock();

  00070	e2840f4b	 add         r0, r4, #0x4B, 30
  00074	eb000000	 bl          LeaveCriticalSection
  00078		 |$done$39878|

; 2741 : 
; 2742 : done:
; 2743 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 2744 :         (L"-CCppiDmaController::HdPoolInit: Allocated %u HDs\r\n",
; 2745 :         n));
; 2746 : }

  00078	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$M41281|

			 ENDP  ; |?HdPoolInit@CCppiDmaController@@IAAXXZ|, CCppiDmaController::HdPoolInit

	EXPORT	|?NextSegment@CCppiDmaChannel@@IAAXXZ|	; CCppiDmaChannel::NextSegment

  00000			 AREA	 |.pdata|, PDATA
|$T41352| DCD	|$LN68@NextSegmen|
	DCD	0x4000ad01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NextSegment@CCppiDmaChannel@@IAAXXZ| PROC ; CCppiDmaChannel::NextSegment

; 176  : {

  00000		 |$LN68@NextSegmen|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M41349|
  00004	e1a04000	 mov         r4, r0

; 177  :     DEBUGMSG(CPPI_DBG_CHAIN,
; 178  :         (L"+CCppiDmaChannel::NextSegment: %s Ch %u (EP %u/0x%02x/%u/%u)\r\n",
; 179  :         IsOut() ? L"OUT" : L"IN",
; 180  :         m_chNum,
; 181  :         m_epNum,
; 182  :         m_epAddr,
; 183  :         m_epType,
; 184  :         m_epMaxPkt));
; 185  : 
; 186  :     DEBUGCHK(m_nSegmentPending == 0);
; 187  :     DEBUGCHK(m_nSegmentFramesPending == 0);
; 188  :     DEBUGCHK(m_nMaxBD != 0);
; 189  : 
; 190  :     UINT32 nBytesLeft  = m_nTransferLength - m_nTransferComplete;
; 191  :     UINT32 nFramesLeft = m_nTransferFrames - m_nTransferFramesComplete;
; 192  :     UINT32 cmplQNum = IsOut() ? USB_CPPI_TXCMPL_QNUM_HOST : USB_CPPI_RXCMPL_QNUM_HOST;

  00008	e5942034	 ldr         r2, [r4, #0x34]
  0000c	e5945088	 ldr         r5, [r4, #0x88]
  00010	e5941098	 ldr         r1, [r4, #0x98]
  00014	e594e074	 ldr         lr, [r4, #0x74]
  00018	e594309c	 ldr         r3, [r4, #0x9C]
  0001c	e1b08002	 movs        r8, r2
  00020	13a0603f	 movne       r6, #0x3F
  00024	03a06041	 moveq       r6, #0x41
  00028	e0450001	 sub         r0, r5, r1

; 193  :     
; 194  :     DEBUGMSG(CPPI_DBG_CHAIN,
; 195  :         (L" CCppiDmaChannel::NextSegment: TransferLength %u, BytesLeft %u, FramesLeft %u\r\n",
; 196  :         m_nTransferLength,
; 197  :         nBytesLeft,
; 198  :         nFramesLeft));
; 199  : 
; 200  :     // ZLP packets are special cased
; 201  :     if (m_nTransferLength == 0)

  0002c	e3550000	 cmp         r5, #0
  00030	e04e1003	 sub         r1, lr, r3
  00034	1a00002b	 bne         |$LN25@NextSegmen|

; 202  :     {
; 203  :         // Only OUT direction please
; 204  :         DEBUGCHK(USB_ENDPOINT_DIRECTION_OUT(m_epAddr));
; 205  : 
; 206  :         HOST_DESCRIPTOR* pHd = m_pController->HdAlloc();

  00038	e594000c	 ldr         r0, [r4, #0xC]
  0003c	eb000000	 bl          |?HdAlloc@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@XZ|
  00040	e1b0e000	 movs        lr, r0

; 207  :         DEBUGCHK(pHd != NULL);
; 208  :         if (pHd == NULL)

  00044	0a000098	 beq         |$LN26@NextSegmen|
  00048	e3a03481	 mov         r3, #0x81, 8

; 209  :             return;
; 210  : 
; 211  :         /* Initialise the descriptor */
; 212  :         pHd->DescInfo    = (USB_CPPI41_DESC_TYPE_HOST   << USB_CPPI41_DESC_TYPE_SHIFT) |
; 213  :                            (((sizeof(*pHd) - 40) / 4)   << USB_CPPI41_DESC_WORDS_SHIFT) |
; 214  :                            0;

  0004c	e3833502	 orr         r3, r3, #2, 10

; 215  :         pHd->TagInfo     = 0;
; 216  :         pHd->PacketInfo  = (USB_CPPI41_PKT_TYPE_USB     << USB_CPPI41_PKT_TYPE_SHIFT) |
; 217  :                            (USB_CPPI41_PKT_RETPLCY_FULL << USB_CPPI41_PKT_RETPLCY_SHIFT) |
; 218  :                            (USB_CPPI41_DESC_LOC_OFFCHIP << USB_CPPI41_DESC_LOC_SHIFT) |
; 219  :                            (USB_CPPI_XXCMPL_QMGR        << USB_CPPI41_PKT_RETQMGR_SHIFT) |
; 220  :                            (cmplQNum                    << USB_CPPI41_PKT_RETQ_SHIFT);

  00050	e3860305	 orr         r0, r6, #5, 6
  00054	e3a05000	 mov         r5, #0
  00058	e88e0028	 stmia       lr, {r3, r5}
  0005c	e58e0008	 str         r0, [lr, #8]

; 221  :         pHd->BuffLen     = 0;

  00060	e58e500c	 str         r5, [lr, #0xC]

; 222  :         pHd->BuffPtr     = m_paBuffer.LowPart;

  00064	e5943028	 ldr         r3, [r4, #0x28]

; 223  :         pHd->NextPtr     = 0;
; 224  :         pHd->OrigBuffLen = pHd->BuffLen;

  00068	e58e5018	 str         r5, [lr, #0x18]

; 225  :         pHd->OrigBuffPtr = pHd->BuffPtr;
; 226  :         pHd->TagInfo2    = (/* isTx */ (m_fIsOut ? 1 : 0) << 9) |
; 227  :                            (/* Ch */ m_chNum << 4) |
; 228  :                            (/* EP */ m_epNum);
; 229  :         pHd->Index       = 0;
; 230  : 
; 231  :         // Special handling for ZLP TX - set length to 1 and set ZLP bit
; 232  :         if (m_fIsOut)

  0006c	e3a06001	 mov         r6, #1
  00070	e28ec010	 add         r12, lr, #0x10
  00074	e88c0028	 stmia       r12, {r3, r5}
  00078	e59e3010	 ldr         r3, [lr, #0x10]
  0007c	e58e301c	 str         r3, [lr, #0x1C]
  00080	e5943034	 ldr         r3, [r4, #0x34]
  00084	e5d4203d	 ldrb        r2, [r4, #0x3D]
  00088	e3530000	 cmp         r3, #0
  0008c	e5d4303c	 ldrb        r3, [r4, #0x3C]
  00090	13a01001	 movne       r1, #1
  00094	03a01000	 moveq       r1, #0
  00098	e1833281	 orr         r3, r3, r1, lsl #5
  0009c	e1823203	 orr         r3, r2, r3, lsl #4
  000a0	e58e3030	 str         r3, [lr, #0x30]
  000a4	e58e5034	 str         r5, [lr, #0x34]
  000a8	e5943034	 ldr         r3, [r4, #0x34]
  000ac	e3530000	 cmp         r3, #0
  000b0	13a03106	 movne       r3, #6, 2

; 233  :         {
; 234  :             pHd->PacketInfo |= USB_CPPI41_PKT_FLAGS_ZLP;
; 235  :             pHd->DescInfo |= 1;

  000b4	13833506	 orrne       r3, r3, #6, 10
  000b8	13802702	 orrne       r2, r0, #2, 14
  000bc	158e3000	 strne       r3, [lr]
  000c0	128ec008	 addne       r12, lr, #8
  000c4	188c0044	 stmneia     r12, {r2, r6}

; 236  :             pHd->BuffLen = 1;
; 237  :             pHd->OrigBuffLen = 1;
; 238  :         }
; 239  : 
; 240  :         DEBUGMSG(CPPI_DBG_CHAIN,
; 241  :             (L" CCppiDmaChannel::NextSegment: ZLP BD %u - Next 0x%08x, Buffer 0x%08x, Length %u\r\n",
; 242  :             0,
; 243  :             pHd->NextPtr,
; 244  :             pHd->BuffPtr,
; 245  :             pHd->BuffLen));
; 246  : 
; 247  :         m_nSegmentPending = 0;
; 248  :         m_nSegmentFramesPending = 1;
; 249  : 
; 250  :         QueuePush(pHd);

  000c8	e1a0200e	 mov         r2, lr
  000cc	158e6018	 strne       r6, [lr, #0x18]
  000d0	e5d4103e	 ldrb        r1, [r4, #0x3E]
  000d4	e594000c	 ldr         r0, [r4, #0xC]
  000d8	e58450a0	 str         r5, [r4, #0xA0]
  000dc	e58460a4	 str         r6, [r4, #0xA4]
  000e0	eb000000	 bl          |?QueuePush@CCppiDmaController@@IAAXEPAX@Z|

; 251  :     }
; 252  :     else

  000e4	ea00006e	 b           |$LN4@NextSegmen|
  000e8		 |$LN25@NextSegmen|

; 253  :     {
; 254  :         UINT32 i, paBuff, nLength, nThisBD;
; 255  : 
; 256  :         // Build descriptor chain based on transfer length and RNDIS switch.
; 257  : 
; 258  :         // Either virtual or physcal buffer must be supplied
; 259  :         DEBUGCHK(m_pvTransferBuffer || m_paTransferBuffer);
; 260  : 
; 261  :         if (IsIso())

  000e8	e5d43062	 ldrb        r3, [r4, #0x62]
  000ec	e3a05000	 mov         r5, #0
  000f0	e3530001	 cmp         r3, #1
  000f4	1a000026	 bne         |$LN21@NextSegmen|

; 262  :         {
; 263  :             m_nSegmentPending = 0;
; 264  :             m_nSegmentFramesPending = min(nFramesLeft, CPPI_MAX_DESCR);
; 265  : 
; 266  :             if (m_paTransferBuffer)

  000f8	e5943070	 ldr         r3, [r4, #0x70]
  000fc	e3510c01	 cmp         r1, #1, 24
  00100	23a01c01	 movcs       r1, #1, 24
  00104	e58410a4	 str         r1, [r4, #0xA4]
  00108	e1b0e003	 movs        lr, r3
  0010c	e58450a0	 str         r5, [r4, #0xA0]

; 267  :             {
; 268  :                 // For physical buffers the only limit is the number of
; 269  :                 // available descriptors
; 270  :                 for (i = 0; i < m_nSegmentFramesPending; i ++)

  00110	e3a00000	 mov         r0, #0
  00114	0a00000c	 beq         |$LN20@NextSegmen|
  00118	e3510000	 cmp         r1, #0
  0011c	0a000025	 beq         |$LN17@NextSegmen|
  00120	e5941078	 ldr         r1, [r4, #0x78]
  00124		 |$LL19@NextSegmen|

; 271  :                 {
; 272  :                     m_nSegmentPending += m_pTransferFrameLengths[i];

  00124	e4912004	 ldr         r2, [r1], #4
  00128	e59430a0	 ldr         r3, [r4, #0xA0]
  0012c	e2800001	 add         r0, r0, #1
  00130	e0823003	 add         r3, r2, r3
  00134	e58430a0	 str         r3, [r4, #0xA0]
  00138	e59430a4	 ldr         r3, [r4, #0xA4]
  0013c	e1500003	 cmp         r0, r3
  00140	3afffff7	 bcc         |$LL19@NextSegmen|

; 306  :             {
; 307  :                 paBuff = m_paTransferBuffer;

  00144	e1a0700e	 mov         r7, lr

; 308  :             }
; 309  :             else

  00148	ea000020	 b           |$LN9@NextSegmen|
  0014c		 |$LN20@NextSegmen|

; 273  :                 }
; 274  : 
; 275  :                 paBuff = m_paTransferBuffer;
; 276  :             }
; 277  :             else
; 278  :             {
; 279  :                 // For virtual buffers we are limited by both the
; 280  :                 // descriptors and the buffer size
; 281  :                 for (i = 0; i < m_nSegmentFramesPending; i ++)

  0014c	e3510000	 cmp         r1, #0
  00150	0a00001d	 beq         |$LN8@NextSegmen|
  00154	e5941078	 ldr         r1, [r4, #0x78]
  00158		 |$LL15@NextSegmen|

; 282  :                 {
; 283  :                     if ((m_nSegmentPending + m_pTransferFrameLengths[i]) > CPPI_MAX_BUFFER)

  00158	e5912000	 ldr         r2, [r1]
  0015c	e59430a0	 ldr         r3, [r4, #0xA0]
  00160	e0823003	 add         r3, r2, r3
  00164	e3530801	 cmp         r3, #1, 16
  00168	8a000006	 bhi         |$LN59@NextSegmen|

; 286  :                         break;
; 287  :                     }
; 288  : 
; 289  :                     m_nSegmentPending += m_pTransferFrameLengths[i];

  0016c	e58430a0	 str         r3, [r4, #0xA0]
  00170	e59430a4	 ldr         r3, [r4, #0xA4]
  00174	e2800001	 add         r0, r0, #1
  00178	e2811004	 add         r1, r1, #4
  0017c	e1500003	 cmp         r0, r3
  00180	3afffff4	 bcc         |$LL15@NextSegmen|

; 331  :             DEBUGCHK(pHd != NULL);
; 332  :             if (pHd == NULL)

  00184	ea000010	 b           |$LN8@NextSegmen|
  00188		 |$LN59@NextSegmen|

; 284  :                     {
; 285  :                         m_nSegmentFramesPending = i + 1;

  00188	e2803001	 add         r3, r0, #1
  0018c	e58430a4	 str         r3, [r4, #0xA4]

; 290  :                 }
; 291  : 
; 292  :                 paBuff = m_paBuffer.LowPart;
; 293  :             }
; 294  : 
; 295  :             DEBUGCHK(m_nSegmentPending > 0);
; 296  :         }
; 297  :         else

  00190	ea00000d	 b           |$LN8@NextSegmen|
  00194		 |$LN21@NextSegmen|

; 298  :         {
; 299  :             // For BULK and INTR perform single packet transfers.
; 300  :             // When RNDIS mode is in use this will be the entire transfer.
; 301  :             // For transparent mode we stop on short packets (RX) or stalls (RX/TX).
; 302  :             m_nSegmentFramesPending = 1;
; 303  :             m_nSegmentPending = min(nBytesLeft, m_nMaxBD);

  00194	e5943068	 ldr         r3, [r4, #0x68]
  00198	e3a02001	 mov         r2, #1
  0019c	e58420a4	 str         r2, [r4, #0xA4]
  001a0	e1500003	 cmp         r0, r3
  001a4	21a00003	 movcs       r0, r3

; 304  : 
; 305  :             if (m_paTransferBuffer)

  001a8	e5943070	 ldr         r3, [r4, #0x70]
  001ac	e58400a0	 str         r0, [r4, #0xA0]
  001b0	e1b0e003	 movs        lr, r3
  001b4	0a000001	 beq         |$LN10@NextSegmen|
  001b8		 |$LN17@NextSegmen|

; 306  :             {
; 307  :                 paBuff = m_paTransferBuffer;

  001b8	e1a0700e	 mov         r7, lr

; 308  :             }
; 309  :             else

  001bc	ea000003	 b           |$LN9@NextSegmen|
  001c0		 |$LN10@NextSegmen|

; 310  :             {
; 311  :                 // Limited by buffer size
; 312  :                 if (m_nSegmentPending > CPPI_MAX_BUFFER)

  001c0	e3500801	 cmp         r0, #1, 16

; 313  :                     m_nSegmentPending = CPPI_MAX_BUFFER;

  001c4	83a03801	 movhi       r3, #1, 16
  001c8	858430a0	 strhi       r3, [r4, #0xA0]
  001cc		 |$LN8@NextSegmen|

; 314  : 
; 315  :                 paBuff = m_paBuffer.LowPart;

  001cc	e5947028	 ldr         r7, [r4, #0x28]
  001d0		 |$LN9@NextSegmen|

; 316  :             }
; 317  : 
; 318  :             DEBUGCHK(m_nSegmentPending > 0);
; 319  :         }
; 320  : 
; 321  :         if (!m_paTransferBuffer && IsOut())

  001d0	e35e0000	 cmp         lr, #0
  001d4	1a000004	 bne         |$LN7@NextSegmen|
  001d8	e3580000	 cmp         r8, #0

; 322  :         {
; 323  :             memcpy(m_pvBuffer, m_pvTransferBuffer, m_nSegmentPending);

  001dc	159420a0	 ldrne       r2, [r4, #0xA0]
  001e0	1594106c	 ldrne       r1, [r4, #0x6C]
  001e4	15940024	 ldrne       r0, [r4, #0x24]
  001e8	1b000000	 blne        memcpy
  001ec		 |$LN7@NextSegmen|

; 324  :         }
; 325  : 
; 326  :         nLength = m_nSegmentPending;
; 327  : 
; 328  :         for (i = 0; i < m_nSegmentFramesPending; i ++)

  001ec	e59430a4	 ldr         r3, [r4, #0xA4]
  001f0	e59480a0	 ldr         r8, [r4, #0xA0]
  001f4	e3a09000	 mov         r9, #0
  001f8	e3530000	 cmp         r3, #0
  001fc	9a000028	 bls         |$LN4@NextSegmen|
  00200	e3a03481	 mov         r3, #0x81, 8
  00204	e383a502	 orr         r10, r3, #2, 10
  00208	e386b305	 orr         r11, r6, #5, 6
  0020c		 |$LL6@NextSegmen|

; 329  :         {
; 330  :             HOST_DESCRIPTOR* pHd = m_pController->HdAlloc();

  0020c	e594000c	 ldr         r0, [r4, #0xC]
  00210	eb000000	 bl          |?HdAlloc@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@XZ|
  00214	e1b0e000	 movs        lr, r0

; 331  :             DEBUGCHK(pHd != NULL);
; 332  :             if (pHd == NULL)

  00218	0a000023	 beq         |$LN26@NextSegmen|

; 333  :                 return;
; 334  : 
; 335  :             if (IsIso())

  0021c	e5d43062	 ldrb        r3, [r4, #0x62]
  00220	e3530001	 cmp         r3, #1

; 336  :             {
; 337  :                 nThisBD = m_pTransferFrameLengths[i];

  00224	05943078	 ldreq       r3, [r4, #0x78]
  00228	07936109	 ldreq       r6, [r3, +r9, lsl #2]
  0022c	0a000002	 beq         |$LN37@NextSegmen|

; 338  :             }
; 339  :             else
; 340  :             {
; 341  :                 nThisBD = min(m_nMaxBD, nLength);

  00230	e5946068	 ldr         r6, [r4, #0x68]
  00234	e1560008	 cmp         r6, r8
  00238	21a06008	 movcs       r6, r8
  0023c		 |$LN37@NextSegmen|

; 342  :             }
; 343  : 
; 344  :             nLength -= nThisBD;
; 345  : 
; 346  :             /* Initialise the descriptor */
; 347  :             pHd->DescInfo    = (USB_CPPI41_DESC_TYPE_HOST   << USB_CPPI41_DESC_TYPE_SHIFT) |
; 348  :                                (((sizeof(*pHd) - 40) / 4)   << USB_CPPI41_DESC_WORDS_SHIFT) |
; 349  :                                nThisBD;

  0023c	e186300a	 orr         r3, r6, r10
  00240	e88e0828	 stmia       lr, {r3, r5, r11}

; 350  :             pHd->TagInfo     = 0;
; 351  :             pHd->PacketInfo  = (USB_CPPI41_PKT_TYPE_USB     << USB_CPPI41_PKT_TYPE_SHIFT) |
; 352  :                                (USB_CPPI41_PKT_RETPLCY_FULL << USB_CPPI41_PKT_RETPLCY_SHIFT) |
; 353  :                                (USB_CPPI41_DESC_LOC_OFFCHIP << USB_CPPI41_DESC_LOC_SHIFT) |
; 354  :                                (USB_CPPI_XXCMPL_QMGR        << USB_CPPI41_PKT_RETQMGR_SHIFT) |
; 355  :                                (cmplQNum                    << USB_CPPI41_PKT_RETQ_SHIFT);
; 356  :             pHd->BuffLen     = nThisBD;

  00244	e28ec00c	 add         r12, lr, #0xC
  00248	e88c00c0	 stmia       r12, {r6, r7}

; 357  :             pHd->BuffPtr     = paBuff;
; 358  :             pHd->NextPtr     = 0;

  0024c	e28ec014	 add         r12, lr, #0x14
  00250	e88c00e0	 stmia       r12, {r5 - r7}

; 359  :             pHd->OrigBuffLen = pHd->BuffLen;
; 360  :             pHd->OrigBuffPtr = pHd->BuffPtr;
; 361  :             pHd->TagInfo2    = (/* isTx */ (m_fIsOut ? 1 : 0) << 9) |
; 362  :                                (/* Ch */ m_chNum << 4) |
; 363  :                                (/* EP */ m_epNum);

  00254	e5943034	 ldr         r3, [r4, #0x34]
  00258	e5d4203d	 ldrb        r2, [r4, #0x3D]
  0025c	e0488006	 sub         r8, r8, r6
  00260	e3530000	 cmp         r3, #0
  00264	e5d4303c	 ldrb        r3, [r4, #0x3C]
  00268	13a01001	 movne       r1, #1
  0026c	03a01000	 moveq       r1, #0

; 364  :             pHd->Index       = 0;

  00270	e1833281	 orr         r3, r3, r1, lsl #5
  00274	e1823203	 orr         r3, r2, r3, lsl #4
  00278	e58e3030	 str         r3, [lr, #0x30]
  0027c	e58e5034	 str         r5, [lr, #0x34]

; 365  : 
; 366  :             DEBUGMSG(CPPI_DBG_CHAIN,
; 367  :                 (L" CCppiDmaChannel::NextSegment: BD %u - Next 0x%08x, Buffer 0x%08x, Length %u\r\n",
; 368  :                 i,
; 369  :                 pHd->NextPtr,
; 370  :                 pHd->BuffPtr,
; 371  :                 pHd->BuffLen));
; 372  : 
; 373  :             QueuePush(pHd);

  00280	e5d4103e	 ldrb        r1, [r4, #0x3E]
  00284	e594000c	 ldr         r0, [r4, #0xC]
  00288	e1a0200e	 mov         r2, lr
  0028c	eb000000	 bl          |?QueuePush@CCppiDmaController@@IAAXEPAX@Z|
  00290	e59430a4	 ldr         r3, [r4, #0xA4]
  00294	e2899001	 add         r9, r9, #1

; 374  : 
; 375  :             paBuff += nThisBD;

  00298	e0877006	 add         r7, r7, r6
  0029c	e1590003	 cmp         r9, r3
  002a0	3affffd9	 bcc         |$LL6@NextSegmen|
  002a4		 |$LN4@NextSegmen|

; 376  :         }
; 377  : 
; 378  :         DEBUGCHK(nLength == 0);
; 379  :     }
; 380  : 
; 381  :     m_nSegmentFramesComplete = 0;

  002a4	e58450a8	 str         r5, [r4, #0xA8]

; 382  :     m_nSegmentComplete = 0;

  002a8	e58450ac	 str         r5, [r4, #0xAC]
  002ac		 |$LN26@NextSegmen|

; 383  : 
; 384  :     DEBUGCHK(m_nSegmentFramesPending > 0);
; 385  : 
; 386  :     DEBUGMSG(CPPI_DBG_CHAIN,
; 387  :         (L"-CCppiDmaChannel::NextSegment: %u BDs in the chain\r\n",
; 388  :         m_nSegmentFramesPending));
; 389  : }

  002ac	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  002b0	e12fff1e	 bx          lr
  002b4		 |$M41350|

			 ENDP  ; |?NextSegment@CCppiDmaChannel@@IAAXXZ|, CCppiDmaChannel::NextSegment

	EXPORT	|?ScheduleTransfer@CCppiDmaRxChannel@@QAAHXZ| ; CCppiDmaRxChannel::ScheduleTransfer
	EXPORT	|??_C@_1LO@LLBCIHNB@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn@| [ DATA ] ; `string'
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T41375| DCD	|$LN19@ScheduleTr|
	DCD	0x40003b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LO@LLBCIHNB@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "R", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "S", 0x0, "c", 0x0, "h", 0x0, "e", 0x0, "d"
	DCB	0x0, "u", 0x0, "l", 0x0, "e", 0x0, "T", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":"
	DCB	0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, ",", 0x0, " "
	DCB	0x0, "p", 0x0, "v", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "l", 0x0, "e"
	DCB	0x0, "n", 0x0, "g", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ScheduleTransfer@CCppiDmaRxChannel@@QAAHXZ| PROC ; CCppiDmaRxChannel::ScheduleTransfer

; 1072 : {

  00000		 |$LN19@ScheduleTr|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M41372|
  00004	e1a04000	 mov         r4, r0

; 1073 :     DEBUGMSG(CPPI_DBG_RX || ZONE_VERBOSE,
; 1074 :         (L"+CCppiDmaRxChannel::ScheduleTransfer: %s Ch %u (EP %u)\r\n",
; 1075 :         IsOut() ? L"OUT" : L"IN",
; 1076 :         m_chNum,
; 1077 :         m_epNum));
; 1078 : 
; 1079 :     if (!m_nTransferLength || (!m_pvTransferBuffer && !m_paTransferBuffer))

  00008	e5943088	 ldr         r3, [r4, #0x88]
  0000c	e1b0e003	 movs        lr, r3
  00010	0a00002b	 beq         |$LN6@ScheduleTr|
  00014	e594306c	 ldr         r3, [r4, #0x6C]
  00018	e3530000	 cmp         r3, #0
  0001c	1a000002	 bne         |$LN7@ScheduleTr|
  00020	e5943070	 ldr         r3, [r4, #0x70]
  00024	e3530000	 cmp         r3, #0
  00028	0a000025	 beq         |$LN6@ScheduleTr|
  0002c		 |$LN7@ScheduleTr|

; 1088 :     }
; 1089 : 
; 1090 :     DEBUGCHK(m_nSegmentPending == 0);
; 1091 :     DEBUGCHK(m_nSegmentFramesPending == 0);
; 1092 : 
; 1093 :     // A channel that has been torn down must be re-enabled before re-use
; 1094 :     if ((m_pCppiChannelRegs->RXGCR & BIT31) == 0)

  0002c	e594201c	 ldr         r2, [r4, #0x1C]

; 1095 :         m_pCppiChannelRegs->RXGCR =
; 1096 :             BIT31 | /* Enable */
; 1097 :             BIT24 | /* Retry on starvation */
; 1098 :             BIT14 | /* Host descriptor type (default) */ /*
; 1099 :             qmgr |
; 1100 :             qnum? */ USB_CPPI_RXCMPL_QNUM_HOST;
; 1101 : 
; 1102 :     // See if we can use AUTOREQ mode
; 1103 :     UINT32 nAutoreqMask = 0;
; 1104 :     if (IsRndisMode())

  00030	e3a0e000	 mov         lr, #0

; 1105 :     {
; 1106 :         // In RNDIS mode we can use autoreq for all packets by using the "all but EOP" option.
; 1107 :         nAutoreqMask = (0x1 << (m_chNum * 2));
; 1108 :     }
; 1109 : 
; 1110 :     // Update Autoreq reg
; 1111 :     UINT32 nAutoreq = m_pUsbRegs->AUTOREQR & ~(0x3 << (m_chNum * 2));

  00034	e3a05003	 mov         r5, #3
  00038	e5923008	 ldr         r3, [r2, #8]

; 1112 :     nAutoreq |= nAutoreqMask;
; 1113 :     m_pUsbRegs->AUTOREQR = nAutoreq;
; 1114 : 
; 1115 :     // Create HDs for next segment
; 1116 :     NextSegment();

  0003c	e1a00004	 mov         r0, r4
  00040	e3130102	 tst         r3, #2, 2
  00044	059f309c	 ldreq       r3, [pc, #0x9C]
  00048	05823008	 streq       r3, [r2, #8]
  0004c	e59430b0	 ldr         r3, [r4, #0xB0]
  00050	e5941010	 ldr         r1, [r4, #0x10]
  00054	e3530000	 cmp         r3, #0
  00058	15d4303c	 ldrneb      r3, [r4, #0x3C]
  0005c	13a02001	 movne       r2, #1
  00060	11a03083	 movne       r3, r3, lsl #1
  00064	11a0e312	 movne       lr, r2, lsl r3
  00068	e5d4303c	 ldrb        r3, [r4, #0x3C]
  0006c	e5912014	 ldr         r2, [r1, #0x14]
  00070	e1a03083	 mov         r3, r3, lsl #1
  00074	e1c23315	 bic         r3, r2, r5, lsl r3
  00078	e183300e	 orr         r3, r3, lr
  0007c	e5813014	 str         r3, [r1, #0x14]
  00080	eb000000	 bl          |?NextSegment@CCppiDmaChannel@@IAAXXZ|

; 1117 : 
; 1118 :     // Enable DMA mode, trigger IN token
; 1119 :     UINT16 nCsr = MGC_M_RXCSR_DMAENAB | MGC_M_RXCSR_H_REQPKT;
; 1120 : 
; 1121 :     if (m_nTransferComplete == 0)

  00084	e5943098	 ldr         r3, [r4, #0x98]
  00088	e3a02a02	 mov         r2, #2, 20
  0008c	e3822020	 orr         r2, r2, #0x20
  00090	e3530000	 cmp         r3, #0
  00094	1a000005	 bne         |$LN1@ScheduleTr|

; 1122 :     {
; 1123 :         if (m_nTransferOptions & USB_TOGGLE_CARRY)

  00098	e594308c	 ldr         r3, [r4, #0x8C]
  0009c	e3130102	 tst         r3, #2, 2
  000a0	13a03c26	 movne       r3, #0x26, 24

; 1124 :             nCsr |= (MGC_M_RXCSR_H_WR_DATATOGGLE | MGC_M_RXCSR_H_DATATOGGLE);

  000a4	13832020	 orrne       r2, r3, #0x20

; 1125 :         else

  000a8	03a03a02	 moveq       r3, #2, 20

; 1126 :             nCsr |= MGC_M_RXCSR_CLRDATATOG;

  000ac	038320a0	 orreq       r2, r3, #0xA0
  000b0		 |$LN1@ScheduleTr|

; 1127 :     }
; 1128 : 
; 1129 :     m_pUsbEpcsrRegs->RXCSR = nCsr;

  000b0	e5943014	 ldr         r3, [r4, #0x14]

; 1130 : 
; 1131 :     DEBUGMSG(CPPI_DBG_RX || ZONE_VERBOSE,
; 1132 :         (L"-CCppiDmaRxChannel::ScheduleTransfer\r\n"));
; 1133 : 
; 1134 :     return TRUE;

  000b4	e3a00001	 mov         r0, #1
  000b8	e1c320b6	 strh        r2, [r3, #6]

; 1135 : }

  000bc	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000c0	e12fff1e	 bx          lr
  000c4		 |$LN6@ScheduleTr|

; 1080 :     {
; 1081 :         RETAILMSG(CPPI_DBG_ERROR,
; 1082 :             (L" CCppiDmaRxChannel::ScheduleTransfer: ERROR - Invalid state, pv 0x%08x, pa 0x%08x, length %u\r\n",
; 1083 :             m_pvTransferBuffer,
; 1084 :             m_paTransferBuffer,
; 1085 :             m_nTransferLength));

  000c4	e5942070	 ldr         r2, [r4, #0x70]
  000c8	e594106c	 ldr         r1, [r4, #0x6C]
  000cc	e59f0010	 ldr         r0, [pc, #0x10]
  000d0	e1a0300e	 mov         r3, lr
  000d4	eb000000	 bl          NKDbgPrintfW

; 1086 : 
; 1087 :         return FALSE;

  000d8	e3a00000	 mov         r0, #0

; 1135 : }

  000dc	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000e0	e12fff1e	 bx          lr
  000e4		 |$LN20@ScheduleTr|
  000e4		 |$LN21@ScheduleTr|
  000e4	00000000	 DCD         |??_C@_1LO@LLBCIHNB@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn@|
  000e8		 |$LN22@ScheduleTr|
  000e8	81004041	 DCD         0x81004041
  000ec		 |$M41373|

			 ENDP  ; |?ScheduleTransfer@CCppiDmaRxChannel@@QAAHXZ|, CCppiDmaRxChannel::ScheduleTransfer

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T41434| DCD	|$LN52@ProcessCom@3|
	DCD	0x40007e02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ProcessCompletedPacket@CCppiDmaRxChannel@@UAAXPAU_HOST_DESCRIPTOR@@@Z| PROC ; CCppiDmaRxChannel::ProcessCompletedPacket

; 1195 : {

  00000		 |$LN52@ProcessCom@3|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M41431|
  00008	e1b07001	 movs        r7, r1
  0000c	e1a04000	 mov         r4, r0

; 1196 :     BOOL fTransferComplete = FALSE;

  00010	e3a06000	 mov         r6, #0

; 1197 :     BOOL fSegmentComplete = FALSE;

  00014	e3a05000	 mov         r5, #0

; 1198 :     UINT32 nStatus = USB_NO_ERROR;

  00018	e3a08000	 mov         r8, #0

; 1199 :     UINT32 nTransferred = 0;
; 1200 :     UINT16 nCsr;
; 1201 : 
; 1202 :     DEBUGMSG(CPPI_DBG_RX || ZONE_VERBOSE,
; 1203 :         (L"+CCppiDmaRxChannel::ProcessCompletedPacket: %s Ch %u (EP %u)\r\n",
; 1204 :         m_fIsOut ? L"OUT" : L"IN",
; 1205 :         m_chNum,
; 1206 :         m_epNum));
; 1207 : 
; 1208 :     if (pHd == NULL) {

  0001c	0a000072	 beq         |$LN44@ProcessCom@3|

; 1209 :         DEBUGMSG(ZONE_WARNING,
; 1210 :             (L"-CCppiDmaRxChannel::ProcessCompletedPacket: ERROR - NULL HD\r\n"));
; 1211 :         return;
; 1212 :     }
; 1213 : 
; 1214 :     if (pHd->NextPtr != 0) {
; 1215 :         DEBUGMSG(ZONE_WARNING,
; 1216 :             (L" CCppiDmaRxChannel::ProcessCompletedPacket: WARNING - Linked HD\r\n"));
; 1217 :     }
; 1218 : 
; 1219 :     if (m_fIsTeardownPending) {

  00020	e5943038	 ldr         r3, [r4, #0x38]
  00024	e3530000	 cmp         r3, #0
  00028	0a000003	 beq         |$LN19@ProcessCom@3|

; 1220 :         DEBUGMSG(ZONE_WARNING,
; 1221 :             (L"-CCppiDmaRxChannel::ProcessCompletedPacket: WARNING - Dropped (pending teardown)\r\n"));
; 1222 :         // Free the HD
; 1223 :         m_pController->HdFree(pHd);

  0002c	e594000c	 ldr         r0, [r4, #0xC]
  00030	e1a01007	 mov         r1, r7
  00034	eb000000	 bl          |?HdFree@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@PAU2@@Z|

; 1224 :         return;

  00038	ea00006b	 b           |$LN44@ProcessCom@3|
  0003c		 |$LN19@ProcessCom@3|

; 1225 :     }
; 1226 : 
; 1227 :     ChLock();

  0003c	e2840044	 add         r0, r4, #0x44
  00040	eb000000	 bl          EnterCriticalSection

; 1228 : 
; 1229 :     if (!IsInUse()) {

  00044	e5943074	 ldr         r3, [r4, #0x74]
  00048	e3530000	 cmp         r3, #0
  0004c	9a000061	 bls         |$_done$39352|

; 1230 :         DEBUGMSG(ZONE_WARNING,
; 1231 :             (L"-CCppiDmaRxChannel::ProcessCompletedPacket: WARNING - Dropped (transfer cancelled)\r\n"));
; 1232 :         goto _done;
; 1233 :     }
; 1234 : 
; 1235 :     if (!ValidateTransferState())

  00050	e5943000	 ldr         r3, [r4]
  00054	e1a00004	 mov         r0, r4
  00058	e593300c	 ldr         r3, [r3, #0xC]
  0005c	e1a0e00f	 mov         lr, pc
  00060	e12fff13	 bx          r3
  00064	e3500000	 cmp         r0, #0
  00068	0a00005a	 beq         |$_done$39352|

; 1236 :         goto _done;
; 1237 : 
; 1238 :     // Some extra debug validation
; 1239 :     DEBUGCHK(m_pvTransferBuffer || m_paTransferBuffer);
; 1240 :     DEBUGCHK(m_nTransferLength > 0);
; 1241 :     DEBUGCHK(m_nSegmentPending > 0);
; 1242 :     DEBUGCHK(m_nSegmentComplete < m_nSegmentPending);
; 1243 :     DEBUGCHK(m_nSegmentFramesComplete < m_nSegmentFramesPending);
; 1244 : 
; 1245 :     // Count the frames in this packet (and their sizes)
; 1246 :     m_nSegmentFramesComplete++;

  0006c	e59430a8	 ldr         r3, [r4, #0xA8]
  00070	e3e024ff	 mvn         r2, #0xFF, 8

; 1247 :     nTransferred = pHd->BuffLen & USB_CPPI41_HD_BUF_LENGTH_MASK;

  00074	e2221503	 eor         r1, r2, #3, 10
  00078	e2830001	 add         r0, r3, #1
  0007c	e58400a8	 str         r0, [r4, #0xA8]
  00080	e597300c	 ldr         r3, [r7, #0xC]

; 1248 : 
; 1249 :     // Check for zero length packet
; 1250 :     if (pHd->PacketInfo & USB_CPPI41_PKT_FLAGS_ZLP)

  00084	e5972008	 ldr         r2, [r7, #8]
  00088	e0031001	 and         r1, r3, r1

; 1251 :         nTransferred = 0;
; 1252 : 
; 1253 :     m_nSegmentComplete += nTransferred;

  0008c	e59430ac	 ldr         r3, [r4, #0xAC]
  00090	e3120702	 tst         r2, #2, 14

; 1254 : 
; 1255 :     DEBUGMSG(CPPI_DBG_RX,
; 1256 :              (L" CCppiDmaRxChannel::ProcessCompletedPacket: Packet %u (of %u), bytes %u\r\n",
; 1257 :               m_nSegmentFramesComplete,
; 1258 :               m_nSegmentFramesPending,
; 1259 :               nTransferred));
; 1260 : 
; 1261 :     if (IsIso())

  00094	e5d42062	 ldrb        r2, [r4, #0x62]
  00098	13a01000	 movne       r1, #0
  0009c	e0833001	 add         r3, r3, r1
  000a0	e3520001	 cmp         r2, #1
  000a4	e58430ac	 str         r3, [r4, #0xAC]

; 1262 :     {
; 1263 :         // Store the actual frame length for ISO
; 1264 :         m_pTransferFrameLengthsActual[m_nSegmentFramesComplete-1] = nTransferred;

  000a8	0594307c	 ldreq       r3, [r4, #0x7C]
  000ac	00833100	 addeq       r3, r3, r0, lsl #2
  000b0	05031004	 streq       r1, [r3, #-4]

; 1265 :     }
; 1266 : 
; 1267 :     // Check for segment complete
; 1268 :     if (IsRndisMode())

  000b4	e59430b0	 ldr         r3, [r4, #0xB0]
  000b8	e3530000	 cmp         r3, #0

; 1269 :     {
; 1270 :         // In Rndis mode, there is only one BD so segment has completed
; 1271 :         fSegmentComplete = TRUE;
; 1272 :     }
; 1273 :     else // Transparent mode

  000bc	1a000014	 bne         |$LN49@ProcessCom@3|

; 1274 :     {
; 1275 :         // Check for short packet. Isochronous endpoints handled elsewhere.
; 1276 :         if (!IsIso() && (nTransferred < m_epMaxPkt))

  000c0	e5d43062	 ldrb        r3, [r4, #0x62]
  000c4	e3530001	 cmp         r3, #1
  000c8	0a00000d	 beq         |$LN10@ProcessCom@3|
  000cc	e1d406b4	 ldrh        r0, [r4, #0x64]
  000d0	e1510000	 cmp         r1, r0
  000d4	2a00000a	 bcs         |$LN10@ProcessCom@3|

; 1277 :         {
; 1278 :             fSegmentComplete = TRUE;
; 1279 :             fTransferComplete = TRUE;
; 1280 :             if (((m_nTransferLength % (UINT32)m_epMaxPkt) == 0) &&
; 1281 :                 ((m_nTransferOptions & USB_SHORT_TRANSFER_OK) == 0))

  000d8	e5941088	 ldr         r1, [r4, #0x88]
  000dc	e3a05001	 mov         r5, #1
  000e0	e3a06001	 mov         r6, #1
  000e4	eb000000	 bl          __rt_udiv
  000e8	e3510000	 cmp         r1, #0
  000ec	1a000009	 bne         |$LN7@ProcessCom@3|
  000f0	e594308c	 ldr         r3, [r4, #0x8C]
  000f4	e3130c02	 tst         r3, #2, 24
  000f8	1a000006	 bne         |$LN7@ProcessCom@3|

; 1282 :             {
; 1283 :                 // Indicate underrun error if short packets are not accepted
; 1284 :                 nStatus = USB_DATA_UNDERRUN_ERROR;

  000fc	e3a08009	 mov         r8, #9

; 1285 :             }
; 1286 :         }
; 1287 :         else

  00100	ea000004	 b           |$LN7@ProcessCom@3|
  00104		 |$LN10@ProcessCom@3|

; 1288 :         {
; 1289 :             // Check to see if the segment is complete because
; 1290 :             // all the expected frames have been received
; 1291 :             if (m_nSegmentFramesComplete == m_nSegmentFramesPending)

  00104	e59420a8	 ldr         r2, [r4, #0xA8]
  00108	e59430a4	 ldr         r3, [r4, #0xA4]
  0010c	e1520003	 cmp         r2, r3
  00110	1a000000	 bne         |$LN7@ProcessCom@3|
  00114		 |$LN49@ProcessCom@3|

; 1292 :             {
; 1293 :                 fSegmentComplete = TRUE;

  00114	e3a05001	 mov         r5, #1
  00118		 |$LN7@ProcessCom@3|

; 1294 :             }
; 1295 :         }
; 1296 :     }        
; 1297 : 
; 1298 :     // Check for transfer complete
; 1299 :     if ((m_nTransferFramesComplete + m_nSegmentFramesComplete) == m_nTransferFrames)

  00118	e59410a8	 ldr         r1, [r4, #0xA8]
  0011c	e594309c	 ldr         r3, [r4, #0x9C]
  00120	e5942074	 ldr         r2, [r4, #0x74]
  00124	e0813003	 add         r3, r1, r3
  00128	e1530002	 cmp         r3, r2

; 1300 :     {
; 1301 :         // Finished transfer
; 1302 :         fTransferComplete = TRUE;

  0012c	03a06001	 moveq       r6, #1

; 1303 :     }
; 1304 : 
; 1305 :     DEBUGMSG(CPPI_DBG_RX,
; 1306 :         (L" CCppiDmaRxChannel::ProcessCompletedPacket: Received %u/%u, %u/%u (%u of %u frames)\r\n",
; 1307 :         m_nSegmentComplete,
; 1308 :         m_nSegmentPending,
; 1309 :         m_nTransferComplete,
; 1310 :         m_nTransferLength,
; 1311 :         m_nSegmentFramesComplete,
; 1312 :         m_nSegmentFramesPending));
; 1313 : 
; 1314 :     if (fSegmentComplete)

  00130	e3550000	 cmp         r5, #0
  00134	0a000023	 beq         |$LN5@ProcessCom@3|

; 1315 :     {
; 1316 :         nCsr = m_pUsbEpcsrRegs->RXCSR;

  00138	e5943014	 ldr         r3, [r4, #0x14]

; 1317 : 
; 1318 :         // Turn things off and clear sticky bits
; 1319 :         m_pUsbEpcsrRegs->RXCSR =
; 1320 :             MGC_M_RXCSR_H_RXSTALL |
; 1321 :             MGC_M_RXCSR_H_ERROR |
; 1322 :             MGC_M_RXCSR_DATAERROR |
; 1323 :             MGC_M_RXCSR_RXPKTRDY;

  0013c	e3a0204d	 mov         r2, #0x4D

; 1324 : 
; 1325 :         // Update user buffer
; 1326 :         ReleaseSegment();

  00140	e1a00004	 mov         r0, r4
  00144	e1d350b6	 ldrh        r5, [r3, #6]
  00148	e1c320b6	 strh        r2, [r3, #6]
  0014c	eb000000	 bl          |?ReleaseSegment@CCppiDmaChannel@@IAAXXZ|

; 1327 : 
; 1328 :         if (fTransferComplete)

  00150	e3560000	 cmp         r6, #0
  00154	0a000018	 beq         |$LN4@ProcessCom@3|

; 1329 :         {
; 1330 :             DEBUGMSG(CPPI_DBG_RX,
; 1331 :                 (L" CCppiDmaRxChannel::ProcessCompletedPacket: Completed %u/%u, status %x\r\n",
; 1332 :                 m_nTransferComplete,
; 1333 :                 m_nTransferLength,
; 1334 :                 nStatus));
; 1335 : 
; 1336 :             // Let the client know the transfer has been completed
; 1337 :             if (m_pCallback)

  00158	e5943040	 ldr         r3, [r4, #0x40]
  0015c	e1b06003	 movs        r6, r3
  00160	0a00001c	 beq         |$_done$39352|

; 1338 :             {
; 1339 :                 // Save information for the callback below, before cleaning-up
; 1340 :                 UINT32 nTransferLength = m_nTransferLength;
; 1341 :                 UINT32 nTransferComplete = m_nTransferComplete;
; 1342 : 
; 1343 :                 // Cleanup *before* the callback (to prevent IssueTransfer calls while
; 1344 :                 // m_nTransferLength and m_nTransferFrames are still non-zero)
; 1345 :                 m_pvTransferBuffer = NULL;
; 1346 :                 m_paTransferBuffer = 0;
; 1347 :                 m_nTransferLength = 0;
; 1348 :                 m_nTransferFrames = 0;
; 1349 :                 m_nSegmentPending = 0;
; 1350 :                 m_nSegmentFramesPending = 0;
; 1351 : 
; 1352 :                 // Let the client know the transfer has been completed
; 1353 :                 m_pCallback(
; 1354 :                     this,
; 1355 :                     nStatus,
; 1356 :                     nTransferLength,
; 1357 :                     nTransferComplete,
; 1358 :                     (nCsr & MGC_M_RXCSR_H_DATATOGGLE) ? USB_TOGGLE_CARRY : 0,
; 1359 :                     m_pTransferCookie1,
; 1360 :                     m_pTransferCookie2);

  00164	e5940094	 ldr         r0, [r4, #0x94]
  00168	e594e090	 ldr         lr, [r4, #0x90]
  0016c	e3150c02	 tst         r5, #2, 24
  00170	e5942088	 ldr         r2, [r4, #0x88]
  00174	13a05102	 movne       r5, #2, 2
  00178	e3a03000	 mov         r3, #0
  0017c	03a05000	 moveq       r5, #0
  00180	e58d0008	 str         r0, [sp, #8]
  00184	e584306c	 str         r3, [r4, #0x6C]
  00188	e5843070	 str         r3, [r4, #0x70]
  0018c	e5843088	 str         r3, [r4, #0x88]
  00190	e5843074	 str         r3, [r4, #0x74]
  00194	e58430a0	 str         r3, [r4, #0xA0]
  00198	e58430a4	 str         r3, [r4, #0xA4]
  0019c	e5943098	 ldr         r3, [r4, #0x98]
  001a0	e1a00004	 mov         r0, r4
  001a4	e58d5000	 str         r5, [sp]
  001a8	e58de004	 str         lr, [sp, #4]
  001ac	e1a01008	 mov         r1, r8
  001b0	e1a0e00f	 mov         lr, pc
  001b4	e12fff16	 bx          r6

; 1361 :             }
; 1362 :         }
; 1363 :         else

  001b8	ea000006	 b           |$_done$39352|
  001bc		 |$LN4@ProcessCom@3|

; 1364 :         {
; 1365 :             // Schedule next transfer
; 1366 :             ScheduleTransfer();

  001bc	e1a00004	 mov         r0, r4
  001c0	eb000000	 bl          |?ScheduleTransfer@CCppiDmaRxChannel@@QAAHXZ|

; 1367 :         }
; 1368 :     }
; 1369 :     else

  001c4	ea000003	 b           |$_done$39352|
  001c8		 |$LN5@ProcessCom@3|

; 1370 :     {
; 1371 :         // Trigger next IN token
; 1372 :         m_pUsbEpcsrRegs->RXCSR =
; 1373 :             MGC_M_RXCSR_DMAENAB |
; 1374 :             MGC_M_RXCSR_H_REQPKT;

  001c8	e5942014	 ldr         r2, [r4, #0x14]
  001cc	e3a03a02	 mov         r3, #2, 20
  001d0	e3833020	 orr         r3, r3, #0x20
  001d4	e1c230b6	 strh        r3, [r2, #6]
  001d8		 |$_done$39352|

; 1375 :     }
; 1376 : 
; 1377 : _done:
; 1378 :     // Free the HD
; 1379 :     m_pController->HdFree(pHd);

  001d8	e594000c	 ldr         r0, [r4, #0xC]
  001dc	e1a01007	 mov         r1, r7
  001e0	eb000000	 bl          |?HdFree@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@PAU2@@Z|

; 1380 : 
; 1381 :     ChUnlock();

  001e4	e2840044	 add         r0, r4, #0x44
  001e8	eb000000	 bl          LeaveCriticalSection
  001ec		 |$LN44@ProcessCom@3|

; 1382 : 
; 1383 :     DEBUGMSG(CPPI_DBG_RX || ZONE_VERBOSE,
; 1384 :         (L"-CCppiDmaRxChannel::ProcessCompletedPacket\r\n"));
; 1385 : }

  001ec	e28dd00c	 add         sp, sp, #0xC
  001f0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  001f4	e12fff1e	 bx          lr
  001f8		 |$M41432|

			 ENDP  ; |?ProcessCompletedPacket@CCppiDmaRxChannel@@UAAXPAU_HOST_DESCRIPTOR@@@Z|, CCppiDmaRxChannel::ProcessCompletedPacket

	EXPORT	|?ScheduleTransfer@CCppiDmaTxChannel@@QAAHXZ| ; CCppiDmaTxChannel::ScheduleTransfer
	EXPORT	|??_C@_1LO@PFNMHGPK@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T41447| DCD	|$LN13@ScheduleTr@2|
	DCD	0x40002501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LO@PFNMHGPK@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "T", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "S", 0x0, "c", 0x0, "h", 0x0, "e", 0x0, "d"
	DCB	0x0, "u", 0x0, "l", 0x0, "e", 0x0, "T", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":"
	DCB	0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, ",", 0x0, " "
	DCB	0x0, "p", 0x0, "v", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "l", 0x0, "e"
	DCB	0x0, "n", 0x0, "g", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ScheduleTransfer@CCppiDmaTxChannel@@QAAHXZ| PROC ; CCppiDmaTxChannel::ScheduleTransfer

; 1788 : {

  00000		 |$LN13@ScheduleTr@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41444|

; 1789 :     DEBUGMSG(CPPI_DBG_TX || ZONE_VERBOSE,
; 1790 :         (L"+CCppiDmaTxChannel::ScheduleTransfer: %s Ch %u (EP %u)\r\n",
; 1791 :         IsOut() ? L"OUT" : L"IN",
; 1792 :         m_chNum,
; 1793 :         m_epNum));
; 1794 : 
; 1795 :     if (m_nTransferLength)

  00004	e5903088	 ldr         r3, [r0, #0x88]
  00008	e3530000	 cmp         r3, #0
  0000c	0a00000c	 beq         |$LN5@ScheduleTr@2|

; 1796 :     {
; 1797 :         if (!m_pvTransferBuffer && !m_paTransferBuffer)

  00010	e590206c	 ldr         r2, [r0, #0x6C]
  00014	e3520000	 cmp         r2, #0
  00018	1a000009	 bne         |$LN5@ScheduleTr@2|
  0001c	e5902070	 ldr         r2, [r0, #0x70]
  00020	e3520000	 cmp         r2, #0
  00024	1a000006	 bne         |$LN5@ScheduleTr@2|

; 1798 :         {
; 1799 :             RETAILMSG(CPPI_DBG_ERROR,
; 1800 :                 (L" CCppiDmaTxChannel::ScheduleTransfer: ERROR - Invalid state, pv 0x%08x, pa 0x%08x, length %u\r\n",
; 1801 :                 m_pvTransferBuffer,
; 1802 :                 m_paTransferBuffer,
; 1803 :                 m_nTransferLength));

  00028	e59f0060	 ldr         r0, [pc, #0x60]
  0002c	e3a02000	 mov         r2, #0
  00030	e3a01000	 mov         r1, #0
  00034	eb000000	 bl          NKDbgPrintfW

; 1804 : 
; 1805 :             return FALSE;

  00038	e3a00000	 mov         r0, #0

; 1839 : }

  0003c	e49de004	 ldr         lr, [sp], #4
  00040	e12fff1e	 bx          lr
  00044		 |$LN5@ScheduleTr@2|

; 1806 :         }
; 1807 :     }
; 1808 : 
; 1809 :     DEBUGCHK(m_nSegmentPending == 0);
; 1810 :     DEBUGCHK(m_nSegmentFramesPending == 0);
; 1811 : 
; 1812 :     // A channel that has been torn down must be re-enabled before re-use
; 1813 :     if ((m_pCppiChannelRegs->TXGCR & BIT31) == 0)

  00044	e590201c	 ldr         r2, [r0, #0x1C]
  00048	e5923000	 ldr         r3, [r2]
  0004c	e3130102	 tst         r3, #2, 2

; 1814 :         m_pCppiChannelRegs->TXGCR =
; 1815 :             BIT31 | /* Enable */ /*
; 1816 :             qmgr |
; 1817 :             qnum? */ USB_CPPI_TXCMPL_QNUM_HOST;

  00050	03a031fe	 moveq       r3, #0xFE, 2
  00054	05823000	 streq       r3, [r2]

; 1818 : 
; 1819 :     // Enable DMA mode
; 1820 :     UINT16 nCsr = MGC_M_TXCSR_MODE | MGC_M_TXCSR_DMAENAB;
; 1821 : 
; 1822 :     if (m_nTransferComplete == 0)

  00058	e5903098	 ldr         r3, [r0, #0x98]
  0005c	e3a02a03	 mov         r2, #3, 20
  00060	e3530000	 cmp         r3, #0
  00064	1a000003	 bne         |$LN1@ScheduleTr@2|

; 1823 :     {
; 1824 :         if (m_nTransferOptions & USB_TOGGLE_CARRY)

  00068	e590308c	 ldr         r3, [r0, #0x8C]
  0006c	e3130102	 tst         r3, #2, 2

; 1825 :             nCsr |= (MGC_M_TXCSR_H_WR_DATATOGGLE | MGC_M_TXCSR_H_DATATOGGLE);

  00070	13a02c33	 movne       r2, #0x33, 24

; 1826 :         else
; 1827 :             nCsr |= MGC_M_TXCSR_CLRDATATOG;

  00074	03a02dc1	 moveq       r2, #0xC1, 26
  00078		 |$LN1@ScheduleTr@2|

; 1828 :     }
; 1829 : 
; 1830 :     m_pUsbEpcsrRegs->TXCSR = nCsr;

  00078	e5903014	 ldr         r3, [r0, #0x14]

; 1831 : 
; 1832 :     // Create HDs for next segment
; 1833 :     NextSegment();

  0007c	e1c320b2	 strh        r2, [r3, #2]
  00080	eb000000	 bl          |?NextSegment@CCppiDmaChannel@@IAAXXZ|

; 1834 : 
; 1835 :     DEBUGMSG(CPPI_DBG_TX || ZONE_VERBOSE,
; 1836 :         (L"-CCppiDmaTxChannel::ScheduleTransfer\r\n"));
; 1837 : 
; 1838 :     return TRUE;

  00084	e3a00001	 mov         r0, #1

; 1839 : }

  00088	e49de004	 ldr         lr, [sp], #4
  0008c	e12fff1e	 bx          lr
  00090		 |$LN14@ScheduleTr@2|
  00090		 |$LN15@ScheduleTr@2|
  00090	00000000	 DCD         |??_C@_1LO@PFNMHGPK@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn@|
  00094		 |$M41445|

			 ENDP  ; |?ScheduleTransfer@CCppiDmaTxChannel@@QAAHXZ|, CCppiDmaTxChannel::ScheduleTransfer

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T41509| DCD	|$LN54@ProcessCom@4|
	DCD	0x40005301
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ProcessCompletedPacket@CCppiDmaTxChannel@@UAAXPAU_HOST_DESCRIPTOR@@@Z| PROC ; CCppiDmaTxChannel::ProcessCompletedPacket

; 1901 : {

  00000		 |$LN54@ProcessCom@4|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M41506|
  00004	e1b06001	 movs        r6, r1
  00008	e1a04000	 mov         r4, r0

; 1902 :     BOOL fTransferComplete = FALSE;

  0000c	e3a07000	 mov         r7, #0

; 1903 :     BOOL fSegmentComplete = FALSE;

  00010	e3a05000	 mov         r5, #0

; 1904 :     UINT32 nTransferred;
; 1905 : 
; 1906 :     DEBUGMSG(CPPI_DBG_TX || ZONE_VERBOSE,
; 1907 :         (L"+CCppiDmaTxChannel::ProcessCompletedPacket: %s Ch %u (EP %u)\r\n",
; 1908 :         m_fIsOut ? L"OUT" : L"IN",
; 1909 :         m_chNum,
; 1910 :         m_epNum));
; 1911 : 
; 1912 :     if (pHd == NULL) {

  00014	0a00004a	 beq         |$LN45@ProcessCom@4|

; 1913 :         DEBUGMSG(ZONE_WARNING,
; 1914 :             (L"-CCppiDmaTxChannel::ProcessCompletedPacket: ERROR - NULL HD\r\n"));
; 1915 :         return;
; 1916 :     }
; 1917 : 
; 1918 :     if (pHd->NextPtr != 0) {
; 1919 :         DEBUGMSG(ZONE_WARNING,
; 1920 :             (L" CCppiDmaTxChannel::ProcessCompletedPacket: WARNING - Linked HD\r\n"));
; 1921 :     }
; 1922 : 
; 1923 :     if (m_fIsTeardownPending) {

  00018	e5943038	 ldr         r3, [r4, #0x38]
  0001c	e3530000	 cmp         r3, #0
  00020	0a000004	 beq         |$LN18@ProcessCom@4|

; 1924 :         DEBUGMSG(ZONE_WARNING,
; 1925 :             (L"-CCppiDmaTxChannel::ProcessCompletedPacket: WARNING - Dropped (pending teardown)\r\n"));
; 1926 :         // Free the HD
; 1927 :         m_pController->HdFree(pHd);

  00024	e594000c	 ldr         r0, [r4, #0xC]
  00028	e1a01006	 mov         r1, r6
  0002c	eb000000	 bl          |?HdFree@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@PAU2@@Z|

; 2038 : 
; 2039 :     DEBUGMSG(CPPI_DBG_TX || ZONE_VERBOSE,
; 2040 :         (L"-CCppiDmaTxChannel::ProcessCompletedPacket\r\n"));
; 2041 : }

  00030	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$LN18@ProcessCom@4|

; 1928 :         return;
; 1929 :     }
; 1930 : 
; 1931 :     ChLock();

  00038	e2840044	 add         r0, r4, #0x44
  0003c	eb000000	 bl          EnterCriticalSection

; 1932 : 
; 1933 :     if (!IsInUse()) {

  00040	e5943074	 ldr         r3, [r4, #0x74]
  00044	e3530000	 cmp         r3, #0
  00048	9a000038	 bls         |$_done$39578|

; 1934 :         DEBUGMSG(ZONE_WARNING,
; 1935 :             (L"-CCppiDmaTxChannel::ProcessCompletedPacket: WARNING - Dropped (transfer cancelled)\r\n"));
; 1936 :         goto _done;
; 1937 :     }
; 1938 : 
; 1939 :     if (!ValidateTransferState())

  0004c	e5943000	 ldr         r3, [r4]
  00050	e1a00004	 mov         r0, r4
  00054	e593300c	 ldr         r3, [r3, #0xC]
  00058	e1a0e00f	 mov         lr, pc
  0005c	e12fff13	 bx          r3
  00060	e3500000	 cmp         r0, #0
  00064	0a000031	 beq         |$_done$39578|

; 1940 :         goto _done;
; 1941 : 
; 1942 :     // Some extra debug validation
; 1943 :     if (m_nTransferLength)
; 1944 :     {
; 1945 :         DEBUGCHK(m_pvTransferBuffer || m_paTransferBuffer);
; 1946 :         DEBUGCHK(m_nSegmentPending > 0);
; 1947 :         DEBUGCHK(m_nSegmentComplete < m_nSegmentPending);
; 1948 :         DEBUGCHK(m_nSegmentFramesComplete < m_nSegmentFramesPending);
; 1949 :     }
; 1950 :     else
; 1951 :     {
; 1952 :         DEBUGCHK(m_nSegmentFramesPending == 1);
; 1953 :     }
; 1954 : 
; 1955 :     m_nStatus = USB_NO_ERROR;
; 1956 : 
; 1957 :     // Count the frames in this packet (and their sizes)
; 1958 :     m_nSegmentFramesComplete++;

  00068	e59430a8	 ldr         r3, [r4, #0xA8]
  0006c	e3a02000	 mov         r2, #0
  00070	e58420c4	 str         r2, [r4, #0xC4]
  00074	e2830001	 add         r0, r3, #1
  00078	e58400a8	 str         r0, [r4, #0xA8]

; 1959 :     nTransferred = pHd->BuffLen & USB_CPPI41_HD_BUF_LENGTH_MASK;

  0007c	e596200c	 ldr         r2, [r6, #0xC]
  00080	e3e034ff	 mvn         r3, #0xFF, 8

; 1960 :     m_nSegmentComplete += nTransferred;

  00084	e59410ac	 ldr         r1, [r4, #0xAC]
  00088	e2233503	 eor         r3, r3, #3, 10
  0008c	e002e003	 and         lr, r2, r3

; 1961 : 
; 1962 :     DEBUGMSG(CPPI_DBG_TX,
; 1963 :              (L" CCppiDmaTxChannel::ProcessCompletedPacket: Packet %u (of %u), bytes %u\r\n",
; 1964 :               m_nSegmentFramesComplete,
; 1965 :               m_nSegmentFramesPending,
; 1966 :               nTransferred));
; 1967 : 
; 1968 :     if (IsIso())

  00090	e5d42062	 ldrb        r2, [r4, #0x62]
  00094	e081300e	 add         r3, r1, lr
  00098	e58430ac	 str         r3, [r4, #0xAC]
  0009c	e3520001	 cmp         r2, #1

; 1969 :     {
; 1970 :         // Store the actual frame length for ISO
; 1971 :         m_pTransferFrameLengthsActual[m_nSegmentFramesComplete-1] = nTransferred;

  000a0	0594307c	 ldreq       r3, [r4, #0x7C]
  000a4	00833100	 addeq       r3, r3, r0, lsl #2
  000a8	0503e004	 streq       lr, [r3, #-4]

; 1972 :     }
; 1973 : 
; 1974 :     // Check for segment complete
; 1975 :     if (IsRndisMode())

  000ac	e59430b0	 ldr         r3, [r4, #0xB0]
  000b0	e3530000	 cmp         r3, #0

; 1976 :     {
; 1977 :         // In Rndis mode, there is only one BD so segment has completed
; 1978 :         fSegmentComplete = TRUE;
; 1979 :     }
; 1980 :     else // Transparent mode

  000b4	1a000003	 bne         |$LN51@ProcessCom@4|

; 1981 :     {
; 1982 :         // Check to see if the segment is complete because
; 1983 :         // all the expected frames have been transferred
; 1984 :         if (m_nSegmentFramesComplete == m_nSegmentFramesPending)

  000b8	e59420a8	 ldr         r2, [r4, #0xA8]
  000bc	e59430a4	 ldr         r3, [r4, #0xA4]
  000c0	e1520003	 cmp         r2, r3
  000c4	1a000000	 bne         |$LN8@ProcessCom@4|
  000c8		 |$LN51@ProcessCom@4|

; 1985 :         {
; 1986 :             fSegmentComplete = TRUE;

  000c8	e3a05001	 mov         r5, #1
  000cc		 |$LN8@ProcessCom@4|

; 1987 :         }
; 1988 :     }
; 1989 : 
; 1990 :     // Check for transfer complete
; 1991 :     if ((m_nTransferFramesComplete + m_nSegmentFramesComplete) == m_nTransferFrames)

  000cc	e59410a8	 ldr         r1, [r4, #0xA8]
  000d0	e594309c	 ldr         r3, [r4, #0x9C]
  000d4	e5942074	 ldr         r2, [r4, #0x74]
  000d8	e0813003	 add         r3, r1, r3
  000dc	e1530002	 cmp         r3, r2

; 1992 :     {
; 1993 :         // Finished transfer
; 1994 :         fTransferComplete = TRUE;

  000e0	03a07001	 moveq       r7, #1

; 1995 :     }
; 1996 : 
; 1997 :     DEBUGMSG(CPPI_DBG_TX,
; 1998 :         (L" CCppiDmaTxChannel::ProcessCompletedPacket: Sent %u/%u, %u/%u\r\n",
; 1999 :         m_nSegmentComplete,
; 2000 :         m_nSegmentPending,
; 2001 :         m_nTransferComplete,
; 2002 :         m_nTransferLength));
; 2003 : 
; 2004 :     if (fSegmentComplete)

  000e4	e3550000	 cmp         r5, #0
  000e8	0a000010	 beq         |$_done$39578|

; 2005 :     {
; 2006 :         // Update user buffer
; 2007 :         ReleaseSegment();

  000ec	e1a00004	 mov         r0, r4
  000f0	eb000000	 bl          |?ReleaseSegment@CCppiDmaChannel@@IAAXXZ|

; 2008 : 
; 2009 :         if (fTransferComplete)

  000f4	e3570000	 cmp         r7, #0
  000f8	0a00000a	 beq         |$LN5@ProcessCom@4|

; 2010 :         {
; 2011 :             DEBUGMSG(CPPI_DBG_TX,
; 2012 :                 (L" CCppiDmaTxChannel::ProcessCompletedPacket: Completed %u/%u, status 0x%x\r\n",
; 2013 :                 m_nTransferComplete,
; 2014 :                 m_nTransferLength,
; 2015 :                 m_nStatus));
; 2016 : 
; 2017 :             if (IsFifoEmpty())

  000fc	e5943014	 ldr         r3, [r4, #0x14]
  00100	e1d330b2	 ldrh        r3, [r3, #2]
  00104	e3130001	 tst         r3, #1
  00108	1a000002	 bne         |$LN4@ProcessCom@4|

; 2018 :                 OnTransferComplete();

  0010c	e1a00004	 mov         r0, r4
  00110	eb000000	 bl          |?OnTransferComplete@CCppiDmaTxChannel@@QAAXXZ|

; 2019 :             else

  00114	ea000005	 b           |$_done$39578|
  00118		 |$LN4@ProcessCom@4|

; 2020 :                 KickDrainThread();

  00118	e59400bc	 ldr         r0, [r4, #0xBC]
  0011c	e3a01003	 mov         r1, #3
  00120	eb000000	 bl          EventModify

; 2021 :         }
; 2022 :         else

  00124	ea000001	 b           |$_done$39578|
  00128		 |$LN5@ProcessCom@4|

; 2023 :         {
; 2024 :             // Schedule next transfer
; 2025 :             ScheduleTransfer();

  00128	e1a00004	 mov         r0, r4
  0012c	eb000000	 bl          |?ScheduleTransfer@CCppiDmaTxChannel@@QAAHXZ|
  00130		 |$_done$39578|

; 2026 :         }
; 2027 :     }
; 2028 :     else
; 2029 :     {
; 2030 :         // Nothing to do for TX transfers - wait for next HD
; 2031 :     }
; 2032 : 
; 2033 : _done:
; 2034 :     // Free the HD
; 2035 :     m_pController->HdFree(pHd);

  00130	e594000c	 ldr         r0, [r4, #0xC]
  00134	e1a01006	 mov         r1, r6
  00138	eb000000	 bl          |?HdFree@CCppiDmaController@@IAAPAU_HOST_DESCRIPTOR@@PAU2@@Z|

; 2036 : 
; 2037 :     ChUnlock();

  0013c	e2840044	 add         r0, r4, #0x44
  00140	eb000000	 bl          LeaveCriticalSection
  00144		 |$LN45@ProcessCom@4|

; 2038 : 
; 2039 :     DEBUGMSG(CPPI_DBG_TX || ZONE_VERBOSE,
; 2040 :         (L"-CCppiDmaTxChannel::ProcessCompletedPacket\r\n"));
; 2041 : }

  00144	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00148	e12fff1e	 bx          lr
  0014c		 |$M41507|

			 ENDP  ; |?ProcessCompletedPacket@CCppiDmaTxChannel@@UAAXPAU_HOST_DESCRIPTOR@@@Z|, CCppiDmaTxChannel::ProcessCompletedPacket

	EXPORT	|?Initialize@CCppiDmaController@@QAAHIPAX0@Z| ; CCppiDmaController::Initialize
	EXPORT	|??_C@_1HK@OFBPNCEL@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@JANNNAOB@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3@| [ DATA ] ; `string'
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T41534| DCD	|$LN19@Initialize|
	DCD	0x40002701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@OFBPNCEL@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, ":", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@JANNNAOB@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, ":", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "A", 0x0, "l"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "y", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Initialize@CCppiDmaController@@QAAHIPAX0@Z| PROC ; CCppiDmaController::Initialize

; 2194 : {

  00000		 |$LN19@Initialize|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M41531|
  00004	e1a07003	 mov         r7, r3
  00008	e1a05002	 mov         r5, r2
  0000c	e1a08001	 mov         r8, r1
  00010	e1a04000	 mov         r4, r0

; 2195 :     BOOL fResult = FALSE;
; 2196 : 
; 2197 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 2198 :         (L"+CCppiDmaController::Initialize\r\n"));
; 2199 : 
; 2200 :     PoolInit();

  00014	e3a06000	 mov         r6, #0
  00018	eb000000	 bl          |?PoolInit@CCppiDmaController@@IAAHXZ|

; 2201 : 
; 2202 :     Lock();

  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          EnterCriticalSection

; 2203 : 
; 2204 :     // Validate input
; 2205 :     if (!paUdcBase || !pvUdcBase || !pvCppiBase)

  00024	e3580000	 cmp         r8, #0
  00028	0a000012	 beq         |$LN4@Initialize|
  0002c	e3550000	 cmp         r5, #0
  00030	0a000010	 beq         |$LN4@Initialize|
  00034	e3570000	 cmp         r7, #0
  00038	0a00000e	 beq         |$LN4@Initialize|

; 2209 :         goto _done;
; 2210 :     }
; 2211 : 
; 2212 :     // Do not allow multiple instances
; 2213 :     if (m_paUsbRegs)

  0003c	e594e014	 ldr         lr, [r4, #0x14]
  00040	e35e0000	 cmp         lr, #0

; 2214 :     {
; 2215 :         RETAILMSG(CPPI_DBG_ERROR,
; 2216 :             (L" CCppiDmaController::Initialize: ERROR - Already initialized\r\n"));

  00044	159f004c	 ldrne       r0, [pc, #0x4C]
  00048	1a00000b	 bne         |$LN16@Initialize|

; 2217 :         goto _done;
; 2218 :     }
; 2219 : 
; 2220 :     // Save input parameters
; 2221 :     m_paUsbRegs = paUdcBase;
; 2222 :     m_pUsbRegs  = (CSL_UsbRegs*)pvUdcBase;
; 2223 :     m_pCppiRegs = (CSL_CppiRegs*)pvCppiBase;
; 2224 : 
; 2225 :     // Disable RNIDS and AUTOREQ modes
; 2226 :     m_pUsbRegs->AUTOREQR = 0;

  0004c	e3a02000	 mov         r2, #0
  00050	e5848014	 str         r8, [r4, #0x14]
  00054	e5845018	 str         r5, [r4, #0x18]
  00058	e584701c	 str         r7, [r4, #0x1C]
  0005c	e5852014	 str         r2, [r5, #0x14]

; 2227 :     m_pUsbRegs->TXMODE  = 0;

  00060	e5943018	 ldr         r3, [r4, #0x18]

; 2228 :     m_pUsbRegs->RXMODE  = 0;
; 2229 : 
; 2230 :     fResult = TRUE;

  00064	e3a06001	 mov         r6, #1
  00068	e5832070	 str         r2, [r3, #0x70]
  0006c	e5943018	 ldr         r3, [r4, #0x18]
  00070	e5832074	 str         r2, [r3, #0x74]
  00074	ea000001	 b           |$_done$39665|
  00078		 |$LN4@Initialize|

; 2206 :     {
; 2207 :         RETAILMSG(CPPI_DBG_ERROR,
; 2208 :             (L" CCppiDmaController::Initialize: ERROR - Invalid parametrs\r\n"));

  00078	e59f0014	 ldr         r0, [pc, #0x14]
  0007c		 |$LN16@Initialize|
  0007c	eb000000	 bl          NKDbgPrintfW
  00080		 |$_done$39665|

; 2231 : 
; 2232 : _done:
; 2233 :     Unlock();

  00080	e1a00004	 mov         r0, r4
  00084	eb000000	 bl          LeaveCriticalSection

; 2234 : 
; 2235 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 2236 :         (L"-CCppiDmaController::Initialize\r\n"));
; 2237 : 
; 2238 :     return fResult;
; 2239 : }

  00088	e1a00006	 mov         r0, r6
  0008c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$LN20@Initialize|
  00094		 |$LN21@Initialize|
  00094	00000000	 DCD         |??_C@_1HK@OFBPNCEL@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3@|
  00098		 |$LN22@Initialize|
  00098	00000000	 DCD         |??_C@_1HO@JANNNAOB@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3@|
  0009c		 |$M41532|

			 ENDP  ; |?Initialize@CCppiDmaController@@QAAHIPAX0@Z|, CCppiDmaController::Initialize

	EXPORT	|??_C@_1JC@CPFBCBPM@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KA@OPBGAKPB@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LC@FCMBCFJO@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KK@PNAAHDOE@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@PFPCKNKK@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@KKDJGIN@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| [ DATA ] ; `string'
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T41608| DCD	|$LN67@IssueTrans|
	DCD	0x40009902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@CPFBCBPM@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "R", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "P", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, ",", 0x0, " "
	DCB	0x0, "l", 0x0, "e", 0x0, "n", 0x0, "g", 0x0, "t", 0x0, "h"
	DCB	0x0, " ", 0x0, "%", 0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KA@OPBGAKPB@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "R", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "a", 0x0, "r", 0x0, "g", 0x0, "s"
	DCB	0x0, ",", 0x0, " ", 0x0, "z", 0x0, "e", 0x0, "r", 0x0, "o"
	DCB	0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "l", 0x0, "e"
	DCB	0x0, "n", 0x0, "g", 0x0, "t", 0x0, "h", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LC@FCMBCFJO@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "R", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, "o", 0x0, " "
	DCB	0x0, "a", 0x0, "r", 0x0, "g", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "f", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "s"
	DCB	0x0, " ", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "l", 0x0, "e", 0x0, "n", 0x0, "g", 0x0, "t"
	DCB	0x0, "h", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KK@PNAAHDOE@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "R", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, "o", 0x0, " "
	DCB	0x0, "a", 0x0, "r", 0x0, "g", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "f", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@PFPCKNKK@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "R", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "a", 0x0, "r", 0x0, "g", 0x0, "s"
	DCB	0x0, ",", 0x0, " ", 0x0, "p", 0x0, "v", 0x0, " ", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@KKDJGIN@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "R", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "Z", 0x0, "e", 0x0, "r", 0x0, "o", 0x0, " ", 0x0, "l"
	DCB	0x0, "e", 0x0, "n", 0x0, "g", 0x0, "t", 0x0, "h", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IssueTransfer@CCppiDmaRxChannel@@UAAHEEEGPAXIIIPAIPAK2I00@Z| PROC ; CCppiDmaRxChannel::IssueTransfer

; 763  : {

  00000		 |$LN67@IssueTrans|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M41605|
  00008	e5cd2001	 strb        r2, [sp, #1]
  0000c	e1a02001	 mov         r2, r1
  00010	e5cd2000	 strb        r2, [sp]
  00014	e5cd3002	 strb        r3, [sp, #2]
  00018	e1a04000	 mov         r4, r0

; 764  :     BOOL fResult = FALSE;
; 765  : 
; 766  :     DEBUGMSG(CPPI_DBG_RX || ZONE_VERBOSE,
; 767  :         (L"+CCppiDmaRxChannel::IssueTransfer: RX Ch %u (EP %u) - %u bytes\r\n",
; 768  :         m_chNum,
; 769  :         m_epNum,
; 770  :         nLength));
; 771  : 
; 772  :     if (!nLength)

  0001c	e59d5034	 ldr         r5, [sp, #0x34]
  00020	e3a0a000	 mov         r10, #0
  00024	e3550000	 cmp         r5, #0
  00028	1a000002	 bne         |$LN24@IssueTrans|

; 773  :     {
; 774  :         RETAILMSG(CPPI_DBG_ERROR,
; 775  :             (L" CCppiDmaRxChannel::IssueTransfer: ERROR - Zero length\r\n"));

  0002c	e59f022c	 ldr         r0, [pc, #0x22C]

; 821  :     {
; 822  :         RETAILMSG(CPPI_DBG_ERROR,
; 823  :             (L" CCppiDmaRxChannel::IssueTransfer: ERROR - Invalid args, zero transfer length\r\n"));

  00030	eb000000	 bl          NKDbgPrintfW

; 925  : 
; 926  : _doneUnsafe:

  00034	ea00007f	 b           |$_doneUnsafe$39236|
  00038		 |$LN24@IssueTrans|

; 776  :         goto _doneUnsafe;
; 777  :     }
; 778  : 
; 779  :     // Validate input
; 780  :     if (!pvBuffer && !paBuffer)

  00038	e59db02c	 ldr         r11, [sp, #0x2C]
  0003c	e59d9030	 ldr         r9, [sp, #0x30]
  00040	e35b0000	 cmp         r11, #0
  00044	1a000006	 bne         |$LN22@IssueTrans|
  00048	e3590000	 cmp         r9, #0
  0004c	1a000004	 bne         |$LN22@IssueTrans|

; 781  :     {
; 782  :         RETAILMSG(CPPI_DBG_ERROR,
; 783  :             (L" CCppiDmaRxChannel::IssueTransfer: ERROR - Invalid args, pv %08X, pa %08X\r\n",
; 784  :             pvBuffer,
; 785  :             paBuffer));

  00050	e59f0204	 ldr         r0, [pc, #0x204]
  00054	e3a02000	 mov         r2, #0
  00058	e3a01000	 mov         r1, #0

; 807  :             {
; 808  :                 RETAILMSG(CPPI_DBG_ERROR,
; 809  :                     (L" CCppiDmaRxChannel::IssueTransfer: ERROR - Invalid iso args, frame %08X, size %08X\r\n",
; 810  :                     n,
; 811  :                     pnFrameLengths[n]));

  0005c	eb000000	 bl          NKDbgPrintfW

; 925  : 
; 926  : _doneUnsafe:

  00060	ea000074	 b           |$_doneUnsafe$39236|
  00064		 |$LN22@IssueTrans|

; 786  : 
; 787  :         goto _doneUnsafe;
; 788  :     }
; 789  : 
; 790  :     // Validate ISO frames
; 791  :     if (epType == USB_ENDPOINT_TYPE_ISOCHRONOUS)

  00064	e59d603c	 ldr         r6, [sp, #0x3C]
  00068	e59d7038	 ldr         r7, [sp, #0x38]
  0006c	e1dd82b8	 ldrh        r8, [sp, #0x28]
  00070	e3530001	 cmp         r3, #1
  00074	1a000012	 bne         |$LN14@IssueTrans|

; 792  :     {
; 793  :         if (!nFrames || !pnFrameLengths)

  00078	e3570000	 cmp         r7, #0
  0007c	0a000019	 beq         |$LN18@IssueTrans|
  00080	e3560000	 cmp         r6, #0
  00084	0a000017	 beq         |$LN18@IssueTrans|

; 799  : 
; 800  :             goto _doneUnsafe;
; 801  :         }
; 802  : 
; 803  :         nLength = 0;

  00088	e3a05000	 mov         r5, #0

; 804  :         for (UINT32 n = 0; n < nFrames; n ++)

  0008c	e3a01000	 mov         r1, #0
  00090	e3570000	 cmp         r7, #0
  00094	0a00000c	 beq         |$LN60@IssueTrans|

; 799  : 
; 800  :             goto _doneUnsafe;
; 801  :         }
; 802  : 
; 803  :         nLength = 0;

  00098	e1a02006	 mov         r2, r6
  0009c		 |$LL16@IssueTrans|

; 805  :         {
; 806  :             if (!pnFrameLengths[n] || (pnFrameLengths[n] > (UINT32)epMaxPkt))

  0009c	e5923000	 ldr         r3, [r2]
  000a0	e3530000	 cmp         r3, #0
  000a4	0a00000b	 beq         |$LN58@IssueTrans|
  000a8	e1530008	 cmp         r3, r8
  000ac	8a000009	 bhi         |$LN58@IssueTrans|
  000b0	e2811001	 add         r1, r1, #1
  000b4	e1510007	 cmp         r1, r7

; 812  : 
; 813  :                 goto _doneUnsafe;
; 814  :             }
; 815  : 
; 816  :             nLength += pnFrameLengths[n];

  000b8	e0855003	 add         r5, r5, r3
  000bc	e2822004	 add         r2, r2, #4
  000c0	3afffff5	 bcc         |$LL16@IssueTrans|
  000c4		 |$LN14@IssueTrans|

; 817  :         }
; 818  :     }
; 819  : 
; 820  :     if (!nLength)

  000c4	e3550000	 cmp         r5, #0
  000c8	1a00000b	 bne         |$LN10@IssueTrans|
  000cc		 |$LN60@IssueTrans|

; 821  :     {
; 822  :         RETAILMSG(CPPI_DBG_ERROR,
; 823  :             (L" CCppiDmaRxChannel::IssueTransfer: ERROR - Invalid args, zero transfer length\r\n"));

  000cc	e59f0184	 ldr         r0, [pc, #0x184]
  000d0	eb000000	 bl          NKDbgPrintfW

; 925  : 
; 926  : _doneUnsafe:

  000d4	ea000057	 b           |$_doneUnsafe$39236|
  000d8		 |$LN58@IssueTrans|

; 807  :             {
; 808  :                 RETAILMSG(CPPI_DBG_ERROR,
; 809  :                     (L" CCppiDmaRxChannel::IssueTransfer: ERROR - Invalid iso args, frame %08X, size %08X\r\n",
; 810  :                     n,
; 811  :                     pnFrameLengths[n]));

  000d8	e7962101	 ldr         r2, [r6, +r1, lsl #2]
  000dc	e59f0170	 ldr         r0, [pc, #0x170]
  000e0	eb000000	 bl          NKDbgPrintfW

; 925  : 
; 926  : _doneUnsafe:

  000e4	ea000053	 b           |$_doneUnsafe$39236|
  000e8		 |$LN18@IssueTrans|

; 794  :         {
; 795  :             RETAILMSG(CPPI_DBG_ERROR,
; 796  :                 (L" CCppiDmaRxChannel::IssueTransfer: ERROR - Invalid iso args, frames %08X, lengths %08X\r\n",
; 797  :                 nFrames,
; 798  :                 pnFrameLengths));

  000e8	e59f0160	 ldr         r0, [pc, #0x160]
  000ec	e1a02006	 mov         r2, r6
  000f0	e1a01007	 mov         r1, r7

; 807  :             {
; 808  :                 RETAILMSG(CPPI_DBG_ERROR,
; 809  :                     (L" CCppiDmaRxChannel::IssueTransfer: ERROR - Invalid iso args, frame %08X, size %08X\r\n",
; 810  :                     n,
; 811  :                     pnFrameLengths[n]));

  000f4	eb000000	 bl          NKDbgPrintfW

; 925  : 
; 926  : _doneUnsafe:

  000f8	ea00004e	 b           |$_doneUnsafe$39236|
  000fc		 |$LN10@IssueTrans|

; 824  :         goto _doneUnsafe;
; 825  :     }
; 826  : 
; 827  : 
; 828  :     // Go safe
; 829  :     ChLock();

  000fc	e2840044	 add         r0, r4, #0x44
  00100	eb000000	 bl          EnterCriticalSection

; 830  : 
; 831  :     // We are not supporting overlapped I/O by now
; 832  :     if (IsInUse())

  00104	e5943074	 ldr         r3, [r4, #0x74]
  00108	e3530000	 cmp         r3, #0
  0010c	9a000003	 bls         |$LN8@IssueTrans|

; 833  :     {
; 834  :         RETAILMSG(CPPI_DBG_ERROR,
; 835  :             (L" CCppiDmaRxChannel::IssueTransfer: ERROR - Pending transfer, length %u\r\n",
; 836  :             m_nTransferLength));

  00110	e5941088	 ldr         r1, [r4, #0x88]
  00114	e59f0130	 ldr         r0, [pc, #0x130]
  00118	eb000000	 bl          NKDbgPrintfW

; 837  : 
; 838  :         goto _done;

  0011c	ea000043	 b           |$_done$39260|
  00120		 |$LN8@IssueTrans|

; 839  :     }
; 840  : 
; 841  :     // Extra debug checks
; 842  :     DEBUGCHK(m_pvTransferBuffer == NULL);
; 843  :     DEBUGCHK(m_paTransferBuffer == 0);
; 844  :     DEBUGCHK(m_nTransferLength == 0);
; 845  :     DEBUGCHK(m_nSegmentPending == 0);
; 846  :     DEBUGCHK(m_nSegmentFramesPending == 0);
; 847  : 
; 848  :     // Save transfer info
; 849  :     m_epAddr = epAddr;
; 850  :     m_fnAddr = fnAddr;
; 851  :     m_epType = epType;
; 852  :     m_epMaxPkt = epMaxPkt;
; 853  : 
; 854  :     m_pvTransferBuffer = (UINT8 *)pvBuffer;
; 855  :     m_paTransferBuffer = paBuffer;
; 856  :     m_nTransferLength = nLength;
; 857  :     m_nTransferFrames = nFrames;
; 858  :     m_pTransferFrameLengths = pnFrameLengths;
; 859  :     m_pdwIsochErrors = pdwIsochErrors;

  00120	e59d3040	 ldr         r3, [sp, #0x40]

; 860  :     m_pdwIsochLengths = pdwIsochLengths;

  00124	e59d2044	 ldr         r2, [sp, #0x44]

; 861  :     m_nTransferOptions = nOptions;

  00128	e59d1048	 ldr         r1, [sp, #0x48]

; 862  :     m_pTransferCookie1 = pCookie1;
; 863  :     m_pTransferCookie2 = pCookie2;

  0012c	e5843080	 str         r3, [r4, #0x80]

; 864  :     m_nTransferComplete = 0;

  00130	e5dd3000	 ldrb        r3, [sp]
  00134	e59d004c	 ldr         r0, [sp, #0x4C]
  00138	e59de050	 ldr         lr, [sp, #0x50]
  0013c	e5c43060	 strb        r3, [r4, #0x60]
  00140	e5dd3001	 ldrb        r3, [sp, #1]
  00144	e5842084	 str         r2, [r4, #0x84]
  00148	e3a02000	 mov         r2, #0
  0014c	e5c43061	 strb        r3, [r4, #0x61]
  00150	e5dd3002	 ldrb        r3, [sp, #2]
  00154	e584108c	 str         r1, [r4, #0x8C]
  00158	e5840090	 str         r0, [r4, #0x90]
  0015c	e5c43062	 strb        r3, [r4, #0x62]

; 865  :     m_nTransferFramesComplete = 0;
; 866  :     m_nSegmentPending = 0;
; 867  :     m_nSegmentFramesPending = 0;
; 868  : 
; 869  :     BOOL fIsRndisMode;
; 870  :     if (!IsIso())

  00160	e3530001	 cmp         r3, #1
  00164	e584e094	 str         lr, [r4, #0x94]
  00168	e1c486b4	 strh        r8, [r4, #0x64]
  0016c	e584b06c	 str         r11, [r4, #0x6C]
  00170	e5849070	 str         r9, [r4, #0x70]
  00174	e5845088	 str         r5, [r4, #0x88]
  00178	e5847074	 str         r7, [r4, #0x74]
  0017c	e5846078	 str         r6, [r4, #0x78]
  00180	e5842098	 str         r2, [r4, #0x98]
  00184	e584209c	 str         r2, [r4, #0x9C]
  00188	e58420a0	 str         r2, [r4, #0xA0]
  0018c	e58420a4	 str         r2, [r4, #0xA4]
  00190	0a000006	 beq         |$LN6@IssueTrans|

; 871  :         fIsRndisMode = ((m_epMaxPkt & 0x3f) == 0) &&
; 872  :                        (m_nTransferLength <= 0x10000);

  00194	e318003f	 tst         r8, #0x3F
  00198	1a000004	 bne         |$LN6@IssueTrans|
  0019c	e3550801	 cmp         r5, #1, 16

; 875  : 
; 876  :     if (fIsRndisMode)
; 877  :         m_nMaxBD = 0x10000;

  001a0	93a03801	 movls       r3, #1, 16
  001a4	95843068	 strls       r3, [r4, #0x68]
  001a8	93a01001	 movls       r1, #1
  001ac	9a000001	 bls         |$LN3@IssueTrans|
  001b0		 |$LN6@IssueTrans|

; 873  :     else
; 874  :         fIsRndisMode = FALSE;

  001b0	e3a01000	 mov         r1, #0

; 878  :     else
; 879  :         m_nMaxBD = m_epMaxPkt;

  001b4	e5848068	 str         r8, [r4, #0x68]
  001b8		 |$LN3@IssueTrans|

; 880  : 
; 881  :     DEBUGMSG(CPPI_DBG_RX,
; 882  :         (L" CCppiDmaRxChannel::IssueTransfer: RndisMode %d, epMaxPkt %u, MaxBD %u\r\n",
; 883  :          fIsRndisMode, m_epMaxPkt, m_nMaxBD));
; 884  : 
; 885  :     UpdateRndisMode(fIsRndisMode);

  001b8	e1a00004	 mov         r0, r4
  001bc	eb000000	 bl          |?UpdateRndisMode@CCppiDmaChannel@@IAAXH@Z|

; 886  : 
; 887  :     if (!IsIso())

  001c0	e5d43062	 ldrb        r3, [r4, #0x62]
  001c4	e3530001	 cmp         r3, #1
  001c8	0a000006	 beq         |$LN1@IssueTrans|

; 888  :     {
; 889  :         m_nTransferFrames = m_nTransferLength / m_nMaxBD;

  001cc	e5941088	 ldr         r1, [r4, #0x88]
  001d0	e5940068	 ldr         r0, [r4, #0x68]
  001d4	eb000000	 bl          __rt_udiv
  001d8	e3510000	 cmp         r1, #0

; 890  : 
; 891  :         if (m_nTransferLength % m_nMaxBD)
; 892  :         {
; 893  :             m_nTransferFrames ++;

  001dc	12803001	 addne       r3, r0, #1
  001e0	e5840074	 str         r0, [r4, #0x74]
  001e4	15843074	 strne       r3, [r4, #0x74]
  001e8		 |$LN1@IssueTrans|

; 894  :         }
; 895  :     }
; 896  : 
; 897  :     DEBUGMSG(CPPI_DBG_RX,
; 898  :         (L" CCppiDmaRxChannel::IssueTransfer: Length %u, %u frames, options 0x%08x\r\n",
; 899  :         m_nTransferLength,
; 900  :         m_nTransferFrames,
; 901  :         m_nTransferOptions));
; 902  : 
; 903  :     m_pCppiChannelRegs->HPCRA =
; 904  :         ((m_chNum + m_nCppiChannelOffset) |
; 905  :         ((m_chNum + m_nCppiChannelOffset) << 16));

  001e8	e5d4203c	 ldrb        r2, [r4, #0x3C]
  001ec	e5d43020	 ldrb        r3, [r4, #0x20]
  001f0	e594101c	 ldr         r1, [r4, #0x1C]

; 906  : 
; 907  :     m_pCppiChannelRegs->HPCRB =
; 908  :         ((m_chNum + m_nCppiChannelOffset) |
; 909  :         ((m_chNum + m_nCppiChannelOffset) << 16));
; 910  : 
; 911  :     m_pCppiChannelRegs->RXGCR =
; 912  :         BIT31 | /* Enable */
; 913  :         BIT24 | /* Retry on starvation */
; 914  :         BIT14 | /* Host descriptor type (default) */ /*
; 915  :         qmgr |
; 916  :         qnum? */ USB_CPPI_RXCMPL_QNUM_HOST;

  001f4	e59fe04c	 ldr         lr, [pc, #0x4C]
  001f8	e0823003	 add         r3, r2, r3
  001fc	e1833803	 orr         r3, r3, r3, lsl #16
  00200	e581300c	 str         r3, [r1, #0xC]
  00204	e5d4203c	 ldrb        r2, [r4, #0x3C]
  00208	e5d43020	 ldrb        r3, [r4, #0x20]
  0020c	e594101c	 ldr         r1, [r4, #0x1C]

; 917  : 
; 918  :     // Schedule next transfer
; 919  :     fResult = ScheduleTransfer();

  00210	e1a00004	 mov         r0, r4
  00214	e0823003	 add         r3, r2, r3
  00218	e1833803	 orr         r3, r3, r3, lsl #16
  0021c	e5813010	 str         r3, [r1, #0x10]
  00220	e594301c	 ldr         r3, [r4, #0x1C]
  00224	e583e008	 str         lr, [r3, #8]
  00228	eb000000	 bl          |?ScheduleTransfer@CCppiDmaRxChannel@@QAAHXZ|
  0022c	e1a0a000	 mov         r10, r0
  00230		 |$_done$39260|

; 920  : 
; 921  : _done:
; 922  : 
; 923  :     // Go unsafe
; 924  :     ChUnlock();

  00230	e2840044	 add         r0, r4, #0x44
  00234	eb000000	 bl          LeaveCriticalSection
  00238		 |$_doneUnsafe$39236|

; 927  :     DEBUGMSG(CPPI_DBG_RX || ZONE_VERBOSE,
; 928  :         (L"-CCppiDmaRxChannel::IssueTransfer\r\n"));
; 929  : 
; 930  :     return fResult;
; 931  : }

  00238	e1a0000a	 mov         r0, r10
  0023c	e28dd004	 add         sp, sp, #4
  00240	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00244	e12fff1e	 bx          lr
  00248		 |$LN68@IssueTrans|
  00248		 |$LN69@IssueTrans|
  00248	81004041	 DCD         0x81004041
  0024c		 |$LN70@IssueTrans|
  0024c	00000000	 DCD         |??_C@_1JC@CPFBCBPM@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@|
  00250		 |$LN71@IssueTrans|
  00250	00000000	 DCD         |??_C@_1LC@FCMBCFJO@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@|
  00254		 |$LN72@IssueTrans|
  00254	00000000	 DCD         |??_C@_1KK@PNAAHDOE@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@|
  00258		 |$LN73@IssueTrans|
  00258	00000000	 DCD         |??_C@_1KA@OPBGAKPB@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@|
  0025c		 |$LN74@IssueTrans|
  0025c	00000000	 DCD         |??_C@_1JI@PFPCKNKK@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@|
  00260		 |$LN75@IssueTrans|
  00260	00000000	 DCD         |??_C@_1HC@KKDJGIN@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAR?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@|
  00264		 |$M41606|

			 ENDP  ; |?IssueTransfer@CCppiDmaRxChannel@@UAAHEEEGPAXIIIPAIPAK2I00@Z|, CCppiDmaRxChannel::IssueTransfer

	EXPORT	|??_C@_1IO@KMDCDODB@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LC@HEKKLHBN@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KI@KBHLFCKP@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KK@CLDEICMA@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KO@GEJIKLBO@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| [ DATA ] ; `string'
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T41685| DCD	|$LN65@IssueTrans@2|
	DCD	0x40008f02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@KMDCDODB@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "T", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "P", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, ",", 0x0, " "
	DCB	0x0, "l", 0x0, "e", 0x0, "n", 0x0, "g", 0x0, "t", 0x0, "h"
	DCB	0x0, " ", 0x0, "%", 0x0, "u", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LC@HEKKLHBN@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "T", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, "o", 0x0, " "
	DCB	0x0, "a", 0x0, "r", 0x0, "g", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "f", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "s"
	DCB	0x0, " ", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "l", 0x0, "e", 0x0, "n", 0x0, "g", 0x0, "t"
	DCB	0x0, "h", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KI@KBHLFCKP@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "T", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "I", 0x0, "S", 0x0, "O", 0x0, " "
	DCB	0x0, "a", 0x0, "r", 0x0, "g", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "z", 0x0, "e", 0x0, "r", 0x0, "o", 0x0, " ", 0x0, "t"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "l", 0x0, "e", 0x0, "n", 0x0, "g"
	DCB	0x0, "t", 0x0, "h", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KK@CLDEICMA@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "T", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, "o", 0x0, " "
	DCB	0x0, "a", 0x0, "r", 0x0, "g", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "f", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KO@GEJIKLBO@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@| DCB " "
	DCB	0x0, "C", 0x0, "C", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, "T", 0x0, "x", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, ":", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u", 0x0, "e"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "a", 0x0, "r", 0x0, "g", 0x0, "s"
	DCB	0x0, ",", 0x0, " ", 0x0, "p", 0x0, "v", 0x0, " ", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, ",", 0x0, " ", 0x0, "l", 0x0, "e", 0x0, "n", 0x0, "g"
	DCB	0x0, "t", 0x0, "h", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cppidma.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IssueTransfer@CCppiDmaTxChannel@@UAAHEEEGPAXIIIPAIPAK2I00@Z| PROC ; CCppiDmaTxChannel::IssueTransfer

; 1496 : {

  00000		 |$LN65@IssueTrans@2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M41682|
  00008	e5cd2001	 strb        r2, [sp, #1]
  0000c	e1a02001	 mov         r2, r1
  00010	e5cd2000	 strb        r2, [sp]
  00014	e5cd3002	 strb        r3, [sp, #2]
  00018	e1a04000	 mov         r4, r0

; 1497 :     BOOL fResult = FALSE;
; 1498 : 
; 1499 :     DEBUGMSG(CPPI_DBG_TX || ZONE_VERBOSE,
; 1500 :         (L"+CCppiDmaTxChannel::IssueTransfer: TX Ch %u (EP %u/0x%02x/%u/%u) - %u bytes\r\n",
; 1501 :         m_chNum,
; 1502 :         m_epNum,
; 1503 :         epAddr,
; 1504 :         epType,
; 1505 :         epMaxPkt,
; 1506 :         nLength));
; 1507 : 
; 1508 :     // Validate input
; 1509 :     if (nLength && (!pvBuffer && !paBuffer))

  0001c	e59d5034	 ldr         r5, [sp, #0x34]
  00020	e59da030	 ldr         r10, [sp, #0x30]
  00024	e59db02c	 ldr         r11, [sp, #0x2C]
  00028	e3550000	 cmp         r5, #0
  0002c	e3a09000	 mov         r9, #0
  00030	0a000009	 beq         |$LN24@IssueTrans@2|
  00034	e35b0000	 cmp         r11, #0
  00038	1a000007	 bne         |$LN24@IssueTrans@2|
  0003c	e35a0000	 cmp         r10, #0
  00040	1a000005	 bne         |$LN24@IssueTrans@2|

; 1510 :     {
; 1511 :         RETAILMSG(CPPI_DBG_ERROR,
; 1512 :             (L" CCppiDmaTxChannel::IssueTransfer: ERROR - Invalid args, pv %08X, pa %08X, length %08X",
; 1513 :             pvBuffer,
; 1514 :             paBuffer,
; 1515 :             nLength));

  00044	e59f01ec	 ldr         r0, [pc, #0x1EC]
  00048	e1a03005	 mov         r3, r5
  0004c	e3a02000	 mov         r2, #0
  00050	e3a01000	 mov         r1, #0
  00054	eb000000	 bl          NKDbgPrintfW

; 1516 : 
; 1517 :         goto _doneUnsafe;

  00058	ea00006e	 b           |$_doneUnsafe$39468|
  0005c		 |$LN24@IssueTrans@2|

; 1518 :     }
; 1519 : 
; 1520 :     // Validate ISO frames
; 1521 :     if (epType == USB_ENDPOINT_TYPE_ISOCHRONOUS)

  0005c	e59d603c	 ldr         r6, [sp, #0x3C]
  00060	e59d7038	 ldr         r7, [sp, #0x38]
  00064	e1dd82b8	 ldrh        r8, [sp, #0x28]
  00068	e3530001	 cmp         r3, #1
  0006c	1a000020	 bne         |$LN12@IssueTrans@2|

; 1522 :     {
; 1523 :         if (!nFrames || !pnFrameLengths)

  00070	e3570000	 cmp         r7, #0
  00074	0a000019	 beq         |$LN20@IssueTrans@2|
  00078	e3560000	 cmp         r6, #0
  0007c	0a000017	 beq         |$LN20@IssueTrans@2|

; 1529 : 
; 1530 :             goto _doneUnsafe;
; 1531 :         }
; 1532 : 
; 1533 :         nLength = 0;

  00080	e3a05000	 mov         r5, #0

; 1534 :         for (UINT32 n = 0; n < nFrames; n ++)

  00084	e3a01000	 mov         r1, #0
  00088	e3570000	 cmp         r7, #0
  0008c	0a00000c	 beq         |$LN58@IssueTrans@2|

; 1529 : 
; 1530 :             goto _doneUnsafe;
; 1531 :         }
; 1532 : 
; 1533 :         nLength = 0;

  00090	e1a02006	 mov         r2, r6
  00094		 |$LL18@IssueTrans@2|

; 1535 :         {
; 1536 :             if (!pnFrameLengths[n] || (pnFrameLengths[n] > (UINT32)epMaxPkt))

  00094	e5923000	 ldr         r3, [r2]
  00098	e3530000	 cmp         r3, #0
  0009c	0a00000b	 beq         |$LN56@IssueTrans@2|
  000a0	e1530008	 cmp         r3, r8
  000a4	8a000009	 bhi         |$LN56@IssueTrans@2|
  000a8	e2811001	 add         r1, r1, #1
  000ac	e1510007	 cmp         r1, r7

; 1542 : 
; 1543 :                 goto _doneUnsafe;
; 1544 :             }
; 1545 : 
; 1546 :             nLength += pnFrameLengths[n];

  000b0	e0855003	 add         r5, r5, r3
  000b4	e2822004	 add         r2, r2, #4
  000b8	3afffff5	 bcc         |$LL18@IssueTrans@2|

; 1547 :         }
; 1548 : 
; 1549 :         if (!nLength)

  000bc	e3550000	 cmp         r5, #0
  000c0	1a00000b	 bne         |$LN12@IssueTrans@2|
  000c4		 |$LN58@IssueTrans@2|

; 1550 :         {
; 1551 :             RETAILMSG(CPPI_DBG_ERROR,
; 1552 :                 (L" CCppiDmaTxChannel::IssueTransfer: ERROR - Invalid ISO args, zero transfer length\r\n"));

  000c4	e59f0168	 ldr         r0, [pc, #0x168]
  000c8	eb000000	 bl          NKDbgPrintfW

; 1651 : 
; 1652 : _doneUnsafe:

  000cc	ea000051	 b           |$_doneUnsafe$39468|
  000d0		 |$LN56@IssueTrans@2|

; 1537 :             {
; 1538 :                 RETAILMSG(CPPI_DBG_ERROR,
; 1539 :                     (L" CCppiDmaTxChannel::IssueTransfer: ERROR - Invalid iso args, frame %08X, size %08X\r\n",
; 1540 :                     n,
; 1541 :                     pnFrameLengths[n]));

  000d0	e7962101	 ldr         r2, [r6, +r1, lsl #2]
  000d4	e59f0154	 ldr         r0, [pc, #0x154]
  000d8	eb000000	 bl          NKDbgPrintfW

; 1651 : 
; 1652 : _doneUnsafe:

  000dc	ea00004d	 b           |$_doneUnsafe$39468|
  000e0		 |$LN20@IssueTrans@2|

; 1524 :         {
; 1525 :             RETAILMSG(CPPI_DBG_ERROR,
; 1526 :                 (L" CCppiDmaTxChannel::IssueTransfer: ERROR - Invalid iso args, frames %08X, lengths %08X\r\n",
; 1527 :                 nFrames,
; 1528 :                 pnFrameLengths));

  000e0	e59f0144	 ldr         r0, [pc, #0x144]
  000e4	e1a02006	 mov         r2, r6
  000e8	e1a01007	 mov         r1, r7

; 1537 :             {
; 1538 :                 RETAILMSG(CPPI_DBG_ERROR,
; 1539 :                     (L" CCppiDmaTxChannel::IssueTransfer: ERROR - Invalid iso args, frame %08X, size %08X\r\n",
; 1540 :                     n,
; 1541 :                     pnFrameLengths[n]));

  000ec	eb000000	 bl          NKDbgPrintfW

; 1651 : 
; 1652 : _doneUnsafe:

  000f0	ea000048	 b           |$_doneUnsafe$39468|
  000f4		 |$LN12@IssueTrans@2|

; 1553 :             goto _doneUnsafe;
; 1554 :         }
; 1555 :     }
; 1556 : 
; 1557 :     // Go safe
; 1558 :     ChLock();

  000f4	e2840044	 add         r0, r4, #0x44
  000f8	eb000000	 bl          EnterCriticalSection

; 1559 : 
; 1560 :     // We are not supporting overlapped I/O by now
; 1561 :     if (IsInUse())

  000fc	e5943074	 ldr         r3, [r4, #0x74]
  00100	e3530000	 cmp         r3, #0
  00104	9a000003	 bls         |$LN10@IssueTrans@2|

; 1562 :     {
; 1563 :         RETAILMSG(CPPI_DBG_ERROR,
; 1564 :             (L" CCppiDmaTxChannel::IssueTransfer: ERROR - Pending transfer, length %u",
; 1565 :             m_nTransferLength));

  00108	e5941088	 ldr         r1, [r4, #0x88]
  0010c	e59f0114	 ldr         r0, [pc, #0x114]
  00110	eb000000	 bl          NKDbgPrintfW

; 1566 : 
; 1567 :         goto _done;

  00114	ea00003d	 b           |$_done$39489|
  00118		 |$LN10@IssueTrans@2|

; 1568 :     }
; 1569 : 
; 1570 :     // Extra debug checks
; 1571 :     DEBUGCHK(m_pvTransferBuffer == NULL);
; 1572 :     DEBUGCHK(m_paTransferBuffer == 0);
; 1573 :     DEBUGCHK(m_nTransferLength == 0);
; 1574 :     DEBUGCHK(m_nSegmentPending == 0);
; 1575 :     DEBUGCHK(m_nSegmentFramesPending == 0);
; 1576 : 
; 1577 :     // Save transfer info
; 1578 :     m_epAddr = epAddr;
; 1579 :     m_fnAddr = fnAddr;
; 1580 :     m_epType = epType;
; 1581 :     m_epMaxPkt = epMaxPkt;
; 1582 : 
; 1583 :     m_pvTransferBuffer = (UINT8 *)pvBuffer;
; 1584 :     m_paTransferBuffer = paBuffer;
; 1585 :     m_nTransferLength = nLength;
; 1586 :     m_nTransferFrames = nFrames;
; 1587 :     m_pTransferFrameLengths = pnFrameLengths;
; 1588 :     m_pdwIsochErrors = pdwIsochErrors;

  00118	e59d3040	 ldr         r3, [sp, #0x40]

; 1589 :     m_pdwIsochLengths = pdwIsochLengths;

  0011c	e59d2044	 ldr         r2, [sp, #0x44]

; 1590 :     m_nTransferOptions = nOptions;

  00120	e59d1048	 ldr         r1, [sp, #0x48]

; 1591 :     m_pTransferCookie1 = pCookie1;
; 1592 :     m_pTransferCookie2 = pCookie2;

  00124	e5843080	 str         r3, [r4, #0x80]

; 1593 :     m_nTransferComplete = 0;

  00128	e5dd3000	 ldrb        r3, [sp]
  0012c	e59d004c	 ldr         r0, [sp, #0x4C]
  00130	e59de050	 ldr         lr, [sp, #0x50]
  00134	e5c43060	 strb        r3, [r4, #0x60]
  00138	e5dd3001	 ldrb        r3, [sp, #1]
  0013c	e5842084	 str         r2, [r4, #0x84]
  00140	e3a02000	 mov         r2, #0
  00144	e5c43061	 strb        r3, [r4, #0x61]
  00148	e5dd3002	 ldrb        r3, [sp, #2]
  0014c	e584108c	 str         r1, [r4, #0x8C]
  00150	e5840090	 str         r0, [r4, #0x90]
  00154	e5c43062	 strb        r3, [r4, #0x62]

; 1594 :     m_nTransferFramesComplete = 0;
; 1595 :     m_nSegmentPending = 0;
; 1596 :     m_nSegmentFramesPending = 0;
; 1597 : 
; 1598 :     BOOL fIsRndisMode;
; 1599 :     if (!IsIso())

  00158	e3530001	 cmp         r3, #1
  0015c	e584e094	 str         lr, [r4, #0x94]
  00160	e1c486b4	 strh        r8, [r4, #0x64]
  00164	e584b06c	 str         r11, [r4, #0x6C]
  00168	e584a070	 str         r10, [r4, #0x70]
  0016c	e5845088	 str         r5, [r4, #0x88]
  00170	e5847074	 str         r7, [r4, #0x74]
  00174	e5846078	 str         r6, [r4, #0x78]
  00178	e5842098	 str         r2, [r4, #0x98]
  0017c	e584209c	 str         r2, [r4, #0x9C]
  00180	e58420a0	 str         r2, [r4, #0xA0]
  00184	e58420a4	 str         r2, [r4, #0xA4]
  00188	0a000006	 beq         |$LN8@IssueTrans@2|

; 1600 :         fIsRndisMode = ((m_epMaxPkt & 0x3f) == 0) &&
; 1601 :                        (m_nTransferLength <= 0x10000);

  0018c	e318003f	 tst         r8, #0x3F
  00190	1a000004	 bne         |$LN8@IssueTrans@2|
  00194	e3550801	 cmp         r5, #1, 16

; 1604 : 
; 1605 :     if (fIsRndisMode)
; 1606 :         m_nMaxBD = 0x10000;

  00198	93a03801	 movls       r3, #1, 16
  0019c	95843068	 strls       r3, [r4, #0x68]
  001a0	93a01001	 movls       r1, #1
  001a4	9a000001	 bls         |$LN5@IssueTrans@2|
  001a8		 |$LN8@IssueTrans@2|

; 1602 :     else
; 1603 :         fIsRndisMode = FALSE;

  001a8	e3a01000	 mov         r1, #0

; 1607 :     else
; 1608 :         m_nMaxBD = m_epMaxPkt;

  001ac	e5848068	 str         r8, [r4, #0x68]
  001b0		 |$LN5@IssueTrans@2|

; 1609 : 
; 1610 :     DEBUGMSG(CPPI_DBG_RX,
; 1611 :         (L" CCppiDmaTxChannel::IssueTransfer: RndisMode %d, epMaxPkt %u, MaxBD %u\r\n",
; 1612 :          fIsRndisMode, m_epMaxPkt, m_nMaxBD));
; 1613 : 
; 1614 :     UpdateRndisMode(fIsRndisMode);

  001b0	e1a00004	 mov         r0, r4
  001b4	eb000000	 bl          |?UpdateRndisMode@CCppiDmaChannel@@IAAXH@Z|

; 1615 : 
; 1616 :     if (!IsIso())

  001b8	e5d43062	 ldrb        r3, [r4, #0x62]
  001bc	e3530001	 cmp         r3, #1
  001c0	0a00000c	 beq         |$LN1@IssueTrans@2|

; 1617 :     {
; 1618 :         if (m_nTransferLength)

  001c4	e5943088	 ldr         r3, [r4, #0x88]
  001c8	e3530000	 cmp         r3, #0
  001cc	0a000007	 beq         |$LN3@IssueTrans@2|

; 1619 :         {
; 1620 :             m_nTransferFrames = m_nTransferLength / m_nMaxBD;

  001d0	e5940068	 ldr         r0, [r4, #0x68]
  001d4	e1a01003	 mov         r1, r3
  001d8	eb000000	 bl          __rt_udiv
  001dc	e5840074	 str         r0, [r4, #0x74]
  001e0	e3510000	 cmp         r1, #0

; 1621 : 
; 1622 :             if (m_nTransferLength % m_nMaxBD)

  001e4	0a000003	 beq         |$LN1@IssueTrans@2|

; 1623 :             {
; 1624 :                 m_nTransferFrames ++;

  001e8	e2803001	 add         r3, r0, #1

; 1625 :             }
; 1626 :         }
; 1627 :         else

  001ec	ea000000	 b           |$LN61@IssueTrans@2|
  001f0		 |$LN3@IssueTrans@2|

; 1628 :         {
; 1629 :             m_nTransferFrames = 1;

  001f0	e3a03001	 mov         r3, #1
  001f4		 |$LN61@IssueTrans@2|
  001f4	e5843074	 str         r3, [r4, #0x74]
  001f8		 |$LN1@IssueTrans@2|

; 1630 :         }
; 1631 :     }
; 1632 : 
; 1633 :     DEBUGMSG(CPPI_DBG_TX,
; 1634 :         (L" CCppiDmaTxChannel::IssueTransfer: Length %u, %u frames, options 0x%08x\r\n",
; 1635 :         m_nTransferLength,
; 1636 :         m_nTransferFrames,
; 1637 :         m_nTransferOptions));
; 1638 : 
; 1639 :     m_pCppiChannelRegs->TXGCR =
; 1640 :         BIT31 | /* Enable */ /*
; 1641 :         qmgr |
; 1642 :         qnum? */ USB_CPPI_TXCMPL_QNUM_HOST;

  001f8	e594301c	 ldr         r3, [r4, #0x1C]
  001fc	e3a021fe	 mov         r2, #0xFE, 2

; 1643 : 
; 1644 :     // Schedule next transfer
; 1645 :     fResult = ScheduleTransfer();

  00200	e1a00004	 mov         r0, r4
  00204	e5832000	 str         r2, [r3]
  00208	eb000000	 bl          |?ScheduleTransfer@CCppiDmaTxChannel@@QAAHXZ|
  0020c	e1a09000	 mov         r9, r0
  00210		 |$_done$39489|

; 1646 : 
; 1647 : _done:
; 1648 : 
; 1649 :     // Go unsafe
; 1650 :     ChUnlock();

  00210	e2840044	 add         r0, r4, #0x44
  00214	eb000000	 bl          LeaveCriticalSection
  00218		 |$_doneUnsafe$39468|

; 1653 :     DEBUGMSG(CPPI_DBG_TX || ZONE_VERBOSE,
; 1654 :         (L"-CCppiDmaTxChannel::IssueTransfer\r\n"));
; 1655 : 
; 1656 :     return fResult;
; 1657 : }

  00218	e1a00009	 mov         r0, r9
  0021c	e28dd004	 add         sp, sp, #4
  00220	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00224	e12fff1e	 bx          lr
  00228		 |$LN66@IssueTrans@2|
  00228		 |$LN67@IssueTrans@2|
  00228	00000000	 DCD         |??_C@_1IO@KMDCDODB@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@|
  0022c		 |$LN68@IssueTrans@2|
  0022c	00000000	 DCD         |??_C@_1LC@HEKKLHBN@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@|
  00230		 |$LN69@IssueTrans@2|
  00230	00000000	 DCD         |??_C@_1KK@CLDEICMA@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@|
  00234		 |$LN70@IssueTrans@2|
  00234	00000000	 DCD         |??_C@_1KI@KBHLFCKP@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@|
  00238		 |$LN71@IssueTrans@2|
  00238	00000000	 DCD         |??_C@_1KO@GEJIKLBO@?$AA?5?$AAC?$AAC?$AAp?$AAp?$AAi?$AAD?$AAm?$AAa?$AAT?$AAx?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe@|
  0023c		 |$M41683|

			 ENDP  ; |?IssueTransfer@CCppiDmaTxChannel@@UAAHEEEGPAXIIIPAIPAK2I00@Z|, CCppiDmaTxChannel::IssueTransfer

	END
