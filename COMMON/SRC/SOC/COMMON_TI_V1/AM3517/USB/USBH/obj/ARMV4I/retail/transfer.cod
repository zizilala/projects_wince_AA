; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\USB\USBH\transfer.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?VaToPa@CPhysMem@@QAAKPAE@Z|		; CPhysMem::VaToPa
; File c:\wince600\public\common\oak\drivers\usb\hcd\usb20\usb2com\cphysmem.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36401| DCD	|$LN5@VaToPa|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?VaToPa@CPhysMem@@QAAKPAE@Z| PROC	; CPhysMem::VaToPa

; 184  : {

  00000		 |$LN5@VaToPa|
  00000		 |$M36398|

; 185  :     DEBUGCHK( virtAddr != NULL );
; 186  :     ASSERT((DWORD)m_pPhysicalBufferAddr <=(DWORD)virtAddr && (DWORD)virtAddr <(DWORD) m_pPhysicalBufferAddr + m_cbTotal);
; 187  :     return ULONG(ULONG(virtAddr) + m_PaVaConversion);

  00000	e5903034	 ldr         r3, [r0, #0x34]
  00004	e0830001	 add         r0, r3, r1

; 188  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M36399|

			 ENDP  ; |?VaToPa@CPhysMem@@QAAKPAE@Z|, CPhysMem::VaToPa

	EXPORT	|?IncIndex@TDQueue@@QBAKK@Z|		; TDQueue::IncIndex
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\transfer.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36415| DCD	|$LN7@IncIndex|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IncIndex@TDQueue@@QBAKK@Z| PROC	; TDQueue::IncIndex

; 144  :     DWORD   IncIndex(DWORD dwIndex) const {

  00000		 |$LN7@IncIndex|
  00000		 |$M36412|

; 145  :         dwIndex++;
; 146  :         return (dwIndex<m_dwNumOfTD?dwIndex:0);

  00000	e5903004	 ldr         r3, [r0, #4]
  00004	e2810001	 add         r0, r1, #1
  00008	e1500003	 cmp         r0, r3
  0000c	23a00000	 movcs       r0, #0

; 147  :     }

  00010	e12fff1e	 bx          lr
  00014		 |$M36413|

			 ENDP  ; |?IncIndex@TDQueue@@QBAKK@Z|, TDQueue::IncIndex

	EXPORT	|?IsTDQueueFull@TDQueue@@QBAHXZ|	; TDQueue::IsTDQueueFull

  00000			 AREA	 |.pdata|, PDATA
|$T36436| DCD	|$LN11@IsTDQueueF|
	DCD	0x40000a00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsTDQueueFull@TDQueue@@QBAHXZ| PROC	; TDQueue::IsTDQueueFull

; 148  :     BOOL IsTDQueueFull() const {

  00000		 |$LN11@IsTDQueueF|
  00000		 |$M36433|

; 149  :         return ( IncIndex(m_dwTailIndex) == m_dwHeadIndex);

  00000	e5903020	 ldr         r3, [r0, #0x20]
  00004	e5902004	 ldr         r2, [r0, #4]
  00008	e2831001	 add         r1, r3, #1
  0000c	e590301c	 ldr         r3, [r0, #0x1C]
  00010	e1510002	 cmp         r1, r2
  00014	23a01000	 movcs       r1, #0
  00018	e1510003	 cmp         r1, r3
  0001c	03a00001	 moveq       r0, #1
  00020	13a00000	 movne       r0, #0

; 150  :     }

  00024	e12fff1e	 bx          lr
  00028		 |$M36434|

			 ENDP  ; |?IsTDQueueFull@TDQueue@@QBAHXZ|, TDQueue::IsTDQueueFull

	EXPORT	|??0CTransfer@@QAA@QAVCQueuedPipe@@USTRANSFER@@PAV0@@Z| ; CTransfer::CTransfer
	IMPORT	|__C_specific_handler|
	IMPORT	|memcpy|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\transfer.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T36461| DCD	|$LN19@CTransfer|
	DCD	0xc0002d05

  00000			 AREA	 |.pdata|, PDATA
|$T36463| DCD	|$LN7@CTransfer|
	DCD	0x40000301

  00000			 AREA	 |.xdata|, DATA
|$T36459| DCD	0x1
	DCD	|$LN11@CTransfer|
	DCD	|$LN12@CTransfer|
	DCD	|$LN7@CTransfer|
	DCD	|$LN8@CTransfer|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T36459|

  00008		 |??0CTransfer@@QAA@QAVCQueuedPipe@@USTRANSFER@@PAV0@@Z| PROC ; CTransfer::CTransfer

; 45   : {

  00008		 |$LN19@CTransfer|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d000f	 stmdb       sp!, {r0 - r3}
  00010	e92d5810	 stmdb       sp!, {r4, r11, r12, lr}
  00014	e28db010	 add         r11, sp, #0x10
  00018	e24dd004	 sub         sp, sp, #4
  0001c		 |$LN17@CTransfer|
  0001c	e1a0e001	 mov         lr, r1
  00020	e1a04000	 mov         r4, r0
  00024	e58b4000	 str         r4, [r11]
  00028	e59b3050	 ldr         r3, [r11, #0x50]

; 46   :     m_Transfer = sTransfer;

  0002c	e28b1008	 add         r1, r11, #8
  00030	e3a02048	 mov         r2, #0x48
  00034	e584304c	 str         r3, [r4, #0x4C]
  00038	e584e048	 str         lr, [r4, #0x48]
  0003c	eb000000	 bl          memcpy

; 47   :     if ( m_Transfer.lpvControlHeader!=NULL ) { // Control Transfer

  00040	e5943010	 ldr         r3, [r4, #0x10]
  00044	e3530000	 cmp         r3, #0

; 50   :     }
; 51   :     else {

  00048	e3a01000	 mov         r1, #0

; 48   :         m_dwNextToQueueIndex = m_dwNextToCompleteIndex=(DWORD)-1; // Need Setup.

  0004c	13e03000	 mvnne       r3, #0

; 49   :         m_bNeedStatus = m_bNeedStatusComplete = TRUE;

  00050	13a02001	 movne       r2, #1
  00054	15843054	 strne       r3, [r4, #0x54]
  00058	15843050	 strne       r3, [r4, #0x50]
  0005c	15842064	 strne       r2, [r4, #0x64]
  00060	15842060	 strne       r2, [r4, #0x60]

; 52   :         m_dwNextToQueueIndex=m_dwNextToCompleteIndex=0; // Need Setup.

  00064	05841054	 streq       r1, [r4, #0x54]
  00068	05841050	 streq       r1, [r4, #0x50]

; 53   :         m_bNeedStatus = m_bNeedStatusComplete = FALSE;

  0006c	05841064	 streq       r1, [r4, #0x64]
  00070	05841060	 streq       r1, [r4, #0x60]

; 54   :     };
; 55   :     m_dwQueueTD =0;

  00074	e5841058	 str         r1, [r4, #0x58]

; 56   :     m_dwFirstError=USB_NO_ERROR;

  00078	e584105c	 str         r1, [r4, #0x5C]
  0007c		 |$LN11@CTransfer|

; 57   : #pragma prefast(disable: 322, "Recover gracefully from hardware failure")
; 58   :     __try { // initializing transfer status parameters
; 59   :         *m_Transfer.lpfComplete = FALSE;

  0007c	e594303c	 ldr         r3, [r4, #0x3C]
  00080	e3a02c01	 mov         r2, #1, 24

; 60   :         *m_Transfer.lpdwBytesTransferred = 0;
; 61   :         *m_Transfer.lpdwError = USB_NOT_COMPLETE_ERROR;

  00084	e3822003	 orr         r2, r2, #3
  00088	e5831000	 str         r1, [r3]
  0008c	e5943040	 ldr         r3, [r4, #0x40]
  00090	e5831000	 str         r1, [r3]
  00094	e5943044	 ldr         r3, [r4, #0x44]
  00098	e5832000	 str         r2, [r3]
  0009c		 |$LN12@CTransfer|
  0009c	ea000002	 b           |$LN6@CTransfer|
  000a0		 |$LN8@CTransfer|

; 62   :     } __except( EXCEPTION_EXECUTE_HANDLER ) {

  000a0	e59b4000	 ldr         r4, [r11]
  000a4	ea000000	 b           |$LN6@CTransfer|
  000a8		 |$LN16@CTransfer|

; 63   :     }
; 64   : #pragma prefast(pop)
; 65   : };

  000a8	e51b4014	 ldr         r4, [r11, #-0x14]
  000ac		 |$LN6@CTransfer|
  000ac	e1a00004	 mov         r0, r4
  000b0	e24bd010	 sub         sp, r11, #0x10
  000b4	e89d6810	 ldmia       sp, {r4, r11, sp, lr}
  000b8	e12fff1e	 bx          lr

			 ENDP  ; |??0CTransfer@@QAA@QAVCQueuedPipe@@USTRANSFER@@PAV0@@Z|, CTransfer::CTransfer

  000bc		 |$LN7@CTransfer|
  000bc		 |$LN18@CTransfer|

; 62   :     } __except( EXCEPTION_EXECUTE_HANDLER ) {

  000bc	e52de004	 str         lr, [sp, #-4]!
  000c0		 |$LN10@CTransfer|
  000c0		 |$LN21@CTransfer|
  000c0	e3a00001	 mov         r0, #1
  000c4		 |$LN9@CTransfer|
  000c4	e49df004	 ldr         pc, [sp], #4
  000c8		 |$LN22@CTransfer|
  000c8		 |$LN20@CTransfer|
	EXPORT	|?ScheduleTD@CTransfer@@QAAHXZ|		; CTransfer::ScheduleTD

  00000			 AREA	 |.pdata|, PDATA
|$T36476| DCD	|$LN5@ScheduleTD|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ScheduleTD@CTransfer@@QAAHXZ| PROC	; CTransfer::ScheduleTD

; 77   : {

  00000		 |$LN5@ScheduleTD|
  00000		 |$M36473|

; 78   :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 79   : }

  00004	e12fff1e	 bx          lr
  00008		 |$M36474|

			 ENDP  ; |?ScheduleTD@CTransfer@@QAAHXZ|, CTransfer::ScheduleTD

	EXPORT	|?DoneTD@CTransfer@@QAAHXZ|		; CTransfer::DoneTD

  00000			 AREA	 |.pdata|, PDATA
|$T36485| DCD	|$LN5@DoneTD|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DoneTD@CTransfer@@QAAHXZ| PROC	; CTransfer::DoneTD

; 91   : {

  00000		 |$LN5@DoneTD|
  00000		 |$M36482|

; 92   :     return FALSE;

  00000	e3a00000	 mov         r0, #0

; 93   : };

  00004	e12fff1e	 bx          lr
  00008		 |$M36483|

			 ENDP  ; |?DoneTD@CTransfer@@QAAHXZ|, CTransfer::DoneTD

	EXPORT	|?Canceled@CTransfer@@QAAHXZ|		; CTransfer::Canceled

  00000			 AREA	 |.pdata|, PDATA
|$T36507| DCD	|$LN18@Canceled|
	DCD	0xc0001d04

  00000			 AREA	 |.pdata|, PDATA
|$T36509| DCD	|$LN6@Canceled|
	DCD	0x40000301

  00000			 AREA	 |.xdata|, DATA
|$T36505| DCD	0x1
	DCD	|$LN10@Canceled|
	DCD	|$LN11@Canceled|
	DCD	|$LN6@Canceled|
	DCD	|$LN7@Canceled|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T36505|

  00008		 |?Canceled@CTransfer@@QAAHXZ| PROC	; CTransfer::Canceled

; 96   : {

  00008		 |$LN18@Canceled|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5810	 stmdb       sp!, {r4, r11, r12, lr}
  00010	e28db010	 add         r11, sp, #0x10
  00014	e24dd004	 sub         sp, sp, #4
  00018		 |$LN16@Canceled|
  00018	e1a04000	 mov         r4, r0
  0001c		 |$LN10@Canceled|

; 97   :     __try { // initializing transfer status parameters
; 98   :         m_dwNextToQueueIndex=m_dwNextToCompleteIndex=m_Transfer.dwBufferSize;

  0001c	e5943024	 ldr         r3, [r4, #0x24]

; 99   :         *m_Transfer.lpfComplete = TRUE;

  00020	e3a01001	 mov         r1, #1
  00024	e3a02c01	 mov         r2, #1, 24
  00028	e5843054	 str         r3, [r4, #0x54]

; 100  :         *m_Transfer.lpdwError = USB_CANCELED_ERROR;

  0002c	e3822001	 orr         r2, r2, #1
  00030	e5843050	 str         r3, [r4, #0x50]
  00034	e594303c	 ldr         r3, [r4, #0x3C]
  00038	e5831000	 str         r1, [r3]
  0003c	e5943044	 ldr         r3, [r4, #0x44]
  00040	e5832000	 str         r2, [r3]

; 101  :         if (m_Transfer.lpfnCallback ) {

  00044	e5943004	 ldr         r3, [r4, #4]
  00048	e3530000	 cmp         r3, #0
  0004c	0a000004	 beq         |$LN11@Canceled|

; 102  :             ( *m_Transfer.lpfnCallback )( m_Transfer.lpvCallbackParameter );

  00050	e5940008	 ldr         r0, [r4, #8]
  00054	e1a0e00f	 mov         lr, pc
  00058	e12fff13	 bx          r3

; 103  :             m_Transfer.lpfnCallback =NULL;

  0005c	e3a03000	 mov         r3, #0
  00060	e5843004	 str         r3, [r4, #4]
  00064		 |$LN11@Canceled|
  00064		 |$LN7@Canceled|

; 106  :         DEBUGMSG( ZONE_ERROR, (TEXT("CTransfer::DoneTD()(%s)::exception setting transfer status to complete\n"), m_rPipe->GetPipeType() ) );
; 107  :     }
; 108  : 
; 109  :     return TRUE;

  00064	e3a00001	 mov         r0, #1
  00068	ea000000	 b           |$LN3@Canceled|
  0006c		 |$LN15@Canceled|
  0006c	e51b0014	 ldr         r0, [r11, #-0x14]
  00070		 |$LN3@Canceled|

; 110  : 
; 111  : }

  00070	e24bd010	 sub         sp, r11, #0x10
  00074	e89d6810	 ldmia       sp, {r4, r11, sp, lr}
  00078	e12fff1e	 bx          lr

			 ENDP  ; |?Canceled@CTransfer@@QAAHXZ|, CTransfer::Canceled

  0007c		 |$LN6@Canceled|
  0007c		 |$LN17@Canceled|

; 104  :         }
; 105  :     } __except( EXCEPTION_EXECUTE_HANDLER ) {

  0007c	e52de004	 str         lr, [sp, #-4]!
  00080		 |$LN9@Canceled|
  00080		 |$LN20@Canceled|
  00080	e3a00001	 mov         r0, #1
  00084		 |$LN8@Canceled|
  00084	e49df004	 ldr         pc, [sp], #4
  00088		 |$LN21@Canceled|
  00088		 |$LN19@Canceled|
	EXPORT	|??0TDQueue@@QAA@QAVCPhysMem@@KK@Z|	; TDQueue::TDQueue

  00000			 AREA	 |.pdata|, PDATA
|$T36526| DCD	|$LN5@TDQueue|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0TDQueue@@QAA@QAVCPhysMem@@KK@Z| PROC ; TDQueue::TDQueue

; 117  : {

  00000		 |$LN5@TDQueue|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36523|

; 118  :     m_pTDQueue = NULL;

  00004	e3a0e000	 mov         lr, #0

; 119  :     m_pBuffer = NULL;

  00008	e580e014	 str         lr, [r0, #0x14]
  0000c	e880400e	 stmia       r0, {r1 - r3, lr}

; 120  : };

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M36524|

			 ENDP  ; |??0TDQueue@@QAA@QAVCPhysMem@@KK@Z|, TDQueue::TDQueue

	EXPORT	|?QueueDeInit@TDQueue@@QAAXXZ|		; TDQueue::QueueDeInit
	IMPORT	|?FreeMemory@CPhysMem@@QAAXQAEKK@Z|	; CPhysMem::FreeMemory

  00000			 AREA	 |.pdata|, PDATA
|$T36534| DCD	|$LN7@QueueDeIni|
	DCD	0x40001701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?QueueDeInit@TDQueue@@QAAXXZ| PROC	; TDQueue::QueueDeInit

; 126  : {

  00000		 |$LN7@QueueDeIni|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36531|
  00004	e1a04000	 mov         r4, r0

; 127  :     if (m_pBuffer) {

  00008	e5943014	 ldr         r3, [r4, #0x14]
  0000c	e3a05000	 mov         r5, #0
  00010	e1b01003	 movs        r1, r3
  00014	0a000005	 beq         |$LN2@QueueDeIni|

; 128  :         m_pCPhysMem->FreeMemory(m_pBuffer,m_pBufferPhysAddr,CPHYSMEM_FLAG_NOBLOCK);

  00018	e5942018	 ldr         r2, [r4, #0x18]
  0001c	e5940000	 ldr         r0, [r4]
  00020	e3a03002	 mov         r3, #2
  00024	eb000000	 bl          |?FreeMemory@CPhysMem@@QAAXQAEKK@Z|

; 129  :         m_pBuffer=NULL;

  00028	e5845014	 str         r5, [r4, #0x14]

; 130  :         m_pBufferPhysAddr = 0;

  0002c	e5845018	 str         r5, [r4, #0x18]
  00030		 |$LN2@QueueDeIni|

; 131  :     }
; 132  :     if (m_pTDQueue) {

  00030	e594300c	 ldr         r3, [r4, #0xC]
  00034	e1b01003	 movs        r1, r3
  00038	0a000005	 beq         |$LN1@QueueDeIni|

; 133  :         m_pCPhysMem->FreeMemory((PBYTE)m_pTDQueue,m_pTDQueuePhysAddr,CPHYSMEM_FLAG_NOBLOCK);

  0003c	e5942010	 ldr         r2, [r4, #0x10]
  00040	e5940000	 ldr         r0, [r4]
  00044	e3a03002	 mov         r3, #2
  00048	eb000000	 bl          |?FreeMemory@CPhysMem@@QAAXQAEKK@Z|

; 134  :         m_pTDQueue = NULL;

  0004c	e584500c	 str         r5, [r4, #0xC]

; 135  :         m_pTDQueuePhysAddr = 0;

  00050	e5845010	 str         r5, [r4, #0x10]
  00054		 |$LN1@QueueDeIni|

; 136  :     }
; 137  : }

  00054	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M36532|

			 ENDP  ; |?QueueDeInit@TDQueue@@QAAXXZ|, TDQueue::QueueDeInit

	EXPORT	|?QueueInit@TDQueue@@QAAHXZ|		; TDQueue::QueueInit
	IMPORT	|?AllocateMemory@CPhysMem@@QAAHKQAPAEKPAH@Z| ; CPhysMem::AllocateMemory
	IMPORT	|memset|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\transfer.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36562| DCD	|$LN25@QueueInit|
	DCD	0x40005b02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\transfer.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?QueueInit@TDQueue@@QAAHXZ| PROC	; TDQueue::QueueInit

; 139  : {

  00000		 |$LN25@QueueInit|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36559|
  00008	e1a04000	 mov         r4, r0

; 140  :     if (m_pTDQueue==NULL) {

  0000c	e594300c	 ldr         r3, [r4, #0xC]
  00010	e3a06000	 mov         r6, #0
  00014	e3530000	 cmp         r3, #0
  00018	1a000012	 bne         |$LN8@QueueInit|

; 141  :         if (!m_pCPhysMem->AllocateMemory( DEBUG_PARAM( TEXT("IssueTransfer TDs") )
; 142  :                                 m_dwNumOfTD *sizeof(TD),
; 143  :                                 (PUCHAR *) &m_pTDQueue,
; 144  :                                 CPHYSMEM_FLAG_NOBLOCK))  {

  0001c	e5942004	 ldr         r2, [r4, #4]
  00020	e5940000	 ldr         r0, [r4]
  00024	e3a03002	 mov         r3, #2
  00028	e1a01282	 mov         r1, r2, lsl #5
  0002c	e284200c	 add         r2, r4, #0xC
  00030	e58d6000	 str         r6, [sp]
  00034	eb000000	 bl          |?AllocateMemory@CPhysMem@@QAAHKQAPAEKPAH@Z|
  00038	e3500000	 cmp         r0, #0

; 145  :             DEBUGMSG( ZONE_WARNING, (TEXT("TDQueue::TDQueue - no memory for TD list\n") ) );
; 146  :             m_pTDQueue= NULL;

  0003c	0584600c	 streq       r6, [r4, #0xC]
  00040	0a000008	 beq         |$LN8@QueueInit|

; 147  :         }
; 148  :         else {
; 149  :             m_pTDQueuePhysAddr = m_pCPhysMem->VaToPa((PBYTE) m_pTDQueue );

  00044	e5943000	 ldr         r3, [r4]
  00048	e594000c	 ldr         r0, [r4, #0xC]

; 150  :             memset (  m_pTDQueue , 0, m_dwNumOfTD *sizeof(TD));

  0004c	e5942004	 ldr         r2, [r4, #4]
  00050	e5933034	 ldr         r3, [r3, #0x34]
  00054	e3a01000	 mov         r1, #0
  00058	e1a02282	 mov         r2, r2, lsl #5
  0005c	e0833000	 add         r3, r3, r0
  00060	e5843010	 str         r3, [r4, #0x10]
  00064	eb000000	 bl          memset
  00068		 |$LN8@QueueInit|

; 151  :         }
; 152  :     }
; 153  :     if (m_pBuffer==NULL) {

  00068	e5943014	 ldr         r3, [r4, #0x14]
  0006c	e3530000	 cmp         r3, #0
  00070	1a00000e	 bne         |$LN5@QueueInit|

; 154  :         if (!m_pCPhysMem->AllocateMemory( DEBUG_PARAM( TEXT("IssueTransfer TDs") )
; 155  :                                 m_dwNumOfTD * m_dwTDBufferSize ,
; 156  :                                 (PUCHAR *) &m_pBuffer,
; 157  :                                 CPHYSMEM_FLAG_NOBLOCK))  {

  00074	e594e008	 ldr         lr, [r4, #8]
  00078	e5941004	 ldr         r1, [r4, #4]
  0007c	e5940000	 ldr         r0, [r4]
  00080	e3a03002	 mov         r3, #2
  00084	e001019e	 mul         r1, lr, r1
  00088	e2842014	 add         r2, r4, #0x14
  0008c	e58d6000	 str         r6, [sp]
  00090	eb000000	 bl          |?AllocateMemory@CPhysMem@@QAAHKQAPAEKPAH@Z|
  00094	e3500000	 cmp         r0, #0

; 158  :             DEBUGMSG( ZONE_WARNING, (TEXT("TDQueue::TDQueue - no memory for TD list\n") ) );
; 159  :             m_pBuffer= NULL;
; 160  :         }
; 161  :         else
; 162  :             m_pBufferPhysAddr =  m_pCPhysMem->VaToPa(m_pBuffer);

  00098	15943000	 ldrne       r3, [r4]
  0009c	05846014	 streq       r6, [r4, #0x14]
  000a0	15942014	 ldrne       r2, [r4, #0x14]
  000a4	15933034	 ldrne       r3, [r3, #0x34]
  000a8	10833002	 addne       r3, r3, r2
  000ac	15843018	 strne       r3, [r4, #0x18]
  000b0		 |$LN5@QueueInit|

; 163  :     }
; 164  :     m_dwHeadIndex = m_dwTailIndex = 0;
; 165  :     if  ( m_pTDQueue!=NULL && m_pBuffer!=NULL ) {

  000b0	e594300c	 ldr         r3, [r4, #0xC]
  000b4	e5846020	 str         r6, [r4, #0x20]
  000b8	e584601c	 str         r6, [r4, #0x1C]
  000bc	e3530000	 cmp         r3, #0
  000c0	0a000025	 beq         |$LN4@QueueInit|
  000c4	e5943014	 ldr         r3, [r4, #0x14]
  000c8	e3530000	 cmp         r3, #0
  000cc	0a000022	 beq         |$LN4@QueueInit|

; 166  :         for (DWORD dwIndex=0;dwIndex< m_dwNumOfTD;dwIndex++) {

  000d0	e5943004	 ldr         r3, [r4, #4]
  000d4	e3a0e000	 mov         lr, #0
  000d8	e3530000	 cmp         r3, #0
  000dc	9a00001a	 bls         |$LN1@QueueInit|
  000e0	e3a05000	 mov         r5, #0
  000e4		 |$LL3@QueueInit|

; 167  :             (m_pTDQueue+dwIndex)->bfDiscard=1;

  000e4	e594300c	 ldr         r3, [r4, #0xC]
  000e8	e1a02005	 mov         r2, r5

; 168  :             (m_pTDQueue+dwIndex)->paNextTd.phys =  m_pTDQueuePhysAddr + sizeof(TD) * IncIndex(dwIndex);

  000ec	e28ee001	 add         lr, lr, #1
  000f0	e7b23003	 ldr         r3, [r2, +r3]!
  000f4	e3833801	 orr         r3, r3, #1, 16
  000f8	e5823000	 str         r3, [r2]
  000fc	e5943004	 ldr         r3, [r4, #4]
  00100	e594100c	 ldr         r1, [r4, #0xC]
  00104	e15e0003	 cmp         lr, r3
  00108	e5943010	 ldr         r3, [r4, #0x10]
  0010c	31a0200e	 movcc       r2, lr
  00110	23a02000	 movcs       r2, #0
  00114	e0832282	 add         r2, r3, r2, lsl #5
  00118	e0853001	 add         r3, r5, r1
  0011c	e5832008	 str         r2, [r3, #8]

; 169  :             (m_pTDQueue+dwIndex)->paCurBuffer = m_pBufferPhysAddr + m_dwTDBufferSize * m_dwTailIndex;

  00120	e5940020	 ldr         r0, [r4, #0x20]
  00124	e5941008	 ldr         r1, [r4, #8]
  00128	e5943018	 ldr         r3, [r4, #0x18]
  0012c	e594200c	 ldr         r2, [r4, #0xC]
  00130	e0213190	 mla         r1, r0, r1, r3
  00134	e0853002	 add         r3, r5, r2
  00138	e2855020	 add         r5, r5, #0x20
  0013c	e5831004	 str         r1, [r3, #4]
  00140	e5943004	 ldr         r3, [r4, #4]
  00144	e15e0003	 cmp         lr, r3
  00148	3affffe5	 bcc         |$LL3@QueueInit|
  0014c		 |$LN1@QueueInit|

; 170  :         }
; 171  :         m_dwHeadIndex = m_dwTailIndex = 0;

  0014c	e5846020	 str         r6, [r4, #0x20]
  00150	e584601c	 str         r6, [r4, #0x1C]

; 172  :         return TRUE;

  00154	e3a00001	 mov         r0, #1
  00158	ea000000	 b           |$LN11@QueueInit|
  0015c		 |$LN4@QueueInit|

; 173  :     }
; 174  :     return FALSE;

  0015c	e3a00000	 mov         r0, #0
  00160		 |$LN11@QueueInit|

; 175  : }

  00160	e28dd004	 add         sp, sp, #4
  00164	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00168	e12fff1e	 bx          lr
  0016c		 |$M36560|

			 ENDP  ; |?QueueInit@TDQueue@@QAAHXZ|, TDQueue::QueueInit

	EXPORT	|?QueueDisable@TDQueue@@QAAHXZ|		; TDQueue::QueueDisable

  00000			 AREA	 |.pdata|, PDATA
|$T36575| DCD	|$LN11@QueueDisab|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?QueueDisable@TDQueue@@QAAHXZ| PROC	; TDQueue::QueueDisable

; 177  : {

  00000		 |$LN11@QueueDisab|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36572|

; 178  :     if  ( m_pTDQueue!=NULL && m_pBuffer!=NULL ) {

  00004	e590300c	 ldr         r3, [r0, #0xC]
  00008	e3530000	 cmp         r3, #0
  0000c	0a000011	 beq         |$LN1@QueueDisab|
  00010	e5903014	 ldr         r3, [r0, #0x14]
  00014	e3530000	 cmp         r3, #0
  00018	0a00000e	 beq         |$LN1@QueueDisab|

; 179  :         for (DWORD dwIndex=0;dwIndex< m_dwNumOfTD;dwIndex++) {

  0001c	e5903004	 ldr         r3, [r0, #4]
  00020	e3a0e000	 mov         lr, #0
  00024	e3530000	 cmp         r3, #0
  00028	9a00000a	 bls         |$LN1@QueueDisab|
  0002c	e3a01000	 mov         r1, #0
  00030		 |$LL3@QueueDisab|

; 180  :             (m_pTDQueue+dwIndex)->bfDiscard=1;

  00030	e590300c	 ldr         r3, [r0, #0xC]
  00034	e1a02001	 mov         r2, r1
  00038	e28ee001	 add         lr, lr, #1
  0003c	e7b23003	 ldr         r3, [r2, +r3]!
  00040	e2811020	 add         r1, r1, #0x20
  00044	e3833801	 orr         r3, r3, #1, 16
  00048	e5823000	 str         r3, [r2]
  0004c	e5903004	 ldr         r3, [r0, #4]
  00050	e15e0003	 cmp         lr, r3
  00054	3afffff5	 bcc         |$LL3@QueueDisab|
  00058		 |$LN1@QueueDisab|

; 181  :         }
; 182  :     }
; 183  :     return TRUE;

  00058	e3a00001	 mov         r0, #1

; 184  : }

  0005c	e49de004	 ldr         lr, [sp], #4
  00060	e12fff1e	 bx          lr
  00064		 |$M36573|

			 ENDP  ; |?QueueDisable@TDQueue@@QAAHXZ|, TDQueue::QueueDisable

	EXPORT	|?InitTDQueueTailTD@TDQueue@@QAAHPAVCTransfer@@PAVCQueuedPipe@@EKGKKH@Z| ; TDQueue::InitTDQueueTailTD
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\transfer.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36635| DCD	|$LN30@InitTDQueu|
	DCD	0x40005201
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\transfer.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InitTDQueueTailTD@TDQueue@@QAAHPAVCTransfer@@PAVCQueuedPipe@@EKGKKH@Z| PROC ; TDQueue::InitTDQueueTailTD

; 196  : {

  00000		 |$LN30@InitTDQueu|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M36632|
  00004	e1a06003	 mov         r6, r3
  00008	e1a05002	 mov         r5, r2

; 197  :     if (IsTDQueueFull() || m_pTDQueue==NULL || m_pBuffer == NULL)

  0000c	e590e020	 ldr         lr, [r0, #0x20]
  00010	e5904004	 ldr         r4, [r0, #4]
  00014	e590301c	 ldr         r3, [r0, #0x1C]
  00018	e28ee001	 add         lr, lr, #1
  0001c	e15e0004	 cmp         lr, r4
  00020	23a0e000	 movcs       lr, #0
  00024	e15e0003	 cmp         lr, r3
  00028	0a000043	 beq         |$LN3@InitTDQueu|
  0002c	e590300c	 ldr         r3, [r0, #0xC]
  00030	e1b02003	 movs        r2, r3
  00034	0a000040	 beq         |$LN3@InitTDQueu|
  00038	e5903014	 ldr         r3, [r0, #0x14]
  0003c	e3530000	 cmp         r3, #0
  00040	0a00003d	 beq         |$LN3@InitTDQueu|

; 199  :     TD * pTD = m_pTDQueue + m_dwTailIndex;

  00044	e5903020	 ldr         r3, [r0, #0x20]
  00048	e082e283	 add         lr, r2, r3, lsl #5

; 200  : 
; 201  :     // not really part of the TD
; 202  :     pTD->pTransfer = pTransfer;

  0004c	e58e1010	 str         r1, [lr, #0x10]

; 203  :     pTD->pNextTd =  m_pTDQueue + IncIndex(m_dwTailIndex);

  00050	e5903020	 ldr         r3, [r0, #0x20]
  00054	e5902004	 ldr         r2, [r0, #4]
  00058	e2831001	 add         r1, r3, #1
  0005c	e590300c	 ldr         r3, [r0, #0xC]
  00060	e1510002	 cmp         r1, r2

; 204  :     pTD->pPipe = pPipe;
; 205  :     pTD->bfIsIsoch = 0;
; 206  :     pTD->bfDiscard = 0;

  00064	e59e2000	 ldr         r2, [lr]
  00068	23a01000	 movcs       r1, #0
  0006c	e0833281	 add         r3, r3, r1, lsl #5
  00070	e3c24803	 bic         r4, r2, #3, 16
  00074	e58e4000	 str         r4, [lr]
  00078	e58e3014	 str         r3, [lr, #0x14]
  0007c	e58e5018	 str         r5, [lr, #0x18]

; 207  : 
; 208  :     // the actual TD (null is legal for the last TD)
; 209  :     pTD->paNextTd.phys = m_pTDQueuePhysAddr + sizeof(TD) * IncIndex(m_dwTailIndex);

  00080	e5903020	 ldr         r3, [r0, #0x20]
  00084	e5902004	 ldr         r2, [r0, #4]
  00088	e2831001	 add         r1, r3, #1

; 210  : 
; 211  : //    DEBUGCHK( InterruptOnComplete == 0 || InterruptOnComplete == 7 );
; 212  :     pTD->bfShortPacketOk = bShortPacketOk;

  0008c	e59d3020	 ldr         r3, [sp, #0x20]
  00090	e1510002	 cmp         r1, r2
  00094	e5902010	 ldr         r2, [r0, #0x10]

; 213  :     pTD->bfDelayInterrupt = InterruptOnComplete ? gcTdInterruptOnComplete : gcTdNoInterrupt;

  00098	e0243903	 eor         r3, r4, r3, lsl #18
  0009c	e2033701	 and         r3, r3, #1, 14
  000a0	23a01000	 movcs       r1, #0
  000a4	e0235004	 eor         r5, r3, r4
  000a8	e0823281	 add         r3, r2, r1, lsl #5
  000ac	e58e3008	 str         r3, [lr, #8]

; 214  :     pTD->bfDataToggle = DataToggle;
; 215  :     pTD->bfErrorCount = 0;
; 216  :     pTD->bfConditionCode = USB_NOT_ACCESSED_ERROR;
; 217  : 
; 218  :     DEBUGCHK( PID == TD_IN_PID ||
; 219  :               PID == TD_OUT_PID ||
; 220  :               PID == TD_SETUP_PID );
; 221  :     pTD->bfPID = PID;

  000b0	e1dd31b4	 ldrh        r3, [sp, #0x14]
  000b4	e3560000	 cmp         r6, #0
  000b8	13a04000	 movne       r4, #0
  000bc	e2033003	 and         r3, r3, #3
  000c0	e59d1010	 ldr         r1, [sp, #0x10]
  000c4	e3e0201f	 mvn         r2, #0x1F
  000c8	03a04007	 moveq       r4, #7
  000cc	e1832002	 orr         r2, r3, r2
  000d0	e2043007	 and         r3, r4, #7
  000d4	e1832182	 orr         r2, r3, r2, lsl #3
  000d8	e3e044ff	 mvn         r4, #0xFF, 8
  000dc	e2013003	 and         r3, r1, #3
  000e0	e224173e	 eor         r1, r4, #0x3E, 14

; 222  :     DWORD phAddr = (paBuffer==0? (m_pBufferPhysAddr + m_dwTDBufferSize * m_dwTailIndex):paBuffer);

  000e4	e59d4018	 ldr         r4, [sp, #0x18]
  000e8	e1832102	 orr         r2, r3, r2, lsl #2
  000ec	e0053001	 and         r3, r5, r1
  000f0	e1833982	 orr         r3, r3, r2, lsl #19
  000f4	e3540000	 cmp         r4, #0
  000f8	e58e5000	 str         r5, [lr]
  000fc	e58e3000	 str         r3, [lr]
  00100	05901020	 ldreq       r1, [r0, #0x20]
  00104	05902008	 ldreq       r2, [r0, #8]
  00108	05903018	 ldreq       r3, [r0, #0x18]

; 223  :     if (MaxLength == 0 ) {
; 224  :         // zero-length transfer
; 225  :         pTD->paCurBuffer = 0;
; 226  :         pTD->paBufferEnd = 0;
; 227  :     } else {
; 228  :         DEBUGCHK( MaxLength <= 0x2000 /*8K*/ );
; 229  :         pTD->paCurBuffer = phAddr;
; 230  :         pTD->paBufferEnd = phAddr+MaxLength-1;
; 231  :     }
; 232  :     return TRUE;

  0010c	e3a00001	 mov         r0, #1
  00110	00243291	 mlaeq       r4, r1, r2, r3
  00114	e59d301c	 ldr         r3, [sp, #0x1C]
  00118	e3530000	 cmp         r3, #0
  0011c	03a03000	 moveq       r3, #0
  00120	058e3004	 streq       r3, [lr, #4]
  00124	10843003	 addne       r3, r4, r3
  00128	12433001	 subne       r3, r3, #1
  0012c	e58e300c	 str         r3, [lr, #0xC]
  00130	158e4004	 strne       r4, [lr, #4]

; 233  : };

  00134	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00138	e12fff1e	 bx          lr
  0013c		 |$LN3@InitTDQueu|

; 198  :         return FALSE;

  0013c	e3a00000	 mov         r0, #0

; 233  : };

  00140	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00144	e12fff1e	 bx          lr
  00148		 |$M36633|

			 ENDP  ; |?InitTDQueueTailTD@TDQueue@@QAAHPAVCTransfer@@PAVCQueuedPipe@@EKGKKH@Z|, TDQueue::InitTDQueueTailTD

	EXPORT	|??1TDQueue@@QAA@XZ|			; TDQueue::~TDQueue

  00000			 AREA	 |.pdata|, PDATA
|$T36643| DCD	|$LN5@TDQueue@2|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1TDQueue@@QAA@XZ| PROC		; TDQueue::~TDQueue

; 122  : {

  00000		 |$LN5@TDQueue@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36640|

; 123  :     QueueDeInit();

  00004	eb000000	 bl          |?QueueDeInit@TDQueue@@QAAXXZ|

; 124  : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M36641|

			 ENDP  ; |??1TDQueue@@QAA@XZ|, TDQueue::~TDQueue

	END
