; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\USB\USBH\cpipe.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T37225| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37222|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M37223|

			 ENDP  ; |SetEvent|

	EXPORT	|??0CPipeAbs@@QAA@E@Z|			; CPipeAbs::CPipeAbs
	EXPORT	|??_7CPipeAbs@@6B@| [ DATA ]		; CPipeAbs::`vftable'
	EXPORT	|?ChangeMaxPacketSize@CPipeAbs@@UAAXG@Z| ; CPipeAbs::ChangeMaxPacketSize
	IMPORT	|??_ECPipeAbs@@UAAPAXI@Z|, WEAK |??_GCPipeAbs@@UAAPAXI@Z| ; CPipeAbs::`vector deleting destructor', CPipeAbs::`scalar deleting destructor'
	IMPORT	|_purecall|
; File c:\wince600\public\common\oak\drivers\usb\hcd\usb20\usb2com\pipeabs.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37236| DCD	|$LN5@CPipeAbs|
	DCD	0x40000600

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CPipeAbs@@6B@| DCD |??_ECPipeAbs@@UAAPAXI@Z|	; CPipeAbs::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|?ChangeMaxPacketSize@CPipeAbs@@UAAXG@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CPipeAbs@@QAA@E@Z| PROC		; CPipeAbs::CPipeAbs

; 27   :     CPipeAbs(UCHAR const bEndpointAddress):m_bEndpointAddress(bEndpointAddress) {;};

  00000		 |$LN5@CPipeAbs|
  00000		 |$M37233|
  00000	e1a02000	 mov         r2, r0
  00004	e59f3008	 ldr         r3, [pc, #8]
  00008	e5c21004	 strb        r1, [r2, #4]
  0000c	e5823000	 str         r3, [r2]
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@CPipeAbs|
  00014		 |$LN7@CPipeAbs|
  00014	00000000	 DCD         |??_7CPipeAbs@@6B@|
  00018		 |$M37234|

			 ENDP  ; |??0CPipeAbs@@QAA@E@Z|, CPipeAbs::CPipeAbs

	EXPORT	|??1CPipeAbs@@UAA@XZ|			; CPipeAbs::~CPipeAbs

  00000			 AREA	 |.pdata|, PDATA
|$T37246| DCD	|$LN5@CPipeAbs@2|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CPipeAbs@@UAA@XZ| PROC		; CPipeAbs::~CPipeAbs

; 28   :     virtual ~CPipeAbs() {;};

  00000		 |$LN5@CPipeAbs@2|
  00000		 |$M37243|
  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5803000	 str         r3, [r0]
  00008	e12fff1e	 bx          lr
  0000c		 |$LN6@CPipeAbs@2|
  0000c		 |$LN7@CPipeAbs@2|
  0000c	00000000	 DCD         |??_7CPipeAbs@@6B@|
  00010		 |$M37244|

			 ENDP  ; |??1CPipeAbs@@UAA@XZ|, CPipeAbs::~CPipeAbs


  00000			 AREA	 |.pdata|, PDATA
|$T37255| DCD	|$LN5@ChangeMaxP|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ChangeMaxPacketSize@CPipeAbs@@UAAXG@Z| PROC ; CPipeAbs::ChangeMaxPacketSize

; 61   :     virtual void ChangeMaxPacketSize( IN const USHORT ) {ASSERT(FALSE);}; // only available for Controller endpoint

  00000		 |$LN5@ChangeMaxP|
  00000		 |$M37252|
  00000	e12fff1e	 bx          lr
  00004		 |$M37253|

			 ENDP  ; |?ChangeMaxPacketSize@CPipeAbs@@UAAXG@Z|, CPipeAbs::ChangeMaxPacketSize

	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T37269| DCD	|$LN8@scalar|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCPipeAbs@@UAAPAXI@Z| PROC		; CPipeAbs::`scalar deleting destructor'
  00000		 |$LN8@scalar|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37266|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3014	 ldr         r3, [pc, #0x14]
  0000c	e3110001	 tst         r1, #1
  00010	e5843000	 str         r3, [r4]
  00014	1b000000	 blne        |??3@YAXPAX@Z|
  00018	e1a00004	 mov         r0, r4
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN9@scalar|
  00024		 |$LN10@scalar|
  00024	00000000	 DCD         |??_7CPipeAbs@@6B@|
  00028		 |$M37267|

			 ENDP  ; |??_GCPipeAbs@@UAAPAXI@Z|, CPipeAbs::`scalar deleting destructor'

	EXPORT	|?LockProcessingThread@CHW@@QAAXXZ|	; CHW::LockProcessingThread
	IMPORT	|EnterCriticalSection|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\chw.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37279| DCD	|$LN5@LockProces|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?LockProcessingThread@CHW@@QAAXXZ| PROC ; CHW::LockProcessingThread

; 124  :     void LockProcessingThread() { EnterCriticalSection(&m_csUsbProcLock); }

  00000		 |$LN5@LockProces|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37276|
  00004	e2800f89	 add         r0, r0, #0x89, 30
  00008	eb000000	 bl          EnterCriticalSection
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M37277|

			 ENDP  ; |?LockProcessingThread@CHW@@QAAXXZ|, CHW::LockProcessingThread

	EXPORT	|?UnlockProcessingThread@CHW@@QAAXXZ|	; CHW::UnlockProcessingThread
	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T37287| DCD	|$LN5@UnlockProc|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UnlockProcessingThread@CHW@@QAAXXZ| PROC ; CHW::UnlockProcessingThread

; 125  :     void UnlockProcessingThread() { LeaveCriticalSection(&m_csUsbProcLock); }

  00000		 |$LN5@UnlockProc|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37284|
  00004	e2800f89	 add         r0, r0, #0x89, 30
  00008	eb000000	 bl          LeaveCriticalSection
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M37285|

			 ENDP  ; |?UnlockProcessingThread@CHW@@QAAXXZ|, CHW::UnlockProcessingThread

	EXPORT	|?IncrementPipeCount@CHCCArea@@QAAXXZ|	; CHCCArea::IncrementPipeCount
	IMPORT	|InterlockedIncrement|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37295| DCD	|$LN5@IncrementP|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IncrementPipeCount@CHCCArea@@QAAXXZ| PROC ; CHCCArea::IncrementPipeCount

; 304  :     void        IncrementPipeCount() {InterlockedIncrement(&m_dwPipeCount);};

  00000		 |$LN5@IncrementP|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37292|
  00004	eb000000	 bl          InterlockedIncrement
  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M37293|

			 ENDP  ; |?IncrementPipeCount@CHCCArea@@QAAXXZ|, CHCCArea::IncrementPipeCount

	EXPORT	|?DecrementPipeCount@CHCCArea@@QAAXXZ|	; CHCCArea::DecrementPipeCount
	IMPORT	|InterlockedDecrement|

  00000			 AREA	 |.pdata|, PDATA
|$T37303| DCD	|$LN5@DecrementP|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DecrementPipeCount@CHCCArea@@QAAXXZ| PROC ; CHCCArea::DecrementPipeCount

; 305  :     void        DecrementPipeCount() {InterlockedDecrement(&m_dwPipeCount);};

  00000		 |$LN5@DecrementP|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37300|
  00004	eb000000	 bl          InterlockedDecrement
  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M37301|

			 ENDP  ; |?DecrementPipeCount@CHCCArea@@QAAXXZ|, CHCCArea::DecrementPipeCount

	EXPORT	|?GetUSBED@CPipe@@QAAPAU_USBED@@XZ|	; CPipe::GetUSBED

  00000			 AREA	 |.pdata|, PDATA
|$T37313| DCD	|$LN5@GetUSBED|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetUSBED@CPipe@@QAAPAU_USBED@@XZ| PROC ; CPipe::GetUSBED

; 401  :     USBED* GetUSBED() { return m_pUSBED; };

  00000		 |$LN5@GetUSBED|
  00000		 |$M37310|
  00000	e5900020	 ldr         r0, [r0, #0x20]
  00004	e12fff1e	 bx          lr
  00008		 |$M37311|

			 ENDP  ; |?GetUSBED@CPipe@@QAAPAU_USBED@@XZ|, CPipe::GetUSBED

	EXPORT	|??0CHCCArea@@QAA@QAVCPhysMem@@@Z|	; CHCCArea::CHCCArea
	IMPORT	|InitializeCriticalSection|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T37324| DCD	|$LN5@CHCCArea|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CHCCArea@@QAA@QAVCPhysMem@@@Z| PROC ; CHCCArea::CHCCArea

; 75   : {

  00000		 |$LN5@CHCCArea|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37321|
  00004	e1a04000	 mov         r4, r0

; 76   :     // Initialise parameters
; 77   :     m_pFinalQH = NULL;

  00008	e3a03000	 mov         r3, #0

; 78   : #ifdef DEBUG
; 79   :     m_debug_TDMemoryAllocated = 0;
; 80   :     m_debug_QHMemoryAllocated = 0;
; 81   :     m_debug_BufferMemoryAllocated = 0;
; 82   :     m_debug_ControlExtraMemoryAllocated = 0;
; 83   : #endif // DEBUG
; 84   :     m_dwPipeCount = 0;
; 85   :     m_pDoneHead = 0;
; 86   :     InitializeCriticalSection( &m_csQHScheduleLock );

  0000c	e2840008	 add         r0, r4, #8
  00010	e584311c	 str         r3, [r4, #0x11C]
  00014	e5843000	 str         r3, [r4]
  00018	e5843120	 str         r3, [r4, #0x120]
  0001c	e5841004	 str         r1, [r4, #4]
  00020	eb000000	 bl          InitializeCriticalSection

; 87   : }

  00024	e1a00004	 mov         r0, r4
  00028	e8bd4010	 ldmia       sp!, {r4, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37322|

			 ENDP  ; |??0CHCCArea@@QAA@QAVCPhysMem@@@Z|, CHCCArea::CHCCArea

	EXPORT	|?Initialize@CHCCArea@@QAAHPAVCOhcd@@@Z| ; CHCCArea::Initialize

  00000			 AREA	 |.pdata|, PDATA
|$T37333| DCD	|$LN5@Initialize|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Initialize@CHCCArea@@QAAHPAVCOhcd@@@Z| PROC ; CHCCArea::Initialize

; 111  : {

  00000		 |$LN5@Initialize|
  00000		 |$M37330|

; 112  :     DEBUGMSG( ZONE_PIPE,(L"+CHCCArea::Initialize\n\r"));
; 113  :     UNREFERENCED_PARAMETER(pCOhcd);
; 114  :     DEBUGCHK(m_dwPipeCount == 0);
; 115  :     DEBUGMSG( ZONE_PIPE,(L"-CHCCArea::Initialize\n\r"));
; 116  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 117  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37331|

			 ENDP  ; |?Initialize@CHCCArea@@QAAHPAVCOhcd@@@Z|, CHCCArea::Initialize

	EXPORT	|?WaitForPipes@CHCCArea@@QAAHK@Z|	; CHCCArea::WaitForPipes
	IMPORT	|Sleep|
	IMPORT	|GetTickCount|

  00000			 AREA	 |.pdata|, PDATA
|$T37351| DCD	|$LN14@WaitForPip|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WaitForPipes@CHCCArea@@QAAHK@Z| PROC	; CHCCArea::WaitForPipes

; 152  : {

  00000		 |$LN14@WaitForPip|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M37348|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 153  :     BOOL rc = FALSE;

  0000c	e3a04000	 mov         r4, #0

; 154  :     DWORD tc0 = GetTickCount();

  00010	eb000000	 bl          GetTickCount

; 155  :     DEBUGMSG( ZONE_PIPE,(L"+CHCCArea::WaitForPipes(%d)\n\r", dwTimeout));
; 156  : 
; 157  :     while ((m_dwPipeCount) && ((GetTickCount() - tc0) < dwTimeout)) 

  00014	e1a07000	 mov         r7, r0
  00018	ea000005	 b           |$LN11@WaitForPip|
  0001c		 |$LL4@WaitForPip|
  0001c	eb000000	 bl          GetTickCount
  00020	e0403007	 sub         r3, r0, r7
  00024	e1530006	 cmp         r3, r6
  00028	2a000004	 bcs         |$LN9@WaitForPip|

; 158  :     {
; 159  :         DEBUGMSG( ZONE_PIPE,(L"CHCCArea::WaitForPipes: m_dwPipeCount = %d\n\r", m_dwPipeCount));
; 160  :         Sleep(10);

  0002c	e3a0000a	 mov         r0, #0xA
  00030	eb000000	 bl          Sleep
  00034		 |$LN11@WaitForPip|
  00034	e5953000	 ldr         r3, [r5]
  00038	e3530000	 cmp         r3, #0
  0003c	1afffff6	 bne         |$LL4@WaitForPip|
  00040		 |$LN9@WaitForPip|

; 161  :     }
; 162  : 
; 163  :     if(m_dwPipeCount == 0)

  00040	e5953000	 ldr         r3, [r5]
  00044	e3530000	 cmp         r3, #0

; 164  :         rc = TRUE;

  00048	03a04001	 moveq       r4, #1

; 165  :     else
; 166  :         DEBUGMSG(ZONE_WARNING, (L"CHCCArea::WaitForPipes: timed out waiting for pipes to close\n\r"));
; 167  : 
; 168  :     DEBUGMSG( ZONE_PIPE,(L"-CHCCArea::WaitForPipes(%d)\n\r", rc));
; 169  :     return rc;
; 170  : }

  0004c	e1a00004	 mov         r0, r4
  00050	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M37349|

			 ENDP  ; |?WaitForPipes@CHCCArea@@QAAHK@Z|, CHCCArea::WaitForPipes

	EXPORT	|?HandleReclamationLoadChange@CHCCArea@@QAAXH@Z| ; CHCCArea::HandleReclamationLoadChange

  00000			 AREA	 |.pdata|, PDATA
|$T37358| DCD	|$LN5@HandleRecl|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HandleReclamationLoadChange@CHCCArea@@QAAXH@Z| PROC ; CHCCArea::HandleReclamationLoadChange

; 199  : {

  00000		 |$LN5@HandleRecl|
  00000		 |$M37355|

; 200  :     // important that this be static - this variable tracks the total
; 201  :     // number of reclamation transfers in progress on the USB
; 202  :     DEBUGMSG( ZONE_TRANSFER, (TEXT("+CHCCArea::HandleReclamationLoadChange - %s\n\r"), ((fAddingTransfer) ? TEXT("Add Reclamation Transfer") : TEXT("Remove Reclamation Transfer")) ) );
; 203  :     UNREFERENCED_PARAMETER(fAddingTransfer);
; 204  :     DEBUGMSG( ZONE_TRANSFER, (TEXT("-CHCCArea::HandleReclamationLoadChange - %s\n\r"), ((fAddingTransfer) ? TEXT("Add Reclamation Transfer") : TEXT("Remove Reclamation Transfer")) ) );
; 205  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M37356|

			 ENDP  ; |?HandleReclamationLoadChange@CHCCArea@@QAAXH@Z|, CHCCArea::HandleReclamationLoadChange

	EXPORT	|??0CPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z| ; CPipe::CPipe
	EXPORT	|??_7CPipe@@6B@| [ DATA ]		; CPipe::`vftable'
	EXPORT	|?IsPipeHalted@CPipe@@UAA?AW4HCD_REQUEST_STATUS@@QAH@Z| ; CPipe::IsPipeHalted
	EXPORT	|?ClearHaltedFlag@CPipe@@UAAXXZ|	; CPipe::ClearHaltedFlag
	EXPORT	|?GetType@CPipe@@UAA?AW4PIPE_TYPE@@XZ|	; CPipe::GetType
	EXPORT	|?GetMemoryAllocationFlags@CPipe@@MBAKXZ| ; CPipe::GetMemoryAllocationFlags
	IMPORT	|memcpy|
	IMPORT	|??_ECPipe@@UAAPAXI@Z|, WEAK |??_GCPipe@@UAAPAXI@Z| ; CPipe::`vector deleting destructor', CPipe::`scalar deleting destructor'
; File c:\wince600\public\common\oak\drivers\usb\hcd\usb20\usb2com\pipeabs.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37380| DCD	|$LN11@CPipe|
	DCD	0x40002a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CPipe@@6B@| DCD |??_ECPipe@@UAAPAXI@Z|		; CPipe::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|?IsPipeHalted@CPipe@@UAA?AW4HCD_REQUEST_STATUS@@QAH@Z|
	DCD	|?ClearHaltedFlag@CPipe@@UAAXXZ|
	DCD	|?ChangeMaxPacketSize@CPipeAbs@@UAAXG@Z|
	DCD	|?GetType@CPipe@@UAA?AW4PIPE_TYPE@@XZ|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|?GetMemoryAllocationFlags@CPipe@@MBAKXZ|
	DCD	|_purecall|
	DCD	|_purecall|
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z| PROC ; CPipe::CPipe

; 243  : {

  00000		 |$LN11@CPipe|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M37377|
  00004	e1a0b003	 mov         r11, r3
  00008	e1a09002	 mov         r9, r2
  0000c	e1a0a000	 mov         r10, r0
  00010	e5d1e002	 ldrb        lr, [r1, #2]
  00014	e59f4088	 ldr         r4, [pc, #0x88]
  00018	e5dd8028	 ldrb        r8, [sp, #0x28]
  0001c	e5dd502c	 ldrb        r5, [sp, #0x2C]
  00020	e59d6030	 ldr         r6, [sp, #0x30]
  00024	e5dd7024	 ldrb        r7, [sp, #0x24]
  00028	e5cae004	 strb        lr, [r10, #4]
  0002c	e58a4000	 str         r4, [r10]
  00030	e5d1e002	 ldrb        lr, [r1, #2]
  00034	e28a4018	 add         r4, r10, #0x18
  00038	e3a03000	 mov         r3, #0
  0003c	e28a0038	 add         r0, r10, #0x38
  00040	e3a02007	 mov         r2, #7
  00044	e5cae008	 strb        lr, [r10, #8]
  00048	e58a400c	 str         r4, [r10, #0xC]
  0004c	e5ca8010	 strb        r8, [r10, #0x10]
  00050	e5ca5011	 strb        r5, [r10, #0x11]
  00054	e58a6014	 str         r6, [r10, #0x14]
  00058	e5ca7018	 strb        r7, [r10, #0x18]
  0005c	e58a301c	 str         r3, [r10, #0x1C]
  00060	eb000000	 bl          memcpy
  00064	e3590000	 cmp         r9, #0
  00068	13a03001	 movne       r3, #1
  0006c	03a03000	 moveq       r3, #0
  00070	e35b0000	 cmp         r11, #0
  00074	e58a3040	 str         r3, [r10, #0x40]
  00078	13a03001	 movne       r3, #1
  0007c	03a03000	 moveq       r3, #0

; 244  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CPipe::CPipe\n\r")) );
; 245  :     // CPipe::Initialize should already have been called by now
; 246  :     // to set up the schedule and init static variables
; 247  : 
; 248  :     InitializeCriticalSection( &m_csPipeLock );

  00080	e3a04000	 mov         r4, #0
  00084	e28a0024	 add         r0, r10, #0x24
  00088	e58a3044	 str         r3, [r10, #0x44]
  0008c	e58a4048	 str         r4, [r10, #0x48]
  00090	eb000000	 bl          InitializeCriticalSection

; 249  :     m_fTransferInProgress= FALSE;

  00094	e58a404c	 str         r4, [r10, #0x4C]

; 250  : 
; 251  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CPipe::CPipe\n\r")) );
; 252  : }

  00098	e1a0000a	 mov         r0, r10
  0009c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN12@CPipe|
  000a4		 |$LN13@CPipe|
  000a4	00000000	 DCD         |??_7CPipe@@6B@|
  000a8		 |$M37378|

			 ENDP  ; |??0CPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|, CPipe::CPipe

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37391| DCD	|$LN5@GetType|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetType@CPipe@@UAA?AW4PIPE_TYPE@@XZ| PROC ; CPipe::GetType

; 381  :     virtual PIPE_TYPE GetType () { return TYPE_UNKNOWN; };

  00000		 |$LN5@GetType|
  00000		 |$M37388|
  00000	e3a00000	 mov         r0, #0
  00004	e12fff1e	 bx          lr
  00008		 |$M37389|

			 ENDP  ; |?GetType@CPipe@@UAA?AW4PIPE_TYPE@@XZ|, CPipe::GetType

	EXPORT	|??1CPipe@@UAA@XZ|			; CPipe::~CPipe
	IMPORT	|DeleteCriticalSection|
; File c:\wince600\public\common\oak\drivers\usb\hcd\usb20\usb2com\pipeabs.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37402| DCD	|$LN7@CPipe@2|
	DCD	0x40000b01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CPipe@@UAA@XZ| PROC		; CPipe::~CPipe

; 269  : {

  00000		 |$LN7@CPipe@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37399|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3018	 ldr         r3, [pc, #0x18]

; 270  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CPipe::~CPipe\n\r")) );
; 271  : 
; 272  :     // transfers should be aborted or closed before deleting object
; 273  :     DEBUGCHK( m_fTransferInProgress == FALSE );
; 274  :     DeleteCriticalSection( &m_csPipeLock );

  0000c	e4803024	 str         r3, [r0], #0x24
  00010	eb000000	 bl          DeleteCriticalSection

; 275  : 
; 276  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CPipe::~CPipe\n\r")) );
; 277  : }

  00014	e59f3008	 ldr         r3, [pc, #8]
  00018	e5843000	 str         r3, [r4]
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN8@CPipe@2|
  00024		 |$LN9@CPipe@2|
  00024	00000000	 DCD         |??_7CPipeAbs@@6B@|
  00028		 |$LN10@CPipe@2|
  00028	00000000	 DCD         |??_7CPipe@@6B@|
  0002c		 |$M37400|

			 ENDP  ; |??1CPipe@@UAA@XZ|, CPipe::~CPipe

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37421| DCD	|$LN8@IsPipeHalt|
	DCD	0x40000e01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsPipeHalted@CPipe@@UAA?AW4HCD_REQUEST_STATUS@@QAH@Z| PROC ; CPipe::IsPipeHalted

; 309  : {

  00000		 |$LN8@IsPipeHalt|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M37418|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 310  :     USBED *pED = GetUSBED();
; 311  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CPipe(%s)::IsPipeHalted\n\r"), GetPipeType()) );
; 312  : 
; 313  :     DEBUGCHK( lpbHalted ); // should be checked by COhcd
; 314  : 
; 315  :     EnterCriticalSection( &m_csPipeLock );

  0000c	e5946020	 ldr         r6, [r4, #0x20]
  00010	e2840024	 add         r0, r4, #0x24
  00014	eb000000	 bl          EnterCriticalSection

; 316  :     if (lpbHalted!=NULL)

  00018	e3550000	 cmp         r5, #0

; 317  :         *lpbHalted = pED->bfHalted;

  0001c	15963024	 ldrne       r3, [r6, #0x24]

; 318  :     LeaveCriticalSection( &m_csPipeLock );

  00020	e2840024	 add         r0, r4, #0x24
  00024	15853000	 strne       r3, [r5]
  00028	eb000000	 bl          LeaveCriticalSection

; 319  : 
; 320  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CPipe(%s)::IsPipeHalted, *lpbHalted = %d, returning HCD_REQUEST_STATUS %d\n\r"), GetPipeType(), *lpbHalted, requestOK) );
; 321  :     return requestOK;

  0002c	e3a00001	 mov         r0, #1

; 322  : }

  00030	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M37419|

			 ENDP  ; |?IsPipeHalted@CPipe@@UAA?AW4HCD_REQUEST_STATUS@@QAH@Z|, CPipe::IsPipeHalted


  00000			 AREA	 |.pdata|, PDATA
|$T37429| DCD	|$LN5@ClearHalte|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ClearHaltedFlag@CPipe@@UAAXXZ| PROC	; CPipe::ClearHaltedFlag

; 334  : {

  00000		 |$LN5@ClearHalte|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37426|
  00004	e1a04000	 mov         r4, r0

; 335  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CPipe(%s)::ClearHaltedFlag\n\r"), GetPipeType() ) );
; 336  : 
; 337  :     EnterCriticalSection( &m_csPipeLock );

  00008	e2840024	 add         r0, r4, #0x24
  0000c	eb000000	 bl          EnterCriticalSection

; 338  :     m_pUSBED->bfHalted = FALSE;

  00010	e5943020	 ldr         r3, [r4, #0x20]
  00014	e3a02000	 mov         r2, #0

; 339  :     m_pUSBED->bfToggleCarry = FALSE;
; 340  :     LeaveCriticalSection( &m_csPipeLock );

  00018	e2840024	 add         r0, r4, #0x24
  0001c	e5832024	 str         r2, [r3, #0x24]
  00020	e5943020	 ldr         r3, [r4, #0x20]
  00024	e1c322b8	 strh        r2, [r3, #0x28]
  00028	eb000000	 bl          LeaveCriticalSection

; 341  : 
; 342  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CPipe(%s)::ClearHaltedFlag\n\r"), GetPipeType()) );
; 343  : }

  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M37427|

			 ENDP  ; |?ClearHaltedFlag@CPipe@@UAAXXZ|, CPipe::ClearHaltedFlag


  00000			 AREA	 |.pdata|, PDATA
|$T37438| DCD	|$LN5@GetMemoryA|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetMemoryAllocationFlags@CPipe@@MBAKXZ| PROC ; CPipe::GetMemoryAllocationFlags

; 360  : {

  00000		 |$LN5@GetMemoryA|
  00000		 |$M37435|

; 361  :     // default choice - not high priority, no blocking
; 362  :     return CPHYSMEM_FLAG_NOBLOCK;

  00000	e3a00002	 mov         r0, #2

; 363  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37436|

			 ENDP  ; |?GetMemoryAllocationFlags@CPipe@@MBAKXZ|, CPipe::GetMemoryAllocationFlags

	EXPORT	|??0CQueuedPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z| ; CQueuedPipe::CQueuedPipe
	EXPORT	|??_7CQueuedPipe@@6B@| [ DATA ]		; CQueuedPipe::`vftable'
	EXPORT	|?ClosePipe@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ| ; CQueuedPipe::ClosePipe
	EXPORT	|?IssueTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@EQ6AKPAX@ZQAXKQBXKKQBKK2K3QAK5QAH55@Z| ; CQueuedPipe::IssueTransfer
	EXPORT	|?AbortTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@Q6AKPAX@ZQAXPBX@Z| ; CQueuedPipe::AbortTransfer
	EXPORT	|?CheckForDoneTransfers@CQueuedPipe@@UAAHTTDLINK@@@Z| ; CQueuedPipe::CheckForDoneTransfers
	EXPORT	|?GetTdSize@CQueuedPipe@@UBA?BHXZ|	; CQueuedPipe::GetTdSize
	EXPORT	|?UpdateInterruptQHTreeLoad@CQueuedPipe@@MAAXEH@Z| ; CQueuedPipe::UpdateInterruptQHTreeLoad
	IMPORT	|??_ECQueuedPipe@@UAAPAXI@Z|, WEAK |??_GCQueuedPipe@@UAAPAXI@Z| ; CQueuedPipe::`vector deleting destructor', CQueuedPipe::`scalar deleting destructor'

  00000			 AREA	 |.pdata|, PDATA
|$T37451| DCD	|$LN5@CQueuedPip|
	DCD	0x40001702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CQueuedPipe@@6B@| DCD |??_ECQueuedPipe@@UAAPAXI@Z|	; CQueuedPipe::`vftable'
	DCD	|_purecall|
	DCD	|?ClosePipe@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?IssueTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@EQ6AKPAX@ZQAXKQBXKKQBKK2K3QAK5QAH55@Z|
	DCD	|?AbortTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@Q6AKPAX@ZQAXPBX@Z|
	DCD	|?IsPipeHalted@CPipe@@UAA?AW4HCD_REQUEST_STATUS@@QAH@Z|
	DCD	|?ClearHaltedFlag@CPipe@@UAAXXZ|
	DCD	|?ChangeMaxPacketSize@CPipeAbs@@UAAXG@Z|
	DCD	|?GetType@CPipe@@UAA?AW4PIPE_TYPE@@XZ|
	DCD	|?CheckForDoneTransfers@CQueuedPipe@@UAAHTTDLINK@@@Z|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|?GetTdSize@CQueuedPipe@@UBA?BHXZ|
	DCD	|_purecall|
	DCD	|?GetMemoryAllocationFlags@CPipe@@MBAKXZ|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|?UpdateInterruptQHTreeLoad@CQueuedPipe@@MAAXEH@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CQueuedPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z| PROC ; CQueuedPipe::CQueuedPipe

; 382  : {

  00000		 |$LN5@CQueuedPip|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M37448|
  00008	e1a07000	 mov         r7, r0
  0000c	e59de030	 ldr         lr, [sp, #0x30]
  00010	e5dd402c	 ldrb        r4, [sp, #0x2C]
  00014	e5dd5028	 ldrb        r5, [sp, #0x28]
  00018	e5dd6024	 ldrb        r6, [sp, #0x24]
  0001c	e58de00c	 str         lr, [sp, #0xC]
  00020	e58d4008	 str         r4, [sp, #8]
  00024	e58d5004	 str         r5, [sp, #4]
  00028	e58d6000	 str         r6, [sp]
  0002c	eb000000	 bl          |??0CPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|
  00030	e59f3020	 ldr         r3, [pc, #0x20]

; 383  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CQueuedPipe::CQueuedPipe\n\r")) );
; 384  :     m_pTransfer = NULL;

  00034	e3a02000	 mov         r2, #0
  00038	e5872050	 str         r2, [r7, #0x50]
  0003c	e5873000	 str         r3, [r7]

; 385  :     m_pLastTransfer = m_pFirstTransfer = NULL;

  00040	e5872054	 str         r2, [r7, #0x54]
  00044	e5872058	 str         r2, [r7, #0x58]

; 386  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CQueuedPipe::CQueuedPipe\n\r")) );
; 387  : }

  00048	e1a00007	 mov         r0, r7
  0004c	e28dd010	 add         sp, sp, #0x10
  00050	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$LN6@CQueuedPip|
  00058		 |$LN7@CQueuedPip|
  00058	00000000	 DCD         |??_7CQueuedPipe@@6B@|
  0005c		 |$M37449|

			 ENDP  ; |??0CQueuedPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|, CQueuedPipe::CQueuedPipe

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37462| DCD	|$LN5@GetTdSize|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetTdSize@CQueuedPipe@@UBA?BHXZ| PROC ; CQueuedPipe::GetTdSize

; 475  :     inline const int GetTdSize( void ) const { return sizeof(TD); };

  00000		 |$LN5@GetTdSize|
  00000		 |$M37459|
  00000	e3a00020	 mov         r0, #0x20
  00004	e12fff1e	 bx          lr
  00008		 |$M37460|

			 ENDP  ; |?GetTdSize@CQueuedPipe@@UBA?BHXZ|, CQueuedPipe::GetTdSize

	EXPORT	|??1CQueuedPipe@@UAA@XZ|		; CQueuedPipe::~CQueuedPipe
; File c:\wince600\public\common\oak\drivers\usb\hcd\usb20\usb2com\pipeabs.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37478| DCD	|$LN9@CQueuedPip@2|
	DCD	0x40000b01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CQueuedPipe@@UAA@XZ| PROC		; CQueuedPipe::~CQueuedPipe

; 401  : {

  00000		 |$LN9@CQueuedPip@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37475|
  00004	e1a04000	 mov         r4, r0

; 402  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CQueuedPipe::~CQueuedPipe\n\r")) );
; 403  :     // queue should be freed via ClosePipe before calling destructor
; 404  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CQueuedPipe::~CQueuedPipe\n\r")) );
; 405  : }

  00008	e59f3018	 ldr         r3, [pc, #0x18]
  0000c	e4803024	 str         r3, [r0], #0x24
  00010	eb000000	 bl          DeleteCriticalSection
  00014	e59f3008	 ldr         r3, [pc, #8]
  00018	e5843000	 str         r3, [r4]
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN10@CQueuedPip@2|
  00024		 |$LN11@CQueuedPip@2|
  00024	00000000	 DCD         |??_7CPipeAbs@@6B@|
  00028		 |$LN12@CQueuedPip@2|
  00028	00000000	 DCD         |??_7CPipe@@6B@|
  0002c		 |$M37476|

			 ENDP  ; |??1CQueuedPipe@@UAA@XZ|, CQueuedPipe::~CQueuedPipe

	IMPORT	|?FreeHostEndPoint@CHW@@QAAXIH@Z|	; CHW::FreeHostEndPoint
	IMPORT	|?FreeED@@YAXPAU_USBED@@@Z|		; FreeED
	IMPORT	|?FreeTD@@YAXPAU_USBTD@@@Z|		; FreeTD
	IMPORT	|?RemoveElementFromList@@YAHPAPAUListHead@@PAU1@@Z| ; RemoveElementFromList
	IMPORT	|?ReleaseChannel@CCppiDmaController@@QAAXPAVCCppiDmaChannel@@@Z| ; CCppiDmaController::ReleaseChannel
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37516| DCD	|$LN42@ClosePipe|
	DCD	0x40008401
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ClosePipe@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ| PROC ; CQueuedPipe::ClosePipe

; 420  : {

  00000		 |$LN42@ClosePipe|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M37513|
  00004	e1a06000	 mov         r6, r0

; 421  :     HCD_REQUEST_STATUS status = requestOK;
; 422  :     USBED *pED;
; 423  :     USBTD *pTD;
; 424  : 
; 425  :     DEBUGMSG( ZONE_PIPE, (TEXT("+CQueuedPipe(%s)::ClosePipe\n\r"), GetPipeType() ) );
; 426  :     // Delete outstanding transfer first.
; 427  :     EnterCriticalSection( &m_csPipeLock );

  00008	e2860024	 add         r0, r6, #0x24
  0000c	eb000000	 bl          EnterCriticalSection

; 428  :     m_pCOhcd->LockProcessingThread();

  00010	e5963014	 ldr         r3, [r6, #0x14]
  00014	e2830f89	 add         r0, r3, #0x89, 30
  00018	eb000000	 bl          EnterCriticalSection

; 429  : 
; 430  :     pED = GetUSBED();

  0001c	e5965020	 ldr         r5, [r6, #0x20]

; 431  :     /*stop processing transfer request on this endpoint*/
; 432  :     pED->bfSkip = 1;

  00020	e3a09001	 mov         r9, #1

; 433  : 
; 434  : #ifdef MUSB_USEDMA
; 435  : 
; 436  :     // Abort any pending DMA operations and release
; 437  :     // DMA channel
; 438  :     if (pED->pDmaChannel)

  00024	e3a08000	 mov         r8, #0
  00028	e5953034	 ldr         r3, [r5, #0x34]
  0002c	e5c5900c	 strb        r9, [r5, #0xC]
  00030	e1b01003	 movs        r1, r3
  00034	0a000003	 beq         |$LN24@ClosePipe|

; 439  :     {
; 440  :         m_pCOhcd->m_dmaCrtl.ReleaseChannel(pED->pDmaChannel);

  00038	e5963014	 ldr         r3, [r6, #0x14]
  0003c	e2830fca	 add         r0, r3, #0xCA, 30
  00040	eb000000	 bl          |?ReleaseChannel@CCppiDmaController@@QAAXPAVCCppiDmaChannel@@@Z|

; 441  :         pED->pDmaChannel = NULL;

  00044	e5858034	 str         r8, [r5, #0x34]
  00048		 |$LN24@ClosePipe|

; 442  :     }
; 443  : 
; 444  : #endif // MUSB_USEDMA
; 445  : 
; 446  :     /*free the NULL TD*/
; 447  :     RemoveElementFromList((ListHead**)&pED->HeadTD, (ListHead*)pED->TailTD);

  00048	e5951018	 ldr         r1, [r5, #0x18]
  0004c	e2850014	 add         r0, r5, #0x14
  00050	eb000000	 bl          |?RemoveElementFromList@@YAHPAPAUListHead@@PAU1@@Z|

; 448  :     FreeTD((USBTD*)pED->TailTD);

  00054	e5950018	 ldr         r0, [r5, #0x18]
  00058	eb000000	 bl          |?FreeTD@@YAXPAU_USBTD@@@Z|

; 449  : 
; 450  : 
; 451  :     /*free all the TD except the first TD of that endpoint*/
; 452  :     if(pED->HeadTD){

  0005c	e5953014	 ldr         r3, [r5, #0x14]
  00060	e3530000	 cmp         r3, #0
  00064	0a000018	 beq         |$LN21@ClosePipe|

; 453  :         pTD = (USBTD*)pED->HeadTD->next;

  00068	e5933000	 ldr         r3, [r3]
  0006c	e1b04003	 movs        r4, r3

; 454  :         while(pTD){

  00070	0a000015	 beq         |$LN21@ClosePipe|
  00074	e3a03c01	 mov         r3, #1, 24
  00078	e3837001	 orr         r7, r3, #1
  0007c		 |$LL22@ClosePipe|

; 455  :             RemoveElementFromList((ListHead**)&pED->HeadTD, (ListHead*)pTD);

  0007c	e1a01004	 mov         r1, r4
  00080	e2850014	 add         r0, r5, #0x14
  00084	eb000000	 bl          |?RemoveElementFromList@@YAHPAPAUListHead@@PAU1@@Z|

; 456  :             *pTD->sTransfer.lpfComplete = TRUE;

  00088	e5943040	 ldr         r3, [r4, #0x40]
  0008c	e5839000	 str         r9, [r3]

; 457  :             *pTD->sTransfer.lpdwError = USB_CANCELED_ERROR;

  00090	e5943048	 ldr         r3, [r4, #0x48]
  00094	e5837000	 str         r7, [r3]

; 458  :             if (pTD->sTransfer.lpfnCallback ) {

  00098	e5943008	 ldr         r3, [r4, #8]
  0009c	e3530000	 cmp         r3, #0
  000a0	0a000003	 beq         |$LN20@ClosePipe|

; 459  :                 ( *pTD->sTransfer.lpfnCallback )( pTD->sTransfer.lpvCallbackParameter );

  000a4	e594000c	 ldr         r0, [r4, #0xC]
  000a8	e1a0e00f	 mov         lr, pc
  000ac	e12fff13	 bx          r3

; 460  :                 pTD->sTransfer.lpfnCallback =NULL;

  000b0	e5848008	 str         r8, [r4, #8]
  000b4		 |$LN20@ClosePipe|

; 461  :             }
; 462  :             FreeTD(pTD);

  000b4	e1a00004	 mov         r0, r4
  000b8	eb000000	 bl          |?FreeTD@@YAXPAU_USBTD@@@Z|

; 463  :             pTD = (USBTD*)pED->HeadTD->next;

  000bc	e5953014	 ldr         r3, [r5, #0x14]
  000c0	e5933000	 ldr         r3, [r3]
  000c4	e1b04003	 movs        r4, r3
  000c8	1affffeb	 bne         |$LL22@ClosePipe|
  000cc		 |$LN21@ClosePipe|

; 464  :         }
; 465  :     }
; 466  : 
; 467  :     LeaveCriticalSection( &m_csPipeLock );

  000cc	e2860024	 add         r0, r6, #0x24
  000d0	eb000000	 bl          LeaveCriticalSection
  000d4		 |$LL19@ClosePipe|

; 468  : 
; 469  :     /*free the first TD of that endpoint*/
; 470  :     LPVOID lpCancelId;
; 471  :     do {
; 472  :         EnterCriticalSection( &m_csPipeLock );

  000d4	e2860024	 add         r0, r6, #0x24
  000d8	eb000000	 bl          EnterCriticalSection

; 473  :         pTD = (USBTD*)pED->HeadTD;

  000dc	e5953014	 ldr         r3, [r5, #0x14]

; 474  : 
; 475  :         if ( pTD) {
; 476  :             lpCancelId = (LPVOID)(pTD->sTransfer.lpvCancelId);
; 477  :         }
; 478  :         else
; 479  :             lpCancelId = NULL;
; 480  : 
; 481  :         LeaveCriticalSection( &m_csPipeLock );

  000e0	e2860024	 add         r0, r6, #0x24
  000e4	e1b04003	 movs        r4, r3
  000e8	15947034	 ldrne       r7, [r4, #0x34]
  000ec	03a07000	 moveq       r7, #0
  000f0	eb000000	 bl          LeaveCriticalSection

; 482  :         if (lpCancelId!=NULL)

  000f4	e3570000	 cmp         r7, #0
  000f8	0a000008	 beq         |$LN38@ClosePipe|

; 483  :             AbortTransfer( NULL, // callback function
; 484  :                            NULL, // callback param
; 485  :                            lpCancelId);

  000fc	e5961000	 ldr         r1, [r6]
  00100	e1a03007	 mov         r3, r7
  00104	e3a02000	 mov         r2, #0
  00108	e5914010	 ldr         r4, [r1, #0x10]
  0010c	e3a01000	 mov         r1, #0
  00110	e1a00006	 mov         r0, r6
  00114	e1a0e00f	 mov         lr, pc
  00118	e12fff14	 bx          r4

; 486  :     }while (lpCancelId!=NULL);

  0011c	eaffffec	 b           |$LL19@ClosePipe|
  00120		 |$LN38@ClosePipe|

; 487  : 
; 488  :     if(pTD)

  00120	e3540000	 cmp         r4, #0

; 489  :         FreeTD(pTD);

  00124	11a00004	 movne       r0, r4
  00128	1b000000	 blne        |?FreeTD@@YAXPAU_USBTD@@@Z|

; 490  : 
; 491  :     /*free ED*/
; 492  : 
; 493  :     switch(GetType())

  0012c	e5963000	 ldr         r3, [r6]
  00130	e1a00006	 mov         r0, r6
  00134	e5933020	 ldr         r3, [r3, #0x20]
  00138	e1a0e00f	 mov         lr, pc
  0013c	e12fff13	 bx          r3
  00140	e3500001	 cmp         r0, #1
  00144	0a00001d	 beq         |$LN10@ClosePipe|
  00148	e3500002	 cmp         r0, #2
  0014c	0a000013	 beq         |$LN9@ClosePipe|
  00150	e3500003	 cmp         r0, #3
  00154	0a000009	 beq         |$LN3@ClosePipe|
  00158	e3500004	 cmp         r0, #4
  0015c	1a00001b	 bne         |$LN11@ClosePipe|

; 504  : 
; 505  : #ifdef MUSB_USEDMA
; 506  : #ifdef MUSB_USEDMA_FOR_ISO
; 507  : 
; 508  :     case TYPE_ISOCHRONOUS:
; 509  :         if(pED->bfDirection == TD_IN_PID)

  00160	e5d53006	 ldrb        r3, [r5, #6]

; 510  :             RemoveElementFromList((ListHead**)&m_pCOhcd->m_pIsoInHead, (ListHead*)pED);

  00164	e1a01005	 mov         r1, r5
  00168	e3530002	 cmp         r3, #2
  0016c	e5963014	 ldr         r3, [r6, #0x14]
  00170	028300b8	 addeq       r0, r3, #0xB8
  00174	0a000014	 beq         |$LN39@ClosePipe|

; 511  :         else
; 512  :             RemoveElementFromList((ListHead**)&m_pCOhcd->m_pIsoOutHead, (ListHead*)pED);

  00178	e28300bc	 add         r0, r3, #0xBC

; 513  :         break;

  0017c	ea000012	 b           |$LN39@ClosePipe|
  00180		 |$LN3@ClosePipe|

; 514  : 
; 515  : #endif MUSB_USEDMA_FOR_ISO
; 516  : #endif MUSB_USEDMA
; 517  : 
; 518  :     case TYPE_INTERRUPT:
; 519  :         if(pED->bfDirection == TD_IN_PID)

  00180	e5d53006	 ldrb        r3, [r5, #6]

; 520  :             RemoveElementFromList((ListHead**)&m_pCOhcd->m_pIntInHead, (ListHead*)pED);

  00184	e1a01005	 mov         r1, r5
  00188	e3530002	 cmp         r3, #2
  0018c	e5963014	 ldr         r3, [r6, #0x14]
  00190	028300b0	 addeq       r0, r3, #0xB0
  00194	0a00000c	 beq         |$LN39@ClosePipe|

; 521  :         else
; 522  :             RemoveElementFromList((ListHead**)&m_pCOhcd->m_pIntOutHead, (ListHead*)pED);

  00198	e28300b4	 add         r0, r3, #0xB4

; 523  :         break;

  0019c	ea00000a	 b           |$LN39@ClosePipe|
  001a0		 |$LN9@ClosePipe|

; 497  :         break;
; 498  :     case TYPE_BULK:
; 499  :         if(pED->bfDirection == TD_IN_PID)

  001a0	e5d53006	 ldrb        r3, [r5, #6]

; 500  :             RemoveElementFromList((ListHead**)&m_pCOhcd->m_pBulkInHead, (ListHead*)pED);

  001a4	e1a01005	 mov         r1, r5
  001a8	e3530002	 cmp         r3, #2
  001ac	e5963014	 ldr         r3, [r6, #0x14]
  001b0	028300a8	 addeq       r0, r3, #0xA8
  001b4	0a000004	 beq         |$LN39@ClosePipe|

; 501  :         else
; 502  :             RemoveElementFromList((ListHead**)&m_pCOhcd->m_pBulkOutHead, (ListHead*)pED);

  001b8	e28300ac	 add         r0, r3, #0xAC

; 503  :         break;

  001bc	ea000002	 b           |$LN39@ClosePipe|
  001c0		 |$LN10@ClosePipe|

; 494  :     {
; 495  :     case TYPE_CONTROL:
; 496  :         RemoveElementFromList((ListHead**)&m_pCOhcd->m_pControlHead, (ListHead*)pED);

  001c0	e5963014	 ldr         r3, [r6, #0x14]
  001c4	e1a01005	 mov         r1, r5
  001c8	e28300a4	 add         r0, r3, #0xA4
  001cc		 |$LN39@ClosePipe|
  001cc	eb000000	 bl          |?RemoveElementFromList@@YAHPAPAUListHead@@PAU1@@Z|
  001d0		 |$LN11@ClosePipe|

; 524  :     }
; 525  : 
; 526  :     FreeED(pED);

  001d0	e1a00005	 mov         r0, r5
  001d4	eb000000	 bl          |?FreeED@@YAXPAU_USBED@@@Z|

; 527  : 
; 528  :     m_pCOhcd->FreeHostEndPoint(pED->bHostEndPointNum, USB_ENDPOINT_DIRECTION_IN(m_bEndpointAddress));

  001d8	e5d63008	 ldrb        r3, [r6, #8]
  001dc	e5d51010	 ldrb        r1, [r5, #0x10]
  001e0	e5960014	 ldr         r0, [r6, #0x14]
  001e4	e2032080	 and         r2, r3, #0x80
  001e8	eb000000	 bl          |?FreeHostEndPoint@CHW@@QAAXIH@Z|

; 529  : 
; 530  :     m_pCOhcd->UnlockProcessingThread();

  001ec	e5963014	 ldr         r3, [r6, #0x14]
  001f0	e2830f89	 add         r0, r3, #0x89, 30
  001f4	eb000000	 bl          LeaveCriticalSection

; 531  :     
; 532  :     m_pCOhcd->DecrementPipeCount();

  001f8	e5963014	 ldr         r3, [r6, #0x14]
  001fc	e2830e47	 add         r0, r3, #0x47, 28
  00200	eb000000	 bl          InterlockedDecrement

; 533  : 
; 534  :     DEBUGMSG( ZONE_PIPE, (TEXT("-CQueuedPipe(%s)::ClosePipe\n\r"), GetPipeType() ) );
; 535  :     return status;

  00204	e3a00001	 mov         r0, #1

; 536  : }

  00208	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  0020c	e12fff1e	 bx          lr
  00210		 |$M37514|

			 ENDP  ; |?ClosePipe@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|, CQueuedPipe::ClosePipe

	EXPORT	|??_C@_1CO@CLKPNAE@?$AA?$AN?$AA?6?$AAC?$AAo?$AAr?$AAr?$AAu?$AAp?$AAt?$AAe?$AAd?$AA?5?$AAq?$AAu?$AAe?$AAu?$AAe?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1MM@KNDAGOGH@?$AA?$AN?$AA?6?$AAC?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAS@| [ DATA ] ; `string'
	IMPORT	|?g_hUsbProcessingEvent@@3PAXA|		; g_hUsbProcessingEvent
	IMPORT	|SetLastError|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|?AllocateTD@@YAPAU_USBTD@@XZ|		; AllocateTD
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\chw.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37574| DCD	|$LN50@IssueTrans|
	DCD	0x4000b902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@CLKPNAE@?$AA?$AN?$AA?6?$AAC?$AAo?$AAr?$AAr?$AAu?$AAp?$AAt?$AAe?$AAd?$AA?5?$AAq?$AAu?$AAe?$AAu?$AAe?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "C", 0x0, "o", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "q"
	DCB	0x0, "u", 0x0, "e", 0x0, "u", 0x0, "e", 0x0, "!", 0x0, "!"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1MM@KNDAGOGH@?$AA?$AN?$AA?6?$AAC?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAS@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "C", 0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "u"
	DCB	0x0, "e", 0x0, "d", 0x0, "P", 0x0, "i", 0x0, "p", 0x0, "e"
	DCB	0x0, ":", 0x0, ":", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u"
	DCB	0x0, "e", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "S", 0x0, "O", 0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "m", 0x0, "e", 0x0, "e", 0x0, "t", 0x0, " "
	DCB	0x0, "t", 0x0, "h", 0x0, "e", 0x0, " ", 0x0, "s", 0x0, "c"
	DCB	0x0, "h", 0x0, "e", 0x0, "d", 0x0, "u", 0x0, "l", 0x0, "e"
	DCB	0x0, "!", 0x0, " ", 0x0, "C", 0x0, "u", 0x0, "r", 0x0, "F"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, "F", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IssueTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@EQ6AKPAX@ZQAXKQBXKKQBKK2K3QAK5QAH55@Z| PROC ; CQueuedPipe::IssueTransfer

; 568  : {

  00000		 |$LN50@IssueTrans|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd01c	 sub         sp, sp, #0x1C
  00008		 |$M37571|
  00008	e1a04000	 mov         r4, r0
  0000c	e58d4018	 str         r4, [sp, #0x18]
  00010	e58d300c	 str         r3, [sp, #0xC]
  00014	e58d2008	 str         r2, [sp, #8]
  00018	e1a0b001	 mov         r11, r1

; 569  :     DEBUGMSG( ZONE_TRANSFER, (TEXT("+CQueuedPipe(%s)::IssueTransfer, address = %d\n\r"), GetPipeType(), address) );
; 570  : 
; 571  :     HCD_REQUEST_STATUS status = requestFailed;
; 572  :     USBTD *pTD;
; 573  :     USBED *pED;
; 574  :     STransfer *psTransfer;
; 575  : 
; 576  :     // Go safe
; 577  :     EnterCriticalSection( &m_csPipeLock );

  0001c	e2840024	 add         r0, r4, #0x24
  00020	e3a08000	 mov         r8, #0
  00024	eb000000	 bl          EnterCriticalSection

; 578  :     m_pCOhcd->LockProcessingThread();

  00028	e594e014	 ldr         lr, [r4, #0x14]
  0002c	e28e0f89	 add         r0, lr, #0x89, 30
  00030	eb000000	 bl          EnterCriticalSection

; 579  : 
; 580  :     // Allocate TD
; 581  :     pTD = AllocateTD();

  00034	eb000000	 bl          |?AllocateTD@@YAPAU_USBTD@@XZ|
  00038	e1b07000	 movs        r7, r0
  0003c	e58d7014	 str         r7, [sp, #0x14]

; 582  : 
; 583  :     if (pTD)

  00040	0a000098	 beq         |$LN20@IssueTrans|

; 584  :     {
; 585  :         DWORD dwActStartingFrame = dwStartingFrame;
; 586  : 
; 587  :         // Get ED for this endpoint
; 588  :         pED = GetUSBED();

  00044	e594e020	 ldr         lr, [r4, #0x20]
  00048	e59d6048	 ldr         r6, [sp, #0x48]
  0004c	e1b0500e	 movs        r5, lr
  00050	e58d5010	 str         r5, [sp, #0x10]
  00054	e58d6000	 str         r6, [sp]

; 589  : 
; 590  :         if (!pED || !pED->HeadTD || !pED->TailTD)

  00058	0a00008f	 beq         |$LN18@IssueTrans|
  0005c	e595e014	 ldr         lr, [r5, #0x14]
  00060	e35e0000	 cmp         lr, #0
  00064	0a00008c	 beq         |$LN18@IssueTrans|
  00068	e5953018	 ldr         r3, [r5, #0x18]
  0006c	e3530000	 cmp         r3, #0
  00070	0a000089	 beq         |$LN18@IssueTrans|

; 595  :             goto _done;
; 596  :         }
; 597  : 
; 598  :         ITMSG(1, (L"IT: EP%d %s %s, len %d\r\n",
; 599  :                   pED->bHostEndPointNum,
; 600  :                   GetType()==TYPE_CONTROL ? L"CTRL" :
; 601  :                   GetType()==TYPE_ISOCHRONOUS ? L"ISO" :
; 602  :                   GetType()==TYPE_BULK ? L"BULK" : L"INT",
; 603  :                   pED->bfDirection == TD_IN_PID ? L"IN" : L"OUT",
; 604  :                   dwBufferSize));

  00074	e5943000	 ldr         r3, [r4]
  00078	e1a00004	 mov         r0, r4
  0007c	e5933020	 ldr         r3, [r3, #0x20]
  00080	e1a0e00f	 mov         lr, pc
  00084	e12fff13	 bx          r3
  00088	e3500001	 cmp         r0, #1
  0008c	0a00000a	 beq         |$LN25@IssueTrans|
  00090	e5943000	 ldr         r3, [r4]
  00094	e1a00004	 mov         r0, r4
  00098	e5933020	 ldr         r3, [r3, #0x20]
  0009c	e1a0e00f	 mov         lr, pc
  000a0	e12fff13	 bx          r3
  000a4	e3500004	 cmp         r0, #4
  000a8	15943000	 ldrne       r3, [r4]
  000ac	11a00004	 movne       r0, r4
  000b0	15933020	 ldrne       r3, [r3, #0x20]
  000b4	11a0e00f	 movne       lr, pc
  000b8	112fff13	 bxne        r3
  000bc		 |$LN25@IssueTrans|

; 605  : 
; 606  :         // Any EP type specific code goes here
; 607  :         switch (GetType())

  000bc	e5943000	 ldr         r3, [r4]
  000c0	e1a00004	 mov         r0, r4
  000c4	e5933020	 ldr         r3, [r3, #0x20]
  000c8	e1a0e00f	 mov         lr, pc
  000cc	e12fff13	 bx          r3
  000d0	e59d9040	 ldr         r9, [sp, #0x40]
  000d4	e3500001	 cmp         r0, #1
  000d8	e3a02000	 mov         r2, #0
  000dc	0a000034	 beq         |$LN14@IssueTrans|
  000e0	da000035	 ble         |$LN15@IssueTrans|
  000e4	e3500003	 cmp         r0, #3
  000e8	da00002a	 ble         |$LN6@IssueTrans|
  000ec	e3500004	 cmp         r0, #4
  000f0	1a000031	 bne         |$LN15@IssueTrans|

; 614  :             break;
; 615  : 
; 616  :         case TYPE_ISOCHRONOUS:
; 617  : 
; 618  :             DEBUGCHK(dwFrames > 0);
; 619  :             DEBUGCHK(aLengths != NULL);
; 620  : 
; 621  :             {
; 622  :                 DWORD dwCurrentFrame;
; 623  : 
; 624  :                 // Grab current frame number
; 625  :                 m_pCOhcd->GetFrameNumber(&dwCurrentFrame);

  000f4	e5940014	 ldr         r0, [r4, #0x14]
  000f8	e28d1004	 add         r1, sp, #4
  000fc	e5903000	 ldr         r3, [r0]
  00100	e5933014	 ldr         r3, [r3, #0x14]
  00104	e1a0e00f	 mov         lr, pc
  00108	e12fff13	 bx          r3

; 626  : 
; 627  :                 // Adjust frame number for ISO ASAP transfers
; 628  :                 if (dwFlags & USB_START_ISOCH_ASAP)

  0010c	e59d1004	 ldr         r1, [sp, #4]
  00110	e3190b01	 tst         r9, #1, 22
  00114	0a000014	 beq         |$LN7@IssueTrans|

; 629  :                 {
; 630  :                     // See if there are another pending TDs
; 631  :                     _USBTD *pTemp = (USBTD *)pED->HeadTD;

  00118	e5953014	 ldr         r3, [r5, #0x14]

; 632  : 
; 633  :                     if (pTemp != (USBTD *)pED->TailTD)

  0011c	e5950018	 ldr         r0, [r5, #0x18]
  00120	e1530000	 cmp         r3, r0
  00124	0a00000a	 beq         |$LN11@IssueTrans|

; 634  :                     {
; 635  :                         // There is another pending TD on the list
; 636  :                         while (pTemp->NextTD.next != pED->TailTD)

  00128	e5932000	 ldr         r2, [r3]
  0012c	e1520000	 cmp         r2, r0
  00130	0a000003	 beq         |$LN9@IssueTrans|
  00134		 |$LL10@IssueTrans|

; 637  :                         {
; 638  :                             pTemp = (USBTD *)pTemp->NextTD.next;

  00134	e1a03002	 mov         r3, r2
  00138	e5922000	 ldr         r2, [r2]
  0013c	e1520000	 cmp         r2, r0
  00140	1afffffb	 bne         |$LL10@IssueTrans|
  00144		 |$LN9@IssueTrans|

; 639  :                         }
; 640  : 
; 641  :                         // Calc start frame based on the previous TD
; 642  :                         dwActStartingFrame = pTemp->sTransfer.dwStartingFrame +
; 643  :                             pTemp->sTransfer.dwFrames;

  00144	e5932020	 ldr         r2, [r3, #0x20]
  00148	e593301c	 ldr         r3, [r3, #0x1C]
  0014c	e0826003	 add         r6, r2, r3

; 644  :                     }
; 645  :                     else

  00150	ea000000	 b           |$LN45@IssueTrans|
  00154		 |$LN11@IssueTrans|

; 646  :                     {
; 647  :                         // Calc start frame based on current frame number
; 648  :                         dwActStartingFrame = dwCurrentFrame;

  00154	e1a06001	 mov         r6, r1
  00158		 |$LN45@IssueTrans|

; 649  :                     }
; 650  : 
; 651  :                     // Ensure there is enough set up time
; 652  :                     if (dwActStartingFrame < dwCurrentFrame + ISO_MIN_ADVANCED_FRAME)

  00158	e2813006	 add         r3, r1, #6
  0015c	e1560003	 cmp         r6, r3
  00160	e58d6000	 str         r6, [sp]

; 653  :                         dwActStartingFrame = dwCurrentFrame + ISO_MIN_ADVANCED_FRAME;

  00164	31a06003	 movcc       r6, r3
  00168	358d6000	 strcc       r6, [sp]
  0016c		 |$LN7@IssueTrans|

; 654  :                 }
; 655  : 
; 656  :                 // Make sure we are not behind current frame
; 657  :                 if (dwActStartingFrame < dwCurrentFrame)

  0016c	e1560001	 cmp         r6, r1
  00170	2a000008	 bcs         |$LN6@IssueTrans|

; 658  :                 {
; 659  :                     RETAILMSG( 1, (TEXT("\r\nCQueuedPipe::IssueTransfer: ISO transfer cannot meet the schedule! CurFrame %08X, StartFrame %08X\r\n"),
; 660  :                         dwCurrentFrame, dwActStartingFrame));

  00174	e59f0164	 ldr         r0, [pc, #0x164]
  00178	e1a02006	 mov         r2, r6
  0017c	eb000000	 bl          NKDbgPrintfW
  00180		 |$LN47@IssueTrans|
  00180	e3a03c03	 mov         r3, #3, 24

; 661  : 
; 662  :                     SetLastError(ERROR_CAN_NOT_COMPLETE);

  00184	e38300eb	 orr         r0, r3, #0xEB
  00188	eb000000	 bl          SetLastError

; 663  :                     FreeTD(pTD);

  0018c	e1a00007	 mov         r0, r7
  00190	eb000000	 bl          |?FreeTD@@YAXPAU_USBTD@@@Z|

; 718  :     }
; 719  : 
; 720  : 
; 721  : _done:

  00194	ea000046	 b           |$_done$36445|
  00198		 |$LN6@IssueTrans|

; 664  :                     goto _done;
; 665  :                 }
; 666  :             }
; 667  : 
; 668  :             // Don't break here, fall down to the bulk & intr
; 669  : 
; 670  :         // Bulk and interrupt transfers
; 671  :         case TYPE_BULK:
; 672  :         case TYPE_INTERRUPT:
; 673  : 
; 674  :             if(pED->bfDirection == TD_IN_PID)

  00198	e5d53006	 ldrb        r3, [r5, #6]
  0019c	e3530002	 cmp         r3, #2

; 675  :                 ((_USBTD*)pED->TailTD)->TransferStage = STAGE_DATAIN;

  001a0	e5953018	 ldr         r3, [r5, #0x18]
  001a4	03a02001	 moveq       r2, #1
  001a8	0a000002	 beq         |$LN46@IssueTrans|

; 676  :             else
; 677  :                 ((_USBTD*)pED->TailTD)->TransferStage = STAGE_DATAOUT;

  001ac	e3a02002	 mov         r2, #2

; 678  : 
; 679  :             break;

  001b0	ea000000	 b           |$LN46@IssueTrans|
  001b4		 |$LN14@IssueTrans|

; 608  :         {
; 609  :         // Control transfers
; 610  :         case TYPE_CONTROL:
; 611  : 
; 612  :             // Control transfers start in setup stage
; 613  :             ((_USBTD*)pED->TailTD)->TransferStage = STAGE_SETUP;

  001b4	e5953018	 ldr         r3, [r5, #0x18]
  001b8		 |$LN46@IssueTrans|
  001b8	e5832050	 str         r2, [r3, #0x50]
  001bc		 |$LN15@IssueTrans|

; 680  :         }
; 681  : 
; 682  :         // Copy all transfer parameters to the NULL TD
; 683  :         psTransfer = &((_USBTD*)pED->TailTD)->sTransfer;

  001bc	e595a018	 ldr         r10, [r5, #0x18]

; 684  :         psTransfer->address = address;
; 685  :         psTransfer->lpfnCallback = lpStartAddress;
; 686  :         psTransfer->lpvCallbackParameter = lpvNotifyParameter;
; 687  :         psTransfer->dwFlags = dwFlags;
; 688  :         psTransfer->lpvControlHeader = lpvControlHeader;
; 689  :         psTransfer->dwStartingFrame = dwActStartingFrame;
; 690  :         psTransfer->dwFrames = dwFrames;
; 691  :         psTransfer->aLengths = aLengths;
; 692  :         psTransfer->dwBufferSize = dwBufferSize;
; 693  :         psTransfer->lpvClientBuffer = lpvClientBuffer;
; 694  :         psTransfer->paClientBuffer = paBuffer;
; 695  :         psTransfer->lpvCancelId = lpvCancelId;
; 696  :         psTransfer->adwIsochErrors = adwIsochErrors;
; 697  :         psTransfer->adwIsochLengths = adwIsochLengths;
; 698  :         psTransfer->lpfComplete = lpfComplete;
; 699  :         psTransfer->lpdwBytesTransferred = lpdwBytesTransferred;
; 700  :         psTransfer->lpdwError = lpdwError;

  001c0	e59d6008	 ldr         r6, [sp, #8]
  001c4	e59d4044	 ldr         r4, [sp, #0x44]
  001c8	e5eab004	 strb        r11, [r10, #4]!
  001cc	e59d3058	 ldr         r3, [sp, #0x58]
  001d0	e59de068	 ldr         lr, [sp, #0x68]
  001d4	e58a6004	 str         r6, [r10, #4]
  001d8	e59d600c	 ldr         r6, [sp, #0xC]
  001dc	e59d0064	 ldr         r0, [sp, #0x64]
  001e0	e59d5050	 ldr         r5, [sp, #0x50]
  001e4	e58a6008	 str         r6, [r10, #8]
  001e8	e59d6040	 ldr         r6, [sp, #0x40]
  001ec	e59db054	 ldr         r11, [sp, #0x54]
  001f0	e59d205c	 ldr         r2, [sp, #0x5C]
  001f4	e59d1060	 ldr         r1, [sp, #0x60]
  001f8	e59d906c	 ldr         r9, [sp, #0x6C]
  001fc	e59d7070	 ldr         r7, [sp, #0x70]
  00200	e59d8074	 ldr         r8, [sp, #0x74]
  00204	e58a600c	 str         r6, [r10, #0xC]
  00208	e59d604c	 ldr         r6, [sp, #0x4C]
  0020c	e58a4010	 str         r4, [r10, #0x10]
  00210	e59d4000	 ldr         r4, [sp]
  00214	e58a3028	 str         r3, [r10, #0x28]
  00218	e58ae038	 str         lr, [r10, #0x38]
  0021c	e58a0034	 str         r0, [r10, #0x34]

; 701  :         *lpfComplete = FALSE;
; 702  :         *lpdwBytesTransferred = 0;
; 703  :         *lpdwError = USB_NOT_COMPLETE_ERROR;
; 704  :         ((_USBTD*)pED->TailTD)->BytesToTransfer = dwBufferSize;

  00220	e59d0010	 ldr         r0, [sp, #0x10]
  00224	e3a03c01	 mov         r3, #1, 24
  00228	e3a0e000	 mov         lr, #0
  0022c	e58a601c	 str         r6, [r10, #0x1C]
  00230	e58a4018	 str         r4, [r10, #0x18]
  00234	e58a5020	 str         r5, [r10, #0x20]
  00238	e58ab024	 str         r11, [r10, #0x24]
  0023c	e58a202c	 str         r2, [r10, #0x2C]
  00240	e58a1030	 str         r1, [r10, #0x30]
  00244	e58a903c	 str         r9, [r10, #0x3C]
  00248	e58a7040	 str         r7, [r10, #0x40]
  0024c	e58a8044	 str         r8, [r10, #0x44]
  00250	e589e000	 str         lr, [r9]
  00254	e3833003	 orr         r3, r3, #3
  00258	e587e000	 str         lr, [r7]
  0025c	e5883000	 str         r3, [r8]
  00260	e5903018	 ldr         r3, [r0, #0x18]

; 705  :         ((_USBTD*)pED->TailTD)->BytesTransferred = 0;
; 706  : 
; 707  :         // Make the newely allocated TD as the NULL TD
; 708  :         pED->TailTD->next = (ListHead*)pTD;
; 709  :         pED->TailTD = (ListHead*)pTD;
; 710  :         status = requestOK;
; 711  : 
; 712  :         SetEvent(g_hUsbProcessingEvent);

  00264	e59f2070	 ldr         r2, [pc, #0x70]
  00268	e3a01003	 mov         r1, #3
  0026c	e583b058	 str         r11, [r3, #0x58]
  00270	e5903018	 ldr         r3, [r0, #0x18]
  00274	e3a08001	 mov         r8, #1
  00278	e583e054	 str         lr, [r3, #0x54]
  0027c	e5903018	 ldr         r3, [r0, #0x18]
  00280	e59de014	 ldr         lr, [sp, #0x14]
  00284	e583e000	 str         lr, [r3]
  00288	e580e018	 str         lr, [r0, #0x18]
  0028c	e5920000	 ldr         r0, [r2]
  00290	eb000000	 bl          EventModify

; 713  :     }
; 714  :     else

  00294	e59d4018	 ldr         r4, [sp, #0x18]
  00298	ea000005	 b           |$_done$36445|
  0029c		 |$LN18@IssueTrans|

; 591  :         {
; 592  :             RETAILMSG(1, (L"\r\nCorrupted queue!!!\r\n"));

  0029c	e59f0034	 ldr         r0, [pc, #0x34]
  002a0	eb000000	 bl          NKDbgPrintfW

; 593  :             SetLastError(ERROR_CAN_NOT_COMPLETE);
; 594  :             FreeTD(pTD);

  002a4	eaffffb5	 b           |$LN47@IssueTrans|
  002a8		 |$LN20@IssueTrans|
  002a8	e3a03c03	 mov         r3, #3, 24

; 715  :     {
; 716  :         DEBUGMSG( ZONE_TRANSFER, (TEXT("CQueuedPipe::IssueTransfer: failed to allocate TD!\n\r")));
; 717  :         SetLastError(ERROR_CAN_NOT_COMPLETE);

  002ac	e38300eb	 orr         r0, r3, #0xEB
  002b0	eb000000	 bl          SetLastError
  002b4		 |$_done$36445|

; 722  : 
; 723  :     // Go unsafe
; 724  : 
; 725  :     m_pCOhcd->UnlockProcessingThread();

  002b4	e5943014	 ldr         r3, [r4, #0x14]
  002b8	e2830f89	 add         r0, r3, #0x89, 30
  002bc	eb000000	 bl          LeaveCriticalSection

; 726  : 
; 727  :     LeaveCriticalSection( &m_csPipeLock );

  002c0	e2840024	 add         r0, r4, #0x24
  002c4	eb000000	 bl          LeaveCriticalSection

; 728  : 
; 729  :     DEBUGMSG( ZONE_TRANSFER, (TEXT("-CQueuedPipe(%s)::IssueTransfer - address = %d, returning STATUS %d\n\r"), GetPipeType(), address, status) );
; 730  : 
; 731  :     return status;
; 732  : }

  002c8	e1a00008	 mov         r0, r8
  002cc	e28dd01c	 add         sp, sp, #0x1C
  002d0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  002d4	e12fff1e	 bx          lr
  002d8		 |$LN51@IssueTrans|
  002d8		 |$LN52@IssueTrans|
  002d8	00000000	 DCD         |??_C@_1CO@CLKPNAE@?$AA?$AN?$AA?6?$AAC?$AAo?$AAr?$AAr?$AAu?$AAp?$AAt?$AAe?$AAd?$AA?5?$AAq?$AAu?$AAe?$AAu?$AAe?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  002dc		 |$LN53@IssueTrans|
  002dc	00000000	 DCD         |?g_hUsbProcessingEvent@@3PAXA|
  002e0		 |$LN54@IssueTrans|
  002e0	00000000	 DCD         |??_C@_1MM@KNDAGOGH@?$AA?$AN?$AA?6?$AAC?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AAP?$AAi?$AAp?$AAe?$AA?3?$AA?3?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAS@|
  002e4		 |$M37572|

			 ENDP  ; |?IssueTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@EQ6AKPAX@ZQAXKQBXKKQBKK2K3QAK5QAH55@Z|, CQueuedPipe::IssueTransfer

	IMPORT	|ReleaseSemaphore|
	IMPORT	|?StopHostEndpoint@CHW@@QAAXK@Z|	; CHW::StopHostEndpoint
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\chw.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37625| DCD	|$LN44@AbortTrans|
	DCD	0x40007e01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AbortTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@Q6AKPAX@ZQAXPBX@Z| PROC ; CQueuedPipe::AbortTransfer

; 757  : {

  00000		 |$LN44@AbortTrans|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M37622|
  00004	e1a07003	 mov         r7, r3
  00008	e1a0a002	 mov         r10, r2
  0000c	e1a09001	 mov         r9, r1
  00010	e1a05000	 mov         r5, r0

; 758  :     DEBUGMSG( ZONE_TRANSFER, (TEXT("+CQueuedPipe(%s)::AbortTransfer - lpvCancelId = 0x%x\n\r"), GetPipeType(), lpvCancelId) );
; 759  : 
; 760  :     HCD_REQUEST_STATUS status = requestFailed;
; 761  :     //CTransfer         *pTransfer = NULL;
; 762  :     USBTD *pTD=NULL;
; 763  :     USBED *pED = GetUSBED();
; 764  : 
; 765  :     EnterCriticalSection( &m_csPipeLock );

  00014	e5956020	 ldr         r6, [r5, #0x20]
  00018	e2850024	 add         r0, r5, #0x24
  0001c	e3a08000	 mov         r8, #0
  00020	eb000000	 bl          EnterCriticalSection

; 766  : 
; 767  :     m_pCOhcd->LockProcessingThread();

  00024	e595e014	 ldr         lr, [r5, #0x14]
  00028	e28e0f89	 add         r0, lr, #0x89, 30
  0002c	eb000000	 bl          EnterCriticalSection

; 768  : 
; 769  :     pED->bfSkip = 1;
; 770  : 
; 771  : //redo:
; 772  :     if (pED->HeadTD )

  00030	e596e014	 ldr         lr, [r6, #0x14]
  00034	e3a03001	 mov         r3, #1
  00038	e5c6300c	 strb        r3, [r6, #0xC]
  0003c	e1b0000e	 movs        r0, lr
  00040	e3a0b000	 mov         r11, #0
  00044	0a000061	 beq         |$LN4@AbortTrans|

; 773  :     {
; 774  :         if(((USBTD*)pED->HeadTD)->sTransfer.lpvCancelId == lpvCancelId)

  00048	e590e034	 ldr         lr, [r0, #0x34]
  0004c	e15e0007	 cmp         lr, r7
  00050	1a00003b	 bne         |$LN15@AbortTrans|

; 775  :         {
; 776  :             ABORTMSG(1, (L"AB: EP%d %s %s\r\n",
; 777  :                          pED->bHostEndPointNum,
; 778  :                          GetType()==TYPE_CONTROL ? L"CTRL" :
; 779  :                          GetType()==TYPE_ISOCHRONOUS ? L"ISO" :
; 780  :                          GetType()==TYPE_BULK ? L"BULK" : L"INT",
; 781  :                          pED->bfDirection == TD_IN_PID ? L"IN" : L"OUT"
; 782  :                          ));

  00054	e5953000	 ldr         r3, [r5]
  00058	e1a00005	 mov         r0, r5
  0005c	e5933020	 ldr         r3, [r3, #0x20]
  00060	e1a0e00f	 mov         lr, pc
  00064	e12fff13	 bx          r3
  00068	e3500001	 cmp         r0, #1
  0006c	0a00000a	 beq         |$LN19@AbortTrans|
  00070	e5953000	 ldr         r3, [r5]
  00074	e1a00005	 mov         r0, r5
  00078	e5933020	 ldr         r3, [r3, #0x20]
  0007c	e1a0e00f	 mov         lr, pc
  00080	e12fff13	 bx          r3
  00084	e3500004	 cmp         r0, #4
  00088	15953000	 ldrne       r3, [r5]
  0008c	11a00005	 movne       r0, r5
  00090	15933020	 ldrne       r3, [r3, #0x20]
  00094	11a0e00f	 movne       lr, pc
  00098	112fff13	 bxne        r3
  0009c		 |$LN19@AbortTrans|

; 783  : 
; 784  : #ifdef MUSB_USEDMA
; 785  : 
; 786  :             // Abort any pending DMA I/O
; 787  :             if (pED->pDmaChannel)

  0009c	e5963034	 ldr         r3, [r6, #0x34]
  000a0	e1b00003	 movs        r0, r3

; 788  :             {
; 789  :                 pED->pDmaChannel->CancelTransfer();

  000a4	15903000	 ldrne       r3, [r0]
  000a8	15933008	 ldrne       r3, [r3, #8]
  000ac	11a0e00f	 movne       lr, pc
  000b0	112fff13	 bxne        r3

; 790  :             }
; 791  : 
; 792  : #endif // MUSB_USEDMA
; 793  : 
; 794  :             /*ID matches with the ID of the first TD of ED and
; 795  :             therefore may be getting processed by UsbProcessingThread
; 796  :             that way we need to stop the Endpoint*/
; 797  :             if(GetType() == TYPE_BULK || GetType() == TYPE_ISOCHRONOUS)

  000b4	e5953000	 ldr         r3, [r5]
  000b8	e1a00005	 mov         r0, r5
  000bc	e5933020	 ldr         r3, [r3, #0x20]
  000c0	e1a0e00f	 mov         lr, pc
  000c4	e12fff13	 bx          r3
  000c8	e3500002	 cmp         r0, #2
  000cc	0a00000a	 beq         |$LN12@AbortTrans|
  000d0	e5953000	 ldr         r3, [r5]
  000d4	e1a00005	 mov         r0, r5
  000d8	e5933020	 ldr         r3, [r3, #0x20]
  000dc	e1a0e00f	 mov         lr, pc
  000e0	e12fff13	 bx          r3
  000e4	e3500004	 cmp         r0, #4
  000e8	0a000003	 beq         |$LN12@AbortTrans|

; 804  :                 }
; 805  :             }
; 806  :             else
; 807  :             {
; 808  :                 m_pCOhcd->StopHostEndpoint(pED->bHostEndPointNum);

  000ec	e5d61010	 ldrb        r1, [r6, #0x10]
  000f0	e5950014	 ldr         r0, [r5, #0x14]
  000f4	eb000000	 bl          |?StopHostEndpoint@CHW@@QAAXK@Z|
  000f8	ea00000a	 b           |$LN11@AbortTrans|
  000fc		 |$LN12@AbortTrans|

; 798  :             {
; 799  :                 if(pED->bSemaphoreOwner)

  000fc	e596302c	 ldr         r3, [r6, #0x2C]
  00100	e3530000	 cmp         r3, #0
  00104	0a000007	 beq         |$LN11@AbortTrans|

; 800  :                 {
; 801  :                     m_pCOhcd->StopHostEndpoint(pED->bHostEndPointNum);

  00108	e5d61010	 ldrb        r1, [r6, #0x10]
  0010c	e5950014	 ldr         r0, [r5, #0x14]
  00110	eb000000	 bl          |?StopHostEndpoint@CHW@@QAAXK@Z|

; 802  :                     ReleaseSemaphore(pED->hSemaphore, 1, NULL );

  00114	e5960030	 ldr         r0, [r6, #0x30]
  00118	e3a02000	 mov         r2, #0
  0011c	e3a01001	 mov         r1, #1
  00120	eb000000	 bl          ReleaseSemaphore

; 803  :                     pED->bSemaphoreOwner = FALSE;

  00124	e586b02c	 str         r11, [r6, #0x2C]
  00128		 |$LN11@AbortTrans|

; 809  :             }
; 810  : 
; 811  :             pTD = (USBTD*)pED->HeadTD;
; 812  :             //pED->TransferStatus = STATUS_CANCEL;
; 813  :             pED->TransferStatus = STATUS_IDLE;
; 814  :             SetEvent(g_hUsbProcessingEvent);

  00128	e59f30c4	 ldr         r3, [pc, #0xC4]
  0012c	e586b01c	 str         r11, [r6, #0x1C]
  00130	e5964014	 ldr         r4, [r6, #0x14]
  00134	e5930000	 ldr         r0, [r3]
  00138	e3a01003	 mov         r1, #3
  0013c	eb000000	 bl          EventModify

; 815  :         }
; 816  :         else

  00140	ea000008	 b           |$LN41@AbortTrans|
  00144		 |$LN15@AbortTrans|

; 817  :         {
; 818  :             /*search*/
; 819  :             pTD = (USBTD*)(((USBTD*)pED->HeadTD)->NextTD.next);

  00144	e5903000	 ldr         r3, [r0]
  00148	e1b04003	 movs        r4, r3

; 820  :             while(pTD)

  0014c	0a00001f	 beq         |$LN4@AbortTrans|
  00150		 |$LL8@AbortTrans|

; 821  :             {
; 822  :                 if (pTD->sTransfer.lpvCancelId == lpvCancelId)

  00150	e5943034	 ldr         r3, [r4, #0x34]
  00154	e1530007	 cmp         r3, r7
  00158	0a000002	 beq         |$LN41@AbortTrans|

; 823  :                 {
; 824  :                     break;
; 825  :                 }
; 826  :                 else
; 827  :                 {
; 828  :                     pTD = (USBTD*)pTD->NextTD.next;

  0015c	e5943000	 ldr         r3, [r4]
  00160	e1b04003	 movs        r4, r3
  00164	1afffff9	 bne         |$LL8@AbortTrans|
  00168		 |$LN41@AbortTrans|

; 829  :                 }
; 830  :             }
; 831  :         }
; 832  :     }
; 833  : 
; 834  : 
; 835  :     if (pTD)

  00168	e3540000	 cmp         r4, #0
  0016c	0a000017	 beq         |$LN4@AbortTrans|

; 836  :     {
; 837  :         RETAILMSG(0, (L"P0 ABT %08X\r\n", pED, pTD));
; 838  : 
; 839  :         RemoveElementFromList((ListHead**)&pED->HeadTD, (ListHead*)pTD);

  00170	e1a01004	 mov         r1, r4
  00174	e2860014	 add         r0, r6, #0x14
  00178	eb000000	 bl          |?RemoveElementFromList@@YAHPAPAUListHead@@PAU1@@Z|

; 840  :         *pTD->sTransfer.lpfComplete = TRUE;

  0017c	e5943040	 ldr         r3, [r4, #0x40]

; 841  :         *pTD->sTransfer.lpdwError = USB_CANCELED_ERROR;

  00180	e3a01001	 mov         r1, #1
  00184	e3a02c01	 mov         r2, #1, 24
  00188	e5831000	 str         r1, [r3]
  0018c	e5943048	 ldr         r3, [r4, #0x48]
  00190	e3822001	 orr         r2, r2, #1
  00194	e5832000	 str         r2, [r3]

; 842  : 
; 843  :         if (pTD->sTransfer.lpfnCallback )

  00198	e5943008	 ldr         r3, [r4, #8]
  0019c	e3530000	 cmp         r3, #0
  001a0	0a000003	 beq         |$LN3@AbortTrans|

; 844  :         {
; 845  :             ( *pTD->sTransfer.lpfnCallback )( pTD->sTransfer.lpvCallbackParameter );

  001a4	e594000c	 ldr         r0, [r4, #0xC]
  001a8	e1a0e00f	 mov         lr, pc
  001ac	e12fff13	 bx          r3

; 846  :             pTD->sTransfer.lpfnCallback =NULL;

  001b0	e584b008	 str         r11, [r4, #8]
  001b4		 |$LN3@AbortTrans|

; 847  :         }
; 848  : 
; 849  :         FreeTD(pTD);

  001b4	e1a00004	 mov         r0, r4
  001b8	eb000000	 bl          |?FreeTD@@YAXPAU_USBTD@@@Z|

; 850  : 
; 851  :         if ( lpCancelAddress )

  001bc	e3590000	 cmp         r9, #0

; 852  :         {
; 853  :             ( *lpCancelAddress )( lpvNotifyParameter );

  001c0	11a0000a	 movne       r0, r10
  001c4	11a0e00f	 movne       lr, pc
  001c8	112fff19	 bxne        r9

; 854  :         }
; 855  : 
; 856  :         status = requestOK;

  001cc	e3a08001	 mov         r8, #1
  001d0		 |$LN4@AbortTrans|

; 857  :     }
; 858  :     else
; 859  :     {
; 860  :         // Too late; the transfer already completed.
; 861  :         RETAILMSG(0, (L"P0 %08X\r\n", pED));
; 862  :     }
; 863  : 
; 864  :     pED->bfSkip = 0;

  001d0	e5c6b00c	 strb        r11, [r6, #0xC]

; 865  : 
; 866  :     m_pCOhcd->UnlockProcessingThread();

  001d4	e5953014	 ldr         r3, [r5, #0x14]
  001d8	e2830f89	 add         r0, r3, #0x89, 30
  001dc	eb000000	 bl          LeaveCriticalSection

; 867  : 
; 868  :     LeaveCriticalSection( &m_csPipeLock );

  001e0	e2850024	 add         r0, r5, #0x24
  001e4	eb000000	 bl          LeaveCriticalSection

; 869  :     DEBUGMSG( ZONE_TRANSFER, (TEXT("-CQueuedPipe(%s)::AbortTransfer - lpvCancelId = 0x%x, returning HCD_REQUEST_STATUS %d\n\r"), GetPipeType(), lpvCancelId, status) );
; 870  :     return status;
; 871  : }

  001e8	e1a00008	 mov         r0, r8
  001ec	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001f0	e12fff1e	 bx          lr
  001f4		 |$LN45@AbortTrans|
  001f4		 |$LN46@AbortTrans|
  001f4	00000000	 DCD         |?g_hUsbProcessingEvent@@3PAXA|
  001f8		 |$M37623|

			 ENDP  ; |?AbortTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@Q6AKPAX@ZQAXPBX@Z|, CQueuedPipe::AbortTransfer

	EXPORT	|?AbortQueue@CQueuedPipe@@AAAXXZ|	; CQueuedPipe::AbortQueue

  00000			 AREA	 |.pdata|, PDATA
|$T37634| DCD	|$LN5@AbortQueue|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AbortQueue@CQueuedPipe@@AAAXXZ| PROC	; CQueuedPipe::AbortQueue

; 885  : {

  00000		 |$LN5@AbortQueue|
  00000		 |$M37631|

; 886  :     DEBUGCHK(0);
; 887  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M37632|

			 ENDP  ; |?AbortQueue@CQueuedPipe@@AAAXXZ|, CQueuedPipe::AbortQueue


  00000			 AREA	 |.pdata|, PDATA
|$T37643| DCD	|$LN5@CheckForDo|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CheckForDoneTransfers@CQueuedPipe@@UAAHTTDLINK@@@Z| PROC ; CQueuedPipe::CheckForDoneTransfers

; 903  : {

  00000		 |$LN5@CheckForDo|
  00000		 |$M37640|

; 904  :     BOOL fTransferDone = FALSE;
; 905  :     DEBUGMSG( ZONE_TRANSFER, (TEXT("+CQueuedPipe(%s)::CheckForDoneTransfers\n\r"), GetPipeType() ) );
; 906  : 
; 907  :     UNREFERENCED_PARAMETER(pCurTD);
; 908  : 
; 909  :     DEBUGMSG( ZONE_TRANSFER, (TEXT("-CQueuedPipe(%s)::CheckForDoneTransfers, returning BOOL %d\n\r"), GetPipeType(), fTransferDone) );
; 910  :     return fTransferDone;

  00000	e3a00000	 mov         r0, #0

; 911  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37641|

			 ENDP  ; |?CheckForDoneTransfers@CQueuedPipe@@UAAHTTDLINK@@@Z|, CQueuedPipe::CheckForDoneTransfers


  00000			 AREA	 |.pdata|, PDATA
|$T37650| DCD	|$LN5@UpdateInte|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateInterruptQHTreeLoad@CQueuedPipe@@MAAXEH@Z| PROC ; CQueuedPipe::UpdateInterruptQHTreeLoad

; 937  : {

  00000		 |$LN5@UpdateInte|
  00000		 |$M37647|

; 938  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CQueuedPipe(%s)::UpdateInterruptQHTreeLoad\n\r"), GetPipeType() ) );
; 939  :     DEBUGMSG( ZONE_PIPE && ZONE_WARNING, (TEXT("CQueuedPipe(%s)::UpdateInterruptQHTreeLoad - doing nothing\n\r"), GetPipeType()) );
; 940  :     DEBUGCHK( (m_usbEndpointDescriptor.bmAttributes & USB_ENDPOINT_TYPE_MASK) != USB_ENDPOINT_TYPE_INTERRUPT );
; 941  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CQueuedPipe(%s)::UpdateInterruptQHTreeLoad\n\r"), GetPipeType() ) );
; 942  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M37648|

			 ENDP  ; |?UpdateInterruptQHTreeLoad@CQueuedPipe@@MAAXEH@Z|, CQueuedPipe::UpdateInterruptQHTreeLoad

	EXPORT	|??0CBulkPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z| ; CBulkPipe::CBulkPipe
	EXPORT	|??_7CBulkPipe@@6B@| [ DATA ]		; CBulkPipe::`vftable'
	EXPORT	|?OpenPipe@CBulkPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ| ; CBulkPipe::OpenPipe
	EXPORT	|?GetType@CBulkPipe@@UAA?AW4PIPE_TYPE@@XZ| ; CBulkPipe::GetType
	EXPORT	|?UpdateListControl@CBulkPipe@@UAAXHH@Z| ; CBulkPipe::UpdateListControl
	EXPORT	|?GetPipeType@CBulkPipe@@UBAPBGXZ|	; CBulkPipe::GetPipeType
	EXPORT	|?AreTransferParametersValid@CBulkPipe@@EBAHPBUSTRANSFER@@@Z| ; CBulkPipe::AreTransferParametersValid
	EXPORT	|?ScheduleTransfer@CBulkPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ| ; CBulkPipe::ScheduleTransfer
	EXPORT	|?GetListHead@CBulkPipe@@EAAPAKH@Z|	; CBulkPipe::GetListHead
	IMPORT	|??_ECBulkPipe@@UAAPAXI@Z|, WEAK |??_GCBulkPipe@@UAAPAXI@Z| ; CBulkPipe::`vector deleting destructor', CBulkPipe::`scalar deleting destructor'

  00000			 AREA	 |.pdata|, PDATA
|$T37663| DCD	|$LN5@CBulkPipe|
	DCD	0x40001302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CBulkPipe@@6B@| DCD |??_ECBulkPipe@@UAAPAXI@Z|	; CBulkPipe::`vftable'
	DCD	|?OpenPipe@CBulkPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?ClosePipe@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?IssueTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@EQ6AKPAX@ZQAXKQBXKKQBKK2K3QAK5QAH55@Z|
	DCD	|?AbortTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@Q6AKPAX@ZQAXPBX@Z|
	DCD	|?IsPipeHalted@CPipe@@UAA?AW4HCD_REQUEST_STATUS@@QAH@Z|
	DCD	|?ClearHaltedFlag@CPipe@@UAAXXZ|
	DCD	|?ChangeMaxPacketSize@CPipeAbs@@UAAXG@Z|
	DCD	|?GetType@CBulkPipe@@UAA?AW4PIPE_TYPE@@XZ|
	DCD	|?CheckForDoneTransfers@CQueuedPipe@@UAAHTTDLINK@@@Z|
	DCD	|?UpdateListControl@CBulkPipe@@UAAXHH@Z|
	DCD	|?GetPipeType@CBulkPipe@@UBAPBGXZ|
	DCD	|?GetTdSize@CQueuedPipe@@UBA?BHXZ|
	DCD	|?AreTransferParametersValid@CBulkPipe@@EBAHPBUSTRANSFER@@@Z|
	DCD	|?GetMemoryAllocationFlags@CPipe@@MBAKXZ|
	DCD	|?ScheduleTransfer@CBulkPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?GetListHead@CBulkPipe@@EAAPAKH@Z|
	DCD	|?UpdateInterruptQHTreeLoad@CQueuedPipe@@MAAXEH@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CBulkPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z| PROC ; CBulkPipe::CBulkPipe

; 961  : {

  00000		 |$LN5@CBulkPipe|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M37660|
  00008	e1a07000	 mov         r7, r0
  0000c	e59de030	 ldr         lr, [sp, #0x30]
  00010	e5dd402c	 ldrb        r4, [sp, #0x2C]
  00014	e5dd5028	 ldrb        r5, [sp, #0x28]
  00018	e5dd6024	 ldrb        r6, [sp, #0x24]
  0001c	e58de00c	 str         lr, [sp, #0xC]
  00020	e58d4008	 str         r4, [sp, #8]
  00024	e58d5004	 str         r5, [sp, #4]
  00028	e58d6000	 str         r6, [sp]
  0002c	eb000000	 bl          |??0CQueuedPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|
  00030	e59f3010	 ldr         r3, [pc, #0x10]

; 962  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CBulkPipe::CBulkPipe\n\r")) );
; 963  :     DEBUGCHK( m_usbEndpointDescriptor.bDescriptorType == USB_ENDPOINT_DESCRIPTOR_TYPE &&
; 964  :               m_usbEndpointDescriptor.bLength >= sizeof( USB_ENDPOINT_DESCRIPTOR ) &&
; 965  :               (m_usbEndpointDescriptor.bmAttributes & USB_ENDPOINT_TYPE_MASK) == USB_ENDPOINT_TYPE_BULK );
; 966  : 
; 967  :     DEBUGCHK( !fIsLowSpeed ); // bulk pipe must be high speed
; 968  : 
; 969  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CBulkPipe::CBulkPipe\n\r")) );
; 970  : }

  00034	e1a00007	 mov         r0, r7
  00038	e5873000	 str         r3, [r7]
  0003c	e28dd010	 add         sp, sp, #0x10
  00040	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN6@CBulkPipe|
  00048		 |$LN7@CBulkPipe|
  00048	00000000	 DCD         |??_7CBulkPipe@@6B@|
  0004c		 |$M37661|

			 ENDP  ; |??0CBulkPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|, CBulkPipe::CBulkPipe

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37674| DCD	|$LN5@GetType@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetType@CBulkPipe@@UAA?AW4PIPE_TYPE@@XZ| PROC ; CBulkPipe::GetType

; 549  :     virtual PIPE_TYPE GetType () { return TYPE_BULK; };

  00000		 |$LN5@GetType@2|
  00000		 |$M37671|
  00000	e3a00002	 mov         r0, #2
  00004	e12fff1e	 bx          lr
  00008		 |$M37672|

			 ENDP  ; |?GetType@CBulkPipe@@UAA?AW4PIPE_TYPE@@XZ|, CBulkPipe::GetType

	EXPORT	|??_C@_19PBJLGAMD@?$AAB?$AAu?$AAl?$AAk?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T37683| DCD	|$LN5@GetPipeTyp|
	DCD	0x40000300

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19PBJLGAMD@?$AAB?$AAu?$AAl?$AAk?$AA?$AA@| DCB "B", 0x0, "u", 0x0, "l"
	DCB	0x0, "k", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPipeType@CBulkPipe@@UBAPBGXZ| PROC ; CBulkPipe::GetPipeType

; 560  :     {

  00000		 |$LN5@GetPipeTyp|
  00000		 |$M37680|

; 561  :         return TEXT("Bulk");

  00000	e59f0000	 ldr         r0, [pc]

; 562  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$LN6@GetPipeTyp|
  00008		 |$LN7@GetPipeTyp|
  00008	00000000	 DCD         |??_C@_19PBJLGAMD@?$AAB?$AAu?$AAl?$AAk?$AA?$AA@|
  0000c		 |$M37681|

			 ENDP  ; |?GetPipeType@CBulkPipe@@UBAPBGXZ|, CBulkPipe::GetPipeType

	EXPORT	|??1CBulkPipe@@UAA@XZ|			; CBulkPipe::~CBulkPipe
; File c:\wince600\public\common\oak\drivers\usb\hcd\usb20\usb2com\pipeabs.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37708| DCD	|$LN11@CBulkPipe@2|
	DCD	0x40000b01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CBulkPipe@@UAA@XZ| PROC		; CBulkPipe::~CBulkPipe

; 984  : {

  00000		 |$LN11@CBulkPipe@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37705|
  00004	e1a04000	 mov         r4, r0

; 985  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CBulkPipe::~CBulkPipe\n\r")) );
; 986  :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CBulkPipe::~CBulkPipe\n\r")) );
; 987  : }

  00008	e59f3018	 ldr         r3, [pc, #0x18]
  0000c	e4803024	 str         r3, [r0], #0x24
  00010	eb000000	 bl          DeleteCriticalSection
  00014	e59f3008	 ldr         r3, [pc, #8]
  00018	e5843000	 str         r3, [r4]
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN12@CBulkPipe@2|
  00024		 |$LN13@CBulkPipe@2|
  00024	00000000	 DCD         |??_7CPipeAbs@@6B@|
  00028		 |$LN14@CBulkPipe@2|
  00028	00000000	 DCD         |??_7CPipe@@6B@|
  0002c		 |$M37706|

			 ENDP  ; |??1CBulkPipe@@UAA@XZ|, CBulkPipe::~CBulkPipe

	IMPORT	|?AllocChannel@CCppiDmaController@@QAAPAVCCppiDmaChannel@@EEP6AXPAV2@IIIIPAX1@Z@Z| ; CCppiDmaController::AllocChannel
	IMPORT	|?DmaTransferComplete@CHW@@SAXPAVCCppiDmaChannel@@IIIIPAX1@Z| ; CHW::DmaTransferComplete
	IMPORT	|?ProgramHostEndpoint@CHW@@QAAXIPAX@Z|	; CHW::ProgramHostEndpoint
	IMPORT	|?AllocateED@@YAPAU_USBED@@XZ|		; AllocateED
	IMPORT	|?AllocateHostEndPoint@CHW@@QAAHIKH@Z|	; CHW::AllocateHostEndPoint
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37735| DCD	|$LN21@OpenPipe|
	DCD	0x40007901
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OpenPipe@CBulkPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ| PROC ; CBulkPipe::OpenPipe

; 1005 : {

  00000		 |$LN21@OpenPipe|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37732|
  00004	e1a04000	 mov         r4, r0

; 1006 :     HCD_REQUEST_STATUS RetVal;
; 1007 :     INT32 EndpointNum;
; 1008 :     DEBUGMSG( ZONE_PIPE, (TEXT("+CBulkPipe::OpenPipe\n\r") ) );
; 1009 : 
; 1010 :     EnterCriticalSection( &m_csPipeLock );

  00008	e2840024	 add         r0, r4, #0x24
  0000c	eb000000	 bl          EnterCriticalSection

; 1011 : 
; 1012 :     // if this fails, we have a low speed Bulk device
; 1013 :     // which is not allowed by the USB spec
; 1014 :     DEBUGCHK( !m_fIsLowSpeed );
; 1015 : 
; 1016 :     EndpointNum = m_pCOhcd->AllocateHostEndPoint(
; 1017 :         (UINT32)GetType(),
; 1018 :         m_usbEndpointDescriptor.wMaxPacketSize,
; 1019 :         USB_ENDPOINT_DIRECTION_IN(m_bEndpointAddress) ? TRUE : FALSE);

  00010	e5d43008	 ldrb        r3, [r4, #8]
  00014	e5942000	 ldr         r2, [r4]
  00018	e1a00004	 mov         r0, r4
  0001c	e3130080	 tst         r3, #0x80
  00020	e5922020	 ldr         r2, [r2, #0x20]
  00024	13a05001	 movne       r5, #1
  00028	03a05000	 moveq       r5, #0
  0002c	e1a0e00f	 mov         lr, pc
  00030	e12fff12	 bx          r2
  00034	e5d4e03c	 ldrb        lr, [r4, #0x3C]
  00038	e5d4203d	 ldrb        r2, [r4, #0x3D]
  0003c	e1a01000	 mov         r1, r0
  00040	e5940014	 ldr         r0, [r4, #0x14]
  00044	e18e2402	 orr         r2, lr, r2, lsl #8
  00048	e1a03005	 mov         r3, r5
  0004c	eb000000	 bl          |?AllocateHostEndPoint@CHW@@QAAHIKH@Z|
  00050	e1b05000	 movs        r5, r0

; 1020 : 
; 1021 :     if(EndpointNum >= 0)

  00054	4a00005b	 bmi         |$LN6@OpenPipe|

; 1022 :     {
; 1023 :         m_pUSBED = AllocateED();

  00058	eb000000	 bl          |?AllocateED@@YAPAU_USBED@@XZ|
  0005c	e3500000	 cmp         r0, #0
  00060	e5840020	 str         r0, [r4, #0x20]

; 1024 : 
; 1025 :         if (m_pUSBED)

  00064	0a000057	 beq         |$LN6@OpenPipe|

; 1026 :         {
; 1027 :             m_pUSBED->bHostEndPointNum = (UINT8)EndpointNum;

  00068	e5c05010	 strb        r5, [r0, #0x10]

; 1028 :             m_pUSBED->bfFunctionAddress = m_bBusAddress;

  0006c	e594300c	 ldr         r3, [r4, #0xC]
  00070	e5942020	 ldr         r2, [r4, #0x20]

; 1029 :             m_pUSBED->bfEndpointNumber = m_bEndpointAddress;
; 1030 :             m_pUSBED->bfDirection = USB_ENDPOINT_DIRECTION_IN(m_bEndpointAddress) ? TD_IN_PID : TD_OUT_PID;;
; 1031 :             m_pUSBED->bfIsLowSpeed = 0;

  00074	e3a00000	 mov         r0, #0
  00078	e5d33000	 ldrb        r3, [r3]
  0007c	e5c23004	 strb        r3, [r2, #4]
  00080	e5942020	 ldr         r2, [r4, #0x20]
  00084	e5d43008	 ldrb        r3, [r4, #8]
  00088	e5c23005	 strb        r3, [r2, #5]
  0008c	e5d43008	 ldrb        r3, [r4, #8]
  00090	e3130080	 tst         r3, #0x80
  00094	e5943020	 ldr         r3, [r4, #0x20]
  00098	13a02002	 movne       r2, #2
  0009c	03a02001	 moveq       r2, #1
  000a0	e5c32006	 strb        r2, [r3, #6]
  000a4	e5943020	 ldr         r3, [r4, #0x20]
  000a8	e5c30008	 strb        r0, [r3, #8]

; 1032 :             m_pUSBED->bfIsHighSpeed = m_fIsHighSpeed ? 1 :0;

  000ac	e5943044	 ldr         r3, [r4, #0x44]
  000b0	e3530000	 cmp         r3, #0
  000b4	e5943020	 ldr         r3, [r4, #0x20]
  000b8	13a02001	 movne       r2, #1
  000bc	03a02000	 moveq       r2, #0
  000c0	e5c32009	 strb        r2, [r3, #9]

; 1033 :             m_pUSBED->bfHubAddress = m_bHubAddress;

  000c4	e5942020	 ldr         r2, [r4, #0x20]
  000c8	e5d43010	 ldrb        r3, [r4, #0x10]
  000cc	e5c2300a	 strb        r3, [r2, #0xA]

; 1034 :             m_pUSBED->bfHubPort = m_bHubPort;

  000d0	e5942020	 ldr         r2, [r4, #0x20]
  000d4	e5d43011	 ldrb        r3, [r4, #0x11]
  000d8	e5c2300b	 strb        r3, [r2, #0xB]

; 1035 :             m_pUSBED->bfIsIsochronous =  0;

  000dc	e5943020	 ldr         r3, [r4, #0x20]
  000e0	e5c3000d	 strb        r0, [r3, #0xD]

; 1036 :             m_pUSBED->bfMaxPacketSize = m_usbEndpointDescriptor.wMaxPacketSize;

  000e4	e5d4103c	 ldrb        r1, [r4, #0x3C]
  000e8	e5d4303d	 ldrb        r3, [r4, #0x3D]
  000ec	e5942020	 ldr         r2, [r4, #0x20]
  000f0	e1813403	 orr         r3, r1, r3, lsl #8
  000f4	e1c230be	 strh        r3, [r2, #0xE]

; 1037 :             m_pUSBED->bfAttributes = m_usbEndpointDescriptor.bmAttributes;

  000f8	e5942020	 ldr         r2, [r4, #0x20]
  000fc	e5d4303b	 ldrb        r3, [r4, #0x3B]
  00100	e5c23007	 strb        r3, [r2, #7]

; 1038 :             m_pUSBED->TransferStatus = STATUS_IDLE;

  00104	e5943020	 ldr         r3, [r4, #0x20]
  00108	e583001c	 str         r0, [r3, #0x1C]

; 1039 :             m_pUSBED->bfHalted = FALSE;

  0010c	e5943020	 ldr         r3, [r4, #0x20]
  00110	e5830024	 str         r0, [r3, #0x24]

; 1040 :             m_pUSBED->bfToggleCarry = FALSE;

  00114	e5943020	 ldr         r3, [r4, #0x20]
  00118	e1c302b8	 strh        r0, [r3, #0x28]

; 1041 :             // USB controller datasheet says interval value must be in range 1-16.
; 1042 :             // Values > 16 result in USB controller hangup.
; 1043 :             m_pUSBED->bInterval = m_usbEndpointDescriptor.bInterval > 0x10 ? 0x00 : m_usbEndpointDescriptor.bInterval;

  0011c	e5d4303e	 ldrb        r3, [r4, #0x3E]

; 1044 : 
; 1045 :             m_pCOhcd->ProgramHostEndpoint((UINT32)GetType(), (void *)m_pUSBED);

  00120	e1a00004	 mov         r0, r4
  00124	e3530010	 cmp         r3, #0x10
  00128	83a02000	 movhi       r2, #0
  0012c	91a02003	 movls       r2, r3
  00130	e5943020	 ldr         r3, [r4, #0x20]
  00134	e5c32011	 strb        r2, [r3, #0x11]
  00138	e5943000	 ldr         r3, [r4]
  0013c	e5933020	 ldr         r3, [r3, #0x20]
  00140	e1a0e00f	 mov         lr, pc
  00144	e12fff13	 bx          r3
  00148	e5942020	 ldr         r2, [r4, #0x20]
  0014c	e1a01000	 mov         r1, r0
  00150	e5940014	 ldr         r0, [r4, #0x14]
  00154	eb000000	 bl          |?ProgramHostEndpoint@CHW@@QAAXIPAX@Z|

; 1046 : 
; 1047 : #ifdef MUSB_USEDMA
; 1048 : #ifdef MUSB_USEDMA_FOR_BULK
; 1049 : 
; 1050 :             // Allocate DMA channel for Bulk transfers
; 1051 :             m_pUSBED->pDmaChannel = m_pCOhcd->m_dmaCrtl.AllocChannel(
; 1052 :                 m_pUSBED->bHostEndPointNum,
; 1053 :                 m_pUSBED->bfEndpointNumber,
; 1054 :                 (PfnTransferComplete)m_pCOhcd->DmaTransferComplete);

  00158	e5941020	 ldr         r1, [r4, #0x20]
  0015c	e5940014	 ldr         r0, [r4, #0x14]
  00160	e59f3078	 ldr         r3, [pc, #0x78]
  00164	e5d12005	 ldrb        r2, [r1, #5]
  00168	e5d11010	 ldrb        r1, [r1, #0x10]
  0016c	e2800fca	 add         r0, r0, #0xCA, 30
  00170	eb000000	 bl          |?AllocChannel@CCppiDmaController@@QAAPAVCCppiDmaChannel@@EEP6AXPAV2@IIIIPAX1@Z@Z|
  00174	e5943020	 ldr         r3, [r4, #0x20]
  00178	e5830034	 str         r0, [r3, #0x34]

; 1055 : 
; 1056 : #endif // MUSB_USEDMA_FOR_BULK
; 1057 : #endif // MUSB_USEDMA
; 1058 : 
; 1059 :             if(m_pUSBED->bfDirection == TD_IN_PID)

  0017c	e5942020	 ldr         r2, [r4, #0x20]
  00180	e5d23006	 ldrb        r3, [r2, #6]
  00184	e3530002	 cmp         r3, #2

; 1060 :             {
; 1061 :                 m_pUSBED->NextED.next = (ListHead*)(m_pCOhcd->CHW::m_pBulkInHead);

  00188	e5943014	 ldr         r3, [r4, #0x14]
  0018c	059330a8	 ldreq       r3, [r3, #0xA8]
  00190	05823000	 streq       r3, [r2]

; 1062 :                 (m_pCOhcd->CHW::m_pBulkInHead) = (PDWORD)m_pUSBED;

  00194	05942014	 ldreq       r2, [r4, #0x14]
  00198	05943020	 ldreq       r3, [r4, #0x20]
  0019c	058230a8	 streq       r3, [r2, #0xA8]

; 1063 :             }
; 1064 :             else
; 1065 :             {
; 1066 :                 m_pUSBED->NextED.next = (ListHead*)(m_pCOhcd->CHW::m_pBulkOutHead);

  001a0	159330ac	 ldrne       r3, [r3, #0xAC]
  001a4	15823000	 strne       r3, [r2]

; 1067 :                 (m_pCOhcd->CHW::m_pBulkOutHead) = (PDWORD)m_pUSBED;

  001a8	15942014	 ldrne       r2, [r4, #0x14]
  001ac	15943020	 ldrne       r3, [r4, #0x20]

; 1068 :             }
; 1069 : 
; 1070 :             RetVal = requestOK;
; 1071 :             m_pCOhcd->IncrementPipeCount();

  001b0	e3a05001	 mov         r5, #1
  001b4	158230ac	 strne       r3, [r2, #0xAC]
  001b8	e5943014	 ldr         r3, [r4, #0x14]
  001bc	e2830e47	 add         r0, r3, #0x47, 28
  001c0	eb000000	 bl          InterlockedIncrement

; 1072 :         }
; 1073 :         else

  001c4	ea000000	 b           |$LN1@OpenPipe|
  001c8		 |$LN6@OpenPipe|

; 1074 :         {
; 1075 :             DEBUGMSG( ZONE_PIPE, (TEXT("CBulkPipe::OpenPipe: no free EDs!\n\r")));
; 1076 :             RetVal = requestFailed;
; 1077 :         }
; 1078 :     }
; 1079 :     else
; 1080 :     {
; 1081 :         DEBUGMSG( ZONE_PIPE, (TEXT("CBulkPipe::OpenPipe: no free endpoints!\n\r")));
; 1082 :         RetVal = requestFailed;

  001c8	e3a05000	 mov         r5, #0
  001cc		 |$LN1@OpenPipe|

; 1083 :     }
; 1084 : 
; 1085 :     LeaveCriticalSection( &m_csPipeLock );

  001cc	e2840024	 add         r0, r4, #0x24
  001d0	eb000000	 bl          LeaveCriticalSection

; 1086 : 
; 1087 :     DEBUGMSG( ZONE_PIPE, (TEXT("-CBulkPipe::OpenPipe, returning HCD_REQUEST_STATUS %d\n\r"), RetVal) );
; 1088 :     return RetVal;
; 1089 : }

  001d4	e1a00005	 mov         r0, r5
  001d8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  001dc	e12fff1e	 bx          lr
  001e0		 |$LN22@OpenPipe|
  001e0		 |$LN23@OpenPipe|
  001e0	00000000	 DCD         |?DmaTransferComplete@CHW@@SAXPAVCCppiDmaChannel@@IIIIPAX1@Z|
  001e4		 |$M37733|

			 ENDP  ; |?OpenPipe@CBulkPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|, CBulkPipe::OpenPipe


  00000			 AREA	 |.pdata|, PDATA
|$T37746| DCD	|$LN5@GetListHea|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetListHead@CBulkPipe@@EAAPAKH@Z| PROC ; CBulkPipe::GetListHead

; 1092 : {

  00000		 |$LN5@GetListHea|
  00000		 |$M37743|

; 1093 :     UNREFERENCED_PARAMETER(fEnable);
; 1094 :     //m_pCOhcd->CHW::ListControl(CHW::LIST_BULK, fEnable, FALSE);
; 1095 : 
; 1096 :     // return m_pCOhcd->CHW::m_pBulkHead;
; 1097 :     return NULL;

  00000	e3a00000	 mov         r0, #0

; 1098 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37744|

			 ENDP  ; |?GetListHead@CBulkPipe@@EAAPAKH@Z|, CBulkPipe::GetListHead


  00000			 AREA	 |.pdata|, PDATA
|$T37753| DCD	|$LN5@UpdateList|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateListControl@CBulkPipe@@UAAXHH@Z| PROC ; CBulkPipe::UpdateListControl

; 1101 : {

  00000		 |$LN5@UpdateList|
  00000		 |$M37750|

; 1102 :     UNREFERENCED_PARAMETER(bEnable);
; 1103 :     UNREFERENCED_PARAMETER(bFill);
; 1104 :     //m_pCOhcd->CHW::ListControl(CHW::LIST_BULK, bEnable, bFill);
; 1105 : }

  00000	e12fff1e	 bx          lr
  00004		 |$M37751|

			 ENDP  ; |?UpdateListControl@CBulkPipe@@UAAXHH@Z|, CBulkPipe::UpdateListControl


  00000			 AREA	 |.pdata|, PDATA
|$T37767| DCD	|$LN9@AreTransfe|
	DCD	0x40001800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AreTransferParametersValid@CBulkPipe@@EBAHPBUSTRANSFER@@@Z| PROC ; CBulkPipe::AreTransferParametersValid

; 1121 : {

  00000		 |$LN9@AreTransfe|
  00000		 |$M37764|
  00000	e3510000	 cmp         r1, #0

; 1122 :     if (pTransfer == NULL)
; 1123 :         return FALSE;

  00004	0a000013	 beq         |$LN4@AreTransfe|

; 1124 : 
; 1125 :     //DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("+CBulkPipe::AreTransferParametersValid\n\r")) );
; 1126 : 
; 1127 :     // these parameters aren't used by CBulkPipe, so if they are non NULL,
; 1128 :     // it doesn't present a serious problem. But, they shouldn't have been
; 1129 :     // passed in as non-NULL by the calling driver.
; 1130 :     DEBUGCHK( pTransfer->adwIsochErrors == NULL && // ISOCH
; 1131 :               pTransfer->adwIsochLengths == NULL && // ISOCH
; 1132 :               pTransfer->aLengths == NULL && // ISOCH
; 1133 :               pTransfer->lpvControlHeader == NULL ); // CONTROL
; 1134 :     // this is also not a serious problem, but shouldn't happen in normal
; 1135 :     // circumstances. It would indicate a logic error in the calling driver.
; 1136 :     DEBUGCHK( !(pTransfer->lpfnCallback == NULL && pTransfer->lpvCallbackParameter != NULL) );
; 1137 :     // DWORD                     pTransfer->dwStartingFrame (ignored - ISOCH)
; 1138 :     // DWORD                     pTransfer->dwFrames (ignored - ISOCH)
; 1139 : 
; 1140 :     BOOL fValid = (
; 1141 :                     pTransfer->address > 0 &&
; 1142 :                     pTransfer->address <= USB_MAX_ADDRESS &&
; 1143 :                     (pTransfer->lpvClientBuffer != NULL || pTransfer->dwBufferSize == 0) &&
; 1144 :                     // paClientBuffer could be 0 or !0
; 1145 :                     pTransfer->lpfComplete != NULL &&
; 1146 :                     pTransfer->lpdwBytesTransferred != NULL &&
; 1147 :                     pTransfer->lpdwError != NULL );

  00008	e5d13000	 ldrb        r3, [r1]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000010	 beq         |$LN4@AreTransfe|
  00014	e353007f	 cmp         r3, #0x7F
  00018	8a00000e	 bhi         |$LN4@AreTransfe|
  0001c	e5913028	 ldr         r3, [r1, #0x28]
  00020	e3530000	 cmp         r3, #0
  00024	1a000002	 bne         |$LN5@AreTransfe|
  00028	e5913024	 ldr         r3, [r1, #0x24]
  0002c	e3530000	 cmp         r3, #0
  00030	1a000008	 bne         |$LN4@AreTransfe|
  00034		 |$LN5@AreTransfe|
  00034	e591303c	 ldr         r3, [r1, #0x3C]
  00038	e3530000	 cmp         r3, #0
  0003c	0a000005	 beq         |$LN4@AreTransfe|
  00040	e5913040	 ldr         r3, [r1, #0x40]
  00044	e3530000	 cmp         r3, #0
  00048	15913044	 ldrne       r3, [r1, #0x44]
  0004c	13530000	 cmpne       r3, #0
  00050	13a00001	 movne       r0, #1

; 1148 : 
; 1149 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE && !fValid, (TEXT("!CBulkPipe::AreTransferParametersValid, returning BOOL %d\n\r"), fValid) );
; 1150 :     return fValid;
; 1151 : }

  00054	112fff1e	 bxne        lr
  00058		 |$LN4@AreTransfe|

; 1124 : 
; 1125 :     //DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("+CBulkPipe::AreTransferParametersValid\n\r")) );
; 1126 : 
; 1127 :     // these parameters aren't used by CBulkPipe, so if they are non NULL,
; 1128 :     // it doesn't present a serious problem. But, they shouldn't have been
; 1129 :     // passed in as non-NULL by the calling driver.
; 1130 :     DEBUGCHK( pTransfer->adwIsochErrors == NULL && // ISOCH
; 1131 :               pTransfer->adwIsochLengths == NULL && // ISOCH
; 1132 :               pTransfer->aLengths == NULL && // ISOCH
; 1133 :               pTransfer->lpvControlHeader == NULL ); // CONTROL
; 1134 :     // this is also not a serious problem, but shouldn't happen in normal
; 1135 :     // circumstances. It would indicate a logic error in the calling driver.
; 1136 :     DEBUGCHK( !(pTransfer->lpfnCallback == NULL && pTransfer->lpvCallbackParameter != NULL) );
; 1137 :     // DWORD                     pTransfer->dwStartingFrame (ignored - ISOCH)
; 1138 :     // DWORD                     pTransfer->dwFrames (ignored - ISOCH)
; 1139 : 
; 1140 :     BOOL fValid = (
; 1141 :                     pTransfer->address > 0 &&
; 1142 :                     pTransfer->address <= USB_MAX_ADDRESS &&
; 1143 :                     (pTransfer->lpvClientBuffer != NULL || pTransfer->dwBufferSize == 0) &&
; 1144 :                     // paClientBuffer could be 0 or !0
; 1145 :                     pTransfer->lpfComplete != NULL &&
; 1146 :                     pTransfer->lpdwBytesTransferred != NULL &&
; 1147 :                     pTransfer->lpdwError != NULL );

  00058	e3a00000	 mov         r0, #0

; 1148 : 
; 1149 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE && !fValid, (TEXT("!CBulkPipe::AreTransferParametersValid, returning BOOL %d\n\r"), fValid) );
; 1150 :     return fValid;
; 1151 : }

  0005c	e12fff1e	 bx          lr
  00060		 |$M37765|

			 ENDP  ; |?AreTransferParametersValid@CBulkPipe@@EBAHPBUSTRANSFER@@@Z|, CBulkPipe::AreTransferParametersValid


  00000			 AREA	 |.pdata|, PDATA
|$T37776| DCD	|$LN5@ScheduleTr|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ScheduleTransfer@CBulkPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ| PROC ; CBulkPipe::ScheduleTransfer

; 1165 : {

  00000		 |$LN5@ScheduleTr|
  00000		 |$M37773|

; 1166 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("+CBulkPipe::ScheduleTransfer %08x\n\r"), m_pTransfer) );
; 1167 : 
; 1168 : 
; 1169 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("-CBulkPipe::ScheduleTransfer, returning HCD_REQUEST_STATUS %d\n\r"), requestOK) );
; 1170 :     return requestOK;

  00000	e3a00001	 mov         r0, #1

; 1171 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37774|

			 ENDP  ; |?ScheduleTransfer@CBulkPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ|, CBulkPipe::ScheduleTransfer

	EXPORT	|??0CControlPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z| ; CControlPipe::CControlPipe
	EXPORT	|??_7CControlPipe@@6B@| [ DATA ]	; CControlPipe::`vftable'
	EXPORT	|?OpenPipe@CControlPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ| ; CControlPipe::OpenPipe
	EXPORT	|?ChangeMaxPacketSize@CControlPipe@@UAAXG@Z| ; CControlPipe::ChangeMaxPacketSize
	EXPORT	|?GetType@CControlPipe@@UAA?AW4PIPE_TYPE@@XZ| ; CControlPipe::GetType
	EXPORT	|?UpdateListControl@CControlPipe@@UAAXHH@Z| ; CControlPipe::UpdateListControl
	EXPORT	|?GetPipeType@CControlPipe@@UBAPBGXZ|	; CControlPipe::GetPipeType
	EXPORT	|?AreTransferParametersValid@CControlPipe@@EBAHPBUSTRANSFER@@@Z| ; CControlPipe::AreTransferParametersValid
	EXPORT	|?ScheduleTransfer@CControlPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ| ; CControlPipe::ScheduleTransfer
	EXPORT	|?GetListHead@CControlPipe@@EAAPAKH@Z|	; CControlPipe::GetListHead
	IMPORT	|??_ECControlPipe@@UAAPAXI@Z|, WEAK |??_GCControlPipe@@UAAPAXI@Z| ; CControlPipe::`vector deleting destructor', CControlPipe::`scalar deleting destructor'

  00000			 AREA	 |.pdata|, PDATA
|$T37789| DCD	|$LN5@CControlPi|
	DCD	0x40001302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CControlPipe@@6B@| DCD |??_ECControlPipe@@UAAPAXI@Z| ; CControlPipe::`vftable'
	DCD	|?OpenPipe@CControlPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?ClosePipe@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?IssueTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@EQ6AKPAX@ZQAXKQBXKKQBKK2K3QAK5QAH55@Z|
	DCD	|?AbortTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@Q6AKPAX@ZQAXPBX@Z|
	DCD	|?IsPipeHalted@CPipe@@UAA?AW4HCD_REQUEST_STATUS@@QAH@Z|
	DCD	|?ClearHaltedFlag@CPipe@@UAAXXZ|
	DCD	|?ChangeMaxPacketSize@CControlPipe@@UAAXG@Z|
	DCD	|?GetType@CControlPipe@@UAA?AW4PIPE_TYPE@@XZ|
	DCD	|?CheckForDoneTransfers@CQueuedPipe@@UAAHTTDLINK@@@Z|
	DCD	|?UpdateListControl@CControlPipe@@UAAXHH@Z|
	DCD	|?GetPipeType@CControlPipe@@UBAPBGXZ|
	DCD	|?GetTdSize@CQueuedPipe@@UBA?BHXZ|
	DCD	|?AreTransferParametersValid@CControlPipe@@EBAHPBUSTRANSFER@@@Z|
	DCD	|?GetMemoryAllocationFlags@CPipe@@MBAKXZ|
	DCD	|?ScheduleTransfer@CControlPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?GetListHead@CControlPipe@@EAAPAKH@Z|
	DCD	|?UpdateInterruptQHTreeLoad@CQueuedPipe@@MAAXEH@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CControlPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z| PROC ; CControlPipe::CControlPipe

; 1191 : {

  00000		 |$LN5@CControlPi|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M37786|
  00008	e1a07000	 mov         r7, r0
  0000c	e59de030	 ldr         lr, [sp, #0x30]
  00010	e5dd402c	 ldrb        r4, [sp, #0x2C]
  00014	e5dd5028	 ldrb        r5, [sp, #0x28]
  00018	e5dd6024	 ldrb        r6, [sp, #0x24]
  0001c	e58de00c	 str         lr, [sp, #0xC]
  00020	e58d4008	 str         r4, [sp, #8]
  00024	e58d5004	 str         r5, [sp, #4]
  00028	e58d6000	 str         r6, [sp]
  0002c	eb000000	 bl          |??0CQueuedPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|
  00030	e59f3010	 ldr         r3, [pc, #0x10]

; 1192 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CControlPipe::CControlPipe\n\r")) );
; 1193 :     DEBUGCHK( m_usbEndpointDescriptor.bDescriptorType == USB_ENDPOINT_DESCRIPTOR_TYPE &&
; 1194 :               m_usbEndpointDescriptor.bLength >= sizeof( USB_ENDPOINT_DESCRIPTOR ) &&
; 1195 :               (m_usbEndpointDescriptor.bmAttributes & USB_ENDPOINT_TYPE_MASK) == USB_ENDPOINT_TYPE_CONTROL );
; 1196 : 
; 1197 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CControlPipe::CControlPipe\n\r")) );
; 1198 : }

  00034	e1a00007	 mov         r0, r7
  00038	e5873000	 str         r3, [r7]
  0003c	e28dd010	 add         sp, sp, #0x10
  00040	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN6@CControlPi|
  00048		 |$LN7@CControlPi|
  00048	00000000	 DCD         |??_7CControlPipe@@6B@|
  0004c		 |$M37787|

			 ENDP  ; |??0CControlPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|, CControlPipe::CControlPipe

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37800| DCD	|$LN5@GetType@3|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetType@CControlPipe@@UAA?AW4PIPE_TYPE@@XZ| PROC ; CControlPipe::GetType

; 595  :     virtual PIPE_TYPE GetType () { return TYPE_CONTROL; };

  00000		 |$LN5@GetType@3|
  00000		 |$M37797|
  00000	e3a00001	 mov         r0, #1
  00004	e12fff1e	 bx          lr
  00008		 |$M37798|

			 ENDP  ; |?GetType@CControlPipe@@UAA?AW4PIPE_TYPE@@XZ|, CControlPipe::GetType

	EXPORT	|?cszPipeType@?1??GetPipeType@CControlPipe@@UBAPBGXZ@4PBGB| [ DATA ] ; `CControlPipe::GetPipeType'::`2'::cszPipeType
	EXPORT	|??_C@_1BA@JGFNDEFA@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T37809| DCD	|$LN5@GetPipeTyp@2|
	DCD	0x40000400

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@JGFNDEFA@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AA@| DCB "C", 0x0
	DCB	"o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.data|, DATA
|?cszPipeType@?1??GetPipeType@CControlPipe@@UBAPBGXZ@4PBGB| DCD |??_C@_1BA@JGFNDEFA@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AA@| ; `CControlPipe::GetPipeType'::`2'::cszPipeType
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPipeType@CControlPipe@@UBAPBGXZ| PROC ; CControlPipe::GetPipeType

; 609  :     {

  00000		 |$LN5@GetPipeTyp@2|
  00000		 |$M37806|

; 610  :         static const TCHAR* cszPipeType = TEXT("Control");
; 611  :         return cszPipeType;

  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5930000	 ldr         r0, [r3]

; 612  :     }

  00008	e12fff1e	 bx          lr
  0000c		 |$LN6@GetPipeTyp@2|
  0000c		 |$LN7@GetPipeTyp@2|
  0000c	00000000	 DCD         |?cszPipeType@?1??GetPipeType@CControlPipe@@UBAPBGXZ@4PBGB|
  00010		 |$M37807|

			 ENDP  ; |?GetPipeType@CControlPipe@@UBAPBGXZ|, CControlPipe::GetPipeType

	EXPORT	|??1CControlPipe@@UAA@XZ|		; CControlPipe::~CControlPipe
; File c:\wince600\public\common\oak\drivers\usb\hcd\usb20\usb2com\pipeabs.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37834| DCD	|$LN11@CControlPi@2|
	DCD	0x40000b01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CControlPipe@@UAA@XZ| PROC		; CControlPipe::~CControlPipe

; 1212 : {

  00000		 |$LN11@CControlPi@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37831|
  00004	e1a04000	 mov         r4, r0

; 1213 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CControlPipe::~CControlPipe\n\r")) );
; 1214 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CControlPipe::~CControlPipe\n\r")) );
; 1215 : }

  00008	e59f3018	 ldr         r3, [pc, #0x18]
  0000c	e4803024	 str         r3, [r0], #0x24
  00010	eb000000	 bl          DeleteCriticalSection
  00014	e59f3008	 ldr         r3, [pc, #8]
  00018	e5843000	 str         r3, [r4]
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN12@CControlPi@2|
  00024		 |$LN13@CControlPi@2|
  00024	00000000	 DCD         |??_7CPipeAbs@@6B@|
  00028		 |$LN14@CControlPi@2|
  00028	00000000	 DCD         |??_7CPipe@@6B@|
  0002c		 |$M37832|

			 ENDP  ; |??1CControlPipe@@UAA@XZ|, CControlPipe::~CControlPipe

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37857| DCD	|$LN15@OpenPipe@2|
	DCD	0x40005e01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OpenPipe@CControlPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ| PROC ; CControlPipe::OpenPipe

; 1232 : {

  00000		 |$LN15@OpenPipe@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M37854|
  00004	e1a04000	 mov         r4, r0

; 1233 :     HCD_REQUEST_STATUS RetVal;
; 1234 :     INT32 EndpointNum;
; 1235 :     DEBUGMSG( ZONE_PIPE, (TEXT("+CControlPipe::OpenPipe\n\r") ) );
; 1236 : 
; 1237 :     EnterCriticalSection( &m_csPipeLock );

  00008	e2840024	 add         r0, r4, #0x24
  0000c	eb000000	 bl          EnterCriticalSection

; 1238 :     //m_pCOhcd->LockProcessingThread();
; 1239 : 
; 1240 :     /*last two parameters not valied*/
; 1241 :     EndpointNum = m_pCOhcd->AllocateHostEndPoint(
; 1242 :         (UINT32)GetType(),
; 1243 :         m_usbEndpointDescriptor.wMaxPacketSize,
; 1244 :         TRUE);

  00010	e5943000	 ldr         r3, [r4]
  00014	e1a00004	 mov         r0, r4
  00018	e5933020	 ldr         r3, [r3, #0x20]
  0001c	e1a0e00f	 mov         lr, pc
  00020	e12fff13	 bx          r3
  00024	e5d4203c	 ldrb        r2, [r4, #0x3C]
  00028	e5d4303d	 ldrb        r3, [r4, #0x3D]
  0002c	e1a01000	 mov         r1, r0
  00030	e5940014	 ldr         r0, [r4, #0x14]
  00034	e1822403	 orr         r2, r2, r3, lsl #8
  00038	e3a03001	 mov         r3, #1
  0003c	eb000000	 bl          |?AllocateHostEndPoint@CHW@@QAAHIKH@Z|
  00040	e1b05000	 movs        r5, r0

; 1245 : 
; 1246 :     if(EndpointNum >= 0){

  00044	4a000045	 bmi         |$LN4@OpenPipe@2|

; 1247 :         m_pUSBED = AllocateED();

  00048	eb000000	 bl          |?AllocateED@@YAPAU_USBED@@XZ|
  0004c	e3500000	 cmp         r0, #0
  00050	e5840020	 str         r0, [r4, #0x20]

; 1248 : 
; 1249 :         if (m_pUSBED)

  00054	0a000041	 beq         |$LN4@OpenPipe@2|

; 1250 :         {
; 1251 :             m_pUSBED->bHostEndPointNum = (UINT8)EndpointNum;

  00058	e5c05010	 strb        r5, [r0, #0x10]

; 1252 :             m_pUSBED->bfFunctionAddress = m_bBusAddress;

  0005c	e594300c	 ldr         r3, [r4, #0xC]
  00060	e5942020	 ldr         r2, [r4, #0x20]

; 1253 :             m_pUSBED->bfEndpointNumber = m_bEndpointAddress;
; 1254 :             m_pUSBED->bfDirection = TD_SETUP_PID;

  00064	e3a06000	 mov         r6, #0
  00068	e5d33000	 ldrb        r3, [r3]

; 1255 :             m_pUSBED->bfIsLowSpeed = m_fIsLowSpeed ? 1 : 0;
; 1256 :             m_pUSBED->bfIsHighSpeed = m_fIsHighSpeed ? 1 :0;
; 1257 :             m_pUSBED->bfHubAddress = m_bHubAddress;
; 1258 :             m_pUSBED->bfHubPort = m_bHubPort;
; 1259 :             m_pUSBED->bfIsIsochronous =  0;
; 1260 :             m_pUSBED->bfMaxPacketSize = m_usbEndpointDescriptor.wMaxPacketSize;
; 1261 :              m_pUSBED->bfAttributes = m_usbEndpointDescriptor.bmAttributes;
; 1262 :             m_pUSBED->TransferStatus = STATUS_IDLE;
; 1263 :             // Control endpoint does not have interval control register
; 1264 :             m_pUSBED->bInterval = 0; // m_usbEndpointDescriptor.bInterval;
; 1265 : 
; 1266 :             m_pCOhcd->ProgramHostEndpoint((UINT32)GetType(), (void *)m_pUSBED);

  0006c	e1a00004	 mov         r0, r4
  00070	e5c23004	 strb        r3, [r2, #4]
  00074	e5942020	 ldr         r2, [r4, #0x20]
  00078	e5d43008	 ldrb        r3, [r4, #8]
  0007c	e5c23005	 strb        r3, [r2, #5]
  00080	e5943020	 ldr         r3, [r4, #0x20]
  00084	e5c36006	 strb        r6, [r3, #6]
  00088	e5943040	 ldr         r3, [r4, #0x40]
  0008c	e3530000	 cmp         r3, #0
  00090	e5943020	 ldr         r3, [r4, #0x20]
  00094	13a02001	 movne       r2, #1
  00098	03a02000	 moveq       r2, #0
  0009c	e5c32008	 strb        r2, [r3, #8]
  000a0	e5943044	 ldr         r3, [r4, #0x44]
  000a4	e3530000	 cmp         r3, #0
  000a8	e5943020	 ldr         r3, [r4, #0x20]
  000ac	13a02001	 movne       r2, #1
  000b0	03a02000	 moveq       r2, #0
  000b4	e5c32009	 strb        r2, [r3, #9]
  000b8	e5942020	 ldr         r2, [r4, #0x20]
  000bc	e5d43010	 ldrb        r3, [r4, #0x10]
  000c0	e5c2300a	 strb        r3, [r2, #0xA]
  000c4	e5942020	 ldr         r2, [r4, #0x20]
  000c8	e5d43011	 ldrb        r3, [r4, #0x11]
  000cc	e5c2300b	 strb        r3, [r2, #0xB]
  000d0	e5943020	 ldr         r3, [r4, #0x20]
  000d4	e5c3600d	 strb        r6, [r3, #0xD]
  000d8	e5d4103c	 ldrb        r1, [r4, #0x3C]
  000dc	e5d4303d	 ldrb        r3, [r4, #0x3D]
  000e0	e5942020	 ldr         r2, [r4, #0x20]
  000e4	e1813403	 orr         r3, r1, r3, lsl #8
  000e8	e1c230be	 strh        r3, [r2, #0xE]
  000ec	e5942020	 ldr         r2, [r4, #0x20]
  000f0	e5d4303b	 ldrb        r3, [r4, #0x3B]
  000f4	e5c23007	 strb        r3, [r2, #7]
  000f8	e5943020	 ldr         r3, [r4, #0x20]
  000fc	e583601c	 str         r6, [r3, #0x1C]
  00100	e5943020	 ldr         r3, [r4, #0x20]
  00104	e5c36011	 strb        r6, [r3, #0x11]
  00108	e5943000	 ldr         r3, [r4]
  0010c	e5933020	 ldr         r3, [r3, #0x20]
  00110	e1a0e00f	 mov         lr, pc
  00114	e12fff13	 bx          r3
  00118	e5942020	 ldr         r2, [r4, #0x20]
  0011c	e1a01000	 mov         r1, r0
  00120	e5940014	 ldr         r0, [r4, #0x14]
  00124	eb000000	 bl          |?ProgramHostEndpoint@CHW@@QAAXIPAX@Z|

; 1267 : 
; 1268 :             m_pUSBED->NextED.next = (ListHead *)(m_pCOhcd->CHW::m_pControlHead);

  00128	e5943014	 ldr         r3, [r4, #0x14]
  0012c	e5942020	 ldr         r2, [r4, #0x20]

; 1269 :             (m_pCOhcd->CHW::m_pControlHead) = (PDWORD)m_pUSBED;
; 1270 : 
; 1271 : #ifdef MUSB_USEDMA
; 1272 :             // Control pipes do not support DMA transfers
; 1273 :             m_pUSBED->pDmaChannel = NULL;
; 1274 : #endif // MUSB_USEDMA
; 1275 : 
; 1276 :             RetVal = requestOK;

  00130	e3a05001	 mov         r5, #1
  00134	e59330a4	 ldr         r3, [r3, #0xA4]
  00138	e5823000	 str         r3, [r2]
  0013c	e5942014	 ldr         r2, [r4, #0x14]
  00140	e5943020	 ldr         r3, [r4, #0x20]
  00144	e58230a4	 str         r3, [r2, #0xA4]
  00148	e5943020	 ldr         r3, [r4, #0x20]
  0014c	e5836034	 str         r6, [r3, #0x34]

; 1277 :             m_pCOhcd->IncrementPipeCount();

  00150	e5943014	 ldr         r3, [r4, #0x14]
  00154	e2830e47	 add         r0, r3, #0x47, 28
  00158	eb000000	 bl          InterlockedIncrement

; 1278 :         }
; 1279 :         else

  0015c	ea000000	 b           |$LN1@OpenPipe@2|
  00160		 |$LN4@OpenPipe@2|

; 1280 :         {
; 1281 :             DEBUGMSG( ZONE_PIPE, (TEXT("CControlPipe::OpenPipe: no free EDs!\n\r")));
; 1282 :             RetVal = requestFailed;
; 1283 :         }
; 1284 :     }
; 1285 :     else
; 1286 :     {
; 1287 :         DEBUGMSG( ZONE_PIPE, (TEXT("CControlPipe::OpenPipe: no free endpoints!\n\r")));
; 1288 :         RetVal = requestFailed;

  00160	e3a05000	 mov         r5, #0
  00164		 |$LN1@OpenPipe@2|

; 1289 :     }
; 1290 : 
; 1291 :     //m_pCOhcd->UnlockProcessingThread();
; 1292 :     LeaveCriticalSection( &m_csPipeLock );

  00164	e2840024	 add         r0, r4, #0x24
  00168	eb000000	 bl          LeaveCriticalSection

; 1293 : 
; 1294 :     DEBUGMSG( ZONE_PIPE, (TEXT("-CControlPipe::OpenPipe %d\n\r"), RetVal));
; 1295 :     return RetVal;
; 1296 : }

  0016c	e1a00005	 mov         r0, r5
  00170	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00174	e12fff1e	 bx          lr
  00178		 |$M37855|

			 ENDP  ; |?OpenPipe@CControlPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|, CControlPipe::OpenPipe

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\chw.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37874| DCD	|$LN10@ChangeMaxP@2|
	DCD	0x40001f01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ChangeMaxPacketSize@CControlPipe@@UAAXG@Z| PROC ; CControlPipe::ChangeMaxPacketSize

; 1315 : {

  00000		 |$LN10@ChangeMaxP@2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37871|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 1316 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CControlPipe::ChangeMaxPacketSize - new wMaxPacketSize = %d\n\r"), wMaxPacketSize) );
; 1317 : 
; 1318 :     EnterCriticalSection( &m_csPipeLock );

  0000c	e2840024	 add         r0, r4, #0x24
  00010	eb000000	 bl          EnterCriticalSection

; 1319 :     m_pCOhcd->LockProcessingThread();

  00014	e5943014	 ldr         r3, [r4, #0x14]
  00018	e2830f89	 add         r0, r3, #0x89, 30
  0001c	eb000000	 bl          EnterCriticalSection

; 1320 : 
; 1321 :     // this pipe should be for endpoint 0, control pipe
; 1322 :     DEBUGCHK( (m_usbEndpointDescriptor.bmAttributes & USB_ENDPOINT_TYPE_MASK) == USB_ENDPOINT_TYPE_CONTROL &&
; 1323 :               (m_usbEndpointDescriptor.bEndpointAddress & TD_ENDPOINT_MASK) == 0 );
; 1324 :     // update should only be called if the old address was ENDPOINT_ZERO_MIN_MAXPACKET_SIZE
; 1325 :     DEBUGCHK( m_usbEndpointDescriptor.wMaxPacketSize == ENDPOINT_ZERO_MIN_MAXPACKET_SIZE );
; 1326 :     // this function should only be called if we are increasing the max packet size.
; 1327 :     // in addition, the USB spec 1.0 section 9.6.1 states only the following
; 1328 :     // wMaxPacketSize are allowed for endpoint 0
; 1329 :     DEBUGCHK( wMaxPacketSize > ENDPOINT_ZERO_MIN_MAXPACKET_SIZE &&
; 1330 :               (wMaxPacketSize == 16 ||
; 1331 :                wMaxPacketSize == 32 ||
; 1332 :                wMaxPacketSize == 64) );
; 1333 : 
; 1334 :     if (m_usbEndpointDescriptor.wMaxPacketSize != wMaxPacketSize) {

  00020	e5d4203c	 ldrb        r2, [r4, #0x3C]
  00024	e5d4303d	 ldrb        r3, [r4, #0x3D]
  00028	e1823403	 orr         r3, r2, r3, lsl #8
  0002c	e1530005	 cmp         r3, r5
  00030	0a00000a	 beq         |$LN1@ChangeMaxP@2|

; 1335 :         m_pUSBED->bfSkip = 1;

  00034	e5943020	 ldr         r3, [r4, #0x20]
  00038	e3a01001	 mov         r1, #1

; 1336 :         m_usbEndpointDescriptor.wMaxPacketSize = wMaxPacketSize;

  0003c	e1a02425	 mov         r2, r5, lsr #8
  00040	e5c3100c	 strb        r1, [r3, #0xC]

; 1337 :         m_pUSBED->bfMaxPacketSize = wMaxPacketSize;

  00044	e5943020	 ldr         r3, [r4, #0x20]
  00048	e5c4503c	 strb        r5, [r4, #0x3C]
  0004c	e5c4203d	 strb        r2, [r4, #0x3D]
  00050	e1c350be	 strh        r5, [r3, #0xE]

; 1338 :         m_pUSBED->bfSkip = 0;

  00054	e5943020	 ldr         r3, [r4, #0x20]
  00058	e3a02000	 mov         r2, #0
  0005c	e5c3200c	 strb        r2, [r3, #0xC]
  00060		 |$LN1@ChangeMaxP@2|

; 1339 :     }
; 1340 :     ASSERT(m_pUSBED->bfMaxPacketSize == wMaxPacketSize);
; 1341 : 
; 1342 :     m_pCOhcd->UnlockProcessingThread();

  00060	e5943014	 ldr         r3, [r4, #0x14]
  00064	e2830f89	 add         r0, r3, #0x89, 30
  00068	eb000000	 bl          LeaveCriticalSection

; 1343 :     LeaveCriticalSection( &m_csPipeLock );

  0006c	e2840024	 add         r0, r4, #0x24
  00070	eb000000	 bl          LeaveCriticalSection

; 1344 : 
; 1345 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CControlPipe::ChangeMaxPacketSize - new wMaxPacketSize = %d\n\r"), wMaxPacketSize) );
; 1346 : }

  00074	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$M37872|

			 ENDP  ; |?ChangeMaxPacketSize@CControlPipe@@UAAXG@Z|, CControlPipe::ChangeMaxPacketSize


  00000			 AREA	 |.pdata|, PDATA
|$T37884| DCD	|$LN5@GetListHea@2|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetListHead@CControlPipe@@EAAPAKH@Z| PROC ; CControlPipe::GetListHead

; 1348 : {

  00000		 |$LN5@GetListHea@2|
  00000		 |$M37881|

; 1349 :     UNREFERENCED_PARAMETER(fEnable);
; 1350 :     //m_pCOhcd->CHW::ListControl(CHW::LIST_CONTROL, fEnable, FALSE);
; 1351 :     return m_pCOhcd->CHW::m_pControlHead;

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e59300a4	 ldr         r0, [r3, #0xA4]

; 1352 : };

  00008	e12fff1e	 bx          lr
  0000c		 |$M37882|

			 ENDP  ; |?GetListHead@CControlPipe@@EAAPAKH@Z|, CControlPipe::GetListHead


  00000			 AREA	 |.pdata|, PDATA
|$T37891| DCD	|$LN5@UpdateList@2|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateListControl@CControlPipe@@UAAXHH@Z| PROC ; CControlPipe::UpdateListControl

; 1354 : {

  00000		 |$LN5@UpdateList@2|
  00000		 |$M37888|

; 1355 :     UNREFERENCED_PARAMETER(bEnable);
; 1356 :     UNREFERENCED_PARAMETER(bFill);
; 1357 :     //m_pCOhcd->CHW::ListControl(CHW::LIST_CONTROL, bEnable, bFill);
; 1358 : }

  00000	e12fff1e	 bx          lr
  00004		 |$M37889|

			 ENDP  ; |?UpdateListControl@CControlPipe@@UAAXHH@Z|, CControlPipe::UpdateListControl


  00000			 AREA	 |.pdata|, PDATA
|$T37913| DCD	|$LN20@AreTransfe@2|
	DCD	0x40002600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AreTransferParametersValid@CControlPipe@@EBAHPBUSTRANSFER@@@Z| PROC ; CControlPipe::AreTransferParametersValid

; 1372 : {

  00000		 |$LN20@AreTransfe@2|
  00000		 |$M37910|
  00000	e3510000	 cmp         r1, #0

; 1373 :     if (pTransfer == NULL)
; 1374 :         return FALSE;

  00004	0a000021	 beq         |$LN7@AreTransfe@2|

; 1375 : 
; 1376 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("+CControlPipe::AreTransferParametersValid\n\r")) );
; 1377 : 
; 1378 :     // these parameters aren't used by CControlPipe, so if they are non NULL,
; 1379 :     // it doesn't present a serious problem. But, they shouldn't have been
; 1380 :     // passed in as non-NULL by the calling driver.
; 1381 :     DEBUGCHK( pTransfer->adwIsochErrors == NULL && // ISOCH
; 1382 :               pTransfer->adwIsochLengths == NULL && // ISOCH
; 1383 :               pTransfer->aLengths == NULL ); // ISOCH
; 1384 :     // this is also not a serious problem, but shouldn't happen in normal
; 1385 :     // circumstances. It would indicate a logic error in the calling driver.
; 1386 :     DEBUGCHK( !(pTransfer->lpfnCallback == NULL && pTransfer->lpvCallbackParameter != NULL) );
; 1387 :     // DWORD                     pTransfer->dwStartingFrame; (ignored - ISOCH)
; 1388 :     // DWORD                     pTransfer->dwFrames; (ignored - ISOCH)
; 1389 : 
; 1390 :     BOOL fValid = (
; 1391 :                     pTransfer->address <= USB_MAX_ADDRESS &&
; 1392 :                     pTransfer->lpvControlHeader != NULL &&
; 1393 :                     pTransfer->lpfComplete != NULL &&
; 1394 :                     pTransfer->lpdwBytesTransferred != NULL &&
; 1395 :                     pTransfer->lpdwError != NULL );

  00008	e5d13000	 ldrb        r3, [r1]
  0000c	e353007f	 cmp         r3, #0x7F
  00010	8a00001e	 bhi         |$LN7@AreTransfe@2|
  00014	e5913010	 ldr         r3, [r1, #0x10]
  00018	e3530000	 cmp         r3, #0
  0001c	0a00001b	 beq         |$LN7@AreTransfe@2|
  00020	e591303c	 ldr         r3, [r1, #0x3C]
  00024	e3530000	 cmp         r3, #0
  00028	0a000018	 beq         |$LN7@AreTransfe@2|
  0002c	e5913040	 ldr         r3, [r1, #0x40]
  00030	e3530000	 cmp         r3, #0
  00034	0a000015	 beq         |$LN7@AreTransfe@2|
  00038	e5913044	 ldr         r3, [r1, #0x44]
  0003c	e3530000	 cmp         r3, #0
  00040	0a000012	 beq         |$LN7@AreTransfe@2|

; 1396 :     if ( fValid ) {
; 1397 :         if ( pTransfer->dwFlags & USB_IN_TRANSFER ) {

  00044	e591300c	 ldr         r3, [r1, #0xC]
  00048	e3130080	 tst         r3, #0x80

; 1398 :             fValid = (pTransfer->lpvClientBuffer != NULL &&
; 1399 :                       // paClientBuffer could be 0 or !0
; 1400 :                       pTransfer->dwBufferSize > 0);

  0004c	e5913028	 ldr         r3, [r1, #0x28]
  00050	0a000006	 beq         |$LN2@AreTransfe@2|
  00054	e3530000	 cmp         r3, #0
  00058	0a00000c	 beq         |$LN7@AreTransfe@2|
  0005c		 |$LN16@AreTransfe@2|

; 1401 :         } else {
; 1402 :             fValid = ( (pTransfer->lpvClientBuffer == NULL &&
; 1403 :                         pTransfer->paClientBuffer == 0 &&
; 1404 :                         pTransfer->dwBufferSize == 0) ||
; 1405 :                        (pTransfer->lpvClientBuffer != NULL &&
; 1406 :                         // paClientBuffer could be 0 or !0
; 1407 :                         pTransfer->dwBufferSize > 0) );

  0005c	e5913024	 ldr         r3, [r1, #0x24]
  00060	e3530000	 cmp         r3, #0
  00064	9a000009	 bls         |$LN7@AreTransfe@2|
  00068		 |$LN13@AreTransfe@2|
  00068	e3a00001	 mov         r0, #1

; 1408 :         }
; 1409 :     }
; 1410 : 
; 1411 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("-CControlPipe::AreTransferParametersValid, returning BOOL %d\n\r"), fValid) );
; 1412 :     return fValid;
; 1413 : }

  0006c	e12fff1e	 bx          lr
  00070		 |$LN2@AreTransfe@2|

; 1401 :         } else {
; 1402 :             fValid = ( (pTransfer->lpvClientBuffer == NULL &&
; 1403 :                         pTransfer->paClientBuffer == 0 &&
; 1404 :                         pTransfer->dwBufferSize == 0) ||
; 1405 :                        (pTransfer->lpvClientBuffer != NULL &&
; 1406 :                         // paClientBuffer could be 0 or !0
; 1407 :                         pTransfer->dwBufferSize > 0) );

  00070	e3530000	 cmp         r3, #0
  00074	1afffff8	 bne         |$LN16@AreTransfe@2|
  00078	e591302c	 ldr         r3, [r1, #0x2C]
  0007c	e3530000	 cmp         r3, #0
  00080	1a000002	 bne         |$LN7@AreTransfe@2|
  00084	e5913024	 ldr         r3, [r1, #0x24]
  00088	e3530000	 cmp         r3, #0
  0008c	0afffff5	 beq         |$LN13@AreTransfe@2|
  00090		 |$LN7@AreTransfe@2|

; 1375 : 
; 1376 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("+CControlPipe::AreTransferParametersValid\n\r")) );
; 1377 : 
; 1378 :     // these parameters aren't used by CControlPipe, so if they are non NULL,
; 1379 :     // it doesn't present a serious problem. But, they shouldn't have been
; 1380 :     // passed in as non-NULL by the calling driver.
; 1381 :     DEBUGCHK( pTransfer->adwIsochErrors == NULL && // ISOCH
; 1382 :               pTransfer->adwIsochLengths == NULL && // ISOCH
; 1383 :               pTransfer->aLengths == NULL ); // ISOCH
; 1384 :     // this is also not a serious problem, but shouldn't happen in normal
; 1385 :     // circumstances. It would indicate a logic error in the calling driver.
; 1386 :     DEBUGCHK( !(pTransfer->lpfnCallback == NULL && pTransfer->lpvCallbackParameter != NULL) );
; 1387 :     // DWORD                     pTransfer->dwStartingFrame; (ignored - ISOCH)
; 1388 :     // DWORD                     pTransfer->dwFrames; (ignored - ISOCH)
; 1389 : 
; 1390 :     BOOL fValid = (
; 1391 :                     pTransfer->address <= USB_MAX_ADDRESS &&
; 1392 :                     pTransfer->lpvControlHeader != NULL &&
; 1393 :                     pTransfer->lpfComplete != NULL &&
; 1394 :                     pTransfer->lpdwBytesTransferred != NULL &&
; 1395 :                     pTransfer->lpdwError != NULL );

  00090	e3a00000	 mov         r0, #0

; 1408 :         }
; 1409 :     }
; 1410 : 
; 1411 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("-CControlPipe::AreTransferParametersValid, returning BOOL %d\n\r"), fValid) );
; 1412 :     return fValid;
; 1413 : }

  00094	e12fff1e	 bx          lr
  00098		 |$M37911|

			 ENDP  ; |?AreTransferParametersValid@CControlPipe@@EBAHPBUSTRANSFER@@@Z|, CControlPipe::AreTransferParametersValid


  00000			 AREA	 |.pdata|, PDATA
|$T37922| DCD	|$LN5@ScheduleTr@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ScheduleTransfer@CControlPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ| PROC ; CControlPipe::ScheduleTransfer

; 1427 : {

  00000		 |$LN5@ScheduleTr@2|
  00000		 |$M37919|

; 1428 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("+CControlPipe::ScheduleTransfer\n\r")) );
; 1429 : 
; 1430 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("-CControlPipe::ScheduleTransfer\n\r")) );
; 1431 :     return requestOK;

  00000	e3a00001	 mov         r0, #1

; 1432 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37920|

			 ENDP  ; |?ScheduleTransfer@CControlPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ|, CControlPipe::ScheduleTransfer

	EXPORT	|??0CInterruptPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z| ; CInterruptPipe::CInterruptPipe
	EXPORT	|??_7CInterruptPipe@@6B@| [ DATA ]	; CInterruptPipe::`vftable'
	EXPORT	|?OpenPipe@CInterruptPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ| ; CInterruptPipe::OpenPipe
	EXPORT	|?GetType@CInterruptPipe@@UAA?AW4PIPE_TYPE@@XZ| ; CInterruptPipe::GetType
	EXPORT	|?UpdateListControl@CInterruptPipe@@UAAXHH@Z| ; CInterruptPipe::UpdateListControl
	EXPORT	|?GetPipeType@CInterruptPipe@@UBAPBGXZ|	; CInterruptPipe::GetPipeType
	EXPORT	|?AreTransferParametersValid@CInterruptPipe@@EBAHPBUSTRANSFER@@@Z| ; CInterruptPipe::AreTransferParametersValid
	EXPORT	|?ScheduleTransfer@CInterruptPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ| ; CInterruptPipe::ScheduleTransfer
	EXPORT	|?GetListHead@CInterruptPipe@@EAAPAKH@Z| ; CInterruptPipe::GetListHead
	EXPORT	|?UpdateInterruptQHTreeLoad@CInterruptPipe@@EAAXEH@Z| ; CInterruptPipe::UpdateInterruptQHTreeLoad
	IMPORT	|??_ECInterruptPipe@@UAAPAXI@Z|, WEAK |??_GCInterruptPipe@@UAAPAXI@Z| ; CInterruptPipe::`vector deleting destructor', CInterruptPipe::`scalar deleting destructor'

  00000			 AREA	 |.pdata|, PDATA
|$T37935| DCD	|$LN5@CInterrupt|
	DCD	0x40001302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CInterruptPipe@@6B@| DCD |??_ECInterruptPipe@@UAAPAXI@Z| ; CInterruptPipe::`vftable'
	DCD	|?OpenPipe@CInterruptPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?ClosePipe@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?IssueTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@EQ6AKPAX@ZQAXKQBXKKQBKK2K3QAK5QAH55@Z|
	DCD	|?AbortTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@Q6AKPAX@ZQAXPBX@Z|
	DCD	|?IsPipeHalted@CPipe@@UAA?AW4HCD_REQUEST_STATUS@@QAH@Z|
	DCD	|?ClearHaltedFlag@CPipe@@UAAXXZ|
	DCD	|?ChangeMaxPacketSize@CPipeAbs@@UAAXG@Z|
	DCD	|?GetType@CInterruptPipe@@UAA?AW4PIPE_TYPE@@XZ|
	DCD	|?CheckForDoneTransfers@CQueuedPipe@@UAAHTTDLINK@@@Z|
	DCD	|?UpdateListControl@CInterruptPipe@@UAAXHH@Z|
	DCD	|?GetPipeType@CInterruptPipe@@UBAPBGXZ|
	DCD	|?GetTdSize@CQueuedPipe@@UBA?BHXZ|
	DCD	|?AreTransferParametersValid@CInterruptPipe@@EBAHPBUSTRANSFER@@@Z|
	DCD	|?GetMemoryAllocationFlags@CPipe@@MBAKXZ|
	DCD	|?ScheduleTransfer@CInterruptPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?GetListHead@CInterruptPipe@@EAAPAKH@Z|
	DCD	|?UpdateInterruptQHTreeLoad@CInterruptPipe@@EAAXEH@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CInterruptPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z| PROC ; CInterruptPipe::CInterruptPipe

; 1451 : {

  00000		 |$LN5@CInterrupt|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M37932|
  00008	e1a07000	 mov         r7, r0
  0000c	e59de030	 ldr         lr, [sp, #0x30]
  00010	e5dd402c	 ldrb        r4, [sp, #0x2C]
  00014	e5dd5028	 ldrb        r5, [sp, #0x28]
  00018	e5dd6024	 ldrb        r6, [sp, #0x24]
  0001c	e58de00c	 str         lr, [sp, #0xC]
  00020	e58d4008	 str         r4, [sp, #8]
  00024	e58d5004	 str         r5, [sp, #4]
  00028	e58d6000	 str         r6, [sp]
  0002c	eb000000	 bl          |??0CQueuedPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|
  00030	e59f3010	 ldr         r3, [pc, #0x10]

; 1452 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CInterruptPipe::CInterruptPipe\n\r")) );
; 1453 :     DEBUGCHK( m_usbEndpointDescriptor.bDescriptorType == USB_ENDPOINT_DESCRIPTOR_TYPE &&
; 1454 :               m_usbEndpointDescriptor.bLength >= sizeof( USB_ENDPOINT_DESCRIPTOR ) &&
; 1455 :               (m_usbEndpointDescriptor.bmAttributes & USB_ENDPOINT_TYPE_MASK) == USB_ENDPOINT_TYPE_INTERRUPT );
; 1456 : 
; 1457 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CInterruptPipe::CInterruptPipe\n\r")) );
; 1458 : }

  00034	e1a00007	 mov         r0, r7
  00038	e5873000	 str         r3, [r7]
  0003c	e28dd010	 add         sp, sp, #0x10
  00040	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN6@CInterrupt|
  00048		 |$LN7@CInterrupt|
  00048	00000000	 DCD         |??_7CInterruptPipe@@6B@|
  0004c		 |$M37933|

			 ENDP  ; |??0CInterruptPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|, CInterruptPipe::CInterruptPipe

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37946| DCD	|$LN5@GetType@4|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetType@CInterruptPipe@@UAA?AW4PIPE_TYPE@@XZ| PROC ; CInterruptPipe::GetType

; 645  :     virtual PIPE_TYPE GetType () { return TYPE_INTERRUPT; };

  00000		 |$LN5@GetType@4|
  00000		 |$M37943|
  00000	e3a00003	 mov         r0, #3
  00004	e12fff1e	 bx          lr
  00008		 |$M37944|

			 ENDP  ; |?GetType@CInterruptPipe@@UAA?AW4PIPE_TYPE@@XZ|, CInterruptPipe::GetType

	EXPORT	|?cszPipeType@?1??GetPipeType@CInterruptPipe@@UBAPBGXZ@4PBGB| [ DATA ] ; `CInterruptPipe::GetPipeType'::`2'::cszPipeType
	EXPORT	|??_C@_1BE@PBKDACKD@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T37955| DCD	|$LN5@GetPipeTyp@3|
	DCD	0x40000400

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@PBKDACKD@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.data|, DATA
|?cszPipeType@?1??GetPipeType@CInterruptPipe@@UBAPBGXZ@4PBGB| DCD |??_C@_1BE@PBKDACKD@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?$AA@| ; `CInterruptPipe::GetPipeType'::`2'::cszPipeType
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPipeType@CInterruptPipe@@UBAPBGXZ| PROC ; CInterruptPipe::GetPipeType

; 655  :     {

  00000		 |$LN5@GetPipeTyp@3|
  00000		 |$M37952|

; 656  :         static const TCHAR* cszPipeType = TEXT("Interrupt");
; 657  :         return cszPipeType;

  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5930000	 ldr         r0, [r3]

; 658  :     }

  00008	e12fff1e	 bx          lr
  0000c		 |$LN6@GetPipeTyp@3|
  0000c		 |$LN7@GetPipeTyp@3|
  0000c	00000000	 DCD         |?cszPipeType@?1??GetPipeType@CInterruptPipe@@UBAPBGXZ@4PBGB|
  00010		 |$M37953|

			 ENDP  ; |?GetPipeType@CInterruptPipe@@UBAPBGXZ|, CInterruptPipe::GetPipeType

	EXPORT	|??1CInterruptPipe@@UAA@XZ|		; CInterruptPipe::~CInterruptPipe
; File c:\wince600\public\common\oak\drivers\usb\hcd\usb20\usb2com\pipeabs.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37980| DCD	|$LN11@CInterrupt@2|
	DCD	0x40000b01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CInterruptPipe@@UAA@XZ| PROC	; CInterruptPipe::~CInterruptPipe

; 1472 : {

  00000		 |$LN11@CInterrupt@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37977|
  00004	e1a04000	 mov         r4, r0

; 1473 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CInterruptPipe::~CInterruptPipe\n\r")) );
; 1474 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CInterruptPipe::~CInterruptPipe\n\r")) );
; 1475 : }

  00008	e59f3018	 ldr         r3, [pc, #0x18]
  0000c	e4803024	 str         r3, [r0], #0x24
  00010	eb000000	 bl          DeleteCriticalSection
  00014	e59f3008	 ldr         r3, [pc, #8]
  00018	e5843000	 str         r3, [r4]
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN12@CInterrupt@2|
  00024		 |$LN13@CInterrupt@2|
  00024	00000000	 DCD         |??_7CPipeAbs@@6B@|
  00028		 |$LN14@CInterrupt@2|
  00028	00000000	 DCD         |??_7CPipe@@6B@|
  0002c		 |$M37978|

			 ENDP  ; |??1CInterruptPipe@@UAA@XZ|, CInterruptPipe::~CInterruptPipe

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T38007| DCD	|$LN22@OpenPipe@3|
	DCD	0x40008101
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OpenPipe@CInterruptPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ| PROC ; CInterruptPipe::OpenPipe

; 1537 : {

  00000		 |$LN22@OpenPipe@3|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M38004|
  00004	e1a04000	 mov         r4, r0

; 1538 :     HCD_REQUEST_STATUS RetVal;
; 1539 :     INT32 EndpointNum;
; 1540 :     DEBUGMSG( ZONE_PIPE, (TEXT("+CInterruptPipe::OpenPipe\n\r") ) );
; 1541 : 
; 1542 :     //HCD_REQUEST_STATUS status = requestFailed;
; 1543 : 
; 1544 :     EnterCriticalSection( &m_csPipeLock );

  00008	e2840024	 add         r0, r4, #0x24
  0000c	eb000000	 bl          EnterCriticalSection

; 1545 :     //m_pCOhcd->LockProcessingThread();
; 1546 : 
; 1547 :     EndpointNum = m_pCOhcd->AllocateHostEndPoint(
; 1548 :         (UINT32)GetType(),
; 1549 :         m_usbEndpointDescriptor.wMaxPacketSize,
; 1550 :         USB_ENDPOINT_DIRECTION_IN(m_bEndpointAddress) ? TRUE : FALSE);

  00010	e5d43008	 ldrb        r3, [r4, #8]
  00014	e5942000	 ldr         r2, [r4]
  00018	e1a00004	 mov         r0, r4
  0001c	e3130080	 tst         r3, #0x80
  00020	e5922020	 ldr         r2, [r2, #0x20]
  00024	13a05001	 movne       r5, #1
  00028	03a05000	 moveq       r5, #0
  0002c	e1a0e00f	 mov         lr, pc
  00030	e12fff12	 bx          r2
  00034	e5d4e03c	 ldrb        lr, [r4, #0x3C]
  00038	e5d4203d	 ldrb        r2, [r4, #0x3D]
  0003c	e1a01000	 mov         r1, r0
  00040	e5940014	 ldr         r0, [r4, #0x14]
  00044	e18e2402	 orr         r2, lr, r2, lsl #8
  00048	e1a03005	 mov         r3, r5
  0004c	eb000000	 bl          |?AllocateHostEndPoint@CHW@@QAAHIKH@Z|
  00050	e1b05000	 movs        r5, r0

; 1551 : 
; 1552 :     if(EndpointNum >= 0)

  00054	4a000063	 bmi         |$LN7@OpenPipe@3|

; 1553 :     {
; 1554 :         m_pUSBED = AllocateED();

  00058	eb000000	 bl          |?AllocateED@@YAPAU_USBED@@XZ|
  0005c	e3500000	 cmp         r0, #0
  00060	e5840020	 str         r0, [r4, #0x20]

; 1555 : 
; 1556 :         if (m_pUSBED)

  00064	0a00005f	 beq         |$LN7@OpenPipe@3|

; 1557 :         {
; 1558 :             m_pUSBED->bHostEndPointNum = (UINT8)EndpointNum;

  00068	e5c05010	 strb        r5, [r0, #0x10]

; 1559 :             m_pUSBED->bfFunctionAddress = m_bBusAddress;

  0006c	e594300c	 ldr         r3, [r4, #0xC]
  00070	e5942020	 ldr         r2, [r4, #0x20]

; 1560 :             m_pUSBED->bfEndpointNumber = m_bEndpointAddress;
; 1561 :             m_pUSBED->bfDirection = USB_ENDPOINT_DIRECTION_IN(m_bEndpointAddress) ? TD_IN_PID : TD_OUT_PID;
; 1562 :             m_pUSBED->bfIsLowSpeed = m_fIsLowSpeed ? 1 : 0;
; 1563 :             m_pUSBED->bfIsHighSpeed = m_fIsHighSpeed ? 1 :0;
; 1564 :             m_pUSBED->bfHubAddress = m_bHubAddress;
; 1565 :             m_pUSBED->bfHubPort = m_bHubPort;
; 1566 :             m_pUSBED->bfIsIsochronous =  0;

  00074	e3a00000	 mov         r0, #0
  00078	e5d33000	 ldrb        r3, [r3]
  0007c	e5c23004	 strb        r3, [r2, #4]
  00080	e5942020	 ldr         r2, [r4, #0x20]
  00084	e5d43008	 ldrb        r3, [r4, #8]
  00088	e5c23005	 strb        r3, [r2, #5]
  0008c	e5d43008	 ldrb        r3, [r4, #8]
  00090	e3130080	 tst         r3, #0x80
  00094	e5943020	 ldr         r3, [r4, #0x20]
  00098	13a02002	 movne       r2, #2
  0009c	03a02001	 moveq       r2, #1
  000a0	e5c32006	 strb        r2, [r3, #6]
  000a4	e5943040	 ldr         r3, [r4, #0x40]
  000a8	e3530000	 cmp         r3, #0
  000ac	e5943020	 ldr         r3, [r4, #0x20]
  000b0	13a02001	 movne       r2, #1
  000b4	03a02000	 moveq       r2, #0
  000b8	e5c32008	 strb        r2, [r3, #8]
  000bc	e5943044	 ldr         r3, [r4, #0x44]
  000c0	e3530000	 cmp         r3, #0
  000c4	e5943020	 ldr         r3, [r4, #0x20]
  000c8	13a02001	 movne       r2, #1
  000cc	03a02000	 moveq       r2, #0
  000d0	e5c32009	 strb        r2, [r3, #9]
  000d4	e5942020	 ldr         r2, [r4, #0x20]
  000d8	e5d43010	 ldrb        r3, [r4, #0x10]
  000dc	e5c2300a	 strb        r3, [r2, #0xA]
  000e0	e5942020	 ldr         r2, [r4, #0x20]
  000e4	e5d43011	 ldrb        r3, [r4, #0x11]
  000e8	e5c2300b	 strb        r3, [r2, #0xB]
  000ec	e5943020	 ldr         r3, [r4, #0x20]
  000f0	e5c3000d	 strb        r0, [r3, #0xD]

; 1567 :             m_pUSBED->bfMaxPacketSize = m_usbEndpointDescriptor.wMaxPacketSize;

  000f4	e5d4103c	 ldrb        r1, [r4, #0x3C]
  000f8	e5d4303d	 ldrb        r3, [r4, #0x3D]
  000fc	e5942020	 ldr         r2, [r4, #0x20]
  00100	e1813403	 orr         r3, r1, r3, lsl #8
  00104	e1c230be	 strh        r3, [r2, #0xE]

; 1568 :              m_pUSBED->bfAttributes = m_usbEndpointDescriptor.bmAttributes;

  00108	e5942020	 ldr         r2, [r4, #0x20]
  0010c	e5d4303b	 ldrb        r3, [r4, #0x3B]
  00110	e5c23007	 strb        r3, [r2, #7]

; 1569 :             m_pUSBED->TransferStatus = STATUS_IDLE;

  00114	e5943020	 ldr         r3, [r4, #0x20]
  00118	e583001c	 str         r0, [r3, #0x1C]

; 1570 :             m_pUSBED->bfHalted = FALSE;

  0011c	e5943020	 ldr         r3, [r4, #0x20]
  00120	e5830024	 str         r0, [r3, #0x24]

; 1571 :             m_pUSBED->bfToggleCarry = 0;

  00124	e5943020	 ldr         r3, [r4, #0x20]
  00128	e1c302b8	 strh        r0, [r3, #0x28]

; 1572 :             // USB controller datasheet says interval value must be in range 1-16 for high
; 1573 :             // speed and 1-255 for low and full speed.
; 1574 :             m_pUSBED->bInterval = m_usbEndpointDescriptor.bInterval;

  0012c	e5942020	 ldr         r2, [r4, #0x20]
  00130	e5d4303e	 ldrb        r3, [r4, #0x3E]
  00134	e5c23011	 strb        r3, [r2, #0x11]

; 1575 :             if (m_pUSBED->bfIsHighSpeed && m_pUSBED->bInterval > 0x10)

  00138	e5942020	 ldr         r2, [r4, #0x20]
  0013c	e5d23009	 ldrb        r3, [r2, #9]
  00140	e3530000	 cmp         r3, #0
  00144	0a000002	 beq         |$LN5@OpenPipe@3|
  00148	e5d23011	 ldrb        r3, [r2, #0x11]
  0014c	e3530010	 cmp         r3, #0x10

; 1576 :                 m_pUSBED->bInterval = 0;

  00150	85c20011	 strhib      r0, [r2, #0x11]
  00154		 |$LN5@OpenPipe@3|

; 1577 : 
; 1578 :             m_pCOhcd->ProgramHostEndpoint((UINT32)GetType(), (void *)m_pUSBED);

  00154	e5943000	 ldr         r3, [r4]
  00158	e1a00004	 mov         r0, r4
  0015c	e5933020	 ldr         r3, [r3, #0x20]
  00160	e1a0e00f	 mov         lr, pc
  00164	e12fff13	 bx          r3
  00168	e5942020	 ldr         r2, [r4, #0x20]
  0016c	e1a01000	 mov         r1, r0
  00170	e5940014	 ldr         r0, [r4, #0x14]
  00174	eb000000	 bl          |?ProgramHostEndpoint@CHW@@QAAXIPAX@Z|

; 1579 : 
; 1580 : #ifdef MUSB_USEDMA
; 1581 : #ifdef MUSB_USEDMA_FOR_INTR
; 1582 : 
; 1583 :             // Allocate DMA channel for Interrupt transfers
; 1584 :             m_pUSBED->pDmaChannel = m_pCOhcd->m_dmaCrtl.AllocChannel(
; 1585 :                 m_pUSBED->bHostEndPointNum,
; 1586 :                 m_pUSBED->bfEndpointNumber,
; 1587 :                 /*USB_ENDPOINT_TYPE_INTERRUPT,
; 1588 :                 m_pUSBED->bfMaxPacketSize,*/
; 1589 :                 (PfnTransferComplete)m_pCOhcd->DmaTransferComplete);

  00178	e5941020	 ldr         r1, [r4, #0x20]
  0017c	e5940014	 ldr         r0, [r4, #0x14]
  00180	e59f3078	 ldr         r3, [pc, #0x78]
  00184	e5d12005	 ldrb        r2, [r1, #5]
  00188	e5d11010	 ldrb        r1, [r1, #0x10]
  0018c	e2800fca	 add         r0, r0, #0xCA, 30
  00190	eb000000	 bl          |?AllocChannel@CCppiDmaController@@QAAPAVCCppiDmaChannel@@EEP6AXPAV2@IIIIPAX1@Z@Z|
  00194	e5943020	 ldr         r3, [r4, #0x20]

; 1590 : 
; 1591 : #endif // MUSB_USEDMA_FOR_INTR
; 1592 : #endif // MUSB_USEDMA
; 1593 : 
; 1594 :             if (m_pUSBED->bfDirection == TD_IN_PID)
; 1595 :             {
; 1596 :                 m_pUSBED->NextED.next = (ListHead *)(m_pCOhcd->CHW::m_pIntInHead);
; 1597 :                 (m_pCOhcd->CHW::m_pIntInHead) = (PDWORD)m_pUSBED;
; 1598 :             }
; 1599 :             else
; 1600 :             {
; 1601 :                 m_pUSBED->NextED.next = (ListHead *)(m_pCOhcd->CHW::m_pIntOutHead);
; 1602 :                 (m_pCOhcd->CHW::m_pIntOutHead) = (PDWORD)m_pUSBED;
; 1603 :             }
; 1604 : 
; 1605 :             RetVal = requestOK;
; 1606 :             m_pCOhcd->IncrementPipeCount();

  00198	e3a05001	 mov         r5, #1
  0019c	e5830034	 str         r0, [r3, #0x34]
  001a0	e5942020	 ldr         r2, [r4, #0x20]
  001a4	e5d23006	 ldrb        r3, [r2, #6]
  001a8	e3530002	 cmp         r3, #2
  001ac	e5943014	 ldr         r3, [r4, #0x14]
  001b0	059330b0	 ldreq       r3, [r3, #0xB0]
  001b4	05823000	 streq       r3, [r2]
  001b8	05942014	 ldreq       r2, [r4, #0x14]
  001bc	05943020	 ldreq       r3, [r4, #0x20]
  001c0	058230b0	 streq       r3, [r2, #0xB0]
  001c4	159330b4	 ldrne       r3, [r3, #0xB4]
  001c8	15823000	 strne       r3, [r2]
  001cc	15942014	 ldrne       r2, [r4, #0x14]
  001d0	15943020	 ldrne       r3, [r4, #0x20]
  001d4	158230b4	 strne       r3, [r2, #0xB4]
  001d8	e5943014	 ldr         r3, [r4, #0x14]
  001dc	e2830e47	 add         r0, r3, #0x47, 28
  001e0	eb000000	 bl          InterlockedIncrement

; 1607 :         }
; 1608 :         else

  001e4	ea000000	 b           |$LN1@OpenPipe@3|
  001e8		 |$LN7@OpenPipe@3|

; 1609 :         {
; 1610 :             DEBUGMSG( ZONE_PIPE, (TEXT("CInterruptPipe::OpenPipe: no free EDs!\n\r")));
; 1611 :             RetVal = requestFailed;
; 1612 :         }
; 1613 :     }
; 1614 :     else
; 1615 :     {
; 1616 :         DEBUGMSG( ZONE_PIPE, (TEXT("CInterruptPipe::OpenPipe: no free endpoints!\n\r")));
; 1617 :         RetVal = requestFailed;

  001e8	e3a05000	 mov         r5, #0
  001ec		 |$LN1@OpenPipe@3|

; 1618 :     }
; 1619 : 
; 1620 :     //m_pCOhcd->UnlockProcessingThread();
; 1621 :     LeaveCriticalSection( &m_csPipeLock );

  001ec	e2840024	 add         r0, r4, #0x24
  001f0	eb000000	 bl          LeaveCriticalSection

; 1622 : 
; 1623 :     DEBUGMSG( ZONE_PIPE, (TEXT("-CInterruptPipe::OpenPipe, returning HCD_REQUEST_STATUS %d\n\r"), RetVal) );
; 1624 :     return RetVal;
; 1625 : }

  001f4	e1a00005	 mov         r0, r5
  001f8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  001fc	e12fff1e	 bx          lr
  00200		 |$LN23@OpenPipe@3|
  00200		 |$LN24@OpenPipe@3|
  00200	00000000	 DCD         |?DmaTransferComplete@CHW@@SAXPAVCCppiDmaChannel@@IIIIPAX1@Z|
  00204		 |$M38005|

			 ENDP  ; |?OpenPipe@CInterruptPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|, CInterruptPipe::OpenPipe


  00000			 AREA	 |.pdata|, PDATA
|$T38016| DCD	|$LN5@UpdateInte@2|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateInterruptQHTreeLoad@CInterruptPipe@@EAAXEH@Z| PROC ; CInterruptPipe::UpdateInterruptQHTreeLoad

; 1643 : {

  00000		 |$LN5@UpdateInte@2|
  00000		 |$M38013|

; 1644 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CInterruptPipe::UpdateInterruptQHTreeLoad - branch = %d, deltaLoad = %d\n\r"), branch, deltaLoad) );
; 1645 :     DEBUGCHK( branch >= 1 && branch < 2 * OHCD_MAX_INTERRUPT_INTERVAL );
; 1646 : 
; 1647 : #ifdef JEFFRO
; 1648 :     // first step - need to find the greatest power of 2 which is
; 1649 :     // <= branch
; 1650 :     UCHAR pow = OHCD_MAX_INTERRUPT_INTERVAL;
; 1651 :     while ( pow > branch ) {
; 1652 :         pow >>= 1;
; 1653 :     }
; 1654 : 
; 1655 :     EnterCriticalSection( &m_pCOhcd->CHCCArea::m_csQHScheduleLock );
; 1656 : 
; 1657 :     // In the reverse direction, any queue which will eventually
; 1658 :     // point to m_pCOhcd->CHCCArea::m_interruptQHTree[ branch ] needs to get
; 1659 :     // its dwInterruptTree.Load incremented. These are the queues
; 1660 :     // branch + n * pow, n = 1, 2, 3, ...
; 1661 :     for ( UCHAR link = branch + pow; link < 2 * OHCD_MAX_INTERRUPT_INTERVAL; link += pow ) {
; 1662 :         DEBUGCHK( m_pCOhcd->CHCCArea::m_interruptQHTree[ link ]->dwInterruptTree.Load <= m_pCOhcd->CHCCArea::m_interruptQHTree[ branch ]->dwInterruptTree.Load );
; 1663 :         m_pCOhcd->CHCCArea::m_interruptQHTree[ link ]->dwInterruptTree.Load += deltaLoad;
; 1664 :     }
; 1665 :     // In the forward direction, any queue that
; 1666 :     // m_pCOhcd->CHCCArea::m_interruptQHTree[ branch ] eventually points to
; 1667 :     // needs its dwInterruptTree.Load incremented. These queues
; 1668 :     // are found using the same algorithm as CPipe::Initialize();
; 1669 :     link = branch;
; 1670 :     while ( link >= 1 ) {
; 1671 :         DEBUGCHK( ( link & pow ) &&
; 1672 :                   ( (link ^ pow) | (pow / 2) ) < link );
; 1673 :         DEBUGCHK( link == branch ||
; 1674 :                   m_pCOhcd->CHCCArea::m_interruptQHTree[ link ]->dwInterruptTree.Load + deltaLoad >= m_pCOhcd->CHCCArea::m_interruptQHTree[ branch ]->dwInterruptTree.Load );
; 1675 :         m_pCOhcd->CHCCArea::m_interruptQHTree[ link ]->dwInterruptTree.Load += deltaLoad;
; 1676 :         link ^= pow;
; 1677 :         pow >>= 1;
; 1678 :         link |= pow;
; 1679 :     }
; 1680 : 
; 1681 :     LeaveCriticalSection( &m_pCOhcd->CHCCArea::m_csQHScheduleLock );
; 1682 : #else
; 1683 :     UNREFERENCED_PARAMETER(deltaLoad );
; 1684 :     UNREFERENCED_PARAMETER(branch);
; 1685 : #endif //JEFFRO
; 1686 : 
; 1687 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CInterruptPipe::UpdateInterruptQHTreeLoad - branch = %d, deltaLoad = %d\n\r"), branch, deltaLoad) );
; 1688 : }

  00000	e12fff1e	 bx          lr
  00004		 |$M38014|

			 ENDP  ; |?UpdateInterruptQHTreeLoad@CInterruptPipe@@EAAXEH@Z|, CInterruptPipe::UpdateInterruptQHTreeLoad


  00000			 AREA	 |.pdata|, PDATA
|$T38026| DCD	|$LN5@GetListHea@3|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetListHead@CInterruptPipe@@EAAPAKH@Z| PROC ; CInterruptPipe::GetListHead

; 1696 : {

  00000		 |$LN5@GetListHea@3|
  00000		 |$M38023|

; 1697 :     UNREFERENCED_PARAMETER(fEnable);
; 1698 :     //m_pCOhcd->CHW::ListControl(CHW::LIST_INTERRUPT, fEnable, FALSE);
; 1699 :     // return the address of the QH beginning the list for this pipe
; 1700 :     return &(m_pCOhcd->CHCCArea::m_interruptQHTree[m_iListHead]->paNextEd);

  00000	e590205c	 ldr         r2, [r0, #0x5C]
  00004	e5903014	 ldr         r3, [r0, #0x14]
  00008	e0833102	 add         r3, r3, r2, lsl #2
  0000c	e593348c	 ldr         r3, [r3, #0x48C]
  00010	e283000c	 add         r0, r3, #0xC

; 1701 : };

  00014	e12fff1e	 bx          lr
  00018		 |$M38024|

			 ENDP  ; |?GetListHead@CInterruptPipe@@EAAPAKH@Z|, CInterruptPipe::GetListHead


  00000			 AREA	 |.pdata|, PDATA
|$T38033| DCD	|$LN5@UpdateList@3|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateListControl@CInterruptPipe@@UAAXHH@Z| PROC ; CInterruptPipe::UpdateListControl

; 1703 : {

  00000		 |$LN5@UpdateList@3|
  00000		 |$M38030|

; 1704 :     UNREFERENCED_PARAMETER(bEnable);
; 1705 :     UNREFERENCED_PARAMETER(bFill);
; 1706 :     //m_pCOhcd->CHW::ListControl(CHW::LIST_INTERRUPT, bEnable, bFill);
; 1707 : }

  00000	e12fff1e	 bx          lr
  00004		 |$M38031|

			 ENDP  ; |?UpdateListControl@CInterruptPipe@@UAAXHH@Z|, CInterruptPipe::UpdateListControl


  00000			 AREA	 |.pdata|, PDATA
|$T38048| DCD	|$LN9@AreTransfe@3|
	DCD	0x40001b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AreTransferParametersValid@CInterruptPipe@@EBAHPBUSTRANSFER@@@Z| PROC ; CInterruptPipe::AreTransferParametersValid

; 1722 : {

  00000		 |$LN9@AreTransfe@3|
  00000		 |$M38045|
  00000	e3510000	 cmp         r1, #0

; 1723 :     if (pTransfer == NULL)
; 1724 :         return FALSE;

  00004	0a000016	 beq         |$LN4@AreTransfe@3|

; 1725 : 
; 1726 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("+CInterruptPipe::AreTransferParametersValid\n\r")) );
; 1727 : 
; 1728 :     // these parameters aren't used by CInterruptPipe, so if they are non NULL,
; 1729 :     // it doesn't present a serious problem. But, they shouldn't have been
; 1730 :     // passed in as non-NULL by the calling driver.
; 1731 :     DEBUGCHK( pTransfer->adwIsochErrors == NULL && // ISOCH
; 1732 :               pTransfer->adwIsochLengths == NULL && // ISOCH
; 1733 :               pTransfer->aLengths == NULL && // ISOCH
; 1734 :               pTransfer->lpvControlHeader == NULL ); // CONTROL
; 1735 :     // this is also not a serious problem, but shouldn't happen in normal
; 1736 :     // circumstances. It would indicate a logic error in the calling driver.
; 1737 :     DEBUGCHK( !(pTransfer->lpfnCallback == NULL && pTransfer->lpvCallbackParameter != NULL) );
; 1738 :     // DWORD                     pTransfer->dwStartingFrame (ignored - ISOCH)
; 1739 :     // DWORD                     pTransfer->dwFrames (ignored - ISOCH)
; 1740 : 
; 1741 :     BOOL fValid = ( m_pED != NULL &&
; 1742 :                     pTransfer->address > 0 &&
; 1743 :                     pTransfer->address <= USB_MAX_ADDRESS &&
; 1744 :                     (pTransfer->lpvClientBuffer != NULL || pTransfer->dwBufferSize == 0) &&
; 1745 :                     // paClientBuffer could be 0 or !0
; 1746 :                     pTransfer->lpfComplete != NULL &&
; 1747 :                     pTransfer->lpdwBytesTransferred != NULL &&
; 1748 :                     pTransfer->lpdwError != NULL );

  00008	e590301c	 ldr         r3, [r0, #0x1C]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000013	 beq         |$LN4@AreTransfe@3|
  00014	e5d13000	 ldrb        r3, [r1]
  00018	e3530000	 cmp         r3, #0
  0001c	0a000010	 beq         |$LN4@AreTransfe@3|
  00020	e353007f	 cmp         r3, #0x7F
  00024	8a00000e	 bhi         |$LN4@AreTransfe@3|
  00028	e5913028	 ldr         r3, [r1, #0x28]
  0002c	e3530000	 cmp         r3, #0
  00030	1a000002	 bne         |$LN5@AreTransfe@3|
  00034	e5913024	 ldr         r3, [r1, #0x24]
  00038	e3530000	 cmp         r3, #0
  0003c	1a000008	 bne         |$LN4@AreTransfe@3|
  00040		 |$LN5@AreTransfe@3|
  00040	e591303c	 ldr         r3, [r1, #0x3C]
  00044	e3530000	 cmp         r3, #0
  00048	0a000005	 beq         |$LN4@AreTransfe@3|
  0004c	e5913040	 ldr         r3, [r1, #0x40]
  00050	e3530000	 cmp         r3, #0
  00054	15913044	 ldrne       r3, [r1, #0x44]
  00058	13530000	 cmpne       r3, #0
  0005c	13a00001	 movne       r0, #1

; 1749 : 
; 1750 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("-CInterruptPipe::AreTransferParametersValid, returning BOOL %d\n\r"), fValid) );
; 1751 :     return fValid;
; 1752 : }

  00060	112fff1e	 bxne        lr
  00064		 |$LN4@AreTransfe@3|

; 1725 : 
; 1726 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("+CInterruptPipe::AreTransferParametersValid\n\r")) );
; 1727 : 
; 1728 :     // these parameters aren't used by CInterruptPipe, so if they are non NULL,
; 1729 :     // it doesn't present a serious problem. But, they shouldn't have been
; 1730 :     // passed in as non-NULL by the calling driver.
; 1731 :     DEBUGCHK( pTransfer->adwIsochErrors == NULL && // ISOCH
; 1732 :               pTransfer->adwIsochLengths == NULL && // ISOCH
; 1733 :               pTransfer->aLengths == NULL && // ISOCH
; 1734 :               pTransfer->lpvControlHeader == NULL ); // CONTROL
; 1735 :     // this is also not a serious problem, but shouldn't happen in normal
; 1736 :     // circumstances. It would indicate a logic error in the calling driver.
; 1737 :     DEBUGCHK( !(pTransfer->lpfnCallback == NULL && pTransfer->lpvCallbackParameter != NULL) );
; 1738 :     // DWORD                     pTransfer->dwStartingFrame (ignored - ISOCH)
; 1739 :     // DWORD                     pTransfer->dwFrames (ignored - ISOCH)
; 1740 : 
; 1741 :     BOOL fValid = ( m_pED != NULL &&
; 1742 :                     pTransfer->address > 0 &&
; 1743 :                     pTransfer->address <= USB_MAX_ADDRESS &&
; 1744 :                     (pTransfer->lpvClientBuffer != NULL || pTransfer->dwBufferSize == 0) &&
; 1745 :                     // paClientBuffer could be 0 or !0
; 1746 :                     pTransfer->lpfComplete != NULL &&
; 1747 :                     pTransfer->lpdwBytesTransferred != NULL &&
; 1748 :                     pTransfer->lpdwError != NULL );

  00064	e3a00000	 mov         r0, #0

; 1749 : 
; 1750 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("-CInterruptPipe::AreTransferParametersValid, returning BOOL %d\n\r"), fValid) );
; 1751 :     return fValid;
; 1752 : }

  00068	e12fff1e	 bx          lr
  0006c		 |$M38046|

			 ENDP  ; |?AreTransferParametersValid@CInterruptPipe@@EBAHPBUSTRANSFER@@@Z|, CInterruptPipe::AreTransferParametersValid


  00000			 AREA	 |.pdata|, PDATA
|$T38057| DCD	|$LN5@ScheduleTr@3|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ScheduleTransfer@CInterruptPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ| PROC ; CInterruptPipe::ScheduleTransfer

; 1766 : {

  00000		 |$LN5@ScheduleTr@3|
  00000		 |$M38054|

; 1767 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("+CInterruptPipe::ScheduleTransfer\n\r")) );
; 1768 : 
; 1769 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("-CInterruptPipe::ScheduleTransfer, returning HCD_REQUEST_STATUS %d\n\r"), 0) );
; 1770 :     return requestOK;

  00000	e3a00001	 mov         r0, #1

; 1771 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M38055|

			 ENDP  ; |?ScheduleTransfer@CInterruptPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ|, CInterruptPipe::ScheduleTransfer

	EXPORT	|??0CIsochronousPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z| ; CIsochronousPipe::CIsochronousPipe
	EXPORT	|??_7CIsochronousPipe@@6B@| [ DATA ]	; CIsochronousPipe::`vftable'
	EXPORT	|?OpenPipe@CIsochronousPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ| ; CIsochronousPipe::OpenPipe
	EXPORT	|?GetType@CIsochronousPipe@@UAA?AW4PIPE_TYPE@@XZ| ; CIsochronousPipe::GetType
	EXPORT	|?UpdateListControl@CIsochronousPipe@@UAAXHH@Z| ; CIsochronousPipe::UpdateListControl
	EXPORT	|?GetPipeType@CIsochronousPipe@@UBAPBGXZ| ; CIsochronousPipe::GetPipeType
	EXPORT	|?AreTransferParametersValid@CIsochronousPipe@@EBAHPBUSTRANSFER@@@Z| ; CIsochronousPipe::AreTransferParametersValid
	EXPORT	|?ScheduleTransfer@CIsochronousPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ| ; CIsochronousPipe::ScheduleTransfer
	EXPORT	|?GetListHead@CIsochronousPipe@@EAAPAKH@Z| ; CIsochronousPipe::GetListHead
	IMPORT	|??_ECIsochronousPipe@@UAAPAXI@Z|, WEAK |??_GCIsochronousPipe@@UAAPAXI@Z| ; CIsochronousPipe::`vector deleting destructor', CIsochronousPipe::`scalar deleting destructor'

  00000			 AREA	 |.pdata|, PDATA
|$T38070| DCD	|$LN5@CIsochrono|
	DCD	0x40001302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CIsochronousPipe@@6B@| DCD |??_ECIsochronousPipe@@UAAPAXI@Z| ; CIsochronousPipe::`vftable'
	DCD	|?OpenPipe@CIsochronousPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?ClosePipe@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?IssueTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@EQ6AKPAX@ZQAXKQBXKKQBKK2K3QAK5QAH55@Z|
	DCD	|?AbortTransfer@CQueuedPipe@@UAA?AW4HCD_REQUEST_STATUS@@Q6AKPAX@ZQAXPBX@Z|
	DCD	|?IsPipeHalted@CPipe@@UAA?AW4HCD_REQUEST_STATUS@@QAH@Z|
	DCD	|?ClearHaltedFlag@CPipe@@UAAXXZ|
	DCD	|?ChangeMaxPacketSize@CPipeAbs@@UAAXG@Z|
	DCD	|?GetType@CIsochronousPipe@@UAA?AW4PIPE_TYPE@@XZ|
	DCD	|?CheckForDoneTransfers@CQueuedPipe@@UAAHTTDLINK@@@Z|
	DCD	|?UpdateListControl@CIsochronousPipe@@UAAXHH@Z|
	DCD	|?GetPipeType@CIsochronousPipe@@UBAPBGXZ|
	DCD	|?GetTdSize@CQueuedPipe@@UBA?BHXZ|
	DCD	|?AreTransferParametersValid@CIsochronousPipe@@EBAHPBUSTRANSFER@@@Z|
	DCD	|?GetMemoryAllocationFlags@CPipe@@MBAKXZ|
	DCD	|?ScheduleTransfer@CIsochronousPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ|
	DCD	|?GetListHead@CIsochronousPipe@@EAAPAKH@Z|
	DCD	|?UpdateInterruptQHTreeLoad@CQueuedPipe@@MAAXEH@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CIsochronousPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z| PROC ; CIsochronousPipe::CIsochronousPipe

; 1790 : {

  00000		 |$LN5@CIsochrono|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M38067|
  00008	e1a07000	 mov         r7, r0
  0000c	e59de030	 ldr         lr, [sp, #0x30]
  00010	e5dd402c	 ldrb        r4, [sp, #0x2C]
  00014	e5dd5028	 ldrb        r5, [sp, #0x28]
  00018	e5dd6024	 ldrb        r6, [sp, #0x24]
  0001c	e58de00c	 str         lr, [sp, #0xC]
  00020	e58d4008	 str         r4, [sp, #8]
  00024	e58d5004	 str         r5, [sp, #4]
  00028	e58d6000	 str         r6, [sp]
  0002c	eb000000	 bl          |??0CQueuedPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|
  00030	e59f3010	 ldr         r3, [pc, #0x10]

; 1791 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CIsochronousPipe::CIsochronousPipe\n\r")) );
; 1792 :     DEBUGCHK( m_usbEndpointDescriptor.bDescriptorType == USB_ENDPOINT_DESCRIPTOR_TYPE &&
; 1793 :               m_usbEndpointDescriptor.bLength >= sizeof( USB_ENDPOINT_DESCRIPTOR ) &&
; 1794 :               (m_usbEndpointDescriptor.bmAttributes & USB_ENDPOINT_TYPE_MASK) == USB_ENDPOINT_TYPE_ISOCHRONOUS );
; 1795 : 
; 1796 :     DEBUGCHK( !fIsLowSpeed ); // iso pipe must be high speed
; 1797 : 
; 1798 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CIsochronousPipe::CIsochronousPipe\n\r")) );
; 1799 : }

  00034	e1a00007	 mov         r0, r7
  00038	e5873000	 str         r3, [r7]
  0003c	e28dd010	 add         sp, sp, #0x10
  00040	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN6@CIsochrono|
  00048		 |$LN7@CIsochrono|
  00048	00000000	 DCD         |??_7CIsochronousPipe@@6B@|
  0004c		 |$M38068|

			 ENDP  ; |??0CIsochronousPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|, CIsochronousPipe::CIsochronousPipe

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T38081| DCD	|$LN5@GetType@5|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetType@CIsochronousPipe@@UAA?AW4PIPE_TYPE@@XZ| PROC ; CIsochronousPipe::GetType

; 700  :     virtual PIPE_TYPE GetType () { return TYPE_ISOCHRONOUS; };

  00000		 |$LN5@GetType@5|
  00000		 |$M38078|
  00000	e3a00004	 mov         r0, #4
  00004	e12fff1e	 bx          lr
  00008		 |$M38079|

			 ENDP  ; |?GetType@CIsochronousPipe@@UAA?AW4PIPE_TYPE@@XZ|, CIsochronousPipe::GetType

	EXPORT	|?cszPipeType@?1??GetPipeType@CIsochronousPipe@@UBAPBGXZ@4PBGB| [ DATA ] ; `CIsochronousPipe::GetPipeType'::`2'::cszPipeType
	EXPORT	|??_C@_1BI@FKFHNGHF@?$AAI?$AAs?$AAo?$AAc?$AAh?$AAr?$AAo?$AAn?$AAo?$AAu?$AAs?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T38090| DCD	|$LN5@GetPipeTyp@4|
	DCD	0x40000400

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@FKFHNGHF@?$AAI?$AAs?$AAo?$AAc?$AAh?$AAr?$AAo?$AAn?$AAo?$AAu?$AAs?$AA?$AA@| DCB "I"
	DCB	0x0, "s", 0x0, "o", 0x0, "c", 0x0, "h", 0x0, "r", 0x0, "o"
	DCB	0x0, "n", 0x0, "o", 0x0, "u", 0x0, "s", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|?cszPipeType@?1??GetPipeType@CIsochronousPipe@@UBAPBGXZ@4PBGB| DCD |??_C@_1BI@FKFHNGHF@?$AAI?$AAs?$AAo?$AAc?$AAh?$AAr?$AAo?$AAn?$AAo?$AAu?$AAs?$AA?$AA@| ; `CIsochronousPipe::GetPipeType'::`2'::cszPipeType
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPipeType@CIsochronousPipe@@UBAPBGXZ| PROC ; CIsochronousPipe::GetPipeType

; 714  :     {

  00000		 |$LN5@GetPipeTyp@4|
  00000		 |$M38087|

; 715  :         static const TCHAR* cszPipeType = TEXT("Isochronous");
; 716  :         return cszPipeType;

  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5930000	 ldr         r0, [r3]

; 717  :     }

  00008	e12fff1e	 bx          lr
  0000c		 |$LN6@GetPipeTyp@4|
  0000c		 |$LN7@GetPipeTyp@4|
  0000c	00000000	 DCD         |?cszPipeType@?1??GetPipeType@CIsochronousPipe@@UBAPBGXZ@4PBGB|
  00010		 |$M38088|

			 ENDP  ; |?GetPipeType@CIsochronousPipe@@UBAPBGXZ|, CIsochronousPipe::GetPipeType

	EXPORT	|??1CIsochronousPipe@@UAA@XZ|		; CIsochronousPipe::~CIsochronousPipe
; File c:\wince600\public\common\oak\drivers\usb\hcd\usb20\usb2com\pipeabs.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T38115| DCD	|$LN11@CIsochrono@2|
	DCD	0x40000b01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CIsochronousPipe@@UAA@XZ| PROC	; CIsochronousPipe::~CIsochronousPipe

; 1813 : {

  00000		 |$LN11@CIsochrono@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M38112|
  00004	e1a04000	 mov         r4, r0

; 1814 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("+CIsochronousPipe::~CIsochronousPipe\n\r")) );
; 1815 :     DEBUGMSG( ZONE_PIPE && ZONE_VERBOSE, (TEXT("-CIsochronousPipe::~CIsochronousPipe\n\r")) );
; 1816 : }

  00008	e59f3018	 ldr         r3, [pc, #0x18]
  0000c	e4803024	 str         r3, [r0], #0x24
  00010	eb000000	 bl          DeleteCriticalSection
  00014	e59f3008	 ldr         r3, [pc, #8]
  00018	e5843000	 str         r3, [r4]
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN12@CIsochrono@2|
  00024		 |$LN13@CIsochrono@2|
  00024	00000000	 DCD         |??_7CPipeAbs@@6B@|
  00028		 |$LN14@CIsochrono@2|
  00028	00000000	 DCD         |??_7CPipe@@6B@|
  0002c		 |$M38113|

			 ENDP  ; |??1CIsochronousPipe@@UAA@XZ|, CIsochronousPipe::~CIsochronousPipe

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T38142| DCD	|$LN21@OpenPipe@4|
	DCD	0x40007a01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\cpipe.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OpenPipe@CIsochronousPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ| PROC ; CIsochronousPipe::OpenPipe

; 1832 : {

  00000		 |$LN21@OpenPipe@4|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M38139|
  00004	e1a04000	 mov         r4, r0

; 1833 :     HCD_REQUEST_STATUS RetVal;
; 1834 :     INT32 EndpointNum;
; 1835 :     DEBUGMSG( ZONE_PIPE, (TEXT("+CIsochronousPipe::OpenPipe\n\r") ) );
; 1836 : 
; 1837 :     EnterCriticalSection( &m_csPipeLock );

  00008	e2840024	 add         r0, r4, #0x24
  0000c	eb000000	 bl          EnterCriticalSection

; 1838 :     //m_pCOhcd->LockProcessingThread();
; 1839 : 
; 1840 :     // if this fails, we have a low speed Bulk device
; 1841 :     // which is not allowed by the USB spec
; 1842 :     DEBUGCHK( !m_fIsLowSpeed );
; 1843 : 
; 1844 :     EndpointNum = m_pCOhcd->AllocateHostEndPoint(
; 1845 :         (UINT32)GetType(),
; 1846 :         m_usbEndpointDescriptor.wMaxPacketSize,
; 1847 :         USB_ENDPOINT_DIRECTION_IN(m_bEndpointAddress) ? TRUE : FALSE);

  00010	e5d43008	 ldrb        r3, [r4, #8]
  00014	e5942000	 ldr         r2, [r4]
  00018	e1a00004	 mov         r0, r4
  0001c	e3130080	 tst         r3, #0x80
  00020	e5922020	 ldr         r2, [r2, #0x20]
  00024	13a05001	 movne       r5, #1
  00028	03a05000	 moveq       r5, #0
  0002c	e1a0e00f	 mov         lr, pc
  00030	e12fff12	 bx          r2
  00034	e5d4e03c	 ldrb        lr, [r4, #0x3C]
  00038	e5d4203d	 ldrb        r2, [r4, #0x3D]
  0003c	e1a01000	 mov         r1, r0
  00040	e5940014	 ldr         r0, [r4, #0x14]
  00044	e18e2402	 orr         r2, lr, r2, lsl #8
  00048	e1a03005	 mov         r3, r5
  0004c	eb000000	 bl          |?AllocateHostEndPoint@CHW@@QAAHIKH@Z|
  00050	e1b05000	 movs        r5, r0

; 1848 : 
; 1849 :     if(EndpointNum >= 0){

  00054	4a00005c	 bmi         |$LN6@OpenPipe@4|

; 1850 :         m_pUSBED = AllocateED();

  00058	eb000000	 bl          |?AllocateED@@YAPAU_USBED@@XZ|
  0005c	e3500000	 cmp         r0, #0
  00060	e5840020	 str         r0, [r4, #0x20]

; 1851 : 
; 1852 :         if (m_pUSBED)

  00064	0a000058	 beq         |$LN6@OpenPipe@4|

; 1853 :         {
; 1854 :             m_pUSBED->bHostEndPointNum = (UINT8)EndpointNum;

  00068	e5c05010	 strb        r5, [r0, #0x10]

; 1855 :             m_pUSBED->bfFunctionAddress = m_bBusAddress;

  0006c	e594300c	 ldr         r3, [r4, #0xC]
  00070	e5942020	 ldr         r2, [r4, #0x20]

; 1856 :             m_pUSBED->bfEndpointNumber = m_bEndpointAddress;
; 1857 :             m_pUSBED->bfDirection = USB_ENDPOINT_DIRECTION_IN(m_bEndpointAddress) ? TD_IN_PID : TD_OUT_PID;;
; 1858 :             m_pUSBED->bfIsLowSpeed = 0;

  00074	e3a00000	 mov         r0, #0
  00078	e5d33000	 ldrb        r3, [r3]

; 1859 :             m_pUSBED->bfIsHighSpeed = m_fIsHighSpeed ? 1 :0;
; 1860 :             m_pUSBED->bfHubAddress = m_bHubAddress;
; 1861 :             m_pUSBED->bfHubPort = m_bHubPort;
; 1862 :             m_pUSBED->bfIsIsochronous = 1;

  0007c	e3a01001	 mov         r1, #1
  00080	e5c23004	 strb        r3, [r2, #4]
  00084	e5942020	 ldr         r2, [r4, #0x20]
  00088	e5d43008	 ldrb        r3, [r4, #8]
  0008c	e5c23005	 strb        r3, [r2, #5]
  00090	e5d43008	 ldrb        r3, [r4, #8]
  00094	e3130080	 tst         r3, #0x80
  00098	e5943020	 ldr         r3, [r4, #0x20]
  0009c	13a02002	 movne       r2, #2
  000a0	03a02001	 moveq       r2, #1
  000a4	e5c32006	 strb        r2, [r3, #6]
  000a8	e5943020	 ldr         r3, [r4, #0x20]
  000ac	e5c30008	 strb        r0, [r3, #8]
  000b0	e5943044	 ldr         r3, [r4, #0x44]
  000b4	e3530000	 cmp         r3, #0
  000b8	e5943020	 ldr         r3, [r4, #0x20]
  000bc	13a02001	 movne       r2, #1
  000c0	03a02000	 moveq       r2, #0
  000c4	e5c32009	 strb        r2, [r3, #9]
  000c8	e5942020	 ldr         r2, [r4, #0x20]
  000cc	e5d43010	 ldrb        r3, [r4, #0x10]
  000d0	e5c2300a	 strb        r3, [r2, #0xA]
  000d4	e5942020	 ldr         r2, [r4, #0x20]
  000d8	e5d43011	 ldrb        r3, [r4, #0x11]
  000dc	e5c2300b	 strb        r3, [r2, #0xB]
  000e0	e5943020	 ldr         r3, [r4, #0x20]
  000e4	e5c3100d	 strb        r1, [r3, #0xD]

; 1863 :             m_pUSBED->bfMaxPacketSize = m_usbEndpointDescriptor.wMaxPacketSize;

  000e8	e5d4103c	 ldrb        r1, [r4, #0x3C]
  000ec	e5d4303d	 ldrb        r3, [r4, #0x3D]
  000f0	e5942020	 ldr         r2, [r4, #0x20]
  000f4	e1813403	 orr         r3, r1, r3, lsl #8
  000f8	e1c230be	 strh        r3, [r2, #0xE]

; 1864 :             m_pUSBED->bfAttributes = m_usbEndpointDescriptor.bmAttributes;

  000fc	e5942020	 ldr         r2, [r4, #0x20]
  00100	e5d4303b	 ldrb        r3, [r4, #0x3B]
  00104	e5c23007	 strb        r3, [r2, #7]

; 1865 :             m_pUSBED->TransferStatus = STATUS_IDLE;

  00108	e5943020	 ldr         r3, [r4, #0x20]
  0010c	e583001c	 str         r0, [r3, #0x1C]

; 1866 :             m_pUSBED->bfHalted = FALSE;

  00110	e5943020	 ldr         r3, [r4, #0x20]
  00114	e5830024	 str         r0, [r3, #0x24]

; 1867 :             m_pUSBED->bfToggleCarry = FALSE;

  00118	e5943020	 ldr         r3, [r4, #0x20]
  0011c	e1c302b8	 strh        r0, [r3, #0x28]

; 1868 :             // USB spec says interval value must be in range 1-16.
; 1869 :             // Values > 16 result in USB controller hangup.
; 1870 :             m_pUSBED->bInterval = m_usbEndpointDescriptor.bInterval > 0x10 ? 0x00 : m_usbEndpointDescriptor.bInterval;

  00120	e5d4303e	 ldrb        r3, [r4, #0x3E]

; 1871 : 
; 1872 :             m_pCOhcd->ProgramHostEndpoint((UINT32)GetType(), (void *)m_pUSBED);

  00124	e1a00004	 mov         r0, r4
  00128	e3530010	 cmp         r3, #0x10
  0012c	83a02000	 movhi       r2, #0
  00130	91a02003	 movls       r2, r3
  00134	e5943020	 ldr         r3, [r4, #0x20]
  00138	e5c32011	 strb        r2, [r3, #0x11]
  0013c	e5943000	 ldr         r3, [r4]
  00140	e5933020	 ldr         r3, [r3, #0x20]
  00144	e1a0e00f	 mov         lr, pc
  00148	e12fff13	 bx          r3
  0014c	e5942020	 ldr         r2, [r4, #0x20]
  00150	e1a01000	 mov         r1, r0
  00154	e5940014	 ldr         r0, [r4, #0x14]
  00158	eb000000	 bl          |?ProgramHostEndpoint@CHW@@QAAXIPAX@Z|

; 1873 : 
; 1874 : #ifdef MUSB_USEDMA
; 1875 : #ifdef MUSB_USEDMA_FOR_ISO
; 1876 : 
; 1877 :             // Allocate DMA channel
; 1878 :             m_pUSBED->pDmaChannel = m_pCOhcd->m_dmaCrtl.AllocChannel(
; 1879 :                 m_pUSBED->bHostEndPointNum,
; 1880 :                 m_pUSBED->bfEndpointNumber,
; 1881 :                 (PfnTransferComplete)m_pCOhcd->DmaTransferComplete);

  0015c	e5941020	 ldr         r1, [r4, #0x20]
  00160	e5940014	 ldr         r0, [r4, #0x14]
  00164	e59f3078	 ldr         r3, [pc, #0x78]
  00168	e5d12005	 ldrb        r2, [r1, #5]
  0016c	e5d11010	 ldrb        r1, [r1, #0x10]
  00170	e2800fca	 add         r0, r0, #0xCA, 30
  00174	eb000000	 bl          |?AllocChannel@CCppiDmaController@@QAAPAVCCppiDmaChannel@@EEP6AXPAV2@IIIIPAX1@Z@Z|
  00178	e5943020	 ldr         r3, [r4, #0x20]
  0017c	e5830034	 str         r0, [r3, #0x34]

; 1882 : 
; 1883 : #endif // MUSB_USEDMA_FOR_ISO
; 1884 : #endif // MUSB_USEDMA
; 1885 : 
; 1886 :             if(m_pUSBED->bfDirection == TD_IN_PID)

  00180	e5942020	 ldr         r2, [r4, #0x20]
  00184	e5d23006	 ldrb        r3, [r2, #6]
  00188	e3530002	 cmp         r3, #2

; 1887 :             {
; 1888 :                 m_pUSBED->NextED.next = (ListHead*)(m_pCOhcd->CHW::m_pIsoInHead);

  0018c	e5943014	 ldr         r3, [r4, #0x14]
  00190	059330b8	 ldreq       r3, [r3, #0xB8]
  00194	05823000	 streq       r3, [r2]

; 1889 :                 (m_pCOhcd->CHW::m_pIsoInHead) = (PDWORD)m_pUSBED;

  00198	05942014	 ldreq       r2, [r4, #0x14]
  0019c	05943020	 ldreq       r3, [r4, #0x20]
  001a0	058230b8	 streq       r3, [r2, #0xB8]

; 1890 :             }
; 1891 :             else
; 1892 :             {
; 1893 :                 m_pUSBED->NextED.next = (ListHead*)(m_pCOhcd->CHW::m_pIsoOutHead);

  001a4	159330bc	 ldrne       r3, [r3, #0xBC]
  001a8	15823000	 strne       r3, [r2]

; 1894 :                 (m_pCOhcd->CHW::m_pIsoOutHead) = (PDWORD)m_pUSBED;

  001ac	15942014	 ldrne       r2, [r4, #0x14]
  001b0	15943020	 ldrne       r3, [r4, #0x20]

; 1895 :             }
; 1896 : 
; 1897 :             RetVal = requestOK;
; 1898 :             m_pCOhcd->IncrementPipeCount();

  001b4	e3a05001	 mov         r5, #1
  001b8	158230bc	 strne       r3, [r2, #0xBC]
  001bc	e5943014	 ldr         r3, [r4, #0x14]
  001c0	e2830e47	 add         r0, r3, #0x47, 28
  001c4	eb000000	 bl          InterlockedIncrement

; 1899 :         }
; 1900 :         else

  001c8	ea000000	 b           |$LN1@OpenPipe@4|
  001cc		 |$LN6@OpenPipe@4|

; 1901 :         {
; 1902 :             DEBUGMSG( ZONE_PIPE, (TEXT("CIsochronousPipe::OpenPipe: no free EDs!\n\r")));
; 1903 :             RetVal = requestFailed;
; 1904 :         }
; 1905 :     }
; 1906 :     else
; 1907 :     {
; 1908 :         DEBUGMSG( ZONE_PIPE, (TEXT("CIsochronousPipe::OpenPipe: no free endpoints!\n\r")));
; 1909 :         RetVal = requestFailed;

  001cc	e3a05000	 mov         r5, #0
  001d0		 |$LN1@OpenPipe@4|

; 1910 :     }
; 1911 : 
; 1912 :     //m_pCOhcd->UnlockProcessingThread();
; 1913 :     LeaveCriticalSection( &m_csPipeLock );

  001d0	e2840024	 add         r0, r4, #0x24
  001d4	eb000000	 bl          LeaveCriticalSection

; 1914 : 
; 1915 :     DEBUGMSG( ZONE_PIPE, (TEXT("-CIsochronousPipe::OpenPipe, returning HCD_REQUEST_STATUS %d\n\r"), RetVal) );
; 1916 :     return RetVal;
; 1917 : }

  001d8	e1a00005	 mov         r0, r5
  001dc	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  001e0	e12fff1e	 bx          lr
  001e4		 |$LN22@OpenPipe@4|
  001e4		 |$LN23@OpenPipe@4|
  001e4	00000000	 DCD         |?DmaTransferComplete@CHW@@SAXPAVCCppiDmaChannel@@IIIIPAX1@Z|
  001e8		 |$M38140|

			 ENDP  ; |?OpenPipe@CIsochronousPipe@@UAA?AW4HCD_REQUEST_STATUS@@XZ|, CIsochronousPipe::OpenPipe


  00000			 AREA	 |.pdata|, PDATA
|$T38153| DCD	|$LN5@GetListHea@4|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetListHead@CIsochronousPipe@@EAAPAKH@Z| PROC ; CIsochronousPipe::GetListHead

; 1920 : {

  00000		 |$LN5@GetListHea@4|
  00000		 |$M38150|

; 1921 :     UNREFERENCED_PARAMETER(fEnable);
; 1922 :     //m_pCOhcd->CHW::ListControl(CHW::LIST_ISOCH, fEnable, FALSE);
; 1923 : 
; 1924 :     // return m_pCOhcd->CHW::m_pIsoHead;
; 1925 :     return NULL;

  00000	e3a00000	 mov         r0, #0

; 1926 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M38151|

			 ENDP  ; |?GetListHead@CIsochronousPipe@@EAAPAKH@Z|, CIsochronousPipe::GetListHead


  00000			 AREA	 |.pdata|, PDATA
|$T38160| DCD	|$LN5@UpdateList@4|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateListControl@CIsochronousPipe@@UAAXHH@Z| PROC ; CIsochronousPipe::UpdateListControl

; 1929 : {

  00000		 |$LN5@UpdateList@4|
  00000		 |$M38157|

; 1930 :     UNREFERENCED_PARAMETER(bEnable);
; 1931 :     UNREFERENCED_PARAMETER(bFill);
; 1932 :     //m_pCOhcd->CHW::ListControl(CHW::LIST_ISOCH, bEnable, bFill);
; 1933 : }

  00000	e12fff1e	 bx          lr
  00004		 |$M38158|

			 ENDP  ; |?UpdateListControl@CIsochronousPipe@@UAAXHH@Z|, CIsochronousPipe::UpdateListControl


  00000			 AREA	 |.pdata|, PDATA
|$T38173| DCD	|$LN8@AreTransfe@4|
	DCD	0x40002800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AreTransferParametersValid@CIsochronousPipe@@EBAHPBUSTRANSFER@@@Z| PROC ; CIsochronousPipe::AreTransferParametersValid

; 1949 : {

  00000		 |$LN8@AreTransfe@4|
  00000		 |$M38170|
  00000	e3510000	 cmp         r1, #0

; 1950 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("+CIsochronousPipe::AreTransferParametersValid\n\r")) );
; 1951 : 
; 1952 :     if (pTransfer == NULL)
; 1953 :         return FALSE;

  00004	0a000023	 beq         |$LN4@AreTransfe@4|

; 1954 : 
; 1955 :     // these parameters aren't used by CIsochronousPipe, so if they are non NULL,
; 1956 :     // it doesn't present a serious problem. But, they shouldn't have been
; 1957 :     // passed in as non-NULL by the calling driver.
; 1958 :     DEBUGCHK( pTransfer->lpvControlHeader == NULL ); // CONTROL
; 1959 :     // this is also not a serious problem, but shouldn't happen in normal
; 1960 :     // circumstances. It would indicate a logic error in the calling driver.
; 1961 :     DEBUGCHK( !(pTransfer->lpfnCallback == NULL && pTransfer->lpvCallbackParameter != NULL) );
; 1962 : 
; 1963 :     BOOL fValid = (
; 1964 :                     pTransfer->address > 0 &&
; 1965 :                     pTransfer->address <= USB_MAX_ADDRESS &&
; 1966 :                     pTransfer->lpvClientBuffer != NULL &&
; 1967 :                     // paClientBuffer could be 0 or !0
; 1968 :                     pTransfer->dwBufferSize > 0 &&
; 1969 :                     pTransfer->adwIsochErrors != NULL &&
; 1970 :                     pTransfer->adwIsochLengths != NULL &&
; 1971 :                     pTransfer->aLengths != NULL &&
; 1972 :                     pTransfer->dwFrames > 0 &&
; 1973 :                     pTransfer->dwFrames < gcTdIsochMaxFrames &&
; 1974 :                     pTransfer->lpfComplete != NULL &&
; 1975 :                     pTransfer->lpdwBytesTransferred != NULL &&
; 1976 :                     pTransfer->lpdwError != NULL );

  00008	e5d13000	 ldrb        r3, [r1]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000020	 beq         |$LN4@AreTransfe@4|
  00014	e353007f	 cmp         r3, #0x7F
  00018	8a00001e	 bhi         |$LN4@AreTransfe@4|
  0001c	e5913028	 ldr         r3, [r1, #0x28]
  00020	e3530000	 cmp         r3, #0
  00024	0a00001b	 beq         |$LN4@AreTransfe@4|
  00028	e5913024	 ldr         r3, [r1, #0x24]
  0002c	e3530000	 cmp         r3, #0
  00030	9a000018	 bls         |$LN4@AreTransfe@4|
  00034	e5913034	 ldr         r3, [r1, #0x34]
  00038	e3530000	 cmp         r3, #0
  0003c	0a000015	 beq         |$LN4@AreTransfe@4|
  00040	e5913038	 ldr         r3, [r1, #0x38]
  00044	e3530000	 cmp         r3, #0
  00048	0a000012	 beq         |$LN4@AreTransfe@4|
  0004c	e5913020	 ldr         r3, [r1, #0x20]
  00050	e3530000	 cmp         r3, #0
  00054	0a00000f	 beq         |$LN4@AreTransfe@4|
  00058	e591301c	 ldr         r3, [r1, #0x1C]
  0005c	e1b02003	 movs        r2, r3
  00060	0a00000c	 beq         |$LN4@AreTransfe@4|
  00064	e3a03cea	 mov         r3, #0xEA, 24
  00068	e3833060	 orr         r3, r3, #0x60
  0006c	e1520003	 cmp         r2, r3
  00070	2a000008	 bcs         |$LN4@AreTransfe@4|
  00074	e591303c	 ldr         r3, [r1, #0x3C]
  00078	e3530000	 cmp         r3, #0
  0007c	0a000005	 beq         |$LN4@AreTransfe@4|
  00080	e5913040	 ldr         r3, [r1, #0x40]
  00084	e3530000	 cmp         r3, #0
  00088	15913044	 ldrne       r3, [r1, #0x44]
  0008c	13530000	 cmpne       r3, #0
  00090	13a00001	 movne       r0, #1

; 1977 : 
; 1978 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("-CIsochronousPipe::AreTransferParametersValid, returning BOOL %d\n\r"), fValid) );
; 1979 :     return fValid;
; 1980 : }

  00094	112fff1e	 bxne        lr
  00098		 |$LN4@AreTransfe@4|

; 1954 : 
; 1955 :     // these parameters aren't used by CIsochronousPipe, so if they are non NULL,
; 1956 :     // it doesn't present a serious problem. But, they shouldn't have been
; 1957 :     // passed in as non-NULL by the calling driver.
; 1958 :     DEBUGCHK( pTransfer->lpvControlHeader == NULL ); // CONTROL
; 1959 :     // this is also not a serious problem, but shouldn't happen in normal
; 1960 :     // circumstances. It would indicate a logic error in the calling driver.
; 1961 :     DEBUGCHK( !(pTransfer->lpfnCallback == NULL && pTransfer->lpvCallbackParameter != NULL) );
; 1962 : 
; 1963 :     BOOL fValid = (
; 1964 :                     pTransfer->address > 0 &&
; 1965 :                     pTransfer->address <= USB_MAX_ADDRESS &&
; 1966 :                     pTransfer->lpvClientBuffer != NULL &&
; 1967 :                     // paClientBuffer could be 0 or !0
; 1968 :                     pTransfer->dwBufferSize > 0 &&
; 1969 :                     pTransfer->adwIsochErrors != NULL &&
; 1970 :                     pTransfer->adwIsochLengths != NULL &&
; 1971 :                     pTransfer->aLengths != NULL &&
; 1972 :                     pTransfer->dwFrames > 0 &&
; 1973 :                     pTransfer->dwFrames < gcTdIsochMaxFrames &&
; 1974 :                     pTransfer->lpfComplete != NULL &&
; 1975 :                     pTransfer->lpdwBytesTransferred != NULL &&
; 1976 :                     pTransfer->lpdwError != NULL );

  00098	e3a00000	 mov         r0, #0

; 1977 : 
; 1978 :     DEBUGMSG( ZONE_TRANSFER && ZONE_VERBOSE, (TEXT("-CIsochronousPipe::AreTransferParametersValid, returning BOOL %d\n\r"), fValid) );
; 1979 :     return fValid;
; 1980 : }

  0009c	e12fff1e	 bx          lr
  000a0		 |$M38171|

			 ENDP  ; |?AreTransferParametersValid@CIsochronousPipe@@EBAHPBUSTRANSFER@@@Z|, CIsochronousPipe::AreTransferParametersValid


  00000			 AREA	 |.pdata|, PDATA
|$T38182| DCD	|$LN5@ScheduleTr@4|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ScheduleTransfer@CIsochronousPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ| PROC ; CIsochronousPipe::ScheduleTransfer

; 1994 : {

  00000		 |$LN5@ScheduleTr@4|
  00000		 |$M38179|

; 1995 :     HCD_REQUEST_STATUS status = requestOK;
; 1996 : 
; 1997 :     DEBUGMSG( ZONE_TRANSFER, (TEXT("+CIsochronousPipe::ScheduleTransfer\n\r")) );
; 1998 : 
; 1999 :     DEBUGMSG( ZONE_TRANSFER, (TEXT("-CIsochronousPipe::ScheduleTransfer, returning HCD_REQUEST_STATUS %d\n\r"), status) );
; 2000 :     return status;

  00000	e3a00001	 mov         r0, #1

; 2001 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M38180|

			 ENDP  ; |?ScheduleTransfer@CIsochronousPipe@@EAA?AW4HCD_REQUEST_STATUS@@XZ|, CIsochronousPipe::ScheduleTransfer

	EXPORT	|?CreateBulkPipe@@YAPAVCPipeAbs@@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCHcd@@@Z| ; CreateBulkPipe
	IMPORT	|??2@YAPAXI@Z|				; operator new

  00000			 AREA	 |.pdata|, PDATA
|$T38199| DCD	|$LN7@CreateBulk|
	DCD	0x40001a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CreateBulkPipe@@YAPAVCPipeAbs@@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCHcd@@@Z| PROC ; CreateBulkPipe

; 2011 : {

  00000		 |$LN7@CreateBulk|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M38196|
  00008	e1a06003	 mov         r6, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1a08001	 mov         r8, r1
  00014	e1a09000	 mov         r9, r0

; 2012 :     return new CBulkPipe(lpEndpointDescriptor,fIsLowSpeed,fIsHighSpeed,bDeviceAddress,bHubAddress,bHubPort,(COhcd * const)pChcd);

  00018	e3a0005c	 mov         r0, #0x5C
  0001c	eb000000	 bl          |??2@YAPAXI@Z|
  00020	e3500000	 cmp         r0, #0
  00024	0a00000b	 beq         |$LN3@CreateBulk|
  00028	e59de034	 ldr         lr, [sp, #0x34]
  0002c	e5dd4030	 ldrb        r4, [sp, #0x30]
  00030	e5dd502c	 ldrb        r5, [sp, #0x2C]
  00034	e1a03007	 mov         r3, r7
  00038	e1a02008	 mov         r2, r8
  0003c	e1a01009	 mov         r1, r9
  00040	e58de00c	 str         lr, [sp, #0xC]
  00044	e58d4008	 str         r4, [sp, #8]
  00048	e58d5004	 str         r5, [sp, #4]
  0004c	e58d6000	 str         r6, [sp]
  00050	eb000000	 bl          |??0CBulkPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|
  00054	ea000000	 b           |$LN4@CreateBulk|
  00058		 |$LN3@CreateBulk|
  00058	e3a00000	 mov         r0, #0
  0005c		 |$LN4@CreateBulk|

; 2013 : }

  0005c	e28dd010	 add         sp, sp, #0x10
  00060	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M38197|

			 ENDP  ; |?CreateBulkPipe@@YAPAVCPipeAbs@@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCHcd@@@Z|, CreateBulkPipe

	EXPORT	|?CreateControlPipe@@YAPAVCPipeAbs@@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCHcd@@@Z| ; CreateControlPipe

  00000			 AREA	 |.pdata|, PDATA
|$T38216| DCD	|$LN7@CreateCont|
	DCD	0x40001a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CreateControlPipe@@YAPAVCPipeAbs@@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCHcd@@@Z| PROC ; CreateControlPipe

; 2019 : {

  00000		 |$LN7@CreateCont|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M38213|
  00008	e1a06003	 mov         r6, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1a08001	 mov         r8, r1
  00014	e1a09000	 mov         r9, r0

; 2020 :     return new CControlPipe(lpEndpointDescriptor,fIsLowSpeed,fIsHighSpeed,bDeviceAddress,bHubAddress,bHubPort,(COhcd * const)pChcd);

  00018	e3a0005c	 mov         r0, #0x5C
  0001c	eb000000	 bl          |??2@YAPAXI@Z|
  00020	e3500000	 cmp         r0, #0
  00024	0a00000b	 beq         |$LN3@CreateCont|
  00028	e59de034	 ldr         lr, [sp, #0x34]
  0002c	e5dd4030	 ldrb        r4, [sp, #0x30]
  00030	e5dd502c	 ldrb        r5, [sp, #0x2C]
  00034	e1a03007	 mov         r3, r7
  00038	e1a02008	 mov         r2, r8
  0003c	e1a01009	 mov         r1, r9
  00040	e58de00c	 str         lr, [sp, #0xC]
  00044	e58d4008	 str         r4, [sp, #8]
  00048	e58d5004	 str         r5, [sp, #4]
  0004c	e58d6000	 str         r6, [sp]
  00050	eb000000	 bl          |??0CControlPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|
  00054	ea000000	 b           |$LN4@CreateCont|
  00058		 |$LN3@CreateCont|
  00058	e3a00000	 mov         r0, #0
  0005c		 |$LN4@CreateCont|

; 2021 : }

  0005c	e28dd010	 add         sp, sp, #0x10
  00060	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M38214|

			 ENDP  ; |?CreateControlPipe@@YAPAVCPipeAbs@@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCHcd@@@Z|, CreateControlPipe

	EXPORT	|?CreateInterruptPipe@@YAPAVCPipeAbs@@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCHcd@@@Z| ; CreateInterruptPipe

  00000			 AREA	 |.pdata|, PDATA
|$T38233| DCD	|$LN7@CreateInte|
	DCD	0x40001a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CreateInterruptPipe@@YAPAVCPipeAbs@@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCHcd@@@Z| PROC ; CreateInterruptPipe

; 2028 : {

  00000		 |$LN7@CreateInte|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M38230|
  00008	e1a06003	 mov         r6, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1a08001	 mov         r8, r1
  00014	e1a09000	 mov         r9, r0

; 2029 :     return new CInterruptPipe(lpEndpointDescriptor,fIsLowSpeed,fIsHighSpeed,bDeviceAddress,bHubAddress,bHubPort,(COhcd * const)pChcd);

  00018	e3a00060	 mov         r0, #0x60
  0001c	eb000000	 bl          |??2@YAPAXI@Z|
  00020	e3500000	 cmp         r0, #0
  00024	0a00000b	 beq         |$LN3@CreateInte|
  00028	e59de034	 ldr         lr, [sp, #0x34]
  0002c	e5dd4030	 ldrb        r4, [sp, #0x30]
  00030	e5dd502c	 ldrb        r5, [sp, #0x2C]
  00034	e1a03007	 mov         r3, r7
  00038	e1a02008	 mov         r2, r8
  0003c	e1a01009	 mov         r1, r9
  00040	e58de00c	 str         lr, [sp, #0xC]
  00044	e58d4008	 str         r4, [sp, #8]
  00048	e58d5004	 str         r5, [sp, #4]
  0004c	e58d6000	 str         r6, [sp]
  00050	eb000000	 bl          |??0CInterruptPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|
  00054	ea000000	 b           |$LN4@CreateInte|
  00058		 |$LN3@CreateInte|
  00058	e3a00000	 mov         r0, #0
  0005c		 |$LN4@CreateInte|

; 2030 : }

  0005c	e28dd010	 add         sp, sp, #0x10
  00060	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M38231|

			 ENDP  ; |?CreateInterruptPipe@@YAPAVCPipeAbs@@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCHcd@@@Z|, CreateInterruptPipe

	EXPORT	|?CreateIsochronousPipe@@YAPAVCPipeAbs@@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCHcd@@@Z| ; CreateIsochronousPipe

  00000			 AREA	 |.pdata|, PDATA
|$T38251| DCD	|$LN7@CreateIsoc|
	DCD	0x40001a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CreateIsochronousPipe@@YAPAVCPipeAbs@@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCHcd@@@Z| PROC ; CreateIsochronousPipe

; 2037 : {

  00000		 |$LN7@CreateIsoc|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M38248|
  00008	e1a06003	 mov         r6, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1a08001	 mov         r8, r1
  00014	e1a09000	 mov         r9, r0

; 2038 :     CPipeAbs *pPipe = NULL;
; 2039 : 
; 2040 :     UNREFERENCED_PARAMETER(lpEndpointDescriptor);
; 2041 :     UNREFERENCED_PARAMETER(fIsLowSpeed);
; 2042 :     UNREFERENCED_PARAMETER(fIsHighSpeed);
; 2043 :     UNREFERENCED_PARAMETER(bDeviceAddress);
; 2044 :     UNREFERENCED_PARAMETER(bHubAddress);
; 2045 :     UNREFERENCED_PARAMETER(bHubPort);
; 2046 :     UNREFERENCED_PARAMETER(pChcd);
; 2047 : 
; 2048 : #ifdef MUSB_USEDMA
; 2049 : #ifdef MUSB_USEDMA_FOR_ISO
; 2050 : 
; 2051 :     // ISO is currently supported in DMA mode only!
; 2052 : 
; 2053 :     pPipe = new CIsochronousPipe(lpEndpointDescriptor,fIsLowSpeed,fIsHighSpeed,bDeviceAddress,bHubAddress,bHubPort,(COhcd * const)pChcd);

  00018	e3a0005c	 mov         r0, #0x5C
  0001c	eb000000	 bl          |??2@YAPAXI@Z|
  00020	e3500000	 cmp         r0, #0
  00024	0a00000b	 beq         |$LN3@CreateIsoc|
  00028	e59de034	 ldr         lr, [sp, #0x34]
  0002c	e5dd4030	 ldrb        r4, [sp, #0x30]
  00030	e5dd502c	 ldrb        r5, [sp, #0x2C]
  00034	e1a03007	 mov         r3, r7
  00038	e1a02008	 mov         r2, r8
  0003c	e1a01009	 mov         r1, r9
  00040	e58de00c	 str         lr, [sp, #0xC]
  00044	e58d4008	 str         r4, [sp, #8]
  00048	e58d5004	 str         r5, [sp, #4]
  0004c	e58d6000	 str         r6, [sp]
  00050	eb000000	 bl          |??0CIsochronousPipe@@QAA@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCOhcd@@@Z|
  00054	ea000000	 b           |$LN4@CreateIsoc|
  00058		 |$LN3@CreateIsoc|
  00058	e3a00000	 mov         r0, #0
  0005c		 |$LN4@CreateIsoc|

; 2054 : 
; 2055 : #endif // MUSB_USEDMA_FOR_ISO
; 2056 : #endif // MUSB_USEDMA
; 2057 : 
; 2058 :     return pPipe;
; 2059 : }

  0005c	e28dd010	 add         sp, sp, #0x10
  00060	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M38249|

			 ENDP  ; |?CreateIsochronousPipe@@YAPAVCPipeAbs@@QBU_USB_ENDPOINT_DESCRIPTOR@@HHEEEQAVCHcd@@@Z|, CreateIsochronousPipe

	EXPORT	|?DeInitialize@CHCCArea@@QAAXXZ|	; CHCCArea::DeInitialize

  00000			 AREA	 |.pdata|, PDATA
|$T38259| DCD	|$LN5@DeInitiali|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DeInitialize@CHCCArea@@QAAXXZ| PROC	; CHCCArea::DeInitialize

; 131  : {

  00000		 |$LN5@DeInitiali|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M38256|
  00004	e3a03c0b	 mov         r3, #0xB, 24

; 132  :     DEBUGMSG( ZONE_PIPE,(L"+CHCCArea::DeInitialize\n\r"));
; 133  : 
; 134  :     // wait for pipe count to reduce to zero...
; 135  :     WaitForPipes(3000);

  00008	e38310b8	 orr         r1, r3, #0xB8
  0000c	eb000000	 bl          |?WaitForPipes@CHCCArea@@QAAHK@Z|

; 136  : 
; 137  :     DEBUGMSG( ZONE_PIPE,(L"-CHCCArea::DeInitialize\n\r"));
; 138  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M38257|

			 ENDP  ; |?DeInitialize@CHCCArea@@QAAXXZ|, CHCCArea::DeInitialize


  00000			 AREA	 |.pdata|, PDATA
|$T38278| DCD	|$LN10@scalar@2|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCPipe@@UAAPAXI@Z| PROC		; CPipe::`scalar deleting destructor'
  00000		 |$LN10@scalar@2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M38275|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	e59f3028	 ldr         r3, [pc, #0x28]
  00010	e4803024	 str         r3, [r0], #0x24
  00014	eb000000	 bl          DeleteCriticalSection
  00018	e59f3018	 ldr         r3, [pc, #0x18]
  0001c	e3140001	 tst         r4, #1
  00020	11a00005	 movne       r0, r5
  00024	e5853000	 str         r3, [r5]
  00028	1b000000	 blne        |??3@YAXPAX@Z|
  0002c	e1a00005	 mov         r0, r5
  00030	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$LN11@scalar@2|
  00038		 |$LN12@scalar@2|
  00038	00000000	 DCD         |??_7CPipeAbs@@6B@|
  0003c		 |$LN13@scalar@2|
  0003c	00000000	 DCD         |??_7CPipe@@6B@|
  00040		 |$M38276|

			 ENDP  ; |??_GCPipe@@UAAPAXI@Z|, CPipe::`scalar deleting destructor'


  00000			 AREA	 |.pdata|, PDATA
|$T38307| DCD	|$LN12@scalar@3|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCQueuedPipe@@UAAPAXI@Z| PROC	; CQueuedPipe::`scalar deleting destructor'
  00000		 |$LN12@scalar@3|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M38304|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	e59f3028	 ldr         r3, [pc, #0x28]
  00010	e4803024	 str         r3, [r0], #0x24
  00014	eb000000	 bl          DeleteCriticalSection
  00018	e59f3018	 ldr         r3, [pc, #0x18]
  0001c	e3140001	 tst         r4, #1
  00020	11a00005	 movne       r0, r5
  00024	e5853000	 str         r3, [r5]
  00028	1b000000	 blne        |??3@YAXPAX@Z|
  0002c	e1a00005	 mov         r0, r5
  00030	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$LN13@scalar@3|
  00038		 |$LN14@scalar@3|
  00038	00000000	 DCD         |??_7CPipeAbs@@6B@|
  0003c		 |$LN15@scalar@3|
  0003c	00000000	 DCD         |??_7CPipe@@6B@|
  00040		 |$M38305|

			 ENDP  ; |??_GCQueuedPipe@@UAAPAXI@Z|, CQueuedPipe::`scalar deleting destructor'


  00000			 AREA	 |.pdata|, PDATA
|$T38345| DCD	|$LN14@scalar@4|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCBulkPipe@@UAAPAXI@Z| PROC	; CBulkPipe::`scalar deleting destructor'
  00000		 |$LN14@scalar@4|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M38342|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	e59f3028	 ldr         r3, [pc, #0x28]
  00010	e4803024	 str         r3, [r0], #0x24
  00014	eb000000	 bl          DeleteCriticalSection
  00018	e59f3018	 ldr         r3, [pc, #0x18]
  0001c	e3140001	 tst         r4, #1
  00020	11a00005	 movne       r0, r5
  00024	e5853000	 str         r3, [r5]
  00028	1b000000	 blne        |??3@YAXPAX@Z|
  0002c	e1a00005	 mov         r0, r5
  00030	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$LN15@scalar@4|
  00038		 |$LN16@scalar@4|
  00038	00000000	 DCD         |??_7CPipeAbs@@6B@|
  0003c		 |$LN17@scalar@4|
  0003c	00000000	 DCD         |??_7CPipe@@6B@|
  00040		 |$M38343|

			 ENDP  ; |??_GCBulkPipe@@UAAPAXI@Z|, CBulkPipe::`scalar deleting destructor'


  00000			 AREA	 |.pdata|, PDATA
|$T38383| DCD	|$LN14@scalar@5|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCControlPipe@@UAAPAXI@Z| PROC	; CControlPipe::`scalar deleting destructor'
  00000		 |$LN14@scalar@5|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M38380|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	e59f3028	 ldr         r3, [pc, #0x28]
  00010	e4803024	 str         r3, [r0], #0x24
  00014	eb000000	 bl          DeleteCriticalSection
  00018	e59f3018	 ldr         r3, [pc, #0x18]
  0001c	e3140001	 tst         r4, #1
  00020	11a00005	 movne       r0, r5
  00024	e5853000	 str         r3, [r5]
  00028	1b000000	 blne        |??3@YAXPAX@Z|
  0002c	e1a00005	 mov         r0, r5
  00030	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$LN15@scalar@5|
  00038		 |$LN16@scalar@5|
  00038	00000000	 DCD         |??_7CPipeAbs@@6B@|
  0003c		 |$LN17@scalar@5|
  0003c	00000000	 DCD         |??_7CPipe@@6B@|
  00040		 |$M38381|

			 ENDP  ; |??_GCControlPipe@@UAAPAXI@Z|, CControlPipe::`scalar deleting destructor'


  00000			 AREA	 |.pdata|, PDATA
|$T38421| DCD	|$LN14@scalar@6|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCInterruptPipe@@UAAPAXI@Z| PROC	; CInterruptPipe::`scalar deleting destructor'
  00000		 |$LN14@scalar@6|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M38418|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	e59f3028	 ldr         r3, [pc, #0x28]
  00010	e4803024	 str         r3, [r0], #0x24
  00014	eb000000	 bl          DeleteCriticalSection
  00018	e59f3018	 ldr         r3, [pc, #0x18]
  0001c	e3140001	 tst         r4, #1
  00020	11a00005	 movne       r0, r5
  00024	e5853000	 str         r3, [r5]
  00028	1b000000	 blne        |??3@YAXPAX@Z|
  0002c	e1a00005	 mov         r0, r5
  00030	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$LN15@scalar@6|
  00038		 |$LN16@scalar@6|
  00038	00000000	 DCD         |??_7CPipeAbs@@6B@|
  0003c		 |$LN17@scalar@6|
  0003c	00000000	 DCD         |??_7CPipe@@6B@|
  00040		 |$M38419|

			 ENDP  ; |??_GCInterruptPipe@@UAAPAXI@Z|, CInterruptPipe::`scalar deleting destructor'


  00000			 AREA	 |.pdata|, PDATA
|$T38459| DCD	|$LN14@scalar@7|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCIsochronousPipe@@UAAPAXI@Z| PROC	; CIsochronousPipe::`scalar deleting destructor'
  00000		 |$LN14@scalar@7|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M38456|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	e59f3028	 ldr         r3, [pc, #0x28]
  00010	e4803024	 str         r3, [r0], #0x24
  00014	eb000000	 bl          DeleteCriticalSection
  00018	e59f3018	 ldr         r3, [pc, #0x18]
  0001c	e3140001	 tst         r4, #1
  00020	11a00005	 movne       r0, r5
  00024	e5853000	 str         r3, [r5]
  00028	1b000000	 blne        |??3@YAXPAX@Z|
  0002c	e1a00005	 mov         r0, r5
  00030	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$LN15@scalar@7|
  00038		 |$LN16@scalar@7|
  00038	00000000	 DCD         |??_7CPipeAbs@@6B@|
  0003c		 |$LN17@scalar@7|
  0003c	00000000	 DCD         |??_7CPipe@@6B@|
  00040		 |$M38457|

			 ENDP  ; |??_GCIsochronousPipe@@UAAPAXI@Z|, CIsochronousPipe::`scalar deleting destructor'

	EXPORT	|??1CHCCArea@@QAA@XZ|			; CHCCArea::~CHCCArea

  00000			 AREA	 |.pdata|, PDATA
|$T38473| DCD	|$LN7@CHCCArea@2|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CHCCArea@@QAA@XZ| PROC		; CHCCArea::~CHCCArea

; 89   : {

  00000		 |$LN7@CHCCArea@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M38470|
  00004	e1a04000	 mov         r4, r0
  00008	e3a03c0b	 mov         r3, #0xB, 24

; 90   :     DeInitialize();

  0000c	e38310b8	 orr         r1, r3, #0xB8
  00010	eb000000	 bl          |?WaitForPipes@CHCCArea@@QAAHK@Z|

; 91   :     DeleteCriticalSection( &m_csQHScheduleLock );

  00014	e2840008	 add         r0, r4, #8
  00018	eb000000	 bl          DeleteCriticalSection

; 92   : }

  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M38471|

			 ENDP  ; |??1CHCCArea@@QAA@XZ|, CHCCArea::~CHCCArea

	END
