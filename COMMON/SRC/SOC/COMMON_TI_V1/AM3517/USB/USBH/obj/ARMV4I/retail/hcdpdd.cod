; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\USB\USBH\hcdpdd.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?ChipCfgLock@@YAXPAUOMAP_SYSC_GENERAL_REGS@@H@Z| ; ChipCfgLock
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\hcdpdd.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T38921| DCD	|$LN5@ChipCfgLoc|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ChipCfgLock@@YAXPAUOMAP_SYSC_GENERAL_REGS@@H@Z| PROC ; ChipCfgLock

; 57   : {

  00000		 |$LN5@ChipCfgLoc|
  00000		 |$M38918|

; 58   : 	UNREFERENCED_PARAMETER(lock);
; 59   : 	UNREFERENCED_PARAMETER(pSysConfRegs);
; 60   : 
; 61   : 	// Not available on AM3517
; 62   : 
; 63   : 	/*
; 64   :     if (lock)
; 65   :     {
; 66   :         pSysConfRegs->KICK0R = BOOT_CFG_KICK0_LOCK;
; 67   :         pSysConfRegs->KICK1R = BOOT_CFG_KICK1_LOCK;
; 68   :     }
; 69   :     else
; 70   :     {
; 71   :         pSysConfRegs->KICK0R = BOOT_CFG_KICK0_UNLOCK;
; 72   :         pSysConfRegs->KICK1R = BOOT_CFG_KICK1_UNLOCK;
; 73   :     }
; 74   : 	*/
; 75   : }

  00000	e12fff1e	 bx          lr
  00004		 |$M38919|

			 ENDP  ; |?ChipCfgLock@@YAXPAUOMAP_SYSC_GENERAL_REGS@@H@Z|, ChipCfgLock

	EXPORT	|HcdPdd_DllMain|

  00000			 AREA	 |.pdata|, PDATA
|$T38930| DCD	|$LN9@HcdPdd_Dll|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HcdPdd_DllMain| PROC

; 85   : {

  00000		 |$LN9@HcdPdd_Dll|
  00000		 |$M38927|

; 86   : 	UNREFERENCED_PARAMETER(hinstDLL);
; 87   : 	UNREFERENCED_PARAMETER(lpvReserved);
; 88   : 
; 89   :     switch (dwReason)
; 90   :     {
; 91   :     case DLL_PROCESS_ATTACH:
; 92   :         DEBUGMSG(ZONE_INIT, (TEXT("USBH: HcdPdd_DllMain DLL_PROCESS_ATTACH\r\n")));
; 93   :         break;
; 94   :     case DLL_PROCESS_DETACH:
; 95   :         DEBUGMSG(ZONE_INIT, (TEXT("USBH: HcdPdd_DllMain DLL_PROCESS_DETACH\r\n")));
; 96   :         break;
; 97   :     }
; 98   : 
; 99   :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 100  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M38928|

			 ENDP  ; |HcdPdd_DllMain|

	EXPORT	|?HcdPdd_SetDevicePower@@YAKPAU_SOhcdPdd@@@Z| ; HcdPdd_SetDevicePower

  00000			 AREA	 |.pdata|, PDATA
|$T38943| DCD	|$LN13@HcdPdd_Set|
	DCD	0x40001900
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HcdPdd_SetDevicePower@@YAKPAU_SOhcdPdd@@@Z| PROC ; HcdPdd_SetDevicePower

; 111  : {

  00000		 |$LN13@HcdPdd_Set|
  00000		 |$M38940|
  00000	e3500000	 cmp         r0, #0

; 112  : //    DWORD nPhyCtl;
; 113  : 	DWORD dwRegVal = 0;
; 114  : 
; 115  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH: HcdPdd_SetDevicePower: State %d\r\n"),
; 116  :         pPddObject->CurrentDx));
; 117  : 
; 118  : 	if (!pPddObject)

  00004	1a000001	 bne         |$LN7@HcdPdd_Set|
  00008		 |$LN1@HcdPdd_Set|

; 119  :         return ERROR_INVALID_PARAMETER;

  00008	e3a00057	 mov         r0, #0x57

; 219  : }

  0000c	e12fff1e	 bx          lr
  00010		 |$LN7@HcdPdd_Set|

; 120  : 
; 121  :     if(pPddObject->dwDisablePowerManagement != 0)

  00010	e590322c	 ldr         r3, [r0, #0x22C]
  00014	e3530000	 cmp         r3, #0

; 122  :     {
; 123  :         DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH: HcdPdd_SetDevicePower: Power management disabled\r\n")));
; 124  :         return ERROR_SUCCESS;

  00018	1a00000f	 bne         |$LN4@HcdPdd_Set|

; 125  :     }
; 126  : 
; 127  :     switch (pPddObject->CurrentDx)

  0001c	e5903220	 ldr         r3, [r0, #0x220]
  00020	e3530000	 cmp         r3, #0
  00024	0a000006	 beq         |$LN3@HcdPdd_Set|
  00028	e2433003	 sub         r3, r3, #3
  0002c	e3530001	 cmp         r3, #1
  00030	8afffff4	 bhi         |$LN1@HcdPdd_Set|

; 175  : 
; 176  :         DEBUGMSG(0, (L"UsbPowerModule: 2 CFGCHIP2 = 0x%08X\r\n", pPddObject->pSysConfReg->CONTROL_DEVCONF2));
; 177  :         break;
; 178  : 
; 179  :     case D3: // Sleep
; 180  :     case D4: // Power off
; 181  : 
; 182  :         dwRegVal = READ_PORT_ULONG(pPddObject->ioPortBase+USB_DEVCTL_REG_OFFSET);

  00034	e5902210	 ldr         r2, [r0, #0x210]

; 183  :         dwRegVal &= ~BIT0;

  00038	e5923460	 ldr         r3, [r2, #0x460]
  0003c	e3c33001	 bic         r3, r3, #1

; 184  :         WRITE_PORT_ULONG(pPddObject->ioPortBase+USB_DEVCTL_REG_OFFSET, dwRegVal);
; 185  : 
; 186  : /*
; 187  :         // Unlock USBPHY_CTL reg
; 188  :         ChipCfgLock(pPddObject->pSysConfReg, FALSE);
; 189  : 
; 190  :         // Power down the PHY
; 191  :         nPhyCtl = pPddObject->pSysConfReg->CONTROL_DEVCONF2;
; 192  : 
; 193  :         // Only power down the USB2.0 PHY if USB1.1 PHY not in use
; 194  :         if (!pPddObject->fUSB11Enabled)
; 195  :         {
; 196  :             nPhyCtl |= DEVCONF2_USBOTG_PHY_PD;
; 197  :         }
; 198  : 
; 199  :         nPhyCtl |= DEVCONF2_USBOTG_POWERDOWNOTG;
; 200  :         pPddObject->pSysConfReg->CONTROL_DEVCONF2 = nPhyCtl;
; 201  : 
; 202  :         // Lock USBPHY_CTL reg
; 203  :         ChipCfgLock(pPddObject->pSysConfReg, TRUE);
; 204  : 
; 205  : 		// Disable Clocks
; 206  : 		EnableDeviceClocks(OMAP_DEVICE_HSOTGUSB, FALSE);
; 207  : 
; 208  : 		// Release pads
; 209  : 		ReleaseDevicePads(OMAP_DEVICE_HSOTGUSB);
; 210  : */
; 211  :         break;

  00040	ea000004	 b           |$LN10@HcdPdd_Set|
  00044		 |$LN3@HcdPdd_Set|

; 128  :     {
; 129  :     case D0: // Power on
; 130  : 
; 131  :         // Determine if USB 1.1 is in use
; 132  :         pPddObject->fUSB11Enabled = FALSE;
; 133  : 		/*
; 134  :         pPddObject->fUSB11Enabled =
; 135  :             (pPddObject->pSysConfReg->CFGCHIP2 & CFGCHIP2_USB1SUSPENDM) ? TRUE : FALSE;
; 136  : 
; 137  : 		// Enable Clocks
; 138  : 		EnableDeviceClocks(OMAP_DEVICE_HSOTGUSB, TRUE);
; 139  : 
; 140  : 		// Request pads
; 141  : 		RequestDevicePads(OMAP_DEVICE_HSOTGUSB);
; 142  : 
; 143  :         // Unlock USBPHY_CTL reg
; 144  :         ChipCfgLock(pPddObject->pSysConfReg, FALSE);
; 145  : 
; 146  : 		nPhyCtl = pPddObject->pSysConfReg->CONTROL_DEVCONF2;
; 147  :         DEBUGMSG(0, (L"UsbPowerModule: 1 CFGCHIP2 = 0x%08X\r\n", nPhyCtl));
; 148  : 
; 149  :         // take Phy out of reset
; 150  :         nPhyCtl &= ~(DEVCONF2_USBOTG_PHY_RESET);
; 151  :         pPddObject->pSysConfReg->CONTROL_DEVCONF2 = nPhyCtl;
; 152  : 
; 153  :         // start on-chip PHY and PLL's
; 154  :         nPhyCtl |= (DEVCONF2_USBOTG_PHY_PLLON	 |
; 155  :                     DEVCONF2_USBOTG_SESSENDEN	 |
; 156  :                     DEVCONF2_USBOTG_VBUSDETECTEN |
; 157  :                     DEVCONF2_USBOTG_DATAPOLARITY |
; 158  : 					DEVCONF2_USBOTG_REFFREQ_13MHZ|
; 159  :                     DEVCONF2_USBOTG_OTGMODE_HOST );
; 160  :         nPhyCtl &= ~(DEVCONF2_USBOTG_PHY_PD		 |
; 161  :                      DEVCONF2_USBOTG_POWERDOWNOTG);
; 162  :         pPddObject->pSysConfReg->CONTROL_DEVCONF2 = nPhyCtl;
; 163  :         Sleep(1);
; 164  : 
; 165  :         // wait until ready
; 166  :         while ((pPddObject->pSysConfReg->CONTROL_DEVCONF2 & DEVCONF2_USBOTG_PWR_CLKGOOD) != DEVCONF2_USBOTG_PWR_CLKGOOD)
; 167  :             Sleep(5);
; 168  : 
; 169  :         // Lock USBPHY_CTL reg
; 170  :         ChipCfgLock(pPddObject->pSysConfReg, TRUE);
; 171  : */
; 172  :         dwRegVal = READ_PORT_ULONG(pPddObject->ioPortBase+USB_DEVCTL_REG_OFFSET);

  00044	e5902210	 ldr         r2, [r0, #0x210]
  00048	e3a03000	 mov         r3, #0
  0004c	e5803230	 str         r3, [r0, #0x230]
  00050	e5923460	 ldr         r3, [r2, #0x460]

; 173  :         dwRegVal |= BIT0;

  00054	e3833001	 orr         r3, r3, #1
  00058		 |$LN10@HcdPdd_Set|

; 174  :         WRITE_PORT_ULONG(pPddObject->ioPortBase+USB_DEVCTL_REG_OFFSET, dwRegVal);

  00058	e5823460	 str         r3, [r2, #0x460]
  0005c		 |$LN4@HcdPdd_Set|

; 212  : 
; 213  :     default:
; 214  : 
; 215  :         return ERROR_INVALID_PARAMETER;
; 216  :     }
; 217  : 
; 218  :     return ERROR_SUCCESS;

  0005c	e3a00000	 mov         r0, #0

; 219  : }

  00060	e12fff1e	 bx          lr
  00064		 |$M38941|

			 ENDP  ; |?HcdPdd_SetDevicePower@@YAKPAU_SOhcdPdd@@@Z|, HcdPdd_SetDevicePower

	EXPORT	|HcdPdd_Init|
	EXPORT	|??_C@_1CO@GMFDDKFG@?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@FLLDNPDG@?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|??3@YAXPAX@Z|				; operator delete
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|RegCloseKey|
	IMPORT	|HcdMdd_CreateHcdObject|
	IMPORT	|HcdMdd_CreateMemoryObject|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|KernelIoControl|
	IMPORT	|MmMapIoSpace|
	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|USBHPDD_PowerVBUS|
	IMPORT	|USBHPDD_Init|
	IMPORT	|wcsncpy|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T38967| DCD	|$LN33@HcdPdd_Ini|
	DCD	0x4000a702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@GMFDDKFG@?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?$AA@| DCB "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "M"
	DCB	0x0, "a", 0x0, "n", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, "m"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@FLLDNPDG@?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r", 0x0, "i", 0x0, "p"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, "C", 0x0, "o", 0x0, "u"
	DCB	0x0, "n", 0x0, "t", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HcdPdd_Init| PROC

; 229  : {

  00000		 |$LN33@HcdPdd_Ini|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd020	 sub         sp, sp, #0x20
  00008		 |$M38964|
  00008	e1a04000	 mov         r4, r0

; 230  :     SOhcdPdd *pPddObject = NULL;
; 231  :     BOOL fRet = FALSE;
; 232  :     PHYSICAL_ADDRESS PhysAddr = {0};

  0000c	e3a03000	 mov         r3, #0
  00010	e58d3014	 str         r3, [sp, #0x14]
  00014	e3a03000	 mov         r3, #0

; 233  :     DWORD IrqVal = IRQ_USB0_INT;

  00018	e3a02047	 mov         r2, #0x47

; 234  :     DWORD BytesRet;
; 235  :     HKEY hKey = NULL;

  0001c	e3a01000	 mov         r1, #0
  00020	e58d3018	 str         r3, [sp, #0x18]
  00024	e3a05000	 mov         r5, #0
  00028	e3a06000	 mov         r6, #0
  0002c	e58d200c	 str         r2, [sp, #0xC]
  00030	e58d1008	 str         r1, [sp, #8]

; 236  :  
; 237  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH:+HcdPdd_Init:\r\n")));
; 238  : 
; 239  :     // Initialise platform PDD
; 240  :     if (!USBHPDD_Init())

  00034	eb000000	 bl          USBHPDD_Init
  00038	e3500000	 cmp         r0, #0
  0003c	e3a08b02	 mov         r8, #2, 22
  00040	0a000074	 beq         |$_clean$38639|

; 241  :     {
; 242  :         DEBUGMSG(ZONE_ERROR, (L"HcdPdd_Init: Failed to initialise platform USBH PDD\r\n"));
; 243  :         goto _clean;
; 244  :     }
; 245  :     // Start with VBUS power off
; 246  :     USBHPDD_PowerVBUS(FALSE);

  00044	e3a00000	 mov         r0, #0
  00048	eb000000	 bl          USBHPDD_PowerVBUS

; 247  : 
; 248  :     // PDD context
; 249  :     pPddObject = new SOhcdPdd;

  0004c	e3a00f8d	 mov         r0, #0x8D, 30
  00050	eb000000	 bl          |??2@YAPAXI@Z|
  00054	e1b05000	 movs        r5, r0

; 250  : 
; 251  :     if (!pPddObject)

  00058	0a00006e	 beq         |$_clean$38639|

; 252  :     {
; 253  :         DEBUGMSG(ZONE_ERROR, (L"HcdPdd_Init: Failed to alloc PDD context!\r\n"));
; 254  :         goto _clean;
; 255  :     }
; 256  : 
; 257  :     memset(pPddObject, 0, sizeof(*pPddObject));

  0005c	e3a02f8d	 mov         r2, #0x8D, 30
  00060	e3a01000	 mov         r1, #0
  00064	e1a00005	 mov         r0, r5
  00068	eb000000	 bl          memset

; 258  : 
; 259  :     // Map registers
; 260  : 
; 261  :     // map the HC register space to VM
; 262  :     PhysAddr.LowPart = AM3517_USB0_REGS_PA;
; 263  :     pPddObject->ioPortBase = (PUCHAR) MmMapIoSpace (PhysAddr, sizeof(CSL_UsbRegs), FALSE);

  0006c	e59d1018	 ldr         r1, [sp, #0x18]
  00070	e3a07317	 mov         r7, #0x17, 6
  00074	e3870701	 orr         r0, r7, #1, 14
  00078	e3a03000	 mov         r3, #0
  0007c	e3882018	 orr         r2, r8, #0x18
  00080	eb000000	 bl          MmMapIoSpace

; 264  : 
; 265  :     // Map System Configuration register space to VM
; 266  :     PhysAddr.LowPart = OMAP_SYSC_GENERAL_REGS_PA;
; 267  :     pPddObject->pSysConfReg = (OMAP_SYSC_GENERAL_REGS*)MmMapIoSpace(PhysAddr, sizeof(OMAP_SYSC_GENERAL_REGS), FALSE);

  00084	e59d1018	 ldr         r1, [sp, #0x18]
  00088	e1a0e000	 mov         lr, r0
  0008c	e59f0204	 ldr         r0, [pc, #0x204]
  00090	e3a03000	 mov         r3, #0
  00094	e3a02ea6	 mov         r2, #0xA6, 28
  00098	e585e210	 str         lr, [r5, #0x210]
  0009c	eb000000	 bl          MmMapIoSpace

; 268  : 
; 269  :     // Map the CPPI register space to VM
; 270  :     PhysAddr.LowPart = AM3517_CPPI_REGS_PA;
; 271  :     pPddObject->ioCppiBase = (PUCHAR) MmMapIoSpace(PhysAddr, sizeof(CSL_CppiRegs), FALSE);

  000a0	e59d1018	 ldr         r1, [sp, #0x18]
  000a4	e1a03000	 mov         r3, r0
  000a8	e5853224	 str         r3, [r5, #0x224]
  000ac	e3a03000	 mov         r3, #0
  000b0	e3870a41	 orr         r0, r7, #0x41, 20
  000b4	e3a02c5e	 mov         r2, #0x5E, 24
  000b8	eb000000	 bl          MmMapIoSpace

; 272  : 
; 273  :     if ((NULL == pPddObject->ioPortBase) ||
; 274  :         (NULL == pPddObject->ioCppiBase) ||
; 275  :         (NULL == pPddObject->pSysConfReg))

  000bc	e5953210	 ldr         r3, [r5, #0x210]
  000c0	e5850214	 str         r0, [r5, #0x214]
  000c4	e3530000	 cmp         r3, #0
  000c8	0a000052	 beq         |$_clean$38639|
  000cc	e3500000	 cmp         r0, #0
  000d0	0a000050	 beq         |$_clean$38639|
  000d4	e5953224	 ldr         r3, [r5, #0x224]
  000d8	e3530000	 cmp         r3, #0
  000dc	0a00004d	 beq         |$_clean$38639|

; 276  :     {
; 277  :         DEBUGMSG(ZONE_ERROR, (L"HcdPdd_Init: Failed to map registers!\r\n"));
; 278  :         goto _clean;
; 279  :     }
; 280  : 
; 281  :     // Request SYSINTR ID
; 282  :     if (!KernelIoControl(IOCTL_HAL_REQUEST_SYSINTR,  &IrqVal, sizeof(DWORD),
; 283  :             &pPddObject->dwSysIntr, sizeof(DWORD), &BytesRet))

  000e0	e59f01ac	 ldr         r0, [pc, #0x1AC]
  000e4	e28de01c	 add         lr, sp, #0x1C
  000e8	e3a07004	 mov         r7, #4
  000ec	e2853f86	 add         r3, r5, #0x86, 30
  000f0	e3a02004	 mov         r2, #4
  000f4	e28d100c	 add         r1, sp, #0xC
  000f8	e58de004	 str         lr, [sp, #4]
  000fc	e58d7000	 str         r7, [sp]
  00100	eb000000	 bl          KernelIoControl
  00104	e3500000	 cmp         r0, #0
  00108	0a000042	 beq         |$_clean$38639|

; 284  :     {
; 285  :         DEBUGMSG(ZONE_ERROR, (L"HcdPdd_Init: Failed to request SYSINTR for IRQ%d!\r\n",
; 286  :             IrqVal));
; 287  :         goto _clean;
; 288  :     }
; 289  : 
; 290  :     // Save reg path
; 291  :     _tcsncpy(pPddObject->szDriverRegKey, (LPCTSTR)dwContext, MAX_PATH);

  0010c	e2850008	 add         r0, r5, #8
  00110	e3a02f41	 mov         r2, #0x41, 30
  00114	e1a01004	 mov         r1, r4
  00118	eb000000	 bl          wcsncpy

; 292  : 
; 293  :     // Read registry settings
; 294  :     if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, (LPCTSTR)dwContext, 0, 0, &hKey) != ERROR_SUCCESS)

  0011c	e28d3008	 add         r3, sp, #8
  00120	e58d3000	 str         r3, [sp]
  00124	e3a03000	 mov         r3, #0
  00128	e3a02000	 mov         r2, #0
  0012c	e1a01004	 mov         r1, r4
  00130	e3a0010a	 mov         r0, #0xA, 2
  00134	eb000000	 bl          RegOpenKeyExW
  00138	e3500000	 cmp         r0, #0
  0013c	1a000035	 bne         |$_clean$38639|

; 295  :     {
; 296  :         DEBUGMSG(ZONE_ERROR, (L"HcdPdd_Init: Failed to open registry key\r\n"));
; 297  :         goto _clean;
; 298  :     }
; 299  :     else
; 300  :     {
; 301  :         // Read descriptor count value
; 302  :         DWORD cb = sizeof(pPddObject->dwDescriptorCount);
; 303  :         if (RegQueryValueEx(
; 304  :             hKey,
; 305  :             _T("DescriptorCount"),
; 306  :             NULL,
; 307  :             NULL,
; 308  :             (LPBYTE)&pPddObject->dwDescriptorCount,
; 309  :             &cb) != ERROR_SUCCESS)

  00140	e59f1148	 ldr         r1, [pc, #0x148]
  00144	e59d0008	 ldr         r0, [sp, #8]
  00148	e3a07004	 mov         r7, #4
  0014c	e28de010	 add         lr, sp, #0x10
  00150	e2854f8a	 add         r4, r5, #0x8A, 30
  00154	e3a03000	 mov         r3, #0
  00158	e3a02000	 mov         r2, #0
  0015c	e58d7010	 str         r7, [sp, #0x10]
  00160	e58de004	 str         lr, [sp, #4]
  00164	e58d4000	 str         r4, [sp]
  00168	eb000000	 bl          RegQueryValueExW
  0016c	e3500000	 cmp         r0, #0
  00170	1a000028	 bne         |$_clean$38639|

; 310  :         {
; 311  :             DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH: HcdPdd_Init: Failed to read DescriptorCount from registry\r\n")));
; 312  :             goto _clean;
; 313  :         }
; 314  : 
; 315  :         // Read power management disable flag
; 316  :         DWORD dpm = sizeof(pPddObject->dwDisablePowerManagement);
; 317  :         if (RegQueryValueEx(
; 318  :             hKey,
; 319  :             _T("DisablePowerManagement"),
; 320  :             NULL,
; 321  :             NULL,
; 322  :             (LPBYTE)&pPddObject->dwDisablePowerManagement,
; 323  :             &dpm) != ERROR_SUCCESS)

  00174	e59f1110	 ldr         r1, [pc, #0x110]
  00178	e59d0008	 ldr         r0, [sp, #8]
  0017c	e3a06004	 mov         r6, #4
  00180	e28de014	 add         lr, sp, #0x14
  00184	e2854f8b	 add         r4, r5, #0x8B, 30
  00188	e3a03000	 mov         r3, #0
  0018c	e3a02000	 mov         r2, #0
  00190	e58d6014	 str         r6, [sp, #0x14]
  00194	e58de004	 str         lr, [sp, #4]
  00198	e58d4000	 str         r4, [sp]
  0019c	eb000000	 bl          RegQueryValueExW
  001a0	e3500000	 cmp         r0, #0
  001a4	e3a03000	 mov         r3, #0

; 324  :         {
; 325  :             // Enable power management by default
; 326  :             pPddObject->dwDisablePowerManagement = 0;
; 327  :         }
; 328  :     }
; 329  : 
; 330  : #ifdef ENABLE_TESTMODE_SUPPORT
; 331  :     InitUsbTestMode(pPddObject->ioPortBase);
; 332  : #endif
; 333  : 
; 334  :     // Set the initial power state to Full On
; 335  :     pPddObject->CurrentDx = D0;
; 336  :     fRet = (HcdPdd_SetDevicePower(pPddObject) == ERROR_SUCCESS);

  001a8	e1a00005	 mov         r0, r5
  001ac	1585322c	 strne       r3, [r5, #0x22C]
  001b0	e5853220	 str         r3, [r5, #0x220]
  001b4	eb000000	 bl          |?HcdPdd_SetDevicePower@@YAKPAU_SOhcdPdd@@@Z|
  001b8	e3500000	 cmp         r0, #0
  001bc	1a000014	 bne         |$LN28@HcdPdd_Ini|

; 337  :     if (fRet)
; 338  :     {
; 339  :         // Create the memory and hcd object's
; 340  :         pPddObject->lpvMemoryObject = HcdMdd_CreateMemoryObject(gcTotalAvailablePhysicalMemory,
; 341  :                                                                 gcHighPriorityPhysicalMemory, NULL, NULL);

  001c0	e3a03000	 mov         r3, #0
  001c4	e3a02000	 mov         r2, #0
  001c8	e3a01902	 mov         r1, #2, 18
  001cc	e3a00802	 mov         r0, #2, 16
  001d0	e3a06001	 mov         r6, #1
  001d4	eb000000	 bl          HcdMdd_CreateMemoryObject

; 342  : 
; 343  :         pPddObject->lpvOhcdMddObject = HcdMdd_CreateHcdObject(pPddObject,
; 344  :                                                               pPddObject->lpvMemoryObject,
; 345  :                                                               pPddObject->szDriverRegKey,
; 346  :                                                               pPddObject->ioPortBase,
; 347  :                                                               pPddObject->dwSysIntr);

  001d8	e5952218	 ldr         r2, [r5, #0x218]
  001dc	e5953210	 ldr         r3, [r5, #0x210]
  001e0	e1a0e000	 mov         lr, r0
  001e4	e58d2000	 str         r2, [sp]
  001e8	e2852008	 add         r2, r5, #8
  001ec	e1a0100e	 mov         r1, lr
  001f0	e1a00005	 mov         r0, r5
  001f4	e585e000	 str         lr, [r5]
  001f8	eb000000	 bl          HcdMdd_CreateHcdObject
  001fc	e3500000	 cmp         r0, #0
  00200	e5850004	 str         r0, [r5, #4]

; 348  : 
; 349  :         if (!pPddObject->lpvOhcdMddObject || !pPddObject->lpvMemoryObject)

  00204	0a000002	 beq         |$LN28@HcdPdd_Ini|
  00208	e5953000	 ldr         r3, [r5]
  0020c	e3530000	 cmp         r3, #0
  00210	1a000000	 bne         |$_clean$38639|
  00214		 |$LN28@HcdPdd_Ini|

; 324  :         {
; 325  :             // Enable power management by default
; 326  :             pPddObject->dwDisablePowerManagement = 0;
; 327  :         }
; 328  :     }
; 329  : 
; 330  : #ifdef ENABLE_TESTMODE_SUPPORT
; 331  :     InitUsbTestMode(pPddObject->ioPortBase);
; 332  : #endif
; 333  : 
; 334  :     // Set the initial power state to Full On
; 335  :     pPddObject->CurrentDx = D0;
; 336  :     fRet = (HcdPdd_SetDevicePower(pPddObject) == ERROR_SUCCESS);

  00214	e3a06000	 mov         r6, #0
  00218		 |$_clean$38639|

; 350  :         {
; 351  :             DEBUGCHK(FALSE);
; 352  :             fRet = FALSE;
; 353  :         }
; 354  :     }
; 355  :     else
; 356  :     {
; 357  :         DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH: HcdPdd_Init: HcdPdd_SetDevicePower failed\r\n")));
; 358  :     }
; 359  : 
; 360  : _clean:
; 361  : 
; 362  :     if (hKey)

  00218	e59d0008	 ldr         r0, [sp, #8]
  0021c	e3500000	 cmp         r0, #0

; 363  :         RegCloseKey(hKey);

  00220	1b000000	 blne        RegCloseKey

; 364  : 
; 365  :     if (!fRet)

  00224	e3560000	 cmp         r6, #0
  00228	1a000013	 bne         |$LN4@HcdPdd_Ini|

; 366  :     {
; 367  :         // Cleanup
; 368  : 
; 369  :         if (pPddObject)

  0022c	e3550000	 cmp         r5, #0
  00230	0a000011	 beq         |$LN4@HcdPdd_Ini|

; 370  :         {
; 371  :             if (pPddObject->pSysConfReg)

  00234	e5953224	 ldr         r3, [r5, #0x224]
  00238	e3530000	 cmp         r3, #0

; 372  :                 MmUnmapIoSpace(pPddObject->pSysConfReg, sizeof(OMAP_SYSC_GENERAL_REGS));

  0023c	13a01ea6	 movne       r1, #0xA6, 28
  00240	11a00003	 movne       r0, r3
  00244	1b000000	 blne        MmUnmapIoSpace

; 373  : 
; 374  :             if (pPddObject->ioCppiBase)

  00248	e5953214	 ldr         r3, [r5, #0x214]
  0024c	e3530000	 cmp         r3, #0

; 375  :                 MmUnmapIoSpace(pPddObject->ioCppiBase, sizeof(CSL_CppiRegs));

  00250	13a01c5e	 movne       r1, #0x5E, 24
  00254	11a00003	 movne       r0, r3
  00258	1b000000	 blne        MmUnmapIoSpace

; 376  : 
; 377  :             if (pPddObject->ioPortBase)

  0025c	e5953210	 ldr         r3, [r5, #0x210]
  00260	e3530000	 cmp         r3, #0

; 378  :                 MmUnmapIoSpace(pPddObject->ioPortBase, sizeof(CSL_UsbRegs));

  00264	13881018	 orrne       r1, r8, #0x18
  00268	11a00003	 movne       r0, r3
  0026c	1b000000	 blne        MmUnmapIoSpace

; 379  : 
; 380  :             delete pPddObject;

  00270	e1a00005	 mov         r0, r5
  00274	eb000000	 bl          |??3@YAXPAX@Z|

; 381  :             pPddObject = NULL;

  00278	e3a05000	 mov         r5, #0
  0027c		 |$LN4@HcdPdd_Ini|

; 382  :         }
; 383  :     }
; 384  : 
; 385  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH:-HcdPdd_Init:(0x%X)\r\n"), pPddObject));
; 386  :     return (DWORD)pPddObject;
; 387  : }

  0027c	e1a00005	 mov         r0, r5
  00280	e28dd020	 add         sp, sp, #0x20
  00284	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00288	e12fff1e	 bx          lr
  0028c		 |$LN34@HcdPdd_Ini|
  0028c		 |$LN35@HcdPdd_Ini|
  0028c	00000000	 DCD         |??_C@_1CO@GMFDDKFG@?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?$AA@|
  00290		 |$LN36@HcdPdd_Ini|
  00290	00000000	 DCD         |??_C@_1CA@FLLDNPDG@?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@|
  00294		 |$LN37@HcdPdd_Ini|
  00294	01010098	 DCD         0x1010098
  00298		 |$LN38@HcdPdd_Ini|
  00298	48002270	 DCD         0x48002270
  0029c		 |$M38965|

			 ENDP  ; |HcdPdd_Init|

	EXPORT	|HcdPdd_CheckConfigPower|

  00000			 AREA	 |.pdata|, PDATA
|$T38981| DCD	|$LN5@HcdPdd_Che|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HcdPdd_CheckConfigPower| PROC

; 403  : {

  00000		 |$LN5@HcdPdd_Che|
  00000		 |$M38978|

; 404  : 	UNREFERENCED_PARAMETER(bPort);
; 405  : 	UNREFERENCED_PARAMETER(dwCfgPower);
; 406  : 	UNREFERENCED_PARAMETER(dwTotalPower);
; 407  : 
; 408  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH: HcdPdd_CheckConfigPower:\r\n")));
; 409  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 410  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M38979|

			 ENDP  ; |HcdPdd_CheckConfigPower|

	EXPORT	|HcdPdd_PowerUp|
	IMPORT	|HcdMdd_PowerUp|

  00000			 AREA	 |.pdata|, PDATA
|$T38989| DCD	|$LN5@HcdPdd_Pow|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HcdPdd_PowerUp| PROC

; 413  : {

  00000		 |$LN5@HcdPdd_Pow|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M38986|

; 414  :     SOhcdPdd *pPddObject = (SOhcdPdd *)hDeviceContext;
; 415  : 
; 416  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH: HcdPdd_PowerUp:\r\n")));
; 417  :     DEBUGCHK(pPddObject);
; 418  : 
; 419  :     HcdMdd_PowerUp(pPddObject->lpvOhcdMddObject);

  00004	e5900004	 ldr         r0, [r0, #4]
  00008	eb000000	 bl          HcdMdd_PowerUp

; 420  : 
; 421  :     return;
; 422  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M38987|

			 ENDP  ; |HcdPdd_PowerUp|

	EXPORT	|HcdPdd_PowerDown|
	IMPORT	|HcdMdd_PowerDown|

  00000			 AREA	 |.pdata|, PDATA
|$T38997| DCD	|$LN5@HcdPdd_Pow@2|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HcdPdd_PowerDown| PROC

; 425  : {

  00000		 |$LN5@HcdPdd_Pow@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M38994|

; 426  :     SOhcdPdd *pPddObject = (SOhcdPdd *)hDeviceContext;
; 427  : 
; 428  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH: HcdPdd_PowerDown:\r\n")));
; 429  :     DEBUGCHK(pPddObject);
; 430  : 
; 431  :     HcdMdd_PowerDown(pPddObject->lpvOhcdMddObject);

  00004	e5900004	 ldr         r0, [r0, #4]
  00008	eb000000	 bl          HcdMdd_PowerDown

; 432  : 
; 433  :     return;
; 434  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M38995|

			 ENDP  ; |HcdPdd_PowerDown|

	EXPORT	|HcdPdd_Deinit|
	IMPORT	|HcdMdd_DestroyMemoryObject|
	IMPORT	|HcdMdd_DestroyHcdObject|

  00000			 AREA	 |.pdata|, PDATA
|$T39008| DCD	|$LN12@HcdPdd_Dei|
	DCD	0x40002a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HcdPdd_Deinit| PROC

; 438  : {

  00000		 |$LN12@HcdPdd_Dei|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M39005|
  00008	e1a04000	 mov         r4, r0

; 439  :     SOhcdPdd * pPddObject = (SOhcdPdd *)hDeviceContext;
; 440  : 
; 441  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH: HcdPdd_Deinit:\r\n")));
; 442  :     DEBUGCHK(pPddObject);
; 443  : 
; 444  : 
; 445  :     if (pPddObject->lpvOhcdMddObject)

  0000c	e5943004	 ldr         r3, [r4, #4]
  00010	e3530000	 cmp         r3, #0

; 446  :         HcdMdd_DestroyHcdObject(pPddObject->lpvOhcdMddObject);

  00014	11a00003	 movne       r0, r3
  00018	1b000000	 blne        HcdMdd_DestroyHcdObject

; 447  :     if (pPddObject->lpvMemoryObject)

  0001c	e5943000	 ldr         r3, [r4]
  00020	e3530000	 cmp         r3, #0

; 448  :         HcdMdd_DestroyMemoryObject(pPddObject->lpvMemoryObject);

  00024	11a00003	 movne       r0, r3
  00028	1b000000	 blne        HcdMdd_DestroyMemoryObject

; 449  : 
; 450  :     if (pPddObject)
; 451  :     {
; 452  : 
; 453  :         // Release SYSINTR
; 454  :         if (!KernelIoControl(IOCTL_HAL_RELEASE_SYSINTR, &pPddObject->dwSysIntr, sizeof(DWORD),
; 455  :             NULL, 0, NULL))

  0002c	e59f0070	 ldr         r0, [pc, #0x70]
  00030	e3a0e000	 mov         lr, #0
  00034	e3a03000	 mov         r3, #0
  00038	e3a02004	 mov         r2, #4
  0003c	e2841f86	 add         r1, r4, #0x86, 30
  00040	e58de004	 str         lr, [sp, #4]
  00044	e58de000	 str         lr, [sp]
  00048	eb000000	 bl          KernelIoControl

; 456  :         {
; 457  :             DEBUGMSG(ZONE_ERROR, (L"HcdPdd_Deinit: Failed to release SYSINTR for IRQ %d!\r\n",
; 458  :                 IRQ_USB0_INT));
; 459  :         }       
; 460  : 
; 461  :         if (pPddObject->pSysConfReg)

  0004c	e5943224	 ldr         r3, [r4, #0x224]
  00050	e3530000	 cmp         r3, #0

; 462  :             MmUnmapIoSpace(pPddObject->pSysConfReg, sizeof(OMAP_SYSC_GENERAL_REGS));

  00054	13a01ea6	 movne       r1, #0xA6, 28
  00058	11a00003	 movne       r0, r3
  0005c	1b000000	 blne        MmUnmapIoSpace

; 463  : 
; 464  :         if (pPddObject->ioCppiBase)

  00060	e5943214	 ldr         r3, [r4, #0x214]
  00064	e3530000	 cmp         r3, #0

; 465  :             MmUnmapIoSpace(pPddObject->ioCppiBase, sizeof(CSL_CppiRegs));

  00068	13a01c5e	 movne       r1, #0x5E, 24
  0006c	11a00003	 movne       r0, r3
  00070	1b000000	 blne        MmUnmapIoSpace

; 466  : 
; 467  :         if (pPddObject->ioPortBase)

  00074	e5943210	 ldr         r3, [r4, #0x210]
  00078	e3530000	 cmp         r3, #0
  0007c	13a02b02	 movne       r2, #2, 22

; 468  :             MmUnmapIoSpace(pPddObject->ioPortBase, sizeof(CSL_UsbRegs));

  00080	13821018	 orrne       r1, r2, #0x18
  00084	11a00003	 movne       r0, r3
  00088	1b000000	 blne        MmUnmapIoSpace

; 469  : 
; 470  :         delete pPddObject;

  0008c	e1a00004	 mov         r0, r4
  00090	eb000000	 bl          |??3@YAXPAX@Z|

; 471  :         pPddObject = NULL;
; 472  :     }
; 473  : 
; 474  :     return TRUE;

  00094	e3a00001	 mov         r0, #1

; 475  : }

  00098	e28dd008	 add         sp, sp, #8
  0009c	e8bd4010	 ldmia       sp!, {r4, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN13@HcdPdd_Dei|
  000a4		 |$LN14@HcdPdd_Dei|
  000a4	010100d8	 DCD         0x10100d8
  000a8		 |$M39006|

			 ENDP  ; |HcdPdd_Deinit|

	EXPORT	|HcdPdd_Open|

  00000			 AREA	 |.pdata|, PDATA
|$T39020| DCD	|$LN5@HcdPdd_Ope|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HcdPdd_Open| PROC

; 480  : {

  00000		 |$LN5@HcdPdd_Ope|
  00000		 |$M39017|

; 481  : 	UNREFERENCED_PARAMETER(AccessCode);
; 482  : 	UNREFERENCED_PARAMETER(ShareMode);
; 483  : 
; 484  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH: HcdPdd_Open:\r\n")));
; 485  :     return hDeviceContext;
; 486  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M39018|

			 ENDP  ; |HcdPdd_Open|

	EXPORT	|HcdPdd_Close|

  00000			 AREA	 |.pdata|, PDATA
|$T39029| DCD	|$LN5@HcdPdd_Clo|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HcdPdd_Close| PROC

; 489  : {

  00000		 |$LN5@HcdPdd_Clo|
  00000		 |$M39026|

; 490  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 491  : 
; 492  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH: HcdPdd_Close:\r\n")));
; 493  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 494  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M39027|

			 ENDP  ; |HcdPdd_Close|

	EXPORT	|HcdPdd_Read|

  00000			 AREA	 |.pdata|, PDATA
|$T39038| DCD	|$LN5@HcdPdd_Rea|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HcdPdd_Read| PROC

; 497  : {

  00000		 |$LN5@HcdPdd_Rea|
  00000		 |$M39035|

; 498  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 499  : 	UNREFERENCED_PARAMETER(pBuffer);
; 500  : 	UNREFERENCED_PARAMETER(Count);
; 501  : 
; 502  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH: HcdPdd_Read:\r\n")));
; 503  :     return (DWORD)-1;

  00000	e3e00000	 mvn         r0, #0

; 504  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M39036|

			 ENDP  ; |HcdPdd_Read|

	EXPORT	|HcdPdd_Write|

  00000			 AREA	 |.pdata|, PDATA
|$T39047| DCD	|$LN5@HcdPdd_Wri|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HcdPdd_Write| PROC

; 508  : {

  00000		 |$LN5@HcdPdd_Wri|
  00000		 |$M39044|

; 509  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 510  : 	UNREFERENCED_PARAMETER(pSourceBytes);
; 511  : 	UNREFERENCED_PARAMETER(NumberOfBytes);
; 512  : 
; 513  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH: HcdPdd_Write:\r\n")));
; 514  :     return (DWORD)-1;

  00000	e3e00000	 mvn         r0, #0

; 515  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M39045|

			 ENDP  ; |HcdPdd_Write|

	EXPORT	|HcdPdd_Seek|

  00000			 AREA	 |.pdata|, PDATA
|$T39056| DCD	|$LN5@HcdPdd_See|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HcdPdd_Seek| PROC

; 518  : {

  00000		 |$LN5@HcdPdd_See|
  00000		 |$M39053|

; 519  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 520  : 	UNREFERENCED_PARAMETER(Amount);
; 521  : 	UNREFERENCED_PARAMETER(Type);
; 522  : 
; 523  :     DEBUGMSG(ZONE_FUNCTION, (TEXT("USBH: HcdPdd_Seek:\r\n")));
; 524  :     return(DWORD)-1;

  00000	e3e00000	 mvn         r0, #0

; 525  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M39054|

			 ENDP  ; |HcdPdd_Seek|

	EXPORT	|HcdPdd_IOControl|
	IMPORT	|SetLastError|
	IMPORT	|__C_specific_handler|

  00000			 AREA	 |.pdata|, PDATA
|$T39124| DCD	|$LN83@HcdPdd_IOC|
	DCD	0xc0009204

  00000			 AREA	 |.pdata|, PDATA
|$T39126| DCD	|$LN40@HcdPdd_IOC|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T39128| DCD	|$LN47@HcdPdd_IOC|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T39130| DCD	|$LN61@HcdPdd_IOC|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T39132| DCD	|$LN54@HcdPdd_IOC|
	DCD	0x40000601

  00000			 AREA	 |.xdata|, DATA
|$T39122| DCD	0x4
	DCD	|$LN44@HcdPdd_IOC|
	DCD	|$LN45@HcdPdd_IOC|
	DCD	|$LN40@HcdPdd_IOC|
	DCD	|$LN41@HcdPdd_IOC|
	DCD	|$LN51@HcdPdd_IOC|
	DCD	|$LN52@HcdPdd_IOC|
	DCD	|$LN47@HcdPdd_IOC|
	DCD	|$LN48@HcdPdd_IOC|
	DCD	|$LN65@HcdPdd_IOC|
	DCD	|$LN66@HcdPdd_IOC|
	DCD	|$LN61@HcdPdd_IOC|
	DCD	|$LN62@HcdPdd_IOC|
	DCD	|$LN58@HcdPdd_IOC|
	DCD	|$LN59@HcdPdd_IOC|
	DCD	|$LN54@HcdPdd_IOC|
	DCD	|$LN55@HcdPdd_IOC|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T39122|

  00008		 |HcdPdd_IOControl| PROC

; 529  : {

  00008		 |$LN83@HcdPdd_IOC|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d58f0	 stmdb       sp!, {r4 - r7, r11, r12, lr}
  00010	e28db01c	 add         r11, sp, #0x1C
  00014	e24dd008	 sub         sp, sp, #8
  00018		 |$LN81@HcdPdd_IOC|
  00018	e1a05000	 mov         r5, r0

; 530  :     SOhcdPdd *pPddObject = (SOhcdPdd *)hOpenContext;
; 531  :     DWORD dwError = ERROR_INVALID_PARAMETER;
; 532  : 
; 533  : 	UNREFERENCED_PARAMETER(dwLenIn);
; 534  : 	UNREFERENCED_PARAMETER(pBufIn);
; 535  : 
; 536  :     DEBUGMSG(ZONE_FUNCTION, (_T("USBH: HcdPdd_IOControl: IOCTL:0x%x, InBuf:0x%x, InBufLen:%d, OutBuf:0x%x, OutBufLen:0x%x\r\n"),
; 537  :         dwCode, pBufIn, dwLenIn, pBufOut, dwLenOut));
; 538  : 
; 539  :     if (!pdwActualOut)

  0001c	e59b7008	 ldr         r7, [r11, #8]
  00020	e3a04057	 mov         r4, #0x57
  00024	e50b4024	 str         r4, [r11, #-0x24]
  00028	e3570000	 cmp         r7, #0
  0002c	0a00000d	 beq         |$Exit$38783|
  00030	e3a03832	 mov         r3, #0x32, 16

; 540  :         goto Exit;
; 541  : 
; 542  :     switch (dwCode)

  00034	e3833a01	 orr         r3, r3, #1, 20
  00038	e1510003	 cmp         r1, r3
  0003c	0a00005e	 beq         |$LN30@HcdPdd_IOC|
  00040	e59f3240	 ldr         r3, [pc, #0x240]
  00044	e1510003	 cmp         r1, r3
  00048	0a00004c	 beq         |$LN26@HcdPdd_IOC|
  0004c	e59f3230	 ldr         r3, [pc, #0x230]
  00050	e1510003	 cmp         r1, r3
  00054	0a00001f	 beq         |$LN14@HcdPdd_IOC|
  00058	e59f3220	 ldr         r3, [pc, #0x220]
  0005c	e1510003	 cmp         r1, r3
  00060	0a000006	 beq         |$LN22@HcdPdd_IOC|

; 697  :             {
; 698  :                 DEBUGMSG(ZONE_ERROR, (_T("HcdPdd_IOControl: exception in ioctl\r\n")));
; 699  :             }
; 700  :         }
; 701  : 
; 702  :         break;
; 703  : 
; 704  :     default:
; 705  :         DEBUGMSG(ZONE_WARNING, (_T("USBH: HcdPdd_IOControl: Unsupported IOCTL code %u\r\n"), dwCode));
; 706  :         dwError = ERROR_NOT_SUPPORTED;

  00064	e3a04032	 mov         r4, #0x32
  00068		 |$Exit$38783|

; 707  :     }
; 708  : 
; 709  : Exit:
; 710  :     // Pass back appropriate response codes
; 711  :     SetLastError(dwError);

  00068	e1a00004	 mov         r0, r4
  0006c	eb000000	 bl          SetLastError

; 712  : 
; 713  :     return (dwError == ERROR_SUCCESS);

  00070	e3540000	 cmp         r4, #0
  00074	1a000071	 bne         |$LN37@HcdPdd_IOC|
  00078	e3a00001	 mov         r0, #1
  0007c	ea000070	 b           |$LN38@HcdPdd_IOC|
  00080		 |$LN22@HcdPdd_IOC|

; 608  :             {
; 609  :                 DEBUGMSG(ZONE_ERROR, (_T("HcdPdd_IOControl: IOCTL_POWER_GET: exception in ioctl\r\n")));
; 610  :             }
; 611  :         }
; 612  : 
; 613  :         break;
; 614  : 
; 615  :     case IOCTL_POWER_QUERY:
; 616  : 
; 617  :         if ((pBufOut != NULL) && (dwLenOut >= sizeof(CEDEVICE_POWER_STATE)))

  00080	e59b2000	 ldr         r2, [r11]
  00084	e3520000	 cmp         r2, #0
  00088	0afffff6	 beq         |$Exit$38783|
  0008c	e59b3004	 ldr         r3, [r11, #4]
  00090	e3530004	 cmp         r3, #4
  00094	3afffff3	 bcc         |$Exit$38783|
  00098		 |$LN58@HcdPdd_IOC|

; 618  :         {
; 619  :             __try
; 620  :             {
; 621  :                 CEDEVICE_POWER_STATE NewDx = (*(PCEDEVICE_POWER_STATE)pBufOut);

  00098	e5923000	 ldr         r3, [r2]
  0009c	e3530000	 cmp         r3, #0

; 622  : 
; 623  :                 switch(NewDx)

  000a0	0a000005	 beq         |$LN17@HcdPdd_IOC|
  000a4	e3530002	 cmp         r3, #2
  000a8	da000001	 ble         |$LN16@HcdPdd_IOC|
  000ac	e3530004	 cmp         r3, #4
  000b0	da000001	 ble         |$LN17@HcdPdd_IOC|
  000b4		 |$LN16@HcdPdd_IOC|

; 624  :                 {
; 625  :                 case D0:
; 626  :                 case D3:
; 627  :                 case D4:
; 628  :                     break;
; 629  : 
; 630  :                 default:
; 631  :                     (*(PCEDEVICE_POWER_STATE)pBufOut) = PwrDeviceUnspecified;

  000b4	e3e03000	 mvn         r3, #0
  000b8	e5823000	 str         r3, [r2]
  000bc		 |$LN17@HcdPdd_IOC|

; 632  :                 }
; 633  : 
; 634  :                 if (pdwActualOut)
; 635  :                     (*pdwActualOut) = sizeof(CEDEVICE_POWER_STATE);

  000bc	e3a03004	 mov         r3, #4
  000c0	e5873000	 str         r3, [r7]

; 636  : 
; 637  :                 dwError = ERROR_SUCCESS;

  000c4	e3a04000	 mov         r4, #0
  000c8	e50b4024	 str         r4, [r11, #-0x24]
  000cc		 |$LN59@HcdPdd_IOC|

; 638  : 
; 639  :                 DEBUGMSG(ZONE_VERBOSE, (_T("HcdPdd_IOControl: IOCTL_POWER_QUERY %u %s\r\n"),
; 640  :                     NewDx, dwError == ERROR_SUCCESS ? _T("succeeded") : _T("failed")));
; 641  :             }

  000cc	eaffffe5	 b           |$Exit$38783|
  000d0		 |$LN55@HcdPdd_IOC|

; 642  :             __except(EXCEPTION_EXECUTE_HANDLER)

  000d0	e51b4024	 ldr         r4, [r11, #-0x24]
  000d4	eaffffe3	 b           |$Exit$38783|
  000d8		 |$LN14@HcdPdd_IOC|

; 643  :             {
; 644  :                 DEBUGMSG(ZONE_ERROR, (_T("HcdPdd_IOControl: IOCTL_POWER_QUERY: exception in ioctl\r\n")));
; 645  :             }
; 646  :         }
; 647  : 
; 648  :         break;
; 649  : 
; 650  :     case IOCTL_POWER_SET:
; 651  : 
; 652  :         if ((pBufOut != NULL) && (dwLenOut >= sizeof(CEDEVICE_POWER_STATE)))

  000d8	e59b6000	 ldr         r6, [r11]
  000dc	e3560000	 cmp         r6, #0
  000e0	0affffe0	 beq         |$Exit$38783|
  000e4	e59b3004	 ldr         r3, [r11, #4]
  000e8	e3530004	 cmp         r3, #4
  000ec	3affffdd	 bcc         |$Exit$38783|
  000f0		 |$LN65@HcdPdd_IOC|

; 653  :         {
; 654  :             __try
; 655  :             {
; 656  :                 CEDEVICE_POWER_STATE NewDx = (*(PCEDEVICE_POWER_STATE)pBufOut);

  000f0	e5963000	 ldr         r3, [r6]

; 657  : 
; 658  :                 if (VALID_DX(NewDx))

  000f4	e3530004	 cmp         r3, #4
  000f8	8a00001d	 bhi         |$LN66@HcdPdd_IOC|

; 659  :                 {
; 660  :                     switch(NewDx)

  000fc	e3530000	 cmp         r3, #0
  00100	0a000006	 beq         |$LN8@HcdPdd_IOC|
  00104	da000006	 ble         |$LN9@HcdPdd_IOC|
  00108	e3530003	 cmp         r3, #3
  0010c	da000002	 ble         |$LN7@HcdPdd_IOC|
  00110	e3530004	 cmp         r3, #4
  00114	0a000001	 beq         |$LN8@HcdPdd_IOC|
  00118	ea000001	 b           |$LN9@HcdPdd_IOC|
  0011c		 |$LN7@HcdPdd_IOC|

; 665  :                         break;
; 666  : 
; 667  :                     case D1:
; 668  :                     case D2:
; 669  :                     case D3:
; 670  :                         pPddObject->CurrentDx = D3;

  0011c	e3a03003	 mov         r3, #3
  00120		 |$LN8@HcdPdd_IOC|

; 661  :                     {
; 662  :                     case D0:
; 663  :                     case D4:
; 664  :                         pPddObject->CurrentDx = NewDx;

  00120	e5853220	 str         r3, [r5, #0x220]
  00124		 |$LN9@HcdPdd_IOC|

; 671  :                         break;
; 672  :                     }
; 673  : 
; 674  :                     if (pPddObject->CurrentDx == D3 || pPddObject->CurrentDx == D4)

  00124	e5953220	 ldr         r3, [r5, #0x220]
  00128	e3530003	 cmp         r3, #3
  0012c	0a000001	 beq         |$LN5@HcdPdd_IOC|
  00130	e3530004	 cmp         r3, #4
  00134	1a000001	 bne         |$LN68@HcdPdd_IOC|
  00138		 |$LN5@HcdPdd_IOC|

; 675  :                     {
; 676  :                         HcdPdd_PowerDown((DWORD)pPddObject);

  00138	e5950004	 ldr         r0, [r5, #4]
  0013c	eb000000	 bl          HcdMdd_PowerDown
  00140		 |$LN68@HcdPdd_IOC|

; 677  :                     }
; 678  : 
; 679  :                     if ((dwError = HcdPdd_SetDevicePower(pPddObject)) == ERROR_SUCCESS)

  00140	e1a00005	 mov         r0, r5
  00144	eb000000	 bl          |?HcdPdd_SetDevicePower@@YAKPAU_SOhcdPdd@@@Z|
  00148	e1b04000	 movs        r4, r0
  0014c	e50b4024	 str         r4, [r11, #-0x24]
  00150	1a000007	 bne         |$LN66@HcdPdd_IOC|

; 680  :                     {
; 681  :                         if (pPddObject->CurrentDx == D0)

  00154	e5953220	 ldr         r3, [r5, #0x220]
  00158	e3530000	 cmp         r3, #0

; 682  :                         {
; 683  :                             HcdPdd_PowerUp((DWORD)pPddObject);

  0015c	05950004	 ldreq       r0, [r5, #4]
  00160	0b000000	 bleq        HcdMdd_PowerUp

; 684  :                         }
; 685  : 
; 686  :                         *(PCEDEVICE_POWER_STATE)pBufOut = pPddObject->CurrentDx;

  00164	e5953220	 ldr         r3, [r5, #0x220]

; 687  : 
; 688  :                         if (pdwActualOut)
; 689  :                             (*pdwActualOut) = sizeof(CEDEVICE_POWER_STATE);

  00168	e3a02004	 mov         r2, #4
  0016c	e5863000	 str         r3, [r6]
  00170	e5872000	 str         r2, [r7]
  00174		 |$LN66@HcdPdd_IOC|

; 690  :                     }
; 691  :                 }
; 692  : 
; 693  :                 DEBUGMSG(ZONE_VERBOSE, (_T("HcdPdd_IOControl: IOCTL_POWER_SET %u %s; passing back %u\r\n"),
; 694  :                     NewDx, dwError == ERROR_SUCCESS ? _T("succeeded") : _T("failed"), NewDx));
; 695  :             }

  00174	eaffffbb	 b           |$Exit$38783|
  00178		 |$LN62@HcdPdd_IOC|

; 696  :             __except(EXCEPTION_EXECUTE_HANDLER)

  00178	e51b4024	 ldr         r4, [r11, #-0x24]
  0017c	eaffffb9	 b           |$Exit$38783|
  00180		 |$LN26@HcdPdd_IOC|

; 584  :             {
; 585  :                 DEBUGMSG(ZONE_ERROR, (_T("HcdPdd_IOControl: IOCTL_POWER_CAPABILITIES: exception in ioctl\r\n")));
; 586  :             }
; 587  :         }
; 588  : 
; 589  :         break;
; 590  : 
; 591  :     case IOCTL_POWER_GET:
; 592  : 
; 593  :         if ((pBufOut != NULL) && (dwLenOut >= sizeof(CEDEVICE_POWER_STATE)))

  00180	e59b2000	 ldr         r2, [r11]
  00184	e3520000	 cmp         r2, #0
  00188	0affffb6	 beq         |$Exit$38783|
  0018c	e59b3004	 ldr         r3, [r11, #4]
  00190	e3530004	 cmp         r3, #4
  00194	3affffb3	 bcc         |$Exit$38783|
  00198		 |$LN51@HcdPdd_IOC|

; 594  :         {
; 595  :             __try
; 596  :             {
; 597  :                 (*(PCEDEVICE_POWER_STATE)pBufOut) = pPddObject->CurrentDx;

  00198	e5953220	 ldr         r3, [r5, #0x220]

; 598  : 
; 599  :                 if (pdwActualOut)
; 600  :                     (*pdwActualOut) = sizeof(CEDEVICE_POWER_STATE);

  0019c	e3a01004	 mov         r1, #4
  001a0	e5823000	 str         r3, [r2]
  001a4	e5871000	 str         r1, [r7]

; 601  : 
; 602  :                 dwError = ERROR_SUCCESS;

  001a8	e3a04000	 mov         r4, #0
  001ac	e50b4024	 str         r4, [r11, #-0x24]
  001b0		 |$LN52@HcdPdd_IOC|

; 603  : 
; 604  :                 DEBUGMSG(ZONE_VERBOSE, (_T("HcdPdd_IOControl: IOCTL_POWER_GET %s; passing back %u\r\n"),
; 605  :                     dwError == ERROR_SUCCESS ? _T("succeeded") : _T("failed"), pPddObject->CurrentDx));
; 606  :             }

  001b0	eaffffac	 b           |$Exit$38783|
  001b4		 |$LN48@HcdPdd_IOC|

; 607  :             __except(EXCEPTION_EXECUTE_HANDLER)

  001b4	e51b4024	 ldr         r4, [r11, #-0x24]
  001b8	eaffffaa	 b           |$Exit$38783|
  001bc		 |$LN30@HcdPdd_IOC|

; 543  :     {
; 544  :     case IOCTL_POWER_CAPABILITIES:
; 545  : 
; 546  :         if ((pBufOut != NULL) && (dwLenOut >= sizeof(POWER_CAPABILITIES)))

  001bc	e59b2000	 ldr         r2, [r11]
  001c0	e3520000	 cmp         r2, #0
  001c4	0affffa7	 beq         |$Exit$38783|
  001c8	e59b3004	 ldr         r3, [r11, #4]
  001cc	e3530030	 cmp         r3, #0x30
  001d0	3affffa4	 bcc         |$Exit$38783|
  001d4		 |$LN44@HcdPdd_IOC|

; 547  :         {
; 548  :             __try
; 549  :             {
; 550  :                 PPOWER_CAPABILITIES pPC = (PPOWER_CAPABILITIES) pBufOut;
; 551  : 
; 552  :                 //  set power consumption ( in mW)
; 553  :                 pPC->Power[D0] = 0;

  001d4	e3a04000	 mov         r4, #0
  001d8	e5824004	 str         r4, [r2, #4]

; 554  :                 pPC->Power[D1] = (DWORD)PwrDeviceUnspecified;

  001dc	e3e03000	 mvn         r3, #0
  001e0	e5823008	 str         r3, [r2, #8]

; 555  :                 pPC->Power[D2] = (DWORD)PwrDeviceUnspecified;

  001e4	e582300c	 str         r3, [r2, #0xC]

; 556  :                 pPC->Power[D3] = 0;

  001e8	e5824010	 str         r4, [r2, #0x10]

; 557  :                 pPC->Power[D4] = 0;

  001ec	e5824014	 str         r4, [r2, #0x14]

; 558  : 
; 559  :                 //  set latency ( time to return to D0 in ms )
; 560  :                 pPC->Latency[D0] = 0;

  001f0	e5824018	 str         r4, [r2, #0x18]

; 561  :                 pPC->Latency[D1] = (DWORD)PwrDeviceUnspecified;

  001f4	e582301c	 str         r3, [r2, #0x1C]

; 562  :                 pPC->Latency[D2] = (DWORD)PwrDeviceUnspecified;

  001f8	e5823020	 str         r3, [r2, #0x20]

; 563  :                 pPC->Latency[D3] = 20;

  001fc	e3a03014	 mov         r3, #0x14
  00200	e5823024	 str         r3, [r2, #0x24]

; 564  :                 pPC->Latency[D4] = 100;

  00204	e3a03064	 mov         r3, #0x64
  00208	e5823028	 str         r3, [r2, #0x28]

; 565  : 
; 566  :                 //  set device wake caps (BITMASK)
; 567  :                 pPC->WakeFromDx = 0;

  0020c	e5c24001	 strb        r4, [r2, #1]

; 568  : 
; 569  :                 //  set inrush (BITMASK)
; 570  :                 pPC->InrushDx = 0;

  00210	e5c24002	 strb        r4, [r2, #2]

; 571  : 
; 572  :                 //  set supported device states (BITMASK)
; 573  :                 pPC->DeviceDx = 0x19;   // support D0, D3, D4 (no D1, D2)

  00214	e3a03019	 mov         r3, #0x19
  00218	e5c23000	 strb        r3, [r2]

; 574  : 
; 575  :                 // set flags
; 576  :                 pPC->Flags = 0;

  0021c	e582402c	 str         r4, [r2, #0x2C]

; 577  : 
; 578  :                 if (pdwActualOut)
; 579  :                     (*pdwActualOut) = sizeof(*pPC);

  00220	e3a03030	 mov         r3, #0x30
  00224	e5873000	 str         r3, [r7]

; 580  : 
; 581  :                 dwError = ERROR_SUCCESS;

  00228	e50b4024	 str         r4, [r11, #-0x24]
  0022c		 |$LN45@HcdPdd_IOC|

; 582  :             }

  0022c	eaffff8d	 b           |$Exit$38783|
  00230		 |$LN41@HcdPdd_IOC|

; 583  :             __except(EXCEPTION_EXECUTE_HANDLER)

  00230	e51b4024	 ldr         r4, [r11, #-0x24]
  00234	eaffff8b	 b           |$Exit$38783|
  00238		 |$LN80@HcdPdd_IOC|

; 712  : 
; 713  :     return (dwError == ERROR_SUCCESS);

  00238	e51b0020	 ldr         r0, [r11, #-0x20]
  0023c	ea000000	 b           |$LN38@HcdPdd_IOC|
  00240		 |$LN37@HcdPdd_IOC|
  00240	e3a00000	 mov         r0, #0
  00244		 |$LN38@HcdPdd_IOC|

; 714  : }

  00244	e24bd01c	 sub         sp, r11, #0x1C
  00248	e89d68f0	 ldmia       sp, {r4 - r7, r11, sp, lr}
  0024c	e12fff1e	 bx          lr

			 ENDP  ; |HcdPdd_IOControl|

  00250		 |$LN40@HcdPdd_IOC|
  00250		 |$LN82@HcdPdd_IOC|

; 583  :             __except(EXCEPTION_EXECUTE_HANDLER)

  00250	e52de004	 str         lr, [sp, #-4]!
  00254		 |$LN43@HcdPdd_IOC|
  00254		 |$LN88@HcdPdd_IOC|
  00254	e3a00001	 mov         r0, #1
  00258		 |$LN42@HcdPdd_IOC|
  00258	e49df004	 ldr         pc, [sp], #4
  0025c		 |$LN89@HcdPdd_IOC|
  0025c		 |$LN47@HcdPdd_IOC|
  0025c		 |$LN84@HcdPdd_IOC|

; 607  :             __except(EXCEPTION_EXECUTE_HANDLER)

  0025c	e52de004	 str         lr, [sp, #-4]!
  00260		 |$LN50@HcdPdd_IOC|
  00260		 |$LN90@HcdPdd_IOC|
  00260	e3a00001	 mov         r0, #1
  00264		 |$LN49@HcdPdd_IOC|
  00264	e49df004	 ldr         pc, [sp], #4
  00268		 |$LN91@HcdPdd_IOC|
  00268		 |$LN61@HcdPdd_IOC|
  00268		 |$LN85@HcdPdd_IOC|

; 696  :             __except(EXCEPTION_EXECUTE_HANDLER)

  00268	e52de004	 str         lr, [sp, #-4]!
  0026c		 |$LN64@HcdPdd_IOC|
  0026c		 |$LN92@HcdPdd_IOC|
  0026c	e3a00001	 mov         r0, #1
  00270		 |$LN63@HcdPdd_IOC|
  00270	e49df004	 ldr         pc, [sp], #4
  00274		 |$LN93@HcdPdd_IOC|
  00274		 |$LN54@HcdPdd_IOC|
  00274		 |$LN86@HcdPdd_IOC|

; 642  :             __except(EXCEPTION_EXECUTE_HANDLER)

  00274	e52de004	 str         lr, [sp, #-4]!
  00278		 |$LN57@HcdPdd_IOC|
  00278		 |$LN94@HcdPdd_IOC|
  00278	e3a00001	 mov         r0, #1
  0027c		 |$LN56@HcdPdd_IOC|
  0027c	e49df004	 ldr         pc, [sp], #4
  00280		 |$LN96@HcdPdd_IOC|
  00280		 |$LN97@HcdPdd_IOC|
  00280	0032100c	 DCD         0x32100c
  00284		 |$LN98@HcdPdd_IOC|
  00284	00321008	 DCD         0x321008
  00288		 |$LN99@HcdPdd_IOC|
  00288	00321004	 DCD         0x321004
  0028c		 |$LN95@HcdPdd_IOC|
  0028c		 |$LN87@HcdPdd_IOC|
	EXPORT	|HcdPdd_InitiatePowerUp|

  00000			 AREA	 |.pdata|, PDATA
|$T39156| DCD	|$LN5@HcdPdd_Ini@2|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HcdPdd_InitiatePowerUp| PROC

; 719  : {

  00000		 |$LN5@HcdPdd_Ini@2|
  00000		 |$M39153|

; 720  :     DEBUGMSG(ZONE_FUNCTION, (_T("USBH: HcdPdd_InitiatePowerUp:\r\n")));
; 721  :     return;
; 722  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M39154|

			 ENDP  ; |HcdPdd_InitiatePowerUp|

	END
