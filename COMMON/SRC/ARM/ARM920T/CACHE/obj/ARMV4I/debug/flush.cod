; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\ARM\ARM920T\CACHE\flush.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1CM@BMDDLKDO@?$AA?9?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@FFFKHHBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|OEMCacheRangeFlush|
	IMPORT	|OALClearDTLB|
	IMPORT	|OALClearDTLBEntry|
	IMPORT	|OALClearITLB|
	IMPORT	|OALClearITLBEntry|
	IMPORT	|OALFlushICacheLines|
	IMPORT	|OALFlushICache|
	IMPORT	|OALCleanDCacheLines|
	IMPORT	|OALCleanDCache|
	IMPORT	|OALFlushDCacheLines|
	IMPORT	|g_oalCacheInfo|
	IMPORT	|OALFlushDCache|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T40230| DCD	|$LN34@OEMCacheRa|
	DCD	0x4000b304
; File c:\wince600\platform\common\src\arm\arm920t\cache\flush.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@BMDDLKDO@?$AA?9?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "C", 0x0, "a", 0x0, "c"
	DCB	0x0, "h", 0x0, "e", 0x0, "R", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, "F", 0x0, "l", 0x0, "u", 0x0, "s", 0x0, "h"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@FFFKHHBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "C", 0x0, "a", 0x0, "c"
	DCB	0x0, "h", 0x0, "e", 0x0, "R", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, "F", 0x0, "l", 0x0, "u", 0x0, "s", 0x0, "h"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMCacheRangeFlush| PROC

; 53   : {

  00000		 |$LN34@OEMCacheRa|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd020	 sub         sp, sp, #0x20
  00010		 |$M40227|

; 54   :     OALMSG(OAL_CACHE&&OAL_VERBOSE, (
; 55   :         L"+OEMCacheRangeFlush(0x%08x, %d, 0x%08x)\r\n", pAddress, length, flags
; 56   :     ));

  00010	e59f32a8	 ldr         r3, [pc, #0x2A8]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130020	 tst         r3, #0x20
  0001c	0a00000b	 beq         |$LN28@OEMCacheRa|
  00020	e59f3298	 ldr         r3, [pc, #0x298]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130902	 tst         r3, #2, 18
  0002c	0a000007	 beq         |$LN28@OEMCacheRa|
  00030	e59d3030	 ldr         r3, [sp, #0x30]
  00034	e59d202c	 ldr         r2, [sp, #0x2C]
  00038	e59d1028	 ldr         r1, [sp, #0x28]
  0003c	e59f0284	 ldr         r0, [pc, #0x284]
  00040	eb000000	 bl          NKDbgPrintfW
  00044	e3a03001	 mov         r3, #1
  00048	e58d3018	 str         r3, [sp, #0x18]
  0004c	ea000001	 b           |$LN29@OEMCacheRa|
  00050		 |$LN28@OEMCacheRa|
  00050	e3a03000	 mov         r3, #0
  00054	e58d3018	 str         r3, [sp, #0x18]
  00058		 |$LN29@OEMCacheRa|

; 57   : 
; 58   :     if ((flags & CACHE_SYNC_DISCARD) != 0) {

  00058	e59d3030	 ldr         r3, [sp, #0x30]
  0005c	e3130001	 tst         r3, #1
  00060	0a000021	 beq         |$LN25@OEMCacheRa|

; 59   :         // Write back and invalidate the selected portions of the data cache
; 60   :         if (length == 0) {

  00064	e59d302c	 ldr         r3, [sp, #0x2C]
  00068	e3530000	 cmp         r3, #0
  0006c	1a000004	 bne         |$LN24@OEMCacheRa|

; 61   :             if (pAddress == NULL) OALFlushDCache();

  00070	e59d3028	 ldr         r3, [sp, #0x28]
  00074	e3530000	 cmp         r3, #0
  00078	1a000000	 bne         |$LN23@OEMCacheRa|
  0007c	eb000000	 bl          OALFlushDCache
  00080		 |$LN23@OEMCacheRa|

; 62   :         } else {

  00080	ea000018	 b           |$LN22@OEMCacheRa|
  00084		 |$LN24@OEMCacheRa|

; 63   :             // Normalize address to cache line alignment
; 64   :             UINT32 mask = g_oalCacheInfo.L1DLineSize - 1;

  00084	e59f3238	 ldr         r3, [pc, #0x238]
  00088	e593301c	 ldr         r3, [r3, #0x1C]
  0008c	e2433001	 sub         r3, r3, #1
  00090	e58d3000	 str         r3, [sp]

; 65   :             UINT32 address = (UINT32)pAddress & ~mask;

  00094	e59d3000	 ldr         r3, [sp]
  00098	e1e02003	 mvn         r2, r3
  0009c	e59d3028	 ldr         r3, [sp, #0x28]
  000a0	e0033002	 and         r3, r3, r2
  000a4	e58d3004	 str         r3, [sp, #4]

; 66   :             // Adjust size to reflect cache line alignment
; 67   :             length += (UINT32)pAddress - address;

  000a8	e59d2028	 ldr         r2, [sp, #0x28]
  000ac	e59d3004	 ldr         r3, [sp, #4]
  000b0	e0422003	 sub         r2, r2, r3
  000b4	e59d302c	 ldr         r3, [sp, #0x2C]
  000b8	e0833002	 add         r3, r3, r2
  000bc	e58d302c	 str         r3, [sp, #0x2C]

; 68   :             // If range is bigger than cache size flush all
; 69   :             if (length >= g_oalCacheInfo.L1DSize) {

  000c0	e59d202c	 ldr         r2, [sp, #0x2C]
  000c4	e59f31f8	 ldr         r3, [pc, #0x1F8]
  000c8	e5933020	 ldr         r3, [r3, #0x20]
  000cc	e1520003	 cmp         r2, r3
  000d0	3a000001	 bcc         |$LN21@OEMCacheRa|

; 70   :                 OALFlushDCache();

  000d4	eb000000	 bl          OALFlushDCache

; 71   :             } else {                

  000d8	ea000002	 b           |$LN20@OEMCacheRa|
  000dc		 |$LN21@OEMCacheRa|

; 72   :                 // Flush all the indicated cache entries
; 73   :                 OALFlushDCacheLines((VOID*)address, length);

  000dc	e59d102c	 ldr         r1, [sp, #0x2C]
  000e0	e59d0004	 ldr         r0, [sp, #4]
  000e4	eb000000	 bl          OALFlushDCacheLines
  000e8		 |$LN20@OEMCacheRa|
  000e8		 |$LN22@OEMCacheRa|

; 74   :             }                
; 75   :         }

  000e8	ea000023	 b           |$LN19@OEMCacheRa|
  000ec		 |$LN25@OEMCacheRa|

; 76   :     } else if ((flags & CACHE_SYNC_WRITEBACK) != 0) {

  000ec	e59d3030	 ldr         r3, [sp, #0x30]
  000f0	e3130004	 tst         r3, #4
  000f4	0a000020	 beq         |$LN18@OEMCacheRa|

; 77   :         // Write back the selected portion of the data cache
; 78   :         if (length == 0) {

  000f8	e59d302c	 ldr         r3, [sp, #0x2C]
  000fc	e3530000	 cmp         r3, #0
  00100	1a000004	 bne         |$LN17@OEMCacheRa|

; 79   :             if (pAddress == NULL) OALCleanDCache();

  00104	e59d3028	 ldr         r3, [sp, #0x28]
  00108	e3530000	 cmp         r3, #0
  0010c	1a000000	 bne         |$LN16@OEMCacheRa|
  00110	eb000000	 bl          OALCleanDCache
  00114		 |$LN16@OEMCacheRa|

; 80   :         } else {

  00114	ea000018	 b           |$LN15@OEMCacheRa|
  00118		 |$LN17@OEMCacheRa|

; 81   :             // Normalize address to cache line alignment
; 82   :             UINT32 mask = g_oalCacheInfo.L1DLineSize - 1;

  00118	e59f31a4	 ldr         r3, [pc, #0x1A4]
  0011c	e593301c	 ldr         r3, [r3, #0x1C]
  00120	e2433001	 sub         r3, r3, #1
  00124	e58d3008	 str         r3, [sp, #8]

; 83   :             UINT32 address = (UINT32)pAddress & ~mask;

  00128	e59d3008	 ldr         r3, [sp, #8]
  0012c	e1e02003	 mvn         r2, r3
  00130	e59d3028	 ldr         r3, [sp, #0x28]
  00134	e0033002	 and         r3, r3, r2
  00138	e58d300c	 str         r3, [sp, #0xC]

; 84   :             // Adjust size to reflect cache line alignment
; 85   :             length += (UINT32)pAddress - address;

  0013c	e59d2028	 ldr         r2, [sp, #0x28]
  00140	e59d300c	 ldr         r3, [sp, #0xC]
  00144	e0422003	 sub         r2, r2, r3
  00148	e59d302c	 ldr         r3, [sp, #0x2C]
  0014c	e0833002	 add         r3, r3, r2
  00150	e58d302c	 str         r3, [sp, #0x2C]

; 86   :             // If range is bigger than cache size clean all
; 87   :             if (length >= g_oalCacheInfo.L1DSize) {

  00154	e59d202c	 ldr         r2, [sp, #0x2C]
  00158	e59f3164	 ldr         r3, [pc, #0x164]
  0015c	e5933020	 ldr         r3, [r3, #0x20]
  00160	e1520003	 cmp         r2, r3
  00164	3a000001	 bcc         |$LN14@OEMCacheRa|

; 88   :                 OALCleanDCache();

  00168	eb000000	 bl          OALCleanDCache

; 89   :             } else {                

  0016c	ea000002	 b           |$LN13@OEMCacheRa|
  00170		 |$LN14@OEMCacheRa|

; 90   :                 // Flush all the indicated cache entries
; 91   :                 OALCleanDCacheLines((VOID*)address, length);

  00170	e59d102c	 ldr         r1, [sp, #0x2C]
  00174	e59d000c	 ldr         r0, [sp, #0xC]
  00178	eb000000	 bl          OALCleanDCacheLines
  0017c		 |$LN13@OEMCacheRa|
  0017c		 |$LN15@OEMCacheRa|
  0017c		 |$LN18@OEMCacheRa|
  0017c		 |$LN19@OEMCacheRa|

; 92   :             }                
; 93   :         }
; 94   :     }
; 95   :     
; 96   :     if ((flags & CACHE_SYNC_INSTRUCTIONS) != 0) {

  0017c	e59d3030	 ldr         r3, [sp, #0x30]
  00180	e3130002	 tst         r3, #2
  00184	0a000020	 beq         |$LN12@OEMCacheRa|

; 97   :         if (length == 0) {

  00188	e59d302c	 ldr         r3, [sp, #0x2C]
  0018c	e3530000	 cmp         r3, #0
  00190	1a000004	 bne         |$LN11@OEMCacheRa|

; 98   :             if (pAddress == NULL) OALFlushICache();

  00194	e59d3028	 ldr         r3, [sp, #0x28]
  00198	e3530000	 cmp         r3, #0
  0019c	1a000000	 bne         |$LN10@OEMCacheRa|
  001a0	eb000000	 bl          OALFlushICache
  001a4		 |$LN10@OEMCacheRa|

; 99   :         } else {

  001a4	ea000018	 b           |$LN9@OEMCacheRa|
  001a8		 |$LN11@OEMCacheRa|

; 100  :             // Normalize address to cache line alignment
; 101  :             UINT32 mask = g_oalCacheInfo.L1ILineSize - 1;

  001a8	e59f3114	 ldr         r3, [pc, #0x114]
  001ac	e593300c	 ldr         r3, [r3, #0xC]
  001b0	e2433001	 sub         r3, r3, #1
  001b4	e58d3010	 str         r3, [sp, #0x10]

; 102  :             UINT32 address = (UINT32)pAddress & ~mask;

  001b8	e59d3010	 ldr         r3, [sp, #0x10]
  001bc	e1e02003	 mvn         r2, r3
  001c0	e59d3028	 ldr         r3, [sp, #0x28]
  001c4	e0033002	 and         r3, r3, r2
  001c8	e58d3014	 str         r3, [sp, #0x14]

; 103  :             length += (UINT32)pAddress - address;

  001cc	e59d2028	 ldr         r2, [sp, #0x28]
  001d0	e59d3014	 ldr         r3, [sp, #0x14]
  001d4	e0422003	 sub         r2, r2, r3
  001d8	e59d302c	 ldr         r3, [sp, #0x2C]
  001dc	e0833002	 add         r3, r3, r2
  001e0	e58d302c	 str         r3, [sp, #0x2C]

; 104  :             if (length >= g_oalCacheInfo.L1ISize) {

  001e4	e59d202c	 ldr         r2, [sp, #0x2C]
  001e8	e59f30d4	 ldr         r3, [pc, #0xD4]
  001ec	e5933010	 ldr         r3, [r3, #0x10]
  001f0	e1520003	 cmp         r2, r3
  001f4	3a000001	 bcc         |$LN8@OEMCacheRa|

; 105  :                 OALFlushICache();

  001f8	eb000000	 bl          OALFlushICache

; 106  :             } else {        

  001fc	ea000002	 b           |$LN7@OEMCacheRa|
  00200		 |$LN8@OEMCacheRa|

; 107  :                 OALFlushICacheLines((VOID*)address, length);

  00200	e59d102c	 ldr         r1, [sp, #0x2C]
  00204	e59d0014	 ldr         r0, [sp, #0x14]
  00208	eb000000	 bl          OALFlushICacheLines
  0020c		 |$LN7@OEMCacheRa|
  0020c		 |$LN9@OEMCacheRa|
  0020c		 |$LN12@OEMCacheRa|

; 108  :             }                
; 109  :         }
; 110  :     }
; 111  : 
; 112  :     if ((flags & CACHE_SYNC_FLUSH_I_TLB) != 0) {

  0020c	e59d3030	 ldr         r3, [sp, #0x30]
  00210	e3130008	 tst         r3, #8
  00214	0a000009	 beq         |$LN6@OEMCacheRa|

; 113  :         if (length == PAGE_SIZE) {

  00218	e3e03b0d	 mvn         r3, #0xD, 22
  0021c	e22330fb	 eor         r3, r3, #0xFB
  00220	e59d202c	 ldr         r2, [sp, #0x2C]
  00224	e5933000	 ldr         r3, [r3]
  00228	e1520003	 cmp         r2, r3
  0022c	1a000002	 bne         |$LN5@OEMCacheRa|

; 114  :             // flush one TLB entry
; 115  :             OALClearITLBEntry(pAddress);

  00230	e59d0028	 ldr         r0, [sp, #0x28]
  00234	eb000000	 bl          OALClearITLBEntry

; 116  :         } else {

  00238	ea000000	 b           |$LN4@OEMCacheRa|
  0023c		 |$LN5@OEMCacheRa|

; 117  :             // flush the whole TLB
; 118  :             OALClearITLB();

  0023c	eb000000	 bl          OALClearITLB
  00240		 |$LN4@OEMCacheRa|
  00240		 |$LN6@OEMCacheRa|

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     if ((flags & CACHE_SYNC_FLUSH_D_TLB) != 0) {

  00240	e59d3030	 ldr         r3, [sp, #0x30]
  00244	e3130010	 tst         r3, #0x10
  00248	0a000009	 beq         |$LN3@OEMCacheRa|

; 123  :         // check first for TLB updates forced by paging
; 124  :         if (length == PAGE_SIZE) {

  0024c	e3e03b0d	 mvn         r3, #0xD, 22
  00250	e22330fb	 eor         r3, r3, #0xFB
  00254	e59d202c	 ldr         r2, [sp, #0x2C]
  00258	e5933000	 ldr         r3, [r3]
  0025c	e1520003	 cmp         r2, r3
  00260	1a000002	 bne         |$LN2@OEMCacheRa|

; 125  :             // flush one TLB entry
; 126  :             OALClearDTLBEntry(pAddress);

  00264	e59d0028	 ldr         r0, [sp, #0x28]
  00268	eb000000	 bl          OALClearDTLBEntry

; 127  :         } else {

  0026c	ea000000	 b           |$LN1@OEMCacheRa|
  00270		 |$LN2@OEMCacheRa|

; 128  :             // flush the whole TLB
; 129  :             OALClearDTLB();

  00270	eb000000	 bl          OALClearDTLB
  00274		 |$LN1@OEMCacheRa|
  00274		 |$LN3@OEMCacheRa|

; 130  :         }
; 131  :     }
; 132  : 
; 133  :     OALMSG(OAL_CACHE&&OAL_VERBOSE, (L"-OEMCacheRangeFlush\r\n"));

  00274	e59f3044	 ldr         r3, [pc, #0x44]
  00278	e5933440	 ldr         r3, [r3, #0x440]
  0027c	e3130020	 tst         r3, #0x20
  00280	0a000008	 beq         |$LN30@OEMCacheRa|
  00284	e59f3034	 ldr         r3, [pc, #0x34]
  00288	e5933440	 ldr         r3, [r3, #0x440]
  0028c	e3130902	 tst         r3, #2, 18
  00290	0a000004	 beq         |$LN30@OEMCacheRa|
  00294	e59f0020	 ldr         r0, [pc, #0x20]
  00298	eb000000	 bl          NKDbgPrintfW
  0029c	e3a03001	 mov         r3, #1
  002a0	e58d301c	 str         r3, [sp, #0x1C]
  002a4	ea000001	 b           |$LN31@OEMCacheRa|
  002a8		 |$LN30@OEMCacheRa|
  002a8	e3a03000	 mov         r3, #0
  002ac	e58d301c	 str         r3, [sp, #0x1C]
  002b0		 |$LN31@OEMCacheRa|

; 134  : }

  002b0	e28dd020	 add         sp, sp, #0x20
  002b4	e89d6000	 ldmia       sp, {sp, lr}
  002b8	e12fff1e	 bx          lr
  002bc		 |$LN35@OEMCacheRa|
  002bc		 |$LN36@OEMCacheRa|
  002bc	00000000	 DCD         |??_C@_1CM@BMDDLKDO@?$AA?9?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$AN?$AA?6?$AA?$AA@|
  002c0		 |$LN37@OEMCacheRa|
  002c0	00000000	 DCD         |dpCurSettings|
  002c4		 |$LN38@OEMCacheRa|
  002c4	00000000	 DCD         |g_oalCacheInfo|
  002c8		 |$LN39@OEMCacheRa|
  002c8	00000000	 DCD         |??_C@_1FE@FFFKHHBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@|
  002cc		 |$M40228|

			 ENDP  ; |OEMCacheRangeFlush|

	END
