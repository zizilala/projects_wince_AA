; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\ARM\ARM926\CACHE\flush.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|OEMCacheRangeFlush|
	EXPORT	|??_C@_1CM@BMDDLKDO@?$AA?9?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@FFFKHHBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@| [ DATA ] ; `string'
	IMPORT	|OALClearDTLB|
	IMPORT	|OALClearDTLBEntry|
	IMPORT	|OALClearITLB|
	IMPORT	|OALClearITLBEntry|
	IMPORT	|OALFlushICacheLines|
	IMPORT	|OALFlushICache|
	IMPORT	|OALCleanDCacheLines|
	IMPORT	|OALCleanDCache|
	IMPORT	|OALFlushDCacheLines|
	IMPORT	|OALFlushDCache|
	IMPORT	|g_oalCacheInfo|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
; File c:\wince600\platform\common\src\arm\arm926\cache\flush.c

  00000			 AREA	 |.pdata|, PDATA
|$T40268| DCD	|$LN37@OEMCacheRa|
	DCD	0x40006a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@BMDDLKDO@?$AA?9?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "C", 0x0, "a", 0x0, "c"
	DCB	0x0, "h", 0x0, "e", 0x0, "R", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, "F", 0x0, "l", 0x0, "u", 0x0, "s", 0x0, "h"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@FFFKHHBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "C", 0x0, "a", 0x0, "c"
	DCB	0x0, "h", 0x0, "e", 0x0, "R", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, "F", 0x0, "l", 0x0, "u", 0x0, "s", 0x0, "h"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMCacheRangeFlush| PROC

; 53   : {

  00000		 |$LN37@OEMCacheRa|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M40265|
  00004	e1a06002	 mov         r6, r2
  00008	e1a04001	 mov         r4, r1
  0000c	e1a05000	 mov         r5, r0

; 54   :     OALMSG(OAL_CACHE&&OAL_VERBOSE, (
; 55   :         L"+OEMCacheRangeFlush(0x%08x, %d, 0x%08x)\r\n", pAddress, length, flags
; 56   :     ));

  00010	e59f818c	 ldr         r8, [pc, #0x18C]
  00014	e5983440	 ldr         r3, [r8, #0x440]
  00018	e3130020	 tst         r3, #0x20
  0001c	13130902	 tstne       r3, #2, 18
  00020	159f0178	 ldrne       r0, [pc, #0x178]
  00024	11a03006	 movne       r3, r6
  00028	11a02004	 movne       r2, r4
  0002c	11a01005	 movne       r1, r5
  00030	1b000000	 blne        NKDbgPrintfW

; 57   : 
; 58   :     if ((flags & CACHE_SYNC_DISCARD) != 0) {

  00034	e59f7160	 ldr         r7, [pc, #0x160]
  00038	e3160001	 tst         r6, #1
  0003c	0a000012	 beq         |$LN25@OEMCacheRa|

; 59   :         // Write back and invalidate the selected portions of the data cache
; 60   :         if (length == 0) {

  00040	e3540000	 cmp         r4, #0
  00044	1a000003	 bne         |$LN24@OEMCacheRa|

; 61   :             if (pAddress == NULL) OALFlushDCache();

  00048	e3550000	 cmp         r5, #0
  0004c	1a000022	 bne         |$LN13@OEMCacheRa|

; 70   :                 OALFlushDCache();

  00050	eb000000	 bl          OALFlushDCache

; 71   :             } else {                

  00054	ea000020	 b           |$LN13@OEMCacheRa|
  00058		 |$LN24@OEMCacheRa|

; 62   :         } else {
; 63   :             // Normalize address to cache line alignment
; 64   :             UINT32 mask = g_oalCacheInfo.L1DLineSize - 1;

  00058	e597301c	 ldr         r3, [r7, #0x1C]

; 65   :             UINT32 address = (UINT32)pAddress & ~mask;
; 66   :             // Adjust size to reflect cache line alignment
; 67   :             length += (UINT32)pAddress - address;
; 68   :             // If range is bigger than cache size flush all
; 69   :             if (length >= g_oalCacheInfo.L1DSize) {

  0005c	e5972020	 ldr         r2, [r7, #0x20]
  00060	e2433001	 sub         r3, r3, #1
  00064	e1c50003	 bic         r0, r5, r3
  00068	e0453000	 sub         r3, r5, r0
  0006c	e0844003	 add         r4, r4, r3
  00070	e1540002	 cmp         r4, r2
  00074	3a000001	 bcc         |$LN21@OEMCacheRa|

; 70   :                 OALFlushDCache();

  00078	eb000000	 bl          OALFlushDCache

; 71   :             } else {                

  0007c	ea000016	 b           |$LN13@OEMCacheRa|
  00080		 |$LN21@OEMCacheRa|

; 72   :                 // Flush all the indicated cache entries
; 73   :                 OALFlushDCacheLines((VOID*)address, length);

  00080	e1a01004	 mov         r1, r4
  00084	eb000000	 bl          OALFlushDCacheLines

; 74   :             }                
; 75   :         }

  00088	ea000013	 b           |$LN13@OEMCacheRa|
  0008c		 |$LN25@OEMCacheRa|

; 76   :     } else if ((flags & CACHE_SYNC_WRITEBACK) != 0) {

  0008c	e3160004	 tst         r6, #4
  00090	0a000011	 beq         |$LN13@OEMCacheRa|

; 77   :         // Write back the selected portion of the data cache
; 78   :         if (length == 0) {

  00094	e3540000	 cmp         r4, #0
  00098	1a000003	 bne         |$LN17@OEMCacheRa|

; 79   :             if (pAddress == NULL) OALCleanDCache();

  0009c	e3550000	 cmp         r5, #0
  000a0	1a00000d	 bne         |$LN13@OEMCacheRa|

; 88   :                 OALCleanDCache();

  000a4	eb000000	 bl          OALCleanDCache

; 89   :             } else {                

  000a8	ea00000b	 b           |$LN13@OEMCacheRa|
  000ac		 |$LN17@OEMCacheRa|

; 80   :         } else {
; 81   :             // Normalize address to cache line alignment
; 82   :             UINT32 mask = g_oalCacheInfo.L1DLineSize - 1;

  000ac	e597301c	 ldr         r3, [r7, #0x1C]

; 83   :             UINT32 address = (UINT32)pAddress & ~mask;
; 84   :             // Adjust size to reflect cache line alignment
; 85   :             length += (UINT32)pAddress - address;
; 86   :             // If range is bigger than cache size clean all
; 87   :             if (length >= g_oalCacheInfo.L1DSize) {

  000b0	e5972020	 ldr         r2, [r7, #0x20]
  000b4	e2433001	 sub         r3, r3, #1
  000b8	e1c50003	 bic         r0, r5, r3
  000bc	e0453000	 sub         r3, r5, r0
  000c0	e0844003	 add         r4, r4, r3
  000c4	e1540002	 cmp         r4, r2
  000c8	3a000001	 bcc         |$LN14@OEMCacheRa|

; 88   :                 OALCleanDCache();

  000cc	eb000000	 bl          OALCleanDCache

; 89   :             } else {                

  000d0	ea000001	 b           |$LN13@OEMCacheRa|
  000d4		 |$LN14@OEMCacheRa|

; 90   :                 // Flush all the indicated cache entries
; 91   :                 OALCleanDCacheLines((VOID*)address, length);

  000d4	e1a01004	 mov         r1, r4
  000d8	eb000000	 bl          OALCleanDCacheLines
  000dc		 |$LN13@OEMCacheRa|

; 92   :             }                
; 93   :         }
; 94   :     }
; 95   :     
; 96   :     if ((flags & CACHE_SYNC_INSTRUCTIONS) != 0) {

  000dc	e3160002	 tst         r6, #2
  000e0	0a000011	 beq         |$LN7@OEMCacheRa|

; 97   :         if (length == 0) {

  000e4	e3540000	 cmp         r4, #0
  000e8	1a000003	 bne         |$LN11@OEMCacheRa|

; 98   :             if (pAddress == NULL) OALFlushICache();

  000ec	e3550000	 cmp         r5, #0
  000f0	1a00000d	 bne         |$LN7@OEMCacheRa|

; 105  :                 OALFlushICache();

  000f4	eb000000	 bl          OALFlushICache

; 106  :             } else {        

  000f8	ea00000b	 b           |$LN7@OEMCacheRa|
  000fc		 |$LN11@OEMCacheRa|

; 99   :         } else {
; 100  :             // Normalize address to cache line alignment
; 101  :             UINT32 mask = g_oalCacheInfo.L1ILineSize - 1;

  000fc	e597300c	 ldr         r3, [r7, #0xC]

; 102  :             UINT32 address = (UINT32)pAddress & ~mask;
; 103  :             length += (UINT32)pAddress - address;
; 104  :             if (length >= g_oalCacheInfo.L1ISize) {

  00100	e5972010	 ldr         r2, [r7, #0x10]
  00104	e2433001	 sub         r3, r3, #1
  00108	e1c50003	 bic         r0, r5, r3
  0010c	e0453000	 sub         r3, r5, r0
  00110	e0844003	 add         r4, r4, r3
  00114	e1540002	 cmp         r4, r2
  00118	3a000001	 bcc         |$LN8@OEMCacheRa|

; 105  :                 OALFlushICache();

  0011c	eb000000	 bl          OALFlushICache

; 106  :             } else {        

  00120	ea000001	 b           |$LN7@OEMCacheRa|
  00124		 |$LN8@OEMCacheRa|

; 107  :                 OALFlushICacheLines((VOID*)address, length);

  00124	e1a01004	 mov         r1, r4
  00128	eb000000	 bl          OALFlushICacheLines
  0012c		 |$LN7@OEMCacheRa|

; 108  :             }                
; 109  :         }
; 110  :     }
; 111  : 
; 112  :     if ((flags & CACHE_SYNC_FLUSH_I_TLB) != 0) {

  0012c	e3e03b0d	 mvn         r3, #0xD, 22
  00130	e22370fb	 eor         r7, r3, #0xFB
  00134	e3160008	 tst         r6, #8
  00138	0a000006	 beq         |$LN4@OEMCacheRa|

; 113  :         if (length == PAGE_SIZE) {

  0013c	e5973000	 ldr         r3, [r7]
  00140	e1540003	 cmp         r4, r3
  00144	1a000002	 bne         |$LN5@OEMCacheRa|

; 114  :             // flush one TLB entry
; 115  :             OALClearITLBEntry(pAddress);

  00148	e1a00005	 mov         r0, r5
  0014c	eb000000	 bl          OALClearITLBEntry

; 116  :         } else {

  00150	ea000000	 b           |$LN4@OEMCacheRa|
  00154		 |$LN5@OEMCacheRa|

; 117  :             // flush the whole TLB
; 118  :             OALClearITLB();

  00154	eb000000	 bl          OALClearITLB
  00158		 |$LN4@OEMCacheRa|

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     if ((flags & CACHE_SYNC_FLUSH_D_TLB) != 0) {

  00158	e3160010	 tst         r6, #0x10
  0015c	0a000006	 beq         |$LN1@OEMCacheRa|

; 123  :         // check first for TLB updates forced by paging
; 124  :         if (length == PAGE_SIZE) {

  00160	e5973000	 ldr         r3, [r7]
  00164	e1540003	 cmp         r4, r3
  00168	1a000002	 bne         |$LN2@OEMCacheRa|

; 125  :             // flush one TLB entry
; 126  :             OALClearDTLBEntry(pAddress);

  0016c	e1a00005	 mov         r0, r5
  00170	eb000000	 bl          OALClearDTLBEntry

; 127  :         } else {

  00174	ea000000	 b           |$LN1@OEMCacheRa|
  00178		 |$LN2@OEMCacheRa|

; 128  :             // flush the whole TLB
; 129  :             OALClearDTLB();

  00178	eb000000	 bl          OALClearDTLB
  0017c		 |$LN1@OEMCacheRa|

; 54   :     OALMSG(OAL_CACHE&&OAL_VERBOSE, (
; 55   :         L"+OEMCacheRangeFlush(0x%08x, %d, 0x%08x)\r\n", pAddress, length, flags
; 56   :     ));

  0017c	e5983440	 ldr         r3, [r8, #0x440]

; 130  :         }
; 131  :     }
; 132  : 
; 133  :     OALMSG(OAL_CACHE&&OAL_VERBOSE, (L"-OEMCacheRangeFlush\r\n"));

  00180	e3130020	 tst         r3, #0x20
  00184	13130902	 tstne       r3, #2, 18
  00188	159f0008	 ldrne       r0, [pc, #8]
  0018c	1b000000	 blne        NKDbgPrintfW

; 134  : }

  00190	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00194	e12fff1e	 bx          lr
  00198		 |$LN38@OEMCacheRa|
  00198		 |$LN39@OEMCacheRa|
  00198	00000000	 DCD         |??_C@_1CM@BMDDLKDO@?$AA?9?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$AN?$AA?6?$AA?$AA@|
  0019c		 |$LN40@OEMCacheRa|
  0019c	00000000	 DCD         |g_oalCacheInfo|
  001a0		 |$LN41@OEMCacheRa|
  001a0	00000000	 DCD         |??_C@_1FE@FFFKHHBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@|
  001a4		 |$LN42@OEMCacheRa|
  001a4	00000000	 DCD         |dpCurSettings|
  001a8		 |$M40266|

			 ENDP  ; |OEMCacheRangeFlush|

	END
