ARM macroassembler      Page:1 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000          ;------------------------------------------------------------------------------- 
   14 00000000          ; 
   15 00000000          ;  File: init.s 
   16 00000000          ; 
   17 00000000          ; 
   18 00000000                  INCLUDE kxarm.h 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000          ;++ 
   14 00000000          ; 
   15 00000000          ; 
   16 00000000          ; Module Name: 
   17 00000000          ; 
   18 00000000          ;    kxarm.h 
   19 00000000          ; 
   20 00000000          ; Abstract: 
   21 00000000          ; 
   22 00000000          ;    This is an implementation of the WINCE/ARM Calling Sequence 
   23 00000000          ;    Specification. 
   24 00000000          ; 
   25 00000000          ; Environment: 
   26 00000000          ;    String Library 
   27 00000000          ; 
   28 00000000          ; Revision History: 
   29 00000000          ;-- 
   30 00000000            
   31 00000000                          GBLS    VBar 
   32 00000000          VBar    SETS    "|" 
   33 00000000                          GBLL    HaveExceptHandler 
   34 00000000                          GBLS    AreaName 
   35 00000000                          GBLS    FuncName 
   36 00000000                          GBLS    PrologName 
   37 00000000                          GBLS    FuncEndName 
   38 00000000                          GBLS    ExceptHandler 
   39 00000000                          GBLS    ExceptData 
   40 00000000          AreaName SETS   "|.text|" 
   41 00000000          HaveExceptHandler SETL {FALSE} 
   42 00000000            
   43 00000000                  MACRO 
   44 00000000                  TEXTAREA 
   45 00000000                  AREA |.text|,ALIGN=2,CODE,READONLY 
   46 00000000          AreaName SETS "|.text|" 
   47 00000000                  MEND 
   48 00000000            
   49 00000000              MACRO 
   50 00000000              THUMBAREA 
   51 00000000              AREA |.text|,ALIGN=2,CODE,READONLY,THUMB 
   52 00000000          AreaName SETS "|.text|" 
   53 00000000              MEND 
   54 00000000            
   55 00000000                  MACRO 
   56 00000000                  STARTUPTEXT 
   57 00000000                  AREA |.astart|,ALIGN=2,CODE 
   58 00000000          AreaName SETS "|.astart|" 
   59 00000000                  MEND 
   60 00000000            
   61 00000000                  MACRO 
   62 00000000                  START_REGION    $NameBegin 
   63 00000000                  LCLS    TempName 
   64 00000000          TempName SETS    VBar:CC:"$NameBegin":CC:VBar 
   65 00000000                  EXPORT  $TempName[DATA] 
   66 00000000          $TempName 
   67 00000000                  MEND 
   68 00000000            
   69 00000000                  MACRO 
   70 00000000                  END_REGION              $NameEnd 
   71 00000000                  LCLS    TempName 
   72 00000000          TempName SETS    VBar:CC:"$NameEnd":CC:VBar 
   73 00000000                  EXPORT  $TempName[DATA] 
   74 00000000          $TempName 
   75 00000000                  MEND 
   76 00000000            
   77 00000000          ; 
   78 00000000          ;   This macro should be used if the assembly function is in ARM 
   79 00000000          ; 
   80 00000000            
   81 00000000                  MACRO 
   82 00000000                  NESTED_ARMENTRY $Name 
   83 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
   84 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
   85 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
   86 00000000                  LCLS    ExceptBit 
   87 00000000                  IF HaveExceptHandler 
   88 00000000          ExceptBit   SETS        "0x80000000" 
   89 00000000                  ELSE 
   90 00000000          ExceptBit   SETS        "0" 
   91 00000000                  ENDIF 
   92 00000000            
   93 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
   94 00000000                  DCD         $FuncName 
   95 00000000              DCD     (($PrologName-$FuncName)/4) :OR: ((($FuncEndName-$FuncName)/4):SHL:8) :OR: 0x40000000 :OR: $ExceptBit 
   96 00000000                  AREA $AreaName,CODE,READONLY 
   97 00000000                  ALIGN   2 
   98 00000000                  EXPORT  $FuncName [FUNC] 
   99 00000000                  IF HaveExceptHandler 
  100 00000000              DCD $ExceptHandler 
  101 00000000              DCD $ExceptData 
  102 00000000          HaveExceptHandler SETL {FALSE} 
  103 00000000                  ENDIF 
  104 00000000          $FuncName 
  105 00000000                  ROUT 
  106 00000000                  MEND 
  107 00000000            
  108 00000000          ; 
  109 00000000          ;   This macro should be used if the assembly function is in THUMB 
  110 00000000          ; 
  111 00000000                  MACRO 
  112 00000000                  NESTED_THUMBENTRY       $Name 
  113 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
  114 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
  115 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  116 00000000                  LCLS    ExceptBit 
  117 00000000                  IF HaveExceptHandler 
  118 00000000          ExceptBit   SETS        "0x80000000" 
  119 00000000                  ELSE 
  120 00000000          ExceptBit   SETS        "0" 
  121 00000000                  ENDIF 
  122 00000000            
  123 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
  124 00000000                  DCD         $FuncName 
  125 00000000              DCD     (($PrologName-$FuncName)/2) :OR: ((($FuncEndName-$FuncName)/2):SHL:8) :OR: $ExceptBit 
  126 00000000                  AREA $AreaName,CODE,READONLY 
  127 00000000                  ALIGN   2 
  128 00000000                  EXPORT  $FuncName [FUNC] 
  129 00000000                  IF HaveExceptHandler 
  130 00000000              DCD $ExceptHandler 
  131 00000000              DCD $ExceptData 
  132 00000000          HaveExceptHandler SETL {FALSE} 
  133 00000000                  ENDIF 
  134 00000000          $FuncName 
  135 00000000                  ROUT 
  136 00000000                  MEND 
  137 00000000            
  138 00000000          ; 
  139 00000000          ;   This macro should be used if the assembly function is in ARM 
  140 00000000          ; 
  141 00000000                  MACRO 
  142 00000000                  NESTED_ENTRY    $Name 
  143 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
  144 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
  145 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  146 00000000                  LCLS    ExceptBit 
  147 00000000                  IF HaveExceptHandler 
  148 00000000          ExceptBit   SETS        "0x80000000" 
  149 00000000                  ELSE 
  150 00000000          ExceptBit   SETS        "0" 
  151 00000000                  ENDIF 
  152 00000000            
  153 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
  154 00000000                  DCD         $FuncName 
  155 00000000              DCD     (($PrologName-$FuncName)/4) :OR: ((($FuncEndName-$FuncName)/4):SHL:8) :OR: 0x40000000 :OR: $ExceptBit 
  156 00000000                  AREA $AreaName,CODE,READONLY 
  157 00000000                  ALIGN   2 
  158 00000000                  EXPORT  $FuncName [FUNC] 
  159 00000000                  IF HaveExceptHandler 
  160 00000000              DCD $ExceptHandler 
  161 00000000              DCD $ExceptData 
  162 00000000          HaveExceptHandler SETL {FALSE} 
  163 00000000                  ENDIF 
  164 00000000          $FuncName 
  165 00000000                  ROUT 
  166 00000000                  MEND 
  167 00000000            
  168 00000000                  MACRO 
  169 00000000                  PROLOG_END 
  170 00000000          $PrologName 
  171 00000000                  MEND 
  172 00000000            
  173 00000000                  MACRO 
  174 00000000                  LEAF_ENTRY      $Name 
  175 00000000          FuncName SETS    VBar:CC:"$Name":CC:VBar 
  176 00000000          PrologName SETS "Invalid Prolog" 
  177 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  178 00000000                  ALIGN   2 
  179 00000000                  EXPORT  $FuncName [FUNC] 
  180 00000000          $FuncName 
  181 00000000                  ROUT 
  182 00000000                  MEND 
  183 00000000            
  184 00000000                  MACRO 
  185 00000000                  ALTERNATE_ENTRY $Name 
  186 00000000                  LCLS    TempName 
  187 00000000          TempName SETS    VBar:CC:"$Name":CC:VBar 
  188 00000000                  EXPORT  $TempName [FUNC] 
  189 00000000          $TempName 
  190 00000000                  MEND 
  191 00000000            
  192 00000000                  MACRO 
  193 00000000                  ENTRY_END       $Name 
  194 00000000          $FuncEndName 
  195 00000000                  MEND 
  196 00000000            
  197 00000000                  MACRO 
  198 00000000                  EXCEPTION_HANDLER       $Handler 
  199 00000000          ExceptHandler SETS    VBar:CC:"$Handler":CC:VBar 
  200 00000000          ExceptData SETS "0" 
  201 00000000          HaveExceptHandler SETL {TRUE} 
  202 00000000                  MEND 
  203 00000000            
  204 00000000                  MACRO 
  205 00000000                  EXCEPTION_HANDLER_DATA  $Handler, $HandlerData 
  206 00000000          ExceptHandler SETS    VBar:CC:"$Handler":CC:VBar 
  207 00000000          ExceptData SETS    VBar:CC:"$HandlerData":CC:VBar 
  208 00000000          HaveExceptHandler SETL {TRUE} 
  209 00000000                  MEND 
  210 00000000            
  211 00000000                  MACRO 
  212 00000000                  EXCEPTION_HANDLER_MILLICODE     $Handler, $HandlerData 
  213 00000000          ExceptHandler SETS    "$Handler" 
  214 00000000          ExceptData SETS    "$HandlerData" 
  215 00000000          HaveExceptHandler SETL {TRUE} 
  216 00000000                  MEND 
  217 00000000            
  218 00000000            
  219 00000000                  END 
   19 00000000                  INCLUDE armmacros.s 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000            
   14 00000000          ;/*********************************************************************** 
   15 00000000          ;  Copyright (c) ARM Limited 1998.  All rights reserved. 
   16 00000000          ; 
   17 00000000          ; NOTE: The CALL and CALLEQ macros shouldn't be used in OS startup code 
   18 00000000          ;       before the MMU is enabled since in the Thumbing case it relies 
   19 00000000          ;       on an absolute address which will be virtual in the case of the 
   20 00000000          ;       OS code and if the MMU isn't enabled, all branches should be 
   21 00000000          ;       relative (or a computed physical address). 
   22 00000000          ; 
   23 00000000          ;***********************************************************************/ 
   24 00000000            
   25 00000000            IF Interworking :LOR: Thumbing 
   26 00000000            
   27 00000000              MACRO 
   28 00000000              CALL $Fn 
   29 00000000              ldr     r12, =$Fn 
   30 00000000              mov     lr, pc 
   31 00000000              bx      r12 
   32 00000000              MEND 
   33 00000000            
   34 00000000              MACRO 
   35 00000000              CALLEQ $Fn 
   36 00000000              ldreq   r12, =$Fn 
   37 00000000              moveq   lr, pc 
   38 00000000              bxeq    r12 
   39 00000000              MEND 
   40 00000000            
   41 00000000              MACRO 
   42 00000000              RETURN 
   43 00000000              bx      lr 
   44 00000000              MEND 
   45 00000000            
   46 00000000              MACRO 
   47 00000000              RETURN_EQ 
   48 00000000              bxeq    lr 
   49 00000000              MEND 
   50 00000000            
   51 00000000              MACRO 
   52 00000000              RETURN_NE 
   53 00000000              bxne    lr 
   54 00000000              MEND 
   55 00000000            
   56 00000000            ELSE 
   83 00000000            ENDIF 
   84 00000000            
   85 00000000              END  
   20 00000000                  INCLUDE oal_cache.inc 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000          ;------------------------------------------------------------------------------ 
   14 00000000          ; 
   15 00000000          ;  File: oal_cache.inc 
   16 00000000          ; 
   17 00000000          ;  ARM assembly version of partial contents of oal_cache.h 
   18 00000000          ; 
   19 00000000            
   20 00000000          ;------------------------------------------------------------------------------- 
   21 00000000          ; 
   22 00000000          ;  Defines: L1xxx/L2xxx 
   23 00000000          ; 
   24 00000000          ;  Following defines are used in ARM assember to access OAL_CACHE_INFO 
   25 00000000          ;  structure members. It must be synchronized with OAL_CACHE_INFO definition. 
   26 00000000          ; 
   27 00000000            
   28 00000000          L1Flags         EQU     0 
   29 00000000          L1ISetsPerWay   EQU     4 
   30 00000000          L1INumWays      EQU     8 
   31 00000000          L1ILineSize     EQU     12 
   32 00000000          L1ISize         EQU     16 
   33 00000000          L1DSetsPerWay   EQU     20 
   34 00000000          L1DNumWays      EQU     24 
   35 00000000          L1DLineSize     EQU     28 
   36 00000000          L1DSize         EQU     32 
   37 00000000            
   38 00000000          L2Flags         EQU     36 
   39 00000000          L2ISetsPerWay   EQU     40 
   40 00000000          L2INumWays      EQU     44 
   41 00000000          L2ILineSize     EQU     48 
   42 00000000          L2ISize         EQU     52 
   43 00000000          L2DSetsPerWay   EQU     56 
   44 00000000          L2DNumWays      EQU     60 
   45 00000000          L2DLineSize     EQU     64 
   46 00000000          L2DSize         EQU     68 
   47 00000000            
   48 00000000          ;------------------------------------------------------------------------------- 
   49 00000000            
   50 00000000                          END 
   21 00000000            
   22 00000000                  IMPORT g_oalCacheInfo 
   23 00000000            
   24 00000000                  TEXTAREA 
   45                           AREA |.text|,ALIGN=2,CODE,READONLY 
   46 00000000          AreaName SETS "|.text|" 
   25 00000000            
   26 00000000                  LEAF_ENTRY OALCacheGlobalsInit 
  175 00000000          FuncName SETS    VBar:CC:"OALCacheGlobalsInit":CC:VBar 
  176 00000000          PrologName SETS "Invalid Prolog" 
  177 00000000          FuncEndName SETS    VBar:CC:"OALCacheGlobalsInit":CC:"_end":CC:VBar 
  178 00000000                  ALIGN   2 
  179 00000000                  EXPORT  |OALCacheGlobalsInit| [FUNC] 
  180 00000000          |OALCacheGlobalsInit| 
  181 00000000                  ROUT 
   27 00000000            
   28 00000000 ee100f30         mrc     p15, 0, r0, c0, c0, 1 
   29 00000004 e59f1168         ldr     r1, =g_oalCacheInfo 
   30 00000008            
   31 00000008                  ; First get flags 
   32 00000008 e3a02000         mov     r2, #0 
   33 0000000c            
   34 0000000c                  ; Set write through flag 
   35 0000000c e1a03ca0         mov     r3, r0, lsr #25 
   36 00000010 e213300f         ands    r3, r3, #15 
   37 00000014 03822002         orreq   r2, r2, #2 
   38 00000018            
   39 00000018                  ; Set unified flag 
   40 00000018 e1a03c20         mov     r3, r0, lsr #24 
   41 0000001c e2133001         ands    r3, r3, #1 
   42 00000020 03822001         orreq   r2, r2, #1 
   43 00000024            
   44 00000024                  ; Store flag 
   45 00000024 e5812000         str     r2, [r1, #L1Flags] 
   46 00000028            
   47 00000028                  ; Get I line size as (1 << (b[1..0] + 3)) 
   48 00000028 e2003003         and     r3, r0, #3 
   49 0000002c e2833003         add     r3, r3, #3 
   50 00000030 e3a02001         mov     r2, #1 
   51 00000034 e1a02312         mov     r2, r2, lsl r3 
   52 00000038 e581200c         str     r2, [r1, #L1ILineSize] 
   53 0000003c            
   54 0000003c                  ; Get I associativity as ((2 + b[2]) << (b[5..3] - 1)) 
   55 0000003c e1a031a0         mov     r3, r0, lsr #3 
   56 00000040 e2133007         ands    r3, r3, #7 
   57 00000044 1a000001         bne     %f10 
   58 00000048 e3a02001         mov     r2, #1 
   59 0000004c ea000004         b       %f20 
   60 00000050 e1a02120 10      mov     r2, r0, lsr #2 
   61 00000054 e2022001         and     r2, r2, #1 
   62 00000058 e2822002         add     r2, r2, #2 
   63 0000005c e2433001         sub     r3, r3, #1 
   64 00000060 e1a02312         mov     r2, r2, lsl r3 
   65 00000064 e5812008 20      str     r2, [r1, #L1INumWays] 
   66 00000068            
   67 00000068                  ; Get I size as ((2 + b[2]) << (b[9..6] + 8)) 
   68 00000068 e1a03120         mov     r3, r0, lsr #2 
   69 0000006c e2033001         and     r3, r3, #1 
   70 00000070 e2832002         add     r2, r3, #2 
   71 00000074 e1a03320         mov     r3, r0, lsr #6 
   72 00000078 e203300f         and     r3, r3, #15 
   73 0000007c e2833008         add     r3, r3, #8 
   74 00000080 e1a02312         mov     r2, r2, lsl r3 
   75 00000084 e5812010         str     r2, [r1, #L1ISize] 
   76 00000088            
   77 00000088                  ; Get I sets as (1 << (b[9..6] + 6 - b[5..3] - b[1..0])) 
   78 00000088 e1a03320         mov     r3, r0, lsr #6 
   79 0000008c e203300f         and     r3, r3, #15 
   80 00000090 e2832006         add     r2, r3, #6 
   81 00000094 e1a031a0         mov     r3, r0, lsr #3 
   82 00000098 e2033007         and     r3, r3, #7 
   83 0000009c e0422003         sub     r2, r2, r3 
   84 000000a0 e2003003         and     r3, r0, #3 
   85 000000a4 e0422003         sub     r2, r2, r3 
   86 000000a8 e3a03001         mov     r3, #1 
   87 000000ac e1a02213         mov     r2, r3, lsl r2 
   88 000000b0 e5812004         str     r2, [r1, #L1ISetsPerWay] 
   89 000000b4            
   90 000000b4                  ; Get D line size as (1 << (b[13..12] + 3)) 
   91 000000b4 e1a03620         mov     r3, r0, lsr #12 
   92 000000b8 e2033003         and     r3, r3, #3 
   93 000000bc e2833003         add     r3, r3, #3 
   94 000000c0 e3a02001         mov     r2, #1 
   95 000000c4 e1a02312         mov     r2, r2, lsl r3 
   96 000000c8 e581201c         str     r2, [r1, #L1DLineSize] 
   97 000000cc            
   98 000000cc                  ; Get D associativity as ((2 + b[14]) << (b[17..15] - 1)) 
   99 000000cc e1a037a0         mov     r3, r0, lsr #15 
  100 000000d0 e2133007         ands    r3, r3, #7 
  101 000000d4 1a000001         bne     %f30 
  102 000000d8 e3a02001         mov     r2, #1 
  103 000000dc ea000004         b       %f40 
  104 000000e0 e1a02720 30      mov     r2, r0, lsr #14 
  105 000000e4 e2022001         and     r2, r2, #1 
  106 000000e8 e2822002         add     r2, r2, #2 
  107 000000ec e2433001         sub     r3, r3, #1 
  108 000000f0 e1a02312         mov     r2, r2, lsl r3 
  109 000000f4 e5812018 40      str     r2, [r1, #L1DNumWays] 
  110 000000f8            
  111 000000f8                  ; Get D size as ((2 + b[14]) << (b[21..18] + 8)) 
  112 000000f8 e1a03720         mov     r3, r0, lsr #14 
  113 000000fc e2033001         and     r3, r3, #1 
  114 00000100 e2832002         add     r2, r3, #2 
  115 00000104 e1a03920         mov     r3, r0, lsr #18 
  116 00000108 e203300f         and     r3, r3, #15 
  117 0000010c e2833008         add     r3, r3, #8 
  118 00000110 e1a02312         mov     r2, r2, lsl r3 
  119 00000114 e5812020         str     r2, [r1, #L1DSize] 
  120 00000118            
  121 00000118                  ; Get # sets as (1 << (b[21..18] + 6 - b[17..15] - b[13..12])) 
  122 00000118 e1a03920         mov     r3, r0, lsr #18 
  123 0000011c e203300f         and     r3, r3, #15 
  124 00000120 e2832006         add     r2, r3, #6 
  125 00000124 e1a037a0         mov     r3, r0, lsr #15 
  126 00000128 e2033007         and     r3, r3, #7 
  127 0000012c e0422003         sub     r2, r2, r3 
  128 00000130 e1a03620         mov     r3, r0, lsr #12 
  129 00000134 e2033003         and     r3, r3, #3 
  130 00000138 e0422003         sub     r2, r2, r3 
  131 0000013c e3a03001         mov     r3, #1 
  132 00000140 e1a02213         mov     r2, r3, lsl r2 
  133 00000144 e5812014         str     r2, [r1, #L1DSetsPerWay] 
  134 00000148            
  135 00000148                  ; No secondary cache 
  136 00000148 e3a02000         mov     r2, #0 
  137 0000014c e5812024         str     r2, [r1, #L2Flags] 
  138 00000150 e5812028         str     r2, [r1, #L2ISetsPerWay] 
  139 00000154 e581202c         str     r2, [r1, #L2INumWays] 
  140 00000158 e5812030         str     r2, [r1, #L2ILineSize] 
  141 0000015c e5812034         str     r2, [r1, #L2ISize] 
  142 00000160 e5812038         str     r2, [r1, #L2DSetsPerWay] 
  143 00000164 e581203c         str     r2, [r1, #L2DNumWays] 
  144 00000168 e5812040         str     r2, [r1, #L2DLineSize] 
  145 0000016c e5812044         str     r2, [r1, #L2DSize] 
  146 00000170                   
  147 00000170                  RETURN 
   43 00000170 e12fff1e     bx      lr 
  148 00000174            
  149 00000174                  END 
  150 00000174 00000000 *literal pool: symbol:  g_oalCacheInfo + 0x0 
Assembly terminated, errors: 0, warnings: 0 
