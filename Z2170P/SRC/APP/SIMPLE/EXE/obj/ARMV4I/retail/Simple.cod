; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\APP\SIMPLE\EXE\Simple.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|FinalResultString|, 0x3f80

	 COMMON	|ResultString|, 0x2000

	 COMMON	|pbuf1|, 0x100000

	 COMMON	|PerformanceFrequency|, 0x8

	 COMMON	|pbuf2|, 0x100000

	EXPORT	|InitTimeStamp|
	IMPORT	|QueryPerformanceFrequency|
; File c:\wince600\platform\z2170p\src\app\simple\exe\simple.c

  00000			 AREA	 |.pdata|, PDATA
|$T40372| DCD	|$LN5@InitTimeSt|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitTimeStamp| PROC

; 60   : {

  00000		 |$LN5@InitTimeSt|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40369|

; 61   :     QueryPerformanceFrequency(&PerformanceFrequency);

  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          QueryPerformanceFrequency

; 62   : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@InitTimeSt|
  00014		 |$LN7@InitTimeSt|
  00014	00000000	 DCD         |PerformanceFrequency|
  00018		 |$M40370|

			 ENDP  ; |InitTimeStamp|

	EXPORT	|GetTimeStamp|
	IMPORT	|QueryPerformanceCounter|

  00000			 AREA	 |.pdata|, PDATA
|$T40382| DCD	|$LN5@GetTimeSta|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetTimeStamp| PROC

; 65   : {

  00000		 |$LN5@GetTimeSta|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40379|

; 66   :     QueryPerformanceCounter(pTimeStamp);

  00004	eb000000	 bl          QueryPerformanceCounter

; 67   : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M40380|

			 ENDP  ; |GetTimeStamp|

	EXPORT	|GetTimeDeltaUs|
	IMPORT	|__rt_sdiv64by64|

  00000			 AREA	 |.pdata|, PDATA
|$T40396| DCD	|$LN7@GetTimeDel|
	DCD	0x40001702
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetTimeDeltaUs| PROC

; 70   : {

  00000		 |$LN7@GetTimeDel|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M40393|
  00008	e1a04000	 mov         r4, r0

; 71   :     LARGE_INTEGER NewTimeStamp;
; 72   :     LARGE_INTEGER Result;
; 73   : 
; 74   :     GetTimeStamp(&NewTimeStamp);    

  0000c	e28d0000	 add         r0, sp, #0
  00010	eb000000	 bl          QueryPerformanceCounter

; 75   : 
; 76   :     Result.QuadPart = NewTimeStamp.QuadPart - pOldTimeStamp->QuadPart;
; 77   :     
; 78   :     Result.QuadPart = (Result.QuadPart * 1000000) / PerformanceFrequency.QuadPart;
; 79   : 
; 80   :     return Result.LowPart;

  00014	e5942000	 ldr         r2, [r4]
  00018	e59d3000	 ldr         r3, [sp]
  0001c	e594e004	 ldr         lr, [r4, #4]
  00020	e59d1004	 ldr         r1, [sp, #4]
  00024	e0533002	 subs        r3, r3, r2
  00028	e3a0293d	 mov         r2, #0x3D, 18
  0002c	e3825d09	 orr         r5, r2, #9, 26
  00030	e0840593	 umull       r0, r4, r3, r5
  00034	e59f301c	 ldr         r3, [pc, #0x1C]
  00038	e0c1e00e	 sbc         lr, r1, lr
  0003c	e021459e	 mla         r1, lr, r5, r4
  00040	e5932000	 ldr         r2, [r3]
  00044	e5933004	 ldr         r3, [r3, #4]
  00048	eb000000	 bl          __rt_sdiv64by64

; 81   : }

  0004c	e28dd008	 add         sp, sp, #8
  00050	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$LN8@GetTimeDel|
  00058		 |$LN9@GetTimeDel|
  00058	00000000	 DCD         |PerformanceFrequency|
  0005c		 |$M40394|

			 ENDP  ; |GetTimeDeltaUs|

	EXPORT	|ComputeRate|
	IMPORT	|__muld|
	IMPORT	|__divd|

  00000			 AREA	 |.pdata|, PDATA
|$T40414| DCD	|$LN5@ComputeRat|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ComputeRate| PROC

; 84   : {

  00000		 |$LN5@ComputeRat|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40411|

; 85   :     double Rate = EventsPerIteration * Iterations;

  00004	eb000000	 bl          __muld

; 86   :     
; 87   :     Rate = Rate / TimeInUs;

  00008	e59d2004	 ldr         r2, [sp, #4]
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	eb000000	 bl          __divd

; 88   : 
; 89   :     return Rate;
; 90   : }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$M40412|

			 ENDP  ; |ComputeRate|

	EXPORT	|WinMain|
	EXPORT	|??_C@_1DM@DNKLGIOF@?$AAR?$AAa?$AAt?$AAe?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAm?$AAi?$AAl?$AAl?$AAi?$AAo?$AAn?$AAs?$AA?5?$AAp?$AAe?$AAr?$AA?5?$AAs?$AAe?$AAc?$AAo?$AAn?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@CCHBFALN@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAy?$AA?5?$AAb?$AAy?$AA?5?$AA4?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAM?$AAB?$AA?1?$AAs?$AAe?$AAc?$AAo?$AAn?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@EAFPKOGB@?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@KNFOBMCD@?$AA?2?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?2?$AAs?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?4?$AAl?$AAo?$AAg?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@DJDBBOAO@?$AAN?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?1?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?3?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@ICILDMIG@?$AAR?$AAA?$AAM?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?5?$AA?$CI?$AAl?$AAd?$AAr?$AA?$CJ?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@NOIFPIIC@?$AAR?$AAA?$AAM?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?5?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@CHBABPAB@?$AAR?$AAA?$AAM?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?5?$AA?$CI?$AAl?$AAd?$AAm?$AA?$CJ?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@HLBONLAF@?$AAR?$AAA?$AAM?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?5?$AA?$CI?$AAs?$AAt?$AAm?$AA?$CJ?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@EGNLBNLK@?$AAe?$AAx?$AAe?$AAc?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@LDJCFHN@?$AAC?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?3?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@JHOHLGDB@?$AAR?$AAA?$AAM?$AA?5?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAc?$AAo?$AAp?$AAy?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@OHODDFAP@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?0?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAb?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@HCKIILFF@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?0?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAb?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@KNKDDNJM@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AA4?$AA?9?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?0?$AA?5?$AAn?$AAo?$AAn?$AA?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@CGBPJAPO@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AA4?$AA?9?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?0?$AA?5?$AAn?$AAo?$AAn?$AA?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@LHEMLFMH@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAM?$AAI?$AAP?$AAS?$AA?5?$AAt?$AAe?$AAs?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@IPCBCICP@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAS?$AAI?$AAD?$AA1?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@JFPHOMKF@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAS?$AAI?$AAM?$AAP?$AAL?$AAE?$AAD?$AAL?$AAL?$AA_?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAA?$AAL?$AAL?$AAO?$AAC?$AAA?$AAT?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@FAAHJNNM@?$AAS?$AAI?$AAD?$AA1?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|CloseHandle|
	IMPORT	|WriteFile|
	IMPORT	|MessageBoxW|
	IMPORT	|GetForegroundWindow|
	IMPORT	|swprintf|
	IMPORT	|MultipleMemoryWriteTestLoop|
	IMPORT	|MultipleMemoryReadTestLoop|
	IMPORT	|MemoryWriteTestLoop|
	IMPORT	|MemoryReadTestLoop|
	IMPORT	|InstructionTestLoop|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|DeviceIoControl|
	IMPORT	|CreateFileW|
	IMPORT	|Sleep|
	IMPORT	|wcslen|
	IMPORT	|wcscat|
	IMPORT	|__utod|

  00000			 AREA	 |.pdata|, PDATA
|$T40499| DCD	|$LN57@WinMain|
	DCD	0x40018002

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@DNKLGIOF@?$AAR?$AAa?$AAt?$AAe?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAm?$AAi?$AAl?$AAl?$AAi?$AAo?$AAn?$AAs?$AA?5?$AAp?$AAe?$AAr?$AA?5?$AAs?$AAe?$AAc?$AAo?$AAn?$AAd?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, " ", 0x0, "m", 0x0, "i", 0x0, "l", 0x0, "l"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, "s", 0x0, " ", 0x0, "p"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c"
	DCB	0x0, "o", 0x0, "n", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@CCHBFALN@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAy?$AA?5?$AAb?$AAy?$AA?5?$AA4?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAM?$AAB?$AA?1?$AAs?$AAe?$AAc?$AAo?$AAn?$AAd?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "p", 0x0, "y"
	DCB	0x0, " ", 0x0, "b", 0x0, "y", 0x0, " ", 0x0, "4", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "M", 0x0, "B"
	DCB	0x0, "/", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@EAFPKOGB@?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?$AA@| DCB "T"
	DCB	0x0, "e", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "s", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "s", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@KNFOBMCD@?$AA?2?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?2?$AAs?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?4?$AAl?$AAo?$AAg?$AA?$AA@| DCB "\\"
	DCB	0x0, "W", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "o", 0x0, "w"
	DCB	0x0, "s", 0x0, "\\", 0x0, "s", 0x0, "i", 0x0, "m", 0x0, "p"
	DCB	0x0, "l", 0x0, "e", 0x0, ".", 0x0, "l", 0x0, "o", 0x0, "g"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@DJDBBOAO@?$AAN?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?1?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?3?$AA?6?$AA?$AA@| DCB "N"
	DCB	0x0, "o", 0x0, "n", 0x0, "-", 0x0, "c", 0x0, "a", 0x0, "c"
	DCB	0x0, "h", 0x0, "e", 0x0, "d", 0x0, "/", 0x0, "b", 0x0, "u"
	DCB	0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "u", 0x0, "l"
	DCB	0x0, "t", 0x0, "s", 0x0, ":", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@ICILDMIG@?$AAR?$AAA?$AAM?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?5?$AA?$CI?$AAl?$AAd?$AAr?$AA?$CJ?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "A", 0x0, "M", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "r", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "."
	DCB	0x0, "2", 0x0, "f", 0x0, " ", 0x0, "(", 0x0, "l", 0x0, "d"
	DCB	0x0, "r", 0x0, ")", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@NOIFPIIC@?$AAR?$AAA?$AAM?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?5?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "A", 0x0, "M", 0x0, " ", 0x0, "w", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "r", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "."
	DCB	0x0, "2", 0x0, "f", 0x0, " ", 0x0, "(", 0x0, "s", 0x0, "t"
	DCB	0x0, "r", 0x0, ")", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@CHBABPAB@?$AAR?$AAA?$AAM?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?5?$AA?$CI?$AAl?$AAd?$AAm?$AA?$CJ?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "A", 0x0, "M", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "r", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "."
	DCB	0x0, "2", 0x0, "f", 0x0, " ", 0x0, "(", 0x0, "l", 0x0, "d"
	DCB	0x0, "m", 0x0, ")", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@HLBONLAF@?$AAR?$AAA?$AAM?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?5?$AA?$CI?$AAs?$AAt?$AAm?$AA?$CJ?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "A", 0x0, "M", 0x0, " ", 0x0, "w", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "r", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "."
	DCB	0x0, "2", 0x0, "f", 0x0, " ", 0x0, "(", 0x0, "s", 0x0, "t"
	DCB	0x0, "m", 0x0, ")", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@EGNLBNLK@?$AAe?$AAx?$AAe?$AAc?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?6?$AA?$AA@| DCB "e"
	DCB	0x0, "x", 0x0, "e", 0x0, "c", 0x0, "u", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "r", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "."
	DCB	0x0, "2", 0x0, "f", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@LDJCFHN@?$AAC?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?3?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "a", 0x0, "c", 0x0, "h", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "u", 0x0, "l", 0x0, "t"
	DCB	0x0, "s", 0x0, ":", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@JHOHLGDB@?$AAR?$AAA?$AAM?$AA?5?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAc?$AAo?$AAp?$AAy?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "A", 0x0, "M", 0x0, " ", 0x0, "D", 0x0, "W", 0x0, "O"
	DCB	0x0, "R", 0x0, "D", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "p"
	DCB	0x0, "y", 0x0, " ", 0x0, "r", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, ".", 0x0, "2"
	DCB	0x0, "f", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@OHODDFAP@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?0?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAb?$AAu@| DCB "S"
	DCB	0x0, "i", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "D", 0x0, "W", 0x0, "O", 0x0, "R", 0x0, "D"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "n", 0x0, "-", 0x0, "c"
	DCB	0x0, "a", 0x0, "c", 0x0, "h", 0x0, "e", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "n", 0x0, "-", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "R", 0x0, "A", 0x0, "M", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@HCKIILFF@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?0?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAb?$AAu@| DCB "S"
	DCB	0x0, "i", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "D", 0x0, "W", 0x0, "O", 0x0, "R", 0x0, "D"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "n", 0x0, "-", 0x0, "c"
	DCB	0x0, "a", 0x0, "c", 0x0, "h", 0x0, "e", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "n", 0x0, "-", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "R", 0x0, "A", 0x0, "M", 0x0, " "
	DCB	0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@KNKDDNJM@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AA4?$AA?9?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?0?$AA?5?$AAn?$AAo?$AAn?$AA?9@| DCB "S"
	DCB	0x0, "i", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "4", 0x0, "-", 0x0, "D", 0x0, "W", 0x0, "O"
	DCB	0x0, "R", 0x0, "D", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "n"
	DCB	0x0, "-", 0x0, "c", 0x0, "a", 0x0, "c", 0x0, "h", 0x0, "e"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "n"
	DCB	0x0, "-", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "R", 0x0, "A"
	DCB	0x0, "M", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@CGBPJAPO@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AA4?$AA?9?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?0?$AA?5?$AAn?$AAo?$AAn?$AA?9@| DCB "S"
	DCB	0x0, "i", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "4", 0x0, "-", 0x0, "D", 0x0, "W", 0x0, "O"
	DCB	0x0, "R", 0x0, "D", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "n"
	DCB	0x0, "-", 0x0, "c", 0x0, "a", 0x0, "c", 0x0, "h", 0x0, "e"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "n"
	DCB	0x0, "-", 0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "R", 0x0, "A"
	DCB	0x0, "M", 0x0, " ", 0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@LHEMLFMH@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAM?$AAI?$AAP?$AAS?$AA?5?$AAt?$AAe?$AAs?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "i", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "M", 0x0, "I", 0x0, "P", 0x0, "S", 0x0, " "
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@IPCBCICP@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAS?$AAI?$AAD?$AA1?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "i", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "C", 0x0, "a", 0x0, "n", 0x0, "'", 0x0, "t"
	DCB	0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " "
	DCB	0x0, "S", 0x0, "I", 0x0, "D", 0x0, "1", 0x0, ":", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@JFPHOMKF@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAS?$AAI?$AAM?$AAP?$AAL?$AAE?$AAD?$AAL?$AAL?$AA_?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAA?$AAL?$AAL?$AAO?$AAC?$AAA?$AAT?$AAE@| DCB "S"
	DCB	0x0, "i", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "S", 0x0, "I", 0x0, "M", 0x0, "P", 0x0, "L"
	DCB	0x0, "E", 0x0, "D", 0x0, "L", 0x0, "L", 0x0, "_", 0x0, "I"
	DCB	0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "A"
	DCB	0x0, "L", 0x0, "L", 0x0, "O", 0x0, "C", 0x0, "A", 0x0, "T"
	DCB	0x0, "E", 0x0, "_", 0x0, "P", 0x0, "H", 0x0, "Y", 0x0, "S"
	DCB	0x0, "I", 0x0, "C", 0x0, "A", 0x0, "L", 0x0, "_", 0x0, "M"
	DCB	0x0, "E", 0x0, "M", 0x0, "O", 0x0, "R", 0x0, "Y", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@FAAHJNNM@?$AAS?$AAI?$AAD?$AA1?$AA?3?$AA?$AA@| DCB "S", 0x0, "I", 0x0
	DCB	"D", 0x0, "1", 0x0, ":", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WinMain| PROC

; 107  : {

  00000		 |$LN57@WinMain|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd048	 sub         sp, sp, #0x48
  00008		 |$M40496|

; 108  :     //BOOL bKMode;
; 109  :     LARGE_INTEGER TimeStampStart;
; 110  : 
; 111  :     DWORD OperationsPerIteration;
; 112  :     
; 113  :     // memory addresses
; 114  :     PDWORD pVirtualMemoryAddress = NULL;
; 115  :     DWORD MemorySize;
; 116  :     DWORD BytesReturned;
; 117  :     
; 118  :     DWORD TimeMemoryWriteTestUs = 0;
; 119  :     DWORD MemoryWritesPerIteration = 0;
; 120  : 
; 121  :     DWORD TimeMemoryReadTestUs = 0;
; 122  :     DWORD MemoryReadsPerIteration = 0;
; 123  :     
; 124  :     double InstructionTestResult;
; 125  : 
; 126  :     double MemoryWriteTestResult;
; 127  :     double MemoryReadTestResult;
; 128  : 
; 129  :     double MultipleMemoryWriteTestResult;
; 130  :     double MultipleMemoryReadTestResult;
; 131  :     
; 132  :     double InCacheMemTestResult;
; 133  :     
; 134  :     HANDLE hFile;
; 135  :     HANDLE hSimpleDll;
; 136  :     DWORD dwBytesWritten;
; 137  : 
; 138  :     ResultString[0] = 0;

  00008	e59f75ec	 ldr         r7, [pc, #0x5EC]

; 139  :     FinalResultString[0] = 0;

  0000c	e59f85e4	 ldr         r8, [pc, #0x5E4]
  00010	e3a01000	 mov         r1, #0
  00014	e3a03000	 mov         r3, #0
  00018	e3a02000	 mov         r2, #0

; 140  : 
; 141  :     // wait for sounds to finish
; 142  :     Sleep(1000);

  0001c	e3a00ffa	 mov         r0, #0xFA, 30
  00020	e1c730b0	 strh        r3, [r7]
  00024	e1c820b0	 strh        r2, [r8]
  00028	e58d1010	 str         r1, [sp, #0x10]
  0002c	eb000000	 bl          Sleep

; 143  : 
; 144  :     //------------------------------------------------------------------------
; 145  :     // Get timestamp functions for use
; 146  :     //------------------------------------------------------------------------
; 147  : 
; 148  :     InitTimeStamp();

  00030	e59f05bc	 ldr         r0, [pc, #0x5BC]
  00034	eb000000	 bl          QueryPerformanceFrequency

; 149  : 
; 150  :     //------------------------------------------------------------------------
; 151  :     // Get a chunk of non-cached non-buffered RAM
; 152  :     //------------------------------------------------------------------------
; 153  : 
; 154  :     // open SID1:
; 155  :     hSimpleDll = CreateFile(TEXT("SID1:"), GENERIC_READ | GENERIC_WRITE, 0, 0, OPEN_EXISTING, 0, 0);

  00038	e59f05b0	 ldr         r0, [pc, #0x5B0]
  0003c	e3a0e003	 mov         lr, #3
  00040	e3a04000	 mov         r4, #0
  00044	e3a03000	 mov         r3, #0
  00048	e3a02000	 mov         r2, #0
  0004c	e3a01103	 mov         r1, #3, 2
  00050	e58de000	 str         lr, [sp]
  00054	e58d4008	 str         r4, [sp, #8]
  00058	e58d4004	 str         r4, [sp, #4]
  0005c	eb000000	 bl          CreateFileW
  00060	e1a09000	 mov         r9, r0

; 156  :     if (hSimpleDll != INVALID_HANDLE_VALUE)

  00064	e3790001	 cmn         r9, #1
  00068	0a000011	 beq         |$LN16@WinMain|

; 157  :     {
; 158  :         // allocate physical memory
; 159  :         MemorySize = 4096;

  0006c	e3a01a01	 mov         r1, #1, 20

; 160  :         if (!DeviceIoControl(hSimpleDll, SIMPLEDLL_IOCTL_ALLOCATE_PHYSICAL_MEMORY, &MemorySize, sizeof(MemorySize), &pVirtualMemoryAddress, sizeof(pVirtualMemoryAddress), &BytesReturned, NULL))

  00070	e28d3038	 add         r3, sp, #0x38
  00074	e3a00004	 mov         r0, #4
  00078	e28d2010	 add         r2, sp, #0x10
  0007c	e58d1024	 str         r1, [sp, #0x24]
  00080	e58d3008	 str         r3, [sp, #8]
  00084	e58d0004	 str         r0, [sp, #4]
  00088	e58d2000	 str         r2, [sp]
  0008c	e3a03004	 mov         r3, #4
  00090	e28d2024	 add         r2, sp, #0x24
  00094	e3a01000	 mov         r1, #0
  00098	e1a00009	 mov         r0, r9
  0009c	e58d400c	 str         r4, [sp, #0xC]
  000a0	eb000000	 bl          DeviceIoControl
  000a4	e3500000	 cmp         r0, #0
  000a8	1a000003	 bne         |$LN14@WinMain|

; 161  :             RETAILMSG(1, (TEXT("Simple: SIMPLEDLL_IOCTL_ALLOCATE_PHYSICAL_MEMORY failed\r\n")));

  000ac	e59f0538	 ldr         r0, [pc, #0x538]

; 162  :     }
; 163  :     else

  000b0	ea000000	 b           |$LN54@WinMain|
  000b4		 |$LN16@WinMain|

; 164  :     {
; 165  :         RETAILMSG(1, (TEXT("Simple: Can't open SID1:\r\n")));

  000b4	e59f052c	 ldr         r0, [pc, #0x52C]
  000b8		 |$LN54@WinMain|
  000b8	eb000000	 bl          NKDbgPrintfW
  000bc		 |$LN14@WinMain|

; 166  :     }
; 167  :     
; 168  :     //------------------------------------------------------------------------
; 169  :     // Switch to kernel mode, disable interrupts
; 170  :     //------------------------------------------------------------------------
; 171  : 
; 172  :     //bKMode = SetKMode(TRUE);
; 173  :     //SetInterruptState(FALSE);
; 174  : 
; 175  :     //------------------------------------------------------------------------
; 176  :     // Simple instruction MIPS test
; 177  :     //------------------------------------------------------------------------
; 178  : 
; 179  :     RETAILMSG(1, (TEXT("Simple: MIPS test\r\n")));

  000bc	e59f0520	 ldr         r0, [pc, #0x520]
  000c0	eb000000	 bl          NKDbgPrintfW

; 180  : 
; 181  :     GetTimeStamp(&TimeStampStart);

  000c4	e28d0040	 add         r0, sp, #0x40
  000c8	eb000000	 bl          QueryPerformanceCounter
  000cc	e3a03b61	 mov         r3, #0x61, 22

; 182  :     OperationsPerIteration = InstructionTestLoop(NUMBER_OF_INSTRUCTION_LOOP_ITERATIONS);

  000d0	e3830e2a	 orr         r0, r3, #0x2A, 28
  000d4	eb000000	 bl          InstructionTestLoop
  000d8	e1a04000	 mov         r4, r0

; 183  :     InstructionTestResult = ComputeRate(OperationsPerIteration, NUMBER_OF_INSTRUCTION_LOOP_ITERATIONS, GetTimeDeltaUs(&TimeStampStart));

  000dc	e28d0040	 add         r0, sp, #0x40
  000e0	eb000000	 bl          GetTimeDeltaUs
  000e4	e1a06000	 mov         r6, r0
  000e8	e1a00004	 mov         r0, r4
  000ec	eb000000	 bl          __utod
  000f0	e59f34e8	 ldr         r3, [pc, #0x4E8]
  000f4	e3a02000	 mov         r2, #0
  000f8	eb000000	 bl          __muld
  000fc	e1a05000	 mov         r5, r0
  00100	e1a00006	 mov         r0, r6
  00104	e1a04001	 mov         r4, r1
  00108	eb000000	 bl          __utod
  0010c	e1a03001	 mov         r3, r1
  00110	e1a02000	 mov         r2, r0
  00114	e1a00005	 mov         r0, r5
  00118	e1a01004	 mov         r1, r4
  0011c	eb000000	 bl          __divd

; 184  : 
; 185  :     if (pVirtualMemoryAddress != NULL)

  00120	e59d3010	 ldr         r3, [sp, #0x10]
  00124	e1a02000	 mov         r2, r0
  00128	e58d1034	 str         r1, [sp, #0x34]
  0012c	e3530000	 cmp         r3, #0
  00130	e58d2030	 str         r2, [sp, #0x30]
  00134	0a000073	 beq         |$LN53@WinMain|

; 186  :     {
; 187  :         //------------------------------------------------------------------------
; 188  :         // Simple single DWORD at a time non-cached, non-buffered RAM read test
; 189  :         //------------------------------------------------------------------------
; 190  : 
; 191  :         RETAILMSG(1, (TEXT("Simple: DWORD non-cached, non-buffered RAM read test\r\n")));

  00138	e59f049c	 ldr         r0, [pc, #0x49C]
  0013c	eb000000	 bl          NKDbgPrintfW

; 192  :         GetTimeStamp(&TimeStampStart);

  00140	e28d0040	 add         r0, sp, #0x40
  00144	eb000000	 bl          QueryPerformanceCounter

; 193  :         OperationsPerIteration = MemoryReadTestLoop(NUMBER_OF_MEMORY_READ_LOOP_ITERATIONS, pVirtualMemoryAddress);

  00148	e59d1010	 ldr         r1, [sp, #0x10]
  0014c	e3a03c4e	 mov         r3, #0x4E, 24
  00150	e3830020	 orr         r0, r3, #0x20
  00154	eb000000	 bl          MemoryReadTestLoop
  00158	e1a04000	 mov         r4, r0

; 194  :         MemoryReadTestResult = ComputeRate(OperationsPerIteration, NUMBER_OF_MEMORY_READ_LOOP_ITERATIONS, GetTimeDeltaUs(&TimeStampStart));

  0015c	e28d0040	 add         r0, sp, #0x40
  00160	eb000000	 bl          GetTimeDeltaUs
  00164	e1a06000	 mov         r6, r0
  00168	e1a00004	 mov         r0, r4
  0016c	eb000000	 bl          __utod
  00170	e59f3454	 ldr         r3, [pc, #0x454]
  00174	e3a02000	 mov         r2, #0
  00178	eb000000	 bl          __muld
  0017c	e1a05000	 mov         r5, r0
  00180	e1a00006	 mov         r0, r6
  00184	e1a04001	 mov         r4, r1
  00188	eb000000	 bl          __utod
  0018c	e1a03001	 mov         r3, r1
  00190	e1a02000	 mov         r2, r0
  00194	e1a00005	 mov         r0, r5
  00198	e1a01004	 mov         r1, r4
  0019c	eb000000	 bl          __divd
  001a0	e1a0a000	 mov         r10, r0

; 195  : 
; 196  :         //------------------------------------------------------------------------
; 197  :         // Simple single DWORD at a time non-cached, non-buffered RAM write test
; 198  :         //------------------------------------------------------------------------
; 199  : 
; 200  :         RETAILMSG(1, (TEXT("Simple: DWORD non-cached, non-buffered RAM write test\r\n")));

  001a4	e59f042c	 ldr         r0, [pc, #0x42C]
  001a8	e1a0b001	 mov         r11, r1
  001ac	eb000000	 bl          NKDbgPrintfW

; 201  :         GetTimeStamp(&TimeStampStart);

  001b0	e28d0040	 add         r0, sp, #0x40
  001b4	eb000000	 bl          QueryPerformanceCounter

; 202  :         OperationsPerIteration = MemoryWriteTestLoop(NUMBER_OF_MEMORY_WRITE_LOOP_ITERATIONS, pVirtualMemoryAddress);

  001b8	e59d1010	 ldr         r1, [sp, #0x10]
  001bc	e3a03c4e	 mov         r3, #0x4E, 24
  001c0	e3830020	 orr         r0, r3, #0x20
  001c4	eb000000	 bl          MemoryWriteTestLoop
  001c8	e1a04000	 mov         r4, r0

; 203  :         MemoryWriteTestResult = ComputeRate(OperationsPerIteration, NUMBER_OF_MEMORY_WRITE_LOOP_ITERATIONS, GetTimeDeltaUs(&TimeStampStart));

  001cc	e28d0040	 add         r0, sp, #0x40
  001d0	eb000000	 bl          GetTimeDeltaUs
  001d4	e1a06000	 mov         r6, r0
  001d8	e1a00004	 mov         r0, r4
  001dc	eb000000	 bl          __utod
  001e0	e59f33e4	 ldr         r3, [pc, #0x3E4]
  001e4	e3a02000	 mov         r2, #0
  001e8	eb000000	 bl          __muld
  001ec	e1a05000	 mov         r5, r0
  001f0	e1a00006	 mov         r0, r6
  001f4	e1a04001	 mov         r4, r1
  001f8	eb000000	 bl          __utod
  001fc	e1a03001	 mov         r3, r1
  00200	e1a02000	 mov         r2, r0
  00204	e1a00005	 mov         r0, r5
  00208	e1a01004	 mov         r1, r4
  0020c	eb000000	 bl          __divd
  00210	e58d0028	 str         r0, [sp, #0x28]

; 204  : 
; 205  :         //------------------------------------------------------------------------
; 206  :         // Simple quad DWORD at a time non-cached, non-buffered RAM read test
; 207  :         //------------------------------------------------------------------------
; 208  : 
; 209  :         RETAILMSG(1, (TEXT("Simple: 4-DWORD non-cached, non-buffered RAM read test\r\n")));

  00214	e59f03b8	 ldr         r0, [pc, #0x3B8]
  00218	e58d102c	 str         r1, [sp, #0x2C]
  0021c	eb000000	 bl          NKDbgPrintfW

; 210  :         GetTimeStamp(&TimeStampStart);

  00220	e28d0040	 add         r0, sp, #0x40
  00224	eb000000	 bl          QueryPerformanceCounter

; 211  :         OperationsPerIteration = MultipleMemoryReadTestLoop(NUMBER_OF_MULTIPLE_MEMORY_READ_LOOP_ITERATIONS, pVirtualMemoryAddress);

  00228	e59d1010	 ldr         r1, [sp, #0x10]
  0022c	e3a03c4e	 mov         r3, #0x4E, 24
  00230	e3830020	 orr         r0, r3, #0x20
  00234	eb000000	 bl          MultipleMemoryReadTestLoop
  00238	e1a04000	 mov         r4, r0

; 212  :         MultipleMemoryReadTestResult = ComputeRate(OperationsPerIteration, NUMBER_OF_MULTIPLE_MEMORY_READ_LOOP_ITERATIONS, GetTimeDeltaUs(&TimeStampStart));

  0023c	e28d0040	 add         r0, sp, #0x40
  00240	eb000000	 bl          GetTimeDeltaUs
  00244	e1a06000	 mov         r6, r0
  00248	e1a00004	 mov         r0, r4
  0024c	eb000000	 bl          __utod
  00250	e59f3374	 ldr         r3, [pc, #0x374]
  00254	e3a02000	 mov         r2, #0
  00258	eb000000	 bl          __muld
  0025c	e1a05000	 mov         r5, r0
  00260	e1a00006	 mov         r0, r6
  00264	e1a04001	 mov         r4, r1
  00268	eb000000	 bl          __utod
  0026c	e1a03001	 mov         r3, r1
  00270	e1a02000	 mov         r2, r0
  00274	e1a00005	 mov         r0, r5
  00278	e1a01004	 mov         r1, r4
  0027c	eb000000	 bl          __divd
  00280	e58d0014	 str         r0, [sp, #0x14]

; 213  : 
; 214  :         //------------------------------------------------------------------------
; 215  :         // Simple quad DWORD at a time non-cached, non-buffered RAM write test
; 216  :         //------------------------------------------------------------------------
; 217  : 
; 218  :         RETAILMSG(1, (TEXT("Simple: 4-DWORD non-cached, non-buffered RAM write test\r\n")));

  00284	e59f0344	 ldr         r0, [pc, #0x344]
  00288	e58d1018	 str         r1, [sp, #0x18]
  0028c	eb000000	 bl          NKDbgPrintfW

; 219  :         GetTimeStamp(&TimeStampStart);

  00290	e28d0040	 add         r0, sp, #0x40
  00294	eb000000	 bl          QueryPerformanceCounter

; 220  :         OperationsPerIteration = MultipleMemoryWriteTestLoop(NUMBER_OF_MULTIPLE_MEMORY_WRITE_LOOP_ITERATIONS, pVirtualMemoryAddress);

  00298	e59d1010	 ldr         r1, [sp, #0x10]
  0029c	e3a03c4e	 mov         r3, #0x4E, 24
  002a0	e3830020	 orr         r0, r3, #0x20
  002a4	eb000000	 bl          MultipleMemoryWriteTestLoop
  002a8	e1a04000	 mov         r4, r0

; 221  :         MultipleMemoryWriteTestResult = ComputeRate(OperationsPerIteration, NUMBER_OF_MULTIPLE_MEMORY_WRITE_LOOP_ITERATIONS, GetTimeDeltaUs(&TimeStampStart));

  002ac	e28d0040	 add         r0, sp, #0x40
  002b0	eb000000	 bl          GetTimeDeltaUs
  002b4	e1a06000	 mov         r6, r0
  002b8	e1a00004	 mov         r0, r4
  002bc	eb000000	 bl          __utod
  002c0	e59f3304	 ldr         r3, [pc, #0x304]
  002c4	e3a02000	 mov         r2, #0
  002c8	eb000000	 bl          __muld
  002cc	e1a05000	 mov         r5, r0
  002d0	e1a00006	 mov         r0, r6
  002d4	e1a04001	 mov         r4, r1
  002d8	eb000000	 bl          __utod
  002dc	e1a03001	 mov         r3, r1
  002e0	e1a02000	 mov         r2, r0
  002e4	e1a00005	 mov         r0, r5
  002e8	e1a01004	 mov         r1, r4
  002ec	eb000000	 bl          __divd
  002f0	e58d1020	 str         r1, [sp, #0x20]
  002f4	e1a01000	 mov         r1, r0
  002f8	e59d5028	 ldr         r5, [sp, #0x28]
  002fc	e59d602c	 ldr         r6, [sp, #0x2C]
  00300	e58d101c	 str         r1, [sp, #0x1C]
  00304	ea00000b	 b           |$LN13@WinMain|
  00308		 |$LN53@WinMain|
  00308	e59d3044	 ldr         r3, [sp, #0x44]
  0030c	e59db044	 ldr         r11, [sp, #0x44]
  00310	e59da040	 ldr         r10, [sp, #0x40]
  00314	e58d3018	 str         r3, [sp, #0x18]
  00318	e59d3040	 ldr         r3, [sp, #0x40]
  0031c	e59d6044	 ldr         r6, [sp, #0x44]
  00320	e59d5040	 ldr         r5, [sp, #0x40]
  00324	e58d3014	 str         r3, [sp, #0x14]
  00328	e59d3044	 ldr         r3, [sp, #0x44]
  0032c	e58d3020	 str         r3, [sp, #0x20]
  00330	e59d3040	 ldr         r3, [sp, #0x40]
  00334	e58d301c	 str         r3, [sp, #0x1C]
  00338		 |$LN13@WinMain|

; 222  :     }
; 223  :         
; 224  :     // simple memory to memory copy using DWORD pointers
; 225  :     {
; 226  :         int i, j;
; 227  :         const int ITER = 100;
; 228  : 
; 229  :         for (i = 0; i < BUFF_SIZE; i++)

  00338	e59f2284	 ldr         r2, [pc, #0x284]
  0033c	e3a03000	 mov         r3, #0
  00340		 |$LL12@WinMain|

; 230  :         {
; 231  :             pbuf2[i] = i;

  00340	e4823004	 str         r3, [r2], #4
  00344	e2833001	 add         r3, r3, #1
  00348	e3530701	 cmp         r3, #1, 14
  0034c	bafffffb	 blt         |$LL12@WinMain|

; 232  :         }
; 233  : 
; 234  :         GetTimeStamp(&TimeStampStart);

  00350	e28d0040	 add         r0, sp, #0x40
  00354	eb000000	 bl          QueryPerformanceCounter
  00358	e59fe268	 ldr         lr, [pc, #0x268]
  0035c	e3a01064	 mov         r1, #0x64
  00360		 |$LL9@WinMain|

; 237  :         {
; 238  :             for (i = 0; i < BUFF_SIZE; i++)
; 239  :             {
; 240  :                 pbuf1[i] = pbuf2[i];

  00360	e59f025c	 ldr         r0, [pc, #0x25C]
  00364	e1a0200e	 mov         r2, lr
  00368	e28e4601	 add         r4, lr, #1, 12
  0036c		 |$LN51@WinMain|
  0036c	e4903004	 ldr         r3, [r0], #4
  00370	e4823004	 str         r3, [r2], #4
  00374	e1520004	 cmp         r2, r4
  00378	1afffffb	 bne         |$LN51@WinMain|

; 235  : 
; 236  :         for (j = 0; j < ITER; j++)

  0037c	e2511001	 subs        r1, r1, #1
  00380	1afffff6	 bne         |$LL9@WinMain|

; 241  :             }
; 242  :         }
; 243  : 
; 244  :         InCacheMemTestResult = ComputeRate(BUFF_SIZE, ITER, GetTimeDeltaUs(&TimeStampStart));

  00384	e28d0040	 add         r0, sp, #0x40
  00388	eb000000	 bl          GetTimeDeltaUs

; 245  :     }
; 246  :     
; 247  :     //------------------------------------------------------------------------
; 248  :     // Enable interrupts and return to normal mode
; 249  :     //------------------------------------------------------------------------
; 250  : 
; 251  :     //SetInterruptState(TRUE);
; 252  :     //SetKMode(bKMode);
; 253  : 
; 254  :     //------------------------------------------------------------------------
; 255  :     // Show results
; 256  :     //------------------------------------------------------------------------
; 257  : 
; 258  :     //printf("Basic execution rate: %0.2f\n", InstructionTestResult);
; 259  :     swprintf(ResultString, L"execution rate: %0.2f\n", InstructionTestResult);

  0038c	e59f122c	 ldr         r1, [pc, #0x22C]
  00390	e59d2030	 ldr         r2, [sp, #0x30]
  00394	e59d3034	 ldr         r3, [sp, #0x34]
  00398	e1a04000	 mov         r4, r0
  0039c	e1a00007	 mov         r0, r7
  003a0	eb000000	 bl          swprintf

; 260  :     wcscat(FinalResultString, ResultString);

  003a4	e1a01007	 mov         r1, r7
  003a8	e1a00008	 mov         r0, r8
  003ac	eb000000	 bl          wcscat

; 261  : 
; 262  :     swprintf(ResultString, L"Cached results:\n");

  003b0	e59f1204	 ldr         r1, [pc, #0x204]
  003b4	e1a00007	 mov         r0, r7
  003b8	eb000000	 bl          swprintf

; 263  :     wcscat(FinalResultString, ResultString);

  003bc	e1a01007	 mov         r1, r7
  003c0	e1a00008	 mov         r0, r8
  003c4	eb000000	 bl          wcscat

; 264  :     swprintf(ResultString, L"RAM DWORD copy rate: %0.2f\n", InCacheMemTestResult);

  003c8	e1a00004	 mov         r0, r4
  003cc	eb000000	 bl          __utod
  003d0	e3a0e441	 mov         lr, #0x41, 8
  003d4	e1a03001	 mov         r3, r1
  003d8	e1a02000	 mov         r2, r0
  003dc	e38e1879	 orr         r1, lr, #0x79, 16
  003e0	e3a00000	 mov         r0, #0
  003e4	eb000000	 bl          __divd
  003e8	e1a03001	 mov         r3, r1
  003ec	e59f11c4	 ldr         r1, [pc, #0x1C4]
  003f0	e1a02000	 mov         r2, r0
  003f4	e1a00007	 mov         r0, r7
  003f8	eb000000	 bl          swprintf

; 265  :     wcscat(FinalResultString, ResultString);

  003fc	e1a01007	 mov         r1, r7
  00400	e1a00008	 mov         r0, r8
  00404	eb000000	 bl          wcscat

; 266  : 
; 267  :     if (pVirtualMemoryAddress != NULL)

  00408	e59d3010	 ldr         r3, [sp, #0x10]
  0040c	e3530000	 cmp         r3, #0
  00410	0a000025	 beq         |$LN3@WinMain|

; 268  :     {
; 269  :         swprintf(ResultString, L"Non-cached/buffered results:\n");

  00414	e59f1198	 ldr         r1, [pc, #0x198]
  00418	e1a00007	 mov         r0, r7
  0041c	eb000000	 bl          swprintf

; 270  :         wcscat(FinalResultString, ResultString);

  00420	e1a01007	 mov         r1, r7
  00424	e1a00008	 mov         r0, r8
  00428	eb000000	 bl          wcscat

; 271  : 
; 272  :         //printf("DWORD RAM read rate: %0.2f\n", MemoryReadTestResult);
; 273  :         swprintf(ResultString, L"RAM read rate:  %0.2f (ldr)\n", MemoryReadTestResult);

  0042c	e59f117c	 ldr         r1, [pc, #0x17C]
  00430	e1a0200a	 mov         r2, r10
  00434	e1a0300b	 mov         r3, r11
  00438	e1a00007	 mov         r0, r7
  0043c	eb000000	 bl          swprintf

; 274  :         wcscat(FinalResultString, ResultString);

  00440	e1a01007	 mov         r1, r7
  00444	e1a00008	 mov         r0, r8
  00448	eb000000	 bl          wcscat

; 275  : 
; 276  :         //printf("DWORD RAM write rate: %0.2f\n", MemoryWriteTestResult);
; 277  :         swprintf(ResultString, L"RAM write rate: %0.2f (str)\n", MemoryWriteTestResult);

  0044c	e59f1158	 ldr         r1, [pc, #0x158]
  00450	e1a02005	 mov         r2, r5
  00454	e1a03006	 mov         r3, r6
  00458	e1a00007	 mov         r0, r7
  0045c	eb000000	 bl          swprintf

; 278  :         wcscat(FinalResultString, ResultString);

  00460	e1a01007	 mov         r1, r7
  00464	e1a00008	 mov         r0, r8
  00468	eb000000	 bl          wcscat

; 279  : 
; 280  :         //printf("DWORD RAM read rate: %0.2f\n", MultipleMemoryReadTestResult);
; 281  :         swprintf(ResultString, L"RAM read rate:  %0.2f (ldm)\n", MultipleMemoryReadTestResult);

  0046c	e59f1134	 ldr         r1, [pc, #0x134]
  00470	e59d2014	 ldr         r2, [sp, #0x14]
  00474	e59d3018	 ldr         r3, [sp, #0x18]
  00478	e1a00007	 mov         r0, r7
  0047c	eb000000	 bl          swprintf

; 282  :         wcscat(FinalResultString, ResultString);

  00480	e1a01007	 mov         r1, r7
  00484	e1a00008	 mov         r0, r8
  00488	eb000000	 bl          wcscat

; 283  : 
; 284  :         //printf("DWORD RAM write rate: %0.2f\n", MultipleMemoryWriteTestResult);
; 285  :         swprintf(ResultString, L"RAM write rate: %0.2f (stm)\n", MultipleMemoryWriteTestResult);

  0048c	e59f1110	 ldr         r1, [pc, #0x110]
  00490	e59d201c	 ldr         r2, [sp, #0x1C]
  00494	e59d3020	 ldr         r3, [sp, #0x20]
  00498	e1a00007	 mov         r0, r7
  0049c	eb000000	 bl          swprintf

; 286  :         wcscat(FinalResultString, ResultString);

  004a0	e1a01007	 mov         r1, r7
  004a4	e1a00008	 mov         r0, r8
  004a8	eb000000	 bl          wcscat
  004ac		 |$LN3@WinMain|

; 287  :     }
; 288  :         
; 289  :     // Add some notes to the output
; 290  : 
; 291  :     swprintf(ResultString, L"Rates in millions per second\n");

  004ac	e59f10ec	 ldr         r1, [pc, #0xEC]
  004b0	e1a00007	 mov         r0, r7
  004b4	eb000000	 bl          swprintf

; 292  :     wcscat(FinalResultString, ResultString);

  004b8	e1a01007	 mov         r1, r7
  004bc	e1a00008	 mov         r0, r8
  004c0	eb000000	 bl          wcscat

; 293  :     swprintf(ResultString, L"Multipy by 4 for MB/second\n");

  004c4	e59f10d0	 ldr         r1, [pc, #0xD0]
  004c8	e1a00007	 mov         r0, r7
  004cc	eb000000	 bl          swprintf

; 294  :     wcscat(FinalResultString, ResultString);

  004d0	e1a01007	 mov         r1, r7
  004d4	e1a00008	 mov         r0, r8
  004d8	eb000000	 bl          wcscat

; 295  :     
; 296  :     MessageBox(GetForegroundWindow(), FinalResultString, TEXT("Test Results"), MB_OK | /* MB_ICONINFORMATION | */ MB_DEFBUTTON1 | MB_SETFOREGROUND);

  004dc	eb000000	 bl          GetForegroundWindow
  004e0	e59f20b0	 ldr         r2, [pc, #0xB0]
  004e4	e3a03801	 mov         r3, #1, 16
  004e8	e1a01008	 mov         r1, r8
  004ec	eb000000	 bl          MessageBoxW

; 297  : 
; 298  :     // create the file
; 299  :     hFile = CreateFile(L"\\Windows\\simple.log", GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 0, NULL);

  004f0	e59f009c	 ldr         r0, [pc, #0x9C]
  004f4	e3a0e002	 mov         lr, #2
  004f8	e3a05000	 mov         r5, #0
  004fc	e3a03000	 mov         r3, #0
  00500	e3a02000	 mov         r2, #0
  00504	e3a01101	 mov         r1, #1, 2
  00508	e58de000	 str         lr, [sp]
  0050c	e58d5008	 str         r5, [sp, #8]
  00510	e58d5004	 str         r5, [sp, #4]
  00514	eb000000	 bl          CreateFileW
  00518	e1a04000	 mov         r4, r0

; 300  :     if (hFile != INVALID_HANDLE_VALUE)

  0051c	e3740001	 cmn         r4, #1
  00520	0a00000a	 beq         |$LN2@WinMain|

; 301  :     {
; 302  :         WriteFile(hFile, FinalResultString, (wcslen(FinalResultString) + 1) * sizeof(TCHAR), &dwBytesWritten, NULL);

  00524	e1a00008	 mov         r0, r8
  00528	eb000000	 bl          wcslen
  0052c	e2803001	 add         r3, r0, #1
  00530	e1a02083	 mov         r2, r3, lsl #1
  00534	e28d303c	 add         r3, sp, #0x3C
  00538	e1a01008	 mov         r1, r8
  0053c	e1a00004	 mov         r0, r4
  00540	e58d5000	 str         r5, [sp]
  00544	eb000000	 bl          WriteFile

; 303  :         CloseHandle(hFile);

  00548	e1a00004	 mov         r0, r4
  0054c	eb000000	 bl          CloseHandle
  00550		 |$LN2@WinMain|

; 304  :     }
; 305  :     
; 306  :     if (hSimpleDll != INVALID_HANDLE_VALUE)

  00550	e3790001	 cmn         r9, #1
  00554	0a00000a	 beq         |$LN1@WinMain|

; 307  :     {
; 308  :         DeviceIoControl(hSimpleDll, SIMPLEDLL_IOCTL_FREE_PHYSICAL_MEMORY, &pVirtualMemoryAddress, sizeof(pVirtualMemoryAddress), NULL, 0, NULL, NULL);

  00558	e3a03004	 mov         r3, #4
  0055c	e28d2010	 add         r2, sp, #0x10
  00560	e3a01001	 mov         r1, #1
  00564	e1a00009	 mov         r0, r9
  00568	e58d500c	 str         r5, [sp, #0xC]
  0056c	e58d5008	 str         r5, [sp, #8]
  00570	e58d5004	 str         r5, [sp, #4]
  00574	e58d5000	 str         r5, [sp]
  00578	eb000000	 bl          DeviceIoControl

; 309  :         CloseHandle(hSimpleDll);

  0057c	e1a00009	 mov         r0, r9
  00580	eb000000	 bl          CloseHandle
  00584		 |$LN1@WinMain|

; 310  :     }
; 311  : 
; 312  :     return 0;

  00584	e3a00000	 mov         r0, #0

; 313  : }

  00588	e28dd048	 add         sp, sp, #0x48
  0058c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00590	e12fff1e	 bx          lr
  00594		 |$LN58@WinMain|
  00594		 |$LN59@WinMain|
  00594	00000000	 DCD         |??_C@_1CI@KNFOBMCD@?$AA?2?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?2?$AAs?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?4?$AAl?$AAo?$AAg?$AA?$AA@|
  00598		 |$LN60@WinMain|
  00598	00000000	 DCD         |??_C@_1BK@EAFPKOGB@?$AAT?$AAe?$AAs?$AAt?$AA?5?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?$AA@|
  0059c		 |$LN61@WinMain|
  0059c	00000000	 DCD         |??_C@_1DI@CCHBFALN@?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAy?$AA?5?$AAb?$AAy?$AA?5?$AA4?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAM?$AAB?$AA?1?$AAs?$AAe?$AAc?$AAo?$AAn?$AAd?$AA?6?$AA?$AA@|
  005a0		 |$LN62@WinMain|
  005a0	00000000	 DCD         |??_C@_1DM@DNKLGIOF@?$AAR?$AAa?$AAt?$AAe?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAm?$AAi?$AAl?$AAl?$AAi?$AAo?$AAn?$AAs?$AA?5?$AAp?$AAe?$AAr?$AA?5?$AAs?$AAe?$AAc?$AAo?$AAn?$AAd?$AA?6?$AA?$AA@|
  005a4		 |$LN63@WinMain|
  005a4	00000000	 DCD         |??_C@_1DK@HLBONLAF@?$AAR?$AAA?$AAM?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?5?$AA?$CI?$AAs?$AAt?$AAm?$AA?$CJ?$AA?6?$AA?$AA@|
  005a8		 |$LN64@WinMain|
  005a8	00000000	 DCD         |??_C@_1DK@CHBABPAB@?$AAR?$AAA?$AAM?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?5?$AA?$CI?$AAl?$AAd?$AAm?$AA?$CJ?$AA?6?$AA?$AA@|
  005ac		 |$LN65@WinMain|
  005ac	00000000	 DCD         |??_C@_1DK@NOIFPIIC@?$AAR?$AAA?$AAM?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?5?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?6?$AA?$AA@|
  005b0		 |$LN66@WinMain|
  005b0	00000000	 DCD         |??_C@_1DK@ICILDMIG@?$AAR?$AAA?$AAM?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?5?$AA?$CI?$AAl?$AAd?$AAr?$AA?$CJ?$AA?6?$AA?$AA@|
  005b4		 |$LN67@WinMain|
  005b4	00000000	 DCD         |??_C@_1DM@DJDBBOAO@?$AAN?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?1?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?3?$AA?6?$AA?$AA@|
  005b8		 |$LN68@WinMain|
  005b8	00000000	 DCD         |??_C@_1DI@JHOHLGDB@?$AAR?$AAA?$AAM?$AA?5?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAc?$AAo?$AAp?$AAy?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?6?$AA?$AA@|
  005bc		 |$LN69@WinMain|
  005bc	00000000	 DCD         |??_C@_1CC@LDJCFHN@?$AAC?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?3?$AA?6?$AA?$AA@|
  005c0		 |$LN70@WinMain|
  005c0	00000000	 DCD         |??_C@_1CO@EGNLBNLK@?$AAe?$AAx?$AAe?$AAc?$AAu?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AA0?$AA?4?$AA2?$AAf?$AA?6?$AA?$AA@|
  005c4		 |$LN71@WinMain|
  005c4	00000000	 DCD         |pbuf2|
  005c8		 |$LN72@WinMain|
  005c8	00000000	 DCD         |pbuf1|
  005cc		 |$LN73@WinMain|
  005cc	40d38800	 DCD         0x40d38800
  005d0		 |$LN74@WinMain|
  005d0	00000000	 DCD         |??_C@_1HE@CGBPJAPO@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AA4?$AA?9?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?0?$AA?5?$AAn?$AAo?$AAn?$AA?9@|
  005d4		 |$LN75@WinMain|
  005d4	00000000	 DCD         |??_C@_1HC@KNKDDNJM@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AA4?$AA?9?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?0?$AA?5?$AAn?$AAo?$AAn?$AA?9@|
  005d8		 |$LN76@WinMain|
  005d8	00000000	 DCD         |??_C@_1HA@HCKIILFF@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?0?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAb?$AAu@|
  005dc		 |$LN77@WinMain|
  005dc	00000000	 DCD         |??_C@_1GO@OHODDFAP@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAD?$AAW?$AAO?$AAR?$AAD?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAc?$AAa?$AAc?$AAh?$AAe?$AAd?$AA?0?$AA?5?$AAn?$AAo?$AAn?$AA?9?$AAb?$AAu@|
  005e0		 |$LN78@WinMain|
  005e0	40f86a00	 DCD         0x40f86a00
  005e4		 |$LN79@WinMain|
  005e4	00000000	 DCD         |??_C@_1CI@LHEMLFMH@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAM?$AAI?$AAP?$AAS?$AA?5?$AAt?$AAe?$AAs?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  005e8		 |$LN80@WinMain|
  005e8	00000000	 DCD         |??_C@_1DG@IPCBCICP@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAS?$AAI?$AAD?$AA1?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  005ec		 |$LN81@WinMain|
  005ec	00000000	 DCD         |??_C@_1HE@JFPHOMKF@?$AAS?$AAi?$AAm?$AAp?$AAl?$AAe?$AA?3?$AA?5?$AAS?$AAI?$AAM?$AAP?$AAL?$AAE?$AAD?$AAL?$AAL?$AA_?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAA?$AAL?$AAL?$AAO?$AAC?$AAA?$AAT?$AAE@|
  005f0		 |$LN82@WinMain|
  005f0	00000000	 DCD         |??_C@_1M@FAAHJNNM@?$AAS?$AAI?$AAD?$AA1?$AA?3?$AA?$AA@|
  005f4		 |$LN83@WinMain|
  005f4	00000000	 DCD         |PerformanceFrequency|
  005f8		 |$LN84@WinMain|
  005f8	00000000	 DCD         |FinalResultString|
  005fc		 |$LN85@WinMain|
  005fc	00000000	 DCD         |ResultString|
  00600		 |$M40497|

			 ENDP  ; |WinMain|

	END
