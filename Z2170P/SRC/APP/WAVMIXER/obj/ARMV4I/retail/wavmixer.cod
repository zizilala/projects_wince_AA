; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\APP\WAVMIXER\wavmixer.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1EC@FODDIIPG@?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?9?$AA?$DP?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAh?$AAe?$AAl?$AAp?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KO@LEHICPDG@?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?9?$AAs?$AA?5?$AA?$DM?$AAI?$AAN?$AA?$HM?$AAO?$AAU?$AAT?$AA?$DO?$AA?5?$AA?$DM?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAI?$AAD?$AA?$DO?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KE@HCKOGDEH@?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?9?$AAl?$AA?5?$AA?$DM?$AAI?$AAN?$AA?$HM?$AAO?$AAU?$AAT?$AA?$DO?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAa?$AAl?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@POCAFKBF@?$AAu?$AAs?$AAa?$AAg?$AAe?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?usage_text@@3PAPAGA| [ DATA ]		; usage_text

  00000			 AREA	 |.data|, DATA
|?usage_text@@3PAPAGA| DCD |??_C@_1BC@POCAFKBF@?$AAu?$AAs?$AAa?$AAg?$AAe?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| ; usage_text
	DCD	|??_C@_1KE@HCKOGDEH@?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?9?$AAl?$AA?5?$AA?$DM?$AAI?$AAN?$AA?$HM?$AAO?$AAU?$AAT?$AA?$DO?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAa?$AAl?$AAl@|
	DCD	|??_C@_1KO@LEHICPDG@?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?9?$AAs?$AA?5?$AA?$DM?$AAI?$AAN?$AA?$HM?$AAO?$AAU?$AAT?$AA?$DO?$AA?5?$AA?$DM?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAI?$AAD?$AA?$DO?$AA?5@|
	DCD	|??_C@_1EC@FODDIIPG@?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?9?$AA?$DP?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAh?$AAe?$AAl?$AAp?$AA?$AN?$AA?6@|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@FODDIIPG@?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?9?$AA?$DP?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAh?$AAe?$AAl?$AAp?$AA?$AN?$AA?6@| DCB " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, "-", 0x0, "?", 0x0, 0x9, 0x0, 0x9, 0x0, 0x9, 0x0, 0x9
	DCB	0x0, 0x9, 0x0, 0x9, 0x0, 0x9, 0x0, 0x9, 0x0, 0x9, 0x0, "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y"
	DCB	0x0, " ", 0x0, "h", 0x0, "e", 0x0, "l", 0x0, "p", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KO@LEHICPDG@?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?9?$AAs?$AA?5?$AA?$DM?$AAI?$AAN?$AA?$HM?$AAO?$AAU?$AAT?$AA?$DO?$AA?5?$AA?$DM?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAI?$AAD?$AA?$DO?$AA?5@| DCB " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, "-", 0x0, "s", 0x0, " ", 0x0, "<", 0x0, "I", 0x0, "N"
	DCB	0x0, "|", 0x0, "O", 0x0, "U", 0x0, "T", 0x0, ">", 0x0, " "
	DCB	0x0, "<", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, " ", 0x0, "I", 0x0, "D", 0x0, ">"
	DCB	0x0, " ", 0x0, "<", 0x0, "V", 0x0, "a", 0x0, "l", 0x0, "u"
	DCB	0x0, "e", 0x0, ">", 0x0, 0x9, 0x0, "P", 0x0, "a", 0x0, "s"
	DCB	0x0, "s", 0x0, " ", 0x0, "a", 0x0, " ", 0x0, "v", 0x0, "a"
	DCB	0x0, "l", 0x0, "u", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "a", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "c", 0x0, "u"
	DCB	0x0, "l", 0x0, "a", 0x0, "r", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KE@HCKOGDEH@?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?9?$AAl?$AA?5?$AA?$DM?$AAI?$AAN?$AA?$HM?$AAO?$AAU?$AAT?$AA?$DO?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AA?7?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAa?$AAl?$AAl@| DCB " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, "-", 0x0, "l", 0x0, " ", 0x0, "<", 0x0, "I", 0x0, "N"
	DCB	0x0, "|", 0x0, "O", 0x0, "U", 0x0, "T", 0x0, ">", 0x0, 0x9
	DCB	0x0, 0x9, 0x0, 0x9, 0x0, 0x9, 0x0, 0x9, 0x0, 0x9, 0x0, "L"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, " ", 0x0, "a", 0x0, "v", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "W", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, "I"
	DCB	0x0, "N", 0x0, " ", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "W"
	DCB	0x0, "a", 0x0, "v", 0x0, "O", 0x0, "U", 0x0, "T", 0x0, " "
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@POCAFKBF@?$AAu?$AAs?$AAa?$AAg?$AAe?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "u"
	DCB	0x0, "s", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, ":", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
	EXPORT	|?Usage@@YAXXZ|				; Usage
	IMPORT	|wprintf|
; File c:\wince600\platform\z2170p\src\app\wavmixer\wavmixer.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T32372| DCD	|$LN10@Usage|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Usage@@YAXXZ| PROC			; Usage

; 19   : { 

  00000		 |$LN10@Usage|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M32369|

; 20   : 	int i;
; 21   : 
; 22   :     for (i = 0; i < NELEMS(usage_text); i++) 

  00004	e59f4018	 ldr         r4, [pc, #0x18]
  00008	e3a05004	 mov         r5, #4
  0000c		 |$LL3@Usage|

; 23   : 	{
; 24   : 		_tprintf(usage_text[i]);

  0000c	e4940004	 ldr         r0, [r4], #4
  00010	eb000000	 bl          wprintf
  00014	e2555001	 subs        r5, r5, #1
  00018	1afffffb	 bne         |$LL3@Usage|

; 25   :     }
; 26   : }

  0001c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN11@Usage|
  00024		 |$LN12@Usage|
  00024	00000000	 DCD         |?usage_text@@3PAPAGA|
  00028		 |$M32370|

			 ENDP  ; |?Usage@@YAXXZ|, Usage

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?ListMixerControls@@YAHH@Z|		; ListMixerControls
	EXPORT	|??_C@_1EG@LOHBBNOM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@FFJOBANB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAt?$AAy?$AAp?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@LKMNKPFD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@ICBMOEKE@?$AA?7?$AA?$CF?$AAs?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@OPNHHGOL@?$AAW?$AAr?$AAo?$AAn?$AAg?$AA?5?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?5?$AAo?$AAf?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_15OEMMNBIC@?$AA0?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19MLHEJNCP@?$AAL?$AA?5?$AA0?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@DCLGINLK@?$AA?5?$AA?$HM?$AA?5?$AAR?$AA?5?$AA0?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@IJNMLOEC@?$AA?7?$AA?7?$AA?$CF?$AAs?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@HCOOECOK@?$AAF?$AAA?$AAL?$AAS?$AAE?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19ELAAHEEL@?$AAT?$AAR?$AAU?$AAE?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@HONMLPDA@?$AA?7?$AA?$CF?$AAs?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@MMNFDOLL@?$AA?$CF?$AAs?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@LNDHODCO@?$AAW?$AAA?$AAV?$AAE?$AA?5?$AAO?$AAU?$AAT?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@PLGNLHMI@?$AAW?$AAA?$AAV?$AAE?$AA?5?$AAI?$AAN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@BBPJCECM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@MECGAMLK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@EKGGCACH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@OJDKMIHI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAW?$AAa?$AAv?$AAe?$AA?5?$AAI?$AAN?$AA?5?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@HDFMGNCL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAw?$AAa?$AAv?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAa?$AAv?$AAa?$AAi?$AAl?$AAa?$AAb?$AAl?$AAe@| [ DATA ] ; `string'
	IMPORT	|CloseHandle|
	IMPORT	|waveInClose|
	IMPORT	|mixerClose|
	IMPORT	|wcsncat|
	IMPORT	|wcscpy_s|
	IMPORT	|LocalFree|
	IMPORT	|mixerGetControlDetails|
	IMPORT	|_itow|
	IMPORT	|mixerGetLineControls|
	IMPORT	|LocalAlloc|
	IMPORT	|mixerGetLineInfo|
	IMPORT	|mixerOpen|
	IMPORT	|waveInOpen|
	IMPORT	|mixerGetNumDevs|
	IMPORT	|CreateEventW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|memset|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T32432| DCD	|$LN100@ListMixerC|
	DCD	0xc0020b02

  00000			 AREA	 |.xdata|, DATA
|$T32428| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@LOHBBNOM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, ":"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@FFJOBANB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAt?$AAy?$AAp?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, ":"
	DCB	0x0, " ", 0x0, "U", 0x0, "n", 0x0, "s", 0x0, "u", 0x0, "p"
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p"
	DCB	0x0, "e", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@LKMNKPFD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAd?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, ":"
	DCB	0x0, " ", 0x0, "C", 0x0, "o", 0x0, "u", 0x0, "l", 0x0, "d"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "g"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "t", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "s"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@ICBMOEKE@?$AA?7?$AA?$CF?$AAs?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "%", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@OPNHHGOL@?$AAW?$AAr?$AAo?$AAn?$AAg?$AA?5?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?5?$AAo?$AAf?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AA@| DCB "W"
	DCB	0x0, "r", 0x0, "o", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "n"
	DCB	0x0, "u", 0x0, "m", 0x0, "b", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "o", 0x0, "f", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15OEMMNBIC@?$AA0?$AAx?$AA?$AA@| DCB "0", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19MLHEJNCP@?$AAL?$AA?5?$AA0?$AAx?$AA?$AA@| DCB "L", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@DCLGINLK@?$AA?5?$AA?$HM?$AA?5?$AAR?$AA?5?$AA0?$AAx?$AA?$AA@| DCB " "
	DCB	0x0, "|", 0x0, " ", 0x0, "R", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@IJNMLOEC@?$AA?7?$AA?7?$AA?$CF?$AAs?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, 0x9, 0x0, "%", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@HCOOECOK@?$AAF?$AAA?$AAL?$AAS?$AAE?$AA?$AA@| DCB "F", 0x0, "A", 0x0
	DCB	"L", 0x0, "S", 0x0, "E", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19ELAAHEEL@?$AAT?$AAR?$AAU?$AAE?$AA?$AA@| DCB "T", 0x0, "R", 0x0, "U"
	DCB	0x0, "E", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@HONMLPDA@?$AA?7?$AA?$CF?$AAs?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "%", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@MMNFDOLL@?$AA?$CF?$AAs?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@LNDHODCO@?$AAW?$AAA?$AAV?$AAE?$AA?5?$AAO?$AAU?$AAT?$AA?$AA@| DCB "W"
	DCB	0x0, "A", 0x0, "V", 0x0, "E", 0x0, " ", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@PLGNLHMI@?$AAW?$AAA?$AAV?$AAE?$AA?5?$AAI?$AAN?$AA?$AA@| DCB "W"
	DCB	0x0, "A", 0x0, "V", 0x0, "E", 0x0, " ", 0x0, "I", 0x0, "N"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@BBPJCECM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, ":"
	DCB	0x0, " ", 0x0, "C", 0x0, "o", 0x0, "u", 0x0, "l", 0x0, "d"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "g"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "s", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@MECGAMLK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, ":"
	DCB	0x0, " ", 0x0, "C", 0x0, "o", 0x0, "u", 0x0, "l", 0x0, "d"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@EKGGCACH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, ":"
	DCB	0x0, " ", 0x0, "C", 0x0, "o", 0x0, "u", 0x0, "l", 0x0, "d"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "g"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "n", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "e", 0x0, " ", 0x0, "m", 0x0, "i", 0x0, "x", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@OJDKMIHI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAW?$AAa?$AAv?$AAe?$AA?5?$AAI?$AAN?$AA?5?$AAd@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, ":"
	DCB	0x0, " ", 0x0, "C", 0x0, "o", 0x0, "u", 0x0, "l", 0x0, "d"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "o"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "W", 0x0, "a"
	DCB	0x0, "v", 0x0, "e", 0x0, " ", 0x0, "I", 0x0, "N", 0x0, " "
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@HDFMGNCL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAw?$AAa?$AAv?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAa?$AAv?$AAa?$AAi?$AAl?$AAa?$AAb?$AAl?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, ":"
	DCB	0x0, " ", 0x0, "N", 0x0, "o", 0x0, " ", 0x0, "w", 0x0, "a"
	DCB	0x0, "v", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "a", 0x0, "v"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, " ", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "t"
	DCB	0x0, "h", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "p", 0x0, "l"
	DCB	0x0, "a", 0x0, "t", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, "m"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T32428|

  00008		 |?ListMixerControls@@YAHH@Z| PROC	; ListMixerControls

; 29   : {

  00008		 |$LN100@ListMixerC|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddfa1	 sub         sp, sp, #0xA1, 30
  00010		 |$M32429|
  00010	e1a04000	 mov         r4, r0
  00014	e59f3814	 ldr         r3, [pc, #0x814]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3280	 str         r3, [sp, #0x280]

; 30   : 	BOOL				bRet = FALSE;
; 31   : 	MMRESULT			mr = MMSYSERR_NOERROR;
; 32   : 	HMIXER				hMixer = NULL;
; 33   : 	HWAVEIN				hWaveIn = NULL;
; 34   : 	DWORD				dwMixerNumDevs = 0;
; 35   : 	HANDLE				hevDone = NULL;
; 36   :     WAVEFORMATEX		wfx;
; 37   : 	MIXERCONTROLDETAILS sMixerControlDetails;
; 38   : 	MIXERLINECONTROLS	sMixerLineControls;
; 39   : 	MIXERCONTROL*		pMixerControls = NULL;
; 40   : 	MIXERCONTROLDETAILS_LISTTEXT* pMixerControlListText = NULL;
; 41   : 	MIXERCONTROLDETAILS_BOOLEAN* pMixerControlDetailsBoolean = NULL;
; 42   : 	MIXERCONTROLDETAILS_UNSIGNED* pMixerControlDetailsUnsigned = NULL;
; 43   : 	MIXERLINE			sMixerLine;
; 44   : 
; 45   :     wfx.cbSize = 0;
; 46   :     wfx.wFormatTag = WAVE_FORMAT_PCM;
; 47   :     wfx.wBitsPerSample = 16;
; 48   :     wfx.nSamplesPerSec = 44100;
; 49   :     wfx.nChannels = 1;
; 50   :     wfx.nBlockAlign = wfx.nChannels * wfx.wBitsPerSample / 8;
; 51   :     wfx.nAvgBytesPerSec = wfx.nBlockAlign * wfx.nSamplesPerSec;

  00020	e3a0e000	 mov         lr, #0

; 52   : 
; 53   :     hevDone = CreateEvent(NULL, FALSE, FALSE, NULL);

  00024	e58de008	 str         lr, [sp, #8]
  00028	e3a03b2b	 mov         r3, #0x2B, 22
  0002c	e3a02b56	 mov         r2, #0x56, 22
  00030	e3a0e001	 mov         lr, #1
  00034	e3833044	 orr         r3, r3, #0x44
  00038	e3822088	 orr         r2, r2, #0x88
  0003c	e1cde5b6	 strh        lr, [sp, #0x56]
  00040	e3a06000	 mov         r6, #0
  00044	e3a0e002	 mov         lr, #2
  00048	e3a07000	 mov         r7, #0
  0004c	e3a09001	 mov         r9, #1
  00050	e3a0b010	 mov         r11, #0x10
  00054	e58d3058	 str         r3, [sp, #0x58]
  00058	e58d205c	 str         r2, [sp, #0x5C]
  0005c	e3a03000	 mov         r3, #0
  00060	e3a02000	 mov         r2, #0
  00064	e3a01000	 mov         r1, #0
  00068	e3a00000	 mov         r0, #0
  0006c	e58d6024	 str         r6, [sp, #0x24]
  00070	e1cde6b0	 strh        lr, [sp, #0x60]
  00074	e3a05000	 mov         r5, #0
  00078	e3a0a000	 mov         r10, #0
  0007c	e3a06000	 mov         r6, #0
  00080	e3a08000	 mov         r8, #0
  00084	e1cd76b4	 strh        r7, [sp, #0x64]
  00088	e1cd95b4	 strh        r9, [sp, #0x54]
  0008c	e1cdb6b2	 strh        r11, [sp, #0x62]
  00090	eb000000	 bl          CreateEventW
  00094	e1b07000	 movs        r7, r0
  00098	e58d702c	 str         r7, [sp, #0x2C]

; 54   :     if (hevDone == NULL) 

  0009c	1a000003	 bne         |$LN66@ListMixerC|

; 55   : 	{
; 56   :         return 0;

  000a0	e59d0280	 ldr         r0, [sp, #0x280]
  000a4	eb000000	 bl          __security_check_cookie
  000a8	e3a05000	 mov         r5, #0
  000ac	ea0001bd	 b           |$LN67@ListMixerC|
  000b0		 |$LN66@ListMixerC|

; 57   :     }
; 58   : 
; 59   : 	dwMixerNumDevs = mixerGetNumDevs();

  000b0	eb000000	 bl          mixerGetNumDevs
  000b4	e3500000	 cmp         r0, #0

; 60   : 	if (dwMixerNumDevs == 0)

  000b8	1a000002	 bne         |$LN65@ListMixerC|

; 61   : 	{
; 62   : 		_tprintf(_T("ERROR : No wave device available on this platform\n"));

  000bc	e59f0768	 ldr         r0, [pc, #0x768]
  000c0	eb000000	 bl          wprintf
  000c4	ea0001ad	 b           |$LN4@ListMixerC|
  000c8		 |$LN65@ListMixerC|

; 63   : 		goto cleanUp;
; 64   : 	}
; 65   : 	
; 66   : 	mr = waveInOpen(&hWaveIn, 0, &wfx, (DWORD)hevDone, 0, CALLBACK_EVENT);

  000c8	e3a03805	 mov         r3, #5, 16
  000cc	e3a02000	 mov         r2, #0
  000d0	e58d3004	 str         r3, [sp, #4]
  000d4	e58d2000	 str         r2, [sp]
  000d8	e1a03007	 mov         r3, r7
  000dc	e28d2054	 add         r2, sp, #0x54
  000e0	e3a01000	 mov         r1, #0
  000e4	e28d0024	 add         r0, sp, #0x24
  000e8	eb000000	 bl          waveInOpen
  000ec	e3500000	 cmp         r0, #0

; 67   : 	if (mr != MMSYSERR_NOERROR)

  000f0	0a000002	 beq         |$LN63@ListMixerC|

; 68   : 	{
; 69   : 		_tprintf(_T("ERROR : Could not open Wave IN device\n"));

  000f4	e59f072c	 ldr         r0, [pc, #0x72C]
  000f8	eb000000	 bl          wprintf
  000fc	ea00019f	 b           |$LN4@ListMixerC|
  00100		 |$LN63@ListMixerC|

; 70   : 		goto cleanUp;
; 71   : 	}
; 72   : 
; 73   : 	mr = mixerOpen(&hMixer, (UINT)hWaveIn, (DWORD)hevDone, 0, MIXER_OBJECTF_HWAVEIN);

  00100	e59d1024	 ldr         r1, [sp, #0x24]
  00104	e3a0e20a	 mov         lr, #0xA, 4
  00108	e3a03000	 mov         r3, #0
  0010c	e1a02007	 mov         r2, r7
  00110	e28d0008	 add         r0, sp, #8
  00114	e58de000	 str         lr, [sp]
  00118	eb000000	 bl          mixerOpen
  0011c	e3500000	 cmp         r0, #0

; 74   : 	if (mr != MMSYSERR_NOERROR)

  00120	0a000002	 beq         |$LN61@ListMixerC|

; 75   : 	{
; 76   : 		_tprintf(_T("ERROR : Could not get an handle on the mixer device\n"));

  00124	e59f06f8	 ldr         r0, [pc, #0x6F8]
  00128	eb000000	 bl          wprintf
  0012c	ea000193	 b           |$LN4@ListMixerC|
  00130		 |$LN61@ListMixerC|

; 77   : 		goto cleanUp;
; 78   : 	}
; 79   : 
; 80   : 	// Initialize Mixer Line Structure
; 81   : 	memset(&sMixerLine, 0, sizeof(sMixerLine));

  00130	e3a02f46	 mov         r2, #0x46, 30
  00134	e3a01000	 mov         r1, #0
  00138	e28d0068	 add         r0, sp, #0x68
  0013c	eb000000	 bl          memset

; 82   : 	sMixerLine.cbStruct = sizeof(sMixerLine);

  00140	e3a03f46	 mov         r3, #0x46, 30

; 83   : 	sMixerLine.dwComponentType = bIn ? MIXERLINE_COMPONENTTYPE_DST_WAVEIN : MIXERLINE_COMPONENTTYPE_DST_SPEAKERS;

  00144	e3540000	 cmp         r4, #0

; 84   : 
; 85   : 	mixerGetLineInfo((HMIXEROBJ)hMixer, &sMixerLine, MIXER_OBJECTF_HMIXER|MIXER_GETLINEINFOF_COMPONENTTYPE);

  00148	e59d0008	 ldr         r0, [sp, #8]
  0014c	e58d3068	 str         r3, [sp, #0x68]
  00150	13a03007	 movne       r3, #7
  00154	03a03004	 moveq       r3, #4
  00158	e3a0210e	 mov         r2, #0xE, 2
  0015c	e28d1068	 add         r1, sp, #0x68
  00160	e58d3080	 str         r3, [sp, #0x80]
  00164	eb000000	 bl          mixerGetLineInfo

; 86   : 	if (mr != MMSYSERR_NOERROR)
; 87   : 	{
; 88   : 		_tprintf(_T("ERROR : Could not get line info\n"));
; 89   : 		goto cleanUp;
; 90   : 	}
; 91   : 
; 92   : 	// Allocate memory to store the Mixer Controls
; 93   : 	pMixerControls = (MIXERCONTROL*)LocalAlloc(LPTR, sMixerLine.cControls * sizeof(MIXERCONTROL));

  00168	e59d308c	 ldr         r3, [sp, #0x8C]
  0016c	e3a020e4	 mov         r2, #0xE4
  00170	e3a00040	 mov         r0, #0x40
  00174	e0010293	 mul         r1, r3, r2
  00178	eb000000	 bl          LocalAlloc
  0017c	e1b0b000	 movs        r11, r0

; 94   : 	if (pMixerControls == NULL)

  00180	1a000002	 bne         |$LN57@ListMixerC|

; 95   : 	{
; 96   : 		_tprintf(_T("ERROR : Could not allocate memory\n"));

  00184	e59f0660	 ldr         r0, [pc, #0x660]
  00188	eb000000	 bl          wprintf

; 323  : 		}
; 324  : 	}
; 325  : 
; 326  : 	bRet = TRUE;

  0018c	ea000178	 b           |$LN5@ListMixerC|
  00190		 |$LN57@ListMixerC|

; 97   : 		goto cleanUp;
; 98   : 	}
; 99   : 
; 100  : 	// Initialize Mixer Line Controls Structure
; 101  : 	memset(&sMixerLineControls, 0, sizeof(sMixerLineControls));

  00190	e3a02018	 mov         r2, #0x18
  00194	e3a01000	 mov         r1, #0
  00198	e28d0038	 add         r0, sp, #0x38
  0019c	eb000000	 bl          memset

; 102  : 	sMixerLineControls.dwLineID = sMixerLine.dwLineID;
; 103  : 	sMixerLineControls.cbStruct = sizeof(sMixerLineControls);
; 104  : 	sMixerLineControls.cControls = sMixerLine.cControls;

  001a0	e59d208c	 ldr         r2, [sp, #0x8C]
  001a4	e59d3074	 ldr         r3, [sp, #0x74]

; 105  : 	sMixerLineControls.cbmxctrl = sizeof(MIXERCONTROL);
; 106  : 	sMixerLineControls.pamxctrl = pMixerControls;
; 107  : 
; 108  : 	mr = mixerGetLineControls((HMIXEROBJ)hMixer, &sMixerLineControls, MIXER_OBJECTF_HMIXER|MIXER_GETLINECONTROLSF_ALL);

  001a8	e59d0008	 ldr         r0, [sp, #8]
  001ac	e58d2044	 str         r2, [sp, #0x44]
  001b0	e3a0e018	 mov         lr, #0x18
  001b4	e3a090e4	 mov         r9, #0xE4
  001b8	e3a02102	 mov         r2, #2, 2
  001bc	e28d1038	 add         r1, sp, #0x38
  001c0	e58d303c	 str         r3, [sp, #0x3C]
  001c4	e58de038	 str         lr, [sp, #0x38]
  001c8	e58d9048	 str         r9, [sp, #0x48]
  001cc	e58db04c	 str         r11, [sp, #0x4C]
  001d0	eb000000	 bl          mixerGetLineControls
  001d4	e3500000	 cmp         r0, #0

; 109  : 	if (mr != MMSYSERR_NOERROR)

  001d8	0a000002	 beq         |$LN55@ListMixerC|

; 110  : 	{
; 111  : 		_tprintf(_T("ERROR : Could not get line controls\n"));

  001dc	e59f063c	 ldr         r0, [pc, #0x63C]
  001e0	eb000000	 bl          wprintf

; 323  : 		}
; 324  : 	}
; 325  : 
; 326  : 	bRet = TRUE;

  001e4	ea000162	 b           |$LN5@ListMixerC|
  001e8		 |$LN55@ListMixerC|

; 112  : 		goto cleanUp;
; 113  : 	}
; 114  : 
; 115  : 	_tprintf(_T("%s : %s\r\n"), bIn ? _T("WAVE IN") : _T("WAVE OUT"), sMixerLine.szName);

  001e8	e3540000	 cmp         r4, #0
  001ec	159f1628	 ldrne       r1, [pc, #0x628]
  001f0	059f1620	 ldreq       r1, [pc, #0x620]
  001f4	e59f0618	 ldr         r0, [pc, #0x618]
  001f8	e28d20b0	 add         r2, sp, #0xB0
  001fc	eb000000	 bl          wprintf

; 116  : 	for (DWORD i=0; i<sMixerLineControls.cControls;i++)

  00200	e59d3044	 ldr         r3, [sp, #0x44]
  00204	e3a0e000	 mov         lr, #0
  00208	e58de034	 str         lr, [sp, #0x34]
  0020c	e3530000	 cmp         r3, #0
  00210	0a00014c	 beq         |$LN51@ListMixerC|
  00214	e3a03217	 mov         r3, #0x17, 4
  00218	e3835801	 orr         r5, r3, #1, 16
  0021c	e3a03222	 mov         r3, #0x22, 4
  00220	e3839801	 orr         r9, r3, #1, 16
  00224	e3a07000	 mov         r7, #0
  00228	e58d9050	 str         r9, [sp, #0x50]
  0022c	e58d7028	 str         r7, [sp, #0x28]
  00230	e58d5030	 str         r5, [sp, #0x30]
  00234		 |$LL53@ListMixerC|

; 117  : 	{
; 118  : 		// Display control items if any
; 119  : 		if (sMixerLineControls.pamxctrl[i].cMultipleItems > 1)

  00234	e59d304c	 ldr         r3, [sp, #0x4C]
  00238	e0871003	 add         r1, r7, r3
  0023c	e5d10010	 ldrb        r0, [r1, #0x10]
  00240	e5d13011	 ldrb        r3, [r1, #0x11]
  00244	e5d12012	 ldrb        r2, [r1, #0x12]
  00248	e5d11013	 ldrb        r1, [r1, #0x13]
  0024c	e1803403	 orr         r3, r0, r3, lsl #8
  00250	e1833802	 orr         r3, r3, r2, lsl #16
  00254	e1833c01	 orr         r3, r3, r1, lsl #24
  00258	e3530001	 cmp         r3, #1

; 120  : 		{
; 121  : 			wchar_t indexStr[16];
; 122  : 			wchar_t valStr[16];
; 123  : 			_itow((int)i, indexStr, 10);

  0025c	e3a0200a	 mov         r2, #0xA
  00260	e1a0000e	 mov         r0, lr
  00264	9a00007f	 bls         |$LN50@ListMixerC|
  00268	e28d1e1a	 add         r1, sp, #0x1A, 28
  0026c	eb000000	 bl          _itow

; 124  : 			_tprintf(_T("\t%s: %s\r\n"), indexStr, sMixerLineControls.pamxctrl[i].szName);

  00270	e59d304c	 ldr         r3, [sp, #0x4C]
  00274	e59f0594	 ldr         r0, [pc, #0x594]
  00278	e28d1e1a	 add         r1, sp, #0x1A, 28
  0027c	e0873003	 add         r3, r7, r3
  00280	e2832034	 add         r2, r3, #0x34
  00284	eb000000	 bl          wprintf

; 125  : 
; 126  : 			DWORD dwNumItems = sMixerLineControls.pamxctrl[i].cMultipleItems;

  00288	e59d304c	 ldr         r3, [sp, #0x4C]

; 127  : 
; 128  : 			if (pMixerControlListText != NULL)
; 129  : 			{
; 130  : 				LocalFree(pMixerControlListText);
; 131  : 				pMixerControlListText = NULL;
; 132  : 			}
; 133  : 
; 134  : 			pMixerControlListText = (MIXERCONTROLDETAILS_LISTTEXT*)LocalAlloc(LPTR,
; 135  : 				dwNumItems * sizeof(MIXERCONTROLDETAILS_LISTTEXT));

  0028c	e3a00040	 mov         r0, #0x40
  00290	e0871003	 add         r1, r7, r3
  00294	e5d1e010	 ldrb        lr, [r1, #0x10]
  00298	e5d13011	 ldrb        r3, [r1, #0x11]
  0029c	e5d12012	 ldrb        r2, [r1, #0x12]
  002a0	e5d11013	 ldrb        r1, [r1, #0x13]
  002a4	e18e3403	 orr         r3, lr, r3, lsl #8
  002a8	e1833802	 orr         r3, r3, r2, lsl #16
  002ac	e1839c01	 orr         r9, r3, r1, lsl #24
  002b0	e0893209	 add         r3, r9, r9, lsl #4
  002b4	e1a01183	 mov         r1, r3, lsl #3
  002b8	eb000000	 bl          LocalAlloc
  002bc	e1b0a000	 movs        r10, r0

; 136  : 			if (pMixerControlListText == NULL)

  002c0	0a00013c	 beq         |$LN79@ListMixerC|

; 139  : 				goto cleanUp;
; 140  : 			}
; 141  : 
; 142  : 			// Initialize Mixer Details Structure
; 143  : 			memset(&sMixerControlDetails, 0, sizeof(sMixerControlDetails));

  002c4	e3a02018	 mov         r2, #0x18
  002c8	e3a01000	 mov         r1, #0
  002cc	e28d000c	 add         r0, sp, #0xC
  002d0	eb000000	 bl          memset

; 144  : 			sMixerControlDetails.dwControlID = sMixerLineControls.pamxctrl[i].dwControlID;

  002d4	e59d304c	 ldr         r3, [sp, #0x4C]

; 145  : 			sMixerControlDetails.cbStruct = sizeof(sMixerControlDetails);
; 146  : 			sMixerControlDetails.cChannels = sMixerLine.cChannels;

  002d8	e59d4084	 ldr         r4, [sp, #0x84]

; 147  : 			sMixerControlDetails.cMultipleItems = sMixerLineControls.pamxctrl[i].cMultipleItems;
; 148  : 			sMixerControlDetails.cbDetails = sizeof(MIXERCONTROLDETAILS_LISTTEXT);
; 149  : 			sMixerControlDetails.paDetails = (LPVOID)pMixerControlListText;
; 150  : 
; 151  : 			// Get control items names
; 152  : 			mr = mixerGetControlDetails((HMIXEROBJ)hMixer, &sMixerControlDetails, MIXER_OBJECTF_HMIXER|MIXER_GETCONTROLDETAILSF_LISTTEXT );

  002dc	e59d0008	 ldr         r0, [sp, #8]
  002e0	e0875003	 add         r5, r7, r3
  002e4	e5d5e004	 ldrb        lr, [r5, #4]
  002e8	e5d53005	 ldrb        r3, [r5, #5]
  002ec	e5d52006	 ldrb        r2, [r5, #6]
  002f0	e5d51007	 ldrb        r1, [r5, #7]
  002f4	e18e3403	 orr         r3, lr, r3, lsl #8
  002f8	e1833802	 orr         r3, r3, r2, lsl #16
  002fc	e1833c01	 orr         r3, r3, r1, lsl #24
  00300	e58d3010	 str         r3, [sp, #0x10]
  00304	e3a03018	 mov         r3, #0x18
  00308	e58d300c	 str         r3, [sp, #0xC]
  0030c	e58d4014	 str         r4, [sp, #0x14]
  00310	e5d5e010	 ldrb        lr, [r5, #0x10]
  00314	e5d53011	 ldrb        r3, [r5, #0x11]
  00318	e5d52012	 ldrb        r2, [r5, #0x12]
  0031c	e5d51013	 ldrb        r1, [r5, #0x13]
  00320	e18e3403	 orr         r3, lr, r3, lsl #8
  00324	e1833802	 orr         r3, r3, r2, lsl #16
  00328	e1833c01	 orr         r3, r3, r1, lsl #24
  0032c	e58d3018	 str         r3, [sp, #0x18]
  00330	e3a03088	 mov         r3, #0x88
  00334	e3a02106	 mov         r2, #6, 2
  00338	e28d100c	 add         r1, sp, #0xC
  0033c	e58d301c	 str         r3, [sp, #0x1C]
  00340	e58da020	 str         r10, [sp, #0x20]
  00344	eb000000	 bl          mixerGetControlDetails
  00348	e3500000	 cmp         r0, #0

; 153  : 			if (mr != MMSYSERR_NOERROR)

  0034c	1a00011f	 bne         |$LN87@ListMixerC|

; 154  : 			{
; 155  : 				_tprintf(_T("ERROR : Could not get control details\n"));
; 156  : 				goto cleanUp;
; 157  : 			}
; 158  : 
; 159  : 			// Get control items values
; 160  : 
; 161  : 			// Initialize Mixer Details Structure
; 162  : 			switch(sMixerLineControls.pamxctrl[i].dwControlType)

  00350	e59d304c	 ldr         r3, [sp, #0x4C]
  00354	e0871003	 add         r1, r7, r3
  00358	e5d1e008	 ldrb        lr, [r1, #8]
  0035c	e5d13009	 ldrb        r3, [r1, #9]
  00360	e5d1200a	 ldrb        r2, [r1, #0xA]
  00364	e5d1100b	 ldrb        r1, [r1, #0xB]
  00368	e18e3403	 orr         r3, lr, r3, lsl #8
  0036c	e1833802	 orr         r3, r3, r2, lsl #16
  00370	e59d2030	 ldr         r2, [sp, #0x30]
  00374	e1833c01	 orr         r3, r3, r1, lsl #24
  00378	e1530002	 cmp         r3, r2
  0037c	1a00010f	 bne         |$LN84@ListMixerC|

; 163  : 			{
; 164  : 				case MIXERCONTROL_CONTROLTYPE_MUX:
; 165  : 					
; 166  : 					if (pMixerControlDetailsBoolean != NULL)

  00380	e3560000	 cmp         r6, #0

; 167  : 					{
; 168  : 						LocalFree(pMixerControlDetailsBoolean);

  00384	11a00006	 movne       r0, r6
  00388	1b000000	 blne        LocalFree

; 169  : 						pMixerControlDetailsBoolean = NULL;
; 170  : 					}
; 171  : 
; 172  : 					pMixerControlDetailsBoolean = (MIXERCONTROLDETAILS_BOOLEAN*)LocalAlloc(LPTR,
; 173  : 						sMixerControlDetails.cChannels      *
; 174  : 						sMixerControlDetails.cMultipleItems * 
; 175  : 						sizeof(MIXERCONTROLDETAILS_BOOLEAN));

  0038c	e59d2018	 ldr         r2, [sp, #0x18]
  00390	e59d3014	 ldr         r3, [sp, #0x14]
  00394	e3a00040	 mov         r0, #0x40
  00398	e0030392	 mul         r3, r2, r3
  0039c	e1a01103	 mov         r1, r3, lsl #2
  003a0	eb000000	 bl          LocalAlloc
  003a4	e1b06000	 movs        r6, r0

; 176  : 					
; 177  : 					if (pMixerControlDetailsBoolean == NULL)

  003a8	0a000106	 beq         |$LN85@ListMixerC|

; 178  : 					{
; 179  : 						_tprintf(_T("ERROR : Failed to allocate memory\n"));
; 180  : 						goto cleanUp;
; 181  : 					}
; 182  : 					
; 183  : 					sMixerControlDetails.cbDetails = sizeof(MIXERCONTROLDETAILS_BOOLEAN);
; 184  : 					sMixerControlDetails.paDetails = (LPVOID)pMixerControlDetailsBoolean;
; 185  : 					break;
; 186  : 				default:
; 187  : 					_tprintf(_T("ERROR : Unsupported control type\n"));
; 188  : 					goto cleanUp;
; 189  : 			}
; 190  : 
; 191  : 			mr = mixerGetControlDetails((HMIXEROBJ)hMixer, &sMixerControlDetails, MIXER_OBJECTF_HMIXER|MIXER_GETCONTROLDETAILSF_VALUE );

  003ac	e59d0008	 ldr         r0, [sp, #8]
  003b0	e3a03004	 mov         r3, #4
  003b4	e3a02102	 mov         r2, #2, 2
  003b8	e28d100c	 add         r1, sp, #0xC
  003bc	e58d301c	 str         r3, [sp, #0x1C]
  003c0	e58d6020	 str         r6, [sp, #0x20]
  003c4	eb000000	 bl          mixerGetControlDetails
  003c8	e3500000	 cmp         r0, #0

; 192  : 			if (mr != MMSYSERR_NOERROR)

  003cc	1a0000ff	 bne         |$LN87@ListMixerC|

; 193  : 			{
; 194  : 				_tprintf(_T("ERROR : Could not get control details\n"));
; 195  : 				goto cleanUp;
; 196  : 			}
; 197  : 
; 198  : 			// Display all control items
; 199  : 			for (DWORD j=0; j<dwNumItems; j++)

  003d0	e3a05000	 mov         r5, #0
  003d4	e3590000	 cmp         r9, #0
  003d8	0a00001c	 beq         |$LN32@ListMixerC|
  003dc	e1a04006	 mov         r4, r6
  003e0	e28a7008	 add         r7, r10, #8
  003e4		 |$LL34@ListMixerC|

; 200  : 			{
; 201  : 				_itow((int)j, indexStr, 10);

  003e4	e3a0200a	 mov         r2, #0xA
  003e8	e28d1e1a	 add         r1, sp, #0x1A, 28
  003ec	e1a00005	 mov         r0, r5
  003f0	eb000000	 bl          _itow

; 202  : 				wcscpy_s(valStr, 16, pMixerControlDetailsBoolean[j].fValue ? TEXT("TRUE") : TEXT("FALSE"));

  003f4	e5d40000	 ldrb        r0, [r4]
  003f8	e5d43001	 ldrb        r3, [r4, #1]
  003fc	e5d42002	 ldrb        r2, [r4, #2]
  00400	e5d41003	 ldrb        r1, [r4, #3]
  00404	e1803403	 orr         r3, r0, r3, lsl #8
  00408	e1833802	 orr         r3, r3, r2, lsl #16
  0040c	e1933c01	 orrs        r3, r3, r1, lsl #24
  00410	159f23e0	 ldrne       r2, [pc, #0x3E0]
  00414	059f23d8	 ldreq       r2, [pc, #0x3D8]
  00418	e3a01010	 mov         r1, #0x10
  0041c	e28d0d09	 add         r0, sp, #9, 26
  00420	eb000000	 bl          wcscpy_s

; 203  : 				_tprintf(_T("\t\t%s: %s = %s\r\n"), 
; 204  : 					indexStr, 
; 205  : 					pMixerControlListText[j].szName,
; 206  : 					valStr);

  00424	e59f03e0	 ldr         r0, [pc, #0x3E0]
  00428	e28d3d09	 add         r3, sp, #9, 26
  0042c	e1a02007	 mov         r2, r7
  00430	e28d1e1a	 add         r1, sp, #0x1A, 28
  00434	eb000000	 bl          wprintf
  00438	e2855001	 add         r5, r5, #1
  0043c	e1550009	 cmp         r5, r9
  00440	e2844004	 add         r4, r4, #4
  00444	e2877088	 add         r7, r7, #0x88
  00448	3affffe5	 bcc         |$LL34@ListMixerC|

; 317  : 			}
; 318  : 
; 319  : 			_tprintf(_T("\t%s: %s = %s\r\n"), 
; 320  : 				indexStr, 
; 321  : 				sMixerLineControls.pamxctrl[i].szName,
; 322  : 				valStr);

  0044c	e59d7028	 ldr         r7, [sp, #0x28]
  00450		 |$LN32@ListMixerC|

; 207  : 			}
; 208  : 
; 209  : 			// Free allocated memory
; 210  : 			LocalFree(pMixerControlListText);

  00450	e1a0000a	 mov         r0, r10
  00454	eb000000	 bl          LocalFree

; 211  : 			pMixerControlListText = NULL;
; 212  : 		}
; 213  : 		else // Otherwise display item and its value

  00458	e59d5030	 ldr         r5, [sp, #0x30]
  0045c	e59d9050	 ldr         r9, [sp, #0x50]
  00460	e3a0a000	 mov         r10, #0
  00464	ea0000af	 b           |$LN52@ListMixerC|
  00468		 |$LN50@ListMixerC|

; 214  : 		{
; 215  : 			wchar_t indexStr[16];
; 216  : 			wchar_t valStr[64];
; 217  : 			_itow((int)i, indexStr, 10);

  00468	e28d1e26	 add         r1, sp, #0x26, 28
  0046c	eb000000	 bl          _itow

; 218  : 
; 219  : 			// Get control value
; 220  : 
; 221  : 			// Initialize Mixer Details Structure
; 222  : 			memset(&sMixerControlDetails, 0, sizeof(sMixerControlDetails));

  00470	e3a02018	 mov         r2, #0x18
  00474	e3a01000	 mov         r1, #0
  00478	e28d000c	 add         r0, sp, #0xC
  0047c	eb000000	 bl          memset

; 223  : 			sMixerControlDetails.dwControlID = sMixerLineControls.pamxctrl[i].dwControlID;

  00480	e59d304c	 ldr         r3, [sp, #0x4C]

; 224  : 			sMixerControlDetails.cbStruct = sizeof(sMixerControlDetails);
; 225  : 			sMixerControlDetails.cChannels = sMixerLine.cChannels;

  00484	e59d4084	 ldr         r4, [sp, #0x84]
  00488	e087e003	 add         lr, r7, r3
  0048c	e5de0004	 ldrb        r0, [lr, #4]
  00490	e5de3005	 ldrb        r3, [lr, #5]
  00494	e5de2006	 ldrb        r2, [lr, #6]
  00498	e5de1007	 ldrb        r1, [lr, #7]
  0049c	e1803403	 orr         r3, r0, r3, lsl #8
  004a0	e1833802	 orr         r3, r3, r2, lsl #16
  004a4	e1833c01	 orr         r3, r3, r1, lsl #24
  004a8	e58d3010	 str         r3, [sp, #0x10]
  004ac	e3a03018	 mov         r3, #0x18
  004b0	e58d300c	 str         r3, [sp, #0xC]

; 226  : 			sMixerControlDetails.cMultipleItems = 1;

  004b4	e3a03001	 mov         r3, #1
  004b8	e58d3018	 str         r3, [sp, #0x18]
  004bc	e58d4014	 str         r4, [sp, #0x14]

; 227  : 
; 228  : 			switch(sMixerLineControls.pamxctrl[i].dwControlType)

  004c0	e5de0008	 ldrb        r0, [lr, #8]
  004c4	e5de3009	 ldrb        r3, [lr, #9]
  004c8	e5de200a	 ldrb        r2, [lr, #0xA]
  004cc	e5de100b	 ldrb        r1, [lr, #0xB]
  004d0	e1803403	 orr         r3, r0, r3, lsl #8
  004d4	e1833802	 orr         r3, r3, r2, lsl #16
  004d8	e1833c01	 orr         r3, r3, r1, lsl #24
  004dc	e3a01202	 mov         r1, #2, 4
  004e0	e3812801	 orr         r2, r1, #1, 16
  004e4	e1530002	 cmp         r3, r2
  004e8	0a000007	 beq         |$LN28@ListMixerC|
  004ec	e1530009	 cmp         r3, r9
  004f0	0a000005	 beq         |$LN28@ListMixerC|
  004f4	e3a01215	 mov         r1, #0x15, 4
  004f8	e3812803	 orr         r2, r1, #3, 16
  004fc	e1530002	 cmp         r3, r2
  00500	0a00002e	 beq         |$LN24@ListMixerC|
  00504	e1530005	 cmp         r3, r5
  00508	1a0000ac	 bne         |$LN84@ListMixerC|
  0050c		 |$LN28@ListMixerC|

; 229  : 			{
; 230  : 				case MIXERCONTROL_CONTROLTYPE_BOOLEAN:
; 231  : 				case MIXERCONTROL_CONTROLTYPE_MUTE:
; 232  : 				case MIXERCONTROL_CONTROLTYPE_MUX:
; 233  : 					if (pMixerControlDetailsBoolean != NULL)

  0050c	e3560000	 cmp         r6, #0
  00510	0a000002	 beq         |$LN27@ListMixerC|

; 234  : 					{
; 235  : 						LocalFree(pMixerControlDetailsBoolean);

  00514	e1a00006	 mov         r0, r6
  00518	eb000000	 bl          LocalFree
  0051c	e59d4014	 ldr         r4, [sp, #0x14]
  00520		 |$LN27@ListMixerC|

; 236  : 						pMixerControlDetailsBoolean = NULL;
; 237  : 					}
; 238  : 
; 239  : 					pMixerControlDetailsBoolean = (MIXERCONTROLDETAILS_BOOLEAN*)LocalAlloc(LPTR,
; 240  : 						sMixerControlDetails.cChannels      *
; 241  : 						sizeof(MIXERCONTROLDETAILS_BOOLEAN));

  00520	e1a01104	 mov         r1, r4, lsl #2
  00524	e3a00040	 mov         r0, #0x40
  00528	eb000000	 bl          LocalAlloc
  0052c	e1b06000	 movs        r6, r0

; 242  : 					
; 243  : 					if (pMixerControlDetailsBoolean == NULL)

  00530	0a0000a4	 beq         |$LN85@ListMixerC|

; 244  : 					{
; 245  : 						_tprintf(_T("ERROR : Failed to allocate memory\n"));
; 246  : 						goto cleanUp;
; 247  : 					}
; 248  : 					
; 249  : 					sMixerControlDetails.cbDetails = sizeof(MIXERCONTROLDETAILS_BOOLEAN);
; 250  : 					sMixerControlDetails.paDetails = (LPVOID)pMixerControlDetailsBoolean;

  00534	e58d6020	 str         r6, [sp, #0x20]
  00538		 |$LN93@ListMixerC|

; 275  : 					goto cleanUp;
; 276  : 			}
; 277  : 
; 278  : 			mr = mixerGetControlDetails((HMIXEROBJ)hMixer, &sMixerControlDetails, MIXER_OBJECTF_HMIXER|MIXER_GETCONTROLDETAILSF_VALUE );

  00538	e59d0008	 ldr         r0, [sp, #8]
  0053c	e3a03004	 mov         r3, #4
  00540	e3a02102	 mov         r2, #2, 2
  00544	e28d100c	 add         r1, sp, #0xC
  00548	e58d301c	 str         r3, [sp, #0x1C]
  0054c	eb000000	 bl          mixerGetControlDetails
  00550	e3500000	 cmp         r0, #0

; 279  : 			if (mr != MMSYSERR_NOERROR)

  00554	1a00009d	 bne         |$LN87@ListMixerC|

; 282  : 				goto cleanUp;
; 283  : 			}
; 284  : 
; 285  : 			switch(sMixerLineControls.pamxctrl[i].dwControlType)

  00558	e59d304c	 ldr         r3, [sp, #0x4C]
  0055c	e0871003	 add         r1, r7, r3
  00560	e5d10008	 ldrb        r0, [r1, #8]
  00564	e5d13009	 ldrb        r3, [r1, #9]
  00568	e5d1200a	 ldrb        r2, [r1, #0xA]
  0056c	e5d1100b	 ldrb        r1, [r1, #0xB]
  00570	e1803403	 orr         r3, r0, r3, lsl #8
  00574	e1833802	 orr         r3, r3, r2, lsl #16
  00578	e1833c01	 orr         r3, r3, r1, lsl #24
  0057c	e3a01202	 mov         r1, #2, 4
  00580	e3812801	 orr         r2, r1, #1, 16
  00584	e1530002	 cmp         r3, r2
  00588	0a000053	 beq         |$LN14@ListMixerC|
  0058c	e1530009	 cmp         r3, r9
  00590	0a000051	 beq         |$LN14@ListMixerC|
  00594	e3a01215	 mov         r1, #0x15, 4
  00598	e3812803	 orr         r2, r1, #3, 16
  0059c	e1530002	 cmp         r3, r2
  005a0	0a000012	 beq         |$LN13@ListMixerC|
  005a4	e1530005	 cmp         r3, r5
  005a8	0a00004b	 beq         |$LN14@ListMixerC|

; 314  : 				default:
; 315  : 					_itow(-1, valStr, 16);

  005ac	e3a02010	 mov         r2, #0x10
  005b0	e28d1d07	 add         r1, sp, #7, 26
  005b4	e3e00000	 mvn         r0, #0
  005b8	eb000000	 bl          _itow

; 316  : 					break;

  005bc	ea000052	 b           |$LN15@ListMixerC|
  005c0		 |$LN24@ListMixerC|

; 251  : 					break;
; 252  : 				case MIXERCONTROL_CONTROLTYPE_VOLUME:
; 253  : 					
; 254  : 					if (pMixerControlDetailsUnsigned != NULL)

  005c0	e3580000	 cmp         r8, #0
  005c4	0a000002	 beq         |$LN23@ListMixerC|

; 255  : 					{
; 256  : 						LocalFree(pMixerControlDetailsUnsigned);

  005c8	e1a00008	 mov         r0, r8
  005cc	eb000000	 bl          LocalFree
  005d0	e59d4014	 ldr         r4, [sp, #0x14]
  005d4		 |$LN23@ListMixerC|

; 257  : 						pMixerControlDetailsUnsigned = NULL;
; 258  : 					}
; 259  : 
; 260  : 					pMixerControlDetailsUnsigned = (MIXERCONTROLDETAILS_UNSIGNED*)LocalAlloc(LPTR,
; 261  : 						sMixerControlDetails.cChannels      *
; 262  : 						sizeof(MIXERCONTROLDETAILS_UNSIGNED));

  005d4	e1a01104	 mov         r1, r4, lsl #2
  005d8	e3a00040	 mov         r0, #0x40
  005dc	eb000000	 bl          LocalAlloc
  005e0	e1b08000	 movs        r8, r0

; 263  : 
; 264  : 					if (pMixerControlDetailsUnsigned == NULL)

  005e4	0a000077	 beq         |$LN85@ListMixerC|

; 267  : 						goto cleanUp;
; 268  : 					}
; 269  : 					
; 270  : 					sMixerControlDetails.cbDetails = sizeof(MIXERCONTROLDETAILS_UNSIGNED);
; 271  : 					sMixerControlDetails.paDetails = (LPVOID)pMixerControlDetailsUnsigned;

  005e8	e58d8020	 str         r8, [sp, #0x20]

; 272  : 					break;

  005ec	eaffffd1	 b           |$LN93@ListMixerC|
  005f0		 |$LN13@ListMixerC|

; 291  : 					break;
; 292  : 				case MIXERCONTROL_CONTROLTYPE_VOLUME:
; 293  : 					wchar_t tmpStr[16];
; 294  : 					if (sMixerControlDetails.cChannels == 2)

  005f0	e59d3014	 ldr         r3, [sp, #0x14]
  005f4	e3530002	 cmp         r3, #2
  005f8	1a000020	 bne         |$LN12@ListMixerC|

; 295  : 					{
; 296  : 						_itow(pMixerControlDetailsUnsigned[0].dwValue, tmpStr, 16);

  005fc	e5d80000	 ldrb        r0, [r8]
  00600	e5d83001	 ldrb        r3, [r8, #1]
  00604	e5d82002	 ldrb        r2, [r8, #2]
  00608	e5d81003	 ldrb        r1, [r8, #3]
  0060c	e1803403	 orr         r3, r0, r3, lsl #8
  00610	e1833802	 orr         r3, r3, r2, lsl #16
  00614	e1830c01	 orr         r0, r3, r1, lsl #24
  00618	e28d1d06	 add         r1, sp, #6, 26
  0061c	e3a02010	 mov         r2, #0x10
  00620	eb000000	 bl          _itow

; 297  : 						wcscpy_s(valStr, 16, TEXT("L 0x"));

  00624	e59f21dc	 ldr         r2, [pc, #0x1DC]
  00628	e3a01010	 mov         r1, #0x10
  0062c	e28d0d07	 add         r0, sp, #7, 26
  00630	eb000000	 bl          wcscpy_s

; 298  : 						wcsncat(valStr, tmpStr, 16);

  00634	e3a02010	 mov         r2, #0x10
  00638	e28d1d06	 add         r1, sp, #6, 26
  0063c	e28d0d07	 add         r0, sp, #7, 26
  00640	eb000000	 bl          wcsncat

; 299  : 						_itow(pMixerControlDetailsUnsigned[1].dwValue, tmpStr, 16);

  00644	e5d80004	 ldrb        r0, [r8, #4]
  00648	e5d83005	 ldrb        r3, [r8, #5]
  0064c	e5d82006	 ldrb        r2, [r8, #6]
  00650	e5d81007	 ldrb        r1, [r8, #7]
  00654	e1803403	 orr         r3, r0, r3, lsl #8
  00658	e1833802	 orr         r3, r3, r2, lsl #16
  0065c	e1830c01	 orr         r0, r3, r1, lsl #24
  00660	e28d1d06	 add         r1, sp, #6, 26
  00664	e3a02010	 mov         r2, #0x10
  00668	eb000000	 bl          _itow

; 300  : 						wcsncat(valStr, TEXT(" | R 0x"), 16);

  0066c	e59f1190	 ldr         r1, [pc, #0x190]
  00670	e3a02010	 mov         r2, #0x10
  00674	e28d0d07	 add         r0, sp, #7, 26
  00678	eb000000	 bl          wcsncat

; 301  : 						wcsncat(valStr, tmpStr, 16);

  0067c	ea00000f	 b           |$LN94@ListMixerC|
  00680		 |$LN12@ListMixerC|

; 302  : 					}
; 303  : 					else if (sMixerControlDetails.cChannels == 1)

  00680	e3530001	 cmp         r3, #1
  00684	1a000012	 bne         |$LN10@ListMixerC|

; 304  : 					{
; 305  : 						_itow(pMixerControlDetailsUnsigned[0].dwValue, tmpStr, 16);

  00688	e5d80000	 ldrb        r0, [r8]
  0068c	e5d83001	 ldrb        r3, [r8, #1]
  00690	e5d82002	 ldrb        r2, [r8, #2]
  00694	e5d81003	 ldrb        r1, [r8, #3]
  00698	e1803403	 orr         r3, r0, r3, lsl #8
  0069c	e1833802	 orr         r3, r3, r2, lsl #16
  006a0	e1830c01	 orr         r0, r3, r1, lsl #24
  006a4	e28d1d06	 add         r1, sp, #6, 26
  006a8	e3a02010	 mov         r2, #0x10
  006ac	eb000000	 bl          _itow

; 306  : 						wcscpy_s(valStr, 16, TEXT("0x"));

  006b0	e59f2148	 ldr         r2, [pc, #0x148]
  006b4	e3a01010	 mov         r1, #0x10
  006b8	e28d0d07	 add         r0, sp, #7, 26
  006bc	eb000000	 bl          wcscpy_s
  006c0		 |$LN94@ListMixerC|

; 307  : 						wcsncat(valStr, tmpStr, 16);

  006c0	e3a02010	 mov         r2, #0x10
  006c4	e28d1d06	 add         r1, sp, #6, 26
  006c8	e28d0d07	 add         r0, sp, #7, 26
  006cc	eb000000	 bl          wcsncat

; 308  : 					}
; 309  : 					else

  006d0	ea00000d	 b           |$LN15@ListMixerC|
  006d4		 |$LN10@ListMixerC|

; 310  : 					{
; 311  : 						wcscpy_s(valStr, 16, TEXT("Wrong number of channel"));

  006d4	e59f2120	 ldr         r2, [pc, #0x120]

; 312  : 					}
; 313  : 					break;

  006d8	ea000008	 b           |$LN76@ListMixerC|
  006dc		 |$LN14@ListMixerC|

; 286  : 			{
; 287  : 				case MIXERCONTROL_CONTROLTYPE_BOOLEAN:
; 288  : 				case MIXERCONTROL_CONTROLTYPE_MUTE:
; 289  : 				case MIXERCONTROL_CONTROLTYPE_MUX:
; 290  : 					wcscpy_s(valStr, 16, pMixerControlDetailsBoolean[0].fValue ? TEXT("TRUE") : TEXT("FALSE"));

  006dc	e5d60000	 ldrb        r0, [r6]
  006e0	e5d63001	 ldrb        r3, [r6, #1]
  006e4	e5d62002	 ldrb        r2, [r6, #2]
  006e8	e5d61003	 ldrb        r1, [r6, #3]
  006ec	e1803403	 orr         r3, r0, r3, lsl #8
  006f0	e1833802	 orr         r3, r3, r2, lsl #16
  006f4	e1933c01	 orrs        r3, r3, r1, lsl #24
  006f8	159f20f8	 ldrne       r2, [pc, #0xF8]
  006fc	059f20f0	 ldreq       r2, [pc, #0xF0]
  00700		 |$LN76@ListMixerC|
  00700	e3a01010	 mov         r1, #0x10
  00704	e28d0d07	 add         r0, sp, #7, 26
  00708	eb000000	 bl          wcscpy_s
  0070c		 |$LN15@ListMixerC|

; 317  : 			}
; 318  : 
; 319  : 			_tprintf(_T("\t%s: %s = %s\r\n"), 
; 320  : 				indexStr, 
; 321  : 				sMixerLineControls.pamxctrl[i].szName,
; 322  : 				valStr);

  0070c	e59d204c	 ldr         r2, [sp, #0x4C]
  00710	e59f00d8	 ldr         r0, [pc, #0xD8]
  00714	e28d3d07	 add         r3, sp, #7, 26
  00718	e0872002	 add         r2, r7, r2
  0071c	e2822034	 add         r2, r2, #0x34
  00720	e28d1e26	 add         r1, sp, #0x26, 28
  00724	eb000000	 bl          wprintf
  00728		 |$LN52@ListMixerC|
  00728	e59de034	 ldr         lr, [sp, #0x34]
  0072c	e59d3044	 ldr         r3, [sp, #0x44]
  00730	e28770e4	 add         r7, r7, #0xE4
  00734	e28ee001	 add         lr, lr, #1
  00738	e58de034	 str         lr, [sp, #0x34]
  0073c	e15e0003	 cmp         lr, r3
  00740	e58d7028	 str         r7, [sp, #0x28]
  00744	3afffeba	 bcc         |$LL53@ListMixerC|
  00748		 |$LN51@ListMixerC|

; 323  : 		}
; 324  : 	}
; 325  : 
; 326  : 	bRet = TRUE;

  00748	e3a05001	 mov         r5, #1
  0074c		 |$cleanUp$32050|

; 327  : 
; 328  : cleanUp:
; 329  : 
; 330  : 	if (pMixerControlDetailsUnsigned != NULL)

  0074c	e3580000	 cmp         r8, #0

; 331  : 	{
; 332  : 		LocalFree(pMixerControlDetailsUnsigned);

  00750	11a00008	 movne       r0, r8
  00754	1b000000	 blne        LocalFree

; 333  : 	}
; 334  : 
; 335  : 	if (pMixerControlDetailsBoolean != NULL)

  00758	e3560000	 cmp         r6, #0

; 336  : 	{
; 337  : 		LocalFree(pMixerControlDetailsBoolean);

  0075c	11a00006	 movne       r0, r6
  00760	1b000000	 blne        LocalFree

; 338  : 	}
; 339  : 
; 340  : 	if (pMixerControlListText != NULL)

  00764	e35a0000	 cmp         r10, #0

; 341  : 	{
; 342  : 		LocalFree(pMixerControlListText);

  00768	11a0000a	 movne       r0, r10
  0076c	1b000000	 blne        LocalFree
  00770	e59d702c	 ldr         r7, [sp, #0x2C]
  00774		 |$LN5@ListMixerC|

; 343  : 	}
; 344  : 
; 345  : 	if (pMixerControls != NULL)

  00774	e35b0000	 cmp         r11, #0

; 346  : 	{
; 347  : 		LocalFree(pMixerControls);

  00778	11a0000b	 movne       r0, r11
  0077c	1b000000	 blne        LocalFree
  00780		 |$LN4@ListMixerC|

; 348  : 	}
; 349  : 
; 350  : 	if (hMixer != NULL)

  00780	e59d0008	 ldr         r0, [sp, #8]
  00784	e3500000	 cmp         r0, #0

; 351  : 	{
; 352  : 		mixerClose(hMixer);

  00788	1b000000	 blne        mixerClose

; 353  : 	}
; 354  : 
; 355  : 	if (hWaveIn != NULL)

  0078c	e59d0024	 ldr         r0, [sp, #0x24]
  00790	e3500000	 cmp         r0, #0

; 356  : 	{
; 357  : 		waveInClose(hWaveIn);

  00794	1b000000	 blne        waveInClose

; 358  : 	}
; 359  : 
; 360  :     if (hevDone != NULL) 
; 361  : 	{
; 362  :         CloseHandle(hevDone);

  00798	e1a00007	 mov         r0, r7
  0079c	eb000000	 bl          CloseHandle

; 363  :     }
; 364  : 
; 365  :     return bRet;

  007a0	e59d0280	 ldr         r0, [sp, #0x280]
  007a4	eb000000	 bl          __security_check_cookie
  007a8		 |$LN67@ListMixerC|

; 366  : }

  007a8	e1a00005	 mov         r0, r5
  007ac	e28ddfa1	 add         sp, sp, #0xA1, 30
  007b0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  007b4	e12fff1e	 bx          lr
  007b8		 |$LN79@ListMixerC|

; 137  : 			{
; 138  : 				_tprintf(_T("ERROR : Could not allocate memory\n"));

  007b8	e59f002c	 ldr         r0, [pc, #0x2C]

; 323  : 		}
; 324  : 	}
; 325  : 
; 326  : 	bRet = TRUE;

  007bc	ea000004	 b           |$LN95@ListMixerC|
  007c0		 |$LN84@ListMixerC|

; 273  : 				default:
; 274  : 					_tprintf(_T("ERROR : Unsupported control type\n"));

  007c0	e59f0020	 ldr         r0, [pc, #0x20]

; 323  : 		}
; 324  : 	}
; 325  : 
; 326  : 	bRet = TRUE;

  007c4	ea000002	 b           |$LN95@ListMixerC|
  007c8		 |$LN85@ListMixerC|

; 265  : 					{
; 266  : 						_tprintf(_T("ERROR : Failed to allocate memory\n"));

  007c8	e59f0014	 ldr         r0, [pc, #0x14]

; 323  : 		}
; 324  : 	}
; 325  : 
; 326  : 	bRet = TRUE;

  007cc	ea000000	 b           |$LN95@ListMixerC|
  007d0		 |$LN87@ListMixerC|

; 280  : 			{
; 281  : 				_tprintf(_T("ERROR : Could not get control details\n"));

  007d0	e59f0008	 ldr         r0, [pc, #8]
  007d4		 |$LN95@ListMixerC|
  007d4	eb000000	 bl          wprintf

; 323  : 		}
; 324  : 	}
; 325  : 
; 326  : 	bRet = TRUE;

  007d8	e3a05000	 mov         r5, #0
  007dc	eaffffda	 b           |$cleanUp$32050|
  007e0		 |$LN101@ListMixerC|
  007e0		 |$LN102@ListMixerC|
  007e0	00000000	 DCD         |??_C@_1EO@LKMNKPFD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAd?$AAe@|
  007e4		 |$LN103@ListMixerC|
  007e4	00000000	 DCD         |??_C@_1EG@LOHBBNOM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr@|
  007e8		 |$LN104@ListMixerC|
  007e8	00000000	 DCD         |??_C@_1EE@FFJOBANB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAt?$AAy?$AAp?$AAe@|
  007ec		 |$LN105@ListMixerC|
  007ec	00000000	 DCD         |??_C@_1EG@MECGAMLK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr@|
  007f0		 |$LN106@ListMixerC|
  007f0	00000000	 DCD         |??_C@_1BO@ICBMOEKE@?$AA?7?$AA?$CF?$AAs?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  007f4		 |$LN107@ListMixerC|
  007f4	00000000	 DCD         |??_C@_1M@HCOOECOK@?$AAF?$AAA?$AAL?$AAS?$AAE?$AA?$AA@|
  007f8		 |$LN108@ListMixerC|
  007f8	00000000	 DCD         |??_C@_19ELAAHEEL@?$AAT?$AAR?$AAU?$AAE?$AA?$AA@|
  007fc		 |$LN109@ListMixerC|
  007fc	00000000	 DCD         |??_C@_1DA@OPNHHGOL@?$AAW?$AAr?$AAo?$AAn?$AAg?$AA?5?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?5?$AAo?$AAf?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AA@|
  00800		 |$LN110@ListMixerC|
  00800	00000000	 DCD         |??_C@_15OEMMNBIC@?$AA0?$AAx?$AA?$AA@|
  00804		 |$LN111@ListMixerC|
  00804	00000000	 DCD         |??_C@_1BA@DCLGINLK@?$AA?5?$AA?$HM?$AA?5?$AAR?$AA?5?$AA0?$AAx?$AA?$AA@|
  00808		 |$LN112@ListMixerC|
  00808	00000000	 DCD         |??_C@_19MLHEJNCP@?$AAL?$AA?5?$AA0?$AAx?$AA?$AA@|
  0080c		 |$LN113@ListMixerC|
  0080c	00000000	 DCD         |??_C@_1CA@IJNMLOEC@?$AA?7?$AA?7?$AA?$CF?$AAs?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00810		 |$LN114@ListMixerC|
  00810	00000000	 DCD         |??_C@_1BE@HONMLPDA@?$AA?7?$AA?$CF?$AAs?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00814		 |$LN115@ListMixerC|
  00814	00000000	 DCD         |??_C@_1BE@MMNFDOLL@?$AA?$CF?$AAs?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00818		 |$LN116@ListMixerC|
  00818	00000000	 DCD         |??_C@_1BC@LNDHODCO@?$AAW?$AAA?$AAV?$AAE?$AA?5?$AAO?$AAU?$AAT?$AA?$AA@|
  0081c		 |$LN117@ListMixerC|
  0081c	00000000	 DCD         |??_C@_1BA@PLGNLHMI@?$AAW?$AAA?$AAV?$AAE?$AA?5?$AAI?$AAN?$AA?$AA@|
  00820		 |$LN118@ListMixerC|
  00820	00000000	 DCD         |??_C@_1EK@BBPJCECM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr@|
  00824		 |$LN119@ListMixerC|
  00824	00000000	 DCD         |??_C@_1GK@EKGGCACH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5@|
  00828		 |$LN120@ListMixerC|
  00828	00000000	 DCD         |??_C@_1EO@OJDKMIHI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAW?$AAa?$AAv?$AAe?$AA?5?$AAI?$AAN?$AA?5?$AAd@|
  0082c		 |$LN121@ListMixerC|
  0082c	00000000	 DCD         |??_C@_1GG@HDFMGNCL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAw?$AAa?$AAv?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAa?$AAv?$AAa?$AAi?$AAl?$AAa?$AAb?$AAl?$AAe@|
  00830		 |$LN122@ListMixerC|
  00830	00000000	 DCD         |__security_cookie|
  00834		 |$M32430|

			 ENDP  ; |?ListMixerControls@@YAHH@Z|, ListMixerControls

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?SetControlValue@@YAHHJJ@Z|		; SetControlValue
	EXPORT	|??_C@_1EO@EAIONPEG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@KPCLGPMN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAI?$AAD?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|mixerSetControlDetails|

  00000			 AREA	 |.pdata|, PDATA
|$T32492| DCD	|$LN66@SetControl|
	DCD	0xc0014f02

  00000			 AREA	 |.xdata|, DATA
|$T32488| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@EAIONPEG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAd?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, ":"
	DCB	0x0, " ", 0x0, "C", 0x0, "o", 0x0, "u", 0x0, "l", 0x0, "d"
	DCB	0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "t", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "s"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@KPCLGPMN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAI?$AAD?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "I"
	DCB	0x0, "D", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T32488|

  00008		 |?SetControlValue@@YAHHJJ@Z| PROC	; SetControlValue

; 369  : {

  00008		 |$LN66@SetControl|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dde17	 sub         sp, sp, #0x17, 28
  00010		 |$M32489|
  00010	e1a04002	 mov         r4, r2
  00014	e1a06001	 mov         r6, r1
  00018	e1a05000	 mov         r5, r0
  0001c	e59f351c	 ldr         r3, [pc, #0x51C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d316c	 str         r3, [sp, #0x16C]
  00028	e3a02b56	 mov         r2, #0x56, 22

; 370  : 	BOOL				bRet = FALSE;
; 371  : 	MMRESULT			mr = MMSYSERR_NOERROR;
; 372  : 	HMIXER				hMixer = NULL;
; 373  : 	HWAVEIN				hWaveIn = NULL;
; 374  : 	DWORD				dwMixerNumDevs = 0;
; 375  : 	HANDLE				hevDone = NULL;
; 376  :     WAVEFORMATEX		wfx;
; 377  : 	MIXERLINECONTROLS	sMixerLineControls;
; 378  : 	MIXERLINE			sMixerLine;
; 379  : 	MIXERCONTROLDETAILS sMixerControlDetails;
; 380  : 	MIXERCONTROL*		pMixerControls = NULL;
; 381  : 	MIXERCONTROLDETAILS_BOOLEAN* pMixerControlDetailsBoolean = NULL;
; 382  : 	MIXERCONTROLDETAILS_UNSIGNED* pMixerControlDetailsUnsigned = NULL;
; 383  : 
; 384  :     wfx.cbSize = 0;
; 385  :     wfx.wFormatTag = WAVE_FORMAT_PCM;
; 386  :     wfx.wBitsPerSample = 16;
; 387  :     wfx.nSamplesPerSec = 44100;
; 388  :     wfx.nChannels = 1;
; 389  :     wfx.nBlockAlign = wfx.nChannels * wfx.wBitsPerSample / 8;
; 390  :     wfx.nAvgBytesPerSec = wfx.nBlockAlign * wfx.nSamplesPerSec;

  0002c	e382e088	 orr         lr, r2, #0x88
  00030	e58de030	 str         lr, [sp, #0x30]

; 391  : 
; 392  :     hevDone = CreateEvent(NULL, FALSE, FALSE, NULL);

  00034	e3a0e010	 mov         lr, #0x10
  00038	e1cde3b6	 strh        lr, [sp, #0x36]
  0003c	e3a03b2b	 mov         r3, #0x2B, 22
  00040	e3a0e001	 mov         lr, #1
  00044	e3833044	 orr         r3, r3, #0x44
  00048	e1cde2ba	 strh        lr, [sp, #0x2A]
  0004c	e3a07000	 mov         r7, #0
  00050	e3a08000	 mov         r8, #0
  00054	e3a0e002	 mov         lr, #2
  00058	e3a09000	 mov         r9, #0
  0005c	e3a0b001	 mov         r11, #1
  00060	e58d302c	 str         r3, [sp, #0x2C]
  00064	e3a03000	 mov         r3, #0
  00068	e3a02000	 mov         r2, #0
  0006c	e3a01000	 mov         r1, #0
  00070	e3a00000	 mov         r0, #0
  00074	e58d7008	 str         r7, [sp, #8]
  00078	e58d800c	 str         r8, [sp, #0xC]
  0007c	e1cde3b4	 strh        lr, [sp, #0x34]
  00080	e3a0a000	 mov         r10, #0
  00084	e3a07000	 mov         r7, #0
  00088	e3a08000	 mov         r8, #0
  0008c	e1cd93b8	 strh        r9, [sp, #0x38]
  00090	e1cdb2b8	 strh        r11, [sp, #0x28]
  00094	eb000000	 bl          CreateEventW
  00098	e1b0b000	 movs        r11, r0

; 393  :     if (hevDone == NULL) 

  0009c	1a000003	 bne         |$LN49@SetControl|

; 394  : 	{
; 395  :         return 0;

  000a0	e59d016c	 ldr         r0, [sp, #0x16C]
  000a4	eb000000	 bl          __security_check_cookie
  000a8	e3a0a000	 mov         r10, #0
  000ac	ea000115	 b           |$LN50@SetControl|
  000b0		 |$LN49@SetControl|

; 396  :     }
; 397  : 
; 398  : 	dwMixerNumDevs = mixerGetNumDevs();

  000b0	eb000000	 bl          mixerGetNumDevs
  000b4	e3500000	 cmp         r0, #0

; 399  : 	if (dwMixerNumDevs == 0)

  000b8	1a000002	 bne         |$LN48@SetControl|

; 400  : 	{
; 401  : 		_tprintf(_T("ERROR : No wave device available on this platform\n"));

  000bc	e59f0478	 ldr         r0, [pc, #0x478]
  000c0	eb000000	 bl          wprintf
  000c4	ea000105	 b           |$LN4@SetControl|
  000c8		 |$LN48@SetControl|

; 402  : 		goto cleanUp;
; 403  : 	}
; 404  : 	
; 405  : 	mr = waveInOpen(&hWaveIn, 0, &wfx, (DWORD)hevDone, 0, CALLBACK_EVENT);

  000c8	e3a03805	 mov         r3, #5, 16
  000cc	e58d3004	 str         r3, [sp, #4]
  000d0	e3a0e000	 mov         lr, #0
  000d4	e1a0300b	 mov         r3, r11
  000d8	e28d2028	 add         r2, sp, #0x28
  000dc	e3a01000	 mov         r1, #0
  000e0	e28d000c	 add         r0, sp, #0xC
  000e4	e58de000	 str         lr, [sp]
  000e8	eb000000	 bl          waveInOpen
  000ec	e3500000	 cmp         r0, #0

; 406  : 	if (mr != MMSYSERR_NOERROR)

  000f0	0a000002	 beq         |$LN46@SetControl|

; 407  : 	{
; 408  : 		_tprintf(_T("ERROR : Could not open Wave IN device\n"));

  000f4	e59f043c	 ldr         r0, [pc, #0x43C]
  000f8	eb000000	 bl          wprintf
  000fc	ea0000f7	 b           |$LN4@SetControl|
  00100		 |$LN46@SetControl|

; 409  : 		goto cleanUp;
; 410  : 	}
; 411  : 
; 412  : 	mr = mixerOpen(&hMixer, (UINT)hWaveIn, (DWORD)hevDone, 0, MIXER_OBJECTF_HWAVEIN);

  00100	e59d100c	 ldr         r1, [sp, #0xC]
  00104	e3a0e20a	 mov         lr, #0xA, 4
  00108	e3a03000	 mov         r3, #0
  0010c	e1a0200b	 mov         r2, r11
  00110	e28d0008	 add         r0, sp, #8
  00114	e58de000	 str         lr, [sp]
  00118	eb000000	 bl          mixerOpen
  0011c	e3500000	 cmp         r0, #0

; 413  : 	if (mr != MMSYSERR_NOERROR)

  00120	0a000002	 beq         |$LN44@SetControl|

; 414  : 	{
; 415  : 		_tprintf(_T("ERROR : Could not get an handle on the mixer device\n"));

  00124	e59f0408	 ldr         r0, [pc, #0x408]
  00128	eb000000	 bl          wprintf
  0012c	ea0000eb	 b           |$LN4@SetControl|
  00130		 |$LN44@SetControl|

; 416  : 		goto cleanUp;
; 417  : 	}
; 418  : 
; 419  : 	// Initialize Mixer Line Structure
; 420  : 	memset(&sMixerLine, 0, sizeof(sMixerLine));

  00130	e3a02f46	 mov         r2, #0x46, 30
  00134	e3a01000	 mov         r1, #0
  00138	e28d0054	 add         r0, sp, #0x54
  0013c	eb000000	 bl          memset

; 421  : 	sMixerLine.cbStruct = sizeof(sMixerLine);

  00140	e3a03f46	 mov         r3, #0x46, 30

; 422  : 	sMixerLine.dwComponentType = bIn ? MIXERLINE_COMPONENTTYPE_DST_WAVEIN : MIXERLINE_COMPONENTTYPE_DST_SPEAKERS;

  00144	e3550000	 cmp         r5, #0

; 423  : 
; 424  : 	mixerGetLineInfo((HMIXEROBJ)hMixer, &sMixerLine, MIXER_OBJECTF_HMIXER|MIXER_GETLINEINFOF_COMPONENTTYPE);

  00148	e59d0008	 ldr         r0, [sp, #8]
  0014c	e58d3054	 str         r3, [sp, #0x54]
  00150	13a03007	 movne       r3, #7
  00154	03a03004	 moveq       r3, #4
  00158	e3a0210e	 mov         r2, #0xE, 2
  0015c	e28d1054	 add         r1, sp, #0x54
  00160	e58d306c	 str         r3, [sp, #0x6C]
  00164	eb000000	 bl          mixerGetLineInfo

; 425  : 	if (mr != MMSYSERR_NOERROR)
; 426  : 	{
; 427  : 		_tprintf(_T("ERROR : Could not get line info\n"));
; 428  : 		goto cleanUp;
; 429  : 	}
; 430  : 
; 431  : 	// Check that control ID is valid
; 432  : 	if ((DWORD)controlID >= sMixerLine.cControls)

  00168	e59d3078	 ldr         r3, [sp, #0x78]
  0016c	e1560003	 cmp         r6, r3
  00170	3a000002	 bcc         |$LN40@SetControl|

; 433  : 	{
; 434  : 		_tprintf(_T("ERROR : Invalid control ID\n"));

  00174	e59f03b4	 ldr         r0, [pc, #0x3B4]
  00178	eb000000	 bl          wprintf
  0017c	ea0000d7	 b           |$LN4@SetControl|
  00180		 |$LN40@SetControl|

; 435  : 		goto cleanUp;
; 436  : 	}
; 437  : 
; 438  : 	// Allocate memory to store the Mixer Controls
; 439  : 	pMixerControls = (MIXERCONTROL*)LocalAlloc(LPTR, sMixerLine.cControls * sizeof(MIXERCONTROL));

  00180	e3a020e4	 mov         r2, #0xE4
  00184	e0010293	 mul         r1, r3, r2
  00188	e3a00040	 mov         r0, #0x40
  0018c	eb000000	 bl          LocalAlloc
  00190	e1b09000	 movs        r9, r0

; 440  : 	if (pMixerControls == NULL)

  00194	1a000002	 bne         |$LN38@SetControl|

; 441  : 	{
; 442  : 		_tprintf(_T("ERROR : Could not allocate memory\n"));

  00198	e59f038c	 ldr         r0, [pc, #0x38C]

; 562  : 	{
; 563  : 		_tprintf(_T("ERROR : Could not set control details\n"));

  0019c	eb000000	 bl          wprintf

; 568  : 
; 569  : cleanUp:

  001a0	ea0000c5	 b           |$cleanUp$32199|
  001a4		 |$LN38@SetControl|

; 443  : 		goto cleanUp;
; 444  : 	}
; 445  : 
; 446  : 	// Initialize Mixer Line Controls Structure
; 447  : 	memset(&sMixerLineControls, 0, sizeof(sMixerLineControls));

  001a4	e3a02018	 mov         r2, #0x18
  001a8	e3a01000	 mov         r1, #0
  001ac	e28d003c	 add         r0, sp, #0x3C
  001b0	eb000000	 bl          memset

; 448  : 	sMixerLineControls.dwLineID = sMixerLine.dwLineID;
; 449  : 	sMixerLineControls.cbStruct = sizeof(sMixerLineControls);
; 450  : 	sMixerLineControls.cControls = sMixerLine.cControls;

  001b4	e59d2078	 ldr         r2, [sp, #0x78]
  001b8	e59d3060	 ldr         r3, [sp, #0x60]

; 451  : 	sMixerLineControls.cbmxctrl = sizeof(MIXERCONTROL);
; 452  : 	sMixerLineControls.pamxctrl = pMixerControls;
; 453  : 
; 454  : 	mr = mixerGetLineControls((HMIXEROBJ)hMixer, &sMixerLineControls, MIXER_OBJECTF_HMIXER|MIXER_GETLINECONTROLSF_ALL);

  001bc	e59d0008	 ldr         r0, [sp, #8]
  001c0	e58d2048	 str         r2, [sp, #0x48]
  001c4	e3a0e018	 mov         lr, #0x18
  001c8	e3a050e4	 mov         r5, #0xE4
  001cc	e3a02102	 mov         r2, #2, 2
  001d0	e28d103c	 add         r1, sp, #0x3C
  001d4	e58d3040	 str         r3, [sp, #0x40]
  001d8	e58de03c	 str         lr, [sp, #0x3C]
  001dc	e58d504c	 str         r5, [sp, #0x4C]
  001e0	e58d9050	 str         r9, [sp, #0x50]
  001e4	eb000000	 bl          mixerGetLineControls
  001e8	e3500000	 cmp         r0, #0

; 455  : 	if (mr != MMSYSERR_NOERROR)

  001ec	0a000002	 beq         |$LN36@SetControl|

; 456  : 	{
; 457  : 		_tprintf(_T("ERROR : Could not get line controls\n"));

  001f0	e59f0330	 ldr         r0, [pc, #0x330]

; 562  : 	{
; 563  : 		_tprintf(_T("ERROR : Could not set control details\n"));

  001f4	eb000000	 bl          wprintf

; 568  : 
; 569  : cleanUp:

  001f8	ea0000af	 b           |$cleanUp$32199|
  001fc		 |$LN36@SetControl|

; 458  : 		goto cleanUp;
; 459  : 	}
; 460  : 	
; 461  : 	// Initialize Mixer Details Structure
; 462  : 	memset(&sMixerControlDetails, 0, sizeof(sMixerControlDetails));

  001fc	e3a02018	 mov         r2, #0x18
  00200	e3a01000	 mov         r1, #0
  00204	e28d0010	 add         r0, sp, #0x10
  00208	eb000000	 bl          memset

; 463  : 	sMixerControlDetails.dwControlID = pMixerControls[controlID].dwControlID;

  0020c	e3a030e4	 mov         r3, #0xE4
  00210	e0259396	 mla         r5, r6, r3, r9

; 464  : 	sMixerControlDetails.cbStruct = sizeof(sMixerControlDetails);
; 465  : 	sMixerControlDetails.cChannels = sMixerLine.cChannels;
; 466  : 	sMixerControlDetails.cMultipleItems = pMixerControls[controlID].cMultipleItems;
; 467  : 
; 468  : 	switch(pMixerControls[controlID].dwControlType)

  00214	e59de070	 ldr         lr, [sp, #0x70]
  00218	e3a06018	 mov         r6, #0x18
  0021c	e5d50004	 ldrb        r0, [r5, #4]
  00220	e5d53005	 ldrb        r3, [r5, #5]
  00224	e5d52006	 ldrb        r2, [r5, #6]
  00228	e5d51007	 ldrb        r1, [r5, #7]
  0022c	e1803403	 orr         r3, r0, r3, lsl #8
  00230	e1833802	 orr         r3, r3, r2, lsl #16
  00234	e1833c01	 orr         r3, r3, r1, lsl #24
  00238	e58d3014	 str         r3, [sp, #0x14]
  0023c	e58d6010	 str         r6, [sp, #0x10]
  00240	e58de018	 str         lr, [sp, #0x18]
  00244	e5d50010	 ldrb        r0, [r5, #0x10]
  00248	e5d53011	 ldrb        r3, [r5, #0x11]
  0024c	e5d52012	 ldrb        r2, [r5, #0x12]
  00250	e5d51013	 ldrb        r1, [r5, #0x13]
  00254	e1803403	 orr         r3, r0, r3, lsl #8
  00258	e1833802	 orr         r3, r3, r2, lsl #16
  0025c	e1836c01	 orr         r6, r3, r1, lsl #24
  00260	e58d601c	 str         r6, [sp, #0x1C]
  00264	e5d50008	 ldrb        r0, [r5, #8]
  00268	e5d53009	 ldrb        r3, [r5, #9]
  0026c	e5d5200a	 ldrb        r2, [r5, #0xA]
  00270	e5d5100b	 ldrb        r1, [r5, #0xB]
  00274	e1803403	 orr         r3, r0, r3, lsl #8
  00278	e1833802	 orr         r3, r3, r2, lsl #16
  0027c	e1833c01	 orr         r3, r3, r1, lsl #24
  00280	e3a01202	 mov         r1, #2, 4
  00284	e3812801	 orr         r2, r1, #1, 16
  00288	e1530002	 cmp         r3, r2
  0028c	e3a02217	 mov         r2, #0x17, 4
  00290	e3820801	 orr         r0, r2, #1, 16
  00294	e3a02222	 mov         r2, #0x22, 4
  00298	e3a01215	 mov         r1, #0x15, 4
  0029c	e3822801	 orr         r2, r2, #1, 16
  002a0	e3811803	 orr         r1, r1, #3, 16
  002a4	0a000005	 beq         |$LN32@SetControl|
  002a8	e1530002	 cmp         r3, r2
  002ac	0a000003	 beq         |$LN32@SetControl|
  002b0	e1530001	 cmp         r3, r1
  002b4	0a000007	 beq         |$LN27@SetControl|
  002b8	e1530000	 cmp         r3, r0
  002bc	1a000037	 bne         |$LN62@SetControl|
  002c0		 |$LN32@SetControl|

; 469  : 	{
; 470  : 		case MIXERCONTROL_CONTROLTYPE_MUTE:
; 471  : 		case MIXERCONTROL_CONTROLTYPE_BOOLEAN:
; 472  : 		case MIXERCONTROL_CONTROLTYPE_MUX:
; 473  : 
; 474  : 			if (sMixerControlDetails.cMultipleItems > 0)

  002c0	e3560000	 cmp         r6, #0

; 475  : 			{
; 476  : 				pMixerControlDetailsBoolean = (MIXERCONTROLDETAILS_BOOLEAN*)LocalAlloc(LPTR,
; 477  : 					sMixerControlDetails.cChannels		*
; 478  : 					sMixerControlDetails.cMultipleItems	*
; 479  : 					sizeof(MIXERCONTROLDETAILS_BOOLEAN));

  002c4	e3a00040	 mov         r0, #0x40
  002c8	0a00000c	 beq         |$LN31@SetControl|
  002cc	e0030e96	 mul         r3, r6, lr
  002d0	e1a01103	 mov         r1, r3, lsl #2

; 480  : 			}
; 481  : 			else

  002d4	ea00000a	 b           |$LN56@SetControl|
  002d8		 |$LN27@SetControl|

; 496  : 			break;
; 497  : 		case MIXERCONTROL_CONTROLTYPE_VOLUME:
; 498  : 
; 499  : 			pMixerControlDetailsUnsigned = (MIXERCONTROLDETAILS_UNSIGNED*)LocalAlloc(LPTR,
; 500  : 					sMixerControlDetails.cChannels		*
; 501  : 					sizeof(MIXERCONTROLDETAILS_UNSIGNED));

  002d8	e1a0110e	 mov         r1, lr, lsl #2
  002dc	e3a00040	 mov         r0, #0x40
  002e0	eb000000	 bl          LocalAlloc
  002e4	e1b08000	 movs        r8, r0

; 502  : 			
; 503  : 			if (pMixerControlDetailsUnsigned == NULL)

  002e8	1a000002	 bne         |$LN26@SetControl|
  002ec		 |$LN63@SetControl|

; 504  : 			{
; 505  : 				_tprintf(_T("ERROR : Failed to allocate memory\n"));

  002ec	e59f0230	 ldr         r0, [pc, #0x230]

; 562  : 	{
; 563  : 		_tprintf(_T("ERROR : Could not set control details\n"));

  002f0	eb000000	 bl          wprintf

; 568  : 
; 569  : cleanUp:

  002f4	ea000070	 b           |$cleanUp$32199|
  002f8		 |$LN26@SetControl|

; 506  : 				goto cleanUp;
; 507  : 			}
; 508  : 			
; 509  : 			sMixerControlDetails.cbDetails = sizeof(MIXERCONTROLDETAILS_UNSIGNED);
; 510  : 			sMixerControlDetails.paDetails = (LPVOID)pMixerControlDetailsUnsigned;

  002f8	e58d8024	 str         r8, [sp, #0x24]

; 511  : 			break;

  002fc	ea000005	 b           |$LN55@SetControl|
  00300		 |$LN31@SetControl|

; 482  : 			{
; 483  : 				pMixerControlDetailsBoolean = (MIXERCONTROLDETAILS_BOOLEAN*)LocalAlloc(LPTR,
; 484  : 					sMixerControlDetails.cChannels		*
; 485  : 					sizeof(MIXERCONTROLDETAILS_BOOLEAN));

  00300	e1a0110e	 mov         r1, lr, lsl #2
  00304		 |$LN56@SetControl|
  00304	eb000000	 bl          LocalAlloc
  00308	e1a07000	 mov         r7, r0

; 486  : 			}
; 487  : 			
; 488  : 			if (pMixerControlDetailsBoolean == NULL)

  0030c	e3570000	 cmp         r7, #0

; 568  : 
; 569  : cleanUp:

  00310	0afffff5	 beq         |$LN63@SetControl|

; 489  : 			{
; 490  : 				_tprintf(_T("ERROR : Failed to allocate memory\n"));
; 491  : 				goto cleanUp;
; 492  : 			}
; 493  : 			
; 494  : 			sMixerControlDetails.cbDetails = sizeof(MIXERCONTROLDETAILS_BOOLEAN);
; 495  : 			sMixerControlDetails.paDetails = (LPVOID)pMixerControlDetailsBoolean;

  00314	e58d7024	 str         r7, [sp, #0x24]
  00318		 |$LN55@SetControl|

; 512  : 		default:
; 513  : 			_tprintf(_T("ERROR : Unsupported control type\n"));
; 514  : 			goto cleanUp;
; 515  : 	}
; 516  : 
; 517  : 	mr = mixerGetControlDetails((HMIXEROBJ)hMixer, &sMixerControlDetails, MIXER_OBJECTF_HMIXER|MIXER_GETCONTROLDETAILSF_VALUE);

  00318	e59d0008	 ldr         r0, [sp, #8]
  0031c	e3a03004	 mov         r3, #4
  00320	e3a02102	 mov         r2, #2, 2
  00324	e28d1010	 add         r1, sp, #0x10
  00328	e58d3020	 str         r3, [sp, #0x20]
  0032c	eb000000	 bl          mixerGetControlDetails
  00330	e3500000	 cmp         r0, #0

; 518  : 	if (mr != MMSYSERR_NOERROR)

  00334	0a000002	 beq         |$LN22@SetControl|

; 519  : 	{
; 520  : 		_tprintf(_T("ERROR : Could not get control details\n"));

  00338	e59f01e0	 ldr         r0, [pc, #0x1E0]

; 562  : 	{
; 563  : 		_tprintf(_T("ERROR : Could not set control details\n"));

  0033c	eb000000	 bl          wprintf

; 568  : 
; 569  : cleanUp:

  00340	ea00005d	 b           |$cleanUp$32199|
  00344		 |$LN22@SetControl|

; 521  : 		goto cleanUp;
; 522  : 	}
; 523  : 
; 524  : 	// Change value
; 525  : 	switch(pMixerControls[controlID].dwControlType)

  00344	e5d50008	 ldrb        r0, [r5, #8]
  00348	e5d53009	 ldrb        r3, [r5, #9]
  0034c	e5d5200a	 ldrb        r2, [r5, #0xA]
  00350	e5d5100b	 ldrb        r1, [r5, #0xB]
  00354	e1803403	 orr         r3, r0, r3, lsl #8
  00358	e1833802	 orr         r3, r3, r2, lsl #16
  0035c	e1833c01	 orr         r3, r3, r1, lsl #24
  00360	e3a01202	 mov         r1, #2, 4
  00364	e3812801	 orr         r2, r1, #1, 16
  00368	e1530002	 cmp         r3, r2
  0036c	0a000041	 beq         |$LN11@SetControl|
  00370	e3a01222	 mov         r1, #0x22, 4
  00374	e3812801	 orr         r2, r1, #1, 16
  00378	e1530002	 cmp         r3, r2
  0037c	0a00003d	 beq         |$LN11@SetControl|
  00380	e3a01215	 mov         r1, #0x15, 4
  00384	e3812803	 orr         r2, r1, #3, 16
  00388	e1530002	 cmp         r3, r2
  0038c	0a000016	 beq         |$LN15@SetControl|
  00390	e3a01217	 mov         r1, #0x17, 4
  00394	e3812801	 orr         r2, r1, #1, 16
  00398	e1530002	 cmp         r3, r2
  0039c	0a000002	 beq         |$LN18@SetControl|
  003a0		 |$LN62@SetControl|

; 554  : 			break;
; 555  : 		default:
; 556  : 			_tprintf(_T("ERROR : Unsupported control type\n"));

  003a0	e59f0174	 ldr         r0, [pc, #0x174]

; 562  : 	{
; 563  : 		_tprintf(_T("ERROR : Could not set control details\n"));

  003a4	eb000000	 bl          wprintf

; 568  : 
; 569  : cleanUp:

  003a8	ea000043	 b           |$cleanUp$32199|
  003ac		 |$LN18@SetControl|

; 526  : 	{
; 527  : 		case MIXERCONTROL_CONTROLTYPE_MUX:
; 528  : 			if (value > 0)

  003ac	e3540000	 cmp         r4, #0

; 529  : 			{
; 530  : 				pMixerControlDetailsBoolean[0].fValue = 0;
; 531  : 				pMixerControlDetailsBoolean[1].fValue = 1;

  003b0	e3a03001	 mov         r3, #1
  003b4	da000008	 ble         |$LN17@SetControl|
  003b8	e5c73004	 strb        r3, [r7, #4]
  003bc	e3a03000	 mov         r3, #0
  003c0	e5c73000	 strb        r3, [r7]
  003c4		 |$LN61@SetControl|
  003c4	e5c73003	 strb        r3, [r7, #3]
  003c8	e5c73002	 strb        r3, [r7, #2]
  003cc	e5c73005	 strb        r3, [r7, #5]
  003d0	e5c73006	 strb        r3, [r7, #6]
  003d4	e5c73007	 strb        r3, [r7, #7]

; 532  : 			}
; 533  : 			else

  003d8	ea00002c	 b           |$LN57@SetControl|
  003dc		 |$LN17@SetControl|

; 534  : 			{
; 535  : 				pMixerControlDetailsBoolean[0].fValue = 1;

  003dc	e5c73000	 strb        r3, [r7]
  003e0	e3a03000	 mov         r3, #0

; 536  : 				pMixerControlDetailsBoolean[1].fValue = 0;

  003e4	e5c73004	 strb        r3, [r7, #4]

; 537  : 			}
; 538  : 			break;

  003e8	eafffff5	 b           |$LN61@SetControl|
  003ec		 |$LN15@SetControl|

; 539  : 		case MIXERCONTROL_CONTROLTYPE_VOLUME:
; 540  : 
; 541  : 			if (sMixerControlDetails.cChannels == 2)

  003ec	e59d3018	 ldr         r3, [sp, #0x18]
  003f0	e3530002	 cmp         r3, #2
  003f4	1a000012	 bne         |$LN14@SetControl|

; 542  : 			{
; 543  : 				pMixerControlDetailsUnsigned[0].dwValue = (value >> 16) & 0xFFFF;

  003f8	e3a03cff	 mov         r3, #0xFF, 24
  003fc	e38330ff	 orr         r3, r3, #0xFF
  00400	e0035844	 and         r5, r3, r4, asr #16

; 544  : 				pMixerControlDetailsUnsigned[1].dwValue = (value >>  0) & 0xFFFF;

  00404	e0046003	 and         r6, r4, r3
  00408	e1a03425	 mov         r3, r5, lsr #8
  0040c	e1a02825	 mov         r2, r5, lsr #16
  00410	e1a01c25	 mov         r1, r5, lsr #24
  00414	e1a00426	 mov         r0, r6, lsr #8
  00418	e1a0e826	 mov         lr, r6, lsr #16
  0041c	e1a04c26	 mov         r4, r6, lsr #24
  00420	e5c83001	 strb        r3, [r8, #1]
  00424	e5c82002	 strb        r2, [r8, #2]
  00428	e5c81003	 strb        r1, [r8, #3]
  0042c	e5c80005	 strb        r0, [r8, #5]
  00430	e5c8e006	 strb        lr, [r8, #6]
  00434	e5c84007	 strb        r4, [r8, #7]
  00438	e5c85000	 strb        r5, [r8]
  0043c	e5c86004	 strb        r6, [r8, #4]
  00440	ea000013	 b           |$LN19@SetControl|
  00444		 |$LN14@SetControl|

; 545  : 			}
; 546  : 			else if (sMixerControlDetails.cChannels == 1)

  00444	e3530001	 cmp         r3, #1
  00448	1a000011	 bne         |$LN19@SetControl|
  0044c	e3a03cff	 mov         r3, #0xFF, 24

; 547  : 			{
; 548  : 				pMixerControlDetailsUnsigned[0].dwValue = value & 0xFFFF;

  00450	e38330ff	 orr         r3, r3, #0xFF
  00454	e0040003	 and         r0, r4, r3
  00458	e1a03420	 mov         r3, r0, lsr #8
  0045c	e1a02820	 mov         r2, r0, lsr #16
  00460	e1a01c20	 mov         r1, r0, lsr #24
  00464	e5c83001	 strb        r3, [r8, #1]
  00468	e5c82002	 strb        r2, [r8, #2]
  0046c	e5c81003	 strb        r1, [r8, #3]
  00470	e5c80000	 strb        r0, [r8]

; 549  : 			}
; 550  : 			break;

  00474	ea000006	 b           |$LN19@SetControl|
  00478		 |$LN11@SetControl|

; 551  : 		case MIXERCONTROL_CONTROLTYPE_BOOLEAN:
; 552  : 		case MIXERCONTROL_CONTROLTYPE_MUTE:
; 553  : 			pMixerControlDetailsBoolean[0].fValue = value;

  00478	e1a02824	 mov         r2, r4, lsr #16
  0047c	e1a01c24	 mov         r1, r4, lsr #24
  00480	e5c72002	 strb        r2, [r7, #2]
  00484	e5c71003	 strb        r1, [r7, #3]
  00488	e1a03424	 mov         r3, r4, lsr #8
  0048c	e5c74000	 strb        r4, [r7]
  00490		 |$LN57@SetControl|
  00490	e5c73001	 strb        r3, [r7, #1]
  00494		 |$LN19@SetControl|

; 557  : 			goto cleanUp;
; 558  : 	}
; 559  : 
; 560  : 	mr = mixerSetControlDetails((HMIXEROBJ)hMixer, &sMixerControlDetails, MIXER_OBJECTF_HMIXER|MIXER_GETCONTROLDETAILSF_VALUE);

  00494	e59d0008	 ldr         r0, [sp, #8]
  00498	e3a02102	 mov         r2, #2, 2
  0049c	e28d1010	 add         r1, sp, #0x10
  004a0	eb000000	 bl          mixerSetControlDetails
  004a4	e3500000	 cmp         r0, #0

; 561  : 	if (mr != MMSYSERR_NOERROR)

  004a8	0a000002	 beq         |$LN8@SetControl|

; 562  : 	{
; 563  : 		_tprintf(_T("ERROR : Could not set control details\n"));

  004ac	e59f0064	 ldr         r0, [pc, #0x64]
  004b0	eb000000	 bl          wprintf

; 568  : 
; 569  : cleanUp:

  004b4	ea000000	 b           |$cleanUp$32199|
  004b8		 |$LN8@SetControl|

; 564  : 		goto cleanUp;
; 565  : 	}
; 566  : 
; 567  : 	bRet = TRUE;

  004b8	e3a0a001	 mov         r10, #1
  004bc		 |$cleanUp$32199|

; 570  : 
; 571  : 	if (pMixerControls != NULL)

  004bc	e3590000	 cmp         r9, #0

; 572  : 	{
; 573  : 		LocalFree(pMixerControls);

  004c0	11a00009	 movne       r0, r9
  004c4	1b000000	 blne        LocalFree

; 574  : 	}
; 575  : 
; 576  : 	if (pMixerControlDetailsBoolean != NULL)

  004c8	e3570000	 cmp         r7, #0

; 577  : 	{
; 578  : 		LocalFree(pMixerControlDetailsBoolean);

  004cc	11a00007	 movne       r0, r7
  004d0	1b000000	 blne        LocalFree

; 579  : 	}
; 580  : 
; 581  : 	if (pMixerControlDetailsUnsigned != NULL)

  004d4	e3580000	 cmp         r8, #0

; 582  : 	{
; 583  : 		LocalFree(pMixerControlDetailsUnsigned);

  004d8	11a00008	 movne       r0, r8
  004dc	1b000000	 blne        LocalFree
  004e0		 |$LN4@SetControl|

; 584  : 	}
; 585  : 
; 586  : 	if (hMixer != NULL)

  004e0	e59d0008	 ldr         r0, [sp, #8]
  004e4	e3500000	 cmp         r0, #0

; 587  : 	{
; 588  : 		mixerClose(hMixer);

  004e8	1b000000	 blne        mixerClose

; 589  : 	}
; 590  : 
; 591  : 	if (hWaveIn != NULL)

  004ec	e59d000c	 ldr         r0, [sp, #0xC]
  004f0	e3500000	 cmp         r0, #0

; 592  : 	{
; 593  : 		waveInClose(hWaveIn);

  004f4	1b000000	 blne        waveInClose

; 594  : 	}
; 595  : 
; 596  :     if (hevDone != NULL) 
; 597  : 	{
; 598  :         CloseHandle(hevDone);

  004f8	e1a0000b	 mov         r0, r11
  004fc	eb000000	 bl          CloseHandle

; 599  :     }
; 600  : 
; 601  :     return bRet;

  00500	e59d016c	 ldr         r0, [sp, #0x16C]
  00504	eb000000	 bl          __security_check_cookie
  00508		 |$LN50@SetControl|

; 602  : }

  00508	e1a0000a	 mov         r0, r10
  0050c	e28dde17	 add         sp, sp, #0x17, 28
  00510	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00514	e12fff1e	 bx          lr
  00518		 |$LN67@SetControl|
  00518		 |$LN68@SetControl|
  00518	00000000	 DCD         |??_C@_1EO@EAIONPEG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAd?$AAe@|
  0051c		 |$LN69@SetControl|
  0051c	00000000	 DCD         |??_C@_1EE@FFJOBANB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAt?$AAy?$AAp?$AAe@|
  00520		 |$LN70@SetControl|
  00520	00000000	 DCD         |??_C@_1EO@LKMNKPFD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAd?$AAe@|
  00524		 |$LN71@SetControl|
  00524	00000000	 DCD         |??_C@_1EG@LOHBBNOM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr@|
  00528		 |$LN72@SetControl|
  00528	00000000	 DCD         |??_C@_1EK@BBPJCECM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr@|
  0052c		 |$LN73@SetControl|
  0052c	00000000	 DCD         |??_C@_1EG@MECGAMLK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr@|
  00530		 |$LN74@SetControl|
  00530	00000000	 DCD         |??_C@_1DI@KPCLGPMN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAI?$AAD?$AA?6?$AA?$AA@|
  00534		 |$LN75@SetControl|
  00534	00000000	 DCD         |??_C@_1GK@EKGGCACH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAn?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?5@|
  00538		 |$LN76@SetControl|
  00538	00000000	 DCD         |??_C@_1EO@OJDKMIHI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAW?$AAa?$AAv?$AAe?$AA?5?$AAI?$AAN?$AA?5?$AAd@|
  0053c		 |$LN77@SetControl|
  0053c	00000000	 DCD         |??_C@_1GG@HDFMGNCL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAw?$AAa?$AAv?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAa?$AAv?$AAa?$AAi?$AAl?$AAa?$AAb?$AAl?$AAe@|
  00540		 |$LN78@SetControl|
  00540	00000000	 DCD         |__security_cookie|
  00544		 |$M32490|

			 ENDP  ; |?SetControlValue@@YAHHJJ@Z|, SetControlValue

	EXPORT	|wmain|
	EXPORT	|??_C@_15FNEHKAED@?$AA?9?$AA?$DP?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@EIJGFIGI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAe?$AAn?$AAo?$AAu?$AAg?$AAh?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAp?$AAa?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@BONEKKCH@?$AA?7?$AAi?$AA?4?$AAe?$AA?4?$AA?5?$AAw?$AAa?$AAv?$AAe?$AAm?$AAi?$AAx?$AAe?$AAr?$AA?5?$AA?9?$AAs?$AA?5?$AAI?$AAN?$AA?5?$AA1?$AA?5?$AA0?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@DOJBNJPI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAY?$AAo?$AAu?$AA?5?$AAm?$AAu?$AAs?$AAt?$AA?5?$AAs?$AAp?$AAe?$AAc?$AAi?$AAf?$AAy?$AA?5?$AAI?$AAN?$AA?5?$AAo?$AAr?$AA?5?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@HKHEGLOG@?$AA?7?$AAi?$AA?4?$AAe?$AA?4?$AA?5?$AAw?$AAa?$AAv?$AAe?$AAm?$AAi?$AAx?$AAe?$AAr?$AA?5?$AA?9?$AAs?$AA?5?$AAI?$AAN?$AA?5?$AA?$DM?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_15IMIFEHMG@?$AA?9?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_15IEPPAAAP@?$AA?9?$AAl?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|_wtol|
	IMPORT	|wcscmp|

  00000			 AREA	 |.pdata|, PDATA
|$T32539| DCD	|$LN40@wmain|
	DCD	0x40006501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15FNEHKAED@?$AA?9?$AA?$DP?$AA?$AA@| DCB "-", 0x0, "?", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@EIJGFIGI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAe?$AAn?$AAo?$AAu?$AAg?$AAh?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAp?$AAa?$AAs@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, ":"
	DCB	0x0, " ", 0x0, "N", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "e"
	DCB	0x0, "n", 0x0, "o", 0x0, "u", 0x0, "g", 0x0, "h", 0x0, " "
	DCB	0x0, "a", 0x0, "r", 0x0, "g", 0x0, "u", 0x0, "m", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, "s", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "s", 0x0, "s", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "w"
	DCB	0x0, "i", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "-", 0x0, "s"
	DCB	0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@BONEKKCH@?$AA?7?$AAi?$AA?4?$AAe?$AA?4?$AA?5?$AAw?$AAa?$AAv?$AAe?$AAm?$AAi?$AAx?$AAe?$AAr?$AA?5?$AA?9?$AAs?$AA?5?$AAI?$AAN?$AA?5?$AA1?$AA?5?$AA0?$AA?6?$AA?$AA@| DCB 0x9
	DCB	0x0, "i", 0x0, ".", 0x0, "e", 0x0, ".", 0x0, " ", 0x0, "w"
	DCB	0x0, "a", 0x0, "v", 0x0, "e", 0x0, "m", 0x0, "i", 0x0, "x"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "-", 0x0, "s", 0x0, " "
	DCB	0x0, "I", 0x0, "N", 0x0, " ", 0x0, "1", 0x0, " ", 0x0, "0"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@DOJBNJPI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAY?$AAo?$AAu?$AA?5?$AAm?$AAu?$AAs?$AAt?$AA?5?$AAs?$AAp?$AAe?$AAc?$AAi?$AAf?$AAy?$AA?5?$AAI?$AAN?$AA?5?$AAo?$AAr?$AA?5?$AAO@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, ":"
	DCB	0x0, " ", 0x0, "Y", 0x0, "o", 0x0, "u", 0x0, " ", 0x0, "m"
	DCB	0x0, "u", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "s", 0x0, "p"
	DCB	0x0, "e", 0x0, "c", 0x0, "i", 0x0, "f", 0x0, "y", 0x0, " "
	DCB	0x0, "I", 0x0, "N", 0x0, " ", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "O", 0x0, "U", 0x0, "T", 0x0, " ", 0x0, "w", 0x0, "i"
	DCB	0x0, "t", 0x0, "h", 0x0, " ", 0x0, "-", 0x0, "s", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@HKHEGLOG@?$AA?7?$AAi?$AA?4?$AAe?$AA?4?$AA?5?$AAw?$AAa?$AAv?$AAe?$AAm?$AAi?$AAx?$AAe?$AAr?$AA?5?$AA?9?$AAs?$AA?5?$AAI?$AAN?$AA?5?$AA?$DM?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAI@| DCB 0x9
	DCB	0x0, "i", 0x0, ".", 0x0, "e", 0x0, ".", 0x0, " ", 0x0, "w"
	DCB	0x0, "a", 0x0, "v", 0x0, "e", 0x0, "m", 0x0, "i", 0x0, "x"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "-", 0x0, "s", 0x0, " "
	DCB	0x0, "I", 0x0, "N", 0x0, " ", 0x0, "<", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, " "
	DCB	0x0, "I", 0x0, "D", 0x0, ">", 0x0, " ", 0x0, "<", 0x0, "V"
	DCB	0x0, "a", 0x0, "l", 0x0, "u", 0x0, "e", 0x0, ">", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15IMIFEHMG@?$AA?9?$AAs?$AA?$AA@| DCB "-", 0x0, "s", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@| DCB "O", 0x0, "U", 0x0, "T", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@| DCB "I", 0x0, "N", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15IEPPAAAP@?$AA?9?$AAl?$AA?$AA@| DCB "-", 0x0, "l", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |wmain| PROC

; 605  : {

  00000		 |$LN40@wmain|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M32536|
  00004	e1a06001	 mov         r6, r1
  00008	e1a04000	 mov         r4, r0

; 606  : 	UNREFERENCED_PARAMETER(envp);
; 607  : 
; 608  : 	if (argc < 2)

  0000c	e3540002	 cmp         r4, #2
  00010	aa000006	 bge         |$LN18@wmain|

; 609  : 	{
; 610  : 		Usage();

  00014	e59f4150	 ldr         r4, [pc, #0x150]
  00018	e3a05004	 mov         r5, #4
  0001c		 |$LL23@wmain|
  0001c	e4940004	 ldr         r0, [r4], #4
  00020	eb000000	 bl          wprintf
  00024	e2555001	 subs        r5, r5, #1
  00028	1afffffb	 bne         |$LL23@wmain|

; 611  : 		return 0;

  0002c	ea00004b	 b           |$exit$32288|
  00030		 |$LN18@wmain|

; 612  : 	}
; 613  : 
; 614  : 	if (0 == wcscmp(argv[1], TEXT("-l")))

  00030	e59f1158	 ldr         r1, [pc, #0x158]
  00034	e5960004	 ldr         r0, [r6, #4]
  00038	eb000000	 bl          wcscmp
  0003c	e3500000	 cmp         r0, #0
  00040	1a000014	 bne         |$LN17@wmain|

; 615  : 	{
; 616  : 		if (argc == 3)

  00044	e3540003	 cmp         r4, #3
  00048	1a00000f	 bne         |$LN16@wmain|

; 617  : 		{
; 618  : 			if (0 == wcscmp(argv[2], TEXT("IN")))

  0004c	e59f1134	 ldr         r1, [pc, #0x134]
  00050	e5960008	 ldr         r0, [r6, #8]
  00054	eb000000	 bl          wcscmp
  00058	e3500000	 cmp         r0, #0
  0005c	1a000002	 bne         |$LN15@wmain|

; 619  : 			{
; 620  : 				ListMixerControls(TRUE);

  00060	e3a00001	 mov         r0, #1

; 623  : 			{
; 624  : 				ListMixerControls(FALSE);

  00064	eb000000	 bl          |?ListMixerControls@@YAHH@Z|

; 625  : 			}

  00068	ea00003c	 b           |$exit$32288|
  0006c		 |$LN15@wmain|

; 621  : 			}
; 622  : 			else if (0 == wcscmp(argv[2], TEXT("OUT")))

  0006c	e59f1110	 ldr         r1, [pc, #0x110]
  00070	e5960008	 ldr         r0, [r6, #8]
  00074	eb000000	 bl          wcscmp
  00078	e3500000	 cmp         r0, #0
  0007c	1a000037	 bne         |$exit$32288|
  00080		 |$LN36@wmain|

; 623  : 			{
; 624  : 				ListMixerControls(FALSE);

  00080	e3a00000	 mov         r0, #0
  00084	eb000000	 bl          |?ListMixerControls@@YAHH@Z|

; 625  : 			}

  00088	ea000034	 b           |$exit$32288|
  0008c		 |$LN16@wmain|

; 626  : 
; 627  : 			goto exit;
; 628  : 		}
; 629  : 
; 630  : 		ListMixerControls(TRUE);

  0008c	e3a00001	 mov         r0, #1
  00090	eb000000	 bl          |?ListMixerControls@@YAHH@Z|

; 631  : 		ListMixerControls(FALSE);

  00094	eafffff9	 b           |$LN36@wmain|
  00098		 |$LN17@wmain|

; 632  : 	}
; 633  : 	else if (0 == wcscmp(argv[1], TEXT("-s")))

  00098	e59f10ec	 ldr         r1, [pc, #0xEC]
  0009c	e5960004	 ldr         r0, [r6, #4]
  000a0	eb000000	 bl          wcscmp
  000a4	e3500000	 cmp         r0, #0
  000a8	1a000021	 bne         |$LN10@wmain|

; 634  : 	{
; 635  : 		if (argc == 5)

  000ac	e3540005	 cmp         r4, #5
  000b0	1a00001a	 bne         |$LN9@wmain|

; 636  : 		{
; 637  : 			BOOL bIn = FALSE;
; 638  : 
; 639  : 			if (0 == wcscmp(argv[2], TEXT("IN")))

  000b4	e59f10cc	 ldr         r1, [pc, #0xCC]
  000b8	e5960008	 ldr         r0, [r6, #8]
  000bc	eb000000	 bl          wcscmp
  000c0	e3500000	 cmp         r0, #0

; 640  : 			{
; 641  : 				bIn = TRUE;

  000c4	03a05001	 moveq       r5, #1
  000c8	0a000005	 beq         |$LN5@wmain|

; 642  : 			}
; 643  : 			else if (0 == wcscmp(argv[2], TEXT("OUT")))

  000cc	e59f10b0	 ldr         r1, [pc, #0xB0]
  000d0	e5960008	 ldr         r0, [r6, #8]
  000d4	eb000000	 bl          wcscmp
  000d8	e3500000	 cmp         r0, #0
  000dc	1a00000a	 bne         |$LN6@wmain|

; 644  : 			{
; 645  : 				bIn = FALSE;

  000e0	e3a05000	 mov         r5, #0
  000e4		 |$LN5@wmain|

; 651  : 				goto exit;
; 652  : 			}
; 653  : 			
; 654  : 			SetControlValue(bIn, _wtoi(argv[3]), _wtoi(argv[4]));

  000e4	e5960010	 ldr         r0, [r6, #0x10]
  000e8	eb000000	 bl          _wtol
  000ec	e1a04000	 mov         r4, r0
  000f0	e596000c	 ldr         r0, [r6, #0xC]
  000f4	eb000000	 bl          _wtol
  000f8	e1a01000	 mov         r1, r0
  000fc	e1a00005	 mov         r0, r5
  00100	e1a02004	 mov         r2, r4
  00104	eb000000	 bl          |?SetControlValue@@YAHHJJ@Z|

; 665  : 	}
; 666  : 
; 667  : exit:

  00108	ea000014	 b           |$exit$32288|
  0010c		 |$LN6@wmain|

; 646  : 			}
; 647  : 			else
; 648  : 			{
; 649  : 				_tprintf(_T("ERROR : You must specify IN or OUT with -s parameter\n"));

  0010c	e59f006c	 ldr         r0, [pc, #0x6C]
  00110	eb000000	 bl          wprintf

; 650  : 				_tprintf(_T("\ti.e. wavemixer -s IN <Control ID> <Value>\n"));

  00114	e59f0060	 ldr         r0, [pc, #0x60]
  00118	eb000000	 bl          wprintf

; 665  : 	}
; 666  : 
; 667  : exit:

  0011c	ea00000f	 b           |$exit$32288|
  00120		 |$LN9@wmain|

; 655  : 
; 656  : 			goto exit;
; 657  : 		}
; 658  : 
; 659  : 		_tprintf(_T("ERROR : Not enough arguments passed with -s parameter\n"));

  00120	e59f0050	 ldr         r0, [pc, #0x50]
  00124	eb000000	 bl          wprintf

; 660  : 		_tprintf(_T("\ti.e. wavemixer -s IN 1 0\n"));

  00128	e59f0044	 ldr         r0, [pc, #0x44]
  0012c	eb000000	 bl          wprintf

; 665  : 	}
; 666  : 
; 667  : exit:

  00130	ea00000a	 b           |$exit$32288|
  00134		 |$LN10@wmain|

; 661  : 	}
; 662  : 	else if (0 == wcscmp(argv[1], TEXT("-?")))

  00134	e59f1034	 ldr         r1, [pc, #0x34]
  00138	e5960004	 ldr         r0, [r6, #4]
  0013c	eb000000	 bl          wcscmp
  00140	e3500000	 cmp         r0, #0
  00144	1a000005	 bne         |$exit$32288|

; 663  : 	{
; 664  : 		Usage();

  00148	e59f401c	 ldr         r4, [pc, #0x1C]
  0014c	e3a05004	 mov         r5, #4
  00150		 |$LL28@wmain|
  00150	e4940004	 ldr         r0, [r4], #4
  00154	eb000000	 bl          wprintf
  00158	e2555001	 subs        r5, r5, #1
  0015c	1afffffb	 bne         |$LL28@wmain|
  00160		 |$exit$32288|

; 668  : 
; 669  : 	return 0;

  00160	e3a00000	 mov         r0, #0

; 670  : }

  00164	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00168	e12fff1e	 bx          lr
  0016c		 |$LN41@wmain|
  0016c		 |$LN42@wmain|
  0016c	00000000	 DCD         |?usage_text@@3PAPAGA|
  00170		 |$LN43@wmain|
  00170	00000000	 DCD         |??_C@_15FNEHKAED@?$AA?9?$AA?$DP?$AA?$AA@|
  00174		 |$LN44@wmain|
  00174	00000000	 DCD         |??_C@_1DG@BONEKKCH@?$AA?7?$AAi?$AA?4?$AAe?$AA?4?$AA?5?$AAw?$AAa?$AAv?$AAe?$AAm?$AAi?$AAx?$AAe?$AAr?$AA?5?$AA?9?$AAs?$AA?5?$AAI?$AAN?$AA?5?$AA1?$AA?5?$AA0?$AA?6?$AA?$AA@|
  00178		 |$LN45@wmain|
  00178	00000000	 DCD         |??_C@_1GO@EIJGFIGI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAe?$AAn?$AAo?$AAu?$AAg?$AAh?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?5?$AAp?$AAa?$AAs@|
  0017c		 |$LN46@wmain|
  0017c	00000000	 DCD         |??_C@_1FI@HKHEGLOG@?$AA?7?$AAi?$AA?4?$AAe?$AA?4?$AA?5?$AAw?$AAa?$AAv?$AAe?$AAm?$AAi?$AAx?$AAe?$AAr?$AA?5?$AA?9?$AAs?$AA?5?$AAI?$AAN?$AA?5?$AA?$DM?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAI@|
  00180		 |$LN47@wmain|
  00180	00000000	 DCD         |??_C@_1GM@DOJBNJPI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?3?$AA?5?$AAY?$AAo?$AAu?$AA?5?$AAm?$AAu?$AAs?$AAt?$AA?5?$AAs?$AAp?$AAe?$AAc?$AAi?$AAf?$AAy?$AA?5?$AAI?$AAN?$AA?5?$AAo?$AAr?$AA?5?$AAO@|
  00184		 |$LN48@wmain|
  00184	00000000	 DCD         |??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@|
  00188		 |$LN49@wmain|
  00188	00000000	 DCD         |??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@|
  0018c		 |$LN50@wmain|
  0018c	00000000	 DCD         |??_C@_15IMIFEHMG@?$AA?9?$AAs?$AA?$AA@|
  00190		 |$LN51@wmain|
  00190	00000000	 DCD         |??_C@_15IEPPAAAP@?$AA?9?$AAl?$AA?$AA@|
  00194		 |$M32537|

			 ENDP  ; |wmain|

	END
