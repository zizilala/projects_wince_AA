; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\APP\PROXYDRIVER\dvfslatency.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1EO@GEECFLMJ@?$AAM?$AAP?$AAU?$AA_?$AAI?$AAN?$AAA?$AAC?$AAT?$AAI?$AAV?$AAE?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAO?$AAN?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAO?$AAN?$AA?0?$AA?5?$AAP@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@MMCHBKMF@?$AAC?$AAO?$AAR?$AAE?$AA_?$AAI?$AAN?$AAA?$AAC?$AAT?$AAI?$AAV?$AAE?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAC?$AAS?$AAR?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAO?$AAN?$AA?0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@BMGNOGAM@?$AAC?$AAO?$AAR?$AAE?$AA_?$AAC?$AAS?$AAW?$AAR?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAC?$AAS?$AAR?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAC?$AAS?$AAW?$AAR?$AA?0?$AA?5?$AAP@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@IFCMACEP@?$AAC?$AAH?$AAI?$AAP?$AA_?$AAC?$AAS?$AAW?$AAR?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAC?$AAS?$AAR?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAC?$AAS?$AAW?$AAR?$AA?0?$AA?5?$AAP@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@FEJCLOBI@?$AAC?$AAH?$AAI?$AAP?$AA_?$AAO?$AAS?$AAW?$AAR?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAC?$AAS?$AAR?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAO?$AAS?$AAW?$AAR?$AA?0?$AA?5?$AAP@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@GAHJKODH@?$AAC?$AAH?$AAI?$AAP?$AA_?$AAO?$AAF?$AAF?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAO?$AAF?$AAF?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAO?$AAF?$AAF?$AA?0?$AA?5?$AAP?$AAE?$AAR@| [ DATA ] ; `string'
	EXPORT	|?_rgTransitionTime@@3PAY06UDVFS_STRESS_TRANSITION_DATA@@A| [ DATA ] ; _rgTransitionTime
	EXPORT	|?_rgOppLatencySetupTable@@3PAUOPP_LATENCY_SETUP@@A| [ DATA ] ; _rgOppLatencySetupTable

  00000			 AREA	 |.bss|, NOINIT
|?_rgTransitionTime@@3PAY06UDVFS_STRESS_TRANSITION_DATA@@A| % 0x3d4 ; _rgTransitionTime
|_pOmap_Prcm_Per_Cm| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@GEECFLMJ@?$AAM?$AAP?$AAU?$AA_?$AAI?$AAN?$AAA?$AAC?$AAT?$AAI?$AAV?$AAE?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAO?$AAN?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAO?$AAN?$AA?0?$AA?5?$AAP@| DCB "M"
	DCB	0x0, "P", 0x0, "U", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "A"
	DCB	0x0, "C", 0x0, "T", 0x0, "I", 0x0, "V", 0x0, "E", 0x0, " "
	DCB	0x0, "(", 0x0, "M", 0x0, "P", 0x0, "U", 0x0, "-", 0x0, "O"
	DCB	0x0, "N", 0x0, ",", 0x0, " ", 0x0, "C", 0x0, "O", 0x0, "R"
	DCB	0x0, "E", 0x0, "-", 0x0, "O", 0x0, "N", 0x0, ",", 0x0, " "
	DCB	0x0, "P", 0x0, "E", 0x0, "R", 0x0, "-", 0x0, "O", 0x0, "N"
	DCB	0x0, ")", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@MMCHBKMF@?$AAC?$AAO?$AAR?$AAE?$AA_?$AAI?$AAN?$AAA?$AAC?$AAT?$AAI?$AAV?$AAE?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAC?$AAS?$AAR?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAO?$AAN?$AA?0@| DCB "C"
	DCB	0x0, "O", 0x0, "R", 0x0, "E", 0x0, "_", 0x0, "I", 0x0, "N"
	DCB	0x0, "A", 0x0, "C", 0x0, "T", 0x0, "I", 0x0, "V", 0x0, "E"
	DCB	0x0, " ", 0x0, "(", 0x0, "M", 0x0, "P", 0x0, "U", 0x0, "-"
	DCB	0x0, "C", 0x0, "S", 0x0, "R", 0x0, ",", 0x0, " ", 0x0, "C"
	DCB	0x0, "O", 0x0, "R", 0x0, "E", 0x0, "-", 0x0, "O", 0x0, "N"
	DCB	0x0, ",", 0x0, " ", 0x0, "P", 0x0, "E", 0x0, "R", 0x0, "-"
	DCB	0x0, "O", 0x0, "N", 0x0, ")", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@BMGNOGAM@?$AAC?$AAO?$AAR?$AAE?$AA_?$AAC?$AAS?$AAW?$AAR?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAC?$AAS?$AAR?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAC?$AAS?$AAW?$AAR?$AA?0?$AA?5?$AAP@| DCB "C"
	DCB	0x0, "O", 0x0, "R", 0x0, "E", 0x0, "_", 0x0, "C", 0x0, "S"
	DCB	0x0, "W", 0x0, "R", 0x0, " ", 0x0, "(", 0x0, "M", 0x0, "P"
	DCB	0x0, "U", 0x0, "-", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, ","
	DCB	0x0, " ", 0x0, "C", 0x0, "O", 0x0, "R", 0x0, "E", 0x0, "-"
	DCB	0x0, "C", 0x0, "S", 0x0, "W", 0x0, "R", 0x0, ",", 0x0, " "
	DCB	0x0, "P", 0x0, "E", 0x0, "R", 0x0, "-", 0x0, "O", 0x0, "N"
	DCB	0x0, ")", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@IFCMACEP@?$AAC?$AAH?$AAI?$AAP?$AA_?$AAC?$AAS?$AAW?$AAR?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAC?$AAS?$AAR?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAC?$AAS?$AAW?$AAR?$AA?0?$AA?5?$AAP@| DCB "C"
	DCB	0x0, "H", 0x0, "I", 0x0, "P", 0x0, "_", 0x0, "C", 0x0, "S"
	DCB	0x0, "W", 0x0, "R", 0x0, " ", 0x0, "(", 0x0, "M", 0x0, "P"
	DCB	0x0, "U", 0x0, "-", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, ","
	DCB	0x0, " ", 0x0, "C", 0x0, "O", 0x0, "R", 0x0, "E", 0x0, "-"
	DCB	0x0, "C", 0x0, "S", 0x0, "W", 0x0, "R", 0x0, ",", 0x0, " "
	DCB	0x0, "P", 0x0, "E", 0x0, "R", 0x0, "-", 0x0, "O", 0x0, "F"
	DCB	0x0, "F", 0x0, ")", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@FEJCLOBI@?$AAC?$AAH?$AAI?$AAP?$AA_?$AAO?$AAS?$AAW?$AAR?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAC?$AAS?$AAR?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAO?$AAS?$AAW?$AAR?$AA?0?$AA?5?$AAP@| DCB "C"
	DCB	0x0, "H", 0x0, "I", 0x0, "P", 0x0, "_", 0x0, "O", 0x0, "S"
	DCB	0x0, "W", 0x0, "R", 0x0, " ", 0x0, "(", 0x0, "M", 0x0, "P"
	DCB	0x0, "U", 0x0, "-", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, ","
	DCB	0x0, " ", 0x0, "C", 0x0, "O", 0x0, "R", 0x0, "E", 0x0, "-"
	DCB	0x0, "O", 0x0, "S", 0x0, "W", 0x0, "R", 0x0, ",", 0x0, " "
	DCB	0x0, "P", 0x0, "E", 0x0, "R", 0x0, "-", 0x0, "O", 0x0, "F"
	DCB	0x0, "F", 0x0, ")", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@GAHJKODH@?$AAC?$AAH?$AAI?$AAP?$AA_?$AAO?$AAF?$AAF?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAO?$AAF?$AAF?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAO?$AAF?$AAF?$AA?0?$AA?5?$AAP?$AAE?$AAR@| DCB "C"
	DCB	0x0, "H", 0x0, "I", 0x0, "P", 0x0, "_", 0x0, "O", 0x0, "F"
	DCB	0x0, "F", 0x0, " ", 0x0, "(", 0x0, "M", 0x0, "P", 0x0, "U"
	DCB	0x0, "-", 0x0, "O", 0x0, "F", 0x0, "F", 0x0, ",", 0x0, " "
	DCB	0x0, "C", 0x0, "O", 0x0, "R", 0x0, "E", 0x0, "-", 0x0, "O"
	DCB	0x0, "F", 0x0, "F", 0x0, ",", 0x0, " ", 0x0, "P", 0x0, "E"
	DCB	0x0, "R", 0x0, "-", 0x0, "O", 0x0, "F", 0x0, "F", 0x0, ")"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.data|, DATA
|?_rgOppLatencySetupTable@@3PAUOPP_LATENCY_SETUP@@A| DCD 0x48 ; _rgOppLatencySetupTable
	DCD	0x1
	DCD	0x10
	%	28
	DCD	0x0
	%	28
	DCD	0x48
	DCD	0x1
	DCD	0x0
	%	28
	DCD	0x0
	%	28
	DCD	0x48
	DCD	0x1
	DCD	0x0
	%	28
	DCD	0x1
	%	28
	%	24
	DCD	0x48
	DCD	0x1
	DCD	0x10
	%	28
	DCD	0x1
	%	28
	DCD	0x48
	DCD	0x1
	DCD	0x0
	%	28
	DCD	0x0
	%	28
	DCD	0x48
	DCD	0x1
	DCD	0x0
	%	28
	DCD	0x1
	%	28
	%	24
	DCD	0x48
	DCD	0x1
	DCD	0x10
	%	28
	DCD	0x2
	%	28
	DCD	0x48
	DCD	0x1
	DCD	0x0
	%	28
	DCD	0x0
	%	28
	DCD	0x48
	DCD	0x1
	DCD	0x0
	%	28
	DCD	0x1
	%	28
	%	24
	DCD	0x48
	DCD	0x1
	DCD	0x10
	%	28
	DCD	0x3
	%	28
	DCD	0x48
	DCD	0x1
	DCD	0x0
	%	28
	DCD	0x0
	%	28
	DCD	0x48
	DCD	0x1
	DCD	0x0
	%	28
	DCD	0x1
	%	28
	%	24
	DCD	0x48
	DCD	0x1
	DCD	0x10
	%	28
	DCD	0x4
	%	28
	DCD	0x48
	DCD	0x1
	DCD	0x0
	%	28
	DCD	0x0
	%	28
	DCD	0x48
	DCD	0x1
	DCD	0x0
	%	28
	DCD	0x1
	%	28
	%	24
	DCD	0x0
	DCD	0x0
	DCD	0x0
	%	28
	DCD	0x0
	%	28
	DCD	0x0
	DCD	0x0
	DCD	0x0
	%	28
	DCD	0x0
	%	28
	DCD	0x0
	DCD	0x0
	DCD	0x0
	%	28
	DCD	0x0
	%	28
	%	24
|_rgDomainProfile| DCD 0x4
	DCD	0x4
	DCD	0x4
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0xc8
	DCD	|??_C@_1EM@GAHJKODH@?$AAC?$AAH?$AAI?$AAP?$AA_?$AAO?$AAF?$AAF?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAO?$AAF?$AAF?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAO?$AAF?$AAF?$AA?0?$AA?5?$AAP?$AAE?$AAR@|
	DCD	0x2
	DCD	0x3
	DCD	0x4
	DCD	0x1
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0xc8
	DCD	|??_C@_1FA@FEJCLOBI@?$AAC?$AAH?$AAI?$AAP?$AA_?$AAO?$AAS?$AAW?$AAR?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAC?$AAS?$AAR?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAO?$AAS?$AAW?$AAR?$AA?0?$AA?5?$AAP@|
	DCD	0x2
	DCD	0x2
	DCD	0x4
	DCD	0x2
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0xc8
	DCD	|??_C@_1FA@IFCMACEP@?$AAC?$AAH?$AAI?$AAP?$AA_?$AAC?$AAS?$AAW?$AAR?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAC?$AAS?$AAR?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAC?$AAS?$AAW?$AAR?$AA?0?$AA?5?$AAP@|
	DCD	0x2
	DCD	0x2
	DCD	0x0
	DCD	0x3
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0xc8
	DCD	|??_C@_1EO@BMGNOGAM@?$AAC?$AAO?$AAR?$AAE?$AA_?$AAC?$AAS?$AAW?$AAR?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAC?$AAS?$AAR?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAC?$AAS?$AAW?$AAR?$AA?0?$AA?5?$AAP@|
	DCD	0x2
	DCD	0x0
	DCD	0x0
	DCD	0x4
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0xc8
	DCD	|??_C@_1FC@MMCHBKMF@?$AAC?$AAO?$AAR?$AAE?$AA_?$AAI?$AAN?$AAA?$AAC?$AAT?$AAI?$AAV?$AAE?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAC?$AAS?$AAR?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAO?$AAN?$AA?0@|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x5
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0xc8
	DCD	|??_C@_1EO@GEECFLMJ@?$AAM?$AAP?$AAU?$AA_?$AAI?$AAN?$AAA?$AAC?$AAT?$AAI?$AAV?$AAE?$AA?5?$AA?$CI?$AAM?$AAP?$AAU?$AA?9?$AAO?$AAN?$AA?0?$AA?5?$AAC?$AAO?$AAR?$AAE?$AA?9?$AAO?$AAN?$AA?0?$AA?5?$AAP@|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|RunOppLatencyProfiler|
	EXPORT	|??_C@_1BK@FLACBDMC@?$AAM?$AAP?$AAU?$AA?5?$AAO?$AAP?$AAP?$AA?$CF?$AAd?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@DFGCMIDB@?$AAO?$AAP?$AAP?$AA1?$AA?9?$AA?$DO?$AAO?$AAP?$AAP?$AA2?$AA?3?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@KFILHMKO@?$AAO?$AAP?$AAP?$AA2?$AA?9?$AA?$DO?$AAO?$AAP?$AAP?$AA1?$AA?3?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@ECOKHAMB@?$AAS?$AAD?$AAR?$AAC?$AA?5?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAi?$AAn?$AA?5?$AAu?$AAs?$AAe?$AAc?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@FFLIDJKF@?$AAO?$AAP?$AAP?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?7?$AAm?$AAi?$AAn?$AA?7?$AAm?$AAa?$AAx?$AA?7?$AAa?$AAv?$AAg?$AA?7?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@IAOGNGCI@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	IMPORT	|swprintf|
	IMPORT	|OutputDebugStringW|
	IMPORT	|KernelIoControl|
	IMPORT	|MmMapIoSpace|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|memset|
	IMPORT	|__security_check_cookie|
	IMPORT	|__itos|
	IMPORT	|__utos|
	IMPORT	|__divs|
	IMPORT	|__stod|
; File c:\wince600\platform\z2170p\src\app\proxydriver\dvfslatency.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T39803| DCD	|$LN25@RunOppLate|
	DCD	0xc0010702

  00000			 AREA	 |.xdata|, DATA
|$T39799| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@FLACBDMC@?$AAM?$AAP?$AAU?$AA?5?$AAO?$AAP?$AAP?$AA?$CF?$AAd?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "M"
	DCB	0x0, "P", 0x0, "U", 0x0, " ", 0x0, "O", 0x0, "P", 0x0, "P"
	DCB	0x0, "%", 0x0, "d", 0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@DFGCMIDB@?$AAO?$AAP?$AAP?$AA1?$AA?9?$AA?$DO?$AAO?$AAP?$AAP?$AA2?$AA?3?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "P", 0x0, "P", 0x0, "1", 0x0, "-", 0x0, ">", 0x0, "O"
	DCB	0x0, "P", 0x0, "P", 0x0, "2", 0x0, ":", 0x0, 0x9, 0x0, "%"
	DCB	0x0, ".", 0x0, "2", 0x0, "f", 0x0, 0x9, 0x0, "%", 0x0, "."
	DCB	0x0, "2", 0x0, "f", 0x0, 0x9, 0x0, "%", 0x0, ".", 0x0, "2"
	DCB	0x0, "f", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@KFILHMKO@?$AAO?$AAP?$AAP?$AA2?$AA?9?$AA?$DO?$AAO?$AAP?$AAP?$AA1?$AA?3?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "P", 0x0, "P", 0x0, "2", 0x0, "-", 0x0, ">", 0x0, "O"
	DCB	0x0, "P", 0x0, "P", 0x0, "1", 0x0, ":", 0x0, 0x9, 0x0, "%"
	DCB	0x0, ".", 0x0, "2", 0x0, "f", 0x0, 0x9, 0x0, "%", 0x0, "."
	DCB	0x0, "2", 0x0, "f", 0x0, 0x9, 0x0, "%", 0x0, ".", 0x0, "2"
	DCB	0x0, "f", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@ECOKHAMB@?$AAS?$AAD?$AAR?$AAC?$AA?5?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAi?$AAn?$AA?5?$AAu?$AAs?$AAe?$AAc?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "R", 0x0, "C", 0x0, " ", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "u", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, ":"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FFLIDJKF@?$AAO?$AAP?$AAP?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?7?$AAm?$AAi?$AAn?$AA?7?$AAm?$AAa?$AAx?$AA?7?$AAa?$AAv?$AAg?$AA?7?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "P", 0x0, "P", 0x0, " ", 0x0, "T", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, "s", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, 0x9, 0x0, "m", 0x0, "i", 0x0, "n"
	DCB	0x0, 0x9, 0x0, "m", 0x0, "a", 0x0, "x", 0x0, 0x9, 0x0, "a"
	DCB	0x0, "v", 0x0, "g", 0x0, 0x9, 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@IAOGNGCI@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T39799|

  00008		 |RunOppLatencyProfiler| PROC

; 88   : {

  00008		 |$LN25@RunOppLate|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddd0b	 sub         sp, sp, #0xB, 26
  00010		 |$M39800|
  00010	e1a07000	 mov         r7, r0
  00014	e58d7014	 str         r7, [sp, #0x14]
  00018	e59f3400	 ldr         r3, [pc, #0x400]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d32bc	 str         r3, [sp, #0x2BC]

; 89   :     int i;
; 90   :     int idx = 0;
; 91   :     DWORD minUp, maxUp, sumUp;
; 92   :     DWORD minDown, maxDown, sumDown;
; 93   :     DWORD temp;
; 94   :     ProfilerControlEx profilerControlEx;
; 95   :     WCHAR szBuffer[MAX_PATH];
; 96   : 
; 97   :     // initialize variables
; 98   :     OPP_LATENCY_SETUP  *pLatencySetup = &_rgOppLatencySetupTable[idx++];

  00024	e59f63e8	 ldr         r6, [pc, #0x3E8]

; 99   :     memset(&profilerControlEx, 0, sizeof(ProfilerControlEx));

  00028	e3a02098	 mov         r2, #0x98
  0002c	e3a01000	 mov         r1, #0
  00030	e28d001c	 add         r0, sp, #0x1C
  00034	e1a04006	 mov         r4, r6
  00038	eb000000	 bl          memset

; 100  : 
; 101  :     profilerControlEx.dwVersion = 1;
; 102  :     profilerControlEx.OEM.dwControlSize = sizeof(ProfilerControlEx) - sizeof(ProfilerControl);
; 103  :     profilerControlEx.OEM.dwCount = 2;
; 104  :     profilerControlEx.OEM.rgTargets[0] = PROFILE_CORE1_DVFS_BEGIN;
; 105  :     profilerControlEx.OEM.rgTargets[1] = PROFILE_CORE1_DVFS_END;
; 106  : 
; 107  :     // set source clock to sys clock
; 108  :     if (_pOmap_Prcm_Per_Cm == NULL)

  0003c	e59f53d8	 ldr         r5, [pc, #0x3D8]
  00040	e3a0e001	 mov         lr, #1
  00044	e3a08084	 mov         r8, #0x84
  00048	e5950000	 ldr         r0, [r5]
  0004c	e3a03002	 mov         r3, #2
  00050	e3a02000	 mov         r2, #0
  00054	e3a01001	 mov         r1, #1
  00058	e3500000	 cmp         r0, #0
  0005c	e58de01c	 str         lr, [sp, #0x1C]
  00060	e58d802c	 str         r8, [sp, #0x2C]
  00064	e58d3030	 str         r3, [sp, #0x30]
  00068	e58d2034	 str         r2, [sp, #0x34]
  0006c	e58d1038	 str         r1, [sp, #0x38]
  00070	1a000006	 bne         |$LN15@RunOppLate|
  00074	e3a03312	 mov         r3, #0x12, 6

; 109  :         {
; 110  :         PHYSICAL_ADDRESS PhysAddr;
; 111  : 
; 112  :         PhysAddr.QuadPart = OMAP_PRCM_PER_CM_REGS_PA;

  00078	e3830a05	 orr         r0, r3, #5, 20

; 113  :         _pOmap_Prcm_Per_Cm = (OMAP_PRCM_PER_CM_REGS*)MmMapIoSpace(PhysAddr, OMAP_PRCM_PER_CM_REGS_SIZE, FALSE);

  0007c	e3a03000	 mov         r3, #0
  00080	e3a01000	 mov         r1, #0
  00084	e3a02c01	 mov         r2, #1, 24
  00088	eb000000	 bl          MmMapIoSpace
  0008c	e5850000	 str         r0, [r5]
  00090		 |$LN15@RunOppLate|

; 114  :         }
; 115  : 
; 116  :     // use gptimer3
; 117  :     SETREG32(&_pOmap_Prcm_Per_Cm->CM_CLKSEL_PER, CLKSEL_GPT3);

  00090	e5903040	 ldr         r3, [r0, #0x40]

; 118  : 
; 119  :     // start oem profiler
; 120  :     profilerControlEx.dwOptions = PROFILE_STARTPAUSED;
; 121  :     //ProfileStartEx((ProfilerControl*)&profilerControlEx);
; 122  :     profilerControlEx.dwOptions = PROFILE_START;

  00094	e3a02c01	 mov         r2, #1, 24

; 123  :     KernelIoControl(IOCTL_HAL_OEM_PROFILER, 
; 124  :                 &profilerControlEx, 
; 125  :                 sizeof(ProfilerControlEx),
; 126  :                 NULL, 
; 127  :                 0, 
; 128  :                 NULL
; 129  :                 );

  00098	e3a05000	 mov         r5, #0
  0009c	e3833002	 orr         r3, r3, #2
  000a0	e5803040	 str         r3, [r0, #0x40]
  000a4	e59f0364	 ldr         r0, [pc, #0x364]
  000a8	e58d2020	 str         r2, [sp, #0x20]
  000ac	e3a03000	 mov         r3, #0
  000b0	e3a02098	 mov         r2, #0x98
  000b4	e28d101c	 add         r1, sp, #0x1C
  000b8	e58d5004	 str         r5, [sp, #4]
  000bc	e58d5000	 str         r5, [sp]
  000c0	eb000000	 bl          KernelIoControl

; 130  : 
; 131  :     // loop through each test
; 132  :     while (pLatencySetup->envOppInfo.size != 0)

  000c4	e5963000	 ldr         r3, [r6]
  000c8	e3530000	 cmp         r3, #0
  000cc	0a000068	 beq         |$LN13@RunOppLate|
  000d0	e28670f0	 add         r7, r6, #0xF0
  000d4	e58d7018	 str         r7, [sp, #0x18]
  000d8	e3e0e000	 mvn         lr, #0
  000dc		 |$LL14@RunOppLate|

; 133  :         {
; 134  :         // initialize some counters
; 135  :         pLatencySetup->minUp = pLatencySetup->minDown = minUp = minDown = (DWORD)-1;
; 136  :         pLatencySetup->maxUp = pLatencySetup->maxDown = maxUp = maxDown = 0;
; 137  :         pLatencySetup->sumUp = pLatencySetup->sumDown = sumUp = sumDown = 0;
; 138  :         
; 139  :         // set current opp to the run environment opp
; 140  :         KernelIoControl(IOCTL_OPP_REQUEST, &pLatencySetup->envOppInfo, 
; 141  :             sizeof(IOCTL_OPP_REQUEST_IN), 0, 0, 0
; 142  :             );

  000dc	e59f0334	 ldr         r0, [pc, #0x334]
  000e0	e1a0800e	 mov         r8, lr
  000e4	e1a0900e	 mov         r9, lr
  000e8	e584e0e4	 str         lr, [r4, #0xE4]
  000ec	e584e0d8	 str         lr, [r4, #0xD8]
  000f0	e3a0e000	 mov         lr, #0
  000f4	e3a03000	 mov         r3, #0
  000f8	e3a02048	 mov         r2, #0x48
  000fc	e1a01004	 mov         r1, r4
  00100	e58de010	 str         lr, [sp, #0x10]
  00104	e3a0a000	 mov         r10, #0
  00108	e3a0b000	 mov         r11, #0
  0010c	e58450e8	 str         r5, [r4, #0xE8]
  00110	e58450dc	 str         r5, [r4, #0xDC]
  00114	e3a06000	 mov         r6, #0
  00118	e58450ec	 str         r5, [r4, #0xEC]
  0011c	e58450e0	 str         r5, [r4, #0xE0]
  00120	e58d5004	 str         r5, [sp, #4]
  00124	e58d5000	 str         r5, [sp]
  00128	eb000000	 bl          KernelIoControl

; 143  : 
; 144  :         for (i = 0; i < nSamples * 2; ++i)

  0012c	e59d2014	 ldr         r2, [sp, #0x14]
  00130	e3a05000	 mov         r5, #0
  00134	e1a03082	 mov         r3, r2, lsl #1
  00138	e3530000	 cmp         r3, #0
  0013c	da00003b	 ble         |$LN10@RunOppLate|

; 188  :                 sumUp += temp;

  00140	e59d7010	 ldr         r7, [sp, #0x10]

; 143  : 
; 144  :         for (i = 0; i < nSamples * 2; ++i)

  00144		 |$LL12@RunOppLate|

; 145  :             {
; 146  :             if (i & 1)
; 147  :                 {
; 148  :                 // change OPP
; 149  :                 KernelIoControl(IOCTL_OPP_REQUEST, &pLatencySetup->oppAInfo, 
; 150  :                     sizeof(IOCTL_OPP_REQUEST_IN), 0, 0, 0
; 151  :                     );

  00144	e59f02cc	 ldr         r0, [pc, #0x2CC]
  00148	e3150001	 tst         r5, #1
  0014c	e3a03000	 mov         r3, #0
  00150	e3a02048	 mov         r2, #0x48
  00154	e3a0e000	 mov         lr, #0
  00158	0a000017	 beq         |$LN9@RunOppLate|
  0015c	e2841048	 add         r1, r4, #0x48
  00160	e58de004	 str         lr, [sp, #4]
  00164	e58de000	 str         lr, [sp]
  00168	eb000000	 bl          KernelIoControl

; 152  : 
; 153  :                 // get data
; 154  :                 profilerControlEx.dwOptions = PROFILE_OEMDEFINED;
; 155  :                 KernelIoControl(IOCTL_HAL_OEM_PROFILER, 
; 156  :                     &profilerControlEx, 
; 157  :                     sizeof(ProfilerControlEx),
; 158  :                     NULL, 
; 159  :                     0, 
; 160  :                     NULL
; 161  :                     );

  0016c	e3a0e080	 mov         lr, #0x80
  00170	e59f0298	 ldr         r0, [pc, #0x298]
  00174	e58de020	 str         lr, [sp, #0x20]
  00178	e3a0e000	 mov         lr, #0
  0017c	e3a03000	 mov         r3, #0
  00180	e3a02098	 mov         r2, #0x98
  00184	e28d101c	 add         r1, sp, #0x1C
  00188	e58de004	 str         lr, [sp, #4]
  0018c	e58de000	 str         lr, [sp]
  00190	eb000000	 bl          KernelIoControl

; 162  :                 
; 163  :                 // save off info
; 164  :                 temp = profilerControlEx.OEM.rgValues[1] - profilerControlEx.OEM.rgValues[0];

  00194	e59d2078	 ldr         r2, [sp, #0x78]
  00198	e59d3074	 ldr         r3, [sp, #0x74]
  0019c	e0423003	 sub         r3, r2, r3

; 165  :                 sumDown += temp;
; 166  :                 if (temp > maxDown) maxDown = temp;

  001a0	e153000a	 cmp         r3, r10
  001a4	81a0a003	 movhi       r10, r3

; 167  :                 if (temp < minDown) minDown = temp;

  001a8	e1530008	 cmp         r3, r8
  001ac	e0866003	 add         r6, r6, r3
  001b0	2a000017	 bcs         |$LN11@RunOppLate|
  001b4	e1a08003	 mov         r8, r3

; 168  :                 }
; 169  :             else

  001b8	ea000015	 b           |$LN11@RunOppLate|
  001bc		 |$LN9@RunOppLate|

; 170  :                 {
; 171  :                 // change OPP
; 172  :                 KernelIoControl(IOCTL_OPP_REQUEST, &pLatencySetup->oppBInfo, 
; 173  :                     sizeof(IOCTL_OPP_REQUEST_IN), 0, 0, 0
; 174  :                     );

  001bc	e2841090	 add         r1, r4, #0x90
  001c0	e58de004	 str         lr, [sp, #4]
  001c4	e58de000	 str         lr, [sp]
  001c8	eb000000	 bl          KernelIoControl

; 175  : 
; 176  :                 // get data
; 177  :                 profilerControlEx.dwOptions = PROFILE_OEMDEFINED;
; 178  :                 KernelIoControl(IOCTL_HAL_OEM_PROFILER, 
; 179  :                     &profilerControlEx, 
; 180  :                     sizeof(ProfilerControlEx),
; 181  :                     NULL, 
; 182  :                     0, 
; 183  :                     NULL
; 184  :                     );

  001cc	e3a0e080	 mov         lr, #0x80
  001d0	e59f0238	 ldr         r0, [pc, #0x238]
  001d4	e58de020	 str         lr, [sp, #0x20]
  001d8	e3a0e000	 mov         lr, #0
  001dc	e3a03000	 mov         r3, #0
  001e0	e3a02098	 mov         r2, #0x98
  001e4	e28d101c	 add         r1, sp, #0x1C
  001e8	e58de004	 str         lr, [sp, #4]
  001ec	e58de000	 str         lr, [sp]
  001f0	eb000000	 bl          KernelIoControl

; 185  : 
; 186  :                 // save off info
; 187  :                 temp = profilerControlEx.OEM.rgValues[1] - profilerControlEx.OEM.rgValues[0];

  001f4	e59d2078	 ldr         r2, [sp, #0x78]
  001f8	e59d3074	 ldr         r3, [sp, #0x74]
  001fc	e0423003	 sub         r3, r2, r3

; 189  :                 if (temp > maxUp) maxUp = temp;

  00200	e153000b	 cmp         r3, r11
  00204	81a0b003	 movhi       r11, r3

; 190  :                 if (temp < minUp) minUp = temp;

  00208	e1530009	 cmp         r3, r9
  0020c	31a09003	 movcc       r9, r3
  00210	e0877003	 add         r7, r7, r3
  00214		 |$LN11@RunOppLate|
  00214	e59d2014	 ldr         r2, [sp, #0x14]
  00218	e2855001	 add         r5, r5, #1
  0021c	e1a03082	 mov         r3, r2, lsl #1
  00220	e1550003	 cmp         r5, r3
  00224	baffffc6	 blt         |$LL12@RunOppLate|
  00228	e58d7010	 str         r7, [sp, #0x10]

; 191  :                 }
; 192  : 
; 193  :             }
; 194  : 
; 195  :         // save logs
; 196  :         pLatencySetup->minUp = minUp;
; 197  :         pLatencySetup->maxUp = maxUp;
; 198  :         pLatencySetup->sumUp = sumUp;
; 199  : 
; 200  :         pLatencySetup->minDown = minDown;
; 201  :         pLatencySetup->maxDown = maxDown;
; 202  :         pLatencySetup->sumDown = sumDown;
; 203  :         
; 204  :         // get next latency setup
; 205  :         pLatencySetup = &_rgOppLatencySetupTable[idx++];

  0022c	e59d7018	 ldr         r7, [sp, #0x18]
  00230		 |$LN10@RunOppLate|
  00230	e59d3010	 ldr         r3, [sp, #0x10]
  00234	e58490d8	 str         r9, [r4, #0xD8]
  00238	e584b0dc	 str         r11, [r4, #0xDC]
  0023c	e284c0e0	 add         r12, r4, #0xE0
  00240	e88c0508	 stmia       r12, {r3, r8, r10}
  00244	e58460ec	 str         r6, [r4, #0xEC]
  00248	e3a05000	 mov         r5, #0
  0024c	e3e0e000	 mvn         lr, #0
  00250	e1a04007	 mov         r4, r7
  00254	e5943000	 ldr         r3, [r4]
  00258	e28770f0	 add         r7, r7, #0xF0
  0025c	e58d7018	 str         r7, [sp, #0x18]
  00260	e3530000	 cmp         r3, #0
  00264	1affff9c	 bne         |$LL14@RunOppLate|
  00268	e59f61a4	 ldr         r6, [pc, #0x1A4]
  0026c	e59d7014	 ldr         r7, [sp, #0x14]
  00270	e3a05000	 mov         r5, #0
  00274		 |$LN13@RunOppLate|

; 206  :         }
; 207  : 
; 208  :     // stop profiling
; 209  :     profilerControlEx.dwOptions = PROFILE_STARTPAUSED;
; 210  :     //ProfileStop();
; 211  :     profilerControlEx.dwOptions = PROFILE_STOP;
; 212  :     KernelIoControl(IOCTL_HAL_OEM_PROFILER, 
; 213  :                 &profilerControlEx, 
; 214  :                 sizeof(ProfilerControlEx),
; 215  :                 NULL, 
; 216  :                 0, 
; 217  :                 NULL
; 218  :                 );

  00274	e59f0194	 ldr         r0, [pc, #0x194]
  00278	e3a03c02	 mov         r3, #2, 24
  0027c	e58d3020	 str         r3, [sp, #0x20]
  00280	e3a03000	 mov         r3, #0
  00284	e3a02098	 mov         r2, #0x98
  00288	e28d101c	 add         r1, sp, #0x1C
  0028c	e58d5004	 str         r5, [sp, #4]
  00290	e58d5000	 str         r5, [sp]
  00294	eb000000	 bl          KernelIoControl

; 219  : 
; 220  :     // output results
; 221  :     OutputDebugString(L"SDRC Stall in usec:\r\n");

  00298	e59f016c	 ldr         r0, [pc, #0x16C]
  0029c	eb000000	 bl          OutputDebugStringW

; 222  :     OutputDebugString(L"OPP Transition \tmin\tmax\tavg\t\r\n");

  002a0	e59f0160	 ldr         r0, [pc, #0x160]
  002a4	eb000000	 bl          OutputDebugStringW

; 223  :     OutputDebugString(L"---------------------------------------------\r\n");

  002a8	e59f0154	 ldr         r0, [pc, #0x154]
  002ac	eb000000	 bl          OutputDebugStringW
  002b0	e1a00007	 mov         r0, r7

; 224  : 
; 225  :     // loop through and output results
; 226  :     idx = 0;
; 227  :     pLatencySetup = &_rgOppLatencySetupTable[idx++];

  002b4	eb000000	 bl          __itos
  002b8	e1a05000	 mov         r5, r0
  002bc	e28640f0	 add         r4, r6, #0xF0
  002c0	e3a07441	 mov         r7, #0x41, 8
  002c4		 |$LL3@RunOppLate|

; 228  :     do
; 229  :         {
; 230  :         // show mpu opp settings
; 231  :         _stprintf(szBuffer, L"MPU OPP%d:\r\n", pLatencySetup->envOppInfo.rgOpps[0] + 1);

  002c4	e5963028	 ldr         r3, [r6, #0x28]
  002c8	e59f1130	 ldr         r1, [pc, #0x130]
  002cc	e28d00b4	 add         r0, sp, #0xB4
  002d0	e2832001	 add         r2, r3, #1
  002d4	eb000000	 bl          swprintf

; 232  :         OutputDebugString(szBuffer);

  002d8	e28d00b4	 add         r0, sp, #0xB4
  002dc	eb000000	 bl          OutputDebugStringW

; 233  : 
; 234  :         // show up transition
; 235  :         _stprintf(szBuffer, L"OPP1->OPP2:\t%.2f\t%.2f\t%.2f\r\n",
; 236  :             (float)pLatencySetup->minUp/26.0f,
; 237  :             (float)pLatencySetup->maxUp/26.0f,
; 238  :             (float)pLatencySetup->sumUp/26.0f/(float)nSamples
; 239  :             );

  002e0	e59600e0	 ldr         r0, [r6, #0xE0]
  002e4	eb000000	 bl          __utos
  002e8	e387160d	 orr         r1, r7, #0xD, 12
  002ec	eb000000	 bl          __divs
  002f0	e1a01005	 mov         r1, r5
  002f4	eb000000	 bl          __divs
  002f8	eb000000	 bl          __stod
  002fc	e1a03000	 mov         r3, r0
  00300	e59600dc	 ldr         r0, [r6, #0xDC]
  00304	e58d3008	 str         r3, [sp, #8]
  00308	e58d100c	 str         r1, [sp, #0xC]
  0030c	eb000000	 bl          __utos
  00310	e387160d	 orr         r1, r7, #0xD, 12
  00314	eb000000	 bl          __divs
  00318	eb000000	 bl          __stod
  0031c	e1a03000	 mov         r3, r0
  00320	e59600d8	 ldr         r0, [r6, #0xD8]
  00324	e58d3000	 str         r3, [sp]
  00328	e58d1004	 str         r1, [sp, #4]
  0032c	eb000000	 bl          __utos
  00330	e387160d	 orr         r1, r7, #0xD, 12
  00334	eb000000	 bl          __divs
  00338	eb000000	 bl          __stod
  0033c	e1a03001	 mov         r3, r1
  00340	e59f10b4	 ldr         r1, [pc, #0xB4]
  00344	e1a02000	 mov         r2, r0
  00348	e28d00b4	 add         r0, sp, #0xB4
  0034c	eb000000	 bl          swprintf

; 240  :         OutputDebugString(szBuffer);

  00350	e28d00b4	 add         r0, sp, #0xB4
  00354	eb000000	 bl          OutputDebugStringW

; 241  : 
; 242  :         // show down transition
; 243  :         _stprintf(szBuffer, L"OPP2->OPP1:\t%.2f\t%.2f\t%.2f\r\n",
; 244  :             (float)pLatencySetup->minDown/26.0f,
; 245  :             (float)pLatencySetup->maxDown/26.0f,
; 246  :             (float)pLatencySetup->sumDown/26.0f/(float)nSamples
; 247  :             );

  00358	e59600ec	 ldr         r0, [r6, #0xEC]
  0035c	eb000000	 bl          __utos
  00360	e387160d	 orr         r1, r7, #0xD, 12
  00364	eb000000	 bl          __divs
  00368	e1a01005	 mov         r1, r5
  0036c	eb000000	 bl          __divs
  00370	eb000000	 bl          __stod
  00374	e1a03000	 mov         r3, r0
  00378	e59600e8	 ldr         r0, [r6, #0xE8]
  0037c	e58d3008	 str         r3, [sp, #8]
  00380	e58d100c	 str         r1, [sp, #0xC]
  00384	eb000000	 bl          __utos
  00388	e387160d	 orr         r1, r7, #0xD, 12
  0038c	eb000000	 bl          __divs
  00390	eb000000	 bl          __stod
  00394	e1a03000	 mov         r3, r0
  00398	e59600e4	 ldr         r0, [r6, #0xE4]
  0039c	e58d3000	 str         r3, [sp]
  003a0	e58d1004	 str         r1, [sp, #4]
  003a4	eb000000	 bl          __utos
  003a8	e387160d	 orr         r1, r7, #0xD, 12
  003ac	eb000000	 bl          __divs
  003b0	eb000000	 bl          __stod
  003b4	e1a03001	 mov         r3, r1
  003b8	e59f1038	 ldr         r1, [pc, #0x38]
  003bc	e1a02000	 mov         r2, r0
  003c0	e28d00b4	 add         r0, sp, #0xB4
  003c4	eb000000	 bl          swprintf

; 248  :         OutputDebugString(szBuffer);

  003c8	e28d00b4	 add         r0, sp, #0xB4
  003cc	eb000000	 bl          OutputDebugStringW

; 249  : 
; 250  :         pLatencySetup = &_rgOppLatencySetupTable[idx++];

  003d0	e1a06004	 mov         r6, r4

; 251  :         }    
; 252  :         while (pLatencySetup->envOppInfo.size != 0);

  003d4	e5963000	 ldr         r3, [r6]
  003d8	e28440f0	 add         r4, r4, #0xF0
  003dc	e3530000	 cmp         r3, #0
  003e0	1affffb7	 bne         |$LL3@RunOppLate|
  003e4	e59d02bc	 ldr         r0, [sp, #0x2BC]
  003e8	eb000000	 bl          __security_check_cookie

; 253  : 
; 254  :         
; 255  : }

  003ec	e28ddd0b	 add         sp, sp, #0xB, 26
  003f0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  003f4	e12fff1e	 bx          lr
  003f8		 |$LN26@RunOppLate|
  003f8		 |$LN27@RunOppLate|
  003f8	00000000	 DCD         |??_C@_1DK@KFILHMKO@?$AAO?$AAP?$AAP?$AA2?$AA?9?$AA?$DO?$AAO?$AAP?$AAP?$AA1?$AA?3?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?$AN?$AA?6?$AA?$AA@|
  003fc		 |$LN28@RunOppLate|
  003fc	00000000	 DCD         |??_C@_1DK@DFGCMIDB@?$AAO?$AAP?$AAP?$AA1?$AA?9?$AA?$DO?$AAO?$AAP?$AAP?$AA2?$AA?3?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?$AN?$AA?6?$AA?$AA@|
  00400		 |$LN29@RunOppLate|
  00400	00000000	 DCD         |??_C@_1BK@FLACBDMC@?$AAM?$AAP?$AAU?$AA?5?$AAO?$AAP?$AAP?$AA?$CF?$AAd?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  00404		 |$LN30@RunOppLate|
  00404	00000000	 DCD         |??_C@_1GA@IAOGNGCI@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  00408		 |$LN31@RunOppLate|
  00408	00000000	 DCD         |??_C@_1DO@FFLIDJKF@?$AAO?$AAP?$AAP?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AA?7?$AAm?$AAi?$AAn?$AA?7?$AAm?$AAa?$AAx?$AA?7?$AAa?$AAv?$AAg?$AA?7?$AA?$AN?$AA?6?$AA?$AA@|
  0040c		 |$LN32@RunOppLate|
  0040c	00000000	 DCD         |??_C@_1CM@ECOKHAMB@?$AAS?$AAD?$AAR?$AAC?$AA?5?$AAS?$AAt?$AAa?$AAl?$AAl?$AA?5?$AAi?$AAn?$AA?5?$AAu?$AAs?$AAe?$AAc?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  00410		 |$LN33@RunOppLate|
  00410	0101010c	 DCD         0x101010c
  00414		 |$LN34@RunOppLate|
  00414	00000000	 DCD         |?_rgOppLatencySetupTable@@3PAUOPP_LATENCY_SETUP@@A|
  00418		 |$LN35@RunOppLate|
  00418	01f50fd4	 DCD         0x1f50fd4
  0041c		 |$LN36@RunOppLate|
  0041c	00000000	 DCD         |_pOmap_Prcm_Per_Cm|
  00420		 |$LN37@RunOppLate|
  00420	00000000	 DCD         |__security_cookie|
  00424		 |$M39801|

			 ENDP  ; |RunOppLatencyProfiler|

	EXPORT	|?ClearProfileControlData@@YAXPAUProfilerControlEx@@@Z| ; ClearProfileControlData

  00000			 AREA	 |.pdata|, PDATA
|$T39828| DCD	|$LN12@ClearProfi|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ClearProfileControlData@@YAXPAUProfilerControlEx@@@Z| PROC ; ClearProfileControlData

; 308  : {

  00000		 |$LN12@ClearProfi|
  00000		 |$M39825|

; 309  :     for (int i = 0; i < PROFILE_COUNT; ++i)
; 310  :         {
; 311  :         pProfilerControlEx->OEM.rgValues[i] = 0;

  00000	e2803058	 add         r3, r0, #0x58
  00004	e2832040	 add         r2, r3, #0x40
  00008	e3a01000	 mov         r1, #0
  0000c		 |$LN8@ClearProfi|
  0000c	e4831004	 str         r1, [r3], #4
  00010	e1530002	 cmp         r3, r2
  00014	1afffffc	 bne         |$LN8@ClearProfi|

; 312  :         }
; 313  : }

  00018	e12fff1e	 bx          lr
  0001c		 |$M39826|

			 ENDP  ; |?ClearProfileControlData@@YAXPAUProfilerControlEx@@@Z|, ClearProfileControlData

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|ProfileInterruptLatency|
	EXPORT	|??_C@_1DI@LCMHJCHD@?$AA?$CF?$AAs?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@LMNJMELA@?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAu?$AAs?$AAe?$AAc?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@BMMAPLAO@?$AAS?$AAl?$AAe?$AAe?$AAp?$AA?5?$AAD?$AAe?$AAs?$AAc?$AA?4?$AA?7?$AA?7?$AAM?$AAI?$AAN?$AA?7?$AAM?$AAA?$AAX?$AA?7?$AAA?$AAV?$AAG?$AA?7?$AAS?$AAU?$AAM?$AA?7?$AAC?$AAO?$AAU@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@PCHICHEK@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@CEACKNHH@?$AAp?$AAr?$AAo?$AAf?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|Sleep|
	IMPORT	|PmxUpdateConstraint|
	IMPORT	|__muls|

  00000			 AREA	 |.pdata|, PDATA
|$T39888| DCD	|$LN49@ProfileInt|
	DCD	0xc0011302

  00000			 AREA	 |.xdata|, DATA
|$T39884| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@LCMHJCHD@?$AA?$CF?$AAs?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, 0x9, 0x0, "%", 0x0, ".", 0x0, "2", 0x0, "f"
	DCB	0x0, 0x9, 0x0, "%", 0x0, ".", 0x0, "2", 0x0, "f", 0x0, 0x9
	DCB	0x0, "%", 0x0, ".", 0x0, "2", 0x0, "f", 0x0, 0x9, 0x0, "%"
	DCB	0x0, ".", 0x0, "2", 0x0, "f", 0x0, 0x9, 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@LMNJMELA@?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAu?$AAs?$AAe?$AAc?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "s", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "s", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "u", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@BMMAPLAO@?$AAS?$AAl?$AAe?$AAe?$AAp?$AA?5?$AAD?$AAe?$AAs?$AAc?$AA?4?$AA?7?$AA?7?$AAM?$AAI?$AAN?$AA?7?$AAM?$AAA?$AAX?$AA?7?$AAA?$AAV?$AAG?$AA?7?$AAS?$AAU?$AAM?$AA?7?$AAC?$AAO?$AAU@| DCB "S"
	DCB	0x0, "l", 0x0, "e", 0x0, "e", 0x0, "p", 0x0, " ", 0x0, "D"
	DCB	0x0, "e", 0x0, "s", 0x0, "c", 0x0, ".", 0x0, 0x9, 0x0, 0x9
	DCB	0x0, "M", 0x0, "I", 0x0, "N", 0x0, 0x9, 0x0, "M", 0x0, "A"
	DCB	0x0, "X", 0x0, 0x9, 0x0, "A", 0x0, "V", 0x0, "G", 0x0, 0x9
	DCB	0x0, "S", 0x0, "U", 0x0, "M", 0x0, 0x9, 0x0, "C", 0x0, "O"
	DCB	0x0, "U", 0x0, "N", 0x0, "T", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@PCHICHEK@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@CEACKNHH@?$AAp?$AAr?$AAo?$AAf?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "r", 0x0, "o", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T39884|

  00008		 |ProfileInterruptLatency| PROC

; 321  : {

  00008		 |$LN49@ProfileInt|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddfb7	 sub         sp, sp, #0xB7, 30
  00010		 |$M39885|
  00010	e1a06000	 mov         r6, r0
  00014	e58d6020	 str         r6, [sp, #0x20]
  00018	e58d1024	 str         r1, [sp, #0x24]
  0001c	e59f342c	 ldr         r3, [pc, #0x42C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d32d8	 str         r3, [sp, #0x2D8]

; 322  :     int prof;
; 323  :     int loopCount;
; 324  :     int nSamples;
; 325  :     WCHAR szBuffer[MAX_PATH];
; 326  :     PHYSICAL_ADDRESS PhysAddr;
; 327  :     int val, min, max, total;
; 328  :     ProfilerControlEx profilerControlEx;
; 329  :     POWERDOMAIN_CONSTRAINT_INFO constraintInfo;
; 330  :     OMAP_PRCM_MPU_PRM_REGS *pOMAP_PRCM_MPU_PRM;
; 331  : 
; 332  :     // get access to PRM registers directly
; 333  :     PhysAddr.QuadPart = OMAP_PRCM_MPU_PRM_REGS_PA;

  00028	e59f041c	 ldr         r0, [pc, #0x41C]
  0002c	e3a01000	 mov         r1, #0

; 334  :     pOMAP_PRCM_MPU_PRM = (OMAP_PRCM_MPU_PRM_REGS*)MmMapIoSpace(PhysAddr, OMAP_PRCM_MPU_PRM_REGS_SIZE, FALSE);

  00030	e3a03000	 mov         r3, #0
  00034	e3a02c01	 mov         r2, #1, 24
  00038	eb000000	 bl          MmMapIoSpace

; 335  : 
; 336  :     // open a power domain constraint handle to change the power domain 
; 337  :     // floors
; 338  :     constraintInfo.size = sizeof(POWERDOMAIN_CONSTRAINT_INFO);

  0003c	e3a0300c	 mov         r3, #0xC

; 339  :         
; 340  :     // initialize variables
; 341  :     memset(&profilerControlEx, 0, sizeof(ProfilerControlEx));

  00040	e3a02098	 mov         r2, #0x98
  00044	e3a01000	 mov         r1, #0
  00048	e28d0038	 add         r0, sp, #0x38
  0004c	e58d3028	 str         r3, [sp, #0x28]
  00050	eb000000	 bl          memset

; 342  :     profilerControlEx.dwVersion = 1;
; 343  :     profilerControlEx.dwOptions = PROFILE_OEMDEFINED;
; 344  :     profilerControlEx.OEM.dwControlSize = sizeof(ProfilerControlEx) - sizeof(ProfilerControl);
; 345  :     profilerControlEx.OEM.dwCount = PROFILE_WAKEUP_LATENCY_MAX_IDX;
; 346  :     profilerControlEx.OEM.rgTargets[0] = PROFILE_WAKEUP_LATENCY_CHIP_OFF;
; 347  :     profilerControlEx.OEM.rgTargets[1] = PROFILE_WAKEUP_LATENCY_CHIP_OSWR;
; 348  :     profilerControlEx.OEM.rgTargets[2] = PROFILE_WAKEUP_LATENCY_CHIP_CSWR;
; 349  :     profilerControlEx.OEM.rgTargets[3] = PROFILE_WAKEUP_LATENCY_CORE_CSWR;
; 350  :     profilerControlEx.OEM.rgTargets[4] = PROFILE_WAKEUP_LATENCY_CORE_INACTIVE;
; 351  :     profilerControlEx.OEM.rgTargets[5] = PROFILE_WAKEUP_LATENCY_MPU_INACTIVE;
; 352  : 
; 353  :     // loop through entire profile list
; 354  :     prof = 0;
; 355  :     while (_rgDomainProfile[prof].szDescription != NULL)

  00054	e59f53e4	 ldr         r5, [pc, #0x3E4]
  00058	e3a08008	 mov         r8, #8
  0005c	e3a0b080	 mov         r11, #0x80
  00060	e5953024	 ldr         r3, [r5, #0x24]
  00064	e58d8060	 str         r8, [sp, #0x60]
  00068	e3a0a001	 mov         r10, #1
  0006c	e3a02084	 mov         r2, #0x84
  00070	e3a01006	 mov         r1, #6
  00074	e3a00004	 mov         r0, #4
  00078	e3a0e005	 mov         lr, #5
  0007c	e3a04006	 mov         r4, #6
  00080	e3a07007	 mov         r7, #7
  00084	e3a09009	 mov         r9, #9
  00088	e3a08000	 mov         r8, #0
  0008c	e58db03c	 str         r11, [sp, #0x3C]
  00090	e3530000	 cmp         r3, #0
  00094	e58da038	 str         r10, [sp, #0x38]
  00098	e58d2048	 str         r2, [sp, #0x48]
  0009c	e58d104c	 str         r1, [sp, #0x4C]
  000a0	e58d0050	 str         r0, [sp, #0x50]
  000a4	e58de054	 str         lr, [sp, #0x54]
  000a8	e58d4058	 str         r4, [sp, #0x58]
  000ac	e58d705c	 str         r7, [sp, #0x5C]
  000b0	e58d9064	 str         r9, [sp, #0x64]
  000b4	e58d8034	 str         r8, [sp, #0x34]
  000b8	e3a0b000	 mov         r11, #0
  000bc	0a00007a	 beq         |$LN14@ProfileInt|
  000c0	e3a07000	 mov         r7, #0
  000c4	e1a04005	 mov         r4, r5
  000c8	e3e0a102	 mvn         r10, #2, 2
  000cc		 |$LL15@ProfileInt|

; 356  :         {
; 357  :         _stprintf(szBuffer, L"profiling %s\r\n", _rgDomainProfile[prof].szDescription);

  000cc	e5942024	 ldr         r2, [r4, #0x24]
  000d0	e59f1370	 ldr         r1, [pc, #0x370]
  000d4	e28d00d0	 add         r0, sp, #0xD0
  000d8	eb000000	 bl          swprintf

; 358  :         OutputDebugString(szBuffer);

  000dc	e28d00d0	 add         r0, sp, #0xD0
  000e0	eb000000	 bl          OutputDebugStringW

; 359  :         
; 360  :         // initialize variables
; 361  :         _rgDomainProfile[prof].min = min = MAX_INT;
; 362  :         _rgDomainProfile[prof].max = max = 0;
; 363  :         _rgDomainProfile[prof].total = total = 0;
; 364  :         _rgDomainProfile[prof].count = 0;
; 365  : 
; 366  :         nSamples = 0;
; 367  :         loopCount = nTargetSamples * 2;
; 368  :         
; 369  :         // put the mpu in the correct state
; 370  :         constraintInfo.powerDomain = POWERDOMAIN_MPU;
; 371  :         constraintInfo.state = _rgDomainProfile[prof].domainState_MPU;
; 372  :         PmxUpdateConstraint(hDomainConstraint, 
; 373  :             CONSTRAINT_MSG_POWERDOMAIN_REQUEST,
; 374  :             (void*)&constraintInfo, 
; 375  :             sizeof(POWERDOMAIN_CONSTRAINT_INFO)
; 376  :             );

  000e4	e3a0e000	 mov         lr, #0
  000e8	e584e018	 str         lr, [r4, #0x18]
  000ec	e584e01c	 str         lr, [r4, #0x1C]
  000f0	e59de024	 ldr         lr, [sp, #0x24]
  000f4	e7971005	 ldr         r1, [r7, +r5]
  000f8	e3a0300c	 mov         r3, #0xC
  000fc	e1a0708e	 mov         r7, lr, lsl #1
  00100	e3a0e005	 mov         lr, #5
  00104	e58d1030	 str         r1, [sp, #0x30]
  00108	e28d2028	 add         r2, sp, #0x28
  0010c	e3a01001	 mov         r1, #1
  00110	e1a00006	 mov         r0, r6
  00114	e1a0900a	 mov         r9, r10
  00118	e584a014	 str         r10, [r4, #0x14]
  0011c	e584b010	 str         r11, [r4, #0x10]
  00120	e58de02c	 str         lr, [sp, #0x2C]
  00124	e3a0a000	 mov         r10, #0
  00128	e3a0b000	 mov         r11, #0
  0012c	e3a06000	 mov         r6, #0
  00130	eb000000	 bl          PmxUpdateConstraint

; 377  :         
; 378  :         // put the core in the correct state
; 379  :         constraintInfo.powerDomain = POWERDOMAIN_CORE;
; 380  :         constraintInfo.state = _rgDomainProfile[prof].domainState_CORE;

  00134	e5941004	 ldr         r1, [r4, #4]

; 381  :         PmxUpdateConstraint(hDomainConstraint, 
; 382  :             CONSTRAINT_MSG_POWERDOMAIN_REQUEST,
; 383  :             (void*)&constraintInfo, 
; 384  :             sizeof(POWERDOMAIN_CONSTRAINT_INFO)
; 385  :             );

  00138	e59d0020	 ldr         r0, [sp, #0x20]
  0013c	e3a0e001	 mov         lr, #1
  00140	e58d1030	 str         r1, [sp, #0x30]
  00144	e3a01001	 mov         r1, #1
  00148	e3a0300c	 mov         r3, #0xC
  0014c	e28d2028	 add         r2, sp, #0x28
  00150	e58de02c	 str         lr, [sp, #0x2C]
  00154	eb000000	 bl          PmxUpdateConstraint

; 386  : 
; 387  :         // put the per in the correct state
; 388  :         constraintInfo.powerDomain = POWERDOMAIN_PERIPHERAL;
; 389  :         constraintInfo.state = _rgDomainProfile[prof].domainState_PER;

  00158	e5941008	 ldr         r1, [r4, #8]

; 390  :         PmxUpdateConstraint(hDomainConstraint,
; 391  :             CONSTRAINT_MSG_POWERDOMAIN_REQUEST,
; 392  :             (void*)&constraintInfo,
; 393  :             sizeof(POWERDOMAIN_CONSTRAINT_INFO)
; 394  :             );

  0015c	e59d0020	 ldr         r0, [sp, #0x20]
  00160	e3a0e002	 mov         lr, #2
  00164	e58d1030	 str         r1, [sp, #0x30]
  00168	e3a01001	 mov         r1, #1
  0016c	e3a0300c	 mov         r3, #0xC
  00170	e28d2028	 add         r2, sp, #0x28
  00174	e58de02c	 str         lr, [sp, #0x2C]
  00178	eb000000	 bl          PmxUpdateConstraint

; 395  : 
; 396  :         // clear any residual profile information        
; 397  :         KernelIoControl(IOCTL_HAL_OEM_PROFILER, 
; 398  :             (void*)&profilerControlEx, 
; 399  :             sizeof(ProfilerControlEx), 
; 400  :             NULL,
; 401  :             0, 
; 402  :             NULL
; 403  :             );

  0017c	e59f02c0	 ldr         r0, [pc, #0x2C0]
  00180	e3a0e000	 mov         lr, #0
  00184	e3a03000	 mov         r3, #0
  00188	e3a02098	 mov         r2, #0x98
  0018c	e28d1038	 add         r1, sp, #0x38
  00190	e58de004	 str         lr, [sp, #4]
  00194	e58de000	 str         lr, [sp]
  00198	eb000000	 bl          KernelIoControl

; 404  : 
; 405  :         ClearProfileControlData(&profilerControlEx);

  0019c	e28d3090	 add         r3, sp, #0x90
  001a0	e2832040	 add         r2, r3, #0x40
  001a4	e3a01000	 mov         r1, #0
  001a8		 |$LN42@ProfileInt|
  001a8	e4831004	 str         r1, [r3], #4
  001ac	e1530002	 cmp         r3, r2
  001b0	1afffffc	 bne         |$LN42@ProfileInt|

; 406  : 
; 407  :         // loop through requested number of samples        
; 408  :         while (nSamples < nTargetSamples && loopCount > 0)

  001b4	e59d3024	 ldr         r3, [sp, #0x24]
  001b8	e3530000	 cmp         r3, #0
  001bc	da000029	 ble         |$LN12@ProfileInt|
  001c0	e28d5038	 add         r5, sp, #0x38
  001c4	e3a08000	 mov         r8, #0
  001c8		 |$LL13@ProfileInt|
  001c8	e3570000	 cmp         r7, #0
  001cc	da000023	 ble         |$LN46@ProfileInt|

; 409  :             {
; 410  :             // wait for wake-up
; 411  :             Sleep(_rgDomainProfile[prof].sleep);

  001d0	e5940020	 ldr         r0, [r4, #0x20]
  001d4	eb000000	 bl          Sleep

; 412  : 
; 413  :             // get profiled information
; 414  :             KernelIoControl(IOCTL_HAL_OEM_PROFILER, 
; 415  :                 (void*)&profilerControlEx, 
; 416  :                 sizeof(ProfilerControlEx), 
; 417  :                 NULL,
; 418  :                 0, 
; 419  :                 NULL
; 420  :                 );

  001d8	e59f0264	 ldr         r0, [pc, #0x264]
  001dc	e3a03000	 mov         r3, #0
  001e0	e3a02098	 mov         r2, #0x98
  001e4	e28d1038	 add         r1, sp, #0x38
  001e8	e58d8004	 str         r8, [sp, #4]
  001ec	e58d8000	 str         r8, [sp]
  001f0	eb000000	 bl          KernelIoControl

; 421  : 
; 422  :             // log wake-up latency
; 423  :             if (profilerControlEx.OEM.rgValues[_rgDomainProfile[prof].idxProfile] != 0)

  001f4	e594300c	 ldr         r3, [r4, #0xC]
  001f8	e0853103	 add         r3, r5, r3, lsl #2
  001fc	e5933058	 ldr         r3, [r3, #0x58]
  00200	e3530000	 cmp         r3, #0
  00204	0a00000b	 beq         |$LN11@ProfileInt|

; 424  :                 {
; 425  :                 val = profilerControlEx.OEM.rgValues[_rgDomainProfile[prof].idxProfile];
; 426  :                 if (val < min || nSamples == 0) min = val;

  00208	e1530009	 cmp         r3, r9
  0020c	ba000001	 blt         |$LN9@ProfileInt|
  00210	e3560000	 cmp         r6, #0
  00214	1a000000	 bne         |$LN10@ProfileInt|
  00218		 |$LN9@ProfileInt|
  00218	e1a09003	 mov         r9, r3
  0021c		 |$LN10@ProfileInt|

; 427  :                 if (val > max || nSamples == 0) max = val;

  0021c	e153000a	 cmp         r3, r10
  00220	ca000001	 bgt         |$LN7@ProfileInt|
  00224	e3560000	 cmp         r6, #0
  00228	1a000000	 bne         |$LN8@ProfileInt|
  0022c		 |$LN7@ProfileInt|
  0022c	e1a0a003	 mov         r10, r3
  00230		 |$LN8@ProfileInt|

; 428  :                 total += val;

  00230	e08bb003	 add         r11, r11, r3

; 429  :                 ++nSamples;  

  00234	e2866001	 add         r6, r6, #1
  00238		 |$LN11@ProfileInt|

; 430  :                 }
; 431  :                       
; 432  :             ClearProfileControlData(&profilerControlEx);

  00238	e28d3090	 add         r3, sp, #0x90
  0023c	e2832040	 add         r2, r3, #0x40
  00240	e3a01000	 mov         r1, #0
  00244		 |$LN44@ProfileInt|
  00244	e4831004	 str         r1, [r3], #4
  00248	e1530002	 cmp         r3, r2
  0024c	1afffffc	 bne         |$LN44@ProfileInt|

; 433  :             --loopCount;

  00250	e59d3024	 ldr         r3, [sp, #0x24]
  00254	e2477001	 sub         r7, r7, #1
  00258	e1560003	 cmp         r6, r3
  0025c	baffffd9	 blt         |$LL13@ProfileInt|
  00260		 |$LN46@ProfileInt|
  00260	e59f51d8	 ldr         r5, [pc, #0x1D8]

; 434  :             }
; 435  : 
; 436  :         // log information
; 437  :         _rgDomainProfile[prof].min = min;
; 438  :         _rgDomainProfile[prof].max = max;
; 439  :         _rgDomainProfile[prof].total = total;
; 440  :         _rgDomainProfile[prof].count = nSamples;
; 441  : 
; 442  :         ++prof;

  00264	e59d8034	 ldr         r8, [sp, #0x34]
  00268		 |$LN12@ProfileInt|
  00268	e2888001	 add         r8, r8, #1
  0026c	e0883108	 add         r3, r8, r8, lsl #2
  00270	e1a07183	 mov         r7, r3, lsl #3
  00274	e5849014	 str         r9, [r4, #0x14]
  00278	e584a010	 str         r10, [r4, #0x10]
  0027c	e584b018	 str         r11, [r4, #0x18]
  00280	e584601c	 str         r6, [r4, #0x1C]
  00284	e0874005	 add         r4, r7, r5
  00288	e5943024	 ldr         r3, [r4, #0x24]
  0028c	e59d6020	 ldr         r6, [sp, #0x20]
  00290	e58d8034	 str         r8, [sp, #0x34]
  00294	e3530000	 cmp         r3, #0
  00298	e3a0b000	 mov         r11, #0
  0029c	e3e0a102	 mvn         r10, #2, 2
  002a0	1affff89	 bne         |$LL15@ProfileInt|
  002a4	e5953024	 ldr         r3, [r5, #0x24]
  002a8	e3a0b000	 mov         r11, #0
  002ac		 |$LN14@ProfileInt|

; 443  :         }
; 444  : 
; 445  :     // check for non-entered states
; 446  :     prof = 0;

  002ac	e3a01000	 mov         r1, #0

; 447  :     while (_rgDomainProfile[prof].szDescription != NULL)

  002b0	e3530000	 cmp         r3, #0
  002b4	0a00000a	 beq         |$LN5@ProfileInt|
  002b8	e1a02005	 mov         r2, r5
  002bc		 |$LL6@ProfileInt|

; 448  :         {
; 449  :         if (_rgDomainProfile[prof].count == 0)

  002bc	e592301c	 ldr         r3, [r2, #0x1C]

; 450  :             {
; 451  :             _rgDomainProfile[prof].min = 0;
; 452  :             _rgDomainProfile[prof].max = 0;
; 453  :             }
; 454  :         ++prof;

  002c0	e2811001	 add         r1, r1, #1
  002c4	e3530000	 cmp         r3, #0
  002c8	e0813101	 add         r3, r1, r1, lsl #2
  002cc	0582b014	 streq       r11, [r2, #0x14]
  002d0	0582b010	 streq       r11, [r2, #0x10]
  002d4	e0852183	 add         r2, r5, r3, lsl #3
  002d8	e5923024	 ldr         r3, [r2, #0x24]
  002dc	e3530000	 cmp         r3, #0
  002e0	1afffff5	 bne         |$LL6@ProfileInt|
  002e4		 |$LN5@ProfileInt|

; 455  :         }
; 456  : 
; 457  :     // output results
; 458  :     OutputDebugString(L"Transition Results in usec:\r\n");

  002e4	e59f0150	 ldr         r0, [pc, #0x150]
  002e8	eb000000	 bl          OutputDebugStringW

; 459  :     OutputDebugString(L"Sleep Desc.\t\tMIN\tMAX\tAVG\tSUM\tCOUNT\r\n");

  002ec	e59f0144	 ldr         r0, [pc, #0x144]
  002f0	eb000000	 bl          OutputDebugStringW

; 460  :     OutputDebugString(L"-------------------------------------------------------\r\n");

  002f4	e59f0138	 ldr         r0, [pc, #0x138]
  002f8	eb000000	 bl          OutputDebugStringW

; 461  :     for (prof = 0; _rgDomainProfile[prof].szDescription != NULL; prof++)

  002fc	e5953024	 ldr         r3, [r5, #0x24]
  00300	e3a08000	 mov         r8, #0
  00304	e3530000	 cmp         r3, #0
  00308	0a000041	 beq         |$LN1@ProfileInt|
  0030c	e1a06005	 mov         r6, r5
  00310		 |$LL3@ProfileInt|

; 462  :         {
; 463  :         _stprintf(szBuffer, L"%s\t%.2f\t%.2f\t%.2f\t%.2f\t%d\r\n",
; 464  :             _rgDomainProfile[prof].szDescription,
; 465  :             (float)_rgDomainProfile[prof].min/32768.0f * 1000000.0f,
; 466  :             (float)_rgDomainProfile[prof].max/32768.0f * 1000000.0f,
; 467  :             _rgDomainProfile[prof].count == 0 ? 0.0f : ((float)_rgDomainProfile[prof].total/(float)_rgDomainProfile[prof].count/32768.0f) * 1000000.0f,
; 468  :             (float)_rgDomainProfile[prof].total/32768.0f * 1000000.0f,
; 469  :             _rgDomainProfile[prof].count            
; 470  :             );

  00310	e596301c	 ldr         r3, [r6, #0x1C]
  00314	e1b07003	 movs        r7, r3
  00318	01a0400b	 moveq       r4, r11
  0031c	0a00000c	 beq         |$LN19@ProfileInt|
  00320	e5960018	 ldr         r0, [r6, #0x18]
  00324	eb000000	 bl          __itos
  00328	e1a04000	 mov         r4, r0
  0032c	e1a00007	 mov         r0, r7
  00330	eb000000	 bl          __utos
  00334	e1a01000	 mov         r1, r0
  00338	e1a00004	 mov         r0, r4
  0033c	eb000000	 bl          __divs
  00340	e3a0130e	 mov         r1, #0xE, 6
  00344	eb000000	 bl          __muls
  00348	e59f10e0	 ldr         r1, [pc, #0xE0]
  0034c	eb000000	 bl          __muls
  00350	e1a04000	 mov         r4, r0
  00354		 |$LN19@ProfileInt|
  00354	e5960018	 ldr         r0, [r6, #0x18]
  00358	e58d701c	 str         r7, [sp, #0x1C]
  0035c	eb000000	 bl          __itos
  00360	e3a0130e	 mov         r1, #0xE, 6
  00364	eb000000	 bl          __muls
  00368	e59f10c0	 ldr         r1, [pc, #0xC0]
  0036c	eb000000	 bl          __muls
  00370	eb000000	 bl          __stod
  00374	e1a03000	 mov         r3, r0
  00378	e1a00004	 mov         r0, r4
  0037c	e58d3014	 str         r3, [sp, #0x14]
  00380	e58d1018	 str         r1, [sp, #0x18]
  00384	eb000000	 bl          __stod
  00388	e1a03000	 mov         r3, r0
  0038c	e5960010	 ldr         r0, [r6, #0x10]
  00390	e58d300c	 str         r3, [sp, #0xC]
  00394	e58d1010	 str         r1, [sp, #0x10]
  00398	eb000000	 bl          __itos
  0039c	e3a0130e	 mov         r1, #0xE, 6
  003a0	eb000000	 bl          __muls
  003a4	e59f1084	 ldr         r1, [pc, #0x84]
  003a8	eb000000	 bl          __muls
  003ac	eb000000	 bl          __stod
  003b0	e1a03000	 mov         r3, r0
  003b4	e5960014	 ldr         r0, [r6, #0x14]
  003b8	e58d3004	 str         r3, [sp, #4]
  003bc	e58d1008	 str         r1, [sp, #8]
  003c0	eb000000	 bl          __itos
  003c4	e3a0130e	 mov         r1, #0xE, 6
  003c8	eb000000	 bl          __muls
  003cc	e59f105c	 ldr         r1, [pc, #0x5C]
  003d0	eb000000	 bl          __muls
  003d4	eb000000	 bl          __stod
  003d8	e5962024	 ldr         r2, [r6, #0x24]
  003dc	e1a0e001	 mov         lr, r1
  003e0	e59f1044	 ldr         r1, [pc, #0x44]
  003e4	e1a03000	 mov         r3, r0
  003e8	e28d00d0	 add         r0, sp, #0xD0
  003ec	e58de000	 str         lr, [sp]
  003f0	eb000000	 bl          swprintf

; 471  : 
; 472  :         OutputDebugString(szBuffer);

  003f4	e28d00d0	 add         r0, sp, #0xD0
  003f8	eb000000	 bl          OutputDebugStringW
  003fc	e2888001	 add         r8, r8, #1
  00400	e0883108	 add         r3, r8, r8, lsl #2
  00404	e0856183	 add         r6, r5, r3, lsl #3
  00408	e5963024	 ldr         r3, [r6, #0x24]
  0040c	e3530000	 cmp         r3, #0
  00410	1affffbe	 bne         |$LL3@ProfileInt|
  00414		 |$LN1@ProfileInt|

; 473  :         }
; 474  :         
; 475  :     return TRUE;

  00414	e59d02d8	 ldr         r0, [sp, #0x2D8]
  00418	eb000000	 bl          __security_check_cookie
  0041c	e3a00001	 mov         r0, #1

; 476  : }

  00420	e28ddfb7	 add         sp, sp, #0xB7, 30
  00424	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00428	e12fff1e	 bx          lr
  0042c		 |$LN50@ProfileInt|
  0042c		 |$LN51@ProfileInt|
  0042c	00000000	 DCD         |??_C@_1DI@LCMHJCHD@?$AA?$CF?$AAs?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00430		 |$LN52@ProfileInt|
  00430	49742400	 DCD         0x49742400
  00434		 |$LN53@ProfileInt|
  00434	00000000	 DCD         |??_C@_1HE@PCHICHEK@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  00438		 |$LN54@ProfileInt|
  00438	00000000	 DCD         |??_C@_1EK@BMMAPLAO@?$AAS?$AAl?$AAe?$AAe?$AAp?$AA?5?$AAD?$AAe?$AAs?$AAc?$AA?4?$AA?7?$AA?7?$AAM?$AAI?$AAN?$AA?7?$AAM?$AAA?$AAX?$AA?7?$AAA?$AAV?$AAG?$AA?7?$AAS?$AAU?$AAM?$AA?7?$AAC?$AAO?$AAU@|
  0043c		 |$LN55@ProfileInt|
  0043c	00000000	 DCD         |??_C@_1DM@LMNJMELA@?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAu?$AAs?$AAe?$AAc?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  00440		 |$LN56@ProfileInt|
  00440	00000000	 DCD         |_rgDomainProfile|
  00444		 |$LN57@ProfileInt|
  00444	0101010c	 DCD         0x101010c
  00448		 |$LN58@ProfileInt|
  00448	00000000	 DCD         |??_C@_1BO@CEACKNHH@?$AAp?$AAr?$AAo?$AAf?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  0044c		 |$LN59@ProfileInt|
  0044c	48306900	 DCD         0x48306900
  00450		 |$LN60@ProfileInt|
  00450	00000000	 DCD         |__security_cookie|
  00454		 |$M39886|

			 ENDP  ; |ProfileInterruptLatency|

	EXPORT	|??G@YAKT_LARGE_INTEGER@@0@Z|		; operator-

  00000			 AREA	 |.pdata|, PDATA
|$T39911| DCD	|$LN5@operator|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??G@YAKT_LARGE_INTEGER@@0@Z| PROC	; operator-

; 501  : {

  00000		 |$LN5@operator|
  00000		 |$M39908|

; 502  :     return (a.LowPart - b.LowPart);

  00000	e0400002	 sub         r0, r0, r2

; 503  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M39909|

			 ENDP  ; |??G@YAKT_LARGE_INTEGER@@0@Z|, operator-

	EXPORT	|?ToggleOPM@@YAHPAXPAUDVFS_STRESS_TEST_PARAMETERS@@@Z| ; ToggleOPM
	IMPORT	|QueryPerformanceCounter|
	IMPORT	|Random|

  00000			 AREA	 |.pdata|, PDATA
|$T39930| DCD	|$LN19@ToggleOPM|
	DCD	0x40005502
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ToggleOPM@@YAHPAXPAUDVFS_STRESS_TEST_PARAMETERS@@@Z| PROC ; ToggleOPM

; 513  : {

  00000		 |$LN19@ToggleOPM|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M39927|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0

; 514  :     DWORD newOpm;
; 515  :     DWORD delta;
; 516  :     DWORD currentOpm;
; 517  :     LARGE_INTEGER startTime, stopTime;
; 518  :     BOOL rc = FALSE;
; 519  : 
; 520  :     currentOpm = pTestParam->_currentOpm;
; 521  :     if (pTestParam->_random == TRUE)

  00010	e5943008	 ldr         r3, [r4, #8]
  00014	e5945014	 ldr         r5, [r4, #0x14]
  00018	e3530001	 cmp         r3, #1
  0001c	1a000008	 bne         |$LN11@ToggleOPM|

; 522  :         {
; 523  :         newOpm = Random() % (MAX_OPM + 1);

  00020	eb000000	 bl          Random
  00024	e59f3124	 ldr         r3, [pc, #0x124]
  00028	e082e390	 umull       lr, r2, r0, r3
  0002c	e0403002	 sub         r3, r0, r2
  00030	e08230a3	 add         r3, r2, r3, lsr #1
  00034	e1a03123	 mov         r3, r3, lsr #2
  00038	e0633183	 rsb         r3, r3, r3, lsl #3
  0003c	e0403003	 sub         r3, r0, r3

; 524  :         }
; 525  :     else

  00040	ea000002	 b           |$LN9@ToggleOPM|
  00044		 |$LN11@ToggleOPM|

; 526  :         {
; 527  :         if (currentOpm == pTestParam->_hiopm)

  00044	e594300c	 ldr         r3, [r4, #0xC]
  00048	e1550003	 cmp         r5, r3

; 528  :             {
; 529  :             newOpm = pTestParam->_lowopm;

  0004c	05943010	 ldreq       r3, [r4, #0x10]
  00050		 |$LN9@ToggleOPM|

; 530  :             }
; 531  :         else
; 532  :             {
; 533  :             newOpm = pTestParam->_hiopm;

  00050	e58d3000	 str         r3, [sp]

; 534  :             }
; 535  :         
; 536  :         }
; 537  : 
; 538  :     if (newOpm >= MAX_OPM + 1)

  00054	e3530007	 cmp         r3, #7

; 539  :     {
; 540  :         return FALSE;

  00058	2a000037	 bcs         |$LN16@ToggleOPM|

; 541  :     }
; 542  :     if (currentOpm >= MAX_OPM + 1)

  0005c	e3550007	 cmp         r5, #7

; 543  :     {
; 544  :         return FALSE;

  00060	2a000035	 bcs         |$LN16@ToggleOPM|

; 545  :     }
; 546  : 
; 547  :     // transition operating modes
; 548  :     QueryPerformanceCounter(&startTime);

  00064	e28d0004	 add         r0, sp, #4
  00068	eb000000	 bl          QueryPerformanceCounter

; 549  :     if (PmxUpdateConstraint(hDvfsConstraint, 
; 550  :         CONSTRAINT_MSG_DVFS_FORCE, 
; 551  :         (void*)&newOpm, 
; 552  :         sizeof(DWORD)
; 553  :         ) == FALSE)

  0006c	e3a03004	 mov         r3, #4
  00070	e28d2000	 add         r2, sp, #0
  00074	e3a01102	 mov         r1, #2, 2
  00078	e1a00006	 mov         r0, r6
  0007c	eb000000	 bl          PmxUpdateConstraint
  00080	e3500000	 cmp         r0, #0
  00084	1a00000a	 bne         |$LN5@ToggleOPM|

; 554  :         {
; 555  :         _rgTransitionTime[currentOpm][newOpm].failCount++;

  00088	e59d2000	 ldr         r2, [sp]
  0008c	e0653185	 rsb         r3, r5, r5, lsl #3
  00090	e59f10b4	 ldr         r1, [pc, #0xB4]
  00094	e0833002	 add         r3, r3, r2
  00098	e0833103	 add         r3, r3, r3, lsl #2
  0009c	e0812103	 add         r2, r1, r3, lsl #2
  000a0	e5923010	 ldr         r3, [r2, #0x10]

; 556  :         return TRUE;

  000a4	e3a00001	 mov         r0, #1
  000a8	e2833001	 add         r3, r3, #1
  000ac	e5823010	 str         r3, [r2, #0x10]
  000b0	ea000022	 b           |$LN12@ToggleOPM|
  000b4		 |$LN5@ToggleOPM|

; 557  :         }
; 558  : 
; 559  :     QueryPerformanceCounter(&stopTime);

  000b4	e28d000c	 add         r0, sp, #0xC
  000b8	eb000000	 bl          QueryPerformanceCounter

; 560  : 
; 561  :     delta = stopTime - startTime;
; 562  : 
; 563  :     // log profile information
; 564  :     if (_rgTransitionTime[currentOpm][newOpm].tickMin > delta || 
; 565  :         _rgTransitionTime[currentOpm][newOpm].count == 0)

  000bc	e59d6000	 ldr         r6, [sp]
  000c0	e0653185	 rsb         r3, r5, r5, lsl #3
  000c4	e59fe080	 ldr         lr, [pc, #0x80]
  000c8	e0833006	 add         r3, r3, r6
  000cc	e0830103	 add         r0, r3, r3, lsl #2
  000d0	e59d1004	 ldr         r1, [sp, #4]
  000d4	e59d300c	 ldr         r3, [sp, #0xC]
  000d8	e1a05100	 mov         r5, r0, lsl #2
  000dc	e7b5200e	 ldr         r2, [r5, +lr]!
  000e0	e0431001	 sub         r1, r3, r1
  000e4	e1520001	 cmp         r2, r1
  000e8	8a000003	 bhi         |$LN3@ToggleOPM|
  000ec	e08e3100	 add         r3, lr, r0, lsl #2
  000f0	e593300c	 ldr         r3, [r3, #0xC]
  000f4	e3530000	 cmp         r3, #0
  000f8	1a000000	 bne         |$LN4@ToggleOPM|
  000fc		 |$LN3@ToggleOPM|

; 566  :         {
; 567  :         _rgTransitionTime[currentOpm][newOpm].tickMin = delta;

  000fc	e5851000	 str         r1, [r5]
  00100		 |$LN4@ToggleOPM|

; 568  :         }
; 569  : 
; 570  :     if (_rgTransitionTime[currentOpm][newOpm].tickMax < delta || 
; 571  :         _rgTransitionTime[currentOpm][newOpm].count == 0)

  00100	e08e2100	 add         r2, lr, r0, lsl #2
  00104	e5923004	 ldr         r3, [r2, #4]
  00108	e1530001	 cmp         r3, r1
  0010c	3a000002	 bcc         |$LN1@ToggleOPM|
  00110	e592300c	 ldr         r3, [r2, #0xC]
  00114	e3530000	 cmp         r3, #0
  00118	1a000000	 bne         |$LN2@ToggleOPM|
  0011c		 |$LN1@ToggleOPM|

; 572  :         {
; 573  :         _rgTransitionTime[currentOpm][newOpm].tickMax = delta;

  0011c	e5821004	 str         r1, [r2, #4]
  00120		 |$LN2@ToggleOPM|

; 574  :         }
; 575  : 
; 576  :     _rgTransitionTime[currentOpm][newOpm].tickTotal += delta;

  00120	e5923008	 ldr         r3, [r2, #8]

; 577  :     _rgTransitionTime[currentOpm][newOpm].count++;
; 578  : 
; 579  :     // update opm information
; 580  :     pTestParam->_currentOpm = newOpm;
; 581  :     return rc;

  00124	e0833001	 add         r3, r3, r1
  00128	e5823008	 str         r3, [r2, #8]
  0012c	e592300c	 ldr         r3, [r2, #0xC]
  00130	e2833001	 add         r3, r3, #1
  00134	e582300c	 str         r3, [r2, #0xC]
  00138	e5846014	 str         r6, [r4, #0x14]
  0013c		 |$LN16@ToggleOPM|
  0013c	e3a00000	 mov         r0, #0
  00140		 |$LN12@ToggleOPM|

; 582  : }

  00140	e28dd014	 add         sp, sp, #0x14
  00144	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00148	e12fff1e	 bx          lr
  0014c		 |$LN20@ToggleOPM|
  0014c		 |$LN21@ToggleOPM|
  0014c	00000000	 DCD         |?_rgTransitionTime@@3PAY06UDVFS_STRESS_TRANSITION_DATA@@A|
  00150		 |$LN22@ToggleOPM|
  00150	24924925	 DCD         0x24924925
  00154		 |$M39928|

			 ENDP  ; |?ToggleOPM@@YAHPAXPAUDVFS_STRESS_TEST_PARAMETERS@@@Z|, ToggleOPM

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|ProfileDVFSLatency|
	EXPORT	|??_C@_1EG@KFCDNOAK@?$AA?$CF?$AAd?$AA?7?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@ENNAACBP@?$AA?$CF?$AAd?$AA?7?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OENLLNAB@?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAt?$AAi?$AAc?$AAk?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@LMFNMLFE@?$AA?7?$AAO?$AAP?$AAM?$AA?$CI?$AAi?$AA?$CJ?$AA?7?$AAO?$AAP?$AAM?$AA?$CI?$AAf?$AA?$CJ?$AA?7?$AAM?$AAI?$AAN?$AA?7?$AAM?$AAA?$AAX?$AA?7?$AAA?$AAV?$AAG?$AA?7?$AAC?$AAO?$AAU?$AAN?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@BACOKOFA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA?5@| [ DATA ] ; `string'
	IMPORT	|QueryPerformanceFrequency|
	IMPORT	|GetTickCount|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T39971| DCD	|$LN39@ProfileDVF|
	DCD	0xc000ce02

  00000			 AREA	 |.xdata|, DATA
|$T39967| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@KFCDNOAK@?$AA?$CF?$AAd?$AA?7?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AAd@| DCB "%"
	DCB	0x0, "d", 0x0, 0x9, 0x0, 0x9, 0x0, "%", 0x0, "d", 0x0, 0x9
	DCB	0x0, "%", 0x0, ".", 0x0, "2", 0x0, "f", 0x0, 0x9, 0x0, "%"
	DCB	0x0, ".", 0x0, "2", 0x0, "f", 0x0, 0x9, 0x0, "%", 0x0, "."
	DCB	0x0, "2", 0x0, "f", 0x0, 0x9, 0x0, "%", 0x0, "d", 0x0, 0x9
	DCB	0x0, "%", 0x0, ".", 0x0, "2", 0x0, "f", 0x0, 0x9, 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@ENNAACBP@?$AA?$CF?$AAd?$AA?7?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "d", 0x0, 0x9, 0x0, 0x9, 0x0, "%", 0x0, "d", 0x0, 0x9
	DCB	0x0, "%", 0x0, "d", 0x0, 0x9, 0x0, "%", 0x0, "d", 0x0, 0x9
	DCB	0x0, "%", 0x0, "d", 0x0, 0x9, 0x0, "%", 0x0, "d", 0x0, 0x9
	DCB	0x0, "%", 0x0, "d", 0x0, 0x9, 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OENLLNAB@?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAt?$AAi?$AAc?$AAk?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "s", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "s", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "c"
	DCB	0x0, "k", 0x0, "s", 0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@LMFNMLFE@?$AA?7?$AAO?$AAP?$AAM?$AA?$CI?$AAi?$AA?$CJ?$AA?7?$AAO?$AAP?$AAM?$AA?$CI?$AAf?$AA?$CJ?$AA?7?$AAM?$AAI?$AAN?$AA?7?$AAM?$AAA?$AAX?$AA?7?$AAA?$AAV?$AAG?$AA?7?$AAC?$AAO?$AAU?$AAN?$AAT@| DCB 0x9
	DCB	0x0, "O", 0x0, "P", 0x0, "M", 0x0, "(", 0x0, "i", 0x0, ")"
	DCB	0x0, 0x9, 0x0, "O", 0x0, "P", 0x0, "M", 0x0, "(", 0x0, "f"
	DCB	0x0, ")", 0x0, 0x9, 0x0, "M", 0x0, "I", 0x0, "N", 0x0, 0x9
	DCB	0x0, "M", 0x0, "A", 0x0, "X", 0x0, 0x9, 0x0, "A", 0x0, "V"
	DCB	0x0, "G", 0x0, 0x9, 0x0, "C", 0x0, "O", 0x0, "U", 0x0, "N"
	DCB	0x0, "T", 0x0, 0x9, 0x0, "S", 0x0, "U", 0x0, "M", 0x0, 0x9
	DCB	0x0, "F", 0x0, "A", 0x0, "I", 0x0, "L", 0x0, "E", 0x0, "D"
	DCB	0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@BACOKOFA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA?5@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, "s", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "r", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "m"
	DCB	0x0, "o", 0x0, "d", 0x0, "e", 0x0, " ", 0x0, "k", 0x0, "O"
	DCB	0x0, "p", 0x0, "m", 0x0, "%", 0x0, "d", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T39967|

  00008		 |ProfileDVFSLatency| PROC

; 591  : {

  00008		 |$LN39@ProfileDVF|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddf91	 sub         sp, sp, #0x91, 30
  00010		 |$M39968|
  00010	e1a05001	 mov         r5, r1
  00014	e1a07000	 mov         r7, r0
  00018	e59f331c	 ldr         r3, [pc, #0x31C]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3240	 str         r3, [sp, #0x240]

; 592  :     BOOL rc = TRUE;
; 593  :     DWORD newOpm;
; 594  :     DWORD tickStop;
; 595  :     DWORD tickStart;    
; 596  :     DWORD tickDelta;
; 597  :     LARGE_INTEGER perfCounterFreq;
; 598  :     DWORD tickCount = pTestParam->_duration;
; 599  :     WCHAR szBuffer[MAX_PATH];
; 600  : 
; 601  :     // transition to known operating mode
; 602  :     if (pTestParam->_random == TRUE)

  00024	e5953008	 ldr         r3, [r5, #8]
  00028	e5956004	 ldr         r6, [r5, #4]
  0002c	e3530001	 cmp         r3, #1
  00030	1a000008	 bne         |$LN21@ProfileDVF|

; 603  :         {
; 604  :         newOpm = Random() % (MAX_OPM + 1);

  00034	eb000000	 bl          Random
  00038	e59f32f8	 ldr         r3, [pc, #0x2F8]
  0003c	e082e390	 umull       lr, r2, r0, r3
  00040	e0403002	 sub         r3, r0, r2
  00044	e08230a3	 add         r3, r2, r3, lsr #1
  00048	e1a03123	 mov         r3, r3, lsr #2
  0004c	e0633183	 rsb         r3, r3, r3, lsl #3
  00050	e0403003	 sub         r3, r0, r3

; 605  :         }
; 606  :     else

  00054	ea000000	 b           |$LN36@ProfileDVF|
  00058		 |$LN21@ProfileDVF|

; 607  :         {
; 608  :         newOpm = pTestParam->_hiopm;

  00058	e595300c	 ldr         r3, [r5, #0xC]
  0005c		 |$LN36@ProfileDVF|
  0005c	e58d3028	 str         r3, [sp, #0x28]

; 609  :         }
; 610  : 
; 611  :     if (PmxUpdateConstraint(hDvfsConstraint, 
; 612  :             CONSTRAINT_MSG_DVFS_FORCE, 
; 613  :             (void*)&newOpm, 
; 614  :             sizeof(DWORD)
; 615  :             ) == FALSE)

  00060	e3a03004	 mov         r3, #4
  00064	e28d2028	 add         r2, sp, #0x28
  00068	e3a01102	 mov         r1, #2, 2
  0006c	e1a00007	 mov         r0, r7
  00070	eb000000	 bl          PmxUpdateConstraint
  00074	e3500000	 cmp         r0, #0
  00078	1a000009	 bne         |$LN19@ProfileDVF|

; 616  :         {
; 617  :         _stprintf(szBuffer, L"Failed to transition to initial operating mode kOpm%d", newOpm);

  0007c	e59d2028	 ldr         r2, [sp, #0x28]
  00080	e59f12ac	 ldr         r1, [pc, #0x2AC]
  00084	e28d0038	 add         r0, sp, #0x38
  00088	eb000000	 bl          swprintf

; 618  :         OutputDebugString(szBuffer);

  0008c	e28d0038	 add         r0, sp, #0x38
  00090	eb000000	 bl          OutputDebugStringW

; 619  :         return FALSE;

  00094	e59d0240	 ldr         r0, [sp, #0x240]
  00098	eb000000	 bl          __security_check_cookie
  0009c	e3a00000	 mov         r0, #0
  000a0	ea000098	 b           |$LN22@ProfileDVF|
  000a4		 |$LN19@ProfileDVF|

; 620  :         }
; 621  :     
; 622  :     pTestParam->_currentOpm = newOpm;

  000a4	e59d3028	 ldr         r3, [sp, #0x28]

; 623  :     
; 624  : 
; 625  :     // loop through and perform test
; 626  :     while (tickCount > 0)

  000a8	e3560000	 cmp         r6, #0
  000ac	e5853014	 str         r3, [r5, #0x14]
  000b0	0a00000c	 beq         |$LN35@ProfileDVF|
  000b4		 |$LL18@ProfileDVF|

; 627  :         {
; 628  :         tickStart = GetTickCount();

  000b4	eb000000	 bl          GetTickCount
  000b8	e1a04000	 mov         r4, r0

; 629  :         rc = ToggleOPM(hDvfsConstraint, pTestParam);

  000bc	e1a00007	 mov         r0, r7
  000c0	e1a01005	 mov         r1, r5
  000c4	eb000000	 bl          |?ToggleOPM@@YAHPAXPAUDVFS_STRESS_TEST_PARAMETERS@@@Z|

; 630  :         Sleep(pTestParam->_period);

  000c8	e5950000	 ldr         r0, [r5]
  000cc	eb000000	 bl          Sleep

; 631  :         tickStop = GetTickCount();

  000d0	eb000000	 bl          GetTickCount

; 632  : 
; 633  :         tickDelta = tickStop - tickStart;

  000d4	e0643000	 rsb         r3, r4, r0

; 634  :         if (tickCount < tickDelta)

  000d8	e1560003	 cmp         r6, r3
  000dc	3a000001	 bcc         |$LN35@ProfileDVF|

; 635  :             {
; 636  :             tickCount = 0;
; 637  :             }
; 638  :         else
; 639  :             {
; 640  :             tickCount -= tickDelta;

  000e0	e0566003	 subs        r6, r6, r3

; 623  :     
; 624  : 
; 625  :     // loop through and perform test
; 626  :     while (tickCount > 0)

  000e4	1afffff2	 bne         |$LL18@ProfileDVF|
  000e8		 |$LN35@ProfileDVF|

; 641  :             }
; 642  :         }
; 643  : 
; 644  :      // output results
; 645  :      QueryPerformanceFrequency(&perfCounterFreq);

  000e8	e28d0030	 add         r0, sp, #0x30
  000ec	eb000000	 bl          QueryPerformanceFrequency

; 646  :      OutputDebugString(L"Transition Results in ticks:\r\n");

  000f0	e59f0238	 ldr         r0, [pc, #0x238]
  000f4	eb000000	 bl          OutputDebugStringW

; 647  :      OutputDebugString(L"\tOPM(i)\tOPM(f)\tMIN\tMAX\tAVG\tCOUNT\tSUM\tFAILED:\r\n");

  000f8	e59f0220	 ldr         r0, [pc, #0x220]
  000fc	eb000000	 bl          OutputDebugStringW

; 648  :      OutputDebugString(L"-------------------------------------------------------\r\n");

  00100	e59f0214	 ldr         r0, [pc, #0x214]
  00104	eb000000	 bl          OutputDebugStringW
  00108	e59f921c	 ldr         r9, [pc, #0x21C]

; 649  :      for (int i = 0; i <= MAX_OPM; i++)

  0010c	e3a06000	 mov         r6, #0
  00110	e3a05000	 mov         r5, #0
  00114		 |$LL14@ProfileDVF|

; 650  :         {
; 651  :         for (int j = 0; j <= MAX_OPM; j++)

  00114	e3a04000	 mov         r4, #0
  00118		 |$LL11@ProfileDVF|

; 652  :             {
; 653  :             if (i != j && _rgTransitionTime[i][j].count > 0)

  00118	e1560004	 cmp         r6, r4
  0011c	0a00001a	 beq         |$LN10@ProfileDVF|
  00120	e0853004	 add         r3, r5, r4
  00124	e0838103	 add         r8, r3, r3, lsl #2
  00128	e0897108	 add         r7, r9, r8, lsl #2
  0012c	e597300c	 ldr         r3, [r7, #0xC]
  00130	e1b0e003	 movs        lr, r3
  00134	0a000014	 beq         |$LN10@ProfileDVF|

; 654  :                 {
; 655  :                 _stprintf(szBuffer, L"%d\t\t%d\t%d\t%d\t%d\t%d\t%d\t%d\r\n",
; 656  :                     i ,
; 657  :                     j ,
; 658  :                     _rgTransitionTime[i][j].tickMin,
; 659  :                     _rgTransitionTime[i][j].tickMax,
; 660  :                     _rgTransitionTime[i][j].tickTotal/_rgTransitionTime[i][j].count,                    
; 661  :                     _rgTransitionTime[i][j].count,
; 662  :                     _rgTransitionTime[i][j].tickTotal,                    
; 663  :                     _rgTransitionTime[i][j].failCount
; 664  :                     );

  00138	e5972008	 ldr         r2, [r7, #8]
  0013c	e5973010	 ldr         r3, [r7, #0x10]
  00140	e1a0000e	 mov         r0, lr
  00144	e1a01002	 mov         r1, r2
  00148	e58d3014	 str         r3, [sp, #0x14]
  0014c	e58d2010	 str         r2, [sp, #0x10]
  00150	e58de00c	 str         lr, [sp, #0xC]
  00154	eb000000	 bl          __rt_udiv
  00158	e5973004	 ldr         r3, [r7, #4]
  0015c	e7992108	 ldr         r2, [r9, +r8, lsl #2]
  00160	e59f11c0	 ldr         r1, [pc, #0x1C0]
  00164	e58d3004	 str         r3, [sp, #4]
  00168	e58d2000	 str         r2, [sp]
  0016c	e1a0e000	 mov         lr, r0
  00170	e1a03004	 mov         r3, r4
  00174	e1a02006	 mov         r2, r6
  00178	e28d0038	 add         r0, sp, #0x38
  0017c	e58de008	 str         lr, [sp, #8]
  00180	eb000000	 bl          swprintf

; 665  :                 OutputDebugString(szBuffer);

  00184	e28d0038	 add         r0, sp, #0x38
  00188	eb000000	 bl          OutputDebugStringW
  0018c		 |$LN10@ProfileDVF|
  0018c	e2844001	 add         r4, r4, #1
  00190	e3540006	 cmp         r4, #6
  00194	daffffdf	 ble         |$LL11@ProfileDVF|
  00198	e2855007	 add         r5, r5, #7
  0019c	e355002a	 cmp         r5, #0x2A
  001a0	e2866001	 add         r6, r6, #1
  001a4	daffffda	 ble         |$LL14@ProfileDVF|

; 666  :                 }
; 667  :             }
; 668  :         }
; 669  : 
; 670  :      OutputDebugString(L"Transition Results in usec:\r\n");

  001a8	e59f0174	 ldr         r0, [pc, #0x174]
  001ac	eb000000	 bl          OutputDebugStringW

; 671  :      OutputDebugString(L"\tOPM(i)\tOPM(f)\tMIN\tMAX\tAVG\tCOUNT\tSUM\tFAILED:\r\n");

  001b0	e59f0168	 ldr         r0, [pc, #0x168]
  001b4	eb000000	 bl          OutputDebugStringW

; 672  :      OutputDebugString(L"-------------------------------------------------------\r\n");

  001b8	e59f015c	 ldr         r0, [pc, #0x15C]
  001bc	eb000000	 bl          OutputDebugStringW

; 673  :      for (int i = 0; i <= MAX_OPM; i++)

  001c0	e3a08000	 mov         r8, #0
  001c4	e3a07000	 mov         r7, #0
  001c8		 |$LL7@ProfileDVF|

; 674  :         {
; 675  :         for (int j = 0; j <= MAX_OPM; j++)

  001c8	e3a06000	 mov         r6, #0
  001cc		 |$LL4@ProfileDVF|

; 676  :             {
; 677  :             if (i != j && _rgTransitionTime[i][j].count > 0)

  001cc	e1580006	 cmp         r8, r6
  001d0	0a000042	 beq         |$LN3@ProfileDVF|
  001d4	e0873006	 add         r3, r7, r6
  001d8	e083b103	 add         r11, r3, r3, lsl #2
  001dc	e089a10b	 add         r10, r9, r11, lsl #2
  001e0	e59a300c	 ldr         r3, [r10, #0xC]
  001e4	e3530000	 cmp         r3, #0
  001e8	e58d302c	 str         r3, [sp, #0x2C]
  001ec	0a00003b	 beq         |$LN3@ProfileDVF|

; 678  :                 {
; 679  :                 _stprintf(szBuffer, L"%d\t\t%d\t%.2f\t%.2f\t%.2f\t%d\t%.2f\t%d\r\n",
; 680  :                     i ,
; 681  :                     j ,
; 682  :                     (float)(_rgTransitionTime[i][j].tickMin)/(float)(perfCounterFreq.LowPart) * 1000000.0f,
; 683  :                     (float)(_rgTransitionTime[i][j].tickMax)/(float)(perfCounterFreq.LowPart) * 1000000.0f,
; 684  :                     ((float)(_rgTransitionTime[i][j].tickTotal)/(float)(_rgTransitionTime[i][j].count))/(float)(perfCounterFreq.LowPart) * 1000000.0f,
; 685  :                     _rgTransitionTime[i][j].count,
; 686  :                     (float)(_rgTransitionTime[i][j].tickTotal)/(float)(perfCounterFreq.LowPart) * 1000000.0f,                    
; 687  :                     _rgTransitionTime[i][j].failCount
; 688  :                     );

  001f0	e59a0008	 ldr         r0, [r10, #8]
  001f4	eb000000	 bl          __utos
  001f8	e1a04000	 mov         r4, r0
  001fc	e59d0030	 ldr         r0, [sp, #0x30]
  00200	eb000000	 bl          __utos
  00204	e59a3010	 ldr         r3, [r10, #0x10]
  00208	e1a05000	 mov         r5, r0
  0020c	e1a01005	 mov         r1, r5
  00210	e1a00004	 mov         r0, r4
  00214	e58d3024	 str         r3, [sp, #0x24]
  00218	eb000000	 bl          __divs
  0021c	e59f10f4	 ldr         r1, [pc, #0xF4]
  00220	eb000000	 bl          __muls
  00224	eb000000	 bl          __stod
  00228	e59d202c	 ldr         r2, [sp, #0x2C]
  0022c	e1a03000	 mov         r3, r0
  00230	e58d301c	 str         r3, [sp, #0x1C]
  00234	e1a00002	 mov         r0, r2
  00238	e58d1020	 str         r1, [sp, #0x20]
  0023c	e58d2018	 str         r2, [sp, #0x18]
  00240	eb000000	 bl          __utos
  00244	e1a01000	 mov         r1, r0
  00248	e1a00004	 mov         r0, r4
  0024c	eb000000	 bl          __divs
  00250	e1a01005	 mov         r1, r5
  00254	eb000000	 bl          __divs
  00258	e59f10b8	 ldr         r1, [pc, #0xB8]
  0025c	eb000000	 bl          __muls
  00260	eb000000	 bl          __stod
  00264	e1a03000	 mov         r3, r0
  00268	e59a0004	 ldr         r0, [r10, #4]
  0026c	e58d3010	 str         r3, [sp, #0x10]
  00270	e58d1014	 str         r1, [sp, #0x14]
  00274	eb000000	 bl          __utos
  00278	e1a01005	 mov         r1, r5
  0027c	eb000000	 bl          __divs
  00280	e59f1090	 ldr         r1, [pc, #0x90]
  00284	eb000000	 bl          __muls
  00288	eb000000	 bl          __stod
  0028c	e1a03000	 mov         r3, r0
  00290	e799010b	 ldr         r0, [r9, +r11, lsl #2]
  00294	e58d3008	 str         r3, [sp, #8]
  00298	e58d100c	 str         r1, [sp, #0xC]
  0029c	eb000000	 bl          __utos
  002a0	e1a01005	 mov         r1, r5
  002a4	eb000000	 bl          __divs
  002a8	e59f1068	 ldr         r1, [pc, #0x68]
  002ac	eb000000	 bl          __muls
  002b0	eb000000	 bl          __stod
  002b4	e1a02001	 mov         r2, r1
  002b8	e59f1054	 ldr         r1, [pc, #0x54]
  002bc	e1a03000	 mov         r3, r0
  002c0	e58d3000	 str         r3, [sp]
  002c4	e58d2004	 str         r2, [sp, #4]
  002c8	e1a03006	 mov         r3, r6
  002cc	e1a02008	 mov         r2, r8
  002d0	e28d0038	 add         r0, sp, #0x38
  002d4	eb000000	 bl          swprintf

; 689  :                 OutputDebugString(szBuffer);

  002d8	e28d0038	 add         r0, sp, #0x38
  002dc	eb000000	 bl          OutputDebugStringW
  002e0		 |$LN3@ProfileDVF|
  002e0	e2866001	 add         r6, r6, #1
  002e4	e3560006	 cmp         r6, #6
  002e8	daffffb7	 ble         |$LL4@ProfileDVF|
  002ec	e2877007	 add         r7, r7, #7
  002f0	e357002a	 cmp         r7, #0x2A
  002f4	e2888001	 add         r8, r8, #1
  002f8	daffffb2	 ble         |$LL7@ProfileDVF|

; 690  :                 }
; 691  :             }
; 692  :         }
; 693  :     
; 694  :     return TRUE;

  002fc	e59d0240	 ldr         r0, [sp, #0x240]
  00300	eb000000	 bl          __security_check_cookie
  00304	e3a00001	 mov         r0, #1
  00308		 |$LN22@ProfileDVF|

; 695  : }

  00308	e28ddf91	 add         sp, sp, #0x91, 30
  0030c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00310	e12fff1e	 bx          lr
  00314		 |$LN40@ProfileDVF|
  00314		 |$LN41@ProfileDVF|
  00314	00000000	 DCD         |??_C@_1EG@KFCDNOAK@?$AA?$CF?$AAd?$AA?7?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AAd@|
  00318		 |$LN42@ProfileDVF|
  00318	49742400	 DCD         0x49742400
  0031c		 |$LN43@ProfileDVF|
  0031c	00000000	 DCD         |??_C@_1HE@PCHICHEK@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  00320		 |$LN44@ProfileDVF|
  00320	00000000	 DCD         |??_C@_1FO@LMFNMLFE@?$AA?7?$AAO?$AAP?$AAM?$AA?$CI?$AAi?$AA?$CJ?$AA?7?$AAO?$AAP?$AAM?$AA?$CI?$AAf?$AA?$CJ?$AA?7?$AAM?$AAI?$AAN?$AA?7?$AAM?$AAA?$AAX?$AA?7?$AAA?$AAV?$AAG?$AA?7?$AAC?$AAO?$AAU?$AAN?$AAT@|
  00324		 |$LN45@ProfileDVF|
  00324	00000000	 DCD         |??_C@_1DM@LMNJMELA@?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAu?$AAs?$AAe?$AAc?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  00328		 |$LN46@ProfileDVF|
  00328	00000000	 DCD         |??_C@_1DG@ENNAACBP@?$AA?$CF?$AAd?$AA?7?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?7?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0032c		 |$LN47@ProfileDVF|
  0032c	00000000	 DCD         |?_rgTransitionTime@@3PAY06UDVFS_STRESS_TRANSITION_DATA@@A|
  00330		 |$LN48@ProfileDVF|
  00330	00000000	 DCD         |??_C@_1DO@OENLLNAB@?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAt?$AAi?$AAc?$AAk?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  00334		 |$LN49@ProfileDVF|
  00334	00000000	 DCD         |??_C@_1GM@BACOKOFA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAt?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA?5@|
  00338		 |$LN50@ProfileDVF|
  00338	24924925	 DCD         0x24924925
  0033c		 |$LN51@ProfileDVF|
  0033c	00000000	 DCD         |__security_cookie|
  00340		 |$M39969|

			 ENDP  ; |ProfileDVFSLatency|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|ProfileWakupAccuracy|
	EXPORT	|??_C@_1DG@BDMMFCAK@?$AA?$CF?$AAs?$AA?7?$AA?$CF?$AA5?$AAd?$AA?7?$AA?$CF?$AA5?$AAd?$AA?7?$AA?$CF?$AA5?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA5?$AAd?$AA?7?$AA?$CF?$AA5?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@JDINNNLC@?$AAT?$AAi?$AAm?$AAe?$AAr?$AA?5?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAt?$AAi?$AAc?$AAk?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@OACHKHOM@?$AAt?$AAi?$AAm?$AAe?$AAr?$AA?5?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAa?$AAc?$AAc?$AAu?$AAr?$AAa?$AAc?$AAy?$AA?5?$AAp?$AAr?$AAo?$AAf?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?5?$AA?$CF@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T40068| DCD	|$LN67@ProfileWak|
	DCD	0xc0012602

  00000			 AREA	 |.xdata|, DATA
|$T40064| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@BDMMFCAK@?$AA?$CF?$AAs?$AA?7?$AA?$CF?$AA5?$AAd?$AA?7?$AA?$CF?$AA5?$AAd?$AA?7?$AA?$CF?$AA5?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA5?$AAd?$AA?7?$AA?$CF?$AA5?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, 0x9, 0x0, "%", 0x0, "5", 0x0, "d", 0x0, 0x9
	DCB	0x0, "%", 0x0, "5", 0x0, "d", 0x0, 0x9, 0x0, "%", 0x0, "5"
	DCB	0x0, ".", 0x0, "2", 0x0, "f", 0x0, 0x9, 0x0, "%", 0x0, "5"
	DCB	0x0, "d", 0x0, 0x9, 0x0, "%", 0x0, "5", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JDINNNLC@?$AAT?$AAi?$AAm?$AAe?$AAr?$AA?5?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAt?$AAi?$AAc?$AAk?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "t", 0x0, "c", 0x0, "h", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "s"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "t", 0x0, "i"
	DCB	0x0, "c", 0x0, "k", 0x0, "s", 0x0, ":", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@OACHKHOM@?$AAt?$AAi?$AAm?$AAe?$AAr?$AA?5?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAa?$AAc?$AAc?$AAu?$AAr?$AAa?$AAc?$AAy?$AA?5?$AAp?$AAr?$AAo?$AAf?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?5?$AA?$CF@| DCB "t"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "t", 0x0, "c", 0x0, "h", 0x0, " ", 0x0, "a"
	DCB	0x0, "c", 0x0, "c", 0x0, "u", 0x0, "r", 0x0, "a", 0x0, "c"
	DCB	0x0, "y", 0x0, " ", 0x0, "p", 0x0, "r", 0x0, "o", 0x0, "f"
	DCB	0x0, "i", 0x0, "l", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T40064|

  00008		 |ProfileWakupAccuracy| PROC

; 703  : {

  00008		 |$LN67@ProfileWak|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddfda	 sub         sp, sp, #0xDA, 30
  00010		 |$M40065|
  00010	e1a07000	 mov         r7, r0
  00014	e58d7018	 str         r7, [sp, #0x18]
  00018	e1a09001	 mov         r9, r1
  0001c	e59f3478	 ldr         r3, [pc, #0x478]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d3364	 str         r3, [sp, #0x364]

; 704  :     int prof;
; 705  :     int loopCount;
; 706  :     DWORD nSamples;
; 707  :     WCHAR szBuffer[MAX_PATH];
; 708  :     PHYSICAL_ADDRESS PhysAddr;
; 709  :     int val, min, max, total;
; 710  :     ProfilerControlEx profilerControlEx;
; 711  :     ProfilerControlEx profilerControlExTMar;
; 712  :     POWERDOMAIN_CONSTRAINT_INFO constraintInfo;
; 713  :     OMAP_PRCM_MPU_PRM_REGS *pOMAP_PRCM_MPU_PRM;
; 714  : 
; 715  :     // get access to PRM registers directly
; 716  :     PhysAddr.QuadPart = OMAP_PRCM_MPU_PRM_REGS_PA;

  00028	e59f0468	 ldr         r0, [pc, #0x468]
  0002c	e3a01000	 mov         r1, #0

; 717  :     pOMAP_PRCM_MPU_PRM = (OMAP_PRCM_MPU_PRM_REGS*)MmMapIoSpace(PhysAddr, OMAP_PRCM_MPU_PRM_REGS_SIZE, FALSE);

  00030	e3a03000	 mov         r3, #0
  00034	e3a02c01	 mov         r2, #1, 24
  00038	eb000000	 bl          MmMapIoSpace

; 718  : 
; 719  :     // open a power domain constraint handle to change the power domain
; 720  :     // floors
; 721  :     constraintInfo.size = sizeof(POWERDOMAIN_CONSTRAINT_INFO);

  0003c	e3a0300c	 mov         r3, #0xC

; 722  : 
; 723  :     // initialize variables
; 724  :     memset(&profilerControlEx, 0, sizeof(ProfilerControlEx));

  00040	e3a02098	 mov         r2, #0x98
  00044	e3a01000	 mov         r1, #0
  00048	e28d002c	 add         r0, sp, #0x2C
  0004c	e58d301c	 str         r3, [sp, #0x1C]
  00050	eb000000	 bl          memset

; 725  :     profilerControlEx.dwVersion = 1;
; 726  :     profilerControlEx.dwOptions = PROFILE_OEMDEFINED;

  00054	e3a02080	 mov         r2, #0x80

; 727  :     profilerControlEx.OEM.dwControlSize = sizeof(ProfilerControlEx) - sizeof(ProfilerControl);

  00058	e3a01084	 mov         r1, #0x84

; 728  :     profilerControlEx.OEM.dwCount = PROFILE_WAKEUP_TIMER_MAX_IDX;

  0005c	e3a00006	 mov         r0, #6

; 729  :     profilerControlEx.OEM.rgTargets[0] = PROFILE_WAKEUP_TIMER_CHIP_OFF;
; 730  :     profilerControlEx.OEM.rgTargets[1] = PROFILE_WAKEUP_TIMER_CHIP_OSWR;
; 731  :     profilerControlEx.OEM.rgTargets[2] = PROFILE_WAKEUP_TIMER_CHIP_CSWR;
; 732  :     profilerControlEx.OEM.rgTargets[3] = PROFILE_WAKEUP_TIMER_CORE_CSWR;
; 733  :     profilerControlEx.OEM.rgTargets[4] = PROFILE_WAKEUP_TIMER_CORE_INACTIVE;
; 734  :     profilerControlEx.OEM.rgTargets[5] = PROFILE_WAKEUP_TIMER_MPU_INACTIVE;

  00060	e58d2030	 str         r2, [sp, #0x30]
  00064	e58d103c	 str         r1, [sp, #0x3C]
  00068	e58d0040	 str         r0, [sp, #0x40]
  0006c	e3a03001	 mov         r3, #1
  00070	e3a0e00a	 mov         lr, #0xA
  00074	e3a0400b	 mov         r4, #0xB
  00078	e3a0500c	 mov         r5, #0xC
  0007c	e3a0600d	 mov         r6, #0xD
  00080	e3a0800e	 mov         r8, #0xE
  00084	e3a0a00f	 mov         r10, #0xF

; 735  : 
; 736  :     memset(&profilerControlExTMar, 0, sizeof(ProfilerControlEx));

  00088	e3a02098	 mov         r2, #0x98
  0008c	e3a01000	 mov         r1, #0
  00090	e28d00c4	 add         r0, sp, #0xC4
  00094	e58d302c	 str         r3, [sp, #0x2C]
  00098	e58de044	 str         lr, [sp, #0x44]
  0009c	e58d4048	 str         r4, [sp, #0x48]
  000a0	e58d504c	 str         r5, [sp, #0x4C]
  000a4	e58d6050	 str         r6, [sp, #0x50]
  000a8	e58d8054	 str         r8, [sp, #0x54]
  000ac	e58da058	 str         r10, [sp, #0x58]
  000b0	eb000000	 bl          memset

; 737  :     profilerControlExTMar.dwVersion = 1;
; 738  :     profilerControlExTMar.dwOptions = PROFILE_OEMDEFINED;
; 739  :     profilerControlExTMar.OEM.dwCount = 1;
; 740  :     profilerControlExTMar.OEM.dwControlSize = sizeof(ProfilerControlEx) - sizeof(ProfilerControl);
; 741  :     profilerControlExTMar.OEM.rgTargets[0] = PROFILE_WAKEUP_TIMER_MATCH_ORIGINAL;
; 742  : 
; 743  :     // loop through entire profile list
; 744  :     prof = 0;
; 745  :     while (_rgDomainProfile[prof].szDescription != NULL)

  000b4	e59f63d0	 ldr         r6, [pc, #0x3D0]
  000b8	e3a0e001	 mov         lr, #1
  000bc	e3a04080	 mov         r4, #0x80
  000c0	e5963024	 ldr         r3, [r6, #0x24]
  000c4	e3a02001	 mov         r2, #1
  000c8	e3a01084	 mov         r1, #0x84
  000cc	e3a00003	 mov         r0, #3
  000d0	e3a08000	 mov         r8, #0
  000d4	e3530000	 cmp         r3, #0
  000d8	e58de0c4	 str         lr, [sp, #0xC4]
  000dc	e58d40c8	 str         r4, [sp, #0xC8]
  000e0	e58d20d8	 str         r2, [sp, #0xD8]
  000e4	e58d10d4	 str         r1, [sp, #0xD4]
  000e8	e58d00dc	 str         r0, [sp, #0xDC]
  000ec	e58d8028	 str         r8, [sp, #0x28]
  000f0	e3a0a000	 mov         r10, #0
  000f4	0a00009e	 beq         |$LN14@ProfileWak|

; 854  :         }
; 855  : 
; 856  :     // check for non-entered states
; 857  :     prof = 0;

  000f8	e3a05000	 mov         r5, #0
  000fc	e1a04006	 mov         r4, r6
  00100	e3e0b102	 mvn         r11, #2, 2
  00104		 |$LL15@ProfileWak|
  00104	e5942024	 ldr         r2, [r4, #0x24]
  00108	e59f1384	 ldr         r1, [pc, #0x384]
  0010c	e28d0f57	 add         r0, sp, #0x57, 30
  00110	eb000000	 bl          swprintf
  00114	e28d0f57	 add         r0, sp, #0x57, 30
  00118	eb000000	 bl          OutputDebugStringW
  0011c	e3a03102	 mov         r3, #2, 2
  00120	e5843010	 str         r3, [r4, #0x10]
  00124	e584b014	 str         r11, [r4, #0x14]
  00128	e584a018	 str         r10, [r4, #0x18]
  0012c	e584a01c	 str         r10, [r4, #0x1C]
  00130	e5992000	 ldr         r2, [r9]
  00134	e795e006	 ldr         lr, [r5, +r6]
  00138	e1a00007	 mov         r0, r7
  0013c	e3a07000	 mov         r7, #0
  00140	e1a05102	 mov         r5, r2, lsl #2
  00144	e3a06005	 mov         r6, #5
  00148	e28d201c	 add         r2, sp, #0x1C
  0014c	e3a0300c	 mov         r3, #0xC
  00150	e3a01001	 mov         r1, #1
  00154	e58d7014	 str         r7, [sp, #0x14]
  00158	e3a0a102	 mov         r10, #2, 2
  0015c	e3a07000	 mov         r7, #0
  00160	e58d6020	 str         r6, [sp, #0x20]
  00164	e58de024	 str         lr, [sp, #0x24]
  00168	eb000000	 bl          PmxUpdateConstraint
  0016c	e5941004	 ldr         r1, [r4, #4]
  00170	e59d0018	 ldr         r0, [sp, #0x18]
  00174	e3a0e001	 mov         lr, #1
  00178	e58d1024	 str         r1, [sp, #0x24]
  0017c	e3a01001	 mov         r1, #1
  00180	e3a0300c	 mov         r3, #0xC
  00184	e28d201c	 add         r2, sp, #0x1C
  00188	e58de020	 str         lr, [sp, #0x20]
  0018c	eb000000	 bl          PmxUpdateConstraint
  00190	e5941008	 ldr         r1, [r4, #8]
  00194	e59d0018	 ldr         r0, [sp, #0x18]
  00198	e3a0e002	 mov         lr, #2
  0019c	e58d1024	 str         r1, [sp, #0x24]
  001a0	e3a01001	 mov         r1, #1
  001a4	e3a0300c	 mov         r3, #0xC
  001a8	e28d201c	 add         r2, sp, #0x1C
  001ac	e58de020	 str         lr, [sp, #0x20]
  001b0	eb000000	 bl          PmxUpdateConstraint
  001b4	e59f02d4	 ldr         r0, [pc, #0x2D4]
  001b8	e3a0e000	 mov         lr, #0
  001bc	e3a03000	 mov         r3, #0
  001c0	e3a02098	 mov         r2, #0x98
  001c4	e28d102c	 add         r1, sp, #0x2C
  001c8	e58de004	 str         lr, [sp, #4]
  001cc	e58de000	 str         lr, [sp]
  001d0	eb000000	 bl          KernelIoControl
  001d4	e59f02b4	 ldr         r0, [pc, #0x2B4]
  001d8	e3a0e000	 mov         lr, #0
  001dc	e3a03000	 mov         r3, #0
  001e0	e3a02098	 mov         r2, #0x98
  001e4	e28d10c4	 add         r1, sp, #0xC4
  001e8	e58de004	 str         lr, [sp, #4]
  001ec	e58de000	 str         lr, [sp]
  001f0	eb000000	 bl          KernelIoControl
  001f4	e28d3084	 add         r3, sp, #0x84
  001f8	e59f628c	 ldr         r6, [pc, #0x28C]
  001fc	e2832040	 add         r2, r3, #0x40
  00200	e3a01000	 mov         r1, #0
  00204		 |$LN56@ProfileWak|
  00204	e4831004	 str         r1, [r3], #4
  00208	e1530002	 cmp         r3, r2
  0020c	1afffffc	 bne         |$LN56@ProfileWak|
  00210	e28d3f47	 add         r3, sp, #0x47, 30
  00214	e2832040	 add         r2, r3, #0x40
  00218	e3a01000	 mov         r1, #0
  0021c		 |$LN58@ProfileWak|
  0021c	e4831004	 str         r1, [r3], #4
  00220	e1530002	 cmp         r3, r2
  00224	1afffffc	 bne         |$LN58@ProfileWak|
  00228	e5993000	 ldr         r3, [r9]
  0022c	e3530000	 cmp         r3, #0
  00230	9a00003d	 bls         |$LN12@ProfileWak|
  00234	e59d6014	 ldr         r6, [sp, #0x14]
  00238	e28d802c	 add         r8, sp, #0x2C
  0023c		 |$LL13@ProfileWak|

; 746  :         {
; 747  :         _stprintf(szBuffer, L"timer match accuracy profiling %s\r\n", _rgDomainProfile[prof].szDescription);
; 748  :         OutputDebugString(szBuffer);
; 749  : 
; 750  :         // initialize variables
; 751  :         _rgDomainProfile[prof].min = min = MAX_INT;
; 752  :         _rgDomainProfile[prof].max = max = 0x80000000;
; 753  :         _rgDomainProfile[prof].total = total = 0;
; 754  :         _rgDomainProfile[prof].count = 0;
; 755  : 
; 756  :         nSamples = 0;
; 757  :         loopCount = pTestParam->_numberOfSamples * 4;
; 758  : 
; 759  :         // put the mpu in the correct state
; 760  :         constraintInfo.powerDomain = POWERDOMAIN_MPU;
; 761  :         constraintInfo.state = _rgDomainProfile[prof].domainState_MPU;
; 762  :         PmxUpdateConstraint(hDomainConstraint,
; 763  :             CONSTRAINT_MSG_POWERDOMAIN_REQUEST,
; 764  :             (void*)&constraintInfo,
; 765  :             sizeof(POWERDOMAIN_CONSTRAINT_INFO)
; 766  :             );
; 767  : 
; 768  :         // put the core in the correct state
; 769  :         constraintInfo.powerDomain = POWERDOMAIN_CORE;
; 770  :         constraintInfo.state = _rgDomainProfile[prof].domainState_CORE;
; 771  :         PmxUpdateConstraint(hDomainConstraint,
; 772  :             CONSTRAINT_MSG_POWERDOMAIN_REQUEST,
; 773  :             (void*)&constraintInfo,
; 774  :             sizeof(POWERDOMAIN_CONSTRAINT_INFO)
; 775  :             );
; 776  : 
; 777  :         // put the per in the correct state
; 778  :         constraintInfo.powerDomain = POWERDOMAIN_PERIPHERAL;
; 779  :         constraintInfo.state = _rgDomainProfile[prof].domainState_PER;
; 780  :         PmxUpdateConstraint(hDomainConstraint,
; 781  :             CONSTRAINT_MSG_POWERDOMAIN_REQUEST,
; 782  :             (void*)&constraintInfo,
; 783  :             sizeof(POWERDOMAIN_CONSTRAINT_INFO)
; 784  :             );
; 785  : 
; 786  :         // clear any residual profile information
; 787  :         KernelIoControl(IOCTL_HAL_OEM_PROFILER,
; 788  :             (void*)&profilerControlEx,
; 789  :             sizeof(ProfilerControlEx),
; 790  :             NULL,
; 791  :             0,
; 792  :             NULL
; 793  :             );
; 794  : 
; 795  :         KernelIoControl(IOCTL_HAL_OEM_PROFILER,
; 796  :             (void*)&profilerControlExTMar,
; 797  :             sizeof(ProfilerControlEx),
; 798  :             NULL,
; 799  :             0,
; 800  :             NULL
; 801  :             );
; 802  : 
; 803  :         ClearProfileControlData(&profilerControlEx);
; 804  :         ClearProfileControlData(&profilerControlExTMar);
; 805  : 
; 806  :         // loop through requested number of samples
; 807  :         while (nSamples < pTestParam->_numberOfSamples && loopCount > 0)

  0023c	e3550000	 cmp         r5, #0
  00240	da000036	 ble         |$LN64@ProfileWak|

; 808  :             {
; 809  :             // wait for wake-up
; 810  :             Sleep(pTestParam->_sleepPeriod);

  00244	e5990004	 ldr         r0, [r9, #4]
  00248	eb000000	 bl          Sleep

; 811  : 
; 812  :             // get profiled information
; 813  :             KernelIoControl(IOCTL_HAL_OEM_PROFILER,
; 814  :                 (void*)&profilerControlEx,
; 815  :                 sizeof(ProfilerControlEx),
; 816  :                 NULL,
; 817  :                 0,
; 818  :                 NULL
; 819  :                 );

  0024c	e59f023c	 ldr         r0, [pc, #0x23C]
  00250	e3a0e000	 mov         lr, #0
  00254	e3a03000	 mov         r3, #0
  00258	e3a02098	 mov         r2, #0x98
  0025c	e28d102c	 add         r1, sp, #0x2C
  00260	e58de004	 str         lr, [sp, #4]
  00264	e58de000	 str         lr, [sp]
  00268	eb000000	 bl          KernelIoControl

; 820  : 
; 821  :             KernelIoControl(IOCTL_HAL_OEM_PROFILER,
; 822  :                 (void*)&profilerControlExTMar,
; 823  :                 sizeof(profilerControlExTMar),
; 824  :                 NULL,
; 825  :                 0,
; 826  :                 NULL
; 827  :                 );

  0026c	e59f021c	 ldr         r0, [pc, #0x21C]
  00270	e3a0e000	 mov         lr, #0
  00274	e3a03000	 mov         r3, #0
  00278	e3a02098	 mov         r2, #0x98
  0027c	e28d10c4	 add         r1, sp, #0xC4
  00280	e58de004	 str         lr, [sp, #4]
  00284	e58de000	 str         lr, [sp]
  00288	eb000000	 bl          KernelIoControl

; 828  : 
; 829  :             // log timer match accuracy
; 830  :             if ((profilerControlEx.OEM.rgValues[_rgDomainProfile[prof].idxProfile] != 0) &&
; 831  :                 (profilerControlExTMar.OEM.rgValues[0] != 0))

  0028c	e594300c	 ldr         r3, [r4, #0xC]
  00290	e0883103	 add         r3, r8, r3, lsl #2
  00294	e5933058	 ldr         r3, [r3, #0x58]
  00298	e1b02003	 movs        r2, r3
  0029c	0a00000f	 beq         |$LN11@ProfileWak|
  002a0	e59d311c	 ldr         r3, [sp, #0x11C]
  002a4	e3530000	 cmp         r3, #0
  002a8	0a00000c	 beq         |$LN11@ProfileWak|

; 832  :                 {
; 833  :                 val = profilerControlEx.OEM.rgValues[_rgDomainProfile[prof].idxProfile];
; 834  :                 val = val - (INT)profilerControlExTMar.OEM.rgValues[0];

  002ac	e0423003	 sub         r3, r2, r3

; 835  :                 if (val < min || nSamples == 0) min = val;

  002b0	e153000b	 cmp         r3, r11
  002b4	ba000001	 blt         |$LN9@ProfileWak|
  002b8	e3570000	 cmp         r7, #0
  002bc	1a000000	 bne         |$LN10@ProfileWak|
  002c0		 |$LN9@ProfileWak|
  002c0	e1a0b003	 mov         r11, r3
  002c4		 |$LN10@ProfileWak|

; 836  :                 if (val > max || nSamples == 0) max = val;

  002c4	e153000a	 cmp         r3, r10
  002c8	ca000001	 bgt         |$LN7@ProfileWak|
  002cc	e3570000	 cmp         r7, #0
  002d0	1a000000	 bne         |$LN8@ProfileWak|
  002d4		 |$LN7@ProfileWak|
  002d4	e1a0a003	 mov         r10, r3
  002d8		 |$LN8@ProfileWak|

; 837  :                 total += val;

  002d8	e0866003	 add         r6, r6, r3

; 838  :                 ++nSamples;

  002dc	e2877001	 add         r7, r7, #1
  002e0		 |$LN11@ProfileWak|

; 839  :                 }
; 840  : 
; 841  :             ClearProfileControlData(&profilerControlEx);

  002e0	e28d3084	 add         r3, sp, #0x84
  002e4	e2832040	 add         r2, r3, #0x40
  002e8	e3a01000	 mov         r1, #0
  002ec		 |$LN60@ProfileWak|
  002ec	e4831004	 str         r1, [r3], #4
  002f0	e1530002	 cmp         r3, r2
  002f4	1afffffc	 bne         |$LN60@ProfileWak|

; 842  :             ClearProfileControlData(&profilerControlExTMar);

  002f8	e28d3f47	 add         r3, sp, #0x47, 30
  002fc	e2832040	 add         r2, r3, #0x40
  00300	e3a01000	 mov         r1, #0
  00304		 |$LN62@ProfileWak|
  00304	e4831004	 str         r1, [r3], #4
  00308	e1530002	 cmp         r3, r2
  0030c	1afffffc	 bne         |$LN62@ProfileWak|
  00310	e5993000	 ldr         r3, [r9]

; 843  : 
; 844  :             --loopCount;

  00314	e2455001	 sub         r5, r5, #1
  00318	e1570003	 cmp         r7, r3
  0031c	3affffc6	 bcc         |$LL13@ProfileWak|
  00320		 |$LN64@ProfileWak|

; 845  :             }
; 846  : 
; 847  :         // log information
; 848  :         _rgDomainProfile[prof].min = min;
; 849  :         _rgDomainProfile[prof].max = max;
; 850  :         _rgDomainProfile[prof].total = total;
; 851  :         _rgDomainProfile[prof].count = nSamples;
; 852  : 
; 853  :         ++prof;

  00320	e59d8028	 ldr         r8, [sp, #0x28]
  00324	e58d6014	 str         r6, [sp, #0x14]
  00328	e59f615c	 ldr         r6, [pc, #0x15C]
  0032c		 |$LN12@ProfileWak|
  0032c	e2888001	 add         r8, r8, #1
  00330	e0883108	 add         r3, r8, r8, lsl #2
  00334	e1a05183	 mov         r5, r3, lsl #3
  00338	e59d3014	 ldr         r3, [sp, #0x14]
  0033c	e584b014	 str         r11, [r4, #0x14]
  00340	e584a010	 str         r10, [r4, #0x10]
  00344	e5843018	 str         r3, [r4, #0x18]
  00348	e584701c	 str         r7, [r4, #0x1C]
  0034c	e0854006	 add         r4, r5, r6
  00350	e5943024	 ldr         r3, [r4, #0x24]
  00354	e59d7018	 ldr         r7, [sp, #0x18]
  00358	e58d8028	 str         r8, [sp, #0x28]
  0035c	e3530000	 cmp         r3, #0
  00360	e3a0a000	 mov         r10, #0
  00364	e3e0b102	 mvn         r11, #2, 2
  00368	1affff65	 bne         |$LL15@ProfileWak|
  0036c	e5963024	 ldr         r3, [r6, #0x24]
  00370	e3a0a000	 mov         r10, #0
  00374		 |$LN14@ProfileWak|

; 854  :         }
; 855  : 
; 856  :     // check for non-entered states
; 857  :     prof = 0;

  00374	e3a01000	 mov         r1, #0

; 858  :     while (_rgDomainProfile[prof].szDescription != NULL)

  00378	e3530000	 cmp         r3, #0
  0037c	0a00000a	 beq         |$LN5@ProfileWak|
  00380	e1a02006	 mov         r2, r6
  00384		 |$LL6@ProfileWak|

; 859  :         {
; 860  :         if (_rgDomainProfile[prof].count == 0)

  00384	e592301c	 ldr         r3, [r2, #0x1C]

; 861  :             {
; 862  :             _rgDomainProfile[prof].min = 0;
; 863  :             _rgDomainProfile[prof].max = 0;
; 864  :             }
; 865  :         ++prof;

  00388	e2811001	 add         r1, r1, #1
  0038c	e3530000	 cmp         r3, #0
  00390	e0813101	 add         r3, r1, r1, lsl #2
  00394	0582a014	 streq       r10, [r2, #0x14]
  00398	0582a010	 streq       r10, [r2, #0x10]
  0039c	e0862183	 add         r2, r6, r3, lsl #3
  003a0	e5923024	 ldr         r3, [r2, #0x24]
  003a4	e3530000	 cmp         r3, #0
  003a8	1afffff5	 bne         |$LL6@ProfileWak|
  003ac		 |$LN5@ProfileWak|

; 866  :         }
; 867  : 
; 868  :     // output results
; 869  :     OutputDebugString(L"Timer match results in ticks:\r\n");

  003ac	e59f00d4	 ldr         r0, [pc, #0xD4]
  003b0	eb000000	 bl          OutputDebugStringW

; 870  :     OutputDebugString(L"Sleep Desc.\t\tMIN\tMAX\tAVG\tSUM\tCOUNT\r\n");

  003b4	e59f00c8	 ldr         r0, [pc, #0xC8]
  003b8	eb000000	 bl          OutputDebugStringW

; 871  :     OutputDebugString(L"-------------------------------------------------------\r\n");

  003bc	e59f00bc	 ldr         r0, [pc, #0xBC]
  003c0	eb000000	 bl          OutputDebugStringW

; 872  :     for (prof = 0; _rgDomainProfile[prof].szDescription != NULL; prof++)

  003c4	e5963024	 ldr         r3, [r6, #0x24]
  003c8	e3a07000	 mov         r7, #0
  003cc	e3530000	 cmp         r3, #0
  003d0	0a000023	 beq         |$LN1@ProfileWak|
  003d4	e1a05006	 mov         r5, r6
  003d8		 |$LL3@ProfileWak|

; 873  :         {
; 874  :         _stprintf(szBuffer, L"%s\t%5d\t%5d\t%5.2f\t%5d\t%5d\r\n",
; 875  :             _rgDomainProfile[prof].szDescription,
; 876  :             _rgDomainProfile[prof].min,
; 877  :             _rgDomainProfile[prof].max,
; 878  :             _rgDomainProfile[prof].count == 0 ? 0.0f : ((float)_rgDomainProfile[prof].total/(float)_rgDomainProfile[prof].count),
; 879  :             _rgDomainProfile[prof].total,
; 880  :             _rgDomainProfile[prof].count
; 881  :             );

  003d8	e595301c	 ldr         r3, [r5, #0x1C]
  003dc	e1b08003	 movs        r8, r3
  003e0	01a0000a	 moveq       r0, r10
  003e4	0a000007	 beq         |$LN19@ProfileWak|
  003e8	e5950018	 ldr         r0, [r5, #0x18]
  003ec	eb000000	 bl          __itos
  003f0	e1a04000	 mov         r4, r0
  003f4	e1a00008	 mov         r0, r8
  003f8	eb000000	 bl          __utos
  003fc	e1a01000	 mov         r1, r0
  00400	e1a00004	 mov         r0, r4
  00404	eb000000	 bl          __divs
  00408		 |$LN19@ProfileWak|
  00408	e5953018	 ldr         r3, [r5, #0x18]
  0040c	e58d8010	 str         r8, [sp, #0x10]
  00410	e58d300c	 str         r3, [sp, #0xC]
  00414	eb000000	 bl          __stod
  00418	e5954010	 ldr         r4, [r5, #0x10]
  0041c	e5953014	 ldr         r3, [r5, #0x14]
  00420	e5952024	 ldr         r2, [r5, #0x24]
  00424	e1a05001	 mov         r5, r1
  00428	e59f104c	 ldr         r1, [pc, #0x4C]
  0042c	e1a0e000	 mov         lr, r0
  00430	e28d0f57	 add         r0, sp, #0x57, 30
  00434	e58d4000	 str         r4, [sp]
  00438	e58de004	 str         lr, [sp, #4]
  0043c	e58d5008	 str         r5, [sp, #8]
  00440	eb000000	 bl          swprintf

; 882  : 
; 883  :         OutputDebugString(szBuffer);

  00444	e28d0f57	 add         r0, sp, #0x57, 30
  00448	eb000000	 bl          OutputDebugStringW
  0044c	e2877001	 add         r7, r7, #1
  00450	e0873107	 add         r3, r7, r7, lsl #2
  00454	e0865183	 add         r5, r6, r3, lsl #3
  00458	e5953024	 ldr         r3, [r5, #0x24]
  0045c	e3530000	 cmp         r3, #0
  00460	1affffdc	 bne         |$LL3@ProfileWak|
  00464		 |$LN1@ProfileWak|

; 884  :         }
; 885  : 
; 886  :     return TRUE;

  00464	e59d0364	 ldr         r0, [sp, #0x364]
  00468	eb000000	 bl          __security_check_cookie
  0046c	e3a00001	 mov         r0, #1

; 887  : }

  00470	e28ddfda	 add         sp, sp, #0xDA, 30
  00474	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00478	e12fff1e	 bx          lr
  0047c		 |$LN68@ProfileWak|
  0047c		 |$LN69@ProfileWak|
  0047c	00000000	 DCD         |??_C@_1DG@BDMMFCAK@?$AA?$CF?$AAs?$AA?7?$AA?$CF?$AA5?$AAd?$AA?7?$AA?$CF?$AA5?$AAd?$AA?7?$AA?$CF?$AA5?$AA?4?$AA2?$AAf?$AA?7?$AA?$CF?$AA5?$AAd?$AA?7?$AA?$CF?$AA5?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00480		 |$LN70@ProfileWak|
  00480	00000000	 DCD         |??_C@_1HE@PCHICHEK@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  00484		 |$LN71@ProfileWak|
  00484	00000000	 DCD         |??_C@_1EK@BMMAPLAO@?$AAS?$AAl?$AAe?$AAe?$AAp?$AA?5?$AAD?$AAe?$AAs?$AAc?$AA?4?$AA?7?$AA?7?$AAM?$AAI?$AAN?$AA?7?$AAM?$AAA?$AAX?$AA?7?$AAA?$AAV?$AAG?$AA?7?$AAS?$AAU?$AAM?$AA?7?$AAC?$AAO?$AAU@|
  00488		 |$LN72@ProfileWak|
  00488	00000000	 DCD         |??_C@_1EA@JDINNNLC@?$AAT?$AAi?$AAm?$AAe?$AAr?$AA?5?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AAs?$AA?5?$AAi?$AAn?$AA?5?$AAt?$AAi?$AAc?$AAk?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  0048c		 |$LN73@ProfileWak|
  0048c	00000000	 DCD         |_rgDomainProfile|
  00490		 |$LN74@ProfileWak|
  00490	0101010c	 DCD         0x101010c
  00494		 |$LN75@ProfileWak|
  00494	00000000	 DCD         |??_C@_1EI@OACHKHOM@?$AAt?$AAi?$AAm?$AAe?$AAr?$AA?5?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAa?$AAc?$AAc?$AAu?$AAr?$AAa?$AAc?$AAy?$AA?5?$AAp?$AAr?$AAo?$AAf?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?5?$AA?$CF@|
  00498		 |$LN76@ProfileWak|
  00498	48306900	 DCD         0x48306900
  0049c		 |$LN77@ProfileWak|
  0049c	00000000	 DCD         |__security_cookie|
  004a0		 |$M40066|

			 ENDP  ; |ProfileWakupAccuracy|

	END
