; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\SDMAPROXY\sdmapx.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|DmaConfigure|
	IMPORT	|DmaGetLogicalChannel|
	IMPORT	|memset|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\inc\dma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T39253| DCD	|$LN9@DmaConfigu|
	DCD	0x40003901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaConfigure| PROC

; 167  : {

  00000		 |$LN9@DmaConfigu|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M39250|
  00004	e1a04003	 mov         r4, r3
  00008	e1a09002	 mov         r9, r2
  0000c	e1a06001	 mov         r6, r1
  00010	e1a05000	 mov         r5, r0

; 168  :     BOOL rc = FALSE;
; 169  :     OMAP_DMA_LC_REGS *pDmaLcReg = (OMAP_DMA_LC_REGS*)DmaGetLogicalChannel(hDmaChannel);

  00014	e3a08000	 mov         r8, #0
  00018	eb000000	 bl          DmaGetLogicalChannel
  0001c	e1b07000	 movs        r7, r0

; 170  :     if (pDmaLcReg == NULL || pConfigInfo == NULL)

  00020	0a00002c	 beq         |$cleanUp$38529|
  00024	e3560000	 cmp         r6, #0
  00028	0a00002a	 beq         |$cleanUp$38529|

; 171  :         {
; 172  :         goto cleanUp;
; 173  :         }
; 174  : 
; 175  :     // initialize dma DataInfo if necessary
; 176  :     if (pDataInfo != NULL)

  0002c	e3540000	 cmp         r4, #0
  00030	0a000005	 beq         |$LN1@DmaConfigu|

; 177  :         {
; 178  :         memset(pDataInfo, 0, sizeof(DmaDataInfo_t));

  00034	e3a02018	 mov         r2, #0x18
  00038	e3a01000	 mov         r1, #0
  0003c	e1a00004	 mov         r0, r4
  00040	eb000000	 bl          memset

; 179  :         pDataInfo->hDmaChannel = hDmaChannel;

  00044	e5845010	 str         r5, [r4, #0x10]

; 180  :         pDataInfo->pDmaLcReg = pDmaLcReg;

  00048	e5847014	 str         r7, [r4, #0x14]
  0004c		 |$LN1@DmaConfigu|

; 181  :         }
; 182  : 
; 183  :     // Disable the DMA in case it is running
; 184  :     CLRREG32(&pDmaLcReg->CCR, DMA_CCR_ENABLE);

  0004c	e5973000	 ldr         r3, [r7]

; 185  : 
; 186  :     // update syncmap
; 187  :     pConfigInfo->syncMap = syncMap;
; 188  : 
; 189  :     // Initialize logical channel registers
; 190  :     //
; 191  :     OUTREG32(&pDmaLcReg->CCR, 0);

  00050	e3a02000	 mov         r2, #0

; 192  :     OUTREG32(&pDmaLcReg->CLNK_CTRL, 0);
; 193  :     OUTREG32(&pDmaLcReg->COLOR, 0);
; 194  : 
; 195  :     // update CSDP
; 196  :     //  DATA_TYPE
; 197  :     //  DST
; 198  :     //  SRC
; 199  :     OUTREG32(&pDmaLcReg->CSDP, pConfigInfo->elemSize);
; 200  : 
; 201  :     // update CCR
; 202  :     //  DST_MODE
; 203  :     //  SRC_MODE
; 204  :     //  PRIO
; 205  :     //  SYNC
; 206  :     //
; 207  :     OUTREG32(&pDmaLcReg->CCR, pConfigInfo->srcAddrMode |
; 208  :         pConfigInfo->dstAddrMode | pConfigInfo->dmaPrio |
; 209  :         DMA_CCR_SYNC(syncMap) | pConfigInfo->synchTrigger |
; 210  :         pConfigInfo->synchMode
; 211  :         );

  00054	e2090060	 and         r0, r9, #0x60
  00058	e3c33080	 bic         r3, r3, #0x80
  0005c	e5873000	 str         r3, [r7]
  00060	e586902c	 str         r9, [r6, #0x2C]
  00064	e5872000	 str         r2, [r7]
  00068	e5872004	 str         r2, [r7, #4]
  0006c	e5872044	 str         r2, [r7, #0x44]
  00070	e5963000	 ldr         r3, [r6]

; 212  : 
; 213  :     // update CSEI
; 214  :     //
; 215  :     OUTREG32(&pDmaLcReg->CSEI, pConfigInfo->srcElemIndex);
; 216  : 
; 217  :     // update CDEI
; 218  :     //
; 219  :     OUTREG32(&pDmaLcReg->CDEI, pConfigInfo->dstElemIndex);
; 220  : 
; 221  :     // update CSFI
; 222  :     //
; 223  :     OUTREG32(&pDmaLcReg->CSFI, pConfigInfo->srcFrameIndex);
; 224  : 
; 225  :     // update CDFI
; 226  :     //
; 227  :     OUTREG32(&pDmaLcReg->CDFI, pConfigInfo->dstFrameIndex);
; 228  : 
; 229  :     // update CICR
; 230  :     //
; 231  :     OUTREG32(&pDmaLcReg->CICR , pConfigInfo->interrupts);
; 232  :     
; 233  :     rc = TRUE;

  00074	e3a08001	 mov         r8, #1
  00078	e5873010	 str         r3, [r7, #0x10]
  0007c	e5962024	 ldr         r2, [r6, #0x24]
  00080	e209301f	 and         r3, r9, #0x1F
  00084	e5961020	 ldr         r1, [r6, #0x20]
  00088	e1833700	 orr         r3, r3, r0, lsl #14
  0008c	e1833002	 orr         r3, r3, r2
  00090	e596201c	 ldr         r2, [r6, #0x1C]
  00094	e1833001	 orr         r3, r3, r1
  00098	e5961018	 ldr         r1, [r6, #0x18]
  0009c	e1833002	 orr         r3, r3, r2
  000a0	e596200c	 ldr         r2, [r6, #0xC]
  000a4	e1833001	 orr         r3, r3, r1
  000a8	e1833002	 orr         r3, r3, r2
  000ac	e5873000	 str         r3, [r7]
  000b0	e5963004	 ldr         r3, [r6, #4]
  000b4	e5873024	 str         r3, [r7, #0x24]
  000b8	e5963010	 ldr         r3, [r6, #0x10]
  000bc	e587302c	 str         r3, [r7, #0x2C]
  000c0	e5963008	 ldr         r3, [r6, #8]
  000c4	e5873028	 str         r3, [r7, #0x28]
  000c8	e5963014	 ldr         r3, [r6, #0x14]
  000cc	e5873030	 str         r3, [r7, #0x30]
  000d0	e5963028	 ldr         r3, [r6, #0x28]
  000d4	e5873008	 str         r3, [r7, #8]
  000d8		 |$cleanUp$38529|

; 234  : 
; 235  : cleanUp:
; 236  :     return rc;
; 237  : }

  000d8	e1a00008	 mov         r0, r8
  000dc	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000e0	e12fff1e	 bx          lr
  000e4		 |$M39251|

			 ENDP  ; |DmaConfigure|

	EXPORT	|DmaSetDstBuffer|

  00000			 AREA	 |.pdata|, PDATA
|$T39263| DCD	|$LN6@DmaSetDstB|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetDstBuffer| PROC

; 331  : {

  00000		 |$LN6@DmaSetDstB|
  00000		 |$M39260|

; 332  :     // save values
; 333  :     //
; 334  :     pDataInfo->pDstBuffer = pBuffer;
; 335  :     pDataInfo->PhysAddrDstBuffer = PhysAddr;
; 336  : 
; 337  :     // set destination address
; 338  :     //
; 339  :     if (pDataInfo->pDmaLcReg != NULL)

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e5801004	 str         r1, [r0, #4]
  00008	e580200c	 str         r2, [r0, #0xC]
  0000c	e3530000	 cmp         r3, #0

; 340  :         {
; 341  :         OUTREG32(&pDataInfo->pDmaLcReg->CDSA, PhysAddr);

  00010	15832020	 strne       r2, [r3, #0x20]

; 342  :         OUTREG32(&pDataInfo->pDmaLcReg->CDAC, PhysAddr);

  00014	15903014	 ldrne       r3, [r0, #0x14]
  00018	15832038	 strne       r2, [r3, #0x38]

; 343  :         }
; 344  : }

  0001c	e12fff1e	 bx          lr
  00020		 |$M39261|

			 ENDP  ; |DmaSetDstBuffer|

	EXPORT	|DmaSetSrcBuffer|

  00000			 AREA	 |.pdata|, PDATA
|$T39273| DCD	|$LN6@DmaSetSrcB|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetSrcBuffer| PROC

; 359  : {

  00000		 |$LN6@DmaSetSrcB|
  00000		 |$M39270|

; 360  :     // save values
; 361  :     //
; 362  :     pDataInfo->pSrcBuffer = pBuffer;
; 363  :     pDataInfo->PhysAddrSrcBuffer = PhysAddr;
; 364  : 
; 365  :     // set source address
; 366  :     //
; 367  :     if (pDataInfo->pDmaLcReg != NULL)

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e5801000	 str         r1, [r0]
  00008	e5802008	 str         r2, [r0, #8]
  0000c	e3530000	 cmp         r3, #0

; 368  :         {
; 369  :         OUTREG32(&pDataInfo->pDmaLcReg->CSSA, PhysAddr);

  00010	1583201c	 strne       r2, [r3, #0x1C]

; 370  :         OUTREG32(&pDataInfo->pDmaLcReg->CSAC, PhysAddr);

  00014	15903014	 ldrne       r3, [r0, #0x14]
  00018	15832034	 strne       r2, [r3, #0x34]

; 371  :         }
; 372  : }

  0001c	e12fff1e	 bx          lr
  00020		 |$M39271|

			 ENDP  ; |DmaSetSrcBuffer|

	EXPORT	|DmaSetElementAndFrameCount|

  00000			 AREA	 |.pdata|, PDATA
|$T39283| DCD	|$LN5@DmaSetElem|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetElementAndFrameCount| PROC

; 387  : {

  00000		 |$LN5@DmaSetElem|
  00000		 |$M39280|

; 388  :     // setup frame and element count for destination side
; 389  :     //
; 390  :     OUTREG32(&pDataInfo->pDmaLcReg->CEN , countElements);

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e5831014	 str         r1, [r3, #0x14]

; 391  :     OUTREG32(&pDataInfo->pDmaLcReg->CFN , countFrames);

  00008	e5903014	 ldr         r3, [r0, #0x14]
  0000c	e5832018	 str         r2, [r3, #0x18]

; 392  : }

  00010	e12fff1e	 bx          lr
  00014		 |$M39281|

			 ENDP  ; |DmaSetElementAndFrameCount|

	EXPORT	|DmaStop|
	IMPORT	|DmaDisableStandby|

  00000			 AREA	 |.pdata|, PDATA
|$T39295| DCD	|$LN12@DmaStop|
	DCD	0x40002102
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaStop| PROC

; 450  : {

  00000		 |$LN12@DmaStop|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M39292|
  00008	e1a06000	 mov         r6, r0

; 451  :     volatile ULONG ulCCR;
; 452  :     BOOL breakLoop = FALSE;
; 453  :     int  DelayCnt = 0x7FFF;
; 454  : 
; 455  :     // disable standby in dma controller
; 456  :     //
; 457  :     DmaDisableStandby(pDataInfo->hDmaChannel, TRUE);

  0000c	e5960010	 ldr         r0, [r6, #0x10]
  00010	e3a03c7f	 mov         r3, #0x7F, 24
  00014	e3a01001	 mov         r1, #1
  00018	e3a05000	 mov         r5, #0
  0001c	e38340ff	 orr         r4, r3, #0xFF
  00020	eb000000	 bl          DmaDisableStandby

; 458  :     CLRREG32(&pDataInfo->pDmaLcReg->CCR , DMA_CCR_ENABLE);

  00024	e5962014	 ldr         r2, [r6, #0x14]
  00028	e5923000	 ldr         r3, [r2]
  0002c	e3c33080	 bic         r3, r3, #0x80
  00030	e5823000	 str         r3, [r2]
  00034		 |$LL5@DmaStop|

; 459  : 
; 460  :     // ensure DMA transfer is completed by polling the active bits
; 461  :     //
; 462  :     while ((breakLoop == FALSE) && (DelayCnt != 0))

  00034	e3540000	 cmp         r4, #0
  00038	0a00000b	 beq         |$LN4@DmaStop|

; 463  :         {
; 464  :         ulCCR = INREG32(&pDataInfo->pDmaLcReg->CCR);

  0003c	e5963014	 ldr         r3, [r6, #0x14]
  00040	e5933000	 ldr         r3, [r3]
  00044	e58d3000	 str         r3, [sp]

; 465  :         if ((ulCCR & DMA_CCR_WR_ACTIVE) || (ulCCR & DMA_CCR_RD_ACTIVE))

  00048	e59d3000	 ldr         r3, [sp]
  0004c	e3130b01	 tst         r3, #1, 22
  00050	059d3000	 ldreq       r3, [sp]
  00054	03130c02	 tsteq       r3, #2, 24

; 466  :             {
; 467  :             // fix this infinite loop
; 468  :             //
; 469  :             DelayCnt--;
; 470  :             }
; 471  :         else
; 472  :             {
; 473  :             breakLoop = TRUE;

  00058	03a05001	 moveq       r5, #1
  0005c	12444001	 subne       r4, r4, #1

; 474  :             }
; 475  :         DelayCnt--;

  00060	e2444001	 sub         r4, r4, #1
  00064	e3550000	 cmp         r5, #0
  00068	0afffff1	 beq         |$LL5@DmaStop|
  0006c		 |$LN4@DmaStop|

; 476  :         }
; 477  :     DmaDisableStandby(pDataInfo->hDmaChannel, FALSE);

  0006c	e5960010	 ldr         r0, [r6, #0x10]
  00070	e3a01000	 mov         r1, #0
  00074	eb000000	 bl          DmaDisableStandby

; 478  : }

  00078	e28dd004	 add         sp, sp, #4
  0007c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$M39293|

			 ENDP  ; |DmaStop|

	EXPORT	|DmaStart|

  00000			 AREA	 |.pdata|, PDATA
|$T39303| DCD	|$LN5@DmaStart|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaStart| PROC

; 491  : {

  00000		 |$LN5@DmaStart|
  00000		 |$M39300|

; 492  :     // enable the dma channel
; 493  :     //
; 494  :     SETREG32(&pDataInfo->pDmaLcReg->CCR , DMA_CCR_ENABLE);

  00000	e5902014	 ldr         r2, [r0, #0x14]
  00004	e5923000	 ldr         r3, [r2]
  00008	e3833080	 orr         r3, r3, #0x80
  0000c	e5823000	 str         r3, [r2]

; 495  : }

  00010	e12fff1e	 bx          lr
  00014		 |$M39301|

			 ENDP  ; |DmaStart|

	EXPORT	|DmaGetStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T39313| DCD	|$LN5@DmaGetStat|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaGetStatus| PROC

; 563  : {

  00000		 |$LN5@DmaGetStat|
  00000		 |$M39310|

; 564  :     return INREG32(&pDataInfo->pDmaLcReg->CSR);

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e593000c	 ldr         r0, [r3, #0xC]

; 565  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M39311|

			 ENDP  ; |DmaGetStatus|

	EXPORT	|DmaClearStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T39322| DCD	|$LN5@DmaClearSt|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaClearStatus| PROC

; 579  : {

  00000		 |$LN5@DmaClearSt|
  00000		 |$M39319|

; 580  :     OUTREG32(&pDataInfo->pDmaLcReg->CSR, dwStatus);

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e583100c	 str         r1, [r3, #0xC]

; 581  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M39320|

			 ENDP  ; |DmaClearStatus|

	EXPORT	|?GetConfig@SdmaPxClient@@QAA?AUDmaConfigInfo_t@@XZ| ; SdmaPxClient::GetConfig
	IMPORT	|memcpy|
; File c:\wince600\platform\z2170p\src\drivers\sdmaproxy\sdmapxclient.h

  00000			 AREA	 |.pdata|, PDATA
|$T39334| DCD	|$LN5@GetConfig|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetConfig@SdmaPxClient@@QAA?AUDmaConfigInfo_t@@XZ| PROC ; SdmaPxClient::GetConfig

; 26   :     DmaConfigInfo_t GetConfig(void) { return m_dmaConfigInfoClient; }

  00000		 |$LN5@GetConfig|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39331|
  00004	e1a04001	 mov         r4, r1
  00008	e2801014	 add         r1, r0, #0x14
  0000c	e1a00004	 mov         r0, r4
  00010	e3a02030	 mov         r2, #0x30
  00014	eb000000	 bl          memcpy
  00018	e1a00004	 mov         r0, r4
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M39332|

			 ENDP  ; |?GetConfig@SdmaPxClient@@QAA?AUDmaConfigInfo_t@@XZ|, SdmaPxClient::GetConfig

	EXPORT	|?GetDataLength@SdmaPxClient@@QAAKXZ|	; SdmaPxClient::GetDataLength

  00000			 AREA	 |.pdata|, PDATA
|$T39344| DCD	|$LN5@GetDataLen|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDataLength@SdmaPxClient@@QAAKXZ| PROC ; SdmaPxClient::GetDataLength

; 27   :     DWORD GetDataLength(void) { return m_dwDataLengthClient; }

  00000		 |$LN5@GetDataLen|
  00000		 |$M39341|
  00000	e5900008	 ldr         r0, [r0, #8]
  00004	e12fff1e	 bx          lr
  00008		 |$M39342|

			 ENDP  ; |?GetDataLength@SdmaPxClient@@QAAKXZ|, SdmaPxClient::GetDataLength

	EXPORT	|?GetElementCount@SdmaPxClient@@QAAKXZ|	; SdmaPxClient::GetElementCount

  00000			 AREA	 |.pdata|, PDATA
|$T39354| DCD	|$LN5@GetElement|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetElementCount@SdmaPxClient@@QAAKXZ| PROC ; SdmaPxClient::GetElementCount

; 28   :     DWORD GetElementCount(void) { return m_dwElementCount; }

  00000		 |$LN5@GetElement|
  00000		 |$M39351|
  00000	e590000c	 ldr         r0, [r0, #0xC]
  00004	e12fff1e	 bx          lr
  00008		 |$M39352|

			 ENDP  ; |?GetElementCount@SdmaPxClient@@QAAKXZ|, SdmaPxClient::GetElementCount

	EXPORT	|?GetFrameCount@SdmaPxClient@@QAAKXZ|	; SdmaPxClient::GetFrameCount

  00000			 AREA	 |.pdata|, PDATA
|$T39364| DCD	|$LN5@GetFrameCo|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetFrameCount@SdmaPxClient@@QAAKXZ| PROC ; SdmaPxClient::GetFrameCount

; 29   :     DWORD GetFrameCount(void) { return m_dwFrameCount; }

  00000		 |$LN5@GetFrameCo|
  00000		 |$M39361|
  00000	e5900010	 ldr         r0, [r0, #0x10]
  00004	e12fff1e	 bx          lr
  00008		 |$M39362|

			 ENDP  ; |?GetFrameCount@SdmaPxClient@@QAAKXZ|, SdmaPxClient::GetFrameCount

	EXPORT	|?GetID@SdmaPxClient@@QAAKXZ|		; SdmaPxClient::GetID

  00000			 AREA	 |.pdata|, PDATA
|$T39374| DCD	|$LN5@GetID|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetID@SdmaPxClient@@QAAKXZ| PROC	; SdmaPxClient::GetID

; 31   :     DWORD GetID(void) { return m_dwClientID; }

  00000		 |$LN5@GetID|
  00000		 |$M39371|
  00000	e5900004	 ldr         r0, [r0, #4]
  00004	e12fff1e	 bx          lr
  00008		 |$M39372|

			 ENDP  ; |?GetID@SdmaPxClient@@QAAKXZ|, SdmaPxClient::GetID

	EXPORT	|?ResetID@SdmaPxClient@@QAAXXZ|		; SdmaPxClient::ResetID

  00000			 AREA	 |.pdata|, PDATA
|$T39382| DCD	|$LN5@ResetID|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResetID@SdmaPxClient@@QAAXXZ| PROC	; SdmaPxClient::ResetID

; 32   :     void ResetID(void) { m_dwClientID = (DWORD)-1; return; }

  00000		 |$LN5@ResetID|
  00000		 |$M39379|
  00000	e3e03000	 mvn         r3, #0
  00004	e5803004	 str         r3, [r0, #4]
  00008	e12fff1e	 bx          lr
  0000c		 |$M39380|

			 ENDP  ; |?ResetID@SdmaPxClient@@QAAXXZ|, SdmaPxClient::ResetID

	EXPORT	|?GetNumberOfClients@SdmaPx@@QAAKXZ|	; SdmaPx::GetNumberOfClients
; File c:\wince600\platform\z2170p\src\drivers\sdmaproxy\sdmapx.h

  00000			 AREA	 |.pdata|, PDATA
|$T39392| DCD	|$LN5@GetNumberO|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetNumberOfClients@SdmaPx@@QAAKXZ| PROC ; SdmaPx::GetNumberOfClients

; 45   :     DWORD GetNumberOfClients(void) { return m_dwNumberOfClients; } 

  00000		 |$LN5@GetNumberO|
  00000		 |$M39389|
  00000	e2803902	 add         r3, r0, #2, 18
  00004	e5930030	 ldr         r0, [r3, #0x30]
  00008	e12fff1e	 bx          lr
  0000c		 |$M39390|

			 ENDP  ; |?GetNumberOfClients@SdmaPx@@QAAKXZ|, SdmaPx::GetNumberOfClients

	EXPORT	|?IncNumberOfClients@SdmaPx@@QAAKXZ|	; SdmaPx::IncNumberOfClients
	IMPORT	|InterlockedIncrement|

  00000			 AREA	 |.pdata|, PDATA
|$T39402| DCD	|$LN5@IncNumberO|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IncNumberOfClients@SdmaPx@@QAAKXZ| PROC ; SdmaPx::IncNumberOfClients

; 46   :     DWORD IncNumberOfClients(void) { InterlockedIncrement((LPLONG)&m_dwNumberOfClients); return m_dwNumberOfClients;}

  00000		 |$LN5@IncNumberO|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39399|
  00004	e2804902	 add         r4, r0, #2, 18
  00008	e2840030	 add         r0, r4, #0x30
  0000c	eb000000	 bl          InterlockedIncrement
  00010	e5940030	 ldr         r0, [r4, #0x30]
  00014	e8bd4010	 ldmia       sp!, {r4, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M39400|

			 ENDP  ; |?IncNumberOfClients@SdmaPx@@QAAKXZ|, SdmaPx::IncNumberOfClients

	EXPORT	|?DecNumberOfClients@SdmaPx@@QAAKXZ|	; SdmaPx::DecNumberOfClients
	IMPORT	|InterlockedDecrement|

  00000			 AREA	 |.pdata|, PDATA
|$T39412| DCD	|$LN5@DecNumberO|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DecNumberOfClients@SdmaPx@@QAAKXZ| PROC ; SdmaPx::DecNumberOfClients

; 47   :     DWORD DecNumberOfClients(void) { InterlockedDecrement((LPLONG)&m_dwNumberOfClients); return m_dwNumberOfClients;}

  00000		 |$LN5@DecNumberO|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39409|
  00004	e2804902	 add         r4, r0, #2, 18
  00008	e2840030	 add         r0, r4, #0x30
  0000c	eb000000	 bl          InterlockedDecrement
  00010	e5940030	 ldr         r0, [r4, #0x30]
  00014	e8bd4010	 ldmia       sp!, {r4, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M39410|

			 ENDP  ; |?DecNumberOfClients@SdmaPx@@QAAKXZ|, SdmaPx::DecNumberOfClients

	EXPORT	|?FlushCache@@YAXPAX0HI@Z|		; FlushCache
	IMPORT	|CacheRangeFlush|
; File c:\wince600\platform\z2170p\src\drivers\sdmaproxy\sdmapx.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T39422| DCD	|$LN7@FlushCache|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FlushCache@@YAXPAX0HI@Z| PROC	; FlushCache

; 34   : {

  00000		 |$LN7@FlushCache|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M39419|

; 35   : 	UNREFERENCED_PARAMETER(size);
; 36   : 	UNREFERENCED_PARAMETER(pDst);
; 37   : 	UNREFERENCED_PARAMETER(pSrc);
; 38   : 
; 39   :     CacheRangeFlush(NULL, 0, 
; 40   :         ffCache == SOURCE_CACHED ? CACHE_SYNC_WRITEBACK : CACHE_SYNC_DISCARD
; 41   :         );

  00004	e3530001	 cmp         r3, #1
  00008	03a02004	 moveq       r2, #4
  0000c	13a02001	 movne       r2, #1
  00010	e3a01000	 mov         r1, #0
  00014	e3a00000	 mov         r0, #0
  00018	eb000000	 bl          CacheRangeFlush

; 42   : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M39420|

			 ENDP  ; |?FlushCache@@YAXPAX0HI@Z|, FlushCache

	EXPORT	|??0SdmaPx@@QAA@XZ|			; SdmaPx::SdmaPx
	EXPORT	|??_7SdmaPx@@6B@| [ DATA ]		; SdmaPx::`vftable'
	IMPORT	|??_ESdmaPx@@UAAPAXI@Z|, WEAK |??_GSdmaPx@@UAAPAXI@Z| ; SdmaPx::`vector deleting destructor', SdmaPx::`scalar deleting destructor'

  00000			 AREA	 |.pdata|, PDATA
|$T39432| DCD	|$LN5@SdmaPx|
	DCD	0x40001301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7SdmaPx@@6B@| DCD |??_ESdmaPx@@UAAPAXI@Z|		; SdmaPx::`vftable'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0SdmaPx@@QAA@XZ| PROC		; SdmaPx::SdmaPx

; 45   : {

  00000		 |$LN5@SdmaPx|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39429|
  00004	e59f303c	 ldr         r3, [pc, #0x3C]

; 46   :     m_hEvent = NULL;

  00008	e3a04000	 mov         r4, #0
  0000c	e3e0eb0d	 mvn         lr, #0xD, 22
  00010	e8800018	 stmia       r0, {r3, r4}

; 47   :     m_hDmaChannel = NULL;
; 48   :     
; 49   :     // Reset SDMA internal settings.   
; 50   :     //memset(&m_DmaSettings, 0, sizeof(DmaConfigInfo_t));    
; 51   :     //m_DmaSettings.dmaPrio       = DMA_PRIORITY;
; 52   :     //m_DmaSettings.interrupts    = DMA_CICR_BLOCK_IE;
; 53   :     
; 54   :     // Reset SDMA user config.
; 55   :     //memset(&m_dmaConfig, 0, sizeof(SdmaConfig_t));
; 56   :         
; 57   :     m_pageShift = UserKInfo[KINX_PFN_SHIFT];    

  00014	e22e30f7	 eor         r3, lr, #0xF7
  00018	e5804008	 str         r4, [r0, #8]
  0001c	e5932000	 ldr         r2, [r3]
  00020	e2801902	 add         r1, r0, #2, 18

; 58   :     m_pageSize = UserKInfo[KINX_PAGESIZE];

  00024	e22e30fb	 eor         r3, lr, #0xFB
  00028	e5812024	 str         r2, [r1, #0x24]
  0002c	e5932000	 ldr         r2, [r3]

; 59   :     m_pageMask = m_pageSize - 1;
; 60   :     
; 61   :     // Reset number of clients
; 62   :     m_dwNumberOfClients = 0;
; 63   :     
; 64   :     m_SdmaPxClient = NULL;

  00030	e5814034	 str         r4, [r1, #0x34]
  00034	e2423001	 sub         r3, r2, #1
  00038	e281c028	 add         r12, r1, #0x28
  0003c	e88c001c	 stmia       r12, {r2 - r4}

; 65   : }

  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN6@SdmaPx|
  00048		 |$LN7@SdmaPx|
  00048	00000000	 DCD         |??_7SdmaPx@@6B@|
  0004c		 |$M39430|

			 ENDP  ; |??0SdmaPx@@QAA@XZ|, SdmaPx::SdmaPx

	EXPORT	|??1SdmaPx@@UAA@XZ|			; SdmaPx::~SdmaPx
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T39450| DCD	|$LN10@SdmaPx@2|
	DCD	0x40001701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1SdmaPx@@UAA@XZ| PROC		; SdmaPx::~SdmaPx

; 68   : {

  00000		 |$LN10@SdmaPx@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M39447|

; 69   :     if(m_SdmaPxClient != NULL)

  00004	e2803902	 add         r3, r0, #2, 18
  00008	e5933034	 ldr         r3, [r3, #0x34]
  0000c	e59f2044	 ldr         r2, [pc, #0x44]
  00010	e1b0e003	 movs        lr, r3
  00014	e5802000	 str         r2, [r0]
  00018	0a00000c	 beq         |$LN5@SdmaPx@2|

; 70   :     {
; 71   :         delete [] m_SdmaPxClient;

  0001c	e51e3004	 ldr         r3, [lr, #-4]
  00020	e3530000	 cmp         r3, #0
  00024	0a000007	 beq         |$LN4@SdmaPx@2|
  00028	e59e3000	 ldr         r3, [lr]
  0002c	e3a01003	 mov         r1, #3
  00030	e1a0000e	 mov         r0, lr
  00034	e5933000	 ldr         r3, [r3]
  00038	e1a0e00f	 mov         lr, pc
  0003c	e12fff13	 bx          r3

; 72   :     }
; 73   : }

  00040	e49de004	 ldr         lr, [sp], #4
  00044	e12fff1e	 bx          lr
  00048		 |$LN4@SdmaPx@2|

; 70   :     {
; 71   :         delete [] m_SdmaPxClient;

  00048	e24e0004	 sub         r0, lr, #4
  0004c	eb000000	 bl          |??3@YAXPAX@Z|
  00050		 |$LN5@SdmaPx@2|

; 72   :     }
; 73   : }

  00050	e49de004	 ldr         lr, [sp], #4
  00054	e12fff1e	 bx          lr
  00058		 |$LN11@SdmaPx@2|
  00058		 |$LN12@SdmaPx@2|
  00058	00000000	 DCD         |??_7SdmaPx@@6B@|
  0005c		 |$M39448|

			 ENDP  ; |??1SdmaPx@@UAA@XZ|, SdmaPx::~SdmaPx

	EXPORT	|??_H@YAXPAXIHP6APAX0@Z@Z|		; `vector constructor iterator'

  00000			 AREA	 |.pdata|, PDATA
|$T39466| DCD	|$LN9@vector|
	DCD	0x40000e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_H@YAXPAXIHP6APAX0@Z@Z| PROC	; `vector constructor iterator'
  00000		 |$LN9@vector|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M39463|
  00004	e1a06003	 mov         r6, r3
  00008	e1a07001	 mov         r7, r1
  0000c	e1a04000	 mov         r4, r0
  00010	e2525001	 subs        r5, r2, #1
  00014	4a000005	 bmi         |$LN1@vector|
  00018		 |$LL2@vector|
  00018	e1a00004	 mov         r0, r4
  0001c	e1a0e00f	 mov         lr, pc
  00020	e12fff16	 bx          r6
  00024	e0844007	 add         r4, r4, r7
  00028	e2555001	 subs        r5, r5, #1
  0002c	5afffff9	 bpl         |$LL2@vector|
  00030		 |$LN1@vector|
  00030	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M39464|

			 ENDP  ; |??_H@YAXPAXIHP6APAX0@Z@Z|, `vector constructor iterator'

	EXPORT	|??_I@YAXPAXIHP6AX0@Z@Z|		; `vector destructor iterator'

  00000			 AREA	 |.pdata|, PDATA
|$T39481| DCD	|$LN9@vector@2|
	DCD	0x40000e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_I@YAXPAXIHP6AX0@Z@Z| PROC		; `vector destructor iterator'
  00000		 |$LN9@vector@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M39478|
  00004	e1a07003	 mov         r7, r3
  00008	e1a06001	 mov         r6, r1
  0000c	e0240296	 mla         r4, r6, r2, r0
  00010	e2525001	 subs        r5, r2, #1
  00014	4a000005	 bmi         |$LN1@vector@2|
  00018		 |$LL2@vector@2|
  00018	e0444006	 sub         r4, r4, r6
  0001c	e1a00004	 mov         r0, r4
  00020	e1a0e00f	 mov         lr, pc
  00024	e12fff17	 bx          r7
  00028	e2555001	 subs        r5, r5, #1
  0002c	5afffff9	 bpl         |$LL2@vector@2|
  00030		 |$LN1@vector@2|
  00030	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M39479|

			 ENDP  ; |??_I@YAXPAXIHP6AX0@Z@Z|, `vector destructor iterator'

	EXPORT	|?AddSdmaPxClient@SdmaPx@@QAAHK@Z|	; SdmaPx::AddSdmaPxClient
	IMPORT	|?Init@SdmaPxClient@@QAAHK@Z|		; SdmaPxClient::Init
; File c:\wince600\platform\z2170p\src\drivers\sdmaproxy\sdmapx.h

  00000			 AREA	 |.pdata|, PDATA
|$T39501| DCD	|$LN11@AddSdmaPxC|
	DCD	0x40001201
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdmaproxy\sdmapx.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AddSdmaPxClient@SdmaPx@@QAAHK@Z| PROC ; SdmaPx::AddSdmaPxClient

; 114  : {

  00000		 |$LN11@AddSdmaPxC|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M39498|
  00004	e1a06001	 mov         r6, r1

; 115  :     BOOL retVal = TRUE;
; 116  :     DWORD dwClientIndex = GetNumberOfClients();

  00008	e2803902	 add         r3, r0, #2, 18
  0000c	e5935030	 ldr         r5, [r3, #0x30]

; 117  :     
; 118  :     if(dwClientIndex > MAX_SDMAPX_CLIENTS)

  00010	e3550010	 cmp         r5, #0x10

; 119  :     {
; 120  :         retVal = FALSE;

  00014	83a00000	 movhi       r0, #0

; 128  :     }
; 129  :     
; 130  :     return retVal;
; 131  : }

  00018	88bd4070	 ldmhiia     sp!, {r4 - r6, lr}
  0001c	812fff1e	 bxhi        lr

; 121  :     }
; 122  :     else
; 123  :     {
; 124  :         // Max number of authorizes clients hasn't yet been reached
; 125  :         // Init specific client...
; 126  :         IncNumberOfClients();

  00020	e2804902	 add         r4, r0, #2, 18
  00024	e2840030	 add         r0, r4, #0x30
  00028	eb000000	 bl          InterlockedIncrement

; 127  :         retVal = m_SdmaPxClient[dwClientIndex].Init(dwClientID);

  0002c	e5942034	 ldr         r2, [r4, #0x34]
  00030	e0853185	 add         r3, r5, r5, lsl #3
  00034	e1a01006	 mov         r1, r6
  00038	e0820183	 add         r0, r2, r3, lsl #3
  0003c	eb000000	 bl          |?Init@SdmaPxClient@@QAAHK@Z|

; 128  :     }
; 129  :     
; 130  :     return retVal;
; 131  : }

  00040	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M39499|

			 ENDP  ; |?AddSdmaPxClient@SdmaPx@@QAAHK@Z|, SdmaPx::AddSdmaPxClient

	EXPORT	|?GetSdmaPxClientIdx@SdmaPx@@QAAHK@Z|	; SdmaPx::GetSdmaPxClientIdx
; File c:\wince600\platform\z2170p\src\drivers\sdmaproxy\sdmapxclient.h

  00000			 AREA	 |.pdata|, PDATA
|$T39521| DCD	|$LN14@GetSdmaPxC|
	DCD	0x40001101
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdmaproxy\sdmapx.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetSdmaPxClientIdx@SdmaPx@@QAAHK@Z| PROC ; SdmaPx::GetSdmaPxClientIdx

; 134  : {

  00000		 |$LN14@GetSdmaPxC|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M39518|

; 135  :     INT32 retValIdx = -1; // ERROR

  00004	e2803902	 add         r3, r0, #2, 18
  00008	e593e034	 ldr         lr, [r3, #0x34]
  0000c	e3e00000	 mvn         r0, #0

; 136  :     
; 137  :     for(int i=0; i<MAX_SDMAPX_CLIENTS; i++)

  00010	e3a02000	 mov         r2, #0
  00014		 |$LL4@GetSdmaPxC|

; 138  :     {
; 139  :         if(m_SdmaPxClient[i].GetID() == dwClientID)

  00014	e59e3004	 ldr         r3, [lr, #4]
  00018	e1530001	 cmp         r3, r1
  0001c	0a000005	 beq         |$LN10@GetSdmaPxC|
  00020	e2822001	 add         r2, r2, #1
  00024	e3520010	 cmp         r2, #0x10
  00028	e28ee048	 add         lr, lr, #0x48
  0002c	bafffff8	 blt         |$LL4@GetSdmaPxC|

; 143  :             break;
; 144  :         }
; 145  :     }
; 146  :     
; 147  :     return retValIdx;
; 148  : }

  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$LN10@GetSdmaPxC|

; 140  :         {
; 141  :             // this is the index
; 142  :             retValIdx = i;

  00038	e1a00002	 mov         r0, r2

; 143  :             break;
; 144  :         }
; 145  :     }
; 146  :     
; 147  :     return retValIdx;
; 148  : }

  0003c	e49de004	 ldr         lr, [sp], #4
  00040	e12fff1e	 bx          lr
  00044		 |$M39519|

			 ENDP  ; |?GetSdmaPxClientIdx@SdmaPx@@QAAHK@Z|, SdmaPx::GetSdmaPxClientIdx

	EXPORT	|?RemoveSdmaPxClient@SdmaPx@@QAAHK@Z|	; SdmaPx::RemoveSdmaPxClient
; File c:\wince600\platform\z2170p\src\drivers\sdmaproxy\sdmapx.h

  00000			 AREA	 |.pdata|, PDATA
|$T39548| DCD	|$LN18@RemoveSdma|
	DCD	0x40001a01
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdmaproxy\sdmapx.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RemoveSdmaPxClient@SdmaPx@@QAAHK@Z| PROC ; SdmaPx::RemoveSdmaPxClient

; 151  : {

  00000		 |$LN18@RemoveSdma|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M39545|
  00004	e1a04000	 mov         r4, r0

; 152  :     BOOL retVal = FALSE;
; 153  :     
; 154  :     for(int i=0; i<MAX_SDMAPX_CLIENTS; i++)

  00008	e2843902	 add         r3, r4, #2, 18
  0000c	e5935034	 ldr         r5, [r3, #0x34]
  00010	e3a00000	 mov         r0, #0
  00014	e3a02000	 mov         r2, #0
  00018	e1a0e005	 mov         lr, r5
  0001c		 |$LL4@RemoveSdma|

; 155  :     {
; 156  :         if(m_SdmaPxClient[i].GetID() == dwClientID)

  0001c	e59e3004	 ldr         r3, [lr, #4]
  00020	e1530001	 cmp         r3, r1
  00024	0a000005	 beq         |$LN14@RemoveSdma|
  00028	e2822001	 add         r2, r2, #1
  0002c	e3520010	 cmp         r2, #0x10
  00030	e28ee048	 add         lr, lr, #0x48
  00034	bafffff8	 blt         |$LL4@RemoveSdma|

; 162  :             break;
; 163  :         }
; 164  :     }
; 165  :     
; 166  :     return retVal;
; 167  : }

  00038	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN14@RemoveSdma|

; 157  :         {
; 158  :             // this is the index            
; 159  :             m_SdmaPxClient[i].ResetID();

  00040	e0823182	 add         r3, r2, r2, lsl #3

; 160  :             DecNumberOfClients();

  00044	e2842902	 add         r2, r4, #2, 18
  00048	e0853183	 add         r3, r5, r3, lsl #3
  0004c	e3e01000	 mvn         r1, #0
  00050	e2820030	 add         r0, r2, #0x30
  00054	e5831004	 str         r1, [r3, #4]
  00058	eb000000	 bl          InterlockedDecrement

; 161  :             retVal = TRUE;

  0005c	e3a00001	 mov         r0, #1

; 162  :             break;
; 163  :         }
; 164  :     }
; 165  :     
; 166  :     return retVal;
; 167  : }

  00060	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M39546|

			 ENDP  ; |?RemoveSdmaPxClient@SdmaPx@@QAAHK@Z|, SdmaPx::RemoveSdmaPxClient

	EXPORT	|?Configure@SdmaPx@@QAAHPAUSdmaConfig_t@@K@Z| ; SdmaPx::Configure
	IMPORT	|?StoreConfig@SdmaPxClient@@QAAHPAUDmaConfigInfo_t@@KKK@Z| ; SdmaPxClient::StoreConfig

  00000			 AREA	 |.pdata|, PDATA
|$T39563| DCD	|$LN10@Configure|
	DCD	0x40003e02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Configure@SdmaPx@@QAAHPAUSdmaConfig_t@@K@Z| PROC ; SdmaPx::Configure

; 171  : {

  00000		 |$LN10@Configure|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd03c	 sub         sp, sp, #0x3C
  00008		 |$M39560|
  00008	e1a04001	 mov         r4, r1
  0000c	e58d4008	 str         r4, [sp, #8]
  00010	e58d2004	 str         r2, [sp, #4]
  00014	e1a06000	 mov         r6, r0

; 172  :     DWORD dwDataLength = 0;
; 173  :     BOOL retVal = TRUE;
; 174  :     DmaConfigInfo_t dmaSettings;
; 175  :        
; 176  :     // Check if length is < 2^24 as the count elements can only be a 24bits value. See TRM Table9-43 for OMAP3.
; 177  :     // Increase the allowed size by 1, 2 or 4 times as the DMA copy uses 8bits, 16bits or 32bits elements.
; 178  :     if((pdmaDataConfig->elementCount) > (DWORD)(0x01000000 << pdmaDataConfig->elementWidth))

  00018	e5945000	 ldr         r5, [r4]
  0001c	e5943008	 ldr         r3, [r4, #8]
  00020	e3a02401	 mov         r2, #1, 8
  00024	e1530512	 cmp         r3, r2, lsl r5

; 179  :     {
; 180  :         retVal = FALSE;

  00028	8a000002	 bhi         |$LN7@Configure|

; 181  :         goto CleanUp;
; 182  :     }
; 183  :     // Same verification here for the frame count that is a 16bits value
; 184  :     if((pdmaDataConfig->frameCount) > 0x00010000)

  0002c	e594300c	 ldr         r3, [r4, #0xC]
  00030	e3530801	 cmp         r3, #1, 16
  00034	9a000001	 bls         |$LN2@Configure|
  00038		 |$LN7@Configure|

; 185  :     {
; 186  :         retVal = FALSE;

  00038	e3a03000	 mov         r3, #0

; 215  : 
; 216  : CleanUp:    

  0003c	ea000029	 b           |$CleanUp$39037|
  00040		 |$LN2@Configure|

; 187  :         goto CleanUp;
; 188  :     }
; 189  :     
; 190  :     // Reset DMA settings structure
; 191  :     memset(&dmaSettings, 0, sizeof(DmaConfigInfo_t));

  00040	e3a02030	 mov         r2, #0x30
  00044	e3a01000	 mov         r1, #0
  00048	e28d000c	 add         r0, sp, #0xC
  0004c	eb000000	 bl          memset

; 192  :     
; 193  :     // Adapt user struct to internal API
; 194  :     dmaSettings.elemSize      = pdmaDataConfig->elementWidth;
; 195  :     dmaSettings.synchMode     = pdmaDataConfig->syncMode;
; 196  :     dmaSettings.srcElemIndex  = pdmaDataConfig->srcElementIdx;
; 197  :     dmaSettings.srcFrameIndex = pdmaDataConfig->srcFrameIdx;
; 198  :     dmaSettings.srcAddrMode   = pdmaDataConfig->srcAddrMode;
; 199  :     dmaSettings.dstElemIndex  = pdmaDataConfig->dstElementIdx;
; 200  :     dmaSettings.dstFrameIndex = pdmaDataConfig->dstFrameIdx;
; 201  :     dmaSettings.dstAddrMode   = pdmaDataConfig->dstAddrMode;
; 202  :     dmaSettings.dmaPrio       = DMA_PRIORITY;
; 203  :     dmaSettings.interrupts    = DMA_CICR_BLOCK_IE;
; 204  :     
; 205  :     // Data length
; 206  :     dwDataLength = ( (pdmaDataConfig->elementCount ) * (pdmaDataConfig->frameCount) );
; 207  :     
; 208  :     //  Enable bursting for improved memory performance
; 209  :     dmaSettings.elemSize |= DMA_CSDP_SRC_BURST_64BYTES_16x32_8x64 | DMA_CSDP_SRC_PACKED;
; 210  :     dmaSettings.elemSize |= DMA_CSDP_DST_BURST_64BYTES_16x32_8x64 | DMA_CSDP_DST_PACKED;
; 211  :     
; 212  :     // Configure dma for data copy
; 213  :     //retVal = DmaConfigure(m_hDmaChannel, &m_DmaSettings, 0, &m_dmaInfo); 
; 214  :     m_SdmaPxClient[dwClientIdx].StoreConfig(&dmaSettings, dwDataLength, (pdmaDataConfig->elementCount ), (pdmaDataConfig->frameCount));

  00050	e59d3004	 ldr         r3, [sp, #4]
  00054	e2862902	 add         r2, r6, #2, 18
  00058	e5926034	 ldr         r6, [r2, #0x34]
  0005c	e594000c	 ldr         r0, [r4, #0xC]
  00060	e5941008	 ldr         r1, [r4, #8]
  00064	e3a0ece1	 mov         lr, #0xE1, 24
  00068	e38e20c0	 orr         r2, lr, #0xC0
  0006c	e1855002	 orr         r5, r5, r2
  00070	e083e183	 add         lr, r3, r3, lsl #3
  00074	e0020091	 mul         r2, r1, r0
  00078	e086018e	 add         r0, r6, lr, lsl #3
  0007c	e59d6008	 ldr         r6, [sp, #8]
  00080	e5947004	 ldr         r7, [r4, #4]
  00084	e5948010	 ldr         r8, [r4, #0x10]
  00088	e596e020	 ldr         lr, [r6, #0x20]
  0008c	e5949014	 ldr         r9, [r4, #0x14]
  00090	e594a018	 ldr         r10, [r4, #0x18]
  00094	e58de020	 str         lr, [sp, #0x20]
  00098	e596e024	 ldr         lr, [r6, #0x24]
  0009c	e594b01c	 ldr         r11, [r4, #0x1C]
  000a0	e3a04301	 mov         r4, #1, 6
  000a4	e58de024	 str         lr, [sp, #0x24]
  000a8	e3a0e020	 mov         lr, #0x20
  000ac	e58de034	 str         lr, [sp, #0x34]
  000b0	e596e00c	 ldr         lr, [r6, #0xC]
  000b4	e3844040	 orr         r4, r4, #0x40
  000b8	e1a03001	 mov         r3, r1
  000bc	e28d100c	 add         r1, sp, #0xC
  000c0	e58de000	 str         lr, [sp]
  000c4	e58d7030	 str         r7, [sp, #0x30]
  000c8	e58d8010	 str         r8, [sp, #0x10]
  000cc	e58d9014	 str         r9, [sp, #0x14]
  000d0	e58da018	 str         r10, [sp, #0x18]
  000d4	e58db01c	 str         r11, [sp, #0x1C]
  000d8	e58d4028	 str         r4, [sp, #0x28]
  000dc	e58d500c	 str         r5, [sp, #0xC]
  000e0	eb000000	 bl          |?StoreConfig@SdmaPxClient@@QAAHPAUDmaConfigInfo_t@@KKK@Z|
  000e4	e3a03001	 mov         r3, #1
  000e8		 |$CleanUp$39037|

; 217  :     return retVal;
; 218  : }

  000e8	e1a00003	 mov         r0, r3
  000ec	e28dd03c	 add         sp, sp, #0x3C
  000f0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000f4	e12fff1e	 bx          lr
  000f8		 |$M39561|

			 ENDP  ; |?Configure@SdmaPx@@QAAHPAUSdmaConfig_t@@K@Z|, SdmaPx::Configure

	EXPORT	|?CleanUp@SdmaPx@@QAAHXZ|		; SdmaPx::CleanUp
	IMPORT	|CloseHandle|
	IMPORT	|DmaFreeChannel|
	IMPORT	|DmaEnableInterrupts|

  00000			 AREA	 |.pdata|, PDATA
|$T39573| DCD	|$LN7@CleanUp|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CleanUp@SdmaPx@@QAAHXZ| PROC		; SdmaPx::CleanUp

; 221  : {

  00000		 |$LN7@CleanUp|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39570|
  00004	e1a04000	 mov         r4, r0

; 222  :     BOOL retVal = TRUE;
; 223  :     
; 224  :     DmaEnableInterrupts(m_hDmaChannel, NULL);

  00008	e5940008	 ldr         r0, [r4, #8]
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          DmaEnableInterrupts

; 225  :     
; 226  :     if (m_hDmaChannel != NULL) DmaFreeChannel(m_hDmaChannel);

  00014	e5943008	 ldr         r3, [r4, #8]
  00018	e3530000	 cmp         r3, #0
  0001c	11a00003	 movne       r0, r3
  00020	1b000000	 blne        DmaFreeChannel

; 227  :     if (m_hEvent != NULL) CloseHandle(m_hEvent);

  00024	e5943004	 ldr         r3, [r4, #4]
  00028	e3530000	 cmp         r3, #0
  0002c	11a00003	 movne       r0, r3
  00030	1b000000	 blne        CloseHandle

; 228  :     
; 229  :     return retVal;

  00034	e3a00001	 mov         r0, #1

; 230  : }

  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M39571|

			 ENDP  ; |?CleanUp@SdmaPx@@QAAHXZ|, SdmaPx::CleanUp

	EXPORT	|?Copy@SdmaPx@@QAAKPAX0K@Z|		; SdmaPx::Copy
	EXPORT	|??_C@_1GA@KHHDMFOD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@HNPKEDDD@?$AAU?$AAn?$AAe?$AAx?$AAp?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAc?$AAa?$AAu?$AAs?$AAe?$AA?5?$AAo?$AAf?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@HPAKIBPN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAd?$AAi?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@HCIPLKPO@?$AAL?$AAo?$AAc?$AAk?$AAP?$AAa?$AAg?$AAe?$AAs?$AA?5?$AA?$CC?$AAd?$AAe?$AAs?$AAt?$AA?$CC?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?5?$AA?$CI?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@DCCALMEH@?$AAL?$AAo?$AAc?$AAk?$AAP?$AAa?$AAg?$AAe?$AAs?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AA?$CC?$AAs?$AAr?$AAc?$AA?$CC?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?5?$AA?$CI?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@DKEMJOKK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAZ?$AA2?$AA1?$AA7?$AA0?$AAP?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@IMKKFLKF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAf@| [ DATA ] ; `string'
	IMPORT	|UnlockPages|
	IMPORT	|DmaInterruptDone|
	IMPORT	|WaitForSingleObject|
	IMPORT	|GetLastError|
	IMPORT	|LockPages|
	IMPORT	|NKDbgPrintfW|
; File c:\wince600\platform\common\src\soc\common_ti_v1\omap3530\inc\dma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T39664| DCD	|$LN64@Copy|
	DCD	0x4000ac02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@KHHDMFOD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "u", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "d", 0x0, "m", 0x0, "a", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@HNPKEDDD@?$AAU?$AAn?$AAe?$AAx?$AAp?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAc?$AAa?$AAu?$AAs?$AAe?$AA?5?$AAo?$AAf?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "n", 0x0, "e", 0x0, "x", 0x0, "p", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "u", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "o", 0x0, "f"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@HPAKIBPN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAd?$AAi?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "d", 0x0, "i", 0x0, "d", 0x0, "n", 0x0, "'", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@HCIPLKPO@?$AAL?$AAo?$AAc?$AAk?$AAP?$AAa?$AAg?$AAe?$AAs?$AA?5?$AA?$CC?$AAd?$AAe?$AAs?$AAt?$AA?$CC?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?5?$AA?$CI?$AAe@| DCB "L"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "P", 0x0, "a", 0x0, "g"
	DCB	0x0, "e", 0x0, "s", 0x0, " ", 0x0, """", 0x0, "d", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, """", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, " ", 0x0, "("
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@DCCALMEH@?$AAL?$AAo?$AAc?$AAk?$AAP?$AAa?$AAg?$AAe?$AAs?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AA?$CC?$AAs?$AAr?$AAc?$AA?$CC?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?5?$AA?$CI?$AAe?$AAr@| DCB "L"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "P", 0x0, "a", 0x0, "g"
	DCB	0x0, "e", 0x0, "s", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, " ", 0x0, """", 0x0, "s", 0x0, "r", 0x0, "c"
	DCB	0x0, """", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, ".", 0x0, " ", 0x0, "(", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "d", 0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@DKEMJOKK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAZ?$AA2?$AA1?$AA7?$AA0?$AAP?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "Z", 0x0, "2", 0x0, "1", 0x0, "7"
	DCB	0x0, "0", 0x0, "P", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "D", 0x0, "R", 0x0, "I", 0x0, "V", 0x0, "E"
	DCB	0x0, "R", 0x0, "S", 0x0, "\\", 0x0, "S", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "P", 0x0, "R", 0x0, "O", 0x0, "X", 0x0, "Y"
	DCB	0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "s", 0x0, "d", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, "x", 0x0, ".", 0x0, "c", 0x0, "p"
	DCB	0x0, "p", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@IMKKFLKF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAf@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r"
	DCB	0x0, "e", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c", 0x0, "l"
	DCB	0x0, "i", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdmaproxy\sdmapx.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Copy@SdmaPx@@QAAKPAX0K@Z| PROC	; SdmaPx::Copy

; 241  : {

  00000		 |$LN64@Copy|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M39661|
  00008	e1a08002	 mov         r8, r2
  0000c	e1a09001	 mov         r9, r1
  00010	e1a06000	 mov         r6, r0

; 242  :     DWORD dwRet = 0;    
; 243  :     DWORD dwCause, dwStatus;   
; 244  :     DWORD paSrc, paDst;
; 245  :     BYTE ffCached = 0; 
; 246  :     DmaConfigInfo_t dmaSettings = m_SdmaPxClient[dwClientIdx].GetConfig();

  00014	e2864902	 add         r4, r6, #2, 18
  00018	e594e034	 ldr         lr, [r4, #0x34]
  0001c	e0835183	 add         r5, r3, r3, lsl #3
  00020	e28d0004	 add         r0, sp, #4
  00024	e08e3185	 add         r3, lr, r5, lsl #3
  00028	e2831014	 add         r1, r3, #0x14
  0002c	e3a02030	 mov         r2, #0x30
  00030	e3a0a000	 mov         r10, #0
  00034	e3a07000	 mov         r7, #0
  00038	eb000000	 bl          memcpy

; 247  :     DWORD dwDataLength = m_SdmaPxClient[dwClientIdx].GetDataLength();

  0003c	e5943034	 ldr         r3, [r4, #0x34]

; 248  :     DWORD dwElementCount = m_SdmaPxClient[dwClientIdx].GetElementCount();
; 249  :     DWORD dwFrameCount = m_SdmaPxClient[dwClientIdx].GetFrameCount();
; 250  : 
; 251  :     ASSERTMSG(L"Client must be configured before Copy I/O control is called !!!\n", m_SdmaPxClient[dwClientIdx].IsClientConfigured());
; 252  :     
; 253  :     // Configure SDMA for specific client
; 254  :     // Need to call this first for length
; 255  :     // memset() on DmaConfigInfo_t not needed as done in the SdmaPxClient::Init() method.
; 256  :     // m_SdmaPxClient[dwClientIdx].GetConfig(&dmaSettings, &dwDataLength);
; 257  :     if(DmaConfigure(m_hDmaChannel, &dmaSettings, 0, &m_dmaInfo) != TRUE)

  00040	e5960008	 ldr         r0, [r6, #8]
  00044	e3a02000	 mov         r2, #0
  00048	e0833185	 add         r3, r3, r5, lsl #3
  0004c	e5934008	 ldr         r4, [r3, #8]
  00050	e593b00c	 ldr         r11, [r3, #0xC]
  00054	e5933010	 ldr         r3, [r3, #0x10]
  00058	e28d1004	 add         r1, sp, #4
  0005c	e58d3000	 str         r3, [sp]
  00060	e286300c	 add         r3, r6, #0xC
  00064	eb000000	 bl          DmaConfigure
  00068	e3500001	 cmp         r0, #1
  0006c	0a000007	 beq         |$LN15@Copy|

; 258  :     {
; 259  :         ERRORMSG(ZONE_ERROR, (TEXT("ERROR! Unable to configure DMA for client\r\n")));    

  00070	e59f1220	 ldr         r1, [pc, #0x220]
  00074	e59f0218	 ldr         r0, [pc, #0x218]
  00078	e3a03c01	 mov         r3, #1, 24
  0007c	e3832003	 orr         r2, r3, #3
  00080	eb000000	 bl          NKDbgPrintfW
  00084	e59f0220	 ldr         r0, [pc, #0x220]
  00088	eb000000	 bl          NKDbgPrintfW

; 260  :         goto cleanUp;

  0008c	ea000075	 b           |$cleanUp$39070|
  00090		 |$LN15@Copy|

; 261  :     }
; 262  :     
; 263  : 	// flush cache if necessary   
; 264  :     if (ISUNCACHEDADDRESS(pSource) == FALSE)

  00090	e3190202	 tst         r9, #2, 4

; 265  :     {
; 266  :         ffCached |= SOURCE_CACHED;

  00094	03a07001	 moveq       r7, #1

; 267  :     }    
; 268  :     if (ISUNCACHEDADDRESS(pDestination) == FALSE)

  00098	e3180202	 tst         r8, #2, 4

; 269  :     {
; 270  :         ffCached |= DESTINATION_CACHED;

  0009c	03877002	 orreq       r7, r7, #2

; 271  :     } 
; 272  :     if (ffCached & (SOURCE_CACHED | DESTINATION_CACHED))

  000a0	e3170003	 tst         r7, #3
  000a4	0a000005	 beq         |$LN42@Copy|

; 273  :     {
; 274  :         FlushCache(pSource, pDestination, dwDataLength, ffCached);

  000a8	e3570001	 cmp         r7, #1
  000ac	03a02004	 moveq       r2, #4
  000b0	13a02001	 movne       r2, #1
  000b4	e3a01000	 mov         r1, #0
  000b8	e3a00000	 mov         r0, #0
  000bc	eb000000	 bl          CacheRangeFlush
  000c0		 |$LN42@Copy|

; 275  :     }
; 276  : 
; 277  :     // Retrieve base physical address of buffer to be copied and READ lock the pages on the length.
; 278  :     if(LockPages(
; 279  :                     (LPVOID)pSource,
; 280  :                     (DWORD)dwDataLength,
; 281  :                     m_rgPFNsrc,
; 282  :                     LOCKFLAG_READ)  == FALSE)

  000c0	e3a03004	 mov         r3, #4
  000c4	e2862024	 add         r2, r6, #0x24
  000c8	e1a01004	 mov         r1, r4
  000cc	e1a00009	 mov         r0, r9
  000d0	eb000000	 bl          LockPages
  000d4	e3500000	 cmp         r0, #0
  000d8	1a000008	 bne         |$LN10@Copy|

; 283  :     {
; 284  :         ERRORMSG(ZONE_ERROR, (TEXT("LockPages call \"src\" failed. (error code=%d)\r\n"), GetLastError()));

  000dc	e59f11b4	 ldr         r1, [pc, #0x1B4]
  000e0	e59f01ac	 ldr         r0, [pc, #0x1AC]
  000e4	e3a02f47	 mov         r2, #0x47, 30
  000e8	eb000000	 bl          NKDbgPrintfW
  000ec	eb000000	 bl          GetLastError
  000f0	e1a01000	 mov         r1, r0
  000f4	e59f01ac	 ldr         r0, [pc, #0x1AC]

; 298  :      {
; 299  :         ERRORMSG(ZONE_ERROR, (TEXT("LockPages \"dest\" call failed. (error code=%d)\r\n"), GetLastError()));

  000f8	eb000000	 bl          NKDbgPrintfW

; 364  : cleanUp:

  000fc	ea000059	 b           |$cleanUp$39070|
  00100		 |$LN10@Copy|

; 285  :         goto cleanUp;
; 286  :     }
; 287  :     // Not necessary to do the page shift on ARM platform as always 0. (ref. MSDN)
; 288  :     // paSrc = (m_rgPFNsrc[0] << m_pageShift) + ((DWORD)pSource & m_pageMask);
; 289  :     paSrc = m_rgPFNsrc[0] + ((DWORD)pSource & m_pageMask);

  00100	e2863902	 add         r3, r6, #2, 18
  00104	e593302c	 ldr         r3, [r3, #0x2C]
  00108	e5962024	 ldr         r2, [r6, #0x24]

; 290  :     
; 291  :     
; 292  :     // Retrieve base physical address of destination buffer and WRITE lock the pages on the length.
; 293  :     if(LockPages(
; 294  :                     (LPVOID)pDestination,
; 295  :                     dwDataLength,
; 296  :                     m_rgPFNdst,
; 297  :                     LOCKFLAG_WRITE)  == FALSE)

  0010c	e2861901	 add         r1, r6, #1, 18
  00110	e0033009	 and         r3, r3, r9
  00114	e0835002	 add         r5, r3, r2
  00118	e2812024	 add         r2, r1, #0x24
  0011c	e1a01004	 mov         r1, r4
  00120	e3a03001	 mov         r3, #1
  00124	e1a00008	 mov         r0, r8
  00128	eb000000	 bl          LockPages
  0012c	e3500000	 cmp         r0, #0
  00130	1a000009	 bne         |$LN8@Copy|

; 298  :      {
; 299  :         ERRORMSG(ZONE_ERROR, (TEXT("LockPages \"dest\" call failed. (error code=%d)\r\n"), GetLastError()));

  00134	e59f115c	 ldr         r1, [pc, #0x15C]
  00138	e59f0154	 ldr         r0, [pc, #0x154]
  0013c	e3a03c01	 mov         r3, #1, 24
  00140	e383202b	 orr         r2, r3, #0x2B
  00144	eb000000	 bl          NKDbgPrintfW
  00148	eb000000	 bl          GetLastError
  0014c	e1a01000	 mov         r1, r0
  00150	e59f014c	 ldr         r0, [pc, #0x14C]
  00154	eb000000	 bl          NKDbgPrintfW

; 364  : cleanUp:

  00158	ea000042	 b           |$cleanUp$39070|
  0015c		 |$LN8@Copy|

; 300  :         goto cleanUp;
; 301  :     }           
; 302  :     // Not necessary to do the page shift on ARM platform as always 0. (ref. MSDN)
; 303  :     // paDst = (m_rgPFNdst[0] << UserKInfo[KINX_PFN_SHIFT]) + ((DWORD)pDestination & m_pageMask);
; 304  :     paDst = m_rgPFNdst[0] + ((DWORD)pDestination & m_pageMask);          

  0015c	e2863902	 add         r3, r6, #2, 18
  00160	e593102c	 ldr         r1, [r3, #0x2C]

; 305  :     
; 306  :     // Configure Dest and Src buffers for DMA.   
; 307  :     DmaSetSrcBuffer(&m_dmaInfo, (UINT8 *)pSource, paSrc);

  00164	e5960020	 ldr         r0, [r6, #0x20]
  00168	e2863901	 add         r3, r6, #1, 18
  0016c	e5932024	 ldr         r2, [r3, #0x24]
  00170	e0013008	 and         r3, r1, r8
  00174	e3500000	 cmp         r0, #0
  00178	e586900c	 str         r9, [r6, #0xC]
  0017c	e5865014	 str         r5, [r6, #0x14]
  00180	e0832002	 add         r2, r3, r2
  00184	1580501c	 strne       r5, [r0, #0x1C]
  00188	15963020	 ldrne       r3, [r6, #0x20]

; 308  :     DmaSetDstBuffer(&m_dmaInfo, (UINT8 *)pDestination, paDst);
; 309  :     
; 310  :     // Watch out parameters in DmaSetElemenAndFrameCount. For e.g., shift right element count by 2 if you have bytes in input and you use 32bits element size.
; 311  :     DmaSetElementAndFrameCount(&m_dmaInfo, dwElementCount, (UINT16)(dwFrameCount));
; 312  :     
; 313  :     // start dma
; 314  :     DmaStart(&m_dmaInfo);
; 315  :     
; 316  :     // wait until we hit the end of buffer 
; 317  :     // Wait for dma interrupt...  
; 318  :     dwCause = WaitForSingleObject(m_hEvent, DMA_IRQ_TIMEOUT);         

  0018c	e3a01ffa	 mov         r1, #0xFA, 30
  00190	15835034	 strne       r5, [r3, #0x34]
  00194	e5963020	 ldr         r3, [r6, #0x20]
  00198	e5868010	 str         r8, [r6, #0x10]
  0019c	e5862018	 str         r2, [r6, #0x18]
  001a0	e3530000	 cmp         r3, #0
  001a4	15832020	 strne       r2, [r3, #0x20]
  001a8	15963020	 ldrne       r3, [r6, #0x20]
  001ac	15832038	 strne       r2, [r3, #0x38]
  001b0	e5963020	 ldr         r3, [r6, #0x20]
  001b4	e59d2000	 ldr         r2, [sp]
  001b8	e583b014	 str         r11, [r3, #0x14]
  001bc	e5963020	 ldr         r3, [r6, #0x20]
  001c0	e1a02802	 mov         r2, r2, lsl #16
  001c4	e1a02822	 mov         r2, r2, lsr #16
  001c8	e5832018	 str         r2, [r3, #0x18]
  001cc	e5962020	 ldr         r2, [r6, #0x20]
  001d0	e5923000	 ldr         r3, [r2]
  001d4	e3833080	 orr         r3, r3, #0x80
  001d8	e5823000	 str         r3, [r2]
  001dc	e5960004	 ldr         r0, [r6, #4]
  001e0	eb000000	 bl          WaitForSingleObject
  001e4	e3500000	 cmp         r0, #0

; 319  :      
; 320  :     switch(dwCause)

  001e8	0a000002	 beq         |$LN4@Copy|

; 341  :                         
; 342  :         break;
; 343  :         }        
; 344  :         
; 345  :     default:
; 346  :         RETAILMSG(ZONE_ERROR, (TEXT("ERROR! didn't receive DMA interrupt\r\n")));

  001ec	e59f00ac	 ldr         r0, [pc, #0xAC]
  001f0	eb000000	 bl          NKDbgPrintfW
  001f4	ea00001a	 b           |$LN5@Copy|
  001f8		 |$LN4@Copy|

; 321  :     {
; 322  :     case WAIT_OBJECT_0:
; 323  :         {
; 324  :             // Verify cause of interrupt was because we hit the end of block
; 325  :             dwStatus = DmaGetStatus(&m_dmaInfo);

  001f8	e5962020	 ldr         r2, [r6, #0x20]

; 326  :             if ((dwStatus & (dmaSettings.interrupts)) == 0)

  001fc	e59d302c	 ldr         r3, [sp, #0x2C]
  00200	e592100c	 ldr         r1, [r2, #0xC]
  00204	e1130001	 tst         r3, r1
  00208	1a000006	 bne         |$LN3@Copy|

; 327  :             {
; 328  :                 ERRORMSG(ZONE_ERROR, (TEXT("Unexpected cause of interrupt\r\n")));

  0020c	e59f1084	 ldr         r1, [pc, #0x84]
  00210	e59f007c	 ldr         r0, [pc, #0x7C]
  00214	e3a02f52	 mov         r2, #0x52, 30
  00218	eb000000	 bl          NKDbgPrintfW
  0021c	e59f0078	 ldr         r0, [pc, #0x78]
  00220	eb000000	 bl          NKDbgPrintfW

; 329  :                 break; 

  00224	ea00000e	 b           |$LN5@Copy|
  00228		 |$LN3@Copy|

; 330  :             }
; 331  : 
; 332  :             DmaClearStatus(&m_dmaInfo, dwStatus);

  00228	e582100c	 str         r1, [r2, #0xC]

; 333  :             if (DmaInterruptDone(m_hDmaChannel) == FALSE)

  0022c	e5960008	 ldr         r0, [r6, #8]
  00230	eb000000	 bl          DmaInterruptDone
  00234	e3500000	 cmp         r0, #0
  00238	1a000007	 bne         |$LN2@Copy|

; 334  :             {
; 335  :                 ERRORMSG(ZONE_ERROR, (TEXT("ERROR! Unable to get status for dma interrupt\r\n")));        

  0023c	e59f1054	 ldr         r1, [pc, #0x54]
  00240	e59f004c	 ldr         r0, [pc, #0x4C]
  00244	e3a03c01	 mov         r3, #1, 24
  00248	e383204f	 orr         r2, r3, #0x4F
  0024c	eb000000	 bl          NKDbgPrintfW
  00250	e59f0038	 ldr         r0, [pc, #0x38]
  00254	eb000000	 bl          NKDbgPrintfW
  00258	ea000001	 b           |$LN5@Copy|
  0025c		 |$LN2@Copy|

; 336  :                 break; 
; 337  :             }
; 338  : 
; 339  : 			// Do the "good" client job
; 340  : 			DmaStop(&m_dmaInfo);

  0025c	e286000c	 add         r0, r6, #0xC
  00260	eb000000	 bl          DmaStop
  00264		 |$LN5@Copy|

; 347  :         break;
; 348  :     }     
; 349  :     
; 350  : #if DEBUG_VERIFY_SDMA_COPY   
; 351  :     //
; 352  :     // Beware!! Bring a lot of overhead and can lead to bad display rendering.
; 353  :     //
; 354  :     NKDbgPrintfW(L"verify memory\r\n"); 
; 355  :     if (memcmp(pSource, pDestination, dwDataLength) != 0)
; 356  :     {
; 357  :         NKDbgPrintfW(L"ERROR! memory doesn't match up\r\n");
; 358  :         DebugBreak();
; 359  :         goto cleanUp; 
; 360  :     }
; 361  : #endif
; 362  :     
; 363  :     dwRet = dwDataLength; // everything went fine obviously...

  00264	e1a0a004	 mov         r10, r4
  00268		 |$cleanUp$39070|

; 365  :     UnlockPages((LPVOID)pSource, dwDataLength);

  00268	e1a01004	 mov         r1, r4
  0026c	e1a00009	 mov         r0, r9
  00270	eb000000	 bl          UnlockPages

; 366  :     UnlockPages((LPVOID)pDestination, dwDataLength);   

  00274	e1a01004	 mov         r1, r4
  00278	e1a00008	 mov         r0, r8
  0027c	eb000000	 bl          UnlockPages

; 367  :     
; 368  :     return dwRet;
; 369  : }

  00280	e1a0000a	 mov         r0, r10
  00284	e28dd034	 add         sp, sp, #0x34
  00288	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0028c	e12fff1e	 bx          lr
  00290		 |$LN65@Copy|
  00290		 |$LN66@Copy|
  00290	00000000	 DCD         |??_C@_1GA@KHHDMFOD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5@|
  00294		 |$LN67@Copy|
  00294	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00298		 |$LN68@Copy|
  00298	00000000	 DCD         |??_C@_1HO@DKEMJOKK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAZ?$AA2?$AA1?$AA7?$AA0?$AAP?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0029c		 |$LN69@Copy|
  0029c	00000000	 DCD         |??_C@_1EA@HNPKEDDD@?$AAU?$AAn?$AAe?$AAx?$AAp?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAc?$AAa?$AAu?$AAs?$AAe?$AA?5?$AAo?$AAf?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  002a0		 |$LN70@Copy|
  002a0	00000000	 DCD         |??_C@_1EM@HPAKIBPN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAd?$AAi?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAr?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr@|
  002a4		 |$LN71@Copy|
  002a4	00000000	 DCD         |??_C@_1GA@HCIPLKPO@?$AAL?$AAo?$AAc?$AAk?$AAP?$AAa?$AAg?$AAe?$AAs?$AA?5?$AA?$CC?$AAd?$AAe?$AAs?$AAt?$AA?$CC?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?5?$AA?$CI?$AAe@|
  002a8		 |$LN72@Copy|
  002a8	00000000	 DCD         |??_C@_1FO@DCCALMEH@?$AAL?$AAo?$AAc?$AAk?$AAP?$AAa?$AAg?$AAe?$AAs?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AA?$CC?$AAs?$AAr?$AAc?$AA?$CC?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?5?$AA?$CI?$AAe?$AAr@|
  002ac		 |$LN73@Copy|
  002ac	00000000	 DCD         |??_C@_1FI@IMKKFLKF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAf@|
  002b0		 |$M39662|

			 ENDP  ; |?Copy@SdmaPx@@QAAKPAX0K@Z|, SdmaPx::Copy


  00000			 AREA	 |.pdata|, PDATA
|$T39684| DCD	|$LN6@scalar|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GSdmaPx@@UAAPAXI@Z| PROC		; SdmaPx::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M39681|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??1SdmaPx@@UAA@XZ|
  00010	e3140001	 tst         r4, #1
  00014	11a00005	 movne       r0, r5
  00018	1b000000	 blne        |??3@YAXPAX@Z|
  0001c	e1a00005	 mov         r0, r5
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M39682|

			 ENDP  ; |??_GSdmaPx@@UAAPAXI@Z|, SdmaPx::`scalar deleting destructor'

	EXPORT	|?Initialize@SdmaPx@@QAAHXZ|		; SdmaPx::Initialize
	EXPORT	|??_C@_1FM@BJJAJBCE@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@KPCCJHKA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@BPILDMBO@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	IMPORT	|??0SdmaPxClient@@QAA@XZ|		; SdmaPxClient::SdmaPxClient
	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|DmaAllocateChannel|
	IMPORT	|CreateEventW|

  00000			 AREA	 |.pdata|, PDATA
|$T39719| DCD	|$LN32@Initialize|
	DCD	0x40004d01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@BJJAJBCE@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAD@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "e", 0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@KPCCJHKA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@BPILDMBO@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6@| DCB "U"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "c", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Initialize@SdmaPx@@QAAHXZ| PROC	; SdmaPx::Initialize

; 76   : {

  00000		 |$LN32@Initialize|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M39716|
  00004	e1a06000	 mov         r6, r0

; 77   :     BOOL retVal = FALSE;
; 78   :     
; 79   :     m_hEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00008	e3a03000	 mov         r3, #0
  0000c	e3a02000	 mov         r2, #0
  00010	e3a01000	 mov         r1, #0
  00014	e3a00000	 mov         r0, #0
  00018	e3a04000	 mov         r4, #0
  0001c	eb000000	 bl          CreateEventW
  00020	e3500000	 cmp         r0, #0
  00024	e5860004	 str         r0, [r6, #4]

; 80   :     if( (m_hEvent == NULL) || (INVALID_HANDLE_VALUE == m_hEvent) )

  00028	0a000033	 beq         |$LN9@Initialize|
  0002c	e3700001	 cmn         r0, #1
  00030	0a000031	 beq         |$LN9@Initialize|

; 83   :         goto cleanUp;
; 84   :     }
; 85   : 
; 86   :     // Allocate DMA system channel
; 87   :     m_hDmaChannel = DmaAllocateChannel(DMA_TYPE_SYSTEM);

  00034	e3a00000	 mov         r0, #0
  00038	eb000000	 bl          DmaAllocateChannel
  0003c	e3500000	 cmp         r0, #0
  00040	e5860008	 str         r0, [r6, #8]

; 88   :     if (m_hDmaChannel == NULL)

  00044	1a000005	 bne         |$LN7@Initialize|

; 89   :     {
; 90   :         ERRORMSG(ZONE_ERROR, (TEXT("Unable to allocate DMA channel\r\n")));

  00048	e59f10d8	 ldr         r1, [pc, #0xD8]
  0004c	e59f00d0	 ldr         r0, [pc, #0xD0]
  00050	e3a0205a	 mov         r2, #0x5A
  00054	eb000000	 bl          NKDbgPrintfW
  00058	e59f00d0	 ldr         r0, [pc, #0xD0]

; 106  :     }
; 107  :     
; 108  :     retVal = TRUE;

  0005c	ea00002b	 b           |$LN29@Initialize|
  00060		 |$LN7@Initialize|

; 91   :         goto cleanUp;
; 92   :     }    
; 93   :     
; 94   :     // Register DMA for interrupts  
; 95   :     if (DmaEnableInterrupts(m_hDmaChannel, m_hEvent) == FALSE)

  00060	e5961004	 ldr         r1, [r6, #4]
  00064	eb000000	 bl          DmaEnableInterrupts
  00068	e3500000	 cmp         r0, #0
  0006c	1a000005	 bne         |$LN5@Initialize|

; 96   :     {
; 97   :         ERRORMSG(ZONE_ERROR, (TEXT("Failed to register DMA for interrupts\r\n")));

  00070	e59f10b0	 ldr         r1, [pc, #0xB0]
  00074	e59f00a8	 ldr         r0, [pc, #0xA8]
  00078	e3a02061	 mov         r2, #0x61
  0007c	eb000000	 bl          NKDbgPrintfW
  00080	e59f00a4	 ldr         r0, [pc, #0xA4]

; 106  :     }
; 107  :     
; 108  :     retVal = TRUE;

  00084	ea000021	 b           |$LN29@Initialize|
  00088		 |$LN5@Initialize|
  00088	e3a03b01	 mov         r3, #1, 22
  0008c	e3830084	 orr         r0, r3, #0x84
  00090	eb000000	 bl          |??2@YAPAXI@Z|
  00094	e1b04000	 movs        r4, r0
  00098	0a000009	 beq         |$LN19@Initialize|
  0009c	e3a03010	 mov         r3, #0x10
  000a0	e4843004	 str         r3, [r4], #4
  000a4	e3a0700f	 mov         r7, #0xF
  000a8	e1a05004	 mov         r5, r4
  000ac		 |$LL22@Initialize|
  000ac	e1a00005	 mov         r0, r5
  000b0	eb000000	 bl          |??0SdmaPxClient@@QAA@XZ|
  000b4	e2855048	 add         r5, r5, #0x48
  000b8	e2577001	 subs        r7, r7, #1
  000bc	5afffffa	 bpl         |$LL22@Initialize|

; 98   :         goto cleanUp;
; 99   :     }  
; 100  :     
; 101  :     // Resets clients array
; 102  :     m_SdmaPxClient = new SdmaPxClient [MAX_SDMAPX_CLIENTS];

  000c0	ea000000	 b           |$LN20@Initialize|
  000c4		 |$LN19@Initialize|
  000c4	e3a04000	 mov         r4, #0
  000c8		 |$LN20@Initialize|
  000c8	e2863902	 add         r3, r6, #2, 18
  000cc	e5834034	 str         r4, [r3, #0x34]
  000d0	e3a04000	 mov         r4, #0
  000d4	e2865902	 add         r5, r6, #2, 18
  000d8		 |$LL3@Initialize|

; 103  :     for(int i=0; i<MAX_SDMAPX_CLIENTS; i++)
; 104  :     {
; 105  :         m_SdmaPxClient[i].Init((DWORD)-1);

  000d8	e5953034	 ldr         r3, [r5, #0x34]
  000dc	e3e01000	 mvn         r1, #0
  000e0	e0830004	 add         r0, r3, r4
  000e4	eb000000	 bl          |?Init@SdmaPxClient@@QAAHK@Z|
  000e8	e2844048	 add         r4, r4, #0x48
  000ec	e3540d12	 cmp         r4, #0x12, 26
  000f0	bafffff8	 blt         |$LL3@Initialize|

; 106  :     }
; 107  :     
; 108  :     retVal = TRUE;

  000f4	e3a04001	 mov         r4, #1
  000f8	ea000005	 b           |$cleanUp$38952|
  000fc		 |$LN9@Initialize|

; 81   :     {
; 82   :         ERRORMSG(ZONE_ERROR, (TEXT("Failed to create the event for DMA interrupt\n")));

  000fc	e59f1024	 ldr         r1, [pc, #0x24]
  00100	e59f001c	 ldr         r0, [pc, #0x1C]
  00104	e3a02052	 mov         r2, #0x52
  00108	eb000000	 bl          NKDbgPrintfW
  0010c	e59f000c	 ldr         r0, [pc, #0xC]
  00110		 |$LN29@Initialize|
  00110	eb000000	 bl          NKDbgPrintfW
  00114		 |$cleanUp$38952|

; 109  : cleanUp:    
; 110  :     return retVal;
; 111  : }

  00114	e1a00004	 mov         r0, r4
  00118	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0011c	e12fff1e	 bx          lr
  00120		 |$LN33@Initialize|
  00120		 |$LN34@Initialize|
  00120	00000000	 DCD         |??_C@_1FM@BJJAJBCE@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAD@|
  00124		 |$LN35@Initialize|
  00124	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00128		 |$LN36@Initialize|
  00128	00000000	 DCD         |??_C@_1HO@DKEMJOKK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAZ?$AA2?$AA1?$AA7?$AA0?$AAP?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0012c		 |$LN37@Initialize|
  0012c	00000000	 DCD         |??_C@_1FA@KPCCJHKA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr@|
  00130		 |$LN38@Initialize|
  00130	00000000	 DCD         |??_C@_1EC@BPILDMBO@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6@|
  00134		 |$M39717|

			 ENDP  ; |?Initialize@SdmaPx@@QAAHXZ|, SdmaPx::Initialize

	EXPORT	|??_ESdmaPxClient@@UAAPAXI@Z|		; SdmaPxClient::`vector deleting destructor'
	IMPORT	|??1SdmaPxClient@@UAA@XZ|		; SdmaPxClient::~SdmaPxClient

  00000			 AREA	 |.pdata|, PDATA
|$T39748| DCD	|$LN14@vector@3|
	DCD	0x40001c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_ESdmaPxClient@@UAAPAXI@Z| PROC	; SdmaPxClient::`vector deleting destructor'
  00000		 |$LN14@vector@3|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M39745|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0
  0000c	e3150002	 tst         r5, #2
  00010	0a00000e	 beq         |$LN3@vector@3|
  00014	e5142004	 ldr         r2, [r4, #-4]
  00018	e0823182	 add         r3, r2, r2, lsl #3
  0001c	e0846183	 add         r6, r4, r3, lsl #3
  00020	e2527001	 subs        r7, r2, #1
  00024	4a000004	 bmi         |$LN6@vector@3|
  00028		 |$LL7@vector@3|
  00028	e2466048	 sub         r6, r6, #0x48
  0002c	e1a00006	 mov         r0, r6
  00030	eb000000	 bl          |??1SdmaPxClient@@UAA@XZ|
  00034	e2577001	 subs        r7, r7, #1
  00038	5afffffa	 bpl         |$LL7@vector@3|
  0003c		 |$LN6@vector@3|
  0003c	e3150001	 tst         r5, #1
  00040	12440004	 subne       r0, r4, #4
  00044	1b000000	 blne        |??3@YAXPAX@Z|
  00048	e2444004	 sub         r4, r4, #4
  0004c	ea000004	 b           |$LN1@vector@3|
  00050		 |$LN3@vector@3|
  00050	e1a00004	 mov         r0, r4
  00054	eb000000	 bl          |??1SdmaPxClient@@UAA@XZ|
  00058	e3150001	 tst         r5, #1
  0005c	11a00004	 movne       r0, r4
  00060	1b000000	 blne        |??3@YAXPAX@Z|
  00064		 |$LN1@vector@3|
  00064	e1a00004	 mov         r0, r4
  00068	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$M39746|

			 ENDP  ; |??_ESdmaPxClient@@UAAPAXI@Z|, SdmaPxClient::`vector deleting destructor'

	END
