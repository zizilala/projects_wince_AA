; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\SDMAPROXY\sdmaproxy.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?csLock@@3UCRITICAL_SECTION@@A| [ DATA ] ; csLock
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|?csLock@@3UCRITICAL_SECTION@@A| % 0x14			; csLock

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "S", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "P", 0x0
	DCB	"r", 0x0, "o", 0x0, "x", 0x0, "y", 0x0, 0x0, 0x0
	%	42
	DCB	"I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0x0, 0x0
	%	54
	DCB	"O", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, 0x0, 0x0
	%	54
	DCB	"R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0x0, 0x0
	%	54
	DCB	"W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, 0x0, 0x0
	%	52
	DCB	"C", 0x0, "l", 0x0, "o", 0x0, "s", 0x0, "e", 0x0, 0x0, 0x0
	%	52
	DCB	"I", 0x0, "O", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "n", 0x0
	DCB	"t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, 0x0, 0x0
	%	42
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, 0x0, 0x0
	%	48
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, 0x0, 0x0
	%	52
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	%	434
	DCD	0x0
	EXPORT	|?DllEntry@@YAHPAUHINSTANCE__@@KPAX@Z|	; DllEntry
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|
; File c:\wince600\platform\z2170p\src\drivers\sdmaproxy\sdmaproxy.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T39178| DCD	|$LN7@DllEntry|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DllEntry@@YAHPAUHINSTANCE__@@KPAX@Z| PROC ; DllEntry

; 111  : {

  00000		 |$LN7@DllEntry|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39175|
  00004	e1a04000	 mov         r4, r0

; 112  : 	UNREFERENCED_PARAMETER(Reserved);
; 113  :     if ( dwReason == DLL_PROCESS_ATTACH )

  00008	e3510001	 cmp         r1, #1
  0000c	1a000003	 bne         |$LN2@DllEntry|

; 114  :     {
; 115  :         DEBUGMSG (DMP_ZONE_INIT, (TEXT("SdmaProxy process attach\n")));
; 116  : #ifndef SHIP_BUILD
; 117  :         RegisterDbgZones(hinstDll, &dpCurSettings);

  00010	e59f1014	 ldr         r1, [pc, #0x14]
  00014	eb000000	 bl          RegisterDbgZones

; 118  : #endif
; 119  : 	    DisableThreadLibraryCalls((HMODULE) hinstDll);      

  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          DisableThreadLibraryCalls
  00020		 |$LN2@DllEntry|

; 120  :     }
; 121  : 
; 122  :     if ( dwReason == DLL_PROCESS_DETACH ) {
; 123  :         DEBUGMSG (DMP_ZONE_INIT, (TEXT("SdmaProxy process detach called\n")));
; 124  :     }
; 125  : 
; 126  :     return TRUE;

  00020	e3a00001	 mov         r0, #1

; 127  : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$LN8@DllEntry|
  0002c		 |$LN9@DllEntry|
  0002c	00000000	 DCD         |dpCurSettings|
  00030		 |$M39176|

			 ENDP  ; |?DllEntry@@YAHPAUHINSTANCE__@@KPAX@Z|, DllEntry

	EXPORT	|?DMP_Init@@YAKPBGPBX@Z|		; DMP_Init
	IMPORT	|InitializeCriticalSection|
	IMPORT	|?Initialize@SdmaPx@@QAAHXZ|		; SdmaPx::Initialize
	IMPORT	|??0SdmaPx@@QAA@XZ|			; SdmaPx::SdmaPx
	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|LocalAlloc|

  00000			 AREA	 |.pdata|, PDATA
|$T39195| DCD	|$LN11@DMP_Init|
	DCD	0x40002001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMP_Init@@YAKPBGPBX@Z| PROC		; DMP_Init

; 133  : {

  00000		 |$LN11@DMP_Init|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M39192|

; 134  : 	UNREFERENCED_PARAMETER(szContext);
; 135  : 	UNREFERENCED_PARAMETER(pBusContext);
; 136  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("+DMP_Init\n")));
; 137  :     //
; 138  :     DWORD rc = (DWORD)NULL;
; 139  :     SdmaPxClient_t *pDevice = NULL;
; 140  :     
; 141  :     // Create device structure
; 142  :     pDevice = (SdmaPxClient_t *)LocalAlloc(LPTR, sizeof(SdmaPxClient_t));

  00004	e3a01008	 mov         r1, #8
  00008	e3a00040	 mov         r0, #0x40
  0000c	e3a04000	 mov         r4, #0
  00010	eb000000	 bl          LocalAlloc
  00014	e1b05000	 movs        r5, r0

; 143  :     if (pDevice == NULL)

  00018	0a000013	 beq         |$LN3@DMP_Init|

; 144  :     {
; 145  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: DMP_Init: "
; 146  :             L"Failed allocate Sdma Proxy driver structure\r\n"
; 147  :             ));
; 148  :     }
; 149  :     else
; 150  :     {
; 151  :         // Set cookie
; 152  :         pDevice->cookie = DMP_DEVICE_COOKIE;

  0001c	e59f3058	 ldr         r3, [pc, #0x58]
  00020	e3a02902	 mov         r2, #2, 18

; 153  :         pDevice->sdmaPx = new SdmaPx();

  00024	e3820038	 orr         r0, r2, #0x38
  00028	e5853000	 str         r3, [r5]
  0002c	eb000000	 bl          |??2@YAPAXI@Z|
  00030	e3500000	 cmp         r0, #0
  00034	0a000001	 beq         |$LN7@DMP_Init|
  00038	eb000000	 bl          |??0SdmaPx@@QAA@XZ|
  0003c	ea000000	 b           |$LN8@DMP_Init|
  00040		 |$LN7@DMP_Init|
  00040	e3a00000	 mov         r0, #0
  00044		 |$LN8@DMP_Init|
  00044	e5850004	 str         r0, [r5, #4]

; 154  :     
; 155  :         if(pDevice->sdmaPx)

  00048	e3500000	 cmp         r0, #0
  0004c	0a000004	 beq         |$LN2@DMP_Init|

; 156  :         {
; 157  :             if(pDevice->sdmaPx->Initialize() == FALSE) return 0; // Failed to initialize Sdma Proxy.

  00050	eb000000	 bl          |?Initialize@SdmaPx@@QAAHXZ|
  00054	e3500000	 cmp         r0, #0
  00058	03a04000	 moveq       r4, #0
  0005c	0a000002	 beq         |$LN3@DMP_Init|

; 158  :         
; 159  :             rc = (DWORD)pDevice;

  00060	e1a04005	 mov         r4, r5
  00064		 |$LN2@DMP_Init|

; 160  :         }
; 161  :         
; 162  :         // Init mutex
; 163  :         InitializeCriticalSection(&csLock);       

  00064	e59f000c	 ldr         r0, [pc, #0xC]
  00068	eb000000	 bl          InitializeCriticalSection
  0006c		 |$LN3@DMP_Init|

; 164  :     }
; 165  :     //    
; 166  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("-DMP_Init\n")));
; 167  :     return rc;
; 168  : }

  0006c	e1a00004	 mov         r0, r4
  00070	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$LN12@DMP_Init|
  00078		 |$LN13@DMP_Init|
  00078	00000000	 DCD         |?csLock@@3UCRITICAL_SECTION@@A|
  0007c		 |$LN14@DMP_Init|
  0007c	73707879	 DCD         0x73707879
  00080		 |$M39193|

			 ENDP  ; |?DMP_Init@@YAKPBGPBX@Z|, DMP_Init

	EXPORT	|?DMP_Deinit@@YAHK@Z|			; DMP_Deinit
	IMPORT	|DeleteCriticalSection|
	IMPORT	|LocalFree|
	IMPORT	|?CleanUp@SdmaPx@@QAAHXZ|		; SdmaPx::CleanUp

  00000			 AREA	 |.pdata|, PDATA
|$T39214| DCD	|$LN13@DMP_Deinit|
	DCD	0x40001f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMP_Deinit@@YAHK@Z| PROC		; DMP_Deinit

; 174  : {

  00000		 |$LN13@DMP_Deinit|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M39211|
  00004	e1b04000	 movs        r4, r0

; 175  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("+DMP_Deinit\n")));
; 176  :     //
; 177  :     BOOL rc = FALSE;

  00008	e3a05000	 mov         r5, #0

; 178  :     SdmaPxClient_t *pDevice = (SdmaPxClient_t*)hDeviceContext;
; 179  :     SdmaPx *psdmaPx = NULL;
; 180  :     
; 181  :     if ((pDevice == NULL) || (pDevice->cookie != DMP_DEVICE_COOKIE))

  0000c	0a000015	 beq         |$cleanUp$38977|
  00010	e5942000	 ldr         r2, [r4]
  00014	e59f305c	 ldr         r3, [pc, #0x5C]
  00018	e1520003	 cmp         r2, r3
  0001c	1a000011	 bne         |$cleanUp$38977|

; 182  :     {
; 183  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: DMP_Deinit: "
; 184  :             L"Incorrect context parameter\r\n"
; 185  :             ));
; 186  :         goto cleanUp;
; 187  :     }
; 188  : 
; 189  : 	psdmaPx = (SdmaPx *)pDevice->sdmaPx;

  00020	e5943004	 ldr         r3, [r4, #4]
  00024	e1b06003	 movs        r6, r3

; 190  :     
; 191  :     if(psdmaPx)

  00028	0a000009	 beq         |$LN9@DMP_Deinit|

; 192  :     {
; 193  :         if(psdmaPx->CleanUp() == FALSE) 

  0002c	e1a00006	 mov         r0, r6
  00030	eb000000	 bl          |?CleanUp@SdmaPx@@QAAHXZ|
  00034	e3500000	 cmp         r0, #0
  00038	0a00000a	 beq         |$cleanUp$38977|

; 194  :         {
; 195  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: DMP_Deinit: "
; 196  :                 L"Failed to clean up the Sdma Proxy\r\n"
; 197  :                 ));
; 198  :             goto cleanUp; // Failed to Clean Up Sdma Proxy.  
; 199  :         }
; 200  :         //
; 201  :         delete (psdmaPx);

  0003c	e5963000	 ldr         r3, [r6]
  00040	e3a01001	 mov         r1, #1
  00044	e1a00006	 mov         r0, r6
  00048	e5933000	 ldr         r3, [r3]
  0004c	e1a0e00f	 mov         lr, pc
  00050	e12fff13	 bx          r3
  00054		 |$LN9@DMP_Deinit|

; 202  :     }
; 203  :     
; 204  :     // Free device structure
; 205  :     LocalFree(pDevice);

  00054	e1a00004	 mov         r0, r4
  00058	eb000000	 bl          LocalFree

; 206  :     
; 207  :     // Free mutex
; 208  :     DeleteCriticalSection(&csLock);

  0005c	e59f0010	 ldr         r0, [pc, #0x10]
  00060	eb000000	 bl          DeleteCriticalSection

; 209  :     
; 210  :     // Done
; 211  :     rc = TRUE;

  00064	e3a05001	 mov         r5, #1
  00068		 |$cleanUp$38977|

; 212  :     //
; 213  : cleanUp: 
; 214  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("-DMP_Deinit\n")));
; 215  :     return rc;
; 216  : }

  00068	e1a00005	 mov         r0, r5
  0006c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN14@DMP_Deinit|
  00074		 |$LN15@DMP_Deinit|
  00074	00000000	 DCD         |?csLock@@3UCRITICAL_SECTION@@A|
  00078		 |$LN16@DMP_Deinit|
  00078	73707879	 DCD         0x73707879
  0007c		 |$M39212|

			 ENDP  ; |?DMP_Deinit@@YAHK@Z|, DMP_Deinit

	EXPORT	|?DMP_Open@@YAKKKK@Z|			; DMP_Open
	IMPORT	|?AddSdmaPxClient@SdmaPx@@QAAHK@Z|	; SdmaPx::AddSdmaPxClient
	IMPORT	|GetCallerVMProcessId|

  00000			 AREA	 |.pdata|, PDATA
|$T39229| DCD	|$LN11@DMP_Open|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMP_Open@@YAKKKK@Z| PROC		; DMP_Open

; 225  : {

  00000		 |$LN11@DMP_Open|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M39226|
  00004	e1b04000	 movs        r4, r0

; 226  : 	UNREFERENCED_PARAMETER(ShareMode);
; 227  : 	UNREFERENCED_PARAMETER(AccessCode);
; 228  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("+DMP_Open (device context=0x%x)\n"), hDeviceContext));
; 229  :     //
; 230  :     SdmaPxClient_t *pDevice = (SdmaPxClient_t *)hDeviceContext;
; 231  :     SdmaPx *pSdmaPx = NULL;
; 232  :     DWORD rc = (DWORD)NULL;

  00008	e3a05000	 mov         r5, #0

; 233  :     
; 234  :     if ((pDevice == NULL) || (pDevice->cookie != DMP_DEVICE_COOKIE))

  0000c	0a00000d	 beq         |$cleanUp$39001|
  00010	e5942000	 ldr         r2, [r4]
  00014	e59f3038	 ldr         r3, [pc, #0x38]
  00018	e1520003	 cmp         r2, r3
  0001c	1a000009	 bne         |$cleanUp$39001|

; 235  :     {
; 236  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: DMP_Open: "
; 237  :             L"Incorrect context parameter\r\n"
; 238  :             ));
; 239  :         goto cleanUp;
; 240  :     }
; 241  :     //
; 242  :     if((pSdmaPx = pDevice->sdmaPx) != NULL)

  00020	e5943004	 ldr         r3, [r4, #4]
  00024	e1b06003	 movs        r6, r3
  00028	0a000005	 beq         |$LN2@DMP_Open|

; 243  :     {
; 244  :         if(pSdmaPx->AddSdmaPxClient(GetCallerVMProcessId()) == FALSE)

  0002c	eb000000	 bl          GetCallerVMProcessId
  00030	e1a01000	 mov         r1, r0
  00034	e1a00006	 mov         r0, r6
  00038	eb000000	 bl          |?AddSdmaPxClient@SdmaPx@@QAAHK@Z|
  0003c	e3500000	 cmp         r0, #0
  00040	0a000000	 beq         |$cleanUp$39001|
  00044		 |$LN2@DMP_Open|

; 245  :         {
; 246  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: DMP_Open: "
; 247  :                 L"Failed to Add Sdma Proxy Client\r\n"
; 248  :                 ));
; 249  :             goto cleanUp; // Failed to add Sdma Proxy Client
; 250  :         }
; 251  : #ifdef DEBUG
; 252  :         DWORD callerId = GetCallerVMProcessId();
; 253  :         DEBUGMSG (DMP_ZONE_FUNCTION, (L"DMP_Open: "
; 254  :                 L"Add Sdma Proxy Client ID = 0x%x, Index = %d\r\n",
; 255  :                 callerId,
; 256  :                 pSdmaPx->GetSdmaPxClientIdx(callerId)
; 257  :                 ));
; 258  : #endif        
; 259  :     }
; 260  :     
; 261  :     // Done
; 262  :     rc = hDeviceContext;

  00044	e1a05004	 mov         r5, r4
  00048		 |$cleanUp$39001|

; 263  :     //
; 264  : cleanUp:    
; 265  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("-DMP_Open (device context=0x%x)\n"), hDeviceContext));
; 266  :     return rc;
; 267  : }

  00048	e1a00005	 mov         r0, r5
  0004c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN12@DMP_Open|
  00054		 |$LN13@DMP_Open|
  00054	73707879	 DCD         0x73707879
  00058		 |$M39227|

			 ENDP  ; |?DMP_Open@@YAKKKK@Z|, DMP_Open

	EXPORT	|?DMP_Close@@YAHK@Z|			; DMP_Close
	IMPORT	|?RemoveSdmaPxClient@SdmaPx@@QAAHK@Z|	; SdmaPx::RemoveSdmaPxClient

  00000			 AREA	 |.pdata|, PDATA
|$T39243| DCD	|$LN11@DMP_Close|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMP_Close@@YAHK@Z| PROC		; DMP_Close

; 273  : {

  00000		 |$LN11@DMP_Close|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M39240|
  00004	e3500000	 cmp         r0, #0

; 274  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("+DMP_Close (device context=0x%x)\n"), hOpenContext));
; 275  :     //
; 276  :     SdmaPxClient_t *pDevice = (SdmaPxClient_t *)hOpenContext;
; 277  :     SdmaPx *pSdmaPx = NULL;
; 278  :     BOOL rc = FALSE;

  00008	e3a04000	 mov         r4, #0

; 279  :     
; 280  :     if ((pDevice == NULL) || (pDevice->cookie != DMP_DEVICE_COOKIE))

  0000c	0a00000d	 beq         |$cleanUp$39019|
  00010	e5902000	 ldr         r2, [r0]
  00014	e59f3038	 ldr         r3, [pc, #0x38]
  00018	e1520003	 cmp         r2, r3
  0001c	1a000009	 bne         |$cleanUp$39019|

; 281  :     {
; 282  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: DMP_Close: "
; 283  :             L"Incorrect context parameter\r\n"
; 284  :             ));
; 285  :         goto cleanUp;
; 286  :     }
; 287  :     //
; 288  :     if((pSdmaPx = pDevice->sdmaPx) != NULL)

  00020	e5903004	 ldr         r3, [r0, #4]
  00024	e1b05003	 movs        r5, r3
  00028	0a000005	 beq         |$LN2@DMP_Close|

; 289  :     {
; 290  : #ifdef DEBUG
; 291  :         DWORD callerId = GetCallerVMProcessId();
; 292  :         DEBUGMSG (DMP_ZONE_FUNCTION, (L"DMP_Close: "
; 293  :                 L"Close Sdma Proxy Client ID = 0x%x, Index = %d\r\n",
; 294  :                 callerId,
; 295  :                 pSdmaPx->GetSdmaPxClientIdx(callerId)
; 296  :                 ));
; 297  : #endif      
; 298  :         if (pSdmaPx->RemoveSdmaPxClient(GetCallerVMProcessId()) == FALSE)      

  0002c	eb000000	 bl          GetCallerVMProcessId
  00030	e1a01000	 mov         r1, r0
  00034	e1a00005	 mov         r0, r5
  00038	eb000000	 bl          |?RemoveSdmaPxClient@SdmaPx@@QAAHK@Z|
  0003c	e3500000	 cmp         r0, #0
  00040	0a000000	 beq         |$cleanUp$39019|
  00044		 |$LN2@DMP_Close|

; 299  :         {
; 300  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: DMP_Close: "
; 301  :                 L"Failed to Remove Sdma Proxy Client\r\n"
; 302  :                 ));
; 303  :             goto cleanUp; // Failed to add Sdma Proxy Client
; 304  :         }        
; 305  :     }
; 306  :     // Done
; 307  :     rc = TRUE;

  00044	e3a04001	 mov         r4, #1
  00048		 |$cleanUp$39019|

; 308  :     //
; 309  : cleanUp:    
; 310  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("-DMP_Close (device context=0x%x)\n"), hOpenContext));
; 311  :     return rc;
; 312  : }

  00048	e1a00004	 mov         r0, r4
  0004c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN12@DMP_Close|
  00054		 |$LN13@DMP_Close|
  00054	73707879	 DCD         0x73707879
  00058		 |$M39241|

			 ENDP  ; |?DMP_Close@@YAHK@Z|, DMP_Close

	EXPORT	|?DMP_Read@@YAKKPAXK@Z|			; DMP_Read

  00000			 AREA	 |.pdata|, PDATA
|$T39254| DCD	|$LN5@DMP_Read|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMP_Read@@YAKKPAXK@Z| PROC		; DMP_Read

; 321  : {

  00000		 |$LN5@DMP_Read|
  00000		 |$M39251|

; 322  : 	UNREFERENCED_PARAMETER(Count);
; 323  : 	UNREFERENCED_PARAMETER(pBuffer);
; 324  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 325  : 
; 326  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("+DMP_Read\n")));
; 327  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("-DMP_Read\n")));
; 328  :     return 0;

  00000	e3a00000	 mov         r0, #0

; 329  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M39252|

			 ENDP  ; |?DMP_Read@@YAKKPAXK@Z|, DMP_Read

	EXPORT	|?DMP_Write@@YAKKPBXK@Z|		; DMP_Write

  00000			 AREA	 |.pdata|, PDATA
|$T39263| DCD	|$LN5@DMP_Write|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMP_Write@@YAKKPBXK@Z| PROC		; DMP_Write

; 338  : {

  00000		 |$LN5@DMP_Write|
  00000		 |$M39260|

; 339  : 	UNREFERENCED_PARAMETER(NumberOfBytes);
; 340  : 	UNREFERENCED_PARAMETER(pSourceBytes);
; 341  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 342  : 
; 343  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("+DMP_Write\n")));
; 344  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("-DMP_Write\n")));
; 345  :     return 0;

  00000	e3a00000	 mov         r0, #0

; 346  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M39261|

			 ENDP  ; |?DMP_Write@@YAKKPBXK@Z|, DMP_Write

	EXPORT	|?DMP_Seek@@YAKKJK@Z|			; DMP_Seek

  00000			 AREA	 |.pdata|, PDATA
|$T39272| DCD	|$LN5@DMP_Seek|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMP_Seek@@YAKKJK@Z| PROC		; DMP_Seek

; 355  : {

  00000		 |$LN5@DMP_Seek|
  00000		 |$M39269|

; 356  : 	UNREFERENCED_PARAMETER(Type);
; 357  : 	UNREFERENCED_PARAMETER(Amount);
; 358  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 359  : 
; 360  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("+DMP_Seek\n")));
; 361  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("-DMP_Seek\n")));
; 362  :     return 0;

  00000	e3a00000	 mov         r0, #0

; 363  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M39270|

			 ENDP  ; |?DMP_Seek@@YAKKJK@Z|, DMP_Seek

	EXPORT	|?DMP_IOControl@@YAHKKPAEK0KPAK@Z|	; DMP_IOControl
	IMPORT	|LeaveCriticalSection|
	IMPORT	|?Configure@SdmaPx@@QAAHPAUSdmaConfig_t@@K@Z| ; SdmaPx::Configure
	IMPORT	|?Copy@SdmaPx@@QAAKPAX0K@Z|		; SdmaPx::Copy
	IMPORT	|?GetSdmaPxClientIdx@SdmaPx@@QAAHK@Z|	; SdmaPx::GetSdmaPxClientIdx
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T39291| DCD	|$LN25@DMP_IOCont|
	DCD	0x40003d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMP_IOControl@@YAHKKPAEK0KPAK@Z| PROC ; DMP_IOControl

; 376  : {

  00000		 |$LN25@DMP_IOCont|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M39288|
  00004	e1a07003	 mov         r7, r3
  00008	e1a05002	 mov         r5, r2
  0000c	e1a06001	 mov         r6, r1
  00010	e1a08000	 mov         r8, r0

; 377  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("+DMP_IOControl - %s - (device context=0x%x / thread id=0x%x / pBufIn=0x%x, pBufOut=0x%x)\n"), (dwCode == 0) ? L"CONFIGURE" : L"COPY", hOpenContext, GetCurrentThreadId(), pBufIn, pBufOut));
; 378  : 
; 379  : 	// Get mutex
; 380  :     EnterCriticalSection(&csLock);

  00014	e59f00cc	 ldr         r0, [pc, #0xCC]
  00018	eb000000	 bl          EnterCriticalSection

; 381  : 
; 382  :     BOOL RetVal = TRUE;

  0001c	e3a04001	 mov         r4, #1

; 383  :     INT32 clientIdx;
; 384  :     SdmaPxClient_t *pDevice = NULL;
; 385  :     SdmaPx *pSdmaPx = NULL;
; 386  :      
; 387  :     if((pDevice = (SdmaPxClient_t *)hOpenContext) == NULL)

  00020	e3580000	 cmp         r8, #0

; 388  :     {
; 389  :         RetVal = FALSE;

  00024	0a000029	 beq         |$LN3@DMP_IOCont|

; 390  :         DEBUGMSG(DMP_ZONE_ERROR, (TEXT("IoControl Code = 0x%x, Invalid context!\n"), dwCode));
; 391  :         goto cleanUp;
; 392  :     }
; 393  :     
; 394  :     if((pSdmaPx = pDevice->sdmaPx) == NULL)

  00028	e5983004	 ldr         r3, [r8, #4]
  0002c	e1b08003	 movs        r8, r3

; 460  :             break;
; 461  :         }
; 462  :     
; 463  :     default:
; 464  :         RetVal = FALSE;
; 465  :         break;
; 466  :     }
; 467  : 
; 468  : cleanUp:

  00030	0a000026	 beq         |$LN3@DMP_IOCont|
  00034	eb000000	 bl          GetCallerVMProcessId
  00038	e1a01000	 mov         r1, r0
  0003c	e1a00008	 mov         r0, r8
  00040	eb000000	 bl          |?GetSdmaPxClientIdx@SdmaPx@@QAAHK@Z|
  00044	e3700001	 cmn         r0, #1
  00048	0a000020	 beq         |$LN3@DMP_IOCont|
  0004c	e59f309c	 ldr         r3, [pc, #0x9C]
  00050	e1560003	 cmp         r6, r3
  00054	0a000013	 beq         |$LN5@DMP_IOCont|
  00058	e59f308c	 ldr         r3, [pc, #0x8C]
  0005c	e1560003	 cmp         r6, r3
  00060	1a00001a	 bne         |$LN3@DMP_IOCont|
  00064	e59d2018	 ldr         r2, [sp, #0x18]
  00068	e3520000	 cmp         r2, #0
  0006c	0a000017	 beq         |$LN3@DMP_IOCont|

; 395  :     {
; 396  :         RetVal = FALSE;
; 397  :         DEBUGMSG(DMP_ZONE_ERROR, (TEXT("IoControl Code = 0x%x, Invalid Proxy!\n"), dwCode));
; 398  :         goto cleanUp;
; 399  :     }
; 400  : 
; 401  : #ifdef DEBUG
; 402  :         DWORD callerId = GetCallerVMProcessId();
; 403  :         DEBUGMSG (DMP_ZONE_FUNCTION, (L"DMP_IOControl: "
; 404  :                 L"IoControl Sdma Proxy Client ID = 0x%x, Index = %d\r\n",
; 405  :                 callerId,
; 406  :                 pSdmaPx->GetSdmaPxClientIdx(callerId)
; 407  :                 ));
; 408  : #endif 
; 409  :     
; 410  :     if((clientIdx = pSdmaPx->GetSdmaPxClientIdx(GetCallerVMProcessId())) == -1)
; 411  :     {
; 412  :         RetVal = FALSE;
; 413  :         DEBUGMSG(DMP_ZONE_ERROR, (TEXT("IoControl Code = 0x%x, could not retrieve client!\n"), dwCode));
; 414  :         goto cleanUp;
; 415  :     }
; 416  :     
; 417  :     switch(dwCode)
; 418  :     {    
; 419  :     case IOCTL_SDMAPROXY_COPY: // keep this case first for optimization
; 420  :         {
; 421  :             if( (NULL == pBufOut) || (NULL == pBufIn) )

  00070	e3550000	 cmp         r5, #0
  00074	0a000015	 beq         |$LN3@DMP_IOCont|

; 422  :             {
; 423  :                 DEBUGMSG(DMP_ZONE_IOCTL, (TEXT("IoControl Code = 0x%x, Invalid Parameter!\n"), dwCode));
; 424  :                 RetVal = FALSE;
; 425  :                 goto cleanUp;
; 426  :             }
; 427  :         
; 428  :             // Check if length is < 2^24 as the count elements can only be a 24bits value. See TRM Table9-43 for OMAP3.
; 429  :             // Increase the allowed size by 4 times as the DMA copy uses 32bits elements instead of the default byte value.
; 430  :             if(dwLenIn < (0x01000000 * 4))

  00078	e3570301	 cmp         r7, #1, 6
  0007c	2a000004	 bcs         |$LN7@DMP_IOCont|

; 431  :             {
; 432  :                 // Do the system DMA copy
; 433  :                 dwLenOut = pSdmaPx->Copy(pBufIn, pBufOut, (DWORD)clientIdx);

  00080	e1a03000	 mov         r3, r0
  00084	e1a00008	 mov         r0, r8
  00088	e1a01005	 mov         r1, r5
  0008c	eb000000	 bl          |?Copy@SdmaPx@@QAAKPAX0K@Z|

; 434  :             }
; 435  :             else

  00090	ea000001	 b           |$LN6@DMP_IOCont|
  00094		 |$LN7@DMP_IOCont|

; 436  :             {
; 437  :                 // Failure
; 438  :                 DEBUGMSG(DMP_ZONE_IOCTL, (TEXT("IoControl, Invalid Length!\n")));
; 439  :                 dwLenOut = 0;

  00094	e3a00000	 mov         r0, #0

; 440  :                 RetVal = FALSE;

  00098	e3a04000	 mov         r4, #0
  0009c		 |$LN6@DMP_IOCont|

; 441  :             }
; 442  : 
; 443  :             *pdwActualOut = dwLenOut; // return the size

  0009c	e59d3020	 ldr         r3, [sp, #0x20]
  000a0	e5830000	 str         r0, [r3]

; 460  :             break;
; 461  :         }
; 462  :     
; 463  :     default:
; 464  :         RetVal = FALSE;
; 465  :         break;
; 466  :     }
; 467  : 
; 468  : cleanUp:

  000a4	ea00000a	 b           |$cleanUp$39064|
  000a8		 |$LN5@DMP_IOCont|

; 444  :             break;
; 445  :         }
; 446  :     
; 447  :     case IOCTL_SDMAPROXY_CONFIG:
; 448  :         {
; 449  :             SdmaConfig_t *pdmaDataConfig;
; 450  :             
; 451  :             if( (dwLenIn < sizeof(SdmaConfig_t)) || (NULL == pBufIn) )

  000a8	e3570028	 cmp         r7, #0x28
  000ac	3a000007	 bcc         |$LN3@DMP_IOCont|
  000b0	e3550000	 cmp         r5, #0
  000b4	0a000005	 beq         |$LN3@DMP_IOCont|

; 455  :                 goto cleanUp;
; 456  :             }
; 457  :             
; 458  :             pdmaDataConfig = (SdmaConfig_t *)pBufIn;
; 459  :             RetVal = pSdmaPx->Configure(pdmaDataConfig, (DWORD)clientIdx);

  000b8	e1a02000	 mov         r2, r0
  000bc	e1a00008	 mov         r0, r8
  000c0	e1a01005	 mov         r1, r5
  000c4	eb000000	 bl          |?Configure@SdmaPx@@QAAHPAUSdmaConfig_t@@K@Z|
  000c8	e1a04000	 mov         r4, r0

; 460  :             break;
; 461  :         }
; 462  :     
; 463  :     default:
; 464  :         RetVal = FALSE;
; 465  :         break;
; 466  :     }
; 467  : 
; 468  : cleanUp:

  000cc	ea000000	 b           |$cleanUp$39064|
  000d0		 |$LN3@DMP_IOCont|

; 452  :             {
; 453  :                 DEBUGMSG(DMP_ZONE_IOCTL, (TEXT("IoControl Code = 0x%x, Invalid Parameter!\n"), dwCode));
; 454  :                 RetVal = FALSE;

  000d0	e3a04000	 mov         r4, #0
  000d4		 |$cleanUp$39064|

; 469  :     LeaveCriticalSection(&csLock); // release mutex

  000d4	e59f000c	 ldr         r0, [pc, #0xC]
  000d8	eb000000	 bl          LeaveCriticalSection

; 470  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("-DMP_IOControl - %s - (device context=0x%x / thread id=0x%x)\n"), (dwCode == 0) ? L"CONFIGURE" : L"COPY", hOpenContext, GetCurrentThreadId()));
; 471  :     return RetVal;
; 472  : }

  000dc	e1a00004	 mov         r0, r4
  000e0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000e4	e12fff1e	 bx          lr
  000e8		 |$LN26@DMP_IOCont|
  000e8		 |$LN27@DMP_IOCont|
  000e8	00000000	 DCD         |?csLock@@3UCRITICAL_SECTION@@A|
  000ec		 |$LN28@DMP_IOCont|
  000ec	02308124	 DCD         0x2308124
  000f0		 |$LN29@DMP_IOCont|
  000f0	02308120	 DCD         0x2308120
  000f4		 |$M39289|

			 ENDP  ; |?DMP_IOControl@@YAHKKPAEK0KPAK@Z|, DMP_IOControl

	EXPORT	|?DMP_PowerUp@@YAXK@Z|			; DMP_PowerUp

  00000			 AREA	 |.pdata|, PDATA
|$T39302| DCD	|$LN5@DMP_PowerU|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMP_PowerUp@@YAXK@Z| PROC		; DMP_PowerUp

; 478  : {

  00000		 |$LN5@DMP_PowerU|
  00000		 |$M39299|

; 479  : 	UNREFERENCED_PARAMETER(hDeviceContext);
; 480  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("+DMP_PowerUp\n")));
; 481  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("-DMP_PowerUp\n")));
; 482  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M39300|

			 ENDP  ; |?DMP_PowerUp@@YAXK@Z|, DMP_PowerUp

	EXPORT	|?DMP_PowerDown@@YAXK@Z|		; DMP_PowerDown

  00000			 AREA	 |.pdata|, PDATA
|$T39309| DCD	|$LN5@DMP_PowerD|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DMP_PowerDown@@YAXK@Z| PROC		; DMP_PowerDown

; 488  : {

  00000		 |$LN5@DMP_PowerD|
  00000		 |$M39306|

; 489  : 	UNREFERENCED_PARAMETER(hDeviceContext);
; 490  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("+DMP_PowerDown\n")));
; 491  :     DEBUGMSG (DMP_ZONE_FUNCTION, (TEXT("-DMP_PowerDown\n")));
; 492  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M39307|

			 ENDP  ; |?DMP_PowerDown@@YAXK@Z|, DMP_PowerDown

	END
