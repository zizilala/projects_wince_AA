; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\PM\DLL\pmrequire.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|CeLogData|
	IMPORT	|StringCchLengthW|
	IMPORT	|StringCchVPrintfW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|
; File c:\wince600\public\common\sdk\inc\celog.h

  00000			 AREA	 |.pdata|, PDATA
|$T33683| DCD	|$LN7@CeLogMsg|
	DCD	0xc0002a04

  00000			 AREA	 |.xdata|, DATA
|$T33679| DCD	0xffffffe0
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T33679|

  00008		 |CeLogMsg| PROC

; 1015 : {

  00008		 |$LN7@CeLogMsg|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d000f	 stmdb       sp!, {r0 - r3}
  00010	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00014	e24dde22	 sub         sp, sp, #0x22, 28
  00018		 |$M33680|
  00018	e58d022c	 str         r0, [sp, #0x22C]
  0001c	e59f3088	 ldr         r3, [pc, #0x88]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d321c	 str         r3, [sp, #0x21C]

; 1016 :     va_list arglist;
; 1017 :     WCHAR   szTemp[MAX_PATH];
; 1018 :     size_t  cchLen;
; 1019 :     HRESULT hr;
; 1020 : 
; 1021 :     // Compose a single string using the input args
; 1022 :     va_start(arglist, szFormat);
; 1023 :     hr = StringCchVPrintfW(szTemp, MAX_PATH, szFormat, arglist);

  00028	e1a02000	 mov         r2, r0
  0002c	e28d0014	 add         r0, sp, #0x14
  00030	e28d3e23	 add         r3, sp, #0x23, 28
  00034	e3a01f41	 mov         r1, #0x41, 30
  00038	eb000000	 bl          StringCchVPrintfW
  0003c	e3500000	 cmp         r0, #0

; 1024 :     if (SUCCEEDED(hr)) {

  00040	4a000014	 bmi         |$LN1@CeLogMsg|

; 1025 :         hr = StringCchLengthW(szTemp, MAX_PATH, &cchLen);

  00044	e28d2010	 add         r2, sp, #0x10
  00048	e3a01f41	 mov         r1, #0x41, 30
  0004c	e28d0014	 add         r0, sp, #0x14
  00050	eb000000	 bl          StringCchLengthW
  00054	e3500000	 cmp         r0, #0

; 1026 :         if (SUCCEEDED(hr)) {

  00058	4a00000e	 bmi         |$LN1@CeLogMsg|

; 1027 :             CeLogData(TRUE, CELID_RAW_WCHAR, szTemp, (WORD)((cchLen + 1) * sizeof(WCHAR)),
; 1028 :                       0, CELZONE_ALWAYSON, 0, FALSE);

  0005c	e59d3010	 ldr         r3, [sp, #0x10]
  00060	e3a04101	 mov         r4, #1, 2
  00064	e3a0e000	 mov         lr, #0
  00068	e2833001	 add         r3, r3, #1
  0006c	e1a03083	 mov         r3, r3, lsl #1
  00070	e1a03803	 mov         r3, r3, lsl #16
  00074	e1a03823	 mov         r3, r3, lsr #16
  00078	e28d2014	 add         r2, sp, #0x14
  0007c	e3a0104a	 mov         r1, #0x4A
  00080	e3a00001	 mov         r0, #1
  00084	e58de00c	 str         lr, [sp, #0xC]
  00088	e58de008	 str         lr, [sp, #8]
  0008c	e58d4004	 str         r4, [sp, #4]
  00090	e58de000	 str         lr, [sp]
  00094	eb000000	 bl          CeLogData
  00098		 |$LN1@CeLogMsg|
  00098	e59d021c	 ldr         r0, [sp, #0x21C]
  0009c	eb000000	 bl          __security_check_cookie

; 1029 :         }
; 1030 :     }
; 1031 : }

  000a0	e28dde22	 add         sp, sp, #0x22, 28
  000a4	e89d6010	 ldmia       sp, {r4, sp, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN8@CeLogMsg|
  000ac		 |$LN9@CeLogMsg|
  000ac	00000000	 DCD         |__security_cookie|
  000b0		 |$M33681|

			 ENDP  ; |CeLogMsg|

	EXPORT	|UpdateRequirementDevices|
	EXPORT	|??_C@_1FA@BLKCCPJO@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AAd?$AA?5?$AAd?$AAu?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@KKMCPELB@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAn?$AAo?$AAt?$AAi?$AAf?$AAy?$AAi?$AAn?$AAg?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@PGOLOMKN@?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JE@HGEMFFFP@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAu?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAo?$AAf?$AA?5?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@MOOMGNKD@?$AA?$DM?$AAA?$AAl?$AAl?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAs?$AA?$DO?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|PmUnlock|
	IMPORT	|DeviceStateAddRef|
	IMPORT	|PmLock|
	IMPORT	|DeviceStateDecRef|
	IMPORT	|UpdateDeviceState|
	IMPORT	|DeviceStateFindList|
	IMPORT	|GetDeviceListFromClass|
	IMPORT	|dpCurSettings|
; File c:\wince600\platform\z2170p\src\drivers\pm\dll\pmrequire.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T33716| DCD	|$LN33@UpdateRequ|
	DCD	0x40006e02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@BLKCCPJO@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AAd?$AA?5?$AAd?$AAu?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAu@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "'", 0x0, "%"
	DCB	0x0, "s", 0x0, "'", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "m"
	DCB	0x0, "o", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "d"
	DCB	0x0, "u", 0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "u", 0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@KKMCPELB@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAn?$AAo?$AAt?$AAi?$AAf?$AAy?$AAi?$AAn?$AAg?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "y", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, " ", 0x0, "(", 0x0, "'", 0x0, "%", 0x0, "s"
	DCB	0x0, "'", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@PGOLOMKN@?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAs?$AA?$AA@| DCB "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "R"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "i", 0x0, "r", 0x0, "e"
	DCB	0x0, "m", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@HGEMFFFP@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAu?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAo?$AAf?$AA?5?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?9@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "u", 0x0, "p", 0x0, "d"
	DCB	0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "'", 0x0, "%", 0x0, "s", 0x0, "'", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "s", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, "-", 0x0, "%", 0x0, "0", 0x0, "4", 0x0, "x", 0x0, "-"
	DCB	0x0, "%", 0x0, "0", 0x0, "4", 0x0, "x", 0x0, "-", 0x0, "%"
	DCB	0x0, "0", 0x0, "4", 0x0, "x", 0x0, "-", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@MOOMGNKD@?$AA?$DM?$AAA?$AAl?$AAl?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAs?$AA?$DO?$AA?$AA@| DCB "<"
	DCB	0x0, "A", 0x0, "l", 0x0, "l", 0x0, " ", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, ">"
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UpdateRequirementDevices| PROC

; 26   : {

  00000		 |$LN33@UpdateRequ|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd028	 sub         sp, sp, #0x28
  00008		 |$M33713|
  00008	e1a04000	 mov         r4, r0
  0000c	e58d4024	 str         r4, [sp, #0x24]

; 27   : #ifndef SHIP_BUILD
; 28   :     SETFNAME(_T("UpdateRequirementDevices"));
; 29   : #endif
; 30   : 
; 31   :     PMLOGMSG(ZONE_REQUIRE, 
; 32   :         (_T("%s: updating '%s' of class %08x-%04x-%04x-%04x-%02x%02x%02x%02x%02x%02x\r\n"),
; 33   :         pszFname, pDeviceId->pszName != NULL ? pDeviceId->pszName : _T("<All Devices>"),
; 34   :         pDeviceId->pGuid->Data1, pDeviceId->pGuid->Data2, pDeviceId->pGuid->Data3,
; 35   :         (pDeviceId->pGuid->Data4[0] << 8) + pDeviceId->pGuid->Data4[1], 
; 36   :         pDeviceId->pGuid->Data4[2], pDeviceId->pGuid->Data4[3], 
; 37   :         pDeviceId->pGuid->Data4[4], pDeviceId->pGuid->Data4[5], 
; 38   :         pDeviceId->pGuid->Data4[6], pDeviceId->pGuid->Data4[7]));

  00010	e59f5194	 ldr         r5, [pc, #0x194]
  00014	e5953440	 ldr         r3, [r5, #0x440]
  00018	e3130080	 tst         r3, #0x80
  0001c	0a00001d	 beq         |$LN16@UpdateRequ|
  00020	e5943004	 ldr         r3, [r4, #4]
  00024	e59f0188	 ldr         r0, [pc, #0x188]
  00028	e1b02003	 movs        r2, r3
  0002c	e5943000	 ldr         r3, [r4]
  00030	059f2178	 ldreq       r2, [pc, #0x178]
  00034	e5d3e008	 ldrb        lr, [r3, #8]
  00038	e5d31009	 ldrb        r1, [r3, #9]
  0003c	e5d3400f	 ldrb        r4, [r3, #0xF]
  00040	e5d3500e	 ldrb        r5, [r3, #0xE]
  00044	e081140e	 add         r1, r1, lr, lsl #8
  00048	e5d3600d	 ldrb        r6, [r3, #0xD]
  0004c	e5d3700c	 ldrb        r7, [r3, #0xC]
  00050	e5d3800b	 ldrb        r8, [r3, #0xB]
  00054	e5d3900a	 ldrb        r9, [r3, #0xA]
  00058	e1d3a0b6	 ldrh        r10, [r3, #6]
  0005c	e1d3b0b4	 ldrh        r11, [r3, #4]
  00060	e5933000	 ldr         r3, [r3]
  00064	e58d1008	 str         r1, [sp, #8]
  00068	e59f1134	 ldr         r1, [pc, #0x134]
  0006c	e58d4020	 str         r4, [sp, #0x20]
  00070	e58d501c	 str         r5, [sp, #0x1C]
  00074	e58d6018	 str         r6, [sp, #0x18]
  00078	e58d7014	 str         r7, [sp, #0x14]
  0007c	e58d8010	 str         r8, [sp, #0x10]
  00080	e58d900c	 str         r9, [sp, #0xC]
  00084	e58da004	 str         r10, [sp, #4]
  00088	e58db000	 str         r11, [sp]
  0008c	eb000000	 bl          CeLogMsg
  00090	e59d4024	 ldr         r4, [sp, #0x24]
  00094	e59f5110	 ldr         r5, [pc, #0x110]
  00098		 |$LN16@UpdateRequ|

; 39   : 
; 40   :     // all devices with a matching class
; 41   :     PDEVICE_LIST pdl = GetDeviceListFromClass(pDeviceId->pGuid);

  00098	e5940000	 ldr         r0, [r4]
  0009c	eb000000	 bl          GetDeviceListFromClass

; 42   :     PREFAST_DEBUGCHK(pdl != NULL);
; 43   :     
; 44   :     // are we updating one device or all devices of a class?
; 45   :     if(pDeviceId->pszName != NULL) {

  000a0	e5943004	 ldr         r3, [r4, #4]
  000a4	e1a08000	 mov         r8, r0
  000a8	e3530000	 cmp         r3, #0
  000ac	0a00000f	 beq         |$LN11@UpdateRequ|

; 46   :         PDEVICE_STATE pds = DeviceStateFindList(pdl, pDeviceId->pszName);

  000b0	e1a01003	 mov         r1, r3
  000b4	eb000000	 bl          DeviceStateFindList
  000b8	e1b04000	 movs        r4, r0

; 47   :         if(pds != NULL) {

  000bc	0a000034	 beq         |$LN9@UpdateRequ|

; 48   :             PMLOGMSG(ZONE_REQUIRE, (_T("%s: notifying 0x%08x ('%s')\r\n"),
; 49   :                 pszFname, pds, pds->pszName));

  000c0	e5953440	 ldr         r3, [r5, #0x440]
  000c4	e3130080	 tst         r3, #0x80
  000c8	15943000	 ldrne       r3, [r4]
  000cc	159f00d4	 ldrne       r0, [pc, #0xD4]
  000d0	159f10cc	 ldrne       r1, [pc, #0xCC]
  000d4	11a02004	 movne       r2, r4
  000d8	1b000000	 blne        CeLogMsg

; 50   :             UpdateDeviceState(pds);

  000dc	e1a00004	 mov         r0, r4
  000e0	eb000000	 bl          UpdateDeviceState

; 51   :             DeviceStateDecRef(pds);

  000e4	e1a00004	 mov         r0, r4
  000e8	eb000000	 bl          DeviceStateDecRef

; 52   :         }
; 53   :     } else {

  000ec	ea000028	 b           |$LN9@UpdateRequ|
  000f0		 |$LN11@UpdateRequ|

; 54   :         BOOL fDeviceRemoved;
; 55   :         PDEVICE_STATE pds;
; 56   : 
; 57   :         PMLOCK();

  000f0	eb000000	 bl          PmLock
  000f4		 |$LL8@UpdateRequ|

; 58   :         
; 59   :         // Update all devices in a given class.  If a device is
; 60   :         // removed from the class list while we are iterating through
; 61   :         // it, start again.  This should be harmless because once devices
; 62   :         // have been updated they are at the right power level already.
; 63   :         // At the worst a device will be set to its current power level, and
; 64   :         // this will only happen if a device is removed from the list while
; 65   :         // we are working on it.
; 66   :         do {
; 67   :             fDeviceRemoved = FALSE;
; 68   :             pds = pdl->pList;

  000f4	e5984004	 ldr         r4, [r8, #4]
  000f8	e3a06000	 mov         r6, #0
  000fc		 |$LL5@UpdateRequ|

; 69   :             while(!fDeviceRemoved && pds != NULL) {

  000fc	e3540000	 cmp         r4, #0
  00100	0a000022	 beq         |$LN28@UpdateRequ|

; 70   :                 PDEVICE_STATE pdsNext = NULL;
; 71   :                 
; 72   :                 // keep the device structure from being deallocated while
; 73   :                 // we're using a pointer to it
; 74   :                 DeviceStateAddRef(pds);

  00104	e1a00004	 mov         r0, r4
  00108	e3a07000	 mov         r7, #0
  0010c	eb000000	 bl          DeviceStateAddRef

; 75   :                 
; 76   :                 // update the device power level if necessary
; 77   :                 PMUNLOCK();

  00110	eb000000	 bl          PmUnlock

; 78   :                 PMLOGMSG(ZONE_REQUIRE, (_T("%s: notifying 0x%08x ('%s')\r\n"),
; 79   :                     pszFname, pds, pds->pszName));

  00114	e5953440	 ldr         r3, [r5, #0x440]
  00118	e3130080	 tst         r3, #0x80
  0011c	15943000	 ldrne       r3, [r4]
  00120	159f107c	 ldrne       r1, [pc, #0x7C]
  00124	159f007c	 ldrne       r0, [pc, #0x7C]
  00128	11a02004	 movne       r2, r4
  0012c	1b000000	 blne        CeLogMsg

; 80   :                 UpdateDeviceState(pds);

  00130	e1a00004	 mov         r0, r4
  00134	eb000000	 bl          UpdateDeviceState

; 81   :                 PMLOCK();

  00138	eb000000	 bl          PmLock

; 82   :                 
; 83   :                 // is the device still part of a list?
; 84   :                 if(pds->pListHead == NULL) {

  0013c	e5943064	 ldr         r3, [r4, #0x64]
  00140	e3530000	 cmp         r3, #0
  00144	1a00000a	 bne         |$LN3@UpdateRequ|

; 85   :                     // device disappeared while we were accessing it
; 86   :                     PMLOGMSG(ZONE_WARN || ZONE_DEVICE, 
; 87   :                         (_T("%s: device '%s' removed during update\r\n"), pszFname,
; 88   :                         pds->pszName));

  00148	e5953440	 ldr         r3, [r5, #0x440]
  0014c	e3130002	 tst         r3, #2
  00150	1a000001	 bne         |$LN22@UpdateRequ|
  00154	e3130010	 tst         r3, #0x10
  00158	0a000003	 beq         |$LN23@UpdateRequ|
  0015c		 |$LN22@UpdateRequ|
  0015c	e5942000	 ldr         r2, [r4]
  00160	e59f103c	 ldr         r1, [pc, #0x3C]
  00164	e59f0034	 ldr         r0, [pc, #0x34]
  00168	eb000000	 bl          CeLogMsg
  0016c		 |$LN23@UpdateRequ|

; 89   :                     fDeviceRemoved = TRUE;

  0016c	e3a06001	 mov         r6, #1

; 90   :                 } else {

  00170	ea000000	 b           |$LN2@UpdateRequ|
  00174		 |$LN3@UpdateRequ|

; 91   :                     // save the next pointer so we don't try to
; 92   :                     // dereference pds after decrementing its use count.
; 93   :                     pdsNext = pds->pNext;

  00174	e5947068	 ldr         r7, [r4, #0x68]
  00178		 |$LN2@UpdateRequ|

; 94   :                 }
; 95   :                 
; 96   :                 // done with the pointer, although we can still
; 97   :                 // check if it's null
; 98   :                 DeviceStateDecRef(pds);

  00178	e1a00004	 mov         r0, r4
  0017c	eb000000	 bl          DeviceStateDecRef

; 99   :                 
; 100  :                 // on to the next device, unless device removed
; 101  :                 if(!fDeviceRemoved) pds = pdsNext;

  00180	e3560000	 cmp         r6, #0
  00184	1affffda	 bne         |$LL8@UpdateRequ|
  00188	e1a04007	 mov         r4, r7

; 69   :             while(!fDeviceRemoved && pds != NULL) {

  0018c	eaffffda	 b           |$LL5@UpdateRequ|
  00190		 |$LN28@UpdateRequ|

; 102  :             }
; 103  :         } while(fDeviceRemoved || pds != NULL);
; 104  :         
; 105  :         PMUNLOCK();

  00190	eb000000	 bl          PmUnlock
  00194		 |$LN9@UpdateRequ|

; 106  :     }
; 107  : }

  00194	e28dd028	 add         sp, sp, #0x28
  00198	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0019c	e12fff1e	 bx          lr
  001a0		 |$LN34@UpdateRequ|
  001a0		 |$LN35@UpdateRequ|
  001a0	00000000	 DCD         |??_C@_1FA@BLKCCPJO@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAr?$AAe?$AAm?$AAo?$AAv?$AAe?$AAd?$AA?5?$AAd?$AAu?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAu@|
  001a4		 |$LN36@UpdateRequ|
  001a4	00000000	 DCD         |??_C@_1DC@PGOLOMKN@?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAs?$AA?$AA@|
  001a8		 |$LN37@UpdateRequ|
  001a8	00000000	 DCD         |??_C@_1DM@KKMCPELB@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAn?$AAo?$AAt?$AAi?$AAf?$AAy?$AAi?$AAn?$AAg?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  001ac		 |$LN38@UpdateRequ|
  001ac	00000000	 DCD         |dpCurSettings|
  001b0		 |$LN39@UpdateRequ|
  001b0	00000000	 DCD         |??_C@_1BM@MOOMGNKD@?$AA?$DM?$AAA?$AAl?$AAl?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAs?$AA?$DO?$AA?$AA@|
  001b4		 |$LN40@UpdateRequ|
  001b4	00000000	 DCD         |??_C@_1JE@HGEMFFFP@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAu?$AAp?$AAd?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAo?$AAf?$AA?5?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?9@|
  001b8		 |$M33714|

			 ENDP  ; |UpdateRequirementDevices|

	EXPORT	|DeleteProcessRequirements|
	EXPORT	|??_C@_1DE@CEKPIGEL@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@KOLHFJIM@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAd?$AAe?$AAl?$AAe?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5@| [ DATA ] ; `string'
	IMPORT	|PmLeaveUpdate|
	IMPORT	|DeviceIdDestroy|
	IMPORT	|PowerRestrictionDestroy|
	IMPORT	|PowerRestrictionRemList|
	IMPORT	|DeviceIdClone|
	IMPORT	|PmEnterUpdate|
	IMPORT	|gpFloorDx|

  00000			 AREA	 |.pdata|, PDATA
|$T33741| DCD	|$LN21@DeleteProc|
	DCD	0x40003401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@CEKPIGEL@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "i", 0x0, "r"
	DCB	0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "s"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@KOLHFJIM@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAd?$AAe?$AAl?$AAe?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "l"
	DCB	0x0, "e", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "i", 0x0, "r"
	DCB	0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "p"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DeleteProcessRequirements| PROC

; 113  : {

  00000		 |$LN21@DeleteProc|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M33738|
  00004	e1a07000	 mov         r7, r0

; 114  :     BOOL fDone = FALSE;

  00008	e3a06000	 mov         r6, #0

; 115  : 
; 116  : #ifndef SHIP_BUILD
; 117  :     SETFNAME(_T("DeleteProcessRequirements"));
; 118  : #endif
; 119  : 
; 120  :     PMENTERUPDATE();

  0000c	eb000000	 bl          PmEnterUpdate
  00010	e59f90b4	 ldr         r9, [pc, #0xB4]
  00014	e59f80ac	 ldr         r8, [pc, #0xAC]
  00018		 |$LL9@DeleteProc|

; 121  :     
; 122  :     while(!fDone) {
; 123  :         PDEVICE_POWER_RESTRICTION pdpr;
; 124  :         
; 125  :         // a process is going away, clean up its resources if there are any
; 126  :         PMLOCK();

  00018	eb000000	 bl          PmLock

; 127  :         for(pdpr = gpFloorDx; pdpr != NULL; pdpr = pdpr->pNext) {

  0001c	e5983000	 ldr         r3, [r8]
  00020	ea000003	 b           |$LN18@DeleteProc|
  00024		 |$LL7@DeleteProc|

; 128  :             // does the terminating process own this requirement?
; 129  :             if(pdpr->hOwner == hProcess) {

  00024	e5943004	 ldr         r3, [r4, #4]
  00028	e1530007	 cmp         r3, r7
  0002c	0a000003	 beq         |$LN16@DeleteProc|
  00030	e5943014	 ldr         r3, [r4, #0x14]
  00034		 |$LN18@DeleteProc|
  00034	e1b04003	 movs        r4, r3
  00038	1afffff9	 bne         |$LL7@DeleteProc|
  0003c	ea000017	 b           |$LN2@DeleteProc|
  00040		 |$LN16@DeleteProc|

; 130  :                 // clone the device identifier associated with the requirement
; 131  :                 // so that we can update affected devices after removing the
; 132  :                 // restriction.
; 133  :                 PDEVICEID pDeviceId = DeviceIdClone(pdpr->pDeviceId);

  00040	e5940000	 ldr         r0, [r4]
  00044	eb000000	 bl          DeviceIdClone

; 134  :                 
; 135  :                 // delete the requirement
; 136  :                 PMLOGMSG(ZONE_REQUIRE, 
; 137  :                     (_T("%s: deleting requirement 0x%08x for process 0x%08x\r\n"),
; 138  :                     pszFname, pdpr, hProcess));

  00048	e5993440	 ldr         r3, [r9, #0x440]
  0004c	e1a05000	 mov         r5, r0
  00050	e3130080	 tst         r3, #0x80
  00054	159f1068	 ldrne       r1, [pc, #0x68]
  00058	159f0060	 ldrne       r0, [pc, #0x60]
  0005c	11a03007	 movne       r3, r7
  00060	11a02004	 movne       r2, r4
  00064	1b000000	 blne        CeLogMsg

; 139  :                 if(PowerRestrictionRemList(&gpFloorDx, pdpr)) {

  00068	e1a01004	 mov         r1, r4
  0006c	e1a00008	 mov         r0, r8
  00070	eb000000	 bl          PowerRestrictionRemList
  00074	e3500000	 cmp         r0, #0

; 140  :                     PowerRestrictionDestroy(pdpr);

  00078	11a00004	 movne       r0, r4
  0007c	1b000000	 blne        PowerRestrictionDestroy

; 141  :                 }
; 142  :                 
; 143  :                 // update any affected devices
; 144  :                 if(pDeviceId != NULL) {

  00080	e3550000	 cmp         r5, #0
  00084	0a000005	 beq         |$LN2@DeleteProc|

; 145  :                     PMUNLOCK();

  00088	eb000000	 bl          PmUnlock

; 146  :                     UpdateRequirementDevices(pDeviceId);

  0008c	e1a00005	 mov         r0, r5
  00090	eb000000	 bl          UpdateRequirementDevices

; 147  :                     DeviceIdDestroy(pDeviceId);

  00094	e1a00005	 mov         r0, r5
  00098	eb000000	 bl          DeviceIdDestroy

; 148  :                     PMLOCK();

  0009c	eb000000	 bl          PmLock
  000a0		 |$LN2@DeleteProc|

; 149  :                 }
; 150  :                 
; 151  :                 // start again at the start of the list, since we had
; 152  :                 // to unlock to handle the device.  We will eventually
; 153  :                 // run out of requirements imposed by this process.
; 154  :                 break;
; 155  :             }
; 156  :         }
; 157  :         PMUNLOCK();

  000a0	eb000000	 bl          PmUnlock

; 158  :         
; 159  :         // did we get to the end of the list?
; 160  :         if(pdpr == NULL) {

  000a4	e3540000	 cmp         r4, #0

; 161  :             // yes, we're all done now
; 162  :             fDone = TRUE;

  000a8	03a06001	 moveq       r6, #1
  000ac	e3560000	 cmp         r6, #0
  000b0	0affffd8	 beq         |$LL9@DeleteProc|

; 163  :         }
; 164  :     }
; 165  : 
; 166  :     PMLEAVEUPDATE();

  000b4	eb000000	 bl          PmLeaveUpdate

; 167  : }

  000b8	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN22@DeleteProc|
  000c0		 |$LN23@DeleteProc|
  000c0	00000000	 DCD         |??_C@_1GK@KOLHFJIM@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAd?$AAe?$AAl?$AAe?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5@|
  000c4		 |$LN24@DeleteProc|
  000c4	00000000	 DCD         |??_C@_1DE@CEKPIGEL@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAe?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAs?$AA?$AA@|
  000c8		 |$LN25@DeleteProc|
  000c8	00000000	 DCD         |gpFloorDx|
  000cc		 |$LN26@DeleteProc|
  000cc	00000000	 DCD         |dpCurSettings|
  000d0		 |$M33739|

			 ENDP  ; |DeleteProcessRequirements|

	EXPORT	|PmReleasePowerRequirement|
	EXPORT	|??_C@_1CG@EPNLEKEF@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@OMDGBEEH@?$AAP?$AAm?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@FHNKDJNL@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| [ DATA ] ; `string'
	IMPORT	|GetCallerProcess|
	IMPORT	|PowerRestrictionCheckList|

  00000			 AREA	 |.pdata|, PDATA
|$T33763| DCD	|$LN14@PmReleaseP|
	DCD	0x40003f01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@EPNLEKEF@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t"
	DCB	0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@OMDGBEEH@?$AAP?$AAm?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?$AA@| DCB "P"
	DCB	0x0, "m", 0x0, "R", 0x0, "e", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "s", 0x0, "e", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "i"
	DCB	0x0, "r", 0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@FHNKDJNL@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "i"
	DCB	0x0, "r", 0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PmReleasePowerRequirement| PROC

; 175  : {

  00000		 |$LN14@PmReleaseP|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M33760|
  00004	e1a05000	 mov         r5, r0

; 176  :     DWORD dwStatus = ERROR_INVALID_HANDLE;
; 177  :     PDEVICE_POWER_RESTRICTION pdpr = (PDEVICE_POWER_RESTRICTION) h;
; 178  :     PDEVICEID pDeviceId = NULL;
; 179  : 
; 180  : #ifndef SHIP_BUILD
; 181  :     SETFNAME(_T("PmReleasePowerRequirement"));
; 182  : #endif
; 183  : 
; 184  :     UnusedParameter(dwFlags);
; 185  : 
; 186  :     PMLOGMSG(ZONE_REQUIRE || ZONE_API, (_T("%s: releasing requirement 0x%08x\r\n"), 
; 187  :         pszFname, h));

  00008	e59f70e8	 ldr         r7, [pc, #0xE8]
  0000c	e3a04006	 mov         r4, #6
  00010	e3a06000	 mov         r6, #0
  00014	e5973440	 ldr         r3, [r7, #0x440]
  00018	e3130080	 tst         r3, #0x80
  0001c	1a000001	 bne         |$LN7@PmReleaseP|
  00020	e3130b02	 tst         r3, #2, 22
  00024	0a000003	 beq         |$LN8@PmReleaseP|
  00028		 |$LN7@PmReleaseP|
  00028	e59f00c4	 ldr         r0, [pc, #0xC4]
  0002c	e59f10b4	 ldr         r1, [pc, #0xB4]
  00030	e1a02005	 mov         r2, r5
  00034	eb000000	 bl          CeLogMsg
  00038		 |$LN8@PmReleaseP|

; 188  : 
; 189  :     PMENTERUPDATE();

  00038	eb000000	 bl          PmEnterUpdate

; 190  :     PMLOCK();

  0003c	eb000000	 bl          PmLock

; 191  : 
; 192  :     // look for the entry.  If it's valid make sure that it has the same owner.
; 193  :     BOOL fFound = PowerRestrictionCheckList(gpFloorDx, pdpr);

  00040	e59f80a8	 ldr         r8, [pc, #0xA8]
  00044	e1a01005	 mov         r1, r5
  00048	e5980000	 ldr         r0, [r8]
  0004c	eb000000	 bl          PowerRestrictionCheckList
  00050	e3500000	 cmp         r0, #0

; 194  :     if(fFound) {

  00054	0a00000c	 beq         |$LN2@PmReleaseP|

; 195  :         // don't allow the caller to delete somebody else's requirement
; 196  :         if(pdpr->hOwner == GetCallerProcess()) {

  00058	eb000000	 bl          GetCallerProcess
  0005c	e5953004	 ldr         r3, [r5, #4]
  00060	e1530000	 cmp         r3, r0
  00064	1a000008	 bne         |$LN2@PmReleaseP|

; 197  :             // clone the device identifier associated with the requirement
; 198  :             // so that we can update affected devices after removing the
; 199  :             // restriction.
; 200  :             pDeviceId = DeviceIdClone(pdpr->pDeviceId);

  00068	e5950000	 ldr         r0, [r5]
  0006c	eb000000	 bl          DeviceIdClone
  00070	e1a06000	 mov         r6, r0

; 201  : 
; 202  :             // delete the restriction
; 203  :             fFound = PowerRestrictionRemList(&gpFloorDx, pdpr);

  00074	e1a00008	 mov         r0, r8
  00078	e1a01005	 mov         r1, r5
  0007c	eb000000	 bl          PowerRestrictionRemList
  00080	e3500000	 cmp         r0, #0

; 204  :             DEBUGCHK(fFound);
; 205  :             if(fFound) {
; 206  :                 PowerRestrictionDestroy(pdpr);

  00084	11a00005	 movne       r0, r5
  00088	1b000000	 blne        PowerRestrictionDestroy
  0008c		 |$LN2@PmReleaseP|

; 207  :             }
; 208  :         }
; 209  :     }
; 210  : 
; 211  :     PMUNLOCK();

  0008c	eb000000	 bl          PmUnlock

; 212  : 
; 213  :     // update any affected devices
; 214  :     if(pDeviceId) {

  00090	e3560000	 cmp         r6, #0
  00094	0a000004	 beq         |$LN1@PmReleaseP|

; 215  :         UpdateRequirementDevices(pDeviceId);

  00098	e1a00006	 mov         r0, r6
  0009c	eb000000	 bl          UpdateRequirementDevices

; 216  :         DeviceIdDestroy(pDeviceId);

  000a0	e1a00006	 mov         r0, r6
  000a4	eb000000	 bl          DeviceIdDestroy

; 217  :         dwStatus = ERROR_SUCCESS;

  000a8	e3a04000	 mov         r4, #0
  000ac		 |$LN1@PmReleaseP|

; 218  :     }
; 219  : 
; 220  :     PMLEAVEUPDATE();

  000ac	eb000000	 bl          PmLeaveUpdate

; 221  : 
; 222  :     PMLOGMSG((dwStatus != ERROR_SUCCESS && ZONE_WARN) || ZONE_API, 
; 223  :         (_T("%s: returning %d\r\n"), pszFname, dwStatus));

  000b0	e5973440	 ldr         r3, [r7, #0x440]
  000b4	e3540000	 cmp         r4, #0
  000b8	0a000001	 beq         |$LN9@PmReleaseP|
  000bc	e3130002	 tst         r3, #2
  000c0	1a000001	 bne         |$LN10@PmReleaseP|
  000c4		 |$LN9@PmReleaseP|
  000c4	e3130b02	 tst         r3, #2, 22
  000c8	0a000003	 beq         |$LN11@PmReleaseP|
  000cc		 |$LN10@PmReleaseP|
  000cc	e59f0018	 ldr         r0, [pc, #0x18]
  000d0	e59f1010	 ldr         r1, [pc, #0x10]
  000d4	e1a02004	 mov         r2, r4
  000d8	eb000000	 bl          CeLogMsg
  000dc		 |$LN11@PmReleaseP|

; 224  :     return dwStatus;
; 225  : }

  000dc	e1a00004	 mov         r0, r4
  000e0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000e4	e12fff1e	 bx          lr
  000e8		 |$LN15@PmReleaseP|
  000e8		 |$LN16@PmReleaseP|
  000e8	00000000	 DCD         |??_C@_1DE@OMDGBEEH@?$AAP?$AAm?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?$AA@|
  000ec		 |$LN17@PmReleaseP|
  000ec	00000000	 DCD         |??_C@_1CG@EPNLEKEF@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  000f0		 |$LN18@PmReleaseP|
  000f0	00000000	 DCD         |gpFloorDx|
  000f4		 |$LN19@PmReleaseP|
  000f4	00000000	 DCD         |??_C@_1EG@FHNKDJNL@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@|
  000f8		 |$LN20@PmReleaseP|
  000f8	00000000	 DCD         |dpCurSettings|
  000fc		 |$M33761|

			 ENDP  ; |PmReleasePowerRequirement|

	EXPORT	|PmSetPowerRequirement|
	EXPORT	|??_C@_1EK@KBCPAFO@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAi?$AAs?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@IPJPBNOH@?$AAP?$AAm?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@MEMIAAOD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAD?$AA?$CF?$AAd?$AA?5?$AAr?$AAe@| [ DATA ] ; `string'
	IMPORT	|SetLastError|
	IMPORT	|gpSystemPowerState|
	IMPORT	|PowerRestrictionAddList|
	IMPORT	|PowerRestrictionCreate|
	IMPORT	|DeviceIdParseNameString|
	IMPORT	|wcscmp|

  00000			 AREA	 |.pdata|, PDATA
|$T33795| DCD	|$LN20@PmSetPower|
	DCD	0x40006402

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@KBCPAFO@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAi?$AAs?$AA?5@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t"
	DCB	0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "i", 0x0, "s"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@IPJPBNOH@?$AAP?$AAm?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?$AA@| DCB "P"
	DCB	0x0, "m", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "P", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, "R", 0x0, "e", 0x0, "q"
	DCB	0x0, "u", 0x0, "i", 0x0, "r", 0x0, "e", 0x0, "m", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@MEMIAAOD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAD?$AA?$CF?$AAd?$AA?5?$AAr?$AAe@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "D", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "i", 0x0, "r", 0x0, "e"
	DCB	0x0, "m", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PmSetPowerRequirement| PROC

; 239  : {

  00000		 |$LN20@PmSetPower|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M33792|
  00008	e1a0b003	 mov         r11, r3
  0000c	e1a0a002	 mov         r10, r2
  00010	e1a07001	 mov         r7, r1
  00014	e1a09000	 mov         r9, r0

; 240  :     HANDLE hRequirement = NULL;

  00018	e3a05000	 mov         r5, #0

; 241  :     BOOL fUpdate = FALSE;

  0001c	e3a08000	 mov         r8, #0

; 242  :     PDEVICEID pdi = NULL;

  00020	e3a06000	 mov         r6, #0

; 243  :     HANDLE hOwner = GetCallerProcess();

  00024	eb000000	 bl          GetCallerProcess

; 244  :     DWORD dwStatus = ERROR_SUCCESS;
; 245  : 
; 246  : #ifndef SHIP_BUILD
; 247  :     SETFNAME(_T("PmSetPowerRequirement"));
; 248  : #endif
; 249  : 
; 250  :     UnusedParameter(dwStateFlags);
; 251  : 
; 252  :     PMLOGMSG(ZONE_REQUIRE || ZONE_API, (_T("%s: creating device state D%d requirement\r\n"),
; 253  :         pszFname, reqDx));

  00028	e59f2150	 ldr         r2, [pc, #0x150]
  0002c	e1a03000	 mov         r3, r0
  00030	e58d3004	 str         r3, [sp, #4]
  00034	e5921440	 ldr         r1, [r2, #0x440]
  00038	e3a04000	 mov         r4, #0
  0003c	e3110080	 tst         r1, #0x80
  00040	1a000001	 bne         |$LN12@PmSetPower|
  00044	e3110b02	 tst         r1, #2, 22
  00048	0a000003	 beq         |$LN13@PmSetPower|
  0004c		 |$LN12@PmSetPower|
  0004c	e59f0138	 ldr         r0, [pc, #0x138]
  00050	e59f1120	 ldr         r1, [pc, #0x120]
  00054	e1a02007	 mov         r2, r7
  00058	eb000000	 bl          CeLogMsg
  0005c		 |$LN13@PmSetPower|

; 254  : 
; 255  :     PMENTERUPDATE();

  0005c	eb000000	 bl          PmEnterUpdate

; 256  : 
; 257  :     // sanity check parameters
; 258  :     if(pvDevice == NULL 
; 259  :     || (reqDx < D0 || reqDx > D4)
; 260  :     || (pdi = DeviceIdParseNameString((LPCTSTR) pvDevice, dwDeviceFlags)) == NULL
; 261  :     || GetDeviceListFromClass(pdi->pGuid) == NULL) {

  00060	e3590000	 cmp         r9, #0
  00064	0a000029	 beq         |$LN8@PmSetPower|
  00068	e3570004	 cmp         r7, #4
  0006c	8a000027	 bhi         |$LN8@PmSetPower|
  00070	e1a0100a	 mov         r1, r10
  00074	e1a00009	 mov         r0, r9
  00078	eb000000	 bl          DeviceIdParseNameString
  0007c	e1b06000	 movs        r6, r0
  00080	0a000022	 beq         |$LN8@PmSetPower|
  00084	e5960000	 ldr         r0, [r6]
  00088	eb000000	 bl          GetDeviceListFromClass
  0008c	e3500000	 cmp         r0, #0
  00090	0a00001e	 beq         |$LN8@PmSetPower|

; 263  :     }
; 264  : 
; 265  :     // if parameters were ok then proceed
; 266  :     if(dwStatus == ERROR_SUCCESS) {
; 267  :         // mask off flags we don't need to keep
; 268  :         dwDeviceFlags &= POWER_FORCE;
; 269  : 
; 270  :         PMLOCK();

  00094	eb000000	 bl          PmLock

; 271  :         
; 272  :         // create a new restriction structure
; 273  :         PDEVICE_POWER_RESTRICTION pdpr = PowerRestrictionCreate(pdi, hOwner, reqDx, 
; 274  :             (LPCTSTR) pvSystemState, dwDeviceFlags);

  00098	e59d1004	 ldr         r1, [sp, #4]
  0009c	e20a3a01	 and         r3, r10, #1, 20
  000a0	e58d3000	 str         r3, [sp]
  000a4	e1a0300b	 mov         r3, r11
  000a8	e1a02007	 mov         r2, r7
  000ac	e1a00006	 mov         r0, r6
  000b0	eb000000	 bl          PowerRestrictionCreate
  000b4	e1b05000	 movs        r5, r0

; 275  :         if(pdpr == NULL) {
; 276  :             dwStatus = ERROR_NOT_ENOUGH_MEMORY;
; 277  :         } else {
; 278  :             PowerRestrictionAddList(&gpFloorDx, pdpr);

  000b8	159f00c8	 ldrne       r0, [pc, #0xC8]
  000bc	11a01005	 movne       r1, r5
  000c0	03a04008	 moveq       r4, #8
  000c4	1b000000	 blne        PowerRestrictionAddList

; 279  :         }
; 280  :         hRequirement = (HANDLE) pdpr;
; 281  :         
; 282  :         // should we update the device's power state?
; 283  :         if(pdpr !=NULL && 
; 284  :                 (pdpr->pszSystemState == NULL || _tcscmp(pdpr->pszSystemState, gpSystemPowerState->pszName) == 0)) {

  000c8	e3550000	 cmp         r5, #0
  000cc	0a000009	 beq         |$LN4@PmSetPower|
  000d0	e595300c	 ldr         r3, [r5, #0xC]
  000d4	e1b00003	 movs        r0, r3
  000d8	0a000005	 beq         |$LN3@PmSetPower|
  000dc	e59f30a0	 ldr         r3, [pc, #0xA0]
  000e0	e5933000	 ldr         r3, [r3]
  000e4	e5931000	 ldr         r1, [r3]
  000e8	eb000000	 bl          wcscmp
  000ec	e3500000	 cmp         r0, #0
  000f0	1a000000	 bne         |$LN4@PmSetPower|
  000f4		 |$LN3@PmSetPower|

; 285  :             fUpdate = TRUE;

  000f4	e3a08001	 mov         r8, #1
  000f8		 |$LN4@PmSetPower|

; 286  :         }
; 287  :         
; 288  :         PMUNLOCK();

  000f8	eb000000	 bl          PmUnlock

; 289  :         
; 290  :         // if the update flag is set, we should update the device power for
; 291  :         // all matching devices.  Whether this works or not doesn't affect the
; 292  :         // return code from this API, since the restriction has been successfully
; 293  :         // put into place.
; 294  :         if(fUpdate) {

  000fc	e3580000	 cmp         r8, #0
  00100	0a000003	 beq         |$LN2@PmSetPower|

; 295  :             UpdateRequirementDevices(pdi);

  00104	e1a00006	 mov         r0, r6
  00108	eb000000	 bl          UpdateRequirementDevices
  0010c	ea000000	 b           |$LN2@PmSetPower|
  00110		 |$LN8@PmSetPower|

; 262  :         dwStatus = ERROR_INVALID_PARAMETER;

  00110	e3a04057	 mov         r4, #0x57

; 295  :             UpdateRequirementDevices(pdi);

  00114		 |$LN2@PmSetPower|

; 296  :         }
; 297  :     }
; 298  : 
; 299  :     PMLEAVEUPDATE();

  00114	eb000000	 bl          PmLeaveUpdate

; 300  : 
; 301  :     // release resources
; 302  :     if(pdi != NULL) DeviceIdDestroy(pdi);

  00118	e3560000	 cmp         r6, #0
  0011c	11a00006	 movne       r0, r6
  00120	1b000000	 blne        DeviceIdDestroy

; 303  : 
; 304  :     // return handle and set global status
; 305  :     PMLOGMSG(ZONE_REQUIRE || ZONE_API || (dwStatus != ERROR_SUCCESS && ZONE_WARN),
; 306  :         (_T("%s: returning 0x%08x, status is %d\r\n"), pszFname,
; 307  :         hRequirement, dwStatus));

  00124	e59f3054	 ldr         r3, [pc, #0x54]
  00128	e5933440	 ldr         r3, [r3, #0x440]
  0012c	e3130080	 tst         r3, #0x80
  00130	1a000005	 bne         |$LN14@PmSetPower|
  00134	e3130b02	 tst         r3, #2, 22
  00138	1a000003	 bne         |$LN14@PmSetPower|
  0013c	e3540000	 cmp         r4, #0
  00140	0a000006	 beq         |$LN16@PmSetPower|
  00144	e3130002	 tst         r3, #2
  00148	0a000004	 beq         |$LN16@PmSetPower|
  0014c		 |$LN14@PmSetPower|
  0014c	e59f0028	 ldr         r0, [pc, #0x28]
  00150	e59f1020	 ldr         r1, [pc, #0x20]
  00154	e1a03004	 mov         r3, r4
  00158	e1a02005	 mov         r2, r5
  0015c	eb000000	 bl          CeLogMsg
  00160		 |$LN16@PmSetPower|

; 308  :     SetLastError(dwStatus);

  00160	e1a00004	 mov         r0, r4
  00164	eb000000	 bl          SetLastError

; 309  :     return hRequirement;
; 310  : }

  00168	e1a00005	 mov         r0, r5
  0016c	e28dd008	 add         sp, sp, #8
  00170	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00174	e12fff1e	 bx          lr
  00178		 |$LN21@PmSetPower|
  00178		 |$LN22@PmSetPower|
  00178	00000000	 DCD         |??_C@_1CM@IPJPBNOH@?$AAP?$AAm?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAR?$AAe?$AAq?$AAu?$AAi?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?$AA@|
  0017c		 |$LN23@PmSetPower|
  0017c	00000000	 DCD         |??_C@_1EK@KBCPAFO@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AAi?$AAs?$AA?5@|
  00180		 |$LN24@PmSetPower|
  00180	00000000	 DCD         |dpCurSettings|
  00184		 |$LN25@PmSetPower|
  00184	00000000	 DCD         |gpSystemPowerState|
  00188		 |$LN26@PmSetPower|
  00188	00000000	 DCD         |gpFloorDx|
  0018c		 |$LN27@PmSetPower|
  0018c	00000000	 DCD         |??_C@_1FI@MEMIAAOD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAD?$AA?$CF?$AAd?$AA?5?$AAr?$AAe@|
  00190		 |$M33793|

			 ENDP  ; |PmSetPowerRequirement|

	END
