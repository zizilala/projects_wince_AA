; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\PM\DLL\pmtimer.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|ResetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T33852| DCD	|$LN5@ResetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ResetEvent| PROC

; 223  : _inline BOOL ResetEvent(HANDLE h) {

  00000		 |$LN5@ResetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M33849|

; 224  : 	return EventModify(h,EVENT_RESET);

  00004	e3a01002	 mov         r1, #2
  00008	eb000000	 bl          EventModify

; 225  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M33850|

			 ENDP  ; |ResetEvent|

	EXPORT	|SetEvent|

  00000			 AREA	 |.pdata|, PDATA
|$T33862| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M33859|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M33860|

			 ENDP  ; |SetEvent|

	EXPORT	|GetCurrentThread|

  00000			 AREA	 |.pdata|, PDATA
|$T33871| DCD	|$LN5@GetCurrent|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentThread| PROC

; 351  : _inline HANDLE GetCurrentThread(void) {

  00000		 |$LN5@GetCurrent|
  00000		 |$M33868|

; 352  : 	return ((HANDLE)(SH_CURTHREAD+SYS_HANDLE_BASE));

  00000	e3a00041	 mov         r0, #0x41

; 353  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M33869|

			 ENDP  ; |GetCurrentThread|

	EXPORT	|GetCurrentThreadId|
	IMPORT	|__GetUserKData|

  00000			 AREA	 |.pdata|, PDATA
|$T33880| DCD	|$LN5@GetCurrent@2|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentThreadId| PROC

; 369  : _inline DWORD GetCurrentThreadId(void) {

  00000		 |$LN5@GetCurrent@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M33877|

; 370  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURTHREAD * sizeof(HANDLE)));

  00004	e3a00008	 mov         r0, #8
  00008	eb000000	 bl          __GetUserKData

; 371  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M33878|

			 ENDP  ; |GetCurrentThreadId|

	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|CeLogData|
	IMPORT	|StringCchLengthW|
	IMPORT	|StringCchVPrintfW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|
; File c:\wince600\public\common\sdk\inc\celog.h

  00000			 AREA	 |.pdata|, PDATA
|$T33894| DCD	|$LN7@CeLogMsg|
	DCD	0xc0002a04

  00000			 AREA	 |.xdata|, DATA
|$T33890| DCD	0xffffffe0
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T33890|

  00008		 |CeLogMsg| PROC

; 1015 : {

  00008		 |$LN7@CeLogMsg|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d000f	 stmdb       sp!, {r0 - r3}
  00010	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00014	e24dde22	 sub         sp, sp, #0x22, 28
  00018		 |$M33891|
  00018	e58d022c	 str         r0, [sp, #0x22C]
  0001c	e59f3088	 ldr         r3, [pc, #0x88]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d321c	 str         r3, [sp, #0x21C]

; 1016 :     va_list arglist;
; 1017 :     WCHAR   szTemp[MAX_PATH];
; 1018 :     size_t  cchLen;
; 1019 :     HRESULT hr;
; 1020 : 
; 1021 :     // Compose a single string using the input args
; 1022 :     va_start(arglist, szFormat);
; 1023 :     hr = StringCchVPrintfW(szTemp, MAX_PATH, szFormat, arglist);

  00028	e1a02000	 mov         r2, r0
  0002c	e28d0014	 add         r0, sp, #0x14
  00030	e28d3e23	 add         r3, sp, #0x23, 28
  00034	e3a01f41	 mov         r1, #0x41, 30
  00038	eb000000	 bl          StringCchVPrintfW
  0003c	e3500000	 cmp         r0, #0

; 1024 :     if (SUCCEEDED(hr)) {

  00040	4a000014	 bmi         |$LN1@CeLogMsg|

; 1025 :         hr = StringCchLengthW(szTemp, MAX_PATH, &cchLen);

  00044	e28d2010	 add         r2, sp, #0x10
  00048	e3a01f41	 mov         r1, #0x41, 30
  0004c	e28d0014	 add         r0, sp, #0x14
  00050	eb000000	 bl          StringCchLengthW
  00054	e3500000	 cmp         r0, #0

; 1026 :         if (SUCCEEDED(hr)) {

  00058	4a00000e	 bmi         |$LN1@CeLogMsg|

; 1027 :             CeLogData(TRUE, CELID_RAW_WCHAR, szTemp, (WORD)((cchLen + 1) * sizeof(WCHAR)),
; 1028 :                       0, CELZONE_ALWAYSON, 0, FALSE);

  0005c	e59d3010	 ldr         r3, [sp, #0x10]
  00060	e3a04101	 mov         r4, #1, 2
  00064	e3a0e000	 mov         lr, #0
  00068	e2833001	 add         r3, r3, #1
  0006c	e1a03083	 mov         r3, r3, lsl #1
  00070	e1a03803	 mov         r3, r3, lsl #16
  00074	e1a03823	 mov         r3, r3, lsr #16
  00078	e28d2014	 add         r2, sp, #0x14
  0007c	e3a0104a	 mov         r1, #0x4A
  00080	e3a00001	 mov         r0, #1
  00084	e58de00c	 str         lr, [sp, #0xC]
  00088	e58de008	 str         lr, [sp, #8]
  0008c	e58d4004	 str         r4, [sp, #4]
  00090	e58de000	 str         lr, [sp]
  00094	eb000000	 bl          CeLogData
  00098		 |$LN1@CeLogMsg|
  00098	e59d021c	 ldr         r0, [sp, #0x21C]
  0009c	eb000000	 bl          __security_check_cookie

; 1029 :         }
; 1030 :     }
; 1031 : }

  000a0	e28dde22	 add         sp, sp, #0x22, 28
  000a4	e89d6010	 ldmia       sp, {r4, sp, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN8@CeLogMsg|
  000ac		 |$LN9@CeLogMsg|
  000ac	00000000	 DCD         |__security_cookie|
  000b0		 |$M33892|

			 ENDP  ; |CeLogMsg|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?ActivityTimerInitList@@YAKXZ|		; ActivityTimerInitList
	EXPORT	|??_C@_1CG@EPNLEKEF@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@OELICMJG@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?8?$AA?$CF?$AAs?$AA?8@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@HFHFECPN@?$AAW?$AAa?$AAk?$AAe?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LI@OJGPOFFA@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAV?$AAa?$AAl?$AAu?$AAe?$AAE?$AAx?$AA?$CI?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?5?$AAf?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@OELEEODA@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAM?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KA@PJKODPJA@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAV?$AAa?$AAl?$AAu?$AAe?$AAE?$AAx?$AA?$CI?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?5?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@HNAHFPMO@?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@BIOIIFOI@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAc?$AAo?$AAu?$AAl?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AAs?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@PFEFPDAL@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@PFHECECI@?$AA?$CF?$AAs?$AA?2?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAr?$AAs?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|PmUnlock|
	IMPORT	|gppActivityTimers|
	IMPORT	|PmLock|
	IMPORT	|PmFree|
	IMPORT	|ActivityTimerDestroy|
	IMPORT	|RegCloseKey|
	IMPORT	|ActivityTimerCreate|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegEnumKeyExW|
	IMPORT	|PmAlloc|
	IMPORT	|dpCurSettings|
	IMPORT	|RegQueryInfoKeyW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|wsprintfW|
	IMPORT	|memset|
; File c:\wince600\platform\z2170p\src\drivers\pm\dll\pmtimer.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T33941| DCD	|$LN58@ActivityTi|
	DCD	0xc0012203

  00000			 AREA	 |.xdata|, DATA
|$T33937| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@EPNLEKEF@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t"
	DCB	0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@OELICMJG@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?8?$AA?$CF?$AAs?$AA?8@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "y", 0x0, "p", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "'"
	DCB	0x0, "%", 0x0, "s", 0x0, "'", 0x0, "'", 0x0, "%", 0x0, "s"
	DCB	0x0, "'", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@HFHFECPN@?$AAW?$AAa?$AAk?$AAe?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?$AA@| DCB "W"
	DCB	0x0, "a", 0x0, "k", 0x0, "e", 0x0, "S", 0x0, "o", 0x0, "u"
	DCB	0x0, "r", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LI@OJGPOFFA@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAV?$AAa?$AAl?$AAu?$AAe?$AAE?$AAx?$AA?$CI?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?5?$AAf?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "r", 0x0, "y", 0x0, "V"
	DCB	0x0, "a", 0x0, "l", 0x0, "u", 0x0, "e", 0x0, "E", 0x0, "x"
	DCB	0x0, "(", 0x0, "'", 0x0, "%", 0x0, "s", 0x0, "'", 0x0, "'"
	DCB	0x0, "%", 0x0, "s", 0x0, "'", 0x0, ")", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "(", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "n", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "u", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@OELEEODA@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAM?$AAs?$AA?$AA@| DCB "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t"
	DCB	0x0, "M", 0x0, "s", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KA@PJKODPJA@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAV?$AAa?$AAl?$AAu?$AAe?$AAE?$AAx?$AA?$CI?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?5?$AAo?$AAr@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "r", 0x0, "y", 0x0, "V"
	DCB	0x0, "a", 0x0, "l", 0x0, "u", 0x0, "e", 0x0, "E", 0x0, "x"
	DCB	0x0, "(", 0x0, "'", 0x0, "%", 0x0, "s", 0x0, "'", 0x0, "'"
	DCB	0x0, "%", 0x0, "s", 0x0, "'", 0x0, ")", 0x0, " ", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "n", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "u"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| DCB "T", 0x0
	DCB	"i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@HNAHFPMO@?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$AA@| DCB "A"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "r"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "L", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@BIOIIFOI@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAc?$AAo?$AAu?$AAl?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AAs?$AA?$AN@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "u"
	DCB	0x0, "l", 0x0, "d", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@PFEFPDAL@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl@| DCB "S"
	DCB	0x0, "Y", 0x0, "S", 0x0, "T", 0x0, "E", 0x0, "M", 0x0, "\\"
	DCB	0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "\\"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "\\", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@PFHECECI@?$AA?$CF?$AAs?$AA?2?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAr?$AAs?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, "\\", 0x0, "A", 0x0, "c", 0x0, "t", 0x0, "i"
	DCB	0x0, "v", 0x0, "i", 0x0, "t", 0x0, "y", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T33937|

  00008		 |?ActivityTimerInitList@@YAKXZ| PROC	; ActivityTimerInitList

; 32   : {

  00008		 |$LN58@ActivityTi|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e59fc478	 ldr         r12, [pc, #0x478]
  00010	e08dd00c	 add         sp, sp, r12
  00014		 |$M33938|
  00014	e59f346c	 ldr         r3, [pc, #0x46C]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3a40	 str         r3, [sp, #0xA40]

; 33   :     DWORD dwStatus;
; 34   :     HKEY hk = NULL;
; 35   :     TCHAR szSources[1024];
; 36   :     DWORD dwNumTimers = 0;
; 37   :     PPACTIVITY_TIMER ppatList = NULL;
; 38   : 
; 39   : #ifndef SHIP_BUILD
; 40   :     SETFNAME(_T("ActivityTimerInitList"));
; 41   : #endif
; 42   : 
; 43   :     wsprintf(szSources, _T("%s\\ActivityTimers"), PWRMGR_REG_KEY);

  00020	e59f245c	 ldr         r2, [pc, #0x45C]
  00024	e59f1454	 ldr         r1, [pc, #0x454]
  00028	e3a03000	 mov         r3, #0
  0002c	e3a0e000	 mov         lr, #0
  00030	e28d0d09	 add         r0, sp, #9, 26
  00034	e58d3034	 str         r3, [sp, #0x34]
  00038	e58de020	 str         lr, [sp, #0x20]
  0003c	eb000000	 bl          wsprintfW

; 44   :     dwStatus = RegOpenKeyEx(HKEY_LOCAL_MACHINE, szSources, 0, 0, &hk);

  00040	e28d3034	 add         r3, sp, #0x34
  00044	e58d3000	 str         r3, [sp]
  00048	e3a03000	 mov         r3, #0
  0004c	e3a02000	 mov         r2, #0
  00050	e28d1d09	 add         r1, sp, #9, 26
  00054	e3a0010a	 mov         r0, #0xA, 2
  00058	eb000000	 bl          RegOpenKeyExW
  0005c	e3500000	 cmp         r0, #0
  00060	e3a06000	 mov         r6, #0

; 45   :     if(dwStatus == ERROR_SUCCESS) {
; 46   :         // figure out how many values are associated with the key
; 47   :         dwStatus = RegQueryInfoKey(hk, NULL, NULL, NULL, &dwNumTimers, NULL, NULL, NULL,
; 48   :             NULL, NULL, NULL, NULL);

  00064	e3a03000	 mov         r3, #0
  00068	1a00000f	 bne         |$LN34@ActivityTi|
  0006c	e59d0034	 ldr         r0, [sp, #0x34]
  00070	e28de020	 add         lr, sp, #0x20
  00074	e3a02000	 mov         r2, #0
  00078	e3a01000	 mov         r1, #0
  0007c	e58d601c	 str         r6, [sp, #0x1C]
  00080	e58d6018	 str         r6, [sp, #0x18]
  00084	e58d6014	 str         r6, [sp, #0x14]
  00088	e58d6010	 str         r6, [sp, #0x10]
  0008c	e58d600c	 str         r6, [sp, #0xC]
  00090	e58d6008	 str         r6, [sp, #8]
  00094	e58d6004	 str         r6, [sp, #4]
  00098	e58de000	 str         lr, [sp]
  0009c	eb000000	 bl          RegQueryInfoKeyW

; 49   :     } else {

  000a0	e59d3020	 ldr         r3, [sp, #0x20]
  000a4	e1a04000	 mov         r4, r0
  000a8	ea000001	 b           |$LN33@ActivityTi|
  000ac		 |$LN34@ActivityTi|

; 50   :         // no timers configured in the registry
; 51   :         dwNumTimers = 0;

  000ac	e58d3020	 str         r3, [sp, #0x20]

; 52   :         dwStatus = ERROR_SUCCESS;

  000b0	e3a04000	 mov         r4, #0
  000b4		 |$LN33@ActivityTi|

; 53   :     }
; 54   : 
; 55   :     // if there are any values, allocate an array to hold them
; 56   :     if(dwStatus == ERROR_SUCCESS) {

  000b4	e59f83c0	 ldr         r8, [pc, #0x3C0]
  000b8	e3540000	 cmp         r4, #0
  000bc	1a0000d1	 bne         |$LN53@ActivityTi|

; 57   :         ppatList = (PPACTIVITY_TIMER) PmAlloc((dwNumTimers + 1) * sizeof(PACTIVITY_TIMER));

  000c0	e2833001	 add         r3, r3, #1
  000c4	e1a00103	 mov         r0, r3, lsl #2
  000c8	eb000000	 bl          PmAlloc
  000cc	e1b05000	 movs        r5, r0
  000d0	e58d503c	 str         r5, [sp, #0x3C]

; 58   :         if(ppatList == NULL) {

  000d4	1a000007	 bne         |$LN31@ActivityTi|

; 59   :             PMLOGMSG(ZONE_WARN, (_T("%s: couldn't allocate %d timers\r\n"), pszFname,
; 60   :                 dwNumTimers));

  000d8	e5983440	 ldr         r3, [r8, #0x440]
  000dc	e3130002	 tst         r3, #2
  000e0	159d2020	 ldrne       r2, [sp, #0x20]
  000e4	159f038c	 ldrne       r0, [pc, #0x38C]
  000e8	159f1360	 ldrne       r1, [pc, #0x360]
  000ec	1b000000	 blne        CeLogMsg

; 61   :             dwStatus = ERROR_NOT_ENOUGH_MEMORY;

  000f0	e3a04008	 mov         r4, #8

; 62   :         } else {

  000f4	ea0000ab	 b           |$LN52@ActivityTi|
  000f8		 |$LN31@ActivityTi|

; 63   :             memset(ppatList, 0, (dwNumTimers + 1) * sizeof(PACTIVITY_TIMER));

  000f8	e59d3020	 ldr         r3, [sp, #0x20]
  000fc	e3a01000	 mov         r1, #0
  00100	e1a00005	 mov         r0, r5
  00104	e2833001	 add         r3, r3, #1
  00108	e1a02103	 mov         r2, r3, lsl #2
  0010c	eb000000	 bl          memset

; 64   :             ppatList[dwNumTimers] = NULL;

  00110	e59d3020	 ldr         r3, [sp, #0x20]
  00114	e7856103	 str         r6, [r5, +r3, lsl #2]

; 65   :         }
; 66   :     }
; 67   : 
; 68   :     // read list of timers
; 69   :     if(dwStatus == ERROR_SUCCESS && dwNumTimers != 0) {

  00118	e59d3020	 ldr         r3, [sp, #0x20]
  0011c	e3530000	 cmp         r3, #0
  00120	0a0000b4	 beq         |$LN50@ActivityTi|

; 70   :         DWORD dwIndex = 0;

  00124	e59fa348	 ldr         r10, [pc, #0x348]
  00128	e59fb340	 ldr         r11, [pc, #0x340]
  0012c	e1a09005	 mov         r9, r5
  00130	e28d5030	 add         r5, sp, #0x30
  00134	e3a07000	 mov         r7, #0
  00138	e3a0ec01	 mov         lr, #1, 24
  0013c	e28d6024	 add         r6, sp, #0x24
  00140		 |$LL28@ActivityTi|

; 71   :         do {
; 72   :             TCHAR szName[256];
; 73   :             DWORD cbValueName = dim(szName);
; 74   :             
; 75   :             dwStatus = RegEnumKeyEx(hk, dwIndex, szName, &cbValueName, NULL,
; 76   :                 NULL, NULL, NULL);

  00140	e59d0034	 ldr         r0, [sp, #0x34]
  00144	e58de038	 str         lr, [sp, #0x38]
  00148	e3a0e000	 mov         lr, #0
  0014c	e28d3038	 add         r3, sp, #0x38
  00150	e28d2040	 add         r2, sp, #0x40
  00154	e1a01007	 mov         r1, r7
  00158	e58de00c	 str         lr, [sp, #0xC]
  0015c	e58de008	 str         lr, [sp, #8]
  00160	e58de004	 str         lr, [sp, #4]
  00164	e58de000	 str         lr, [sp]
  00168	eb000000	 bl          RegEnumKeyExW
  0016c	e1b04000	 movs        r4, r0

; 77   :             if(dwStatus == ERROR_SUCCESS) {

  00170	1a00007b	 bne         |$LN25@ActivityTi|

; 78   :                 HKEY hkSubKey = NULL;
; 79   :                 
; 80   :                 // open the subkey
; 81   :                 dwStatus = RegOpenKeyEx(hk, szName, 0, 0, &hkSubKey);

  00174	e59d0034	 ldr         r0, [sp, #0x34]
  00178	e3a0e000	 mov         lr, #0
  0017c	e3a03000	 mov         r3, #0
  00180	e3a02000	 mov         r2, #0
  00184	e28d1040	 add         r1, sp, #0x40
  00188	e58de024	 str         lr, [sp, #0x24]
  0018c	e58d6000	 str         r6, [sp]
  00190	eb000000	 bl          RegOpenKeyExW
  00194	e1b04000	 movs        r4, r0

; 82   :                 if(dwStatus == ERROR_SUCCESS) {

  00198	1a00006f	 bne         |$LN11@ActivityTi|

; 83   :                     DWORD dwSize, dwType, dwTimeout;
; 84   :                     LPTSTR pszValueName;
; 85   : 
; 86   :                     // read the timeout, expressed in seconds
; 87   :                     dwSize = sizeof(dwTimeout);
; 88   :                     pszValueName = _T("Timeout");
; 89   :                     dwStatus = RegQueryValueEx(hkSubKey, pszValueName, NULL, &dwType, (LPBYTE) &dwTimeout, 
; 90   :                         &dwSize);

  0019c	e3a0e004	 mov         lr, #4
  001a0	e59d0024	 ldr         r0, [sp, #0x24]
  001a4	e59f12c0	 ldr         r1, [pc, #0x2C0]
  001a8	e58de030	 str         lr, [sp, #0x30]
  001ac	e28de028	 add         lr, sp, #0x28
  001b0	e28d302c	 add         r3, sp, #0x2C
  001b4	e3a02000	 mov         r2, #0
  001b8	e58de000	 str         lr, [sp]
  001bc	e58d5004	 str         r5, [sp, #4]
  001c0	eb000000	 bl          RegQueryValueExW
  001c4	e1b04000	 movs        r4, r0

; 91   :                     if(dwStatus == ERROR_SUCCESS) {

  001c8	1a000015	 bne         |$LN23@ActivityTi|

; 92   :                         if(dwType != REG_DWORD || dwTimeout > MAXTIMERINTERVAL) {

  001cc	e59d602c	 ldr         r6, [sp, #0x2C]
  001d0	e59de028	 ldr         lr, [sp, #0x28]
  001d4	e3560004	 cmp         r6, #4
  001d8	1a000001	 bne         |$LN21@ActivityTi|
  001dc	e15e000b	 cmp         lr, r11
  001e0	9a00000b	 bls         |$LN22@ActivityTi|
  001e4		 |$LN21@ActivityTi|

; 93   :                             PMLOGMSG(ZONE_WARN, 
; 94   :                                 (_T("%s: RegQueryValueEx('%s'\'%s') or returned invalid type %d or invalid value %d\r\n"),
; 95   :                                 pszFname, szName, pszValueName, dwType, dwTimeout));

  001e4	e5983440	 ldr         r3, [r8, #0x440]
  001e8	e3130002	 tst         r3, #2
  001ec	0a000007	 beq         |$LN39@ActivityTi|
  001f0	e59f3274	 ldr         r3, [pc, #0x274]
  001f4	e59f1254	 ldr         r1, [pc, #0x254]
  001f8	e59f0268	 ldr         r0, [pc, #0x268]
  001fc	e28d2040	 add         r2, sp, #0x40
  00200	e58de004	 str         lr, [sp, #4]
  00204	e58d6000	 str         r6, [sp]
  00208	eb000000	 bl          CeLogMsg
  0020c	e59de028	 ldr         lr, [sp, #0x28]
  00210		 |$LN39@ActivityTi|

; 96   :                             dwStatus = ERROR_INVALID_DATA;

  00210	e3a0400d	 mov         r4, #0xD
  00214		 |$LN22@ActivityTi|

; 97   :                         }
; 98   : 
; 99   :                         // convert timeout to milliseconds
; 100  :                         dwTimeout *= 1000;

  00214	e3a02ffa	 mov         r2, #0xFA, 30
  00218	e0030e92	 mul         r3, r2, lr
  0021c	e58d3028	 str         r3, [sp, #0x28]

; 101  :                     } else {

  00220	ea00001d	 b           |$LN19@ActivityTi|
  00224		 |$LN23@ActivityTi|

; 102  :                         // no timeout in seconds, try milliseconds
; 103  :                         dwSize = sizeof(dwTimeout);
; 104  :                         pszValueName = _T("TimeoutMs");
; 105  :                         dwStatus = RegQueryValueEx(hkSubKey, pszValueName, NULL, &dwType, (LPBYTE) &dwTimeout, 
; 106  :                             &dwSize);

  00224	e3a0e004	 mov         lr, #4
  00228	e58de030	 str         lr, [sp, #0x30]
  0022c	e28de030	 add         lr, sp, #0x30
  00230	e59d0024	 ldr         r0, [sp, #0x24]
  00234	e59f1228	 ldr         r1, [pc, #0x228]
  00238	e58de004	 str         lr, [sp, #4]
  0023c	e28de028	 add         lr, sp, #0x28
  00240	e28d302c	 add         r3, sp, #0x2C
  00244	e3a02000	 mov         r2, #0
  00248	e58de000	 str         lr, [sp]
  0024c	eb000000	 bl          RegQueryValueExW
  00250	e59de028	 ldr         lr, [sp, #0x28]
  00254	e59d602c	 ldr         r6, [sp, #0x2C]
  00258	e1b04000	 movs        r4, r0

; 107  :                         if(dwStatus != ERROR_SUCCESS || dwType != REG_DWORD || dwTimeout > (MAXTIMERINTERVAL * 1000)) {

  0025c	1a000003	 bne         |$LN18@ActivityTi|
  00260	e3560004	 cmp         r6, #4
  00264	1a000001	 bne         |$LN18@ActivityTi|
  00268	e37e0f4a	 cmn         lr, #0x4A, 30
  0026c	9a00000a	 bls         |$LN19@ActivityTi|
  00270		 |$LN18@ActivityTi|

; 108  :                             PMLOGMSG(ZONE_WARN, 
; 109  :                                 (_T("%s: RegQueryValueEx('%s'\'%s') failed %d (or returned invalid type %d or invalid value %d)\r\n"),
; 110  :                                 pszFname, szName, pszValueName, dwStatus, dwType, dwTimeout));

  00270	e5983440	 ldr         r3, [r8, #0x440]
  00274	e3130002	 tst         r3, #2
  00278	159f31e4	 ldrne       r3, [pc, #0x1E4]
  0027c	159f11cc	 ldrne       r1, [pc, #0x1CC]
  00280	159f01d8	 ldrne       r0, [pc, #0x1D8]
  00284	128d2040	 addne       r2, sp, #0x40
  00288	158de008	 strne       lr, [sp, #8]
  0028c	158d6004	 strne       r6, [sp, #4]
  00290	158d4000	 strne       r4, [sp]
  00294	1b000000	 blne        CeLogMsg

; 111  :                             dwStatus = ERROR_INVALID_DATA;

  00298	e3a0400d	 mov         r4, #0xD
  0029c		 |$LN19@ActivityTi|

; 112  :                         }
; 113  :                     }
; 114  : 
; 115  :                     if(dwStatus == ERROR_SUCCESS) {

  0029c	e3540000	 cmp         r4, #0
  002a0	1a00002c	 bne         |$LN55@ActivityTi|

; 116  :                         // get wake sources
; 117  :                         dwSize = sizeof(szSources);
; 118  :                         pszValueName = _T("WakeSources");
; 119  :                         dwStatus = RegQueryValueEx(hkSubKey, pszValueName, NULL, &dwType, (LPBYTE) szSources, 
; 120  :                             &dwSize);

  002a4	e3a0eb02	 mov         lr, #2, 22
  002a8	e58de030	 str         lr, [sp, #0x30]
  002ac	e28de030	 add         lr, sp, #0x30
  002b0	e59d0024	 ldr         r0, [sp, #0x24]
  002b4	e58de004	 str         lr, [sp, #4]
  002b8	e28ded09	 add         lr, sp, #9, 26
  002bc	e28d302c	 add         r3, sp, #0x2C
  002c0	e3a02000	 mov         r2, #0
  002c4	e1a0100a	 mov         r1, r10
  002c8	e58de000	 str         lr, [sp]
  002cc	eb000000	 bl          RegQueryValueExW
  002d0	e1b04000	 movs        r4, r0

; 121  :                         if(dwStatus != ERROR_SUCCESS) {
; 122  :                             // no wake sources
; 123  :                             szSources[0] = 0;

  002d4	13a03000	 movne       r3, #0
  002d8	128dcc02	 addne       r12, sp, #2, 24
  002dc	11cc34b0	 strneh      r3, [r12, #0x40]

; 124  :                             szSources[1] = 0;

  002e0	13a03000	 movne       r3, #0
  002e4	128dcc02	 addne       r12, sp, #2, 24
  002e8	11cc34b2	 strneh      r3, [r12, #0x42]

; 125  :                             dwStatus = ERROR_SUCCESS;

  002ec	13a04000	 movne       r4, #0
  002f0	1a000011	 bne         |$LN13@ActivityTi|

; 126  :                         } else if(dwType != REG_MULTI_SZ) {

  002f4	e59d202c	 ldr         r2, [sp, #0x2C]
  002f8	e3520007	 cmp         r2, #7
  002fc	0a000009	 beq         |$LN14@ActivityTi|

; 127  :                             PMLOGMSG(ZONE_WARN, (_T("%s: invalid type %d for '%s'\'%s'\r\n"), pszFname, dwType,
; 128  :                                 szName, pszValueName));

  00300	e5983440	 ldr         r3, [r8, #0x440]
  00304	e3130002	 tst         r3, #2
  00308	159f1140	 ldrne       r1, [pc, #0x140]
  0030c	159f0148	 ldrne       r0, [pc, #0x148]
  00310	128d3040	 addne       r3, sp, #0x40
  00314	158da000	 strne       r10, [sp]
  00318	1b000000	 blne        CeLogMsg

; 129  :                             dwStatus = ERROR_INVALID_DATATYPE;

  0031c	e3a03c07	 mov         r3, #7, 24
  00320	e383400c	 orr         r4, r3, #0xC

; 130  :                         } else {

  00324	ea00000b	 b           |$LN55@ActivityTi|
  00328		 |$LN14@ActivityTi|

; 131  :                             szSources[dim(szSources) -1] = szSources[dim(szSources) -2] = 0; // Terminate MultiSZ

  00328	e3a03000	 mov         r3, #0
  0032c	e28dcc0a	 add         r12, sp, #0xA, 24
  00330	e1cc33bc	 strh        r3, [r12, #0x3C]
  00334	e3a03000	 mov         r3, #0
  00338	e1cc33be	 strh        r3, [r12, #0x3E]
  0033c		 |$LN13@ActivityTi|

; 132  :                         }
; 133  :                     }
; 134  :                     
; 135  :                     // did we get the parameters?
; 136  :                     if(dwStatus == ERROR_SUCCESS) {
; 137  :                         ppatList[dwIndex] = ActivityTimerCreate(szName, dwTimeout, szSources);

  0033c	e59d1028	 ldr         r1, [sp, #0x28]
  00340	e28d2d09	 add         r2, sp, #9, 26
  00344	e28d0040	 add         r0, sp, #0x40
  00348	eb000000	 bl          ActivityTimerCreate
  0034c	e3500000	 cmp         r0, #0

; 138  :                         if(ppatList[dwIndex] == NULL) {
; 139  :                             dwStatus = ERROR_NOT_ENOUGH_MEMORY;

  00350	03a04008	 moveq       r4, #8
  00354	e5890000	 str         r0, [r9]
  00358		 |$LN55@ActivityTi|

; 151  : 
; 152  :         // did we read all items ok?
; 153  :         if(dwStatus == ERROR_NO_MORE_ITEMS) {

  00358	e28d6024	 add         r6, sp, #0x24
  0035c		 |$LN11@ActivityTi|

; 140  :                         }
; 141  :                     }
; 142  :                 }
; 143  :                 
; 144  :                 // release the registry key
; 145  :                 RegCloseKey(hkSubKey);

  0035c	e59d0024	 ldr         r0, [sp, #0x24]
  00360	eb000000	 bl          RegCloseKey
  00364		 |$LN25@ActivityTi|

; 146  :             }
; 147  :             
; 148  :             // update the index
; 149  :             dwIndex++;

  00364	e2877001	 add         r7, r7, #1
  00368	e2899004	 add         r9, r9, #4

; 150  :         } while(dwStatus == ERROR_SUCCESS && dwIndex < dwNumTimers);

  0036c	e3540000	 cmp         r4, #0
  00370	1a000003	 bne         |$LN10@ActivityTi|
  00374	e59d3020	 ldr         r3, [sp, #0x20]
  00378	e3a0ec01	 mov         lr, #1, 24
  0037c	e1570003	 cmp         r7, r3
  00380	3affff6e	 bcc         |$LL28@ActivityTi|
  00384		 |$LN10@ActivityTi|
  00384	e3a03c01	 mov         r3, #1, 24

; 151  : 
; 152  :         // did we read all items ok?
; 153  :         if(dwStatus == ERROR_NO_MORE_ITEMS) {

  00388	e3833003	 orr         r3, r3, #3
  0038c	e59d503c	 ldr         r5, [sp, #0x3C]
  00390	e1540003	 cmp         r4, r3

; 154  :             dwStatus = ERROR_SUCCESS;

  00394	03a04000	 moveq       r4, #0

; 155  :         }
; 156  : 
; 157  :         // terminate the list with a NULL
; 158  :         ppatList[dwIndex] = NULL;

  00398	e3a03000	 mov         r3, #0

; 159  :     }
; 160  : 
; 161  :     // did we succeed?
; 162  :     if(dwStatus == ERROR_SUCCESS) {

  0039c	e3540000	 cmp         r4, #0
  003a0	e7853107	 str         r3, [r5, +r7, lsl #2]
  003a4	0a000013	 beq         |$LN50@ActivityTi|
  003a8		 |$LN52@ActivityTi|

; 166  :     } else {
; 167  :         DWORD dwIndex;
; 168  :         if(ppatList != NULL) {

  003a8	e3550000	 cmp         r5, #0
  003ac	0a000015	 beq         |$LN53@ActivityTi|

; 169  :             for(dwIndex = 0; dwIndex < dwNumTimers; dwIndex++) {

  003b0	e59d2020	 ldr         r2, [sp, #0x20]
  003b4	e3a07000	 mov         r7, #0
  003b8	e3520000	 cmp         r2, #0
  003bc	0a00000a	 beq         |$LN3@ActivityTi|
  003c0	e1a06005	 mov         r6, r5
  003c4		 |$LL5@ActivityTi|

; 170  :                 if(ppatList[dwIndex] != NULL) {

  003c4	e5963000	 ldr         r3, [r6]
  003c8	e3530000	 cmp         r3, #0
  003cc	0a000002	 beq         |$LN4@ActivityTi|

; 171  :                     ActivityTimerDestroy(ppatList[dwIndex]);

  003d0	e1a00003	 mov         r0, r3
  003d4	eb000000	 bl          ActivityTimerDestroy
  003d8	e59d2020	 ldr         r2, [sp, #0x20]
  003dc		 |$LN4@ActivityTi|
  003dc	e2877001	 add         r7, r7, #1
  003e0	e1570002	 cmp         r7, r2
  003e4	e2866004	 add         r6, r6, #4
  003e8	3afffff5	 bcc         |$LL5@ActivityTi|
  003ec		 |$LN3@ActivityTi|

; 172  :                 }
; 173  :             }
; 174  :             PmFree(ppatList);

  003ec	e1a00005	 mov         r0, r5
  003f0	eb000000	 bl          PmFree
  003f4	ea000003	 b           |$LN53@ActivityTi|
  003f8		 |$LN50@ActivityTi|

; 163  :         PMLOCK();

  003f8	eb000000	 bl          PmLock

; 164  :         gppActivityTimers = ppatList;

  003fc	e59f3054	 ldr         r3, [pc, #0x54]
  00400	e5835000	 str         r5, [r3]

; 165  :         PMUNLOCK();

  00404	eb000000	 bl          PmUnlock

; 172  :                 }
; 173  :             }
; 174  :             PmFree(ppatList);

  00408		 |$LN53@ActivityTi|

; 175  :         }
; 176  :     }
; 177  : 
; 178  :     // release resources
; 179  :     if(hk != NULL) RegCloseKey(hk);

  00408	e59d0034	 ldr         r0, [sp, #0x34]
  0040c	e3500000	 cmp         r0, #0
  00410	1b000000	 blne        RegCloseKey

; 180  : 
; 181  :     PMLOGMSG(dwStatus != ERROR_SUCCESS && ZONE_WARN,
; 182  :         (_T("%s: returning %d\r\n"), pszFname, dwStatus));

  00414	e3540000	 cmp         r4, #0
  00418	15983440	 ldrne       r3, [r8, #0x440]
  0041c	13130002	 tstne       r3, #2
  00420	159f002c	 ldrne       r0, [pc, #0x2C]
  00424	159f1024	 ldrne       r1, [pc, #0x24]
  00428	11a02004	 movne       r2, r4
  0042c	1b000000	 blne        CeLogMsg

; 183  :     return dwStatus;

  00430	e59d0a40	 ldr         r0, [sp, #0xA40]
  00434	eb000000	 bl          __security_check_cookie

; 184  : }

  00438	e1a00004	 mov         r0, r4
  0043c	e3a0cc0a	 mov         r12, #0xA, 24
  00440	e38cc044	 orr         r12, r12, #0x44
  00444	e08dd00c	 add         sp, sp, r12
  00448	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0044c	e12fff1e	 bx          lr
  00450		 |$LN59@ActivityTi|
  00450		 |$LN60@ActivityTi|
  00450	00000000	 DCD         |??_C@_1CM@HNAHFPMO@?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$AA@|
  00454		 |$LN61@ActivityTi|
  00454	00000000	 DCD         |??_C@_1CG@EPNLEKEF@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00458		 |$LN62@ActivityTi|
  00458	00000000	 DCD         |gppActivityTimers|
  0045c		 |$LN63@ActivityTi|
  0045c	00000000	 DCD         |??_C@_1EG@OELICMJG@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?8?$AA?$CF?$AAs?$AA?8@|
  00460		 |$LN64@ActivityTi|
  00460	00000000	 DCD         |??_C@_1LI@OJGPOFFA@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAV?$AAa?$AAl?$AAu?$AAe?$AAE?$AAx?$AA?$CI?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?5?$AAf?$AAa@|
  00464		 |$LN65@ActivityTi|
  00464	00000000	 DCD         |??_C@_1BE@OELEEODA@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AAM?$AAs?$AA?$AA@|
  00468		 |$LN66@ActivityTi|
  00468	00000000	 DCD         |??_C@_1KA@PJKODPJA@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAR?$AAe?$AAg?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAV?$AAa?$AAl?$AAu?$AAe?$AAE?$AAx?$AA?$CI?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?$CJ?$AA?5?$AAo?$AAr@|
  0046c		 |$LN67@ActivityTi|
  0046c	00000000	 DCD         |??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@|
  00470		 |$LN68@ActivityTi|
  00470	00418937	 DCD         0x418937
  00474		 |$LN69@ActivityTi|
  00474	00000000	 DCD         |??_C@_1BI@HFHFECPN@?$AAW?$AAa?$AAk?$AAe?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?$AA@|
  00478		 |$LN70@ActivityTi|
  00478	00000000	 DCD         |??_C@_1EE@BIOIIFOI@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAc?$AAo?$AAu?$AAl?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AA?$CF?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AAs?$AA?$AN@|
  0047c		 |$LN71@ActivityTi|
  0047c	00000000	 DCD         |dpCurSettings|
  00480		 |$LN72@ActivityTi|
  00480	00000000	 DCD         |??_C@_1CE@PFHECECI@?$AA?$CF?$AAs?$AA?2?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAr?$AAs?$AA?$AA@|
  00484		 |$LN73@ActivityTi|
  00484	00000000	 DCD         |??_C@_1EO@PFEFPDAL@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAe?$AAt?$AA?2?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl@|
  00488		 |$LN74@ActivityTi|
  00488	00000000	 DCD         |__security_cookie|
  0048c		 |$LN75@ActivityTi|
  0048c	fffff5bc	 DCD         0xfffff5bc
  00490		 |$M33939|

			 ENDP  ; |?ActivityTimerInitList@@YAKXZ|, ActivityTimerInitList

	EXPORT	|?GetNextInactivityTimeout@@YAKK@Z|	; GetNextInactivityTimeout

  00000			 AREA	 |.pdata|, PDATA
|$T33975| DCD	|$LN15@GetNextIna|
	DCD	0x40002001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetNextInactivityTimeout@@YAKK@Z| PROC ; GetNextInactivityTimeout

; 191  : {

  00000		 |$LN15@GetNextIna|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M33972|
  00004	e1a05000	 mov         r5, r0

; 192  :     DWORD dwTimeout = INFINITE;

  00008	e3e04000	 mvn         r4, #0

; 193  :     DWORD dwIndex;
; 194  :     PACTIVITY_TIMER pat;
; 195  : 
; 196  :     PMLOCK();

  0000c	eb000000	 bl          PmLock

; 197  :     for(dwIndex = 0; (pat = gppActivityTimers[dwIndex]) != NULL; dwIndex++) {

  00010	e59f0064	 ldr         r0, [pc, #0x64]
  00014	e5902000	 ldr         r2, [r0]
  00018	e5923000	 ldr         r3, [r2]
  0001c	e1b0e003	 movs        lr, r3
  00020	0a000011	 beq         |$LN6@GetNextIna|

; 192  :     DWORD dwTimeout = INFINITE;

  00024	e3a01000	 mov         r1, #0
  00028		 |$LL8@GetNextIna|

; 198  :         DWORD dwTimeLeft = pat->dwTimeLeft;

  00028	e59e3008	 ldr         r3, [lr, #8]

; 199  :         if(dwTimeLeft != INFINITE) {

  0002c	e3730001	 cmn         r3, #1
  00030	0a000009	 beq         |$LN7@GetNextIna|

; 200  :             // subtract elapsed time
; 201  :             if(dwTimeLeft < dwElapsed) {

  00034	e1530005	 cmp         r3, r5

; 202  :                 dwTimeLeft = 0;

  00038	33a03000	 movcc       r3, #0

; 203  :             } else {
; 204  :                 dwTimeLeft -= dwElapsed;

  0003c	20433005	 subcs       r3, r3, r5

; 205  :             }
; 206  : 
; 207  :             // update the timeout value
; 208  :             if(dwTimeout == INFINITE || dwTimeLeft < dwTimeout) {

  00040	e3740001	 cmn         r4, #1
  00044	0a000001	 beq         |$LN1@GetNextIna|
  00048	e1530004	 cmp         r3, r4
  0004c	2a000000	 bcs         |$LN2@GetNextIna|
  00050		 |$LN1@GetNextIna|

; 209  :                 dwTimeout = dwTimeLeft;

  00050	e1a04003	 mov         r4, r3
  00054		 |$LN2@GetNextIna|

; 210  :             }
; 211  : 
; 212  :             // update the timer
; 213  :             pat->dwTimeLeft = dwTimeLeft;

  00054	e58e3008	 str         r3, [lr, #8]
  00058	e5902000	 ldr         r2, [r0]
  0005c		 |$LN7@GetNextIna|
  0005c	e2811004	 add         r1, r1, #4
  00060	e7913002	 ldr         r3, [r1, +r2]
  00064	e1b0e003	 movs        lr, r3
  00068	1affffee	 bne         |$LL8@GetNextIna|
  0006c		 |$LN6@GetNextIna|

; 214  :         }
; 215  :     }
; 216  :     PMUNLOCK();

  0006c	eb000000	 bl          PmUnlock

; 217  : 
; 218  :     return dwTimeout;
; 219  : }

  00070	e1a00004	 mov         r0, r4
  00074	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN16@GetNextIna|
  0007c		 |$LN17@GetNextIna|
  0007c	00000000	 DCD         |gppActivityTimers|
  00080		 |$M33973|

			 ENDP  ; |?GetNextInactivityTimeout@@YAKK@Z|, GetNextInactivityTimeout

	EXPORT	|ActivityTimersThreadProc|
	EXPORT	|??_C@_1BO@HFODHNIK@?$AA?9?$AA?$CF?$AAs?$AA?3?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@FJNGMGD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@LPAHHGNK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@PLDCBMAK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@FBOGKBMA@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAh?$AAa?$AAs?$AA?5?$AAe?$AAx?$AAp?$AAi?$AAr?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@BCGDOJNJ@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@NMLNBMDI@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAm?$AAe?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IE@KDGOPIKP@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAw?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?5?$AAm?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@OEAHGMJG@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAe?$AAn?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAl?$AAo?$AAo?$AAp?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@EDIGHKLF@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAa?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe?$AAf?$AAi?$AAn?$AAe?$AAd?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@COCBKOJP@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@ICLAIDMF@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@CNEGHLPH@?$AAT?$AAi?$AAm?$AAe?$AAr?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@PONLJKJA@?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAr?$AAs?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAP?$AAr?$AAo?$AAc?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@KPKINJCK@?$AA?$CL?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|CloseHandle|
	IMPORT	|GetLastError|
	IMPORT	|WaitForSingleObject|
	IMPORT	|WaitForMultipleObjects|
	IMPORT	|GetTickCount|
	IMPORT	|Sleep|
	IMPORT	|ghevTimerResume|
	IMPORT	|ghevPmShutdown|
	IMPORT	|CreateEventW|
	IMPORT	|CeSetThreadPriority|
	IMPORT	|GetPMThreadPriority|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T34072| DCD	|$LN104@ActivityTi@2|
	DCD	0x40014102

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@HFODHNIK@?$AA?9?$AA?$CF?$AAs?$AA?3?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "%", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "e", 0x0, "x"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@FJNGMGD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "s", 0x0, "h", 0x0, "u"
	DCB	0x0, "t", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, " "
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@LPAHHGNK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAt@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "W", 0x0, "a", 0x0, "i"
	DCB	0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r", 0x0, "M", 0x0, "u"
	DCB	0x0, "l", 0x0, "t", 0x0, "i", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "O", 0x0, "b", 0x0, "j", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "s", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@PLDCBMAK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "'", 0x0, "%", 0x0, "s"
	DCB	0x0, "'", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@FBOGKBMA@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAh?$AAa?$AAs?$AA?5?$AAe?$AAx?$AAp?$AAi?$AAr?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "'", 0x0, "%", 0x0, "s"
	DCB	0x0, "'", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "s", 0x0, " "
	DCB	0x0, "e", 0x0, "x", 0x0, "p", 0x0, "i", 0x0, "r", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@BCGDOJNJ@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "'", 0x0, "%", 0x0, "s"
	DCB	0x0, "'", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "a", 0x0, "f", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e"
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@NMLNBMDI@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAm?$AAe?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "u", 0x0, "m", 0x0, "e", 0x0, " ", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@KDGOPIKP@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAw?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?5?$AAm?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAn@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, " ", 0x0, "m"
	DCB	0x0, "s", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "n", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, " ", 0x0, "e"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, ",", 0x0, " "
	DCB	0x0, "w", 0x0, "a", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "v", 0x0, "a"
	DCB	0x0, "l", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "s", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@OEAHGMJG@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAe?$AAn?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAl?$AAo?$AAo?$AAp?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "w", 0x0, "a", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "l"
	DCB	0x0, "o", 0x0, "o", 0x0, "p", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e"
	DCB	0x0, "r", 0x0, "s", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, "t"
	DCB	0x0, "a", 0x0, "l", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@EDIGHKLF@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAa?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe?$AAf?$AAi?$AAn?$AAe?$AAd?$AA?0?$AA?5@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, " "
	DCB	0x0, "a", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "i"
	DCB	0x0, "t", 0x0, "y", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "f", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "e", 0x0, "x", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@COCBKOJP@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?$AN@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "u"
	DCB	0x0, "l", 0x0, "d", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " "
	DCB	0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "d", 0x0, "u", 0x0, "m", 0x0, "m", 0x0, "y"
	DCB	0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@ICLAIDMF@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "A", 0x0, "c", 0x0, "t"
	DCB	0x0, "i", 0x0, "v", 0x0, "i", 0x0, "t", 0x0, "y", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "L", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "(", 0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@CNEGHLPH@?$AAT?$AAi?$AAm?$AAe?$AAr?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| DCB "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, "P", 0x0, "r"
	DCB	0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "y"
	DCB	0x0, "2", 0x0, "5", 0x0, "6", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@PONLJKJA@?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAr?$AAs?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAP?$AAr?$AAo?$AAc?$AA?$AA@| DCB "A"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "r"
	DCB	0x0, "s", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@KPKINJCK@?$AA?$CL?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "%", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\pm\dll\pmtimer.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ActivityTimersThreadProc| PROC

; 223  : {

  00000		 |$LN104@ActivityTi@2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24ddf45	 sub         sp, sp, #0x45, 30
  00008		 |$M34069|
  00008	e1a05000	 mov         r5, r0

; 224  :     DWORD dwStatus, dwNumEvents, dwWaitInterval;
; 225  :     HANDLE hevReady = (HANDLE) lpvParam;
; 226  :     HANDLE hEvents[MAXIMUM_WAIT_OBJECTS];
; 227  :     BOOL fDone = FALSE;
; 228  :     HANDLE hevDummy = NULL;
; 229  :     INT iPriority;
; 230  :     const DWORD cdwTimerBaseIndex = 2;
; 231  : 
; 232  : #ifndef SHIP_BUILD
; 233  :     SETFNAME(_T("ActivityTimersThreadProc"));
; 234  : #endif
; 235  : 
; 236  :     PMLOGMSG(ZONE_INIT, (_T("+%s: thread 0x%08x\r\n"), pszFname, GetCurrentThreadId()));

  0000c	e59f44c0	 ldr         r4, [pc, #0x4C0]
  00010	e5943440	 ldr         r3, [r4, #0x440]
  00014	e3130004	 tst         r3, #4
  00018	0a000005	 beq         |$LN40@ActivityTi@2|
  0001c	e3a00008	 mov         r0, #8
  00020	eb000000	 bl          __GetUserKData
  00024	e59f148c	 ldr         r1, [pc, #0x48C]
  00028	e1a02000	 mov         r2, r0
  0002c	e59f04cc	 ldr         r0, [pc, #0x4CC]
  00030	eb000000	 bl          CeLogMsg
  00034		 |$LN40@ActivityTi@2|

; 237  : 
; 238  :     // set the thread priority
; 239  :     if(!GetPMThreadPriority(_T("TimerPriority256"), &iPriority)) {

  00034	e59f04c0	 ldr         r0, [pc, #0x4C0]
  00038	e28d1004	 add         r1, sp, #4
  0003c	eb000000	 bl          GetPMThreadPriority
  00040	e3500000	 cmp         r0, #0

; 240  :         iPriority = DEF_ACTIVITY_TIMER_THREAD_PRIORITY;

  00044	03a010f9	 moveq       r1, #0xF9
  00048	058d1004	 streq       r1, [sp, #4]
  0004c	159d1004	 ldrne       r1, [sp, #4]

; 241  :     }
; 242  :     CeSetThreadPriority(GetCurrentThread(), iPriority);

  00050	e3a00041	 mov         r0, #0x41
  00054	eb000000	 bl          CeSetThreadPriority

; 243  : 
; 244  :     // initialize the list of activity timers
; 245  :     if(ActivityTimerInitList() != ERROR_SUCCESS) {

  00058	eb000000	 bl          |?ActivityTimerInitList@@YAKXZ|
  0005c	e59f7494	 ldr         r7, [pc, #0x494]
  00060	e3500000	 cmp         r0, #0
  00064	0a000006	 beq         |$LN36@ActivityTi@2|

; 246  :         PMLOGMSG(ZONE_WARN, (_T("%s: ActivityTimerInitList() failed\r\n"), pszFname));

  00068	e5943440	 ldr         r3, [r4, #0x440]
  0006c	e3130002	 tst         r3, #2
  00070	0a0000f2	 beq         |$LN4@ActivityTi@2|
  00074	e59f0478	 ldr         r0, [pc, #0x478]
  00078	e59f1438	 ldr         r1, [pc, #0x438]
  0007c	eb000000	 bl          CeLogMsg

; 247  :         goto done;

  00080	ea0000ee	 b           |$LN4@ActivityTi@2|
  00084		 |$LN36@ActivityTi@2|

; 248  :     }
; 249  : 
; 250  :     // create a dummy event that's never signaled
; 251  :     hevDummy = CreateEvent(NULL, FALSE, FALSE, NULL);

  00084	e3a03000	 mov         r3, #0
  00088	e3a02000	 mov         r2, #0
  0008c	e3a01000	 mov         r1, #0
  00090	e3a00000	 mov         r0, #0
  00094	eb000000	 bl          CreateEventW
  00098	e1b0b000	 movs        r11, r0
  0009c	e58db00c	 str         r11, [sp, #0xC]

; 252  :     if(hevDummy == NULL) {

  000a0	1a000004	 bne         |$LN34@ActivityTi@2|

; 253  :         PMLOGMSG(ZONE_WARN, (_T("%s: Couldn't create dummy event\r\n"), pszFname));

  000a4	e5943440	 ldr         r3, [r4, #0x440]
  000a8	e3130002	 tst         r3, #2
  000ac	0a0000e0	 beq         |$done$33713|
  000b0	e59f0438	 ldr         r0, [pc, #0x438]

; 386  :             fDone = TRUE;
; 387  :         }
; 388  :     }
; 389  : 
; 390  : done:

  000b4	ea0000dc	 b           |$LN100@ActivityTi@2|
  000b8		 |$LN34@ActivityTi@2|

; 254  :         goto done;
; 255  :     }
; 256  : 
; 257  :     // set up the list of events
; 258  :     dwNumEvents = 0;
; 259  :     hEvents[dwNumEvents++] = ghevPmShutdown;

  000b8	e59f342c	 ldr         r3, [pc, #0x42C]

; 260  :     hEvents[dwNumEvents++] = ghevTimerResume;

  000bc	e59f2424	 ldr         r2, [pc, #0x424]
  000c0	e3a08002	 mov         r8, #2
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e5922000	 ldr         r2, [r2]
  000cc	e58d8008	 str         r8, [sp, #8]
  000d0	e58d3014	 str         r3, [sp, #0x14]
  000d4	e58d2018	 str         r2, [sp, #0x18]

; 261  :     PMLOCK();

  000d8	eb000000	 bl          PmLock

; 262  :     if(gppActivityTimers[0] == NULL) {

  000dc	e5972000	 ldr         r2, [r7]
  000e0	e5923000	 ldr         r3, [r2]
  000e4	e3530000	 cmp         r3, #0
  000e8	1a000004	 bne         |$LN91@ActivityTi@2|

; 263  :         // no activity timers defined
; 264  :         PmFree(gppActivityTimers);

  000ec	e1a00002	 mov         r0, r2
  000f0	eb000000	 bl          PmFree

; 265  :         gppActivityTimers = NULL;

  000f4	e3a03000	 mov         r3, #0
  000f8	e5873000	 str         r3, [r7]

; 266  :     } else {

  000fc	ea00000c	 b           |$LN29@ActivityTi@2|
  00100		 |$LN91@ActivityTi@2|

; 267  :         // copy activity timer events into the event list
; 268  :         while(dwNumEvents < dim(hEvents) && gppActivityTimers[dwNumEvents - cdwTimerBaseIndex] != NULL) {

  00100	e28d3014	 add         r3, sp, #0x14
  00104	e0431002	 sub         r1, r3, r2
  00108	e2822008	 add         r2, r2, #8
  0010c		 |$LL30@ActivityTi@2|
  0010c	e5123008	 ldr         r3, [r2, #-8]
  00110	e3530000	 cmp         r3, #0
  00114	0a000005	 beq         |$LN99@ActivityTi@2|

; 269  :             hEvents[dwNumEvents] = gppActivityTimers[dwNumEvents - cdwTimerBaseIndex]->hevReset;
; 270  :             dwNumEvents++;

  00118	e593300c	 ldr         r3, [r3, #0xC]
  0011c	e2888001	 add         r8, r8, #1
  00120	e3580040	 cmp         r8, #0x40
  00124	e7813002	 str         r3, [r1, +r2]
  00128	e2822004	 add         r2, r2, #4
  0012c	3afffff6	 bcc         |$LL30@ActivityTi@2|
  00130		 |$LN99@ActivityTi@2|
  00130	e58d8008	 str         r8, [sp, #8]
  00134		 |$LN29@ActivityTi@2|

; 271  :         }
; 272  :     }
; 273  :     PMUNLOCK();

  00134	eb000000	 bl          PmUnlock

; 274  : 
; 275  :     // we're up and running
; 276  :     SetEvent(hevReady);

  00138	e3a01003	 mov         r1, #3
  0013c	e1a00005	 mov         r0, r5
  00140	eb000000	 bl          EventModify

; 277  : 
; 278  :     // are there actually any timers to wait on?
; 279  :     if(dwNumEvents <= cdwTimerBaseIndex) {
; 280  :         // no timers defined, so we don't need this thread to wait on them.
; 281  :         PMLOGMSG(ZONE_INIT || ZONE_WARN, (_T("%s: no activity timers defined, exiting\r\n"), pszFname));

  00144	e5943440	 ldr         r3, [r4, #0x440]
  00148	e3580002	 cmp         r8, #2
  0014c	8a000009	 bhi         |$LN28@ActivityTi@2|
  00150	e3130004	 tst         r3, #4
  00154	1a000001	 bne         |$LN46@ActivityTi@2|
  00158	e3130002	 tst         r3, #2
  0015c	0a000002	 beq         |$LN47@ActivityTi@2|
  00160		 |$LN46@ActivityTi@2|
  00160	e59f037c	 ldr         r0, [pc, #0x37C]
  00164	e59f134c	 ldr         r1, [pc, #0x34C]
  00168	eb000000	 bl          CeLogMsg
  0016c		 |$LN47@ActivityTi@2|

; 282  :         Sleep(1000);            // don't want PM initialization to fail when we exit

  0016c	e3a00ffa	 mov         r0, #0xFA, 30
  00170	eb000000	 bl          Sleep

; 386  :             fDone = TRUE;
; 387  :         }
; 388  :     }
; 389  : 
; 390  : done:

  00174	ea0000ae	 b           |$done$33713|
  00178		 |$LN28@ActivityTi@2|

; 283  :         goto done;
; 284  :     }
; 285  : 
; 286  :     // wait for these events to get signaled
; 287  :     PMLOGMSG(ZONE_TIMERS, (_T("%s: entering wait loop, %d timers total\r\n"),
; 288  :         pszFname, dwNumEvents - cdwTimerBaseIndex));

  00178	e3130a02	 tst         r3, #2, 20
  0017c	159f035c	 ldrne       r0, [pc, #0x35C]
  00180	159f1330	 ldrne       r1, [pc, #0x330]
  00184	12482002	 subne       r2, r8, #2
  00188	1b000000	 blne        CeLogMsg

; 289  :     dwWaitInterval = 0;

  0018c	e3a03c01	 mov         r3, #1, 24
  00190	e3839002	 orr         r9, r3, #2
  00194	e58d9010	 str         r9, [sp, #0x10]
  00198	e3a0a000	 mov         r10, #0
  0019c		 |$LL26@ActivityTi@2|

; 290  :     while(!fDone) {
; 291  :         DWORD dwTimeout = GetNextInactivityTimeout(dwWaitInterval);

  0019c	e1a0000a	 mov         r0, r10
  001a0	eb000000	 bl          |?GetNextInactivityTimeout@@YAKK@Z|
  001a4	e1a05000	 mov         r5, r0

; 292  :         DWORD dwWaitStart = GetTickCount();

  001a8	eb000000	 bl          GetTickCount

; 293  : 
; 294  :         PMLOGMSG(ZONE_TIMERS, 
; 295  :             (_T("%s: waiting %u (0x%08x) ms for next event, wait interval was %d\r\n"), pszFname,
; 296  :             dwTimeout, dwTimeout, dwWaitInterval));

  001ac	e5943440	 ldr         r3, [r4, #0x440]
  001b0	e1a06000	 mov         r6, r0
  001b4	e3130a02	 tst         r3, #2, 20
  001b8	159f12f8	 ldrne       r1, [pc, #0x2F8]
  001bc	159f0318	 ldrne       r0, [pc, #0x318]
  001c0	11a03005	 movne       r3, r5
  001c4	11a02005	 movne       r2, r5
  001c8	158da000	 strne       r10, [sp]
  001cc	1b000000	 blne        CeLogMsg

; 297  :         dwStatus = WaitForMultipleObjects(dwNumEvents, hEvents, FALSE, dwTimeout);

  001d0	e1a03005	 mov         r3, r5
  001d4	e3a02000	 mov         r2, #0
  001d8	e28d1014	 add         r1, sp, #0x14
  001dc	e1a00008	 mov         r0, r8
  001e0	eb000000	 bl          WaitForMultipleObjects
  001e4	e1a05000	 mov         r5, r0

; 298  :         dwWaitInterval = GetTickCount() - dwWaitStart;

  001e8	eb000000	 bl          GetTickCount
  001ec	e040a006	 sub         r10, r0, r6

; 299  : 
; 300  :         // figure out what caused the wakeup
; 301  :         if(dwStatus == (WAIT_OBJECT_0 + 0)) {

  001f0	e3550000	 cmp         r5, #0
  001f4	0a000088	 beq         |$LN96@ActivityTi@2|

; 303  :             fDone = TRUE;
; 304  :         } else if(dwStatus == (WAIT_OBJECT_0 + 1)) {

  001f8	e3550001	 cmp         r5, #1
  001fc	1a00001b	 bne         |$LN22@ActivityTi@2|

; 305  :             DWORD dwIndex;
; 306  :             PACTIVITY_TIMER pat;
; 307  : 
; 308  :             // we've resumed, so re-enable all activity timers that can be reset
; 309  :             PMLOGMSG(ZONE_TIMERS, (_T("%s: resume event set\r\n"), pszFname));

  00200	e5943440	 ldr         r3, [r4, #0x440]
  00204	e3130a02	 tst         r3, #2, 20
  00208	159f12a8	 ldrne       r1, [pc, #0x2A8]
  0020c	159f02c4	 ldrne       r0, [pc, #0x2C4]
  00210	1b000000	 blne        CeLogMsg

; 310  :             PMLOCK();

  00214	eb000000	 bl          PmLock

; 311  :             for(dwIndex = 0; (pat = gppActivityTimers[dwIndex]) != NULL; dwIndex++) {

  00218	e5973000	 ldr         r3, [r7]
  0021c	e5933000	 ldr         r3, [r3]
  00220	e1b00003	 movs        r0, r3
  00224	0a000070	 beq         |$LN19@ActivityTi@2|
  00228	e3a01000	 mov         r1, #0
  0022c	e28d401c	 add         r4, sp, #0x1C
  00230		 |$LL21@ActivityTi@2|

; 312  :                 DWORD dwEventIndex = dwIndex + cdwTimerBaseIndex;
; 313  :                 if(hEvents[dwEventIndex] == hevDummy) {

  00230	e1a02001	 mov         r2, r1
  00234	e7b23004	 ldr         r3, [r2, +r4]!

; 314  :                     hEvents[dwEventIndex] = pat->hevReset;
; 315  :                 }
; 316  :                 pat->dwTimeLeft = pat->dwTimeout + dwWaitInterval;

  00238	e2811004	 add         r1, r1, #4
  0023c	e153000b	 cmp         r3, r11
  00240	0590300c	 ldreq       r3, [r0, #0xC]
  00244	05823000	 streq       r3, [r2]
  00248	e5903004	 ldr         r3, [r0, #4]
  0024c	e083300a	 add         r3, r3, r10
  00250	e5803008	 str         r3, [r0, #8]
  00254	e5973000	 ldr         r3, [r7]
  00258	e7913003	 ldr         r3, [r1, +r3]
  0025c	e1b00003	 movs        r0, r3
  00260	1afffff2	 bne         |$LL21@ActivityTi@2|
  00264	e59f4268	 ldr         r4, [pc, #0x268]

; 382  :             PMUNLOCK();

  00268	eb000000	 bl          PmUnlock
  0026c	eaffffca	 b           |$LL26@ActivityTi@2|
  00270		 |$LN22@ActivityTi@2|

; 317  :             }
; 318  :             PMUNLOCK();
; 319  :         } else if(dwStatus == WAIT_TIMEOUT) {

  00270	e1550009	 cmp         r5, r9
  00274	1a00003c	 bne         |$LN16@ActivityTi@2|

; 320  :             DWORD dwIndex;
; 321  :             PACTIVITY_TIMER pat;
; 322  : 
; 323  :             // figure out which event(s) timed out
; 324  :             PMLOCK();

  00278	eb000000	 bl          PmLock

; 325  :             for(dwIndex = 0; (pat = gppActivityTimers[dwIndex]) != NULL; dwIndex++) {

  0027c	e5973000	 ldr         r3, [r7]
  00280	e3a09000	 mov         r9, #0
  00284	e5933000	 ldr         r3, [r3]
  00288	e1b05003	 movs        r5, r3
  0028c	0a000033	 beq         |$LN13@ActivityTi@2|
  00290	e3a06000	 mov         r6, #0
  00294	e28db014	 add         r11, sp, #0x14
  00298	e3e08000	 mvn         r8, #0
  0029c		 |$LL15@ActivityTi@2|

; 326  :                 if(pat->dwTimeLeft <= dwWaitInterval  && pat->dwTimeLeft != INFINITE) {

  0029c	e5953008	 ldr         r3, [r5, #8]
  002a0	e153000a	 cmp         r3, r10
  002a4	8a000025	 bhi         |$LN14@ActivityTi@2|
  002a8	e3730001	 cmn         r3, #1
  002ac	0a000023	 beq         |$LN14@ActivityTi@2|

; 327  :                     // has the timer really expired?
; 328  :                     if(WaitForSingleObject(pat->hevReset, 0) == WAIT_OBJECT_0) {

  002b0	e595000c	 ldr         r0, [r5, #0xC]
  002b4	e3a01000	 mov         r1, #0
  002b8	eb000000	 bl          WaitForSingleObject

; 329  :                         // The timer was reset while we weren't looking at it, so we'll look
; 330  :                         // at it again later.  Calculate the new timeout, compensating for the update
; 331  :                         // that will occur in GetNextInactivityTimeout().
; 332  :                         PMLOGMSG(ZONE_TIMERS, (_T("%s: timer '%s' reset after timeout\r\n"), pszFname,
; 333  :                             pat->pszName));

  002bc	e5943440	 ldr         r3, [r4, #0x440]
  002c0	e3500000	 cmp         r0, #0
  002c4	1a00000b	 bne         |$LN11@ActivityTi@2|
  002c8	e3130a02	 tst         r3, #2, 20
  002cc	15952000	 ldrne       r2, [r5]
  002d0	159f11e0	 ldrne       r1, [pc, #0x1E0]
  002d4	159f01f4	 ldrne       r0, [pc, #0x1F4]
  002d8	1b000000	 blne        CeLogMsg

; 334  :                         pat->dwTimeLeft = pat->dwTimeout + dwWaitInterval;

  002dc	e5953004	 ldr         r3, [r5, #4]

; 335  :                         pat->dwResetCount++;

  002e0	e595201c	 ldr         r2, [r5, #0x1C]
  002e4	e083300a	 add         r3, r3, r10
  002e8	e2822001	 add         r2, r2, #1
  002ec	e5853008	 str         r3, [r5, #8]
  002f0	e585201c	 str         r2, [r5, #0x1C]

; 336  :                     } else {

  002f4	ea000011	 b           |$LN14@ActivityTi@2|
  002f8		 |$LN11@ActivityTi@2|

; 337  :                         // the timer has really expired, update events appropriately
; 338  :                         PMLOGMSG(ZONE_TIMERS, (_T("%s: timer '%s' has expired\r\n"), pszFname,
; 339  :                             pat->pszName));

  002f8	e3130a02	 tst         r3, #2, 20
  002fc	15952000	 ldrne       r2, [r5]
  00300	159f11b0	 ldrne       r1, [pc, #0x1B0]
  00304	159f01c0	 ldrne       r0, [pc, #0x1C0]
  00308	1b000000	 blne        CeLogMsg

; 340  :                         ResetEvent(pat->hevActive);

  0030c	e5950010	 ldr         r0, [r5, #0x10]
  00310	e3a01002	 mov         r1, #2
  00314	eb000000	 bl          EventModify

; 341  :                         SetEvent(pat->hevInactive);

  00318	e5950014	 ldr         r0, [r5, #0x14]
  0031c	e3a01003	 mov         r1, #3
  00320	eb000000	 bl          EventModify

; 342  : 
; 343  :                         // start looking at the reset event for this timer again
; 344  :                         hEvents[dwIndex + cdwTimerBaseIndex] = pat->hevReset;

  00324	e595200c	 ldr         r2, [r5, #0xC]
  00328	e086300b	 add         r3, r6, r11
  0032c	e5832008	 str         r2, [r3, #8]

; 345  : 
; 346  :                         // update counts
; 347  :                         pat->dwTimeLeft = INFINITE;
; 348  :                         pat->dwExpiredCount++;

  00330	e5953020	 ldr         r3, [r5, #0x20]
  00334	e5858008	 str         r8, [r5, #8]
  00338	e2833001	 add         r3, r3, #1
  0033c	e5853020	 str         r3, [r5, #0x20]
  00340		 |$LN14@ActivityTi@2|
  00340	e5973000	 ldr         r3, [r7]
  00344	e2899001	 add         r9, r9, #1
  00348	e1a06109	 mov         r6, r9, lsl #2
  0034c	e7963003	 ldr         r3, [r6, +r3]
  00350	e1b05003	 movs        r5, r3
  00354	1affffd0	 bne         |$LL15@ActivityTi@2|
  00358	e59d8008	 ldr         r8, [sp, #8]
  0035c	e59db00c	 ldr         r11, [sp, #0xC]
  00360		 |$LN13@ActivityTi@2|

; 349  :                     }
; 350  :                 }
; 351  :             }
; 352  :             PMUNLOCK();

  00360	eb000000	 bl          PmUnlock
  00364	e59d9010	 ldr         r9, [sp, #0x10]
  00368	eaffff8b	 b           |$LL26@ActivityTi@2|
  0036c		 |$LN16@ActivityTi@2|

; 353  :         } else if(dwStatus > (WAIT_OBJECT_0 + 0) && dwStatus < (WAIT_OBJECT_0 + dwNumEvents)) {

  0036c	e3550000	 cmp         r5, #0
  00370	0a00001f	 beq         |$LN8@ActivityTi@2|
  00374	e1550008	 cmp         r5, r8
  00378	2a00001d	 bcs         |$LN8@ActivityTi@2|

; 354  :             PACTIVITY_TIMER pat;
; 355  :             DWORD dwEventIndex = dwStatus - WAIT_OBJECT_0;
; 356  : 
; 357  :             PMLOCK();

  0037c	eb000000	 bl          PmLock

; 358  :             
; 359  :             // get a pointer to the timer
; 360  :             pat = gppActivityTimers[dwEventIndex - cdwTimerBaseIndex];

  00380	e5973000	 ldr         r3, [r7]
  00384	e0833105	 add         r3, r3, r5, lsl #2
  00388	e5136008	 ldr         r6, [r3, #-8]

; 361  : 
; 362  :             // handle its events
; 363  :             DEBUGCHK(pat != NULL);
; 364  :             if(pat->dwTimeout == 0) {

  0038c	e5963004	 ldr         r3, [r6, #4]
  00390	e3530000	 cmp         r3, #0

; 365  :                 // we're not using the event, so ignore it
; 366  :                 pat->dwTimeLeft = INFINITE;

  00394	03e03000	 mvneq       r3, #0
  00398	0a00000f	 beq         |$LN101@ActivityTi@2|

; 367  :             } else {
; 368  :                 PMLOGMSG(ZONE_TIMERS, (_T("%s: timer '%s' reset\r\n"), pszFname, pat->pszName));

  0039c	e5943440	 ldr         r3, [r4, #0x440]
  003a0	e3130a02	 tst         r3, #2, 20
  003a4	15962000	 ldrne       r2, [r6]
  003a8	159f1108	 ldrne       r1, [pc, #0x108]
  003ac	159f0114	 ldrne       r0, [pc, #0x114]
  003b0	1b000000	 blne        CeLogMsg

; 369  : 
; 370  :                 // set events appropriately
; 371  :                 ResetEvent(pat->hevInactive);

  003b4	e5960014	 ldr         r0, [r6, #0x14]
  003b8	e3a01002	 mov         r1, #2
  003bc	eb000000	 bl          EventModify

; 372  :                 SetEvent(pat->hevActive);

  003c0	e5960010	 ldr         r0, [r6, #0x10]
  003c4	e3a01003	 mov         r1, #3
  003c8	eb000000	 bl          EventModify

; 373  : 
; 374  :                 // don't look at this event again until it's about ready to time out
; 375  :                 hEvents[dwEventIndex] = hevDummy;

  003cc	e28d3014	 add         r3, sp, #0x14
  003d0	e783b105	 str         r11, [r3, +r5, lsl #2]

; 376  : 
; 377  :                 // update time left on the timer, compensating for the update
; 378  :                 // that will occur in GetNextInactivityTimeout().
; 379  :                 pat->dwTimeLeft = pat->dwTimeout + dwWaitInterval;

  003d4	e5963004	 ldr         r3, [r6, #4]
  003d8	e083300a	 add         r3, r3, r10
  003dc		 |$LN101@ActivityTi@2|
  003dc	e5863008	 str         r3, [r6, #8]

; 380  :             }
; 381  :             pat->dwResetCount++;

  003e0	e596301c	 ldr         r3, [r6, #0x1C]
  003e4	e2833001	 add         r3, r3, #1
  003e8	e586301c	 str         r3, [r6, #0x1C]
  003ec		 |$LN19@ActivityTi@2|

; 382  :             PMUNLOCK();

  003ec	eb000000	 bl          PmUnlock
  003f0	eaffff69	 b           |$LL26@ActivityTi@2|
  003f4		 |$LN8@ActivityTi@2|

; 383  :         } else {
; 384  :             PMLOGMSG(ZONE_WARN, (_T("%s: WaitForMultipleObjects() returned %d, status is %d\r\n"),
; 385  :                 pszFname, dwStatus, GetLastError())); 

  003f4	e5943440	 ldr         r3, [r4, #0x440]
  003f8	e3130002	 tst         r3, #2
  003fc	0a00000c	 beq         |$done$33713|
  00400	eb000000	 bl          GetLastError
  00404	e59f10ac	 ldr         r1, [pc, #0xAC]
  00408	e1a03000	 mov         r3, r0
  0040c	e59f00b0	 ldr         r0, [pc, #0xB0]
  00410	e1a02005	 mov         r2, r5
  00414	eb000000	 bl          CeLogMsg
  00418	ea000005	 b           |$done$33713|
  0041c		 |$LN96@ActivityTi@2|

; 302  :             PMLOGMSG(ZONE_WARN, (_T("%s: shutdown event set\r\n"), pszFname));

  0041c	e5943440	 ldr         r3, [r4, #0x440]
  00420	e3130002	 tst         r3, #2
  00424	0a000002	 beq         |$done$33713|
  00428	e59f0090	 ldr         r0, [pc, #0x90]
  0042c		 |$LN100@ActivityTi@2|
  0042c	e59f1084	 ldr         r1, [pc, #0x84]
  00430	eb000000	 bl          CeLogMsg
  00434		 |$done$33713|

; 391  :     // release resources
; 392  :     if(hevDummy != NULL) CloseHandle(hevDummy);

  00434	e35b0000	 cmp         r11, #0
  00438	11a0000b	 movne       r0, r11
  0043c	1b000000	 blne        CloseHandle
  00440		 |$LN4@ActivityTi@2|

; 393  :     PMLOCK();

  00440	eb000000	 bl          PmLock

; 394  :     if(gppActivityTimers != NULL) {

  00444	e5970000	 ldr         r0, [r7]
  00448	e3500000	 cmp         r0, #0
  0044c	0a00000f	 beq         |$LN3@ActivityTi@2|

; 395  :         DWORD dwIndex = 0;
; 396  :         while(gppActivityTimers[dwIndex] != NULL) {

  00450	e5903000	 ldr         r3, [r0]
  00454	e3a05000	 mov         r5, #0
  00458	e3530000	 cmp         r3, #0
  0045c	0a000008	 beq         |$LN1@ActivityTi@2|
  00460	e1a02000	 mov         r2, r0
  00464		 |$LL2@ActivityTi@2|

; 397  :             ActivityTimerDestroy(gppActivityTimers[dwIndex]);

  00464	e5920000	 ldr         r0, [r2]
  00468	eb000000	 bl          ActivityTimerDestroy
  0046c	e5970000	 ldr         r0, [r7]

; 398  :             dwIndex++;

  00470	e2855001	 add         r5, r5, #1
  00474	e1a02000	 mov         r2, r0
  00478	e7b23105	 ldr         r3, [r2, +r5, lsl #2]!
  0047c	e3530000	 cmp         r3, #0
  00480	1afffff7	 bne         |$LL2@ActivityTi@2|
  00484		 |$LN1@ActivityTi@2|

; 399  :         }
; 400  :         PmFree(gppActivityTimers);

  00484	eb000000	 bl          PmFree

; 401  :         gppActivityTimers = NULL;

  00488	e3a03000	 mov         r3, #0
  0048c	e5873000	 str         r3, [r7]
  00490		 |$LN3@ActivityTi@2|

; 402  :     }
; 403  :     PMUNLOCK();

  00490	eb000000	 bl          PmUnlock

; 404  : 
; 405  :     PMLOGMSG(ZONE_INIT | ZONE_WARN, (_T("-%s: exiting\r\n"), pszFname));

  00494	e5943440	 ldr         r3, [r4, #0x440]
  00498	e3130006	 tst         r3, #6
  0049c	159f0018	 ldrne       r0, [pc, #0x18]
  004a0	159f1010	 ldrne       r1, [pc, #0x10]
  004a4	1b000000	 blne        CeLogMsg

; 406  :     return 0;

  004a8	e3a00000	 mov         r0, #0

; 407  : }

  004ac	e28ddf45	 add         sp, sp, #0x45, 30
  004b0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  004b4	e12fff1e	 bx          lr
  004b8		 |$LN105@ActivityTi@2|
  004b8		 |$LN106@ActivityTi@2|
  004b8	00000000	 DCD         |??_C@_1DC@PONLJKJA@?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAr?$AAs?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAP?$AAr?$AAo?$AAc?$AA?$AA@|
  004bc		 |$LN107@ActivityTi@2|
  004bc	00000000	 DCD         |??_C@_1BO@HFODHNIK@?$AA?9?$AA?$CF?$AAs?$AA?3?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@|
  004c0		 |$LN108@ActivityTi@2|
  004c0	00000000	 DCD         |??_C@_1DC@FJNGMGD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  004c4		 |$LN109@ActivityTi@2|
  004c4	00000000	 DCD         |??_C@_1HC@LPAHHGNK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAt@|
  004c8		 |$LN110@ActivityTi@2|
  004c8	00000000	 DCD         |??_C@_1CO@PLDCBMAK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  004cc		 |$LN111@ActivityTi@2|
  004cc	00000000	 DCD         |??_C@_1DK@FBOGKBMA@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAh?$AAa?$AAs?$AA?5?$AAe?$AAx?$AAp?$AAi?$AAr?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  004d0		 |$LN112@ActivityTi@2|
  004d0	00000000	 DCD         |??_C@_1EK@BCGDOJNJ@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AA?5?$AA?8?$AA?$CF?$AAs?$AA?8?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo@|
  004d4		 |$LN113@ActivityTi@2|
  004d4	00000000	 DCD         |dpCurSettings|
  004d8		 |$LN114@ActivityTi@2|
  004d8	00000000	 DCD         |??_C@_1CO@NMLNBMDI@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAm?$AAe?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  004dc		 |$LN115@ActivityTi@2|
  004dc	00000000	 DCD         |??_C@_1IE@KDGOPIKP@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAw?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?5?$AAm?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAn@|
  004e0		 |$LN116@ActivityTi@2|
  004e0	00000000	 DCD         |??_C@_1FE@OEAHGMJG@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAe?$AAn?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAw?$AAa?$AAi?$AAt?$AA?5?$AAl?$AAo?$AAo?$AAp?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr@|
  004e4		 |$LN117@ActivityTi@2|
  004e4	00000000	 DCD         |??_C@_1FE@EDIGHKLF@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAa?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe?$AAf?$AAi?$AAn?$AAe?$AAd?$AA?0?$AA?5@|
  004e8		 |$LN118@ActivityTi@2|
  004e8	00000000	 DCD         |ghevTimerResume|
  004ec		 |$LN119@ActivityTi@2|
  004ec	00000000	 DCD         |ghevPmShutdown|
  004f0		 |$LN120@ActivityTi@2|
  004f0	00000000	 DCD         |??_C@_1EE@COCBKOJP@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAd?$AAu?$AAm?$AAm?$AAy?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?$AN@|
  004f4		 |$LN121@ActivityTi@2|
  004f4	00000000	 DCD         |??_C@_1EK@ICLAIDMF@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AAL?$AAi?$AAs?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl@|
  004f8		 |$LN122@ActivityTi@2|
  004f8	00000000	 DCD         |gppActivityTimers|
  004fc		 |$LN123@ActivityTi@2|
  004fc	00000000	 DCD         |??_C@_1CC@CNEGHLPH@?$AAT?$AAi?$AAm?$AAe?$AAr?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@|
  00500		 |$LN124@ActivityTi@2|
  00500	00000000	 DCD         |??_C@_1CK@KPKINJCK@?$AA?$CL?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00504		 |$M34070|

			 ENDP  ; |ActivityTimersThreadProc|

	END
