; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\PM\DLL\pmpnp.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T33666| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M33663|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M33664|

			 ENDP  ; |SetEvent|

	EXPORT	|GetCurrentThread|

  00000			 AREA	 |.pdata|, PDATA
|$T33675| DCD	|$LN5@GetCurrent|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentThread| PROC

; 351  : _inline HANDLE GetCurrentThread(void) {

  00000		 |$LN5@GetCurrent|
  00000		 |$M33672|

; 352  : 	return ((HANDLE)(SH_CURTHREAD+SYS_HANDLE_BASE));

  00000	e3a00041	 mov         r0, #0x41

; 353  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M33673|

			 ENDP  ; |GetCurrentThread|

	EXPORT	|GetCurrentThreadId|
	IMPORT	|__GetUserKData|

  00000			 AREA	 |.pdata|, PDATA
|$T33684| DCD	|$LN5@GetCurrent@2|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentThreadId| PROC

; 369  : _inline DWORD GetCurrentThreadId(void) {

  00000		 |$LN5@GetCurrent@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M33681|

; 370  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURTHREAD * sizeof(HANDLE)));

  00004	e3a00008	 mov         r0, #8
  00008	eb000000	 bl          __GetUserKData

; 371  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M33682|

			 ENDP  ; |GetCurrentThreadId|

	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|CeLogData|
	IMPORT	|StringCchLengthW|
	IMPORT	|StringCchVPrintfW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|
; File c:\wince600\public\common\sdk\inc\celog.h

  00000			 AREA	 |.pdata|, PDATA
|$T33698| DCD	|$LN7@CeLogMsg|
	DCD	0xc0002a04

  00000			 AREA	 |.xdata|, DATA
|$T33694| DCD	0xffffffe0
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T33694|

  00008		 |CeLogMsg| PROC

; 1015 : {

  00008		 |$LN7@CeLogMsg|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d000f	 stmdb       sp!, {r0 - r3}
  00010	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00014	e24dde22	 sub         sp, sp, #0x22, 28
  00018		 |$M33695|
  00018	e58d022c	 str         r0, [sp, #0x22C]
  0001c	e59f3088	 ldr         r3, [pc, #0x88]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d321c	 str         r3, [sp, #0x21C]

; 1016 :     va_list arglist;
; 1017 :     WCHAR   szTemp[MAX_PATH];
; 1018 :     size_t  cchLen;
; 1019 :     HRESULT hr;
; 1020 : 
; 1021 :     // Compose a single string using the input args
; 1022 :     va_start(arglist, szFormat);
; 1023 :     hr = StringCchVPrintfW(szTemp, MAX_PATH, szFormat, arglist);

  00028	e1a02000	 mov         r2, r0
  0002c	e28d0014	 add         r0, sp, #0x14
  00030	e28d3e23	 add         r3, sp, #0x23, 28
  00034	e3a01f41	 mov         r1, #0x41, 30
  00038	eb000000	 bl          StringCchVPrintfW
  0003c	e3500000	 cmp         r0, #0

; 1024 :     if (SUCCEEDED(hr)) {

  00040	4a000014	 bmi         |$LN1@CeLogMsg|

; 1025 :         hr = StringCchLengthW(szTemp, MAX_PATH, &cchLen);

  00044	e28d2010	 add         r2, sp, #0x10
  00048	e3a01f41	 mov         r1, #0x41, 30
  0004c	e28d0014	 add         r0, sp, #0x14
  00050	eb000000	 bl          StringCchLengthW
  00054	e3500000	 cmp         r0, #0

; 1026 :         if (SUCCEEDED(hr)) {

  00058	4a00000e	 bmi         |$LN1@CeLogMsg|

; 1027 :             CeLogData(TRUE, CELID_RAW_WCHAR, szTemp, (WORD)((cchLen + 1) * sizeof(WCHAR)),
; 1028 :                       0, CELZONE_ALWAYSON, 0, FALSE);

  0005c	e59d3010	 ldr         r3, [sp, #0x10]
  00060	e3a04101	 mov         r4, #1, 2
  00064	e3a0e000	 mov         lr, #0
  00068	e2833001	 add         r3, r3, #1
  0006c	e1a03083	 mov         r3, r3, lsl #1
  00070	e1a03803	 mov         r3, r3, lsl #16
  00074	e1a03823	 mov         r3, r3, lsr #16
  00078	e28d2014	 add         r2, sp, #0x14
  0007c	e3a0104a	 mov         r1, #0x4A
  00080	e3a00001	 mov         r0, #1
  00084	e58de00c	 str         lr, [sp, #0xC]
  00088	e58de008	 str         lr, [sp, #8]
  0008c	e58d4004	 str         r4, [sp, #4]
  00090	e58de000	 str         lr, [sp]
  00094	eb000000	 bl          CeLogData
  00098		 |$LN1@CeLogMsg|
  00098	e59d021c	 ldr         r0, [sp, #0x21C]
  0009c	eb000000	 bl          __security_check_cookie

; 1029 :         }
; 1030 :     }
; 1031 : }

  000a0	e28dde22	 add         sp, sp, #0x22, 28
  000a4	e89d6010	 ldmia       sp, {r4, sp, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN8@CeLogMsg|
  000ac		 |$LN9@CeLogMsg|
  000ac	00000000	 DCD         |__security_cookie|
  000b0		 |$M33696|

			 ENDP  ; |CeLogMsg|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?ProcessPnPMsgQueue@@YAHPAX@Z|		; ProcessPnPMsgQueue
	EXPORT	|??_C@_1EE@EFOEONDD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAg?$AAo?$AAt?$AA?5?$AAr?$AAu?$AAn?$AAt?$AA?5?$AAm?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@ONIMKDGK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAa?$AAm?$AAe?$AA?5?$AAl?$AAo?$AAn?$AAg?$AAe?$AAr?$AA?5?$AAt?$AAh?$AAa?$AAn?$AA?5?$AA?$CF?$AAd?$AA?5?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@EGNINIOP@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAP?$AAn?$AAP?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@DCJBELBH@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|RemoveDevice|
	IMPORT	|AddDevice|
	IMPORT	|towlower|
	IMPORT	|GetLastError|
	IMPORT	|dpCurSettings|
	IMPORT	|ReadMsgQueue|
	IMPORT	|memset|
; File c:\wince600\platform\z2170p\src\drivers\pm\dll\pmpnp.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T33728| DCD	|$LN25@ProcessPnP|
	DCD	0xc0005d02

  00000			 AREA	 |.xdata|, DATA
|$T33724| DCD	0xffffffec

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@EFOEONDD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAg?$AAo?$AAt?$AA?5?$AAr?$AAu?$AAn?$AAt?$AA?5?$AAm?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AN@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "g", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "m", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "a", 0x0, "g"
	DCB	0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "b", 0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@ONIMKDGK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAa?$AAm?$AAe?$AA?5?$AAl?$AAo?$AAn?$AAg?$AAe?$AAr?$AA?5?$AAt?$AAh?$AAa?$AAn?$AA?5?$AA?$CF?$AAd?$AA?5?$AAc@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "n", 0x0, "a"
	DCB	0x0, "m", 0x0, "e", 0x0, " ", 0x0, "l", 0x0, "o", 0x0, "n"
	DCB	0x0, "g", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "c", 0x0, "h", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@EGNINIOP@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAP?$AAn?$AAP?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "P", 0x0, "n", 0x0, "P", 0x0, "M", 0x0, "s", 0x0, "g"
	DCB	0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "u", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@DCJBELBH@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "M", 0x0, "s", 0x0, "g", 0x0, "Q", 0x0, "u"
	DCB	0x0, "e", 0x0, "u", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T33724|

  00008		 |?ProcessPnPMsgQueue@@YAHPAX@Z| PROC	; ProcessPnPMsgQueue

; 31   : {

  00008		 |$LN25@ProcessPnP|
  00008	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  0000c	e24ddfdd	 sub         sp, sp, #0xDD, 30
  00010		 |$M33725|
  00010	e1a04000	 mov         r4, r0
  00014	e59f315c	 ldr         r3, [pc, #0x15C]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3370	 str         r3, [sp, #0x370]

; 32   :     BOOL fOk = FALSE;
; 33   :     UCHAR deviceBuf[PNP_QUEUE_SIZE];
; 34   :     DWORD iBytesInQueue = 0;
; 35   :     DWORD dwFlags = 0;

  00020	e3a02000	 mov         r2, #0
  00024	e58d200c	 str         r2, [sp, #0xC]
  00028	e3a03000	 mov         r3, #0

; 36   : 
; 37   : #ifndef SHIP_BUILD
; 38   :     SETFNAME(_T("ProcessPnPMsgQueue"));
; 39   : #endif
; 40   : 
; 41   :     // read a message from the message queue -- it should be a device advertisement
; 42   :     memset(deviceBuf, 0, PNP_QUEUE_SIZE);

  0002c	e3a02e36	 mov         r2, #0x36, 28
  00030	e3a01000	 mov         r1, #0
  00034	e28d0010	 add         r0, sp, #0x10
  00038	e58d3008	 str         r3, [sp, #8]
  0003c	e3a05000	 mov         r5, #0
  00040	eb000000	 bl          memset

; 43   :     if ( !ReadMsgQueue(hMsgQ, deviceBuf, PNP_QUEUE_SIZE, &iBytesInQueue, 0, &dwFlags)) {

  00044	e28d300c	 add         r3, sp, #0xC
  00048	e58d3004	 str         r3, [sp, #4]
  0004c	e3a06000	 mov         r6, #0
  00050	e28d3008	 add         r3, sp, #8
  00054	e3a02e36	 mov         r2, #0x36, 28
  00058	e28d1010	 add         r1, sp, #0x10
  0005c	e1a00004	 mov         r0, r4
  00060	e58d6000	 str         r6, [sp]
  00064	eb000000	 bl          ReadMsgQueue
  00068	e3500000	 cmp         r0, #0
  0006c	1a000007	 bne         |$LN11@ProcessPnP|

; 44   :         // nothing in the queue
; 45   :         PMLOGMSG(ZONE_WARN, (_T("%s: ReadMsgQueue() failed %d\r\n"), pszFname,
; 46   :             GetLastError()));

  00070	e59f30f4	 ldr         r3, [pc, #0xF4]
  00074	e5933440	 ldr         r3, [r3, #0x440]
  00078	e3130002	 tst         r3, #2
  0007c	0a000032	 beq         |$LN18@ProcessPnP|
  00080	eb000000	 bl          GetLastError
  00084	e1a02000	 mov         r2, r0
  00088	e59f00e4	 ldr         r0, [pc, #0xE4]

; 47   :     } else if(iBytesInQueue >= sizeof(DEVDETAIL)) {

  0008c	ea00002c	 b           |$LN22@ProcessPnP|
  00090		 |$LN11@ProcessPnP|
  00090	e59d2008	 ldr         r2, [sp, #8]
  00094	e3520020	 cmp         r2, #0x20
  00098	3a000024	 bcc         |$LN9@ProcessPnP|

; 48   :         // process the message
; 49   :         PDEVDETAIL pDevDetail = (PDEVDETAIL) deviceBuf;
; 50   :         
; 51   :         // check for overlarge names
; 52   :         if(pDevDetail->cbName > ((PNP_MAX_NAMELEN - 1) * sizeof(pDevDetail->szName[0]))) {

  0009c	e59d3028	 ldr         r3, [sp, #0x28]
  000a0	e35300fe	 cmp         r3, #0xFE
  000a4	9a000006	 bls         |$LN8@ProcessPnP|

; 53   :             PMLOGMSG(ZONE_WARN, (_T("%s: device name longer than %d characters\r\n"), 
; 54   :                 pszFname, PNP_MAX_NAMELEN - 1));

  000a8	e59f30bc	 ldr         r3, [pc, #0xBC]
  000ac	e5933440	 ldr         r3, [r3, #0x440]
  000b0	e3130002	 tst         r3, #2
  000b4	0a000024	 beq         |$LN18@ProcessPnP|
  000b8	e59f00b0	 ldr         r0, [pc, #0xB0]
  000bc	e3a0207f	 mov         r2, #0x7F

; 55   :         } else {

  000c0	ea00001f	 b           |$LN22@ProcessPnP|
  000c4		 |$LN8@ProcessPnP|

; 56   :             // convert the device name to lower case
; 57   :             int i;
; 58   :             for(i = 0; i < (PNP_MAX_NAMELEN - 1) && pDevDetail->szName[i] != 0; i++) {

  000c4	e3a05000	 mov         r5, #0
  000c8	e28d4010	 add         r4, sp, #0x10
  000cc		 |$LL6@ProcessPnP|
  000cc	e1d401bc	 ldrh        r0, [r4, #0x1C]
  000d0	e3500000	 cmp         r0, #0
  000d4	0a000005	 beq         |$LN4@ProcessPnP|

; 59   :                 pDevDetail->szName[i] = _totlower(pDevDetail->szName[i]);

  000d8	eb000000	 bl          towlower
  000dc	e2855001	 add         r5, r5, #1
  000e0	e1c401bc	 strh        r0, [r4, #0x1C]
  000e4	e2844002	 add         r4, r4, #2
  000e8	e355007f	 cmp         r5, #0x7F
  000ec	bafffff6	 blt         |$LL6@ProcessPnP|
  000f0		 |$LN4@ProcessPnP|

; 60   :             }
; 61   :             pDevDetail->szName[i] = 0;

  000f0	e28d3010	 add         r3, sp, #0x10
  000f4	e0833085	 add         r3, r3, r5, lsl #1
  000f8	e1c361bc	 strh        r6, [r3, #0x1C]

; 62   :             
; 63   :             // add or remove the device -- note that a particular interface may be
; 64   :             // advertised more than once, so these routines must handle that possibility.
; 65   :             if(pDevDetail->fAttached) {

  000fc	e59d3024	 ldr         r3, [sp, #0x24]

; 66   :                 AddDevice(&pDevDetail->guidDevClass, pDevDetail->szName, NULL, NULL);

  00100	e28d102c	 add         r1, sp, #0x2C
  00104	e28d0010	 add         r0, sp, #0x10
  00108	e3530000	 cmp         r3, #0
  0010c	0a000004	 beq         |$LN3@ProcessPnP|
  00110	e3a03000	 mov         r3, #0
  00114	e3a02000	 mov         r2, #0
  00118	eb000000	 bl          AddDevice

; 69   :             }
; 70   :             fOk = TRUE;

  0011c	e3a05001	 mov         r5, #1

; 71   :         }
; 72   :     } else {

  00120	ea000009	 b           |$LN18@ProcessPnP|
  00124		 |$LN3@ProcessPnP|

; 67   :             } else {
; 68   :                 RemoveDevice(&pDevDetail->guidDevClass, pDevDetail->szName);

  00124	eb000000	 bl          RemoveDevice

; 69   :             }
; 70   :             fOk = TRUE;

  00128	e3a05001	 mov         r5, #1

; 71   :         }
; 72   :     } else {

  0012c	ea000006	 b           |$LN18@ProcessPnP|
  00130		 |$LN9@ProcessPnP|

; 73   :         // not enough bytes for a message
; 74   :         PMLOGMSG(ZONE_WARN, (_T("%s: got runt message (%d bytes)\r\n"), pszFname, 
; 75   :             iBytesInQueue));

  00130	e59f3034	 ldr         r3, [pc, #0x34]
  00134	e5933440	 ldr         r3, [r3, #0x440]
  00138	e3130002	 tst         r3, #2
  0013c	0a000002	 beq         |$LN18@ProcessPnP|
  00140	e59f0020	 ldr         r0, [pc, #0x20]
  00144		 |$LN22@ProcessPnP|
  00144	e59f1018	 ldr         r1, [pc, #0x18]
  00148	eb000000	 bl          CeLogMsg
  0014c		 |$LN18@ProcessPnP|

; 76   :     }
; 77   : 
; 78   :     return fOk;

  0014c	e59d0370	 ldr         r0, [sp, #0x370]
  00150	eb000000	 bl          __security_check_cookie

; 79   : }

  00154	e1a00005	 mov         r0, r5
  00158	e28ddfdd	 add         sp, sp, #0xDD, 30
  0015c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00160	e12fff1e	 bx          lr
  00164		 |$LN26@ProcessPnP|
  00164		 |$LN27@ProcessPnP|
  00164	00000000	 DCD         |??_C@_1CG@EGNINIOP@?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAP?$AAn?$AAP?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$AA@|
  00168		 |$LN28@ProcessPnP|
  00168	00000000	 DCD         |??_C@_1EE@EFOEONDD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAg?$AAo?$AAt?$AA?5?$AAr?$AAu?$AAn?$AAt?$AA?5?$AAm?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AN@|
  0016c		 |$LN29@ProcessPnP|
  0016c	00000000	 DCD         |dpCurSettings|
  00170		 |$LN30@ProcessPnP|
  00170	00000000	 DCD         |??_C@_1FI@ONIMKDGK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAa?$AAm?$AAe?$AA?5?$AAl?$AAo?$AAn?$AAg?$AAe?$AAr?$AA?5?$AAt?$AAh?$AAa?$AAn?$AA?5?$AA?$CF?$AAd?$AA?5?$AAc@|
  00174		 |$LN31@ProcessPnP|
  00174	00000000	 DCD         |??_C@_1DO@DCJBELBH@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00178		 |$LN32@ProcessPnP|
  00178	00000000	 DCD         |__security_cookie|
  0017c		 |$M33726|

			 ENDP  ; |?ProcessPnPMsgQueue@@YAHPAX@Z|, ProcessPnPMsgQueue

	EXPORT	|PnpThreadProc|
	EXPORT	|??_C@_1BO@HFODHNIK@?$AA?9?$AA?$CF?$AAs?$AA?3?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@LPAHHGNK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@FJNGMGD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@PABKGHKA@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAP?$AAn?$AAP?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@FFHKOOHH@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAN?$AAo?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$CI?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@OBACGECJ@?$AAP?$AAn?$AAP?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@DAIDPNHH@?$AAP?$AAn?$AAp?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAP?$AAr?$AAo?$AAc?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@KPKINJCK@?$AA?$CL?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|StopDeviceNotifications|
	IMPORT	|WaitForMultipleObjects|
	IMPORT	|ghevPowerManagerReady|
	IMPORT	|RequestDeviceNotifications|
	IMPORT	|gpDeviceLists|
	IMPORT	|ghevPmShutdown|
	IMPORT	|CeSetThreadPriority|
	IMPORT	|GetPMThreadPriority|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T33788| DCD	|$LN55@PnpThreadP|
	DCD	0x40008a02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@HFODHNIK@?$AA?9?$AA?$CF?$AAs?$AA?3?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "%", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "e", 0x0, "x"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@LPAHHGNK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAt@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "W", 0x0, "a", 0x0, "i"
	DCB	0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r", 0x0, "M", 0x0, "u"
	DCB	0x0, "l", 0x0, "t", 0x0, "i", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "O", 0x0, "b", 0x0, "j", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "s", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@FJNGMGD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "s", 0x0, "h", 0x0, "u"
	DCB	0x0, "t", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, " "
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@PABKGHKA@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAP?$AAn?$AAP?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?5?$AAf@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "P", 0x0, "r", 0x0, "o"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "P", 0x0, "n"
	DCB	0x0, "P", 0x0, "M", 0x0, "s", 0x0, "g", 0x0, "Q", 0x0, "u"
	DCB	0x0, "e", 0x0, "u", 0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FFHKOOHH@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAN?$AAo?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$CI?$AA?$CJ@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "q"
	DCB	0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "N", 0x0, "o"
	DCB	0x0, "t", 0x0, "i", 0x0, "f", 0x0, "i", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "s", 0x0, "("
	DCB	0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@OBACGECJ@?$AAP?$AAn?$AAP?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| DCB "P"
	DCB	0x0, "n", 0x0, "P", 0x0, "P", 0x0, "r", 0x0, "i", 0x0, "o"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "y", 0x0, "2", 0x0, "5"
	DCB	0x0, "6", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@DAIDPNHH@?$AAP?$AAn?$AAp?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAP?$AAr?$AAo?$AAc?$AA?$AA@| DCB "P"
	DCB	0x0, "n", 0x0, "p", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@KPKINJCK@?$AA?$CL?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "%", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\pm\dll\pmpnp.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PnpThreadProc| PROC

; 88   : {

  00000		 |$LN55@PnpThreadP|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24ddf43	 sub         sp, sp, #0x43, 30
  00008		 |$M33785|
  00008	e1a0a000	 mov         r10, r0

; 89   :     DWORD dwStatus;
; 90   :     HANDLE hevReady = (HANDLE) lpvParam;
; 91   :     HANDLE hEvents[MAXIMUM_WAIT_OBJECTS];
; 92   :     DWORD dwNumEvents = 0;
; 93   :     BOOL fDone = FALSE;
; 94   :     BOOL fOk;
; 95   :     INT iPriority;
; 96   :     PDEVICE_LIST pdl;
; 97   : 
; 98   : #ifndef SHIP_BUILD
; 99   :     SETFNAME(_T("PnpThreadProc"));
; 100  : #endif
; 101  : 
; 102  :     PMLOGMSG(ZONE_INIT, (_T("+%s: thread 0x%08x\r\n"), pszFname, GetCurrentThreadId()));

  0000c	e59f4210	 ldr         r4, [pc, #0x210]
  00010	e5943440	 ldr         r3, [r4, #0x440]
  00014	e3130004	 tst         r3, #4
  00018	0a000005	 beq         |$LN19@PnpThreadP|
  0001c	e3a00008	 mov         r0, #8
  00020	eb000000	 bl          __GetUserKData
  00024	e59f11cc	 ldr         r1, [pc, #0x1CC]
  00028	e1a02000	 mov         r2, r0
  0002c	e59f01ec	 ldr         r0, [pc, #0x1EC]
  00030	eb000000	 bl          CeLogMsg
  00034		 |$LN19@PnpThreadP|

; 103  : 
; 104  :     // set the thread priority
; 105  :     if(!GetPMThreadPriority(_T("PnPPriority256"), &iPriority)) {

  00034	e59f01e0	 ldr         r0, [pc, #0x1E0]
  00038	e28d1000	 add         r1, sp, #0
  0003c	eb000000	 bl          GetPMThreadPriority
  00040	e3500000	 cmp         r0, #0

; 106  :         iPriority = DEF_PNP_THREAD_PRIORITY;

  00044	03a010f9	 moveq       r1, #0xF9
  00048	058d1000	 streq       r1, [sp]
  0004c	159d1000	 ldrne       r1, [sp]

; 107  :     }
; 108  :     CeSetThreadPriority(GetCurrentThread(), iPriority);

  00050	e3a00041	 mov         r0, #0x41
  00054	eb000000	 bl          CeSetThreadPriority

; 109  : 
; 110  :     // first list entry is the exit event
; 111  :     hEvents[dwNumEvents++] = ghevPmShutdown;

  00058	e59f81b8	 ldr         r8, [pc, #0x1B8]

; 112  : 
; 113  :     // set up device notifications
; 114  :     for(pdl = gpDeviceLists; pdl != NULL && dwNumEvents < dim(hEvents); pdl = pdl->pNext) {

  0005c	e59f91b0	 ldr         r9, [pc, #0x1B0]
  00060	e3a07001	 mov         r7, #1
  00064	e5983000	 ldr         r3, [r8]
  00068	e5992000	 ldr         r2, [r9]
  0006c	e58d300c	 str         r3, [sp, #0xC]
  00070	e1b05002	 movs        r5, r2
  00074	0a000017	 beq         |$LN51@PnpThreadP|
  00078	e28d6010	 add         r6, sp, #0x10
  0007c		 |$LL15@PnpThreadP|
  0007c	e3570040	 cmp         r7, #0x40
  00080	2a000014	 bcs         |$LN51@PnpThreadP|

; 115  :         hEvents[dwNumEvents++] = pdl->hMsgQ;

  00084	e5953008	 ldr         r3, [r5, #8]

; 116  :         pdl->hnClass = RequestDeviceNotifications(pdl->pGuid, pdl->hMsgQ, TRUE);

  00088	e3a02001	 mov         r2, #1
  0008c	e2877001	 add         r7, r7, #1
  00090	e4863004	 str         r3, [r6], #4
  00094	e5951008	 ldr         r1, [r5, #8]
  00098	e5950000	 ldr         r0, [r5]
  0009c	eb000000	 bl          RequestDeviceNotifications
  000a0	e3500000	 cmp         r0, #0
  000a4	e585000c	 str         r0, [r5, #0xC]

; 117  :         if(pdl->hnClass == NULL) {

  000a8	1a000007	 bne         |$LN14@PnpThreadP|

; 118  :             PMLOGMSG(ZONE_WARN, (_T("%s: RequestDeviceNotifications() failed %d\r\n"),
; 119  :                 pszFname, GetLastError()));

  000ac	e5943440	 ldr         r3, [r4, #0x440]
  000b0	e3130002	 tst         r3, #2
  000b4	0a000004	 beq         |$LN14@PnpThreadP|
  000b8	eb000000	 bl          GetLastError
  000bc	e59f1134	 ldr         r1, [pc, #0x134]
  000c0	e1a02000	 mov         r2, r0
  000c4	e59f0144	 ldr         r0, [pc, #0x144]
  000c8	eb000000	 bl          CeLogMsg
  000cc		 |$LN14@PnpThreadP|
  000cc	e5953014	 ldr         r3, [r5, #0x14]
  000d0	e1b05003	 movs        r5, r3
  000d4	1affffe8	 bne         |$LL15@PnpThreadP|
  000d8		 |$LN51@PnpThreadP|

; 120  :         }
; 121  :     }
; 122  :     DEBUGCHK(dwNumEvents > 1);
; 123  :     // we're up and running
; 124  :     SetEvent(hevReady);

  000d8	e3a01003	 mov         r1, #3
  000dc	e1a0000a	 mov         r0, r10
  000e0	eb000000	 bl          EventModify

; 125  :     
; 126  :     // Wait for Initalization complete.
; 127  :     HANDLE hInit[2] = {ghevPowerManagerReady, ghevPmShutdown};

  000e4	e59f3120	 ldr         r3, [pc, #0x120]
  000e8	e598e000	 ldr         lr, [r8]

; 128  :     fDone = (WaitForMultipleObjects(_countof(hInit), hInit, FALSE, INFINITE)!= WAIT_OBJECT_0);

  000ec	e3a02000	 mov         r2, #0
  000f0	e5931000	 ldr         r1, [r3]
  000f4	e3e03000	 mvn         r3, #0
  000f8	e3a00002	 mov         r0, #2
  000fc	e58d1004	 str         r1, [sp, #4]
  00100	e28d1004	 add         r1, sp, #4
  00104	e58de008	 str         lr, [sp, #8]
  00108	eb000000	 bl          WaitForMultipleObjects
  0010c	e3500000	 cmp         r0, #0
  00110	1a000026	 bne         |$LN50@PnpThreadP|
  00114		 |$LL11@PnpThreadP|

; 129  : 
; 130  :     // wait for new devices to arrive
; 131  :     while(!fDone) {
; 132  :         dwStatus = WaitForMultipleObjects(dwNumEvents, hEvents, FALSE, INFINITE);

  00114	e3e03000	 mvn         r3, #0
  00118	e3a02000	 mov         r2, #0
  0011c	e28d100c	 add         r1, sp, #0xC
  00120	e1a00007	 mov         r0, r7
  00124	eb000000	 bl          WaitForMultipleObjects
  00128	e1b05000	 movs        r5, r0

; 133  :         if(dwStatus == (WAIT_OBJECT_0 + 0)) {

  0012c	0a00001a	 beq         |$LN45@PnpThreadP|

; 135  :             fDone = TRUE;
; 136  :         } else if(dwStatus > WAIT_OBJECT_0 && dwStatus <= (WAIT_OBJECT_0 + MAXIMUM_WAIT_OBJECTS)) { 

  00130	e2453001	 sub         r3, r5, #1
  00134	e353003f	 cmp         r3, #0x3F
  00138	8a00000c	 bhi         |$LN7@PnpThreadP|
  0013c	e28d600c	 add         r6, sp, #0xC

; 137  :             dwStatus -= WAIT_OBJECT_0;
; 138  :             fOk = ProcessPnPMsgQueue(hEvents[dwStatus]);

  00140	e7b60105	 ldr         r0, [r6, +r5, lsl #2]!
  00144	eb000000	 bl          |?ProcessPnPMsgQueue@@YAHPAX@Z|
  00148	e3500000	 cmp         r0, #0

; 139  :             if(!fOk) {

  0014c	1afffff0	 bne         |$LL11@PnpThreadP|

; 140  :                 PMLOGMSG(ZONE_WARN, (_T("%s: ProcessPnPMsgQueue(0x%08x) failed\r\n"), pszFname,
; 141  :                     hEvents[dwStatus]));

  00150	e5943440	 ldr         r3, [r4, #0x440]
  00154	e3130002	 tst         r3, #2
  00158	0affffed	 beq         |$LL11@PnpThreadP|
  0015c	e5962000	 ldr         r2, [r6]
  00160	e59f1090	 ldr         r1, [pc, #0x90]
  00164	e59f009c	 ldr         r0, [pc, #0x9C]
  00168	eb000000	 bl          CeLogMsg
  0016c	eaffffe8	 b           |$LL11@PnpThreadP|
  00170		 |$LN7@PnpThreadP|

; 134  :             PMLOGMSG(ZONE_WARN, (_T("%s: shutdown event set\r\n"), pszFname));

  00170	e5943440	 ldr         r3, [r4, #0x440]

; 142  :             }
; 143  :         } else {
; 144  :             PMLOGMSG(ZONE_WARN, (_T("%s: WaitForMultipleObjects() returned %d, status is %d\r\n"),
; 145  :                 pszFname, dwStatus, GetLastError())); 

  00174	e3130002	 tst         r3, #2
  00178	0a00000c	 beq         |$LN50@PnpThreadP|
  0017c	eb000000	 bl          GetLastError
  00180	e59f1070	 ldr         r1, [pc, #0x70]
  00184	e1a03000	 mov         r3, r0
  00188	e59f0074	 ldr         r0, [pc, #0x74]
  0018c	e1a02005	 mov         r2, r5
  00190	eb000000	 bl          CeLogMsg

; 146  :             fDone = TRUE;
; 147  :             break;
; 148  :         }
; 149  :     }
; 150  : 
; 151  :     // release resources
; 152  :     for(pdl = gpDeviceLists; pdl != NULL; pdl = pdl->pNext) {

  00194	e5993000	 ldr         r3, [r9]
  00198	ea00000b	 b           |$LN52@PnpThreadP|
  0019c		 |$LN45@PnpThreadP|

; 134  :             PMLOGMSG(ZONE_WARN, (_T("%s: shutdown event set\r\n"), pszFname));

  0019c	e5943440	 ldr         r3, [r4, #0x440]
  001a0	e3130002	 tst         r3, #2
  001a4	159f0054	 ldrne       r0, [pc, #0x54]
  001a8	159f1048	 ldrne       r1, [pc, #0x48]
  001ac	1b000000	 blne        CeLogMsg
  001b0		 |$LN50@PnpThreadP|

; 146  :             fDone = TRUE;
; 147  :             break;
; 148  :         }
; 149  :     }
; 150  : 
; 151  :     // release resources
; 152  :     for(pdl = gpDeviceLists; pdl != NULL; pdl = pdl->pNext) {

  001b0	e5993000	 ldr         r3, [r9]
  001b4	ea000004	 b           |$LN52@PnpThreadP|
  001b8		 |$LL4@PnpThreadP|

; 153  :         if(pdl->hnClass != NULL) StopDeviceNotifications(pdl->hnClass);

  001b8	e595300c	 ldr         r3, [r5, #0xC]
  001bc	e3530000	 cmp         r3, #0
  001c0	11a00003	 movne       r0, r3
  001c4	1b000000	 blne        StopDeviceNotifications
  001c8	e5953014	 ldr         r3, [r5, #0x14]
  001cc		 |$LN52@PnpThreadP|
  001cc	e1b05003	 movs        r5, r3
  001d0	1afffff8	 bne         |$LL4@PnpThreadP|
  001d4	e5943440	 ldr         r3, [r4, #0x440]

; 154  :     }
; 155  : 
; 156  :     // all done
; 157  :     PMLOGMSG(ZONE_INIT | ZONE_WARN, (_T("-%s: exiting\r\n"), pszFname));

  001d8	e3130006	 tst         r3, #6
  001dc	159f0018	 ldrne       r0, [pc, #0x18]
  001e0	159f1010	 ldrne       r1, [pc, #0x10]
  001e4	1b000000	 blne        CeLogMsg

; 158  :     return 0;

  001e8	e3a00000	 mov         r0, #0

; 159  : }

  001ec	e28ddf43	 add         sp, sp, #0x43, 30
  001f0	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  001f4	e12fff1e	 bx          lr
  001f8		 |$LN56@PnpThreadP|
  001f8		 |$LN57@PnpThreadP|
  001f8	00000000	 DCD         |??_C@_1BM@DAIDPNHH@?$AAP?$AAn?$AAp?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAP?$AAr?$AAo?$AAc?$AA?$AA@|
  001fc		 |$LN58@PnpThreadP|
  001fc	00000000	 DCD         |??_C@_1BO@HFODHNIK@?$AA?9?$AA?$CF?$AAs?$AA?3?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@|
  00200		 |$LN59@PnpThreadP|
  00200	00000000	 DCD         |??_C@_1DC@FJNGMGD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  00204		 |$LN60@PnpThreadP|
  00204	00000000	 DCD         |??_C@_1HC@LPAHHGNK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAt@|
  00208		 |$LN61@PnpThreadP|
  00208	00000000	 DCD         |??_C@_1FA@PABKGHKA@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAP?$AAn?$AAP?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?5?$AAf@|
  0020c		 |$LN62@PnpThreadP|
  0020c	00000000	 DCD         |ghevPowerManagerReady|
  00210		 |$LN63@PnpThreadP|
  00210	00000000	 DCD         |??_C@_1FK@FFHKOOHH@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAN?$AAo?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$CI?$AA?$CJ@|
  00214		 |$LN64@PnpThreadP|
  00214	00000000	 DCD         |gpDeviceLists|
  00218		 |$LN65@PnpThreadP|
  00218	00000000	 DCD         |ghevPmShutdown|
  0021c		 |$LN66@PnpThreadP|
  0021c	00000000	 DCD         |??_C@_1BO@OBACGECJ@?$AAP?$AAn?$AAP?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@|
  00220		 |$LN67@PnpThreadP|
  00220	00000000	 DCD         |??_C@_1CK@KPKINJCK@?$AA?$CL?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00224		 |$LN68@PnpThreadP|
  00224	00000000	 DCD         |dpCurSettings|
  00228		 |$M33786|

			 ENDP  ; |PnpThreadProc|

	END
