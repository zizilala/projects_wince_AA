; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\PM\DLL\pmresume.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T33681| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M33678|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M33679|

			 ENDP  ; |SetEvent|

	EXPORT	|GetCurrentThread|

  00000			 AREA	 |.pdata|, PDATA
|$T33690| DCD	|$LN5@GetCurrent|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentThread| PROC

; 351  : _inline HANDLE GetCurrentThread(void) {

  00000		 |$LN5@GetCurrent|
  00000		 |$M33687|

; 352  : 	return ((HANDLE)(SH_CURTHREAD+SYS_HANDLE_BASE));

  00000	e3a00041	 mov         r0, #0x41

; 353  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M33688|

			 ENDP  ; |GetCurrentThread|

	EXPORT	|GetCurrentThreadId|
	IMPORT	|__GetUserKData|

  00000			 AREA	 |.pdata|, PDATA
|$T33699| DCD	|$LN5@GetCurrent@2|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentThreadId| PROC

; 369  : _inline DWORD GetCurrentThreadId(void) {

  00000		 |$LN5@GetCurrent@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M33696|

; 370  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURTHREAD * sizeof(HANDLE)));

  00004	e3a00008	 mov         r0, #8
  00008	eb000000	 bl          __GetUserKData

; 371  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M33697|

			 ENDP  ; |GetCurrentThreadId|

	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|CeLogData|
	IMPORT	|StringCchLengthW|
	IMPORT	|StringCchVPrintfW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|
; File c:\wince600\public\common\sdk\inc\celog.h

  00000			 AREA	 |.pdata|, PDATA
|$T33713| DCD	|$LN7@CeLogMsg|
	DCD	0xc0002a04

  00000			 AREA	 |.xdata|, DATA
|$T33709| DCD	0xffffffe0
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T33709|

  00008		 |CeLogMsg| PROC

; 1015 : {

  00008		 |$LN7@CeLogMsg|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d000f	 stmdb       sp!, {r0 - r3}
  00010	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00014	e24dde22	 sub         sp, sp, #0x22, 28
  00018		 |$M33710|
  00018	e58d022c	 str         r0, [sp, #0x22C]
  0001c	e59f3088	 ldr         r3, [pc, #0x88]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d321c	 str         r3, [sp, #0x21C]

; 1016 :     va_list arglist;
; 1017 :     WCHAR   szTemp[MAX_PATH];
; 1018 :     size_t  cchLen;
; 1019 :     HRESULT hr;
; 1020 : 
; 1021 :     // Compose a single string using the input args
; 1022 :     va_start(arglist, szFormat);
; 1023 :     hr = StringCchVPrintfW(szTemp, MAX_PATH, szFormat, arglist);

  00028	e1a02000	 mov         r2, r0
  0002c	e28d0014	 add         r0, sp, #0x14
  00030	e28d3e23	 add         r3, sp, #0x23, 28
  00034	e3a01f41	 mov         r1, #0x41, 30
  00038	eb000000	 bl          StringCchVPrintfW
  0003c	e3500000	 cmp         r0, #0

; 1024 :     if (SUCCEEDED(hr)) {

  00040	4a000014	 bmi         |$LN1@CeLogMsg|

; 1025 :         hr = StringCchLengthW(szTemp, MAX_PATH, &cchLen);

  00044	e28d2010	 add         r2, sp, #0x10
  00048	e3a01f41	 mov         r1, #0x41, 30
  0004c	e28d0014	 add         r0, sp, #0x14
  00050	eb000000	 bl          StringCchLengthW
  00054	e3500000	 cmp         r0, #0

; 1026 :         if (SUCCEEDED(hr)) {

  00058	4a00000e	 bmi         |$LN1@CeLogMsg|

; 1027 :             CeLogData(TRUE, CELID_RAW_WCHAR, szTemp, (WORD)((cchLen + 1) * sizeof(WCHAR)),
; 1028 :                       0, CELZONE_ALWAYSON, 0, FALSE);

  0005c	e59d3010	 ldr         r3, [sp, #0x10]
  00060	e3a04101	 mov         r4, #1, 2
  00064	e3a0e000	 mov         lr, #0
  00068	e2833001	 add         r3, r3, #1
  0006c	e1a03083	 mov         r3, r3, lsl #1
  00070	e1a03803	 mov         r3, r3, lsl #16
  00074	e1a03823	 mov         r3, r3, lsr #16
  00078	e28d2014	 add         r2, sp, #0x14
  0007c	e3a0104a	 mov         r1, #0x4A
  00080	e3a00001	 mov         r0, #1
  00084	e58de00c	 str         lr, [sp, #0xC]
  00088	e58de008	 str         lr, [sp, #8]
  0008c	e58d4004	 str         r4, [sp, #4]
  00090	e58de000	 str         lr, [sp]
  00094	eb000000	 bl          CeLogData
  00098		 |$LN1@CeLogMsg|
  00098	e59d021c	 ldr         r0, [sp, #0x21C]
  0009c	eb000000	 bl          __security_check_cookie

; 1029 :         }
; 1030 :     }
; 1031 : }

  000a0	e28dde22	 add         sp, sp, #0x22, 28
  000a4	e89d6010	 ldmia       sp, {r4, sp, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN8@CeLogMsg|
  000ac		 |$LN9@CeLogMsg|
  000ac	00000000	 DCD         |__security_cookie|
  000b0		 |$M33711|

			 ENDP  ; |CeLogMsg|

	EXPORT	|ResumeThreadProc|
	EXPORT	|??_C@_1BO@HFODHNIK@?$AA?9?$AA?$CF?$AAs?$AA?3?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@FJNGMGD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@LPAHHGNK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@EJCLFLII@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAm?$AAe?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@JOMDCLAD@?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@FNPJBGCC@?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAP?$AAr?$AAo?$AAc?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@KPKINJCK@?$AA?$CL?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|GetLastError|
	IMPORT	|PlatformResumeSystem|
	IMPORT	|WaitForMultipleObjects|
	IMPORT	|ghevPmShutdown|
	IMPORT	|ghevResume|
	IMPORT	|CeSetThreadPriority|
	IMPORT	|GetPMThreadPriority|
	IMPORT	|dpCurSettings|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T33751| DCD	|$LN33@ResumeThre|
	DCD	0x40004f02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@HFODHNIK@?$AA?9?$AA?$CF?$AAs?$AA?3?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "%", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "e", 0x0, "x"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@FJNGMGD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "s", 0x0, "h", 0x0, "u"
	DCB	0x0, "t", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, " "
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@LPAHHGNK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAt@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "W", 0x0, "a", 0x0, "i"
	DCB	0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r", 0x0, "M", 0x0, "u"
	DCB	0x0, "l", 0x0, "t", 0x0, "i", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "O", 0x0, "b", 0x0, "j", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "s", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@EJCLFLII@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAm?$AAe?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "u", 0x0, "m", 0x0, "e", 0x0, " ", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "s", 0x0, "i"
	DCB	0x0, "g", 0x0, "n", 0x0, "a", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@JOMDCLAD@?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "u", 0x0, "m", 0x0, "e", 0x0, "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "2", 0x0, "5", 0x0, "6", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@FNPJBGCC@?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAP?$AAr?$AAo?$AAc?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "u", 0x0, "m", 0x0, "e", 0x0, "T"
	DCB	0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@KPKINJCK@?$AA?$CL?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "%", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\pm\dll\pmresume.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ResumeThreadProc| PROC

; 35   : {

  00000		 |$LN33@ResumeThre|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M33748|
  00008	e1a05000	 mov         r5, r0

; 36   :     DWORD dwStatus;
; 37   :     HANDLE hevReady = (HANDLE) lpvParam;
; 38   :     HANDLE hEvents[2];
; 39   :     BOOL fDone = FALSE;
; 40   :     INT iPriority;
; 41   : 
; 42   : #ifndef SHIP_BUILD
; 43   :     SETFNAME(_T("ResumeThreadProc"));
; 44   : #endif
; 45   : 
; 46   :     PMLOGMSG(ZONE_INIT, (_T("+%s: thread 0x%08x\r\n"), pszFname, GetCurrentThreadId()));

  0000c	e59f4124	 ldr         r4, [pc, #0x124]
  00010	e5943440	 ldr         r3, [r4, #0x440]
  00014	e3130004	 tst         r3, #4
  00018	0a000005	 beq         |$LN11@ResumeThre|
  0001c	e3a00008	 mov         r0, #8
  00020	eb000000	 bl          __GetUserKData
  00024	e59f10e8	 ldr         r1, [pc, #0xE8]
  00028	e1a02000	 mov         r2, r0
  0002c	e59f0100	 ldr         r0, [pc, #0x100]
  00030	eb000000	 bl          CeLogMsg
  00034		 |$LN11@ResumeThre|

; 47   : 
; 48   :     // set the thread priority
; 49   :     if(!GetPMThreadPriority(_T("ResumePriority256"), &iPriority)) {

  00034	e59f00f4	 ldr         r0, [pc, #0xF4]
  00038	e28d1000	 add         r1, sp, #0
  0003c	eb000000	 bl          GetPMThreadPriority
  00040	e3500000	 cmp         r0, #0

; 50   :         iPriority = DEF_RESUME_THREAD_PRIORITY;

  00044	03a01063	 moveq       r1, #0x63
  00048	058d1000	 streq       r1, [sp]
  0004c	159d1000	 ldrne       r1, [sp]

; 51   :     }
; 52   :     CeSetThreadPriority(GetCurrentThread(), iPriority);

  00050	e3a00041	 mov         r0, #0x41
  00054	eb000000	 bl          CeSetThreadPriority

; 53   : 
; 54   :     // we're up and running
; 55   :     SetEvent(hevReady);

  00058	e3a01003	 mov         r1, #3
  0005c	e1a00005	 mov         r0, r5
  00060	eb000000	 bl          EventModify

; 56   : 
; 57   :     // wait for new devices to arrive
; 58   :     hEvents[0] = ghevResume;

  00064	e59f30c0	 ldr         r3, [pc, #0xC0]

; 59   :     hEvents[1] = ghevPmShutdown;

  00068	e59f20b8	 ldr         r2, [pc, #0xB8]
  0006c	e5933000	 ldr         r3, [r3]
  00070	e5922000	 ldr         r2, [r2]
  00074	e58d3004	 str         r3, [sp, #4]
  00078	e58d2008	 str         r2, [sp, #8]
  0007c		 |$LL7@ResumeThre|

; 60   :     while(!fDone) {
; 61   :         dwStatus = WaitForMultipleObjects(dim(hEvents), hEvents, FALSE, INFINITE);

  0007c	e3e03000	 mvn         r3, #0
  00080	e3a02000	 mov         r2, #0
  00084	e28d1004	 add         r1, sp, #4
  00088	e3a00002	 mov         r0, #2
  0008c	eb000000	 bl          WaitForMultipleObjects

; 63   :         case (WAIT_OBJECT_0 + 0):
; 64   :             PMLOGMSG(ZONE_RESUME, (_T("%s: resume event signaled\r\n"), pszFname));

  00090	e5943440	 ldr         r3, [r4, #0x440]
  00094	e1b05000	 movs        r5, r0
  00098	1a000005	 bne         |$LN29@ResumeThre|
  0009c	e3130008	 tst         r3, #8
  000a0	159f106c	 ldrne       r1, [pc, #0x6C]
  000a4	159f0078	 ldrne       r0, [pc, #0x78]
  000a8	1b000000	 blne        CeLogMsg

; 65   :             PlatformResumeSystem();

  000ac	eb000000	 bl          PlatformResumeSystem
  000b0	eafffff1	 b           |$LL7@ResumeThre|
  000b4		 |$LN29@ResumeThre|

; 62   :         switch(dwStatus) {

  000b4	e3550001	 cmp         r5, #1
  000b8	0a000008	 beq         |$LN2@ResumeThre|

; 66   :             break;
; 67   :         case (WAIT_OBJECT_0 + 1):
; 68   :             PMLOGMSG(ZONE_WARN, (_T("%s: shutdown event set\r\n"), pszFname));
; 69   :             fDone = TRUE;
; 70   :             break;
; 71   :         default:
; 72   :             PMLOGMSG(ZONE_WARN, (_T("%s: WaitForMultipleObjects() returned %d, status is %d\r\n"),
; 73   :                 pszFname, dwStatus, GetLastError())); 

  000bc	e3130002	 tst         r3, #2
  000c0	0a00000a	 beq         |$LN15@ResumeThre|
  000c4	eb000000	 bl          GetLastError
  000c8	e59f1044	 ldr         r1, [pc, #0x44]
  000cc	e1a03000	 mov         r3, r0
  000d0	e59f0048	 ldr         r0, [pc, #0x48]
  000d4	e1a02005	 mov         r2, r5
  000d8	eb000000	 bl          CeLogMsg

; 74   :             fDone = TRUE;
; 75   :             break;

  000dc	ea000003	 b           |$LN15@ResumeThre|
  000e0		 |$LN2@ResumeThre|

; 66   :             break;
; 67   :         case (WAIT_OBJECT_0 + 1):
; 68   :             PMLOGMSG(ZONE_WARN, (_T("%s: shutdown event set\r\n"), pszFname));
; 69   :             fDone = TRUE;
; 70   :             break;
; 71   :         default:
; 72   :             PMLOGMSG(ZONE_WARN, (_T("%s: WaitForMultipleObjects() returned %d, status is %d\r\n"),
; 73   :                 pszFname, dwStatus, GetLastError())); 

  000e0	e3130002	 tst         r3, #2
  000e4	159f0030	 ldrne       r0, [pc, #0x30]
  000e8	159f1024	 ldrne       r1, [pc, #0x24]
  000ec	1b000000	 blne        CeLogMsg
  000f0		 |$LN15@ResumeThre|
  000f0	e5943440	 ldr         r3, [r4, #0x440]

; 76   :         }
; 77   :     }
; 78   : 
; 79   :     PMLOGMSG(ZONE_INIT | ZONE_WARN, (_T("-%s: exiting\r\n"), pszFname));

  000f4	e3130006	 tst         r3, #6
  000f8	159f0018	 ldrne       r0, [pc, #0x18]
  000fc	159f1010	 ldrne       r1, [pc, #0x10]
  00100	1b000000	 blne        CeLogMsg

; 80   :     return 0;

  00104	e3a00000	 mov         r0, #0

; 81   : }

  00108	e28dd00c	 add         sp, sp, #0xC
  0010c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00110	e12fff1e	 bx          lr
  00114		 |$LN34@ResumeThre|
  00114		 |$LN35@ResumeThre|
  00114	00000000	 DCD         |??_C@_1CC@FNPJBGCC@?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAP?$AAr?$AAo?$AAc?$AA?$AA@|
  00118		 |$LN36@ResumeThre|
  00118	00000000	 DCD         |??_C@_1BO@HFODHNIK@?$AA?9?$AA?$CF?$AAs?$AA?3?$AA?5?$AAe?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?$AN?$AA?6?$AA?$AA@|
  0011c		 |$LN37@ResumeThre|
  0011c	00000000	 DCD         |??_C@_1DC@FJNGMGD@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAe?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  00120		 |$LN38@ResumeThre|
  00120	00000000	 DCD         |??_C@_1HC@LPAHHGNK@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAM?$AAu?$AAl?$AAt?$AAi?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAe?$AAt@|
  00124		 |$LN39@ResumeThre|
  00124	00000000	 DCD         |??_C@_1DI@EJCLFLII@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAm?$AAe?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00128		 |$LN40@ResumeThre|
  00128	00000000	 DCD         |ghevPmShutdown|
  0012c		 |$LN41@ResumeThre|
  0012c	00000000	 DCD         |ghevResume|
  00130		 |$LN42@ResumeThre|
  00130	00000000	 DCD         |??_C@_1CE@JOMDCLAD@?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@|
  00134		 |$LN43@ResumeThre|
  00134	00000000	 DCD         |??_C@_1CK@KPKINJCK@?$AA?$CL?$AA?$CF?$AAs?$AA?3?$AA?5?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00138		 |$LN44@ResumeThre|
  00138	00000000	 DCD         |dpCurSettings|
  0013c		 |$M33749|

			 ENDP  ; |ResumeThreadProc|

	EXPORT	|PmPowerHandler|
	IMPORT	|ghevTimerResume|
	IMPORT	|CeSetPowerOnEvent|

  00000			 AREA	 |.pdata|, PDATA
|$T33770| DCD	|$LN8@PmPowerHan|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PmPowerHandler| PROC

; 87   : {

  00000		 |$LN8@PmPowerHan|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M33767|
  00004	e3500000	 cmp         r0, #0

; 88   :     if(!bOff) {

  00008	1a000007	 bne         |$LN1@PmPowerHan|

; 89   :         // we are resuming, signal the resume thread
; 90   :         if(ghevResume != NULL) CeSetPowerOnEvent(ghevResume);

  0000c	e59f3024	 ldr         r3, [pc, #0x24]
  00010	e5930000	 ldr         r0, [r3]
  00014	e3500000	 cmp         r0, #0
  00018	1b000000	 blne        CeSetPowerOnEvent

; 91   : 
; 92   :         // signal the timer thread too
; 93   :         if(ghevTimerResume != NULL) CeSetPowerOnEvent(ghevTimerResume);

  0001c	e59f3010	 ldr         r3, [pc, #0x10]
  00020	e5930000	 ldr         r0, [r3]
  00024	e3500000	 cmp         r0, #0
  00028	1b000000	 blne        CeSetPowerOnEvent
  0002c		 |$LN1@PmPowerHan|

; 94   :     }
; 95   : }

  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$LN9@PmPowerHan|
  00034		 |$LN10@PmPowerHan|
  00034	00000000	 DCD         |ghevTimerResume|
  00038		 |$LN11@PmPowerHan|
  00038	00000000	 DCD         |ghevResume|
  0003c		 |$M33768|

			 ENDP  ; |PmPowerHandler|

	END
