; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170\SRC\DRIVERS\sysctrl\power.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|g_pGPIORegisters| [ DATA ]
	EXPORT	|g_pMFPBase| [ DATA ]
	EXPORT	|lpPMER| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|g_pGPIORegisters| % 0x4
|g_pMFPBase| %	0x4
|lpPMER| %	0x4

  00000			 AREA	 |.data|, DATA
|g_szOPDescription| DCD |??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@|
	DCD	|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "8"
	DCB	0x0, "0", 0x0, "6", 0x0, " ", 0x0, "H", 0x0, "S", 0x0, "M"
	DCB	0x0, "H", 0x0, "Z", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "8"
	DCB	0x0, "0", 0x0, "6", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "6"
	DCB	0x0, "2", 0x0, "4", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "4"
	DCB	0x0, "1", 0x0, "6", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "2"
	DCB	0x0, "0", 0x0, "8", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@| DCB "R"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "O", 0x0, "S"
	DCB	0x0, "C", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|MapResources|
	IMPORT	|PXA_CTX_GetRegAddr2|

  00000			 AREA	 |.pdata|, PDATA
|$T45851| DCD	|$LN8@MapResourc|
	DCD	0x40002902
; Function compile flags: /Odtp
; File c:\wince600\platform\z2170\src\drivers\sysctrl\power.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MapResources| PROC

; 28   : {

  00000		 |$LN8@MapResourc|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M45848|

; 29   :     if(g_pGPIORegisters == NULL)

  00008	e59f3090	 ldr         r3, [pc, #0x90]
  0000c	e5933000	 ldr         r3, [r3]
  00010	e3530000	 cmp         r3, #0
  00014	1a000006	 bne         |$LN3@MapResourc|

; 30   :     {
; 31   :         g_pGPIORegisters = (volatile PXA_GPIOREG_T *)PXA_CTX_GetRegAddr(PXA_PERIPHERAL_REGIDX_GPIO);

  00018	e3a01000	 mov         r1, #0
  0001c	e3a0000c	 mov         r0, #0xC
  00020	eb000000	 bl          PXA_CTX_GetRegAddr2
  00024	e58d0000	 str         r0, [sp]
  00028	e59d2000	 ldr         r2, [sp]
  0002c	e59f306c	 ldr         r3, [pc, #0x6C]
  00030	e5832000	 str         r2, [r3]
  00034		 |$LN3@MapResourc|

; 32   :     }
; 33   : 
; 34   :     if(g_pMFPBase == NULL)

  00034	e59f3060	 ldr         r3, [pc, #0x60]
  00038	e5933000	 ldr         r3, [r3]
  0003c	e3530000	 cmp         r3, #0
  00040	1a000006	 bne         |$LN2@MapResourc|

; 35   :     {
; 36   :         g_pMFPBase = (volatile UINT32 *)PXA_CTX_GetRegAddr(PXA_PERIPHERAL_REGIDX_MFP);

  00044	e3a01000	 mov         r1, #0
  00048	e3a0000d	 mov         r0, #0xD
  0004c	eb000000	 bl          PXA_CTX_GetRegAddr2
  00050	e58d0004	 str         r0, [sp, #4]
  00054	e59d2004	 ldr         r2, [sp, #4]
  00058	e59f303c	 ldr         r3, [pc, #0x3C]
  0005c	e5832000	 str         r2, [r3]
  00060		 |$LN2@MapResourc|

; 37   :     }
; 38   : 
; 39   :     if(lpPMER == NULL)

  00060	e59f3030	 ldr         r3, [pc, #0x30]
  00064	e5933000	 ldr         r3, [r3]
  00068	e3530000	 cmp         r3, #0
  0006c	1a000006	 bne         |$LN1@MapResourc|

; 40   :     {
; 41   :         lpPMER = (volatile UINT32 *)PXA_CTX_GetRegAddr(PXA_PERIPHERAL_REGIDX_PMER);

  00070	e3a01000	 mov         r1, #0
  00074	e3a00032	 mov         r0, #0x32
  00078	eb000000	 bl          PXA_CTX_GetRegAddr2
  0007c	e58d0008	 str         r0, [sp, #8]
  00080	e59d2008	 ldr         r2, [sp, #8]
  00084	e59f300c	 ldr         r3, [pc, #0xC]
  00088	e5832000	 str         r2, [r3]
  0008c		 |$LN1@MapResourc|

; 42   :     }
; 43   : 
; 44   : }

  0008c	e28dd00c	 add         sp, sp, #0xC
  00090	e49de004	 ldr         lr, [sp], #4
  00094	e12fff1e	 bx          lr
  00098		 |$LN9@MapResourc|
  00098		 |$LN10@MapResourc|
  00098	00000000	 DCD         |lpPMER|
  0009c		 |$LN11@MapResourc|
  0009c	00000000	 DCD         |g_pMFPBase|
  000a0		 |$LN12@MapResourc|
  000a0	00000000	 DCD         |g_pGPIORegisters|
  000a4		 |$M45849|

			 ENDP  ; |MapResources|

	EXPORT	|EnableGPIOReset|

  00008			 AREA	 |.pdata|, PDATA
|$T45860| DCD	|$LN6@EnableGPIO|
	DCD	0x40000a00
; Function compile flags: /Odtp

  000a4			 AREA	 |.text|, CODE, ARM

  000a4		 |EnableGPIOReset| PROC

; 47   : {

  000a4		 |$LN6@EnableGPIO|
  000a4		 |$M45857|

; 48   :     if(lpPMER)

  000a4	e59f301c	 ldr         r3, [pc, #0x1C]
  000a8	e5933000	 ldr         r3, [r3]
  000ac	e3530000	 cmp         r3, #0
  000b0	0a000003	 beq         |$LN1@EnableGPIO|

; 49   :     {
; 50   :         *lpPMER = 0x00;

  000b4	e59f300c	 ldr         r3, [pc, #0xC]
  000b8	e5932000	 ldr         r2, [r3]
  000bc	e3a03000	 mov         r3, #0
  000c0	e5823000	 str         r3, [r2]
  000c4		 |$LN1@EnableGPIO|

; 51   :     }
; 52   : }

  000c4	e12fff1e	 bx          lr
  000c8		 |$LN7@EnableGPIO|
  000c8		 |$LN8@EnableGPIO|
  000c8	00000000	 DCD         |lpPMER|
  000cc		 |$M45858|

			 ENDP  ; |EnableGPIOReset|

	EXPORT	|SysCtrl_BCRGetHWPower|
	IMPORT	|PXA_GPIOGetLevel|

  00010			 AREA	 |.pdata|, PDATA
|$T45868| DCD	|$LN9@SysCtrl_BC|
	DCD	0x40002302
; Function compile flags: /Odtp

  000cc			 AREA	 |.text|, CODE, ARM

  000cc		 |SysCtrl_BCRGetHWPower| PROC

; 55   : {

  000cc		 |$LN9@SysCtrl_BC|
  000cc	e52de004	 str         lr, [sp, #-4]!
  000d0	e24dd008	 sub         sp, sp, #8
  000d4		 |$M45865|

; 56   :     PXA_LEVEL_T GPIOLevel;
; 57   : 
; 58   :     if(!g_pGPIORegisters || !g_pMFPBase)

  000d4	e59f3074	 ldr         r3, [pc, #0x74]
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e3530000	 cmp         r3, #0
  000e0	0a000003	 beq         |$LN3@SysCtrl_BC|
  000e4	e59f3068	 ldr         r3, [pc, #0x68]
  000e8	e5933000	 ldr         r3, [r3]
  000ec	e3530000	 cmp         r3, #0
  000f0	1a000000	 bne         |$LN4@SysCtrl_BC|
  000f4		 |$LN3@SysCtrl_BC|

; 59   :     {
; 60   :         MapResources();

  000f4	eb000000	 bl          MapResources
  000f8		 |$LN4@SysCtrl_BC|

; 61   :     }
; 62   : 
; 63   :     if(!g_pGPIORegisters || !g_pMFPBase)

  000f8	e59f3050	 ldr         r3, [pc, #0x50]
  000fc	e5933000	 ldr         r3, [r3]
  00100	e3530000	 cmp         r3, #0
  00104	0a000003	 beq         |$LN1@SysCtrl_BC|
  00108	e59f3044	 ldr         r3, [pc, #0x44]
  0010c	e5933000	 ldr         r3, [r3]
  00110	e3530000	 cmp         r3, #0
  00114	1a000002	 bne         |$LN2@SysCtrl_BC|
  00118		 |$LN1@SysCtrl_BC|

; 64   :     {
; 65   :         return FALSE;

  00118	e3a03000	 mov         r3, #0
  0011c	e58d3004	 str         r3, [sp, #4]
  00120	ea000006	 b           |$LN5@SysCtrl_BC|
  00124		 |$LN2@SysCtrl_BC|

; 66   :     }
; 67   : 
; 68   :     PXA_GPIOGetLevel((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, &GPIOLevel);

  00124	e28d2000	 add         r2, sp, #0
  00128	e3a0105d	 mov         r1, #0x5D
  0012c	e59f301c	 ldr         r3, [pc, #0x1C]
  00130	e5930000	 ldr         r0, [r3]
  00134	eb000000	 bl          PXA_GPIOGetLevel

; 69   : 
; 70   :     return GPIOLevel;

  00138	e59d3000	 ldr         r3, [sp]
  0013c	e58d3004	 str         r3, [sp, #4]
  00140		 |$LN5@SysCtrl_BC|

; 71   : }

  00140	e59d0004	 ldr         r0, [sp, #4]
  00144	e28dd008	 add         sp, sp, #8
  00148	e49de004	 ldr         lr, [sp], #4
  0014c	e12fff1e	 bx          lr
  00150		 |$LN10@SysCtrl_BC|
  00150		 |$LN11@SysCtrl_BC|
  00150	00000000	 DCD         |g_pGPIORegisters|
  00154		 |$LN12@SysCtrl_BC|
  00154	00000000	 DCD         |g_pMFPBase|
  00158		 |$M45866|

			 ENDP  ; |SysCtrl_BCRGetHWPower|

	EXPORT	|DisableUart3_Pin|
	EXPORT	|??_C@_1DM@CHIENBOD@?$AAS?$AAy?$AAs?$AAC?$AAt?$AAr?$AAl?$AA_?$AAB?$AAC?$AAR?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@JCNJJEPJ@?$AAS?$AAy?$AAs?$AAC?$AAt?$AAr?$AAl?$AA_?$AAB?$AAC?$AAR?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SysCtrl_BCRSetHWPower|
	IMPORT	|PXA_MFPConfigureLpmOutputLevel|
	IMPORT	|PXA_GPIOSetLevel|
	IMPORT	|PXA_GPIOSetDirection|
	IMPORT	|PXA_MFPSetAfDs|
	IMPORT	|MFP_SetActiveMode|
	IMPORT	|NKDbgPrintfW|

  00018			 AREA	 |.pdata|, PDATA
|$T45877| DCD	|$LN11@SysCtrl_BC@2|
	DCD	0x40006404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@CHIENBOD@?$AAS?$AAy?$AAs?$AAC?$AAt?$AAr?$AAl?$AA_?$AAB?$AAC?$AAR?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "y", 0x0, "s", 0x0, "C", 0x0, "t", 0x0, "r", 0x0, "l"
	DCB	0x0, "_", 0x0, "B", 0x0, "C", 0x0, "R", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "H", 0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "O"
	DCB	0x0, "F", 0x0, "F", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@JCNJJEPJ@?$AAS?$AAy?$AAs?$AAC?$AAt?$AAr?$AAl?$AA_?$AAB?$AAC?$AAR?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "y", 0x0, "s", 0x0, "C", 0x0, "t", 0x0, "r", 0x0, "l"
	DCB	0x0, "_", 0x0, "B", 0x0, "C", 0x0, "R", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "H", 0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "O"
	DCB	0x0, "N", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00158			 AREA	 |.text|, CODE, ARM

  00158		 |SysCtrl_BCRSetHWPower| PROC

; 74   : {

  00158		 |$LN11@SysCtrl_BC@2|
  00158	e1a0c00d	 mov         r12, sp
  0015c	e92d0001	 stmdb       sp!, {r0}
  00160	e92d5000	 stmdb       sp!, {r12, lr}
  00164	e24dd004	 sub         sp, sp, #4
  00168		 |$M45874|

; 75   :     if(!g_pGPIORegisters || !g_pMFPBase)

  00168	e59f316c	 ldr         r3, [pc, #0x16C]
  0016c	e5933000	 ldr         r3, [r3]
  00170	e3530000	 cmp         r3, #0
  00174	0a000003	 beq         |$LN5@SysCtrl_BC@2|
  00178	e59f3160	 ldr         r3, [pc, #0x160]
  0017c	e5933000	 ldr         r3, [r3]
  00180	e3530000	 cmp         r3, #0
  00184	1a000000	 bne         |$LN6@SysCtrl_BC@2|
  00188		 |$LN5@SysCtrl_BC@2|

; 76   :     {
; 77   :         MapResources();

  00188	eb000000	 bl          MapResources
  0018c		 |$LN6@SysCtrl_BC@2|

; 78   :     }
; 79   : 
; 80   :     if(!g_pGPIORegisters || !g_pMFPBase)

  0018c	e59f3148	 ldr         r3, [pc, #0x148]
  00190	e5933000	 ldr         r3, [r3]
  00194	e3530000	 cmp         r3, #0
  00198	0a000003	 beq         |$LN3@SysCtrl_BC@2|
  0019c	e59f313c	 ldr         r3, [pc, #0x13C]
  001a0	e5933000	 ldr         r3, [r3]
  001a4	e3530000	 cmp         r3, #0
  001a8	1a000002	 bne         |$LN4@SysCtrl_BC@2|
  001ac		 |$LN3@SysCtrl_BC@2|

; 81   :     {
; 82   :         return FALSE;

  001ac	e3a03000	 mov         r3, #0
  001b0	e58d3000	 str         r3, [sp]
  001b4	ea000042	 b           |$LN7@SysCtrl_BC@2|
  001b8		 |$LN4@SysCtrl_BC@2|

; 83   :     }
; 84   :     
; 85   :     if(dwState)

  001b8	e59d300c	 ldr         r3, [sp, #0xC]
  001bc	e3530000	 cmp         r3, #0
  001c0	0a000032	 beq         |$LN2@SysCtrl_BC@2|

; 86   :     {	// BC_PWREN
; 87   :     	RETAILMSG(1, (TEXT("SysCtrl_BCRSetHWPower - ON\r\n")));

  001c4	e59f0118	 ldr         r0, [pc, #0x118]
  001c8	eb000000	 bl          NKDbgPrintfW

; 88   : 		MFP_SetActiveMode(PXA_COMPONENT_UART3_ID);

  001cc	e3a00015	 mov         r0, #0x15
  001d0	eb000000	 bl          MFP_SetActiveMode

; 89   : 		PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO93_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  001d4	e3a03002	 mov         r3, #2
  001d8	e3a02000	 mov         r2, #0
  001dc	e3a01c05	 mov         r1, #5, 24
  001e0	e3811014	 orr         r1, r1, #0x14
  001e4	e59f00f4	 ldr         r0, [pc, #0xF4]
  001e8	e5900000	 ldr         r0, [r0]
  001ec	eb000000	 bl          PXA_MFPSetAfDs

; 90   : 		PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_GPIO_DIRECTION_OUT);

  001f0	e3a02001	 mov         r2, #1
  001f4	e3a0105d	 mov         r1, #0x5D
  001f8	e59f30dc	 ldr         r3, [pc, #0xDC]
  001fc	e5930000	 ldr         r0, [r3]
  00200	eb000000	 bl          PXA_GPIOSetDirection

; 91   : 		PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_HI);

  00204	e3a02001	 mov         r2, #1
  00208	e3a0105d	 mov         r1, #0x5D
  0020c	e59f30c8	 ldr         r3, [pc, #0xC8]
  00210	e5930000	 ldr         r0, [r3]
  00214	eb000000	 bl          PXA_GPIOSetLevel

; 92   : 		PXA_MFPConfigureLpmOutputLevel(g_pMFPBase, PXA_MFP_PIN_GPIO93_OFFSET, PXA_MFP_LPMO_DRIVE_LOW);  

  00218	e3a02a02	 mov         r2, #2, 20
  0021c	e3a01c05	 mov         r1, #5, 24
  00220	e3811014	 orr         r1, r1, #0x14
  00224	e59f30b4	 ldr         r3, [pc, #0xB4]
  00228	e5930000	 ldr         r0, [r3]
  0022c	eb000000	 bl          PXA_MFPConfigureLpmOutputLevel

; 93   :        
; 94   : 		// BC_nTRIG
; 95   : 		PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO94_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00230	e3a03002	 mov         r3, #2
  00234	e3a02000	 mov         r2, #0
  00238	e3a01c05	 mov         r1, #5, 24
  0023c	e3811018	 orr         r1, r1, #0x18
  00240	e59f0098	 ldr         r0, [pc, #0x98]
  00244	e5900000	 ldr         r0, [r0]
  00248	eb000000	 bl          PXA_MFPSetAfDs

; 96   : 		PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_94, PXA_GPIO_DIRECTION_OUT);

  0024c	e3a02001	 mov         r2, #1
  00250	e3a0105e	 mov         r1, #0x5E
  00254	e59f3080	 ldr         r3, [pc, #0x80]
  00258	e5930000	 ldr         r0, [r3]
  0025c	eb000000	 bl          PXA_GPIOSetDirection

; 97   : 		PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_94,PXA_HI); 

  00260	e3a02001	 mov         r2, #1
  00264	e3a0105e	 mov         r1, #0x5E
  00268	e59f306c	 ldr         r3, [pc, #0x6C]
  0026c	e5930000	 ldr         r0, [r3]
  00270	eb000000	 bl          PXA_GPIOSetLevel

; 98   :         
; 99   : 		*(volatile BYTE *)DEVICE_POWER_FLAG_ADDR|=BCR_POWER_MASK;                         

  00274	e59f3058	 ldr         r3, [pc, #0x58]
  00278	e5d33000	 ldrb        r3, [r3]
  0027c	e3833001	 orr         r3, r3, #1
  00280	e59f204c	 ldr         r2, [pc, #0x4C]
  00284	e20330ff	 and         r3, r3, #0xFF
  00288	e5c23000	 strb        r3, [r2]

; 100  : 	}
; 101  :     else

  0028c	ea00000a	 b           |$LN1@SysCtrl_BC@2|
  00290		 |$LN2@SysCtrl_BC@2|

; 102  :     {
; 103  :     	RETAILMSG(1, (TEXT("SysCtrl_BCRSetHWPower - OFF\r\n")));

  00290	e59f0040	 ldr         r0, [pc, #0x40]
  00294	eb000000	 bl          NKDbgPrintfW

; 104  : 		DisableUart3_Pin();

  00298	eb000000	 bl          DisableUart3_Pin

; 105  : 		*(volatile BYTE *)DEVICE_POWER_FLAG_ADDR&=~BCR_POWER_MASK;

  0029c	e59f3030	 ldr         r3, [pc, #0x30]
  002a0	e5d33000	 ldrb        r3, [r3]
  002a4	e1a02003	 mov         r2, r3
  002a8	e3e03001	 mvn         r3, #1
  002ac	e0023003	 and         r3, r2, r3
  002b0	e59f201c	 ldr         r2, [pc, #0x1C]
  002b4	e20330ff	 and         r3, r3, #0xFF
  002b8	e5c23000	 strb        r3, [r2]
  002bc		 |$LN1@SysCtrl_BC@2|

; 106  :     }
; 107  :     
; 108  :     return TRUE;

  002bc	e3a03001	 mov         r3, #1
  002c0	e58d3000	 str         r3, [sp]
  002c4		 |$LN7@SysCtrl_BC@2|

; 109  : }

  002c4	e59d0000	 ldr         r0, [sp]
  002c8	e28dd004	 add         sp, sp, #4
  002cc	e89d6000	 ldmia       sp, {sp, lr}
  002d0	e12fff1e	 bx          lr
  002d4		 |$LN12@SysCtrl_BC@2|
  002d4		 |$LN13@SysCtrl_BC@2|
  002d4	a0008032	 DCD         0xa0008032
  002d8		 |$LN14@SysCtrl_BC@2|
  002d8	00000000	 DCD         |??_C@_1DM@CHIENBOD@?$AAS?$AAy?$AAs?$AAC?$AAt?$AAr?$AAl?$AA_?$AAB?$AAC?$AAR?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@|
  002dc		 |$LN15@SysCtrl_BC@2|
  002dc	00000000	 DCD         |g_pGPIORegisters|
  002e0		 |$LN16@SysCtrl_BC@2|
  002e0	00000000	 DCD         |g_pMFPBase|
  002e4		 |$LN17@SysCtrl_BC@2|
  002e4	00000000	 DCD         |??_C@_1DK@JCNJJEPJ@?$AAS?$AAy?$AAs?$AAC?$AAt?$AAr?$AAl?$AA_?$AAB?$AAC?$AAR?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@|
  002e8		 |$M45875|

			 ENDP  ; |SysCtrl_BCRSetHWPower|

	EXPORT	|??_C@_1DM@DGOPOIFJ@?$AA?6?$AA?$AN?$AA?$CL?$AAG?$AAe?$AAt?$AAT?$AAo?$AAu?$AAc?$AAh?$AAP?$AAa?$AAn?$AAe?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|GetTouchPanelState|

  00020			 AREA	 |.pdata|, PDATA
|$T45891| DCD	|$LN7@GetTouchPa|
	DCD	0x40001702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@DGOPOIFJ@?$AA?6?$AA?$AN?$AA?$CL?$AAG?$AAe?$AAt?$AAT?$AAo?$AAu?$AAc?$AAh?$AAP?$AAa?$AAn?$AAe?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xa
	DCB	0x0, 0xd, 0x0, "+", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "T"
	DCB	0x0, "o", 0x0, "u", 0x0, "c", 0x0, "h", 0x0, "P", 0x0, "a"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  002e8			 AREA	 |.text|, CODE, ARM

  002e8		 |GetTouchPanelState| PROC

; 113  : {

  002e8		 |$LN7@GetTouchPa|
  002e8	e52de004	 str         lr, [sp, #-4]!
  002ec	e24dd008	 sub         sp, sp, #8
  002f0		 |$M45888|

; 114  :     RETAILMSG(1, (TEXT("\n\r+GetTouchPanelState (%x) \r\n"), *(volatile BYTE *)TOUCH_PANEL_ENABLE_STATE_STORE_ADDR));

  002f0	e59f3044	 ldr         r3, [pc, #0x44]
  002f4	e5d31000	 ldrb        r1, [r3]
  002f8	e59f0040	 ldr         r0, [pc, #0x40]
  002fc	eb000000	 bl          NKDbgPrintfW

; 115  : 
; 116  :     return (*(volatile BYTE *)TOUCH_PANEL_ENABLE_STATE_STORE_ADDR) ? TRUE : FALSE;

  00300	e59f3034	 ldr         r3, [pc, #0x34]
  00304	e5d33000	 ldrb        r3, [r3]
  00308	e3530000	 cmp         r3, #0
  0030c	0a000002	 beq         |$LN3@GetTouchPa|
  00310	e3a03001	 mov         r3, #1
  00314	e58d3004	 str         r3, [sp, #4]
  00318	ea000001	 b           |$LN4@GetTouchPa|
  0031c		 |$LN3@GetTouchPa|
  0031c	e3a03000	 mov         r3, #0
  00320	e58d3004	 str         r3, [sp, #4]
  00324		 |$LN4@GetTouchPa|
  00324	e59d3004	 ldr         r3, [sp, #4]
  00328	e58d3000	 str         r3, [sp]

; 117  : 
; 118  : }

  0032c	e59d0000	 ldr         r0, [sp]
  00330	e28dd008	 add         sp, sp, #8
  00334	e49de004	 ldr         lr, [sp], #4
  00338	e12fff1e	 bx          lr
  0033c		 |$LN8@GetTouchPa|
  0033c		 |$LN9@GetTouchPa|
  0033c	a0008038	 DCD         0xa0008038
  00340		 |$LN10@GetTouchPa|
  00340	00000000	 DCD         |??_C@_1DM@DGOPOIFJ@?$AA?6?$AA?$AN?$AA?$CL?$AAG?$AAe?$AAt?$AAT?$AAo?$AAu?$AAc?$AAh?$AAP?$AAa?$AAn?$AAe?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00344		 |$M45889|

			 ENDP  ; |GetTouchPanelState|

	EXPORT	|??_C@_1DM@HLJBIAKL@?$AA?6?$AA?$AN?$AA?9?$AAG?$AAe?$AAt?$AAT?$AAo?$AAu?$AAc?$AAh?$AAP?$AAa?$AAn?$AAe?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SetTouchPanelState|

  00028			 AREA	 |.pdata|, PDATA
|$T45900| DCD	|$LN5@SetTouchPa|
	DCD	0x40001804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@HLJBIAKL@?$AA?6?$AA?$AN?$AA?9?$AAG?$AAe?$AAt?$AAT?$AAo?$AAu?$AAc?$AAh?$AAP?$AAa?$AAn?$AAe?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xa
	DCB	0x0, 0xd, 0x0, "-", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "T"
	DCB	0x0, "o", 0x0, "u", 0x0, "c", 0x0, "h", 0x0, "P", 0x0, "a"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00344			 AREA	 |.text|, CODE, ARM

  00344		 |SetTouchPanelState| PROC

; 122  : {

  00344		 |$LN5@SetTouchPa|
  00344	e1a0c00d	 mov         r12, sp
  00348	e92d0001	 stmdb       sp!, {r0}
  0034c	e92d5000	 stmdb       sp!, {r12, lr}
  00350	e24dd004	 sub         sp, sp, #4
  00354		 |$M45897|

; 123  :     RETAILMSG(1, (TEXT("\n\r+GetTouchPanelState (%x) \r\n"), dwEnableStatus));

  00354	e59d100c	 ldr         r1, [sp, #0xC]
  00358	e59f0040	 ldr         r0, [pc, #0x40]
  0035c	eb000000	 bl          NKDbgPrintfW

; 124  : 
; 125  :     *(volatile BYTE *)TOUCH_PANEL_ENABLE_STATE_STORE_ADDR = dwEnableStatus;

  00360	e59f2034	 ldr         r2, [pc, #0x34]
  00364	e59d300c	 ldr         r3, [sp, #0xC]
  00368	e20330ff	 and         r3, r3, #0xFF
  0036c	e5c23000	 strb        r3, [r2]

; 126  : 
; 127  :     RETAILMSG(1, (TEXT("\n\r-GetTouchPanelState (%x) \r\n"), *(volatile BYTE *)TOUCH_PANEL_ENABLE_STATE_STORE_ADDR));

  00370	e59f3024	 ldr         r3, [pc, #0x24]
  00374	e5d31000	 ldrb        r1, [r3]
  00378	e59f0018	 ldr         r0, [pc, #0x18]
  0037c	eb000000	 bl          NKDbgPrintfW

; 128  : 
; 129  :     return TRUE;

  00380	e3a03001	 mov         r3, #1
  00384	e58d3000	 str         r3, [sp]

; 130  : 
; 131  : }

  00388	e59d0000	 ldr         r0, [sp]
  0038c	e28dd004	 add         sp, sp, #4
  00390	e89d6000	 ldmia       sp, {sp, lr}
  00394	e12fff1e	 bx          lr
  00398		 |$LN6@SetTouchPa|
  00398		 |$LN7@SetTouchPa|
  00398	00000000	 DCD         |??_C@_1DM@HLJBIAKL@?$AA?6?$AA?$AN?$AA?9?$AAG?$AAe?$AAt?$AAT?$AAo?$AAu?$AAc?$AAh?$AAP?$AAa?$AAn?$AAe?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  0039c		 |$LN8@SetTouchPa|
  0039c	a0008038	 DCD         0xa0008038
  003a0		 |$LN9@SetTouchPa|
  003a0	00000000	 DCD         |??_C@_1DM@DGOPOIFJ@?$AA?6?$AA?$AN?$AA?$CL?$AAG?$AAe?$AAt?$AAT?$AAo?$AAu?$AAc?$AAh?$AAP?$AAa?$AAn?$AAe?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  003a4		 |$M45898|

			 ENDP  ; |SetTouchPanelState|

	EXPORT	|SetEvent|
	EXPORT	|??_C@_1BO@FBCCGPMB@?$AA?6?$AA?$AN?$AAP?$AAB?$AAT?$AA_?$AAR?$AAE?$AAS?$AAU?$AAM?$AAE?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@LEPGJPIG@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAU?$AAN?$AAK?$AAN?$AAO?$AAW?$AAN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@PAEKCGGL@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAE?$AAO?$AAR?$AA_?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@PPNCAIHI@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAP?$AAI?$AAP?$AAE?$AA_?$AAN?$AAO?$AAT?$AA_?$AAC?$AAO?$AAN?$AAN?$AAE?$AAC?$AAT?$AAE?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@BBPNFBDN@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAI?$AAN?$AAS?$AAU?$AAF?$AAF?$AAI?$AAC?$AAI?$AAE?$AAN?$AAT?$AA_?$AAB?$AAU?$AAF?$AAF?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@OHKFNKOM@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAR?$AAe?$AAa?$AAd?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@MLMJPKIH@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@LNIHIBBE@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAn?$AAo?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@EJBIAMLP@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@LMNMFOND@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAZ?$AA2?$AA1?$AA7?$AA0?$AA?2?$AAS?$AAR?$AAC?$AA?2?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@OJJMIIHJ@?$AAB?$AAk?$AAl?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|SYSTEM_POWER_Thread|
	IMPORT	|GetLastError|
	IMPORT	|ReadMsgQueue|
	IMPORT	|WaitForSingleObject|
	IMPORT	|RequestPowerNotifications|
	IMPORT	|CreateMsgQueue|
	IMPORT	|memset|
	IMPORT	|WaitForAPIReady|
	IMPORT	|CreateEventW|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00030			 AREA	 |.pdata|, PDATA
|$T45917| DCD	|$LN21@SYSTEM_POW|
	DCD	0xc000b204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@FBCCGPMB@?$AA?6?$AA?$AN?$AAP?$AAB?$AAT?$AA_?$AAR?$AAE?$AAS?$AAU?$AAM?$AAE?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xa
	DCB	0x0, 0xd, 0x0, "P", 0x0, "B", 0x0, "T", 0x0, "_", 0x0, "R"
	DCB	0x0, "E", 0x0, "S", 0x0, "U", 0x0, "M", 0x0, "E", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@LEPGJPIG@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAU?$AAN?$AAK?$AAN?$AAO?$AAW?$AAN?$AA?$AN?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "w", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R"
	DCB	0x0, "_", 0x0, "U", 0x0, "N", 0x0, "K", 0x0, "N", 0x0, "O"
	DCB	0x0, "W", 0x0, "N", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@PAEKCGGL@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAE?$AAO?$AAR?$AA_?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "w", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, "E", 0x0, "E", 0x0, "O", 0x0, "R", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "M", 0x0, "E", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@PPNCAIHI@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAP?$AAI?$AAP?$AAE?$AA_?$AAN?$AAO?$AAT?$AA_?$AAC?$AAO?$AAN?$AAN?$AAE?$AAC?$AAT?$AAE?$AAD@| DCB "p"
	DCB	0x0, "w", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R"
	DCB	0x0, "_", 0x0, "P", 0x0, "I", 0x0, "P", 0x0, "E", 0x0, "_"
	DCB	0x0, "N", 0x0, "O", 0x0, "T", 0x0, "_", 0x0, "C", 0x0, "O"
	DCB	0x0, "N", 0x0, "N", 0x0, "E", 0x0, "C", 0x0, "T", 0x0, "E"
	DCB	0x0, "D", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@BBPNFBDN@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAI?$AAN?$AAS?$AAU?$AAF?$AAF?$AAI?$AAC?$AAI?$AAE?$AAN?$AAT?$AA_?$AAB?$AAU?$AAF?$AAF?$AAE@| DCB "p"
	DCB	0x0, "w", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R"
	DCB	0x0, "_", 0x0, "I", 0x0, "N", 0x0, "S", 0x0, "U", 0x0, "F"
	DCB	0x0, "F", 0x0, "I", 0x0, "C", 0x0, "I", 0x0, "E", 0x0, "N"
	DCB	0x0, "T", 0x0, "_", 0x0, "B", 0x0, "U", 0x0, "F", 0x0, "F"
	DCB	0x0, "E", 0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@OHKFNKOM@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAR?$AAe?$AAa?$AAd?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "w", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "M"
	DCB	0x0, "s", 0x0, "g", 0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "u"
	DCB	0x0, "e", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@MLMJPKIH@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "Y", 0x0, "S", 0x0, "T", 0x0, "E", 0x0, "M", 0x0, "_"
	DCB	0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_"
	DCB	0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@LNIHIBBE@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAn?$AAo?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt@| DCB "p"
	DCB	0x0, "w", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "P", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, "i", 0x0, "f", 0x0, "i", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "e"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "s", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@EJBIAMLP@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "w", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, "C", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "M", 0x0, "s", 0x0, "g", 0x0, "Q", 0x0, "u"
	DCB	0x0, "e", 0x0, "u", 0x0, "e", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@LMNMFOND@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAZ?$AA2?$AA1?$AA7?$AA0?$AA?2?$AAS?$AAR?$AAC?$AA?2?$AAD@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "Z", 0x0, "2", 0x0, "1", 0x0, "7"
	DCB	0x0, "0", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C", 0x0, "\\"
	DCB	0x0, "D", 0x0, "R", 0x0, "I", 0x0, "V", 0x0, "E", 0x0, "R"
	DCB	0x0, "S", 0x0, "\\", 0x0, "s", 0x0, "y", 0x0, "s", 0x0, "c"
	DCB	0x0, "t", 0x0, "r", 0x0, "l", 0x0, "\\", 0x0, ".", 0x0, "\\"
	DCB	0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "."
	DCB	0x0, "c", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@OJJMIIHJ@?$AAB?$AAk?$AAl?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@| DCB "B"
	DCB	0x0, "k", 0x0, "l", 0x0, "A", 0x0, "c", 0x0, "t", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.xdata|, DATA
|$T45913| DCD	0xffffffcc
; Function compile flags: /Odtp

  003a4			 AREA	 |.text|, CODE, ARM

  003a4	00000000	 DCD         |__GSHandlerCheck|
  003a8	00000000	 DCD         |$T45913|

  003ac		 |SYSTEM_POWER_Thread| PROC

; 135  : {

  003ac		 |$LN21@SYSTEM_POW|
  003ac	e1a0c00d	 mov         r12, sp
  003b0	e92d0001	 stmdb       sp!, {r0}
  003b4	e92d5000	 stmdb       sp!, {r12, lr}
  003b8	e24ddfb9	 sub         sp, sp, #0xB9, 30
  003bc		 |$M45914|
  003bc	e59f32ac	 ldr         r3, [pc, #0x2AC]
  003c0	e5933000	 ldr         r3, [r3]
  003c4	e58d32bc	 str         r3, [sp, #0x2BC]

; 136  : 
; 137  : 
; 138  :     HANDLE hMsgQ;
; 139  :     MSGQUEUEOPTIONS Options;
; 140  : 
; 141  :     DWORD dwNumberOfBytesRead;
; 142  :     DWORD dwErr;
; 143  :     DWORD flags;
; 144  : 
; 145  :     BYTE buf[QUEUE_SIZE];
; 146  : 
; 147  :     HANDLE hbklNotifications =  CreateEvent(NULL, FALSE, FALSE, LCD_BACKLIGHT_ACTIVE_NOTIFY);

  003c8	e59f329c	 ldr         r3, [pc, #0x29C]
  003cc	e3a02000	 mov         r2, #0
  003d0	e3a01000	 mov         r1, #0
  003d4	e3a00000	 mov         r0, #0
  003d8	eb000000	 bl          CreateEventW
  003dc	e58d02cc	 str         r0, [sp, #0x2CC]
  003e0	e59d32cc	 ldr         r3, [sp, #0x2CC]
  003e4	e58d32b4	 str         r3, [sp, #0x2B4]

; 148  : 
; 149  :     /*while(!IsAPIReady(SH_SHELL))
; 150  :     {
; 151  :         Sleep(1000);
; 152  :     }*/
; 153  :     WaitForAPIReady(SH_SHELL, INFINITE);

  003e8	e3e01000	 mvn         r1, #0
  003ec	e3a00055	 mov         r0, #0x55
  003f0	eb000000	 bl          WaitForAPIReady

; 154  : 
; 155  :     memset(&Options, 0, sizeof(Options));

  003f4	e3a02014	 mov         r2, #0x14
  003f8	e3a01000	 mov         r1, #0
  003fc	e28d0e2a	 add         r0, sp, #0x2A, 28
  00400	eb000000	 bl          memset

; 156  : 
; 157  :     Options.dwSize = sizeof(MSGQUEUEOPTIONS);

  00404	e3a03014	 mov         r3, #0x14
  00408	e58d32a0	 str         r3, [sp, #0x2A0]

; 158  :     Options.dwFlags = 0;

  0040c	e3a03000	 mov         r3, #0
  00410	e58d32a4	 str         r3, [sp, #0x2A4]

; 159  :     Options.dwMaxMessages = QUEUE_ENTRIES;

  00414	e3a03003	 mov         r3, #3
  00418	e58d32a8	 str         r3, [sp, #0x2A8]

; 160  :     Options.cbMaxMessage = sizeof(POWER_BROADCAST) + MAX_NAMELEN;

  0041c	e3a030d8	 mov         r3, #0xD8
  00420	e58d32ac	 str         r3, [sp, #0x2AC]

; 161  :     Options.bReadAccess = TRUE;

  00424	e3a03001	 mov         r3, #1
  00428	e58d32b0	 str         r3, [sp, #0x2B0]

; 162  : 
; 163  : 
; 164  :     hMsgQ = CreateMsgQueue(NULL, &Options);

  0042c	e28d1e2a	 add         r1, sp, #0x2A, 28
  00430	e3a00000	 mov         r0, #0
  00434	eb000000	 bl          CreateMsgQueue
  00438	e58d02d0	 str         r0, [sp, #0x2D0]
  0043c	e59d32d0	 ldr         r3, [sp, #0x2D0]
  00440	e58d300c	 str         r3, [sp, #0xC]

; 165  : 
; 166  :     if(!hMsgQ)

  00444	e59d300c	 ldr         r3, [sp, #0xC]
  00448	e3530000	 cmp         r3, #0
  0044c	1a00000a	 bne         |$LN16@SYSTEM_POW|

; 167  :     {
; 168  :         ERRORMSG(1, (TEXT("pwrtest:CreateMsgQueue failed\r\n")));

  00450	e3a020a8	 mov         r2, #0xA8
  00454	e59f11f0	 ldr         r1, [pc, #0x1F0]
  00458	e59f01e8	 ldr         r0, [pc, #0x1E8]
  0045c	eb000000	 bl          NKDbgPrintfW
  00460	e59f0200	 ldr         r0, [pc, #0x200]
  00464	eb000000	 bl          NKDbgPrintfW

; 169  :         return 0;

  00468	e59d02bc	 ldr         r0, [sp, #0x2BC]
  0046c	eb000000	 bl          __security_check_cookie
  00470	e3a03000	 mov         r3, #0
  00474	e58d32c0	 str         r3, [sp, #0x2C0]
  00478	ea00006c	 b           |$LN17@SYSTEM_POW|
  0047c		 |$LN16@SYSTEM_POW|

; 170  :     }
; 171  : 
; 172  :     if(!RequestPowerNotifications(hMsgQ, POWER_NOTIFY_ALL))

  0047c	e3e01000	 mvn         r1, #0
  00480	e59d000c	 ldr         r0, [sp, #0xC]
  00484	eb000000	 bl          RequestPowerNotifications
  00488	e58d02d4	 str         r0, [sp, #0x2D4]
  0048c	e59d32d4	 ldr         r3, [sp, #0x2D4]
  00490	e3530000	 cmp         r3, #0
  00494	1a00000a	 bne         |$LN15@SYSTEM_POW|

; 173  :     {
; 174  :         ERRORMSG(1, (TEXT("pwrtest:Register Power notification events failed\r\n")));

  00498	e3a020ae	 mov         r2, #0xAE
  0049c	e59f11a8	 ldr         r1, [pc, #0x1A8]
  004a0	e59f01a0	 ldr         r0, [pc, #0x1A0]
  004a4	eb000000	 bl          NKDbgPrintfW
  004a8	e59f01b4	 ldr         r0, [pc, #0x1B4]
  004ac	eb000000	 bl          NKDbgPrintfW

; 175  :         return 0;

  004b0	e59d02bc	 ldr         r0, [sp, #0x2BC]
  004b4	eb000000	 bl          __security_check_cookie
  004b8	e3a03000	 mov         r3, #0
  004bc	e58d32c0	 str         r3, [sp, #0x2C0]
  004c0	ea00005a	 b           |$LN17@SYSTEM_POW|
  004c4		 |$LN15@SYSTEM_POW|

; 176  :     }
; 177  : 
; 178  : 	RETAILMSG(1, (TEXT("SYSTEM_POWER_Thread Start!!!!\r\n")));

  004c4	e59f0194	 ldr         r0, [pc, #0x194]
  004c8	eb000000	 bl          NKDbgPrintfW
  004cc		 |$LN14@SYSTEM_POW|

; 179  : 	
; 180  :     while(1)
; 181  :     {
; 182  :         WaitForSingleObject(hMsgQ, INFINITE);

  004cc	e3e01000	 mvn         r1, #0
  004d0	e59d000c	 ldr         r0, [sp, #0xC]
  004d4	eb000000	 bl          WaitForSingleObject

; 183  : 
; 184  :         if(!ReadMsgQueue(hMsgQ,
; 185  :                          &buf,
; 186  :                          QUEUE_SIZE,
; 187  :                          &dwNumberOfBytesRead,
; 188  :                          INFINITE,
; 189  :                          &flags))

  004d8	e28d3008	 add         r3, sp, #8
  004dc	e58d3004	 str         r3, [sp, #4]
  004e0	e3e03000	 mvn         r3, #0
  004e4	e58d3000	 str         r3, [sp]
  004e8	e28d3010	 add         r3, sp, #0x10
  004ec	e3a02fa2	 mov         r2, #0xA2, 30
  004f0	e28d1014	 add         r1, sp, #0x14
  004f4	e59d000c	 ldr         r0, [sp, #0xC]
  004f8	eb000000	 bl          ReadMsgQueue
  004fc	e58d02d8	 str         r0, [sp, #0x2D8]
  00500	e59d32d8	 ldr         r3, [sp, #0x2D8]
  00504	e3530000	 cmp         r3, #0
  00508	1a000033	 bne         |$LN12@SYSTEM_POW|

; 190  :         {
; 191  :             ERRORMSG(1, (TEXT("pwrtest:ReadMsgQueue failed\r\n")));

  0050c	e3a020bf	 mov         r2, #0xBF
  00510	e59f1134	 ldr         r1, [pc, #0x134]
  00514	e59f012c	 ldr         r0, [pc, #0x12C]
  00518	eb000000	 bl          NKDbgPrintfW
  0051c	e59f0138	 ldr         r0, [pc, #0x138]
  00520	eb000000	 bl          NKDbgPrintfW

; 192  :             dwErr = GetLastError();

  00524	eb000000	 bl          GetLastError
  00528	e58d02dc	 str         r0, [sp, #0x2DC]
  0052c	e59d32dc	 ldr         r3, [sp, #0x2DC]
  00530	e58d329c	 str         r3, [sp, #0x29C]

; 193  : 
; 194  :             switch(dwErr)

  00534	e59d329c	 ldr         r3, [sp, #0x29C]
  00538	e58d32e0	 str         r3, [sp, #0x2E0]
  0053c	e59d32e0	 ldr         r3, [sp, #0x2E0]
  00540	e353007a	 cmp         r3, #0x7A
  00544	0a000008	 beq         |$LN9@SYSTEM_POW|
  00548	e59d32e0	 ldr         r3, [sp, #0x2E0]
  0054c	e35300e9	 cmp         r3, #0xE9
  00550	0a00000c	 beq         |$LN8@SYSTEM_POW|
  00554	e59d22e0	 ldr         r2, [sp, #0x2E0]
  00558	e3a03c05	 mov         r3, #5, 24
  0055c	e38330b4	 orr         r3, r3, #0xB4
  00560	e1520003	 cmp         r2, r3
  00564	0a00000e	 beq         |$LN7@SYSTEM_POW|
  00568	ea000014	 b           |$LN6@SYSTEM_POW|
  0056c		 |$LN9@SYSTEM_POW|

; 195  :             {
; 196  :                 case ERROR_INSUFFICIENT_BUFFER:
; 197  :                     ERRORMSG(1, (TEXT("pwrtest:ERROR_INSUFFICIENT_BUFFER\r\n")));

  0056c	e3a020c5	 mov         r2, #0xC5
  00570	e59f10d4	 ldr         r1, [pc, #0xD4]
  00574	e59f00cc	 ldr         r0, [pc, #0xCC]
  00578	eb000000	 bl          NKDbgPrintfW
  0057c	e59f00d4	 ldr         r0, [pc, #0xD4]
  00580	eb000000	 bl          NKDbgPrintfW

; 198  :                     break;

  00584	ea000013	 b           |$LN10@SYSTEM_POW|
  00588		 |$LN8@SYSTEM_POW|

; 199  :                 case ERROR_PIPE_NOT_CONNECTED:
; 200  :                     ERRORMSG(1, (TEXT("pwrtest:ERROR_PIPE_NOT_CONNECTED\r\n")));

  00588	e3a020c8	 mov         r2, #0xC8
  0058c	e59f10b8	 ldr         r1, [pc, #0xB8]
  00590	e59f00b0	 ldr         r0, [pc, #0xB0]
  00594	eb000000	 bl          NKDbgPrintfW
  00598	e59f00b4	 ldr         r0, [pc, #0xB4]
  0059c	eb000000	 bl          NKDbgPrintfW

; 201  :                     break;

  005a0	ea00000c	 b           |$LN10@SYSTEM_POW|
  005a4		 |$LN7@SYSTEM_POW|

; 202  :                 case ERROR_TIMEOUT:
; 203  :                     ERRORMSG(1, (TEXT("pwrtest:EEOR_TIMEOUT\r\n")));

  005a4	e3a020cb	 mov         r2, #0xCB
  005a8	e59f109c	 ldr         r1, [pc, #0x9C]
  005ac	e59f0094	 ldr         r0, [pc, #0x94]
  005b0	eb000000	 bl          NKDbgPrintfW
  005b4	e59f0094	 ldr         r0, [pc, #0x94]
  005b8	eb000000	 bl          NKDbgPrintfW

; 204  :                     break;

  005bc	ea000005	 b           |$LN10@SYSTEM_POW|
  005c0		 |$LN6@SYSTEM_POW|

; 205  :                 default:
; 206  :                     ERRORMSG(1, (TEXT("pwrtest:ERROR_UNKNOWN\r\n")));

  005c0	e3a020ce	 mov         r2, #0xCE
  005c4	e59f1080	 ldr         r1, [pc, #0x80]
  005c8	e59f0078	 ldr         r0, [pc, #0x78]
  005cc	eb000000	 bl          NKDbgPrintfW
  005d0	e59f006c	 ldr         r0, [pc, #0x6C]
  005d4	eb000000	 bl          NKDbgPrintfW
  005d8		 |$LN10@SYSTEM_POW|

; 207  :             }
; 208  :         }
; 209  :         else if(dwNumberOfBytesRead >= sizeof(POWER_BROADCAST))

  005d8	ea00000f	 b           |$LN5@SYSTEM_POW|
  005dc		 |$LN12@SYSTEM_POW|
  005dc	e59d3010	 ldr         r3, [sp, #0x10]
  005e0	e3530010	 cmp         r3, #0x10
  005e4	3a00000c	 bcc         |$LN4@SYSTEM_POW|

; 210  :         {
; 211  :             PPOWER_BROADCAST pB = (PPOWER_BROADCAST)&buf;

  005e8	e28d3014	 add         r3, sp, #0x14
  005ec	e58d32b8	 str         r3, [sp, #0x2B8]

; 212  : 
; 213  : 
; 214  :             if(pB->Message == PBT_RESUME)

  005f0	e59d32b8	 ldr         r3, [sp, #0x2B8]
  005f4	e5933000	 ldr         r3, [r3]
  005f8	e3530002	 cmp         r3, #2
  005fc	1a000006	 bne         |$LN3@SYSTEM_POW|

; 215  :             {
; 216  :                 RETAILMSG(1, (TEXT("\n\rPBT_RESUME\r\n")));

  00600	e59f0038	 ldr         r0, [pc, #0x38]
  00604	eb000000	 bl          NKDbgPrintfW

; 217  : 
; 218  : 
; 219  : 
; 220  : 
; 221  :                 if(hbklNotifications)

  00608	e59d32b4	 ldr         r3, [sp, #0x2B4]
  0060c	e3530000	 cmp         r3, #0
  00610	0a000001	 beq         |$LN2@SYSTEM_POW|

; 222  :                 {
; 223  :                     SetEvent(hbklNotifications);

  00614	e59d02b4	 ldr         r0, [sp, #0x2B4]
  00618	eb000000	 bl          SetEvent
  0061c		 |$LN2@SYSTEM_POW|
  0061c		 |$LN3@SYSTEM_POW|
  0061c		 |$LN4@SYSTEM_POW|
  0061c		 |$LN5@SYSTEM_POW|

; 224  :                 }
; 225  : 
; 226  : 
; 227  :             }//end of PBT_RESUME
; 228  : 
; 229  : 
; 230  : 
; 231  :             if((pB->Message == PBT_TRANSITION) &&
; 232  :                (POWER_STATE(pB->Flags) == POWER_STATE_SUSPEND)
; 233  :               )
; 234  :             {
; 235  :                 /*
; 236  : 
; 237  :                 BOOL  BTPowerState;
; 238  : 
; 239  :                 if(SysGetBluetoothPower(&BTPowerState))
; 240  :                 {
; 241  :                  if(BTPowerState)
; 242  :                       SysSetBluetoothPower(FALSE);
; 243  : 
; 244  :                 }	*/
; 245  : 
; 246  :             }
; 247  : 
; 248  :         }
; 249  :     }

  0061c	eaffffaa	 b           |$LN14@SYSTEM_POW|

; 250  : 
; 251  :     return 0;

  00620	e59d02bc	 ldr         r0, [sp, #0x2BC]
  00624	eb000000	 bl          __security_check_cookie
  00628	e3a03000	 mov         r3, #0
  0062c	e58d32c0	 str         r3, [sp, #0x2C0]
  00630		 |$LN17@SYSTEM_POW|

; 252  : }

  00630	e59d02c0	 ldr         r0, [sp, #0x2C0]
  00634	e28ddfb9	 add         sp, sp, #0xB9, 30
  00638	e89d6000	 ldmia       sp, {sp, lr}
  0063c	e12fff1e	 bx          lr
  00640		 |$LN22@SYSTEM_POW|
  00640		 |$LN23@SYSTEM_POW|
  00640	00000000	 DCD         |??_C@_1BO@FBCCGPMB@?$AA?6?$AA?$AN?$AAP?$AAB?$AAT?$AA_?$AAR?$AAE?$AAS?$AAU?$AAM?$AAE?$AA?$AN?$AA?6?$AA?$AA@|
  00644		 |$LN24@SYSTEM_POW|
  00644	00000000	 DCD         |??_C@_1DA@LEPGJPIG@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAU?$AAN?$AAK?$AAN?$AAO?$AAW?$AAN?$AA?$AN?$AA?6?$AA?$AA@|
  00648		 |$LN25@SYSTEM_POW|
  00648	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  0064c		 |$LN26@SYSTEM_POW|
  0064c	00000000	 DCD         |??_C@_1HC@LMNMFOND@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAZ?$AA2?$AA1?$AA7?$AA0?$AA?2?$AAS?$AAR?$AAC?$AA?2?$AAD@|
  00650		 |$LN27@SYSTEM_POW|
  00650	00000000	 DCD         |??_C@_1CO@PAEKCGGL@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAE?$AAO?$AAR?$AA_?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  00654		 |$LN28@SYSTEM_POW|
  00654	00000000	 DCD         |??_C@_1EG@PPNCAIHI@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAP?$AAI?$AAP?$AAE?$AA_?$AAN?$AAO?$AAT?$AA_?$AAC?$AAO?$AAN?$AAN?$AAE?$AAC?$AAT?$AAE?$AAD@|
  00658		 |$LN29@SYSTEM_POW|
  00658	00000000	 DCD         |??_C@_1EI@BBPNFBDN@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAI?$AAN?$AAS?$AAU?$AAF?$AAF?$AAI?$AAC?$AAI?$AAE?$AAN?$AAT?$AA_?$AAB?$AAU?$AAF?$AAF?$AAE@|
  0065c		 |$LN30@SYSTEM_POW|
  0065c	00000000	 DCD         |??_C@_1DM@OHKFNKOM@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAR?$AAe?$AAa?$AAd?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00660		 |$LN31@SYSTEM_POW|
  00660	00000000	 DCD         |??_C@_1EA@MLMJPKIH@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  00664		 |$LN32@SYSTEM_POW|
  00664	00000000	 DCD         |??_C@_1GI@LNIHIBBE@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAn?$AAo?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt@|
  00668		 |$LN33@SYSTEM_POW|
  00668	00000000	 DCD         |??_C@_1EA@EJBIAMLP@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0066c		 |$LN34@SYSTEM_POW|
  0066c	00000000	 DCD         |??_C@_1BE@OJJMIIHJ@?$AAB?$AAk?$AAl?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@|
  00670		 |$LN35@SYSTEM_POW|
  00670	00000000	 DCD         |__security_cookie|
  00674		 |$M45915|

			 ENDP  ; |SYSTEM_POWER_Thread|

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T45937| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M45934|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M45935|

			 ENDP  ; |SetEvent|

	EXPORT	|DisableBTUart_Pin|

  00038			 AREA	 |.pdata|, PDATA
|$T45944| DCD	|$LN5@DisableBTU|
	DCD	0x40007d01
; Function compile flags: /Odtp
; File c:\wince600\platform\z2170\src\drivers\sysctrl\power.c

  00674			 AREA	 |.text|, CODE, ARM

  00674		 |DisableBTUart_Pin| PROC

; 255  : {

  00674		 |$LN5@DisableBTU|
  00674	e52de004	 str         lr, [sp, #-4]!
  00678		 |$M45941|

; 256  : 	//GPIO112 BT_RXD
; 257  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO112_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00678	e3a03002	 mov         r3, #2
  0067c	e3a02000	 mov         r2, #0
  00680	e3a01c06	 mov         r1, #6, 24
  00684	e3811034	 orr         r1, r1, #0x34
  00688	e59f01d4	 ldr         r0, [pc, #0x1D4]
  0068c	e5900000	 ldr         r0, [r0]
  00690	eb000000	 bl          PXA_MFPSetAfDs

; 258  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_112, PXA_GPIO_DIRECTION_OUT);

  00694	e3a02001	 mov         r2, #1
  00698	e3a01070	 mov         r1, #0x70
  0069c	e59f31bc	 ldr         r3, [pc, #0x1BC]
  006a0	e5930000	 ldr         r0, [r3]
  006a4	eb000000	 bl          PXA_GPIOSetDirection

; 259  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_112,PXA_LO);

  006a8	e3a02000	 mov         r2, #0
  006ac	e3a01070	 mov         r1, #0x70
  006b0	e59f31a8	 ldr         r3, [pc, #0x1A8]
  006b4	e5930000	 ldr         r0, [r3]
  006b8	eb000000	 bl          PXA_GPIOSetLevel

; 260  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_112, PXA_GPIO_DIRECTION_IN);

  006bc	e3a02000	 mov         r2, #0
  006c0	e3a01070	 mov         r1, #0x70
  006c4	e59f3194	 ldr         r3, [pc, #0x194]
  006c8	e5930000	 ldr         r0, [r3]
  006cc	eb000000	 bl          PXA_GPIOSetDirection

; 261  : 
; 262  : 	//GPIO113 BT_TXD
; 263  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO113_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  006d0	e3a03002	 mov         r3, #2
  006d4	e3a02000	 mov         r2, #0
  006d8	e3a01c06	 mov         r1, #6, 24
  006dc	e3811038	 orr         r1, r1, #0x38
  006e0	e59f017c	 ldr         r0, [pc, #0x17C]
  006e4	e5900000	 ldr         r0, [r0]
  006e8	eb000000	 bl          PXA_MFPSetAfDs

; 264  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_113, PXA_GPIO_DIRECTION_OUT);

  006ec	e3a02001	 mov         r2, #1
  006f0	e3a01071	 mov         r1, #0x71
  006f4	e59f3164	 ldr         r3, [pc, #0x164]
  006f8	e5930000	 ldr         r0, [r3]
  006fc	eb000000	 bl          PXA_GPIOSetDirection

; 265  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_113,PXA_LO);

  00700	e3a02000	 mov         r2, #0
  00704	e3a01071	 mov         r1, #0x71
  00708	e59f3150	 ldr         r3, [pc, #0x150]
  0070c	e5930000	 ldr         r0, [r3]
  00710	eb000000	 bl          PXA_GPIOSetLevel

; 266  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_113, PXA_GPIO_DIRECTION_IN);

  00714	e3a02000	 mov         r2, #0
  00718	e3a01071	 mov         r1, #0x71
  0071c	e59f313c	 ldr         r3, [pc, #0x13C]
  00720	e5930000	 ldr         r0, [r3]
  00724	eb000000	 bl          PXA_GPIOSetDirection

; 267  : 	
; 268  : 	//GPIO114 BT_CTS
; 269  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO114_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00728	e3a03002	 mov         r3, #2
  0072c	e3a02000	 mov         r2, #0
  00730	e3a01c06	 mov         r1, #6, 24
  00734	e381103c	 orr         r1, r1, #0x3C
  00738	e59f0124	 ldr         r0, [pc, #0x124]
  0073c	e5900000	 ldr         r0, [r0]
  00740	eb000000	 bl          PXA_MFPSetAfDs

; 270  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_114, PXA_GPIO_DIRECTION_OUT);

  00744	e3a02001	 mov         r2, #1
  00748	e3a01072	 mov         r1, #0x72
  0074c	e59f310c	 ldr         r3, [pc, #0x10C]
  00750	e5930000	 ldr         r0, [r3]
  00754	eb000000	 bl          PXA_GPIOSetDirection

; 271  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_114,PXA_LO);

  00758	e3a02000	 mov         r2, #0
  0075c	e3a01072	 mov         r1, #0x72
  00760	e59f30f8	 ldr         r3, [pc, #0xF8]
  00764	e5930000	 ldr         r0, [r3]
  00768	eb000000	 bl          PXA_GPIOSetLevel

; 272  : 	//PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_114, PXA_GPIO_DIRECTION_IN);
; 273  :   
; 274  : 	//GPIO111 BT_RTS
; 275  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO111_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  0076c	e3a03002	 mov         r3, #2
  00770	e3a02000	 mov         r2, #0
  00774	e3a01e63	 mov         r1, #0x63, 28
  00778	e59f00e4	 ldr         r0, [pc, #0xE4]
  0077c	e5900000	 ldr         r0, [r0]
  00780	eb000000	 bl          PXA_MFPSetAfDs

; 276  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_111, PXA_GPIO_DIRECTION_OUT);

  00784	e3a02001	 mov         r2, #1
  00788	e3a0106f	 mov         r1, #0x6F
  0078c	e59f30cc	 ldr         r3, [pc, #0xCC]
  00790	e5930000	 ldr         r0, [r3]
  00794	eb000000	 bl          PXA_GPIOSetDirection

; 277  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_111,PXA_LO);

  00798	e3a02000	 mov         r2, #0
  0079c	e3a0106f	 mov         r1, #0x6F
  007a0	e59f30b8	 ldr         r3, [pc, #0xB8]
  007a4	e5930000	 ldr         r0, [r3]
  007a8	eb000000	 bl          PXA_GPIOSetLevel

; 278  : 	//PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_111, PXA_GPIO_DIRECTION_IN);
; 279  : 
; 280  : 	//GPIO91 BT_nRST
; 281  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO91_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  007ac	e3a03002	 mov         r3, #2
  007b0	e3a02000	 mov         r2, #0
  007b4	e3a01c05	 mov         r1, #5, 24
  007b8	e381100c	 orr         r1, r1, #0xC
  007bc	e59f00a0	 ldr         r0, [pc, #0xA0]
  007c0	e5900000	 ldr         r0, [r0]
  007c4	eb000000	 bl          PXA_MFPSetAfDs

; 282  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_91, PXA_GPIO_DIRECTION_OUT);

  007c8	e3a02001	 mov         r2, #1
  007cc	e3a0105b	 mov         r1, #0x5B
  007d0	e59f3088	 ldr         r3, [pc, #0x88]
  007d4	e5930000	 ldr         r0, [r3]
  007d8	eb000000	 bl          PXA_GPIOSetDirection

; 283  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_91,PXA_LO);

  007dc	e3a02000	 mov         r2, #0
  007e0	e3a0105b	 mov         r1, #0x5B
  007e4	e59f3074	 ldr         r3, [pc, #0x74]
  007e8	e5930000	 ldr         r0, [r3]
  007ec	eb000000	 bl          PXA_GPIOSetLevel

; 284  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_91, PXA_GPIO_DIRECTION_IN);    

  007f0	e3a02000	 mov         r2, #0
  007f4	e3a0105b	 mov         r1, #0x5B
  007f8	e59f3060	 ldr         r3, [pc, #0x60]
  007fc	e5930000	 ldr         r0, [r3]
  00800	eb000000	 bl          PXA_GPIOSetDirection

; 285  :                          
; 286  : 	//GPIO92 BT_PWREN
; 287  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO92_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00804	e3a03002	 mov         r3, #2
  00808	e3a02000	 mov         r2, #0
  0080c	e3a01e51	 mov         r1, #0x51, 28
  00810	e59f004c	 ldr         r0, [pc, #0x4C]
  00814	e5900000	 ldr         r0, [r0]
  00818	eb000000	 bl          PXA_MFPSetAfDs

; 288  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_92, PXA_GPIO_DIRECTION_OUT);

  0081c	e3a02001	 mov         r2, #1
  00820	e3a0105c	 mov         r1, #0x5C
  00824	e59f3034	 ldr         r3, [pc, #0x34]
  00828	e5930000	 ldr         r0, [r3]
  0082c	eb000000	 bl          PXA_GPIOSetDirection

; 289  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_92,PXA_LO); 

  00830	e3a02000	 mov         r2, #0
  00834	e3a0105c	 mov         r1, #0x5C
  00838	e59f3020	 ldr         r3, [pc, #0x20]
  0083c	e5930000	 ldr         r0, [r3]
  00840	eb000000	 bl          PXA_GPIOSetLevel

; 290  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_92, PXA_GPIO_DIRECTION_IN);      

  00844	e3a02000	 mov         r2, #0
  00848	e3a0105c	 mov         r1, #0x5C
  0084c	e59f300c	 ldr         r3, [pc, #0xC]
  00850	e5930000	 ldr         r0, [r3]
  00854	eb000000	 bl          PXA_GPIOSetDirection

; 291  : 
; 292  : }

  00858	e49de004	 ldr         lr, [sp], #4
  0085c	e12fff1e	 bx          lr
  00860		 |$LN6@DisableBTU|
  00860		 |$LN7@DisableBTU|
  00860	00000000	 DCD         |g_pGPIORegisters|
  00864		 |$LN8@DisableBTU|
  00864	00000000	 DCD         |g_pMFPBase|
  00868		 |$M45942|

			 ENDP  ; |DisableBTUart_Pin|


  00040			 AREA	 |.pdata|, PDATA
|$T45952| DCD	|$LN5@DisableUar|
	DCD	0x40008801
; Function compile flags: /Odtp

  00868			 AREA	 |.text|, CODE, ARM

  00868		 |DisableUart3_Pin| PROC

; 295  : {

  00868		 |$LN5@DisableUar|
  00868	e52de004	 str         lr, [sp, #-4]!
  0086c		 |$M45949|

; 296  : 	//GPIO107 ENF_CTS
; 297  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO107_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  0086c	e3a03002	 mov         r3, #2
  00870	e3a02000	 mov         r2, #0
  00874	e3a01e62	 mov         r1, #0x62, 28
  00878	e59f0204	 ldr         r0, [pc, #0x204]
  0087c	e5900000	 ldr         r0, [r0]
  00880	eb000000	 bl          PXA_MFPSetAfDs

; 298  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_107, PXA_GPIO_DIRECTION_OUT);

  00884	e3a02001	 mov         r2, #1
  00888	e3a0106b	 mov         r1, #0x6B
  0088c	e59f31ec	 ldr         r3, [pc, #0x1EC]
  00890	e5930000	 ldr         r0, [r3]
  00894	eb000000	 bl          PXA_GPIOSetDirection

; 299  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_107,PXA_LO);

  00898	e3a02000	 mov         r2, #0
  0089c	e3a0106b	 mov         r1, #0x6B
  008a0	e59f31d8	 ldr         r3, [pc, #0x1D8]
  008a4	e5930000	 ldr         r0, [r3]
  008a8	eb000000	 bl          PXA_GPIOSetLevel

; 300  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_107, PXA_GPIO_DIRECTION_IN);

  008ac	e3a02000	 mov         r2, #0
  008b0	e3a0106b	 mov         r1, #0x6B
  008b4	e59f31c4	 ldr         r3, [pc, #0x1C4]
  008b8	e5930000	 ldr         r0, [r3]
  008bc	eb000000	 bl          PXA_GPIOSetDirection

; 301  : 
; 302  : 	//GPIO108 ENG_RTS
; 303  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO108_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  008c0	e3a03002	 mov         r3, #2
  008c4	e3a02000	 mov         r2, #0
  008c8	e3a01c06	 mov         r1, #6, 24
  008cc	e3811024	 orr         r1, r1, #0x24
  008d0	e59f01ac	 ldr         r0, [pc, #0x1AC]
  008d4	e5900000	 ldr         r0, [r0]
  008d8	eb000000	 bl          PXA_MFPSetAfDs

; 304  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_108, PXA_GPIO_DIRECTION_OUT);

  008dc	e3a02001	 mov         r2, #1
  008e0	e3a0106c	 mov         r1, #0x6C
  008e4	e59f3194	 ldr         r3, [pc, #0x194]
  008e8	e5930000	 ldr         r0, [r3]
  008ec	eb000000	 bl          PXA_GPIOSetDirection

; 305  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_108,PXA_LO);

  008f0	e3a02000	 mov         r2, #0
  008f4	e3a0106c	 mov         r1, #0x6C
  008f8	e59f3180	 ldr         r3, [pc, #0x180]
  008fc	e5930000	 ldr         r0, [r3]
  00900	eb000000	 bl          PXA_GPIOSetLevel

; 306  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_108, PXA_GPIO_DIRECTION_IN);

  00904	e3a02000	 mov         r2, #0
  00908	e3a0106c	 mov         r1, #0x6C
  0090c	e59f316c	 ldr         r3, [pc, #0x16C]
  00910	e5930000	 ldr         r0, [r3]
  00914	eb000000	 bl          PXA_GPIOSetDirection

; 307  :      
; 308  : 	//GPIO109 ENG_TXD
; 309  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO109_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00918	e3a03002	 mov         r3, #2
  0091c	e3a02000	 mov         r2, #0
  00920	e3a01c06	 mov         r1, #6, 24
  00924	e3811028	 orr         r1, r1, #0x28
  00928	e59f0154	 ldr         r0, [pc, #0x154]
  0092c	e5900000	 ldr         r0, [r0]
  00930	eb000000	 bl          PXA_MFPSetAfDs

; 310  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_109, PXA_GPIO_DIRECTION_OUT);

  00934	e3a02001	 mov         r2, #1
  00938	e3a0106d	 mov         r1, #0x6D
  0093c	e59f313c	 ldr         r3, [pc, #0x13C]
  00940	e5930000	 ldr         r0, [r3]
  00944	eb000000	 bl          PXA_GPIOSetDirection

; 311  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_109,PXA_LO);

  00948	e3a02000	 mov         r2, #0
  0094c	e3a0106d	 mov         r1, #0x6D
  00950	e59f3128	 ldr         r3, [pc, #0x128]
  00954	e5930000	 ldr         r0, [r3]
  00958	eb000000	 bl          PXA_GPIOSetLevel

; 312  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_109, PXA_GPIO_DIRECTION_IN);

  0095c	e3a02000	 mov         r2, #0
  00960	e3a0106d	 mov         r1, #0x6D
  00964	e59f3114	 ldr         r3, [pc, #0x114]
  00968	e5930000	 ldr         r0, [r3]
  0096c	eb000000	 bl          PXA_GPIOSetDirection

; 313  : 
; 314  : 	//GPIO110 ENG_RXD
; 315  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO110_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00970	e3a03002	 mov         r3, #2
  00974	e3a02000	 mov         r2, #0
  00978	e3a01c06	 mov         r1, #6, 24
  0097c	e381102c	 orr         r1, r1, #0x2C
  00980	e59f00fc	 ldr         r0, [pc, #0xFC]
  00984	e5900000	 ldr         r0, [r0]
  00988	eb000000	 bl          PXA_MFPSetAfDs

; 316  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_110, PXA_GPIO_DIRECTION_OUT);

  0098c	e3a02001	 mov         r2, #1
  00990	e3a0106e	 mov         r1, #0x6E
  00994	e59f30e4	 ldr         r3, [pc, #0xE4]
  00998	e5930000	 ldr         r0, [r3]
  0099c	eb000000	 bl          PXA_GPIOSetDirection

; 317  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_110,PXA_LO);               

  009a0	e3a02000	 mov         r2, #0
  009a4	e3a0106e	 mov         r1, #0x6E
  009a8	e59f30d0	 ldr         r3, [pc, #0xD0]
  009ac	e5930000	 ldr         r0, [r3]
  009b0	eb000000	 bl          PXA_GPIOSetLevel

; 318  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_110, PXA_GPIO_DIRECTION_IN);  

  009b4	e3a02000	 mov         r2, #0
  009b8	e3a0106e	 mov         r1, #0x6E
  009bc	e59f30bc	 ldr         r3, [pc, #0xBC]
  009c0	e5930000	 ldr         r0, [r3]
  009c4	eb000000	 bl          PXA_GPIOSetDirection

; 319  : 
; 320  : 	//GPIO93 BC_PWREN
; 321  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO93_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  009c8	e3a03002	 mov         r3, #2
  009cc	e3a02000	 mov         r2, #0
  009d0	e3a01c05	 mov         r1, #5, 24
  009d4	e3811014	 orr         r1, r1, #0x14
  009d8	e59f00a4	 ldr         r0, [pc, #0xA4]
  009dc	e5900000	 ldr         r0, [r0]
  009e0	eb000000	 bl          PXA_MFPSetAfDs

; 322  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_GPIO_DIRECTION_OUT);

  009e4	e3a02001	 mov         r2, #1
  009e8	e3a0105d	 mov         r1, #0x5D
  009ec	e59f308c	 ldr         r3, [pc, #0x8C]
  009f0	e5930000	 ldr         r0, [r3]
  009f4	eb000000	 bl          PXA_GPIOSetDirection

; 323  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_93,PXA_LO);

  009f8	e3a02000	 mov         r2, #0
  009fc	e3a0105d	 mov         r1, #0x5D
  00a00	e59f3078	 ldr         r3, [pc, #0x78]
  00a04	e5930000	 ldr         r0, [r3]
  00a08	eb000000	 bl          PXA_GPIOSetLevel

; 324  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_GPIO_DIRECTION_IN);

  00a0c	e3a02000	 mov         r2, #0
  00a10	e3a0105d	 mov         r1, #0x5D
  00a14	e59f3064	 ldr         r3, [pc, #0x64]
  00a18	e5930000	 ldr         r0, [r3]
  00a1c	eb000000	 bl          PXA_GPIOSetDirection

; 325  :                          
; 326  : 	//GPIO94 BC_nTRIG
; 327  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO94_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00a20	e3a03002	 mov         r3, #2
  00a24	e3a02000	 mov         r2, #0
  00a28	e3a01c05	 mov         r1, #5, 24
  00a2c	e3811018	 orr         r1, r1, #0x18
  00a30	e59f004c	 ldr         r0, [pc, #0x4C]
  00a34	e5900000	 ldr         r0, [r0]
  00a38	eb000000	 bl          PXA_MFPSetAfDs

; 328  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_94, PXA_GPIO_DIRECTION_OUT);

  00a3c	e3a02001	 mov         r2, #1
  00a40	e3a0105e	 mov         r1, #0x5E
  00a44	e59f3034	 ldr         r3, [pc, #0x34]
  00a48	e5930000	 ldr         r0, [r3]
  00a4c	eb000000	 bl          PXA_GPIOSetDirection

; 329  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_94,PXA_LO);                       

  00a50	e3a02000	 mov         r2, #0
  00a54	e3a0105e	 mov         r1, #0x5E
  00a58	e59f3020	 ldr         r3, [pc, #0x20]
  00a5c	e5930000	 ldr         r0, [r3]
  00a60	eb000000	 bl          PXA_GPIOSetLevel

; 330  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_94, PXA_GPIO_DIRECTION_IN);

  00a64	e3a02000	 mov         r2, #0
  00a68	e3a0105e	 mov         r1, #0x5E
  00a6c	e59f300c	 ldr         r3, [pc, #0xC]
  00a70	e5930000	 ldr         r0, [r3]
  00a74	eb000000	 bl          PXA_GPIOSetDirection

; 331  : }

  00a78	e49de004	 ldr         lr, [sp], #4
  00a7c	e12fff1e	 bx          lr
  00a80		 |$LN6@DisableUar|
  00a80		 |$LN7@DisableUar|
  00a80	00000000	 DCD         |g_pGPIORegisters|
  00a84		 |$LN8@DisableUar|
  00a84	00000000	 DCD         |g_pMFPBase|
  00a88		 |$M45950|

			 ENDP  ; |DisableUart3_Pin|

	EXPORT	|??_C@_1BG@PEJKNFBI@?$AAb?$AAt?$AAd?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@CDEKAJLJ@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?2?$AAB?$AAl?$AAu?$AAe?$AAt?$AAo?$AAo?$AAt?$AAh?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@OFJBNFMH@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?2?$AAB?$AAl?$AAu?$AAe?$AAt?$AAo?$AAo?$AAt?$AAh?$AA?2?$AAD?$AAr?$AAi@| [ DATA ] ; `string'
	EXPORT	|BTDrvLoad|
	IMPORT	|RegCloseKey|
	IMPORT	|RegSetValueExW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|ActivateDevice|

  00048			 AREA	 |.pdata|, PDATA
|$T45964| DCD	|$LN7@BTDrvLoad|
	DCD	0x40002f02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@PEJKNFBI@?$AAb?$AAt?$AAd?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@| DCB "b"
	DCB	0x0, "t", 0x0, "d", 0x0, "_", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@CDEKAJLJ@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?2?$AAB?$AAl?$AAu?$AAe?$AAt?$AAo?$AAo?$AAt?$AAh?$AA?$AA@| DCB "S"
	DCB	0x0, "o", 0x0, "f", 0x0, "t", 0x0, "w", 0x0, "a", 0x0, "r"
	DCB	0x0, "e", 0x0, "\\", 0x0, "M", 0x0, "i", 0x0, "c", 0x0, "r"
	DCB	0x0, "o", 0x0, "s", 0x0, "o", 0x0, "f", 0x0, "t", 0x0, "\\"
	DCB	0x0, "B", 0x0, "l", 0x0, "u", 0x0, "e", 0x0, "t", 0x0, "o"
	DCB	0x0, "o", 0x0, "t", 0x0, "h", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@OFJBNFMH@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?2?$AAB?$AAl?$AAu?$AAe?$AAt?$AAo?$AAo?$AAt?$AAh?$AA?2?$AAD?$AAr?$AAi@| DCB "S"
	DCB	0x0, "o", 0x0, "f", 0x0, "t", 0x0, "w", 0x0, "a", 0x0, "r"
	DCB	0x0, "e", 0x0, "\\", 0x0, "M", 0x0, "i", 0x0, "c", 0x0, "r"
	DCB	0x0, "o", 0x0, "s", 0x0, "o", 0x0, "f", 0x0, "t", 0x0, "\\"
	DCB	0x0, "B", 0x0, "l", 0x0, "u", 0x0, "e", 0x0, "t", 0x0, "o"
	DCB	0x0, "o", 0x0, "t", 0x0, "h", 0x0, "\\", 0x0, "D", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00a88			 AREA	 |.text|, CODE, ARM

  00a88		 |BTDrvLoad| PROC

; 334  : {

  00a88		 |$LN7@BTDrvLoad|
  00a88	e52de004	 str         lr, [sp, #-4]!
  00a8c	e24dd02c	 sub         sp, sp, #0x2C
  00a90		 |$M45961|

; 335  :   BOOL status = FALSE;

  00a90	e3a03000	 mov         r3, #0
  00a94	e58d3010	 str         r3, [sp, #0x10]

; 336  :   HANDLE hDevice ;
; 337  :   HKEY hk;
; 338  :   
; 339  :   hDevice = ActivateDevice (L"Software\\Microsoft\\Bluetooth\\Driver", 0);

  00a98	e3a01000	 mov         r1, #0
  00a9c	e59f009c	 ldr         r0, [pc, #0x9C]
  00aa0	eb000000	 bl          ActivateDevice
  00aa4	e58d0024	 str         r0, [sp, #0x24]
  00aa8	e59d3024	 ldr         r3, [sp, #0x24]
  00aac	e58d3008	 str         r3, [sp, #8]

; 340  : 
; 341  : 		if (hDevice) {

  00ab0	e59d3008	 ldr         r3, [sp, #8]
  00ab4	e3530000	 cmp         r3, #0
  00ab8	0a000018	 beq         |$LN2@BTDrvLoad|

; 342  : 			
; 343  : 			if (ERROR_SUCCESS == RegOpenKeyEx (HKEY_LOCAL_MACHINE, L"Software\\Microsoft\\Bluetooth", 0, KEY_READ, &hk)) {

  00abc	e28d300c	 add         r3, sp, #0xC
  00ac0	e58d3000	 str         r3, [sp]
  00ac4	e3a03802	 mov         r3, #2, 16
  00ac8	e3833019	 orr         r3, r3, #0x19
  00acc	e3a02000	 mov         r2, #0
  00ad0	e59f1064	 ldr         r1, [pc, #0x64]
  00ad4	e3a0010a	 mov         r0, #0xA, 2
  00ad8	eb000000	 bl          RegOpenKeyExW
  00adc	e58d0028	 str         r0, [sp, #0x28]
  00ae0	e59d3028	 ldr         r3, [sp, #0x28]
  00ae4	e3530000	 cmp         r3, #0
  00ae8	1a00000c	 bne         |$LN1@BTDrvLoad|

; 344  : 				RegSetValueEx (hk, L"btd_handle", 0, REG_DWORD, (LPBYTE)&hDevice, sizeof(hDevice));

  00aec	e3a03004	 mov         r3, #4
  00af0	e58d3004	 str         r3, [sp, #4]
  00af4	e28d3008	 add         r3, sp, #8
  00af8	e58d3000	 str         r3, [sp]
  00afc	e3a03004	 mov         r3, #4
  00b00	e3a02000	 mov         r2, #0
  00b04	e59f102c	 ldr         r1, [pc, #0x2C]
  00b08	e59d000c	 ldr         r0, [sp, #0xC]
  00b0c	eb000000	 bl          RegSetValueExW

; 345  : 				RegCloseKey (hk);

  00b10	e59d000c	 ldr         r0, [sp, #0xC]
  00b14	eb000000	 bl          RegCloseKey

; 346  : 				status= TRUE;

  00b18	e3a03001	 mov         r3, #1
  00b1c	e58d3010	 str         r3, [sp, #0x10]
  00b20		 |$LN1@BTDrvLoad|
  00b20		 |$LN2@BTDrvLoad|

; 347  : 			}
; 348  : 		}  
; 349  :   return status;  

  00b20	e59d3010	 ldr         r3, [sp, #0x10]
  00b24	e58d3020	 str         r3, [sp, #0x20]

; 350  : }

  00b28	e59d0020	 ldr         r0, [sp, #0x20]
  00b2c	e28dd02c	 add         sp, sp, #0x2C
  00b30	e49de004	 ldr         lr, [sp], #4
  00b34	e12fff1e	 bx          lr
  00b38		 |$LN8@BTDrvLoad|
  00b38		 |$LN9@BTDrvLoad|
  00b38	00000000	 DCD         |??_C@_1BG@PEJKNFBI@?$AAb?$AAt?$AAd?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@|
  00b3c		 |$LN10@BTDrvLoad|
  00b3c	00000000	 DCD         |??_C@_1DK@CDEKAJLJ@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?2?$AAB?$AAl?$AAu?$AAe?$AAt?$AAo?$AAo?$AAt?$AAh?$AA?$AA@|
  00b40		 |$LN11@BTDrvLoad|
  00b40	00000000	 DCD         |??_C@_1EI@OFJBNFMH@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?2?$AAB?$AAl?$AAu?$AAe?$AAt?$AAo?$AAo?$AAt?$AAh?$AA?2?$AAD?$AAr?$AAi@|
  00b44		 |$M45962|

			 ENDP  ; |BTDrvLoad|

	EXPORT	|BTDrvUnload|
	IMPORT	|RegDeleteValueW|
	IMPORT	|DeactivateDevice|
	IMPORT	|RegQueryValueExW|

  00050			 AREA	 |.pdata|, PDATA
|$T45977| DCD	|$LN7@BTDrvUnloa|
	DCD	0x40003b02
; Function compile flags: /Odtp

  00b44			 AREA	 |.text|, CODE, ARM

  00b44		 |BTDrvUnload| PROC

; 353  : {

  00b44		 |$LN7@BTDrvUnloa|
  00b44	e52de004	 str         lr, [sp, #-4]!
  00b48	e24dd034	 sub         sp, sp, #0x34
  00b4c		 |$M45974|

; 354  : 		HKEY hk;
; 355  : 		BOOL status=FALSE;

  00b4c	e3a03000	 mov         r3, #0
  00b50	e58d3018	 str         r3, [sp, #0x18]

; 356  : 		HANDLE hDevice = NULL;

  00b54	e3a03000	 mov         r3, #0
  00b58	e58d3008	 str         r3, [sp, #8]

; 357  : 		DWORD dwSize,dwType;
; 358  : 		
; 359  : 		if (ERROR_SUCCESS == RegOpenKeyEx (HKEY_LOCAL_MACHINE, L"Software\\Microsoft\\Bluetooth", 0, KEY_READ, &hk)) {

  00b5c	e28d3014	 add         r3, sp, #0x14
  00b60	e58d3000	 str         r3, [sp]
  00b64	e3a03802	 mov         r3, #2, 16
  00b68	e3833019	 orr         r3, r3, #0x19
  00b6c	e3a02000	 mov         r2, #0
  00b70	e59f10b4	 ldr         r1, [pc, #0xB4]
  00b74	e3a0010a	 mov         r0, #0xA, 2
  00b78	eb000000	 bl          RegOpenKeyExW
  00b7c	e58d002c	 str         r0, [sp, #0x2C]
  00b80	e59d302c	 ldr         r3, [sp, #0x2C]
  00b84	e3530000	 cmp         r3, #0
  00b88	1a000020	 bne         |$LN2@BTDrvUnloa|

; 360  : 			
; 361  : 			dwSize = sizeof (hDevice);

  00b8c	e3a03004	 mov         r3, #4
  00b90	e58d3010	 str         r3, [sp, #0x10]

; 362  : 
; 363  : 			if ((ERROR_SUCCESS == RegQueryValueEx (hk, L"btd_handle", NULL, &dwType, (LPBYTE)&hDevice, &dwSize)) &&
; 364  : 				(dwType == REG_DWORD) && (dwSize == sizeof (hDevice)) && hDevice) {

  00b94	e28d3010	 add         r3, sp, #0x10
  00b98	e58d3004	 str         r3, [sp, #4]
  00b9c	e28d3008	 add         r3, sp, #8
  00ba0	e58d3000	 str         r3, [sp]
  00ba4	e28d300c	 add         r3, sp, #0xC
  00ba8	e3a02000	 mov         r2, #0
  00bac	e59f1074	 ldr         r1, [pc, #0x74]
  00bb0	e59d0014	 ldr         r0, [sp, #0x14]
  00bb4	eb000000	 bl          RegQueryValueExW
  00bb8	e58d0030	 str         r0, [sp, #0x30]
  00bbc	e59d3030	 ldr         r3, [sp, #0x30]
  00bc0	e3530000	 cmp         r3, #0
  00bc4	1a00000d	 bne         |$LN1@BTDrvUnloa|
  00bc8	e59d300c	 ldr         r3, [sp, #0xC]
  00bcc	e3530004	 cmp         r3, #4
  00bd0	1a00000a	 bne         |$LN1@BTDrvUnloa|
  00bd4	e59d3010	 ldr         r3, [sp, #0x10]
  00bd8	e3530004	 cmp         r3, #4
  00bdc	1a000007	 bne         |$LN1@BTDrvUnloa|
  00be0	e59d3008	 ldr         r3, [sp, #8]
  00be4	e3530000	 cmp         r3, #0
  00be8	0a000004	 beq         |$LN1@BTDrvUnloa|

; 365  : 				DeactivateDevice(hDevice);

  00bec	e59d0008	 ldr         r0, [sp, #8]
  00bf0	eb000000	 bl          DeactivateDevice

; 366  : 				RegDeleteValue (hk, L"btd_handle");

  00bf4	e59f102c	 ldr         r1, [pc, #0x2C]
  00bf8	e59d0014	 ldr         r0, [sp, #0x14]
  00bfc	eb000000	 bl          RegDeleteValueW
  00c00		 |$LN1@BTDrvUnloa|

; 367  : 			}
; 368  : 			RegCloseKey (hk);

  00c00	e59d0014	 ldr         r0, [sp, #0x14]
  00c04	eb000000	 bl          RegCloseKey

; 369  : 			status = TRUE;

  00c08	e3a03001	 mov         r3, #1
  00c0c	e58d3018	 str         r3, [sp, #0x18]
  00c10		 |$LN2@BTDrvUnloa|

; 370  : 		}
; 371  : 		
; 372  : 		return status;  

  00c10	e59d3018	 ldr         r3, [sp, #0x18]
  00c14	e58d3028	 str         r3, [sp, #0x28]

; 373  :   
; 374  : }

  00c18	e59d0028	 ldr         r0, [sp, #0x28]
  00c1c	e28dd034	 add         sp, sp, #0x34
  00c20	e49de004	 ldr         lr, [sp], #4
  00c24	e12fff1e	 bx          lr
  00c28		 |$LN8@BTDrvUnloa|
  00c28		 |$LN9@BTDrvUnloa|
  00c28	00000000	 DCD         |??_C@_1BG@PEJKNFBI@?$AAb?$AAt?$AAd?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@|
  00c2c		 |$LN10@BTDrvUnloa|
  00c2c	00000000	 DCD         |??_C@_1DK@CDEKAJLJ@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?2?$AAB?$AAl?$AAu?$AAe?$AAt?$AAo?$AAo?$AAt?$AAh?$AA?$AA@|
  00c30		 |$M45975|

			 ENDP  ; |BTDrvUnload|

	EXPORT	|SysCtrl_BCR_HW_Trigger|

  00058			 AREA	 |.pdata|, PDATA
|$T45987| DCD	|$LN7@SysCtrl_BC@3|
	DCD	0x40001a04
; Function compile flags: /Odtp

  00c30			 AREA	 |.text|, CODE, ARM

  00c30		 |SysCtrl_BCR_HW_Trigger| PROC

; 377  : {

  00c30		 |$LN7@SysCtrl_BC@3|
  00c30	e1a0c00d	 mov         r12, sp
  00c34	e92d0001	 stmdb       sp!, {r0}
  00c38	e92d5000	 stmdb       sp!, {r12, lr}
  00c3c	e24dd004	 sub         sp, sp, #4
  00c40		 |$M45984|

; 378  :    
; 379  :    PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, 
; 380  :                          PXA_GPIO_94, 
; 381  :                          PXA_GPIO_DIRECTION_OUT);

  00c40	e3a02001	 mov         r2, #1
  00c44	e3a0105e	 mov         r1, #0x5E
  00c48	e59f3044	 ldr         r3, [pc, #0x44]
  00c4c	e5930000	 ldr         r0, [r3]
  00c50	eb000000	 bl          PXA_GPIOSetDirection

; 382  :    //Low avtice                                     
; 383  :     PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_94,OnOff?PXA_LO:PXA_HI);   

  00c54	e59d300c	 ldr         r3, [sp, #0xC]
  00c58	e3530000	 cmp         r3, #0
  00c5c	0a000002	 beq         |$LN3@SysCtrl_BC@3|
  00c60	e3a03000	 mov         r3, #0
  00c64	e58d3000	 str         r3, [sp]
  00c68	ea000001	 b           |$LN4@SysCtrl_BC@3|
  00c6c		 |$LN3@SysCtrl_BC@3|
  00c6c	e3a03001	 mov         r3, #1
  00c70	e58d3000	 str         r3, [sp]
  00c74		 |$LN4@SysCtrl_BC@3|
  00c74	e59d2000	 ldr         r2, [sp]
  00c78	e3a0105e	 mov         r1, #0x5E
  00c7c	e59f3010	 ldr         r3, [pc, #0x10]
  00c80	e5930000	 ldr         r0, [r3]
  00c84	eb000000	 bl          PXA_GPIOSetLevel

; 384  :         
; 385  : }

  00c88	e28dd004	 add         sp, sp, #4
  00c8c	e89d6000	 ldmia       sp, {sp, lr}
  00c90	e12fff1e	 bx          lr
  00c94		 |$LN8@SysCtrl_BC@3|
  00c94		 |$LN9@SysCtrl_BC@3|
  00c94	00000000	 DCD         |g_pGPIORegisters|
  00c98		 |$M45985|

			 ENDP  ; |SysCtrl_BCR_HW_Trigger|

	EXPORT	|??_C@_1CC@MCNJODND@?$AA?9?$AAB?$AAT?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@KHIEGKGE@?$AA?$CL?$AAB?$AAT?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|BTSetHWPower|
	IMPORT	|Sleep|

  00060			 AREA	 |.pdata|, PDATA
|$T45995| DCD	|$LN11@BTSetHWPow|
	DCD	0x40005804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@MCNJODND@?$AA?9?$AAB?$AAT?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "B", 0x0, "T", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "H"
	DCB	0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@KHIEGKGE@?$AA?$CL?$AAB?$AAT?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "B", 0x0, "T", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "H"
	DCB	0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00c98			 AREA	 |.text|, CODE, ARM

  00c98		 |BTSetHWPower| PROC

; 388  : {

  00c98		 |$LN11@BTSetHWPow|
  00c98	e1a0c00d	 mov         r12, sp
  00c9c	e92d0001	 stmdb       sp!, {r0}
  00ca0	e92d5000	 stmdb       sp!, {r12, lr}
  00ca4	e24dd004	 sub         sp, sp, #4
  00ca8		 |$M45992|

; 389  :     if(!g_pGPIORegisters || !g_pMFPBase)

  00ca8	e59f313c	 ldr         r3, [pc, #0x13C]
  00cac	e5933000	 ldr         r3, [r3]
  00cb0	e3530000	 cmp         r3, #0
  00cb4	0a000003	 beq         |$LN5@BTSetHWPow|
  00cb8	e59f3130	 ldr         r3, [pc, #0x130]
  00cbc	e5933000	 ldr         r3, [r3]
  00cc0	e3530000	 cmp         r3, #0
  00cc4	1a000000	 bne         |$LN6@BTSetHWPow|
  00cc8		 |$LN5@BTSetHWPow|

; 390  :     {
; 391  :         MapResources();

  00cc8	eb000000	 bl          MapResources
  00ccc		 |$LN6@BTSetHWPow|

; 392  :     }
; 393  : 
; 394  :     if(!g_pGPIORegisters || !g_pMFPBase)

  00ccc	e59f3118	 ldr         r3, [pc, #0x118]
  00cd0	e5933000	 ldr         r3, [r3]
  00cd4	e3530000	 cmp         r3, #0
  00cd8	0a000003	 beq         |$LN3@BTSetHWPow|
  00cdc	e59f310c	 ldr         r3, [pc, #0x10C]
  00ce0	e5933000	 ldr         r3, [r3]
  00ce4	e3530000	 cmp         r3, #0
  00ce8	1a000002	 bne         |$LN4@BTSetHWPow|
  00cec		 |$LN3@BTSetHWPow|

; 395  :     {
; 396  :         return FALSE;

  00cec	e3a03000	 mov         r3, #0
  00cf0	e58d3000	 str         r3, [sp]
  00cf4	ea000037	 b           |$LN7@BTSetHWPow|
  00cf8		 |$LN4@BTSetHWPow|

; 397  :     }
; 398  :         
; 399  :     RETAILMSG(1, (TEXT("+BTSetHWPower: %d\r\n"), dwState));

  00cf8	e59d100c	 ldr         r1, [sp, #0xC]
  00cfc	e59f00f0	 ldr         r0, [pc, #0xF0]
  00d00	eb000000	 bl          NKDbgPrintfW

; 400  : 
; 401  :     if(dwState)

  00d04	e59d300c	 ldr         r3, [sp, #0xC]
  00d08	e3530000	 cmp         r3, #0
  00d0c	0a00002b	 beq         |$LN2@BTSetHWPow|

; 402  :     {
; 403  : 		MFP_SetActiveMode(PXA_COMPONENT_BTUART_ID);

  00d10	e3a00010	 mov         r0, #0x10
  00d14	eb000000	 bl          MFP_SetActiveMode

; 404  : 
; 405  : 		// BT_PWRREN
; 406  : 		PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_92, PXA_GPIO_DIRECTION_OUT);

  00d18	e3a02001	 mov         r2, #1
  00d1c	e3a0105c	 mov         r1, #0x5C
  00d20	e59f30c4	 ldr         r3, [pc, #0xC4]
  00d24	e5930000	 ldr         r0, [r3]
  00d28	eb000000	 bl          PXA_GPIOSetDirection

; 407  : 		PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO92_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00d2c	e3a03002	 mov         r3, #2
  00d30	e3a02000	 mov         r2, #0
  00d34	e3a01e51	 mov         r1, #0x51, 28
  00d38	e59f00b0	 ldr         r0, [pc, #0xB0]
  00d3c	e5900000	 ldr         r0, [r0]
  00d40	eb000000	 bl          PXA_MFPSetAfDs

; 408  : 		PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_92, PXA_HI);

  00d44	e3a02001	 mov         r2, #1
  00d48	e3a0105c	 mov         r1, #0x5C
  00d4c	e59f3098	 ldr         r3, [pc, #0x98]
  00d50	e5930000	 ldr         r0, [r3]
  00d54	eb000000	 bl          PXA_GPIOSetLevel

; 409  : 		
; 410  : 		// BT_nRST
; 411  : 		PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_91, PXA_GPIO_DIRECTION_OUT);

  00d58	e3a02001	 mov         r2, #1
  00d5c	e3a0105b	 mov         r1, #0x5B
  00d60	e59f3084	 ldr         r3, [pc, #0x84]
  00d64	e5930000	 ldr         r0, [r3]
  00d68	eb000000	 bl          PXA_GPIOSetDirection

; 412  : 		PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO91_OFFSET, PXA_MFP_ALT_FN_0,PXA_MFP_DS_03X);     

  00d6c	e3a03002	 mov         r3, #2
  00d70	e3a02000	 mov         r2, #0
  00d74	e3a01c05	 mov         r1, #5, 24
  00d78	e381100c	 orr         r1, r1, #0xC
  00d7c	e59f006c	 ldr         r0, [pc, #0x6C]
  00d80	e5900000	 ldr         r0, [r0]
  00d84	eb000000	 bl          PXA_MFPSetAfDs

; 413  : 
; 414  : 		PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_91, PXA_LO);

  00d88	e3a02000	 mov         r2, #0
  00d8c	e3a0105b	 mov         r1, #0x5B
  00d90	e59f3054	 ldr         r3, [pc, #0x54]
  00d94	e5930000	 ldr         r0, [r3]
  00d98	eb000000	 bl          PXA_GPIOSetLevel

; 415  : 		Sleep(50);

  00d9c	e3a00032	 mov         r0, #0x32
  00da0	eb000000	 bl          Sleep

; 416  : 		PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_91, PXA_HI);  

  00da4	e3a02001	 mov         r2, #1
  00da8	e3a0105b	 mov         r1, #0x5B
  00dac	e59f3038	 ldr         r3, [pc, #0x38]
  00db0	e5930000	 ldr         r0, [r3]
  00db4	eb000000	 bl          PXA_GPIOSetLevel

; 417  :     
; 418  : 		BTDrvLoad();    

  00db8	eb000000	 bl          BTDrvLoad

; 419  : 	}
; 420  :     else

  00dbc	ea000001	 b           |$LN1@BTSetHWPow|
  00dc0		 |$LN2@BTSetHWPow|

; 421  :     {
; 422  : 		BTDrvUnload();

  00dc0	eb000000	 bl          BTDrvUnload

; 423  : 		DisableBTUart_Pin();

  00dc4	eb000000	 bl          DisableBTUart_Pin
  00dc8		 |$LN1@BTSetHWPow|

; 424  :     }
; 425  : 	RETAILMSG(1, (TEXT("-BTSetHWPower.\r\n")));

  00dc8	e59f0018	 ldr         r0, [pc, #0x18]
  00dcc	eb000000	 bl          NKDbgPrintfW

; 426  : 	
; 427  : 	return TRUE;

  00dd0	e3a03001	 mov         r3, #1
  00dd4	e58d3000	 str         r3, [sp]
  00dd8		 |$LN7@BTSetHWPow|

; 428  : }

  00dd8	e59d0000	 ldr         r0, [sp]
  00ddc	e28dd004	 add         sp, sp, #4
  00de0	e89d6000	 ldmia       sp, {sp, lr}
  00de4	e12fff1e	 bx          lr
  00de8		 |$LN12@BTSetHWPow|
  00de8		 |$LN13@BTSetHWPow|
  00de8	00000000	 DCD         |??_C@_1CC@MCNJODND@?$AA?9?$AAB?$AAT?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00dec		 |$LN14@BTSetHWPow|
  00dec	00000000	 DCD         |g_pGPIORegisters|
  00df0		 |$LN15@BTSetHWPow|
  00df0	00000000	 DCD         |g_pMFPBase|
  00df4		 |$LN16@BTSetHWPow|
  00df4	00000000	 DCD         |??_C@_1CI@KHIEGKGE@?$AA?$CL?$AAB?$AAT?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00df8		 |$M45993|

			 ENDP  ; |BTSetHWPower|

	EXPORT	|??_C@_1CG@PMJMGPKD@?$AA?9?$AAR?$AAF?$AAI?$AAD?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@PDAGKKPP@?$AA?$CL?$AAR?$AAF?$AAI?$AAD?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|RFIDSetHWPower|
	IMPORT	|PXA_OST_DelayMilliSeconds|

  00068			 AREA	 |.pdata|, PDATA
|$T46006| DCD	|$LN11@RFIDSetHWP|
	DCD	0x40004604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@PMJMGPKD@?$AA?9?$AAR?$AAF?$AAI?$AAD?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "R", 0x0, "F", 0x0, "I", 0x0, "D", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "H", 0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@PDAGKKPP@?$AA?$CL?$AAR?$AAF?$AAI?$AAD?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "R", 0x0, "F", 0x0, "I", 0x0, "D", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "H", 0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00df8			 AREA	 |.text|, CODE, ARM

  00df8		 |RFIDSetHWPower| PROC

; 431  : {

  00df8		 |$LN11@RFIDSetHWP|
  00df8	e1a0c00d	 mov         r12, sp
  00dfc	e92d0001	 stmdb       sp!, {r0}
  00e00	e92d5000	 stmdb       sp!, {r12, lr}
  00e04	e24dd004	 sub         sp, sp, #4
  00e08		 |$M46003|

; 432  :     if(!g_pGPIORegisters || !g_pMFPBase)

  00e08	e59f30f4	 ldr         r3, [pc, #0xF4]
  00e0c	e5933000	 ldr         r3, [r3]
  00e10	e3530000	 cmp         r3, #0
  00e14	0a000003	 beq         |$LN5@RFIDSetHWP|
  00e18	e59f30ec	 ldr         r3, [pc, #0xEC]
  00e1c	e5933000	 ldr         r3, [r3]
  00e20	e3530000	 cmp         r3, #0
  00e24	1a000000	 bne         |$LN6@RFIDSetHWP|
  00e28		 |$LN5@RFIDSetHWP|

; 433  :     {
; 434  :         MapResources();

  00e28	eb000000	 bl          MapResources
  00e2c		 |$LN6@RFIDSetHWP|

; 435  :     }
; 436  : 
; 437  :     if(!g_pGPIORegisters || !g_pMFPBase)

  00e2c	e59f30d0	 ldr         r3, [pc, #0xD0]
  00e30	e5933000	 ldr         r3, [r3]
  00e34	e3530000	 cmp         r3, #0
  00e38	0a000003	 beq         |$LN3@RFIDSetHWP|
  00e3c	e59f30c8	 ldr         r3, [pc, #0xC8]
  00e40	e5933000	 ldr         r3, [r3]
  00e44	e3530000	 cmp         r3, #0
  00e48	1a000002	 bne         |$LN4@RFIDSetHWP|
  00e4c		 |$LN3@RFIDSetHWP|

; 438  :     {
; 439  :         return FALSE;

  00e4c	e3a03000	 mov         r3, #0
  00e50	e58d3000	 str         r3, [sp]
  00e54	ea000025	 b           |$LN7@RFIDSetHWP|
  00e58		 |$LN4@RFIDSetHWP|

; 440  :     }
; 441  :         
; 442  :     RETAILMSG(1, (TEXT("+RFIDSetHWPower: %d\r\n"), dwState));

  00e58	e59d100c	 ldr         r1, [sp, #0xC]
  00e5c	e59f00a4	 ldr         r0, [pc, #0xA4]
  00e60	eb000000	 bl          NKDbgPrintfW

; 443  : 
; 444  :     if(dwState)

  00e64	e59d300c	 ldr         r3, [sp, #0xC]
  00e68	e3530000	 cmp         r3, #0
  00e6c	0a00000c	 beq         |$LN2@RFIDSetHWP|

; 445  :     {
; 446  :     	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_GPIO_DIRECTION_OUT);

  00e70	e3a02001	 mov         r2, #1
  00e74	e3a0105d	 mov         r1, #0x5D
  00e78	e59f3084	 ldr         r3, [pc, #0x84]
  00e7c	e5930000	 ldr         r0, [r3]
  00e80	eb000000	 bl          PXA_GPIOSetDirection

; 447  : 		PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_HI);

  00e84	e3a02001	 mov         r2, #1
  00e88	e3a0105d	 mov         r1, #0x5D
  00e8c	e59f3070	 ldr         r3, [pc, #0x70]
  00e90	e5930000	 ldr         r0, [r3]
  00e94	eb000000	 bl          PXA_GPIOSetLevel

; 448  : 		PXA_OST_DelayMilliSeconds(1000);

  00e98	e3a00ffa	 mov         r0, #0xFA, 30
  00e9c	eb000000	 bl          PXA_OST_DelayMilliSeconds

; 449  : 	}
; 450  :     else

  00ea0	ea00000e	 b           |$LN1@RFIDSetHWP|
  00ea4		 |$LN2@RFIDSetHWP|

; 451  :     {
; 452  : 		PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_GPIO_DIRECTION_OUT);

  00ea4	e3a02001	 mov         r2, #1
  00ea8	e3a0105d	 mov         r1, #0x5D
  00eac	e59f3050	 ldr         r3, [pc, #0x50]
  00eb0	e5930000	 ldr         r0, [r3]
  00eb4	eb000000	 bl          PXA_GPIOSetDirection

; 453  : 		PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_93,PXA_LO);

  00eb8	e3a02000	 mov         r2, #0
  00ebc	e3a0105d	 mov         r1, #0x5D
  00ec0	e59f303c	 ldr         r3, [pc, #0x3C]
  00ec4	e5930000	 ldr         r0, [r3]
  00ec8	eb000000	 bl          PXA_GPIOSetLevel

; 454  : 		PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_GPIO_DIRECTION_IN);

  00ecc	e3a02000	 mov         r2, #0
  00ed0	e3a0105d	 mov         r1, #0x5D
  00ed4	e59f3028	 ldr         r3, [pc, #0x28]
  00ed8	e5930000	 ldr         r0, [r3]
  00edc	eb000000	 bl          PXA_GPIOSetDirection
  00ee0		 |$LN1@RFIDSetHWP|

; 455  :     }
; 456  : 	RETAILMSG(1, (TEXT("-RFIDSetHWPower.\r\n")));

  00ee0	e59f0018	 ldr         r0, [pc, #0x18]
  00ee4	eb000000	 bl          NKDbgPrintfW

; 457  : 	
; 458  : 	return TRUE;

  00ee8	e3a03001	 mov         r3, #1
  00eec	e58d3000	 str         r3, [sp]
  00ef0		 |$LN7@RFIDSetHWP|

; 459  : }

  00ef0	e59d0000	 ldr         r0, [sp]
  00ef4	e28dd004	 add         sp, sp, #4
  00ef8	e89d6000	 ldmia       sp, {sp, lr}
  00efc	e12fff1e	 bx          lr
  00f00		 |$LN12@RFIDSetHWP|
  00f00		 |$LN13@RFIDSetHWP|
  00f00	00000000	 DCD         |??_C@_1CG@PMJMGPKD@?$AA?9?$AAR?$AAF?$AAI?$AAD?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00f04		 |$LN14@RFIDSetHWP|
  00f04	00000000	 DCD         |g_pGPIORegisters|
  00f08		 |$LN15@RFIDSetHWP|
  00f08	00000000	 DCD         |??_C@_1CM@PDAGKKPP@?$AA?$CL?$AAR?$AAF?$AAI?$AAD?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00f0c		 |$LN16@RFIDSetHWP|
  00f0c	00000000	 DCD         |g_pMFPBase|
  00f10		 |$M46004|

			 ENDP  ; |RFIDSetHWPower|

	EXPORT	|RFIDGetHWPower|

  00070			 AREA	 |.pdata|, PDATA
|$T46017| DCD	|$LN9@RFIDGetHWP|
	DCD	0x40002302
; Function compile flags: /Odtp

  00f10			 AREA	 |.text|, CODE, ARM

  00f10		 |RFIDGetHWPower| PROC

; 462  : {

  00f10		 |$LN9@RFIDGetHWP|
  00f10	e52de004	 str         lr, [sp, #-4]!
  00f14	e24dd008	 sub         sp, sp, #8
  00f18		 |$M46014|

; 463  :     PXA_LEVEL_T GPIOLevel;
; 464  : 
; 465  :     if(!g_pGPIORegisters || !g_pMFPBase)

  00f18	e59f3074	 ldr         r3, [pc, #0x74]
  00f1c	e5933000	 ldr         r3, [r3]
  00f20	e3530000	 cmp         r3, #0
  00f24	0a000003	 beq         |$LN3@RFIDGetHWP|
  00f28	e59f3068	 ldr         r3, [pc, #0x68]
  00f2c	e5933000	 ldr         r3, [r3]
  00f30	e3530000	 cmp         r3, #0
  00f34	1a000000	 bne         |$LN4@RFIDGetHWP|
  00f38		 |$LN3@RFIDGetHWP|

; 466  :     {
; 467  :         MapResources();

  00f38	eb000000	 bl          MapResources
  00f3c		 |$LN4@RFIDGetHWP|

; 468  :     }
; 469  :     if(!g_pGPIORegisters || !g_pMFPBase)

  00f3c	e59f3050	 ldr         r3, [pc, #0x50]
  00f40	e5933000	 ldr         r3, [r3]
  00f44	e3530000	 cmp         r3, #0
  00f48	0a000003	 beq         |$LN1@RFIDGetHWP|
  00f4c	e59f3044	 ldr         r3, [pc, #0x44]
  00f50	e5933000	 ldr         r3, [r3]
  00f54	e3530000	 cmp         r3, #0
  00f58	1a000002	 bne         |$LN2@RFIDGetHWP|
  00f5c		 |$LN1@RFIDGetHWP|

; 470  :     {
; 471  :         return FALSE;

  00f5c	e3a03000	 mov         r3, #0
  00f60	e58d3004	 str         r3, [sp, #4]
  00f64	ea000006	 b           |$LN5@RFIDGetHWP|
  00f68		 |$LN2@RFIDGetHWP|

; 472  :     }
; 473  : 
; 474  :     PXA_GPIOGetLevel((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, &GPIOLevel);

  00f68	e28d2000	 add         r2, sp, #0
  00f6c	e3a0105d	 mov         r1, #0x5D
  00f70	e59f301c	 ldr         r3, [pc, #0x1C]
  00f74	e5930000	 ldr         r0, [r3]
  00f78	eb000000	 bl          PXA_GPIOGetLevel

; 475  : 
; 476  :     return GPIOLevel;

  00f7c	e59d3000	 ldr         r3, [sp]
  00f80	e58d3004	 str         r3, [sp, #4]
  00f84		 |$LN5@RFIDGetHWP|

; 477  : }

  00f84	e59d0004	 ldr         r0, [sp, #4]
  00f88	e28dd008	 add         sp, sp, #8
  00f8c	e49de004	 ldr         lr, [sp], #4
  00f90	e12fff1e	 bx          lr
  00f94		 |$LN10@RFIDGetHWP|
  00f94		 |$LN11@RFIDGetHWP|
  00f94	00000000	 DCD         |g_pGPIORegisters|
  00f98		 |$LN12@RFIDGetHWP|
  00f98	00000000	 DCD         |g_pMFPBase|
  00f9c		 |$M46015|

			 ENDP  ; |RFIDGetHWPower|

	EXPORT	|VibratorGetHWPower|

  00078			 AREA	 |.pdata|, PDATA
|$T46028| DCD	|$LN7@VibratorGe|
	DCD	0x40001001
; Function compile flags: /Odtp

  00f9c			 AREA	 |.text|, CODE, ARM

  00f9c		 |VibratorGetHWPower| PROC

; 480  : {

  00f9c		 |$LN7@VibratorGe|
  00f9c	e24dd008	 sub         sp, sp, #8
  00fa0		 |$M46025|

; 481  :     return (*(volatile BYTE *)DEVICE_POWER_FLAG_ADDR & VIBRATORI_POWER_MASK) ? TRUE : FALSE;

  00fa0	e59f3030	 ldr         r3, [pc, #0x30]
  00fa4	e5d33000	 ldrb        r3, [r3]
  00fa8	e3130020	 tst         r3, #0x20
  00fac	0a000002	 beq         |$LN3@VibratorGe|
  00fb0	e3a03001	 mov         r3, #1
  00fb4	e58d3004	 str         r3, [sp, #4]
  00fb8	ea000001	 b           |$LN4@VibratorGe|
  00fbc		 |$LN3@VibratorGe|
  00fbc	e3a03000	 mov         r3, #0
  00fc0	e58d3004	 str         r3, [sp, #4]
  00fc4		 |$LN4@VibratorGe|
  00fc4	e59d3004	 ldr         r3, [sp, #4]
  00fc8	e58d3000	 str         r3, [sp]

; 482  : }

  00fcc	e59d0000	 ldr         r0, [sp]
  00fd0	e28dd008	 add         sp, sp, #8
  00fd4	e12fff1e	 bx          lr
  00fd8		 |$LN8@VibratorGe|
  00fd8		 |$LN9@VibratorGe|
  00fd8	a0008032	 DCD         0xa0008032
  00fdc		 |$M46026|

			 ENDP  ; |VibratorGetHWPower|

	EXPORT	|??_C@_1CO@FLFKPIGL@?$AA?9?$AAV?$AAi?$AAb?$AAr?$AAa?$AAt?$AAo?$AAr?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@LBKBKIDK@?$AA?$CL?$AAV?$AAi?$AAb?$AAr?$AAa?$AAt?$AAo?$AAr?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|VibratorSetHWPower|

  00080			 AREA	 |.pdata|, PDATA
|$T46036| DCD	|$LN7@VibratorSe|
	DCD	0x40002404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@FLFKPIGL@?$AA?9?$AAV?$AAi?$AAb?$AAr?$AAa?$AAt?$AAo?$AAr?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "V", 0x0, "i", 0x0, "b", 0x0, "r", 0x0, "a", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "H"
	DCB	0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@LBKBKIDK@?$AA?$CL?$AAV?$AAi?$AAb?$AAr?$AAa?$AAt?$AAo?$AAr?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "V", 0x0, "i", 0x0, "b", 0x0, "r", 0x0, "a", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "H"
	DCB	0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00fdc			 AREA	 |.text|, CODE, ARM

  00fdc		 |VibratorSetHWPower| PROC

; 485  : {            

  00fdc		 |$LN7@VibratorSe|
  00fdc	e1a0c00d	 mov         r12, sp
  00fe0	e92d0001	 stmdb       sp!, {r0}
  00fe4	e92d5000	 stmdb       sp!, {r12, lr}
  00fe8	e24dd004	 sub         sp, sp, #4
  00fec		 |$M46033|

; 486  :     RETAILMSG(1, (TEXT("+VibratorSetHWPower: %d\r\n"), dwState));

  00fec	e59d100c	 ldr         r1, [sp, #0xC]
  00ff0	e59f0070	 ldr         r0, [pc, #0x70]
  00ff4	eb000000	 bl          NKDbgPrintfW

; 487  :     if(dwState)

  00ff8	e59d300c	 ldr         r3, [sp, #0xC]
  00ffc	e3530000	 cmp         r3, #0
  01000	0a000006	 beq         |$LN2@VibratorSe|

; 488  :     {
; 489  :     	*(volatile BYTE *)DEVICE_POWER_FLAG_ADDR |= VIBRATORI_POWER_MASK;

  01004	e59f3058	 ldr         r3, [pc, #0x58]
  01008	e5d33000	 ldrb        r3, [r3]
  0100c	e3833020	 orr         r3, r3, #0x20
  01010	e59f204c	 ldr         r2, [pc, #0x4C]
  01014	e20330ff	 and         r3, r3, #0xFF
  01018	e5c23000	 strb        r3, [r2]

; 490  : 	}
; 491  :     else

  0101c	ea000007	 b           |$LN1@VibratorSe|
  01020		 |$LN2@VibratorSe|

; 492  :     {
; 493  : 		*(volatile BYTE *)DEVICE_POWER_FLAG_ADDR &= ~VIBRATORI_POWER_MASK;

  01020	e59f303c	 ldr         r3, [pc, #0x3C]
  01024	e5d33000	 ldrb        r3, [r3]
  01028	e1a02003	 mov         r2, r3
  0102c	e3e03020	 mvn         r3, #0x20
  01030	e0023003	 and         r3, r2, r3
  01034	e59f2028	 ldr         r2, [pc, #0x28]
  01038	e20330ff	 and         r3, r3, #0xFF
  0103c	e5c23000	 strb        r3, [r2]
  01040		 |$LN1@VibratorSe|

; 494  :     }
; 495  : 	RETAILMSG(1, (TEXT("-VibratorSetHWPower.\r\n")));

  01040	e59f0018	 ldr         r0, [pc, #0x18]
  01044	eb000000	 bl          NKDbgPrintfW

; 496  : 
; 497  : 	return TRUE;

  01048	e3a03001	 mov         r3, #1
  0104c	e58d3000	 str         r3, [sp]

; 498  : }

  01050	e59d0000	 ldr         r0, [sp]
  01054	e28dd004	 add         sp, sp, #4
  01058	e89d6000	 ldmia       sp, {sp, lr}
  0105c	e12fff1e	 bx          lr
  01060		 |$LN8@VibratorSe|
  01060		 |$LN9@VibratorSe|
  01060	00000000	 DCD         |??_C@_1CO@FLFKPIGL@?$AA?9?$AAV?$AAi?$AAb?$AAr?$AAa?$AAt?$AAo?$AAr?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  01064		 |$LN10@VibratorSe|
  01064	a0008032	 DCD         0xa0008032
  01068		 |$LN11@VibratorSe|
  01068	00000000	 DCD         |??_C@_1DE@LBKBKIDK@?$AA?$CL?$AAV?$AAi?$AAb?$AAr?$AAa?$AAt?$AAo?$AAr?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0106c		 |$M46034|

			 ENDP  ; |VibratorSetHWPower|

	END
