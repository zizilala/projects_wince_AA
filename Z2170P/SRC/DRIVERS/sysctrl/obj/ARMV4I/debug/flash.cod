; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170\SRC\DRIVERS\sysctrl\flash.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.data|, DATA
	 COMMON	|g_FlashInfo|, 0x10


  00000			 AREA	 |.bss|, NOINIT
|g_BlockArrayType| % 0x4
|g_FlashDeviceType| % 0x4

  00000			 AREA	 |.data|, DATA
|g_szOPDescription| DCD |??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@|
	DCD	|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@|
|FLASH_SIZE| DCD 0x2000000
|ERASE_BLOCKS| DCD 0x80
|L3_BLOCK_SIZE| DCD 0x10000

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "8"
	DCB	0x0, "0", 0x0, "6", 0x0, " ", 0x0, "H", 0x0, "S", 0x0, "M"
	DCB	0x0, "H", 0x0, "Z", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "8"
	DCB	0x0, "0", 0x0, "6", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "6"
	DCB	0x0, "2", 0x0, "4", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "4"
	DCB	0x0, "1", 0x0, "6", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "2"
	DCB	0x0, "0", 0x0, "8", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@| DCB "R"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "O", 0x0, "S"
	DCB	0x0, "C", 0x0, 0x0, 0x0			; `string'
	EXPORT	|InitializeCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T41584| DCD	|$LN5@Initialize|
	DCD	0x40000503
; Function compile flags: /Odtp
; File c:\wince600\platform\z2170\src\drivers\sysctrl\flash.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitializeCriticalSection| PROC

; 97   : VOID WINAPI InitializeCriticalSection(LPCRITICAL_SECTION lpcs){}

  00000		 |$LN5@Initialize|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M41581|
  0000c	e89d6000	 ldmia       sp, {sp, lr}
  00010	e12fff1e	 bx          lr
  00014		 |$M41582|

			 ENDP  ; |InitializeCriticalSection|

	EXPORT	|EnterCriticalSection|

  00008			 AREA	 |.pdata|, PDATA
|$T41589| DCD	|$LN5@EnterCriti|
	DCD	0x40000503
; Function compile flags: /Odtp

  00014			 AREA	 |.text|, CODE, ARM

  00014		 |EnterCriticalSection| PROC

; 98   : VOID WINAPI EnterCriticalSection(LPCRITICAL_SECTION lpcs){}

  00014		 |$LN5@EnterCriti|
  00014	e1a0c00d	 mov         r12, sp
  00018	e92d0001	 stmdb       sp!, {r0}
  0001c	e92d5000	 stmdb       sp!, {r12, lr}
  00020		 |$M41586|
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M41587|

			 ENDP  ; |EnterCriticalSection|

	EXPORT	|LeaveCriticalSection|

  00010			 AREA	 |.pdata|, PDATA
|$T41594| DCD	|$LN5@LeaveCriti|
	DCD	0x40000503
; Function compile flags: /Odtp

  00028			 AREA	 |.text|, CODE, ARM

  00028		 |LeaveCriticalSection| PROC

; 99   : VOID WINAPI LeaveCriticalSection(LPCRITICAL_SECTION lpcs){}

  00028		 |$LN5@LeaveCriti|
  00028	e1a0c00d	 mov         r12, sp
  0002c	e92d0001	 stmdb       sp!, {r0}
  00030	e92d5000	 stmdb       sp!, {r12, lr}
  00034		 |$M41591|
  00034	e89d6000	 ldmia       sp, {sp, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M41592|

			 ENDP  ; |LeaveCriticalSection|

	EXPORT	|DeleteCriticalSection|

  00018			 AREA	 |.pdata|, PDATA
|$T41599| DCD	|$LN5@DeleteCrit|
	DCD	0x40000503
; Function compile flags: /Odtp

  0003c			 AREA	 |.text|, CODE, ARM

  0003c		 |DeleteCriticalSection| PROC

; 100  : VOID WINAPI DeleteCriticalSection(LPCRITICAL_SECTION lpcs){}

  0003c		 |$LN5@DeleteCrit|
  0003c	e1a0c00d	 mov         r12, sp
  00040	e92d0001	 stmdb       sp!, {r0}
  00044	e92d5000	 stmdb       sp!, {r12, lr}
  00048		 |$M41596|
  00048	e89d6000	 ldmia       sp, {sp, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M41597|

			 ENDP  ; |DeleteCriticalSection|

	EXPORT	|PXA_DMA_ArmTransfer|

  00020			 AREA	 |.pdata|, PDATA
|$T41605| DCD	|$LN5@PXA_DMA_Ar|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00050			 AREA	 |.text|, CODE, ARM

  00050		 |PXA_DMA_ArmTransfer| PROC

; 102  : BOOL PXA_DMA_ArmTransfer(PXA_DMA_ChannelHandle channel,PXA_DMA_TransferHandle transfer){return TRUE;}

  00050		 |$LN5@PXA_DMA_Ar|
  00050	e1a0c00d	 mov         r12, sp
  00054	e92d0003	 stmdb       sp!, {r0, r1}
  00058	e92d5000	 stmdb       sp!, {r12, lr}
  0005c	e24dd004	 sub         sp, sp, #4
  00060		 |$M41602|
  00060	e3a03001	 mov         r3, #1
  00064	e58d3000	 str         r3, [sp]
  00068	e59d0000	 ldr         r0, [sp]
  0006c	e28dd004	 add         sp, sp, #4
  00070	e89d6000	 ldmia       sp, {sp, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M41603|

			 ENDP  ; |PXA_DMA_ArmTransfer|

	EXPORT	|PXA_DMA_UpdateTransferLength|

  00028			 AREA	 |.pdata|, PDATA
|$T41610| DCD	|$LN5@PXA_DMA_Up|
	DCD	0x40000503
; Function compile flags: /Odtp

  00078			 AREA	 |.text|, CODE, ARM

  00078		 |PXA_DMA_UpdateTransferLength| PROC

; 103  : VOID PXA_DMA_UpdateTransferLength(PXA_DMA_TransferHandle transfer,UINT32 pos,UINT32 length){}

  00078		 |$LN5@PXA_DMA_Up|
  00078	e1a0c00d	 mov         r12, sp
  0007c	e92d0007	 stmdb       sp!, {r0 - r2}
  00080	e92d5000	 stmdb       sp!, {r12, lr}
  00084		 |$M41607|
  00084	e89d6000	 ldmia       sp, {sp, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$M41608|

			 ENDP  ; |PXA_DMA_UpdateTransferLength|

	EXPORT	|PXA_DMA_TerminateTransfer|

  00030			 AREA	 |.pdata|, PDATA
|$T41616| DCD	|$LN5@PXA_DMA_Te|
	DCD	0x40000a04
; Function compile flags: /Odtp

  0008c			 AREA	 |.text|, CODE, ARM

  0008c		 |PXA_DMA_TerminateTransfer| PROC

; 104  : BOOL PXA_DMA_TerminateTransfer(PXA_DMA_ChannelHandle channel, PXA_DMA_TransferStatus * p_status){return TRUE;}

  0008c		 |$LN5@PXA_DMA_Te|
  0008c	e1a0c00d	 mov         r12, sp
  00090	e92d0003	 stmdb       sp!, {r0, r1}
  00094	e92d5000	 stmdb       sp!, {r12, lr}
  00098	e24dd004	 sub         sp, sp, #4
  0009c		 |$M41613|
  0009c	e3a03001	 mov         r3, #1
  000a0	e58d3000	 str         r3, [sp]
  000a4	e59d0000	 ldr         r0, [sp]
  000a8	e28dd004	 add         sp, sp, #4
  000ac	e89d6000	 ldmia       sp, {sp, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$M41614|

			 ENDP  ; |PXA_DMA_TerminateTransfer|

	EXPORT	|PXA_DMA_StartTransfer|

  00038			 AREA	 |.pdata|, PDATA
|$T41622| DCD	|$LN5@PXA_DMA_St|
	DCD	0x40000a04
; Function compile flags: /Odtp

  000b4			 AREA	 |.text|, CODE, ARM

  000b4		 |PXA_DMA_StartTransfer| PROC

; 105  : BOOL PXA_DMA_StartTransfer(PXA_DMA_ChannelHandle channel){return TRUE;}

  000b4		 |$LN5@PXA_DMA_St|
  000b4	e1a0c00d	 mov         r12, sp
  000b8	e92d0001	 stmdb       sp!, {r0}
  000bc	e92d5000	 stmdb       sp!, {r12, lr}
  000c0	e24dd004	 sub         sp, sp, #4
  000c4		 |$M41619|
  000c4	e3a03001	 mov         r3, #1
  000c8	e58d3000	 str         r3, [sp]
  000cc	e59d0000	 ldr         r0, [sp]
  000d0	e28dd004	 add         sp, sp, #4
  000d4	e89d6000	 ldmia       sp, {sp, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$M41620|

			 ENDP  ; |PXA_DMA_StartTransfer|

	EXPORT	|PXA_DMA_PollingForTransferDone|

  00040			 AREA	 |.pdata|, PDATA
|$T41628| DCD	|$LN5@PXA_DMA_Po|
	DCD	0x40000a04
; Function compile flags: /Odtp

  000dc			 AREA	 |.text|, CODE, ARM

  000dc		 |PXA_DMA_PollingForTransferDone| PROC

; 106  : BOOL PXA_DMA_PollingForTransferDone(PXA_DMA_ChannelHandle channel){return TRUE;}

  000dc		 |$LN5@PXA_DMA_Po|
  000dc	e1a0c00d	 mov         r12, sp
  000e0	e92d0001	 stmdb       sp!, {r0}
  000e4	e92d5000	 stmdb       sp!, {r12, lr}
  000e8	e24dd004	 sub         sp, sp, #4
  000ec		 |$M41625|
  000ec	e3a03001	 mov         r3, #1
  000f0	e58d3000	 str         r3, [sp]
  000f4	e59d0000	 ldr         r0, [sp]
  000f8	e28dd004	 add         sp, sp, #4
  000fc	e89d6000	 ldmia       sp, {sp, lr}
  00100	e12fff1e	 bx          lr
  00104		 |$M41626|

			 ENDP  ; |PXA_DMA_PollingForTransferDone|

	EXPORT	|??_C@_1CE@MHJNFEAG@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?2?$AAX?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|FlashInit|
	IMPORT	|FMD_GetInfo|
	IMPORT	|FMD_Init|

  00048			 AREA	 |.pdata|, PDATA
|$T41634| DCD	|$LN5@FlashInit|
	DCD	0x40001602

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@MHJNFEAG@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?2?$AAX?$AAX?$AA?$AA@| DCB "D"
	DCB	0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, "\\", 0x0, "A", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "\\", 0x0, "X", 0x0, "X", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00104			 AREA	 |.text|, CODE, ARM

  00104		 |FlashInit| PROC

; 110  : {

  00104		 |$LN5@FlashInit|
  00104	e52de004	 str         lr, [sp, #-4]!
  00108	e24dd010	 sub         sp, sp, #0x10
  0010c		 |$M41631|

; 111  :     PVOID hFMD = NULL;

  0010c	e3a03000	 mov         r3, #0
  00110	e58d3000	 str         r3, [sp]

; 112  :     hFMD = FMD_Init(FMD_CALLER_DLL, NULL, NULL);    

  00114	e3a02000	 mov         r2, #0
  00118	e3a01000	 mov         r1, #0
  0011c	e59f0034	 ldr         r0, [pc, #0x34]
  00120	eb000000	 bl          FMD_Init
  00124	e58d0008	 str         r0, [sp, #8]
  00128	e59d3008	 ldr         r3, [sp, #8]
  0012c	e58d3000	 str         r3, [sp]

; 113  : 
; 114  :     return FMD_GetInfo(&g_FlashInfo);

  00130	e59f001c	 ldr         r0, [pc, #0x1C]
  00134	eb000000	 bl          FMD_GetInfo
  00138	e58d000c	 str         r0, [sp, #0xC]
  0013c	e59d300c	 ldr         r3, [sp, #0xC]
  00140	e58d3004	 str         r3, [sp, #4]

; 115  : }

  00144	e59d0004	 ldr         r0, [sp, #4]
  00148	e28dd010	 add         sp, sp, #0x10
  0014c	e49de004	 ldr         lr, [sp], #4
  00150	e12fff1e	 bx          lr
  00154		 |$LN6@FlashInit|
  00154		 |$LN7@FlashInit|
  00154	00000000	 DCD         |g_FlashInfo|
  00158		 |$LN8@FlashInit|
  00158	00000000	 DCD         |??_C@_1CE@MHJNFEAG@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?2?$AAX?$AAX?$AA?$AA@|
  0015c		 |$M41632|

			 ENDP  ; |FlashInit|

	EXPORT	|FlashReadSector|
	IMPORT	|FMD_ReadSector|

  00050			 AREA	 |.pdata|, PDATA
|$T41643| DCD	|$LN9@FlashReadS|
	DCD	0x40001d04
; Function compile flags: /Odtp

  0015c			 AREA	 |.text|, CODE, ARM

  0015c		 |FlashReadSector| PROC

; 118  : {

  0015c		 |$LN9@FlashReadS|
  0015c	e1a0c00d	 mov         r12, sp
  00160	e92d0007	 stmdb       sp!, {r0 - r2}
  00164	e92d5000	 stmdb       sp!, {r12, lr}
  00168	e24dd010	 sub         sp, sp, #0x10
  0016c		 |$M41640|

; 119  :     BOOL rc;
; 120  :     UINT32 retry = NAND_ATTEMPT_NUMBER;

  0016c	e3a03003	 mov         r3, #3
  00170	e58d3004	 str         r3, [sp, #4]
  00174		 |$LN4@FlashReadS|

; 121  :     do {
; 122  :         rc=FMD_ReadSector(sector, pTmp, pSectorInfo, 1);

  00174	e3a03001	 mov         r3, #1
  00178	e59d2020	 ldr         r2, [sp, #0x20]
  0017c	e59d101c	 ldr         r1, [sp, #0x1C]
  00180	e59d0018	 ldr         r0, [sp, #0x18]
  00184	eb000000	 bl          FMD_ReadSector
  00188	e58d000c	 str         r0, [sp, #0xC]
  0018c	e59d300c	 ldr         r3, [sp, #0xC]
  00190	e58d3000	 str         r3, [sp]

; 123  :     }while (!rc && --retry > 0);

  00194	e59d3000	 ldr         r3, [sp]
  00198	e3530000	 cmp         r3, #0
  0019c	1a000005	 bne         |$LN1@FlashReadS|
  001a0	e59d3004	 ldr         r3, [sp, #4]
  001a4	e2433001	 sub         r3, r3, #1
  001a8	e58d3004	 str         r3, [sp, #4]
  001ac	e59d3004	 ldr         r3, [sp, #4]
  001b0	e3530000	 cmp         r3, #0
  001b4	8affffee	 bhi         |$LN4@FlashReadS|
  001b8		 |$LN1@FlashReadS|

; 124  :     return rc;

  001b8	e59d3000	 ldr         r3, [sp]
  001bc	e58d3008	 str         r3, [sp, #8]

; 125  : }

  001c0	e59d0008	 ldr         r0, [sp, #8]
  001c4	e28dd010	 add         sp, sp, #0x10
  001c8	e89d6000	 ldmia       sp, {sp, lr}
  001cc	e12fff1e	 bx          lr
  001d0		 |$M41641|

			 ENDP  ; |FlashReadSector|

	EXPORT	|FlashWriteSector|
	IMPORT	|FMD_WriteSector|

  00058			 AREA	 |.pdata|, PDATA
|$T41649| DCD	|$LN9@FlashWrite|
	DCD	0x40001d04
; Function compile flags: /Odtp

  001d0			 AREA	 |.text|, CODE, ARM

  001d0		 |FlashWriteSector| PROC

; 128  : {

  001d0		 |$LN9@FlashWrite|
  001d0	e1a0c00d	 mov         r12, sp
  001d4	e92d0007	 stmdb       sp!, {r0 - r2}
  001d8	e92d5000	 stmdb       sp!, {r12, lr}
  001dc	e24dd010	 sub         sp, sp, #0x10
  001e0		 |$M41646|

; 129  :     BOOL rc;
; 130  :     UINT32 retry = NAND_ATTEMPT_NUMBER;

  001e0	e3a03003	 mov         r3, #3
  001e4	e58d3004	 str         r3, [sp, #4]
  001e8		 |$LN4@FlashWrite|

; 131  :     do {
; 132  :         rc = FMD_WriteSector(sector, pBuffer, pInfo, 1);

  001e8	e3a03001	 mov         r3, #1
  001ec	e59d2020	 ldr         r2, [sp, #0x20]
  001f0	e59d101c	 ldr         r1, [sp, #0x1C]
  001f4	e59d0018	 ldr         r0, [sp, #0x18]
  001f8	eb000000	 bl          FMD_WriteSector
  001fc	e58d000c	 str         r0, [sp, #0xC]
  00200	e59d300c	 ldr         r3, [sp, #0xC]
  00204	e58d3000	 str         r3, [sp]

; 133  :     } while (!rc && --retry > 0);

  00208	e59d3000	 ldr         r3, [sp]
  0020c	e3530000	 cmp         r3, #0
  00210	1a000005	 bne         |$LN1@FlashWrite|
  00214	e59d3004	 ldr         r3, [sp, #4]
  00218	e2433001	 sub         r3, r3, #1
  0021c	e58d3004	 str         r3, [sp, #4]
  00220	e59d3004	 ldr         r3, [sp, #4]
  00224	e3530000	 cmp         r3, #0
  00228	8affffee	 bhi         |$LN4@FlashWrite|
  0022c		 |$LN1@FlashWrite|

; 134  :     return rc;

  0022c	e59d3000	 ldr         r3, [sp]
  00230	e58d3008	 str         r3, [sp, #8]

; 135  : }

  00234	e59d0008	 ldr         r0, [sp, #8]
  00238	e28dd010	 add         sp, sp, #0x10
  0023c	e89d6000	 ldmia       sp, {sp, lr}
  00240	e12fff1e	 bx          lr
  00244		 |$M41647|

			 ENDP  ; |FlashWriteSector|

	EXPORT	|FlashEraseBlock|
	IMPORT	|FMD_EraseBlock|

  00060			 AREA	 |.pdata|, PDATA
|$T41655| DCD	|$LN9@FlashErase|
	DCD	0x40001a04
; Function compile flags: /Odtp

  00244			 AREA	 |.text|, CODE, ARM

  00244		 |FlashEraseBlock| PROC

; 138  : {

  00244		 |$LN9@FlashErase|
  00244	e1a0c00d	 mov         r12, sp
  00248	e92d0001	 stmdb       sp!, {r0}
  0024c	e92d5000	 stmdb       sp!, {r12, lr}
  00250	e24dd010	 sub         sp, sp, #0x10
  00254		 |$M41652|

; 139  :     BOOL rc;
; 140  :     UINT32 retry = NAND_ATTEMPT_NUMBER;

  00254	e3a03003	 mov         r3, #3
  00258	e58d3004	 str         r3, [sp, #4]
  0025c		 |$LN4@FlashErase|

; 141  :     do {
; 142  :         rc = FMD_EraseBlock(block);

  0025c	e59d0018	 ldr         r0, [sp, #0x18]
  00260	eb000000	 bl          FMD_EraseBlock
  00264	e58d000c	 str         r0, [sp, #0xC]
  00268	e59d300c	 ldr         r3, [sp, #0xC]
  0026c	e58d3000	 str         r3, [sp]

; 143  :     } while (!rc && --retry > 0);

  00270	e59d3000	 ldr         r3, [sp]
  00274	e3530000	 cmp         r3, #0
  00278	1a000005	 bne         |$LN1@FlashErase|
  0027c	e59d3004	 ldr         r3, [sp, #4]
  00280	e2433001	 sub         r3, r3, #1
  00284	e58d3004	 str         r3, [sp, #4]
  00288	e59d3004	 ldr         r3, [sp, #4]
  0028c	e3530000	 cmp         r3, #0
  00290	8afffff1	 bhi         |$LN4@FlashErase|
  00294		 |$LN1@FlashErase|

; 144  :     return rc;

  00294	e59d3000	 ldr         r3, [sp]
  00298	e58d3008	 str         r3, [sp, #8]

; 145  : }

  0029c	e59d0008	 ldr         r0, [sp, #8]
  002a0	e28dd010	 add         sp, sp, #0x10
  002a4	e89d6000	 ldmia       sp, {sp, lr}
  002a8	e12fff1e	 bx          lr
  002ac		 |$M41653|

			 ENDP  ; |FlashEraseBlock|

	EXPORT	|FlashReadNANDFlash|

  00008			 AREA	 |.bss|, NOINIT
|tempBuffer| %	0x800

  00068			 AREA	 |.pdata|, PDATA
|$T41661| DCD	|$LN11@FlashReadN|
	DCD	0x40003c04
; Function compile flags: /Odtp

  002ac			 AREA	 |.text|, CODE, ARM

  002ac		 |FlashReadNANDFlash| PROC

; 153  : {

  002ac		 |$LN11@FlashReadN|
  002ac	e1a0c00d	 mov         r12, sp
  002b0	e92d0003	 stmdb       sp!, {r0, r1}
  002b4	e92d5000	 stmdb       sp!, {r12, lr}
  002b8	e24dd034	 sub         sp, sp, #0x34
  002bc		 |$M41658|

; 154  :     BOOL rc = FALSE;

  002bc	e3a03000	 mov         r3, #0
  002c0	e58d3010	 str         r3, [sp, #0x10]

; 155  :     FlashInfo flashInfo;    
; 156  :     BLOCK_ID block;
; 157  :     UINT32  sectorsPerBlock;
; 158  :     SECTOR_ADDR sector;
; 159  :     SectorInfo sectorInfo;
; 160  : 
; 161  :     //KITLOutputDebugString("+FlashReadNANDFlash\r\n");
; 162  : 
; 163  :     if (!FMD_GetInfo(&flashInfo))

  002c4	e28d0000	 add         r0, sp, #0
  002c8	eb000000	 bl          FMD_GetInfo
  002cc	e58d002c	 str         r0, [sp, #0x2C]
  002d0	e59d302c	 ldr         r3, [sp, #0x2C]
  002d4	e3530000	 cmp         r3, #0
  002d8	1a000002	 bne         |$LN6@FlashReadN|

; 164  :     {
; 165  :         //KITLOutputDebugString("ERROR: FlashReadNANDFlash: FMD_GetInfo call failed!\r\n");
; 166  :         return rc;

  002dc	e59d3010	 ldr         r3, [sp, #0x10]
  002e0	e58d3028	 str         r3, [sp, #0x28]
  002e4	ea000027	 b           |$LN7@FlashReadN|
  002e8		 |$LN6@FlashReadN|

; 167  :     }
; 168  : 
; 169  :     sectorsPerBlock = flashInfo.wSectorsPerBlock;

  002e8	e1dd30bc	 ldrh        r3, [sp, #0xC]
  002ec	e58d3014	 str         r3, [sp, #0x14]

; 170  :     block = startBlock;

  002f0	e59d303c	 ldr         r3, [sp, #0x3C]
  002f4	e58d3024	 str         r3, [sp, #0x24]
  002f8		 |$LN5@FlashReadN|

; 171  :     
; 172  :     while (block <= endBlock)

  002f8	e59d2024	 ldr         r2, [sp, #0x24]
  002fc	e59d3040	 ldr         r3, [sp, #0x40]
  00300	e1520003	 cmp         r2, r3
  00304	8a00001d	 bhi         |$LN4@FlashReadN|

; 173  :     {
; 174  :         //no need to read the relocation table, FMD_ReadSector will do the mapping operation
; 175  :         sector = block * sectorsPerBlock;

  00308	e59d2024	 ldr         r2, [sp, #0x24]
  0030c	e59d3014	 ldr         r3, [sp, #0x14]
  00310	e0030392	 mul         r3, r2, r3
  00314	e58d3018	 str         r3, [sp, #0x18]
  00318		 |$LN3@FlashReadN|

; 176  :         while(sector<(block+1) * sectorsPerBlock)

  00318	e59d3024	 ldr         r3, [sp, #0x24]
  0031c	e2831001	 add         r1, r3, #1
  00320	e59d3014	 ldr         r3, [sp, #0x14]
  00324	e0020391	 mul         r2, r1, r3
  00328	e59d3018	 ldr         r3, [sp, #0x18]
  0032c	e1530002	 cmp         r3, r2
  00330	2a00000e	 bcs         |$LN2@FlashReadN|

; 177  :         {
; 178  :         if (!FlashReadSector(sector, tempBuffer, &sectorInfo))

  00334	e28d201c	 add         r2, sp, #0x1C
  00338	e59f1058	 ldr         r1, [pc, #0x58]
  0033c	e59d0018	 ldr         r0, [sp, #0x18]
  00340	eb000000	 bl          FlashReadSector
  00344	e58d0030	 str         r0, [sp, #0x30]
  00348	e59d3030	 ldr         r3, [sp, #0x30]
  0034c	e3530000	 cmp         r3, #0
  00350	1a000002	 bne         |$LN1@FlashReadN|

; 179  :         {
; 180  :             //KITLOutputDebugString("ERROR: FlashRead: Failed read sector %d from flash\r\n", sector);
; 181  :             return rc;

  00354	e59d3010	 ldr         r3, [sp, #0x10]
  00358	e58d3028	 str         r3, [sp, #0x28]
  0035c	ea000009	 b           |$LN7@FlashReadN|
  00360		 |$LN1@FlashReadN|

; 182  :         }
; 183  :             sector++;

  00360	e59d3018	 ldr         r3, [sp, #0x18]
  00364	e2833001	 add         r3, r3, #1
  00368	e58d3018	 str         r3, [sp, #0x18]

; 184  :         }

  0036c	eaffffe9	 b           |$LN3@FlashReadN|
  00370		 |$LN2@FlashReadN|

; 185  :             //KITLOutputDebugString(".", block);
; 186  :         block++;

  00370	e59d3024	 ldr         r3, [sp, #0x24]
  00374	e2833001	 add         r3, r3, #1
  00378	e58d3024	 str         r3, [sp, #0x24]

; 187  :     }

  0037c	eaffffdd	 b           |$LN5@FlashReadN|
  00380		 |$LN4@FlashReadN|

; 188  : 
; 189  :     //KITLOutputDebugString("-FlashReadNANDFlash successfully\r\n");
; 190  :     return TRUE;

  00380	e3a03001	 mov         r3, #1
  00384	e58d3028	 str         r3, [sp, #0x28]
  00388		 |$LN7@FlashReadN|

; 191  : }

  00388	e59d0028	 ldr         r0, [sp, #0x28]
  0038c	e28dd034	 add         sp, sp, #0x34
  00390	e89d6000	 ldmia       sp, {sp, lr}
  00394	e12fff1e	 bx          lr
  00398		 |$LN12@FlashReadN|
  00398		 |$LN13@FlashReadN|
  00398	00000000	 DCD         |tempBuffer|
  0039c		 |$M41659|

			 ENDP  ; |FlashReadNANDFlash|

	EXPORT	|FlashFormatNANDFlash|

  00070			 AREA	 |.pdata|, PDATA
|$T41669| DCD	|$LN10@FlashForma|
	DCD	0x40002704
; Function compile flags: /Odtp

  0039c			 AREA	 |.text|, CODE, ARM

  0039c		 |FlashFormatNANDFlash| PROC

; 200  : {

  0039c		 |$LN10@FlashForma|
  0039c	e1a0c00d	 mov         r12, sp
  003a0	e92d0003	 stmdb       sp!, {r0, r1}
  003a4	e92d5000	 stmdb       sp!, {r12, lr}
  003a8	e24dd024	 sub         sp, sp, #0x24
  003ac		 |$M41666|

; 201  :     BOOL rc = FALSE;

  003ac	e3a03000	 mov         r3, #0
  003b0	e58d3010	 str         r3, [sp, #0x10]

; 202  :     FlashInfo flashInfo;        
; 203  :     BLOCK_ID block = startBlock;

  003b4	e59d302c	 ldr         r3, [sp, #0x2C]
  003b8	e58d3014	 str         r3, [sp, #0x14]

; 204  : 
; 205  :     //KITLOutputDebugString("+FlashFormatNANDFlash: startBlock = %d, endBlock = %d\r\n", startBlock, endBlock);
; 206  : 
; 207  :     if (!FMD_GetInfo(&flashInfo)) 

  003bc	e28d0000	 add         r0, sp, #0
  003c0	eb000000	 bl          FMD_GetInfo
  003c4	e58d001c	 str         r0, [sp, #0x1C]
  003c8	e59d301c	 ldr         r3, [sp, #0x1C]
  003cc	e3530000	 cmp         r3, #0
  003d0	1a000002	 bne         |$LN5@FlashForma|

; 208  :     {
; 209  :         //KITLOutputDebugString("ERROR: FlashFormatNANDFlash: FMD_GetInfo call failed!\r\n");
; 210  :         return rc;

  003d4	e59d3010	 ldr         r3, [sp, #0x10]
  003d8	e58d3018	 str         r3, [sp, #0x18]
  003dc	ea000011	 b           |$LN6@FlashForma|
  003e0		 |$LN5@FlashForma|
  003e0		 |$LN4@FlashForma|

; 211  :     }
; 212  : 
; 213  :     do {
; 214  :         //KITLOutputDebugString(".");
; 215  :         if (!FlashEraseBlock(block))

  003e0	e59d0014	 ldr         r0, [sp, #0x14]
  003e4	eb000000	 bl          FlashEraseBlock
  003e8	e58d0020	 str         r0, [sp, #0x20]
  003ec	e59d3020	 ldr         r3, [sp, #0x20]
  003f0	e3530000	 cmp         r3, #0
  003f4	1a000002	 bne         |$LN1@FlashForma|

; 216  :         {
; 217  :             //KITLOutputDebugString("ERROR: FlashFormatNANDFlash: Erase block %d failed!\r\n", block);
; 218  :             return rc;

  003f8	e59d3010	 ldr         r3, [sp, #0x10]
  003fc	e58d3018	 str         r3, [sp, #0x18]
  00400	ea000008	 b           |$LN6@FlashForma|
  00404		 |$LN1@FlashForma|

; 219  :         }
; 220  :     } while (++block <= endBlock);

  00404	e59d3014	 ldr         r3, [sp, #0x14]
  00408	e2833001	 add         r3, r3, #1
  0040c	e58d3014	 str         r3, [sp, #0x14]
  00410	e59d2014	 ldr         r2, [sp, #0x14]
  00414	e59d3030	 ldr         r3, [sp, #0x30]
  00418	e1520003	 cmp         r2, r3
  0041c	9affffef	 bls         |$LN4@FlashForma|

; 221  : 
; 222  :     //KITLOutputDebugString("\r\n-FlashFormatNANDFlash: startBlock = %d, endBlock = %d block = %d\r\n", startBlock, endBlock, block);
; 223  : 
; 224  :     return TRUE;

  00420	e3a03001	 mov         r3, #1
  00424	e58d3018	 str         r3, [sp, #0x18]
  00428		 |$LN6@FlashForma|

; 225  : }

  00428	e59d0018	 ldr         r0, [sp, #0x18]
  0042c	e28dd024	 add         sp, sp, #0x24
  00430	e89d6000	 ldmia       sp, {sp, lr}
  00434	e12fff1e	 bx          lr
  00438		 |$M41667|

			 ENDP  ; |FlashFormatNANDFlash|

	EXPORT	|FlashReadNAND|
	IMPORT	|__rt_udiv|

  00078			 AREA	 |.pdata|, PDATA
|$T41676| DCD	|$LN13@FlashReadN@2|
	DCD	0x40005004
; Function compile flags: /Odtp

  00438			 AREA	 |.text|, CODE, ARM

  00438		 |FlashReadNAND| PROC

; 399  : {

  00438		 |$LN13@FlashReadN@2|
  00438	e1a0c00d	 mov         r12, sp
  0043c	e92d0007	 stmdb       sp!, {r0 - r2}
  00440	e92d5000	 stmdb       sp!, {r12, lr}
  00444	e24dd034	 sub         sp, sp, #0x34
  00448		 |$M41673|

; 400  :     BOOL rc = FALSE;

  00448	e3a03000	 mov         r3, #0
  0044c	e58d3010	 str         r3, [sp, #0x10]

; 401  :     FlashInfo flashInfo;
; 402  :     BLOCK_ID block = startBlock;

  00450	e59d303c	 ldr         r3, [sp, #0x3C]
  00454	e58d3024	 str         r3, [sp, #0x24]

; 403  :     DWORD i=0;

  00458	e3a03000	 mov         r3, #0
  0045c	e58d3014	 str         r3, [sp, #0x14]

; 404  :     DWORD index=0;

  00460	e3a03000	 mov         r3, #0
  00464	e58d3018	 str         r3, [sp, #0x18]

; 405  :     DWORD dwReadSize=size;    

  00468	e59d3044	 ldr         r3, [sp, #0x44]
  0046c	e58d3020	 str         r3, [sp, #0x20]

; 406  :     UINT8 *lpBuffer=pDataBuffer;        

  00470	e59d3040	 ldr         r3, [sp, #0x40]
  00474	e58d301c	 str         r3, [sp, #0x1C]

; 407  :     
; 408  :     if (!FMD_GetInfo(&flashInfo)) 

  00478	e28d0000	 add         r0, sp, #0
  0047c	eb000000	 bl          FMD_GetInfo
  00480	e58d002c	 str         r0, [sp, #0x2C]
  00484	e59d302c	 ldr         r3, [sp, #0x2C]
  00488	e3530000	 cmp         r3, #0
  0048c	1a000002	 bne         |$LN8@FlashReadN@2|

; 409  :     {
; 410  :         //KITLOutputDebugString("ERROR: FlashReadNAND: FMD_GetInfo call failed!\r\n");
; 411  :         return rc;

  00490	e59d3010	 ldr         r3, [sp, #0x10]
  00494	e58d3028	 str         r3, [sp, #0x28]
  00498	ea000032	 b           |$LN9@FlashReadN@2|
  0049c		 |$LN8@FlashReadN@2|

; 412  :     }
; 413  : 
; 414  :     if (!lpBuffer)

  0049c	e59d301c	 ldr         r3, [sp, #0x1C]
  004a0	e3530000	 cmp         r3, #0
  004a4	1a000003	 bne         |$LN7@FlashReadN@2|

; 415  :     {
; 416  :         //KITLOutputDebugString("ERROR: no buffer for configuration data!\r\n");
; 417  :         return rc;

  004a8	e59d3010	 ldr         r3, [sp, #0x10]
  004ac	e58d3028	 str         r3, [sp, #0x28]
  004b0	ea00002c	 b           |$LN9@FlashReadN@2|

; 418  :     }
; 419  :     else

  004b4	ea000029	 b           |$LN6@FlashReadN@2|
  004b8		 |$LN7@FlashReadN@2|

; 420  :     {
; 421  :       
; 422  :     	  i=(size/flashInfo.dwBytesPerBlock);

  004b8	e59d1044	 ldr         r1, [sp, #0x44]
  004bc	e59d0008	 ldr         r0, [sp, #8]
  004c0	eb000000	 bl          __rt_udiv
  004c4	e58d0014	 str         r0, [sp, #0x14]

; 423  : 
; 424  :     	  if(size%flashInfo.dwBytesPerBlock)

  004c8	e59d1044	 ldr         r1, [sp, #0x44]
  004cc	e59d0008	 ldr         r0, [sp, #8]
  004d0	eb000000	 bl          __rt_udiv
  004d4	e3510000	 cmp         r1, #0
  004d8	0a000002	 beq         |$LN5@FlashReadN@2|

; 425  :     	  i++;	

  004dc	e59d3014	 ldr         r3, [sp, #0x14]
  004e0	e2833001	 add         r3, r3, #1
  004e4	e58d3014	 str         r3, [sp, #0x14]
  004e8		 |$LN5@FlashReadN@2|

; 426  :     	  
; 427  :     //	  RETAILMSG(1, (TEXT("\n\rStart block %d, read  %d / %d blocks BytesPerBlock(%d)\r\n\r\n"),startBlock,(index+1),i,flashInfo.dwBytesPerBlock));
; 428  :     	  
; 429  :         for(index=0; index < i ; index++)

  004e8	e3a03000	 mov         r3, #0
  004ec	e58d3018	 str         r3, [sp, #0x18]
  004f0	ea000002	 b           |$LN4@FlashReadN@2|
  004f4		 |$LN3@FlashReadN@2|
  004f4	e59d3018	 ldr         r3, [sp, #0x18]
  004f8	e2833001	 add         r3, r3, #1
  004fc	e58d3018	 str         r3, [sp, #0x18]
  00500		 |$LN4@FlashReadN@2|
  00500	e59d2018	 ldr         r2, [sp, #0x18]
  00504	e59d3014	 ldr         r3, [sp, #0x14]
  00508	e1520003	 cmp         r2, r3
  0050c	2a000013	 bcs         |$LN2@FlashReadN@2|

; 430  :     	  {
; 431  :     	  	
; 432  :     	  	 ////KITLOutputDebugString("\n\rStart block %d, read  %d / %d blocks\r\n",startBlock,(index+1),i );
; 433  :     	  	  
; 434  :     	  	  lpBuffer=pDataBuffer+(flashInfo.dwBytesPerBlock*index);            

  00510	e59d1008	 ldr         r1, [sp, #8]
  00514	e59d3018	 ldr         r3, [sp, #0x18]
  00518	e0020391	 mul         r2, r1, r3
  0051c	e59d3040	 ldr         r3, [sp, #0x40]
  00520	e0833002	 add         r3, r3, r2
  00524	e58d301c	 str         r3, [sp, #0x1C]

; 435  :     	  	 
; 436  :     	  //	 RETAILMSG (1, (TEXT("\n\rFlashReadNAND data address (%x)\r\n"),lpBuffer));
; 437  :     	  	 
; 438  :             if(!ReadBlock((startBlock+index), lpBuffer, &flashInfo))

  00528	e28d2000	 add         r2, sp, #0
  0052c	e59d101c	 ldr         r1, [sp, #0x1C]
  00530	e59d003c	 ldr         r0, [sp, #0x3C]
  00534	e59d3018	 ldr         r3, [sp, #0x18]
  00538	e0800003	 add         r0, r0, r3
  0053c	eb000000	 bl          ReadBlock
  00540	e58d0030	 str         r0, [sp, #0x30]
  00544	e59d3030	 ldr         r3, [sp, #0x30]
  00548	e3530000	 cmp         r3, #0
  0054c	1a000002	 bne         |$LN1@FlashReadN@2|

; 439  :         {
; 440  :             // When block read fail, there isn't much we can do more
; 441  :                //KITLOutputDebugString("ERROR: FlashRead: Failed read block %d from flash\r\n", (startBlock+index));
; 442  :           //     RETAILMSG (1, (TEXT("\n\rERROR: FlashRead: Failed read block %d from flash\r\n"),startBlock+index));
; 443  :                return FALSE;

  00550	e3a03000	 mov         r3, #0
  00554	e58d3028	 str         r3, [sp, #0x28]
  00558	ea000002	 b           |$LN9@FlashReadN@2|
  0055c		 |$LN1@FlashReadN@2|

; 444  :         }
; 445  :        } 

  0055c	eaffffe4	 b           |$LN3@FlashReadN@2|
  00560		 |$LN2@FlashReadN@2|
  00560		 |$LN6@FlashReadN@2|

; 446  :            
; 447  :          	
; 448  :     }
; 449  :  //    RETAILMSG (1, (TEXT("\n\r---FlashReadNAND \r\n")));
; 450  :     return (TRUE);

  00560	e3a03001	 mov         r3, #1
  00564	e58d3028	 str         r3, [sp, #0x28]
  00568		 |$LN9@FlashReadN@2|

; 451  : }

  00568	e59d0028	 ldr         r0, [sp, #0x28]
  0056c	e28dd034	 add         sp, sp, #0x34
  00570	e89d6000	 ldmia       sp, {sp, lr}
  00574	e12fff1e	 bx          lr
  00578		 |$M41674|

			 ENDP  ; |FlashReadNAND|


  00080			 AREA	 |.pdata|, PDATA
|$T41682| DCD	|$LN11@ReadBlock|
	DCD	0x40003c04
; Function compile flags: /Odtp

  00578			 AREA	 |.text|, CODE, ARM

  00578		 |ReadBlock| PROC

; 234  : {

  00578		 |$LN11@ReadBlock|
  00578	e1a0c00d	 mov         r12, sp
  0057c	e92d0007	 stmdb       sp!, {r0 - r2}
  00580	e92d5000	 stmdb       sp!, {r12, lr}
  00584	e24dd024	 sub         sp, sp, #0x24
  00588		 |$M41679|

; 235  :     BOOL rc = FALSE;

  00588	e3a03000	 mov         r3, #0
  0058c	e58d3008	 str         r3, [sp, #8]

; 236  :     UINT32 count;
; 237  :     UINT32 sectorSize, sectorsPerBlock;
; 238  :     SectorInfo sectorInfo;
; 239  :     SECTOR_ADDR sector;
; 240  : 
; 241  :     // Get flash info
; 242  :     sectorSize = pFlashInfo->wDataBytesPerSector;

  00590	e59d3034	 ldr         r3, [sp, #0x34]
  00594	e283300e	 add         r3, r3, #0xE
  00598	e1d330b0	 ldrh        r3, [r3]
  0059c	e58d3000	 str         r3, [sp]

; 243  :     sectorsPerBlock = pFlashInfo->wSectorsPerBlock;

  005a0	e59d3034	 ldr         r3, [sp, #0x34]
  005a4	e283300c	 add         r3, r3, #0xC
  005a8	e1d330b0	 ldrh        r3, [r3]
  005ac	e58d300c	 str         r3, [sp, #0xC]

; 244  : 
; 245  :     // Read data from block
; 246  :     if (pDataBuffer != NULL)

  005b0	e59d3030	 ldr         r3, [sp, #0x30]
  005b4	e3530000	 cmp         r3, #0
  005b8	0a000021	 beq         |$LN6@ReadBlock|

; 247  :     {
; 248  :        // RETAILMSG(1, (TEXT("\n\r+++ReadBlock\r\n")));
; 249  :         sector = block * sectorsPerBlock;

  005bc	e59d202c	 ldr         r2, [sp, #0x2C]
  005c0	e59d300c	 ldr         r3, [sp, #0xC]
  005c4	e0030392	 mul         r3, r2, r3
  005c8	e58d3010	 str         r3, [sp, #0x10]

; 250  :         for(count = 0; count < sectorsPerBlock; count++)

  005cc	e3a03000	 mov         r3, #0
  005d0	e58d3004	 str         r3, [sp, #4]
  005d4	ea000002	 b           |$LN5@ReadBlock|
  005d8		 |$LN4@ReadBlock|
  005d8	e59d3004	 ldr         r3, [sp, #4]
  005dc	e2833001	 add         r3, r3, #1
  005e0	e58d3004	 str         r3, [sp, #4]
  005e4		 |$LN5@ReadBlock|
  005e4	e59d2004	 ldr         r2, [sp, #4]
  005e8	e59d300c	 ldr         r3, [sp, #0xC]
  005ec	e1520003	 cmp         r2, r3
  005f0	2a000012	 bcs         |$LN3@ReadBlock|

; 251  :         {
; 252  :             ////KITLOutputDebugString("FMD_ReadSector: sector=%d\r\n", sector);
; 253  :             if (!FlashReadSector(sector, pDataBuffer, &sectorInfo))

  005f4	e28d2014	 add         r2, sp, #0x14
  005f8	e59d1030	 ldr         r1, [sp, #0x30]
  005fc	e59d0010	 ldr         r0, [sp, #0x10]
  00600	eb000000	 bl          FlashReadSector
  00604	e58d0020	 str         r0, [sp, #0x20]
  00608	e59d3020	 ldr         r3, [sp, #0x20]
  0060c	e3530000	 cmp         r3, #0
  00610	1a000002	 bne         |$LN2@ReadBlock|

; 254  :             {
; 255  :                 // When block read fail, there isn't much we can do more
; 256  :                 //KITLOutputDebugString("ERROR: ReadBlock: Failed read sector %d from flash\r\n",  sector);
; 257  :              //   RETAILMSG(1, (TEXT("\n\rReadBlock: Failed read sector %d from flash\r\n")sector));
; 258  :                 return rc;

  00614	e59d3008	 ldr         r3, [sp, #8]
  00618	e58d301c	 str         r3, [sp, #0x1C]
  0061c	ea00000d	 b           |$LN7@ReadBlock|
  00620		 |$LN2@ReadBlock|

; 259  :             }
; 260  :             // Move to next sector
; 261  :             sector++;

  00620	e59d3010	 ldr         r3, [sp, #0x10]
  00624	e2833001	 add         r3, r3, #1
  00628	e58d3010	 str         r3, [sp, #0x10]

; 262  :             pDataBuffer += sectorSize;

  0062c	e59d2030	 ldr         r2, [sp, #0x30]
  00630	e59d3000	 ldr         r3, [sp]
  00634	e0823003	 add         r3, r2, r3
  00638	e58d3030	 str         r3, [sp, #0x30]

; 263  :         }

  0063c	eaffffe5	 b           |$LN4@ReadBlock|
  00640		 |$LN3@ReadBlock|

; 264  :     }
; 265  :     else

  00640	ea000002	 b           |$LN1@ReadBlock|
  00644		 |$LN6@ReadBlock|

; 266  :         return rc;

  00644	e59d3008	 ldr         r3, [sp, #8]
  00648	e58d301c	 str         r3, [sp, #0x1C]
  0064c	ea000001	 b           |$LN7@ReadBlock|
  00650		 |$LN1@ReadBlock|

; 267  :     
; 268  :   //  RETAILMSG(1, (TEXT("--ReadBlock\r\n")));
; 269  :     
; 270  :     return TRUE;

  00650	e3a03001	 mov         r3, #1
  00654	e58d301c	 str         r3, [sp, #0x1C]
  00658		 |$LN7@ReadBlock|

; 271  : }

  00658	e59d001c	 ldr         r0, [sp, #0x1C]
  0065c	e28dd024	 add         sp, sp, #0x24
  00660	e89d6000	 ldmia       sp, {sp, lr}
  00664	e12fff1e	 bx          lr
  00668		 |$M41680|

			 ENDP  ; |ReadBlock|

	EXPORT	|FlashWriteNAND|

  00088			 AREA	 |.pdata|, PDATA
|$T41688| DCD	|$LN19@FlashWrite@2|
	DCD	0x40006204
; Function compile flags: /Odtp

  00668			 AREA	 |.text|, CODE, ARM

  00668		 |FlashWriteNAND| PROC

; 454  : {

  00668		 |$LN19@FlashWrite@2|
  00668	e1a0c00d	 mov         r12, sp
  0066c	e92d0007	 stmdb       sp!, {r0 - r2}
  00670	e92d5000	 stmdb       sp!, {r12, lr}
  00674	e24dd038	 sub         sp, sp, #0x38
  00678		 |$M41685|

; 455  :     BOOL rc = FALSE;

  00678	e3a03000	 mov         r3, #0
  0067c	e58d3014	 str         r3, [sp, #0x14]

; 456  :     FlashInfo flashInfo;
; 457  :     UINT32 blockSize;
; 458  :     BLOCK_ID block = startBlock; 

  00680	e59d3040	 ldr         r3, [sp, #0x40]
  00684	e58d3020	 str         r3, [sp, #0x20]

; 459  :     UINT32 count, numBlocksProgram, i;
; 460  : 
; 461  :     if (pDataBuffer == NULL)

  00688	e59d3044	 ldr         r3, [sp, #0x44]
  0068c	e3530000	 cmp         r3, #0
  00690	1a000002	 bne         |$LN14@FlashWrite@2|

; 462  :     {
; 463  :         //KITLOutputDebugString("ERROR: no buffer for configuration data!\r\n");
; 464  :         return rc; 

  00694	e59d3014	 ldr         r3, [sp, #0x14]
  00698	e58d3028	 str         r3, [sp, #0x28]
  0069c	ea00004f	 b           |$LN15@FlashWrite@2|
  006a0		 |$LN14@FlashWrite@2|

; 465  :     }    
; 466  :     
; 467  :     // Get flash info
; 468  :     if (!FMD_GetInfo(&flashInfo)) 

  006a0	e28d0004	 add         r0, sp, #4
  006a4	eb000000	 bl          FMD_GetInfo
  006a8	e58d002c	 str         r0, [sp, #0x2C]
  006ac	e59d302c	 ldr         r3, [sp, #0x2C]
  006b0	e3530000	 cmp         r3, #0
  006b4	1a000002	 bne         |$LN13@FlashWrite@2|

; 469  :     {
; 470  :         //KITLOutputDebugString("ERROR: FlashWrite: FMD_GetInfo call failed!\r\n");
; 471  :         return rc;

  006b8	e59d3014	 ldr         r3, [sp, #0x14]
  006bc	e58d3028	 str         r3, [sp, #0x28]
  006c0	ea000046	 b           |$LN15@FlashWrite@2|
  006c4		 |$LN13@FlashWrite@2|

; 472  :     }
; 473  : 
; 474  :     blockSize = flashInfo.dwBytesPerBlock;

  006c4	e59d300c	 ldr         r3, [sp, #0xC]
  006c8	e58d3024	 str         r3, [sp, #0x24]

; 475  : 
; 476  :     numBlocksProgram = size / blockSize;

  006cc	e59d1048	 ldr         r1, [sp, #0x48]
  006d0	e59d0024	 ldr         r0, [sp, #0x24]
  006d4	eb000000	 bl          __rt_udiv
  006d8	e58d001c	 str         r0, [sp, #0x1C]

; 477  :     if ((numBlocksProgram == 0) || (size%blockSize != 0)) numBlocksProgram++;

  006dc	e59d301c	 ldr         r3, [sp, #0x1C]
  006e0	e3530000	 cmp         r3, #0
  006e4	0a000004	 beq         |$LN11@FlashWrite@2|
  006e8	e59d1048	 ldr         r1, [sp, #0x48]
  006ec	e59d0024	 ldr         r0, [sp, #0x24]
  006f0	eb000000	 bl          __rt_udiv
  006f4	e3510000	 cmp         r1, #0
  006f8	0a000002	 beq         |$LN12@FlashWrite@2|
  006fc		 |$LN11@FlashWrite@2|
  006fc	e59d301c	 ldr         r3, [sp, #0x1C]
  00700	e2833001	 add         r3, r3, #1
  00704	e58d301c	 str         r3, [sp, #0x1C]
  00708		 |$LN12@FlashWrite@2|

; 478  :     
; 479  : 
; 480  :     ////KITLOutputDebugString("FlashWrite: blockSize = 0x%x\r\n", blockSize);
; 481  :     ////KITLOutputDebugString("FlashWrite: start writing at block %d\r\n", block);
; 482  :     ////KITLOutputDebugString("FlashWrite: numBlocksProgram: %d\r\n", numBlocksProgram);
; 483  : 
; 484  :     // Write image down to flash
; 485  :     for (count = 0; count < numBlocksProgram; count++)

  00708	e3a03000	 mov         r3, #0
  0070c	e58d3000	 str         r3, [sp]
  00710	ea000002	 b           |$LN10@FlashWrite@2|
  00714		 |$LN9@FlashWrite@2|
  00714	e59d3000	 ldr         r3, [sp]
  00718	e2833001	 add         r3, r3, #1
  0071c	e58d3000	 str         r3, [sp]
  00720		 |$LN10@FlashWrite@2|
  00720	e59d2000	 ldr         r2, [sp]
  00724	e59d301c	 ldr         r3, [sp, #0x1C]
  00728	e1520003	 cmp         r2, r3
  0072c	2a000029	 bcs         |$LN8@FlashWrite@2|

; 486  :     {
; 487  :        // //KITLOutputDebugString(".");
; 488  :         // Scan for bad block in bad block table
; 489  :         
; 490  :         i = 3;

  00730	e3a03003	 mov         r3, #3
  00734	e58d3018	 str         r3, [sp, #0x18]
  00738		 |$LN7@FlashWrite@2|

; 491  :         do 
; 492  :         {
; 493  :             ////KITLOutputDebugString("FlashWriteNAND: pData: %x\r\n", pDataBuffer);
; 494  : 
; 495  :             if (WriteBlock(block, pDataBuffer, &flashInfo, FALSE) == NULL)

  00738	e3a03000	 mov         r3, #0
  0073c	e28d2004	 add         r2, sp, #4
  00740	e59d1044	 ldr         r1, [sp, #0x44]
  00744	e59d0020	 ldr         r0, [sp, #0x20]
  00748	eb000000	 bl          WriteBlock
  0074c	e58d0030	 str         r0, [sp, #0x30]
  00750	e59d3030	 ldr         r3, [sp, #0x30]
  00754	e3530000	 cmp         r3, #0
  00758	1a00000c	 bne         |$LN4@FlashWrite@2|

; 496  :             {   
; 497  :                 // Let us try three times
; 498  : 
; 499  :                 if (!FlashEraseBlock(block)) //Bad block will be relocated when erase

  0075c	e59d0020	 ldr         r0, [sp, #0x20]
  00760	eb000000	 bl          FlashEraseBlock
  00764	e58d0034	 str         r0, [sp, #0x34]
  00768	e59d3034	 ldr         r3, [sp, #0x34]
  0076c	e3530000	 cmp         r3, #0
  00770	1a000002	 bne         |$LN3@FlashWrite@2|

; 500  :                     return rc;

  00774	e59d3014	 ldr         r3, [sp, #0x14]
  00778	e58d3028	 str         r3, [sp, #0x28]
  0077c	ea000017	 b           |$LN15@FlashWrite@2|
  00780		 |$LN3@FlashWrite@2|

; 501  :                 i--;

  00780	e59d3018	 ldr         r3, [sp, #0x18]
  00784	e2433001	 sub         r3, r3, #1
  00788	e58d3018	 str         r3, [sp, #0x18]

; 502  :             }
; 503  :             else

  0078c	ea000000	 b           |$LN2@FlashWrite@2|
  00790		 |$LN4@FlashWrite@2|

; 504  :                 break;

  00790	ea000002	 b           |$LN5@FlashWrite@2|
  00794		 |$LN2@FlashWrite@2|

; 505  :         } while (i > 0);

  00794	e59d3018	 ldr         r3, [sp, #0x18]
  00798	e3530000	 cmp         r3, #0
  0079c	8affffe5	 bhi         |$LN7@FlashWrite@2|
  007a0		 |$LN5@FlashWrite@2|

; 506  : 
; 507  :         if (i == 0)

  007a0	e59d3018	 ldr         r3, [sp, #0x18]
  007a4	e3530000	 cmp         r3, #0
  007a8	1a000002	 bne         |$LN1@FlashWrite@2|

; 508  :         {
; 509  :             //KITLOutputDebugString("ERROR: FlashWrite: failed!\r\n");
; 510  :             return rc;

  007ac	e59d3014	 ldr         r3, [sp, #0x14]
  007b0	e58d3028	 str         r3, [sp, #0x28]
  007b4	ea000009	 b           |$LN15@FlashWrite@2|
  007b8		 |$LN1@FlashWrite@2|

; 511  :         }
; 512  :         
; 513  :         block++;

  007b8	e59d3020	 ldr         r3, [sp, #0x20]
  007bc	e2833001	 add         r3, r3, #1
  007c0	e58d3020	 str         r3, [sp, #0x20]

; 514  :         pDataBuffer += blockSize;

  007c4	e59d2044	 ldr         r2, [sp, #0x44]
  007c8	e59d3024	 ldr         r3, [sp, #0x24]
  007cc	e0823003	 add         r3, r2, r3
  007d0	e58d3044	 str         r3, [sp, #0x44]

; 515  :     }

  007d4	eaffffce	 b           |$LN9@FlashWrite@2|
  007d8		 |$LN8@FlashWrite@2|

; 516  : 
; 517  :    // //KITLOutputDebugString("\r\nFlashWrite: Image written\r\n");
; 518  :    
; 519  :     return TRUE;

  007d8	e3a03001	 mov         r3, #1
  007dc	e58d3028	 str         r3, [sp, #0x28]
  007e0		 |$LN15@FlashWrite@2|

; 520  : }

  007e0	e59d0028	 ldr         r0, [sp, #0x28]
  007e4	e28dd038	 add         sp, sp, #0x38
  007e8	e89d6000	 ldmia       sp, {sp, lr}
  007ec	e12fff1e	 bx          lr
  007f0		 |$M41686|

			 ENDP  ; |FlashWriteNAND|

	IMPORT	|FMD_SetBlockStatus|
	IMPORT	|memset|
	IMPORT	|memcpy|

  00090			 AREA	 |.pdata|, PDATA
|$T41694| DCD	|$LN30@WriteBlock|
	DCD	0x4000bb04
; Function compile flags: /Odtp

  007f0			 AREA	 |.text|, CODE, ARM

  007f0		 |WriteBlock| PROC

; 283  : {   

  007f0		 |$LN30@WriteBlock|
  007f0	e1a0c00d	 mov         r12, sp
  007f4	e92d000f	 stmdb       sp!, {r0 - r3}
  007f8	e92d5000	 stmdb       sp!, {r12, lr}
  007fc	e24dd03c	 sub         sp, sp, #0x3C
  00800		 |$M41691|

; 284  :     UINT32 count;
; 285  :     UINT32 sectorSize, sectorsPerBlock;
; 286  :     SectorInfo sectorInfo;
; 287  :     SECTOR_ADDR sector;
; 288  :     UINT32 nextSectorSize;
; 289  : 	BOOL badBlock = FALSE;

  00800	e3a03000	 mov         r3, #0
  00804	e58d300c	 str         r3, [sp, #0xC]

; 290  : 	UINT32 attemptTimes = 0;

  00808	e3a03000	 mov         r3, #0
  0080c	e58d3014	 str         r3, [sp, #0x14]

; 291  : 
; 292  : 
; 293  :     // Get flash info
; 294  :     sectorSize = pFlashInfo->wDataBytesPerSector;

  00810	e59d304c	 ldr         r3, [sp, #0x4C]
  00814	e283300e	 add         r3, r3, #0xE
  00818	e1d330b0	 ldrh        r3, [r3]
  0081c	e58d3000	 str         r3, [sp]

; 295  :     sectorsPerBlock = pFlashInfo->wSectorsPerBlock;

  00820	e59d304c	 ldr         r3, [sp, #0x4C]
  00824	e283300c	 add         r3, r3, #0xC
  00828	e1d330b0	 ldrh        r3, [r3]
  0082c	e58d3008	 str         r3, [sp, #8]
  00830		 |$LN25@WriteBlock|

; 296  : 	//RETAILMSG (1, (TEXT("WriteBlock (%d)\r\n"),block));
; 297  : 	do{
; 298  : 		badBlock = FALSE;

  00830	e3a03000	 mov         r3, #0
  00834	e58d300c	 str         r3, [sp, #0xC]

; 299  : 		// Erase block
; 300  : 		if (!FlashEraseBlock(block))

  00838	e59d0044	 ldr         r0, [sp, #0x44]
  0083c	eb000000	 bl          FlashEraseBlock
  00840	e58d0030	 str         r0, [sp, #0x30]
  00844	e59d3030	 ldr         r3, [sp, #0x30]
  00848	e3530000	 cmp         r3, #0
  0084c	1a000002	 bne         |$LN22@WriteBlock|

; 301  : 		{
; 302  : 			//KITLOutputDebugString("ERROR: WriteBlock: Erase block %d failed!\r\n", block);
; 303  : 			//    //KITLOutputDebugString("WARNING: Would just try to write the block directly\r\n");
; 304  : 			return NULL;

  00850	e3a03000	 mov         r3, #0
  00854	e58d302c	 str         r3, [sp, #0x2C]
  00858	ea00009b	 b           |$LN26@WriteBlock|
  0085c		 |$LN22@WriteBlock|

; 305  : 		}
; 306  : 
; 307  : 		// Read data from block
; 308  : 		if (pDataBuffer != NULL)

  0085c	e59d3048	 ldr         r3, [sp, #0x48]
  00860	e3530000	 cmp         r3, #0
  00864	0a000084	 beq         |$LN21@WriteBlock|

; 309  : 		{
; 310  : 			sector = block * sectorsPerBlock;

  00868	e59d2044	 ldr         r2, [sp, #0x44]
  0086c	e59d3008	 ldr         r3, [sp, #8]
  00870	e0030392	 mul         r3, r2, r3
  00874	e58d3010	 str         r3, [sp, #0x10]

; 311  : 			for(count = 0; count < sectorsPerBlock; count++)

  00878	e3a03000	 mov         r3, #0
  0087c	e58d3004	 str         r3, [sp, #4]
  00880	ea000002	 b           |$LN20@WriteBlock|
  00884		 |$LN19@WriteBlock|
  00884	e59d3004	 ldr         r3, [sp, #4]
  00888	e2833001	 add         r3, r3, #1
  0088c	e58d3004	 str         r3, [sp, #4]
  00890		 |$LN20@WriteBlock|
  00890	e59d2004	 ldr         r2, [sp, #4]
  00894	e59d3008	 ldr         r3, [sp, #8]
  00898	e1520003	 cmp         r2, r3
  0089c	2a000075	 bcs         |$LN18@WriteBlock|

; 312  : 			{
; 313  : 				unsigned int i;
; 314  : 				BOOL allones = FALSE;

  008a0	e3a03000	 mov         r3, #0
  008a4	e58d3028	 str         r3, [sp, #0x28]

; 315  : 				////KITLOutputDebugString("-");
; 316  : 				// Prepare sector info
; 317  : 				if (fSectorInfo)

  008a8	e59d3050	 ldr         r3, [sp, #0x50]
  008ac	e3530000	 cmp         r3, #0
  008b0	0a00000e	 beq         |$LN17@WriteBlock|

; 318  : 				{
; 319  : 					memcpy(&sectorInfo, pDataBuffer+sectorSize,sizeof(SectorInfo));

  008b4	e3a02008	 mov         r2, #8
  008b8	e59d1048	 ldr         r1, [sp, #0x48]
  008bc	e59d3000	 ldr         r3, [sp]
  008c0	e0811003	 add         r1, r1, r3
  008c4	e28d001c	 add         r0, sp, #0x1C
  008c8	eb000000	 bl          memcpy

; 320  : 					// In case the BIN/DIO image accidentally sets bBadBlock to anything other than 0xFF...
; 321  : 					// (this will turn a good block bad!)
; 322  : 					if (sectorInfo.bBadBlock != 0xFF)

  008cc	e5dd3021	 ldrb        r3, [sp, #0x21]
  008d0	e35300ff	 cmp         r3, #0xFF
  008d4	0a000001	 beq         |$LN16@WriteBlock|

; 323  : 					{
; 324  : 						//KITLOutputDebugString("WARNING: Bad block byte is set (%B) on sector %d of block %d! Resetting to 0xFF.\r\n", sectorInfo.bBadBlock, count, block);
; 325  : 						sectorInfo.bBadBlock = 0xFF; 

  008d8	e3a030ff	 mov         r3, #0xFF
  008dc	e5cd3021	 strb        r3, [sp, #0x21]
  008e0		 |$LN16@WriteBlock|

; 326  : 					}
; 327  : 					nextSectorSize = sectorSize+sizeof(SectorInfo);

  008e0	e59d3000	 ldr         r3, [sp]
  008e4	e2833008	 add         r3, r3, #8
  008e8	e58d3018	 str         r3, [sp, #0x18]

; 328  : 				}
; 329  : 				else

  008ec	ea00000f	 b           |$LN15@WriteBlock|
  008f0		 |$LN17@WriteBlock|

; 330  : 				{               
; 331  : 					memset(&sectorInfo, 0xFF, sizeof(sectorInfo));

  008f0	e3a02008	 mov         r2, #8
  008f4	e3a010ff	 mov         r1, #0xFF
  008f8	e28d001c	 add         r0, sp, #0x1C
  008fc	eb000000	 bl          memset

; 332  : 					sectorInfo.bOEMReserved &= ~(OEM_BLOCK_READONLY|OEM_BLOCK_RESERVED);

  00900	e5dd3020	 ldrb        r3, [sp, #0x20]
  00904	e1a02003	 mov         r2, r3
  00908	e3e03003	 mvn         r3, #3
  0090c	e0023003	 and         r3, r2, r3
  00910	e20330ff	 and         r3, r3, #0xFF
  00914	e5cd3020	 strb        r3, [sp, #0x20]

; 333  : 					sectorInfo.dwReserved1 = 0;

  00918	e3a03000	 mov         r3, #0
  0091c	e58d301c	 str         r3, [sp, #0x1C]

; 334  : 					sectorInfo.wReserved2 = 0;

  00920	e3a03000	 mov         r3, #0
  00924	e1cd32b2	 strh        r3, [sp, #0x22]

; 335  : 					nextSectorSize = sectorSize;

  00928	e59d3000	 ldr         r3, [sp]
  0092c	e58d3018	 str         r3, [sp, #0x18]
  00930		 |$LN15@WriteBlock|

; 336  : 				}
; 337  : 
; 338  : 				//Skip write operation for BBT reserved area and OS Image partision if all data are 'FF'
; 339  : 				//Thus we could be in accordance with XDB
; 340  : 				if(((sector >= (sectorsPerBlock - LB_RELOCATION_TABLE_NUM))&&(sector < sectorsPerBlock)) || (block >= LB_FLASH_BLOCK_OS_START))

  00930	e59d3008	 ldr         r3, [sp, #8]
  00934	e243203e	 sub         r2, r3, #0x3E
  00938	e59d3010	 ldr         r3, [sp, #0x10]
  0093c	e1530002	 cmp         r3, r2
  00940	3a000003	 bcc         |$LN12@WriteBlock|
  00944	e59d2010	 ldr         r2, [sp, #0x10]
  00948	e59d3008	 ldr         r3, [sp, #8]
  0094c	e1520003	 cmp         r2, r3
  00950	3a000002	 bcc         |$LN13@WriteBlock|
  00954		 |$LN12@WriteBlock|
  00954	e59d3044	 ldr         r3, [sp, #0x44]
  00958	e3530006	 cmp         r3, #6
  0095c	3a000015	 bcc         |$LN14@WriteBlock|
  00960		 |$LN13@WriteBlock|

; 341  : 				{
; 342  : 					allones = TRUE;

  00960	e3a03001	 mov         r3, #1
  00964	e58d3028	 str         r3, [sp, #0x28]

; 343  : 				for(i=0;i<nextSectorSize;i++)

  00968	e3a03000	 mov         r3, #0
  0096c	e58d3024	 str         r3, [sp, #0x24]
  00970	ea000002	 b           |$LN11@WriteBlock|
  00974		 |$LN10@WriteBlock|
  00974	e59d3024	 ldr         r3, [sp, #0x24]
  00978	e2833001	 add         r3, r3, #1
  0097c	e58d3024	 str         r3, [sp, #0x24]
  00980		 |$LN11@WriteBlock|
  00980	e59d2024	 ldr         r2, [sp, #0x24]
  00984	e59d3018	 ldr         r3, [sp, #0x18]
  00988	e1520003	 cmp         r2, r3
  0098c	2a000009	 bcs         |$LN9@WriteBlock|

; 344  : 				{
; 345  : 					if ((*(pDataBuffer+i))!=0xff)

  00990	e59d2048	 ldr         r2, [sp, #0x48]
  00994	e59d3024	 ldr         r3, [sp, #0x24]
  00998	e0823003	 add         r3, r2, r3
  0099c	e5d33000	 ldrb        r3, [r3]
  009a0	e35300ff	 cmp         r3, #0xFF
  009a4	0a000002	 beq         |$LN8@WriteBlock|

; 346  : 					{
; 347  : 						allones = FALSE;

  009a8	e3a03000	 mov         r3, #0
  009ac	e58d3028	 str         r3, [sp, #0x28]

; 348  : 						break;

  009b0	ea000000	 b           |$LN9@WriteBlock|
  009b4		 |$LN8@WriteBlock|

; 349  : 					}
; 350  : 				}

  009b4	eaffffee	 b           |$LN10@WriteBlock|
  009b8		 |$LN9@WriteBlock|
  009b8		 |$LN14@WriteBlock|

; 351  : 				}
; 352  : 
; 353  : 				if (!allones) 

  009b8	e59d3028	 ldr         r3, [sp, #0x28]
  009bc	e3530000	 cmp         r3, #0
  009c0	1a000024	 bne         |$LN7@WriteBlock|

; 354  : 				{
; 355  : 					// Mark the Sector as Write in Progress
; 356  : 					sectorInfo.wReserved2 &= ~SECTOR_WRITE_IN_PROGRESS;

  009c4	e1dd32b2	 ldrh        r3, [sp, #0x22]
  009c8	e1a02003	 mov         r2, r3
  009cc	e3e03002	 mvn         r3, #2
  009d0	e0023003	 and         r3, r2, r3
  009d4	e1a03803	 mov         r3, r3, lsl #16
  009d8	e1a03823	 mov         r3, r3, lsr #16
  009dc	e1cd32b2	 strh        r3, [sp, #0x22]

; 357  : 					if (!FlashWriteSector(sector, NULL, &sectorInfo))

  009e0	e28d201c	 add         r2, sp, #0x1C
  009e4	e3a01000	 mov         r1, #0
  009e8	e59d0010	 ldr         r0, [sp, #0x10]
  009ec	eb000000	 bl          FlashWriteSector
  009f0	e58d0034	 str         r0, [sp, #0x34]
  009f4	e59d3034	 ldr         r3, [sp, #0x34]
  009f8	e3530000	 cmp         r3, #0
  009fc	1a000004	 bne         |$LN6@WriteBlock|

; 358  : 					{
; 359  : 						// Write failed, mark block as bad
; 360  : 						FMD_SetBlockStatus(block, BLOCK_STATUS_BAD);

  00a00	e3a01002	 mov         r1, #2
  00a04	e59d0044	 ldr         r0, [sp, #0x44]
  00a08	eb000000	 bl          FMD_SetBlockStatus

; 361  : 						//KITLOutputDebugString("ERROR: WriteBlock: Failed write sector %d to flash\r\n", sector);
; 362  : 						badBlock = TRUE;

  00a0c	e3a03001	 mov         r3, #1
  00a10	e58d300c	 str         r3, [sp, #0xC]
  00a14		 |$LN6@WriteBlock|

; 363  : 					}
; 364  : 					// Mark the Sector as Completed if success
; 365  : 					sectorInfo.wReserved2 &= ~SECTOR_WRITE_COMPLETED;

  00a14	e1dd32b2	 ldrh        r3, [sp, #0x22]
  00a18	e1a02003	 mov         r2, r3
  00a1c	e3e03004	 mvn         r3, #4
  00a20	e0023003	 and         r3, r2, r3
  00a24	e1a03803	 mov         r3, r3, lsl #16
  00a28	e1a03823	 mov         r3, r3, lsr #16
  00a2c	e1cd32b2	 strh        r3, [sp, #0x22]

; 366  : 
; 367  : 					if (!FlashWriteSector(sector, pDataBuffer, &sectorInfo))

  00a30	e28d201c	 add         r2, sp, #0x1C
  00a34	e59d1048	 ldr         r1, [sp, #0x48]
  00a38	e59d0010	 ldr         r0, [sp, #0x10]
  00a3c	eb000000	 bl          FlashWriteSector
  00a40	e58d0038	 str         r0, [sp, #0x38]
  00a44	e59d3038	 ldr         r3, [sp, #0x38]
  00a48	e3530000	 cmp         r3, #0
  00a4c	1a000001	 bne         |$LN5@WriteBlock|

; 368  : 					{
; 369  : 						//KITLOutputDebugString("ERROR: WriteBlock: Failed write sector %d to flash\r\n", sector);
; 370  : 						badBlock = TRUE;

  00a50	e3a03001	 mov         r3, #1
  00a54	e58d300c	 str         r3, [sp, #0xC]
  00a58		 |$LN5@WriteBlock|
  00a58		 |$LN7@WriteBlock|

; 371  : 					}
; 372  : 				}
; 373  : 				else
; 374  : 				{
; 375  : 					////KITLOutputDebugString("INFO: WriteBlock: all-one write sector %d to flash\r\n", sector);
; 376  : 					//dumpData((char *)(pDataBuffer+sectorSize), 8, 0);
; 377  : 					// Do nothing here. Don't program this page. Just skip it.
; 378  : 				}
; 379  : 
; 380  : 				//Move to next sector
; 381  : 				sector++;

  00a58	e59d3010	 ldr         r3, [sp, #0x10]
  00a5c	e2833001	 add         r3, r3, #1
  00a60	e58d3010	 str         r3, [sp, #0x10]

; 382  : 				pDataBuffer += nextSectorSize;

  00a64	e59d2048	 ldr         r2, [sp, #0x48]
  00a68	e59d3018	 ldr         r3, [sp, #0x18]
  00a6c	e0823003	 add         r3, r2, r3
  00a70	e58d3048	 str         r3, [sp, #0x48]

; 383  : 			}

  00a74	eaffff82	 b           |$LN19@WriteBlock|
  00a78		 |$LN18@WriteBlock|

; 384  : 		}
; 385  : 		else

  00a78	ea000002	 b           |$LN3@WriteBlock|
  00a7c		 |$LN21@WriteBlock|

; 386  : 			return NULL;

  00a7c	e3a03000	 mov         r3, #0
  00a80	e58d302c	 str         r3, [sp, #0x2C]
  00a84	ea000010	 b           |$LN26@WriteBlock|
  00a88		 |$LN3@WriteBlock|

; 387  : 		if(badBlock)

  00a88	e59d300c	 ldr         r3, [sp, #0xC]
  00a8c	e3530000	 cmp         r3, #0
  00a90	0a000008	 beq         |$LN2@WriteBlock|

; 388  : 		{
; 389  : 			attemptTimes++;

  00a94	e59d3014	 ldr         r3, [sp, #0x14]
  00a98	e2833001	 add         r3, r3, #1
  00a9c	e58d3014	 str         r3, [sp, #0x14]

; 390  : 			if(attemptTimes >= NAND_ATTEMPT_NUMBER)

  00aa0	e59d3014	 ldr         r3, [sp, #0x14]
  00aa4	e3530003	 cmp         r3, #3
  00aa8	3a000002	 bcc         |$LN1@WriteBlock|

; 391  : 				return NULL;

  00aac	e3a03000	 mov         r3, #0
  00ab0	e58d302c	 str         r3, [sp, #0x2C]
  00ab4	ea000004	 b           |$LN26@WriteBlock|
  00ab8		 |$LN1@WriteBlock|
  00ab8		 |$LN2@WriteBlock|

; 392  : 		}
; 393  : 	}while(badBlock);

  00ab8	e59d300c	 ldr         r3, [sp, #0xC]
  00abc	e3530000	 cmp         r3, #0
  00ac0	1affff5a	 bne         |$LN25@WriteBlock|

; 394  :     
; 395  :     return pDataBuffer;

  00ac4	e59d3048	 ldr         r3, [sp, #0x48]
  00ac8	e58d302c	 str         r3, [sp, #0x2C]
  00acc		 |$LN26@WriteBlock|

; 396  : }

  00acc	e59d002c	 ldr         r0, [sp, #0x2C]
  00ad0	e28dd03c	 add         sp, sp, #0x3C
  00ad4	e89d6000	 ldmia       sp, {sp, lr}
  00ad8	e12fff1e	 bx          lr
  00adc		 |$M41692|

			 ENDP  ; |WriteBlock|

	EXPORT	|??_C@_1EA@PDHBGDDH@?$AA?6?$AA?$AN?$AAW?$AAr?$AAi?$AAt?$AAe?$AAN?$AAa?$AAn?$AAd?$AA?5?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAd?$AAo?$AAn?$AAe?$AA?6?$AA?$AN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|WriteDataToFlash|
	IMPORT	|free|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|malloc|

  00098			 AREA	 |.pdata|, PDATA
|$T41700| DCD	|$LN15@WriteDataT|
	DCD	0x40008c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@PDHBGDDH@?$AA?6?$AA?$AN?$AAW?$AAr?$AAi?$AAt?$AAe?$AAN?$AAa?$AAn?$AAd?$AA?5?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAd?$AAo?$AAn?$AAe?$AA?6?$AA?$AN?$AA?$AA@| DCB 0xa
	DCB	0x0, 0xd, 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, "N", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "O"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " "
	DCB	0x0, "d", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, 0xa, 0x0, 0xd
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00adc			 AREA	 |.text|, CODE, ARM

  00adc		 |WriteDataToFlash| PROC

; 525  : {

  00adc		 |$LN15@WriteDataT|
  00adc	e1a0c00d	 mov         r12, sp
  00ae0	e92d0007	 stmdb       sp!, {r0 - r2}
  00ae4	e92d5000	 stmdb       sp!, {r12, lr}
  00ae8	e24dd034	 sub         sp, sp, #0x34
  00aec		 |$M41697|

; 526  : 	  BOOL  status=FALSE;

  00aec	e3a03000	 mov         r3, #0
  00af0	e58d3020	 str         r3, [sp, #0x20]

; 527  : 	
; 528  :     DWORD StartBlock=Offset/g_FlashInfo.dwBytesPerBlock;

  00af4	e59d103c	 ldr         r1, [sp, #0x3C]
  00af8	e59f3204	 ldr         r3, [pc, #0x204]
  00afc	e5930008	 ldr         r0, [r3, #8]
  00b00	eb000000	 bl          __rt_udiv
  00b04	e58d0010	 str         r0, [sp, #0x10]

; 529  :     
; 530  :     int iBlocks=DataSize/g_FlashInfo.dwBytesPerBlock;   

  00b08	e59d1040	 ldr         r1, [sp, #0x40]
  00b0c	e59f31f0	 ldr         r3, [pc, #0x1F0]
  00b10	e5930008	 ldr         r0, [r3, #8]
  00b14	eb000000	 bl          __rt_udiv
  00b18	e58d0018	 str         r0, [sp, #0x18]

; 531  :     
; 532  :     int i=0;    

  00b1c	e3a03000	 mov         r3, #0
  00b20	e58d3004	 str         r3, [sp, #4]

; 533  :     
; 534  :     PBYTE DataBuffer=NULL;

  00b24	e3a03000	 mov         r3, #0
  00b28	e58d301c	 str         r3, [sp, #0x1C]

; 535  :     
; 536  :     DWORD wBytes=(Offset%g_FlashInfo.dwBytesPerBlock);

  00b2c	e59d103c	 ldr         r1, [sp, #0x3C]
  00b30	e59f31cc	 ldr         r3, [pc, #0x1CC]
  00b34	e5930008	 ldr         r0, [r3, #8]
  00b38	eb000000	 bl          __rt_udiv
  00b3c	e58d1008	 str         r1, [sp, #8]

; 537  :     
; 538  :     
; 539  :     BYTE *lpTragetData=NULL;

  00b40	e3a03000	 mov         r3, #0
  00b44	e58d3014	 str         r3, [sp, #0x14]

; 540  :     
; 541  :     DWORD ShiftBytes,UpdateSize;  
; 542  :     
; 543  :     
; 544  :     
; 545  :     if(wBytes)

  00b48	e59d3008	 ldr         r3, [sp, #8]
  00b4c	e3530000	 cmp         r3, #0
  00b50	0a00001b	 beq         |$LN10@WriteDataT|

; 546  :     {
; 547  :     	
; 548  :     	UpdateSize=(DataSize+wBytes);

  00b54	e59d2040	 ldr         r2, [sp, #0x40]
  00b58	e59d3008	 ldr         r3, [sp, #8]
  00b5c	e0823003	 add         r3, r2, r3
  00b60	e58d3000	 str         r3, [sp]

; 549  :     	
; 550  :     	DataBuffer= (PBYTE)malloc( UpdateSize );

  00b64	e59d0000	 ldr         r0, [sp]
  00b68	eb000000	 bl          malloc
  00b6c	e58d0028	 str         r0, [sp, #0x28]
  00b70	e59d3028	 ldr         r3, [sp, #0x28]
  00b74	e58d301c	 str         r3, [sp, #0x1C]

; 551  :     	
; 552  :     	if(!DataBuffer)

  00b78	e59d301c	 ldr         r3, [sp, #0x1C]
  00b7c	e3530000	 cmp         r3, #0
  00b80	1a000002	 bne         |$LN9@WriteDataT|

; 553  :     	return FALSE;	

  00b84	e3a03000	 mov         r3, #0
  00b88	e58d3024	 str         r3, [sp, #0x24]
  00b8c	ea000058	 b           |$LN11@WriteDataT|
  00b90		 |$LN9@WriteDataT|

; 554  :     	
; 555  :         FlashReadNAND(StartBlock, DataBuffer, wBytes );   

  00b90	e59d2008	 ldr         r2, [sp, #8]
  00b94	e59d101c	 ldr         r1, [sp, #0x1C]
  00b98	e59d0010	 ldr         r0, [sp, #0x10]
  00b9c	eb000000	 bl          FlashReadNAND

; 556  :       
; 557  :         memcpy( (PBYTE)(DataBuffer+wBytes),lpSourceData,DataSize);

  00ba0	e59d2040	 ldr         r2, [sp, #0x40]
  00ba4	e59d1044	 ldr         r1, [sp, #0x44]
  00ba8	e59d001c	 ldr         r0, [sp, #0x1C]
  00bac	e59d3008	 ldr         r3, [sp, #8]
  00bb0	e0800003	 add         r0, r0, r3
  00bb4	eb000000	 bl          memcpy

; 558  :       
; 559  :         lpTragetData=DataBuffer;

  00bb8	e59d301c	 ldr         r3, [sp, #0x1C]
  00bbc	e58d3014	 str         r3, [sp, #0x14]

; 560  :            
; 561  :     
; 562  :     }
; 563  :     else

  00bc0	ea000003	 b           |$LN8@WriteDataT|
  00bc4		 |$LN10@WriteDataT|

; 564  :     {	
; 565  :       lpTragetData=lpSourceData;

  00bc4	e59d3044	 ldr         r3, [sp, #0x44]
  00bc8	e58d3014	 str         r3, [sp, #0x14]

; 566  :       
; 567  :       UpdateSize=DataSize;

  00bcc	e59d3040	 ldr         r3, [sp, #0x40]
  00bd0	e58d3000	 str         r3, [sp]
  00bd4		 |$LN8@WriteDataT|

; 568  :     }
; 569  :     
; 570  :     
; 571  :     for(i =0 ; i<iBlocks ;i++ )

  00bd4	e3a03000	 mov         r3, #0
  00bd8	e58d3004	 str         r3, [sp, #4]
  00bdc	ea000002	 b           |$LN7@WriteDataT|
  00be0		 |$LN6@WriteDataT|
  00be0	e59d3004	 ldr         r3, [sp, #4]
  00be4	e2833001	 add         r3, r3, #1
  00be8	e58d3004	 str         r3, [sp, #4]
  00bec		 |$LN7@WriteDataT|
  00bec	e59d2004	 ldr         r2, [sp, #4]
  00bf0	e59d3018	 ldr         r3, [sp, #0x18]
  00bf4	e1520003	 cmp         r2, r3
  00bf8	aa000018	 bge         |$LN5@WriteDataT|

; 572  :     {
; 573  :     	 ShiftBytes=(i*g_FlashInfo.dwBytesPerBlock);    	

  00bfc	e59d2004	 ldr         r2, [sp, #4]
  00c00	e59f30fc	 ldr         r3, [pc, #0xFC]
  00c04	e5933008	 ldr         r3, [r3, #8]
  00c08	e0030392	 mul         r3, r2, r3
  00c0c	e58d300c	 str         r3, [sp, #0xC]

; 574  :     	  
; 575  :        if(!FlashWriteNAND( (StartBlock+i), (lpTragetData+ShiftBytes),g_FlashInfo.dwBytesPerBlock))

  00c10	e59f30ec	 ldr         r3, [pc, #0xEC]
  00c14	e5932008	 ldr         r2, [r3, #8]
  00c18	e59d1014	 ldr         r1, [sp, #0x14]
  00c1c	e59d300c	 ldr         r3, [sp, #0xC]
  00c20	e0811003	 add         r1, r1, r3
  00c24	e59d0010	 ldr         r0, [sp, #0x10]
  00c28	e59d3004	 ldr         r3, [sp, #4]
  00c2c	e0800003	 add         r0, r0, r3
  00c30	eb000000	 bl          FlashWriteNAND
  00c34	e58d002c	 str         r0, [sp, #0x2C]
  00c38	e59d302c	 ldr         r3, [sp, #0x2C]
  00c3c	e3530000	 cmp         r3, #0
  00c40	1a000000	 bne         |$LN4@WriteDataT|

; 576  :        goto exit;

  00c44	ea000021	 b           |$exit$41497|
  00c48		 |$LN4@WriteDataT|

; 577  :        
; 578  :       
; 579  :       RETAILMSG (1,(TEXT("\n\rWriteNand Offset: 0x%x done\n\r"),Offset+ShiftBytes)); 

  00c48	e59d203c	 ldr         r2, [sp, #0x3C]
  00c4c	e59d300c	 ldr         r3, [sp, #0xC]
  00c50	e0821003	 add         r1, r2, r3
  00c54	e59f00ac	 ldr         r0, [pc, #0xAC]
  00c58	eb000000	 bl          NKDbgPrintfW

; 580  :     }

  00c5c	eaffffdf	 b           |$LN6@WriteDataT|
  00c60		 |$LN5@WriteDataT|

; 581  :     
; 582  :     if(UpdateSize%g_FlashInfo.dwBytesPerBlock)

  00c60	e59d1000	 ldr         r1, [sp]
  00c64	e59f3098	 ldr         r3, [pc, #0x98]
  00c68	e5930008	 ldr         r0, [r3, #8]
  00c6c	eb000000	 bl          __rt_udiv
  00c70	e3510000	 cmp         r1, #0
  00c74	0a000013	 beq         |$LN3@WriteDataT|

; 583  :     {	 
; 584  :     	   	
; 585  :     	 if(!FlashWriteNAND( (StartBlock+i), (lpTragetData+(i*g_FlashInfo.dwBytesPerBlock)),(UpdateSize%g_FlashInfo.dwBytesPerBlock) ))

  00c78	e59d1000	 ldr         r1, [sp]
  00c7c	e59f3080	 ldr         r3, [pc, #0x80]
  00c80	e5930008	 ldr         r0, [r3, #8]
  00c84	eb000000	 bl          __rt_udiv
  00c88	e1a02001	 mov         r2, r1
  00c8c	e59d0004	 ldr         r0, [sp, #4]
  00c90	e59f306c	 ldr         r3, [pc, #0x6C]
  00c94	e5933008	 ldr         r3, [r3, #8]
  00c98	e0010390	 mul         r1, r0, r3
  00c9c	e59d3014	 ldr         r3, [sp, #0x14]
  00ca0	e0831001	 add         r1, r3, r1
  00ca4	e59d0010	 ldr         r0, [sp, #0x10]
  00ca8	e59d3004	 ldr         r3, [sp, #4]
  00cac	e0800003	 add         r0, r0, r3
  00cb0	eb000000	 bl          FlashWriteNAND
  00cb4	e58d0030	 str         r0, [sp, #0x30]
  00cb8	e59d3030	 ldr         r3, [sp, #0x30]
  00cbc	e3530000	 cmp         r3, #0
  00cc0	1a000000	 bne         |$LN2@WriteDataT|

; 586  :     	 goto exit;	

  00cc4	ea000001	 b           |$exit$41497|
  00cc8		 |$LN2@WriteDataT|
  00cc8		 |$LN3@WriteDataT|

; 587  :     }
; 588  :     
; 589  :      status=TRUE;

  00cc8	e3a03001	 mov         r3, #1
  00ccc	e58d3020	 str         r3, [sp, #0x20]
  00cd0		 |$exit$41497|

; 590  :     
; 591  : exit:
; 592  : 	    
; 593  :     if(DataBuffer)

  00cd0	e59d301c	 ldr         r3, [sp, #0x1C]
  00cd4	e3530000	 cmp         r3, #0
  00cd8	0a000003	 beq         |$LN1@WriteDataT|

; 594  : 	  {	
; 595  : 	   free((void *) DataBuffer );

  00cdc	e59d001c	 ldr         r0, [sp, #0x1C]
  00ce0	eb000000	 bl          free

; 596  : 	
; 597  : 	   DataBuffer=NULL;	

  00ce4	e3a03000	 mov         r3, #0
  00ce8	e58d301c	 str         r3, [sp, #0x1C]
  00cec		 |$LN1@WriteDataT|

; 598  :     } 
; 599  :     	
; 600  :     return status;

  00cec	e59d3020	 ldr         r3, [sp, #0x20]
  00cf0	e58d3024	 str         r3, [sp, #0x24]
  00cf4		 |$LN11@WriteDataT|

; 601  :     	
; 602  : 
; 603  : }

  00cf4	e59d0024	 ldr         r0, [sp, #0x24]
  00cf8	e28dd034	 add         sp, sp, #0x34
  00cfc	e89d6000	 ldmia       sp, {sp, lr}
  00d00	e12fff1e	 bx          lr
  00d04		 |$LN16@WriteDataT|
  00d04		 |$LN17@WriteDataT|
  00d04	00000000	 DCD         |g_FlashInfo|
  00d08		 |$LN18@WriteDataT|
  00d08	00000000	 DCD         |??_C@_1EA@PDHBGDDH@?$AA?6?$AA?$AN?$AAW?$AAr?$AAi?$AAt?$AAe?$AAN?$AAa?$AAn?$AAd?$AA?5?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAd?$AAo?$AAn?$AAe?$AA?6?$AA?$AN?$AA?$AA@|
  00d0c		 |$M41698|

			 ENDP  ; |WriteDataToFlash|

	EXPORT	|ReadDataFromFlash|

  000a0			 AREA	 |.pdata|, PDATA
|$T41709| DCD	|$LN5@ReadDataFr|
	DCD	0x40001504
; Function compile flags: /Odtp

  00d0c			 AREA	 |.text|, CODE, ARM

  00d0c		 |ReadDataFromFlash| PROC

; 607  : {	

  00d0c		 |$LN5@ReadDataFr|
  00d0c	e1a0c00d	 mov         r12, sp
  00d10	e92d0007	 stmdb       sp!, {r0 - r2}
  00d14	e92d5000	 stmdb       sp!, {r12, lr}
  00d18	e24dd00c	 sub         sp, sp, #0xC
  00d1c		 |$M41706|

; 608  :     DWORD StartBlock=Offset/g_FlashInfo.dwBytesPerBlock;                  

  00d1c	e59d1014	 ldr         r1, [sp, #0x14]
  00d20	e59f3034	 ldr         r3, [pc, #0x34]
  00d24	e5930008	 ldr         r0, [r3, #8]
  00d28	eb000000	 bl          __rt_udiv
  00d2c	e58d0000	 str         r0, [sp]

; 609  :     	
; 610  :     return FlashReadNAND(StartBlock, lpTargetData, DataSize );   

  00d30	e59d2018	 ldr         r2, [sp, #0x18]
  00d34	e59d101c	 ldr         r1, [sp, #0x1C]
  00d38	e59d0000	 ldr         r0, [sp]
  00d3c	eb000000	 bl          FlashReadNAND
  00d40	e58d0008	 str         r0, [sp, #8]
  00d44	e59d3008	 ldr         r3, [sp, #8]
  00d48	e58d3004	 str         r3, [sp, #4]

; 611  :     	
; 612  : 
; 613  : }

  00d4c	e59d0004	 ldr         r0, [sp, #4]
  00d50	e28dd00c	 add         sp, sp, #0xC
  00d54	e89d6000	 ldmia       sp, {sp, lr}
  00d58	e12fff1e	 bx          lr
  00d5c		 |$LN6@ReadDataFr|
  00d5c		 |$LN7@ReadDataFr|
  00d5c	00000000	 DCD         |g_FlashInfo|
  00d60		 |$M41707|

			 ENDP  ; |ReadDataFromFlash|

	EXPORT	|??_C@_1JG@DADAFIOP@?$AA?6?$AA?$AN?$AAR?$AAe?$AAa?$AAd?$AAF?$AAl?$AAa?$AAs?$AAh?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|ReadFlashData|

  000a8			 AREA	 |.pdata|, PDATA
|$T41717| DCD	|$LN8@ReadFlashD|
	DCD	0x40004c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JG@DADAFIOP@?$AA?6?$AA?$AN?$AAR?$AAe?$AAa?$AAd?$AAF?$AAl?$AAa?$AAs?$AAh?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ@| DCB 0xa
	DCB	0x0, 0xd, 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "F"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "D", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, ":", 0x0, " ", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "r", 0x0, "t", 0x0, "S", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, ",", 0x0, " ", 0x0, "E", 0x0, "n", 0x0, "d"
	DCB	0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, ",", 0x0, " "
	DCB	0x0, "O", 0x0, "f", 0x0, "f", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o"
	DCB	0x0, "r", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xa
	DCB	0x0, 0xd, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00d60			 AREA	 |.text|, CODE, ARM

  00d60		 |ReadFlashData| PROC

; 617  : {

  00d60		 |$LN8@ReadFlashD|
  00d60	e1a0c00d	 mov         r12, sp
  00d64	e92d0007	 stmdb       sp!, {r0 - r2}
  00d68	e92d5000	 stmdb       sp!, {r12, lr}
  00d6c	e24dd02c	 sub         sp, sp, #0x2C
  00d70		 |$M41714|

; 618  : 
; 619  :     BOOL rc = FALSE;

  00d70	e3a03000	 mov         r3, #0
  00d74	e58d3008	 str         r3, [sp, #8]

; 620  :     UINT32  sectorSize,OffsetinStartSector;
; 621  :     SECTOR_ADDR StartSector,EndSector; //DWORD
; 622  :     SectorInfo sectorInfo;
; 623  :     PBYTE pData=NULL;

  00d78	e3a03000	 mov         r3, #0
  00d7c	e58d3000	 str         r3, [sp]

; 624  :     int i=0;

  00d80	e3a03000	 mov         r3, #0
  00d84	e58d300c	 str         r3, [sp, #0xC]

; 625  :   
; 626  :       
; 627  :     //1.Get Nand Flash info from FlashInit
; 628  :     sectorSize   = g_FlashInfo.wDataBytesPerSector;

  00d88	e59f30fc	 ldr         r3, [pc, #0xFC]
  00d8c	e1d330be	 ldrh        r3, [r3, #0xE]
  00d90	e58d3004	 str         r3, [sp, #4]

; 629  :     
; 630  :     
; 631  :     //2.Check start sector
; 632  :     //StartSector =Offset/sectorSize; //count from Block0.sector0
; 633  :     StartSector =(Offset>>11); //my gy friend asked

  00d94	e59d3034	 ldr         r3, [sp, #0x34]
  00d98	e1a035a3	 mov         r3, r3, lsr #11
  00d9c	e58d3010	 str         r3, [sp, #0x10]

; 634  :     
; 635  :     //check if not start from sector start address
; 636  :     OffsetinStartSector  = (Offset&0x7FF);//(Offset%sectorSize);

  00da0	e59d2034	 ldr         r2, [sp, #0x34]
  00da4	e3a03c07	 mov         r3, #7, 24
  00da8	e38330ff	 orr         r3, r3, #0xFF
  00dac	e0023003	 and         r3, r2, r3
  00db0	e58d3018	 str         r3, [sp, #0x18]

; 637  :  
; 638  :     //check the end of sector
; 639  :   //  EndSector =  (Offset+DataSize)/sectorSize;//count from Block0.sector0
; 640  :     EndSector =  (Offset+DataSize)>>11;//my gy friend asked

  00db4	e59d2034	 ldr         r2, [sp, #0x34]
  00db8	e59d3038	 ldr         r3, [sp, #0x38]
  00dbc	e0823003	 add         r3, r2, r3
  00dc0	e1a035a3	 mov         r3, r3, lsr #11
  00dc4	e58d3014	 str         r3, [sp, #0x14]

; 641  :    
; 642  :     RETAILMSG (1,(TEXT("\n\rReadFlashData: StartSector(%d), EndSector(%d), OffsetinStartSector(%d)\n\r"),StartSector,EndSector,OffsetinStartSector));

  00dc8	e59d3018	 ldr         r3, [sp, #0x18]
  00dcc	e59d2014	 ldr         r2, [sp, #0x14]
  00dd0	e59d1010	 ldr         r1, [sp, #0x10]
  00dd4	e59f00ac	 ldr         r0, [pc, #0xAC]
  00dd8	eb000000	 bl          NKDbgPrintfW

; 643  :     
; 644  : 
; 645  :      pData = (PBYTE)malloc( (EndSector-StartSector+1)*sectorSize );

  00ddc	e59d2014	 ldr         r2, [sp, #0x14]
  00de0	e59d3010	 ldr         r3, [sp, #0x10]
  00de4	e0423003	 sub         r3, r2, r3
  00de8	e2832001	 add         r2, r3, #1
  00dec	e59d3004	 ldr         r3, [sp, #4]
  00df0	e0000392	 mul         r0, r2, r3
  00df4	eb000000	 bl          malloc
  00df8	e58d0028	 str         r0, [sp, #0x28]
  00dfc	e59d3028	 ldr         r3, [sp, #0x28]
  00e00	e58d3000	 str         r3, [sp]
  00e04		 |$LN3@ReadFlashD|

; 646  :      
; 647  :     do
; 648  :     {
; 649  :       FlashReadSector(StartSector+i, (pData+sectorSize*i), &sectorInfo);

  00e04	e28d201c	 add         r2, sp, #0x1C
  00e08	e59d0004	 ldr         r0, [sp, #4]
  00e0c	e59d300c	 ldr         r3, [sp, #0xC]
  00e10	e0010390	 mul         r1, r0, r3
  00e14	e59d3000	 ldr         r3, [sp]
  00e18	e0831001	 add         r1, r3, r1
  00e1c	e59d0010	 ldr         r0, [sp, #0x10]
  00e20	e59d300c	 ldr         r3, [sp, #0xC]
  00e24	e0800003	 add         r0, r0, r3
  00e28	eb000000	 bl          FlashReadSector

; 650  :       i++;

  00e2c	e59d300c	 ldr         r3, [sp, #0xC]
  00e30	e2833001	 add         r3, r3, #1
  00e34	e58d300c	 str         r3, [sp, #0xC]

; 651  :     }while(StartSector+i<=EndSector);

  00e38	e59d2010	 ldr         r2, [sp, #0x10]
  00e3c	e59d300c	 ldr         r3, [sp, #0xC]
  00e40	e0822003	 add         r2, r2, r3
  00e44	e59d3014	 ldr         r3, [sp, #0x14]
  00e48	e1520003	 cmp         r2, r3
  00e4c	9affffec	 bls         |$LN3@ReadFlashD|

; 652  :     
; 653  :     memcpy( lpTargetData ,(pData+OffsetinStartSector),DataSize);

  00e50	e59d2038	 ldr         r2, [sp, #0x38]
  00e54	e59d1000	 ldr         r1, [sp]
  00e58	e59d3018	 ldr         r3, [sp, #0x18]
  00e5c	e0811003	 add         r1, r1, r3
  00e60	e59d003c	 ldr         r0, [sp, #0x3C]
  00e64	eb000000	 bl          memcpy

; 654  : 
; 655  :     free((void *) pData );

  00e68	e59d0000	 ldr         r0, [sp]
  00e6c	eb000000	 bl          free

; 656  :     
; 657  :  
; 658  :     return TRUE;

  00e70	e3a03001	 mov         r3, #1
  00e74	e58d3024	 str         r3, [sp, #0x24]

; 659  : }

  00e78	e59d0024	 ldr         r0, [sp, #0x24]
  00e7c	e28dd02c	 add         sp, sp, #0x2C
  00e80	e89d6000	 ldmia       sp, {sp, lr}
  00e84	e12fff1e	 bx          lr
  00e88		 |$LN9@ReadFlashD|
  00e88		 |$LN10@ReadFlashD|
  00e88	00000000	 DCD         |??_C@_1JG@DADAFIOP@?$AA?6?$AA?$AN?$AAR?$AAe?$AAa?$AAd?$AAF?$AAl?$AAa?$AAs?$AAh?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ@|
  00e8c		 |$LN11@ReadFlashD|
  00e8c	00000000	 DCD         |g_FlashInfo|
  00e90		 |$M41715|

			 ENDP  ; |ReadFlashData|

	EXPORT	|??_C@_1ME@DANHLFAN@?$AA?6?$AA?$AN?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAl?$AAa?$AAs?$AAh?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|WriteFlashData|

  000b0			 AREA	 |.pdata|, PDATA
|$T41729| DCD	|$LN14@WriteFlash|
	DCD	0x40009f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1ME@DANHLFAN@?$AA?6?$AA?$AN?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAl?$AAa?$AAs?$AAh?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ@| DCB 0xa
	DCB	0x0, 0xd, 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, "B", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, ",", 0x0, " ", 0x0, "E", 0x0, "n", 0x0, "d"
	DCB	0x0, "B", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, ",", 0x0, " ", 0x0, "O"
	DCB	0x0, "f", 0x0, "f", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, "B", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, ",", 0x0, " ", 0x0, "L"
	DCB	0x0, "e", 0x0, "f", 0x0, "t", 0x0, "B", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, "i", 0x0, "n", 0x0, "E", 0x0, "n"
	DCB	0x0, "d", 0x0, "B", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xa, 0x0, 0xd
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00e90			 AREA	 |.text|, CODE, ARM

  00e90		 |WriteFlashData| PROC

; 662  : {

  00e90		 |$LN14@WriteFlash|
  00e90	e1a0c00d	 mov         r12, sp
  00e94	e92d0007	 stmdb       sp!, {r0 - r2}
  00e98	e92d5000	 stmdb       sp!, {r12, lr}
  00e9c	e24dd03c	 sub         sp, sp, #0x3C
  00ea0		 |$M41726|

; 663  : 
; 664  : 
; 665  :     BOOL rc = FALSE;

  00ea0	e3a03000	 mov         r3, #0
  00ea4	e58d300c	 str         r3, [sp, #0xC]

; 666  :     UINT32  sectorSize,blockSize,OffsetinStartBlock,LeftBytesinEndBlock;
; 667  :     UINT32 StartBlock,EndBlock;
; 668  : //    FlashInfo  flashInfo;
; 669  :     
; 670  :     PBYTE pData=NULL;

  00ea8	e3a03000	 mov         r3, #0
  00eac	e58d3004	 str         r3, [sp, #4]

; 671  :     UINT32 i=0,blockcount=0;

  00eb0	e3a03000	 mov         r3, #0
  00eb4	e58d3010	 str         r3, [sp, #0x10]
  00eb8	e3a03000	 mov         r3, #0
  00ebc	e58d3014	 str         r3, [sp, #0x14]

; 672  :   
; 673  :       
; 674  :     //1.Get Nand Flash info from FlashInit
; 675  :     sectorSize   = g_FlashInfo.wDataBytesPerSector;

  00ec0	e59f3240	 ldr         r3, [pc, #0x240]
  00ec4	e1d330be	 ldrh        r3, [r3, #0xE]
  00ec8	e58d3008	 str         r3, [sp, #8]

; 676  :     blockSize    = g_FlashInfo.dwBytesPerBlock;

  00ecc	e59f3234	 ldr         r3, [pc, #0x234]
  00ed0	e5933008	 ldr         r3, [r3, #8]
  00ed4	e58d3028	 str         r3, [sp, #0x28]

; 677  :     
; 678  :     //2.Check start sector
; 679  :     //StartSector =Offset/sectorSize; //count from Block0.sector0
; 680  :     StartBlock = (Offset>>17);

  00ed8	e59d3044	 ldr         r3, [sp, #0x44]
  00edc	e1a038a3	 mov         r3, r3, lsr #17
  00ee0	e58d301c	 str         r3, [sp, #0x1C]

; 681  : //    StartSector =(Offset>>11); 
; 682  :     
; 683  :     //check if not start from sector start address
; 684  : //    OffsetinStartSector = (Offset&0x8FF);
; 685  :  
; 686  :     //check the end of sector
; 687  :   //  EndSector =  (Offset+DataSize)/sectorSize;//count from Block0.sector0
; 688  :     EndBlock = (Offset+DataSize-1)>>17;

  00ee4	e59d2044	 ldr         r2, [sp, #0x44]
  00ee8	e59d3048	 ldr         r3, [sp, #0x48]
  00eec	e0823003	 add         r3, r2, r3
  00ef0	e2433001	 sub         r3, r3, #1
  00ef4	e1a038a3	 mov         r3, r3, lsr #17
  00ef8	e58d3018	 str         r3, [sp, #0x18]

; 689  : //    EndSector =  (Offset+DataSize)>>11;
; 690  :    
; 691  : //    LeftBytesinEndSector =((Offset+DataSize)&0x8FF);
; 692  :     
; 693  :     pData= (PBYTE)malloc(blockSize);

  00efc	e59d0028	 ldr         r0, [sp, #0x28]
  00f00	eb000000	 bl          malloc
  00f04	e58d0034	 str         r0, [sp, #0x34]
  00f08	e59d3034	 ldr         r3, [sp, #0x34]
  00f0c	e58d3004	 str         r3, [sp, #4]

; 694  :         
; 695  :     i=0;

  00f10	e3a03000	 mov         r3, #0
  00f14	e58d3010	 str         r3, [sp, #0x10]

; 696  :     blockcount=0;

  00f18	e3a03000	 mov         r3, #0
  00f1c	e58d3014	 str         r3, [sp, #0x14]

; 697  :     
; 698  :     OffsetinStartBlock =(Offset&0x1FFFF);

  00f20	e59d2044	 ldr         r2, [sp, #0x44]
  00f24	e3e034ff	 mvn         r3, #0xFF, 8
  00f28	e22338fe	 eor         r3, r3, #0xFE, 16
  00f2c	e0023003	 and         r3, r2, r3
  00f30	e58d3024	 str         r3, [sp, #0x24]

; 699  :     LeftBytesinEndBlock =(Offset+DataSize)&0x1FFFF;

  00f34	e59d2044	 ldr         r2, [sp, #0x44]
  00f38	e59d3048	 ldr         r3, [sp, #0x48]
  00f3c	e0822003	 add         r2, r2, r3
  00f40	e3e034ff	 mvn         r3, #0xFF, 8
  00f44	e22338fe	 eor         r3, r3, #0xFE, 16
  00f48	e0023003	 and         r3, r2, r3
  00f4c	e58d3020	 str         r3, [sp, #0x20]

; 700  :  
; 701  :     RETAILMSG (1,(TEXT("\n\rWriteFlashData: StartBlock(%d), EndBlock(%d), OffsetinStartBlock(%d), LeftBytesinEndBlock(%d)\n\r"),
; 702  :                               StartBlock,EndBlock,OffsetinStartBlock,LeftBytesinEndBlock));

  00f50	e59d3020	 ldr         r3, [sp, #0x20]
  00f54	e58d3000	 str         r3, [sp]
  00f58	e59d3024	 ldr         r3, [sp, #0x24]
  00f5c	e59d2018	 ldr         r2, [sp, #0x18]
  00f60	e59d101c	 ldr         r1, [sp, #0x1C]
  00f64	e59f0198	 ldr         r0, [pc, #0x198]
  00f68	eb000000	 bl          NKDbgPrintfW

; 703  :     
; 704  :     for(i=StartBlock;i<=EndBlock;i++)

  00f6c	e59d301c	 ldr         r3, [sp, #0x1C]
  00f70	e58d3010	 str         r3, [sp, #0x10]
  00f74	ea000002	 b           |$LN7@WriteFlash|
  00f78		 |$LN6@WriteFlash|
  00f78	e59d3010	 ldr         r3, [sp, #0x10]
  00f7c	e2833001	 add         r3, r3, #1
  00f80	e58d3010	 str         r3, [sp, #0x10]
  00f84		 |$LN7@WriteFlash|
  00f84	e59d2010	 ldr         r2, [sp, #0x10]
  00f88	e59d3018	 ldr         r3, [sp, #0x18]
  00f8c	e1520003	 cmp         r2, r3
  00f90	8a000053	 bhi         |$LN5@WriteFlash|

; 705  :     {
; 706  :       //before write, we need ro erase block(min size), so we have to save block data first.
; 707  :      // ReadBlock(i, pData, &flashInfo);    
; 708  :         
; 709  :       FlashReadNAND(i, pData, blockSize);

  00f94	e59d2028	 ldr         r2, [sp, #0x28]
  00f98	e59d1004	 ldr         r1, [sp, #4]
  00f9c	e59d0010	 ldr         r0, [sp, #0x10]
  00fa0	eb000000	 bl          FlashReadNAND

; 710  :       
; 711  :       if(OffsetinStartBlock&&(i==StartBlock))

  00fa4	e59d3024	 ldr         r3, [sp, #0x24]
  00fa8	e3530000	 cmp         r3, #0
  00fac	0a00001b	 beq         |$LN4@WriteFlash|
  00fb0	e59d2010	 ldr         r2, [sp, #0x10]
  00fb4	e59d301c	 ldr         r3, [sp, #0x1C]
  00fb8	e1520003	 cmp         r2, r3
  00fbc	1a000017	 bne         |$LN4@WriteFlash|

; 712  :       {
; 713  :         if(StartBlock==EndBlock)

  00fc0	e59d201c	 ldr         r2, [sp, #0x1C]
  00fc4	e59d3018	 ldr         r3, [sp, #0x18]
  00fc8	e1520003	 cmp         r2, r3
  00fcc	1a000006	 bne         |$LN3@WriteFlash|

; 714  :           memcpy(pData+OffsetinStartBlock,lpSourceData,DataSize);

  00fd0	e59d2048	 ldr         r2, [sp, #0x48]
  00fd4	e59d104c	 ldr         r1, [sp, #0x4C]
  00fd8	e59d0004	 ldr         r0, [sp, #4]
  00fdc	e59d3024	 ldr         r3, [sp, #0x24]
  00fe0	e0800003	 add         r0, r0, r3
  00fe4	eb000000	 bl          memcpy

; 715  :         else  

  00fe8	ea000007	 b           |$LN2@WriteFlash|
  00fec		 |$LN3@WriteFlash|

; 716  :           memcpy(pData+OffsetinStartBlock,lpSourceData,blockSize-OffsetinStartBlock);

  00fec	e59d2028	 ldr         r2, [sp, #0x28]
  00ff0	e59d3024	 ldr         r3, [sp, #0x24]
  00ff4	e0422003	 sub         r2, r2, r3
  00ff8	e59d104c	 ldr         r1, [sp, #0x4C]
  00ffc	e59d0004	 ldr         r0, [sp, #4]
  01000	e59d3024	 ldr         r3, [sp, #0x24]
  01004	e0800003	 add         r0, r0, r3
  01008	eb000000	 bl          memcpy
  0100c		 |$LN2@WriteFlash|

; 717  :        //blockcount++;
; 718  :         FlashWriteNAND(StartBlock,pData,blockSize);

  0100c	e59d2028	 ldr         r2, [sp, #0x28]
  01010	e59d1004	 ldr         r1, [sp, #4]
  01014	e59d001c	 ldr         r0, [sp, #0x1C]
  01018	eb000000	 bl          FlashWriteNAND

; 719  :         continue;

  0101c	eaffffd5	 b           |$LN6@WriteFlash|
  01020		 |$LN4@WriteFlash|

; 720  :       }
; 721  :       
; 722  :       if(LeftBytesinEndBlock&&(i==EndBlock))

  01020	e59d3020	 ldr         r3, [sp, #0x20]
  01024	e3530000	 cmp         r3, #0
  01028	0a000010	 beq         |$LN1@WriteFlash|
  0102c	e59d2010	 ldr         r2, [sp, #0x10]
  01030	e59d3018	 ldr         r3, [sp, #0x18]
  01034	e1520003	 cmp         r2, r3
  01038	1a00000c	 bne         |$LN1@WriteFlash|

; 723  :       {
; 724  :         memcpy(pData,(lpSourceData+DataSize-LeftBytesinEndBlock),LeftBytesinEndBlock);

  0103c	e59d2020	 ldr         r2, [sp, #0x20]
  01040	e59d104c	 ldr         r1, [sp, #0x4C]
  01044	e59d3048	 ldr         r3, [sp, #0x48]
  01048	e0811003	 add         r1, r1, r3
  0104c	e59d3020	 ldr         r3, [sp, #0x20]
  01050	e0411003	 sub         r1, r1, r3
  01054	e59d0004	 ldr         r0, [sp, #4]
  01058	eb000000	 bl          memcpy

; 725  :         FlashWriteNAND(EndBlock,pData,blockSize);

  0105c	e59d2028	 ldr         r2, [sp, #0x28]
  01060	e59d1004	 ldr         r1, [sp, #4]
  01064	e59d0018	 ldr         r0, [sp, #0x18]
  01068	eb000000	 bl          FlashWriteNAND

; 726  :         continue;

  0106c	eaffffc1	 b           |$LN6@WriteFlash|
  01070		 |$LN1@WriteFlash|

; 727  :       }
; 728  :       
; 729  :       memcpy(pData, lpSourceData+OffsetinStartBlock+blockSize*blockcount, blockSize);

  01070	e59d2028	 ldr         r2, [sp, #0x28]
  01074	e59d104c	 ldr         r1, [sp, #0x4C]
  01078	e59d3024	 ldr         r3, [sp, #0x24]
  0107c	e0810003	 add         r0, r1, r3
  01080	e59d1028	 ldr         r1, [sp, #0x28]
  01084	e59d3014	 ldr         r3, [sp, #0x14]
  01088	e0030391	 mul         r3, r1, r3
  0108c	e0801003	 add         r1, r0, r3
  01090	e59d0004	 ldr         r0, [sp, #4]
  01094	eb000000	 bl          memcpy

; 730  :       FlashWriteNAND(StartBlock+(OffsetinStartBlock?blockcount+1:blockcount),pData,blockSize);

  01098	e59d3024	 ldr         r3, [sp, #0x24]
  0109c	e3530000	 cmp         r3, #0
  010a0	0a000003	 beq         |$LN10@WriteFlash|
  010a4	e59d3014	 ldr         r3, [sp, #0x14]
  010a8	e2833001	 add         r3, r3, #1
  010ac	e58d3038	 str         r3, [sp, #0x38]
  010b0	ea000001	 b           |$LN11@WriteFlash|
  010b4		 |$LN10@WriteFlash|
  010b4	e59d3014	 ldr         r3, [sp, #0x14]
  010b8	e58d3038	 str         r3, [sp, #0x38]
  010bc		 |$LN11@WriteFlash|
  010bc	e59d2028	 ldr         r2, [sp, #0x28]
  010c0	e59d1004	 ldr         r1, [sp, #4]
  010c4	e59d001c	 ldr         r0, [sp, #0x1C]
  010c8	e59d3038	 ldr         r3, [sp, #0x38]
  010cc	e0800003	 add         r0, r0, r3
  010d0	eb000000	 bl          FlashWriteNAND

; 731  :       
; 732  :       blockcount++;

  010d4	e59d3014	 ldr         r3, [sp, #0x14]
  010d8	e2833001	 add         r3, r3, #1
  010dc	e58d3014	 str         r3, [sp, #0x14]

; 733  :       
; 734  :     }

  010e0	eaffffa4	 b           |$LN6@WriteFlash|
  010e4		 |$LN5@WriteFlash|

; 735  :      
; 736  :    
; 737  :     free((void *) pData );

  010e4	e59d0004	 ldr         r0, [sp, #4]
  010e8	eb000000	 bl          free

; 738  :     
; 739  :     return TRUE; 

  010ec	e3a03001	 mov         r3, #1
  010f0	e58d3030	 str         r3, [sp, #0x30]

; 740  : }

  010f4	e59d0030	 ldr         r0, [sp, #0x30]
  010f8	e28dd03c	 add         sp, sp, #0x3C
  010fc	e89d6000	 ldmia       sp, {sp, lr}
  01100	e12fff1e	 bx          lr
  01104		 |$LN15@WriteFlash|
  01104		 |$LN16@WriteFlash|
  01104	00000000	 DCD         |??_C@_1ME@DANHLFAN@?$AA?6?$AA?$AN?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAl?$AAa?$AAs?$AAh?$AAD?$AAa?$AAt?$AAa?$AA?3?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ@|
  01108		 |$LN17@WriteFlash|
  01108	00000000	 DCD         |g_FlashInfo|
  0110c		 |$M41727|

			 ENDP  ; |WriteFlashData|

	END
