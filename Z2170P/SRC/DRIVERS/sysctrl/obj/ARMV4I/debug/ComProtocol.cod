; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170\SRC\DRIVERS\sysctrl\ComProtocol.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.data|, DATA
|g_szOPDescription| DCD |??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@|
	DCD	|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "8"
	DCB	0x0, "0", 0x0, "6", 0x0, " ", 0x0, "H", 0x0, "S", 0x0, "M"
	DCB	0x0, "H", 0x0, "Z", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "8"
	DCB	0x0, "0", 0x0, "6", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "6"
	DCB	0x0, "2", 0x0, "4", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "4"
	DCB	0x0, "1", 0x0, "6", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "2"
	DCB	0x0, "0", 0x0, "8", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@| DCB "R"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "O", 0x0, "S"
	DCB	0x0, "C", 0x0, 0x0, 0x0			; `string'
	EXPORT	|??_C@_1O@IHEKMJDI@?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17KKLPNNMB@?$AAC?$AAO?$AAM?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?CheckNameIndex@@YAHPAG@Z|		; CheckNameIndex
	IMPORT	|swscanf|
	IMPORT	|wcsncmp|
	IMPORT	|wcsncpy|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T37324| DCD	|$LN8@CheckNameI|
	DCD	0xc0003504
; File c:\wince600\platform\z2170\src\drivers\sysctrl\comprotocol.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@IHEKMJDI@?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?3?$AA?$AA@| DCB "C", 0x0
	DCB	"O", 0x0, "M", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17KKLPNNMB@?$AAC?$AAO?$AAM?$AA?$AA@| DCB "C", 0x0, "O", 0x0, "M", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.xdata|, DATA
|$T37320| DCD	0xffffffe4
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T37320|

  00008		 |?CheckNameIndex@@YAHPAG@Z| PROC	; CheckNameIndex

; 14   : {

  00008		 |$LN8@CheckNameI|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0001	 stmdb       sp!, {r0}
  00010	e92d5000	 stmdb       sp!, {r12, lr}
  00014	e24dd024	 sub         sp, sp, #0x24
  00018		 |$M37321|
  00018	e59f30b8	 ldr         r3, [pc, #0xB8]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3014	 str         r3, [sp, #0x14]

; 15   : 	TCHAR cBuf[6];	// this is the max it should be
; 16   : 	int iNum;
; 17   : 	int iRet;
; 18   : 		
; 19   : 	wcsncpy(cBuf, szName, 6);

  00024	e3a02006	 mov         r2, #6
  00028	e59d102c	 ldr         r1, [sp, #0x2C]
  0002c	e28d0000	 add         r0, sp, #0
  00030	eb000000	 bl          wcsncpy

; 20   : 	if(wcsncmp(cBuf, L"COM", 3) != 0)

  00034	e3a02003	 mov         r2, #3
  00038	e59f1094	 ldr         r1, [pc, #0x94]
  0003c	e28d0000	 add         r0, sp, #0
  00040	eb000000	 bl          wcsncmp
  00044	e58d001c	 str         r0, [sp, #0x1C]
  00048	e59d301c	 ldr         r3, [sp, #0x1C]
  0004c	e3530000	 cmp         r3, #0
  00050	0a000004	 beq         |$LN3@CheckNameI|

; 21   : 		return -1;

  00054	e59d0014	 ldr         r0, [sp, #0x14]
  00058	eb000000	 bl          __security_check_cookie
  0005c	e3e03000	 mvn         r3, #0
  00060	e58d3018	 str         r3, [sp, #0x18]
  00064	ea000015	 b           |$LN4@CheckNameI|
  00068		 |$LN3@CheckNameI|

; 22   : 	
; 23   : 	iRet = swscanf(cBuf, L"COM%d:", &iNum);

  00068	e28d2010	 add         r2, sp, #0x10
  0006c	e59f105c	 ldr         r1, [pc, #0x5C]
  00070	e28d0000	 add         r0, sp, #0
  00074	eb000000	 bl          swscanf
  00078	e58d0020	 str         r0, [sp, #0x20]
  0007c	e59d3020	 ldr         r3, [sp, #0x20]
  00080	e58d300c	 str         r3, [sp, #0xC]

; 24   : 	if((iRet == 0) || (iRet == EOF))

  00084	e59d300c	 ldr         r3, [sp, #0xC]
  00088	e3530000	 cmp         r3, #0
  0008c	0a000002	 beq         |$LN1@CheckNameI|
  00090	e59d300c	 ldr         r3, [sp, #0xC]
  00094	e3730001	 cmn         r3, #1
  00098	1a000004	 bne         |$LN2@CheckNameI|
  0009c		 |$LN1@CheckNameI|

; 25   : 		return -1;

  0009c	e59d0014	 ldr         r0, [sp, #0x14]
  000a0	eb000000	 bl          __security_check_cookie
  000a4	e3e03000	 mvn         r3, #0
  000a8	e58d3018	 str         r3, [sp, #0x18]
  000ac	ea000003	 b           |$LN4@CheckNameI|
  000b0		 |$LN2@CheckNameI|

; 26   : 	
; 27   : 	return iNum;

  000b0	e59d0014	 ldr         r0, [sp, #0x14]
  000b4	eb000000	 bl          __security_check_cookie
  000b8	e59d3010	 ldr         r3, [sp, #0x10]
  000bc	e58d3018	 str         r3, [sp, #0x18]
  000c0		 |$LN4@CheckNameI|

; 28   : }

  000c0	e59d0018	 ldr         r0, [sp, #0x18]
  000c4	e28dd024	 add         sp, sp, #0x24
  000c8	e89d6000	 ldmia       sp, {sp, lr}
  000cc	e12fff1e	 bx          lr
  000d0		 |$LN9@CheckNameI|
  000d0		 |$LN10@CheckNameI|
  000d0	00000000	 DCD         |??_C@_1O@IHEKMJDI@?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?3?$AA?$AA@|
  000d4		 |$LN11@CheckNameI|
  000d4	00000000	 DCD         |??_C@_17KKLPNNMB@?$AAC?$AAO?$AAM?$AA?$AA@|
  000d8		 |$LN12@CheckNameI|
  000d8	00000000	 DCD         |__security_cookie|
  000dc		 |$M37322|

			 ENDP  ; |?CheckNameIndex@@YAHPAG@Z|, CheckNameIndex

	EXPORT	|??_C@_17KACEIPNC@?$AAK?$AAe?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?CheckDeviceType@@YAHPAUHKEY__@@PAG@Z|	; CheckDeviceType
	IMPORT	|wcslen|
	IMPORT	|RegQueryValueExW|

  00008			 AREA	 |.pdata|, PDATA
|$T37338| DCD	|$LN8@CheckDevic|
	DCD	0xc0004104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17KACEIPNC@?$AAK?$AAe?$AAy?$AA?$AA@| DCB "K", 0x0, "e", 0x0, "y", 0x0
	DCB	0x0, 0x0				; `string'

  00004			 AREA	 |.xdata|, DATA
|$T37334| DCD	0xffffffcc
; Function compile flags: /Odtp

  000dc			 AREA	 |.text|, CODE, ARM

  000dc	00000000	 DCD         |__GSHandlerCheck|
  000e0	00000000	 DCD         |$T37334|

  000e4		 |?CheckDeviceType@@YAHPAUHKEY__@@PAG@Z| PROC ; CheckDeviceType

; 31   : {

  000e4		 |$LN8@CheckDevic|
  000e4	e1a0c00d	 mov         r12, sp
  000e8	e92d0003	 stmdb       sp!, {r0, r1}
  000ec	e92d5000	 stmdb       sp!, {r12, lr}
  000f0	e24ddf4e	 sub         sp, sp, #0x4E, 30
  000f4		 |$M37335|
  000f4	e59f30e8	 ldr         r3, [pc, #0xE8]
  000f8	e5933000	 ldr         r3, [r3]
  000fc	e58d3114	 str         r3, [sp, #0x114]

; 32   : 	INT rc;
; 33   : 	TCHAR szName[128];
; 34   : 	DWORD dwType, dwSize;
; 35   : 
; 36   : 	dwSize = sizeof(szName);

  00100	e3a03c01	 mov         r3, #1, 24
  00104	e58d3010	 str         r3, [sp, #0x10]

; 37   : 
; 38   : 	rc = RegQueryValueEx(hSubKey, REG_NAME_KEY, 0, &dwType, (PBYTE)szName, &dwSize);

  00108	e28d3010	 add         r3, sp, #0x10
  0010c	e58d3004	 str         r3, [sp, #4]
  00110	e28d3014	 add         r3, sp, #0x14
  00114	e58d3000	 str         r3, [sp]
  00118	e28d3008	 add         r3, sp, #8
  0011c	e3a02000	 mov         r2, #0
  00120	e59f10b8	 ldr         r1, [pc, #0xB8]
  00124	e59d0140	 ldr         r0, [sp, #0x140]
  00128	eb000000	 bl          RegQueryValueExW
  0012c	e58d0124	 str         r0, [sp, #0x124]
  00130	e59d3124	 ldr         r3, [sp, #0x124]
  00134	e58d300c	 str         r3, [sp, #0xC]

; 39   : 	if(rc !=  ERROR_SUCCESS)

  00138	e59d300c	 ldr         r3, [sp, #0xC]
  0013c	e3530000	 cmp         r3, #0
  00140	0a000004	 beq         |$LN3@CheckDevic|

; 40   : 		return FALSE;

  00144	e59d0114	 ldr         r0, [sp, #0x114]
  00148	eb000000	 bl          __security_check_cookie
  0014c	e3a03000	 mov         r3, #0
  00150	e58d3120	 str         r3, [sp, #0x120]
  00154	ea00001d	 b           |$LN4@CheckDevic|
  00158		 |$LN3@CheckDevic|

; 41   : 
; 42   : 	if(wcslen(szName) >= wcslen(DeviceKey)) {

  00158	e28d0014	 add         r0, sp, #0x14
  0015c	eb000000	 bl          wcslen
  00160	e58d0128	 str         r0, [sp, #0x128]
  00164	e59d0144	 ldr         r0, [sp, #0x144]
  00168	eb000000	 bl          wcslen
  0016c	e58d012c	 str         r0, [sp, #0x12C]
  00170	e59d2128	 ldr         r2, [sp, #0x128]
  00174	e59d312c	 ldr         r3, [sp, #0x12C]
  00178	e1520003	 cmp         r2, r3
  0017c	3a00000f	 bcc         |$LN2@CheckDevic|

; 43   : 		if(wcsncmp(szName, DeviceKey, wcslen(DeviceKey)) == 0)

  00180	e59d0144	 ldr         r0, [sp, #0x144]
  00184	eb000000	 bl          wcslen
  00188	e58d0130	 str         r0, [sp, #0x130]
  0018c	e59d2130	 ldr         r2, [sp, #0x130]
  00190	e59d1144	 ldr         r1, [sp, #0x144]
  00194	e28d0014	 add         r0, sp, #0x14
  00198	eb000000	 bl          wcsncmp
  0019c	e58d0134	 str         r0, [sp, #0x134]
  001a0	e59d3134	 ldr         r3, [sp, #0x134]
  001a4	e3530000	 cmp         r3, #0
  001a8	1a000004	 bne         |$LN1@CheckDevic|

; 44   : 			return TRUE;

  001ac	e59d0114	 ldr         r0, [sp, #0x114]
  001b0	eb000000	 bl          __security_check_cookie
  001b4	e3a03001	 mov         r3, #1
  001b8	e58d3120	 str         r3, [sp, #0x120]
  001bc	ea000003	 b           |$LN4@CheckDevic|
  001c0		 |$LN1@CheckDevic|
  001c0		 |$LN2@CheckDevic|

; 45   : 	}
; 46   : 
; 47   : 	return FALSE;

  001c0	e59d0114	 ldr         r0, [sp, #0x114]
  001c4	eb000000	 bl          __security_check_cookie
  001c8	e3a03000	 mov         r3, #0
  001cc	e58d3120	 str         r3, [sp, #0x120]
  001d0		 |$LN4@CheckDevic|

; 48   : }

  001d0	e59d0120	 ldr         r0, [sp, #0x120]
  001d4	e28ddf4e	 add         sp, sp, #0x4E, 30
  001d8	e89d6000	 ldmia       sp, {sp, lr}
  001dc	e12fff1e	 bx          lr
  001e0		 |$LN9@CheckDevic|
  001e0		 |$LN10@CheckDevic|
  001e0	00000000	 DCD         |??_C@_17KACEIPNC@?$AAK?$AAe?$AAy?$AA?$AA@|
  001e4		 |$LN11@CheckDevic|
  001e4	00000000	 DCD         |__security_cookie|
  001e8		 |$M37336|

			 ENDP  ; |?CheckDeviceType@@YAHPAUHKEY__@@PAG@Z|, CheckDeviceType

	EXPORT	|??0CComProtocol@@QAA@XZ|		; CComProtocol::CComProtocol

  00010			 AREA	 |.pdata|, PDATA
|$T37347| DCD	|$LN5@CComProtoc|
	DCD	0x40000a04
; Function compile flags: /Odtp

  001e8			 AREA	 |.text|, CODE, ARM

  001e8		 |??0CComProtocol@@QAA@XZ| PROC		; CComProtocol::CComProtocol

; 56   : {

  001e8		 |$LN5@CComProtoc|
  001e8	e1a0c00d	 mov         r12, sp
  001ec	e92d0001	 stmdb       sp!, {r0}
  001f0	e92d5000	 stmdb       sp!, {r12, lr}
  001f4	e24dd004	 sub         sp, sp, #4
  001f8		 |$M37344|

; 57   :    
; 58   : }

  001f8	e59d300c	 ldr         r3, [sp, #0xC]
  001fc	e58d3000	 str         r3, [sp]
  00200	e59d0000	 ldr         r0, [sp]
  00204	e28dd004	 add         sp, sp, #4
  00208	e89d6000	 ldmia       sp, {sp, lr}
  0020c	e12fff1e	 bx          lr
  00210		 |$M37345|

			 ENDP  ; |??0CComProtocol@@QAA@XZ|, CComProtocol::CComProtocol

	EXPORT	|??1CComProtocol@@QAA@XZ|		; CComProtocol::~CComProtocol

  00018			 AREA	 |.pdata|, PDATA
|$T37352| DCD	|$LN5@CComProtoc@2|
	DCD	0x40000503
; Function compile flags: /Odtp

  00210			 AREA	 |.text|, CODE, ARM

  00210		 |??1CComProtocol@@QAA@XZ| PROC		; CComProtocol::~CComProtocol

; 61   : {

  00210		 |$LN5@CComProtoc@2|
  00210	e1a0c00d	 mov         r12, sp
  00214	e92d0001	 stmdb       sp!, {r0}
  00218	e92d5000	 stmdb       sp!, {r12, lr}
  0021c		 |$M37349|

; 62   : 
; 63   : }

  0021c	e89d6000	 ldmia       sp, {sp, lr}
  00220	e12fff1e	 bx          lr
  00224		 |$M37350|

			 ENDP  ; |??1CComProtocol@@QAA@XZ|, CComProtocol::~CComProtocol

	EXPORT	|??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@JJBEOHCE@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@OAPOPHKK@?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?EnumCOMPorts@CComProtocol@@QAAHPAG0@Z| ; CComProtocol::EnumCOMPorts
	IMPORT	|RegCloseKey|
	IMPORT	|RegEnumKeyExW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|wcscpy|

  00020			 AREA	 |.pdata|, PDATA
|$T37369| DCD	|$LN13@EnumCOMPor|
	DCD	0xc0008004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| DCB "N", 0x0, "a", 0x0, "m"
	DCB	0x0, "e", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@JJBEOHCE@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@| DCB "D"
	DCB	0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, "\\", 0x0, "A", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@OAPOPHKK@?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AA?$AA@| DCB "U", 0x0, "n"
	DCB	0x0, "K", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, 0x0, 0x0 ; `string'

  00008			 AREA	 |.xdata|, DATA
|$T37365| DCD	0xffffffa8
; Function compile flags: /Odtp

  00224			 AREA	 |.text|, CODE, ARM

  00224	00000000	 DCD         |__GSHandlerCheck|
  00228	00000000	 DCD         |$T37365|

  0022c		 |?EnumCOMPorts@CComProtocol@@QAAHPAG0@Z| PROC ; CComProtocol::EnumCOMPorts

; 67   : {

  0022c		 |$LN13@EnumCOMPor|
  0022c	e1a0c00d	 mov         r12, sp
  00230	e92d0007	 stmdb       sp!, {r0 - r2}
  00234	e92d5000	 stmdb       sp!, {r12, lr}
  00238	e24ddf9e	 sub         sp, sp, #0x9E, 30
  0023c		 |$M37366|
  0023c	e59f31e4	 ldr         r3, [pc, #0x1E4]
  00240	e5933000	 ldr         r3, [r3]
  00244	e58d3234	 str         r3, [sp, #0x234]

; 68   : 	int index = 0, iRet;

  00248	e3a03000	 mov         r3, #0
  0024c	e58d3228	 str         r3, [sp, #0x228]

; 69   : 	HKEY hKey, hSubKey;
; 70   : 	TCHAR szName[MAX_PATH];
; 71   : 	DWORD dwType, dwSize;
; 72   : 	DWORD dwNameMask = 0;

  00250	e3a03000	 mov         r3, #0
  00254	e58d301c	 str         r3, [sp, #0x1C]

; 73   : 	
; 74   : 	
; 75   :         wcscpy(COMPortStr,L"UnKnow");

  00258	e59f11c4	 ldr         r1, [pc, #0x1C4]
  0025c	e59d0288	 ldr         r0, [sp, #0x288]
  00260	eb000000	 bl          wcscpy

; 76   :       
; 77   :         
; 78   : 	if(RegOpenKeyEx(HKEY_LOCAL_MACHINE, REG_NAME_ACTIVE, 0,0, &hKey) != ERROR_SUCCESS)

  00264	e28d3018	 add         r3, sp, #0x18
  00268	e58d3000	 str         r3, [sp]
  0026c	e3a03000	 mov         r3, #0
  00270	e3a02000	 mov         r2, #0
  00274	e59f11a4	 ldr         r1, [pc, #0x1A4]
  00278	e3a0010a	 mov         r0, #0xA, 2
  0027c	eb000000	 bl          RegOpenKeyExW
  00280	e58d025c	 str         r0, [sp, #0x25C]
  00284	e59d325c	 ldr         r3, [sp, #0x25C]
  00288	e3530000	 cmp         r3, #0
  0028c	0a000004	 beq         |$LN7@EnumCOMPor|

; 79   : 	 return FALSE;

  00290	e59d0234	 ldr         r0, [sp, #0x234]
  00294	eb000000	 bl          __security_check_cookie
  00298	e3a03000	 mov         r3, #0
  0029c	e58d323c	 str         r3, [sp, #0x23C]
  002a0	ea000059	 b           |$LN8@EnumCOMPor|
  002a4		 |$LN7@EnumCOMPor|
  002a4		 |$LN10@EnumCOMPor|
  002a4		 |$LN6@EnumCOMPor|

; 80   : 
; 81   : 	while (1) 
; 82   : 	{
; 83   : 		// Enumerate active driver list
; 84   : 		dwSize = sizeof(szName);

  002a4	e3a03f82	 mov         r3, #0x82, 30
  002a8	e58d3014	 str         r3, [sp, #0x14]

; 85   : 		
; 86   : 		if(RegEnumKeyEx (hKey, index++, szName, &dwSize, NULL, NULL, NULL, NULL) != ERROR_SUCCESS)

  002ac	e59d3228	 ldr         r3, [sp, #0x228]
  002b0	e58d3260	 str         r3, [sp, #0x260]
  002b4	e3a03000	 mov         r3, #0
  002b8	e58d300c	 str         r3, [sp, #0xC]
  002bc	e3a03000	 mov         r3, #0
  002c0	e58d3008	 str         r3, [sp, #8]
  002c4	e3a03000	 mov         r3, #0
  002c8	e58d3004	 str         r3, [sp, #4]
  002cc	e3a03000	 mov         r3, #0
  002d0	e58d3000	 str         r3, [sp]
  002d4	e28d3014	 add         r3, sp, #0x14
  002d8	e28d2020	 add         r2, sp, #0x20
  002dc	e59d1260	 ldr         r1, [sp, #0x260]
  002e0	e59d0018	 ldr         r0, [sp, #0x18]
  002e4	eb000000	 bl          RegEnumKeyExW
  002e8	e58d0264	 str         r0, [sp, #0x264]
  002ec	e59d3264	 ldr         r3, [sp, #0x264]
  002f0	e3530000	 cmp         r3, #0
  002f4	e59d3228	 ldr         r3, [sp, #0x228]
  002f8	e2833001	 add         r3, r3, #1
  002fc	e58d3228	 str         r3, [sp, #0x228]
  00300	0a000000	 beq         |$LN4@EnumCOMPor|

; 87   : 			 break;

  00304	ea00003a	 b           |$LN5@EnumCOMPor|
  00308		 |$LN4@EnumCOMPor|

; 88   : 
; 89   : 		// Open active driver key.
; 90   : 		iRet = RegOpenKeyEx(hKey, szName, 0, 0, &hSubKey);

  00308	e28d3f8b	 add         r3, sp, #0x8B, 30
  0030c	e58d3000	 str         r3, [sp]
  00310	e3a03000	 mov         r3, #0
  00314	e3a02000	 mov         r2, #0
  00318	e28d1020	 add         r1, sp, #0x20
  0031c	e59d0018	 ldr         r0, [sp, #0x18]
  00320	eb000000	 bl          RegOpenKeyExW
  00324	e58d0268	 str         r0, [sp, #0x268]
  00328	e59d3268	 ldr         r3, [sp, #0x268]
  0032c	e58d3230	 str         r3, [sp, #0x230]

; 91   : 		
; 92   : 		if(iRet !=  ERROR_SUCCESS)

  00330	e59d3230	 ldr         r3, [sp, #0x230]
  00334	e3530000	 cmp         r3, #0
  00338	0a000000	 beq         |$LN3@EnumCOMPor|

; 93   : 			 continue;

  0033c	eaffffd8	 b           |$LN6@EnumCOMPor|
  00340		 |$LN3@EnumCOMPor|

; 94   : 
; 95   : 		dwSize = sizeof(szName);

  00340	e3a03f82	 mov         r3, #0x82, 30
  00344	e58d3014	 str         r3, [sp, #0x14]

; 96   : 		
; 97   : 		iRet = RegQueryValueEx(hSubKey, REG_NAME_NAME, 0, &dwType, (PBYTE)szName, &dwSize);

  00348	e28d3014	 add         r3, sp, #0x14
  0034c	e58d3004	 str         r3, [sp, #4]
  00350	e28d3020	 add         r3, sp, #0x20
  00354	e58d3000	 str         r3, [sp]
  00358	e28d3010	 add         r3, sp, #0x10
  0035c	e3a02000	 mov         r2, #0
  00360	e59f10b4	 ldr         r1, [pc, #0xB4]
  00364	e59d022c	 ldr         r0, [sp, #0x22C]
  00368	eb000000	 bl          RegQueryValueExW
  0036c	e58d026c	 str         r0, [sp, #0x26C]
  00370	e59d326c	 ldr         r3, [sp, #0x26C]
  00374	e58d3230	 str         r3, [sp, #0x230]

; 98   : 		
; 99   : 		
; 100  : 		if(iRet ==  ERROR_SUCCESS)

  00378	e59d3230	 ldr         r3, [sp, #0x230]
  0037c	e3530000	 cmp         r3, #0
  00380	1a000018	 bne         |$LN2@EnumCOMPor|

; 101  : 		 {
; 102  : 			if((CheckNameIndex(szName) != -1) && (CheckDeviceType(hSubKey,DeviceKey))) 

  00384	e28d0020	 add         r0, sp, #0x20
  00388	eb000000	 bl          |?CheckNameIndex@@YAHPAG@Z|
  0038c	e58d0270	 str         r0, [sp, #0x270]
  00390	e59d3270	 ldr         r3, [sp, #0x270]
  00394	e3730001	 cmn         r3, #1
  00398	0a000012	 beq         |$LN1@EnumCOMPor|
  0039c	e59d1284	 ldr         r1, [sp, #0x284]
  003a0	e59d022c	 ldr         r0, [sp, #0x22C]
  003a4	eb000000	 bl          |?CheckDeviceType@@YAHPAUHKEY__@@PAG@Z|
  003a8	e58d0274	 str         r0, [sp, #0x274]
  003ac	e59d3274	 ldr         r3, [sp, #0x274]
  003b0	e3530000	 cmp         r3, #0
  003b4	0a00000b	 beq         |$LN1@EnumCOMPor|

; 103  : 			{
; 104  : 				RegCloseKey(hSubKey);

  003b8	e59d022c	 ldr         r0, [sp, #0x22C]
  003bc	eb000000	 bl          RegCloseKey

; 105  : 				RegCloseKey(hKey);

  003c0	e59d0018	 ldr         r0, [sp, #0x18]
  003c4	eb000000	 bl          RegCloseKey

; 106  : 				
; 107  : 				 wcscpy(COMPortStr,&szName[0]);

  003c8	e28d1020	 add         r1, sp, #0x20
  003cc	e59d0288	 ldr         r0, [sp, #0x288]
  003d0	eb000000	 bl          wcscpy

; 108  : 				
; 109  : 				return TRUE;

  003d4	e59d0234	 ldr         r0, [sp, #0x234]
  003d8	eb000000	 bl          __security_check_cookie
  003dc	e3a03001	 mov         r3, #1
  003e0	e58d323c	 str         r3, [sp, #0x23C]
  003e4	ea000008	 b           |$LN8@EnumCOMPor|
  003e8		 |$LN1@EnumCOMPor|
  003e8		 |$LN2@EnumCOMPor|

; 110  : 			}
; 111  : 		 }
; 112  : 		 
; 113  : 	 RegCloseKey(hSubKey);

  003e8	e59d022c	 ldr         r0, [sp, #0x22C]
  003ec	eb000000	 bl          RegCloseKey

; 114  : 	}

  003f0	eaffffab	 b           |$LN10@EnumCOMPor|
  003f4		 |$LN5@EnumCOMPor|

; 115  : 
; 116  : RegCloseKey(hKey);

  003f4	e59d0018	 ldr         r0, [sp, #0x18]
  003f8	eb000000	 bl          RegCloseKey

; 117  : return FALSE;

  003fc	e59d0234	 ldr         r0, [sp, #0x234]
  00400	eb000000	 bl          __security_check_cookie
  00404	e3a03000	 mov         r3, #0
  00408	e58d323c	 str         r3, [sp, #0x23C]
  0040c		 |$LN8@EnumCOMPor|

; 118  : }

  0040c	e59d023c	 ldr         r0, [sp, #0x23C]
  00410	e28ddf9e	 add         sp, sp, #0x9E, 30
  00414	e89d6000	 ldmia       sp, {sp, lr}
  00418	e12fff1e	 bx          lr
  0041c		 |$LN14@EnumCOMPor|
  0041c		 |$LN15@EnumCOMPor|
  0041c	00000000	 DCD         |??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@|
  00420		 |$LN16@EnumCOMPor|
  00420	00000000	 DCD         |??_C@_1BO@JJBEOHCE@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@|
  00424		 |$LN17@EnumCOMPor|
  00424	00000000	 DCD         |??_C@_1O@OAPOPHKK@?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AA?$AA@|
  00428		 |$LN18@EnumCOMPor|
  00428	00000000	 DCD         |__security_cookie|
  0042c		 |$M37367|

			 ENDP  ; |?EnumCOMPorts@CComProtocol@@QAAHPAG0@Z|, CComProtocol::EnumCOMPorts

	EXPORT	|??_C@_1CE@JECJJCJL@?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAF?$AAa?$AAi?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	EXPORT	|?CloseCOMPort@CComProtocol@@QAAXPAX@Z|	; CComProtocol::CloseCOMPort
	EXPORT	|??_C@_1EC@NNCJONHM@?$AA?6?$AA?$AN?$AA?$CL?$AAS?$AAe?$AAt?$AAu?$AAp?$AAC?$AAO?$AAM?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AAB?$AAa?$AAu?$AAd?$AAR?$AAa?$AAt?$AAe?$AA?3?$AA?$CF?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|?SetupCOMPort@CComProtocol@@QAAPAXPBGKEEE@Z| ; CComProtocol::SetupCOMPort
	IMPORT	|EscapeCommFunction|
	IMPORT	|PurgeComm|
	IMPORT	|SetCommTimeouts|
	IMPORT	|SetCommState|
	IMPORT	|MessageBoxW|
	IMPORT	|GetCommState|
	IMPORT	|memset|
	IMPORT	|CreateFileW|
	IMPORT	|NKDbgPrintfW|

  00028			 AREA	 |.pdata|, PDATA
|$T37385| DCD	|$LN9@SetupCOMPo|
	DCD	0x40009e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@JECJJCJL@?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAF?$AAa?$AAi?$AAl?$AA?$AA@| DCB "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@NNCJONHM@?$AA?6?$AA?$AN?$AA?$CL?$AAS?$AAe?$AAt?$AAu?$AAp?$AAC?$AAO?$AAM?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AAB?$AAa?$AAu?$AAd?$AAR?$AAa?$AAt?$AAe?$AA?3?$AA?$CF?$AAd?$AA?$AN?$AA?6@| DCB 0xa
	DCB	0x0, 0xd, 0x0, "+", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "u"
	DCB	0x0, "p", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "P", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, ":", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "B", 0x0, "a", 0x0, "u", 0x0, "d", 0x0, "R", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0042c			 AREA	 |.text|, CODE, ARM

  0042c		 |?SetupCOMPort@CComProtocol@@QAAPAXPBGKEEE@Z| PROC ; CComProtocol::SetupCOMPort

; 122  : {    

  0042c		 |$LN9@SetupCOMPo|
  0042c	e1a0c00d	 mov         r12, sp
  00430	e92d000f	 stmdb       sp!, {r0 - r3}
  00434	e92d5000	 stmdb       sp!, {r12, lr}
  00438	e24dd05c	 sub         sp, sp, #0x5C
  0043c		 |$M37382|

; 123  :         COMMTIMEOUTS cto;
; 124  :         DCB PortDCB;   
; 125  :          
; 126  :         HANDLE hComPort=INVALID_HANDLE_VALUE;	

  0043c	e3e03000	 mvn         r3, #0
  00440	e58d3020	 str         r3, [sp, #0x20]

; 127  :         
; 128  :                                                                                         	  
; 129  : 	RETAILMSG(1, (L"\n\r+SetupCOMPort:%s BaudRate:%d\r\n",COMPort,BaudRate ));   

  00444	e59d206c	 ldr         r2, [sp, #0x6C]
  00448	e59d1068	 ldr         r1, [sp, #0x68]
  0044c	e59f024c	 ldr         r0, [pc, #0x24C]
  00450	eb000000	 bl          NKDbgPrintfW
  00454	e3a03001	 mov         r3, #1
  00458	e58d3050	 str         r3, [sp, #0x50]
  0045c	ea000001	 b           |$LN6@SetupCOMPo|
  00460	e3a03000	 mov         r3, #0
  00464	e58d3050	 str         r3, [sp, #0x50]
  00468		 |$LN6@SetupCOMPo|

; 130  : 	
; 131  : 	hComPort = CreateFile(COMPort,	// Pointer to the name of the port
; 132  : 	GENERIC_READ | GENERIC_WRITE,	// Access (read-write) mode
; 133  : 	0,				// Share mode
; 134  : 	NULL,				// Pointer to the security attribute
; 135  : 	OPEN_EXISTING,			// How to open the serial port
; 136  : 	0,				// Port attributes
; 137  : 	NULL);			         // Handle to port with attribute to copy

  00468	e3a03000	 mov         r3, #0
  0046c	e58d3008	 str         r3, [sp, #8]
  00470	e3a03000	 mov         r3, #0
  00474	e58d3004	 str         r3, [sp, #4]
  00478	e3a03003	 mov         r3, #3
  0047c	e58d3000	 str         r3, [sp]
  00480	e3a03000	 mov         r3, #0
  00484	e3a02000	 mov         r2, #0
  00488	e3a01103	 mov         r1, #3, 2
  0048c	e59d0068	 ldr         r0, [sp, #0x68]
  00490	eb000000	 bl          CreateFileW
  00494	e58d0054	 str         r0, [sp, #0x54]
  00498	e59d3054	 ldr         r3, [sp, #0x54]
  0049c	e58d3020	 str         r3, [sp, #0x20]

; 138  : 	
; 139  : 	
; 140  : 	if(hComPort)

  004a0	e59d3020	 ldr         r3, [sp, #0x20]
  004a4	e3530000	 cmp         r3, #0
  004a8	0a000074	 beq         |$LN2@SetupCOMPo|

; 141  : 	{
; 142  : 	       memset(&PortDCB, 0, sizeof(DCB));

  004ac	e3a0201c	 mov         r2, #0x1C
  004b0	e3a01000	 mov         r1, #0
  004b4	e28d0024	 add         r0, sp, #0x24
  004b8	eb000000	 bl          memset

; 143  : 			
; 144  : 	       //set the COMM setting			 	
; 145  : 	       if(!GetCommState(hComPort,&PortDCB))

  004bc	e28d1024	 add         r1, sp, #0x24
  004c0	e59d0020	 ldr         r0, [sp, #0x20]
  004c4	eb000000	 bl          GetCommState
  004c8	e58d0058	 str         r0, [sp, #0x58]
  004cc	e59d3058	 ldr         r3, [sp, #0x58]
  004d0	e3530000	 cmp         r3, #0
  004d4	1a00000a	 bne         |$LN1@SetupCOMPo|

; 146  : 	       {
; 147  :           //ERRORMSG(1, (L"\n\rOpenCOM->GetCommState fail (%d)\r\n",GetLastError()));
; 148  :           
; 149  :           CloseCOMPort(hComPort);  

  004d8	e59d1020	 ldr         r1, [sp, #0x20]
  004dc	e59d0064	 ldr         r0, [sp, #0x64]
  004e0	eb000000	 bl          |?CloseCOMPort@CComProtocol@@QAAXPAX@Z|

; 150  :           
; 151  :           MessageBox(NULL,L"GetCommState Fail",L"",MB_OK|MB_TOPMOST); 

  004e4	e3a03701	 mov         r3, #1, 14
  004e8	e59f21ac	 ldr         r2, [pc, #0x1AC]
  004ec	e59f11a4	 ldr         r1, [pc, #0x1A4]
  004f0	e3a00000	 mov         r0, #0
  004f4	eb000000	 bl          MessageBoxW

; 152  :           
; 153  :           return NULL;

  004f8	e3a03000	 mov         r3, #0
  004fc	e58d304c	 str         r3, [sp, #0x4C]
  00500	ea000060	 b           |$LN3@SetupCOMPo|
  00504		 |$LN1@SetupCOMPo|

; 154  :          }	 	 
; 155  : 	       
; 156  :     
; 157  :          PortDCB.BaudRate = BaudRate;         // Current baud 

  00504	e59d306c	 ldr         r3, [sp, #0x6C]
  00508	e58d3028	 str         r3, [sp, #0x28]

; 158  :          PortDCB.fBinary = TRUE;               // Binary mode; no EOF check 

  0050c	e59d302c	 ldr         r3, [sp, #0x2C]
  00510	e3833001	 orr         r3, r3, #1
  00514	e58d302c	 str         r3, [sp, #0x2C]

; 159  :          PortDCB.fParity = FALSE;              // Enable parity checking 

  00518	e59d202c	 ldr         r2, [sp, #0x2C]
  0051c	e3e03002	 mvn         r3, #2
  00520	e0023003	 and         r3, r2, r3
  00524	e58d302c	 str         r3, [sp, #0x2C]

; 160  :          PortDCB.fOutxCtsFlow = FALSE;         // No CTS output flow control 

  00528	e59d202c	 ldr         r2, [sp, #0x2C]
  0052c	e3e03004	 mvn         r3, #4
  00530	e0023003	 and         r3, r2, r3
  00534	e58d302c	 str         r3, [sp, #0x2C]

; 161  :          PortDCB.fOutxDsrFlow = FALSE;         // No DSR output flow control 

  00538	e59d202c	 ldr         r2, [sp, #0x2C]
  0053c	e3e03008	 mvn         r3, #8
  00540	e0023003	 and         r3, r2, r3
  00544	e58d302c	 str         r3, [sp, #0x2C]

; 162  :          PortDCB.fDtrControl = DTR_CONTROL_ENABLE; 

  00548	e59d202c	 ldr         r2, [sp, #0x2C]
  0054c	e3e03030	 mvn         r3, #0x30
  00550	e0023003	 and         r3, r2, r3
  00554	e3833010	 orr         r3, r3, #0x10
  00558	e58d302c	 str         r3, [sp, #0x2C]

; 163  :                                                // DTR flow control type 
; 164  :          PortDCB.fDsrSensitivity = FALSE;      // DSR sensitivity 

  0055c	e59d202c	 ldr         r2, [sp, #0x2C]
  00560	e3e03040	 mvn         r3, #0x40
  00564	e0023003	 and         r3, r2, r3
  00568	e58d302c	 str         r3, [sp, #0x2C]

; 165  :          PortDCB.fTXContinueOnXoff = FALSE;    // XOFF continues Tx 

  0056c	e59d202c	 ldr         r2, [sp, #0x2C]
  00570	e3e03080	 mvn         r3, #0x80
  00574	e0023003	 and         r3, r2, r3
  00578	e58d302c	 str         r3, [sp, #0x2C]

; 166  :          PortDCB.fOutX = FALSE;                // No XON/XOFF out flow control 

  0057c	e59d202c	 ldr         r2, [sp, #0x2C]
  00580	e3e03c01	 mvn         r3, #1, 24
  00584	e0023003	 and         r3, r2, r3
  00588	e58d302c	 str         r3, [sp, #0x2C]

; 167  :          PortDCB.fInX = FALSE;                 // No XON/XOFF in flow control 

  0058c	e59d202c	 ldr         r2, [sp, #0x2C]
  00590	e3e03c02	 mvn         r3, #2, 24
  00594	e0023003	 and         r3, r2, r3
  00598	e58d302c	 str         r3, [sp, #0x2C]

; 168  :          PortDCB.fErrorChar = FALSE;           // Disable error replacement 

  0059c	e59d202c	 ldr         r2, [sp, #0x2C]
  005a0	e3e03b01	 mvn         r3, #1, 22
  005a4	e0023003	 and         r3, r2, r3
  005a8	e58d302c	 str         r3, [sp, #0x2C]

; 169  :          PortDCB.fNull = FALSE;                // Disable null stripping 

  005ac	e59d202c	 ldr         r2, [sp, #0x2C]
  005b0	e3e03b02	 mvn         r3, #2, 22
  005b4	e0023003	 and         r3, r2, r3
  005b8	e58d302c	 str         r3, [sp, #0x2C]

; 170  :          PortDCB.fRtsControl = RTS_CONTROL_ENABLE ; 

  005bc	e59d202c	 ldr         r2, [sp, #0x2C]
  005c0	e3e03a03	 mvn         r3, #3, 20
  005c4	e0023003	 and         r3, r2, r3
  005c8	e3833a01	 orr         r3, r3, #1, 20
  005cc	e58d302c	 str         r3, [sp, #0x2C]

; 171  :                                                // RTS flow control 
; 172  :          PortDCB.fAbortOnError = FALSE;        // Do not abort reads/writes on 

  005d0	e59d202c	 ldr         r2, [sp, #0x2C]
  005d4	e3e03901	 mvn         r3, #1, 18
  005d8	e0023003	 and         r3, r2, r3
  005dc	e58d302c	 str         r3, [sp, #0x2C]

; 173  :                                                // error
; 174  :          PortDCB.ByteSize = ByteSize;          // Number of bits/byte, 4-8 

  005e0	e5dd3074	 ldrb        r3, [sp, #0x74]
  005e4	e5cd3036	 strb        r3, [sp, #0x36]

; 175  :          PortDCB.Parity = Parity;              // 0-4=no,odd,even,mark,space 

  005e8	e5dd3070	 ldrb        r3, [sp, #0x70]
  005ec	e5cd3037	 strb        r3, [sp, #0x37]

; 176  :          PortDCB.StopBits = StopBits;          // 0,1,2 = 1, 1.5, 2 

  005f0	e5dd3078	 ldrb        r3, [sp, #0x78]
  005f4	e5cd3038	 strb        r3, [sp, #0x38]

; 177  :          
; 178  :          SetCommState(hComPort, &PortDCB);

  005f8	e28d1024	 add         r1, sp, #0x24
  005fc	e59d0020	 ldr         r0, [sp, #0x20]
  00600	eb000000	 bl          SetCommState

; 179  : 	 
; 180  : 	 
; 181  :          //set the COMM timeout                
; 182  :          cto.ReadIntervalTimeout	= 50;

  00604	e3a03032	 mov         r3, #0x32
  00608	e58d300c	 str         r3, [sp, #0xC]

; 183  :          cto.ReadTotalTimeoutMultiplier	= 1 ;

  0060c	e3a03001	 mov         r3, #1
  00610	e58d3010	 str         r3, [sp, #0x10]

; 184  :          cto.ReadTotalTimeoutConstant	= 500;

  00614	e3a03f7d	 mov         r3, #0x7D, 30
  00618	e58d3014	 str         r3, [sp, #0x14]

; 185  :          cto.WriteTotalTimeoutMultiplier= 1;

  0061c	e3a03001	 mov         r3, #1
  00620	e58d3018	 str         r3, [sp, #0x18]

; 186  :          cto.WriteTotalTimeoutConstant	= 50;												 

  00624	e3a03032	 mov         r3, #0x32
  00628	e58d301c	 str         r3, [sp, #0x1C]

; 187  :          SetCommTimeouts(hComPort, &cto);

  0062c	e28d100c	 add         r1, sp, #0xC
  00630	e59d0020	 ldr         r0, [sp, #0x20]
  00634	eb000000	 bl          SetCommTimeouts

; 188  : 	
; 189  :          //clear thr input and output buffer
; 190  :          PurgeComm(hComPort, PURGE_TXABORT | PURGE_RXABORT | PURGE_TXCLEAR | PURGE_RXCLEAR);

  00638	e3a0100f	 mov         r1, #0xF
  0063c	e59d0020	 ldr         r0, [sp, #0x20]
  00640	eb000000	 bl          PurgeComm

; 191  :         
; 192  :          EscapeCommFunction (hComPort, CLRBREAK); 

  00644	e3a01009	 mov         r1, #9
  00648	e59d0020	 ldr         r0, [sp, #0x20]
  0064c	eb000000	 bl          EscapeCommFunction

; 193  :          EscapeCommFunction (hComPort, CLRDTR);

  00650	e3a01006	 mov         r1, #6
  00654	e59d0020	 ldr         r0, [sp, #0x20]
  00658	eb000000	 bl          EscapeCommFunction

; 194  :          EscapeCommFunction (hComPort, CLRRTS); 

  0065c	e3a01004	 mov         r1, #4
  00660	e59d0020	 ldr         r0, [sp, #0x20]
  00664	eb000000	 bl          EscapeCommFunction

; 195  : 			
; 196  :          EscapeCommFunction (hComPort, SETDTR);

  00668	e3a01005	 mov         r1, #5
  0066c	e59d0020	 ldr         r0, [sp, #0x20]
  00670	eb000000	 bl          EscapeCommFunction

; 197  :          EscapeCommFunction (hComPort, SETRTS);  

  00674	e3a01003	 mov         r1, #3
  00678	e59d0020	 ldr         r0, [sp, #0x20]
  0067c	eb000000	 bl          EscapeCommFunction
  00680		 |$LN2@SetupCOMPo|

; 198  :        }
; 199  :     
; 200  :  	//RETAILMSG(1, (L"\n\r-SetupCOMPort:%x\r\n",hComPort ));              
; 201  : 
; 202  : return hComPort;

  00680	e59d3020	 ldr         r3, [sp, #0x20]
  00684	e58d304c	 str         r3, [sp, #0x4C]
  00688		 |$LN3@SetupCOMPo|

; 203  :      
; 204  : 
; 205  : }

  00688	e59d004c	 ldr         r0, [sp, #0x4C]
  0068c	e28dd05c	 add         sp, sp, #0x5C
  00690	e89d6000	 ldmia       sp, {sp, lr}
  00694	e12fff1e	 bx          lr
  00698		 |$LN10@SetupCOMPo|
  00698		 |$LN11@SetupCOMPo|
  00698	00000000	 DCD         |??_C@_1CE@JECJJCJL@?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAF?$AAa?$AAi?$AAl?$AA?$AA@|
  0069c		 |$LN12@SetupCOMPo|
  0069c	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  006a0		 |$LN13@SetupCOMPo|
  006a0	00000000	 DCD         |??_C@_1EC@NNCJONHM@?$AA?6?$AA?$AN?$AA?$CL?$AAS?$AAe?$AAt?$AAu?$AAp?$AAC?$AAO?$AAM?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AAB?$AAa?$AAu?$AAd?$AAR?$AAa?$AAt?$AAe?$AA?3?$AA?$CF?$AAd?$AA?$AN?$AA?6@|
  006a4		 |$M37383|

			 ENDP  ; |?SetupCOMPort@CComProtocol@@QAAPAXPBGKEEE@Z|, CComProtocol::SetupCOMPort

	EXPORT	|??_C@_1BO@EGDOHDJH@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAC?$AAO?$AAM?$AAP?$AAo?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|CloseHandle|
	IMPORT	|SetCommMask|

  00030			 AREA	 |.pdata|, PDATA
|$T37396| DCD	|$LN7@CloseCOMPo|
	DCD	0x40001d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@EGDOHDJH@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAC?$AAO?$AAM?$AAP?$AAo?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "s", 0x0, "e", 0x0, "C", 0x0, "O"
	DCB	0x0, "M", 0x0, "P", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  006a4			 AREA	 |.text|, CODE, ARM

  006a4		 |?CloseCOMPort@CComProtocol@@QAAXPAX@Z| PROC ; CComProtocol::CloseCOMPort

; 209  : {

  006a4		 |$LN7@CloseCOMPo|
  006a4	e1a0c00d	 mov         r12, sp
  006a8	e92d0003	 stmdb       sp!, {r0, r1}
  006ac	e92d5000	 stmdb       sp!, {r12, lr}
  006b0	e24dd004	 sub         sp, sp, #4
  006b4		 |$M37393|

; 210  :    
; 211  : 	RETAILMSG(1, (L"CloseCOMPort\r\n" ));

  006b4	e59f0058	 ldr         r0, [pc, #0x58]
  006b8	eb000000	 bl          NKDbgPrintfW
  006bc	e3a03001	 mov         r3, #1
  006c0	e58d3000	 str         r3, [sp]
  006c4	ea000001	 b           |$LN4@CloseCOMPo|
  006c8	e3a03000	 mov         r3, #0
  006cc	e58d3000	 str         r3, [sp]
  006d0		 |$LN4@CloseCOMPo|

; 212  :      // disable event notification and wait for thread to halt
; 213  :     SetCommMask(PortHandle, 0);

  006d0	e3a01000	 mov         r1, #0
  006d4	e59d0010	 ldr         r0, [sp, #0x10]
  006d8	eb000000	 bl          SetCommMask

; 214  :     
; 215  :     // drop DTR
; 216  :     EscapeCommFunction(PortHandle, CLRDTR);    

  006dc	e3a01006	 mov         r1, #6
  006e0	e59d0010	 ldr         r0, [sp, #0x10]
  006e4	eb000000	 bl          EscapeCommFunction

; 217  :     
; 218  :     EscapeCommFunction (PortHandle, CLRRTS); 

  006e8	e3a01004	 mov         r1, #4
  006ec	e59d0010	 ldr         r0, [sp, #0x10]
  006f0	eb000000	 bl          EscapeCommFunction

; 219  :     
; 220  :     
; 221  :     
; 222  :     // purge any outstanding reads/writes and close device handle
; 223  :     PurgeComm(PortHandle, PURGE_TXABORT | PURGE_RXABORT |
; 224  :               PURGE_TXCLEAR | PURGE_RXCLEAR);

  006f4	e3a0100f	 mov         r1, #0xF
  006f8	e59d0010	 ldr         r0, [sp, #0x10]
  006fc	eb000000	 bl          PurgeComm

; 225  :     
; 226  :     CloseHandle(PortHandle);

  00700	e59d0010	 ldr         r0, [sp, #0x10]
  00704	eb000000	 bl          CloseHandle

; 227  : 
; 228  : 
; 229  : }

  00708	e28dd004	 add         sp, sp, #4
  0070c	e89d6000	 ldmia       sp, {sp, lr}
  00710	e12fff1e	 bx          lr
  00714		 |$LN8@CloseCOMPo|
  00714		 |$LN9@CloseCOMPo|
  00714	00000000	 DCD         |??_C@_1BO@EGDOHDJH@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAC?$AAO?$AAM?$AAP?$AAo?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  00718		 |$M37394|

			 ENDP  ; |?CloseCOMPort@CComProtocol@@QAAXPAX@Z|, CComProtocol::CloseCOMPort

	EXPORT	|?BaudRate@CComProtocol@@QAAHPAXK@Z|	; CComProtocol::BaudRate

  00038			 AREA	 |.pdata|, PDATA
|$T37404| DCD	|$LN5@BaudRate|
	DCD	0x40001304
; Function compile flags: /Odtp

  00718			 AREA	 |.text|, CODE, ARM

  00718		 |?BaudRate@CComProtocol@@QAAHPAXK@Z| PROC ; CComProtocol::BaudRate

; 233  : {

  00718		 |$LN5@BaudRate|
  00718	e1a0c00d	 mov         r12, sp
  0071c	e92d0007	 stmdb       sp!, {r0 - r2}
  00720	e92d5000	 stmdb       sp!, {r12, lr}
  00724	e24dd024	 sub         sp, sp, #0x24
  00728		 |$M37401|

; 234  :      DCB PortDCB; 
; 235  :    
; 236  :      GetCommState(PortHandle, &PortDCB);

  00728	e28d1000	 add         r1, sp, #0
  0072c	e59d0030	 ldr         r0, [sp, #0x30]
  00730	eb000000	 bl          GetCommState

; 237  :      
; 238  :      
; 239  :      PortDCB.BaudRate = BaudRate;        

  00734	e59d3034	 ldr         r3, [sp, #0x34]
  00738	e58d3004	 str         r3, [sp, #4]

; 240  :    
; 241  :      return SetCommState(PortHandle, &PortDCB);

  0073c	e28d1000	 add         r1, sp, #0
  00740	e59d0030	 ldr         r0, [sp, #0x30]
  00744	eb000000	 bl          SetCommState
  00748	e58d0020	 str         r0, [sp, #0x20]
  0074c	e59d3020	 ldr         r3, [sp, #0x20]
  00750	e58d301c	 str         r3, [sp, #0x1C]

; 242  : 
; 243  : 
; 244  : }

  00754	e59d001c	 ldr         r0, [sp, #0x1C]
  00758	e28dd024	 add         sp, sp, #0x24
  0075c	e89d6000	 ldmia       sp, {sp, lr}
  00760	e12fff1e	 bx          lr
  00764		 |$M37402|

			 ENDP  ; |?BaudRate@CComProtocol@@QAAHPAXK@Z|, CComProtocol::BaudRate

	EXPORT	|?WriteCOMPort@CComProtocol@@QAAHPAXPBXK@Z| ; CComProtocol::WriteCOMPort
	IMPORT	|??3@YAXPAX@Z|				; operator delete
	IMPORT	|WriteFile|
	IMPORT	|memcpy|
	IMPORT	|??2@YAPAXI@Z|				; operator new

  00040			 AREA	 |.pdata|, PDATA
|$T37415| DCD	|$LN11@WriteCOMPo|
	DCD	0x40004604
; Function compile flags: /Odtp

  00764			 AREA	 |.text|, CODE, ARM

  00764		 |?WriteCOMPort@CComProtocol@@QAAHPAXPBXK@Z| PROC ; CComProtocol::WriteCOMPort

; 248  : {      	

  00764		 |$LN11@WriteCOMPo|
  00764	e1a0c00d	 mov         r12, sp
  00768	e92d000f	 stmdb       sp!, {r0 - r3}
  0076c	e92d5000	 stmdb       sp!, {r12, lr}
  00770	e24dd030	 sub         sp, sp, #0x30
  00774		 |$M37412|

; 249  : 	BOOL status=FALSE;

  00774	e3a03000	 mov         r3, #0
  00778	e58d300c	 str         r3, [sp, #0xC]

; 250  : 	DWORD dwBytes=0; 	

  0077c	e3a03000	 mov         r3, #0
  00780	e58d3004	 str         r3, [sp, #4]

; 251  : 	PBYTE lpBuffer=new BYTE[NumOfBytes];		 	

  00784	e59d0044	 ldr         r0, [sp, #0x44]
  00788	eb000000	 bl          |??2@YAPAXI@Z|
  0078c	e58d0024	 str         r0, [sp, #0x24]
  00790	e59d3024	 ldr         r3, [sp, #0x24]
  00794	e58d3014	 str         r3, [sp, #0x14]
  00798	e59d3014	 ldr         r3, [sp, #0x14]
  0079c	e58d3008	 str         r3, [sp, #8]

; 252  : 	 
; 253  : 	memcpy(&lpBuffer[0],(PBYTE)DataBuffer,NumOfBytes);                         	 	  	 		

  007a0	e59d2044	 ldr         r2, [sp, #0x44]
  007a4	e59d1040	 ldr         r1, [sp, #0x40]
  007a8	e59d0008	 ldr         r0, [sp, #8]
  007ac	eb000000	 bl          memcpy

; 254  : 	   
; 255  : 	 //Send the command		
; 256  : 	PurgeComm(PortHandle,PURGE_TXCLEAR);		 

  007b0	e3a01004	 mov         r1, #4
  007b4	e59d003c	 ldr         r0, [sp, #0x3C]
  007b8	eb000000	 bl          PurgeComm

; 257  : 	 
; 258  : 	for(DWORD index=0;index<NumOfBytes;index++)

  007bc	e3a03000	 mov         r3, #0
  007c0	e58d3010	 str         r3, [sp, #0x10]
  007c4	ea000002	 b           |$LN4@WriteCOMPo|
  007c8		 |$LN3@WriteCOMPo|
  007c8	e59d3010	 ldr         r3, [sp, #0x10]
  007cc	e2833001	 add         r3, r3, #1
  007d0	e58d3010	 str         r3, [sp, #0x10]
  007d4		 |$LN4@WriteCOMPo|
  007d4	e59d2010	 ldr         r2, [sp, #0x10]
  007d8	e59d3044	 ldr         r3, [sp, #0x44]
  007dc	e1520003	 cmp         r2, r3
  007e0	2a00000e	 bcs         |$LN2@WriteCOMPo|

; 259  : 	{	 
; 260  : 		if(!WriteFile (PortHandle,&lpBuffer[index],1,&dwBytes,NULL))

  007e4	e3a03000	 mov         r3, #0
  007e8	e58d3000	 str         r3, [sp]
  007ec	e28d3004	 add         r3, sp, #4
  007f0	e3a02001	 mov         r2, #1
  007f4	e59d0008	 ldr         r0, [sp, #8]
  007f8	e59d1010	 ldr         r1, [sp, #0x10]
  007fc	e0801001	 add         r1, r0, r1
  00800	e59d003c	 ldr         r0, [sp, #0x3C]
  00804	eb000000	 bl          WriteFile
  00808	e58d0028	 str         r0, [sp, #0x28]
  0080c	e59d3028	 ldr         r3, [sp, #0x28]
  00810	e3530000	 cmp         r3, #0
  00814	1a000000	 bne         |$LN1@WriteCOMPo|

; 261  : 			break;  

  00818	ea000000	 b           |$LN2@WriteCOMPo|
  0081c		 |$LN1@WriteCOMPo|

; 262  : 	} 	 

  0081c	eaffffe9	 b           |$LN3@WriteCOMPo|
  00820		 |$LN2@WriteCOMPo|

; 263  : 	 
; 264  : 	delete lpBuffer;

  00820	e59d3008	 ldr         r3, [sp, #8]
  00824	e58d3018	 str         r3, [sp, #0x18]
  00828	e59d0018	 ldr         r0, [sp, #0x18]
  0082c	eb000000	 bl          |??3@YAXPAX@Z|

; 265  : 	 
; 266  : 	(index==NumOfBytes) ? status=TRUE : status=FALSE ;

  00830	e59d2010	 ldr         r2, [sp, #0x10]
  00834	e59d3044	 ldr         r3, [sp, #0x44]
  00838	e1520003	 cmp         r2, r3
  0083c	1a000004	 bne         |$LN7@WriteCOMPo|
  00840	e3a03001	 mov         r3, #1
  00844	e58d300c	 str         r3, [sp, #0xC]
  00848	e59d300c	 ldr         r3, [sp, #0xC]
  0084c	e58d302c	 str         r3, [sp, #0x2C]
  00850	ea000003	 b           |$LN8@WriteCOMPo|
  00854		 |$LN7@WriteCOMPo|
  00854	e3a03000	 mov         r3, #0
  00858	e58d300c	 str         r3, [sp, #0xC]
  0085c	e59d300c	 ldr         r3, [sp, #0xC]
  00860	e58d302c	 str         r3, [sp, #0x2C]
  00864		 |$LN8@WriteCOMPo|

; 267  :          
; 268  : 	return status;       

  00864	e59d300c	 ldr         r3, [sp, #0xC]
  00868	e58d3020	 str         r3, [sp, #0x20]

; 269  : }

  0086c	e59d0020	 ldr         r0, [sp, #0x20]
  00870	e28dd030	 add         sp, sp, #0x30
  00874	e89d6000	 ldmia       sp, {sp, lr}
  00878	e12fff1e	 bx          lr
  0087c		 |$M37413|

			 ENDP  ; |?WriteCOMPort@CComProtocol@@QAAHPAXPBXK@Z|, CComProtocol::WriteCOMPort

	EXPORT	|?Write_RFID_CMD@CComProtocol@@QAAHPAXPAD@Z| ; CComProtocol::Write_RFID_CMD
	IMPORT	|strlen|

  00048			 AREA	 |.pdata|, PDATA
|$T37421| DCD	|$LN5@Write_RFID|
	DCD	0x40001704
; Function compile flags: /Odtp

  0087c			 AREA	 |.text|, CODE, ARM

  0087c		 |?Write_RFID_CMD@CComProtocol@@QAAHPAXPAD@Z| PROC ; CComProtocol::Write_RFID_CMD

; 273  : {      	

  0087c		 |$LN5@Write_RFID|
  0087c	e1a0c00d	 mov         r12, sp
  00880	e92d0007	 stmdb       sp!, {r0 - r2}
  00884	e92d5000	 stmdb       sp!, {r12, lr}
  00888	e24dd014	 sub         sp, sp, #0x14
  0088c		 |$M37418|

; 274  : 	DWORD  dwSize=strlen(CMDString);					

  0088c	e59d0024	 ldr         r0, [sp, #0x24]
  00890	eb000000	 bl          strlen
  00894	e58d000c	 str         r0, [sp, #0xC]
  00898	e59d300c	 ldr         r3, [sp, #0xC]
  0089c	e58d3000	 str         r3, [sp]

; 275  : 	   
; 276  : 	BOOL status=WriteCOMPort(hDevComPort,CMDString,dwSize); 	

  008a0	e59d3000	 ldr         r3, [sp]
  008a4	e59d2024	 ldr         r2, [sp, #0x24]
  008a8	e59d1020	 ldr         r1, [sp, #0x20]
  008ac	e59d001c	 ldr         r0, [sp, #0x1C]
  008b0	eb000000	 bl          |?WriteCOMPort@CComProtocol@@QAAHPAXPBXK@Z|
  008b4	e58d0010	 str         r0, [sp, #0x10]
  008b8	e59d3010	 ldr         r3, [sp, #0x10]
  008bc	e58d3004	 str         r3, [sp, #4]

; 277  :               
; 278  : 	return status; 

  008c0	e59d3004	 ldr         r3, [sp, #4]
  008c4	e58d3008	 str         r3, [sp, #8]

; 279  : }

  008c8	e59d0008	 ldr         r0, [sp, #8]
  008cc	e28dd014	 add         sp, sp, #0x14
  008d0	e89d6000	 ldmia       sp, {sp, lr}
  008d4	e12fff1e	 bx          lr
  008d8		 |$M37419|

			 ENDP  ; |?Write_RFID_CMD@CComProtocol@@QAAHPAXPAD@Z|, CComProtocol::Write_RFID_CMD

	EXPORT	|?Read_RFID_CMD@CComProtocol@@QAAHPAXPAEKPAK@Z| ; CComProtocol::Read_RFID_CMD
	IMPORT	|ReadFile|

  00050			 AREA	 |.pdata|, PDATA
|$T37430| DCD	|$LN13@Read_RFID_|
	DCD	0x40003804
; Function compile flags: /Odtp

  008d8			 AREA	 |.text|, CODE, ARM

  008d8		 |?Read_RFID_CMD@CComProtocol@@QAAHPAXPAEKPAK@Z| PROC ; CComProtocol::Read_RFID_CMD

; 282  : {

  008d8		 |$LN13@Read_RFID_|
  008d8	e1a0c00d	 mov         r12, sp
  008dc	e92d000f	 stmdb       sp!, {r0 - r3}
  008e0	e92d5000	 stmdb       sp!, {r12, lr}
  008e4	e24dd024	 sub         sp, sp, #0x24
  008e8		 |$M37427|

; 283  : 	BOOL   status=FALSE;

  008e8	e3a03000	 mov         r3, #0
  008ec	e58d3010	 str         r3, [sp, #0x10]

; 284  : 	BYTE   dwByte;
; 285  : 	DWORD  dwBytesTransferred,iBytes;
; 286  :   
; 287  : 	iBytes=0;

  008f0	e3a03000	 mov         r3, #0
  008f4	e58d3008	 str         r3, [sp, #8]
  008f8		 |$LN6@Read_RFID_|

; 288  :       // Loop for waiting for the data.
; 289  : 	do
; 290  : 	{
; 291  :         // Read the data from the serial port.      
; 292  : 		status = ReadFile(hDevComPort,&dwByte, 1, &dwBytesTransferred, 0);

  008f8	e3a03000	 mov         r3, #0
  008fc	e58d3000	 str         r3, [sp]
  00900	e28d300c	 add         r3, sp, #0xC
  00904	e3a02001	 mov         r2, #1
  00908	e28d1004	 add         r1, sp, #4
  0090c	e59d0030	 ldr         r0, [sp, #0x30]
  00910	eb000000	 bl          ReadFile
  00914	e58d001c	 str         r0, [sp, #0x1C]
  00918	e59d301c	 ldr         r3, [sp, #0x1C]
  0091c	e58d3010	 str         r3, [sp, #0x10]

; 293  :         if(!dwBytesTransferred)

  00920	e59d300c	 ldr         r3, [sp, #0xC]
  00924	e3530000	 cmp         r3, #0
  00928	1a000001	 bne         |$LN3@Read_RFID_|

; 294  :              break;                         

  0092c	ea000010	 b           |$LN4@Read_RFID_|

; 295  :         else  

  00930	ea00000c	 b           |$LN2@Read_RFID_|
  00934		 |$LN3@Read_RFID_|

; 296  : 		{
; 297  : 			iBytes++;

  00934	e59d3008	 ldr         r3, [sp, #8]
  00938	e2833001	 add         r3, r3, #1
  0093c	e58d3008	 str         r3, [sp, #8]

; 298  : 			if(iBytes<dwBufferSize)           

  00940	e59d2008	 ldr         r2, [sp, #8]
  00944	e59d3038	 ldr         r3, [sp, #0x38]
  00948	e1520003	 cmp         r2, r3
  0094c	2a000005	 bcs         |$LN1@Read_RFID_|

; 299  : 			{
; 300  : 				*lpDataBuffer=dwByte;

  00950	e5dd2004	 ldrb        r2, [sp, #4]
  00954	e59d3034	 ldr         r3, [sp, #0x34]
  00958	e5c32000	 strb        r2, [r3]

; 301  : 				lpDataBuffer++;

  0095c	e59d3034	 ldr         r3, [sp, #0x34]
  00960	e2833001	 add         r3, r3, #1
  00964	e58d3034	 str         r3, [sp, #0x34]
  00968		 |$LN1@Read_RFID_|
  00968		 |$LN2@Read_RFID_|

; 302  : 			}
; 303  : 		}
; 304  : 	} while (status); 

  00968	e59d3010	 ldr         r3, [sp, #0x10]
  0096c	e3530000	 cmp         r3, #0
  00970	1affffe0	 bne         |$LN6@Read_RFID_|
  00974		 |$LN4@Read_RFID_|

; 305  : 	*lpNumberOfBytesRead=iBytes;

  00974	e59d2008	 ldr         r2, [sp, #8]
  00978	e59d303c	 ldr         r3, [sp, #0x3C]
  0097c	e5832000	 str         r2, [r3]

; 306  :         
; 307  : 	return iBytes ? TRUE : FALSE;

  00980	e59d3008	 ldr         r3, [sp, #8]
  00984	e3530000	 cmp         r3, #0
  00988	0a000002	 beq         |$LN9@Read_RFID_|
  0098c	e3a03001	 mov         r3, #1
  00990	e58d3020	 str         r3, [sp, #0x20]
  00994	ea000001	 b           |$LN10@Read_RFID_|
  00998		 |$LN9@Read_RFID_|
  00998	e3a03000	 mov         r3, #0
  0099c	e58d3020	 str         r3, [sp, #0x20]
  009a0		 |$LN10@Read_RFID_|
  009a0	e59d3020	 ldr         r3, [sp, #0x20]
  009a4	e58d3018	 str         r3, [sp, #0x18]

; 308  : }

  009a8	e59d0018	 ldr         r0, [sp, #0x18]
  009ac	e28dd024	 add         sp, sp, #0x24
  009b0	e89d6000	 ldmia       sp, {sp, lr}
  009b4	e12fff1e	 bx          lr
  009b8		 |$M37428|

			 ENDP  ; |?Read_RFID_CMD@CComProtocol@@QAAHPAXPAEKPAK@Z|, CComProtocol::Read_RFID_CMD

	END
