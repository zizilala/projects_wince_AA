; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170\SRC\DRIVERS\sysctrl\power.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|g_pGPIORegisters| [ DATA ]
	EXPORT	|g_pMFPBase| [ DATA ]
	EXPORT	|lpPMER| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|g_pGPIORegisters| % 0x4
|g_pMFPBase| %	0x4
|lpPMER| %	0x4

  00000			 AREA	 |.data|, DATA
|g_szOPDescription| DCD |??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@|
	DCD	|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "8"
	DCB	0x0, "0", 0x0, "6", 0x0, " ", 0x0, "H", 0x0, "S", 0x0, "M"
	DCB	0x0, "H", 0x0, "Z", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "8"
	DCB	0x0, "0", 0x0, "6", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "6"
	DCB	0x0, "2", 0x0, "4", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "4"
	DCB	0x0, "1", 0x0, "6", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "2"
	DCB	0x0, "0", 0x0, "8", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@| DCB "R"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "O", 0x0, "S"
	DCB	0x0, "C", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T45931| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45928|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M45929|

			 ENDP  ; |SetEvent|

	EXPORT	|MapResources|
	IMPORT	|PXA_CTX_GetRegAddr2|
; File c:\wince600\platform\z2170\src\drivers\sysctrl\power.c

  00000			 AREA	 |.pdata|, PDATA
|$T45938| DCD	|$LN8@MapResourc|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MapResources| PROC

; 28   : {

  00000		 |$LN8@MapResourc|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45935|

; 29   :     if(g_pGPIORegisters == NULL)

  00004	e59f4058	 ldr         r4, [pc, #0x58]
  00008	e5943000	 ldr         r3, [r4]
  0000c	e3530000	 cmp         r3, #0
  00010	1a000003	 bne         |$LN3@MapResourc|

; 30   :     {
; 31   :         g_pGPIORegisters = (volatile PXA_GPIOREG_T *)PXA_CTX_GetRegAddr(PXA_PERIPHERAL_REGIDX_GPIO);

  00014	e3a01000	 mov         r1, #0
  00018	e3a0000c	 mov         r0, #0xC
  0001c	eb000000	 bl          PXA_CTX_GetRegAddr2
  00020	e5840000	 str         r0, [r4]
  00024		 |$LN3@MapResourc|

; 32   :     }
; 33   : 
; 34   :     if(g_pMFPBase == NULL)

  00024	e5943004	 ldr         r3, [r4, #4]
  00028	e3530000	 cmp         r3, #0
  0002c	1a000003	 bne         |$LN2@MapResourc|

; 35   :     {
; 36   :         g_pMFPBase = (volatile UINT32 *)PXA_CTX_GetRegAddr(PXA_PERIPHERAL_REGIDX_MFP);

  00030	e3a01000	 mov         r1, #0
  00034	e3a0000d	 mov         r0, #0xD
  00038	eb000000	 bl          PXA_CTX_GetRegAddr2
  0003c	e5840004	 str         r0, [r4, #4]
  00040		 |$LN2@MapResourc|

; 37   :     }
; 38   : 
; 39   :     if(lpPMER == NULL)

  00040	e5943008	 ldr         r3, [r4, #8]
  00044	e3530000	 cmp         r3, #0
  00048	1a000003	 bne         |$LN1@MapResourc|

; 40   :     {
; 41   :         lpPMER = (volatile UINT32 *)PXA_CTX_GetRegAddr(PXA_PERIPHERAL_REGIDX_PMER);

  0004c	e3a01000	 mov         r1, #0
  00050	e3a00032	 mov         r0, #0x32
  00054	eb000000	 bl          PXA_CTX_GetRegAddr2
  00058	e5840008	 str         r0, [r4, #8]
  0005c		 |$LN1@MapResourc|

; 42   :     }
; 43   : 
; 44   : }

  0005c	e8bd4010	 ldmia       sp!, {r4, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN9@MapResourc|
  00064		 |$LN10@MapResourc|
  00064	00000000	 DCD         |g_pGPIORegisters|
  00068		 |$M45936|

			 ENDP  ; |MapResources|

	EXPORT	|EnableGPIOReset|

  00000			 AREA	 |.pdata|, PDATA
|$T45947| DCD	|$LN6@EnableGPIO|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EnableGPIOReset| PROC

; 47   : {

  00000		 |$LN6@EnableGPIO|
  00000		 |$M45944|

; 48   :     if(lpPMER)

  00000	e59f3010	 ldr         r3, [pc, #0x10]
  00004	e5933000	 ldr         r3, [r3]
  00008	e3530000	 cmp         r3, #0

; 49   :     {
; 50   :         *lpPMER = 0x00;

  0000c	13a02000	 movne       r2, #0
  00010	15832000	 strne       r2, [r3]

; 51   :     }
; 52   : }

  00014	e12fff1e	 bx          lr
  00018		 |$LN7@EnableGPIO|
  00018		 |$LN8@EnableGPIO|
  00018	00000000	 DCD         |lpPMER|
  0001c		 |$M45945|

			 ENDP  ; |EnableGPIOReset|

	EXPORT	|SysCtrl_BCRGetHWPower|
	IMPORT	|PXA_GPIOGetLevel|

  00000			 AREA	 |.pdata|, PDATA
|$T45958| DCD	|$LN9@SysCtrl_BC|
	DCD	0x40001a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SysCtrl_BCRGetHWPower| PROC

; 55   : {

  00000		 |$LN9@SysCtrl_BC|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M45955|

; 56   :     PXA_LEVEL_T GPIOLevel;
; 57   : 
; 58   :     if(!g_pGPIORegisters || !g_pMFPBase)

  00008	e59f4054	 ldr         r4, [pc, #0x54]
  0000c	e5940000	 ldr         r0, [r4]
  00010	e3500000	 cmp         r0, #0
  00014	0a000002	 beq         |$LN3@SysCtrl_BC|
  00018	e5943004	 ldr         r3, [r4, #4]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000002	 bne         |$LN4@SysCtrl_BC|
  00024		 |$LN3@SysCtrl_BC|

; 59   :     {
; 60   :         MapResources();

  00024	eb000000	 bl          MapResources
  00028	e5940000	 ldr         r0, [r4]
  0002c	e5943004	 ldr         r3, [r4, #4]
  00030		 |$LN4@SysCtrl_BC|

; 61   :     }
; 62   : 
; 63   :     if(!g_pGPIORegisters || !g_pMFPBase)

  00030	e3500000	 cmp         r0, #0
  00034	0a000006	 beq         |$LN1@SysCtrl_BC|
  00038	e3530000	 cmp         r3, #0
  0003c	0a000004	 beq         |$LN1@SysCtrl_BC|

; 66   :     }
; 67   : 
; 68   :     PXA_GPIOGetLevel((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, &GPIOLevel);

  00040	e28d2000	 add         r2, sp, #0
  00044	e3a0105d	 mov         r1, #0x5D
  00048	eb000000	 bl          PXA_GPIOGetLevel

; 69   : 
; 70   :     return GPIOLevel;

  0004c	e59d0000	 ldr         r0, [sp]
  00050	ea000000	 b           |$LN5@SysCtrl_BC|
  00054		 |$LN1@SysCtrl_BC|

; 64   :     {
; 65   :         return FALSE;

  00054	e3a00000	 mov         r0, #0
  00058		 |$LN5@SysCtrl_BC|

; 71   : }

  00058	e28dd004	 add         sp, sp, #4
  0005c	e8bd4010	 ldmia       sp!, {r4, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN10@SysCtrl_BC|
  00064		 |$LN11@SysCtrl_BC|
  00064	00000000	 DCD         |g_pGPIORegisters|
  00068		 |$M45956|

			 ENDP  ; |SysCtrl_BCRGetHWPower|

	EXPORT	|GetTouchPanelState|
	EXPORT	|??_C@_1DM@DGOPOIFJ@?$AA?6?$AA?$AN?$AA?$CL?$AAG?$AAe?$AAt?$AAT?$AAo?$AAu?$AAc?$AAh?$AAP?$AAa?$AAn?$AAe?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T45971| DCD	|$LN7@GetTouchPa|
	DCD	0x40000e01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@DGOPOIFJ@?$AA?6?$AA?$AN?$AA?$CL?$AAG?$AAe?$AAt?$AAT?$AAo?$AAu?$AAc?$AAh?$AAP?$AAa?$AAn?$AAe?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xa
	DCB	0x0, 0xd, 0x0, "+", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "T"
	DCB	0x0, "o", 0x0, "u", 0x0, "c", 0x0, "h", 0x0, "P", 0x0, "a"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetTouchPanelState| PROC

; 113  : {

  00000		 |$LN7@GetTouchPa|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45968|

; 114  :     RETAILMSG(1, (TEXT("\n\r+GetTouchPanelState (%x) \r\n"), *(volatile BYTE *)TOUCH_PANEL_ENABLE_STATE_STORE_ADDR));

  00004	e59f4028	 ldr         r4, [pc, #0x28]
  00008	e59f0020	 ldr         r0, [pc, #0x20]
  0000c	e5d41000	 ldrb        r1, [r4]
  00010	eb000000	 bl          NKDbgPrintfW

; 115  : 
; 116  :     return (*(volatile BYTE *)TOUCH_PANEL_ENABLE_STATE_STORE_ADDR) ? TRUE : FALSE;

  00014	e5d43000	 ldrb        r3, [r4]
  00018	e3530000	 cmp         r3, #0
  0001c	13a00001	 movne       r0, #1

; 117  : 
; 118  : }

  00020	18bd4010	 ldmneia     sp!, {r4, lr}

; 115  : 
; 116  :     return (*(volatile BYTE *)TOUCH_PANEL_ENABLE_STATE_STORE_ADDR) ? TRUE : FALSE;

  00024	03a00000	 moveq       r0, #0

; 117  : 
; 118  : }

  00028	08bd4010	 ldmeqia     sp!, {r4, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$LN8@GetTouchPa|
  00030		 |$LN9@GetTouchPa|
  00030	00000000	 DCD         |??_C@_1DM@DGOPOIFJ@?$AA?6?$AA?$AN?$AA?$CL?$AAG?$AAe?$AAt?$AAT?$AAo?$AAu?$AAc?$AAh?$AAP?$AAa?$AAn?$AAe?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00034		 |$LN10@GetTouchPa|
  00034	a0008038	 DCD         0xa0008038
  00038		 |$M45969|

			 ENDP  ; |GetTouchPanelState|

	EXPORT	|SetTouchPanelState|
	EXPORT	|??_C@_1DM@HLJBIAKL@?$AA?6?$AA?$AN?$AA?9?$AAG?$AAe?$AAt?$AAT?$AAo?$AAu?$AAc?$AAh?$AAP?$AAa?$AAn?$AAe?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45984| DCD	|$LN5@SetTouchPa|
	DCD	0x40001001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@HLJBIAKL@?$AA?6?$AA?$AN?$AA?9?$AAG?$AAe?$AAt?$AAT?$AAo?$AAu?$AAc?$AAh?$AAP?$AAa?$AAn?$AAe?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xa
	DCB	0x0, 0xd, 0x0, "-", 0x0, "G", 0x0, "e", 0x0, "t", 0x0, "T"
	DCB	0x0, "o", 0x0, "u", 0x0, "c", 0x0, "h", 0x0, "P", 0x0, "a"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetTouchPanelState| PROC

; 122  : {

  00000		 |$LN5@SetTouchPa|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45981|
  00004	e1a04000	 mov         r4, r0

; 123  :     RETAILMSG(1, (TEXT("\n\r+GetTouchPanelState (%x) \r\n"), dwEnableStatus));

  00008	e59f002c	 ldr         r0, [pc, #0x2C]
  0000c	e1a01004	 mov         r1, r4
  00010	eb000000	 bl          NKDbgPrintfW

; 124  : 
; 125  :     *(volatile BYTE *)TOUCH_PANEL_ENABLE_STATE_STORE_ADDR = dwEnableStatus;

  00014	e59f301c	 ldr         r3, [pc, #0x1C]

; 126  : 
; 127  :     RETAILMSG(1, (TEXT("\n\r-GetTouchPanelState (%x) \r\n"), *(volatile BYTE *)TOUCH_PANEL_ENABLE_STATE_STORE_ADDR));

  00018	e59f0014	 ldr         r0, [pc, #0x14]
  0001c	e5c34000	 strb        r4, [r3]
  00020	e5d31000	 ldrb        r1, [r3]
  00024	eb000000	 bl          NKDbgPrintfW

; 128  : 
; 129  :     return TRUE;

  00028	e3a00001	 mov         r0, #1

; 130  : 
; 131  : }

  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN6@SetTouchPa|
  00034		 |$LN7@SetTouchPa|
  00034	00000000	 DCD         |??_C@_1DM@HLJBIAKL@?$AA?6?$AA?$AN?$AA?9?$AAG?$AAe?$AAt?$AAT?$AAo?$AAu?$AAc?$AAh?$AAP?$AAa?$AAn?$AAe?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00038		 |$LN8@SetTouchPa|
  00038	a0008038	 DCD         0xa0008038
  0003c		 |$LN9@SetTouchPa|
  0003c	00000000	 DCD         |??_C@_1DM@DGOPOIFJ@?$AA?6?$AA?$AN?$AA?$CL?$AAG?$AAe?$AAt?$AAT?$AAo?$AAu?$AAc?$AAh?$AAP?$AAa?$AAn?$AAe?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00040		 |$M45982|

			 ENDP  ; |SetTouchPanelState|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|SYSTEM_POWER_Thread|
	EXPORT	|??_C@_1BO@FBCCGPMB@?$AA?6?$AA?$AN?$AAP?$AAB?$AAT?$AA_?$AAR?$AAE?$AAS?$AAU?$AAM?$AAE?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@BBPNFBDN@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAI?$AAN?$AAS?$AAU?$AAF?$AAF?$AAI?$AAC?$AAI?$AAE?$AAN?$AAT?$AA_?$AAB?$AAU?$AAF?$AAF?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@PPNCAIHI@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAP?$AAI?$AAP?$AAE?$AA_?$AAN?$AAO?$AAT?$AA_?$AAC?$AAO?$AAN?$AAN?$AAE?$AAC?$AAT?$AAE?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@PAEKCGGL@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAE?$AAO?$AAR?$AA_?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@LEPGJPIG@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAU?$AAN?$AAK?$AAN?$AAO?$AAW?$AAN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@OHKFNKOM@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAR?$AAe?$AAa?$AAd?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@MLMJPKIH@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@LNIHIBBE@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAn?$AAo?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@LMNMFOND@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAZ?$AA2?$AA1?$AA7?$AA0?$AA?2?$AAS?$AAR?$AAC?$AA?2?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@EJBIAMLP@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@OJJMIIHJ@?$AAB?$AAk?$AAl?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|GetLastError|
	IMPORT	|ReadMsgQueue|
	IMPORT	|WaitForSingleObject|
	IMPORT	|RequestPowerNotifications|
	IMPORT	|CreateMsgQueue|
	IMPORT	|WaitForAPIReady|
	IMPORT	|CreateEventW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|memset|
	IMPORT	|__security_check_cookie|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T46012| DCD	|$LN27@SYSTEM_POW|
	DCD	0xc0008a02

  00000			 AREA	 |.xdata|, DATA
|$T46008| DCD	0xffffffe4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@FBCCGPMB@?$AA?6?$AA?$AN?$AAP?$AAB?$AAT?$AA_?$AAR?$AAE?$AAS?$AAU?$AAM?$AAE?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xa
	DCB	0x0, 0xd, 0x0, "P", 0x0, "B", 0x0, "T", 0x0, "_", 0x0, "R"
	DCB	0x0, "E", 0x0, "S", 0x0, "U", 0x0, "M", 0x0, "E", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@BBPNFBDN@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAI?$AAN?$AAS?$AAU?$AAF?$AAF?$AAI?$AAC?$AAI?$AAE?$AAN?$AAT?$AA_?$AAB?$AAU?$AAF?$AAF?$AAE@| DCB "p"
	DCB	0x0, "w", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R"
	DCB	0x0, "_", 0x0, "I", 0x0, "N", 0x0, "S", 0x0, "U", 0x0, "F"
	DCB	0x0, "F", 0x0, "I", 0x0, "C", 0x0, "I", 0x0, "E", 0x0, "N"
	DCB	0x0, "T", 0x0, "_", 0x0, "B", 0x0, "U", 0x0, "F", 0x0, "F"
	DCB	0x0, "E", 0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@PPNCAIHI@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAP?$AAI?$AAP?$AAE?$AA_?$AAN?$AAO?$AAT?$AA_?$AAC?$AAO?$AAN?$AAN?$AAE?$AAC?$AAT?$AAE?$AAD@| DCB "p"
	DCB	0x0, "w", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R"
	DCB	0x0, "_", 0x0, "P", 0x0, "I", 0x0, "P", 0x0, "E", 0x0, "_"
	DCB	0x0, "N", 0x0, "O", 0x0, "T", 0x0, "_", 0x0, "C", 0x0, "O"
	DCB	0x0, "N", 0x0, "N", 0x0, "E", 0x0, "C", 0x0, "T", 0x0, "E"
	DCB	0x0, "D", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@PAEKCGGL@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAE?$AAO?$AAR?$AA_?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "w", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, "E", 0x0, "E", 0x0, "O", 0x0, "R", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "M", 0x0, "E", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@LEPGJPIG@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAU?$AAN?$AAK?$AAN?$AAO?$AAW?$AAN?$AA?$AN?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "w", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R"
	DCB	0x0, "_", 0x0, "U", 0x0, "N", 0x0, "K", 0x0, "N", 0x0, "O"
	DCB	0x0, "W", 0x0, "N", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@OHKFNKOM@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAR?$AAe?$AAa?$AAd?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "w", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "M"
	DCB	0x0, "s", 0x0, "g", 0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "u"
	DCB	0x0, "e", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@MLMJPKIH@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "Y", 0x0, "S", 0x0, "T", 0x0, "E", 0x0, "M", 0x0, "_"
	DCB	0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_"
	DCB	0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@LNIHIBBE@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAn?$AAo?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt@| DCB "p"
	DCB	0x0, "w", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "P", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, "i", 0x0, "f", 0x0, "i", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "e"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "s", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@LMNMFOND@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAZ?$AA2?$AA1?$AA7?$AA0?$AA?2?$AAS?$AAR?$AAC?$AA?2?$AAD@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "Z", 0x0, "2", 0x0, "1", 0x0, "7"
	DCB	0x0, "0", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C", 0x0, "\\"
	DCB	0x0, "D", 0x0, "R", 0x0, "I", 0x0, "V", 0x0, "E", 0x0, "R"
	DCB	0x0, "S", 0x0, "\\", 0x0, "s", 0x0, "y", 0x0, "s", 0x0, "c"
	DCB	0x0, "t", 0x0, "r", 0x0, "l", 0x0, "\\", 0x0, ".", 0x0, "\\"
	DCB	0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "."
	DCB	0x0, "c", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@EJBIAMLP@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "p"
	DCB	0x0, "w", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, ":", 0x0, "C", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "M", 0x0, "s", 0x0, "g", 0x0, "Q", 0x0, "u"
	DCB	0x0, "e", 0x0, "u", 0x0, "e", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@OJJMIIHJ@?$AAB?$AAk?$AAl?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@| DCB "B"
	DCB	0x0, "k", 0x0, "l", 0x0, "A", 0x0, "c", 0x0, "t", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170\src\drivers\sysctrl\power.c

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T46008|

  00008		 |SYSTEM_POWER_Thread| PROC

; 135  : {

  00008		 |$LN27@SYSTEM_POW|
  00008	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  0000c	e24dde2b	 sub         sp, sp, #0x2B, 28
  00010		 |$M46009|
  00010	e59f3214	 ldr         r3, [pc, #0x214]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d32ac	 str         r3, [sp, #0x2AC]

; 136  : 
; 137  : 
; 138  :     HANDLE hMsgQ;
; 139  :     MSGQUEUEOPTIONS Options;
; 140  : 
; 141  :     DWORD dwNumberOfBytesRead;
; 142  :     DWORD dwErr;
; 143  :     DWORD flags;
; 144  : 
; 145  :     BYTE buf[QUEUE_SIZE];
; 146  : 
; 147  :     HANDLE hbklNotifications =  CreateEvent(NULL, FALSE, FALSE, LCD_BACKLIGHT_ACTIVE_NOTIFY);

  0001c	e59f3204	 ldr         r3, [pc, #0x204]
  00020	e3a02000	 mov         r2, #0
  00024	e3a01000	 mov         r1, #0
  00028	e3a00000	 mov         r0, #0
  0002c	eb000000	 bl          CreateEventW

; 148  : 
; 149  :     /*while(!IsAPIReady(SH_SHELL))
; 150  :     {
; 151  :         Sleep(1000);
; 152  :     }*/
; 153  :     WaitForAPIReady(SH_SHELL, INFINITE);

  00030	e3e08000	 mvn         r8, #0
  00034	e1a05000	 mov         r5, r0
  00038	e3a00055	 mov         r0, #0x55
  0003c	e1a01008	 mov         r1, r8
  00040	eb000000	 bl          WaitForAPIReady

; 154  : 
; 155  :     memset(&Options, 0, sizeof(Options));

  00044	e3a02014	 mov         r2, #0x14
  00048	e3a01000	 mov         r1, #0
  0004c	e28d000c	 add         r0, sp, #0xC
  00050	eb000000	 bl          memset

; 156  : 
; 157  :     Options.dwSize = sizeof(MSGQUEUEOPTIONS);
; 158  :     Options.dwFlags = 0;
; 159  :     Options.dwMaxMessages = QUEUE_ENTRIES;

  00054	e3a01003	 mov         r1, #3

; 160  :     Options.cbMaxMessage = sizeof(POWER_BROADCAST) + MAX_NAMELEN;

  00058	e3a000d8	 mov         r0, #0xD8

; 161  :     Options.bReadAccess = TRUE;

  0005c	e58d1014	 str         r1, [sp, #0x14]
  00060	e58d0018	 str         r0, [sp, #0x18]
  00064	e3a03014	 mov         r3, #0x14
  00068	e3a02000	 mov         r2, #0
  0006c	e3a0e001	 mov         lr, #1

; 162  : 
; 163  : 
; 164  :     hMsgQ = CreateMsgQueue(NULL, &Options);

  00070	e28d100c	 add         r1, sp, #0xC
  00074	e3a00000	 mov         r0, #0
  00078	e58d300c	 str         r3, [sp, #0xC]
  0007c	e58d2010	 str         r2, [sp, #0x10]
  00080	e58de01c	 str         lr, [sp, #0x1C]
  00084	eb000000	 bl          CreateMsgQueue
  00088	e1b04000	 movs        r4, r0

; 165  : 
; 166  :     if(!hMsgQ)

  0008c	1a000005	 bne         |$LN16@SYSTEM_POW|

; 167  :     {
; 168  :         ERRORMSG(1, (TEXT("pwrtest:CreateMsgQueue failed\r\n")));

  00090	e59f117c	 ldr         r1, [pc, #0x17C]
  00094	e59f0168	 ldr         r0, [pc, #0x168]
  00098	e3a020a8	 mov         r2, #0xA8
  0009c	eb000000	 bl          NKDbgPrintfW
  000a0	e59f017c	 ldr         r0, [pc, #0x17C]

; 169  :         return 0;

  000a4	ea000009	 b           |$LN24@SYSTEM_POW|
  000a8		 |$LN16@SYSTEM_POW|

; 170  :     }
; 171  : 
; 172  :     if(!RequestPowerNotifications(hMsgQ, POWER_NOTIFY_ALL))

  000a8	e1a01008	 mov         r1, r8
  000ac	e1a00004	 mov         r0, r4
  000b0	eb000000	 bl          RequestPowerNotifications
  000b4	e3500000	 cmp         r0, #0
  000b8	1a00000b	 bne         |$LN15@SYSTEM_POW|

; 173  :     {
; 174  :         ERRORMSG(1, (TEXT("pwrtest:Register Power notification events failed\r\n")));

  000bc	e59f1150	 ldr         r1, [pc, #0x150]
  000c0	e59f013c	 ldr         r0, [pc, #0x13C]
  000c4	e3a020ae	 mov         r2, #0xAE
  000c8	eb000000	 bl          NKDbgPrintfW
  000cc	e59f014c	 ldr         r0, [pc, #0x14C]
  000d0		 |$LN24@SYSTEM_POW|
  000d0	eb000000	 bl          NKDbgPrintfW

; 175  :         return 0;

  000d4	e59d02ac	 ldr         r0, [sp, #0x2AC]
  000d8	eb000000	 bl          __security_check_cookie
  000dc	e3a00000	 mov         r0, #0

; 250  : 
; 251  :     return 0;
; 252  : }

  000e0	e28dde2b	 add         sp, sp, #0x2B, 28
  000e4	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000e8	e12fff1e	 bx          lr
  000ec		 |$LN15@SYSTEM_POW|

; 176  :     }
; 177  : 
; 178  : 	RETAILMSG(1, (TEXT("SYSTEM_POWER_Thread Start!!!!\r\n")));

  000ec	e59f0128	 ldr         r0, [pc, #0x128]
  000f0	eb000000	 bl          NKDbgPrintfW
  000f4	e3a03c05	 mov         r3, #5, 24
  000f8	e38360b4	 orr         r6, r3, #0xB4
  000fc	e28d7020	 add         r7, sp, #0x20
  00100		 |$LL14@SYSTEM_POW|

; 179  : 	
; 180  :     while(1)
; 181  :     {
; 182  :         WaitForSingleObject(hMsgQ, INFINITE);

  00100	e1a01008	 mov         r1, r8
  00104	e1a00004	 mov         r0, r4
  00108	eb000000	 bl          WaitForSingleObject

; 183  : 
; 184  :         if(!ReadMsgQueue(hMsgQ,
; 185  :                          &buf,
; 186  :                          QUEUE_SIZE,
; 187  :                          &dwNumberOfBytesRead,
; 188  :                          INFINITE,
; 189  :                          &flags))

  0010c	e28d3008	 add         r3, sp, #8
  00110	e3a02fa2	 mov         r2, #0xA2, 30
  00114	e28d1024	 add         r1, sp, #0x24
  00118	e1a00004	 mov         r0, r4
  0011c	e58d7004	 str         r7, [sp, #4]
  00120	e58d8000	 str         r8, [sp]
  00124	eb000000	 bl          ReadMsgQueue
  00128	e3500000	 cmp         r0, #0
  0012c	1a000024	 bne         |$LN12@SYSTEM_POW|

; 190  :         {
; 191  :             ERRORMSG(1, (TEXT("pwrtest:ReadMsgQueue failed\r\n")));

  00130	e59f10dc	 ldr         r1, [pc, #0xDC]
  00134	e59f00c8	 ldr         r0, [pc, #0xC8]
  00138	e3a020bf	 mov         r2, #0xBF
  0013c	eb000000	 bl          NKDbgPrintfW
  00140	e59f00d0	 ldr         r0, [pc, #0xD0]
  00144	eb000000	 bl          NKDbgPrintfW

; 192  :             dwErr = GetLastError();

  00148	eb000000	 bl          GetLastError

; 204  :                     break;
; 205  :                 default:
; 206  :                     ERRORMSG(1, (TEXT("pwrtest:ERROR_UNKNOWN\r\n")));

  0014c	e59f10c0	 ldr         r1, [pc, #0xC0]
  00150	e350007a	 cmp         r0, #0x7A
  00154	0a000014	 beq         |$LN9@SYSTEM_POW|

; 193  : 
; 194  :             switch(dwErr)

  00158	e35000e9	 cmp         r0, #0xE9
  0015c	0a00000c	 beq         |$LN8@SYSTEM_POW|
  00160	e1500006	 cmp         r0, r6

; 204  :                     break;
; 205  :                 default:
; 206  :                     ERRORMSG(1, (TEXT("pwrtest:ERROR_UNKNOWN\r\n")));

  00164	e59f0098	 ldr         r0, [pc, #0x98]
  00168	0a000004	 beq         |$LN7@SYSTEM_POW|
  0016c	e3a020ce	 mov         r2, #0xCE
  00170	eb000000	 bl          NKDbgPrintfW
  00174	e59f0094	 ldr         r0, [pc, #0x94]
  00178	eb000000	 bl          NKDbgPrintfW

; 207  :             }
; 208  :         }
; 209  :         else if(dwNumberOfBytesRead >= sizeof(POWER_BROADCAST))

  0017c	eaffffdf	 b           |$LL14@SYSTEM_POW|
  00180		 |$LN7@SYSTEM_POW|

; 201  :                     break;
; 202  :                 case ERROR_TIMEOUT:
; 203  :                     ERRORMSG(1, (TEXT("pwrtest:EEOR_TIMEOUT\r\n")));

  00180	e3a020cb	 mov         r2, #0xCB
  00184	eb000000	 bl          NKDbgPrintfW
  00188	e59f007c	 ldr         r0, [pc, #0x7C]
  0018c	eb000000	 bl          NKDbgPrintfW

; 207  :             }
; 208  :         }
; 209  :         else if(dwNumberOfBytesRead >= sizeof(POWER_BROADCAST))

  00190	eaffffda	 b           |$LL14@SYSTEM_POW|
  00194		 |$LN8@SYSTEM_POW|

; 198  :                     break;
; 199  :                 case ERROR_PIPE_NOT_CONNECTED:
; 200  :                     ERRORMSG(1, (TEXT("pwrtest:ERROR_PIPE_NOT_CONNECTED\r\n")));

  00194	e59f0068	 ldr         r0, [pc, #0x68]
  00198	e3a020c8	 mov         r2, #0xC8
  0019c	eb000000	 bl          NKDbgPrintfW
  001a0	e59f0060	 ldr         r0, [pc, #0x60]
  001a4	eb000000	 bl          NKDbgPrintfW

; 207  :             }
; 208  :         }
; 209  :         else if(dwNumberOfBytesRead >= sizeof(POWER_BROADCAST))

  001a8	eaffffd4	 b           |$LL14@SYSTEM_POW|
  001ac		 |$LN9@SYSTEM_POW|

; 195  :             {
; 196  :                 case ERROR_INSUFFICIENT_BUFFER:
; 197  :                     ERRORMSG(1, (TEXT("pwrtest:ERROR_INSUFFICIENT_BUFFER\r\n")));

  001ac	e59f0050	 ldr         r0, [pc, #0x50]
  001b0	e3a020c5	 mov         r2, #0xC5
  001b4	eb000000	 bl          NKDbgPrintfW
  001b8	e59f0040	 ldr         r0, [pc, #0x40]
  001bc	eb000000	 bl          NKDbgPrintfW

; 207  :             }
; 208  :         }
; 209  :         else if(dwNumberOfBytesRead >= sizeof(POWER_BROADCAST))

  001c0	eaffffce	 b           |$LL14@SYSTEM_POW|
  001c4		 |$LN12@SYSTEM_POW|
  001c4	e59d3008	 ldr         r3, [sp, #8]
  001c8	e3530010	 cmp         r3, #0x10
  001cc	3affffcb	 bcc         |$LL14@SYSTEM_POW|

; 210  :         {
; 211  :             PPOWER_BROADCAST pB = (PPOWER_BROADCAST)&buf;
; 212  : 
; 213  : 
; 214  :             if(pB->Message == PBT_RESUME)

  001d0	e59d3024	 ldr         r3, [sp, #0x24]
  001d4	e3530002	 cmp         r3, #2
  001d8	1affffc8	 bne         |$LL14@SYSTEM_POW|

; 215  :             {
; 216  :                 RETAILMSG(1, (TEXT("\n\rPBT_RESUME\r\n")));

  001dc	e59f0018	 ldr         r0, [pc, #0x18]
  001e0	eb000000	 bl          NKDbgPrintfW

; 217  : 
; 218  : 
; 219  : 
; 220  : 
; 221  :                 if(hbklNotifications)

  001e4	e3550000	 cmp         r5, #0
  001e8	0affffc4	 beq         |$LL14@SYSTEM_POW|

; 222  :                 {
; 223  :                     SetEvent(hbklNotifications);

  001ec	e3a01003	 mov         r1, #3
  001f0	e1a00005	 mov         r0, r5
  001f4	eb000000	 bl          EventModify

; 224  :                 }
; 225  : 
; 226  : 
; 227  :             }//end of PBT_RESUME
; 228  : 
; 229  : 
; 230  : 
; 231  :             if((pB->Message == PBT_TRANSITION) &&
; 232  :                (POWER_STATE(pB->Flags) == POWER_STATE_SUSPEND)
; 233  :               )
; 234  :             {
; 235  :                 /*
; 236  : 
; 237  :                 BOOL  BTPowerState;
; 238  : 
; 239  :                 if(SysGetBluetoothPower(&BTPowerState))
; 240  :                 {
; 241  :                  if(BTPowerState)
; 242  :                       SysSetBluetoothPower(FALSE);
; 243  : 
; 244  :                 }	*/
; 245  : 
; 246  :             }
; 247  : 
; 248  :         }
; 249  :     }

  001f8	eaffffc0	 b           |$LL14@SYSTEM_POW|
  001fc		 |$LN28@SYSTEM_POW|
  001fc		 |$LN29@SYSTEM_POW|
  001fc	00000000	 DCD         |??_C@_1BO@FBCCGPMB@?$AA?6?$AA?$AN?$AAP?$AAB?$AAT?$AA_?$AAR?$AAE?$AAS?$AAU?$AAM?$AAE?$AA?$AN?$AA?6?$AA?$AA@|
  00200		 |$LN30@SYSTEM_POW|
  00200	00000000	 DCD         |??_C@_1EI@BBPNFBDN@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAI?$AAN?$AAS?$AAU?$AAF?$AAF?$AAI?$AAC?$AAI?$AAE?$AAN?$AAT?$AA_?$AAB?$AAU?$AAF?$AAF?$AAE@|
  00204		 |$LN31@SYSTEM_POW|
  00204	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00208		 |$LN32@SYSTEM_POW|
  00208	00000000	 DCD         |??_C@_1EG@PPNCAIHI@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAP?$AAI?$AAP?$AAE?$AA_?$AAN?$AAO?$AAT?$AA_?$AAC?$AAO?$AAN?$AAN?$AAE?$AAC?$AAT?$AAE?$AAD@|
  0020c		 |$LN33@SYSTEM_POW|
  0020c	00000000	 DCD         |??_C@_1CO@PAEKCGGL@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAE?$AAO?$AAR?$AA_?$AAT?$AAI?$AAM?$AAE?$AAO?$AAU?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  00210		 |$LN34@SYSTEM_POW|
  00210	00000000	 DCD         |??_C@_1DA@LEPGJPIG@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAU?$AAN?$AAK?$AAN?$AAO?$AAW?$AAN?$AA?$AN?$AA?6?$AA?$AA@|
  00214		 |$LN35@SYSTEM_POW|
  00214	00000000	 DCD         |??_C@_1HC@LMNMFOND@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAZ?$AA2?$AA1?$AA7?$AA0?$AA?2?$AAS?$AAR?$AAC?$AA?2?$AAD@|
  00218		 |$LN36@SYSTEM_POW|
  00218	00000000	 DCD         |??_C@_1DM@OHKFNKOM@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAR?$AAe?$AAa?$AAd?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0021c		 |$LN37@SYSTEM_POW|
  0021c	00000000	 DCD         |??_C@_1EA@MLMJPKIH@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  00220		 |$LN38@SYSTEM_POW|
  00220	00000000	 DCD         |??_C@_1GI@LNIHIBBE@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAn?$AAo?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt@|
  00224		 |$LN39@SYSTEM_POW|
  00224	00000000	 DCD         |??_C@_1EA@EJBIAMLP@?$AAp?$AAw?$AAr?$AAt?$AAe?$AAs?$AAt?$AA?3?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAM?$AAs?$AAg?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00228		 |$LN40@SYSTEM_POW|
  00228	00000000	 DCD         |??_C@_1BE@OJJMIIHJ@?$AAB?$AAk?$AAl?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@|
  0022c		 |$LN41@SYSTEM_POW|
  0022c	00000000	 DCD         |__security_cookie|
  00230		 |$M46010|

			 ENDP  ; |SYSTEM_POWER_Thread|

	EXPORT	|DisableBTUart_Pin|
	IMPORT	|PXA_GPIOSetLevel|
	IMPORT	|PXA_GPIOSetDirection|
	IMPORT	|PXA_MFPSetAfDs|

  00000			 AREA	 |.pdata|, PDATA
|$T46034| DCD	|$LN5@DisableBTU|
	DCD	0x40006501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DisableBTUart_Pin| PROC

; 255  : {

  00000		 |$LN5@DisableBTU|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46031|

; 256  : 	//GPIO112 BT_RXD
; 257  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO112_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00004	e59f4184	 ldr         r4, [pc, #0x184]
  00008	e3a05c06	 mov         r5, #6, 24
  0000c	e3a03002	 mov         r3, #2
  00010	e5940004	 ldr         r0, [r4, #4]
  00014	e3a02000	 mov         r2, #0
  00018	e3851034	 orr         r1, r5, #0x34
  0001c	eb000000	 bl          PXA_MFPSetAfDs

; 258  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_112, PXA_GPIO_DIRECTION_OUT);

  00020	e5940000	 ldr         r0, [r4]
  00024	e3a02001	 mov         r2, #1
  00028	e3a01070	 mov         r1, #0x70
  0002c	eb000000	 bl          PXA_GPIOSetDirection

; 259  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_112,PXA_LO);

  00030	e5940000	 ldr         r0, [r4]
  00034	e3a02000	 mov         r2, #0
  00038	e3a01070	 mov         r1, #0x70
  0003c	eb000000	 bl          PXA_GPIOSetLevel

; 260  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_112, PXA_GPIO_DIRECTION_IN);

  00040	e5940000	 ldr         r0, [r4]
  00044	e3a02000	 mov         r2, #0
  00048	e3a01070	 mov         r1, #0x70
  0004c	eb000000	 bl          PXA_GPIOSetDirection

; 261  : 
; 262  : 	//GPIO113 BT_TXD
; 263  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO113_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00050	e5940004	 ldr         r0, [r4, #4]
  00054	e3a03002	 mov         r3, #2
  00058	e3a02000	 mov         r2, #0
  0005c	e3851038	 orr         r1, r5, #0x38
  00060	eb000000	 bl          PXA_MFPSetAfDs

; 264  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_113, PXA_GPIO_DIRECTION_OUT);

  00064	e5940000	 ldr         r0, [r4]
  00068	e3a02001	 mov         r2, #1
  0006c	e3a01071	 mov         r1, #0x71
  00070	eb000000	 bl          PXA_GPIOSetDirection

; 265  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_113,PXA_LO);

  00074	e5940000	 ldr         r0, [r4]
  00078	e3a02000	 mov         r2, #0
  0007c	e3a01071	 mov         r1, #0x71
  00080	eb000000	 bl          PXA_GPIOSetLevel

; 266  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_113, PXA_GPIO_DIRECTION_IN);

  00084	e5940000	 ldr         r0, [r4]
  00088	e3a02000	 mov         r2, #0
  0008c	e3a01071	 mov         r1, #0x71
  00090	eb000000	 bl          PXA_GPIOSetDirection

; 267  : 	
; 268  : 	//GPIO114 BT_CTS
; 269  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO114_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00094	e5940004	 ldr         r0, [r4, #4]
  00098	e3a03002	 mov         r3, #2
  0009c	e3a02000	 mov         r2, #0
  000a0	e385103c	 orr         r1, r5, #0x3C
  000a4	eb000000	 bl          PXA_MFPSetAfDs

; 270  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_114, PXA_GPIO_DIRECTION_OUT);

  000a8	e5940000	 ldr         r0, [r4]
  000ac	e3a02001	 mov         r2, #1
  000b0	e3a01072	 mov         r1, #0x72
  000b4	eb000000	 bl          PXA_GPIOSetDirection

; 271  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_114,PXA_LO);

  000b8	e5940000	 ldr         r0, [r4]
  000bc	e3a02000	 mov         r2, #0
  000c0	e3a01072	 mov         r1, #0x72
  000c4	eb000000	 bl          PXA_GPIOSetLevel

; 272  : 	//PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_114, PXA_GPIO_DIRECTION_IN);
; 273  :   
; 274  : 	//GPIO111 BT_RTS
; 275  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO111_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  000c8	e5940004	 ldr         r0, [r4, #4]
  000cc	e3a03002	 mov         r3, #2
  000d0	e3a02000	 mov         r2, #0
  000d4	e3a01e63	 mov         r1, #0x63, 28
  000d8	eb000000	 bl          PXA_MFPSetAfDs

; 276  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_111, PXA_GPIO_DIRECTION_OUT);

  000dc	e5940000	 ldr         r0, [r4]
  000e0	e3a02001	 mov         r2, #1
  000e4	e3a0106f	 mov         r1, #0x6F
  000e8	eb000000	 bl          PXA_GPIOSetDirection

; 277  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_111,PXA_LO);

  000ec	e5940000	 ldr         r0, [r4]
  000f0	e3a02000	 mov         r2, #0
  000f4	e3a0106f	 mov         r1, #0x6F
  000f8	eb000000	 bl          PXA_GPIOSetLevel

; 278  : 	//PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_111, PXA_GPIO_DIRECTION_IN);
; 279  : 
; 280  : 	//GPIO91 BT_nRST
; 281  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO91_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  000fc	e5940004	 ldr         r0, [r4, #4]
  00100	e3a03c05	 mov         r3, #5, 24
  00104	e383100c	 orr         r1, r3, #0xC
  00108	e3a03002	 mov         r3, #2
  0010c	e3a02000	 mov         r2, #0
  00110	eb000000	 bl          PXA_MFPSetAfDs

; 282  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_91, PXA_GPIO_DIRECTION_OUT);

  00114	e5940000	 ldr         r0, [r4]
  00118	e3a02001	 mov         r2, #1
  0011c	e3a0105b	 mov         r1, #0x5B
  00120	eb000000	 bl          PXA_GPIOSetDirection

; 283  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_91,PXA_LO);

  00124	e5940000	 ldr         r0, [r4]
  00128	e3a02000	 mov         r2, #0
  0012c	e3a0105b	 mov         r1, #0x5B
  00130	eb000000	 bl          PXA_GPIOSetLevel

; 284  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_91, PXA_GPIO_DIRECTION_IN);    

  00134	e5940000	 ldr         r0, [r4]
  00138	e3a02000	 mov         r2, #0
  0013c	e3a0105b	 mov         r1, #0x5B
  00140	eb000000	 bl          PXA_GPIOSetDirection

; 285  :                          
; 286  : 	//GPIO92 BT_PWREN
; 287  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO92_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00144	e5940004	 ldr         r0, [r4, #4]
  00148	e3a03002	 mov         r3, #2
  0014c	e3a02000	 mov         r2, #0
  00150	e3a01e51	 mov         r1, #0x51, 28
  00154	eb000000	 bl          PXA_MFPSetAfDs

; 288  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_92, PXA_GPIO_DIRECTION_OUT);

  00158	e5940000	 ldr         r0, [r4]
  0015c	e3a02001	 mov         r2, #1
  00160	e3a0105c	 mov         r1, #0x5C
  00164	eb000000	 bl          PXA_GPIOSetDirection

; 289  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_92,PXA_LO); 

  00168	e5940000	 ldr         r0, [r4]
  0016c	e3a02000	 mov         r2, #0
  00170	e3a0105c	 mov         r1, #0x5C
  00174	eb000000	 bl          PXA_GPIOSetLevel

; 290  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_92, PXA_GPIO_DIRECTION_IN);      

  00178	e5940000	 ldr         r0, [r4]
  0017c	e3a02000	 mov         r2, #0
  00180	e3a0105c	 mov         r1, #0x5C
  00184	eb000000	 bl          PXA_GPIOSetDirection

; 291  : 
; 292  : }

  00188	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0018c	e12fff1e	 bx          lr
  00190		 |$LN6@DisableBTU|
  00190		 |$LN7@DisableBTU|
  00190	00000000	 DCD         |g_pGPIORegisters|
  00194		 |$M46032|

			 ENDP  ; |DisableBTUart_Pin|

	EXPORT	|DisableUart3_Pin|

  00000			 AREA	 |.pdata|, PDATA
|$T46043| DCD	|$LN5@DisableUar|
	DCD	0x40006d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DisableUart3_Pin| PROC

; 295  : {

  00000		 |$LN5@DisableUar|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46040|

; 296  : 	//GPIO107 ENF_CTS
; 297  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO107_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00004	e59f41a4	 ldr         r4, [pc, #0x1A4]
  00008	e3a03002	 mov         r3, #2
  0000c	e3a02000	 mov         r2, #0
  00010	e5940004	 ldr         r0, [r4, #4]
  00014	e3a01e62	 mov         r1, #0x62, 28
  00018	eb000000	 bl          PXA_MFPSetAfDs

; 298  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_107, PXA_GPIO_DIRECTION_OUT);

  0001c	e5940000	 ldr         r0, [r4]
  00020	e3a02001	 mov         r2, #1
  00024	e3a0106b	 mov         r1, #0x6B
  00028	eb000000	 bl          PXA_GPIOSetDirection

; 299  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_107,PXA_LO);

  0002c	e5940000	 ldr         r0, [r4]
  00030	e3a02000	 mov         r2, #0
  00034	e3a0106b	 mov         r1, #0x6B
  00038	eb000000	 bl          PXA_GPIOSetLevel

; 300  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_107, PXA_GPIO_DIRECTION_IN);

  0003c	e5940000	 ldr         r0, [r4]
  00040	e3a02000	 mov         r2, #0
  00044	e3a0106b	 mov         r1, #0x6B
  00048	eb000000	 bl          PXA_GPIOSetDirection

; 301  : 
; 302  : 	//GPIO108 ENG_RTS
; 303  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO108_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  0004c	e5940004	 ldr         r0, [r4, #4]
  00050	e3a05c06	 mov         r5, #6, 24
  00054	e3851024	 orr         r1, r5, #0x24
  00058	e3a03002	 mov         r3, #2
  0005c	e3a02000	 mov         r2, #0
  00060	eb000000	 bl          PXA_MFPSetAfDs

; 304  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_108, PXA_GPIO_DIRECTION_OUT);

  00064	e5940000	 ldr         r0, [r4]
  00068	e3a02001	 mov         r2, #1
  0006c	e3a0106c	 mov         r1, #0x6C
  00070	eb000000	 bl          PXA_GPIOSetDirection

; 305  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_108,PXA_LO);

  00074	e5940000	 ldr         r0, [r4]
  00078	e3a02000	 mov         r2, #0
  0007c	e3a0106c	 mov         r1, #0x6C
  00080	eb000000	 bl          PXA_GPIOSetLevel

; 306  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_108, PXA_GPIO_DIRECTION_IN);

  00084	e5940000	 ldr         r0, [r4]
  00088	e3a02000	 mov         r2, #0
  0008c	e3a0106c	 mov         r1, #0x6C
  00090	eb000000	 bl          PXA_GPIOSetDirection

; 307  :      
; 308  : 	//GPIO109 ENG_TXD
; 309  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO109_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00094	e5940004	 ldr         r0, [r4, #4]
  00098	e3a03002	 mov         r3, #2
  0009c	e3a02000	 mov         r2, #0
  000a0	e3851028	 orr         r1, r5, #0x28
  000a4	eb000000	 bl          PXA_MFPSetAfDs

; 310  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_109, PXA_GPIO_DIRECTION_OUT);

  000a8	e5940000	 ldr         r0, [r4]
  000ac	e3a02001	 mov         r2, #1
  000b0	e3a0106d	 mov         r1, #0x6D
  000b4	eb000000	 bl          PXA_GPIOSetDirection

; 311  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_109,PXA_LO);

  000b8	e5940000	 ldr         r0, [r4]
  000bc	e3a02000	 mov         r2, #0
  000c0	e3a0106d	 mov         r1, #0x6D
  000c4	eb000000	 bl          PXA_GPIOSetLevel

; 312  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_109, PXA_GPIO_DIRECTION_IN);

  000c8	e5940000	 ldr         r0, [r4]
  000cc	e3a02000	 mov         r2, #0
  000d0	e3a0106d	 mov         r1, #0x6D
  000d4	eb000000	 bl          PXA_GPIOSetDirection

; 313  : 
; 314  : 	//GPIO110 ENG_RXD
; 315  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO110_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  000d8	e5940004	 ldr         r0, [r4, #4]
  000dc	e3a03002	 mov         r3, #2
  000e0	e3a02000	 mov         r2, #0
  000e4	e385102c	 orr         r1, r5, #0x2C
  000e8	eb000000	 bl          PXA_MFPSetAfDs

; 316  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_110, PXA_GPIO_DIRECTION_OUT);

  000ec	e5940000	 ldr         r0, [r4]
  000f0	e3a02001	 mov         r2, #1
  000f4	e3a0106e	 mov         r1, #0x6E
  000f8	eb000000	 bl          PXA_GPIOSetDirection

; 317  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_110,PXA_LO);               

  000fc	e5940000	 ldr         r0, [r4]
  00100	e3a02000	 mov         r2, #0
  00104	e3a0106e	 mov         r1, #0x6E
  00108	eb000000	 bl          PXA_GPIOSetLevel

; 318  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_110, PXA_GPIO_DIRECTION_IN);  

  0010c	e5940000	 ldr         r0, [r4]
  00110	e3a02000	 mov         r2, #0
  00114	e3a0106e	 mov         r1, #0x6E
  00118	eb000000	 bl          PXA_GPIOSetDirection

; 319  : 
; 320  : 	//GPIO93 BC_PWREN
; 321  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO93_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  0011c	e5940004	 ldr         r0, [r4, #4]
  00120	e3a05c05	 mov         r5, #5, 24
  00124	e3851014	 orr         r1, r5, #0x14
  00128	e3a03002	 mov         r3, #2
  0012c	e3a02000	 mov         r2, #0
  00130	eb000000	 bl          PXA_MFPSetAfDs

; 322  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_GPIO_DIRECTION_OUT);

  00134	e5940000	 ldr         r0, [r4]
  00138	e3a02001	 mov         r2, #1
  0013c	e3a0105d	 mov         r1, #0x5D
  00140	eb000000	 bl          PXA_GPIOSetDirection

; 323  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_93,PXA_LO);

  00144	e5940000	 ldr         r0, [r4]
  00148	e3a02000	 mov         r2, #0
  0014c	e3a0105d	 mov         r1, #0x5D
  00150	eb000000	 bl          PXA_GPIOSetLevel

; 324  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_GPIO_DIRECTION_IN);

  00154	e5940000	 ldr         r0, [r4]
  00158	e3a02000	 mov         r2, #0
  0015c	e3a0105d	 mov         r1, #0x5D
  00160	eb000000	 bl          PXA_GPIOSetDirection

; 325  :                          
; 326  : 	//GPIO94 BC_nTRIG
; 327  : 	PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO94_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00164	e5940004	 ldr         r0, [r4, #4]
  00168	e3a03002	 mov         r3, #2
  0016c	e3a02000	 mov         r2, #0
  00170	e3851018	 orr         r1, r5, #0x18
  00174	eb000000	 bl          PXA_MFPSetAfDs

; 328  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_94, PXA_GPIO_DIRECTION_OUT);

  00178	e5940000	 ldr         r0, [r4]
  0017c	e3a02001	 mov         r2, #1
  00180	e3a0105e	 mov         r1, #0x5E
  00184	eb000000	 bl          PXA_GPIOSetDirection

; 329  : 	PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_94,PXA_LO);                       

  00188	e5940000	 ldr         r0, [r4]
  0018c	e3a02000	 mov         r2, #0
  00190	e3a0105e	 mov         r1, #0x5E
  00194	eb000000	 bl          PXA_GPIOSetLevel

; 330  : 	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_94, PXA_GPIO_DIRECTION_IN);

  00198	e5940000	 ldr         r0, [r4]
  0019c	e3a02000	 mov         r2, #0
  001a0	e3a0105e	 mov         r1, #0x5E
  001a4	eb000000	 bl          PXA_GPIOSetDirection

; 331  : }

  001a8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  001ac	e12fff1e	 bx          lr
  001b0		 |$LN6@DisableUar|
  001b0		 |$LN7@DisableUar|
  001b0	00000000	 DCD         |g_pGPIORegisters|
  001b4		 |$M46041|

			 ENDP  ; |DisableUart3_Pin|

	EXPORT	|BTDrvLoad|
	EXPORT	|??_C@_1BG@PEJKNFBI@?$AAb?$AAt?$AAd?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@CDEKAJLJ@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?2?$AAB?$AAl?$AAu?$AAe?$AAt?$AAo?$AAo?$AAt?$AAh?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@OFJBNFMH@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?2?$AAB?$AAl?$AAu?$AAe?$AAt?$AAo?$AAo?$AAt?$AAh?$AA?2?$AAD?$AAr?$AAi@| [ DATA ] ; `string'
	IMPORT	|RegCloseKey|
	IMPORT	|RegSetValueExW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|ActivateDevice|

  00000			 AREA	 |.pdata|, PDATA
|$T46055| DCD	|$LN7@BTDrvLoad|
	DCD	0x40002602

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@PEJKNFBI@?$AAb?$AAt?$AAd?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@| DCB "b"
	DCB	0x0, "t", 0x0, "d", 0x0, "_", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@CDEKAJLJ@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?2?$AAB?$AAl?$AAu?$AAe?$AAt?$AAo?$AAo?$AAt?$AAh?$AA?$AA@| DCB "S"
	DCB	0x0, "o", 0x0, "f", 0x0, "t", 0x0, "w", 0x0, "a", 0x0, "r"
	DCB	0x0, "e", 0x0, "\\", 0x0, "M", 0x0, "i", 0x0, "c", 0x0, "r"
	DCB	0x0, "o", 0x0, "s", 0x0, "o", 0x0, "f", 0x0, "t", 0x0, "\\"
	DCB	0x0, "B", 0x0, "l", 0x0, "u", 0x0, "e", 0x0, "t", 0x0, "o"
	DCB	0x0, "o", 0x0, "t", 0x0, "h", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@OFJBNFMH@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?2?$AAB?$AAl?$AAu?$AAe?$AAt?$AAo?$AAo?$AAt?$AAh?$AA?2?$AAD?$AAr?$AAi@| DCB "S"
	DCB	0x0, "o", 0x0, "f", 0x0, "t", 0x0, "w", 0x0, "a", 0x0, "r"
	DCB	0x0, "e", 0x0, "\\", 0x0, "M", 0x0, "i", 0x0, "c", 0x0, "r"
	DCB	0x0, "o", 0x0, "s", 0x0, "o", 0x0, "f", 0x0, "t", 0x0, "\\"
	DCB	0x0, "B", 0x0, "l", 0x0, "u", 0x0, "e", 0x0, "t", 0x0, "o"
	DCB	0x0, "o", 0x0, "t", 0x0, "h", 0x0, "\\", 0x0, "D", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BTDrvLoad| PROC

; 334  : {

  00000		 |$LN7@BTDrvLoad|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M46052|

; 335  :   BOOL status = FALSE;
; 336  :   HANDLE hDevice ;
; 337  :   HKEY hk;
; 338  :   
; 339  :   hDevice = ActivateDevice (L"Software\\Microsoft\\Bluetooth\\Driver", 0);

  00008	e59f0084	 ldr         r0, [pc, #0x84]
  0000c	e3a01000	 mov         r1, #0
  00010	e3a04000	 mov         r4, #0
  00014	eb000000	 bl          ActivateDevice
  00018	e3500000	 cmp         r0, #0
  0001c	e58d000c	 str         r0, [sp, #0xC]

; 340  : 
; 341  : 		if (hDevice) {

  00020	0a000015	 beq         |$LN1@BTDrvLoad|

; 342  : 			
; 343  : 			if (ERROR_SUCCESS == RegOpenKeyEx (HKEY_LOCAL_MACHINE, L"Software\\Microsoft\\Bluetooth", 0, KEY_READ, &hk)) {

  00024	e59f1064	 ldr         r1, [pc, #0x64]
  00028	e3a03802	 mov         r3, #2, 16
  0002c	e28de008	 add         lr, sp, #8
  00030	e3833019	 orr         r3, r3, #0x19
  00034	e3a02000	 mov         r2, #0
  00038	e3a0010a	 mov         r0, #0xA, 2
  0003c	e58de000	 str         lr, [sp]
  00040	eb000000	 bl          RegOpenKeyExW
  00044	e3500000	 cmp         r0, #0
  00048	1a00000b	 bne         |$LN1@BTDrvLoad|

; 344  : 				RegSetValueEx (hk, L"btd_handle", 0, REG_DWORD, (LPBYTE)&hDevice, sizeof(hDevice));

  0004c	e59f1038	 ldr         r1, [pc, #0x38]
  00050	e59d0008	 ldr         r0, [sp, #8]
  00054	e3a04004	 mov         r4, #4
  00058	e28de00c	 add         lr, sp, #0xC
  0005c	e3a03004	 mov         r3, #4
  00060	e3a02000	 mov         r2, #0
  00064	e58d4004	 str         r4, [sp, #4]
  00068	e58de000	 str         lr, [sp]
  0006c	eb000000	 bl          RegSetValueExW

; 345  : 				RegCloseKey (hk);

  00070	e59d0008	 ldr         r0, [sp, #8]
  00074	eb000000	 bl          RegCloseKey

; 346  : 				status= TRUE;

  00078	e3a04001	 mov         r4, #1
  0007c		 |$LN1@BTDrvLoad|

; 347  : 			}
; 348  : 		}  
; 349  :   return status;  
; 350  : }

  0007c	e1a00004	 mov         r0, r4
  00080	e28dd010	 add         sp, sp, #0x10
  00084	e8bd4010	 ldmia       sp!, {r4, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN8@BTDrvLoad|
  0008c		 |$LN9@BTDrvLoad|
  0008c	00000000	 DCD         |??_C@_1BG@PEJKNFBI@?$AAb?$AAt?$AAd?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@|
  00090		 |$LN10@BTDrvLoad|
  00090	00000000	 DCD         |??_C@_1DK@CDEKAJLJ@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?2?$AAB?$AAl?$AAu?$AAe?$AAt?$AAo?$AAo?$AAt?$AAh?$AA?$AA@|
  00094		 |$LN11@BTDrvLoad|
  00094	00000000	 DCD         |??_C@_1EI@OFJBNFMH@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?2?$AAB?$AAl?$AAu?$AAe?$AAt?$AAo?$AAo?$AAt?$AAh?$AA?2?$AAD?$AAr?$AAi@|
  00098		 |$M46053|

			 ENDP  ; |BTDrvLoad|

	EXPORT	|BTDrvUnload|
	IMPORT	|RegDeleteValueW|
	IMPORT	|DeactivateDevice|
	IMPORT	|RegQueryValueExW|

  00000			 AREA	 |.pdata|, PDATA
|$T46070| DCD	|$LN7@BTDrvUnloa|
	DCD	0x40003202
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BTDrvUnload| PROC

; 353  : {

  00000		 |$LN7@BTDrvUnloa|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M46067|

; 354  : 		HKEY hk;
; 355  : 		BOOL status=FALSE;
; 356  : 		HANDLE hDevice = NULL;
; 357  : 		DWORD dwSize,dwType;
; 358  : 		
; 359  : 		if (ERROR_SUCCESS == RegOpenKeyEx (HKEY_LOCAL_MACHINE, L"Software\\Microsoft\\Bluetooth", 0, KEY_READ, &hk)) {

  00008	e59f10b4	 ldr         r1, [pc, #0xB4]
  0000c	e3a03802	 mov         r3, #2, 16
  00010	e3a05000	 mov         r5, #0
  00014	e28de008	 add         lr, sp, #8
  00018	e3833019	 orr         r3, r3, #0x19
  0001c	e3a02000	 mov         r2, #0
  00020	e3a0010a	 mov         r0, #0xA, 2
  00024	e3a04000	 mov         r4, #0
  00028	e58d5010	 str         r5, [sp, #0x10]
  0002c	e58de000	 str         lr, [sp]
  00030	eb000000	 bl          RegOpenKeyExW
  00034	e3500000	 cmp         r0, #0
  00038	1a00001c	 bne         |$LN2@BTDrvUnloa|

; 360  : 			
; 361  : 			dwSize = sizeof (hDevice);
; 362  : 
; 363  : 			if ((ERROR_SUCCESS == RegQueryValueEx (hk, L"btd_handle", NULL, &dwType, (LPBYTE)&hDevice, &dwSize)) &&
; 364  : 				(dwType == REG_DWORD) && (dwSize == sizeof (hDevice)) && hDevice) {

  0003c	e59d0008	 ldr         r0, [sp, #8]
  00040	e59f1078	 ldr         r1, [pc, #0x78]
  00044	e3a05004	 mov         r5, #4
  00048	e28de00c	 add         lr, sp, #0xC
  0004c	e28d4010	 add         r4, sp, #0x10
  00050	e28d3014	 add         r3, sp, #0x14
  00054	e3a02000	 mov         r2, #0
  00058	e58d500c	 str         r5, [sp, #0xC]
  0005c	e58de004	 str         lr, [sp, #4]
  00060	e58d4000	 str         r4, [sp]
  00064	eb000000	 bl          RegQueryValueExW
  00068	e3500000	 cmp         r0, #0
  0006c	1a00000c	 bne         |$LN1@BTDrvUnloa|
  00070	e59d3014	 ldr         r3, [sp, #0x14]
  00074	e3530004	 cmp         r3, #4
  00078	1a000009	 bne         |$LN1@BTDrvUnloa|
  0007c	e59d300c	 ldr         r3, [sp, #0xC]
  00080	e3530004	 cmp         r3, #4
  00084	1a000006	 bne         |$LN1@BTDrvUnloa|
  00088	e59d0010	 ldr         r0, [sp, #0x10]
  0008c	e3500000	 cmp         r0, #0
  00090	0a000003	 beq         |$LN1@BTDrvUnloa|

; 365  : 				DeactivateDevice(hDevice);

  00094	eb000000	 bl          DeactivateDevice

; 366  : 				RegDeleteValue (hk, L"btd_handle");

  00098	e59d0008	 ldr         r0, [sp, #8]
  0009c	e59f101c	 ldr         r1, [pc, #0x1C]
  000a0	eb000000	 bl          RegDeleteValueW
  000a4		 |$LN1@BTDrvUnloa|

; 367  : 			}
; 368  : 			RegCloseKey (hk);

  000a4	e59d0008	 ldr         r0, [sp, #8]
  000a8	eb000000	 bl          RegCloseKey

; 369  : 			status = TRUE;

  000ac	e3a04001	 mov         r4, #1
  000b0		 |$LN2@BTDrvUnloa|

; 370  : 		}
; 371  : 		
; 372  : 		return status;  
; 373  :   
; 374  : }

  000b0	e1a00004	 mov         r0, r4
  000b4	e28dd018	 add         sp, sp, #0x18
  000b8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN8@BTDrvUnloa|
  000c0		 |$LN9@BTDrvUnloa|
  000c0	00000000	 DCD         |??_C@_1BG@PEJKNFBI@?$AAb?$AAt?$AAd?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@|
  000c4		 |$LN10@BTDrvUnloa|
  000c4	00000000	 DCD         |??_C@_1DK@CDEKAJLJ@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?2?$AAB?$AAl?$AAu?$AAe?$AAt?$AAo?$AAo?$AAt?$AAh?$AA?$AA@|
  000c8		 |$M46068|

			 ENDP  ; |BTDrvUnload|

	EXPORT	|SysCtrl_BCR_HW_Trigger|

  00000			 AREA	 |.pdata|, PDATA
|$T46083| DCD	|$LN7@SysCtrl_BC@2|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SysCtrl_BCR_HW_Trigger| PROC

; 377  : {

  00000		 |$LN7@SysCtrl_BC@2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46080|
  00004	e1a04000	 mov         r4, r0

; 378  :    
; 379  :    PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, 
; 380  :                          PXA_GPIO_94, 
; 381  :                          PXA_GPIO_DIRECTION_OUT);

  00008	e59f502c	 ldr         r5, [pc, #0x2C]
  0000c	e3a02001	 mov         r2, #1
  00010	e3a0105e	 mov         r1, #0x5E
  00014	e5950000	 ldr         r0, [r5]
  00018	eb000000	 bl          PXA_GPIOSetDirection

; 382  :    //Low avtice                                     
; 383  :     PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_94,OnOff?PXA_LO:PXA_HI);   

  0001c	e5950000	 ldr         r0, [r5]
  00020	e3540000	 cmp         r4, #0
  00024	13a02000	 movne       r2, #0
  00028	03a02001	 moveq       r2, #1
  0002c	e3a0105e	 mov         r1, #0x5E
  00030	eb000000	 bl          PXA_GPIOSetLevel

; 384  :         
; 385  : }

  00034	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$LN8@SysCtrl_BC@2|
  0003c		 |$LN9@SysCtrl_BC@2|
  0003c	00000000	 DCD         |g_pGPIORegisters|
  00040		 |$M46081|

			 ENDP  ; |SysCtrl_BCR_HW_Trigger|

	EXPORT	|BTSetHWPower|
	EXPORT	|??_C@_1CC@MCNJODND@?$AA?9?$AAB?$AAT?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@KHIEGKGE@?$AA?$CL?$AAB?$AAT?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|Sleep|
	IMPORT	|MFP_SetActiveMode|

  00000			 AREA	 |.pdata|, PDATA
|$T46095| DCD	|$LN11@BTSetHWPow|
	DCD	0x40004701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@MCNJODND@?$AA?9?$AAB?$AAT?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "B", 0x0, "T", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "H"
	DCB	0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@KHIEGKGE@?$AA?$CL?$AAB?$AAT?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "B", 0x0, "T", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "H"
	DCB	0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BTSetHWPower| PROC

; 388  : {

  00000		 |$LN11@BTSetHWPow|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46092|
  00004	e1a05000	 mov         r5, r0

; 389  :     if(!g_pGPIORegisters || !g_pMFPBase)

  00008	e59f4108	 ldr         r4, [pc, #0x108]
  0000c	e5942000	 ldr         r2, [r4]
  00010	e3520000	 cmp         r2, #0
  00014	0a000002	 beq         |$LN5@BTSetHWPow|
  00018	e5943004	 ldr         r3, [r4, #4]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000002	 bne         |$LN6@BTSetHWPow|
  00024		 |$LN5@BTSetHWPow|

; 390  :     {
; 391  :         MapResources();

  00024	eb000000	 bl          MapResources
  00028	e5942000	 ldr         r2, [r4]
  0002c	e5943004	 ldr         r3, [r4, #4]
  00030		 |$LN6@BTSetHWPow|

; 392  :     }
; 393  : 
; 394  :     if(!g_pGPIORegisters || !g_pMFPBase)

  00030	e3520000	 cmp         r2, #0
  00034	0a000032	 beq         |$LN3@BTSetHWPow|
  00038	e3530000	 cmp         r3, #0
  0003c	0a000030	 beq         |$LN3@BTSetHWPow|

; 397  :     }
; 398  :         
; 399  :     RETAILMSG(1, (TEXT("+BTSetHWPower: %d\r\n"), dwState));

  00040	e59f00cc	 ldr         r0, [pc, #0xCC]
  00044	e1a01005	 mov         r1, r5
  00048	eb000000	 bl          NKDbgPrintfW

; 400  : 
; 401  :     if(dwState)

  0004c	e3550000	 cmp         r5, #0
  00050	0a000024	 beq         |$LN2@BTSetHWPow|

; 402  :     {
; 403  : 		MFP_SetActiveMode(PXA_COMPONENT_BTUART_ID);

  00054	e3a00010	 mov         r0, #0x10
  00058	eb000000	 bl          MFP_SetActiveMode

; 404  : 
; 405  : 		// BT_PWRREN
; 406  : 		PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_92, PXA_GPIO_DIRECTION_OUT);

  0005c	e5940000	 ldr         r0, [r4]
  00060	e3a02001	 mov         r2, #1
  00064	e3a0105c	 mov         r1, #0x5C
  00068	eb000000	 bl          PXA_GPIOSetDirection

; 407  : 		PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO92_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  0006c	e5940004	 ldr         r0, [r4, #4]
  00070	e3a03002	 mov         r3, #2
  00074	e3a02000	 mov         r2, #0
  00078	e3a01e51	 mov         r1, #0x51, 28
  0007c	eb000000	 bl          PXA_MFPSetAfDs

; 408  : 		PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_92, PXA_HI);

  00080	e5940000	 ldr         r0, [r4]
  00084	e3a02001	 mov         r2, #1
  00088	e3a0105c	 mov         r1, #0x5C
  0008c	eb000000	 bl          PXA_GPIOSetLevel

; 409  : 		
; 410  : 		// BT_nRST
; 411  : 		PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_91, PXA_GPIO_DIRECTION_OUT);

  00090	e5940000	 ldr         r0, [r4]
  00094	e3a02001	 mov         r2, #1
  00098	e3a0105b	 mov         r1, #0x5B
  0009c	eb000000	 bl          PXA_GPIOSetDirection

; 412  : 		PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO91_OFFSET, PXA_MFP_ALT_FN_0,PXA_MFP_DS_03X);     

  000a0	e5940004	 ldr         r0, [r4, #4]
  000a4	e3a03c05	 mov         r3, #5, 24
  000a8	e383100c	 orr         r1, r3, #0xC
  000ac	e3a03002	 mov         r3, #2
  000b0	e3a02000	 mov         r2, #0
  000b4	eb000000	 bl          PXA_MFPSetAfDs

; 413  : 
; 414  : 		PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_91, PXA_LO);

  000b8	e5940000	 ldr         r0, [r4]
  000bc	e3a02000	 mov         r2, #0
  000c0	e3a0105b	 mov         r1, #0x5B
  000c4	eb000000	 bl          PXA_GPIOSetLevel

; 415  : 		Sleep(50);

  000c8	e3a00032	 mov         r0, #0x32
  000cc	eb000000	 bl          Sleep

; 416  : 		PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_91, PXA_HI);  

  000d0	e5940000	 ldr         r0, [r4]
  000d4	e3a02001	 mov         r2, #1
  000d8	e3a0105b	 mov         r1, #0x5B
  000dc	eb000000	 bl          PXA_GPIOSetLevel

; 417  :     
; 418  : 		BTDrvLoad();    

  000e0	eb000000	 bl          BTDrvLoad

; 419  : 	}
; 420  :     else

  000e4	ea000001	 b           |$LN1@BTSetHWPow|
  000e8		 |$LN2@BTSetHWPow|

; 421  :     {
; 422  : 		BTDrvUnload();

  000e8	eb000000	 bl          BTDrvUnload

; 423  : 		DisableBTUart_Pin();

  000ec	eb000000	 bl          DisableBTUart_Pin
  000f0		 |$LN1@BTSetHWPow|

; 424  :     }
; 425  : 	RETAILMSG(1, (TEXT("-BTSetHWPower.\r\n")));

  000f0	e59f0018	 ldr         r0, [pc, #0x18]
  000f4	eb000000	 bl          NKDbgPrintfW

; 426  : 	
; 427  : 	return TRUE;

  000f8	e3a00001	 mov         r0, #1

; 428  : }

  000fc	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00100	e12fff1e	 bx          lr
  00104		 |$LN3@BTSetHWPow|

; 395  :     {
; 396  :         return FALSE;

  00104	e3a00000	 mov         r0, #0

; 428  : }

  00108	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0010c	e12fff1e	 bx          lr
  00110		 |$LN12@BTSetHWPow|
  00110		 |$LN13@BTSetHWPow|
  00110	00000000	 DCD         |??_C@_1CC@MCNJODND@?$AA?9?$AAB?$AAT?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00114		 |$LN14@BTSetHWPow|
  00114	00000000	 DCD         |??_C@_1CI@KHIEGKGE@?$AA?$CL?$AAB?$AAT?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00118		 |$LN15@BTSetHWPow|
  00118	00000000	 DCD         |g_pGPIORegisters|
  0011c		 |$M46093|

			 ENDP  ; |BTSetHWPower|

	EXPORT	|RFIDSetHWPower|
	EXPORT	|??_C@_1CG@PMJMGPKD@?$AA?9?$AAR?$AAF?$AAI?$AAD?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@PDAGKKPP@?$AA?$CL?$AAR?$AAF?$AAI?$AAD?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|PXA_OST_DelayMilliSeconds|

  00000			 AREA	 |.pdata|, PDATA
|$T46109| DCD	|$LN11@RFIDSetHWP|
	DCD	0x40003401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@PMJMGPKD@?$AA?9?$AAR?$AAF?$AAI?$AAD?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "R", 0x0, "F", 0x0, "I", 0x0, "D", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "H", 0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@PDAGKKPP@?$AA?$CL?$AAR?$AAF?$AAI?$AAD?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "R", 0x0, "F", 0x0, "I", 0x0, "D", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "H", 0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RFIDSetHWPower| PROC

; 431  : {

  00000		 |$LN11@RFIDSetHWP|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46106|
  00004	e1a05000	 mov         r5, r0

; 432  :     if(!g_pGPIORegisters || !g_pMFPBase)

  00008	e59f40bc	 ldr         r4, [pc, #0xBC]
  0000c	e5942000	 ldr         r2, [r4]
  00010	e3520000	 cmp         r2, #0
  00014	0a000002	 beq         |$LN5@RFIDSetHWP|
  00018	e5943004	 ldr         r3, [r4, #4]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000002	 bne         |$LN6@RFIDSetHWP|
  00024		 |$LN5@RFIDSetHWP|

; 433  :     {
; 434  :         MapResources();

  00024	eb000000	 bl          MapResources
  00028	e5942000	 ldr         r2, [r4]
  0002c	e5943004	 ldr         r3, [r4, #4]
  00030		 |$LN6@RFIDSetHWP|

; 435  :     }
; 436  : 
; 437  :     if(!g_pGPIORegisters || !g_pMFPBase)

  00030	e3520000	 cmp         r2, #0
  00034	0a00001f	 beq         |$LN3@RFIDSetHWP|
  00038	e3530000	 cmp         r3, #0
  0003c	0a00001d	 beq         |$LN3@RFIDSetHWP|

; 440  :     }
; 441  :         
; 442  :     RETAILMSG(1, (TEXT("+RFIDSetHWPower: %d\r\n"), dwState));

  00040	e59f0080	 ldr         r0, [pc, #0x80]
  00044	e1a01005	 mov         r1, r5
  00048	eb000000	 bl          NKDbgPrintfW

; 443  : 
; 444  :     if(dwState)
; 445  :     {
; 446  :     	PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_GPIO_DIRECTION_OUT);

  0004c	e5940000	 ldr         r0, [r4]
  00050	e3550000	 cmp         r5, #0
  00054	e3a02001	 mov         r2, #1
  00058	e3a0105d	 mov         r1, #0x5D
  0005c	0a000007	 beq         |$LN2@RFIDSetHWP|
  00060	eb000000	 bl          PXA_GPIOSetDirection

; 447  : 		PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_HI);

  00064	e5940000	 ldr         r0, [r4]
  00068	e3a02001	 mov         r2, #1
  0006c	e3a0105d	 mov         r1, #0x5D
  00070	eb000000	 bl          PXA_GPIOSetLevel

; 448  : 		PXA_OST_DelayMilliSeconds(1000);

  00074	e3a00ffa	 mov         r0, #0xFA, 30
  00078	eb000000	 bl          PXA_OST_DelayMilliSeconds

; 449  : 	}
; 450  :     else

  0007c	ea000008	 b           |$LN1@RFIDSetHWP|
  00080		 |$LN2@RFIDSetHWP|

; 451  :     {
; 452  : 		PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_GPIO_DIRECTION_OUT);

  00080	eb000000	 bl          PXA_GPIOSetDirection

; 453  : 		PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_93,PXA_LO);

  00084	e5940000	 ldr         r0, [r4]
  00088	e3a02000	 mov         r2, #0
  0008c	e3a0105d	 mov         r1, #0x5D
  00090	eb000000	 bl          PXA_GPIOSetLevel

; 454  : 		PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_GPIO_DIRECTION_IN);

  00094	e5940000	 ldr         r0, [r4]
  00098	e3a02000	 mov         r2, #0
  0009c	e3a0105d	 mov         r1, #0x5D
  000a0	eb000000	 bl          PXA_GPIOSetDirection
  000a4		 |$LN1@RFIDSetHWP|

; 455  :     }
; 456  : 	RETAILMSG(1, (TEXT("-RFIDSetHWPower.\r\n")));

  000a4	e59f0018	 ldr         r0, [pc, #0x18]
  000a8	eb000000	 bl          NKDbgPrintfW

; 457  : 	
; 458  : 	return TRUE;

  000ac	e3a00001	 mov         r0, #1

; 459  : }

  000b0	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$LN3@RFIDSetHWP|

; 438  :     {
; 439  :         return FALSE;

  000b8	e3a00000	 mov         r0, #0

; 459  : }

  000bc	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000c0	e12fff1e	 bx          lr
  000c4		 |$LN12@RFIDSetHWP|
  000c4		 |$LN13@RFIDSetHWP|
  000c4	00000000	 DCD         |??_C@_1CG@PMJMGPKD@?$AA?9?$AAR?$AAF?$AAI?$AAD?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  000c8		 |$LN14@RFIDSetHWP|
  000c8	00000000	 DCD         |??_C@_1CM@PDAGKKPP@?$AA?$CL?$AAR?$AAF?$AAI?$AAD?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  000cc		 |$LN15@RFIDSetHWP|
  000cc	00000000	 DCD         |g_pGPIORegisters|
  000d0		 |$M46107|

			 ENDP  ; |RFIDSetHWPower|

	EXPORT	|RFIDGetHWPower|

  00000			 AREA	 |.pdata|, PDATA
|$T46122| DCD	|$LN9@RFIDGetHWP|
	DCD	0x40001a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RFIDGetHWPower| PROC

; 462  : {

  00000		 |$LN9@RFIDGetHWP|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M46119|

; 463  :     PXA_LEVEL_T GPIOLevel;
; 464  : 
; 465  :     if(!g_pGPIORegisters || !g_pMFPBase)

  00008	e59f4054	 ldr         r4, [pc, #0x54]
  0000c	e5940000	 ldr         r0, [r4]
  00010	e3500000	 cmp         r0, #0
  00014	0a000002	 beq         |$LN3@RFIDGetHWP|
  00018	e5943004	 ldr         r3, [r4, #4]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000002	 bne         |$LN4@RFIDGetHWP|
  00024		 |$LN3@RFIDGetHWP|

; 466  :     {
; 467  :         MapResources();

  00024	eb000000	 bl          MapResources
  00028	e5940000	 ldr         r0, [r4]
  0002c	e5943004	 ldr         r3, [r4, #4]
  00030		 |$LN4@RFIDGetHWP|

; 468  :     }
; 469  :     if(!g_pGPIORegisters || !g_pMFPBase)

  00030	e3500000	 cmp         r0, #0
  00034	0a000006	 beq         |$LN1@RFIDGetHWP|
  00038	e3530000	 cmp         r3, #0
  0003c	0a000004	 beq         |$LN1@RFIDGetHWP|

; 472  :     }
; 473  : 
; 474  :     PXA_GPIOGetLevel((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, &GPIOLevel);

  00040	e28d2000	 add         r2, sp, #0
  00044	e3a0105d	 mov         r1, #0x5D
  00048	eb000000	 bl          PXA_GPIOGetLevel

; 475  : 
; 476  :     return GPIOLevel;

  0004c	e59d0000	 ldr         r0, [sp]
  00050	ea000000	 b           |$LN5@RFIDGetHWP|
  00054		 |$LN1@RFIDGetHWP|

; 470  :     {
; 471  :         return FALSE;

  00054	e3a00000	 mov         r0, #0
  00058		 |$LN5@RFIDGetHWP|

; 477  : }

  00058	e28dd004	 add         sp, sp, #4
  0005c	e8bd4010	 ldmia       sp!, {r4, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN10@RFIDGetHWP|
  00064		 |$LN11@RFIDGetHWP|
  00064	00000000	 DCD         |g_pGPIORegisters|
  00068		 |$M46120|

			 ENDP  ; |RFIDGetHWPower|

	EXPORT	|VibratorGetHWPower|

  00000			 AREA	 |.pdata|, PDATA
|$T46135| DCD	|$LN7@VibratorGe|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |VibratorGetHWPower| PROC

; 480  : {

  00000		 |$LN7@VibratorGe|
  00000		 |$M46132|

; 481  :     return (*(volatile BYTE *)DEVICE_POWER_FLAG_ADDR & VIBRATORI_POWER_MASK) ? TRUE : FALSE;

  00000	e59f3010	 ldr         r3, [pc, #0x10]
  00004	e5d33000	 ldrb        r3, [r3]
  00008	e3130020	 tst         r3, #0x20
  0000c	13a00001	 movne       r0, #1
  00010	03a00000	 moveq       r0, #0

; 482  : }

  00014	e12fff1e	 bx          lr
  00018		 |$LN8@VibratorGe|
  00018		 |$LN9@VibratorGe|
  00018	a0008032	 DCD         0xa0008032
  0001c		 |$M46133|

			 ENDP  ; |VibratorGetHWPower|

	EXPORT	|VibratorSetHWPower|
	EXPORT	|??_C@_1CO@FLFKPIGL@?$AA?9?$AAV?$AAi?$AAb?$AAr?$AAa?$AAt?$AAo?$AAr?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@LBKBKIDK@?$AA?$CL?$AAV?$AAi?$AAb?$AAr?$AAa?$AAt?$AAo?$AAr?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T46148| DCD	|$LN8@VibratorSe|
	DCD	0x40001301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@FLFKPIGL@?$AA?9?$AAV?$AAi?$AAb?$AAr?$AAa?$AAt?$AAo?$AAr?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "V", 0x0, "i", 0x0, "b", 0x0, "r", 0x0, "a", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "H"
	DCB	0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@LBKBKIDK@?$AA?$CL?$AAV?$AAi?$AAb?$AAr?$AAa?$AAt?$AAo?$AAr?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "V", 0x0, "i", 0x0, "b", 0x0, "r", 0x0, "a", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "H"
	DCB	0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |VibratorSetHWPower| PROC

; 485  : {            

  00000		 |$LN8@VibratorSe|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M46145|
  00004	e1a04000	 mov         r4, r0

; 486  :     RETAILMSG(1, (TEXT("+VibratorSetHWPower: %d\r\n"), dwState));

  00008	e59f0038	 ldr         r0, [pc, #0x38]
  0000c	e1a01004	 mov         r1, r4
  00010	eb000000	 bl          NKDbgPrintfW

; 487  :     if(dwState)
; 488  :     {
; 489  :     	*(volatile BYTE *)DEVICE_POWER_FLAG_ADDR |= VIBRATORI_POWER_MASK;

  00014	e59f2028	 ldr         r2, [pc, #0x28]
  00018	e3540000	 cmp         r4, #0

; 490  : 	}
; 491  :     else
; 492  :     {
; 493  : 		*(volatile BYTE *)DEVICE_POWER_FLAG_ADDR &= ~VIBRATORI_POWER_MASK;
; 494  :     }
; 495  : 	RETAILMSG(1, (TEXT("-VibratorSetHWPower.\r\n")));

  0001c	e59f001c	 ldr         r0, [pc, #0x1C]
  00020	e5d23000	 ldrb        r3, [r2]
  00024	13833020	 orrne       r3, r3, #0x20
  00028	020330df	 andeq       r3, r3, #0xDF
  0002c	e5c23000	 strb        r3, [r2]
  00030	eb000000	 bl          NKDbgPrintfW

; 496  : 
; 497  : 	return TRUE;

  00034	e3a00001	 mov         r0, #1

; 498  : }

  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN9@VibratorSe|
  00040		 |$LN10@VibratorSe|
  00040	00000000	 DCD         |??_C@_1CO@FLFKPIGL@?$AA?9?$AAV?$AAi?$AAb?$AAr?$AAa?$AAt?$AAo?$AAr?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00044		 |$LN11@VibratorSe|
  00044	a0008032	 DCD         0xa0008032
  00048		 |$LN12@VibratorSe|
  00048	00000000	 DCD         |??_C@_1DE@LBKBKIDK@?$AA?$CL?$AAV?$AAi?$AAb?$AAr?$AAa?$AAt?$AAo?$AAr?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0004c		 |$M46146|

			 ENDP  ; |VibratorSetHWPower|

	EXPORT	|SysCtrl_BCRSetHWPower|
	EXPORT	|??_C@_1DM@CHIENBOD@?$AAS?$AAy?$AAs?$AAC?$AAt?$AAr?$AAl?$AA_?$AAB?$AAC?$AAR?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@JCNJJEPJ@?$AAS?$AAy?$AAs?$AAC?$AAt?$AAr?$AAl?$AA_?$AAB?$AAC?$AAR?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|PXA_MFPConfigureLpmOutputLevel|

  00000			 AREA	 |.pdata|, PDATA
|$T46163| DCD	|$LN12@SysCtrl_BC@3|
	DCD	0x40004b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@CHIENBOD@?$AAS?$AAy?$AAs?$AAC?$AAt?$AAr?$AAl?$AA_?$AAB?$AAC?$AAR?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "y", 0x0, "s", 0x0, "C", 0x0, "t", 0x0, "r", 0x0, "l"
	DCB	0x0, "_", 0x0, "B", 0x0, "C", 0x0, "R", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "H", 0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "O"
	DCB	0x0, "F", 0x0, "F", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@JCNJJEPJ@?$AAS?$AAy?$AAs?$AAC?$AAt?$AAr?$AAl?$AA_?$AAB?$AAC?$AAR?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "y", 0x0, "s", 0x0, "C", 0x0, "t", 0x0, "r", 0x0, "l"
	DCB	0x0, "_", 0x0, "B", 0x0, "C", 0x0, "R", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "H", 0x0, "W", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "O"
	DCB	0x0, "N", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SysCtrl_BCRSetHWPower| PROC

; 74   : {

  00000		 |$LN12@SysCtrl_BC@3|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46160|
  00004	e1a05000	 mov         r5, r0

; 75   :     if(!g_pGPIORegisters || !g_pMFPBase)

  00008	e59f4118	 ldr         r4, [pc, #0x118]
  0000c	e5942000	 ldr         r2, [r4]
  00010	e3520000	 cmp         r2, #0
  00014	0a000002	 beq         |$LN5@SysCtrl_BC@3|
  00018	e5943004	 ldr         r3, [r4, #4]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000002	 bne         |$LN6@SysCtrl_BC@3|
  00024		 |$LN5@SysCtrl_BC@3|

; 76   :     {
; 77   :         MapResources();

  00024	eb000000	 bl          MapResources
  00028	e5942000	 ldr         r2, [r4]
  0002c	e5943004	 ldr         r3, [r4, #4]
  00030		 |$LN6@SysCtrl_BC@3|

; 78   :     }
; 79   : 
; 80   :     if(!g_pGPIORegisters || !g_pMFPBase)

  00030	e3520000	 cmp         r2, #0
  00034	0a000035	 beq         |$LN3@SysCtrl_BC@3|
  00038	e3530000	 cmp         r3, #0
  0003c	0a000033	 beq         |$LN3@SysCtrl_BC@3|

; 83   :     }
; 84   :     
; 85   :     if(dwState)

  00040	e3550000	 cmp         r5, #0
  00044	0a000027	 beq         |$LN2@SysCtrl_BC@3|

; 86   :     {	// BC_PWREN
; 87   :     	RETAILMSG(1, (TEXT("SysCtrl_BCRSetHWPower - ON\r\n")));

  00048	e59f00d4	 ldr         r0, [pc, #0xD4]
  0004c	eb000000	 bl          NKDbgPrintfW

; 88   : 		MFP_SetActiveMode(PXA_COMPONENT_UART3_ID);

  00050	e3a00015	 mov         r0, #0x15
  00054	eb000000	 bl          MFP_SetActiveMode

; 89   : 		PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO93_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  00058	e5940004	 ldr         r0, [r4, #4]
  0005c	e3a05c05	 mov         r5, #5, 24
  00060	e3851014	 orr         r1, r5, #0x14
  00064	e3a03002	 mov         r3, #2
  00068	e3a02000	 mov         r2, #0
  0006c	eb000000	 bl          PXA_MFPSetAfDs

; 90   : 		PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_GPIO_DIRECTION_OUT);

  00070	e5940000	 ldr         r0, [r4]
  00074	e3a02001	 mov         r2, #1
  00078	e3a0105d	 mov         r1, #0x5D
  0007c	eb000000	 bl          PXA_GPIOSetDirection

; 91   : 		PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_93, PXA_HI);

  00080	e5940000	 ldr         r0, [r4]
  00084	e3a02001	 mov         r2, #1
  00088	e3a0105d	 mov         r1, #0x5D
  0008c	eb000000	 bl          PXA_GPIOSetLevel

; 92   : 		PXA_MFPConfigureLpmOutputLevel(g_pMFPBase, PXA_MFP_PIN_GPIO93_OFFSET, PXA_MFP_LPMO_DRIVE_LOW);  

  00090	e5940004	 ldr         r0, [r4, #4]
  00094	e3a02a02	 mov         r2, #2, 20
  00098	e3851014	 orr         r1, r5, #0x14
  0009c	eb000000	 bl          PXA_MFPConfigureLpmOutputLevel

; 93   :        
; 94   : 		// BC_nTRIG
; 95   : 		PXA_MFPSetAfDs(g_pMFPBase, PXA_MFP_PIN_GPIO94_OFFSET, PXA_MFP_ALT_FN_0, PXA_MFP_DS_03X);

  000a0	e5940004	 ldr         r0, [r4, #4]
  000a4	e3a03c05	 mov         r3, #5, 24
  000a8	e3831018	 orr         r1, r3, #0x18
  000ac	e3a03002	 mov         r3, #2
  000b0	e3a02000	 mov         r2, #0
  000b4	eb000000	 bl          PXA_MFPSetAfDs

; 96   : 		PXA_GPIOSetDirection((PXA_GPIOREG_T *)g_pGPIORegisters, PXA_GPIO_94, PXA_GPIO_DIRECTION_OUT);

  000b8	e5940000	 ldr         r0, [r4]
  000bc	e3a02001	 mov         r2, #1
  000c0	e3a0105e	 mov         r1, #0x5E
  000c4	eb000000	 bl          PXA_GPIOSetDirection

; 97   : 		PXA_GPIOSetLevel((PXA_GPIOREG_T *)g_pGPIORegisters,PXA_GPIO_94,PXA_HI); 

  000c8	e5940000	 ldr         r0, [r4]
  000cc	e3a02001	 mov         r2, #1
  000d0	e3a0105e	 mov         r1, #0x5E
  000d4	eb000000	 bl          PXA_GPIOSetLevel

; 98   :         
; 99   : 		*(volatile BYTE *)DEVICE_POWER_FLAG_ADDR|=BCR_POWER_MASK;                         

  000d8	e59f203c	 ldr         r2, [pc, #0x3C]
  000dc	e5d23000	 ldrb        r3, [r2]
  000e0	e3833001	 orr         r3, r3, #1

; 100  : 	}
; 101  :     else

  000e4	ea000005	 b           |$LN9@SysCtrl_BC@3|
  000e8		 |$LN2@SysCtrl_BC@3|

; 102  :     {
; 103  :     	RETAILMSG(1, (TEXT("SysCtrl_BCRSetHWPower - OFF\r\n")));

  000e8	e59f0030	 ldr         r0, [pc, #0x30]
  000ec	eb000000	 bl          NKDbgPrintfW

; 104  : 		DisableUart3_Pin();

  000f0	eb000000	 bl          DisableUart3_Pin

; 105  : 		*(volatile BYTE *)DEVICE_POWER_FLAG_ADDR&=~BCR_POWER_MASK;

  000f4	e59f2020	 ldr         r2, [pc, #0x20]
  000f8	e5d23000	 ldrb        r3, [r2]
  000fc	e20330fe	 and         r3, r3, #0xFE
  00100		 |$LN9@SysCtrl_BC@3|
  00100	e5c23000	 strb        r3, [r2]

; 106  :     }
; 107  :     
; 108  :     return TRUE;

  00104	e3a00001	 mov         r0, #1

; 109  : }

  00108	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0010c	e12fff1e	 bx          lr
  00110		 |$LN3@SysCtrl_BC@3|

; 81   :     {
; 82   :         return FALSE;

  00110	e3a00000	 mov         r0, #0

; 109  : }

  00114	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00118	e12fff1e	 bx          lr
  0011c		 |$LN13@SysCtrl_BC@3|
  0011c		 |$LN14@SysCtrl_BC@3|
  0011c	a0008032	 DCD         0xa0008032
  00120		 |$LN15@SysCtrl_BC@3|
  00120	00000000	 DCD         |??_C@_1DM@CHIENBOD@?$AAS?$AAy?$AAs?$AAC?$AAt?$AAr?$AAl?$AA_?$AAB?$AAC?$AAR?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAO?$AAF?$AAF?$AA?$AN?$AA?6?$AA?$AA@|
  00124		 |$LN16@SysCtrl_BC@3|
  00124	00000000	 DCD         |??_C@_1DK@JCNJJEPJ@?$AAS?$AAy?$AAs?$AAC?$AAt?$AAr?$AAl?$AA_?$AAB?$AAC?$AAR?$AAS?$AAe?$AAt?$AAH?$AAW?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAO?$AAN?$AA?$AN?$AA?6?$AA?$AA@|
  00128		 |$LN17@SysCtrl_BC@3|
  00128	00000000	 DCD         |g_pGPIORegisters|
  0012c		 |$M46161|

			 ENDP  ; |SysCtrl_BCRSetHWPower|

	END
