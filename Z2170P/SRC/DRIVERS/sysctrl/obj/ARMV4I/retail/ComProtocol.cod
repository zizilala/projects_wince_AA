; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170\SRC\DRIVERS\sysctrl\ComProtocol.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.data|, DATA
|g_szOPDescription| DCD |??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@|
	DCD	|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@|
	DCD	|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@BKKMLFKH@?$AA8?$AA0?$AA6?$AA?5?$AAH?$AAS?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "8"
	DCB	0x0, "0", 0x0, "6", 0x0, " ", 0x0, "H", 0x0, "S", 0x0, "M"
	DCB	0x0, "H", 0x0, "Z", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@HLPDAKHN@?$AA8?$AA0?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "8"
	DCB	0x0, "0", 0x0, "6", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@FGCEKGOE@?$AA6?$AA2?$AA4?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "6"
	DCB	0x0, "2", 0x0, "4", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@EBNODIMD@?$AA4?$AA1?$AA6?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "4"
	DCB	0x0, "1", 0x0, "6", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@GGHBGDEP@?$AA2?$AA0?$AA8?$AA?5?$AAM?$AAH?$AAZ?$AA?$AA@| DCB "2"
	DCB	0x0, "0", 0x0, "8", 0x0, " ", 0x0, "M", 0x0, "H", 0x0, "Z"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@EKPDPFCF@?$AAR?$AAi?$AAn?$AAg?$AA?5?$AAO?$AAS?$AAC?$AA?$AA@| DCB "R"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "O", 0x0, "S"
	DCB	0x0, "C", 0x0, 0x0, 0x0			; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?CheckNameIndex@@YAHPAG@Z|		; CheckNameIndex
	EXPORT	|??_C@_1O@IHEKMJDI@?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17KKLPNNMB@?$AAC?$AAO?$AAM?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|swscanf|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|wcsncmp|
	IMPORT	|wcsncpy|
	IMPORT	|__security_check_cookie|
; File c:\wince600\platform\z2170\src\drivers\sysctrl\comprotocol.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T37366| DCD	|$LN8@CheckNameI|
	DCD	0xc0002402

  00000			 AREA	 |.xdata|, DATA
|$T37362| DCD	0xfffffff8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@IHEKMJDI@?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?3?$AA?$AA@| DCB "C", 0x0
	DCB	"O", 0x0, "M", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17KKLPNNMB@?$AAC?$AAO?$AAM?$AA?$AA@| DCB "C", 0x0, "O", 0x0, "M", 0x0
	DCB	0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T37362|

  00008		 |?CheckNameIndex@@YAHPAG@Z| PROC	; CheckNameIndex

; 14   : {

  00008		 |$LN8@CheckNameI|
  00008	e52de004	 str         lr, [sp, #-4]!
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M37363|
  00010	e59f307c	 ldr         r3, [pc, #0x7C]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3010	 str         r3, [sp, #0x10]
  0001c	e1a01000	 mov         r1, r0

; 15   : 	TCHAR cBuf[6];	// this is the max it should be
; 16   : 	int iNum;
; 17   : 	int iRet;
; 18   : 		
; 19   : 	wcsncpy(cBuf, szName, 6);

  00020	e28d0004	 add         r0, sp, #4
  00024	e3a02006	 mov         r2, #6
  00028	eb000000	 bl          wcsncpy

; 20   : 	if(wcsncmp(cBuf, L"COM", 3) != 0)

  0002c	e59f105c	 ldr         r1, [pc, #0x5C]
  00030	e3a02003	 mov         r2, #3
  00034	e28d0004	 add         r0, sp, #4
  00038	eb000000	 bl          wcsncmp
  0003c	e3500000	 cmp         r0, #0

; 21   : 		return -1;

  00040	1a00000b	 bne         |$LN1@CheckNameI|

; 22   : 	
; 23   : 	iRet = swscanf(cBuf, L"COM%d:", &iNum);

  00044	e59f1040	 ldr         r1, [pc, #0x40]
  00048	e28d2000	 add         r2, sp, #0
  0004c	e28d0004	 add         r0, sp, #4
  00050	eb000000	 bl          swscanf
  00054	e3500000	 cmp         r0, #0

; 24   : 	if((iRet == 0) || (iRet == EOF))

  00058	0a000005	 beq         |$LN1@CheckNameI|
  0005c	e3700001	 cmn         r0, #1
  00060	0a000003	 beq         |$LN1@CheckNameI|

; 26   : 	
; 27   : 	return iNum;

  00064	e59d0010	 ldr         r0, [sp, #0x10]
  00068	eb000000	 bl          __security_check_cookie
  0006c	e59d0000	 ldr         r0, [sp]
  00070	ea000002	 b           |$LN4@CheckNameI|
  00074		 |$LN1@CheckNameI|

; 25   : 		return -1;

  00074	e59d0010	 ldr         r0, [sp, #0x10]
  00078	eb000000	 bl          __security_check_cookie
  0007c	e3e00000	 mvn         r0, #0
  00080		 |$LN4@CheckNameI|

; 28   : }

  00080	e28dd014	 add         sp, sp, #0x14
  00084	e49de004	 ldr         lr, [sp], #4
  00088	e12fff1e	 bx          lr
  0008c		 |$LN9@CheckNameI|
  0008c		 |$LN10@CheckNameI|
  0008c	00000000	 DCD         |??_C@_1O@IHEKMJDI@?$AAC?$AAO?$AAM?$AA?$CF?$AAd?$AA?3?$AA?$AA@|
  00090		 |$LN11@CheckNameI|
  00090	00000000	 DCD         |??_C@_17KKLPNNMB@?$AAC?$AAO?$AAM?$AA?$AA@|
  00094		 |$LN12@CheckNameI|
  00094	00000000	 DCD         |__security_cookie|
  00098		 |$M37364|

			 ENDP  ; |?CheckNameIndex@@YAHPAG@Z|, CheckNameIndex

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?CheckDeviceType@@YAHPAUHKEY__@@PAG@Z|	; CheckDeviceType
	EXPORT	|??_C@_17KACEIPNC@?$AAK?$AAe?$AAy?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|RegQueryValueExW|
	IMPORT	|wcslen|

  00000			 AREA	 |.pdata|, PDATA
|$T37387| DCD	|$LN8@CheckDevic|
	DCD	0xc0002d02

  00000			 AREA	 |.xdata|, DATA
|$T37383| DCD	0xffffffec

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17KACEIPNC@?$AAK?$AAe?$AAy?$AA?$AA@| DCB "K", 0x0, "e", 0x0, "y", 0x0
	DCB	0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T37383|

  00008		 |?CheckDeviceType@@YAHPAUHKEY__@@PAG@Z| PROC ; CheckDeviceType

; 31   : {

  00008		 |$LN8@CheckDevic|
  00008	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  0000c	e24ddf45	 sub         sp, sp, #0x45, 30
  00010		 |$M37384|
  00010	e1a05001	 mov         r5, r1
  00014	e59f309c	 ldr         r3, [pc, #0x9C]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3110	 str         r3, [sp, #0x110]

; 32   : 	INT rc;
; 33   : 	TCHAR szName[128];
; 34   : 	DWORD dwType, dwSize;
; 35   : 
; 36   : 	dwSize = sizeof(szName);
; 37   : 
; 38   : 	rc = RegQueryValueEx(hSubKey, REG_NAME_KEY, 0, &dwType, (PBYTE)szName, &dwSize);

  00020	e59f108c	 ldr         r1, [pc, #0x8C]
  00024	e3a06c01	 mov         r6, #1, 24
  00028	e28de008	 add         lr, sp, #8
  0002c	e28d4010	 add         r4, sp, #0x10
  00030	e28d300c	 add         r3, sp, #0xC
  00034	e3a02000	 mov         r2, #0
  00038	e58d6008	 str         r6, [sp, #8]
  0003c	e58de004	 str         lr, [sp, #4]
  00040	e58d4000	 str         r4, [sp]
  00044	eb000000	 bl          RegQueryValueExW
  00048	e3500000	 cmp         r0, #0

; 39   : 	if(rc !=  ERROR_SUCCESS)
; 40   : 		return FALSE;

  0004c	1a000012	 bne         |$LN1@CheckDevic|

; 41   : 
; 42   : 	if(wcslen(szName) >= wcslen(DeviceKey)) {

  00050	e28d0010	 add         r0, sp, #0x10
  00054	eb000000	 bl          wcslen
  00058	e1a04000	 mov         r4, r0
  0005c	e1a00005	 mov         r0, r5
  00060	eb000000	 bl          wcslen
  00064	e1540000	 cmp         r4, r0
  00068	3a00000b	 bcc         |$LN1@CheckDevic|

; 43   : 		if(wcsncmp(szName, DeviceKey, wcslen(DeviceKey)) == 0)

  0006c	e1a00005	 mov         r0, r5
  00070	eb000000	 bl          wcslen
  00074	e1a02000	 mov         r2, r0
  00078	e28d0010	 add         r0, sp, #0x10
  0007c	e1a01005	 mov         r1, r5
  00080	eb000000	 bl          wcsncmp
  00084	e3500000	 cmp         r0, #0
  00088	1a000003	 bne         |$LN1@CheckDevic|

; 44   : 			return TRUE;

  0008c	e59d0110	 ldr         r0, [sp, #0x110]
  00090	eb000000	 bl          __security_check_cookie
  00094	e3a00001	 mov         r0, #1
  00098	ea000002	 b           |$LN4@CheckDevic|
  0009c		 |$LN1@CheckDevic|

; 45   : 	}
; 46   : 
; 47   : 	return FALSE;

  0009c	e59d0110	 ldr         r0, [sp, #0x110]
  000a0	eb000000	 bl          __security_check_cookie
  000a4	e3a00000	 mov         r0, #0
  000a8		 |$LN4@CheckDevic|

; 48   : }

  000a8	e28ddf45	 add         sp, sp, #0x45, 30
  000ac	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$LN9@CheckDevic|
  000b4		 |$LN10@CheckDevic|
  000b4	00000000	 DCD         |??_C@_17KACEIPNC@?$AAK?$AAe?$AAy?$AA?$AA@|
  000b8		 |$LN11@CheckDevic|
  000b8	00000000	 DCD         |__security_cookie|
  000bc		 |$M37385|

			 ENDP  ; |?CheckDeviceType@@YAHPAUHKEY__@@PAG@Z|, CheckDeviceType

	EXPORT	|??0CComProtocol@@QAA@XZ|		; CComProtocol::CComProtocol

  00000			 AREA	 |.pdata|, PDATA
|$T37401| DCD	|$LN5@CComProtoc|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CComProtocol@@QAA@XZ| PROC		; CComProtocol::CComProtocol

; 56   : {

  00000		 |$LN5@CComProtoc|
  00000		 |$M37398|

; 57   :    
; 58   : }

  00000	e12fff1e	 bx          lr
  00004		 |$M37399|

			 ENDP  ; |??0CComProtocol@@QAA@XZ|, CComProtocol::CComProtocol

	EXPORT	|??1CComProtocol@@QAA@XZ|		; CComProtocol::~CComProtocol

  00000			 AREA	 |.pdata|, PDATA
|$T37408| DCD	|$LN5@CComProtoc@2|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CComProtocol@@QAA@XZ| PROC		; CComProtocol::~CComProtocol

; 61   : {

  00000		 |$LN5@CComProtoc@2|
  00000		 |$M37405|

; 62   : 
; 63   : }

  00000	e12fff1e	 bx          lr
  00004		 |$M37406|

			 ENDP  ; |??1CComProtocol@@QAA@XZ|, CComProtocol::~CComProtocol

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?EnumCOMPorts@CComProtocol@@QAAHPAG0@Z| ; CComProtocol::EnumCOMPorts
	EXPORT	|??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@OAPOPHKK@?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@JJBEOHCE@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|RegCloseKey|
	IMPORT	|RegEnumKeyExW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|wcscpy|

  00000			 AREA	 |.pdata|, PDATA
|$T37433| DCD	|$LN20@EnumCOMPor|
	DCD	0xc0006802

  00000			 AREA	 |.xdata|, DATA
|$T37429| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| DCB "N", 0x0, "a", 0x0, "m"
	DCB	0x0, "e", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@OAPOPHKK@?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AA?$AA@| DCB "U", 0x0, "n"
	DCB	0x0, "K", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@JJBEOHCE@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@| DCB "D"
	DCB	0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, "\\", 0x0, "A", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T37429|

  00008		 |?EnumCOMPorts@CComProtocol@@QAAHPAG0@Z| PROC ; CComProtocol::EnumCOMPorts

; 67   : {

  00008		 |$LN20@EnumCOMPor|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddf8b	 sub         sp, sp, #0x8B, 30
  00010		 |$M37430|
  00010	e1a04002	 mov         r4, r2
  00014	e1a09001	 mov         r9, r1
  00018	e59f3184	 ldr         r3, [pc, #0x184]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3228	 str         r3, [sp, #0x228]

; 68   : 	int index = 0, iRet;
; 69   : 	HKEY hKey, hSubKey;
; 70   : 	TCHAR szName[MAX_PATH];
; 71   : 	DWORD dwType, dwSize;
; 72   : 	DWORD dwNameMask = 0;
; 73   : 	
; 74   : 	
; 75   :         wcscpy(COMPortStr,L"UnKnow");

  00024	e59f1174	 ldr         r1, [pc, #0x174]
  00028	e1a00004	 mov         r0, r4
  0002c	e3a08000	 mov         r8, #0
  00030	eb000000	 bl          wcscpy

; 76   :       
; 77   :         
; 78   : 	if(RegOpenKeyEx(HKEY_LOCAL_MACHINE, REG_NAME_ACTIVE, 0,0, &hKey) != ERROR_SUCCESS)

  00034	e59f1160	 ldr         r1, [pc, #0x160]
  00038	e28de014	 add         lr, sp, #0x14
  0003c	e3a03000	 mov         r3, #0
  00040	e3a02000	 mov         r2, #0
  00044	e3a0010a	 mov         r0, #0xA, 2
  00048	e58de000	 str         lr, [sp]
  0004c	eb000000	 bl          RegOpenKeyExW
  00050	e3500000	 cmp         r0, #0

; 79   : 	 return FALSE;

  00054	1a00003e	 bne         |$LN17@EnumCOMPor|

; 80   : 
; 81   : 	while (1) 
; 82   : 	{
; 83   : 		// Enumerate active driver list
; 84   : 		dwSize = sizeof(szName);
; 85   : 		
; 86   : 		if(RegEnumKeyEx (hKey, index++, szName, &dwSize, NULL, NULL, NULL, NULL) != ERROR_SUCCESS)

  00058	e59d0014	 ldr         r0, [sp, #0x14]
  0005c	e3a0ef82	 mov         lr, #0x82, 30
  00060	e3a0a000	 mov         r10, #0
  00064	e28d3010	 add         r3, sp, #0x10
  00068	e28d2020	 add         r2, sp, #0x20
  0006c	e3a01000	 mov         r1, #0
  00070	e58de010	 str         lr, [sp, #0x10]
  00074	e58da00c	 str         r10, [sp, #0xC]
  00078	e58da008	 str         r10, [sp, #8]
  0007c	e58da004	 str         r10, [sp, #4]
  00080	e58da000	 str         r10, [sp]
  00084	eb000000	 bl          RegEnumKeyExW
  00088	e3500000	 cmp         r0, #0
  0008c	1a00002e	 bne         |$LN15@EnumCOMPor|
  00090	e28d5018	 add         r5, sp, #0x18
  00094	e3a0bf82	 mov         r11, #0x82, 30
  00098	e28d6010	 add         r6, sp, #0x10
  0009c	e28d7020	 add         r7, sp, #0x20
  000a0		 |$LL6@EnumCOMPor|

; 87   : 			 break;
; 88   : 
; 89   : 		// Open active driver key.
; 90   : 		iRet = RegOpenKeyEx(hKey, szName, 0, 0, &hSubKey);

  000a0	e59d0014	 ldr         r0, [sp, #0x14]
  000a4	e3a03000	 mov         r3, #0
  000a8	e3a02000	 mov         r2, #0
  000ac	e28d1020	 add         r1, sp, #0x20
  000b0	e2888001	 add         r8, r8, #1
  000b4	e58d5000	 str         r5, [sp]
  000b8	eb000000	 bl          RegOpenKeyExW
  000bc	e3500000	 cmp         r0, #0

; 91   : 		
; 92   : 		if(iRet !=  ERROR_SUCCESS)

  000c0	1a000014	 bne         |$LN16@EnumCOMPor|

; 93   : 			 continue;
; 94   : 
; 95   : 		dwSize = sizeof(szName);
; 96   : 		
; 97   : 		iRet = RegQueryValueEx(hSubKey, REG_NAME_NAME, 0, &dwType, (PBYTE)szName, &dwSize);

  000c4	e59d0018	 ldr         r0, [sp, #0x18]
  000c8	e59f10c8	 ldr         r1, [pc, #0xC8]
  000cc	e28d301c	 add         r3, sp, #0x1C
  000d0	e3a02000	 mov         r2, #0
  000d4	e58db010	 str         r11, [sp, #0x10]
  000d8	e58d6004	 str         r6, [sp, #4]
  000dc	e58d7000	 str         r7, [sp]
  000e0	eb000000	 bl          RegQueryValueExW
  000e4	e3500000	 cmp         r0, #0

; 98   : 		
; 99   : 		
; 100  : 		if(iRet ==  ERROR_SUCCESS)

  000e8	1a000008	 bne         |$LN1@EnumCOMPor|

; 101  : 		 {
; 102  : 			if((CheckNameIndex(szName) != -1) && (CheckDeviceType(hSubKey,DeviceKey))) 

  000ec	e28d0020	 add         r0, sp, #0x20
  000f0	eb000000	 bl          |?CheckNameIndex@@YAHPAG@Z|
  000f4	e3700001	 cmn         r0, #1
  000f8	0a000004	 beq         |$LN1@EnumCOMPor|
  000fc	e59d0018	 ldr         r0, [sp, #0x18]
  00100	e1a01009	 mov         r1, r9
  00104	eb000000	 bl          |?CheckDeviceType@@YAHPAUHKEY__@@PAG@Z|
  00108	e3500000	 cmp         r0, #0
  0010c	1a000016	 bne         |$LN14@EnumCOMPor|
  00110		 |$LN1@EnumCOMPor|

; 110  : 			}
; 111  : 		 }
; 112  : 		 
; 113  : 	 RegCloseKey(hSubKey);

  00110	e59d0018	 ldr         r0, [sp, #0x18]
  00114	eb000000	 bl          RegCloseKey
  00118		 |$LN16@EnumCOMPor|
  00118	e59d0014	 ldr         r0, [sp, #0x14]
  0011c	e3a0ef82	 mov         lr, #0x82, 30
  00120	e28d3010	 add         r3, sp, #0x10
  00124	e28d2020	 add         r2, sp, #0x20
  00128	e1a01008	 mov         r1, r8
  0012c	e58de010	 str         lr, [sp, #0x10]
  00130	e58da00c	 str         r10, [sp, #0xC]
  00134	e58da008	 str         r10, [sp, #8]
  00138	e58da004	 str         r10, [sp, #4]
  0013c	e58da000	 str         r10, [sp]
  00140	eb000000	 bl          RegEnumKeyExW
  00144	e3500000	 cmp         r0, #0
  00148	0affffd4	 beq         |$LL6@EnumCOMPor|
  0014c		 |$LN15@EnumCOMPor|

; 114  : 	}
; 115  : 
; 116  : RegCloseKey(hKey);

  0014c	e59d0014	 ldr         r0, [sp, #0x14]
  00150	eb000000	 bl          RegCloseKey
  00154		 |$LN17@EnumCOMPor|

; 117  : return FALSE;

  00154	e59d0228	 ldr         r0, [sp, #0x228]
  00158	eb000000	 bl          __security_check_cookie
  0015c	e3a00000	 mov         r0, #0
  00160		 |$LN8@EnumCOMPor|

; 118  : }

  00160	e28ddf8b	 add         sp, sp, #0x8B, 30
  00164	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00168	e12fff1e	 bx          lr
  0016c		 |$LN14@EnumCOMPor|

; 103  : 			{
; 104  : 				RegCloseKey(hSubKey);

  0016c	e59d0018	 ldr         r0, [sp, #0x18]
  00170	eb000000	 bl          RegCloseKey

; 105  : 				RegCloseKey(hKey);

  00174	e59d0014	 ldr         r0, [sp, #0x14]
  00178	eb000000	 bl          RegCloseKey

; 106  : 				
; 107  : 				 wcscpy(COMPortStr,&szName[0]);

  0017c	e28d1020	 add         r1, sp, #0x20
  00180	e1a00004	 mov         r0, r4
  00184	eb000000	 bl          wcscpy

; 108  : 				
; 109  : 				return TRUE;

  00188	e59d0228	 ldr         r0, [sp, #0x228]
  0018c	eb000000	 bl          __security_check_cookie
  00190	e3a00001	 mov         r0, #1
  00194	eafffff1	 b           |$LN8@EnumCOMPor|
  00198		 |$LN21@EnumCOMPor|
  00198		 |$LN22@EnumCOMPor|
  00198	00000000	 DCD         |??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@|
  0019c		 |$LN23@EnumCOMPor|
  0019c	00000000	 DCD         |??_C@_1BO@JJBEOHCE@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?$AA@|
  001a0		 |$LN24@EnumCOMPor|
  001a0	00000000	 DCD         |??_C@_1O@OAPOPHKK@?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AA?$AA@|
  001a4		 |$LN25@EnumCOMPor|
  001a4	00000000	 DCD         |__security_cookie|
  001a8		 |$M37431|

			 ENDP  ; |?EnumCOMPorts@CComProtocol@@QAAHPAG0@Z|, CComProtocol::EnumCOMPorts

	EXPORT	|?CloseCOMPort@CComProtocol@@QAAXPAX@Z|	; CComProtocol::CloseCOMPort
	EXPORT	|??_C@_1BO@EGDOHDJH@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAC?$AAO?$AAM?$AAP?$AAo?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|CloseHandle|
	IMPORT	|PurgeComm|
	IMPORT	|EscapeCommFunction|
	IMPORT	|SetCommMask|
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T37449| DCD	|$LN7@CloseCOMPo|
	DCD	0x40001501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@EGDOHDJH@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAC?$AAO?$AAM?$AAP?$AAo?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "s", 0x0, "e", 0x0, "C", 0x0, "O"
	DCB	0x0, "M", 0x0, "P", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CloseCOMPort@CComProtocol@@QAAXPAX@Z| PROC ; CComProtocol::CloseCOMPort

; 209  : {

  00000		 |$LN7@CloseCOMPo|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37446|
  00004	e1a04001	 mov         r4, r1

; 210  :    
; 211  : 	RETAILMSG(1, (L"CloseCOMPort\r\n" ));

  00008	e59f0040	 ldr         r0, [pc, #0x40]
  0000c	eb000000	 bl          NKDbgPrintfW

; 212  :      // disable event notification and wait for thread to halt
; 213  :     SetCommMask(PortHandle, 0);

  00010	e3a01000	 mov         r1, #0
  00014	e1a00004	 mov         r0, r4
  00018	eb000000	 bl          SetCommMask

; 214  :     
; 215  :     // drop DTR
; 216  :     EscapeCommFunction(PortHandle, CLRDTR);    

  0001c	e3a01006	 mov         r1, #6
  00020	e1a00004	 mov         r0, r4
  00024	eb000000	 bl          EscapeCommFunction

; 217  :     
; 218  :     EscapeCommFunction (PortHandle, CLRRTS); 

  00028	e3a01004	 mov         r1, #4
  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          EscapeCommFunction

; 219  :     
; 220  :     
; 221  :     
; 222  :     // purge any outstanding reads/writes and close device handle
; 223  :     PurgeComm(PortHandle, PURGE_TXABORT | PURGE_RXABORT |
; 224  :               PURGE_TXCLEAR | PURGE_RXCLEAR);

  00034	e3a0100f	 mov         r1, #0xF
  00038	e1a00004	 mov         r0, r4
  0003c	eb000000	 bl          PurgeComm

; 225  :     
; 226  :     CloseHandle(PortHandle);

  00040	e1a00004	 mov         r0, r4
  00044	eb000000	 bl          CloseHandle

; 227  : 
; 228  : 
; 229  : }

  00048	e8bd4010	 ldmia       sp!, {r4, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$LN8@CloseCOMPo|
  00050		 |$LN9@CloseCOMPo|
  00050	00000000	 DCD         |??_C@_1BO@EGDOHDJH@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAC?$AAO?$AAM?$AAP?$AAo?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  00054		 |$M37447|

			 ENDP  ; |?CloseCOMPort@CComProtocol@@QAAXPAX@Z|, CComProtocol::CloseCOMPort

	EXPORT	|?BaudRate@CComProtocol@@QAAHPAXK@Z|	; CComProtocol::BaudRate
	IMPORT	|SetCommState|
	IMPORT	|GetCommState|

  00000			 AREA	 |.pdata|, PDATA
|$T37462| DCD	|$LN5@BaudRate|
	DCD	0x40000e02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?BaudRate@CComProtocol@@QAAHPAXK@Z| PROC ; CComProtocol::BaudRate

; 233  : {

  00000		 |$LN5@BaudRate|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd01c	 sub         sp, sp, #0x1C
  00008		 |$M37459|
  00008	e1a05002	 mov         r5, r2
  0000c	e1a04001	 mov         r4, r1

; 234  :      DCB PortDCB; 
; 235  :    
; 236  :      GetCommState(PortHandle, &PortDCB);

  00010	e28d1000	 add         r1, sp, #0
  00014	e1a00004	 mov         r0, r4
  00018	eb000000	 bl          GetCommState

; 237  :      
; 238  :      
; 239  :      PortDCB.BaudRate = BaudRate;        
; 240  :    
; 241  :      return SetCommState(PortHandle, &PortDCB);

  0001c	e28d1000	 add         r1, sp, #0
  00020	e1a00004	 mov         r0, r4
  00024	e58d5004	 str         r5, [sp, #4]
  00028	eb000000	 bl          SetCommState

; 242  : 
; 243  : 
; 244  : }

  0002c	e28dd01c	 add         sp, sp, #0x1C
  00030	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M37460|

			 ENDP  ; |?BaudRate@CComProtocol@@QAAHPAXK@Z|, CComProtocol::BaudRate

	EXPORT	|?WriteCOMPort@CComProtocol@@QAAHPAXPBXK@Z| ; CComProtocol::WriteCOMPort
	IMPORT	|??3@YAXPAX@Z|				; operator delete
	IMPORT	|WriteFile|
	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T37486| DCD	|$LN15@WriteCOMPo|
	DCD	0x40002702
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WriteCOMPort@CComProtocol@@QAAHPAXPBXK@Z| PROC ; CComProtocol::WriteCOMPort

; 248  : {      	

  00000		 |$LN15@WriteCOMPo|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M37483|
  00008	e1a05003	 mov         r5, r3
  0000c	e1a04002	 mov         r4, r2
  00010	e1a07001	 mov         r7, r1

; 249  : 	BOOL status=FALSE;
; 250  : 	DWORD dwBytes=0; 	

  00014	e3a03000	 mov         r3, #0

; 251  : 	PBYTE lpBuffer=new BYTE[NumOfBytes];		 	

  00018	e1a00005	 mov         r0, r5
  0001c	e58d3004	 str         r3, [sp, #4]
  00020	eb000000	 bl          |??2@YAPAXI@Z|

; 252  : 	 
; 253  : 	memcpy(&lpBuffer[0],(PBYTE)DataBuffer,NumOfBytes);                         	 	  	 		

  00024	e1a02005	 mov         r2, r5
  00028	e1a01004	 mov         r1, r4
  0002c	e1a06000	 mov         r6, r0
  00030	eb000000	 bl          memcpy

; 254  : 	   
; 255  : 	 //Send the command		
; 256  : 	PurgeComm(PortHandle,PURGE_TXCLEAR);		 

  00034	e3a01004	 mov         r1, #4
  00038	e1a00007	 mov         r0, r7
  0003c	eb000000	 bl          PurgeComm

; 257  : 	 
; 258  : 	for(DWORD index=0;index<NumOfBytes;index++)

  00040	e3a04000	 mov         r4, #0
  00044	e3550000	 cmp         r5, #0
  00048	0a00000b	 beq         |$LN12@WriteCOMPo|
  0004c	e3a08000	 mov         r8, #0
  00050		 |$LL4@WriteCOMPo|

; 259  : 	{	 
; 260  : 		if(!WriteFile (PortHandle,&lpBuffer[index],1,&dwBytes,NULL))

  00050	e28d3004	 add         r3, sp, #4
  00054	e3a02001	 mov         r2, #1
  00058	e0841006	 add         r1, r4, r6
  0005c	e1a00007	 mov         r0, r7
  00060	e58d8000	 str         r8, [sp]
  00064	eb000000	 bl          WriteFile
  00068	e3500000	 cmp         r0, #0
  0006c	0a000002	 beq         |$LN12@WriteCOMPo|
  00070	e2844001	 add         r4, r4, #1
  00074	e1540005	 cmp         r4, r5
  00078	3afffff4	 bcc         |$LL4@WriteCOMPo|
  0007c		 |$LN12@WriteCOMPo|

; 261  : 			break;  
; 262  : 	} 	 
; 263  : 	 
; 264  : 	delete lpBuffer;

  0007c	e1a00006	 mov         r0, r6
  00080	eb000000	 bl          |??3@YAXPAX@Z|

; 265  : 	 
; 266  : 	(index==NumOfBytes) ? status=TRUE : status=FALSE ;

  00084	e1540005	 cmp         r4, r5
  00088	03a00001	 moveq       r0, #1
  0008c	13a00000	 movne       r0, #0

; 267  :          
; 268  : 	return status;       
; 269  : }

  00090	e28dd008	 add         sp, sp, #8
  00094	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$M37484|

			 ENDP  ; |?WriteCOMPort@CComProtocol@@QAAHPAXPBXK@Z|, CComProtocol::WriteCOMPort

	EXPORT	|?Write_RFID_CMD@CComProtocol@@QAAHPAXPAD@Z| ; CComProtocol::Write_RFID_CMD
	IMPORT	|strlen|

  00000			 AREA	 |.pdata|, PDATA
|$T37500| DCD	|$LN5@Write_RFID|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Write_RFID_CMD@CComProtocol@@QAAHPAXPAD@Z| PROC ; CComProtocol::Write_RFID_CMD

; 273  : {      	

  00000		 |$LN5@Write_RFID|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M37497|
  00004	e1a05002	 mov         r5, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a04000	 mov         r4, r0

; 274  : 	DWORD  dwSize=strlen(CMDString);					

  00010	e1a00005	 mov         r0, r5
  00014	eb000000	 bl          strlen
  00018	e1a03000	 mov         r3, r0

; 275  : 	   
; 276  : 	BOOL status=WriteCOMPort(hDevComPort,CMDString,dwSize); 	

  0001c	e1a00004	 mov         r0, r4
  00020	e1a02005	 mov         r2, r5
  00024	e1a01006	 mov         r1, r6
  00028	eb000000	 bl          |?WriteCOMPort@CComProtocol@@QAAHPAXPBXK@Z|

; 277  :               
; 278  : 	return status; 
; 279  : }

  0002c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M37498|

			 ENDP  ; |?Write_RFID_CMD@CComProtocol@@QAAHPAXPAD@Z|, CComProtocol::Write_RFID_CMD

	EXPORT	|?Read_RFID_CMD@CComProtocol@@QAAHPAXPAEKPAK@Z| ; CComProtocol::Read_RFID_CMD
	IMPORT	|ReadFile|

  00000			 AREA	 |.pdata|, PDATA
|$T37518| DCD	|$LN15@Read_RFID_|
	DCD	0x40001e02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Read_RFID_CMD@CComProtocol@@QAAHPAXPAEKPAK@Z| PROC ; CComProtocol::Read_RFID_CMD

; 282  : {

  00000		 |$LN15@Read_RFID_|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M37515|
  00008	e1a06003	 mov         r6, r3
  0000c	e1a05002	 mov         r5, r2
  00010	e1a07001	 mov         r7, r1

; 283  : 	BOOL   status=FALSE;
; 284  : 	BYTE   dwByte;
; 285  : 	DWORD  dwBytesTransferred,iBytes;
; 286  :   
; 287  : 	iBytes=0;

  00014	e3a04000	 mov         r4, #0
  00018	e3a08000	 mov         r8, #0
  0001c		 |$LL6@Read_RFID_|

; 288  :       // Loop for waiting for the data.
; 289  : 	do
; 290  : 	{
; 291  :         // Read the data from the serial port.      
; 292  : 		status = ReadFile(hDevComPort,&dwByte, 1, &dwBytesTransferred, 0);

  0001c	e28d3008	 add         r3, sp, #8
  00020	e3a02001	 mov         r2, #1
  00024	e28d1004	 add         r1, sp, #4
  00028	e1a00007	 mov         r0, r7
  0002c	e58d8000	 str         r8, [sp]
  00030	eb000000	 bl          ReadFile

; 293  :         if(!dwBytesTransferred)

  00034	e59de008	 ldr         lr, [sp, #8]
  00038	e35e0000	 cmp         lr, #0
  0003c	0a000005	 beq         |$LN4@Read_RFID_|

; 294  :              break;                         
; 295  :         else  
; 296  : 		{
; 297  : 			iBytes++;

  00040	e2844001	 add         r4, r4, #1

; 298  : 			if(iBytes<dwBufferSize)           

  00044	e1540006	 cmp         r4, r6

; 299  : 			{
; 300  : 				*lpDataBuffer=dwByte;

  00048	35dd3004	 ldrccb      r3, [sp, #4]
  0004c	34c53001	 strccb      r3, [r5], #1

; 301  : 				lpDataBuffer++;
; 302  : 			}
; 303  : 		}
; 304  : 	} while (status); 

  00050	e3500000	 cmp         r0, #0
  00054	1afffff0	 bne         |$LL6@Read_RFID_|
  00058		 |$LN4@Read_RFID_|

; 305  : 	*lpNumberOfBytesRead=iBytes;

  00058	e59d3024	 ldr         r3, [sp, #0x24]

; 306  :         
; 307  : 	return iBytes ? TRUE : FALSE;

  0005c	e3540000	 cmp         r4, #0
  00060	13a00001	 movne       r0, #1
  00064	e5834000	 str         r4, [r3]
  00068	03a00000	 moveq       r0, #0

; 308  : }

  0006c	e28dd00c	 add         sp, sp, #0xC
  00070	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M37516|

			 ENDP  ; |?Read_RFID_CMD@CComProtocol@@QAAHPAXPAEKPAK@Z|, CComProtocol::Read_RFID_CMD

	EXPORT	|?SetupCOMPort@CComProtocol@@QAAPAXPBGKEEE@Z| ; CComProtocol::SetupCOMPort
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_1CE@JECJJCJL@?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAF?$AAa?$AAi?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@NNCJONHM@?$AA?6?$AA?$AN?$AA?$CL?$AAS?$AAe?$AAt?$AAu?$AAp?$AAC?$AAO?$AAM?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AAB?$AAa?$AAu?$AAd?$AAR?$AAa?$AAt?$AAe?$AA?3?$AA?$CF?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	IMPORT	|SetCommTimeouts|
	IMPORT	|MessageBoxW|
	IMPORT	|CreateFileW|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T37535| DCD	|$LN9@SetupCOMPo|
	DCD	0x40005e02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@JECJJCJL@?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAF?$AAa?$AAi?$AAl?$AA?$AA@| DCB "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@NNCJONHM@?$AA?6?$AA?$AN?$AA?$CL?$AAS?$AAe?$AAt?$AAu?$AAp?$AAC?$AAO?$AAM?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AAB?$AAa?$AAu?$AAd?$AAR?$AAa?$AAt?$AAe?$AA?3?$AA?$CF?$AAd?$AA?$AN?$AA?6@| DCB 0xa
	DCB	0x0, 0xd, 0x0, "+", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "u"
	DCB	0x0, "p", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "P", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, ":", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "B", 0x0, "a", 0x0, "u", 0x0, "d", 0x0, "R", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetupCOMPort@CComProtocol@@QAAPAXPBGKEEE@Z| PROC ; CComProtocol::SetupCOMPort

; 122  : {    

  00000		 |$LN9@SetupCOMPo|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd03c	 sub         sp, sp, #0x3C
  00008		 |$M37532|
  00008	e1a08003	 mov         r8, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1a04001	 mov         r4, r1
  00014	e1a06000	 mov         r6, r0

; 123  :         COMMTIMEOUTS cto;
; 124  :         DCB PortDCB;   
; 125  :          
; 126  :         HANDLE hComPort=INVALID_HANDLE_VALUE;	
; 127  :         
; 128  :                                                                                         	  
; 129  : 	RETAILMSG(1, (L"\n\r+SetupCOMPort:%s BaudRate:%d\r\n",COMPort,BaudRate ));   

  00018	e59f0154	 ldr         r0, [pc, #0x154]
  0001c	eb000000	 bl          NKDbgPrintfW

; 130  : 	
; 131  : 	hComPort = CreateFile(COMPort,	// Pointer to the name of the port
; 132  : 	GENERIC_READ | GENERIC_WRITE,	// Access (read-write) mode
; 133  : 	0,				// Share mode
; 134  : 	NULL,				// Pointer to the security attribute
; 135  : 	OPEN_EXISTING,			// How to open the serial port
; 136  : 	0,				// Port attributes
; 137  : 	NULL);			         // Handle to port with attribute to copy

  00020	e3a03003	 mov         r3, #3
  00024	e58d3000	 str         r3, [sp]
  00028	e3a0e000	 mov         lr, #0
  0002c	e3a03000	 mov         r3, #0
  00030	e3a02000	 mov         r2, #0
  00034	e3a01103	 mov         r1, #3, 2
  00038	e1a00004	 mov         r0, r4
  0003c	e58de008	 str         lr, [sp, #8]
  00040	e58de004	 str         lr, [sp, #4]
  00044	eb000000	 bl          CreateFileW
  00048	e1b05000	 movs        r5, r0

; 138  : 	
; 139  : 	
; 140  : 	if(hComPort)

  0004c	0a000042	 beq         |$LN2@SetupCOMPo|

; 141  : 	{
; 142  : 	       memset(&PortDCB, 0, sizeof(DCB));

  00050	e3a0201c	 mov         r2, #0x1C
  00054	e3a01000	 mov         r1, #0
  00058	e28d0020	 add         r0, sp, #0x20
  0005c	eb000000	 bl          memset

; 143  : 			
; 144  : 	       //set the COMM setting			 	
; 145  : 	       if(!GetCommState(hComPort,&PortDCB))

  00060	e28d1020	 add         r1, sp, #0x20
  00064	e1a00005	 mov         r0, r5
  00068	eb000000	 bl          GetCommState
  0006c	e3500000	 cmp         r0, #0
  00070	1a000009	 bne         |$LN1@SetupCOMPo|

; 146  : 	       {
; 147  :           //ERRORMSG(1, (L"\n\rOpenCOM->GetCommState fail (%d)\r\n",GetLastError()));
; 148  :           
; 149  :           CloseCOMPort(hComPort);  

  00074	e1a01005	 mov         r1, r5
  00078	e1a00006	 mov         r0, r6
  0007c	eb000000	 bl          |?CloseCOMPort@CComProtocol@@QAAXPAX@Z|

; 150  :           
; 151  :           MessageBox(NULL,L"GetCommState Fail",L"",MB_OK|MB_TOPMOST); 

  00080	e59f20e8	 ldr         r2, [pc, #0xE8]
  00084	e59f10e0	 ldr         r1, [pc, #0xE0]
  00088	e3a03701	 mov         r3, #1, 14
  0008c	e3a00000	 mov         r0, #0
  00090	eb000000	 bl          MessageBoxW

; 152  :           
; 153  :           return NULL;

  00094	e3a05000	 mov         r5, #0
  00098	ea00002f	 b           |$LN2@SetupCOMPo|
  0009c		 |$LN1@SetupCOMPo|

; 154  :          }	 	 
; 155  : 	       
; 156  :     
; 157  :          PortDCB.BaudRate = BaudRate;         // Current baud 
; 158  :          PortDCB.fBinary = TRUE;               // Binary mode; no EOF check 
; 159  :          PortDCB.fParity = FALSE;              // Enable parity checking 
; 160  :          PortDCB.fOutxCtsFlow = FALSE;         // No CTS output flow control 
; 161  :          PortDCB.fOutxDsrFlow = FALSE;         // No DSR output flow control 
; 162  :          PortDCB.fDtrControl = DTR_CONTROL_ENABLE; 
; 163  :                                                // DTR flow control type 
; 164  :          PortDCB.fDsrSensitivity = FALSE;      // DSR sensitivity 
; 165  :          PortDCB.fTXContinueOnXoff = FALSE;    // XOFF continues Tx 
; 166  :          PortDCB.fOutX = FALSE;                // No XON/XOFF out flow control 
; 167  :          PortDCB.fInX = FALSE;                 // No XON/XOFF in flow control 
; 168  :          PortDCB.fErrorChar = FALSE;           // Disable error replacement 
; 169  :          PortDCB.fNull = FALSE;                // Disable null stripping 
; 170  :          PortDCB.fRtsControl = RTS_CONTROL_ENABLE ; 

  0009c	e59d2028	 ldr         r2, [sp, #0x28]
  000a0	e3e03c7f	 mvn         r3, #0x7F, 24
  000a4	e22330ff	 eor         r3, r3, #0xFF
  000a8	e3a01a01	 mov         r1, #1, 20

; 171  :                                                // RTS flow control 
; 172  :          PortDCB.fAbortOnError = FALSE;        // Do not abort reads/writes on 
; 173  :                                                // error
; 174  :          PortDCB.ByteSize = ByteSize;          // Number of bits/byte, 4-8 

  000ac	e5dde054	 ldrb        lr, [sp, #0x54]

; 175  :          PortDCB.Parity = Parity;              // 0-4=no,odd,even,mark,space 
; 176  :          PortDCB.StopBits = StopBits;          // 0,1,2 = 1, 1.5, 2 

  000b0	e5dd4058	 ldrb        r4, [sp, #0x58]
  000b4	e0022003	 and         r2, r2, r3
  000b8	e3813011	 orr         r3, r1, #0x11
  000bc	e1823003	 orr         r3, r2, r3

; 177  :          
; 178  :          SetCommState(hComPort, &PortDCB);

  000c0	e28d1020	 add         r1, sp, #0x20
  000c4	e1a00005	 mov         r0, r5
  000c8	e58d3028	 str         r3, [sp, #0x28]
  000cc	e58d7024	 str         r7, [sp, #0x24]
  000d0	e5cde032	 strb        lr, [sp, #0x32]
  000d4	e5cd8033	 strb        r8, [sp, #0x33]
  000d8	e5cd4034	 strb        r4, [sp, #0x34]
  000dc	eb000000	 bl          SetCommState

; 179  : 	 
; 180  : 	 
; 181  :          //set the COMM timeout                
; 182  :          cto.ReadIntervalTimeout	= 50;
; 183  :          cto.ReadTotalTimeoutMultiplier	= 1 ;
; 184  :          cto.ReadTotalTimeoutConstant	= 500;

  000e0	e3a01f7d	 mov         r1, #0x7D, 30

; 185  :          cto.WriteTotalTimeoutMultiplier= 1;

  000e4	e3a00001	 mov         r0, #1

; 186  :          cto.WriteTotalTimeoutConstant	= 50;												 

  000e8	e58d1014	 str         r1, [sp, #0x14]
  000ec	e58d0018	 str         r0, [sp, #0x18]
  000f0	e3a03032	 mov         r3, #0x32
  000f4	e3a02001	 mov         r2, #1
  000f8	e3a0e032	 mov         lr, #0x32

; 187  :          SetCommTimeouts(hComPort, &cto);

  000fc	e28d100c	 add         r1, sp, #0xC
  00100	e1a00005	 mov         r0, r5
  00104	e58d300c	 str         r3, [sp, #0xC]
  00108	e58d2010	 str         r2, [sp, #0x10]
  0010c	e58de01c	 str         lr, [sp, #0x1C]
  00110	eb000000	 bl          SetCommTimeouts

; 188  : 	
; 189  :          //clear thr input and output buffer
; 190  :          PurgeComm(hComPort, PURGE_TXABORT | PURGE_RXABORT | PURGE_TXCLEAR | PURGE_RXCLEAR);

  00114	e3a0100f	 mov         r1, #0xF
  00118	e1a00005	 mov         r0, r5
  0011c	eb000000	 bl          PurgeComm

; 191  :         
; 192  :          EscapeCommFunction (hComPort, CLRBREAK); 

  00120	e3a01009	 mov         r1, #9
  00124	e1a00005	 mov         r0, r5
  00128	eb000000	 bl          EscapeCommFunction

; 193  :          EscapeCommFunction (hComPort, CLRDTR);

  0012c	e3a01006	 mov         r1, #6
  00130	e1a00005	 mov         r0, r5
  00134	eb000000	 bl          EscapeCommFunction

; 194  :          EscapeCommFunction (hComPort, CLRRTS); 

  00138	e3a01004	 mov         r1, #4
  0013c	e1a00005	 mov         r0, r5
  00140	eb000000	 bl          EscapeCommFunction

; 195  : 			
; 196  :          EscapeCommFunction (hComPort, SETDTR);

  00144	e3a01005	 mov         r1, #5
  00148	e1a00005	 mov         r0, r5
  0014c	eb000000	 bl          EscapeCommFunction

; 197  :          EscapeCommFunction (hComPort, SETRTS);  

  00150	e3a01003	 mov         r1, #3
  00154	e1a00005	 mov         r0, r5
  00158	eb000000	 bl          EscapeCommFunction
  0015c		 |$LN2@SetupCOMPo|

; 198  :        }
; 199  :     
; 200  :  	//RETAILMSG(1, (L"\n\r-SetupCOMPort:%x\r\n",hComPort ));              
; 201  : 
; 202  : return hComPort;
; 203  :      
; 204  : 
; 205  : }

  0015c	e1a00005	 mov         r0, r5
  00160	e28dd03c	 add         sp, sp, #0x3C
  00164	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00168	e12fff1e	 bx          lr
  0016c		 |$LN10@SetupCOMPo|
  0016c		 |$LN11@SetupCOMPo|
  0016c	00000000	 DCD         |??_C@_1CE@JECJJCJL@?$AAG?$AAe?$AAt?$AAC?$AAo?$AAm?$AAm?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAF?$AAa?$AAi?$AAl?$AA?$AA@|
  00170		 |$LN12@SetupCOMPo|
  00170	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  00174		 |$LN13@SetupCOMPo|
  00174	00000000	 DCD         |??_C@_1EC@NNCJONHM@?$AA?6?$AA?$AN?$AA?$CL?$AAS?$AAe?$AAt?$AAu?$AAp?$AAC?$AAO?$AAM?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AAB?$AAa?$AAu?$AAd?$AAR?$AAa?$AAt?$AAe?$AA?3?$AA?$CF?$AAd?$AA?$AN?$AA?6@|
  00178		 |$M37533|

			 ENDP  ; |?SetupCOMPort@CComProtocol@@QAAPAXPBGKEEE@Z|, CComProtocol::SetupCOMPort

	END
