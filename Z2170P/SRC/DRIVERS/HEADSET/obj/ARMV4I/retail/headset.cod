; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\HEADSET\headset.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BK@BADOLFOK@?$AAH?$AAd?$AAs?$AAt?$AAM?$AAu?$AAt?$AAe?$AAG?$AAp?$AAi?$AAo?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@FNMBFBFA@?$AAH?$AAd?$AAs?$AAt?$AAD?$AAe?$AAt?$AAG?$AAp?$AAi?$AAo?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DEVICE_IFC_TWL_GUID| [ DATA ]
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@BADOLFOK@?$AAH?$AAd?$AAs?$AAt?$AAM?$AAu?$AAt?$AAe?$AAG?$AAp?$AAi?$AAo?$AA?$AA@| DCB "H"
	DCB	0x0, "d", 0x0, "s", 0x0, "t", 0x0, "M", 0x0, "u", 0x0, "t"
	DCB	0x0, "e", 0x0, "G", 0x0, "p", 0x0, "i", 0x0, "o", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@FNMBFBFA@?$AAH?$AAd?$AAs?$AAt?$AAD?$AAe?$AAt?$AAG?$AAp?$AAi?$AAo?$AA?$AA@| DCB "H"
	DCB	0x0, "d", 0x0, "s", 0x0, "t", 0x0, "D", 0x0, "e", 0x0, "t"
	DCB	0x0, "G", 0x0, "p", 0x0, "i", 0x0, "o", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "2", 0x0, "5", 0x0, "6", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "H", 0x0, "D", 0x0, "S", 0x0, 0x0, 0x0
	%	56
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0
	%	56
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCD	0x13

  00000			 AREA	 |.rdata|, DATA, READONLY
|DEVICE_IFC_TWL_GUID| DCD 0xdef0a04b
	DCW	0xb967
	DCW	0x43db
	DCB	0x95
	DCB	0x9e
	DCB	0xd9
	DCB	0xfc
	DCB	0x62
	DCB	0x25
	DCB	0xcd
	DCB	0xeb
|s_deviceRegParams| DCD |??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x4
	DCD	0x4
	DCD	0xc8
	DCD	|??_C@_1BI@FNMBFBFA@?$AAH?$AAd?$AAs?$AAt?$AAD?$AAe?$AAt?$AAG?$AAp?$AAi?$AAo?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x38
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BK@BADOLFOK@?$AAH?$AAd?$AAs?$AAt?$AAM?$AAu?$AAt?$AAe?$AAG?$AAp?$AAi?$AAo?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x3c
	DCD	0x4
	DCD	0x0
	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T36234| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36231|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M36232|

			 ENDP  ; |SetEvent|

	EXPORT	|?HDS_Deinit@@YAHK@Z|			; HDS_Deinit
	IMPORT	|LocalFree|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|GPIOClose|
	IMPORT	|GPIOInterruptDisable|
	IMPORT	|GPIOInterruptMask|
	IMPORT	|CloseHandle|
	IMPORT	|WaitForSingleObject|

  00000			 AREA	 |.pdata|, PDATA
|$T36249| DCD	|$LN15@HDS_Deinit|
	DCD	0x40003401
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\headset\headset.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HDS_Deinit@@YAHK@Z| PROC		; HDS_Deinit

; 274  : {

  00000		 |$LN15@HDS_Deinit|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36246|
  00004	e1b04000	 movs        r4, r0

; 275  :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 276  :     HeadsetDevice_t *pDevice = (HeadsetDevice_t*)context;
; 277  : 
; 278  :     DEBUGMSG(ZONE_FUNCTION, (L"+HDS_Deinit(0x%08x)\r\n", context));
; 279  : 
; 280  :     // Check if we get correct context
; 281  :     if ((pDevice == NULL) || (pDevice->cookie != HDS_DEVICE_COOKIE))

  0000c	0a00002c	 beq         |$cleanUp$36103|
  00010	e5942000	 ldr         r2, [r4]
  00014	e59f30b0	 ldr         r3, [pc, #0xB0]
  00018	e1520003	 cmp         r2, r3
  0001c	1a000028	 bne         |$cleanUp$36103|

; 282  :         {
; 283  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: HDS_Deinit: "
; 284  :             L"Incorrect context parameter\r\n"
; 285  :             ));
; 286  :         goto cleanUp;
; 287  :         }
; 288  : 
; 289  :     // Signal stop to threads
; 290  :     pDevice->intrThreadExit = TRUE;
; 291  : 
; 292  :     // Close interrupt thread
; 293  :     if (pDevice->hIntrThread != NULL)

  00020	e5943030	 ldr         r3, [r4, #0x30]
  00024	e3a02001	 mov         r2, #1
  00028	e5842034	 str         r2, [r4, #0x34]
  0002c	e3530000	 cmp         r3, #0
  00030	0a000007	 beq         |$LN5@HDS_Deinit|

; 294  :         {
; 295  :         // Set event to wake it
; 296  :         SetEvent(pDevice->hIntrEvent);

  00034	e594002c	 ldr         r0, [r4, #0x2C]
  00038	e3a01003	 mov         r1, #3
  0003c	eb000000	 bl          EventModify

; 297  :         // Wait until thread exits
; 298  :         WaitForSingleObject(pDevice->hIntrThread, INFINITE);

  00040	e5940030	 ldr         r0, [r4, #0x30]
  00044	e3e01000	 mvn         r1, #0
  00048	eb000000	 bl          WaitForSingleObject

; 299  :         // Close handle
; 300  :         CloseHandle(pDevice->hIntrThread);

  0004c	e5940030	 ldr         r0, [r4, #0x30]
  00050	eb000000	 bl          CloseHandle
  00054		 |$LN5@HDS_Deinit|

; 301  :         }
; 302  : 
; 303  :     // Disable GPIO interrupt
; 304  :     if (pDevice->hGPIO != NULL)

  00054	e594300c	 ldr         r3, [r4, #0xC]
  00058	e1b00003	 movs        r0, r3
  0005c	0a00000f	 beq         |$LN2@HDS_Deinit|

; 305  :         {
; 306  :         GPIOInterruptMask(pDevice->hGPIO, pDevice->hdstDetGpio, pDevice->dwSysIntr, TRUE);

  00060	e5942040	 ldr         r2, [r4, #0x40]
  00064	e5941038	 ldr         r1, [r4, #0x38]
  00068	e3a03001	 mov         r3, #1
  0006c	eb000000	 bl          GPIOInterruptMask

; 307  :         if (pDevice->hIntrEvent != NULL)

  00070	e594302c	 ldr         r3, [r4, #0x2C]
  00074	e3530000	 cmp         r3, #0

; 308  :             {
; 309  :             GPIOInterruptDisable(pDevice->hGPIO, pDevice->hdstDetGpio, pDevice->dwSysIntr);

  00078	15942040	 ldrne       r2, [r4, #0x40]
  0007c	15941038	 ldrne       r1, [r4, #0x38]
  00080	1594000c	 ldrne       r0, [r4, #0xC]
  00084	1b000000	 blne        GPIOInterruptDisable

; 310  :             }
; 311  :         GPIOClose(pDevice->hGPIO);

  00088	e594000c	 ldr         r0, [r4, #0xC]
  0008c	eb000000	 bl          GPIOClose

; 312  :         }
; 313  : 
; 314  :     // Close GPIO driver
; 315  :     if (pDevice->hGPIO != NULL)

  00090	e594300c	 ldr         r3, [r4, #0xC]
  00094	e3530000	 cmp         r3, #0

; 316  :         {
; 317  :         GPIOClose(pDevice->hGPIO);

  00098	11a00003	 movne       r0, r3
  0009c	1b000000	 blne        GPIOClose
  000a0		 |$LN2@HDS_Deinit|

; 318  :         }
; 319  : 
; 320  :     // Close interrupt handler
; 321  :     if (pDevice->hIntrEvent != NULL) CloseHandle(pDevice->hIntrEvent);

  000a0	e594302c	 ldr         r3, [r4, #0x2C]
  000a4	e3530000	 cmp         r3, #0
  000a8	11a00003	 movne       r0, r3
  000ac	1b000000	 blne        CloseHandle

; 322  : 
; 323  :     // Delete critical section
; 324  :     DeleteCriticalSection(&pDevice->cs);

  000b0	e2840018	 add         r0, r4, #0x18
  000b4	eb000000	 bl          DeleteCriticalSection

; 325  : 
; 326  :     // Free device structure
; 327  :     LocalFree(pDevice);

  000b8	e1a00004	 mov         r0, r4
  000bc	eb000000	 bl          LocalFree

; 328  : 
; 329  :     // Done
; 330  :     rc = TRUE;

  000c0	e3a00001	 mov         r0, #1
  000c4		 |$cleanUp$36103|

; 331  : 
; 332  : cleanUp:
; 333  :     DEBUGMSG(ZONE_FUNCTION, (L"-HDS_Deinit(rc = %d)\r\n", rc));
; 334  :     return rc;
; 335  : }

  000c4	e8bd4010	 ldmia       sp!, {r4, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$LN16@HDS_Deinit|
  000cc		 |$LN17@HDS_Deinit|
  000cc	68647344	 DCD         0x68647344
  000d0		 |$M36247|

			 ENDP  ; |?HDS_Deinit@@YAHK@Z|, HDS_Deinit

	EXPORT	|?HDS_Open@@YAKKKK@Z|			; HDS_Open

  00000			 AREA	 |.pdata|, PDATA
|$T36261| DCD	|$LN5@HDS_Open|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HDS_Open@@YAKKKK@Z| PROC		; HDS_Open

; 349  : {

  00000		 |$LN5@HDS_Open|
  00000		 |$M36258|

; 350  : 	UNREFERENCED_PARAMETER(accessCode);
; 351  : 	UNREFERENCED_PARAMETER(shareMode);
; 352  : 
; 353  :     return context;
; 354  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M36259|

			 ENDP  ; |?HDS_Open@@YAKKKK@Z|, HDS_Open

	EXPORT	|?HDS_Close@@YAHK@Z|			; HDS_Close

  00000			 AREA	 |.pdata|, PDATA
|$T36270| DCD	|$LN5@HDS_Close|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HDS_Close@@YAHK@Z| PROC		; HDS_Close

; 366  : {

  00000		 |$LN5@HDS_Close|
  00000		 |$M36267|

; 367  : 	UNREFERENCED_PARAMETER(context);
; 368  : 
; 369  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 370  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M36268|

			 ENDP  ; |?HDS_Close@@YAHK@Z|, HDS_Close

	EXPORT	|?HDS_IOControl@@YAHKKPAEK0KPAK@Z|	; HDS_IOControl

  00000			 AREA	 |.pdata|, PDATA
|$T36279| DCD	|$LN8@HDS_IOCont|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HDS_IOControl@@YAHKKPAEK0KPAK@Z| PROC ; HDS_IOControl

; 388  : {

  00000		 |$LN8@HDS_IOCont|
  00000		 |$M36276|
  00000		 |$cleanUp$36135|

; 389  :     BOOL rc = FALSE;
; 390  :     HeadsetDevice_t *pDevice = (HeadsetDevice_t*)context;
; 391  : 
; 392  : 	UNREFERENCED_PARAMETER(pOutSize);
; 393  : 	UNREFERENCED_PARAMETER(outSize);
; 394  : 	UNREFERENCED_PARAMETER(pOutBuffer);
; 395  : 	UNREFERENCED_PARAMETER(inSize);
; 396  : 	UNREFERENCED_PARAMETER(pInBuffer);
; 397  : 	UNREFERENCED_PARAMETER(code);
; 398  : 
; 399  :     DEBUGMSG(ZONE_FUNCTION, (
; 400  :         L"+HDS_IOControl(0x%08x, 0x%08x, 0x%08x, %d, 0x%08x, %d, 0x%08x)\r\n",
; 401  :         context, code, pInBuffer, inSize, pOutBuffer, outSize, pOutSize
; 402  :     ));
; 403  : 
; 404  :     // Check if we get correct context
; 405  :     if (pDevice == NULL || pDevice->cookie != HDS_DEVICE_COOKIE)
; 406  :         {
; 407  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: HDS_IOControl: "
; 408  :             L"Incorrect context paramer\r\n"
; 409  :         ));
; 410  :         goto cleanUp;
; 411  :         }
; 412  : 
; 413  :     // Nothing to do
; 414  : 
; 415  : cleanUp:
; 416  :     DEBUGMSG(ZONE_FUNCTION, (L"-HDS_IOControl(rc = %d)\r\n", rc));
; 417  :     return rc;

  00000	e3a00000	 mov         r0, #0

; 418  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M36277|

			 ENDP  ; |?HDS_IOControl@@YAHKKPAEK0KPAK@Z|, HDS_IOControl

	EXPORT	|?SetHeadsetHardwareState@@YAXH@Z|	; SetHeadsetHardwareState
	EXPORT	|??_C@_1BA@LDBHIHGH@?$AAH?$AAe?$AAa?$AAd?$AAs?$AAe?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@EMKLBGBG@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|RegCloseKey|
	IMPORT	|RegSetValueExW|
	IMPORT	|RegCreateKeyExW|

  00000			 AREA	 |.pdata|, PDATA
|$T36290| DCD	|$LN9@SetHeadset|
	DCD	0x40002702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LDBHIHGH@?$AAH?$AAe?$AAa?$AAd?$AAs?$AAe?$AAt?$AA?$AA@| DCB "H", 0x0
	DCB	"e", 0x0, "a", 0x0, "d", 0x0, "s", 0x0, "e", 0x0, "t", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@EMKLBGBG@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AA@| DCB "S"
	DCB	0x0, "y", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "m", 0x0, "\\"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "\\"
	DCB	0x0, "H", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "w", 0x0, "a"
	DCB	0x0, "r", 0x0, "e", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetHeadsetHardwareState@@YAXH@Z| PROC ; SetHeadsetHardwareState

; 430  : {

  00000		 |$LN9@SetHeadset|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd020	 sub         sp, sp, #0x20
  00008		 |$M36287|
  00008	e1a05000	 mov         r5, r0

; 431  :     HKEY hKey;
; 432  :     DWORD dwDisposition;
; 433  :     if (RegCreateKeyEx(
; 434  :             SN_HEADSETPRESENT_ROOT,
; 435  :             SN_HEADSETPRESENT_PATH,
; 436  :             0, NULL,
; 437  :             REG_OPTION_VOLATILE,
; 438  :             0, NULL,
; 439  :             &hKey,
; 440  :             &dwDisposition) == ERROR_SUCCESS)

  0000c	e59f1084	 ldr         r1, [pc, #0x84]
  00010	e28de01c	 add         lr, sp, #0x1C
  00014	e28d4018	 add         r4, sp, #0x18
  00018	e3a07001	 mov         r7, #1
  0001c	e3a06000	 mov         r6, #0
  00020	e3a03000	 mov         r3, #0
  00024	e3a02000	 mov         r2, #0
  00028	e3a0010a	 mov         r0, #0xA, 2
  0002c	e58de010	 str         lr, [sp, #0x10]
  00030	e58d400c	 str         r4, [sp, #0xC]
  00034	e58d6008	 str         r6, [sp, #8]
  00038	e58d6004	 str         r6, [sp, #4]
  0003c	e58d7000	 str         r7, [sp]
  00040	eb000000	 bl          RegCreateKeyExW
  00044	e3500000	 cmp         r0, #0
  00048	1a00000e	 bne         |$LN1@SetHeadset|

; 441  :     {
; 442  :         DWORD dwData = fHeadsetIn ? 1 : 0;

  0004c	e3550000	 cmp         r5, #0
  00050	13a03001	 movne       r3, #1

; 443  :         RegSetValueEx(
; 444  :             hKey,
; 445  :             SN_HEADSETPRESENT_VALUE,
; 446  :             0,
; 447  :             REG_DWORD,
; 448  :             (const PBYTE) &dwData,
; 449  :             sizeof(dwData));

  00054	e59f1038	 ldr         r1, [pc, #0x38]
  00058	e59d0018	 ldr         r0, [sp, #0x18]
  0005c	03a03000	 moveq       r3, #0
  00060	e58d3014	 str         r3, [sp, #0x14]
  00064	e3a04004	 mov         r4, #4
  00068	e28de014	 add         lr, sp, #0x14
  0006c	e3a03004	 mov         r3, #4
  00070	e3a02000	 mov         r2, #0
  00074	e58d4004	 str         r4, [sp, #4]
  00078	e58de000	 str         lr, [sp]
  0007c	eb000000	 bl          RegSetValueExW

; 450  : 
; 451  :         RegCloseKey(hKey);

  00080	e59d0018	 ldr         r0, [sp, #0x18]
  00084	eb000000	 bl          RegCloseKey
  00088		 |$LN1@SetHeadset|

; 452  :     }
; 453  : }

  00088	e28dd020	 add         sp, sp, #0x20
  0008c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$LN10@SetHeadset|
  00094		 |$LN11@SetHeadset|
  00094	00000000	 DCD         |??_C@_1BA@LDBHIHGH@?$AAH?$AAe?$AAa?$AAd?$AAs?$AAe?$AAt?$AA?$AA@|
  00098		 |$LN12@SetHeadset|
  00098	00000000	 DCD         |??_C@_1CM@EMKLBGBG@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?2?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?2?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?$AA@|
  0009c		 |$M36288|

			 ENDP  ; |?SetHeadsetHardwareState@@YAXH@Z|, SetHeadsetHardwareState

	EXPORT	|?HDS_IntrThread@@YAKPAX@Z|		; HDS_IntrThread
	IMPORT	|DeviceIoControl|
	IMPORT	|GPIOGetBit|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T36313| DCD	|$LN18@HDS_IntrTh|
	DCD	0x40003002
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\headset\headset.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HDS_IntrThread@@YAKPAX@Z| PROC	; HDS_IntrThread

; 462  : {

  00000		 |$LN18@HDS_IntrTh|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M36310|
  00008	e1a04000	 mov         r4, r0

; 463  :     HeadsetDevice_t *pDevice = (HeadsetDevice_t*)pContext;
; 464  :     BOOL fInitialDetection = TRUE;
; 465  : 
; 466  :     // Set the interrupt event to trigger initial state setting.
; 467  :     SetEvent(pDevice->hIntrEvent);

  0000c	e594002c	 ldr         r0, [r4, #0x2C]
  00010	e3a01003	 mov         r1, #3
  00014	e3a05001	 mov         r5, #1
  00018	eb000000	 bl          EventModify

; 468  : 
; 469  :     // Loop until we are not stopped...
; 470  :     while (!pDevice->intrThreadExit)

  0001c	e5943034	 ldr         r3, [r4, #0x34]
  00020	e3530000	 cmp         r3, #0
  00024	1a000021	 bne         |$cleanup$36160|
  00028	e3a07000	 mov         r7, #0
  0002c	e3a087da	 mov         r8, #0xDA, 14
  00030		 |$LL7@HDS_IntrTh|

; 471  :         {
; 472  : 
; 473  :         // Wait for event
; 474  :         WaitForSingleObject(pDevice->hIntrEvent, INFINITE);

  00030	e594002c	 ldr         r0, [r4, #0x2C]
  00034	e3e01000	 mvn         r1, #0
  00038	eb000000	 bl          WaitForSingleObject

; 475  :         if (pDevice->intrThreadExit) goto cleanup;

  0003c	e5943034	 ldr         r3, [r4, #0x34]
  00040	e3530000	 cmp         r3, #0
  00044	1a000019	 bne         |$cleanup$36160|

; 476  : 
; 477  :         // Need to debounce?
; 478  : 
; 479  :         // get current status of headset (plugged or unplugged)
; 480  :         BOOL bPluggedIn = (BOOL)GPIOGetBit(pDevice->hGPIO,
; 481  :             pDevice->hdstDetGpio);

  00048	e5941038	 ldr         r1, [r4, #0x38]
  0004c	e594000c	 ldr         r0, [r4, #0xC]
  00050	eb000000	 bl          GPIOGetBit

; 482  : 
; 483  :         DEBUGMSG(ZONE_IST,
; 484  :             (TEXT("HDS_IntrThread: Event occurred (status = %x)\r\n"),
; 485  :             bPluggedIn
; 486  :             ));
; 487  : 
; 488  :         if ((bPluggedIn != pDevice->bPluggedIn) || fInitialDetection)

  00054	e5943014	 ldr         r3, [r4, #0x14]
  00058	e1a06000	 mov         r6, r0
  0005c	e1560003	 cmp         r6, r3
  00060	1a000001	 bne         |$LN2@HDS_IntrTh|
  00064	e3550000	 cmp         r5, #0
  00068	0a00000b	 beq         |$LN1@HDS_IntrTh|
  0006c		 |$LN2@HDS_IntrTh|

; 489  :         {
; 490  :             fInitialDetection = FALSE;
; 491  : 
; 492  :             // Save new state.
; 493  :             pDevice->bPluggedIn = bPluggedIn;
; 494  : 
; 495  :             // Send message to WAV driver when opened...
; 496  :             //
; 497  :             if (pDevice->hWAV != NULL)

  0006c	e5943010	 ldr         r3, [r4, #0x10]
  00070	e3a05000	 mov         r5, #0
  00074	e5846014	 str         r6, [r4, #0x14]
  00078	e1b00003	 movs        r0, r3

; 498  :                 {
; 499  :                 DeviceIoControl(
; 500  :                     pDevice->hWAV, IOCTL_NOTIFY_HEADSET, &pDevice->bPluggedIn,
; 501  :                     sizeof(BOOL), 0, 0, NULL, NULL);

  0007c	13a03004	 movne       r3, #4
  00080	12842014	 addne       r2, r4, #0x14
  00084	13881028	 orrne       r1, r8, #0x28
  00088	158d700c	 strne       r7, [sp, #0xC]
  0008c	158d7008	 strne       r7, [sp, #8]
  00090	158d7004	 strne       r7, [sp, #4]
  00094	158d7000	 strne       r7, [sp]
  00098	1b000000	 blne        DeviceIoControl
  0009c		 |$LN1@HDS_IntrTh|

; 502  :                 }
; 503  :             }
; 504  : 
; 505  :             // Set headset hardware state in registry.
; 506  :             SetHeadsetHardwareState(bPluggedIn);

  0009c	e1a00006	 mov         r0, r6
  000a0	eb000000	 bl          |?SetHeadsetHardwareState@@YAXH@Z|
  000a4	e5943034	 ldr         r3, [r4, #0x34]
  000a8	e3530000	 cmp         r3, #0
  000ac	0affffdf	 beq         |$LL7@HDS_IntrTh|
  000b0		 |$cleanup$36160|

; 507  :         }
; 508  : 
; 509  : cleanup:
; 510  :     return ERROR_SUCCESS;

  000b0	e3a00000	 mov         r0, #0

; 511  : }

  000b4	e28dd010	 add         sp, sp, #0x10
  000b8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$M36311|

			 ENDP  ; |?HDS_IntrThread@@YAKPAX@Z|, HDS_IntrThread

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|

  00000			 AREA	 |.pdata|, PDATA
|$T36324| DCD	|$LN8@DllMain|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllMain| PROC

; 527  : {

  00000		 |$LN8@DllMain|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36321|
  00004	e1a04000	 mov         r4, r0

; 528  : 	UNREFERENCED_PARAMETER(pReserved);
; 529  : 
; 530  :     switch (reason)

  00008	e3510001	 cmp         r1, #1
  0000c	1a000003	 bne         |$LN2@DllMain|

; 531  :         {
; 532  :         case DLL_PROCESS_ATTACH:
; 533  :             RETAILREGISTERZONES((HMODULE)hDLL);

  00010	e59f1014	 ldr         r1, [pc, #0x14]
  00014	eb000000	 bl          RegisterDbgZones

; 534  :             DisableThreadLibraryCalls((HMODULE)hDLL);

  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          DisableThreadLibraryCalls
  00020		 |$LN2@DllMain|

; 535  :             break;
; 536  :         }
; 537  :     return TRUE;

  00020	e3a00001	 mov         r0, #1

; 538  : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$LN9@DllMain|
  0002c		 |$LN10@DllMain|
  0002c	00000000	 DCD         |dpCurSettings|
  00030		 |$M36322|

			 ENDP  ; |DllMain|

	EXPORT	|?HDS_Init@@YAKPBGPBX@Z|		; HDS_Init
	EXPORT	|??_C@_1M@HOEINAAB@?$AAW?$AAA?$AAV?$AA1?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|GPIOInterruptInitialize|
	IMPORT	|CreateEventW|
	IMPORT	|GPIOSetBit|
	IMPORT	|GPIOSetMode|
	IMPORT	|GPIOOpen|
	IMPORT	|CreateFileW|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|LocalAlloc|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T36340| DCD	|$LN20@HDS_Init|
	DCD	0x40005f02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@HOEINAAB@?$AAW?$AAA?$AAV?$AA1?$AA?3?$AA?$AA@| DCB "W", 0x0, "A", 0x0
	DCB	"V", 0x0, "1", 0x0, ":", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HDS_Init@@YAKPBGPBX@Z| PROC		; HDS_Init

; 139  : {

  00000		 |$LN20@HDS_Init|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M36337|
  00008	e1a06000	 mov         r6, r0

; 140  :     DWORD rc = (DWORD)NULL;
; 141  :     HeadsetDevice_t *pDevice = NULL;
; 142  : 
; 143  : 	UNREFERENCED_PARAMETER(pBusContext);
; 144  : 
; 145  :     DEBUGMSG(ZONE_FUNCTION, (
; 146  :         L"+HDS_Init(%s, 0x%08x)\r\n", szContext, pBusContext
; 147  :         ));
; 148  : 
; 149  :     // Create device structure
; 150  :     pDevice = (HeadsetDevice_t *)LocalAlloc(LPTR, sizeof(HeadsetDevice_t));

  0000c	e3a01044	 mov         r1, #0x44
  00010	e3a00040	 mov         r0, #0x40
  00014	e3a05000	 mov         r5, #0
  00018	eb000000	 bl          LocalAlloc
  0001c	e1b04000	 movs        r4, r0

; 151  :     if (pDevice == NULL)

  00020	0a00004b	 beq         |$LN17@HDS_Init|

; 152  :         {
; 153  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: HDS_Init: "
; 154  :             L"Failed allocate HDS driver structure\r\n"
; 155  :             ));
; 156  :         goto cleanUp;
; 157  :         }
; 158  : 
; 159  :     // initialize memory
; 160  :     //
; 161  :     memset(pDevice, 0, sizeof(HeadsetDevice_t));

  00024	e3a02044	 mov         r2, #0x44
  00028	e3a01000	 mov         r1, #0
  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          memset

; 162  : 
; 163  :     // Set cookie & initialize critical section
; 164  :     pDevice->cookie = HDS_DEVICE_COOKIE;

  00034	e59f313c	 ldr         r3, [pc, #0x13C]

; 165  : 
; 166  :     // Initialize crit section
; 167  :     InitializeCriticalSection(&pDevice->cs);

  00038	e1a00004	 mov         r0, r4
  0003c	e4803018	 str         r3, [r0], #0x18
  00040	eb000000	 bl          InitializeCriticalSection

; 168  : 
; 169  :     // Read device parameters
; 170  :     if (GetDeviceRegistryParams(
; 171  :             szContext, pDevice, dimof(s_deviceRegParams), s_deviceRegParams)
; 172  :             != ERROR_SUCCESS)

  00044	e59f3128	 ldr         r3, [pc, #0x128]
  00048	e3a02003	 mov         r2, #3
  0004c	e1a01004	 mov         r1, r4
  00050	e1a00006	 mov         r0, r6
  00054	eb000000	 bl          GetDeviceRegistryParams
  00058	e3500000	 cmp         r0, #0
  0005c	1a00003c	 bne         |$LN17@HDS_Init|

; 173  :         {
; 174  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: HDS_Init: "
; 175  :             L"Failed read HDS driver registry parameters\r\n"
; 176  :             ));
; 177  :         goto cleanUp;
; 178  :         }
; 179  : 
; 180  :     // Open WAV device
; 181  :     pDevice->hWAV = CreateFile(L"WAV1:", GENERIC_READ | GENERIC_WRITE, 0,
; 182  :                         NULL, OPEN_EXISTING, 0, NULL);

  00060	e59f0108	 ldr         r0, [pc, #0x108]
  00064	e3a0e003	 mov         lr, #3
  00068	e3a06000	 mov         r6, #0
  0006c	e3a03000	 mov         r3, #0
  00070	e3a02000	 mov         r2, #0
  00074	e3a01103	 mov         r1, #3, 2
  00078	e58d6008	 str         r6, [sp, #8]
  0007c	e58d6004	 str         r6, [sp, #4]
  00080	e58de000	 str         lr, [sp]
  00084	eb000000	 bl          CreateFileW

; 183  : 
; 184  :     if (pDevice->hWAV == INVALID_HANDLE_VALUE)

  00088	e3700001	 cmn         r0, #1
  0008c	e5840010	 str         r0, [r4, #0x10]

; 185  :         {
; 186  :         pDevice->hWAV = NULL;

  00090	05846010	 streq       r6, [r4, #0x10]

; 187  :         DEBUGMSG(ZONE_WARN,
; 188  :             (L"WARN: HDS_Init: Failed open WAV1: device driver\r\n"));
; 189  :         }
; 190  : 
; 191  :     // Open GPIO bus
; 192  :     pDevice->hGPIO = GPIOOpen();

  00094	eb000000	 bl          GPIOOpen
  00098	e3500000	 cmp         r0, #0
  0009c	e584000c	 str         r0, [r4, #0xC]

; 193  :     if (pDevice->hGPIO == NULL)

  000a0	0a00002b	 beq         |$LN17@HDS_Init|

; 194  :         {
; 195  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: HDS_Init: "
; 196  :             L"Failed open GPIO bus driver\r\n"
; 197  :             ));
; 198  :         goto cleanUp;
; 199  :         }
; 200  : 
; 201  :     // Configure GPIO mute as output high
; 202  :     GPIOSetMode(pDevice->hGPIO, pDevice->hdstMuteGpio, GPIO_DIR_OUTPUT);

  000a4	e594103c	 ldr         r1, [r4, #0x3C]
  000a8	e3a02000	 mov         r2, #0
  000ac	eb000000	 bl          GPIOSetMode

; 203  :     GPIOSetBit(pDevice->hGPIO, pDevice->hdstMuteGpio);

  000b0	e594103c	 ldr         r1, [r4, #0x3C]
  000b4	e594000c	 ldr         r0, [r4, #0xC]
  000b8	eb000000	 bl          GPIOSetBit

; 204  : 
; 205  :     // Note that the headset detect GPIO pullup and pulldown configuration
; 206  :     // is not handled in the \src\boot\twl4030\bsp_twl4020.c file
; 207  : 
; 208  :     // Configure GPIO headset as input with both edge interrupts
; 209  :     GPIOSetMode(pDevice->hGPIO, pDevice->hdstDetGpio,
; 210  :         GPIO_DIR_INPUT | GPIO_INT_LOW_HIGH | GPIO_INT_HIGH_LOW);

  000bc	e5941038	 ldr         r1, [r4, #0x38]
  000c0	e594000c	 ldr         r0, [r4, #0xC]
  000c4	e3a02007	 mov         r2, #7
  000c8	eb000000	 bl          GPIOSetMode

; 211  : 
; 212  :     // update plugged-in field
; 213  :     pDevice->bPluggedIn = (BOOL)GPIOGetBit(pDevice->hGPIO,
; 214  :         pDevice->hdstDetGpio);

  000cc	e5941038	 ldr         r1, [r4, #0x38]
  000d0	e594000c	 ldr         r0, [r4, #0xC]
  000d4	eb000000	 bl          GPIOGetBit
  000d8	e1a03000	 mov         r3, r0

; 215  : 
; 216  :     // Create interrupt event
; 217  :     pDevice->hIntrEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  000dc	e5843014	 str         r3, [r4, #0x14]
  000e0	e3a03000	 mov         r3, #0
  000e4	e3a00000	 mov         r0, #0
  000e8	e3a02000	 mov         r2, #0
  000ec	e3a01000	 mov         r1, #0
  000f0	eb000000	 bl          CreateEventW
  000f4	e1b03000	 movs        r3, r0
  000f8	e584302c	 str         r3, [r4, #0x2C]

; 218  :     if (pDevice->hIntrEvent == NULL)

  000fc	0a000014	 beq         |$LN17@HDS_Init|

; 219  :         {
; 220  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: HDS_Init: "
; 221  :             L"Failed create interrupt event\r\n"
; 222  :             ));
; 223  :         goto cleanUp;
; 224  :         }
; 225  : 
; 226  :     // Associate event with TWL headset interrupt
; 227  :     if (!GPIOInterruptInitialize(pDevice->hGPIO, pDevice->hdstDetGpio,
; 228  : 		&pDevice->dwSysIntr, pDevice->hIntrEvent))

  00100	e5941038	 ldr         r1, [r4, #0x38]
  00104	e594000c	 ldr         r0, [r4, #0xC]
  00108	e2842040	 add         r2, r4, #0x40
  0010c	eb000000	 bl          GPIOInterruptInitialize
  00110	e3500000	 cmp         r0, #0
  00114	0a00000e	 beq         |$LN17@HDS_Init|

; 229  :         {
; 230  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: HDS_Init: "
; 231  :             L"Failed associate event with TWL headset interrupt\r\n"
; 232  :             ));
; 233  :         goto cleanUp;
; 234  :         }
; 235  : 
; 236  :     // Start interrupt service thread
; 237  :     pDevice->intrThreadExit = FALSE;
; 238  :     pDevice->hIntrThread = CreateThread(
; 239  :         NULL, 0, HDS_IntrThread, pDevice, 0,NULL
; 240  :         );

  00118	e59f204c	 ldr         r2, [pc, #0x4C]
  0011c	e1a03004	 mov         r3, r4
  00120	e3a01000	 mov         r1, #0
  00124	e3a00000	 mov         r0, #0
  00128	e5846034	 str         r6, [r4, #0x34]
  0012c	e58d6004	 str         r6, [sp, #4]
  00130	e58d6000	 str         r6, [sp]
  00134	eb000000	 bl          CreateThread
  00138	e3500000	 cmp         r0, #0
  0013c	e5840030	 str         r0, [r4, #0x30]

; 241  :     if (!pDevice->hIntrThread)

  00140	0a000003	 beq         |$LN17@HDS_Init|

; 242  :         {
; 243  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: HDS_Init: "
; 244  :             L"Failed create interrupt thread\r\n"
; 245  :             ));
; 246  :         goto cleanUp;
; 247  :         }
; 248  : 
; 249  :     // Set thread priority
; 250  :     CeSetThreadPriority(pDevice->hIntrThread, pDevice->priority256);

  00144	e5941004	 ldr         r1, [r4, #4]
  00148	eb000000	 bl          CeSetThreadPriority

; 251  : 
; 252  :     // Return non-null value
; 253  :     rc = (DWORD)pDevice;

  0014c	e1a05004	 mov         r5, r4
  00150		 |$cleanUp$36066|

; 254  : 
; 255  : cleanUp:
; 256  :     if (rc == 0)

  00150	ea000001	 b           |$LN1@HDS_Init|
  00154		 |$LN17@HDS_Init|

; 257  :         {
; 258  :         HDS_Deinit((DWORD)pDevice);

  00154	e1a00004	 mov         r0, r4
  00158	eb000000	 bl          |?HDS_Deinit@@YAHK@Z|
  0015c		 |$LN1@HDS_Init|

; 259  :         }
; 260  :     DEBUGMSG(ZONE_FUNCTION, (L"-HDS_Init(rc = %d\r\n", rc));
; 261  :     return rc;
; 262  : }

  0015c	e1a00005	 mov         r0, r5
  00160	e28dd00c	 add         sp, sp, #0xC
  00164	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00168	e12fff1e	 bx          lr
  0016c		 |$LN21@HDS_Init|
  0016c		 |$LN22@HDS_Init|
  0016c	00000000	 DCD         |?HDS_IntrThread@@YAKPAX@Z|
  00170		 |$LN23@HDS_Init|
  00170	00000000	 DCD         |??_C@_1M@HOEINAAB@?$AAW?$AAA?$AAV?$AA1?$AA?3?$AA?$AA@|
  00174		 |$LN24@HDS_Init|
  00174	00000000	 DCD         |s_deviceRegParams|
  00178		 |$LN25@HDS_Init|
  00178	68647344	 DCD         0x68647344
  0017c		 |$M36338|

			 ENDP  ; |?HDS_Init@@YAKPBGPBX@Z|, HDS_Init

	END
