; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\BUS\t2powerbus.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|DEVICE_IFC_TWL_GUID| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|_pT2PowerBus| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|DEVICE_IFC_TWL_GUID| DCD 0xdef0a04b
	DCW	0xb967
	DCW	0x43db
	DCB	0x95
	DCB	0x9e
	DCB	0xd9
	DCB	0xfc
	DCB	0x62
	DCB	0x25
	DCB	0xcd
	DCB	0xeb
	EXPORT	|??0omapPowerBus_t@@QAA@XZ|		; omapPowerBus_t::omapPowerBus_t
	EXPORT	|??_7omapPowerBus_t@@6B@| [ DATA ]	; omapPowerBus_t::`vftable'
	IMPORT	|_purecall|

  00000			 AREA	 |.pdata|, PDATA
|$T39767| DCD	|$LN5@omapPowerB|
	DCD	0x40000500

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7omapPowerBus_t@@6B@| DCD |_purecall|		; omapPowerBus_t::`vftable'
	DCD	|_purecall|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0omapPowerBus_t@@QAA@XZ| PROC	; omapPowerBus_t::omapPowerBus_t
  00000		 |$LN5@omapPowerB|
  00000		 |$M39764|
  00000	e1a02000	 mov         r2, r0
  00004	e59f3004	 ldr         r3, [pc, #4]
  00008	e5823000	 str         r3, [r2]
  0000c	e12fff1e	 bx          lr
  00010		 |$LN6@omapPowerB|
  00010		 |$LN7@omapPowerB|
  00010	00000000	 DCD         |??_7omapPowerBus_t@@6B@|
  00014		 |$M39765|

			 ENDP  ; |??0omapPowerBus_t@@QAA@XZ|, omapPowerBus_t::omapPowerBus_t

	EXPORT	|?InitializePowerBus@T2PowerBus_t@@QAAHXZ| ; T2PowerBus_t::InitializePowerBus
; File c:\wince600\platform\z2170p\src\drivers\bus\t2powerbus.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T39778| DCD	|$LN5@Initialize|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InitializePowerBus@T2PowerBus_t@@QAAHXZ| PROC ; T2PowerBus_t::InitializePowerBus

; 88   : {

  00000		 |$LN5@Initialize|
  00000		 |$M39775|

; 89   :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 90   : }

  00004	e12fff1e	 bx          lr
  00008		 |$M39776|

			 ENDP  ; |?InitializePowerBus@T2PowerBus_t@@QAAHXZ|, T2PowerBus_t::InitializePowerBus

	EXPORT	|?DeinitializePowerBus@T2PowerBus_t@@QAAXXZ| ; T2PowerBus_t::DeinitializePowerBus
	IMPORT	|TWLClose|

  00000			 AREA	 |.pdata|, PDATA
|$T39786| DCD	|$LN6@Deinitiali|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DeinitializePowerBus@T2PowerBus_t@@QAAXXZ| PROC ; T2PowerBus_t::DeinitializePowerBus

; 97   : {

  00000		 |$LN6@Deinitiali|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39783|
  00004	e1a04000	 mov         r4, r0

; 98   :     if (m_hTwl != NULL)

  00008	e5943004	 ldr         r3, [r4, #4]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000003	 beq         |$LN1@Deinitiali|

; 99   :         {
; 100  :         TWLClose(m_hTwl);

  00014	e1a00003	 mov         r0, r3
  00018	eb000000	 bl          TWLClose

; 101  :         m_hTwl = NULL;

  0001c	e3a03000	 mov         r3, #0
  00020	e5843004	 str         r3, [r4, #4]
  00024		 |$LN1@Deinitiali|

; 102  :         }
; 103  : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M39784|

			 ENDP  ; |?DeinitializePowerBus@T2PowerBus_t@@QAAXXZ|, T2PowerBus_t::DeinitializePowerBus

	EXPORT	|?UsbFnAttach@T2PowerBus_t@@IAAHH@Z|	; T2PowerBus_t::UsbFnAttach

  00000			 AREA	 |.pdata|, PDATA
|$T39795| DCD	|$LN5@UsbFnAttac|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UsbFnAttach@T2PowerBus_t@@IAAHH@Z| PROC ; T2PowerBus_t::UsbFnAttach

; 242  : {

  00000		 |$LN5@UsbFnAttac|
  00000		 |$M39792|

; 243  :     UNREFERENCED_PARAMETER(state);
; 244  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 245  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M39793|

			 ENDP  ; |?UsbFnAttach@T2PowerBus_t@@IAAHH@Z|, T2PowerBus_t::UsbFnAttach

	EXPORT	|?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|	; T2PowerBus_t::WriteTwlReg
	IMPORT	|TWLWriteRegs|
	IMPORT	|TWLOpen|

  00000			 AREA	 |.pdata|, PDATA
|$T39807| DCD	|$LN8@WriteTwlRe|
	DCD	0x40001603
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z| PROC ; T2PowerBus_t::WriteTwlReg

; 285  : {

  00000		 |$LN8@WriteTwlRe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5070	 stmdb       sp!, {r4 - r6, r12, lr}
  0000c		 |$M39804|
  0000c	e1a06001	 mov         r6, r1
  00010	e1a05000	 mov         r5, r0

; 286  :     BOOL rc = FALSE;
; 287  : 
; 288  :     // If TWL isn't open, try to open it...
; 289  :     if (m_hTwl == NULL)

  00014	e5953004	 ldr         r3, [r5, #4]
  00018	e3a04000	 mov         r4, #0
  0001c	e3530000	 cmp         r3, #0
  00020	1a000003	 bne         |$LN2@WriteTwlRe|

; 290  :         {
; 291  :         m_hTwl = TWLOpen();

  00024	eb000000	 bl          TWLOpen
  00028	e3500000	 cmp         r0, #0
  0002c	e5850004	 str         r0, [r5, #4]

; 292  :         if (m_hTwl == NULL) goto cleanUp;

  00030	0a000005	 beq         |$cleanUp$39624|
  00034		 |$LN2@WriteTwlRe|

; 293  :         }
; 294  : 
; 295  :     // Call driver
; 296  :     rc = TWLWriteRegs(m_hTwl, address, &value, sizeof(value));

  00034	e5950004	 ldr         r0, [r5, #4]
  00038	e3a03001	 mov         r3, #1
  0003c	e28d201c	 add         r2, sp, #0x1C
  00040	e1a01006	 mov         r1, r6
  00044	eb000000	 bl          TWLWriteRegs
  00048	e1a04000	 mov         r4, r0
  0004c		 |$cleanUp$39624|

; 297  : 
; 298  : cleanUp:
; 299  :     return rc;
; 300  : }

  0004c	e1a00004	 mov         r0, r4
  00050	e89d6070	 ldmia       sp, {r4 - r6, sp, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M39805|

			 ENDP  ; |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|, T2PowerBus_t::WriteTwlReg

	EXPORT	|?ReadTwlReg@T2PowerBus_t@@IAAHKAAE@Z|	; T2PowerBus_t::ReadTwlReg
	IMPORT	|TWLReadRegs|

  00000			 AREA	 |.pdata|, PDATA
|$T39820| DCD	|$LN8@ReadTwlReg|
	DCD	0x40001501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ReadTwlReg@T2PowerBus_t@@IAAHKAAE@Z| PROC ; T2PowerBus_t::ReadTwlReg

; 309  : {

  00000		 |$LN8@ReadTwlReg|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M39817|
  00004	e1a06002	 mov         r6, r2
  00008	e1a07001	 mov         r7, r1
  0000c	e1a05000	 mov         r5, r0

; 310  :     BOOL rc = FALSE;
; 311  : 
; 312  :     // If TWL isn't open, try to open it...
; 313  :     if (m_hTwl == NULL)

  00010	e5953004	 ldr         r3, [r5, #4]
  00014	e3a04000	 mov         r4, #0
  00018	e3530000	 cmp         r3, #0
  0001c	1a000003	 bne         |$LN2@ReadTwlReg|

; 314  :         {
; 315  :         m_hTwl = TWLOpen();

  00020	eb000000	 bl          TWLOpen
  00024	e3500000	 cmp         r0, #0
  00028	e5850004	 str         r0, [r5, #4]

; 316  :         if (m_hTwl == NULL) goto cleanUp;

  0002c	0a000005	 beq         |$cleanUp$39634|
  00030		 |$LN2@ReadTwlReg|

; 317  :         }
; 318  : 
; 319  :     // Call driver
; 320  :     rc = TWLReadRegs(m_hTwl, address, &value, sizeof(value));

  00030	e5950004	 ldr         r0, [r5, #4]
  00034	e3a03001	 mov         r3, #1
  00038	e1a02006	 mov         r2, r6
  0003c	e1a01007	 mov         r1, r7
  00040	eb000000	 bl          TWLReadRegs
  00044	e1a04000	 mov         r4, r0
  00048		 |$cleanUp$39634|

; 321  : 
; 322  : cleanUp:
; 323  :     return rc;
; 324  : }

  00048	e1a00004	 mov         r0, r4
  0004c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M39818|

			 ENDP  ; |?ReadTwlReg@T2PowerBus_t@@IAAHKAAE@Z|, T2PowerBus_t::ReadTwlReg

	EXPORT	|?DestroyPowerBus@omapPowerBus_t@@SAXPAV1@@Z| ; omapPowerBus_t::DestroyPowerBus
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T39834| DCD	|$LN9@DestroyPow|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DestroyPowerBus@omapPowerBus_t@@SAXPAV1@@Z| PROC ; omapPowerBus_t::DestroyPowerBus

; 65   : {

  00000		 |$LN9@DestroyPow|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M39831|

; 66   :     UNREFERENCED_PARAMETER(pPowerBus);
; 67   :     if (_pT2PowerBus != NULL)

  00004	e59f5040	 ldr         r5, [pc, #0x40]
  00008	e5954000	 ldr         r4, [r5]
  0000c	e3540000	 cmp         r4, #0
  00010	0a00000b	 beq         |$LN1@DestroyPow|

; 68   :         {
; 69   :         _pT2PowerBus->DeinitializePowerBus();

  00014	e5943004	 ldr         r3, [r4, #4]
  00018	e3530000	 cmp         r3, #0
  0001c	0a000004	 beq         |$LN4@DestroyPow|
  00020	e1a00003	 mov         r0, r3
  00024	eb000000	 bl          TWLClose
  00028	e3a03000	 mov         r3, #0
  0002c	e5843004	 str         r3, [r4, #4]
  00030	e5954000	 ldr         r4, [r5]
  00034		 |$LN4@DestroyPow|

; 70   :         delete _pT2PowerBus;

  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          |??3@YAXPAX@Z|

; 71   :         _pT2PowerBus = NULL;

  0003c	e3a03000	 mov         r3, #0
  00040	e5853000	 str         r3, [r5]
  00044		 |$LN1@DestroyPow|

; 72   :         }
; 73   : }

  00044	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN10@DestroyPow|
  0004c		 |$LN11@DestroyPow|
  0004c	00000000	 DCD         |_pT2PowerBus|
  00050		 |$M39832|

			 ENDP  ; |?DestroyPowerBus@omapPowerBus_t@@SAXPAV1@@Z|, omapPowerBus_t::DestroyPowerBus

	EXPORT	|??0T2PowerBus_t@@IAA@XZ|		; T2PowerBus_t::T2PowerBus_t
	EXPORT	|??_7T2PowerBus_t@@6B@| [ DATA ]	; T2PowerBus_t::`vftable'
	EXPORT	|?PreDevicePowerStateChange@T2PowerBus_t@@UAAKKW4_CEDEVICE_POWER_STATE@@0@Z| ; T2PowerBus_t::PreDevicePowerStateChange
	EXPORT	|?PostDevicePowerStateChange@T2PowerBus_t@@UAAKKW4_CEDEVICE_POWER_STATE@@0@Z| ; T2PowerBus_t::PostDevicePowerStateChange

  00000			 AREA	 |.pdata|, PDATA
|$T39849| DCD	|$LN7@T2PowerBus|
	DCD	0x40000600

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7T2PowerBus_t@@6B@| DCD |?PreDevicePowerStateChange@T2PowerBus_t@@UAAKKW4_CEDEVICE_POWER_STATE@@0@Z| ; T2PowerBus_t::`vftable'
	DCD	|?PostDevicePowerStateChange@T2PowerBus_t@@UAAKKW4_CEDEVICE_POWER_STATE@@0@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0T2PowerBus_t@@IAA@XZ| PROC		; T2PowerBus_t::T2PowerBus_t

; 79   : {

  00000		 |$LN7@T2PowerBus|
  00000		 |$M39846|
  00000	e59f300c	 ldr         r3, [pc, #0xC]

; 80   :     m_hTwl = NULL;

  00004	e3a02000	 mov         r2, #0
  00008	e5802004	 str         r2, [r0, #4]
  0000c	e5803000	 str         r3, [r0]

; 81   : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN8@T2PowerBus|
  00014		 |$LN9@T2PowerBus|
  00014	00000000	 DCD         |??_7T2PowerBus_t@@6B@|
  00018		 |$M39847|

			 ENDP  ; |??0T2PowerBus_t@@IAA@XZ|, T2PowerBus_t::T2PowerBus_t

	EXPORT	|?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z| ; T2PowerBus_t::SendSingularPBMessage

  00000			 AREA	 |.pdata|, PDATA
|$T39865| DCD	|$LN11@SendSingul|
	DCD	0x40001f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z| PROC ; T2PowerBus_t::SendSingularPBMessage

; 112  : {

  00000		 |$LN11@SendSingul|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M39862|
  00004	e1a06002	 mov         r6, r2
  00008	e1a07001	 mov         r7, r1
  0000c	e1a05000	 mov         r5, r0
  00010	e3a03803	 mov         r3, #3, 16

; 113  :     UINT16 pb_message;
; 114  :     UCHAR regval;
; 115  :     BOOL rc = FALSE;
; 116  : 
; 117  :     // Enable I2C access to the Power Bus
; 118  :     regval = 0x02;  
; 119  :     if(!WriteTwlReg(TWL_PB_CFG, regval))

  00014	e383104a	 orr         r1, r3, #0x4A
  00018	e3a02002	 mov         r2, #2
  0001c	e3a04000	 mov         r4, #0
  00020	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|
  00024	e3500000	 cmp         r0, #0
  00028	0a000010	 beq         |$cleanUp$39564|

; 120  :         goto cleanUp;
; 121  : 
; 122  :     // Form the message for VDAC
; 123  :     pb_message = TwlTargetMessage(TWL_PROCESSOR_GRP1, power_res_id, res_state);

  0002c	e3873c02	 orr         r3, r7, #2, 24
  00030	e1866203	 orr         r6, r6, r3, lsl #4

; 124  : 
; 125  :     // Extract the Message MSB
; 126  :     regval = (UCHAR) (pb_message >> 8);

  00034	e1a03426	 mov         r3, r6, lsr #8
  00038	e3a01803	 mov         r1, #3, 16

; 127  :     if(!WriteTwlReg(TWL_PB_WORD_MSB, regval))

  0003c	e20320ff	 and         r2, r3, #0xFF
  00040	e381104b	 orr         r1, r1, #0x4B
  00044	e1a00005	 mov         r0, r5
  00048	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|
  0004c	e3500000	 cmp         r0, #0
  00050	0a000006	 beq         |$cleanUp$39564|
  00054	e3a03803	 mov         r3, #3, 16

; 128  :         goto cleanUp;
; 129  : 
; 130  :     // Extract the Message LSB
; 131  :     regval = (UCHAR) (pb_message & 0x00FF);
; 132  :     if(!WriteTwlReg(TWL_PB_WORD_LSB, regval))

  00058	e383104c	 orr         r1, r3, #0x4C
  0005c	e20620ff	 and         r2, r6, #0xFF
  00060	e1a00005	 mov         r0, r5
  00064	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|
  00068	e3500000	 cmp         r0, #0

; 133  :         goto cleanUp;
; 134  : 
; 135  :     rc = TRUE;

  0006c	13a04001	 movne       r4, #1
  00070		 |$cleanUp$39564|

; 136  : cleanUp:
; 137  :     return rc;
; 138  : }

  00070	e1a00004	 mov         r0, r4
  00074	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$M39863|

			 ENDP  ; |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|, T2PowerBus_t::SendSingularPBMessage

	EXPORT	|?UpdateUSBVBusSleepOffState@T2PowerBus_t@@IAAHE@Z| ; T2PowerBus_t::UpdateUSBVBusSleepOffState

  00000			 AREA	 |.pdata|, PDATA
|$T39876| DCD	|$LN5@UpdateUSBV|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateUSBVBusSleepOffState@T2PowerBus_t@@IAAHE@Z| PROC ; T2PowerBus_t::UpdateUSBVBusSleepOffState

; 177  : {

  00000		 |$LN5@UpdateUSBV|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M39873|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	e3a06803	 mov         r6, #3, 16

; 178  :     WriteTwlReg(TWL_VINTDIG_REMAP, state);

  00010	e38610a4	 orr         r1, r6, #0xA4
  00014	e1a02004	 mov         r2, r4
  00018	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|

; 179  :     WriteTwlReg(TWL_VUSB1V8_REMAP, state);

  0001c	e1a02004	 mov         r2, r4
  00020	e38610d1	 orr         r1, r6, #0xD1
  00024	e1a00005	 mov         r0, r5
  00028	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|

; 180  :     WriteTwlReg(TWL_VUSB1V5_REMAP, state);

  0002c	e1a02004	 mov         r2, r4
  00030	e38610ce	 orr         r1, r6, #0xCE
  00034	e1a00005	 mov         r0, r5
  00038	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|

; 181  :     WriteTwlReg(TWL_VUSB3V1_REMAP, state);

  0003c	e1a02004	 mov         r2, r4
  00040	e38610d4	 orr         r1, r6, #0xD4
  00044	e1a00005	 mov         r0, r5
  00048	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|

; 182  : 
; 183  :     return TRUE;

  0004c	e3a00001	 mov         r0, #1

; 184  : }

  00050	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M39874|

			 ENDP  ; |?UpdateUSBVBusSleepOffState@T2PowerBus_t@@IAAHE@Z|, T2PowerBus_t::UpdateUSBVBusSleepOffState

	EXPORT	|?WakeT2USBPhyDPLL@T2PowerBus_t@@IAAHXZ| ; T2PowerBus_t::WakeT2USBPhyDPLL
	IMPORT	|StallExecution|

  00000			 AREA	 |.pdata|, PDATA
|$T39894| DCD	|$LN15@WakeT2USBP|
	DCD	0x40004402
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WakeT2USBPhyDPLL@T2PowerBus_t@@IAAHXZ| PROC ; T2PowerBus_t::WakeT2USBPhyDPLL

; 191  : {

  00000		 |$LN15@WakeT2USBP|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M39891|
  00008	e1a04000	 mov         r4, r0

; 192  :     UCHAR sts;
; 193  :     UCHAR ctrl;
; 194  :     BOOL fGetLock = FALSE;
; 195  : 
; 196  :     // Lock PHY: start
; 197  :     if(ReadTwlReg(TWL_PHY_CLK_CTRL_STS, sts))

  0000c	e28d2001	 add         r2, sp, #1
  00010	e3a010ff	 mov         r1, #0xFF
  00014	e3a05000	 mov         r5, #0
  00018	eb000000	 bl          |?ReadTwlReg@T2PowerBus_t@@IAAHKAAE@Z|
  0001c	e3500000	 cmp         r0, #0
  00020	0a000027	 beq         |$LN4@WakeT2USBP|

; 198  :         {
; 199  :         int iCount = 500;
; 200  :         if (((sts & PHY_CLK_CTRL_STS_PHY_DPLL_LOCK) == 0) && 
; 201  :              ReadTwlReg(TWL_PHY_CLK_CTRL, ctrl))

  00024	e5dd3001	 ldrb        r3, [sp, #1]
  00028	e3a06f7d	 mov         r6, #0x7D, 30
  0002c	e3130001	 tst         r3, #1
  00030	1a000023	 bne         |$LN4@WakeT2USBP|
  00034	e28d2000	 add         r2, sp, #0
  00038	e3a010fe	 mov         r1, #0xFE
  0003c	e1a00004	 mov         r0, r4
  00040	eb000000	 bl          |?ReadTwlReg@T2PowerBus_t@@IAAHKAAE@Z|
  00044	e3500000	 cmp         r0, #0
  00048	0a00001d	 beq         |$LN4@WakeT2USBP|
  0004c	e3a07000	 mov         r7, #0
  00050		 |$LL6@WakeT2USBP|

; 202  :             {
; 203  :             BOOL fSuccess;
; 204  :             do 
; 205  :                 {
; 206  :                 ctrl |= PHY_CLK_CTRL_REQ_PHY_DPLL_CLK;

  00050	e5dd3000	 ldrb        r3, [sp]

; 207  :                 WriteTwlReg(TWL_PHY_CLK_CTRL, ctrl);

  00054	e3a010fe	 mov         r1, #0xFE
  00058	e1a00004	 mov         r0, r4
  0005c	e3832001	 orr         r2, r3, #1
  00060	e5cd2000	 strb        r2, [sp]
  00064	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|

; 208  :                 sts = 0x00;
; 209  :                 if (ReadTwlReg(TWL_PHY_CLK_CTRL_STS, sts) && 
; 210  :                     (sts & PHY_CLK_CTRL_STS_PHY_DPLL_LOCK))

  00068	e28d2001	 add         r2, sp, #1
  0006c	e3a010ff	 mov         r1, #0xFF
  00070	e1a00004	 mov         r0, r4
  00074	e5cd7001	 strb        r7, [sp, #1]
  00078	eb000000	 bl          |?ReadTwlReg@T2PowerBus_t@@IAAHKAAE@Z|
  0007c	e3500000	 cmp         r0, #0
  00080	0a000002	 beq         |$LN3@WakeT2USBP|
  00084	e5dd3001	 ldrb        r3, [sp, #1]
  00088	e3130001	 tst         r3, #1
  0008c	1a00000b	 bne         |$LN12@WakeT2USBP|
  00090		 |$LN3@WakeT2USBP|

; 213  :                     break;
; 214  :                 }
; 215  :                 iCount--;
; 216  :                 StallExecution(50);

  00090	e3a00032	 mov         r0, #0x32
  00094	e2466001	 sub         r6, r6, #1
  00098	eb000000	 bl          StallExecution

; 217  :                 fSuccess = ReadTwlReg(TWL_PHY_CLK_CTRL, ctrl);

  0009c	e28d2000	 add         r2, sp, #0
  000a0	e3a010fe	 mov         r1, #0xFE
  000a4	e1a00004	 mov         r0, r4
  000a8	eb000000	 bl          |?ReadTwlReg@T2PowerBus_t@@IAAHKAAE@Z|
  000ac	e3500000	 cmp         r0, #0

; 218  :                 } while (fSuccess && (iCount > 0));

  000b0	0a000003	 beq         |$LN4@WakeT2USBP|
  000b4	e3560000	 cmp         r6, #0
  000b8	caffffe4	 bgt         |$LL6@WakeT2USBP|
  000bc	ea000000	 b           |$LN4@WakeT2USBP|
  000c0		 |$LN12@WakeT2USBP|

; 211  :                 {
; 212  :                     fGetLock = TRUE;

  000c0	e3a05001	 mov         r5, #1
  000c4		 |$LN4@WakeT2USBP|

; 219  :             }
; 220  :         }
; 221  :     
; 222  :     // Lock PHY: end
; 223  :     StallExecution(10);

  000c4	e3a0000a	 mov         r0, #0xA
  000c8	eb000000	 bl          StallExecution

; 224  :     if (ReadTwlReg(TWL_PHY_CLK_CTRL, ctrl))

  000cc	e28d2000	 add         r2, sp, #0
  000d0	e3a010fe	 mov         r1, #0xFE
  000d4	e1a00004	 mov         r0, r4
  000d8	eb000000	 bl          |?ReadTwlReg@T2PowerBus_t@@IAAHKAAE@Z|
  000dc	e3500000	 cmp         r0, #0
  000e0	0a000006	 beq         |$LN1@WakeT2USBP|

; 225  :         {
; 226  :         // clear PHY_DPLL_LOCK bit and let PHY state depend 
; 227  :         // on the SUSPENDM bit in the FUNC_CTRL register
; 228  :         ctrl &= ~PHY_CLK_CTRL_STS_PHY_DPLL_LOCK;

  000e4	e5dd3000	 ldrb        r3, [sp]

; 229  :         WriteTwlReg(TWL_PHY_CLK_CTRL, ctrl);

  000e8	e3a010fe	 mov         r1, #0xFE
  000ec	e1a00004	 mov         r0, r4
  000f0	e20320fe	 and         r2, r3, #0xFE
  000f4	e5cd2000	 strb        r2, [sp]
  000f8	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|

; 230  :         fGetLock = TRUE;

  000fc	e3a05001	 mov         r5, #1
  00100		 |$LN1@WakeT2USBP|

; 231  :         }
; 232  : 
; 233  :     return fGetLock;
; 234  : }

  00100	e1a00005	 mov         r0, r5
  00104	e28dd004	 add         sp, sp, #4
  00108	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0010c	e12fff1e	 bx          lr
  00110		 |$M39892|

			 ENDP  ; |?WakeT2USBPhyDPLL@T2PowerBus_t@@IAAHXZ|, T2PowerBus_t::WakeT2USBPhyDPLL

	EXPORT	|?SelectPowerResVolt@T2PowerBus_t@@IAAHKE@Z| ; T2PowerBus_t::SelectPowerResVolt

  00000			 AREA	 |.pdata|, PDATA
|$T39908| DCD	|$LN7@SelectPowe|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SelectPowerResVolt@T2PowerBus_t@@IAAHKE@Z| PROC ; T2PowerBus_t::SelectPowerResVolt

; 254  : {

  00000		 |$LN7@SelectPowe|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M39905|

; 255  :     return WriteTwlReg(res_vsel_reg_offset, reg_data) != FALSE;

  00004	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|
  00008	e3500000	 cmp         r0, #0
  0000c	13a00001	 movne       r0, #1

; 256  : }

  00010	149de004	 ldrne       lr, [sp], #4

; 255  :     return WriteTwlReg(res_vsel_reg_offset, reg_data) != FALSE;

  00014	03a00000	 moveq       r0, #0

; 256  : }

  00018	049de004	 ldreq       lr, [sp], #4
  0001c	e12fff1e	 bx          lr
  00020		 |$M39906|

			 ENDP  ; |?SelectPowerResVolt@T2PowerBus_t@@IAAHKE@Z|, T2PowerBus_t::SelectPowerResVolt

	EXPORT	|?SetVmmc1PowerOnOff@T2PowerBus_t@@IAAHE@Z| ; T2PowerBus_t::SetVmmc1PowerOnOff

  00000			 AREA	 |.pdata|, PDATA
|$T39919| DCD	|$LN5@SetVmmc1Po|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetVmmc1PowerOnOff@T2PowerBus_t@@IAAHE@Z| PROC ; T2PowerBus_t::SetVmmc1PowerOnOff

; 264  : {

  00000		 |$LN5@SetVmmc1Po|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M39916|
  00004	e1a02001	 mov         r2, r1

; 265  :     return (SendSingularPBMessage(TWL_VMMC1_RES_ID, power_res_state));

  00008	e3a01005	 mov         r1, #5
  0000c	eb000000	 bl          |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|

; 266  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M39917|

			 ENDP  ; |?SetVmmc1PowerOnOff@T2PowerBus_t@@IAAHE@Z|, T2PowerBus_t::SetVmmc1PowerOnOff

	EXPORT	|?SetVmmc2PowerOnOff@T2PowerBus_t@@IAAHE@Z| ; T2PowerBus_t::SetVmmc2PowerOnOff

  00000			 AREA	 |.pdata|, PDATA
|$T39930| DCD	|$LN5@SetVmmc2Po|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetVmmc2PowerOnOff@T2PowerBus_t@@IAAHE@Z| PROC ; T2PowerBus_t::SetVmmc2PowerOnOff

; 274  : {

  00000		 |$LN5@SetVmmc2Po|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M39927|
  00004	e1a02001	 mov         r2, r1

; 275  :     return (SendSingularPBMessage(TWL_VMMC2_RES_ID, power_res_state));

  00008	e3a01006	 mov         r1, #6
  0000c	eb000000	 bl          |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|

; 276  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M39928|

			 ENDP  ; |?SetVmmc2PowerOnOff@T2PowerBus_t@@IAAHE@Z|, T2PowerBus_t::SetVmmc2PowerOnOff

	EXPORT	|?CreatePowerBus@omapPowerBus_t@@SAPAV1@XZ| ; omapPowerBus_t::CreatePowerBus
	IMPORT	|??2@YAPAXI@Z|				; operator new

  00000			 AREA	 |.pdata|, PDATA
|$T39956| DCD	|$LN16@CreatePowe|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CreatePowerBus@omapPowerBus_t@@SAPAV1@XZ| PROC ; omapPowerBus_t::CreatePowerBus

; 42   : {

  00000		 |$LN16@CreatePowe|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39953|

; 43   :     // only create new instance of t2 power bus 
; 44   :     // if there already isn't one
; 45   :     //
; 46   :     if (_pT2PowerBus == NULL)

  00004	e59f4038	 ldr         r4, [pc, #0x38]
  00008	e5940000	 ldr         r0, [r4]
  0000c	e3500000	 cmp         r0, #0
  00010	1a000008	 bne         |$LN6@CreatePowe|

; 47   :         {
; 48   :         _pT2PowerBus = new T2PowerBus_t();

  00014	e3a00008	 mov         r0, #8
  00018	eb000000	 bl          |??2@YAPAXI@Z|
  0001c	e3500000	 cmp         r0, #0
  00020	159f3018	 ldrne       r3, [pc, #0x18]
  00024	13a02000	 movne       r2, #0
  00028	15802004	 strne       r2, [r0, #4]
  0002c	15803000	 strne       r3, [r0]
  00030	03a00000	 moveq       r0, #0
  00034	e5840000	 str         r0, [r4]
  00038		 |$LN6@CreatePowe|

; 49   :         if (_pT2PowerBus->InitializePowerBus() == FALSE)
; 50   :             {
; 51   :             delete _pT2PowerBus;
; 52   :             _pT2PowerBus = NULL;
; 53   :             }
; 54   :         }
; 55   : 
; 56   :     return _pT2PowerBus;
; 57   : }

  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN17@CreatePowe|
  00040		 |$LN18@CreatePowe|
  00040	00000000	 DCD         |??_7T2PowerBus_t@@6B@|
  00044		 |$LN19@CreatePowe|
  00044	00000000	 DCD         |_pT2PowerBus|
  00048		 |$M39954|

			 ENDP  ; |?CreatePowerBus@omapPowerBus_t@@SAPAV1@XZ|, omapPowerBus_t::CreatePowerBus

	EXPORT	|?SetT2USBXvcrActive@T2PowerBus_t@@IAAHH@Z| ; T2PowerBus_t::SetT2USBXvcrActive

  00000			 AREA	 |.pdata|, PDATA
|$T39970| DCD	|$LN7@SetT2USBXv|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetT2USBXvcrActive@T2PowerBus_t@@IAAHH@Z| PROC ; T2PowerBus_t::SetT2USBXvcrActive

; 146  : {

  00000		 |$LN7@SetT2USBXv|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39967|
  00004	e3510000	 cmp         r1, #0
  00008	e1a04000	 mov         r4, r0

; 147  :     if (fActive)

  0000c	0a000004	 beq         |$LN2@SetT2USBXv|

; 148  :         {
; 149  :         // give time for power-on
; 150  :         StallExecution(40);

  00010	e3a00028	 mov         r0, #0x28
  00014	eb000000	 bl          StallExecution

; 151  :         WakeT2USBPhyDPLL();

  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          |?WakeT2USBPhyDPLL@T2PowerBus_t@@IAAHXZ|

; 152  :         }
; 153  :     else

  00020	ea000007	 b           |$LN1@SetT2USBXv|
  00024		 |$LN2@SetT2USBXv|

; 154  :         {
; 155  :         // if it has been asleep, wakeup the PHY before put to sleep again.
; 156  :         // this is to avoid the PHY is actually sleeping and access the FUNC_CTRL
; 157  :         // would return error
; 158  :         // From USB analyzer, you may see SUSPEND/ALIVE and then SUSPEND again.  The problem
; 159  :         // is due to enable phy and then disable again
; 160  :         WakeT2USBPhyDPLL();

  00024	e1a00004	 mov         r0, r4
  00028	eb000000	 bl          |?WakeT2USBPhyDPLL@T2PowerBus_t@@IAAHXZ|

; 161  : 
; 162  :         // Now actual suspend the PHY
; 163  :         // Jeffrey: testing
; 164  :         WriteTwlReg(TWL_FUNC_CTRL_CLR, FUNC_CTRL_SUSPENDM);

  0002c	e3a02040	 mov         r2, #0x40
  00030	e3a01006	 mov         r1, #6
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|

; 165  :         StallExecution(20);           

  0003c	e3a00014	 mov         r0, #0x14
  00040	eb000000	 bl          StallExecution
  00044		 |$LN1@SetT2USBXv|

; 166  :         }   
; 167  :     
; 168  :     return TRUE;

  00044	e3a00001	 mov         r0, #1

; 169  : }

  00048	e8bd4010	 ldmia       sp!, {r4, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M39968|

			 ENDP  ; |?SetT2USBXvcrActive@T2PowerBus_t@@IAAHH@Z|, T2PowerBus_t::SetT2USBXvcrActive

	EXPORT	|??_C@_1EE@KKLMMNFE@?$AA?$CL?$AAP?$AAr?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CF?$AAd?$AA?$AN@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T39993| DCD	|$LN28@PreDeviceP|
	DCD	0x40005801

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@KKLMMNFE@?$AA?$CL?$AAP?$AAr?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CF?$AAd?$AA?$AN@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "e", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PreDevicePowerStateChange@T2PowerBus_t@@UAAKKW4_CEDEVICE_POWER_STATE@@0@Z| PROC ; T2PowerBus_t::PreDevicePowerStateChange

; 334  : {

  00000		 |$LN28@PreDeviceP|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M39990|
  00004	e1a05003	 mov         r5, r3
  00008	e1a06001	 mov         r6, r1
  0000c	e1a07000	 mov         r7, r0

; 335  :     UCHAR state;
; 336  :     DWORD rc = FALSE;
; 337  : 
; 338  :     if (newPowerState == oldPowerState) return rc;

  00010	e1550002	 cmp         r5, r2
  00014	e3a04000	 mov         r4, #0
  00018	03a04000	 moveq       r4, #0
  0001c	0a00004b	 beq         |$LN10@PreDeviceP|

; 339  : 	RETAILMSG(1, (L"+PreDevicePowerStateChange - %d\r\n",devId));

  00020	e59f0134	 ldr         r0, [pc, #0x134]
  00024	e1a01006	 mov         r1, r6
  00028	eb000000	 bl          NKDbgPrintfW

; 340  :     switch (devId)

  0002c	e3560003	 cmp         r6, #3
  00030	0a00002e	 beq         |$LN12@PreDeviceP|
  00034	e3560015	 cmp         r6, #0x15
  00038	0a00001f	 beq         |$LN9@PreDeviceP|
  0003c	e3560016	 cmp         r6, #0x16
  00040	0a000014	 beq         |$LN3@PreDeviceP|
  00044	e356003f	 cmp         r6, #0x3F
  00048	0a000006	 beq         |$LN7@PreDeviceP|
  0004c	e3560043	 cmp         r6, #0x43

; 402  : 
; 403  :         default:
; 404  :             // signal we don't want notification for this device
; 405  :             rc = (DWORD)-1;

  00050	13e04000	 mvnne       r4, #0
  00054	1a00003d	 bne         |$LN10@PreDeviceP|

; 379  : 
; 380  :         case OMAP_DEVICE_CAMERA:
; 381  :             if (newPowerState <= D3)

  00058	e3550003	 cmp         r5, #3
  0005c	ca00003b	 bgt         |$LN10@PreDeviceP|

; 382  :                 {
; 383  :                 rc = SendSingularPBMessage(TWL_VAUX2_RES_ID, TWL_RES_ACTIVE);

  00060	e3a01002	 mov         r1, #2

; 384  :                 }
; 385  :             break;

  00064	ea00001c	 b           |$LN25@PreDeviceP|
  00068		 |$LN7@PreDeviceP|

; 370  : 
; 371  :         case OMAP_DEVICE_DSS:
; 372  :             if (newPowerState <= D3)

  00068	e3550003	 cmp         r5, #3
  0006c	ca000037	 bgt         |$LN10@PreDeviceP|

; 373  :                 {
; 374  :                 SendSingularPBMessage(TWL_VAUX3_RES_ID, TWL_RES_ACTIVE);

  00070	e3a0200e	 mov         r2, #0xE
  00074	e3a01003	 mov         r1, #3
  00078	e1a00007	 mov         r0, r7
  0007c	eb000000	 bl          |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|

; 375  :                 SendSingularPBMessage(TWL_VPLL2_RES_ID, TWL_RES_ACTIVE);

  00080	e3a0200e	 mov         r2, #0xE
  00084	e3a01008	 mov         r1, #8
  00088	e1a00007	 mov         r0, r7
  0008c	eb000000	 bl          |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|

; 376  :                 rc = TRUE;

  00090	e3a04001	 mov         r4, #1

; 377  :                 }
; 378  :             break;

  00094	ea00002d	 b           |$LN10@PreDeviceP|
  00098		 |$LN3@PreDeviceP|

; 386  : #if 0            
; 387  :         case OMAP_DEVICE_TVOUT:
; 388  :             if (newPowerState <= D3)
; 389  :                 {
; 390  :                 rc = SendSingularPBMessage(TWL_VDAC_RES_ID, TWL_RES_ACTIVE);
; 391  :                 }
; 392  :             break;
; 393  : #endif     
; 394  : 
; 395  :         case OMAP_DEVICE_MMC2:
; 396  :             if (newPowerState <= D3)

  00098	e3550003	 cmp         r5, #3
  0009c	ca00002b	 bgt         |$LN10@PreDeviceP|
  000a0	e3a03803	 mov         r3, #3, 16

; 397  :                 {
; 398  :                 WriteTwlReg(TWL_VMMC2_DEV_GRP, TWL_DEV_GROUP_P1);

  000a4	e3831086	 orr         r1, r3, #0x86
  000a8	e3a02020	 mov         r2, #0x20
  000ac	e1a00007	 mov         r0, r7
  000b0	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|

; 399  :                 rc = SendSingularPBMessage(TWL_VMMC2_RES_ID, TWL_RES_ACTIVE);

  000b4	e3a01006	 mov         r1, #6

; 400  :                 }
; 401  :             break;

  000b8	ea000007	 b           |$LN25@PreDeviceP|
  000bc		 |$LN9@PreDeviceP|

; 358  :                 }
; 359  :             break;
; 360  : 
; 361  :         case OMAP_DEVICE_MMC1:
; 362  :             if (newPowerState <= D3)

  000bc	e3550003	 cmp         r5, #3
  000c0	ca000022	 bgt         |$LN10@PreDeviceP|
  000c4	e3a03803	 mov         r3, #3, 16

; 363  :                 {
; 364  :                 // assign MMC1 power resource to GROUP_NONE in order to turn off LDO
; 365  :                 //  (setting to OFF state alone doesn't turn off LDO)
; 366  :                 WriteTwlReg(TWL_VMMC1_DEV_GRP, TWL_DEV_GROUP_P1);

  000c8	e3831082	 orr         r1, r3, #0x82
  000cc	e3a02020	 mov         r2, #0x20
  000d0	e1a00007	 mov         r0, r7
  000d4	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|

; 367  :                 rc = SendSingularPBMessage(TWL_VMMC1_RES_ID, TWL_RES_ACTIVE);

  000d8	e3a01005	 mov         r1, #5
  000dc		 |$LN25@PreDeviceP|
  000dc	e3a0200e	 mov         r2, #0xE
  000e0	e1a00007	 mov         r0, r7
  000e4	eb000000	 bl          |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|
  000e8	e1a04000	 mov         r4, r0

; 368  :                 }
; 369  :             break;

  000ec	ea000017	 b           |$LN10@PreDeviceP|
  000f0		 |$LN12@PreDeviceP|

; 341  :         {
; 342  :         case OMAP_DEVICE_HSOTGUSB:
; 343  :             if (newPowerState <= D3)

  000f0	e3550003	 cmp         r5, #3
  000f4	ca000003	 bgt         |$LN11@PreDeviceP|

; 344  :                 {
; 345  :                 state = TWL_RES_ACTIVE|(TWL_RES_ACTIVE << 4);
; 346  :                 UpdateUSBVBusSleepOffState(state);

  000f8	e3a010ee	 mov         r1, #0xEE
  000fc	e1a00007	 mov         r0, r7
  00100	eb000000	 bl          |?UpdateUSBVBusSleepOffState@T2PowerBus_t@@IAAHE@Z|

; 347  :                 rc = TRUE;

  00104	e3a04001	 mov         r4, #1
  00108		 |$LN11@PreDeviceP|

; 348  :                 }
; 349  :             
; 350  :             if (newPowerState <= D2)

  00108	e3550002	 cmp         r5, #2
  0010c	ca00000f	 bgt         |$LN10@PreDeviceP|

; 351  :                 {
; 352  :                 // Enable USB LDO's 
; 353  :                 SetT2USBXvcrActive(TRUE);

  00110	e3a00028	 mov         r0, #0x28
  00114	eb000000	 bl          StallExecution
  00118	e1a00007	 mov         r0, r7
  0011c	eb000000	 bl          |?WakeT2USBPhyDPLL@T2PowerBus_t@@IAAHXZ|

; 354  :                 // put LDO's in Active mode
; 355  :                 SendSingularPBMessage(TWL_VUSB_3V1_RES_ID, TWL_RES_ACTIVE);

  00120	e3a0200e	 mov         r2, #0xE
  00124	e3a01013	 mov         r1, #0x13
  00128	e1a00007	 mov         r0, r7
  0012c	eb000000	 bl          |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|

; 356  :                 SendSingularPBMessage(TWL_VUSB_1V5_RES_ID, TWL_RES_ACTIVE);

  00130	e3a0200e	 mov         r2, #0xE
  00134	e3a01011	 mov         r1, #0x11
  00138	e1a00007	 mov         r0, r7
  0013c	eb000000	 bl          |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|

; 357  :                 SendSingularPBMessage(TWL_VUSB_1V8_RES_ID, TWL_RES_ACTIVE);  

  00140	e3a0200e	 mov         r2, #0xE
  00144	e3a01012	 mov         r1, #0x12
  00148	e1a00007	 mov         r0, r7
  0014c	eb000000	 bl          |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|
  00150		 |$LN10@PreDeviceP|

; 406  :         }
; 407  :     
; 408  :     return rc;
; 409  : }

  00150	e1a00004	 mov         r0, r4
  00154	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00158	e12fff1e	 bx          lr
  0015c		 |$LN29@PreDeviceP|
  0015c		 |$LN30@PreDeviceP|
  0015c	00000000	 DCD         |??_C@_1EE@KKLMMNFE@?$AA?$CL?$AAP?$AAr?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CF?$AAd?$AA?$AN@|
  00160		 |$M39991|

			 ENDP  ; |?PreDevicePowerStateChange@T2PowerBus_t@@UAAKKW4_CEDEVICE_POWER_STATE@@0@Z|, T2PowerBus_t::PreDevicePowerStateChange

	EXPORT	|??_C@_1EG@FOGELPDI@?$AA?$CL?$AAP?$AAo?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CF?$AAd@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T40018| DCD	|$LN28@PostDevice|
	DCD	0x40005b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@FOGELPDI@?$AA?$CL?$AAP?$AAo?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CF?$AAd@| DCB "+"
	DCB	0x0, "P", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "P", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "g", 0x0, "e", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PostDevicePowerStateChange@T2PowerBus_t@@UAAKKW4_CEDEVICE_POWER_STATE@@0@Z| PROC ; T2PowerBus_t::PostDevicePowerStateChange

; 419  : {

  00000		 |$LN28@PostDevice|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M40015|
  00004	e1a05003	 mov         r5, r3
  00008	e1a07001	 mov         r7, r1
  0000c	e1a06000	 mov         r6, r0

; 420  :     UCHAR state;
; 421  :     BOOL rc = FALSE;
; 422  : 
; 423  :     if (newPowerState == oldPowerState) return rc;

  00010	e1550002	 cmp         r5, r2
  00014	e3a04000	 mov         r4, #0
  00018	03a04000	 moveq       r4, #0
  0001c	0a00004e	 beq         |$LN13@PostDevice|

; 424  :     RETAILMSG(1, (L"+PostDevicePowerStateChange - %d\r\n",devId));

  00020	e59f0140	 ldr         r0, [pc, #0x140]
  00024	e1a01007	 mov         r1, r7
  00028	eb000000	 bl          NKDbgPrintfW

; 425  :     switch (devId)

  0002c	e3570003	 cmp         r7, #3
  00030	0a00002e	 beq         |$LN12@PostDevice|
  00034	e3570015	 cmp         r7, #0x15
  00038	0a00001f	 beq         |$LN9@PostDevice|
  0003c	e3570016	 cmp         r7, #0x16
  00040	0a000014	 beq         |$LN3@PostDevice|
  00044	e357003f	 cmp         r7, #0x3F
  00048	0a000007	 beq         |$LN7@PostDevice|
  0004c	e3570043	 cmp         r7, #0x43

; 487  : 
; 488  :         default:
; 489  :             // signal we don't want notification for this device
; 490  :             rc = -1;

  00050	13e04000	 mvnne       r4, #0
  00054	1a000040	 bne         |$LN13@PostDevice|

; 463  : 
; 464  :         case OMAP_DEVICE_CAMERA:
; 465  :             if (newPowerState == D4)

  00058	e3550004	 cmp         r5, #4
  0005c	1a00003e	 bne         |$LN13@PostDevice|

; 466  :                 { 
; 467  :                 rc = SendSingularPBMessage(TWL_VAUX2_RES_ID, TWL_RES_ACTIVE);

  00060	e3a0200e	 mov         r2, #0xE
  00064	e3a01002	 mov         r1, #2

; 468  :                 }
; 469  :             break;

  00068	ea00001c	 b           |$LN24@PostDevice|
  0006c		 |$LN7@PostDevice|

; 454  : 
; 455  :         case OMAP_DEVICE_DSS:
; 456  :             if (newPowerState == D4)

  0006c	e3550004	 cmp         r5, #4
  00070	1a000039	 bne         |$LN13@PostDevice|

; 457  :                 { 
; 458  :                 SendSingularPBMessage(TWL_VAUX3_RES_ID, TWL_RES_ACTIVE);

  00074	e3a0200e	 mov         r2, #0xE
  00078	e3a01003	 mov         r1, #3
  0007c	e1a00006	 mov         r0, r6
  00080	eb000000	 bl          |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|

; 459  :                 SendSingularPBMessage(TWL_VPLL2_RES_ID, TWL_RES_ACTIVE);

  00084	e3a0200e	 mov         r2, #0xE
  00088	e3a01008	 mov         r1, #8
  0008c	e1a00006	 mov         r0, r6
  00090	eb000000	 bl          |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|

; 460  :                 rc = TRUE;
; 461  :                 }
; 462  :             break;

  00094	ea00002f	 b           |$LN10@PostDevice|
  00098		 |$LN3@PostDevice|

; 470  : 
; 471  : #if 0            
; 472  :         case OMAP_DEVICE_TVOUT:
; 473  :             if (newPowerState == D4)
; 474  :                 { 
; 475  :                 rc = SendSingularPBMessage(TWL_VDAC_RES_ID, TWL_RES_ACTIVE);
; 476  :                 }
; 477  :             break;
; 478  : #endif            
; 479  : 
; 480  :         case OMAP_DEVICE_MMC2:
; 481  :             if (newPowerState == D4)

  00098	e3550004	 cmp         r5, #4
  0009c	1a00002e	 bne         |$LN13@PostDevice|
  000a0	e3a03803	 mov         r3, #3, 16

; 482  :                 { 
; 483  :                 WriteTwlReg(TWL_VMMC2_DEV_GRP, TWL_DEV_GROUP_NONE);

  000a4	e3831086	 orr         r1, r3, #0x86
  000a8	e3a02000	 mov         r2, #0
  000ac	e1a00006	 mov         r0, r6
  000b0	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|

; 484  :                 rc = SendSingularPBMessage(TWL_VMMC2_RES_ID, TWL_RES_OFF);

  000b4	e3a01006	 mov         r1, #6

; 485  :                 }
; 486  :             break;

  000b8	ea000007	 b           |$LN25@PostDevice|
  000bc		 |$LN9@PostDevice|

; 443  :             break;
; 444  : 
; 445  :         case OMAP_DEVICE_MMC1:
; 446  :             // assign MMC1 power resource to GROUP_NONE in order to turn off LDO
; 447  :             //  (setting to OFF state alone doesn't turn off LDO)
; 448  :             if (newPowerState == D4)

  000bc	e3550004	 cmp         r5, #4
  000c0	1a000025	 bne         |$LN13@PostDevice|
  000c4	e3a03803	 mov         r3, #3, 16

; 449  :                 {         
; 450  :                 WriteTwlReg(TWL_VMMC1_DEV_GRP, TWL_DEV_GROUP_NONE);

  000c8	e3831082	 orr         r1, r3, #0x82
  000cc	e3a02000	 mov         r2, #0
  000d0	e1a00006	 mov         r0, r6
  000d4	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|

; 451  :                 rc = SendSingularPBMessage(TWL_VMMC1_RES_ID, TWL_RES_OFF);

  000d8	e3a01005	 mov         r1, #5
  000dc		 |$LN25@PostDevice|
  000dc	e3a02000	 mov         r2, #0
  000e0		 |$LN24@PostDevice|
  000e0	e1a00006	 mov         r0, r6
  000e4	eb000000	 bl          |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|
  000e8	e1a04000	 mov         r4, r0

; 452  :                 }
; 453  :             break;

  000ec	ea00001a	 b           |$LN13@PostDevice|
  000f0		 |$LN12@PostDevice|

; 426  :         {
; 427  :         case OMAP_DEVICE_HSOTGUSB:
; 428  :             if (newPowerState >= D3)

  000f0	e3550003	 cmp         r5, #3
  000f4	ba000013	 blt         |$LN11@PostDevice|

; 429  :                 {
; 430  :                 SetT2USBXvcrActive(FALSE);

  000f8	e1a00006	 mov         r0, r6
  000fc	eb000000	 bl          |?WakeT2USBPhyDPLL@T2PowerBus_t@@IAAHXZ|
  00100	e3a02040	 mov         r2, #0x40
  00104	e3a01006	 mov         r1, #6
  00108	e1a00006	 mov         r0, r6
  0010c	eb000000	 bl          |?WriteTwlReg@T2PowerBus_t@@IAAHKE@Z|
  00110	e3a00014	 mov         r0, #0x14
  00114	eb000000	 bl          StallExecution

; 431  :                 // put LDO's in OFF mode
; 432  :                 SendSingularPBMessage(TWL_VUSB_3V1_RES_ID, TWL_RES_OFF);

  00118	e3a02000	 mov         r2, #0
  0011c	e3a01013	 mov         r1, #0x13
  00120	e1a00006	 mov         r0, r6
  00124	eb000000	 bl          |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|

; 433  :                 SendSingularPBMessage(TWL_VUSB_1V5_RES_ID, TWL_RES_OFF);

  00128	e3a02000	 mov         r2, #0
  0012c	e3a01011	 mov         r1, #0x11
  00130	e1a00006	 mov         r0, r6
  00134	eb000000	 bl          |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|

; 434  :                 SendSingularPBMessage(TWL_VUSB_1V8_RES_ID, TWL_RES_OFF); 

  00138	e3a02000	 mov         r2, #0
  0013c	e3a01012	 mov         r1, #0x12
  00140	e1a00006	 mov         r0, r6
  00144	eb000000	 bl          |?SendSingularPBMessage@T2PowerBus_t@@IAAHEE@Z|
  00148		 |$LN11@PostDevice|

; 435  :                 }
; 436  :             
; 437  :             if (newPowerState == D4)

  00148	e3550004	 cmp         r5, #4

; 438  :                 {
; 439  :                 state = TWL_RES_ACTIVE|(TWL_RES_ACTIVE << 4);
; 440  :                 UpdateUSBVBusSleepOffState(state);

  0014c	03a010ee	 moveq       r1, #0xEE
  00150	01a00006	 moveq       r0, r6
  00154	0b000000	 bleq        |?UpdateUSBVBusSleepOffState@T2PowerBus_t@@IAAHE@Z|
  00158		 |$LN10@PostDevice|

; 441  :                 }
; 442  :             rc = TRUE;

  00158	e3a04001	 mov         r4, #1
  0015c		 |$LN13@PostDevice|

; 491  :         }
; 492  :     
; 493  :     return rc;
; 494  : }

  0015c	e1a00004	 mov         r0, r4
  00160	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00164	e12fff1e	 bx          lr
  00168		 |$LN29@PostDevice|
  00168		 |$LN30@PostDevice|
  00168	00000000	 DCD         |??_C@_1EG@FOGELPDI@?$AA?$CL?$AAP?$AAo?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?9?$AA?5?$AA?$CF?$AAd@|
  0016c		 |$M40016|

			 ENDP  ; |?PostDevicePowerStateChange@T2PowerBus_t@@UAAKKW4_CEDEVICE_POWER_STATE@@0@Z|, T2PowerBus_t::PostDevicePowerStateChange

	END
