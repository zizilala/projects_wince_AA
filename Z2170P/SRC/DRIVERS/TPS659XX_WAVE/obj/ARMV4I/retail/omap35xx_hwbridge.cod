; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\TPS659XX_WAVE\omap35xx_hwbridge.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	IMPORT	|SetHwCodecMode_Disabled|
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\omap35xx_hwbridge.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T40680| DCD	|$LN5@DisableAud|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DisableAudio@@YAXPAX@Z| PROC		; DisableAudio

; 38   : {

  00000		 |$LN5@DisableAud|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40677|

; 39   :     SetHwCodecMode_Disabled(m_hHwCodec);

  00004	eb000000	 bl          SetHwCodecMode_Disabled

; 40   : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M40678|

			 ENDP  ; |?DisableAudio@@YAXPAX@Z|, DisableAudio

	IMPORT	|SetHwCodecMode_EnableT2AudioClkOnly|

  00000			 AREA	 |.pdata|, PDATA
|$T40688| DCD	|$LN5@EnableT2Au|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableT2AudioClk@@YAXPAX@Z| PROC	; EnableT2AudioClk

; 48   : {

  00000		 |$LN5@EnableT2Au|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40685|

; 49   :     SetHwCodecMode_EnableT2AudioClkOnly(m_hHwCodec);

  00004	eb000000	 bl          SetHwCodecMode_EnableT2AudioClkOnly

; 50   : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M40686|

			 ENDP  ; |?EnableT2AudioClk@@YAXPAX@Z|, EnableT2AudioClk

	IMPORT	|SetHwCodecMode_Speaker|
	IMPORT	|SetHwCodecMode_Microphone|

  00000			 AREA	 |.pdata|, PDATA
|$T40698| DCD	|$LN7@RouteAudio|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RouteAudioToHandset@@YAXPAXKH@Z| PROC ; RouteAudioToHandset

; 61   : {

  00000		 |$LN7@RouteAudio|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40695|
  00004	e3520000	 cmp         r2, #0

; 62   :     if (bEnableMic)

  00008	0a000002	 beq         |$LN2@RouteAudio|

; 63   :         {
; 64   :         SetHwCodecMode_Microphone(m_hHwCodec, (AudioProfile_e)dwAudioProfile);

  0000c	eb000000	 bl          SetHwCodecMode_Microphone

; 69   :         }
; 70   : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$LN2@RouteAudio|

; 65   :         }
; 66   :     else
; 67   :         {
; 68   :         SetHwCodecMode_Speaker(m_hHwCodec, (AudioProfile_e)dwAudioProfile);

  00018	eb000000	 bl          SetHwCodecMode_Speaker

; 69   :         }
; 70   : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M40696|

			 ENDP  ; |?RouteAudioToHandset@@YAXPAXKH@Z|, RouteAudioToHandset

	IMPORT	|SetHwCodecMode_Headset|
	IMPORT	|SetHwCodecMode_MicHeadset|

  00000			 AREA	 |.pdata|, PDATA
|$T40708| DCD	|$LN7@RouteAudio@2|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RouteAudioToHeadset@@YAXPAXKH@Z| PROC ; RouteAudioToHeadset

; 81   : {

  00000		 |$LN7@RouteAudio@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40705|
  00004	e3520000	 cmp         r2, #0

; 82   :     if (bEnableMic)

  00008	0a000002	 beq         |$LN2@RouteAudio@2|

; 83   :         {
; 84   :         SetHwCodecMode_MicHeadset(m_hHwCodec, (AudioProfile_e)dwAudioProfile);

  0000c	eb000000	 bl          SetHwCodecMode_MicHeadset

; 89   :         }
; 90   : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$LN2@RouteAudio@2|

; 85   :         }
; 86   :     else
; 87   :         {
; 88   :         SetHwCodecMode_Headset(m_hHwCodec, (AudioProfile_e)dwAudioProfile);

  00018	eb000000	 bl          SetHwCodecMode_Headset

; 89   :         }
; 90   : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M40706|

			 ENDP  ; |?RouteAudioToHeadset@@YAXPAXKH@Z|, RouteAudioToHeadset

	IMPORT	|SetHwCodecMode_StereoHeadset|
	IMPORT	|SetHwCodecMode_AuxHeadset|

  00000			 AREA	 |.pdata|, PDATA
|$T40718| DCD	|$LN7@RouteAudio@3|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RouteAudioToAuxHeadset@@YAXPAXKH@Z| PROC ; RouteAudioToAuxHeadset

; 100  : {

  00000		 |$LN7@RouteAudio@3|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40715|
  00004	e3520000	 cmp         r2, #0

; 101  :     if (bEnableMic)

  00008	0a000002	 beq         |$LN2@RouteAudio@3|

; 102  :         {
; 103  :         SetHwCodecMode_AuxHeadset(m_hHwCodec, (AudioProfile_e)dwAudioProfile);

  0000c	eb000000	 bl          SetHwCodecMode_AuxHeadset

; 108  :         }
; 109  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$LN2@RouteAudio@3|

; 104  :         }
; 105  :     else
; 106  :         {
; 107  :         SetHwCodecMode_StereoHeadset(m_hHwCodec, (AudioProfile_e)dwAudioProfile);

  00018	eb000000	 bl          SetHwCodecMode_StereoHeadset

; 108  :         }
; 109  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M40716|

			 ENDP  ; |?RouteAudioToAuxHeadset@@YAXPAXKH@Z|, RouteAudioToAuxHeadset

	EXPORT	|?SetAudioPath@OMAP35XX_HwAudioBridge@@QAAXW4AudioRoute_e@1@K@Z| ; OMAP35XX_HwAudioBridge::SetAudioPath

  00000			 AREA	 |.pdata|, PDATA
|$T40772| DCD	|$LN39@SetAudioPa|
	DCD	0x40004601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetAudioPath@OMAP35XX_HwAudioBridge@@QAAXW4AudioRoute_e@1@K@Z| PROC ; OMAP35XX_HwAudioBridge::SetAudioPath

; 120  : {

  00000		 |$LN39@SetAudioPa|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40769|

; 121  :     DEBUGMSG(ZONE_FUNCTION,
; 122  :         (L"WAV:+OMAP35XX_HwAudioBridge:SetAudioPath(%d)\r\n",
; 123  :         audioroute)
; 124  :         );
; 125  : 
; 126  :     BOOL bReceiverIdle = m_ReceiverState == kAudioRender_Idle;

  00004	e59030c4	 ldr         r3, [r0, #0xC4]
  00008	e3530000	 cmp         r3, #0
  0000c	03a0e001	 moveq       lr, #1
  00010	13a0e000	 movne       lr, #0

; 127  : 
; 128  :     if (audioroute == OMAP35XX_HwAudioBridge::kAudioRoute_HdmiAudio)

  00014	e3510008	 cmp         r1, #8
  00018	1a000003	 bne         |$LN10@SetAudioPa|

; 129  :         {
; 130  :         EnableT2AudioClk(m_hHwCodec);

  0001c	e590002c	 ldr         r0, [r0, #0x2C]
  00020	eb000000	 bl          SetHwCodecMode_EnableT2AudioClkOnly

; 158  :                     break;
; 159  : 
; 160  :                 default:
; 161  :                     break;
; 162  :                 }
; 163  :             }
; 164  :         }
; 165  : 
; 166  :     DEBUGMSG(ZONE_FUNCTION,
; 167  :         (L"WAV:-OMAP35XX_HwAudioBridge:SetAudioPath()\r\n")
; 168  :         );
; 169  : }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$LN10@SetAudioPa|

; 131  :         }
; 132  :     else
; 133  :         {
; 134  :         if (m_TransmitterState == kAudioRender_Idle && bReceiverIdle)

  0002c	e59030c8	 ldr         r3, [r0, #0xC8]
  00030	e3530000	 cmp         r3, #0
  00034	1a000005	 bne         |$LN8@SetAudioPa|
  00038	e35e0000	 cmp         lr, #0
  0003c	0a000003	 beq         |$LN8@SetAudioPa|

; 135  :             {
; 136  :             DisableAudio(m_hHwCodec);

  00040	e590002c	 ldr         r0, [r0, #0x2C]
  00044	eb000000	 bl          SetHwCodecMode_Disabled

; 158  :                     break;
; 159  : 
; 160  :                 default:
; 161  :                     break;
; 162  :                 }
; 163  :             }
; 164  :         }
; 165  : 
; 166  :     DEBUGMSG(ZONE_FUNCTION,
; 167  :         (L"WAV:-OMAP35XX_HwAudioBridge:SetAudioPath()\r\n")
; 168  :         );
; 169  : }

  00048	e49de004	 ldr         lr, [sp], #4
  0004c	e12fff1e	 bx          lr
  00050		 |$LN8@SetAudioPa|

; 137  :             }
; 138  :         else
; 139  :             {
; 140  :             switch (audioroute)

  00050	e3510001	 cmp         r1, #1
  00054	0a000022	 beq         |$LN2@SetAudioPa|
  00058	e3510002	 cmp         r1, #2
  0005c	0a000013	 beq         |$LN3@SetAudioPa|
  00060	da00002a	 ble         |$LN33@SetAudioPa|
  00064	e3510004	 cmp         r1, #4
  00068	da00001d	 ble         |$LN2@SetAudioPa|
  0006c	e3510005	 cmp         r1, #5
  00070	0a00000e	 beq         |$LN3@SetAudioPa|
  00074	e3510006	 cmp         r1, #6
  00078	1a000024	 bne         |$LN33@SetAudioPa|

; 141  :                 {
; 142  :                 case OMAP35XX_HwAudioBridge::kAudioRoute_AuxHeadset:
; 143  :                     RouteAudioToAuxHeadset(m_hHwCodec, dwAudioProfile, 
; 144  :                         bReceiverIdle == FALSE);

  0007c	e35e0000	 cmp         lr, #0
  00080	03a03001	 moveq       r3, #1
  00084	13a03000	 movne       r3, #0
  00088	e590002c	 ldr         r0, [r0, #0x2C]
  0008c	e3530000	 cmp         r3, #0
  00090	e1a01002	 mov         r1, r2
  00094	0a000002	 beq         |$LN26@SetAudioPa|
  00098	eb000000	 bl          SetHwCodecMode_AuxHeadset

; 158  :                     break;
; 159  : 
; 160  :                 default:
; 161  :                     break;
; 162  :                 }
; 163  :             }
; 164  :         }
; 165  : 
; 166  :     DEBUGMSG(ZONE_FUNCTION,
; 167  :         (L"WAV:-OMAP35XX_HwAudioBridge:SetAudioPath()\r\n")
; 168  :         );
; 169  : }

  0009c	e49de004	 ldr         lr, [sp], #4
  000a0	e12fff1e	 bx          lr

; 141  :                 {
; 142  :                 case OMAP35XX_HwAudioBridge::kAudioRoute_AuxHeadset:
; 143  :                     RouteAudioToAuxHeadset(m_hHwCodec, dwAudioProfile, 
; 144  :                         bReceiverIdle == FALSE);

  000a4		 |$LN26@SetAudioPa|
  000a4	eb000000	 bl          SetHwCodecMode_StereoHeadset

; 158  :                     break;
; 159  : 
; 160  :                 default:
; 161  :                     break;
; 162  :                 }
; 163  :             }
; 164  :         }
; 165  : 
; 166  :     DEBUGMSG(ZONE_FUNCTION,
; 167  :         (L"WAV:-OMAP35XX_HwAudioBridge:SetAudioPath()\r\n")
; 168  :         );
; 169  : }

  000a8	e49de004	 ldr         lr, [sp], #4
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN3@SetAudioPa|

; 145  :                     break;
; 146  :                     
; 147  :                 case OMAP35XX_HwAudioBridge::kAudioRoute_BTHeadset:
; 148  :                 case OMAP35XX_HwAudioBridge::kAudioRoute_Headset:
; 149  :                     RouteAudioToHeadset(m_hHwCodec, dwAudioProfile,
; 150  :                         bReceiverIdle == FALSE);

  000b0	e35e0000	 cmp         lr, #0
  000b4	03a03001	 moveq       r3, #1
  000b8	13a03000	 movne       r3, #0
  000bc	e590002c	 ldr         r0, [r0, #0x2C]
  000c0	e3530000	 cmp         r3, #0
  000c4	e1a01002	 mov         r1, r2
  000c8	0a000002	 beq         |$LN30@SetAudioPa|
  000cc	eb000000	 bl          SetHwCodecMode_MicHeadset

; 158  :                     break;
; 159  : 
; 160  :                 default:
; 161  :                     break;
; 162  :                 }
; 163  :             }
; 164  :         }
; 165  : 
; 166  :     DEBUGMSG(ZONE_FUNCTION,
; 167  :         (L"WAV:-OMAP35XX_HwAudioBridge:SetAudioPath()\r\n")
; 168  :         );
; 169  : }

  000d0	e49de004	 ldr         lr, [sp], #4
  000d4	e12fff1e	 bx          lr

; 145  :                     break;
; 146  :                     
; 147  :                 case OMAP35XX_HwAudioBridge::kAudioRoute_BTHeadset:
; 148  :                 case OMAP35XX_HwAudioBridge::kAudioRoute_Headset:
; 149  :                     RouteAudioToHeadset(m_hHwCodec, dwAudioProfile,
; 150  :                         bReceiverIdle == FALSE);

  000d8		 |$LN30@SetAudioPa|
  000d8	eb000000	 bl          SetHwCodecMode_Headset

; 158  :                     break;
; 159  : 
; 160  :                 default:
; 161  :                     break;
; 162  :                 }
; 163  :             }
; 164  :         }
; 165  : 
; 166  :     DEBUGMSG(ZONE_FUNCTION,
; 167  :         (L"WAV:-OMAP35XX_HwAudioBridge:SetAudioPath()\r\n")
; 168  :         );
; 169  : }

  000dc	e49de004	 ldr         lr, [sp], #4
  000e0	e12fff1e	 bx          lr
  000e4		 |$LN2@SetAudioPa|

; 151  :                     break;
; 152  : 
; 153  :                 case OMAP35XX_HwAudioBridge::kAudioRoute_Carkit:
; 154  :                 case OMAP35XX_HwAudioBridge::kAudioRoute_Speaker:
; 155  :                 case OMAP35XX_HwAudioBridge::kAudioRoute_Handset:
; 156  :                     RouteAudioToHandset(m_hHwCodec, dwAudioProfile,
; 157  :                         bReceiverIdle == FALSE);

  000e4	e35e0000	 cmp         lr, #0
  000e8	03a03001	 moveq       r3, #1
  000ec	13a03000	 movne       r3, #0
  000f0	e590002c	 ldr         r0, [r0, #0x2C]
  000f4	e3530000	 cmp         r3, #0
  000f8	e1a01002	 mov         r1, r2
  000fc	0a000002	 beq         |$LN34@SetAudioPa|
  00100	eb000000	 bl          SetHwCodecMode_Microphone

; 158  :                     break;
; 159  : 
; 160  :                 default:
; 161  :                     break;
; 162  :                 }
; 163  :             }
; 164  :         }
; 165  : 
; 166  :     DEBUGMSG(ZONE_FUNCTION,
; 167  :         (L"WAV:-OMAP35XX_HwAudioBridge:SetAudioPath()\r\n")
; 168  :         );
; 169  : }

  00104	e49de004	 ldr         lr, [sp], #4
  00108	e12fff1e	 bx          lr

; 151  :                     break;
; 152  : 
; 153  :                 case OMAP35XX_HwAudioBridge::kAudioRoute_Carkit:
; 154  :                 case OMAP35XX_HwAudioBridge::kAudioRoute_Speaker:
; 155  :                 case OMAP35XX_HwAudioBridge::kAudioRoute_Handset:
; 156  :                     RouteAudioToHandset(m_hHwCodec, dwAudioProfile,
; 157  :                         bReceiverIdle == FALSE);

  0010c		 |$LN34@SetAudioPa|
  0010c	eb000000	 bl          SetHwCodecMode_Speaker
  00110		 |$LN33@SetAudioPa|

; 158  :                     break;
; 159  : 
; 160  :                 default:
; 161  :                     break;
; 162  :                 }
; 163  :             }
; 164  :         }
; 165  : 
; 166  :     DEBUGMSG(ZONE_FUNCTION,
; 167  :         (L"WAV:-OMAP35XX_HwAudioBridge:SetAudioPath()\r\n")
; 168  :         );
; 169  : }

  00110	e49de004	 ldr         lr, [sp], #4
  00114	e12fff1e	 bx          lr
  00118		 |$M40770|

			 ENDP  ; |?SetAudioPath@OMAP35XX_HwAudioBridge@@QAAXW4AudioRoute_e@1@K@Z|, OMAP35XX_HwAudioBridge::SetAudioPath

	EXPORT	|?initialize@OMAP35XX_HwAudioBridge@@QAAXPBG0PAUHwCodecConfigInfo_t@@PAX2W4AudioRoute_e@1@@Z| ; OMAP35XX_HwAudioBridge::initialize
	EXPORT	|??_C@_1GC@NOFIDGAJ@?$AAW?$AAA?$AAV?$AA?3?$AA?$CB?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAT?$AAr?$AAi?$AAt?$AAo?$AAn?$AA?5?$AAD?$AAr?$AAi@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|GetLastError|
	IMPORT	|dpCurSettings|
	IMPORT	|OpenHwCodecHandle|

  00000			 AREA	 |.pdata|, PDATA
|$T40795| DCD	|$LN15@initialize|
	DCD	0x40004101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@NOFIDGAJ@?$AAW?$AAA?$AAV?$AA?3?$AA?$CB?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAT?$AAr?$AAi?$AAt?$AAo?$AAn?$AA?5?$AAD?$AAr?$AAi@| DCB "W"
	DCB	0x0, "A", 0x0, "V", 0x0, ":", 0x0, "!", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "C", 0x0, "a"
	DCB	0x0, "n", 0x0, "'", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "o"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "T", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "D", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?initialize@OMAP35XX_HwAudioBridge@@QAAXPBG0PAUHwCodecConfigInfo_t@@PAX2W4AudioRoute_e@1@@Z| PROC ; OMAP35XX_HwAudioBridge::initialize

; 183  : {

  00000		 |$LN15@initialize|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M40792|
  00004	e1a08002	 mov         r8, r2
  00008	e1a09001	 mov         r9, r1
  0000c	e1a06000	 mov         r6, r0

; 184  :     PortConfigInfo_t *pPortConfigInfo = (PortConfigInfo_t*)hPlayPortConfigInfo;
; 185  : 
; 186  :     DEBUGMSG(ZONE_FUNCTION,
; 187  :         (L"WAV:+OMAP35XX_HwAudioBridge:initialize()\r\n")
; 188  :         );
; 189  : 
; 190  :     DEBUGMSG(ZONE_HWBRIDGE, (L"WAV:initializing hardware\r\n"));
; 191  : 
; 192  :     m_RequestAudioRoute = eAudioRoute;

  00010	e59de024	 ldr         lr, [sp, #0x24]

; 193  : 
; 194  :     m_dwAudioProfile = pPortConfigInfo->portProfile;

  00014	e59d701c	 ldr         r7, [sp, #0x1C]

; 195  : 
; 196  :     m_hHwCodec = OpenHwCodecHandle(pHwCodecConfigInfo);

  00018	e1a00003	 mov         r0, r3
  0001c	e586e0b8	 str         lr, [r6, #0xB8]
  00020	e5973000	 ldr         r3, [r7]
  00024	e58630cc	 str         r3, [r6, #0xCC]
  00028	eb000000	 bl          OpenHwCodecHandle
  0002c	e3500000	 cmp         r0, #0
  00030	e586002c	 str         r0, [r6, #0x2C]

; 197  : 
; 198  :     if (m_hHwCodec == NULL)

  00034	1a000009	 bne         |$LN2@initialize|

; 199  :         {
; 200  :         RETAILMSG(ZONE_ERROR,
; 201  :             (L"WAV:!ERROR Can't load Triton Driver err=0x%08X\r\n",
; 202  :             GetLastError()));

  00038	e59f30c0	 ldr         r3, [pc, #0xC0]
  0003c	e5933440	 ldr         r3, [r3, #0x440]
  00040	e3130902	 tst         r3, #2, 18
  00044	0a00002a	 beq         |$code_exit$40167|
  00048	eb000000	 bl          GetLastError
  0004c	e1a01000	 mov         r1, r0
  00050	e59f00a4	 ldr         r0, [pc, #0xA4]
  00054	eb000000	 bl          NKDbgPrintfW

; 223  : 
; 224  : code_exit:
; 225  :     DEBUGMSG(ZONE_FUNCTION,
; 226  :         (L"WAV:-OMAP35XX_HwAudioBridge:initialize()\r\n")
; 227  :         );
; 228  : }

  00058	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN2@initialize|

; 203  :         goto code_exit;
; 204  :         }
; 205  : 
; 206  :     DisableAudio(m_hHwCodec);

  00060	eb000000	 bl          SetHwCodecMode_Disabled

; 207  : 
; 208  : 
; 209  :     // open and register direct memory transfer port
; 210  :     //
; 211  :     m_DMTPort.register_PORTHost(this);

  00064	e5963040	 ldr         r3, [r6, #0x40]
  00068	e2865040	 add         r5, r6, #0x40
  0006c	e2861024	 add         r1, r6, #0x24
  00070	e5933008	 ldr         r3, [r3, #8]
  00074	e1a00005	 mov         r0, r5
  00078	e1a0e00f	 mov         lr, pc
  0007c	e12fff13	 bx          r3

; 212  :     m_DMTPort.open_Port(szDMTDriver, hPlayPortConfigInfo, hRecPortConfigInfo);

  00080	e5961040	 ldr         r1, [r6, #0x40]
  00084	e59d3020	 ldr         r3, [sp, #0x20]
  00088	e1a02007	 mov         r2, r7
  0008c	e5914004	 ldr         r4, [r1, #4]
  00090	e1a01009	 mov         r1, r9
  00094	e1a00005	 mov         r0, r5
  00098	e1a0e00f	 mov         lr, pc
  0009c	e12fff14	 bx          r4

; 213  : 
; 214  :     // open and register DASF transfer port
; 215  :     //
; 216  :     m_DASFPort.register_PORTHost(this);

  000a0	e596008c	 ldr         r0, [r6, #0x8C]
  000a4	e2861024	 add         r1, r6, #0x24
  000a8	e5904008	 ldr         r4, [r0, #8]
  000ac	e286008c	 add         r0, r6, #0x8C
  000b0	e1a0e00f	 mov         lr, pc
  000b4	e12fff14	 bx          r4

; 217  :     m_DASFPort.open_Port(szDASFDriver, hPlayPortConfigInfo, hRecPortConfigInfo);

  000b8	e596108c	 ldr         r1, [r6, #0x8C]
  000bc	e59d3020	 ldr         r3, [sp, #0x20]
  000c0	e1a02007	 mov         r2, r7
  000c4	e5914004	 ldr         r4, [r1, #4]
  000c8	e1a01008	 mov         r1, r8
  000cc	e286008c	 add         r0, r6, #0x8C
  000d0	e1a0e00f	 mov         lr, pc
  000d4	e12fff14	 bx          r4

; 218  : 
; 219  :     // set default port to the DMT port
; 220  :     //
; 221  :     m_pActivePort = &m_DMTPort;
; 222  :     m_DMTPort.set_DMTProfile(DMTAudioStreamPort::DMTProfile_I2SSlave);

  000d8	e5963040	 ldr         r3, [r6, #0x40]
  000dc	e3a01000	 mov         r1, #0
  000e0	e1a00005	 mov         r0, r5
  000e4	e5933010	 ldr         r3, [r3, #0x10]
  000e8	e586503c	 str         r5, [r6, #0x3C]
  000ec	e1a0e00f	 mov         lr, pc
  000f0	e12fff13	 bx          r3
  000f4		 |$code_exit$40167|

; 223  : 
; 224  : code_exit:
; 225  :     DEBUGMSG(ZONE_FUNCTION,
; 226  :         (L"WAV:-OMAP35XX_HwAudioBridge:initialize()\r\n")
; 227  :         );
; 228  : }

  000f4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000f8	e12fff1e	 bx          lr
  000fc		 |$LN16@initialize|
  000fc		 |$LN17@initialize|
  000fc	00000000	 DCD         |??_C@_1GC@NOFIDGAJ@?$AAW?$AAA?$AAV?$AA?3?$AA?$CB?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAT?$AAr?$AAi?$AAt?$AAo?$AAn?$AA?5?$AAD?$AAr?$AAi@|
  00100		 |$LN18@initialize|
  00100	00000000	 DCD         |dpCurSettings|
  00104		 |$M40793|

			 ENDP  ; |?initialize@OMAP35XX_HwAudioBridge@@QAAXPBG0PAUHwCodecConfigInfo_t@@PAX2W4AudioRoute_e@1@@Z|, OMAP35XX_HwAudioBridge::initialize

	EXPORT	|?update_AudioRouting@OMAP35XX_HwAudioBridge@@IAAHXZ| ; OMAP35XX_HwAudioBridge::update_AudioRouting

  00000			 AREA	 |.pdata|, PDATA
|$T40813| DCD	|$LN34@update_Aud|
	DCD	0x4000ab01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?update_AudioRouting@OMAP35XX_HwAudioBridge@@IAAHXZ| PROC ; OMAP35XX_HwAudioBridge::update_AudioRouting

; 236  : {

  00000		 |$LN34@update_Aud|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M40810|
  00004	e1a05000	 mov         r5, r0

; 237  :     DEBUGMSG(ZONE_FUNCTION,
; 238  :         (L"WAV:+OMAP35XX_HwAudioBridge::update_AudioRouting\r\n")
; 239  :         );
; 240  : 
; 241  :     AudioStreamPort *pActivePort = NULL;
; 242  :     BOOL bPortUpdated = FALSE;
; 243  : 
; 244  :     // UNDONE:
; 245  :     // In certain elaborate use case scenario's we can get out of sync
; 246  :     // with smartphone's audio profile because we override certain
; 247  :     // profiles.  It could be the smartphone shell sheilds us from
; 248  :     // these elaborate use case scenarios by preventing the user to
; 249  :     // change audio profile when certain audio profiles are forced
; 250  :     //
; 251  : 
; 252  :     // clear the audio request change dirty bit
; 253  :     //
; 254  :     m_fRequestAudioRouteDirty = FALSE;
; 255  : 
; 256  :     // Bluetooth headsets are a special case so check for this first
; 257  :     //
; 258  :     if (query_BTHeadsetAttached() == TRUE)

  00008	e5953000	 ldr         r3, [r5]
  0000c	e3a08000	 mov         r8, #0
  00010	e3a06000	 mov         r6, #0
  00014	e593304c	 ldr         r3, [r3, #0x4C]
  00018	e3a07000	 mov         r7, #0
  0001c	e58580c0	 str         r8, [r5, #0xC0]
  00020	e1a0e00f	 mov         lr, pc
  00024	e12fff13	 bx          r3
  00028	e3500001	 cmp         r0, #1
  0002c	e3a09004	 mov         r9, #4
  00030	1a000012	 bne         |$LN26@update_Aud|

; 259  :         {
; 260  :         // for bluetooth we do the following
; 261  :         //  1) set recording/rendering rate to 8khz
; 262  :         //  2) switch to ICX based data port
; 263  :         //  3) update audio routing to go through bluetooth
; 264  :         //
; 265  :         if (m_CurrentAudioRoute != kAudioRoute_BTHeadset)

  00034	e59530bc	 ldr         r3, [r5, #0xBC]
  00038	e3530005	 cmp         r3, #5
  0003c	0a000071	 beq         |$LN7@update_Aud|

; 266  :             {
; 267  :             // when receiver is enabled we need to set the sample
; 268  :             // rate to 8 khz for both input and output
; 269  :             //
; 270  :             m_prgStreams[kOutput]->put_AudioSampleRate(
; 271  :                     CStreamCallback::k8khz
; 272  :                     );

  00040	e595001c	 ldr         r0, [r5, #0x1C]
  00044	e3a01000	 mov         r1, #0
  00048	e5903000	 ldr         r3, [r0]
  0004c	e5933004	 ldr         r3, [r3, #4]
  00050	e1a0e00f	 mov         lr, pc
  00054	e12fff13	 bx          r3

; 273  : 
; 274  :             m_prgStreams[kInput]->put_AudioSampleRate(
; 275  :                     CStreamCallback::k8khz
; 276  :                     );

  00058	e5950020	 ldr         r0, [r5, #0x20]
  0005c	e3a01000	 mov         r1, #0
  00060	e5903000	 ldr         r3, [r0]
  00064	e5933004	 ldr         r3, [r3, #4]
  00068	e1a0e00f	 mov         lr, pc
  0006c	e12fff13	 bx          r3

; 277  : 
; 278  :             m_CurrentAudioRoute = kAudioRoute_BTHeadset;

  00070	e3a03005	 mov         r3, #5

; 279  :             pActivePort = &m_DASFPort;

  00074	e285608c	 add         r6, r5, #0x8C

; 280  :             bPortUpdated = TRUE;

  00078	e3a07001	 mov         r7, #1

; 281  :             }
; 282  :         }

  0007c	ea000060	 b           |$LN30@update_Aud|
  00080		 |$LN26@update_Aud|

; 283  :     // HDMI is attached!
; 284  :     //
; 285  :     else if (query_HdmiAudioAttached() == TRUE)

  00080	e5953000	 ldr         r3, [r5]
  00084	e1a00005	 mov         r0, r5
  00088	e5933050	 ldr         r3, [r3, #0x50]
  0008c	e1a0e00f	 mov         lr, pc
  00090	e12fff13	 bx          r3
  00094	e3500001	 cmp         r0, #1
  00098	1a000021	 bne         |$LN23@update_Aud|

; 286  :         {
; 287  :         // for hdmi audio, we do the following
; 288  :         //  1) set recording/rendering rate to 44.1khz
; 289  :         //  2) switch to data port (McBSP I2S Master)
; 290  :         //  3) Update the audio routing to go through hdmi controller
; 291  :         //
; 292  :         if (m_CurrentAudioRoute != kAudioRoute_HdmiAudioRequested)

  0009c	e59530bc	 ldr         r3, [r5, #0xBC]
  000a0	e3530007	 cmp         r3, #7
  000a4	0a000009	 beq         |$LN29@update_Aud|

; 293  :             {
; 294  :             // set transceiver port to MCBSP port
; 295  :             //
; 296  :             pActivePort = &m_DMTPort;
; 297  :             m_DMTPort.set_DMTProfile(DMTAudioStreamPort::DMTProfile_I2SMaster);

  000a8	e5953040	 ldr         r3, [r5, #0x40]
  000ac	e2856040	 add         r6, r5, #0x40
  000b0	e3a01001	 mov         r1, #1
  000b4	e5933010	 ldr         r3, [r3, #0x10]
  000b8	e1a00006	 mov         r0, r6
  000bc	e1a0e00f	 mov         lr, pc
  000c0	e12fff13	 bx          r3

; 298  :             bPortUpdated = TRUE;
; 299  : 
; 300  :             m_CurrentAudioRoute = kAudioRoute_HdmiAudioRequested;

  000c4	e3a03007	 mov         r3, #7
  000c8	e3a07001	 mov         r7, #1
  000cc	ea00004c	 b           |$LN30@update_Aud|
  000d0		 |$LN29@update_Aud|

; 301  :             }
; 302  :         else if (m_CurrentAudioRoute == kAudioRoute_HdmiAudioRequested)
; 303  :             {
; 304  : 
; 305  :             if (m_ReceiverState != kAudioRender_Idle)

  000d0	e59530c4	 ldr         r3, [r5, #0xC4]

; 306  :                 {
; 307  :                 // when receiver is enabled we need to set the sample
; 308  :                 // rate to 44.1 khz for both input and output
; 309  :                 //
; 310  :                 m_prgStreams[kOutput]->put_AudioSampleRate(
; 311  :                         CStreamCallback::k44khz
; 312  :                         );

  000d4	e595001c	 ldr         r0, [r5, #0x1C]
  000d8	e3a01002	 mov         r1, #2
  000dc	e3530000	 cmp         r3, #0
  000e0	e5903000	 ldr         r3, [r0]
  000e4	e5933004	 ldr         r3, [r3, #4]
  000e8	0a000009	 beq         |$LN19@update_Aud|
  000ec	e1a0e00f	 mov         lr, pc
  000f0	e12fff13	 bx          r3

; 313  : 
; 314  :                 m_prgStreams[kInput]->put_AudioSampleRate(
; 315  :                         CStreamCallback::k44khz
; 316  :                         );

  000f4	e5950020	 ldr         r0, [r5, #0x20]
  000f8	e3a01002	 mov         r1, #2
  000fc	e5903000	 ldr         r3, [r0]
  00100	e5933004	 ldr         r3, [r3, #4]
  00104	e1a0e00f	 mov         lr, pc
  00108	e12fff13	 bx          r3

; 325  :                 }
; 326  : 
; 327  :             m_CurrentAudioRoute = kAudioRoute_HdmiAudio;

  0010c	e3a03008	 mov         r3, #8

; 328  :             }
; 329  :         }
; 330  :     else

  00110	ea00003b	 b           |$LN30@update_Aud|
  00114		 |$LN19@update_Aud|

; 317  :                 }
; 318  :             else
; 319  :                 {
; 320  :                 // set default output rate of 44.1 khz
; 321  :                 //
; 322  :                 m_prgStreams[kOutput]->put_AudioSampleRate(
; 323  :                         CStreamCallback::k44khz
; 324  :                         );

  00114	e1a0e00f	 mov         lr, pc
  00118	e12fff13	 bx          r3

; 325  :                 }
; 326  : 
; 327  :             m_CurrentAudioRoute = kAudioRoute_HdmiAudio;

  0011c	e3a03008	 mov         r3, #8

; 328  :             }
; 329  :         }
; 330  :     else

  00120	ea000037	 b           |$LN30@update_Aud|
  00124		 |$LN23@update_Aud|

; 331  :         {
; 332  :         // for non-bluetooth case do the following
; 333  :         //  1) set rcording/rendering rate
; 334  :         //  2) switch to using MCBSP based data port
; 335  :         //  3) update audio routing
; 336  :         //
; 337  :         if (m_ReceiverState != kAudioRender_Idle)

  00124	e59530c4	 ldr         r3, [r5, #0xC4]

; 338  :             {
; 339  :             // when receiver is enabled we need to set the sample
; 340  :             // rate to 44.1 khz for both input and output
; 341  :             //
; 342  :             m_prgStreams[kOutput]->put_AudioSampleRate(
; 343  :                     CStreamCallback::k44khz
; 344  :                     );

  00128	e595001c	 ldr         r0, [r5, #0x1C]
  0012c	e3a01002	 mov         r1, #2
  00130	e3530000	 cmp         r3, #0
  00134	e5903000	 ldr         r3, [r0]
  00138	e5933004	 ldr         r3, [r3, #4]
  0013c	0a000008	 beq         |$LN16@update_Aud|
  00140	e1a0e00f	 mov         lr, pc
  00144	e12fff13	 bx          r3

; 345  : 
; 346  :             m_prgStreams[kInput]->put_AudioSampleRate(
; 347  :                     CStreamCallback::k44khz
; 348  :                     );

  00148	e5950020	 ldr         r0, [r5, #0x20]
  0014c	e3a01002	 mov         r1, #2
  00150	e5903000	 ldr         r3, [r0]
  00154	e5933004	 ldr         r3, [r3, #4]
  00158	e1a0e00f	 mov         lr, pc
  0015c	e12fff13	 bx          r3

; 349  :             }
; 350  :         else

  00160	ea000001	 b           |$LN15@update_Aud|
  00164		 |$LN16@update_Aud|

; 351  :             {
; 352  :             // set default output rate of 44.1 khz
; 353  :             //
; 354  :             m_prgStreams[kOutput]->put_AudioSampleRate(
; 355  :                     CStreamCallback::k44khz
; 356  :                     );

  00164	e1a0e00f	 mov         lr, pc
  00168	e12fff13	 bx          r3
  0016c		 |$LN15@update_Aud|

; 357  :             }
; 358  : 
; 359  :         // set transceiver port to MCBSP port
; 360  :         //
; 361  :         if (m_bPortSwitch == TRUE)

  0016c	e59530d0	 ldr         r3, [r5, #0xD0]
  00170	e3530001	 cmp         r3, #1

; 362  :             {
; 363  :             DEBUGMSG(ZONE_HWBRIDGE, (L"WAV:DASF port Rendering\r\n"));
; 364  :             // set DASF as active port
; 365  :             //
; 366  :             pActivePort = &m_DASFPort;
; 367  :             bPortUpdated = TRUE;
; 368  : 
; 369  :             // update the active port state
; 370  :             //
; 371  :             m_CurrActivePort = kAudioDASFPort;

  00174	03a03001	 moveq       r3, #1
  00178	058530d4	 streq       r3, [r5, #0xD4]
  0017c	0285608c	 addeq       r6, r5, #0x8C
  00180	03a07001	 moveq       r7, #1
  00184	0a000013	 beq         |$LN13@update_Aud|

; 372  :             }
; 373  :         else
; 374  :             {
; 375  :             DEBUGMSG(ZONE_HWBRIDGE, (L"WAV:McBSP port Rendering\r\n"));
; 376  :             // set transceiver port to MCBSP port
; 377  :             //
; 378  :             if ((m_pActivePort != &m_DMTPort) ||
; 379  :                 (m_DMTPort.get_DMTProfile() != DMTAudioStreamPort::DMTProfile_I2SSlave))

  00188	e595303c	 ldr         r3, [r5, #0x3C]
  0018c	e2854040	 add         r4, r5, #0x40
  00190	e1530004	 cmp         r3, r4
  00194	1a000006	 bne         |$LN11@update_Aud|
  00198	e5953040	 ldr         r3, [r5, #0x40]
  0019c	e1a00004	 mov         r0, r4
  001a0	e5933014	 ldr         r3, [r3, #0x14]
  001a4	e1a0e00f	 mov         lr, pc
  001a8	e12fff13	 bx          r3
  001ac	e3500000	 cmp         r0, #0
  001b0	0a000007	 beq         |$LN12@update_Aud|
  001b4		 |$LN11@update_Aud|

; 380  :                 {
; 381  :                 pActivePort = &m_DMTPort;
; 382  :                 m_DMTPort.set_DMTProfile(DMTAudioStreamPort::DMTProfile_I2SSlave);

  001b4	e5953040	 ldr         r3, [r5, #0x40]
  001b8	e3a01000	 mov         r1, #0
  001bc	e1a00004	 mov         r0, r4
  001c0	e5933010	 ldr         r3, [r3, #0x10]
  001c4	e1a06004	 mov         r6, r4
  001c8	e1a0e00f	 mov         lr, pc
  001cc	e12fff13	 bx          r3

; 383  :                 bPortUpdated = TRUE;

  001d0	e3a07001	 mov         r7, #1
  001d4		 |$LN12@update_Aud|

; 384  :                 }
; 385  : 
; 386  :             // update the active port state
; 387  :             //
; 388  :             m_CurrActivePort = kAudioDMTPort;

  001d4	e58580d4	 str         r8, [r5, #0xD4]
  001d8		 |$LN13@update_Aud|

; 389  :             }
; 390  : 
; 391  :         // NOTE: This is a special state only to handle HDMI detach, since we are
; 392  :         // required to stop the T2 only after the McBSP has stopped completely.
; 393  :         if ((m_CurrentAudioRoute == kAudioRoute_HdmiAudio) &&
; 394  :             (m_TransmitterState == kAudioRender_Active))

  001d8	e59530bc	 ldr         r3, [r5, #0xBC]
  001dc	e3530008	 cmp         r3, #8
  001e0	059530c8	 ldreq       r3, [r5, #0xC8]
  001e4	03530002	 cmpeq       r3, #2

; 395  :             {
; 396  :             m_CurrentAudioRoute = kAudioRoute_HdmiAudioDetached;

  001e8	03a03009	 moveq       r3, #9
  001ec	0a000004	 beq         |$LN30@update_Aud|

; 397  :             }
; 398  :             else
; 399  :             {
; 400  :             // check if speaker mode should be forced
; 401  :             //
; 402  :             if (m_dwSpeakerCount > 0)

  001f0	e5953014	 ldr         r3, [r5, #0x14]
  001f4	e3530000	 cmp         r3, #0

; 403  :                 {
; 404  :                 m_CurrentAudioRoute = kAudioRoute_Speaker;

  001f8	858590bc	 strhi       r9, [r5, #0xBC]
  001fc	8a000001	 bhi         |$LN7@update_Aud|

; 405  :                 }
; 406  :             else
; 407  :                 {
; 408  :                 m_CurrentAudioRoute = m_RequestAudioRoute;

  00200	e59530b8	 ldr         r3, [r5, #0xB8]
  00204		 |$LN30@update_Aud|
  00204	e58530bc	 str         r3, [r5, #0xBC]
  00208		 |$LN7@update_Aud|

; 409  :                 }
; 410  :             }
; 411  :         }
; 412  :     SetAudioPath(m_CurrentAudioRoute, m_dwAudioProfile);

  00208	e59520cc	 ldr         r2, [r5, #0xCC]
  0020c	e59510bc	 ldr         r1, [r5, #0xBC]
  00210	e1a00005	 mov         r0, r5
  00214	eb000000	 bl          |?SetAudioPath@OMAP35XX_HwAudioBridge@@QAAXW4AudioRoute_e@1@K@Z|

; 413  : 
; 414  :     // if no activity then update power state to D4
; 415  :     //
; 416  :     if ((m_ReceiverState == kAudioRender_Idle) &&
; 417  :         (m_TransmitterState == kAudioRender_Idle))

  00218	e59530c4	 ldr         r3, [r5, #0xC4]
  0021c	e1b02003	 movs        r2, r3
  00220	1a000007	 bne         |$LN6@update_Aud|
  00224	e59530c8	 ldr         r3, [r5, #0xC8]
  00228	e3530000	 cmp         r3, #0
  0022c	1a000004	 bne         |$LN6@update_Aud|

; 418  :         {
; 419  :         m_PowerState = D4;

  00230	e5859004	 str         r9, [r5, #4]

; 420  : 
; 421  :         // Check if render port has changed if so update the same.
; 422  :         //
; 423  :         if (bPortUpdated == TRUE)

  00234	e3570001	 cmp         r7, #1
  00238	1a000018	 bne         |$LN4@update_Aud|

; 424  :             {
; 425  :             m_pActivePort = pActivePort;

  0023c	e585603c	 str         r6, [r5, #0x3C]

; 426  :             }
; 427  :         }
; 428  :     else

  00240	ea000016	 b           |$LN4@update_Aud|
  00244		 |$LN6@update_Aud|

; 429  :         {
; 430  :         if (bPortUpdated == TRUE)

  00244	e3570001	 cmp         r7, #1
  00248	1a000013	 bne         |$LN3@update_Aud|

; 431  :             {
; 432  :             // if a port is busy, stop previous port and activate new port.
; 433  :             //
; 434  : 
; 435  :             if (m_ReceiverState != kAudioRender_Idle)

  0024c	e3520000	 cmp         r2, #0

; 436  :                 {
; 437  :                 // need to check if there's any data left to render in port
; 438  :                 // if not then don't bother activating port
; 439  :                 //
; 440  :                 m_pActivePort->signal_Port(ASPS_STOP_RX, NULL, 0);

  00250	1595003c	 ldrne       r0, [r5, #0x3C]
  00254	13a03000	 movne       r3, #0
  00258	13a02000	 movne       r2, #0
  0025c	1590e000	 ldrne       lr, [r0]
  00260	13a01004	 movne       r1, #4
  00264	159e4000	 ldrne       r4, [lr]
  00268	11a0e00f	 movne       lr, pc
  0026c	112fff14	 bxne        r4

; 441  :                 }
; 442  : 
; 443  :             if (m_TransmitterState != kAudioRender_Idle)

  00270	e59530c8	 ldr         r3, [r5, #0xC8]
  00274	e3530000	 cmp         r3, #0

; 444  :                 {
; 445  :                 // need to check if there's any data left to render in port
; 446  :                 // if not then don't bother activating port
; 447  :                 //
; 448  :                 m_pActivePort->signal_Port(ASPS_STOP_TX, NULL, 0);

  00278	1595003c	 ldrne       r0, [r5, #0x3C]
  0027c	13a03000	 movne       r3, #0
  00280	13a02000	 movne       r2, #0
  00284	1590e000	 ldrne       lr, [r0]
  00288	13a01002	 movne       r1, #2
  0028c	159e4000	 ldrne       r4, [lr]
  00290	11a0e00f	 movne       lr, pc
  00294	112fff14	 bxne        r4

; 449  :                 }
; 450  :             m_pActivePort = pActivePort;

  00298	e585603c	 str         r6, [r5, #0x3C]
  0029c		 |$LN3@update_Aud|

; 451  :             }
; 452  :         m_PowerState = D0;

  0029c	e5858004	 str         r8, [r5, #4]
  002a0		 |$LN4@update_Aud|

; 453  :         }
; 454  : 
; 455  :     DEBUGMSG(ZONE_FUNCTION,
; 456  :         (L"WAV:-OMAP35XX_HwAudioBridge::update_AudioRouting\r\n")
; 457  :         );
; 458  : 
; 459  :     return TRUE;

  002a0	e3a00001	 mov         r0, #1

; 460  : }

  002a4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  002a8	e12fff1e	 bx          lr
  002ac		 |$M40811|

			 ENDP  ; |?update_AudioRouting@OMAP35XX_HwAudioBridge@@IAAHXZ|, OMAP35XX_HwAudioBridge::update_AudioRouting

	EXPORT	|?start_AudioPort@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@@Z| ; OMAP35XX_HwAudioBridge::start_AudioPort

  00000			 AREA	 |.pdata|, PDATA
|$T40829| DCD	|$LN25@start_Audi|
	DCD	0x40003e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?start_AudioPort@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@@Z| PROC ; OMAP35XX_HwAudioBridge::start_AudioPort

; 470  : {

  00000		 |$LN25@start_Audi|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40826|
  00004	e3510000	 cmp         r1, #0
  00008	e1a04000	 mov         r4, r0

; 471  :     DEBUGMSG(ZONE_FUNCTION,
; 472  :         (L"WAV:+OMAP35XX_HwAudioBridge::start_AudioPort\r\n")
; 473  :         );
; 474  : 
; 475  :     // check if audio stream is already turned-on.  If
; 476  :     // so then don't turn-on again.  There is a edge case
; 477  :     // where we will try to turn-on audio while
; 478  :     // the last bit of data was pushed-out.  In this case
; 479  :     // we still send the on message to the hardware
; 480  :     //
; 481  :     int nRet = FALSE;
; 482  :     switch (type)

  0000c	0a00001a	 beq         |$LN7@start_Audi|
  00010	e3510001	 cmp         r1, #1
  00014	1a000034	 bne         |$LN19@start_Audi|

; 483  :         {
; 484  :         case kInput:
; 485  :             DEBUGMSG(ZONE_HWBRIDGE, (L"WAV:HWBridge - Starting input stream\r\n"));
; 486  :             if ((m_ReceiverState == kAudioRender_Idle) ||
; 487  :                 (m_ReceiverState == kAudioRender_Stopping))

  00018	e59430c4	 ldr         r3, [r4, #0xC4]
  0001c	e3530000	 cmp         r3, #0
  00020	0a000008	 beq         |$LN9@start_Audi|
  00024	e3530003	 cmp         r3, #3
  00028	1a00002f	 bne         |$LN19@start_Audi|

; 488  :                 {
; 489  :                 switch (m_ReceiverState)

  0002c	e3530000	 cmp         r3, #0
  00030	0a000004	 beq         |$LN9@start_Audi|
  00034	e3530003	 cmp         r3, #3
  00038	1a000006	 bne         |$LN10@start_Audi|

; 497  :                         break;
; 498  : 
; 499  :                     case kAudioRender_Stopping:
; 500  :                         DEBUGMSG(ZONE_HWBRIDGE,
; 501  :                             (L"WAV:HWBridge - rx stopping --> active")
; 502  :                             );
; 503  :                         m_ReceiverState = kAudioRender_Active;

  0003c	e3a03002	 mov         r3, #2
  00040	e58430c4	 str         r3, [r4, #0xC4]

; 504  :                         break;

  00044	ea000003	 b           |$LN10@start_Audi|
  00048		 |$LN9@start_Audi|

; 490  :                     {
; 491  :                     case kAudioRender_Idle:
; 492  :                         DEBUGMSG(ZONE_HWBRIDGE,
; 493  :                             (L"WAV:HWBridge - rx idle --> starting")
; 494  :                             );
; 495  :                         m_ReceiverState = kAudioRender_Starting;

  00048	e3a03001	 mov         r3, #1

; 496  :                         update_AudioRouting();

  0004c	e1a00004	 mov         r0, r4
  00050	e58430c4	 str         r3, [r4, #0xC4]
  00054	eb000000	 bl          |?update_AudioRouting@OMAP35XX_HwAudioBridge@@IAAHXZ|
  00058		 |$LN10@start_Audi|

; 505  :                     }
; 506  :                 nRet = m_pActivePort->signal_Port(ASPS_START_RX, NULL, 0);

  00058	e594003c	 ldr         r0, [r4, #0x3C]
  0005c	e3a03000	 mov         r3, #0
  00060	e3a02000	 mov         r2, #0
  00064	e590e000	 ldr         lr, [r0]
  00068	e3a01003	 mov         r1, #3
  0006c	e59e4000	 ldr         r4, [lr]
  00070	e1a0e00f	 mov         lr, pc
  00074	e12fff14	 bx          r4

; 507  :                 }
; 508  :             break;

  00078	ea000017	 b           |$LN6@start_Audi|
  0007c		 |$LN7@start_Audi|

; 509  : 
; 510  :         case kOutput:
; 511  :             DEBUGMSG(ZONE_HWBRIDGE, (L"WAV:HWBridge - Starting output stream\r\n"));
; 512  :             if ((m_TransmitterState == kAudioRender_Idle) ||
; 513  :                 (m_TransmitterState == kAudioRender_Stopping))

  0007c	e59430c8	 ldr         r3, [r4, #0xC8]
  00080	e3530000	 cmp         r3, #0
  00084	0a000008	 beq         |$LN2@start_Audi|
  00088	e3530003	 cmp         r3, #3
  0008c	1a000016	 bne         |$LN19@start_Audi|

; 514  :                 {
; 515  :                 switch (m_TransmitterState)

  00090	e3530000	 cmp         r3, #0
  00094	0a000004	 beq         |$LN2@start_Audi|
  00098	e3530003	 cmp         r3, #3
  0009c	1a000006	 bne         |$LN3@start_Audi|

; 523  :                         break;
; 524  : 
; 525  :                     case kAudioRender_Stopping:
; 526  :                         DEBUGMSG(ZONE_HWBRIDGE,
; 527  :                             (L"WAV:HWBridge - tx stopping --> active")
; 528  :                             );
; 529  :                         m_TransmitterState = kAudioRender_Active;

  000a0	e3a03002	 mov         r3, #2
  000a4	e58430c8	 str         r3, [r4, #0xC8]

; 530  :                         break;

  000a8	ea000003	 b           |$LN3@start_Audi|
  000ac		 |$LN2@start_Audi|

; 516  :                     {
; 517  :                     case kAudioRender_Idle:
; 518  :                         DEBUGMSG(ZONE_HWBRIDGE,
; 519  :                             (L"WAV:HWBridge - tx idle --> starting")
; 520  :                             );
; 521  :                         m_TransmitterState = kAudioRender_Starting;

  000ac	e3a03001	 mov         r3, #1

; 522  :                         update_AudioRouting();

  000b0	e1a00004	 mov         r0, r4
  000b4	e58430c8	 str         r3, [r4, #0xC8]
  000b8	eb000000	 bl          |?update_AudioRouting@OMAP35XX_HwAudioBridge@@IAAHXZ|
  000bc		 |$LN3@start_Audi|

; 531  :                     }
; 532  :                 nRet = m_pActivePort->signal_Port(ASPS_START_TX, NULL, 0);

  000bc	e594003c	 ldr         r0, [r4, #0x3C]
  000c0	e3a03000	 mov         r3, #0
  000c4	e3a02000	 mov         r2, #0
  000c8	e590e000	 ldr         lr, [r0]
  000cc	e3a01001	 mov         r1, #1
  000d0	e59e4000	 ldr         r4, [lr]
  000d4	e1a0e00f	 mov         lr, pc
  000d8	e12fff14	 bx          r4
  000dc		 |$LN6@start_Audi|

; 533  :                 }
; 534  :             break;
; 535  :         }
; 536  : 
; 537  :     DEBUGMSG(ZONE_FUNCTION,
; 538  :         (L"WAV:-OMAP35XX_HwAudioBridge::start_AudioPort\r\n")
; 539  :         );
; 540  : 
; 541  :     return !!nRet;

  000dc	e3500000	 cmp         r0, #0
  000e0	13a00001	 movne       r0, #1

; 542  : }

  000e4	18bd4010	 ldmneia     sp!, {r4, lr}
  000e8	112fff1e	 bxne        lr
  000ec		 |$LN19@start_Audi|

; 533  :                 }
; 534  :             break;
; 535  :         }
; 536  : 
; 537  :     DEBUGMSG(ZONE_FUNCTION,
; 538  :         (L"WAV:-OMAP35XX_HwAudioBridge::start_AudioPort\r\n")
; 539  :         );
; 540  : 
; 541  :     return !!nRet;

  000ec	e3a00000	 mov         r0, #0

; 542  : }

  000f0	e8bd4010	 ldmia       sp!, {r4, lr}
  000f4	e12fff1e	 bx          lr
  000f8		 |$M40827|

			 ENDP  ; |?start_AudioPort@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@@Z|, OMAP35XX_HwAudioBridge::start_AudioPort

	EXPORT	|?stop_AudioPort@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@@Z| ; OMAP35XX_HwAudioBridge::stop_AudioPort

  00000			 AREA	 |.pdata|, PDATA
|$T40843| DCD	|$LN15@stop_Audio|
	DCD	0x40002c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?stop_AudioPort@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@@Z| PROC ; OMAP35XX_HwAudioBridge::stop_AudioPort

; 552  : {

  00000		 |$LN15@stop_Audio|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40840|
  00004	e3510000	 cmp         r1, #0
  00008	e1a03000	 mov         r3, r0

; 553  :     int nRet = FALSE;
; 554  : 
; 555  :     DEBUGMSG(ZONE_FUNCTION,
; 556  :         (L"WAV:+OMAP35XX_HwAudioBridge::stop_AudioPort\r\n")
; 557  :         );
; 558  : 
; 559  :     switch (type)

  0000c	0a000011	 beq         |$LN3@stop_Audio|
  00010	e3510001	 cmp         r1, #1
  00014	1a000022	 bne         |$LN11@stop_Audio|

; 560  :         {
; 561  :         case kInput:
; 562  :             DEBUGMSG(ZONE_HWBRIDGE,
; 563  :                 (L"WAV:HWBridge - Stopping input stream\r\n")
; 564  :                 );
; 565  :             if ((m_ReceiverState == kAudioRender_Active) ||
; 566  :                 (m_ReceiverState == kAudioRender_Starting))

  00018	e59320c4	 ldr         r2, [r3, #0xC4]
  0001c	e3520002	 cmp         r2, #2
  00020	0a000001	 beq         |$LN4@stop_Audio|
  00024	e3520001	 cmp         r2, #1
  00028	1a00001d	 bne         |$LN11@stop_Audio|
  0002c		 |$LN4@stop_Audio|

; 567  :                 {
; 568  :                 m_ReceiverState = kAudioRender_Stopping;
; 569  :                 nRet = m_pActivePort->signal_Port(ASPS_STOP_RX, NULL, 0);

  0002c	e593003c	 ldr         r0, [r3, #0x3C]
  00030	e3a02003	 mov         r2, #3
  00034	e58320c4	 str         r2, [r3, #0xC4]
  00038	e5901000	 ldr         r1, [r0]
  0003c	e3a03000	 mov         r3, #0
  00040	e3a02000	 mov         r2, #0
  00044	e5914000	 ldr         r4, [r1]
  00048	e3a01004	 mov         r1, #4
  0004c	e1a0e00f	 mov         lr, pc
  00050	e12fff14	 bx          r4

; 570  :                 }
; 571  :             break;

  00054	ea00000e	 b           |$LN2@stop_Audio|
  00058		 |$LN3@stop_Audio|

; 572  : 
; 573  :         case kOutput:
; 574  :             DEBUGMSG(ZONE_HWBRIDGE,
; 575  :                 (L"WAV:HWBridge - Stopping output stream\r\n")
; 576  :                 );
; 577  :             if ((m_TransmitterState == kAudioRender_Active) ||
; 578  :                 (m_TransmitterState == kAudioRender_Starting))

  00058	e59320c8	 ldr         r2, [r3, #0xC8]
  0005c	e3520002	 cmp         r2, #2
  00060	0a000001	 beq         |$LN1@stop_Audio|
  00064	e3520001	 cmp         r2, #1
  00068	1a00000d	 bne         |$LN11@stop_Audio|
  0006c		 |$LN1@stop_Audio|

; 579  :                 {
; 580  :                 m_TransmitterState = kAudioRender_Stopping;
; 581  :                 nRet = m_pActivePort->signal_Port(ASPS_STOP_TX, NULL, 0);

  0006c	e593003c	 ldr         r0, [r3, #0x3C]
  00070	e3a02003	 mov         r2, #3
  00074	e58320c8	 str         r2, [r3, #0xC8]
  00078	e5901000	 ldr         r1, [r0]
  0007c	e3a03000	 mov         r3, #0
  00080	e3a02000	 mov         r2, #0
  00084	e5914000	 ldr         r4, [r1]
  00088	e3a01002	 mov         r1, #2
  0008c	e1a0e00f	 mov         lr, pc
  00090	e12fff14	 bx          r4
  00094		 |$LN2@stop_Audio|

; 582  :                 }
; 583  :             break;
; 584  :         }
; 585  : 
; 586  :     DEBUGMSG(ZONE_FUNCTION,
; 587  :         (L"WAV:-OMAP35XX_HwAudioBridge::stop_AudioPort\r\n")
; 588  :         );
; 589  :     return !!nRet;

  00094	e3500000	 cmp         r0, #0
  00098	13a00001	 movne       r0, #1

; 590  : }

  0009c	18bd4010	 ldmneia     sp!, {r4, lr}
  000a0	112fff1e	 bxne        lr
  000a4		 |$LN11@stop_Audio|

; 582  :                 }
; 583  :             break;
; 584  :         }
; 585  : 
; 586  :     DEBUGMSG(ZONE_FUNCTION,
; 587  :         (L"WAV:-OMAP35XX_HwAudioBridge::stop_AudioPort\r\n")
; 588  :         );
; 589  :     return !!nRet;

  000a4	e3a00000	 mov         r0, #0

; 590  : }

  000a8	e8bd4010	 ldmia       sp!, {r4, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$M40841|

			 ENDP  ; |?stop_AudioPort@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@@Z|, OMAP35XX_HwAudioBridge::stop_AudioPort

	EXPORT	|?start_Stream@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@PAX@Z| ; OMAP35XX_HwAudioBridge::start_Stream
	EXPORT	|??_C@_1HE@OFPCAPFP@?$AAW?$AAA?$AAV?$AA?3?$AAH?$AAW?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?5?$AA?9?$AA?5?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T40862| DCD	|$LN15@start_Stre|
	DCD	0x40002f01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@OFPCAPFP@?$AAW?$AAA?$AAV?$AA?3?$AAH?$AAW?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?5?$AA?9?$AA?5?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa@| DCB "W"
	DCB	0x0, "A", 0x0, "V", 0x0, ":", 0x0, "H", 0x0, "W", 0x0, "B"
	DCB	0x0, "r", 0x0, "i", 0x0, "d", 0x0, "g", 0x0, "e", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "C", 0x0, "a", 0x0, "n", 0x0, "'"
	DCB	0x0, "t", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "m", 0x0, " ", 0x0, "w", 0x0, "h", 0x0, "e"
	DCB	0x0, "n", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "a", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?start_Stream@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@PAX@Z| PROC ; OMAP35XX_HwAudioBridge::start_Stream

; 600  : {

  00000		 |$LN15@start_Stre|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40859|
  00004	e1a05002	 mov         r5, r2
  00008	e3510000	 cmp         r1, #0
  0000c	e1a04000	 mov         r4, r0

; 601  :     int nRet = FALSE;
; 602  : 
; 603  :     DEBUGMSG(ZONE_FUNCTION,
; 604  :         (L"WAV:+OMAP35XX_HwAudioBridge::start_Stream\r\n")
; 605  :         );
; 606  : 
; 607  :     // check if audio stream is already turned-on.  If
; 608  :     // so then don't turn-on again.  There is a edge case
; 609  :     // where we will try to turn-on audio while
; 610  :     // the last bit of data was pushed-out.  In this case
; 611  :     // we still send the on message to the hardware
; 612  :     //
; 613  : 
; 614  :     switch (type)

  00010	0a000011	 beq         |$LN1@start_Stre|
  00014	e3510001	 cmp         r1, #1
  00018	1a000022	 bne         |$LN11@start_Stre|

; 615  :         {
; 616  :         case kInput:
; 617  :             DEBUGMSG(ZONE_HWBRIDGE,
; 618  :                 (L"WAV:HWBridge - Starting input stream\r\n")
; 619  :                 );
; 620  :             RETAILMSG(m_ReceiverState != kAudioRender_Active && ZONE_ERROR,
; 621  :                 (L"WAV:HWBridge - Can't start stream when port is inactive\r\n")
; 622  :                 );

  0001c	e59430c4	 ldr         r3, [r4, #0xC4]
  00020	e3530002	 cmp         r3, #2
  00024	159f308c	 ldrne       r3, [pc, #0x8C]
  00028	15933440	 ldrne       r3, [r3, #0x440]
  0002c	13130902	 tstne       r3, #2, 18
  00030	159f007c	 ldrne       r0, [pc, #0x7C]
  00034	1b000000	 blne        NKDbgPrintfW

; 623  :             nRet = m_pActivePort->signal_Port(ASPS_START_STREAM_RX,
; 624  :                 hStreamContext, 0
; 625  :                 );

  00038	e594003c	 ldr         r0, [r4, #0x3C]
  0003c	e3a03000	 mov         r3, #0
  00040	e1a02005	 mov         r2, r5
  00044	e590e000	 ldr         lr, [r0]
  00048	e3a01008	 mov         r1, #8
  0004c	e59e4000	 ldr         r4, [lr]
  00050	e1a0e00f	 mov         lr, pc
  00054	e12fff14	 bx          r4

; 626  :             break;

  00058	ea00000e	 b           |$LN3@start_Stre|
  0005c		 |$LN1@start_Stre|

; 627  : 
; 628  :         case kOutput:
; 629  :             DEBUGMSG(ZONE_HWBRIDGE,
; 630  :                 (L"WAV:HWBridge - Starting output stream\r\n")
; 631  :                 );
; 632  :             RETAILMSG(m_TransmitterState != kAudioRender_Active && ZONE_ERROR,
; 633  :                 (L"WAV:HWBridge - Can't start stream when port is inactive\r\n")
; 634  :                 );

  0005c	e59430c8	 ldr         r3, [r4, #0xC8]
  00060	e3530002	 cmp         r3, #2
  00064	159f304c	 ldrne       r3, [pc, #0x4C]
  00068	15933440	 ldrne       r3, [r3, #0x440]
  0006c	13130902	 tstne       r3, #2, 18
  00070	159f003c	 ldrne       r0, [pc, #0x3C]
  00074	1b000000	 blne        NKDbgPrintfW

; 635  :             nRet = m_pActivePort->signal_Port(ASPS_START_STREAM_TX,
; 636  :                 hStreamContext, 0
; 637  :                 );

  00078	e594003c	 ldr         r0, [r4, #0x3C]
  0007c	e3a03000	 mov         r3, #0
  00080	e1a02005	 mov         r2, r5
  00084	e590e000	 ldr         lr, [r0]
  00088	e3a01007	 mov         r1, #7
  0008c	e59e4000	 ldr         r4, [lr]
  00090	e1a0e00f	 mov         lr, pc
  00094	e12fff14	 bx          r4
  00098		 |$LN3@start_Stre|

; 638  :             break;
; 639  :         }
; 640  : 
; 641  :     DEBUGMSG(ZONE_FUNCTION,
; 642  :         (L"WAV:-OMAP35XX_HwAudioBridge::start_Stream\r\n")
; 643  :         );
; 644  :     return !!nRet;

  00098	e3500000	 cmp         r0, #0
  0009c	13a00001	 movne       r0, #1

; 645  : }

  000a0	18bd4030	 ldmneia     sp!, {r4, r5, lr}
  000a4	112fff1e	 bxne        lr
  000a8		 |$LN11@start_Stre|

; 638  :             break;
; 639  :         }
; 640  : 
; 641  :     DEBUGMSG(ZONE_FUNCTION,
; 642  :         (L"WAV:-OMAP35XX_HwAudioBridge::start_Stream\r\n")
; 643  :         );
; 644  :     return !!nRet;

  000a8	e3a00000	 mov         r0, #0

; 645  : }

  000ac	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$LN16@start_Stre|
  000b4		 |$LN17@start_Stre|
  000b4	00000000	 DCD         |??_C@_1HE@OFPCAPFP@?$AAW?$AAA?$AAV?$AA?3?$AAH?$AAW?$AAB?$AAr?$AAi?$AAd?$AAg?$AAe?$AA?5?$AA?9?$AA?5?$AAC?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa@|
  000b8		 |$LN18@start_Stre|
  000b8	00000000	 DCD         |dpCurSettings|
  000bc		 |$M40860|

			 ENDP  ; |?start_Stream@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@PAX@Z|, OMAP35XX_HwAudioBridge::start_Stream

	EXPORT	|?start_Stream@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@@Z| ; OMAP35XX_HwAudioBridge::start_Stream

  00000			 AREA	 |.pdata|, PDATA
|$T40878| DCD	|$LN25@start_Stre@2|
	DCD	0x40003d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?start_Stream@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@@Z| PROC ; OMAP35XX_HwAudioBridge::start_Stream

; 654  : {

  00000		 |$LN25@start_Stre@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40875|
  00004	e1a04000	 mov         r4, r0

; 655  :     DEBUGMSG(ZONE_FUNCTION,
; 656  :         (L"WAV:+OMAP35XX_HwAudioBridge::start_Stream\r\n")
; 657  :         );
; 658  : 
; 659  :     // if PowerManagement(PM) has requested for D4 state (Due to Suspend mode),
; 660  :     // audio driver must not start the stream till the PM has again requested
; 661  :     // for D0 State
; 662  :     //
; 663  :     if (m_ReqestedPowerState == D4)

  00008	e5943030	 ldr         r3, [r4, #0x30]
  0000c	e3530004	 cmp         r3, #4
  00010	0a000034	 beq         |$Exit$40283|

; 664  :         {
; 665  :         DEBUGMSG(1, (L"WAV: startstream not started due to PM's D4 state\r\n"));
; 666  :         goto Exit;
; 667  :         }
; 668  : 
; 669  :     // check if audio stream is already turned-on.  If
; 670  :     // so then don't turn-on again.  There is a edge case
; 671  :     // where we will try to turn-on audio while
; 672  :     // the last bit of data was pushed-out.  In this case
; 673  :     // we still send the on message to the hardware
; 674  :     //
; 675  :     switch (type)

  00014	e3510000	 cmp         r1, #0
  00018	0a00001a	 beq         |$LN7@start_Stre@2|
  0001c	e3510001	 cmp         r1, #1
  00020	1a000030	 bne         |$Exit$40283|

; 676  :         {
; 677  :         case kInput:
; 678  :             DEBUGMSG(ZONE_HWBRIDGE,
; 679  :                 (L"WAV:HWBridge - Starting input stream\r\n")
; 680  :                 );
; 681  : 
; 682  :             if ((m_ReceiverState == kAudioRender_Idle) ||
; 683  :                 (m_ReceiverState == kAudioRender_Stopping))

  00024	e59430c4	 ldr         r3, [r4, #0xC4]
  00028	e3530000	 cmp         r3, #0
  0002c	0a000008	 beq         |$LN9@start_Stre@2|
  00030	e3530003	 cmp         r3, #3
  00034	1a00002b	 bne         |$Exit$40283|

; 684  :                 {
; 685  :                 switch (m_ReceiverState)

  00038	e3530000	 cmp         r3, #0
  0003c	0a000004	 beq         |$LN9@start_Stre@2|
  00040	e3530003	 cmp         r3, #3
  00044	1a000006	 bne         |$LN10@start_Stre@2|

; 693  :                         break;
; 694  : 
; 695  :                     case kAudioRender_Stopping:
; 696  :                         DEBUGMSG(ZONE_HWBRIDGE,
; 697  :                             (L"WAV:HWBridge - rx stopping --> active\r\n")
; 698  :                             );
; 699  :                         m_ReceiverState = kAudioRender_Active;

  00048	e3a03002	 mov         r3, #2
  0004c	e58430c4	 str         r3, [r4, #0xC4]

; 700  :                         break;

  00050	ea000003	 b           |$LN10@start_Stre@2|
  00054		 |$LN9@start_Stre@2|

; 686  :                     {
; 687  :                     case kAudioRender_Idle:
; 688  :                         DEBUGMSG(ZONE_HWBRIDGE,
; 689  :                             (L"WAV:HWBridge - rx idle --> starting\r\n")
; 690  :                             );
; 691  :                         m_ReceiverState = kAudioRender_Starting;

  00054	e3a03001	 mov         r3, #1

; 692  :                         update_AudioRouting();

  00058	e1a00004	 mov         r0, r4
  0005c	e58430c4	 str         r3, [r4, #0xC4]
  00060	eb000000	 bl          |?update_AudioRouting@OMAP35XX_HwAudioBridge@@IAAHXZ|
  00064		 |$LN10@start_Stre@2|

; 701  :                     }
; 702  : 
; 703  :                 m_pActivePort->signal_Port(ASPS_START_RX, NULL, 0);

  00064	e594003c	 ldr         r0, [r4, #0x3C]
  00068	e3a03000	 mov         r3, #0
  0006c	e3a02000	 mov         r2, #0
  00070	e590e000	 ldr         lr, [r0]
  00074	e3a01003	 mov         r1, #3
  00078	e59e4000	 ldr         r4, [lr]
  0007c	e1a0e00f	 mov         lr, pc
  00080	e12fff14	 bx          r4

; 704  :                 }
; 705  :             break;

  00084	ea000017	 b           |$Exit$40283|
  00088		 |$LN7@start_Stre@2|

; 706  : 
; 707  :         case kOutput:
; 708  :             DEBUGMSG(ZONE_HWBRIDGE,
; 709  :                 (L"WAV:HWBridge - Starting output stream\r\n")
; 710  :                 );
; 711  : 
; 712  :             if ((m_TransmitterState == kAudioRender_Idle) ||
; 713  :                 (m_TransmitterState == kAudioRender_Stopping))

  00088	e59430c8	 ldr         r3, [r4, #0xC8]
  0008c	e3530000	 cmp         r3, #0
  00090	0a000008	 beq         |$LN2@start_Stre@2|
  00094	e3530003	 cmp         r3, #3
  00098	1a000012	 bne         |$Exit$40283|

; 714  :                 {
; 715  :                 switch (m_TransmitterState)

  0009c	e3530000	 cmp         r3, #0
  000a0	0a000004	 beq         |$LN2@start_Stre@2|
  000a4	e3530003	 cmp         r3, #3
  000a8	1a000006	 bne         |$LN3@start_Stre@2|

; 723  :                         break;
; 724  : 
; 725  :                     case kAudioRender_Stopping:
; 726  :                         DEBUGMSG(ZONE_HWBRIDGE,
; 727  :                             (L"WAV:HWBridge - tx stopping --> active\r\n")
; 728  :                             );
; 729  :                         m_TransmitterState = kAudioRender_Active;

  000ac	e3a03002	 mov         r3, #2
  000b0	e58430c8	 str         r3, [r4, #0xC8]

; 730  :                         break;

  000b4	ea000003	 b           |$LN3@start_Stre@2|
  000b8		 |$LN2@start_Stre@2|

; 716  :                     {
; 717  :                     case kAudioRender_Idle:
; 718  :                         DEBUGMSG(ZONE_HWBRIDGE,
; 719  :                             (L"WAV:HWBridge - tx idle --> starting\r\n")
; 720  :                             );
; 721  :                         m_TransmitterState = kAudioRender_Starting;

  000b8	e3a03001	 mov         r3, #1

; 722  :                         update_AudioRouting();

  000bc	e1a00004	 mov         r0, r4
  000c0	e58430c8	 str         r3, [r4, #0xC8]
  000c4	eb000000	 bl          |?update_AudioRouting@OMAP35XX_HwAudioBridge@@IAAHXZ|
  000c8		 |$LN3@start_Stre@2|

; 731  :                     }
; 732  : 
; 733  :                 m_pActivePort->signal_Port(ASPS_START_TX, NULL, 0);

  000c8	e594003c	 ldr         r0, [r4, #0x3C]
  000cc	e3a03000	 mov         r3, #0
  000d0	e3a02000	 mov         r2, #0
  000d4	e590e000	 ldr         lr, [r0]
  000d8	e3a01001	 mov         r1, #1
  000dc	e59e4000	 ldr         r4, [lr]
  000e0	e1a0e00f	 mov         lr, pc
  000e4	e12fff14	 bx          r4
  000e8		 |$Exit$40283|

; 734  :                 }
; 735  :             break;
; 736  :         }
; 737  : Exit:
; 738  :     DEBUGMSG(ZONE_FUNCTION,
; 739  :         (L"WAV:-OMAP35XX_HwAudioBridge::start_Stream\r\n")
; 740  :         );
; 741  : 
; 742  :     return TRUE;

  000e8	e3a00001	 mov         r0, #1

; 743  : }

  000ec	e8bd4010	 ldmia       sp!, {r4, lr}
  000f0	e12fff1e	 bx          lr
  000f4		 |$M40876|

			 ENDP  ; |?start_Stream@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@@Z|, OMAP35XX_HwAudioBridge::start_Stream

	EXPORT	|?stop_Stream@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@PAX@Z| ; OMAP35XX_HwAudioBridge::stop_Stream

  00000			 AREA	 |.pdata|, PDATA
|$T40893| DCD	|$LN11@stop_Strea|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?stop_Stream@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@PAX@Z| PROC ; OMAP35XX_HwAudioBridge::stop_Stream

; 753  : {

  00000		 |$LN11@stop_Strea|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40890|
  00004	e3510000	 cmp         r1, #0

; 754  :     int nRet = FALSE;
; 755  : 
; 756  :     DEBUGMSG(ZONE_FUNCTION,
; 757  :         (L"WAV:+OMAP35XX_HwAudioBridge::stop_Stream\r\n")
; 758  :         );
; 759  : 
; 760  :     switch (type)

  00008	0a000009	 beq         |$LN1@stop_Strea|
  0000c	e3510001	 cmp         r1, #1
  00010	1a000012	 bne         |$LN7@stop_Strea|

; 761  :         {
; 762  :         case kInput:
; 763  :             DEBUGMSG(ZONE_HWBRIDGE,
; 764  :                 (L"WAV:HWBridge - Stopping input stream\r\n")
; 765  :                 );
; 766  :             nRet = m_pActivePort->signal_Port(ASPS_STOP_STREAM_RX,
; 767  :                 hStreamContext, 0
; 768  :                 );

  00014	e590003c	 ldr         r0, [r0, #0x3C]
  00018	e3a03000	 mov         r3, #0
  0001c	e3a0100a	 mov         r1, #0xA
  00020	e590e000	 ldr         lr, [r0]
  00024	e59e4000	 ldr         r4, [lr]
  00028	e1a0e00f	 mov         lr, pc
  0002c	e12fff14	 bx          r4

; 769  :             break;

  00030	ea000006	 b           |$LN3@stop_Strea|
  00034		 |$LN1@stop_Strea|

; 770  : 
; 771  :         case kOutput:
; 772  :             DEBUGMSG(ZONE_HWBRIDGE,
; 773  :                 (L"WAV:HWBridge - Stopping output stream\r\n")
; 774  :                 );
; 775  :             nRet = m_pActivePort->signal_Port(ASPS_STOP_STREAM_TX,
; 776  :                 hStreamContext, 0
; 777  :                 );

  00034	e590003c	 ldr         r0, [r0, #0x3C]
  00038	e3a03000	 mov         r3, #0
  0003c	e3a01009	 mov         r1, #9
  00040	e590e000	 ldr         lr, [r0]
  00044	e59e4000	 ldr         r4, [lr]
  00048	e1a0e00f	 mov         lr, pc
  0004c	e12fff14	 bx          r4
  00050		 |$LN3@stop_Strea|

; 778  :             break;
; 779  :         }
; 780  : 
; 781  :     DEBUGMSG(ZONE_FUNCTION,
; 782  :         (L"WAV:-OMAP35XX_HwAudioBridge::stop_Stream\r\n")
; 783  :         );
; 784  : 
; 785  :     return !!nRet;

  00050	e3500000	 cmp         r0, #0
  00054	13a00001	 movne       r0, #1

; 786  : }

  00058	18bd4010	 ldmneia     sp!, {r4, lr}
  0005c	112fff1e	 bxne        lr
  00060		 |$LN7@stop_Strea|

; 778  :             break;
; 779  :         }
; 780  : 
; 781  :     DEBUGMSG(ZONE_FUNCTION,
; 782  :         (L"WAV:-OMAP35XX_HwAudioBridge::stop_Stream\r\n")
; 783  :         );
; 784  : 
; 785  :     return !!nRet;

  00060	e3a00000	 mov         r0, #0

; 786  : }

  00064	e8bd4010	 ldmia       sp!, {r4, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M40891|

			 ENDP  ; |?stop_Stream@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@PAX@Z|, OMAP35XX_HwAudioBridge::stop_Stream

	EXPORT	|?abort_Stream@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@PAX@Z| ; OMAP35XX_HwAudioBridge::abort_Stream

  00000			 AREA	 |.pdata|, PDATA
|$T40908| DCD	|$LN11@abort_Stre|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?abort_Stream@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@PAX@Z| PROC ; OMAP35XX_HwAudioBridge::abort_Stream

; 797  : {

  00000		 |$LN11@abort_Stre|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40905|
  00004	e3510000	 cmp         r1, #0

; 798  :     int nRet = FALSE;
; 799  : 
; 800  :     DEBUGMSG(ZONE_FUNCTION,
; 801  :         (L"WAV:+OMAP35XX_HwAudioBridge::abort_Stream\r\n")
; 802  :         );
; 803  : 
; 804  :     switch (type)

  00008	0a000009	 beq         |$LN1@abort_Stre|
  0000c	e3510001	 cmp         r1, #1
  00010	1a000012	 bne         |$LN7@abort_Stre|

; 805  :         {
; 806  :         case kInput:
; 807  :             DEBUGMSG(ZONE_HWBRIDGE,
; 808  :                 (L"WAV:HWBridge - Aborting input stream\r\n")
; 809  :                 );
; 810  :                 nRet = m_pActivePort->signal_Port(ASPS_ABORT_RX,
; 811  :                 hStreamContext, 0
; 812  :                 );

  00014	e590003c	 ldr         r0, [r0, #0x3C]
  00018	e3a03000	 mov         r3, #0
  0001c	e3a01006	 mov         r1, #6
  00020	e590e000	 ldr         lr, [r0]
  00024	e59e4000	 ldr         r4, [lr]
  00028	e1a0e00f	 mov         lr, pc
  0002c	e12fff14	 bx          r4

; 813  :             break;

  00030	ea000006	 b           |$LN3@abort_Stre|
  00034		 |$LN1@abort_Stre|

; 814  : 
; 815  :         case kOutput:
; 816  :             DEBUGMSG(ZONE_HWBRIDGE,
; 817  :                 (L"WAV:HWBridge - Aborting output stream\r\n")
; 818  :                 );
; 819  :                 nRet = m_pActivePort->signal_Port(ASPS_ABORT_TX,
; 820  :                 hStreamContext, 0
; 821  :                 );

  00034	e590003c	 ldr         r0, [r0, #0x3C]
  00038	e3a03000	 mov         r3, #0
  0003c	e3a01005	 mov         r1, #5
  00040	e590e000	 ldr         lr, [r0]
  00044	e59e4000	 ldr         r4, [lr]
  00048	e1a0e00f	 mov         lr, pc
  0004c	e12fff14	 bx          r4
  00050		 |$LN3@abort_Stre|

; 822  :             break;
; 823  :         }
; 824  : 
; 825  :     DEBUGMSG(ZONE_FUNCTION,
; 826  :         (L"WAV:-OMAP35XX_HwAudioBridge::abort_Stream\r\n")
; 827  :         );
; 828  :     return !!nRet;

  00050	e3500000	 cmp         r0, #0
  00054	13a00001	 movne       r0, #1

; 829  : }

  00058	18bd4010	 ldmneia     sp!, {r4, lr}
  0005c	112fff1e	 bxne        lr
  00060		 |$LN7@abort_Stre|

; 822  :             break;
; 823  :         }
; 824  : 
; 825  :     DEBUGMSG(ZONE_FUNCTION,
; 826  :         (L"WAV:-OMAP35XX_HwAudioBridge::abort_Stream\r\n")
; 827  :         );
; 828  :     return !!nRet;

  00060	e3a00000	 mov         r0, #0

; 829  : }

  00064	e8bd4010	 ldmia       sp!, {r4, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M40906|

			 ENDP  ; |?abort_Stream@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@PAX@Z|, OMAP35XX_HwAudioBridge::abort_Stream

	EXPORT	|?set_StreamGain@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@PAXK@Z| ; OMAP35XX_HwAudioBridge::set_StreamGain

  00000			 AREA	 |.pdata|, PDATA
|$T40924| DCD	|$LN11@set_Stream|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?set_StreamGain@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@PAXK@Z| PROC ; OMAP35XX_HwAudioBridge::set_StreamGain

; 840  : {

  00000		 |$LN11@set_Stream|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40921|
  00004	e3510000	 cmp         r1, #0

; 841  :     int nRet = FALSE;
; 842  : 
; 843  :     DEBUGMSG(ZONE_FUNCTION,
; 844  :         (L"WAV:+OMAP35XX_HwAudioBridge::set_StreamGain\r\n")
; 845  :         );
; 846  : 
; 847  :     switch (type)

  00008	0a000008	 beq         |$LN1@set_Stream|
  0000c	e3510001	 cmp         r1, #1
  00010	1a000010	 bne         |$LN7@set_Stream|

; 848  :         {
; 849  :         case kInput:
; 850  :             DEBUGMSG(ZONE_HWBRIDGE,
; 851  :                 (L"WAV:HWBridge - set_StreamGain input stream\r\n")
; 852  :                 );
; 853  :             nRet = m_pActivePort->signal_Port(ASPS_GAIN_STREAM_RX,
; 854  :                 hStreamContext, dwContextData
; 855  :                 );

  00014	e590003c	 ldr         r0, [r0, #0x3C]
  00018	e3a0100e	 mov         r1, #0xE
  0001c	e590e000	 ldr         lr, [r0]
  00020	e59e4000	 ldr         r4, [lr]
  00024	e1a0e00f	 mov         lr, pc
  00028	e12fff14	 bx          r4

; 856  :             break;

  0002c	ea000005	 b           |$LN3@set_Stream|
  00030		 |$LN1@set_Stream|

; 857  : 
; 858  :         case kOutput:
; 859  :             DEBUGMSG(ZONE_HWBRIDGE,
; 860  :                 (L"WAV:HWBridge - set_StreamGain output stream\r\n")
; 861  :                 );
; 862  :             nRet = m_pActivePort->signal_Port(ASPS_GAIN_STREAM_TX,
; 863  :                 hStreamContext, dwContextData
; 864  :                 );

  00030	e590003c	 ldr         r0, [r0, #0x3C]
  00034	e3a0100d	 mov         r1, #0xD
  00038	e590e000	 ldr         lr, [r0]
  0003c	e59e4000	 ldr         r4, [lr]
  00040	e1a0e00f	 mov         lr, pc
  00044	e12fff14	 bx          r4
  00048		 |$LN3@set_Stream|

; 865  :             break;
; 866  :         }
; 867  : 
; 868  :     DEBUGMSG(ZONE_FUNCTION,
; 869  :         (L"WAV:-OMAP35XX_HwAudioBridge::set_StreamGain\r\n")
; 870  :         );
; 871  : 
; 872  :     return !!nRet;

  00048	e3500000	 cmp         r0, #0
  0004c	13a00001	 movne       r0, #1

; 873  : }

  00050	18bd4010	 ldmneia     sp!, {r4, lr}
  00054	112fff1e	 bxne        lr
  00058		 |$LN7@set_Stream|

; 865  :             break;
; 866  :         }
; 867  : 
; 868  :     DEBUGMSG(ZONE_FUNCTION,
; 869  :         (L"WAV:-OMAP35XX_HwAudioBridge::set_StreamGain\r\n")
; 870  :         );
; 871  : 
; 872  :     return !!nRet;

  00058	e3a00000	 mov         r0, #0

; 873  : }

  0005c	e8bd4010	 ldmia       sp!, {r4, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$M40922|

			 ENDP  ; |?set_StreamGain@OMAP35XX_HwAudioBridge@@UAAHW4StreamType@CHardwareAudioBridge@@PAXK@Z|, OMAP35XX_HwAudioBridge::set_StreamGain

	EXPORT	|?switch_AudioStreamPort@OMAP35XX_HwAudioBridge@@UAAHH@Z| ; OMAP35XX_HwAudioBridge::switch_AudioStreamPort

  00000			 AREA	 |.pdata|, PDATA
|$T40937| DCD	|$LN11@switch_Aud|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?switch_AudioStreamPort@OMAP35XX_HwAudioBridge@@UAAHH@Z| PROC ; OMAP35XX_HwAudioBridge::switch_AudioStreamPort

; 882  : {

  00000		 |$LN11@switch_Aud|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40934|
  00004	e1a05000	 mov         r5, r0

; 883  :     int nRet = FALSE;
; 884  : 
; 885  :     DEBUGMSG(ZONE_FUNCTION,
; 886  :         (L"WAV:+OMAP35XX_HwAudioBridge::switch_AudioStreamPort\r\n")
; 887  :         );
; 888  : 
; 889  :     // Check if audio port is idle and check the current active port and switch
; 890  :     // the port accordingly.
; 891  :     //
; 892  :     if ((m_ReceiverState == kAudioRender_Idle) &&
; 893  :         (m_TransmitterState == kAudioRender_Idle))

  00008	e59530c4	 ldr         r3, [r5, #0xC4]
  0000c	e3a00000	 mov         r0, #0
  00010	e3530000	 cmp         r3, #0
  00014	1a00001c	 bne         |$LN5@switch_Aud|
  00018	e59530c8	 ldr         r3, [r5, #0xC8]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000019	 bne         |$LN5@switch_Aud|

; 894  :         {
; 895  :          if (m_CurrActivePort == kAudioDASFPort)

  00024	e59530d4	 ldr         r3, [r5, #0xD4]
  00028	e3530001	 cmp         r3, #1
  0002c	1a00000e	 bne         |$LN4@switch_Aud|

; 896  :             {
; 897  :             m_bPortSwitch = bPortRequest;
; 898  :             update_AudioRouting();

  00030	e1a00005	 mov         r0, r5
  00034	e58510d0	 str         r1, [r5, #0xD0]
  00038	eb000000	 bl          |?update_AudioRouting@OMAP35XX_HwAudioBridge@@IAAHXZ|

; 899  :             if (m_bPreviousPortIsDASF == TRUE)

  0003c	e59530d8	 ldr         r3, [r5, #0xD8]
  00040	e3530001	 cmp         r3, #1

; 900  :                 {
; 901  :                 nRet = m_pActivePort->signal_Port(ASPS_PORT_RECONFIG, NULL, 0);

  00044	0595003c	 ldreq       r0, [r5, #0x3C]
  00048	03a03000	 moveq       r3, #0
  0004c	03a02000	 moveq       r2, #0
  00050	0590e000	 ldreq       lr, [r0]
  00054	03a0100f	 moveq       r1, #0xF
  00058	059e4000	 ldreq       r4, [lr]
  0005c	01a0e00f	 moveq       lr, pc
  00060	012fff14	 bxeq        r4

; 902  :                 }
; 903  :             m_bPreviousPortIsDASF = FALSE;

  00064	e3a03000	 mov         r3, #0
  00068	ea000005	 b           |$LN8@switch_Aud|
  0006c		 |$LN4@switch_Aud|

; 904  :             }
; 905  :          else if (m_CurrActivePort == kAudioDMTPort)

  0006c	e3530000	 cmp         r3, #0
  00070	1a000004	 bne         |$LN1@switch_Aud|

; 906  :             {
; 907  :             m_bPortSwitch = bPortRequest;
; 908  :             update_AudioRouting();

  00074	e1a00005	 mov         r0, r5
  00078	e58510d0	 str         r1, [r5, #0xD0]
  0007c	eb000000	 bl          |?update_AudioRouting@OMAP35XX_HwAudioBridge@@IAAHXZ|

; 909  : 
; 910  :             m_bPreviousPortIsDASF = TRUE;

  00080	e3a03001	 mov         r3, #1
  00084		 |$LN8@switch_Aud|
  00084	e58530d8	 str         r3, [r5, #0xD8]
  00088		 |$LN1@switch_Aud|

; 911  :             }
; 912  :          nRet = TRUE;

  00088	e3a00001	 mov         r0, #1
  0008c		 |$LN5@switch_Aud|

; 913  :         }
; 914  : 
; 915  :     DEBUGMSG(ZONE_FUNCTION,
; 916  :         (L"WAV:-OMAP35XX_HwAudioBridge::switch_AudioStreamPort\r\n")
; 917  :         );
; 918  :     return nRet;
; 919  : 
; 920  : }

  0008c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$M40935|

			 ENDP  ; |?switch_AudioStreamPort@OMAP35XX_HwAudioBridge@@UAAHH@Z|, OMAP35XX_HwAudioBridge::switch_AudioStreamPort

	EXPORT	|?query_AudioStreamPort@OMAP35XX_HwAudioBridge@@UAAHXZ| ; OMAP35XX_HwAudioBridge::query_AudioStreamPort

  00000			 AREA	 |.pdata|, PDATA
|$T40947| DCD	|$LN5@query_Audi|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?query_AudioStreamPort@OMAP35XX_HwAudioBridge@@UAAHXZ| PROC ; OMAP35XX_HwAudioBridge::query_AudioStreamPort

; 927  : {

  00000		 |$LN5@query_Audi|
  00000		 |$M40944|

; 928  :     DEBUGMSG(ZONE_FUNCTION,
; 929  :         (L"WAV:+/- OMAP35XX_HwAudioBridge::switch_AudioStreamPort\r\n")
; 930  :         );
; 931  : 
; 932  :     return (BOOL)m_CurrActivePort;

  00000	e59000d4	 ldr         r0, [r0, #0xD4]

; 933  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M40945|

			 ENDP  ; |?query_AudioStreamPort@OMAP35XX_HwAudioBridge@@UAAHXZ|, OMAP35XX_HwAudioBridge::query_AudioStreamPort

	EXPORT	|?enable_I2SClocks@OMAP35XX_HwAudioBridge@@UAAHH@Z| ; OMAP35XX_HwAudioBridge::enable_I2SClocks

  00000			 AREA	 |.pdata|, PDATA
|$T40958| DCD	|$LN7@enable_I2S|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?enable_I2SClocks@OMAP35XX_HwAudioBridge@@UAAHH@Z| PROC ; OMAP35XX_HwAudioBridge::enable_I2SClocks

; 940  : {

  00000		 |$LN7@enable_I2S|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40955|

; 941  : 
; 942  :     DEBUGMSG(ZONE_FUNCTION,
; 943  :         (L"WAV:+OMAP35XX_HwAudioBridge::enable_I2SClocks\r\n")
; 944  :         );
; 945  : 
; 946  :     if (bClkEnable == TRUE)

  00004	e3510001	 cmp         r1, #1
  00008	1a000003	 bne         |$LN2@enable_I2S|

; 947  :         {
; 948  :         SetHwCodecMode_Speaker(m_hHwCodec, (AudioProfile_e)m_dwAudioProfile);

  0000c	e59010cc	 ldr         r1, [r0, #0xCC]
  00010	e590002c	 ldr         r0, [r0, #0x2C]
  00014	eb000000	 bl          SetHwCodecMode_Speaker

; 949  :         }
; 950  :     else

  00018	ea000001	 b           |$LN1@enable_I2S|
  0001c		 |$LN2@enable_I2S|

; 951  :         {
; 952  :         SetHwCodecMode_Disabled(m_hHwCodec);

  0001c	e590002c	 ldr         r0, [r0, #0x2C]
  00020	eb000000	 bl          SetHwCodecMode_Disabled
  00024		 |$LN1@enable_I2S|

; 953  :         }
; 954  : 
; 955  :     DEBUGMSG(ZONE_FUNCTION,
; 956  :         (L"WAV:-OMAP35XX_HwAudioBridge::enable_I2SClocks\r\n")
; 957  :         );
; 958  : 
; 959  :     return TRUE;

  00024	e3a00001	 mov         r0, #1

; 960  : }

  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$M40956|

			 ENDP  ; |?enable_I2SClocks@OMAP35XX_HwAudioBridge@@UAAHH@Z|, OMAP35XX_HwAudioBridge::enable_I2SClocks

	EXPORT	|?OnAudioStreamMessage@OMAP35XX_HwAudioBridge@@UAAHPAVAudioStreamPort@@KPAX@Z| ; OMAP35XX_HwAudioBridge::OnAudioStreamMessage
	IMPORT	|ExitMutex|
	IMPORT	|EnterMutex|

  00000			 AREA	 |.pdata|, PDATA
|$T40973| DCD	|$LN23@OnAudioStr|
	DCD	0x40007501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OnAudioStreamMessage@OMAP35XX_HwAudioBridge@@UAAHPAVAudioStreamPort@@KPAX@Z| PROC ; OMAP35XX_HwAudioBridge::OnAudioStreamMessage

; 971  : {

  00000		 |$LN23@OnAudioStr|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M40970|
  00004	e1a06003	 mov         r6, r3
  00008	e1a04002	 mov         r4, r2
  0000c	e1a05000	 mov         r5, r0

; 972  :     DEBUGMSG(ZONE_FUNCTION,
; 973  :         (L"WAV::+OMAP35XX_HwAudioBridge::OnAudioStreamMessage(msg=%d)\r\n",
; 974  :         msg));
; 975  : 
; 976  :     BOOL bRet = TRUE;
; 977  :     ASPM_STREAM_DATA* pStreamData;
; 978  : 
; 979  :     ASSERT(m_pActivePort == pPort);
; 980  :     if (m_pActivePort == pPort)

  00010	e595e018	 ldr         lr, [r5, #0x18]
  00014	e3a07001	 mov         r7, #1
  00018	e15e0001	 cmp         lr, r1
  0001c	1a000069	 bne         |$LN17@OnAudioStr|

; 981  :         {
; 982  :         EnterMutex();

  00020	eb000000	 bl          EnterMutex
  00024	e3a03b01	 mov         r3, #1, 22

; 983  :         switch (msg)

  00028	e3831065	 orr         r1, r3, #0x65
  0002c	e1540001	 cmp         r4, r1
  00030	0a000061	 beq         |$LN14@OnAudioStr|
  00034	e3a03b01	 mov         r3, #1, 22
  00038	e3831066	 orr         r1, r3, #0x66
  0003c	e1540001	 cmp         r4, r1
  00040	0a000041	 beq         |$LN6@OnAudioStr|
  00044	e3a03b01	 mov         r3, #1, 22
  00048	e3831067	 orr         r1, r3, #0x67
  0004c	e1540001	 cmp         r4, r1
  00050	0a00003a	 beq         |$LN10@OnAudioStr|
  00054	e3a03b01	 mov         r3, #1, 22
  00058	e3833068	 orr         r3, r3, #0x68
  0005c	e1540003	 cmp         r4, r3
  00060	0a00002f	 beq         |$LN2@OnAudioStr|
  00064	e3a03b01	 mov         r3, #1, 22
  00068	e3833069	 orr         r3, r3, #0x69
  0006c	e1540003	 cmp         r4, r3
  00070	0a000017	 beq         |$LN13@OnAudioStr|
  00074	e3a03b01	 mov         r3, #1, 22
  00078	e383306a	 orr         r3, r3, #0x6A
  0007c	e1540003	 cmp         r4, r3
  00080	1a00004f	 bne         |$LN15@OnAudioStr|

; 1013 : 
; 1014 :             case ASPM_PROCESSDATA_RX:
; 1015 :                 DEBUGMSG(ZONE_HWBRIDGE, (L"WAV:ASPM_PROCESSDATA_RX\r\n"));
; 1016 :                 pStreamData = (ASPM_STREAM_DATA*)pvData;
; 1017 :                 if (pStreamData->hStreamContext == NULL)

  00084	e5963008	 ldr         r3, [r6, #8]

; 1018 :                     {
; 1019 :                     bRet = m_prgStreams[kInput]->copy_AudioData(
; 1020 :                         pStreamData->pBuffer, pStreamData->dwBufferSize
; 1021 :                         );

  00088	e5150004	 ldr         r0, [r5, #-4]
  0008c	e1b01003	 movs        r1, r3
  00090	1a000007	 bne         |$LN8@OnAudioStr|
  00094	e5903000	 ldr         r3, [r0]
  00098	e5962004	 ldr         r2, [r6, #4]
  0009c	e5961000	 ldr         r1, [r6]
  000a0	e5933000	 ldr         r3, [r3]
  000a4	e1a0e00f	 mov         lr, pc
  000a8	e12fff13	 bx          r3
  000ac	e1a07000	 mov         r7, r0
  000b0	ea000043	 b           |$LN15@OnAudioStr|
  000b4		 |$LN8@OnAudioStr|

; 1022 :                     }
; 1023 :                 else
; 1024 :                     {
; 1025 :                     // get a specific streams data
; 1026 :                     bRet = m_prgStreams[kInput]->copy_StreamData(
; 1027 :                         pStreamData->hStreamContext, pStreamData->pBuffer,
; 1028 :                         pStreamData->dwBufferSize
; 1029 :                         );

  000b4	e590e000	 ldr         lr, [r0]
  000b8	e5963004	 ldr         r3, [r6, #4]
  000bc	e5962000	 ldr         r2, [r6]
  000c0	e59e4008	 ldr         r4, [lr, #8]
  000c4	e1a0e00f	 mov         lr, pc
  000c8	e12fff14	 bx          r4
  000cc	e1a07000	 mov         r7, r0
  000d0	ea00003b	 b           |$LN15@OnAudioStr|
  000d4		 |$LN13@OnAudioStr|

; 988  :                 break;
; 989  : 
; 990  :             case ASPM_PROCESSDATA_TX:
; 991  :                 DEBUGMSG(ZONE_HWBRIDGE, (L"WAV:ASPM_PROCESSDATA_TX\r\n"));
; 992  :                 pStreamData = (ASPM_STREAM_DATA*)pvData;
; 993  :                 if (pStreamData->hStreamContext == NULL)

  000d4	e5963008	 ldr         r3, [r6, #8]

; 994  :                     {
; 995  :                     bRet = m_prgStreams[kOutput]->copy_AudioData(
; 996  :                         pStreamData->pBuffer, pStreamData->dwBufferSize
; 997  :                         );

  000d8	e5150008	 ldr         r0, [r5, #-8]
  000dc	e1b01003	 movs        r1, r3
  000e0	1a000007	 bne         |$LN12@OnAudioStr|
  000e4	e5903000	 ldr         r3, [r0]
  000e8	e5962004	 ldr         r2, [r6, #4]
  000ec	e5961000	 ldr         r1, [r6]
  000f0	e5933000	 ldr         r3, [r3]
  000f4	e1a0e00f	 mov         lr, pc
  000f8	e12fff13	 bx          r3

; 998  :                     }
; 999  :                 else
; 1000 :                     {
; 1001 :                     // get a specific streams data
; 1002 :                     bRet = m_prgStreams[kOutput]->copy_StreamData(
; 1003 :                         pStreamData->hStreamContext, pStreamData->pBuffer,
; 1004 :                         pStreamData->dwBufferSize
; 1005 :                         );

  000fc	e1a07000	 mov         r7, r0

; 1006 :                     }
; 1007 :                 break;

  00100	ea00002f	 b           |$LN15@OnAudioStr|
  00104		 |$LN12@OnAudioStr|

; 998  :                     }
; 999  :                 else
; 1000 :                     {
; 1001 :                     // get a specific streams data
; 1002 :                     bRet = m_prgStreams[kOutput]->copy_StreamData(
; 1003 :                         pStreamData->hStreamContext, pStreamData->pBuffer,
; 1004 :                         pStreamData->dwBufferSize
; 1005 :                         );

  00104	e590e000	 ldr         lr, [r0]
  00108	e5963004	 ldr         r3, [r6, #4]
  0010c	e5962000	 ldr         r2, [r6]
  00110	e59e4008	 ldr         r4, [lr, #8]
  00114	e1a0e00f	 mov         lr, pc
  00118	e12fff14	 bx          r4
  0011c	e1a07000	 mov         r7, r0

; 1006 :                     }
; 1007 :                 break;

  00120	ea000027	 b           |$LN15@OnAudioStr|
  00124		 |$LN2@OnAudioStr|

; 1055 : 
; 1056 :             case ASPM_STOP_RX:
; 1057 :                 DEBUGMSG(ZONE_HWBRIDGE, (L"WAV:ASPM_STOP_RX\r\n"));
; 1058 :                 if (m_ReceiverState != kAudioRender_Idle )

  00124	e59530a0	 ldr         r3, [r5, #0xA0]

; 1059 :                     {
; 1060 :                     m_ReceiverState = kAudioRender_Idle;
; 1061 : 
; 1062 :                     }
; 1063 :                 update_AudioRouting();

  00128	e2450024	 sub         r0, r5, #0x24
  0012c	e3530000	 cmp         r3, #0
  00130	13a03000	 movne       r3, #0
  00134	158530a0	 strne       r3, [r5, #0xA0]
  00138	eb000000	 bl          |?update_AudioRouting@OMAP35XX_HwAudioBridge@@IAAHXZ|

; 1064 :                 break;

  0013c	ea000020	 b           |$LN15@OnAudioStr|
  00140		 |$LN10@OnAudioStr|

; 1008 : 
; 1009 :             case ASPM_START_RX:
; 1010 :                 DEBUGMSG(ZONE_HWBRIDGE, (L"WAV:ASPM_START_RX\r\n"));
; 1011 :                 m_ReceiverState = kAudioRender_Active;

  00140	e3a03002	 mov         r3, #2
  00144	e58530a0	 str         r3, [r5, #0xA0]

; 1012 :                 break;

  00148	ea00001d	 b           |$LN15@OnAudioStr|
  0014c		 |$LN6@OnAudioStr|

; 1030 :                     }
; 1031 :                 break;
; 1032 : 
; 1033 :             case ASPM_STOP_TX:
; 1034 :                 DEBUGMSG(ZONE_HWBRIDGE, (L"WAV:ASPM_STOP_TX\r\n"));
; 1035 :                 if (m_TransmitterState == kAudioRender_Stopping)

  0014c	e59530a4	 ldr         r3, [r5, #0xA4]

; 1036 :                     {
; 1037 :                     m_TransmitterState = kAudioRender_Idle;
; 1038 :                     }
; 1039 : 
; 1040 :                 // a stop was forced to change frequency or audio routing.
; 1041 :                 // Cause audio rendering to start again.
; 1042 :                 //
; 1043 :                 update_AudioRouting();

  00150	e2450024	 sub         r0, r5, #0x24
  00154	e3530003	 cmp         r3, #3
  00158	03a03000	 moveq       r3, #0
  0015c	058530a4	 streq       r3, [r5, #0xA4]
  00160	eb000000	 bl          |?update_AudioRouting@OMAP35XX_HwAudioBridge@@IAAHXZ|

; 1044 : 
; 1045 :                 if (m_TransmitterState != kAudioRender_Idle)

  00164	e59530a4	 ldr         r3, [r5, #0xA4]
  00168	e3530000	 cmp         r3, #0

; 1046 :                     {
; 1047 :                     m_pActivePort->signal_Port(ASPS_START_TX, NULL, 0);

  0016c	15950018	 ldrne       r0, [r5, #0x18]
  00170	13a03000	 movne       r3, #0
  00174	13a02000	 movne       r2, #0
  00178	1590e000	 ldrne       lr, [r0]
  0017c	13a01001	 movne       r1, #1
  00180	159e4000	 ldrne       r4, [lr]
  00184	11a0e00f	 movne       lr, pc
  00188	112fff14	 bxne        r4

; 1048 :                     }
; 1049 : 
; 1050 :                 if (m_ReceiverState == kAudioRender_Starting)

  0018c	e59530a0	 ldr         r3, [r5, #0xA0]
  00190	e3530001	 cmp         r3, #1
  00194	1a00000a	 bne         |$LN15@OnAudioStr|

; 1051 :                     {
; 1052 :                     m_pActivePort->signal_Port(ASPS_START_RX, NULL, 0);

  00198	e5950018	 ldr         r0, [r5, #0x18]
  0019c	e3a03000	 mov         r3, #0
  001a0	e3a02000	 mov         r2, #0
  001a4	e590e000	 ldr         lr, [r0]
  001a8	e3a01003	 mov         r1, #3
  001ac	e59e4000	 ldr         r4, [lr]
  001b0	e1a0e00f	 mov         lr, pc
  001b4	e12fff14	 bx          r4

; 1053 :                     }
; 1054 :                 break;

  001b8	ea000001	 b           |$LN15@OnAudioStr|
  001bc		 |$LN14@OnAudioStr|

; 984  :             {
; 985  :             case ASPM_START_TX:
; 986  :                 DEBUGMSG(ZONE_HWBRIDGE, (L"WAV:ASPM_START_TX\r\n"));
; 987  :                 m_TransmitterState = kAudioRender_Active;

  001bc	e3a03002	 mov         r3, #2
  001c0	e58530a4	 str         r3, [r5, #0xA4]
  001c4		 |$LN15@OnAudioStr|

; 1065 :             }
; 1066 : 
; 1067 :         ExitMutex();

  001c4	eb000000	 bl          ExitMutex
  001c8		 |$LN17@OnAudioStr|

; 1068 :         }
; 1069 : 
; 1070 :     DEBUGMSG(ZONE_FUNCTION,
; 1071 :         (L"WAV::-OMAP35XX_HwAudioBridge::OnAudioStreamMessage(msg=%d)\r\n",
; 1072 :         msg));
; 1073 : 
; 1074 :     return bRet;
; 1075 : }

  001c8	e1a00007	 mov         r0, r7
  001cc	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  001d0	e12fff1e	 bx          lr
  001d4		 |$M40971|

			 ENDP  ; |?OnAudioStreamMessage@OMAP35XX_HwAudioBridge@@UAAHPAVAudioStreamPort@@KPAX@Z|, OMAP35XX_HwAudioBridge::OnAudioStreamMessage

	END
