; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\TPS659XX_WAVE\strmmgr.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?m_dwClassAttenMax@CStreamManager@@1KA| [ DATA ] ; CStreamManager::m_dwClassAttenMax
	EXPORT	|?m_dwDeviceAttenMax@CStreamManager@@1KA| [ DATA ] ; CStreamManager::m_dwDeviceAttenMax
	EXPORT	|?m_dwStreamAttenMax@CStreamManager@@1KA| [ DATA ] ; CStreamManager::m_dwStreamAttenMax

  00000			 AREA	 |.bss|, NOINIT
|?m_dwClassAttenMax@CStreamManager@@1KA| % 0x4		; CStreamManager::m_dwClassAttenMax
|?m_dwDeviceAttenMax@CStreamManager@@1KA| % 0x4		; CStreamManager::m_dwDeviceAttenMax
|?m_dwStreamAttenMax@CStreamManager@@1KA| % 0x4		; CStreamManager::m_dwStreamAttenMax

  00000			 AREA	 |.data|, DATA
|s_SampleRates| DCD 0x1f40
	DCD	0x83127
	DCD	0x3e80
	DCD	0x41894
	DCD	0xac44
	DCD	0x17c70
	DCD	0xbb80
	DCD	0x15d87
	DCD	0x17700
	DCD	0xaec4
	EXPORT	|?IsEqualGUID@@YAHABU_GUID@@0@Z|	; IsEqualGUID
	IMPORT	|memcmp|
; File c:\wince600\public\common\sdk\inc\objbase.h

  00000			 AREA	 |.pdata|, PDATA
|$T34872| DCD	|$LN7@IsEqualGUI|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsEqualGUID@@YAHABU_GUID@@0@Z| PROC	; IsEqualGUID

; 493  : {

  00000		 |$LN7@IsEqualGUI|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M34869|

; 494  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00004	e3a02010	 mov         r2, #0x10
  00008	eb000000	 bl          memcmp
  0000c	e3500000	 cmp         r0, #0
  00010	03a00001	 moveq       r0, #1

; 495  : }

  00014	049de004	 ldreq       lr, [sp], #4

; 494  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00018	13a00000	 movne       r0, #0

; 495  : }

  0001c	149de004	 ldrne       lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M34870|

			 ENDP  ; |?IsEqualGUID@@YAHABU_GUID@@0@Z|, IsEqualGUID

	EXPORT	|?get_HardwareAudioBridge@CAudioManager@@QBAPAVCHardwareAudioBridge@@XZ| ; CAudioManager::get_HardwareAudioBridge
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\audiomgr.h

  00000			 AREA	 |.pdata|, PDATA
|$T34882| DCD	|$LN5@get_Hardwa|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?get_HardwareAudioBridge@CAudioManager@@QBAPAVCHardwareAudioBridge@@XZ| PROC ; CAudioManager::get_HardwareAudioBridge

; 172  :     {

  00000		 |$LN5@get_Hardwa|
  00000		 |$M34879|

; 173  :         return m_pHardwareBridge;

  00000	e5900024	 ldr         r0, [r0, #0x24]

; 174  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M34880|

			 ENDP  ; |?get_HardwareAudioBridge@CAudioManager@@QBAPAVCHardwareAudioBridge@@XZ|, CAudioManager::get_HardwareAudioBridge

	EXPORT	|??0CStreamCallback@@QAA@XZ|		; CStreamCallback::CStreamCallback
	EXPORT	|??_7CStreamCallback@@6B@| [ DATA ]	; CStreamCallback::`vftable'
	IMPORT	|_purecall|

  00000			 AREA	 |.pdata|, PDATA
|$T34892| DCD	|$LN5@CStreamCal|
	DCD	0x40000500

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CStreamCallback@@6B@| DCD |_purecall|		; CStreamCallback::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CStreamCallback@@QAA@XZ| PROC	; CStreamCallback::CStreamCallback
  00000		 |$LN5@CStreamCal|
  00000		 |$M34889|
  00000	e1a02000	 mov         r2, r0
  00004	e59f3004	 ldr         r3, [pc, #4]
  00008	e5823000	 str         r3, [r2]
  0000c	e12fff1e	 bx          lr
  00010		 |$LN6@CStreamCal|
  00010		 |$LN7@CStreamCal|
  00010	00000000	 DCD         |??_7CStreamCallback@@6B@|
  00014		 |$M34890|

			 ENDP  ; |??0CStreamCallback@@QAA@XZ|, CStreamCallback::CStreamCallback

	EXPORT	|?GetClassProperty@CStreamManager@@QAAHKPAKPAH@Z| ; CStreamManager::GetClassProperty
	IMPORT	|?FindEntry@StreamClassTable@@QAAPAU_STREAMCLASSCONFIG@@K@Z| ; StreamClassTable::FindEntry
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\strmmgr.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T34909| DCD	|$LN9@GetClassPr|
	DCD	0x40001501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetClassProperty@CStreamManager@@QAAHKPAKPAH@Z| PROC ; CStreamManager::GetClassProperty

; 74   : {

  00000		 |$LN9@GetClassPr|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M34906|
  00004	e1a05003	 mov         r5, r3
  00008	e1b06002	 movs        r6, r2

; 75   :     BOOL fSuccess = FALSE;
; 76   : 
; 77   :     // Must specify at least one get param.
; 78   :     if ((NULL == pdwClassGain) && (NULL == pfBypassDeviceGain))

  0000c	03550000	 cmpeq       r5, #0
  00010	e3a04000	 mov         r4, #0

; 79   :     {
; 80   :         return FALSE;

  00014	03a04000	 moveq       r4, #0
  00018	0a00000a	 beq         |$LN3@GetClassPr|

; 81   :     }
; 82   : 
; 83   :     STREAMCLASSCONFIG *pEntry = m_StreamClassTable.FindEntry(dwClassId);

  0001c	e280001c	 add         r0, r0, #0x1C
  00020	eb000000	 bl          |?FindEntry@StreamClassTable@@QAAPAU_STREAMCLASSCONFIG@@K@Z|
  00024	e3500000	 cmp         r0, #0

; 84   :     if (pEntry != NULL)

  00028	0a000006	 beq         |$LN3@GetClassPr|

; 85   :     {
; 86   :         if (pdwClassGain != NULL)

  0002c	e3560000	 cmp         r6, #0

; 87   :         {
; 88   :             *pdwClassGain = pEntry->dwClassGain;

  00030	15903004	 ldrne       r3, [r0, #4]

; 89   :         }
; 90   :         if (pfBypassDeviceGain != NULL)
; 91   :         {
; 92   :             *pfBypassDeviceGain = pEntry->fBypassDeviceGain;
; 93   :         }
; 94   : 
; 95   :         fSuccess = TRUE;

  00034	e3a04001	 mov         r4, #1
  00038	15863000	 strne       r3, [r6]
  0003c	e3550000	 cmp         r5, #0
  00040	15903008	 ldrne       r3, [r0, #8]
  00044	15853000	 strne       r3, [r5]
  00048		 |$LN3@GetClassPr|

; 96   :     }
; 97   : 
; 98   :     return fSuccess;
; 99   : }

  00048	e1a00004	 mov         r0, r4
  0004c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M34907|

			 ENDP  ; |?GetClassProperty@CStreamManager@@QAAHKPAKPAH@Z|, CStreamManager::GetClassProperty

	EXPORT	|?IsBypassDeviceGain@CStreamManager@@QAAHK@Z| ; CStreamManager::IsBypassDeviceGain

  00000			 AREA	 |.pdata|, PDATA
|$T34935| DCD	|$LN14@IsBypassDe|
	DCD	0x40001202
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsBypassDeviceGain@CStreamManager@@QAAHK@Z| PROC ; CStreamManager::IsBypassDeviceGain

; 102  : {

  00000		 |$LN14@IsBypassDe|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M34932|

; 103  :     BOOL fBypass;
; 104  : 
; 105  :     if (!GetClassProperty(dwClassId, NULL, &fBypass))

  00008	e28d3000	 add         r3, sp, #0
  0000c	e3530000	 cmp         r3, #0
  00010	e3a04000	 mov         r4, #0
  00014	0a000007	 beq         |$LN10@IsBypassDe|
  00018	e280001c	 add         r0, r0, #0x1C
  0001c	eb000000	 bl          |?FindEntry@StreamClassTable@@QAAPAU_STREAMCLASSCONFIG@@K@Z|
  00020	e3500000	 cmp         r0, #0
  00024	15900008	 ldrne       r0, [r0, #8]
  00028	059d0000	 ldreq       r0, [sp]
  0002c	13a04001	 movne       r4, #1
  00030	e3540000	 cmp         r4, #0
  00034	1a000000	 bne         |$LN1@IsBypassDe|
  00038		 |$LN10@IsBypassDe|

; 106  :     {
; 107  :         fBypass = c_fBypassDeviceGainDefault;

  00038	e3a00000	 mov         r0, #0
  0003c		 |$LN1@IsBypassDe|

; 108  :     }
; 109  : 
; 110  :     return fBypass;
; 111  : }

  0003c	e28dd004	 add         sp, sp, #4
  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M34933|

			 ENDP  ; |?IsBypassDeviceGain@CStreamManager@@QAAHK@Z|, CStreamManager::IsBypassDeviceGain

	EXPORT	|?GetClassGain@CStreamManager@@QAAKK@Z|	; CStreamManager::GetClassGain

  00000			 AREA	 |.pdata|, PDATA
|$T34948| DCD	|$LN7@GetClassGa|
	DCD	0x40000c02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetClassGain@CStreamManager@@QAAKK@Z| PROC ; CStreamManager::GetClassGain

; 114  : {

  00000		 |$LN7@GetClassGa|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M34945|

; 115  :     DWORD dwClassGain;
; 116  : 
; 117  :     if (!GetClassProperty(dwClassId, &dwClassGain, NULL))

  00008	e3a03000	 mov         r3, #0
  0000c	e28d2000	 add         r2, sp, #0
  00010	eb000000	 bl          |?GetClassProperty@CStreamManager@@QAAHKPAKPAH@Z|
  00014	e3500000	 cmp         r0, #0
  00018	03a03cff	 moveq       r3, #0xFF, 24

; 118  :     {
; 119  :         dwClassGain = c_dwClassGainDefault;

  0001c	038300ff	 orreq       r0, r3, #0xFF
  00020	159d0000	 ldrne       r0, [sp]

; 120  :     }
; 121  : 
; 122  :     return dwClassGain;
; 123  : }

  00024	e28dd004	 add         sp, sp, #4
  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$M34946|

			 ENDP  ; |?GetClassGain@CStreamManager@@QAAKK@Z|, CStreamManager::GetClassGain

	EXPORT	|?SetClassGain@CStreamManager@@QAAKKK@Z| ; CStreamManager::SetClassGain

  00000			 AREA	 |.pdata|, PDATA
|$T34963| DCD	|$LN10@SetClassGa|
	DCD	0x40001701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetClassGain@CStreamManager@@QAAKKK@Z| PROC ; CStreamManager::SetClassGain

; 126  : {

  00000		 |$LN10@SetClassGa|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M34960|
  00004	e1a05002	 mov         r5, r2
  00008	e1a04000	 mov         r4, r0
  0000c	e3a03cff	 mov         r3, #0xFF, 24

; 127  :     MMRESULT mmRet;
; 128  : 
; 129  :     if (dwClassGain > WAVE_STREAMCLASS_CLASSGAIN_MAX)

  00010	e38330ff	 orr         r3, r3, #0xFF
  00014	e1550003	 cmp         r5, r3

; 130  :     {
; 131  :         mmRet = MMSYSERR_INVALPARAM;

  00018	8a000003	 bhi         |$LN7@SetClassGa|

; 132  :         goto Exit;
; 133  :     }
; 134  : 
; 135  :     STREAMCLASSCONFIG *pEntry = m_StreamClassTable.FindEntry(dwClassId);

  0001c	e284001c	 add         r0, r4, #0x1C
  00020	eb000000	 bl          |?FindEntry@StreamClassTable@@QAAPAU_STREAMCLASSCONFIG@@K@Z|
  00024	e3500000	 cmp         r0, #0

; 136  :     if (NULL == pEntry)

  00028	1a000002	 bne         |$LN2@SetClassGa|
  0002c		 |$LN7@SetClassGa|

; 137  :     {
; 138  :         mmRet = MMSYSERR_INVALPARAM;

  0002c	e3a0000b	 mov         r0, #0xB

; 146  : 
; 147  : Exit:
; 148  : 
; 149  :     return mmRet;
; 150  : }

  00030	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$LN2@SetClassGa|

; 139  :         goto Exit;
; 140  :     }
; 141  : 
; 142  :     pEntry->dwClassGain = dwClassGain;

  00038	e5805004	 str         r5, [r0, #4]

; 143  :     update_Streams();

  0003c	e5943000	 ldr         r3, [r4]
  00040	e1a00004	 mov         r0, r4
  00044	e5933010	 ldr         r3, [r3, #0x10]
  00048	e1a0e00f	 mov         lr, pc
  0004c	e12fff13	 bx          r3

; 144  : 
; 145  :     mmRet = MMSYSERR_NOERROR;

  00050	e3a00000	 mov         r0, #0
  00054		 |$Exit$34432|

; 146  : 
; 147  : Exit:
; 148  : 
; 149  :     return mmRet;
; 150  : }

  00054	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M34961|

			 ENDP  ; |?SetClassGain@CStreamManager@@QAAKKK@Z|, CStreamManager::SetClassGain

	EXPORT	|?IsValidClassId@CStreamManager@@QAAHK@Z| ; CStreamManager::IsValidClassId

  00000			 AREA	 |.pdata|, PDATA
|$T34976| DCD	|$LN7@IsValidCla|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsValidClassId@CStreamManager@@QAAHK@Z| PROC ; CStreamManager::IsValidClassId

; 153  : {

  00000		 |$LN7@IsValidCla|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M34973|

; 154  :     STREAMCLASSCONFIG *pEntry = m_StreamClassTable.FindEntry(dwClassId);

  00004	e280001c	 add         r0, r0, #0x1C
  00008	eb000000	 bl          |?FindEntry@StreamClassTable@@QAAPAU_STREAMCLASSCONFIG@@K@Z|
  0000c	e3500000	 cmp         r0, #0

; 155  :     return (pEntry != NULL);

  00010	13a00001	 movne       r0, #1

; 156  : }

  00014	149de004	 ldrne       lr, [sp], #4

; 155  :     return (pEntry != NULL);

  00018	03a00000	 moveq       r0, #0

; 156  : }

  0001c	049de004	 ldreq       lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M34974|

			 ENDP  ; |?IsValidClassId@CStreamManager@@QAAHK@Z|, CStreamManager::IsValidClassId

	EXPORT	|?get_HardwareAudioBridge@CStreamManager@@UBAPAVCHardwareAudioBridge@@XZ| ; CStreamManager::get_HardwareAudioBridge
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\audiomgr.h

  00000			 AREA	 |.pdata|, PDATA
|$T34990| DCD	|$LN7@get_Hardwa@2|
	DCD	0x40000300
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\strmmgr.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?get_HardwareAudioBridge@CStreamManager@@UBAPAVCHardwareAudioBridge@@XZ| PROC ; CStreamManager::get_HardwareAudioBridge

; 166  : {

  00000		 |$LN7@get_Hardwa@2|
  00000		 |$M34987|

; 167  :     return m_pAudioManager->get_HardwareAudioBridge();

  00000	e5903030	 ldr         r3, [r0, #0x30]
  00004	e5930024	 ldr         r0, [r3, #0x24]

; 168  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M34988|

			 ENDP  ; |?get_HardwareAudioBridge@CStreamManager@@UBAPAVCHardwareAudioBridge@@XZ|, CStreamManager::get_HardwareAudioBridge

	EXPORT	|?IsSupportedFormat@CStreamManager@@UAAHPAUtWAVEFORMATEX@@@Z| ; CStreamManager::IsSupportedFormat

  00000			 AREA	 |.pdata|, PDATA
|$T35000| DCD	|$LN10@IsSupporte|
	DCD	0x40002300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsSupportedFormat@CStreamManager@@UAAHPAUtWAVEFORMATEX@@@Z| PROC ; CStreamManager::IsSupportedFormat

; 179  : {

  00000		 |$LN10@IsSupporte|
  00000		 |$M34997|

; 180  :     if (lpFormat->wFormatTag != WAVE_FORMAT_PCM)

  00000	e5d12000	 ldrb        r2, [r1]
  00004	e5d13001	 ldrb        r3, [r1, #1]
  00008	e1823403	 orr         r3, r2, r3, lsl #8
  0000c	e3530001	 cmp         r3, #1

; 181  :         return FALSE;

  00010	1a00001b	 bne         |$LN1@IsSupporte|

; 182  : 
; 183  :     if (  (lpFormat->nChannels!=1) && (lpFormat->nChannels!=2) )

  00014	e5d12002	 ldrb        r2, [r1, #2]
  00018	e5d13003	 ldrb        r3, [r1, #3]
  0001c	e1823403	 orr         r3, r2, r3, lsl #8
  00020	e3530001	 cmp         r3, #1
  00024	0a000001	 beq         |$LN4@IsSupporte|
  00028	e3530002	 cmp         r3, #2

; 184  :         return FALSE;

  0002c	1a000014	 bne         |$LN1@IsSupporte|
  00030		 |$LN4@IsSupporte|

; 185  : 
; 186  :     if (  (lpFormat->wBitsPerSample!=8) && (lpFormat->wBitsPerSample!=16) )

  00030	e5d1200e	 ldrb        r2, [r1, #0xE]
  00034	e5d1300f	 ldrb        r3, [r1, #0xF]
  00038	e1823403	 orr         r3, r2, r3, lsl #8
  0003c	e3530008	 cmp         r3, #8
  00040	0a000001	 beq         |$LN3@IsSupporte|
  00044	e3530010	 cmp         r3, #0x10

; 187  :         return FALSE;

  00048	1a00000d	 bne         |$LN1@IsSupporte|
  0004c		 |$LN3@IsSupporte|

; 188  : 
; 189  :     if (lpFormat->nSamplesPerSec < 100 ||
; 190  :         lpFormat->nSamplesPerSec > 96000)

  0004c	e5d10004	 ldrb        r0, [r1, #4]
  00050	e5d13005	 ldrb        r3, [r1, #5]
  00054	e5d12006	 ldrb        r2, [r1, #6]
  00058	e5d11007	 ldrb        r1, [r1, #7]
  0005c	e1803403	 orr         r3, r0, r3, lsl #8
  00060	e1833802	 orr         r3, r3, r2, lsl #16
  00064	e1832c01	 orr         r2, r3, r1, lsl #24
  00068	e3520064	 cmp         r2, #0x64
  0006c	3a000004	 bcc         |$LN1@IsSupporte|
  00070	e3a03b5d	 mov         r3, #0x5D, 22
  00074	e3833c03	 orr         r3, r3, #3, 24
  00078	e1520003	 cmp         r2, r3

; 192  : 
; 193  :     return TRUE;

  0007c	93a00001	 movls       r0, #1

; 194  : }

  00080	912fff1e	 bxls        lr
  00084		 |$LN1@IsSupporte|

; 191  :         return FALSE;

  00084	e3a00000	 mov         r0, #0

; 194  : }

  00088	e12fff1e	 bx          lr
  0008c		 |$M34998|

			 ENDP  ; |?IsSupportedFormat@CStreamManager@@UAAHPAUtWAVEFORMATEX@@@Z|, CStreamManager::IsSupportedFormat

	EXPORT	|?NewStream@CStreamManager@@QAAXPAVStreamContext@@@Z| ; CStreamManager::NewStream

  00000			 AREA	 |.pdata|, PDATA
|$T35011| DCD	|$LN8@NewStream|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NewStream@CStreamManager@@QAAXPAVStreamContext@@@Z| PROC ; CStreamManager::NewStream

; 207  : {

  00000		 |$LN8@NewStream|
  00000		 |$M35008|

; 208  : #pragma warning(push)
; 209  : #pragma warning (disable:4127)
; 210  :     InsertTailList(&m_StreamList,&pStreamContext->m_Link);

  00000	e2800004	 add         r0, r0, #4
  00004	e5903004	 ldr         r3, [r0, #4]
  00008	e2812004	 add         r2, r1, #4
  0000c	e5810004	 str         r0, [r1, #4]
  00010	e5813008	 str         r3, [r1, #8]
  00014	e5832000	 str         r2, [r3]
  00018	e5802004	 str         r2, [r0, #4]

; 211  : #pragma warning(pop)
; 212  : }

  0001c	e12fff1e	 bx          lr
  00020		 |$M35009|

			 ENDP  ; |?NewStream@CStreamManager@@QAAXPAVStreamContext@@@Z|, CStreamManager::NewStream

	EXPORT	|?DeleteStream@CStreamManager@@QAAXPAVStreamContext@@@Z| ; CStreamManager::DeleteStream

  00000			 AREA	 |.pdata|, PDATA
|$T35024| DCD	|$LN12@DeleteStre|
	DCD	0x40001e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DeleteStream@CStreamManager@@QAAXPAVStreamContext@@@Z| PROC ; CStreamManager::DeleteStream

; 224  : {

  00000		 |$LN12@DeleteStre|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M35021|
  00004	e1a05000	 mov         r5, r0

; 225  : #pragma warning(push)
; 226  : #pragma warning (disable:4127)
; 227  :     RemoveEntryList(&pStreamContext->m_Link);

  00008	e5912008	 ldr         r2, [r1, #8]
  0000c	e5913004	 ldr         r3, [r1, #4]

; 228  : #pragma warning(pop)
; 229  : 
; 230  :     // check for any active streams
; 231  :     if (IsListEmpty(&m_StreamList) == TRUE)

  00010	e285e004	 add         lr, r5, #4
  00014	e5823000	 str         r3, [r2]
  00018	e5912004	 ldr         r2, [r1, #4]
  0001c	e5913008	 ldr         r3, [r1, #8]
  00020	e5823004	 str         r3, [r2, #4]
  00024	e5953004	 ldr         r3, [r5, #4]
  00028	e153000e	 cmp         r3, lr
  0002c	1a00000f	 bne         |$LN1@DeleteStre|

; 232  :         {
; 233  :         // if none request hw bridge to deactivate port
; 234  :         get_HardwareAudioBridge()->stop_AudioPort(
; 235  :             (CHardwareAudioBridge::StreamType)pStreamContext->GetStreamDirection());

  00030	e5913000	 ldr         r3, [r1]
  00034	e1a00001	 mov         r0, r1
  00038	e5933004	 ldr         r3, [r3, #4]
  0003c	e1a0e00f	 mov         lr, pc
  00040	e12fff13	 bx          r3
  00044	e5953000	 ldr         r3, [r5]
  00048	e1a04000	 mov         r4, r0
  0004c	e1a00005	 mov         r0, r5
  00050	e5933014	 ldr         r3, [r3, #0x14]
  00054	e1a0e00f	 mov         lr, pc
  00058	e12fff13	 bx          r3
  0005c	e5903000	 ldr         r3, [r0]
  00060	e1a01004	 mov         r1, r4
  00064	e593300c	 ldr         r3, [r3, #0xC]
  00068	e1a0e00f	 mov         lr, pc
  0006c	e12fff13	 bx          r3
  00070		 |$LN1@DeleteStre|

; 236  : }
; 237  : }

  00070	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M35022|

			 ENDP  ; |?DeleteStream@CStreamManager@@QAAXPAVStreamContext@@@Z|, CStreamManager::DeleteStream

	EXPORT	|?update_Streams@CStreamManager@@UAAHXZ| ; CStreamManager::update_Streams

  00000			 AREA	 |.pdata|, PDATA
|$T35039| DCD	|$LN11@update_Str|
	DCD	0x40001e02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?update_Streams@CStreamManager@@UAAHXZ| PROC ; CStreamManager::update_Streams

; 248  : {

  00000		 |$LN11@update_Str|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M35036|
  00008	e1a05000	 mov         r5, r0

; 249  :     // causes all streams to update itself with the new information
; 250  :     //
; 251  :     DWORD dwRate;
; 252  :     PLIST_ENTRY pListEntry;
; 253  :     StreamContext *pStreamContext;
; 254  : 
; 255  :     for (pListEntry = m_StreamList.Flink; pListEntry != &m_StreamList;

  0000c	e5b56004	 ldr         r6, [r5, #4]!
  00010	ea000012	 b           |$LN8@update_Str|
  00014		 |$LL3@update_Str|

; 256  :         pListEntry = pListEntry->Flink)
; 257  :         {
; 258  :         pStreamContext = CONTAINING_RECORD(pListEntry,StreamContext,m_Link);

  00014	e2464004	 sub         r4, r6, #4

; 259  : 
; 260  :         // calling GetRate/SetRate cause the stream context to recalculate
; 261  :         // the upsample/downsampling rate
; 262  :         //
; 263  :         pStreamContext->GetRate(&dwRate);

  00018	e5943000	 ldr         r3, [r4]
  0001c	e28d1000	 add         r1, sp, #0
  00020	e1a00004	 mov         r0, r4
  00024	e5933034	 ldr         r3, [r3, #0x34]
  00028	e1a0e00f	 mov         lr, pc
  0002c	e12fff13	 bx          r3

; 264  :         pStreamContext->SetRate(dwRate);

  00030	e5943000	 ldr         r3, [r4]
  00034	e59d1000	 ldr         r1, [sp]
  00038	e1a00004	 mov         r0, r4
  0003c	e5933038	 ldr         r3, [r3, #0x38]
  00040	e1a0e00f	 mov         lr, pc
  00044	e12fff13	 bx          r3

; 265  : 
; 266  :         // update audio gains
; 267  :         //
; 268  :         pStreamContext->GainChange();

  00048	e5943000	 ldr         r3, [r4]
  0004c	e1a00004	 mov         r0, r4
  00050	e5933040	 ldr         r3, [r3, #0x40]
  00054	e1a0e00f	 mov         lr, pc
  00058	e12fff13	 bx          r3
  0005c	e5966000	 ldr         r6, [r6]
  00060		 |$LN8@update_Str|
  00060	e1560005	 cmp         r6, r5
  00064	1affffea	 bne         |$LL3@update_Str|

; 269  :         }
; 270  : 
; 271  :     return TRUE;

  00068	e3a00001	 mov         r0, #1

; 272  : }

  0006c	e28dd004	 add         sp, sp, #4
  00070	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M35037|

			 ENDP  ; |?update_Streams@CStreamManager@@UAAHXZ|, CStreamManager::update_Streams

	EXPORT	|?copy_StreamData@CStreamManager@@UAAKPAX0K@Z| ; CStreamManager::copy_StreamData

  00000			 AREA	 |.pdata|, PDATA
|$T35059| DCD	|$LN13@copy_Strea|
	DCD	0x40001d02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?copy_StreamData@CStreamManager@@UAAKPAX0K@Z| PROC ; CStreamManager::copy_StreamData

; 283  : {

  00000		 |$LN13@copy_Strea|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M35056|
  00008	e1a07003	 mov         r7, r3
  0000c	e1a06002	 mov         r6, r2

; 284  :     PBYTE pBuffer;
; 285  :     PBYTE pBufferEnd;
; 286  :     PBYTE pBufferLast;
; 287  :     DWORD nNumStreams = 0;
; 288  :     PLIST_ENTRY pListEntry;
; 289  :     StreamContext *pStreamContext;
; 290  : 
; 291  :     // get stream context
; 292  :     for (pListEntry = m_StreamList.Flink; pListEntry != &m_StreamList;

  00010	e5b0e004	 ldr         lr, [r0, #4]!
  00014	e3a04000	 mov         r4, #0
  00018	ea000003	 b           |$LN10@copy_Strea|
  0001c		 |$LL4@copy_Strea|

; 293  :         pListEntry = pListEntry->Flink)
; 294  :         {
; 295  :         pStreamContext = CONTAINING_RECORD(pListEntry,StreamContext,m_Link);

  0001c	e24e5004	 sub         r5, lr, #4

; 296  :         if ((HANDLE)pStreamContext == hContext)

  00020	e1550001	 cmp         r5, r1
  00024	0a000003	 beq         |$LN8@copy_Strea|
  00028	e59ee000	 ldr         lr, [lr]
  0002c		 |$LN10@copy_Strea|
  0002c	e15e0000	 cmp         lr, r0
  00030	1afffff9	 bne         |$LL4@copy_Strea|
  00034	ea00000a	 b           |$LN2@copy_Strea|
  00038		 |$LN8@copy_Strea|

; 297  :             {
; 298  :             pBuffer = (PBYTE)pStart;
; 299  :             pBufferEnd = pBuffer + nSize;
; 300  :             pBufferLast = pBuffer;
; 301  :             pStreamContext->Render(pBuffer, pBufferEnd, pBufferLast, FALSE);

  00038	e5952000	 ldr         r2, [r5]
  0003c	e3a08000	 mov         r8, #0
  00040	e1a03006	 mov         r3, r6
  00044	e5924020	 ldr         r4, [r2, #0x20]
  00048	e0862007	 add         r2, r6, r7
  0004c	e1a01006	 mov         r1, r6
  00050	e1a00005	 mov         r0, r5
  00054	e58d8000	 str         r8, [sp]
  00058	e1a0e00f	 mov         lr, pc
  0005c	e12fff14	 bx          r4

; 302  :             nNumStreams = 1;

  00060	e3a04001	 mov         r4, #1
  00064		 |$LN2@copy_Strea|

; 303  :             break;
; 304  :             }
; 305  :         }
; 306  : 
; 307  :     return nNumStreams;
; 308  : }

  00064	e1a00004	 mov         r0, r4
  00068	e28dd004	 add         sp, sp, #4
  0006c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$M35057|

			 ENDP  ; |?copy_StreamData@CStreamManager@@UAAKPAX0K@Z|, CStreamManager::copy_StreamData

	EXPORT	|?TransferBuffer@CStreamManager@@QAAPAEPAE0PAK@Z| ; CStreamManager::TransferBuffer
	IMPORT	|?Release@StreamContext@@QAAJXZ|	; StreamContext::Release
	IMPORT	|?AddRef@StreamContext@@QAAJXZ|		; StreamContext::AddRef
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T35079| DCD	|$LN11@TransferBu|
	DCD	0x40003102
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?TransferBuffer@CStreamManager@@QAAPAEPAE0PAK@Z| PROC ; CStreamManager::TransferBuffer

; 342  : {

  00000		 |$LN11@TransferBu|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M35076|
  00008	e1a09003	 mov         r9, r3
  0000c	e1a03001	 mov         r3, r1
  00010	e58d3004	 str         r3, [sp, #4]
  00014	e58d9008	 str         r9, [sp, #8]
  00018	e1a0b002	 mov         r11, r2
  0001c	e1a08000	 mov         r8, r0

; 343  :     PLIST_ENTRY pListEntry;
; 344  :     StreamContext *pStreamContext;
; 345  :     PBYTE pBufferLastThis;
; 346  :     PBYTE pBufferLast=pBuffer;
; 347  :     DWORD NumStreams=0;
; 348  : 
; 349  : 
; 350  :     pListEntry = m_StreamList.Flink;

  00020	e5b8a004	 ldr         r10, [r8, #4]!
  00024	e1a06003	 mov         r6, r3
  00028	e3a07000	 mov         r7, #0

; 351  :     while (pListEntry != &m_StreamList)

  0002c	e15a0008	 cmp         r10, r8
  00030	0a000019	 beq         |$LN4@TransferBu|

; 366  :         if (pBufferLastThis>pBuffer)

  00034	e1a09001	 mov         r9, r1
  00038		 |$LL5@TransferBu|

; 352  :     {
; 353  :         // Get a pointer to the stream context
; 354  :         pStreamContext = CONTAINING_RECORD(pListEntry,StreamContext,m_Link);

  00038	e24a5004	 sub         r5, r10, #4

; 355  : 
; 356  :         // Note: The stream context may be closed and removed from the list inside
; 357  :         // of Render, and the context may be freed as soon as we call Release.
; 358  :         // Therefore we need to grab the next Flink first in case the
; 359  :         // entry disappears out from under us.
; 360  :         pListEntry = pListEntry->Flink;
; 361  : 
; 362  :         // Render buffers
; 363  :         pStreamContext->AddRef();

  0003c	e59aa000	 ldr         r10, [r10]
  00040	e1a00005	 mov         r0, r5
  00044	eb000000	 bl          |?AddRef@StreamContext@@QAAJXZ|

; 364  :         pBufferLastThis = pStreamContext->Render(pBuffer, pBufferEnd, pBufferLast, TRUE);

  00048	e595e000	 ldr         lr, [r5]
  0004c	e1a01009	 mov         r1, r9
  00050	e3a09001	 mov         r9, #1
  00054	e59e4020	 ldr         r4, [lr, #0x20]
  00058	e1a03006	 mov         r3, r6
  0005c	e1a0200b	 mov         r2, r11
  00060	e1a00005	 mov         r0, r5
  00064	e58d9000	 str         r9, [sp]
  00068	e1a0e00f	 mov         lr, pc
  0006c	e12fff14	 bx          r4
  00070	e1a04000	 mov         r4, r0

; 365  :         pStreamContext->Release();

  00074	e1a00005	 mov         r0, r5
  00078	eb000000	 bl          |?Release@StreamContext@@QAAJXZ|

; 366  :         if (pBufferLastThis>pBuffer)

  0007c	e59d9004	 ldr         r9, [sp, #4]
  00080	e1540009	 cmp         r4, r9

; 367  :         {
; 368  :             NumStreams++;

  00084	82877001	 addhi       r7, r7, #1

; 369  :         }
; 370  :         if (pBufferLast < pBufferLastThis)

  00088	e1560004	 cmp         r6, r4

; 371  :         {
; 372  :             pBufferLast = pBufferLastThis;

  0008c	31a06004	 movcc       r6, r4
  00090	e15a0008	 cmp         r10, r8
  00094	1affffe7	 bne         |$LL5@TransferBu|

; 342  : {

  00098	e59d9008	 ldr         r9, [sp, #8]
  0009c		 |$LN4@TransferBu|

; 373  :         }
; 374  :     }
; 375  : 
; 376  :     // clear any residual audio
; 377  :     //
; 378  :     memset(pBufferLast, 0, pBufferEnd - pBufferLast);

  0009c	e04b2006	 sub         r2, r11, r6
  000a0	e3a01000	 mov         r1, #0
  000a4	e1a00006	 mov         r0, r6
  000a8	eb000000	 bl          memset

; 379  : 
; 380  :     if (pNumStreams)

  000ac	e3590000	 cmp         r9, #0

; 381  :     {
; 382  :         *pNumStreams=NumStreams;

  000b0	15897000	 strne       r7, [r9]

; 383  :     }
; 384  :     return pBufferLast;
; 385  : }

  000b4	e1a00006	 mov         r0, r6
  000b8	e28dd00c	 add         sp, sp, #0xC
  000bc	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000c0	e12fff1e	 bx          lr
  000c4		 |$M35077|

			 ENDP  ; |?TransferBuffer@CStreamManager@@QAAPAEPAE0PAK@Z|, CStreamManager::TransferBuffer

	EXPORT	|?open_Stream@CStreamManager@@QAAKPAUwaveopendesc_tag@@KPAPAVStreamContext@@@Z| ; CStreamManager::open_Stream

  00000			 AREA	 |.pdata|, PDATA
|$T35099| DCD	|$LN14@open_Strea|
	DCD	0x40003a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?open_Stream@CStreamManager@@QAAKPAUwaveopendesc_tag@@KPAPAVStreamContext@@@Z| PROC ; CStreamManager::open_Stream

; 398  : {

  00000		 |$LN14@open_Strea|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M35096|
  00004	e1a0a003	 mov         r10, r3
  00008	e1a08002	 mov         r8, r2
  0000c	e1a09001	 mov         r9, r1
  00010	e1a07000	 mov         r7, r0

; 399  :     HRESULT Result;
; 400  :     StreamContext *pStreamContext;
; 401  : 
; 402  :     if (lpWOD->lpFormat==NULL)

  00014	e5d96004	 ldrb        r6, [r9, #4]
  00018	e5d9e005	 ldrb        lr, [r9, #5]
  0001c	e5d94006	 ldrb        r4, [r9, #6]
  00020	e5d95007	 ldrb        r5, [r9, #7]
  00024	e186e40e	 orr         lr, r6, lr, lsl #8
  00028	e18ee804	 orr         lr, lr, r4, lsl #16
  0002c	e19e1c05	 orrs        r1, lr, r5, lsl #24
  00030	1a000002	 bne         |$LN5@open_Strea|
  00034		 |$LN11@open_Strea|

; 403  :     {
; 404  :         return WAVERR_BADFORMAT;

  00034	e3a00020	 mov         r0, #0x20

; 433  : }

  00038	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN5@open_Strea|

; 405  :     }
; 406  : 
; 407  :      if (!IsSupportedFormat(lpWOD->lpFormat))

  00040	e5973000	 ldr         r3, [r7]
  00044	e1a00007	 mov         r0, r7
  00048	e593300c	 ldr         r3, [r3, #0xC]
  0004c	e1a0e00f	 mov         lr, pc
  00050	e12fff13	 bx          r3
  00054	e3500000	 cmp         r0, #0

; 408  :     {
; 409  :         return WAVERR_BADFORMAT;

  00058	0afffff5	 beq         |$LN11@open_Strea|

; 410  :     }
; 411  : 
; 412  :     // Query format support only - don't actually open device?
; 413  :     if (dwFlags & WAVE_FORMAT_QUERY)

  0005c	e3180001	 tst         r8, #1

; 414  :     {
; 415  :         return MMSYSERR_NOERROR;

  00060	1a00001d	 bne         |$LN10@open_Strea|

; 416  :     }
; 417  : 
; 418  :     pStreamContext = create_Stream(lpWOD);

  00064	e5973000	 ldr         r3, [r7]
  00068	e1a01009	 mov         r1, r9
  0006c	e1a00007	 mov         r0, r7
  00070	e5933024	 ldr         r3, [r3, #0x24]
  00074	e1a0e00f	 mov         lr, pc
  00078	e12fff13	 bx          r3
  0007c	e1b05000	 movs        r5, r0

; 419  :     if (!pStreamContext)
; 420  :     {
; 421  :         return MMSYSERR_NOMEM;

  00080	03a00007	 moveq       r0, #7

; 433  : }

  00084	08bd47f0	 ldmeqia     sp!, {r4 - r10, lr}
  00088	012fff1e	 bxeq        lr

; 422  :     }
; 423  : 
; 424  :     Result = pStreamContext->Open(this,lpWOD,dwFlags);
; 425  :     if (FAILED(Result))

  0008c	e5951000	 ldr         r1, [r5]
  00090	e1a03008	 mov         r3, r8
  00094	e1a02009	 mov         r2, r9
  00098	e5914008	 ldr         r4, [r1, #8]
  0009c	e1a01007	 mov         r1, r7
  000a0	e1a00005	 mov         r0, r5
  000a4	e1a0e00f	 mov         lr, pc
  000a8	e12fff14	 bx          r4
  000ac	e3500000	 cmp         r0, #0
  000b0	5a000008	 bpl         |$LN1@open_Strea|

; 426  :     {
; 427  :         delete pStreamContext;

  000b4	e5953000	 ldr         r3, [r5]
  000b8	e3a01001	 mov         r1, #1
  000bc	e1a00005	 mov         r0, r5
  000c0	e5933000	 ldr         r3, [r3]
  000c4	e1a0e00f	 mov         lr, pc
  000c8	e12fff13	 bx          r3

; 428  :         return MMSYSERR_ERROR;

  000cc	e3a00001	 mov         r0, #1

; 433  : }

  000d0	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000d4	e12fff1e	 bx          lr
  000d8		 |$LN1@open_Strea|

; 429  :     }
; 430  : 
; 431  :     *ppStreamContext=pStreamContext;

  000d8	e58a5000	 str         r5, [r10]
  000dc		 |$LN10@open_Strea|

; 432  :     return MMSYSERR_NOERROR;

  000dc	e3a00000	 mov         r0, #0

; 433  : }

  000e0	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000e4	e12fff1e	 bx          lr
  000e8		 |$M35097|

			 ENDP  ; |?open_Stream@CStreamManager@@QAAKPAUwaveopendesc_tag@@KPAPAVStreamContext@@@Z|, CStreamManager::open_Stream

	EXPORT	|?GetProperty@CStreamManager@@UAAKPAUtag_WAVEPROPINFO@@@Z| ; CStreamManager::GetProperty

  00000			 AREA	 |.pdata|, PDATA
|$T35108| DCD	|$LN5@GetPropert|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetProperty@CStreamManager@@UAAKPAUtag_WAVEPROPINFO@@@Z| PROC ; CStreamManager::GetProperty

; 443  : {

  00000		 |$LN5@GetPropert|
  00000		 |$M35105|

; 444  :     UNREFERENCED_PARAMETER(pPropInfo);
; 445  :     return MMSYSERR_NOTSUPPORTED;

  00000	e3a00008	 mov         r0, #8

; 446  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M35106|

			 ENDP  ; |?GetProperty@CStreamManager@@UAAKPAUtag_WAVEPROPINFO@@@Z|, CStreamManager::GetProperty

	EXPORT	|?SetProperty@CStreamManager@@UAAKPAUtag_WAVEPROPINFO@@@Z| ; CStreamManager::SetProperty

  00000			 AREA	 |.pdata|, PDATA
|$T35117| DCD	|$LN5@SetPropert|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetProperty@CStreamManager@@UAAKPAUtag_WAVEPROPINFO@@@Z| PROC ; CStreamManager::SetProperty

; 456  : {

  00000		 |$LN5@SetPropert|
  00000		 |$M35114|

; 457  :     DWORD mmRet = MMSYSERR_NOTSUPPORTED;
; 458  :     UNREFERENCED_PARAMETER(pPropInfo);
; 459  : 
; 460  : #if (_WINCEOSVER==700)
; 461  : 
; 462  :     // Stream class.
; 463  :     if (IsEqualGUID(MM_PROPSET_STREAMCLASS, *pPropInfo->pPropSetId))
; 464  :     {
; 465  :         switch (pPropInfo->ulPropId)
; 466  :         {
; 467  :         case MM_PROP_STREAMCLASS_CONFIG:
; 468  :             {
; 469  :                 if ((NULL == pPropInfo->pvPropData) ||
; 470  :                     (pPropInfo->cbPropData < sizeof(STREAMCLASSCONFIG)))
; 471  :                 {
; 472  :                     mmRet = MMSYSERR_INVALPARAM;
; 473  :                     goto Exit;
; 474  :                 }
; 475  : 
; 476  :                 PSTREAMCLASSCONFIG pStreamClassConfigTable;
; 477  :                 pStreamClassConfigTable = (PSTREAMCLASSCONFIG) pPropInfo->pvPropData;
; 478  :                 DWORD cEntries = pPropInfo->cbPropData / sizeof(pStreamClassConfigTable[0]);
; 479  : 
; 480  :                 // Set stream class config.
; 481  :                 if (m_StreamClassTable.Reinitialize(
; 482  :                         pStreamClassConfigTable,
; 483  :                         cEntries))
; 484  :                 {
; 485  :                     mmRet = MMSYSERR_NOERROR;
; 486  :                 }
; 487  :                 else
; 488  :                 {
; 489  :                     mmRet = MMSYSERR_INVALPARAM;
; 490  :                 }
; 491  :             }
; 492  :             break;
; 493  : 
; 494  :         case MM_PROP_STREAMCLASS_CLASSGAIN:
; 495  :             {
; 496  :                 if ((NULL == pPropInfo->pvPropParams) ||
; 497  :                     (pPropInfo->cbPropParams != sizeof(DWORD)) ||
; 498  :                     (NULL == pPropInfo->pvPropData) ||
; 499  :                     (pPropInfo->cbPropData != sizeof(DWORD)))
; 500  :                 {
; 501  :                     mmRet = MMSYSERR_INVALPARAM;
; 502  :                     goto Exit;
; 503  :                 }
; 504  : 
; 505  :                 DWORD dwClassId = *((PDWORD) pPropInfo->pvPropParams);
; 506  :                 DWORD dwClassGain = *((PDWORD) pPropInfo->pvPropData);
; 507  : 
; 508  :                 // Set class gain.
; 509  :                 mmRet = SetClassGain(dwClassId, dwClassGain);
; 510  :             }
; 511  :             break;
; 512  : 
; 513  :         default:
; 514  :             break;
; 515  :         }
; 516  :     }
; 517  : 
; 518  : Exit:
; 519  : 
; 520  : #endif
; 521  : 
; 522  :     return mmRet;

  00000	e3a00008	 mov         r0, #8

; 523  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M35115|

			 ENDP  ; |?SetProperty@CStreamManager@@UAAKPAUtag_WAVEPROPINFO@@@Z|, CStreamManager::SetProperty

	EXPORT	|?CommonGetProperty@CStreamManager@@IAAKPAUtag_WAVEPROPINFO@@H@Z| ; CStreamManager::CommonGetProperty
	IMPORT	|?GetOutputDeviceDescriptor@CStreamManager@@IAAKPAU_DTP_DEVICE_DESCRIPTOR@@@Z| ; CStreamManager::GetOutputDeviceDescriptor
	IMPORT	|?GetInputDeviceDescriptor@CStreamManager@@IAAKPAU_DTP_DEVICE_DESCRIPTOR@@@Z| ; CStreamManager::GetInputDeviceDescriptor
	IMPORT	|?GetOutputEndpointDescriptor@CStreamManager@@IAAKKPAU_DTP_ENDPOINT_DESCRIPTOR@@@Z| ; CStreamManager::GetOutputEndpointDescriptor
	IMPORT	|?GetInputEndpointDescriptor@CStreamManager@@IAAKKPAU_DTP_ENDPOINT_DESCRIPTOR@@@Z| ; CStreamManager::GetInputEndpointDescriptor
	IMPORT	|MM_PROPSET_DEVTOPOLOGY|
; File c:\wince600\public\common\sdk\inc\objbase.h

  00000			 AREA	 |.pdata|, PDATA
|$T35145| DCD	|$LN30@CommonGetP|
	DCD	0x40007801
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\strmmgr.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CommonGetProperty@CStreamManager@@IAAKPAUtag_WAVEPROPINFO@@H@Z| PROC ; CStreamManager::CommonGetProperty

; 533  : {

  00000		 |$LN30@CommonGetP|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M35142|
  00004	e1a09002	 mov         r9, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a08000	 mov         r8, r0

; 534  :     DWORD mmRet = MMSYSERR_NOTSUPPORTED;
; 535  : 
; 536  :     // Device topology
; 537  :     if (IsEqualGUID(MM_PROPSET_DEVTOPOLOGY, *pPropInfo->pPropSetId))

  00010	e5d64000	 ldrb        r4, [r6]
  00014	e5d63001	 ldrb        r3, [r6, #1]
  00018	e5d6e002	 ldrb        lr, [r6, #2]
  0001c	e5d65003	 ldrb        r5, [r6, #3]
  00020	e1843403	 orr         r3, r4, r3, lsl #8
  00024	e59f01b0	 ldr         r0, [pc, #0x1B0]
  00028	e183380e	 orr         r3, r3, lr, lsl #16
  0002c	e1831c05	 orr         r1, r3, r5, lsl #24
  00030	e3a02010	 mov         r2, #0x10
  00034	e3a07008	 mov         r7, #8
  00038	eb000000	 bl          memcmp
  0003c	e3500000	 cmp         r0, #0
  00040	1a000062	 bne         |$Error$34589|

; 538  :     {
; 539  :         switch (pPropInfo->ulPropId)

  00044	e5d65004	 ldrb        r5, [r6, #4]
  00048	e5d63005	 ldrb        r3, [r6, #5]
  0004c	e5d6e006	 ldrb        lr, [r6, #6]
  00050	e5d64007	 ldrb        r4, [r6, #7]
  00054	e1853403	 orr         r3, r5, r3, lsl #8
  00058	e183380e	 orr         r3, r3, lr, lsl #16
  0005c	e1833c04	 orr         r3, r3, r4, lsl #24
  00060	e3530001	 cmp         r3, #1
  00064	0a000034	 beq         |$LN14@CommonGetP|
  00068	e3530002	 cmp         r3, #2
  0006c	1a000057	 bne         |$Error$34589|

; 569  : 
; 570  :         case MM_PROP_DEVTOPOLOGY_ENDPOINT_DESCRIPTOR:
; 571  :             {
; 572  :                 if ((NULL == pPropInfo->pvPropParams) ||
; 573  :                     (pPropInfo->cbPropParams != sizeof(DWORD)) ||
; 574  :                     (NULL == pPropInfo->pvPropData) ||
; 575  :                     (pPropInfo->cbPropData < sizeof(DTP_ENDPOINT_DESCRIPTOR)))

  00070	e5d60008	 ldrb        r0, [r6, #8]
  00074	e5d63009	 ldrb        r3, [r6, #9]
  00078	e5d6200a	 ldrb        r2, [r6, #0xA]
  0007c	e5d6100b	 ldrb        r1, [r6, #0xB]
  00080	e1803403	 orr         r3, r0, r3, lsl #8
  00084	e1833802	 orr         r3, r3, r2, lsl #16
  00088	e1934c01	 orrs        r4, r3, r1, lsl #24
  0008c	0a00004e	 beq         |$LN12@CommonGetP|
  00090	e5d6000c	 ldrb        r0, [r6, #0xC]
  00094	e5d6300d	 ldrb        r3, [r6, #0xD]
  00098	e5d6200e	 ldrb        r2, [r6, #0xE]
  0009c	e5d6100f	 ldrb        r1, [r6, #0xF]
  000a0	e1803403	 orr         r3, r0, r3, lsl #8
  000a4	e1833802	 orr         r3, r3, r2, lsl #16
  000a8	e1833c01	 orr         r3, r3, r1, lsl #24
  000ac	e3530004	 cmp         r3, #4
  000b0	1a000045	 bne         |$LN12@CommonGetP|
  000b4	e5d60010	 ldrb        r0, [r6, #0x10]
  000b8	e5d63011	 ldrb        r3, [r6, #0x11]
  000bc	e5d62012	 ldrb        r2, [r6, #0x12]
  000c0	e5d61013	 ldrb        r1, [r6, #0x13]
  000c4	e1803403	 orr         r3, r0, r3, lsl #8
  000c8	e1833802	 orr         r3, r3, r2, lsl #16
  000cc	e1932c01	 orrs        r2, r3, r1, lsl #24
  000d0	0a00003d	 beq         |$LN12@CommonGetP|
  000d4	e5d6e014	 ldrb        lr, [r6, #0x14]
  000d8	e5d63015	 ldrb        r3, [r6, #0x15]
  000dc	e5d61016	 ldrb        r1, [r6, #0x16]
  000e0	e5d60017	 ldrb        r0, [r6, #0x17]
  000e4	e18e3403	 orr         r3, lr, r3, lsl #8
  000e8	e1833801	 orr         r3, r3, r1, lsl #16
  000ec	e1833c00	 orr         r3, r3, r0, lsl #24
  000f0	e353001c	 cmp         r3, #0x1C
  000f4	3a000034	 bcc         |$LN12@CommonGetP|

; 576  :                 {
; 577  :                     mmRet = MMSYSERR_INVALPARAM;
; 578  :                     goto Error;
; 579  :                 }
; 580  : 
; 581  :                 DWORD dwIndex = *((PDWORD) pPropInfo->pvPropParams);

  000f8	e5941000	 ldr         r1, [r4]

; 582  :                 PDTP_ENDPOINT_DESCRIPTOR pEndpointDescriptor;
; 583  :                 pEndpointDescriptor = (PDTP_ENDPOINT_DESCRIPTOR) pPropInfo->pvPropData;
; 584  : 
; 585  :                 // Get the endpoint descriptor.
; 586  :                 if (fInput)

  000fc	e3590000	 cmp         r9, #0

; 587  :                 {
; 588  :                     mmRet = GetInputEndpointDescriptor(
; 589  :                                 dwIndex,
; 590  :                                 pEndpointDescriptor);

  00100	e1a00008	 mov         r0, r8
  00104	0a000001	 beq         |$LN4@CommonGetP|
  00108	eb000000	 bl          |?GetInputEndpointDescriptor@CStreamManager@@IAAKKPAU_DTP_ENDPOINT_DESCRIPTOR@@@Z|

; 591  :                 }
; 592  :                 else

  0010c	ea000000	 b           |$LN25@CommonGetP|
  00110		 |$LN4@CommonGetP|

; 593  :                 {
; 594  :                     mmRet = GetOutputEndpointDescriptor(
; 595  :                                 dwIndex,
; 596  :                                 pEndpointDescriptor);

  00110	eb000000	 bl          |?GetOutputEndpointDescriptor@CStreamManager@@IAAKKPAU_DTP_ENDPOINT_DESCRIPTOR@@@Z|
  00114		 |$LN25@CommonGetP|
  00114	e1a07000	 mov         r7, r0

; 597  :                 }
; 598  : 
; 599  :                 if (MMSYSERR_NOERROR == mmRet)

  00118	e3570000	 cmp         r7, #0
  0011c	1a00002b	 bne         |$Error$34589|

; 600  :                 {
; 601  :                     *pPropInfo->pcbReturn = sizeof(DTP_ENDPOINT_DESCRIPTOR);

  00120	e5d60018	 ldrb        r0, [r6, #0x18]
  00124	e5d63019	 ldrb        r3, [r6, #0x19]
  00128	e5d6201a	 ldrb        r2, [r6, #0x1A]
  0012c	e1803403	 orr         r3, r0, r3, lsl #8
  00130	e1833802	 orr         r3, r3, r2, lsl #16
  00134	e3a0201c	 mov         r2, #0x1C
  00138	ea00001f	 b           |$LN26@CommonGetP|
  0013c		 |$LN14@CommonGetP|

; 540  :         {
; 541  :         case MM_PROP_DEVTOPOLOGY_DEVICE_DESCRIPTOR:
; 542  :             {
; 543  :                 if ((NULL == pPropInfo->pvPropData) ||
; 544  :                     (pPropInfo->cbPropData < sizeof(DTP_DEVICE_DESCRIPTOR)))

  0013c	e5d60010	 ldrb        r0, [r6, #0x10]
  00140	e5d63011	 ldrb        r3, [r6, #0x11]
  00144	e5d62012	 ldrb        r2, [r6, #0x12]
  00148	e5d61013	 ldrb        r1, [r6, #0x13]
  0014c	e1803403	 orr         r3, r0, r3, lsl #8
  00150	e1833802	 orr         r3, r3, r2, lsl #16
  00154	e1931c01	 orrs        r1, r3, r1, lsl #24
  00158	0a00001b	 beq         |$LN12@CommonGetP|
  0015c	e5d6e014	 ldrb        lr, [r6, #0x14]
  00160	e5d63015	 ldrb        r3, [r6, #0x15]
  00164	e5d62016	 ldrb        r2, [r6, #0x16]
  00168	e5d60017	 ldrb        r0, [r6, #0x17]
  0016c	e18e3403	 orr         r3, lr, r3, lsl #8
  00170	e1833802	 orr         r3, r3, r2, lsl #16
  00174	e1833c00	 orr         r3, r3, r0, lsl #24
  00178	e3530014	 cmp         r3, #0x14
  0017c	3a000012	 bcc         |$LN12@CommonGetP|

; 547  :                     break;
; 548  :                 }
; 549  : 
; 550  :                 PDTP_DEVICE_DESCRIPTOR pDeviceDescriptor;
; 551  :                 pDeviceDescriptor = (PDTP_DEVICE_DESCRIPTOR) pPropInfo->pvPropData;
; 552  : 
; 553  :                 // Get the device descriptor.
; 554  :                 if (fInput)

  00180	e3590000	 cmp         r9, #0

; 555  :                 {
; 556  :                     mmRet = GetInputDeviceDescriptor(pDeviceDescriptor);

  00184	e1a00008	 mov         r0, r8
  00188	0a000001	 beq         |$LN11@CommonGetP|
  0018c	eb000000	 bl          |?GetInputDeviceDescriptor@CStreamManager@@IAAKPAU_DTP_DEVICE_DESCRIPTOR@@@Z|

; 557  :                 }
; 558  :                 else

  00190	ea000000	 b           |$LN27@CommonGetP|
  00194		 |$LN11@CommonGetP|

; 559  :                 {
; 560  :                     mmRet = GetOutputDeviceDescriptor(pDeviceDescriptor);

  00194	eb000000	 bl          |?GetOutputDeviceDescriptor@CStreamManager@@IAAKPAU_DTP_DEVICE_DESCRIPTOR@@@Z|
  00198		 |$LN27@CommonGetP|
  00198	e1a07000	 mov         r7, r0

; 561  :                 }
; 562  : 
; 563  :                 if (MMSYSERR_NOERROR == mmRet)

  0019c	e3570000	 cmp         r7, #0
  001a0	1a00000a	 bne         |$Error$34589|

; 564  :                 {
; 565  :                     *pPropInfo->pcbReturn = sizeof(DTP_DEVICE_DESCRIPTOR);

  001a4	e5d60018	 ldrb        r0, [r6, #0x18]
  001a8	e5d63019	 ldrb        r3, [r6, #0x19]
  001ac	e5d6201a	 ldrb        r2, [r6, #0x1A]
  001b0	e1803403	 orr         r3, r0, r3, lsl #8
  001b4	e1833802	 orr         r3, r3, r2, lsl #16
  001b8	e3a02014	 mov         r2, #0x14
  001bc		 |$LN26@CommonGetP|
  001bc	e5d6101b	 ldrb        r1, [r6, #0x1B]
  001c0	e1833c01	 orr         r3, r3, r1, lsl #24
  001c4	e5832000	 str         r2, [r3]

; 566  :                 }
; 567  :             }
; 568  :             break;

  001c8	ea000000	 b           |$Error$34589|
  001cc		 |$LN12@CommonGetP|

; 545  :                 {
; 546  :                     mmRet = MMSYSERR_INVALPARAM;

  001cc	e3a0700b	 mov         r7, #0xB
  001d0		 |$Error$34589|

; 602  :                 }
; 603  :             }
; 604  :             break;
; 605  : 
; 606  :         default:
; 607  :             break;
; 608  :         }
; 609  :     }
; 610  : 
; 611  : Error:
; 612  : 
; 613  :     return mmRet;
; 614  : }

  001d0	e1a00007	 mov         r0, r7
  001d4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  001d8	e12fff1e	 bx          lr
  001dc		 |$LN31@CommonGetP|
  001dc		 |$LN32@CommonGetP|
  001dc	00000000	 DCD         |MM_PROPSET_DEVTOPOLOGY|
  001e0		 |$M35143|

			 ENDP  ; |?CommonGetProperty@CStreamManager@@IAAKPAUtag_WAVEPROPINFO@@H@Z|, CStreamManager::CommonGetProperty

	EXPORT	|?CommonSetProperty@CStreamManager@@IAAKPAUtag_WAVEPROPINFO@@H@Z| ; CStreamManager::CommonSetProperty
	IMPORT	|CloseHandle|
	IMPORT	|?RegisterDtpMsgQueue@DtpNotify@@QAAKPAX0@Z| ; DtpNotify::RegisterDtpMsgQueue
	IMPORT	|?UnregisterDtpMsgQueue@DtpNotify@@QAAKPAX0@Z| ; DtpNotify::UnregisterDtpMsgQueue
	IMPORT	|OpenProcess|
	IMPORT	|GetCallerVMProcessId|
	IMPORT	|MM_PROPSET_RTGCTRL|
; File c:\wince600\public\common\sdk\inc\objbase.h

  00000			 AREA	 |.pdata|, PDATA
|$T35184| DCD	|$LN41@CommonSetP|
	DCD	0x40007601
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\strmmgr.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CommonSetProperty@CStreamManager@@IAAKPAUtag_WAVEPROPINFO@@H@Z| PROC ; CStreamManager::CommonSetProperty

; 624  : {

  00000		 |$LN41@CommonSetP|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M35181|
  00004	e1a08002	 mov         r8, r2
  00008	e1a05001	 mov         r5, r1
  0000c	e1a07000	 mov         r7, r0

; 625  :     DWORD mmRet = MMSYSERR_NOTSUPPORTED;
; 626  :     HANDLE hClientProc = NULL;
; 627  : 
; 628  :     // Routing control
; 629  :     if (IsEqualGUID(MM_PROPSET_RTGCTRL, *pPropInfo->pPropSetId))

  00010	e5d54000	 ldrb        r4, [r5]
  00014	e5d53001	 ldrb        r3, [r5, #1]
  00018	e5d5e002	 ldrb        lr, [r5, #2]
  0001c	e5d59003	 ldrb        r9, [r5, #3]
  00020	e1843403	 orr         r3, r4, r3, lsl #8
  00024	e59f01a8	 ldr         r0, [pc, #0x1A8]
  00028	e183a80e	 orr         r10, r3, lr, lsl #16
  0002c	e18a1c09	 orr         r1, r10, r9, lsl #24
  00030	e3a02010	 mov         r2, #0x10
  00034	e3a04008	 mov         r4, #8
  00038	e3a06000	 mov         r6, #0
  0003c	eb000000	 bl          memcmp
  00040	e3500000	 cmp         r0, #0
  00044	0a00005e	 beq         |$LN1@CommonSetP|

; 630  :     {
; 631  : /*
; 632  :         // Not supported, cannot find definition for PRTGCTRL_ENDPOINT_ROUTING
; 633  : 
; 634  :         switch (pPropInfo->ulPropId)
; 635  :         {
; 636  :         case MM_PROP_RTGCTRL_ENDPOINT_ROUTING:
; 637  :             {
; 638  :                 if ((NULL == pPropInfo->pvPropData) ||
; 639  :                     (pPropInfo->cbPropData < sizeof(RTGCTRL_ENDPOINT_ROUTING)))
; 640  :                 {
; 641  :                     mmRet = MMSYSERR_INVALPARAM;
; 642  :                     goto Error;
; 643  :                 }
; 644  : 
; 645  :                 PRTGCTRL_ENDPOINT_ROUTING pEndpointRouting;
; 646  :                 pEndpointRouting = (PRTGCTRL_ENDPOINT_ROUTING) pPropInfo->pvPropData;
; 647  : 
; 648  :                 // Check the media type to route.
; 649  :                 switch (pEndpointRouting->MediaType)
; 650  :                 {
; 651  :                 case RTGCTRL_MEDIATYPE_SYSTEM:
; 652  :                     {
; 653  :                         // Route system audio using the selected endpoints.
; 654  :                         if (fInput)
; 655  :                         {
; 656  :                             mmRet = RouteSystemInputEndpoints(pEndpointRouting);
; 657  :                         }
; 658  :                         else
; 659  :                         {
; 660  :                             mmRet = RouteSystemOutputEndpoints(pEndpointRouting);
; 661  :                         }
; 662  :                     }
; 663  :                     break;
; 664  : 
; 665  :                 case RTGCTRL_MEDIATYPE_CELLULAR:
; 666  :                     {
; 667  :                         // Route cellular audio using the selected endpoints.
; 668  :                         if (fInput)
; 669  :                         {
; 670  :                             mmRet = RouteCellularInputEndpoints(pEndpointRouting);
; 671  :                         }
; 672  :                         else
; 673  :                         {
; 674  :                             mmRet = RouteCellularOutputEndpoints(pEndpointRouting);
; 675  :                         }
; 676  :                     }
; 677  :                     break;
; 678  : 
; 679  :                 default:
; 680  :                     break;
; 681  :                 }
; 682  :             }
; 683  :             break;
; 684  : 
; 685  :         default:
; 686  :             break;
; 687  :         }
; 688  : */
; 689  :     }
; 690  :     // Device topology
; 691  :     else if (IsEqualGUID(MM_PROPSET_DEVTOPOLOGY, *pPropInfo->pPropSetId))

  00048	e59f0180	 ldr         r0, [pc, #0x180]
  0004c	e3a02010	 mov         r2, #0x10
  00050	e18a1c09	 orr         r1, r10, r9, lsl #24
  00054	eb000000	 bl          memcmp
  00058	e3500000	 cmp         r0, #0
  0005c	1a000058	 bne         |$LN1@CommonSetP|

; 692  :     {
; 693  :         switch (pPropInfo->ulPropId)

  00060	e5d50004	 ldrb        r0, [r5, #4]
  00064	e5d53005	 ldrb        r3, [r5, #5]
  00068	e5d52006	 ldrb        r2, [r5, #6]
  0006c	e5d51007	 ldrb        r1, [r5, #7]
  00070	e1803403	 orr         r3, r0, r3, lsl #8
  00074	e1833802	 orr         r3, r3, r2, lsl #16
  00078	e1833c01	 orr         r3, r3, r1, lsl #24
  0007c	e3530003	 cmp         r3, #3
  00080	0a00002a	 beq         |$LN18@CommonSetP|
  00084	e3530004	 cmp         r3, #4
  00088	1a00004d	 bne         |$LN1@CommonSetP|

; 709  :                 if (NULL == hClientProc)
; 710  :                 {
; 711  :                     mmRet = MMSYSERR_ERROR;
; 712  :                     goto Error;
; 713  :                 }
; 714  : 
; 715  :                 // Register for device topology messages.
; 716  :                 if (fInput)
; 717  :                 {
; 718  :                     mmRet = m_InputDtpNotify.RegisterDtpMsgQueue(hMsgQueue, hClientProc);
; 719  :                 }
; 720  :                 else
; 721  :                 {
; 722  :                     mmRet = m_OutputDtpNotify.RegisterDtpMsgQueue(hMsgQueue, hClientProc);
; 723  :                 }
; 724  :             }
; 725  :             break;
; 726  : 
; 727  :         case MM_PROP_DEVTOPOLOGY_EVTMSG_UNREGISTER:
; 728  :             {
; 729  :                 if ((NULL == pPropInfo->pvPropData) ||
; 730  :                     (pPropInfo->cbPropData != sizeof(HANDLE)))

  0008c	e5d50010	 ldrb        r0, [r5, #0x10]
  00090	e5d53011	 ldrb        r3, [r5, #0x11]
  00094	e5d52012	 ldrb        r2, [r5, #0x12]
  00098	e5d51013	 ldrb        r1, [r5, #0x13]
  0009c	e1803403	 orr         r3, r0, r3, lsl #8
  000a0	e1833802	 orr         r3, r3, r2, lsl #16
  000a4	e193ec01	 orrs        lr, r3, r1, lsl #24
  000a8	0a00001e	 beq         |$LN8@CommonSetP|
  000ac	e5d50014	 ldrb        r0, [r5, #0x14]
  000b0	e5d53015	 ldrb        r3, [r5, #0x15]
  000b4	e5d52016	 ldrb        r2, [r5, #0x16]
  000b8	e5d51017	 ldrb        r1, [r5, #0x17]
  000bc	e1803403	 orr         r3, r0, r3, lsl #8
  000c0	e1833802	 orr         r3, r3, r2, lsl #16
  000c4	e1833c01	 orr         r3, r3, r1, lsl #24
  000c8	e3530004	 cmp         r3, #4
  000cc	1a000015	 bne         |$LN8@CommonSetP|

; 733  :                     goto Error;
; 734  :                 }
; 735  : 
; 736  :                 // Get client message queue handle.
; 737  :                 HANDLE hMsgQueue = *((HANDLE *) pPropInfo->pvPropData);

  000d0	e59e4000	 ldr         r4, [lr]

; 738  : 
; 739  :                 // Get client process.
; 740  :                 hClientProc = OpenProcess(PROCESS_DUP_HANDLE, FALSE, GetCallerVMProcessId());

  000d4	eb000000	 bl          GetCallerVMProcessId
  000d8	e1a02000	 mov         r2, r0
  000dc	e3a00040	 mov         r0, #0x40
  000e0	e3a01000	 mov         r1, #0
  000e4	eb000000	 bl          OpenProcess
  000e8	e1b06000	 movs        r6, r0

; 741  :                 if (NULL == hClientProc)

  000ec	1a000001	 bne         |$LN6@CommonSetP|
  000f0		 |$LN35@CommonSetP|

; 742  :                 {
; 743  :                     mmRet = MMSYSERR_ERROR;

  000f0	e3a04001	 mov         r4, #1

; 755  :                 }
; 756  :             }
; 757  :             break;
; 758  : 
; 759  :         default:
; 760  :             break;
; 761  :         }
; 762  :     }
; 763  : 
; 764  : Error:

  000f4	ea00002f	 b           |$Error$34618|
  000f8		 |$LN6@CommonSetP|

; 744  :                     goto Error;
; 745  :                 }
; 746  : 
; 747  :                 // Unregister the message queue.
; 748  :                 if (fInput)

  000f8	e3580000	 cmp         r8, #0

; 749  :                 {
; 750  :                     mmRet = m_InputDtpNotify.UnregisterDtpMsgQueue(hMsgQueue, hClientProc);

  000fc	e1a02006	 mov         r2, r6
  00100	e1a01004	 mov         r1, r4
  00104	0a000003	 beq         |$LN4@CommonSetP|
  00108	e2870064	 add         r0, r7, #0x64

; 751  :                 }
; 752  :                 else
; 753  :                 {
; 754  :                     mmRet = m_OutputDtpNotify.UnregisterDtpMsgQueue(hMsgQueue, hClientProc);

  0010c	eb000000	 bl          |?UnregisterDtpMsgQueue@DtpNotify@@QAAKPAX0@Z|
  00110	e1a04000	 mov         r4, r0
  00114	ea000027	 b           |$Error$34618|
  00118		 |$LN4@CommonSetP|
  00118	e2870044	 add         r0, r7, #0x44
  0011c	eb000000	 bl          |?UnregisterDtpMsgQueue@DtpNotify@@QAAKPAX0@Z|
  00120	e1a04000	 mov         r4, r0
  00124	ea000023	 b           |$Error$34618|
  00128		 |$LN8@CommonSetP|

; 731  :                 {
; 732  :                     mmRet = MMSYSERR_INVALPARAM;

  00128	e3a0400b	 mov         r4, #0xB

; 755  :                 }
; 756  :             }
; 757  :             break;
; 758  : 
; 759  :         default:
; 760  :             break;
; 761  :         }
; 762  :     }
; 763  : 
; 764  : Error:

  0012c	ea000024	 b           |$LN1@CommonSetP|
  00130		 |$LN18@CommonSetP|

; 694  :         {
; 695  :         case MM_PROP_DEVTOPOLOGY_EVTMSG_REGISTER:
; 696  :             {
; 697  :                 if ((NULL == pPropInfo->pvPropData) ||
; 698  :                     (pPropInfo->cbPropData != sizeof(HANDLE)))

  00130	e5d50010	 ldrb        r0, [r5, #0x10]
  00134	e5d53011	 ldrb        r3, [r5, #0x11]
  00138	e5d52012	 ldrb        r2, [r5, #0x12]
  0013c	e5d51013	 ldrb        r1, [r5, #0x13]
  00140	e1803403	 orr         r3, r0, r3, lsl #8
  00144	e1833802	 orr         r3, r3, r2, lsl #16
  00148	e193ec01	 orrs        lr, r3, r1, lsl #24
  0014c	0a000018	 beq         |$LN16@CommonSetP|
  00150	e5d50014	 ldrb        r0, [r5, #0x14]
  00154	e5d53015	 ldrb        r3, [r5, #0x15]
  00158	e5d52016	 ldrb        r2, [r5, #0x16]
  0015c	e5d51017	 ldrb        r1, [r5, #0x17]
  00160	e1803403	 orr         r3, r0, r3, lsl #8
  00164	e1833802	 orr         r3, r3, r2, lsl #16
  00168	e1833c01	 orr         r3, r3, r1, lsl #24
  0016c	e3530004	 cmp         r3, #4
  00170	1a00000f	 bne         |$LN16@CommonSetP|

; 701  :                     goto Error;
; 702  :                 }
; 703  : 
; 704  :                 // Get client message queue handle.
; 705  :                 HANDLE hMsgQueue = *((HANDLE *) pPropInfo->pvPropData);

  00174	e59e4000	 ldr         r4, [lr]

; 706  : 
; 707  :                 // Get client process.
; 708  :                 hClientProc = OpenProcess(PROCESS_DUP_HANDLE, FALSE, GetCallerVMProcessId());

  00178	eb000000	 bl          GetCallerVMProcessId
  0017c	e1a02000	 mov         r2, r0
  00180	e3a00040	 mov         r0, #0x40
  00184	e3a01000	 mov         r1, #0
  00188	eb000000	 bl          OpenProcess
  0018c	e1b06000	 movs        r6, r0

; 755  :                 }
; 756  :             }
; 757  :             break;
; 758  : 
; 759  :         default:
; 760  :             break;
; 761  :         }
; 762  :     }
; 763  : 
; 764  : Error:

  00190	0affffd6	 beq         |$LN35@CommonSetP|
  00194	e3580000	 cmp         r8, #0
  00198	12870064	 addne       r0, r7, #0x64
  0019c	02870044	 addeq       r0, r7, #0x44
  001a0	e1a02006	 mov         r2, r6
  001a4	e1a01004	 mov         r1, r4
  001a8	eb000000	 bl          |?RegisterDtpMsgQueue@DtpNotify@@QAAKPAX0@Z|
  001ac	e1a04000	 mov         r4, r0
  001b0	ea000000	 b           |$Error$34618|
  001b4		 |$LN16@CommonSetP|

; 699  :                 {
; 700  :                     mmRet = MMSYSERR_INVALPARAM;

  001b4	e3a0400b	 mov         r4, #0xB
  001b8		 |$Error$34618|

; 765  : 
; 766  :     if (hClientProc != NULL)

  001b8	e3560000	 cmp         r6, #0

; 767  :     {
; 768  :         CloseHandle(hClientProc);

  001bc	11a00006	 movne       r0, r6
  001c0	1b000000	 blne        CloseHandle
  001c4		 |$LN1@CommonSetP|

; 769  :     }
; 770  : 
; 771  :     return mmRet;
; 772  : }

  001c4	e1a00004	 mov         r0, r4
  001c8	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  001cc	e12fff1e	 bx          lr
  001d0		 |$LN42@CommonSetP|
  001d0		 |$LN43@CommonSetP|
  001d0	00000000	 DCD         |MM_PROPSET_DEVTOPOLOGY|
  001d4		 |$LN44@CommonSetP|
  001d4	00000000	 DCD         |MM_PROPSET_RTGCTRL|
  001d8		 |$M35182|

			 ENDP  ; |?CommonSetProperty@CStreamManager@@IAAKPAUtag_WAVEPROPINFO@@H@Z|, CStreamManager::CommonSetProperty

	EXPORT	|??0CStreamManager@@QAA@XZ|		; CStreamManager::CStreamManager
	EXPORT	|??_7CStreamManager@@6B@| [ DATA ]	; CStreamManager::`vftable'
	EXPORT	|?copy_AudioData@CStreamManager@@UAAKPAXK@Z| ; CStreamManager::copy_AudioData
	EXPORT	|?put_AudioSampleRate@CStreamManager@@UAAXW4AudioSampleRate_e@CStreamCallback@@@Z| ; CStreamManager::put_AudioSampleRate
	IMPORT	|?Initialize@StreamClassTable@@QAAHXZ|	; StreamClassTable::Initialize
	IMPORT	|??0DtpNotify@@QAA@XZ|			; DtpNotify::DtpNotify
	IMPORT	|??0StreamClassTable@@QAA@XZ|		; StreamClassTable::StreamClassTable

  00000			 AREA	 |.pdata|, PDATA
|$T35200| DCD	|$LN7@CStreamMan|
	DCD	0x40001e01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CStreamManager@@6B@| DCD |?copy_AudioData@CStreamManager@@UAAKPAXK@Z| ; CStreamManager::`vftable'
	DCD	|?put_AudioSampleRate@CStreamManager@@UAAXW4AudioSampleRate_e@CStreamCallback@@@Z|
	DCD	|?copy_StreamData@CStreamManager@@UAAKPAX0K@Z|
	DCD	|?IsSupportedFormat@CStreamManager@@UAAHPAUtWAVEFORMATEX@@@Z|
	DCD	|?update_Streams@CStreamManager@@UAAHXZ|
	DCD	|?get_HardwareAudioBridge@CStreamManager@@UBAPAVCHardwareAudioBridge@@XZ|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|?GetProperty@CStreamManager@@UAAKPAUtag_WAVEPROPINFO@@@Z|
	DCD	|?SetProperty@CStreamManager@@UAAKPAUtag_WAVEPROPINFO@@@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CStreamManager@@QAA@XZ| PROC	; CStreamManager::CStreamManager

; 56   : {

  00000		 |$LN7@CStreamMan|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M35197|
  00004	e1a05000	 mov         r5, r0
  00008	e59f3064	 ldr         r3, [pc, #0x64]
  0000c	e1a04005	 mov         r4, r5
  00010	e484301c	 str         r3, [r4], #0x1C
  00014	e1a00004	 mov         r0, r4
  00018	eb000000	 bl          |??0StreamClassTable@@QAA@XZ|
  0001c	e3a06000	 mov         r6, #0
  00020	e2850044	 add         r0, r5, #0x44
  00024	e5856030	 str         r6, [r5, #0x30]
  00028	eb000000	 bl          |??0DtpNotify@@QAA@XZ|
  0002c	e2850064	 add         r0, r5, #0x64
  00030	eb000000	 bl          |??0DtpNotify@@QAA@XZ|

; 57   :     InitializeListHead(&m_StreamList);

  00034	e2853004	 add         r3, r5, #4
  00038	e5853008	 str         r3, [r5, #8]
  0003c	e5853004	 str         r3, [r5, #4]

; 58   :     m_dwGain = MAX_GAIN;

  00040	e3e03000	 mvn         r3, #0

; 59   :     m_bMute  = FALSE;
; 60   :     m_bMono  = FALSE;
; 61   :     m_dwDefaultStreamGain = MAX_GAIN;
; 62   :     m_StreamClassTable.Initialize();

  00044	e1a00004	 mov         r0, r4
  00048	e585300c	 str         r3, [r5, #0xC]
  0004c	e5853018	 str         r3, [r5, #0x18]
  00050	e5856010	 str         r6, [r5, #0x10]
  00054	e5856014	 str         r6, [r5, #0x14]
  00058	eb000000	 bl          |?Initialize@StreamClassTable@@QAAHXZ|

; 63   : 
; 64   :     m_prgSampleRates = s_SampleRates;

  0005c	e59f300c	 ldr         r3, [pc, #0xC]

; 65   : 
; 66   : #ifdef PROFILE_MIXER
; 67   :     m_liPCStart.QuadPart = 0;
; 68   :     m_liPCTotal.QuadPart = 0;
; 69   :     QueryPerformanceFrequency(&m_liPCFrequency);
; 70   : #endif
; 71   : }

  00060	e1a00005	 mov         r0, r5
  00064	e585302c	 str         r3, [r5, #0x2C]
  00068	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$LN8@CStreamMan|
  00070		 |$LN9@CStreamMan|
  00070	00000000	 DCD         |s_SampleRates|
  00074		 |$LN10@CStreamMan|
  00074	00000000	 DCD         |??_7CStreamManager@@6B@|
  00078		 |$M35198|

			 ENDP  ; |??0CStreamManager@@QAA@XZ|, CStreamManager::CStreamManager

; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\strmmgr.h

  00000			 AREA	 |.pdata|, PDATA
|$T35212| DCD	|$LN5@put_AudioS|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?put_AudioSampleRate@CStreamManager@@UAAXW4AudioSampleRate_e@CStreamCallback@@@Z| PROC ; CStreamManager::put_AudioSampleRate

; 136  :     {

  00000		 |$LN5@put_AudioS|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M35209|
  00004	e1a02000	 mov         r2, r0

; 137  :         m_idxSampleRate = rate;
; 138  :         update_Streams();

  00008	e5923000	 ldr         r3, [r2]
  0000c	e5821028	 str         r1, [r2, #0x28]
  00010	e5933010	 ldr         r3, [r3, #0x10]
  00014	e1a0e00f	 mov         lr, pc
  00018	e12fff13	 bx          r3

; 139  :     }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M35210|

			 ENDP  ; |?put_AudioSampleRate@CStreamManager@@UAAXW4AudioSampleRate_e@CStreamCallback@@@Z|, CStreamManager::put_AudioSampleRate

; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\strmmgr.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T35224| DCD	|$LN5@copy_Audio|
	DCD	0x40000902
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?copy_AudioData@CStreamManager@@UAAKPAXK@Z| PROC ; CStreamManager::copy_AudioData

; 318  : {

  00000		 |$LN5@copy_Audio|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M35221|

; 319  :     // UNDONE:
; 320  :     //  Need critical section
; 321  :     //
; 322  :     BYTE* pBuffer = (BYTE*)pStart;
; 323  :     BYTE* pBufferEnd = pBuffer + nSize;
; 324  : 
; 325  :     DWORD nNumStreams;
; 326  :     pBuffer = TransferBuffer(pBuffer, pBufferEnd, &nNumStreams);

  00008	e28d3000	 add         r3, sp, #0
  0000c	e0812002	 add         r2, r1, r2
  00010	eb000000	 bl          |?TransferBuffer@CStreamManager@@QAAPAEPAE0PAK@Z|

; 327  : 
; 328  :     return nNumStreams;

  00014	e59d0000	 ldr         r0, [sp]

; 329  : }

  00018	e28dd004	 add         sp, sp, #4
  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M35222|

			 ENDP  ; |?copy_AudioData@CStreamManager@@UAAKPAXK@Z|, CStreamManager::copy_AudioData

	END
