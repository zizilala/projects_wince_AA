; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\TPS659XX_WAVE\output.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?get_CurrentSampleRate@CStreamManager@@QBAKXZ| ; CStreamManager::get_CurrentSampleRate
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\strmmgr.h

  00000			 AREA	 |.pdata|, PDATA
|$T34474| DCD	|$LN5@get_Curren|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?get_CurrentSampleRate@CStreamManager@@QBAKXZ| PROC ; CStreamManager::get_CurrentSampleRate

; 126  :     {

  00000		 |$LN5@get_Curren|
  00000		 |$M34471|

; 127  :         return m_prgSampleRates[m_idxSampleRate].SampleRate;

  00000	e5902028	 ldr         r2, [r0, #0x28]
  00004	e590302c	 ldr         r3, [r0, #0x2C]
  00008	e7930182	 ldr         r0, [r3, +r2, lsl #3]

; 128  :     }

  0000c	e12fff1e	 bx          lr
  00010		 |$M34472|

			 ENDP  ; |?get_CurrentSampleRate@CStreamManager@@QBAKXZ|, CStreamManager::get_CurrentSampleRate

	EXPORT	|?Open@OutputStreamContext@@UAAJPAVCStreamManager@@PAUwaveopendesc_tag@@K@Z| ; OutputStreamContext::Open
	IMPORT	|?Open@WaveStreamContext@@UAAJPAVCStreamManager@@PAUwaveopendesc_tag@@K@Z| ; WaveStreamContext::Open
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\output.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T34488| DCD	|$LN6@Open|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Open@OutputStreamContext@@UAAJPAVCStreamManager@@PAUwaveopendesc_tag@@K@Z| PROC ; OutputStreamContext::Open

; 40   : {

  00000		 |$LN6@Open|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M34485|
  00004	e1a04000	 mov         r4, r0

; 41   :     HRESULT Result;
; 42   : 
; 43   :     Result = WaveStreamContext::Open(pStreamManager, lpWOD, dwFlags);

  00008	eb000000	 bl          |?Open@WaveStreamContext@@UAAJPAVCStreamManager@@PAUwaveopendesc_tag@@K@Z|
  0000c	e1b05000	 movs        r5, r0

; 44   : 
; 45   :     if (Result==MMSYSERR_NOERROR)
; 46   :     {
; 47   :         // Note: Output streams should be initialized in the run state.
; 48   :         Run();

  00010	05943000	 ldreq       r3, [r4]
  00014	01a00004	 moveq       r0, r4
  00018	05933014	 ldreq       r3, [r3, #0x14]
  0001c	01a0e00f	 moveq       lr, pc
  00020	012fff13	 bxeq        r3

; 49   :     }
; 50   : 
; 51   :     return Result;
; 52   : }

  00024	e1a00005	 mov         r0, r5
  00028	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M34486|

			 ENDP  ; |?Open@OutputStreamContext@@UAAJPAVCStreamManager@@PAUwaveopendesc_tag@@K@Z|, OutputStreamContext::Open

	EXPORT	|?Reset@OutputStreamContext@@UAAKXZ|	; OutputStreamContext::Reset
	IMPORT	|?Reset@StreamContext@@UAAKXZ|		; StreamContext::Reset

  00000			 AREA	 |.pdata|, PDATA
|$T34499| DCD	|$LN6@Reset|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Reset@OutputStreamContext@@UAAKXZ| PROC ; OutputStreamContext::Reset

; 63   : {

  00000		 |$LN6@Reset|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M34496|
  00004	e1a05000	 mov         r5, r0

; 64   :     HRESULT Result;
; 65   : 
; 66   :     Result = WaveStreamContext::Reset();

  00008	eb000000	 bl          |?Reset@StreamContext@@UAAKXZ|
  0000c	e1b04000	 movs        r4, r0

; 67   : 
; 68   :     if (Result==MMSYSERR_NOERROR)
; 69   :     {
; 70   :         // Note: Output streams should be reset to the run state.
; 71   :         Run();

  00010	05953000	 ldreq       r3, [r5]
  00014	01a00005	 moveq       r0, r5
  00018	05933014	 ldreq       r3, [r3, #0x14]
  0001c	01a0e00f	 moveq       lr, pc
  00020	012fff13	 bxeq        r3

; 72   :     }
; 73   : 
; 74   :     return Result;
; 75   : };

  00024	e1a00004	 mov         r0, r4
  00028	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M34497|

			 ENDP  ; |?Reset@OutputStreamContext@@UAAKXZ|, OutputStreamContext::Reset

	EXPORT	|?GetStreamDirection@OutputStreamContext@@UAAIXZ| ; OutputStreamContext::GetStreamDirection

  00000			 AREA	 |.pdata|, PDATA
|$T34508| DCD	|$LN5@GetStreamD|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetStreamDirection@OutputStreamContext@@UAAIXZ| PROC ; OutputStreamContext::GetStreamDirection

; 79   : {

  00000		 |$LN5@GetStreamD|
  00000		 |$M34505|

; 80   :     return CHardwareAudioBridge::kOutput;

  00000	e3a00000	 mov         r0, #0

; 81   : }

  00004	e12fff1e	 bx          lr
  00008		 |$M34506|

			 ENDP  ; |?GetStreamDirection@OutputStreamContext@@UAAIXZ|, OutputStreamContext::GetStreamDirection

	EXPORT	|?SetRate@OutputStreamContext@@UAAKK@Z|	; OutputStreamContext::SetRate
	IMPORT	|__utos|
	IMPORT	|__divs|
	IMPORT	|__itos|
	IMPORT	|__subs|
	IMPORT	|__muls|
	IMPORT	|__stoi|
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\strmmgr.h

  00000			 AREA	 |.pdata|, PDATA
|$T34532| DCD	|$LN7@SetRate|
	DCD	0x40002b01
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\output.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetRate@OutputStreamContext@@UAAKK@Z| PROC ; OutputStreamContext::SetRate

; 95   : {

  00000		 |$LN7@SetRate|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M34529|
  00004	e1a06000	 mov         r6, r0

; 96   :     float delta;
; 97   :     int dec, fract;
; 98   :     float mult;
; 99   : 
; 100  :     m_dwMultiplier = dwMultiplier;
; 101  :     mult = (float)m_dwMultiplier / (float)((DWORD)0x10000);
; 102  :     delta = (float)((float)m_WaveFormat.nSamplesPerSec * mult)/(float)m_pStreamManager->get_CurrentSampleRate();

  00008	e5965050	 ldr         r5, [r6, #0x50]
  0000c	e1a00001	 mov         r0, r1
  00010	e586107c	 str         r1, [r6, #0x7C]
  00014	eb000000	 bl          __utos
  00018	e3a015de	 mov         r1, #0xDE, 10
  0001c	eb000000	 bl          __muls
  00020	e5d61028	 ldrb        r1, [r6, #0x28]
  00024	e5d63029	 ldrb        r3, [r6, #0x29]
  00028	e5d6202a	 ldrb        r2, [r6, #0x2A]
  0002c	e5d6e02b	 ldrb        lr, [r6, #0x2B]
  00030	e1813403	 orr         r3, r1, r3, lsl #8
  00034	e1833802	 orr         r3, r3, r2, lsl #16
  00038	e1a04000	 mov         r4, r0
  0003c	e1830c0e	 orr         r0, r3, lr, lsl #24
  00040	eb000000	 bl          __utos
  00044	e1a01000	 mov         r1, r0
  00048	e1a00004	 mov         r0, r4
  0004c	eb000000	 bl          __muls
  00050	e5952028	 ldr         r2, [r5, #0x28]
  00054	e595302c	 ldr         r3, [r5, #0x2C]
  00058	e1a04000	 mov         r4, r0
  0005c	e7930182	 ldr         r0, [r3, +r2, lsl #3]
  00060	eb000000	 bl          __utos
  00064	e1a01000	 mov         r1, r0
  00068	e1a00004	 mov         r0, r4
  0006c	eb000000	 bl          __divs
  00070	e1a04000	 mov         r4, r0
  00074	eb000000	 bl          __stoi
  00078	e1a05000	 mov         r5, r0

; 103  :     dec = (int)delta * (1<<15);
; 104  :     fract = (int)((delta - (float)(int)delta) * (1 << 15));
; 105  :     m_DeltaT = dec + fract;

  0007c	eb000000	 bl          __itos
  00080	e1a01000	 mov         r1, r0
  00084	e1a00004	 mov         r0, r4
  00088	eb000000	 bl          __subs
  0008c	e3a014c7	 mov         r1, #0xC7, 8
  00090	eb000000	 bl          __muls
  00094	eb000000	 bl          __stoi
  00098	e0603785	 rsb         r3, r0, r5, lsl #15
  0009c	e5863078	 str         r3, [r6, #0x78]

; 106  : 
; 107  :     return MMSYSERR_NOERROR;

  000a0	e3a00000	 mov         r0, #0

; 108  : }

  000a4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$M34530|

			 ENDP  ; |?SetRate@OutputStreamContext@@UAAKK@Z|, OutputStreamContext::SetRate

	EXPORT	|?Render2@OutputStreamContextM8@@UAAPAEPAE00H@Z| ; OutputStreamContextM8::Render2
	IMPORT	|?RenderRawData@WaveStreamContext@@QAAPAEPAE00@Z| ; WaveStreamContext::RenderRawData

  00000			 AREA	 |.pdata|, PDATA
|$T34564| DCD	|$LN20@Render2|
	DCD	0x40004802
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2@OutputStreamContextM8@@UAAPAEPAE00H@Z| PROC ; OutputStreamContextM8::Render2

; 121  : {

  00000		 |$LN20@Render2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M34561|
  00008	e1a0a003	 mov         r10, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1a0e001	 mov         lr, r1
  00014	e58d000c	 str         r0, [sp, #0xC]

; 122  :     LONG CurrT = m_CurrT;
; 123  :     LONG DeltaT = m_DeltaT;
; 124  :     LONG CurrSamp0 = m_CurrSamp[0];
; 125  :     LONG PrevSamp0 = m_PrevSamp[0];
; 126  :     PBYTE pCurrData = m_lpCurrData;
; 127  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;
; 128  :     LONG fxpGain[2];
; 129  : 
; 130  :     fxpGain[0] = m_fxpGain[0];
; 131  :     fxpGain[1] = m_fxpGain[1];
; 132  : 
; 133  :     if (bDSPRender == FALSE)

  00018	e5903078	 ldr         r3, [r0, #0x78]
  0001c	e59d1034	 ldr         r1, [sp, #0x34]
  00020	e590605c	 ldr         r6, [r0, #0x5C]
  00024	e58d3000	 str         r3, [sp]
  00028	e5903060	 ldr         r3, [r0, #0x60]
  0002c	e5904090	 ldr         r4, [r0, #0x90]
  00030	e5908088	 ldr         r8, [r0, #0x88]
  00034	e5909080	 ldr         r9, [r0, #0x80]
  00038	e5905044	 ldr         r5, [r0, #0x44]
  0003c	e590b048	 ldr         r11, [r0, #0x48]
  00040	e58d3004	 str         r3, [sp, #4]
  00044	e3510000	 cmp         r1, #0
  00048	e58d6008	 str         r6, [sp, #8]
  0004c	1a000004	 bne         |$LN11@Render2|

; 134  :         {
; 135  :         return RenderRawData(pBuffer, pBufferEnd, pBufferLast);

  00050	e1a0300a	 mov         r3, r10
  00054	e1a0100e	 mov         r1, lr
  00058	eb000000	 bl          |?RenderRawData@WaveStreamContext@@QAAPAEPAE00@Z|
  0005c	e1a0e000	 mov         lr, r0
  00060	ea00002a	 b           |$LN9@Render2|
  00064		 |$LN11@Render2|

; 136  :         }
; 137  : 
; 138  :     while (pBuffer < pBufferEnd)

  00064	e15e0007	 cmp         lr, r7
  00068	2a00001f	 bcs         |$Exit$34072|

; 122  :     LONG CurrT = m_CurrT;
; 123  :     LONG DeltaT = m_DeltaT;
; 124  :     LONG CurrSamp0 = m_CurrSamp[0];
; 125  :     LONG PrevSamp0 = m_PrevSamp[0];
; 126  :     PBYTE pCurrData = m_lpCurrData;
; 127  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;
; 128  :     LONG fxpGain[2];
; 129  : 
; 130  :     fxpGain[0] = m_fxpGain[0];
; 131  :     fxpGain[1] = m_fxpGain[1];
; 132  : 
; 133  :     if (bDSPRender == FALSE)

  0006c	e59d0000	 ldr         r0, [sp]

; 143  :             {
; 144  :                 goto Exit;
; 145  :             }
; 146  : 
; 147  :             CurrT -= DELTA_OVERFLOW;
; 148  : 
; 149  :             PrevSamp0 = CurrSamp0;
; 150  : 
; 151  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 152  :             CurrSamp0 = (LONG)pSampleSrc->m8.sample;
; 153  :             CurrSamp0 = (CurrSamp0 - 128) << 8;

  00070	ea000006	 b           |$LN17@Render2|
  00074		 |$LL5@Render2|

; 139  :     {
; 140  :         while (CurrT >= DELTA_OVERFLOW)
; 141  :         {
; 142  :             if (pCurrData>=pCurrDataEnd)

  00074	e155000b	 cmp         r5, r11
  00078	2a00001a	 bcs         |$LN16@Render2|

; 143  :             {
; 144  :                 goto Exit;
; 145  :             }
; 146  : 
; 147  :             CurrT -= DELTA_OVERFLOW;
; 148  : 
; 149  :             PrevSamp0 = CurrSamp0;
; 150  : 
; 151  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 152  :             CurrSamp0 = (LONG)pSampleSrc->m8.sample;
; 153  :             CurrSamp0 = (CurrSamp0 - 128) << 8;

  0007c	e4d53001	 ldrb        r3, [r5], #1
  00080	e1a09008	 mov         r9, r8
  00084	e2444902	 sub         r4, r4, #2, 18
  00088	e2433080	 sub         r3, r3, #0x80
  0008c	e1a08403	 mov         r8, r3, lsl #8
  00090		 |$LN17@Render2|
  00090	e3540902	 cmp         r4, #2, 18
  00094	aafffff6	 bge         |$LL5@Render2|

; 154  :             pCurrData+=1;
; 155  :         }
; 156  : 
; 157  :         LONG OutSamp0;
; 158  :         OutSamp0 = PrevSamp0 + (((CurrSamp0 - PrevSamp0) * CurrT) >> DELTAFRAC);

  00098	e0483009	 sub         r3, r8, r9
  0009c	e0020493	 mul         r2, r3, r4

; 159  :         CurrT += DeltaT;
; 160  : 
; 161  : #if (OUTCHANNELS==2)
; 162  :         LONG OutSamp1;
; 163  :         OutSamp1=OutSamp0;
; 164  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;
; 165  :         OutSamp1 = (OutSamp1 * fxpGain[1]) >> VOLSHIFT;

  000a0	e59d3004	 ldr         r3, [sp, #4]

; 166  :         if (pBuffer < pBufferLast)

  000a4	e15e000a	 cmp         lr, r10
  000a8	e08917c2	 add         r1, r9, r2, asr #15
  000ac	e0030391	 mul         r3, r1, r3
  000b0	e0020691	 mul         r2, r1, r6
  000b4	e1a01843	 mov         r1, r3, asr #16
  000b8	e1a06842	 mov         r6, r2, asr #16

; 167  :         {
; 168  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  000bc	31de30f0	 ldrccsh     r3, [lr]

; 169  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  000c0	31de20f2	 ldrccsh     r2, [lr, #2]
  000c4	e0844000	 add         r4, r4, r0
  000c8	30866003	 addcc       r6, r6, r3
  000cc	30811002	 addcc       r1, r1, r2

; 170  : #if USE_MIX_SATURATE
; 171  :             // Handle saturation
; 172  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 173  :             {
; 174  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 175  :             }
; 176  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 177  :             {
; 178  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 179  :             }
; 180  :             if (OutSamp1>AUDIO_SAMPLE_MAX)
; 181  :             {
; 182  :                 OutSamp1=AUDIO_SAMPLE_MAX;
; 183  :             }
; 184  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)
; 185  :             {
; 186  :                 OutSamp1=AUDIO_SAMPLE_MIN;
; 187  :             }
; 188  : #endif
; 189  :         }
; 190  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  000d0	e1ce60b0	 strh        r6, [lr]

; 191  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  000d4	e1ce10b2	 strh        r1, [lr, #2]

; 192  :         pBuffer += 2*sizeof(HWSAMPLE);

  000d8	e28ee004	 add         lr, lr, #4
  000dc	e59d6008	 ldr         r6, [sp, #8]
  000e0	e15e0007	 cmp         lr, r7
  000e4	3affffe9	 bcc         |$LN17@Render2|
  000e8		 |$LN16@Render2|

; 121  : {

  000e8	e59d000c	 ldr         r0, [sp, #0xC]
  000ec		 |$Exit$34072|

; 193  : #else
; 194  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;
; 195  : 
; 196  :         if (pBuffer < pBufferLast)
; 197  :         {
; 198  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];
; 199  : #if USE_MIX_SATURATE
; 200  :             // Handle saturation
; 201  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 202  :             {
; 203  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 204  :             }
; 205  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 206  :             {
; 207  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 208  :             }
; 209  : #endif
; 210  :         }
; 211  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;
; 212  :         pBuffer += sizeof(HWSAMPLE);
; 213  : #endif
; 214  :     }
; 215  : 
; 216  :     Exit:
; 217  : 
; 218  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  000ec	e590204c	 ldr         r2, [r0, #0x4C]
  000f0	e5903044	 ldr         r3, [r0, #0x44]

; 219  :     m_lpCurrData = pCurrData;

  000f4	e5805044	 str         r5, [r0, #0x44]

; 220  :     m_CurrT = CurrT;

  000f8	e5804090	 str         r4, [r0, #0x90]
  000fc	e0423003	 sub         r3, r2, r3
  00100	e0833005	 add         r3, r3, r5
  00104	e580304c	 str         r3, [r0, #0x4C]

; 221  :     m_PrevSamp[0] = PrevSamp0;

  00108	e5809080	 str         r9, [r0, #0x80]

; 222  :     m_CurrSamp[0] = CurrSamp0;

  0010c	e5808088	 str         r8, [r0, #0x88]

; 223  :     return pBuffer;

  00110		 |$LN9@Render2|

; 224  : }

  00110	e1a0000e	 mov         r0, lr
  00114	e28dd010	 add         sp, sp, #0x10
  00118	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0011c	e12fff1e	 bx          lr
  00120		 |$M34562|

			 ENDP  ; |?Render2@OutputStreamContextM8@@UAAPAEPAE00H@Z|, OutputStreamContextM8::Render2

	EXPORT	|?Render2@OutputStreamContextM16@@UAAPAEPAE00H@Z| ; OutputStreamContextM16::Render2

  00000			 AREA	 |.pdata|, PDATA
|$T34596| DCD	|$LN20@Render2@2|
	DCD	0x40004602
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2@OutputStreamContextM16@@UAAPAEPAE00H@Z| PROC ; OutputStreamContextM16::Render2

; 236  : {

  00000		 |$LN20@Render2@2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M34593|
  00008	e1a0a003	 mov         r10, r3
  0000c	e1a07002	 mov         r7, r2
  00010	e1a0e001	 mov         lr, r1
  00014	e58d000c	 str         r0, [sp, #0xC]

; 237  :     LONG CurrT = m_CurrT;
; 238  :     LONG DeltaT = m_DeltaT;
; 239  :     LONG CurrSamp0 = m_CurrSamp[0];
; 240  :     LONG PrevSamp0 = m_PrevSamp[0];
; 241  :     PBYTE pCurrData = m_lpCurrData;
; 242  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;
; 243  :     LONG fxpGain[2];
; 244  : 
; 245  :     fxpGain[0] = m_fxpGain[0];
; 246  :     fxpGain[1] = m_fxpGain[1];
; 247  :     LONG OutSamp0;
; 248  : 
; 249  :     if (bDSPRender == FALSE)

  00018	e5903078	 ldr         r3, [r0, #0x78]
  0001c	e59d1034	 ldr         r1, [sp, #0x34]
  00020	e590605c	 ldr         r6, [r0, #0x5C]
  00024	e58d3000	 str         r3, [sp]
  00028	e5903060	 ldr         r3, [r0, #0x60]
  0002c	e5904090	 ldr         r4, [r0, #0x90]
  00030	e5908088	 ldr         r8, [r0, #0x88]
  00034	e5909080	 ldr         r9, [r0, #0x80]
  00038	e5905044	 ldr         r5, [r0, #0x44]
  0003c	e590b048	 ldr         r11, [r0, #0x48]
  00040	e58d3004	 str         r3, [sp, #4]
  00044	e3510000	 cmp         r1, #0
  00048	e58d6008	 str         r6, [sp, #8]
  0004c	1a000004	 bne         |$LN11@Render2@2|

; 250  :         {
; 251  :         return RenderRawData(pBuffer, pBufferEnd, pBufferLast);

  00050	e1a0300a	 mov         r3, r10
  00054	e1a0100e	 mov         r1, lr
  00058	eb000000	 bl          |?RenderRawData@WaveStreamContext@@QAAPAEPAE00@Z|
  0005c	e1a0e000	 mov         lr, r0
  00060	ea000028	 b           |$LN9@Render2@2|
  00064		 |$LN11@Render2@2|

; 252  :         }
; 253  : 
; 254  :     while (pBuffer < pBufferEnd)

  00064	e15e0007	 cmp         lr, r7
  00068	2a00001d	 bcs         |$Exit$34110|

; 237  :     LONG CurrT = m_CurrT;
; 238  :     LONG DeltaT = m_DeltaT;
; 239  :     LONG CurrSamp0 = m_CurrSamp[0];
; 240  :     LONG PrevSamp0 = m_PrevSamp[0];
; 241  :     PBYTE pCurrData = m_lpCurrData;
; 242  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;
; 243  :     LONG fxpGain[2];
; 244  : 
; 245  :     fxpGain[0] = m_fxpGain[0];
; 246  :     fxpGain[1] = m_fxpGain[1];
; 247  :     LONG OutSamp0;
; 248  : 
; 249  :     if (bDSPRender == FALSE)

  0006c	e59d0000	 ldr         r0, [sp]

; 266  : 
; 267  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 268  :             CurrSamp0 = (LONG)pSampleSrc->m16.sample;

  00070	ea000004	 b           |$LN17@Render2@2|
  00074		 |$LL5@Render2@2|

; 255  :     {
; 256  :         while (CurrT >= DELTA_OVERFLOW)
; 257  :         {
; 258  :             if (pCurrData>=pCurrDataEnd)

  00074	e155000b	 cmp         r5, r11
  00078	2a000018	 bcs         |$LN16@Render2@2|

; 259  :             {
; 260  :                 goto Exit;
; 261  :             }
; 262  : 
; 263  :             CurrT -= DELTA_OVERFLOW;
; 264  : 
; 265  :             PrevSamp0 = CurrSamp0;

  0007c	e1a09008	 mov         r9, r8

; 266  : 
; 267  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 268  :             CurrSamp0 = (LONG)pSampleSrc->m16.sample;

  00080	e0d580f2	 ldrsh       r8, [r5], #2
  00084	e2444902	 sub         r4, r4, #2, 18
  00088		 |$LN17@Render2@2|

; 259  :             {
; 260  :                 goto Exit;
; 261  :             }
; 262  : 
; 263  :             CurrT -= DELTA_OVERFLOW;
; 264  : 
; 265  :             PrevSamp0 = CurrSamp0;

  00088	e3540902	 cmp         r4, #2, 18

; 266  : 
; 267  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 268  :             CurrSamp0 = (LONG)pSampleSrc->m16.sample;

  0008c	aafffff8	 bge         |$LL5@Render2@2|

; 269  :             pCurrData+=2;
; 270  :         }
; 271  : 
; 272  :         OutSamp0 = PrevSamp0 + (((CurrSamp0 - PrevSamp0) * CurrT) >> DELTAFRAC);

  00090	e0483009	 sub         r3, r8, r9
  00094	e0020493	 mul         r2, r3, r4

; 273  :         CurrT += DeltaT;
; 274  : 
; 275  :         DEBUGMSG(ZONE_VERBOSE, (TEXT("PrevSamp0=0x%x, CurrSamp0=0x%x, CurrT=0x%x, OutSamp0=0x%x\r\n"), PrevSamp0,CurrSamp0,CurrT,OutSamp0));
; 276  : 
; 277  : #if (OUTCHANNELS==2)
; 278  :         LONG OutSamp1;
; 279  :         OutSamp1=OutSamp0;
; 280  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;
; 281  :         OutSamp1 = (OutSamp1 * fxpGain[1]) >> VOLSHIFT;

  00098	e59d3004	 ldr         r3, [sp, #4]

; 282  :         if (pBuffer < pBufferLast)

  0009c	e15e000a	 cmp         lr, r10
  000a0	e08917c2	 add         r1, r9, r2, asr #15
  000a4	e0030391	 mul         r3, r1, r3
  000a8	e0020691	 mul         r2, r1, r6
  000ac	e1a01843	 mov         r1, r3, asr #16
  000b0	e1a06842	 mov         r6, r2, asr #16

; 283  :         {
; 284  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  000b4	31de30f0	 ldrccsh     r3, [lr]

; 285  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  000b8	31de20f2	 ldrccsh     r2, [lr, #2]
  000bc	e0844000	 add         r4, r4, r0
  000c0	30866003	 addcc       r6, r6, r3
  000c4	30811002	 addcc       r1, r1, r2

; 286  : #if USE_MIX_SATURATE
; 287  :             // Handle saturation
; 288  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 289  :             {
; 290  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 291  :             }
; 292  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 293  :             {
; 294  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 295  :             }
; 296  :             if (OutSamp1>AUDIO_SAMPLE_MAX)
; 297  :             {
; 298  :                 OutSamp1=AUDIO_SAMPLE_MAX;
; 299  :             }
; 300  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)
; 301  :             {
; 302  :                 OutSamp1=AUDIO_SAMPLE_MIN;
; 303  :             }
; 304  : #endif
; 305  :         }
; 306  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  000c8	e1ce60b0	 strh        r6, [lr]

; 307  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  000cc	e1ce10b2	 strh        r1, [lr, #2]

; 308  :         pBuffer += 2*sizeof(HWSAMPLE);

  000d0	e28ee004	 add         lr, lr, #4
  000d4	e59d6008	 ldr         r6, [sp, #8]
  000d8	e15e0007	 cmp         lr, r7
  000dc	3affffe9	 bcc         |$LN17@Render2@2|
  000e0		 |$LN16@Render2@2|

; 236  : {

  000e0	e59d000c	 ldr         r0, [sp, #0xC]
  000e4		 |$Exit$34110|

; 309  : #else
; 310  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;
; 311  :         if (pBuffer < pBufferLast)
; 312  :         {
; 313  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];
; 314  : #if USE_MIX_SATURATE
; 315  :             // Handle saturation
; 316  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 317  :             {
; 318  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 319  :             }
; 320  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 321  :             {
; 322  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 323  :             }
; 324  : #endif
; 325  :         }
; 326  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;
; 327  :         pBuffer += sizeof(HWSAMPLE);
; 328  : #endif
; 329  :     }
; 330  : 
; 331  :     Exit:
; 332  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  000e4	e590204c	 ldr         r2, [r0, #0x4C]
  000e8	e5903044	 ldr         r3, [r0, #0x44]

; 333  :     m_lpCurrData = pCurrData;

  000ec	e5805044	 str         r5, [r0, #0x44]

; 334  :     m_CurrT = CurrT;

  000f0	e5804090	 str         r4, [r0, #0x90]
  000f4	e0423003	 sub         r3, r2, r3
  000f8	e0833005	 add         r3, r3, r5
  000fc	e580304c	 str         r3, [r0, #0x4C]

; 335  :     m_PrevSamp[0] = PrevSamp0;

  00100	e5809080	 str         r9, [r0, #0x80]

; 336  :     m_CurrSamp[0] = CurrSamp0;

  00104	e5808088	 str         r8, [r0, #0x88]

; 337  :     return pBuffer;

  00108		 |$LN9@Render2@2|

; 338  : }

  00108	e1a0000e	 mov         r0, lr
  0010c	e28dd010	 add         sp, sp, #0x10
  00110	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00114	e12fff1e	 bx          lr
  00118		 |$M34594|

			 ENDP  ; |?Render2@OutputStreamContextM16@@UAAPAEPAE00H@Z|, OutputStreamContextM16::Render2

	EXPORT	|?Render2Stereo@OutputStreamContextS8@@AAAPAEPAE00H@Z| ; OutputStreamContextS8::Render2Stereo

  00000			 AREA	 |.pdata|, PDATA
|$T34628| DCD	|$LN19@Render2Ste|
	DCD	0x40005002
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2Stereo@OutputStreamContextS8@@AAAPAEPAE00H@Z| PROC ; OutputStreamContextS8::Render2Stereo

; 382  : {

  00000		 |$LN19@Render2Ste|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M34625|
  00008	e58d3004	 str         r3, [sp, #4]
  0000c	e1a0b002	 mov         r11, r2
  00010	e1a0e001	 mov         lr, r1
  00014	e58d0014	 str         r0, [sp, #0x14]

; 383  :     LONG CurrT = m_CurrT;
; 384  :     LONG DeltaT = m_DeltaT;

  00018	e5903078	 ldr         r3, [r0, #0x78]

; 385  :     LONG CurrSamp0 = m_CurrSamp[0];
; 386  :     LONG CurrSamp1 = m_CurrSamp[1];
; 387  :     LONG PrevSamp0 = m_PrevSamp[0];
; 388  :     LONG PrevSamp1 = m_PrevSamp[1];
; 389  :     PBYTE pCurrData = m_lpCurrData;
; 390  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;
; 391  :     LONG fxpGain[2];
; 392  :     LONG OutSamp0;
; 393  :     LONG OutSamp1;
; 394  : 
; 395  :     UNREFERENCED_PARAMETER(bDSPRender);
; 396  : 
; 397  :     fxpGain[0] = m_fxpGain[0];

  0001c	e590605c	 ldr         r6, [r0, #0x5C]

; 398  :     fxpGain[1] = m_fxpGain[1];

  00020	e5902060	 ldr         r2, [r0, #0x60]
  00024	e58d300c	 str         r3, [sp, #0xC]
  00028	e5903048	 ldr         r3, [r0, #0x48]
  0002c	e5905090	 ldr         r5, [r0, #0x90]
  00030	e5907088	 ldr         r7, [r0, #0x88]
  00034	e590808c	 ldr         r8, [r0, #0x8C]
  00038	e5909080	 ldr         r9, [r0, #0x80]
  0003c	e590a084	 ldr         r10, [r0, #0x84]
  00040	e5904044	 ldr         r4, [r0, #0x44]
  00044	e58d3000	 str         r3, [sp]
  00048	e58d6010	 str         r6, [sp, #0x10]
  0004c	e58d2008	 str         r2, [sp, #8]

; 399  : 
; 400  :     while (pBuffer < pBufferEnd)

  00050	e15e000b	 cmp         lr, r11
  00054	2a00002a	 bcs         |$Exit$34161|

; 457  : 
; 458  :         pBuffer += 2*sizeof(HWSAMPLE);

  00058	e59d0004	 ldr         r0, [sp, #4]

; 419  :             pCurrData+=2;

  0005c	ea00000c	 b           |$LN16@Render2Ste|
  00060		 |$LL5@Render2Ste|

; 401  :     {
; 402  :         while (CurrT >= DELTA_OVERFLOW)
; 403  :         {
; 404  :             if (pCurrData>=pCurrDataEnd)

  00060	e1540003	 cmp         r4, r3
  00064	2a000025	 bcs         |$LN15@Render2Ste|

; 405  :             {
; 406  :                 goto Exit;
; 407  :             }
; 408  : 
; 409  :             CurrT -= DELTA_OVERFLOW;
; 410  : 
; 411  :             PrevSamp0 = CurrSamp0;
; 412  :             PrevSamp1 = CurrSamp1;
; 413  : 
; 414  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 415  :             CurrSamp0 =  (LONG)pSampleSrc->s8.sample_left;
; 416  :             CurrSamp0 = (CurrSamp0 - 128) << 8;

  00068	e5d43000	 ldrb        r3, [r4]

; 417  :             CurrSamp1 = (LONG)pSampleSrc->s8.sample_right;
; 418  :             CurrSamp1 = (CurrSamp1 - 128) << 8;

  0006c	e5d42001	 ldrb        r2, [r4, #1]
  00070	e1a09007	 mov         r9, r7
  00074	e2433080	 sub         r3, r3, #0x80
  00078	e2422080	 sub         r2, r2, #0x80
  0007c	e1a07403	 mov         r7, r3, lsl #8

; 419  :             pCurrData+=2;

  00080	e59d3000	 ldr         r3, [sp]
  00084	e1a0a008	 mov         r10, r8
  00088	e2455902	 sub         r5, r5, #2, 18
  0008c	e1a08402	 mov         r8, r2, lsl #8
  00090	e2844002	 add         r4, r4, #2
  00094		 |$LN16@Render2Ste|
  00094	e3550902	 cmp         r5, #2, 18
  00098	aafffff0	 bge         |$LL5@Render2Ste|

; 420  :         }
; 421  : 
; 422  :         OutSamp0 = PrevSamp0 + (((CurrSamp0 - PrevSamp0) * CurrT) >> DELTAFRAC);

  0009c	e0473009	 sub         r3, r7, r9

; 423  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;
; 424  : 
; 425  :         OutSamp1 = PrevSamp1 + (((CurrSamp1 - PrevSamp1) * CurrT) >> DELTAFRAC);

  000a0	e0010593	 mul         r1, r3, r5
  000a4	e048200a	 sub         r2, r8, r10
  000a8	e0030592	 mul         r3, r2, r5
  000ac	e08927c1	 add         r2, r9, r1, asr #15
  000b0	e0010692	 mul         r1, r2, r6
  000b4	e08a37c3	 add         r3, r10, r3, asr #15

; 426  :         OutSamp1 = (OutSamp1 * fxpGain[1]) >> VOLSHIFT;

  000b8	e59d2008	 ldr         r2, [sp, #8]
  000bc	e0020293	 mul         r2, r3, r2

; 427  :         CurrT += DeltaT;
; 428  : 
; 429  :         DEBUGMSG(ZONE_VERBOSE, (TEXT("PrevSamp0=0x%x, CurrSamp0=0x%x, CurrT=0x%x, OutSamp0=0x%x\r\n"), PrevSamp0,CurrSamp0,CurrT,OutSamp0));
; 430  : 
; 431  :         if (pBuffer < pBufferLast)

  000c0	e15e0000	 cmp         lr, r0
  000c4	e59d300c	 ldr         r3, [sp, #0xC]
  000c8	e0855003	 add         r5, r5, r3
  000cc	e1a06842	 mov         r6, r2, asr #16

; 432  :         {
; 433  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  000d0	31de30f0	 ldrccsh     r3, [lr]

; 434  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  000d4	31de20f2	 ldrccsh     r2, [lr, #2]
  000d8	e1a01841	 mov         r1, r1, asr #16
  000dc	30811003	 addcc       r1, r1, r3
  000e0	30866002	 addcc       r6, r6, r2

; 435  : #if USE_MIX_SATURATE
; 436  :             // Handle saturation
; 437  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 438  :             {
; 439  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 440  :             }
; 441  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 442  :             {
; 443  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 444  :             }
; 445  :             if (OutSamp1>AUDIO_SAMPLE_MAX)
; 446  :             {
; 447  :                 OutSamp1=AUDIO_SAMPLE_MAX;
; 448  :             }
; 449  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)
; 450  :             {
; 451  :                 OutSamp1=AUDIO_SAMPLE_MIN;
; 452  :             }
; 453  : #endif
; 454  :         }
; 455  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  000e4	e1ce10b0	 strh        r1, [lr]

; 456  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  000e8	e1ce60b2	 strh        r6, [lr, #2]

; 457  : 
; 458  :         pBuffer += 2*sizeof(HWSAMPLE);

  000ec	e28ee004	 add         lr, lr, #4
  000f0	e59d3000	 ldr         r3, [sp]
  000f4	e59d6010	 ldr         r6, [sp, #0x10]
  000f8	e15e000b	 cmp         lr, r11
  000fc	3affffe4	 bcc         |$LN16@Render2Ste|
  00100		 |$LN15@Render2Ste|

; 382  : {

  00100	e59d0014	 ldr         r0, [sp, #0x14]
  00104		 |$Exit$34161|

; 459  : 
; 460  :     }
; 461  : 
; 462  :     Exit:
; 463  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  00104	e590204c	 ldr         r2, [r0, #0x4C]
  00108	e5903044	 ldr         r3, [r0, #0x44]

; 464  :     m_lpCurrData = pCurrData;

  0010c	e5804044	 str         r4, [r0, #0x44]

; 465  :     m_CurrT = CurrT;

  00110	e5805090	 str         r5, [r0, #0x90]
  00114	e0423003	 sub         r3, r2, r3
  00118	e0833004	 add         r3, r3, r4
  0011c	e580304c	 str         r3, [r0, #0x4C]

; 466  :     m_PrevSamp[0] = PrevSamp0;

  00120	e5809080	 str         r9, [r0, #0x80]

; 467  :     m_PrevSamp[1] = PrevSamp1;

  00124	e580a084	 str         r10, [r0, #0x84]

; 468  :     m_CurrSamp[0] = CurrSamp0;

  00128	e5807088	 str         r7, [r0, #0x88]

; 469  :     m_CurrSamp[1] = CurrSamp1;

  0012c	e580808c	 str         r8, [r0, #0x8C]

; 470  :     return pBuffer;
; 471  : }

  00130	e1a0000e	 mov         r0, lr
  00134	e28dd018	 add         sp, sp, #0x18
  00138	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0013c	e12fff1e	 bx          lr
  00140		 |$M34626|

			 ENDP  ; |?Render2Stereo@OutputStreamContextS8@@AAAPAEPAE00H@Z|, OutputStreamContextS8::Render2Stereo

	EXPORT	|?Render2Mono@OutputStreamContextS8@@AAAPAEPAE00H@Z| ; OutputStreamContextS8::Render2Mono

  00000			 AREA	 |.pdata|, PDATA
|$T34659| DCD	|$LN19@Render2Mon|
	DCD	0x40004a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2Mono@OutputStreamContextS8@@AAAPAEPAE00H@Z| PROC ; OutputStreamContextS8::Render2Mono

; 486  : {

  00000		 |$LN19@Render2Mon|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M34656|
  00008	e1a0b003	 mov         r11, r3
  0000c	e1a0a002	 mov         r10, r2
  00010	e1a07001	 mov         r7, r1
  00014	e58d000c	 str         r0, [sp, #0xC]

; 487  :     LONG CurrT = m_CurrT;
; 488  :     LONG DeltaT = m_DeltaT;
; 489  :     LONG CurrSamp0 = (m_CurrSamp[0]+m_CurrSamp[1])>>1;

  00018	e590508c	 ldr         r5, [r0, #0x8C]
  0001c	e590e088	 ldr         lr, [r0, #0x88]

; 490  :     LONG PrevSamp0 = (m_PrevSamp[0]+m_PrevSamp[1])>>1;

  00020	e5906084	 ldr         r6, [r0, #0x84]
  00024	e5904080	 ldr         r4, [r0, #0x80]
  00028	e085e00e	 add         lr, r5, lr
  0002c	e1a080ce	 mov         r8, lr, asr #1
  00030	e5903078	 ldr         r3, [r0, #0x78]

; 491  :     PBYTE pCurrData = m_lpCurrData;
; 492  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;
; 493  :     LONG fxpGain[2];
; 494  :     LONG OutSamp0;
; 495  :     LONG OutSamp1;
; 496  : 
; 497  :     UNREFERENCED_PARAMETER(bDSPRender);
; 498  : 
; 499  :     fxpGain[0] = m_fxpGain[0];

  00034	e590105c	 ldr         r1, [r0, #0x5C]
  00038	e086e004	 add         lr, r6, r4

; 500  :     fxpGain[1] = m_fxpGain[1];

  0003c	e5906060	 ldr         r6, [r0, #0x60]
  00040	e5904044	 ldr         r4, [r0, #0x44]
  00044	e5909048	 ldr         r9, [r0, #0x48]
  00048	e1a050ce	 mov         r5, lr, asr #1
  0004c	e590e090	 ldr         lr, [r0, #0x90]
  00050	e58d6008	 str         r6, [sp, #8]
  00054	e58d3000	 str         r3, [sp]
  00058	e58d1004	 str         r1, [sp, #4]

; 501  : 
; 502  :     while (pBuffer < pBufferEnd)

  0005c	e157000a	 cmp         r7, r10
  00060	2a000021	 bcs         |$Exit$34199|

; 490  :     LONG PrevSamp0 = (m_PrevSamp[0]+m_PrevSamp[1])>>1;

  00064	e1a00003	 mov         r0, r3

; 507  :             {
; 508  :                 goto Exit;
; 509  :             }
; 510  : 
; 511  :             CurrT -= DELTA_OVERFLOW;
; 512  : 
; 513  :             PrevSamp0 = CurrSamp0;
; 514  : 
; 515  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 516  :             CurrSamp0 =  (LONG)pSampleSrc->s8.sample_left;
; 517  :             CurrSamp0 += (LONG)pSampleSrc->s8.sample_right;
; 518  :             CurrSamp0 = (CurrSamp0 - 256) << 7;

  00068	ea000008	 b           |$LN16@Render2Mon|
  0006c		 |$LL5@Render2Mon|

; 503  :     {
; 504  :         while (CurrT >= DELTA_OVERFLOW)
; 505  :         {
; 506  :             if (pCurrData>=pCurrDataEnd)

  0006c	e1540009	 cmp         r4, r9
  00070	2a00001c	 bcs         |$LN15@Render2Mon|

; 507  :             {
; 508  :                 goto Exit;
; 509  :             }
; 510  : 
; 511  :             CurrT -= DELTA_OVERFLOW;
; 512  : 
; 513  :             PrevSamp0 = CurrSamp0;
; 514  : 
; 515  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 516  :             CurrSamp0 =  (LONG)pSampleSrc->s8.sample_left;
; 517  :             CurrSamp0 += (LONG)pSampleSrc->s8.sample_right;
; 518  :             CurrSamp0 = (CurrSamp0 - 256) << 7;

  00074	e5d42001	 ldrb        r2, [r4, #1]
  00078	e4d43002	 ldrb        r3, [r4], #2
  0007c	e1a05008	 mov         r5, r8
  00080	e24ee902	 sub         lr, lr, #2, 18
  00084	e0823003	 add         r3, r2, r3
  00088	e2433c01	 sub         r3, r3, #1, 24
  0008c	e1a08383	 mov         r8, r3, lsl #7
  00090		 |$LN16@Render2Mon|
  00090	e35e0902	 cmp         lr, #2, 18
  00094	aafffff4	 bge         |$LL5@Render2Mon|

; 519  :             pCurrData+=2;
; 520  :         }
; 521  : 
; 522  :         OutSamp0 =
; 523  :         OutSamp1 = PrevSamp0 + (((CurrSamp0 - PrevSamp0) * CurrT) >> DELTAFRAC);

  00098	e0483005	 sub         r3, r8, r5
  0009c	e0020e93	 mul         r2, r3, lr

; 524  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;
; 525  :         OutSamp1 = (OutSamp1 * fxpGain[1]) >> VOLSHIFT;
; 526  :         CurrT += DeltaT;
; 527  : 
; 528  :         DEBUGMSG(ZONE_VERBOSE, (TEXT("PrevSamp0=0x%x, CurrSamp0=0x%x, CurrT=0x%x, OutSamp0=0x%x\r\n"), PrevSamp0,CurrSamp0,CurrT,OutSamp0));
; 529  : 
; 530  :         if (pBuffer < pBufferLast)

  000a0	e157000b	 cmp         r7, r11
  000a4	e08537c2	 add         r3, r5, r2, asr #15
  000a8	e0020193	 mul         r2, r3, r1
  000ac	e0010693	 mul         r1, r3, r6
  000b0	e1a06842	 mov         r6, r2, asr #16

; 531  :         {
; 532  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  000b4	31d730f0	 ldrccsh     r3, [r7]
  000b8	e1a01841	 mov         r1, r1, asr #16

; 533  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  000bc	31d720f2	 ldrccsh     r2, [r7, #2]
  000c0	30866003	 addcc       r6, r6, r3
  000c4	30811002	 addcc       r1, r1, r2

; 534  : #if USE_MIX_SATURATE
; 535  :             // Handle saturation
; 536  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 537  :             {
; 538  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 539  :             }
; 540  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 541  :             {
; 542  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 543  :             }
; 544  :             if (OutSamp1>AUDIO_SAMPLE_MAX)
; 545  :             {
; 546  :                 OutSamp1=AUDIO_SAMPLE_MAX;
; 547  :             }
; 548  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)
; 549  :             {
; 550  :                 OutSamp1=AUDIO_SAMPLE_MIN;
; 551  :             }
; 552  : #endif
; 553  :         }
; 554  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  000c8	e1c760b0	 strh        r6, [r7]

; 555  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  000cc	e1c710b2	 strh        r1, [r7, #2]

; 556  : 
; 557  :         pBuffer += 2*sizeof(HWSAMPLE);

  000d0	e2877004	 add         r7, r7, #4
  000d4	e59d1004	 ldr         r1, [sp, #4]
  000d8	e59d6008	 ldr         r6, [sp, #8]
  000dc	e157000a	 cmp         r7, r10
  000e0	e08ee000	 add         lr, lr, r0
  000e4	3affffe9	 bcc         |$LN16@Render2Mon|
  000e8		 |$LN15@Render2Mon|

; 486  : {

  000e8	e59d000c	 ldr         r0, [sp, #0xC]
  000ec		 |$Exit$34199|

; 558  : 
; 559  :     }
; 560  : 
; 561  :     Exit:
; 562  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  000ec	e590204c	 ldr         r2, [r0, #0x4C]
  000f0	e5903044	 ldr         r3, [r0, #0x44]

; 563  :     m_lpCurrData = pCurrData;

  000f4	e5804044	 str         r4, [r0, #0x44]

; 564  :     m_CurrT = CurrT;

  000f8	e580e090	 str         lr, [r0, #0x90]
  000fc	e0423003	 sub         r3, r2, r3
  00100	e0833004	 add         r3, r3, r4
  00104	e580304c	 str         r3, [r0, #0x4C]

; 565  :     m_PrevSamp[0] = PrevSamp0;

  00108	e5805080	 str         r5, [r0, #0x80]

; 566  :     m_PrevSamp[1] = PrevSamp0;

  0010c	e5805084	 str         r5, [r0, #0x84]

; 567  :     m_CurrSamp[0] = CurrSamp0;

  00110	e5808088	 str         r8, [r0, #0x88]

; 568  :     m_CurrSamp[1] = CurrSamp0;

  00114	e580808c	 str         r8, [r0, #0x8C]

; 569  :     return pBuffer;
; 570  : }

  00118	e1a00007	 mov         r0, r7
  0011c	e28dd010	 add         sp, sp, #0x10
  00120	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00124	e12fff1e	 bx          lr
  00128		 |$M34657|

			 ENDP  ; |?Render2Mono@OutputStreamContextS8@@AAAPAEPAE00H@Z|, OutputStreamContextS8::Render2Mono

	EXPORT	|?Render2Stereo@OutputStreamContextS16@@AAAPAEPAE00H@Z| ; OutputStreamContextS16::Render2Stereo

  00000			 AREA	 |.pdata|, PDATA
|$T34691| DCD	|$LN19@Render2Ste@2|
	DCD	0x40004b02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2Stereo@OutputStreamContextS16@@AAAPAEPAE00H@Z| PROC ; OutputStreamContextS16::Render2Stereo

; 612  : {

  00000		 |$LN19@Render2Ste@2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M34688|
  00008	e58d3000	 str         r3, [sp]
  0000c	e1a0b002	 mov         r11, r2
  00010	e1a0e001	 mov         lr, r1
  00014	e58d0014	 str         r0, [sp, #0x14]

; 613  :     LONG CurrT = m_CurrT;
; 614  :     LONG DeltaT = m_DeltaT;

  00018	e5903078	 ldr         r3, [r0, #0x78]

; 615  :     LONG CurrSamp0 = m_CurrSamp[0];
; 616  :     LONG CurrSamp1 = m_CurrSamp[1];
; 617  :     LONG PrevSamp0 = m_PrevSamp[0];
; 618  :     LONG PrevSamp1 = m_PrevSamp[1];
; 619  :     PBYTE pCurrData = m_lpCurrData;
; 620  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;
; 621  :     LONG fxpGain[2];
; 622  :     LONG OutSamp0;
; 623  :     LONG OutSamp1;
; 624  : 
; 625  :     UNREFERENCED_PARAMETER(bDSPRender);
; 626  : 
; 627  :     fxpGain[0] = m_fxpGain[0];

  0001c	e590605c	 ldr         r6, [r0, #0x5C]

; 628  :     fxpGain[1] = m_fxpGain[1];

  00020	e5902060	 ldr         r2, [r0, #0x60]
  00024	e58d3008	 str         r3, [sp, #8]
  00028	e5903048	 ldr         r3, [r0, #0x48]
  0002c	e5905090	 ldr         r5, [r0, #0x90]
  00030	e5907088	 ldr         r7, [r0, #0x88]
  00034	e590808c	 ldr         r8, [r0, #0x8C]
  00038	e5909080	 ldr         r9, [r0, #0x80]
  0003c	e590a084	 ldr         r10, [r0, #0x84]
  00040	e5904044	 ldr         r4, [r0, #0x44]
  00044	e58d300c	 str         r3, [sp, #0xC]
  00048	e58d6010	 str         r6, [sp, #0x10]
  0004c	e58d2004	 str         r2, [sp, #4]

; 629  : 
; 630  :     while (pBuffer < pBufferEnd)

  00050	e15e000b	 cmp         lr, r11
  00054	2a000025	 bcs         |$Exit$34250|

; 684  : 
; 685  :         pBuffer += 2*sizeof(HWSAMPLE);

  00058	e59d0000	 ldr         r0, [sp]

; 647  :             pCurrData+=4;

  0005c	ea000007	 b           |$LN16@Render2Ste@2|
  00060		 |$LL5@Render2Ste@2|

; 631  :     {
; 632  :         while (CurrT >= DELTA_OVERFLOW)
; 633  :         {
; 634  :             if (pCurrData>=pCurrDataEnd)

  00060	e1540003	 cmp         r4, r3
  00064	2a000020	 bcs         |$LN15@Render2Ste@2|

; 635  :             {
; 636  :                 goto Exit;
; 637  :             }
; 638  : 
; 639  :             CurrT -= DELTA_OVERFLOW;
; 640  : 
; 641  :             PrevSamp0 = CurrSamp0;

  00068	e1a09007	 mov         r9, r7

; 642  :             PrevSamp1 = CurrSamp1;
; 643  : 
; 644  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 645  :             CurrSamp0 = (LONG)pSampleSrc->s16.sample_left;

  0006c	e1d470f0	 ldrsh       r7, [r4]
  00070	e1a0a008	 mov         r10, r8

; 646  :             CurrSamp1 = (LONG)pSampleSrc->s16.sample_right;

  00074	e1d480f2	 ldrsh       r8, [r4, #2]

; 647  :             pCurrData+=4;

  00078	e2844004	 add         r4, r4, #4
  0007c	e2455902	 sub         r5, r5, #2, 18
  00080		 |$LN16@Render2Ste@2|
  00080	e3550902	 cmp         r5, #2, 18
  00084	aafffff5	 bge         |$LL5@Render2Ste@2|

; 648  :         }
; 649  : 
; 650  :         OutSamp0 = PrevSamp0 + (((CurrSamp0 - PrevSamp0) * CurrT) >> DELTAFRAC);

  00088	e0473009	 sub         r3, r7, r9

; 651  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;
; 652  :         OutSamp1 = PrevSamp1 + (((CurrSamp1 - PrevSamp1) * CurrT) >> DELTAFRAC);

  0008c	e0010593	 mul         r1, r3, r5
  00090	e048200a	 sub         r2, r8, r10
  00094	e0030592	 mul         r3, r2, r5
  00098	e08927c1	 add         r2, r9, r1, asr #15
  0009c	e0010692	 mul         r1, r2, r6
  000a0	e08a37c3	 add         r3, r10, r3, asr #15

; 653  :         OutSamp1 = (OutSamp1 * fxpGain[1]) >> VOLSHIFT;

  000a4	e59d2004	 ldr         r2, [sp, #4]
  000a8	e0020293	 mul         r2, r3, r2

; 654  :         CurrT += DeltaT;
; 655  : 
; 656  :         DEBUGMSG(ZONE_VERBOSE, (TEXT("PrevSamp0=0x%x, CurrSamp0=0x%x, CurrT=0x%x, OutSamp0=0x%x\r\n"), PrevSamp0,CurrSamp0,CurrT,OutSamp0));
; 657  : 
; 658  :         if (pBuffer < pBufferLast)

  000ac	e15e0000	 cmp         lr, r0
  000b0	e59d3008	 ldr         r3, [sp, #8]
  000b4	e0855003	 add         r5, r5, r3
  000b8	e1a06842	 mov         r6, r2, asr #16

; 659  :         {
; 660  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  000bc	31de30f0	 ldrccsh     r3, [lr]

; 661  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  000c0	31de20f2	 ldrccsh     r2, [lr, #2]
  000c4	e1a01841	 mov         r1, r1, asr #16
  000c8	30811003	 addcc       r1, r1, r3
  000cc	30866002	 addcc       r6, r6, r2

; 662  : #if USE_MIX_SATURATE
; 663  :             // Handle saturation
; 664  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 665  :             {
; 666  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 667  :             }
; 668  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 669  :             {
; 670  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 671  :             }
; 672  :             if (OutSamp1>AUDIO_SAMPLE_MAX)
; 673  :             {
; 674  :                 OutSamp1=AUDIO_SAMPLE_MAX;
; 675  :             }
; 676  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)
; 677  :             {
; 678  :                 OutSamp1=AUDIO_SAMPLE_MIN;
; 679  :             }
; 680  : #endif
; 681  :         }
; 682  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  000d0	e1ce10b0	 strh        r1, [lr]

; 683  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  000d4	e1ce60b2	 strh        r6, [lr, #2]

; 684  : 
; 685  :         pBuffer += 2*sizeof(HWSAMPLE);

  000d8	e28ee004	 add         lr, lr, #4
  000dc	e59d300c	 ldr         r3, [sp, #0xC]
  000e0	e59d6010	 ldr         r6, [sp, #0x10]
  000e4	e15e000b	 cmp         lr, r11
  000e8	3affffe4	 bcc         |$LN16@Render2Ste@2|
  000ec		 |$LN15@Render2Ste@2|

; 612  : {

  000ec	e59d0014	 ldr         r0, [sp, #0x14]
  000f0		 |$Exit$34250|

; 686  :     }
; 687  : 
; 688  :     Exit:
; 689  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  000f0	e590204c	 ldr         r2, [r0, #0x4C]
  000f4	e5903044	 ldr         r3, [r0, #0x44]

; 690  :     m_lpCurrData = pCurrData;

  000f8	e5804044	 str         r4, [r0, #0x44]

; 691  :     m_CurrT = CurrT;

  000fc	e5805090	 str         r5, [r0, #0x90]
  00100	e0423003	 sub         r3, r2, r3
  00104	e0833004	 add         r3, r3, r4
  00108	e580304c	 str         r3, [r0, #0x4C]

; 692  :     m_PrevSamp[0] = PrevSamp0;

  0010c	e5809080	 str         r9, [r0, #0x80]

; 693  :     m_PrevSamp[1] = PrevSamp1;

  00110	e580a084	 str         r10, [r0, #0x84]

; 694  :     m_CurrSamp[0] = CurrSamp0;

  00114	e5807088	 str         r7, [r0, #0x88]

; 695  :     m_CurrSamp[1] = CurrSamp1;

  00118	e580808c	 str         r8, [r0, #0x8C]

; 696  :     return pBuffer;
; 697  : }

  0011c	e1a0000e	 mov         r0, lr
  00120	e28dd018	 add         sp, sp, #0x18
  00124	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00128	e12fff1e	 bx          lr
  0012c		 |$M34689|

			 ENDP  ; |?Render2Stereo@OutputStreamContextS16@@AAAPAEPAE00H@Z|, OutputStreamContextS16::Render2Stereo

	EXPORT	|?Render2Mono@OutputStreamContextS16@@AAAPAEPAE00H@Z| ; OutputStreamContextS16::Render2Mono

  00000			 AREA	 |.pdata|, PDATA
|$T34722| DCD	|$LN19@Render2Mon@2|
	DCD	0x40004902
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2Mono@OutputStreamContextS16@@AAAPAEPAE00H@Z| PROC ; OutputStreamContextS16::Render2Mono

; 711  : {

  00000		 |$LN19@Render2Mon@2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M34719|
  00008	e1a0b003	 mov         r11, r3
  0000c	e1a0a002	 mov         r10, r2
  00010	e1a07001	 mov         r7, r1
  00014	e58d000c	 str         r0, [sp, #0xC]

; 712  :     LONG CurrT = m_CurrT;
; 713  :     LONG DeltaT = m_DeltaT;
; 714  :     LONG CurrSamp0 = (m_CurrSamp[0]+m_CurrSamp[1])>>1;

  00018	e590508c	 ldr         r5, [r0, #0x8C]
  0001c	e590e088	 ldr         lr, [r0, #0x88]

; 715  :     LONG PrevSamp0 = (m_PrevSamp[0]+m_PrevSamp[1])>>1;

  00020	e5906084	 ldr         r6, [r0, #0x84]
  00024	e5904080	 ldr         r4, [r0, #0x80]
  00028	e085e00e	 add         lr, r5, lr
  0002c	e5903078	 ldr         r3, [r0, #0x78]

; 716  :     PBYTE pCurrData = m_lpCurrData;
; 717  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;
; 718  :     LONG fxpGain[2];
; 719  :     LONG OutSamp0;
; 720  :     LONG OutSamp1;
; 721  : 
; 722  :     UNREFERENCED_PARAMETER(bDSPRender);
; 723  : 
; 724  :     fxpGain[0] = m_fxpGain[0];

  00030	e590105c	 ldr         r1, [r0, #0x5C]

; 725  :     fxpGain[1] = m_fxpGain[1];

  00034	e5908060	 ldr         r8, [r0, #0x60]
  00038	e1a050ce	 mov         r5, lr, asr #1
  0003c	e086e004	 add         lr, r6, r4
  00040	e5904044	 ldr         r4, [r0, #0x44]
  00044	e5909048	 ldr         r9, [r0, #0x48]
  00048	e1a060ce	 mov         r6, lr, asr #1
  0004c	e590e090	 ldr         lr, [r0, #0x90]
  00050	e58d3000	 str         r3, [sp]
  00054	e58d1004	 str         r1, [sp, #4]
  00058	e58d8008	 str         r8, [sp, #8]

; 726  : 
; 727  :     while (pBuffer < pBufferEnd)

  0005c	e157000a	 cmp         r7, r10
  00060	2a000020	 bcs         |$Exit$34288|

; 715  :     LONG PrevSamp0 = (m_PrevSamp[0]+m_PrevSamp[1])>>1;

  00064	e1a00003	 mov         r0, r3

; 732  :             {
; 733  :                 goto Exit;
; 734  :             }
; 735  : 
; 736  :             CurrT -= DELTA_OVERFLOW;
; 737  : 
; 738  :             PrevSamp0 = CurrSamp0;
; 739  : 
; 740  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 741  :             CurrSamp0 =  (LONG)pSampleSrc->s16.sample_left;
; 742  :             CurrSamp0 += (LONG)pSampleSrc->s16.sample_right;
; 743  :             CurrSamp0 = CurrSamp0>>1;

  00068	ea000007	 b           |$LN16@Render2Mon@2|
  0006c		 |$LL5@Render2Mon@2|

; 728  :     {
; 729  :         while (CurrT >= DELTA_OVERFLOW)
; 730  :         {
; 731  :             if (pCurrData>=pCurrDataEnd)

  0006c	e1540009	 cmp         r4, r9
  00070	2a00001b	 bcs         |$LN15@Render2Mon@2|

; 732  :             {
; 733  :                 goto Exit;
; 734  :             }
; 735  : 
; 736  :             CurrT -= DELTA_OVERFLOW;
; 737  : 
; 738  :             PrevSamp0 = CurrSamp0;
; 739  : 
; 740  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 741  :             CurrSamp0 =  (LONG)pSampleSrc->s16.sample_left;
; 742  :             CurrSamp0 += (LONG)pSampleSrc->s16.sample_right;
; 743  :             CurrSamp0 = CurrSamp0>>1;

  00074	e1d420f2	 ldrsh       r2, [r4, #2]
  00078	e0d430f4	 ldrsh       r3, [r4], #4
  0007c	e1a06005	 mov         r6, r5
  00080	e24ee902	 sub         lr, lr, #2, 18
  00084	e0823003	 add         r3, r2, r3
  00088	e1a050c3	 mov         r5, r3, asr #1
  0008c		 |$LN16@Render2Mon@2|
  0008c	e35e0902	 cmp         lr, #2, 18
  00090	aafffff5	 bge         |$LL5@Render2Mon@2|

; 744  : 
; 745  :             pCurrData+=4;
; 746  :         }
; 747  : 
; 748  :         OutSamp0 =
; 749  :         OutSamp1 = PrevSamp0 + (((CurrSamp0 - PrevSamp0) * CurrT) >> DELTAFRAC);

  00094	e0453006	 sub         r3, r5, r6
  00098	e0020e93	 mul         r2, r3, lr

; 750  :         OutSamp0 = (OutSamp0 * fxpGain[0]) >> VOLSHIFT;
; 751  :         OutSamp1 = (OutSamp1 * fxpGain[1]) >> VOLSHIFT;
; 752  :         CurrT += DeltaT;
; 753  : 
; 754  :         DEBUGMSG(ZONE_VERBOSE, (TEXT("PrevSamp0=0x%x, CurrSamp0=0x%x, CurrT=0x%x, OutSamp0=0x%x\r\n"), PrevSamp0,CurrSamp0,CurrT,OutSamp0));
; 755  : 
; 756  :         if (pBuffer < pBufferLast)

  0009c	e157000b	 cmp         r7, r11
  000a0	e08637c2	 add         r3, r6, r2, asr #15
  000a4	e0020193	 mul         r2, r3, r1
  000a8	e0010893	 mul         r1, r3, r8
  000ac	e1a08842	 mov         r8, r2, asr #16

; 757  :         {
; 758  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  000b0	31d730f0	 ldrccsh     r3, [r7]
  000b4	e1a01841	 mov         r1, r1, asr #16

; 759  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  000b8	31d720f2	 ldrccsh     r2, [r7, #2]
  000bc	30888003	 addcc       r8, r8, r3
  000c0	30811002	 addcc       r1, r1, r2

; 760  : #if USE_MIX_SATURATE
; 761  :             // Handle saturation
; 762  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 763  :             {
; 764  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 765  :             }
; 766  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 767  :             {
; 768  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 769  :             }
; 770  :             if (OutSamp1>AUDIO_SAMPLE_MAX)
; 771  :             {
; 772  :                 OutSamp1=AUDIO_SAMPLE_MAX;
; 773  :             }
; 774  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)
; 775  :             {
; 776  :                 OutSamp1=AUDIO_SAMPLE_MIN;
; 777  :             }
; 778  : #endif
; 779  :         }
; 780  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  000c4	e1c780b0	 strh        r8, [r7]

; 781  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  000c8	e1c710b2	 strh        r1, [r7, #2]

; 782  : 
; 783  :         pBuffer += 2*sizeof(HWSAMPLE);

  000cc	e2877004	 add         r7, r7, #4
  000d0	e59d1004	 ldr         r1, [sp, #4]
  000d4	e59d8008	 ldr         r8, [sp, #8]
  000d8	e157000a	 cmp         r7, r10
  000dc	e08ee000	 add         lr, lr, r0
  000e0	3affffe9	 bcc         |$LN16@Render2Mon@2|
  000e4		 |$LN15@Render2Mon@2|

; 711  : {

  000e4	e59d000c	 ldr         r0, [sp, #0xC]
  000e8		 |$Exit$34288|

; 784  :     }
; 785  : 
; 786  :     Exit:
; 787  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  000e8	e590204c	 ldr         r2, [r0, #0x4C]
  000ec	e5903044	 ldr         r3, [r0, #0x44]

; 788  :     m_lpCurrData = pCurrData;

  000f0	e5804044	 str         r4, [r0, #0x44]

; 789  :     m_CurrT = CurrT;

  000f4	e580e090	 str         lr, [r0, #0x90]
  000f8	e0423003	 sub         r3, r2, r3
  000fc	e0833004	 add         r3, r3, r4
  00100	e580304c	 str         r3, [r0, #0x4C]

; 790  :     m_PrevSamp[0] = PrevSamp0;

  00104	e5806080	 str         r6, [r0, #0x80]

; 791  :     m_PrevSamp[1] = PrevSamp0;

  00108	e5806084	 str         r6, [r0, #0x84]

; 792  :     m_CurrSamp[0] = CurrSamp0;

  0010c	e5805088	 str         r5, [r0, #0x88]

; 793  :     m_CurrSamp[1] = CurrSamp0;

  00110	e580508c	 str         r5, [r0, #0x8C]

; 794  :     return pBuffer;
; 795  : }

  00114	e1a00007	 mov         r0, r7
  00118	e28dd010	 add         sp, sp, #0x10
  0011c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00120	e12fff1e	 bx          lr
  00124		 |$M34720|

			 ENDP  ; |?Render2Mono@OutputStreamContextS16@@AAAPAEPAE00H@Z|, OutputStreamContextS16::Render2Mono

	EXPORT	|?Render2@OutputStreamContextS8@@UAAPAEPAE00H@Z| ; OutputStreamContextS8::Render2

  00000			 AREA	 |.pdata|, PDATA
|$T34736| DCD	|$LN9@Render2@3|
	DCD	0x40001402
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2@OutputStreamContextS8@@UAAPAEPAE00H@Z| PROC ; OutputStreamContextS8::Render2

; 356  : {

  00000		 |$LN9@Render2@3|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M34733|
  00008	e1a0e003	 mov         lr, r3

; 357  :     if (bDSPRender == FALSE)

  0000c	e59d400c	 ldr         r4, [sp, #0xC]
  00010	e3540000	 cmp         r4, #0
  00014	1a000001	 bne         |$LN4@Render2@3|

; 358  :         {
; 359  :         return RenderRawData(pBuffer, pBufferEnd, pBufferLast);

  00018	eb000000	 bl          |?RenderRawData@WaveStreamContext@@QAAPAEPAE00@Z|
  0001c	ea000008	 b           |$LN1@Render2@3|
  00020		 |$LN4@Render2@3|

; 360  :         }
; 361  :     else if (m_bMono)

  00020	e5903064	 ldr         r3, [r0, #0x64]
  00024	e3530000	 cmp         r3, #0

; 362  :         {
; 363  :         return Render2Mono(pBuffer,pBufferEnd,pBufferLast, bDSPRender);

  00028	e1a0300e	 mov         r3, lr
  0002c	0a000002	 beq         |$LN2@Render2@3|
  00030	e58d4000	 str         r4, [sp]
  00034	eb000000	 bl          |?Render2Mono@OutputStreamContextS8@@AAAPAEPAE00H@Z|
  00038	ea000001	 b           |$LN1@Render2@3|
  0003c		 |$LN2@Render2@3|

; 364  :         }
; 365  :     else
; 366  :         {
; 367  :         return Render2Stereo(pBuffer,pBufferEnd,pBufferLast, bDSPRender);

  0003c	e58d4000	 str         r4, [sp]
  00040	eb000000	 bl          |?Render2Stereo@OutputStreamContextS8@@AAAPAEPAE00H@Z|
  00044		 |$LN1@Render2@3|

; 368  :         }
; 369  : }

  00044	e28dd004	 add         sp, sp, #4
  00048	e8bd4010	 ldmia       sp!, {r4, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M34734|

			 ENDP  ; |?Render2@OutputStreamContextS8@@UAAPAEPAE00H@Z|, OutputStreamContextS8::Render2

	EXPORT	|?Render2@OutputStreamContextS16@@UAAPAEPAE00H@Z| ; OutputStreamContextS16::Render2

  00000			 AREA	 |.pdata|, PDATA
|$T34750| DCD	|$LN9@Render2@4|
	DCD	0x40001402
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2@OutputStreamContextS16@@UAAPAEPAE00H@Z| PROC ; OutputStreamContextS16::Render2

; 586  : {

  00000		 |$LN9@Render2@4|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M34747|
  00008	e1a0e003	 mov         lr, r3

; 587  :     if (bDSPRender == FALSE)

  0000c	e59d400c	 ldr         r4, [sp, #0xC]
  00010	e3540000	 cmp         r4, #0
  00014	1a000001	 bne         |$LN4@Render2@4|

; 588  :         {
; 589  :         return RenderRawData(pBuffer, pBufferEnd, pBufferLast);

  00018	eb000000	 bl          |?RenderRawData@WaveStreamContext@@QAAPAEPAE00@Z|
  0001c	ea000008	 b           |$LN1@Render2@4|
  00020		 |$LN4@Render2@4|

; 590  :         }
; 591  :     else if (m_bMono)

  00020	e5903064	 ldr         r3, [r0, #0x64]
  00024	e3530000	 cmp         r3, #0

; 592  :         {
; 593  :         return Render2Mono(pBuffer,pBufferEnd,pBufferLast, bDSPRender);

  00028	e1a0300e	 mov         r3, lr
  0002c	0a000002	 beq         |$LN2@Render2@4|
  00030	e58d4000	 str         r4, [sp]
  00034	eb000000	 bl          |?Render2Mono@OutputStreamContextS16@@AAAPAEPAE00H@Z|
  00038	ea000001	 b           |$LN1@Render2@4|
  0003c		 |$LN2@Render2@4|

; 594  :         }
; 595  :     else
; 596  :         {
; 597  :         return Render2Stereo(pBuffer,pBufferEnd,pBufferLast, bDSPRender);

  0003c	e58d4000	 str         r4, [sp]
  00040	eb000000	 bl          |?Render2Stereo@OutputStreamContextS16@@AAAPAEPAE00H@Z|
  00044		 |$LN1@Render2@4|

; 598  :         }
; 599  : }

  00044	e28dd004	 add         sp, sp, #4
  00048	e8bd4010	 ldmia       sp!, {r4, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M34748|

			 ENDP  ; |?Render2@OutputStreamContextS16@@UAAPAEPAE00H@Z|, OutputStreamContextS16::Render2

	END
