; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\TPS659XX_WAVE\input.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?get_CurrentSampleRate@CStreamManager@@QBAKXZ| ; CStreamManager::get_CurrentSampleRate
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\strmmgr.h

  00000			 AREA	 |.pdata|, PDATA
|$T34244| DCD	|$LN5@get_Curren|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?get_CurrentSampleRate@CStreamManager@@QBAKXZ| PROC ; CStreamManager::get_CurrentSampleRate

; 126  :     {

  00000		 |$LN5@get_Curren|
  00000		 |$M34241|

; 127  :         return m_prgSampleRates[m_idxSampleRate].SampleRate;

  00000	e5902028	 ldr         r2, [r0, #0x28]
  00004	e590302c	 ldr         r3, [r0, #0x2C]
  00008	e7930182	 ldr         r0, [r3, +r2, lsl #3]

; 128  :     }

  0000c	e12fff1e	 bx          lr
  00010		 |$M34242|

			 ENDP  ; |?get_CurrentSampleRate@CStreamManager@@QBAKXZ|, CStreamManager::get_CurrentSampleRate

	EXPORT	|?Open@InputStreamContext@@UAAJPAVCStreamManager@@PAUwaveopendesc_tag@@K@Z| ; InputStreamContext::Open
	IMPORT	|?Open@WaveStreamContext@@UAAJPAVCStreamManager@@PAUwaveopendesc_tag@@K@Z| ; WaveStreamContext::Open
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\input.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T34257| DCD	|$LN5@Open|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Open@InputStreamContext@@UAAJPAVCStreamManager@@PAUwaveopendesc_tag@@K@Z| PROC ; InputStreamContext::Open

; 38   : {

  00000		 |$LN5@Open|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M34254|

; 39   :     HRESULT Result;
; 40   : 
; 41   :     Result = WaveStreamContext::Open(pStreamManager, lpWOD, dwFlags);

  00004	eb000000	 bl          |?Open@WaveStreamContext@@UAAJPAVCStreamManager@@PAUwaveopendesc_tag@@K@Z|

; 42   : 
; 43   :     return Result;
; 44   : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M34255|

			 ENDP  ; |?Open@InputStreamContext@@UAAJPAVCStreamManager@@PAUwaveopendesc_tag@@K@Z|, InputStreamContext::Open

	EXPORT	|?MapGain@InputStreamContext@@UAAKKK@Z|	; InputStreamContext::MapGain

  00000			 AREA	 |.pdata|, PDATA
|$T34266| DCD	|$LN5@MapGain|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MapGain@InputStreamContext@@UAAKKK@Z| PROC ; InputStreamContext::MapGain

; 57   : {

  00000		 |$LN5@MapGain|
  00000		 |$M34263|

; 58   :     UNREFERENCED_PARAMETER(StreamGain);
; 59   :     UNREFERENCED_PARAMETER(Channel);
; 60   : 
; 61   :     return 0x10000;

  00000	e3a00801	 mov         r0, #1, 16

; 62   : }

  00004	e12fff1e	 bx          lr
  00008		 |$M34264|

			 ENDP  ; |?MapGain@InputStreamContext@@UAAKKK@Z|, InputStreamContext::MapGain

	EXPORT	|?SetRate@InputStreamContext@@UAAKK@Z|	; InputStreamContext::SetRate
	IMPORT	|__rt_udiv64by64|
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\strmmgr.h

  00000			 AREA	 |.pdata|, PDATA
|$T34284| DCD	|$LN7@SetRate|
	DCD	0x40001c01
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\input.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetRate@InputStreamContext@@UAAKK@Z| PROC ; InputStreamContext::SetRate

; 73   : {

  00000		 |$LN7@SetRate|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M34281|
  00004	e1a05000	 mov         r5, r0

; 74   :     UINT64 Delta;
; 75   : 
; 76   :     m_dwMultiplier = dwMultiplier;
; 77   : 
; 78   :     // In order to pass the CETK tests we need to improve the accuracy
; 79   :     // of our ratio between the HWSampleRate and the Stream SampleRate.
; 80   :     // We'll do this by setting our m_DeltaT resolution to 4.28 format
; 81   :     //
; 82   : 
; 83   :     Delta = (m_WaveFormat.nSamplesPerSec * m_dwMultiplier);

  00008	e5d5e028	 ldrb        lr, [r5, #0x28]
  0000c	e5d53029	 ldrb        r3, [r5, #0x29]
  00010	e5d5202a	 ldrb        r2, [r5, #0x2A]
  00014	e5d5402b	 ldrb        r4, [r5, #0x2B]
  00018	e18e3403	 orr         r3, lr, r3, lsl #8

; 84   :     Delta >>= 16;
; 85   :     Delta = ((UINT32)(((1i64<<32)/Delta)+1));
; 86   : 
; 87   :     // UNDONE:
; 88   :     //  This should be a static variable of the input class
; 89   :     //
; 90   :     Delta = (Delta * m_pStreamManager->get_CurrentSampleRate());

  0001c	e595e050	 ldr         lr, [r5, #0x50]
  00020	e1833802	 orr         r3, r3, r2, lsl #16
  00024	e1833c04	 orr         r3, r3, r4, lsl #24
  00028	e585107c	 str         r1, [r5, #0x7C]
  0002c	e59e4028	 ldr         r4, [lr, #0x28]
  00030	e59ee02c	 ldr         lr, [lr, #0x2C]
  00034	e0020193	 mul         r2, r3, r1
  00038	e3a00000	 mov         r0, #0
  0003c	e79e4184	 ldr         r4, [lr, +r4, lsl #3]
  00040	e1a02822	 mov         r2, r2, lsr #16
  00044	e3a01001	 mov         r1, #1
  00048	e3a03000	 mov         r3, #0
  0004c	eb000000	 bl          __rt_udiv64by64
  00050	e2803001	 add         r3, r0, #1
  00054	e082e493	 umull       lr, r2, r3, r4

; 91   :     Delta >>= DELTAINT;
; 92   : 
; 93   :     m_DeltaT = (DWORD)Delta;
; 94   : 
; 95   :     return MMSYSERR_NOERROR;

  00058	e3a00000	 mov         r0, #0
  0005c	e1a03782	 mov         r3, r2, lsl #15
  00060	e18338ae	 orr         r3, r3, lr, lsr #17
  00064	e5853078	 str         r3, [r5, #0x78]

; 96   : }

  00068	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$M34282|

			 ENDP  ; |?SetRate@InputStreamContext@@UAAKK@Z|, InputStreamContext::SetRate

	EXPORT	|?Stop@InputStreamContext@@UAAKXZ|	; InputStreamContext::Stop
	IMPORT	|?GetNextBuffer@StreamContext@@QAAPAEXZ| ; StreamContext::GetNextBuffer
	IMPORT	|?Stop@StreamContext@@UAAKXZ|		; StreamContext::Stop

  00000			 AREA	 |.pdata|, PDATA
|$T34294| DCD	|$LN6@Stop|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Stop@InputStreamContext@@UAAKXZ| PROC ; InputStreamContext::Stop

; 106  : {

  00000		 |$LN6@Stop|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M34291|
  00004	e1a04000	 mov         r4, r0

; 107  :     // Stop the stream
; 108  :     WaveStreamContext::Stop();

  00008	eb000000	 bl          |?Stop@StreamContext@@UAAKXZ|

; 109  : 
; 110  :     // Return any partially filled buffers to the client
; 111  :     if ((m_lpWaveHdrCurrent) && (m_lpWaveHdrCurrent->dwBytesRecorded>0))

  0000c	e594303c	 ldr         r3, [r4, #0x3C]
  00010	e3530000	 cmp         r3, #0
  00014	0a000003	 beq         |$LN1@Stop|
  00018	e5933008	 ldr         r3, [r3, #8]
  0001c	e3530000	 cmp         r3, #0

; 112  :     {
; 113  :         GetNextBuffer();

  00020	81a00004	 movhi       r0, r4
  00024	8b000000	 blhi        |?GetNextBuffer@StreamContext@@QAAPAEXZ|
  00028		 |$LN1@Stop|

; 114  :     }
; 115  : 
; 116  :     return MMSYSERR_NOERROR;

  00028	e3a00000	 mov         r0, #0

; 117  : }

  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M34292|

			 ENDP  ; |?Stop@InputStreamContext@@UAAKXZ|, InputStreamContext::Stop

	EXPORT	|?GetStreamDirection@InputStreamContext@@UAAIXZ| ; InputStreamContext::GetStreamDirection

  00000			 AREA	 |.pdata|, PDATA
|$T34303| DCD	|$LN5@GetStreamD|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetStreamDirection@InputStreamContext@@UAAIXZ| PROC ; InputStreamContext::GetStreamDirection

; 121  : {

  00000		 |$LN5@GetStreamD|
  00000		 |$M34300|

; 122  :     return CHardwareAudioBridge::kInput;

  00000	e3a00001	 mov         r0, #1

; 123  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M34301|

			 ENDP  ; |?GetStreamDirection@InputStreamContext@@UAAIXZ|, InputStreamContext::GetStreamDirection

	EXPORT	|?Render2@InputStreamContext@@UAAPAEPAE00H@Z| ; InputStreamContext::Render2
	IMPORT	|?RenderRawData@WaveStreamContext@@QAAPAEPAE00@Z| ; WaveStreamContext::RenderRawData

  00000			 AREA	 |.pdata|, PDATA
|$T34335| DCD	|$LN29@Render2|
	DCD	0x40005b02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2@InputStreamContext@@UAAPAEPAE00H@Z| PROC ; InputStreamContext::Render2

; 134  : {

  00000		 |$LN29@Render2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M34332|
  00008	e1a07002	 mov         r7, r2
  0000c	e1a04001	 mov         r4, r1

; 135  :     PBYTE pCurrData = m_lpCurrData;
; 136  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;
; 137  : 
; 138  :     LONG CurrT = m_CurrT;
; 139  :     LONG DeltaT = m_DeltaT;
; 140  :     PCM_TYPE SampleType = m_SampleType;
; 141  : 
; 142  :     LONG CurrSamp0 = m_CurrSamp[0];
; 143  :     LONG PrevSamp0 = m_PrevSamp[0];
; 144  :     LONG CurrSamp1 = m_CurrSamp[1];
; 145  :     LONG PrevSamp1 = m_PrevSamp[1];
; 146  :     LONG InSamp0;
; 147  :     LONG InSamp1;
; 148  : 
; 149  :     UNREFERENCED_PARAMETER(SampleType);
; 150  : 
; 151  :     if (bDSPRender == FALSE)

  00010	e59d102c	 ldr         r1, [sp, #0x2C]
  00014	e5902078	 ldr         r2, [r0, #0x78]
  00018	e5906084	 ldr         r6, [r0, #0x84]
  0001c	e590e044	 ldr         lr, [r0, #0x44]
  00020	e5908048	 ldr         r8, [r0, #0x48]
  00024	e5905090	 ldr         r5, [r0, #0x90]
  00028	e5909088	 ldr         r9, [r0, #0x88]
  0002c	e590b080	 ldr         r11, [r0, #0x80]
  00030	e590a08c	 ldr         r10, [r0, #0x8C]
  00034	e3510000	 cmp         r1, #0
  00038	e58d2004	 str         r2, [sp, #4]
  0003c	e58d6000	 str         r6, [sp]
  00040	1a000033	 bne         |$LN25@Render2|

; 152  :         {
; 153  :         return RenderRawData(pBuffer, pBufferEnd, pBufferLast);

  00044	e1a02007	 mov         r2, r7
  00048	e1a01004	 mov         r1, r4
  0004c	eb000000	 bl          |?RenderRawData@WaveStreamContext@@QAAPAEPAE00@Z|
  00050	e1a04000	 mov         r4, r0
  00054	ea000040	 b           |$LN16@Render2|
  00058		 |$LL10@Render2|

; 160  :         {
; 161  :             goto Exit;
; 162  :         }
; 163  : 
; 164  :         // Get the next sample
; 165  :         while (CurrT >= DELTA_OVERFLOW)
; 166  :         {
; 167  :             if (pBuffer>=pBufferEnd)

  00058	e1540007	 cmp         r4, r7
  0005c	2a00002e	 bcs         |$Exit$34065|

; 168  :             {
; 169  :                 goto Exit;
; 170  :             }
; 171  : 
; 172  :             PrevSamp0 = CurrSamp0;

  00060	e1a0b009	 mov         r11, r9

; 173  :             PrevSamp1 = CurrSamp1;
; 174  : 
; 175  :             CurrSamp0 = ((HWSAMPLE *)pBuffer)[0];
; 176  :             CurrSamp1 = ((HWSAMPLE *)pBuffer)[1];
; 177  :             pBuffer += 2*sizeof(HWSAMPLE);
; 178  : 
; 179  :             CurrT -= DELTA_OVERFLOW;

  00064	e1d490f0	 ldrsh       r9, [r4]
  00068	e1a0600a	 mov         r6, r10
  0006c	e1d4a0f2	 ldrsh       r10, [r4, #2]
  00070	e58d6000	 str         r6, [sp]
  00074	e2844004	 add         r4, r4, #4
  00078	e2455902	 sub         r5, r5, #2, 18
  0007c		 |$LN26@Render2|
  0007c	e3550902	 cmp         r5, #2, 18
  00080	aafffff4	 bge         |$LL10@Render2|

; 180  :         }
; 181  : 
; 182  :         InSamp0 = (PrevSamp0 + ((CurrT * (CurrSamp0 - PrevSamp0)) >> DELTAFRAC));

  00084	e049300b	 sub         r3, r9, r11

; 183  :         InSamp1 = (PrevSamp1 + ((CurrT * (CurrSamp1 - PrevSamp1)) >> DELTAFRAC));

  00088	e0010593	 mul         r1, r3, r5
  0008c	e04a2006	 sub         r2, r10, r6
  00090	e0030592	 mul         r3, r2, r5

; 184  :         CurrT += DeltaT;
; 185  : 
; 186  :         // Apply input gain
; 187  :         // InSamp0 = (InSamp0 * fxpGain[0]) >> 16;
; 188  :         // InSamp1 = (InSamp1 * fxpGain[1]) >> 16;
; 189  : 
; 190  :         PPCM_SAMPLE pSampleDest = (PPCM_SAMPLE)pCurrData;
; 191  : #if (HARDWARE_INCHANNELS==2)
; 192  :         switch (m_SampleType)

  00094	e08b27c1	 add         r2, r11, r1, asr #15
  00098	e5906070	 ldr         r6, [r0, #0x70]
  0009c	e59d1000	 ldr         r1, [sp]
  000a0	e3560001	 cmp         r6, #1
  000a4	e08117c3	 add         r1, r1, r3, asr #15
  000a8	e59d3004	 ldr         r3, [sp, #4]
  000ac	e0855003	 add         r5, r5, r3
  000b0	0a000013	 beq         |$LN2@Render2|
  000b4	e3560002	 cmp         r6, #2
  000b8	0a000009	 beq         |$LN3@Render2|
  000bc	e3560003	 cmp         r6, #3

; 193  :         {
; 194  :         case PCM_TYPE_M8:
; 195  :         default:
; 196  :             pSampleDest->m8.sample = (UINT8)( ((InSamp0+InSamp1) >> 9) + 128);

  000c0	10813002	 addne       r3, r1, r2
  000c4	11a034c3	 movne       r3, r3, asr #9
  000c8	12833080	 addne       r3, r3, #0x80
  000cc	14ce3001	 strneb      r3, [lr], #1
  000d0	1a00000e	 bne         |$LN5@Render2|

; 208  :             pCurrData  += 2;
; 209  :             break;
; 210  : 
; 211  :         case PCM_TYPE_S16:
; 212  :             pSampleDest->s16.sample_left  = (INT16)InSamp0;

  000d4	e1ce20b0	 strh        r2, [lr]

; 213  :             pSampleDest->s16.sample_right = (INT16)InSamp1;

  000d8	e1ce10b2	 strh        r1, [lr, #2]

; 214  :             pCurrData  += 4;

  000dc	e28ee004	 add         lr, lr, #4

; 215  :             break;

  000e0	ea00000a	 b           |$LN5@Render2|
  000e4		 |$LN3@Render2|

; 197  :             pCurrData  += 1;
; 198  :             break;
; 199  : 
; 200  :         case PCM_TYPE_S8:
; 201  :             pSampleDest->s8.sample_left  = (UINT8)((InSamp0 >> 8) + 128);

  000e4	e1a03442	 mov         r3, r2, asr #8

; 202  :             pSampleDest->s8.sample_right = (UINT8)((InSamp1 >> 8) + 128);

  000e8	e1a02441	 mov         r2, r1, asr #8
  000ec	e2822080	 add         r2, r2, #0x80
  000f0	e2833080	 add         r3, r3, #0x80
  000f4	e5ce2001	 strb        r2, [lr, #1]
  000f8	e5ce3000	 strb        r3, [lr]

; 203  :             pCurrData  += 2;

  000fc	e28ee002	 add         lr, lr, #2

; 204  :             break;

  00100	ea000002	 b           |$LN5@Render2|
  00104		 |$LN2@Render2|

; 205  : 
; 206  :         case PCM_TYPE_M16:
; 207  :             pSampleDest->m16.sample = (INT16)((InSamp0+InSamp1)>>1);

  00104	e0813002	 add         r3, r1, r2
  00108	e1a030c3	 mov         r3, r3, asr #1
  0010c	e0ce30b2	 strh        r3, [lr], #2
  00110		 |$LN5@Render2|

; 154  :         }
; 155  : 
; 156  :     for (;;)
; 157  :     {
; 158  :         // Make sure we have a place to put the data
; 159  :         if (pCurrData>=pCurrDataEnd)

  00110	e59d6000	 ldr         r6, [sp]
  00114		 |$LN25@Render2|
  00114	e15e0008	 cmp         lr, r8
  00118	3affffd7	 bcc         |$LN26@Render2|
  0011c		 |$Exit$34065|

; 216  :         }
; 217  : #else
; 218  :         // The Buffer given by the dataport is a stereo buffer, but only has
; 219  :         // left channel data in it.
; 220  :         switch (m_SampleType)
; 221  :         {
; 222  :         case PCM_TYPE_M8:
; 223  :         default:
; 224  :             pSampleDest->m8.sample = (UINT8)( ((InSamp0) >> 8) + 128);
; 225  :             pCurrData  += 1;
; 226  :             break;
; 227  : 
; 228  :         case PCM_TYPE_S8:
; 229  :             pSampleDest->s8.sample_left  = (UINT8)((InSamp0 >> 8) + 128);
; 230  :             pSampleDest->s8.sample_right = (UINT8)((InSamp0 >> 8) + 128);
; 231  :             pCurrData  += 2;
; 232  :             break;
; 233  : 
; 234  :         case PCM_TYPE_M16:
; 235  :             pSampleDest->m16.sample = (INT16)InSamp0;
; 236  :             pCurrData  += 2;
; 237  :             break;
; 238  : 
; 239  :         case PCM_TYPE_S16:
; 240  :             pSampleDest->s16.sample_left  = (INT16)InSamp0;
; 241  :             pSampleDest->s16.sample_right = (INT16)InSamp0;
; 242  :             pCurrData  += 4;
; 243  :             break;
; 244  :         }
; 245  : #endif
; 246  :     }
; 247  : 
; 248  : Exit:
; 249  :     m_lpWaveHdrCurrent->dwBytesRecorded += (pCurrData-m_lpCurrData);

  0011c	e590103c	 ldr         r1, [r0, #0x3C]
  00120	e5902044	 ldr         r2, [r0, #0x44]

; 250  :     m_dwByteCount += (pCurrData-m_lpCurrData);
; 251  :     m_lpCurrData = pCurrData;
; 252  :     m_CurrT = CurrT;
; 253  :     m_PrevSamp[0] = PrevSamp0;
; 254  :     m_CurrSamp[0] = CurrSamp0;
; 255  :     m_PrevSamp[1] = PrevSamp1;
; 256  :     m_CurrSamp[1] = CurrSamp1;
; 257  :     return pBuffer;

  00124	e5913008	 ldr         r3, [r1, #8]
  00128	e0433002	 sub         r3, r3, r2
  0012c	e083300e	 add         r3, r3, lr
  00130	e5813008	 str         r3, [r1, #8]
  00134	e590204c	 ldr         r2, [r0, #0x4C]
  00138	e5903044	 ldr         r3, [r0, #0x44]
  0013c	e580e044	 str         lr, [r0, #0x44]
  00140	e5805090	 str         r5, [r0, #0x90]
  00144	e0423003	 sub         r3, r2, r3
  00148	e083300e	 add         r3, r3, lr
  0014c	e580304c	 str         r3, [r0, #0x4C]
  00150	e580b080	 str         r11, [r0, #0x80]
  00154	e280c084	 add         r12, r0, #0x84
  00158	e88c0640	 stmia       r12, {r6, r9, r10}
  0015c		 |$LN16@Render2|

; 258  : }

  0015c	e1a00004	 mov         r0, r4
  00160	e28dd008	 add         sp, sp, #8
  00164	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00168	e12fff1e	 bx          lr
  0016c		 |$M34333|

			 ENDP  ; |?Render2@InputStreamContext@@UAAPAEPAE00H@Z|, InputStreamContext::Render2

	END
