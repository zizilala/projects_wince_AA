; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\TPS659XX_WAVE\dmtaudioport.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|PopulateTxBuffer|
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_wave\dmtaudioport.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T38759| DCD	|$LN5@PopulateTx|
	DCD	0x40001202
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PopulateTxBuffer| PROC

; 37   : {

  00000		 |$LN5@PopulateTx|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M38756|

; 38   :     DEBUGMSG(ZONE_FUNCTION,
; 39   :         (L"WAV::+PopulateTxBuffer(pStart=0x%08X\r\n)",
; 40   :         pStart));
; 41   : 
; 42   :     // local variable init
; 43   :     //
; 44   :     ASSERT(pData);
; 45   :     DMTAudioStreamPort *pThis = (DMTAudioStreamPort*)pData;
; 46   : 
; 47   :     // initialize audio data structure
; 48   :     //
; 49   :     ASPM_STREAM_DATA    StreamData;
; 50   :     StreamData.pBuffer = (LPBYTE)pStart;
; 51   :     StreamData.dwBufferSize = dwLength;
; 52   :     StreamData.hStreamContext = NULL;
; 53   : 
; 54   :     // notify port client of incoming audio data
; 55   :     //
; 56   :     int nRet = 0;
; 57   :     nRet = pThis->m_pPortClient->OnAudioStreamMessage(pThis,
; 58   :                                     ASPM_PROCESSDATA_TX, &StreamData);

  00008	e591e048	 ldr         lr, [r1, #0x48]
  0000c	e3a03000	 mov         r3, #0
  00010	e58d0000	 str         r0, [sp]
  00014	e58d2004	 str         r2, [sp, #4]
  00018	e58d3008	 str         r3, [sp, #8]

; 59   : 
; 60   :     DEBUGMSG(ZONE_FUNCTION,
; 61   :         (L"WAV::-PopulateTxBuffer()\r\n"));
; 62   : 
; 63   :     return nRet;

  0001c	e59e2000	 ldr         r2, [lr]
  00020	e3a00b01	 mov         r0, #1, 22
  00024	e28d3000	 add         r3, sp, #0
  00028	e5924000	 ldr         r4, [r2]
  0002c	e3802069	 orr         r2, r0, #0x69
  00030	e1a0000e	 mov         r0, lr
  00034	e1a0e00f	 mov         lr, pc
  00038	e12fff14	 bx          r4

; 64   : }

  0003c	e28dd00c	 add         sp, sp, #0xC
  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M38757|

			 ENDP  ; |PopulateTxBuffer|

	EXPORT	|PopulateRxBuffer|

  00000			 AREA	 |.pdata|, PDATA
|$T38771| DCD	|$LN5@PopulateRx|
	DCD	0x40001202
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PopulateRxBuffer| PROC

; 76   : {

  00000		 |$LN5@PopulateRx|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M38768|

; 77   :     DEBUGMSG(ZONE_FUNCTION,
; 78   :         (L"WAV::+PopulateRxBuffer(pStart=0x%08X\r\n)",
; 79   :         pStart));
; 80   : 
; 81   :     // local variable init
; 82   :     //
; 83   :     ASSERT(pData);
; 84   :     DMTAudioStreamPort *pThis = (DMTAudioStreamPort*)pData;
; 85   : 
; 86   :     // initialize audio data structure
; 87   :     //
; 88   :     ASPM_STREAM_DATA    StreamData;
; 89   :     StreamData.pBuffer = (LPBYTE)pStart;
; 90   :     StreamData.dwBufferSize = dwLength;
; 91   :     StreamData.hStreamContext = NULL;
; 92   : 
; 93   :     // notify port client of incoming audio data
; 94   :     //
; 95   :     int nRet = 0;
; 96   :     nRet = pThis->m_pPortClient->OnAudioStreamMessage(pThis,
; 97   :                                     ASPM_PROCESSDATA_RX, &StreamData);

  00008	e591e048	 ldr         lr, [r1, #0x48]
  0000c	e3a03000	 mov         r3, #0
  00010	e58d0000	 str         r0, [sp]
  00014	e58d2004	 str         r2, [sp, #4]
  00018	e58d3008	 str         r3, [sp, #8]

; 98   : 
; 99   :     DEBUGMSG(ZONE_FUNCTION,
; 100  :         (L"WAV::-PopulateRxBuffer()\r\n"));
; 101  : 
; 102  :     return nRet;

  0001c	e59e2000	 ldr         r2, [lr]
  00020	e3a00b01	 mov         r0, #1, 22
  00024	e28d3000	 add         r3, sp, #0
  00028	e5924000	 ldr         r4, [r2]
  0002c	e380206a	 orr         r2, r0, #0x6A
  00030	e1a0000e	 mov         r0, lr
  00034	e1a0e00f	 mov         lr, pc
  00038	e12fff14	 bx          r4

; 103  : }

  0003c	e28dd00c	 add         sp, sp, #0xC
  00040	e8bd4010	 ldmia       sp!, {r4, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M38769|

			 ENDP  ; |PopulateRxBuffer|

	EXPORT	|TxCommand|

  00000			 AREA	 |.pdata|, PDATA
|$T38783| DCD	|$LN9@TxCommand|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TxCommand| PROC

; 113  : {

  00000		 |$LN9@TxCommand|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M38780|
  00004	e1b03000	 movs        r3, r0

; 114  :     UNREFERENCED_PARAMETER(pPortConfigInfo);
; 115  : 
; 116  :     DEBUGMSG(ZONE_FUNCTION,
; 117  :         (L"WAV:+TxCommand(cmd=%d)", cmd)
; 118  :         );
; 119  : 
; 120  :     int nRet = 0;

  00008	e3a00000	 mov         r0, #0

; 121  :     ASSERT(pData);
; 122  :     DMTAudioStreamPort *pThis = (DMTAudioStreamPort*)pData;
; 123  :     switch (cmd)

  0000c	0a00000b	 beq         |$LN2@TxCommand|
  00010	e3530001	 cmp         r3, #1
  00014	1a000011	 bne         |$LN3@TxCommand|

; 128  :             break;
; 129  : 
; 130  :         case kExternalDrvrDx_Start:
; 131  :             nRet = pThis->m_pPortClient->OnAudioStreamMessage(pThis,
; 132  :                         ASPM_START_TX, NULL);

  00018	e5910048	 ldr         r0, [r1, #0x48]
  0001c	e3a02b01	 mov         r2, #1, 22
  00020	e3a03000	 mov         r3, #0
  00024	e590e000	 ldr         lr, [r0]
  00028	e3822065	 orr         r2, r2, #0x65
  0002c	e59e4000	 ldr         r4, [lr]
  00030	e1a0e00f	 mov         lr, pc
  00034	e12fff14	 bx          r4

; 133  :             break;
; 134  :         }
; 135  : 
; 136  :     DEBUGMSG(ZONE_FUNCTION,
; 137  :         (L"WAV:-TxCommand(cmd=%d)", cmd)
; 138  :         );
; 139  : 
; 140  :     return nRet;
; 141  : }

  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN2@TxCommand|

; 124  :         {
; 125  :         case kExternalDrvrDx_Stop:
; 126  :             nRet = pThis->m_pPortClient->OnAudioStreamMessage(pThis,
; 127  :                         ASPM_STOP_TX, NULL);

  00040	e5910048	 ldr         r0, [r1, #0x48]
  00044	e3a02b01	 mov         r2, #1, 22
  00048	e3a03000	 mov         r3, #0
  0004c	e590e000	 ldr         lr, [r0]
  00050	e3822066	 orr         r2, r2, #0x66
  00054	e59e4000	 ldr         r4, [lr]
  00058	e1a0e00f	 mov         lr, pc
  0005c	e12fff14	 bx          r4
  00060		 |$LN3@TxCommand|

; 133  :             break;
; 134  :         }
; 135  : 
; 136  :     DEBUGMSG(ZONE_FUNCTION,
; 137  :         (L"WAV:-TxCommand(cmd=%d)", cmd)
; 138  :         );
; 139  : 
; 140  :     return nRet;
; 141  : }

  00060	e8bd4010	 ldmia       sp!, {r4, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M38781|

			 ENDP  ; |TxCommand|

	EXPORT	|RxCommand|

  00000			 AREA	 |.pdata|, PDATA
|$T38795| DCD	|$LN9@RxCommand|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RxCommand| PROC

; 151  : {

  00000		 |$LN9@RxCommand|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M38792|
  00004	e1b03000	 movs        r3, r0

; 152  :     UNREFERENCED_PARAMETER(pPortConfigInfo);
; 153  : 
; 154  :     DEBUGMSG(ZONE_FUNCTION,
; 155  :         (L"WAV:+RxCommand(cmd=%d)", cmd)
; 156  :         );
; 157  : 
; 158  :     int nRet = 0;

  00008	e3a00000	 mov         r0, #0

; 159  :     ASSERT(pData);
; 160  :     DMTAudioStreamPort *pThis = (DMTAudioStreamPort*)pData;
; 161  :     switch (cmd)

  0000c	0a00000b	 beq         |$LN2@RxCommand|
  00010	e3530001	 cmp         r3, #1
  00014	1a000011	 bne         |$LN3@RxCommand|

; 166  :             break;
; 167  : 
; 168  :         case kExternalDrvrDx_Start:
; 169  :             nRet = pThis->m_pPortClient->OnAudioStreamMessage(pThis,
; 170  :                         ASPM_START_RX, NULL);

  00018	e5910048	 ldr         r0, [r1, #0x48]
  0001c	e3a02b01	 mov         r2, #1, 22
  00020	e3a03000	 mov         r3, #0
  00024	e590e000	 ldr         lr, [r0]
  00028	e3822067	 orr         r2, r2, #0x67
  0002c	e59e4000	 ldr         r4, [lr]
  00030	e1a0e00f	 mov         lr, pc
  00034	e12fff14	 bx          r4

; 171  :             break;
; 172  :         }
; 173  : 
; 174  :     DEBUGMSG(ZONE_FUNCTION,
; 175  :         (L"WAV:-RxCommand(cmd=%d)", cmd)
; 176  :         );
; 177  : 
; 178  :     return nRet;
; 179  : }

  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN2@RxCommand|

; 162  :         {
; 163  :         case kExternalDrvrDx_Stop:
; 164  :             nRet = pThis->m_pPortClient->OnAudioStreamMessage(pThis,
; 165  :                         ASPM_STOP_RX, NULL);

  00040	e5910048	 ldr         r0, [r1, #0x48]
  00044	e3a02b01	 mov         r2, #1, 22
  00048	e3a03000	 mov         r3, #0
  0004c	e590e000	 ldr         lr, [r0]
  00050	e3822068	 orr         r2, r2, #0x68
  00054	e59e4000	 ldr         r4, [lr]
  00058	e1a0e00f	 mov         lr, pc
  0005c	e12fff14	 bx          r4
  00060		 |$LN3@RxCommand|

; 171  :             break;
; 172  :         }
; 173  : 
; 174  :     DEBUGMSG(ZONE_FUNCTION,
; 175  :         (L"WAV:-RxCommand(cmd=%d)", cmd)
; 176  :         );
; 177  : 
; 178  :     return nRet;
; 179  : }

  00060	e8bd4010	 ldmia       sp!, {r4, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M38793|

			 ENDP  ; |RxCommand|

	EXPORT	|Mutex|
	IMPORT	|ExitMutex|
	IMPORT	|EnterMutex|

  00000			 AREA	 |.pdata|, PDATA
|$T38807| DCD	|$LN7@Mutex|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Mutex| PROC

; 189  : {    

  00000		 |$LN7@Mutex|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M38804|
  00004	e3500000	 cmp         r0, #0

; 190  :     UNREFERENCED_PARAMETER(dwTime);
; 191  :     UNREFERENCED_PARAMETER(pData);
; 192  : 
; 193  :     DEBUGMSG(ZONE_FUNCTION,
; 194  :         (L"WAV:+Mutex(bLock=%d)", bLock)
; 195  :         );
; 196  : 
; 197  :     bLock ? EnterMutex() : ExitMutex();

  00008	0a000001	 beq         |$LN3@Mutex|
  0000c	eb000000	 bl          EnterMutex
  00010	ea000000	 b           |$LN4@Mutex|
  00014		 |$LN3@Mutex|
  00014	eb000000	 bl          ExitMutex
  00018		 |$LN4@Mutex|

; 198  : 
; 199  :     DEBUGMSG(ZONE_FUNCTION,
; 200  :         (L"WAV:-Mutex(bLock=%d)", bLock)
; 201  :         );
; 202  : 
; 203  :     return TRUE;

  00018	e3a00001	 mov         r0, #1

; 204  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M38805|

			 ENDP  ; |Mutex|

	EXPORT	|?signal_Port@DMTAudioStreamPort@@UAAHKPAXK@Z| ; DMTAudioStreamPort::signal_Port
	EXPORT	|??_C@_1HG@DHCFJAHA@?$AAW?$AAA?$AAV?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AA?9?$AA?5?$AAa?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAn?$AAd?$AA?5@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T38820| DCD	|$LN18@signal_Por|
	DCD	0x40004e01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@DHCFJAHA@?$AAW?$AAA?$AAV?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AA?9?$AA?5?$AAa?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAn?$AAd?$AA?5@| DCB "W"
	DCB	0x0, "A", 0x0, "V", 0x0, ":", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, "!", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, "t", 0x0, "e", 0x0, "m", 0x0, "p"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "a", 0x0, "u", 0x0, "d", 0x0, "i", 0x0, "o"
	DCB	0x0, " ", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "r", 0x0, "t", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?signal_Port@DMTAudioStreamPort@@UAAHKPAXK@Z| PROC ; DMTAudioStreamPort::signal_Port

; 214  : {

  00000		 |$LN18@signal_Por|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M38817|

; 215  :     UNREFERENCED_PARAMETER(dwContextData);
; 216  :     UNREFERENCED_PARAMETER(hStreamContext);
; 217  : 
; 218  :     DEBUGMSG(ZONE_FUNCTION,
; 219  :         (L"WAV:+DMTAudioStreamPort::signal_Port(SignalId=%d)", SignalId)
; 220  :         );
; 221  : 
; 222  :     BOOL bSuccess = FALSE;
; 223  :     if (m_hDMTPort == NULL)

  00004	e5903004	 ldr         r3, [r0, #4]
  00008	e3530000	 cmp         r3, #0
  0000c	1a000006	 bne         |$LN11@signal_Por|

; 224  :         {
; 225  :         RETAILMSG(ZONE_WARN,
; 226  :             (L"WAV:ERROR! - attempting to send audio data to invalid port")
; 227  :             );

  00010	e59f311c	 ldr         r3, [pc, #0x11C]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130901	 tst         r3, #1, 18
  0001c	0a000040	 beq         |$cleanup$38634|
  00020	e59f0108	 ldr         r0, [pc, #0x108]
  00024	eb000000	 bl          NKDbgPrintfW

; 228  :         goto cleanup;

  00028	ea00003d	 b           |$cleanup$38634|
  0002c		 |$LN11@signal_Por|

; 229  :         }
; 230  : 
; 231  :     // route request to correct callback routine
; 232  :     //
; 233  :     switch (SignalId)

  0002c	e3510001	 cmp         r1, #1
  00030	0a000035	 beq         |$LN7@signal_Por|
  00034	e3510002	 cmp         r1, #2
  00038	0a00002c	 beq         |$LN6@signal_Por|
  0003c	e3510003	 cmp         r1, #3
  00040	0a000023	 beq         |$LN5@signal_Por|
  00044	e3510004	 cmp         r1, #4
  00048	0a00001a	 beq         |$LN4@signal_Por|
  0004c	e3510005	 cmp         r1, #5
  00050	0a000011	 beq         |$LN3@signal_Por|
  00054	e3510006	 cmp         r1, #6
  00058	0a000008	 beq         |$LN2@signal_Por|
  0005c	e351000f	 cmp         r1, #0xF
  00060	1a00002f	 bne         |$cleanup$38634|

; 258  : 
; 259  :         case ASPS_PORT_RECONFIG:
; 260  :             m_fnTxCommand(kExternalDrvrDx_Reconfig, m_pCallbackData, NULL);

  00064	e590100c	 ldr         r1, [r0, #0xC]
  00068	e5903014	 ldr         r3, [r0, #0x14]
  0006c	e3a00003	 mov         r0, #3
  00070	e3a02000	 mov         r2, #0
  00074	e1a0e00f	 mov         lr, pc
  00078	e12fff13	 bx          r3

; 261  :             break;

  0007c	ea000028	 b           |$cleanup$38634|
  00080		 |$LN2@signal_Por|

; 254  : 
; 255  :         case ASPS_ABORT_RX:
; 256  :             m_fnRxCommand(kExternalDrvrDx_ImmediateStop, m_pCallbackData, NULL);

  00080	e590100c	 ldr         r1, [r0, #0xC]
  00084	e5903010	 ldr         r3, [r0, #0x10]
  00088	e3a00002	 mov         r0, #2
  0008c	e3a02000	 mov         r2, #0
  00090	e1a0e00f	 mov         lr, pc
  00094	e12fff13	 bx          r3

; 257  :             break;

  00098	ea000021	 b           |$cleanup$38634|
  0009c		 |$LN3@signal_Por|

; 250  : 
; 251  :         case ASPS_ABORT_TX:
; 252  :             m_fnTxCommand(kExternalDrvrDx_ImmediateStop, m_pCallbackData, NULL);

  0009c	e590100c	 ldr         r1, [r0, #0xC]
  000a0	e5903014	 ldr         r3, [r0, #0x14]
  000a4	e3a00002	 mov         r0, #2
  000a8	e3a02000	 mov         r2, #0
  000ac	e1a0e00f	 mov         lr, pc
  000b0	e12fff13	 bx          r3

; 253  :             break;

  000b4	ea00001a	 b           |$cleanup$38634|
  000b8		 |$LN4@signal_Por|

; 246  : 
; 247  :         case ASPS_STOP_RX:
; 248  :             m_fnRxCommand(kExternalDrvrDx_Stop, m_pCallbackData, NULL);

  000b8	e590100c	 ldr         r1, [r0, #0xC]
  000bc	e5903010	 ldr         r3, [r0, #0x10]
  000c0	e3a00000	 mov         r0, #0
  000c4	e3a02000	 mov         r2, #0
  000c8	e1a0e00f	 mov         lr, pc
  000cc	e12fff13	 bx          r3

; 249  :             break;

  000d0	ea000013	 b           |$cleanup$38634|
  000d4		 |$LN5@signal_Por|

; 242  : 
; 243  :         case ASPS_START_RX:
; 244  :             m_fnRxCommand(kExternalDrvrDx_Start, m_pCallbackData, (PortConfigInfo_t*)&m_RecPortConfigInfo);

  000d4	e590100c	 ldr         r1, [r0, #0xC]
  000d8	e5903010	 ldr         r3, [r0, #0x10]
  000dc	e2802030	 add         r2, r0, #0x30
  000e0	e3a00001	 mov         r0, #1
  000e4	e1a0e00f	 mov         lr, pc
  000e8	e12fff13	 bx          r3

; 245  :             break;

  000ec	ea00000c	 b           |$cleanup$38634|
  000f0		 |$LN6@signal_Por|

; 237  :             break;
; 238  : 
; 239  :         case ASPS_STOP_TX:
; 240  :             m_fnTxCommand(kExternalDrvrDx_Stop, m_pCallbackData, NULL);

  000f0	e590100c	 ldr         r1, [r0, #0xC]
  000f4	e5903014	 ldr         r3, [r0, #0x14]
  000f8	e3a00000	 mov         r0, #0
  000fc	e3a02000	 mov         r2, #0
  00100	e1a0e00f	 mov         lr, pc
  00104	e12fff13	 bx          r3

; 241  :             break;

  00108	ea000005	 b           |$cleanup$38634|
  0010c		 |$LN7@signal_Por|

; 234  :         {
; 235  :         case ASPS_START_TX:
; 236  :             m_fnTxCommand(kExternalDrvrDx_Start, m_pCallbackData, (PortConfigInfo_t*)&m_PlayPortConfigInfo);

  0010c	e590100c	 ldr         r1, [r0, #0xC]
  00110	e5903014	 ldr         r3, [r0, #0x14]
  00114	e2802018	 add         r2, r0, #0x18
  00118	e3a00001	 mov         r0, #1
  0011c	e1a0e00f	 mov         lr, pc
  00120	e12fff13	 bx          r3
  00124		 |$cleanup$38634|

; 262  :         }
; 263  : 
; 264  :     DEBUGMSG(ZONE_FUNCTION,
; 265  :         (L"WAV:-DMTAudioStreamPort::signal_Port(SignalId=%d)", SignalId)
; 266  :         );
; 267  : 
; 268  : cleanup:
; 269  :     return bSuccess;

  00124	e3a00000	 mov         r0, #0

; 270  : }

  00128	e49de004	 ldr         lr, [sp], #4
  0012c	e12fff1e	 bx          lr
  00130		 |$LN19@signal_Por|
  00130		 |$LN20@signal_Por|
  00130	00000000	 DCD         |??_C@_1HG@DHCFJAHA@?$AAW?$AAA?$AAV?$AA?3?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AA?9?$AA?5?$AAa?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAn?$AAd?$AA?5@|
  00134		 |$LN21@signal_Por|
  00134	00000000	 DCD         |dpCurSettings|
  00138		 |$M38818|

			 ENDP  ; |?signal_Port@DMTAudioStreamPort@@UAAHKPAXK@Z|, DMTAudioStreamPort::signal_Port

	EXPORT	|?RegisterDirectMemoryTransferCallbacks@DMTAudioStreamPort@@IAAHXZ| ; DMTAudioStreamPort::RegisterDirectMemoryTransferCallbacks
	IMPORT	|DeviceIoControl|

  00000			 AREA	 |.pdata|, PDATA
|$T38834| DCD	|$LN6@RegisterDi|
	DCD	0x40002a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RegisterDirectMemoryTransferCallbacks@DMTAudioStreamPort@@IAAHXZ| PROC ; DMTAudioStreamPort::RegisterDirectMemoryTransferCallbacks

; 342  : {

  00000		 |$LN6@RegisterDi|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M38831|
  00008	e1a06000	 mov         r6, r0

; 343  :     DEBUGMSG(ZONE_FUNCTION,
; 344  :         (L"WAV:+DMTAudioStreamPort::RegisterDirectMemoryTransferCallbacks()")
; 345  :         );
; 346  : 
; 347  :     EXTERNAL_DRVR_DATA_TRANSFER_IN wavDx;
; 348  :     EXTERNAL_DRVR_DATA_TRANSFER_OUT wavDxOut;
; 349  : 
; 350  :     wavDx.pInData = this;
; 351  :     wavDx.pfnInTxCommand = TxCommand;
; 352  :     wavDx.pfnInRxCommand = RxCommand;
; 353  :     wavDx.pfnInTxPopulateBuffer = PopulateTxBuffer;
; 354  :     wavDx.pfnInRxPopulateBuffer = PopulateRxBuffer;

  0000c	e59fe090	 ldr         lr, [pc, #0x90]
  00010	e59f3088	 ldr         r3, [pc, #0x88]
  00014	e59f2080	 ldr         r2, [pc, #0x80]
  00018	e59f1078	 ldr         r1, [pc, #0x78]

; 355  :     wavDx.pfnMutexLock = Mutex;

  0001c	e59f4070	 ldr         r4, [pc, #0x70]

; 356  : 
; 357  :     BOOL bSuccess;
; 358  :     bSuccess = DeviceIoControl(m_hDMTPort,
; 359  :         IOCTL_EXTERNAL_DRVR_REGISTER_TRANSFERCALLBACKS,
; 360  :         (UCHAR*)&wavDx,
; 361  :         sizeof(EXTERNAL_DRVR_DATA_TRANSFER_IN),
; 362  :         (UCHAR*)&wavDxOut,
; 363  :         sizeof(EXTERNAL_DRVR_DATA_TRANSFER_OUT),
; 364  :         NULL,
; 365  :         NULL
; 366  :         );

  00020	e5960004	 ldr         r0, [r6, #4]
  00024	e58de02c	 str         lr, [sp, #0x2C]
  00028	e3a07405	 mov         r7, #5, 8
  0002c	e3a0e000	 mov         lr, #0
  00030	e3a0800c	 mov         r8, #0xC
  00034	e28d5010	 add         r5, sp, #0x10
  00038	e58d3020	 str         r3, [sp, #0x20]
  0003c	e58d2024	 str         r2, [sp, #0x24]
  00040	e58d1028	 str         r1, [sp, #0x28]
  00044	e3a03018	 mov         r3, #0x18
  00048	e28d201c	 add         r2, sp, #0x1C
  0004c	e3871004	 orr         r1, r7, #4
  00050	e58de00c	 str         lr, [sp, #0xC]
  00054	e58de008	 str         lr, [sp, #8]
  00058	e58d4030	 str         r4, [sp, #0x30]
  0005c	e58d601c	 str         r6, [sp, #0x1C]
  00060	e58d8004	 str         r8, [sp, #4]
  00064	e58d5000	 str         r5, [sp]
  00068	eb000000	 bl          DeviceIoControl

; 367  : 
; 368  :     // if registeration is successfull save callback routines and data
; 369  :     //
; 370  :     if (bSuccess == TRUE)

  0006c	e3500001	 cmp         r0, #1

; 371  :         {
; 372  :         m_pCallbackData = wavDxOut.pOutData;

  00070	059d3010	 ldreq       r3, [sp, #0x10]

; 373  :         m_fnRxCommand = wavDxOut.pfnOutRxCommand;

  00074	059d2018	 ldreq       r2, [sp, #0x18]

; 374  :         m_fnTxCommand = wavDxOut.pfnOutTxCommand;

  00078	059d1014	 ldreq       r1, [sp, #0x14]
  0007c	0586300c	 streq       r3, [r6, #0xC]
  00080	05862010	 streq       r2, [r6, #0x10]
  00084	05861014	 streq       r1, [r6, #0x14]

; 375  :         }
; 376  : 
; 377  :     DEBUGMSG(ZONE_FUNCTION,
; 378  :         (L"WAV:-DMTAudioStreamPort::RegisterDirectMemoryTransferCallbacks()")
; 379  :         );
; 380  : 
; 381  :     return bSuccess;
; 382  : }

  00088	e28dd034	 add         sp, sp, #0x34
  0008c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$LN7@RegisterDi|
  00094		 |$LN8@RegisterDi|
  00094	00000000	 DCD         |Mutex|
  00098		 |$LN9@RegisterDi|
  00098	00000000	 DCD         |PopulateTxBuffer|
  0009c		 |$LN10@RegisterDi|
  0009c	00000000	 DCD         |RxCommand|
  000a0		 |$LN11@RegisterDi|
  000a0	00000000	 DCD         |TxCommand|
  000a4		 |$LN12@RegisterDi|
  000a4	00000000	 DCD         |PopulateRxBuffer|
  000a8		 |$M38832|

			 ENDP  ; |?RegisterDirectMemoryTransferCallbacks@DMTAudioStreamPort@@IAAHXZ|, DMTAudioStreamPort::RegisterDirectMemoryTransferCallbacks

	EXPORT	|?UnregisterDirectMemoryTransferCallbacks@DMTAudioStreamPort@@IAAHXZ| ; DMTAudioStreamPort::UnregisterDirectMemoryTransferCallbacks
	IMPORT	|CloseHandle|

  00000			 AREA	 |.pdata|, PDATA
|$T38851| DCD	|$LN6@Unregister|
	DCD	0x40001d02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UnregisterDirectMemoryTransferCallbacks@DMTAudioStreamPort@@IAAHXZ| PROC ; DMTAudioStreamPort::UnregisterDirectMemoryTransferCallbacks

; 388  : {

  00000		 |$LN6@Unregister|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M38848|
  00008	e1a04000	 mov         r4, r0

; 389  :     DEBUGMSG(ZONE_FUNCTION,
; 390  :         (L"WAV:+DMTAudioStreamPort::UnregisterDirectMemoryTransferCallbacks()")
; 391  :         );
; 392  : 
; 393  :     BOOL bSuccess = TRUE;
; 394  :     if (m_pCallbackData)

  0000c	e594300c	 ldr         r3, [r4, #0xC]
  00010	e3a05001	 mov         r5, #1
  00014	e3530000	 cmp         r3, #0
  00018	0a000011	 beq         |$LN1@Unregister|

; 395  :         {
; 396  :         bSuccess = DeviceIoControl(m_hDMTPort,
; 397  :             IOCTL_EXTERNAL_DRVR_UNREGISTER_TRANSFERCALLBACKS,
; 398  :             NULL,
; 399  :             0,
; 400  :             NULL,
; 401  :             0,
; 402  :             NULL,
; 403  :             NULL
; 404  :             );

  0001c	e5940004	 ldr         r0, [r4, #4]
  00020	e3a03405	 mov         r3, #5, 8
  00024	e3831008	 orr         r1, r3, #8
  00028	e3a06000	 mov         r6, #0
  0002c	e3a03000	 mov         r3, #0
  00030	e3a02000	 mov         r2, #0
  00034	e58d600c	 str         r6, [sp, #0xC]
  00038	e58d6008	 str         r6, [sp, #8]
  0003c	e58d6004	 str         r6, [sp, #4]
  00040	e58d6000	 str         r6, [sp]
  00044	eb000000	 bl          DeviceIoControl
  00048	e1a05000	 mov         r5, r0

; 405  : 
; 406  :         ::CloseHandle(m_hDMTPort);

  0004c	e5940004	 ldr         r0, [r4, #4]
  00050	eb000000	 bl          CloseHandle

; 407  : 
; 408  :         m_pCallbackData = NULL;

  00054	e584600c	 str         r6, [r4, #0xC]

; 409  :         m_fnRxCommand = NULL;

  00058	e5846010	 str         r6, [r4, #0x10]

; 410  :         m_fnTxCommand = NULL;

  0005c	e5846014	 str         r6, [r4, #0x14]

; 411  :         m_hDMTPort = NULL;

  00060	e5846004	 str         r6, [r4, #4]
  00064		 |$LN1@Unregister|

; 412  :         }
; 413  : 
; 414  :     DEBUGMSG(ZONE_FUNCTION,
; 415  :         (L"WAV:-DMTAudioStreamPort::UnregisterDirectMemoryTransferCallbacks()")
; 416  :         );
; 417  : 
; 418  :     return bSuccess;
; 419  : }

  00064	e1a00005	 mov         r0, r5
  00068	e28dd010	 add         sp, sp, #0x10
  0006c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$M38849|

			 ENDP  ; |?UnregisterDirectMemoryTransferCallbacks@DMTAudioStreamPort@@IAAHXZ|, DMTAudioStreamPort::UnregisterDirectMemoryTransferCallbacks

	EXPORT	|?open_Port@DMTAudioStreamPort@@UAAHPBGPAX1@Z| ; DMTAudioStreamPort::open_Port
	EXPORT	|??_C@_1GE@BMFJDKNH@?$AAD?$AAM?$AAT?$AAA?$AAu?$AAd?$AAi?$AAo?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAn?$AA_?$AAP?$AAo?$AAr?$AAt?$AA?5?$AA?9?$AA?5@| [ DATA ] ; `string'
	IMPORT	|GetLastError|
	IMPORT	|CreateFileW|
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T38868| DCD	|$LN12@open_Port|
	DCD	0x40003202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@BMFJDKNH@?$AAD?$AAM?$AAT?$AAA?$AAu?$AAd?$AAi?$AAo?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAn?$AA_?$AAP?$AAo?$AAr?$AAt?$AA?5?$AA?9?$AA?5@| DCB "D"
	DCB	0x0, "M", 0x0, "T", 0x0, "A", 0x0, "u", 0x0, "d", 0x0, "i"
	DCB	0x0, "o", 0x0, "S", 0x0, "t", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "m", 0x0, "P", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, ":"
	DCB	0x0, ":", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "_"
	DCB	0x0, "P", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?open_Port@DMTAudioStreamPort@@UAAHPBGPAX1@Z| PROC ; DMTAudioStreamPort::open_Port

; 280  : {

  00000		 |$LN12@open_Port|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M38865|
  00008	e1a05003	 mov         r5, r3
  0000c	e1b03002	 movs        r3, r2
  00010	e1a06001	 mov         r6, r1
  00014	e1a04000	 mov         r4, r0

; 281  :     DEBUGMSG(ZONE_FUNCTION, (L"WAV:+DMTAudioStreamPort::open_Port(szPort=%s)",
; 282  :         szPort)
; 283  :         );
; 284  : 
; 285  :     // check for valid stream port name and a stream port isn't already
; 286  :     // opened
; 287  :     //
; 288  :     ASSERT(szPort);
; 289  :     ASSERT(m_hDMTPort == NULL);
; 290  : 
; 291  :     // copy the port configuration info to be sent to the mcbsp port
; 292  :     //
; 293  :     if (hPlayPortConfigInfo)
; 294  :         {
; 295  :         memcpy(&m_PlayPortConfigInfo,
; 296  :             hPlayPortConfigInfo, sizeof(PortConfigInfo_t)
; 297  :             );

  00018	12840018	 addne       r0, r4, #0x18
  0001c	13a02018	 movne       r2, #0x18
  00020	11a01003	 movne       r1, r3
  00024	1b000000	 blne        memcpy

; 298  :         }
; 299  :     if (hRecPortConfigInfo)

  00028	e3550000	 cmp         r5, #0

; 300  :         {
; 301  :         memcpy(&m_RecPortConfigInfo,
; 302  :             hRecPortConfigInfo, sizeof(PortConfigInfo_t)
; 303  :             );

  0002c	12840030	 addne       r0, r4, #0x30
  00030	13a02018	 movne       r2, #0x18
  00034	11a01005	 movne       r1, r5
  00038	1b000000	 blne        memcpy

; 304  :         }
; 305  : 
; 306  :     // attempt to open the stream port and set member variable
; 307  :     //
; 308  :     BOOL bSuccess = TRUE;
; 309  :     m_hDMTPort = CreateFile(szPort, 0, 0, NULL, 0, 0, NULL);

  0003c	e3a07000	 mov         r7, #0
  00040	e3a03000	 mov         r3, #0
  00044	e3a02000	 mov         r2, #0
  00048	e3a01000	 mov         r1, #0
  0004c	e1a00006	 mov         r0, r6
  00050	e58d7008	 str         r7, [sp, #8]
  00054	e58d7004	 str         r7, [sp, #4]
  00058	e58d7000	 str         r7, [sp]
  0005c	e3a05001	 mov         r5, #1
  00060	eb000000	 bl          CreateFileW
  00064	e5840004	 str         r0, [r4, #4]

; 310  :     if (m_hDMTPort == INVALID_HANDLE_VALUE)

  00068	e3700001	 cmn         r0, #1
  0006c	1a000008	 bne         |$LN3@open_Port|

; 311  :         {
; 312  :         RETAILMSG(ZONE_ERROR,
; 313  :             (L"DMTAudioStreamPort::open_Port - failed err=0x%08X",
; 314  :             ::GetLastError())
; 315  :             );

  00070	e59f304c	 ldr         r3, [pc, #0x4C]
  00074	e5933440	 ldr         r3, [r3, #0x440]
  00078	e3130902	 tst         r3, #2, 18
  0007c	0a00000a	 beq         |$LN8@open_Port|
  00080	eb000000	 bl          GetLastError
  00084	e1a01000	 mov         r1, r0
  00088	e59f0030	 ldr         r0, [pc, #0x30]
  0008c	eb000000	 bl          NKDbgPrintfW

; 316  : 
; 317  :         m_hDMTPort = NULL;

  00090	ea000005	 b           |$LN8@open_Port|
  00094		 |$LN3@open_Port|

; 318  :         goto cleanup;
; 319  :         };
; 320  : 
; 321  :     // register call back routines
; 322  :     //
; 323  :     bSuccess = RegisterDirectMemoryTransferCallbacks();

  00094	e1a00004	 mov         r0, r4
  00098	eb000000	 bl          |?RegisterDirectMemoryTransferCallbacks@DMTAudioStreamPort@@IAAHXZ|
  0009c	e1b05000	 movs        r5, r0

; 324  :     if (bSuccess == FALSE)

  000a0	1a000002	 bne         |$cleanup$38667|

; 325  :         {
; 326  :         ::CloseHandle(m_hDMTPort);

  000a4	e5940004	 ldr         r0, [r4, #4]
  000a8	eb000000	 bl          CloseHandle
  000ac		 |$LN8@open_Port|

; 327  :         m_hDMTPort = NULL;

  000ac	e5847004	 str         r7, [r4, #4]
  000b0		 |$cleanup$38667|

; 328  :         }
; 329  : 
; 330  :     DEBUGMSG(ZONE_FUNCTION, (L"WAV:-DMTAudioStreamPort::open_Port(szPort=%s)",
; 331  :         szPort)
; 332  :         );
; 333  : 
; 334  : cleanup:
; 335  :     return bSuccess;
; 336  : }

  000b0	e1a00005	 mov         r0, r5
  000b4	e28dd00c	 add         sp, sp, #0xC
  000b8	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN13@open_Port|
  000c0		 |$LN14@open_Port|
  000c0	00000000	 DCD         |??_C@_1GE@BMFJDKNH@?$AAD?$AAM?$AAT?$AAA?$AAu?$AAd?$AAi?$AAo?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAP?$AAo?$AAr?$AAt?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAn?$AA_?$AAP?$AAo?$AAr?$AAt?$AA?5?$AA?9?$AA?5@|
  000c4		 |$LN15@open_Port|
  000c4	00000000	 DCD         |dpCurSettings|
  000c8		 |$M38866|

			 ENDP  ; |?open_Port@DMTAudioStreamPort@@UAAHPBGPAX1@Z|, DMTAudioStreamPort::open_Port

	END
