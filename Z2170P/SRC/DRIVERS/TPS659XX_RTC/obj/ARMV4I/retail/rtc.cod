; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\TPS659XX_RTC\rtc.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BG@GJAODHJH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@DDACDMNC@?$AAS?$AAy?$AAn?$AAc?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DEVICE_IFC_TWL_GUID| [ DATA ]
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@GJAODHJH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "W"
	DCB	0x0, "a", 0x0, "k", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@DDACDMNC@?$AAS?$AAy?$AAn?$AAc?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@| DCB "S"
	DCB	0x0, "y", 0x0, "n", 0x0, "c", 0x0, "P", 0x0, "e", 0x0, "r"
	DCB	0x0, "i", 0x0, "o", 0x0, "d", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "2", 0x0, "5", 0x0, "6", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "R", 0x0, "T", 0x0, "C", 0x0, 0x0, 0x0
	%	56
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, " ", 0x0, "T", 0x0
	DCB	"h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0x0, 0x0
	%	40
	DCB	"S", 0x0, "y", 0x0, "n", 0x0, "c", 0x0, " ", 0x0, "T", 0x0
	DCB	"h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0x0, 0x0
	%	40
	DCB	"A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, 0x0, 0x0
	%	52
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCD	0xf3

  00000			 AREA	 |.rdata|, DATA, READONLY
|DEVICE_IFC_TWL_GUID| DCD 0xdef0a04b
	DCW	0xb967
	DCW	0x43db
	DCB	0x95
	DCB	0x9e
	DCB	0xd9
	DCB	0xfc
	DCB	0x62
	DCB	0x25
	DCB	0xcd
	DCB	0xeb
|s_deviceRegParams| DCD |??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x4
	DCD	0x4
	DCD	0x66
	DCD	|??_C@_1BG@DDACDMNC@?$AAS?$AAy?$AAn?$AAc?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x8
	DCD	0x4
	DCD	0x2
	DCD	|??_C@_1BG@GJAODHJH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x1c
	DCD	0x4
	DCD	0x1
	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T40024| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40021|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M40022|

			 ENDP  ; |SetEvent|

	EXPORT	|?SetPowerState@@YAHPAUDevice_t@@W4_CEDEVICE_POWER_STATE@@@Z| ; SetPowerState
	IMPORT	|TWLWriteRegs|
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_rtc\rtc.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T40035| DCD	|$LN9@SetPowerSt|
	DCD	0x40001b02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetPowerState@@YAHPAUDevice_t@@W4_CEDEVICE_POWER_STATE@@@Z| PROC ; SetPowerState

; 150  : {

  00000		 |$LN9@SetPowerSt|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M40032|
  00008	e1a0e001	 mov         lr, r1
  0000c	e1a04000	 mov         r4, r0

; 151  :     DEBUGMSG(ZONE_FUNCTION, (L"+RTC:SetPowerState(0x%08x, %d)\r\n", pDevice, dx));
; 152  :     
; 153  :     // only process request is the power states are different
; 154  :     UINT8  intr = 0;
; 155  :     if (pDevice->powerState != dx)

  00010	e5943020	 ldr         r3, [r4, #0x20]
  00014	e153000e	 cmp         r3, lr
  00018	0a00000f	 beq         |$LN4@SetPowerSt|

; 156  :         {
; 157  : 
; 158  :         // always enable rtc timer interrupt
; 159  :        intr = TWL_RTC_INTERRUPTS_IT_ALARM;

  0001c	e3a03008	 mov         r3, #8
  00020	e5cd3000	 strb        r3, [sp]

; 160  :         
; 161  :         switch (dx)

  00024	e35e0000	 cmp         lr, #0
  00028	0a000001	 beq         |$LN1@SetPowerSt|
  0002c	e35e0002	 cmp         lr, #2
  00030	1a000002	 bne         |$LN2@SetPowerSt|
  00034		 |$LN1@SetPowerSt|
  00034	e5943008	 ldr         r3, [r4, #8]
  00038	e383300c	 orr         r3, r3, #0xC

; 162  :             {
; 163  :             case D0:
; 164  :             case D2:
; 165  :                 // enable timer if we're not in suspend
; 166  :                 intr |= TWL_RTC_INTERRUPTS_IT_TIMER; 
; 167  :                 intr |= (UINT8)pDevice->syncPeriod;

  0003c	e5cd3000	 strb        r3, [sp]
  00040		 |$LN2@SetPowerSt|

; 168  :                 break;
; 169  :             }
; 170  :         pDevice->powerState = dx;
; 171  :         TWLWriteRegs(pDevice->hTWL, TWL_RTC_INTERRUPTS_REG, &intr, sizeof(intr));

  00040	e594000c	 ldr         r0, [r4, #0xC]
  00044	e3a03803	 mov         r3, #3, 16
  00048	e383102b	 orr         r1, r3, #0x2B
  0004c	e3a03001	 mov         r3, #1
  00050	e28d2000	 add         r2, sp, #0
  00054	e584e020	 str         lr, [r4, #0x20]
  00058	eb000000	 bl          TWLWriteRegs
  0005c		 |$LN4@SetPowerSt|

; 172  :         }
; 173  : 
; 174  :     DEBUGMSG(ZONE_FUNCTION, (L"-RTC:SetPowerState(0x%08x, %d)\r\n", pDevice, dx));
; 175  :     return TRUE;

  0005c	e3a00001	 mov         r0, #1

; 176  : }

  00060	e28dd004	 add         sp, sp, #4
  00064	e8bd4010	 ldmia       sp!, {r4, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M40033|

			 ENDP  ; |?SetPowerState@@YAHPAUDevice_t@@W4_CEDEVICE_POWER_STATE@@@Z|, SetPowerState

	EXPORT	|?RTC_Deinit@@YAHK@Z|			; RTC_Deinit
	IMPORT	|LocalFree|
	IMPORT	|TWLClose|
	IMPORT	|TWLInterruptDisable|
	IMPORT	|TWLInterruptMask|
	IMPORT	|CloseHandle|
	IMPORT	|WaitForSingleObject|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T40050| DCD	|$LN14@RTC_Deinit|
	DCD	0x40002e01
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\tps659xx_rtc\rtc.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RTC_Deinit@@YAHK@Z| PROC		; RTC_Deinit

; 312  : {

  00000		 |$LN14@RTC_Deinit|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40047|
  00004	e1b04000	 movs        r4, r0

; 313  :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 314  :     Device_t *pDevice = (Device_t*)context;
; 315  : 
; 316  : 
; 317  :     DEBUGMSG(ZONE_FUNCTION, (L"+RTC_Deinit(0x%08x)\r\n", context));
; 318  : 
; 319  :     // Check if we get correct context
; 320  :     if ((pDevice == NULL) || (pDevice->cookie != RTC_DEVICE_COOKIE))

  0000c	0a000025	 beq         |$cleanUp$39870|
  00010	e5942000	 ldr         r2, [r4]
  00014	e59f3098	 ldr         r3, [pc, #0x98]
  00018	e1520003	 cmp         r2, r3
  0001c	1a000021	 bne         |$cleanUp$39870|

; 321  :         {
; 322  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: RTC_Deinit: "
; 323  :             L"Incorrect context paramer\r\n"
; 324  :             ));
; 325  :         goto cleanUp;
; 326  :         }
; 327  : 
; 328  :     // Signal stop to threads
; 329  :     pDevice->threadsExit = TRUE;
; 330  : 
; 331  :     // Close interrupt thread
; 332  :     if (pDevice->hIntrThread != NULL)

  00020	e5943014	 ldr         r3, [r4, #0x14]
  00024	e3a02001	 mov         r2, #1
  00028	e5842018	 str         r2, [r4, #0x18]
  0002c	e3530000	 cmp         r3, #0
  00030	0a000007	 beq         |$LN4@RTC_Deinit|

; 333  :         {
; 334  :         // Set event to wake it
; 335  :         SetEvent(pDevice->hIntrEvent);

  00034	e5940010	 ldr         r0, [r4, #0x10]
  00038	e3a01003	 mov         r1, #3
  0003c	eb000000	 bl          EventModify

; 336  :         // Wait until thread exits
; 337  :         WaitForSingleObject(pDevice->hIntrThread, INFINITE);

  00040	e5940014	 ldr         r0, [r4, #0x14]
  00044	e3e01000	 mvn         r1, #0
  00048	eb000000	 bl          WaitForSingleObject

; 338  :         // Close handle
; 339  :         CloseHandle(pDevice->hIntrThread);

  0004c	e5940014	 ldr         r0, [r4, #0x14]
  00050	eb000000	 bl          CloseHandle
  00054		 |$LN4@RTC_Deinit|

; 340  :         }
; 341  : 
; 342  :     // Close TWL driver
; 343  :     if (pDevice->hTWL != NULL)

  00054	e594300c	 ldr         r3, [r4, #0xC]
  00058	e3530000	 cmp         r3, #0
  0005c	0a00000a	 beq         |$LN3@RTC_Deinit|

; 344  :         {
; 345  :         TWLInterruptMask(pDevice->hTWL, TWL_INTR_RTC_IT, TRUE);

  00060	e59f1048	 ldr         r1, [pc, #0x48]
  00064	e3a02001	 mov         r2, #1
  00068	e1a00003	 mov         r0, r3
  0006c	eb000000	 bl          TWLInterruptMask

; 346  :         if (pDevice->hIntrEvent != NULL)

  00070	e5943010	 ldr         r3, [r4, #0x10]
  00074	e3530000	 cmp         r3, #0

; 347  :             {
; 348  :             TWLInterruptDisable(pDevice->hTWL, TWL_INTR_RTC_IT);

  00078	1594000c	 ldrne       r0, [r4, #0xC]
  0007c	159f102c	 ldrne       r1, [pc, #0x2C]
  00080	1b000000	 blne        TWLInterruptDisable

; 349  :             }
; 350  :         TWLClose(pDevice->hTWL);

  00084	e594000c	 ldr         r0, [r4, #0xC]
  00088	eb000000	 bl          TWLClose
  0008c		 |$LN3@RTC_Deinit|

; 351  :         }
; 352  : 
; 353  :     if (pDevice->hIntrEvent != NULL)

  0008c	e5943010	 ldr         r3, [r4, #0x10]
  00090	e3530000	 cmp         r3, #0

; 354  :         {
; 355  :         CloseHandle(pDevice->hIntrEvent);

  00094	11a00003	 movne       r0, r3
  00098	1b000000	 blne        CloseHandle

; 356  :         }
; 357  : 
; 358  :     // Free device structure
; 359  :     LocalFree(pDevice);

  0009c	e1a00004	 mov         r0, r4
  000a0	eb000000	 bl          LocalFree

; 360  : 
; 361  :     // Done
; 362  :     rc = TRUE;

  000a4	e3a00001	 mov         r0, #1
  000a8		 |$cleanUp$39870|

; 363  : 
; 364  : cleanUp:
; 365  :     DEBUGMSG(ZONE_FUNCTION, (L"-TWL_Deinit(rc = %d)\r\n", rc));
; 366  :     return rc;
; 367  : }

  000a8	e8bd4010	 ldmia       sp!, {r4, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN15@RTC_Deinit|
  000b0		 |$LN16@RTC_Deinit|
  000b0	03005003	 DCD         0x3005003
  000b4		 |$LN17@RTC_Deinit|
  000b4	72746344	 DCD         0x72746344
  000b8		 |$M40048|

			 ENDP  ; |?RTC_Deinit@@YAHK@Z|, RTC_Deinit

	EXPORT	|?RTC_Open@@YAKKKK@Z|			; RTC_Open

  00000			 AREA	 |.pdata|, PDATA
|$T40063| DCD	|$LN5@RTC_Open|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RTC_Open@@YAKKKK@Z| PROC		; RTC_Open

; 381  : {

  00000		 |$LN5@RTC_Open|
  00000		 |$M40060|

; 382  : 	UNREFERENCED_PARAMETER(context);
; 383  : 	UNREFERENCED_PARAMETER(accessCode);
; 384  : 	UNREFERENCED_PARAMETER(shareMode);
; 385  : 
; 386  :     return context;
; 387  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M40061|

			 ENDP  ; |?RTC_Open@@YAKKKK@Z|, RTC_Open

	EXPORT	|?RTC_Close@@YAHK@Z|			; RTC_Close

  00000			 AREA	 |.pdata|, PDATA
|$T40072| DCD	|$LN5@RTC_Close|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RTC_Close@@YAHK@Z| PROC		; RTC_Close

; 399  : {

  00000		 |$LN5@RTC_Close|
  00000		 |$M40069|

; 400  : 	UNREFERENCED_PARAMETER(context);
; 401  : 
; 402  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 403  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M40070|

			 ENDP  ; |?RTC_Close@@YAHK@Z|, RTC_Close

	EXPORT	|?RTC_IOControl@@YAHKKPAEK0KPAK@Z|	; RTC_IOControl
	EXPORT	|??_C@_1GI@EPNHDODB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAR?$AAT?$AAC?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@MHJHMPML@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@IPDJKNA@?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@OBPLBNBH@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@CCLCCNFC@?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|__C_specific_handler|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T40133| DCD	|$LN64@RTC_IOCont|
	DCD	0xc0007804

  00000			 AREA	 |.pdata|, PDATA
|$T40135| DCD	|$LN34@RTC_IOCont|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T40137| DCD	|$LN48@RTC_IOCont|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T40139| DCD	|$LN41@RTC_IOCont|
	DCD	0x40000c01

  00000			 AREA	 |.xdata|, DATA
|$T40131| DCD	0x3
	DCD	|$LN38@RTC_IOCont|
	DCD	|$LN39@RTC_IOCont|
	DCD	|$LN34@RTC_IOCont|
	DCD	|$LN35@RTC_IOCont|
	DCD	|$LN52@RTC_IOCont|
	DCD	|$LN53@RTC_IOCont|
	DCD	|$LN48@RTC_IOCont|
	DCD	|$LN49@RTC_IOCont|
	DCD	|$LN45@RTC_IOCont|
	DCD	|$LN46@RTC_IOCont|
	DCD	|$LN41@RTC_IOCont|
	DCD	|$LN42@RTC_IOCont|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@EPNHDODB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAR?$AAT?$AAC?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "R", 0x0, "T", 0x0, "C", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c"
	DCB	0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@MHJHMPML@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "e"
	DCB	0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@IPDJKNA@?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "T", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L"
	DCB	0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@OBPLBNBH@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@CCLCCNFC@?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN@| DCB "R"
	DCB	0x0, "T", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, " ", 0x0, "D", 0x0, "%", 0x0, "u", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T40131|

  00008		 |?RTC_IOControl@@YAHKKPAEK0KPAK@Z| PROC ; RTC_IOControl

; 421  : {

  00008		 |$LN64@RTC_IOCont|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d58f0	 stmdb       sp!, {r4 - r7, r11, r12, lr}
  00010	e28db01c	 add         r11, sp, #0x1C
  00014	e24dd008	 sub         sp, sp, #8
  00018		 |$LN62@RTC_IOCont|
  00018	e1b07000	 movs        r7, r0

; 422  :     BOOL rc = FALSE;

  0001c	e3a04000	 mov         r4, #0
  00020	e50b4024	 str         r4, [r11, #-0x24]

; 423  :     Device_t *pDevice = (Device_t*)context;
; 424  : 
; 425  : 	UNREFERENCED_PARAMETER(inSize);
; 426  : 	UNREFERENCED_PARAMETER(pInBuffer);
; 427  : 
; 428  :     DEBUGMSG(ZONE_FUNCTION, (
; 429  :         L"+RTC_IOControl(0x%08x, 0x%08x, 0x%08x, %d, 0x%08x, %d, 0x%08x)\r\n",
; 430  :         context, code, pInBuffer, inSize, pOutBuffer, outSize, pOutSize
; 431  :         ));
; 432  :         
; 433  :     // Check if we get correct context
; 434  :     if ((pDevice == NULL) || (pDevice->cookie != RTC_DEVICE_COOKIE))

  00024	0a000066	 beq         |$LN17@RTC_IOCont|
  00028	e5972000	 ldr         r2, [r7]
  0002c	e59f31f8	 ldr         r3, [pc, #0x1F8]
  00030	e1520003	 cmp         r2, r3
  00034	1a000062	 bne         |$LN17@RTC_IOCont|
  00038	e3a03832	 mov         r3, #0x32, 16

; 439  :         goto cleanUp;
; 440  :         }
; 441  :     
; 442  :     switch (code)

  0003c	e3833a01	 orr         r3, r3, #1, 20
  00040	e1510003	 cmp         r1, r3
  00044	0a000041	 beq         |$LN13@RTC_IOCont|
  00048	e59f31d8	 ldr         r3, [pc, #0x1D8]
  0004c	e1510003	 cmp         r1, r3
  00050	0a000027	 beq         |$LN3@RTC_IOCont|
  00054	e59f31c8	 ldr         r3, [pc, #0x1C8]
  00058	e1510003	 cmp         r1, r3
  0005c	1a00005d	 bne         |$cleanUp$39901|

; 464  :                         }
; 465  :                 }
; 466  :             break;
; 467  : 
; 468  : 
; 469  :         // requests a change from one device power state to another
; 470  :         case IOCTL_POWER_SET: 
; 471  :             DEBUGMSG(ZONE_INFO,(L"RTC: Received IOCTL_POWER_SET\r\n"));
; 472  :             if (pOutBuffer && outSize >= sizeof(CEDEVICE_POWER_STATE)) 

  00060	e59b6000	 ldr         r6, [r11]
  00064	e3560000	 cmp         r6, #0
  00068	0a00005a	 beq         |$cleanUp$39901|
  0006c	e59b3004	 ldr         r3, [r11, #4]
  00070	e3530004	 cmp         r3, #4
  00074	3a000057	 bcc         |$cleanUp$39901|
  00078		 |$LN45@RTC_IOCont|

; 473  :                 {
; 474  :                 __try 
; 475  :                     {
; 476  :                     CEDEVICE_POWER_STATE ReqDx = *(PCEDEVICE_POWER_STATE)pOutBuffer;

  00078	e5963000	 ldr         r3, [r6]
  0007c	e1b05003	 movs        r5, r3

; 477  :                     //handle only supported states
; 478  :                     if((ReqDx == D0) || (ReqDx == D4))

  00080	0a000001	 beq         |$LN6@RTC_IOCont|
  00084	e3550004	 cmp         r5, #4
  00088	1a000011	 bne         |$LN46@RTC_IOCont|
  0008c		 |$LN6@RTC_IOCont|

; 479  :                     {
; 480  :                     if (SetPowerState(pDevice, ReqDx))

  0008c	e1a01005	 mov         r1, r5
  00090	e1a00007	 mov         r0, r7
  00094	eb000000	 bl          |?SetPowerState@@YAHPAUDevice_t@@W4_CEDEVICE_POWER_STATE@@@Z|
  00098	e3500000	 cmp         r0, #0

; 481  :                         {   
; 482  :                         *(PCEDEVICE_POWER_STATE)pOutBuffer = pDevice->powerState;

  0009c	15973020	 ldrne       r3, [r7, #0x20]

; 483  :                         *pOutSize = sizeof(CEDEVICE_POWER_STATE);

  000a0	159b2008	 ldrne       r2, [r11, #8]
  000a4	13a01004	 movne       r1, #4
  000a8	15863000	 strne       r3, [r6]
  000ac	15821000	 strne       r1, [r2]

; 484  :  
; 485  :                         rc = TRUE;

  000b0	13a04001	 movne       r4, #1
  000b4	150b4024	 strne       r4, [r11, #-0x24]

; 479  :                     {
; 480  :                     if (SetPowerState(pDevice, ReqDx))

  000b8	1a000005	 bne         |$LN46@RTC_IOCont|

; 486  :                         DEBUGMSG(ZONE_INFO, (L"RTC: "
; 487  :                             L"IOCTL_POWER_SET to D%u \r\n",
; 488  :                             pDevice->powerState
; 489  :                             ));
; 490  :                         }
; 491  :                     else 
; 492  :                         {
; 493  :                         RETAILMSG(ZONE_ERROR, (L"RTC: "
; 494  :                             L"Invalid state request D%u \r\n", ReqDx
; 495  :                             ));

  000bc	e59f314c	 ldr         r3, [pc, #0x14C]
  000c0	e5933440	 ldr         r3, [r3, #0x440]
  000c4	e3130001	 tst         r3, #1
  000c8	159f0150	 ldrne       r0, [pc, #0x150]
  000cc	11a01005	 movne       r1, r5
  000d0	1b000000	 blne        NKDbgPrintfW
  000d4		 |$LN46@RTC_IOCont|

; 496  :                         }
; 497  :                     }
; 498  :                }

  000d4	ea00003f	 b           |$cleanUp$39901|
  000d8		 |$LN42@RTC_IOCont|

; 500  :                {
; 501  :                     RETAILMSG(ZONE_ERROR, (L"Exception in ioctl\r\n"));

  000d8	e59f3130	 ldr         r3, [pc, #0x130]
  000dc	e5933440	 ldr         r3, [r3, #0x440]
  000e0	e3130001	 tst         r3, #1
  000e4	159f012c	 ldrne       r0, [pc, #0x12C]
  000e8	1b000000	 blne        NKDbgPrintfW
  000ec	e51b4024	 ldr         r4, [r11, #-0x24]
  000f0	ea000038	 b           |$cleanUp$39901|
  000f4		 |$LN3@RTC_IOCont|

; 502  :                }
; 503  :             }
; 504  :             break;
; 505  : 
; 506  :         // gets the current device power state
; 507  :         case IOCTL_POWER_GET: 
; 508  :             RETAILMSG(ZONE_INFO, (L"RTC: Received IOCTL_POWER_GET\r\n"));

  000f4	e59f3114	 ldr         r3, [pc, #0x114]
  000f8	e5933440	 ldr         r3, [r3, #0x440]
  000fc	e3130010	 tst         r3, #0x10
  00100	159f0114	 ldrne       r0, [pc, #0x114]
  00104	1b000000	 blne        NKDbgPrintfW

; 509  :             if (pOutBuffer != NULL && outSize >= sizeof(CEDEVICE_POWER_STATE)) 

  00108	e59b2000	 ldr         r2, [r11]
  0010c	e3520000	 cmp         r2, #0
  00110	0a000030	 beq         |$cleanUp$39901|
  00114	e59b3004	 ldr         r3, [r11, #4]
  00118	e3530004	 cmp         r3, #4
  0011c	3a00002d	 bcc         |$cleanUp$39901|
  00120		 |$LN52@RTC_IOCont|

; 510  :                 {
; 511  :                 __try 
; 512  :                     {
; 513  :                     *(PCEDEVICE_POWER_STATE)pOutBuffer = pDevice->powerState;

  00120	e5973020	 ldr         r3, [r7, #0x20]
  00124	e5823000	 str         r3, [r2]

; 514  :  
; 515  :                     rc = TRUE;

  00128	e3a04001	 mov         r4, #1
  0012c	e50b4024	 str         r4, [r11, #-0x24]
  00130		 |$LN53@RTC_IOCont|

; 516  : 
; 517  :                     DEBUGMSG(ZONE_INFO, (L"RTC: "
; 518  :                             L"IOCTL_POWER_GET to D%u \r\n",
; 519  :                             pDevice->powerState
; 520  :                             ));
; 521  :                     }

  00130	ea000028	 b           |$cleanUp$39901|
  00134		 |$LN49@RTC_IOCont|

; 523  :                     {
; 524  :                     RETAILMSG(ZONE_ERROR, (L"Exception in ioctl\r\n"));

  00134	e59f30d4	 ldr         r3, [pc, #0xD4]
  00138	e5933440	 ldr         r3, [r3, #0x440]
  0013c	e3130001	 tst         r3, #1
  00140	159f00d0	 ldrne       r0, [pc, #0xD0]
  00144	1b000000	 blne        NKDbgPrintfW
  00148	e51b4024	 ldr         r4, [r11, #-0x24]
  0014c	ea000021	 b           |$cleanUp$39901|
  00150		 |$LN13@RTC_IOCont|

; 443  :         {
; 444  :         case IOCTL_POWER_CAPABILITIES: 
; 445  :             DEBUGMSG(ZONE_INFO, (L"RTC: Received IOCTL_POWER_CAPABILITIES\r\n"));
; 446  :             if (pOutBuffer && outSize >= sizeof (POWER_CAPABILITIES) && 
; 447  :                 pOutSize) 

  00150	e59b5000	 ldr         r5, [r11]
  00154	e3550000	 cmp         r5, #0
  00158	0a00001e	 beq         |$cleanUp$39901|
  0015c	e59b3004	 ldr         r3, [r11, #4]
  00160	e3530030	 cmp         r3, #0x30
  00164	3a00001b	 bcc         |$cleanUp$39901|
  00168	e59b6008	 ldr         r6, [r11, #8]
  0016c	e3560000	 cmp         r6, #0
  00170	0a000018	 beq         |$cleanUp$39901|
  00174		 |$LN38@RTC_IOCont|

; 448  :                 {
; 449  :                     __try 
; 450  :                         {
; 451  :                         PPOWER_CAPABILITIES PowerCaps;
; 452  :                         PowerCaps = (PPOWER_CAPABILITIES)pOutBuffer;
; 453  :          
; 454  :                         // Only supports D0 (permanently on) and D4(off).         
; 455  :                         memset(PowerCaps, 0, sizeof(*PowerCaps));

  00174	e3a02030	 mov         r2, #0x30
  00178	e3a01000	 mov         r1, #0
  0017c	e1a00005	 mov         r0, r5
  00180	eb000000	 bl          memset

; 456  :                         PowerCaps->DeviceDx = DX_MASK(D0) | DX_MASK(D4);

  00184	e3a03011	 mov         r3, #0x11
  00188	e5c53000	 strb        r3, [r5]

; 457  :                         *pOutSize = sizeof(*PowerCaps);

  0018c	e3a03030	 mov         r3, #0x30
  00190	e5863000	 str         r3, [r6]

; 458  :                         
; 459  :                         rc = TRUE;

  00194	e3a04001	 mov         r4, #1
  00198	e50b4024	 str         r4, [r11, #-0x24]
  0019c		 |$LN39@RTC_IOCont|

; 460  :                         }

  0019c	ea00000d	 b           |$cleanUp$39901|
  001a0		 |$LN35@RTC_IOCont|

; 462  :                         {
; 463  :                         RETAILMSG(ZONE_ERROR, (L"exception in ioctl\r\n"));

  001a0	e59f3068	 ldr         r3, [pc, #0x68]
  001a4	e5933440	 ldr         r3, [r3, #0x440]
  001a8	e3130001	 tst         r3, #1
  001ac	159f0060	 ldrne       r0, [pc, #0x60]
  001b0	1b000000	 blne        NKDbgPrintfW
  001b4	e51b4024	 ldr         r4, [r11, #-0x24]
  001b8	ea000006	 b           |$cleanUp$39901|
  001bc		 |$LN61@RTC_IOCont|

; 525  :                     }
; 526  :                 }     
; 527  :             break;
; 528  :         }
; 529  : 
; 530  : cleanUp:
; 531  :     DEBUGMSG(ZONE_FUNCTION, (L"-RTC_IOControl(rc = %d)\r\n", rc));
; 532  :     return rc;

  001bc	e51b4020	 ldr         r4, [r11, #-0x20]
  001c0	ea000004	 b           |$cleanUp$39901|
  001c4		 |$LN17@RTC_IOCont|

; 435  :         {
; 436  :         RETAILMSG(ZONE_ERROR, (L"ERROR: RTC_IOControl: "
; 437  :             L"Incorrect context parameter\r\n"
; 438  :             ));

  001c4	e59f3044	 ldr         r3, [pc, #0x44]
  001c8	e5933440	 ldr         r3, [r3, #0x440]
  001cc	e3130001	 tst         r3, #1
  001d0	159f0034	 ldrne       r0, [pc, #0x34]
  001d4	1b000000	 blne        NKDbgPrintfW
  001d8		 |$cleanUp$39901|

; 533  : }

  001d8	e1a00004	 mov         r0, r4
  001dc	e24bd01c	 sub         sp, r11, #0x1C
  001e0	e89d68f0	 ldmia       sp, {r4 - r7, r11, sp, lr}
  001e4	e12fff1e	 bx          lr

			 ENDP  ; |?RTC_IOControl@@YAHKKPAEK0KPAK@Z|, RTC_IOControl

  001e8		 |$LN34@RTC_IOCont|
  001e8		 |$LN63@RTC_IOCont|

; 461  :                     __except(EXCEPTION_EXECUTE_HANDLER) 

  001e8	e52de004	 str         lr, [sp, #-4]!
  001ec		 |$LN37@RTC_IOCont|
  001ec		 |$LN68@RTC_IOCont|
  001ec	e3a00001	 mov         r0, #1
  001f0		 |$LN36@RTC_IOCont|
  001f0	e49df004	 ldr         pc, [sp], #4
  001f4		 |$LN69@RTC_IOCont|
  001f4		 |$LN48@RTC_IOCont|
  001f4		 |$LN65@RTC_IOCont|

; 522  :                 __except(EXCEPTION_EXECUTE_HANDLER) 

  001f4	e52de004	 str         lr, [sp, #-4]!
  001f8		 |$LN51@RTC_IOCont|
  001f8		 |$LN70@RTC_IOCont|
  001f8	e3a00001	 mov         r0, #1
  001fc		 |$LN50@RTC_IOCont|
  001fc	e49df004	 ldr         pc, [sp], #4
  00200		 |$LN71@RTC_IOCont|
  00200		 |$LN41@RTC_IOCont|
  00200		 |$LN66@RTC_IOCont|

; 499  :                 __except(EXCEPTION_EXECUTE_HANDLER) 

  00200	e52de004	 str         lr, [sp, #-4]!
  00204		 |$LN44@RTC_IOCont|
  00204		 |$LN72@RTC_IOCont|
  00204	e3a00001	 mov         r0, #1
  00208		 |$LN43@RTC_IOCont|
  00208	e49df004	 ldr         pc, [sp], #4
  0020c		 |$LN74@RTC_IOCont|
  0020c		 |$LN75@RTC_IOCont|
  0020c	00000000	 DCD         |??_C@_1GI@EPNHDODB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAR?$AAT?$AAC?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@|
  00210		 |$LN76@RTC_IOCont|
  00210	00000000	 DCD         |dpCurSettings|
  00214		 |$LN77@RTC_IOCont|
  00214	00000000	 DCD         |??_C@_1CK@MHJHMPML@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  00218		 |$LN78@RTC_IOCont|
  00218	00000000	 DCD         |??_C@_1CK@OBPLBNBH@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  0021c		 |$LN79@RTC_IOCont|
  0021c	00000000	 DCD         |??_C@_1EA@IPDJKNA@?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  00220		 |$LN80@RTC_IOCont|
  00220	00000000	 DCD         |??_C@_1EE@CCLCCNFC@?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN@|
  00224		 |$LN81@RTC_IOCont|
  00224	00321008	 DCD         0x321008
  00228		 |$LN82@RTC_IOCont|
  00228	00321004	 DCD         0x321004
  0022c		 |$LN83@RTC_IOCont|
  0022c	72746344	 DCD         0x72746344
  00230		 |$LN73@RTC_IOCont|
  00230		 |$LN67@RTC_IOCont|
	IMPORT	|KernelIoControl|
	IMPORT	|TWLReadRegs|

  00000			 AREA	 |.pdata|, PDATA
|$T40174| DCD	|$LN14@RTC_IntrTh|
	DCD	0x40004902
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RTC_IntrThread@@YAKPAX@Z| PROC	; RTC_IntrThread

; 545  : {

  00000		 |$LN14@RTC_IntrTh|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M40171|
  00008	e1a04000	 mov         r4, r0

; 546  :     Device_t *pDevice = (Device_t*)pContext;
; 547  :     DWORD timeout = INFINITE;
; 548  :     UINT8 status;
; 549  :     UINT8 clrStatus = 0;
; 550  : 
; 551  :     // Loop until we are not stopped...
; 552  :     while (!pDevice->threadsExit)

  0000c	e5943018	 ldr         r3, [r4, #0x18]
  00010	e3a02000	 mov         r2, #0
  00014	e5cd2009	 strb        r2, [sp, #9]
  00018	e3530000	 cmp         r3, #0
  0001c	1a00003b	 bne         |$LN11@RTC_IntrTh|
  00020	e3a06803	 mov         r6, #3, 16
  00024	e3a05000	 mov         r5, #0
  00028	e3a07401	 mov         r7, #1, 8
  0002c	e3a08000	 mov         r8, #0
  00030	e3a09000	 mov         r9, #0
  00034	e3a0a040	 mov         r10, #0x40
  00038		 |$LL5@RTC_IntrTh|

; 553  :         {
; 554  :         // Wait for event
; 555  :         WaitForSingleObject(pDevice->hIntrEvent, timeout);

  00038	e5940010	 ldr         r0, [r4, #0x10]
  0003c	e3e01000	 mvn         r1, #0
  00040	eb000000	 bl          WaitForSingleObject

; 556  :         if (pDevice->threadsExit) break;

  00044	e5943018	 ldr         r3, [r4, #0x18]
  00048	e3530000	 cmp         r3, #0
  0004c	1a00002f	 bne         |$LN11@RTC_IntrTh|

; 557  : 
; 558  :         // Get status
; 559  :         status = 0;
; 560  :         TWLReadRegs(pDevice->hTWL, TWL_RTC_STATUS_REG, &status, sizeof(status));

  00050	e594000c	 ldr         r0, [r4, #0xC]
  00054	e3a03001	 mov         r3, #1
  00058	e28d2008	 add         r2, sp, #8
  0005c	e386102a	 orr         r1, r6, #0x2A
  00060	e5cd8008	 strb        r8, [sp, #8]
  00064	eb000000	 bl          TWLReadRegs

; 561  : 
; 562  :         DEBUGMSG(ZONE_INT_THREAD, (L"RTC: interrupt: status=%02X\r\n", status));
; 563  : 
; 564  : 
; 565  :         // Disable the RTC interrupts (this also clears the periodic timer interrupt status)
; 566  :         clrStatus = 0;
; 567  :         TWLWriteRegs(pDevice->hTWL, TWL_RTC_INTERRUPTS_REG, &clrStatus, sizeof(clrStatus));

  00068	e594000c	 ldr         r0, [r4, #0xC]
  0006c	e3a03001	 mov         r3, #1
  00070	e28d2009	 add         r2, sp, #9
  00074	e386102b	 orr         r1, r6, #0x2B
  00078	e5cd9009	 strb        r9, [sp, #9]
  0007c	eb000000	 bl          TWLWriteRegs

; 568  : 
; 569  : 
; 570  :         // Clear alarm status (regardless if set or not)
; 571  :         clrStatus = TWL_RTC_STATUS_ALARM;
; 572  :         TWLWriteRegs(pDevice->hTWL, TWL_RTC_STATUS_REG, &clrStatus, sizeof(clrStatus));

  00080	e594000c	 ldr         r0, [r4, #0xC]
  00084	e3a03001	 mov         r3, #1
  00088	e28d2009	 add         r2, sp, #9
  0008c	e386102a	 orr         r1, r6, #0x2A
  00090	e5cda009	 strb        r10, [sp, #9]
  00094	eb000000	 bl          TWLWriteRegs

; 573  : 
; 574  :         
; 575  :         // Is interrupt caused by alarm?
; 576  :         if ((status & TWL_RTC_STATUS_ALARM) != 0)

  00098	e5dd3008	 ldrb        r3, [sp, #8]
  0009c	e3130040	 tst         r3, #0x40
  000a0	0a000007	 beq         |$LN2@RTC_IntrTh|

; 577  :             {
; 578  :             DEBUGMSG(ZONE_ALARM, (L"RTC: alarm interrupt\r\n"));
; 579  : 
; 580  :             // Simply tell kernel, that ALARM event interrupt occured
; 581  :             KernelIoControl(IOCTL_HAL_RTC_ALARM, NULL, 0, NULL, 0, NULL);

  000a4	e59f0074	 ldr         r0, [pc, #0x74]
  000a8	e3a03000	 mov         r3, #0
  000ac	e3a02000	 mov         r2, #0
  000b0	e3a01000	 mov         r1, #0
  000b4	e58d5004	 str         r5, [sp, #4]
  000b8	e58d5000	 str         r5, [sp]
  000bc	eb000000	 bl          KernelIoControl
  000c0	e5dd3008	 ldrb        r3, [sp, #8]
  000c4		 |$LN2@RTC_IntrTh|

; 582  :             }
; 583  : 
; 584  :         
; 585  :         //  Is interrupt caused by time update?
; 586  :         if ((status & TWM_RTC_STATUS_TIME_EVENT) != 0)

  000c4	e313003c	 tst         r3, #0x3C

; 587  :             {
; 588  :             DEBUGMSG(ZONE_ALARM, (L"RTC: time event interrupt\r\n"));
; 589  : 
; 590  :             // Simply tell kernel, that TIME event interrupt occured
; 591  :             KernelIoControl(IOCTL_HAL_RTC_TIME, NULL, 0, NULL, 0, NULL);

  000c8	13a03000	 movne       r3, #0
  000cc	13a02000	 movne       r2, #0
  000d0	13a01000	 movne       r1, #0
  000d4	13870a11	 orrne       r0, r7, #0x11, 20
  000d8	158d5004	 strne       r5, [sp, #4]
  000dc	158d5000	 strne       r5, [sp]
  000e0	1b000000	 blne        KernelIoControl

; 592  :             }
; 593  : 
; 594  : 
; 595  :         // Re-enable the RTC interrupts
; 596  :         status = TWL_RTC_INTERRUPTS_IT_ALARM | TWL_RTC_INTERRUPTS_IT_TIMER | (UINT8)pDevice->syncPeriod;

  000e4	e5942008	 ldr         r2, [r4, #8]

; 597  :         TWLWriteRegs(pDevice->hTWL, TWL_RTC_INTERRUPTS_REG, &status, sizeof(status));

  000e8	e594000c	 ldr         r0, [r4, #0xC]
  000ec	e3a03001	 mov         r3, #1
  000f0	e382200c	 orr         r2, r2, #0xC
  000f4	e5cd2008	 strb        r2, [sp, #8]
  000f8	e28d2008	 add         r2, sp, #8
  000fc	e386102b	 orr         r1, r6, #0x2B
  00100	eb000000	 bl          TWLWriteRegs
  00104	e5943018	 ldr         r3, [r4, #0x18]
  00108	e3530000	 cmp         r3, #0
  0010c	0affffc9	 beq         |$LL5@RTC_IntrTh|
  00110		 |$LN11@RTC_IntrTh|

; 598  :         }
; 599  : 
; 600  :     return ERROR_SUCCESS;

  00110	e3a00000	 mov         r0, #0

; 601  : }

  00114	e28dd00c	 add         sp, sp, #0xC
  00118	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  0011c	e12fff1e	 bx          lr
  00120		 |$LN15@RTC_IntrTh|
  00120		 |$LN16@RTC_IntrTh|
  00120	01011004	 DCD         0x1011004
  00124		 |$M40172|

			 ENDP  ; |?RTC_IntrThread@@YAKPAX@Z|, RTC_IntrThread

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|

  00000			 AREA	 |.pdata|, PDATA
|$T40187| DCD	|$LN8@DllMain|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllMain| PROC

; 616  : {

  00000		 |$LN8@DllMain|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40184|
  00004	e1a04000	 mov         r4, r0

; 617  : 	UNREFERENCED_PARAMETER(pReserved);
; 618  : 
; 619  :     switch (reason)

  00008	e3510001	 cmp         r1, #1
  0000c	1a000003	 bne         |$LN2@DllMain|

; 620  :         {
; 621  :         case DLL_PROCESS_ATTACH:
; 622  :             RETAILREGISTERZONES((HMODULE)hDLL);

  00010	e59f1014	 ldr         r1, [pc, #0x14]
  00014	eb000000	 bl          RegisterDbgZones

; 623  :             DisableThreadLibraryCalls((HMODULE)hDLL);

  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          DisableThreadLibraryCalls
  00020		 |$LN2@DllMain|

; 624  :             break;
; 625  :         }
; 626  :     return TRUE;

  00020	e3a00001	 mov         r0, #1

; 627  : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$LN9@DllMain|
  0002c		 |$LN10@DllMain|
  0002c	00000000	 DCD         |dpCurSettings|
  00030		 |$M40185|

			 ENDP  ; |DllMain|

	EXPORT	|?RTC_Init@@YAKPBGPBX@Z|		; RTC_Init
	IMPORT	|GPIOClose|
	IMPORT	|GPIOSetBit|
	IMPORT	|GPIOOpen|
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|TWLWakeEnable|
	IMPORT	|TWLInterruptInitialize|
	IMPORT	|CreateEventW|
	IMPORT	|TWLOpen|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|LocalAlloc|

  00000			 AREA	 |.pdata|, PDATA
|$T40203| DCD	|$LN21@RTC_Init|
	DCD	0x40005202
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?RTC_Init@@YAKPBGPBX@Z| PROC		; RTC_Init

; 189  : {

  00000		 |$LN21@RTC_Init|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M40200|
  00008	e1a06000	 mov         r6, r0

; 190  :     DWORD rc = (DWORD)NULL;
; 191  :     Device_t *pDevice = NULL;
; 192  : 
; 193  : 	UNREFERENCED_PARAMETER(pBusContext);
; 194  : 
; 195  :     DEBUGMSG(ZONE_FUNCTION, (
; 196  :         L"+RTC_Init(%s, 0x%08x)\r\n", szContext, pBusContext
; 197  :         ));
; 198  : 
; 199  :     // Create device structure
; 200  :     pDevice = (Device_t *)LocalAlloc(LPTR, sizeof(Device_t));

  0000c	e3a01024	 mov         r1, #0x24
  00010	e3a00040	 mov         r0, #0x40
  00014	e3a04000	 mov         r4, #0
  00018	eb000000	 bl          LocalAlloc
  0001c	e1b05000	 movs        r5, r0

; 201  :     if (pDevice == NULL)

  00020	0a00003e	 beq         |$LN18@RTC_Init|

; 202  :         {
; 203  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: RTC_Init: "
; 204  :             L"Failed allocate TWL controller structure\r\n"
; 205  :             ));
; 206  :         goto cleanUp;
; 207  :         }
; 208  : 
; 209  :     // Set cookie
; 210  :     pDevice->cookie = RTC_DEVICE_COOKIE;

  00024	e59f2118	 ldr         r2, [pc, #0x118]

; 211  :     pDevice->powerState = D4;
; 212  : 
; 213  :     // Read device parameters
; 214  :     if (GetDeviceRegistryParams(
; 215  :             szContext, pDevice, dimof(s_deviceRegParams), s_deviceRegParams
; 216  :             ) != ERROR_SUCCESS)

  00028	e59f3110	 ldr         r3, [pc, #0x110]
  0002c	e3a0e004	 mov         lr, #4
  00030	e5852000	 str         r2, [r5]
  00034	e3a02003	 mov         r2, #3
  00038	e1a01005	 mov         r1, r5
  0003c	e1a00006	 mov         r0, r6
  00040	e585e020	 str         lr, [r5, #0x20]
  00044	eb000000	 bl          GetDeviceRegistryParams
  00048	e3500000	 cmp         r0, #0
  0004c	1a000033	 bne         |$LN18@RTC_Init|

; 217  :         {
; 218  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: RTC_Init: "
; 219  :             L"Failed read TWL driver registry parameters\r\n"
; 220  :             ));
; 221  :         goto cleanUp;
; 222  :         }
; 223  : 
; 224  :     // Open parent bus
; 225  :     pDevice->hTWL = TWLOpen();

  00050	eb000000	 bl          TWLOpen
  00054	e3500000	 cmp         r0, #0
  00058	e585000c	 str         r0, [r5, #0xC]

; 226  :     if (pDevice->hTWL == NULL)

  0005c	0a00002f	 beq         |$LN18@RTC_Init|

; 227  :         {
; 228  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: RTC_Init: "
; 229  :             L"Failed open TWL bus driver\r\n"
; 230  :             ));
; 231  :         goto cleanUp;
; 232  :         }
; 233  : 
; 234  : 
; 235  :     // Create interrupt event
; 236  :     pDevice->hIntrEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00060	e3a03000	 mov         r3, #0
  00064	e3a02000	 mov         r2, #0
  00068	e3a01000	 mov         r1, #0
  0006c	e3a00000	 mov         r0, #0
  00070	eb000000	 bl          CreateEventW
  00074	e1b02000	 movs        r2, r0
  00078	e5852010	 str         r2, [r5, #0x10]

; 237  :     if (pDevice->hIntrEvent == NULL)

  0007c	0a000027	 beq         |$LN18@RTC_Init|

; 238  :         {
; 239  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: RTC_Init: "
; 240  :             L"Failed create interrupt event\r\n"
; 241  :             ));
; 242  :         goto cleanUp;
; 243  :         }
; 244  : 
; 245  :     // Associate event with TWL RTC interrupt
; 246  :     if (!TWLInterruptInitialize(pDevice->hTWL, TWL_INTR_RTC_IT, pDevice->hIntrEvent))

  00080	e595000c	 ldr         r0, [r5, #0xC]
  00084	e59f10b0	 ldr         r1, [pc, #0xB0]
  00088	eb000000	 bl          TWLInterruptInitialize
  0008c	e3500000	 cmp         r0, #0
  00090	0a000022	 beq         |$LN18@RTC_Init|

; 247  :         {
; 248  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: RTC_Init: "
; 249  :             L"Failed associate event with TWL RTC interrupt\r\n"
; 250  :             ));
; 251  :         goto cleanUp;
; 252  :         }
; 253  :   
; 254  :     // Enable RTC event
; 255  :     if (!TWLInterruptMask(pDevice->hTWL, TWL_INTR_RTC_IT, FALSE))

  00094	e595000c	 ldr         r0, [r5, #0xC]
  00098	e59f109c	 ldr         r1, [pc, #0x9C]
  0009c	e3a02000	 mov         r2, #0
  000a0	eb000000	 bl          TWLInterruptMask

; 256  :         {
; 257  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: RTC_Init: "
; 258  :             L"Failed associate event with TWL fake interrupt\r\n"
; 259  :             ));
; 260  :         }
; 261  : 
; 262  :     // Enable alarm wakeup
; 263  :     if (pDevice->enableWake)

  000a4	e595301c	 ldr         r3, [r5, #0x1C]
  000a8	e3530000	 cmp         r3, #0

; 264  :         {
; 265  :         TWLWakeEnable(pDevice->hTWL, TWL_INTR_RTC_IT, TRUE);

  000ac	1595000c	 ldrne       r0, [r5, #0xC]
  000b0	159f1084	 ldrne       r1, [pc, #0x84]
  000b4	13a02001	 movne       r2, #1
  000b8	1b000000	 blne        TWLWakeEnable

; 266  :         }
; 267  : 
; 268  :     // Start interrupt service thread
; 269  :     pDevice->threadsExit = FALSE;
; 270  :     pDevice->hIntrThread = CreateThread(
; 271  :         NULL, 0, RTC_IntrThread, pDevice, 0,NULL
; 272  :         );

  000bc	e59f2074	 ldr         r2, [pc, #0x74]
  000c0	e3a0e000	 mov         lr, #0
  000c4	e1a03005	 mov         r3, r5
  000c8	e3a01000	 mov         r1, #0
  000cc	e3a00000	 mov         r0, #0
  000d0	e585e018	 str         lr, [r5, #0x18]
  000d4	e58de004	 str         lr, [sp, #4]
  000d8	e58de000	 str         lr, [sp]
  000dc	eb000000	 bl          CreateThread
  000e0	e3500000	 cmp         r0, #0
  000e4	e5850014	 str         r0, [r5, #0x14]

; 273  :     if (!pDevice->hIntrThread)

  000e8	0a00000c	 beq         |$LN18@RTC_Init|

; 274  :         {
; 275  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: RTC_Init: "
; 276  :             L"Failed create interrupt thread\r\n"
; 277  :             ));
; 278  :         goto cleanUp;
; 279  :         }
; 280  : 
; 281  :     // Set thread priority
; 282  :     CeSetThreadPriority(pDevice->hIntrThread, pDevice->priority256);

  000ec	e5951004	 ldr         r1, [r5, #4]
  000f0	eb000000	 bl          CeSetThreadPriority

; 283  : 
; 284  :     // update power state
; 285  :     SetPowerState(pDevice, D0);

  000f4	e3a01000	 mov         r1, #0
  000f8	e1a00005	 mov         r0, r5
  000fc	eb000000	 bl          |?SetPowerState@@YAHPAUDevice_t@@W4_CEDEVICE_POWER_STATE@@@Z|

; 286  : 
; 287  : 	{
; 288  : 		HANDLE hGPIO = GPIOOpen();

  00100	eb000000	 bl          GPIOOpen

; 289  : 		GPIOSetBit(hGPIO,TPS659XX_MSECURE_GPIO);

  00104	e3a01040	 mov         r1, #0x40
  00108	e1a04000	 mov         r4, r0
  0010c	eb000000	 bl          GPIOSetBit

; 290  : 		GPIOClose(hGPIO);

  00110	e1a00004	 mov         r0, r4
  00114	eb000000	 bl          GPIOClose

; 291  : 	}
; 292  : 
; 293  :     // Return non-null value
; 294  :     rc = (DWORD)pDevice;

  00118	e1a04005	 mov         r4, r5
  0011c		 |$cleanUp$39835|

; 295  :     
; 296  : cleanUp:
; 297  :     if (rc == 0) RTC_Deinit((DWORD)pDevice);

  0011c	ea000001	 b           |$LN1@RTC_Init|
  00120		 |$LN18@RTC_Init|
  00120	e1a00005	 mov         r0, r5
  00124	eb000000	 bl          |?RTC_Deinit@@YAHK@Z|
  00128		 |$LN1@RTC_Init|

; 298  :     DEBUGMSG(ZONE_FUNCTION, (L"-RTC_Init(rc = %d\r\n", rc));
; 299  :     return rc;
; 300  : }

  00128	e1a00004	 mov         r0, r4
  0012c	e28dd008	 add         sp, sp, #8
  00130	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00134	e12fff1e	 bx          lr
  00138		 |$LN22@RTC_Init|
  00138		 |$LN23@RTC_Init|
  00138	00000000	 DCD         |?RTC_IntrThread@@YAKPAX@Z|
  0013c		 |$LN24@RTC_Init|
  0013c	03005003	 DCD         0x3005003
  00140		 |$LN25@RTC_Init|
  00140	00000000	 DCD         |s_deviceRegParams|
  00144		 |$LN26@RTC_Init|
  00144	72746344	 DCD         0x72746344
  00148		 |$M40201|

			 ENDP  ; |?RTC_Init@@YAKPBGPBX@Z|, RTC_Init

	END
