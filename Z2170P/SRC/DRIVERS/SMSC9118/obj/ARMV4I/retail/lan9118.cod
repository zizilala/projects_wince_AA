; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\EVM_OMAP3530\SRC\DRIVERS\SMSC9118\lan9118.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|csAccessMacReg|, 0x14

	 COMMON	|csAccessPhyReg|, 0x14

	EXPORT	|SetRegDW|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T47788| DCD	|$LN5@SetRegDW|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetRegDW| PROC

; 132  : {

  00000		 |$LN5@SetRegDW|
  00000		 |$M47785|

; 133  : 	(*(volatile DWORD *)(dwBase + dwOffset)) = dwVal;

  00000	e7802001	 str         r2, [r0, +r1]

; 134  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M47786|

			 ENDP  ; |SetRegDW|

	EXPORT	|GetRegDW|

  00000			 AREA	 |.pdata|, PDATA
|$T47799| DCD	|$LN5@GetRegDW|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetRegDW| PROC

; 139  : {

  00000		 |$LN5@GetRegDW|
  00000		 |$M47796|

; 140  : 	return (DWORD)(*(volatile DWORD *)(dwBase + dwOffset));

  00000	e7900001	 ldr         r0, [r0, +r1]

; 141  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M47797|

			 ENDP  ; |GetRegDW|

	EXPORT	|WriteFifo|

  00000			 AREA	 |.pdata|, PDATA
|$T47813| DCD	|$LN9@WriteFifo|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WriteFifo| PROC

; 148  : {

  00000		 |$LN9@WriteFifo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47810|
  00004	e3530000	 cmp         r3, #0

; 149  : 	volatile DWORD * pdwReg;
; 150  : 	pdwReg = (volatile DWORD *)(dwBase + dwOffset);
; 151  : 	
; 152  : 	while (dwDwordCount)

  00008	0a000003	 beq         |$LN1@WriteFifo|
  0000c		 |$LL2@WriteFifo|

; 153  : 	{
; 154  : 		*pdwReg = *pdwBuf++;

  0000c	e492e004	 ldr         lr, [r2], #4

; 155  : 		dwDwordCount--;

  00010	e2533001	 subs        r3, r3, #1
  00014	e780e001	 str         lr, [r0, +r1]
  00018	1afffffb	 bne         |$LL2@WriteFifo|
  0001c		 |$LN1@WriteFifo|

; 156  : 	}
; 157  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M47811|

			 ENDP  ; |WriteFifo|

	EXPORT	|ReadFifo|

  00000			 AREA	 |.pdata|, PDATA
|$T47827| DCD	|$LN9@ReadFifo|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReadFifo| PROC

; 164  : {

  00000		 |$LN9@ReadFifo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47824|
  00004	e3530000	 cmp         r3, #0

; 165  : 	const volatile DWORD * const pdwReg = 
; 166  : 		(const volatile DWORD * const)(dwBase + dwOffset);
; 167  : 	
; 168  : 	while (dwDwordCount)

  00008	0a000003	 beq         |$LN1@ReadFifo|
  0000c		 |$LL2@ReadFifo|

; 169  : 	{
; 170  : 		*pdwBuf++ = *pdwReg;

  0000c	e790e001	 ldr         lr, [r0, +r1]

; 171  : 		dwDwordCount--;

  00010	e2533001	 subs        r3, r3, #1
  00014	e482e004	 str         lr, [r2], #4
  00018	1afffffb	 bne         |$LL2@ReadFifo|
  0001c		 |$LN1@ReadFifo|

; 172  : 	}
; 173  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M47825|

			 ENDP  ; |ReadFifo|

	EXPORT	|Lan_WriteTxFifo|
	IMPORT	|NdisStallExecution|

  00000			 AREA	 |.pdata|, PDATA
|$T47850| DCD	|$LN11@Lan_WriteT|
	DCD	0x40000e01
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_WriteTxFifo| PROC

; 94   : {

  00000		 |$LN11@Lan_WriteT|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M47847|
  00004	e1a04002	 mov         r4, r2
  00008	e1a05001	 mov         r5, r1
  0000c	e1a06000	 mov         r6, r0

; 95   :     NdisStallExecution(100UL);

  00010	e3a00064	 mov         r0, #0x64
  00014	eb000000	 bl          NdisStallExecution

; 96   : 	WriteFifo(dwLanBase, TX_DATA_FIFO_PORT, pdwBuf, dwDwordCount);

  00018	e3540000	 cmp         r4, #0
  0001c	0a000003	 beq         |$LN3@Lan_WriteT|
  00020		 |$LL4@Lan_WriteT|
  00020	e4953004	 ldr         r3, [r5], #4
  00024	e2544001	 subs        r4, r4, #1
  00028	e5863020	 str         r3, [r6, #0x20]
  0002c	1afffffb	 bne         |$LL4@Lan_WriteT|
  00030		 |$LN3@Lan_WriteT|

; 97   : }

  00030	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M47848|

			 ENDP  ; |Lan_WriteTxFifo|

	EXPORT	|Lan_ReadRxFifo|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T47872| DCD	|$LN11@Lan_ReadRx|
	DCD	0x40000700
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_ReadRxFifo| PROC

; 107  : {

  00000		 |$LN11@Lan_ReadRx|
  00000		 |$M47869|
  00000	e3520000	 cmp         r2, #0

; 108  : 	ReadFifo(dwLanBase, RX_DATA_FIFO_PORT, pdwBuf, dwDwordCount);

  00004	0a000003	 beq         |$LN3@Lan_ReadRx|
  00008		 |$LL4@Lan_ReadRx|
  00008	e5903000	 ldr         r3, [r0]
  0000c	e2522001	 subs        r2, r2, #1
  00010	e4813004	 str         r3, [r1], #4
  00014	1afffffb	 bne         |$LL4@Lan_ReadRx|
  00018		 |$LN3@Lan_ReadRx|

; 109  : }

  00018	e12fff1e	 bx          lr
  0001c		 |$M47870|

			 ENDP  ; |Lan_ReadRxFifo|

; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T47889| DCD	|$LN14@Lan_MacNot|
	DCD	0x40000b00
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_MacNotBusy| PROC

; 119  : {

  00000		 |$LN14@Lan_MacNot|
  00000		 |$M47886|

; 120  : 	int i=0;
; 121  : 	// wait for MAC not busy, w/ timeout
; 122  : 	for(i=0;i<40;i++)

  00000	e3a02000	 mov         r2, #0
  00004		 |$LL4@Lan_MacNot|

; 123  : 	{
; 124  : 		if((GetRegDW(dwLanBase, MAC_CSR_CMD) & MAC_CSR_CMD_CSR_BUSY_)==(0UL)) {

  00004	e59030a4	 ldr         r3, [r0, #0xA4]
  00008	e3130102	 tst         r3, #2, 2
  0000c	0a000004	 beq         |$LN10@Lan_MacNot|
  00010	e2822001	 add         r2, r2, #1
  00014	e3520028	 cmp         r2, #0x28
  00018	bafffff9	 blt         |$LL4@Lan_MacNot|

; 126  : 		}
; 127  : 	}
; 128  : 	SMSC_WARNING1("timeout waiting for MAC not BUSY. MAC_CSR_CMD = 0x%08lX\n",
; 129  : 		(DWORD)(*(volatile DWORD *)(dwLanBase + MAC_CSR_CMD)));
; 130  : 	return FALSE;

  0001c	e3a00000	 mov         r0, #0

; 131  : }

  00020	e12fff1e	 bx          lr
  00024		 |$LN10@Lan_MacNot|

; 125  : 			return TRUE;

  00024	e3a00001	 mov         r0, #1

; 131  : }

  00028	e12fff1e	 bx          lr
  0002c		 |$M47887|

			 ENDP  ; |Lan_MacNotBusy|

	EXPORT	|Lan_GetMacRegDW|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|EnterCriticalSection|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T47928| DCD	|$LN25@Lan_GetMac|
	DCD	0x40001c01
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_GetMacRegDW| PROC

; 141  : {

  00000		 |$LN25@Lan_GetMac|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47925|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 142  : 	DWORD	dwRet;
; 143  : 
; 144  : 	// wait until not busy, w/ timeout
; 145  : 	if (GetRegDW(dwLanBase, MAC_CSR_CMD) & MAC_CSR_CMD_CSR_BUSY_)

  0000c	e59430a4	 ldr         r3, [r4, #0xA4]
  00010	e3130102	 tst         r3, #2, 2

; 146  : 	{
; 147  : 		SMSC_WARNING0("LanGetMacRegDW() failed MAC already busy at entry\n");
; 148  : 		return 0xFFFFFFFFUL;

  00014	13e04000	 mvnne       r4, #0
  00018	1a000010	 bne         |$LN4@Lan_GetMac|

; 149  : 	}
; 150  : 
; 151  : 	EnterCriticalSection(&csAccessMacReg);

  0001c	e59f0048	 ldr         r0, [pc, #0x48]
  00020	eb000000	 bl          EnterCriticalSection

; 152  : 	// send the MAC Cmd w/ offset
; 153  : 	SetRegDW(dwLanBase, MAC_CSR_CMD, 
; 154  : 		((dwOffset & 0x000000FFUL) | MAC_CSR_CMD_CSR_BUSY_ | MAC_CSR_CMD_R_NOT_W_));

  00024	e20530ff	 and         r3, r5, #0xFF
  00028	e3833103	 orr         r3, r3, #3, 2
  0002c	e58430a4	 str         r3, [r4, #0xA4]

; 155  : 
; 156  : 	// wait for the read to happen, w/ timeout
; 157  : 	if (!Lan_MacNotBusy(dwLanBase))

  00030	e3a02000	 mov         r2, #0
  00034		 |$LL13@Lan_GetMac|
  00034	e59430a4	 ldr         r3, [r4, #0xA4]
  00038	e3130102	 tst         r3, #2, 2
  0003c	0a000004	 beq         |$LN2@Lan_GetMac|
  00040	e2822001	 add         r2, r2, #1
  00044	e3520028	 cmp         r2, #0x28
  00048	bafffff9	 blt         |$LL13@Lan_GetMac|

; 158  : 	{
; 159  : 		SMSC_WARNING0("LanGetMacRegDW() failed waiting for MAC not busy after read\n");
; 160  : 		dwRet = 0xFFFFFFFFUL;

  0004c	e3e04000	 mvn         r4, #0

; 161  : 	}
; 162  : 	else

  00050	ea000000	 b           |$LN1@Lan_GetMac|
  00054		 |$LN2@Lan_GetMac|

; 163  : 	{
; 164  : 		// finally, return the read data
; 165  : 		dwRet = GetRegDW(dwLanBase, MAC_CSR_DATA);

  00054	e59440a8	 ldr         r4, [r4, #0xA8]
  00058		 |$LN1@Lan_GetMac|

; 166  : 	}
; 167  : 
; 168  : 	LeaveCriticalSection(&csAccessMacReg);

  00058	e59f000c	 ldr         r0, [pc, #0xC]
  0005c	eb000000	 bl          LeaveCriticalSection

; 169  : 	return dwRet;

  00060		 |$LN4@Lan_GetMac|

; 170  : }

  00060	e1a00004	 mov         r0, r4
  00064	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$LN26@Lan_GetMac|
  0006c		 |$LN27@Lan_GetMac|
  0006c	00000000	 DCD         |csAccessMacReg|
  00070		 |$M47926|

			 ENDP  ; |Lan_GetMacRegDW|

	EXPORT	|Lan_SetMacRegDW|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T47967| DCD	|$LN24@Lan_SetMac|
	DCD	0x40001901
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_SetMacRegDW| PROC

; 179  : {

  00000		 |$LN24@Lan_SetMac|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M47964|
  00004	e1a05002	 mov         r5, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a04000	 mov         r4, r0

; 180  : 	if (GetRegDW(dwLanBase, MAC_CSR_CMD) & MAC_CSR_CMD_CSR_BUSY_)

  00010	e59430a4	 ldr         r3, [r4, #0xA4]
  00014	e3130102	 tst         r3, #2, 2
  00018	1a00000e	 bne         |$LN3@Lan_SetMac|

; 181  : 	{
; 182  : 		SMSC_WARNING0("LanSetMacRegDW() failed MAC already busy at entry\n");
; 183  : 		return;
; 184  : 	}
; 185  : 
; 186  : 	EnterCriticalSection(&csAccessMacReg);

  0001c	e59f003c	 ldr         r0, [pc, #0x3C]
  00020	eb000000	 bl          EnterCriticalSection

; 187  : 
; 188  : 	// send the data to write
; 189  : 	SetRegDW(dwLanBase, MAC_CSR_DATA, dwVal);
; 190  : 
; 191  : 	// do the actual write
; 192  : 	SetRegDW(dwLanBase, MAC_CSR_CMD, 
; 193  : 		((dwOffset & 0x000000FFUL) | MAC_CSR_CMD_CSR_BUSY_));

  00024	e20630ff	 and         r3, r6, #0xFF
  00028	e3833102	 orr         r3, r3, #2, 2
  0002c	e58450a8	 str         r5, [r4, #0xA8]
  00030	e58430a4	 str         r3, [r4, #0xA4]

; 194  : 
; 195  : 	// wait for the write to complete, w/ timeout
; 196  : 	if (!Lan_MacNotBusy(dwLanBase))

  00034	e3a02000	 mov         r2, #0
  00038		 |$LL14@Lan_SetMac|
  00038	e59430a4	 ldr         r3, [r4, #0xA4]
  0003c	e3130102	 tst         r3, #2, 2
  00040	0a000002	 beq         |$LN20@Lan_SetMac|
  00044	e2822001	 add         r2, r2, #1
  00048	e3520028	 cmp         r2, #0x28
  0004c	bafffff9	 blt         |$LL14@Lan_SetMac|
  00050		 |$LN20@Lan_SetMac|

; 197  : 	{
; 198  : 		SMSC_WARNING0("LanSetMacRegDW() failed waiting for MAC not busy after write\n");
; 199  : 	}
; 200  : 
; 201  : 	LeaveCriticalSection(&csAccessMacReg);

  00050	e59f0008	 ldr         r0, [pc, #8]
  00054	eb000000	 bl          LeaveCriticalSection
  00058		 |$LN3@Lan_SetMac|

; 202  : }

  00058	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN25@Lan_SetMac|
  00060		 |$LN26@Lan_SetMac|
  00060	00000000	 DCD         |csAccessMacReg|
  00064		 |$M47965|

			 ENDP  ; |Lan_SetMacRegDW|

	EXPORT	|Lan_GetMiiRegW|

  00000			 AREA	 |.pdata|, PDATA
|$T47986| DCD	|$LN14@Lan_GetMii|
	DCD	0x40002b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_GetMiiRegW| PROC

; 214  : {

  00000		 |$LN14@Lan_GetMii|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M47983|
  00004	e1a05002	 mov         r5, r2
  00008	e1a07001	 mov         r7, r1
  0000c	e1a06000	 mov         r6, r0

; 215  : 	DWORD dwAddr;
; 216  : 	WORD  wRet = (WORD)0xFFFF;

  00010	e3a08cff	 mov         r8, #0xFF, 24

; 217  : 	int i=0;
; 218  : 
; 219  : 	// confirm MII not busy
; 220  : 	if ((Lan_GetMacRegDW(dwLanBase, MII_ACC) & MII_ACC_MII_BUSY_) != 0UL)

  00014	e3a01006	 mov         r1, #6
  00018	e38840ff	 orr         r4, r8, #0xFF
  0001c	eb000000	 bl          Lan_GetMacRegDW
  00020	e3100001	 tst         r0, #1

; 221  : 	{
; 222  : 		SMSC_WARNING0("MII is busy in MiiGetReg???\r\n");
; 223  : 		return (WORD)0;

  00024	13a04000	 movne       r4, #0
  00028	1a00001b	 bne         |$LN7@Lan_GetMii|

; 224  : 	}
; 225  : 
; 226  : 	EnterCriticalSection(&csAccessPhyReg);

  0002c	e59f0074	 ldr         r0, [pc, #0x74]
  00030	eb000000	 bl          EnterCriticalSection

; 227  : 
; 228  : 	// set the address, index & direction (read from PHY)
; 229  : 	dwAddr = ((dwPhyAddress & 0x1FUL)<<11) | ((dwMiiIndex & 0x1FUL)<<6);
; 230  : 	Lan_SetMacRegDW(dwLanBase, MII_ACC, dwAddr);

  00034	e207201f	 and         r2, r7, #0x1F
  00038	e205301f	 and         r3, r5, #0x1F
  0003c	e1833282	 orr         r3, r3, r2, lsl #5
  00040	e1a02303	 mov         r2, r3, lsl #6
  00044	e3a01006	 mov         r1, #6
  00048	e1a00006	 mov         r0, r6
  0004c	eb000000	 bl          Lan_SetMacRegDW

; 231  : 
; 232  : 	// wait for read to complete w/ timeout
; 233  : 	for(i=0;i<100;i++) {

  00050	e3a05000	 mov         r5, #0
  00054		 |$LL5@Lan_GetMii|

; 234  : 		// see if MII is finished yet
; 235  : 		if ((Lan_GetMacRegDW(dwLanBase, MII_ACC) & MII_ACC_MII_BUSY_) == 0UL)

  00054	e3a01006	 mov         r1, #6
  00058	e1a00006	 mov         r0, r6
  0005c	eb000000	 bl          Lan_GetMacRegDW
  00060	e3100001	 tst         r0, #1
  00064	0a000003	 beq         |$LN10@Lan_GetMii|
  00068	e2855001	 add         r5, r5, #1
  0006c	e3550064	 cmp         r5, #0x64
  00070	bafffff7	 blt         |$LL5@Lan_GetMii|
  00074	ea000004	 b           |$LN3@Lan_GetMii|
  00078		 |$LN10@Lan_GetMii|

; 236  : 		{
; 237  : 			// get the read data from the MAC & return i
; 238  : 			wRet = ((WORD)Lan_GetMacRegDW(dwLanBase, MII_DATA));

  00078	e3a01007	 mov         r1, #7
  0007c	e1a00006	 mov         r0, r6
  00080	eb000000	 bl          Lan_GetMacRegDW
  00084	e1a04800	 mov         r4, r0, lsl #16
  00088	e1a04824	 mov         r4, r4, lsr #16
  0008c		 |$LN3@Lan_GetMii|

; 239  : 			break;
; 240  : 		}
; 241  : 	}
; 242  : 	if (i == 100) {
; 243  : 		SMSC_WARNING0("timeout waiting for MII write to finish\n");
; 244  : 		wRet = ((WORD)0xFFFFU);
; 245  : 	}
; 246  : 
; 247  : 	LeaveCriticalSection(&csAccessPhyReg);

  0008c	e59f0014	 ldr         r0, [pc, #0x14]
  00090	e3550064	 cmp         r5, #0x64
  00094	038840ff	 orreq       r4, r8, #0xFF
  00098	eb000000	 bl          LeaveCriticalSection

; 248  : 	return wRet;

  0009c		 |$LN7@Lan_GetMii|

; 249  : 	
; 250  : }

  0009c	e1a00004	 mov         r0, r4
  000a0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$LN15@Lan_GetMii|
  000a8		 |$LN16@Lan_GetMii|
  000a8	00000000	 DCD         |csAccessPhyReg|
  000ac		 |$M47984|

			 ENDP  ; |Lan_GetMiiRegW|

	EXPORT	|Lan_SetMiiRegW|

  00000			 AREA	 |.pdata|, PDATA
|$T48003| DCD	|$LN13@Lan_SetMii|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_SetMiiRegW| PROC

; 263  : {

  00000		 |$LN13@Lan_SetMii|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48000|
  00004	e1a04003	 mov         r4, r3
  00008	e1a06002	 mov         r6, r2
  0000c	e1a07001	 mov         r7, r1
  00010	e1a05000	 mov         r5, r0

; 264  : 	DWORD dwAddr;
; 265  : 	int i=0;
; 266  : 
; 267  : 	// confirm MII not busy
; 268  : 	if ((Lan_GetMacRegDW(dwLanBase, MII_ACC) & MII_ACC_MII_BUSY_) != 0UL)

  00014	e3a01006	 mov         r1, #6
  00018	eb000000	 bl          Lan_GetMacRegDW
  0001c	e3100001	 tst         r0, #1
  00020	1a000018	 bne         |$LN6@Lan_SetMii|

; 269  : 	{
; 270  : 		SMSC_WARNING0("MII is busy in MiiGetReg???\n");
; 271  : 		return;
; 272  : 	}
; 273  : 
; 274  : 	EnterCriticalSection(&csAccessPhyReg);

  00024	e59f0064	 ldr         r0, [pc, #0x64]
  00028	eb000000	 bl          EnterCriticalSection

; 275  : 
; 276  : 	// put the data to write in the MAC
; 277  : 	Lan_SetMacRegDW(dwLanBase, MII_DATA, (DWORD)wVal);

  0002c	e1a02004	 mov         r2, r4
  00030	e3a01007	 mov         r1, #7
  00034	e1a00005	 mov         r0, r5
  00038	eb000000	 bl          Lan_SetMacRegDW

; 278  : 
; 279  : 	// set the address, index & direction (write to PHY)
; 280  : 	dwAddr = ((dwPhyAddress & 0x1FUL)<<11) | ((dwMiiIndex & 0x1FUL)<<6) | MII_ACC_MII_WRITE_;
; 281  : 	Lan_SetMacRegDW(dwLanBase, MII_ACC, dwAddr);

  0003c	e207101f	 and         r1, r7, #0x1F
  00040	e206301f	 and         r3, r6, #0x1F
  00044	e1833281	 orr         r3, r3, r1, lsl #5
  00048	e1a03303	 mov         r3, r3, lsl #6
  0004c	e3832002	 orr         r2, r3, #2
  00050	e3a01006	 mov         r1, #6
  00054	e1a00005	 mov         r0, r5
  00058	eb000000	 bl          Lan_SetMacRegDW

; 282  : 
; 283  : 	// wait for write to complete w/ timeout
; 284  : 	for(i=0;i<100;i++) {

  0005c	e3a04000	 mov         r4, #0
  00060		 |$LL4@Lan_SetMii|

; 285  : 		// see if MII is finished yet
; 286  : 		if ((Lan_GetMacRegDW(dwLanBase, MII_ACC) & MII_ACC_MII_BUSY_) == 0UL)

  00060	e3a01006	 mov         r1, #6
  00064	e1a00005	 mov         r0, r5
  00068	eb000000	 bl          Lan_GetMacRegDW
  0006c	e3100001	 tst         r0, #1
  00070	0a000002	 beq         |$LN9@Lan_SetMii|
  00074	e2844001	 add         r4, r4, #1
  00078	e3540064	 cmp         r4, #0x64
  0007c	bafffff7	 blt         |$LL4@Lan_SetMii|
  00080		 |$LN9@Lan_SetMii|

; 287  : 		{
; 288  : 			LeaveCriticalSection(&csAccessPhyReg);

  00080	e59f0008	 ldr         r0, [pc, #8]
  00084	eb000000	 bl          LeaveCriticalSection

; 289  : 			return;
; 290  : 		}
; 291  : 	}
; 292  : 
; 293  : 	LeaveCriticalSection(&csAccessPhyReg);

  00088		 |$LN6@Lan_SetMii|

; 294  : 	SMSC_WARNING0("timeout waiting for MII write to finish\r\n");
; 295  : 	return;
; 296  : }

  00088	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN14@Lan_SetMii|
  00090		 |$LN15@Lan_SetMii|
  00090	00000000	 DCD         |csAccessPhyReg|
  00094		 |$M48001|

			 ENDP  ; |Lan_SetMiiRegW|

	EXPORT	|Lan_Initialize|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|memset|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48030| DCD	|$LN19@Lan_Initia|
	DCD	0x40002501
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_Initialize| PROC

; 311  : {

  00000		 |$LN19@Lan_Initia|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M48027|
  00004	e1a04001	 mov         r4, r1
  00008	e1b05000	 movs        r5, r0

; 312  : 	BOOL  	result = FALSE;

  0000c	e3a06000	 mov         r6, #0

; 313  : 	DWORD 	dwTimeout, dwTemp;
; 314  : 
; 315  : 	SMSC_TRACE2(DBG_INIT,"+Lan_Initialize(dwLanBase=0x%08lX, pLan9118Data=0x%08lX)\r\n", dwLanBase,(DWORD)pLan9118Data);
; 316  : 
; 317  : 	if (pLan9118Data==NULL) {

  00010	0a00001a	 beq         |$DONE$46993|

; 318  : 		SMSC_WARNING0("Lan_Initialize(pLan9118Data==NULL)\r\n");
; 319  : 		goto DONE;
; 320  : 	}
; 321  : 
; 322  : 	InitializeCriticalSection(&csAccessMacReg);

  00014	e59f0074	 ldr         r0, [pc, #0x74]
  00018	eb000000	 bl          InitializeCriticalSection

; 323  : 	InitializeCriticalSection(&csAccessPhyReg);

  0001c	e59f0068	 ldr         r0, [pc, #0x68]
  00020	eb000000	 bl          InitializeCriticalSection

; 324  : 
; 325  : 	SMSC_ZERO_MEMORY(pLan9118Data,sizeof(LAN9118_DATA));

  00024	e3a020cc	 mov         r2, #0xCC
  00028	e3a01000	 mov         r1, #0
  0002c	e1a00005	 mov         r0, r5
  00030	eb000000	 bl          memset

; 326  : 
; 327  : 	if (dwLanBase==0x0UL) {

  00034	e3540000	 cmp         r4, #0
  00038	0a000010	 beq         |$DONE$46993|

; 328  : 		SMSC_WARNING0("Lan_Initialize(dwLanBase==0)\r\n");
; 329  : 		goto DONE;
; 330  : 	}
; 331  : 
; 332  : 	SetRegDW(dwLanBase, HW_CFG, HW_CFG_SRST_);

  0003c	e3a03b61	 mov         r3, #0x61, 22
  00040	e3a08001	 mov         r8, #1
  00044	e5848074	 str         r8, [r4, #0x74]

; 333  : 	dwTimeout=100000UL;

  00048	e3837e2a	 orr         r7, r3, #0x2A, 28
  0004c		 |$LL5@Lan_Initia|

; 334  : 	do {
; 335  : 		SMSC_MICRO_DELAY(10U);

  0004c	e3a0000a	 mov         r0, #0xA
  00050	eb000000	 bl          NdisStallExecution

; 336  : 		dwTemp = GetRegDW(dwLanBase,HW_CFG);

  00054	e5943074	 ldr         r3, [r4, #0x74]

; 337  : 		dwTimeout--;

  00058	e2577001	 subs        r7, r7, #1

; 338  : 	} while((dwTimeout > 0UL) && (dwTemp & HW_CFG_SRST_));

  0005c	0a000001	 beq         |$LN2@Lan_Initia|
  00060	e3130001	 tst         r3, #1
  00064	1afffff8	 bne         |$LL5@Lan_Initia|
  00068		 |$LN2@Lan_Initia|

; 339  : 
; 340  : 	if (dwTemp & HW_CFG_SRST_) {

  00068	e3130001	 tst         r3, #1

; 341  : 		SMSC_WARNING0("  Failed to complete reset.\r\n");
; 342  : 		goto DONE;
; 343  : 	}
; 344  : 
; 345  : 	pLan9118Data->dwLanBase = dwLanBase;
; 346  : 	pLan9118Data->dwIdRev = GetRegDW(dwLanBase, ID_REV);

  0006c	05854000	 streq       r4, [r5]
  00070	05943050	 ldreq       r3, [r4, #0x50]

; 347  : 	//pLan9118Data->dwFpgaRev = GetRegDW(dwLanBase, FPGA_REV); // not defined for the 9115!!
; 348  : 	pLan9118Data->LanInitialized = (BOOLEAN)TRUE;

  00074	05c5800c	 streqb      r8, [r5, #0xC]

; 349  : 
; 350  : 	result = TRUE;

  00078	03a06001	 moveq       r6, #1
  0007c	05853004	 streq       r3, [r5, #4]
  00080		 |$DONE$46993|

; 351  : 
; 352  : DONE:
; 353  : 	SMSC_TRACE1(DBG_INIT,"-Lan_Initialize, result=%s\r\n",result?"TRUE":"FALSE");
; 354  : 	return result;
; 355  : }

  00080	e1a00006	 mov         r0, r6
  00084	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN20@Lan_Initia|
  0008c		 |$LN21@Lan_Initia|
  0008c	00000000	 DCD         |csAccessPhyReg|
  00090		 |$LN22@Lan_Initia|
  00090	00000000	 DCD         |csAccessMacReg|
  00094		 |$M48028|

			 ENDP  ; |Lan_Initialize|

	EXPORT	|Phy_Reset|

  00000			 AREA	 |.pdata|, PDATA
|$T48047| DCD	|$LN11@Phy_Reset|
	DCD	0x40001c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Phy_Reset| PROC

; 360  : {

  00000		 |$LN11@Phy_Reset|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M48044|
  00004	e1a05000	 mov         r5, r0

; 361  : 	BOOLEAN result=(BOOLEAN)FALSE;
; 362  : 	WORD wTemp=(WORD)0;
; 363  : 	DWORD dwLoopCount=100000UL;
; 364  : 
; 365  : 	SMSC_TRACE1(DBG_PHY,"PHY_BCR:0x%04x ... ", LanReadPhy(PHY_BCR));
; 366  : 
; 367  : 	SMSC_TRACE0(DBG_PHY,"Performing PHY BCR ");
; 368  : 	LanWritePhy(PHY_BCR,PHY_BCR_RESET_);

  00008	e5d51018	 ldrb        r1, [r5, #0x18]
  0000c	e5950000	 ldr         r0, [r5]
  00010	e3a0eb61	 mov         lr, #0x61, 22
  00014	e3a03902	 mov         r3, #2, 18
  00018	e3a02000	 mov         r2, #0
  0001c	e3a04000	 mov         r4, #0
  00020	e38e6e2a	 orr         r6, lr, #0x2A, 28
  00024	eb000000	 bl          Lan_SetMiiRegW
  00028		 |$LL5@Phy_Reset|

; 369  : 	do {
; 370  : 		SMSC_MICRO_DELAY(10U);

  00028	e3a0000a	 mov         r0, #0xA
  0002c	eb000000	 bl          NdisStallExecution

; 371  : 		wTemp=LanReadPhy(PHY_BCR);

  00030	e5d51018	 ldrb        r1, [r5, #0x18]
  00034	e5950000	 ldr         r0, [r5]
  00038	e3a02000	 mov         r2, #0
  0003c	eb000000	 bl          Lan_GetMiiRegW

; 372  : 		dwLoopCount--;

  00040	e2566001	 subs        r6, r6, #1

; 373  : 	} while((dwLoopCount>0UL)&&(wTemp&(WORD)PHY_BCR_RESET_));

  00044	0a000001	 beq         |$LN2@Phy_Reset|
  00048	e3100902	 tst         r0, #2, 18
  0004c	1afffff5	 bne         |$LL5@Phy_Reset|
  00050		 |$LN2@Phy_Reset|

; 374  : 	if(wTemp&PHY_BCR_RESET_) {

  00050	e3100902	 tst         r0, #2, 18
  00054	1a000002	 bne         |$DONE$47024|

; 375  : 		SMSC_TRACE0(DBG_PHY, "Phy Reset failed to complete.\r\n");
; 376  : 		goto DONE;
; 377  : 	}
; 378  : 	//extra delay required because the phy may not be completed with its reset
; 379  : 	//  when PHY_BCR_RESET_ is cleared.
; 380  : 	//  They say 256 uS is enough delay but I'm using 500 here to be safe
; 381  : 	SMSC_MICRO_DELAY(500U);

  00058	e3a00f7d	 mov         r0, #0x7D, 30
  0005c	eb000000	 bl          NdisStallExecution

; 382  : 	result=(BOOLEAN)TRUE;

  00060	e3a04001	 mov         r4, #1
  00064		 |$DONE$47024|

; 383  : DONE:
; 384  : 	SMSC_TRACE1(DBG_PHY,"Performing PHY BCR Reset result=%s\n\r",
; 385  : 		result==TRUE? "TRUE":"FALSE");
; 386  : 	return result;
; 387  : }

  00064	e1a00004	 mov         r0, r4
  00068	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$M48045|

			 ENDP  ; |Phy_Reset|

	EXPORT	|Phy_LBT_GetTxStatus|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48070| DCD	|$LN19@Phy_LBT_Ge|
	DCD	0x40001601
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Phy_LBT_GetTxStatus| PROC

; 390  : {

  00000		 |$LN19@Phy_LBT_Ge|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48067|

; 391  : 	DWORD result=GetRegDW(pLan9118Data->dwLanBase, TX_FIFO_INF);

  00004	e5901000	 ldr         r1, [r0]

; 392  : 	if(OLD_REGISTERS(pLan9118Data)) {

  00008	e5902004	 ldr         r2, [r0, #4]
  0000c	e3a03cff	 mov         r3, #0xFF, 24
  00010	e38330ff	 orr         r3, r3, #0xFF
  00014	e591e080	 ldr         lr, [r1, #0x80]
  00018	e1120003	 tst         r2, r3
  0001c	1a000007	 bne         |$LN6@Phy_LBT_Ge|
  00020	e5903008	 ldr         r3, [r0, #8]
  00024	e3530001	 cmp         r3, #1
  00028	3a000004	 bcc         |$LN6@Phy_LBT_Ge|
  0002c	e3530025	 cmp         r3, #0x25
  00030	8a000002	 bhi         |$LN6@Phy_LBT_Ge|

; 393  : 		result&=TX_FIFO_INF_TSFREE_;

  00034	e20e38ff	 and         r3, lr, #0xFF, 16

; 394  : 		if(result!=0x00800000UL) {

  00038	e3530502	 cmp         r3, #2, 10

; 395  : 			result=GetRegDW(pLan9118Data->dwLanBase, TX_STATUS_FIFO_PORT);
; 396  : 		} else {
; 397  : 			result=0UL;
; 398  : 		}
; 399  : 	} else {

  0003c	ea000000	 b           |$LN16@Phy_LBT_Ge|
  00040		 |$LN6@Phy_LBT_Ge|

; 400  : 		result&=TX_FIFO_INF_TSUSED_;

  00040	e31e08ff	 tst         lr, #0xFF, 16
  00044		 |$LN16@Phy_LBT_Ge|

; 401  : 		if(result!=0x00000000UL) {
; 402  : 			result=GetRegDW(pLan9118Data->dwLanBase, TX_STATUS_FIFO_PORT);

  00044	15910048	 ldrne       r0, [r1, #0x48]

; 405  : 		}
; 406  : 	}
; 407  : 	return result;
; 408  : }

  00048	149de004	 ldrne       lr, [sp], #4

; 403  : 		} else {
; 404  : 			result=0UL;

  0004c	03a00000	 moveq       r0, #0

; 405  : 		}
; 406  : 	}
; 407  : 	return result;
; 408  : }

  00050	049de004	 ldreq       lr, [sp], #4
  00054	e12fff1e	 bx          lr
  00058		 |$M48068|

			 ENDP  ; |Phy_LBT_GetTxStatus|

	EXPORT	|Phy_LBT_GetRxStatus|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48088| DCD	|$LN11@Phy_LBT_Ge@2|
	DCD	0x40000600
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Phy_LBT_GetRxStatus| PROC

; 411  : {

  00000		 |$LN11@Phy_LBT_Ge@2|
  00000		 |$M48085|

; 412  : 	DWORD result=GetRegDW(pLan9118Data->dwLanBase, RX_FIFO_INF);

  00000	e5902000	 ldr         r2, [r0]
  00004	e592307c	 ldr         r3, [r2, #0x7C]

; 413  : 	if(result&0x00FF0000UL) {

  00008	e31308ff	 tst         r3, #0xFF, 16

; 414  : 		//Rx status is available, read it
; 415  : 		result=GetRegDW(pLan9118Data->dwLanBase, RX_STATUS_FIFO_PORT);

  0000c	15920040	 ldrne       r0, [r2, #0x40]

; 416  : 	} else {
; 417  : 		result=0UL;

  00010	03a00000	 moveq       r0, #0

; 418  : 	}
; 419  : 	return result;
; 420  : }

  00014	e12fff1e	 bx          lr
  00018		 |$M48086|

			 ENDP  ; |Phy_LBT_GetRxStatus|

	EXPORT	|Phy_CheckLoopBackPacket|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48166| DCD	|$LN56@Phy_CheckL|
	DCD	0x40006102
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Phy_CheckLoopBackPacket| PROC

; 424  : {

  00000		 |$LN56@Phy_CheckL|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M48163|
  00008	e1a05000	 mov         r5, r0
  0000c	e2058003	 and         r8, r5, #3
  00010	e1a03808	 mov         r3, r8, lsl #16

; 425  : 	BOOLEAN result=(BOOLEAN)FALSE;
; 426  : 	DWORD tryCount=0UL;
; 427  : 	DWORD dwLoopCount=0UL;
; 428  : 	for(tryCount=0UL;tryCount<10UL;tryCount++)

  00014	e3834dc1	 orr         r4, r3, #0xC1, 26
  00018	e58d4000	 str         r4, [sp]
  0001c	e288b043	 add         r11, r8, #0x43
  00020	e285a03c	 add         r10, r5, #0x3C
  00024	e3a06000	 mov         r6, #0
  00028	e3a07000	 mov         r7, #0
  0002c	e2859084	 add         r9, r5, #0x84
  00030		 |$LL19@Phy_CheckL|

; 429  : 	{
; 430  : 		DWORD dwTxCmdA=0UL;
; 431  : 		DWORD dwTxCmdB=0UL;
; 432  : 		DWORD dwStatus=0UL;
; 433  : 		DWORD dwPacketLength=0UL;
; 434  : 		
; 435  : 		//zero-out Rx Packet memory
; 436  : 		memset(pLan9118Data->LoopBackRxPacket,0,(UINT)MIN_PACKET_SIZE);

  00030	e3a02040	 mov         r2, #0x40
  00034	e3a01000	 mov         r1, #0
  00038	e1a00009	 mov         r0, r9
  0003c	eb000000	 bl          memset

; 437  : 		
; 438  : 		//write Tx Packet to 118
; 439  : 		dwTxCmdA=
; 440  : 			((((DWORD)(pLan9118Data->LoopBackTxPacket))&0x03UL)<<16) | //DWORD alignment adjustment
; 441  : 			TX_CMD_A_INT_FIRST_SEG_ | TX_CMD_A_INT_LAST_SEG_ |
; 442  : 			((MIN_PACKET_SIZE));
; 443  : 		dwTxCmdB=
; 444  : 			(((DWORD)(MIN_PACKET_SIZE))<<16) |
; 445  : 			((DWORD)(MIN_PACKET_SIZE));
; 446  : 		SetRegDW(pLan9118Data->dwLanBase,TX_DATA_FIFO_PORT,dwTxCmdA);

  00040	e5953000	 ldr         r3, [r5]

; 447  : 		SetRegDW(pLan9118Data->dwLanBase,TX_DATA_FIFO_PORT,dwTxCmdB);
; 448  : 		Lan_WriteTxFifo(
; 449  : 			pLan9118Data->dwLanBase,
; 450  : 			(DWORD *)(((DWORD)(pLan9118Data->LoopBackTxPacket))&0xFFFFFFFCUL),
; 451  : 			(((DWORD)(MIN_PACKET_SIZE))+3UL+
; 452  : 			(((DWORD)(pLan9118Data->LoopBackTxPacket))&0x03UL))>>2);

  00044	e3a0e501	 mov         lr, #1, 10
  00048	e38e0040	 orr         r0, lr, #0x40
  0004c	e5834020	 str         r4, [r3, #0x20]
  00050	e5953000	 ldr         r3, [r5]
  00054	e1a0212b	 mov         r2, r11, lsr #2
  00058	e3ca1003	 bic         r1, r10, #3
  0005c	e5830020	 str         r0, [r3, #0x20]
  00060	e5950000	 ldr         r0, [r5]
  00064	eb000000	 bl          Lan_WriteTxFifo

; 453  : 
; 454  : 		//wait till transmit is done
; 455  : 		dwLoopCount=60UL;
; 456  : 		while(((dwStatus=Phy_LBT_GetTxStatus(pLan9118Data))==0UL)&&(dwLoopCount>0UL)) {

  00068	e1a00005	 mov         r0, r5
  0006c	e3a0403c	 mov         r4, #0x3C
  00070	eb000000	 bl          Phy_LBT_GetTxStatus
  00074	e3500000	 cmp         r0, #0
  00078	1a00000a	 bne         |$LN52@Phy_CheckL|
  0007c		 |$LL16@Phy_CheckL|
  0007c	e3540000	 cmp         r4, #0
  00080	0a000006	 beq         |$LN15@Phy_CheckL|

; 457  : 			SMSC_MICRO_DELAY(5U);

  00084	e3a00005	 mov         r0, #5
  00088	eb000000	 bl          NdisStallExecution
  0008c	e1a00005	 mov         r0, r5

; 458  : 			dwLoopCount--;

  00090	e2444001	 sub         r4, r4, #1
  00094	eb000000	 bl          Phy_LBT_GetTxStatus
  00098	e3500000	 cmp         r0, #0
  0009c	0afffff6	 beq         |$LL16@Phy_CheckL|
  000a0		 |$LN15@Phy_CheckL|

; 459  : 		}
; 460  : 		if(dwStatus==0UL) {

  000a0	e3500000	 cmp         r0, #0
  000a4	0a00002c	 beq         |$LN18@Phy_CheckL|
  000a8		 |$LN52@Phy_CheckL|

; 461  : 			SMSC_WARNING0("Failed to Transmit during Loop Back Test\r\n");
; 462  : 			continue;
; 463  : 		}
; 464  : 		if(dwStatus&0x00008000UL) {

  000a8	e3100902	 tst         r0, #2, 18
  000ac	1a00002a	 bne         |$LN18@Phy_CheckL|

; 465  : 			SMSC_WARNING0("Transmit encountered errors during Loop Back Test\r\n");
; 466  : 			continue;
; 467  : 		}
; 468  : 
; 469  : 		//wait till receive is done
; 470  : 		dwLoopCount=60UL;

  000b0	e3a0403c	 mov         r4, #0x3C
  000b4		 |$LL12@Phy_CheckL|

; 471  : 		while(((dwStatus=Phy_LBT_GetRxStatus(pLan9118Data))==0UL)&&(dwLoopCount>0UL))

  000b4	e5952000	 ldr         r2, [r5]
  000b8	e592307c	 ldr         r3, [r2, #0x7C]
  000bc	e31308ff	 tst         r3, #0xFF, 16
  000c0	15923040	 ldrne       r3, [r2, #0x40]
  000c4	03a03000	 moveq       r3, #0
  000c8	e3530000	 cmp         r3, #0
  000cc	1a000005	 bne         |$LN51@Phy_CheckL|
  000d0	e3540000	 cmp         r4, #0
  000d4	0a000020	 beq         |$LN18@Phy_CheckL|

; 472  : 		{
; 473  : 	         SMSC_MICRO_DELAY(5U);

  000d8	e3a00005	 mov         r0, #5
  000dc	eb000000	 bl          NdisStallExecution

; 474  : 	         dwLoopCount--;

  000e0	e2444001	 sub         r4, r4, #1

; 475  : 		}

  000e4	eafffff2	 b           |$LL12@Phy_CheckL|
  000e8		 |$LN51@Phy_CheckL|

; 476  : 		if(dwStatus==0UL) {
; 477  : 			SMSC_WARNING0("Failed to Receive during Loop Back Test\r\n");
; 478  : 			continue;
; 479  : 		}
; 480  : 		if(dwStatus&RX_STS_ES)

  000e8	e3130902	 tst         r3, #2, 18
  000ec	1a00001a	 bne         |$LN18@Phy_CheckL|

; 481  : 		{
; 482  : 			SMSC_WARNING0("Receive encountered errors during Loop Back Test\r\n");
; 483  : 			continue;
; 484  : 		}
; 485  : 
; 486  : 		dwPacketLength=((dwStatus&0x3FFF0000UL)>>16);

  000f0	e1a03103	 mov         r3, r3, lsl #2
  000f4	e1a00923	 mov         r0, r3, lsr #18

; 487  : 
; 488  : 		Lan_ReadRxFifo(
; 489  : 			pLan9118Data->dwLanBase,
; 490  : 			((DWORD *)(pLan9118Data->LoopBackRxPacket)),
; 491  : 			(dwPacketLength+3UL+(((DWORD)(pLan9118Data->LoopBackRxPacket))&0x03UL))>>2);

  000f8	e0883000	 add         r3, r8, r0
  000fc	e2833003	 add         r3, r3, #3
  00100	e595e000	 ldr         lr, [r5]
  00104	e1b02123	 movs        r2, r3, lsr #2
  00108	e1a01009	 mov         r1, r9
  0010c	0a000003	 beq         |$LN36@Phy_CheckL|
  00110		 |$LL37@Phy_CheckL|
  00110	e59e3000	 ldr         r3, [lr]
  00114	e2522001	 subs        r2, r2, #1
  00118	e4813004	 str         r3, [r1], #4
  0011c	1afffffb	 bne         |$LL37@Phy_CheckL|
  00120		 |$LN36@Phy_CheckL|

; 492  : 		
; 493  : 		if(dwPacketLength!=(MIN_PACKET_SIZE+4UL)) {

  00120	e3500044	 cmp         r0, #0x44
  00124	1a00000c	 bne         |$LN18@Phy_CheckL|

; 494  : 			SMSC_TRACE1(DBG_INIT, "Unexpected packet size during loop back test, size=%ld, will retry",dwPacketLength);
; 495  : 		} else {
; 496  : 			DWORD byteIndex=0UL;
; 497  : 			BOOLEAN foundMissMatch=(BOOLEAN)FALSE;

  00128	e3a00000	 mov         r0, #0

; 498  : 			for(byteIndex=0UL;byteIndex<MIN_PACKET_SIZE;byteIndex++) {

  0012c	e3a01000	 mov         r1, #0
  00130		 |$LL6@Phy_CheckL|

; 499  : 				if(pLan9118Data->LoopBackTxPacket[byteIndex]!=pLan9118Data->LoopBackRxPacket[byteIndex])

  00130	e7da2001	 ldrb        r2, [r10, +r1]
  00134	e7d93001	 ldrb        r3, [r9, +r1]
  00138	e1520003	 cmp         r2, r3
  0013c	1a000003	 bne         |$LN45@Phy_CheckL|
  00140	e2811001	 add         r1, r1, #1
  00144	e3510040	 cmp         r1, #0x40
  00148	3afffff8	 bcc         |$LL6@Phy_CheckL|

; 502  : 					break;
; 503  : 				}         
; 504  : 			}
; 505  : 			if(foundMissMatch != TRUE) {

  0014c	ea000000	 b           |$LN4@Phy_CheckL|
  00150		 |$LN45@Phy_CheckL|

; 500  : 				{
; 501  : 					foundMissMatch=(BOOLEAN)TRUE;

  00150	e3a00001	 mov         r0, #1
  00154		 |$LN4@Phy_CheckL|

; 502  : 					break;
; 503  : 				}         
; 504  : 			}
; 505  : 			if(foundMissMatch != TRUE) {

  00154	e3500001	 cmp         r0, #1
  00158	1a000004	 bne         |$LN46@Phy_CheckL|
  0015c		 |$LN18@Phy_CheckL|

; 425  : 	BOOLEAN result=(BOOLEAN)FALSE;
; 426  : 	DWORD tryCount=0UL;
; 427  : 	DWORD dwLoopCount=0UL;
; 428  : 	for(tryCount=0UL;tryCount<10UL;tryCount++)

  0015c	e2877001	 add         r7, r7, #1
  00160	e357000a	 cmp         r7, #0xA
  00164	2a000002	 bcs         |$DONE$47088|
  00168	e59d4000	 ldr         r4, [sp]
  0016c	eaffffaf	 b           |$LL19@Phy_CheckL|
  00170		 |$LN46@Phy_CheckL|

; 506  : 				SMSC_TRACE0(DBG_PHY, "Successfully verified Loop Back Packet\n\r");
; 507  : 				result=(BOOLEAN)TRUE;

  00170	e3a06001	 mov         r6, #1
  00174		 |$DONE$47088|

; 508  : 				goto DONE;
; 509  : 			} else {
; 510  : 				SMSC_WARNING0("Data miss match during loop back test, will retry.\r\n");
; 511  : 			}
; 512  : 		}
; 513  : 	}
; 514  : DONE:
; 515  : 	return result;
; 516  : }

  00174	e1a00006	 mov         r0, r6
  00178	e28dd004	 add         sp, sp, #4
  0017c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00180	e12fff1e	 bx          lr
  00184		 |$M48164|

			 ENDP  ; |Phy_CheckLoopBackPacket|

	EXPORT	|Phy_LoopBackTest|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48215| DCD	|$LN41@Phy_LoopBa|
	DCD	0x40005f01
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Phy_LoopBackTest| PROC

; 519  : {

  00000		 |$LN41@Phy_LoopBa|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M48212|
  00004	e1a04000	 mov         r4, r0

; 520  : 	BOOLEAN result=(BOOLEAN)FALSE;
; 521  : 	DWORD byteIndex=0UL;
; 522  : 	DWORD tryCount=0UL;
; 523  : //	DWORD failed=0;
; 524  : 	//Initialize Tx Packet
; 525  : 	for(byteIndex=0UL;byteIndex<6UL;byteIndex++) {
; 526  : 		//use broadcast destination address
; 527  : 		pLan9118Data->LoopBackTxPacket[byteIndex]=(BYTE)0xFF;

  00008	e284303c	 add         r3, r4, #0x3C
  0000c	e2832006	 add         r2, r3, #6
  00010	e3a010ff	 mov         r1, #0xFF
  00014		 |$LN37@Phy_LoopBa|
  00014	e4c31001	 strb        r1, [r3], #1
  00018	e1530002	 cmp         r3, r2
  0001c	1afffffc	 bne         |$LN37@Phy_LoopBa|

; 528  : 	}
; 529  : 	for(byteIndex=6UL;byteIndex<12UL;byteIndex++) {

  00020	e3a02006	 mov         r2, #6
  00024		 |$LL10@Phy_LoopBa|

; 530  : 		//use incrementing source address
; 531  : 		pLan9118Data->LoopBackTxPacket[byteIndex]=(BYTE)byteIndex;

  00024	e0823004	 add         r3, r2, r4
  00028	e5c3203c	 strb        r2, [r3, #0x3C]
  0002c	e2822001	 add         r2, r2, #1
  00030	e352000c	 cmp         r2, #0xC
  00034	3afffffa	 bcc         |$LL10@Phy_LoopBa|

; 532  : 	}
; 533  : 	//Set length type field
; 534  : 	pLan9118Data->LoopBackTxPacket[12]=(BYTE)0x00;

  00038	e3a07000	 mov         r7, #0
  0003c	e5c47048	 strb        r7, [r4, #0x48]

; 535  : 	pLan9118Data->LoopBackTxPacket[13]=(BYTE)0x00;

  00040	e5c47049	 strb        r7, [r4, #0x49]

; 536  : 	for(byteIndex=14UL;byteIndex<MIN_PACKET_SIZE;byteIndex++)

  00044	e3a0200e	 mov         r2, #0xE
  00048		 |$LL7@Phy_LoopBa|

; 537  : 	{
; 538  : 		pLan9118Data->LoopBackTxPacket[byteIndex]=(BYTE)byteIndex;

  00048	e0823004	 add         r3, r2, r4
  0004c	e5c3203c	 strb        r2, [r3, #0x3C]
  00050	e2822001	 add         r2, r2, #1
  00054	e3520040	 cmp         r2, #0x40
  00058	3afffffa	 bcc         |$LL7@Phy_LoopBa|

; 539  : 	}
; 540  : //TRY_AGAIN:
; 541  : 	{
; 542  : 		DWORD dwRegVal=GetRegDW(pLan9118Data->dwLanBase, HW_CFG);

  0005c	e5941000	 ldr         r1, [r4]

; 543  : 		dwRegVal&=HW_CFG_TX_FIF_SZ_;
; 544  : 		dwRegVal|=HW_CFG_SF_;
; 545  : 		SetRegDW(pLan9118Data->dwLanBase,HW_CFG,dwRegVal);
; 546  : 	}
; 547  : 	SetRegDW(pLan9118Data->dwLanBase,TX_CFG,TX_CFG_TX_ON_);

  00060	e3a0e002	 mov         lr, #2

; 548  : 
; 549  : 	SetRegDW(pLan9118Data->dwLanBase,RX_CFG,(((DWORD)(pLan9118Data->LoopBackRxPacket))&0x03UL)<<8);

  00064	e2043003	 and         r3, r4, #3
  00068	e5912074	 ldr         r2, [r1, #0x74]
  0006c	e1a00403	 mov         r0, r3, lsl #8

; 550  : 	
; 551  : 	{
; 552  : #if 1
; 553  : 	//Set Phy to 10/FD, no ANEG,
; 554  : 	LanWritePhy(PHY_BCR,(WORD)0x0100);

  00070	e3a03c01	 mov         r3, #1, 24
  00074	e202280f	 and         r2, r2, #0xF, 16
  00078	e3822601	 orr         r2, r2, #1, 12
  0007c	e5812074	 str         r2, [r1, #0x74]
  00080	e5941000	 ldr         r1, [r4]
  00084	e3a02000	 mov         r2, #0
  00088	e581e070	 str         lr, [r1, #0x70]
  0008c	e5941000	 ldr         r1, [r4]
  00090	e581006c	 str         r0, [r1, #0x6C]
  00094	e5d41018	 ldrb        r1, [r4, #0x18]
  00098	e5940000	 ldr         r0, [r4]
  0009c	eb000000	 bl          Lan_SetMiiRegW

; 555  : 
; 556  : 	//enable MAC Tx/Rx, FD
; 557  : 	LanWriteMac(MAC_CR,MAC_CR_FDPX_|MAC_CR_TXEN_|MAC_CR_RXEN_);

  000a0	e5940000	 ldr         r0, [r4]
  000a4	e3a08601	 mov         r8, #1, 12
  000a8	e388200c	 orr         r2, r8, #0xC
  000ac	e3a01001	 mov         r1, #1
  000b0	eb000000	 bl          Lan_SetMacRegDW

; 558  : 
; 559  : //	Phy_TransmitTestPacket(privateData);
; 560  : 	
; 561  : 	//set Phy to loopback mode
; 562  : 	LanWritePhy(PHY_BCR,(WORD)0x4100);

  000b4	e5d41018	 ldrb        r1, [r4, #0x18]
  000b8	e5940000	 ldr         r0, [r4]
  000bc	e3a03c41	 mov         r3, #0x41, 24
  000c0	e3a02000	 mov         r2, #0
  000c4	eb000000	 bl          Lan_SetMiiRegW

; 563  : #endif
; 564  : 	for(tryCount=0UL;tryCount<10UL;tryCount++) {

  000c8	e3a06000	 mov         r6, #0
  000cc		 |$LL4@Phy_LoopBa|

; 565  : 		if(Phy_CheckLoopBackPacket(pLan9118Data) == TRUE)

  000cc	e1a00004	 mov         r0, r4
  000d0	eb000000	 bl          Phy_CheckLoopBackPacket
  000d4	e3500001	 cmp         r0, #1
  000d8	0a000016	 beq         |$LN32@Phy_LoopBa|

; 568  : 			goto DONE;
; 569  : 		}
; 570  : #if 0
; 571  : DumpSIMRegs(pLan9118Data);
; 572  : DumpPHYRegs(pLan9118Data);
; 573  : #endif
; 574  : 		pLan9118Data->dwResetCount++;

  000dc	e59430c8	 ldr         r3, [r4, #0xC8]

; 575  : #if 1
; 576  : 		//disable MAC rx
; 577  : 		LanWriteMac(MAC_CR,0UL);

  000e0	e5940000	 ldr         r0, [r4]
  000e4	e3a02000	 mov         r2, #0
  000e8	e2833001	 add         r3, r3, #1
  000ec	e3a01001	 mov         r1, #1
  000f0	e58430c8	 str         r3, [r4, #0xC8]
  000f4	eb000000	 bl          Lan_SetMacRegDW

; 578  : 		result = Phy_Reset(pLan9118Data);

  000f8	e1a00004	 mov         r0, r4
  000fc	eb000000	 bl          Phy_Reset

; 579  : 
; 580  : 		//Set Phy to 10/FD, no ANEG, and Loopbackmode
; 581  : 		LanWritePhy(PHY_BCR,(WORD)0x4100);

  00100	e5d41018	 ldrb        r1, [r4, #0x18]
  00104	e1a05000	 mov         r5, r0
  00108	e5940000	 ldr         r0, [r4]
  0010c	e3a03c41	 mov         r3, #0x41, 24
  00110	e3a02000	 mov         r2, #0
  00114	eb000000	 bl          Lan_SetMiiRegW

; 582  : 
; 583  : 		//enable MAC Tx/Rx, FD
; 584  : 		LanWriteMac(MAC_CR,MAC_CR_FDPX_|MAC_CR_TXEN_|MAC_CR_RXEN_);

  00118	e5940000	 ldr         r0, [r4]
  0011c	e388200c	 orr         r2, r8, #0xC
  00120	e3a01001	 mov         r1, #1
  00124	eb000000	 bl          Lan_SetMacRegDW
  00128	e2866001	 add         r6, r6, #1
  0012c	e356000a	 cmp         r6, #0xA
  00130	3affffe5	 bcc         |$LL4@Phy_LoopBa|

; 565  : 		if(Phy_CheckLoopBackPacket(pLan9118Data) == TRUE)

  00134	ea000000	 b           |$DONE$47124|
  00138		 |$LN32@Phy_LoopBa|

; 566  : 		{
; 567  : 			result=(BOOLEAN)TRUE;

  00138	e3a05001	 mov         r5, #1
  0013c		 |$DONE$47124|

; 585  : #endif
; 586  : 	}
; 587  : DONE:
; 588  : 	//disable MAC
; 589  : 	LanWriteMac(MAC_CR,0UL);

  0013c	e5940000	 ldr         r0, [r4]
  00140	e3a02000	 mov         r2, #0
  00144	e3a01001	 mov         r1, #1
  00148	eb000000	 bl          Lan_SetMacRegDW

; 590  : 	//Cancel Phy loopback mode
; 591  : 	LanWritePhy(PHY_BCR,(WORD)0U);

  0014c	e5d41018	 ldrb        r1, [r4, #0x18]
  00150	e5940000	 ldr         r0, [r4]
  00154	e3a03000	 mov         r3, #0
  00158	e3a02000	 mov         r2, #0
  0015c	eb000000	 bl          Lan_SetMiiRegW

; 592  : 	}
; 593  : 
; 594  : 	SetRegDW(pLan9118Data->dwLanBase,TX_CFG,0UL);

  00160	e5943000	 ldr         r3, [r4]

; 595  : 	SetRegDW(pLan9118Data->dwLanBase,RX_CFG,0UL);
; 596  : 	
; 597  : 	return result;
; 598  : }

  00164	e1a00005	 mov         r0, r5
  00168	e5837070	 str         r7, [r3, #0x70]
  0016c	e5943000	 ldr         r3, [r4]
  00170	e583706c	 str         r7, [r3, #0x6C]
  00174	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00178	e12fff1e	 bx          lr
  0017c		 |$M48213|

			 ENDP  ; |Phy_LoopBackTest|

	EXPORT	|Lan_AutoNegotiate|

  00000			 AREA	 |.pdata|, PDATA
|$T48230| DCD	|$LN15@Lan_AutoNe|
	DCD	0x40002201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_AutoNegotiate| PROC

; 913  : {

  00000		 |$LN15@Lan_AutoNe|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48227|
  00004	e1a05000	 mov         r5, r0

; 914  : 	DWORD dwTimeout=0UL;
; 915  : 	WORD  wTemp, wBreaknow=(WORD)0;
; 916  : 
; 917  : 	SMSC_TRACE0(DBG_INIT, "+Lan_AutoNegotiate(...)\n");
; 918  : 
; 919  : 	wTemp = (WORD)(PHY_BCR_AUTO_NEG_ENABLE_ | PHY_BCR_RESTART_AUTO_NEG_);
; 920  : 	LanWritePhy(PHY_BCR, wTemp);

  00008	e5d51018	 ldrb        r1, [r5, #0x18]
  0000c	e5950000	 ldr         r0, [r5]
  00010	e3a03c12	 mov         r3, #0x12, 24
  00014	e3a02000	 mov         r2, #0
  00018	e3a04000	 mov         r4, #0
  0001c	eb000000	 bl          Lan_SetMiiRegW
  00020	e3a07b61	 mov         r7, #0x61, 22
  00024		 |$Restart_AutoNegotiation$47273|

; 921  : 
; 922  : Restart_AutoNegotiation:
; 923  : 	wBreaknow++;

  00024	e2843001	 add         r3, r4, #1
  00028	e1a04803	 mov         r4, r3, lsl #16
  0002c	e1a04824	 mov         r4, r4, lsr #16

; 924  : 	dwTimeout = 100000UL;

  00030	e3876e2a	 orr         r6, r7, #0x2A, 28
  00034		 |$LL8@Lan_AutoNe|

; 925  : 	// Check for the completion and the remote fault
; 926  : 	do {
; 927  : 		wTemp = LanReadPhy(PHY_BSR);

  00034	e5d51018	 ldrb        r1, [r5, #0x18]
  00038	e5950000	 ldr         r0, [r5]
  0003c	e3a02001	 mov         r2, #1
  00040	eb000000	 bl          Lan_GetMiiRegW

; 928  : 	} while((dwTimeout-- > 0UL) && 
; 929  : 			!((wTemp & (WORD)PHY_BSR_REMOTE_FAULT_) || 
; 930  : 			 (wTemp & (WORD)PHY_BSR_AUTO_NEG_COMP_)));

  00044	e3560000	 cmp         r6, #0
  00048	e2466001	 sub         r6, r6, #1
  0004c	0a000003	 beq         |$LN5@Lan_AutoNe|
  00050	e3100010	 tst         r0, #0x10
  00054	1a000001	 bne         |$LN5@Lan_AutoNe|
  00058	e3100020	 tst         r0, #0x20
  0005c	0afffff4	 beq         |$LL8@Lan_AutoNe|
  00060		 |$LN5@Lan_AutoNe|

; 931  : 
; 932  : 	if(wTemp & (WORD)PHY_BSR_REMOTE_FAULT_) {

  00060	e3100010	 tst         r0, #0x10
  00064	0a000004	 beq         |$LN1@Lan_AutoNe|

; 933  : 		SMSC_TRACE0(DBG_INIT,"Autonegotiation Remote Fault\n");
; 934  : 		if(wBreaknow < 10)

  00068	e354000a	 cmp         r4, #0xA
  0006c	3affffec	 bcc         |$Restart_AutoNegotiation$47273|

; 935  : 		{
; 936  : 			goto Restart_AutoNegotiation;
; 937  : 		}
; 938  :         else
; 939  :         {
; 940  :             SMSC_TRACE0(DBG_INIT, "Max number of retries reached.\n");
; 941  :             SMSC_TRACE0(DBG_INIT, "-Lan_AutoNegotiate(...)\n");
; 942  :             return FALSE;

  00070	e3a00000	 mov         r0, #0

; 948  : }

  00074	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN1@Lan_AutoNe|

; 943  :         }
; 944  : 	}
; 945  : 
; 946  : 	SMSC_TRACE0(DBG_INIT, "-Lan_AutoNegotiate(...)\n");
; 947  : 	return (BOOLEAN)TRUE;

  0007c	e3a00001	 mov         r0, #1

; 948  : }

  00080	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$M48228|

			 ENDP  ; |Lan_AutoNegotiate|

	EXPORT	|Lan_GetLinkMode|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48285| DCD	|$LN48@Lan_GetLin|
	DCD	0x40006001
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_GetLinkMode| PROC

; 1133 : {

  00000		 |$LN48@Lan_GetLin|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M48282|
  00004	e1a05000	 mov         r5, r0

; 1134 : 	DWORD result = LINK_NO_LINK;
; 1135 : 	WORD wRegVal;
; 1136 : 	const WORD wRegBSR = LanReadPhy(PHY_BSR);

  00008	e5d51018	 ldrb        r1, [r5, #0x18]
  0000c	e5950000	 ldr         r0, [r5]
  00010	e3a02001	 mov         r2, #1
  00014	e3a04000	 mov         r4, #0
  00018	eb000000	 bl          Lan_GetMiiRegW

; 1137 : 
; 1138 : 	wRegVal = LanReadPhy(PHY_BCR);

  0001c	e5d51018	 ldrb        r1, [r5, #0x18]
  00020	e1a06000	 mov         r6, r0
  00024	e5950000	 ldr         r0, [r5]
  00028	e3a02000	 mov         r2, #0
  0002c	eb000000	 bl          Lan_GetMiiRegW

; 1139 : 	if (wRegVal & PHY_BCR_AUTO_NEG_ENABLE_) 

  00030	e3100a01	 tst         r0, #1, 20
  00034	0a000042	 beq         |$LN24@Lan_GetLin|

; 1140 : 	{
; 1141 : 		if(wRegBSR & PHY_BSR_LINK_STATUS_) 

  00038	e3160004	 tst         r6, #4
  0003c	0a00004c	 beq         |$LN1@Lan_GetLin|

; 1142 : 		{
; 1143 : 			WORD wTemp;
; 1144 : 			const WORD wRegADV = LanReadPhy(PHY_ANEG_ADV);

  00040	e5d51018	 ldrb        r1, [r5, #0x18]
  00044	e5950000	 ldr         r0, [r5]
  00048	e3a02004	 mov         r2, #4
  0004c	eb000000	 bl          Lan_GetMiiRegW

; 1145 : 			const WORD wRegLPA = LanReadPhy(PHY_ANEG_LPA);

  00050	e5d51018	 ldrb        r1, [r5, #0x18]
  00054	e1a06000	 mov         r6, r0
  00058	e5950000	 ldr         r0, [r5]
  0005c	e3a02005	 mov         r2, #5
  00060	eb000000	 bl          Lan_GetMiiRegW

; 1146 : 			wTemp = (WORD)(wRegLPA & wRegADV);

  00064	e0063000	 and         r3, r6, r0
  00068	e1a03803	 mov         r3, r3, lsl #16
  0006c	e1a03823	 mov         r3, r3, lsr #16

; 1147 : 
; 1148 : 			if(wTemp & PHY_ANEG_LPA_100FDX_) 

  00070	e3130c01	 tst         r3, #1, 24

; 1149 : 			{
; 1150 : 				result = LINK_100MPS_FULL;

  00074	13a04004	 movne       r4, #4
  00078	1a000007	 bne         |$LN16@Lan_GetLin|

; 1151 : 			} 
; 1152 : 			else if(wTemp & PHY_ANEG_LPA_100HDX_) 

  0007c	e3130080	 tst         r3, #0x80

; 1153 : 			{
; 1154 : 				result = LINK_100MPS_HALF;

  00080	13a04003	 movne       r4, #3
  00084	1a000004	 bne         |$LN16@Lan_GetLin|

; 1155 : 			} 
; 1156 : 			else if(wTemp & PHY_ANEG_LPA_10FDX_) 

  00088	e3130040	 tst         r3, #0x40

; 1157 : 			{
; 1158 : 				result = LINK_10MPS_FULL;

  0008c	13a04002	 movne       r4, #2
  00090	1a000001	 bne         |$LN16@Lan_GetLin|

; 1159 : 			} 
; 1160 : 			else if(wTemp & PHY_ANEG_LPA_10HDX_) 

  00094	e3130020	 tst         r3, #0x20

; 1161 : 			{
; 1162 : 				result = LINK_10MPS_HALF;

  00098	13a04001	 movne       r4, #1
  0009c		 |$LN16@Lan_GetLin|

; 1163 : 			}
; 1164 : 			else 
; 1165 : 			{
; 1166 : 				// do nothing except making lint happy
; 1167 : 			}
; 1168 : 			// check Flow Control
; 1169 : 			if (wTemp & (WORD) (PHY_ANEG_LPA_100FDX_ | PHY_ANEG_LPA_10FDX_)) {

  0009c	e3130d05	 tst         r3, #5, 26
  000a0	0a00001a	 beq         |$LN14@Lan_GetLin|

; 1170 : 				DWORD dwTemp;
; 1171 : 				if (wTemp & (WORD)0x0400U) {

  000a4	e3130b01	 tst         r3, #1, 22
  000a8	0a00000c	 beq         |$LN13@Lan_GetLin|

; 1172 : 					// both support Symmetric Flow Control
; 1173 : 					dwTemp = LanReadMac(FLOW);

  000ac	e5950000	 ldr         r0, [r5]
  000b0	e3a01008	 mov         r1, #8
  000b4	eb000000	 bl          Lan_GetMacRegDW
  000b8	e1a03000	 mov         r3, r0

; 1174 : 					LanWriteMac(FLOW, dwTemp | FLOW_FCEN_);

  000bc	e5950000	 ldr         r0, [r5]
  000c0	e3832002	 orr         r2, r3, #2
  000c4	e3a01008	 mov         r1, #8
  000c8	eb000000	 bl          Lan_SetMacRegDW

; 1175 : 					dwTemp = GetRegDW(pLan9118Data->dwLanBase, AFC_CFG);

  000cc	e5952000	 ldr         r2, [r5]
  000d0	e59230ac	 ldr         r3, [r2, #0xAC]

; 1176 : 					SetRegDW(pLan9118Data->dwLanBase, AFC_CFG, dwTemp | AFC_CFG_FCANY_);

  000d4	e3833001	 orr         r3, r3, #1

; 1202 : 				SetRegDW(pLan9118Data->dwLanBase, AFC_CFG, dwTemp & ~AFC_CFG_FCANY_);

  000d8	e58230ac	 str         r3, [r2, #0xAC]

; 1203 : 			}
; 1204 : 		}
; 1205 : 	} 
; 1206 : 	else 

  000dc	ea000024	 b           |$LN1@Lan_GetLin|
  000e0		 |$LN13@Lan_GetLin|

; 1177 : 				}
; 1178 : 				else if (((wRegADV & 0x0C00) == 0x0C00) && 
; 1179 : 						 ((wRegLPA & 0x0C00) == 0x0800)) {

  000e0	e2063b03	 and         r3, r6, #3, 22
  000e4	e3530b03	 cmp         r3, #3, 22
  000e8	1a000008	 bne         |$LN14@Lan_GetLin|
  000ec	e2003b03	 and         r3, r0, #3, 22
  000f0	e3530b02	 cmp         r3, #2, 22
  000f4	1a000005	 bne         |$LN14@Lan_GetLin|

; 1180 : 					// Partner is Asymmetric Flow Control
; 1181 : 					// Enable Rx Only (Enable FC on MAC, Disable at AFC_CFG)
; 1182 : 					dwTemp = LanReadMac(FLOW);

  000f8	e5950000	 ldr         r0, [r5]
  000fc	e3a01008	 mov         r1, #8
  00100	eb000000	 bl          Lan_GetMacRegDW
  00104	e1a03000	 mov         r3, r0

; 1183 : 					LanWriteMac(FLOW, dwTemp | FLOW_FCEN_);

  00108	e3832002	 orr         r2, r3, #2

; 1184 : 					dwTemp = GetRegDW(pLan9118Data->dwLanBase, AFC_CFG);
; 1185 : 					SetRegDW(pLan9118Data->dwLanBase, AFC_CFG, dwTemp & ~AFC_CFG_FCANY_);
; 1186 : 				}
; 1187 : 				else {

  0010c	ea000004	 b           |$LN45@Lan_GetLin|
  00110		 |$LN14@Lan_GetLin|

; 1188 : 					// Disable Flow Control
; 1189 : 					dwTemp = LanReadMac(FLOW);
; 1190 : 					LanWriteMac(FLOW, dwTemp & ~FLOW_FCEN_);
; 1191 : 					dwTemp = GetRegDW(pLan9118Data->dwLanBase, AFC_CFG);
; 1192 : 					SetRegDW(pLan9118Data->dwLanBase, AFC_CFG, dwTemp & ~AFC_CFG_FCANY_);
; 1193 : 				}
; 1194 : 			}
; 1195 : 			else {
; 1196 : 				// Half-Duplex
; 1197 : 				// Disable Flow Control
; 1198 : 				DWORD dwTemp;
; 1199 : 				dwTemp = LanReadMac(FLOW);

  00110	e5950000	 ldr         r0, [r5]
  00114	e3a01008	 mov         r1, #8
  00118	eb000000	 bl          Lan_GetMacRegDW
  0011c	e1a03000	 mov         r3, r0

; 1200 : 				LanWriteMac(FLOW, dwTemp & ~FLOW_FCEN_);

  00120	e3c32002	 bic         r2, r3, #2
  00124		 |$LN45@Lan_GetLin|
  00124	e5950000	 ldr         r0, [r5]
  00128	e3a01008	 mov         r1, #8
  0012c	eb000000	 bl          Lan_SetMacRegDW

; 1201 : 				dwTemp = GetRegDW(pLan9118Data->dwLanBase, AFC_CFG);

  00130	e5952000	 ldr         r2, [r5]

; 1202 : 				SetRegDW(pLan9118Data->dwLanBase, AFC_CFG, dwTemp & ~AFC_CFG_FCANY_);

  00134	e59230ac	 ldr         r3, [r2, #0xAC]
  00138	e3c33001	 bic         r3, r3, #1
  0013c	e58230ac	 str         r3, [r2, #0xAC]

; 1203 : 			}
; 1204 : 		}
; 1205 : 	} 
; 1206 : 	else 

  00140	ea00000b	 b           |$LN1@Lan_GetLin|
  00144		 |$LN24@Lan_GetLin|

; 1207 : 	{
; 1208 : 		if (wRegBSR & PHY_BSR_LINK_STATUS_) 

  00144	e3160004	 tst         r6, #4
  00148	0a000009	 beq         |$LN1@Lan_GetLin|

; 1209 : 		{
; 1210 : 			if (wRegVal & PHY_BCR_SPEED_SELECT_) 

  0014c	e3100a02	 tst         r0, #2, 20
  00150	0a000004	 beq         |$LN6@Lan_GetLin|

; 1211 : 			{
; 1212 : 				if (wRegVal & PHY_BCR_DUPLEX_MODE_) 

  00154	e3100c01	 tst         r0, #1, 24

; 1213 : 				{
; 1214 : 					result = LINK_100MPS_FULL;

  00158	13a04004	 movne       r4, #4
  0015c	1a000004	 bne         |$LN1@Lan_GetLin|

; 1215 : 				} 
; 1216 : 				else 
; 1217 : 				{
; 1218 : 					result = LINK_100MPS_HALF;

  00160	e3a04003	 mov         r4, #3

; 1219 : 				}
; 1220 : 			} 
; 1221 : 			else 

  00164	ea000002	 b           |$LN1@Lan_GetLin|
  00168		 |$LN6@Lan_GetLin|

; 1222 : 			{
; 1223 : 				if (wRegVal & PHY_BCR_DUPLEX_MODE_) 

  00168	e3100c01	 tst         r0, #1, 24

; 1224 : 				{
; 1225 : 					result = LINK_10MPS_FULL;

  0016c	13a04002	 movne       r4, #2

; 1226 : 				} 
; 1227 : 				else 
; 1228 : 				{
; 1229 : 					result = LINK_10MPS_HALF;

  00170	03a04001	 moveq       r4, #1
  00174		 |$LN1@Lan_GetLin|

; 1230 : 				}
; 1231 : 			}
; 1232 : 		}
; 1233 : 	}
; 1234 : 
; 1235 : 	return result;
; 1236 : }

  00174	e1a00004	 mov         r0, r4
  00178	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0017c	e12fff1e	 bx          lr
  00180		 |$M48283|

			 ENDP  ; |Lan_GetLinkMode|

	EXPORT	|Lan_SetAutoMdixSts|
	EXPORT	|??_C@_1GI@OFIENJPC@?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AA?5?$AAS?$AAt?$AAr?$AAa?$AAp?$AA?0?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@GDMLNGBP@?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AA?5?$AAS?$AAt?$AAr?$AAa?$AAp?$AA?0?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@EAGAKKCI@?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AA?5?$AAS?$AAt?$AAr?$AAa?$AAp?$AA?0?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI?$AAX@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@GEMGJCLD@?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI?$AAX?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@MJJEFLIN@?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI?$AAX?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48301| DCD	|$LN17@Lan_SetAut|
	DCD	0x40003501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@OFIENJPC@?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AA?5?$AAS?$AAt?$AAr?$AAa?$AAp?$AA?0?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI@| DCB "O"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "i", 0x0, "d"
	DCB	0x0, "e", 0x0, " ", 0x0, "S", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "p", 0x0, ",", 0x0, " ", 0x0, "D", 0x0, "i", 0x0, "s"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "A"
	DCB	0x0, "u", 0x0, "t", 0x0, "o", 0x0, "-", 0x0, "M", 0x0, "D"
	DCB	0x0, "I", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "S", 0x0, "t"
	DCB	0x0, "r", 0x0, "a", 0x0, "i", 0x0, "g", 0x0, "h", 0x0, "t"
	DCB	0x0, " ", 0x0, "C", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@GDMLNGBP@?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AA?5?$AAS?$AAt?$AAr?$AAa?$AAp?$AA?0?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI@| DCB "O"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "i", 0x0, "d"
	DCB	0x0, "e", 0x0, " ", 0x0, "S", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "p", 0x0, ",", 0x0, " ", 0x0, "D", 0x0, "i", 0x0, "s"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "A"
	DCB	0x0, "u", 0x0, "t", 0x0, "o", 0x0, "-", 0x0, "M", 0x0, "D"
	DCB	0x0, "I", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "C", 0x0, "r"
	DCB	0x0, "o", 0x0, "s", 0x0, "s", 0x0, "O", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "C", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@EAGAKKCI@?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AA?5?$AAS?$AAt?$AAr?$AAa?$AAp?$AA?0?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI?$AAX@| DCB "O"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "i", 0x0, "d"
	DCB	0x0, "e", 0x0, " ", 0x0, "S", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "p", 0x0, ",", 0x0, " ", 0x0, "E", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "A", 0x0, "u"
	DCB	0x0, "t", 0x0, "o", 0x0, "-", 0x0, "M", 0x0, "D", 0x0, "I"
	DCB	0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@GEMGJCLD@?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI?$AAX?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN@| DCB "A"
	DCB	0x0, "u", 0x0, "t", 0x0, "o", 0x0, "-", 0x0, "M", 0x0, "D"
	DCB	0x0, "I", 0x0, "X", 0x0, " ", 0x0, "D", 0x0, "i", 0x0, "s"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "b"
	DCB	0x0, "y", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "a"
	DCB	0x0, "u", 0x0, "l", 0x0, "t", 0x0, "!", 0x0, "!", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@MJJEFLIN@?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI?$AAX?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6@| DCB "A"
	DCB	0x0, "u", 0x0, "t", 0x0, "o", 0x0, "-", 0x0, "M", 0x0, "D"
	DCB	0x0, "I", 0x0, "X", 0x0, " ", 0x0, "E", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "b", 0x0, "y"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "a", 0x0, "u"
	DCB	0x0, "l", 0x0, "t", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_SetAutoMdixSts| PROC

; 1242 : {

  00000		 |$LN17@Lan_SetAut|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M48298|
  00004	e1a04000	 mov         r4, r0

; 1243 : 	WORD wAutoMdixSts = pLan9118Data->wAutoMdix;

  00008	e1d452b4	 ldrh        r5, [r4, #0x24]

; 1244 : 	WORD SpecialCtrlSts=0U;
; 1245 : 
; 1246 : 		if (wAutoMdixSts > 2)
; 1247 : 		{
; 1248 : 
; 1249 : 			SpecialCtrlSts=LanReadPhy(SPECIAL_CTRL_STS);
; 1250 : 			SpecialCtrlSts = (SpecialCtrlSts&0x1FFF);

  0000c	e5d41018	 ldrb        r1, [r4, #0x18]
  00010	e5940000	 ldr         r0, [r4]
  00014	e3550002	 cmp         r5, #2
  00018	e3a0201b	 mov         r2, #0x1B
  0001c	9a000011	 bls         |$LN8@Lan_SetAut|
  00020	eb000000	 bl          Lan_GetMiiRegW
  00024	e3a03c1f	 mov         r3, #0x1F, 24
  00028	e38330ff	 orr         r3, r3, #0xFF

; 1251 : 			LanWritePhy(SPECIAL_CTRL_STS,SpecialCtrlSts);

  0002c	e5d41018	 ldrb        r1, [r4, #0x18]
  00030	e0033000	 and         r3, r3, r0
  00034	e5940000	 ldr         r0, [r4]
  00038	e3a0201b	 mov         r2, #0x1B
  0003c	eb000000	 bl          Lan_SetMiiRegW

; 1252 : 
; 1253 : 			if (GetRegDW(pLan9118Data->dwLanBase, HW_CFG) & HW_CFG_AMDIX_EN_STRAP_STS_)

  00040	e5943000	 ldr         r3, [r4]
  00044	e5933074	 ldr         r3, [r3, #0x74]
  00048	e3130401	 tst         r3, #1, 8

; 1254 : 			{
; 1255 : 				RETAILMSG(1, (TEXT("Auto-MDIX Enable by default!!!\r\n")));

  0004c	159f007c	 ldrne       r0, [pc, #0x7C]

; 1256 : 			}
; 1257 : 			else {
; 1258 : 				RETAILMSG(1, (TEXT("Auto-MDIX Disable by default!!!\r\n")));

  00050	059f0074	 ldreq       r0, [pc, #0x74]
  00054	eb000000	 bl          NKDbgPrintfW

; 1259 : 			}
; 1260 : 			pLan9118Data->wAutoMdix=3;

  00058	e3a03003	 mov         r3, #3
  0005c	e1c432b4	 strh        r3, [r4, #0x24]

; 1277 : 			
; 1278 : 		}
; 1279 : }

  00060	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$LN8@Lan_SetAut|

; 1261 :         }
; 1262 : 		else 
; 1263 : 		{
; 1264 : 
; 1265 : 			SpecialCtrlSts=LanReadPhy(SPECIAL_CTRL_STS);
; 1266 : 			SpecialCtrlSts = (((wAutoMdixSts+4) << 13) | (SpecialCtrlSts&0x1FFF));

  00068	eb000000	 bl          Lan_GetMiiRegW
  0006c	e3a03c1f	 mov         r3, #0x1F, 24
  00070	e38330ff	 orr         r3, r3, #0xFF
  00074	e0032000	 and         r2, r3, r0
  00078	e2853004	 add         r3, r5, #4
  0007c	e1823683	 orr         r3, r2, r3, lsl #13

; 1267 : 			LanWritePhy(SPECIAL_CTRL_STS,SpecialCtrlSts);

  00080	e5d41018	 ldrb        r1, [r4, #0x18]
  00084	e5940000	 ldr         r0, [r4]
  00088	e1a03803	 mov         r3, r3, lsl #16
  0008c	e1a03823	 mov         r3, r3, lsr #16
  00090	e3a0201b	 mov         r2, #0x1B
  00094	eb000000	 bl          Lan_SetMiiRegW

; 1268 : 
; 1269 : 			if (wAutoMdixSts & AMDIX_ENABLE) {

  00098	e3150002	 tst         r5, #2

; 1270 : 				RETAILMSG(1, (TEXT("Override Strap, Enable Auto-MDIX\r\n")));

  0009c	159f0024	 ldrne       r0, [pc, #0x24]
  000a0	1a000002	 bne         |$LN14@Lan_SetAut|

; 1271 : 			} else if (wAutoMdixSts & AMDIX_DISABLE_CROSSOVER) {

  000a4	e3150001	 tst         r5, #1

; 1272 : 				RETAILMSG(1, (TEXT("Override Strap, Disable Auto-MDIX, CrossOver Cable\r\n")));		

  000a8	159f0014	 ldrne       r0, [pc, #0x14]

; 1273 : 			} else {
; 1274 : 				RETAILMSG(1, (TEXT("Override Strap, Disable Auto-MDIX, Straight Cable\r\n")));	

  000ac	059f000c	 ldreq       r0, [pc, #0xC]
  000b0		 |$LN14@Lan_SetAut|
  000b0	eb000000	 bl          NKDbgPrintfW

; 1275 : 			}
; 1276 : 			pLan9118Data->wAutoMdix=wAutoMdixSts;

  000b4	e1c452b4	 strh        r5, [r4, #0x24]

; 1277 : 			
; 1278 : 		}
; 1279 : }

  000b8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN18@Lan_SetAut|
  000c0		 |$LN19@Lan_SetAut|
  000c0	00000000	 DCD         |??_C@_1GI@OFIENJPC@?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AA?5?$AAS?$AAt?$AAr?$AAa?$AAp?$AA?0?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI@|
  000c4		 |$LN20@Lan_SetAut|
  000c4	00000000	 DCD         |??_C@_1GK@GDMLNGBP@?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AA?5?$AAS?$AAt?$AAr?$AAa?$AAp?$AA?0?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI@|
  000c8		 |$LN21@Lan_SetAut|
  000c8	00000000	 DCD         |??_C@_1EG@EAGAKKCI@?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AA?5?$AAS?$AAt?$AAr?$AAa?$AAp?$AA?0?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI?$AAX@|
  000cc		 |$LN22@Lan_SetAut|
  000cc	00000000	 DCD         |??_C@_1EE@GEMGJCLD@?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI?$AAX?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN@|
  000d0		 |$LN23@Lan_SetAut|
  000d0	00000000	 DCD         |??_C@_1EC@MJJEFLIN@?$AAA?$AAu?$AAt?$AAo?$AA?9?$AAM?$AAD?$AAI?$AAX?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAd?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$CB?$AA?$CB?$AA?$CB?$AA?$AN?$AA?6@|
  000d4		 |$M48299|

			 ENDP  ; |Lan_SetAutoMdixSts|

	EXPORT	|Lan_EnableInterrupt|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48324| DCD	|$LN10@Lan_Enable|
	DCD	0x40000600
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_EnableInterrupt| PROC

; 1288 : {

  00000		 |$LN10@Lan_Enable|
  00000		 |$M48321|
  00000	e3500000	 cmp         r0, #0

; 1289 : 	DWORD dwTemp;
; 1290 : 
; 1291 : 	SMSC_ASSERT(pLan9118Data);
; 1292 : 
; 1293 :     SMSC_TRACE0(DBG_ISR,"+Lan_EnableInterrupt\r\n");
; 1294 : 
; 1295 : 	if (pLan9118Data)
; 1296 : 	{
; 1297 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1298 : 		dwTemp = GetRegDW(pLan9118Data->dwLanBase, INT_EN);

  00004	15902000	 ldrne       r2, [r0]
  00008	1592305c	 ldrne       r3, [r2, #0x5C]

; 1299 : 		dwTemp |= dwMask;

  0000c	11833001	 orrne       r3, r3, r1

; 1300 : 		SetRegDW(pLan9118Data->dwLanBase, INT_EN, dwTemp);

  00010	1582305c	 strne       r3, [r2, #0x5C]

; 1301 : 	}
; 1302 : 
; 1303 :     SMSC_TRACE0(DBG_ISR,"-Lan_EnableInterrupt\r\n");
; 1304 : 
; 1305 : }

  00014	e12fff1e	 bx          lr
  00018		 |$M48322|

			 ENDP  ; |Lan_EnableInterrupt|

	EXPORT	|Lan_DisableInterrupt|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48341| DCD	|$LN10@Lan_Disabl|
	DCD	0x40000600
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_DisableInterrupt| PROC

; 1313 : {

  00000		 |$LN10@Lan_Disabl|
  00000		 |$M48338|
  00000	e3500000	 cmp         r0, #0

; 1314 : 	DWORD dwTemp;
; 1315 : 
; 1316 : 	SMSC_ASSERT(pLan9118Data);
; 1317 :     SMSC_TRACE0(DBG_ISR ,"+Lan_DisableInterrupt\r\n");
; 1318 : 
; 1319 : 	if (pLan9118Data)
; 1320 : 	{
; 1321 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1322 : 
; 1323 : 		dwTemp = GetRegDW(pLan9118Data->dwLanBase, INT_EN);

  00004	15902000	 ldrne       r2, [r0]

; 1324 : 		dwTemp &= (~dwMask);

  00008	1592305c	 ldrne       r3, [r2, #0x5C]
  0000c	11c33001	 bicne       r3, r3, r1

; 1325 : 		SetRegDW(pLan9118Data->dwLanBase, INT_EN, dwTemp);

  00010	1582305c	 strne       r3, [r2, #0x5C]

; 1326 : 	}
; 1327 :     SMSC_TRACE0(DBG_ISR,"-Lan_DisableInterrupt\r\n");
; 1328 : 
; 1329 : }

  00014	e12fff1e	 bx          lr
  00018		 |$M48339|

			 ENDP  ; |Lan_DisableInterrupt|

	EXPORT	|Lan_GetInterruptStatus|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48354| DCD	|$LN8@Lan_GetInt|
	DCD	0x40000500
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_GetInterruptStatus| PROC

; 1336 : {

  00000		 |$LN8@Lan_GetInt|
  00000		 |$M48351|
  00000	e3500000	 cmp         r0, #0

; 1337 : 	SMSC_ASSERT(pLan9118Data);
; 1338 : 
; 1339 : 	if (pLan9118Data)
; 1340 : 	{
; 1341 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1342 : 		return GetRegDW(pLan9118Data->dwLanBase, INT_STS);

  00004	15903000	 ldrne       r3, [r0]
  00008	15930058	 ldrne       r0, [r3, #0x58]

; 1343 : 	}
; 1344 : 	return 0xFFFFFFFFUL;

  0000c	03e00000	 mvneq       r0, #0

; 1345 : }

  00010	e12fff1e	 bx          lr
  00014		 |$M48352|

			 ENDP  ; |Lan_GetInterruptStatus|

	EXPORT	|Lan_EnableIRQ|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48370| DCD	|$LN10@Lan_Enable@2|
	DCD	0x40000600
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_EnableIRQ| PROC

; 1353 : {

  00000		 |$LN10@Lan_Enable@2|
  00000		 |$M48367|
  00000	e3500000	 cmp         r0, #0

; 1354 : 	DWORD dwRegVal = 0UL;
; 1355 : 
; 1356 : 	SMSC_ASSERT(pLan9118Data);
; 1357 : 
; 1358 : 	if (pLan9118Data)
; 1359 : 	{
; 1360 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1361 : 
; 1362 : 		dwRegVal = GetRegDW(pLan9118Data->dwLanBase, INT_CFG);

  00004	15902000	 ldrne       r2, [r0]
  00008	15923054	 ldrne       r3, [r2, #0x54]

; 1363 :         dwRegVal |= INT_CFG_IRQ_EN_;

  0000c	13833c01	 orrne       r3, r3, #1, 24

; 1364 : 		SetRegDW(pLan9118Data->dwLanBase, INT_CFG, dwRegVal);

  00010	15823054	 strne       r3, [r2, #0x54]

; 1365 : 	}
; 1366 : }

  00014	e12fff1e	 bx          lr
  00018		 |$M48368|

			 ENDP  ; |Lan_EnableIRQ|

	EXPORT	|Lan_DisableIRQ|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48386| DCD	|$LN10@Lan_Disabl@2|
	DCD	0x40000600
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_DisableIRQ| PROC

; 1374 : {

  00000		 |$LN10@Lan_Disabl@2|
  00000		 |$M48383|
  00000	e3500000	 cmp         r0, #0

; 1375 : 	DWORD dwRegVal = 0UL;
; 1376 : 
; 1377 : 	SMSC_ASSERT(pLan9118Data);
; 1378 : 
; 1379 : 	if (pLan9118Data)
; 1380 : 	{
; 1381 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1382 : 		dwRegVal = GetRegDW(pLan9118Data->dwLanBase, INT_CFG);

  00004	15902000	 ldrne       r2, [r0]

; 1383 :         dwRegVal &= ~(INT_CFG_IRQ_EN_);

  00008	15923054	 ldrne       r3, [r2, #0x54]
  0000c	13c33c01	 bicne       r3, r3, #1, 24

; 1384 : 		SetRegDW(pLan9118Data->dwLanBase, INT_CFG, dwRegVal);

  00010	15823054	 strne       r3, [r2, #0x54]

; 1385 : 	}
; 1386 : }

  00014	e12fff1e	 bx          lr
  00018		 |$M48384|

			 ENDP  ; |Lan_DisableIRQ|

	EXPORT	|Lan_ClearInterruptStatus|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48399| DCD	|$LN8@Lan_ClearI|
	DCD	0x40000400
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_ClearInterruptStatus| PROC

; 1393 : {

  00000		 |$LN8@Lan_ClearI|
  00000		 |$M48396|
  00000	e3500000	 cmp         r0, #0

; 1394 : 	SMSC_ASSERT(pLan9118Data);
; 1395 : 
; 1396 : 	if (pLan9118Data)
; 1397 : 	{
; 1398 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1399 : 		SetRegDW(pLan9118Data->dwLanBase, INT_STS, dwMask);

  00004	15903000	 ldrne       r3, [r0]
  00008	15831058	 strne       r1, [r3, #0x58]

; 1400 : 	}
; 1401 : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M48397|

			 ENDP  ; |Lan_ClearInterruptStatus|

	EXPORT	|Lan_InitializeInterrupts|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48420| DCD	|$LN12@Lan_Initia@2|
	DCD	0x40001201
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_InitializeInterrupts| PROC

; 1409 : {

  00000		 |$LN12@Lan_Initia@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48417|
  00004	e3500000	 cmp         r0, #0

; 1410 : 	SMSC_ASSERT(pLan9118Data);
; 1411 : 
; 1412 : 	if (pLan9118Data)

  00008	0a00000c	 beq         |$LN1@Lan_Initia@2|

; 1413 : 	{
; 1414 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1415 : 		SMSC_ASSERT(pLan9118Data->LanInitialized == TRUE);
; 1416 : 
; 1417 : 		SetRegDW(pLan9118Data->dwLanBase, INT_EN, 0UL);

  0000c	e5903000	 ldr         r3, [r0]
  00010	e3a02000	 mov         r2, #0

; 1418 : 		SetRegDW(pLan9118Data->dwLanBase, INT_STS, 0xFFFFFFFFUL);

  00014	e3e0e000	 mvn         lr, #0
  00018	e583205c	 str         r2, [r3, #0x5C]
  0001c	e5903000	 ldr         r3, [r0]
  00020	e3a02c01	 mov         r2, #1, 24

; 1419 :         dwIntCfg |= INT_CFG_IRQ_EN_ | INT_CFG_IRQ_TYPE_;

  00024	e3822001	 orr         r2, r2, #1
  00028	e583e058	 str         lr, [r3, #0x58]

; 1420 : 		SetRegDW(pLan9118Data->dwLanBase, INT_CFG, dwIntCfg);

  0002c	e590e000	 ldr         lr, [r0]
  00030	e1813002	 orr         r3, r1, r2

; 1421 : 		pLan9118Data->InterruptsInitialized = (BOOLEAN)TRUE;

  00034	e3a02001	 mov         r2, #1
  00038	e58e3054	 str         r3, [lr, #0x54]
  0003c	e5c0200d	 strb        r2, [r0, #0xD]
  00040		 |$LN1@Lan_Initia@2|

; 1422 : 	}
; 1423 : }

  00040	e49de004	 ldr         lr, [sp], #4
  00044	e12fff1e	 bx          lr
  00048		 |$M48418|

			 ENDP  ; |Lan_InitializeInterrupts|

	EXPORT	|Lan_EnableSoftwareInterrupt|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48436| DCD	|$LN10@Lan_Enable@3|
	DCD	0x40000800
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_EnableSoftwareInterrupt| PROC

; 1432 : {

  00000		 |$LN10@Lan_Enable@3|
  00000		 |$M48433|
  00000	e3500000	 cmp         r0, #0

; 1433 : 	DWORD dwTemp = 0UL;
; 1434 : 
; 1435 : 	SMSC_ASSERT(pLan9118Data);
; 1436 : 
; 1437 : 	if (pLan9118Data)
; 1438 : 	{
; 1439 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1440 : 
; 1441 : 		pLan9118Data->SoftwareInterruptSignal = (BOOLEAN)FALSE;
; 1442 : 		dwTemp = GetRegDW(pLan9118Data->dwLanBase, INT_EN);

  00004	15902000	 ldrne       r2, [r0]
  00008	13a03000	 movne       r3, #0
  0000c	15c0300f	 strneb      r3, [r0, #0xF]
  00010	1592305c	 ldrne       r3, [r2, #0x5C]

; 1443 : 		dwTemp |= INT_EN_SW_INT_EN_;

  00014	13833102	 orrne       r3, r3, #2, 2

; 1444 : 		SetRegDW(pLan9118Data->dwLanBase, INT_EN, dwTemp);

  00018	1582305c	 strne       r3, [r2, #0x5C]

; 1445 : 	}
; 1446 : }

  0001c	e12fff1e	 bx          lr
  00020		 |$M48434|

			 ENDP  ; |Lan_EnableSoftwareInterrupt|

	EXPORT	|Lan_HandleSoftwareInterrupt|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48456| DCD	|$LN12@Lan_Handle|
	DCD	0x40000e01
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_HandleSoftwareInterrupt| PROC

; 1455 : {

  00000		 |$LN12@Lan_Handle|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48453|
  00004	e3500000	 cmp         r0, #0

; 1456 : 	DWORD dwTemp = 0UL;
; 1457 : 
; 1458 : 	SMSC_ASSERT(pLan9118Data);
; 1459 : 
; 1460 : 	if (pLan9118Data)

  00008	0a000008	 beq         |$LN1@Lan_Handle|

; 1461 : 	{
; 1462 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1463 : 
; 1464 : 		dwTemp = GetRegDW(pLan9118Data->dwLanBase, INT_EN);

  0000c	e5902000	 ldr         r2, [r0]

; 1465 : 		dwTemp &= ~(INT_EN_SW_INT_EN_);
; 1466 : 		SetRegDW(pLan9118Data->dwLanBase, INT_EN, dwTemp);
; 1467 : 		SetRegDW(pLan9118Data->dwLanBase, INT_STS, INT_STS_SW_INT_);

  00010	e3a0e102	 mov         lr, #2, 2

; 1468 : 		pLan9118Data->SoftwareInterruptSignal = (BOOLEAN)TRUE;

  00014	e3a01001	 mov         r1, #1
  00018	e592305c	 ldr         r3, [r2, #0x5C]
  0001c	e3c33102	 bic         r3, r3, #2, 2
  00020	e582305c	 str         r3, [r2, #0x5C]
  00024	e5903000	 ldr         r3, [r0]
  00028	e583e058	 str         lr, [r3, #0x58]
  0002c	e5c0100f	 strb        r1, [r0, #0xF]
  00030		 |$LN1@Lan_Handle|

; 1469 : 	}
; 1470 : }

  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$M48454|

			 ENDP  ; |Lan_HandleSoftwareInterrupt|

	EXPORT	|Lan_IsSoftwareInterruptSignaled|

  00000			 AREA	 |.pdata|, PDATA
|$T48466| DCD	|$LN7@Lan_IsSoft|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_IsSoftwareInterruptSignaled| PROC

; 1479 : {

  00000		 |$LN7@Lan_IsSoft|
  00000		 |$M48463|
  00000	e3500000	 cmp         r0, #0

; 1480 : 	SMSC_ASSERT(pLan9118Data);
; 1481 : 
; 1482 :     SMSC_TRACE0(DBG_ISR ,"+Lan_IsSoftwareInterruptSignaled\r\n");
; 1483 : 
; 1484 : 	if (pLan9118Data)
; 1485 : 	{
; 1486 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1487 : 
; 1488 : 		return pLan9118Data->SoftwareInterruptSignal;

  00004	15d0000f	 ldrneb      r0, [r0, #0xF]

; 1489 : 	}
; 1490 : 	else
; 1491 : 	{
; 1492 : 		return (BOOLEAN)FALSE;

  00008	03a00000	 moveq       r0, #0

; 1493 : 	}
; 1494 : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M48464|

			 ENDP  ; |Lan_IsSoftwareInterruptSignaled|

	EXPORT	|Lan_SetMacAddress|

  00000			 AREA	 |.pdata|, PDATA
|$T48476| DCD	|$LN6@Lan_SetMac@2|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_SetMacAddress| PROC

; 1497 : {

  00000		 |$LN6@Lan_SetMac@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M48473|
  00004	e1a05002	 mov         r5, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1b04000	 movs        r4, r0

; 1498 : 	SMSC_ASSERT(pLan9118Data);
; 1499 : 
; 1500 : 	if (pLan9118Data)

  00010	0a000009	 beq         |$LN1@Lan_SetMac@2|

; 1501 : 	{
; 1502 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1503 : 
; 1504 : 		Lan_SetMacRegDW(pLan9118Data->dwLanBase, ADDRH, dwHigh16);

  00014	e5940000	 ldr         r0, [r4]
  00018	e1a02006	 mov         r2, r6
  0001c	e3a01002	 mov         r1, #2
  00020	eb000000	 bl          Lan_SetMacRegDW

; 1505 : 		Lan_SetMacRegDW(pLan9118Data->dwLanBase, ADDRL, dwLow32);

  00024	e5940000	 ldr         r0, [r4]
  00028	e1a02005	 mov         r2, r5
  0002c	e3a01003	 mov         r1, #3
  00030	eb000000	 bl          Lan_SetMacRegDW

; 1506 : 		pLan9118Data->dwMacAddrHigh16 = dwHigh16;

  00034	e5846028	 str         r6, [r4, #0x28]

; 1507 : 		pLan9118Data->dwMacAddrLow32 = dwLow32;

  00038	e584502c	 str         r5, [r4, #0x2C]
  0003c		 |$LN1@Lan_SetMac@2|

; 1508 : 	}
; 1509 : }

  0003c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M48474|

			 ENDP  ; |Lan_SetMacAddress|

	EXPORT	|Lan_GetMacAddress|

  00000			 AREA	 |.pdata|, PDATA
|$T48486| DCD	|$LN6@Lan_GetMac@2|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_GetMacAddress| PROC

; 1512 : {

  00000		 |$LN6@Lan_GetMac@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M48483|
  00004	e1a05002	 mov         r5, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1b04000	 movs        r4, r0

; 1513 : 	SMSC_ASSERT(pLan9118Data);
; 1514 : 
; 1515 : 	if (pLan9118Data)

  00010	0a000009	 beq         |$LN1@Lan_GetMac@2|

; 1516 : 	{
; 1517 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1518 : 
; 1519 : 		*dwHigh16 = pLan9118Data->dwMacAddrHigh16=
; 1520 : 						Lan_GetMacRegDW(pLan9118Data->dwLanBase, ADDRH);

  00014	e5940000	 ldr         r0, [r4]
  00018	e3a01002	 mov         r1, #2
  0001c	eb000000	 bl          Lan_GetMacRegDW
  00020	e5840028	 str         r0, [r4, #0x28]
  00024	e5860000	 str         r0, [r6]

; 1521 : 		*dwLow32 = pLan9118Data->dwMacAddrLow32=
; 1522 : 						Lan_GetMacRegDW(pLan9118Data->dwLanBase, ADDRL);

  00028	e5940000	 ldr         r0, [r4]
  0002c	e3a01003	 mov         r1, #3
  00030	eb000000	 bl          Lan_GetMacRegDW
  00034	e584002c	 str         r0, [r4, #0x2C]
  00038	e5850000	 str         r0, [r5]
  0003c		 |$LN1@Lan_GetMac@2|

; 1523 : 	}
; 1524 : }

  0003c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M48484|

			 ENDP  ; |Lan_GetMacAddress|

	EXPORT	|Lan_InitializeTx|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48528| DCD	|$LN21@Lan_Initia@3|
	DCD	0x40002001
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_InitializeTx| PROC

; 1527 : {

  00000		 |$LN21@Lan_Initia@3|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48525|
  00004	e1b04000	 movs        r4, r0

; 1528 : 	DWORD dwRegVal = 0UL;
; 1529 : 
; 1530 : 	SMSC_ASSERT(pLan9118Data);
; 1531 : 
; 1532 : 	if (pLan9118Data)

  00008	0a00001a	 beq         |$LN1@Lan_Initia@3|

; 1533 : 	{
; 1534 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1535 : 		SMSC_ASSERT(pLan9118Data->InterruptsInitialized == TRUE);
; 1536 : 		SMSC_ASSERT(pLan9118Data->PhyInitialized == TRUE);
; 1537 : 
; 1538 : 		// setup MAC for TX
; 1539 : 		dwRegVal = Lan_GetMacRegDW(pLan9118Data->dwLanBase, MAC_CR);

  0000c	e5940000	 ldr         r0, [r4]
  00010	e3a01001	 mov         r1, #1
  00014	eb000000	 bl          Lan_GetMacRegDW
  00018	e1a03000	 mov         r3, r0

; 1540 : 		dwRegVal |= (MAC_CR_TXEN_ | MAC_CR_HBDIS_);
; 1541 : 		Lan_SetMacRegDW(pLan9118Data->dwLanBase, MAC_CR, dwRegVal);

  0001c	e5940000	 ldr         r0, [r4]
  00020	e3832281	 orr         r2, r3, #0x81, 4
  00024	e3a01001	 mov         r1, #1
  00028	eb000000	 bl          Lan_SetMacRegDW

; 1542 : 
; 1543 : 		//setup TLI store-and-forward, and preserve TxFifo size
; 1544 : 		dwRegVal = GetRegDW(pLan9118Data->dwLanBase, HW_CFG);

  0002c	e5941000	 ldr         r1, [r4]
  00030	e3a03af1	 mov         r3, #0xF1, 20

; 1545 : 		// some chips (may) use bit 11~0 
; 1546 : 		dwRegVal &= (HW_CFG_TX_FIF_SZ_ | 0xFFFUL);

  00034	e2432001	 sub         r2, r3, #1
  00038	e5913074	 ldr         r3, [r1, #0x74]

; 1547 : 		dwRegVal |= HW_CFG_SF_;
; 1548 : 		SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwRegVal);
; 1549 : 
; 1550 : 		SetRegDW(pLan9118Data->dwLanBase, TX_CFG, TX_CFG_TX_ON_);

  0003c	e3a00002	 mov         r0, #2

; 1551 : 
; 1552 : 		SetRegDW(pLan9118Data->dwLanBase, FIFO_INT, 0xFF000000UL);

  00040	e3a0e4ff	 mov         lr, #0xFF, 8
  00044	e0033002	 and         r3, r3, r2
  00048	e3833601	 orr         r3, r3, #1, 12
  0004c	e5813074	 str         r3, [r1, #0x74]
  00050	e5943000	 ldr         r3, [r4]

; 1553 : 		Lan_EnableInterrupt(pLan9118Data, 
; 1554 : 					INT_EN_TDFU_EN_ | INT_EN_TDFO_EN_ | INT_EN_TDFA_EN_);
; 1555 : 
; 1556 : 		pLan9118Data->TxInitialized = (BOOLEAN)TRUE;

  00054	e3a01001	 mov         r1, #1
  00058	e5830070	 str         r0, [r3, #0x70]
  0005c	e5943000	 ldr         r3, [r4]
  00060	e583e068	 str         lr, [r3, #0x68]
  00064	e5942000	 ldr         r2, [r4]
  00068	e592305c	 ldr         r3, [r2, #0x5C]
  0006c	e3833c0e	 orr         r3, r3, #0xE, 24
  00070	e582305c	 str         r3, [r2, #0x5C]
  00074	e5c4100e	 strb        r1, [r4, #0xE]
  00078		 |$LN1@Lan_Initia@3|

; 1557 : 	}
; 1558 : }

  00078	e8bd4010	 ldmia       sp!, {r4, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$M48526|

			 ENDP  ; |Lan_InitializeTx|

	EXPORT	|Lan_StartTx|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48546| DCD	|$LN10@Lan_StartT|
	DCD	0x40000600
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_StartTx| PROC

; 1561 : {

  00000		 |$LN10@Lan_StartT|
  00000		 |$M48543|
  00000	e3500000	 cmp         r0, #0

; 1562 : 	SMSC_ASSERT(pLan9118Data);
; 1563 : 
; 1564 : 	if (pLan9118Data)
; 1565 : 	{
; 1566 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1567 : 		
; 1568 : 		SMSC_ASSERT(pLan9118Data->TxInitialized == TRUE);
; 1569 : 		SetRegDW(pLan9118Data->dwLanBase, TX_DATA_FIFO_PORT ,dwTxCmdA);

  00004	15903000	 ldrne       r3, [r0]
  00008	15831020	 strne       r1, [r3, #0x20]

; 1570 : 		SetRegDW(pLan9118Data->dwLanBase, TX_DATA_FIFO_PORT, dwTxCmdB);

  0000c	15903000	 ldrne       r3, [r0]
  00010	15832020	 strne       r2, [r3, #0x20]

; 1571 : 	}
; 1572 : }

  00014	e12fff1e	 bx          lr
  00018		 |$M48544|

			 ENDP  ; |Lan_StartTx|

	EXPORT	|Lan_SendPacketPIO|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48565| DCD	|$LN11@Lan_SendPa|
	DCD	0x40001301
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_SendPacketPIO| PROC

; 1575 : {

  00000		 |$LN11@Lan_SendPa|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M48562|
  00004	e3500000	 cmp         r0, #0

; 1576 : 	DWORD dwTxCmdA;
; 1577 : 	DWORD dwTxCmdB;
; 1578 : 
; 1579 : 	SMSC_ASSERT(pLan9118Data);
; 1580 : 	
; 1581 : 	if (pLan9118Data)

  00008	0a00000d	 beq         |$LN2@Lan_SendPa|

; 1582 : 	{
; 1583 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1584 : 
; 1585 : 		SMSC_ASSERT(pLan9118Data->TxInitialized == TRUE);
; 1586 : 		if(wPacketTag == 0)
; 1587 : 		{
; 1588 : 			SMSC_WARNING0("Lan_SendPacketPIO(wPacketTag==0) Zero is reserved\n");
; 1589 : 		}
; 1590 : 
; 1591 : 		dwTxCmdA=(
; 1592 : 			((((DWORD)pbPacketData)&0x03UL)<<16) | //DWORD alignment adjustment
; 1593 : 			TX_CMD_A_INT_FIRST_SEG_ | TX_CMD_A_INT_LAST_SEG_ | 
; 1594 : 			((DWORD)wPacketLength));
; 1595 : 		dwTxCmdB=
; 1596 : 			(((DWORD)wPacketTag)<<16) | 
; 1597 : 			((DWORD)wPacketLength);
; 1598 : 		SetRegDW(pLan9118Data->dwLanBase,TX_DATA_FIFO_PORT,dwTxCmdA);

  0000c	e2035003	 and         r5, r3, #3
  00010	e5904000	 ldr         r4, [r0]
  00014	e182e805	 orr         lr, r2, r5, lsl #16
  00018	e38eea03	 orr         lr, lr, #3, 20
  0001c	e584e020	 str         lr, [r4, #0x20]

; 1599 : 		SetRegDW(pLan9118Data->dwLanBase,TX_DATA_FIFO_PORT,dwTxCmdB);

  00020	e590e000	 ldr         lr, [r0]
  00024	e1821801	 orr         r1, r2, r1, lsl #16

; 1600 : 		Lan_WriteTxFifo(
; 1601 : 			pLan9118Data->dwLanBase,
; 1602 : 			(DWORD *)(((DWORD)pbPacketData)&0xFFFFFFFCUL),
; 1603 : 			((DWORD)wPacketLength+3UL+
; 1604 : 			(((DWORD)pbPacketData)&0x03UL))>>2);

  00028	e0822005	 add         r2, r2, r5
  0002c	e58e1020	 str         r1, [lr, #0x20]
  00030	e5900000	 ldr         r0, [r0]
  00034	e2822003	 add         r2, r2, #3
  00038	e1a02122	 mov         r2, r2, lsr #2
  0003c	e3c31003	 bic         r1, r3, #3
  00040	eb000000	 bl          Lan_WriteTxFifo
  00044		 |$LN2@Lan_SendPa|

; 1605 : 	}
; 1606 : }

  00044	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$M48563|

			 ENDP  ; |Lan_SendPacketPIO|

	EXPORT	|Lan_CompleteTx|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48583| DCD	|$LN12@Lan_Comple|
	DCD	0x40000a00
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_CompleteTx| PROC

; 1609 : {

  00000		 |$LN12@Lan_Comple|
  00000		 |$M48580|
  00000	e1b03000	 movs        r3, r0

; 1610 : 	DWORD result = 0UL;

  00004	e3a00000	 mov         r0, #0

; 1611 : 
; 1612 : 	SMSC_ASSERT(pLan9118Data);
; 1613 : 
; 1614 : 	if (pLan9118Data)

  00008	0a000005	 beq         |$LN1@Lan_Comple|

; 1615 : 	{
; 1616 : 		SMSC_ASSERT(pLan9118Data->dwLanBase!=0UL);
; 1617 : 		SMSC_ASSERT(pLan9118Data->TxInitialized==TRUE);
; 1618 : 
; 1619 : 		result = GetRegDW(pLan9118Data->dwLanBase,TX_FIFO_INF);

  0000c	e5932000	 ldr         r2, [r3]
  00010	e5923080	 ldr         r3, [r2, #0x80]

; 1620 : 		result &= TX_FIFO_INF_TSUSED_;

  00014	e31308ff	 tst         r3, #0xFF, 16

; 1621 : 		if(result != 0x00000000UL) {
; 1622 : 			result = GetRegDW(pLan9118Data->dwLanBase,TX_STATUS_FIFO_PORT);

  00018	15920048	 ldrne       r0, [r2, #0x48]

; 1625 : 		}
; 1626 : 	}
; 1627 : 	return result;
; 1628 : }

  0001c	112fff1e	 bxne        lr

; 1623 : 		} else {
; 1624 : 			result = 0UL;

  00020	e3a00000	 mov         r0, #0
  00024		 |$LN1@Lan_Comple|

; 1625 : 		}
; 1626 : 	}
; 1627 : 	return result;
; 1628 : }

  00024	e12fff1e	 bx          lr
  00028		 |$M48581|

			 ENDP  ; |Lan_CompleteTx|

	EXPORT	|Lan_GetTxDataFreeSpace|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48596| DCD	|$LN9@Lan_GetTxD|
	DCD	0x40000800
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_GetTxDataFreeSpace| PROC

; 1631 : {

  00000		 |$LN9@Lan_GetTxD|
  00000		 |$M48593|
  00000	e3500000	 cmp         r0, #0

; 1632 : 	SMSC_ASSERT(pLan9118Data);
; 1633 : 
; 1634 : 	if (pLan9118Data)
; 1635 : 	{
; 1636 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1637 : 
; 1638 : 		return GetRegDW(pLan9118Data->dwLanBase,TX_FIFO_INF) & TX_FIFO_INF_TDFREE_;

  00004	15903000	 ldrne       r3, [r0]
  00008	13a02cff	 movne       r2, #0xFF, 24
  0000c	138220ff	 orrne       r2, r2, #0xFF
  00010	15933080	 ldrne       r3, [r3, #0x80]
  00014	10030002	 andne       r0, r3, r2

; 1639 : 	}
; 1640 : 	else
; 1641 : 	{
; 1642 : 		return 0x0UL;

  00018	03a00000	 moveq       r0, #0

; 1643 : 	}
; 1644 : }

  0001c	e12fff1e	 bx          lr
  00020		 |$M48594|

			 ENDP  ; |Lan_GetTxDataFreeSpace|

	EXPORT	|Lan_GetTxStatusCount|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48609| DCD	|$LN9@Lan_GetTxS|
	DCD	0x40000700
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_GetTxStatusCount| PROC

; 1647 : {

  00000		 |$LN9@Lan_GetTxS|
  00000		 |$M48606|
  00000	e3500000	 cmp         r0, #0

; 1648 : 	SMSC_ASSERT(pLan9118Data);
; 1649 : 
; 1650 : 	if (pLan9118Data)
; 1651 : 	{
; 1652 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1653 : 
; 1654 : 		return ((GetRegDW(pLan9118Data->dwLanBase,TX_FIFO_INF) & (TX_FIFO_INF_TSUSED_)) >> 16) & 0xFFFFUL;

  00004	15903000	 ldrne       r3, [r0]
  00008	15933080	 ldrne       r3, [r3, #0x80]
  0000c	11a03403	 movne       r3, r3, lsl #8
  00010	11a00c23	 movne       r0, r3, lsr #24

; 1655 : 	}
; 1656 : 	else
; 1657 : 	{
; 1658 : 		return 0x0UL;

  00014	03a00000	 moveq       r0, #0

; 1659 : 	}
; 1660 : }

  00018	e12fff1e	 bx          lr
  0001c		 |$M48607|

			 ENDP  ; |Lan_GetTxStatusCount|

	EXPORT	|Lan_InitializeRx|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48648| DCD	|$LN19@Lan_Initia@4|
	DCD	0x40001501
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_InitializeRx| PROC

; 1664 : {

  00000		 |$LN19@Lan_Initia@4|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M48645|
  00004	e3500000	 cmp         r0, #0

; 1665 : 	DWORD dwRegVal = 0UL;
; 1666 : 
; 1667 : 	SMSC_ASSERT(pLan9118Data);
; 1668 : 
; 1669 :     SMSC_TRACE0(DBG_INIT,"+Lan_InitializeRx\r\n");
; 1670 : 
; 1671 : 	if (pLan9118Data)

  00008	0a00000f	 beq         |$LN15@Lan_Initia@4|

; 1672 : 	{
; 1673 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1674 : 		SMSC_ASSERT(pLan9118Data->InterruptsInitialized == TRUE);
; 1675 : 		SMSC_ASSERT(pLan9118Data->PhyInitialized == TRUE);
; 1676 : 
; 1677 : 		//set receive configuration
; 1678 : 		SetRegDW(pLan9118Data->dwLanBase, RX_CFG, dwRxCfg);

  0000c	e5903000	 ldr         r3, [r0]
  00010	e3e0ecff	 mvn         lr, #0xFF, 24
  00014	e3a05cff	 mov         r5, #0xFF, 24
  00018	e583106c	 str         r1, [r3, #0x6C]

; 1679 : 
; 1680 : 		//set the interrupt levels to zero
; 1681 : 		dwRegVal = GetRegDW(pLan9118Data->dwLanBase, FIFO_INT);

  0001c	e5904000	 ldr         r4, [r0]

; 1682 : 		dwRegVal &= 0xFFFF0000UL;
; 1683 : 		dwRegVal |= (dw & 0x0000FFFFUL);
; 1684 : 		SetRegDW(pLan9118Data->dwLanBase, FIFO_INT, dwRegVal);

  00020	e22ee0ff	 eor         lr, lr, #0xFF
  00024	e38510ff	 orr         r1, r5, #0xFF
  00028	e5943068	 ldr         r3, [r4, #0x68]
  0002c	e0022001	 and         r2, r2, r1
  00030	e003300e	 and         r3, r3, lr
  00034	e1833002	 orr         r3, r3, r2
  00038	e5843068	 str         r3, [r4, #0x68]

; 1685 : 
; 1686 : 		//enable interrupt
; 1687 :         Lan_EnableInterrupt(pLan9118Data, INT_EN_RSFL_EN_);

  0003c	e5902000	 ldr         r2, [r0]
  00040	e592305c	 ldr         r3, [r2, #0x5C]
  00044	e3833008	 orr         r3, r3, #8
  00048	e582305c	 str         r3, [r2, #0x5C]
  0004c		 |$LN15@Lan_Initia@4|

; 1688 : 	}
; 1689 :     SMSC_TRACE0(DBG_INIT,"-Lan_InitializeRx\r\n");
; 1690 : 
; 1691 : }

  0004c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M48646|

			 ENDP  ; |Lan_InitializeRx|

	EXPORT	|Lan_PopRxStatus|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48666| DCD	|$LN12@Lan_PopRxS|
	DCD	0x40000a00
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_PopRxStatus| PROC

; 1695 : {

  00000		 |$LN12@Lan_PopRxS|
  00000		 |$M48663|
  00000	e1b03000	 movs        r3, r0

; 1696 : 	DWORD result = 0UL;

  00004	e3a00000	 mov         r0, #0

; 1697 : 
; 1698 : 	SMSC_ASSERT(pLan9118Data);
; 1699 : 
; 1700 : 	if (pLan9118Data)

  00008	0a000005	 beq         |$LN1@Lan_PopRxS|

; 1701 : 	{
; 1702 : 		SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 1703 : 
; 1704 : 		result = GetRegDW(pLan9118Data->dwLanBase, RX_FIFO_INF);

  0000c	e5932000	 ldr         r2, [r3]
  00010	e592307c	 ldr         r3, [r2, #0x7C]

; 1705 : 		if(result & 0x00FF0000UL) {

  00014	e31308ff	 tst         r3, #0xFF, 16

; 1706 : 			//Rx status is available, read it
; 1707 : 			result = GetRegDW(pLan9118Data->dwLanBase,RX_STATUS_FIFO_PORT);

  00018	15920040	 ldrne       r0, [r2, #0x40]

; 1710 : 		}
; 1711 : 	}
; 1712 : 	return result;
; 1713 : }

  0001c	112fff1e	 bxne        lr

; 1708 : 		} else {
; 1709 : 			result = 0UL;

  00020	e3a00000	 mov         r0, #0
  00024		 |$LN1@Lan_PopRxS|

; 1710 : 		}
; 1711 : 	}
; 1712 : 	return result;
; 1713 : }

  00024	e12fff1e	 bx          lr
  00028		 |$M48664|

			 ENDP  ; |Lan_PopRxStatus|

	EXPORT	|Lan_InitializePhy|
	EXPORT	|??_C@_1FC@FOJCMIGM@?$AAT?$AAh?$AAi?$AAs?$AA?5?$AAc?$AAh?$AAi?$AAp?$AA?5?$AAd?$AAo?$AAe?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AA?5?$AAA?$AAu?$AAt?$AAo?$AA?5?$AAM@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@NPAGJJIH@?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AA?5?$AAP?$AAh?$AAy?$AA?5?$AAa?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@JFKKFCL@?$AAU?$AAs?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAE?$AAx?$AAt?$AAP?$AAh?$AAy?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@CJDAMBLM@?$AAU?$AAs?$AAe?$AA?5?$AAI?$AAn?$AAt?$AAP?$AAh?$AAy?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T48792| DCD	|$LN104@Lan_Initia@5|
	DCD	0x40010802

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@FOJCMIGM@?$AAT?$AAh?$AAi?$AAs?$AA?5?$AAc?$AAh?$AAi?$AAp?$AA?5?$AAd?$AAo?$AAe?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AA?5?$AAA?$AAu?$AAt?$AAo?$AA?5?$AAM@| DCB "T"
	DCB	0x0, "h", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "c", 0x0, "h"
	DCB	0x0, "i", 0x0, "p", 0x0, " ", 0x0, "d", 0x0, "o", 0x0, "e"
	DCB	0x0, "s", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " ", 0x0, "s"
	DCB	0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, " ", 0x0, "A", 0x0, "u", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "M", 0x0, "d", 0x0, "i", 0x0, "x", 0x0, "!", 0x0, "!"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@NPAGJJIH@?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AA?5?$AAP?$AAh?$AAy?$AA?5?$AAa?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, " "
	DCB	0x0, "P", 0x0, "h", 0x0, "y", 0x0, " ", 0x0, "a", 0x0, "t"
	DCB	0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@JFKKFCL@?$AAU?$AAs?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAE?$AAx?$AAt?$AAP?$AAh?$AAy?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, " ", 0x0, "E", 0x0, "x", 0x0, "t", 0x0, "P"
	DCB	0x0, "h", 0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@CJDAMBLM@?$AAU?$AAs?$AAe?$AA?5?$AAI?$AAn?$AAt?$AAP?$AAh?$AAy?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "P", 0x0, "h", 0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\lan9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_InitializePhy| PROC

; 614  : {

  00000		 |$LN104@Lan_Initia@5|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M48789|
  00008	e1a06001	 mov         r6, r1
  0000c	e1b05000	 movs        r5, r0

; 615  : 	BOOL 	result = FALSE;

  00010	e3a0b000	 mov         r11, #0

; 616  : 	BOOL	ExtPhy = FALSE;
; 617  : 	DWORD 	dwTemp = 0UL;
; 618  : 	DWORD 	dwLoopCount = 0UL;
; 619  : 	DWORD 	dwPhyId = 0UL;
; 620  : 	BYTE 	bPhyModel = (BYTE)0;
; 621  : 	BYTE 	bPhyRev = (BYTE)0;
; 622  : 	WORD  	wPhyID1 = 0;
; 623  : 	WORD	wPhyID2 = 0;
; 624  : 
; 625  : 	SMSC_TRACE2(DBG_INIT, "+Lan_InitializePhy(pLan9118Data=0x%08lX, bPhyAddress=%d)\r\n", (DWORD)pLan9118Data,bPhyAddress);
; 626  : 	SMSC_ASSERT(pLan9118Data);
; 627  : 
; 628  : 	if (pLan9118Data == NULL) 
; 629  : 	{
; 630  : 		return FALSE;

  00014	03a0b000	 moveq       r11, #0
  00018	e3a07000	 mov         r7, #0
  0001c	0a0000f7	 beq         |$DONE$47249|

; 631  : 	}
; 632  : 
; 633  : 	SMSC_ASSERT(pLan9118Data->dwLanBase != 0UL);
; 634  : 	SMSC_ASSERT(pLan9118Data->dwIdRev != 0UL);
; 635  : 	SMSC_ASSERT(pLan9118Data->LanInitialized == (BOOLEAN)TRUE);
; 636  : 	SMSC_ASSERT(pLan9118Data->InterruptsInitialized == (BOOLEAN)TRUE);
; 637  : 
; 638  : 	if (bPhyAddress == 0xFF) 

  00020	e35600ff	 cmp         r6, #0xFF
  00024	1a000043	 bne         |$LN44@Lan_Initia@5|
  00028		 |$LN99@Lan_Initia@5|

; 639  : 	{
; 640  : 		/* Use Internal Phy */
; 641  : 		SMSC_TRACE0(DBG_PHY, "Use IntPhy\r\n");
; 642  : 		RETAILMSG(1, (TEXT("Use IntPhy\r\n")));

  00028	e59f03ec	 ldr         r0, [pc, #0x3EC]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030		 |$LN38@Lan_Initia@5|

; 737  : 						bPhyAddress = (BYTE)1;	// internal address

  00030	e3a06001	 mov         r6, #1
  00034		 |$LN98@Lan_Initia@5|

; 693  : 								{
; 694  : 									SMSC_TRACE1(DBG_PHY, "Detect Phy at Address 0x%x\r\n", dwAddr);
; 695  : 									RETAILMSG(1, (TEXT("Detect Phy at Address 0x%x\r\n"), dwAddr));
; 696  : 									bPhyAddress = (BYTE)dwAddr;
; 697  : 									ExtPhy = TRUE;
; 698  : 									break;
; 699  : 								}
; 700  : 							}
; 701  : 							if (dwAddr == 32UL)
; 702  : 							{
; 703  : 								SMSC_WARNING0("Error! Failed to detect External Phy\r\n");
; 704  : 								ExtPhy = FALSE;
; 705  : 							}
; 706  : 						}
; 707  : 						if ((wPhyID1 == (WORD)0xFFFF) && 
; 708  : 							(wPhyID2 == (WORD)0xFFFF))
; 709  : 						{
; 710  : 							SMSC_WARNING0("Error! External Phy is not accessible. Switch to Internal Phy\r\n");
; 711  : 							// revert back to Internal Phy
; 712  : 							bPhyAddress = (BYTE)1;	// internal address
; 713  : 							dwTemp &= ~HW_CFG_PHY_CLK_SEL_;
; 714  : 							dwTemp |= HW_CFG_PHY_CLK_SEL_CLK_DIS_;
; 715  : 							SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);
; 716  : 							SMSC_MICRO_DELAY(10U);
; 717  : 
; 718  : 							dwTemp &= ~HW_CFG_EXT_PHY_EN_;
; 719  : 							SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);
; 720  : 
; 721  : 							dwTemp &= ~HW_CFG_PHY_CLK_SEL_;
; 722  : 							dwTemp |= HW_CFG_PHY_CLK_SEL_EXT_PHY_;
; 723  : 							SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);
; 724  : 							SMSC_MICRO_DELAY(10U);
; 725  : 
; 726  : 							dwTemp &= ~HW_CFG_SMI_SEL_;
; 727  : 							SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);
; 728  : 
; 729  : 							ExtPhy = FALSE;
; 730  : 						}
; 731  : 					}
; 732  : 					else
; 733  : 					{
; 734  : 						/* Use Internal Phy */
; 735  : 						SMSC_WARNING0("ExtPhy is not detected. Switch to Internal Phy\r\n");
; 736  : 						ExtPhy = FALSE;

  00034	e3a07000	 mov         r7, #0

; 737  : 						bPhyAddress = (BYTE)1;	// internal address

  00038		 |$LN28@Lan_Initia@5|

; 837  : 		}
; 838  : 	}
; 839  : 
; 840  : 	dwTemp = (DWORD)Lan_GetPhyRegW(pLan9118Data->dwLanBase, (DWORD)bPhyAddress, PHY_ID_2);

  00038	e5950000	 ldr         r0, [r5]
  0003c	e3a02003	 mov         r2, #3
  00040	e1a01006	 mov         r1, r6
  00044	eb000000	 bl          Lan_GetMiiRegW
  00048	e1a04000	 mov         r4, r0

; 841  : 	bPhyRev = ((BYTE)(dwTemp & (0x0FUL)));
; 842  : 	bPhyModel = ((BYTE)((dwTemp>>4) & (0x3FUL)));
; 843  : 	dwPhyId = dwTemp << 16;
; 844  : 	dwTemp = (DWORD)Lan_GetPhyRegW(pLan9118Data->dwLanBase, (DWORD)bPhyAddress, PHY_ID_1);

  0004c	e5950000	 ldr         r0, [r5]
  00050	e3a02002	 mov         r2, #2
  00054	e1a01006	 mov         r1, r6
  00058	eb000000	 bl          Lan_GetMiiRegW

; 845  : 	dwPhyId |= ((dwTemp & (0x0000FFFFUL))<<2);
; 846  : 
; 847  : 	pLan9118Data->bPhyAddress = bPhyAddress;
; 848  : 	pLan9118Data->dwPhyId = dwPhyId;

  0005c	e1803704	 orr         r3, r0, r4, lsl #14

; 849  : 	pLan9118Data->bPhyModel = bPhyModel;
; 850  : 	pLan9118Data->bPhyRev = bPhyRev;
; 851  : 	pLan9118Data->dwLinkMode = LINK_NO_LINK;
; 852  : 
; 853  : 	/* reset the PHY */
; 854  : 	Lan_SetPhyRegW(pLan9118Data->dwLanBase, (DWORD)bPhyAddress, PHY_BCR, PHY_BCR_RESET_);

  00060	e5950000	 ldr         r0, [r5]
  00064	e1a03103	 mov         r3, r3, lsl #2
  00068	e1a02b04	 mov         r2, r4, lsl #22
  0006c	e5853014	 str         r3, [r5, #0x14]
  00070	e1a0ed22	 mov         lr, r2, lsr #26
  00074	e204400f	 and         r4, r4, #0xF
  00078	e3a08000	 mov         r8, #0
  0007c	e3a03902	 mov         r3, #2, 18
  00080	e3a02000	 mov         r2, #0
  00084	e1a01006	 mov         r1, r6
  00088	e5c56018	 strb        r6, [r5, #0x18]
  0008c	e5c5e019	 strb        lr, [r5, #0x19]
  00090	e5c5401a	 strb        r4, [r5, #0x1A]
  00094	e585801c	 str         r8, [r5, #0x1C]
  00098	eb000000	 bl          Lan_SetMiiRegW
  0009c	e3a03b61	 mov         r3, #0x61, 22

; 855  : 	dwLoopCount = 100000UL;

  000a0	e3834e2a	 orr         r4, r3, #0x2A, 28
  000a4		 |$LL13@Lan_Initia@5|

; 856  : 	do {
; 857  : 		SMSC_MICRO_DELAY(10U);

  000a4	e3a0000a	 mov         r0, #0xA
  000a8	eb000000	 bl          NdisStallExecution

; 858  : 		dwTemp = (DWORD)Lan_GetPhyRegW(pLan9118Data->dwLanBase, (DWORD)bPhyAddress, PHY_BCR);

  000ac	e5950000	 ldr         r0, [r5]
  000b0	e3a02000	 mov         r2, #0
  000b4	e1a01006	 mov         r1, r6
  000b8	eb000000	 bl          Lan_GetMiiRegW

; 859  : 		dwLoopCount--;

  000bc	e2544001	 subs        r4, r4, #1

; 860  : 	} while ((dwLoopCount>0UL) && (dwTemp & (DWORD)PHY_BCR_RESET_));

  000c0	0a000001	 beq         |$LN10@Lan_Initia@5|
  000c4	e3100902	 tst         r0, #2, 18
  000c8	1afffff5	 bne         |$LL13@Lan_Initia@5|
  000cc		 |$LN10@Lan_Initia@5|

; 861  : 	if (dwTemp & (DWORD)PHY_BCR_RESET_) {

  000cc	e3100902	 tst         r0, #2, 18
  000d0	1a0000ca	 bne         |$DONE$47249|

; 862  : 		SMSC_WARNING0("PHY reset failed to complete.\r\n");
; 863  : 		goto DONE;
; 864  : 	}
; 865  : #ifdef USE_PHY_WORK_AROUND	// on internal PHY use only
; 866  : 	if (ExtPhy == FALSE) 	// 031305 WH

  000d4	e3570000	 cmp         r7, #0
  000d8	1a0000c5	 bne         |$LN1@Lan_Initia@5|

; 867  : 	{
; 868  : 		// workaround for 118/117/116/115 family
; 869  : 		if (((pLan9118Data->dwIdRev & 0xFFF0FFFFUL) == 0x01100001UL) ||
; 870  : 			((pLan9118Data->dwIdRev & 0xFFF0FFFFUL) == 0x01100002UL))

  000dc	e5953004	 ldr         r3, [r5, #4]
  000e0	e3a01611	 mov         r1, #0x11, 12
  000e4	e3c3280f	 bic         r2, r3, #0xF, 16
  000e8	e3813001	 orr         r3, r1, #1
  000ec	e1520003	 cmp         r2, r3
  000f0	0a000003	 beq         |$LN6@Lan_Initia@5|
  000f4	e3a03611	 mov         r3, #0x11, 12
  000f8	e3833002	 orr         r3, r3, #2
  000fc	e1520003	 cmp         r2, r3
  00100	1a000006	 bne         |$LN5@Lan_Initia@5|
  00104		 |$LN6@Lan_Initia@5|

; 871  : 		{
; 872  : 			if(!Phy_LoopBackTest(pLan9118Data) && (pLan9118Data->bPhyAddress==(BYTE)1)) {

  00104	e1a00005	 mov         r0, r5
  00108	eb000000	 bl          Phy_LoopBackTest
  0010c	e3500000	 cmp         r0, #0
  00110	1a000002	 bne         |$LN5@Lan_Initia@5|
  00114	e5d53018	 ldrb        r3, [r5, #0x18]
  00118	e3530001	 cmp         r3, #1
  0011c	0a0000b7	 beq         |$DONE$47249|
  00120		 |$LN5@Lan_Initia@5|

; 873  : 				SMSC_WARNING1("Failed Loop Back Test, reset %d times\n\r",
; 874  : 					pLan9118Data->dwResetCount);
; 875  : 				goto DONE;
; 876  : 			} else {
; 877  : 				SMSC_WARNING1("Passed Loop Back Test, reset %d times\n\r",
; 878  : 					pLan9118Data->dwResetCount);
; 879  : 			}	
; 880  : 		}
; 881  : 	}
; 882  : #endif //USE_PHY_WORK_AROUND	// on internal PHY use only
; 883  : 
; 884  : 
; 885  : if (ExtPhy == FALSE) 
; 886  : {
; 887  : 	if (((pLan9118Data->dwIdRev & 0x000F0000UL) == 0x000A0000UL) | 
; 888  : 		((pLan9118Data->dwIdRev & 0xFFF00000UL) == 0x92100000UL))

  00120	e5952004	 ldr         r2, [r5, #4]
  00124	e202380f	 and         r3, r2, #0xF, 16
  00128	e353080a	 cmp         r3, #0xA, 16
  0012c	1a0000a0	 bne         |$LN50@Lan_Initia@5|
  00130	e3a01001	 mov         r1, #1
  00134	ea00009f	 b           |$LN51@Lan_Initia@5|
  00138		 |$LN44@Lan_Initia@5|

; 643  : 		/* verify phy ID */
; 644  : 		bPhyAddress = (BYTE)1;	// internal address
; 645  : 		ExtPhy = FALSE;
; 646  : 	}
; 647  : 	else 
; 648  : 	{
; 649  : 		/* Using External Phy */
; 650  : 		/* Check ID */
; 651  : 		switch (pLan9118Data->dwIdRev & 0xFFFF0000UL)

  00138	e5951004	 ldr         r1, [r5, #4]
  0013c	e3e03cff	 mvn         r3, #0xFF, 24
  00140	e22330ff	 eor         r3, r3, #0xFF
  00144	e3a00745	 mov         r0, #0x45, 14
  00148	e0012003	 and         r2, r1, r3
  0014c	e3803801	 orr         r3, r0, #1, 16
  00150	e1520003	 cmp         r2, r3
  00154	0a000067	 beq         |$LN40@Lan_Initia@5|
  00158	e3a03745	 mov         r3, #0x45, 14
  0015c	e3833803	 orr         r3, r3, #3, 16
  00160	e1520003	 cmp         r2, r3
  00164	0a000063	 beq         |$LN40@Lan_Initia@5|
  00168	e3a03545	 mov         r3, #0x45, 10
  0016c	e383381a	 orr         r3, r3, #0x1A, 16
  00170	e1520003	 cmp         r2, r3
  00174	0a000003	 beq         |$LN26@Lan_Initia@5|
  00178	e3a03545	 mov         r3, #0x45, 10
  0017c	e383383a	 orr         r3, r3, #0x3A, 16
  00180	e1520003	 cmp         r2, r3

; 823  : 				{
; 824  : 					/* Use Internal Phy */
; 825  : 					SMSC_WARNING0("ExtPhy is not detected. Switch to Internal Phy\r\n");
; 826  : 					bPhyAddress = (BYTE)1;	// internal address
; 827  : 					ExtPhy = FALSE;
; 828  : 				}
; 829  : 				break;
; 830  : 			default:
; 831  : 				/* Use Internal Phy */
; 832  : 				SMSC_TRACE0(DBG_PHY, "Use IntPhy\r\n");
; 833  : 				RETAILMSG(1, (TEXT("Use IntPhy\r\n")));
; 834  : 				bPhyAddress = (BYTE)1;	// internal address
; 835  : 				ExtPhy = FALSE;
; 836  : 				break;

  00184	1affffa7	 bne         |$LN99@Lan_Initia@5|
  00188		 |$LN26@Lan_Initia@5|

; 738  : 					}
; 739  : 				}
; 740  : 				else
; 741  : 				{
; 742  : 					SMSC_WARNING2("Error! Chip Id = 0x%x and Rev = 0x%x doesn't seem to be right combination.\r\n", (pLan9118Data->dwIdRev >> 16) & 0xFFFFUL, pLan9118Data->dwIdRev & 0xFFFFUL);
; 743  : 				}
; 744  : 				break;
; 745  : 			case	0x115A0000UL:
; 746  : 			case	0x117A0000UL:
; 747  : 				dwTemp = GetRegDW(pLan9118Data->dwLanBase, HW_CFG);

  00188	e5952000	 ldr         r2, [r5]
  0018c	e5923074	 ldr         r3, [r2, #0x74]

; 748  : 				if (dwTemp & HW_CFG_EXT_PHY_DET_)

  00190	e3130008	 tst         r3, #8
  00194	0affffa5	 beq         |$LN38@Lan_Initia@5|

; 749  : 				{
; 750  : 					dwTemp &= ~HW_CFG_PHY_CLK_SEL_;
; 751  : 					dwTemp |= HW_CFG_PHY_CLK_SEL_CLK_DIS_;

  00198	e3c33060	 bic         r3, r3, #0x60
  0019c	e3834040	 orr         r4, r3, #0x40

; 752  : 					SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);
; 753  : 					SMSC_MICRO_DELAY(10U);

  001a0	e3a0000a	 mov         r0, #0xA
  001a4	e5824074	 str         r4, [r2, #0x74]
  001a8	eb000000	 bl          NdisStallExecution

; 754  : 
; 755  : 					dwTemp |= HW_CFG_EXT_PHY_EN_;
; 756  : 					SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);

  001ac	e5952000	 ldr         r2, [r5]
  001b0	e3843004	 orr         r3, r4, #4

; 757  : 
; 758  : 					dwTemp &= ~HW_CFG_PHY_CLK_SEL_;
; 759  : 					dwTemp |= HW_CFG_PHY_CLK_SEL_EXT_PHY_;

  001b4	e3c31060	 bic         r1, r3, #0x60
  001b8	e5823074	 str         r3, [r2, #0x74]

; 760  : 					SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);

  001bc	e5953000	 ldr         r3, [r5]
  001c0	e3814020	 orr         r4, r1, #0x20

; 761  : 					SMSC_MICRO_DELAY(10U);

  001c4	e3a0000a	 mov         r0, #0xA
  001c8	e5834074	 str         r4, [r3, #0x74]
  001cc	eb000000	 bl          NdisStallExecution

; 762  : 
; 763  : 					dwTemp |= HW_CFG_SMI_SEL_;
; 764  : 					SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);

  001d0	e5953000	 ldr         r3, [r5]
  001d4	e3844010	 orr         r4, r4, #0x10

; 765  : 
; 766  : 					if (bPhyAddress < 32)

  001d8	e3a02cff	 mov         r2, #0xFF, 24
  001dc	e5834074	 str         r4, [r3, #0x74]
  001e0	e58d4000	 str         r4, [sp]
  001e4	e38280ff	 orr         r8, r2, #0xFF
  001e8	e3560020	 cmp         r6, #0x20
  001ec	2a00000e	 bcs         |$LN24@Lan_Initia@5|

; 767  : 					{
; 768  : 						// Use specified PhyAddress
; 769  : 						SMSC_TRACE1(DBG_PHY, "Use 0x%x ExtPhy\r\n", bPhyAddress);
; 770  : 						RETAILMSG(1, (TEXT("Use 0x%x ExtPhy\r\n"), bPhyAddress));

  001f0	e59f0220	 ldr         r0, [pc, #0x220]
  001f4	e1a01006	 mov         r1, r6
  001f8	eb000000	 bl          NKDbgPrintfW
  001fc		 |$LN101@Lan_Initia@5|

; 771  : 						wPhyID1 = Lan_GetPhyRegW(pLan9118Data->dwLanBase, (DWORD)bPhyAddress, PHY_ID_1);

  001fc	e5950000	 ldr         r0, [r5]
  00200	e3a02002	 mov         r2, #2
  00204	e1a01006	 mov         r1, r6
  00208	eb000000	 bl          Lan_GetMiiRegW
  0020c	e1a0a000	 mov         r10, r0

; 772  : 						wPhyID2 = Lan_GetPhyRegW(pLan9118Data->dwLanBase, (DWORD)bPhyAddress, PHY_ID_2);

  00210	e5950000	 ldr         r0, [r5]
  00214	e3a02003	 mov         r2, #3
  00218	e1a01006	 mov         r1, r6
  0021c	eb000000	 bl          Lan_GetMiiRegW
  00220	e1a09000	 mov         r9, r0

; 773  : 						ExtPhy = TRUE;

  00224	e3a07001	 mov         r7, #1

; 774  : 					}
; 775  : 					else

  00228	ea00001a	 b           |$LN17@Lan_Initia@5|
  0022c		 |$LN24@Lan_Initia@5|

; 776  : 					{
; 777  : 						DWORD	dwAddr;
; 778  : 						for (dwAddr = 0UL;dwAddr < 32UL;dwAddr++)

  0022c	e3a04000	 mov         r4, #0
  00230		 |$LL22@Lan_Initia@5|

; 779  : 						{
; 780  : 							wPhyID1 = Lan_GetPhyRegW(pLan9118Data->dwLanBase, dwAddr, PHY_ID_1);

  00230	e5950000	 ldr         r0, [r5]
  00234	e3a02002	 mov         r2, #2
  00238	e1a01004	 mov         r1, r4
  0023c	eb000000	 bl          Lan_GetMiiRegW
  00240	e1a0a000	 mov         r10, r0

; 781  : 							wPhyID2 = Lan_GetPhyRegW(pLan9118Data->dwLanBase, dwAddr, PHY_ID_2);

  00244	e5950000	 ldr         r0, [r5]
  00248	e3a02003	 mov         r2, #3
  0024c	e1a01004	 mov         r1, r4
  00250	eb000000	 bl          Lan_GetMiiRegW
  00254	e1a09000	 mov         r9, r0

; 782  : 							if ((wPhyID1 != (WORD)0xFFFFU) || 
; 783  : 								(wPhyID2 != (WORD)0xFFFFU))

  00258	e15a0008	 cmp         r10, r8
  0025c	1a000005	 bne         |$LN91@Lan_Initia@5|
  00260	e1590008	 cmp         r9, r8
  00264	1a000003	 bne         |$LN91@Lan_Initia@5|
  00268	e2844001	 add         r4, r4, #1
  0026c	e3540020	 cmp         r4, #0x20
  00270	3affffee	 bcc         |$LL22@Lan_Initia@5|

; 691  : 								if ((wPhyID1 != (WORD)0xFFFFU) || 
; 692  : 									(wPhyID2 != (WORD)0xFFFFU))

  00274	ea000004	 b           |$LN20@Lan_Initia@5|
  00278		 |$LN91@Lan_Initia@5|

; 784  : 							{
; 785  : 								SMSC_TRACE1(DBG_PHY, "Detect Phy at Address 0x%x\r\n", dwAddr);
; 786  : 								RETAILMSG(1, (TEXT("Detect Phy at Address 0x%x\r\n"), dwAddr));

  00278	e59f0194	 ldr         r0, [pc, #0x194]
  0027c	e1a01004	 mov         r1, r4
  00280	eb000000	 bl          NKDbgPrintfW

; 787  : 								bPhyAddress = (BYTE)dwAddr;

  00284	e20460ff	 and         r6, r4, #0xFF

; 788  : 								ExtPhy = TRUE;

  00288	e3a07001	 mov         r7, #1
  0028c		 |$LN20@Lan_Initia@5|

; 789  : 								break;
; 790  : 							}
; 791  : 						}
; 792  : 						if (dwAddr == 32UL)

  0028c	e3540020	 cmp         r4, #0x20
  00290	e59d4000	 ldr         r4, [sp]

; 793  : 						{
; 794  : 							SMSC_WARNING0("Error! Failed to detect External Phy\r\n");
; 795  : 							ExtPhy = FALSE;

  00294	03a07000	 moveq       r7, #0
  00298		 |$LN17@Lan_Initia@5|

; 796  : 						}
; 797  : 					}
; 798  : 					if ((wPhyID1 == (WORD)0xFFFF) && 
; 799  : 						(wPhyID2 == (WORD)0xFFFF))

  00298	e15a0008	 cmp         r10, r8
  0029c	1affff65	 bne         |$LN28@Lan_Initia@5|
  002a0	e1590008	 cmp         r9, r8
  002a4	1affff63	 bne         |$LN28@Lan_Initia@5|

; 800  : 					{
; 801  : 						SMSC_WARNING0("Error! External Phy is not accessible. Switch to Internal Phy\r\n");
; 802  : 						// revert back to Internal Phy
; 803  : 						bPhyAddress = (BYTE)1;	// internal address
; 804  : 						dwTemp &= ~HW_CFG_PHY_CLK_SEL_;
; 805  : 						dwTemp |= HW_CFG_PHY_CLK_SEL_CLK_DIS_;
; 806  : 						SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);

  002a8	e5952000	 ldr         r2, [r5]
  002ac	e3c43060	 bic         r3, r4, #0x60
  002b0	e3834040	 orr         r4, r3, #0x40

; 807  : 						SMSC_MICRO_DELAY(10U);

  002b4	e3a0000a	 mov         r0, #0xA
  002b8	e5824074	 str         r4, [r2, #0x74]
  002bc	e3a06001	 mov         r6, #1
  002c0	eb000000	 bl          NdisStallExecution

; 808  : 
; 809  : 						dwTemp &= ~HW_CFG_EXT_PHY_EN_;
; 810  : 						SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);

  002c4	e5953000	 ldr         r3, [r5]
  002c8	e3c42004	 bic         r2, r4, #4

; 811  : 
; 812  : 						dwTemp &= ~HW_CFG_PHY_CLK_SEL_;
; 813  : 						dwTemp |= HW_CFG_PHY_CLK_SEL_EXT_PHY_;
; 814  : 						SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);
; 815  : 						SMSC_MICRO_DELAY(10U);

  002cc	e3a0000a	 mov         r0, #0xA
  002d0	e5832074	 str         r2, [r3, #0x74]
  002d4	e5951000	 ldr         r1, [r5]
  002d8	e3c23060	 bic         r3, r2, #0x60
  002dc	e3834020	 orr         r4, r3, #0x20
  002e0	e5814074	 str         r4, [r1, #0x74]
  002e4	eb000000	 bl          NdisStallExecution

; 816  : 
; 817  : 						dwTemp &= ~HW_CFG_SMI_SEL_;
; 818  : 						SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);

  002e8	e5952000	 ldr         r2, [r5]
  002ec	e3c43010	 bic         r3, r4, #0x10
  002f0	e5823074	 str         r3, [r2, #0x74]

; 819  : 						ExtPhy = FALSE;
; 820  : 					}
; 821  : 				}
; 822  : 				else

  002f4	eaffff4e	 b           |$LN98@Lan_Initia@5|
  002f8		 |$LN40@Lan_Initia@5|

; 652  : 		{
; 653  : 			case	0x01150000UL:
; 654  : 			case	0x01170000UL:
; 655  : 				if (pLan9118Data->dwIdRev & 0x0000FFFFUL)

  002f8	e3a03cff	 mov         r3, #0xFF, 24
  002fc	e38380ff	 orr         r8, r3, #0xFF
  00300	e1110008	 tst         r1, r8
  00304	0affff4b	 beq         |$LN28@Lan_Initia@5|

; 656  : 				{
; 657  : 					dwTemp = GetRegDW(pLan9118Data->dwLanBase, HW_CFG);

  00308	e5952000	 ldr         r2, [r5]
  0030c	e5923074	 ldr         r3, [r2, #0x74]

; 658  : 					if (dwTemp & HW_CFG_EXT_PHY_DET_)

  00310	e3130008	 tst         r3, #8
  00314	0affff45	 beq         |$LN38@Lan_Initia@5|

; 659  : 					{
; 660  : 						dwTemp &= ~HW_CFG_PHY_CLK_SEL_;
; 661  : 						dwTemp |= HW_CFG_PHY_CLK_SEL_CLK_DIS_;

  00318	e3c33060	 bic         r3, r3, #0x60
  0031c	e3834040	 orr         r4, r3, #0x40

; 662  : 						SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);
; 663  : 						SMSC_MICRO_DELAY(10U);

  00320	e3a0000a	 mov         r0, #0xA
  00324	e5824074	 str         r4, [r2, #0x74]
  00328	eb000000	 bl          NdisStallExecution

; 664  : 
; 665  : 						dwTemp |= HW_CFG_EXT_PHY_EN_;
; 666  : 						SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);

  0032c	e5952000	 ldr         r2, [r5]
  00330	e3843004	 orr         r3, r4, #4

; 667  : 
; 668  : 						dwTemp &= ~HW_CFG_PHY_CLK_SEL_;
; 669  : 						dwTemp |= HW_CFG_PHY_CLK_SEL_EXT_PHY_;

  00334	e3c31060	 bic         r1, r3, #0x60
  00338	e5823074	 str         r3, [r2, #0x74]

; 670  : 						SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);

  0033c	e5953000	 ldr         r3, [r5]
  00340	e3814020	 orr         r4, r1, #0x20

; 671  : 						SMSC_MICRO_DELAY(10U);

  00344	e3a0000a	 mov         r0, #0xA
  00348	e5834074	 str         r4, [r3, #0x74]
  0034c	eb000000	 bl          NdisStallExecution

; 672  : 
; 673  : 						dwTemp |= HW_CFG_SMI_SEL_;
; 674  : 						SetRegDW(pLan9118Data->dwLanBase, HW_CFG, dwTemp);

  00350	e5953000	 ldr         r3, [r5]
  00354	e3844010	 orr         r4, r4, #0x10
  00358	e58d4000	 str         r4, [sp]

; 675  : 
; 676  : 						if (bPhyAddress < 32)

  0035c	e5834074	 str         r4, [r3, #0x74]
  00360	e3560020	 cmp         r6, #0x20

; 677  : 						{
; 678  : 							// Use specified PhyAddress
; 679  : 							SMSC_TRACE1(DBG_PHY, "Use 0x%x ExtPhy\r\n", bPhyAddress);
; 680  : 							wPhyID1 = Lan_GetPhyRegW(pLan9118Data->dwLanBase, (DWORD)bPhyAddress, PHY_ID_1);
; 681  : 							wPhyID2 = Lan_GetPhyRegW(pLan9118Data->dwLanBase, (DWORD)bPhyAddress, PHY_ID_2);
; 682  : 							ExtPhy = TRUE;
; 683  : 						}
; 684  : 						else

  00364	3affffa4	 bcc         |$LN101@Lan_Initia@5|

; 685  : 						{
; 686  : 							DWORD	dwAddr;
; 687  : 							for (dwAddr = 0UL;dwAddr < 32UL;dwAddr++)

  00368	e3a04000	 mov         r4, #0
  0036c		 |$LL35@Lan_Initia@5|

; 688  : 							{
; 689  : 								wPhyID1 = Lan_GetPhyRegW(pLan9118Data->dwLanBase, dwAddr, PHY_ID_1);

  0036c	e5950000	 ldr         r0, [r5]
  00370	e3a02002	 mov         r2, #2
  00374	e1a01004	 mov         r1, r4
  00378	eb000000	 bl          Lan_GetMiiRegW
  0037c	e1a0a000	 mov         r10, r0

; 690  : 								wPhyID2 = Lan_GetPhyRegW(pLan9118Data->dwLanBase, dwAddr, PHY_ID_2);

  00380	e5950000	 ldr         r0, [r5]
  00384	e3a02003	 mov         r2, #3
  00388	e1a01004	 mov         r1, r4
  0038c	eb000000	 bl          Lan_GetMiiRegW
  00390	e1a09000	 mov         r9, r0

; 691  : 								if ((wPhyID1 != (WORD)0xFFFFU) || 
; 692  : 									(wPhyID2 != (WORD)0xFFFFU))

  00394	e15a0008	 cmp         r10, r8
  00398	1affffb6	 bne         |$LN91@Lan_Initia@5|
  0039c	e1590008	 cmp         r9, r8
  003a0	1affffb4	 bne         |$LN91@Lan_Initia@5|
  003a4	e2844001	 add         r4, r4, #1
  003a8	e3540020	 cmp         r4, #0x20
  003ac	3affffee	 bcc         |$LL35@Lan_Initia@5|
  003b0	eaffffb5	 b           |$LN20@Lan_Initia@5|
  003b4		 |$LN50@Lan_Initia@5|

; 873  : 				SMSC_WARNING1("Failed Loop Back Test, reset %d times\n\r",
; 874  : 					pLan9118Data->dwResetCount);
; 875  : 				goto DONE;
; 876  : 			} else {
; 877  : 				SMSC_WARNING1("Passed Loop Back Test, reset %d times\n\r",
; 878  : 					pLan9118Data->dwResetCount);
; 879  : 			}	
; 880  : 		}
; 881  : 	}
; 882  : #endif //USE_PHY_WORK_AROUND	// on internal PHY use only
; 883  : 
; 884  : 
; 885  : if (ExtPhy == FALSE) 
; 886  : {
; 887  : 	if (((pLan9118Data->dwIdRev & 0x000F0000UL) == 0x000A0000UL) | 
; 888  : 		((pLan9118Data->dwIdRev & 0xFFF00000UL) == 0x92100000UL))

  003b4	e3a01000	 mov         r1, #0
  003b8		 |$LN51@Lan_Initia@5|
  003b8	e3a034ff	 mov         r3, #0xFF, 8
  003bc	e383360f	 orr         r3, r3, #0xF, 12
  003c0	e3a00492	 mov         r0, #0x92, 8
  003c4	e0022003	 and         r2, r2, r3
  003c8	e3803601	 orr         r3, r0, #1, 12
  003cc	e1520003	 cmp         r2, r3
  003d0	03a03001	 moveq       r3, #1
  003d4	13a03000	 movne       r3, #0
  003d8	e1913003	 orrs        r3, r1, r3
  003dc	0a000002	 beq         |$LN2@Lan_Initia@5|

; 889  : 	{
; 890  : 		Lan_SetAutoMdixSts(pLan9118Data);

  003e0	e1a00005	 mov         r0, r5
  003e4	eb000000	 bl          Lan_SetAutoMdixSts

; 891  : 	}
; 892  : 	else

  003e8	ea000001	 b           |$LN1@Lan_Initia@5|
  003ec		 |$LN2@Lan_Initia@5|

; 893  : 	{
; 894  : 		RETAILMSG(1, (TEXT("This chip doesn't support Auto Mdix!!!\r\n")));

  003ec	e59f001c	 ldr         r0, [pc, #0x1C]
  003f0	eb000000	 bl          NKDbgPrintfW
  003f4		 |$LN1@Lan_Initia@5|

; 895  : 	}
; 896  : }
; 897  : 
; 898  : 	pLan9118Data->PhyInitialized = (BOOLEAN)TRUE;

  003f4	e3a03001	 mov         r3, #1
  003f8	e5c53010	 strb        r3, [r5, #0x10]

; 899  : 
; 900  : 	result = TRUE;

  003fc	e3a0b001	 mov         r11, #1
  00400		 |$DONE$47249|

; 901  : DONE:
; 902  : 	SMSC_TRACE1(DBG_INIT,"-Lan_InitializePhy, result=%s\r\n",result?TEXT("TRUE"):TEXT("FALSE"));
; 903  : 	return result;
; 904  : }

  00400	e1a0000b	 mov         r0, r11
  00404	e28dd004	 add         sp, sp, #4
  00408	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0040c	e12fff1e	 bx          lr
  00410		 |$LN105@Lan_Initia@5|
  00410		 |$LN106@Lan_Initia@5|
  00410	00000000	 DCD         |??_C@_1FC@FOJCMIGM@?$AAT?$AAh?$AAi?$AAs?$AA?5?$AAc?$AAh?$AAi?$AAp?$AA?5?$AAd?$AAo?$AAe?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AA?5?$AAA?$AAu?$AAt?$AAo?$AA?5?$AAM@|
  00414		 |$LN107@Lan_Initia@5|
  00414	00000000	 DCD         |??_C@_1DK@NPAGJJIH@?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AA?5?$AAP?$AAh?$AAy?$AA?5?$AAa?$AAt?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00418		 |$LN108@Lan_Initia@5|
  00418	00000000	 DCD         |??_C@_1CE@JFKKFCL@?$AAU?$AAs?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AAE?$AAx?$AAt?$AAP?$AAh?$AAy?$AA?$AN?$AA?6?$AA?$AA@|
  0041c		 |$LN109@Lan_Initia@5|
  0041c	00000000	 DCD         |??_C@_1BK@CJDAMBLM@?$AAU?$AAs?$AAe?$AA?5?$AAI?$AAn?$AAt?$AAP?$AAh?$AAy?$AA?$AN?$AA?6?$AA?$AA@|
  00420		 |$M48790|

			 ENDP  ; |Lan_InitializePhy|

	EXPORT	|Lan_EstablishLink|
	EXPORT	|??_C@_1DO@LKKECHCE@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?5?$AAN?$AAo?$AA?5?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAS?$AAe?$AAt?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48817| DCD	|$LN41@Lan_Establ|
	DCD	0x40007e01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@LKKECHCE@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?5?$AAN?$AAo?$AA?5?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAS?$AAe?$AAt?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "!", 0x0, " "
	DCB	0x0, "N", 0x0, "o", 0x0, " ", 0x0, "L", 0x0, "i", 0x0, "n"
	DCB	0x0, "k", 0x0, " ", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, " ", 0x0, "w", 0x0, "a", 0x0, "s", 0x0, " ", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lan_EstablishLink| PROC

; 960  : {

  00000		 |$LN41@Lan_Establ|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M48814|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0

; 961  : 	WORD	wTemp, wRegVal = (WORD)0;
; 962  : 	DWORD	dwRegVal = 0UL;
; 963  : 	BOOL	result = TRUE;
; 964  : 
; 965  : 	SMSC_TRACE2(DBG_INIT, "+Lan_EstablishLink(pLan9118Data==0x%08lX,dwLinkRequest==%ld)\r\n", (DWORD)pLan9118Data,dwLinkRequest);
; 966  : 
; 967  : 	if (dwLinkRequest & LINKMODE_ANEG) {
; 968  : 		// Enable ANEG
; 969  : 		wTemp = LanReadPhy(PHY_BCR);
; 970  : 		wTemp = (WORD)(wTemp | PHY_BCR_AUTO_NEG_ENABLE_);

  0000c	e5d51018	 ldrb        r1, [r5, #0x18]
  00010	e5950000	 ldr         r0, [r5]
  00014	e3a06001	 mov         r6, #1
  00018	e3140040	 tst         r4, #0x40
  0001c	e3a02000	 mov         r2, #0
  00020	0a00003a	 beq         |$LN34@Lan_Establ|
  00024	eb000000	 bl          Lan_GetMiiRegW

; 971  : 		LanWritePhy(PHY_BCR, wTemp);

  00028	e5d51018	 ldrb        r1, [r5, #0x18]
  0002c	e1a03000	 mov         r3, r0
  00030	e5950000	 ldr         r0, [r5]
  00034	e3833a01	 orr         r3, r3, #1, 20
  00038	e3a02000	 mov         r2, #0
  0003c	eb000000	 bl          Lan_SetMiiRegW

; 972  : 		// Set ANEG Advertise
; 973  : 		wTemp = LanReadPhy(PHY_ANEG_ADV);
; 974  : 		wTemp = (WORD)(wTemp & ~(PHY_ANEG_ADV_PAUSE_OP_ | PHY_ANEG_ADV_SPEED_));

  00040	e5d51018	 ldrb        r1, [r5, #0x18]
  00044	e5950000	 ldr         r0, [r5]
  00048	e3a02004	 mov         r2, #4
  0004c	eb000000	 bl          Lan_GetMiiRegW
  00050	e3a03cf2	 mov         r3, #0xF2, 24
  00054	e383301f	 orr         r3, r3, #0x1F
  00058	e0033000	 and         r3, r3, r0

; 975  : 		if (dwLinkRequest & LINKMODE_ASYM_PAUSE)

  0005c	e3140020	 tst         r4, #0x20

; 976  : 		{
; 977  : 			wTemp = (WORD)(wTemp | PHY_ANEG_ADV_ASYM_PAUSE_);

  00060	13833b02	 orrne       r3, r3, #2, 22

; 978  : 		}
; 979  : 		if (dwLinkRequest & LINKMODE_SYM_PAUSE)

  00064	e3140010	 tst         r4, #0x10

; 980  : 		{
; 981  : 			wTemp = (WORD)(wTemp | PHY_ANEG_ADV_SYM_PAUSE_);

  00068	13833b01	 orrne       r3, r3, #1, 22

; 982  : 		}
; 983  : 		if (dwLinkRequest & LINKMODE_100_FD)

  0006c	e3140008	 tst         r4, #8

; 984  : 		{
; 985  : 			wTemp = (WORD)(wTemp | PHY_ANEG_ADV_100F_);

  00070	13833c01	 orrne       r3, r3, #1, 24

; 986  : 		}
; 987  : 		if (dwLinkRequest & LINKMODE_100_HD)

  00074	e3140004	 tst         r4, #4

; 988  : 		{
; 989  : 			wTemp = (WORD)(wTemp | PHY_ANEG_ADV_100H_);

  00078	13833080	 orrne       r3, r3, #0x80

; 990  : 		}
; 991  : 		if (dwLinkRequest & LINKMODE_10_FD)

  0007c	e3140002	 tst         r4, #2

; 992  : 		{
; 993  : 			wTemp = (WORD)(wTemp | PHY_ANEG_ADV_10F_);
; 994  : 		}
; 995  : 		if (dwLinkRequest & LINKMODE_10_HD)
; 996  : 		{
; 997  : 			wTemp = (WORD)(wTemp | PHY_ANEG_ADV_10H_);
; 998  : 		}
; 999  : 		LanWritePhy(PHY_ANEG_ADV, wTemp);

  00080	e5d51018	 ldrb        r1, [r5, #0x18]
  00084	e5950000	 ldr         r0, [r5]
  00088	13833040	 orrne       r3, r3, #0x40
  0008c	e3140001	 tst         r4, #1
  00090	13833020	 orrne       r3, r3, #0x20
  00094	e3a02004	 mov         r2, #4
  00098	eb000000	 bl          Lan_SetMiiRegW

; 1000 : 
; 1001 : 		if(!Lan_AutoNegotiate(pLan9118Data))

  0009c	e1a00005	 mov         r0, r5
  000a0	eb000000	 bl          Lan_AutoNegotiate

; 1002 : 		{
; 1003 : 			pLan9118Data->dwLinkMode = LINK_NO_LINK;
; 1004 : 			SMSC_TRACE0(DBG_INIT,"Auto Negotiation Failed !\r\n");
; 1005 : 			result = FALSE;
; 1006 : 		} 
; 1007 : 		else 
; 1008 : 		{
; 1009 : 			SMSC_TRACE0(DBG_INIT,"Auto Negotiation Complete\r\n");
; 1010 : 		}
; 1011 : 
; 1012 : 		//Clear any pending interrupts
; 1013 : 		wRegVal = LanReadPhy(PHY_INT_SRC);

  000a4	e5d51018	 ldrb        r1, [r5, #0x18]
  000a8	e3500000	 cmp         r0, #0
  000ac	e5950000	 ldr         r0, [r5]
  000b0	03a03000	 moveq       r3, #0
  000b4	e3a0201d	 mov         r2, #0x1D
  000b8	0585301c	 streq       r3, [r5, #0x1C]
  000bc	03a06000	 moveq       r6, #0
  000c0	eb000000	 bl          Lan_GetMiiRegW

; 1014 : 		// avoid lint error
; 1015 : 		wRegVal = wRegVal;
; 1016 : 
; 1017 : 		//CheckForLink
; 1018 : 		pLan9118Data->dwLinkMode = Lan_GetLinkMode(pLan9118Data);

  000c4	e1a00005	 mov         r0, r5
  000c8	eb000000	 bl          Lan_GetLinkMode
  000cc	e1a03000	 mov         r3, r0

; 1019 : 
; 1020 : 		dwRegVal = Lan_GetMacRegDW(pLan9118Data->dwLanBase, MAC_CR);

  000d0	e5950000	 ldr         r0, [r5]
  000d4	e3a01001	 mov         r1, #1
  000d8	e585301c	 str         r3, [r5, #0x1C]
  000dc	eb000000	 bl          Lan_GetMacRegDW

; 1021 : 		dwRegVal &= ~(MAC_CR_FDPX_|MAC_CR_RCVOWN_);
; 1022 : 
; 1023 : 		switch(pLan9118Data->dwLinkMode) 

  000e0	e595301c	 ldr         r3, [r5, #0x1C]
  000e4	e3c02609	 bic         r2, r0, #9, 12
  000e8	e3530001	 cmp         r3, #1
  000ec	0a000035	 beq         |$LN37@Lan_Establ|
  000f0	e3530002	 cmp         r3, #2
  000f4	0a00002f	 beq         |$LN38@Lan_Establ|
  000f8	e3530003	 cmp         r3, #3
  000fc	0a000031	 beq         |$LN37@Lan_Establ|
  00100	e3530004	 cmp         r3, #4
  00104	1a000030	 bne         |$LN2@Lan_Establ|

; 1103 : 				dwRegVal|=MAC_CR_FDPX_;

  00108	e3822601	 orr         r2, r2, #1, 12
  0010c	ea00002e	 b           |$LN2@Lan_Establ|
  00110		 |$LN34@Lan_Establ|

; 1024 : 		{
; 1025 : 			case LINK_NO_LINK:
; 1026 : 				SMSC_TRACE0(DBG_INIT,"There is no Link\r\n");
; 1027 : 				//TODO: consider auto linking to a specified link state.
; 1028 : 				break;
; 1029 : 
; 1030 : 			case LINK_10MPS_HALF:
; 1031 : 				SMSC_TRACE0(DBG_INIT,"Link is 10Mbps Half Duplex\r\n");
; 1032 : 				dwRegVal|=MAC_CR_RCVOWN_;
; 1033 : 				break;
; 1034 : 
; 1035 : 			case LINK_10MPS_FULL:
; 1036 : 				SMSC_TRACE0(DBG_INIT,"Link is 10Mbps Full Duplex\r\n");
; 1037 : 				dwRegVal|=MAC_CR_FDPX_;
; 1038 : 				break;
; 1039 : 
; 1040 : 			case LINK_100MPS_HALF:
; 1041 : 				SMSC_TRACE0(DBG_INIT,"Link is 100Mbps Half Duplex\r\n");
; 1042 : 				dwRegVal|=MAC_CR_RCVOWN_;
; 1043 : 				break;
; 1044 : 
; 1045 : 			case LINK_100MPS_FULL:
; 1046 : 				SMSC_TRACE0(DBG_INIT,"Link is 100Mbps Full Duplex\r\n");
; 1047 : 				dwRegVal|=MAC_CR_FDPX_;
; 1048 : 				break;
; 1049 : 
; 1050 : 			default:
; 1051 : 				SMSC_TRACE0(DBG_INIT,"Unknown LinkMode\r\n");
; 1052 : 				break;
; 1053 : 		}
; 1054 : 
; 1055 : 		Lan_SetMacRegDW(pLan9118Data->dwLanBase, MAC_CR, dwRegVal);
; 1056 : 
; 1057 : 	}
; 1058 : 	else {
; 1059 : 		// Non-ANEG
; 1060 : 		// If multiple mode bits were set, it uses following priority,
; 1061 : 		//	 100FD->100HD->10FD->10HD
; 1062 : 		wTemp = LanReadPhy(PHY_BCR);

  00110	eb000000	 bl          Lan_GetMiiRegW

; 1063 : 		if (dwLinkRequest & LINKMODE_100_FD) {

  00114	e2147008	 ands        r7, r4, #8
  00118	13a03b33	 movne       r3, #0x33, 22

; 1064 : 			wTemp = (WORD)(wTemp & ~(PHY_BCR_AUTO_NEG_ENABLE_ | PHY_BCR_RESTART_AUTO_NEG_));

  0011c	138330ff	 orrne       r3, r3, #0xFF
  00120	10003003	 andne       r3, r0, r3

; 1065 : 			wTemp = (WORD)(wTemp | (PHY_BCR_SPEED_SELECT_ | PHY_BCR_DUPLEX_MODE_));

  00124	13833c21	 orrne       r3, r3, #0x21, 24
  00128	1a000010	 bne         |$LN9@Lan_Establ|

; 1066 : 		}
; 1067 : 		else if (dwLinkRequest & LINKMODE_100_HD) {

  0012c	e3140004	 tst         r4, #4
  00130	13a03b33	 movne       r3, #0x33, 22

; 1068 : 			wTemp = (WORD)(wTemp & ~(PHY_BCR_AUTO_NEG_ENABLE_ | PHY_BCR_RESTART_AUTO_NEG_));
; 1069 : 			wTemp = (WORD)(wTemp | PHY_BCR_SPEED_SELECT_);
; 1070 : 			wTemp = (WORD)(wTemp & ~PHY_BCR_DUPLEX_MODE_);

  00134	138330ff	 orrne       r3, r3, #0xFF
  00138	10003003	 andne       r3, r0, r3
  0013c	13833a02	 orrne       r3, r3, #2, 20
  00140	1a00000a	 bne         |$LN9@Lan_Establ|

; 1071 : 		}
; 1072 : 		else if (dwLinkRequest & LINKMODE_10_FD) {

  00144	e3140002	 tst         r4, #2
  00148	13a03b33	 movne       r3, #0x33, 22

; 1073 : 			wTemp = (WORD)(wTemp & ~(PHY_BCR_AUTO_NEG_ENABLE_ | PHY_BCR_RESTART_AUTO_NEG_));
; 1074 : 			wTemp = (WORD)(wTemp & ~PHY_BCR_SPEED_SELECT_);

  0014c	138330ff	 orrne       r3, r3, #0xFF
  00150	10003003	 andne       r3, r0, r3

; 1075 : 			wTemp = (WORD)(wTemp | PHY_BCR_DUPLEX_MODE_);

  00154	13833c01	 orrne       r3, r3, #1, 24
  00158	1a000004	 bne         |$LN9@Lan_Establ|

; 1076 : 		}
; 1077 : 		else if (dwLinkRequest & LINKMODE_10_HD) {

  0015c	e3140001	 tst         r4, #1
  00160	0a00001d	 beq         |$LN10@Lan_Establ|
  00164	e3a03b33	 mov         r3, #0x33, 22

; 1078 : 			wTemp = (WORD)(wTemp & ~(PHY_BCR_AUTO_NEG_ENABLE_ | PHY_BCR_RESTART_AUTO_NEG_));
; 1079 : 			wTemp = (WORD)(wTemp & ~(PHY_BCR_SPEED_SELECT_ | PHY_BCR_DUPLEX_MODE_));

  00168	e38330ff	 orr         r3, r3, #0xFF
  0016c	e0003003	 and         r3, r0, r3
  00170		 |$LN9@Lan_Establ|

; 1084 : 		}
; 1085 : 		LanWritePhy(PHY_BCR, wTemp);

  00170	e5d51018	 ldrb        r1, [r5, #0x18]
  00174	e5950000	 ldr         r0, [r5]
  00178	e3a02000	 mov         r2, #0
  0017c	eb000000	 bl          Lan_SetMiiRegW

; 1086 : 
; 1087 : 		//Clear any pending interrupts
; 1088 : 		wRegVal = LanReadPhy(PHY_INT_SRC);

  00180	e5d51018	 ldrb        r1, [r5, #0x18]
  00184	e5950000	 ldr         r0, [r5]
  00188	e3a0201d	 mov         r2, #0x1D
  0018c	eb000000	 bl          Lan_GetMiiRegW

; 1089 : 		// avoid lint error
; 1090 : 		wRegVal = wRegVal;
; 1091 : 
; 1092 : 		//CheckForLink
; 1093 : 		dwRegVal = Lan_GetMacRegDW(pLan9118Data->dwLanBase, MAC_CR);

  00190	e5950000	 ldr         r0, [r5]
  00194	e3a01001	 mov         r1, #1
  00198	eb000000	 bl          Lan_GetMacRegDW

; 1094 : 		dwRegVal &= ~(MAC_CR_FDPX_|MAC_CR_RCVOWN_);

  0019c	e3c02609	 bic         r2, r0, #9, 12

; 1095 : 
; 1096 : 		if (dwLinkRequest & LINKMODE_100_FD) {

  001a0	e3570000	 cmp         r7, #0

; 1097 : 				dwRegVal|=MAC_CR_FDPX_;

  001a4	1a000003	 bne         |$LN38@Lan_Establ|

; 1098 : 		}
; 1099 : 		else if (dwLinkRequest & LINKMODE_100_HD) {

  001a8	e3140004	 tst         r4, #4

; 1100 : 				dwRegVal|=MAC_CR_RCVOWN_;

  001ac	1a000005	 bne         |$LN37@Lan_Establ|

; 1101 : 		}
; 1102 : 		else if (dwLinkRequest & LINKMODE_10_FD) {

  001b0	e3140002	 tst         r4, #2
  001b4	0a000001	 beq         |$LN4@Lan_Establ|
  001b8		 |$LN38@Lan_Establ|

; 1103 : 				dwRegVal|=MAC_CR_FDPX_;

  001b8	e3822601	 orr         r2, r2, #1, 12
  001bc	ea000002	 b           |$LN2@Lan_Establ|
  001c0		 |$LN4@Lan_Establ|

; 1104 : 		}
; 1105 : 		else if (dwLinkRequest & LINKMODE_10_HD) {

  001c0	e3140001	 tst         r4, #1
  001c4	0a000000	 beq         |$LN2@Lan_Establ|
  001c8		 |$LN37@Lan_Establ|

; 1106 : 				dwRegVal|=MAC_CR_RCVOWN_;

  001c8	e3822502	 orr         r2, r2, #2, 10
  001cc		 |$LN2@Lan_Establ|

; 1107 : 		}
; 1108 : 		else 
; 1109 : 		{
; 1110 : 			// do nothing except making lint happy
; 1111 : 		}
; 1112 : 
; 1113 : 		Lan_SetMacRegDW(pLan9118Data->dwLanBase, MAC_CR, dwRegVal);

  001cc	e5950000	 ldr         r0, [r5]
  001d0	e3a01001	 mov         r1, #1
  001d4	eb000000	 bl          Lan_SetMacRegDW

; 1114 : 	}
; 1115 : 	SMSC_TRACE1(DBG_INIT,"-Lan_EstablishLink, result=%s\r\n",result?TEXT("TRUE"):TEXT("FALSE"));
; 1116 : 	return result;

  001d8	ea000002	 b           |$LN35@Lan_Establ|
  001dc		 |$LN10@Lan_Establ|

; 1080 : 		}
; 1081 : 		else {
; 1082 : 			RETAILMSG(1, (TEXT("Error! No Link Mode was Set.\r\n")));

  001dc	e59f0010	 ldr         r0, [pc, #0x10]
  001e0	eb000000	 bl          NKDbgPrintfW

; 1083 : 			return FALSE;

  001e4	e3a06000	 mov         r6, #0
  001e8		 |$LN35@Lan_Establ|

; 1117 : }

  001e8	e1a00006	 mov         r0, r6
  001ec	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  001f0	e12fff1e	 bx          lr
  001f4		 |$LN42@Lan_Establ|
  001f4		 |$LN43@Lan_Establ|
  001f4	00000000	 DCD         |??_C@_1DO@LKKECHCE@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?5?$AAN?$AAo?$AA?5?$AAL?$AAi?$AAn?$AAk?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?5?$AAw?$AAa?$AAs?$AA?5?$AAS?$AAe?$AAt?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  001f8		 |$M48815|

			 ENDP  ; |Lan_EstablishLink|

	END
