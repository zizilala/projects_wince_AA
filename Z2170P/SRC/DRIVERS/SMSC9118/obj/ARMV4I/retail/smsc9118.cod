; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\EVM_OMAP3530\SRC\DRIVERS\SMSC9118\smsc9118.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|dwTxReported| [ DATA ]
	EXPORT	|dwTxSent| [ DATA ]
	EXPORT	|dwTxPend| [ DATA ]
	EXPORT	|dwRxPktToFull| [ DATA ]
	EXPORT	|dwRxPktToEmpty| [ DATA ]
	EXPORT	|dwRxPktFromFull| [ DATA ]
	EXPORT	|dwRxPktFromEmpty| [ DATA ]
	EXPORT	|dwRxTotalPkt| [ DATA ]
	EXPORT	|dwRxDiscard| [ DATA ]
	EXPORT	|dwRxNumIndicate| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|gSmsc9118MiniportBlock| % 0x8
|dwTxReported| % 0x4
|dwTxSent| %	0x4
|dwTxPend| %	0x4
|dwRxPktToFull| % 0x4
|dwRxPktToEmpty| % 0x4
|dwRxPktFromFull| % 0x4
|dwRxPktFromEmpty| % 0x4
|dwRxTotalPkt| % 0x4
|dwRxDiscard| %	0x4
|dwRxNumIndicate| % 0x4
|?wOldPhyBSR@?1??CheckPhyStatus@@9@9| % 0x2		; `CheckPhyStatus'::`2'::wOldPhyBSR

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|date_code| DCB	"041707", 0x0
	%	1
|Smsc9118SupportedOids| DCD 0x10101
	DCD	0x10102
	DCD	0x10103
	DCD	0x10104
	DCD	0x10105
	DCD	0x10106
	DCD	0x10111
	DCD	0x10113
	DCD	0x10112
	DCD	0x10107
	DCD	0x10108
	DCD	0x10109
	DCD	0x1010a
	DCD	0x1010b
	DCD	0x1010d
	DCD	0x1010c
	DCD	0x10110
	DCD	0x1010e
	DCD	0x1010f
	DCD	0x20101
	DCD	0x20102
	DCD	0x20103
	DCD	0x20104
	DCD	0x20105
	DCD	0x1010101
	DCD	0x1010102
	DCD	0x1010103
	DCD	0x1010104
	DCD	0x10114
	DCD	0x10115
	DCD	0x10116
	DCD	0x1020101
	DCD	0x1020102
	DCD	0x1020103
	DCD	0xfd010100
	DCD	0xfd010101
	DCD	0xfd010102
	DCD	0xfd010103
	DCD	0xfd010104
	DCD	0xfd010106
	DCD	0xffffff01
	%	4
|sysCsr| DCB	"I", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "E", 0x0, "V", 0x0
	DCB	0x0, 0x0
	%	26
	DCD	0x50
	DCB	"I", 0x0, "N", 0x0, "T", 0x0, "_", 0x0, "C", 0x0, "F", 0x0
	DCB	"G", 0x0, 0x0, 0x0
	%	24
	DCD	0x54
	DCB	"I", 0x0, "N", 0x0, "T", 0x0, "_", 0x0, "S", 0x0, "T", 0x0
	DCB	"S", 0x0, 0x0, 0x0
	%	24
	DCD	0x58
	DCB	"I", 0x0, "N", 0x0, "T", 0x0, "_", 0x0, "E", 0x0, "N", 0x0
	DCB	0x0, 0x0
	%	26
	DCD	0x5c
	DCB	"B", 0x0, "Y", 0x0, "T", 0x0, "E", 0x0, "_", 0x0, "T", 0x0
	DCB	"E", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0
	%	20
	DCD	0x64
	DCB	"F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "_", 0x0, "I", 0x0
	DCB	"N", 0x0, "T", 0x0, 0x0, 0x0
	%	22
	DCD	0x68
	DCB	"R", 0x0, "X", 0x0, "_", 0x0, "C", 0x0, "F", 0x0, "G", 0x0
	DCB	0x0, 0x0
	%	26
	DCD	0x6c
	DCB	"T", 0x0, "X", 0x0, "_", 0x0, "C", 0x0, "F", 0x0, "G", 0x0
	DCB	0x0, 0x0
	%	26
	DCD	0x70
	DCB	"H", 0x0, "W", 0x0, "_", 0x0, "C", 0x0, "F", 0x0, "G", 0x0
	DCB	0x0, 0x0
	%	26
	DCD	0x74
	DCB	"R", 0x0, "X", 0x0, "_", 0x0, "D", 0x0, "P", 0x0, "_", 0x0
	DCB	"C", 0x0, "T", 0x0, "R", 0x0, "L", 0x0, 0x0, 0x0
	%	18
	DCD	0x78
	DCB	"R", 0x0, "X", 0x0, "_", 0x0, "F", 0x0, "I", 0x0, "F", 0x0
	DCB	"O", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "F", 0x0, 0x0, 0x0
	%	16
	DCD	0x7c
	DCB	"T", 0x0, "X", 0x0, "_", 0x0, "F", 0x0, "I", 0x0, "F", 0x0
	DCB	"O", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "F", 0x0, 0x0, 0x0
	%	16
	DCD	0x80
	DCB	"P", 0x0, "M", 0x0, "T", 0x0, "_", 0x0, "C", 0x0, "T", 0x0
	DCB	"R", 0x0, "L", 0x0, 0x0, 0x0
	%	22
	DCD	0x84
	DCB	"G", 0x0, "P", 0x0, "I", 0x0, "O", 0x0, "_", 0x0, "C", 0x0
	DCB	"F", 0x0, "G", 0x0, 0x0, 0x0
	%	22
	DCD	0x88
	DCB	"G", 0x0, "P", 0x0, "T", 0x0, "_", 0x0, "C", 0x0, "F", 0x0
	DCB	"G", 0x0, 0x0, 0x0
	%	24
	DCD	0x8c
	DCB	"G", 0x0, "P", 0x0, "T", 0x0, "_", 0x0, "C", 0x0, "N", 0x0
	DCB	"T", 0x0, 0x0, 0x0
	%	24
	DCD	0x90
	DCB	"F", 0x0, "P", 0x0, "G", 0x0, "A", 0x0, "_", 0x0, "R", 0x0
	DCB	"E", 0x0, "V", 0x0, 0x0, 0x0
	%	22
	DCD	0x94
	DCB	"W", 0x0, "O", 0x0, "R", 0x0, "D", 0x0, "_", 0x0, "S", 0x0
	DCB	"W", 0x0, "A", 0x0, "P", 0x0, 0x0, 0x0
	%	20
	DCD	0x98
	DCB	"F", 0x0, "R", 0x0, "E", 0x0, "E", 0x0, "_", 0x0, "R", 0x0
	DCB	"U", 0x0, "N", 0x0, 0x0, 0x0
	%	22
	DCD	0x9c
	DCB	"R", 0x0, "X", 0x0, "_", 0x0, "D", 0x0, "R", 0x0, "O", 0x0
	DCB	"P", 0x0, 0x0, 0x0
	%	24
	DCD	0xa0
	DCB	"M", 0x0, "A", 0x0, "C", 0x0, "_", 0x0, "C", 0x0, "S", 0x0
	DCB	"R", 0x0, "_", 0x0, "C", 0x0, "M", 0x0, "D", 0x0, 0x0, 0x0
	%	16
	DCD	0xa4
	DCB	"M", 0x0, "A", 0x0, "C", 0x0, "_", 0x0, "C", 0x0, "S", 0x0
	DCB	"R", 0x0, "_", 0x0, "D", 0x0, "A", 0x0, "T", 0x0, "A", 0x0
	DCB	0x0, 0x0
	%	14
	DCD	0xa8
	DCB	"A", 0x0, "F", 0x0, "C", 0x0, "_", 0x0, "C", 0x0, "F", 0x0
	DCB	"G", 0x0, 0x0, 0x0
	%	24
	DCD	0xac
	DCB	"E", 0x0, "2", 0x0, "P", 0x0, "_", 0x0, "C", 0x0, "M", 0x0
	DCB	"D", 0x0, 0x0, 0x0
	%	24
	DCD	0xb0
	DCB	"E", 0x0, "2", 0x0, "P", 0x0, "_", 0x0, "D", 0x0, "A", 0x0
	DCB	"T", 0x0, "A", 0x0, 0x0, 0x0
	%	22
	DCD	0xb4
	DCB	"T", 0x0, "E", 0x0, "S", 0x0, "T", 0x0, "_", 0x0, "R", 0x0
	DCB	"E", 0x0, "G", 0x0, "_", 0x0, "A", 0x0, 0x0, 0x0
	%	18
	DCD	0xc0
|macCsr| DCB	"M", 0x0, "A", 0x0, "C", 0x0, "_", 0x0, "C", 0x0, "R", 0x0
	DCB	0x0, 0x0
	%	26
	DCD	0x1
	DCB	"M", 0x0, "A", 0x0, "C", 0x0, "_", 0x0, "A", 0x0, "D", 0x0
	DCB	"D", 0x0, "R", 0x0, "H", 0x0, 0x0, 0x0
	%	20
	DCD	0x2
	DCB	"M", 0x0, "A", 0x0, "C", 0x0, "_", 0x0, "A", 0x0, "D", 0x0
	DCB	"D", 0x0, "R", 0x0, "L", 0x0, 0x0, 0x0
	%	20
	DCD	0x3
	DCB	"M", 0x0, "A", 0x0, "C", 0x0, "_", 0x0, "H", 0x0, "A", 0x0
	DCB	"S", 0x0, "H", 0x0, "H", 0x0, 0x0, 0x0
	%	20
	DCD	0x4
	DCB	"M", 0x0, "A", 0x0, "C", 0x0, "_", 0x0, "H", 0x0, "A", 0x0
	DCB	"S", 0x0, "H", 0x0, "L", 0x0, 0x0, 0x0
	%	20
	DCD	0x5
	DCB	"M", 0x0, "A", 0x0, "C", 0x0, "_", 0x0, "M", 0x0, "I", 0x0
	DCB	"I", 0x0, "_", 0x0, "A", 0x0, "C", 0x0, "C", 0x0, 0x0, 0x0
	%	16
	DCD	0x6
	DCB	"M", 0x0, "A", 0x0, "C", 0x0, "_", 0x0, "M", 0x0, "I", 0x0
	DCB	"I", 0x0, "_", 0x0, "D", 0x0, "A", 0x0, "T", 0x0, "A", 0x0
	DCB	0x0, 0x0
	%	14
	DCD	0x7
	DCB	"M", 0x0, "A", 0x0, "C", 0x0, "_", 0x0, "F", 0x0, "L", 0x0
	DCB	"O", 0x0, "W", 0x0, 0x0, 0x0
	%	22
	DCD	0x8
	DCB	"M", 0x0, "A", 0x0, "C", 0x0, "_", 0x0, "V", 0x0, "L", 0x0
	DCB	"A", 0x0, "N", 0x0, "1", 0x0, 0x0, 0x0
	%	20
	DCD	0x9
	DCB	"M", 0x0, "A", 0x0, "C", 0x0, "_", 0x0, "V", 0x0, "L", 0x0
	DCB	"A", 0x0, "N", 0x0, "2", 0x0, 0x0, 0x0
	%	20
	DCD	0xa
	DCB	"M", 0x0, "A", 0x0, "C", 0x0, "_", 0x0, "W", 0x0, "U", 0x0
	DCB	"F", 0x0, "F", 0x0, 0x0, 0x0
	%	22
	DCD	0xb
	DCB	"M", 0x0, "A", 0x0, "C", 0x0, "_", 0x0, "W", 0x0, "U", 0x0
	DCB	"C", 0x0, "S", 0x0, "R", 0x0, 0x0, 0x0
	%	20
	DCD	0xc
|phyCsr| DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "B", 0x0, "C", 0x0
	DCB	"R", 0x0, 0x0, 0x0
	%	24
	DCD	0x0
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "B", 0x0, "S", 0x0
	DCB	"R", 0x0, 0x0, 0x0
	%	24
	DCD	0x1
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "I", 0x0, "D", 0x0
	DCB	"_", 0x0, "1", 0x0, 0x0, 0x0
	%	22
	DCD	0x2
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "I", 0x0, "D", 0x0
	DCB	"_", 0x0, "2", 0x0, 0x0, 0x0
	%	22
	DCD	0x3
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "A", 0x0, "N", 0x0
	DCB	"E", 0x0, "G", 0x0, "_", 0x0, "A", 0x0, "D", 0x0, "V", 0x0
	DCB	0x0, 0x0
	%	14
	DCD	0x4
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "A", 0x0, "N", 0x0
	DCB	"E", 0x0, "G", 0x0, "_", 0x0, "L", 0x0, "P", 0x0, "A", 0x0
	DCB	0x0, 0x0
	%	14
	DCD	0x5
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "A", 0x0, "N", 0x0
	DCB	"E", 0x0, "G", 0x0, "_", 0x0, "E", 0x0, "X", 0x0, "P", 0x0
	DCB	0x0, 0x0
	%	14
	DCD	0x6
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "S", 0x0, "I", 0x0
	DCB	"_", 0x0, "R", 0x0, "E", 0x0, "V", 0x0, 0x0, 0x0
	%	18
	DCD	0x10
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "M", 0x0, "O", 0x0
	DCB	"D", 0x0, "E", 0x0, "_", 0x0, "C", 0x0, "T", 0x0, "R", 0x0
	DCB	"L", 0x0, "_", 0x0, "S", 0x0, "T", 0x0, "S", 0x0, 0x0, 0x0
	%	4
	DCD	0x11
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "S", 0x0, "P", 0x0
	DCB	"E", 0x0, "C", 0x0, "I", 0x0, "A", 0x0, "L", 0x0, "_", 0x0
	DCB	"M", 0x0, "O", 0x0, "D", 0x0, "E", 0x0, 0x0, 0x0
	%	6
	DCD	0x12
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "T", 0x0, "S", 0x0
	DCB	"T", 0x0, "C", 0x0, "N", 0x0, "T", 0x0, "L", 0x0, 0x0, 0x0
	%	16
	DCD	0x14
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "T", 0x0, "S", 0x0
	DCB	"T", 0x0, "R", 0x0, "E", 0x0, "A", 0x0, "D", 0x0, "1", 0x0
	DCB	0x0, 0x0
	%	14
	DCD	0x15
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "T", 0x0, "S", 0x0
	DCB	"T", 0x0, "R", 0x0, "E", 0x0, "A", 0x0, "D", 0x0, "1", 0x0
	DCB	0x0, 0x0
	%	14
	DCD	0x16
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "T", 0x0, "S", 0x0
	DCB	"T", 0x0, "W", 0x0, "R", 0x0, "I", 0x0, "T", 0x0, "E", 0x0
	DCB	0x0, 0x0
	%	14
	DCD	0x17
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "C", 0x0, "O", 0x0
	DCB	"N", 0x0, "T", 0x0, "R", 0x0, "O", 0x0, "L", 0x0, 0x0, 0x0
	%	16
	DCD	0x1b
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "S", 0x0, "I", 0x0
	DCB	"T", 0x0, "C", 0x0, 0x0, 0x0
	%	22
	DCD	0x1c
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "I", 0x0, "N", 0x0
	DCB	"T", 0x0, "_", 0x0, "S", 0x0, "R", 0x0, "C", 0x0, 0x0, 0x0
	%	16
	DCD	0x1d
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "I", 0x0, "N", 0x0
	DCB	"T", 0x0, "_", 0x0, "M", 0x0, "A", 0x0, "S", 0x0, "K", 0x0
	DCB	0x0, 0x0
	%	14
	DCD	0x1e
	DCB	"P", 0x0, "H", 0x0, "Y", 0x0, "_", 0x0, "S", 0x0, "P", 0x0
	DCB	"E", 0x0, "C", 0x0, "I", 0x0, "A", 0x0, "L", 0x0, 0x0, 0x0
	%	16
	DCD	0x1f
	EXPORT	|SetRegDW|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T53283| DCD	|$LN5@SetRegDW|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetRegDW| PROC

; 132  : {

  00000		 |$LN5@SetRegDW|
  00000		 |$M53280|

; 133  : 	(*(volatile DWORD *)(dwBase + dwOffset)) = dwVal;

  00000	e7802001	 str         r2, [r0, +r1]

; 134  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M53281|

			 ENDP  ; |SetRegDW|

	EXPORT	|GetRegDW|

  00000			 AREA	 |.pdata|, PDATA
|$T53294| DCD	|$LN5@GetRegDW|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetRegDW| PROC

; 139  : {

  00000		 |$LN5@GetRegDW|
  00000		 |$M53291|

; 140  : 	return (DWORD)(*(volatile DWORD *)(dwBase + dwOffset));

  00000	e7900001	 ldr         r0, [r0, +r1]

; 141  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M53292|

			 ENDP  ; |GetRegDW|

	EXPORT	|ReadFifo|

  00000			 AREA	 |.pdata|, PDATA
|$T53308| DCD	|$LN9@ReadFifo|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReadFifo| PROC

; 164  : {

  00000		 |$LN9@ReadFifo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M53305|
  00004	e3530000	 cmp         r3, #0

; 165  : 	const volatile DWORD * const pdwReg = 
; 166  : 		(const volatile DWORD * const)(dwBase + dwOffset);
; 167  : 	
; 168  : 	while (dwDwordCount)

  00008	0a000003	 beq         |$LN1@ReadFifo|
  0000c		 |$LL2@ReadFifo|

; 169  : 	{
; 170  : 		*pdwBuf++ = *pdwReg;

  0000c	e790e001	 ldr         lr, [r0, +r1]

; 171  : 		dwDwordCount--;

  00010	e2533001	 subs        r3, r3, #1
  00014	e482e004	 str         lr, [r2], #4
  00018	1afffffb	 bne         |$LL2@ReadFifo|
  0001c		 |$LN1@ReadFifo|

; 172  : 	}
; 173  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M53306|

			 ENDP  ; |ReadFifo|

	EXPORT	|DllEntry|
	IMPORT	|DisableThreadLibraryCalls|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.pdata|, PDATA
|$T53319| DCD	|$LN11@DllEntry|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllEntry| PROC

; 152  : {

  00000		 |$LN11@DllEntry|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M53316|

; 153  : 	BOOL	bRet;
; 154  : 
; 155  : 	/* Make Lint Happy */
; 156  : 	SMSC_TRACE1(DBG_INIT, "date_code = %a", date_code);
; 157  : 
; 158  : 	SMSC_TRACE0(DBG_INIT,"+DllEntry\r\n");
; 159  : 	switch (dwReason)

  00004	e3510001	 cmp         r1, #1

; 160  : 	{
; 161  : 		case DLL_PROCESS_ATTACH:
; 162  : #ifdef	DEBUG
; 163  : 			DEBUGREGISTER (hDLL);
; 164  : #endif
; 165  : 			SMSC_TRACE0(DBG_INIT,"DLL_PROCESS_ATTACH\r\n");
; 166  : 			bRet = DisableThreadLibraryCalls((HMODULE) hDLL);

  00008	0b000000	 bleq        DisableThreadLibraryCalls

; 167  : 			if (bRet != TRUE) {
; 168  : 				SMSC_TRACE0(DBG_INIT,"Failed to DisableThreadLibraryCalls()\r\n");
; 169  : 			}
; 170  : 			break;
; 171  : 		case DLL_PROCESS_DETACH:
; 172  : 			SMSC_TRACE0(DBG_INIT,"DLL_PROCESS_DETACH\r\n");
; 173  : 			break;
; 174  : 		default:
; 175  : 			break;
; 176  : 	}
; 177  : 
; 178  : 	dwReason = dwReason;
; 179  : 	lpReserved = lpReserved;
; 180  : 	SMSC_TRACE0(DBG_INIT,"-DllEntry\r\n");
; 181  : 	return (TRUE);

  0000c	e3a00001	 mov         r0, #1

; 182  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M53317|

			 ENDP  ; |DllEntry|

	EXPORT	|InitializeQueues|
	EXPORT	|??_C@_1DA@JKBLGOCH@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?5?$AAA?$AAr?$AAr?$AAa?$AAy?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|NdisMStartBufferPhysicalMapping|
	IMPORT	|NdisAllocateBuffer|
	IMPORT	|NdisAllocateBufferPool|
	IMPORT	|NdisAllocatePacket|
	IMPORT	|NdisAllocatePacketPool|

  00000			 AREA	 |.pdata|, PDATA
|$T53354| DCD	|$LN45@Initialize|
	DCD	0x40009002

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@JKBLGOCH@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?5?$AAA?$AAr?$AAr?$AAa?$AAy?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "!", 0x0, " "
	DCB	0x0, "A", 0x0, "r", 0x0, "r", 0x0, "a", 0x0, "y", 0x0, "S"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitializeQueues| PROC

; 276  : {

  00000		 |$LN45@Initialize|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd040	 sub         sp, sp, #0x40
  00008		 |$M53351|
  00008	e1a04000	 mov         r4, r0

; 277  : 	NDIS_STATUS Status;
; 278  : 	UINT dw;
; 279  : 	PSMSC9118_SHAREDMEM pSharedMem;
; 280  : 
; 281  : 	SMSC_TRACE0(DBG_INIT,"+InitializeQueues\r\n");
; 282  : 
; 283  : 	//
; 284  : 	// Initialize Tx queues, etc.
; 285  : 	//
; 286  : 	QUEUE_INIT(&(pAdapter->TxRdyToComplete));

  0000c	e3a0b000	 mov         r11, #0

; 287  : 	QUEUE_INIT(&(pAdapter->TxWaitToSend));
; 288  : 	QUEUE_INIT(&(pAdapter->TxDeferedPkt));
; 289  : 
; 290  : 	//
; 291  : 	// Initialize Rx queues, etc.
; 292  : 	//
; 293  : 	NdisAllocatePacketPool(&Status, 
; 294  : 						   &(pAdapter->hPacketPool),
; 295  : 						   MAX_RXPACKETS_IN_QUEUE,
; 296  : 						   PROTOCOL_RESERVED_LENGTH);

  00010	e3a03010	 mov         r3, #0x10
  00014	e3a02c01	 mov         r2, #1, 24
  00018	e2841d06	 add         r1, r4, #6, 26
  0001c	e28d0008	 add         r0, sp, #8
  00020	e584b15c	 str         r11, [r4, #0x15C]
  00024	e584b160	 str         r11, [r4, #0x160]
  00028	e584b164	 str         r11, [r4, #0x164]
  0002c	e584b168	 str         r11, [r4, #0x168]
  00030	e584b16c	 str         r11, [r4, #0x16C]
  00034	e584b170	 str         r11, [r4, #0x170]
  00038	e584b174	 str         r11, [r4, #0x174]
  0003c	e584b178	 str         r11, [r4, #0x178]
  00040	e584b17c	 str         r11, [r4, #0x17C]
  00044	eb000000	 bl          NdisAllocatePacketPool

; 297  : 
; 298  : 	if (Status != NDIS_STATUS_SUCCESS)

  00048	e59d0008	 ldr         r0, [sp, #8]
  0004c	e3500000	 cmp         r0, #0

; 299  : 	{
; 300  : 		SMSC_TRACE0(DBG_INIT,"NdisAllocatePacketPool failed.\r\n");
; 301  : 		return (Status);

  00050	1a000076	 bne         |$LN33@Initialize|

; 302  : 	}
; 303  : 
; 304  : 	for (dw=0U; dw<MAX_RXPACKETS_IN_QUEUE; dw++)

  00054	e2848f62	 add         r8, r4, #0x62, 30
  00058	e1a06008	 mov         r6, r8
  0005c	e3a05000	 mov         r5, #0
  00060		 |$LL23@Initialize|

; 305  : 	{
; 306  : 		NdisAllocatePacket(&Status, &(pAdapter->RxPacketArray[dw]), pAdapter->hPacketPool);

  00060	e5942180	 ldr         r2, [r4, #0x180]
  00064	e1a01006	 mov         r1, r6
  00068	e28d0008	 add         r0, sp, #8
  0006c	eb000000	 bl          NdisAllocatePacket

; 307  : 		if (Status != NDIS_STATUS_SUCCESS)

  00070	e59d0008	 ldr         r0, [sp, #8]
  00074	e3500000	 cmp         r0, #0
  00078	1a00006c	 bne         |$LN33@Initialize|
  0007c	e2855001	 add         r5, r5, #1
  00080	e3550c01	 cmp         r5, #1, 24
  00084	e2866004	 add         r6, r6, #4
  00088	3afffff4	 bcc         |$LL23@Initialize|

; 308  : 		{
; 309  : 			SMSC_TRACE1(DBG_INIT,"NdisAllocatePacket failed. dw=%d\r\n", dw);
; 310  : 			return (Status);
; 311  : 		}
; 312  : 	}
; 313  : 
; 314  : 	NdisAllocateBufferPool(&Status,
; 315  : 						   &(pAdapter->hBufferPool),
; 316  : 						   MAX_RXPACKETS_IN_QUEUE);

  0008c	e3a02c01	 mov         r2, #1, 24
  00090	e2841f61	 add         r1, r4, #0x61, 30
  00094	e28d0008	 add         r0, sp, #8
  00098	eb000000	 bl          NdisAllocateBufferPool

; 317  : 
; 318  : 	if (Status != NDIS_STATUS_SUCCESS)

  0009c	e59d0008	 ldr         r0, [sp, #8]
  000a0	e3500000	 cmp         r0, #0

; 319  : 	{
; 320  : 		SMSC_TRACE0(DBG_INIT,"NdisAllocateBufferPool failed.\r\n");
; 321  : 		return (Status);

  000a4	1a000061	 bne         |$LN33@Initialize|

; 322  : 	}
; 323  : 
; 324  : 	pSharedMem = (PSMSC9118_SHAREDMEM)(pAdapter->pSharedMemVA);

  000a8	e2843a01	 add         r3, r4, #1, 20
  000ac	e59331ac	 ldr         r3, [r3, #0x1AC]
  000b0	e2842c05	 add         r2, r4, #5, 24

; 325  : 	for (dw=0U; dw<MAX_RXPACKETS_IN_QUEUE; dw++)

  000b4	e3a07000	 mov         r7, #0
  000b8	e2835002	 add         r5, r3, #2
  000bc	e3a03c05	 mov         r3, #5, 24
  000c0	e38390ee	 orr         r9, r3, #0xEE
  000c4	e2826088	 add         r6, r2, #0x88
  000c8	e284aa01	 add         r10, r4, #1, 20
  000cc		 |$LL18@Initialize|

; 326  : 	{
; 327  : 		if (pAdapter->fRxDMAMode)

  000cc	e59a31a0	 ldr         r3, [r10, #0x1A0]

; 328  : 		{
; 329  : 			NdisAllocateBuffer(&Status, 
; 330  : 							   &(pAdapter->RxBufferArray[dw]), 
; 331  : 							   pAdapter->hBufferPool,
; 332  : 							   (PVOID)((PUCHAR)(((DWORD)pSharedMem->RxBuffer[dw]+(RX_END_ALIGNMENT-1UL))&~((DWORD)RX_END_ALIGNMENT-1UL))+2UL),   //DMA - 16-bit aligned
; 333  : 							   MAX_PACKET);

  000d0	e5942184	 ldr         r2, [r4, #0x184]
  000d4	e1a01006	 mov         r1, r6
  000d8	e3530000	 cmp         r3, #0
  000dc	e28d0008	 add         r0, sp, #8
  000e0	0a000005	 beq         |$LN15@Initialize|
  000e4	e285301d	 add         r3, r5, #0x1D
  000e8	e3c3301f	 bic         r3, r3, #0x1F
  000ec	e2833002	 add         r3, r3, #2
  000f0	e58d9000	 str         r9, [sp]
  000f4	eb000000	 bl          NdisAllocateBuffer

; 334  : 		}
; 335  : 		else

  000f8	ea000002	 b           |$LN14@Initialize|
  000fc		 |$LN15@Initialize|

; 336  : 		{
; 337  : 			NdisAllocateBuffer(&Status, 
; 338  : 							   &(pAdapter->RxBufferArray[dw]), 
; 339  : 							   pAdapter->hBufferPool,
; 340  : 							   (PVOID)((PUCHAR)(pSharedMem->RxBuffer[dw])+2),	// PIO with 2-byte offset
; 341  : //								 (PVOID)(pSharedMem->RxBuffer[dw]), // PIO w/o 2-byte offset
; 342  : 							   MAX_PACKET);

  000fc	e1a03005	 mov         r3, r5
  00100	e58d9000	 str         r9, [sp]
  00104	eb000000	 bl          NdisAllocateBuffer
  00108		 |$LN14@Initialize|

; 343  : 		}
; 344  : 		
; 345  : 		if (Status != NDIS_STATUS_SUCCESS)

  00108	e59d0008	 ldr         r0, [sp, #8]
  0010c	e3500000	 cmp         r0, #0
  00110	1a000046	 bne         |$LN33@Initialize|
  00114	e2877001	 add         r7, r7, #1
  00118	e3570c01	 cmp         r7, #1, 24
  0011c	e2866004	 add         r6, r6, #4
  00120	e2855b02	 add         r5, r5, #2, 22
  00124	3affffe8	 bcc         |$LL18@Initialize|

; 346  : 		{
; 347  : 			SMSC_TRACE0(DBG_INIT,"NdisAllocateBuffer failed.\r\n");
; 348  : 			return (Status);
; 349  : 		}
; 350  : 	}
; 351  : 
; 352  : 	for (dw=0U; dw<MAX_RXPACKETS_IN_QUEUE; dw++) 

  00128	e1a05004	 mov         r5, r4
  0012c	e3a06c01	 mov         r6, #1, 24
  00130	e28d700c	 add         r7, sp, #0xC
  00134	e28d9010	 add         r9, sp, #0x10
  00138		 |$LL12@Initialize|

; 353  : 	{
; 354  : 		NdisChainBufferAtBack((pAdapter->RxPacketArray[dw]), (pAdapter->RxBufferArray[dw]));

  00138	e5952588	 ldr         r2, [r5, #0x588]
  0013c	e5923000	 ldr         r3, [r2]
  00140	e1a00002	 mov         r0, r2
  00144	ea000001	 b           |$LN42@Initialize|
  00148		 |$LL9@Initialize|
  00148	e5900000	 ldr         r0, [r0]
  0014c	e5903000	 ldr         r3, [r0]
  00150		 |$LN42@Initialize|
  00150	e3530000	 cmp         r3, #0
  00154	1afffffb	 bne         |$LL9@Initialize|
  00158	e5951188	 ldr         r1, [r5, #0x188]

; 355  : 		{
; 356  : 		UINT	ArraySize;
; 357  : 		NDIS_PHYSICAL_ADDRESS_UNIT SegmentArray[MAX_NUM_SEGMENTS];
; 358  : 
; 359  : 		NdisMStartBufferPhysicalMapping(pAdapter->hMiniportAdapterHandle,
; 360  : 				pAdapter->RxBufferArray[dw],
; 361  : 				0UL, (BOOLEAN)TRUE, SegmentArray, &ArraySize);

  0015c	e58d7004	 str         r7, [sp, #4]
  00160	e58d9000	 str         r9, [sp]
  00164	e5913008	 ldr         r3, [r1, #8]
  00168	e3530000	 cmp         r3, #0
  0016c	1591300c	 ldrne       r3, [r1, #0xC]
  00170	15832000	 strne       r2, [r3]
  00174	05812008	 streq       r2, [r1, #8]
  00178	e5951188	 ldr         r1, [r5, #0x188]
  0017c	e3a03001	 mov         r3, #1
  00180	e3a02000	 mov         r2, #0
  00184	e581000c	 str         r0, [r1, #0xC]
  00188	e580b000	 str         r11, [r0]
  0018c	e5951188	 ldr         r1, [r5, #0x188]
  00190	e5c1b01c	 strb        r11, [r1, #0x1C]
  00194	e5951588	 ldr         r1, [r5, #0x588]
  00198	e5940000	 ldr         r0, [r4]
  0019c	eb000000	 bl          NdisMStartBufferPhysicalMapping

; 362  : 		if (ArraySize != 1U) 

  001a0	e59d100c	 ldr         r1, [sp, #0xC]
  001a4	e3510001	 cmp         r1, #1

; 363  : 		{
; 364  : 			RETAILMSG(1, (TEXT("Error! ArraySize = %d\r\n"), ArraySize));

  001a8	159f008c	 ldrne       r0, [pc, #0x8C]
  001ac	1b000000	 blne        NKDbgPrintfW

; 365  : 		}
; 366  : 		SET_PACKET_RESERVED_PA(pAdapter->RxPacketArray[dw], 
; 367  : 				NdisGetPhysicalAddressLow(SegmentArray[0].PhysicalAddress));

  001b0	e5952188	 ldr         r2, [r5, #0x188]
  001b4	e59d3010	 ldr         r3, [sp, #0x10]
  001b8	e2855004	 add         r5, r5, #4
  001bc	e2566001	 subs        r6, r6, #1
  001c0	e5823024	 str         r3, [r2, #0x24]
  001c4	1affffdb	 bne         |$LL12@Initialize|

; 368  : 		}
; 369  : 	}
; 370  : 
; 371  : 	// Initialize EmptyPktArray
; 372  : 	pAdapter->EmptyPkt.dwRdPtr = pAdapter->EmptyPkt.dwWrPtr = 0UL;
; 373  : 	for (dw=0U; dw<MAX_RXPACKETS_IN_QUEUE; dw++) {
; 374  : 		pAdapter->EmptyPkt.dwPktArray[dw] = pAdapter->RxPacketArray[dw];

  001c8	e2843c09	 add         r3, r4, #9, 24
  001cc	e2832088	 add         r2, r3, #0x88
  001d0	e584bd90	 str         r11, [r4, #0xD90]
  001d4	e2821b01	 add         r1, r2, #1, 22
  001d8	e584bd8c	 str         r11, [r4, #0xD8C]
  001dc		 |$LN40@Initialize|
  001dc	e4983004	 ldr         r3, [r8], #4
  001e0	e4823004	 str         r3, [r2], #4
  001e4	e1520001	 cmp         r2, r1
  001e8	1afffffb	 bne         |$LN40@Initialize|

; 375  : 	}
; 376  : 	pAdapter->EmptyPkt.dwRdPtr = 0UL;

  001ec	e584bd8c	 str         r11, [r4, #0xD8C]

; 377  : 	pAdapter->EmptyPkt.dwWrPtr = pAdapter->EmptyPkt.dwRdPtr + (DWORD)MAX_RXPACKETS_IN_QUEUE;

  001f0	e5943d8c	 ldr         r3, [r4, #0xD8C]

; 378  : 
; 379  : 	// Initialize FullPktArray
; 380  : 	pAdapter->FullPkt.dwRdPtr = pAdapter->FullPkt.dwWrPtr = 0UL;

  001f4	e2842c11	 add         r2, r4, #0x11, 24
  001f8	e2841c11	 add         r1, r4, #0x11, 24
  001fc	e2833c01	 add         r3, r3, #1, 24
  00200	e5843d90	 str         r3, [r4, #0xD90]

; 381  : 
; 382  : 	pAdapter->TxDPCNeeded = (BOOLEAN)FALSE;
; 383  : 	pAdapter->RxDPCNeeded = (BOOLEAN)FALSE;
; 384  : 	pAdapter->PhyDPCNeeded = (BOOLEAN)FALSE;
; 385  : 	pAdapter->SWDPCNeeded = (BOOLEAN)FALSE;
; 386  : 	pAdapter->RxOverRun = (BOOLEAN)FALSE;
; 387  : 	
; 388  : 	pAdapter->f100RxEnWorkaroundDone = 1L;

  00204	e582b09c	 str         r11, [r2, #0x9C]
  00208	e3a02001	 mov         r2, #1
  0020c	e2843c1a	 add         r3, r4, #0x1A, 24
  00210	e581b098	 str         r11, [r1, #0x98]
  00214	e58320cc	 str         r2, [r3, #0xCC]
  00218	e5c1b8c3	 strb        r11, [r1, #0x8C3]
  0021c	e5c1b8c2	 strb        r11, [r1, #0x8C2]
  00220	e5c1b8c4	 strb        r11, [r1, #0x8C4]
  00224	e5c1b8c5	 strb        r11, [r1, #0x8C5]
  00228	e5c1b8c7	 strb        r11, [r1, #0x8C7]

; 389  : 
; 390  : 	SMSC_TRACE0(DBG_INIT,"-InitializeQueues\r\n");
; 391  : 	return (NDIS_STATUS_SUCCESS);

  0022c	e3a00000	 mov         r0, #0
  00230		 |$LN33@Initialize|

; 392  : 
; 393  : }

  00230	e28dd040	 add         sp, sp, #0x40
  00234	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00238	e12fff1e	 bx          lr
  0023c		 |$LN46@Initialize|
  0023c		 |$LN47@Initialize|
  0023c	00000000	 DCD         |??_C@_1DA@JKBLGOCH@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?5?$AAA?$AAr?$AAr?$AAa?$AAy?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00240		 |$M53352|

			 ENDP  ; |InitializeQueues|

	EXPORT	|RegisterAdapter|
	IMPORT	|NdisMRegisterInterrupt|
	IMPORT	|NdisMSetAttributesEx|

  00000			 AREA	 |.pdata|, PDATA
|$T53371| DCD	|$LN14@RegisterAd|
	DCD	0x40002802
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RegisterAdapter| PROC

; 988  : {

  00000		 |$LN14@RegisterAd|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M53368|
  00008	e1a04000	 mov         r4, r0

; 989  : 	NDIS_STATUS status = NDIS_STATUS_FAILURE;
; 990  : 
; 991  : 	SMSC_TRACE0(DBG_INIT,"+RegisterAdapter\r\n");
; 992  : 
; 993  : 	// avoid Lint error
; 994  : 	hConfigurationHandle = hConfigurationHandle;
; 995  : 
; 996  : 	// Inform the wrapper of the physical attributes of this adapter.
; 997  : 	NdisMSetAttributesEx(pAdapter->hMiniportAdapterHandle,
; 998  : 						 (NDIS_HANDLE)pAdapter,
; 999  : 						 0U,
; 1000 :                          (DWORD)NDIS_ATTRIBUTE_BUS_MASTER,
; 1001 : 						 NdisInterfaceInternal);

  0000c	e5940000	 ldr         r0, [r4]
  00010	e3a0e000	 mov         lr, #0
  00014	e3a03008	 mov         r3, #8
  00018	e3a02000	 mov         r2, #0
  0001c	e1a01004	 mov         r1, r4
  00020	e58de000	 str         lr, [sp]
  00024	eb000000	 bl          NdisMSetAttributesEx

; 1002 : 
; 1003 :     
; 1004 :     // Link us on to the chain of adapters for this driver.
; 1005 : 	pAdapter->NextAdapter = gSmsc9118MiniportBlock.AdapterQueue;

  00028	e59f506c	 ldr         r5, [pc, #0x6C]

; 1006 : 	gSmsc9118MiniportBlock.AdapterQueue = pAdapter;
; 1007 : 
; 1008 :     SMSC_TRACE1(DBG_INIT,"ulInterruptNumber(before)=0x%x\r\n", pAdapter->ulInterruptNumber);
; 1009 : 	status = NdisMRegisterInterrupt (&(pAdapter->Interrupt),
; 1010 : 									 pAdapter->hMiniportAdapterHandle, 
; 1011 : 									 pAdapter->ulInterruptNumber, 
; 1012 : 									 pAdapter->ulInterruptNumber, 
; 1013 : 									 (BOOLEAN)TRUE, 
; 1014 : 									 (BOOLEAN)TRUE, 
; 1015 : 									 NdisInterruptLatched);

  0002c	e2842a01	 add         r2, r4, #1, 20
  00030	e1a00004	 mov         r0, r4
  00034	e5953004	 ldr         r3, [r5, #4]
  00038	e3a0e001	 mov         lr, #1
  0003c	e58de008	 str         lr, [sp, #8]
  00040	e5843004	 str         r3, [r4, #4]
  00044	e5854004	 str         r4, [r5, #4]
  00048	e59229cc	 ldr         r2, [r2, #0x9CC]
  0004c	e49010d4	 ldr         r1, [r0], #0xD4
  00050	e58de004	 str         lr, [sp, #4]
  00054	e1a03002	 mov         r3, r2
  00058	e58de000	 str         lr, [sp]
  0005c	eb000000	 bl          NdisMRegisterInterrupt

; 1016 : 
; 1017 : 	if (status == NDIS_STATUS_SUCCESS)
; 1018 : 	{
; 1019 : 		SMSC_TRACE0(DBG_INIT,"  Interrupt Connected\r\n");
; 1020 : 	}
; 1021 : 	else
; 1022 : 	{
; 1023 : 		SMSC_TRACE0(DBG_INIT,"  NdisRegisterInterrupt Failed\r\n");
; 1024 : 	}
; 1025 : 
; 1026 : 	if (gSmsc9118MiniportBlock.AdapterQueue == pAdapter) {

  00060	e5952004	 ldr         r2, [r5, #4]
  00064	e1520004	 cmp         r2, r4
  00068	1a000003	 bne         |$LN4@RegisterAd|

; 1027 : 		gSmsc9118MiniportBlock.AdapterQueue = pAdapter->NextAdapter;

  0006c	e5943004	 ldr         r3, [r4, #4]
  00070	e5853004	 str         r3, [r5, #4]

; 1028 : 	}
; 1029 : 	else

  00074	ea000005	 b           |$LN3@RegisterAd|
  00078		 |$LL2@RegisterAd|

; 1030 : 	{
; 1031 : 		PSMSC9118_ADAPTER TmpAdapter = gSmsc9118MiniportBlock.AdapterQueue;
; 1032 : 		while (TmpAdapter->NextAdapter != pAdapter) {
; 1033 : 			TmpAdapter = TmpAdapter->NextAdapter;

  00078	e5922004	 ldr         r2, [r2, #4]
  0007c		 |$LN4@RegisterAd|
  0007c	e5923004	 ldr         r3, [r2, #4]
  00080	e1530004	 cmp         r3, r4
  00084	1afffffb	 bne         |$LL2@RegisterAd|

; 1034 : 		}
; 1035 : 		TmpAdapter->NextAdapter = TmpAdapter->NextAdapter->NextAdapter;

  00088	e5933004	 ldr         r3, [r3, #4]
  0008c	e5823004	 str         r3, [r2, #4]
  00090		 |$LN3@RegisterAd|

; 1036 : 	}
; 1037 : 
; 1038 : 	SMSC_TRACE0(DBG_INIT,"-RegisterAdapter\r\n");
; 1039 : 	return (status);
; 1040 : }

  00090	e28dd00c	 add         sp, sp, #0xC
  00094	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN15@RegisterAd|
  0009c		 |$LN16@RegisterAd|
  0009c	00000000	 DCD         |gSmsc9118MiniportBlock|
  000a0		 |$M53369|

			 ENDP  ; |RegisterAdapter|

	EXPORT	|ChipIdentify|
	EXPORT	|??_C@_1EO@KLJEKBFP@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA7?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@KPKHIGHI@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA8?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@MEJAEJFM@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA1?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@CCDPEMCF@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA2?$AA0?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@OCHNAMEA@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA6?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@NDONLDNM@?$AAL?$AAa?$AAn?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@JNHEEPN@?$AAL?$AAa?$AAn?$AA9?$AA1?$AA1?$AA6?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@EADOOJOC@?$AAL?$AAa?$AAn?$AA9?$AA1?$AA1?$AA7?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@EEANMOMF@?$AAL?$AAa?$AAn?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@DIEHPLGB@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA5?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|PlatformSetBusTiming|
	IMPORT	|Lan_Initialize|

  00000			 AREA	 |.pdata|, PDATA
|$T53386| DCD	|$LN23@ChipIdenti|
	DCD	0x40005901

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@KLJEKBFP@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA7?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "L"
	DCB	0x0, "a", 0x0, "n", 0x0, "9", 0x0, "2", 0x0, "1", 0x0, "7"
	DCB	0x0, " ", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, " ", 0x0, "I", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "E"
	DCB	0x0, "V", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@KPKHIGHI@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA8?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "L"
	DCB	0x0, "a", 0x0, "n", 0x0, "9", 0x0, "2", 0x0, "1", 0x0, "8"
	DCB	0x0, " ", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, " ", 0x0, "I", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "E"
	DCB	0x0, "V", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@MEJAEJFM@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA1?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "L"
	DCB	0x0, "a", 0x0, "n", 0x0, "9", 0x0, "2", 0x0, "1", 0x0, "1"
	DCB	0x0, " ", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, " ", 0x0, "I", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "E"
	DCB	0x0, "V", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@CCDPEMCF@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA2?$AA0?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "L"
	DCB	0x0, "a", 0x0, "n", 0x0, "9", 0x0, "2", 0x0, "2", 0x0, "0"
	DCB	0x0, " ", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, " ", 0x0, "I", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "E"
	DCB	0x0, "V", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@OCHNAMEA@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA6?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "L"
	DCB	0x0, "a", 0x0, "n", 0x0, "9", 0x0, "2", 0x0, "1", 0x0, "6"
	DCB	0x0, " ", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, " ", 0x0, "I", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "E"
	DCB	0x0, "V", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@NDONLDNM@?$AAL?$AAa?$AAn?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "L"
	DCB	0x0, "a", 0x0, "n", 0x0, "9", 0x0, "1", 0x0, "1", 0x0, "5"
	DCB	0x0, " ", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, " ", 0x0, "I", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "E"
	DCB	0x0, "V", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@JNHEEPN@?$AAL?$AAa?$AAn?$AA9?$AA1?$AA1?$AA6?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "L"
	DCB	0x0, "a", 0x0, "n", 0x0, "9", 0x0, "1", 0x0, "1", 0x0, "6"
	DCB	0x0, " ", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, " ", 0x0, "I", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "E"
	DCB	0x0, "V", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@EADOOJOC@?$AAL?$AAa?$AAn?$AA9?$AA1?$AA1?$AA7?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "L"
	DCB	0x0, "a", 0x0, "n", 0x0, "9", 0x0, "1", 0x0, "1", 0x0, "7"
	DCB	0x0, " ", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, " ", 0x0, "I", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "E"
	DCB	0x0, "V", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@EEANMOMF@?$AAL?$AAa?$AAn?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "L"
	DCB	0x0, "a", 0x0, "n", 0x0, "9", 0x0, "1", 0x0, "1", 0x0, "8"
	DCB	0x0, " ", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, " ", 0x0, "I", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "E"
	DCB	0x0, "V", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@DIEHPLGB@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA5?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "L"
	DCB	0x0, "a", 0x0, "n", 0x0, "9", 0x0, "2", 0x0, "1", 0x0, "5"
	DCB	0x0, " ", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, " ", 0x0, "I", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "E"
	DCB	0x0, "V", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ChipIdentify| PROC

; 1047 : {

  00000		 |$LN23@ChipIdenti|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M53383|
  00004	e1b04000	 movs        r4, r0

; 1048 : 	SMSC_TRACE0(DBG_INIT,"+ChipIdentify\r\n");
; 1049 : 
; 1050 : 	if (pAdapter==NULL) {

  00008	1a000002	 bne         |$LN15@ChipIdenti|
  0000c		 |$LN20@ChipIdenti|

; 1051 : 		return (BOOLEAN)FALSE;

  0000c	e3a00000	 mov         r0, #0

; 1100 : }

  00010	e8bd4010	 ldmia       sp!, {r4, lr}
  00014	e12fff1e	 bx          lr
  00018		 |$LN15@ChipIdenti|

; 1052 : 	}
; 1053 : 	
; 1054 : 	if (!Lan_Initialize(&(pAdapter->lan9118_data), pAdapter->lan9118_data.dwLanBase))

  00018	e1a00004	 mov         r0, r4
  0001c	e5b01008	 ldr         r1, [r0, #8]!
  00020	eb000000	 bl          Lan_Initialize
  00024	e3500000	 cmp         r0, #0

; 1055 : 	{
; 1056 : 		SMSC_TRACE0(DBG_INIT,"Lan_Initialize failed.\r\n");
; 1057 : 		return (BOOLEAN)FALSE;

  00028	0afffff7	 beq         |$LN20@ChipIdenti|

; 1058 : 	}
; 1059 : 
; 1060 : 	switch ((pAdapter->lan9118_data.dwIdRev)&0xFFFF0000UL)

  0002c	e594100c	 ldr         r1, [r4, #0xC]
  00030	e3e03cff	 mvn         r3, #0xFF, 24
  00034	e22330ff	 eor         r3, r3, #0xFF
  00038	e0012003	 and         r2, r1, r3
  0003c	e3a03545	 mov         r3, #0x45, 10
  00040	e383382a	 orr         r3, r3, #0x2A, 16
  00044	e1520003	 cmp         r2, r3
  00048	8a00001e	 bhi         |$LN18@ChipIdenti|
  0004c	0a00001b	 beq         |$LN7@ChipIdenti|
  00050	e3a03745	 mov         r3, #0x45, 14
  00054	e3833801	 orr         r3, r3, #1, 16
  00058	e1520003	 cmp         r2, r3
  0005c	0a000015	 beq         |$LN2@ChipIdenti|
  00060	e3a03745	 mov         r3, #0x45, 14
  00064	e3833802	 orr         r3, r3, #2, 16
  00068	e1520003	 cmp         r2, r3
  0006c	0a00000f	 beq         |$LN3@ChipIdenti|
  00070	e3a03745	 mov         r3, #0x45, 14
  00074	e3833803	 orr         r3, r3, #3, 16
  00078	e1520003	 cmp         r2, r3
  0007c	0a000009	 beq         |$LN4@ChipIdenti|
  00080	e3520746	 cmp         r2, #0x46, 14
  00084	0a000005	 beq         |$LN5@ChipIdenti|
  00088	e3a03545	 mov         r3, #0x45, 10
  0008c	e383381a	 orr         r3, r3, #0x1A, 16
  00090	e1520003	 cmp         r2, r3
  00094	1affffdc	 bne         |$LN20@ChipIdenti|

; 1077 : 		case	0x115A0000UL:
; 1078 : 				RETAILMSG(1, (TEXT("Lan9215 identified. ID_REV = 0x%08lX\r\n"), (pAdapter->lan9118_data.dwIdRev)));

  00098	e59f00c0	 ldr         r0, [pc, #0xC0]

; 1079 : 				break;

  0009c	ea000020	 b           |$LN19@ChipIdenti|
  000a0		 |$LN5@ChipIdenti|

; 1080 : 		case	0x01180000UL:
; 1081 : 				RETAILMSG(1, (TEXT("Lan9118 identified. ID_REV = 0x%08lX\r\n"), (pAdapter->lan9118_data.dwIdRev)));

  000a0	e59f00b4	 ldr         r0, [pc, #0xB4]

; 1082 : 				break;

  000a4	ea00001e	 b           |$LN19@ChipIdenti|
  000a8		 |$LN4@ChipIdenti|

; 1083 : 		case	0x01170000UL:
; 1084 : 				RETAILMSG(1, (TEXT("Lan9117 identified. ID_REV = 0x%08lX\r\n"), (pAdapter->lan9118_data.dwIdRev)));

  000a8	e59f00a8	 ldr         r0, [pc, #0xA8]

; 1085 : 				break;

  000ac	ea00001c	 b           |$LN19@ChipIdenti|
  000b0		 |$LN3@ChipIdenti|

; 1086 : 		case	0x01160000UL:
; 1087 : 				RETAILMSG(1, (TEXT("Lan9116 identified. ID_REV = 0x%08lX\r\n"), (pAdapter->lan9118_data.dwIdRev)));

  000b0	e59f009c	 ldr         r0, [pc, #0x9C]

; 1088 : 				break;

  000b4	ea00001a	 b           |$LN19@ChipIdenti|
  000b8		 |$LN2@ChipIdenti|

; 1089 : 		case	0x01150000UL:
; 1090 : 				RETAILMSG(1, (TEXT("Lan9115 identified. ID_REV = 0x%08lX\r\n"), (pAdapter->lan9118_data.dwIdRev)));

  000b8	e59f0090	 ldr         r0, [pc, #0x90]

; 1091 : 				break;

  000bc	ea000018	 b           |$LN19@ChipIdenti|
  000c0		 |$LN7@ChipIdenti|

; 1073 : 				break;
; 1074 : 		case	0x116A0000UL:
; 1075 : 				RETAILMSG(1, (TEXT("Lan9216 identified. ID_REV = 0x%08lX\r\n"), (pAdapter->lan9118_data.dwIdRev)));

  000c0	e59f0084	 ldr         r0, [pc, #0x84]

; 1076 : 				break;

  000c4	ea000016	 b           |$LN19@ChipIdenti|
  000c8		 |$LN18@ChipIdenti|
  000c8	e3a03545	 mov         r3, #0x45, 10
  000cc	e383383a	 orr         r3, r3, #0x3A, 16
  000d0	e1520003	 cmp         r2, r3
  000d4	0a000011	 beq         |$LN8@ChipIdenti|
  000d8	e3a03546	 mov         r3, #0x46, 10
  000dc	e383380a	 orr         r3, r3, #0xA, 16
  000e0	e1520003	 cmp         r2, r3
  000e4	0a00000b	 beq         |$LN9@ChipIdenti|
  000e8	e3a03492	 mov         r3, #0x92, 8
  000ec	e3833811	 orr         r3, r3, #0x11, 16
  000f0	e1520003	 cmp         r2, r3
  000f4	0a000005	 beq         |$LN10@ChipIdenti|
  000f8	e3a03492	 mov         r3, #0x92, 8
  000fc	e3833602	 orr         r3, r3, #2, 12
  00100	e1520003	 cmp         r2, r3

; 1092 : 		default:
; 1093 : 				SMSC_WARNING1("Can not Identify LAN9118. (ID_REV = 0x%08x)\r\n", pAdapter->lan9118_data.dwIdRev);
; 1094 : 				return (BOOLEAN)FALSE;

  00104	1affffc0	 bne         |$LN20@ChipIdenti|

; 1061 : 	{
; 1062 : 		case	0x92200000UL:
; 1063 : 				RETAILMSG(1, (TEXT("Lan9220 identified. ID_REV = 0x%08lX\r\n"), (pAdapter->lan9118_data.dwIdRev)));

  00108	e59f0038	 ldr         r0, [pc, #0x38]

; 1064 : 				break;

  0010c	ea000004	 b           |$LN19@ChipIdenti|
  00110		 |$LN10@ChipIdenti|

; 1065 : 		case	0x92110000UL:
; 1066 : 				RETAILMSG(1, (TEXT("Lan9211 identified. ID_REV = 0x%08lX\r\n"), (pAdapter->lan9118_data.dwIdRev)));

  00110	e59f002c	 ldr         r0, [pc, #0x2C]

; 1067 : 				break;

  00114	ea000002	 b           |$LN19@ChipIdenti|
  00118		 |$LN9@ChipIdenti|

; 1068 : 		case	0x118A0000UL:
; 1069 : 				RETAILMSG(1, (TEXT("Lan9218 identified. ID_REV = 0x%08lX\r\n"), (pAdapter->lan9118_data.dwIdRev)));

  00118	e59f0020	 ldr         r0, [pc, #0x20]

; 1070 : 				break;

  0011c	ea000000	 b           |$LN19@ChipIdenti|
  00120		 |$LN8@ChipIdenti|

; 1071 : 		case	0x117A0000UL:
; 1072 : 				RETAILMSG(1, (TEXT("Lan9217 identified. ID_REV = 0x%08lX\r\n"), (pAdapter->lan9118_data.dwIdRev)));

  00120	e59f0014	 ldr         r0, [pc, #0x14]
  00124		 |$LN19@ChipIdenti|
  00124	eb000000	 bl          NKDbgPrintfW

; 1095 : 	}
; 1096 : 	PlatformSetBusTiming(pAdapter->lan9118_data.dwIdRev);

  00128	e594000c	 ldr         r0, [r4, #0xC]
  0012c	eb000000	 bl          PlatformSetBusTiming

; 1097 : 
; 1098 : 	SMSC_TRACE0(DBG_INIT,"-ChipIdentify\r\n");
; 1099 : 	return (BOOLEAN)TRUE;

  00130	e3a00001	 mov         r0, #1

; 1100 : }

  00134	e8bd4010	 ldmia       sp!, {r4, lr}
  00138	e12fff1e	 bx          lr
  0013c		 |$LN24@ChipIdenti|
  0013c		 |$LN25@ChipIdenti|
  0013c	00000000	 DCD         |??_C@_1EO@KLJEKBFP@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA7?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  00140		 |$LN26@ChipIdenti|
  00140	00000000	 DCD         |??_C@_1EO@KPKHIGHI@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA8?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  00144		 |$LN27@ChipIdenti|
  00144	00000000	 DCD         |??_C@_1EO@MEJAEJFM@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA1?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  00148		 |$LN28@ChipIdenti|
  00148	00000000	 DCD         |??_C@_1EO@CCDPEMCF@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA2?$AA0?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  0014c		 |$LN29@ChipIdenti|
  0014c	00000000	 DCD         |??_C@_1EO@OCHNAMEA@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA6?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  00150		 |$LN30@ChipIdenti|
  00150	00000000	 DCD         |??_C@_1EO@NDONLDNM@?$AAL?$AAa?$AAn?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  00154		 |$LN31@ChipIdenti|
  00154	00000000	 DCD         |??_C@_1EO@JNHEEPN@?$AAL?$AAa?$AAn?$AA9?$AA1?$AA1?$AA6?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  00158		 |$LN32@ChipIdenti|
  00158	00000000	 DCD         |??_C@_1EO@EADOOJOC@?$AAL?$AAa?$AAn?$AA9?$AA1?$AA1?$AA7?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  0015c		 |$LN33@ChipIdenti|
  0015c	00000000	 DCD         |??_C@_1EO@EEANMOMF@?$AAL?$AAa?$AAn?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  00160		 |$LN34@ChipIdenti|
  00160	00000000	 DCD         |??_C@_1EO@DIEHPLGB@?$AAL?$AAa?$AAn?$AA9?$AA2?$AA1?$AA5?$AA?5?$AAi?$AAd?$AAe?$AAn?$AAt?$AAi?$AAf?$AAi?$AAe?$AAd?$AA?4?$AA?5?$AAI?$AAD?$AA_?$AAR?$AAE?$AAV?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  00164		 |$M53384|

			 ENDP  ; |ChipIdentify|

	EXPORT	|??_C@_1CA@OJEMANNL@?$AA?$CF?$AA2?$AA0?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@ONMBDJOG@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAS?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe@| [ DATA ] ; `string'
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T53410| DCD	|$LN12@DumpSIMReg|
	DCD	0x40001401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@OJEMANNL@?$AA?$CF?$AA2?$AA0?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "2", 0x0, "0", 0x0, "s", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@ONMBDJOG@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAS?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe@| DCB "D"
	DCB	0x0, "u", 0x0, "m", 0x0, "p", 0x0, " ", 0x0, "9", 0x0, "1"
	DCB	0x0, "1", 0x0, "8", 0x0, " ", 0x0, "S", 0x0, "l", 0x0, "a"
	DCB	0x0, "v", 0x0, "e", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DumpSIMRegs| PROC

; 1296 : {

  00000		 |$LN12@DumpSIMReg|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M53407|
  00004	e1a06000	 mov         r6, r0

; 1297 : 	UINT	i;
; 1298 : 
; 1299 : 	RETAILMSG(1, (TEXT("Dump 9118 Slave Interface Module Registers\r\n")));

  00008	e59f003c	 ldr         r0, [pc, #0x3C]
  0000c	eb000000	 bl          NKDbgPrintfW
  00010	e59f4030	 ldr         r4, [pc, #0x30]
  00014	e3a0501a	 mov         r5, #0x1A
  00018		 |$LL3@DumpSIMReg|

; 1300 : 	for (i=0U;i<(sizeof(sysCsr)/sizeof(SHOW_REG));i++) {
; 1301 : 		RETAILMSG(1, (TEXT("%20s = 0x%08x\r\n"), 
; 1302 : 					sysCsr[i].wszName, 
; 1303 : 					GetRegDW(pAdapter->lan9118_data.dwLanBase, sysCsr[i].dwOffset)));

  00018	e5942028	 ldr         r2, [r4, #0x28]
  0001c	e5963008	 ldr         r3, [r6, #8]
  00020	e59f001c	 ldr         r0, [pc, #0x1C]
  00024	e1a01004	 mov         r1, r4
  00028	e7922003	 ldr         r2, [r2, +r3]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e284402c	 add         r4, r4, #0x2C
  00034	e2555001	 subs        r5, r5, #1
  00038	1afffff6	 bne         |$LL3@DumpSIMReg|

; 1304 : 	}
; 1305 : }

  0003c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$LN13@DumpSIMReg|
  00044		 |$LN14@DumpSIMReg|
  00044	00000000	 DCD         |??_C@_1CA@OJEMANNL@?$AA?$CF?$AA2?$AA0?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00048		 |$LN15@DumpSIMReg|
  00048	00000000	 DCD         |sysCsr|
  0004c		 |$LN16@DumpSIMReg|
  0004c	00000000	 DCD         |??_C@_1FK@ONMBDJOG@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAS?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe@|
  00050		 |$M53408|

			 ENDP  ; |DumpSIMRegs|

	EXPORT	|??_C@_1DE@BJMNGFCC@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|Lan_GetMacRegDW|

  00000			 AREA	 |.pdata|, PDATA
|$T53424| DCD	|$LN10@DumpMACReg|
	DCD	0x40001501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@BJMNGFCC@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "u", 0x0, "m", 0x0, "p", 0x0, " ", 0x0, "9", 0x0, "1"
	DCB	0x0, "1", 0x0, "8", 0x0, " ", 0x0, "M", 0x0, "A", 0x0, "C"
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DumpMACRegs| PROC

; 1308 : {

  00000		 |$LN10@DumpMACReg|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M53421|
  00004	e1a06000	 mov         r6, r0

; 1309 : 	UINT	i;
; 1310 : 
; 1311 : 	RETAILMSG(1, (TEXT("Dump 9118 MAC Registers\r\n")));

  00008	e59f0040	 ldr         r0, [pc, #0x40]
  0000c	eb000000	 bl          NKDbgPrintfW
  00010	e59f4034	 ldr         r4, [pc, #0x34]
  00014	e3a0500c	 mov         r5, #0xC
  00018		 |$LL3@DumpMACReg|

; 1312 : 	for (i=0U;i<(sizeof(macCsr)/sizeof(SHOW_REG));i++) {
; 1313 : 		RETAILMSG(1, (TEXT("%20s = 0x%08x\r\n"), 
; 1314 : 					macCsr[i].wszName, 
; 1315 : 					Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, macCsr[i].dwOffset)));

  00018	e5941028	 ldr         r1, [r4, #0x28]
  0001c	e5960008	 ldr         r0, [r6, #8]
  00020	eb000000	 bl          Lan_GetMacRegDW
  00024	e1a02000	 mov         r2, r0
  00028	e59f0018	 ldr         r0, [pc, #0x18]
  0002c	e1a01004	 mov         r1, r4
  00030	eb000000	 bl          NKDbgPrintfW
  00034	e284402c	 add         r4, r4, #0x2C
  00038	e2555001	 subs        r5, r5, #1
  0003c	1afffff5	 bne         |$LL3@DumpMACReg|

; 1316 : 	}
; 1317 : }

  00040	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN11@DumpMACReg|
  00048		 |$LN12@DumpMACReg|
  00048	00000000	 DCD         |??_C@_1CA@OJEMANNL@?$AA?$CF?$AA2?$AA0?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  0004c		 |$LN13@DumpMACReg|
  0004c	00000000	 DCD         |macCsr|
  00050		 |$LN14@DumpMACReg|
  00050	00000000	 DCD         |??_C@_1DE@BJMNGFCC@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00054		 |$M53422|

			 ENDP  ; |DumpMACRegs|

	EXPORT	|??_C@_1CA@PDHAONFF@?$AA?$CF?$AA2?$AA0?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA4?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@HGFNBOBE@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAP?$AAH?$AAY?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|Lan_GetMiiRegW|

  00000			 AREA	 |.pdata|, PDATA
|$T53438| DCD	|$LN10@DumpPHYReg|
	DCD	0x40001701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@PDHAONFF@?$AA?$CF?$AA2?$AA0?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA4?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "2", 0x0, "0", 0x0, "s", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "4", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@HGFNBOBE@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAP?$AAH?$AAY?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "u", 0x0, "m", 0x0, "p", 0x0, " ", 0x0, "9", 0x0, "1"
	DCB	0x0, "1", 0x0, "8", 0x0, " ", 0x0, "P", 0x0, "H", 0x0, "Y"
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DumpPHYRegs| PROC

; 1320 : {

  00000		 |$LN10@DumpPHYReg|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M53435|
  00004	e1a05000	 mov         r5, r0

; 1321 : 	UINT	i;
; 1322 : 
; 1323 : 	RETAILMSG(1, (TEXT("Dump 9118 PHY Registers\r\n")));

  00008	e59f0048	 ldr         r0, [pc, #0x48]
  0000c	eb000000	 bl          NKDbgPrintfW
  00010	e59f403c	 ldr         r4, [pc, #0x3C]
  00014	e3a06013	 mov         r6, #0x13
  00018		 |$LL3@DumpPHYReg|

; 1324 : 	for (i=0U;i<(sizeof(phyCsr)/sizeof(SHOW_REG));i++) {
; 1325 : 		RETAILMSG(1, (TEXT("%20s = 0x%04x\r\n"), 
; 1326 : 					phyCsr[i].wszName, 
; 1327 : 					AdapterReadPhy(phyCsr[i].dwOffset)));

  00018	e5942028	 ldr         r2, [r4, #0x28]
  0001c	e5d51020	 ldrb        r1, [r5, #0x20]
  00020	e5950008	 ldr         r0, [r5, #8]
  00024	eb000000	 bl          Lan_GetMiiRegW
  00028	e1a02800	 mov         r2, r0, lsl #16
  0002c	e59f001c	 ldr         r0, [pc, #0x1C]
  00030	e1a02822	 mov         r2, r2, lsr #16
  00034	e1a01004	 mov         r1, r4
  00038	eb000000	 bl          NKDbgPrintfW
  0003c	e284402c	 add         r4, r4, #0x2C
  00040	e2566001	 subs        r6, r6, #1
  00044	1afffff3	 bne         |$LL3@DumpPHYReg|

; 1328 : 	}
; 1329 : }

  00048	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$LN11@DumpPHYReg|
  00050		 |$LN12@DumpPHYReg|
  00050	00000000	 DCD         |??_C@_1CA@PDHAONFF@?$AA?$CF?$AA2?$AA0?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA4?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00054		 |$LN13@DumpPHYReg|
  00054	00000000	 DCD         |phyCsr|
  00058		 |$LN14@DumpPHYReg|
  00058	00000000	 DCD         |??_C@_1DE@HGFNBOBE@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAP?$AAH?$AAY?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  0005c		 |$M53436|

			 ENDP  ; |DumpPHYRegs|

	EXPORT	|??_C@_1DE@PLPEILBO@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAA?$AAl?$AAl?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T53482| DCD	|$LN28@DumpAllReg|
	DCD	0x40003a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@PLPEILBO@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAA?$AAl?$AAl?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "u", 0x0, "m", 0x0, "p", 0x0, " ", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, " ", 0x0, "9", 0x0, "1", 0x0, "1", 0x0, "8"
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DumpAllRegs| PROC

; 1332 : {

  00000		 |$LN28@DumpAllReg|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M53479|
  00004	e1a06000	 mov         r6, r0

; 1333 : 	RETAILMSG(1, (TEXT("Dump All 9118 Registers\r\n")));

  00008	e59f00d4	 ldr         r0, [pc, #0xD4]
  0000c	eb000000	 bl          NKDbgPrintfW

; 1334 : 	DumpSIMRegs(pAdapter);

  00010	e59f00c8	 ldr         r0, [pc, #0xC8]
  00014	eb000000	 bl          NKDbgPrintfW
  00018	e59f40bc	 ldr         r4, [pc, #0xBC]
  0001c	e3a0501a	 mov         r5, #0x1A
  00020		 |$LL5@DumpAllReg|
  00020	e5942028	 ldr         r2, [r4, #0x28]
  00024	e5963008	 ldr         r3, [r6, #8]
  00028	e59f00a0	 ldr         r0, [pc, #0xA0]
  0002c	e1a01004	 mov         r1, r4
  00030	e7922003	 ldr         r2, [r2, +r3]
  00034	eb000000	 bl          NKDbgPrintfW
  00038	e284402c	 add         r4, r4, #0x2C
  0003c	e2555001	 subs        r5, r5, #1
  00040	1afffff6	 bne         |$LL5@DumpAllReg|

; 1335 : 	DumpMACRegs(pAdapter);

  00044	e59f008c	 ldr         r0, [pc, #0x8C]
  00048	eb000000	 bl          NKDbgPrintfW
  0004c	e59f4080	 ldr         r4, [pc, #0x80]
  00050	e3a0500c	 mov         r5, #0xC
  00054		 |$LL12@DumpAllReg|
  00054	e5941028	 ldr         r1, [r4, #0x28]
  00058	e5960008	 ldr         r0, [r6, #8]
  0005c	eb000000	 bl          Lan_GetMacRegDW
  00060	e1a02000	 mov         r2, r0
  00064	e59f0064	 ldr         r0, [pc, #0x64]
  00068	e1a01004	 mov         r1, r4
  0006c	eb000000	 bl          NKDbgPrintfW
  00070	e284402c	 add         r4, r4, #0x2C
  00074	e2555001	 subs        r5, r5, #1
  00078	1afffff5	 bne         |$LL12@DumpAllReg|

; 1336 : 	DumpPHYRegs(pAdapter);

  0007c	e59f0048	 ldr         r0, [pc, #0x48]
  00080	eb000000	 bl          NKDbgPrintfW
  00084	e59f403c	 ldr         r4, [pc, #0x3C]
  00088	e3a05013	 mov         r5, #0x13
  0008c		 |$LL17@DumpAllReg|
  0008c	e5942028	 ldr         r2, [r4, #0x28]
  00090	e5d61020	 ldrb        r1, [r6, #0x20]
  00094	e5960008	 ldr         r0, [r6, #8]
  00098	eb000000	 bl          Lan_GetMiiRegW
  0009c	e1a02800	 mov         r2, r0, lsl #16
  000a0	e59f001c	 ldr         r0, [pc, #0x1C]
  000a4	e1a02822	 mov         r2, r2, lsr #16
  000a8	e1a01004	 mov         r1, r4
  000ac	eb000000	 bl          NKDbgPrintfW
  000b0	e284402c	 add         r4, r4, #0x2C
  000b4	e2555001	 subs        r5, r5, #1
  000b8	1afffff3	 bne         |$LL17@DumpAllReg|

; 1337 : }

  000bc	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000c0	e12fff1e	 bx          lr
  000c4		 |$LN29@DumpAllReg|
  000c4		 |$LN30@DumpAllReg|
  000c4	00000000	 DCD         |??_C@_1CA@PDHAONFF@?$AA?$CF?$AA2?$AA0?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA4?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000c8		 |$LN31@DumpAllReg|
  000c8	00000000	 DCD         |phyCsr|
  000cc		 |$LN32@DumpAllReg|
  000cc	00000000	 DCD         |??_C@_1DE@HGFNBOBE@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAP?$AAH?$AAY?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  000d0		 |$LN33@DumpAllReg|
  000d0	00000000	 DCD         |??_C@_1CA@OJEMANNL@?$AA?$CF?$AA2?$AA0?$AAs?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  000d4		 |$LN34@DumpAllReg|
  000d4	00000000	 DCD         |macCsr|
  000d8		 |$LN35@DumpAllReg|
  000d8	00000000	 DCD         |??_C@_1DE@BJMNGFCC@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAM?$AAA?$AAC?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  000dc		 |$LN36@DumpAllReg|
  000dc	00000000	 DCD         |sysCsr|
  000e0		 |$LN37@DumpAllReg|
  000e0	00000000	 DCD         |??_C@_1FK@ONMBDJOG@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAS?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?5?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe@|
  000e4		 |$LN38@DumpAllReg|
  000e4	00000000	 DCD         |??_C@_1DE@PLPEILBO@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAA?$AAl?$AAl?$AA?5?$AA9?$AA1?$AA1?$AA8?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  000e8		 |$M53480|

			 ENDP  ; |DumpAllRegs|

	EXPORT	|DumpStatus|
	EXPORT	|??_C@_1DE@KBAGICAG@?$AAR?$AAx?$AAP?$AAk?$AAt?$AA?5?$AAI?$AAn?$AA?5?$AAF?$AAu?$AAl?$AAl?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@GEHFBDNM@?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAF?$AAu?$AAl?$AAl?$AAP?$AAk?$AAt?$AA?4?$AAd?$AAw?$AAR?$AAd?$AAP?$AAt?$AAr?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@LABKMJHP@?$AAR?$AAx?$AAP?$AAk?$AAt?$AA?5?$AAI?$AAn?$AA?5?$AAE?$AAm?$AAp?$AAt?$AAy?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IG@NFDKALGF@?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAE?$AAm?$AAp?$AAt?$AAy?$AAP?$AAk?$AAt?$AA?4?$AAd?$AAw?$AAR?$AAd?$AAP?$AAt?$AAr?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@EEDFDCLO@?$AAd?$AAw?$AAR?$AAx?$AAN?$AAu?$AAm?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@EAECFHJP@?$AAT?$AAx?$AAR?$AAe?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAT?$AAx?$AAS?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAT?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@CCEMNHBG@?$AA?$CF?$AAd?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAi?$AAn?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAD?$AAe?$AAf?$AAe?$AAr?$AAe?$AAd?$AA?5?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1OE@FBGABGOM@?$AAT?$AAo?$AAt?$AAa?$AAl?$AA?5?$AAR?$AAx?$AA?5?$AAP?$AAk?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAR?$AAx?$AAP?$AAk?$AAt?$AAT?$AAo?$AAF?$AAu?$AAl?$AAl?$AA?5?$AA?$DN@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T53508| DCD	|$LN9@DumpStatus|
	DCD	0x40004202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@KBAGICAG@?$AAR?$AAx?$AAP?$AAk?$AAt?$AA?5?$AAI?$AAn?$AA?5?$AAF?$AAu?$AAl?$AAl?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "P", 0x0, "k", 0x0, "t", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, " ", 0x0, "F", 0x0, "u", 0x0, "l", 0x0, "l"
	DCB	0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "u", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@GEHFBDNM@?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAF?$AAu?$AAl?$AAl?$AAP?$AAk?$AAt?$AA?4?$AAd?$AAw?$AAR?$AAd?$AAP?$AAt?$AAr?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@| DCB "p"
	DCB	0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "-", 0x0, ">", 0x0, "F", 0x0, "u", 0x0, "l"
	DCB	0x0, "l", 0x0, "P", 0x0, "k", 0x0, "t", 0x0, ".", 0x0, "d"
	DCB	0x0, "w", 0x0, "R", 0x0, "d", 0x0, "P", 0x0, "t", 0x0, "r"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "p", 0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "-", 0x0, ">", 0x0, "F"
	DCB	0x0, "u", 0x0, "l", 0x0, "l", 0x0, "P", 0x0, "k", 0x0, "t"
	DCB	0x0, ".", 0x0, "d", 0x0, "w", 0x0, "W", 0x0, "r", 0x0, "P"
	DCB	0x0, "t", 0x0, "r", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@LABKMJHP@?$AAR?$AAx?$AAP?$AAk?$AAt?$AA?5?$AAI?$AAn?$AA?5?$AAE?$AAm?$AAp?$AAt?$AAy?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "P", 0x0, "k", 0x0, "t", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, " ", 0x0, "E", 0x0, "m", 0x0, "p", 0x0, "t"
	DCB	0x0, "y", 0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "u", 0x0, "e"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IG@NFDKALGF@?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAE?$AAm?$AAp?$AAt?$AAy?$AAP?$AAk?$AAt?$AA?4?$AAd?$AAw?$AAR?$AAd?$AAP?$AAt?$AAr?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0@| DCB "p"
	DCB	0x0, "A", 0x0, "d", 0x0, "a", 0x0, "p", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "-", 0x0, ">", 0x0, "E", 0x0, "m", 0x0, "p"
	DCB	0x0, "t", 0x0, "y", 0x0, "P", 0x0, "k", 0x0, "t", 0x0, "."
	DCB	0x0, "d", 0x0, "w", 0x0, "R", 0x0, "d", 0x0, "P", 0x0, "t"
	DCB	0x0, "r", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "p", 0x0, "A", 0x0, "d", 0x0, "a"
	DCB	0x0, "p", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "-", 0x0, ">"
	DCB	0x0, "E", 0x0, "m", 0x0, "p", 0x0, "t", 0x0, "y", 0x0, "P"
	DCB	0x0, "k", 0x0, "t", 0x0, ".", 0x0, "d", 0x0, "w", 0x0, "W"
	DCB	0x0, "r", 0x0, "P", 0x0, "t", 0x0, "r", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@EEDFDCLO@?$AAd?$AAw?$AAR?$AAx?$AAN?$AAu?$AAm?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "d"
	DCB	0x0, "w", 0x0, "R", 0x0, "x", 0x0, "N", 0x0, "u", 0x0, "m"
	DCB	0x0, "I", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@EAECFHJP@?$AAT?$AAx?$AAR?$AAe?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAT?$AAx?$AAS?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAT?$AAx@| DCB "T"
	DCB	0x0, "x", 0x0, "R", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "T", 0x0, "x"
	DCB	0x0, "S", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "T"
	DCB	0x0, "x", 0x0, "P", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@CCEMNHBG@?$AA?$CF?$AAd?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAi?$AAn?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAD?$AAe?$AAf?$AAe?$AAr?$AAe?$AAd?$AA?5?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e"
	DCB	0x0, " ", 0x0, "D", 0x0, "e", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "Q", 0x0, "u", 0x0, "e"
	DCB	0x0, "u", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1OE@FBGABGOM@?$AAT?$AAo?$AAt?$AAa?$AAl?$AA?5?$AAR?$AAx?$AA?5?$AAP?$AAk?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAR?$AAx?$AAP?$AAk?$AAt?$AAT?$AAo?$AAF?$AAu?$AAl?$AAl?$AA?5?$AA?$DN@| DCB "T"
	DCB	0x0, "o", 0x0, "t", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "R"
	DCB	0x0, "x", 0x0, " ", 0x0, "P", 0x0, "k", 0x0, "t", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "R", 0x0, "x", 0x0, "P", 0x0, "k", 0x0, "t", 0x0, "T"
	DCB	0x0, "o", 0x0, "F", 0x0, "u", 0x0, "l", 0x0, "l", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "R", 0x0, "x", 0x0, "P", 0x0, "k", 0x0, "t", 0x0, "T"
	DCB	0x0, "o", 0x0, "E", 0x0, "m", 0x0, "p", 0x0, "t", 0x0, "y"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "R", 0x0, "x", 0x0, "P", 0x0, "k", 0x0, "t"
	DCB	0x0, "F", 0x0, "r", 0x0, "o", 0x0, "m", 0x0, "F", 0x0, "u"
	DCB	0x0, "l", 0x0, "l", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "R", 0x0, "x", 0x0, "P"
	DCB	0x0, "k", 0x0, "t", 0x0, "F", 0x0, "r", 0x0, "o", 0x0, "m"
	DCB	0x0, "E", 0x0, "m", 0x0, "p", 0x0, "t", 0x0, "y", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "R", 0x0, "x", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "c"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DumpStatus| PROC

; 1341 : {

  00000		 |$LN9@DumpStatus|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M53505|
  00008	e1a07000	 mov         r7, r0

; 1342 : 	DWORD		dwRdPtr, dwWrPtr;
; 1343 : 
; 1344 : 	RETAILMSG(1, (TEXT("dwRxNumIndicate = %d\r\n"), dwRxNumIndicate));

  0000c	e59f60f0	 ldr         r6, [pc, #0xF0]
  00010	e59f00e8	 ldr         r0, [pc, #0xE8]
  00014	e5961024	 ldr         r1, [r6, #0x24]
  00018	eb000000	 bl          NKDbgPrintfW

; 1345 : 	RETAILMSG(1, (TEXT("TxReported = %d, TxSent = %d, TxPend = %d\r\n"), dwTxReported, dwTxSent, dwTxPend));

  0001c	e5963008	 ldr         r3, [r6, #8]
  00020	e5962004	 ldr         r2, [r6, #4]
  00024	e5961000	 ldr         r1, [r6]
  00028	e59f00cc	 ldr         r0, [pc, #0xCC]
  0002c	eb000000	 bl          NKDbgPrintfW

; 1346 : 	RETAILMSG(1, (TEXT("%d are in the Defered Queue\r\n"), QUEUE_COUNT(&pAdapter->TxDeferedPkt)));

  00030	e597117c	 ldr         r1, [r7, #0x17C]
  00034	e59f00bc	 ldr         r0, [pc, #0xBC]
  00038	eb000000	 bl          NKDbgPrintfW

; 1347 : 
; 1348 : 	RETAILMSG(1, (TEXT("Total Rx Pkt = %d, RxPktToFull = %d, RxPktToEmpty = %d, RxPktFromFull = %d, RxPktFromEmpty = %d, RxDiscard = %d\r\n"),
; 1349 : 				dwRxTotalPkt, dwRxPktToFull, dwRxPktToEmpty, dwRxPktFromFull, dwRxPktFromEmpty, dwRxDiscard));

  0003c	e5965020	 ldr         r5, [r6, #0x20]
  00040	e5964018	 ldr         r4, [r6, #0x18]
  00044	e596e014	 ldr         lr, [r6, #0x14]
  00048	e5963010	 ldr         r3, [r6, #0x10]
  0004c	e596200c	 ldr         r2, [r6, #0xC]
  00050	e596101c	 ldr         r1, [r6, #0x1C]
  00054	e59f0098	 ldr         r0, [pc, #0x98]
  00058	e58d5008	 str         r5, [sp, #8]
  0005c	e58d4004	 str         r4, [sp, #4]
  00060	e58de000	 str         lr, [sp]
  00064	eb000000	 bl          NKDbgPrintfW

; 1350 : 	dwRdPtr = pAdapter->EmptyPkt.dwRdPtr;

  00068	e5973d8c	 ldr         r3, [r7, #0xD8C]

; 1351 : 	dwWrPtr = pAdapter->EmptyPkt.dwWrPtr;

  0006c	e5972d90	 ldr         r2, [r7, #0xD90]

; 1352 : 	RETAILMSG(1, (TEXT("RxPkt In EmptyQueue = %d\r\n"), (dwWrPtr >= dwRdPtr) ? (dwWrPtr - dwRdPtr) : (MAX_RXPACKETS_IN_QUEUE+1 - (dwRdPtr - dwWrPtr))));

  00070	e59f0078	 ldr         r0, [pc, #0x78]
  00074	e1520003	 cmp         r2, r3
  00078	20421003	 subcs       r1, r2, r3
  0007c	30423003	 subcc       r3, r2, r3
  00080	32833c01	 addcc       r3, r3, #1, 24
  00084	32831001	 addcc       r1, r3, #1
  00088	eb000000	 bl          NKDbgPrintfW

; 1353 : 	RETAILMSG(1, (TEXT("pAdapter->EmptyPkt.dwRdPtr = %d, pAdapter->EmptyPkt.dwWrPtr = %d\r\n"), pAdapter->EmptyPkt.dwRdPtr, pAdapter->EmptyPkt.dwWrPtr));

  0008c	e5972d90	 ldr         r2, [r7, #0xD90]
  00090	e5971d8c	 ldr         r1, [r7, #0xD8C]
  00094	e59f0050	 ldr         r0, [pc, #0x50]
  00098	eb000000	 bl          NKDbgPrintfW

; 1354 : 	dwRdPtr = pAdapter->FullPkt.dwRdPtr;

  0009c	e2874c11	 add         r4, r7, #0x11, 24

; 1355 : 	dwWrPtr = pAdapter->FullPkt.dwWrPtr;

  000a0	e5943098	 ldr         r3, [r4, #0x98]
  000a4	e2875c11	 add         r5, r7, #0x11, 24
  000a8	e595209c	 ldr         r2, [r5, #0x9C]

; 1356 : 	RETAILMSG(1, (TEXT("RxPkt In FullQueue = %d\r\n"), (dwWrPtr >= dwRdPtr) ? (dwWrPtr - dwRdPtr) : (MAX_RXPACKETS_IN_QUEUE+1 - (dwRdPtr - dwWrPtr))));

  000ac	e59f0034	 ldr         r0, [pc, #0x34]
  000b0	e1520003	 cmp         r2, r3
  000b4	20421003	 subcs       r1, r2, r3
  000b8	30423003	 subcc       r3, r2, r3
  000bc	32833c01	 addcc       r3, r3, #1, 24
  000c0	32831001	 addcc       r1, r3, #1
  000c4	eb000000	 bl          NKDbgPrintfW

; 1357 : 	RETAILMSG(1, (TEXT("pAdapter->FullPkt.dwRdPtr = %d, pAdapter->FullPkt.dwWrPtr = %d\r\n"), pAdapter->FullPkt.dwRdPtr, pAdapter->FullPkt.dwWrPtr));

  000c8	e595209c	 ldr         r2, [r5, #0x9C]
  000cc	e5941098	 ldr         r1, [r4, #0x98]
  000d0	e59f000c	 ldr         r0, [pc, #0xC]
  000d4	eb000000	 bl          NKDbgPrintfW

; 1358 : }

  000d8	e28dd00c	 add         sp, sp, #0xC
  000dc	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000e0	e12fff1e	 bx          lr
  000e4		 |$LN10@DumpStatus|
  000e4		 |$LN11@DumpStatus|
  000e4	00000000	 DCD         |??_C@_1IC@GEHFBDNM@?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAF?$AAu?$AAl?$AAl?$AAP?$AAk?$AAt?$AA?4?$AAd?$AAw?$AAR?$AAd?$AAP?$AAt?$AAr?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@|
  000e8		 |$LN12@DumpStatus|
  000e8	00000000	 DCD         |??_C@_1DE@KBAGICAG@?$AAR?$AAx?$AAP?$AAk?$AAt?$AA?5?$AAI?$AAn?$AA?5?$AAF?$AAu?$AAl?$AAl?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  000ec		 |$LN13@DumpStatus|
  000ec	00000000	 DCD         |??_C@_1IG@NFDKALGF@?$AAp?$AAA?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AAE?$AAm?$AAp?$AAt?$AAy?$AAP?$AAk?$AAt?$AA?4?$AAd?$AAw?$AAR?$AAd?$AAP?$AAt?$AAr?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0@|
  000f0		 |$LN14@DumpStatus|
  000f0	00000000	 DCD         |??_C@_1DG@LABKMJHP@?$AAR?$AAx?$AAP?$AAk?$AAt?$AA?5?$AAI?$AAn?$AA?5?$AAE?$AAm?$AAp?$AAt?$AAy?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  000f4		 |$LN15@DumpStatus|
  000f4	00000000	 DCD         |??_C@_1OE@FBGABGOM@?$AAT?$AAo?$AAt?$AAa?$AAl?$AA?5?$AAR?$AAx?$AA?5?$AAP?$AAk?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAR?$AAx?$AAP?$AAk?$AAt?$AAT?$AAo?$AAF?$AAu?$AAl?$AAl?$AA?5?$AA?$DN@|
  000f8		 |$LN16@DumpStatus|
  000f8	00000000	 DCD         |??_C@_1DM@CCEMNHBG@?$AA?$CF?$AAd?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAi?$AAn?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAD?$AAe?$AAf?$AAe?$AAr?$AAe?$AAd?$AA?5?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  000fc		 |$LN17@DumpStatus|
  000fc	00000000	 DCD         |??_C@_1FI@EAECFHJP@?$AAT?$AAx?$AAR?$AAe?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAT?$AAx?$AAS?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAT?$AAx@|
  00100		 |$LN18@DumpStatus|
  00100	00000000	 DCD         |??_C@_1CO@EEDFDCLO@?$AAd?$AAw?$AAR?$AAx?$AAN?$AAu?$AAm?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00104		 |$LN19@DumpStatus|
  00104	00000000	 DCD         |dwTxReported|
  00108		 |$M53506|

			 ENDP  ; |DumpStatus|

	EXPORT	|LinkIndicate|
	IMPORT	|Lan_GetLinkMode|

  00000			 AREA	 |.pdata|, PDATA
|$T53529| DCD	|$LN8@LinkIndica|
	DCD	0x40002301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LinkIndicate| PROC

; 1362 : {

  00000		 |$LN8@LinkIndica|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M53526|
  00004	e1a06000	 mov         r6, r0

; 1363 : 	DWORD			dwLinkStatus;
; 1364 : 	
; 1365 : 	dwLinkStatus = Lan_GetLinkMode(&pAdapter->lan9118_data);

  00008	e2860008	 add         r0, r6, #8
  0000c	eb000000	 bl          Lan_GetLinkMode

; 1366 : 	if (dwLinkStatus != pAdapter->lan9118_data.dwLinkMode) {

  00010	e5963024	 ldr         r3, [r6, #0x24]
  00014	e1a05000	 mov         r5, r0
  00018	e1550003	 cmp         r5, r3
  0001c	0a000017	 beq         |$LN3@LinkIndica|

; 1367 : 		if (dwLinkStatus != LINK_NO_LINK)
; 1368 : 		{
; 1369 : 			NdisMIndicateStatus(pAdapter->hMiniportAdapterHandle,
; 1370 : 								NDIS_STATUS_MEDIA_CONNECT, (PVOID)0, 0U);

  00020	e5960000	 ldr         r0, [r6]
  00024	e3550000	 cmp         r5, #0
  00028	e3a03000	 mov         r3, #0
  0002c	e5904220	 ldr         r4, [r0, #0x220]
  00030	e3a02000	 mov         r2, #0
  00034	0a000008	 beq         |$LN2@LinkIndica|
  00038	e3a0112d	 mov         r1, #0x2D, 2
  0003c	e3811801	 orr         r1, r1, #1, 16
  00040	e1a0e00f	 mov         lr, pc
  00044	e12fff14	 bx          r4

; 1371 : 			NdisMIndicateStatusComplete(pAdapter->hMiniportAdapterHandle);

  00048	e5960000	 ldr         r0, [r6]
  0004c	e5903224	 ldr         r3, [r0, #0x224]
  00050	e1a0e00f	 mov         lr, pc
  00054	e12fff13	 bx          r3

; 1372 : 		}
; 1373 : 		else

  00058	ea000007	 b           |$LN1@LinkIndica|
  0005c		 |$LN2@LinkIndica|

; 1374 : 		{
; 1375 : 			NdisMIndicateStatus(pAdapter->hMiniportAdapterHandle,
; 1376 : 								NDIS_STATUS_MEDIA_DISCONNECT, (PVOID)0, 0U);

  0005c	e3a01131	 mov         r1, #0x31, 2
  00060	e3811801	 orr         r1, r1, #1, 16
  00064	e1a0e00f	 mov         lr, pc
  00068	e12fff14	 bx          r4

; 1377 : 			NdisMIndicateStatusComplete(pAdapter->hMiniportAdapterHandle);

  0006c	e5960000	 ldr         r0, [r6]
  00070	e5903224	 ldr         r3, [r0, #0x224]
  00074	e1a0e00f	 mov         lr, pc
  00078	e12fff13	 bx          r3
  0007c		 |$LN1@LinkIndica|

; 1378 : 		}
; 1379 : 		pAdapter->lan9118_data.dwLinkMode = dwLinkStatus;

  0007c	e5865024	 str         r5, [r6, #0x24]
  00080		 |$LN3@LinkIndica|

; 1380 : 	}
; 1381 : 
; 1382 : 	return dwLinkStatus;
; 1383 : }

  00080	e1a00005	 mov         r0, r5
  00084	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$M53527|

			 ENDP  ; |LinkIndicate|

	IMPORT	|Lan_SetMacRegDW|

  00000			 AREA	 |.pdata|, PDATA
|$T53539| DCD	|$LN8@Smsc9118Se|
	DCD	0x40001501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Smsc9118SetMacFilter| PROC

; 1386 : {

  00000		 |$LN8@Smsc9118Se|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M53536|
  00004	e1a04000	 mov         r4, r0

; 1387 : 	const DWORD dwLanBase = pAdapter->lan9118_data.dwLanBase;

  00008	e5945008	 ldr         r5, [r4, #8]

; 1388 : 	DWORD	dwReg;
; 1389 : 
; 1390 : 	dwReg = Lan_GetMacRegDW(dwLanBase, MAC_CR);

  0000c	e3a01001	 mov         r1, #1
  00010	e1a00005	 mov         r0, r5
  00014	eb000000	 bl          Lan_GetMacRegDW

; 1391 : 	
; 1392 : 	dwReg &= (~(MAC_CR_MCPAS_ | MAC_CR_PRMS_ | MAC_CR_INVFILT_ | MAC_CR_HFILT_ | MAC_CR_HPFILT_ | MAC_CR_BCAST_));
; 1393 : 
; 1394 : 	if (pAdapter->ulPacketFilter & (DWORD)NDIS_PACKET_TYPE_ALL_MULTICAST)

  00018	e594114c	 ldr         r1, [r4, #0x14C]
  0001c	e3e03aea	 mvn         r3, #0xEA, 20
  00020	e2233b02	 eor         r3, r3, #2, 22
  00024	e0032000	 and         r2, r3, r0
  00028	e3110004	 tst         r1, #4

; 1395 : 	{
; 1396 : 		dwReg |= MAC_CR_MCPAS_;

  0002c	13822702	 orrne       r2, r2, #2, 14

; 1397 : 	}
; 1398 : 
; 1399 : 	if (pAdapter->ulPacketFilter & (DWORD)NDIS_PACKET_TYPE_PROMISCUOUS)

  00030	e3110020	 tst         r1, #0x20

; 1400 : 	{
; 1401 : 		dwReg |= MAC_CR_PRMS_;

  00034	13822701	 orrne       r2, r2, #1, 14

; 1402 : 	}
; 1403 : 
; 1404 : 	if (pAdapter->ulPacketFilter & (DWORD)NDIS_PACKET_TYPE_MULTICAST)

  00038	e3110002	 tst         r1, #2

; 1405 : 	{
; 1406 : 		dwReg |= MAC_CR_HPFILT_;

  0003c	13822a02	 orrne       r2, r2, #2, 20

; 1407 : 	}
; 1408 : 	Lan_SetMacRegDW(dwLanBase, MAC_CR, dwReg);

  00040	e3a01001	 mov         r1, #1
  00044	e1a00005	 mov         r0, r5
  00048	eb000000	 bl          Lan_SetMacRegDW

; 1409 : 
; 1410 : }

  0004c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M53537|

			 ENDP  ; |Smsc9118SetMacFilter|

	EXPORT	|UpdateFilterAndMacReg|

  00000			 AREA	 |.pdata|, PDATA
|$T53548| DCD	|$LN5@UpdateFilt|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UpdateFilterAndMacReg| PROC

; 1413 : {

  00000		 |$LN5@UpdateFilt|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M53545|
  00004	e1a05000	 mov         r5, r0

; 1414 : 	const DWORD dwLanBase = pAdapter->lan9118_data.dwLanBase;

  00008	e5954008	 ldr         r4, [r5, #8]

; 1415 : 
; 1416 : 	// Now safe to change multicasts hash registers
; 1417 : 	Lan_SetMacRegDW(dwLanBase, HASHL, pAdapter->ucNicMulticastRegs[0]);

  0000c	e5952154	 ldr         r2, [r5, #0x154]
  00010	e3a01005	 mov         r1, #5
  00014	e1a00004	 mov         r0, r4
  00018	eb000000	 bl          Lan_SetMacRegDW

; 1418 : 	Lan_SetMacRegDW(dwLanBase, HASHH, pAdapter->ucNicMulticastRegs[1]);

  0001c	e5952158	 ldr         r2, [r5, #0x158]
  00020	e3a01004	 mov         r1, #4
  00024	e1a00004	 mov         r0, r4
  00028	eb000000	 bl          Lan_SetMacRegDW

; 1419 : 
; 1420 : 	Smsc9118SetMacFilter(pAdapter);

  0002c	e1a00005	 mov         r0, r5
  00030	eb000000	 bl          Smsc9118SetMacFilter

; 1421 : }

  00034	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M53546|

			 ENDP  ; |UpdateFilterAndMacReg|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|Smsc9118QueryInformation|
	EXPORT	|??_C@_0BO@MGJEOFM@SMSC9118?5Ethernet?5Controller?4?$AA@| [ DATA ] ; `string'
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|memcpy|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T53608| DCD	|$LN89@Smsc9118Qu|
	DCD	0xc000fa02

  00000			 AREA	 |.xdata|, DATA
|$T53604| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BO@MGJEOFM@SMSC9118?5Ethernet?5Controller?4?$AA@| DCB "SMSC9118 E"
	DCB	"thernet Controller.", 0x0		; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T53604|

  00008		 |Smsc9118QueryInformation| PROC

; 1434 : {

  00008		 |$LN89@Smsc9118Qu|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dd048	 sub         sp, sp, #0x48
  00010		 |$M53605|
  00010	e58d3008	 str         r3, [sp, #8]
  00014	e1a09002	 mov         r9, r2
  00018	e1a05001	 mov         r5, r1
  0001c	e1a04000	 mov         r4, r0
  00020	e59fe3c4	 ldr         lr, [pc, #0x3C4]
  00024	e59ee000	 ldr         lr, [lr]
  00028	e58de044	 str         lr, [sp, #0x44]

; 1435 : 	PSMSC9118_ADAPTER const pAdapter = (PSMSC9118_ADAPTER)(hMiniportAdapterContext);
; 1436 : 
; 1437 : 	NDIS_STATUS StatusToReturn = NDIS_STATUS_SUCCESS;
; 1438 : 	NDIS_HARDWARE_STATUS HardwareStatus = NdisHardwareStatusReady;
; 1439 : 	ULONG ulGeneric;
; 1440 : 	USHORT usGeneric;
; 1441 : 	UCHAR ucGenericArray[6];
; 1442 : 	ULONG ulMoveBytes = (DWORD)sizeof(ULONG);
; 1443 : 	NDIS_DEVICE_POWER_STATE  PowerState;   //power management
; 1444 : 	const NDIS_MEDIUM Medium = NdisMedium802_3;
; 1445 : 	const UCHAR VendorString[] = "SMSC9118 Ethernet Controller.";

  0002c	e59f13b4	 ldr         r1, [pc, #0x3B4]
  00030	e3a03000	 mov         r3, #0
  00034	e3a0e000	 mov         lr, #0
  00038	e59da06c	 ldr         r10, [sp, #0x6C]
  0003c	e59db070	 ldr         r11, [sp, #0x70]
  00040	e28d0024	 add         r0, sp, #0x24
  00044	e3a0201e	 mov         r2, #0x1E
  00048	e3a08000	 mov         r8, #0
  0004c	e58d3004	 str         r3, [sp, #4]
  00050	e3a06004	 mov         r6, #4
  00054	e58de000	 str         lr, [sp]
  00058	eb000000	 bl          memcpy

; 1446 : 	const void *pMoveSource = (PVOID)(&ulGeneric);
; 1447 : #ifdef NDIS50_MINIPORT
; 1448 : 	NDIS_PNP_CAPABILITIES	NdisPnpCapabilities;
; 1449 : #endif
; 1450 : 
; 1451 : 	SMSC_TRACE1(DBG_INIT,"+Smsc9118QueryInformation[0x%x]\r\n", Oid);
; 1452 : 
; 1453 : 	SMSC_ASSERT(sizeof(ULONG) == 4U); /*lint !e506 !e944 !e774 */
; 1454 : 
; 1455 : 	switch (Oid)

  0005c	e59f1380	 ldr         r1, [pc, #0x380]
  00060	e28d701c	 add         r7, sp, #0x1C
  00064	e1550001	 cmp         r5, r1
  00068	8a000055	 bhi         |$LN57@Smsc9118Qu|
  0006c	0a000052	 beq         |$LN31@Smsc9118Qu|
  00070	e59f3368	 ldr         r3, [pc, #0x368]
  00074	e0452003	 sub         r2, r5, r3
  00078	e3520015	 cmp         r2, #0x15
  0007c	8a000094	 bhi         |$LN5@Smsc9118Qu|
  00080	e1a03082	 mov         r3, r2, lsl #1
  00084	e083300f	 add         r3, r3, pc
  00088	e1d330b4	 ldrh        r3, [r3, #4]
  0008c	e08ff003	 add         pc, pc, r3
  00090		 |$LN64@Smsc9118Qu|
  00090		 |$LN63@Smsc9118Qu|
  00090		 |$LN65@Smsc9118Qu|
  00090	0030		 DCW         0x30
  00092		 |$LN66@Smsc9118Qu|
  00092	003c		 DCW         0x3c
  00094		 |$LN67@Smsc9118Qu|
  00094	0050		 DCW         0x50
  00096		 |$LN68@Smsc9118Qu|
  00096	0050		 DCW         0x50
  00098		 |$LN69@Smsc9118Qu|
  00098	0064		 DCW         0x64
  0009a		 |$LN70@Smsc9118Qu|
  0009a	0078		 DCW         0x78
  0009c		 |$LN71@Smsc9118Qu|
  0009c	0090		 DCW         0x90
  0009e		 |$LN72@Smsc9118Qu|
  0009e	009c		 DCW         0x9c
  000a0		 |$LN73@Smsc9118Qu|
  000a0	00a4		 DCW         0xa4
  000a2		 |$LN74@Smsc9118Qu|
  000a2	006c		 DCW         0x6c
  000a4		 |$LN75@Smsc9118Qu|
  000a4	006c		 DCW         0x6c
  000a6		 |$LN76@Smsc9118Qu|
  000a6	00ac		 DCW         0xac
  000a8		 |$LN77@Smsc9118Qu|
  000a8	00dc		 DCW         0xdc
  000aa		 |$LN78@Smsc9118Qu|
  000aa	0240		 DCW         0x240
  000ac		 |$LN79@Smsc9118Qu|
  000ac	005c		 DCW         0x5c
  000ae		 |$LN80@Smsc9118Qu|
  000ae	00e8		 DCW         0xe8
  000b0		 |$LN81@Smsc9118Qu|
  000b0	0084		 DCW         0x84
  000b2		 |$LN82@Smsc9118Qu|
  000b2	0240		 DCW         0x240
  000b4		 |$LN83@Smsc9118Qu|
  000b4	0028		 DCW         0x28
  000b6		 |$LN84@Smsc9118Qu|
  000b6	00fc		 DCW         0xfc
  000b8		 |$LN85@Smsc9118Qu|
  000b8	0118		 DCW         0x118
  000ba		 |$LN86@Smsc9118Qu|
  000ba	0120		 DCW         0x120
  000bc		 |$LN52@Smsc9118Qu|

; 1456 : 	{
; 1457 : 		case OID_GEN_MAC_OPTIONS:
; 1458 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_MAC_OPTIONS\r\n");
; 1459 : 			ulGeneric = (ULONG)(NDIS_MAC_OPTION_TRANSFERS_NOT_PEND | 
; 1460 : 								NDIS_MAC_OPTION_RECEIVE_SERIALIZED | 
; 1461 : 								NDIS_MAC_OPTION_COPY_LOOKAHEAD_DATA | 
; 1462 : 								NDIS_MAC_OPTION_NO_LOOPBACK);

  000bc	e3a0300f	 mov         r3, #0xF

; 1463 : 			break;

  000c0	ea0000a0	 b           |$LN60@Smsc9118Qu|
  000c4		 |$LN51@Smsc9118Qu|

; 1464 : 
; 1465 : 		case OID_GEN_SUPPORTED_LIST:
; 1466 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_SUPPORTED_LIST\r\n");
; 1467 : 			pMoveSource = (PVOID)(Smsc9118SupportedOids);

  000c4	e59f7310	 ldr         r7, [pc, #0x310]

; 1468 : 			ulMoveBytes = (DWORD)sizeof (Smsc9118SupportedOids);

  000c8	e3a060a4	 mov         r6, #0xA4

; 1469 : 			break;

  000cc	ea00009e	 b           |$LN53@Smsc9118Qu|
  000d0		 |$LN50@Smsc9118Qu|

; 1470 : 
; 1471 : 		case OID_GEN_HARDWARE_STATUS:
; 1472 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_HARDWARE_STATUS\r\n");
; 1473 : 			HardwareStatus = NdisHardwareStatusReady;

  000d0	e3a03000	 mov         r3, #0
  000d4	e58d3004	 str         r3, [sp, #4]

; 1474 : 			pMoveSource = (PVOID)(&HardwareStatus);

  000d8	e28d7004	 add         r7, sp, #4

; 1475 : 			ulMoveBytes = (DWORD)sizeof (NDIS_HARDWARE_STATUS);

  000dc	e3a06004	 mov         r6, #4

; 1476 : 			break;

  000e0	ea000099	 b           |$LN53@Smsc9118Qu|
  000e4		 |$LN49@Smsc9118Qu|

; 1477 : 
; 1478 : 		case OID_GEN_MEDIA_SUPPORTED:
; 1479 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_MEDIA_SUPPORTED\r\n");
; 1480 : 			pMoveSource = (PVOID) (&Medium);

  000e4	e28d7000	 add         r7, sp, #0
  000e8	e3a06004	 mov         r6, #4
  000ec	ea000096	 b           |$LN53@Smsc9118Qu|
  000f0		 |$LN47@Smsc9118Qu|

; 1481 : 			ulMoveBytes = (DWORD)sizeof (NDIS_MEDIUM);
; 1482 : 			break;
; 1483 : 
; 1484 : 		case OID_GEN_MEDIA_IN_USE:
; 1485 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_MEDIA_IN_USE\r\n");
; 1486 : 			pMoveSource = (PVOID) (&Medium);
; 1487 : 			ulMoveBytes = (DWORD)sizeof (NDIS_MEDIUM);
; 1488 : 			break;
; 1489 : 
; 1490 : 		case OID_GEN_CURRENT_LOOKAHEAD:
; 1491 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_CURRENT_LOOKAHEAD\r\n");
; 1492 : 			ulGeneric = (DWORD)pAdapter->ulMaxLookAhead;

  000f0	e5943150	 ldr         r3, [r4, #0x150]

; 1493 : 			break;

  000f4	ea000093	 b           |$LN60@Smsc9118Qu|
  000f8		 |$LN46@Smsc9118Qu|

; 1494 : 
; 1495 : 		case OID_GEN_MAXIMUM_LOOKAHEAD:
; 1496 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_MAXIMUM_LOOKAHEAD\r\n");
; 1497 : 			ulGeneric = (DWORD)MAX_LOOKAHEAD;

  000f8	e3a03e5e	 mov         r3, #0x5E, 28

; 1498 : 			break;

  000fc	ea000091	 b           |$LN60@Smsc9118Qu|
  00100		 |$LN45@Smsc9118Qu|
  00100	e3a03c05	 mov         r3, #5, 24

; 1499 : 
; 1500 : 		case OID_GEN_RECEIVE_BLOCK_SIZE:
; 1501 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_RECEIVE_BLOCK_SIZE\r\n");
; 1502 : 			ulGeneric = (ULONG)MAX_PACKET;

  00104	e38330ee	 orr         r3, r3, #0xEE

; 1503 : 			break;

  00108	ea00008e	 b           |$LN60@Smsc9118Qu|
  0010c		 |$LN44@Smsc9118Qu|
  0010c	e3a03c05	 mov         r3, #5, 24

; 1504 : 
; 1505 : 		case OID_GEN_MAXIMUM_FRAME_SIZE:
; 1506 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_MAXIMUM_FRAME_SIZE\r\n");
; 1507 : 			ulGeneric = (ULONG)(1514U - ETHER_HEADER_SIZE);

  00110	e38330dc	 orr         r3, r3, #0xDC

; 1508 : 			break;

  00114	ea00008b	 b           |$LN60@Smsc9118Qu|
  00118		 |$LN43@Smsc9118Qu|
  00118	e3a03c05	 mov         r3, #5, 24

; 1509 : 
; 1510 : 		case OID_GEN_MAXIMUM_TOTAL_SIZE:
; 1511 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_MAXIMUM_TOTAL_SIZE\r\n");
; 1512 : 			ulGeneric = 1514UL;

  0011c	e38330ea	 orr         r3, r3, #0xEA

; 1513 : 			break;

  00120	ea000088	 b           |$LN60@Smsc9118Qu|
  00124		 |$LN42@Smsc9118Qu|
  00124	e3a0393d	 mov         r3, #0x3D, 18

; 1514 : 
; 1515 : 		case OID_GEN_LINK_SPEED:
; 1516 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_LINK_SPEED\r\n");
; 1517 : 			ulGeneric = 1000000UL;

  00128	e3833d09	 orr         r3, r3, #9, 26

; 1518 : 			break;

  0012c	ea000085	 b           |$LN60@Smsc9118Qu|
  00130		 |$LN41@Smsc9118Qu|

; 1519 : 
; 1520 : 		case OID_GEN_TRANSMIT_BUFFER_SPACE:
; 1521 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_TRANSMIT_BUFFER_SPACE\r\n");
; 1522 : 			ulGeneric = TX_DATA_FIFO_SIZE;

  00130	e3a03c12	 mov         r3, #0x12, 24

; 1523 : 			break;

  00134	ea000083	 b           |$LN60@Smsc9118Qu|
  00138		 |$LN40@Smsc9118Qu|

; 1524 : 
; 1525 : 		case OID_GEN_RECEIVE_BUFFER_SPACE:
; 1526 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_RECEIVE_BUFFER_SPACE\r\n");
; 1527 : 			ulGeneric = RX_DATA_FIFO_SIZE;

  00138	e3a03da5	 mov         r3, #0xA5, 26

; 1528 : 			break;

  0013c	ea000081	 b           |$LN60@Smsc9118Qu|
  00140		 |$LN38@Smsc9118Qu|

; 1529 : 
; 1530 : 		case OID_GEN_TRANSMIT_BLOCK_SIZE:
; 1531 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_TRANSMIT_BLOCK_SIZE\r\n");
; 1532 : 			ulGeneric = (ULONG)MAX_PACKET;
; 1533 : 			break;
; 1534 : 
; 1535 : 		case OID_GEN_VENDOR_ID:
; 1536 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_VENDOR_ID\r\n");
; 1537 : 			NdisMoveMemory ((PVOID)&ulGeneric, pAdapter->ucStationAddress, 3U);

  00140	e2843c1a	 add         r3, r4, #0x1A, 24
  00144	e1d339b0	 ldrh        r3, [r3, #0x90]
  00148	e2842a01	 add         r2, r4, #1, 20
  0014c	e5d22a92	 ldrb        r2, [r2, #0xA92]

; 1538 : 			ulGeneric &= 0xFFFFFF00UL;
; 1539 : 			ulGeneric |= 0x01UL;
; 1540 : 			pMoveSource = (PVOID)(&ulGeneric);

  00150	e28d701c	 add         r7, sp, #0x1C
  00154	e1cd31bc	 strh        r3, [sp, #0x1C]
  00158	e5cd201e	 strb        r2, [sp, #0x1E]
  0015c	e59d301c	 ldr         r3, [sp, #0x1C]

; 1541 : 			ulMoveBytes = (DWORD)sizeof (ulGeneric);

  00160	e3a06004	 mov         r6, #4
  00164	e3c330ff	 bic         r3, r3, #0xFF
  00168	e3833001	 orr         r3, r3, #1

; 1542 : 			break;

  0016c	ea000075	 b           |$LN60@Smsc9118Qu|
  00170		 |$LN37@Smsc9118Qu|

; 1543 : 
; 1544 : 		case OID_GEN_VENDOR_DESCRIPTION:
; 1545 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_VENDOR_DESCRIPTION\r\n");
; 1546 : 			pMoveSource = VendorString;

  00170	e28d7024	 add         r7, sp, #0x24

; 1547 : 			ulMoveBytes = (DWORD)sizeof (VendorString);

  00174	e3a0601e	 mov         r6, #0x1E

; 1548 : 			break;

  00178	ea000073	 b           |$LN53@Smsc9118Qu|
  0017c		 |$LN36@Smsc9118Qu|

; 1549 : 
; 1550 : 		case OID_GEN_DRIVER_VERSION:
; 1551 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_DRIVER_VERSION\r\n");
; 1552 : 			usGeneric = (USHORT)((SMSC9118_NDIS_MAJOR_VERSION << 8) | SMSC9118_NDIS_MINOR_VERSION);

  0017c	e3a03c05	 mov         r3, #5, 24
  00180		 |$LN62@Smsc9118Qu|
  00180	e1cd31bc	 strh        r3, [sp, #0x1C]

; 1553 : 			pMoveSource = (PVOID)(&usGeneric);

  00184	e28d701c	 add         r7, sp, #0x1C

; 1554 : 			ulMoveBytes = (DWORD)sizeof (usGeneric);

  00188	e3a06002	 mov         r6, #2

; 1555 : 			break;

  0018c	ea00006e	 b           |$LN53@Smsc9118Qu|
  00190		 |$LN26@Smsc9118Qu|

; 1606 : 
; 1607 : 		case OID_GEN_MEDIA_CONNECT_STATUS:
; 1608 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_MEDIA_CONNECT_STATUS\r\n");
; 1609 : 			if (LinkIndicate(pAdapter) == LINK_NO_LINK)

  00190	e1a00004	 mov         r0, r4
  00194	eb000000	 bl          LinkIndicate
  00198	e3500000	 cmp         r0, #0

; 1610 : 			{
; 1611 : 				ulGeneric = (ULONG)NdisMediaStateDisconnected; /*lint !e930 */

  0019c	03a03001	 moveq       r3, #1
  001a0	0a000068	 beq         |$LN60@Smsc9118Qu|

; 1612 : 			}
; 1613 : 			else
; 1614 : 			{
; 1615 : 				ulGeneric = (ULONG)NdisMediaStateConnected; /*lint !e930 */

  001a4	e3a03000	 mov         r3, #0

; 1616 : 			}
; 1617 : 			break;

  001a8	ea000066	 b           |$LN60@Smsc9118Qu|
  001ac		 |$LN23@Smsc9118Qu|

; 1618 : 
; 1619 : 		case OID_GEN_MAXIMUM_SEND_PACKETS:
; 1620 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_MAXIMUM_SEND_PACKETS\r\n");
; 1621 : 			ulGeneric = MAX_NUM_PACKETS_PER_SEND;

  001ac	e3a03003	 mov         r3, #3

; 1622 : 			break;

  001b0	ea000064	 b           |$LN60@Smsc9118Qu|
  001b4		 |$LN22@Smsc9118Qu|

; 1623 : 
; 1624 : 		case OID_GEN_VENDOR_DRIVER_VERSION:
; 1625 : 			usGeneric = (USHORT)DRIVER_VERSION;

  001b4	e3a03e11	 mov         r3, #0x11, 28

; 1626 : 			pMoveSource = (PVOID)(&usGeneric);
; 1627 : 			ulMoveBytes = (DWORD)sizeof (usGeneric);
; 1628 : 			break;

  001b8	eafffff0	 b           |$LN62@Smsc9118Qu|
  001bc		 |$LN31@Smsc9118Qu|

; 1581 : 
; 1582 : 		case OID_GEN_XMIT_OK:
; 1583 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_XMIT_OK\r\n");
; 1584 : 			ulGeneric = (pAdapter->ulFramesXmitGood);

  001bc	e5943128	 ldr         r3, [r4, #0x128]

; 1585 : 			break;

  001c0	ea000060	 b           |$LN60@Smsc9118Qu|
  001c4		 |$LN57@Smsc9118Qu|

; 1446 : 	const void *pMoveSource = (PVOID)(&ulGeneric);
; 1447 : #ifdef NDIS50_MINIPORT
; 1448 : 	NDIS_PNP_CAPABILITIES	NdisPnpCapabilities;
; 1449 : #endif
; 1450 : 
; 1451 : 	SMSC_TRACE1(DBG_INIT,"+Smsc9118QueryInformation[0x%x]\r\n", Oid);
; 1452 : 
; 1453 : 	SMSC_ASSERT(sizeof(ULONG) == 4U); /*lint !e506 !e944 !e774 */
; 1454 : 
; 1455 : 	switch (Oid)

  001c4	e59f320c	 ldr         r3, [pc, #0x20C]
  001c8	e1550003	 cmp         r5, r3
  001cc	8a00002c	 bhi         |$LN58@Smsc9118Qu|
  001d0	0a000029	 beq         |$LN32@Smsc9118Qu|
  001d4	e59f31f8	 ldr         r3, [pc, #0x1F8]
  001d8	e1550003	 cmp         r5, r3
  001dc	0a000024	 beq         |$LN30@Smsc9118Qu|
  001e0	e59f31e8	 ldr         r3, [pc, #0x1E8]
  001e4	e1550003	 cmp         r5, r3
  001e8	0a00001f	 beq         |$LN29@Smsc9118Qu|
  001ec	e3a03802	 mov         r3, #2, 16
  001f0	e3833f41	 orr         r3, r3, #0x41, 30
  001f4	e1550003	 cmp         r5, r3
  001f8	0a000019	 beq         |$LN28@Smsc9118Qu|
  001fc	e59f31c8	 ldr         r3, [pc, #0x1C8]
  00200	e1550003	 cmp         r5, r3
  00204	0a000014	 beq         |$LN27@Smsc9118Qu|
  00208	e59f31b8	 ldr         r3, [pc, #0x1B8]
  0020c	e1550003	 cmp         r5, r3
  00210	0a000009	 beq         |$LN34@Smsc9118Qu|
  00214	e59f31a8	 ldr         r3, [pc, #0x1A8]
  00218	e1550003	 cmp         r5, r3
  0021c	0a000006	 beq         |$LN34@Smsc9118Qu|
  00220	e59f3198	 ldr         r3, [pc, #0x198]
  00224	e1550003	 cmp         r5, r3
  00228	1a000029	 bne         |$LN5@Smsc9118Qu|

; 1570 : 
; 1571 : 		case OID_802_3_MULTICAST_LIST:
; 1572 : 			SMSC_TRACE0(DBG_INIT,"  OID_802_3_MULTICAST_LIST\r\n");
; 1573 : 			pMoveSource = (PVOID)(pAdapter->ucAddresses);

  0022c	e2843c19	 add         r3, r4, #0x19, 24
  00230	e28370d0	 add         r7, r3, #0xD0

; 1574 : 			ulMoveBytes = (DWORD)(DEFAULT_MULTICASTLISTMAX*ETHER_LENGTH_OF_ADDRESS);

  00234	e3a060c0	 mov         r6, #0xC0

; 1575 : 			break;

  00238	ea000043	 b           |$LN53@Smsc9118Qu|
  0023c		 |$LN34@Smsc9118Qu|

; 1556 : 
; 1557 : 		case OID_802_3_PERMANENT_ADDRESS:
; 1558 : 			SMSC_TRACE0(DBG_INIT,"  OID_802_3_PERMANENT_ADDRESS\r\n");
; 1559 : 			NdisMoveMemory ((PCHAR)ucGenericArray, pAdapter->ucStationAddress, ETHER_LENGTH_OF_ADDRESS);
; 1560 : 			pMoveSource = (PVOID)ucGenericArray;
; 1561 : 			ulMoveBytes = (DWORD)sizeof (pAdapter->ucStationAddress);
; 1562 : 			break;
; 1563 : 
; 1564 : 		case OID_802_3_CURRENT_ADDRESS:
; 1565 : 			SMSC_TRACE0(DBG_INIT,"  OID_802_3_CURRENT_ADDRESS\r\n");
; 1566 : 			NdisMoveMemory ((PCHAR)ucGenericArray, pAdapter->ucStationAddress, ETHER_LENGTH_OF_ADDRESS);

  0023c	e2842c1a	 add         r2, r4, #0x1A, 24
  00240	e1d229b4	 ldrh        r2, [r2, #0x94]
  00244	e2843a01	 add         r3, r4, #1, 20
  00248	e5933a90	 ldr         r3, [r3, #0xA90]

; 1567 : 			pMoveSource = (PVOID)ucGenericArray;

  0024c	e28d701c	 add         r7, sp, #0x1C
  00250	e1cd22b0	 strh        r2, [sp, #0x20]

; 1568 : 			ulMoveBytes = (DWORD)sizeof (pAdapter->ucStationAddress);

  00254	e3a06006	 mov         r6, #6

; 1569 : 			break;

  00258	ea00003a	 b           |$LN60@Smsc9118Qu|
  0025c		 |$LN27@Smsc9118Qu|

; 1601 : 
; 1602 : 		case OID_GEN_RCV_NO_BUFFER:
; 1603 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_RCV_NO_BUFFER\r\n");
; 1604 : 			ulGeneric = (pAdapter->ulMissedPackets);

  0025c	e5943144	 ldr         r3, [r4, #0x144]

; 1605 : 			break;

  00260	ea000038	 b           |$LN60@Smsc9118Qu|
  00264		 |$LN28@Smsc9118Qu|

; 1596 : 
; 1597 : 		case OID_GEN_RCV_ERROR:
; 1598 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_RCV_ERROR\r\n");
; 1599 : 			ulGeneric = (pAdapter->ulFramesRcvBad);

  00264	e5943148	 ldr         r3, [r4, #0x148]

; 1600 : 			break;

  00268	ea000036	 b           |$LN60@Smsc9118Qu|
  0026c		 |$LN29@Smsc9118Qu|

; 1591 : 
; 1592 : 		case OID_GEN_XMIT_ERROR:
; 1593 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_XMIT_ERROR\r\n");
; 1594 : 			ulGeneric = (pAdapter->ulFramesXmitBad);

  0026c	e5943130	 ldr         r3, [r4, #0x130]

; 1595 : 			break;

  00270	ea000034	 b           |$LN60@Smsc9118Qu|
  00274		 |$LN30@Smsc9118Qu|

; 1586 : 
; 1587 : 		case OID_GEN_RCV_OK:
; 1588 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_RCV_OK\r\n");
; 1589 : 			ulGeneric = (pAdapter->ulFramesRcvGood);

  00274	e594312c	 ldr         r3, [r4, #0x12C]

; 1590 : 			break;

  00278	ea000032	 b           |$LN60@Smsc9118Qu|
  0027c		 |$LN32@Smsc9118Qu|

; 1576 : 
; 1577 : 		case OID_802_3_MAXIMUM_LIST_SIZE:
; 1578 : 			SMSC_TRACE0(DBG_INIT,"  OID_802_3_MAXIMUM_LIST_SIZE\r\n");
; 1579 : 			ulGeneric = (DWORD)DEFAULT_MULTICASTLISTMAX;

  0027c	e3a03020	 mov         r3, #0x20

; 1580 : 			break;

  00280	ea000030	 b           |$LN60@Smsc9118Qu|
  00284		 |$LN58@Smsc9118Qu|

; 1446 : 	const void *pMoveSource = (PVOID)(&ulGeneric);
; 1447 : #ifdef NDIS50_MINIPORT
; 1448 : 	NDIS_PNP_CAPABILITIES	NdisPnpCapabilities;
; 1449 : #endif
; 1450 : 
; 1451 : 	SMSC_TRACE1(DBG_INIT,"+Smsc9118QueryInformation[0x%x]\r\n", Oid);
; 1452 : 
; 1453 : 	SMSC_ASSERT(sizeof(ULONG) == 4U); /*lint !e506 !e944 !e774 */
; 1454 : 
; 1455 : 	switch (Oid)

  00284	e59f3130	 ldr         r3, [pc, #0x130]
  00288	e1550003	 cmp         r5, r3
  0028c	0a00002c	 beq         |$LN21@Smsc9118Qu|
  00290	e59f3120	 ldr         r3, [pc, #0x120]
  00294	e1550003	 cmp         r5, r3
  00298	0a000027	 beq         |$LN20@Smsc9118Qu|
  0029c	e59f3110	 ldr         r3, [pc, #0x110]
  002a0	e1550003	 cmp         r5, r3
  002a4	0a000022	 beq         |$LN19@Smsc9118Qu|
  002a8	e59f3100	 ldr         r3, [pc, #0x100]
  002ac	e1550003	 cmp         r5, r3
  002b0	0a000010	 beq         |$LN18@Smsc9118Qu|
  002b4	e59f30f0	 ldr         r3, [pc, #0xF0]
  002b8	e1550003	 cmp         r5, r3
  002bc	0a000022	 beq         |$LN53@Smsc9118Qu|
  002c0	e59f30e0	 ldr         r3, [pc, #0xE0]
  002c4	e1550003	 cmp         r5, r3
  002c8	0a000007	 beq         |$LN8@Smsc9118Qu|
  002cc	e37500ff	 cmn         r5, #0xFF
  002d0	0a000002	 beq         |$LN6@Smsc9118Qu|
  002d4		 |$LN5@Smsc9118Qu|
  002d4	e3a0315f	 mov         r3, #0x5F, 2

; 1695 : 		default:
; 1696 : 			SMSC_TRACE0(DBG_INIT,"  Unrecognized OID\r\n");
; 1697 : 			StatusToReturn = NDIS_STATUS_INVALID_OID;

  002d8	e3838801	 orr         r8, r3, #1, 16

; 1698 : 			break;

  002dc	ea00002b	 b           |$LN1@Smsc9118Qu|
  002e0		 |$LN6@Smsc9118Qu|

; 1691 : 
; 1692 : 		case OID_NDIS_SMSC_DUMP_ALL_REGS:
; 1693 : 			DumpAllRegs(pAdapter);

  002e0	e1a00004	 mov         r0, r4
  002e4	eb000000	 bl          DumpAllRegs

; 1694 : 			break;

  002e8	ea000017	 b           |$LN53@Smsc9118Qu|
  002ec		 |$LN8@Smsc9118Qu|

; 1660 : 
; 1661 : 		case OID_PNP_QUERY_POWER:
; 1662 : 			SMSC_TRACE0(DBG_POWER,"  OID_PNP_QUERY_POWER\r\n");
; 1663 : 			PowerState = *(PDEVICE_POWER_STATE)pInformationBuffer;
; 1664 : 			if(PowerState == NdisDeviceStateD0) {
; 1665 : 				SMSC_TRACE0(DBG_POWER, "Device Power State = NdisDeviceStateD0.\r\n");
; 1666 : 			}
; 1667 : 			else if(PowerState == NdisDeviceStateD1) {
; 1668 : 				SMSC_TRACE0(DBG_POWER, "Device Power State = NdisDeviceStateD1.\r\n");
; 1669 : 			}
; 1670 : 			else if(PowerState == NdisDeviceStateD2) {
; 1671 : 				SMSC_TRACE0(DBG_POWER, "Device Power State = NdisDeviceStateD2.\r\n");
; 1672 : 			}
; 1673 : 			else if(PowerState == NdisDeviceStateD3) {
; 1674 : 				SMSC_TRACE0(DBG_POWER, "Device Power State = NdisDeviceStateD3.\r\n");
; 1675 : 			}
; 1676 : 			else {
; 1677 : 				SMSC_TRACE0(DBG_POWER, "Unkown Device Power State.\r\n");
; 1678 : 			}
; 1679 : 			break;
; 1680 : 
; 1681 : 		case OID_PNP_ENABLE_WAKE_UP:
; 1682 : 			SMSC_TRACE0(DBG_POWER,"  OID_PNP_ENABLE_WAKE_UP (QUERY)\r\n");
; 1683 : 			ulGeneric = pAdapter->dwWakeUpSource;

  002ec	e2843a01	 add         r3, r4, #1, 20
  002f0	e5933ad0	 ldr         r3, [r3, #0xAD0]

; 1684 : 			if((ulGeneric & (DWORD)(NDIS_PNP_WAKE_UP_LINK_CHANGE | NDIS_PNP_WAKE_UP_MAGIC_PACKET | NDIS_PNP_WAKE_UP_PATTERN_MATCH)) ==
; 1685 : 			   (DWORD)(NDIS_PNP_WAKE_UP_LINK_CHANGE | NDIS_PNP_WAKE_UP_MAGIC_PACKET | NDIS_PNP_WAKE_UP_PATTERN_MATCH)
; 1686 : 			  )
; 1687 : 			{
; 1688 : 				SMSC_WARNING0("NDIS_PNP_WAKE_UP_LINK_CHANGE is set with NDIS_PNP_WAKE_UP_MAGIC_PACKET, NDIS_PNP_WAKE_UP_PATTERN_MATCH.\r\n");
; 1689 : 			}
; 1690 : 			break;				  

  002f4	ea000013	 b           |$LN60@Smsc9118Qu|
  002f8		 |$LN18@Smsc9118Qu|

; 1644 : 
; 1645 : 		//
; 1646 : 		//	Power Management
; 1647 : 		//
; 1648 : 		case OID_PNP_CAPABILITIES:
; 1649 : 			SMSC_TRACE0(DBG_POWER,"  OID_PNP_CAPABILITIES\r\n");
; 1650 : 			NdisZeroMemory(&NdisPnpCapabilities, sizeof(NdisPnpCapabilities));
; 1651 :             NdisPnpCapabilities.WakeUpCapabilities.MinPatternWakeUp = 
; 1652 :                 pAdapter->WakeUpCap.MinPatternWakeUp;

  002f8	e2843a01	 add         r3, r4, #1, 20
  002fc	e5932b88	 ldr         r2, [r3, #0xB88]

; 1653 :             NdisPnpCapabilities.WakeUpCapabilities.MinLinkChangeWakeUp =
; 1654 :                 pAdapter->WakeUpCap.MinLinkChangeWakeUp;

  00300	e5931b8c	 ldr         r1, [r3, #0xB8C]

; 1655 :             NdisPnpCapabilities.WakeUpCapabilities.MinMagicPacketWakeUp =
; 1656 :                 pAdapter->WakeUpCap.MinMagicPacketWakeUp;

  00304	e5933b84	 ldr         r3, [r3, #0xB84]
  00308	e3a00000	 mov         r0, #0
  0030c	e58d0010	 str         r0, [sp, #0x10]
  00310	e58d0014	 str         r0, [sp, #0x14]
  00314	e58d0018	 str         r0, [sp, #0x18]
  00318	e58d3010	 str         r3, [sp, #0x10]
  0031c	e58d000c	 str         r0, [sp, #0xC]
  00320	e58d2014	 str         r2, [sp, #0x14]
  00324	e58d1018	 str         r1, [sp, #0x18]

; 1657 : 			pMoveSource = (PVOID)&NdisPnpCapabilities; 

  00328	e28d700c	 add         r7, sp, #0xC

; 1658 : 			ulMoveBytes = (DWORD)sizeof(NdisPnpCapabilities);

  0032c	e3a06010	 mov         r6, #0x10

; 1659 : 			break;

  00330	ea000005	 b           |$LN53@Smsc9118Qu|
  00334		 |$LN19@Smsc9118Qu|

; 1639 : 
; 1640 : 		case OID_802_3_XMIT_MORE_COLLISIONS:
; 1641 : 			SMSC_TRACE0(DBG_INIT,"  OID_802_3_XMIT_MORE_COLLISIONS\r\n");
; 1642 : 			ulGeneric = (pAdapter->ulFramesXmitManyCollisions);

  00334	e5943138	 ldr         r3, [r4, #0x138]

; 1643 : 			break;

  00338	ea000002	 b           |$LN60@Smsc9118Qu|
  0033c		 |$LN20@Smsc9118Qu|

; 1633 : 			break;
; 1634 : 
; 1635 : 		case OID_802_3_XMIT_ONE_COLLISION:
; 1636 : 			SMSC_TRACE0(DBG_INIT,"  OID_802_3_XMIT_ONE_COLLISION\r\n");
; 1637 : 			ulGeneric = (pAdapter->ulFramesXmitOneCollision);

  0033c	e5943134	 ldr         r3, [r4, #0x134]

; 1638 : 			break;

  00340	ea000000	 b           |$LN60@Smsc9118Qu|
  00344		 |$LN21@Smsc9118Qu|

; 1629 : 
; 1630 : 		case OID_802_3_RCV_ERROR_ALIGNMENT:
; 1631 : 			SMSC_TRACE0(DBG_INIT,"  OID_802_3_RCV_ERROR_ALIGNMENT\r\n");
; 1632 : 			ulGeneric = (pAdapter->ulFrameAlignmentErrors);

  00344	e594313c	 ldr         r3, [r4, #0x13C]
  00348		 |$LN60@Smsc9118Qu|
  00348	e58d301c	 str         r3, [sp, #0x1C]
  0034c		 |$LN53@Smsc9118Qu|

; 1699 : 	}
; 1700 : 
; 1701 : 	if (StatusToReturn == NDIS_STATUS_SUCCESS)
; 1702 : 	{
; 1703 : 		if (ulMoveBytes > ulInformationBufferLength)

  0034c	e59d3008	 ldr         r3, [sp, #8]
  00350	e1560003	 cmp         r6, r3
  00354	83a03153	 movhi       r3, #0x53, 2

; 1704 : 		{
; 1705 : 			SMSC_WARNING0("  Invalid Buffer Length\r\n");
; 1706 : 			*pulBytesNeeded = ulMoveBytes;
; 1707 : 			StatusToReturn = NDIS_STATUS_INVALID_LENGTH;

  00358	83838801	 orrhi       r8, r3, #1, 16
  0035c	858b6000	 strhi       r6, [r11]
  00360	8a00000a	 bhi         |$LN1@Smsc9118Qu|

; 1708 : 		}
; 1709 : 		else
; 1710 : 		{
; 1711 : 			SMSC_TRACE0(DBG_INIT,"  Information Moved Successfully\r\n");
; 1712 : 			if ((ulMoveBytes > 0x00UL) && (pInformationBuffer != NULL)) {

  00364	e3560000	 cmp         r6, #0
  00368	0a000008	 beq         |$LN1@Smsc9118Qu|
  0036c	e3590000	 cmp         r9, #0
  00370	0a000006	 beq         |$LN1@Smsc9118Qu|

; 1713 : 				NdisMoveMemory (pInformationBuffer, pMoveSource, (UINT)ulMoveBytes);

  00374	e1a02006	 mov         r2, r6
  00378	e1a01007	 mov         r1, r7
  0037c	e1a00009	 mov         r0, r9
  00380	eb000000	 bl          memcpy

; 1714 : 				(*pulBytesWritten) += ulMoveBytes;

  00384	e59a3000	 ldr         r3, [r10]
  00388	e0833006	 add         r3, r3, r6
  0038c	e58a3000	 str         r3, [r10]
  00390		 |$LN1@Smsc9118Qu|

; 1715 : 			}
; 1716 : 		}
; 1717 : 	}
; 1718 : 
; 1719 : 	// Make Lint Happy
; 1720 : 	ulInformationBufferLength = ulInformationBufferLength;
; 1721 : 
; 1722 : 	SMSC_TRACE0(DBG_INIT,"-Smsc9118QueryInformation\r\n");
; 1723 : 	return (StatusToReturn);

  00390	e59d0044	 ldr         r0, [sp, #0x44]
  00394	eb000000	 bl          __security_check_cookie

; 1724 : }

  00398	e1a00008	 mov         r0, r8
  0039c	e28dd048	 add         sp, sp, #0x48
  003a0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  003a4	e12fff1e	 bx          lr
  003a8		 |$LN90@Smsc9118Qu|
  003a8		 |$LN91@Smsc9118Qu|
  003a8	fd010106	 DCD         0xfd010106
  003ac		 |$LN92@Smsc9118Qu|
  003ac	fd010102	 DCD         0xfd010102
  003b0		 |$LN93@Smsc9118Qu|
  003b0	fd010100	 DCD         0xfd010100
  003b4		 |$LN94@Smsc9118Qu|
  003b4	01020103	 DCD         0x1020103
  003b8		 |$LN95@Smsc9118Qu|
  003b8	01020102	 DCD         0x1020102
  003bc		 |$LN96@Smsc9118Qu|
  003bc	01020101	 DCD         0x1020101
  003c0		 |$LN97@Smsc9118Qu|
  003c0	01010103	 DCD         0x1010103
  003c4		 |$LN98@Smsc9118Qu|
  003c4	01010102	 DCD         0x1010102
  003c8		 |$LN99@Smsc9118Qu|
  003c8	01010101	 DCD         0x1010101
  003cc		 |$LN100@Smsc9118Qu|
  003cc	00020105	 DCD         0x20105
  003d0		 |$LN101@Smsc9118Qu|
  003d0	00020103	 DCD         0x20103
  003d4		 |$LN102@Smsc9118Qu|
  003d4	00020102	 DCD         0x20102
  003d8		 |$LN103@Smsc9118Qu|
  003d8	01010104	 DCD         0x1010104
  003dc		 |$LN104@Smsc9118Qu|
  003dc	00000000	 DCD         |Smsc9118SupportedOids|
  003e0		 |$LN105@Smsc9118Qu|
  003e0	00010101	 DCD         0x10101
  003e4		 |$LN106@Smsc9118Qu|
  003e4	00020101	 DCD         0x20101
  003e8		 |$LN107@Smsc9118Qu|
  003e8	00000000	 DCD         |??_C@_0BO@MGJEOFM@SMSC9118?5Ethernet?5Controller?4?$AA@|
  003ec		 |$LN108@Smsc9118Qu|
  003ec	00000000	 DCD         |__security_cookie|
  003f0		 |$M53606|

			 ENDP  ; |Smsc9118QueryInformation|

	EXPORT	|ComputeCrc|

  00000			 AREA	 |.pdata|, PDATA
|$T53646| DCD	|$LN16@ComputeCrc|
	DCD	0x40002201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ComputeCrc| PROC

; 1733 : {

  00000		 |$LN16@ComputeCrc|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M53643|
  00004	e3510000	 cmp         r1, #0

; 1734 : 	UINT i;
; 1735 : 	DWORD crc = 0xFFFFFFFFUL;

  00008	e3e0e000	 mvn         lr, #0

; 1736 : 	DWORD result = 0UL;
; 1737 : 	const DWORD poly = 0xEDB88320UL;
; 1738 : 
; 1739 : 	SMSC_TRACE0(DBG_INIT,"+ComputeCrc\r\n");
; 1740 : 
; 1741 : 	SMSC_TRACE1(DBG_INIT,"uiLength=%d\r\n", uiLength);
; 1742 : 
; 1743 : 	for(i=0U; i<uiLength; i++) 

  0000c	e3a02000	 mov         r2, #0
  00010	0a00000c	 beq         |$LN5@ComputeCrc|
  00014	e59f6068	 ldr         r6, [pc, #0x68]
  00018		 |$LL7@ComputeCrc|

; 1744 : 	{
; 1745 : 		int bit;
; 1746 : 		DWORD data=((DWORD)pBuffer[i]);

  00018	e7d24000	 ldrb        r4, [r2, +r0]
  0001c	e3a05008	 mov         r5, #8
  00020		 |$LL4@ComputeCrc|

; 1747 : 		for(bit=0; bit<8; bit++) 
; 1748 : 		{
; 1749 : 			const DWORD p = (crc^((DWORD)data))&1UL;

  00020	e024300e	 eor         r3, r4, lr
  00024	e2133001	 ands        r3, r3, #1

; 1750 : 			crc >>= 1;

  00028	e1a0e0ae	 mov         lr, lr, lsr #1

; 1751 : 			if(p != 0UL) {
; 1752 : 				crc ^= poly;

  0002c	102ee006	 eorne       lr, lr, r6

; 1753 : 			}
; 1754 : 			data >>=1;

  00030	e2555001	 subs        r5, r5, #1
  00034	e1a040a4	 mov         r4, r4, lsr #1
  00038	1afffff8	 bne         |$LL4@ComputeCrc|
  0003c	e2822001	 add         r2, r2, #1
  00040	e1520001	 cmp         r2, r1
  00044	3afffff3	 bcc         |$LL7@ComputeCrc|
  00048		 |$LN5@ComputeCrc|

; 1755 : 		}
; 1756 : 	}
; 1757 : 	result=((crc&0x01UL)<<5)|
; 1758 : 		   ((crc&0x02UL)<<3)|
; 1759 : 		   ((crc&0x04UL)<<1)|
; 1760 : 		   ((crc&0x08UL)>>1)|
; 1761 : 		   ((crc&0x10UL)>>3)|
; 1762 : 		   ((crc&0x20UL)>>5);
; 1763 : 
; 1764 : 	SMSC_TRACE0(DBG_INIT,"-ComputeCrc\r\n");
; 1765 : 	return (result);

  00048	e1a0312e	 mov         r3, lr, lsr #2
  0004c	e2032008	 and         r2, r3, #8
  00050	e20e3010	 and         r3, lr, #0x10
  00054	e1820003	 orr         r0, r2, r3
  00058	e20e3002	 and         r3, lr, #2
  0005c	e20e1001	 and         r1, lr, #1
  00060	e20e2008	 and         r2, lr, #8
  00064	e1831101	 orr         r1, r3, r1, lsl #2
  00068	e20e3004	 and         r3, lr, #4
  0006c	e1822120	 orr         r2, r2, r0, lsr #2
  00070	e1833101	 orr         r3, r3, r1, lsl #2
  00074	e1a020a2	 mov         r2, r2, lsr #1
  00078	e1820083	 orr         r0, r2, r3, lsl #1

; 1766 : 
; 1767 : }

  0007c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN17@ComputeCrc|
  00084		 |$LN18@ComputeCrc|
  00084	edb88320	 DCD         0xedb88320
  00088		 |$M53644|

			 ENDP  ; |ComputeCrc|

	EXPORT	|GetMulticastBit|

  00000			 AREA	 |.pdata|, PDATA
|$T53659| DCD	|$LN5@GetMultica|
	DCD	0x40000e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetMulticastBit| PROC

; 1776 : {

  00000		 |$LN5@GetMultica|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M53656|
  00004	e1a05002	 mov         r5, r2
  00008	e1a04001	 mov         r4, r1

; 1777 : 	DWORD uiBitNumber;
; 1778 : 
; 1779 : 	SMSC_TRACE0(DBG_INIT,"+GetMulticastBit\r\n");
; 1780 : 
; 1781 : 	uiBitNumber = ComputeCrc(ucAddress, (UINT)ETHER_LENGTH_OF_ADDRESS);

  0000c	e3a01006	 mov         r1, #6
  00010	eb000000	 bl          ComputeCrc

; 1782 : 	*pTable = (UCHAR)(((uiBitNumber & 0x20UL) >> 5) & 1UL);

  00014	e1a03d00	 mov         r3, r0, lsl #26

; 1783 : 	*pValue = (DWORD)(1UL << (uiBitNumber & 0x1FUL));

  00018	e200001f	 and         r0, r0, #0x1F
  0001c	e3a02001	 mov         r2, #1
  00020	e1a00012	 mov         r0, r2, lsl r0
  00024	e1a03fa3	 mov         r3, r3, lsr #31
  00028	e5c43000	 strb        r3, [r4]
  0002c	e5850000	 str         r0, [r5]

; 1784 : 
; 1785 : 	SMSC_TRACE0(DBG_INIT,"-GetMulticastBit\r\n");
; 1786 : }

  00030	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M53657|

			 ENDP  ; |GetMulticastBit|

	EXPORT	|DisableMacRxEn|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T53687| DCD	|$LN22@DisableMac|
	DCD	0x40003002
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DisableMacRxEn| PROC

; 1789 : {

  00000		 |$LN22@DisableMac|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M53684|
  00008	e1a04000	 mov         r4, r0

; 1790 : 	volatile DWORD	dwReg;
; 1791 : 
; 1792 :     SMSC_TRACE0(DBG_INIT,"--- Disableing MacRxEn\r\n");
; 1793 : 
; 1794 : 	// Disable RX 
; 1795 : 	dwReg = Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR);

  0000c	e5940008	 ldr         r0, [r4, #8]
  00010	e3a01001	 mov         r1, #1
  00014	eb000000	 bl          Lan_GetMacRegDW
  00018	e58d0000	 str         r0, [sp]

; 1796 : 	if (dwReg & MAC_CR_RXEN_)

  0001c	e59d3000	 ldr         r3, [sp]
  00020	e3130004	 tst         r3, #4
  00024	0a000022	 beq         |$LN15@DisableMac|

; 1797 : 	{
; 1798 : 		volatile long	counter;
; 1799 : 
; 1800 : 		SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_STS, INT_STS_RXSTOP_INT_);

  00028	e5943008	 ldr         r3, [r4, #8]
  0002c	e3a05401	 mov         r5, #1, 8

; 1801 : 		dwReg = Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR);

  00030	e3a01001	 mov         r1, #1
  00034	e5835058	 str         r5, [r3, #0x58]
  00038	e5940008	 ldr         r0, [r4, #8]
  0003c	eb000000	 bl          Lan_GetMacRegDW
  00040	e58d0000	 str         r0, [sp]

; 1802 : 		dwReg &= ~MAC_CR_RXEN_;
; 1803 : 		Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR, dwReg);

  00044	e5940008	 ldr         r0, [r4, #8]
  00048	e59d3000	 ldr         r3, [sp]
  0004c	e3a01001	 mov         r1, #1
  00050	e3c33004	 bic         r3, r3, #4
  00054	e58d3000	 str         r3, [sp]
  00058	e59d2000	 ldr         r2, [sp]
  0005c	eb000000	 bl          Lan_SetMacRegDW

; 1804 : 
; 1805 : 		counter = (long)GetRegDW(pAdapter->lan9118_data.dwLanBase, FREE_RUN);

  00060	e5941008	 ldr         r1, [r4, #8]
  00064	e591309c	 ldr         r3, [r1, #0x9C]

; 1806 : 		while (!((dwReg=GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_STS)) & INT_STS_RXSTOP_INT_))

  00068	e58d3004	 str         r3, [sp, #4]
  0006c	e5913058	 ldr         r3, [r1, #0x58]
  00070	e58d3000	 str         r3, [sp]
  00074	e59d3000	 ldr         r3, [sp]
  00078	e3130401	 tst         r3, #1, 8
  0007c	1a00000b	 bne         |$LN19@DisableMac|
  00080	e3a03cc3	 mov         r3, #0xC3, 24
  00084	e3830050	 orr         r0, r3, #0x50
  00088		 |$LL3@DisableMac|

; 1807 : 		{
; 1808 : 			if (((long)GetRegDW(pAdapter->lan9118_data.dwLanBase, FREE_RUN) - counter) > (25L*2000L))

  00088	e591209c	 ldr         r2, [r1, #0x9C]
  0008c	e59d3004	 ldr         r3, [sp, #4]
  00090	e0423003	 sub         r3, r2, r3
  00094	e1530000	 cmp         r3, r0
  00098	ca000004	 bgt         |$LN19@DisableMac|
  0009c	e5913058	 ldr         r3, [r1, #0x58]
  000a0	e58d3000	 str         r3, [sp]
  000a4	e59d3000	 ldr         r3, [sp]
  000a8	e3130401	 tst         r3, #1, 8
  000ac	0afffff5	 beq         |$LL3@DisableMac|
  000b0		 |$LN19@DisableMac|

; 1809 : 			{
; 1810 : 				break;
; 1811 : 			}
; 1812 : 		}
; 1813 : 
; 1814 : 		SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_STS, INT_STS_RXSTOP_INT_);

  000b0	e5815058	 str         r5, [r1, #0x58]
  000b4		 |$LN15@DisableMac|

; 1815 : 	}
; 1816 : }

  000b4	e28dd008	 add         sp, sp, #8
  000b8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$M53685|

			 ENDP  ; |DisableMacRxEn|

	EXPORT	|DelayUsingFreeRun|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T53703| DCD	|$LN12@DelayUsing|
	DCD	0x40000d01
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DelayUsingFreeRun| PROC

; 1819 : {

  00000		 |$LN12@DelayUsing|
  00000	e24dd004	 sub         sp, sp, #4
  00004		 |$M53700|

; 1820 : 	volatile long	counter;
; 1821 : 
; 1822 : 	counter = (long)GetRegDW(pAdapter->lan9118_data.dwLanBase, FREE_RUN);

  00004	e5900008	 ldr         r0, [r0, #8]
  00008	e0813101	 add         r3, r1, r1, lsl #2
  0000c	e0831103	 add         r1, r3, r3, lsl #2
  00010	e590309c	 ldr         r3, [r0, #0x9C]
  00014	e58d3000	 str         r3, [sp]
  00018		 |$LL2@DelayUsing|

; 1823 : 	while (((long)GetRegDW(pAdapter->lan9118_data.dwLanBase, FREE_RUN) - counter) < (25L*uSec))

  00018	e590209c	 ldr         r2, [r0, #0x9C]
  0001c	e59d3000	 ldr         r3, [sp]
  00020	e0423003	 sub         r3, r2, r3
  00024	e1530001	 cmp         r3, r1
  00028	bafffffa	 blt         |$LL2@DelayUsing|

; 1824 : 	{
; 1825 : 	}
; 1826 : }

  0002c	e28dd004	 add         sp, sp, #4
  00030	e12fff1e	 bx          lr
  00034		 |$M53701|

			 ENDP  ; |DelayUsingFreeRun|

	EXPORT	|EnableMacRxEn|

  00000			 AREA	 |.pdata|, PDATA
|$T53711| DCD	|$LN5@EnableMacR|
	DCD	0x40001402
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EnableMacRxEn| PROC

; 1829 : {

  00000		 |$LN5@EnableMacR|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M53708|
  00008	e1a04000	 mov         r4, r0

; 1830 : 	volatile DWORD	dwReg;
; 1831 : 
; 1832 :     SMSC_TRACE0(DBG_INIT,"+++ Enableing MacRxEn\r\n");
; 1833 : 
; 1834 : 	// Enable RX 
; 1835 : 	dwReg = Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR);

  0000c	e5940008	 ldr         r0, [r4, #8]
  00010	e3a01001	 mov         r1, #1
  00014	eb000000	 bl          Lan_GetMacRegDW
  00018	e58d0000	 str         r0, [sp]

; 1836 : 	dwReg |= MAC_CR_RXEN_;
; 1837 : 	Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR, dwReg);

  0001c	e5940008	 ldr         r0, [r4, #8]
  00020	e59d3000	 ldr         r3, [sp]
  00024	e3a01001	 mov         r1, #1
  00028	e3833004	 orr         r3, r3, #4
  0002c	e58d3000	 str         r3, [sp]
  00030	e59d2000	 ldr         r2, [sp]
  00034	eb000000	 bl          Lan_SetMacRegDW

; 1838 : 
; 1839 : 	// Wait for at least 64uSec
; 1840 : 	DelayUsingFreeRun(pAdapter, 64L);

  00038	e3a01040	 mov         r1, #0x40
  0003c	e1a00004	 mov         r0, r4
  00040	eb000000	 bl          DelayUsingFreeRun

; 1841 : }

  00044	e28dd004	 add         sp, sp, #4
  00048	e8bd4010	 ldmia       sp!, {r4, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M53709|

			 ENDP  ; |EnableMacRxEn|

	EXPORT	|SetMulticastAddressListForRev1|
	IMPORT	|Lan_EnableInterrupt|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T53729| DCD	|$LN20@SetMultica|
	DCD	0x40004f01
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetMulticastAddressListForRev1| PROC

; 1845 : {

  00000		 |$LN20@SetMultica|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M53726|
  00004	e1a04000	 mov         r4, r0

; 1846 : 	DWORD dwLinkMode;
; 1847 : 
; 1848 : 	dwLinkMode = pAdapter->lan9118_data.dwLinkMode;

  00008	e5943024	 ldr         r3, [r4, #0x24]

; 1849 : 	if (dwLinkMode == LINK_10MPS_HALF)

  0000c	e3530001	 cmp         r3, #1
  00010	1a000009	 bne         |$LN11@SetMultica|

; 1850 : 	{
; 1851 : 		DisableMacRxEn(pAdapter);

  00014	eb000000	 bl          DisableMacRxEn

; 1852 : 
; 1853 : 		Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, HASHL, pAdapter->ucNicMulticastRegs[0]);

  00018	e5942154	 ldr         r2, [r4, #0x154]
  0001c	e5940008	 ldr         r0, [r4, #8]
  00020	e3a01005	 mov         r1, #5
  00024	eb000000	 bl          Lan_SetMacRegDW

; 1854 : 		Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, HASHH, pAdapter->ucNicMulticastRegs[1]);

  00028	e5942158	 ldr         r2, [r4, #0x158]
  0002c	e5940008	 ldr         r0, [r4, #8]
  00030	e3a01004	 mov         r1, #4
  00034	eb000000	 bl          Lan_SetMacRegDW

; 1855 : 
; 1856 : 		EnableMacRxEn(pAdapter);

  00038	ea00003a	 b           |$LN16@SetMultica|
  0003c		 |$LN11@SetMultica|

; 1857 : 	}
; 1858 : 	else if (dwLinkMode == LINK_10MPS_FULL)

  0003c	e3530002	 cmp         r3, #2
  00040	1a000026	 bne         |$LN9@SetMultica|

; 1859 : 	{
; 1860 : 		DWORD	dwReg;
; 1861 : 
; 1862 : 		// 10/FD Case
; 1863 : 		dwReg = Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR);

  00044	e5940008	 ldr         r0, [r4, #8]
  00048	e3a01001	 mov         r1, #1
  0004c	eb000000	 bl          Lan_GetMacRegDW

; 1864 : 		if (dwReg & MAC_CR_RXEN_)

  00050	e3100004	 tst         r0, #4
  00054	0a000010	 beq         |$LN8@SetMultica|

; 1865 : 		{
; 1866 : 			SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_STS, INT_STS_RXSTOP_INT_);
; 1867 : 			// Enable Interrupt
; 1868 : 			Lan_EnableInterrupt((PLAN9118_DATA)&pAdapter->lan9118_data, INT_EN_RXSTOP_INT_EN_);

  00058	e1a00004	 mov         r0, r4
  0005c	e5b03008	 ldr         r3, [r0, #8]!
  00060	e3a02401	 mov         r2, #1, 8
  00064	e3a01401	 mov         r1, #1, 8
  00068	e5832058	 str         r2, [r3, #0x58]
  0006c	eb000000	 bl          Lan_EnableInterrupt

; 1869 : 
; 1870 : 			dwReg = Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR);

  00070	e5940008	 ldr         r0, [r4, #8]
  00074	e3a01001	 mov         r1, #1
  00078	eb000000	 bl          Lan_GetMacRegDW

; 1871 : 			dwReg &= ~MAC_CR_RXEN_;

  0007c	e3c02004	 bic         r2, r0, #4

; 1872 : 			Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR, dwReg);

  00080	e5940008	 ldr         r0, [r4, #8]
  00084	e3a01001	 mov         r1, #1
  00088	eb000000	 bl          Lan_SetMacRegDW
  0008c		 |$LN17@SetMultica|
  0008c	e3a03c01	 mov         r3, #1, 24

; 1873 : 
; 1874 : 			return (NDIS_STATUS_PENDING);

  00090	e3830003	 orr         r0, r3, #3

; 1918 : }

  00094	e8bd4010	 ldmia       sp!, {r4, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN8@SetMultica|

; 1875 : 		}
; 1876 : 		else
; 1877 : 		{
; 1878 : 			Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, HASHL, pAdapter->ucNicMulticastRegs[0]);

  0009c	e5942154	 ldr         r2, [r4, #0x154]
  000a0	e5940008	 ldr         r0, [r4, #8]
  000a4	e3a01005	 mov         r1, #5
  000a8	eb000000	 bl          Lan_SetMacRegDW

; 1879 : 			Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, HASHH, pAdapter->ucNicMulticastRegs[1]);

  000ac	e5942158	 ldr         r2, [r4, #0x158]
  000b0	e5940008	 ldr         r0, [r4, #8]
  000b4	e3a01004	 mov         r1, #4
  000b8	eb000000	 bl          Lan_SetMacRegDW

; 1880 : 
; 1881 :             SMSC_TRACE0(DBG_INIT,"+++ Enableing MacRx 1\r\n");
; 1882 : 
; 1883 : 			// Enable RX_EN
; 1884 : 			Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR, 
; 1885 : 				Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR) | 
; 1886 : 				MAC_CR_RXEN_);

  000bc	e5940008	 ldr         r0, [r4, #8]
  000c0	e3a01001	 mov         r1, #1
  000c4	eb000000	 bl          Lan_GetMacRegDW
  000c8	e1a03000	 mov         r3, r0
  000cc	e5940008	 ldr         r0, [r4, #8]
  000d0	e3832004	 orr         r2, r3, #4
  000d4	e3a01001	 mov         r1, #1
  000d8	eb000000	 bl          Lan_SetMacRegDW

; 1887 : 		}
; 1888 : 	}
; 1889 : 	else if ((dwLinkMode == LINK_100MPS_FULL) ||

  000dc	ea000013	 b           |$LN2@SetMultica|
  000e0		 |$LN9@SetMultica|

; 1890 : 			 (dwLinkMode == LINK_100MPS_HALF))

  000e0	e3530004	 cmp         r3, #4
  000e4	0a000001	 beq         |$LN4@SetMultica|
  000e8	e3530003	 cmp         r3, #3
  000ec	1a00000f	 bne         |$LN2@SetMultica|
  000f0		 |$LN4@SetMultica|

; 1891 : 	{
; 1892 : 		DWORD	dwReg;
; 1893 : 
; 1894 : 		dwReg = Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR);

  000f0	e5940008	 ldr         r0, [r4, #8]
  000f4	e3a01001	 mov         r1, #1
  000f8	eb000000	 bl          Lan_GetMacRegDW

; 1895 : 		if (dwReg & MAC_CR_RXEN_)

  000fc	e3100004	 tst         r0, #4
  00100	0a000006	 beq         |$LN3@SetMultica|

; 1896 : 		{
; 1897 : 			// 100/FD/HD Case
; 1898 : 			pAdapter->f100RxEnWorkaroundDone = 0L;

  00104	e2843c1a	 add         r3, r4, #0x1A, 24
  00108	e3a02000	 mov         r2, #0

; 1899 : 			// Initiate SWINT Interrupt 
; 1900 : 			Lan_EnableInterrupt((PLAN9118_DATA)&pAdapter->lan9118_data, INT_EN_SW_INT_EN_);

  0010c	e3a01102	 mov         r1, #2, 2
  00110	e2840008	 add         r0, r4, #8
  00114	e58320cc	 str         r2, [r3, #0xCC]
  00118	eb000000	 bl          Lan_EnableInterrupt

; 1901 : 			
; 1902 : 			return (NDIS_STATUS_PENDING);

  0011c	eaffffda	 b           |$LN17@SetMultica|
  00120		 |$LN3@SetMultica|

; 1903 : 		}
; 1904 : 		else
; 1905 : 		{
; 1906 : 			UpdateFilterAndMacReg(pAdapter);

  00120	e1a00004	 mov         r0, r4
  00124	eb000000	 bl          UpdateFilterAndMacReg
  00128		 |$LN16@SetMultica|

; 1907 : 			// Enable RX 
; 1908 : 			EnableMacRxEn(pAdapter);

  00128	e1a00004	 mov         r0, r4
  0012c	eb000000	 bl          EnableMacRxEn
  00130		 |$LN2@SetMultica|

; 1909 : 		}
; 1910 : 	}
; 1911 : 	else
; 1912 : 	{
; 1913 : 		// no link
; 1914 : 		// nothing to do	
; 1915 : 	}
; 1916 : 
; 1917 : 	return NDIS_STATUS_SUCCESS;

  00130	e3a00000	 mov         r0, #0

; 1918 : }

  00134	e8bd4010	 ldmia       sp!, {r4, lr}
  00138	e12fff1e	 bx          lr
  0013c		 |$M53727|

			 ENDP  ; |SetMulticastAddressListForRev1|

	EXPORT	|SetMulticastAddressList|

  00000			 AREA	 |.pdata|, PDATA
|$T53748| DCD	|$LN14@SetMultica@2|
	DCD	0x40002c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetMulticastAddressList| PROC

; 1926 : {

  00000		 |$LN14@SetMultica@2|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M53745|
  00004	e1a04000	 mov         r4, r0

; 1927 : 	UINT uiIndex;
; 1928 : 	UCHAR Table;
; 1929 : 	DWORD dwBit;
; 1930 : 	NDIS_STATUS	Ret = NDIS_STATUS_SUCCESS;

  00008	e2843c19	 add         r3, r4, #0x19, 24

; 1931 : 
; 1932 : 	SMSC_TRACE0(DBG_INIT,"+SetMulticastAddressList\r\n");
; 1933 : 
; 1934 : 	pAdapter->ucNicMulticastRegs[0] = 0UL;

  0000c	e3a02000	 mov         r2, #0
  00010	e28360d0	 add         r6, r3, #0xD0
  00014	e5842154	 str         r2, [r4, #0x154]

; 1935 : 	pAdapter->ucNicMulticastRegs[1] = 0UL;

  00018	e5842158	 str         r2, [r4, #0x158]
  0001c	e3a05000	 mov         r5, #0
  00020	e3a07020	 mov         r7, #0x20
  00024	e3a08001	 mov         r8, #1
  00028		 |$LL5@SetMultica@2|

; 1936 : 
; 1937 : 	for (uiIndex = 0U; uiIndex < DEFAULT_MULTICASTLISTMAX; uiIndex++)
; 1938 : 	{
; 1939 : 		SMSC_TRACE6(DBG_MULTICAST,"%x-%x-%x-%x-%x-%x\r\n", pAdapter->ucAddresses[uiIndex][0], pAdapter->ucAddresses[uiIndex][1], 
; 1940 : 														   pAdapter->ucAddresses[uiIndex][2], pAdapter->ucAddresses[uiIndex][3], 
; 1941 : 														   pAdapter->ucAddresses[uiIndex][4], pAdapter->ucAddresses[uiIndex][5]);
; 1942 : 
; 1943 : 		GetMulticastBit (pAdapter->ucAddresses[uiIndex], &Table, &dwBit);

  00028	e3a01006	 mov         r1, #6
  0002c	e1a00006	 mov         r0, r6
  00030	eb000000	 bl          ComputeCrc
  00034	e1a03d00	 mov         r3, r0, lsl #26
  00038	e1a03fa3	 mov         r3, r3, lsr #31
  0003c	e0841103	 add         r1, r4, r3, lsl #2

; 1944 : 		SMSC_TRACE2(DBG_MULTICAST,"Table=0x%x, dwBit=0x%x\r\n", Table, dwBit);
; 1945 : 		pAdapter->ucNicMulticastRegs[Table] |= dwBit;

  00040	e5912154	 ldr         r2, [r1, #0x154]
  00044	e200301f	 and         r3, r0, #0x1F
  00048	e2866006	 add         r6, r6, #6
  0004c	e1823318	 orr         r3, r2, r8, lsl r3
  00050	e2577001	 subs        r7, r7, #1
  00054	e5813154	 str         r3, [r1, #0x154]
  00058	1afffff2	 bne         |$LL5@SetMultica@2|

; 1946 : 		SMSC_TRACE2(DBG_MULTICAST,"ucNicMulticastRegs[0]=0x%x, ucNicMulticastRegs[1]=0x%x\r\n", pAdapter->ucNicMulticastRegs[0], pAdapter->ucNicMulticastRegs[1]);
; 1947 : 	}
; 1948 : 
; 1949 : 	// workaround for 118/117/116/115 A1 (REV_ID = 0x011x0001)
; 1950 : 	if (((pAdapter->lan9118_data.dwIdRev) & 0xFFF0FFFFUL) == 0x01100001UL)

  0005c	e594300c	 ldr         r3, [r4, #0xC]
  00060	e3a01611	 mov         r1, #0x11, 12
  00064	e3c3280f	 bic         r2, r3, #0xF, 16
  00068	e3813001	 orr         r3, r1, #1
  0006c	e1520003	 cmp         r2, r3
  00070	1a000003	 bne         |$LN2@SetMultica@2|

; 1951 : 	{
; 1952 : 		Ret = SetMulticastAddressListForRev1(pAdapter);

  00074	e1a00004	 mov         r0, r4
  00078	eb000000	 bl          SetMulticastAddressListForRev1
  0007c	e1a05000	 mov         r5, r0

; 1953 : 	}
; 1954 : 	else

  00080	ea000007	 b           |$LN1@SetMultica@2|
  00084		 |$LN2@SetMultica@2|

; 1955 : 	{
; 1956 : 		Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, HASHL, pAdapter->ucNicMulticastRegs[0]);

  00084	e5942154	 ldr         r2, [r4, #0x154]
  00088	e5940008	 ldr         r0, [r4, #8]
  0008c	e3a01005	 mov         r1, #5
  00090	eb000000	 bl          Lan_SetMacRegDW

; 1957 : 		Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, HASHH, pAdapter->ucNicMulticastRegs[1]);

  00094	e5942158	 ldr         r2, [r4, #0x158]
  00098	e5940008	 ldr         r0, [r4, #8]
  0009c	e3a01004	 mov         r1, #4
  000a0	eb000000	 bl          Lan_SetMacRegDW
  000a4		 |$LN1@SetMultica@2|

; 1958 : 	}
; 1959 : 
; 1960 : 	SMSC_TRACE2(DBG_MULTICAST,"HASHH=0x%x, HASHL=0x%x\r\n", Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, HASHH),
; 1961 : 															Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, HASHL));
; 1962 : 	
; 1963 : 	SMSC_TRACE0(DBG_INIT,"-SetMulticastAddressList\r\n");
; 1964 : 	return Ret;
; 1965 : }

  000a4	e1a00005	 mov         r0, r5
  000a8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$M53746|

			 ENDP  ; |SetMulticastAddressList|

	EXPORT	|SetPacketFilterForRev1|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T53766| DCD	|$LN20@SetPacketF|
	DCD	0x40003801
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetPacketFilterForRev1| PROC

; 1969 : {

  00000		 |$LN20@SetPacketF|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M53763|
  00004	e1a04000	 mov         r4, r0

; 1970 : 	DWORD 	dwLinkMode;
; 1971 : 
; 1972 : 	dwLinkMode = pAdapter->lan9118_data.dwLinkMode;

  00008	e5943024	 ldr         r3, [r4, #0x24]

; 1973 : 	if (dwLinkMode == LINK_10MPS_HALF)

  0000c	e3530001	 cmp         r3, #1
  00010	1a000003	 bne         |$LN11@SetPacketF|

; 1974 : 	{
; 1975 : 		DisableMacRxEn(pAdapter);

  00014	eb000000	 bl          DisableMacRxEn

; 1976 : 
; 1977 : 		Smsc9118SetMacFilter(pAdapter);

  00018	e1a00004	 mov         r0, r4
  0001c		 |$LN8@SetPacketF|
  0001c	eb000000	 bl          Smsc9118SetMacFilter

; 1978 : 
; 1979 : 		EnableMacRxEn(pAdapter);

  00020	ea000029	 b           |$LN16@SetPacketF|
  00024		 |$LN11@SetPacketF|

; 1980 : 	}
; 1981 : 	else if (dwLinkMode == LINK_10MPS_FULL)

  00024	e3530002	 cmp         r3, #2
  00028	1a000015	 bne         |$LN9@SetPacketF|

; 1982 : 	{
; 1983 : 		DWORD	dwReg;
; 1984 : 
; 1985 : 		// 10/FD Case
; 1986 : 		// Disable RX 
; 1987 : 		dwReg = Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR);

  0002c	e5940008	 ldr         r0, [r4, #8]
  00030	e3a01001	 mov         r1, #1
  00034	eb000000	 bl          Lan_GetMacRegDW

; 1988 : 		if (dwReg & MAC_CR_RXEN_)

  00038	e3100004	 tst         r0, #4

; 1989 : 		{
; 1990 : 			SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_STS, INT_STS_RXSTOP_INT_);
; 1991 : 			// Enable 
; 1992 : 			Lan_EnableInterrupt((PLAN9118_DATA)&pAdapter->lan9118_data, INT_EN_RXSTOP_INT_EN_);

  0003c	e1a00004	 mov         r0, r4
  00040	0afffff5	 beq         |$LN8@SetPacketF|
  00044	e5b03008	 ldr         r3, [r0, #8]!
  00048	e3a02401	 mov         r2, #1, 8
  0004c	e3a01401	 mov         r1, #1, 8
  00050	e5832058	 str         r2, [r3, #0x58]
  00054	eb000000	 bl          Lan_EnableInterrupt

; 1993 : 			dwReg = Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR);

  00058	e5940008	 ldr         r0, [r4, #8]
  0005c	e3a01001	 mov         r1, #1
  00060	eb000000	 bl          Lan_GetMacRegDW

; 1994 : 			dwReg &= ~MAC_CR_RXEN_;

  00064	e3c02004	 bic         r2, r0, #4

; 1995 : 			Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR, dwReg);

  00068	e5940008	 ldr         r0, [r4, #8]
  0006c	e3a01001	 mov         r1, #1
  00070	eb000000	 bl          Lan_SetMacRegDW
  00074		 |$LN17@SetPacketF|
  00074	e3a03c01	 mov         r3, #1, 24

; 1996 : 
; 1997 : 			return (NDIS_STATUS_PENDING);

  00078	e3830003	 orr         r0, r3, #3

; 2034 : }

  0007c	e8bd4010	 ldmia       sp!, {r4, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN9@SetPacketF|

; 1998 : 		}
; 1999 : 		else
; 2000 : 		{
; 2001 : 			Smsc9118SetMacFilter(pAdapter);
; 2002 : 			EnableMacRxEn(pAdapter);
; 2003 : 		}
; 2004 : 	}
; 2005 : 	else if ((dwLinkMode == LINK_100MPS_FULL) ||
; 2006 : 			 (dwLinkMode == LINK_100MPS_HALF))

  00084	e3530004	 cmp         r3, #4
  00088	0a000001	 beq         |$LN4@SetPacketF|
  0008c	e3530003	 cmp         r3, #3
  00090	1a00000f	 bne         |$LN2@SetPacketF|
  00094		 |$LN4@SetPacketF|

; 2007 : 	{
; 2008 : 		DWORD	dwReg;
; 2009 : 
; 2010 : 		dwReg = Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR);

  00094	e5940008	 ldr         r0, [r4, #8]
  00098	e3a01001	 mov         r1, #1
  0009c	eb000000	 bl          Lan_GetMacRegDW

; 2011 : 		if (dwReg & MAC_CR_RXEN_)

  000a0	e3100004	 tst         r0, #4
  000a4	0a000006	 beq         |$LN3@SetPacketF|

; 2012 : 		{
; 2013 : 			// 100/FD/HD Case
; 2014 : 			pAdapter->f100RxEnWorkaroundDone = 0L;

  000a8	e2843c1a	 add         r3, r4, #0x1A, 24
  000ac	e3a02000	 mov         r2, #0

; 2015 : 			// Initiate SWINT Interrupt 
; 2016 : 			Lan_EnableInterrupt((PLAN9118_DATA)&pAdapter->lan9118_data, INT_EN_SW_INT_EN_);

  000b0	e3a01102	 mov         r1, #2, 2
  000b4	e2840008	 add         r0, r4, #8
  000b8	e58320cc	 str         r2, [r3, #0xCC]
  000bc	eb000000	 bl          Lan_EnableInterrupt

; 2017 : 			
; 2018 : 			return (NDIS_STATUS_PENDING);

  000c0	eaffffeb	 b           |$LN17@SetPacketF|
  000c4		 |$LN3@SetPacketF|

; 2019 : 		}
; 2020 : 		else
; 2021 : 		{
; 2022 : 			UpdateFilterAndMacReg(pAdapter);

  000c4	e1a00004	 mov         r0, r4
  000c8	eb000000	 bl          UpdateFilterAndMacReg
  000cc		 |$LN16@SetPacketF|

; 2023 : 			// Enable RX 
; 2024 : 			EnableMacRxEn(pAdapter);

  000cc	e1a00004	 mov         r0, r4
  000d0	eb000000	 bl          EnableMacRxEn
  000d4		 |$LN2@SetPacketF|

; 2025 : 		}
; 2026 : 	}
; 2027 : 	else
; 2028 : 	{
; 2029 : 		// no link
; 2030 : 		// nothing to do	
; 2031 : 	}
; 2032 : 
; 2033 : 	return NDIS_STATUS_SUCCESS;

  000d4	e3a00000	 mov         r0, #0

; 2034 : }

  000d8	e8bd4010	 ldmia       sp!, {r4, lr}
  000dc	e12fff1e	 bx          lr
  000e0		 |$M53764|

			 ENDP  ; |SetPacketFilterForRev1|

	EXPORT	|SetPacketFilter|

  00000			 AREA	 |.pdata|, PDATA
|$T53779| DCD	|$LN10@SetPacketF@2|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetPacketFilter| PROC

; 2042 : {

  00000		 |$LN10@SetPacketF@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M53776|
  00004	e1a05000	 mov         r5, r0

; 2043 : 	DWORD	dwReg;
; 2044 : 	NDIS_STATUS	Ret = NDIS_STATUS_SUCCESS;
; 2045 : 
; 2046 : 	SMSC_TRACE0(DBG_MULTICAST,"+SetPacketFilter\r\n");
; 2047 : 
; 2048 : 	// workaround for 118/117/116/115 A1 (REV_ID = 0x011x0001)
; 2049 : 	if (((pAdapter->lan9118_data.dwIdRev) & 0xFFF0FFFFUL) == 0x01100001UL)

  00008	e595300c	 ldr         r3, [r5, #0xC]
  0000c	e3a01611	 mov         r1, #0x11, 12
  00010	e3a06000	 mov         r6, #0
  00014	e3c3280f	 bic         r2, r3, #0xF, 16
  00018	e3813001	 orr         r3, r1, #1
  0001c	e1520003	 cmp         r2, r3
  00020	1a000002	 bne         |$LN5@SetPacketF@2|

; 2050 : 	{
; 2051 : 		Ret = SetPacketFilterForRev1(pAdapter);

  00024	eb000000	 bl          SetPacketFilterForRev1
  00028	e1a06000	 mov         r6, r0

; 2052 : 	}
; 2053 : 	else

  0002c	ea000015	 b           |$LN4@SetPacketF@2|
  00030		 |$LN5@SetPacketF@2|

; 2054 : 	{
; 2055 : 		dwReg = Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR);

  00030	e5950008	 ldr         r0, [r5, #8]
  00034	e3a01001	 mov         r1, #1
  00038	eb000000	 bl          Lan_GetMacRegDW

; 2056 : 		dwReg &= ~MAC_CR_RXEN_;

  0003c	e3c04004	 bic         r4, r0, #4

; 2057 : 		Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR, dwReg);

  00040	e5950008	 ldr         r0, [r5, #8]
  00044	e1a02004	 mov         r2, r4
  00048	e3a01001	 mov         r1, #1
  0004c	eb000000	 bl          Lan_SetMacRegDW

; 2058 : 		
; 2059 : 		dwReg &= (~(MAC_CR_MCPAS_ | MAC_CR_PRMS_ | MAC_CR_INVFILT_ | MAC_CR_HFILT_ | MAC_CR_HPFILT_ | MAC_CR_BCAST_));
; 2060 : 
; 2061 : 		if (pAdapter->ulPacketFilter & (DWORD)NDIS_PACKET_TYPE_ALL_MULTICAST)

  00050	e595214c	 ldr         r2, [r5, #0x14C]
  00054	e3e03aea	 mvn         r3, #0xEA, 20
  00058	e2233b02	 eor         r3, r3, #2, 22
  0005c	e0043003	 and         r3, r4, r3
  00060	e3120004	 tst         r2, #4

; 2062 : 		{
; 2063 : 			dwReg |= MAC_CR_MCPAS_;

  00064	13833702	 orrne       r3, r3, #2, 14

; 2064 : 		}
; 2065 : 
; 2066 : 		if (pAdapter->ulPacketFilter & (DWORD)NDIS_PACKET_TYPE_PROMISCUOUS)

  00068	e3120020	 tst         r2, #0x20

; 2067 : 		{
; 2068 : 			dwReg |= MAC_CR_PRMS_;

  0006c	13833701	 orrne       r3, r3, #1, 14

; 2069 : 		}
; 2070 : 
; 2071 : 		if (pAdapter->ulPacketFilter & (DWORD)NDIS_PACKET_TYPE_MULTICAST)

  00070	e3120002	 tst         r2, #2

; 2072 : 		{
; 2073 : 			dwReg |= MAC_CR_HPFILT_;
; 2074 : 		}
; 2075 : 		// FIXME
; 2076 :         SMSC_TRACE0(DBG_INIT,"+++ Enableing MacRx 2\r\n");
; 2077 : 
; 2078 : 		dwReg |= MAC_CR_RXEN_;
; 2079 : 		Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR, dwReg);

  00074	e5950008	 ldr         r0, [r5, #8]
  00078	13833a02	 orrne       r3, r3, #2, 20
  0007c	e3832004	 orr         r2, r3, #4
  00080	e3a01001	 mov         r1, #1
  00084	eb000000	 bl          Lan_SetMacRegDW
  00088		 |$LN4@SetPacketF@2|

; 2080 : 	}
; 2081 : 
; 2082 : 	SMSC_TRACE1(DBG_MULTICAST,"***(after) MAC_CR=0x%x\r\n", 
; 2083 : 			Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR));
; 2084 : 
; 2085 : 	SMSC_TRACE1(DBG_MULTICAST,"*** ADDRH=0x%x\r\n", 
; 2086 : 			Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, ADDRH));
; 2087 : 	SMSC_TRACE1(DBG_MULTICAST,"*** ADDRL=0x%x\r\n", 
; 2088 : 			Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, ADDRL));
; 2089 : 
; 2090 : 	SMSC_TRACE0(DBG_MULTICAST,"-SetPacketFilter\r\n");
; 2091 : 	return Ret;
; 2092 : }

  00088	e1a00006	 mov         r0, r6
  0008c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$M53777|

			 ENDP  ; |SetPacketFilter|

	EXPORT	|ChipStart|
	IMPORT	|Lan_EstablishLink|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T53795| DCD	|$LN10@ChipStart|
	DCD	0x40001701
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ChipStart| PROC

; 2372 : {

  00000		 |$LN10@ChipStart|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M53792|
  00004	e1a04000	 mov         r4, r0

; 2373 : 	BOOL	bRet;
; 2374 : 	DWORD 	dwTemp;
; 2375 : 
; 2376 : 	SMSC_TRACE0(DBG_INIT,"+ChipStart\r\n");
; 2377 : 
; 2378 : 	// we don't care about return value now.
; 2379 : 	bRet = Lan_EstablishLink(&(pAdapter->lan9118_data), pAdapter->LinkMode);

  00008	e2843a01	 add         r3, r4, #1, 20
  0000c	e59311b4	 ldr         r1, [r3, #0x1B4]
  00010	e2840008	 add         r0, r4, #8
  00014	eb000000	 bl          Lan_EstablishLink

; 2380 : 	// Make Lint Happy
; 2381 : 	bRet = bRet;
; 2382 : 	if (pAdapter->lan9118_data.dwLinkMode != LINK_NO_LINK)
; 2383 : 	{
; 2384 : 		SMSC_TRACE0(DBG_INIT,"Link Established !\r\n");
; 2385 : 	}
; 2386 : 
; 2387 : 	//Enable the GPT timer
; 2388 : 	dwTemp = GetRegDW(pAdapter->lan9118_data.dwLanBase, GPT_CFG);

  00018	e594e008	 ldr         lr, [r4, #8]
  0001c	e3e03b3e	 mvn         r3, #0x3E, 22

; 2389 : 	dwTemp &= ~0xFFFFUL;

  00020	e223102f	 eor         r1, r3, #0x2F
  00024	e59e308c	 ldr         r3, [lr, #0x8C]
  00028	e3a02202	 mov         r2, #2, 4

; 2390 : 	dwTemp |= (GPT_INT_INTERVAL | GPT_CFG_TIMER_EN_);

  0002c	e3822e7d	 orr         r2, r2, #0x7D, 28
  00030	e0033001	 and         r3, r3, r1
  00034	e1833002	 orr         r3, r3, r2

; 2391 : 	SetRegDW(pAdapter->lan9118_data.dwLanBase, GPT_CFG, dwTemp);
; 2392 : 	Lan_EnableInterrupt((PLAN9118_DATA)&pAdapter->lan9118_data, INT_EN_GPT_INT_EN_);

  00038	e3a01702	 mov         r1, #2, 14
  0003c	e2840008	 add         r0, r4, #8
  00040	e58e308c	 str         r3, [lr, #0x8C]
  00044	eb000000	 bl          Lan_EnableInterrupt

; 2393 : 
; 2394 : 	// Enable Rx Overrun Interrupt
; 2395 : 	Lan_EnableInterrupt((PLAN9118_DATA)&pAdapter->lan9118_data, INT_EN_RDFO_EN_);

  00048	e3a01040	 mov         r1, #0x40
  0004c	e2840008	 add         r0, r4, #8
  00050	eb000000	 bl          Lan_EnableInterrupt

; 2396 : 	SMSC_TRACE0(DBG_INIT,"-ChipStart\r\n");
; 2397 : }

  00054	e8bd4010	 ldmia       sp!, {r4, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M53793|

			 ENDP  ; |ChipStart|

	EXPORT	|ChipReset|
	IMPORT	|Lan_InitializeRx|
	IMPORT	|Lan_InitializeTx|
	IMPORT	|Lan_InitializePhy|
	IMPORT	|Lan_InitializeInterrupts|

  00000			 AREA	 |.pdata|, PDATA
|$T53807| DCD	|$LN12@ChipReset|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ChipReset| PROC

; 2404 : {

  00000		 |$LN12@ChipReset|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M53804|
  00004	e1a04000	 mov         r4, r0

; 2405 : 	SMSC_TRACE0(DBG_INIT,"+ChipReset\r\n");
; 2406 : 
; 2407 : 	if (!Lan_Initialize(&(pAdapter->lan9118_data), pAdapter->lan9118_data.dwLanBase))

  00008	e5941008	 ldr         r1, [r4, #8]
  0000c	e2840008	 add         r0, r4, #8
  00010	eb000000	 bl          Lan_Initialize
  00014	e3500000	 cmp         r0, #0
  00018	1a000002	 bne         |$LN5@ChipReset|
  0001c		 |$LN9@ChipReset|

; 2408 : 	{
; 2409 : 		SMSC_TRACE0(DBG_INIT,"Lan_Initialize failed.\r\n");
; 2410 : 		SMSC_TRACE0(DBG_INIT,"-ChipReset\r\n");
; 2411 : 		return (BOOLEAN)FALSE;

  0001c	e3a00000	 mov         r0, #0

; 2450 : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$LN5@ChipReset|

; 2412 : 	}
; 2413 : 	Lan_InitializeInterrupts(&(pAdapter->lan9118_data), INT_DEAS);

  00028	e3a01416	 mov         r1, #0x16, 8
  0002c	e2840008	 add         r0, r4, #8
  00030	eb000000	 bl          Lan_InitializeInterrupts

; 2414 : 	if (!Lan_InitializePhy(&(pAdapter->lan9118_data), pAdapter->PhyAddress))

  00034	e2843a01	 add         r3, r4, #1, 20
  00038	e5d31a96	 ldrb        r1, [r3, #0xA96]
  0003c	e2840008	 add         r0, r4, #8
  00040	eb000000	 bl          Lan_InitializePhy
  00044	e3500000	 cmp         r0, #0

; 2415 : 	{
; 2416 : 		SMSC_TRACE0(DBG_INIT,"Lan_InitializePhy failed.\r\n");
; 2417 : 		SMSC_TRACE0(DBG_INIT,"-ChipReset\r\n");
; 2418 : 		return (BOOLEAN)FALSE;

  00048	0afffff3	 beq         |$LN9@ChipReset|

; 2419 : 	}
; 2420 : 	
; 2421 : 	Lan_InitializeTx(&(pAdapter->lan9118_data));

  0004c	e2840008	 add         r0, r4, #8
  00050	eb000000	 bl          Lan_InitializeTx

; 2422 : 
; 2423 : 	if (pAdapter->fRxDMAMode)

  00054	e2843a01	 add         r3, r4, #1, 20
  00058	e59331a0	 ldr         r3, [r3, #0x1A0]

; 2424 : 	{
; 2425 : // NOTE!!
; 2426 : #if (CACHE_LINE_BYTES==32UL)
; 2427 : 		Lan_InitializeRx(&(pAdapter->lan9118_data), 0x80000200UL, 0UL); //DMA

  0005c	e3a02000	 mov         r2, #0
  00060	e2840008	 add         r0, r4, #8
  00064	e3530000	 cmp         r3, #0
  00068	13a03102	 movne       r3, #2, 2
  0006c	13831c02	 orrne       r1, r3, #2, 24

; 2428 : #elif (CACHE_LINE_BYTES==16UL)
; 2429 : 		Lan_InitializeRx(&(pAdapter->lan9118_data), 0x40000200UL, 0UL); //DMA
; 2430 : #else
; 2431 : #error	"CACHE_LINE_BYTES should be defined."
; 2432 : #endif
; 2433 : 	}
; 2434 : 	else
; 2435 : 	{
; 2436 : 		Lan_InitializeRx(&(pAdapter->lan9118_data), 0x00000200UL, 0UL); // PIO with 2-byte offset

  00070	03a01c02	 moveq       r1, #2, 24
  00074	eb000000	 bl          Lan_InitializeRx

; 2437 : 	}
; 2438 : 
; 2439 : 	// Reset queues, etc.
; 2440 : 	if (InitializeQueues(pAdapter) != NDIS_STATUS_SUCCESS)

  00078	e1a00004	 mov         r0, r4
  0007c	eb000000	 bl          InitializeQueues

; 2441 : 	{
; 2442 : 		SMSC_TRACE0(DBG_INIT, "Failed! at InitializeQueues()\r\n");
; 2443 : 	}
; 2444 : 
; 2445 : 	// Restart the chip
; 2446 : 	ChipStart (pAdapter);

  00080	e1a00004	 mov         r0, r4
  00084	eb000000	 bl          ChipStart

; 2447 : 	
; 2448 : 	SMSC_TRACE0(DBG_INIT,"-ChipReset\r\n");
; 2449 : 	return (BOOLEAN)TRUE;

  00088	e3a00001	 mov         r0, #1

; 2450 : }

  0008c	e8bd4010	 ldmia       sp!, {r4, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$M53805|

			 ENDP  ; |ChipReset|

	EXPORT	|Smsc9118Shutdown|

  00000			 AREA	 |.pdata|, PDATA
|$T53815| DCD	|$LN5@Smsc9118Sh|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Smsc9118Shutdown| PROC

; 2458 : {

  00000		 |$LN5@Smsc9118Sh|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M53812|

; 2459 : 	BOOLEAN	bRet;
; 2460 : 	SMSC9118_ADAPTER * const pAdapter = (PSMSC9118_ADAPTER)(hMiniportAdapterContext);
; 2461 : 
; 2462 : 	SMSC_TRACE0(DBG_INIT,"+Smsc9118Shutdown\r\n");
; 2463 : 
; 2464 : 	// we don't care about return value now
; 2465 : 	bRet = ChipReset(pAdapter);

  00004	eb000000	 bl          ChipReset

; 2466 : 	// Make Lint Happy
; 2467 : 	bRet = bRet;
; 2468 : 
; 2469 : 	SMSC_TRACE0(DBG_INIT,"-Smsc9118Shutdown\r\n");
; 2470 : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M53813|

			 ENDP  ; |Smsc9118Shutdown|

	EXPORT	|Smsc9118Halt|
	IMPORT	|VirtualFree|
	IMPORT	|NdisFreeMemory|
	IMPORT	|NdisFreePacketPool|
	IMPORT	|NdisFreePacket|
	IMPORT	|NdisFreeBufferPool|
	IMPORT	|NdisFreeBuffer|
	IMPORT	|NdisUnchainBufferAtBack|
	IMPORT	|NdisTerminateWrapper|
	IMPORT	|NdisMSleep|
	IMPORT	|NdisMDeregisterInterrupt|
	IMPORT	|NdisMDeregisterAdapterShutdownHandler|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T53838| DCD	|$LN33@Smsc9118Ha|
	DCD	0x40006d01
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Smsc9118Halt| PROC

; 2504 : {

  00000		 |$LN33@Smsc9118Ha|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M53835|
  00004	e1a05000	 mov         r5, r0

; 2505 : 	DWORD		dw;
; 2506 : 	SMSC9118_ADAPTER * const pAdapter = (PSMSC9118_ADAPTER)(hMiniportAdapterContext);
; 2507 : 
; 2508 : 	SMSC_TRACE0(DBG_INIT,"+Smsc9118Halt\r\n");
; 2509 : 
; 2510 : 	// Disable Global Interrupt
; 2511 : 	SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG, 
; 2512 : 			GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG) & ~INT_CFG_IRQ_EN_);

  00008	e5952008	 ldr         r2, [r5, #8]

; 2513 : 
; 2514 : 	//De-register shutdown handler.
; 2515 : 	NdisMDeregisterAdapterShutdownHandler(pAdapter->hMiniportAdapterHandle);
; 2516 : 
; 2517 : 	//De-register interrupt.
; 2518 : 	NdisMDeregisterInterrupt (&(pAdapter->Interrupt));

  0000c	e1a04005	 mov         r4, r5
  00010	e5923054	 ldr         r3, [r2, #0x54]
  00014	e3c33c01	 bic         r3, r3, #1, 24
  00018	e5823054	 str         r3, [r2, #0x54]
  0001c	e49400d4	 ldr         r0, [r4], #0xD4
  00020	eb000000	 bl          NdisMDeregisterAdapterShutdownHandler
  00024	e1a00004	 mov         r0, r4
  00028	eb000000	 bl          NdisMDeregisterInterrupt
  0002c	e3a03c61	 mov         r3, #0x61, 24

; 2519 : 	NdisMSleep(25000UL);		// 25000uSec = 25mSec

  00030	e38300a8	 orr         r0, r3, #0xA8
  00034	eb000000	 bl          NdisMSleep

; 2520 : 
; 2521 : 	if (gSmsc9118MiniportBlock.AdapterQueue == pAdapter) {

  00038	e59f4170	 ldr         r4, [pc, #0x170]
  0003c	e5942004	 ldr         r2, [r4, #4]
  00040	e1520005	 cmp         r2, r5
  00044	1a000003	 bne         |$LN17@Smsc9118Ha|

; 2522 : 		gSmsc9118MiniportBlock.AdapterQueue = pAdapter->NextAdapter;

  00048	e5953004	 ldr         r3, [r5, #4]
  0004c	e5843004	 str         r3, [r4, #4]

; 2523 : 	}
; 2524 : 	else

  00050	ea000006	 b           |$LN16@Smsc9118Ha|
  00054		 |$LL15@Smsc9118Ha|

; 2525 : 	{
; 2526 : 		PSMSC9118_ADAPTER TmpAdapter = gSmsc9118MiniportBlock.AdapterQueue;
; 2527 : 
; 2528 : 		while (TmpAdapter->NextAdapter != pAdapter) {
; 2529 : 			TmpAdapter = TmpAdapter->NextAdapter;

  00054	e5922004	 ldr         r2, [r2, #4]
  00058		 |$LN17@Smsc9118Ha|
  00058	e5923004	 ldr         r3, [r2, #4]
  0005c	e1530005	 cmp         r3, r5
  00060	1afffffb	 bne         |$LL15@Smsc9118Ha|

; 2530 : 		}
; 2531 : 		TmpAdapter->NextAdapter = TmpAdapter->NextAdapter->NextAdapter;

  00064	e5933004	 ldr         r3, [r3, #4]
  00068	e5823004	 str         r3, [r2, #4]
  0006c	e5943004	 ldr         r3, [r4, #4]
  00070		 |$LN16@Smsc9118Ha|

; 2532 : 	}
; 2533 : 
; 2534 : 	if ((gSmsc9118MiniportBlock.AdapterQueue == NULL) && gSmsc9118MiniportBlock.NdisWrapperHandle)

  00070	e3530000	 cmp         r3, #0
  00074	1a000006	 bne         |$LN13@Smsc9118Ha|
  00078	e5940000	 ldr         r0, [r4]
  0007c	e3500000	 cmp         r0, #0
  00080	0a000003	 beq         |$LN13@Smsc9118Ha|

; 2535 : 	{
; 2536 : 		NdisTerminateWrapper(gSmsc9118MiniportBlock.NdisWrapperHandle, NULL);

  00084	e3a01000	 mov         r1, #0
  00088	eb000000	 bl          NdisTerminateWrapper

; 2537 : 		gSmsc9118MiniportBlock.NdisWrapperHandle = NULL;

  0008c	e3a03000	 mov         r3, #0
  00090	e5843000	 str         r3, [r4]
  00094		 |$LN13@Smsc9118Ha|

; 2538 : 	}
; 2539 : 
; 2540 : 	// Unchain Buffer and Free Buffer
; 2541 : 	for (dw = 0UL; dw < (DWORD)MAX_RXPACKETS_IN_QUEUE; dw++)

  00094	e1a04005	 mov         r4, r5
  00098	e3a06c01	 mov         r6, #1, 24
  0009c		 |$LL12@Smsc9118Ha|

; 2542 : 	{
; 2543 : 		NdisUnchainBufferAtBack((pAdapter->RxPacketArray[dw]), &(pAdapter->RxBufferArray[dw]));

  0009c	e5940188	 ldr         r0, [r4, #0x188]
  000a0	e2843c05	 add         r3, r4, #5, 24
  000a4	e2831088	 add         r1, r3, #0x88
  000a8	eb000000	 bl          NdisUnchainBufferAtBack

; 2544 : 		NdisFreeBuffer(pAdapter->RxBufferArray[dw]);

  000ac	e5940588	 ldr         r0, [r4, #0x588]
  000b0	eb000000	 bl          NdisFreeBuffer
  000b4	e2844004	 add         r4, r4, #4
  000b8	e2566001	 subs        r6, r6, #1
  000bc	1afffff6	 bne         |$LL12@Smsc9118Ha|

; 2545 : 	}
; 2546 : 	// Free BufferPool
; 2547 : 	NdisFreeBufferPool(pAdapter->hBufferPool);

  000c0	e5950184	 ldr         r0, [r5, #0x184]
  000c4	eb000000	 bl          NdisFreeBufferPool
  000c8	e1a04005	 mov         r4, r5
  000cc	e3a06c01	 mov         r6, #1, 24
  000d0		 |$LL9@Smsc9118Ha|

; 2548 : 	
; 2549 : 	// Free Packets
; 2550 : 	for (dw = 0UL; dw < (DWORD)MAX_RXPACKETS_IN_QUEUE; dw++)
; 2551 : 	{
; 2552 : 		NdisFreePacket(pAdapter->RxPacketArray[dw]);

  000d0	e5940188	 ldr         r0, [r4, #0x188]
  000d4	eb000000	 bl          NdisFreePacket
  000d8	e2844004	 add         r4, r4, #4
  000dc	e2566001	 subs        r6, r6, #1
  000e0	1afffffa	 bne         |$LL9@Smsc9118Ha|

; 2553 : 	}
; 2554 : 
; 2555 : 	// Free PacketPool
; 2556 : 	NdisFreePacketPool(pAdapter->hPacketPool);

  000e4	e5950180	 ldr         r0, [r5, #0x180]
  000e8	eb000000	 bl          NdisFreePacketPool

; 2557 : 
; 2558 : 	// Free shared memory.
; 2559 : 	if (pAdapter->pSharedMemVA)

  000ec	e2853a01	 add         r3, r5, #1, 20
  000f0	e59331ac	 ldr         r3, [r3, #0x1AC]
  000f4	e3a04000	 mov         r4, #0
  000f8	e3530000	 cmp         r3, #0
  000fc	0a000005	 beq         |$LN6@Smsc9118Ha|

; 2560 : 	{
; 2561 : 		NdisFreeMemory(pAdapter->pSharedMemVA, (UINT)sizeof(SMSC9118_SHAREDMEM), NDIS_ALLOC_FLAG);

  00100	e3a02000	 mov         r2, #0
  00104	e3a01702	 mov         r1, #2, 14
  00108	e1a00003	 mov         r0, r3
  0010c	eb000000	 bl          NdisFreeMemory

; 2562 : 		pAdapter->pSharedMemVA = NULL;

  00110	e2853a01	 add         r3, r5, #1, 20
  00114	e58341ac	 str         r4, [r3, #0x1AC]
  00118		 |$LN6@Smsc9118Ha|

; 2563 : 	}
; 2564 : 
; 2565 : 	// Free VA for DMA
; 2566 : 	if ((pAdapter->fRxDMAMode || pAdapter->fTxDMAMode) && pAdapter->DMABaseVA)

  00118	e2853a01	 add         r3, r5, #1, 20
  0011c	e59331a0	 ldr         r3, [r3, #0x1A0]
  00120	e3530000	 cmp         r3, #0
  00124	1a000003	 bne         |$LN4@Smsc9118Ha|
  00128	e2853a01	 add         r3, r5, #1, 20
  0012c	e59331a4	 ldr         r3, [r3, #0x1A4]
  00130	e3530000	 cmp         r3, #0
  00134	0a000009	 beq         |$LN5@Smsc9118Ha|
  00138		 |$LN4@Smsc9118Ha|
  00138	e2853a01	 add         r3, r5, #1, 20
  0013c	e59331a8	 ldr         r3, [r3, #0x1A8]
  00140	e3530000	 cmp         r3, #0
  00144	0a000005	 beq         |$LN5@Smsc9118Ha|

; 2567 : 	{
; 2568 : 		if (VirtualFree ((PVOID)(pAdapter->DMABaseVA), 0UL, (DWORD)MEM_RELEASE) != TRUE) 

  00148	e3a02902	 mov         r2, #2, 18
  0014c	e3a01000	 mov         r1, #0
  00150	e1a00003	 mov         r0, r3
  00154	eb000000	 bl          VirtualFree

; 2569 : 		{
; 2570 : 			SMSC_TRACE0(DBG_INIT,"Failed! at Smsc9118Halt() to free DMABaseVA\r\n");
; 2571 : 		}
; 2572 : 		pAdapter->DMABaseVA = 0x00UL;

  00158	e2853a01	 add         r3, r5, #1, 20
  0015c	e58341a8	 str         r4, [r3, #0x1A8]
  00160		 |$LN5@Smsc9118Ha|

; 2573 : 	}
; 2574 : 
; 2575 : 	// Free VA for 9118
; 2576 : 	if (pAdapter->lan9118_data.dwLanBase)

  00160	e5953008	 ldr         r3, [r5, #8]
  00164	e1b00003	 movs        r0, r3
  00168	0a00000a	 beq         |$LN2@Smsc9118Ha|
  0016c	e3e03b0d	 mvn         r3, #0xD, 22

; 2577 : 	{
; 2578 : 		if (VirtualFree ((PVOID)(pAdapter->lan9118_data.dwLanBase - (pAdapter->ulIoBaseAddress & (((DWORD)PAGE_SIZE)-1UL))), 0UL, (DWORD)MEM_RELEASE) != TRUE)

  00170	e22330fb	 eor         r3, r3, #0xFB
  00174	e5933000	 ldr         r3, [r3]
  00178	e5951124	 ldr         r1, [r5, #0x124]
  0017c	e3a02902	 mov         r2, #2, 18
  00180	e2433001	 sub         r3, r3, #1
  00184	e0033001	 and         r3, r3, r1
  00188	e0400003	 sub         r0, r0, r3
  0018c	e3a01000	 mov         r1, #0
  00190	eb000000	 bl          VirtualFree

; 2579 : 		{
; 2580 : 			SMSC_TRACE0(DBG_INIT,"Failed! at Smsc9118Halt() to free dwLanBase\r\n");
; 2581 : 		}
; 2582 : 		pAdapter->lan9118_data.dwLanBase = 0x00UL;

  00194	e5854008	 str         r4, [r5, #8]
  00198		 |$LN2@Smsc9118Ha|

; 2583 : 	}
; 2584 : 
; 2585 : 	// Free pAdapter.
; 2586 : 	NdisFreeMemory(pAdapter, (UINT)sizeof(PSMSC9118_ADAPTER), NDIS_ALLOC_FLAG);

  00198	e3a02000	 mov         r2, #0
  0019c	e3a01004	 mov         r1, #4
  001a0	e1a00005	 mov         r0, r5
  001a4	eb000000	 bl          NdisFreeMemory

; 2587 : 
; 2588 : 	SMSC_TRACE0(DBG_INIT,"-Smsc9118Halt\r\n");
; 2589 : 	return;
; 2590 : }

  001a8	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  001ac	e12fff1e	 bx          lr
  001b0		 |$LN34@Smsc9118Ha|
  001b0		 |$LN35@Smsc9118Ha|
  001b0	00000000	 DCD         |gSmsc9118MiniportBlock|
  001b4		 |$M53836|

			 ENDP  ; |Smsc9118Halt|

	EXPORT	|GetPktFromEmptyArray|

  00000			 AREA	 |.pdata|, PDATA
|$T53853| DCD	|$LN9@GetPktFrom|
	DCD	0x40001c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetPktFromEmptyArray| PROC

; 2593 : {

  00000		 |$LN9@GetPktFrom|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M53850|

; 2594 : 	PNDIS_PACKET	pPkt;
; 2595 : 
; 2596 : 	if (!IS_ARRAY_EMPTY(pAdapter->EmptyPkt))

  00004	e5902d90	 ldr         r2, [r0, #0xD90]
  00008	e2804c0d	 add         r4, r0, #0xD, 24
  0000c	e594308c	 ldr         r3, [r4, #0x8C]
  00010	e1530002	 cmp         r3, r2
  00014	0a000010	 beq         |$LN2@GetPktFrom|

; 2597 : 	{
; 2598 : #ifdef	TRACE_BUFFER
; 2599 : 		dwRxPktFromEmpty ++;

  00018	e59f204c	 ldr         r2, [pc, #0x4C]
  0001c	e3e038ff	 mvn         r3, #0xFF, 16

; 2600 : #endif
; 2601 : 		pPkt = pAdapter->EmptyPkt.dwPktArray[pAdapter->EmptyPkt.dwRdPtr];
; 2602 : 		INC_PTR(pAdapter->EmptyPkt.dwRdPtr);

  00020	e223e0fe	 eor         lr, r3, #0xFE
  00024	e5923000	 ldr         r3, [r2]
  00028	e2833001	 add         r3, r3, #1
  0002c	e5823000	 str         r3, [r2]
  00030	e594308c	 ldr         r3, [r4, #0x8C]
  00034	e594208c	 ldr         r2, [r4, #0x8C]
  00038	e0801103	 add         r1, r0, r3, lsl #2
  0003c	e2820001	 add         r0, r2, #1
  00040	e0832e90	 umull       r2, r3, r0, lr
  00044	e5911988	 ldr         r1, [r1, #0x988]
  00048	e1a03423	 mov         r3, r3, lsr #8
  0004c	e0833403	 add         r3, r3, r3, lsl #8
  00050	e0403003	 sub         r3, r0, r3
  00054	e584308c	 str         r3, [r4, #0x8C]

; 2603 : 		return pPkt;

  00058	ea000000	 b           |$LN1@GetPktFrom|
  0005c		 |$LN2@GetPktFrom|

; 2604 : 	}
; 2605 : 	else 
; 2606 : 	{
; 2607 : 		return NULL;

  0005c	e3a01000	 mov         r1, #0
  00060		 |$LN1@GetPktFrom|

; 2608 : 	}
; 2609 : }

  00060	e1a00001	 mov         r0, r1
  00064	e8bd4010	 ldmia       sp!, {r4, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$LN10@GetPktFrom|
  0006c		 |$LN11@GetPktFrom|
  0006c	00000000	 DCD         |dwRxPktFromEmpty|
  00070		 |$M53851|

			 ENDP  ; |GetPktFromEmptyArray|

	EXPORT	|GetPktFromFullArray|

  00000			 AREA	 |.pdata|, PDATA
|$T53868| DCD	|$LN9@GetPktFrom@2|
	DCD	0x40001d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetPktFromFullArray| PROC

; 2612 : {

  00000		 |$LN9@GetPktFrom@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M53865|

; 2613 : 	PNDIS_PACKET	pPkt;
; 2614 : 
; 2615 : 	if (!IS_ARRAY_EMPTY(pAdapter->FullPkt))

  00004	e2803c11	 add         r3, r0, #0x11, 24
  00008	e593209c	 ldr         r2, [r3, #0x9C]
  0000c	e2804c11	 add         r4, r0, #0x11, 24
  00010	e5943098	 ldr         r3, [r4, #0x98]
  00014	e1530002	 cmp         r3, r2
  00018	0a000010	 beq         |$LN2@GetPktFrom@2|

; 2616 : 	{
; 2617 : #ifdef	TRACE_BUFFER
; 2618 : 		dwRxPktFromFull ++;

  0001c	e59f204c	 ldr         r2, [pc, #0x4C]
  00020	e3e038ff	 mvn         r3, #0xFF, 16

; 2619 : #endif
; 2620 : 		pPkt = pAdapter->FullPkt.dwPktArray[pAdapter->FullPkt.dwRdPtr];
; 2621 : 		INC_PTR(pAdapter->FullPkt.dwRdPtr);

  00024	e223e0fe	 eor         lr, r3, #0xFE
  00028	e5923000	 ldr         r3, [r2]
  0002c	e2833001	 add         r3, r3, #1
  00030	e5823000	 str         r3, [r2]
  00034	e5943098	 ldr         r3, [r4, #0x98]
  00038	e5942098	 ldr         r2, [r4, #0x98]
  0003c	e0801103	 add         r1, r0, r3, lsl #2
  00040	e2820001	 add         r0, r2, #1
  00044	e0832e90	 umull       r2, r3, r0, lr
  00048	e5911d94	 ldr         r1, [r1, #0xD94]
  0004c	e1a03423	 mov         r3, r3, lsr #8
  00050	e0833403	 add         r3, r3, r3, lsl #8
  00054	e0403003	 sub         r3, r0, r3
  00058	e5843098	 str         r3, [r4, #0x98]

; 2622 : 		return pPkt;

  0005c	ea000000	 b           |$LN1@GetPktFrom@2|
  00060		 |$LN2@GetPktFrom@2|

; 2623 : 	}
; 2624 : 	else 
; 2625 : 	{
; 2626 : 		return NULL;

  00060	e3a01000	 mov         r1, #0
  00064		 |$LN1@GetPktFrom@2|

; 2627 : 	}
; 2628 : }

  00064	e1a00001	 mov         r0, r1
  00068	e8bd4010	 ldmia       sp!, {r4, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$LN10@GetPktFrom@2|
  00070		 |$LN11@GetPktFrom@2|
  00070	00000000	 DCD         |dwRxPktFromFull|
  00074		 |$M53866|

			 ENDP  ; |GetPktFromFullArray|

	EXPORT	|PutPktToEmptyArray|

  00000			 AREA	 |.pdata|, PDATA
|$T53883| DCD	|$LN9@PutPktToEm|
	DCD	0x40002201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PutPktToEmptyArray| PROC

; 2631 : {

  00000		 |$LN9@PutPktToEm|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M53880|
  00004	e1a05000	 mov         r5, r0

; 2632 : 	if (!IS_ARRAY_FULL(pAdapter->EmptyPkt))

  00008	e5953d90	 ldr         r3, [r5, #0xD90]
  0000c	e3e028ff	 mvn         r2, #0xFF, 16
  00010	e22260fe	 eor         r6, r2, #0xFE
  00014	e2834001	 add         r4, r3, #1
  00018	e083e694	 umull       lr, r3, r4, r6
  0001c	e5952d8c	 ldr         r2, [r5, #0xD8C]
  00020	e1a03423	 mov         r3, r3, lsr #8
  00024	e0833403	 add         r3, r3, r3, lsl #8
  00028	e0443003	 sub         r3, r4, r3
  0002c	e1520003	 cmp         r2, r3
  00030	0a000010	 beq         |$LN2@PutPktToEm|

; 2633 : 	{
; 2634 : #ifdef	TRACE_BUFFER
; 2635 : 		dwRxPktToEmpty ++;

  00034	e59f2048	 ldr         r2, [pc, #0x48]

; 2636 : #endif
; 2637 : 		pAdapter->EmptyPkt.dwPktArray[pAdapter->EmptyPkt.dwWrPtr] = pPkt;
; 2638 : 		INC_PTR(pAdapter->EmptyPkt.dwWrPtr);
; 2639 : 		return TRUE;

  00038	e3a00001	 mov         r0, #1
  0003c	e5923000	 ldr         r3, [r2]
  00040	e2833001	 add         r3, r3, #1
  00044	e5823000	 str         r3, [r2]
  00048	e5953d90	 ldr         r3, [r5, #0xD90]
  0004c	e0853103	 add         r3, r5, r3, lsl #2
  00050	e5831988	 str         r1, [r3, #0x988]
  00054	e5953d90	 ldr         r3, [r5, #0xD90]
  00058	e2831001	 add         r1, r3, #1
  0005c	e0832691	 umull       r2, r3, r1, r6
  00060	e1a03423	 mov         r3, r3, lsr #8
  00064	e0833403	 add         r3, r3, r3, lsl #8
  00068	e0413003	 sub         r3, r1, r3
  0006c	e5853d90	 str         r3, [r5, #0xD90]

; 2644 : 	}
; 2645 : }

  00070	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$LN2@PutPktToEm|

; 2640 : 	}
; 2641 : 	else 
; 2642 : 	{
; 2643 : 		return FALSE;

  00078	e3a00000	 mov         r0, #0

; 2644 : 	}
; 2645 : }

  0007c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN10@PutPktToEm|
  00084		 |$LN11@PutPktToEm|
  00084	00000000	 DCD         |dwRxPktToEmpty|
  00088		 |$M53881|

			 ENDP  ; |PutPktToEmptyArray|

	EXPORT	|PutPktToFullArray|

  00000			 AREA	 |.pdata|, PDATA
|$T53898| DCD	|$LN9@PutPktToFu|
	DCD	0x40002401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PutPktToFullArray| PROC

; 2648 : {

  00000		 |$LN9@PutPktToFu|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M53895|
  00004	e1a06000	 mov         r6, r0

; 2649 : 	if (!IS_ARRAY_FULL(pAdapter->FullPkt))

  00008	e2865c11	 add         r5, r6, #0x11, 24
  0000c	e595309c	 ldr         r3, [r5, #0x9C]
  00010	e3e028ff	 mvn         r2, #0xFF, 16
  00014	e22270fe	 eor         r7, r2, #0xFE
  00018	e2834001	 add         r4, r3, #1
  0001c	e083e794	 umull       lr, r3, r4, r7
  00020	e2862c11	 add         r2, r6, #0x11, 24
  00024	e1a03423	 mov         r3, r3, lsr #8
  00028	e0833403	 add         r3, r3, r3, lsl #8
  0002c	e5922098	 ldr         r2, [r2, #0x98]
  00030	e0443003	 sub         r3, r4, r3
  00034	e1520003	 cmp         r2, r3
  00038	0a000010	 beq         |$LN2@PutPktToFu|

; 2650 : 	{
; 2651 : #ifdef	TRACE_BUFFER
; 2652 : 		dwRxPktToFull ++;

  0003c	e59f2048	 ldr         r2, [pc, #0x48]

; 2653 : #endif
; 2654 : 		pAdapter->FullPkt.dwPktArray[pAdapter->FullPkt.dwWrPtr] = pPkt;
; 2655 : 		INC_PTR(pAdapter->FullPkt.dwWrPtr);
; 2656 : 		return TRUE;

  00040	e3a00001	 mov         r0, #1
  00044	e5923000	 ldr         r3, [r2]
  00048	e2833001	 add         r3, r3, #1
  0004c	e5823000	 str         r3, [r2]
  00050	e595309c	 ldr         r3, [r5, #0x9C]
  00054	e0863103	 add         r3, r6, r3, lsl #2
  00058	e5831d94	 str         r1, [r3, #0xD94]
  0005c	e595309c	 ldr         r3, [r5, #0x9C]
  00060	e2831001	 add         r1, r3, #1
  00064	e0832791	 umull       r2, r3, r1, r7
  00068	e1a03423	 mov         r3, r3, lsr #8
  0006c	e0833403	 add         r3, r3, r3, lsl #8
  00070	e0413003	 sub         r3, r1, r3
  00074	e585309c	 str         r3, [r5, #0x9C]

; 2661 : 	}
; 2662 : }

  00078	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN2@PutPktToFu|

; 2657 : 	}
; 2658 : 	else 
; 2659 : 	{
; 2660 : 		return FALSE;

  00080	e3a00000	 mov         r0, #0

; 2661 : 	}
; 2662 : }

  00084	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN10@PutPktToFu|
  0008c		 |$LN11@PutPktToFu|
  0008c	00000000	 DCD         |dwRxPktToFull|
  00090		 |$M53896|

			 ENDP  ; |PutPktToFullArray|

	EXPORT	|HandlerRxDPC|
	IMPORT	|NdisQueryPacket|
	IMPORT	|memcmp|

  00000			 AREA	 |.pdata|, PDATA
|$T53934| DCD	|$LN42@HandlerRxD|
	DCD	0x40006903
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HandlerRxDPC| PROC

; 2670 : {

  00000		 |$LN42@HandlerRxD|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e59fc194	 ldr         r12, [pc, #0x194]
  00008	e08dd00c	 add         sp, sp, r12
  0000c		 |$M53931|
  0000c	e1a05000	 mov         r5, r0

; 2671 : 	PNDIS_PACKET 	RxPacketArrayIndicate[MAX_RXPACKETS_IN_QUEUE]; 	// Packet array for indication
; 2672 : 	PNDIS_PACKET 	pPacket;
; 2673 : #ifdef	FOR_CETK
; 2674 : 	PNDIS_BUFFER 	pBuffer = NULL;

  00010	e3a03000	 mov         r3, #0

; 2675 : 	PUCHAR 		 	pucBufAddress = NULL;
; 2676 : 	UINT 		 	uiBufLen = 0;
; 2677 : #endif
; 2678 : 	DWORD 		 	iy, numRxToIndicate;
; 2679 : 	DWORD			dwDeferedTxPktCount;
; 2680 : 	DPC_STATUS		RetStatus = DPC_STATUS_DONE;
; 2681 : 
; 2682 : 	SMSC_TRACE0(DBG_RX,"+HandlerRxDPC\r\n");
; 2683 : 	SET_GPIO(pAdapter->lan9118_data.dwLanBase, GPIO1);
; 2684 : 
; 2685 : 	numRxToIndicate=0UL;
; 2686 : 	dwDeferedTxPktCount = QUEUE_COUNT(&pAdapter->TxDeferedPkt);
; 2687 : 	while ((pPacket = GetPktFromFullArray(pAdapter)) != NULL)

  00014	e595b17c	 ldr         r11, [r5, #0x17C]
  00018	e58d3008	 str         r3, [sp, #8]
  0001c	e3a0a000	 mov         r10, #0
  00020	e3a04000	 mov         r4, #0
  00024	eb000000	 bl          GetPktFromFullArray
  00028	e1b07000	 movs        r7, r0
  0002c	0a000054	 beq         |$LN5@HandlerRxD|
  00030	e28d600c	 add         r6, sp, #0xC
  00034	e58d6004	 str         r6, [sp, #4]
  00038		 |$LN39@HandlerRxD|

; 2688 : 	{
; 2689 : #ifdef	FOR_CETK
; 2690 : 		// If Multicast Packet and MULTICAST flag is ON
; 2691 : 		if ((GET_PACKET_RESERVED_RXSTS(pPacket) & RX_STS_MULTICAST) &&
; 2692 : 			((pAdapter->ulPacketFilter & (DWORD)(NDIS_PACKET_TYPE_ALL_MULTICAST|NDIS_PACKET_TYPE_PROMISCUOUS|NDIS_PACKET_TYPE_MULTICAST)) == (DWORD)NDIS_PACKET_TYPE_MULTICAST))

  00038	e5973020	 ldr         r3, [r7, #0x20]
  0003c	e2859c19	 add         r9, r5, #0x19, 24
  00040	e3a0e000	 mov         lr, #0
  00044	e3130b01	 tst         r3, #1, 22
  00048	0a000025	 beq         |$LN12@HandlerRxD|
  0004c	e595314c	 ldr         r3, [r5, #0x14C]
  00050	e2033026	 and         r3, r3, #0x26
  00054	e3530002	 cmp         r3, #2
  00058	1a000021	 bne         |$LN12@HandlerRxD|

; 2693 : 		{
; 2694 : 			UINT	ix;
; 2695 : 
; 2696 : 			NdisQueryPacket(pPacket, NULL, NULL, &pBuffer, NULL);

  0005c	e28d3008	 add         r3, sp, #8
  00060	e3a02000	 mov         r2, #0
  00064	e3a01000	 mov         r1, #0
  00068	e1a00007	 mov         r0, r7
  0006c	e58de000	 str         lr, [sp]
  00070	eb000000	 bl          NdisQueryPacket

; 2697 : 			NdisQueryBuffer(pBuffer, (PVOID*)(&pucBufAddress), &uiBufLen);

  00074	e59d3008	 ldr         r3, [sp, #8]
  00078	e3530000	 cmp         r3, #0
  0007c	03a08000	 moveq       r8, #0
  00080	15938004	 ldrne       r8, [r3, #4]

; 2698 : 			if ((pucBufAddress[0] & 0x03) == 0x01) 

  00084	e5d83000	 ldrb        r3, [r8]
  00088	e2033003	 and         r3, r3, #3
  0008c	e3530001	 cmp         r3, #1
  00090	1a000013	 bne         |$LN12@HandlerRxD|

; 2699 : 			{
; 2700 : 				for (ix = 0U; ix < DEFAULT_MULTICASTLISTMAX; ix++) 

  00094	e3a06000	 mov         r6, #0
  00098	e28990d0	 add         r9, r9, #0xD0
  0009c		 |$LL16@HandlerRxD|

; 2701 : 				{
; 2702 : 					if (NdisEqualMemory(pucBufAddress, pAdapter->ucAddresses[ix], ETHER_LENGTH_OF_ADDRESS))

  0009c	e3a02006	 mov         r2, #6
  000a0	e1a01009	 mov         r1, r9
  000a4	e1a00008	 mov         r0, r8
  000a8	eb000000	 bl          memcmp
  000ac	e3500000	 cmp         r0, #0
  000b0	0a000003	 beq         |$LN32@HandlerRxD|
  000b4	e2866001	 add         r6, r6, #1
  000b8	e3560020	 cmp         r6, #0x20
  000bc	e2899006	 add         r9, r9, #6
  000c0	3afffff5	 bcc         |$LL16@HandlerRxD|
  000c4		 |$LN32@HandlerRxD|

; 2703 : 					{
; 2704 : 						// matched to address in list
; 2705 : 						break;
; 2706 : 					}
; 2707 : 				}
; 2708 : 				if (ix == DEFAULT_MULTICASTLISTMAX)

  000c4	e3560020	 cmp         r6, #0x20
  000c8	1a000004	 bne         |$LN38@HandlerRxD|

; 2709 : 				{
; 2710 : 					// nothing matched
; 2711 : 					// Put Packet back to EmptyArray
; 2712 : 					if (PutPktToEmptyArray(pAdapter, pPacket) == FALSE)

  000cc	e1a01007	 mov         r1, r7
  000d0	e1a00005	 mov         r0, r5
  000d4	eb000000	 bl          PutPktToEmptyArray

; 2713 : 					{
; 2714 : 						SMSC_TRACE0(DBG_RX, "Empty Array Full\r\n");
; 2715 : 					}
; 2716 : 					continue;		// continue to while

  000d8	e59d6004	 ldr         r6, [sp, #4]
  000dc	ea000009	 b           |$LN9@HandlerRxD|
  000e0		 |$LN38@HandlerRxD|
  000e0	e59d6004	 ldr         r6, [sp, #4]
  000e4		 |$LN12@HandlerRxD|

; 2717 : 				}
; 2718 : 			}
; 2719 : 		}
; 2720 : #endif
; 2721 : 		RxPacketArrayIndicate[numRxToIndicate] = pPacket;
; 2722 : 		numRxToIndicate++;
; 2723 : 		if (numRxToIndicate > (DWORD)MAX_RXPACKETS_IN_QUEUE)

  000e4	e4867004	 str         r7, [r6], #4
  000e8	e2844001	 add         r4, r4, #1
  000ec	e3540c01	 cmp         r4, #1, 24
  000f0	e58d6004	 str         r6, [sp, #4]
  000f4	8a000009	 bhi         |$LN37@HandlerRxD|

; 2724 : 		{
; 2725 : 			SMSC_WARNING0("Exceed MAX_RXPACKETS_IN_QUEUE!!!\r\n");
; 2726 : 			break;
; 2727 : 		}
; 2728 : #if 1
; 2729 : 		if ((dwDeferedTxPktCount > 100UL) &&
; 2730 : 			(numRxToIndicate > (2UL * dwDeferedTxPktCount)))

  000f8	e35b0064	 cmp         r11, #0x64
  000fc	9a000001	 bls         |$LN9@HandlerRxD|
  00100	e154008b	 cmp         r4, r11, lsl #1
  00104	8a000004	 bhi         |$LN34@HandlerRxD|
  00108		 |$LN9@HandlerRxD|

; 2675 : 	PUCHAR 		 	pucBufAddress = NULL;
; 2676 : 	UINT 		 	uiBufLen = 0;
; 2677 : #endif
; 2678 : 	DWORD 		 	iy, numRxToIndicate;
; 2679 : 	DWORD			dwDeferedTxPktCount;
; 2680 : 	DPC_STATUS		RetStatus = DPC_STATUS_DONE;
; 2681 : 
; 2682 : 	SMSC_TRACE0(DBG_RX,"+HandlerRxDPC\r\n");
; 2683 : 	SET_GPIO(pAdapter->lan9118_data.dwLanBase, GPIO1);
; 2684 : 
; 2685 : 	numRxToIndicate=0UL;
; 2686 : 	dwDeferedTxPktCount = QUEUE_COUNT(&pAdapter->TxDeferedPkt);
; 2687 : 	while ((pPacket = GetPktFromFullArray(pAdapter)) != NULL)

  00108	e1a00005	 mov         r0, r5
  0010c	eb000000	 bl          GetPktFromFullArray
  00110	e1b07000	 movs        r7, r0
  00114	0a000001	 beq         |$LN37@HandlerRxD|
  00118	eaffffc6	 b           |$LN39@HandlerRxD|
  0011c		 |$LN34@HandlerRxD|

; 2731 : 		{
; 2732 : 			RetStatus = DPC_STATUS_PENDING;

  0011c	e3a0a001	 mov         r10, #1
  00120		 |$LN37@HandlerRxD|

; 2733 : 			break;
; 2734 : 		}
; 2735 : #endif
; 2736 : 	}
; 2737 : 
; 2738 : 	// Indicate packets.
; 2739 : 	if (numRxToIndicate)

  00120	e3540000	 cmp         r4, #0
  00124	0a000016	 beq         |$LN5@HandlerRxD|

; 2740 : 	{
; 2741 : 		NdisMIndicateReceivePacket(pAdapter->hMiniportAdapterHandle,
; 2742 : 								   RxPacketArrayIndicate,
; 2743 : 								   (UINT)numRxToIndicate);

  00128	e5950000	 ldr         r0, [r5]
  0012c	e1a02004	 mov         r2, r4
  00130	e28d100c	 add         r1, sp, #0xC
  00134	e5903108	 ldr         r3, [r0, #0x108]
  00138	e1a0e00f	 mov         lr, pc
  0013c	e12fff13	 bx          r3

; 2744 : 
; 2745 : 		for (iy=0UL; iy<numRxToIndicate; iy++)

  00140	e3540000	 cmp         r4, #0
  00144	0a00000e	 beq         |$LN5@HandlerRxD|
  00148	e59f704c	 ldr         r7, [pc, #0x4C]
  0014c	e28d600c	 add         r6, sp, #0xC
  00150		 |$LL7@HandlerRxD|

; 2746 : 		{
; 2747 : 			if (NDIS_GET_PACKET_STATUS(RxPacketArrayIndicate[iy]) == NDIS_STATUS_SUCCESS) 

  00150	e5961000	 ldr         r1, [r6]
  00154	e1d131be	 ldrh        r3, [r1, #0x1E]
  00158	e0833001	 add         r3, r3, r1
  0015c	e593301c	 ldr         r3, [r3, #0x1C]
  00160	e3530000	 cmp         r3, #0

; 2748 : 			{
; 2749 : #ifdef	TRACE_BUFFER
; 2750 : 				dwRxNumIndicate++;

  00164	05973000	 ldreq       r3, [r7]

; 2751 : #endif
; 2752 : 				if (PutPktToEmptyArray(pAdapter, RxPacketArrayIndicate[iy]) == FALSE) 

  00168	01a00005	 moveq       r0, r5
  0016c	02833001	 addeq       r3, r3, #1
  00170	05873000	 streq       r3, [r7]
  00174	0b000000	 bleq        PutPktToEmptyArray
  00178	e2866004	 add         r6, r6, #4
  0017c	e2544001	 subs        r4, r4, #1
  00180	1afffff2	 bne         |$LL7@HandlerRxD|
  00184		 |$LN5@HandlerRxD|

; 2753 : 				{
; 2754 : 					SMSC_TRACE0(DBG_RX, "Empty Array Full\r\n");
; 2755 : 					SMSC_WARNING0("EmptyBuffer is Full\r\n");
; 2756 : 				}
; 2757 : 			}
; 2758 : 			else
; 2759 : 			{
; 2760 : 				if (NDIS_GET_PACKET_STATUS(RxPacketArrayIndicate[iy]) != NDIS_STATUS_PENDING)
; 2761 : 					SMSC_WARNING0("Packet is returned to Non-NDIS_STATUS_SUCCESS.\r\n");
; 2762 : 			}
; 2763 : 		}
; 2764 : 		SMSC_TRACE1(DBG_RX,"numRxToIndicate = %d\r\n", numRxToIndicate);
; 2765 : 	}
; 2766 : 
; 2767 : 	CLEAR_GPIO(pAdapter->lan9118_data.dwLanBase, GPIO1);
; 2768 : 	SMSC_TRACE0(DBG_RX,"-HandlerRxDPC\r\n");
; 2769 : 
; 2770 : 	return RetStatus;
; 2771 : }

  00184	e1a0000a	 mov         r0, r10
  00188	e3a0cb01	 mov         r12, #1, 22
  0018c	e38cc00c	 orr         r12, r12, #0xC
  00190	e08dd00c	 add         sp, sp, r12
  00194	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00198	e12fff1e	 bx          lr
  0019c		 |$LN43@HandlerRxD|
  0019c		 |$LN44@HandlerRxD|
  0019c	00000000	 DCD         |dwRxNumIndicate|
  001a0		 |$LN45@HandlerRxD|
  001a0	fffffbf4	 DCD         0xfffffbf4
  001a4		 |$M53932|

			 ENDP  ; |HandlerRxDPC|

	EXPORT	|RxFastForward|
	IMPORT	|NdisStallExecution|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T53959| DCD	|$LN17@RxFastForw|
	DCD	0x40001401
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RxFastForward| PROC

; 2778 : {

  00000		 |$LN17@RxFastForw|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M53956|

; 2779 : 	DWORD dwLanBase, dwTimeOut;
; 2780 : 
; 2781 : 	// avoid lint error
; 2782 : 	dwDWCount = dwDWCount;
; 2783 : 
; 2784 : 	dwLanBase = pAdapter->lan9118_data.dwLanBase;

  00004	e5905008	 ldr         r5, [r0, #8]

; 2785 : 
; 2786 : 	SetRegDW( dwLanBase, RX_DP_CTL, RX_DP_CTL_FFWD_BUSY_ );

  00008	e3a03102	 mov         r3, #2, 2
  0000c	e3a01c27	 mov         r1, #0x27, 24
  00010	e5853078	 str         r3, [r5, #0x78]

; 2787 : 
; 2788 : 	// dummy read required by spec.
; 2789 : 	dwTimeOut = GetRegDW(dwLanBase, BYTE_TEST);

  00014	e5953064	 ldr         r3, [r5, #0x64]

; 2790 : 
; 2791 : 	dwTimeOut = 10000UL;
; 2792 : 	while ((GetRegDW(dwLanBase, RX_DP_CTL) & RX_DP_CTL_FFWD_BUSY_) &&
; 2793 : 		   (dwTimeOut > 0UL)) 

  00018	e5952078	 ldr         r2, [r5, #0x78]
  0001c	e3814010	 orr         r4, r1, #0x10
  00020	e3120102	 tst         r2, #2, 2
  00024	0a000007	 beq         |$LN14@RxFastForw|
  00028		 |$LL3@RxFastForw|
  00028	e3540000	 cmp         r4, #0
  0002c	0a000005	 beq         |$LN14@RxFastForw|

; 2794 : 	{
; 2795 : 		SMSC_MICRO_DELAY(1U);

  00030	e3a00001	 mov         r0, #1
  00034	eb000000	 bl          NdisStallExecution
  00038	e5953078	 ldr         r3, [r5, #0x78]

; 2796 : 		dwTimeOut--;

  0003c	e2444001	 sub         r4, r4, #1
  00040	e3130102	 tst         r3, #2, 2
  00044	1afffff7	 bne         |$LL3@RxFastForw|
  00048		 |$LN14@RxFastForw|

; 2797 : 	}
; 2798 : 
; 2799 : 	if(dwTimeOut == 0UL) {
; 2800 : 		SMSC_WARNING1("Timeout in RX FFWD. RX_DP_CTRL=0x%x", GetRegDW(dwLanBase, RX_DP_CTL));
; 2801 : 	}
; 2802 : 	
; 2803 : 
; 2804 : }

  00048	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M53957|

			 ENDP  ; |RxFastForward|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|HandlerRxISR|
	IMPORT	|EnableCPUInt|
	IMPORT	|DmaStartXfer|
	IMPORT	|DmaComplete|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54019| DCD	|$LN57@HandlerRxI|
	DCD	0xc000e402

  00000			 AREA	 |.xdata|, DATA
|$T54015| DCD	0xffffffd8
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T54015|

  00008		 |HandlerRxISR| PROC

; 2810 : {

  00008		 |$LN57@HandlerRxI|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dd028	 sub         sp, sp, #0x28
  00010		 |$M54016|
  00010	e1a04000	 mov         r4, r0
  00014	e59f3378	 ldr         r3, [pc, #0x378]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3024	 str         r3, [sp, #0x24]

; 2811 : 	PUCHAR pucBufAddress;
; 2812 : 	UINT uiBufLen;
; 2813 : 	PNDIS_BUFFER pBuffer;
; 2814 : 	PNDIS_PACKET pPacket;
; 2815 : 	DWORD RxStatus, packet_len, dw;
; 2816 : 	DWORD numPacketReceived;
; 2817 : 	DWORD RxFFCountDW;
; 2818 : 	DMA_XFER dmaXfer;
; 2819 : 
; 2820 : 	SMSC_TRACE0(DBG_RX,"+HandlerRxISR\r\n");
; 2821 : 
; 2822 : 	dw=GetRegDW(pAdapter->lan9118_data.dwLanBase, RX_FIFO_INF);

  00020	e5943008	 ldr         r3, [r4, #8]

; 2823 : 	numPacketReceived = (dw & 0x00FF0000UL) >> 16;
; 2824 : 	SMSC_TRACE1(DBG_RX,"numPacketReceived = %d\r\n", numPacketReceived);
; 2825 : 
; 2826 : 	pAdapter->RxDPCNeeded = (BOOLEAN)FALSE;

  00024	e2842a01	 add         r2, r4, #1, 20
  00028	e3a01000	 mov         r1, #0
  0002c	e593307c	 ldr         r3, [r3, #0x7C]
  00030	e5c219c2	 strb        r1, [r2, #0x9C2]

; 2827 : 	while(numPacketReceived)

  00034	e31308ff	 tst         r3, #0xFF, 16
  00038	0a0000cf	 beq         |$LN24@HandlerRxI|
  0003c	e59f834c	 ldr         r8, [pc, #0x34C]
  00040	e3e0711f	 mvn         r7, #0x1F, 2
  00044	e284bc1a	 add         r11, r4, #0x1A, 24
  00048	e284ac1a	 add         r10, r4, #0x1A, 24
  0004c	e2849c1a	 add         r9, r4, #0x1A, 24
  00050	e2842a01	 add         r2, r4, #1, 20
  00054	e2841a01	 add         r1, r4, #1, 20
  00058		 |$LL25@HandlerRxI|

; 2828 : 	{
; 2829 : #ifdef	TRACE_BUFFER
; 2830 : 		dwRxTotalPkt++;

  00058	e5983000	 ldr         r3, [r8]
  0005c	e2833001	 add         r3, r3, #1
  00060	e5883000	 str         r3, [r8]

; 2831 : #endif
; 2832 : 		// Pop out the status DW.
; 2833 : 		RxStatus = GetRegDW(pAdapter->lan9118_data.dwLanBase, RX_STATUS_FIFO_PORT);

  00064	e5943008	 ldr         r3, [r4, #8]
  00068	e5935040	 ldr         r5, [r3, #0x40]

; 2834 : 		packet_len = (RxStatus&0x3FFF0000UL)>>16;

  0006c	e1a03105	 mov         r3, r5, lsl #2
  00070	e1a06923	 mov         r6, r3, lsr #18

; 2835 : 
; 2836 : 		// If no error, make the transfer.
; 2837 : #ifdef	FOR_CETK
; 2838 : 		// For CETK
; 2839 : 		// NOTE CETK sends wrong length 802.3 Frame :-(
; 2840 : 		// So, ignore that error when CETK is running
; 2841 : 		if (!(RxStatus & RX_STS_ES))

  00074	e3150902	 tst         r5, #2, 18
  00078	1a0000a7	 bne         |$LN23@HandlerRxI|

; 2842 : #else
; 2843 : 		// Should discard packet with length error
; 2844 : 		if (!(RxStatus & RX_STS_ES) && 
; 2845 : 			!(((RxStatus & RX_STS_LENGTH_ERR) == RX_STS_LENGTH_ERR) && 
; 2846 : 			  ((RxStatus & RX_STS_FRAME_TYPE) == 0UL)))
; 2847 : #endif
; 2848 : 		{
; 2849 : 			if ((pPacket = GetPktFromEmptyArray(pAdapter)) != NULL)

  0007c	e1a00004	 mov         r0, r4
  00080	eb000000	 bl          GetPktFromEmptyArray
  00084	e1b07000	 movs        r7, r0
  00088	0a000071	 beq         |$LN22@HandlerRxI|

; 2850 : 			{
; 2851 : 				SMSC_TRACE1(DBG_RX,"pPacket = 0x%x\r\n", pPacket);
; 2852 : 
; 2853 : 				//
; 2854 : 				// Do the transfer.
; 2855 : 				//
; 2856 : 		  
; 2857 : 				// Prepare the descripter:
; 2858 : 				//		set the HeaderSize of OOB data to 14
; 2859 : 				//		SizeMediaSpecificInfo = 0
; 2860 : 				//		MediaSpecificInformation = NULL
; 2861 : 				//		Set status to: Resources or Success
; 2862 : 				NDIS_SET_PACKET_HEADER_SIZE(pPacket, ETHER_HEADER_SIZE);

  0008c	e1d711be	 ldrh        r1, [r7, #0x1E]

; 2863 : 				NDIS_SET_PACKET_STATUS(pPacket, NDIS_STATUS_SUCCESS);
; 2864 : 
; 2865 : 				// Query packet and buffer to get the buffer addr.
; 2866 : 				NdisQueryPacket (pPacket,
; 2867 : 								 NULL, 
; 2868 : 								 NULL, 
; 2869 : 								 &pBuffer, 
; 2870 : 								 NULL);

  00090	e3a0000e	 mov         r0, #0xE
  00094	e3a08000	 mov         r8, #0
  00098	e0811007	 add         r1, r1, r7
  0009c	e5810010	 str         r0, [r1, #0x10]
  000a0	e1d7e1be	 ldrh        lr, [r7, #0x1E]
  000a4	e28d3004	 add         r3, sp, #4
  000a8	e3a02000	 mov         r2, #0
  000ac	e08ee007	 add         lr, lr, r7
  000b0	e58e801c	 str         r8, [lr, #0x1C]
  000b4	e3a0e000	 mov         lr, #0
  000b8	e3a01000	 mov         r1, #0
  000bc	e1a00007	 mov         r0, r7
  000c0	e58de000	 str         lr, [sp]
  000c4	eb000000	 bl          NdisQueryPacket

; 2871 : 
; 2872 : 				NdisQueryBuffer (pBuffer, 
; 2873 : 								 (PVOID*)(&pucBufAddress),
; 2874 : 								 &uiBufLen);

  000c8	e59d3004	 ldr         r3, [sp, #4]
  000cc	e3530000	 cmp         r3, #0
  000d0	03a02000	 moveq       r2, #0
  000d4	15932004	 ldrne       r2, [r3, #4]

; 2875 : 
; 2876 : 				SET_PACKET_RESERVED_RXSTS(pPacket, RxStatus);
; 2877 : 				//
; 2878 : 				// Read data from nic
; 2879 : 				//
; 2880 : 				if (pAdapter->fRxDMAMode)

  000d8	e2843a01	 add         r3, r4, #1, 20
  000dc	e5875020	 str         r5, [r7, #0x20]
  000e0	e59331a0	 ldr         r3, [r3, #0x1A0]
  000e4	e3530000	 cmp         r3, #0
  000e8	0a00002e	 beq         |$LN20@HandlerRxI|

; 2881 : 				{
; 2882 : 					//
; 2883 : 					// DMA
; 2884 : 					//
; 2885 : 					dmaXfer.DMABaseVA = pAdapter->DMABaseVA;

  000ec	e2843a01	 add         r3, r4, #1, 20
  000f0	e59331a8	 ldr         r3, [r3, #0x1A8]

; 2886 : 					// Wait for DMA to complete.
; 2887 : 					DmaComplete(&dmaXfer, DMA_RX_CH);

  000f4	e3a01002	 mov         r1, #2
  000f8	e28d0008	 add         r0, sp, #8
  000fc	e58d3008	 str         r3, [sp, #8]
  00100	eb000000	 bl          DmaComplete

; 2888 : 					dmaXfer.pdwBuf = (DWORD*)(((((DWORD)GET_PACKET_RESERVED_PA(pPacket))&~3UL)+(CACHE_LINE_BYTES-1UL))&~(CACHE_LINE_BYTES-1UL)); // There is 2-byte offset.

  00104	e5973024	 ldr         r3, [r7, #0x24]

; 2889 : 					dmaXfer.dwDwCnt = ((packet_len+2UL+(CACHE_LINE_BYTES-1UL))&~(CACHE_LINE_BYTES-1UL))>>2;
; 2890 : 					dmaXfer.fMemWr = (BOOLEAN)TRUE;
; 2891 : 					dmaXfer.fMemAddrInc = (BOOLEAN)TRUE;
; 2892 : 					dmaXfer.dwDmaCh = DMA_RX_CH;
; 2893 : 					dmaXfer.fClBurst = (BOOLEAN)TRUE;
; 2894 : 					dmaXfer.dwLanReg = pAdapter->ulIoBaseAddress;  // Phys address of 9118 I/O base

  00108	e5941124	 ldr         r1, [r4, #0x124]
  0010c	e2862021	 add         r2, r6, #0x21
  00110	e3c33003	 bic         r3, r3, #3
  00114	e283301c	 add         r3, r3, #0x1C
  00118	e3c3301f	 bic         r3, r3, #0x1F
  0011c	e58d3010	 str         r3, [sp, #0x10]

; 2895 : 					dmaXfer.fLanAddrInc = (BOOLEAN)FALSE;
; 2896 : 
; 2897 : 					SMSC_TRACE1(DBG_DMA,"pucBufAddress=0x%x\r\n", pucBufAddress);
; 2898 : 					SMSC_TRACE1(DBG_DMA,"packet_len=%d\r\n", packet_len);
; 2899 : 					SMSC_TRACE1(DBG_DMA,"dwDwCnt=%d\r\n", dmaXfer.dwDwCnt);
; 2900 : 
; 2901 : 					// Kick off DMA
; 2902 : 					if (!DmaStartXfer(&dmaXfer)) {

  00120	e3a03001	 mov         r3, #1
  00124	e5cd301c	 strb        r3, [sp, #0x1C]
  00128	e3a03001	 mov         r3, #1
  0012c	e5cd301f	 strb        r3, [sp, #0x1F]
  00130	e3a03002	 mov         r3, #2
  00134	e58d3014	 str         r3, [sp, #0x14]
  00138	e3a03001	 mov         r3, #1
  0013c	e3e0011f	 mvn         r0, #0x1F, 2
  00140	e5cd301d	 strb        r3, [sp, #0x1D]
  00144	e3a03000	 mov         r3, #0
  00148	e0002122	 and         r2, r0, r2, lsr #2
  0014c	e28d0008	 add         r0, sp, #8
  00150	e5cd301e	 strb        r3, [sp, #0x1E]
  00154	e58d2018	 str         r2, [sp, #0x18]
  00158	e58d100c	 str         r1, [sp, #0xC]
  0015c	eb000000	 bl          DmaStartXfer

; 2903 : 						SMSC_WARNING0("Rx DMA Failed.\r\n");
; 2904 : 					}
; 2905 : 
; 2906 : 					if (pAdapter->f100RxEnWorkaroundDone == 0L)

  00160	e59b30cc	 ldr         r3, [r11, #0xCC]
  00164	e3530000	 cmp         r3, #0
  00168	1a00002c	 bne         |$LN12@HandlerRxI|

; 2907 : 					{
; 2908 : 						if (GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_STS) & INT_STS_RXSTOP_INT_)

  0016c	e5943008	 ldr         r3, [r4, #8]
  00170	e5933058	 ldr         r3, [r3, #0x58]
  00174	e3130401	 tst         r3, #1, 8
  00178	0a000025	 beq         |$LN13@HandlerRxI|

; 2909 : 						{
; 2910 : 							UpdateFilterAndMacReg(pAdapter);

  0017c	e1a00004	 mov         r0, r4
  00180	eb000000	 bl          UpdateFilterAndMacReg

; 2911 : 							// Enable RX 
; 2912 : 							EnableMacRxEn(pAdapter);

  00184	e1a00004	 mov         r0, r4
  00188	eb000000	 bl          EnableMacRxEn

; 2913 : 							EnableCPUInt();

  0018c	eb000000	 bl          EnableCPUInt

; 2914 : 							// Wait for at least 64uSec after enabling MAC_CR_RXEN
; 2915 : 							DelayUsingFreeRun(pAdapter, 64L);

  00190	e3a01040	 mov         r1, #0x40
  00194	e1a00004	 mov         r0, r4
  00198	eb000000	 bl          DelayUsingFreeRun

; 2916 : 							pAdapter->f100RxEnWorkaroundDone = 1L;

  0019c	e3a03001	 mov         r3, #1
  001a0	e58b30cc	 str         r3, [r11, #0xCC]

; 2917 : 						}
; 2918 : 						else
; 2919 : 						{
; 2920 : 							pAdapter->SWDPCNeeded = (BOOLEAN)TRUE;
; 2921 : 						}
; 2922 : 					}
; 2923 : 				}
; 2924 : 				else

  001a4	ea00001d	 b           |$LN12@HandlerRxI|
  001a8		 |$LN20@HandlerRxI|

; 2925 : 				{
; 2926 : 					//
; 2927 : 					// PIO
; 2928 : 					//
; 2929 : 					ReadFifo(pAdapter->lan9118_data.dwLanBase, 
; 2930 : 							 RX_DATA_FIFO_PORT, 
; 2931 : 							 (DWORD*)(((DWORD)pucBufAddress)&~3UL),   // There is 2-byte offset in buffer.
; 2932 : 							 (((packet_len+2UL+3UL)>>2)));

  001a8	e2863005	 add         r3, r6, #5
  001ac	e5940008	 ldr         r0, [r4, #8]
  001b0	e1b01123	 movs        r1, r3, lsr #2
  001b4	e3c22003	 bic         r2, r2, #3
  001b8	0a000003	 beq         |$LN38@HandlerRxI|
  001bc		 |$LL39@HandlerRxI|
  001bc	e5903000	 ldr         r3, [r0]
  001c0	e2511001	 subs        r1, r1, #1
  001c4	e4823004	 str         r3, [r2], #4
  001c8	1afffffb	 bne         |$LL39@HandlerRxI|
  001cc		 |$LN38@HandlerRxI|

; 2933 : 					if (pAdapter->f100RxEnWorkaroundDone == 0L)

  001cc	e59a30cc	 ldr         r3, [r10, #0xCC]
  001d0	e3530000	 cmp         r3, #0
  001d4	1a000011	 bne         |$LN12@HandlerRxI|

; 2934 : 					{
; 2935 : 						if (GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_STS) & INT_STS_RXSTOP_INT_)

  001d8	e5943008	 ldr         r3, [r4, #8]
  001dc	e5933058	 ldr         r3, [r3, #0x58]
  001e0	e3130401	 tst         r3, #1, 8
  001e4	0a00000a	 beq         |$LN13@HandlerRxI|

; 2936 : 						{
; 2937 : 							UpdateFilterAndMacReg(pAdapter);

  001e8	e1a00004	 mov         r0, r4
  001ec	eb000000	 bl          UpdateFilterAndMacReg

; 2938 : 							// Enable RX 
; 2939 : 							EnableMacRxEn(pAdapter);

  001f0	e1a00004	 mov         r0, r4
  001f4	eb000000	 bl          EnableMacRxEn

; 2940 : 							EnableCPUInt();

  001f8	eb000000	 bl          EnableCPUInt

; 2941 : 							// Wait for at least 64uSec after enabling MAC_CR_RXEN
; 2942 : 							DelayUsingFreeRun(pAdapter, 64L);

  001fc	e3a01040	 mov         r1, #0x40
  00200	e1a00004	 mov         r0, r4
  00204	eb000000	 bl          DelayUsingFreeRun

; 2943 : 							pAdapter->f100RxEnWorkaroundDone = 1L;

  00208	e3a03001	 mov         r3, #1
  0020c	e58a30cc	 str         r3, [r10, #0xCC]

; 2944 : 						}
; 2945 : 						else

  00210	ea000002	 b           |$LN12@HandlerRxI|
  00214		 |$LN13@HandlerRxI|

; 2946 : 						{
; 2947 : 							pAdapter->SWDPCNeeded = (BOOLEAN)TRUE;

  00214	e2843a01	 add         r3, r4, #1, 20
  00218	e3a02001	 mov         r2, #1
  0021c	e5c329c5	 strb        r2, [r3, #0x9C5]
  00220		 |$LN12@HandlerRxI|

; 2948 : 						}
; 2949 : 					}
; 2950 : 				}
; 2951 : 
; 2952 : 				// Adjust the buffer length
; 2953 : 				// Remove CRC size (4bytes)
; 2954 : 				NdisAdjustBufferLength(pBuffer, (UINT)packet_len-4U);

  00220	e59d2004	 ldr         r2, [sp, #4]
  00224	e2463004	 sub         r3, r6, #4

; 2955 : 
; 2956 : 				if (PutPktToFullArray(pAdapter, pPacket) == FALSE)

  00228	e1a01007	 mov         r1, r7
  0022c	e1a00004	 mov         r0, r4
  00230	e5823008	 str         r3, [r2, #8]
  00234	eb000000	 bl          PutPktToFullArray
  00238	e59f8150	 ldr         r8, [pc, #0x150]
  0023c	e3500000	 cmp         r0, #0
  00240	0a000030	 beq         |$LN9@HandlerRxI|

; 2957 : 				{
; 2958 : 					SMSC_TRACE0(DBG_RX, "Full Array Full!\r\n");
; 2959 : 					SMSC_WARNING0("Full Array Full!\r\n");
; 2960 : 				}
; 2961 : 				else 
; 2962 : 				{
; 2963 : 					//Update Rx stats
; 2964 : 					(pAdapter->ulFramesRcvGood)++;

  00244	e594312c	 ldr         r3, [r4, #0x12C]
  00248	e2833001	 add         r3, r3, #1
  0024c	e584312c	 str         r3, [r4, #0x12C]

; 2965 : 					SMSC_TRACE0(DBG_RX,"1 packet read successfully\r\n");
; 2966 : 				}
; 2967 : 			}
; 2968 : 			else

  00250	ea00002c	 b           |$LN9@HandlerRxI|
  00254		 |$LN22@HandlerRxI|

; 2969 : 			{
; 2970 : #ifdef	TRACE_BUFFER
; 2971 : 				dwRxDiscard++;

  00254	e5983004	 ldr         r3, [r8, #4]
  00258	e2833001	 add         r3, r3, #1
  0025c	e5883004	 str         r3, [r8, #4]

; 2972 : #endif
; 2973 : 				// Out of buffer. Read off and discard the packet.
; 2974 : 				if (pAdapter->fRxDMAMode)

  00260	e2843a01	 add         r3, r4, #1, 20
  00264	e59331a0	 ldr         r3, [r3, #0x1A0]
  00268	e3530000	 cmp         r3, #0
  0026c	0a000009	 beq         |$LN8@HandlerRxI|

; 2975 : 				{
; 2976 : 					//
; 2977 : 					// DMA
; 2978 : 					//
; 2979 : 					// Wait for DMA to complete.
; 2980 : 					dmaXfer.DMABaseVA = pAdapter->DMABaseVA;

  00270	e2843a01	 add         r3, r4, #1, 20
  00274	e59331a8	 ldr         r3, [r3, #0x1A8]

; 2981 : 					DmaComplete(&dmaXfer, DMA_RX_CH);

  00278	e3a01002	 mov         r1, #2
  0027c	e28d0008	 add         r0, sp, #8
  00280	e58d3008	 str         r3, [sp, #8]
  00284	eb000000	 bl          DmaComplete

; 2982 : 
; 2983 : 					//
; 2984 : 					// FPGA Rev>=36, Rx_FFWD is working. So, change the code to use it for discarding packets.
; 2985 : 					//
; 2986 : 					RxFFCountDW = ((packet_len+2UL+(CACHE_LINE_BYTES-1UL))&~(CACHE_LINE_BYTES-1UL))>>2;

  00288	e2863021	 add         r3, r6, #0x21

; 2987 : 					RxFastForward(pAdapter, RxFFCountDW);

  0028c	e3e0011f	 mvn         r0, #0x1F, 2
  00290	e0001123	 and         r1, r0, r3, lsr #2

; 2988 : 				}
; 2989 : 				else

  00294	ea000001	 b           |$LN53@HandlerRxI|
  00298		 |$LN8@HandlerRxI|

; 2990 : 				{
; 2991 : 					//
; 2992 : 					// PIO
; 2993 : 					//
; 2994 : 
; 2995 : 					RxFFCountDW = (packet_len+2UL+3UL)>>2;

  00298	e2863005	 add         r3, r6, #5

; 2996 : 					RxFastForward(pAdapter, RxFFCountDW);

  0029c	e1a01123	 mov         r1, r3, lsr #2
  002a0		 |$LN53@HandlerRxI|
  002a0	e1a00004	 mov         r0, r4
  002a4	eb000000	 bl          RxFastForward

; 2997 : 				}
; 2998 : 
; 2999 : 				if (pAdapter->f100RxEnWorkaroundDone == 0L)

  002a8	e59930cc	 ldr         r3, [r9, #0xCC]
  002ac	e3530000	 cmp         r3, #0
  002b0	1a000011	 bne         |$LN4@HandlerRxI|

; 3000 : 				{
; 3001 : 					if (GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_STS) & INT_STS_RXSTOP_INT_)

  002b4	e5943008	 ldr         r3, [r4, #8]
  002b8	e5933058	 ldr         r3, [r3, #0x58]
  002bc	e3130401	 tst         r3, #1, 8
  002c0	0a00000a	 beq         |$LN5@HandlerRxI|

; 3002 : 					{
; 3003 : 						UpdateFilterAndMacReg(pAdapter);

  002c4	e1a00004	 mov         r0, r4
  002c8	eb000000	 bl          UpdateFilterAndMacReg

; 3004 : 						// Enable RX 
; 3005 : 						EnableMacRxEn(pAdapter);

  002cc	e1a00004	 mov         r0, r4
  002d0	eb000000	 bl          EnableMacRxEn

; 3006 : 						EnableCPUInt();

  002d4	eb000000	 bl          EnableCPUInt

; 3007 : 						// Wait for at least 64uSec after enabling MAC_CR_RXEN
; 3008 : 						DelayUsingFreeRun(pAdapter, 64L);

  002d8	e3a01040	 mov         r1, #0x40
  002dc	e1a00004	 mov         r0, r4
  002e0	eb000000	 bl          DelayUsingFreeRun

; 3009 : 						pAdapter->f100RxEnWorkaroundDone = 1L;

  002e4	e3a03001	 mov         r3, #1
  002e8	e58930cc	 str         r3, [r9, #0xCC]

; 3010 : 					}
; 3011 : 					else

  002ec	ea000002	 b           |$LN4@HandlerRxI|
  002f0		 |$LN5@HandlerRxI|

; 3012 : 					{
; 3013 : 						pAdapter->SWDPCNeeded = (BOOLEAN)TRUE;

  002f0	e2843a01	 add         r3, r4, #1, 20
  002f4	e3a02001	 mov         r2, #1
  002f8	e5c329c5	 strb        r2, [r3, #0x9C5]
  002fc		 |$LN4@HandlerRxI|

; 3014 : 					}
; 3015 : 				}
; 3016 : 
; 3017 : 				// Count the dropped packet.
; 3018 : 				(pAdapter->ulMissedPackets)++;

  002fc	e5943144	 ldr         r3, [r4, #0x144]
  00300	e2833001	 add         r3, r3, #1
  00304	e5843144	 str         r3, [r4, #0x144]
  00308		 |$LN9@HandlerRxI|

; 3019 : 			}
; 3020 : 			pAdapter->RxDPCNeeded = (BOOLEAN)TRUE;

  00308	e2843a01	 add         r3, r4, #1, 20
  0030c	e3a02001	 mov         r2, #1
  00310	e5c329c2	 strb        r2, [r3, #0x9C2]

; 3021 : 		}
; 3022 : 		else

  00314	e3e0711f	 mvn         r7, #0x1F, 2
  00318	ea000011	 b           |$LN3@HandlerRxI|
  0031c		 |$LN23@HandlerRxI|

; 3023 : 		{
; 3024 : 			//
; 3025 : 			// Packet has error. Discard it and update stats.
; 3026 : 			//
; 3027 : 
; 3028 : 			if (pAdapter->fRxDMAMode)

  0031c	e59231a0	 ldr         r3, [r2, #0x1A0]
  00320	e3530000	 cmp         r3, #0
  00324	0a000007	 beq         |$LN2@HandlerRxI|

; 3029 : 			{
; 3030 : 				//
; 3031 : 				// DMA
; 3032 : 				//
; 3033 : 				// Wait for DMA to complete.
; 3034 : 				dmaXfer.DMABaseVA = pAdapter->DMABaseVA;

  00328	e59131a8	 ldr         r3, [r1, #0x1A8]

; 3035 : 				DmaComplete(&dmaXfer, DMA_RX_CH);

  0032c	e3a01002	 mov         r1, #2
  00330	e28d0008	 add         r0, sp, #8
  00334	e58d3008	 str         r3, [sp, #8]
  00338	eb000000	 bl          DmaComplete

; 3036 : 				RxFFCountDW = ((packet_len+2UL+(CACHE_LINE_BYTES-1UL))&~(CACHE_LINE_BYTES-1UL))>>2;

  0033c	e2863021	 add         r3, r6, #0x21

; 3037 : 				RxFastForward(pAdapter, RxFFCountDW);

  00340	e0071123	 and         r1, r7, r3, lsr #2

; 3038 : 			}
; 3039 : 			else

  00344	ea000001	 b           |$LN54@HandlerRxI|
  00348		 |$LN2@HandlerRxI|

; 3040 : 			{
; 3041 : 				//
; 3042 : 				// PIO
; 3043 : 				//
; 3044 : 
; 3045 : 				RxFFCountDW = (packet_len+2UL+3UL)>>2;

  00348	e2863005	 add         r3, r6, #5

; 3046 : 				RxFastForward(pAdapter, RxFFCountDW);

  0034c	e1a01123	 mov         r1, r3, lsr #2
  00350		 |$LN54@HandlerRxI|
  00350	e1a00004	 mov         r0, r4
  00354	eb000000	 bl          RxFastForward

; 3047 : 			}
; 3048 : 			
; 3049 : 			// Count the dropped packet.
; 3050 : 			(pAdapter->ulFramesRcvBad)++;

  00358	e5943148	 ldr         r3, [r4, #0x148]
  0035c	e2833001	 add         r3, r3, #1
  00360	e5843148	 str         r3, [r4, #0x148]
  00364		 |$LN3@HandlerRxI|

; 3051 : 		}
; 3052 : 
; 3053 : 		// Update numPacketReceived for loop.
; 3054 : 		dw=GetRegDW(pAdapter->lan9118_data.dwLanBase, RX_FIFO_INF);

  00364	e5943008	 ldr         r3, [r4, #8]
  00368	e2842a01	 add         r2, r4, #1, 20
  0036c	e2841a01	 add         r1, r4, #1, 20
  00370	e593307c	 ldr         r3, [r3, #0x7C]
  00374	e31308ff	 tst         r3, #0xFF, 16
  00378	1affff36	 bne         |$LL25@HandlerRxI|
  0037c		 |$LN24@HandlerRxI|

; 2810 : {

  0037c	e59d0024	 ldr         r0, [sp, #0x24]
  00380	eb000000	 bl          __security_check_cookie

; 3055 : 		numPacketReceived = (dw&0x00FF0000UL)>>16;
; 3056 : 	}
; 3057 : 
; 3058 : 	SMSC_TRACE0(DBG_RX,"-HandlerRxISR\r\n");
; 3059 : }

  00384	e28dd028	 add         sp, sp, #0x28
  00388	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0038c	e12fff1e	 bx          lr
  00390		 |$LN58@HandlerRxI|
  00390		 |$LN59@HandlerRxI|
  00390	00000000	 DCD         |dwRxTotalPkt|
  00394		 |$LN60@HandlerRxI|
  00394	00000000	 DCD         |__security_cookie|
  00398		 |$M54017|

			 ENDP  ; |HandlerRxISR|

	EXPORT	|Smsc9118GetReturnedPackets|

  00000			 AREA	 |.pdata|, PDATA
|$T54032| DCD	|$LN6@Smsc9118Ge|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Smsc9118GetReturnedPackets| PROC

; 3068 : {

  00000		 |$LN6@Smsc9118Ge|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M54029|
  00004	e1a02001	 mov         r2, r1

; 3069 : 	SMSC9118_ADAPTER * const pAdapter = (PSMSC9118_ADAPTER)(hMiniportAdapterContext);
; 3070 : 	
; 3071 : 	SMSC_TRACE0(DBG_RX,"+Smsc9118GetReturnedPackets\r\n");
; 3072 : 
; 3073 : 	SMSC_ASSERT(pAdapter);
; 3074 : 	
; 3075 : 	NDIS_SET_PACKET_STATUS(pPacketReturned, NDIS_STATUS_SUCCESS);

  00008	e1d231be	 ldrh        r3, [r2, #0x1E]
  0000c	e3a0e000	 mov         lr, #0

; 3076 : 	if (PutPktToEmptyArray(pAdapter, pPacketReturned) == FALSE)

  00010	e0833002	 add         r3, r3, r2
  00014	e583e01c	 str         lr, [r3, #0x1C]
  00018	eb000000	 bl          PutPktToEmptyArray

; 3077 : 	{
; 3078 : 		SMSC_TRACE0(DBG_RX, "Empty Array Full\r\n");
; 3079 : 	}
; 3080 : 
; 3081 : 	SMSC_TRACE0(DBG_RX,"-Smsc9118GetReturnedPackets\r\n");
; 3082 : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M54030|

			 ENDP  ; |Smsc9118GetReturnedPackets|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|??_C@_1EI@FGEKPOEA@?$AAp?$AAk?$AAt?$AA_?$AAl?$AAe?$AAn?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAu?$AAi?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|Lan_GetTxStatusCount|
	IMPORT	|NdisMCompleteBufferPhysicalMapping|
	IMPORT	|BufferCacheFlush|
	IMPORT	|Lan_WriteTxFifo|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54174| DCD	|$LN135@Smsc9118Xm|
	DCD	0xc0018102

  00000			 AREA	 |.xdata|, DATA
|$T54170| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@FGEKPOEA@?$AAp?$AAk?$AAt?$AA_?$AAl?$AAe?$AAn?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAu?$AAi?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF@| DCB "p"
	DCB	0x0, "k", 0x0, "t", 0x0, "_", 0x0, "l", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "u", 0x0, "i", 0x0, "P", 0x0, "a", 0x0, "c"
	DCB	0x0, "k", 0x0, "e", 0x0, "t", 0x0, "L", 0x0, "e", 0x0, "n"
	DCB	0x0, "g", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T54170|

  00008		 |Smsc9118XmitOnePacket| PROC

; 3090 : {

  00008		 |$LN135@Smsc9118Xm|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dd078	 sub         sp, sp, #0x78
  00010		 |$M54171|
  00010	e1a05000	 mov         r5, r0
  00014	e59f35ec	 ldr         r3, [pc, #0x5EC]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3074	 str         r3, [sp, #0x74]

; 3091 : 	//PUCHAR	pucBufAddress;
; 3092 : 	PDWORD	pucBufAddress;
; 3093 : 	UINT	uiBufLen, uiPacketLength, uiBufCount, uiTemp;
; 3094 : 	volatile DWORD	dwTxCmdA, dwTxCmdB;
; 3095 : 	DWORD	PhysAddrLo, dwCount, TxStatus;
; 3096 : 	DWORD	*PhysAddr;
; 3097 : 	BOOL	fFistNonZeroBuf = TRUE;
; 3098 : 	UINT	i, ArraySize;
; 3099 : 	NDIS_PHYSICAL_ADDRESS_UNIT SegmentArray[MAX_NUM_SEGMENTS];
; 3100 : 	PNDIS_BUFFER pBuffer, pBufferStart;
; 3101 : 	const NDIS_BUFFER *pBufferLast = NULL;
; 3102 : 	DMA_XFER dmaXfer;
; 3103 : 
; 3104 : 	SMSC9118_ADAPTER * const pAdapter = (SMSC9118_ADAPTER *)(hMiniportAdapterContext);
; 3105 : 
; 3106 : 	// Make Lint happy
; 3107 : 	hMiniportAdapterContext = hMiniportAdapterContext;
; 3108 : 
; 3109 : 	SMSC_TRACE0(DBG_TX,"+Smsc9118XmitOnePacket\r\n");
; 3110 : 
; 3111 : 	NdisQueryPacket (pPacket, NULL, &uiBufCount, &pBuffer, &uiPacketLength);

  00020	e28d3024	 add         r3, sp, #0x24
  00024	e58d3000	 str         r3, [sp]
  00028	e1a00001	 mov         r0, r1
  0002c	e28d300c	 add         r3, sp, #0xC
  00030	e28d2014	 add         r2, sp, #0x14
  00034	e3a01000	 mov         r1, #0
  00038	e3a06001	 mov         r6, #1
  0003c	e3a0b000	 mov         r11, #0
  00040	eb000000	 bl          NdisQueryPacket

; 3112 : 	pBufferStart = pBuffer;

  00044	e59d200c	 ldr         r2, [sp, #0xC]

; 3113 : 	SMSC_TRACE1(DBG_TX,"Transmit Packet length is %d bytes.\r\n", uiPacketLength);
; 3114 : 	SMSC_TRACE1(DBG_TX,"BufferCount is %d.\r\n", uiBufCount);
; 3115 : 
; 3116 : 	//
; 3117 : 	// Find the last non-zero buffer segment.
; 3118 : 	//
; 3119 : 	for (uiTemp=0U; pBuffer && (uiTemp<uiBufCount); uiTemp++)

  00048	e59d0014	 ldr         r0, [sp, #0x14]
  0004c	e3a0e000	 mov         lr, #0
  00050	e1a01002	 mov         r1, r2
  00054	ea000008	 b           |$LN122@Smsc9118Xm|
  00058		 |$LL64@Smsc9118Xm|
  00058	e15e0000	 cmp         lr, r0
  0005c	2a000010	 bcs         |$LN58@Smsc9118Xm|

; 3120 : 	{
; 3121 : 		NdisQueryBuffer (pBuffer, (PVOID*)&pucBufAddress, &uiBufLen);

  00060	e3520000	 cmp         r2, #0
  00064	15923008	 ldrne       r3, [r2, #8]

; 3122 : 
; 3123 : 		if (uiBufLen)
; 3124 : 		{
; 3125 : 			pBufferLast = pBuffer;
; 3126 : 			NdisGetNextBuffer (pBuffer, &pBuffer);
; 3127 : 		}
; 3128 : 		else
; 3129 : 		{
; 3130 : 			NdisGetNextBuffer (pBuffer, &pBuffer);

  00068	e28ee001	 add         lr, lr, #1
  0006c	13530000	 cmpne       r3, #0
  00070	11a0b002	 movne       r11, r2
  00074	e5922000	 ldr         r2, [r2]
  00078	e58d200c	 str         r2, [sp, #0xC]
  0007c		 |$LN122@Smsc9118Xm|
  0007c	e3520000	 cmp         r2, #0
  00080	1afffff4	 bne         |$LL64@Smsc9118Xm|

; 3131 : 		}
; 3132 : 	}
; 3133 : 
; 3134 : 	// Null pBuffer; return error.
; 3135 : 	if ((uiTemp < uiBufCount) && (pBuffer==0))

  00084	e15e0000	 cmp         lr, r0
  00088	2a000005	 bcs         |$LN58@Smsc9118Xm|
  0008c	e3520000	 cmp         r2, #0
  00090	1a000003	 bne         |$LN58@Smsc9118Xm|
  00094		 |$LN131@Smsc9118Xm|

; 3136 : 	{
; 3137 : 		SMSC_TRACE0(DBG_TX,"Null pBuffer before end of packet error.\r\n");
; 3138 : 		return FALSE;

  00094	e59d0074	 ldr         r0, [sp, #0x74]
  00098	eb000000	 bl          __security_check_cookie
  0009c	e3a00000	 mov         r0, #0
  000a0	ea000150	 b           |$LN65@Smsc9118Xm|
  000a4		 |$LN58@Smsc9118Xm|

; 3139 : 	}
; 3140 : 	
; 3141 : 	SMSC_TRACE1(DBG_TX,"pBufferLast = 0x%x\r\n", pBufferLast);
; 3142 : 
; 3143 : 	//
; 3144 : 	// Transmit the buffers.
; 3145 : 	//
; 3146 : 	dwTxCmdB = (((DWORD)uiPacketLength)<<16) | ((DWORD)uiPacketLength);

  000a4	e59d3024	 ldr         r3, [sp, #0x24]

; 3147 : 	SMSC_TRACE1(DBG_TX,"dwTxCmdB = 0x%x\r\n", dwTxCmdB);
; 3148 : 
; 3149 : 	pBuffer = pBufferStart;
; 3150 : 
; 3151 : 	if (((uiBufCount*MAX_NUM_SEGMENTS) <= 86U) || (uiBufCount <= 86U))

  000a8	e0802080	 add         r2, r0, r0, lsl #1
  000ac	e58d100c	 str         r1, [sp, #0xC]
  000b0	e1833803	 orr         r3, r3, r3, lsl #16
  000b4	e58d3018	 str         r3, [sp, #0x18]
  000b8	e3520056	 cmp         r2, #0x56
  000bc	9a000034	 bls         |$LN56@Smsc9118Xm|
  000c0	e3500056	 cmp         r0, #0x56
  000c4	9a000032	 bls         |$LN56@Smsc9118Xm|

; 3454 : 	}
; 3455 : 	else
; 3456 : 	{
; 3457 : 		// Packet is too fragmented. 
; 3458 : 		// Copy the buffers to a driver buffer and xfer using the driver buffer.
; 3459 : 		DWORD  pkt_len = 0UL;
; 3460 : 		PUCHAR pkt_buf = (PUCHAR)(pAdapter->TxPktBuffer);

  000c8	e2853c11	 add         r3, r5, #0x11, 24
  000cc	e28380bc	 add         r8, r3, #0xBC
  000d0	e1a07008	 mov         r7, r8
  000d4	e3a06000	 mov         r6, #0
  000d8		 |$LL13@Smsc9118Xm|

; 3461 : 		do
; 3462 : 		{
; 3463 : 			NdisQueryBuffer (pBuffer, (PVOID*)&pucBufAddress, &uiBufLen);

  000d8	e3510000	 cmp         r1, #0
  000dc		 |$LN123@Smsc9118Xm|
  000dc	0a000007	 beq         |$LN119@Smsc9118Xm|
  000e0	e5914008	 ldr         r4, [r1, #8]
  000e4	e5913004	 ldr         r3, [r1, #4]

; 3464 : 
; 3465 : 			while (pBuffer && (uiBufLen == 0U))

  000e8	e3540000	 cmp         r4, #0
  000ec	1a000005	 bne         |$LN8@Smsc9118Xm|

; 3466 : 			{
; 3467 : 				NdisGetNextBuffer (pBuffer, &pBuffer);

  000f0	e5913000	 ldr         r3, [r1]
  000f4	e1b01003	 movs        r1, r3
  000f8	e58d100c	 str         r1, [sp, #0xC]

; 3468 : 				NdisQueryBuffer (pBuffer, (PVOID*)&pucBufAddress, &uiBufLen);

  000fc	eafffff6	 b           |$LN123@Smsc9118Xm|
  00100		 |$LN119@Smsc9118Xm|
  00100	e3a04000	 mov         r4, #0
  00104	e3a03000	 mov         r3, #0
  00108		 |$LN8@Smsc9118Xm|

; 3469 : 			}
; 3470 : 
; 3471 : 			SMSC_TRACE2(DBG_TX,"(Highly Fragmented)pucBufAddress %x = %d byte.\r\n", pucBufAddress, uiBufLen);
; 3472 : 
; 3473 : 			NdisMoveMemory((PVOID)pkt_buf, (PVOID)pucBufAddress, uiBufLen);

  00108	e1a02004	 mov         r2, r4
  0010c	e1a01003	 mov         r1, r3
  00110	e1a00007	 mov         r0, r7
  00114	eb000000	 bl          memcpy

; 3474 : 			pkt_buf += uiBufLen;
; 3475 : 			pkt_len += (DWORD)uiBufLen;
; 3476 : 
; 3477 : 			if (pBuffer) {

  00118	e59d300c	 ldr         r3, [sp, #0xC]
  0011c	e0877004	 add         r7, r7, r4
  00120	e0866004	 add         r6, r6, r4
  00124	e3530000	 cmp         r3, #0
  00128	0a000003	 beq         |$LN115@Smsc9118Xm|

; 3478 : 				NdisGetNextBuffer(pBuffer, &pBuffer);

  0012c	e5933000	 ldr         r3, [r3]
  00130	e1b01003	 movs        r1, r3
  00134	e58d100c	 str         r1, [sp, #0xC]

; 3479 : 			}
; 3480 : 		} while (pBuffer);

  00138	1affffe6	 bne         |$LL13@Smsc9118Xm|
  0013c		 |$LN115@Smsc9118Xm|

; 3481 : 
; 3482 : 		if (pkt_len != (DWORD)uiPacketLength)

  0013c	e59d2024	 ldr         r2, [sp, #0x24]
  00140	e1560002	 cmp         r6, r2

; 3483 : 			RETAILMSG(1, (TEXT("pkt_len = %d, uiPacketLength = %d\r\n"), pkt_len, uiPacketLength));

  00144	159f04b8	 ldrne       r0, [pc, #0x4B8]
  00148	11a01006	 movne       r1, r6
  0014c	1b000000	 blne        NKDbgPrintfW

; 3484 : 		
; 3485 : 		// Send it using PIO Mode
; 3486 : 
; 3487 : 		// Calculate dwTxCmdA
; 3488 : 		dwTxCmdA=( ((((DWORD)(pAdapter->TxPktBuffer))&0x03UL)<<16) | //DWORD alignment adjustment
; 3489 : 				   TX_CMD_A_INT_LAST_SEG_ | TX_CMD_A_INT_FIRST_SEG_ |
; 3490 : 				   (pkt_len) );

  00150	e2051003	 and         r1, r5, #3
  00154	e1863801	 orr         r3, r6, r1, lsl #16
  00158	e3833a03	 orr         r3, r3, #3, 20
  0015c	e58d3008	 str         r3, [sp, #8]

; 3491 : 
; 3492 : 		SMSC_TRACE1(DBG_TX,"(Highly Fragmented)dwTxCmdA = 0x%x\r\n", dwTxCmdA);
; 3493 : 
; 3494 : 		AdapterSetCSR(TX_DATA_FIFO_PORT, dwTxCmdA);

  00160	e5952008	 ldr         r2, [r5, #8]
  00164	e59d3008	 ldr         r3, [sp, #8]

; 3495 : 		AdapterSetCSR(TX_DATA_FIFO_PORT, dwTxCmdB);
; 3496 : 		Lan_WriteTxFifo(pAdapter->lan9118_data.dwLanBase,
; 3497 : 						(DWORD *)(((DWORD)(pAdapter->TxPktBuffer))&~0x03UL),
; 3498 : 						(pkt_len+3UL+(((DWORD)(pAdapter->TxPktBuffer))&0x03UL) )>>2);

  00168	e0811006	 add         r1, r1, r6
  0016c	e2811003	 add         r1, r1, #3
  00170	e5823020	 str         r3, [r2, #0x20]
  00174	e5952008	 ldr         r2, [r5, #8]
  00178	e59d3018	 ldr         r3, [sp, #0x18]
  0017c	e5823020	 str         r3, [r2, #0x20]
  00180	e5950008	 ldr         r0, [r5, #8]
  00184	e1a02121	 mov         r2, r1, lsr #2
  00188	e3c81003	 bic         r1, r8, #3
  0018c	eb000000	 bl          Lan_WriteTxFifo
  00190	ea00010d	 b           |$LN120@Smsc9118Xm|
  00194		 |$LN56@Smsc9118Xm|

; 3152 : 	{
; 3153 : 		DWORD  pkt_len = 0UL;
; 3154 : 		PUCHAR pkt_buf = (PUCHAR)(pAdapter->TxTempPktBuf.pVAddr);

  00194	e2853a01	 add         r3, r5, #1, 20
  00198	e593aab0	 ldr         r10, [r3, #0xAB0]
  0019c	e3a08000	 mov         r8, #0

; 3155 : 
; 3156 : 		do
; 3157 : 		{
; 3158 : 			NdisQueryBuffer (pBuffer, (PVOID*)&pucBufAddress, &uiBufLen);

  001a0	e3510000	 cmp         r1, #0
  001a4	e58da020	 str         r10, [sp, #0x20]
  001a8	e58d801c	 str         r8, [sp, #0x1C]
  001ac	e2859a01	 add         r9, r5, #1, 20
  001b0	e2853a01	 add         r3, r5, #1, 20
  001b4	e28de010	 add         lr, sp, #0x10
  001b8	03a07000	 moveq       r7, #0
  001bc	03a04000	 moveq       r4, #0
  001c0	0a000005	 beq         |$LN51@Smsc9118Xm|
  001c4		 |$LN71@Smsc9118Xm|
  001c4	e5913008	 ldr         r3, [r1, #8]
  001c8	e5917004	 ldr         r7, [r1, #4]
  001cc	e1b04003	 movs        r4, r3

; 3159 : 			SMSC_TRACE1(DBG_TX,"pBuffer = 0x%x\r\n", pBuffer);
; 3160 : 			SMSC_TRACE1(DBG_TX,"uiBufLen = 0x%x\r\n", uiBufLen);
; 3161 : 			SMSC_TRACE1(DBG_TX,"pucBufAddress = 0x%x.\r\n", pucBufAddress);
; 3162 : 
; 3163 : 			if (pBuffer && (uiBufLen == 0U))
; 3164 : 			{
; 3165 : 				NdisGetNextBuffer (pBuffer, &pBuffer);

  001d0	05911000	 ldreq       r1, [r1]
  001d4	0a0000df	 beq         |$LN124@Smsc9118Xm|

; 3425 : 							pkt_buf += uiBufLen;
; 3426 : 							pkt_len += (DWORD)uiBufLen;
; 3427 : 							// Do not transmit this buffer.
; 3428 : 							// This should be merged to next buffer
; 3429 : 							if (pBuffer) 

  001d8	e2853a01	 add         r3, r5, #1, 20
  001dc		 |$LN51@Smsc9118Xm|

; 3166 : 				continue;
; 3167 : 			}
; 3168 : 
; 3169 : 			if (pkt_len)

  001dc	e3580000	 cmp         r8, #0
  001e0	0a000069	 beq         |$LN50@Smsc9118Xm|

; 3170 : 			{
; 3171 : 				// there is a buffer which is not sent last iteration
; 3172 : 				NdisMoveMemory((PVOID)pkt_buf, (PVOID)pucBufAddress, uiBufLen);

  001e4	e1a02004	 mov         r2, r4
  001e8	e1a01007	 mov         r1, r7
  001ec	e1a0000a	 mov         r0, r10
  001f0	eb000000	 bl          memcpy

; 3173 : 				pkt_buf += uiBufLen;
; 3174 : 				pkt_len += (DWORD)uiBufLen;
; 3175 : 				if ((pAdapter->fTxDMAMode) &&
; 3176 : 					(pkt_len > (DWORD)TX_DMA_THRESHOLD))

  001f4	e2852a01	 add         r2, r5, #1, 20
  001f8	e59231a4	 ldr         r3, [r2, #0x1A4]
  001fc	e08aa004	 add         r10, r10, r4
  00200	e0888004	 add         r8, r8, r4
  00204	e3530000	 cmp         r3, #0
  00208	e58da020	 str         r10, [sp, #0x20]
  0020c	e58d801c	 str         r8, [sp, #0x1C]
  00210	0a000033	 beq         |$LN49@Smsc9118Xm|
  00214	e3580080	 cmp         r8, #0x80
  00218	9a000031	 bls         |$LN49@Smsc9118Xm|

; 3177 : 				{
; 3178 : 					// DMA Mode
; 3179 : 					PhysAddr = (DWORD*)pAdapter->TxTempPktBuf.PAddr.LowPart;

  0021c	e2853a01	 add         r3, r5, #1, 20
  00220	e5937ab8	 ldr         r7, [r3, #0xAB8]

; 3180 : 
; 3181 : 					dwTxCmdA=(((CACHE_LINE_BYTES/16UL)<<24) |
; 3182 : 							  ((((DWORD)PhysAddr)&(CACHE_LINE_BYTES-1UL))<<16) | //Data Start Offset adjustment
; 3183 : 							  ((DWORD)pkt_len));
; 3184 : 					// Set Last/First Segment flag in TxCmdA.
; 3185 : 					if (pBuffer == pBufferLast)    //last non-zero buffer

  00224	e59d200c	 ldr         r2, [sp, #0xC]

; 3186 : 					{
; 3187 : 						dwTxCmdA |= TX_CMD_A_INT_LAST_SEG_;
; 3188 : 
; 3189 : 						// Check if it is also the first buffer, i.e. single buffer packet.
; 3190 : 						if (fFistNonZeroBuf == TRUE)   //first segment of the first non-zero buffer.
; 3191 : 						{
; 3192 : 							fFistNonZeroBuf = FALSE;
; 3193 : 							dwTxCmdA |= TX_CMD_A_INT_FIRST_SEG_;
; 3194 : 						}
; 3195 : 					}
; 3196 : 					else
; 3197 : 					{
; 3198 : 						// Check if it is the first segment of the first buffer.
; 3199 : 						if (fFistNonZeroBuf == TRUE)
; 3200 : 						{
; 3201 : 							fFistNonZeroBuf = FALSE;
; 3202 : 							dwTxCmdA |= TX_CMD_A_INT_FIRST_SEG_;
; 3203 : 						}
; 3204 : 					}
; 3205 : 
; 3206 : 					dwCount = ( ( (DWORD)(pkt_len) + (((DWORD)PhysAddr)&(CACHE_LINE_BYTES-1UL)) + (CACHE_LINE_BYTES-1UL) )&(~(CACHE_LINE_BYTES-1UL)) )>>2;
; 3207 : 					dmaXfer.pdwBuf = (DWORD*)(((DWORD)PhysAddr)&(~(CACHE_LINE_BYTES-1UL)));
; 3208 : 					dmaXfer.fClBurst = (BOOLEAN)TRUE;
; 3209 : 					dmaXfer.DMABaseVA = pAdapter->DMABaseVA;
; 3210 : 					dmaXfer.dwDwCnt = dwCount;
; 3211 : 					dmaXfer.fMemWr = (BOOLEAN)FALSE;
; 3212 : 					dmaXfer.fMemAddrInc = (BOOLEAN)TRUE;
; 3213 : 					dmaXfer.fLanAddrInc = (BOOLEAN)FALSE;
; 3214 : 					dmaXfer.dwDmaCh = DMA_TX_CH;
; 3215 : 					dmaXfer.dwLanReg = pAdapter->ulIoBaseAddress;  // Phys address of 9118 I/O base
; 3216 : 
; 3217 : 					// Not need here because pkt_buf is "uncached"
; 3218 : 					// BufferCacheFlush((PUCHAR)pucBufAddress, dwCount << 2);
; 3219 : 					
; 3220 : 					SMSC_TRACE0(DBG_TX,"Initiate DMA Tx\r\n");
; 3221 : 					SMSC_TRACE2(DBG_TX,"TxCmdA = 0x%x, TxCmdB = 0x%x\r\n", dwTxCmdA, dwTxCmdB);
; 3222 : 					// Start xfer...
; 3223 : 					AdapterSetCSR(TX_DATA_FIFO_PORT, dwTxCmdA);

  00228	e5950124	 ldr         r0, [r5, #0x124]
  0022c	e207101f	 and         r1, r7, #0x1F
  00230	e3813c02	 orr         r3, r1, #2, 24
  00234	e1883803	 orr         r3, r8, r3, lsl #16
  00238	e58d3008	 str         r3, [sp, #8]
  0023c	e152000b	 cmp         r2, r11
  00240	059d3008	 ldreq       r3, [sp, #8]
  00244	e2852a01	 add         r2, r5, #1, 20
  00248	e5954008	 ldr         r4, [r5, #8]
  0024c	03833a01	 orreq       r3, r3, #1, 20
  00250	058d3008	 streq       r3, [sp, #8]
  00254	e3560001	 cmp         r6, #1
  00258	059d3008	 ldreq       r3, [sp, #8]
  0025c	e58d005c	 str         r0, [sp, #0x5C]

; 3224 : 					AdapterSetCSR(TX_DATA_FIFO_PORT, dwTxCmdB);
; 3225 : 
; 3226 : 					// Kick off DMA
; 3227 : 					if (!DmaStartXfer(&dmaXfer)) {

  00260	e28d0058	 add         r0, sp, #0x58
  00264	03833a02	 orreq       r3, r3, #2, 20
  00268	058d3008	 streq       r3, [sp, #8]
  0026c	e0813008	 add         r3, r1, r8
  00270	e59211a8	 ldr         r1, [r2, #0x1A8]
  00274	e283301f	 add         r3, r3, #0x1F
  00278	e3e0211f	 mvn         r2, #0x1F, 2
  0027c	e0023123	 and         r3, r2, r3, lsr #2
  00280	e58d3068	 str         r3, [sp, #0x68]
  00284	e3a03001	 mov         r3, #1
  00288	e5cd306d	 strb        r3, [sp, #0x6D]
  0028c	e3a03000	 mov         r3, #0
  00290	e5cd306c	 strb        r3, [sp, #0x6C]
  00294	e3a03001	 mov         r3, #1
  00298	e5cd306f	 strb        r3, [sp, #0x6F]
  0029c	e3a03000	 mov         r3, #0
  002a0	e59de008	 ldr         lr, [sp, #8]
  002a4	e5cd306e	 strb        r3, [sp, #0x6E]
  002a8	e3a03003	 mov         r3, #3
  002ac	e3c7201f	 bic         r2, r7, #0x1F
  002b0	e58d3064	 str         r3, [sp, #0x64]
  002b4	e58d2060	 str         r2, [sp, #0x60]
  002b8	e58d1058	 str         r1, [sp, #0x58]
  002bc	e584e020	 str         lr, [r4, #0x20]
  002c0	e5952008	 ldr         r2, [r5, #8]
  002c4	e59d3018	 ldr         r3, [sp, #0x18]
  002c8	03a06000	 moveq       r6, #0
  002cc	e5823020	 str         r3, [r2, #0x20]
  002d0	eb000000	 bl          DmaStartXfer

; 3228 : 						SMSC_TRACE0(DBG_TX,"Tx DMA Failed.\r\n");
; 3229 : 					}
; 3230 : 					// Wait for DMA to complete.
; 3231 : 					DmaComplete(&dmaXfer, DMA_TX_CH);

  002d4	e3a01003	 mov         r1, #3
  002d8	e28d0058	 add         r0, sp, #0x58
  002dc	eb000000	 bl          DmaComplete

; 3232 : 				}
; 3233 : 				else

  002e0	ea000016	 b           |$LN43@Smsc9118Xm|
  002e4		 |$LN49@Smsc9118Xm|

; 3234 : 				{
; 3235 : 					// PIO
; 3236 : 					const DWORD	dwPktPtr = (DWORD)(pAdapter->TxTempPktBuf.pVAddr);
; 3237 : 					if (pBuffer == pBufferLast)    //last non-zero buffer

  002e4	e2853a01	 add         r3, r5, #1, 20
  002e8	e593eab0	 ldr         lr, [r3, #0xAB0]
  002ec	e59d200c	 ldr         r2, [sp, #0xC]

; 3238 : 					{
; 3239 : 						SMSC_TRACE1(DBG_TX,"At pBufferLast (pBuffer = 0x%x)\r\n", pBuffer);
; 3240 : 						dwTxCmdA=( ((dwPktPtr)<<16) |
; 3241 : 							   TX_CMD_A_INT_LAST_SEG_ | ((DWORD)pkt_len));

  002f0	e188380e	 orr         r3, r8, lr, lsl #16
  002f4	e152000b	 cmp         r2, r11
  002f8	1a000015	 bne         |$LN42@Smsc9118Xm|
  002fc	e3833a01	 orr         r3, r3, #1, 20
  00300	e58d3008	 str         r3, [sp, #8]

; 3242 : 
; 3243 : 						// Check if it is also the first buffer, i.e. single buffer packet.
; 3244 : 						if (fFistNonZeroBuf)	//first non-zero buffer

  00304	e3560000	 cmp         r6, #0
  00308	1a000014	 bne         |$LN126@Smsc9118Xm|
  0030c		 |$LN37@Smsc9118Xm|

; 3273 : 							}
; 3274 : 						}
; 3275 : 					}
; 3276 : 
; 3277 : 					SMSC_TRACE0(DBG_TX,"Initiate PIO Tx\r\n");
; 3278 : 
; 3279 : 					AdapterSetCSR(TX_DATA_FIFO_PORT, dwTxCmdA);

  0030c	e5952008	 ldr         r2, [r5, #8]
  00310	e59d3008	 ldr         r3, [sp, #8]

; 3280 : 					AdapterSetCSR(TX_DATA_FIFO_PORT, dwTxCmdB);
; 3281 : 					Lan_WriteTxFifo(pAdapter->lan9118_data.dwLanBase,
; 3282 : 								(DWORD *)((dwPktPtr)&~0x03UL),
; 3283 : 								((DWORD)pkt_len+3UL+(dwPktPtr&0x03UL))>>2);

  00314	e20e1003	 and         r1, lr, #3
  00318	e0811008	 add         r1, r1, r8
  0031c	e5823020	 str         r3, [r2, #0x20]
  00320	e5952008	 ldr         r2, [r5, #8]
  00324	e59d3018	 ldr         r3, [sp, #0x18]
  00328	e5823020	 str         r3, [r2, #0x20]
  0032c	e5950008	 ldr         r0, [r5, #8]
  00330	e2813003	 add         r3, r1, #3
  00334	e1a02123	 mov         r2, r3, lsr #2
  00338	e3ce1003	 bic         r1, lr, #3
  0033c	eb000000	 bl          Lan_WriteTxFifo
  00340		 |$LN43@Smsc9118Xm|

; 3284 : 				}
; 3285 : 				pkt_len = 0UL;
; 3286 : 				pkt_buf = (PUCHAR)(pAdapter->TxTempPktBuf.pVAddr);
; 3287 : 				if (pBuffer) 

  00340	e599aab0	 ldr         r10, [r9, #0xAB0]
  00344	e3a08000	 mov         r8, #0
  00348		 |$LN132@Smsc9118Xm|
  00348	e58da020	 str         r10, [sp, #0x20]
  0034c	e58d801c	 str         r8, [sp, #0x1C]

; 3288 : 				{
; 3289 : 					NdisGetNextBuffer (pBuffer, &pBuffer);
; 3290 : 				}
; 3291 : 				continue;

  00350	ea00007a	 b           |$LN24@Smsc9118Xm|
  00354		 |$LN42@Smsc9118Xm|

; 3245 : 						{
; 3246 : 							fFistNonZeroBuf = FALSE;
; 3247 : 							dwTxCmdA |= TX_CMD_A_INT_FIRST_SEG_;
; 3248 : 						}
; 3249 : 					}
; 3250 : 					else
; 3251 : 					{
; 3252 : 						dwTxCmdA=(((dwPktPtr)<<16) | (pkt_len));

  00354	e58d3008	 str         r3, [sp, #8]

; 3253 : 
; 3254 : 						// Check if it is the first buffer.
; 3255 : 						if (fFistNonZeroBuf)	//first non-zero buffer

  00358	e3560000	 cmp         r6, #0
  0035c	0a000004	 beq         |$LN39@Smsc9118Xm|
  00360		 |$LN126@Smsc9118Xm|

; 3256 : 						{
; 3257 : 							fFistNonZeroBuf = FALSE;
; 3258 : 							dwTxCmdA |= TX_CMD_A_INT_FIRST_SEG_;

  00360	e59d3008	 ldr         r3, [sp, #8]
  00364	e3a06000	 mov         r6, #0
  00368	e3833a02	 orr         r3, r3, #2, 20
  0036c	e58d3008	 str         r3, [sp, #8]

; 3259 : 						}
; 3260 : 						else

  00370	eaffffe5	 b           |$LN37@Smsc9118Xm|
  00374		 |$LN39@Smsc9118Xm|

; 3261 : 						{
; 3262 : 							// Middle buffers should be 
; 3263 : 							// greater than or equal to 4bytes in length
; 3264 : 							if (pkt_len < 4UL)

  00374	e3580004	 cmp         r8, #4
  00378	2affffe3	 bcs         |$LN37@Smsc9118Xm|

; 3265 : 							{
; 3266 : 								// Do not transmit this buffer.
; 3267 : 								// This should be merged to next buffer
; 3268 : 								if (pBuffer) 

  0037c	e3520000	 cmp         r2, #0
  00380	0a000091	 beq         |$LN120@Smsc9118Xm|

; 3269 : 								{
; 3270 : 									NdisGetNextBuffer (pBuffer, &pBuffer);

  00384	e5921000	 ldr         r1, [r2]

; 3271 : 								}
; 3272 : 								continue;

  00388	ea000070	 b           |$LN125@Smsc9118Xm|
  0038c		 |$LN50@Smsc9118Xm|

; 3292 : 			}
; 3293 : 
; 3294 : 			if ((pAdapter->fTxDMAMode) && 
; 3295 : 				(uiBufLen>TX_DMA_THRESHOLD) && 
; 3296 : 				((uiBufCount*MAX_NUM_SEGMENTS) <= 86U))

  0038c	e59331a4	 ldr         r3, [r3, #0x1A4]
  00390	e3530000	 cmp         r3, #0
  00394	0a000055	 beq         |$LN34@Smsc9118Xm|
  00398	e3540080	 cmp         r4, #0x80
  0039c	9a000053	 bls         |$LN34@Smsc9118Xm|
  003a0	e0803080	 add         r3, r0, r0, lsl #1
  003a4	e3530056	 cmp         r3, #0x56
  003a8	8a000050	 bhi         |$LN34@Smsc9118Xm|

; 3297 : 			{
; 3298 : 				//
; 3299 : 				// DMA Mode
; 3300 : 				//
; 3301 : 
; 3302 : 				NdisMStartBufferPhysicalMapping(pAdapter->hMiniportAdapterHandle,
; 3303 : 												pBuffer,
; 3304 : 												0UL,
; 3305 : 												(BOOLEAN)TRUE,
; 3306 : 												SegmentArray,
; 3307 : 												&ArraySize);

  003ac	e5950000	 ldr         r0, [r5]
  003b0	e58de004	 str         lr, [sp, #4]
  003b4	e28de028	 add         lr, sp, #0x28
  003b8	e3a03001	 mov         r3, #1
  003bc	e3a02000	 mov         r2, #0
  003c0	e58de000	 str         lr, [sp]
  003c4	eb000000	 bl          NdisMStartBufferPhysicalMapping

; 3308 : 
; 3309 : 				SMSC_ASSERT(ArraySize <= MAX_NUM_SEGMENTS);
; 3310 : 				BufferCacheFlush((PUCHAR)pucBufAddress, uiBufLen);

  003c8	e1a01004	 mov         r1, r4
  003cc	e1a00007	 mov         r0, r7
  003d0	eb000000	 bl          BufferCacheFlush

; 3311 : 
; 3312 : 				for (i=0U; i<ArraySize; i++)

  003d4	e59d1010	 ldr         r1, [sp, #0x10]
  003d8	e3a07000	 mov         r7, #0
  003dc	e3510000	 cmp         r1, #0
  003e0	0a00003d	 beq         |$LN31@Smsc9118Xm|
  003e4	e28da028	 add         r10, sp, #0x28
  003e8	e28d8028	 add         r8, sp, #0x28
  003ec		 |$LL33@Smsc9118Xm|

; 3313 : 				{
; 3314 : 					SMSC_ASSERT(SegmentArray[i].Length);
; 3315 : 
; 3316 : 					// Calculate dwTxCmdA
; 3317 : 					SMSC_ASSERT(NdisGetPhysicalAddressHigh(SegmentArray[i].PhysicalAddress) == 0L);
; 3318 : 					PhysAddrLo = NdisGetPhysicalAddressLow(SegmentArray[i].PhysicalAddress);
; 3319 : 					PhysAddr = (DWORD*)PhysAddrLo;

  003ec	e79a9207	 ldr         r9, [r10, +r7, lsl #4]

; 3320 : 
; 3321 : 					{
; 3322 : 						dwTxCmdA=( 
; 3323 : 								   ((CACHE_LINE_BYTES/16UL)<<24) |
; 3324 : 								   ((((DWORD)PhysAddr)&(CACHE_LINE_BYTES-1UL))<<16) | //Data Start Offset adjustment
; 3325 : 								   ((DWORD)(SegmentArray[i].Length)) );

  003f0	e0883207	 add         r3, r8, r7, lsl #4
  003f4	e5930008	 ldr         r0, [r3, #8]

; 3326 : 					}
; 3327 : 
; 3328 : 					// Set Last/First Segment flag in TxCmdA.
; 3329 : 					if (pBuffer == pBufferLast)    //last non-zero buffer

  003f8	e59d200c	 ldr         r2, [sp, #0xC]
  003fc	e209e01f	 and         lr, r9, #0x1F
  00400	e38e3c02	 orr         r3, lr, #2, 24
  00404	e1803803	 orr         r3, r0, r3, lsl #16
  00408	e152000b	 cmp         r2, r11
  0040c	e58d3008	 str         r3, [sp, #8]

; 3330 : 					{
; 3331 : 						// Check if it is the last segment for the last buffer.
; 3332 : 						if (i == (ArraySize-1U)) {

  00410	02413001	 subeq       r3, r1, #1
  00414	01570003	 cmpeq       r7, r3

; 3333 : 							dwTxCmdA |= TX_CMD_A_INT_LAST_SEG_;

  00418	059d3008	 ldreq       r3, [sp, #8]

; 3334 : 						}
; 3335 : 
; 3336 : 						// Check if it is also the first buffer, i.e. single buffer packet.
; 3337 : 						if ((fFistNonZeroBuf == TRUE) && (i == 0U))    //first segment of the first non-zero buffer.
; 3338 : 						{
; 3339 : 							fFistNonZeroBuf = FALSE;
; 3340 : 							dwTxCmdA |= TX_CMD_A_INT_FIRST_SEG_;
; 3341 : 						}
; 3342 : 					}
; 3343 : 					else
; 3344 : 					{
; 3345 : 						// Check if it is the first segment of the first buffer.
; 3346 : 						if ((fFistNonZeroBuf == TRUE) && (i == 0U))
; 3347 : 						{
; 3348 : 							fFistNonZeroBuf = FALSE;
; 3349 : 							dwTxCmdA |= TX_CMD_A_INT_FIRST_SEG_;
; 3350 : 						}
; 3351 : 					}
; 3352 : 
; 3353 : 					{
; 3354 : 						dwCount = ( ( (DWORD)(SegmentArray[i].Length) + (((DWORD)PhysAddr)&(CACHE_LINE_BYTES-1UL)) + (CACHE_LINE_BYTES-1UL) )&(~(CACHE_LINE_BYTES-1UL)) )>>2;
; 3355 : 						dmaXfer.pdwBuf = (DWORD*)(((DWORD)PhysAddr)&(~(CACHE_LINE_BYTES-1UL)));
; 3356 : 						dmaXfer.fClBurst = (BOOLEAN)TRUE;
; 3357 : 					}
; 3358 : 					dmaXfer.DMABaseVA = pAdapter->DMABaseVA;
; 3359 : 					dmaXfer.dwDwCnt = dwCount;
; 3360 : 					dmaXfer.fMemWr = (BOOLEAN)FALSE;
; 3361 : 					dmaXfer.fMemAddrInc = (BOOLEAN)TRUE;
; 3362 : 					dmaXfer.fLanAddrInc = (BOOLEAN)FALSE;
; 3363 : 					dmaXfer.dwDmaCh = DMA_TX_CH;
; 3364 : 					dmaXfer.dwLanReg = pAdapter->ulIoBaseAddress;  // Phys address of 9118 I/O base
; 3365 : 
; 3366 : 				//	BufferCacheFlush((PUCHAR)pucBufAddress, uiBufLen);
; 3367 : 					
; 3368 : 					SMSC_TRACE0(DBG_TX,"Initiate DMA Tx\r\n");
; 3369 : 					SMSC_TRACE2(DBG_TX,"TxCmdA = 0x%x, TxCmdB = 0x%x\r\n", dwTxCmdA, dwTxCmdB);
; 3370 : 					// Start xfer...
; 3371 : 					AdapterSetCSR(TX_DATA_FIFO_PORT, dwTxCmdA);

  0041c	e2852a01	 add         r2, r5, #1, 20
  00420	e59211a8	 ldr         r1, [r2, #0x1A8]
  00424	03833a01	 orreq       r3, r3, #1, 20
  00428	058d3008	 streq       r3, [sp, #8]
  0042c	e3560001	 cmp         r6, #1
  00430	03570000	 cmpeq       r7, #0
  00434	059d3008	 ldreq       r3, [sp, #8]
  00438	e3e0211f	 mvn         r2, #0x1F, 2
  0043c	e5954008	 ldr         r4, [r5, #8]
  00440	03833a02	 orreq       r3, r3, #2, 20
  00444	058d3008	 streq       r3, [sp, #8]
  00448	e080300e	 add         r3, r0, lr
  0044c	e283301f	 add         r3, r3, #0x1F
  00450	e0023123	 and         r3, r2, r3, lsr #2
  00454	e58d3068	 str         r3, [sp, #0x68]
  00458	e3a03001	 mov         r3, #1
  0045c	e5cd306d	 strb        r3, [sp, #0x6D]
  00460	e3a03000	 mov         r3, #0
  00464	e5cd306c	 strb        r3, [sp, #0x6C]
  00468	e3a03001	 mov         r3, #1
  0046c	e5cd306f	 strb        r3, [sp, #0x6F]
  00470	e5950124	 ldr         r0, [r5, #0x124]
  00474	e3a03000	 mov         r3, #0
  00478	e59de008	 ldr         lr, [sp, #8]
  0047c	e5cd306e	 strb        r3, [sp, #0x6E]
  00480	e3a03003	 mov         r3, #3
  00484	e3c9201f	 bic         r2, r9, #0x1F
  00488	e58d3064	 str         r3, [sp, #0x64]
  0048c	e58d2060	 str         r2, [sp, #0x60]
  00490	e58d1058	 str         r1, [sp, #0x58]
  00494	e58d005c	 str         r0, [sp, #0x5C]
  00498	e584e020	 str         lr, [r4, #0x20]

; 3372 : 					AdapterSetCSR(TX_DATA_FIFO_PORT, dwTxCmdB);

  0049c	e5952008	 ldr         r2, [r5, #8]
  004a0	e59d3018	 ldr         r3, [sp, #0x18]

; 3373 : 
; 3374 : 					// Kick off DMA
; 3375 : 					if (!DmaStartXfer(&dmaXfer)) {

  004a4	e28d0058	 add         r0, sp, #0x58
  004a8	03a06000	 moveq       r6, #0
  004ac	e5823020	 str         r3, [r2, #0x20]
  004b0	eb000000	 bl          DmaStartXfer

; 3376 : 						SMSC_TRACE0(DBG_TX,"Tx DMA Failed.\r\n");
; 3377 : 					}
; 3378 : 					// Wait for DMA to complete.
; 3379 : 					DmaComplete(&dmaXfer, DMA_TX_CH);

  004b4	e3a01003	 mov         r1, #3
  004b8	e28d0058	 add         r0, sp, #0x58
  004bc	eb000000	 bl          DmaComplete
  004c0	e59d1010	 ldr         r1, [sp, #0x10]
  004c4	e2877001	 add         r7, r7, #1
  004c8	e1570001	 cmp         r7, r1
  004cc	3affffc6	 bcc         |$LL33@Smsc9118Xm|

; 3425 : 							pkt_buf += uiBufLen;
; 3426 : 							pkt_len += (DWORD)uiBufLen;
; 3427 : 							// Do not transmit this buffer.
; 3428 : 							// This should be merged to next buffer
; 3429 : 							if (pBuffer) 

  004d0	e59d801c	 ldr         r8, [sp, #0x1C]
  004d4	e59da020	 ldr         r10, [sp, #0x20]
  004d8	e2859a01	 add         r9, r5, #1, 20
  004dc		 |$LN31@Smsc9118Xm|
  004dc	e59d100c	 ldr         r1, [sp, #0xC]
  004e0	e5950000	 ldr         r0, [r5]
  004e4	e3a02000	 mov         r2, #0
  004e8	eb000000	 bl          NdisMCompleteBufferPhysicalMapping
  004ec	ea000013	 b           |$LN24@Smsc9118Xm|
  004f0		 |$LN34@Smsc9118Xm|

; 3380 : 				}
; 3381 : 
; 3382 : 				NdisMCompleteBufferPhysicalMapping(pAdapter->hMiniportAdapterHandle,
; 3383 : 												   pBuffer,
; 3384 : 												   0UL);
; 3385 : 			}
; 3386 : 			else
; 3387 : 			{
; 3388 : 				//
; 3389 : 				// PIO Mode
; 3390 : 				//
; 3391 : 
; 3392 : 				// Calculate dwTxCmdA
; 3393 : 				if (pBuffer == pBufferLast)    //last non-zero buffer

  004f0	e151000b	 cmp         r1, r11

; 3394 : 				{
; 3395 : 					SMSC_TRACE1(DBG_TX,"At pBufferLast (pBuffer = 0x%x)\r\n", pBuffer);
; 3396 : 					dwTxCmdA=( ((((DWORD)pucBufAddress)&0x03UL)<<16) | //DWORD alignment adjustment
; 3397 : 						   TX_CMD_A_INT_LAST_SEG_ | 
; 3398 : 						   ((DWORD)uiBufLen));

  004f4	e2071003	 and         r1, r7, #3
  004f8	e1843801	 orr         r3, r4, r1, lsl #16
  004fc	1a00001a	 bne         |$LN23@Smsc9118Xm|
  00500	e3833a01	 orr         r3, r3, #1, 20
  00504	e58d3008	 str         r3, [sp, #8]

; 3399 : 
; 3400 : 					// Check if it is also the first buffer, i.e. single buffer packet.
; 3401 : 					if (fFistNonZeroBuf)	//first non-zero buffer

  00508	e3560000	 cmp         r6, #0
  0050c	1a000019	 bne         |$LN127@Smsc9118Xm|
  00510		 |$LN18@Smsc9118Xm|

; 3434 : 						}
; 3435 : 					}
; 3436 : 				}
; 3437 : 
; 3438 : 				SMSC_TRACE0(DBG_TX,"Initiate PIO Tx\r\n");
; 3439 : 				AdapterSetCSR(TX_DATA_FIFO_PORT, dwTxCmdA);

  00510	e5952008	 ldr         r2, [r5, #8]
  00514	e59d3008	 ldr         r3, [sp, #8]

; 3440 : 				AdapterSetCSR(TX_DATA_FIFO_PORT, dwTxCmdB);
; 3441 : 				Lan_WriteTxFifo(pAdapter->lan9118_data.dwLanBase,
; 3442 : 							(DWORD *)(((DWORD)pucBufAddress)&~0x03UL),
; 3443 : 							( (DWORD)uiBufLen+3UL+(((DWORD)pucBufAddress)&0x03UL) )>>2);

  00518	e0811004	 add         r1, r1, r4
  0051c	e2811003	 add         r1, r1, #3
  00520	e5823020	 str         r3, [r2, #0x20]
  00524	e5952008	 ldr         r2, [r5, #8]
  00528	e59d3018	 ldr         r3, [sp, #0x18]
  0052c	e5823020	 str         r3, [r2, #0x20]
  00530	e5950008	 ldr         r0, [r5, #8]
  00534	e1a02121	 mov         r2, r1, lsr #2
  00538	e3c71003	 bic         r1, r7, #3
  0053c	eb000000	 bl          Lan_WriteTxFifo
  00540		 |$LN24@Smsc9118Xm|

; 3444 : 			}
; 3445 : 
; 3446 : 			if (pBuffer) {

  00540	e59d300c	 ldr         r3, [sp, #0xC]
  00544	e3530000	 cmp         r3, #0
  00548	0a00001f	 beq         |$LN120@Smsc9118Xm|

; 3447 : 				NdisGetNextBuffer (pBuffer, &pBuffer);

  0054c	e5931000	 ldr         r1, [r3]
  00550		 |$LN125@Smsc9118Xm|
  00550	e59d0014	 ldr         r0, [sp, #0x14]
  00554	e28de010	 add         lr, sp, #0x10
  00558		 |$LN124@Smsc9118Xm|
  00558	e58d100c	 str         r1, [sp, #0xC]

; 3448 : 			}
; 3449 : 			else {
; 3450 : 				SMSC_TRACE0(DBG_WARNING, "Invalid pBuffer\r\n");
; 3451 : 			}
; 3452 : 
; 3453 : 		} while (pBuffer);

  0055c	e3510000	 cmp         r1, #0
  00560	e2853a01	 add         r3, r5, #1, 20
  00564	1affff16	 bne         |$LN71@Smsc9118Xm|

; 3499 : 	}
; 3500 : 
; 3501 : 	while (Lan_GetTxStatusCount(&(pAdapter->lan9118_data)))

  00568	ea000017	 b           |$LN120@Smsc9118Xm|
  0056c		 |$LN23@Smsc9118Xm|

; 3402 : 					{
; 3403 : 						fFistNonZeroBuf = FALSE;
; 3404 : 						dwTxCmdA |= TX_CMD_A_INT_FIRST_SEG_;
; 3405 : 					}
; 3406 : 				}
; 3407 : 				else
; 3408 : 				{
; 3409 : 					dwTxCmdA=( ((((DWORD)pucBufAddress)&0x03UL)<<16) | //DWORD alignment adjustment
; 3410 : 						   ((DWORD)uiBufLen) );

  0056c	e58d3008	 str         r3, [sp, #8]

; 3411 : 
; 3412 : 					// Check if it is the first buffer.
; 3413 : 					if (fFistNonZeroBuf)	//first non-zero buffer

  00570	e3560000	 cmp         r6, #0
  00574	0a000004	 beq         |$LN20@Smsc9118Xm|
  00578		 |$LN127@Smsc9118Xm|

; 3414 : 					{
; 3415 : 						fFistNonZeroBuf = FALSE;
; 3416 : 						dwTxCmdA |= TX_CMD_A_INT_FIRST_SEG_;

  00578	e59d3008	 ldr         r3, [sp, #8]
  0057c	e3a06000	 mov         r6, #0
  00580	e3833a02	 orr         r3, r3, #2, 20
  00584	e58d3008	 str         r3, [sp, #8]

; 3417 : 					}
; 3418 : 					else

  00588	eaffffe0	 b           |$LN18@Smsc9118Xm|
  0058c		 |$LN20@Smsc9118Xm|

; 3419 : 					{
; 3420 : 						// Middle buffers should be 
; 3421 : 						// greater than or equal to 4bytes in length
; 3422 : 						if (uiBufLen < 4U)

  0058c	e3540004	 cmp         r4, #4
  00590	2affffde	 bcs         |$LN18@Smsc9118Xm|

; 3423 : 						{
; 3424 : 							NdisMoveMemory((PVOID)pkt_buf, (PVOID)pucBufAddress, uiBufLen);

  00594	e1a02004	 mov         r2, r4
  00598	e1a01007	 mov         r1, r7
  0059c	e1a0000a	 mov         r0, r10
  005a0	eb000000	 bl          memcpy

; 3425 : 							pkt_buf += uiBufLen;
; 3426 : 							pkt_len += (DWORD)uiBufLen;
; 3427 : 							// Do not transmit this buffer.
; 3428 : 							// This should be merged to next buffer
; 3429 : 							if (pBuffer) 

  005a4	e08aa004	 add         r10, r10, r4
  005a8	e1a08004	 mov         r8, r4

; 3430 : 							{
; 3431 : 								NdisGetNextBuffer (pBuffer, &pBuffer);
; 3432 : 							}
; 3433 : 							continue;

  005ac	eaffff65	 b           |$LN132@Smsc9118Xm|
  005b0		 |$LL4@Smsc9118Xm|

; 3502 : 	{
; 3503 : 		TxStatus = GetRegDW(pAdapter->lan9118_data.dwLanBase, TX_STATUS_FIFO_PORT);

  005b0	e5953008	 ldr         r3, [r5, #8]
  005b4	e5933048	 ldr         r3, [r3, #0x48]

; 3504 : 		if (!(TxStatus&TX_STS_ES))

  005b8	e3130902	 tst         r3, #2, 18
  005bc	1a00000c	 bne         |$LN2@Smsc9118Xm|

; 3505 : 		{
; 3506 : 			// Update the stats
; 3507 : 			(pAdapter->ulFramesXmitGood)++;

  005c0	e5953128	 ldr         r3, [r5, #0x128]
  005c4	e2833001	 add         r3, r3, #1
  005c8	e5853128	 str         r3, [r5, #0x128]
  005cc		 |$LN120@Smsc9118Xm|
  005cc	e2850008	 add         r0, r5, #8
  005d0	eb000000	 bl          Lan_GetTxStatusCount
  005d4	e3500000	 cmp         r0, #0
  005d8	1afffff4	 bne         |$LL4@Smsc9118Xm|

; 3516 : 		}
; 3517 : 	}
; 3518 : 
; 3519 : 	SMSC_TRACE0(DBG_TX,"-Smsc9118XmitOnePacket\r\n");
; 3520 : 	return TRUE;

  005dc	e59d0074	 ldr         r0, [sp, #0x74]
  005e0	eb000000	 bl          __security_check_cookie
  005e4	e3a00001	 mov         r0, #1
  005e8		 |$LN65@Smsc9118Xm|

; 3521 : }

  005e8	e28dd078	 add         sp, sp, #0x78
  005ec	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  005f0	e12fff1e	 bx          lr
  005f4		 |$LN2@Smsc9118Xm|

; 3508 : 			SMSC_TRACE0(DBG_TX,"Tx Success\r\n");
; 3509 : 		}
; 3510 : 		else
; 3511 : 		{
; 3512 : 			// Update the stats
; 3513 : 			(pAdapter->ulFramesXmitBad)++;

  005f4	e5953130	 ldr         r3, [r5, #0x130]
  005f8	e2833001	 add         r3, r3, #1
  005fc	e5853130	 str         r3, [r5, #0x130]

; 3514 : 			SMSC_TRACE1(DBG_TX,"Tx Error! TxStatus = 0x%x\r\n", TxStatus);
; 3515 : 			return FALSE;

  00600	eafffea3	 b           |$LN131@Smsc9118Xm|
  00604		 |$LN136@Smsc9118Xm|
  00604		 |$LN137@Smsc9118Xm|
  00604	00000000	 DCD         |??_C@_1EI@FGEKPOEA@?$AAp?$AAk?$AAt?$AA_?$AAl?$AAe?$AAn?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AAu?$AAi?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DN?$AA?5?$AA?$CF@|
  00608		 |$LN138@Smsc9118Xm|
  00608	00000000	 DCD         |__security_cookie|
  0060c		 |$M54172|

			 ENDP  ; |Smsc9118XmitOnePacket|

	EXPORT	|SyncSetTDFALevel|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54196| DCD	|$LN9@SyncSetTDF|
	DCD	0x40000900
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SyncSetTDFALevel| PROC

; 3732 : {

  00000		 |$LN9@SyncSetTDF|
  00000		 |$M54193|

; 3733 : 	DWORD dw;
; 3734 : 	const SMSC9118_ADAPTER * const pAdapter = (PSMSC9118_ADAPTER)(SynchronizeContext);
; 3735 : 
; 3736 : 	// Set the TDFA level.
; 3737 : 	dw = GetRegDW(pAdapter->lan9118_data.dwLanBase, FIFO_INT);

  00000	e5901008	 ldr         r1, [r0, #8]

; 3738 : 	dw &= (~FIFO_INT_TX_AVAIL_LEVEL_);
; 3739 : 	dw |= (pAdapter->TDFALevel) << 24;

  00004	e2803a01	 add         r3, r0, #1, 20
  00008	e59329bc	 ldr         r2, [r3, #0x9BC]
  0000c	e5913068	 ldr         r3, [r1, #0x68]

; 3740 : 	SetRegDW(pAdapter->lan9118_data.dwLanBase, FIFO_INT, dw);
; 3741 : 	return (BOOLEAN)TRUE;

  00010	e3a00001	 mov         r0, #1
  00014	e3c334ff	 bic         r3, r3, #0xFF, 8
  00018	e1833c02	 orr         r3, r3, r2, lsl #24
  0001c	e5813068	 str         r3, [r1, #0x68]

; 3742 : }

  00020	e12fff1e	 bx          lr
  00024		 |$M54194|

			 ENDP  ; |SyncSetTDFALevel|

	EXPORT	|HandlerTxISR|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54221| DCD	|$LN13@HandlerTxI|
	DCD	0x40000c00
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HandlerTxISR| PROC

; 3749 : {

  00000		 |$LN13@HandlerTxI|
  00000		 |$M54218|
  00000	e3500000	 cmp         r0, #0

; 3750 : 	SMSC_TRACE0(DBG_TX,"+HandlerTxISR\r\n");
; 3751 : 	SMSC_ASSERT(pAdapter);
; 3752 : 
; 3753 : 	if (pAdapter)

  00004	0a000008	 beq         |$LN2@HandlerTxI|

; 3754 : 	{
; 3755 : 		// Disable the TDFA iterrupt by setting 0xFF to TDFA
; 3756 : 		pAdapter->TDFALevel = 0xFFUL;
; 3757 : 		if (SyncSetTDFALevel((PVOID)pAdapter) != TRUE)

  00008	e5902008	 ldr         r2, [r0, #8]
  0000c	e2801a01	 add         r1, r0, #1, 20
  00010	e3a030ff	 mov         r3, #0xFF
  00014	e58139bc	 str         r3, [r1, #0x9BC]
  00018	e5923068	 ldr         r3, [r2, #0x68]

; 3758 : 		{
; 3759 : 			SMSC_WARNING(TEXT("SyncSetTDFALevel() returns FALSE\r\n"));
; 3760 : 		}
; 3761 : 
; 3762 : 		pAdapter->TxDPCNeeded = (BOOLEAN)TRUE;

  0001c	e3a00001	 mov         r0, #1
  00020	e38334ff	 orr         r3, r3, #0xFF, 8
  00024	e5823068	 str         r3, [r2, #0x68]
  00028	e5c109c3	 strb        r0, [r1, #0x9C3]
  0002c		 |$LN2@HandlerTxI|

; 3763 : 	}
; 3764 : 
; 3765 : 	SMSC_TRACE0(DBG_TX,"-HandlerTxISR\r\n");
; 3766 : }

  0002c	e12fff1e	 bx          lr
  00030		 |$M54219|

			 ENDP  ; |HandlerTxISR|

	EXPORT	|HandlerTxDPC|
	IMPORT	|NdisMSynchronizeWithInterrupt|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54242| DCD	|$LN19@HandlerTxD|
	DCD	0x40005d02
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HandlerTxDPC| PROC

; 3776 : {

  00000		 |$LN19@HandlerTxD|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M54239|
  00008	e1b04000	 movs        r4, r0

; 3777 : 	PNDIS_PACKET 	pPacket;
; 3778 : 	volatile DWORD	TxDataFreeSpace, TxSpaceNeeded;
; 3779 : 	UINT			packet_len;
; 3780 : 	DWORD			BufferCount;
; 3781 : 	BOOL			status = TRUE;
; 3782 : 	DPC_STATUS 		RetStatus = DPC_STATUS_DONE;

  0000c	e3a05000	 mov         r5, #0

; 3783 : 
; 3784 : 	SMSC_TRACE0(DBG_TX,"+HandlerTxDPC\r\n");
; 3785 : 	SMSC_ASSERT(pAdapter);
; 3786 : 
; 3787 : 	if (pAdapter) 

  00010	0a000051	 beq         |$LN8@HandlerTxD|

; 3788 : 	{
; 3789 : 		while (QUEUE_COUNT(&(pAdapter->TxDeferedPkt))) 

  00014	e594317c	 ldr         r3, [r4, #0x17C]
  00018	e3530000	 cmp         r3, #0
  0001c	0a00004e	 beq         |$LN8@HandlerTxD|
  00020	e3a03cff	 mov         r3, #0xFF, 24
  00024	e59f6144	 ldr         r6, [pc, #0x144]
  00028	e38380ff	 orr         r8, r3, #0xFF
  0002c	e28d9004	 add         r9, sp, #4
  00030	e284aa01	 add         r10, r4, #1, 20
  00034	e3a0b000	 mov         r11, #0
  00038		 |$LL9@HandlerTxD|

; 3790 : 		{
; 3791 : 			pPacket = pAdapter->TxDeferedPkt.FirstPacket;
; 3792 : 			// Read the actual data.
; 3793 : 			TxDataFreeSpace = (GetRegDW(pAdapter->lan9118_data.dwLanBase, TX_FIFO_INF)) & TX_FIFO_INF_TDFREE_;

  00038	e5942008	 ldr         r2, [r4, #8]
  0003c	e5947174	 ldr         r7, [r4, #0x174]

; 3794 : 			NdisQueryPacket(pPacket, NULL, (PUINT)&BufferCount, NULL, (PUINT)&packet_len);

  00040	e3a03000	 mov         r3, #0
  00044	e5920080	 ldr         r0, [r2, #0x80]
  00048	e28d200c	 add         r2, sp, #0xC
  0004c	e3a01000	 mov         r1, #0
  00050	e0000008	 and         r0, r0, r8
  00054	e58d0010	 str         r0, [sp, #0x10]
  00058	e1a00007	 mov         r0, r7
  0005c	e58d9000	 str         r9, [sp]
  00060	eb000000	 bl          NdisQueryPacket

; 3795 : 			if ((pAdapter->fTxDMAMode) && (BufferCount < 30UL))

  00064	e59a31a4	 ldr         r3, [r10, #0x1A4]
  00068	e59d100c	 ldr         r1, [sp, #0xC]
  0006c	e3530000	 cmp         r3, #0
  00070	0a000006	 beq         |$LN7@HandlerTxD|
  00074	e351001e	 cmp         r1, #0x1E

; 3796 : 			{
; 3797 : 				// worst case for burst mode DMA
; 3798 : 				TxSpaceNeeded = ( ( (DWORD)packet_len + 
; 3799 : 									(BufferCount*((DWORD)MAX_NUM_SEGMENTS*TX_BURST_DMA_END_ALIGNMENT)) +  CACHE_LINE_BYTES) & ~(CACHE_LINE_BYTES-1UL));

  00078	359d2004	 ldrcc       r2, [sp, #4]
  0007c	30813081	 addcc       r3, r1, r1, lsl #1
  00080	30823283	 addcc       r3, r2, r3, lsl #5
  00084	32833020	 addcc       r3, r3, #0x20
  00088	33c3301f	 biccc       r3, r3, #0x1F
  0008c	3a000003	 bcc         |$LN16@HandlerTxD|
  00090		 |$LN7@HandlerTxD|

; 3800 : 			}
; 3801 : 			else
; 3802 : 			{
; 3803 : 				// if (BufferCount > 30), TxSpaceNeeded will be larger than
; 3804 : 				// max available TX FIFO.
; 3805 : 				// If then, Smsc9118XmitOnePacket() will handle the packet
; 3806 : 				//  as PIO mode.
; 3807 : 				// We can check as PIO mode here
; 3808 : 				TxSpaceNeeded = (DWORD)((packet_len+3U)&(~0x03U)) + (BufferCount<<4);

  00090	e59d3004	 ldr         r3, [sp, #4]
  00094	e2833003	 add         r3, r3, #3
  00098	e3c33003	 bic         r3, r3, #3
  0009c	e0833201	 add         r3, r3, r1, lsl #4
  000a0		 |$LN16@HandlerTxD|
  000a0	e58d3008	 str         r3, [sp, #8]

; 3809 : 			}
; 3810 : 			if (TxSpaceNeeded < TxDataFreeSpace)

  000a4	e59d2008	 ldr         r2, [sp, #8]
  000a8	e59d3010	 ldr         r3, [sp, #0x10]
  000ac	e1520003	 cmp         r2, r3
  000b0	2a000021	 bcs         |$LN5@HandlerTxD|

; 3811 : 			{
; 3812 : 				status = Smsc9118XmitOnePacket(pAdapter, pPacket);

  000b4	e1a01007	 mov         r1, r7
  000b8	e1a00004	 mov         r0, r4
  000bc	eb000000	 bl          Smsc9118XmitOnePacket

; 3813 : 				DequeuePacket(pAdapter->TxDeferedPkt.FirstPacket, pAdapter->TxDeferedPkt.LastPacket);

  000c0	e5942174	 ldr         r2, [r4, #0x174]

; 3814 : 				if (status == FALSE)
; 3815 : 				{
; 3816 : 					NdisMSendComplete(pAdapter->hMiniportAdapterHandle, 
; 3817 : 							pPacket, NDIS_STATUS_FAILURE);

  000c4	e1a01007	 mov         r1, r7
  000c8	e5b23020	 ldr         r3, [r2, #0x20]!
  000cc	e3530000	 cmp         r3, #0
  000d0	0584b178	 streq       r11, [r4, #0x178]
  000d4	e5923000	 ldr         r3, [r2]
  000d8	e3500000	 cmp         r0, #0
  000dc	e5940000	 ldr         r0, [r4]
  000e0	e5843174	 str         r3, [r4, #0x174]
  000e4	e590310c	 ldr         r3, [r0, #0x10C]
  000e8	1a000003	 bne         |$LN3@HandlerTxD|
  000ec	e3a02107	 mov         r2, #7, 2
  000f0	e1a0e00f	 mov         lr, pc
  000f4	e12fff13	 bx          r3

; 3818 : 					SMSC_TRACE0(DBG_TX,"One packet failed xmitting.\r\n");
; 3819 : 				}
; 3820 : 				else

  000f8	ea000002	 b           |$LN2@HandlerTxD|
  000fc		 |$LN3@HandlerTxD|

; 3821 : 				{
; 3822 : 					NdisMSendComplete(pAdapter->hMiniportAdapterHandle, 
; 3823 : 							pPacket, NDIS_STATUS_SUCCESS);

  000fc	e3a02000	 mov         r2, #0
  00100	e1a0e00f	 mov         lr, pc
  00104	e12fff13	 bx          r3
  00108		 |$LN2@HandlerTxD|

; 3824 : 					SMSC_TRACE0(DBG_TX,"One packet xmitted successfully.\r\n");
; 3825 : 				}
; 3826 : 				(pAdapter->TxDeferedPkt.Count)--;

  00108	e594317c	 ldr         r3, [r4, #0x17C]
  0010c	e2433001	 sub         r3, r3, #1
  00110	e584317c	 str         r3, [r4, #0x17C]

; 3827 : #ifdef	TRACE_BUFFER
; 3828 : 				dwTxSent++;

  00114	e5963000	 ldr         r3, [r6]
  00118	e2833001	 add         r3, r3, #1
  0011c	e5863000	 str         r3, [r6]

; 3829 : 				dwTxPend--;

  00120	e5963004	 ldr         r3, [r6, #4]
  00124	e2433001	 sub         r3, r3, #1
  00128	e5863004	 str         r3, [r6, #4]
  0012c	e594317c	 ldr         r3, [r4, #0x17C]
  00130	e3530000	 cmp         r3, #0
  00134	1affffbf	 bne         |$LL9@HandlerTxD|
  00138	ea000007	 b           |$LN8@HandlerTxD|
  0013c		 |$LN5@HandlerTxD|

; 3830 : #endif
; 3831 : 			}
; 3832 : 			else
; 3833 : 			{
; 3834 : 				BOOLEAN	bRet;
; 3835 : 				pAdapter->TDFALevel = 0x20UL;
; 3836 : 				bRet = NdisMSynchronizeWithInterrupt(&(pAdapter->Interrupt),
; 3837 : 													SyncSetTDFALevel,
; 3838 : 													(PVOID)pAdapter);

  0013c	e59f1028	 ldr         r1, [pc, #0x28]
  00140	e2843a01	 add         r3, r4, #1, 20
  00144	e3a0e020	 mov         lr, #0x20
  00148	e1a02004	 mov         r2, r4
  0014c	e28400d4	 add         r0, r4, #0xD4
  00150	e583e9bc	 str         lr, [r3, #0x9BC]
  00154	eb000000	 bl          NdisMSynchronizeWithInterrupt

; 3839 : 				// SyncSetTDFALevel() always returns TRUE
; 3840 : 				// Make Lint Happy
; 3841 : 				bRet = bRet;
; 3842 : 				RetStatus = DPC_STATUS_PENDING;

  00158	e3a05001	 mov         r5, #1
  0015c		 |$LN8@HandlerTxD|

; 3843 : 				break;	// exit from while(pPacket...)
; 3844 : 			}
; 3845 : 		} // end of while
; 3846 : 	}
; 3847 : 
; 3848 : 	SMSC_TRACE0(DBG_TX,"-HandlerTxDPC\r\n");
; 3849 : 	return RetStatus;
; 3850 : }

  0015c	e1a00005	 mov         r0, r5
  00160	e28dd014	 add         sp, sp, #0x14
  00164	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00168	e12fff1e	 bx          lr
  0016c		 |$LN20@HandlerTxD|
  0016c		 |$LN21@HandlerTxD|
  0016c	00000000	 DCD         |SyncSetTDFALevel|
  00170		 |$LN22@HandlerTxD|
  00170	00000000	 DCD         |dwTxSent|
  00174		 |$M54240|

			 ENDP  ; |HandlerTxDPC|

	EXPORT	|HandlerPhyDPC|

  00000			 AREA	 |.pdata|, PDATA
|$T54255| DCD	|$LN14@HandlerPhy|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HandlerPhyDPC| PROC

; 3854 : {

  00000		 |$LN14@HandlerPhy|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M54252|
  00004	e1b04000	 movs        r4, r0

; 3855 : 	if (pAdapter)

  00008	0a000004	 beq         |$LN9@HandlerPhy|

; 3856 : 	{
; 3857 : 		switch(LinkIndicate(pAdapter))

  0000c	e1a00004	 mov         r0, r4
  00010	eb000000	 bl          LinkIndicate

; 3858 : 		{
; 3859 : 			case LINK_NO_LINK:
; 3860 : 				SMSC_TRACE0(DBG_PHY,"LINK_NO_LINK\n");
; 3861 : 				break;
; 3862 : 			case LINK_10MPS_HALF:
; 3863 : 				SMSC_TRACE0(DBG_PHY,"LINK_10MPS_HALF\n");
; 3864 : 				break;
; 3865 : 			case LINK_10MPS_FULL:
; 3866 : 				SMSC_TRACE0(DBG_PHY,"LINK_10MPS_FULL\n");
; 3867 : 				break;
; 3868 : 			case LINK_100MPS_HALF:
; 3869 : 				SMSC_TRACE0(DBG_PHY,"LINK_100MPS_HALF\n");
; 3870 : 				break;
; 3871 : 			case LINK_100MPS_FULL:
; 3872 : 				SMSC_TRACE0(DBG_PHY,"LINK_100MPS_FULL\n");
; 3873 : 				break;
; 3874 : 			default:
; 3875 : 				SMSC_WARNING1("Unknown Link Mode, dwLinkMode=0x%08lX\n", pAdapter->lan9118_data.dwLinkMode);
; 3876 : 				break;
; 3877 : 		}
; 3878 : 
; 3879 : 		pAdapter->PhyDPCNeeded = (BOOLEAN)FALSE;

  00014	e2843a01	 add         r3, r4, #1, 20
  00018	e3a02000	 mov         r2, #0
  0001c	e5c329c4	 strb        r2, [r3, #0x9C4]
  00020		 |$LN9@HandlerPhy|

; 3880 : 	}
; 3881 : 
; 3882 : 	return DPC_STATUS_DONE;

  00020	e3a00000	 mov         r0, #0

; 3883 : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M54253|

			 ENDP  ; |HandlerPhyDPC|

	EXPORT	|CheckPhyStatus|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54281| DCD	|$LN31@CheckPhySt|
	DCD	0x40005f01
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CheckPhyStatus| PROC

; 3919 : {

  00000		 |$LN31@CheckPhySt|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M54278|
  00004	e1a04000	 mov         r4, r0

; 3920 : 	static volatile WORD	wOldPhyBSR = (WORD)0x0;
; 3921 : 	WORD 					wPhyBSR;
; 3922 : 	DWORD					dwTemp, dwRegVal;
; 3923 : 
; 3924 : 	wPhyBSR = AdapterReadPhy(PHY_BSR);

  00008	e5d41020	 ldrb        r1, [r4, #0x20]
  0000c	e5940008	 ldr         r0, [r4, #8]
  00010	e3a02001	 mov         r2, #1
  00014	eb000000	 bl          Lan_GetMiiRegW

; 3925 : 
; 3926 : 	if (((wOldPhyBSR & PHY_BSR_LINK_STATUS_) == 0x0) &&
; 3927 : 		((wPhyBSR & PHY_BSR_LINK_STATUS_) == PHY_BSR_LINK_STATUS_))

  00018	e59f7158	 ldr         r7, [pc, #0x158]
  0001c	e1a06800	 mov         r6, r0, lsl #16
  00020	e3a02611	 mov         r2, #0x11, 12
  00024	e1d730b0	 ldrh        r3, [r7]
  00028	e1a06826	 mov         r6, r6, lsr #16
  0002c	e3a0a001	 mov         r10, #1
  00030	e3130004	 tst         r3, #4
  00034	e3829001	 orr         r9, r2, #1
  00038	e3828002	 orr         r8, r2, #2
  0003c	1a00002f	 bne         |$LN23@CheckPhySt|
  00040	e2063004	 and         r3, r6, #4
  00044	e3530004	 cmp         r3, #4
  00048	1a00002c	 bne         |$LN23@CheckPhySt|

; 3928 : 	{
; 3929 : 		// Link Up
; 3930 : 		SMSC_TRACE0(DBG_PHY,"Link Up.\r\n");
; 3931 : 		if(wPhyBSR & PHY_BSR_AUTO_NEG_COMP_) 

  0004c	e3160020	 tst         r6, #0x20
  00050	0a00002a	 beq         |$LN23@CheckPhySt|

; 3932 : 		{
; 3933 : 			SMSC_TRACE0(DBG_PHY,"Auto Negotiation Complete.\n");
; 3934 : 			dwTemp = Lan_GetLinkMode(&pAdapter->lan9118_data);

  00054	e2840008	 add         r0, r4, #8
  00058	eb000000	 bl          Lan_GetLinkMode
  0005c	e1b05000	 movs        r5, r0

; 3935 : 			if (dwTemp != LINK_NO_LINK)

  00060	0a000026	 beq         |$LN23@CheckPhySt|

; 3936 : 			{
; 3937 : 				dwRegVal = Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR);

  00064	e5940008	 ldr         r0, [r4, #8]
  00068	e3a01001	 mov         r1, #1
  0006c	eb000000	 bl          Lan_GetMacRegDW

; 3938 : 				dwRegVal &= ~(MAC_CR_FDPX_|MAC_CR_RCVOWN_);

  00070	e3c02609	 bic         r2, r0, #9, 12

; 3939 : 				switch (dwTemp) 

  00074	e3550001	 cmp         r5, #1
  00078	0a000007	 beq         |$LN13@CheckPhySt|
  0007c	e3550002	 cmp         r5, #2
  00080	0a000003	 beq         |$LN12@CheckPhySt|
  00084	e3550003	 cmp         r5, #3
  00088	0a000003	 beq         |$LN13@CheckPhySt|
  0008c	e3550004	 cmp         r5, #4
  00090	1a000002	 bne         |$LN14@CheckPhySt|
  00094		 |$LN12@CheckPhySt|

; 3944 : 						break;
; 3945 : 
; 3946 : 					case LINK_10MPS_FULL:
; 3947 : 					case LINK_100MPS_FULL:
; 3948 : 						dwRegVal |= MAC_CR_FDPX_;

  00094	e3822601	 orr         r2, r2, #1, 12

; 3949 : 						break;

  00098	ea000000	 b           |$LN14@CheckPhySt|
  0009c		 |$LN13@CheckPhySt|

; 3940 : 				{
; 3941 : 					case LINK_10MPS_HALF:
; 3942 : 					case LINK_100MPS_HALF:
; 3943 : 						dwRegVal |= MAC_CR_RCVOWN_;

  0009c	e3822502	 orr         r2, r2, #2, 10
  000a0		 |$LN14@CheckPhySt|

; 3950 : 					default:
; 3951 : 						break;
; 3952 : 				}
; 3953 : 				Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR, dwRegVal);

  000a0	e5940008	 ldr         r0, [r4, #8]
  000a4	e3a01001	 mov         r1, #1
  000a8	eb000000	 bl          Lan_SetMacRegDW

; 3954 : 				pAdapter->PhyDPCNeeded = (BOOLEAN)TRUE;
; 3955 : #ifdef USE_LED1_WORK_AROUND
; 3956 : 				// workaround for 118/117/116/115 family
; 3957 : 				if (((pAdapter->lan9118_data.dwIdRev & 0xFFF0FFFFUL) == 0x01100001UL) ||
; 3958 : 					((pAdapter->lan9118_data.dwIdRev & 0xFFF0FFFFUL) == 0x01100002UL))

  000ac	e594200c	 ldr         r2, [r4, #0xC]
  000b0	e2843a01	 add         r3, r4, #1, 20
  000b4	e5c3a9c4	 strb        r10, [r3, #0x9C4]
  000b8	e3c2380f	 bic         r3, r2, #0xF, 16
  000bc	e1530009	 cmp         r3, r9
  000c0	0a000001	 beq         |$LN9@CheckPhySt|
  000c4	e1530008	 cmp         r3, r8
  000c8	1a00000c	 bne         |$LN23@CheckPhySt|
  000cc		 |$LN9@CheckPhySt|

; 3959 : 				{
; 3960 : 					if(pAdapter->lan9118_data.bPhyAddress == (BYTE)1)	// internal PHY only

  000cc	e5d43020	 ldrb        r3, [r4, #0x20]
  000d0	e3530001	 cmp         r3, #1
  000d4	1a000009	 bne         |$LN23@CheckPhySt|

; 3961 : 					{
; 3962 : 						DWORD	dwOldGpioCfg=GetRegDW(pAdapter->lan9118_data.dwLanBase, GPIO_CFG);

  000d8	e5942008	 ldr         r2, [r4, #8]

; 3963 : 
; 3964 : 						// Link is now UP (in some link state fashion)
; 3965 : 						if (pAdapter->lan9118_data.dwOriginalGpioCfg & GPIO_CFG_LED1_EN_)

  000dc	e5941038	 ldr         r1, [r4, #0x38]
  000e0	e5923088	 ldr         r3, [r2, #0x88]
  000e4	e3110201	 tst         r1, #1, 4
  000e8	0a000004	 beq         |$LN23@CheckPhySt|

; 3966 : 						{
; 3967 : 							/* If we only restore the LED1 state when we
; 3968 : 							 * expected to, other processes can muck with
; 3969 : 							 * the GPIO_CFG register the rest of the time.
; 3970 : 							 * You could also think of this as a one-shot.
; 3971 : 							 */
; 3972 : 							if (pAdapter->lan9118_data.LED1NotYetRestored == TRUE)

  000ec	e5d4303c	 ldrb        r3, [r4, #0x3C]
  000f0	e3530001	 cmp         r3, #1

; 3973 : 							{
; 3974 : 								SMSC_TRACE2(DBG_PHY,"LED1 on GPIO_CFG:0x%08x <-- 0x%08x\n\r",
; 3975 : 									pAdapter->lan9118_data.dwOriginalGpioCfg, dwOldGpioCfg);
; 3976 : 								dwOldGpioCfg = pAdapter->lan9118_data.dwOriginalGpioCfg;
; 3977 : 								pAdapter->lan9118_data.LED1NotYetRestored = (BOOLEAN)FALSE;

  000f4	03a03000	 moveq       r3, #0
  000f8	05c4303c	 streqb      r3, [r4, #0x3C]

; 3978 : 								SetRegDW(pAdapter->lan9118_data.dwLanBase, GPIO_CFG,
; 3979 : 									dwOldGpioCfg);

  000fc	05821088	 streq       r1, [r2, #0x88]
  00100		 |$LN23@CheckPhySt|

; 3980 : 							}
; 3981 : 						}
; 3982 : 					}
; 3983 : 				}
; 3984 : #endif // USE_LED1_WORK_AROUND
; 3985 : 			}
; 3986 : 			SMSC_TRACE1(DBG_PHY,"LPA=0x%x\n",
; 3987 : 								Lan_GetPhyRegW(pAdapter->lan9118_data.dwLanBase, pAdapter->lan9118_data.bPhyAddress, PHY_ANEG_LPA));
; 3988 : 			SMSC_TRACE1(DBG_PHY,"ADV=0x%x\n",
; 3989 : 								Lan_GetPhyRegW(pAdapter->lan9118_data.dwLanBase, pAdapter->lan9118_data.bPhyAddress, PHY_ANEG_ADV));
; 3990 : 		}
; 3991 : 	}
; 3992 : 
; 3993 : 	if (((wOldPhyBSR & PHY_BSR_LINK_STATUS_) == PHY_BSR_LINK_STATUS_) &&
; 3994 : 		((wPhyBSR & PHY_BSR_LINK_STATUS_) == (WORD)0x0))

  00100	e1d730b0	 ldrh        r3, [r7]
  00104	e2033004	 and         r3, r3, #4
  00108	e3530004	 cmp         r3, #4
  0010c	1a000015	 bne         |$LN27@CheckPhySt|
  00110	e3160004	 tst         r6, #4
  00114	1a000013	 bne         |$LN27@CheckPhySt|

; 3995 : 	{
; 3996 : 		// Link Down
; 3997 : 		pAdapter->PhyDPCNeeded = (BOOLEAN)TRUE;
; 3998 : #ifdef USE_LED1_WORK_AROUND
; 3999 : 		// workaround for 118/117/116/115 family
; 4000 : 		if (((pAdapter->lan9118_data.dwIdRev & 0xFFF0FFFFUL) == 0x01100001UL) ||
; 4001 : 			((pAdapter->lan9118_data.dwIdRev & 0xFFF0FFFFUL) == 0x01100002UL))

  00118	e594200c	 ldr         r2, [r4, #0xC]
  0011c	e2843a01	 add         r3, r4, #1, 20
  00120	e5c3a9c4	 strb        r10, [r3, #0x9C4]
  00124	e3c2380f	 bic         r3, r2, #0xF, 16
  00128	e1530009	 cmp         r3, r9
  0012c	0a000001	 beq         |$LN3@CheckPhySt|
  00130	e1530008	 cmp         r3, r8
  00134	1a00000b	 bne         |$LN27@CheckPhySt|
  00138		 |$LN3@CheckPhySt|

; 4002 : 		{
; 4003 : 			if(pAdapter->lan9118_data.bPhyAddress == (BYTE)1)	// on internal PHY use only

  00138	e5d43020	 ldrb        r3, [r4, #0x20]
  0013c	e3530001	 cmp         r3, #1
  00140	1a000008	 bne         |$LN27@CheckPhySt|

; 4004 : 			{
; 4005 : 				DWORD	dwOldGpioCfg=GetRegDW(pAdapter->lan9118_data.dwLanBase, GPIO_CFG);

  00144	e5940008	 ldr         r0, [r4, #8]
  00148	e5901088	 ldr         r1, [r0, #0x88]

; 4006 : 
; 4007 : 				// Check global setting that LED1 usage is 10/100 indicator
; 4008 : 				if (dwOldGpioCfg & GPIO_CFG_LED1_EN_)

  0014c	e3110201	 tst         r1, #1, 4

; 4009 : 				{
; 4010 : 					//Force 10/100 LED off, after saving orginal GPIO config
; 4011 : 					pAdapter->lan9118_data.dwOriginalGpioCfg = dwOldGpioCfg;
; 4012 : 					pAdapter->lan9118_data.LED1NotYetRestored = (BOOLEAN)TRUE;
; 4013 : 
; 4014 : 					dwOldGpioCfg &= ~GPIO_CFG_LED1_EN_;
; 4015 : 					dwOldGpioCfg |=  GPIO_CFG_LED1_DIS_;

  00150	159f201c	 ldrne       r2, [pc, #0x1C]
  00154	13c13201	 bicne       r3, r1, #1, 4
  00158	15841038	 strne       r1, [r4, #0x38]
  0015c	11833002	 orrne       r3, r3, r2
  00160	15c4a03c	 strneb      r10, [r4, #0x3C]

; 4016 : 					SetRegDW(pAdapter->lan9118_data.dwLanBase, GPIO_CFG,
; 4017 : 						dwOldGpioCfg);

  00164	15803088	 strne       r3, [r0, #0x88]
  00168		 |$LN27@CheckPhySt|

; 4018 : 					SMSC_TRACE2(DBG_PHY,"LED1 off GPIO_CFG:0x%08x-->0x%08x\n\r",
; 4019 : 						pAdapter->lan9118_data.dwOriginalGpioCfg, dwOldGpioCfg);
; 4020 : 				}
; 4021 : 			}
; 4022 : 		}
; 4023 : #endif // USE_LED1_WORK_AROUND
; 4024 : 	}
; 4025 : 
; 4026 : 	wOldPhyBSR = wPhyBSR;

  00168	e1c760b0	 strh        r6, [r7]

; 4027 : 	SMSC_TRACE0(DBG_PHY,"");
; 4028 : }

  0016c	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00170	e12fff1e	 bx          lr
  00174		 |$LN32@CheckPhySt|
  00174		 |$LN33@CheckPhySt|
  00174	00010101	 DCD         0x10101
  00178		 |$LN34@CheckPhySt|
  00178	00000000	 DCD         |?wOldPhyBSR@?1??CheckPhyStatus@@9@9|
  0017c		 |$M54279|

			 ENDP  ; |CheckPhyStatus|

	EXPORT	|HandlerGptISR|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54300| DCD	|$LN9@HandlerGpt|
	DCD	0x40000b01
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HandlerGptISR| PROC

; 4034 : {

  00000		 |$LN9@HandlerGpt|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M54297|

; 4035 : 	DWORD	dw;
; 4036 : 
; 4037 : 	SMSC_TRACE0(DBG_ISR, "+HandlerGptISR\r\n");
; 4038 : 
; 4039 : 	// Reload GPT Timer
; 4040 : 	dw = GetRegDW(pAdapter->lan9118_data.dwLanBase, GPT_CFG);

  00004	e5901008	 ldr         r1, [r0, #8]
  00008	e3e03cff	 mvn         r3, #0xFF, 24

; 4041 : 	dw &= ~0xFFFFUL;
; 4042 : 	dw |= GPT_INT_INTERVAL;

  0000c	e22320ff	 eor         r2, r3, #0xFF
  00010	e591308c	 ldr         r3, [r1, #0x8C]

; 4043 : 	SetRegDW(pAdapter->lan9118_data.dwLanBase, GPT_CFG, dw);
; 4044 : 
; 4045 : 	CheckPhyStatus(pAdapter);

  00014	e0033002	 and         r3, r3, r2
  00018	e3833e7d	 orr         r3, r3, #0x7D, 28
  0001c	e581308c	 str         r3, [r1, #0x8C]
  00020	eb000000	 bl          CheckPhyStatus

; 4046 : 
; 4047 : 	SMSC_TRACE0(DBG_ISR, "-HandlerGptISR\r\n");
; 4048 : }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$M54298|

			 ENDP  ; |HandlerGptISR|

	EXPORT	|HandlerRxStopISR|
	IMPORT	|Lan_DisableInterrupt|

  00000			 AREA	 |.pdata|, PDATA
|$T54309| DCD	|$LN5@HandlerRxS|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HandlerRxStopISR| PROC

; 4135 : {

  00000		 |$LN5@HandlerRxS|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M54306|
  00004	e1a05000	 mov         r5, r0

; 4136 : 	const DWORD dwLanBase = pAdapter->lan9118_data.dwLanBase;
; 4137 : 	
; 4138 : 	// Disable 
; 4139 : 	Lan_DisableInterrupt((PLAN9118_DATA)&pAdapter->lan9118_data, INT_EN_RXSTOP_INT_EN_);

  00008	e5b04008	 ldr         r4, [r0, #8]!
  0000c	e3a01401	 mov         r1, #1, 8
  00010	eb000000	 bl          Lan_DisableInterrupt

; 4140 : 
; 4141 : 	// set multicasts
; 4142 : 	Lan_SetMacRegDW(dwLanBase, HASHL, pAdapter->ucNicMulticastRegs[0]);

  00014	e5952154	 ldr         r2, [r5, #0x154]
  00018	e3a01005	 mov         r1, #5
  0001c	e1a00004	 mov         r0, r4
  00020	eb000000	 bl          Lan_SetMacRegDW

; 4143 : 	Lan_SetMacRegDW(dwLanBase, HASHH, pAdapter->ucNicMulticastRegs[1]);

  00024	e5952158	 ldr         r2, [r5, #0x158]
  00028	e3a01004	 mov         r1, #4
  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          Lan_SetMacRegDW

; 4144 : 
; 4145 : 	Smsc9118SetMacFilter(pAdapter);

  00034	e1a00005	 mov         r0, r5
  00038	eb000000	 bl          Smsc9118SetMacFilter

; 4146 : 
; 4147 : 	// Enable RX 
; 4148 : 	EnableMacRxEn(pAdapter);

  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          EnableMacRxEn

; 4149 : 
; 4150 : 	pAdapter->RxStopDPCNeeded = (BOOLEAN)TRUE;

  00044	e2853a01	 add         r3, r5, #1, 20
  00048	e3a02001	 mov         r2, #1
  0004c	e5c329c6	 strb        r2, [r3, #0x9C6]

; 4151 : }

  00050	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M54307|

			 ENDP  ; |HandlerRxStopISR|

	EXPORT	|MacRxEnWorkaround|
	IMPORT	|DisableCPUInt|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54325| DCD	|$LN12@MacRxEnWor|
	DCD	0x40002101
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MacRxEnWorkaround| PROC

; 4155 : {

  00000		 |$LN12@MacRxEnWor|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M54322|
  00004	e1a04000	 mov         r4, r0

; 4156 : 	const DWORD dwLanBase = pAdapter->lan9118_data.dwLanBase;

  00008	e5945008	 ldr         r5, [r4, #8]

; 4157 : 	DWORD	dwReg;
; 4158 : 	
; 4159 : 	DisableCPUInt();

  0000c	eb000000	 bl          DisableCPUInt

; 4160 : 
; 4161 : 	// Disable RX 
; 4162 : 	dwReg = Lan_GetMacRegDW(dwLanBase, MAC_CR);

  00010	e3a01001	 mov         r1, #1
  00014	e1a00005	 mov         r0, r5
  00018	eb000000	 bl          Lan_GetMacRegDW

; 4163 : 	if (dwReg & MAC_CR_RXEN_)

  0001c	e3100004	 tst         r0, #4
  00020	e3a06001	 mov         r6, #1
  00024	0a000008	 beq         |$LN3@MacRxEnWor|

; 4164 : 	{
; 4165 : 		SetRegDW(dwLanBase, INT_STS, INT_STS_RXSTOP_INT_);
; 4166 : 		dwReg &= ~MAC_CR_RXEN_;

  00028	e3a03401	 mov         r3, #1, 8
  0002c	e3c02004	 bic         r2, r0, #4

; 4167 : 		Lan_SetMacRegDW(dwLanBase, MAC_CR, dwReg);

  00030	e1a00005	 mov         r0, r5
  00034	e3a01001	 mov         r1, #1
  00038	e5853058	 str         r3, [r5, #0x58]
  0003c	eb000000	 bl          Lan_SetMacRegDW

; 4168 : 
; 4169 : 		if (GetRegDW(dwLanBase, INT_STS) & INT_STS_RXSTOP_INT_)

  00040	e5953058	 ldr         r3, [r5, #0x58]
  00044	e3130401	 tst         r3, #1, 8
  00048	0a000009	 beq         |$LN1@MacRxEnWor|
  0004c		 |$LN3@MacRxEnWor|

; 4170 : 		{
; 4171 : 			UpdateFilterAndMacReg(pAdapter);
; 4172 : 			// Enable RX 
; 4173 : 			EnableMacRxEn(pAdapter);
; 4174 : 			EnableCPUInt();
; 4175 : 			// Wait for at least 64uSec after enabling MAC_CR_RXEN
; 4176 : 			DelayUsingFreeRun(pAdapter, 64L);
; 4177 : 			pAdapter->f100RxEnWorkaroundDone = 1L;
; 4178 : 		}
; 4179 : 	}
; 4180 : 	else
; 4181 : 	{
; 4182 : 		UpdateFilterAndMacReg(pAdapter);

  0004c	e1a00004	 mov         r0, r4
  00050	eb000000	 bl          UpdateFilterAndMacReg

; 4183 : 		// Enable RX 
; 4184 : 		EnableMacRxEn(pAdapter);

  00054	e1a00004	 mov         r0, r4
  00058	eb000000	 bl          EnableMacRxEn

; 4185 : 		EnableCPUInt();

  0005c	eb000000	 bl          EnableCPUInt

; 4186 : 		// Wait for at least 64uSec after enabling MAC_CR_RXEN
; 4187 : 		DelayUsingFreeRun(pAdapter, 64L);

  00060	e3a01040	 mov         r1, #0x40
  00064	e1a00004	 mov         r0, r4
  00068	eb000000	 bl          DelayUsingFreeRun

; 4188 : 		pAdapter->f100RxEnWorkaroundDone = 1L;

  0006c	e2843c1a	 add         r3, r4, #0x1A, 24
  00070	e58360cc	 str         r6, [r3, #0xCC]
  00074		 |$LN1@MacRxEnWor|

; 4189 : 	}
; 4190 : 
; 4191 : 	pAdapter->SWDPCNeeded = (BOOLEAN)TRUE;

  00074	e2843a01	 add         r3, r4, #1, 20
  00078	e5c369c5	 strb        r6, [r3, #0x9C5]

; 4192 : }

  0007c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$M54323|

			 ENDP  ; |MacRxEnWorkaround|

; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54369| DCD	|$LN33@RxForceRec|
	DCD	0x40002801
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RxForceReceiverDiscard| PROC

; 4200 : {

  00000		 |$LN33@RxForceRec|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M54366|
  00004	e1a04000	 mov         r4, r0

; 4201 : 	SMSC9118_ADAPTER * const pAdapter = ((PSMSC9118_ADAPTER)pContext);
; 4202 : 	DWORD dwMac_cr, dwDelay;
; 4203 : 	int i;
; 4204 : 
; 4205 : 	/* stop the reciever (RXEN) */
; 4206 : 	dwMac_cr = Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR);

  00008	e5940008	 ldr         r0, [r4, #8]
  0000c	e3a01001	 mov         r1, #1
  00010	eb000000	 bl          Lan_GetMacRegDW
  00014	e1a05000	 mov         r5, r0

; 4207 : 	Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR, dwMac_cr & (~(MAC_CR_RXEN_)));

  00018	e5940008	 ldr         r0, [r4, #8]
  0001c	e3c52004	 bic         r2, r5, #4
  00020	e3a01001	 mov         r1, #1
  00024	eb000000	 bl          Lan_SetMacRegDW

; 4208 : 	dwDelay = GetRegDW(pAdapter->lan9118_data.dwLanBase,BYTE_TEST);	//delay

  00028	e5941008	 ldr         r1, [r4, #8]

; 4209 : 
; 4210 : 	/* wait for the receiver to actually stop running by
; 4211 : 	 * referencing the RXSTOP intr status
; 4212 : 	 */
; 4213 : 	for (i=0; i < 100; i++)

  0002c	e3a02000	 mov         r2, #0
  00030	e5913064	 ldr         r3, [r1, #0x64]
  00034		 |$LL8@RxForceRec|

; 4214 : 	{
; 4215 : 		DWORD dwInt_sts = GetRegDW(pAdapter->lan9118_data.dwLanBase,INT_STS);

  00034	e5913058	 ldr         r3, [r1, #0x58]

; 4216 : 		if (dwInt_sts & INT_STS_RXSTOP_INT_)

  00038	e3130401	 tst         r3, #1, 8
  0003c	1a000002	 bne         |$LN27@RxForceRec|
  00040	e2822001	 add         r2, r2, #1
  00044	e3520064	 cmp         r2, #0x64
  00048	bafffff9	 blt         |$LL8@RxForceRec|
  0004c		 |$LN27@RxForceRec|

; 4217 : 			break;
; 4218 : 	}
; 4219 : 	/* clear STS */
; 4220 : 	SetRegDW(pAdapter->lan9118_data.dwLanBase,INT_STS,INT_STS_RXSTOP_INT_);

  0004c	e3a03401	 mov         r3, #1, 8
  00050	e5813058	 str         r3, [r1, #0x58]

; 4221 : 
; 4222 : 	/* discard all RX FIFO data via the DUMP cmd, and
; 4223 : 	 * wait for DUMP to self-clear
; 4224 : 	 */
; 4225 : 	SetRegDW(pAdapter->lan9118_data.dwLanBase,RX_CFG,RX_CFG_RX_DUMP_);

  00054	e5943008	 ldr         r3, [r4, #8]
  00058	e3a01902	 mov         r1, #2, 18

; 4226 : 	dwDelay = GetRegDW(pAdapter->lan9118_data.dwLanBase,BYTE_TEST);	//delay
; 4227 : 	for (i=0; i < 100; i++)

  0005c	e3a02000	 mov         r2, #0
  00060	e583106c	 str         r1, [r3, #0x6C]
  00064	e5940008	 ldr         r0, [r4, #8]
  00068	e5903064	 ldr         r3, [r0, #0x64]
  0006c		 |$LL4@RxForceRec|

; 4228 : 	{
; 4229 : 		DWORD dwRx_cfg = GetRegDW(pAdapter->lan9118_data.dwLanBase,RX_CFG);

  0006c	e590306c	 ldr         r3, [r0, #0x6C]

; 4230 : 		if ((dwRx_cfg & RX_CFG_RX_DUMP_) == 0)

  00070	e3130902	 tst         r3, #2, 18
  00074	0a000002	 beq         |$LN28@RxForceRec|
  00078	e2822001	 add         r2, r2, #1
  0007c	e3520064	 cmp         r2, #0x64
  00080	bafffff9	 blt         |$LL4@RxForceRec|
  00084		 |$LN28@RxForceRec|

; 4231 : 			break;
; 4232 : 	}
; 4233 : 
; 4234 : 	/* re-start the reciever (RXEN) */
; 4235 : 	Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, MAC_CR, dwMac_cr | MAC_CR_RXEN_);

  00084	e3852004	 orr         r2, r5, #4
  00088	e3a01001	 mov         r1, #1
  0008c	eb000000	 bl          Lan_SetMacRegDW

; 4236 : 	dwDelay = GetRegDW(pAdapter->lan9118_data.dwLanBase,BYTE_TEST);	//delay

  00090	e5943008	 ldr         r3, [r4, #8]
  00094	e5933064	 ldr         r3, [r3, #0x64]

; 4237 : }

  00098	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$M54367|

			 ENDP  ; |RxForceReceiverDiscard|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|Smsc9118HandleInterrupt|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54425| DCD	|$LN54@Smsc9118Ha@2|
	DCD	0xc0008202

  00000			 AREA	 |.xdata|, DATA
|$T54421| DCD	0xffffffe4
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T54421|

  00008		 |Smsc9118HandleInterrupt| PROC

; 4415 : {

  00008		 |$LN54@Smsc9118Ha@2|
  00008	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  0000c	e24dd020	 sub         sp, sp, #0x20
  00010		 |$M54422|
  00010	e59f31f4	 ldr         r3, [pc, #0x1F4]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d301c	 str         r3, [sp, #0x1C]
  0001c	e1b04000	 movs        r4, r0

; 4416 : 	SMSC9118_ADAPTER * const pAdapter = (PSMSC9118_ADAPTER)(hMiniportAdapterContext);
; 4417 : 	DPC_STATUS	TxStatus = DPC_STATUS_DONE;

  00020	e3a05000	 mov         r5, #0

; 4418 : 	DPC_STATUS	RxStatus = DPC_STATUS_DONE;

  00024	e3a06000	 mov         r6, #0

; 4419 : 	DPC_STATUS	PhyStatus;
; 4420 : 
; 4421 : 	SMSC_TRACE0(DBG_ISR,"+Smsc9118HandleInterrupt\r\n");
; 4422 : 	SMSC_ASSERT(pAdapter);
; 4423 : 
; 4424 : 	if (pAdapter)

  00028	0a000072	 beq         |$LN5@Smsc9118Ha@2|
  0002c	e2847c11	 add         r7, r4, #0x11, 24
  00030	e2848c11	 add         r8, r4, #0x11, 24
  00034		 |$LL16@Smsc9118Ha@2|

; 4425 : 	{
; 4426 : 		do 
; 4427 : 		{
; 4428 : 			if (!IS_ARRAY_EMPTY(pAdapter->FullPkt) && RxStatus == DPC_STATUS_DONE)

  00034	e597209c	 ldr         r2, [r7, #0x9C]
  00038	e5983098	 ldr         r3, [r8, #0x98]
  0003c	e1530002	 cmp         r3, r2
  00040	0a000004	 beq         |$LN13@Smsc9118Ha@2|
  00044	e3560000	 cmp         r6, #0
  00048	1a000002	 bne         |$LN13@Smsc9118Ha@2|

; 4429 : 			{
; 4430 : 				SMSC_TRACE0(DBG_RX,"DPC for RSFL interrupt\r\n");
; 4431 : 				RxStatus = HandlerRxDPC((PSMSC9118_ADAPTER)pAdapter);

  0004c	e1a00004	 mov         r0, r4
  00050	eb000000	 bl          HandlerRxDPC
  00054	e1a06000	 mov         r6, r0
  00058		 |$LN13@Smsc9118Ha@2|

; 4432 : 				// Make Lint Happy
; 4433 : 				RxStatus = RxStatus;
; 4434 : 			}
; 4435 : 
; 4436 : 			if (QUEUE_COUNT(&(pAdapter->TxDeferedPkt)) != 0UL && TxStatus == DPC_STATUS_DONE)

  00058	e594317c	 ldr         r3, [r4, #0x17C]
  0005c	e3530000	 cmp         r3, #0
  00060	0a000004	 beq         |$LN15@Smsc9118Ha@2|
  00064	e3550000	 cmp         r5, #0
  00068	1a000002	 bne         |$LN15@Smsc9118Ha@2|

; 4437 : 			{
; 4438 : 				SMSC_TRACE0(DBG_TX,"DPC for TDFA interrupt\r\n");
; 4439 : 				TxStatus = HandlerTxDPC((PSMSC9118_ADAPTER)pAdapter);

  0006c	e1a00004	 mov         r0, r4
  00070	eb000000	 bl          HandlerTxDPC
  00074	e1a05000	 mov         r5, r0
  00078		 |$LN15@Smsc9118Ha@2|

; 4440 : 				// Make Lint Happy
; 4441 : 				TxStatus = TxStatus;
; 4442 : 			}
; 4443 : 		} while ((!IS_ARRAY_EMPTY(pAdapter->FullPkt) && RxStatus == DPC_STATUS_DONE) || 
; 4444 : 		         (QUEUE_COUNT(&(pAdapter->TxDeferedPkt)) != 0UL && TxStatus == DPC_STATUS_DONE));

  00078	e597209c	 ldr         r2, [r7, #0x9C]
  0007c	e5983098	 ldr         r3, [r8, #0x98]
  00080	e1530002	 cmp         r3, r2
  00084	0a000001	 beq         |$LN11@Smsc9118Ha@2|
  00088	e3560000	 cmp         r6, #0
  0008c	0affffe8	 beq         |$LL16@Smsc9118Ha@2|
  00090		 |$LN11@Smsc9118Ha@2|
  00090	e594317c	 ldr         r3, [r4, #0x17C]
  00094	e3530000	 cmp         r3, #0
  00098	0a000001	 beq         |$LN10@Smsc9118Ha@2|
  0009c	e3550000	 cmp         r5, #0
  000a0	0affffe3	 beq         |$LL16@Smsc9118Ha@2|
  000a4		 |$LN10@Smsc9118Ha@2|

; 4445 : 
; 4446 : 		if (pAdapter->PhyDPCNeeded == (BOOLEAN)TRUE)

  000a4	e2843a01	 add         r3, r4, #1, 20
  000a8	e5d339c4	 ldrb        r3, [r3, #0x9C4]
  000ac	e3a07000	 mov         r7, #0
  000b0	e3530001	 cmp         r3, #1
  000b4	1a000003	 bne         |$LN32@Smsc9118Ha@2|

; 4447 : 		{
; 4448 :             SMSC_TRACE0(DBG_ISR,"   PhyDPCNeeded\r\n");
; 4449 :             PhyStatus = HandlerPhyDPC(pAdapter);

  000b8	e1a00004	 mov         r0, r4
  000bc	eb000000	 bl          LinkIndicate
  000c0	e2843a01	 add         r3, r4, #1, 20
  000c4	e5c379c4	 strb        r7, [r3, #0x9C4]
  000c8		 |$LN32@Smsc9118Ha@2|

; 4450 : 			// Make Lint Happy
; 4451 : 			PhyStatus = PhyStatus;
; 4452 : 		}
; 4453 : 		
; 4454 : 		if (pAdapter->SWDPCNeeded == (BOOLEAN)TRUE)

  000c8	e2843a01	 add         r3, r4, #1, 20
  000cc	e5d339c5	 ldrb        r3, [r3, #0x9C5]
  000d0	e3530001	 cmp         r3, #1
  000d4	1a000015	 bne         |$LN8@Smsc9118Ha@2|

; 4455 : 		{	
; 4456 :             SMSC_TRACE0(DBG_ISR,"   SWDPCNeeded\r\n");
; 4457 : 
; 4458 : 			if (GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_STS) & INT_STS_RXSTOP_INT_)

  000d8	e5943008	 ldr         r3, [r4, #8]
  000dc	e5933058	 ldr         r3, [r3, #0x58]
  000e0	e3130401	 tst         r3, #1, 8
  000e4	0a00000a	 beq         |$LN7@Smsc9118Ha@2|

; 4459 : 			{
; 4460 : 				UpdateFilterAndMacReg(pAdapter);

  000e8	e1a00004	 mov         r0, r4
  000ec	eb000000	 bl          UpdateFilterAndMacReg

; 4461 : 				// Enable RX 
; 4462 : 				EnableMacRxEn(pAdapter);

  000f0	e1a00004	 mov         r0, r4
  000f4	eb000000	 bl          EnableMacRxEn

; 4463 : 				EnableCPUInt();

  000f8	eb000000	 bl          EnableCPUInt

; 4464 : 				// Wait for at least 64uSec after enabling MAC_CR_RXEN
; 4465 : 				DelayUsingFreeRun(pAdapter, 64L);

  000fc	e3a01040	 mov         r1, #0x40
  00100	e1a00004	 mov         r0, r4
  00104	eb000000	 bl          DelayUsingFreeRun

; 4466 : 				pAdapter->f100RxEnWorkaroundDone = 1L;

  00108	e2843c1a	 add         r3, r4, #0x1A, 24
  0010c	e3a02001	 mov         r2, #1
  00110	e58320cc	 str         r2, [r3, #0xCC]
  00114		 |$LN7@Smsc9118Ha@2|

; 4467 : 
; 4468 : 			}
; 4469 : 			pAdapter->SWDPCNeeded = (BOOLEAN)FALSE;
; 4470 : 			NdisMSetInformationComplete(pAdapter->hMiniportAdapterHandle, NDIS_STATUS_SUCCESS);

  00114	e5940000	 ldr         r0, [r4]
  00118	e2843a01	 add         r3, r4, #1, 20
  0011c	e5c379c5	 strb        r7, [r3, #0x9C5]
  00120	e5903230	 ldr         r3, [r0, #0x230]
  00124	e3a01000	 mov         r1, #0
  00128	e1a0e00f	 mov         lr, pc
  0012c	e12fff13	 bx          r3
  00130		 |$LN8@Smsc9118Ha@2|

; 4471 : 		}
; 4472 : 		if (pAdapter->RxStopDPCNeeded == (BOOLEAN)TRUE)

  00130	e2843a01	 add         r3, r4, #1, 20
  00134	e5d339c6	 ldrb        r3, [r3, #0x9C6]
  00138	e3530001	 cmp         r3, #1
  0013c	1a000006	 bne         |$LN6@Smsc9118Ha@2|

; 4473 : 		{	
; 4474 :             SMSC_TRACE0(DBG_ISR,"   RxStopDPCNeeded\r\n");
; 4475 : 
; 4476 : 			NdisMSetInformationComplete(pAdapter->hMiniportAdapterHandle, NDIS_STATUS_SUCCESS);

  00140	e5940000	 ldr         r0, [r4]
  00144	e3a01000	 mov         r1, #0
  00148	e5903230	 ldr         r3, [r0, #0x230]
  0014c	e1a0e00f	 mov         lr, pc
  00150	e12fff13	 bx          r3

; 4477 : 			pAdapter->RxStopDPCNeeded = (BOOLEAN)FALSE;

  00154	e2843a01	 add         r3, r4, #1, 20
  00158	e5c379c6	 strb        r7, [r3, #0x9C6]
  0015c		 |$LN6@Smsc9118Ha@2|

; 4478 : 		}
; 4479 : 
; 4480 : 		if (pAdapter->RxOverRun == (BOOLEAN)TRUE)

  0015c	e2843a01	 add         r3, r4, #1, 20
  00160	e5d339c7	 ldrb        r3, [r3, #0x9C7]
  00164	e3530001	 cmp         r3, #1
  00168	1a000022	 bne         |$LN5@Smsc9118Ha@2|

; 4481 : 		{
; 4482 : 			DMA_XFER 	dmaXfer;
; 4483 : 			DWORD		dwReg, dwRegOld, dwCount;
; 4484 : 
; 4485 :             SMSC_TRACE0(DBG_ISR,"   RxOverRun\r\n");
; 4486 : 
; 4487 : 			if (pAdapter->fRxDMAMode)

  0016c	e2843a01	 add         r3, r4, #1, 20
  00170	e59331a0	 ldr         r3, [r3, #0x1A0]
  00174	e3530000	 cmp         r3, #0

; 4488 : 			{
; 4489 : 				dmaXfer.DMABaseVA = pAdapter->DMABaseVA;

  00178	12843a01	 addne       r3, r4, #1, 20
  0017c	159331a8	 ldrne       r3, [r3, #0x1A8]

; 4490 : 				DmaComplete(&dmaXfer, DMA_RX_CH);

  00180	13a01002	 movne       r1, #2
  00184	128d0000	 addne       r0, sp, #0
  00188	158d3000	 strne       r3, [sp]
  0018c	1b000000	 blne        DmaComplete

; 4491 : 			}
; 4492 : 			DisableMacRxEn(pAdapter);

  00190	e1a00004	 mov         r0, r4
  00194	eb000000	 bl          DisableMacRxEn

; 4493 : 
; 4494 : 			dwRegOld = dwReg = GetRegDW(pAdapter->lan9118_data.dwLanBase, RX_CFG);

  00198	e5942008	 ldr         r2, [r4, #8]
  0019c	e3e03103	 mvn         r3, #3, 2

; 4495 : 			dwReg &= 0x3FFFFFFFUL;

  001a0	e2233902	 eor         r3, r3, #2, 18
  001a4	e592606c	 ldr         r6, [r2, #0x6C]

; 4496 : 			dwReg |= RX_CFG_RX_DUMP_;
; 4497 : 			SetRegDW(pAdapter->lan9118_data.dwLanBase, RX_CFG, dwReg);
; 4498 : 			dwCount = 0UL;

  001a8	e3a05000	 mov         r5, #0
  001ac	e0063003	 and         r3, r6, r3
  001b0	e3833902	 orr         r3, r3, #2, 18
  001b4	e582306c	 str         r3, [r2, #0x6C]

; 4499 : 			while (GetRegDW(pAdapter->lan9118_data.dwLanBase, RX_CFG) & RX_CFG_RX_DUMP_)

  001b8	ea000004	 b           |$LN51@Smsc9118Ha@2|
  001bc		 |$LL3@Smsc9118Ha@2|

; 4500 : 			{
; 4501 : 				NdisStallExecution(10U);		// 10uSec

  001bc	e3a0000a	 mov         r0, #0xA
  001c0	eb000000	 bl          NdisStallExecution

; 4502 : 				if (dwCount++ > 100UL)	// 10u * 1000 = 1mSec

  001c4	e3550064	 cmp         r5, #0x64
  001c8	e2855001	 add         r5, r5, #1
  001cc	8a000003	 bhi         |$LN49@Smsc9118Ha@2|
  001d0		 |$LN51@Smsc9118Ha@2|
  001d0	e5943008	 ldr         r3, [r4, #8]
  001d4	e593306c	 ldr         r3, [r3, #0x6C]
  001d8	e3130902	 tst         r3, #2, 18
  001dc	1afffff6	 bne         |$LL3@Smsc9118Ha@2|
  001e0		 |$LN49@Smsc9118Ha@2|

; 4503 : 				{
; 4504 : 					SMSC_WARNING0("Timeout waiting RX_DUMP\n");
; 4505 : 					break;
; 4506 : 				}
; 4507 : 			}
; 4508 : 			SetRegDW(pAdapter->lan9118_data.dwLanBase, RX_CFG, dwRegOld);

  001e0	e5943008	 ldr         r3, [r4, #8]

; 4509 : 
; 4510 : 			EnableMacRxEn(pAdapter);

  001e4	e1a00004	 mov         r0, r4
  001e8	e583606c	 str         r6, [r3, #0x6C]
  001ec	eb000000	 bl          EnableMacRxEn

; 4511 : 			pAdapter->RxOverRun = (BOOLEAN)FALSE;

  001f0	e2843a01	 add         r3, r4, #1, 20
  001f4	e5c379c7	 strb        r7, [r3, #0x9C7]
  001f8		 |$LN5@Smsc9118Ha@2|
  001f8	e59d001c	 ldr         r0, [sp, #0x1C]
  001fc	eb000000	 bl          __security_check_cookie

; 4512 : 		}
; 4513 : 
; 4514 : 	}
; 4515 :     SMSC_TRACE0(DBG_ISR,"-Smsc9118HandleInterrupt\r\n");
; 4516 : }

  00200	e28dd020	 add         sp, sp, #0x20
  00204	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00208	e12fff1e	 bx          lr
  0020c		 |$LN55@Smsc9118Ha@2|
  0020c		 |$LN56@Smsc9118Ha@2|
  0020c	00000000	 DCD         |__security_cookie|
  00210		 |$M54423|

			 ENDP  ; |Smsc9118HandleInterrupt|

	EXPORT	|Smsc9118CheckForHang|
	EXPORT	|??_C@_1MA@JLECBOHM@?$AAO?$AAo?$AAp?$AAs?$AA?$CB?$AA?5?$AAT?$AAo?$AAo?$AA?5?$AAm?$AAa?$AAn?$AAy?$AA?5?$AAP?$AAk?$AAt?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAd?$AAe?$AAf?$AAe?$AAr?$AAe?$AAd?$AA?4@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T54439| DCD	|$LN7@Smsc9118Ch|
	DCD	0x40000f01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1MA@JLECBOHM@?$AAO?$AAo?$AAp?$AAs?$AA?$CB?$AA?5?$AAT?$AAo?$AAo?$AA?5?$AAm?$AAa?$AAn?$AAy?$AA?5?$AAP?$AAk?$AAt?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAd?$AAe?$AAf?$AAe?$AAr?$AAe?$AAd?$AA?4@| DCB "O"
	DCB	0x0, "o", 0x0, "p", 0x0, "s", 0x0, "!", 0x0, " ", 0x0, "T"
	DCB	0x0, "o", 0x0, "o", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "n"
	DCB	0x0, "y", 0x0, " ", 0x0, "P", 0x0, "k", 0x0, "t", 0x0, "s"
	DCB	0x0, " ", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, " ", 0x0, "I", 0x0, " ", 0x0, "a", 0x0, "s"
	DCB	0x0, "s", 0x0, "u", 0x0, "m", 0x0, "e", 0x0, " ", 0x0, "H"
	DCB	0x0, "/", 0x0, "W", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "p"
	DCB	0x0, "e", 0x0, "r", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, ".", 0x0, " ", 0x0, "I", 0x0, "t", 0x0, " "
	DCB	0x0, "w", 0x0, "i", 0x0, "l", 0x0, "l", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "u", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "M"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Smsc9118CheckForHang| PROC

; 4524 : {

  00000		 |$LN7@Smsc9118Ch|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M54436|
  00004	e1b03000	 movs        r3, r0

; 4525 : 	BOOLEAN	bRet = (BOOLEAN)FALSE;

  00008	e3a00000	 mov         r0, #0

; 4526 : 	const SMSC9118_ADAPTER * const pAdapter = (PSMSC9118_ADAPTER)(hMiniportAdapterContext);
; 4527 : 
; 4528 : 	SMSC_TRACE0(DBG_TX,"+Smsc9118CheckForHang\r\n");
; 4529 : 	SMSC_ASSERT(pAdapter);
; 4530 : 
; 4531 :    // DumpStatus((PSMSC9118_ADAPTER)(hMiniportAdapterContext));
; 4532 : 
; 4533 : 	if (pAdapter)

  0000c	0a000007	 beq         |$LN1@Smsc9118Ch|

; 4534 : 	{
; 4535 : 		// Make Lint Happy
; 4536 : 		hMiniportAdapterContext = hMiniportAdapterContext;
; 4537 : 
; 4538 : 		// 1500 is a kind of heuristic value.
; 4539 : 		// It might be different from systems.
; 4540 : 		if (QUEUE_COUNT(&pAdapter->TxDeferedPkt) > 1500UL)

  00010	e593217c	 ldr         r2, [r3, #0x17C]
  00014	e3a03c05	 mov         r3, #5, 24
  00018	e38330dc	 orr         r3, r3, #0xDC
  0001c	e1520003	 cmp         r2, r3
  00020	9a000002	 bls         |$LN1@Smsc9118Ch|

; 4541 : 		{
; 4542 : 			RETAILMSG(1, (TEXT("Oops! Too many Pkts are defered. I assume H/W is not operating. It will cause MiniportReset()\r\n")));

  00024	e59f000c	 ldr         r0, [pc, #0xC]
  00028	eb000000	 bl          NKDbgPrintfW

; 4543 : 			bRet = (BOOLEAN)TRUE;

  0002c	e3a00001	 mov         r0, #1
  00030		 |$LN1@Smsc9118Ch|

; 4544 : 		}
; 4545 : 	}
; 4546 : 
; 4547 : 	SMSC_TRACE0(DBG_TX,"-Smsc9118CheckForHang\r\n");
; 4548 : 	return bRet;
; 4549 : }

  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$LN8@Smsc9118Ch|
  00038		 |$LN9@Smsc9118Ch|
  00038	00000000	 DCD         |??_C@_1MA@JLECBOHM@?$AAO?$AAo?$AAp?$AAs?$AA?$CB?$AA?5?$AAT?$AAo?$AAo?$AA?5?$AAm?$AAa?$AAn?$AAy?$AA?5?$AAP?$AAk?$AAt?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAd?$AAe?$AAf?$AAe?$AAr?$AAe?$AAd?$AA?4@|
  0003c		 |$M54437|

			 ENDP  ; |Smsc9118CheckForHang|

	EXPORT	|EnableSwFlowControlFD|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54459| DCD	|$LN15@EnableSwFl|
	DCD	0x40001901
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EnableSwFlowControlFD| PROC

; 4556 : {

  00000		 |$LN15@EnableSwFl|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M54456|
  00004	e1a05000	 mov         r5, r0

; 4557 : 	DWORD dwTimeout=1000UL;
; 4558 : 
; 4559 : 	SMSC_TRACE0(DBG_FLOW,"EnableSwFlowControlFD\r\n");
; 4560 : 
; 4561 : 	// Enable flow control.
; 4562 : 	SetRegDW(pAdapter->lan9118_data.dwLanBase, AFC_CFG, 0x006E374FUL);

  00008	e5952008	 ldr         r2, [r5, #8]
  0000c	e59f304c	 ldr         r3, [pc, #0x4C]

; 4563 : 
; 4564 : 	//Wait for busy bit to clear.
; 4565 : 	while ((Lan_GetMacRegDW(pAdapter->lan9118_data.dwLanBase, FLOW)&FLOW_FCBSY_)  && (dwTimeout > 0UL)) 

  00010	e3a04ffa	 mov         r4, #0xFA, 30
  00014	e58230ac	 str         r3, [r2, #0xAC]
  00018	ea000004	 b           |$LN12@EnableSwFl|
  0001c		 |$LL3@EnableSwFl|
  0001c	e3540000	 cmp         r4, #0
  00020	0a000007	 beq         |$LN10@EnableSwFl|

; 4566 : 	{
; 4567 : 		SMSC_MICRO_DELAY(1U);

  00024	e3a00001	 mov         r0, #1
  00028	eb000000	 bl          NdisStallExecution

; 4568 : 		dwTimeout--;

  0002c	e2444001	 sub         r4, r4, #1
  00030		 |$LN12@EnableSwFl|
  00030	e5950008	 ldr         r0, [r5, #8]
  00034	e3a01008	 mov         r1, #8
  00038	eb000000	 bl          Lan_GetMacRegDW
  0003c	e3100001	 tst         r0, #1
  00040	1afffff5	 bne         |$LL3@EnableSwFl|
  00044		 |$LN10@EnableSwFl|

; 4569 : 	}
; 4570 : 
; 4571 : 	if(!dwTimeout)
; 4572 : 	{
; 4573 : 		SMSC_WARNING0("Timeout waiting flow busy bit.\r\n");
; 4574 : 	}
; 4575 : 
; 4576 : 	// Set FLOW register in MAC to send out a pause frame.
; 4577 : 	Lan_SetMacRegDW(pAdapter->lan9118_data.dwLanBase, 
; 4578 : 					FLOW, 
; 4579 : 					(FLOW_FCEN_ | (0xFFFFUL<<16UL) | FLOW_FCBSY_));

  00044	e5950008	 ldr         r0, [r5, #8]
  00048	e3e03cff	 mvn         r3, #0xFF, 24
  0004c	e22320fc	 eor         r2, r3, #0xFC
  00050	e3a01008	 mov         r1, #8
  00054	eb000000	 bl          Lan_SetMacRegDW

; 4580 : }

  00058	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN16@EnableSwFl|
  00060		 |$LN17@EnableSwFl|
  00060	006e374f	 DCD         0x6e374f
  00064		 |$M54457|

			 ENDP  ; |EnableSwFlowControlFD|

	EXPORT	|E2PROMExecCmd|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54489| DCD	|$LN22@E2PROMExec|
	DCD	0x40001300
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |E2PROMExecCmd| PROC

; 4592 : {

  00000		 |$LN22@E2PROMExec|
  00000		 |$M54486|

; 4593 : 	DWORD Timeout=0xFFFFFFFFUL;  //Need to find out a good timeout value for >30mS.
; 4594 : 	const DWORD dwLanBase = pAdapter->lan9118_data.dwLanBase;

  00000	e5900008	 ldr         r0, [r0, #8]

; 4595 : 
; 4596 : 	SetRegDW(dwLanBase, E2P_CMD, Cmd|E2P_CMD_EPC_BUSY_);

  00004	e3813102	 orr         r3, r1, #2, 2
  00008	e3e02000	 mvn         r2, #0
  0000c	e58030b0	 str         r3, [r0, #0xB0]

; 4597 : 
; 4598 : 	while ((GetRegDW(dwLanBase, E2P_CMD) & E2P_CMD_EPC_BUSY_) && Timeout)

  00010	ea000002	 b           |$LN19@E2PROMExec|
  00014		 |$LL4@E2PROMExec|
  00014	e3520000	 cmp         r2, #0
  00018	0a000003	 beq         |$LN17@E2PROMExec|

; 4599 : 	{
; 4600 : 		Timeout--;

  0001c	e2422001	 sub         r2, r2, #1
  00020		 |$LN19@E2PROMExec|

; 4597 : 
; 4598 : 	while ((GetRegDW(dwLanBase, E2P_CMD) & E2P_CMD_EPC_BUSY_) && Timeout)

  00020	e59030b0	 ldr         r3, [r0, #0xB0]

; 4599 : 	{
; 4600 : 		Timeout--;

  00024	e3130102	 tst         r3, #2, 2
  00028	1afffff9	 bne         |$LL4@E2PROMExec|
  0002c		 |$LN17@E2PROMExec|

; 4601 : 	}
; 4602 : 
; 4603 : 	if ((GetRegDW(dwLanBase, E2P_CMD) & E2P_CMD_EPC_TIMEOUT_) || (!Timeout))

  0002c	e59030b0	 ldr         r3, [r0, #0xB0]
  00030	e3130302	 tst         r3, #2, 6
  00034	1a000001	 bne         |$LN1@E2PROMExec|
  00038	e3520000	 cmp         r2, #0
  0003c	1a000001	 bne         |$LN13@E2PROMExec|
  00040		 |$LN1@E2PROMExec|

; 4604 : 	{
; 4605 : 		SMSC_WARNING1("Timeout in E2PROMExecCmd. E2P_CMD=0x%x", 
; 4606 : 						  GetRegDW(dwLanBase, E2P_CMD));
; 4607 : 
; 4608 : 		// Clear EPC timeout bit.
; 4609 : 		SetRegDW(dwLanBase, E2P_CMD, E2P_CMD_EPC_TIMEOUT_);

  00040	e3a03302	 mov         r3, #2, 6
  00044	e58030b0	 str         r3, [r0, #0xB0]
  00048		 |$LN13@E2PROMExec|

; 4610 : 	}
; 4611 : }

  00048	e12fff1e	 bx          lr
  0004c		 |$M54487|

			 ENDP  ; |E2PROMExecCmd|

	EXPORT	|E2PROMWriteDefaultAddr|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54519| DCD	|$LN19@E2PROMWrit|
	DCD	0x40002901
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |E2PROMWriteDefaultAddr| PROC

; 4619 : {

  00000		 |$LN19@E2PROMWrit|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M54516|
  00004	e1a05000	 mov         r5, r0

; 4620 : 	const DWORD dwLanBase = pAdapter->lan9118_data.dwLanBase;
; 4621 : 
; 4622 : 
; 4623 : 	//Enable erase/write
; 4624 : 	E2PROMExecCmd(pAdapter, E2P_CMD_EPC_CMD_EWEN_);

  00008	e5954008	 ldr         r4, [r5, #8]
  0000c	e3a01202	 mov         r1, #2, 4
  00010	eb000000	 bl          E2PROMExecCmd

; 4625 : 
; 4626 : 	SetRegDW(dwLanBase, E2P_DATA, 0xA5UL);

  00014	e3a030a5	 mov         r3, #0xA5

; 4627 : 	E2PROMExecCmd(pAdapter, E2P_CMD_EPC_CMD_WRITE_ | 0UL);

  00018	e3a01203	 mov         r1, #3, 4
  0001c	e1a00005	 mov         r0, r5
  00020	e58430b4	 str         r3, [r4, #0xB4]
  00024	eb000000	 bl          E2PROMExecCmd

; 4628 : 
; 4629 : 	//Default Ethernet 00:80:0F:11:70:00
; 4630 : 	SetRegDW(dwLanBase, E2P_DATA, 0x00UL);

  00028	e3a06000	 mov         r6, #0

; 4631 : 	E2PROMExecCmd(pAdapter, E2P_CMD_EPC_CMD_WRITE_ | 1UL);

  0002c	e3a01213	 mov         r1, #0x13, 4
  00030	e1a00005	 mov         r0, r5
  00034	e58460b4	 str         r6, [r4, #0xB4]
  00038	eb000000	 bl          E2PROMExecCmd

; 4632 : 
; 4633 : 	SetRegDW(dwLanBase, E2P_DATA, 0x80UL);

  0003c	e3a03080	 mov         r3, #0x80

; 4634 : 	E2PROMExecCmd(pAdapter, E2P_CMD_EPC_CMD_WRITE_ | 2UL);

  00040	e3a01223	 mov         r1, #0x23, 4
  00044	e1a00005	 mov         r0, r5
  00048	e58430b4	 str         r3, [r4, #0xB4]
  0004c	eb000000	 bl          E2PROMExecCmd

; 4635 : 
; 4636 : 	SetRegDW(dwLanBase, E2P_DATA, 0x0FUL);

  00050	e3a0300f	 mov         r3, #0xF

; 4637 : 	E2PROMExecCmd(pAdapter, E2P_CMD_EPC_CMD_WRITE_ | 3UL);

  00054	e3a01233	 mov         r1, #0x33, 4
  00058	e1a00005	 mov         r0, r5
  0005c	e58430b4	 str         r3, [r4, #0xB4]
  00060	eb000000	 bl          E2PROMExecCmd

; 4638 : 
; 4639 : 	SetRegDW(dwLanBase, E2P_DATA, 0x11UL);

  00064	e3a03011	 mov         r3, #0x11

; 4640 : 	E2PROMExecCmd(pAdapter, E2P_CMD_EPC_CMD_WRITE_ | 4UL);

  00068	e3a01243	 mov         r1, #0x43, 4
  0006c	e1a00005	 mov         r0, r5
  00070	e58430b4	 str         r3, [r4, #0xB4]
  00074	eb000000	 bl          E2PROMExecCmd

; 4641 : 
; 4642 : 	SetRegDW(dwLanBase, E2P_DATA, 0x70UL);

  00078	e3a03070	 mov         r3, #0x70

; 4643 : 	E2PROMExecCmd(pAdapter, E2P_CMD_EPC_CMD_WRITE_ | 5UL);

  0007c	e3a01253	 mov         r1, #0x53, 4
  00080	e1a00005	 mov         r0, r5
  00084	e58430b4	 str         r3, [r4, #0xB4]
  00088	eb000000	 bl          E2PROMExecCmd

; 4644 : 
; 4645 : 	SetRegDW(dwLanBase, E2P_DATA, 0x00UL);
; 4646 : 	E2PROMExecCmd(pAdapter, E2P_CMD_EPC_CMD_WRITE_ | 6UL);

  0008c	e3a01263	 mov         r1, #0x63, 4
  00090	e1a00005	 mov         r0, r5
  00094	e58460b4	 str         r6, [r4, #0xB4]
  00098	eb000000	 bl          E2PROMExecCmd

; 4647 : 
; 4648 : }

  0009c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$M54517|

			 ENDP  ; |E2PROMWriteDefaultAddr|

	EXPORT	|CalculateCrc16|

  00000			 AREA	 |.pdata|, PDATA
|$T54545| DCD	|$LN23@CalculateC|
	DCD	0x40003901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CalculateCrc16| PROC

; 4661 : {

  00000		 |$LN23@CalculateC|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M54542|
  00004	e1a07002	 mov         r7, r2
  00008	e1a04000	 mov         r4, r0
  0000c	e3a03cff	 mov         r3, #0xFF, 24

; 4662 : 	const WORD wCrc16Poly = (WORD)0x8005;	// s/b international standard for CRC-16
; 4663 : 								// x^16 + x^15 + x^2 + 1
; 4664 : 	//WORD crc16_poly = 0xA001; // reverse
; 4665 : 	WORD i, j, bit;
; 4666 : 	WORD wCrc = (WORD)0xFFFF;
; 4667 : 	WORD wMsb;
; 4668 : 	BYTE bCurrentByte;
; 4669 : 	WORD wNumOfBits = (WORD)16;
; 4670 : 	WORD wCrcOut = (WORD)0;
; 4671 : 
; 4672 : 	wNumOfBits = wNumOfBits; // to avoid lint warning
; 4673 : 
; 4674 : 	for (i=(WORD)0; i<(WORD)dwLen; i++)

  00010	e1a09801	 mov         r9, r1, lsl #16
  00014	e38300ff	 orr         r0, r3, #0xFF
  00018	e1b09829	 movs        r9, r9, lsr #16
  0001c	e3a0e000	 mov         lr, #0
  00020	0a00001b	 beq         |$LN10@CalculateC|
  00024	e3a03902	 mov         r3, #2, 18
  00028	e3838004	 orr         r8, r3, #4
  0002c	e3a01000	 mov         r1, #0
  00030		 |$LL12@CalculateC|

; 4675 : 	{
; 4676 : 		bCurrentByte = *bpData++;

  00030	e4d45001	 ldrb        r5, [r4], #1

; 4677 : 
; 4678 : 		for (bit=(WORD)0U; bit<(WORD)8U; bit++)

  00034	e3a06000	 mov         r6, #0
  00038		 |$LL9@CalculateC|

; 4679 : 		{
; 4680 : 			wMsb = (WORD)(wCrc >> 15);
; 4681 : 			wCrc = (WORD)(wCrc << 1);
; 4682 : 
; 4683 : 			if (wMsb ^ (WORD)(bCurrentByte & 1))

  00038	e2053001	 and         r3, r5, #1
  0003c	e02337a0	 eor         r3, r3, r0, lsr #15
  00040	e1a02080	 mov         r2, r0, lsl #1
  00044	e1a03803	 mov         r3, r3, lsl #16

; 4707 : 
; 4708 : 	}
; 4709 : 
; 4710 : 	return wCrc;
; 4711 : }

  00048	e1a00802	 mov         r0, r2, lsl #16
  0004c	e1b03823	 movs        r3, r3, lsr #16
  00050	e1a00820	 mov         r0, r0, lsr #16
  00054	10203008	 eorne       r3, r0, r8
  00058	13833001	 orrne       r3, r3, #1
  0005c	11a00803	 movne       r0, r3, lsl #16
  00060	e2863001	 add         r3, r6, #1
  00064	e1a06803	 mov         r6, r3, lsl #16
  00068	e1a06826	 mov         r6, r6, lsr #16
  0006c	e1a030a5	 mov         r3, r5, lsr #1
  00070	11a00820	 movne       r0, r0, lsr #16
  00074	e3560008	 cmp         r6, #8
  00078	e20350ff	 and         r5, r3, #0xFF
  0007c	3affffed	 bcc         |$LL9@CalculateC|
  00080	e2813001	 add         r3, r1, #1
  00084	e1a01803	 mov         r1, r3, lsl #16
  00088	e1a01821	 mov         r1, r1, lsr #16
  0008c	e1510009	 cmp         r1, r9
  00090	3affffe6	 bcc         |$LL12@CalculateC|
  00094		 |$LN10@CalculateC|

; 4684 : 			{
; 4685 : 				wCrc = (WORD)(wCrc ^ wCrc16Poly);
; 4686 : 				wCrc = (WORD)(wCrc | (WORD)1);
; 4687 : 			}
; 4688 : 			bCurrentByte = (BYTE)(bCurrentByte >> 1);
; 4689 : 		}
; 4690 : 	}
; 4691 : 
; 4692 : 	//bit reverse if needed
; 4693 : 	// so far we do not need this for 117
; 4694 : 	// but the standard CRC-16 seems to require this.
; 4695 : 	if (fBitReverse)

  00094	e3570000	 cmp         r7, #0
  00098	0a00000f	 beq         |$LN5@CalculateC|

; 4696 : 	{
; 4697 : 		j = (WORD)1;

  0009c	e3a02001	 mov         r2, #1

; 4698 : 		for (i=(WORD)(1<<(wNumOfBits-(WORD)1U)); i; i = (WORD)(i>>1)) {

  000a0	e3a01902	 mov         r1, #2, 18
  000a4	e3a04902	 mov         r4, #2, 18
  000a8		 |$LL4@CalculateC|

; 4699 : 			if (wCrc & i)

  000a8	e0003004	 and         r3, r0, r4
  000ac	e1a03803	 mov         r3, r3, lsl #16
  000b0	e1b03823	 movs        r3, r3, lsr #16
  000b4	e1a030a1	 mov         r3, r1, lsr #1
  000b8	e1a01803	 mov         r1, r3, lsl #16

; 4700 : 			{
; 4701 : 				wCrcOut =  (WORD)(wCrcOut | j);
; 4702 : 			}
; 4703 : 			// j <<= 1;
; 4704 : 			j = (WORD)(j << 1);

  000bc	e1a03082	 mov         r3, r2, lsl #1
  000c0	1182e00e	 orrne       lr, r2, lr
  000c4	e1a02803	 mov         r2, r3, lsl #16
  000c8	e1a01821	 mov         r1, r1, lsr #16
  000cc	e1a02822	 mov         r2, r2, lsr #16
  000d0	e1b04001	 movs        r4, r1
  000d4	1afffff3	 bne         |$LL4@CalculateC|

; 4705 : 		}
; 4706 : 		wCrc = wCrcOut;

  000d8	e1a0000e	 mov         r0, lr
  000dc		 |$LN5@CalculateC|

; 4707 : 
; 4708 : 	}
; 4709 : 
; 4710 : 	return wCrc;
; 4711 : }

  000dc	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000e0	e12fff1e	 bx          lr
  000e4		 |$M54543|

			 ENDP  ; |CalculateCrc16|

	EXPORT	|SetWakeUpFrameFilter|

  00000			 AREA	 |.pdata|, PDATA
|$T54570| DCD	|$LN22@SetWakeUpF|
	DCD	0x40004001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetWakeUpFrameFilter| PROC

; 4718 : {

  00000		 |$LN22@SetWakeUpF|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M54567|
  00004	e1a04002	 mov         r4, r2
  00008	e1a07000	 mov         r7, r0

; 4719 : 	DWORD MaskSize, PatternSize, dw, Crc16Length, tempMask;
; 4720 : 	const UCHAR * const pPatternStart = (PUCHAR)pPattern+(pPattern->PatternOffset);

  0000c	e591300c	 ldr         r3, [r1, #0xC]

; 4721 : 	const UCHAR * const pMaskStart = (PUCHAR)pPattern + sizeof(NDIS_PM_PACKET_PATTERN);

  00010	e2815018	 add         r5, r1, #0x18

; 4722 : 
; 4723 : 	SMSC_TRACE0(DBG_POWER,"+SetWakeUpFrameFilter\r\n");
; 4724 : 
; 4725 : 	SMSC_ASSERT(FilterNo < 4UL);
; 4726 : 	if(FilterNo >= 4UL)

  00014	e3540004	 cmp         r4, #4
  00018	e0839001	 add         r9, r3, r1
  0001c	2a000035	 bcs         |$LN12@SetWakeUpF|

; 4727 : 	{
; 4728 : 		return;
; 4729 : 	}
; 4730 : 
; 4731 : 	MaskSize = pPattern->MaskSize;

  00020	e5916008	 ldr         r6, [r1, #8]

; 4732 : 	PatternSize = pPattern->PatternSize;
; 4733 : 
; 4734 : 	//
; 4735 : 	// Calculate Byte Mask
; 4736 : 	//
; 4737 : 	tempMask = (((DWORD)*(pMaskStart + 1UL)) >> 4) & 0x0FUL; //Take the first 4-bit mask after dst/src addresses.

  00024	e5d53001	 ldrb        r3, [r5, #1]
  00028	e5918010	 ldr         r8, [r1, #0x10]

; 4738 : 	for (dw=2UL; dw<MaskSize; dw++) //MaskSize must be >=2 && <6, otherwise we won't be here.

  0002c	e3560002	 cmp         r6, #2
  00030	e1a02223	 mov         r2, r3, lsr #4
  00034	e3a01002	 mov         r1, #2
  00038	9a000006	 bls         |$LN8@SetWakeUpF|

; 4727 : 	{
; 4728 : 		return;
; 4729 : 	}
; 4730 : 
; 4731 : 	MaskSize = pPattern->MaskSize;

  0003c	e3a0e004	 mov         lr, #4
  00040		 |$LL10@SetWakeUpF|

; 4739 : 	{
; 4740 : 		tempMask |= (((DWORD)*(pMaskStart+dw))<<((dw-2UL)*8UL+4UL));

  00040	e7d13005	 ldrb        r3, [r1, +r5]
  00044	e2811001	 add         r1, r1, #1
  00048	e1510006	 cmp         r1, r6
  0004c	e1822e13	 orr         r2, r2, r3, lsl lr
  00050	e28ee008	 add         lr, lr, #8
  00054	3afffff9	 bcc         |$LL10@SetWakeUpF|
  00058		 |$LN8@SetWakeUpF|

; 4741 : 	}
; 4742 : 	pAdapter->Wuff.FilterByteMask[FilterNo] = tempMask;
; 4743 : 
; 4744 : 	tempMask = 0xFFFFFFFFUL >> (32UL-(PatternSize-12UL)); //bits to mask out in the Byte Mask.	

  00058	e268302c	 rsb         r3, r8, #0x2C
  0005c	e3e01000	 mvn         r1, #0
  00060	e0023331	 and         r3, r2, r1, lsr r3
  00064	e087a104	 add         r10, r7, r4, lsl #2

; 4745 : 	tempMask &=0x7FFFFFFFUL;  //Make sure the bit-31 is reset according to Synopsys Databook.
; 4746 : 	(pAdapter->Wuff.FilterByteMask[FilterNo]) &= tempMask;

  00068	e3c3e102	 bic         lr, r3, #2, 2
  0006c	e28a3a01	 add         r3, r10, #1, 20
  00070	e583ead4	 str         lr, [r3, #0xAD4]

; 4747 : 	SMSC_TRACE2(DBG_POWER,"Wuff.FilterByteMask[%d] = 0x%x\r\n", FilterNo, pAdapter->Wuff.FilterByteMask[FilterNo]);
; 4748 : 
; 4749 : 	//
; 4750 : 	// Calculate CRC16
; 4751 : 	//
; 4752 : 	Crc16Length=0UL;
; 4753 : 	tempMask = (pAdapter->Wuff.FilterByteMask[FilterNo]);

  00074	e3a05000	 mov         r5, #0

; 4754 : 	for (dw=0UL; dw<(PatternSize-12UL); dw++)

  00078	e3a00000	 mov         r0, #0
  0007c	e258800c	 subs        r8, r8, #0xC
  00080	0a00000c	 beq         |$LN5@SetWakeUpF|
  00084	e0646284	 rsb         r6, r4, r4, lsl #5
  00088		 |$LL7@SetWakeUpF|

; 4755 : 	{
; 4756 : 		if (tempMask&1UL)

  00088	e31e0001	 tst         lr, #1

; 4757 : 		{
; 4758 : 			pAdapter->Wuff.FilterBufferToCRC16[FilterNo][Crc16Length] = *(pPatternStart+12+dw);

  0008c	10803009	 addne       r3, r0, r9
  00090	15d3100c	 ldrneb      r1, [r3, #0xC]
  00094	10862005	 addne       r2, r6, r5
  00098	10823007	 addne       r3, r2, r7
  0009c	12833a01	 addne       r3, r3, #1, 20

; 4759 : 			Crc16Length++;

  000a0	e2800001	 add         r0, r0, #1
  000a4	15c31af4	 strneb      r1, [r3, #0xAF4]
  000a8	12855001	 addne       r5, r5, #1
  000ac	e1500008	 cmp         r0, r8

; 4760 : 		}
; 4761 : 		tempMask >>= 1;

  000b0	e1a0e0ae	 mov         lr, lr, lsr #1
  000b4	3afffff3	 bcc         |$LL7@SetWakeUpF|
  000b8		 |$LN5@SetWakeUpF|

; 4762 : 	}
; 4763 : 	pAdapter->Wuff.FilterBufferLength[FilterNo] = Crc16Length;
; 4764 : 	SMSC_TRACE2(DBG_POWER,"Wuff.FilterBufferLength[%d] = 0x%x\r\n", FilterNo, pAdapter->Wuff.FilterBufferLength[FilterNo]);
; 4765 : 
; 4766 : 	{
; 4767 : 		DWORD dw1;
; 4768 : 		SMSC_TRACE0(DBG_POWER,"---------------- FilterBufferToCRC16 -----------------\r\n");
; 4769 : 		for(dw1=0UL; dw1<Crc16Length; dw1++)
; 4770 : 		{
; 4771 : 			SMSC_TRACE1(DBG_POWER,"0x%x\r\n", pAdapter->Wuff.FilterBufferToCRC16[FilterNo][dw1]);
; 4772 : 		}
; 4773 : 	}
; 4774 : 
; 4775 : 	pAdapter->Wuff.FilterCRC16[FilterNo] = CalculateCrc16(pAdapter->Wuff.FilterBufferToCRC16[FilterNo],
; 4776 : 														  pAdapter->Wuff.FilterBufferLength[FilterNo],
; 4777 : 														  FALSE);

  000b8	e0643284	 rsb         r3, r4, r4, lsl #5
  000bc	e0833007	 add         r3, r3, r7
  000c0	e2833c1a	 add         r3, r3, #0x1A, 24
  000c4	e28aea01	 add         lr, r10, #1, 20
  000c8	e28300f4	 add         r0, r3, #0xF4
  000cc	e3a02000	 mov         r2, #0
  000d0	e1a01005	 mov         r1, r5
  000d4	e58e5b70	 str         r5, [lr, #0xB70]
  000d8	eb000000	 bl          CalculateCrc16
  000dc	e0873084	 add         r3, r7, r4, lsl #1
  000e0	e2833c1a	 add         r3, r3, #0x1A, 24

; 4778 : 
; 4779 : 	SMSC_TRACE2(DBG_POWER,"Wuff.FilterCRC16[%d] = 0x%x\r\n", FilterNo, pAdapter->Wuff.FilterCRC16[FilterNo]);
; 4780 : 
; 4781 : 
; 4782 : 	//
; 4783 : 	// Claculate Offset
; 4784 : 	//
; 4785 : 
; 4786 : 	//(It seems that WinCE always(?) sends down the sample wakeup frame starting from dst address. So, set the offset to 12.)
; 4787 : 	pAdapter->Wuff.FilterOffsets[FilterNo] = (BYTE)12;

  000e4	e0872004	 add         r2, r7, r4
  000e8	e1c30ebc	 strh        r0, [r3, #0xEC]
  000ec	e2823a01	 add         r3, r2, #1, 20
  000f0	e3a0200c	 mov         r2, #0xC
  000f4	e5c32ae8	 strb        r2, [r3, #0xAE8]
  000f8		 |$LN12@SetWakeUpF|

; 4788 : 
; 4789 : 	SMSC_TRACE0(DBG_POWER,"-SetWakeUpFrameFilter\r\n");
; 4790 : 
; 4791 : }

  000f8	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000fc	e12fff1e	 bx          lr
  00100		 |$M54568|

			 ENDP  ; |SetWakeUpFrameFilter|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|Reset118|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54604| DCD	|$LN22@Reset118|
	DCD	0xc0003f02

  00000			 AREA	 |.xdata|, DATA
|$T54600| DCD	0xfffffff0
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T54600|

  00008		 |Reset118| PROC

; 4794 : {

  00008		 |$LN22@Reset118|
  00008	e92d4030	 stmdb       sp!, {r4, r5, lr}
  0000c	e24dd020	 sub         sp, sp, #0x20
  00010		 |$M54601|
  00010	e1a04000	 mov         r4, r0
  00014	e59f30e4	 ldr         r3, [pc, #0xE4]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d301c	 str         r3, [sp, #0x1C]

; 4795 :     PNDIS_PACKET 	pPacket;
; 4796 : 	DMA_XFER 		dmaXfer;
; 4797 : 
; 4798 : 	// Disable Global Interrupt
; 4799 : 	SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG, 
; 4800 : 			GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG) & ~INT_CFG_IRQ_EN_);

  00020	e5941008	 ldr         r1, [r4, #8]

; 4801 : 
; 4802 : 	if (pAdapter->fRxDMAMode)

  00024	e2842a01	 add         r2, r4, #1, 20
  00028	e5913054	 ldr         r3, [r1, #0x54]
  0002c	e3c33c01	 bic         r3, r3, #1, 24
  00030	e5813054	 str         r3, [r1, #0x54]
  00034	e59231a0	 ldr         r3, [r2, #0x1A0]
  00038	e3530000	 cmp         r3, #0

; 4803 : 	{
; 4804 : 		dmaXfer.DMABaseVA = pAdapter->DMABaseVA;

  0003c	12843a01	 addne       r3, r4, #1, 20
  00040	159331a8	 ldrne       r3, [r3, #0x1A8]

; 4805 : 		DmaComplete(&dmaXfer, DMA_RX_CH);

  00044	13a01002	 movne       r1, #2
  00048	128d0000	 addne       r0, sp, #0
  0004c	158d3000	 strne       r3, [sp]
  00050	1b000000	 blne        DmaComplete

; 4806 : 	}
; 4807 : 	if (pAdapter->fTxDMAMode)

  00054	e2843a01	 add         r3, r4, #1, 20
  00058	e59331a4	 ldr         r3, [r3, #0x1A4]
  0005c	e3530000	 cmp         r3, #0

; 4808 : 	{
; 4809 : 		dmaXfer.DMABaseVA = pAdapter->DMABaseVA;

  00060	12843a01	 addne       r3, r4, #1, 20
  00064	159331a8	 ldrne       r3, [r3, #0x1A8]

; 4810 : 		DmaComplete(&dmaXfer, DMA_TX_CH);

  00068	13a01003	 movne       r1, #3
  0006c	128d0000	 addne       r0, sp, #0
  00070	158d3000	 strne       r3, [sp]
  00074	1b000000	 blne        DmaComplete

; 4811 : 	}
; 4812 : 
; 4813 : 	// Empty Pending Packets
; 4814 : 	while (QUEUE_COUNT(&pAdapter->TxDeferedPkt) != 0UL)

  00078	e594317c	 ldr         r3, [r4, #0x17C]
  0007c	e3530000	 cmp         r3, #0
  00080	0a000012	 beq         |$LN2@Reset118|
  00084	e3a05000	 mov         r5, #0
  00088		 |$LL3@Reset118|

; 4815 : 	{
; 4816 : 		pPacket = pAdapter->TxDeferedPkt.FirstPacket;

  00088	e5941174	 ldr         r1, [r4, #0x174]

; 4817 : 		DequeuePacket(pAdapter->TxDeferedPkt.FirstPacket, pAdapter->TxDeferedPkt.LastPacket);
; 4818 : 		pAdapter->TxDeferedPkt.Count --;
; 4819 : 		NdisMSendComplete(pAdapter->hMiniportAdapterHandle, pPacket, NDIS_STATUS_FAILURE);

  0008c	e5940000	 ldr         r0, [r4]
  00090	e1a02001	 mov         r2, r1
  00094	e5b23020	 ldr         r3, [r2, #0x20]!
  00098	e3530000	 cmp         r3, #0
  0009c	e594317c	 ldr         r3, [r4, #0x17C]
  000a0	05845178	 streq       r5, [r4, #0x178]
  000a4	e5922000	 ldr         r2, [r2]
  000a8	e2433001	 sub         r3, r3, #1
  000ac	e584317c	 str         r3, [r4, #0x17C]
  000b0	e5842174	 str         r2, [r4, #0x174]
  000b4	e590310c	 ldr         r3, [r0, #0x10C]
  000b8	e3a02107	 mov         r2, #7, 2
  000bc	e1a0e00f	 mov         lr, pc
  000c0	e12fff13	 bx          r3
  000c4	e594317c	 ldr         r3, [r4, #0x17C]
  000c8	e3530000	 cmp         r3, #0
  000cc	1affffed	 bne         |$LL3@Reset118|
  000d0		 |$LN2@Reset118|

; 4820 : 	}
; 4821 : 
; 4822 : 	// Clear Interrupt Status
; 4823 : 	SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_STS, 0xFFFFFFFFUL);

  000d0	e5943008	 ldr         r3, [r4, #8]
  000d4	e3e02000	 mvn         r2, #0
  000d8	e5832058	 str         r2, [r3, #0x58]

; 4824 : 	// Enable Global Interrupt
; 4825 : 	SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG, 
; 4826 : 			GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG) | INT_CFG_IRQ_EN_);

  000dc	e5942008	 ldr         r2, [r4, #8]
  000e0	e5923054	 ldr         r3, [r2, #0x54]
  000e4	e3833c01	 orr         r3, r3, #1, 24
  000e8	e5823054	 str         r3, [r2, #0x54]
  000ec	e59d001c	 ldr         r0, [sp, #0x1C]
  000f0	eb000000	 bl          __security_check_cookie

; 4827 : }

  000f4	e28dd020	 add         sp, sp, #0x20
  000f8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000fc	e12fff1e	 bx          lr
  00100		 |$LN23@Reset118|
  00100		 |$LN24@Reset118|
  00100	00000000	 DCD         |__security_cookie|
  00104		 |$M54602|

			 ENDP  ; |Reset118|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|ResetWakeUpFrameFilter|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T54629| DCD	|$LN21@ResetWakeU|
	DCD	0xc0004202

  00000			 AREA	 |.xdata|, DATA
|$T54625| DCD	0xffffffec
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T54625|

  00008		 |ResetWakeUpFrameFilter| PROC

; 4834 : {

  00008		 |$LN21@ResetWakeU|
  00008	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  0000c	e24dd024	 sub         sp, sp, #0x24
  00010		 |$M54626|
  00010	e1a0e001	 mov         lr, r1
  00014	e1a05000	 mov         r5, r0
  00018	e59f30ec	 ldr         r3, [pc, #0xEC]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3020	 str         r3, [sp, #0x20]

; 4835 : 	DWORD PatternSize, dw;
; 4836 : 	WORD  FilterCRC16;
; 4837 : 	BYTE FilterBufferToCRC16[31];
; 4838 : 	DWORD FilterBufferLength;
; 4839 : 	const UCHAR * const pPatternStart = (PUCHAR)pPattern+(pPattern->PatternOffset);

  00024	e59e300c	 ldr         r3, [lr, #0xC]

; 4840 : 
; 4841 : 	SMSC_TRACE0(DBG_POWER,"+ResetWakeUpFrameFilter\r\n");
; 4842 : 
; 4843 : 	PatternSize = pPattern->PatternSize;
; 4844 : 
; 4845 : 	//
; 4846 : 	// Calculate CRC16
; 4847 : 	//
; 4848 : 	NdisFillMemory((PVOID)FilterBufferToCRC16, (ULONG)(31*sizeof(BYTE)), (UCHAR)0);

  00028	e59e4010	 ldr         r4, [lr, #0x10]
  0002c	e3a0201f	 mov         r2, #0x1F
  00030	e3a01000	 mov         r1, #0
  00034	e28d0000	 add         r0, sp, #0
  00038	e083600e	 add         r6, r3, lr
  0003c	eb000000	 bl          memset

; 4849 : 	for (dw=0UL; dw<(PatternSize-12UL); dw++)

  00040	e254100c	 subs        r1, r4, #0xC
  00044	0a000008	 beq         |$LN17@ResetWakeU|

; 4850 : 	{
; 4851 : 		FilterBufferToCRC16[dw] = *(pPatternStart+12+dw);

  00048	e286000c	 add         r0, r6, #0xC
  0004c	e28d2000	 add         r2, sp, #0
  00050	e1b03001	 movs        r3, r1
  00054	0a000004	 beq         |$LN17@ResetWakeU|
  00058	e082e003	 add         lr, r2, r3
  0005c		 |$LN16@ResetWakeU|
  0005c	e4d03001	 ldrb        r3, [r0], #1
  00060	e4c23001	 strb        r3, [r2], #1
  00064	e152000e	 cmp         r2, lr
  00068	1afffffb	 bne         |$LN16@ResetWakeU|
  0006c		 |$LN17@ResetWakeU|

; 4852 : 	}
; 4853 : 	FilterBufferLength = PatternSize - 12UL;
; 4854 : 
; 4855 : 	FilterCRC16 = CalculateCrc16(FilterBufferToCRC16, FilterBufferLength, FALSE);

  0006c	e3a02000	 mov         r2, #0
  00070	e28d0000	 add         r0, sp, #0
  00074	eb000000	 bl          CalculateCrc16

; 4856 : 
; 4857 : 	SMSC_TRACE1(DBG_POWER,"FilterCRC16 = 0x%x\r\n", FilterCRC16);
; 4858 : 
; 4859 : 	//There is at least one filter enabled. Search for and compare with them.
; 4860 : 	if (((pAdapter->Wuff.FilterCommands)&FILTER0_ENABLE) &&
; 4861 : 	   (pAdapter->Wuff.FilterCRC16[0] == FilterCRC16))

  00078	e2853a01	 add         r3, r5, #1, 20
  0007c	e5932ae4	 ldr         r2, [r3, #0xAE4]
  00080	e3120001	 tst         r2, #1
  00084	0a000004	 beq         |$LN8@ResetWakeU|
  00088	e2853c1a	 add         r3, r5, #0x1A, 24
  0008c	e1d33ebc	 ldrh        r3, [r3, #0xEC]
  00090	e1530000	 cmp         r3, r0

; 4862 : 	{
; 4863 : 		(pAdapter->Wuff.FilterCommands) &= ~FILTER0_ENABLE;

  00094	03c22001	 biceq       r2, r2, #1
  00098	0a000014	 beq         |$LN18@ResetWakeU|
  0009c		 |$LN8@ResetWakeU|

; 4864 : 		SMSC_TRACE0(DBG_POWER,"FILTER0 disabled.\r\n");
; 4865 : 	}
; 4866 : 	else
; 4867 : 	{
; 4868 : 		if (((pAdapter->Wuff.FilterCommands)&FILTER1_ENABLE) &&
; 4869 : 			(pAdapter->Wuff.FilterCRC16[1] == FilterCRC16))

  0009c	e3120c01	 tst         r2, #1, 24
  000a0	0a000004	 beq         |$LN6@ResetWakeU|
  000a4	e2853c1a	 add         r3, r5, #0x1A, 24
  000a8	e1d33ebe	 ldrh        r3, [r3, #0xEE]
  000ac	e1530000	 cmp         r3, r0

; 4870 : 		{
; 4871 : 			(pAdapter->Wuff.FilterCommands) &= ~FILTER1_ENABLE;

  000b0	03c22c01	 biceq       r2, r2, #1, 24
  000b4	0a00000d	 beq         |$LN18@ResetWakeU|
  000b8		 |$LN6@ResetWakeU|

; 4872 : 			SMSC_TRACE0(DBG_POWER,"FILTER1 disabled.\r\n");
; 4873 : 		}
; 4874 : 		else
; 4875 : 		{
; 4876 : 			if (((pAdapter->Wuff.FilterCommands)&FILTER2_ENABLE) &&
; 4877 : 				(pAdapter->Wuff.FilterCRC16[2] == FilterCRC16))

  000b8	e3120801	 tst         r2, #1, 16
  000bc	0a000004	 beq         |$LN4@ResetWakeU|
  000c0	e2853c1a	 add         r3, r5, #0x1A, 24
  000c4	e1d33fb0	 ldrh        r3, [r3, #0xF0]
  000c8	e1530000	 cmp         r3, r0

; 4878 : 			{
; 4879 : 				(pAdapter->Wuff.FilterCommands) &= ~FILTER2_ENABLE;

  000cc	03c22801	 biceq       r2, r2, #1, 16
  000d0	0a000006	 beq         |$LN18@ResetWakeU|
  000d4		 |$LN4@ResetWakeU|

; 4880 : 				SMSC_TRACE0(DBG_POWER,"FILTER2 disabled.\r\n");
; 4881 : 			}
; 4882 : 			else
; 4883 : 			{
; 4884 : 				if (((pAdapter->Wuff.FilterCommands)&FILTER3_ENABLE) &&
; 4885 : 					(pAdapter->Wuff.FilterCRC16[3] == FilterCRC16))

  000d4	e3120401	 tst         r2, #1, 8
  000d8	0a000006	 beq         |$LN2@ResetWakeU|
  000dc	e2853c1a	 add         r3, r5, #0x1A, 24
  000e0	e1d33fb2	 ldrh        r3, [r3, #0xF2]
  000e4	e1530000	 cmp         r3, r0
  000e8	1a000002	 bne         |$LN2@ResetWakeU|

; 4886 : 				{
; 4887 : 					(pAdapter->Wuff.FilterCommands) &= ~FILTER3_ENABLE;

  000ec	e3c22401	 bic         r2, r2, #1, 8
  000f0		 |$LN18@ResetWakeU|
  000f0	e2853a01	 add         r3, r5, #1, 20
  000f4	e5832ae4	 str         r2, [r3, #0xAE4]
  000f8		 |$LN2@ResetWakeU|
  000f8	e59d0020	 ldr         r0, [sp, #0x20]
  000fc	eb000000	 bl          __security_check_cookie

; 4888 : 					SMSC_TRACE0(DBG_POWER,"FILTER3 disabled.\r\n");
; 4889 : 				}
; 4890 : 				else
; 4891 : 				{
; 4892 : 					SMSC_TRACE0(DBG_POWER,"No matching filter set.\r\n");
; 4893 : 				}
; 4894 : 			}
; 4895 : 		}
; 4896 : 	}
; 4897 : 
; 4898 : 	SMSC_TRACE0(DBG_POWER,"-ResetWakeUpFrameFilter\r\n");
; 4899 : 
; 4900 : }

  00100	e28dd024	 add         sp, sp, #0x24
  00104	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00108	e12fff1e	 bx          lr
  0010c		 |$LN22@ResetWakeU|
  0010c		 |$LN23@ResetWakeU|
  0010c	00000000	 DCD         |__security_cookie|
  00110		 |$M54627|

			 ENDP  ; |ResetWakeUpFrameFilter|

	EXPORT	|ConfigWUFFReg|

  00000			 AREA	 |.pdata|, PDATA
|$T54644| DCD	|$LN5@ConfigWUFF|
	DCD	0x40003001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ConfigWUFFReg| PROC

; 5062 : {

  00000		 |$LN5@ConfigWUFF|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M54641|

; 5063 : 	const DWORD dwLanBase = pAdapter->lan9118_data.dwLanBase;
; 5064 : 	const DWORD FilterOffsets = 
; 5065 : 						 ((DWORD)(pAdapter->Wuff.FilterOffsets[3])<<24) + 
; 5066 : 						  ((DWORD)(pAdapter->Wuff.FilterOffsets[2])<<16) +
; 5067 : 						  ((DWORD)(pAdapter->Wuff.FilterOffsets[1])<<8) + 
; 5068 : 						  (DWORD)(pAdapter->Wuff.FilterOffsets[0]);

  00004	e2801a01	 add         r1, r0, #1, 20
  00008	e5d12aeb	 ldrb        r2, [r1, #0xAEB]
  0000c	e5d13aea	 ldrb        r3, [r1, #0xAEA]

; 5069 : 	const DWORD Filter10CRC16 = 
; 5070 : 						 ((DWORD)(pAdapter->Wuff.FilterCRC16[1])<<16) + 
; 5071 : 						  (DWORD)(pAdapter->Wuff.FilterCRC16[0]);

  00010	e590b008	 ldr         r11, [r0, #8]
  00014	e5d1eae9	 ldrb        lr, [r1, #0xAE9]
  00018	e2805c1a	 add         r5, r0, #0x1A, 24
  0001c	e0833402	 add         r3, r3, r2, lsl #8

; 5072 : 	const DWORD Filter32CRC16 = 
; 5073 : 						 ((DWORD)(pAdapter->Wuff.FilterCRC16[3])<<16) + 
; 5074 : 						  (DWORD)(pAdapter->Wuff.FilterCRC16[2]);
; 5075 : 
; 5076 : 	// Write #1 Filter 0 byte mask
; 5077 : 	Lan_SetMacRegDW(dwLanBase, WUFF, pAdapter->Wuff.FilterByteMask[0]);

  00020	e59520d4	 ldr         r2, [r5, #0xD4]
  00024	e5d16ae8	 ldrb        r6, [r1, #0xAE8]
  00028	e1d58ebe	 ldrh        r8, [r5, #0xEE]
  0002c	e1d57ebc	 ldrh        r7, [r5, #0xEC]
  00030	e1d5afb2	 ldrh        r10, [r5, #0xF2]
  00034	e1d59fb0	 ldrh        r9, [r5, #0xF0]
  00038	e3a0100b	 mov         r1, #0xB
  0003c	e1a0000b	 mov         r0, r11
  00040	e08e4403	 add         r4, lr, r3, lsl #8
  00044	eb000000	 bl          Lan_SetMacRegDW

; 5078 : 	SMSC_TRACE1(DBG_POWER, "Filter0 ByteMask = 0x%x\r\n", pAdapter->Wuff.FilterByteMask[0]);
; 5079 : 	// Write #2 Filter 1 byte mask
; 5080 : 	Lan_SetMacRegDW(dwLanBase, WUFF, pAdapter->Wuff.FilterByteMask[1]);

  00048	e59520d8	 ldr         r2, [r5, #0xD8]
  0004c	e3a0100b	 mov         r1, #0xB
  00050	e1a0000b	 mov         r0, r11
  00054	eb000000	 bl          Lan_SetMacRegDW

; 5081 : 	SMSC_TRACE1(DBG_POWER, "Filter1 ByteMask = 0x%x\r\n", pAdapter->Wuff.FilterByteMask[1]);
; 5082 : 	// Write #3 Filter 2 byte mask
; 5083 : 	Lan_SetMacRegDW(dwLanBase, WUFF, pAdapter->Wuff.FilterByteMask[2]);

  00058	e59520dc	 ldr         r2, [r5, #0xDC]
  0005c	e3a0100b	 mov         r1, #0xB
  00060	e1a0000b	 mov         r0, r11
  00064	eb000000	 bl          Lan_SetMacRegDW

; 5084 : 	SMSC_TRACE1(DBG_POWER, "Filter2 ByteMask = 0x%x\r\n", pAdapter->Wuff.FilterByteMask[2]);
; 5085 : 	// Write #4 Filter 3 byte mask
; 5086 : 	Lan_SetMacRegDW(dwLanBase, WUFF, pAdapter->Wuff.FilterByteMask[3]);

  00068	e59520e0	 ldr         r2, [r5, #0xE0]
  0006c	e3a0100b	 mov         r1, #0xB
  00070	e1a0000b	 mov         r0, r11
  00074	eb000000	 bl          Lan_SetMacRegDW

; 5087 : 	SMSC_TRACE1(DBG_POWER, "Filter3 ByteMask = 0x%x\r\n", pAdapter->Wuff.FilterByteMask[3]);
; 5088 : 	// Write #5 command
; 5089 : 	Lan_SetMacRegDW(dwLanBase, WUFF, pAdapter->Wuff.FilterCommands);

  00078	e59520e4	 ldr         r2, [r5, #0xE4]
  0007c	e3a0100b	 mov         r1, #0xB
  00080	e1a0000b	 mov         r0, r11
  00084	eb000000	 bl          Lan_SetMacRegDW

; 5090 : 	SMSC_TRACE1(DBG_POWER, "Commands = 0x%x\r\n", pAdapter->Wuff.FilterCommands);
; 5091 : 	// Write #6 offset
; 5092 : 	Lan_SetMacRegDW(dwLanBase, WUFF, FilterOffsets);

  00088	e0862404	 add         r2, r6, r4, lsl #8
  0008c	e3a0100b	 mov         r1, #0xB
  00090	e1a0000b	 mov         r0, r11
  00094	eb000000	 bl          Lan_SetMacRegDW

; 5093 : 	SMSC_TRACE1(DBG_POWER, "Offsets = 0x%x\r\n", FilterOffsets);
; 5094 : 	// Write #7 filter 1 & 0 CRC-16
; 5095 : 	Lan_SetMacRegDW(dwLanBase, WUFF, Filter10CRC16);

  00098	e0872808	 add         r2, r7, r8, lsl #16
  0009c	e3a0100b	 mov         r1, #0xB
  000a0	e1a0000b	 mov         r0, r11
  000a4	eb000000	 bl          Lan_SetMacRegDW

; 5096 : 	SMSC_TRACE1(DBG_POWER, "Filter10CRC16 = 0x%x\r\n", Filter10CRC16);
; 5097 : 	// Write #8 filter 3 & 2 CRC-16
; 5098 : 	Lan_SetMacRegDW(dwLanBase, WUFF, Filter32CRC16);

  000a8	e089280a	 add         r2, r9, r10, lsl #16
  000ac	e3a0100b	 mov         r1, #0xB
  000b0	e1a0000b	 mov         r0, r11
  000b4	eb000000	 bl          Lan_SetMacRegDW

; 5099 : 	SMSC_TRACE1(DBG_POWER, "Filter32CRC16 = 0x%x\r\n", Filter32CRC16);
; 5100 : }

  000b8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$M54642|

			 ENDP  ; |ConfigWUFFReg|

	EXPORT	|Wakeup9118|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54670| DCD	|$LN19@Wakeup9118|
	DCD	0x40001300
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Wakeup9118| PROC

; 5108 : {

  00000		 |$LN19@Wakeup9118|
  00000		 |$M54667|

; 5109 : 	DWORD dwPmeCtrlReg, timeout;
; 5110 : 	const DWORD dwLanBase = pAdapter->lan9118_data.dwLanBase;

  00000	e5901008	 ldr         r1, [r0, #8]

; 5111 : 
; 5112 : 	SMSC_TRACE0(DBG_POWER, "+Wakeup9118\r\n");
; 5113 : 	
; 5114 : 	// Assert nCS and nWR to wakeup device
; 5115 : 	SetRegDW(dwLanBase, BYTE_TEST, 0UL);

  00004	e3a03000	 mov         r3, #0

; 5116 : 
; 5117 : 	timeout=0x10000000UL;	//good timeout value?

  00008	e3a02201	 mov         r2, #1, 4
  0000c	e5813064	 str         r3, [r1, #0x64]

; 5118 : 	dwPmeCtrlReg = GetRegDW(dwLanBase, PMT_CTRL);

  00010	e5913084	 ldr         r3, [r1, #0x84]

; 5119 : 	while (((dwPmeCtrlReg & PMT_CTRL_READY_) == 0UL) && timeout)

  00014	e3130001	 tst         r3, #1
  00018	1a000009	 bne         |$LN3@Wakeup9118|
  0001c		 |$LL5@Wakeup9118|
  0001c	e3520000	 cmp         r2, #0
  00020	0a000005	 beq         |$LN16@Wakeup9118|

; 5120 : 	{
; 5121 : 		dwPmeCtrlReg = GetRegDW(dwLanBase, PMT_CTRL);

  00024	e5913084	 ldr         r3, [r1, #0x84]

; 5122 : 		timeout--;

  00028	e2422001	 sub         r2, r2, #1
  0002c	e3130001	 tst         r3, #1
  00030	0afffff9	 beq         |$LL5@Wakeup9118|

; 5123 : 	}
; 5124 : 
; 5125 : 	if (!timeout)

  00034	e3520000	 cmp         r2, #0
  00038	1a000001	 bne         |$LN3@Wakeup9118|
  0003c		 |$LN16@Wakeup9118|

; 5126 : 	{
; 5127 : 		//Timed out.
; 5128 : 		SMSC_WARNING0("Setting device power state (D0) timed out(D0).\r\n");
; 5129 : 		SMSC_TRACE0(DBG_POWER, "-Wakeup9118\r\n");
; 5130 : 		return (FALSE);

  0003c	e3a00000	 mov         r0, #0

; 5141 : 	}
; 5142 : 
; 5143 : }

  00040	e12fff1e	 bx          lr
  00044		 |$LN3@Wakeup9118|

; 5131 : 	}
; 5132 : 	else
; 5133 : 	{
; 5134 : 		if (dwPmeCtrlReg&PMT_CTRL_PM_MODE_) {
; 5135 : 			SMSC_WARNING0("PMT_CTRL_PM_MODE_ still set when device is woken up.\r\n");
; 5136 : 		}
; 5137 : 
; 5138 : 		SMSC_TRACE0(DBG_POWER, "Device Power State = NdisDeviceStateD0.\r\n");
; 5139 : 		SMSC_TRACE0(DBG_POWER, "-Wakeup9118\r\n");
; 5140 : 		return (TRUE);

  00044	e3a00001	 mov         r0, #1

; 5141 : 	}
; 5142 : 
; 5143 : }

  00048	e12fff1e	 bx          lr
  0004c		 |$M54668|

			 ENDP  ; |Wakeup9118|

	EXPORT	|ChipSetup|
	IMPORT	|Lan_SetMacAddress|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54700| DCD	|$LN23@ChipSetup|
	DCD	0x40005001
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ChipSetup| PROC

; 1107 : {

  00000		 |$LN23@ChipSetup|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M54697|
  00004	e1a06000	 mov         r6, r0

; 1108 : 	const DWORD dwLanBase = pAdapter->lan9118_data.dwLanBase;
; 1109 : 	DWORD dwOldGpioCfg;
; 1110 : 	DWORD dwADDRL, dwADDRH;
; 1111 : 
; 1112 : 	SMSC_TRACE0(DBG_INIT,"+ChipSetup\r\n");
; 1113 : 	Lan_InitializeInterrupts(&(pAdapter->lan9118_data), INT_DEAS);

  00008	e1a04006	 mov         r4, r6
  0000c	e5b47008	 ldr         r7, [r4, #8]!
  00010	e3a01416	 mov         r1, #0x16, 8
  00014	e1a00004	 mov         r0, r4
  00018	eb000000	 bl          Lan_InitializeInterrupts

; 1114 : 
; 1115 : 	if (!Lan_InitializePhy(&(pAdapter->lan9118_data), pAdapter->PhyAddress))

  0001c	e2863a01	 add         r3, r6, #1, 20
  00020	e5d31a96	 ldrb        r1, [r3, #0xA96]
  00024	e1a00004	 mov         r0, r4
  00028	eb000000	 bl          Lan_InitializePhy
  0002c	e3500000	 cmp         r0, #0

; 1116 : 	{
; 1117 : 		SMSC_TRACE0(DBG_INIT,"Lan_InitializePhy failed.\r\n");
; 1118 : 		SMSC_TRACE0(DBG_INIT,"-ChipSetup\r\n");
; 1119 : 		return (BOOLEAN)FALSE;

  00030	03a00000	 moveq       r0, #0

; 1221 : }

  00034	08bd41f0	 ldmeqia     sp!, {r4 - r8, lr}
  00038	012fff1e	 bxeq        lr

; 1120 : 	}
; 1121 : 
; 1122 : 	Lan_InitializeTx(&(pAdapter->lan9118_data));

  0003c	e1a00004	 mov         r0, r4
  00040	eb000000	 bl          Lan_InitializeTx

; 1123 : 
; 1124 : 	if (pAdapter->fRxDMAMode)

  00044	e2863a01	 add         r3, r6, #1, 20
  00048	e59331a0	 ldr         r3, [r3, #0x1A0]
  0004c	e3530000	 cmp         r3, #0

; 1125 : 	{
; 1126 :         SMSC_TRACE0(DBG_INIT,"Configuring Rx for DMA\r\n");
; 1127 : 
; 1128 : #if (CACHE_LINE_BYTES==32UL)
; 1129 : 		Lan_InitializeRx(&(pAdapter->lan9118_data), 0x80000200UL, 0UL); //DMA

  00050	e3a02000	 mov         r2, #0
  00054	e1a00004	 mov         r0, r4

; 1123 : 
; 1124 : 	if (pAdapter->fRxDMAMode)

  00058	13a03102	 movne       r3, #2, 2

; 1125 : 	{
; 1126 :         SMSC_TRACE0(DBG_INIT,"Configuring Rx for DMA\r\n");
; 1127 : 
; 1128 : #if (CACHE_LINE_BYTES==32UL)
; 1129 : 		Lan_InitializeRx(&(pAdapter->lan9118_data), 0x80000200UL, 0UL); //DMA

  0005c	13831c02	 orrne       r1, r3, #2, 24

; 1130 : #elif (CACHE_LINE_BYTES==16UL)
; 1131 : 		Lan_InitializeRx(&(pAdapter->lan9118_data), 0x40000200UL, 0UL); //DMA
; 1132 : #else
; 1133 : #error	"CACHE_LINE_BYTES should be defined."
; 1134 : #endif
; 1135 : 	}
; 1136 : 	else
; 1137 : 	{
; 1138 :         SMSC_TRACE0(DBG_INIT,"Configuring Rx for PIO\r\n");
; 1139 : 		Lan_InitializeRx(&(pAdapter->lan9118_data), 0x00000200UL, 0UL); // PIO with 2-byte offset

  00060	03a01c02	 moveq       r1, #2, 24
  00064	eb000000	 bl          Lan_InitializeRx

; 1140 : 	}
; 1141 : 
; 1142 : 	// Mac Initialize
; 1143 : 	if (pAdapter->fSwFlowControlEnabled == (BOOLEAN)TRUE)

  00068	e2863a01	 add         r3, r6, #1, 20
  0006c	e5d339c8	 ldrb        r3, [r3, #0x9C8]
  00070	e3530001	 cmp         r3, #1

; 1144 : 	{
; 1145 : 		EnableSwFlowControlFD(pAdapter);

  00074	01a00006	 moveq       r0, r6
  00078	0b000000	 bleq        EnableSwFlowControlFD
  0007c	e3a03207	 mov         r3, #7, 4

; 1146 : 	}
; 1147 : 	else
; 1148 : 	{
; 1149 : 		SMSC_TRACE0(DBG_FLOW,"Flow control disabled.\r\n");
; 1150 : 	}
; 1151 : 
; 1152 : #ifdef	USE_GPIO
; 1153 : 	// Enable GPIOs, RX_DV and TX_EN
; 1154 : 	dwOldGpioCfg = GetRegDW(dwLanBase, GPIO_CFG);
; 1155 : 	dwOldGpioCfg &= ~0x00700000UL;
; 1156 : 	// Enable GPIO3 & GPIO4
; 1157 : 	dwOldGpioCfg |= 0x00100000UL;
; 1158 : 	// Set GPIO0~2 Output
; 1159 : 	dwOldGpioCfg |= 0x00000700UL;
; 1160 : 	// Clear GPIO0~2
; 1161 : 	dwOldGpioCfg &= 0xFFFFFFF8UL;
; 1162 : 	SetRegDW(dwLanBase, GPIO_CFG, dwOldGpioCfg);
; 1163 : #else
; 1164 : 	dwOldGpioCfg = GPIO_CFG_LED3_EN_ | GPIO_CFG_LED2_EN_ | 
; 1165 : 				   GPIO_CFG_LED1_EN_ |
; 1166 : 				   GPIO_CFG_GPIODIR2_ | GPIO_CFG_GPIODIR1_ | 
; 1167 : 				   GPIO_CFG_GPIODIR0_;
; 1168 : 	SetRegDW(dwLanBase, GPIO_CFG, dwOldGpioCfg);

  00080	e3833c07	 orr         r3, r3, #7, 24
  00084	e5873088	 str         r3, [r7, #0x88]

; 1169 : #endif
; 1170 : 	
; 1171 : 	//Save GPIO_CFG register
; 1172 : 	dwOldGpioCfg = GetRegDW(dwLanBase, GPIO_CFG);

  00088	e5978088	 ldr         r8, [r7, #0x88]

; 1173 : 
; 1174 : 	//Configure EEPROM instead of GPIO use
; 1175 : 	SetRegDW(dwLanBase, GPIO_CFG, dwOldGpioCfg & ~GPIO_CFG_EEPR_EN_);
; 1176 : 
; 1177 : 	//Check automatic load
; 1178 : 	SMSC_TRACE1(DBG_EEPROM,"E2P_CMD=0x%x\r\n", GetRegDW(dwLanBase, E2P_CMD));
; 1179 : 	if (GetRegDW(dwLanBase, E2P_CMD) & E2P_CMD_E2P_PROG_DONE_)

  0008c	e3c83607	 bic         r3, r8, #7, 12
  00090	e5873088	 str         r3, [r7, #0x88]
  00094	e59730b0	 ldr         r3, [r7, #0xB0]
  00098	e3130c01	 tst         r3, #1, 24
  0009c	0a000012	 beq         |$LN2@ChipSetup|

; 1180 : 	{
; 1181 : 		//MAC address is successfully loaded from EEPROM.
; 1182 : 		SMSC_TRACE0(DBG_EEPROM,"MAC address from EEPROM is loaded.\r\n");
; 1183 : 
; 1184 : 		dwADDRL = Lan_GetMacRegDW(dwLanBase, ADDRL);

  000a0	e3a01003	 mov         r1, #3
  000a4	e1a00007	 mov         r0, r7
  000a8	eb000000	 bl          Lan_GetMacRegDW
  000ac	e1a05000	 mov         r5, r0

; 1185 : 		dwADDRH = Lan_GetMacRegDW(dwLanBase, ADDRH);

  000b0	e1a00007	 mov         r0, r7
  000b4	e3a01002	 mov         r1, #2
  000b8	eb000000	 bl          Lan_GetMacRegDW

; 1186 : 		SMSC_TRACE2(DBG_EEPROM,"ADDRH=0x%x ADDRL=0x%x\r\n", dwADDRH, dwADDRL);
; 1187 : 
; 1188 : 		// Save the MAC address.
; 1189 : 		pAdapter->ucStationAddress[0] = LOBYTE(LOWORD(dwADDRL));
; 1190 : 		pAdapter->ucStationAddress[1] = HIBYTE(LOWORD(dwADDRL));
; 1191 : 		pAdapter->ucStationAddress[2] = LOBYTE(HIWORD(dwADDRL));

  000bc	e1a0e825	 mov         lr, r5, lsr #16

; 1192 : 		pAdapter->ucStationAddress[3] = HIBYTE(HIWORD(dwADDRL));
; 1193 : 		pAdapter->ucStationAddress[4] = LOBYTE(LOWORD(dwADDRH)); 
; 1194 : 		pAdapter->ucStationAddress[5] = HIBYTE(LOWORD(dwADDRH));

  000c0	e1a0142e	 mov         r1, lr, lsr #8
  000c4	e1a03420	 mov         r3, r0, lsr #8
  000c8	e2864a01	 add         r4, r6, #1, 20
  000cc	e1a02425	 mov         r2, r5, lsr #8
  000d0	e5c41a93	 strb        r1, [r4, #0xA93]
  000d4	e5c43a95	 strb        r3, [r4, #0xA95]
  000d8	e5c45a90	 strb        r5, [r4, #0xA90]
  000dc	e5c42a91	 strb        r2, [r4, #0xA91]
  000e0	e5c4ea92	 strb        lr, [r4, #0xA92]
  000e4	e5c40a94	 strb        r0, [r4, #0xA94]

; 1195 : 		SMSC_TRACE6(DBG_EEPROM,"ucStationAddress=%x %x %x %x %x %x\r\n", 
; 1196 : 							   pAdapter->ucStationAddress[0], pAdapter->ucStationAddress[1],
; 1197 : 							   pAdapter->ucStationAddress[2], pAdapter->ucStationAddress[3],
; 1198 : 							   pAdapter->ucStationAddress[4], pAdapter->ucStationAddress[5] );
; 1199 : 	}
; 1200 : 	else

  000e8	ea000010	 b           |$LN1@ChipSetup|
  000ec		 |$LN2@ChipSetup|
  000ec	e3a03411	 mov         r3, #0x11, 8

; 1201 : 	{
; 1202 : 		// Set the MAC address
; 1203 : 		Lan_SetMacAddress(&(pAdapter->lan9118_data), 0x00000070UL, 0x110F8000UL);

  000f0	e383293e	 orr         r2, r3, #0x3E, 18
  000f4	e3a01070	 mov         r1, #0x70
  000f8	e1a00004	 mov         r0, r4
  000fc	eb000000	 bl          Lan_SetMacAddress

; 1204 : 	
; 1205 : 		// Save the MAC address.
; 1206 : 		pAdapter->ucStationAddress[0] = (BYTE)0x00;
; 1207 : 		pAdapter->ucStationAddress[1] = (BYTE)0x80;
; 1208 : 		pAdapter->ucStationAddress[2] = (BYTE)0x0F;
; 1209 : 		pAdapter->ucStationAddress[3] = (BYTE)0x11;
; 1210 : 		pAdapter->ucStationAddress[4] = (BYTE)0x70; 

  00100	e3a0e070	 mov         lr, #0x70
  00104	e2863a01	 add         r3, r6, #1, 20
  00108	e3a02080	 mov         r2, #0x80
  0010c	e3a0100f	 mov         r1, #0xF
  00110	e3a00011	 mov         r0, #0x11
  00114	e3a04000	 mov         r4, #0
  00118	e5c3ea94	 strb        lr, [r3, #0xA94]
  0011c	e5c34a90	 strb        r4, [r3, #0xA90]
  00120	e5c32a91	 strb        r2, [r3, #0xA91]
  00124	e5c31a92	 strb        r1, [r3, #0xA92]
  00128	e5c30a93	 strb        r0, [r3, #0xA93]

; 1211 : 		pAdapter->ucStationAddress[5] = (BYTE)0x00;

  0012c	e5c34a95	 strb        r4, [r3, #0xA95]
  00130		 |$LN1@ChipSetup|

; 1212 : 	
; 1213 : 	}
; 1214 : 	
; 1215 : 	//Restore GPIO_CFG register
; 1216 : 	SetRegDW(dwLanBase, GPIO_CFG, dwOldGpioCfg);

  00130	e5878088	 str         r8, [r7, #0x88]

; 1217 : 
; 1218 : 
; 1219 : 	SMSC_TRACE0(DBG_INIT,"-ChipSetup\r\n");
; 1220 : 	return (BOOLEAN)TRUE;

  00134	e3a00001	 mov         r0, #1

; 1221 : }

  00138	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0013c	e12fff1e	 bx          lr
  00140		 |$M54698|

			 ENDP  ; |ChipSetup|

	EXPORT	|Smsc9118Reset|

  00000			 AREA	 |.pdata|, PDATA
|$T54712| DCD	|$LN8@Smsc9118Re|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Smsc9118Reset| PROC

; 2477 : {

  00000		 |$LN8@Smsc9118Re|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M54709|
  00004	e3510000	 cmp         r1, #0
  00008	e1a04000	 mov         r4, r0

; 2478 :     SMSC9118_ADAPTER * const pAdapter = (PSMSC9118_ADAPTER)(hMiniportAdapterContext);
; 2479 : 
; 2480 :     SMSC_TRACE0(DBG_INIT,"+Smsc9118Reset\r\n");
; 2481 : 
; 2482 :     if (pAdapter != NULL)

  0000c	0a000003	 beq         |$LN2@Smsc9118Re|

; 2483 :     {
; 2484 :         Reset118(pAdapter);

  00010	e1a00001	 mov         r0, r1
  00014	eb000000	 bl          Reset118

; 2485 :         *pbAddressingReset = (BOOLEAN)TRUE;

  00018	e3a03001	 mov         r3, #1

; 2486 :     }
; 2487 :     else

  0001c	ea000000	 b           |$LN5@Smsc9118Re|
  00020		 |$LN2@Smsc9118Re|

; 2488 :     {
; 2489 :         SMSC_WARNING0("Error! Smsc9118Reset: pAdapter == NULL\r\n");
; 2490 :         *pbAddressingReset = (BOOLEAN)FALSE;

  00020	e3a03000	 mov         r3, #0
  00024		 |$LN5@Smsc9118Re|
  00024	e5c43000	 strb        r3, [r4]

; 2491 :     }
; 2492 : 
; 2493 :     SMSC_TRACE0(DBG_INIT,"-Smsc9118Reset\r\n");
; 2494 : 
; 2495 :     return NDIS_STATUS_SUCCESS;

  00028	e3a00000	 mov         r0, #0

; 2496 : }

  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M54710|

			 ENDP  ; |Smsc9118Reset|

; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54766| DCD	|$LN66@Smsc9118Tr|
	DCD	0x4000ea02
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Smsc9118TransmitPackets| PROC

; 3532 : {

  00000		 |$LN66@Smsc9118Tr|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M54763|
  00008	e1a06002	 mov         r6, r2
  0000c	e1a07001	 mov         r7, r1
  00010	e1a04000	 mov         r4, r0

; 3533 : 	DWORD	dw, TxDataFreeSpace, TxSpaceNeeded, TxStatus;
; 3534 : 	UINT	packet_len;
; 3535 : 	DWORD	BufferCount, dwFreeRunCounter;
; 3536 : 	BOOL	status = TRUE;
; 3537 : 	PNDIS_PACKET pPacket;
; 3538 : 
; 3539 : 	SMSC_TRACE0(DBG_TX,"+Smsc9118TransmitPackets\r\n");
; 3540 : 
; 3541 : 	if (QUEUE_COUNT(&pAdapter->TxDeferedPkt))

  00014	e594317c	 ldr         r3, [r4, #0x17C]
  00018	e3530000	 cmp         r3, #0
  0001c	0a000075	 beq         |$LN40@Smsc9118Tr|

; 3542 : 	{
; 3543 : 		SMSC_TRACE1(DBG_TX, "%d TxDeferedPkts\r\n", QUEUE_COUNT(&pAdapter->TxDeferedPkt));
; 3544 : 		for(dw=0UL; dw<(DWORD)uiNumOfPkts; dw++)

  00020	e59f537c	 ldr         r5, [pc, #0x37C]
  00024	e3a0a000	 mov         r10, #0
  00028	e3560000	 cmp         r6, #0
  0002c	0a000019	 beq         |$LN56@Smsc9118Tr|
  00030	e3a03c01	 mov         r3, #1, 24
  00034	e3839003	 orr         r9, r3, #3
  00038		 |$LL39@Smsc9118Tr|

; 3545 : 		{
; 3546 : 			pPacket = ppPacket[dw];

  00038	e5970000	 ldr         r0, [r7]

; 3547 : 			SMSC_ASSERT(pPacket);
; 3548 : 
; 3549 : 			NDIS_SET_PACKET_STATUS(pPacket, NDIS_STATUS_PENDING);
; 3550 : 			dwFreeRunCounter = AdapterGetCSR(FREE_RUN);
; 3551 : 			EnqueuePacket(pAdapter->TxDeferedPkt.FirstPacket, pAdapter->TxDeferedPkt.LastPacket, pPacket, dwFreeRunCounter);
; 3552 : 			(pAdapter->TxDeferedPkt.Count)++;

  0003c	e2877004	 add         r7, r7, #4
  00040	e1d031be	 ldrh        r3, [r0, #0x1E]
  00044	e0833000	 add         r3, r3, r0
  00048	e583901c	 str         r9, [r3, #0x1C]
  0004c	e5942174	 ldr         r2, [r4, #0x174]
  00050	e5943008	 ldr         r3, [r4, #8]
  00054	e3520000	 cmp         r2, #0
  00058	e593109c	 ldr         r1, [r3, #0x9C]
  0005c	15943178	 ldrne       r3, [r4, #0x178]
  00060	05840174	 streq       r0, [r4, #0x174]
  00064	15830020	 strne       r0, [r3, #0x20]
  00068	e3510000	 cmp         r1, #0
  0006c	15801024	 strne       r1, [r0, #0x24]
  00070	e580a020	 str         r10, [r0, #0x20]
  00074	e594317c	 ldr         r3, [r4, #0x17C]
  00078	e5840178	 str         r0, [r4, #0x178]

; 3553 : #ifdef	TRACE_BUFFER
; 3554 : 			dwTxPend++;

  0007c	e2566001	 subs        r6, r6, #1
  00080	e2833001	 add         r3, r3, #1
  00084	e584317c	 str         r3, [r4, #0x17C]
  00088	e5953004	 ldr         r3, [r5, #4]
  0008c	e2833001	 add         r3, r3, #1
  00090	e5853004	 str         r3, [r5, #4]
  00094	1affffe7	 bne         |$LL39@Smsc9118Tr|
  00098		 |$LN56@Smsc9118Tr|

; 3555 : #endif
; 3556 : 		}
; 3557 : 
; 3558 : 		while (QUEUE_COUNT(&pAdapter->TxDeferedPkt))

  00098	e594317c	 ldr         r3, [r4, #0x17C]
  0009c	e3530000	 cmp         r3, #0
  000a0	0a00004c	 beq         |$LN23@Smsc9118Tr|
  000a4	e3a03cff	 mov         r3, #0xFF, 24
  000a8	e383b0ff	 orr         r11, r3, #0xFF
  000ac	e28d8004	 add         r8, sp, #4
  000b0	e2849a01	 add         r9, r4, #1, 20
  000b4		 |$LL33@Smsc9118Tr|

; 3559 : 		{
; 3560 : 			pPacket = pAdapter->TxDeferedPkt.FirstPacket;
; 3561 : 			SMSC_ASSERT(pPacket);
; 3562 : 
; 3563 : 			// Read the actual data.
; 3564 : 			TxDataFreeSpace = (DWORD)((GetRegDW(pAdapter->lan9118_data.dwLanBase, TX_FIFO_INF)) & TX_FIFO_INF_TDFREE_);

  000b4	e5942008	 ldr         r2, [r4, #8]
  000b8	e5946174	 ldr         r6, [r4, #0x174]

; 3565 : 			NdisQueryPacket(pPacket, NULL, (PUINT)&BufferCount, NULL, (PUINT)&packet_len);

  000bc	e3a03000	 mov         r3, #0
  000c0	e5920080	 ldr         r0, [r2, #0x80]
  000c4	e28d2008	 add         r2, sp, #8
  000c8	e3a01000	 mov         r1, #0
  000cc	e000700b	 and         r7, r0, r11
  000d0	e1a00006	 mov         r0, r6
  000d4	e58d8000	 str         r8, [sp]
  000d8	eb000000	 bl          NdisQueryPacket

; 3566 : 			if ((pAdapter->fTxDMAMode) && (BufferCount <= 30UL))

  000dc	e59931a4	 ldr         r3, [r9, #0x1A4]
  000e0	e59d1008	 ldr         r1, [sp, #8]
  000e4	e3530000	 cmp         r3, #0
  000e8	0a000006	 beq         |$LN31@Smsc9118Tr|
  000ec	e351001e	 cmp         r1, #0x1E

; 3567 : 			{
; 3568 : 				// worst case for burst mode DMA
; 3569 : 				TxSpaceNeeded = ( ( (DWORD)packet_len + 
; 3570 : 									(BufferCount*((DWORD)MAX_NUM_SEGMENTS*TX_BURST_DMA_END_ALIGNMENT)) +  CACHE_LINE_BYTES) & ~(CACHE_LINE_BYTES-1UL));

  000f0	959d2004	 ldrls       r2, [sp, #4]
  000f4	90813081	 addls       r3, r1, r1, lsl #1
  000f8	90823283	 addls       r3, r2, r3, lsl #5
  000fc	92833020	 addls       r3, r3, #0x20
  00100	93c3301f	 bicls       r3, r3, #0x1F
  00104	9a000003	 bls         |$LN30@Smsc9118Tr|
  00108		 |$LN31@Smsc9118Tr|

; 3571 : 
; 3572 : 			}
; 3573 : 			else
; 3574 : 			{
; 3575 : 				// if (BufferCount > 30), TxSpaceNeeded will be larger than
; 3576 : 				// max available TX FIFO.
; 3577 : 				// If then, Smsc9118XmitOnePacket() will handle the packet
; 3578 : 				//  as PIO mode.
; 3579 : 				// We can check as PIO mode here
; 3580 : 				TxSpaceNeeded = (DWORD)((packet_len+3U)&(~0x03U)) + (BufferCount<<4);

  00108	e59d3004	 ldr         r3, [sp, #4]
  0010c	e2833003	 add         r3, r3, #3
  00110	e3c33003	 bic         r3, r3, #3
  00114	e0833201	 add         r3, r3, r1, lsl #4
  00118		 |$LN30@Smsc9118Tr|

; 3581 : 			}
; 3582 : 
; 3583 : 			if (TxSpaceNeeded < TxDataFreeSpace)

  00118	e1530007	 cmp         r3, r7
  0011c	2a000029	 bcs         |$LN21@Smsc9118Tr|

; 3584 : 			{
; 3585 : 				status = Smsc9118XmitOnePacket(pAdapter, pPacket);

  00120	e1a01006	 mov         r1, r6
  00124	e1a00004	 mov         r0, r4
  00128	eb000000	 bl          Smsc9118XmitOnePacket

; 3586 : 				DequeuePacket(pAdapter->TxDeferedPkt.FirstPacket, pAdapter->TxDeferedPkt.LastPacket);

  0012c	e5942174	 ldr         r2, [r4, #0x174]

; 3587 : 				if (status == TRUE)
; 3588 : 				{
; 3589 : 					NdisMSendComplete(pAdapter->hMiniportAdapterHandle, 
; 3590 : 							pPacket, NDIS_STATUS_SUCCESS);

  00130	e1a01006	 mov         r1, r6
  00134	e5b23020	 ldr         r3, [r2, #0x20]!
  00138	e3530000	 cmp         r3, #0
  0013c	0584a178	 streq       r10, [r4, #0x178]
  00140	e5923000	 ldr         r3, [r2]
  00144	e3500001	 cmp         r0, #1
  00148	e5940000	 ldr         r0, [r4]
  0014c	e5843174	 str         r3, [r4, #0x174]
  00150	e590310c	 ldr         r3, [r0, #0x10C]
  00154	1a000003	 bne         |$LN27@Smsc9118Tr|
  00158	e3a02000	 mov         r2, #0
  0015c	e1a0e00f	 mov         lr, pc
  00160	e12fff13	 bx          r3

; 3591 : 					SMSC_TRACE0(DBG_TX,"One packet xmitted successfully.\r\n");
; 3592 : 				}
; 3593 : 				else

  00164	ea000002	 b           |$LN26@Smsc9118Tr|
  00168		 |$LN27@Smsc9118Tr|

; 3594 : 				{
; 3595 : 					NdisMSendComplete(pAdapter->hMiniportAdapterHandle, 
; 3596 : 							pPacket, NDIS_STATUS_FAILURE);

  00168	e3a02107	 mov         r2, #7, 2
  0016c	e1a0e00f	 mov         lr, pc
  00170	e12fff13	 bx          r3
  00174		 |$LN26@Smsc9118Tr|

; 3597 : 					SMSC_TRACE0(DBG_TX,"One packet failed xmitting.\r\n");
; 3598 : 				}
; 3599 : #ifdef	TRACE_BUFFER
; 3600 : 				dwTxSent++;

  00174	e5953000	 ldr         r3, [r5]
  00178	e2833001	 add         r3, r3, #1
  0017c	e5853000	 str         r3, [r5]

; 3601 : 				dwTxPend--;

  00180	e5953004	 ldr         r3, [r5, #4]
  00184	e2433001	 sub         r3, r3, #1
  00188	e5853004	 str         r3, [r5, #4]

; 3602 : #endif
; 3603 : 				(pAdapter->TxDeferedPkt.Count)--;

  0018c	e594317c	 ldr         r3, [r4, #0x17C]
  00190	e2433001	 sub         r3, r3, #1
  00194	e584317c	 str         r3, [r4, #0x17C]
  00198	e3530000	 cmp         r3, #0
  0019c	1affffc4	 bne         |$LL33@Smsc9118Tr|

; 3542 : 	{
; 3543 : 		SMSC_TRACE1(DBG_TX, "%d TxDeferedPkts\r\n", QUEUE_COUNT(&pAdapter->TxDeferedPkt));
; 3544 : 		for(dw=0UL; dw<(DWORD)uiNumOfPkts; dw++)

  001a0	ea00000c	 b           |$LN23@Smsc9118Tr|
  001a4		 |$LL24@Smsc9118Tr|

; 3604 : 			}
; 3605 : 			else
; 3606 : 			{
; 3607 : 				while (Lan_GetTxStatusCount(&(pAdapter->lan9118_data)))
; 3608 : 				{
; 3609 : 					TxStatus = GetRegDW(pAdapter->lan9118_data.dwLanBase, TX_STATUS_FIFO_PORT);

  001a4	e5943008	 ldr         r3, [r4, #8]
  001a8	e5933048	 ldr         r3, [r3, #0x48]

; 3610 : 					if (!(TxStatus&TX_STS_ES))

  001ac	e3130902	 tst         r3, #2, 18

; 3611 : 					{
; 3612 : 						// Update the stats
; 3613 : 						(pAdapter->ulFramesXmitGood)++;

  001b0	05943128	 ldreq       r3, [r4, #0x128]
  001b4	02833001	 addeq       r3, r3, #1
  001b8	05843128	 streq       r3, [r4, #0x128]

; 3614 : 						SMSC_TRACE0(DBG_TX,"Tx Success\r\n");
; 3615 : 					}
; 3616 : 					else
; 3617 : 					{
; 3618 : 						// Update the stats
; 3619 : 						(pAdapter->ulFramesXmitBad)++;

  001bc	15943130	 ldrne       r3, [r4, #0x130]
  001c0	12833001	 addne       r3, r3, #1
  001c4	15843130	 strne       r3, [r4, #0x130]
  001c8		 |$LN21@Smsc9118Tr|
  001c8	e2840008	 add         r0, r4, #8
  001cc	eb000000	 bl          Lan_GetTxStatusCount
  001d0	e3500000	 cmp         r0, #0
  001d4	1afffff2	 bne         |$LL24@Smsc9118Tr|
  001d8		 |$LN23@Smsc9118Tr|

; 3620 : 						SMSC_TRACE1(DBG_TX,"Tx Failure! TxStatus = 0x%x\r\n", TxStatus);
; 3621 : 					}
; 3622 : 				}
; 3623 : 				break;	// break from while
; 3624 : 			}
; 3625 : 		}
; 3626 : 		// Set the TDFA interrupt for size of a minimum packet size.
; 3627 : 		pAdapter->TDFALevel = 0x20UL;
; 3628 : 		if (NdisMSynchronizeWithInterrupt(&(pAdapter->Interrupt), SyncSetTDFALevel, (PVOID)pAdapter) != TRUE) 

  001d8	e59f11c0	 ldr         r1, [pc, #0x1C0]
  001dc	e2843a01	 add         r3, r4, #1, 20
  001e0	e3a0e020	 mov         lr, #0x20
  001e4	e1a02004	 mov         r2, r4
  001e8	e28400d4	 add         r0, r4, #0xD4
  001ec	e583e9bc	 str         lr, [r3, #0x9BC]
  001f0	eb000000	 bl          NdisMSynchronizeWithInterrupt

; 3629 : 		{
; 3630 : 			SMSC_WARNING(TEXT("Failed! at NdisMSynchronizeWithInterrupt()\r\n"));
; 3631 : 		}
; 3632 : 	}
; 3633 : 	else 

  001f4	ea000066	 b           |$LN16@Smsc9118Tr|
  001f8		 |$LN40@Smsc9118Tr|

; 3634 : 	{
; 3635 : 		SMSC_TRACE0(DBG_TX, "No TxDeferedPkts\r\n");
; 3636 : 
; 3637 : 		for(dw=0UL; dw<(DWORD)uiNumOfPkts; dw++)

  001f8	e3560000	 cmp         r6, #0
  001fc	0a000064	 beq         |$LN16@Smsc9118Tr|
  00200	e3a03c01	 mov         r3, #1, 24
  00204	e3839003	 orr         r9, r3, #3
  00208	e3a03cff	 mov         r3, #0xFF, 24
  0020c	e383e0ff	 orr         lr, r3, #0xFF
  00210	e59fb18c	 ldr         r11, [pc, #0x18C]
  00214	e58de00c	 str         lr, [sp, #0xC]
  00218	e3a0a000	 mov         r10, #0
  0021c		 |$LL18@Smsc9118Tr|

; 3638 : 		{
; 3639 : 			pPacket = ppPacket[dw];
; 3640 : 			SMSC_ASSERT(pPacket);
; 3641 : 			// Read the actual data.
; 3642 : 			TxDataFreeSpace = (GetRegDW(pAdapter->lan9118_data.dwLanBase, TX_FIFO_INF)) & TX_FIFO_INF_TDFREE_;

  0021c	e5942008	 ldr         r2, [r4, #8]
  00220	e5975000	 ldr         r5, [r7]

; 3643 : 			NdisQueryPacket(pPacket, NULL, (PUINT)&BufferCount, NULL, (PUINT)&packet_len);

  00224	e3a03000	 mov         r3, #0
  00228	e5920080	 ldr         r0, [r2, #0x80]
  0022c	e28d2008	 add         r2, sp, #8
  00230	e3a01000	 mov         r1, #0
  00234	e000800e	 and         r8, r0, lr
  00238	e28de004	 add         lr, sp, #4
  0023c	e1a00005	 mov         r0, r5
  00240	e58de000	 str         lr, [sp]
  00244	eb000000	 bl          NdisQueryPacket

; 3644 : 			if ((pAdapter->fTxDMAMode) && (BufferCount < 30UL))

  00248	e2842a01	 add         r2, r4, #1, 20
  0024c	e59231a4	 ldr         r3, [r2, #0x1A4]
  00250	e59d1008	 ldr         r1, [sp, #8]
  00254	e3530000	 cmp         r3, #0
  00258	0a000006	 beq         |$LN15@Smsc9118Tr|
  0025c	e351001e	 cmp         r1, #0x1E

; 3645 : 			{
; 3646 : 				// worst case for burst mode DMA
; 3647 : 				TxSpaceNeeded = ( ( (DWORD)packet_len + 
; 3648 : 									(BufferCount*((DWORD)MAX_NUM_SEGMENTS*TX_BURST_DMA_END_ALIGNMENT)) +  CACHE_LINE_BYTES) & ~(CACHE_LINE_BYTES-1UL));

  00260	359d2004	 ldrcc       r2, [sp, #4]
  00264	30813081	 addcc       r3, r1, r1, lsl #1
  00268	30823283	 addcc       r3, r2, r3, lsl #5
  0026c	32833020	 addcc       r3, r3, #0x20
  00270	33c3301f	 biccc       r3, r3, #0x1F
  00274	3a000003	 bcc         |$LN14@Smsc9118Tr|
  00278		 |$LN15@Smsc9118Tr|

; 3649 : 			}
; 3650 : 			else
; 3651 : 			{
; 3652 : 				// if (BufferCount > 30), TxSpaceNeeded will be larger than
; 3653 : 				// max available TX FIFO.
; 3654 : 				// If then, Smsc9118XmitOnePacket() will handle the packet
; 3655 : 				//  as PIO mode.
; 3656 : 				// We can check as PIO mode here
; 3657 : 				TxSpaceNeeded = (DWORD)((packet_len+3U)&(~0x03U)) + (BufferCount<<4);

  00278	e59d3004	 ldr         r3, [sp, #4]
  0027c	e2833003	 add         r3, r3, #3
  00280	e3c33003	 bic         r3, r3, #3
  00284	e0833201	 add         r3, r3, r1, lsl #4
  00288		 |$LN14@Smsc9118Tr|

; 3658 : 			}
; 3659 : 
; 3660 : 			if (TxSpaceNeeded < TxDataFreeSpace)

  00288	e1530008	 cmp         r3, r8
  0028c	2a000013	 bcs         |$LN13@Smsc9118Tr|

; 3661 : 			{
; 3662 : 				status = Smsc9118XmitOnePacket(pAdapter, pPacket);

  00290	e1a01005	 mov         r1, r5
  00294	e1a00004	 mov         r0, r4
  00298	eb000000	 bl          Smsc9118XmitOnePacket

; 3663 : 				if (status == FALSE)
; 3664 : 				{
; 3665 : 					NDIS_SET_PACKET_STATUS(pPacket, NDIS_STATUS_FAILURE);

  0029c	e1d531be	 ldrh        r3, [r5, #0x1E]
  002a0	e3500000	 cmp         r0, #0
  002a4	03a02107	 moveq       r2, #7, 2
  002a8	e0833005	 add         r3, r3, r5
  002ac	0583201c	 streq       r2, [r3, #0x1C]

; 3666 : 					SMSC_TRACE0(DBG_TX,"One packet failed xmitting.\r\n");
; 3667 : 				}
; 3668 : 				else
; 3669 : 				{
; 3670 : 					NDIS_SET_PACKET_STATUS(pPacket, NDIS_STATUS_SUCCESS);

  002b0	1583a01c	 strne       r10, [r3, #0x1C]

; 3671 : 					SMSC_TRACE0(DBG_TX,"One packet xmitted successfully.\r\n");
; 3672 : 				}
; 3673 : #ifdef	TRACE_BUFFER
; 3674 : 				dwTxSent++;

  002b4	e59b3000	 ldr         r3, [r11]

; 3675 : #endif
; 3676 : 				pAdapter->TDFALevel = 0xFFUL;
; 3677 : 				if (NdisMSynchronizeWithInterrupt(&(pAdapter->Interrupt), SyncSetTDFALevel, (PVOID)pAdapter) != TRUE) 

  002b8	e59f10e0	 ldr         r1, [pc, #0xE0]
  002bc	e3a000ff	 mov         r0, #0xFF
  002c0	e2833001	 add         r3, r3, #1
  002c4	e58b3000	 str         r3, [r11]
  002c8	e2843a01	 add         r3, r4, #1, 20
  002cc	e58309bc	 str         r0, [r3, #0x9BC]
  002d0	e28400d4	 add         r0, r4, #0xD4
  002d4	e1a02004	 mov         r2, r4
  002d8	eb000000	 bl          NdisMSynchronizeWithInterrupt

; 3678 : 				{
; 3679 : 					SMSC_WARNING(TEXT("Failed! at NdisMSynchronizeWithInterrupt()\r\n"));
; 3680 : 				}
; 3681 : 			}
; 3682 : 			else

  002dc	ea000021	 b           |$LN4@Smsc9118Tr|
  002e0		 |$LN13@Smsc9118Tr|

; 3683 : 			{
; 3684 : 				// No room on FIFO. Save now and send them later
; 3685 : 				SMSC_TRACE2(DBG_TX, "No room on TX FIFO. SpaceNeeded = %d, FreeSpace = %d\r\n", TxSpaceNeeded, TxDataFreeSpace);
; 3686 : 
; 3687 : 				NDIS_SET_PACKET_STATUS(pPacket, NDIS_STATUS_PENDING);

  002e0	e1d531be	 ldrh        r3, [r5, #0x1E]
  002e4	e0833005	 add         r3, r3, r5
  002e8	e583901c	 str         r9, [r3, #0x1C]

; 3688 : 				dwFreeRunCounter = AdapterGetCSR(FREE_RUN);
; 3689 : 				EnqueuePacket(pAdapter->TxDeferedPkt.FirstPacket, pAdapter->TxDeferedPkt.LastPacket, pPacket, dwFreeRunCounter);

  002ec	e5942174	 ldr         r2, [r4, #0x174]
  002f0	e5943008	 ldr         r3, [r4, #8]
  002f4	e3520000	 cmp         r2, #0
  002f8	e593109c	 ldr         r1, [r3, #0x9C]
  002fc	15943178	 ldrne       r3, [r4, #0x178]
  00300	05845174	 streq       r5, [r4, #0x174]
  00304	15835020	 strne       r5, [r3, #0x20]
  00308	e3510000	 cmp         r1, #0
  0030c	15851024	 strne       r1, [r5, #0x24]
  00310	e585a020	 str         r10, [r5, #0x20]

; 3690 : 				(pAdapter->TxDeferedPkt.Count)++;

  00314	e594317c	 ldr         r3, [r4, #0x17C]
  00318	e5845178	 str         r5, [r4, #0x178]

; 3691 : #ifdef	TRACE_BUFFER
; 3692 : 				dwTxPend++;
; 3693 : #endif
; 3694 : 				while (Lan_GetTxStatusCount(&(pAdapter->lan9118_data)))

  0031c	e2833001	 add         r3, r3, #1
  00320	e584317c	 str         r3, [r4, #0x17C]
  00324	e59b3004	 ldr         r3, [r11, #4]
  00328	e2833001	 add         r3, r3, #1
  0032c	e58b3004	 str         r3, [r11, #4]
  00330	ea000008	 b           |$LN2@Smsc9118Tr|
  00334		 |$LL5@Smsc9118Tr|

; 3695 : 				{
; 3696 : 					TxStatus = GetRegDW(pAdapter->lan9118_data.dwLanBase, TX_STATUS_FIFO_PORT);

  00334	e5943008	 ldr         r3, [r4, #8]
  00338	e5933048	 ldr         r3, [r3, #0x48]

; 3697 : 					if (!(TxStatus&TX_STS_ES))

  0033c	e3130902	 tst         r3, #2, 18

; 3698 : 					{
; 3699 : 						// Update the stats
; 3700 : 						(pAdapter->ulFramesXmitGood)++;

  00340	05943128	 ldreq       r3, [r4, #0x128]
  00344	02833001	 addeq       r3, r3, #1
  00348	05843128	 streq       r3, [r4, #0x128]

; 3701 : 						SMSC_TRACE0(DBG_TX,"Tx Success\r\n");
; 3702 : 					}
; 3703 : 					else
; 3704 : 					{
; 3705 : 						// Update the stats
; 3706 : 						(pAdapter->ulFramesXmitBad)++;

  0034c	15943130	 ldrne       r3, [r4, #0x130]
  00350	12833001	 addne       r3, r3, #1
  00354	15843130	 strne       r3, [r4, #0x130]
  00358		 |$LN2@Smsc9118Tr|
  00358	e2840008	 add         r0, r4, #8
  0035c	eb000000	 bl          Lan_GetTxStatusCount
  00360	e3500000	 cmp         r0, #0
  00364	1afffff2	 bne         |$LL5@Smsc9118Tr|
  00368		 |$LN4@Smsc9118Tr|

; 3707 : 						SMSC_TRACE1(DBG_TX,"Tx Failure! TxStatus = 0x%x\r\n", TxStatus);
; 3708 : 					}
; 3709 : 
; 3710 : 				}
; 3711 : 			}
; 3712 : 			pAdapter->TDFALevel = 0x20UL;
; 3713 : 			if (NdisMSynchronizeWithInterrupt(&(pAdapter->Interrupt), SyncSetTDFALevel, (PVOID)pAdapter) != TRUE) 

  00368	e59f1030	 ldr         r1, [pc, #0x30]
  0036c	e2843a01	 add         r3, r4, #1, 20
  00370	e3a0e020	 mov         lr, #0x20
  00374	e1a02004	 mov         r2, r4
  00378	e28400d4	 add         r0, r4, #0xD4
  0037c	e583e9bc	 str         lr, [r3, #0x9BC]
  00380	eb000000	 bl          NdisMSynchronizeWithInterrupt
  00384	e59de00c	 ldr         lr, [sp, #0xC]
  00388	e2877004	 add         r7, r7, #4
  0038c	e2566001	 subs        r6, r6, #1
  00390	1affffa1	 bne         |$LL18@Smsc9118Tr|
  00394		 |$LN16@Smsc9118Tr|

; 3714 : 			{
; 3715 : 				SMSC_WARNING(TEXT("Failed! at NdisMSynchronizeWithInterrupt()\r\n"));
; 3716 : 			}
; 3717 : 		}
; 3718 : 	}
; 3719 : 
; 3720 : 	// Make Lint Happy
; 3721 : 	ppPacket = ppPacket;
; 3722 : 	uiNumOfPkts = uiNumOfPkts;
; 3723 : 
; 3724 : 	SMSC_TRACE0(DBG_TX,"-Smsc9118TransmitPackets\r\n");
; 3725 : }

  00394	e28dd010	 add         sp, sp, #0x10
  00398	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0039c	e12fff1e	 bx          lr
  003a0		 |$LN67@Smsc9118Tr|
  003a0		 |$LN68@Smsc9118Tr|
  003a0	00000000	 DCD         |SyncSetTDFALevel|
  003a4		 |$LN69@Smsc9118Tr|
  003a4	00000000	 DCD         |dwTxSent|
  003a8		 |$M54764|

			 ENDP  ; |Smsc9118TransmitPackets|

	EXPORT	|Smsc9118SendPackets|

  00000			 AREA	 |.pdata|, PDATA
|$T54779| DCD	|$LN6@Smsc9118Se@2|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Smsc9118SendPackets| PROC

; 3893 : {

  00000		 |$LN6@Smsc9118Se@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M54776|
  00004	e1a04002	 mov         r4, r2
  00008	e3500000	 cmp         r0, #0

; 3894 : 	PSMSC9118_ADAPTER const pAdapter = (PSMSC9118_ADAPTER)(hMiniportAdapterContext);
; 3895 : 
; 3896 : 	SMSC_TRACE0(DBG_TX,"+Smsc9118SendPackets\r\n");
; 3897 : 	SMSC_ASSERT(ppPacketArray);
; 3898 : 
; 3899 : 	SMSC_TRACE1(DBG_TX,"uiNumberOfPackets = %d\r\n", uiNumberOfPackets);
; 3900 : 
; 3901 : 	if (pAdapter == (PSMSC9118_ADAPTER)NULL)
; 3902 : 	{
; 3903 : 		SMSC_TRACE0(DBG_TX,"Invalid Adapter pointer\r\n");
; 3904 : 		return;
; 3905 : 	}
; 3906 : 
; 3907 : #ifdef	TRACE_BUFFER
; 3908 : 	dwTxReported += (DWORD)uiNumberOfPackets;

  0000c	159fe014	 ldrne       lr, [pc, #0x14]

; 3909 : #endif
; 3910 : 
; 3911 : 	Smsc9118TransmitPackets(pAdapter, ppPacketArray, uiNumberOfPackets);

  00010	159e3000	 ldrne       r3, [lr]
  00014	10833004	 addne       r3, r3, r4
  00018	158e3000	 strne       r3, [lr]
  0001c	1b000000	 blne        Smsc9118TransmitPackets

; 3912 : 
; 3913 : 	SMSC_TRACE0(DBG_TX,"-Smsc9118SendPackets\r\n");
; 3914 : 
; 3915 : 	return;
; 3916 : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$LN7@Smsc9118Se@2|
  00028		 |$LN8@Smsc9118Se@2|
  00028	00000000	 DCD         |dwTxReported|
  0002c		 |$M54777|

			 ENDP  ; |Smsc9118SendPackets|

	EXPORT	|HandlerPmeISR|
	IMPORT	|Lan_SetMiiRegW|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54827| DCD	|$LN35@HandlerPme|
	DCD	0x40004301
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HandlerPmeISR| PROC

; 4056 : {

  00000		 |$LN35@HandlerPme|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M54824|
  00004	e1a04000	 mov         r4, r0

; 4057 : 	DWORD dw, dwRegVal;
; 4058 : 	const DWORD dwLanBase = pAdapter->lan9118_data.dwLanBase;
; 4059 : 
; 4060 : 	dw = GetRegDW(dwLanBase, PMT_CTRL);
; 4061 : 
; 4062 : 	//
; 4063 : 	// D1 -> D0
; 4064 : 	//
; 4065 : 	if ((pAdapter->CurrentPowerState == NdisDeviceStateD1) && 
; 4066 : 		((dw&PMT_CTRL_WUPS_) == PMT_CTRL_WUPS_WOL_))

  00008	e2843a01	 add         r3, r4, #1, 20
  0000c	e5933b80	 ldr         r3, [r3, #0xB80]
  00010	e5945008	 ldr         r5, [r4, #8]
  00014	e3a07802	 mov         r7, #2, 16
  00018	e3530002	 cmp         r3, #2
  0001c	e5956084	 ldr         r6, [r5, #0x84]
  00020	1a000019	 bne         |$LN7@HandlerPme|
  00024	e2063030	 and         r3, r6, #0x30
  00028	e3530020	 cmp         r3, #0x20
  0002c	1a000016	 bne         |$LN7@HandlerPme|

; 4067 : 	{
; 4068 : 
; 4069 : 		//Device is in D1 and D1->D0 event occurred. Wake up the device.
; 4070 : 		if (Wakeup9118(pAdapter) == TRUE) 

  00030	eb000000	 bl          Wakeup9118
  00034	e3500001	 cmp         r0, #1
  00038	1a000013	 bne         |$LN7@HandlerPme|

; 4071 : 		{
; 4072 : 			dwRegVal = Lan_GetMacRegDW(dwLanBase, WUCSR);

  0003c	e3a0100c	 mov         r1, #0xC
  00040	e1a00005	 mov         r0, r5
  00044	eb000000	 bl          Lan_GetMacRegDW

; 4073 : 
; 4074 : 			//Disable WUEN/MPEN in WUCSR.
; 4075 : 			if (pAdapter->dwWakeUpSource & (DWORD)NDIS_PNP_WAKE_UP_PATTERN_MATCH) 

  00048	e2843a01	 add         r3, r4, #1, 20
  0004c	e5933ad0	 ldr         r3, [r3, #0xAD0]

; 4076 : 			{
; 4077 : 				dwRegVal &= ~WUCSR_WAKE_EN_;
; 4078 : 			}
; 4079 : 
; 4080 : 			if (pAdapter->dwWakeUpSource & (DWORD)NDIS_PNP_WAKE_UP_MAGIC_PACKET)
; 4081 : 			{
; 4082 : 				dwRegVal &= ~WUCSR_MPEN_;
; 4083 : 			}
; 4084 : 
; 4085 : 			Lan_SetMacRegDW(dwLanBase, WUCSR, dwRegVal);

  00050	e3a0100c	 mov         r1, #0xC
  00054	e3130002	 tst         r3, #2
  00058	13c00004	 bicne       r0, r0, #4
  0005c	e3130001	 tst         r3, #1
  00060	13c00002	 bicne       r0, r0, #2
  00064	e1a02000	 mov         r2, r0
  00068	e1a00005	 mov         r0, r5
  0006c	eb000000	 bl          Lan_SetMacRegDW

; 4086 : 
; 4087 : 
; 4088 : 			// Clear WUPS in PMT_CTRL
; 4089 : 			SetRegDW(dwLanBase, PMT_CTRL, GetRegDW(dwLanBase, PMT_CTRL) | PMT_CTRL_WUPS_);

  00070	e5953084	 ldr         r3, [r5, #0x84]

; 4090 : 			// Clear PME_INT
; 4091 : 			SetRegDW(dwLanBase, INT_STS, INT_STS_PME_INT_);
; 4092 : 
; 4093 : 			//Disable PME interrupt
; 4094 : 			dw = GetRegDW(dwLanBase, INT_EN);

  00074	e3833030	 orr         r3, r3, #0x30
  00078	e5853084	 str         r3, [r5, #0x84]
  0007c	e5857058	 str         r7, [r5, #0x58]
  00080	e595305c	 ldr         r3, [r5, #0x5C]

; 4095 : 			dw &= ~INT_EN_PME_INT_EN_;

  00084	e3c36802	 bic         r6, r3, #2, 16

; 4096 : 			SetRegDW(dwLanBase, INT_EN, dw);

  00088	e585605c	 str         r6, [r5, #0x5C]
  0008c		 |$LN7@HandlerPme|

; 4097 : 		}
; 4098 : 		else 
; 4099 : 		{
; 4100 : 			SMSC_WARNING0("Failed! at Wakeup9118()\r\n");
; 4101 : 		}
; 4102 : 	}
; 4103 : 
; 4104 : 	//
; 4105 : 	// D2 -> D0
; 4106 : 	//
; 4107 : 	if ((pAdapter->CurrentPowerState == NdisDeviceStateD2) && 
; 4108 : 		((dw&PMT_CTRL_WUPS_) == PMT_CTRL_WUPS_ED_))

  0008c	e2843a01	 add         r3, r4, #1, 20
  00090	e5933b80	 ldr         r3, [r3, #0xB80]
  00094	e3530003	 cmp         r3, #3
  00098	1a000019	 bne         |$LN31@HandlerPme|
  0009c	e2063030	 and         r3, r6, #0x30
  000a0	e3530010	 cmp         r3, #0x10
  000a4	1a000016	 bne         |$LN31@HandlerPme|

; 4109 : 	{
; 4110 : 		//Device is in D2 and D1->D0 event occurred. Wake up the device.
; 4111 : 		if (Wakeup9118(pAdapter) != TRUE) 

  000a8	e1a00004	 mov         r0, r4
  000ac	eb000000	 bl          Wakeup9118
  000b0	e3500001	 cmp         r0, #1
  000b4	1a000012	 bne         |$LN31@HandlerPme|

; 4112 : 		{
; 4113 : 			SMSC_WARNING0("Failed! at Wakeup9118()\r\n");
; 4114 : 		}
; 4115 : 		else
; 4116 : 		{
; 4117 : 			// Clear EDPWRDOWN
; 4118 : 			AdapterWritePhy(PHY_MODE_CTRL_STS, AdapterReadPhy(PHY_MODE_CTRL_STS) & ~MODE_CTRL_STS_EDPWRDOWN_);

  000b8	e5d41020	 ldrb        r1, [r4, #0x20]
  000bc	e5940008	 ldr         r0, [r4, #8]
  000c0	e3a02011	 mov         r2, #0x11
  000c4	eb000000	 bl          Lan_GetMiiRegW
  000c8	e3a03cdf	 mov         r3, #0xDF, 24
  000cc	e5d41020	 ldrb        r1, [r4, #0x20]
  000d0	e38330ff	 orr         r3, r3, #0xFF
  000d4	e1a02800	 mov         r2, r0, lsl #16
  000d8	e5940008	 ldr         r0, [r4, #8]
  000dc	e0033822	 and         r3, r3, r2, lsr #16
  000e0	e3a02011	 mov         r2, #0x11
  000e4	eb000000	 bl          Lan_SetMiiRegW

; 4119 : 
; 4120 : 			// Clear WUPS in PMT_CTRL
; 4121 : 			SetRegDW(dwLanBase, PMT_CTRL, GetRegDW(dwLanBase, PMT_CTRL) | PMT_CTRL_WUPS_);

  000e8	e5953084	 ldr         r3, [r5, #0x84]

; 4122 : 			// Clear PME_INT
; 4123 : 			SetRegDW(dwLanBase, INT_STS, INT_STS_PME_INT_);
; 4124 : 
; 4125 : 			//Disable PME interrupt
; 4126 : 			dw=GetRegDW(dwLanBase, INT_EN);

  000ec	e3833030	 orr         r3, r3, #0x30
  000f0	e5853084	 str         r3, [r5, #0x84]
  000f4	e5857058	 str         r7, [r5, #0x58]
  000f8	e595305c	 ldr         r3, [r5, #0x5C]

; 4127 : 			dw&=~INT_EN_PME_INT_EN_;

  000fc	e3c33802	 bic         r3, r3, #2, 16

; 4128 : 			SetRegDW(dwLanBase, INT_EN, dw);

  00100	e585305c	 str         r3, [r5, #0x5C]
  00104		 |$LN31@HandlerPme|

; 4129 : 		}
; 4130 : 
; 4131 : 	}
; 4132 : }

  00104	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00108	e12fff1e	 bx          lr
  0010c		 |$M54825|

			 ENDP  ; |HandlerPmeISR|

	EXPORT	|Smsc9118Isr|
	IMPORT	|Lan_ClearInterruptStatus|
	IMPORT	|Lan_GetInterruptStatus|
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T54994| DCD	|$LN88@Smsc9118Is|
	DCD	0x4000be01
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Smsc9118Isr| PROC

; 4244 : {

  00000		 |$LN88@Smsc9118Is|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M54991|
  00004	e1a04002	 mov         r4, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a07000	 mov         r7, r0

; 4245 : 	SMSC9118_ADAPTER * const pAdapter = ((PSMSC9118_ADAPTER)pContext);
; 4246 : 	DWORD dw, IntStatus, dwIntEn;
; 4247 : 
; 4248 :     SMSC_TRACE0(DBG_ISR,"+Smsc9118Isr\r\n");
; 4249 : 
; 4250 : 	SET_GPIO(pAdapter->lan9118_data.dwLanBase, GPIO4);
; 4251 : 
; 4252 : 	dw = GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG);

  00010	e5943008	 ldr         r3, [r4, #8]
  00014	e5933054	 ldr         r3, [r3, #0x54]

; 4253 : 	SMSC_ASSERT(!(dw&INT_CFG_IRQ_RESERVED_));
; 4254 : 
; 4255 : #ifdef	SMSC_DIRECT_INTR
; 4256 : 	// Disable 9118 global Interrupt
; 4257 : 	SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG, 
; 4258 : 			GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG) &
; 4259 : 			~INT_CFG_IRQ_EN_);
; 4260 : #endif
; 4261 : 
; 4262 : 	if (dw & INT_CFG_IRQ_INT_)

  00018	e3130a01	 tst         r3, #1, 20
  0001c	0a0000b0	 beq         |$LN19@Smsc9118Is|

; 4263 : 	{
; 4264 : 		IntStatus = Lan_GetInterruptStatus((PLAN9118_DATA)&(pAdapter->lan9118_data));

  00020	e2840008	 add         r0, r4, #8
  00024	eb000000	 bl          Lan_GetInterruptStatus

; 4265 : 		dwIntEn = GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_EN);

  00028	e5943008	 ldr         r3, [r4, #8]

; 4266 : 		IntStatus &= dwIntEn;
; 4267 : 
; 4268 : 		if (pAdapter->f100RxEnWorkaroundDone == 0L)

  0002c	e2848c1a	 add         r8, r4, #0x1A, 24
  00030	e593305c	 ldr         r3, [r3, #0x5C]
  00034	e598e0cc	 ldr         lr, [r8, #0xCC]
  00038	e0035000	 and         r5, r3, r0
  0003c	e35e0000	 cmp         lr, #0

; 4269 : 		{
; 4270 : 			MacRxEnWorkaround(pAdapter);

  00040	01a00004	 moveq       r0, r4
  00044	0b000000	 bleq        MacRxEnWorkaround

; 4271 : 		}
; 4272 : 
; 4273 : 		if (IntStatus & INT_STS_RSFL_)

  00048	e3150008	 tst         r5, #8
  0004c	0a000004	 beq         |$LN26@Smsc9118Is|

; 4274 : 		{
; 4275 : 			HandlerRxISR((PSMSC9118_ADAPTER)pAdapter);

  00050	e1a00004	 mov         r0, r4
  00054	eb000000	 bl          HandlerRxISR

; 4276 : 			// Clear the RSFL interrupt after processing packets.
; 4277 : 			SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_STS, INT_STS_RSFL_);

  00058	e5943008	 ldr         r3, [r4, #8]
  0005c	e3a02008	 mov         r2, #8
  00060	e5832058	 str         r2, [r3, #0x58]
  00064		 |$LN26@Smsc9118Is|

; 4278 : 		}
; 4279 : 
; 4280 : 		if (IntStatus & INT_STS_TDFA_)

  00064	e3a0a001	 mov         r10, #1
  00068	e3150c02	 tst         r5, #2, 24
  0006c	0a00000a	 beq         |$LN31@Smsc9118Is|

; 4281 : 		{
; 4282 : 			// Clear the TDFA interrupt STS.
; 4283 : 			SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_STS, INT_STS_TDFA_);

  00070	e5943008	 ldr         r3, [r4, #8]
  00074	e3a02c02	 mov         r2, #2, 24

; 4284 : 			HandlerTxISR((PSMSC9118_ADAPTER)pAdapter);

  00078	e2841a01	 add         r1, r4, #1, 20
  0007c	e5832058	 str         r2, [r3, #0x58]
  00080	e5942008	 ldr         r2, [r4, #8]
  00084	e3a030ff	 mov         r3, #0xFF
  00088	e58139bc	 str         r3, [r1, #0x9BC]
  0008c	e5923068	 ldr         r3, [r2, #0x68]
  00090	e38334ff	 orr         r3, r3, #0xFF, 8
  00094	e5823068	 str         r3, [r2, #0x68]
  00098	e5c1a9c3	 strb        r10, [r1, #0x9C3]
  0009c		 |$LN31@Smsc9118Is|

; 4285 : 		}
; 4286 : 
; 4287 : 		if (IntStatus & INT_STS_TDFU_)

  0009c	e3150b02	 tst         r5, #2, 22

; 4288 : 		{
; 4289 : 			SetRegDW(pAdapter->lan9118_data.dwLanBase, TX_CFG, 
; 4290 : 					GetRegDW(pAdapter->lan9118_data.dwLanBase, TX_CFG) | TX_CFG_TXD_DUMP_ | TX_CFG_TXS_DUMP_);

  000a0	15942008	 ldrne       r2, [r4, #8]

; 4291 : 			SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_STS, INT_STS_TDFU_);

  000a4	13a01b02	 movne       r1, #2, 22
  000a8	15923070	 ldrne       r3, [r2, #0x70]
  000ac	13833903	 orrne       r3, r3, #3, 18
  000b0	15823070	 strne       r3, [r2, #0x70]
  000b4	15943008	 ldrne       r3, [r4, #8]
  000b8	15831058	 strne       r1, [r3, #0x58]

; 4292 : 		}
; 4293 : 
; 4294 : 		if (IntStatus & INT_STS_GPT_INT_)

  000bc	e3150702	 tst         r5, #2, 14
  000c0	0a00000b	 beq         |$LN46@Smsc9118Is|

; 4295 : 		{
; 4296 : 			Lan_ClearInterruptStatus(&pAdapter->lan9118_data, INT_STS_GPT_INT_);

  000c4	e3a01702	 mov         r1, #2, 14
  000c8	e2840008	 add         r0, r4, #8
  000cc	eb000000	 bl          Lan_ClearInterruptStatus

; 4297 : 			HandlerGptISR((PSMSC9118_ADAPTER)pAdapter);

  000d0	e5941008	 ldr         r1, [r4, #8]
  000d4	e3e03cff	 mvn         r3, #0xFF, 24
  000d8	e22320ff	 eor         r2, r3, #0xFF
  000dc	e591308c	 ldr         r3, [r1, #0x8C]
  000e0	e1a00004	 mov         r0, r4
  000e4	e0033002	 and         r3, r3, r2
  000e8	e3833e7d	 orr         r3, r3, #0x7D, 28
  000ec	e581308c	 str         r3, [r1, #0x8C]
  000f0	eb000000	 bl          CheckPhyStatus
  000f4		 |$LN46@Smsc9118Is|

; 4298 : 		}
; 4299 : 
; 4300 : 		if (IntStatus & INT_STS_PME_INT_)

  000f4	e3150802	 tst         r5, #2, 16

; 4301 : 		{
; 4302 : 			HandlerPmeISR((PSMSC9118_ADAPTER)pAdapter);

  000f8	11a00004	 movne       r0, r4
  000fc	1b000000	 blne        HandlerPmeISR

; 4303 : 		}
; 4304 : 
; 4305 : 		if (IntStatus & INT_STS_RXSTOP_INT_)

  00100	e3150401	 tst         r5, #1, 8
  00104	0a000004	 beq         |$LN12@Smsc9118Is|

; 4306 : 		{
; 4307 : 			Lan_ClearInterruptStatus(&pAdapter->lan9118_data, INT_STS_RXSTOP_INT_);

  00108	e3a01401	 mov         r1, #1, 8
  0010c	e2840008	 add         r0, r4, #8
  00110	eb000000	 bl          Lan_ClearInterruptStatus

; 4308 : 			HandlerRxStopISR((PSMSC9118_ADAPTER)pAdapter);

  00114	e1a00004	 mov         r0, r4
  00118	eb000000	 bl          HandlerRxStopISR
  0011c		 |$LN12@Smsc9118Is|

; 4309 : 		}
; 4310 : 
; 4311 : 		if (IntStatus & INT_STS_RXE_)

  0011c	e3150901	 tst         r5, #1, 18
  00120	0a000026	 beq         |$LN11@Smsc9118Is|

; 4312 : 		{
; 4313 : 			RxForceReceiverDiscard(pContext);

  00124	e5940008	 ldr         r0, [r4, #8]
  00128	e3a01001	 mov         r1, #1
  0012c	eb000000	 bl          Lan_GetMacRegDW
  00130	e1a09000	 mov         r9, r0
  00134	e5940008	 ldr         r0, [r4, #8]
  00138	e3c92004	 bic         r2, r9, #4
  0013c	e3a01001	 mov         r1, #1
  00140	eb000000	 bl          Lan_SetMacRegDW
  00144	e5941008	 ldr         r1, [r4, #8]
  00148	e3a02000	 mov         r2, #0
  0014c	e5913064	 ldr         r3, [r1, #0x64]
  00150		 |$LL59@Smsc9118Is|
  00150	e5913058	 ldr         r3, [r1, #0x58]
  00154	e3130401	 tst         r3, #1, 8
  00158	1a000002	 bne         |$LN82@Smsc9118Is|
  0015c	e2822001	 add         r2, r2, #1
  00160	e3520064	 cmp         r2, #0x64
  00164	bafffff9	 blt         |$LL59@Smsc9118Is|
  00168		 |$LN82@Smsc9118Is|
  00168	e3a03401	 mov         r3, #1, 8
  0016c	e5813058	 str         r3, [r1, #0x58]
  00170	e5943008	 ldr         r3, [r4, #8]
  00174	e3a01902	 mov         r1, #2, 18
  00178	e3a02000	 mov         r2, #0
  0017c	e583106c	 str         r1, [r3, #0x6C]
  00180	e5940008	 ldr         r0, [r4, #8]
  00184	e5903064	 ldr         r3, [r0, #0x64]
  00188		 |$LL55@Smsc9118Is|
  00188	e590306c	 ldr         r3, [r0, #0x6C]
  0018c	e3130902	 tst         r3, #2, 18
  00190	0a000002	 beq         |$LN83@Smsc9118Is|
  00194	e2822001	 add         r2, r2, #1
  00198	e3520064	 cmp         r2, #0x64
  0019c	bafffff9	 blt         |$LL55@Smsc9118Is|
  001a0		 |$LN83@Smsc9118Is|
  001a0	e3892004	 orr         r2, r9, #4
  001a4	e3a01001	 mov         r1, #1
  001a8	eb000000	 bl          Lan_SetMacRegDW
  001ac	e5943008	 ldr         r3, [r4, #8]

; 4314 : 			Lan_ClearInterruptStatus(&pAdapter->lan9118_data, INT_STS_RXE_);

  001b0	e3a01901	 mov         r1, #1, 18
  001b4	e2840008	 add         r0, r4, #8
  001b8	e5933064	 ldr         r3, [r3, #0x64]
  001bc	eb000000	 bl          Lan_ClearInterruptStatus
  001c0		 |$LN11@Smsc9118Is|

; 4315 : #ifdef DEBUG
; 4316 : 			RETAILMSG(1, (TEXT("Smsc9118Isr: INT_STS_RXE_ handled !!!\r\n")));
; 4317 : #endif
; 4318 : 		}
; 4319 : 
; 4320 : 		if (IntStatus & INT_STS_TXE_)

  001c0	e3150a02	 tst         r5, #2, 20

; 4321 : 		{
; 4322 : 			/* Transmitter error.  Transmit stops because the
; 4323 : 			 * TX_FIFOs (TXS_DUMP_:15, TXD_DUMP_:14, TX_ON_:1)
; 4324 : 			 * became misaligned.  There should not be any
; 4325 : 			 * need to wait afterwards.
; 4326 : 			 */
; 4327 : 			SetRegDW(pAdapter->lan9118_data.dwLanBase,TX_CFG,
; 4328 : 				((1<<15)|(1<<14)|(1<<1)));

  001c4	15942008	 ldrne       r2, [r4, #8]
  001c8	13a03903	 movne       r3, #3, 18
  001cc	13833002	 orrne       r3, r3, #2

; 4329 : 			Lan_ClearInterruptStatus(&pAdapter->lan9118_data, INT_STS_TXE_);

  001d0	13a01a02	 movne       r1, #2, 20
  001d4	12840008	 addne       r0, r4, #8
  001d8	15823070	 strne       r3, [r2, #0x70]
  001dc	1b000000	 blne        Lan_ClearInterruptStatus

; 4330 : #ifdef DEBUG
; 4331 : 			RETAILMSG(1, (TEXT("Smsc9118Isr: INT_STS_TXE_ handled !!!\r\n")));
; 4332 : #endif
; 4333 : 		}
; 4334 : 
; 4335 : 		if (IntStatus & INT_STS_RDFO_)

  001e0	e3150040	 tst         r5, #0x40
  001e4	0a000004	 beq         |$LN9@Smsc9118Is|

; 4336 : 		{
; 4337 : 			Lan_ClearInterruptStatus(&pAdapter->lan9118_data, INT_STS_RDFO_);

  001e8	e3a01040	 mov         r1, #0x40
  001ec	e2840008	 add         r0, r4, #8
  001f0	eb000000	 bl          Lan_ClearInterruptStatus

; 4338 : 			pAdapter->RxOverRun = (BOOLEAN)TRUE;

  001f4	e2843a01	 add         r3, r4, #1, 20
  001f8	e5c3a9c7	 strb        r10, [r3, #0x9C7]
  001fc		 |$LN9@Smsc9118Is|

; 4339 : 		}
; 4340 : 
; 4341 : 		if (IntStatus & INT_STS_SW_INT_)

  001fc	e3150102	 tst         r5, #2, 2
  00200	0a000005	 beq         |$LN8@Smsc9118Is|

; 4342 : 		{
; 4343 : 			Lan_DisableInterrupt((PLAN9118_DATA)&pAdapter->lan9118_data, INT_EN_SW_INT_EN_);

  00204	e3a01102	 mov         r1, #2, 2
  00208	e2840008	 add         r0, r4, #8
  0020c	eb000000	 bl          Lan_DisableInterrupt

; 4344 : 			Lan_ClearInterruptStatus(&pAdapter->lan9118_data, INT_STS_SW_INT_);

  00210	e3a01102	 mov         r1, #2, 2
  00214	e2840008	 add         r0, r4, #8
  00218	eb000000	 bl          Lan_ClearInterruptStatus
  0021c		 |$LN8@Smsc9118Is|

; 4345 : 		}
; 4346 : 
; 4347 : 		if (pAdapter->f100RxEnWorkaroundDone == 0L)

  0021c	e59830cc	 ldr         r3, [r8, #0xCC]
  00220	e3530000	 cmp         r3, #0
  00224	1a00000f	 bne         |$LN5@Smsc9118Is|

; 4348 : 		{
; 4349 : 			if (GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_STS) & INT_STS_RXSTOP_INT_)

  00228	e5943008	 ldr         r3, [r4, #8]
  0022c	e5933058	 ldr         r3, [r3, #0x58]
  00230	e3130401	 tst         r3, #1, 8
  00234	0a000009	 beq         |$LN6@Smsc9118Is|

; 4350 : 			{
; 4351 : 				UpdateFilterAndMacReg(pAdapter);

  00238	e1a00004	 mov         r0, r4
  0023c	eb000000	 bl          UpdateFilterAndMacReg

; 4352 : 				// Enable RX 
; 4353 : 				EnableMacRxEn(pAdapter);

  00240	e1a00004	 mov         r0, r4
  00244	eb000000	 bl          EnableMacRxEn

; 4354 : 				EnableCPUInt();

  00248	eb000000	 bl          EnableCPUInt

; 4355 : 				// Wait for at least 64uSec after enabling MAC_CR_RXEN
; 4356 : 				DelayUsingFreeRun(pAdapter, 64L);

  0024c	e3a01040	 mov         r1, #0x40
  00250	e1a00004	 mov         r0, r4
  00254	eb000000	 bl          DelayUsingFreeRun

; 4357 : 				pAdapter->f100RxEnWorkaroundDone = 1L;

  00258	e588a0cc	 str         r10, [r8, #0xCC]

; 4358 : 			}
; 4359 : 			else

  0025c	ea000001	 b           |$LN5@Smsc9118Is|
  00260		 |$LN6@Smsc9118Is|

; 4360 : 			{
; 4361 : 				pAdapter->SWDPCNeeded = (BOOLEAN)TRUE;

  00260	e2843a01	 add         r3, r4, #1, 20
  00264	e5c3a9c5	 strb        r10, [r3, #0x9C5]
  00268		 |$LN5@Smsc9118Is|

; 4362 : 			}
; 4363 : 		}
; 4364 : 
; 4365 : 		// The interrupt is from 9118, schedule a DPC if needed.
; 4366 : 		if ((pAdapter->RxDPCNeeded == (BOOLEAN)TRUE) || 
; 4367 : 			(pAdapter->TxDPCNeeded == (BOOLEAN)TRUE) ||
; 4368 :     		(pAdapter->PhyDPCNeeded == (BOOLEAN)TRUE)||
; 4369 :     		(pAdapter->SWDPCNeeded == (BOOLEAN)TRUE) ||
; 4370 : 			(pAdapter->RxStopDPCNeeded == (BOOLEAN)TRUE))

  00268	e2843a01	 add         r3, r4, #1, 20
  0026c	e5d339c2	 ldrb        r3, [r3, #0x9C2]
  00270	e3530001	 cmp         r3, #1
  00274	0a000012	 beq         |$LN3@Smsc9118Is|
  00278	e2843a01	 add         r3, r4, #1, 20
  0027c	e5d339c3	 ldrb        r3, [r3, #0x9C3]
  00280	e3530001	 cmp         r3, #1
  00284	0a00000e	 beq         |$LN3@Smsc9118Is|
  00288	e2843a01	 add         r3, r4, #1, 20
  0028c	e5d339c4	 ldrb        r3, [r3, #0x9C4]
  00290	e3530001	 cmp         r3, #1
  00294	0a00000a	 beq         |$LN3@Smsc9118Is|
  00298	e2843a01	 add         r3, r4, #1, 20
  0029c	e5d339c5	 ldrb        r3, [r3, #0x9C5]
  002a0	e3530001	 cmp         r3, #1
  002a4	12843a01	 addne       r3, r4, #1, 20
  002a8	15d339c6	 ldrneb      r3, [r3, #0x9C6]
  002ac	13530001	 cmpne       r3, #1

; 4375 : 		}
; 4376 : 		else
; 4377 : 		{
; 4378 : 			*pbInterruptRecognized = (BOOLEAN)TRUE;
; 4379 : 			*pbQueueDpc = (BOOLEAN)FALSE;

  002b0	13a03000	 movne       r3, #0
  002b4	15c7a000	 strneb      r10, [r7]
  002b8	15c63000	 strneb      r3, [r6]

; 4387 : 	}
; 4388 : 
; 4389 : #ifdef	SMSC_DIRECT_INTR
; 4390 : 	// Reenable GPIO Interrupt 
; 4391 : 	PlatformEnableGpioInterrupt();
; 4392 : 
; 4393 : 	//NdisMSleep(1);		// 1uSec Delay
; 4394 : 	
; 4395 : 	// ReEnable global Interrupt
; 4396 : 	SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG, 
; 4397 : 			GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG) |
; 4398 : 			INT_CFG_IRQ_EN_ | INT_DEAS);
; 4399 : #endif
; 4400 : 
; 4401 : 	CLEAR_GPIO(pAdapter->lan9118_data.dwLanBase, GPIO4);
; 4402 : 
; 4403 :     SMSC_TRACE0(DBG_ISR,"-Smsc9118Isr\r\n");
; 4404 : 
; 4405 : 	return;
; 4406 : }

  002bc	18bd47f0	 ldmneia     sp!, {r4 - r10, lr}
  002c0	112fff1e	 bxne        lr
  002c4		 |$LN3@Smsc9118Is|

; 4371 : 		{
; 4372 : 			*pbInterruptRecognized = (BOOLEAN)TRUE;

  002c4	e5c7a000	 strb        r10, [r7]

; 4373 : 			*pbQueueDpc = (BOOLEAN)TRUE;
; 4374 : 			pAdapter->RxDPCNeeded = pAdapter->TxDPCNeeded = (BOOLEAN)FALSE;

  002c8	e2843a01	 add         r3, r4, #1, 20
  002cc	e3a02000	 mov         r2, #0
  002d0	e5c6a000	 strb        r10, [r6]
  002d4	e5c329c3	 strb        r2, [r3, #0x9C3]
  002d8	e5c329c2	 strb        r2, [r3, #0x9C2]

; 4387 : 	}
; 4388 : 
; 4389 : #ifdef	SMSC_DIRECT_INTR
; 4390 : 	// Reenable GPIO Interrupt 
; 4391 : 	PlatformEnableGpioInterrupt();
; 4392 : 
; 4393 : 	//NdisMSleep(1);		// 1uSec Delay
; 4394 : 	
; 4395 : 	// ReEnable global Interrupt
; 4396 : 	SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG, 
; 4397 : 			GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG) |
; 4398 : 			INT_CFG_IRQ_EN_ | INT_DEAS);
; 4399 : #endif
; 4400 : 
; 4401 : 	CLEAR_GPIO(pAdapter->lan9118_data.dwLanBase, GPIO4);
; 4402 : 
; 4403 :     SMSC_TRACE0(DBG_ISR,"-Smsc9118Isr\r\n");
; 4404 : 
; 4405 : 	return;
; 4406 : }

  002dc	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  002e0	e12fff1e	 bx          lr
  002e4		 |$LN19@Smsc9118Is|

; 4380 : 		}
; 4381 : 	}
; 4382 : 	else
; 4383 : 	{
; 4384 : 		// The interrupt is not from 9118. Do not schedule DPC.
; 4385 : 		*pbInterruptRecognized = (BOOLEAN)FALSE;

  002e4	e3a02000	 mov         r2, #0
  002e8	e5c72000	 strb        r2, [r7]

; 4386 : 		*pbQueueDpc = (BOOLEAN)FALSE;

  002ec	e5c62000	 strb        r2, [r6]

; 4387 : 	}
; 4388 : 
; 4389 : #ifdef	SMSC_DIRECT_INTR
; 4390 : 	// Reenable GPIO Interrupt 
; 4391 : 	PlatformEnableGpioInterrupt();
; 4392 : 
; 4393 : 	//NdisMSleep(1);		// 1uSec Delay
; 4394 : 	
; 4395 : 	// ReEnable global Interrupt
; 4396 : 	SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG, 
; 4397 : 			GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG) |
; 4398 : 			INT_CFG_IRQ_EN_ | INT_DEAS);
; 4399 : #endif
; 4400 : 
; 4401 : 	CLEAR_GPIO(pAdapter->lan9118_data.dwLanBase, GPIO4);
; 4402 : 
; 4403 :     SMSC_TRACE0(DBG_ISR,"-Smsc9118Isr\r\n");
; 4404 : 
; 4405 : 	return;
; 4406 : }

  002f0	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  002f4	e12fff1e	 bx          lr
  002f8		 |$M54992|

			 ENDP  ; |Smsc9118Isr|

	EXPORT	|SetPowerState|
	EXPORT	|??_C@_1FE@IFGIKNCL@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@GKKKMGBF@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@IBJNHNBG@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS@| [ DATA ] ; `string'
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\os.h

  00000			 AREA	 |.pdata|, PDATA
|$T55061| DCD	|$LN50@SetPowerSt|
	DCD	0x40008901

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@IFGIKNCL@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "N", 0x0, "d", 0x0, "i", 0x0, "s"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "D"
	DCB	0x0, "3", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@GKKKMGBF@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "N", 0x0, "d", 0x0, "i", 0x0, "s"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "D"
	DCB	0x0, "2", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@IBJNHNBG@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "N", 0x0, "d", 0x0, "i", 0x0, "s"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "D"
	DCB	0x0, "1", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\drivers\smsc9118\smsc9118.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetPowerState| PROC

; 4908 : {

  00000		 |$LN50@SetPowerSt|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M55058|
  00004	e1a04000	 mov         r4, r0

; 4909 : 	DWORD dw;
; 4910 : 	const DWORD dwLanBase = pAdapter->lan9118_data.dwLanBase;

  00008	e5945008	 ldr         r5, [r4, #8]

; 4911 : 	WORD wd;
; 4912 : 
; 4913 : 	//
; 4914 : 	// Set device into D0 mode.
; 4915 : 	//
; 4916 : 	if(PowerState == NdisDeviceStateD0)

  0000c	e3510001	 cmp         r1, #1
  00010	1a00001e	 bne         |$LN10@SetPowerSt|

; 4917 : 	{
; 4918 : 		if (Wakeup9118(pAdapter) != TRUE) 

  00014	eb000000	 bl          Wakeup9118
  00018	e3500001	 cmp         r0, #1
  0001c	1a000016	 bne         |$LN19@SetPowerSt|

; 4919 : 		{
; 4920 : 			SMSC_TRACE0(DBG_WARNING, "Failed! at Wakeup118()\r\n");
; 4921 : 		}
; 4922 : 		else 
; 4923 : 		{
; 4924 : 			if (pAdapter->CurrentPowerState == NdisDeviceStateD3) 

  00020	e2843a01	 add         r3, r4, #1, 20
  00024	e5933b80	 ldr         r3, [r3, #0xB80]
  00028	e3530004	 cmp         r3, #4
  0002c	1a000012	 bne         |$LN19@SetPowerSt|

; 4925 : 			{
; 4926 : 				SetRegDW(dwLanBase, PMT_CTRL, 
; 4927 : 						GetRegDW(dwLanBase, PMT_CTRL) & ~PMT_CTRL_PM_MODE_);

  00030	e5953084	 ldr         r3, [r5, #0x84]

; 4928 : 				AdapterWritePhy(PHY_BCR, AdapterReadPhy(PHY_BCR) & ~PHY_BCR_POWER_DOWN_);

  00034	e3a02000	 mov         r2, #0
  00038	e3c33a03	 bic         r3, r3, #3, 20
  0003c	e5853084	 str         r3, [r5, #0x84]
  00040	e5d41020	 ldrb        r1, [r4, #0x20]
  00044	e5940008	 ldr         r0, [r4, #8]
  00048	eb000000	 bl          Lan_GetMiiRegW
  0004c	e3a03cf7	 mov         r3, #0xF7, 24
  00050	e5d41020	 ldrb        r1, [r4, #0x20]
  00054	e38330ff	 orr         r3, r3, #0xFF
  00058	e1a02800	 mov         r2, r0, lsl #16
  0005c	e5940008	 ldr         r0, [r4, #8]
  00060	e0033822	 and         r3, r3, r2, lsr #16
  00064	e3a02000	 mov         r2, #0
  00068	eb000000	 bl          Lan_SetMiiRegW

; 4929 : 				SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG, 
; 4930 : 					GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG) | INT_CFG_IRQ_EN_);

  0006c	e5942008	 ldr         r2, [r4, #8]
  00070	e5923054	 ldr         r3, [r2, #0x54]
  00074	e3833c01	 orr         r3, r3, #1, 24
  00078	e5823054	 str         r3, [r2, #0x54]
  0007c		 |$LN19@SetPowerSt|

; 4931 : 			}
; 4932 : 		}
; 4933 : 
; 4934 : 		pAdapter->CurrentPowerState = NdisDeviceStateD0;

  0007c	e2843a01	 add         r3, r4, #1, 20
  00080	e3a02001	 mov         r2, #1
  00084	e5832b80	 str         r2, [r3, #0xB80]

; 5052 : 		return;
; 5053 : 	}
; 5054 : }	 

  00088	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN10@SetPowerSt|

; 4935 : 		return;
; 4936 : 	}
; 4937 : 
; 4938 : 	//
; 4939 : 	// Set device into D1 mode.
; 4940 : 	//
; 4941 : 	if( PowerState == NdisDeviceStateD1 &&
; 4942 : 		(pAdapter->dwWakeUpSource & (DWORD)(NDIS_PNP_WAKE_UP_PATTERN_MATCH|NDIS_PNP_WAKE_UP_MAGIC_PACKET)) )

  00090	e3510002	 cmp         r1, #2
  00094	1a000026	 bne         |$LN6@SetPowerSt|
  00098	e2843a01	 add         r3, r4, #1, 20
  0009c	e5933ad0	 ldr         r3, [r3, #0xAD0]
  000a0	e3130003	 tst         r3, #3
  000a4	0a000059	 beq         |$LN1@SetPowerSt|

; 4943 : 	{
; 4944 : 		//
; 4945 : 		// Put device into D1 mode.
; 4946 : 		//
; 4947 : 		Wakeup9118(pAdapter);

  000a8	e1a00004	 mov         r0, r4
  000ac	eb000000	 bl          Wakeup9118

; 4948 : 
; 4949 : 		if (pAdapter->dwWakeUpSource & (DWORD)NDIS_PNP_WAKE_UP_PATTERN_MATCH)

  000b0	e2843a01	 add         r3, r4, #1, 20
  000b4	e5933ad0	 ldr         r3, [r3, #0xAD0]
  000b8	e3130002	 tst         r3, #2

; 4950 : 		{
; 4951 : 			//
; 4952 : 			//Config WUFF
; 4953 : 			//
; 4954 : 			ConfigWUFFReg(pAdapter);

  000bc	11a00004	 movne       r0, r4
  000c0	1b000000	 blne        ConfigWUFFReg

; 4955 : 		}
; 4956 : 
; 4957 : 		//
; 4958 : 		//Clear Remote-Wakeup-Frame-Received(WUFR)/Magic-Packet_Received(MPR).
; 4959 : 		//
; 4960 : 		dw = Lan_GetMacRegDW(dwLanBase, WUCSR);

  000c4	e3a0100c	 mov         r1, #0xC
  000c8	e1a00005	 mov         r0, r5
  000cc	eb000000	 bl          Lan_GetMacRegDW

; 4961 : 		dw &= (~(WUCSR_WUFR_ | WUCSR_MPR_));
; 4962 : 
; 4963 : 		//
; 4964 : 		//Enable WUEN/MPEN in WUCSR.
; 4965 : 		//
; 4966 : 		dw &= (~(WUCSR_WAKE_EN_ | WUCSR_MPEN_));
; 4967 : 		if (pAdapter->dwWakeUpSource & (DWORD)NDIS_PNP_WAKE_UP_PATTERN_MATCH)

  000d0	e2843a01	 add         r3, r4, #1, 20
  000d4	e5933ad0	 ldr         r3, [r3, #0xAD0]
  000d8	e3c02066	 bic         r2, r0, #0x66

; 4968 : 		{
; 4969 : 			dw |= WUCSR_WAKE_EN_;
; 4970 : 		}
; 4971 : 
; 4972 : 		if (pAdapter->dwWakeUpSource & (DWORD)NDIS_PNP_WAKE_UP_MAGIC_PACKET)
; 4973 : 		{
; 4974 : 			dw |= WUCSR_MPEN_;
; 4975 : 		}
; 4976 : 		Lan_SetMacRegDW(dwLanBase, WUCSR, dw);

  000dc	e3a0100c	 mov         r1, #0xC
  000e0	e3130002	 tst         r3, #2
  000e4	13822004	 orrne       r2, r2, #4
  000e8	e3130001	 tst         r3, #1
  000ec	13822002	 orrne       r2, r2, #2
  000f0	e1a00005	 mov         r0, r5
  000f4	eb000000	 bl          Lan_SetMacRegDW

; 4977 : 
; 4978 : 		//
; 4979 : 		//Enable PME interrupt.
; 4980 : 		//
; 4981 : 		Lan_EnableInterrupt(&pAdapter->lan9118_data, INT_EN_PME_INT_EN_);

  000f8	e3a01802	 mov         r1, #2, 16
  000fc	e2840008	 add         r0, r4, #8
  00100	eb000000	 bl          Lan_EnableInterrupt

; 4982 : 		
; 4983 : 		//
; 4984 : 		//Set PME_CTRL to put chip into D1 mode.
; 4985 : 		//
; 4986 : 		//Clear WUPS
; 4987 : 		dw = GetRegDW(dwLanBase, PMT_CTRL);

  00104	e5953084	 ldr         r3, [r5, #0x84]

; 4988 : 		SetRegDW(dwLanBase, PMT_CTRL, dw|PMT_CTRL_WUPS_);
; 4989 : 
; 4990 : 		dw = GetRegDW(dwLanBase, PMT_CTRL)&~PMT_CTRL_PM_MODE_;
; 4991 : 		SetRegDW(dwLanBase, PMT_CTRL, dw|(PMT_CTRL_PM_MODE_WOL_|PMT_CTRL_WOL_EN_));
; 4992 : 
; 4993 : 		pAdapter->CurrentPowerState = NdisDeviceStateD1;
; 4994 : 		SMSC_TRACE0(DBG_POWER, "Device Power State = NdisDeviceStateD1.\r\n");
; 4995 :         RETAILMSG(1, (L"Device Power State = NdisDeviceStateD1.\r\n"));

  00108	e59f0110	 ldr         r0, [pc, #0x110]
  0010c	e3a01002	 mov         r1, #2
  00110	e3833030	 orr         r3, r3, #0x30
  00114	e5853084	 str         r3, [r5, #0x84]
  00118	e5953084	 ldr         r3, [r5, #0x84]
  0011c	e3c33a02	 bic         r3, r3, #2, 20
  00120	e3833c12	 orr         r3, r3, #0x12, 24
  00124		 |$LN47@SetPowerSt|
  00124	e2842a01	 add         r2, r4, #1, 20
  00128	e5853084	 str         r3, [r5, #0x84]
  0012c	e5821b80	 str         r1, [r2, #0xB80]

; 4996 : 		return;

  00130	ea000035	 b           |$LN45@SetPowerSt|
  00134		 |$LN6@SetPowerSt|

; 4997 : 
; 4998 : 	}
; 4999 : 
; 5000 : 
; 5001 : 	//
; 5002 : 	// Set device into D2 mode.
; 5003 : 	//
; 5004 : 	if(PowerState == NdisDeviceStateD2)

  00134	e3510003	 cmp         r1, #3
  00138	1a000018	 bne         |$LN2@SetPowerSt|

; 5005 : 	{
; 5006 : 		//
; 5007 : 		//Put device into D2 mode.
; 5008 : 		//
; 5009 : 		Wakeup9118(pAdapter);

  0013c	e1a00004	 mov         r0, r4
  00140	eb000000	 bl          Wakeup9118

; 5010 : 
; 5011 : 		wd = Lan_GetPhyRegW(dwLanBase, (DWORD)pAdapter->lan9118_data.bPhyAddress, PHY_MODE_CTRL_STS);
; 5012 : 		wd = (WORD)(wd | MODE_CTRL_STS_EDPWRDOWN_);

  00144	e5d41020	 ldrb        r1, [r4, #0x20]
  00148	e3a02011	 mov         r2, #0x11
  0014c	e1a00005	 mov         r0, r5
  00150	eb000000	 bl          Lan_GetMiiRegW
  00154	e1a03800	 mov         r3, r0, lsl #16

; 5013 : 		Lan_SetPhyRegW(dwLanBase, (DWORD)pAdapter->lan9118_data.bPhyAddress, PHY_MODE_CTRL_STS, wd);

  00158	e5d41020	 ldrb        r1, [r4, #0x20]
  0015c	e1a03823	 mov         r3, r3, lsr #16
  00160	e3833a02	 orr         r3, r3, #2, 20
  00164	e3a02011	 mov         r2, #0x11
  00168	e1a00005	 mov         r0, r5
  0016c	eb000000	 bl          Lan_SetMiiRegW

; 5014 : 
; 5015 : 		//Enable PME interrupt.
; 5016 : 		Lan_EnableInterrupt(&pAdapter->lan9118_data, INT_EN_PME_INT_EN_);

  00170	e3a01802	 mov         r1, #2, 16
  00174	e2840008	 add         r0, r4, #8
  00178	eb000000	 bl          Lan_EnableInterrupt

; 5017 : 		
; 5018 : 		//Set PME_CTRL to put chip into D2 mode.
; 5019 : 		//Clear WUPS
; 5020 : 		dw = GetRegDW(dwLanBase, PMT_CTRL);

  0017c	e5953084	 ldr         r3, [r5, #0x84]

; 5021 : 		SetRegDW(dwLanBase, PMT_CTRL, dw | PMT_CTRL_WUPS_);
; 5022 : 
; 5023 : 		dw = GetRegDW(dwLanBase, PMT_CTRL) & ~PMT_CTRL_PM_MODE_;
; 5024 : 		SetRegDW(dwLanBase, PMT_CTRL, dw|(PMT_CTRL_PM_MODE_ED_|PMT_CTRL_ED_EN_));
; 5025 : 
; 5026 : 		pAdapter->CurrentPowerState = NdisDeviceStateD2;
; 5027 : 		SMSC_TRACE0(DBG_POWER, "Device Power State = NdisDeviceStateD2.\r\n");
; 5028 :         RETAILMSG(1, (L"Device Power State = NdisDeviceStateD2.\r\n"));

  00180	e59f0094	 ldr         r0, [pc, #0x94]
  00184	e3a01003	 mov         r1, #3
  00188	e3833030	 orr         r3, r3, #0x30
  0018c	e5853084	 str         r3, [r5, #0x84]
  00190	e5953084	 ldr         r3, [r5, #0x84]
  00194	e3c33a01	 bic         r3, r3, #1, 20
  00198	e3833c21	 orr         r3, r3, #0x21, 24

; 5029 : 		return;

  0019c	eaffffe0	 b           |$LN47@SetPowerSt|
  001a0		 |$LN2@SetPowerSt|

; 5030 : 	}
; 5031 : 
; 5032 : 	//
; 5033 : 	// Set device into D3 mode.
; 5034 : 	//
; 5035 : 	if(PowerState == NdisDeviceStateD3)

  001a0	e3510004	 cmp         r1, #4
  001a4	1a000019	 bne         |$LN1@SetPowerSt|

; 5036 : 	{
; 5037 : 		// This is called when Device is disabled..
; 5038 : 		Wakeup9118(pAdapter);

  001a8	e1a00004	 mov         r0, r4
  001ac	eb000000	 bl          Wakeup9118

; 5039 : 
; 5040 : 		SetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG, 
; 5041 : 			GetRegDW(pAdapter->lan9118_data.dwLanBase, INT_CFG) & ~INT_CFG_IRQ_EN_);

  001b0	e5941008	 ldr         r1, [r4, #8]

; 5042 : 		// 9118 doesn't support D3.
; 5043 : 		// So, when D3 is requested, put 9118 to D2 mode
; 5044 : 		AdapterWritePhy(PHY_BCR, AdapterReadPhy(PHY_BCR) | PHY_BCR_POWER_DOWN_);

  001b4	e3a02000	 mov         r2, #0
  001b8	e5913054	 ldr         r3, [r1, #0x54]
  001bc	e3c33c01	 bic         r3, r3, #1, 24
  001c0	e5813054	 str         r3, [r1, #0x54]
  001c4	e5d41020	 ldrb        r1, [r4, #0x20]
  001c8	e5940008	 ldr         r0, [r4, #8]
  001cc	eb000000	 bl          Lan_GetMiiRegW
  001d0	e1a03800	 mov         r3, r0, lsl #16
  001d4	e5940008	 ldr         r0, [r4, #8]
  001d8	e5d41020	 ldrb        r1, [r4, #0x20]
  001dc	e1a03823	 mov         r3, r3, lsr #16
  001e0	e3833b02	 orr         r3, r3, #2, 22
  001e4	e3a02000	 mov         r2, #0
  001e8	eb000000	 bl          Lan_SetMiiRegW

; 5045 : 
; 5046 : 		dw = GetRegDW(dwLanBase, PMT_CTRL) & (~PMT_CTRL_PM_MODE_|PMT_CTRL_ED_EN_|PMT_CTRL_WOL_EN_);

  001ec	e5953084	 ldr         r3, [r5, #0x84]

; 5047 : 		SetRegDW(dwLanBase, PMT_CTRL, dw|PMT_CTRL_PM_MODE_ED_);
; 5048 : 
; 5049 : 		pAdapter->CurrentPowerState = NdisDeviceStateD3;
; 5050 : 		SMSC_TRACE0(DBG_POWER, "Device Power State = NdisDeviceStateD3.\r\n");
; 5051 :         RETAILMSG(1, (L"Device Power State = NdisDeviceStateD3.\r\n"));

  001f0	e59f0020	 ldr         r0, [pc, #0x20]
  001f4	e3a02004	 mov         r2, #4
  001f8	e3c33a03	 bic         r3, r3, #3, 20
  001fc	e3833a02	 orr         r3, r3, #2, 20
  00200	e5853084	 str         r3, [r5, #0x84]
  00204	e2843a01	 add         r3, r4, #1, 20
  00208	e5832b80	 str         r2, [r3, #0xB80]
  0020c		 |$LN45@SetPowerSt|
  0020c	eb000000	 bl          NKDbgPrintfW
  00210		 |$LN1@SetPowerSt|

; 5052 : 		return;
; 5053 : 	}
; 5054 : }	 

  00210	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00214	e12fff1e	 bx          lr
  00218		 |$LN51@SetPowerSt|
  00218		 |$LN52@SetPowerSt|
  00218	00000000	 DCD         |??_C@_1FE@IFGIKNCL@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS@|
  0021c		 |$LN53@SetPowerSt|
  0021c	00000000	 DCD         |??_C@_1FE@GKKKMGBF@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS@|
  00220		 |$LN54@SetPowerSt|
  00220	00000000	 DCD         |??_C@_1FE@IBJNHNBG@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$DN?$AA?5?$AAN?$AAd?$AAi?$AAs?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS@|
  00224		 |$M55059|

			 ENDP  ; |SetPowerState|

	EXPORT	|Smsc9118Initialize|
	EXPORT	|??_C@_1BC@BLDJMKNP@?$AAT?$AAx?$AA?5?$AAP?$AAI?$AAO?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@IEGKOBE@?$AAT?$AAx?$AA?5?$AAD?$AAM?$AAA?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@BFEFHGFK@?$AAR?$AAx?$AA?5?$AAP?$AAI?$AAO?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@GDKBCJB@?$AAR?$AAx?$AA?5?$AAD?$AAM?$AAA?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@LBPDLMNJ@?$AAI?$AAo?$AAB?$AAa?$AAs?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@BHGDDGNK@?$AAP?$AAh?$AAy?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@INPFDDEP@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@GLDLJBLL@?$AAR?$AAx?$AAD?$AAM?$AAA?$AAM?$AAo?$AAd?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@OPBIAMGO@?$AAT?$AAx?$AAD?$AAM?$AAA?$AAM?$AAo?$AAd?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@DJDONMFE@?$AAL?$AAi?$AAn?$AAk?$AAM?$AAo?$AAd?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@JDCIAHNE@?$AAF?$AAl?$AAo?$AAw?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@HPJEKDKL@?$AAA?$AAu?$AAt?$AAo?$AAM?$AAd?$AAi?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@DAOPMGH@?$AAM?$AAi?$AAn?$AAL?$AAi?$AAn?$AAk?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@NJMIBKBG@?$AAM?$AAi?$AAn?$AAM?$AAa?$AAg?$AAi?$AAc?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@HBOIAFJA@?$AAM?$AAi?$AAn?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NdisMAllocateSharedMemory|
	IMPORT	|DmaInitialize|
	IMPORT	|NdisMRegisterAdapterShutdownHandler|
	IMPORT	|GetLastError|
	IMPORT	|VirtualCopy|
	IMPORT	|VirtualAlloc|
	IMPORT	|NdisCloseConfiguration|
	IMPORT	|NdisReadConfiguration|
	IMPORT	|NdisOpenConfiguration|
	IMPORT	|NdisAllocateMemory|

  00000			 AREA	 |.pdata|, PDATA
|$T55153| DCD	|$LN112@Smsc9118In|
	DCD	0x40023b02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@BLDJMKNP@?$AAT?$AAx?$AA?5?$AAP?$AAI?$AAO?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, " ", 0x0, "P", 0x0, "I", 0x0, "O", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@IEGKOBE@?$AAT?$AAx?$AA?5?$AAD?$AAM?$AAA?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@BFEFHGFK@?$AAR?$AAx?$AA?5?$AAP?$AAI?$AAO?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, " ", 0x0, "P", 0x0, "I", 0x0, "O", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@GDKBCJB@?$AAR?$AAx?$AA?5?$AAD?$AAM?$AAA?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@LBPDLMNJ@?$AAI?$AAo?$AAB?$AAa?$AAs?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AA@| DCB "I"
	DCB	0x0, "o", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@BHGDDGNK@?$AAP?$AAh?$AAy?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AA@| DCB "P"
	DCB	0x0, "h", 0x0, "y", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@INPFDDEP@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, "N", 0x0, "u", 0x0, "m", 0x0, "b"
	DCB	0x0, "e", 0x0, "r", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@GLDLJBLL@?$AAR?$AAx?$AAD?$AAM?$AAA?$AAM?$AAo?$AAd?$AAe?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, "M", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@OPBIAMGO@?$AAT?$AAx?$AAD?$AAM?$AAA?$AAM?$AAo?$AAd?$AAe?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, "M", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@DJDONMFE@?$AAL?$AAi?$AAn?$AAk?$AAM?$AAo?$AAd?$AAe?$AA?$AA@| DCB "L"
	DCB	0x0, "i", 0x0, "n", 0x0, "k", 0x0, "M", 0x0, "o", 0x0, "d"
	DCB	0x0, "e", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@JDCIAHNE@?$AAF?$AAl?$AAo?$AAw?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AA@| DCB "F"
	DCB	0x0, "l", 0x0, "o", 0x0, "w", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@HPJEKDKL@?$AAA?$AAu?$AAt?$AAo?$AAM?$AAd?$AAi?$AAx?$AA?$AA@| DCB "A"
	DCB	0x0, "u", 0x0, "t", 0x0, "o", 0x0, "M", 0x0, "d", 0x0, "i"
	DCB	0x0, "x", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@DAOPMGH@?$AAM?$AAi?$AAn?$AAL?$AAi?$AAn?$AAk?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$AA@| DCB "M"
	DCB	0x0, "i", 0x0, "n", 0x0, "L", 0x0, "i", 0x0, "n", 0x0, "k"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "g", 0x0, "e"
	DCB	0x0, "W", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, "U", 0x0, "p"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@NJMIBKBG@?$AAM?$AAi?$AAn?$AAM?$AAa?$AAg?$AAi?$AAc?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$AA@| DCB "M"
	DCB	0x0, "i", 0x0, "n", 0x0, "M", 0x0, "a", 0x0, "g", 0x0, "i"
	DCB	0x0, "c", 0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e"
	DCB	0x0, "t", 0x0, "W", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, "U"
	DCB	0x0, "p", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@HBOIAFJA@?$AAM?$AAi?$AAn?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$AA@| DCB "M"
	DCB	0x0, "i", 0x0, "n", 0x0, "P", 0x0, "a", 0x0, "t", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "n", 0x0, "W", 0x0, "a", 0x0, "k"
	DCB	0x0, "e", 0x0, "U", 0x0, "p", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Smsc9118Initialize| PROC

; 406  : {

  00000		 |$LN112@Smsc9118In|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd06c	 sub         sp, sp, #0x6C
  00008		 |$M55150|
  00008	e3530000	 cmp         r3, #0
  0000c	e58d3010	 str         r3, [sp, #0x10]
  00010	e58d200c	 str         r2, [sp, #0xC]
  00014	e58d1008	 str         r1, [sp, #8]

; 407  : 	PSMSC9118_ADAPTER pAdapter;
; 408  : 	NDIS_HANDLE hConfigHandle;
; 409  : 	BOOL bResult;
; 410  : 	UINT uiIndex;
; 411  : 	NDIS_STATUS Status;
; 412  : 	NDIS_PHYSICAL_ADDRESS HighestAcceptableMax;
; 413  : 	//ULONG oldKmode;
; 414  : 
; 415  : 	PNDIS_CONFIGURATION_PARAMETER ReturnedValue;
; 416  : 	NDIS_STRING IOAddressStr = IOADDRESS;
; 417  : 	NDIS_STRING PhyAddressStr = PHYADDRESS;
; 418  : 	NDIS_STRING InterruptStr = INTERRUPT;
; 419  : 	NDIS_STRING RxDMAMode = RXDMAMODE;
; 420  : 	NDIS_STRING TxDMAMode = TXDMAMODE;
; 421  : 	NDIS_STRING LinkMode = LINKMODE;
; 422  : 	NDIS_STRING FlowControl = FLOWCONTROL;
; 423  : 	NDIS_STRING AutoMdix = AMDIX;
; 424  :     NDIS_STRING LinkChangeWakeup = MINLINKCHANGEWAKEUP;
; 425  :     NDIS_STRING MagicPacketWakeup = MINMAGICPACKETWAKEUP;

  00018	e59f38c8	 ldr         r3, [pc, #0x8C8]
  0001c	e59f58c0	 ldr         r5, [pc, #0x8C0]
  00020	e59fe8b8	 ldr         lr, [pc, #0x8B8]

; 426  :     NDIS_STRING PatternWakeup = MINPATTERNWAKEUP;

  00024	e58d3048	 str         r3, [sp, #0x48]

; 427  : 
; 428  : 	SMSC_TRACE0(DBG_INIT,"+Smsc9118Initialize\r\n");
; 429  : 
; 430  : 	*OpenErrorStatus = NDIS_STATUS_SUCCESS;

  00028	e3a0301c	 mov         r3, #0x1C
  0002c	e1cd35b6	 strh        r3, [sp, #0x56]
  00030	e3a03014	 mov         r3, #0x14
  00034	e1cd35bc	 strh        r3, [sp, #0x5C]
  00038	e3a03016	 mov         r3, #0x16
  0003c	e1cd35be	 strh        r3, [sp, #0x5E]
  00040	e3a0301e	 mov         r3, #0x1E
  00044	e1cd36b4	 strh        r3, [sp, #0x64]
  00048	e3a03020	 mov         r3, #0x20
  0004c	e1cd36b6	 strh        r3, [sp, #0x66]
  00050	e3a03012	 mov         r3, #0x12
  00054	e1cd32bc	 strh        r3, [sp, #0x2C]
  00058	e3a03014	 mov         r3, #0x14
  0005c	e1cd32be	 strh        r3, [sp, #0x2E]
  00060	e3a03012	 mov         r3, #0x12
  00064	e1cd33b4	 strh        r3, [sp, #0x34]
  00068	e3a03014	 mov         r3, #0x14
  0006c	e1cd33b6	 strh        r3, [sp, #0x36]
  00070	e3a03010	 mov         r3, #0x10
  00074	e1cd31bc	 strh        r3, [sp, #0x1C]
  00078	e3a03012	 mov         r3, #0x12
  0007c	e1cd31be	 strh        r3, [sp, #0x1E]
  00080	e3a03016	 mov         r3, #0x16
  00084	e1cd31b4	 strh        r3, [sp, #0x14]
  00088	e3a03018	 mov         r3, #0x18
  0008c	e1cd31b6	 strh        r3, [sp, #0x16]
  00090	e3a03010	 mov         r3, #0x10
  00094	e1cd32b4	 strh        r3, [sp, #0x24]
  00098	e3a03012	 mov         r3, #0x12
  0009c	e1cd32b6	 strh        r3, [sp, #0x26]
  000a0	e3a03026	 mov         r3, #0x26
  000a4	e1cd33bc	 strh        r3, [sp, #0x3C]
  000a8	e3a03028	 mov         r3, #0x28
  000ac	e1cd33be	 strh        r3, [sp, #0x3E]
  000b0	e3a03028	 mov         r3, #0x28
  000b4	e1cd34b4	 strh        r3, [sp, #0x44]
  000b8	e3a0302a	 mov         r3, #0x2A
  000bc	e1cd34b6	 strh        r3, [sp, #0x46]
  000c0	e59f4814	 ldr         r4, [pc, #0x814]
  000c4	e59f680c	 ldr         r6, [pc, #0x80C]
  000c8	e59f7804	 ldr         r7, [pc, #0x804]
  000cc	e59f87fc	 ldr         r8, [pc, #0x7FC]
  000d0	e59f97f4	 ldr         r9, [pc, #0x7F4]
  000d4	e59fa7ec	 ldr         r10, [pc, #0x7EC]
  000d8	e59fb7e4	 ldr         r11, [pc, #0x7E4]
  000dc	e59f27dc	 ldr         r2, [pc, #0x7DC]
  000e0	e3a03020	 mov         r3, #0x20
  000e4	e1cd34bc	 strh        r3, [sp, #0x4C]
  000e8	e58d5068	 str         r5, [sp, #0x68]
  000ec	e3a0101a	 mov         r1, #0x1A
  000f0	e3a03022	 mov         r3, #0x22
  000f4	e3a05000	 mov         r5, #0
  000f8	e58de058	 str         lr, [sp, #0x58]
  000fc	e1cd15b4	 strh        r1, [sp, #0x54]
  00100	e59d1010	 ldr         r1, [sp, #0x10]
  00104	e1cd34be	 strh        r3, [sp, #0x4E]
  00108	e58d4060	 str         r4, [sp, #0x60]
  0010c	e58d6030	 str         r6, [sp, #0x30]
  00110	e58d7038	 str         r7, [sp, #0x38]
  00114	e58d8020	 str         r8, [sp, #0x20]
  00118	e58d9018	 str         r9, [sp, #0x18]
  0011c	e58da028	 str         r10, [sp, #0x28]
  00120	e58db040	 str         r11, [sp, #0x40]
  00124	e58d2050	 str         r2, [sp, #0x50]
  00128	e5805000	 str         r5, [r0]

; 431  : 
; 432  : 	for (uiIndex = 0U; uiIndex < uiMediumArraySize; uiIndex++)

  0012c	e3a0e000	 mov         lr, #0
  00130	0a000007	 beq         |$LN91@Smsc9118In|

; 406  : {

  00134	e59d200c	 ldr         r2, [sp, #0xC]
  00138		 |$LL87@Smsc9118In|

; 433  : 	{
; 434  : 		if (MediumArray[uiIndex] == NdisMedium802_3) {

  00138	e5923000	 ldr         r3, [r2]
  0013c	e3530000	 cmp         r3, #0
  00140	0a000003	 beq         |$LN91@Smsc9118In|
  00144	e28ee001	 add         lr, lr, #1
  00148	e15e0001	 cmp         lr, r1
  0014c	e2822004	 add         r2, r2, #4
  00150	3afffff8	 bcc         |$LL87@Smsc9118In|
  00154		 |$LN91@Smsc9118In|

; 435  : 			break;
; 436  : 		}
; 437  : 	}
; 438  : 
; 439  : 	if (uiIndex == uiMediumArraySize)

  00154	e15e0001	 cmp         lr, r1
  00158	03a03167	 moveq       r3, #0x67, 2

; 440  : 	{
; 441  : 		SMSC_TRACE0(DBG_INIT,"  No supported media\r\n");
; 442  : 		return (NDIS_STATUS_UNSUPPORTED_MEDIA);

  0015c	03830801	 orreq       r0, r3, #1, 16
  00160	0a0001ce	 beq         |$LN88@Smsc9118In|

; 443  : 	}
; 444  : 
; 445  : 	*puiSelectedMediumIndex = uiIndex;
; 446  : 
; 447  : 	// Allocate adapter context memory.
; 448  : 	HighestAcceptableMax.LowPart = 0xFFFFFFFFUL;		// DWORD
; 449  : 	HighestAcceptableMax.HighPart = -1L;				// LONG
; 450  : 	Status = NdisAllocateMemory ((PVOID *)&pAdapter,
; 451  : 								 sizeof (SMSC9118_ADAPTER),
; 452  : 								 NDIS_ALLOC_FLAG, HighestAcceptableMax);

  00164	e59d4008	 ldr         r4, [sp, #8]
  00168	e3e09000	 mvn         r9, #0
  0016c	e3a06c1b	 mov         r6, #0x1B, 24
  00170	e1a03009	 mov         r3, r9
  00174	e3861098	 orr         r1, r6, #0x98
  00178	e3a02000	 mov         r2, #0
  0017c	e28d0004	 add         r0, sp, #4
  00180	e584e000	 str         lr, [r4]
  00184	e58d9000	 str         r9, [sp]
  00188	eb000000	 bl          NdisAllocateMemory
  0018c	e3500000	 cmp         r0, #0
  00190	e58d0008	 str         r0, [sp, #8]

; 453  : 
; 454  : 	if (Status != NDIS_STATUS_SUCCESS)
; 455  : 	{
; 456  : 		SMSC_TRACE0(DBG_INIT,"  NdisAllocateMemory (SMSC9118_ADAPTER) failed.\r\n");
; 457  : 		return NDIS_STATUS_RESOURCES;

  00194	1a0001bf	 bne         |$LN99@Smsc9118In|

; 458  : 	}
; 459  : 	SMSC_TRACE1(DBG_INIT,"  pAdapter allocated at 0x%x.\r\n", pAdapter);
; 460  : 	NdisZeroMemory (pAdapter, sizeof (SMSC9118_ADAPTER));

  00198	e59d0004	 ldr         r0, [sp, #4]
  0019c	e3862098	 orr         r2, r6, #0x98
  001a0	e3a01000	 mov         r1, #0
  001a4	eb000000	 bl          memset

; 461  : 
; 462  : 	// Read configuration from registry.
; 463  : 	NdisOpenConfiguration (&Status, &hConfigHandle, hConfigurationHandle);

  001a8	e59d2094	 ldr         r2, [sp, #0x94]
  001ac	e28d1010	 add         r1, sp, #0x10
  001b0	e28d0008	 add         r0, sp, #8
  001b4	eb000000	 bl          NdisOpenConfiguration

; 464  : 	if (Status != NDIS_STATUS_SUCCESS)

  001b8	e59d3008	 ldr         r3, [sp, #8]
  001bc	e3530000	 cmp         r3, #0

; 465  : 	{
; 466  : 		NdisFreeMemory(pAdapter, (UINT)sizeof(SMSC9118_ADAPTER), NDIS_ALLOC_FLAG);
; 467  : 		SMSC_TRACE1(DBG_INIT,"  NdisOpenConfiguration failed 0x%x\r\n", Status);
; 468  : 		return NDIS_STATUS_RESOURCES;

  001c0	1a0001b0	 bne         |$LN93@Smsc9118In|

; 469  : 	}
; 470  : 
; 471  :    	pAdapter->ulMaxLookAhead = (ULONG)MAX_LOOKAHEAD;

  001c4	e59d3004	 ldr         r3, [sp, #4]
  001c8	e3a02e5e	 mov         r2, #0x5E, 28

; 472  : 
; 473  : 	//Read flow control flag.
; 474  : 	NdisReadConfiguration(
; 475  : 		&Status,
; 476  : 		&ReturnedValue,
; 477  : 		hConfigHandle,
; 478  : 		&FlowControl,
; 479  : 		NdisParameterHexInteger);

  001cc	e3a07001	 mov         r7, #1
  001d0	e5832150	 str         r2, [r3, #0x150]
  001d4	e59d2010	 ldr         r2, [sp, #0x10]
  001d8	e28d3014	 add         r3, sp, #0x14
  001dc	e28d100c	 add         r1, sp, #0xC
  001e0	e28d0008	 add         r0, sp, #8
  001e4	e58d7000	 str         r7, [sp]
  001e8	eb000000	 bl          NdisReadConfiguration

; 480  : 
; 481  : 	if (Status == NDIS_STATUS_SUCCESS) 

  001ec	e59d3008	 ldr         r3, [sp, #8]
  001f0	e3530000	 cmp         r3, #0
  001f4	1a000007	 bne         |$LN80@Smsc9118In|

; 482  : 	{
; 483  : 		if (ReturnedValue->ParameterData.IntegerData == 1UL) {

  001f8	e59d300c	 ldr         r3, [sp, #0xC]
  001fc	e5933004	 ldr         r3, [r3, #4]
  00200	e3530001	 cmp         r3, #1

; 484  : 			pAdapter->fSwFlowControlEnabled = (BOOLEAN)TRUE;

  00204	e59d3004	 ldr         r3, [sp, #4]
  00208	e2833a01	 add         r3, r3, #1, 20

; 485  : 		}
; 486  : 		else {

  0020c	0a000003	 beq         |$LN100@Smsc9118In|

; 487  : 			pAdapter->fSwFlowControlEnabled = (BOOLEAN)FALSE;

  00210	e5c359c8	 strb        r5, [r3, #0x9C8]

; 488  : 		}
; 489  : 	}
; 490  : 	else

  00214	ea000002	 b           |$LN77@Smsc9118In|
  00218		 |$LN80@Smsc9118In|

; 491  : 	{
; 492  : 		pAdapter->fSwFlowControlEnabled = (BOOLEAN)TRUE; //Defaultly set the flow control on.

  00218	e59d3004	 ldr         r3, [sp, #4]
  0021c	e2833a01	 add         r3, r3, #1, 20
  00220		 |$LN100@Smsc9118In|
  00220	e5c379c8	 strb        r7, [r3, #0x9C8]
  00224		 |$LN77@Smsc9118In|

; 493  : 	}
; 494  : 
; 495  : 	//Read the LinkMode
; 496  : 	NdisReadConfiguration(
; 497  : 		&Status,
; 498  : 		&ReturnedValue,
; 499  : 		hConfigHandle,
; 500  : 		&LinkMode,
; 501  : 		NdisParameterHexInteger);

  00224	e59d2010	 ldr         r2, [sp, #0x10]
  00228	e28d301c	 add         r3, sp, #0x1C
  0022c	e28d100c	 add         r1, sp, #0xC
  00230	e28d0008	 add         r0, sp, #8
  00234	e58d7000	 str         r7, [sp]
  00238	eb000000	 bl          NdisReadConfiguration

; 502  : 
; 503  : 	if (Status == NDIS_STATUS_SUCCESS) {

  0023c	e59d3008	 ldr         r3, [sp, #8]

; 504  : 		pAdapter->LinkMode = (ReturnedValue->ParameterData.IntegerData);
; 505  : 	}
; 506  : 	else {
; 507  : 		pAdapter->LinkMode = LINKMODE_DEFAULT;
; 508  : 	}
; 509  : 
; 510  :    //Read the Auto Mdix Status
; 511  :    NdisReadConfiguration(
; 512  : 		&Status,
; 513  : 		&ReturnedValue,
; 514  : 		hConfigHandle,
; 515  : 		&AutoMdix,
; 516  : 		NdisParameterHexInteger);

  00240	e28d100c	 add         r1, sp, #0xC
  00244	e28d0008	 add         r0, sp, #8
  00248	e3530000	 cmp         r3, #0
  0024c	059d300c	 ldreq       r3, [sp, #0xC]
  00250	e58d7000	 str         r7, [sp]
  00254	05932004	 ldreq       r2, [r3, #4]
  00258	e59d3004	 ldr         r3, [sp, #4]
  0025c	13a0207f	 movne       r2, #0x7F
  00260	e2833a01	 add         r3, r3, #1, 20
  00264	e58321b4	 str         r2, [r3, #0x1B4]
  00268	e59d2010	 ldr         r2, [sp, #0x10]
  0026c	e28d3024	 add         r3, sp, #0x24
  00270	eb000000	 bl          NdisReadConfiguration

; 517  : 
; 518  : 	if (Status == NDIS_STATUS_SUCCESS) 

  00274	e59d3008	 ldr         r3, [sp, #8]
  00278	e3a08003	 mov         r8, #3

; 519  : 
; 520  : 	{
; 521  : 	
; 522  : 		pAdapter->dwAutoMdix = (ReturnedValue->ParameterData.IntegerData);
; 523  : 
; 524  : 	}
; 525  : 	else
; 526  : 	{
; 527  : 		pAdapter->dwAutoMdix = 3UL;
; 528  : 	}
; 529  : 
; 530  : 
; 531  : 
; 532  : 	//Read Rx DMA mode.
; 533  : 	NdisReadConfiguration(
; 534  : 		&Status,
; 535  : 		&ReturnedValue,
; 536  : 		hConfigHandle,
; 537  : 		&RxDMAMode,
; 538  : 		NdisParameterHexInteger);

  0027c	e28d100c	 add         r1, sp, #0xC
  00280	e3530000	 cmp         r3, #0
  00284	059d300c	 ldreq       r3, [sp, #0xC]
  00288	e28d0008	 add         r0, sp, #8
  0028c	e58d7000	 str         r7, [sp]
  00290	05932004	 ldreq       r2, [r3, #4]
  00294	059d3004	 ldreq       r3, [sp, #4]
  00298	02833a01	 addeq       r3, r3, #1, 20
  0029c	058321b8	 streq       r2, [r3, #0x1B8]
  002a0	159d3004	 ldrne       r3, [sp, #4]
  002a4	12833a01	 addne       r3, r3, #1, 20
  002a8	158381b8	 strne       r8, [r3, #0x1B8]
  002ac	e59d2010	 ldr         r2, [sp, #0x10]
  002b0	e28d302c	 add         r3, sp, #0x2C
  002b4	eb000000	 bl          NdisReadConfiguration

; 539  : 
; 540  : 	if (Status == NDIS_STATUS_SUCCESS) 

  002b8	e59d3008	 ldr         r3, [sp, #8]

; 541  : 	{
; 542  : 		pAdapter->fRxDMAMode = (ReturnedValue->ParameterData.IntegerData);
; 543  : 	}
; 544  : 	else
; 545  : 	{
; 546  : 		pAdapter->fRxDMAMode = 0UL;
; 547  : 	}
; 548  : 
; 549  : 	//Read Tx DMA mode.
; 550  : 	NdisReadConfiguration(
; 551  : 		&Status,
; 552  : 		&ReturnedValue,
; 553  : 		hConfigHandle,
; 554  : 		&TxDMAMode,
; 555  : 		NdisParameterHexInteger);

  002bc	e28d100c	 add         r1, sp, #0xC
  002c0	e28d0008	 add         r0, sp, #8
  002c4	e3530000	 cmp         r3, #0
  002c8	059d300c	 ldreq       r3, [sp, #0xC]
  002cc	e58d7000	 str         r7, [sp]
  002d0	05932004	 ldreq       r2, [r3, #4]
  002d4	059d3004	 ldreq       r3, [sp, #4]
  002d8	02833a01	 addeq       r3, r3, #1, 20
  002dc	058321a0	 streq       r2, [r3, #0x1A0]
  002e0	159d3004	 ldrne       r3, [sp, #4]
  002e4	12833a01	 addne       r3, r3, #1, 20
  002e8	158351a0	 strne       r5, [r3, #0x1A0]
  002ec	e59d2010	 ldr         r2, [sp, #0x10]
  002f0	e28d3034	 add         r3, sp, #0x34
  002f4	eb000000	 bl          NdisReadConfiguration

; 556  : 
; 557  : 	if (Status == NDIS_STATUS_SUCCESS) 

  002f8	e59d3008	 ldr         r3, [sp, #8]
  002fc	e3530000	 cmp         r3, #0

; 558  : 	{
; 559  : 		pAdapter->fTxDMAMode = (ReturnedValue->ParameterData.IntegerData);

  00300	059d300c	 ldreq       r3, [sp, #0xC]
  00304	05932004	 ldreq       r2, [r3, #4]
  00308	059d3004	 ldreq       r3, [sp, #4]
  0030c	02833a01	 addeq       r3, r3, #1, 20
  00310	058321a4	 streq       r2, [r3, #0x1A4]

; 560  : 	}
; 561  : 	else
; 562  : 	{
; 563  : 		pAdapter->fTxDMAMode = 0UL;

  00314	159d3004	 ldrne       r3, [sp, #4]
  00318	12833a01	 addne       r3, r3, #1, 20
  0031c	158351a4	 strne       r5, [r3, #0x1A4]

; 564  : 	}
; 565  : 
; 566  : 	//Display Tx/Rx modes
; 567  : 	if (pAdapter->fRxDMAMode)

  00320	e59d3004	 ldr         r3, [sp, #4]
  00324	e2833a01	 add         r3, r3, #1, 20
  00328	e59331a0	 ldr         r3, [r3, #0x1A0]
  0032c	e3530000	 cmp         r3, #0

; 568  : 	{
; 569  : 		RETAILMSG(1, (TEXT("Rx DMA\r\n")));

  00330	159f0584	 ldrne       r0, [pc, #0x584]

; 570  : 	}
; 571  : 	else 
; 572  : 	{
; 573  : 		RETAILMSG(1, (TEXT("Rx PIO\r\n")));

  00334	059f057c	 ldreq       r0, [pc, #0x57C]
  00338	eb000000	 bl          NKDbgPrintfW

; 574  : 	}
; 575  : 
; 576  : 	if (pAdapter->fTxDMAMode)

  0033c	e59d3004	 ldr         r3, [sp, #4]
  00340	e2833a01	 add         r3, r3, #1, 20
  00344	e59331a4	 ldr         r3, [r3, #0x1A4]
  00348	e3530000	 cmp         r3, #0

; 577  : 	{
; 578  : 		RETAILMSG(1, (TEXT("Tx DMA\r\n")));

  0034c	159f0560	 ldrne       r0, [pc, #0x560]

; 579  : 	}
; 580  : 	else
; 581  : 	{
; 582  : 		RETAILMSG(1, (TEXT("Tx PIO\r\n")));

  00350	059f0558	 ldreq       r0, [pc, #0x558]
  00354	eb000000	 bl          NKDbgPrintfW

; 583  : 	}
; 584  : 
; 585  : 
; 586  :     // Read Wakeup Capabilities
; 587  :     NdisReadConfiguration(
; 588  :         &Status,
; 589  :         &ReturnedValue,
; 590  :         hConfigHandle,
; 591  :         &LinkChangeWakeup,
; 592  :         NdisParameterInteger);

  00358	e59d2010	 ldr         r2, [sp, #0x10]
  0035c	e28d303c	 add         r3, sp, #0x3C
  00360	e28d100c	 add         r1, sp, #0xC
  00364	e28d0008	 add         r0, sp, #8
  00368	e58d5000	 str         r5, [sp]
  0036c	eb000000	 bl          NdisReadConfiguration

; 593  :     if (Status == NDIS_STATUS_SUCCESS)

  00370	e59d3008	 ldr         r3, [sp, #8]
  00374	e3a0a004	 mov         r10, #4
  00378	e3a04002	 mov         r4, #2
  0037c	e3530000	 cmp         r3, #0
  00380	1a00000e	 bne         |$LN64@Smsc9118In|

; 594  :     {
; 595  :         if (ReturnedValue->ParameterData.IntegerData == 2)

  00384	e59d300c	 ldr         r3, [sp, #0xC]
  00388	e5933004	 ldr         r3, [r3, #4]
  0038c	e3530002	 cmp         r3, #2

; 596  :             pAdapter->WakeUpCap.MinLinkChangeWakeUp = NdisDeviceStateD1;

  00390	0a00000a	 beq         |$LN64@Smsc9118In|

; 597  :         else if (ReturnedValue->ParameterData.IntegerData == 3)

  00394	e3530003	 cmp         r3, #3

; 598  :             pAdapter->WakeUpCap.MinLinkChangeWakeUp = NdisDeviceStateD2;

  00398	059d3004	 ldreq       r3, [sp, #4]
  0039c	02833a01	 addeq       r3, r3, #1, 20
  003a0	05838b8c	 streq       r8, [r3, #0xB8C]
  003a4	0a000008	 beq         |$LN57@Smsc9118In|

; 599  :         else if (ReturnedValue->ParameterData.IntegerData == 4)

  003a8	e3530004	 cmp         r3, #4

; 600  :             pAdapter->WakeUpCap.MinLinkChangeWakeUp = NdisDeviceStateD3;

  003ac	e59d3004	 ldr         r3, [sp, #4]
  003b0	e2833a01	 add         r3, r3, #1, 20
  003b4	1a000003	 bne         |$LN59@Smsc9118In|
  003b8	e583ab8c	 str         r10, [r3, #0xB8C]

; 601  :         else

  003bc	ea000002	 b           |$LN57@Smsc9118In|
  003c0		 |$LN64@Smsc9118In|

; 602  :             pAdapter->WakeUpCap.MinLinkChangeWakeUp = NdisDeviceStateD1;
; 603  :     }
; 604  :     else
; 605  :     {
; 606  :         // Set default state to NdisDeviceStateD1
; 607  :         pAdapter->WakeUpCap.MinLinkChangeWakeUp = NdisDeviceStateD1;

  003c0	e59d3004	 ldr         r3, [sp, #4]
  003c4	e2833a01	 add         r3, r3, #1, 20
  003c8		 |$LN59@Smsc9118In|
  003c8	e5834b8c	 str         r4, [r3, #0xB8C]
  003cc		 |$LN57@Smsc9118In|

; 608  :     }
; 609  : 
; 610  :     NdisReadConfiguration(
; 611  :         &Status,
; 612  :         &ReturnedValue,
; 613  :         hConfigHandle,
; 614  :         &MagicPacketWakeup,
; 615  :         NdisParameterInteger);

  003cc	e59d2010	 ldr         r2, [sp, #0x10]
  003d0	e28d3044	 add         r3, sp, #0x44
  003d4	e28d100c	 add         r1, sp, #0xC
  003d8	e28d0008	 add         r0, sp, #8
  003dc	e58d5000	 str         r5, [sp]
  003e0	eb000000	 bl          NdisReadConfiguration

; 616  :     if (Status == NDIS_STATUS_SUCCESS)

  003e4	e59d3008	 ldr         r3, [sp, #8]
  003e8	e3530000	 cmp         r3, #0
  003ec	1a00000e	 bne         |$LN56@Smsc9118In|

; 617  :     {
; 618  :         if (ReturnedValue->ParameterData.IntegerData == 2)

  003f0	e59d300c	 ldr         r3, [sp, #0xC]
  003f4	e5933004	 ldr         r3, [r3, #4]
  003f8	e3530002	 cmp         r3, #2

; 619  :             pAdapter->WakeUpCap.MinMagicPacketWakeUp = NdisDeviceStateD1;

  003fc	0a00000a	 beq         |$LN56@Smsc9118In|

; 620  :         else if (ReturnedValue->ParameterData.IntegerData == 3)

  00400	e3530003	 cmp         r3, #3

; 621  :             pAdapter->WakeUpCap.MinMagicPacketWakeUp = NdisDeviceStateD2;

  00404	059d3004	 ldreq       r3, [sp, #4]
  00408	02833a01	 addeq       r3, r3, #1, 20
  0040c	05838b84	 streq       r8, [r3, #0xB84]
  00410	0a000008	 beq         |$LN49@Smsc9118In|

; 622  :         else if (ReturnedValue->ParameterData.IntegerData == 4)

  00414	e3530004	 cmp         r3, #4

; 623  :             pAdapter->WakeUpCap.MinMagicPacketWakeUp = NdisDeviceStateD3;

  00418	e59d3004	 ldr         r3, [sp, #4]
  0041c	e2833a01	 add         r3, r3, #1, 20
  00420	1a000003	 bne         |$LN51@Smsc9118In|
  00424	e583ab84	 str         r10, [r3, #0xB84]

; 624  :         else

  00428	ea000002	 b           |$LN49@Smsc9118In|
  0042c		 |$LN56@Smsc9118In|

; 625  :             pAdapter->WakeUpCap.MinMagicPacketWakeUp = NdisDeviceStateD1;
; 626  :     }
; 627  :     else
; 628  :     {
; 629  :         // Set default state to WOL (NdisDeviceStateD1)
; 630  :         pAdapter->WakeUpCap.MinMagicPacketWakeUp = NdisDeviceStateD1;

  0042c	e59d3004	 ldr         r3, [sp, #4]
  00430	e2833a01	 add         r3, r3, #1, 20
  00434		 |$LN51@Smsc9118In|
  00434	e5834b84	 str         r4, [r3, #0xB84]
  00438		 |$LN49@Smsc9118In|

; 631  :     }
; 632  :     NdisReadConfiguration(
; 633  :         &Status,
; 634  :         &ReturnedValue,
; 635  :         hConfigHandle,
; 636  :         &PatternWakeup,
; 637  :         NdisParameterInteger);

  00438	e59d2010	 ldr         r2, [sp, #0x10]
  0043c	e28d304c	 add         r3, sp, #0x4C
  00440	e28d100c	 add         r1, sp, #0xC
  00444	e28d0008	 add         r0, sp, #8
  00448	e58d5000	 str         r5, [sp]
  0044c	eb000000	 bl          NdisReadConfiguration

; 638  :     if (Status == NDIS_STATUS_SUCCESS)

  00450	e59d3008	 ldr         r3, [sp, #8]
  00454	e3530000	 cmp         r3, #0
  00458	1a00000e	 bne         |$LN48@Smsc9118In|

; 639  :     {
; 640  :         if (ReturnedValue->ParameterData.IntegerData == 2)

  0045c	e59d300c	 ldr         r3, [sp, #0xC]
  00460	e5933004	 ldr         r3, [r3, #4]
  00464	e3530002	 cmp         r3, #2

; 641  :             pAdapter->WakeUpCap.MinPatternWakeUp = NdisDeviceStateD1;

  00468	0a00000a	 beq         |$LN48@Smsc9118In|

; 642  :         else if (ReturnedValue->ParameterData.IntegerData == 3)

  0046c	e3530003	 cmp         r3, #3

; 643  :             pAdapter->WakeUpCap.MinPatternWakeUp = NdisDeviceStateD2;

  00470	059d3004	 ldreq       r3, [sp, #4]
  00474	02833a01	 addeq       r3, r3, #1, 20
  00478	05838b88	 streq       r8, [r3, #0xB88]
  0047c	0a000008	 beq         |$LN41@Smsc9118In|

; 644  :         else if (ReturnedValue->ParameterData.IntegerData == 4)

  00480	e3530004	 cmp         r3, #4

; 645  :             pAdapter->WakeUpCap.MinPatternWakeUp = NdisDeviceStateD3;

  00484	e59d3004	 ldr         r3, [sp, #4]
  00488	e2833a01	 add         r3, r3, #1, 20
  0048c	1a000003	 bne         |$LN43@Smsc9118In|
  00490	e583ab88	 str         r10, [r3, #0xB88]

; 646  :         else

  00494	ea000002	 b           |$LN41@Smsc9118In|
  00498		 |$LN48@Smsc9118In|

; 647  :             pAdapter->WakeUpCap.MinPatternWakeUp = NdisDeviceStateD1;
; 648  :     }
; 649  :     else
; 650  :     {
; 651  :         // Set default state to NdisDeviceStateD1
; 652  :         pAdapter->WakeUpCap.MinPatternWakeUp = NdisDeviceStateD1;

  00498	e59d3004	 ldr         r3, [sp, #4]
  0049c	e2833a01	 add         r3, r3, #1, 20
  004a0		 |$LN43@Smsc9118In|
  004a0	e5834b88	 str         r4, [r3, #0xB88]
  004a4		 |$LN41@Smsc9118In|

; 653  :     }
; 654  : 
; 655  : 
; 656  : 	//Read I/O address of 9118.
; 657  : 	NdisReadConfiguration(
; 658  : 		&Status,
; 659  : 		&ReturnedValue,
; 660  : 		hConfigHandle,
; 661  : 		&IOAddressStr,
; 662  : 		NdisParameterHexInteger);

  004a4	e59d2010	 ldr         r2, [sp, #0x10]
  004a8	e28d3054	 add         r3, sp, #0x54
  004ac	e28d100c	 add         r1, sp, #0xC
  004b0	e28d0008	 add         r0, sp, #8
  004b4	e58d7000	 str         r7, [sp]
  004b8	eb000000	 bl          NdisReadConfiguration

; 663  : 
; 664  : 	if (Status == NDIS_STATUS_SUCCESS)

  004bc	e59d3008	 ldr         r3, [sp, #8]
  004c0	e3530000	 cmp         r3, #0
  004c4	1a0000ef	 bne         |$LN93@Smsc9118In|

; 665  : 	{
; 666  : 		pAdapter->ulIoBaseAddress= (ReturnedValue->ParameterData.IntegerData);

  004c8	e59d200c	 ldr         r2, [sp, #0xC]
  004cc	e59de004	 ldr         lr, [sp, #4]

; 667  : 
; 668  : 		NdisReadConfiguration(
; 669  : 			&Status,
; 670  : 			&ReturnedValue,
; 671  : 			hConfigHandle,
; 672  : 			&PhyAddressStr,
; 673  : 			NdisParameterHexInteger);

  004d0	e28d305c	 add         r3, sp, #0x5C
  004d4	e5922004	 ldr         r2, [r2, #4]
  004d8	e28d100c	 add         r1, sp, #0xC
  004dc	e28d0008	 add         r0, sp, #8
  004e0	e58e2124	 str         r2, [lr, #0x124]
  004e4	e59d2010	 ldr         r2, [sp, #0x10]
  004e8	e58d7000	 str         r7, [sp]
  004ec	eb000000	 bl          NdisReadConfiguration

; 674  : 		
; 675  : 		if (Status == NDIS_STATUS_SUCCESS)

  004f0	e59d3008	 ldr         r3, [sp, #8]
  004f4	e3530000	 cmp         r3, #0
  004f8	1a0000e2	 bne         |$LN93@Smsc9118In|

; 676  : 		{
; 677  : 			pAdapter->PhyAddress= (BYTE)(ReturnedValue->ParameterData.IntegerData);

  004fc	e59d200c	 ldr         r2, [sp, #0xC]

; 678  : 			
; 679  : 			NdisReadConfiguration(
; 680  : 				&Status,
; 681  : 				&ReturnedValue,
; 682  : 				hConfigHandle,
; 683  : 				&InterruptStr,
; 684  : 				NdisParameterInteger);

  00500	e28d3064	 add         r3, sp, #0x64
  00504	e28d100c	 add         r1, sp, #0xC
  00508	e5920004	 ldr         r0, [r2, #4]
  0050c	e59d2004	 ldr         r2, [sp, #4]
  00510	e58d5000	 str         r5, [sp]
  00514	e2822a01	 add         r2, r2, #1, 20
  00518	e5c20a96	 strb        r0, [r2, #0xA96]
  0051c	e59d2010	 ldr         r2, [sp, #0x10]
  00520	e28d0008	 add         r0, sp, #8
  00524	eb000000	 bl          NdisReadConfiguration

; 685  : 
; 686  : 			if (Status == NDIS_STATUS_SUCCESS)

  00528	e59d3008	 ldr         r3, [sp, #8]
  0052c	e3530000	 cmp         r3, #0
  00530	1a0000d4	 bne         |$LN93@Smsc9118In|

; 687  : 			{
; 688  : 				pAdapter->ulInterruptNumber = (ReturnedValue->ParameterData.IntegerData);

  00534	e59d300c	 ldr         r3, [sp, #0xC]
  00538	e5932004	 ldr         r2, [r3, #4]
  0053c	e59d3004	 ldr         r3, [sp, #4]
  00540	e2833a01	 add         r3, r3, #1, 20
  00544	e58329cc	 str         r2, [r3, #0x9CC]

; 689  : 			}
; 690  : 		}
; 691  : 
; 692  : 	}
; 693  : 
; 694  : 	// if any of above three "if" are failed..
; 695  : 	if (Status != NDIS_STATUS_SUCCESS)

  00548	e59d3008	 ldr         r3, [sp, #8]
  0054c	e3530000	 cmp         r3, #0
  00550	1a0000cc	 bne         |$LN93@Smsc9118In|

; 700  : 	}
; 701  : 
; 702  : 	SMSC_TRACE3(DBG_INIT,"  PhyAddress=0x%lx, IoBaseAddress=0x%lx, Interrupt=0x%lx\r\n", 
; 703  : 							pAdapter->PhyAddress,
; 704  : 							pAdapter->ulIoBaseAddress,
; 705  : 							pAdapter->ulInterruptNumber);
; 706  : 
; 707  : 	SMSC_TRACE2(DBG_INIT,"  RxDMAMode=0x%lx, TxDMAMode=0x%lx\r\n", 
; 708  : 							pAdapter->fRxDMAMode,
; 709  : 							pAdapter->fTxDMAMode);
; 710  : 	NdisCloseConfiguration (hConfigHandle);

  00554	e59d0010	 ldr         r0, [sp, #0x10]
  00558	eb000000	 bl          NdisCloseConfiguration

; 711  : 	pAdapter->hMiniportAdapterHandle = hMiniportAdapterHandle;

  0055c	e59d4090	 ldr         r4, [sp, #0x90]
  00560	e59d1004	 ldr         r1, [sp, #4]

; 712  : 
; 713  : 	pAdapter->lan9118_data.dwLanBase = (DWORD)VirtualAlloc((PVOID)0, 
; 714  : 														   (DWORD)REGISTER_PAGE_SIZE, 
; 715  : 														   (DWORD)MEM_RESERVE, 
; 716  : 														   (DWORD)PAGE_NOACCESS);

  00564	e3a03001	 mov         r3, #1
  00568	e3a02a02	 mov         r2, #2, 20
  0056c	e5814000	 str         r4, [r1]
  00570	e3a01c01	 mov         r1, #1, 24
  00574	e3a00000	 mov         r0, #0
  00578	eb000000	 bl          VirtualAlloc
  0057c	e59d3004	 ldr         r3, [sp, #4]
  00580	e5830008	 str         r0, [r3, #8]

; 717  : 	if ((PVOID)(pAdapter->lan9118_data.dwLanBase)==NULL)

  00584	e59d2004	 ldr         r2, [sp, #4]
  00588	e5923008	 ldr         r3, [r2, #8]
  0058c	e3530000	 cmp         r3, #0

; 718  : 	{
; 719  : 		SMSC_TRACE0(DBG_INIT,"VirtualAlloc failed.\r\n");
; 720  : 		return NDIS_STATUS_RESOURCES;

  00590	0a0000c0	 beq         |$LN99@Smsc9118In|

; 721  : 	}
; 722  : 	else {
; 723  : 		SMSC_TRACE1(DBG_INIT,"VirtualAlloc at 0x%x.\r\n", pAdapter->lan9118_data.dwLanBase);   
; 724  : 	}
; 725  : 
; 726  : 	SMSC_TRACE1(DBG_INIT,"ulIoBaseAddress = 0x%x.\r\n", pAdapter->ulIoBaseAddress);
; 727  : 	bResult= VirtualCopy((PVOID)pAdapter->lan9118_data.dwLanBase,
; 728  : 						 (PVOID)(pAdapter->ulIoBaseAddress >> 8),
; 729  : 						 (DWORD)REGISTER_PAGE_SIZE,
; 730  : 						 (DWORD)(PAGE_READWRITE|PAGE_NOCACHE|PAGE_PHYSICAL));

  00594	e5923124	 ldr         r3, [r2, #0x124]
  00598	e5920008	 ldr         r0, [r2, #8]
  0059c	e3a08c06	 mov         r8, #6, 24
  005a0	e1a01423	 mov         r1, r3, lsr #8
  005a4	e3883004	 orr         r3, r8, #4
  005a8	e3a02c01	 mov         r2, #1, 24
  005ac	eb000000	 bl          VirtualCopy

; 731  : 	if (bResult == TRUE)

  005b0	e3500001	 cmp         r0, #1
  005b4	1a0000a8	 bne         |$LN34@Smsc9118In|

; 732  : 	{
; 733  : 		if (!ChipIdentify(pAdapter))

  005b8	e59d0004	 ldr         r0, [sp, #4]
  005bc	eb000000	 bl          ChipIdentify
  005c0	e3500000	 cmp         r0, #0
  005c4	1a000002	 bne         |$LN33@Smsc9118In|
  005c8		 |$LN8@Smsc9118In|
  005c8	e3a0311b	 mov         r3, #0x1B, 2
  005cc	e3830801	 orr         r0, r3, #1, 16
  005d0	ea0000b2	 b           |$LN88@Smsc9118In|
  005d4		 |$LN33@Smsc9118In|

; 748  : 	}
; 749  : 
; 750  : 	if (RegisterAdapter(pAdapter, hConfigurationHandle) != NDIS_STATUS_SUCCESS)

  005d4	e59d0004	 ldr         r0, [sp, #4]
  005d8	e59d1094	 ldr         r1, [sp, #0x94]
  005dc	eb000000	 bl          RegisterAdapter
  005e0	e3500000	 cmp         r0, #0
  005e4	0a000015	 beq         |$LN30@Smsc9118In|
  005e8		 |$LN108@Smsc9118In|

; 751  : 	{
; 752  : 		// Free VA for 9118
; 753  : 		if (pAdapter->lan9118_data.dwLanBase)

  005e8	e59d0004	 ldr         r0, [sp, #4]

; 806  : 				pAdapter->DMABaseVA = (DWORD)NULL;

  005ec		 |$LN22@Smsc9118In|
  005ec	e5903008	 ldr         r3, [r0, #8]
  005f0	e1b0e003	 movs        lr, r3
  005f4	0a00000c	 beq         |$LN29@Smsc9118In|
  005f8	e3e03b0d	 mvn         r3, #0xD, 22
  005fc	e22330fb	 eor         r3, r3, #0xFB
  00600	e5933000	 ldr         r3, [r3]
  00604	e5901124	 ldr         r1, [r0, #0x124]
  00608	e3a02902	 mov         r2, #2, 18
  0060c	e2433001	 sub         r3, r3, #1
  00610	e0033001	 and         r3, r3, r1
  00614	e04e0003	 sub         r0, lr, r3
  00618	e3a01000	 mov         r1, #0
  0061c	eb000000	 bl          VirtualFree
  00620	e59d3004	 ldr         r3, [sp, #4]
  00624	e5835008	 str         r5, [r3, #8]
  00628		 |$LN107@Smsc9118In|

; 754  : 		{
; 755  : 			bResult = VirtualFree((PVOID)(pAdapter->lan9118_data.dwLanBase - (pAdapter->ulIoBaseAddress & (((DWORD)PAGE_SIZE)-1UL))), 0UL, (DWORD)MEM_RELEASE);
; 756  : 			pAdapter->lan9118_data.dwLanBase = (DWORD)NULL;

  00628	e59d0004	 ldr         r0, [sp, #4]
  0062c		 |$LN29@Smsc9118In|

; 757  : 		}
; 758  : 		// Free pAdapter.
; 759  : 		NdisFreeMemory(pAdapter, (UINT)sizeof(SMSC9118_ADAPTER), NDIS_ALLOC_FLAG);

  0062c	e3a02000	 mov         r2, #0
  00630	e3861098	 orr         r1, r6, #0x98
  00634	eb000000	 bl          NdisFreeMemory
  00638		 |$LN106@Smsc9118In|

; 760  : 		SMSC_WARNING0("  RegisterAdapter failed.\r\n");
; 761  : 		return (NDIS_STATUS_FAILURE);

  00638	e3a00107	 mov         r0, #7, 2
  0063c	ea000097	 b           |$LN88@Smsc9118In|
  00640		 |$LN30@Smsc9118In|

; 762  : 	}
; 763  : 
; 764  : 	//
; 765  : 	// Mapping DMA registers. 
; 766  : 	//
; 767  : 	if (pAdapter->fRxDMAMode || pAdapter->fTxDMAMode)

  00640	e59d2004	 ldr         r2, [sp, #4]
  00644	e2823a01	 add         r3, r2, #1, 20
  00648	e59331a0	 ldr         r3, [r3, #0x1A0]
  0064c	e3530000	 cmp         r3, #0
  00650	1a000003	 bne         |$LN27@Smsc9118In|
  00654	e2823a01	 add         r3, r2, #1, 20
  00658	e59331a4	 ldr         r3, [r3, #0x1A4]
  0065c	e3530000	 cmp         r3, #0
  00660	0a000025	 beq         |$LN23@Smsc9118In|
  00664		 |$LN27@Smsc9118In|

; 768  : 	{
; 769  :         DWORD temp;
; 770  : 		// REGISTER_PAGE_SIZE is changed to DMAC_REGSIZE
; 771  : 		pAdapter->DMABaseVA = (DWORD)VirtualAlloc ((PVOID)0, 
; 772  : 												   (DWORD)DMAC_REGSIZE, 
; 773  : 												   (DWORD)MEM_RESERVE, 
; 774  : 												   (DWORD)PAGE_NOACCESS);

  00664	e3a03001	 mov         r3, #1
  00668	e3a02a02	 mov         r2, #2, 20
  0066c	e3a01b01	 mov         r1, #1, 22
  00670	e3a00000	 mov         r0, #0
  00674	eb000000	 bl          VirtualAlloc
  00678	e59d3004	 ldr         r3, [sp, #4]
  0067c	e2833a01	 add         r3, r3, #1, 20
  00680	e58301a8	 str         r0, [r3, #0x1A8]

; 775  : 
; 776  : 		if ((PVOID)(pAdapter->DMABaseVA)==NULL)

  00684	e59d2004	 ldr         r2, [sp, #4]
  00688	e2823a01	 add         r3, r2, #1, 20
  0068c	e59331a8	 ldr         r3, [r3, #0x1A8]
  00690	e3530000	 cmp         r3, #0
  00694	1a000001	 bne         |$LN26@Smsc9118In|

; 777  : 		{
; 778  :             temp = GetLastError();

  00698	eb000000	 bl          GetLastError

; 779  : 			// Free VA for 9118
; 780  : 			if (pAdapter->lan9118_data.dwLanBase)
; 781  : 			{
; 782  : 				bResult = VirtualFree ((PVOID)(pAdapter->lan9118_data.dwLanBase - (pAdapter->ulIoBaseAddress & (((DWORD)PAGE_SIZE)-1UL))), 0UL, (DWORD)MEM_RELEASE);
; 783  : 				pAdapter->lan9118_data.dwLanBase = (DWORD)NULL;
; 784  : 			}
; 785  : 			// Free pAdapter.
; 786  : 			NdisFreeMemory(pAdapter, (UINT)sizeof(SMSC9118_ADAPTER), NDIS_ALLOC_FLAG);
; 787  :             SMSC_TRACE1(DBG_DMA,"DMA VirtualAlloc failed: 0x%X.\r\n", temp);
; 788  : 			return (NDIS_STATUS_FAILURE);

  0069c	eaffffd1	 b           |$LN108@Smsc9118In|
  006a0		 |$LN26@Smsc9118In|

; 789  : 		}
; 790  : 		else
; 791  : 		{
; 792  : 			SMSC_TRACE1(DBG_DMA,"DMA VirtualAlloc OK. pAdapter->DMABaseVA = 0x%x\r\n", pAdapter->DMABaseVA);
; 793  : 		}
; 794  : 
; 795  : 		bResult= VirtualCopy ((PVOID)(pAdapter->DMABaseVA),
; 796  : 							  (PVOID)(DMAC_REGBASE >> 8),
; 797  : 							  (DWORD)DMAC_REGSIZE,
; 798  : 						 	  (DWORD)(PAGE_READWRITE|PAGE_NOCACHE|PAGE_PHYSICAL));

  006a0	e2823a01	 add         r3, r2, #1, 20
  006a4	e59301a8	 ldr         r0, [r3, #0x1A8]
  006a8	e3883004	 orr         r3, r8, #4
  006ac	e3a02b01	 mov         r2, #1, 22
  006b0	e3a01000	 mov         r1, #0
  006b4	eb000000	 bl          VirtualCopy
  006b8	e3500000	 cmp         r0, #0

; 799  : 
; 800  : 		if (bResult == FALSE)

  006bc	1a00000d	 bne         |$LN94@Smsc9118In|

; 801  : 		{
; 802  : 			// Free VA for DMA
; 803  : 			if (pAdapter->DMABaseVA)

  006c0	e59d0004	 ldr         r0, [sp, #4]
  006c4		 |$LN109@Smsc9118In|
  006c4	e2803a01	 add         r3, r0, #1, 20
  006c8	e59331a8	 ldr         r3, [r3, #0x1A8]
  006cc	e3530000	 cmp         r3, #0
  006d0	0affffc5	 beq         |$LN22@Smsc9118In|

; 804  : 			{
; 805  : 				bResult = VirtualFree ((PVOID)(pAdapter->DMABaseVA), 0UL, (DWORD)MEM_RELEASE);

  006d4	e2803a01	 add         r3, r0, #1, 20
  006d8	e59301a8	 ldr         r0, [r3, #0x1A8]
  006dc	e3a02902	 mov         r2, #2, 18
  006e0	e3a01000	 mov         r1, #0
  006e4	eb000000	 bl          VirtualFree

; 806  : 				pAdapter->DMABaseVA = (DWORD)NULL;

  006e8	e59d3004	 ldr         r3, [sp, #4]
  006ec	e2833a01	 add         r3, r3, #1, 20
  006f0	e58351a8	 str         r5, [r3, #0x1A8]

; 807  : 			}
; 808  : 			// Free VA for 9118
; 809  : 			if (pAdapter->lan9118_data.dwLanBase)
; 810  : 			{
; 811  : 				bResult = VirtualFree ((PVOID)(pAdapter->lan9118_data.dwLanBase - (pAdapter->ulIoBaseAddress & (((DWORD)PAGE_SIZE)-1UL))), 0UL, (DWORD)MEM_RELEASE);
; 812  : 				pAdapter->lan9118_data.dwLanBase = (DWORD)NULL;
; 813  : 			}
; 814  : 			// Free pAdapter.
; 815  : 			NdisFreeMemory(pAdapter, (UINT)sizeof(SMSC9118_ADAPTER), NDIS_ALLOC_FLAG);
; 816  : 			SMSC_TRACE0(DBG_DMA,"DMA VirtualCopy failed.\r\n");
; 817  : 			return (NDIS_STATUS_FAILURE);

  006f4	eaffffbb	 b           |$LN108@Smsc9118In|
  006f8		 |$LN94@Smsc9118In|
  006f8	e59d2004	 ldr         r2, [sp, #4]
  006fc		 |$LN23@Smsc9118In|

; 818  : 		}
; 819  : 		else
; 820  : 		{
; 821  : 			SMSC_TRACE0(DBG_DMA,"DMA VirtualCopy OK.\r\n");
; 822  : 		}
; 823  : 	}
; 824  : 	
; 825  : 	//
; 826  : 	// Allocate shared memory for Rx.
; 827  : 	//
; 828  : 
; 829  : 	if (pAdapter->fRxDMAMode)

  006fc	e2823a01	 add         r3, r2, #1, 20
  00700	e59331a0	 ldr         r3, [r3, #0x1A0]

; 830  : 	{
; 831  : 		Status = NdisAllocateMemory((PVOID *)&pAdapter->pSharedMemVA,
; 832  : 									(UINT)sizeof(SMSC9118_SHAREDMEM),
; 833  : 									NDIS_ALLOC_FLAG, HighestAcceptableMax);

  00704	e3a01702	 mov         r1, #2, 14
  00708	e3530000	 cmp         r3, #0
  0070c	e2823c11	 add         r3, r2, #0x11, 24
  00710	e28300ac	 add         r0, r3, #0xAC
  00714	e1a03009	 mov         r3, r9
  00718	e3a02000	 mov         r2, #0
  0071c	0a00000a	 beq         |$LN19@Smsc9118In|
  00720	e58d9000	 str         r9, [sp]
  00724	eb000000	 bl          NdisAllocateMemory
  00728	e3500000	 cmp         r0, #0
  0072c	e58d0008	 str         r0, [sp, #8]

; 834  : 		if (Status != NDIS_STATUS_SUCCESS)
; 835  : 		{
; 836  : 			SMSC_WARNING0("Failed to allocate memory for DMA Rx\r\n");
; 837  : 			return (NDIS_STATUS_FAILURE);

  00730	1affffc0	 bne         |$LN106@Smsc9118In|

; 838  : 		}
; 839  : 
; 840  : 		if (!(pAdapter->pSharedMemVA))

  00734	e59d0004	 ldr         r0, [sp, #4]
  00738	e2803a01	 add         r3, r0, #1, 20
  0073c	e59331ac	 ldr         r3, [r3, #0x1AC]
  00740	e3530000	 cmp         r3, #0
  00744	1a000006	 bne         |$LN12@Smsc9118In|

; 841  : 		{
; 842  : 			// Free VA for DMA
; 843  : 			if (pAdapter->DMABaseVA)
; 844  : 			{
; 845  : 				bResult = VirtualFree ((PVOID)(pAdapter->DMABaseVA), 0UL, (DWORD)MEM_RELEASE);
; 846  : 				pAdapter->DMABaseVA = (DWORD)NULL;
; 847  : 			}
; 848  : 			// Free VA for 9118
; 849  : 			if (pAdapter->lan9118_data.dwLanBase)
; 850  : 			{
; 851  : 				bResult = VirtualFree ((PVOID)(pAdapter->lan9118_data.dwLanBase - (pAdapter->ulIoBaseAddress & (((DWORD)PAGE_SIZE)-1UL))), 0UL, (DWORD)MEM_RELEASE);
; 852  : 				pAdapter->lan9118_data.dwLanBase = (DWORD)NULL;
; 853  : 			}
; 854  : 			// Free pAdapter.
; 855  : 			NdisFreeMemory(pAdapter, (UINT)sizeof(SMSC9118_ADAPTER), NDIS_ALLOC_FLAG);
; 856  : 			SMSC_TRACE0(DBG_DMA,"  AllocPhysMem failed.\r\n");
; 857  : 			return (NDIS_STATUS_FAILURE);

  00748	eaffffdd	 b           |$LN109@Smsc9118In|
  0074c		 |$LN19@Smsc9118In|

; 858  : 		}
; 859  : 		else
; 860  : 		{
; 861  : 			SMSC_TRACE2(DBG_DMA,"AllocPhysMem OK. pSharedMemVA = 0x%x; pSharedMemPA = 0x%x.\r\n", pAdapter->pSharedMemVA, pAdapter->pSharedMemPA);
; 862  : 		}
; 863  : 	
; 864  : 	}
; 865  : 	else
; 866  : 	{
; 867  : 		Status = NdisAllocateMemory (&(pAdapter->pSharedMemVA),
; 868  : 									 sizeof (SMSC9118_SHAREDMEM),
; 869  : 									 NDIS_ALLOC_FLAG,
; 870  : 									 HighestAcceptableMax);

  0074c	e58d9000	 str         r9, [sp]
  00750	eb000000	 bl          NdisAllocateMemory
  00754	e3500000	 cmp         r0, #0
  00758	e58d0008	 str         r0, [sp, #8]

; 871  : 
; 872  : 		if (Status != NDIS_STATUS_SUCCESS)
; 873  : 		{
; 874  : 			// Free VA for DMA
; 875  : 			if (pAdapter->DMABaseVA)

  0075c	e59d0004	 ldr         r0, [sp, #4]

; 876  : 			{
; 877  : 				bResult = VirtualFree ((PVOID)(pAdapter->DMABaseVA), 0UL, (DWORD)MEM_RELEASE);
; 878  : 				pAdapter->DMABaseVA = (DWORD)NULL;
; 879  : 			}
; 880  : 			// Free VA for 9118
; 881  : 			if (pAdapter->lan9118_data.dwLanBase)
; 882  : 			{
; 883  : 				bResult = VirtualFree ((PVOID)(pAdapter->lan9118_data.dwLanBase - (pAdapter->ulIoBaseAddress & (((DWORD)PAGE_SIZE)-1UL))), 0UL, (DWORD)MEM_RELEASE);
; 884  : 				pAdapter->lan9118_data.dwLanBase = (DWORD)NULL;
; 885  : 			}
; 886  : 			// Free pAdapter.
; 887  : 			NdisFreeMemory(pAdapter, (UINT)sizeof(SMSC9118_ADAPTER), NDIS_ALLOC_FLAG);
; 888  : 			SMSC_TRACE0(DBG_DMA,"  AllocPhysMem failed.\r\n");
; 889  : 			return (NDIS_STATUS_FAILURE);

  00760	1affffd7	 bne         |$LN109@Smsc9118In|
  00764		 |$LN12@Smsc9118In|

; 890  : 		}
; 891  : 		else
; 892  : 		{
; 893  : 			SMSC_TRACE2(DBG_DMA,"AllocPhysMem OK. pSharedMemVA = 0x%x; pSharedMemPA = 0x%x.\r\n", pAdapter->pSharedMemVA, pAdapter->pSharedMemPA);
; 894  : 		}
; 895  : 
; 896  : 	}
; 897  : 
; 898  : 
; 899  : 
; 900  : 
; 901  : 	
; 902  : 	pAdapter->lan9118_data.wAutoMdix = (WORD)(pAdapter->dwAutoMdix & 0xFFFF);

  00764	e2803a01	 add         r3, r0, #1, 20
  00768	e59331b8	 ldr         r3, [r3, #0x1B8]
  0076c	e1c032bc	 strh        r3, [r0, #0x2C]

; 903  : 
; 904  : //	pAdapter->lan9118_data.wAutoMdix=AMIDX;
; 905  : 	// Setup the card based on the initialization information
; 906  : 	if (ChipSetup(pAdapter))

  00770	e59d0004	 ldr         r0, [sp, #4]
  00774	eb000000	 bl          ChipSetup
  00778	e3500000	 cmp         r0, #0
  0077c	0affff91	 beq         |$LN8@Smsc9118In|

; 907  : 	{
; 908  : 		SMSC_TRACE0(DBG_INIT,"  ChipSetup Success\r\n");
; 909  : 		NdisMRegisterAdapterShutdownHandler (pAdapter->hMiniportAdapterHandle, pAdapter, Smsc9118Shutdown);

  00780	e59d1004	 ldr         r1, [sp, #4]
  00784	e59f2120	 ldr         r2, [pc, #0x120]
  00788	e5910000	 ldr         r0, [r1]
  0078c	eb000000	 bl          NdisMRegisterAdapterShutdownHandler

; 910  : 
; 911  : 		ChipStart(pAdapter);

  00790	e59d0004	 ldr         r0, [sp, #4]
  00794	eb000000	 bl          ChipStart

; 912  : 
; 913  : 		SMSC_TRACE0(DBG_INIT,"  NdisMRegisterInterrupt Success\r\n");
; 914  : 	}
; 915  : 	else 
; 916  : 	{
; 917  : 		SMSC_TRACE0(DBG_INIT,"  ChipSetup Failed\r\n");
; 918  : 		return NDIS_STATUS_ADAPTER_NOT_FOUND;
; 919  : 	}
; 920  : 
; 921  : 	//
; 922  : 	// Initialize DMA
; 923  : 	//
; 924  : 	if (pAdapter->fRxDMAMode || pAdapter->fTxDMAMode) {

  00798	e59d0004	 ldr         r0, [sp, #4]
  0079c	e2803a01	 add         r3, r0, #1, 20
  007a0	e59331a0	 ldr         r3, [r3, #0x1A0]
  007a4	e3530000	 cmp         r3, #0
  007a8	1a000003	 bne         |$LN5@Smsc9118In|
  007ac	e2803a01	 add         r3, r0, #1, 20
  007b0	e59331a4	 ldr         r3, [r3, #0x1A4]
  007b4	e3530000	 cmp         r3, #0
  007b8	0a000003	 beq         |$LN4@Smsc9118In|
  007bc		 |$LN5@Smsc9118In|

; 925  : 		if (DmaInitialize(pAdapter) != TRUE)

  007bc	eb000000	 bl          DmaInitialize
  007c0	e3500001	 cmp         r0, #1

; 926  : 		{
; 927  : 			SMSC_TRACE0(DBG_INIT,"  Smsc9118InitializeQueues failed.\r\n");
; 928  : 			return (NDIS_STATUS_FAILURE);

  007c4	1affff9b	 bne         |$LN106@Smsc9118In|
  007c8	e59d0004	 ldr         r0, [sp, #4]
  007cc		 |$LN4@Smsc9118In|

; 929  : 		}
; 930  : 	}
; 931  : 	
; 932  : 	//
; 933  : 	// Initialize queues
; 934  : 	//
; 935  : 	if (InitializeQueues(pAdapter) != NDIS_STATUS_SUCCESS)

  007cc	eb000000	 bl          InitializeQueues
  007d0	e3500000	 cmp         r0, #0

; 936  : 	{
; 937  : 		NdisFreeMemory(pAdapter, (UINT)sizeof(SMSC9118_ADAPTER), NDIS_ALLOC_FLAG);
; 938  : 		SMSC_TRACE0(DBG_INIT,"  Smsc9118InitializeQueues failed.\r\n");
; 939  : 		return (NDIS_STATUS_FAILURE);

  007d4	1affff93	 bne         |$LN107@Smsc9118In|

; 940  : 	}
; 941  : 
; 942  : 	//Power management
; 943  : 	pAdapter->CurrentPowerState = NdisDeviceStateD0;

  007d8	e59d3004	 ldr         r3, [sp, #4]

; 944  : 
; 945  : 	SMSC_TRACE0(DBG_INIT,"  Initialize succeeded\r\n");
; 946  : 
; 947  : 	// Make Lint Happy
; 948  : 	MediumArray = MediumArray;
; 949  : 	uiMediumArraySize = uiMediumArraySize;
; 950  : 
; 951  : 	// allocate temp buffer for fragmented packet
; 952  : 	NdisMAllocateSharedMemory(hMiniportAdapterHandle,
; 953  : 			2000UL, (BOOLEAN)FALSE, 
; 954  : 			(PVOID *)&(pAdapter->TxTempPktBuf.pUnAlignedVAddr),
; 955  : 			&(pAdapter->TxTempPktBuf.UnAlignedPAddr));

  007dc	e3a01e7d	 mov         r1, #0x7D, 28
  007e0	e1a00004	 mov         r0, r4
  007e4	e2833a01	 add         r3, r3, #1, 20
  007e8	e5837b80	 str         r7, [r3, #0xB80]
  007ec	e59d2004	 ldr         r2, [sp, #4]
  007f0	e2823c1a	 add         r3, r2, #0x1A, 24
  007f4	e28330a8	 add         r3, r3, #0xA8
  007f8	e2822c1a	 add         r2, r2, #0x1A, 24
  007fc	e58d3000	 str         r3, [sp]
  00800	e28230a0	 add         r3, r2, #0xA0
  00804	e3a02000	 mov         r2, #0
  00808	eb000000	 bl          NdisMAllocateSharedMemory

; 956  : 	if (pAdapter->TxTempPktBuf.pUnAlignedVAddr == NULL)

  0080c	e59d1004	 ldr         r1, [sp, #4]
  00810	e2813a01	 add         r3, r1, #1, 20
  00814	e5933aa0	 ldr         r3, [r3, #0xAA0]
  00818	e3530000	 cmp         r3, #0

; 957  : 	{
; 958  : 		SMSC_WARNING0("Error! Can not allocate buffer for fragmented packet\r\n");
; 959  : 		return (NDIS_STATUS_FAILURE);

  0081c	0affff85	 beq         |$LN106@Smsc9118In|

; 960  : 	}
; 961  : 	else
; 962  : 	{
; 963  : 		pAdapter->TxTempPktBuf.pVAddr = (PUCHAR)(((DWORD)(pAdapter->TxTempPktBuf.pUnAlignedVAddr) + 0x03UL) & (~0x03UL));

  00820	e2833003	 add         r3, r3, #3
  00824	e3c32003	 bic         r2, r3, #3
  00828	e2813a01	 add         r3, r1, #1, 20
  0082c	e5832ab0	 str         r2, [r3, #0xAB0]

; 964  : 		pAdapter->TxTempPktBuf.PAddr.LowPart = (((DWORD)NdisGetPhysicalAddressLow(pAdapter->TxTempPktBuf.UnAlignedPAddr) + 0x03UL) & (~0x03UL));

  00830	e59d3004	 ldr         r3, [sp, #4]

; 965  : 	}
; 966  : 
; 967  : 	// set to Kernel Mode
; 968  : //	oldKmode = SetKMode(1UL);
; 969  : //	oldKmode = oldKmode;		// for Lint
; 970  : 
; 971  : 	pAdapter->hSWIntEvt = NULL;
; 972  : 
; 973  : 	SMSC_TRACE0(DBG_INIT,"-Smsc9118Initialize\r\n");
; 974  : 
; 975  : 
; 976  : return (NDIS_STATUS_SUCCESS);

  00834	e3a00000	 mov         r0, #0
  00838	e2832a01	 add         r2, r3, #1, 20
  0083c	e5923aa8	 ldr         r3, [r2, #0xAA8]
  00840	e2833003	 add         r3, r3, #3
  00844	e3c33003	 bic         r3, r3, #3
  00848	e5823ab8	 str         r3, [r2, #0xAB8]
  0084c	e59d3004	 ldr         r3, [sp, #4]
  00850	e2833a01	 add         r3, r3, #1, 20
  00854	e5835ac0	 str         r5, [r3, #0xAC0]
  00858	ea000010	 b           |$LN88@Smsc9118In|
  0085c		 |$LN34@Smsc9118In|

; 734  : 		{
; 735  : 			SMSC_WARNING0("  ChipIdentify -- Failure\r\n");
; 736  : 			return NDIS_STATUS_ADAPTER_NOT_FOUND;
; 737  : 		}
; 738  : 	}
; 739  : 	else
; 740  : 	{
; 741  : 		SMSC_WARNING0("VirtualCopy ETHERNET_BASE failed\r\n");
; 742  : 		if (pAdapter->lan9118_data.dwLanBase)

  0085c	e59d2004	 ldr         r2, [sp, #4]
  00860	e5923008	 ldr         r3, [r2, #8]
  00864	e3530000	 cmp         r3, #0
  00868	0a00000a	 beq         |$LN99@Smsc9118In|

; 743  : 		{
; 744  : 			bResult = VirtualFree((PVOID)pAdapter->lan9118_data.dwLanBase, 0UL, (DWORD)MEM_RELEASE);

  0086c	e1a00003	 mov         r0, r3
  00870	e3a02902	 mov         r2, #2, 18
  00874	e3a01000	 mov         r1, #0
  00878	eb000000	 bl          VirtualFree

; 745  : 			pAdapter->lan9118_data.dwLanBase = 0UL;

  0087c	e59d3004	 ldr         r3, [sp, #4]
  00880	e5835008	 str         r5, [r3, #8]

; 746  : 		}
; 747  : 		return NDIS_STATUS_RESOURCES;

  00884	ea000003	 b           |$LN99@Smsc9118In|
  00888		 |$LN93@Smsc9118In|

; 696  : 	{
; 697  : 		NdisFreeMemory(pAdapter, (UINT)sizeof(SMSC9118_ADAPTER), NDIS_ALLOC_FLAG);

  00888	e59d0004	 ldr         r0, [sp, #4]
  0088c	e3a02000	 mov         r2, #0
  00890	e3861098	 orr         r1, r6, #0x98
  00894	eb000000	 bl          NdisFreeMemory
  00898		 |$LN99@Smsc9118In|
  00898	e3a03103	 mov         r3, #3, 2

; 698  : 		SMSC_TRACE1(DBG_INIT,"  NdisReadConfiguration failed 0x%x\r\n", Status);
; 699  : 		return NDIS_STATUS_RESOURCES;

  0089c	e383009a	 orr         r0, r3, #0x9A

; 746  : 		}
; 747  : 		return NDIS_STATUS_RESOURCES;

  008a0		 |$LN88@Smsc9118In|

; 977  : }

  008a0	e28dd06c	 add         sp, sp, #0x6C
  008a4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  008a8	e12fff1e	 bx          lr
  008ac		 |$LN113@Smsc9118In|
  008ac		 |$LN114@Smsc9118In|
  008ac	00000000	 DCD         |Smsc9118Shutdown|
  008b0		 |$LN115@Smsc9118In|
  008b0	00000000	 DCD         |??_C@_1BC@BLDJMKNP@?$AAT?$AAx?$AA?5?$AAP?$AAI?$AAO?$AA?$AN?$AA?6?$AA?$AA@|
  008b4		 |$LN116@Smsc9118In|
  008b4	00000000	 DCD         |??_C@_1BC@IEGKOBE@?$AAT?$AAx?$AA?5?$AAD?$AAM?$AAA?$AA?$AN?$AA?6?$AA?$AA@|
  008b8		 |$LN117@Smsc9118In|
  008b8	00000000	 DCD         |??_C@_1BC@BFEFHGFK@?$AAR?$AAx?$AA?5?$AAP?$AAI?$AAO?$AA?$AN?$AA?6?$AA?$AA@|
  008bc		 |$LN118@Smsc9118In|
  008bc	00000000	 DCD         |??_C@_1BC@GDKBCJB@?$AAR?$AAx?$AA?5?$AAD?$AAM?$AAA?$AA?$AN?$AA?6?$AA?$AA@|
  008c0		 |$LN119@Smsc9118In|
  008c0	00000000	 DCD         |??_C@_1CC@HBOIAFJA@?$AAM?$AAi?$AAn?$AAP?$AAa?$AAt?$AAt?$AAe?$AAr?$AAn?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$AA@|
  008c4		 |$LN120@Smsc9118In|
  008c4	00000000	 DCD         |??_C@_1CI@DAOPMGH@?$AAM?$AAi?$AAn?$AAL?$AAi?$AAn?$AAk?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$AA@|
  008c8		 |$LN121@Smsc9118In|
  008c8	00000000	 DCD         |??_C@_1BC@HPJEKDKL@?$AAA?$AAu?$AAt?$AAo?$AAM?$AAd?$AAi?$AAx?$AA?$AA@|
  008cc		 |$LN122@Smsc9118In|
  008cc	00000000	 DCD         |??_C@_1BI@JDCIAHNE@?$AAF?$AAl?$AAo?$AAw?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AA@|
  008d0		 |$LN123@Smsc9118In|
  008d0	00000000	 DCD         |??_C@_1BC@DJDONMFE@?$AAL?$AAi?$AAn?$AAk?$AAM?$AAo?$AAd?$AAe?$AA?$AA@|
  008d4		 |$LN124@Smsc9118In|
  008d4	00000000	 DCD         |??_C@_1BE@OPBIAMGO@?$AAT?$AAx?$AAD?$AAM?$AAA?$AAM?$AAo?$AAd?$AAe?$AA?$AA@|
  008d8		 |$LN125@Smsc9118In|
  008d8	00000000	 DCD         |??_C@_1BE@GLDLJBLL@?$AAR?$AAx?$AAD?$AAM?$AAA?$AAM?$AAo?$AAd?$AAe?$AA?$AA@|
  008dc		 |$LN126@Smsc9118In|
  008dc	00000000	 DCD         |??_C@_1BG@BHGDDGNK@?$AAP?$AAh?$AAy?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AA@|
  008e0		 |$LN127@Smsc9118In|
  008e0	00000000	 DCD         |??_C@_1BM@LBPDLMNJ@?$AAI?$AAo?$AAB?$AAa?$AAs?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AA@|
  008e4		 |$LN128@Smsc9118In|
  008e4	00000000	 DCD         |??_C@_1CA@INPFDDEP@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?$AA@|
  008e8		 |$LN129@Smsc9118In|
  008e8	00000000	 DCD         |??_C@_1CK@NJMIBKBG@?$AAM?$AAi?$AAn?$AAM?$AAa?$AAg?$AAi?$AAc?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAU?$AAp?$AA?$AA@|
  008ec		 |$M55151|

			 ENDP  ; |Smsc9118Initialize|

	EXPORT	|Smsc9118SetInformation|
	EXPORT	|??_C@_1DO@OONHECBM@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?5?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T55195| DCD	|$LN63@Smsc9118Se@3|
	DCD	0x4000d201

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OONHECBM@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?5?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "!", 0x0, " "
	DCB	0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t"
	DCB	0x0, "F", 0x0, "i", 0x0, "l", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Smsc9118SetInformation| PROC

; 2106 : {

  00000		 |$LN63@Smsc9118Se@3|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M55192|
  00004	e1a07003	 mov         r7, r3
  00008	e1a05002	 mov         r5, r2
  0000c	e1a06000	 mov         r6, r0

; 2107 : 	SMSC9118_ADAPTER * const pAdapter = (PSMSC9118_ADAPTER)(hMiniportAdapterContext);
; 2108 : 	const UCHAR * const pucInfoBuffer = (PUCHAR)(pInformationBuffer);
; 2109 : 	ULONG ulPacketFilter, ulLookAhead;
; 2110 : 	NDIS_STATUS StatusToReturn = NDIS_STATUS_SUCCESS;
; 2111 : 	const NDIS_PM_PACKET_PATTERN *pPattern;
; 2112 : 	NDIS_DEVICE_POWER_STATE  PowerState;   //power management
; 2113 : 
; 2114 : 	SMSC_TRACE1(DBG_INIT,"+Smsc9118SetInformation[0x%x]\r\n", Oid);
; 2115 : 
; 2116 : 	switch (Oid)

  00010	e59fe32c	 ldr         lr, [pc, #0x32C]
  00014	e3a04000	 mov         r4, #0
  00018	e151000e	 cmp         r1, lr
  0001c	0a000099	 beq         |$LN44@Smsc9118Se@3|
  00020	e59fe318	 ldr         lr, [pc, #0x318]
  00024	e151000e	 cmp         r1, lr
  00028	0a000087	 beq         |$LN41@Smsc9118Se@3|
  0002c	e59fe308	 ldr         lr, [pc, #0x308]
  00030	e151000e	 cmp         r1, lr
  00034	0a00006d	 beq         |$LN47@Smsc9118Se@3|
  00038	e59fe2f8	 ldr         lr, [pc, #0x2F8]
  0003c	e151000e	 cmp         r1, lr
  00040	0a000066	 beq         |$LN37@Smsc9118Se@3|
  00044	e59fe2e8	 ldr         lr, [pc, #0x2E8]
  00048	e151000e	 cmp         r1, lr
  0004c	0a000023	 beq         |$LN36@Smsc9118Se@3|
  00050	e59f32d8	 ldr         r3, [pc, #0x2D8]
  00054	e1510003	 cmp         r1, r3
  00058	0a00000c	 beq         |$LN18@Smsc9118Se@3|
  0005c	e59f32c8	 ldr         r3, [pc, #0x2C8]
  00060	e1510003	 cmp         r1, r3
  00064	0a000005	 beq         |$LN7@Smsc9118Se@3|

; 2348 : 			*pulBytesNeeded = 0UL;

  00068	e3a0015f	 mov         r0, #0x5F, 2
  0006c		 |$LN59@Smsc9118Se@3|
  0006c	e3a01000	 mov         r1, #0
  00070		 |$LN60@Smsc9118Se@3|

; 2343 : 
; 2344 : 		default:
; 2345 : 			SMSC_TRACE0(DBG_INIT,"  Unrecognozed OID\r\n");
; 2346 : 			StatusToReturn = NDIS_STATUS_INVALID_OID;
; 2347 : 			*pulBytesRead = 0UL;

  00070	e59d3014	 ldr         r3, [sp, #0x14]

; 2348 : 			*pulBytesNeeded = 0UL;

  00074	e3804801	 orr         r4, r0, #1, 16
  00078	e5831000	 str         r1, [r3]

; 2349 : 			break;

  0007c	ea0000a2	 b           |$LN53@Smsc9118Se@3|
  00080		 |$LN7@Smsc9118Se@3|

; 2317 : 
; 2318 : 		case OID_PNP_ENABLE_WAKE_UP:
; 2319 : 			SMSC_TRACE0(DBG_POWER,"  OID_PNP_ENABLE_WAKE_UP (SET)\r\n");
; 2320 : 			// Check if all three modes are requested to set.
; 2321 : 			if( ((pAdapter->dwWakeUpSource) & 
; 2322 : 				 (DWORD)(NDIS_PNP_WAKE_UP_LINK_CHANGE | 
; 2323 : 						 NDIS_PNP_WAKE_UP_MAGIC_PACKET | 
; 2324 : 						 NDIS_PNP_WAKE_UP_PATTERN_MATCH)) == 
; 2325 : 				 (DWORD)(NDIS_PNP_WAKE_UP_LINK_CHANGE | 
; 2326 : 						 NDIS_PNP_WAKE_UP_MAGIC_PACKET | 
; 2327 : 						 NDIS_PNP_WAKE_UP_PATTERN_MATCH) )
; 2328 : 			{
; 2329 : 				SMSC_WARNING0("NDIS_PNP_WAKE_UP_LINK_CHANGE is set with NDIS_PNP_WAKE_UP_MAGIC_PACKET, NDIS_PNP_WAKE_UP_PATTERN_MATCH.\r\n");
; 2330 : 			}
; 2331 : 
; 2332 : 			pAdapter->dwWakeUpSource = *(PDWORD)pInformationBuffer;

  00080	e5952000	 ldr         r2, [r5]
  00084	e2863a01	 add         r3, r6, #1, 20
  00088	e5832ad0	 str         r2, [r3, #0xAD0]

; 2333 : 			if((pAdapter->dwWakeUpSource) & (DWORD)NDIS_PNP_WAKE_UP_MAGIC_PACKET) {
; 2334 : 				SMSC_TRACE0(DBG_POWER,"NDIS_PNP_WAKE_UP_MAGIC_PACKET is set.\r\n");
; 2335 : 			}
; 2336 : 			if((pAdapter->dwWakeUpSource) & (DWORD)NDIS_PNP_WAKE_UP_PATTERN_MATCH) {
; 2337 : 				SMSC_TRACE0(DBG_POWER,"NDIS_PNP_WAKE_UP_PATTERN_MATCH is set.\r\n");
; 2338 : 			}
; 2339 : 			if((pAdapter->dwWakeUpSource) & (DWORD)NDIS_PNP_WAKE_UP_LINK_CHANGE) {
; 2340 : 				SMSC_TRACE0(DBG_POWER,"NDIS_PNP_WAKE_UP_LINK_CHANGE is set.\r\n");
; 2341 : 			}
; 2342 : 			break;

  0008c	ea00009b	 b           |$LN52@Smsc9118Se@3|
  00090		 |$LN18@Smsc9118Se@3|

; 2261 : 								}
; 2262 : 							}
; 2263 : 						}
; 2264 : 					}
; 2265 : 
; 2266 : 				}
; 2267 : 			}
; 2268 : 			break;
; 2269 : 
; 2270 : 		case OID_PNP_REMOVE_WAKE_UP_PATTERN:
; 2271 : 			SMSC_TRACE0(DBG_POWER,"  OID_PNP_REMOVE_WAKE_UP_PATTERN\r\n");
; 2272 : 
; 2273 : 			pPattern = (PNDIS_PM_PACKET_PATTERN)pInformationBuffer;
; 2274 : 			SMSC_TRACE1(DBG_POWER,"MaskSize=%d\r\n", pPattern->MaskSize);
; 2275 : 			SMSC_TRACE2(DBG_POWER,"PatternOffset=%d(0x%x)\r\n", pPattern->PatternOffset, pPattern->PatternOffset);
; 2276 : 			SMSC_TRACE1(DBG_POWER,"PatternSize=%d\r\n", pPattern->PatternSize);
; 2277 : 
; 2278 : 			if ((pPattern->PatternSize < 13UL) || 
; 2279 : 				(pPattern->MaskSize < 2UL) || 
; 2280 : 				(pPattern->MaskSize > 6UL))   //pPattern->MaskSize always <6(?)

  00090	e5953010	 ldr         r3, [r5, #0x10]
  00094	e353000d	 cmp         r3, #0xD
  00098	3a00000d	 bcc         |$LN16@Smsc9118Se@3|
  0009c	e5953008	 ldr         r3, [r5, #8]
  000a0	e3530002	 cmp         r3, #2
  000a4	3a00000a	 bcc         |$LN16@Smsc9118Se@3|
  000a8	e3530006	 cmp         r3, #6
  000ac	8a000008	 bhi         |$LN16@Smsc9118Se@3|

; 2281 : 			{
; 2282 : 				// Pattern is too short, since 9118 start checking after MAC dst/src address.
; 2283 : 				if (pPattern->PatternSize < 13UL) {
; 2284 : 				   SMSC_TRACE0(DBG_POWER,"PatternSize is smaller than 13 bytes.\r\n");
; 2285 : 				}
; 2286 : 
; 2287 : 				if (pPattern->MaskSize < 2UL) {
; 2288 : 				   SMSC_TRACE0(DBG_POWER,"MaskSize is smaller than 2 bytes.\r\n");
; 2289 : 				}
; 2290 : 				else if (pPattern->MaskSize > 6UL) {
; 2291 : 				   SMSC_TRACE0(DBG_POWER,"MaskSize is larger than 6 bytes.\r\n");
; 2292 : 				}
; 2293 : 				else {
; 2294 : 				   SMSC_TRACE0(DBG_POWER,"Error! 2 <= MaskSize <= 6\r\n");
; 2295 : 				}
; 2296 : 
; 2297 : 				SMSC_TRACE0(DBG_POWER,"No pattern is removed.\r\n");
; 2298 : 				StatusToReturn = NDIS_STATUS_NOT_ACCEPTED;
; 2299 : 				break;
; 2300 : 			}
; 2301 : 			else
; 2302 : 			{
; 2303 : 				if ((pAdapter->Wuff.FilterCommands & 
; 2304 : 					(FILTER3_ENABLE|FILTER2_ENABLE|FILTER1_ENABLE|FILTER0_ENABLE)) == 0UL )

  000b0	e2863a01	 add         r3, r6, #1, 20
  000b4	e5932ae4	 ldr         r2, [r3, #0xAE4]
  000b8	e59f3268	 ldr         r3, [pc, #0x268]
  000bc	e1120003	 tst         r2, r3
  000c0	0a00008e	 beq         |$LN52@Smsc9118Se@3|

; 2305 : 				{
; 2306 : 					//No pattern is enabled(nothing to remove). Return success.
; 2307 : 					SMSC_TRACE0(DBG_POWER,"No filter is enabled(all 4 filters NOT in use).\r\n");
; 2308 : 					break;
; 2309 : 				}
; 2310 : 				else
; 2311 : 				{
; 2312 : 					//There is at least one filter enabled.
; 2313 : 					ResetWakeUpFrameFilter(pAdapter, pPattern);

  000c4	e1a01005	 mov         r1, r5
  000c8	e1a00006	 mov         r0, r6
  000cc	eb000000	 bl          ResetWakeUpFrameFilter

; 2314 : 				}
; 2315 : 			}
; 2316 : 			break;

  000d0	ea00008a	 b           |$LN52@Smsc9118Se@3|
  000d4		 |$LN16@Smsc9118Se@3|
  000d4	e3a03801	 mov         r3, #1, 16
  000d8	e3834003	 orr         r4, r3, #3
  000dc	ea00008c	 b           |$LN1@Smsc9118Se@3|
  000e0		 |$LN36@Smsc9118Se@3|

; 2191 : 
; 2192 : 		case OID_PNP_ADD_WAKE_UP_PATTERN:
; 2193 : 			SMSC_TRACE0(DBG_POWER,"  OID_PNP_ADD_WAKE_UP_PATTERN\r\n");
; 2194 : 			pPattern = (PNDIS_PM_PACKET_PATTERN)pInformationBuffer;
; 2195 : 			SMSC_TRACE1(DBG_POWER,"MaskSize=%d\r\n", pPattern->MaskSize);
; 2196 : 			SMSC_TRACE2(DBG_POWER,"PatternOffset=%d(0x%x)\r\n", pPattern->PatternOffset, pPattern->PatternOffset);
; 2197 : 			SMSC_TRACE1(DBG_POWER,"PatternSize=%d\r\n", pPattern->PatternSize);
; 2198 : 			if ((pPattern->PatternSize < 13UL) || 
; 2199 : 				(pPattern->MaskSize < 2UL) || 
; 2200 : 				(pPattern->MaskSize > 6UL))   //pPattern->MaskSize always <6(?)

  000e0	e5953010	 ldr         r3, [r5, #0x10]
  000e4	e353000d	 cmp         r3, #0xD
  000e8	3afffff9	 bcc         |$LN16@Smsc9118Se@3|
  000ec	e5953008	 ldr         r3, [r5, #8]
  000f0	e3530002	 cmp         r3, #2
  000f4	3afffff6	 bcc         |$LN16@Smsc9118Se@3|
  000f8	e3530006	 cmp         r3, #6
  000fc	8afffff4	 bhi         |$LN16@Smsc9118Se@3|

; 2201 : 			{
; 2202 : 				// Pattern is too short, since 9118 start checking after MAC dst/src address.
; 2203 : 				if (pPattern->PatternSize < 13UL) {
; 2204 : 				   SMSC_TRACE0(DBG_POWER, "WAKEUP Pattern Error: PatternSize is smaller than 13 bytes.\r\n");
; 2205 : 				}
; 2206 : 
; 2207 : 				if (pPattern->MaskSize < 2UL) {
; 2208 : 				   SMSC_TRACE0(DBG_POWER, "WAKEUP Pattern Error: MaskSize is smaller than 2 bytes.\r\n");
; 2209 : 				}
; 2210 : 				else if (pPattern->MaskSize > 6UL) {
; 2211 : 				   SMSC_TRACE0(DBG_POWER, "WAKEUP Pattern Error: MaskSize is larger than 6 bytes.\r\n");
; 2212 : 				}
; 2213 : 				else {
; 2214 : 				   SMSC_TRACE0(DBG_POWER, "WAKEUP Pattern Error: Error! 2 <= MaskSize <= 6\r\n");
; 2215 : 				}
; 2216 : 				StatusToReturn = NDIS_STATUS_NOT_ACCEPTED;
; 2217 : 				break;
; 2218 : 			}
; 2219 : 			else
; 2220 : 			{
; 2221 : 				if ( ((pAdapter->Wuff.FilterCommands)&(FILTER3_ENABLE|FILTER2_ENABLE|FILTER1_ENABLE|FILTER0_ENABLE)) == 
; 2222 : 					 (FILTER3_ENABLE|FILTER2_ENABLE|FILTER1_ENABLE|FILTER0_ENABLE) )

  00100	e2863a01	 add         r3, r6, #1, 20
  00104	e5931ae4	 ldr         r1, [r3, #0xAE4]
  00108	e59f2218	 ldr         r2, [pc, #0x218]
  0010c	e0013002	 and         r3, r1, r2
  00110	e1530002	 cmp         r3, r2
  00114	03a03103	 moveq       r3, #3, 2

; 2223 : 				{
; 2224 : 					//All Wuff slots are used.
; 2225 : 					SMSC_TRACE0(DBG_POWER,"No filter is available(all 4 filters in use).\r\n");
; 2226 : 					StatusToReturn = NDIS_STATUS_RESOURCES;

  00118	0383409a	 orreq       r4, r3, #0x9A
  0011c	0a00007c	 beq         |$LN1@Smsc9118Se@3|

; 2227 : 					break;
; 2228 : 				}
; 2229 : 				else
; 2230 : 				{
; 2231 : 					//There is at least one filter available.
; 2232 : 					if( !((pAdapter->Wuff.FilterCommands)&FILTER0_ENABLE) )

  00120	e3110001	 tst         r1, #1
  00124	1a000009	 bne         |$LN25@Smsc9118Se@3|

; 2233 : 					{
; 2234 : 						SetWakeUpFrameFilter(pAdapter, pPattern, 0UL);

  00128	e3a02000	 mov         r2, #0
  0012c	e1a01005	 mov         r1, r5
  00130	e1a00006	 mov         r0, r6
  00134	eb000000	 bl          SetWakeUpFrameFilter

; 2235 : 						(pAdapter->Wuff.FilterCommands) |= FILTER0_ENABLE;
; 2236 : 						(pAdapter->Wuff.FilterCommands) &= ~FILTER0_ADDR_TYPE;

  00138	e2862a01	 add         r2, r6, #1, 20
  0013c	e5923ae4	 ldr         r3, [r2, #0xAE4]
  00140	e3c33004	 bic         r3, r3, #4
  00144	e3833001	 orr         r3, r3, #1
  00148	e5823ae4	 str         r3, [r2, #0xAE4]

; 2237 : 					}
; 2238 : 					else

  0014c	ea00006b	 b           |$LN52@Smsc9118Se@3|
  00150		 |$LN25@Smsc9118Se@3|

; 2239 : 					{
; 2240 : 						if( !((pAdapter->Wuff.FilterCommands)&FILTER1_ENABLE) )

  00150	e3110c01	 tst         r1, #1, 24
  00154	1a000009	 bne         |$LN23@Smsc9118Se@3|

; 2241 : 						{
; 2242 : 							SetWakeUpFrameFilter(pAdapter, pPattern, 1UL);

  00158	e3a02001	 mov         r2, #1
  0015c	e1a01005	 mov         r1, r5
  00160	e1a00006	 mov         r0, r6
  00164	eb000000	 bl          SetWakeUpFrameFilter

; 2243 : 							(pAdapter->Wuff.FilterCommands) |= FILTER1_ENABLE;
; 2244 : 							(pAdapter->Wuff.FilterCommands) &= ~FILTER1_ADDR_TYPE;

  00168	e2862a01	 add         r2, r6, #1, 20
  0016c	e5923ae4	 ldr         r3, [r2, #0xAE4]
  00170	e3c33b01	 bic         r3, r3, #1, 22
  00174	e3833c01	 orr         r3, r3, #1, 24
  00178	e5823ae4	 str         r3, [r2, #0xAE4]
  0017c	ea00005f	 b           |$LN52@Smsc9118Se@3|
  00180		 |$LN23@Smsc9118Se@3|

; 2245 : 						}
; 2246 : 						else
; 2247 : 						{
; 2248 : 							if( !((pAdapter->Wuff.FilterCommands)&FILTER2_ENABLE) )

  00180	e3110801	 tst         r1, #1, 16
  00184	1a000009	 bne         |$LN21@Smsc9118Se@3|

; 2249 : 							{
; 2250 : 								SetWakeUpFrameFilter(pAdapter, pPattern, 2UL);

  00188	e3a02002	 mov         r2, #2
  0018c	e1a01005	 mov         r1, r5
  00190	e1a00006	 mov         r0, r6
  00194	eb000000	 bl          SetWakeUpFrameFilter

; 2251 : 								(pAdapter->Wuff.FilterCommands) |= FILTER2_ENABLE;
; 2252 : 								(pAdapter->Wuff.FilterCommands) &= ~FILTER2_ADDR_TYPE;

  00198	e2862a01	 add         r2, r6, #1, 20
  0019c	e5923ae4	 ldr         r3, [r2, #0xAE4]
  001a0	e3c33701	 bic         r3, r3, #1, 14
  001a4	e3833801	 orr         r3, r3, #1, 16
  001a8	e5823ae4	 str         r3, [r2, #0xAE4]
  001ac	ea000053	 b           |$LN52@Smsc9118Se@3|
  001b0		 |$LN21@Smsc9118Se@3|

; 2253 : 							}
; 2254 : 							else
; 2255 : 							{
; 2256 : 								if( !((pAdapter->Wuff.FilterCommands)&FILTER3_ENABLE) )

  001b0	e3110401	 tst         r1, #1, 8
  001b4	1a000051	 bne         |$LN52@Smsc9118Se@3|

; 2257 : 								{
; 2258 : 									SetWakeUpFrameFilter(pAdapter, pPattern, 3UL);

  001b8	e3a02003	 mov         r2, #3
  001bc	e1a01005	 mov         r1, r5
  001c0	e1a00006	 mov         r0, r6
  001c4	eb000000	 bl          SetWakeUpFrameFilter

; 2259 : 									(pAdapter->Wuff.FilterCommands) |= FILTER3_ENABLE;
; 2260 : 									(pAdapter->Wuff.FilterCommands) &= ~FILTER3_ADDR_TYPE;

  001c8	e2862a01	 add         r2, r6, #1, 20
  001cc	e5923ae4	 ldr         r3, [r2, #0xAE4]
  001d0	e3c33301	 bic         r3, r3, #1, 6
  001d4	e3833401	 orr         r3, r3, #1, 8
  001d8	e5823ae4	 str         r3, [r2, #0xAE4]
  001dc	ea000047	 b           |$LN52@Smsc9118Se@3|
  001e0		 |$LN37@Smsc9118Se@3|

; 2182 : 
; 2183 : 		//
; 2184 : 		//	Power Management
; 2185 : 		//
; 2186 : 		case OID_PNP_SET_POWER:
; 2187 : 			SMSC_TRACE0(DBG_POWER,"  OID_PNP_SET_POWER\r\n");
; 2188 : 			PowerState = *(PNDIS_DEVICE_POWER_STATE)pInformationBuffer;
; 2189 : 			SetPowerState(pAdapter, PowerState);

  001e0	e5951000	 ldr         r1, [r5]
  001e4	e1a00006	 mov         r0, r6
  001e8	eb000000	 bl          SetPowerState

; 2190 : 			break;

  001ec	ea000043	 b           |$LN52@Smsc9118Se@3|
  001f0		 |$LN47@Smsc9118Se@3|

; 2117 : 	{
; 2118 : 		case OID_802_3_MULTICAST_LIST:
; 2119 : 			SMSC_TRACE0(DBG_MULTICAST,"  OID_802_3_MULTICAST_LIST\r\n");
; 2120 : 			if ((ulInformationBufferLength % (DWORD)ETHER_LENGTH_OF_ADDRESS) != 0UL)

  001f0	e59f312c	 ldr         r3, [pc, #0x12C]
  001f4	e0832397	 umull       r2, r3, r7, r3
  001f8	e1a03123	 mov         r3, r3, lsr #2
  001fc	e0833083	 add         r3, r3, r3, lsl #1
  00200	e0573083	 subs        r3, r7, r3, lsl #1
  00204	0a000001	 beq         |$LN46@Smsc9118Se@3|
  00208		 |$LN58@Smsc9118Se@3|

; 2121 : 			{
; 2122 : 				StatusToReturn = NDIS_STATUS_INVALID_LENGTH;
; 2123 : 				*pulBytesRead = 0UL;
; 2124 : 				*pulBytesNeeded = 0UL;

  00208	e3a00153	 mov         r0, #0x53, 2

; 2125 : 				break;

  0020c	eaffff96	 b           |$LN59@Smsc9118Se@3|
  00210		 |$LN46@Smsc9118Se@3|

; 2126 : 			}
; 2127 : 			if (sizeof(pAdapter->ucAddresses) < (UINT)ulInformationBufferLength)

  00210	e35700c0	 cmp         r7, #0xC0

; 2128 : 			{
; 2129 : 				StatusToReturn = NDIS_STATUS_INVALID_LENGTH;
; 2130 : 				*pulBytesRead = 0UL;
; 2131 : 				*pulBytesNeeded = 0UL;

  00214	83a00153	 movhi       r0, #0x53, 2
  00218	e3a01000	 mov         r1, #0
  0021c	8affff93	 bhi         |$LN60@Smsc9118Se@3|

; 2132 : 				break;
; 2133 : 			}
; 2134 : 			NdisZeroMemory(pAdapter->ucAddresses, DEFAULT_MULTICASTLISTMAX*ETHER_LENGTH_OF_ADDRESS);

  00220	e2864c19	 add         r4, r6, #0x19, 24
  00224	e28400d0	 add         r0, r4, #0xD0
  00228	e3a020c0	 mov         r2, #0xC0
  0022c	eb000000	 bl          memset

; 2135 : 			// Set Multicast addresses
; 2136 : 			NdisMoveMemory (pAdapter->ucAddresses, pInformationBuffer, (UINT)ulInformationBufferLength);

  00230	e1a02007	 mov         r2, r7
  00234	e1a01005	 mov         r1, r5
  00238	e28400d0	 add         r0, r4, #0xD0
  0023c	eb000000	 bl          memcpy

; 2137 : 			StatusToReturn = SetMulticastAddressList(pAdapter);

  00240	e1a00006	 mov         r0, r6
  00244	eb000000	 bl          SetMulticastAddressList

; 2138 : 			break;

  00248	ea000029	 b           |$LN54@Smsc9118Se@3|
  0024c		 |$LN41@Smsc9118Se@3|

; 2163 : 			break;
; 2164 : 
; 2165 : 		case OID_GEN_CURRENT_LOOKAHEAD:
; 2166 : 			SMSC_TRACE0(DBG_INIT,"  OID_GEN_CURRENT_LOOKAHEAD\r\n");
; 2167 : 			if (ulInformationBufferLength != 4UL)

  0024c	e3570004	 cmp         r7, #4

; 2168 : 			{
; 2169 : 				StatusToReturn = NDIS_STATUS_INVALID_LENGTH;
; 2170 : 				*pulBytesRead = 0UL;
; 2171 : 				*pulBytesNeeded = 0UL;
; 2172 : 				break;

  00250	1affffec	 bne         |$LN58@Smsc9118Se@3|

; 2173 : 			}
; 2174 : 			NdisMoveMemory (&ulLookAhead, pucInfoBuffer, 4U);

  00254	e5d50000	 ldrb        r0, [r5]
  00258	e5d53001	 ldrb        r3, [r5, #1]
  0025c	e5d52002	 ldrb        r2, [r5, #2]
  00260	e5d51003	 ldrb        r1, [r5, #3]
  00264	e1803403	 orr         r3, r0, r3, lsl #8
  00268	e1833802	 orr         r3, r3, r2, lsl #16
  0026c	e1833c01	 orr         r3, r3, r1, lsl #24

; 2175 : 			if (ulLookAhead <= (DWORD)MAX_LOOKAHEAD) {

  00270	e3530e5e	 cmp         r3, #0x5E, 28

; 2176 : 				pAdapter->ulMaxLookAhead = ulLookAhead;

  00274	95863150	 strls       r3, [r6, #0x150]
  00278	9a000020	 bls         |$LN52@Smsc9118Se@3|

; 2177 : 			}
; 2178 : 			else {

  0027c	e3a03153	 mov         r3, #0x53, 2

; 2179 : 				StatusToReturn = NDIS_STATUS_INVALID_LENGTH;

  00280	e3834801	 orr         r4, r3, #1, 16

; 2180 : 			}
; 2181 : 			break;

  00284	ea000022	 b           |$LN1@Smsc9118Se@3|
  00288		 |$LN44@Smsc9118Se@3|

; 2139 : 
; 2140 : 		case OID_GEN_CURRENT_PACKET_FILTER:
; 2141 : 			SMSC_TRACE0(DBG_MULTICAST,"  OID_GEN_CURRENT_PACKET_FILTER\r\n");
; 2142 : 			if (ulInformationBufferLength != 4UL)

  00288	e3570004	 cmp         r7, #4

; 2143 : 			{
; 2144 : 				StatusToReturn = NDIS_STATUS_INVALID_LENGTH;
; 2145 : 				*pulBytesRead = 0UL;
; 2146 : 				*pulBytesNeeded = 0UL;
; 2147 : 				break;

  0028c	1affffdd	 bne         |$LN58@Smsc9118Se@3|

; 2148 : 			}
; 2149 : 			NdisMoveMemory (&ulPacketFilter, pucInfoBuffer, 4U);

  00290	e5d51000	 ldrb        r1, [r5]
  00294	e5d53001	 ldrb        r3, [r5, #1]
  00298	e5d52002	 ldrb        r2, [r5, #2]
  0029c	e5d50003	 ldrb        r0, [r5, #3]
  002a0	e1813403	 orr         r3, r1, r3, lsl #8
  002a4	e1833802	 orr         r3, r3, r2, lsl #16
  002a8	e3a02a0f	 mov         r2, #0xF, 20
  002ac	e1831c00	 orr         r1, r3, r0, lsl #24

; 2150 : 
; 2151 : 			if (ulPacketFilter & (DWORD)(NDIS_PACKET_TYPE_SOURCE_ROUTING | NDIS_PACKET_TYPE_SMT | 
; 2152 : 								  NDIS_PACKET_TYPE_MAC_FRAME | NDIS_PACKET_TYPE_FUNCTIONAL | 
; 2153 : 								  NDIS_PACKET_TYPE_ALL_FUNCTIONAL | NDIS_PACKET_TYPE_GROUP))

  002b0	e3823050	 orr         r3, r2, #0x50
  002b4	e1110003	 tst         r1, r3
  002b8	0a00000a	 beq         |$LN42@Smsc9118Se@3|

; 2154 : 			{
; 2155 : 				StatusToReturn = NDIS_STATUS_NOT_SUPPORTED;
; 2156 : 				*pulBytesRead = 4UL;

  002bc	e59d3014	 ldr         r3, [sp, #0x14]

; 2157 : 				*pulBytesNeeded = 0UL;

  002c0	e59d2018	 ldr         r2, [sp, #0x18]

; 2158 : 				RETAILMSG(1, (TEXT("Error! PacketFilter = 0x%08x\r\n"), ulPacketFilter));

  002c4	e59f0054	 ldr         r0, [pc, #0x54]
  002c8	e3a0e004	 mov         lr, #4
  002cc	e583e000	 str         lr, [r3]
  002d0	e3a03000	 mov         r3, #0
  002d4	e3a04103	 mov         r4, #3, 2
  002d8	e5823000	 str         r3, [r2]
  002dc	e38440bb	 orr         r4, r4, #0xBB
  002e0	eb000000	 bl          NKDbgPrintfW

; 2159 : 				break;

  002e4	ea00000a	 b           |$LN1@Smsc9118Se@3|
  002e8		 |$LN42@Smsc9118Se@3|

; 2160 : 			}
; 2161 : 			pAdapter->ulPacketFilter = ulPacketFilter;
; 2162 : 			StatusToReturn = SetPacketFilter(pAdapter);

  002e8	e1a00006	 mov         r0, r6
  002ec	e586114c	 str         r1, [r6, #0x14C]
  002f0	eb000000	 bl          SetPacketFilter
  002f4		 |$LN54@Smsc9118Se@3|
  002f4	e1a04000	 mov         r4, r0

; 2350 : 	}
; 2351 : 
; 2352 : 	if (StatusToReturn == NDIS_STATUS_SUCCESS)

  002f8	e3540000	 cmp         r4, #0
  002fc	1a000004	 bne         |$LN1@Smsc9118Se@3|
  00300		 |$LN52@Smsc9118Se@3|

; 2353 : 	{
; 2354 : 		SMSC_TRACE1(DBG_INIT,"Smsc9118SetInformation[0x%x] Successful\r\n", Oid);
; 2355 : 		*pulBytesRead = ulInformationBufferLength;

  00300	e59d3014	 ldr         r3, [sp, #0x14]

; 2356 : 		*pulBytesNeeded = 0UL;

  00304	e3a01000	 mov         r1, #0
  00308	e5837000	 str         r7, [r3]
  0030c		 |$LN53@Smsc9118Se@3|
  0030c	e59d2018	 ldr         r2, [sp, #0x18]
  00310	e5821000	 str         r1, [r2]
  00314		 |$LN1@Smsc9118Se@3|

; 2357 : 	}
; 2358 : 
; 2359 : 	// Make Lint Happy
; 2360 : 	pInformationBuffer = pInformationBuffer;
; 2361 : 
; 2362 : 	SMSC_TRACE1(DBG_INIT,"-Smsc9118SetInformation[0x%x]\r\n", Oid);
; 2363 : 	return (StatusToReturn);
; 2364 : }

  00314	e1a00004	 mov         r0, r4
  00318	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0031c	e12fff1e	 bx          lr
  00320		 |$LN64@Smsc9118Se@3|
  00320		 |$LN65@Smsc9118Se@3|
  00320	00000000	 DCD         |??_C@_1DO@OONHECBM@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$CB?$AA?5?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00324		 |$LN66@Smsc9118Se@3|
  00324	aaaaaaab	 DCD         0xaaaaaaab
  00328		 |$LN67@Smsc9118Se@3|
  00328	01010101	 DCD         0x1010101
  0032c		 |$LN68@Smsc9118Se@3|
  0032c	fd010106	 DCD         0xfd010106
  00330		 |$LN69@Smsc9118Se@3|
  00330	fd010104	 DCD         0xfd010104
  00334		 |$LN70@Smsc9118Se@3|
  00334	fd010103	 DCD         0xfd010103
  00338		 |$LN71@Smsc9118Se@3|
  00338	fd010101	 DCD         0xfd010101
  0033c		 |$LN72@Smsc9118Se@3|
  0033c	01010103	 DCD         0x1010103
  00340		 |$LN73@Smsc9118Se@3|
  00340	0001010f	 DCD         0x1010f
  00344		 |$LN74@Smsc9118Se@3|
  00344	0001010e	 DCD         0x1010e
  00348		 |$M55193|

			 ENDP  ; |Smsc9118SetInformation|

	EXPORT	|DriverEntry|
	EXPORT	|??_C@_1M@OAJFFPML@?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@PICDNKAN@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAp?$AAe?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAp?$AAa?$AAt?$AAh?$AA?5?$AA?$CF?$AAs?$AA?$CB?$AA?$CB@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@BMKKLFCG@?$AAD?$AAR?$AAI?$AAV?$AAE?$AAR?$AA_?$AAV?$AAE?$AAR?$AAS?$AAI?$AAO?$AAN?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@PDACLLCA@?$AA0?$AA4?$AA1?$AA7?$AA0?$AA7?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@NMAMIKDG@?$AAD?$AAA?$AAT?$AAE?$AAC?$AAO?$AAD?$AAE?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NdisMRegisterMiniport|
	IMPORT	|NdisInitializeWrapper|
	IMPORT	|PlatformDisplayInfo|
	IMPORT	|PlatformInitialize|
	IMPORT	|RegCloseKey|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|

  00000			 AREA	 |.pdata|, PDATA
|$T55219| DCD	|$LN12@DriverEntr|
	DCD	0x40007e02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@OAJFFPML@?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$AA@| DCB "F", 0x0, "l", 0x0
	DCB	"a", 0x0, "g", 0x0, "s", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@PICDNKAN@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAp?$AAe?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAp?$AAa?$AAt?$AAh?$AA?5?$AA?$CF?$AAs?$AA?$CB?$AA?$CB@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "o"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "t", 0x0, "h", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, "!"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@BMKKLFCG@?$AAD?$AAR?$AAI?$AAV?$AAE?$AAR?$AA_?$AAV?$AAE?$AAR?$AAS?$AAI?$AAO?$AAN?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$AA@| DCB "D"
	DCB	0x0, "R", 0x0, "I", 0x0, "V", 0x0, "E", 0x0, "R", 0x0, "_"
	DCB	0x0, "V", 0x0, "E", 0x0, "R", 0x0, "S", 0x0, "I", 0x0, "O"
	DCB	0x0, "N", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "X"
	DCB	0x0, ",", 0x0, " ", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@PDACLLCA@?$AA0?$AA4?$AA1?$AA7?$AA0?$AA7?$AA?$AA@| DCB "0", 0x0, "4"
	DCB	0x0, "1", 0x0, "7", 0x0, "0", 0x0, "7", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@NMAMIKDG@?$AAD?$AAA?$AAT?$AAE?$AAC?$AAO?$AAD?$AAE?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "A", 0x0, "T", 0x0, "E", 0x0, "C", 0x0, "O", 0x0, "D"
	DCB	0x0, "E", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DriverEntry| PROC

; 189  : {

  00000		 |$LN12@DriverEntr|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd074	 sub         sp, sp, #0x74
  00008		 |$M55216|
  00008	e1a05001	 mov         r5, r1
  0000c	e1a06000	 mov         r6, r0

; 190  : 	NDIS_MINIPORT_CHARACTERISTICS Characteristics;
; 191  : 	NDIS_STATUS Status;
; 192  : 	DWORD dwTemp, cbBytes;
; 193  : 	HKEY hKey;
; 194  : 	
; 195  : 	SMSC_TRACE0(DBG_INIT,"+DriverEntry\r\n");
; 196  : 
; 197  : 	RETAILMSG(1, (TEXT("DRIVER_VERSION : %X, "), DRIVER_VERSION));

  00010	e59f01dc	 ldr         r0, [pc, #0x1DC]
  00014	e3a01e11	 mov         r1, #0x11, 28
  00018	eb000000	 bl          NKDbgPrintfW

; 198  : 	RETAILMSG(1, (TEXT("DATECODE : %s\r\n"), TEXT(BUILD_NUMBER)));

  0001c	e59f11cc	 ldr         r1, [pc, #0x1CC]
  00020	e59f01c4	 ldr         r0, [pc, #0x1C4]
  00024	eb000000	 bl          NKDbgPrintfW

; 199  : 
; 200  : 	// Check to see if controller is in use by KITL
; 201  : 	if (ERROR_SUCCESS != RegOpenKeyEx(HKEY_LOCAL_MACHINE, RegistryPath->Buffer, 0, 0, &hKey))

  00028	e5951004	 ldr         r1, [r5, #4]
  0002c	e28de008	 add         lr, sp, #8
  00030	e3a03000	 mov         r3, #0
  00034	e3a02000	 mov         r2, #0
  00038	e3a0010a	 mov         r0, #0xA, 2
  0003c	e58de000	 str         lr, [sp]
  00040	eb000000	 bl          RegOpenKeyExW
  00044	e3500000	 cmp         r0, #0
  00048	0a000004	 beq         |$LN6@DriverEntr|

; 202  : 	{
; 203  : 		RETAILMSG(1, (TEXT("Error opening registry path %s!!\r\n"), RegistryPath->Buffer));

  0004c	e5951004	 ldr         r1, [r5, #4]
  00050	e59f0190	 ldr         r0, [pc, #0x190]
  00054	eb000000	 bl          NKDbgPrintfW
  00058		 |$LN9@DriverEntr|

; 204  : 		return (NDIS_STATUS_FAILURE);

  00058	e3a04107	 mov         r4, #7, 2
  0005c	ea000051	 b           |$LN1@DriverEntr|
  00060		 |$LN6@DriverEntr|

; 205  : 	}
; 206  : 	
; 207  : 	cbBytes = sizeof(DWORD);
; 208  : 	if (ERROR_SUCCESS != RegQueryValueEx(hKey, L"Flags", NULL, NULL, (LPBYTE)&dwTemp, &cbBytes))

  00060	e59f117c	 ldr         r1, [pc, #0x17C]
  00064	e59d0008	 ldr         r0, [sp, #8]
  00068	e3a07004	 mov         r7, #4
  0006c	e28de00c	 add         lr, sp, #0xC
  00070	e28d4010	 add         r4, sp, #0x10
  00074	e3a03000	 mov         r3, #0
  00078	e3a02000	 mov         r2, #0
  0007c	e58d700c	 str         r7, [sp, #0xC]
  00080	e58de004	 str         lr, [sp, #4]
  00084	e58d4000	 str         r4, [sp]
  00088	eb000000	 bl          RegQueryValueExW
  0008c	e3500000	 cmp         r0, #0

; 209  : 	{
; 210  : 		// Value doesn't exist, so just continue
; 211  : 		RegCloseKey(hKey);

  00090	e59d0008	 ldr         r0, [sp, #8]
  00094	0a000001	 beq         |$LN5@DriverEntr|
  00098	eb000000	 bl          RegCloseKey

; 212  : 	}
; 213  : 	else

  0009c	ea000003	 b           |$LN3@DriverEntr|
  000a0		 |$LN5@DriverEntr|

; 214  : 	{
; 215  : 		RegCloseKey(hKey);

  000a0	eb000000	 bl          RegCloseKey

; 216  : 		if (dwTemp == DEVFLAGS_NOLOAD)

  000a4	e59d3010	 ldr         r3, [sp, #0x10]
  000a8	e3530004	 cmp         r3, #4

; 217  : 		{
; 218  : 			return (NDIS_STATUS_FAILURE);

  000ac	0affffe9	 beq         |$LN9@DriverEntr|
  000b0		 |$LN3@DriverEntr|

; 219  : 		}
; 220  : 	}
; 221  : 	
; 222  : 	PlatformInitialize();

  000b0	eb000000	 bl          PlatformInitialize

; 223  : 	PlatformDisplayInfo();

  000b4	eb000000	 bl          PlatformDisplayInfo

; 224  : 
; 225  : 	NdisMInitializeWrapper(&gSmsc9118MiniportBlock.NdisWrapperHandle, DriverObject, RegistryPath, NULL);

  000b8	e59fa0f8	 ldr         r10, [pc, #0xF8]
  000bc	e3a03000	 mov         r3, #0
  000c0	e1a02005	 mov         r2, r5
  000c4	e1a0000a	 mov         r0, r10
  000c8	e1a01006	 mov         r1, r6
  000cc	eb000000	 bl          NdisInitializeWrapper

; 226  : 
; 227  : 	gSmsc9118MiniportBlock.AdapterQueue = (PSMSC9118_ADAPTER)NULL;

  000d0	e3a03000	 mov         r3, #0

; 228  : 
; 229  : 	NdisZeroMemory (&Characteristics, sizeof (Characteristics));

  000d4	e3a02060	 mov         r2, #0x60
  000d8	e3a01000	 mov         r1, #0
  000dc	e28d0014	 add         r0, sp, #0x14
  000e0	e58a3004	 str         r3, [r10, #4]
  000e4	eb000000	 bl          memset

; 230  : 	Characteristics.MajorNdisVersion = (UCHAR)SMSC9118_NDIS_MAJOR_VERSION;
; 231  : 	Characteristics.MinorNdisVersion = (UCHAR)SMSC9118_NDIS_MINOR_VERSION;
; 232  : 	Characteristics.CheckForHangHandler = Smsc9118CheckForHang;
; 233  : 	Characteristics.DisableInterruptHandler = NULL;
; 234  : 	Characteristics.EnableInterruptHandler = NULL;
; 235  : 	Characteristics.HaltHandler = Smsc9118Halt;
; 236  : 	Characteristics.HandleInterruptHandler = Smsc9118HandleInterrupt;
; 237  : 	Characteristics.InitializeHandler = Smsc9118Initialize;
; 238  : 	Characteristics.ISRHandler = Smsc9118Isr;
; 239  : 	Characteristics.QueryInformationHandler = Smsc9118QueryInformation;
; 240  : 	Characteristics.ReconfigureHandler = NULL;
; 241  : 	Characteristics.ResetHandler = Smsc9118Reset;
; 242  : 	Characteristics.SendHandler = NULL;
; 243  : 	Characteristics.SetInformationHandler = Smsc9118SetInformation;
; 244  : 	Characteristics.TransferDataHandler = NULL;
; 245  : 	Characteristics.ReturnPacketHandler = Smsc9118GetReturnedPackets;
; 246  : 	Characteristics.SendPacketsHandler = Smsc9118SendPackets;
; 247  : 	Characteristics.AllocateCompleteHandler = NULL;
; 248  : 
; 249  : 	Status = NdisMRegisterMiniport (gSmsc9118MiniportBlock.NdisWrapperHandle, 
; 250  : 									&Characteristics, 
; 251  : 									sizeof (Characteristics));

  000e8	e59f30f0	 ldr         r3, [pc, #0xF0]
  000ec	e59f20e8	 ldr         r2, [pc, #0xE8]
  000f0	e59f10e0	 ldr         r1, [pc, #0xE0]
  000f4	e58d301c	 str         r3, [sp, #0x1C]
  000f8	e3a03000	 mov         r3, #0
  000fc	e5cd3015	 strb        r3, [sp, #0x15]
  00100	e3a03000	 mov         r3, #0
  00104	e58d3024	 str         r3, [sp, #0x24]
  00108	e3a03000	 mov         r3, #0
  0010c	e58d303c	 str         r3, [sp, #0x3C]
  00110	e3a03000	 mov         r3, #0
  00114	e58d3044	 str         r3, [sp, #0x44]
  00118	e59fe0b4	 ldr         lr, [pc, #0xB4]
  0011c	e59f40ac	 ldr         r4, [pc, #0xAC]
  00120	e59f50a4	 ldr         r5, [pc, #0xA4]
  00124	e59f609c	 ldr         r6, [pc, #0x9C]
  00128	e59f7094	 ldr         r7, [pc, #0x94]
  0012c	e59f808c	 ldr         r8, [pc, #0x8C]
  00130	e59f9084	 ldr         r9, [pc, #0x84]
  00134	e3a03000	 mov         r3, #0
  00138	e59a0000	 ldr         r0, [r10]
  0013c	e58d304c	 str         r3, [sp, #0x4C]
  00140	e3a03000	 mov         r3, #0
  00144	e3a0b005	 mov         r11, #5
  00148	e3a0a000	 mov         r10, #0
  0014c	e58d2028	 str         r2, [sp, #0x28]
  00150	e58d102c	 str         r1, [sp, #0x2C]
  00154	e3a02060	 mov         r2, #0x60
  00158	e28d1014	 add         r1, sp, #0x14
  0015c	e58d3058	 str         r3, [sp, #0x58]
  00160	e58de030	 str         lr, [sp, #0x30]
  00164	e58d4034	 str         r4, [sp, #0x34]
  00168	e58d5038	 str         r5, [sp, #0x38]
  0016c	e58d6040	 str         r6, [sp, #0x40]
  00170	e58d7048	 str         r7, [sp, #0x48]
  00174	e58d8050	 str         r8, [sp, #0x50]
  00178	e58d9054	 str         r9, [sp, #0x54]
  0017c	e5cdb014	 strb        r11, [sp, #0x14]
  00180	e58da020	 str         r10, [sp, #0x20]
  00184	eb000000	 bl          NdisMRegisterMiniport

; 252  : 
; 253  : 	if (Status == NDIS_STATUS_SUCCESS)

  00188	e59fa028	 ldr         r10, [pc, #0x28]
  0018c	e1b04000	 movs        r4, r0
  00190	0a000004	 beq         |$LN1@DriverEntr|

; 254  : 	{
; 255  : 		SMSC_TRACE0(DBG_INIT, "NdisMRegisterMiniport OK.\r\n");
; 256  : 	}
; 257  : 	else 
; 258  : 	{
; 259  : 		// Terminate the wrapper.
; 260  : 		NdisTerminateWrapper (gSmsc9118MiniportBlock.NdisWrapperHandle, NULL);

  00194	e59a0000	 ldr         r0, [r10]
  00198	e3a01000	 mov         r1, #0
  0019c	eb000000	 bl          NdisTerminateWrapper

; 261  : 		gSmsc9118MiniportBlock.NdisWrapperHandle = NULL;

  001a0	e3a03000	 mov         r3, #0
  001a4	e58a3000	 str         r3, [r10]
  001a8		 |$LN1@DriverEntr|

; 262  : 		SMSC_TRACE0(DBG_INIT,"    NdisMRegisterMiniport failed.\r\n");
; 263  : 	}
; 264  : 	
; 265  : 	SMSC_TRACE0(DBG_INIT,"-DriverEntry\r\n");
; 266  : 	return (Status);
; 267  : }

  001a8	e1a00004	 mov         r0, r4
  001ac	e28dd074	 add         sp, sp, #0x74
  001b0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001b4	e12fff1e	 bx          lr
  001b8		 |$LN13@DriverEntr|
  001b8		 |$LN14@DriverEntr|
  001b8	00000000	 DCD         |gSmsc9118MiniportBlock|
  001bc		 |$LN15@DriverEntr|
  001bc	00000000	 DCD         |Smsc9118SendPackets|
  001c0		 |$LN16@DriverEntr|
  001c0	00000000	 DCD         |Smsc9118GetReturnedPackets|
  001c4		 |$LN17@DriverEntr|
  001c4	00000000	 DCD         |Smsc9118SetInformation|
  001c8		 |$LN18@DriverEntr|
  001c8	00000000	 DCD         |Smsc9118Reset|
  001cc		 |$LN19@DriverEntr|
  001cc	00000000	 DCD         |Smsc9118QueryInformation|
  001d0		 |$LN20@DriverEntr|
  001d0	00000000	 DCD         |Smsc9118Isr|
  001d4		 |$LN21@DriverEntr|
  001d4	00000000	 DCD         |Smsc9118Initialize|
  001d8		 |$LN22@DriverEntr|
  001d8	00000000	 DCD         |Smsc9118HandleInterrupt|
  001dc		 |$LN23@DriverEntr|
  001dc	00000000	 DCD         |Smsc9118Halt|
  001e0		 |$LN24@DriverEntr|
  001e0	00000000	 DCD         |Smsc9118CheckForHang|
  001e4		 |$LN25@DriverEntr|
  001e4	00000000	 DCD         |??_C@_1M@OAJFFPML@?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$AA@|
  001e8		 |$LN26@DriverEntr|
  001e8	00000000	 DCD         |??_C@_1EG@PICDNKAN@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAp?$AAe?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAp?$AAa?$AAt?$AAh?$AA?5?$AA?$CF?$AAs?$AA?$CB?$AA?$CB@|
  001ec		 |$LN27@DriverEntr|
  001ec	00000000	 DCD         |??_C@_1CA@NMAMIKDG@?$AAD?$AAA?$AAT?$AAE?$AAC?$AAO?$AAD?$AAE?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  001f0		 |$LN28@DriverEntr|
  001f0	00000000	 DCD         |??_C@_1O@PDACLLCA@?$AA0?$AA4?$AA1?$AA7?$AA0?$AA7?$AA?$AA@|
  001f4		 |$LN29@DriverEntr|
  001f4	00000000	 DCD         |??_C@_1CM@BMKKLFCG@?$AAD?$AAR?$AAI?$AAV?$AAE?$AAR?$AA_?$AAV?$AAE?$AAR?$AAS?$AAI?$AAO?$AAN?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAX?$AA?0?$AA?5?$AA?$AA@|
  001f8		 |$M55217|

			 ENDP  ; |DriverEntry|

	END
