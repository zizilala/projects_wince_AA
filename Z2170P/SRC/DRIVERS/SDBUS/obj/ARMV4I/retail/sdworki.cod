; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\SDBUS\sdworki.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|SetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T35949| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M35946|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M35947|

			 ENDP  ; |SetEvent|

	EXPORT	|??0CLockObject@@QAA@XZ|		; CLockObject::CLockObject
	IMPORT	|InitializeCriticalSection|
; File c:\wince600\public\common\oak\inc\csync.h

  00000			 AREA	 |.pdata|, PDATA
|$T35959| DCD	|$LN5@CLockObjec|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CLockObject@@QAA@XZ| PROC		; CLockObject::CLockObject

; 36   :     CLockObject()

  00000		 |$LN5@CLockObjec|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M35956|
  00004	e1a04000	 mov         r4, r0

; 37   :     {
; 38   :         InitializeCriticalSection( &m_CSection );

  00008	eb000000	 bl          InitializeCriticalSection

; 39   :     };

  0000c	e1a00004	 mov         r0, r4
  00010	e8bd4010	 ldmia       sp!, {r4, lr}
  00014	e12fff1e	 bx          lr
  00018		 |$M35957|

			 ENDP  ; |??0CLockObject@@QAA@XZ|, CLockObject::CLockObject

	EXPORT	|??1CLockObject@@QAA@XZ|		; CLockObject::~CLockObject
	IMPORT	|DeleteCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T35967| DCD	|$LN5@CLockObjec@2|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CLockObject@@QAA@XZ| PROC		; CLockObject::~CLockObject

; 41   :     {

  00000		 |$LN5@CLockObjec@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M35964|

; 42   :         DeleteCriticalSection( &m_CSection );

  00004	eb000000	 bl          DeleteCriticalSection

; 43   :     };

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M35965|

			 ENDP  ; |??1CLockObject@@QAA@XZ|, CLockObject::~CLockObject

	EXPORT	|?Lock@CLockObject@@QAAXXZ|		; CLockObject::Lock
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T35975| DCD	|$LN5@Lock|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@CLockObject@@QAAXXZ| PROC	; CLockObject::Lock

; 45   :     {

  00000		 |$LN5@Lock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M35972|

; 46   :         EnterCriticalSection( &m_CSection );

  00004	eb000000	 bl          EnterCriticalSection

; 47   :     };

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M35973|

			 ENDP  ; |?Lock@CLockObject@@QAAXXZ|, CLockObject::Lock

	EXPORT	|?Unlock@CLockObject@@QAAXXZ|		; CLockObject::Unlock
	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T35983| DCD	|$LN5@Unlock|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Unlock@CLockObject@@QAAXXZ| PROC	; CLockObject::Unlock

; 49   :     {

  00000		 |$LN5@Unlock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M35980|

; 50   :         LeaveCriticalSection( &m_CSection );

  00004	eb000000	 bl          LeaveCriticalSection

; 51   :     };

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M35981|

			 ENDP  ; |?Unlock@CLockObject@@QAAXXZ|, CLockObject::Unlock

	EXPORT	|?ThreadStart@CMiniThread@@QAAHXZ|	; CMiniThread::ThreadStart
	IMPORT	|ResumeThread|
; File c:\wince600\public\common\oak\inc\cmthread.h

  00000			 AREA	 |.pdata|, PDATA
|$T35993| DCD	|$LN7@ThreadStar|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ThreadStart@CMiniThread@@QAAHXZ| PROC ; CMiniThread::ThreadStart

; 49   :     {

  00000		 |$LN7@ThreadStar|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M35990|
  00004	e1a04000	 mov         r4, r0

; 50   :         if( m_bSuspendFlag )

  00008	e5943010	 ldr         r3, [r4, #0x10]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000007	 beq         |$LN2@ThreadStar|

; 51   :         {
; 52   :             if( ResumeThread( m_hThreadHandle ) == ( DWORD ) ( -1 ) )

  00014	e5940008	 ldr         r0, [r4, #8]
  00018	eb000000	 bl          ResumeThread
  0001c	e3700001	 cmn         r0, #1

; 53   :             {
; 54   :                 // failure for resume somehow
; 55   :                 return FALSE;

  00020	03a00000	 moveq       r0, #0

; 60   :     }

  00024	08bd4010	 ldmeqia     sp!, {r4, lr}
  00028	012fff1e	 bxeq        lr

; 56   :             };
; 57   :             m_bSuspendFlag = FALSE;

  0002c	e3a03000	 mov         r3, #0
  00030	e5843010	 str         r3, [r4, #0x10]
  00034		 |$LN2@ThreadStar|

; 58   :         }
; 59   :         return TRUE;

  00034	e3a00001	 mov         r0, #1

; 60   :     }

  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M35991|

			 ENDP  ; |?ThreadStart@CMiniThread@@QAAHXZ|, CMiniThread::ThreadStart

	EXPORT	|?CeSetPriority@CMiniThread@@QAAHH@Z|	; CMiniThread::CeSetPriority
	IMPORT	|CeSetThreadPriority|

  00000			 AREA	 |.pdata|, PDATA
|$T36004| DCD	|$LN6@CeSetPrior|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CeSetPriority@CMiniThread@@QAAHH@Z| PROC ; CMiniThread::CeSetPriority

; 77   :     {

  00000		 |$LN6@CeSetPrior|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36001|

; 78   :         if( m_hThreadHandle )

  00004	e5903008	 ldr         r3, [r0, #8]
  00008	e3530000	 cmp         r3, #0
  0000c	0a000003	 beq         |$LN1@CeSetPrior|

; 79   :         {
; 80   :             return CeSetThreadPriority( m_hThreadHandle, nPriority );

  00010	e1a00003	 mov         r0, r3
  00014	eb000000	 bl          CeSetThreadPriority

; 83   :     }

  00018	e49de004	 ldr         lr, [sp], #4
  0001c	e12fff1e	 bx          lr
  00020		 |$LN1@CeSetPrior|

; 81   :         }
; 82   :         return FALSE;

  00020	e3a00000	 mov         r0, #0

; 83   :     }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$M36002|

			 ENDP  ; |?CeSetPriority@CMiniThread@@QAAHH@Z|, CMiniThread::CeSetPriority

	EXPORT	|?WaitThreadComplete@CMiniThread@@QAAHK@Z| ; CMiniThread::WaitThreadComplete
	IMPORT	|CloseHandle|
	IMPORT	|WaitForSingleObject|

  00000			 AREA	 |.pdata|, PDATA
|$T36015| DCD	|$LN8@WaitThread|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WaitThreadComplete@CMiniThread@@QAAHK@Z| PROC ; CMiniThread::WaitThreadComplete

; 92   :     {

  00000		 |$LN8@WaitThread|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36012|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 93   :         if( !m_hThreadHandle )

  0000c	e5943008	 ldr         r3, [r4, #8]
  00010	e3530000	 cmp         r3, #0

; 94   :         {
; 95   :             return FALSE;

  00014	0a00000e	 beq         |$LN1@WaitThread|

; 96   :         };
; 97   : 
; 98   :         if( ThreadStart() )

  00018	eb000000	 bl          |?ThreadStart@CMiniThread@@QAAHXZ|
  0001c	e3500000	 cmp         r0, #0
  00020	0a00000b	 beq         |$LN1@WaitThread|

; 99   :         {
; 100  :             if( ::WaitForSingleObject( m_hThreadHandle, dwMilliSeconds ) ==
; 101  :                 WAIT_OBJECT_0 )

  00024	e5940008	 ldr         r0, [r4, #8]
  00028	e1a01005	 mov         r1, r5
  0002c	eb000000	 bl          WaitForSingleObject
  00030	e3500000	 cmp         r0, #0
  00034	1a000006	 bne         |$LN1@WaitThread|

; 102  :             {
; 103  :                 // thread dead
; 104  :                 ::CloseHandle( m_hThreadHandle );

  00038	e5940008	 ldr         r0, [r4, #8]
  0003c	eb000000	 bl          CloseHandle

; 105  :                 m_hThreadHandle = NULL;

  00040	e3a03000	 mov         r3, #0
  00044	e5843008	 str         r3, [r4, #8]

; 106  :                 return TRUE;

  00048	e3a00001	 mov         r0, #1

; 110  :     }

  0004c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN1@WaitThread|

; 107  :             }
; 108  :         }
; 109  :         return FALSE;

  00054	e3a00000	 mov         r0, #0

; 110  :     }

  00058	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M36013|

			 ENDP  ; |?WaitThreadComplete@CMiniThread@@QAAHK@Z|, CMiniThread::WaitThreadComplete

	EXPORT	|?ForceTerminated@CMiniThread@@QAAHXZ|	; CMiniThread::ForceTerminated
	IMPORT	|TerminateThread|

  00000			 AREA	 |.pdata|, PDATA
|$T36026| DCD	|$LN6@ForceTermi|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ForceTerminated@CMiniThread@@QAAHXZ| PROC ; CMiniThread::ForceTerminated

; 113  :     {

  00000		 |$LN6@ForceTermi|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M36023|
  00004	e1a05000	 mov         r5, r0

; 114  :         if( m_hThreadHandle )

  00008	e5953008	 ldr         r3, [r5, #8]
  0000c	e3530000	 cmp         r3, #0
  00010	0a00000a	 beq         |$LN1@ForceTermi|

; 115  :         {
; 116  : //#pragma prefast(suppress: 258, "Try to recover from a pathological failure")
; 117  :             BOOL bReturn = ::TerminateThread( m_hThreadHandle, ( DWORD ) - 1 ); // terminate abnormal

  00014	e3e06000	 mvn         r6, #0
  00018	e1a01006	 mov         r1, r6
  0001c	e1a00003	 mov         r0, r3
  00020	eb000000	 bl          TerminateThread
  00024	e1a04000	 mov         r4, r0

; 118  :             m_dwExitCode = -1;
; 119  :             ::CloseHandle( m_hThreadHandle );

  00028	e5950008	 ldr         r0, [r5, #8]
  0002c	e5856014	 str         r6, [r5, #0x14]
  00030	eb000000	 bl          CloseHandle

; 120  :             m_hThreadHandle = NULL;

  00034	e3a03000	 mov         r3, #0
  00038	e5853008	 str         r3, [r5, #8]

; 121  :             return bReturn;

  0003c	ea000000	 b           |$LN2@ForceTermi|
  00040		 |$LN1@ForceTermi|

; 122  :         };
; 123  :         return TRUE;

  00040	e3a04001	 mov         r4, #1
  00044		 |$LN2@ForceTermi|

; 124  :     }

  00044	e1a00004	 mov         r0, r4
  00048	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M36024|

			 ENDP  ; |?ForceTerminated@CMiniThread@@QAAHXZ|, CMiniThread::ForceTerminated

	EXPORT	|?ThreadProc@CMiniThread@@CAKPAX@Z|	; CMiniThread::ThreadProc
	IMPORT	|ExitThread|

  00000			 AREA	 |.pdata|, PDATA
|$T36036| DCD	|$LN5@ThreadProc|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ThreadProc@CMiniThread@@CAKPAX@Z| PROC ; CMiniThread::ThreadProc

; 154  :     {

  00000		 |$LN5@ThreadProc|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36033|
  00004	e1a04000	 mov         r4, r0

; 155  :         CMiniThread* pThreadPtr = ( CMiniThread* ) dParam;
; 156  :         pThreadPtr->m_dwExitCode = pThreadPtr->ThreadRun();

  00008	e5943000	 ldr         r3, [r4]
  0000c	e5933000	 ldr         r3, [r3]
  00010	e1a0e00f	 mov         lr, pc
  00014	e12fff13	 bx          r3
  00018	e1a03000	 mov         r3, r0

; 157  :         ::ExitThread( pThreadPtr->m_dwExitCode );

  0001c	e5843014	 str         r3, [r4, #0x14]
  00020	eb000000	 bl          ExitThread

; 158  :         return pThreadPtr->m_dwExitCode;

  00024	e5940014	 ldr         r0, [r4, #0x14]

; 159  :     };

  00028	e8bd4010	 ldmia       sp!, {r4, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M36034|

			 ENDP  ; |?ThreadProc@CMiniThread@@CAKPAX@Z|, CMiniThread::ThreadProc

	EXPORT	|?IncIndex@CSDWorkItem@@QAAKK@Z|	; CSDWorkItem::IncIndex
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdworki.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36049| DCD	|$LN7@IncIndex|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IncIndex@CSDWorkItem@@QAAKK@Z| PROC	; CSDWorkItem::IncIndex

; 53   :     inline DWORD    IncIndex(DWORD dwIndex) {

  00000		 |$LN7@IncIndex|
  00000		 |$M36046|

; 54   :         return (dwIndex < m_dwMaxOfSlotEvent-1? dwIndex+1: 0 );

  00000	e590302c	 ldr         r3, [r0, #0x2C]
  00004	e2433001	 sub         r3, r3, #1
  00008	e1510003	 cmp         r1, r3
  0000c	32810001	 addcc       r0, r1, #1
  00010	23a00000	 movcs       r0, #0

; 55   :     }

  00014	e12fff1e	 bx          lr
  00018		 |$M36047|

			 ENDP  ; |?IncIndex@CSDWorkItem@@QAAKK@Z|, CSDWorkItem::IncIndex

	EXPORT	|?IsEmpty@CSDWorkItem@@QAAHXZ|		; CSDWorkItem::IsEmpty

  00000			 AREA	 |.pdata|, PDATA
|$T36061| DCD	|$LN7@IsEmpty|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsEmpty@CSDWorkItem@@QAAHXZ| PROC	; CSDWorkItem::IsEmpty

; 56   :     inline BOOL     IsEmpty() {

  00000		 |$LN7@IsEmpty|
  00000		 |$M36058|

; 57   :         return (m_dwReadIndex== m_dwWriteIndex);

  00000	e590203c	 ldr         r2, [r0, #0x3C]
  00004	e5903040	 ldr         r3, [r0, #0x40]
  00008	e1520003	 cmp         r2, r3
  0000c	03a00001	 moveq       r0, #1
  00010	13a00000	 movne       r0, #0

; 58   :     }

  00014	e12fff1e	 bx          lr
  00018		 |$M36059|

			 ENDP  ; |?IsEmpty@CSDWorkItem@@QAAHXZ|, CSDWorkItem::IsEmpty

	EXPORT	|?IsFull@CSDWorkItem@@QAAHXZ|		; CSDWorkItem::IsFull

  00000			 AREA	 |.pdata|, PDATA
|$T36082| DCD	|$LN11@IsFull|
	DCD	0x40000b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsFull@CSDWorkItem@@QAAHXZ| PROC	; CSDWorkItem::IsFull

; 59   :     inline BOOL     IsFull() {

  00000		 |$LN11@IsFull|
  00000		 |$M36079|

; 60   :         return (IncIndex(m_dwWriteIndex) == m_dwReadIndex);

  00000	e590302c	 ldr         r3, [r0, #0x2C]
  00004	e5902040	 ldr         r2, [r0, #0x40]
  00008	e2433001	 sub         r3, r3, #1
  0000c	e1520003	 cmp         r2, r3
  00010	e590303c	 ldr         r3, [r0, #0x3C]
  00014	32822001	 addcc       r2, r2, #1
  00018	23a02000	 movcs       r2, #0
  0001c	e1520003	 cmp         r2, r3
  00020	03a00001	 moveq       r0, #1
  00024	13a00000	 movne       r0, #0

; 61   :     };

  00028	e12fff1e	 bx          lr
  0002c		 |$M36080|

			 ENDP  ; |?IsFull@CSDWorkItem@@QAAHXZ|, CSDWorkItem::IsFull

	EXPORT	|?Init@CSDWorkItem@@QAAHK@Z|		; CSDWorkItem::Init
; File c:\wince600\public\common\oak\inc\cmthread.h

  00000			 AREA	 |.pdata|, PDATA
|$T36097| DCD	|$LN9@Init|
	DCD	0x40001701
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdworki.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Init@CSDWorkItem@@QAAHK@Z| PROC	; CSDWorkItem::Init

; 78   : {

  00000		 |$LN9@Init|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36094|
  00004	e1a04000	 mov         r4, r0

; 79   :     if (m_psdSlotEvent!=NULL && m_hWakeupEvent!=NULL && m_hEmptySlotSem!=NULL) {

  00008	e5943030	 ldr         r3, [r4, #0x30]
  0000c	e3530000	 cmp         r3, #0
  00010	0a00000e	 beq         |$LN1@Init|
  00014	e5943034	 ldr         r3, [r4, #0x34]
  00018	e3530000	 cmp         r3, #0
  0001c	0a00000b	 beq         |$LN1@Init|
  00020	e5943038	 ldr         r3, [r4, #0x38]
  00024	e3530000	 cmp         r3, #0
  00028	0a000008	 beq         |$LN1@Init|

; 80   :          CeSetPriority( (int)dwCeThreadPriority );

  0002c	e5943008	 ldr         r3, [r4, #8]
  00030	e3530000	 cmp         r3, #0
  00034	11a00003	 movne       r0, r3
  00038	1b000000	 blne        CeSetThreadPriority

; 81   :          ThreadStart();

  0003c	e1a00004	 mov         r0, r4
  00040	eb000000	 bl          |?ThreadStart@CMiniThread@@QAAHXZ|

; 82   :          return TRUE;

  00044	e3a00001	 mov         r0, #1

; 86   :     
; 87   : }

  00048	e8bd4010	 ldmia       sp!, {r4, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$LN1@Init|

; 83   :     };
; 84   :     ASSERT(FALSE);
; 85   :     return FALSE;

  00050	e3a00000	 mov         r0, #0

; 86   :     
; 87   : }

  00054	e8bd4010	 ldmia       sp!, {r4, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M36095|

			 ENDP  ; |?Init@CSDWorkItem@@QAAHK@Z|, CSDWorkItem::Init

	EXPORT	|?PostEvent@CSDWorkItem@@QAAHW4_SD_SLOT_EVENT@@K@Z| ; CSDWorkItem::PostEvent
; File c:\wince600\public\common\oak\inc\csync.h

  00000			 AREA	 |.pdata|, PDATA
|$T36149| DCD	|$LN26@PostEvent|
	DCD	0x40002601
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdworki.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PostEvent@CSDWorkItem@@QAAHW4_SD_SLOT_EVENT@@K@Z| PROC ; CSDWorkItem::PostEvent

; 97   : {

  00000		 |$LN26@PostEvent|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M36146|
  00004	e1a06001	 mov         r6, r1
  00008	e1a04000	 mov         r4, r0

; 98   :     PREFAST_ASSERT(m_psdSlotEvent!=NULL);
; 99   :     BOOL fRet = FALSE;
; 100  :     if (::WaitForSingleObject( m_hEmptySlotSem, dwWaitTick ) == WAIT_OBJECT_0 ) {

  0000c	e5940038	 ldr         r0, [r4, #0x38]
  00010	e1a01002	 mov         r1, r2
  00014	e3a05000	 mov         r5, #0
  00018	eb000000	 bl          WaitForSingleObject
  0001c	e3500000	 cmp         r0, #0
  00020	1a000019	 bne         |$LN22@PostEvent|

; 101  :         Lock();

  00024	e2840018	 add         r0, r4, #0x18
  00028	eb000000	 bl          EnterCriticalSection

; 102  :         if (!IsFull()) {

  0002c	e594302c	 ldr         r3, [r4, #0x2C]
  00030	e5940040	 ldr         r0, [r4, #0x40]
  00034	e2433001	 sub         r3, r3, #1
  00038	e1500003	 cmp         r0, r3
  0003c	e594303c	 ldr         r3, [r4, #0x3C]
  00040	32802001	 addcc       r2, r0, #1
  00044	23a02000	 movcs       r2, #0
  00048	e1520003	 cmp         r2, r3
  0004c	0a00000c	 beq         |$LN2@PostEvent|

; 103  :             m_psdSlotEvent[m_dwWriteIndex] = sdEvent;

  00050	e5943030	 ldr         r3, [r4, #0x30]

; 104  :             m_dwWriteIndex = IncIndex(m_dwWriteIndex);
; 105  :             SetEvent(m_hWakeupEvent);

  00054	e3a01003	 mov         r1, #3
  00058	e7836100	 str         r6, [r3, +r0, lsl #2]
  0005c	e594302c	 ldr         r3, [r4, #0x2C]
  00060	e5942040	 ldr         r2, [r4, #0x40]
  00064	e5940034	 ldr         r0, [r4, #0x34]
  00068	e2433001	 sub         r3, r3, #1
  0006c	e1520003	 cmp         r2, r3
  00070	32823001	 addcc       r3, r2, #1
  00074	23a03000	 movcs       r3, #0
  00078	e5843040	 str         r3, [r4, #0x40]
  0007c	eb000000	 bl          EventModify

; 106  :             fRet = TRUE;

  00080	e3a05001	 mov         r5, #1
  00084		 |$LN2@PostEvent|

; 107  :         }
; 108  :         else
; 109  :             ASSERT(FALSE);
; 110  :         Unlock();

  00084	e2840018	 add         r0, r4, #0x18
  00088	eb000000	 bl          LeaveCriticalSection
  0008c		 |$LN22@PostEvent|

; 111  :     }
; 112  :     return fRet;
; 113  : }

  0008c	e1a00005	 mov         r0, r5
  00090	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$M36147|

			 ENDP  ; |?PostEvent@CSDWorkItem@@QAAHW4_SD_SLOT_EVENT@@K@Z|, CSDWorkItem::PostEvent

	EXPORT	|?ThreadRun@CSDWorkItem@@EAAKXZ|	; CSDWorkItem::ThreadRun
	IMPORT	|ReleaseSemaphore|
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdworki.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36178| DCD	|$LN19@ThreadRun|
	DCD	0x40002301
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdworki.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ThreadRun@CSDWorkItem@@EAAKXZ| PROC	; CSDWorkItem::ThreadRun

; 116  : {

  00000		 |$LN19@ThreadRun|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36175|
  00004	e1a04000	 mov         r4, r0

; 117  :     while (!m_bTerminated) {

  00008	ea000019	 b           |$LN1@ThreadRun|
  0000c		 |$LL4@ThreadRun|

; 118  :         PREFAST_ASSERT(m_psdSlotEvent!=NULL);
; 119  :         if (!IsEmpty()) {

  0000c	e594103c	 ldr         r1, [r4, #0x3C]
  00010	e5943040	 ldr         r3, [r4, #0x40]
  00014	e1510003	 cmp         r1, r3
  00018	0a000012	 beq         |$LN2@ThreadRun|

; 120  :             // We don't need take lock since only this thread modify the Read Index.
; 121  :             SD_SLOT_EVENT sdEvent = m_psdSlotEvent [m_dwReadIndex];
; 122  :             m_dwReadIndex = IncIndex(m_dwReadIndex);

  0001c	e594302c	 ldr         r3, [r4, #0x2C]
  00020	e5942030	 ldr         r2, [r4, #0x30]

; 123  :             BOOL fRet = ReleaseSemaphore(m_hEmptySlotSem,1,NULL);

  00024	e5940038	 ldr         r0, [r4, #0x38]
  00028	e2433001	 sub         r3, r3, #1
  0002c	e1510003	 cmp         r1, r3
  00030	e7925101	 ldr         r5, [r2, +r1, lsl #2]
  00034	32813001	 addcc       r3, r1, #1
  00038	23a03000	 movcs       r3, #0
  0003c	e3a02000	 mov         r2, #0
  00040	e3a01001	 mov         r1, #1
  00044	e584303c	 str         r3, [r4, #0x3C]
  00048	eb000000	 bl          ReleaseSemaphore

; 124  :             ASSERT(fRet);
; 125  :             SlotStatusChangeProcessing(sdEvent);

  0004c	e5943000	 ldr         r3, [r4]
  00050	e1a01005	 mov         r1, r5
  00054	e1a00004	 mov         r0, r4
  00058	e5933004	 ldr         r3, [r3, #4]
  0005c	e1a0e00f	 mov         lr, pc
  00060	e12fff13	 bx          r3

; 126  :         }
; 127  :         else

  00064	ea000002	 b           |$LN1@ThreadRun|
  00068		 |$LN2@ThreadRun|

; 128  :             ::WaitForSingleObject( m_hWakeupEvent, INFINITE );

  00068	e5940034	 ldr         r0, [r4, #0x34]
  0006c	e3e01000	 mvn         r1, #0
  00070	eb000000	 bl          WaitForSingleObject
  00074		 |$LN1@ThreadRun|
  00074	e5943004	 ldr         r3, [r4, #4]
  00078	e3530000	 cmp         r3, #0
  0007c	0affffe2	 beq         |$LL4@ThreadRun|

; 129  :     }
; 130  :     return FALSE;

  00080	e3a00000	 mov         r0, #0

; 131  : }

  00084	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$M36176|

			 ENDP  ; |?ThreadRun@CSDWorkItem@@EAAKXZ|, CSDWorkItem::ThreadRun

	EXPORT	|??0CMiniThread@@QAA@KH@Z|		; CMiniThread::CMiniThread
	EXPORT	|??_7CMiniThread@@6B@| [ DATA ]		; CMiniThread::`vftable'
	IMPORT	|CreateThread|
	IMPORT	|_purecall|
; File c:\wince600\public\common\oak\inc\cmthread.h

  00000			 AREA	 |.pdata|, PDATA
|$T36192| DCD	|$LN7@CMiniThrea|
	DCD	0x40001b02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CMiniThread@@6B@| DCD |_purecall|			; CMiniThread::`vftable'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CMiniThread@@QAA@KH@Z| PROC	; CMiniThread::CMiniThread

; 29   :     CMiniThread( DWORD dwStackSize = 0, BOOL bSuspended = FALSE )

  00000		 |$LN7@CMiniThrea|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M36189|
  00008	e1b06002	 movs        r6, r2
  0000c	e1a05000	 mov         r5, r0
  00010	e59f3050	 ldr         r3, [pc, #0x50]

; 30   :     {
; 31   :         m_bTerminated = FALSE;

  00014	e3a02000	 mov         r2, #0

; 32   :         m_dwExitCode = ( DWORD ) - 1;

  00018	e5852004	 str         r2, [r5, #4]

; 33   :         m_hThreadHandle = ::CreateThread( NULL,
; 34   :                                           dwStackSize,
; 35   :                                           CMiniThread::ThreadProc,
; 36   :                                           ( LPVOID )this,
; 37   :                                           bSuspended ? CREATE_SUSPENDED : 0,
; 38   :                                           &m_dwThreadId );

  0001c	e59f2040	 ldr         r2, [pc, #0x40]
  00020	e3e00000	 mvn         r0, #0
  00024	13a04004	 movne       r4, #4
  00028	e5853000	 str         r3, [r5]
  0002c	e5850014	 str         r0, [r5, #0x14]
  00030	03a04000	 moveq       r4, #0
  00034	e285e00c	 add         lr, r5, #0xC
  00038	e1a03005	 mov         r3, r5
  0003c	e3a00000	 mov         r0, #0
  00040	e58de004	 str         lr, [sp, #4]
  00044	e58d4000	 str         r4, [sp]
  00048	eb000000	 bl          CreateThread
  0004c	e5850008	 str         r0, [r5, #8]

; 39   :         m_bSuspendFlag = bSuspended;
; 40   :     };

  00050	e1a00005	 mov         r0, r5
  00054	e5856010	 str         r6, [r5, #0x10]
  00058	e28dd008	 add         sp, sp, #8
  0005c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN8@CMiniThrea|
  00064		 |$LN9@CMiniThrea|
  00064	00000000	 DCD         |?ThreadProc@CMiniThread@@CAKPAX@Z|
  00068		 |$LN10@CMiniThrea|
  00068	00000000	 DCD         |??_7CMiniThread@@6B@|
  0006c		 |$M36190|

			 ENDP  ; |??0CMiniThread@@QAA@KH@Z|, CMiniThread::CMiniThread

	EXPORT	|??1CMiniThread@@QAA@XZ|		; CMiniThread::~CMiniThread

  00000			 AREA	 |.pdata|, PDATA
|$T36203| DCD	|$LN5@CMiniThrea@2|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CMiniThread@@QAA@XZ| PROC		; CMiniThread::~CMiniThread

; 44   :     {

  00000		 |$LN5@CMiniThrea@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36200|
  00004	e1a02000	 mov         r2, r0
  00008	e59f300c	 ldr         r3, [pc, #0xC]

; 45   :         ForceTerminated();

  0000c	e5823000	 str         r3, [r2]
  00010	eb000000	 bl          |?ForceTerminated@CMiniThread@@QAAHXZ|

; 46   :     }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$LN6@CMiniThrea@2|
  0001c		 |$LN7@CMiniThrea@2|
  0001c	00000000	 DCD         |??_7CMiniThread@@6B@|
  00020		 |$M36201|

			 ENDP  ; |??1CMiniThread@@QAA@XZ|, CMiniThread::~CMiniThread

	EXPORT	|??0CSDWorkItem@@QAA@K@Z|		; CSDWorkItem::CSDWorkItem
	EXPORT	|??_7CSDWorkItem@@6B@| [ DATA ]		; CSDWorkItem::`vftable'
	IMPORT	|CreateSemaphoreW|
	IMPORT	|CreateEventW|
	IMPORT	|??2@YAPAXI@Z|				; operator new
; File c:\wince600\public\common\oak\inc\csync.h

  00000			 AREA	 |.pdata|, PDATA
|$T36225| DCD	|$LN11@CSDWorkIte|
	DCD	0x40002901

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CSDWorkItem@@6B@| DCD |?ThreadRun@CSDWorkItem@@EAAKXZ| ; CSDWorkItem::`vftable'
	DCD	|_purecall|
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdworki.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CSDWorkItem@@QAA@K@Z| PROC		; CSDWorkItem::CSDWorkItem

; 47   : {

  00000		 |$LN11@CSDWorkIte|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36222|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	e2850018	 add         r0, r5, #0x18
  00010	eb000000	 bl          InitializeCriticalSection
  00014	e3a02001	 mov         r2, #1
  00018	e3a01000	 mov         r1, #0
  0001c	e1a00005	 mov         r0, r5
  00020	eb000000	 bl          |??0CMiniThread@@QAA@KH@Z|
  00024	e3540010	 cmp         r4, #0x10
  00028	93a04010	 movls       r4, #0x10
  0002c	e59f306c	 ldr         r3, [pc, #0x6C]

; 48   :     m_psdSlotEvent = new SD_SLOT_EVENT [m_dwMaxOfSlotEvent];

  00030	e3740107	 cmn         r4, #7, 2
  00034	91a00104	 movls       r0, r4, lsl #2
  00038	83e00000	 mvnhi       r0, #0
  0003c	e5853000	 str         r3, [r5]
  00040	e585402c	 str         r4, [r5, #0x2C]
  00044	eb000000	 bl          |??2@YAPAXI@Z|
  00048	e1a03000	 mov         r3, r0

; 49   :     m_hWakeupEvent = CreateEvent(NULL,FALSE,TRUE,NULL);

  0004c	e5853030	 str         r3, [r5, #0x30]
  00050	e3a03000	 mov         r3, #0
  00054	e3a00000	 mov         r0, #0
  00058	e3a02001	 mov         r2, #1
  0005c	e3a01000	 mov         r1, #0
  00060	eb000000	 bl          CreateEventW

; 50   :     m_hEmptySlotSem = CreateSemaphore(NULL, m_dwMaxOfSlotEvent-1, m_dwMaxOfSlotEvent-1,NULL);

  00064	e595102c	 ldr         r1, [r5, #0x2C]
  00068	e1a0e000	 mov         lr, r0
  0006c	e3a03000	 mov         r3, #0
  00070	e2412001	 sub         r2, r1, #1
  00074	e2411001	 sub         r1, r1, #1
  00078	e3a00000	 mov         r0, #0
  0007c	e585e034	 str         lr, [r5, #0x34]
  00080	eb000000	 bl          CreateSemaphoreW

; 51   :     m_dwReadIndex = m_dwWriteIndex = 0; 

  00084	e3a03000	 mov         r3, #0
  00088	e5850038	 str         r0, [r5, #0x38]
  0008c	e5853040	 str         r3, [r5, #0x40]
  00090	e585303c	 str         r3, [r5, #0x3C]

; 52   : }

  00094	e1a00005	 mov         r0, r5
  00098	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN12@CSDWorkIte|
  000a0		 |$LN13@CSDWorkIte|
  000a0	00000000	 DCD         |??_7CSDWorkItem@@6B@|
  000a4		 |$M36223|

			 ENDP  ; |??0CSDWorkItem@@QAA@K@Z|, CSDWorkItem::CSDWorkItem

	EXPORT	|??1CSDWorkItem@@QAA@XZ|		; CSDWorkItem::~CSDWorkItem
	IMPORT	|??3@YAXPAX@Z|				; operator delete
; File c:\wince600\public\common\oak\inc\csync.h

  00000			 AREA	 |.pdata|, PDATA
|$T36250| DCD	|$LN16@CSDWorkIte@2|
	DCD	0x40002401
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdworki.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CSDWorkItem@@QAA@XZ| PROC		; CSDWorkItem::~CSDWorkItem

; 62   : {

  00000		 |$LN16@CSDWorkIte@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36247|
  00004	e1a04000	 mov         r4, r0
  00008	e59f307c	 ldr         r3, [pc, #0x7C]

; 63   : 
; 64   :     m_bTerminated = TRUE;

  0000c	e3a02001	 mov         r2, #1

; 65   :     ThreadStart();

  00010	e5842004	 str         r2, [r4, #4]
  00014	e5843000	 str         r3, [r4]
  00018	eb000000	 bl          |?ThreadStart@CMiniThread@@QAAHXZ|

; 66   :     if ( m_hWakeupEvent )

  0001c	e5943034	 ldr         r3, [r4, #0x34]
  00020	e3530000	 cmp         r3, #0

; 67   :         SetEvent(m_hWakeupEvent);

  00024	13a01003	 movne       r1, #3
  00028	11a00003	 movne       r0, r3
  0002c	1b000000	 blne        EventModify
  00030	e3a03c13	 mov         r3, #0x13, 24

; 68   :     BOOL fRet = WaitThreadComplete( 5000 );

  00034	e3831088	 orr         r1, r3, #0x88
  00038	e1a00004	 mov         r0, r4
  0003c	eb000000	 bl          |?WaitThreadComplete@CMiniThread@@QAAHK@Z|

; 69   :     ASSERT(fRet);
; 70   :     if (m_hEmptySlotSem!=NULL)

  00040	e5943038	 ldr         r3, [r4, #0x38]
  00044	e3530000	 cmp         r3, #0

; 71   :         CloseHandle(m_hEmptySlotSem);

  00048	11a00003	 movne       r0, r3
  0004c	1b000000	 blne        CloseHandle

; 72   :     if (m_hWakeupEvent!=NULL)

  00050	e5943034	 ldr         r3, [r4, #0x34]
  00054	e3530000	 cmp         r3, #0

; 73   :         CloseHandle(m_hWakeupEvent);

  00058	11a00003	 movne       r0, r3
  0005c	1b000000	 blne        CloseHandle

; 74   :     delete m_psdSlotEvent;

  00060	e5940030	 ldr         r0, [r4, #0x30]
  00064	eb000000	 bl          |??3@YAXPAX@Z|

; 75   : }

  00068	e59f3018	 ldr         r3, [pc, #0x18]
  0006c	e1a00004	 mov         r0, r4
  00070	e5843000	 str         r3, [r4]
  00074	eb000000	 bl          |?ForceTerminated@CMiniThread@@QAAHXZ|
  00078	e2840018	 add         r0, r4, #0x18
  0007c	eb000000	 bl          DeleteCriticalSection
  00080	e8bd4010	 ldmia       sp!, {r4, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN17@CSDWorkIte@2|
  00088		 |$LN18@CSDWorkIte@2|
  00088	00000000	 DCD         |??_7CMiniThread@@6B@|
  0008c		 |$LN19@CSDWorkIte@2|
  0008c	00000000	 DCD         |??_7CSDWorkItem@@6B@|
  00090		 |$M36248|

			 ENDP  ; |??1CSDWorkItem@@QAA@XZ|, CSDWorkItem::~CSDWorkItem

	END
