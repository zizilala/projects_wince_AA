; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\DRIVERS\SDBUS\sdbusreq.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?g_dwRequestIndex@CSDBusRequest@@0KA| [ DATA ] ; CSDBusRequest::g_dwRequestIndex

  00000			 AREA	 |.bss|, NOINIT
|?g_dwRequestIndex@CSDBusRequest@@0KA| % 0x4		; CSDBusRequest::g_dwRequestIndex
	EXPORT	|?GetRetryCount@CSDHostContainer@@SAKXZ| ; CSDHostContainer::GetRetryCount
	IMPORT	|?g_pSdContainer@CSDHostContainer@@0PAV1@A| ; CSDHostContainer::g_pSdContainer
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdbus.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36644| DCD	|$LN7@GetRetryCo|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetRetryCount@CSDHostContainer@@SAKXZ| PROC ; CSDHostContainer::GetRetryCount

; 184  :     static DWORD    GetRetryCount()  { return g_pSdContainer!=NULL? g_pSdContainer->m_BusRequestRetryCount: 0; };

  00000		 |$LN7@GetRetryCo|
  00000		 |$M36641|
  00000	e59f3010	 ldr         r3, [pc, #0x10]
  00004	e5933000	 ldr         r3, [r3]
  00008	e3530000	 cmp         r3, #0
  0000c	159300b0	 ldrne       r0, [r3, #0xB0]
  00010	03a00000	 moveq       r0, #0
  00014	e12fff1e	 bx          lr
  00018		 |$LN8@GetRetryCo|
  00018		 |$LN9@GetRetryCo|
  00018	00000000	 DCD         |?g_pSdContainer@CSDHostContainer@@0PAV1@A|
  0001c		 |$M36642|

			 ENDP  ; |?GetRetryCount@CSDHostContainer@@SAKXZ|, CSDHostContainer::GetRetryCount

	EXPORT	|?GetDeviceType@CSDDevice@@QAA?AW4_SDCARD_DEVICE_TYPE@@XZ| ; CSDDevice::GetDeviceType
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sddevice.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36656| DCD	|$LN5@GetDeviceT|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDeviceType@CSDDevice@@QAA?AW4_SDCARD_DEVICE_TYPE@@XZ| PROC ; CSDDevice::GetDeviceType

; 134  :     SDCARD_DEVICE_TYPE GetDeviceType() { return m_DeviceType; };

  00000		 |$LN5@GetDeviceT|
  00000		 |$M36653|
  00000	e5900494	 ldr         r0, [r0, #0x494]
  00004	e12fff1e	 bx          lr
  00008		 |$M36654|

			 ENDP  ; |?GetDeviceType@CSDDevice@@QAA?AW4_SDCARD_DEVICE_TYPE@@XZ|, CSDDevice::GetDeviceType

	EXPORT	|?GetCardInfo@CSDDevice@@QAAAAU_SDCARD_INFORMATION@@XZ| ; CSDDevice::GetCardInfo

  00000			 AREA	 |.pdata|, PDATA
|$T36666| DCD	|$LN5@GetCardInf|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetCardInfo@CSDDevice@@QAAAAU_SDCARD_INFORMATION@@XZ| PROC ; CSDDevice::GetCardInfo

; 149  :     SDCARD_INFORMATION& GetCardInfo() { return m_SDCardInfo; };

  00000		 |$LN5@GetCardInf|
  00000		 |$M36663|
  00000	e2803b01	 add         r3, r0, #1, 22
  00004	e28300d8	 add         r0, r3, #0xD8
  00008	e12fff1e	 bx          lr
  0000c		 |$M36664|

			 ENDP  ; |?GetCardInfo@CSDDevice@@QAAAAU_SDCARD_INFORMATION@@XZ|, CSDDevice::GetCardInfo

	EXPORT	|?GetDeviceContext@CSDDevice@@QAAPAXXZ|	; CSDDevice::GetDeviceContext

  00000			 AREA	 |.pdata|, PDATA
|$T36676| DCD	|$LN5@GetDeviceC|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDeviceContext@CSDDevice@@QAAPAXXZ| PROC ; CSDDevice::GetDeviceContext

; 151  :     PVOID   GetDeviceContext() { return m_pDeviceContext; };

  00000		 |$LN5@GetDeviceC|
  00000		 |$M36673|
  00000	e5900498	 ldr         r0, [r0, #0x498]
  00004	e12fff1e	 bx          lr
  00008		 |$M36674|

			 ENDP  ; |?GetDeviceContext@CSDDevice@@QAAPAXXZ|, CSDDevice::GetDeviceContext

	EXPORT	|?GetClientFlags@CSDDevice@@QAAKXZ|	; CSDDevice::GetClientFlags

  00000			 AREA	 |.pdata|, PDATA
|$T36686| DCD	|$LN5@GetClientF|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetClientFlags@CSDDevice@@QAAKXZ| PROC ; CSDDevice::GetClientFlags

; 174  :     DWORD   GetClientFlags() { return m_ClientFlags; };

  00000		 |$LN5@GetClientF|
  00000		 |$M36683|
  00000	e5900490	 ldr         r0, [r0, #0x490]
  00004	e12fff1e	 bx          lr
  00008		 |$M36684|

			 ENDP  ; |?GetClientFlags@CSDDevice@@QAAKXZ|, CSDDevice::GetClientFlags

	EXPORT	|?IsComplete@CSDBusRequest@@QAAHXZ|	; CSDBusRequest::IsComplete
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdbusreq.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36698| DCD	|$LN9@IsComplete|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsComplete@CSDBusRequest@@QAAHXZ| PROC ; CSDBusRequest::IsComplete

; 99   :     BOOL    IsComplete() { 

  00000		 |$LN9@IsComplete|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36695|

; 100  :         if (m_pChildListNext) 

  00004	e5903070	 ldr         r3, [r0, #0x70]
  00008	e1b02003	 movs        r2, r3
  0000c	0a00000b	 beq         |$LN2@IsComplete|

; 101  :             return (m_fCompleted && m_pChildListNext->IsComplete());

  00010	e5903080	 ldr         r3, [r0, #0x80]
  00014	e3530000	 cmp         r3, #0
  00018	0a000005	 beq         |$LN5@IsComplete|
  0001c	e1a00002	 mov         r0, r2
  00020	eb000000	 bl          |?IsComplete@CSDBusRequest@@QAAHXZ|
  00024	e3500000	 cmp         r0, #0
  00028	13a00001	 movne       r0, #1

; 104  :     };

  0002c	149de004	 ldrne       lr, [sp], #4
  00030	112fff1e	 bxne        lr
  00034		 |$LN5@IsComplete|

; 101  :             return (m_fCompleted && m_pChildListNext->IsComplete());

  00034	e3a00000	 mov         r0, #0

; 104  :     };

  00038	e49de004	 ldr         lr, [sp], #4
  0003c	e12fff1e	 bx          lr
  00040		 |$LN2@IsComplete|

; 102  :         else
; 103  :             return m_fCompleted; 

  00040	e5900080	 ldr         r0, [r0, #0x80]

; 104  :     };

  00044	e49de004	 ldr         lr, [sp], #4
  00048	e12fff1e	 bx          lr
  0004c		 |$M36696|

			 ENDP  ; |?IsComplete@CSDBusRequest@@QAAHXZ|, CSDBusRequest::IsComplete

	EXPORT	|?AddRef@CSDBusRequest@@QAAKXZ|		; CSDBusRequest::AddRef
	IMPORT	|InterlockedIncrement|

  00000			 AREA	 |.pdata|, PDATA
|$T36708| DCD	|$LN5@AddRef|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AddRef@CSDBusRequest@@QAAKXZ| PROC	; CSDBusRequest::AddRef

; 107  :     DWORD AddRef( void ) {

  00000		 |$LN5@AddRef|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36705|

; 108  :         return (DWORD)InterlockedIncrement(&m_lRefCount);

  00004	e280007c	 add         r0, r0, #0x7C
  00008	eb000000	 bl          InterlockedIncrement

; 109  :     };

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M36706|

			 ENDP  ; |?AddRef@CSDBusRequest@@QAAKXZ|, CSDBusRequest::AddRef

	EXPORT	|?DeRef@CSDBusRequest@@QAAKXZ|		; CSDBusRequest::DeRef
	IMPORT	|InterlockedDecrement|

  00000			 AREA	 |.pdata|, PDATA
|$T36723| DCD	|$LN8@DeRef|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DeRef@CSDBusRequest@@QAAKXZ| PROC	; CSDBusRequest::DeRef

; 110  :     DWORD DeRef( void ) {

  00000		 |$LN8@DeRef|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36720|
  00004	e1a04000	 mov         r4, r0

; 111  :         LONG lReturn = InterlockedDecrement(&m_lRefCount);

  00008	e284007c	 add         r0, r4, #0x7C
  0000c	eb000000	 bl          InterlockedDecrement
  00010	e1a05000	 mov         r5, r0

; 112  :         // Last thing to do
; 113  :         if( lReturn <= 0 ) {

  00014	e3550000	 cmp         r5, #0
  00018	ca000006	 bgt         |$LN4@DeRef|

; 114  :             delete this;

  0001c	e3540000	 cmp         r4, #0
  00020	15943000	 ldrne       r3, [r4]
  00024	13a01001	 movne       r1, #1
  00028	11a00004	 movne       r0, r4
  0002c	15933000	 ldrne       r3, [r3]
  00030	11a0e00f	 movne       lr, pc
  00034	112fff13	 bxne        r3
  00038		 |$LN4@DeRef|

; 115  :         }
; 116  :         return (DWORD)lReturn;
; 117  :     }

  00038	e1a00005	 mov         r0, r5
  0003c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M36721|

			 ENDP  ; |?DeRef@CSDBusRequest@@QAAKXZ|, CSDBusRequest::DeRef

	EXPORT	|?GetRetryCount@CSDBusRequest@@QAAKXZ|	; CSDBusRequest::GetRetryCount

  00000			 AREA	 |.pdata|, PDATA
|$T36733| DCD	|$LN5@GetRetryCo@2|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetRetryCount@CSDBusRequest@@QAAKXZ| PROC ; CSDBusRequest::GetRetryCount

; 120  :     DWORD GetRetryCount(){ return (SystemFlags & SYSTEM_FLAGS_RETRY_COUNT_MASK); };

  00000		 |$LN5@GetRetryCo@2|
  00000		 |$M36730|
  00000	e5903010	 ldr         r3, [r0, #0x10]
  00004	e20300ff	 and         r0, r3, #0xFF
  00008	e12fff1e	 bx          lr
  0000c		 |$M36731|

			 ENDP  ; |?GetRetryCount@CSDBusRequest@@QAAKXZ|, CSDBusRequest::GetRetryCount

	EXPORT	|?SetChildListNext@CSDBusRequest@@QAAXPAV1@@Z| ; CSDBusRequest::SetChildListNext

  00000			 AREA	 |.pdata|, PDATA
|$T36747| DCD	|$LN12@SetChildLi|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetChildListNext@CSDBusRequest@@QAAXPAV1@@Z| PROC ; CSDBusRequest::SetChildListNext

; 132  :     void SetChildListNext(CSDBusRequest * pNextBusRequest) { 

  00000		 |$LN12@SetChildLi|
  00000		 |$M36744|

; 133  :         if (m_pChildListNext!=NULL) {

  00000	ea000000	 b           |$LN9@SetChildLi|
  00004		 |$LL5@SetChildLi|

; 134  :             m_pChildListNext->SetChildListNext(pNextBusRequest);

  00004	e5900070	 ldr         r0, [r0, #0x70]
  00008		 |$LN9@SetChildLi|
  00008	e5903070	 ldr         r3, [r0, #0x70]
  0000c	e3530000	 cmp         r3, #0
  00010	1afffffb	 bne         |$LL5@SetChildLi|

; 135  :         }
; 136  :         else 
; 137  :             m_pChildListNext = pNextBusRequest; 

  00014	e5801070	 str         r1, [r0, #0x70]

; 138  :     };

  00018	e12fff1e	 bx          lr
  0001c		 |$M36745|

			 ENDP  ; |?SetChildListNext@CSDBusRequest@@QAAXPAV1@@Z|, CSDBusRequest::SetChildListNext

	EXPORT	|?GetFirstFailedStatus@CSDBusRequest@@QAAJXZ| ; CSDBusRequest::GetFirstFailedStatus

  00000			 AREA	 |.pdata|, PDATA
|$T36762| DCD	|$LN12@GetFirstFa|
	DCD	0x40000b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetFirstFailedStatus@CSDBusRequest@@QAAJXZ| PROC ; CSDBusRequest::GetFirstFailedStatus

; 158  :     SD_API_STATUS GetFirstFailedStatus() {

  00000		 |$LN12@GetFirstFa|
  00000		 |$M36759|

; 159  :         if (SD_API_SUCCESS(Status) && m_pChildListNext!=NULL )

  00000	e590303c	 ldr         r3, [r0, #0x3C]
  00004	ea000004	 b           |$LN9@GetFirstFa|
  00008		 |$LL5@GetFirstFa|
  00008	e5903070	 ldr         r3, [r0, #0x70]
  0000c	e1b02003	 movs        r2, r3
  00010	0a000003	 beq         |$LN8@GetFirstFa|
  00014	e592303c	 ldr         r3, [r2, #0x3C]

; 160  :             return m_pChildListNext->GetFirstFailedStatus();

  00018	e1a00002	 mov         r0, r2
  0001c		 |$LN9@GetFirstFa|
  0001c	e3530000	 cmp         r3, #0
  00020	aafffff8	 bge         |$LL5@GetFirstFa|
  00024		 |$LN8@GetFirstFa|

; 161  :         else
; 162  :             return Status;

  00024	e590003c	 ldr         r0, [r0, #0x3C]

; 163  :     }

  00028	e12fff1e	 bx          lr
  0002c		 |$M36760|

			 ENDP  ; |?GetFirstFailedStatus@CSDBusRequest@@QAAJXZ|, CSDBusRequest::GetFirstFailedStatus

	EXPORT	|?TerminateLink@CSDBusRequest@@QAAHXZ|	; CSDBusRequest::TerminateLink
	IMPORT	|InterlockedExchange|

  00000			 AREA	 |.pdata|, PDATA
|$T36774| DCD	|$LN7@TerminateL|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?TerminateLink@CSDBusRequest@@QAAHXZ| PROC ; CSDBusRequest::TerminateLink

; 164  :     BOOL    TerminateLink()  {

  00000		 |$LN7@TerminateL|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36771|
  00004	e1a04000	 mov         r4, r0

; 165  :         CSDBusRequest * pCur = (CSDBusRequest *)InterlockedExchange((LONG *)&m_pChildListNext,(LONG)NULL);

  00008	e3a01000	 mov         r1, #0
  0000c	e2840070	 add         r0, r4, #0x70
  00010	eb000000	 bl          InterlockedExchange
  00014	e3500000	 cmp         r0, #0

; 166  :         if (pCur) {
; 167  :             pCur->DeRef();

  00018	1b000000	 blne        |?DeRef@CSDBusRequest@@QAAKXZ|

; 168  :         }
; 169  :         pCur = (CSDBusRequest *)InterlockedExchange((LONG *)&m_pParentBus,(LONG)NULL);

  0001c	e3a01000	 mov         r1, #0
  00020	e284006c	 add         r0, r4, #0x6C
  00024	eb000000	 bl          InterlockedExchange
  00028	e3500000	 cmp         r0, #0

; 170  :         if (pCur) {
; 171  :             pCur->DeRef();

  0002c	1b000000	 blne        |?DeRef@CSDBusRequest@@QAAKXZ|

; 172  :         }
; 173  :         return TRUE;

  00030	e3a00001	 mov         r0, #1

; 174  :     }

  00034	e8bd4010	 ldmia       sp!, {r4, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M36772|

			 ENDP  ; |?TerminateLink@CSDBusRequest@@QAAHXZ|, CSDBusRequest::TerminateLink

	EXPORT	|??2CSDBusRequest@@SAPAXI@Z|		; CSDBusRequest::operator new
	IMPORT	|?AllocateBusRequest@CSDHostContainer@@SAPAXI@Z| ; CSDHostContainer::AllocateBusRequest
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdbusreq.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T36784| DCD	|$LN5@operator|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??2CSDBusRequest@@SAPAXI@Z| PROC	; CSDBusRequest::operator new

; 41   : {

  00000		 |$LN5@operator|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36781|

; 42   :     return CSDHostContainer::AllocateBusRequest(stSize);

  00004	eb000000	 bl          |?AllocateBusRequest@CSDHostContainer@@SAPAXI@Z|

; 43   : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M36782|

			 ENDP  ; |??2CSDBusRequest@@SAPAXI@Z|, CSDBusRequest::operator new

	EXPORT	|??3CSDBusRequest@@SAXPAX@Z|		; CSDBusRequest::operator delete
	IMPORT	|?FreeBusRequest@CSDHostContainer@@SAXPAVCSDBusRequest@@@Z| ; CSDHostContainer::FreeBusRequest

  00000			 AREA	 |.pdata|, PDATA
|$T36792| DCD	|$LN5@operator@2|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??3CSDBusRequest@@SAXPAX@Z| PROC	; CSDBusRequest::operator delete

; 45   : {

  00000		 |$LN5@operator@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36789|

; 46   :     CSDHostContainer::FreeBusRequest((CSDBusRequest *)pointer);

  00004	eb000000	 bl          |?FreeBusRequest@CSDHostContainer@@SAXPAVCSDBusRequest@@@Z|

; 47   : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M36790|

			 ENDP  ; |??3CSDBusRequest@@SAXPAX@Z|, CSDBusRequest::operator delete

	EXPORT	|??0CSDBusRequest@@QAA@AAVCSDDevice@@AAU_SD_BUS_REQUEST@@PAXPAV0@@Z| ; CSDBusRequest::CSDBusRequest
	EXPORT	|??_7CSDBusRequest@@6B@| [ DATA ]	; CSDBusRequest::`vftable'
	EXPORT	|?Init@CSDBusRequest@@UAAHXZ|		; CSDBusRequest::Init
	IMPORT	|CeAllocAsynchronousBuffer|
	IMPORT	|?GetDeviceHandle@CSDDevice@@QAA?AT__SDBUS_DEVICE_HANDLE@@XZ| ; CSDDevice::GetDeviceHandle
	IMPORT	|??_ECSDBusRequest@@UAAPAXI@Z|, WEAK |??_GCSDBusRequest@@UAAPAXI@Z| ; CSDBusRequest::`vector deleting destructor', CSDBusRequest::`scalar deleting destructor'
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdbusreq.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36811| DCD	|$LN12@CSDBusRequ|
	DCD	0x40005e02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CSDBusRequest@@6B@| DCD |??_ECSDBusRequest@@UAAPAXI@Z| ; CSDBusRequest::`vftable'
	DCD	|?Init@CSDBusRequest@@UAAHXZ|
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdbusreq.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CSDBusRequest@@QAA@AAVCSDDevice@@AAU_SD_BUS_REQUEST@@PAXPAV0@@Z| PROC ; CSDBusRequest::CSDBusRequest

; 53   : {

  00000		 |$LN12@CSDBusRequ|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36808|
  00008	e1a06002	 mov         r6, r2
  0000c	e1a05000	 mov         r5, r0
  00010	e59d4014	 ldr         r4, [sp, #0x14]
  00014	e59fe158	 ldr         lr, [pc, #0x158]

; 54   :     m_lRefCount = 0;
; 55   :     m_pAsyncQueueNext = NULL;
; 56   :     m_pChildListNext = NULL;
; 57   : 
; 58   :     m_dwRequestIndex = (SDBUS_REQUEST_INDEX_MASK & (DWORD)InterlockedIncrement((PLONG)&g_dwRequestIndex));

  00018	e59f0150	 ldr         r0, [pc, #0x150]
  0001c	e585406c	 str         r4, [r5, #0x6C]
  00020	e3a04000	 mov         r4, #0
  00024	e585407c	 str         r4, [r5, #0x7C]
  00028	e5854064	 str         r4, [r5, #0x64]
  0002c	e5854070	 str         r4, [r5, #0x70]
  00030	e585e000	 str         lr, [r5]
  00034	e5851068	 str         r1, [r5, #0x68]
  00038	e5853084	 str         r3, [r5, #0x84]
  0003c	eb000000	 bl          InterlockedIncrement
  00040	e1a03000	 mov         r3, r0

; 59   : 
; 60   :     ListEntry.Flink = NULL;
; 61   :     ListEntry.Blink = NULL;
; 62   :     hDevice = (m_sdDevice.GetDeviceHandle()).hValue;

  00044	e5950068	 ldr         r0, [r5, #0x68]
  00048	e20330ff	 and         r3, r3, #0xFF
  0004c	e28d1000	 add         r1, sp, #0
  00050	e5853078	 str         r3, [r5, #0x78]
  00054	e5854004	 str         r4, [r5, #4]
  00058	e5854008	 str         r4, [r5, #8]
  0005c	eb000000	 bl          |?GetDeviceHandle@CSDDevice@@QAA?AT__SDBUS_DEVICE_HANDLE@@XZ|
  00060	e5903000	 ldr         r3, [r0]

; 63   :     SystemFlags = sdBusRequest.SystemFlags;
; 64   :     TransferClass = sdBusRequest.TransferClass;
; 65   :     CommandCode = sdBusRequest.CommandCode;
; 66   :     CommandArgument = sdBusRequest.CommandArgument;
; 67   :     CommandResponse.ResponseType = sdBusRequest.CommandResponse.ResponseType;
; 68   :     RequestParam   = sdBusRequest.RequestParam;
; 69   :     NumBlocks = sdBusRequest.NumBlocks;
; 70   :     BlockSize = sdBusRequest.BlockSize;
; 71   :     HCParam = 0;
; 72   :     pBlockBuffer = NULL ;
; 73   :     pCallback    = sdBusRequest.pCallback;
; 74   :     DataAccessClocks = 0; // reset data access clocks
; 75   :     Flags = sdBusRequest.Flags ;
; 76   :     Status = SD_API_STATUS_PENDING ;

  00064	e3a02001	 mov         r2, #1
  00068	e585300c	 str         r3, [r5, #0xC]
  0006c	e596300c	 ldr         r3, [r6, #0xC]
  00070	e5853010	 str         r3, [r5, #0x10]
  00074	e5963010	 ldr         r3, [r6, #0x10]
  00078	e5853014	 str         r3, [r5, #0x14]
  0007c	e5d63014	 ldrb        r3, [r6, #0x14]
  00080	e5c53018	 strb        r3, [r5, #0x18]
  00084	e5963018	 ldr         r3, [r6, #0x18]
  00088	e585301c	 str         r3, [r5, #0x1C]
  0008c	e596301c	 ldr         r3, [r6, #0x1C]
  00090	e5853020	 str         r3, [r5, #0x20]
  00094	e5963034	 ldr         r3, [r6, #0x34]
  00098	e5853038	 str         r3, [r5, #0x38]
  0009c	e596303c	 ldr         r3, [r6, #0x3C]
  000a0	e5853040	 str         r3, [r5, #0x40]
  000a4	e5963040	 ldr         r3, [r6, #0x40]
  000a8	e5854048	 str         r4, [r5, #0x48]
  000ac	e585404c	 str         r4, [r5, #0x4C]
  000b0	e5853044	 str         r3, [r5, #0x44]
  000b4	e596304c	 ldr         r3, [r6, #0x4C]
  000b8	e5854054	 str         r4, [r5, #0x54]
  000bc	e5853050	 str         r3, [r5, #0x50]
  000c0	e5963054	 ldr         r3, [r6, #0x54]
  000c4	e585203c	 str         r2, [r5, #0x3C]
  000c8	e5853058	 str         r3, [r5, #0x58]

; 77   :     m_pOrinalAddr =  sdBusRequest.pBlockBuffer;

  000cc	e5963048	 ldr         r3, [r6, #0x48]

; 78   :     if ((Flags & SD_BUS_REQUEST_PHYS_BUFFER) &&  sdBusRequest.cbSizeOfPhysList && sdBusRequest.pPhysBuffList) {

  000d0	e5952058	 ldr         r2, [r5, #0x58]
  000d4	e5853088	 str         r3, [r5, #0x88]
  000d8	e3120902	 tst         r2, #2, 18
  000dc	0a000015	 beq         |$LN4@CSDBusRequ|
  000e0	e5963058	 ldr         r3, [r6, #0x58]
  000e4	e1b02003	 movs        r2, r3
  000e8	0a000012	 beq         |$LN4@CSDBusRequ|
  000ec	e596305c	 ldr         r3, [r6, #0x5C]
  000f0	e3530000	 cmp         r3, #0
  000f4	0a00000f	 beq         |$LN4@CSDBusRequ|

; 79   :         cbSizeOfPhysList = sdBusRequest.cbSizeOfPhysList/sizeof(PHYS_BUFF_LIST); // Convert to unit.

  000f8	e1a03222	 mov         r3, r2, lsr #4
  000fc	e585305c	 str         r3, [r5, #0x5C]

; 80   :         m_pOrignalPhysAddr = sdBusRequest.pPhysBuffList;

  00100	e596e05c	 ldr         lr, [r6, #0x5C]

; 81   :         if (!SUCCEEDED(CeAllocAsynchronousBuffer((PVOID *)&pPhysBuffList,m_pOrignalPhysAddr,cbSizeOfPhysList*sizeof(PHYS_BUFF_LIST),ARG_I_PTR))) {

  00104	e1a02003	 mov         r2, r3
  00108	e3a03004	 mov         r3, #4
  0010c	e1a0100e	 mov         r1, lr
  00110	e1a02202	 mov         r2, r2, lsl #4
  00114	e2850060	 add         r0, r5, #0x60
  00118	e585e090	 str         lr, [r5, #0x90]
  0011c	eb000000	 bl          CeAllocAsynchronousBuffer
  00120	e3500000	 cmp         r0, #0
  00124	5a000006	 bpl         |$LN2@CSDBusRequ|

; 82   :             Flags &= ~SD_BUS_REQUEST_PHYS_BUFFER;

  00128	e5953058	 ldr         r3, [r5, #0x58]

; 83   :             pPhysBuffList = NULL;

  0012c	e3c33902	 bic         r3, r3, #2, 18
  00130	e5853058	 str         r3, [r5, #0x58]

; 84   :             cbSizeOfPhysList = 0 ;
; 85   :         }
; 86   :     }
; 87   :     else {

  00134	ea000000	 b           |$LN9@CSDBusRequ|
  00138		 |$LN4@CSDBusRequ|

; 88   :         m_pOrignalPhysAddr= pPhysBuffList = NULL;

  00138	e5854090	 str         r4, [r5, #0x90]
  0013c		 |$LN9@CSDBusRequ|

; 89   :         cbSizeOfPhysList = 0;

  0013c	e585405c	 str         r4, [r5, #0x5C]
  00140	e5854060	 str         r4, [r5, #0x60]
  00144		 |$LN2@CSDBusRequ|

; 90   :     }
; 91   : 
; 92   :     if (m_pParentBus)

  00144	e595306c	 ldr         r3, [r5, #0x6C]
  00148	e3530000	 cmp         r3, #0

; 93   :         m_pParentBus->AddRef();

  0014c	1283007c	 addne       r0, r3, #0x7C
  00150	1b000000	 blne        InterlockedIncrement

; 94   :     m_dwArguDesc = 0 ;

  00154	e585408c	 str         r4, [r5, #0x8C]

; 95   :     m_fCompleted = FALSE;

  00158	e5854080	 str         r4, [r5, #0x80]

; 96   :     m_ExternalHandle = NULL;

  0015c	e5854074	 str         r4, [r5, #0x74]

; 97   : }

  00160	e1a00005	 mov         r0, r5
  00164	e28dd004	 add         sp, sp, #4
  00168	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0016c	e12fff1e	 bx          lr
  00170		 |$LN13@CSDBusRequ|
  00170		 |$LN14@CSDBusRequ|
  00170	00000000	 DCD         |?g_dwRequestIndex@CSDBusRequest@@0KA|
  00174		 |$LN15@CSDBusRequ|
  00174	00000000	 DCD         |??_7CSDBusRequest@@6B@|
  00178		 |$M36809|

			 ENDP  ; |??0CSDBusRequest@@QAA@AAVCSDDevice@@AAU_SD_BUS_REQUEST@@PAXPAV0@@Z|, CSDBusRequest::CSDBusRequest

	EXPORT	|??1CSDBusRequest@@UAA@XZ|		; CSDBusRequest::~CSDBusRequest
	IMPORT	|CeFreeAsynchronousBuffer|

  00000			 AREA	 |.pdata|, PDATA
|$T36822| DCD	|$LN7@CSDBusRequ@2|
	DCD	0x40001f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CSDBusRequest@@UAA@XZ| PROC	; CSDBusRequest::~CSDBusRequest

; 99   : {

  00000		 |$LN7@CSDBusRequ@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36819|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3068	 ldr         r3, [pc, #0x68]

; 100  :     TerminateLink();

  0000c	e5843000	 str         r3, [r4]
  00010	eb000000	 bl          |?TerminateLink@CSDBusRequest@@QAAHXZ|

; 101  :     if (m_pOrinalAddr && pBlockBuffer && m_pOrinalAddr != pBlockBuffer) {

  00014	e5943088	 ldr         r3, [r4, #0x88]
  00018	e1b01003	 movs        r1, r3
  0001c	0a000007	 beq         |$LN2@CSDBusRequ@2|
  00020	e594304c	 ldr         r3, [r4, #0x4C]
  00024	e1b00003	 movs        r0, r3
  00028	11510000	 cmpne       r1, r0

; 102  :         HRESULT hResult= CeFreeAsynchronousBuffer(pBlockBuffer,m_pOrinalAddr, NumBlocks*BlockSize, m_dwArguDesc) ;

  0002c	1594e044	 ldrne       lr, [r4, #0x44]
  00030	15942040	 ldrne       r2, [r4, #0x40]
  00034	1594308c	 ldrne       r3, [r4, #0x8C]
  00038	1002029e	 mulne       r2, lr, r2
  0003c	1b000000	 blne        CeFreeAsynchronousBuffer
  00040		 |$LN2@CSDBusRequ@2|

; 103  :         ASSERT(SUCCEEDED(hResult));
; 104  :     }
; 105  :     if ( pPhysBuffList && cbSizeOfPhysList && m_pOrignalPhysAddr && m_pOrignalPhysAddr!=pPhysBuffList) {

  00040	e5943060	 ldr         r3, [r4, #0x60]
  00044	e1b00003	 movs        r0, r3
  00048	0a000008	 beq         |$LN1@CSDBusRequ@2|
  0004c	e594305c	 ldr         r3, [r4, #0x5C]
  00050	e1b02003	 movs        r2, r3
  00054	0a000005	 beq         |$LN1@CSDBusRequ@2|
  00058	e5943090	 ldr         r3, [r4, #0x90]
  0005c	e1b01003	 movs        r1, r3
  00060	11510000	 cmpne       r1, r0

; 106  :         HRESULT hResult= CeFreeAsynchronousBuffer(pPhysBuffList,m_pOrignalPhysAddr, cbSizeOfPhysList*sizeof(PHYS_BUFF_LIST), ARG_I_PTR) ;

  00064	13a03004	 movne       r3, #4
  00068	11a02202	 movne       r2, r2, lsl #4
  0006c	1b000000	 blne        CeFreeAsynchronousBuffer
  00070		 |$LN1@CSDBusRequ@2|

; 107  :         ASSERT(SUCCEEDED(hResult));
; 108  :     }
; 109  : }

  00070	e8bd4010	 ldmia       sp!, {r4, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$LN8@CSDBusRequ@2|
  00078		 |$LN9@CSDBusRequ@2|
  00078	00000000	 DCD         |??_7CSDBusRequest@@6B@|
  0007c		 |$M36820|

			 ENDP  ; |??1CSDBusRequest@@UAA@XZ|, CSDBusRequest::~CSDBusRequest

	EXPORT	|?CheckForCompletion@CSDBusRequest@@IAAHXZ| ; CSDBusRequest::CheckForCompletion
	IMPORT	|SDProcessException|
	IMPORT	|CeDriverPerformCallback|
	IMPORT	|__C_specific_handler|
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sddevice.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36869| DCD	|$LN32@CheckForCo|
	DCD	0xc0005004

  00000			 AREA	 |.pdata|, PDATA
|$T36871| DCD	|$LN12@CheckForCo|
	DCD	0x40000502

  00000			 AREA	 |.xdata|, DATA
|$T36867| DCD	0x1
	DCD	|$LN16@CheckForCo|
	DCD	|$LN17@CheckForCo|
	DCD	|$LN12@CheckForCo|
	DCD	|$LN13@CheckForCo|
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdbusreq.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T36867|

  00008		 |?CheckForCompletion@CSDBusRequest@@IAAHXZ| PROC ; CSDBusRequest::CheckForCompletion

; 187  : {

  00008		 |$LN32@CheckForCo|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5870	 stmdb       sp!, {r4 - r6, r11, r12, lr}
  00010	e28db018	 add         r11, sp, #0x18
  00014	e24dd028	 sub         sp, sp, #0x28
  00018		 |$LN30@CheckForCo|
  00018	e1a05000	 mov         r5, r0

; 188  :     if (m_pParentBus!=NULL) {

  0001c	e595306c	 ldr         r3, [r5, #0x6C]
  00020	e3530000	 cmp         r3, #0
  00024	0a000002	 beq         |$LN8@CheckForCo|

; 189  :         return m_pParentBus->CheckForCompletion();

  00028	e1a00003	 mov         r0, r3
  0002c	eb000000	 bl          |?CheckForCompletion@CSDBusRequest@@IAAHXZ|
  00030	ea000041	 b           |$LN9@CheckForCo|
  00034		 |$LN8@CheckForCo|

; 190  :     }
; 191  :     else if (IsComplete()) {

  00034	e1a00005	 mov         r0, r5
  00038	eb000000	 bl          |?IsComplete@CSDBusRequest@@QAAHXZ|
  0003c	e3500000	 cmp         r0, #0
  00040	0a00003c	 beq         |$LN18@CheckForCo|

; 192  :         // This one is completed.
; 193  :         if (SD_API_SUCCESS(Status) && m_pChildListNext!=NULL) {

  00044	e595303c	 ldr         r3, [r5, #0x3C]
  00048	e3530000	 cmp         r3, #0
  0004c	ba00000a	 blt         |$LN5@CheckForCo|
  00050	e5953070	 ldr         r3, [r5, #0x70]
  00054	e1b02003	 movs        r2, r3
  00058	0a000007	 beq         |$LN5@CheckForCo|

; 194  :             Status = m_pChildListNext->GetFirstFailedStatus();

  0005c	e592303c	 ldr         r3, [r2, #0x3C]
  00060	e1b00003	 movs        r0, r3
  00064	4a000003	 bmi         |$LN20@CheckForCo|
  00068	e5923070	 ldr         r3, [r2, #0x70]
  0006c	e3530000	 cmp         r3, #0
  00070	11a00003	 movne       r0, r3
  00074	1b000000	 blne        |?GetFirstFailedStatus@CSDBusRequest@@QAAJXZ|
  00078		 |$LN20@CheckForCo|
  00078	e585003c	 str         r0, [r5, #0x3C]
  0007c		 |$LN5@CheckForCo|

; 195  :         }
; 196  : #ifdef DEBUG
; 197  :         SD_CARD_STATUS cardStatus;
; 198  : 
; 199  :         if (SDBUS_ZONE_REQUEST) {
; 200  :             DEBUGMSG(SDBUS_ZONE_REQUEST, (TEXT("--- SDBusDriver: CMD%d  CMDArg: 0x%08X TransferClass:%d ResponseType: %s Complete\n"),
; 201  :                 CommandCode, CommandArgument,TransferClass,  SDCardResponseTypeLookUp[CommandResponse.ResponseType & 0x7]));
; 202  : 
; 203  :             if (SD_API_SUCCESS(Status)) {
; 204  :                 if ( (ResponseR1 == CommandResponse.ResponseType) || (ResponseR1b == CommandResponse.ResponseType)) {
; 205  :                     SDGetCardStatusFromResponse(&CommandResponse, &cardStatus);
; 206  :                     DEBUGMSG(SDBUS_ZONE_REQUEST, (TEXT("--- SDBusDriver: R1,R1b Response, Card Status: 0x%08X,  Last State: %s \n"),
; 207  :                         cardStatus,
; 208  :                         SDCardStateStringLookUp[((CommandResponse.ResponseBuffer[2] >> 1) & 0x0F)]));
; 209  :                 }
; 210  : 
; 211  :                 if (NoResponse != CommandResponse.ResponseType) {
; 212  :                     DEBUGMSG(SDBUS_ZONE_REQUEST, (TEXT("--- SDBusDriver: Response Dump: \n")));
; 213  : 
; 214  :                     if (ResponseR2 == CommandResponse.ResponseType) {
; 215  :                         SDOutputBuffer(CommandResponse.ResponseBuffer, 17);
; 216  :                     } else {
; 217  :                         SDOutputBuffer(CommandResponse.ResponseBuffer, 6);
; 218  :                     }
; 219  :                 }
; 220  : 
; 221  :                 if (NULL != pBlockBuffer) {   
; 222  :                     if (SD_READ == TransferClass) {
; 223  :                         DEBUGMSG(SDBUS_ZONE_REQUEST, (TEXT("--- SDBusDriver: Read Data Transfered : NumBlocks:%d BytesPerBlock:%d  \n"),
; 224  :                             NumBlocks, BlockSize));
; 225  :                         if (SDBUS_ZONE_BUFFER) {
; 226  :                             DEBUGMSG(SDBUS_ZONE_BUFFER, (TEXT("--- SDBusDriver: Read Data Dump: \n")));
; 227  :                             SDOutputBuffer(pBlockBuffer, NumBlocks * BlockSize);
; 228  :                         }
; 229  :                     } else {
; 230  :                         DEBUGMSG(SDBUS_ZONE_REQUEST, (TEXT("--- SDBusDriver: Write Transfer Complete:  NumBlocks:%d BytesPerBlock:%d\n"),
; 231  :                             NumBlocks, BlockSize));
; 232  :                     }
; 233  :                 }
; 234  :             } 
; 235  :         }
; 236  : #endif
; 237  :         PSD_BUS_REQUEST_CALLBACK pCallbackPtr = (PSD_BUS_REQUEST_CALLBACK)InterlockedExchange( (LPLONG)&pCallback, NULL); // Make sure only call once.

  0007c	e3a01000	 mov         r1, #0
  00080	e2850050	 add         r0, r5, #0x50
  00084	eb000000	 bl          InterlockedExchange
  00088	e1b06000	 movs        r6, r0

; 238  :         if (pCallbackPtr) {

  0008c	0a000029	 beq         |$LN18@CheckForCo|
  00090		 |$LN16@CheckForCo|

; 239  :             __try { 
; 240  :                 if (m_hCallback) {

  00090	e5953084	 ldr         r3, [r5, #0x84]
  00094	e3530000	 cmp         r3, #0

; 241  :                     IO_BUS_SD_REQUEST_CALLBACK busSdRequestCallback = {
; 242  :                         pCallbackPtr,  m_sdDevice.GetDeviceHandle().hValue,m_ExternalHandle,

  00098	e24b1030	 sub         r1, r11, #0x30

; 239  :             __try { 
; 240  :                 if (m_hCallback) {

  0009c	0a000017	 beq         |$LN2@CheckForCo|

; 241  :                     IO_BUS_SD_REQUEST_CALLBACK busSdRequestCallback = {
; 242  :                         pCallbackPtr,  m_sdDevice.GetDeviceHandle().hValue,m_ExternalHandle,

  000a0	e50b602c	 str         r6, [r11, #-0x2C]
  000a4	e5950068	 ldr         r0, [r5, #0x68]
  000a8	eb000000	 bl          |?GetDeviceHandle@CSDDevice@@QAA?AT__SDBUS_DEVICE_HANDLE@@XZ|
  000ac	e5902000	 ldr         r2, [r0]
  000b0	e3a0182a	 mov         r1, #0x2A, 16

; 243  :                         m_sdDevice.GetDeviceContext(), RequestParam };
; 244  :                     CeDriverPerformCallback(
; 245  :                         m_hCallback, IOCTL_BUS_SD_REQUEST_CALLBACK,&busSdRequestCallback,sizeof(busSdRequestCallback),
; 246  :                         NULL,0,NULL,NULL);

  000b4	e3a03014	 mov         r3, #0x14
  000b8	e50b2028	 str         r2, [r11, #-0x28]
  000bc	e5950074	 ldr         r0, [r5, #0x74]
  000c0	e24b202c	 sub         r2, r11, #0x2C
  000c4	e3811c05	 orr         r1, r1, #5, 24
  000c8	e50b0024	 str         r0, [r11, #-0x24]
  000cc	e5950068	 ldr         r0, [r5, #0x68]
  000d0	e5900498	 ldr         r0, [r0, #0x498]
  000d4	e50b0020	 str         r0, [r11, #-0x20]
  000d8	e5950038	 ldr         r0, [r5, #0x38]
  000dc	e50b001c	 str         r0, [r11, #-0x1C]
  000e0	e5950084	 ldr         r0, [r5, #0x84]
  000e4	e3a0e000	 mov         lr, #0
  000e8	e58de00c	 str         lr, [sp, #0xC]
  000ec	e58de008	 str         lr, [sp, #8]
  000f0	e58de004	 str         lr, [sp, #4]
  000f4	e58de000	 str         lr, [sp]
  000f8	eb000000	 bl          CeDriverPerformCallback

; 247  :                     
; 248  :                 }
; 249  :                 else {

  000fc	ea000009	 b           |$LN17@CheckForCo|
  00100		 |$LN2@CheckForCo|

; 250  :                     pCallbackPtr(m_sdDevice.GetDeviceHandle().hValue,  // device handle
; 251  :                         (PSD_BUS_REQUEST)m_ExternalHandle,           // the request
; 252  :                         m_sdDevice.GetDeviceContext(), // device context
; 253  :                         RequestParam);  // request argument

  00100	e5953068	 ldr         r3, [r5, #0x68]
  00104	e1a00003	 mov         r0, r3
  00108	e5934498	 ldr         r4, [r3, #0x498]
  0010c	eb000000	 bl          |?GetDeviceHandle@CSDDevice@@QAA?AT__SDBUS_DEVICE_HANDLE@@XZ|
  00110	e5900000	 ldr         r0, [r0]
  00114	e5953038	 ldr         r3, [r5, #0x38]
  00118	e5951074	 ldr         r1, [r5, #0x74]
  0011c	e1a02004	 mov         r2, r4
  00120	e1a0e00f	 mov         lr, pc
  00124	e12fff16	 bx          r6
  00128		 |$LN17@CheckForCo|

; 254  :                     }

  00128	ea000002	 b           |$LN18@CheckForCo|
  0012c		 |$LN13@CheckForCo|

; 255  :             } __except (SDProcessException(GetExceptionInformation())) {

  0012c	ea000001	 b           |$LN18@CheckForCo|
  00130		 |$LN29@CheckForCo|

; 256  : 
; 257  :                 DEBUGMSG(SDCARD_ZONE_ERROR, (TEXT("--- SDBusDriver: Exception caught in CompleteRequest when calling callback in device %s \n"),
; 258  :                     m_sdDevice.GetClientName()));     
; 259  :             }
; 260  :         }
; 261  :         
; 262  :     }
; 263  :     return TRUE;

  00130	e51b0030	 ldr         r0, [r11, #-0x30]
  00134	ea000000	 b           |$LN9@CheckForCo|
  00138		 |$LN18@CheckForCo|
  00138	e3a00001	 mov         r0, #1
  0013c		 |$LN9@CheckForCo|

; 264  : }

  0013c	e24bd018	 sub         sp, r11, #0x18
  00140	e89d6870	 ldmia       sp, {r4 - r6, r11, sp, lr}
  00144	e12fff1e	 bx          lr

			 ENDP  ; |?CheckForCompletion@CSDBusRequest@@IAAHXZ|, CSDBusRequest::CheckForCompletion

  00148		 |$LN12@CheckForCo|
  00148		 |$LN31@CheckForCo|

; 255  :             } __except (SDProcessException(GetExceptionInformation())) {

  00148	e52de004	 str         lr, [sp, #-4]!
  0014c	e24dd010	 sub         sp, sp, #0x10
  00150		 |$LN15@CheckForCo|
  00150		 |$LN34@CheckForCo|
  00150	eb000000	 bl          SDProcessException
  00154		 |$LN14@CheckForCo|
  00154	e28dd010	 add         sp, sp, #0x10
  00158	e49df004	 ldr         pc, [sp], #4
  0015c		 |$LN35@CheckForCo|
  0015c		 |$LN33@CheckForCo|
	EXPORT	|?IsRequestNeedRetry@CSDBusRequest@@QAAHXZ| ; CSDBusRequest::IsRequestNeedRetry
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdbusreq.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36892| DCD	|$LN12@IsRequestN|
	DCD	0x40001100
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdbusreq.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsRequestNeedRetry@CSDBusRequest@@QAAHXZ| PROC ; CSDBusRequest::IsRequestNeedRetry

; 266  : {

  00000		 |$LN12@IsRequestN|
  00000		 |$M36889|

; 267  :     if ((m_sdDevice.GetClientFlags() & SD_CLIENT_HANDLES_RETRY)==0) { // we need retry.

  00000	e5903068	 ldr         r3, [r0, #0x68]
  00004	e5933490	 ldr         r3, [r3, #0x490]
  00008	e3130001	 tst         r3, #1
  0000c	1a00000a	 bne         |$LN2@IsRequestN|

; 268  :         if (((SD_API_STATUS_RESPONSE_TIMEOUT == Status) || (SD_API_STATUS_DATA_TIMEOUT == Status) || (SD_API_STATUS_CRC_ERROR == Status))
; 269  :                 && GetRetryCount()!=0) {

  00010	e590303c	 ldr         r3, [r0, #0x3C]
  00014	e3530153	 cmp         r3, #0x53, 2
  00018	0a000003	 beq         |$LN1@IsRequestN|
  0001c	e3530157	 cmp         r3, #0x57, 2
  00020	0a000001	 beq         |$LN1@IsRequestN|
  00024	e3530137	 cmp         r3, #0x37, 2
  00028	1a000003	 bne         |$LN2@IsRequestN|
  0002c		 |$LN1@IsRequestN|
  0002c	e5903010	 ldr         r3, [r0, #0x10]
  00030	e31300ff	 tst         r3, #0xFF

; 270  :             return TRUE;

  00034	13a00001	 movne       r0, #1

; 275  : }

  00038	112fff1e	 bxne        lr
  0003c		 |$LN2@IsRequestN|

; 271  :         }
; 272  :         
; 273  :     }
; 274  :     return FALSE;

  0003c	e3a00000	 mov         r0, #0

; 275  : }

  00040	e12fff1e	 bx          lr
  00044		 |$M36890|

			 ENDP  ; |?IsRequestNeedRetry@CSDBusRequest@@QAAHXZ|, CSDBusRequest::IsRequestNeedRetry

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?BuildSoftBlock@CSDBusRequest@@IAAHXZ|	; CSDBusRequest::BuildSoftBlock
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|memset|
	IMPORT	|__security_check_cookie|
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdbusreq.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36945| DCD	|$LN41@BuildSoftB|
	DCD	0xc000a102

  00000			 AREA	 |.xdata|, DATA
|$T36941| DCD	0xffffffd8
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdbusreq.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T36941|

  00008		 |?BuildSoftBlock@CSDBusRequest@@IAAHXZ| PROC ; CSDBusRequest::BuildSoftBlock

; 277  : {

  00008		 |$LN41@BuildSoftB|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dd06c	 sub         sp, sp, #0x6C
  00010		 |$M36942|
  00010	e1a07000	 mov         r7, r0
  00014	e59f326c	 ldr         r3, [pc, #0x26C]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3068	 str         r3, [sp, #0x68]

; 278  :     ASSERT(m_pParentBus == NULL);
; 279  :     ASSERT(NumBlocks>1);
; 280  :     ASSERT(pBlockBuffer!=NULL);
; 281  : 
; 282  :     BOOL fRetun = TRUE;
; 283  :     UCHAR SoftBlockCommand = CommandCode;
; 284  :     DWORD SoftBlockArgument ; 
; 285  :     DWORD SoftwareBlockByteCount = NumBlocks * BlockSize; 

  00020	e5975044	 ldr         r5, [r7, #0x44]
  00024	e5973040	 ldr         r3, [r7, #0x40]
  00028	e5d79018	 ldrb        r9, [r7, #0x18]

; 286  :     DWORD SoftBlockLengthInBytes = min (BlockSize, 1 + SD_CMD53_BLOCK_COUNT);

  0002c	e3550c02	 cmp         r5, #2, 24
  00030	e0010593	 mul         r1, r3, r5
  00034	23a05c02	 movcs       r5, #2, 24

; 287  :     PBYTE pSoftBlockBuffer = pBlockBuffer;
; 288  :     BOOL  fIncreasAddr ;
; 289  : 
; 290  :     // Setup Current Transfer 
; 291  :     DWORD dwCurOffset = 0 ;
; 292  :     if ( SD_CMD_IO_RW_EXTENDED == SoftBlockCommand )  {

  00038	e3590035	 cmp         r9, #0x35
  0003c	e3a0b001	 mov         r11, #1
  00040	1a000008	 bne         |$LN17@BuildSoftB|

; 293  :         SoftBlockArgument = (CommandArgument & ~( SD_CMD53_BLOCK_MODE | SD_CMD53_BLOCK_COUNT )) ;

  00044	e597201c	 ldr         r2, [r7, #0x1C]
  00048	e3e033c2	 mvn         r3, #0xC2, 6
  0004c	e2233f7f	 eor         r3, r3, #0x7F, 30
  00050	e0023003	 and         r3, r2, r3

; 294  :         SoftBlockArgument |= SoftBlockLengthInBytes ;

  00054	e1836005	 orr         r6, r3, r5

; 295  :         fIncreasAddr = ((CommandArgument & SD_CMD53_OPCODE) != 0);

  00058	e3120301	 tst         r2, #1, 6
  0005c	1a000004	 bne         |$LN38@BuildSoftB|
  00060	e3a0a000	 mov         r10, #0

; 296  :         CommandCode = SoftBlockCommand ;
; 297  :     }
; 298  :     else  {

  00064	ea000003	 b           |$LN16@BuildSoftB|
  00068		 |$LN17@BuildSoftB|

; 299  :         //  Set the appropriate command.
; 300  :         SoftBlockArgument = CommandArgument;
; 301  :         fIncreasAddr = TRUE;
; 302  :         CommandCode -= 1;

  00068	e28930ff	 add         r3, r9, #0xFF
  0006c	e597601c	 ldr         r6, [r7, #0x1C]
  00070	e5c73018	 strb        r3, [r7, #0x18]
  00074		 |$LN38@BuildSoftB|
  00074	e3a0a001	 mov         r10, #1
  00078		 |$LN16@BuildSoftB|

; 303  :     }
; 304  : 
; 305  :     //  Turn this request into a byte mode request.
; 306  :     NumBlocks = 1;

  00078	e3a03001	 mov         r3, #1

; 307  :     BlockSize = SoftBlockLengthInBytes;
; 308  :     CommandArgument = SoftBlockArgument ;
; 309  :     pBlockBuffer = pSoftBlockBuffer;
; 310  : 
; 311  :     // Update.
; 312  :     if (SoftwareBlockByteCount > SoftBlockLengthInBytes) 

  0007c	e1510005	 cmp         r1, r5
  00080	e5873040	 str         r3, [r7, #0x40]

; 313  :         SoftwareBlockByteCount -= SoftBlockLengthInBytes;
; 314  :     else
; 315  :         SoftwareBlockByteCount = 0;
; 316  :     pSoftBlockBuffer += SoftBlockLengthInBytes;
; 317  :     if (fIncreasAddr) {

  00084	e3e033ff	 mvn         r3, #0xFF, 6
  00088	80418005	 subhi       r8, r1, r5
  0008c	93a08000	 movls       r8, #0
  00090	e2232f7f	 eor         r2, r3, #0x7F, 30
  00094	e5875044	 str         r5, [r7, #0x44]
  00098	e587601c	 str         r6, [r7, #0x1C]
  0009c	e35a0000	 cmp         r10, #0
  000a0	0a000005	 beq         |$LN36@BuildSoftB|

; 318  :         //  Increasing address being used.
; 319  :         if ( SD_CMD_IO_RW_EXTENDED == SoftBlockCommand ) {

  000a4	e3590035	 cmp         r9, #0x35

; 320  :             SoftBlockArgument = ( SoftBlockArgument & ( ~ SD_CMD53_REGISTER_ADDRESS ))
; 321  :                 | ((SoftBlockArgument + (SoftBlockLengthInBytes << SD_CMD53_REGISTER_ADDRESS_POS )) & SD_CMD53_REGISTER_ADDRESS );

  000a8	00863485	 addeq       r3, r6, r5, lsl #9
  000ac	00233006	 eoreq       r3, r3, r6
  000b0	00033002	 andeq       r3, r3, r2
  000b4	00236006	 eoreq       r6, r3, r6

; 322  :         }
; 323  :         else {
; 324  :             SoftBlockArgument += SoftBlockLengthInBytes;

  000b8	10866005	 addne       r6, r6, r5
  000bc		 |$LN36@BuildSoftB|

; 325  :         }
; 326  :     }
; 327  : 
; 328  :     
; 329  :     while (SoftwareBlockByteCount && fRetun ) {

  000bc	e3580000	 cmp         r8, #0
  000c0	0a00006a	 beq         |$LN37@BuildSoftB|
  000c4	e3a02000	 mov         r2, #0
  000c8	e3a0e000	 mov         lr, #0
  000cc		 |$LL10@BuildSoftB|
  000cc	e35b0000	 cmp         r11, #0
  000d0	0a000066	 beq         |$LN37@BuildSoftB|

; 330  :         SD_BUS_REQUEST sdRequest = {
; 331  :             {NULL},m_sdDevice.GetDeviceHandle().hValue,0,

  000d4	e5970068	 ldr         r0, [r7, #0x68]
  000d8	e28d1004	 add         r1, sp, #4
  000dc	e58d2008	 str         r2, [sp, #8]
  000e0	e58de00c	 str         lr, [sp, #0xC]
  000e4	eb000000	 bl          |?GetDeviceHandle@CSDDevice@@QAA?AT__SDBUS_DEVICE_HANDLE@@XZ|
  000e8	e5903000	 ldr         r3, [r0]

; 332  :             TransferClass,SoftBlockCommand, SoftBlockArgument,

  000ec	e597e014	 ldr         lr, [r7, #0x14]

; 333  :             {CommandResponse.ResponseType,{0}},

  000f0	e5974020	 ldr         r4, [r7, #0x20]
  000f4	e58d3010	 str         r3, [sp, #0x10]
  000f8	e3a03000	 mov         r3, #0
  000fc	e58d3014	 str         r3, [sp, #0x14]
  00100	e3a03000	 mov         r3, #0
  00104	e3a02010	 mov         r2, #0x10
  00108	e3a01000	 mov         r1, #0
  0010c	e28d0029	 add         r0, sp, #0x29
  00110	e5cd3028	 strb        r3, [sp, #0x28]
  00114	e58de018	 str         lr, [sp, #0x18]
  00118	e5cd901c	 strb        r9, [sp, #0x1C]
  0011c	e58d6020	 str         r6, [sp, #0x20]
  00120	e58d4024	 str         r4, [sp, #0x24]
  00124	eb000000	 bl          memset

; 334  :             NULL,
; 335  :             SD_API_STATUS_UNSUCCESSFUL,
; 336  :             1,SoftBlockLengthInBytes,0,
; 337  :             pBlockBuffer,NULL,

  00128	e597304c	 ldr         r3, [r7, #0x4C]

; 338  :             0,
; 339  :             Flags
; 340  :         };

  0012c	e3a01000	 mov         r1, #0
  00130	e5cd1039	 strb        r1, [sp, #0x39]
  00134	e58d3050	 str         r3, [sp, #0x50]
  00138	e3a03000	 mov         r3, #0
  0013c	e5cd103a	 strb        r1, [sp, #0x3A]
  00140	e5cd103b	 strb        r1, [sp, #0x3B]
  00144	e58d303c	 str         r3, [sp, #0x3C]
  00148	e3a0310f	 mov         r3, #0xF, 2
  0014c	e58d3040	 str         r3, [sp, #0x40]
  00150	e3a03001	 mov         r3, #1
  00154	e58d3044	 str         r3, [sp, #0x44]
  00158	e3a03000	 mov         r3, #0
  0015c	e58d304c	 str         r3, [sp, #0x4C]
  00160	e3a03000	 mov         r3, #0
  00164	e58d3054	 str         r3, [sp, #0x54]
  00168	e5972058	 ldr         r2, [r7, #0x58]
  0016c	e3a03000	 mov         r3, #0
  00170	e58d3058	 str         r3, [sp, #0x58]
  00174	e3a03000	 mov         r3, #0

; 341  :         
; 342  :         CSDBusRequest * pNewRequest =  new CSDBusRequest(m_sdDevice, sdRequest, NULL, this );

  00178	e3a00094	 mov         r0, #0x94
  0017c	e58d3060	 str         r3, [sp, #0x60]
  00180	e58d3064	 str         r3, [sp, #0x64]
  00184	e58d205c	 str         r2, [sp, #0x5C]
  00188	e58d5048	 str         r5, [sp, #0x48]
  0018c	eb000000	 bl          |?AllocateBusRequest@CSDHostContainer@@SAPAXI@Z|
  00190	e3500000	 cmp         r0, #0
  00194	0a000006	 beq         |$LN24@BuildSoftB|
  00198	e5971068	 ldr         r1, [r7, #0x68]
  0019c	e3a03000	 mov         r3, #0
  001a0	e28d2008	 add         r2, sp, #8
  001a4	e58d7000	 str         r7, [sp]
  001a8	eb000000	 bl          |??0CSDBusRequest@@QAA@AAVCSDDevice@@AAU_SD_BUS_REQUEST@@PAXPAV0@@Z|
  001ac	e1a04000	 mov         r4, r0
  001b0	ea000000	 b           |$LN25@BuildSoftB|
  001b4		 |$LN24@BuildSoftB|
  001b4	e3a04000	 mov         r4, #0
  001b8		 |$LN25@BuildSoftB|

; 343  :         if (pNewRequest && pNewRequest->Init() ) {

  001b8	e3540000	 cmp         r4, #0
  001bc	0a00001f	 beq         |$LN8@BuildSoftB|
  001c0	e5943000	 ldr         r3, [r4]
  001c4	e1a00004	 mov         r0, r4
  001c8	e5933004	 ldr         r3, [r3, #4]
  001cc	e1a0e00f	 mov         lr, pc
  001d0	e12fff13	 bx          r3
  001d4	e3500000	 cmp         r0, #0
  001d8	0a000018	 beq         |$LN8@BuildSoftB|

; 344  :             // Added to Child List.
; 345  :             pNewRequest->AddRef();

  001dc	e284007c	 add         r0, r4, #0x7C
  001e0	eb000000	 bl          InterlockedIncrement

; 346  :             SetChildListNext(pNewRequest);

  001e4	e5973070	 ldr         r3, [r7, #0x70]
  001e8	e3530000	 cmp         r3, #0
  001ec	0a000003	 beq         |$LN33@BuildSoftB|
  001f0	e1a01004	 mov         r1, r4
  001f4	e1a00003	 mov         r0, r3
  001f8	eb000000	 bl          |?SetChildListNext@CSDBusRequest@@QAAXPAV1@@Z|
  001fc	ea000000	 b           |$LN32@BuildSoftB|
  00200		 |$LN33@BuildSoftB|
  00200	e5874070	 str         r4, [r7, #0x70]
  00204		 |$LN32@BuildSoftB|

; 347  :             
; 348  :             // Update.
; 349  :             if (SoftwareBlockByteCount > SoftBlockLengthInBytes) 

  00204	e1580005	 cmp         r8, r5

; 350  :                 SoftwareBlockByteCount -= SoftBlockLengthInBytes;

  00208	80488005	 subhi       r8, r8, r5

; 351  :             else
; 352  :                 SoftwareBlockByteCount = 0;

  0020c	93a08000	 movls       r8, #0

; 353  :             pSoftBlockBuffer += SoftBlockLengthInBytes;
; 354  :             if (fIncreasAddr) {

  00210	e35a0000	 cmp         r10, #0
  00214	0a000011	 beq         |$LN26@BuildSoftB|

; 355  :                 //  Increasing address being used.
; 356  :                 if ( SD_CMD_IO_RW_EXTENDED == SoftBlockCommand ) {

  00218	e3590035	 cmp         r9, #0x35

; 357  :                     SoftBlockArgument = ( SoftBlockArgument & ( ~ SD_CMD53_REGISTER_ADDRESS ))
; 358  :                         | ((SoftBlockArgument + (SoftBlockLengthInBytes << SD_CMD53_REGISTER_ADDRESS_POS )) & SD_CMD53_REGISTER_ADDRESS );

  0021c	00863485	 addeq       r3, r6, r5, lsl #9
  00220	03e013ff	 mvneq       r1, #0xFF, 6
  00224	00233006	 eoreq       r3, r3, r6
  00228	02212f7f	 eoreq       r2, r1, #0x7F, 30
  0022c	00033002	 andeq       r3, r3, r2
  00230	00236006	 eoreq       r6, r3, r6
  00234	0a000009	 beq         |$LN26@BuildSoftB|

; 359  :                 }
; 360  :                 else {
; 361  :                     SoftBlockArgument += SoftBlockLengthInBytes;

  00238	e0866005	 add         r6, r6, r5

; 362  :                 }
; 363  :             }
; 364  :             
; 365  :         }
; 366  :         else {

  0023c	ea000007	 b           |$LN26@BuildSoftB|
  00240		 |$LN8@BuildSoftB|

; 367  :             fRetun = FALSE;
; 368  :             if (pNewRequest!=NULL)

  00240	e3540000	 cmp         r4, #0

; 369  :                 delete pNewRequest;

  00244	15943000	 ldrne       r3, [r4]
  00248	e3a0b000	 mov         r11, #0
  0024c	13a01001	 movne       r1, #1
  00250	15933000	 ldrne       r3, [r3]
  00254	11a00004	 movne       r0, r4
  00258	11a0e00f	 movne       lr, pc
  0025c	112fff13	 bxne        r3
  00260		 |$LN26@BuildSoftB|
  00260	e3580000	 cmp         r8, #0
  00264	e3a02000	 mov         r2, #0
  00268	e3a0e000	 mov         lr, #0
  0026c	1affff96	 bne         |$LL10@BuildSoftB|
  00270		 |$LN37@BuildSoftB|

; 370  :         }
; 371  : 
; 372  :     }
; 373  :     return fRetun;

  00270	e59d0068	 ldr         r0, [sp, #0x68]
  00274	eb000000	 bl          __security_check_cookie

; 374  : }

  00278	e1a0000b	 mov         r0, r11
  0027c	e28dd06c	 add         sp, sp, #0x6C
  00280	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00284	e12fff1e	 bx          lr
  00288		 |$LN42@BuildSoftB|
  00288		 |$LN43@BuildSoftB|
  00288	00000000	 DCD         |__security_cookie|
  0028c		 |$M36943|

			 ENDP  ; |?BuildSoftBlock@CSDBusRequest@@IAAHXZ|, CSDBusRequest::BuildSoftBlock

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?BuildOptionalRequest@CSDBusRequest@@IAAHE@Z| ; CSDBusRequest::BuildOptionalRequest
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdbusreq.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T36987| DCD	|$LN24@BuildOptio|
	DCD	0xc0007802

  00000			 AREA	 |.xdata|, DATA
|$T36983| DCD	0xffffffdc
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdbusreq.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T36983|

  00008		 |?BuildOptionalRequest@CSDBusRequest@@IAAHE@Z| PROC ; CSDBusRequest::BuildOptionalRequest

; 376  : {

  00008		 |$LN24@BuildOptio|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24dd06c	 sub         sp, sp, #0x6C
  00010		 |$M36984|
  00010	e1a05000	 mov         r5, r0
  00014	e59f31c8	 ldr         r3, [pc, #0x1C8]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3068	 str         r3, [sp, #0x68]

; 377  :     BOOL fReturn = TRUE;
; 378  :     if (Flags & (SD_AUTO_ISSUE_CMD12 | SD_SDIO_AUTO_IO_ABORT)) {

  00020	e5953058	 ldr         r3, [r5, #0x58]
  00024	e3a06001	 mov         r6, #1
  00028	e3130003	 tst         r3, #3
  0002c	0a000066	 beq         |$LN10@BuildOptio|

; 379  : 
; 380  :         SD_BUS_REQUEST sdRequest = { // for SD_AUTO_ISSUE_CMD12
; 381  :             {NULL},m_sdDevice.GetDeviceHandle().hValue,0,

  00030	e3a03000	 mov         r3, #0
  00034	e5950068	 ldr         r0, [r5, #0x68]
  00038	e58d3008	 str         r3, [sp, #8]
  0003c	e3a03000	 mov         r3, #0
  00040	e28d1004	 add         r1, sp, #4
  00044	e58d300c	 str         r3, [sp, #0xC]
  00048	eb000000	 bl          |?GetDeviceHandle@CSDDevice@@QAA?AT__SDBUS_DEVICE_HANDLE@@XZ|
  0004c	e5903000	 ldr         r3, [r0]
  00050	e3a0e000	 mov         lr, #0

; 382  :             SD_COMMAND,

  00054	e3a04002	 mov         r4, #2

; 383  :             SD_CMD_STOP_TRANSMISSION, 0 ,{ResponseR1b,{0}},

  00058	e3a0700c	 mov         r7, #0xC
  0005c	e3a08000	 mov         r8, #0
  00060	e3a09002	 mov         r9, #2
  00064	e3a0a000	 mov         r10, #0
  00068	e3a02010	 mov         r2, #0x10
  0006c	e3a01000	 mov         r1, #0
  00070	e28d0029	 add         r0, sp, #0x29
  00074	e58d3010	 str         r3, [sp, #0x10]
  00078	e58de014	 str         lr, [sp, #0x14]
  0007c	e58d4018	 str         r4, [sp, #0x18]
  00080	e5cd701c	 strb        r7, [sp, #0x1C]
  00084	e58d8020	 str         r8, [sp, #0x20]
  00088	e58d9024	 str         r9, [sp, #0x24]
  0008c	e5cda028	 strb        r10, [sp, #0x28]
  00090	eb000000	 bl          memset
  00094	e3a02000	 mov         r2, #0
  00098	e5cd2039	 strb        r2, [sp, #0x39]
  0009c	e5cd203a	 strb        r2, [sp, #0x3A]

; 384  :             NULL,
; 385  :             SD_API_STATUS_UNSUCCESSFUL,
; 386  :             0,0,0,
; 387  :             NULL,NULL,
; 388  :             0,
; 389  :             0
; 390  :         };
; 391  :         if (Flags & SD_SDIO_AUTO_IO_ABORT) {

  000a0	e5cd203b	 strb        r2, [sp, #0x3B]
  000a4	e5953058	 ldr         r3, [r5, #0x58]
  000a8	e3a02000	 mov         r2, #0
  000ac	e58d203c	 str         r2, [sp, #0x3C]
  000b0	e3a02000	 mov         r2, #0
  000b4	e3a0110f	 mov         r1, #0xF, 2
  000b8	e3a00000	 mov         r0, #0
  000bc	e3a0e000	 mov         lr, #0
  000c0	e3a04000	 mov         r4, #0
  000c4	e3a07000	 mov         r7, #0
  000c8	e3a08000	 mov         r8, #0
  000cc	e3a09000	 mov         r9, #0
  000d0	e3a0a000	 mov         r10, #0
  000d4	e58d2060	 str         r2, [sp, #0x60]
  000d8	e58d2064	 str         r2, [sp, #0x64]
  000dc	e58d1040	 str         r1, [sp, #0x40]
  000e0	e58d0044	 str         r0, [sp, #0x44]
  000e4	e58de048	 str         lr, [sp, #0x48]
  000e8	e58d404c	 str         r4, [sp, #0x4C]
  000ec	e58d7050	 str         r7, [sp, #0x50]
  000f0	e58d8054	 str         r8, [sp, #0x54]
  000f4	e58d9058	 str         r9, [sp, #0x58]
  000f8	e58da05c	 str         r10, [sp, #0x5C]
  000fc	e3130002	 tst         r3, #2
  00100	0a000009	 beq         |$LN4@BuildOptio|

; 392  :             DEBUGCHK( m_sdDevice.GetCardInfo().SDIOInformation.Function != 0);
; 393  :             // CMD52
; 394  :             sdRequest.CommandCode = SD_IO_RW_DIRECT;
; 395  :             // set up argument to write the function number to the I/O abort register
; 396  :             sdRequest.CommandArgument = BUILD_IO_RW_DIRECT_ARG(SD_IO_OP_WRITE,      
; 397  :                 SD_IO_RW_NORMAL,
; 398  :                 0,    // must be function 0 for access to common regs
; 399  :                 SD_IO_REG_IO_ABORT,  
; 400  :                 m_sdDevice.GetCardInfo().SDIOInformation.Function);

  00104	e5953068	 ldr         r3, [r5, #0x68]
  00108	e3a02102	 mov         r2, #2, 2
  0010c	e3822b03	 orr         r2, r2, #3, 22
  00110	e5d334d8	 ldrb        r3, [r3, #0x4D8]
  00114	e3a01034	 mov         r1, #0x34

; 401  : 
; 402  :             sdRequest.CommandResponse.ResponseType = ResponseR5;

  00118	e3a00006	 mov         r0, #6
  0011c	e1833002	 orr         r3, r3, r2
  00120	e58d3020	 str         r3, [sp, #0x20]
  00124	e5cd101c	 strb        r1, [sp, #0x1C]
  00128	e58d0024	 str         r0, [sp, #0x24]
  0012c		 |$LN4@BuildOptio|

; 403  :         }
; 404  :         
; 405  :         CSDBusRequest * pNewRequest =  new CSDBusRequest(m_sdDevice, sdRequest, NULL, this );

  0012c	e3a00094	 mov         r0, #0x94
  00130	eb000000	 bl          |?AllocateBusRequest@CSDHostContainer@@SAPAXI@Z|
  00134	e3500000	 cmp         r0, #0
  00138	0a000006	 beq         |$LN8@BuildOptio|
  0013c	e5951068	 ldr         r1, [r5, #0x68]
  00140	e3a03000	 mov         r3, #0
  00144	e28d2008	 add         r2, sp, #8
  00148	e58d5000	 str         r5, [sp]
  0014c	eb000000	 bl          |??0CSDBusRequest@@QAA@AAVCSDDevice@@AAU_SD_BUS_REQUEST@@PAXPAV0@@Z|
  00150	e1a04000	 mov         r4, r0
  00154	ea000000	 b           |$LN9@BuildOptio|
  00158		 |$LN8@BuildOptio|
  00158	e3a04000	 mov         r4, #0
  0015c		 |$LN9@BuildOptio|

; 406  :         if (pNewRequest && pNewRequest->Init() ) {

  0015c	e3540000	 cmp         r4, #0
  00160	0a000011	 beq         |$LN3@BuildOptio|
  00164	e5943000	 ldr         r3, [r4]
  00168	e1a00004	 mov         r0, r4
  0016c	e5933004	 ldr         r3, [r3, #4]
  00170	e1a0e00f	 mov         lr, pc
  00174	e12fff13	 bx          r3
  00178	e3500000	 cmp         r0, #0
  0017c	0a00000a	 beq         |$LN3@BuildOptio|

; 407  :             // Added to Child List.
; 408  :             pNewRequest->AddRef();

  00180	e284007c	 add         r0, r4, #0x7C
  00184	eb000000	 bl          InterlockedIncrement

; 409  :             SetChildListNext(pNewRequest);

  00188	e5953070	 ldr         r3, [r5, #0x70]
  0018c	e3530000	 cmp         r3, #0
  00190	0a000003	 beq         |$LN19@BuildOptio|
  00194	e1a01004	 mov         r1, r4
  00198	e1a00003	 mov         r0, r3
  0019c	eb000000	 bl          |?SetChildListNext@CSDBusRequest@@QAAXPAV1@@Z|
  001a0	ea000009	 b           |$LN10@BuildOptio|
  001a4		 |$LN19@BuildOptio|
  001a4	e5854070	 str         r4, [r5, #0x70]

; 410  :         }
; 411  :         else {

  001a8	ea000007	 b           |$LN10@BuildOptio|
  001ac		 |$LN3@BuildOptio|

; 412  :             fReturn = FALSE;
; 413  :             if (pNewRequest)

  001ac	e3540000	 cmp         r4, #0

; 414  :                 delete pNewRequest;

  001b0	15943000	 ldrne       r3, [r4]
  001b4	e3a06000	 mov         r6, #0
  001b8	13a01001	 movne       r1, #1
  001bc	15933000	 ldrne       r3, [r3]
  001c0	11a00004	 movne       r0, r4
  001c4	11a0e00f	 movne       lr, pc
  001c8	112fff13	 bxne        r3
  001cc		 |$LN10@BuildOptio|

; 415  :         }
; 416  :     }
; 417  :     return fReturn;

  001cc	e59d0068	 ldr         r0, [sp, #0x68]
  001d0	eb000000	 bl          __security_check_cookie

; 418  : }

  001d4	e1a00006	 mov         r0, r6
  001d8	e28dd06c	 add         sp, sp, #0x6C
  001dc	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  001e0	e12fff1e	 bx          lr
  001e4		 |$LN25@BuildOptio|
  001e4		 |$LN26@BuildOptio|
  001e4	00000000	 DCD         |__security_cookie|
  001e8		 |$M36985|

			 ENDP  ; |?BuildOptionalRequest@CSDBusRequest@@IAAHE@Z|, CSDBusRequest::BuildOptionalRequest


  00000			 AREA	 |.pdata|, PDATA
|$T37004| DCD	|$LN8@scalar|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCSDBusRequest@@UAAPAXI@Z| PROC	; CSDBusRequest::`scalar deleting destructor'
  00000		 |$LN8@scalar|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37001|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??1CSDBusRequest@@UAA@XZ|
  00010	e3140001	 tst         r4, #1
  00014	11a00005	 movne       r0, r5
  00018	1b000000	 blne        |?FreeBusRequest@CSDHostContainer@@SAXPAVCSDBusRequest@@@Z|
  0001c	e1a00005	 mov         r0, r5
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M37002|

			 ENDP  ; |??_GCSDBusRequest@@UAAPAXI@Z|, CSDBusRequest::`scalar deleting destructor'

; File c:\wince600\platform\z2170p\src\drivers\sdbus\sddevice.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T37051| DCD	|$LN58@Init|
	DCD	0x40008101
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\drivers\sdbus\sdbusreq.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Init@CSDBusRequest@@UAAHXZ| PROC	; CSDBusRequest::Init

; 111  : {

  00000		 |$LN58@Init|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M37048|
  00004	e1a04000	 mov         r4, r0

; 112  :     BOOL fRet = TRUE;
; 113  :     if( TransferClass == SD_READ || TransferClass == SD_WRITE ) {

  00008	e5943014	 ldr         r3, [r4, #0x14]
  0000c	e3a06001	 mov         r6, #1
  00010	e1b02003	 movs        r2, r3
  00014	0a000001	 beq         |$LN27@Init|
  00018	e3520001	 cmp         r2, #1
  0001c	1a000021	 bne         |$LN19@Init|
  00020		 |$LN27@Init|

; 114  :         if( NumBlocks == 0 ) {

  00020	e5943040	 ldr         r3, [r4, #0x40]
  00024	e1b00003	 movs        r0, r3
  00028	1a000003	 bne         |$LN26@Init|
  0002c		 |$LN53@Init|

; 115  :             DEBUGMSG(SDCARD_ZONE_ERROR, (TEXT("SDBusRequest: SDBusRequest- No transfer buffers passed \n")));
; 116  :             Status = SD_API_STATUS_INVALID_PARAMETER;

  0002c	e3a0311f	 mov         r3, #0x1F, 2
  00030		 |$LN55@Init|
  00030	e584303c	 str         r3, [r4, #0x3C]

; 117  :             fRet = FALSE;

  00034	e3a06000	 mov         r6, #0
  00038	ea00006b	 b           |$LN49@Init|
  0003c		 |$LN26@Init|

; 118  :         }
; 119  :         else if( m_pOrinalAddr == NULL ) {

  0003c	e5943088	 ldr         r3, [r4, #0x88]
  00040	e1b01003	 movs        r1, r3

; 120  :         // check pointer to see if block array ptr is non-NULL
; 121  :             DEBUGMSG(SDCARD_ZONE_ERROR, (TEXT("SDBusRequest: SDBusRequest- NULL buffer pointer passed \n")));
; 122  :             Status =  SD_API_STATUS_INVALID_PARAMETER;
; 123  :             fRet = FALSE;

  00044	0afffff8	 beq         |$LN53@Init|

; 124  :         } else if ( m_pOrinalAddr && NumBlocks && BlockSize && m_hCallback ) { // External call

  00048	e5943044	 ldr         r3, [r4, #0x44]
  0004c	e1b0e003	 movs        lr, r3
  00050	0a000013	 beq         |$LN22@Init|
  00054	e5943084	 ldr         r3, [r4, #0x84]
  00058	e3530000	 cmp         r3, #0
  0005c	0a000010	 beq         |$LN22@Init|

; 125  :             m_dwArguDesc = (TransferClass == SD_READ?ARG_O_PTR:ARG_I_PTR);

  00060	e3520000	 cmp         r2, #0
  00064	03a03008	 moveq       r3, #8
  00068	13a03004	 movne       r3, #4
  0006c	e584308c	 str         r3, [r4, #0x8C]

; 126  :             if (NumBlocks>=(1<<16) || BlockSize>=(1<<16) || !SUCCEEDED(CeAllocAsynchronousBuffer((PVOID *)&pBlockBuffer,m_pOrinalAddr,NumBlocks*BlockSize,m_dwArguDesc))) {

  00070	e3500801	 cmp         r0, #1, 16
  00074	2a000006	 bcs         |$LN20@Init|
  00078	e35e0801	 cmp         lr, #1, 16
  0007c	2a000004	 bcs         |$LN20@Init|
  00080	e002009e	 mul         r2, lr, r0
  00084	e284004c	 add         r0, r4, #0x4C
  00088	eb000000	 bl          CeAllocAsynchronousBuffer
  0008c	e3500000	 cmp         r0, #0
  00090	5a000004	 bpl         |$LN19@Init|
  00094		 |$LN20@Init|

; 127  :                 DEBUGMSG(SDCARD_ZONE_ERROR,   (TEXT("SDBusRequest__X CeAllocAsynchronousBuffer Error (%d)\r\n"),GetLastError()));
; 128  :                 ASSERT(FALSE);
; 129  :                 Status = SD_API_STATUS_ACCESS_VIOLATION;
; 130  :                 pBlockBuffer = NULL ;

  00094	e3a02000	 mov         r2, #0
  00098	e584204c	 str         r2, [r4, #0x4C]
  0009c	e3a03117	 mov         r3, #0x17, 2

; 131  :                 fRet = FALSE;
; 132  :             } 
; 133  :         }
; 134  :         else {

  000a0	eaffffe2	 b           |$LN55@Init|
  000a4		 |$LN22@Init|

; 135  :             pBlockBuffer = (PUCHAR) m_pOrinalAddr ;

  000a4	e584104c	 str         r1, [r4, #0x4C]
  000a8		 |$LN19@Init|

; 136  :         }
; 137  :     }
; 138  :     if (fRet) {
; 139  :         if ((Device_SD_Memory == m_sdDevice.GetDeviceType()) || (Device_MMC == m_sdDevice.GetDeviceType())) {

  000a8	e5941068	 ldr         r1, [r4, #0x68]
  000ac	e5913494	 ldr         r3, [r1, #0x494]
  000b0	e3530002	 cmp         r3, #2
  000b4	0a000001	 beq         |$LN16@Init|
  000b8	e3530001	 cmp         r3, #1
  000bc	1a000007	 bne         |$LN13@Init|
  000c0		 |$LN16@Init|

; 140  :             if (TransferClass == SD_READ) {

  000c0	e5943014	 ldr         r3, [r4, #0x14]
  000c4	e3530000	 cmp         r3, #0

; 141  :                 // set for read
; 142  :                 DataAccessClocks = m_sdDevice.GetCardInfo().SDMMCInformation.DataAccessReadClocks;

  000c8	0591352c	 ldreq       r3, [r1, #0x52C]
  000cc	0a000002	 beq         |$LN52@Init|

; 143  :             } else if (TransferClass == SD_WRITE) {

  000d0	e3530001	 cmp         r3, #1
  000d4	1a000001	 bne         |$LN13@Init|

; 144  :                 // set write
; 145  :                 DataAccessClocks = m_sdDevice.GetCardInfo().SDMMCInformation.DataAccessWriteClocks; 

  000d8	e5913528	 ldr         r3, [r1, #0x528]
  000dc		 |$LN52@Init|
  000dc	e5843054	 str         r3, [r4, #0x54]
  000e0		 |$LN13@Init|

; 146  :             }
; 147  :         }
; 148  :         SystemFlags &= ~SYSTEM_FLAGS_RETRY_COUNT_MASK;
; 149  :         SystemFlags |= (CSDHostContainer::GetRetryCount() & SYSTEM_FLAGS_RETRY_COUNT_MASK);

  000e0	e59f3118	 ldr         r3, [pc, #0x118]
  000e4	e3a02000	 mov         r2, #0
  000e8	e5c42010	 strb        r2, [r4, #0x10]
  000ec	e5933000	 ldr         r3, [r3]

; 150  :         SystemFlags |= ((Flags & SD_SLOTRESET_REQUEST)!=0?SD_BUS_REQUEST_SLOT_RESET:0);

  000f0	e594e058	 ldr         lr, [r4, #0x58]
  000f4	e5942010	 ldr         r2, [r4, #0x10]
  000f8	e3530000	 cmp         r3, #0
  000fc	159330b0	 ldrne       r3, [r3, #0xB0]
  00100	03a03000	 moveq       r3, #0
  00104	e20330ff	 and         r3, r3, #0xFF
  00108	e31e0008	 tst         lr, #8
  0010c	e1830002	 orr         r0, r3, r2

; 151  :         
; 152  :         if (m_pParentBus == NULL) { // This is paranet

  00110	e594206c	 ldr         r2, [r4, #0x6C]
  00114	13a03a01	 movne       r3, #1, 20
  00118	03a03000	 moveq       r3, #0
  0011c	e1803003	 orr         r3, r0, r3
  00120	e5840010	 str         r0, [r4, #0x10]
  00124	e5843010	 str         r3, [r4, #0x10]
  00128	e3520000	 cmp         r2, #0
  0012c	1a000030	 bne         |$LN1@Init|

; 153  :         
; 154  :             UCHAR ucSDIOFlags =  m_sdDevice.GetCardInfo().SDIOInformation.Flags;
; 155  :             if ((( 1 < NumBlocks ) && 
; 156  :                        ((SD_CMD_IO_RW_EXTENDED == CommandCode) && 
; 157  :                          (((SD_READ == TransferClass) && 
; 158  :                            (0 != (ucSDIOFlags & (SFTBLK_USE_FOR_CMD53_READ | SFTBLK_USE_ALWAYS )))) ||
; 159  :                        ((SD_WRITE == TransferClass ) && 
; 160  :                            (0 != (ucSDIOFlags & (SFTBLK_USE_FOR_CMD53_WRITE | SFTBLK_USE_ALWAYS ))))))) ||
; 161  :                     ((SD_CMD_READ_MULTIPLE_BLOCK == CommandCode) && 
; 162  :                        (0 != (ucSDIOFlags & (SFTBLK_USE_FOR_CMD18 | SFTBLK_USE_ALWAYS )))) ||
; 163  :                     ((SD_CMD_WRITE_MULTIPLE_BLOCK == CommandCode) && 
; 164  :                        (0 != (ucSDIOFlags & (SFTBLK_USE_FOR_CMD25 | SFTBLK_USE_ALWAYS ))))) {

  00130	e5943040	 ldr         r3, [r4, #0x40]
  00134	e5d15511	 ldrb        r5, [r1, #0x511]
  00138	e3530001	 cmp         r3, #1
  0013c	9a00000b	 bls         |$LN6@Init|
  00140	e5d43018	 ldrb        r3, [r4, #0x18]
  00144	e3530035	 cmp         r3, #0x35
  00148	1a000008	 bne         |$LN6@Init|
  0014c	e5943014	 ldr         r3, [r4, #0x14]
  00150	e3530000	 cmp         r3, #0
  00154	1a000001	 bne         |$LN7@Init|
  00158	e3150014	 tst         r5, #0x14
  0015c	1a00000c	 bne         |$LN10@Init|
  00160		 |$LN7@Init|
  00160	e3530001	 cmp         r3, #1
  00164	1a000001	 bne         |$LN6@Init|
  00168	e3150018	 tst         r5, #0x18
  0016c	1a000008	 bne         |$LN10@Init|
  00170		 |$LN6@Init|
  00170	e5d43018	 ldrb        r3, [r4, #0x18]
  00174	e3530012	 cmp         r3, #0x12
  00178	1a000001	 bne         |$LN5@Init|
  0017c	e3150011	 tst         r5, #0x11
  00180	1a000003	 bne         |$LN10@Init|
  00184		 |$LN5@Init|
  00184	e3530019	 cmp         r3, #0x19
  00188	1a000006	 bne         |$LN11@Init|
  0018c	e3150012	 tst         r5, #0x12
  00190	0a000004	 beq         |$LN11@Init|
  00194		 |$LN10@Init|

; 165  :                 // It is really hard to seperate physical buffer. If this happen. we disable physical buffer.
; 166  :                 Flags &= ~SD_BUS_REQUEST_PHYS_BUFFER;

  00194	e3ce3902	 bic         r3, lr, #2, 18

; 167  :                 fRet = BuildSoftBlock();

  00198	e1a00004	 mov         r0, r4
  0019c	e5843058	 str         r3, [r4, #0x58]
  001a0	eb000000	 bl          |?BuildSoftBlock@CSDBusRequest@@IAAHXZ|
  001a4	e1a06000	 mov         r6, r0
  001a8		 |$LN11@Init|

; 168  :             }
; 169  :             if (((SD_CMD_READ_MULTIPLE_BLOCK != CommandCode) || 
; 170  :                       (0 == (ucSDIOFlags & (SFTBLK_USE_FOR_CMD18 | SFTBLK_USE_ALWAYS)))) &&
; 171  :                     ((SD_CMD_WRITE_MULTIPLE_BLOCK != CommandCode) || 
; 172  :                       (0 == (ucSDIOFlags & (SFTBLK_USE_FOR_CMD25 | SFTBLK_USE_ALWAYS )))) && 
; 173  :                     (0 == (ucSDIOFlags & SFTBLK_USE_ALWAYS))) {

  001a8	e5d43018	 ldrb        r3, [r4, #0x18]
  001ac	e3530012	 cmp         r3, #0x12
  001b0	1a000001	 bne         |$LN3@Init|
  001b4	e3150011	 tst         r5, #0x11
  001b8	1a000009	 bne         |$LN4@Init|
  001bc		 |$LN3@Init|
  001bc	e3530019	 cmp         r3, #0x19
  001c0	1a000001	 bne         |$LN2@Init|
  001c4	e3150012	 tst         r5, #0x12
  001c8	1a000005	 bne         |$LN4@Init|
  001cc		 |$LN2@Init|
  001cc	e3150010	 tst         r5, #0x10
  001d0	1a000003	 bne         |$LN4@Init|

; 174  :                 // check for optional request
; 175  :                 fRet =  BuildOptionalRequest( ucSDIOFlags );

  001d4	e1a01005	 mov         r1, r5
  001d8	e1a00004	 mov         r0, r4
  001dc	eb000000	 bl          |?BuildOptionalRequest@CSDBusRequest@@IAAHE@Z|
  001e0	e1a06000	 mov         r6, r0
  001e4		 |$LN4@Init|

; 176  :             }        
; 177  :         }
; 178  :     }
; 179  :     ASSERT(fRet);
; 180  :     if (!fRet)

  001e4	e3560000	 cmp         r6, #0
  001e8	1a000001	 bne         |$LN1@Init|
  001ec		 |$LN49@Init|

; 181  :         m_fCompleted = TRUE;

  001ec	e3a03001	 mov         r3, #1
  001f0	e5843080	 str         r3, [r4, #0x80]
  001f4		 |$LN1@Init|

; 182  :     return fRet;
; 183  :         
; 184  : }

  001f4	e1a00006	 mov         r0, r6
  001f8	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  001fc	e12fff1e	 bx          lr
  00200		 |$LN59@Init|
  00200		 |$LN60@Init|
  00200	00000000	 DCD         |?g_pSdContainer@CSDHostContainer@@0PAV1@A|
  00204		 |$M37049|

			 ENDP  ; |?Init@CSDBusRequest@@UAAHXZ|, CSDBusRequest::Init

	END
