; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BSP_COMMON\TPS659XX\bsp_tps659xx.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	IMPORT	|TWLWriteRegs|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T46140| DCD	|$LN5@TWLWriteBy|
	DCD	0x40000803
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLWriteByteReg| PROC

; 57   : {

  00000		 |$LN5@TWLWriteBy|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M46137|

; 58   :     return TWLWriteRegs(hTWL,address,&data,sizeof(data));

  0000c	e3a03001	 mov         r3, #1
  00010	e28d2010	 add         r2, sp, #0x10
  00014	eb000000	 bl          TWLWriteRegs

; 59   : }

  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M46138|

			 ENDP  ; |TWLWriteByteReg|

; File c:\wince600\platform\z2170p\src\bsp_common\tps659xx\bsp_tps659xx.c

  00000			 AREA	 |.pdata|, PDATA
|$T46150| DCD	|$LN7@DecideTwlV|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DecideTwlVMMC| PROC

; 40   : {

  00000		 |$LN7@DecideTwlV|
  00000		 |$M46147|

; 41   :     if(slot == 0)   // SLOT1

  00000	e3500000	 cmp         r0, #0

; 42   :     {
; 43   :         return TWL_VMMC1_3P0;

  00004	0a000002	 beq         |$LN1@DecideTwlV|

; 44   :     }
; 45   : 
; 46   :     if(slot == 1)   // SLOT2

  00008	e3500001	 cmp         r0, #1

; 47   :     {
; 48   :         return TWL_VMMC2_1P85;

  0000c	03a00006	 moveq       r0, #6

; 52   : }

  00010	012fff1e	 bxeq        lr
  00014		 |$LN1@DecideTwlV|

; 49   :     } 
; 50   : 
; 51   :     return DEFAULT_VMMC1_VR;

  00014	e3a00002	 mov         r0, #2

; 52   : }

  00018	e12fff1e	 bx          lr
  0001c		 |$M46148|

			 ENDP  ; |DecideTwlVMMC|

	EXPORT	|InitTwlPower|
	IMPORT	|TWLClose|
	IMPORT	|TWLOpen|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T46366| DCD	|$LN111@InitTwlPow|
	DCD	0x40016102
; Function compile flags: /Ogspy
; File c:\wince600\platform\z2170p\src\bsp_common\tps659xx\bsp_tps659xx.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitTwlPower| PROC

; 70   : {

  00000		 |$LN111@InitTwlPow|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M46363|

; 71   :     void* hTwl;
; 72   :     UINT16 val;
; 73   : 
; 74   :     // initialize T2 power level and grouping
; 75   :     hTwl = TWLOpen();

  00008	eb000000	 bl          TWLOpen

; 76   : 
; 77   :     // unsecure registers
; 78   :     TWLWriteByteReg(hTwl, TWL_PROTECT_KEY, 0xCE);

  0000c	e3a05803	 mov         r5, #3, 16
  00010	e3a0e0ce	 mov         lr, #0xCE
  00014	e3851044	 orr         r1, r5, #0x44
  00018	e3a03001	 mov         r3, #1
  0001c	e28d2000	 add         r2, sp, #0
  00020	e5cde000	 strb        lr, [sp]
  00024	e1a04000	 mov         r4, r0
  00028	eb000000	 bl          TWLWriteRegs

; 79   :     TWLWriteByteReg(hTwl, TWL_PROTECT_KEY, 0xEC);

  0002c	e3a030ec	 mov         r3, #0xEC
  00030	e5cd3000	 strb        r3, [sp]
  00034	e3a03001	 mov         r3, #1
  00038	e28d2000	 add         r2, sp, #0
  0003c	e3851044	 orr         r1, r5, #0x44
  00040	e1a00004	 mov         r0, r4
  00044	eb000000	 bl          TWLWriteRegs
  00048	e3a06803	 mov         r6, #3, 16

; 80   : 
; 81   : /*
; 82   :     SHOW_T2_REG(TWL_CFG_P1_TRANSITION);
; 83   :     SHOW_T2_REG(TWL_CFG_P2_TRANSITION);
; 84   :     SHOW_T2_REG(TWL_CFG_P3_TRANSITION);
; 85   :     SHOW_T2_REG(TWL_CFG_P123_TRANSITION);
; 86   :     SHOW_T2_REG(TWL_STS_BOOT);
; 87   :     SHOW_T2_REG(TWL_CFG_BOOT);
; 88   :     SHOW_T2_REG(TWL_SHUNDAN);
; 89   :     SHOW_T2_REG(TWL_BOOT_BCI);
; 90   :     SHOW_T2_REG(TWL_CFG_PWRANA1);
; 91   :     SHOW_T2_REG(TWL_CFG_PWRANA2);
; 92   :     SHOW_T2_REG(TWL_BGAP_TRIM);
; 93   :     SHOW_T2_REG(TWL_BACKUP_MISC_STS);
; 94   :     SHOW_T2_REG(TWL_BACKUP_MISC_CFG);
; 95   :     SHOW_T2_REG(TWL_BACKUP_MISC_TST);
; 96   :     SHOW_T2_REG(TWL_PROTECT_KEY);
; 97   :     SHOW_T2_REG(TWL_STS_HW_CONDITIONS);
; 98   :     SHOW_T2_REG(TWL_P1_SW_EVENTS);
; 99   :     SHOW_T2_REG(TWL_P2_SW_EVENTS);
; 100  :     SHOW_T2_REG(TWL_P3_SW_EVENTS);
; 101  :     SHOW_T2_REG(TWL_STS_P123_STATE);
; 102  :     SHOW_T2_REG(TWL_PB_CFG);
; 103  :     SHOW_T2_REG(TWL_PB_WORD_MSB);
; 104  :     SHOW_T2_REG(TWL_PB_WORD_LSB);
; 105  :     SHOW_T2_REG(TWL_RESERVED_A);
; 106  :     SHOW_T2_REG(TWL_RESERVED_B);
; 107  :     SHOW_T2_REG(TWL_RESERVED_C);
; 108  :     SHOW_T2_REG(TWL_RESERVED_D);
; 109  :     SHOW_T2_REG(TWL_RESERVED_E);
; 110  :     SHOW_T2_REG(TWL_SEQ_ADD_W2P);
; 111  :     SHOW_T2_REG(TWL_SEQ_ADD_P2A);
; 112  :     SHOW_T2_REG(TWL_SEQ_ADD_A2W);
; 113  :     SHOW_T2_REG(TWL_SEQ_ADD_A2S);
; 114  :     SHOW_T2_REG(TWL_SEQ_ADD_S2A12);
; 115  :     SHOW_T2_REG(TWL_SEQ_ADD_S2A3);
; 116  :     SHOW_T2_REG(TWL_SEQ_ADD_WARM);
; 117  :     SHOW_T2_REG(TWL_MEMORY_ADDRESS);
; 118  :     SHOW_T2_REG(TWL_MEMORY_DATA);
; 119  : 
; 120  :     // pm receiver (un)secure mode
; 121  :     SHOW_T2_REG(TWL_SC_CONFIG);
; 122  :     SHOW_T2_REG(TWL_SC_DETECT1);
; 123  :     SHOW_T2_REG(TWL_SC_DETECT2);
; 124  :     SHOW_T2_REG(TWL_WATCHDOG_CFG);
; 125  :     SHOW_T2_REG(TWL_IT_CHECK_CFG);
; 126  :     SHOW_T2_REG(TWL_VIBRATOR_CFG);
; 127  :     SHOW_T2_REG(TWL_DCDC_GLOBAL_CFG);
; 128  :     SHOW_T2_REG(TWL_VDD1_TRIM1);
; 129  :     SHOW_T2_REG(TWL_VDD1_TRIM2);
; 130  :     SHOW_T2_REG(TWL_VDD2_TRIM1);
; 131  :     SHOW_T2_REG(TWL_VDD2_TRIM2);
; 132  :     SHOW_T2_REG(TWL_VIO_TRIM1);
; 133  :     SHOW_T2_REG(TWL_VIO_TRIM2);
; 134  :     SHOW_T2_REG(TWL_MISC_CFG);
; 135  :     SHOW_T2_REG(TWL_LS_TST_A);
; 136  :     SHOW_T2_REG(TWL_LS_TST_B);
; 137  :     SHOW_T2_REG(TWL_LS_TST_C);
; 138  :     SHOW_T2_REG(TWL_LS_TST_D);
; 139  :     SHOW_T2_REG(TWL_BB_CFG);
; 140  :     SHOW_T2_REG(TWL_MISC_TST);
; 141  :     SHOW_T2_REG(TWL_TRIM1);
; 142  :     SHOW_T2_REG(TWL_TRIM2);
; 143  :     SHOW_T2_REG(TWL_DCDC_TIMEOUT);
; 144  :     SHOW_T2_REG(TWL_VAUX1_DEV_GRP);
; 145  :     SHOW_T2_REG(TWL_VAUX1_TYPE);
; 146  :     SHOW_T2_REG(TWL_VAUX1_REMAP);
; 147  :     SHOW_T2_REG(TWL_VAUX1_DEDICATED);
; 148  :     SHOW_T2_REG(TWL_VAUX2_DEV_GRP);
; 149  :     SHOW_T2_REG(TWL_VAUX2_TYPE);
; 150  :     SHOW_T2_REG(TWL_VAUX2_REMAP);
; 151  :     SHOW_T2_REG(TWL_VAUX2_DEDICATED);
; 152  :     SHOW_T2_REG(TWL_VAUX3_DEV_GRP);
; 153  :     SHOW_T2_REG(TWL_VAUX3_TYPE);
; 154  :     SHOW_T2_REG(TWL_VAUX3_REMAP);
; 155  :     SHOW_T2_REG(TWL_VAUX3_DEDICATED);
; 156  :     SHOW_T2_REG(TWL_VAUX4_DEV_GRP);
; 157  :     SHOW_T2_REG(TWL_VAUX4_TYPE);
; 158  :     SHOW_T2_REG(TWL_VAUX4_REMAP);
; 159  :     SHOW_T2_REG(TWL_VAUX4_DEDICATED);
; 160  :     SHOW_T2_REG(TWL_VMMC1_DEV_GRP);
; 161  :     SHOW_T2_REG(TWL_VMMC1_TYPE);
; 162  :     SHOW_T2_REG(TWL_VMMC1_REMAP);
; 163  :     SHOW_T2_REG(TWL_VMMC1_DEDICATED);
; 164  :     SHOW_T2_REG(TWL_VMMC2_DEV_GRP);
; 165  :     SHOW_T2_REG(TWL_VMMC2_TYPE);
; 166  :     SHOW_T2_REG(TWL_VMMC2_REMAP);
; 167  :     SHOW_T2_REG(TWL_VMMC2_DEDICATED);
; 168  :     SHOW_T2_REG(TWL_VPLL1_DEV_GRP);
; 169  :     SHOW_T2_REG(TWL_VPLL1_TYPE);
; 170  :     SHOW_T2_REG(TWL_VPLL1_REMAP);
; 171  :     SHOW_T2_REG(TWL_VPLL1_DEDICATED);
; 172  :     SHOW_T2_REG(TWL_VPLL2_DEV_GRP);
; 173  :     SHOW_T2_REG(TWL_VPLL2_TYPE);
; 174  :     SHOW_T2_REG(TWL_VPLL2_REMAP);
; 175  :     SHOW_T2_REG(TWL_VPLL2_DEDICATED);
; 176  :     SHOW_T2_REG(TWL_VSIM_DEV_GRP);
; 177  :     SHOW_T2_REG(TWL_VSIM_TYPE);
; 178  :     SHOW_T2_REG(TWL_VSIM_REMAP);
; 179  :     SHOW_T2_REG(TWL_VSIM_DEDICATED);
; 180  :     SHOW_T2_REG(TWL_VDAC_DEV_GRP);
; 181  :     SHOW_T2_REG(TWL_VDAC_TYPE);
; 182  :     SHOW_T2_REG(TWL_VDAC_REMAP);
; 183  :     SHOW_T2_REG(TWL_VDAC_DEDICATED);
; 184  :     SHOW_T2_REG(TWL_VINTANA1_DEV_GRP);
; 185  :     SHOW_T2_REG(TWL_VINTANA1_TYPE);
; 186  :     SHOW_T2_REG(TWL_VINTANA1_REMAP);
; 187  :     SHOW_T2_REG(TWL_VINTANA1_DEDICATED);
; 188  :     SHOW_T2_REG(TWL_VINTANA2_DEV_GRP);
; 189  :     SHOW_T2_REG(TWL_VINTANA2_TYPE);
; 190  :     SHOW_T2_REG(TWL_VINTANA2_REMAP);
; 191  :     SHOW_T2_REG(TWL_VINTANA2_DEDICATED);
; 192  :     SHOW_T2_REG(TWL_VINTDIG_DEV_GRP);
; 193  :     SHOW_T2_REG(TWL_VINTDIG_TYPE);
; 194  :     SHOW_T2_REG(TWL_VINTDIG_REMAP);
; 195  :     SHOW_T2_REG(TWL_VINTDIG_DEDICATED);
; 196  :     SHOW_T2_REG(TWL_VIO_DEV_GRP);
; 197  :     SHOW_T2_REG(TWL_VIO_TYPE);
; 198  :     SHOW_T2_REG(TWL_VIO_REMAP);
; 199  :     SHOW_T2_REG(TWL_VIO_CFG);
; 200  :     SHOW_T2_REG(TWL_VIO_MISC_CFG);
; 201  :     SHOW_T2_REG(TWL_VIO_TEST1);
; 202  :     SHOW_T2_REG(TWL_VIO_TEST2);
; 203  :     SHOW_T2_REG(TWL_VIO_OSC);
; 204  :     SHOW_T2_REG(TWL_VIO_RESERVED);
; 205  :     SHOW_T2_REG(TWL_VIO_VSEL);
; 206  :     SHOW_T2_REG(TWL_VDD1_DEV_GRP);
; 207  :     SHOW_T2_REG(TWL_VDD1_TYPE);
; 208  :     SHOW_T2_REG(TWL_VDD1_REMAP);
; 209  :     SHOW_T2_REG(TWL_VDD1_CFG);
; 210  :     SHOW_T2_REG(TWL_VDD1_MISC_CFG);
; 211  :     SHOW_T2_REG(TWL_VDD1_TEST1);
; 212  :     SHOW_T2_REG(TWL_VDD1_TEST2);
; 213  :     SHOW_T2_REG(TWL_VDD1_OSC);
; 214  :     SHOW_T2_REG(TWL_VDD1_RESERVED);
; 215  :     SHOW_T2_REG(TWL_VDD1_VSEL);
; 216  :     SHOW_T2_REG(TWL_VDD1_VMODE_CFG);
; 217  :     SHOW_T2_REG(TWL_VDD1_VFLOOR);
; 218  :     SHOW_T2_REG(TWL_VDD1_VROOF);
; 219  :     SHOW_T2_REG(TWL_VDD1_STEP);
; 220  :     SHOW_T2_REG(TWL_VDD2_DEV_GRP);
; 221  :     SHOW_T2_REG(TWL_VDD2_TYPE);
; 222  :     SHOW_T2_REG(TWL_VDD2_REMAP);
; 223  :     SHOW_T2_REG(TWL_VDD2_CFG);
; 224  :     SHOW_T2_REG(TWL_VDD2_MISC_CFG);
; 225  :     SHOW_T2_REG(TWL_VDD2_TEST1);
; 226  :     SHOW_T2_REG(TWL_VDD2_TEST2);
; 227  :     SHOW_T2_REG(TWL_VDD2_OSC);
; 228  :     SHOW_T2_REG(TWL_VDD2_RESERVED);
; 229  :     SHOW_T2_REG(TWL_VDD2_VSEL);
; 230  :     SHOW_T2_REG(TWL_VDD2_VMODE_CFG);
; 231  :     SHOW_T2_REG(TWL_VDD2_VFLOOR);
; 232  :     SHOW_T2_REG(TWL_VDD2_VROOF);
; 233  :     SHOW_T2_REG(TWL_VDD2_STEP);
; 234  :     SHOW_T2_REG(TWL_VUSB1V5_DEV_GRP);
; 235  :     SHOW_T2_REG(TWL_VUSB1V5_TYPE);
; 236  :     SHOW_T2_REG(TWL_VUSB1V5_REMAP);
; 237  :     SHOW_T2_REG(TWL_VUSB1V8_DEV_GRP);
; 238  :     SHOW_T2_REG(TWL_VUSB1V8_TYPE);
; 239  :     SHOW_T2_REG(TWL_VUSB1V8_REMAP);
; 240  :     SHOW_T2_REG(TWL_VUSB3V1_DEV_GRP);
; 241  :     SHOW_T2_REG(TWL_VUSB3V1_TYPE);
; 242  :     SHOW_T2_REG(TWL_VUSB3V1_REMAP);
; 243  :     SHOW_T2_REG(TWL_VUSBCP_DEV_GRP);
; 244  :     SHOW_T2_REG(TWL_VUSBCP_TYPE);
; 245  :     SHOW_T2_REG(TWL_VUSBCP_REMAP);
; 246  :     SHOW_T2_REG(TWL_VUSB_DEDICATED1);
; 247  :     SHOW_T2_REG(TWL_VUSB_DEDICATED2);
; 248  :     SHOW_T2_REG(TWL_REGEN_DEV_GRP);
; 249  :     SHOW_T2_REG(TWL_REGEN_TYPE);
; 250  :     SHOW_T2_REG(TWL_REGEN_REMAP);
; 251  :     SHOW_T2_REG(TWL_NRESPWRON_DEV_GRP);
; 252  :     SHOW_T2_REG(TWL_NRESPWRON_TYPE);
; 253  :     SHOW_T2_REG(TWL_NRESPWRON_REMAP);
; 254  :     SHOW_T2_REG(TWL_CLKEN_DEV_GRP);
; 255  :     SHOW_T2_REG(TWL_CLKEN_TYPE);
; 256  :     SHOW_T2_REG(TWL_CLKEN_REMAP);
; 257  :     SHOW_T2_REG(TWL_SYSEN_DEV_GRP);
; 258  :     SHOW_T2_REG(TWL_SYSEN_TYPE);
; 259  :     SHOW_T2_REG(TWL_SYSEN_REMAP);
; 260  :     SHOW_T2_REG(TWL_HFCLKOUT_DEV_GRP);
; 261  :     SHOW_T2_REG(TWL_HFCLKOUT_TYPE);
; 262  :     SHOW_T2_REG(TWL_HFCLKOUT_REMAP);
; 263  :     SHOW_T2_REG(TWL_32KCLKOUT_DEV_GRP);
; 264  :     SHOW_T2_REG(TWL_32KCLKOUT_TYPE);
; 265  :     SHOW_T2_REG(TWL_32KCLKOUT_REMAP);
; 266  :     SHOW_T2_REG(TWL_TRITON_RESET_DEV_GRP);
; 267  :     SHOW_T2_REG(TWL_TRITON_RESET_TYPE);
; 268  :     SHOW_T2_REG(TWL_TRITON_RESET_REMAP);
; 269  :     SHOW_T2_REG(TWL_MAINREF_DEV_GRP);
; 270  :     SHOW_T2_REG(TWL_MAINREF_TYPE);
; 271  :     SHOW_T2_REG(TWL_MAINREF_REMAP);
; 272  : */
; 273  : 
; 274  :     // enable MADC and USB CP clock
; 275  :     TWLWriteByteReg(hTwl, TWL_CFG_BOOT, 0x0A); // HFCLK_FREQ = 26MHz

  0004c	e3a0e00a	 mov         lr, #0xA
  00050	e386103b	 orr         r1, r6, #0x3B
  00054	e3a03001	 mov         r3, #1
  00058	e28d2000	 add         r2, sp, #0
  0005c	e1a00004	 mov         r0, r4
  00060	e5cde000	 strb        lr, [sp]
  00064	eb000000	 bl          TWLWriteRegs

; 276  :     
; 277  :     // secure registers
; 278  :     TWLWriteByteReg(hTwl, TWL_PROTECT_KEY, 0x00);

  00068	e3a03000	 mov         r3, #0
  0006c	e5cd3000	 strb        r3, [sp]
  00070	e3a03001	 mov         r3, #1
  00074	e28d2000	 add         r2, sp, #0
  00078	e3851044	 orr         r1, r5, #0x44
  0007c	e1a00004	 mov         r0, r4
  00080	eb000000	 bl          TWLWriteRegs

; 279  :     
; 280  :     // vdd1 (mpu & dsp) - group 1
; 281  :     TWLWriteByteReg(hTwl, TWL_VDD1_DEV_GRP, TWL_DEV_GROUP_P1);    

  00084	e3a03020	 mov         r3, #0x20
  00088	e5cd3000	 strb        r3, [sp]
  0008c	e3a03001	 mov         r3, #1
  00090	e28d2000	 add         r2, sp, #0
  00094	e38610b0	 orr         r1, r6, #0xB0
  00098	e1a00004	 mov         r0, r4
  0009c	eb000000	 bl          TWLWriteRegs

; 282  :     TWLWriteByteReg(hTwl, TWL_VDD1_STEP, BSP_TWL_VDD1_STEP);

  000a0	e3a03000	 mov         r3, #0
  000a4	e5cd3000	 strb        r3, [sp]
  000a8	e3a03001	 mov         r3, #1
  000ac	e28d2000	 add         r2, sp, #0
  000b0	e38610bd	 orr         r1, r6, #0xBD
  000b4	e1a00004	 mov         r0, r4
  000b8	eb000000	 bl          TWLWriteRegs

; 283  :     TWLWriteByteReg(hTwl, TWL_VDD1_REMAP, 0);

  000bc	e3a03000	 mov         r3, #0
  000c0	e5cd3000	 strb        r3, [sp]
  000c4	e3a03001	 mov         r3, #1
  000c8	e28d2000	 add         r2, sp, #0
  000cc	e38610b2	 orr         r1, r6, #0xB2
  000d0	e1a00004	 mov         r0, r4
  000d4	eb000000	 bl          TWLWriteRegs

; 284  :         
; 285  :     TWLWriteByteReg(hTwl, TWL_VDD2_DEV_GRP, TWL_DEV_GROUP_P1);

  000d8	e3a03020	 mov         r3, #0x20
  000dc	e5cd3000	 strb        r3, [sp]
  000e0	e3a03001	 mov         r3, #1
  000e4	e28d2000	 add         r2, sp, #0
  000e8	e38610be	 orr         r1, r6, #0xBE
  000ec	e1a00004	 mov         r0, r4
  000f0	eb000000	 bl          TWLWriteRegs

; 286  :     TWLWriteByteReg(hTwl, TWL_VDD2_STEP, BSP_TWL_VDD2_STEP);

  000f4	e3a03000	 mov         r3, #0
  000f8	e5cd3000	 strb        r3, [sp]
  000fc	e3a03001	 mov         r3, #1
  00100	e28d2000	 add         r2, sp, #0
  00104	e38610cb	 orr         r1, r6, #0xCB
  00108	e1a00004	 mov         r0, r4
  0010c	eb000000	 bl          TWLWriteRegs

; 287  :     TWLWriteByteReg(hTwl, TWL_VDD2_REMAP, 0);

  00110	e3a03000	 mov         r3, #0
  00114	e5cd3000	 strb        r3, [sp]
  00118	e3a03001	 mov         r3, #1
  0011c	e28d2000	 add         r2, sp, #0
  00120	e38610c0	 orr         r1, r6, #0xC0
  00124	e1a00004	 mov         r0, r4
  00128	eb000000	 bl          TWLWriteRegs

; 288  : 
; 289  :     // EVM2: EHCI (1.8v) - group 1
; 290  :     TWLWriteByteReg(hTwl, TWL_VAUX2_DEDICATED, TWL_VAUX2_1P80);

  0012c	e3a03005	 mov         r3, #5
  00130	e5cd3000	 strb        r3, [sp]
  00134	e3a03001	 mov         r3, #1
  00138	e28d2000	 add         r2, sp, #0
  0013c	e3861079	 orr         r1, r6, #0x79
  00140	e1a00004	 mov         r0, r4
  00144	eb000000	 bl          TWLWriteRegs

; 291  :     TWLWriteByteReg(hTwl, TWL_VAUX2_DEV_GRP, TWL_DEV_GROUP_P1);

  00148	e3a03020	 mov         r3, #0x20
  0014c	e5cd3000	 strb        r3, [sp]
  00150	e3a03001	 mov         r3, #1
  00154	e28d2000	 add         r2, sp, #0
  00158	e3861076	 orr         r1, r6, #0x76
  0015c	e1a00004	 mov         r0, r4
  00160	eb000000	 bl          TWLWriteRegs

; 292  : 
; 293  :     // Camera CSI2 requires 1.8V from AUX4
; 294  :     TWLWriteByteReg(hTwl, TWL_VAUX4_DEDICATED, 0x05);

  00164	e3a03005	 mov         r3, #5
  00168	e5cd3000	 strb        r3, [sp]
  0016c	e3a03001	 mov         r3, #1
  00170	e28d2000	 add         r2, sp, #0
  00174	e3861081	 orr         r1, r6, #0x81
  00178	e1a00004	 mov         r0, r4
  0017c	eb000000	 bl          TWLWriteRegs

; 295  :     TWLWriteByteReg(hTwl, TWL_VAUX4_DEV_GRP, TWL_DEV_GROUP_P1);

  00180	e3a03020	 mov         r3, #0x20
  00184	e5cd3000	 strb        r3, [sp]
  00188	e3a03001	 mov         r3, #1
  0018c	e28d2000	 add         r2, sp, #0
  00190	e386107e	 orr         r1, r6, #0x7E
  00194	e1a00004	 mov         r0, r4
  00198	eb000000	 bl          TWLWriteRegs

; 296  :     
; 297  :     // LCD and backlight - group 1
; 298  :     TWLWriteByteReg(hTwl, TWL_VAUX3_DEDICATED, TWL_VAUX3_2P80);

  0019c	e3a03003	 mov         r3, #3
  001a0	e5cd3000	 strb        r3, [sp]
  001a4	e3a03001	 mov         r3, #1
  001a8	e28d2000	 add         r2, sp, #0
  001ac	e386107d	 orr         r1, r6, #0x7D
  001b0	e1a00004	 mov         r0, r4
  001b4	eb000000	 bl          TWLWriteRegs

; 299  :     TWLWriteByteReg(hTwl, TWL_VAUX3_DEV_GRP, TWL_DEV_GROUP_P1);

  001b8	e3a03020	 mov         r3, #0x20
  001bc	e5cd3000	 strb        r3, [sp]
  001c0	e3a03001	 mov         r3, #1
  001c4	e28d2000	 add         r2, sp, #0
  001c8	e386107a	 orr         r1, r6, #0x7A
  001cc	e1a00004	 mov         r0, r4
  001d0	eb000000	 bl          TWLWriteRegs

; 300  : 
; 301  :     // DSI,SDI power supplies driven by PLL2 
; 302  :     // Configure for 1.8V instead of default 1.2V and move to P1
; 303  :     TWLWriteByteReg(hTwl, TWL_VPLL2_DEDICATED, TWL_VPLL2_1P80);

  001d4	e3a03005	 mov         r3, #5
  001d8	e5cd3000	 strb        r3, [sp]
  001dc	e3a03001	 mov         r3, #1
  001e0	e28d2000	 add         r2, sp, #0
  001e4	e3861091	 orr         r1, r6, #0x91
  001e8	e1a00004	 mov         r0, r4
  001ec	eb000000	 bl          TWLWriteRegs

; 304  :     TWLWriteByteReg(hTwl, TWL_VPLL2_DEV_GRP, TWL_DEV_GROUP_P1);

  001f0	e3a03020	 mov         r3, #0x20
  001f4	e5cd3000	 strb        r3, [sp]
  001f8	e3a03001	 mov         r3, #1
  001fc	e28d2000	 add         r2, sp, #0
  00200	e386108e	 orr         r1, r6, #0x8E
  00204	e1a00004	 mov         r0, r4
  00208	eb000000	 bl          TWLWriteRegs

; 305  : 
; 306  :     // sd / mmc - group 1
; 307  :     val = DecideTwlVMMC(0);
; 308  :     TWLWriteByteReg(hTwl, TWL_VMMC1_DEDICATED, (UINT8)val);

  0020c	e3a03002	 mov         r3, #2
  00210	e5cd3000	 strb        r3, [sp]
  00214	e3a03001	 mov         r3, #1
  00218	e28d2000	 add         r2, sp, #0
  0021c	e3861085	 orr         r1, r6, #0x85
  00220	e1a00004	 mov         r0, r4
  00224	eb000000	 bl          TWLWriteRegs

; 309  :     TWLWriteByteReg(hTwl, TWL_VMMC1_DEV_GRP, TWL_DEV_GROUP_P1);

  00228	e3a03020	 mov         r3, #0x20
  0022c	e5cd3000	 strb        r3, [sp]
  00230	e3a03001	 mov         r3, #1
  00234	e28d2000	 add         r2, sp, #0
  00238	e3861082	 orr         r1, r6, #0x82
  0023c	e1a00004	 mov         r0, r4
  00240	eb000000	 bl          TWLWriteRegs

; 310  : 
; 311  :     val = DecideTwlVMMC(1);
; 312  :     TWLWriteByteReg(hTwl, TWL_VMMC2_DEDICATED, (UINT8)val);

  00244	e3a03006	 mov         r3, #6
  00248	e5cd3000	 strb        r3, [sp]
  0024c	e3a03001	 mov         r3, #1
  00250	e28d2000	 add         r2, sp, #0
  00254	e3861089	 orr         r1, r6, #0x89
  00258	e1a00004	 mov         r0, r4
  0025c	eb000000	 bl          TWLWriteRegs

; 313  :     TWLWriteByteReg(hTwl, TWL_VMMC2_DEV_GRP, TWL_DEV_GROUP_P1);

  00260	e3a03020	 mov         r3, #0x20
  00264	e5cd3000	 strb        r3, [sp]
  00268	e3a03001	 mov         r3, #1
  0026c	e28d2000	 add         r2, sp, #0
  00270	e3861086	 orr         r1, r6, #0x86
  00274	e1a00004	 mov         r0, r4
  00278	eb000000	 bl          TWLWriteRegs

; 314  : 
; 315  :     // tv out - group 1 (1.8 v)
; 316  :     TWLWriteByteReg(hTwl, TWL_VDAC_DEDICATED, TWL_VDAC_1P80);

  0027c	e3a03002	 mov         r3, #2
  00280	e5cd3000	 strb        r3, [sp]
  00284	e3a03001	 mov         r3, #1
  00288	e28d2000	 add         r2, sp, #0
  0028c	e3861099	 orr         r1, r6, #0x99
  00290	e1a00004	 mov         r0, r4
  00294	eb000000	 bl          TWLWriteRegs

; 317  :     TWLWriteByteReg(hTwl, TWL_VDAC_DEV_GRP, TWL_DEV_GROUP_P1);

  00298	e3a03020	 mov         r3, #0x20
  0029c	e5cd3000	 strb        r3, [sp]
  002a0	e3a03001	 mov         r3, #1
  002a4	e28d2000	 add         r2, sp, #0
  002a8	e3861096	 orr         r1, r6, #0x96
  002ac	e1a00004	 mov         r0, r4
  002b0	eb000000	 bl          TWLWriteRegs

; 318  : 
; 319  :     // usb
; 320  :     TWLWriteByteReg(hTwl, TWL_VUSB_DEDICATED1, 0x18);

  002b4	e3a03018	 mov         r3, #0x18
  002b8	e5cd3000	 strb        r3, [sp]
  002bc	e3a03001	 mov         r3, #1
  002c0	e28d2000	 add         r2, sp, #0
  002c4	e38610d8	 orr         r1, r6, #0xD8
  002c8	e1a00004	 mov         r0, r4
  002cc	eb000000	 bl          TWLWriteRegs

; 321  :     TWLWriteByteReg(hTwl, TWL_VUSB_DEDICATED2, 0x0);

  002d0	e3a03000	 mov         r3, #0
  002d4	e5cd3000	 strb        r3, [sp]
  002d8	e3a03001	 mov         r3, #1
  002dc	e28d2000	 add         r2, sp, #0
  002e0	e38610d9	 orr         r1, r6, #0xD9
  002e4	e1a00004	 mov         r0, r4
  002e8	eb000000	 bl          TWLWriteRegs

; 322  : 
; 323  :     TWLWriteByteReg(hTwl, TWL_VUSB3V1_DEV_GRP, TWL_DEV_GROUP_P1);

  002ec	e3a03020	 mov         r3, #0x20
  002f0	e5cd3000	 strb        r3, [sp]
  002f4	e3a03001	 mov         r3, #1
  002f8	e28d2000	 add         r2, sp, #0
  002fc	e38610d2	 orr         r1, r6, #0xD2
  00300	e1a00004	 mov         r0, r4
  00304	eb000000	 bl          TWLWriteRegs

; 324  :     TWLWriteByteReg(hTwl, TWL_VUSB1V5_DEV_GRP, TWL_DEV_GROUP_P1);

  00308	e3a03020	 mov         r3, #0x20
  0030c	e5cd3000	 strb        r3, [sp]
  00310	e3a03001	 mov         r3, #1
  00314	e28d2000	 add         r2, sp, #0
  00318	e38610cc	 orr         r1, r6, #0xCC
  0031c	e1a00004	 mov         r0, r4
  00320	eb000000	 bl          TWLWriteRegs

; 325  :     TWLWriteByteReg(hTwl, TWL_VUSB1V8_DEV_GRP, TWL_DEV_GROUP_P1);

  00324	e3a03020	 mov         r3, #0x20
  00328	e5cd3000	 strb        r3, [sp]
  0032c	e3a03001	 mov         r3, #1
  00330	e28d2000	 add         r2, sp, #0
  00334	e38610cf	 orr         r1, r6, #0xCF
  00338	e1a00004	 mov         r0, r4
  0033c	eb000000	 bl          TWLWriteRegs

; 326  : 
; 327  : 
; 328  :     // Enable I2C access to the Power Bus 
; 329  :     TWLWriteByteReg(hTwl, TWL_PB_CFG, 0x02);

  00340	e3a03002	 mov         r3, #2
  00344	e5cd3000	 strb        r3, [sp]
  00348	e3a03001	 mov         r3, #1
  0034c	e28d2000	 add         r2, sp, #0
  00350	e386104a	 orr         r1, r6, #0x4A
  00354	e1a00004	 mov         r0, r4
  00358	eb000000	 bl          TWLWriteRegs

; 330  :     
; 331  :     // disable vibrator
; 332  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VAUX1_RES_ID, TWL_RES_OFF);
; 333  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  0035c	e3a03020	 mov         r3, #0x20
  00360	e5cd3000	 strb        r3, [sp]
  00364	e3a03001	 mov         r3, #1
  00368	e386104b	 orr         r1, r6, #0x4B
  0036c	e28d2000	 add         r2, sp, #0
  00370	e1a00004	 mov         r0, r4
  00374	eb000000	 bl          TWLWriteRegs

; 334  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  00378	e3a03010	 mov         r3, #0x10
  0037c	e5cd3000	 strb        r3, [sp]
  00380	e3a03001	 mov         r3, #1
  00384	e386104c	 orr         r1, r6, #0x4C
  00388	e28d2000	 add         r2, sp, #0
  0038c	e1a00004	 mov         r0, r4
  00390	eb000000	 bl          TWLWriteRegs

; 335  : 
; 336  :     // enable camera
; 337  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VAUX2_RES_ID, TWL_RES_ACTIVE);
; 338  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  00394	e3a03020	 mov         r3, #0x20
  00398	e5cd3000	 strb        r3, [sp]
  0039c	e3a03001	 mov         r3, #1
  003a0	e28d2000	 add         r2, sp, #0
  003a4	e386104b	 orr         r1, r6, #0x4B
  003a8	e1a00004	 mov         r0, r4
  003ac	eb000000	 bl          TWLWriteRegs

; 339  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  003b0	e3a0302e	 mov         r3, #0x2E
  003b4	e5cd3000	 strb        r3, [sp]
  003b8	e3a03001	 mov         r3, #1
  003bc	e28d2000	 add         r2, sp, #0
  003c0	e386104c	 orr         r1, r6, #0x4C
  003c4	e1a00004	 mov         r0, r4
  003c8	eb000000	 bl          TWLWriteRegs

; 340  : 
; 341  :     // enable csi2 aux4 voltage output
; 342  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VAUX4_RES_ID, TWL_RES_ACTIVE);
; 343  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  003cc	e3a03020	 mov         r3, #0x20
  003d0	e5cd3000	 strb        r3, [sp]
  003d4	e3a03001	 mov         r3, #1
  003d8	e28d2000	 add         r2, sp, #0
  003dc	e386104b	 orr         r1, r6, #0x4B
  003e0	e1a00004	 mov         r0, r4
  003e4	eb000000	 bl          TWLWriteRegs

; 344  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  003e8	e3a0304e	 mov         r3, #0x4E
  003ec	e5cd3000	 strb        r3, [sp]
  003f0	e3a03001	 mov         r3, #1
  003f4	e28d2000	 add         r2, sp, #0
  003f8	e386104c	 orr         r1, r6, #0x4C
  003fc	e1a00004	 mov         r0, r4
  00400	eb000000	 bl          TWLWriteRegs

; 345  : 
; 346  :     // disable LCD and backligt
; 347  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VAUX3_RES_ID, TWL_RES_OFF);
; 348  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  00404	e3a03020	 mov         r3, #0x20
  00408	e5cd3000	 strb        r3, [sp]
  0040c	e3a03001	 mov         r3, #1
  00410	e28d2000	 add         r2, sp, #0
  00414	e386104b	 orr         r1, r6, #0x4B
  00418	e1a00004	 mov         r0, r4
  0041c	eb000000	 bl          TWLWriteRegs

; 349  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  00420	e3a03030	 mov         r3, #0x30
  00424	e5cd3000	 strb        r3, [sp]
  00428	e3a03001	 mov         r3, #1
  0042c	e28d2000	 add         r2, sp, #0
  00430	e386104c	 orr         r1, r6, #0x4C
  00434	e1a00004	 mov         r0, r4
  00438	eb000000	 bl          TWLWriteRegs

; 350  : 
; 351  : //    val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VPLL2_RES_ID, TWL_RES_OFF);
; 352  : //    TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));
; 353  : //    TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);
; 354  : 
; 355  :     // disable sd
; 356  : //    val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VMMC1_RES_ID, TWL_RES_OFF);
; 357  : //    TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));
; 358  : //    TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);
; 359  :     
; 360  :     // enable sd
; 361  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VMMC1_RES_ID, TWL_RES_ACTIVE);
; 362  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  0043c	e3a03020	 mov         r3, #0x20
  00440	e5cd3000	 strb        r3, [sp]
  00444	e3a03001	 mov         r3, #1
  00448	e28d2000	 add         r2, sp, #0
  0044c	e386104b	 orr         r1, r6, #0x4B
  00450	e1a00004	 mov         r0, r4
  00454	eb000000	 bl          TWLWriteRegs

; 363  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  00458	e3a0305e	 mov         r3, #0x5E
  0045c	e5cd3000	 strb        r3, [sp]
  00460	e3a03001	 mov         r3, #1
  00464	e28d2000	 add         r2, sp, #0
  00468	e386104c	 orr         r1, r6, #0x4C
  0046c	e1a00004	 mov         r0, r4
  00470	eb000000	 bl          TWLWriteRegs

; 364  : 
; 365  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VMMC2_RES_ID, TWL_RES_OFF);
; 366  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  00474	e3a03020	 mov         r3, #0x20
  00478	e5cd3000	 strb        r3, [sp]
  0047c	e3a03001	 mov         r3, #1
  00480	e28d2000	 add         r2, sp, #0
  00484	e386104b	 orr         r1, r6, #0x4B
  00488	e1a00004	 mov         r0, r4
  0048c	eb000000	 bl          TWLWriteRegs

; 367  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  00490	e3a03060	 mov         r3, #0x60
  00494	e5cd3000	 strb        r3, [sp]
  00498	e3a03001	 mov         r3, #1
  0049c	e28d2000	 add         r2, sp, #0
  004a0	e386104c	 orr         r1, r6, #0x4C
  004a4	e1a00004	 mov         r0, r4
  004a8	eb000000	 bl          TWLWriteRegs

; 368  : 
; 369  :     // disable usb 
; 370  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VUSB_1V5_RES_ID, TWL_RES_OFF);
; 371  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  004ac	e3a03021	 mov         r3, #0x21
  004b0	e5cd3000	 strb        r3, [sp]
  004b4	e3a03001	 mov         r3, #1
  004b8	e28d2000	 add         r2, sp, #0
  004bc	e386104b	 orr         r1, r6, #0x4B
  004c0	e1a00004	 mov         r0, r4
  004c4	eb000000	 bl          TWLWriteRegs

; 372  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  004c8	e3a03010	 mov         r3, #0x10
  004cc	e5cd3000	 strb        r3, [sp]
  004d0	e3a03001	 mov         r3, #1
  004d4	e28d2000	 add         r2, sp, #0
  004d8	e386104c	 orr         r1, r6, #0x4C
  004dc	e1a00004	 mov         r0, r4
  004e0	eb000000	 bl          TWLWriteRegs

; 373  : 
; 374  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VUSB_1V8_RES_ID, TWL_RES_OFF);
; 375  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  004e4	e3a03021	 mov         r3, #0x21
  004e8	e5cd3000	 strb        r3, [sp]
  004ec	e3a03001	 mov         r3, #1
  004f0	e28d2000	 add         r2, sp, #0
  004f4	e386104b	 orr         r1, r6, #0x4B
  004f8	e1a00004	 mov         r0, r4
  004fc	eb000000	 bl          TWLWriteRegs

; 376  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  00500	e3a03020	 mov         r3, #0x20
  00504	e5cd3000	 strb        r3, [sp]
  00508	e3a03001	 mov         r3, #1
  0050c	e28d2000	 add         r2, sp, #0
  00510	e386104c	 orr         r1, r6, #0x4C
  00514	e1a00004	 mov         r0, r4
  00518	eb000000	 bl          TWLWriteRegs

; 377  : 
; 378  :     val = TwlTargetMessage(TWL_PROCESSOR_GRP1, TWL_VUSB_3V1_RES_ID, TWL_RES_OFF);
; 379  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_MSB, (UINT8)(val >> 8));

  0051c	e3a03021	 mov         r3, #0x21
  00520	e5cd3000	 strb        r3, [sp]
  00524	e3a03001	 mov         r3, #1
  00528	e28d2000	 add         r2, sp, #0
  0052c	e386104b	 orr         r1, r6, #0x4B
  00530	e1a00004	 mov         r0, r4
  00534	eb000000	 bl          TWLWriteRegs

; 380  :     TWLWriteByteReg(hTwl, TWL_PB_WORD_LSB, (UINT8)val);

  00538	e3a03030	 mov         r3, #0x30
  0053c	e5cd3000	 strb        r3, [sp]
  00540	e3a03001	 mov         r3, #1
  00544	e28d2000	 add         r2, sp, #0
  00548	e386104c	 orr         r1, r6, #0x4C
  0054c	e1a00004	 mov         r0, r4
  00550	eb000000	 bl          TWLWriteRegs

; 381  : 
; 382  :     // Enable the update of VDD1 and VDD2 through Voltage Controller I2C 
; 383  :     TWLWriteByteReg(hTwl, TWL_DCDC_GLOBAL_CFG, BSP_TWL_DCDC_GLOBAL_CFG);    

  00554	e3a03008	 mov         r3, #8
  00558	e5cd3000	 strb        r3, [sp]
  0055c	e3a03001	 mov         r3, #1
  00560	e28d2000	 add         r2, sp, #0
  00564	e3861061	 orr         r1, r6, #0x61
  00568	e1a00004	 mov         r0, r4
  0056c	eb000000	 bl          TWLWriteRegs

; 384  : 
; 385  :     TWLClose(hTwl);

  00570	e1a00004	 mov         r0, r4
  00574	eb000000	 bl          TWLClose

; 386  : }

  00578	e28dd004	 add         sp, sp, #4
  0057c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00580	e12fff1e	 bx          lr
  00584		 |$M46364|

			 ENDP  ; |InitTwlPower|

	EXPORT	|BSPSetT2MSECURE|
	IMPORT	|GPIOClose|
	IMPORT	|GPIOClrBit|
	IMPORT	|GPIOSetBit|
	IMPORT	|GPIOOpen|

  00000			 AREA	 |.pdata|, PDATA
|$T46377| DCD	|$LN8@BSPSetT2MS|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BSPSetT2MSECURE| PROC

; 389  : {

  00000		 |$LN8@BSPSetT2MS|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46374|
  00004	e1a05000	 mov         r5, r0

; 390  : #ifdef BSP_EVM2
; 391  :     HANDLE hGPIO = GPIOOpen();

  00008	eb000000	 bl          GPIOOpen
  0000c	e1b04000	 movs        r4, r0

; 392  :                 
; 393  :     if (hGPIO == NULL) return FALSE;

  00010	03a00000	 moveq       r0, #0

; 405  : }

  00014	08bd4030	 ldmeqia     sp!, {r4, r5, lr}
  00018	012fff1e	 bxeq        lr

; 394  :     
; 395  :     if (fSet)

  0001c	e3550000	 cmp         r5, #0

; 396  :         GPIOSetBit(hGPIO,TPS659XX_MSECURE_GPIO);

  00020	e3a01040	 mov         r1, #0x40
  00024	e1a00004	 mov         r0, r4

; 394  :     
; 395  :     if (fSet)

  00028	0a000001	 beq         |$LN2@BSPSetT2MS|

; 396  :         GPIOSetBit(hGPIO,TPS659XX_MSECURE_GPIO);

  0002c	eb000000	 bl          GPIOSetBit

; 397  :     else

  00030	ea000000	 b           |$LN1@BSPSetT2MS|
  00034		 |$LN2@BSPSetT2MS|

; 398  :         GPIOClrBit(hGPIO,TPS659XX_MSECURE_GPIO);

  00034	eb000000	 bl          GPIOClrBit
  00038		 |$LN1@BSPSetT2MS|

; 399  : 
; 400  :     GPIOClose(hGPIO);

  00038	e1a00004	 mov         r0, r4
  0003c	eb000000	 bl          GPIOClose

; 401  : #else
; 402  :     UNREFERENCED_PARAMETER(fSet);
; 403  : #endif
; 404  :     return TRUE;

  00040	e3a00001	 mov         r0, #1

; 405  : }

  00044	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$M46375|

			 ENDP  ; |BSPSetT2MSECURE|

	END
