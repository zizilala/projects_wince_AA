; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\test\Tux_PowerManagement\Tux_PowerManagementTest.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?g_fStress@@3HA| [ DATA ]		; g_fStress
	EXPORT	|?g_StressCount@@3KA| [ DATA ]		; g_StressCount
	EXPORT	|?g_NbLoop@@3KA| [ DATA ]		; g_NbLoop
	EXPORT	|?g_TimeToSleep@@3KA| [ DATA ]		; g_TimeToSleep
	EXPORT	|?g_NbBytes@@3KA| [ DATA ]		; g_NbBytes

  00000			 AREA	 |.bss|, NOINIT
|?g_fStress@@3HA| % 0x4					; g_fStress

  00000			 AREA	 |.data|, DATA
|?g_StressCount@@3KA| DCD 0x1				; g_StressCount
|?g_NbLoop@@3KA| DCD 0x1				; g_NbLoop
|?g_TimeToSleep@@3KA| DCD 0x3c				; g_TimeToSleep
|?g_NbBytes@@3KA| DCD 0x2				; g_NbBytes
	EXPORT	|DllMain|
; File c:\wince600\platform\z2170p\src\test\tux_powermanagement\tux_powermanagementtest.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T32685| DCD	|$LN5@DllMain|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllMain| PROC

; 38   : {

  00000		 |$LN5@DllMain|
  00000		 |$M32682|

; 39   :     // Any initialization code goes here.
; 40   : 
; 41   :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 42   : }

  00004	e12fff1e	 bx          lr
  00008		 |$M32683|

			 ENDP  ; |DllMain|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?Debug@@YAXPBGZZ|			; Debug
	EXPORT	|??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OutputDebugStringW|
	IMPORT	|wvsprintfW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|wcscat|
	IMPORT	|wcscpy|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T32700| DCD	|$LN5@Debug|
	DCD	0xc0002305

  00000			 AREA	 |.xdata|, DATA
|$T32696| DCD	0xffffffe0

  00000			 AREA	 |.data|, DATA
|?szHeader@?1??Debug@@YAXPBGZZ@4PAGA| DCB "T", 0x0, "u", 0x0, "x", 0x0, "_"
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "M"
	DCB	0x0, "a", 0x0, "n", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, "m"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `Debug'::`2'::szHeader

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T32696|

  00008		 |?Debug@@YAXPBGZZ| PROC		; Debug

; 61   : {

  00008		 |$LN5@Debug|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d000f	 stmdb       sp!, {r0 - r3}
  00010	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00014	e59fc074	 ldr         r12, [pc, #0x74]
  00018	e08dd00c	 add         sp, sp, r12
  0001c		 |$M32697|
  0001c	e1a04000	 mov         r4, r0
  00020	e58d4810	 str         r4, [sp, #0x810]
  00024	e59f3060	 ldr         r3, [pc, #0x60]
  00028	e5933000	 ldr         r3, [r3]
  0002c	e58d3800	 str         r3, [sp, #0x800]

; 62   :     static  TCHAR   szHeader[] = TEXT("Tux_PowerManagement: ");
; 63   :     TCHAR   szBuffer[1024];
; 64   : 
; 65   :     va_list pArgs;
; 66   :     va_start(pArgs, szFormat);
; 67   :     lstrcpy(szBuffer, szHeader);

  00030	e59f1050	 ldr         r1, [pc, #0x50]
  00034	e28d0000	 add         r0, sp, #0
  00038	eb000000	 bl          wcscpy

; 68   :     wvsprintf(
; 69   :         szBuffer + countof(szHeader) - 1,
; 70   :         szFormat,
; 71   :         pArgs);

  0003c	e3a02b02	 mov         r2, #2, 22
  00040	e3822014	 orr         r2, r2, #0x14
  00044	e08d2002	 add         r2, sp, r2
  00048	e1a01004	 mov         r1, r4
  0004c	e28d002a	 add         r0, sp, #0x2A
  00050	eb000000	 bl          wvsprintfW

; 72   :     va_end(pArgs);
; 73   : 
; 74   :     _tcscat(szBuffer, TEXT("\r\n"));

  00054	e59f1028	 ldr         r1, [pc, #0x28]
  00058	e28d0000	 add         r0, sp, #0
  0005c	eb000000	 bl          wcscat

; 75   : 
; 76   :     OutputDebugString(szBuffer);

  00060	e28d0000	 add         r0, sp, #0
  00064	eb000000	 bl          OutputDebugStringW
  00068	e59d0800	 ldr         r0, [sp, #0x800]
  0006c	eb000000	 bl          __security_check_cookie

; 77   : }

  00070	e3a0cb02	 mov         r12, #2, 22
  00074	e38cc004	 orr         r12, r12, #4
  00078	e08dd00c	 add         sp, sp, r12
  0007c	e89d6010	 ldmia       sp, {r4, sp, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN6@Debug|
  00084		 |$LN7@Debug|
  00084	00000000	 DCD         |??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@|
  00088		 |$LN8@Debug|
  00088	00000000	 DCD         |?szHeader@?1??Debug@@YAXPBGZZ@4PAGA|
  0008c		 |$LN9@Debug|
  0008c	00000000	 DCD         |__security_cookie|
  00090		 |$LN10@Debug|
  00090	fffff7fc	 DCD         0xfffff7fc
  00094		 |$M32698|

			 ENDP  ; |?Debug@@YAXPBGZZ|, Debug

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|??_C@_1CC@OCNIMJBA@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?5?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@KAHLNJHF@?$AAI?$AAn?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@PNOECICE@?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAL?$AAi?$AAn?$AAe?$AA?5?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@NHEFPFMB@?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@BECLEOD@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAt?$AAc?$AAs?$AAl?$AAe?$AAn?$AA?$CI?$AAl?$AAp?$AAs?$AAz?$AAC?$AAm?$AAd?$AAL?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@EMOMAECC@?$AAT?$AAu?$AAx?$AA_?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AAT?$AAe?$AAs?$AAt?$AA?4?$AAc?$AAp?$AAp?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@IAPCIIAO@?$AAF?$AAA?$AAI?$AAL?$AA?5?$AAi?$AAn?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AAC?$AAO?$AAN?$AAD?$AAI?$AAT?$AAI?$AAO?$AAN?$AA?$CI@| [ DATA ] ; `string'
	IMPORT	|atoi|
	IMPORT	|?g_pKato@@3PAVCKato@@A|		; g_pKato
	IMPORT	|__imp_?Log@CKato@@QAAHKPBGZZ|
	IMPORT	|wcslen|

  00000			 AREA	 |.pdata|, PDATA
|$T32739| DCD	|$LN42@SetTestOpt|
	DCD	0xc0009e02

  00000			 AREA	 |.xdata|, DATA
|$T32735| DCD	0xffffffd8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@OCNIMJBA@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?5?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "n", 0x0, "u", 0x0, "m", 0x0, "b", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@KAHLNJHF@?$AAI?$AAn?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?5@| DCB "I"
	DCB	0x0, "n", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " ", 0x0, "@"
	DCB	0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ":", 0x0, "V", 0x0, "a", 0x0, "l"
	DCB	0x0, "u", 0x0, "e", 0x0, " ", 0x0, "N", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "V", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@PNOECICE@?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAL?$AAi?$AAn?$AAe?$AA?5?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@| DCB "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "L", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, " "
	DCB	0x0, "O", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "s", 0x0, " ", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@NHEFPFMB@?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?$AA@| DCB "r"
	DCB	0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, " "
	DCB	0x0, "T", 0x0, "R", 0x0, "U", 0x0, "E", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@BECLEOD@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAt?$AAc?$AAs?$AAl?$AAe?$AAn?$AA?$CI?$AAl?$AAp?$AAs?$AAz?$AAC?$AAm?$AAd?$AAL?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@| DCB "0"
	DCB	0x0, " ", 0x0, "=", 0x0, "=", 0x0, " ", 0x0, "_", 0x0, "t"
	DCB	0x0, "c", 0x0, "s", 0x0, "l", 0x0, "e", 0x0, "n", 0x0, "("
	DCB	0x0, "l", 0x0, "p", 0x0, "s", 0x0, "z", 0x0, "C", 0x0, "m"
	DCB	0x0, "d", 0x0, "L", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, ")"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@EMOMAECC@?$AAT?$AAu?$AAx?$AA_?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AAT?$AAe?$AAs?$AAt?$AA?4?$AAc?$AAp?$AAp?$AA?$AA@| DCB "T"
	DCB	0x0, "u", 0x0, "x", 0x0, "_", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "M", 0x0, "a", 0x0, "n", 0x0, "a"
	DCB	0x0, "g", 0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, ".", 0x0, "c"
	DCB	0x0, "p", 0x0, "p", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@IAPCIIAO@?$AAF?$AAA?$AAI?$AAL?$AA?5?$AAi?$AAn?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AAC?$AAO?$AAN?$AAD?$AAI?$AAT?$AAI?$AAO?$AAN?$AA?$CI@| DCB "F"
	DCB	0x0, "A", 0x0, "I", 0x0, "L", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "%", 0x0, "s", 0x0, " ", 0x0, "@", 0x0, " "
	DCB	0x0, "l", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "O", 0x0, "N"
	DCB	0x0, "D", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "O", 0x0, "N"
	DCB	0x0, "(", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " ", 0x0, ")"
	DCB	0x0, " ", 0x0, "A", 0x0, "C", 0x0, "T", 0x0, "I", 0x0, "O"
	DCB	0x0, "N", 0x0, "(", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, ")", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T32735|

  00008		 |?SetTestOptions@@YAHPAG@Z| PROC	; SetTestOptions

; 294  : {

  00008		 |$LN42@SetTestOpt|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M32736|
  00010	e1a05000	 mov         r5, r0
  00014	e59f3260	 ldr         r3, [pc, #0x260]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3018	 str         r3, [sp, #0x18]

; 295  :     BOOL    fRtn        = FALSE;
; 296  :     DWORD   dwLineSize  = 0;
; 297  :     INT     iCmdIdx     = 0;
; 298  :     INT     iStrEnd     = 0;
; 299  :     TCHAR*	pTmp		= NULL;
; 300  : 	DWORD   dwIndex     = 0;
; 301  : 	PDWORD pdwVariable = NULL;
; 302  :     char    szTempString[11];
; 303  : 
; 304  :     DEFAULT_ERROR( 0 == _tcslen(lpszCmdLine),  return TRUE );

  00020	eb000000	 bl          wcslen
  00024	e3500000	 cmp         r0, #0
  00028	1a000014	 bne         |$LN21@SetTestOpt|
  0002c	e59f3224	 ldr         r3, [pc, #0x224]
  00030	e59f221c	 ldr         r2, [pc, #0x21C]
  00034	e59f523c	 ldr         r5, [pc, #0x23C]
  00038	e59f6234	 ldr         r6, [pc, #0x234]
  0003c	e5930000	 ldr         r0, [r3]
  00040	e5924000	 ldr         r4, [r2]
  00044	e59f3214	 ldr         r3, [pc, #0x214]
  00048	e59f2220	 ldr         r2, [pc, #0x220]
  0004c	e3a07e13	 mov         r7, #0x13, 28
  00050	e3a01002	 mov         r1, #2
  00054	e58d5008	 str         r5, [sp, #8]
  00058	e58d6004	 str         r6, [sp, #4]
  0005c	e58d7000	 str         r7, [sp]
  00060	e1a0e00f	 mov         lr, pc
  00064	e12fff14	 bx          r4
  00068		 |$LN35@SetTestOpt|

; 389  : 	            
; 390  : 	        
; 391  : 
; 392  : 
; 393  :     } // end while( '\0' != lpszCmdLine[iCmdIdx] )
; 394  : 
; 395  :     return TRUE;

  00068	e59d0018	 ldr         r0, [sp, #0x18]
  0006c	eb000000	 bl          __security_check_cookie
  00070	e3a00001	 mov         r0, #1
  00074		 |$LN22@SetTestOpt|

; 396  :             
; 397  : } // end static BOOL  SetTestOptions( LPTSTR lpszCmdLine )

  00074	e28dd01c	 add         sp, sp, #0x1C
  00078	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN21@SetTestOpt|

; 305  : 
; 306  : 	    /* --------------------------------------------------------------------
; 307  :     	Parse command line.
; 308  :     -------------------------------------------------------------------- */
; 309  :     iCmdIdx = 0;
; 310  :     while( '\0' != lpszCmdLine[iCmdIdx] )

  00080	e1d530b0	 ldrh        r3, [r5]
  00084	e3a04000	 mov         r4, #0
  00088	e3530000	 cmp         r3, #0
  0008c	0afffff5	 beq         |$LN35@SetTestOpt|
  00090	e59f71d4	 ldr         r7, [pc, #0x1D4]
  00094	e59f81cc	 ldr         r8, [pc, #0x1CC]
  00098	e3a0b001	 mov         r11, #1
  0009c	e28da00c	 add         r10, sp, #0xC
  000a0	e28d900c	 add         r9, sp, #0xC
  000a4	e3a0e000	 mov         lr, #0

; 311  :     {
; 312  :         // remove junk
; 313  :         while( CmdFlag != lpszCmdLine[iCmdIdx] && '\0' != lpszCmdLine[iCmdIdx] ) iCmdIdx++;

  000a8	ea000002	 b           |$LL20@SetTestOpt|
  000ac		 |$LL18@SetTestOpt|
  000ac	e3530000	 cmp         r3, #0
  000b0	0a000004	 beq         |$LN36@SetTestOpt|
  000b4	e2844001	 add         r4, r4, #1

; 305  : 
; 306  : 	    /* --------------------------------------------------------------------
; 307  :     	Parse command line.
; 308  :     -------------------------------------------------------------------- */
; 309  :     iCmdIdx = 0;
; 310  :     while( '\0' != lpszCmdLine[iCmdIdx] )

  000b8		 |$LL20@SetTestOpt|

; 311  :     {
; 312  :         // remove junk
; 313  :         while( CmdFlag != lpszCmdLine[iCmdIdx] && '\0' != lpszCmdLine[iCmdIdx] ) iCmdIdx++;

  000b8	e0853084	 add         r3, r5, r4, lsl #1
  000bc	e1d330b0	 ldrh        r3, [r3]
  000c0	e353002d	 cmp         r3, #0x2D
  000c4	1afffff8	 bne         |$LL18@SetTestOpt|
  000c8		 |$LN36@SetTestOpt|

; 314  :         if( '\0' == lpszCmdLine[iCmdIdx] ) continue;

  000c8	e0853084	 add         r3, r5, r4, lsl #1
  000cc	e1d330b0	 ldrh        r3, [r3]
  000d0	e3530000	 cmp         r3, #0
  000d4	0a000036	 beq         |$LN34@SetTestOpt|

; 315  :         iCmdIdx++;

  000d8	e2842001	 add         r2, r4, #1

; 316  : 
; 317  :         switch( lpszCmdLine[iCmdIdx] )

  000dc	e0853082	 add         r3, r5, r2, lsl #1
  000e0	e1d330b0	 ldrh        r3, [r3]
  000e4	e3530062	 cmp         r3, #0x62
  000e8	0a00000c	 beq         |$LN10@SetTestOpt|
  000ec	e3530069	 cmp         r3, #0x69
  000f0	0a000007	 beq         |$LN13@SetTestOpt|
  000f4	e353006c	 cmp         r3, #0x6C
  000f8	0a000003	 beq         |$LN12@SetTestOpt|
  000fc	e3530073	 cmp         r3, #0x73
  00100	1a000030	 bne         |$LN31@SetTestOpt|

; 329  :             }
; 330  :         case CmdSleep:
; 331  :             {
; 332  :                 pdwVariable = &g_TimeToSleep;

  00104	e2876008	 add         r6, r7, #8

; 333  :                 break;

  00108	ea000005	 b           |$LN14@SetTestOpt|
  0010c		 |$LN12@SetTestOpt|

; 324  :             }
; 325  :         case CmdLoop:
; 326  :             {
; 327  :                 pdwVariable = &g_NbLoop;

  0010c	e2876004	 add         r6, r7, #4

; 328  :                 break;

  00110	ea000003	 b           |$LN14@SetTestOpt|
  00114		 |$LN13@SetTestOpt|

; 318  :         {
; 319  :         case CmdItr:
; 320  :             {
; 321  : 				g_fStress = TRUE;

  00114	e588b000	 str         r11, [r8]

; 322  :                 pdwVariable = &g_StressCount;

  00118	e1a06007	 mov         r6, r7

; 323  :                 break;

  0011c	ea000000	 b           |$LN14@SetTestOpt|
  00120		 |$LN10@SetTestOpt|

; 334  :             }
; 335  :         case CmdBytes:
; 336  :             {
; 337  :                 pdwVariable = &g_NbBytes;

  00120	e287600c	 add         r6, r7, #0xC
  00124		 |$LN14@SetTestOpt|

; 345  : 
; 346  :         } // end switch( lpszCmdLine[iCmdIdx] )
; 347  : 
; 348  :         /*g_fStress = TRUE;
; 349  :         g_pKato->Log( LOG_DETAIL, TEXT("In %s @ line %d: Option set number of iterations"),
; 350  :             __THIS_FILE__, __LINE__ );*/
; 351  : 
; 352  :                 iCmdIdx++;

  00124	e2824001	 add         r4, r2, #1

; 353  : 
; 354  : 				while( CmdSpace == lpszCmdLine[iCmdIdx] ) 

  00128	e0852084	 add         r2, r5, r4, lsl #1
  0012c	e1d230b0	 ldrh        r3, [r2]
  00130	ea000001	 b           |$LN38@SetTestOpt|
  00134		 |$LL8@SetTestOpt|
  00134	e1f230b2	 ldrh        r3, [r2, #2]!

; 355  : 					     iCmdIdx++;       

  00138	e2844001	 add         r4, r4, #1
  0013c		 |$LN38@SetTestOpt|
  0013c	e3530020	 cmp         r3, #0x20
  00140	0afffffb	 beq         |$LL8@SetTestOpt|

; 356  : 				if( '\0' == lpszCmdLine[iCmdIdx] )

  00144	e0853084	 add         r3, r5, r4, lsl #1
  00148	e1d310b0	 ldrh        r1, [r3]
  0014c	e1b03001	 movs        r3, r1
  00150	0a000017	 beq         |$LN34@SetTestOpt|

; 357  : 					 continue;
; 358  : 
; 359  :                 dwIndex = 0;  

  00154	e3a02000	 mov         r2, #0

; 360  : 
; 361  : 				while(lpszCmdLine[iCmdIdx] != CmdSpace && lpszCmdLine[iCmdIdx] != '\0')

  00158	e3530020	 cmp         r3, #0x20
  0015c	0a00000f	 beq         |$LN4@SetTestOpt|
  00160		 |$LL5@SetTestOpt|
  00160	e3530000	 cmp         r3, #0
  00164	0a00000d	 beq         |$LN4@SetTestOpt|

; 362  : 				{
; 363  :                    //If it is a Valid Digit 
; 364  :                    if(lpszCmdLine[iCmdIdx] >= '0' && lpszCmdLine[iCmdIdx]<='9')

  00168	e3530030	 cmp         r3, #0x30
  0016c	3a00002e	 bcc         |$LN3@SetTestOpt|
  00170	e3530039	 cmp         r3, #0x39
  00174	8a00002c	 bhi         |$LN3@SetTestOpt|

; 365  : 				   {
; 366  : 					   //If the Lenght is greater than 10 digits return an error
; 367  :                         if(10 == dwIndex)

  00178	e352000a	 cmp         r2, #0xA
  0017c	0a00001d	 beq         |$LN30@SetTestOpt|

; 371  : 						}
; 372  : 						szTempString[dwIndex] = (char)lpszCmdLine[iCmdIdx];
; 373  :                         
; 374  : 						dwIndex++;
; 375  :                         iCmdIdx++; 

  00180	e2844001	 add         r4, r4, #1
  00184	e0853084	 add         r3, r5, r4, lsl #1
  00188	e7c2100a	 strb        r1, [r2, +r10]
  0018c	e1d310b0	 ldrh        r1, [r3]
  00190	e2822001	 add         r2, r2, #1
  00194	e1a03001	 mov         r3, r1
  00198	e3510020	 cmp         r1, #0x20
  0019c	1affffef	 bne         |$LL5@SetTestOpt|
  001a0		 |$LN4@SetTestOpt|

; 383  : 				   }
; 384  : 
; 385  : 				}
; 386  : 
; 387  : 			    szTempString[dwIndex] = '\0';
; 388  :      			*pdwVariable = atoi(szTempString);

  001a0	e28d000c	 add         r0, sp, #0xC
  001a4	e7c2e009	 strb        lr, [r2, +r9]
  001a8	eb000000	 bl          atoi
  001ac	e5860000	 str         r0, [r6]
  001b0	e3a0e000	 mov         lr, #0
  001b4		 |$LN34@SetTestOpt|
  001b4	e0853084	 add         r3, r5, r4, lsl #1
  001b8	e1d330b0	 ldrh        r3, [r3]
  001bc	e3530000	 cmp         r3, #0
  001c0	1affffbc	 bne         |$LL20@SetTestOpt|
  001c4	eaffffa7	 b           |$LN35@SetTestOpt|
  001c8		 |$LN31@SetTestOpt|

; 338  :                 break;
; 339  :             }    
; 340  : 
; 341  :         default:
; 342  :             g_pKato->Log( LOG_DETAIL, TEXT("Command Line Options are Invalid \n"));

  001c8	e59f3088	 ldr         r3, [pc, #0x88]
  001cc	e59f1080	 ldr         r1, [pc, #0x80]
  001d0	e59f208c	 ldr         r2, [pc, #0x8C]
  001d4	e5930000	 ldr         r0, [r3]
  001d8	e5913000	 ldr         r3, [r1]
  001dc	e3a0100c	 mov         r1, #0xC
  001e0	e1a0e00f	 mov         lr, pc
  001e4	e12fff13	 bx          r3
  001e8		 |$LN39@SetTestOpt|

; 343  :             //DisplayHelp();
; 344  :             return FALSE;

  001e8	e59d0018	 ldr         r0, [sp, #0x18]
  001ec	eb000000	 bl          __security_check_cookie
  001f0	e3a00000	 mov         r0, #0
  001f4	eaffff9e	 b           |$LN22@SetTestOpt|
  001f8		 |$LN30@SetTestOpt|

; 368  : 						{
; 369  : 							g_pKato->Log( LOG_DETAIL, TEXT("In %s @ line %d:Value Not Valid "),__THIS_FILE__, __LINE__ );

  001f8	e59f3058	 ldr         r3, [pc, #0x58]
  001fc	e59f2050	 ldr         r2, [pc, #0x50]
  00200	e3a01c01	 mov         r1, #1, 24
  00204	e5930000	 ldr         r0, [r3]
  00208	e5925000	 ldr         r5, [r2]
  0020c	e59f304c	 ldr         r3, [pc, #0x4C]
  00210	e59f2044	 ldr         r2, [pc, #0x44]
  00214	e3814071	 orr         r4, r1, #0x71
  00218	e3a0100c	 mov         r1, #0xC
  0021c	e58d4000	 str         r4, [sp]
  00220	e1a0e00f	 mov         lr, pc
  00224	e12fff15	 bx          r5

; 370  : 							return FALSE;

  00228	eaffffee	 b           |$LN39@SetTestOpt|
  0022c		 |$LN3@SetTestOpt|

; 376  : 
; 377  : 				   }
; 378  : 
; 379  : 				   else
; 380  : 				   {
; 381  : 					   	g_pKato->Log( LOG_DETAIL, TEXT("Invalid number \n"));

  0022c	e59f3024	 ldr         r3, [pc, #0x24]
  00230	e59f101c	 ldr         r1, [pc, #0x1C]
  00234	e59f2014	 ldr         r2, [pc, #0x14]
  00238	e5930000	 ldr         r0, [r3]
  0023c	e5913000	 ldr         r3, [r1]
  00240	e3a0100c	 mov         r1, #0xC
  00244	e1a0e00f	 mov         lr, pc
  00248	e12fff13	 bx          r3

; 382  : 						return FALSE;

  0024c	eaffffe5	 b           |$LN39@SetTestOpt|
  00250		 |$LN43@SetTestOpt|
  00250		 |$LN44@SetTestOpt|
  00250	00000000	 DCD         |??_C@_1CC@OCNIMJBA@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?5?$AA?6?$AA?$AA@|
  00254		 |$LN45@SetTestOpt|
  00254	00000000	 DCD         |__imp_?Log@CKato@@QAAHKPBGZZ|
  00258		 |$LN46@SetTestOpt|
  00258	00000000	 DCD         |?g_pKato@@3PAVCKato@@A|
  0025c		 |$LN47@SetTestOpt|
  0025c	00000000	 DCD         |??_C@_1EC@KAHLNJHF@?$AAI?$AAn?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAV?$AAa?$AAl?$AAi?$AAd?$AA?5@|
  00260		 |$LN48@SetTestOpt|
  00260	00000000	 DCD         |??_C@_1DI@EMOMAECC@?$AAT?$AAu?$AAx?$AA_?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AAT?$AAe?$AAs?$AAt?$AA?4?$AAc?$AAp?$AAp?$AA?$AA@|
  00264		 |$LN49@SetTestOpt|
  00264	00000000	 DCD         |??_C@_1EG@PNOECICE@?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAL?$AAi?$AAn?$AAe?$AA?5?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@|
  00268		 |$LN50@SetTestOpt|
  00268	00000000	 DCD         |?g_fStress@@3HA|
  0026c		 |$LN51@SetTestOpt|
  0026c	00000000	 DCD         |?g_StressCount@@3KA|
  00270		 |$LN52@SetTestOpt|
  00270	00000000	 DCD         |??_C@_1GG@IAPCIIAO@?$AAF?$AAA?$AAI?$AAL?$AA?5?$AAi?$AAn?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AAC?$AAO?$AAN?$AAD?$AAI?$AAT?$AAI?$AAO?$AAN?$AA?$CI@|
  00274		 |$LN53@SetTestOpt|
  00274	00000000	 DCD         |??_C@_1DE@BECLEOD@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAt?$AAc?$AAs?$AAl?$AAe?$AAn?$AA?$CI?$AAl?$AAp?$AAs?$AAz?$AAC?$AAm?$AAd?$AAL?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@|
  00278		 |$LN54@SetTestOpt|
  00278	00000000	 DCD         |??_C@_1BI@NHEFPFMB@?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?$AA@|
  0027c		 |$LN55@SetTestOpt|
  0027c	00000000	 DCD         |__security_cookie|
  00280		 |$M32737|

			 ENDP  ; |?SetTestOptions@@YAHPAG@Z|, SetTestOptions

	EXPORT	|ShellProc|
	EXPORT	|??_C@_1EK@DIIDMDAD@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@KACAOMDA@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAo?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CB?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@KDFHODIP@?$AAE?$AAN?$AAD?$AA?5?$AAT?$AAE?$AAS?$AAT?$AA?3?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?0?$AA?5?$AA?$CF?$AAs?$AA?0?$AA?5?$AAT?$AAi?$AAm?$AAe?$AA?$DN?$AA?$CF?$AAu?$AA?4?$AA?$CF?$AA0?$AA3?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@FGBMDHOA@?$AAA?$AAB?$AAO?$AAR?$AAT?$AAE?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@GLIHGOJN@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@GAOACLOB@?$AAP?$AAA?$AAS?$AAS?$AAE?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@PGEPKIHK@?$AAS?$AAK?$AAI?$AAP?$AAP?$AAE?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@LEDNBHEI@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAE?$AAN?$AAD?$AA_?$AAT?$AAE?$AAS?$AAT?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@FHMCMOKK@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AA_?$AAT?$AAE?$AAS?$AAT?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@FOHJMLNM@?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?5?$AAT?$AAE?$AAS?$AAT?$AA?3?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?0?$AA?5?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAs?$AA?$DN?$AA?$CF?$AAu?$AA?0?$AA?5?$AAS?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@GHDGMMPI@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAE?$AAN?$AAD?$AA_?$AAG?$AAR?$AAO?$AAU?$AAP?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@PADLHGGO@?$AAE?$AAN?$AAD?$AA?5?$AAG?$AAR?$AAO?$AAU?$AAP?$AA?3?$AA?5?$AAT?$AAu?$AAx?$AA_?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?4?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@PEHBNEBJ@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AA_?$AAG?$AAR?$AAO?$AAU?$AAP?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@PODIAEEH@?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?5?$AAG?$AAR?$AAO?$AAU?$AAP?$AA?3?$AA?5?$AAT?$AAu?$AAx?$AA_?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@MABEFEBO@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAS?$AAT?$AAO?$AAP?$AA_?$AAS?$AAC?$AAR?$AAI?$AAP?$AAT?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@IPECFONB@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAS?$AAT?$AAA?$AAR?$AAT?$AA_?$AAS?$AAC?$AAR?$AAI?$AAP?$AAT?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@BIFLJGHA@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAE?$AAR?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@PBGNCCNB@?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAS?$AAP?$AAM?$AA_?$AAS?$AAH?$AAE?$AAL?$AAL?$AA_?$AAI?$AAN?$AAF?$AAO?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@NMLGEFPE@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?5?$AAi?$AAn?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?5?$AAN?$AAo?$AA?5?$AAc?$AAo?$AAm@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@JBHDKOEF@?$AAF?$AAA?$AAI?$AAL?$AA?5?$AAi?$AAn?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@LCENFKIH@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAS?$AAH?$AAE?$AAL?$AAL?$AA_?$AAI?$AAN?$AAF?$AAO?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@FLPNONNI@?$AAG?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@DHBFOELL@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAU?$AAN?$AAL?$AAO?$AAA?$AAD?$AA_?$AAD?$AAL?$AAL?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@LLGCEHFM@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAL?$AAO?$AAA?$AAD?$AA_?$AAD?$AAL?$AAL?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl@| [ DATA ] ; `string'
	IMPORT	|??3@YAXPAX@Z|				; operator delete
	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|KatoGetDefaultObject|
	IMPORT	|__imp_?EndLevel@CKato@@QAAHPBGZZ|
	IMPORT	|__imp_?BeginLevel@CKato@@QAAHKPBGZZ|
	IMPORT	|?g_lpFTE@@3PAU_FUNCTION_TABLE_ENTRY@@A| ; g_lpFTE
	IMPORT	|?g_spsShellInfo@@3U_SPS_SHELL_INFO@@A|	; g_spsShellInfo
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T32792| DCD	|$LN46@ShellProc|
	DCD	0x4000f302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@DIIDMDAD@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa@| DCB "S"
	DCB	0x0, "h", 0x0, "e", 0x0, "l", 0x0, "l", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "(", 0x0, "S", 0x0, "P", 0x0, "M"
	DCB	0x0, "_", 0x0, "E", 0x0, "X", 0x0, "C", 0x0, "E", 0x0, "P"
	DCB	0x0, "T", 0x0, "I", 0x0, "O", 0x0, "N", 0x0, ",", 0x0, " "
	DCB	0x0, ".", 0x0, ".", 0x0, ".", 0x0, ")", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@KACAOMDA@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAo?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CB?$AA?$AA@| DCB "E"
	DCB	0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "o", 0x0, "c", 0x0, "c"
	DCB	0x0, "u", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "d", 0x0, "!"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@KDFHODIP@?$AAE?$AAN?$AAD?$AA?5?$AAT?$AAE?$AAS?$AAT?$AA?3?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?0?$AA?5?$AA?$CF?$AAs?$AA?0?$AA?5?$AAT?$AAi?$AAm?$AAe?$AA?$DN?$AA?$CF?$AAu?$AA?4?$AA?$CF?$AA0?$AA3?$AAu@| DCB "E"
	DCB	0x0, "N", 0x0, "D", 0x0, " ", 0x0, "T", 0x0, "E", 0x0, "S"
	DCB	0x0, "T", 0x0, ":", 0x0, " ", 0x0, """", 0x0, "%", 0x0, "s"
	DCB	0x0, """", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, ","
	DCB	0x0, " ", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "="
	DCB	0x0, "%", 0x0, "u", 0x0, ".", 0x0, "%", 0x0, "0", 0x0, "3"
	DCB	0x0, "u", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@FGBMDHOA@?$AAA?$AAB?$AAO?$AAR?$AAT?$AAE?$AAD?$AA?$AA@| DCB "A", 0x0
	DCB	"B", 0x0, "O", 0x0, "R", 0x0, "T", 0x0, "E", 0x0, "D", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@GLIHGOJN@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@| DCB "F", 0x0, "A"
	DCB	0x0, "I", 0x0, "L", 0x0, "E", 0x0, "D", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@GAOACLOB@?$AAP?$AAA?$AAS?$AAS?$AAE?$AAD?$AA?$AA@| DCB "P", 0x0, "A"
	DCB	0x0, "S", 0x0, "S", 0x0, "E", 0x0, "D", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@PGEPKIHK@?$AAS?$AAK?$AAI?$AAP?$AAP?$AAE?$AAD?$AA?$AA@| DCB "S", 0x0
	DCB	"K", 0x0, "I", 0x0, "P", 0x0, "P", 0x0, "E", 0x0, "D", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@LEDNBHEI@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAE?$AAN?$AAD?$AA_?$AAT?$AAE?$AAS?$AAT?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl@| DCB "S"
	DCB	0x0, "h", 0x0, "e", 0x0, "l", 0x0, "l", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "(", 0x0, "S", 0x0, "P", 0x0, "M"
	DCB	0x0, "_", 0x0, "E", 0x0, "N", 0x0, "D", 0x0, "_", 0x0, "T"
	DCB	0x0, "E", 0x0, "S", 0x0, "T", 0x0, ",", 0x0, " ", 0x0, "."
	DCB	0x0, ".", 0x0, ".", 0x0, ")", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@FHMCMOKK@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AA_?$AAT?$AAE?$AAS?$AAT?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc@| DCB "S"
	DCB	0x0, "h", 0x0, "e", 0x0, "l", 0x0, "l", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "(", 0x0, "S", 0x0, "P", 0x0, "M"
	DCB	0x0, "_", 0x0, "B", 0x0, "E", 0x0, "G", 0x0, "I", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "E", 0x0, "S", 0x0, "T", 0x0, ","
	DCB	0x0, " ", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, ")", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@FOHJMLNM@?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?5?$AAT?$AAE?$AAS?$AAT?$AA?3?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?0?$AA?5?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAs?$AA?$DN?$AA?$CF?$AAu?$AA?0?$AA?5?$AAS?$AAe@| DCB "B"
	DCB	0x0, "E", 0x0, "G", 0x0, "I", 0x0, "N", 0x0, " ", 0x0, "T"
	DCB	0x0, "E", 0x0, "S", 0x0, "T", 0x0, ":", 0x0, " ", 0x0, """"
	DCB	0x0, "%", 0x0, "s", 0x0, """", 0x0, ",", 0x0, " ", 0x0, "T"
	DCB	0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "s"
	DCB	0x0, "=", 0x0, "%", 0x0, "u", 0x0, ",", 0x0, " ", 0x0, "S"
	DCB	0x0, "e", 0x0, "e", 0x0, "d", 0x0, "=", 0x0, "%", 0x0, "u"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@GHDGMMPI@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAE?$AAN?$AAD?$AA_?$AAG?$AAR?$AAO?$AAU?$AAP?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa@| DCB "S"
	DCB	0x0, "h", 0x0, "e", 0x0, "l", 0x0, "l", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "(", 0x0, "S", 0x0, "P", 0x0, "M"
	DCB	0x0, "_", 0x0, "E", 0x0, "N", 0x0, "D", 0x0, "_", 0x0, "G"
	DCB	0x0, "R", 0x0, "O", 0x0, "U", 0x0, "P", 0x0, ",", 0x0, " "
	DCB	0x0, ".", 0x0, ".", 0x0, ".", 0x0, ")", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@PADLHGGO@?$AAE?$AAN?$AAD?$AA?5?$AAG?$AAR?$AAO?$AAU?$AAP?$AA?3?$AA?5?$AAT?$AAu?$AAx?$AA_?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?4?$AAD@| DCB "E"
	DCB	0x0, "N", 0x0, "D", 0x0, " ", 0x0, "G", 0x0, "R", 0x0, "O"
	DCB	0x0, "U", 0x0, "P", 0x0, ":", 0x0, " ", 0x0, "T", 0x0, "u"
	DCB	0x0, "x", 0x0, "_", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "M", 0x0, "a", 0x0, "n", 0x0, "a", 0x0, "g"
	DCB	0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "."
	DCB	0x0, "D", 0x0, "L", 0x0, "L", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@PEHBNEBJ@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AA_?$AAG?$AAR?$AAO?$AAU?$AAP?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5@| DCB "S"
	DCB	0x0, "h", 0x0, "e", 0x0, "l", 0x0, "l", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "(", 0x0, "S", 0x0, "P", 0x0, "M"
	DCB	0x0, "_", 0x0, "B", 0x0, "E", 0x0, "G", 0x0, "I", 0x0, "N"
	DCB	0x0, "_", 0x0, "G", 0x0, "R", 0x0, "O", 0x0, "U", 0x0, "P"
	DCB	0x0, ",", 0x0, " ", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, ")"
	DCB	0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@PODIAEEH@?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?5?$AAG?$AAR?$AAO?$AAU?$AAP?$AA?3?$AA?5?$AAT?$AAu?$AAx?$AA_?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt@| DCB "B"
	DCB	0x0, "E", 0x0, "G", 0x0, "I", 0x0, "N", 0x0, " ", 0x0, "G"
	DCB	0x0, "R", 0x0, "O", 0x0, "U", 0x0, "P", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "u", 0x0, "x", 0x0, "_", 0x0, "P", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, "M", 0x0, "a", 0x0, "n"
	DCB	0x0, "a", 0x0, "g", 0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, ".", 0x0, "D", 0x0, "L", 0x0, "L", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@MABEFEBO@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAS?$AAT?$AAO?$AAP?$AA_?$AAS?$AAC?$AAR?$AAI?$AAP?$AAT?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5@| DCB "S"
	DCB	0x0, "h", 0x0, "e", 0x0, "l", 0x0, "l", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "(", 0x0, "S", 0x0, "P", 0x0, "M"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "O", 0x0, "P", 0x0, "_"
	DCB	0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I", 0x0, "P", 0x0, "T"
	DCB	0x0, ",", 0x0, " ", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, ")"
	DCB	0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@IPECFONB@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAS?$AAT?$AAA?$AAR?$AAT?$AA_?$AAS?$AAC?$AAR?$AAI?$AAP?$AAT?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ@| DCB "S"
	DCB	0x0, "h", 0x0, "e", 0x0, "l", 0x0, "l", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "(", 0x0, "S", 0x0, "P", 0x0, "M"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "R", 0x0, "T"
	DCB	0x0, "_", 0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I", 0x0, "P"
	DCB	0x0, "T", 0x0, ",", 0x0, " ", 0x0, ".", 0x0, ".", 0x0, "."
	DCB	0x0, ")", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@BIFLJGHA@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAE?$AAR?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl@| DCB "S"
	DCB	0x0, "h", 0x0, "e", 0x0, "l", 0x0, "l", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "(", 0x0, "S", 0x0, "P", 0x0, "M"
	DCB	0x0, "_", 0x0, "R", 0x0, "E", 0x0, "G", 0x0, "I", 0x0, "S"
	DCB	0x0, "T", 0x0, "E", 0x0, "R", 0x0, ",", 0x0, " ", 0x0, "."
	DCB	0x0, ".", 0x0, ".", 0x0, ")", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@PBGNCCNB@?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAS?$AAP?$AAM?$AA_?$AAS?$AAH?$AAE?$AAL?$AAL?$AA_?$AAI?$AAN?$AAF?$AAO?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o"
	DCB	0x0, "m", 0x0, " ", 0x0, "S", 0x0, "P", 0x0, "M", 0x0, "_"
	DCB	0x0, "S", 0x0, "H", 0x0, "E", 0x0, "L", 0x0, "L", 0x0, "_"
	DCB	0x0, "I", 0x0, "N", 0x0, "F", 0x0, "O", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@NMLGEFPE@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?5?$AAi?$AAn?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?5?$AAN?$AAo?$AA?5?$AAc?$AAo?$AAm@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "%", 0x0, "s"
	DCB	0x0, " ", 0x0, "@", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, " ", 0x0, "N", 0x0, "o", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, " "
	DCB	0x0, "l", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, ",", 0x0, " "
	DCB	0x0, "r", 0x0, "u", 0x0, "n", 0x0, "n", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "a"
	DCB	0x0, "u", 0x0, "l", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, ".", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@JBHDKOEF@?$AAF?$AAA?$AAI?$AAL?$AA?5?$AAi?$AAn?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAs@| DCB "F"
	DCB	0x0, "A", 0x0, "I", 0x0, "L", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "%", 0x0, "s", 0x0, " ", 0x0, "@", 0x0, " "
	DCB	0x0, "l", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "u"
	DCB	0x0, "l", 0x0, "d", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, "s", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@LCENFKIH@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAS?$AAH?$AAE?$AAL?$AAL?$AA_?$AAI?$AAN?$AAF?$AAO?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc@| DCB "S"
	DCB	0x0, "h", 0x0, "e", 0x0, "l", 0x0, "l", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "(", 0x0, "S", 0x0, "P", 0x0, "M"
	DCB	0x0, "_", 0x0, "S", 0x0, "H", 0x0, "E", 0x0, "L", 0x0, "L"
	DCB	0x0, "_", 0x0, "I", 0x0, "N", 0x0, "F", 0x0, "O", 0x0, ","
	DCB	0x0, " ", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, ")", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@FLPNONNI@?$AAG?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?$AA@| DCB "G"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m"
	DCB	0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@DHBFOELL@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAU?$AAN?$AAL?$AAO?$AAA?$AAD?$AA_?$AAD?$AAL?$AAL?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc@| DCB "S"
	DCB	0x0, "h", 0x0, "e", 0x0, "l", 0x0, "l", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "(", 0x0, "S", 0x0, "P", 0x0, "M"
	DCB	0x0, "_", 0x0, "U", 0x0, "N", 0x0, "L", 0x0, "O", 0x0, "A"
	DCB	0x0, "D", 0x0, "_", 0x0, "D", 0x0, "L", 0x0, "L", 0x0, ","
	DCB	0x0, " ", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, ")", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@LLGCEHFM@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAL?$AAO?$AAA?$AAD?$AA_?$AAD?$AAL?$AAL?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl@| DCB "S"
	DCB	0x0, "h", 0x0, "e", 0x0, "l", 0x0, "l", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "(", 0x0, "S", 0x0, "P", 0x0, "M"
	DCB	0x0, "_", 0x0, "L", 0x0, "O", 0x0, "A", 0x0, "D", 0x0, "_"
	DCB	0x0, "D", 0x0, "L", 0x0, "L", 0x0, ",", 0x0, " ", 0x0, "."
	DCB	0x0, ".", 0x0, ".", 0x0, ")", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ShellProc| PROC

; 91   : {

  00000		 |$LN46@ShellProc|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M32789|
  00008	e1a04001	 mov         r4, r1

; 92   :     LPSPS_BEGIN_TEST    pBT;
; 93   :     LPSPS_END_TEST      pET;
; 94   : 
; 95   : 	LPTSTR  lpszCmdLine = NULL;
; 96   : 	BOOL    fRtn        = FALSE;
; 97   : 
; 98   :     switch (uMsg)

  0000c	e2402001	 sub         r2, r0, #1
  00010	e352000a	 cmp         r2, #0xA
  00014	8a0000c8	 bhi         |$LN1@ShellProc|
  00018	e1a03082	 mov         r3, r2, lsl #1
  0001c	e083300f	 add         r3, r3, pc
  00020	e1d330b4	 ldrh        r3, [r3, #4]
  00024	e08ff003	 add         pc, pc, r3
  00028		 |$LN32@ShellProc|
  00028		 |$LN31@ShellProc|
  00028		 |$LN33@ShellProc|
  00028	0014		 DCW         0x14
  0002a		 |$LN34@ShellProc|
  0002a	0038		 DCW         0x38
  0002c		 |$LN35@ShellProc|
  0002c	01ac		 DCW         0x1ac
  0002e		 |$LN36@ShellProc|
  0002e	01b4		 DCW         0x1b4
  00030		 |$LN37@ShellProc|
  00030	01bc		 DCW         0x1bc
  00032		 |$LN38@ShellProc|
  00032	01ec		 DCW         0x1ec
  00034		 |$LN39@ShellProc|
  00034	0048		 DCW         0x48
  00036		 |$LN40@ShellProc|
  00036	0190		 DCW         0x190
  00038		 |$LN41@ShellProc|
  00038	02e0		 DCW         0x2e0
  0003a		 |$LN42@ShellProc|
  0003a	0218		 DCW         0x218
  0003c		 |$LN43@ShellProc|
  0003c	0260		 DCW         0x260
  0003e		 |$LN80@ShellProc|

; 285  :     }
; 286  : 
; 287  :     return SPR_HANDLED;
; 288  : }

  0003e	0260		 DCW         0x260
  00040		 |$LN16@ShellProc|

; 99   :     {
; 100  :     case SPM_LOAD_DLL:
; 101  :         // Sent once to the DLL immediately after it is loaded. The spParam
; 102  :         // parameter will contain a pointer to a SPS_LOAD_DLL structure. The
; 103  :         // DLL should set the fUnicode member of this structure to TRUE if the
; 104  :         // DLL is built with the UNICODE flag set. If you set this flag, Tux
; 105  :         // will ensure that all strings passed to your DLL will be in UNICODE
; 106  :         // format, and all strings within your function table will be processed
; 107  :         // by Tux as UNICODE. The DLL may return SPR_FAIL to prevent the DLL
; 108  :         // from continuing to load.
; 109  :         Debug(TEXT("ShellProc(SPM_LOAD_DLL, ...) called"));

  00040	e59f0380	 ldr         r0, [pc, #0x380]
  00044	eb000000	 bl          |?Debug@@YAXPBGZZ|

; 110  : 
; 111  :         // If we are UNICODE, then tell Tux this by setting the following flag.
; 112  : #ifdef UNICODE
; 113  :         ((LPSPS_LOAD_DLL)spParam)->fUnicode = TRUE;

  00048	e3a03001	 mov         r3, #1
  0004c	e5843000	 str         r3, [r4]

; 114  : #endif // UNICODE
; 115  :         g_pKato = (CKato*)KatoGetDefaultObject();

  00050	eb000000	 bl          KatoGetDefaultObject
  00054	e59f32f8	 ldr         r3, [pc, #0x2F8]
  00058	e5830000	 str         r0, [r3]

; 171  : 
; 172  :         return SPR_HANDLED;

  0005c	e3a00001	 mov         r0, #1
  00060	ea0000b6	 b           |$LN19@ShellProc|
  00064		 |$LN15@ShellProc|

; 116  :         break;
; 117  : 
; 118  :     case SPM_UNLOAD_DLL:
; 119  :         // Sent once to the DLL immediately before it is unloaded.
; 120  :         Debug(TEXT("ShellProc(SPM_UNLOAD_DLL, ...) called"));

  00064	e59f0358	 ldr         r0, [pc, #0x358]
  00068		 |$LN29@ShellProc|
  00068	eb000000	 bl          |?Debug@@YAXPBGZZ|

; 171  : 
; 172  :         return SPR_HANDLED;

  0006c	e3a00001	 mov         r0, #1
  00070	ea0000b2	 b           |$LN19@ShellProc|
  00074		 |$LN14@ShellProc|

; 121  :         break;
; 122  : 
; 123  :     case SPM_SHELL_INFO:
; 124  :         // Sent once to the DLL immediately after SPM_LOAD_DLL to give the DLL
; 125  :         // some useful information about its parent shell and environment. The
; 126  :         // spParam parameter will contain a pointer to a SPS_SHELL_INFO
; 127  :         // structure. The pointer to the structure may be stored for later use
; 128  :         // as it will remain valid for the life of this Tux Dll. The DLL may
; 129  :         // return SPR_FAIL to prevent the DLL from continuing to load.
; 130  :         Debug(TEXT("ShellProc(SPM_SHELL_INFO, ...) called"));

  00074	e59f0344	 ldr         r0, [pc, #0x344]
  00078	eb000000	 bl          |?Debug@@YAXPBGZZ|

; 131  : 
; 132  :         // Store a pointer to our shell info for later use.
; 133  : 
; 134  :         g_spsShellInfo = *(LPSPS_SHELL_INFO)spParam;

  0007c	e59f7338	 ldr         r7, [pc, #0x338]
  00080	e3a0201c	 mov         r2, #0x1C
  00084	e1a01004	 mov         r1, r4
  00088	e1a00007	 mov         r0, r7
  0008c	eb000000	 bl          memcpy

; 135  : 
; 136  :         g_pKato->Log( LOG_DETAIL, TEXT("Get command line") );

  00090	e59f52bc	 ldr         r5, [pc, #0x2BC]
  00094	e59f32b4	 ldr         r3, [pc, #0x2B4]
  00098	e59f2318	 ldr         r2, [pc, #0x318]
  0009c	e5950000	 ldr         r0, [r5]
  000a0	e5933000	 ldr         r3, [r3]
  000a4	e3a0100c	 mov         r1, #0xC
  000a8	e1a0e00f	 mov         lr, pc
  000ac	e12fff13	 bx          r3

; 137  :         
; 138  :         if( g_spsShellInfo.szDllCmdLine && g_spsShellInfo.szDllCmdLine[0] )

  000b0	e5970014	 ldr         r0, [r7, #0x14]
  000b4	e3500000	 cmp         r0, #0
  000b8	0a00002c	 beq         |$LN13@ShellProc|
  000bc	e1d030b0	 ldrh        r3, [r0]
  000c0	e3530000	 cmp         r3, #0
  000c4	0a000029	 beq         |$LN13@ShellProc|

; 139  :         {
; 140  :             lpszCmdLine = new TCHAR[ (_tcslen(g_spsShellInfo.szDllCmdLine)+1) ];

  000c8	eb000000	 bl          wcslen
  000cc	e2803001	 add         r3, r0, #1
  000d0	e3730106	 cmn         r3, #6, 2
  000d4	91a00083	 movls       r0, r3, lsl #1
  000d8	83e00000	 mvnhi       r0, #0
  000dc	eb000000	 bl          |??2@YAPAXI@Z|
  000e0	e1b06000	 movs        r6, r0

; 141  :             if( NULL == lpszCmdLine )

  000e4	1a00000b	 bne         |$LN12@ShellProc|

; 142  :             {
; 143  :                 g_pKato->Log( LOG_FAIL, 
; 144  :                               TEXT("FAIL in %s @ line %d: Couldn't set test options"),
; 145  :                               __THIS_FILE__, __LINE__ );

  000e8	e59f1260	 ldr         r1, [pc, #0x260]
  000ec	e5950000	 ldr         r0, [r5]
  000f0	e59f32b8	 ldr         r3, [pc, #0x2B8]
  000f4	e5914000	 ldr         r4, [r1]
  000f8	e59f22b4	 ldr         r2, [pc, #0x2B4]
  000fc	e3a05091	 mov         r5, #0x91
  00100	e3a01002	 mov         r1, #2
  00104	e58d5000	 str         r5, [sp]
  00108	e1a0e00f	 mov         lr, pc
  0010c	e12fff14	 bx          r4

; 146  :                 return SPR_FAIL;

  00110	e3a00003	 mov         r0, #3
  00114	ea000089	 b           |$LN19@ShellProc|
  00118		 |$LN12@ShellProc|

; 147  : 
; 148  :             } // if( NULL == lpszCmdLine )
; 149  :             _tcscpy( lpszCmdLine, g_spsShellInfo.szDllCmdLine );

  00118	e5971014	 ldr         r1, [r7, #0x14]
  0011c	e1a00006	 mov         r0, r6
  00120	eb000000	 bl          wcscpy

; 150  : 
; 151  :               
; 152  : 
; 153  :             fRtn = SetTestOptions( lpszCmdLine );

  00124	e1a00006	 mov         r0, r6
  00128	eb000000	 bl          |?SetTestOptions@@YAHPAG@Z|
  0012c	e1a04000	 mov         r4, r0

; 154  :             delete[] lpszCmdLine;

  00130	e1a00006	 mov         r0, r6
  00134	eb000000	 bl          |??3@YAXPAX@Z|

; 155  :             if( !fRtn )

  00138	e3540000	 cmp         r4, #0
  0013c	1a000015	 bne         |$LN10@ShellProc|

; 156  :             {
; 157  :                 g_pKato->Log( LOG_FAIL, 
; 158  :                               TEXT("FAIL in %s @ line %d: Couldn't set test options"),
; 159  :                               __THIS_FILE__, __LINE__ );

  00140	e59f1208	 ldr         r1, [pc, #0x208]
  00144	e5950000	 ldr         r0, [r5]
  00148	e59f3260	 ldr         r3, [pc, #0x260]
  0014c	e5914000	 ldr         r4, [r1]
  00150	e59f225c	 ldr         r2, [pc, #0x25C]
  00154	e3a0509f	 mov         r5, #0x9F
  00158	e3a01002	 mov         r1, #2
  0015c	e58d5000	 str         r5, [sp]
  00160	e1a0e00f	 mov         lr, pc
  00164	e12fff14	 bx          r4
  00168	e3a00003	 mov         r0, #3
  0016c	ea000073	 b           |$LN19@ShellProc|
  00170		 |$LN13@ShellProc|

; 160  :                 return SPR_FAIL;
; 161  :             
; 162  :             } // end if( NULL == g_pKato );
; 163  :         }
; 164  :         else
; 165  :         {
; 166  :               g_pKato->Log( LOG_WARNING, 
; 167  :                           TEXT("WARNING in %s @ line %d:  No command line, running default test."),
; 168  :                          __THIS_FILE__, __LINE__ );

  00170	e59f11d8	 ldr         r1, [pc, #0x1D8]
  00174	e59f3234	 ldr         r3, [pc, #0x234]
  00178	e59f222c	 ldr         r2, [pc, #0x22C]
  0017c	e5914000	 ldr         r4, [r1]
  00180	e5950000	 ldr         r0, [r5]
  00184	e3a060a8	 mov         r6, #0xA8
  00188	e3a01010	 mov         r1, #0x10
  0018c	e58d6000	 str         r6, [sp]
  00190	e1a0e00f	 mov         lr, pc
  00194	e12fff14	 bx          r4
  00198		 |$LN10@ShellProc|

; 169  :         }
; 170  : 		g_pKato->Log( LOG_DETAIL, TEXT("Returning from SPM_SHELL_INFO") );

  00198	e59f31b0	 ldr         r3, [pc, #0x1B0]
  0019c	e59f2204	 ldr         r2, [pc, #0x204]
  001a0	e5950000	 ldr         r0, [r5]
  001a4	e5933000	 ldr         r3, [r3]
  001a8	e3a0100c	 mov         r1, #0xC
  001ac	e1a0e00f	 mov         lr, pc
  001b0	e12fff13	 bx          r3

; 171  : 
; 172  :         return SPR_HANDLED;

  001b4	e3a00001	 mov         r0, #1
  001b8	ea000060	 b           |$LN19@ShellProc|
  001bc		 |$LN9@ShellProc|

; 173  : 
; 174  :         break;
; 175  : 
; 176  :     case SPM_REGISTER:
; 177  :         // This is the only ShellProc() message that a DLL is required to
; 178  :         // handle (except for SPM_LOAD_DLL if you are UNICODE). This message is
; 179  :         // sent once to the DLL immediately after the SPM_SHELL_INFO message to
; 180  :         // query the DLL for its function table. The spParam will contain a
; 181  :         // pointer to a SPS_REGISTER structure. The DLL should store its
; 182  :         // function table in the lpFunctionTable member of the SPS_REGISTER
; 183  :         // structure. The DLL may return SPR_FAIL to prevent the DLL from
; 184  :         // continuing to load.
; 185  :         Debug(TEXT("ShellProc(SPM_REGISTER, ...) called"));

  001bc	e59f01e0	 ldr         r0, [pc, #0x1E0]
  001c0	eb000000	 bl          |?Debug@@YAXPBGZZ|

; 186  :         ((LPSPS_REGISTER)spParam)->lpFunctionTable = g_lpFTE;

  001c4	e59f31d4	 ldr         r3, [pc, #0x1D4]
  001c8	e3a02801	 mov         r2, #1, 16

; 187  : #ifdef UNICODE
; 188  :         return SPR_HANDLED | SPF_UNICODE;

  001cc	e3820001	 orr         r0, r2, #1
  001d0	e5843000	 str         r3, [r4]
  001d4	ea000059	 b           |$LN19@ShellProc|
  001d8		 |$LN8@ShellProc|

; 189  : #else // UNICODE
; 190  :         return SPR_HANDLED;
; 191  : #endif // UNICODE
; 192  : 
; 193  :     case SPM_START_SCRIPT:
; 194  :         // Sent to the DLL immediately before a script is started. It is sent
; 195  :         // to all Tux DLLs, including loaded Tux DLLs that are not in the
; 196  :         // script. All DLLs will receive this message before the first
; 197  :         // TestProc() in the script is called.
; 198  :         Debug(TEXT("ShellProc(SPM_START_SCRIPT, ...) called"));

  001d8	e59f01bc	 ldr         r0, [pc, #0x1BC]

; 199  :         break;

  001dc	eaffffa1	 b           |$LN29@ShellProc|
  001e0		 |$LN7@ShellProc|

; 200  : 
; 201  :     case SPM_STOP_SCRIPT:
; 202  :         // Sent to the DLL when the script has stopped. This message is sent
; 203  :         // when the script reaches its end, or because the user pressed
; 204  :         // stopped prior to the end of the script. This message is sent to
; 205  :         // all Tux DLLs, including loaded Tux DLLs that are not in the script.
; 206  :         Debug(TEXT("ShellProc(SPM_STOP_SCRIPT, ...) called"));

  001e0	e59f01b0	 ldr         r0, [pc, #0x1B0]

; 207  :         break;

  001e4	eaffff9f	 b           |$LN29@ShellProc|
  001e8		 |$LN6@ShellProc|

; 208  : 
; 209  :     case SPM_BEGIN_GROUP:
; 210  :         // Sent to the DLL before a group of tests from that DLL is about to
; 211  :         // be executed. This gives the DLL a time to initialize or allocate
; 212  :         // data for the tests to follow. Only the DLL that is next to run
; 213  :         // receives this message. The prior DLL, if any, will first receive
; 214  :         // a SPM_END_GROUP message. For global initialization and
; 215  :         // de-initialization, the DLL should probably use SPM_START_SCRIPT
; 216  :         // and SPM_STOP_SCRIPT, or even SPM_LOAD_DLL and SPM_UNLOAD_DLL.
; 217  :         Debug(TEXT("ShellProc(SPM_BEGIN_GROUP, ...) called"));

  001e8	e59f01a4	 ldr         r0, [pc, #0x1A4]
  001ec	eb000000	 bl          |?Debug@@YAXPBGZZ|

; 218  :         g_pKato->BeginLevel(0, TEXT("BEGIN GROUP: Tux_PowerManagement.DLL"));

  001f0	e59f315c	 ldr         r3, [pc, #0x15C]
  001f4	e59f1184	 ldr         r1, [pc, #0x184]
  001f8	e59f2190	 ldr         r2, [pc, #0x190]
  001fc	e5930000	 ldr         r0, [r3]
  00200	e5913000	 ldr         r3, [r1]
  00204	e3a01000	 mov         r1, #0
  00208	e1a0e00f	 mov         lr, pc
  0020c	e12fff13	 bx          r3
  00210	e3a00001	 mov         r0, #1
  00214	ea000049	 b           |$LN19@ShellProc|
  00218		 |$LN5@ShellProc|

; 219  :         break;
; 220  : 
; 221  :     case SPM_END_GROUP:
; 222  :         // Sent to the DLL after a group of tests from that DLL has completed
; 223  :         // running. This gives the DLL a time to cleanup after it has been
; 224  :         // run. This message does not mean that the DLL will not be called
; 225  :         // again; it just means that the next test to run belongs to a
; 226  :         // different DLL. SPM_BEGIN_GROUP and SPM_END_GROUP allow the DLL
; 227  :         // to track when it is active and when it is not active.
; 228  :         Debug(TEXT("ShellProc(SPM_END_GROUP, ...) called"));

  00218	e59f016c	 ldr         r0, [pc, #0x16C]
  0021c	eb000000	 bl          |?Debug@@YAXPBGZZ|

; 229  :         g_pKato->EndLevel(TEXT("END GROUP: Tux_PowerManagement.DLL"));

  00220	e59f312c	 ldr         r3, [pc, #0x12C]
  00224	e59f2134	 ldr         r2, [pc, #0x134]
  00228	e59f1158	 ldr         r1, [pc, #0x158]
  0022c	e5930000	 ldr         r0, [r3]
  00230	e5923000	 ldr         r3, [r2]
  00234	e1a0e00f	 mov         lr, pc
  00238	e12fff13	 bx          r3
  0023c	e3a00001	 mov         r0, #1
  00240	ea00003e	 b           |$LN19@ShellProc|
  00244		 |$LN4@ShellProc|

; 230  :         break;
; 231  : 
; 232  :     case SPM_BEGIN_TEST:
; 233  :         // Sent to the DLL immediately before a test executes. This gives
; 234  :         // the DLL a chance to perform any common action that occurs at the
; 235  :         // beginning of each test, such as entering a new logging level.
; 236  :         // The spParam parameter will contain a pointer to a SPS_BEGIN_TEST
; 237  :         // structure, which contains the function table entry and some other
; 238  :         // useful information for the next test to execute. If the ShellProc
; 239  :         // function returns SPR_SKIP, then the test case will not execute.
; 240  :         Debug(TEXT("ShellProc(SPM_BEGIN_TEST, ...) called"));

  00244	e59f0138	 ldr         r0, [pc, #0x138]
  00248	eb000000	 bl          |?Debug@@YAXPBGZZ|

; 241  :         // Start our logging level.
; 242  :         pBT = (LPSPS_BEGIN_TEST)spParam;
; 243  :         g_pKato->BeginLevel(
; 244  :             pBT->lpFTE->dwUniqueID,
; 245  :             TEXT("BEGIN TEST: \"%s\", Threads=%u, Seed=%u"),
; 246  :             pBT->lpFTE->lpDescription,
; 247  :             pBT->dwThreadCount,
; 248  :             pBT->dwRandomSeed);

  0024c	e5942000	 ldr         r2, [r4]
  00250	e59fe128	 ldr         lr, [pc, #0x128]
  00254	e59f00f8	 ldr         r0, [pc, #0xF8]
  00258	e5945004	 ldr         r5, [r4, #4]
  0025c	e5946008	 ldr         r6, [r4, #8]
  00260	e5923000	 ldr         r3, [r2]
  00264	e592100c	 ldr         r1, [r2, #0xC]
  00268	e59e4000	 ldr         r4, [lr]
  0026c	e59f2108	 ldr         r2, [pc, #0x108]
  00270	e5900000	 ldr         r0, [r0]
  00274	e58d5004	 str         r5, [sp, #4]
  00278	e58d6000	 str         r6, [sp]
  0027c	e1a0e00f	 mov         lr, pc
  00280	e12fff14	 bx          r4
  00284	e3a00001	 mov         r0, #1
  00288	ea00002c	 b           |$LN19@ShellProc|
  0028c		 |$LN3@ShellProc|

; 249  :         break;
; 250  : 
; 251  :     case SPM_END_TEST:
; 252  :         // Sent to the DLL after a single test executes from the DLL.
; 253  :         // This gives the DLL a time perform any common action that occurs at
; 254  :         // the completion of each test, such as exiting the current logging
; 255  :         // level. The spParam parameter will contain a pointer to a
; 256  :         // SPS_END_TEST structure, which contains the function table entry and
; 257  :         // some other useful information for the test that just completed. If
; 258  :         // the ShellProc returned SPR_SKIP for a given test case, then the
; 259  :         // ShellProc() will not receive a SPM_END_TEST for that given test case.
; 260  :         Debug(TEXT("ShellProc(SPM_END_TEST, ...) called"));

  0028c	e59f00e4	 ldr         r0, [pc, #0xE4]
  00290	eb000000	 bl          |?Debug@@YAXPBGZZ|

; 261  :         // End our logging level.
; 262  :         pET = (LPSPS_END_TEST)spParam;
; 263  :         g_pKato->EndLevel(
; 264  :             TEXT("END TEST: \"%s\", %s, Time=%u.%03u"),
; 265  :             pET->lpFTE->lpDescription,
; 266  :             pET->dwResult == TPR_SKIP ? TEXT("SKIPPED") :
; 267  :             pET->dwResult == TPR_PASS ? TEXT("PASSED") :
; 268  :             pET->dwResult == TPR_FAIL ? TEXT("FAILED") : TEXT("ABORTED"),
; 269  :             pET->dwExecutionTime / 1000, pET->dwExecutionTime % 1000);

  00294	e5943004	 ldr         r3, [r4, #4]
  00298	e3530002	 cmp         r3, #2
  0029c	059f30d0	 ldreq       r3, [pc, #0xD0]
  002a0	0a000005	 beq         |$LN24@ShellProc|
  002a4	e3530003	 cmp         r3, #3
  002a8	059f30c0	 ldreq       r3, [pc, #0xC0]
  002ac	0a000002	 beq         |$LN24@ShellProc|
  002b0	e3530004	 cmp         r3, #4
  002b4	059f30b0	 ldreq       r3, [pc, #0xB0]
  002b8	159f30a8	 ldrne       r3, [pc, #0xA8]
  002bc		 |$LN24@ShellProc|
  002bc	e5948010	 ldr         r8, [r4, #0x10]
  002c0	e59f209c	 ldr         r2, [pc, #0x9C]
  002c4	e3a0effa	 mov         lr, #0xFA, 30
  002c8	e5941000	 ldr         r1, [r4]
  002cc	e0807298	 umull       r7, r0, r8, r2
  002d0	e59f407c	 ldr         r4, [pc, #0x7C]
  002d4	e59f5084	 ldr         r5, [pc, #0x84]
  002d8	e5912000	 ldr         r2, [r1]
  002dc	e1a06320	 mov         r6, r0, lsr #6
  002e0	e00e0e96	 mul         lr, r6, lr
  002e4	e5940000	 ldr         r0, [r4]
  002e8	e59f106c	 ldr         r1, [pc, #0x6C]
  002ec	e048e00e	 sub         lr, r8, lr
  002f0	e5954000	 ldr         r4, [r5]
  002f4	e58de004	 str         lr, [sp, #4]
  002f8	e58d6000	 str         r6, [sp]
  002fc	e1a0e00f	 mov         lr, pc
  00300	e12fff14	 bx          r4
  00304	e3a00001	 mov         r0, #1
  00308	ea00000c	 b           |$LN19@ShellProc|
  0030c		 |$LN2@ShellProc|

; 270  :         break;
; 271  : 
; 272  :     case SPM_EXCEPTION:
; 273  :         // Sent to the DLL whenever code execution in the DLL causes and
; 274  :         // exception fault. TUX traps all exceptions that occur while
; 275  :         // executing code inside a test DLL.
; 276  :         Debug(TEXT("ShellProc(SPM_EXCEPTION, ...) called"));

  0030c	e59f0044	 ldr         r0, [pc, #0x44]
  00310	eb000000	 bl          |?Debug@@YAXPBGZZ|

; 277  :         g_pKato->Log(LOG_EXCEPTION, TEXT("Exception occurred!"));

  00314	e59f3038	 ldr         r3, [pc, #0x38]
  00318	e59f1030	 ldr         r1, [pc, #0x30]
  0031c	e59f2028	 ldr         r2, [pc, #0x28]
  00320	e5930000	 ldr         r0, [r3]
  00324	e5913000	 ldr         r3, [r1]
  00328	e3a01000	 mov         r1, #0
  0032c	e1a0e00f	 mov         lr, pc
  00330	e12fff13	 bx          r3
  00334	e3a00001	 mov         r0, #1
  00338	ea000000	 b           |$LN19@ShellProc|
  0033c		 |$LN1@ShellProc|

; 278  :         break;
; 279  : 
; 280  :     default:
; 281  :         // Any messages that we haven't processed must, by default, cause us
; 282  :         // to return SPR_NOT_HANDLED. This preserves compatibility with future
; 283  :         // versions of the TUX shell protocol, even if new messages are added.
; 284  :         return SPR_NOT_HANDLED;

  0033c	e3a00000	 mov         r0, #0
  00340		 |$LN19@ShellProc|

; 285  :     }
; 286  : 
; 287  :     return SPR_HANDLED;
; 288  : }

  00340	e28dd008	 add         sp, sp, #8
  00344	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00348	e12fff1e	 bx          lr
  0034c		 |$LN47@ShellProc|
  0034c		 |$LN48@ShellProc|
  0034c	00000000	 DCD         |??_C@_1CI@KACAOMDA@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAo?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CB?$AA?$AA@|
  00350		 |$LN49@ShellProc|
  00350	00000000	 DCD         |__imp_?Log@CKato@@QAAHKPBGZZ|
  00354		 |$LN50@ShellProc|
  00354	00000000	 DCD         |?g_pKato@@3PAVCKato@@A|
  00358		 |$LN51@ShellProc|
  00358	00000000	 DCD         |??_C@_1EK@DIIDMDAD@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa@|
  0035c		 |$LN52@ShellProc|
  0035c	00000000	 DCD         |??_C@_1EC@KDFHODIP@?$AAE?$AAN?$AAD?$AA?5?$AAT?$AAE?$AAS?$AAT?$AA?3?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?0?$AA?5?$AA?$CF?$AAs?$AA?0?$AA?5?$AAT?$AAi?$AAm?$AAe?$AA?$DN?$AA?$CF?$AAu?$AA?4?$AA?$CF?$AA0?$AA3?$AAu@|
  00360		 |$LN53@ShellProc|
  00360	00000000	 DCD         |__imp_?EndLevel@CKato@@QAAHPBGZZ|
  00364		 |$LN54@ShellProc|
  00364	10624dd3	 DCD         0x10624dd3
  00368		 |$LN55@ShellProc|
  00368	00000000	 DCD         |??_C@_1BA@FGBMDHOA@?$AAA?$AAB?$AAO?$AAR?$AAT?$AAE?$AAD?$AA?$AA@|
  0036c		 |$LN56@ShellProc|
  0036c	00000000	 DCD         |??_C@_1O@GLIHGOJN@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@|
  00370		 |$LN57@ShellProc|
  00370	00000000	 DCD         |??_C@_1O@GAOACLOB@?$AAP?$AAA?$AAS?$AAS?$AAE?$AAD?$AA?$AA@|
  00374		 |$LN58@ShellProc|
  00374	00000000	 DCD         |??_C@_1BA@PGEPKIHK@?$AAS?$AAK?$AAI?$AAP?$AAP?$AAE?$AAD?$AA?$AA@|
  00378		 |$LN59@ShellProc|
  00378	00000000	 DCD         |??_C@_1EI@LEDNBHEI@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAE?$AAN?$AAD?$AA_?$AAT?$AAE?$AAS?$AAT?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl@|
  0037c		 |$LN60@ShellProc|
  0037c	00000000	 DCD         |??_C@_1EM@FOHJMLNM@?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?5?$AAT?$AAE?$AAS?$AAT?$AA?3?$AA?5?$AA?$CC?$AA?$CF?$AAs?$AA?$CC?$AA?0?$AA?5?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAs?$AA?$DN?$AA?$CF?$AAu?$AA?0?$AA?5?$AAS?$AAe@|
  00380		 |$LN61@ShellProc|
  00380	00000000	 DCD         |__imp_?BeginLevel@CKato@@QAAHKPBGZZ|
  00384		 |$LN62@ShellProc|
  00384	00000000	 DCD         |??_C@_1EM@FHMCMOKK@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AA_?$AAT?$AAE?$AAS?$AAT?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc@|
  00388		 |$LN63@ShellProc|
  00388	00000000	 DCD         |??_C@_1EG@PADLHGGO@?$AAE?$AAN?$AAD?$AA?5?$AAG?$AAR?$AAO?$AAU?$AAP?$AA?3?$AA?5?$AAT?$AAu?$AAx?$AA_?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?4?$AAD@|
  0038c		 |$LN64@ShellProc|
  0038c	00000000	 DCD         |??_C@_1EK@GHDGMMPI@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAE?$AAN?$AAD?$AA_?$AAG?$AAR?$AAO?$AAU?$AAP?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa@|
  00390		 |$LN65@ShellProc|
  00390	00000000	 DCD         |??_C@_1EK@PODIAEEH@?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?5?$AAG?$AAR?$AAO?$AAU?$AAP?$AA?3?$AA?5?$AAT?$AAu?$AAx?$AA_?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt@|
  00394		 |$LN66@ShellProc|
  00394	00000000	 DCD         |??_C@_1EO@PEHBNEBJ@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAB?$AAE?$AAG?$AAI?$AAN?$AA_?$AAG?$AAR?$AAO?$AAU?$AAP?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5@|
  00398		 |$LN67@ShellProc|
  00398	00000000	 DCD         |??_C@_1EO@MABEFEBO@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAS?$AAT?$AAO?$AAP?$AA_?$AAS?$AAC?$AAR?$AAI?$AAP?$AAT?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5@|
  0039c		 |$LN68@ShellProc|
  0039c	00000000	 DCD         |??_C@_1FA@IPECFONB@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAS?$AAT?$AAA?$AAR?$AAT?$AA_?$AAS?$AAC?$AAR?$AAI?$AAP?$AAT?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ@|
  003a0		 |$LN69@ShellProc|
  003a0	00000000	 DCD         |?g_lpFTE@@3PAU_FUNCTION_TABLE_ENTRY@@A|
  003a4		 |$LN70@ShellProc|
  003a4	00000000	 DCD         |??_C@_1EI@BIFLJGHA@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAE?$AAR?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl@|
  003a8		 |$LN71@ShellProc|
  003a8	00000000	 DCD         |??_C@_1DM@PBGNCCNB@?$AAR?$AAe?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAS?$AAP?$AAM?$AA_?$AAS?$AAH?$AAE?$AAL?$AAL?$AA_?$AAI?$AAN?$AAF?$AAO?$AA?$AA@|
  003ac		 |$LN72@ShellProc|
  003ac	00000000	 DCD         |??_C@_1IC@NMLGEFPE@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?5?$AAi?$AAn?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?5?$AAN?$AAo?$AA?5?$AAc?$AAo?$AAm@|
  003b0		 |$LN73@ShellProc|
  003b0	00000000	 DCD         |??_C@_1DI@EMOMAECC@?$AAT?$AAu?$AAx?$AA_?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AAT?$AAe?$AAs?$AAt?$AA?4?$AAc?$AAp?$AAp?$AA?$AA@|
  003b4		 |$LN74@ShellProc|
  003b4	00000000	 DCD         |??_C@_1GA@JBHDKOEF@?$AAF?$AAA?$AAI?$AAL?$AA?5?$AAi?$AAn?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$EA?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AAC?$AAo?$AAu?$AAl?$AAd?$AAn?$AA?8?$AAt?$AA?5?$AAs@|
  003b8		 |$LN75@ShellProc|
  003b8	00000000	 DCD         |??_C@_1CC@FLPNONNI@?$AAG?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?$AA@|
  003bc		 |$LN76@ShellProc|
  003bc	00000000	 DCD         |?g_spsShellInfo@@3U_SPS_SHELL_INFO@@A|
  003c0		 |$LN77@ShellProc|
  003c0	00000000	 DCD         |??_C@_1EM@LCENFKIH@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAS?$AAH?$AAE?$AAL?$AAL?$AA_?$AAI?$AAN?$AAF?$AAO?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc@|
  003c4		 |$LN78@ShellProc|
  003c4	00000000	 DCD         |??_C@_1EM@DHBFOELL@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAU?$AAN?$AAL?$AAO?$AAA?$AAD?$AA_?$AAD?$AAL?$AAL?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc@|
  003c8		 |$LN79@ShellProc|
  003c8	00000000	 DCD         |??_C@_1EI@LLGCEHFM@?$AAS?$AAh?$AAe?$AAl?$AAl?$AAP?$AAr?$AAo?$AAc?$AA?$CI?$AAS?$AAP?$AAM?$AA_?$AAL?$AAO?$AAA?$AAD?$AA_?$AAD?$AAL?$AAL?$AA?0?$AA?5?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?5?$AAc?$AAa?$AAl@|
  003cc		 |$M32790|

			 ENDP  ; |ShellProc|

	END
