; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\KITL\KITLDLL\oemkitl.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|g_kitlEthLan911x| [ DATA ]
	EXPORT	|g_kitlUsbRndis| [ DATA ]
	EXPORT	|g_kitlDevices| [ DATA ]
	IMPORT	|RndisMulticastList|
	IMPORT	|RndisCurrentPacketFilter|
	IMPORT	|RndisDisableInts|
	IMPORT	|RndisEnableInts|
	IMPORT	|RndisEDbgGetFrame|
	IMPORT	|RndisEDbgSendFrame|
	IMPORT	|HostMiniInit|
	IMPORT	|LAN911XMulticastList|
	IMPORT	|LAN911XCurrentPacketFilter|
	IMPORT	|LAN911XDisableInts|
	IMPORT	|LAN911XEnableInts|
	IMPORT	|LAN911XGetFrame|
	IMPORT	|LAN911XSendFrame|
	IMPORT	|LAN911XInit|

  00000			 AREA	 |.bss|, NOINIT
|s_bKitlActive| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "F", 0x0, "n", 0x0, " ", 0x0, "R"
	DCB	0x0, "N", 0x0, "D", 0x0, "I", 0x0, "S", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@| DCB "L"
	DCB	0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "1", 0x0, "5"
	DCB	0x0, " ", 0x0, "M", 0x0, "A", 0x0, "C", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|g_kitlEthLan911x| DCD |LAN911XInit|
	DCD	0x0
	DCD	0x0
	DCD	|LAN911XSendFrame|
	DCD	|LAN911XGetFrame|
	DCD	|LAN911XEnableInts|
	DCD	|LAN911XDisableInts|
	DCD	0x0
	DCD	0x0
	DCD	|LAN911XCurrentPacketFilter|
	DCD	|LAN911XMulticastList|
|g_kitlUsbRndis| DCD |HostMiniInit|
	DCD	0x0
	DCD	0x0
	DCD	|RndisEDbgSendFrame|
	DCD	|RndisEDbgGetFrame|
	DCD	|RndisEnableInts|
	DCD	|RndisDisableInts|
	DCD	0x0
	DCD	0x0
	DCD	|RndisCurrentPacketFilter|
	DCD	|RndisMulticastList|
|g_kitlDevices| DCD |??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@|
	DCD	0x0
	DCD	0x15000000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlEthLan911x|
	DCD	|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@|
	DCD	0x0
	DCD	0x480ab000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlUsbRndis|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALKitlInitRegistry|
	IMPORT	|OEMUsbDriverEnable|
	IMPORT	|OEMEthernetDriverEnable|
	IMPORT	|OALKitlGetDevLoc|
; File c:\wince600\platform\z2170p\src\kitl\kitldll\oemkitl.c

  00000			 AREA	 |.pdata|, PDATA
|$T46525| DCD	|$LN16@OALKitlIni|
	DCD	0x40001b02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALKitlInitRegistry| PROC

; 154  : {

  00000		 |$LN16@OALKitlIni|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M46522|

; 155  :     DEVICE_LOCATION devLoc;
; 156  : 
; 157  :     // Get KITL device location
; 158  :     if (!OALKitlGetDevLoc(&devLoc)) goto cleanUp;

  00008	e28d0000	 add         r0, sp, #0
  0000c	eb000000	 bl          OALKitlGetDevLoc
  00010	e3500000	 cmp         r0, #0
  00014	0a000011	 beq         |$cleanUp$46442|

; 159  : 
; 160  :     // Depending on device bus
; 161  :     switch (devLoc.IfcType)

  00018	e59d3000	 ldr         r3, [sp]
  0001c	e3530000	 cmp         r3, #0
  00020	1a00000e	 bne         |$cleanUp$46442|

; 162  :         {
; 163  :         case Internal:
; 164  :             switch (devLoc.LogicalLoc)

  00024	e59d2008	 ldr         r2, [sp, #8]
  00028	e3520415	 cmp         r2, #0x15, 8
  0002c	0a000007	 beq         |$LN3@OALKitlIni|
  00030	e3a03312	 mov         r3, #0x12, 6
  00034	e3833aab	 orr         r3, r3, #0xAB, 20
  00038	e1520003	 cmp         r2, r3

; 170  :                     break;   
; 171  :                 case OMAP_USBHS_REGS_PA:
; 172  :                     // Disable USB, enable ethernet
; 173  :                     OEMEthernetDriverEnable(TRUE);
; 174  :                     OEMUsbDriverEnable(FALSE);
; 175  :                     break;   
; 176  :                 default:
; 177  :                     // Enable both USB and ethernet
; 178  :                     OEMEthernetDriverEnable(TRUE);

  0003c	e3a00001	 mov         r0, #1

; 179  :                     OEMUsbDriverEnable(TRUE);
; 180  :                     break;   

  00040	1a000003	 bne         |$LN12@OALKitlIni|
  00044	eb000000	 bl          OEMEthernetDriverEnable
  00048	e3a00000	 mov         r0, #0
  0004c	ea000002	 b           |$LN13@OALKitlIni|
  00050		 |$LN3@OALKitlIni|

; 165  :                 {
; 166  :                 case BSP_LAN9115_REGS_PA:
; 167  :                     // Disable ethernet, enable USB
; 168  :                     OEMEthernetDriverEnable(FALSE);

  00050	e3a00000	 mov         r0, #0
  00054		 |$LN12@OALKitlIni|
  00054	eb000000	 bl          OEMEthernetDriverEnable

; 169  :                     OEMUsbDriverEnable(TRUE);

  00058	e3a00001	 mov         r0, #1
  0005c		 |$LN13@OALKitlIni|
  0005c	eb000000	 bl          OEMUsbDriverEnable
  00060		 |$cleanUp$46442|

; 181  :                 }
; 182  :             break;
; 183  :         }
; 184  : 
; 185  : cleanUp:
; 186  :     return;
; 187  : }

  00060	e28dd014	 add         sp, sp, #0x14
  00064	e49de004	 ldr         lr, [sp], #4
  00068	e12fff1e	 bx          lr
  0006c		 |$M46523|

			 ENDP  ; |OALKitlInitRegistry|

	EXPORT	|OEMKitlEnable|

  00000			 AREA	 |.pdata|, PDATA
|$T46534| DCD	|$LN6@OEMKitlEna|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMKitlEnable| PROC

; 209  : {

  00000		 |$LN6@OEMKitlEna|
  00000		 |$M46531|

; 210  :     if (s_bKitlActive == FALSE) return FALSE;

  00000	e59f3010	 ldr         r3, [pc, #0x10]
  00004	e5933000	 ldr         r3, [r3]
  00008	e3530000	 cmp         r3, #0
  0000c	03a00000	 moveq       r0, #0

; 211  : #if 0
; 212  :     if (bEnable != FALSE)
; 213  :         {        
; 214  :         OEMKitlEnableClocks(TRUE);
; 215  :         }
; 216  :     else
; 217  :         {
; 218  :         OEMKitlEnableClocks(FALSE);
; 219  :         }
; 220  : #else
; 221  :     UNREFERENCED_PARAMETER(bEnable);
; 222  : #endif
; 223  :     return TRUE;

  00010	13a00001	 movne       r0, #1

; 224  : }

  00014	e12fff1e	 bx          lr
  00018		 |$LN7@OEMKitlEna|
  00018		 |$LN8@OEMKitlEna|
  00018	00000000	 DCD         |s_bKitlActive|
  0001c		 |$M46532|

			 ENDP  ; |OEMKitlEnable|

	EXPORT	|OALGetTickCount|
	IMPORT	|OALPAtoVA|

  00000			 AREA	 |.pdata|, PDATA
|$T46546| DCD	|$LN5@OALGetTick|
	DCD	0x40000901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALGetTickCount| PROC

; 233  : {

  00000		 |$LN5@OALGetTick|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M46543|
  00004	e3a03312	 mov         r3, #0x12, 6

; 234  :     OMAP_GPTIMER_REGS *pGPTimerRegs = OALPAtoUA(OMAP_GPTIMER1_REGS_PA);

  00008	e38309c6	 orr         r0, r3, #0xC6, 18
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA

; 235  :     return INREG32(&pGPTimerRegs->TCRR) >> 5;

  00014	e5903028	 ldr         r3, [r0, #0x28]
  00018	e1a002a3	 mov         r0, r3, lsr #5

; 236  : }

  0001c	e49de004	 ldr         lr, [sp], #4
  00020	e12fff1e	 bx          lr
  00024		 |$M46544|

			 ENDP  ; |OALGetTickCount|

	EXPORT	|OEMKitlIoctl|
	IMPORT	|NKSetLastError|
	IMPORT	|OALIoCtlVBridge|

  00000			 AREA	 |.pdata|, PDATA
|$T46560| DCD	|$LN9@OEMKitlIoc|
	DCD	0x40001502
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMKitlIoctl| PROC

; 246  : {

  00000		 |$LN9@OEMKitlIoc|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M46557|

; 247  :     BOOL fRet = FALSE;
; 248  :     switch (code) {

  00008	e59fe040	 ldr         lr, [pc, #0x40]
  0000c	e3a04000	 mov         r4, #0
  00010	e150000e	 cmp         r0, lr
  00014	0a000006	 beq         |$LN2@OEMKitlIoc|

; 255  :         break;
; 256  :     default:
; 257  :         fRet = OALIoCtlVBridge (code, pInBuffer, inSize, pOutBuffer, outSize, (UINT32*)pOutSize);

  00018	e59de014	 ldr         lr, [sp, #0x14]
  0001c	e59d4010	 ldr         r4, [sp, #0x10]
  00020	e58de004	 str         lr, [sp, #4]
  00024	e58d4000	 str         r4, [sp]
  00028	eb000000	 bl          OALIoCtlVBridge
  0002c	e1a04000	 mov         r4, r0
  00030	ea000002	 b           |$LN3@OEMKitlIoc|
  00034		 |$LN2@OEMKitlIoc|

; 249  :     case IOCTL_HAL_INITREGISTRY:
; 250  :         OALKitlInitRegistry();

  00034	eb000000	 bl          OALKitlInitRegistry

; 251  :         // Leave return code false and set last error to ERROR_NOT_SUPPORTED
; 252  :         // This allows code to fall through to OEMIoctl so IOCTL_HAL_INITREGISTRY can be 
; 253  :         // handled there as well.
; 254  :         NKSetLastError(ERROR_NOT_SUPPORTED);

  00038	e3a00032	 mov         r0, #0x32
  0003c	eb000000	 bl          NKSetLastError
  00040		 |$LN3@OEMKitlIoc|

; 258  :     }
; 259  : 
; 260  :     return fRet;
; 261  : }

  00040	e1a00004	 mov         r0, r4
  00044	e28dd008	 add         sp, sp, #8
  00048	e8bd4010	 ldmia       sp!, {r4, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$LN10@OEMKitlIoc|
  00050		 |$LN11@OEMKitlIoc|
  00050	010100b0	 DCD         0x10100b0
  00054		 |$M46558|

			 ENDP  ; |OEMKitlIoctl|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|OEMKitlStartup|
	EXPORT	|??_C@_0BJ@OKHENJGB@?9OALKitlStart?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_08DGJGOJCE@EVM3530?9?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CP@HIPALHGN@WARN?3?5Boot?5arguments?5not?5found?0?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BA@IBJBKNBD@?$CLOALKitlStart?$AN?6?$AA@| [ DATA ] ; `string'
	IMPORT	|OALKitlInit|
	IMPORT	|OALArgsQuery|
	IMPORT	|KITLOutputDebugString|
	IMPORT	|dpCurSettings|
	IMPORT	|KITLSetDebug|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|memset|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T46591| DCD	|$LN24@OEMKitlSta|
	DCD	0xc0004f02

  00000			 AREA	 |.xdata|, DATA
|$T46587| DCD	0xffffffec

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BJ@OKHENJGB@?9OALKitlStart?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@| DCB "-"
	DCB	"OALKitlStart(rc = %d)", 0xd, 0xa, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08DGJGOJCE@EVM3530?9?$AA@| DCB "EVM3530-", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CP@HIPALHGN@WARN?3?5Boot?5arguments?5not?5found?0?5@| DCB "WARN: "
	DCB	"Boot arguments not found, use defaults", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BA@IBJBKNBD@?$CLOALKitlStart?$AN?6?$AA@| DCB "+OALKitlStart", 0xd
	DCB	0xa, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T46587|

  00008		 |OEMKitlStartup| PROC

; 54   : {

  00008		 |$LN24@OEMKitlSta|
  00008	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  0000c	e24dd038	 sub         sp, sp, #0x38
  00010		 |$M46588|
  00010	e59f3128	 ldr         r3, [pc, #0x128]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3034	 str         r3, [sp, #0x34]
  0001c	e3a03902	 mov         r3, #2, 18

; 55   :     BOOL rc = FALSE;
; 56   : 
; 57   :     OAL_KITL_ARGS *pArgs, args;
; 58   :     CHAR *szDeviceId;
; 59   :     
; 60   :     KITLSetDebug(
; 61   :                 ZONE_ERROR |
; 62   :                 ZONE_WARNING |
; 63   :         //        ZONE_INIT |        
; 64   :         //        ZONE_KITL_OAL |
; 65   :         //        ZONE_KITL_ETHER |
; 66   :                 0);

  00020	e3830001	 orr         r0, r3, #1
  00024	eb000000	 bl          KITLSetDebug

; 67   : 
; 68   : 
; 69   :     KITL_RETAILMSG(ZONE_KITL_OAL, ("+OALKitlStart\r\n"));

  00028	e59f610c	 ldr         r6, [pc, #0x10C]
  0002c	e5963440	 ldr         r3, [r6, #0x440]
  00030	e3130a01	 tst         r3, #1, 20
  00034	159f00fc	 ldrne       r0, [pc, #0xFC]
  00038	1b000000	 blne        KITLOutputDebugString

; 70   : 
; 71   :     // First get boot args and device id
; 72   :     pArgs = (OAL_KITL_ARGS*)OALArgsQuery(OAL_ARGS_QUERY_KITL);

  0003c	e3a00002	 mov         r0, #2
  00040	eb000000	 bl          OALArgsQuery
  00044	e1b05000	 movs        r5, r0

; 73   : 
; 74   :     // If we don't get kitl arguments use default
; 75   :     if (pArgs == NULL)

  00048	1a00001a	 bne         |$LN10@OEMKitlSta|

; 76   :         {
; 77   : 		const UINT16 defaultMac[] = DEFAULT_MAC_ADDRESS;
; 78   :         KITL_RETAILMSG(ZONE_WARNING, (
; 79   :             "WARN: Boot arguments not found, use defaults\r\n"
; 80   :             ));

  0004c	e5962440	 ldr         r2, [r6, #0x440]
  00050	e3a00a05	 mov         r0, #5, 20
  00054	e3a03a02	 mov         r3, #2, 20
  00058	e3120001	 tst         r2, #1
  0005c	e3804060	 orr         r4, r0, #0x60
  00060	159f00cc	 ldrne       r0, [pc, #0xCC]
  00064	e3833020	 orr         r3, r3, #0x20
  00068	e3a01dc1	 mov         r1, #0xC1, 26
  0006c	e1cd32bc	 strh        r3, [sp, #0x2C]
  00070	e1cd12be	 strh        r1, [sp, #0x2E]
  00074	1b000000	 blne        KITLOutputDebugString

; 81   :         memset(&args, 0, sizeof(args));

  00078	e3a0202c	 mov         r2, #0x2C
  0007c	e3a01000	 mov         r1, #0
  00080	e28d0000	 add         r0, sp, #0
  00084	eb000000	 bl          memset

; 82   :         args.flags = OAL_KITL_FLAGS_ENABLED|OAL_KITL_FLAGS_DHCP;
; 83   :         args.devLoc.IfcType = Internal;
; 84   :         args.devLoc.BusNumber = 0;
; 85   :         args.devLoc.LogicalLoc = BSP_LAN9115_REGS_PA;
; 86   : 		memcpy(args.mac,defaultMac,sizeof(args.mac));

  00088	e59d302c	 ldr         r3, [sp, #0x2C]
  0008c	e3a02005	 mov         r2, #5
  00090	e3a01000	 mov         r1, #0
  00094	e3a00000	 mov         r0, #0
  00098	e3a0e415	 mov         lr, #0x15, 8
  0009c	e58d3018	 str         r3, [sp, #0x18]
  000a0	e58d2000	 str         r2, [sp]
  000a4	e58d1004	 str         r1, [sp, #4]
  000a8	e58d0008	 str         r0, [sp, #8]
  000ac	e58de00c	 str         lr, [sp, #0xC]
  000b0	e1cd41bc	 strh        r4, [sp, #0x1C]

; 87   :         pArgs = &args;

  000b4	e28d5000	 add         r5, sp, #0
  000b8		 |$LN10@OEMKitlSta|

; 88   :         }
; 89   : 
; 90   :     // We always create device name
; 91   : 	// Try to generate from device id...
; 92   : 
; 93   :     szDeviceId = OALArgsQuery(OAL_ARGS_QUERY_DEVICE_PREFIX);

  000b8	e3a00046	 mov         r0, #0x46
  000bc	eb000000	 bl          OALArgsQuery

; 94   :     
; 95   :     if (szDeviceId == NULL) {
; 96   :         szDeviceId = BSP_DEVICE_35xx_PREFIX;
; 97   :     }
; 98   :     pArgs->flags |= OAL_KITL_FLAGS_EXTNAME;

  000c0	e5953000	 ldr         r3, [r5]
  000c4	e3500000	 cmp         r0, #0
  000c8	059f0060	 ldreq       r0, [pc, #0x60]

; 99   :     
; 100  :     // Initialize debug device
; 101  :     switch (pArgs->devLoc.IfcType)
; 102  :         {
; 103  :         case Internal:
; 104  :             switch (pArgs->devLoc.LogicalLoc)
; 105  :                 {
; 106  :                 case BSP_LAN9115_REGS_PA:
; 107  : #if 0
; 108  : 					// enable clocks to GPIO banks that have KITL dependencies so we can do initialization
; 109  :                     OEMKitlEnableClocks(TRUE);
; 110  :                     
; 111  :                     // Reset LAN chip
; 112  :                     pGPIORegs = OALPAtoUA(BSP_RESET_ETHER_KITL_GPIO_PA);
; 113  :                     CLRREG32(&pGPIORegs->DATAOUT, 1 << (BSP_RESET_ETHER_KITL_GPIO % 32));
; 114  :                     OALStall(1000);
; 115  :                     SETREG32(&pGPIORegs->DATAOUT, 1 << (BSP_RESET_ETHER_KITL_GPIO % 32));
; 116  :                     OALStall(1000);
; 117  : 
; 118  :                     // Prepare interrupt
; 119  :                     pGPIORegs = OALPAtoUA(BSP_ETHER_GPIO_PA);
; 120  :                     SETREG32(&pGPIORegs->OE, 1 << (BSP_IRQ_ETHER_KITL % 32));
; 121  :                     // Interrupt on falling edge
; 122  :                     SETREG32(&pGPIORegs->FALLINGDETECT, 1 << (BSP_IRQ_ETHER_KITL % 32));
; 123  : 
; 124  :                     OEMKitlEnableClocks(FALSE);
; 125  : #endif
; 126  :                     break;
; 127  :                 }
; 128  :             break;
; 129  :         }
; 130  : 
; 131  :     // Finally call KITL library
; 132  :     rc = OALKitlInit(szDeviceId, pArgs, g_kitlDevices);

  000cc	e59f2058	 ldr         r2, [pc, #0x58]
  000d0	e3833020	 orr         r3, r3, #0x20
  000d4	e1a01005	 mov         r1, r5
  000d8	e5853000	 str         r3, [r5]
  000dc	eb000000	 bl          OALKitlInit
  000e0	e1b04000	 movs        r4, r0

; 133  : 
; 134  :     // If it failed or KITL is disabled
; 135  :     if (!rc || (pArgs->flags & OAL_KITL_FLAGS_ENABLED) == 0) goto cleanUp;

  000e4	15953000	 ldrne       r3, [r5]
  000e8	13130001	 tstne       r3, #1

; 136  : 
; 137  :     // enable kitl interrupts
; 138  :     s_bKitlActive = TRUE;

  000ec	159f3034	 ldrne       r3, [pc, #0x34]
  000f0	13a02001	 movne       r2, #1
  000f4	15832000	 strne       r2, [r3]
  000f8		 |$cleanUp$46436|

; 139  :     OEMKitlEnable(TRUE);
; 140  :     
; 141  : cleanUp:
; 142  :     KITL_RETAILMSG(ZONE_KITL_OAL, ("-OALKitlStart(rc = %d)\r\n", rc));

  000f8	e5963440	 ldr         r3, [r6, #0x440]
  000fc	e3130a01	 tst         r3, #1, 20
  00100	159f001c	 ldrne       r0, [pc, #0x1C]
  00104	11a01004	 movne       r1, r4
  00108	1b000000	 blne        KITLOutputDebugString

; 143  : 
; 144  :     return rc;

  0010c	e59d0034	 ldr         r0, [sp, #0x34]
  00110	eb000000	 bl          __security_check_cookie

; 145  : }

  00114	e1a00004	 mov         r0, r4
  00118	e28dd038	 add         sp, sp, #0x38
  0011c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00120	e12fff1e	 bx          lr
  00124		 |$LN25@OEMKitlSta|
  00124		 |$LN26@OEMKitlSta|
  00124	00000000	 DCD         |??_C@_0BJ@OKHENJGB@?9OALKitlStart?$CIrc?5?$DN?5?$CFd?$CJ?$AN?6?$AA@|
  00128		 |$LN27@OEMKitlSta|
  00128	00000000	 DCD         |s_bKitlActive|
  0012c		 |$LN28@OEMKitlSta|
  0012c	00000000	 DCD         |g_kitlDevices|
  00130		 |$LN29@OEMKitlSta|
  00130	00000000	 DCD         |??_C@_08DGJGOJCE@EVM3530?9?$AA@|
  00134		 |$LN30@OEMKitlSta|
  00134	00000000	 DCD         |??_C@_0CP@HIPALHGN@WARN?3?5Boot?5arguments?5not?5found?0?5@|
  00138		 |$LN31@OEMKitlSta|
  00138	00000000	 DCD         |??_C@_0BA@IBJBKNBD@?$CLOALKitlStart?$AN?6?$AA@|
  0013c		 |$LN32@OEMKitlSta|
  0013c	00000000	 DCD         |dpCurSettings|
  00140		 |$LN33@OEMKitlSta|
  00140	00000000	 DCD         |__security_cookie|
  00144		 |$M46589|

			 ENDP  ; |OEMKitlStartup|

	EXPORT	|OEMKitlGetSecs|

  00000			 AREA	 |.pdata|, PDATA
|$T46615| DCD	|$LN7@OEMKitlGet|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMKitlGetSecs| PROC

; 194  : {

  00000		 |$LN7@OEMKitlGet|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M46612|
  00004	e3a03312	 mov         r3, #0x12, 6

; 195  :     return OALGetTickCount()/1000;

  00008	e38309c6	 orr         r0, r3, #0xC6, 18
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e5903028	 ldr         r3, [r0, #0x28]
  00018	e59f2010	 ldr         r2, [pc, #0x10]
  0001c	e1a012a3	 mov         r1, r3, lsr #5
  00020	e0823291	 umull       r3, r2, r1, r2
  00024	e1a00322	 mov         r0, r2, lsr #6

; 196  : }

  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$LN8@OEMKitlGet|
  00030		 |$LN9@OEMKitlGet|
  00030	10624dd3	 DCD         0x10624dd3
  00034		 |$M46613|

			 ENDP  ; |OEMKitlGetSecs|

	END
