; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\EBOOT\mmu.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALPAtoVA|
	EXPORT	|??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|g_CPUFamily|
	IMPORT	|g_oalAddressTable|
	IMPORT	|g_oalAddressTableHynix|
; File c:\wince600\platform\z2170p\src\bootloader\eboot\mmu.c

  00000			 AREA	 |.pdata|, PDATA
|$T43125| DCD	|$LN18@OALPAtoVA|
	DCD	0x40002b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "K", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "C", 0x0, "P", 0x0, "U", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "m", 0x0, "i", 0x0, "l", 0x0, "y", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPAtoVA| PROC

; 56   : {

  00000		 |$LN18@OALPAtoVA|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43122|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 57   :     OAL_ADDRESS_TABLE *pTable = NULL;    
; 58   :     VOID *va = NULL;
; 59   : 
; 60   :     if(g_CPUFamily == CPU_FAMILY_DM37XX)

  0000c	e59f3094	 ldr         r3, [pc, #0x94]
  00010	e3a04000	 mov         r4, #0
  00014	e5931000	 ldr         r1, [r3]
  00018	e3510001	 cmp         r1, #1

; 61   :     {
; 62   :         pTable =   g_oalAddressTableHynix; 

  0001c	059fe080	 ldreq       lr, [pc, #0x80]
  00020	0a000003	 beq         |$LN12@OALPAtoVA|

; 63   :     }
; 64   :     else if (g_CPUFamily == CPU_FAMILY_OMAP35XX)

  00024	e3510000	 cmp         r1, #0

; 65   :     {
; 66   :         pTable =   g_oalAddressTable; 
; 67   :     }
; 68   :     else
; 69   :     {
; 70   :         OALLog(L"INFO: UnKnown CPU family:%d....\r\n", g_CPUFamily);

  00028	159f0070	 ldrne       r0, [pc, #0x70]
  0002c	1b000000	 blne        NKDbgPrintfW

; 71   :         pTable =   g_oalAddressTable; 

  00030	e59fe064	 ldr         lr, [pc, #0x64]
  00034		 |$LN12@OALPAtoVA|

; 72   :     }
; 73   :     // Search the table for address range
; 74   :     while (pTable->size != 0) {

  00034	e59e3008	 ldr         r3, [lr, #8]
  00038	e1b02003	 movs        r2, r3
  0003c	0a000013	 beq         |$LN1@OALPAtoVA|
  00040		 |$LL5@OALPAtoVA|

; 75   :         if (
; 76   :             pa >= pTable->PA && 
; 77   :             pa <= (pTable->PA + (pTable->size << 20) - 1)
; 78   :         ) break;                      // match found 

  00040	e59e3004	 ldr         r3, [lr, #4]
  00044	e1550003	 cmp         r5, r3
  00048	3a000003	 bcc         |$LN3@OALPAtoVA|
  0004c	e0833a02	 add         r3, r3, r2, lsl #20
  00050	e2433001	 sub         r3, r3, #1
  00054	e1550003	 cmp         r5, r3
  00058	9a000003	 bls         |$LN13@OALPAtoVA|
  0005c		 |$LN3@OALPAtoVA|

; 79   :         pTable++;

  0005c	e28ee00c	 add         lr, lr, #0xC
  00060	e59e3008	 ldr         r3, [lr, #8]
  00064	e1b02003	 movs        r2, r3
  00068	1afffff4	 bne         |$LL5@OALPAtoVA|
  0006c		 |$LN13@OALPAtoVA|

; 80   :     }
; 81   : 
; 82   :     // If address table entry is valid compute the VA
; 83   :     if (pTable->size != 0) {

  0006c	e59e3008	 ldr         r3, [lr, #8]
  00070	e3530000	 cmp         r3, #0
  00074	0a000005	 beq         |$LN1@OALPAtoVA|

; 84   :         va = (VOID *)(pTable->CA + (pa - pTable->PA));

  00078	e59e2000	 ldr         r2, [lr]
  0007c	e59e3004	 ldr         r3, [lr, #4]

; 85   :         // If VA is uncached, set the uncached bit
; 86   :         if (!cached) va = (VOID*) ((DWORD) va | OAL_MEMORY_CACHE_BIT);

  00080	e3560000	 cmp         r6, #0
  00084	e0423003	 sub         r3, r2, r3
  00088	e0834005	 add         r4, r3, r5
  0008c	03844202	 orreq       r4, r4, #2, 4
  00090		 |$LN1@OALPAtoVA|

; 87   :     }
; 88   : 
; 89   :     return va;
; 90   : }

  00090	e1a00004	 mov         r0, r4
  00094	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN19@OALPAtoVA|
  0009c		 |$LN20@OALPAtoVA|
  0009c	00000000	 DCD         |g_oalAddressTable|
  000a0		 |$LN21@OALPAtoVA|
  000a0	00000000	 DCD         |??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@|
  000a4		 |$LN22@OALPAtoVA|
  000a4	00000000	 DCD         |g_oalAddressTableHynix|
  000a8		 |$LN23@OALPAtoVA|
  000a8	00000000	 DCD         |g_CPUFamily|
  000ac		 |$M43123|

			 ENDP  ; |OALPAtoVA|

	EXPORT	|OALVAtoPA|

  00000			 AREA	 |.pdata|, PDATA
|$T43147| DCD	|$LN19@OALVAtoPA|
	DCD	0x40002c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALVAtoPA| PROC

; 105  : {

  00000		 |$LN19@OALVAtoPA|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43144|
  00004	e1a04000	 mov         r4, r0

; 106  :     OAL_ADDRESS_TABLE *pTable = NULL;
; 107  :     UINT32 va = (UINT32)pVA;
; 108  :     UINT32 pa = 0;
; 109  : 
; 110  :     if(g_CPUFamily == CPU_FAMILY_DM37XX)

  00008	e59f309c	 ldr         r3, [pc, #0x9C]
  0000c	e3a05000	 mov         r5, #0
  00010	e5931000	 ldr         r1, [r3]
  00014	e3510001	 cmp         r1, #1

; 111  :     {
; 112  :         pTable =   g_oalAddressTableHynix; 

  00018	059f1088	 ldreq       r1, [pc, #0x88]
  0001c	0a000003	 beq         |$LN7@OALVAtoPA|

; 113  :     }
; 114  :     else if (g_CPUFamily == CPU_FAMILY_OMAP35XX)

  00020	e3510000	 cmp         r1, #0

; 115  :     {
; 116  :         pTable =   g_oalAddressTable; 
; 117  :     }
; 118  :     else
; 119  :     {
; 120  :         OALLog(L"INFO: UnKnown CPU family:%d....\r\n", g_CPUFamily);

  00024	159f0078	 ldrne       r0, [pc, #0x78]
  00028	1b000000	 blne        NKDbgPrintfW

; 121  :         pTable =   g_oalAddressTable; 

  0002c	e59f106c	 ldr         r1, [pc, #0x6C]
  00030		 |$LN7@OALVAtoPA|

; 122  :     }
; 123  : 
; 124  :     // Virtual address must be in CACHED or UNCACHED regions.
; 125  :     if (va < 0x80000000 || va >= 0xC0000000)

  00030	e3540102	 cmp         r4, #2, 2
  00034	3a000016	 bcc         |$cleanUp$43088|
  00038	e3540103	 cmp         r4, #3, 2
  0003c	2a000014	 bcs         |$cleanUp$43088|

; 126  : 	{
; 127  :         goto cleanUp;
; 128  :     }
; 129  : 
; 130  :     // Address must be cached, as entries in OEMAddressTable are cached address.
; 131  :     va = va&~OAL_MEMORY_CACHE_BIT;
; 132  : 
; 133  :     // Search the table for address range
; 134  :     while (pTable->size != 0) {

  00040	e5913008	 ldr         r3, [r1, #8]
  00044	e3c40202	 bic         r0, r4, #2, 4
  00048	e1b02003	 movs        r2, r3
  0004c	0a000010	 beq         |$cleanUp$43088|
  00050		 |$LL4@OALVAtoPA|

; 135  :         if (va >= pTable->CA && va <= pTable->CA + (pTable->size << 20) - 1) {

  00050	e5913000	 ldr         r3, [r1]
  00054	e1500003	 cmp         r0, r3
  00058	3a000003	 bcc         |$LN2@OALVAtoPA|
  0005c	e0833a02	 add         r3, r3, r2, lsl #20
  00060	e2433001	 sub         r3, r3, #1
  00064	e1500003	 cmp         r0, r3
  00068	9a000003	 bls         |$LN14@OALVAtoPA|
  0006c		 |$LN2@OALVAtoPA|

; 136  :             break;
; 137  :         }
; 138  :         pTable++;

  0006c	e281100c	 add         r1, r1, #0xC
  00070	e5913008	 ldr         r3, [r1, #8]
  00074	e1b02003	 movs        r2, r3
  00078	1afffff4	 bne         |$LL4@OALVAtoPA|
  0007c		 |$LN14@OALVAtoPA|

; 139  :     }
; 140  : 
; 141  :     // If address table entry is valid compute the PA
; 142  :     if (pTable->size != 0) pa = pTable->PA + va - pTable->CA;

  0007c	e5913008	 ldr         r3, [r1, #8]
  00080	e3530000	 cmp         r3, #0
  00084	15912004	 ldrne       r2, [r1, #4]
  00088	15913000	 ldrne       r3, [r1]
  0008c	10423003	 subne       r3, r2, r3
  00090	10835000	 addne       r5, r3, r0
  00094		 |$cleanUp$43088|

; 143  : 
; 144  : cleanUp:
; 145  :     // Indicate physical address
; 146  :     return pa;
; 147  : }

  00094	e1a00005	 mov         r0, r5
  00098	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN20@OALVAtoPA|
  000a0		 |$LN21@OALVAtoPA|
  000a0	00000000	 DCD         |g_oalAddressTable|
  000a4		 |$LN22@OALVAtoPA|
  000a4	00000000	 DCD         |??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@|
  000a8		 |$LN23@OALVAtoPA|
  000a8	00000000	 DCD         |g_oalAddressTableHynix|
  000ac		 |$LN24@OALVAtoPA|
  000ac	00000000	 DCD         |g_CPUFamily|
  000b0		 |$M43145|

			 ENDP  ; |OALVAtoPA|

	END
