; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\EBOOT\flashmenu.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@JPPJHKGA@?$AAS?$AAe?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@EGKANGDF@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@GBFAOEGL@?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@GCHGGBGE@?$AAS?$AAe?$AAt?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@NOBBAEFH@?$AAR?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@GGLAHODL@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@NDJHIBFP@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@IKOIJPJI@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@NOIANDIC@?$AAS?$AAh?$AAo?$AAw?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAg?$AAe?$AAo?$AAm?$AAe?$AAt?$AAr?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|g_menuFlash| [ DATA ]

  00000			 AREA	 |.data|, DATA
|g_menuFlash| DCW 0x31
	%	2
	DCD	|??_C@_1CI@NOIANDIC@?$AAS?$AAh?$AAo?$AAw?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAg?$AAe?$AAo?$AAm?$AAe?$AAt?$AAr?$AAy?$AA?$AA@|
	DCD	|ShowFlashGeometry|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x32
	%	2
	DCD	|??_C@_1CE@IKOIJPJI@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$AA@|
	DCD	|DumpFlash|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x33
	%	2
	DCD	|??_C@_1BI@NDJHIBFP@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?$AA@|
	DCD	|EraseFlash|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x34
	%	2
	DCD	|??_C@_1CE@GGLAHODL@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@|
	DCD	|EraseBlock|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x35
	%	2
	DCD	|??_C@_1CI@NOBBAEFH@?$AAR?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@|
	DCD	|ReserveBlock|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x36
	%	2
	DCD	|??_C@_1BM@GCHGGBGE@?$AAS?$AAe?$AAt?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?$AA@|
	DCD	|SetBadBlock|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x37
	%	2
	DCD	|??_C@_1BK@GBFAOEGL@?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?$AA@|
	DCD	|FormatFlash|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x38
	%	2
	DCD	|??_C@_1CO@EGKANGDF@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@|
	DCD	|EnableFlashNK|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x39
	%	2
	DCD	|??_C@_1BK@JPPJHKGA@?$AAS?$AAe?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?$AA@|
	DCD	|SetECCType|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x30
	%	2
	DCD	|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCW	0x0
	%	2
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@DFLFAFMD@?$AAE?$AAx?$AAi?$AAt?$AA?5?$AAa?$AAn?$AAd?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAi?$AAn?$AAu?$AAe?$AA?$AA@| DCB "E"
	DCB	0x0, "x", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "u", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@JPPJHKGA@?$AAS?$AAe?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?$AA@| DCB "S"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "E", 0x0, "C", 0x0, "C"
	DCB	0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@EGKANGDF@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "N", 0x0, "K", 0x0, "."
	DCB	0x0, "b", 0x0, "i", 0x0, "n", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@GBFAOEGL@?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?$AA@| DCB "F"
	DCB	0x0, "o", 0x0, "r", 0x0, "m", 0x0, "a", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@GCHGGBGE@?$AAS?$AAe?$AAt?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?$AA@| DCB "S"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "b", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@NOBBAEFH@?$AAR?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "r", 0x0, "v", 0x0, "e"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, " ", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "g", 0x0, "e"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@GGLAHODL@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@| DCB "E"
	DCB	0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "b"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "r"
	DCB	0x0, "a", 0x0, "n", 0x0, "g", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@NDJHIBFP@?$AAE?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?$AA@| DCB "E"
	DCB	0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "f"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@IKOIJPJI@?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$AA@| DCB "D"
	DCB	0x0, "u", 0x0, "m", 0x0, "p", 0x0, " ", 0x0, "f", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@NOIANDIC@?$AAS?$AAh?$AAo?$AAw?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAg?$AAe?$AAo?$AAm?$AAe?$AAt?$AAr?$AAy?$AA?$AA@| DCB "S"
	DCB	0x0, "h", 0x0, "o", 0x0, "w", 0x0, " ", 0x0, "f", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "g", 0x0, "e"
	DCB	0x0, "o", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "r", 0x0, "y"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1BA@ICKOCNOC@?$AA?5?$AAD?$AAo?$AAn?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@NJMFPCLL@?$AA?$AN?$AA?6?$AA?$FL?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?$FN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17IAIOLGBB@?$AA?5?$AA?$CF?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@LJFBNMNP@?$AA?$AN?$AA?6?$AA?$FL?$AAb?$AAa?$AAd?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@CKACAODM@?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?3?$AA?5?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@GHGPADLK@?$AAB?$AAC?$AAH?$AA?5?$AA8?$AAb?$AAi?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@HLJGHKLA@?$AAB?$AAC?$AAH?$AA?5?$AA4?$AAb?$AAi?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@EDJAHKCB@?$AAH?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?5?$AA1?$AAb?$AAi?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@KEDBKDHI@?$AA?5?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?1?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@OCGGJEJ@?$AA?5?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?1?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@IKGPGDPJ@?$AA?5?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?1?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?3?$AA?5?$AA?5?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@FFMHKDOJ@?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@GKLBIPDL@?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17DJMAIPNJ@?$AAN?$AAO?$AAR?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19FIBFMGJP@?$AAN?$AAA?$AAN?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@FMHOCAJM@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAg?$AAe?$AAo?$AAm?$AAe?$AAt?$AAr?$AAy?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@ECBGAOKH@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAF?$AAM?$AAD?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|FMD_Deinit|
	IMPORT	|FMD_GetBlockStatus|
	IMPORT	|g_bootCfg|
	IMPORT	|FMD_GetInfo|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|FMD_Init|
	IMPORT	|g_ulFlashBase|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|
; File c:\wince600\platform\z2170p\src\bootloader\eboot\flashmenu.c

  00000			 AREA	 |.pdata|, PDATA
|$T47142| DCD	|$LN27@ShowFlashG|
	DCD	0xc000b204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@ICKOCNOC@?$AA?5?$AAD?$AAo?$AAn?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@NJMFPCLL@?$AA?$AN?$AA?6?$AA?$FL?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?$FN?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "[", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e"
	DCB	0x0, "r", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, "]", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17IAIOLGBB@?$AA?5?$AA?$CF?$AAd?$AA?$AA@| DCB " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@LJFBNMNP@?$AA?$AN?$AA?6?$AA?$FL?$AAb?$AAa?$AAd?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "[", 0x0, "b", 0x0, "a", 0x0, "d", 0x0, "]"
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@CKACAODM@?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?3?$AA?5?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "E", 0x0, "C", 0x0, "C", 0x0, " ", 0x0, "m", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@GHGPADLK@?$AAB?$AAC?$AAH?$AA?5?$AA8?$AAb?$AAi?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?$AA@| DCB "B"
	DCB	0x0, "C", 0x0, "H", 0x0, " ", 0x0, "8", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "E", 0x0, "C", 0x0, "C", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@HLJGHKLA@?$AAB?$AAC?$AAH?$AA?5?$AA4?$AAb?$AAi?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?$AA@| DCB "B"
	DCB	0x0, "C", 0x0, "H", 0x0, " ", 0x0, "4", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "E", 0x0, "C", 0x0, "C", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@EDJAHKCB@?$AAH?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?5?$AA1?$AAb?$AAi?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?$AA@| DCB "H"
	DCB	0x0, "a", 0x0, "m", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "1", 0x0, "b", 0x0, "i", 0x0, "t", 0x0, " "
	DCB	0x0, "E", 0x0, "C", 0x0, "C", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@KEDBKDHI@?$AA?5?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?1?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "B", 0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "/"
	DCB	0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@OCGGJEJ@?$AA?5?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?1?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "s", 0x0, "/", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@IKGPGDPJ@?$AA?5?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?1?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?3?$AA?5?$AA?5?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "B", 0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "/"
	DCB	0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, ":"
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@FFMHKDOJ@?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "B", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@GKLBIPDL@?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, " "
	DCB	0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17DJMAIPNJ@?$AAN?$AAO?$AAR?$AA?$AA@| DCB "N", 0x0, "O", 0x0, "R", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19FIBFMGJP@?$AAN?$AAA?$AAN?$AAD?$AA?$AA@| DCB "N", 0x0, "A", 0x0, "N"
	DCB	0x0, "D", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@FMHOCAJM@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAg?$AAe?$AAo?$AAm?$AAe?$AAt?$AAr?$AAy?$AA?5@| DCB " "
	DCB	0x0, "O", 0x0, "o", 0x0, "p", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " "
	DCB	0x0, "g", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "l"
	DCB	0x0, "a", 0x0, "s", 0x0, "h", 0x0, " ", 0x0, "g", 0x0, "e"
	DCB	0x0, "o", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "r", 0x0, "y"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@ECBGAOKH@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAF?$AAM?$AAD?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "O", 0x0, "o", 0x0, "p", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " "
	DCB	0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "F"
	DCB	0x0, "M", 0x0, "D", 0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.xdata|, DATA
|$T47138| DCD	0xffffffdc
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T47138|

  00008		 |ShowFlashGeometry| PROC

; 88   : {

  00008		 |$LN27@ShowFlashG|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0001	 stmdb       sp!, {r0}
  00010	e92d5000	 stmdb       sp!, {r12, lr}
  00014	e24ddfef	 sub         sp, sp, #0xEF, 30
  00018		 |$M47139|
  00018	e59f32ac	 ldr         r3, [pc, #0x2AC]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d33a4	 str         r3, [sp, #0x3A4]

; 89   :     HANDLE hFMD;
; 90   :     PCI_REG_INFO regInfo;
; 91   :     FlashInfo flashInfo;
; 92   :     LPCWSTR pszType;
; 93   :     BLOCK_ID block;
; 94   :     UINT32 status;
; 95   :     UINT32 listmode=0;

  00024	e3a03000	 mov         r3, #0
  00028	e58d3010	 str         r3, [sp, #0x10]

; 96   : 
; 97   :     UNREFERENCED_PARAMETER(pMenu);
; 98   : 
; 99   :     regInfo.MemBase.Reg[0] = g_ulFlashBase;

  0002c	e59f3294	 ldr         r3, [pc, #0x294]
  00030	e5933000	 ldr         r3, [r3]
  00034	e58d3328	 str         r3, [sp, #0x328]

; 100  :     hFMD = FMD_Init(NULL, &regInfo, NULL);

  00038	e3a02000	 mov         r2, #0
  0003c	e28d1018	 add         r1, sp, #0x18
  00040	e3a00000	 mov         r0, #0
  00044	eb000000	 bl          FMD_Init
  00048	e58d03a8	 str         r0, [sp, #0x3A8]
  0004c	e59d33a8	 ldr         r3, [sp, #0x3A8]
  00050	e58d3398	 str         r3, [sp, #0x398]

; 101  :     if (hFMD == NULL) 

  00054	e59d3398	 ldr         r3, [sp, #0x398]
  00058	e3530000	 cmp         r3, #0
  0005c	1a000002	 bne         |$LN20@ShowFlashG|

; 102  :         {
; 103  :         OALLog(L" Oops, can't open FMD driver\r\n");

  00060	e59f025c	 ldr         r0, [pc, #0x25C]
  00064	eb000000	 bl          NKDbgPrintfW

; 104  :         goto cleanUp;

  00068	ea000078	 b           |$cleanUp$46776|
  0006c		 |$LN20@ShowFlashG|

; 105  :         }
; 106  : 
; 107  :     if (!FMD_GetInfo(&flashInfo)) 

  0006c	e28d0000	 add         r0, sp, #0
  00070	eb000000	 bl          FMD_GetInfo
  00074	e58d03ac	 str         r0, [sp, #0x3AC]
  00078	e59d33ac	 ldr         r3, [sp, #0x3AC]
  0007c	e3530000	 cmp         r3, #0
  00080	1a000002	 bne         |$LN19@ShowFlashG|

; 108  :         {
; 109  :         OALLog(L" Oops, can't get flash geometry info\r\n");

  00084	e59f0234	 ldr         r0, [pc, #0x234]
  00088	eb000000	 bl          NKDbgPrintfW

; 110  :         goto cleanUp;

  0008c	ea00006f	 b           |$cleanUp$46776|
  00090		 |$LN19@ShowFlashG|

; 111  :         }
; 112  : 
; 113  :     switch (flashInfo.flashType) 

  00090	e59d3000	 ldr         r3, [sp]
  00094	e58d33b0	 str         r3, [sp, #0x3B0]
  00098	e59d33b0	 ldr         r3, [sp, #0x3B0]
  0009c	e3530000	 cmp         r3, #0
  000a0	0a000003	 beq         |$LN16@ShowFlashG|
  000a4	e59d33b0	 ldr         r3, [sp, #0x3B0]
  000a8	e3530001	 cmp         r3, #1
  000ac	0a000003	 beq         |$LN15@ShowFlashG|
  000b0	ea000005	 b           |$LN14@ShowFlashG|
  000b4		 |$LN16@ShowFlashG|

; 114  :         {
; 115  :         case NAND:
; 116  :             pszType = L"NAND";

  000b4	e59f3200	 ldr         r3, [pc, #0x200]
  000b8	e58d3014	 str         r3, [sp, #0x14]

; 117  :             break;

  000bc	ea000004	 b           |$LN17@ShowFlashG|
  000c0		 |$LN15@ShowFlashG|

; 118  :         case NOR:
; 119  :             pszType = L"NOR";

  000c0	e59f31f0	 ldr         r3, [pc, #0x1F0]
  000c4	e58d3014	 str         r3, [sp, #0x14]

; 120  :             break;

  000c8	ea000001	 b           |$LN17@ShowFlashG|
  000cc		 |$LN14@ShowFlashG|

; 121  :         default:
; 122  :             pszType = L"Unknown";

  000cc	e59f31b8	 ldr         r3, [pc, #0x1B8]
  000d0	e58d3014	 str         r3, [sp, #0x14]
  000d4		 |$LN17@ShowFlashG|

; 123  :         }
; 124  : 
; 125  :     OALLog(L"\r\n");

  000d4	e59f01d8	 ldr         r0, [pc, #0x1D8]
  000d8	eb000000	 bl          NKDbgPrintfW

; 126  :     OALLog(L" Flash Type:    %s\r\n", pszType);

  000dc	e59d1014	 ldr         r1, [sp, #0x14]
  000e0	e59f01c8	 ldr         r0, [pc, #0x1C8]
  000e4	eb000000	 bl          NKDbgPrintfW

; 127  :     OALLog(L" Blocks:        %d\r\n", flashInfo.dwNumBlocks);

  000e8	e59d1004	 ldr         r1, [sp, #4]
  000ec	e59f01b8	 ldr         r0, [pc, #0x1B8]
  000f0	eb000000	 bl          NKDbgPrintfW

; 128  :     OALLog(L" Bytes/block:   %d\r\n", flashInfo.dwBytesPerBlock);

  000f4	e59d1008	 ldr         r1, [sp, #8]
  000f8	e59f01a8	 ldr         r0, [pc, #0x1A8]
  000fc	eb000000	 bl          NKDbgPrintfW

; 129  :     OALLog(L" Sectors/block: %d\r\n", flashInfo.wSectorsPerBlock);

  00100	e1dd10bc	 ldrh        r1, [sp, #0xC]
  00104	e59f0198	 ldr         r0, [pc, #0x198]
  00108	eb000000	 bl          NKDbgPrintfW

; 130  :     OALLog(L" Bytes/sector:  %d\r\n", flashInfo.wDataBytesPerSector);

  0010c	e1dd10be	 ldrh        r1, [sp, #0xE]
  00110	e59f0188	 ldr         r0, [pc, #0x188]
  00114	eb000000	 bl          NKDbgPrintfW

; 131  : 	
; 132  :     switch (g_bootCfg.ECCtype) 

  00118	e59f317c	 ldr         r3, [pc, #0x17C]
  0011c	e5d33074	 ldrb        r3, [r3, #0x74]
  00120	e58d33b4	 str         r3, [sp, #0x3B4]
  00124	e59d33b4	 ldr         r3, [sp, #0x3B4]
  00128	e3530000	 cmp         r3, #0
  0012c	0a000006	 beq         |$LN11@ShowFlashG|
  00130	e59d33b4	 ldr         r3, [sp, #0x3B4]
  00134	e3530001	 cmp         r3, #1
  00138	0a000006	 beq         |$LN10@ShowFlashG|
  0013c	e59d33b4	 ldr         r3, [sp, #0x3B4]
  00140	e3530002	 cmp         r3, #2
  00144	0a000006	 beq         |$LN9@ShowFlashG|
  00148	ea000008	 b           |$LN8@ShowFlashG|
  0014c		 |$LN11@ShowFlashG|

; 133  :         {
; 134  :         case 0:
; 135  :             pszType = L"Hamming 1bit ECC";

  0014c	e59f3144	 ldr         r3, [pc, #0x144]
  00150	e58d3014	 str         r3, [sp, #0x14]

; 136  :             break;

  00154	ea000007	 b           |$LN12@ShowFlashG|
  00158		 |$LN10@ShowFlashG|

; 137  :         case 1:
; 138  :             pszType = L"BCH 4bit ECC";

  00158	e59f3134	 ldr         r3, [pc, #0x134]
  0015c	e58d3014	 str         r3, [sp, #0x14]

; 139  :             break;

  00160	ea000004	 b           |$LN12@ShowFlashG|
  00164		 |$LN9@ShowFlashG|

; 140  :         case 2:
; 141  :             pszType = L"BCH 8bit ECC";

  00164	e59f3124	 ldr         r3, [pc, #0x124]
  00168	e58d3014	 str         r3, [sp, #0x14]

; 142  :             break;

  0016c	ea000001	 b           |$LN12@ShowFlashG|
  00170		 |$LN8@ShowFlashG|

; 143  : 			
; 144  :         default:
; 145  :             pszType = L"Unknown";

  00170	e59f3114	 ldr         r3, [pc, #0x114]
  00174	e58d3014	 str         r3, [sp, #0x14]
  00178		 |$LN12@ShowFlashG|

; 146  :         }
; 147  : 	
; 148  :     OALLog(L" ECC mode:  %s\r\n", pszType);

  00178	e59d1014	 ldr         r1, [sp, #0x14]
  0017c	e59f0104	 ldr         r0, [pc, #0x104]
  00180	eb000000	 bl          NKDbgPrintfW

; 149  : 
; 150  :     // now list bad/reserved sectors
; 151  : 
; 152  :     // First offset given
; 153  :     block = 0;

  00184	e3a03000	 mov         r3, #0
  00188	e58d33a0	 str         r3, [sp, #0x3A0]
  0018c		 |$LN24@ShowFlashG|
  0018c		 |$LN23@ShowFlashG|
  0018c		 |$LN7@ShowFlashG|

; 154  :     while (block < flashInfo.dwNumBlocks) 

  0018c	e59d23a0	 ldr         r2, [sp, #0x3A0]
  00190	e59d3004	 ldr         r3, [sp, #4]
  00194	e1520003	 cmp         r2, r3
  00198	2a00002a	 bcs         |$LN6@ShowFlashG|

; 155  :         {
; 156  : 
; 157  :         // If block is bad, we have to offset it
; 158  :         status = FMD_GetBlockStatus(block);

  0019c	e59d03a0	 ldr         r0, [sp, #0x3A0]
  001a0	eb000000	 bl          FMD_GetBlockStatus
  001a4	e58d03b8	 str         r0, [sp, #0x3B8]
  001a8	e59d33b8	 ldr         r3, [sp, #0x3B8]
  001ac	e58d339c	 str         r3, [sp, #0x39C]

; 159  : 
; 160  :         // bad block
; 161  :         if ((status & BLOCK_STATUS_BAD) != 0) 

  001b0	e59d339c	 ldr         r3, [sp, #0x39C]
  001b4	e3130002	 tst         r3, #2
  001b8	0a00000d	 beq         |$LN5@ShowFlashG|

; 162  :             {
; 163  :             if (listmode!=1)

  001bc	e59d3010	 ldr         r3, [sp, #0x10]
  001c0	e3530001	 cmp         r3, #1
  001c4	0a000003	 beq         |$LN4@ShowFlashG|

; 164  :                 {
; 165  :                 OALLog(L"\r\n[bad]     ");

  001c8	e59f00b4	 ldr         r0, [pc, #0xB4]
  001cc	eb000000	 bl          NKDbgPrintfW

; 166  :                 listmode=1;

  001d0	e3a03001	 mov         r3, #1
  001d4	e58d3010	 str         r3, [sp, #0x10]
  001d8		 |$LN4@ShowFlashG|

; 167  :                 }
; 168  : 
; 169  :             OALLog(L" %d", block);

  001d8	e59d13a0	 ldr         r1, [sp, #0x3A0]
  001dc	e59f0098	 ldr         r0, [pc, #0x98]
  001e0	eb000000	 bl          NKDbgPrintfW

; 170  : 
; 171  :             block++;

  001e4	e59d33a0	 ldr         r3, [sp, #0x3A0]
  001e8	e2833001	 add         r3, r3, #1
  001ec	e58d33a0	 str         r3, [sp, #0x3A0]

; 172  :             continue;

  001f0	eaffffe5	 b           |$LN7@ShowFlashG|
  001f4		 |$LN5@ShowFlashG|

; 173  :             }
; 174  : 
; 175  :         // reserved block
; 176  :         if ((status & BLOCK_STATUS_RESERVED) != 0) 

  001f4	e59d339c	 ldr         r3, [sp, #0x39C]
  001f8	e3130008	 tst         r3, #8
  001fc	0a00000d	 beq         |$LN3@ShowFlashG|

; 177  :             {
; 178  :             if (listmode!=2)

  00200	e59d3010	 ldr         r3, [sp, #0x10]
  00204	e3530002	 cmp         r3, #2
  00208	0a000003	 beq         |$LN2@ShowFlashG|

; 179  :                 {
; 180  :                 OALLog(L"\r\n[reserved]");

  0020c	e59f006c	 ldr         r0, [pc, #0x6C]
  00210	eb000000	 bl          NKDbgPrintfW

; 181  :                 listmode=2;

  00214	e3a03002	 mov         r3, #2
  00218	e58d3010	 str         r3, [sp, #0x10]
  0021c		 |$LN2@ShowFlashG|

; 182  :                 }
; 183  : 
; 184  :             OALLog(L" %d", block);

  0021c	e59d13a0	 ldr         r1, [sp, #0x3A0]
  00220	e59f0054	 ldr         r0, [pc, #0x54]
  00224	eb000000	 bl          NKDbgPrintfW

; 185  : 
; 186  :             block++;

  00228	e59d33a0	 ldr         r3, [sp, #0x3A0]
  0022c	e2833001	 add         r3, r3, #1
  00230	e58d33a0	 str         r3, [sp, #0x3A0]

; 187  :             continue;

  00234	eaffffd4	 b           |$LN23@ShowFlashG|
  00238		 |$LN3@ShowFlashG|

; 188  :             }
; 189  : 
; 190  :         block++;

  00238	e59d33a0	 ldr         r3, [sp, #0x3A0]
  0023c	e2833001	 add         r3, r3, #1
  00240	e58d33a0	 str         r3, [sp, #0x3A0]

; 191  :     }

  00244	eaffffd0	 b           |$LN24@ShowFlashG|
  00248		 |$LN6@ShowFlashG|

; 192  : 
; 193  :     OALLog(L" Done\r\n");

  00248	e59f0028	 ldr         r0, [pc, #0x28]
  0024c	eb000000	 bl          NKDbgPrintfW
  00250		 |$cleanUp$46776|

; 194  : 
; 195  : cleanUp:
; 196  :     if (hFMD != NULL) 

  00250	e59d3398	 ldr         r3, [sp, #0x398]
  00254	e3530000	 cmp         r3, #0
  00258	0a000001	 beq         |$LN1@ShowFlashG|

; 197  :         {
; 198  :         FMD_Deinit(hFMD);

  0025c	e59d0398	 ldr         r0, [sp, #0x398]
  00260	eb000000	 bl          FMD_Deinit
  00264		 |$LN1@ShowFlashG|

; 88   : {

  00264	e59d03a4	 ldr         r0, [sp, #0x3A4]
  00268	eb000000	 bl          __security_check_cookie

; 199  :         }
; 200  :     return;
; 201  : }

  0026c	e28ddfef	 add         sp, sp, #0xEF, 30
  00270	e89d6000	 ldmia       sp, {sp, lr}
  00274	e12fff1e	 bx          lr
  00278		 |$LN28@ShowFlashG|
  00278		 |$LN29@ShowFlashG|
  00278	00000000	 DCD         |??_C@_1BA@ICKOCNOC@?$AA?5?$AAD?$AAo?$AAn?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  0027c		 |$LN30@ShowFlashG|
  0027c	00000000	 DCD         |??_C@_17IAIOLGBB@?$AA?5?$AA?$CF?$AAd?$AA?$AA@|
  00280		 |$LN31@ShowFlashG|
  00280	00000000	 DCD         |??_C@_1BK@NJMFPCLL@?$AA?$AN?$AA?6?$AA?$FL?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?$FN?$AA?$AA@|
  00284		 |$LN32@ShowFlashG|
  00284	00000000	 DCD         |??_C@_1BK@LJFBNMNP@?$AA?$AN?$AA?6?$AA?$FL?$AAb?$AAa?$AAd?$AA?$FN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$AA@|
  00288		 |$LN33@ShowFlashG|
  00288	00000000	 DCD         |??_C@_1CC@CKACAODM@?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?3?$AA?5?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  0028c		 |$LN34@ShowFlashG|
  0028c	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00290		 |$LN35@ShowFlashG|
  00290	00000000	 DCD         |??_C@_1BK@GHGPADLK@?$AAB?$AAC?$AAH?$AA?5?$AA8?$AAb?$AAi?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?$AA@|
  00294		 |$LN36@ShowFlashG|
  00294	00000000	 DCD         |??_C@_1BK@HLJGHKLA@?$AAB?$AAC?$AAH?$AA?5?$AA4?$AAb?$AAi?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?$AA@|
  00298		 |$LN37@ShowFlashG|
  00298	00000000	 DCD         |??_C@_1CC@EDJAHKCB@?$AAH?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?5?$AA1?$AAb?$AAi?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?$AA@|
  0029c		 |$LN38@ShowFlashG|
  0029c	00000000	 DCD         |g_bootCfg|
  002a0		 |$LN39@ShowFlashG|
  002a0	00000000	 DCD         |??_C@_1CK@KEDBKDHI@?$AA?5?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?1?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  002a4		 |$LN40@ShowFlashG|
  002a4	00000000	 DCD         |??_C@_1CK@OCGGJEJ@?$AA?5?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AAs?$AA?1?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  002a8		 |$LN41@ShowFlashG|
  002a8	00000000	 DCD         |??_C@_1CK@IKGPGDPJ@?$AA?5?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?1?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?3?$AA?5?$AA?5?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  002ac		 |$LN42@ShowFlashG|
  002ac	00000000	 DCD         |??_C@_1CK@FFMHKDOJ@?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AAs?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  002b0		 |$LN43@ShowFlashG|
  002b0	00000000	 DCD         |??_C@_1CK@GKLBIPDL@?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  002b4		 |$LN44@ShowFlashG|
  002b4	00000000	 DCD         |??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@|
  002b8		 |$LN45@ShowFlashG|
  002b8	00000000	 DCD         |??_C@_17DJMAIPNJ@?$AAN?$AAO?$AAR?$AA?$AA@|
  002bc		 |$LN46@ShowFlashG|
  002bc	00000000	 DCD         |??_C@_19FIBFMGJP@?$AAN?$AAA?$AAN?$AAD?$AA?$AA@|
  002c0		 |$LN47@ShowFlashG|
  002c0	00000000	 DCD         |??_C@_1EO@FMHOCAJM@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAg?$AAe?$AAo?$AAm?$AAe?$AAt?$AAr?$AAy?$AA?5@|
  002c4		 |$LN48@ShowFlashG|
  002c4	00000000	 DCD         |??_C@_1DO@ECBGAOKH@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAF?$AAM?$AAD?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  002c8		 |$LN49@ShowFlashG|
  002c8	00000000	 DCD         |g_ulFlashBase|
  002cc		 |$LN50@ShowFlashG|
  002cc	00000000	 DCD         |__security_cookie|
  002d0		 |$M47140|

			 ENDP  ; |ShowFlashGeometry|

	EXPORT	|??_C@_1FI@LPGEHBMI@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?9?$AA?5?$AAm?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@FDJBJKAL@?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@FKCECPDI@?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19DIEGALPP@?$AA?$CF?$AAc?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@KKFAKMFP@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAu?$AAn?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|FMD_SetBlockStatus|
	IMPORT	|FMD_EraseBlock|
	IMPORT	|OALBLMenuReadKey|

  00000			 AREA	 |.pdata|, PDATA
|$T47177| DCD	|$LN16@EraseFlash|
	DCD	0xc0007e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@LPGEHBMI@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?9?$AA?5?$AAm?$AAa@| DCB " "
	DCB	0x0, "O", 0x0, "o", 0x0, "p", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " "
	DCB	0x0, "e", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "r", 0x0, "k", 0x0, " ", 0x0, "a", 0x0, "s"
	DCB	0x0, " ", 0x0, "b", 0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@FDJBJKAL@?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "S", 0x0, "k", 0x0, "i", 0x0, "p", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "r", 0x0, "v", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@FKCECPDI@?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "S", 0x0, "k", 0x0, "i", 0x0, "p", 0x0, " ", 0x0, "b"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19DIEGALPP@?$AA?$CF?$AAc?$AA?$AN?$AA?6?$AA?$AA@| DCB "%", 0x0, "c", 0x0
	DCB	0xd, 0x0, 0xa, 0x0, 0x0, 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@KKFAKMFP@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAu?$AAn?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd@| DCB " "
	DCB	0x0, "D", 0x0, "o", 0x0, " ", 0x0, "y", 0x0, "o", 0x0, "u"
	DCB	0x0, " ", 0x0, "w", 0x0, "a", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "a"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, "u", 0x0, "n", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "r", 0x0, "v", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "s", 0x0, " ", 0x0, "[", 0x0, "-", 0x0, "/"
	DCB	0x0, "y", 0x0, "]", 0x0, "?", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T47173| DCD	0xffffffdc
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T47173|

  00008		 |EraseFlash| PROC

; 206  : {

  00008		 |$LN16@EraseFlash|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0001	 stmdb       sp!, {r0}
  00010	e92d5000	 stmdb       sp!, {r12, lr}
  00014	e24ddfee	 sub         sp, sp, #0xEE, 30
  00018		 |$M47174|
  00018	e59f31dc	 ldr         r3, [pc, #0x1DC]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d33a0	 str         r3, [sp, #0x3A0]

; 207  :     WCHAR key;
; 208  :     HANDLE hFMD = NULL;

  00024	e3a03000	 mov         r3, #0
  00028	e58d3394	 str         r3, [sp, #0x394]

; 209  :     PCI_REG_INFO regInfo;
; 210  :     FlashInfo flashInfo;
; 211  :     BLOCK_ID block;
; 212  :     UINT32 status;
; 213  : 
; 214  :     UNREFERENCED_PARAMETER(pMenu);
; 215  : 
; 216  : 
; 217  :     OALLog(L" Do you want to erase unreserved blocks [-/y]? ");

  0002c	e59f01c4	 ldr         r0, [pc, #0x1C4]
  00030	eb000000	 bl          NKDbgPrintfW

; 218  : 
; 219  :     // Get key
; 220  :     key = OALBLMenuReadKey(TRUE);

  00034	e3a00001	 mov         r0, #1
  00038	eb000000	 bl          OALBLMenuReadKey
  0003c	e1a03800	 mov         r3, r0, lsl #16
  00040	e1a03823	 mov         r3, r3, lsr #16
  00044	e28dcc03	 add         r12, sp, #3, 24
  00048	e1cc3ab4	 strh        r3, [r12, #0xA4]
  0004c	e28d3c03	 add         r3, sp, #3, 24
  00050	e1d33ab4	 ldrh        r3, [r3, #0xA4]
  00054	e1cd31b0	 strh        r3, [sp, #0x10]

; 221  :     OALLog(L"%c\r\n", key);

  00058	e1dd11b0	 ldrh        r1, [sp, #0x10]
  0005c	e59f0190	 ldr         r0, [pc, #0x190]
  00060	eb000000	 bl          NKDbgPrintfW

; 222  : 
; 223  :     // Depending on result
; 224  :     if (key != L'y' && key != L'Y') goto cleanUp;

  00064	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00068	e3530079	 cmp         r3, #0x79
  0006c	0a000003	 beq         |$LN9@EraseFlash|
  00070	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00074	e3530059	 cmp         r3, #0x59
  00078	0a000000	 beq         |$LN9@EraseFlash|
  0007c	ea00004b	 b           |$cleanUp$46833|
  00080		 |$LN9@EraseFlash|

; 225  : 
; 226  :     // Open FMD
; 227  :     regInfo.MemBase.Reg[0] = g_ulFlashBase;

  00080	e59f3168	 ldr         r3, [pc, #0x168]
  00084	e5933000	 ldr         r3, [r3]
  00088	e58d3324	 str         r3, [sp, #0x324]

; 228  :     hFMD = FMD_Init(NULL, &regInfo, NULL);

  0008c	e3a02000	 mov         r2, #0
  00090	e28d1014	 add         r1, sp, #0x14
  00094	e3a00000	 mov         r0, #0
  00098	eb000000	 bl          FMD_Init
  0009c	e58d03a8	 str         r0, [sp, #0x3A8]
  000a0	e59d33a8	 ldr         r3, [sp, #0x3A8]
  000a4	e58d3394	 str         r3, [sp, #0x394]

; 229  :     if (hFMD == NULL) 

  000a8	e59d3394	 ldr         r3, [sp, #0x394]
  000ac	e3530000	 cmp         r3, #0
  000b0	1a000002	 bne         |$LN8@EraseFlash|

; 230  :         {
; 231  :         OALLog(L" Oops, can't open FMD driver\r\n");

  000b4	e59f0130	 ldr         r0, [pc, #0x130]
  000b8	eb000000	 bl          NKDbgPrintfW

; 232  :         goto cleanUp;

  000bc	ea00003b	 b           |$cleanUp$46833|
  000c0		 |$LN8@EraseFlash|

; 233  :         }
; 234  : 
; 235  :     if (!FMD_GetInfo(&flashInfo)) 

  000c0	e28d0000	 add         r0, sp, #0
  000c4	eb000000	 bl          FMD_GetInfo
  000c8	e58d03ac	 str         r0, [sp, #0x3AC]
  000cc	e59d33ac	 ldr         r3, [sp, #0x3AC]
  000d0	e3530000	 cmp         r3, #0
  000d4	1a000002	 bne         |$LN7@EraseFlash|

; 236  :         {
; 237  :         OALLog(L" Oops, can't get flash geometry info\r\n");

  000d8	e59f0108	 ldr         r0, [pc, #0x108]
  000dc	eb000000	 bl          NKDbgPrintfW

; 238  :         goto cleanUp;

  000e0	ea000032	 b           |$cleanUp$46833|
  000e4		 |$LN7@EraseFlash|

; 239  :         }
; 240  : 
; 241  :     // First offset given
; 242  :     block = 0;

  000e4	e3a03000	 mov         r3, #0
  000e8	e58d339c	 str         r3, [sp, #0x39C]
  000ec		 |$LN13@EraseFlash|
  000ec		 |$LN12@EraseFlash|
  000ec		 |$LN6@EraseFlash|

; 243  :     while (block < flashInfo.dwNumBlocks) 

  000ec	e59d239c	 ldr         r2, [sp, #0x39C]
  000f0	e59d3004	 ldr         r3, [sp, #4]
  000f4	e1520003	 cmp         r2, r3
  000f8	2a000028	 bcs         |$LN5@EraseFlash|

; 244  :         {
; 245  : 
; 246  :         // If block is bad, we have to offset it
; 247  :         status = FMD_GetBlockStatus(block);

  000fc	e59d039c	 ldr         r0, [sp, #0x39C]
  00100	eb000000	 bl          FMD_GetBlockStatus
  00104	e58d03b0	 str         r0, [sp, #0x3B0]
  00108	e59d33b0	 ldr         r3, [sp, #0x3B0]
  0010c	e58d3398	 str         r3, [sp, #0x398]

; 248  : 
; 249  :         // Skip bad blocks
; 250  :         if ((status & BLOCK_STATUS_BAD) != 0) 

  00110	e59d3398	 ldr         r3, [sp, #0x398]
  00114	e3130002	 tst         r3, #2
  00118	0a000006	 beq         |$LN4@EraseFlash|

; 251  :             {
; 252  :             OALLog(L" Skip bad block %d\r\n", block);

  0011c	e59d139c	 ldr         r1, [sp, #0x39C]
  00120	e59f00bc	 ldr         r0, [pc, #0xBC]
  00124	eb000000	 bl          NKDbgPrintfW

; 253  :             block++;

  00128	e59d339c	 ldr         r3, [sp, #0x39C]
  0012c	e2833001	 add         r3, r3, #1
  00130	e58d339c	 str         r3, [sp, #0x39C]

; 254  :             continue;

  00134	eaffffec	 b           |$LN6@EraseFlash|
  00138		 |$LN4@EraseFlash|

; 255  :             }
; 256  : 
; 257  :         // Skip reserved blocks
; 258  :         if ((status & BLOCK_STATUS_RESERVED) != 0) 

  00138	e59d3398	 ldr         r3, [sp, #0x398]
  0013c	e3130008	 tst         r3, #8
  00140	0a000006	 beq         |$LN3@EraseFlash|

; 259  :             {
; 260  :             OALLog(L" Skip reserved block %d\r\n", block);

  00144	e59d139c	 ldr         r1, [sp, #0x39C]
  00148	e59f0090	 ldr         r0, [pc, #0x90]
  0014c	eb000000	 bl          NKDbgPrintfW

; 261  :             block++;

  00150	e59d339c	 ldr         r3, [sp, #0x39C]
  00154	e2833001	 add         r3, r3, #1
  00158	e58d339c	 str         r3, [sp, #0x39C]

; 262  :             continue;

  0015c	eaffffe2	 b           |$LN12@EraseFlash|
  00160		 |$LN3@EraseFlash|

; 263  :             }
; 264  : 
; 265  :         // Erase block
; 266  :         if (!FMD_EraseBlock(block)) 

  00160	e59d039c	 ldr         r0, [sp, #0x39C]
  00164	eb000000	 bl          FMD_EraseBlock
  00168	e58d03b4	 str         r0, [sp, #0x3B4]
  0016c	e59d33b4	 ldr         r3, [sp, #0x3B4]
  00170	e3530000	 cmp         r3, #0
  00174	1a000005	 bne         |$LN2@EraseFlash|

; 267  :             {
; 268  :             OALLog(L" Oops, can't erase block %d - mark as bad\r\n", block);

  00178	e59d139c	 ldr         r1, [sp, #0x39C]
  0017c	e59f0058	 ldr         r0, [pc, #0x58]
  00180	eb000000	 bl          NKDbgPrintfW

; 269  :             FMD_SetBlockStatus(block, BLOCK_STATUS_BAD);

  00184	e3a01002	 mov         r1, #2
  00188	e59d039c	 ldr         r0, [sp, #0x39C]
  0018c	eb000000	 bl          FMD_SetBlockStatus
  00190		 |$LN2@EraseFlash|

; 270  :             }
; 271  : 
; 272  :         block++;

  00190	e59d339c	 ldr         r3, [sp, #0x39C]
  00194	e2833001	 add         r3, r3, #1
  00198	e58d339c	 str         r3, [sp, #0x39C]

; 273  :     }

  0019c	eaffffd2	 b           |$LN13@EraseFlash|
  001a0		 |$LN5@EraseFlash|

; 274  : 
; 275  :     OALLog(L" Done\r\n");

  001a0	e59f0030	 ldr         r0, [pc, #0x30]
  001a4	eb000000	 bl          NKDbgPrintfW

; 276  :     
; 277  :     // Block until a keypress
; 278  :     OALBLMenuReadKey(TRUE);

  001a8	e3a00001	 mov         r0, #1
  001ac	eb000000	 bl          OALBLMenuReadKey
  001b0		 |$cleanUp$46833|

; 279  :     
; 280  : cleanUp:
; 281  :     if (hFMD != NULL) FMD_Deinit(hFMD);

  001b0	e59d3394	 ldr         r3, [sp, #0x394]
  001b4	e3530000	 cmp         r3, #0
  001b8	0a000001	 beq         |$LN1@EraseFlash|
  001bc	e59d0394	 ldr         r0, [sp, #0x394]
  001c0	eb000000	 bl          FMD_Deinit
  001c4		 |$LN1@EraseFlash|

; 206  : {

  001c4	e59d03a0	 ldr         r0, [sp, #0x3A0]
  001c8	eb000000	 bl          __security_check_cookie

; 282  :     return;
; 283  : }

  001cc	e28ddfee	 add         sp, sp, #0xEE, 30
  001d0	e89d6000	 ldmia       sp, {sp, lr}
  001d4	e12fff1e	 bx          lr
  001d8		 |$LN17@EraseFlash|
  001d8		 |$LN18@EraseFlash|
  001d8	00000000	 DCD         |??_C@_1BA@ICKOCNOC@?$AA?5?$AAD?$AAo?$AAn?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  001dc		 |$LN19@EraseFlash|
  001dc	00000000	 DCD         |??_C@_1FI@LPGEHBMI@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?9?$AA?5?$AAm?$AAa@|
  001e0		 |$LN20@EraseFlash|
  001e0	00000000	 DCD         |??_C@_1DE@FDJBJKAL@?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  001e4		 |$LN21@EraseFlash|
  001e4	00000000	 DCD         |??_C@_1CK@FKCECPDI@?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  001e8		 |$LN22@EraseFlash|
  001e8	00000000	 DCD         |??_C@_1EO@FMHOCAJM@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAg?$AAe?$AAo?$AAm?$AAe?$AAt?$AAr?$AAy?$AA?5@|
  001ec		 |$LN23@EraseFlash|
  001ec	00000000	 DCD         |??_C@_1DO@ECBGAOKH@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAF?$AAM?$AAD?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  001f0		 |$LN24@EraseFlash|
  001f0	00000000	 DCD         |g_ulFlashBase|
  001f4		 |$LN25@EraseFlash|
  001f4	00000000	 DCD         |??_C@_19DIEGALPP@?$AA?$CF?$AAc?$AA?$AN?$AA?6?$AA?$AA@|
  001f8		 |$LN26@EraseFlash|
  001f8	00000000	 DCD         |??_C@_1GA@KKFAKMFP@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAu?$AAn?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd@|
  001fc		 |$LN27@EraseFlash|
  001fc	00000000	 DCD         |__security_cookie|
  00200		 |$M47175|

			 ENDP  ; |EraseFlash|

	EXPORT	|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@KMEBKKAG@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@IMHNOHDN@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAb@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@FLJCJNNB@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?9?$AA?$CF?$AAd?$AA?5?$AA?$FL@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@MPGKHCCK@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@CKBOHOON@?$AA?$AN?$AA?6?$AA?5?$AAL?$AAa?$AAs?$AAt?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@LGLONGJJ@?$AA?$AN?$AA?6?$AA?5?$AAF?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|OALStringToUINT32|
	IMPORT	|OALBLMenuReadLine|

  00000			 AREA	 |.pdata|, PDATA
|$T47200| DCD	|$LN22@EraseBlock|
	DCD	0xc000d204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| DCB ".", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@KMEBKKAG@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5@| DCB " "
	DCB	0x0, "D", 0x0, "o", 0x0, " ", 0x0, "y", 0x0, "o", 0x0, "u"
	DCB	0x0, " ", 0x0, "w", 0x0, "a", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "a"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, "b", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "[", 0x0, "-"
	DCB	0x0, "/", 0x0, "y", 0x0, "]", 0x0, "?", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@IMHNOHDN@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAb@| DCB " "
	DCB	0x0, "D", 0x0, "o", 0x0, " ", 0x0, "y", 0x0, "o", 0x0, "u"
	DCB	0x0, " ", 0x0, "w", 0x0, "a", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "a"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "e", 0x0, "r", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "[", 0x0, "-", 0x0, "/"
	DCB	0x0, "y", 0x0, "]", 0x0, "?", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@FLJCJNNB@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?9?$AA?$CF?$AAd?$AA?5?$AA?$FL@| DCB " "
	DCB	0x0, "D", 0x0, "o", 0x0, " ", 0x0, "y", 0x0, "o", 0x0, "u"
	DCB	0x0, " ", 0x0, "w", 0x0, "a", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "e", 0x0, "r", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, "-", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "[", 0x0, "-", 0x0, "/", 0x0, "y", 0x0, "]", 0x0, "?"
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@MPGKHCCK@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "O", 0x0, "o", 0x0, "p", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, "o", 0x0, " ", 0x0, "b", 0x0, "i"
	DCB	0x0, "g", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "n", 0x0, "u", 0x0, "m", 0x0, "b"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@CKBOHOON@?$AA?$AN?$AA?6?$AA?5?$AAL?$AAa?$AAs?$AAt?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?3?$AA?5?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "L", 0x0, "a", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "B", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, " ", 0x0, "N", 0x0, "u", 0x0, "m", 0x0, "b", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@LGLONGJJ@?$AA?$AN?$AA?6?$AA?5?$AAF?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?3?$AA?5?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "F", 0x0, "i", 0x0, "r", 0x0, "s"
	DCB	0x0, "t", 0x0, " ", 0x0, "B", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "N", 0x0, "u", 0x0, "m", 0x0, "b"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T47196| DCD	0xffffffc8
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T47196|

  00008		 |EraseBlock| PROC

; 289  : {

  00008		 |$LN22@EraseBlock|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0001	 stmdb       sp!, {r0}
  00010	e92d5000	 stmdb       sp!, {r12, lr}
  00014	e24dde3f	 sub         sp, sp, #0x3F, 28
  00018		 |$M47197|
  00018	e59f332c	 ldr         r3, [pc, #0x32C]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d33c4	 str         r3, [sp, #0x3C4]

; 290  :     WCHAR key;
; 291  :     HANDLE hFMD = NULL;

  00024	e3a03000	 mov         r3, #0
  00028	e58d33b4	 str         r3, [sp, #0x3B4]

; 292  :     PCI_REG_INFO regInfo;
; 293  :     FlashInfo flashInfo;
; 294  :     BLOCK_ID firstblock, lastblock=0;

  0002c	e3a03000	 mov         r3, #0
  00030	e58d33c0	 str         r3, [sp, #0x3C0]

; 295  :     WCHAR szInputLine[16];
; 296  :     UINT32 status;
; 297  : 
; 298  :     UNREFERENCED_PARAMETER(pMenu);
; 299  : 
; 300  :     OALLog(L"\r\n First Block Number: ");

  00034	e59f030c	 ldr         r0, [pc, #0x30C]
  00038	eb000000	 bl          NKDbgPrintfW

; 301  : 
; 302  :     if (OALBLMenuReadLine(szInputLine, dimof(szInputLine)) == 0) 

  0003c	e3a01010	 mov         r1, #0x10
  00040	e28d0014	 add         r0, sp, #0x14
  00044	eb000000	 bl          OALBLMenuReadLine
  00048	e58d03c8	 str         r0, [sp, #0x3C8]
  0004c	e59d33c8	 ldr         r3, [sp, #0x3C8]
  00050	e3530000	 cmp         r3, #0
  00054	1a000000	 bne         |$LN15@EraseBlock|

; 303  :         {
; 304  :         goto cleanUp;

  00058	ea0000a4	 b           |$cleanUp$46864|
  0005c		 |$LN15@EraseBlock|

; 305  :         }
; 306  : 
; 307  :     // Get block number
; 308  :     firstblock = OALStringToUINT32(szInputLine);

  0005c	e28d0014	 add         r0, sp, #0x14
  00060	eb000000	 bl          OALStringToUINT32
  00064	e58d03cc	 str         r0, [sp, #0x3CC]
  00068	e59d33cc	 ldr         r3, [sp, #0x3CC]
  0006c	e58d33b8	 str         r3, [sp, #0x3B8]

; 309  : 
; 310  :     OALLog(L"\r\n Last Block Number: ");

  00070	e59f02cc	 ldr         r0, [pc, #0x2CC]
  00074	eb000000	 bl          NKDbgPrintfW

; 311  : 
; 312  :     if (OALBLMenuReadLine(szInputLine, dimof(szInputLine)) != 0) 

  00078	e3a01010	 mov         r1, #0x10
  0007c	e28d0014	 add         r0, sp, #0x14
  00080	eb000000	 bl          OALBLMenuReadLine
  00084	e58d03d0	 str         r0, [sp, #0x3D0]
  00088	e59d33d0	 ldr         r3, [sp, #0x3D0]
  0008c	e3530000	 cmp         r3, #0
  00090	0a000004	 beq         |$LN14@EraseBlock|

; 313  :         {
; 314  :         // Get block number
; 315  :         lastblock = OALStringToUINT32(szInputLine);

  00094	e28d0014	 add         r0, sp, #0x14
  00098	eb000000	 bl          OALStringToUINT32
  0009c	e58d03d4	 str         r0, [sp, #0x3D4]
  000a0	e59d33d4	 ldr         r3, [sp, #0x3D4]
  000a4	e58d33c0	 str         r3, [sp, #0x3C0]
  000a8		 |$LN14@EraseBlock|

; 316  :         }
; 317  : 
; 318  :     if (lastblock < firstblock) 

  000a8	e59d23c0	 ldr         r2, [sp, #0x3C0]
  000ac	e59d33b8	 ldr         r3, [sp, #0x3B8]
  000b0	e1520003	 cmp         r2, r3
  000b4	2a000001	 bcs         |$LN13@EraseBlock|

; 319  :         {
; 320  :         lastblock=firstblock;

  000b8	e59d33b8	 ldr         r3, [sp, #0x3B8]
  000bc	e58d33c0	 str         r3, [sp, #0x3C0]
  000c0		 |$LN13@EraseBlock|

; 321  :         }
; 322  : 
; 323  :     // Open FMD
; 324  :     regInfo.MemBase.Reg[0] = g_ulFlashBase;

  000c0	e59f3278	 ldr         r3, [pc, #0x278]
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e58d3344	 str         r3, [sp, #0x344]

; 325  :     hFMD = FMD_Init(NULL, &regInfo, NULL);

  000cc	e3a02000	 mov         r2, #0
  000d0	e28d1034	 add         r1, sp, #0x34
  000d4	e3a00000	 mov         r0, #0
  000d8	eb000000	 bl          FMD_Init
  000dc	e58d03d8	 str         r0, [sp, #0x3D8]
  000e0	e59d33d8	 ldr         r3, [sp, #0x3D8]
  000e4	e58d33b4	 str         r3, [sp, #0x3B4]

; 326  :     if (hFMD == NULL) 

  000e8	e59d33b4	 ldr         r3, [sp, #0x3B4]
  000ec	e3530000	 cmp         r3, #0
  000f0	1a000002	 bne         |$LN12@EraseBlock|

; 327  :         {
; 328  :         OALLog(L" Oops, can't open FMD driver\r\n");

  000f4	e59f0240	 ldr         r0, [pc, #0x240]
  000f8	eb000000	 bl          NKDbgPrintfW

; 329  :         goto cleanUp;

  000fc	ea00007b	 b           |$cleanUp$46864|
  00100		 |$LN12@EraseBlock|

; 330  :         }
; 331  : 
; 332  :     if (!FMD_GetInfo(&flashInfo)) 

  00100	e28d0000	 add         r0, sp, #0
  00104	eb000000	 bl          FMD_GetInfo
  00108	e58d03dc	 str         r0, [sp, #0x3DC]
  0010c	e59d33dc	 ldr         r3, [sp, #0x3DC]
  00110	e3530000	 cmp         r3, #0
  00114	1a000002	 bne         |$LN11@EraseBlock|

; 333  :         {
; 334  :         OALLog(L" Oops, can't get flash geometry info\r\n");

  00118	e59f0218	 ldr         r0, [pc, #0x218]
  0011c	eb000000	 bl          NKDbgPrintfW

; 335  :         goto cleanUp;

  00120	ea000072	 b           |$cleanUp$46864|
  00124		 |$LN11@EraseBlock|

; 336  :         }
; 337  : 
; 338  :     if (lastblock >= flashInfo.dwNumBlocks) 

  00124	e59d23c0	 ldr         r2, [sp, #0x3C0]
  00128	e59d3004	 ldr         r3, [sp, #4]
  0012c	e1520003	 cmp         r2, r3
  00130	3a000002	 bcc         |$LN10@EraseBlock|

; 339  :         {
; 340  :         OALLog(L" Oops, too big block number\r\n");

  00134	e59f01f8	 ldr         r0, [pc, #0x1F8]
  00138	eb000000	 bl          NKDbgPrintfW

; 341  :         goto cleanUp;

  0013c	ea00006b	 b           |$cleanUp$46864|
  00140		 |$LN10@EraseBlock|

; 342  :         }
; 343  : 
; 344  :     OALLog(L" Do you want erase block %d-%d [-/y]? ", firstblock, lastblock);

  00140	e59d23c0	 ldr         r2, [sp, #0x3C0]
  00144	e59d13b8	 ldr         r1, [sp, #0x3B8]
  00148	e59f01e0	 ldr         r0, [pc, #0x1E0]
  0014c	eb000000	 bl          NKDbgPrintfW

; 345  : 
; 346  :     // Get key
; 347  :     key = OALBLMenuReadKey(TRUE);

  00150	e3a00001	 mov         r0, #1
  00154	eb000000	 bl          OALBLMenuReadKey
  00158	e1a03800	 mov         r3, r0, lsl #16
  0015c	e1a03823	 mov         r3, r3, lsr #16
  00160	e28dcc03	 add         r12, sp, #3, 24
  00164	e1cc3eb0	 strh        r3, [r12, #0xE0]
  00168	e28d3c03	 add         r3, sp, #3, 24
  0016c	e1d33eb0	 ldrh        r3, [r3, #0xE0]
  00170	e1cd31b0	 strh        r3, [sp, #0x10]

; 348  :     OALLog(L"%c\r\n", key);

  00174	e1dd11b0	 ldrh        r1, [sp, #0x10]
  00178	e59f01a4	 ldr         r0, [pc, #0x1A4]
  0017c	eb000000	 bl          NKDbgPrintfW

; 349  : 
; 350  :     // Depending on result
; 351  :     if (key != L'y' && key != L'Y') 

  00180	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00184	e3530079	 cmp         r3, #0x79
  00188	0a000003	 beq         |$LN9@EraseBlock|
  0018c	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00190	e3530059	 cmp         r3, #0x59
  00194	0a000000	 beq         |$LN9@EraseBlock|

; 352  :         {
; 353  :         goto cleanUp;

  00198	ea000054	 b           |$cleanUp$46864|
  0019c		 |$LN9@EraseBlock|
  0019c		 |$LN19@EraseBlock|
  0019c		 |$LN18@EraseBlock|
  0019c		 |$LN8@EraseBlock|

; 354  :         }
; 355  : 
; 356  :     while (firstblock<=lastblock)

  0019c	e59d23b8	 ldr         r2, [sp, #0x3B8]
  001a0	e59d33c0	 ldr         r3, [sp, #0x3C0]
  001a4	e1520003	 cmp         r2, r3
  001a8	8a00004e	 bhi         |$LN7@EraseBlock|

; 357  :         {
; 358  : 
; 359  :         // If block is bad, we have to offset it
; 360  :         status = FMD_GetBlockStatus(firstblock);

  001ac	e59d03b8	 ldr         r0, [sp, #0x3B8]
  001b0	eb000000	 bl          FMD_GetBlockStatus
  001b4	e58d03e4	 str         r0, [sp, #0x3E4]
  001b8	e59d33e4	 ldr         r3, [sp, #0x3E4]
  001bc	e58d33bc	 str         r3, [sp, #0x3BC]

; 361  : 
; 362  :         // ask before erasing reserved blocks
; 363  :         if ((status & BLOCK_STATUS_RESERVED) != 0) 

  001c0	e59d33bc	 ldr         r3, [sp, #0x3BC]
  001c4	e3130008	 tst         r3, #8
  001c8	0a000018	 beq         |$LN6@EraseBlock|

; 364  :             {
; 365  : 
; 366  :             OALLog(L" Do you want to erase reserved block %d [-/y]? ", firstblock);

  001cc	e59d13b8	 ldr         r1, [sp, #0x3B8]
  001d0	e59f0154	 ldr         r0, [pc, #0x154]
  001d4	eb000000	 bl          NKDbgPrintfW

; 367  : 
; 368  :             // Get key
; 369  :             key = OALBLMenuReadKey(TRUE);

  001d8	e3a00001	 mov         r0, #1
  001dc	eb000000	 bl          OALBLMenuReadKey
  001e0	e1a03800	 mov         r3, r0, lsl #16
  001e4	e1a03823	 mov         r3, r3, lsr #16
  001e8	e28dcc03	 add         r12, sp, #3, 24
  001ec	e1cc3eb8	 strh        r3, [r12, #0xE8]
  001f0	e28d3c03	 add         r3, sp, #3, 24
  001f4	e1d33eb8	 ldrh        r3, [r3, #0xE8]
  001f8	e1cd31b0	 strh        r3, [sp, #0x10]

; 370  :             OALLog(L"%c\r\n", key);

  001fc	e1dd11b0	 ldrh        r1, [sp, #0x10]
  00200	e59f011c	 ldr         r0, [pc, #0x11C]
  00204	eb000000	 bl          NKDbgPrintfW

; 371  : 
; 372  :             // Depending on result
; 373  :             if (key != L'y' && key != L'Y') 

  00208	e1dd31b0	 ldrh        r3, [sp, #0x10]
  0020c	e3530079	 cmp         r3, #0x79
  00210	0a000006	 beq         |$LN5@EraseBlock|
  00214	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00218	e3530059	 cmp         r3, #0x59
  0021c	0a000003	 beq         |$LN5@EraseBlock|

; 374  :                 {
; 375  :                 firstblock++;

  00220	e59d33b8	 ldr         r3, [sp, #0x3B8]
  00224	e2833001	 add         r3, r3, #1
  00228	e58d33b8	 str         r3, [sp, #0x3B8]

; 376  :                 continue;

  0022c	eaffffda	 b           |$LN8@EraseBlock|
  00230		 |$LN5@EraseBlock|
  00230		 |$LN6@EraseBlock|

; 377  :                 }
; 378  : 
; 379  :             }
; 380  : 
; 381  :         // ask before erasing bad blocks
; 382  :         if ((status & BLOCK_STATUS_BAD) != 0) 

  00230	e59d33bc	 ldr         r3, [sp, #0x3BC]
  00234	e3130002	 tst         r3, #2
  00238	0a000018	 beq         |$LN4@EraseBlock|

; 383  :             {
; 384  : 
; 385  :             OALLog(L" Do you want to erase bad block %d [-/y]? ", firstblock);

  0023c	e59d13b8	 ldr         r1, [sp, #0x3B8]
  00240	e59f00e0	 ldr         r0, [pc, #0xE0]
  00244	eb000000	 bl          NKDbgPrintfW

; 386  : 
; 387  :             // Get key
; 388  :             key = OALBLMenuReadKey(TRUE);

  00248	e3a00001	 mov         r0, #1
  0024c	eb000000	 bl          OALBLMenuReadKey
  00250	e1a03800	 mov         r3, r0, lsl #16
  00254	e1a03823	 mov         r3, r3, lsr #16
  00258	e28dcc03	 add         r12, sp, #3, 24
  0025c	e1cc3eba	 strh        r3, [r12, #0xEA]
  00260	e28d3c03	 add         r3, sp, #3, 24
  00264	e1d33eba	 ldrh        r3, [r3, #0xEA]
  00268	e1cd31b0	 strh        r3, [sp, #0x10]

; 389  :             OALLog(L"%c\r\n", key);

  0026c	e1dd11b0	 ldrh        r1, [sp, #0x10]
  00270	e59f00ac	 ldr         r0, [pc, #0xAC]
  00274	eb000000	 bl          NKDbgPrintfW

; 390  : 
; 391  :             // Depending on result
; 392  :             if (key != L'y' && key != L'Y') 

  00278	e1dd31b0	 ldrh        r3, [sp, #0x10]
  0027c	e3530079	 cmp         r3, #0x79
  00280	0a000006	 beq         |$LN3@EraseBlock|
  00284	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00288	e3530059	 cmp         r3, #0x59
  0028c	0a000003	 beq         |$LN3@EraseBlock|

; 393  :                 {
; 394  :                 firstblock++;

  00290	e59d33b8	 ldr         r3, [sp, #0x3B8]
  00294	e2833001	 add         r3, r3, #1
  00298	e58d33b8	 str         r3, [sp, #0x3B8]

; 395  :                 continue;

  0029c	eaffffbe	 b           |$LN18@EraseBlock|
  002a0		 |$LN3@EraseBlock|
  002a0		 |$LN4@EraseBlock|

; 396  :                 }
; 397  : 
; 398  :             }
; 399  : 
; 400  :         // Erase block
; 401  :         if (!FMD_EraseBlock(firstblock)) 

  002a0	e59d03b8	 ldr         r0, [sp, #0x3B8]
  002a4	eb000000	 bl          FMD_EraseBlock
  002a8	e58d03ec	 str         r0, [sp, #0x3EC]
  002ac	e59d33ec	 ldr         r3, [sp, #0x3EC]
  002b0	e3530000	 cmp         r3, #0
  002b4	1a000005	 bne         |$LN2@EraseBlock|

; 402  :             {
; 403  :             OALLog(L" Oops, can't erase block %d - mark as bad\r\n", firstblock);

  002b8	e59d13b8	 ldr         r1, [sp, #0x3B8]
  002bc	e59f005c	 ldr         r0, [pc, #0x5C]
  002c0	eb000000	 bl          NKDbgPrintfW

; 404  :             FMD_SetBlockStatus(firstblock, BLOCK_STATUS_BAD);

  002c4	e3a01002	 mov         r1, #2
  002c8	e59d03b8	 ldr         r0, [sp, #0x3B8]
  002cc	eb000000	 bl          FMD_SetBlockStatus
  002d0		 |$LN2@EraseBlock|

; 405  :             }
; 406  : 
; 407  :         firstblock++;

  002d0	e59d33b8	 ldr         r3, [sp, #0x3B8]
  002d4	e2833001	 add         r3, r3, #1
  002d8	e58d33b8	 str         r3, [sp, #0x3B8]

; 408  :         OALLog(L".");

  002dc	e59f0038	 ldr         r0, [pc, #0x38]
  002e0	eb000000	 bl          NKDbgPrintfW

; 409  :         }

  002e4	eaffffac	 b           |$LN19@EraseBlock|
  002e8		 |$LN7@EraseBlock|

; 410  : 
; 411  :     OALLog(L" Done\r\n");

  002e8	e59f0028	 ldr         r0, [pc, #0x28]
  002ec	eb000000	 bl          NKDbgPrintfW
  002f0		 |$cleanUp$46864|

; 412  : 
; 413  : cleanUp:
; 414  :     if (hFMD != NULL) FMD_Deinit(hFMD);

  002f0	e59d33b4	 ldr         r3, [sp, #0x3B4]
  002f4	e3530000	 cmp         r3, #0
  002f8	0a000001	 beq         |$LN1@EraseBlock|
  002fc	e59d03b4	 ldr         r0, [sp, #0x3B4]
  00300	eb000000	 bl          FMD_Deinit
  00304		 |$LN1@EraseBlock|

; 289  : {

  00304	e59d03c4	 ldr         r0, [sp, #0x3C4]
  00308	eb000000	 bl          __security_check_cookie

; 415  :     return;
; 416  : }

  0030c	e28dde3f	 add         sp, sp, #0x3F, 28
  00310	e89d6000	 ldmia       sp, {sp, lr}
  00314	e12fff1e	 bx          lr
  00318		 |$LN23@EraseBlock|
  00318		 |$LN24@EraseBlock|
  00318	00000000	 DCD         |??_C@_1BA@ICKOCNOC@?$AA?5?$AAD?$AAo?$AAn?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  0031c		 |$LN25@EraseBlock|
  0031c	00000000	 DCD         |??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@|
  00320		 |$LN26@EraseBlock|
  00320	00000000	 DCD         |??_C@_1FI@LPGEHBMI@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?9?$AA?5?$AAm?$AAa@|
  00324		 |$LN27@EraseBlock|
  00324	00000000	 DCD         |??_C@_19DIEGALPP@?$AA?$CF?$AAc?$AA?$AN?$AA?6?$AA?$AA@|
  00328		 |$LN28@EraseBlock|
  00328	00000000	 DCD         |??_C@_1FG@KMEBKKAG@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5@|
  0032c		 |$LN29@EraseBlock|
  0032c	00000000	 DCD         |??_C@_1GA@IMHNOHDN@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAb@|
  00330		 |$LN30@EraseBlock|
  00330	00000000	 DCD         |??_C@_1EO@FLJCJNNB@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?9?$AA?$CF?$AAd?$AA?5?$AA?$FL@|
  00334		 |$LN31@EraseBlock|
  00334	00000000	 DCD         |??_C@_1DM@MPGKHCCK@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00338		 |$LN32@EraseBlock|
  00338	00000000	 DCD         |??_C@_1EO@FMHOCAJM@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAg?$AAe?$AAo?$AAm?$AAe?$AAt?$AAr?$AAy?$AA?5@|
  0033c		 |$LN33@EraseBlock|
  0033c	00000000	 DCD         |??_C@_1DO@ECBGAOKH@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAF?$AAM?$AAD?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00340		 |$LN34@EraseBlock|
  00340	00000000	 DCD         |g_ulFlashBase|
  00344		 |$LN35@EraseBlock|
  00344	00000000	 DCD         |??_C@_1CO@CKBOHOON@?$AA?$AN?$AA?6?$AA?5?$AAL?$AAa?$AAs?$AAt?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?3?$AA?5?$AA?$AA@|
  00348		 |$LN36@EraseBlock|
  00348	00000000	 DCD         |??_C@_1DA@LGLONGJJ@?$AA?$AN?$AA?6?$AA?5?$AAF?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?3?$AA?5?$AA?$AA@|
  0034c		 |$LN37@EraseBlock|
  0034c	00000000	 DCD         |__security_cookie|
  00350		 |$M47198|

			 ENDP  ; |EraseBlock|

	EXPORT	|??_C@_1FG@GECOJCBP@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAm?$AAa?$AAr?$AAk?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?9?$AA?5?$AAa?$AAs?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@KHHGLGPF@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAm?$AAa?$AAr?$AAk?$AA?5?$AAa?$AAs?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAb?$AAl@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]

  00000			 AREA	 |.pdata|, PDATA
|$T47227| DCD	|$LN20@ReserveBlo|
	DCD	0xc000ac04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@GECOJCBP@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAm?$AAa?$AAr?$AAk?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?9?$AA?5?$AAa?$AAs?$AA?5@| DCB " "
	DCB	0x0, "O", 0x0, "o", 0x0, "p", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "r", 0x0, "k", 0x0, " ", 0x0, "b"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "a", 0x0, "s"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "r"
	DCB	0x0, "v", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@KHHGLGPF@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAm?$AAa?$AAr?$AAk?$AA?5?$AAa?$AAs?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAb?$AAl@| DCB " "
	DCB	0x0, "D", 0x0, "o", 0x0, " ", 0x0, "y", 0x0, "o", 0x0, "u"
	DCB	0x0, " ", 0x0, "w", 0x0, "a", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "m", 0x0, "a", 0x0, "r", 0x0, "k", 0x0, " ", 0x0, "a"
	DCB	0x0, "s", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e"
	DCB	0x0, "r", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "b"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, "-", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "["
	DCB	0x0, "-", 0x0, "/", 0x0, "y", 0x0, "]", 0x0, "?", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.xdata|, DATA
|$T47223| DCD	0xffffffcc
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T47223|

  00008		 |ReserveBlock| PROC

; 421  : {

  00008		 |$LN20@ReserveBlo|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0001	 stmdb       sp!, {r0}
  00010	e92d5000	 stmdb       sp!, {r12, lr}
  00014	e24ddffb	 sub         sp, sp, #0xFB, 30
  00018		 |$M47224|
  00018	e59f3294	 ldr         r3, [pc, #0x294]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d33c4	 str         r3, [sp, #0x3C4]

; 422  :     WCHAR key;
; 423  :     HANDLE hFMD = NULL;

  00024	e3a03000	 mov         r3, #0
  00028	e58d33b4	 str         r3, [sp, #0x3B4]

; 424  :     PCI_REG_INFO regInfo;
; 425  :     FlashInfo flashInfo;
; 426  :     BLOCK_ID firstblock, lastblock=0;

  0002c	e3a03000	 mov         r3, #0
  00030	e58d33c0	 str         r3, [sp, #0x3C0]

; 427  :     WCHAR szInputLine[16];
; 428  :     UINT32 status;
; 429  : 
; 430  :     UNREFERENCED_PARAMETER(pMenu);
; 431  : 
; 432  :     OALLog(L"\r\n First Block Number: ");

  00034	e59f0274	 ldr         r0, [pc, #0x274]
  00038	eb000000	 bl          NKDbgPrintfW

; 433  : 
; 434  :     if (OALBLMenuReadLine(szInputLine, dimof(szInputLine)) == 0) 

  0003c	e3a01010	 mov         r1, #0x10
  00040	e28d0014	 add         r0, sp, #0x14
  00044	eb000000	 bl          OALBLMenuReadLine
  00048	e58d03c8	 str         r0, [sp, #0x3C8]
  0004c	e59d33c8	 ldr         r3, [sp, #0x3C8]
  00050	e3530000	 cmp         r3, #0
  00054	1a000000	 bne         |$LN13@ReserveBlo|

; 435  :         {
; 436  :         goto cleanUp;

  00058	ea00007e	 b           |$cleanUp$46903|
  0005c		 |$LN13@ReserveBlo|

; 437  :         }
; 438  : 
; 439  :     // Get block number
; 440  :     firstblock = OALStringToUINT32(szInputLine);

  0005c	e28d0014	 add         r0, sp, #0x14
  00060	eb000000	 bl          OALStringToUINT32
  00064	e58d03cc	 str         r0, [sp, #0x3CC]
  00068	e59d33cc	 ldr         r3, [sp, #0x3CC]
  0006c	e58d33b8	 str         r3, [sp, #0x3B8]

; 441  : 
; 442  :     OALLog(L"\r\n Last Block Number: ");

  00070	e59f0234	 ldr         r0, [pc, #0x234]
  00074	eb000000	 bl          NKDbgPrintfW

; 443  : 
; 444  :     if (OALBLMenuReadLine(szInputLine, dimof(szInputLine)) != 0) 

  00078	e3a01010	 mov         r1, #0x10
  0007c	e28d0014	 add         r0, sp, #0x14
  00080	eb000000	 bl          OALBLMenuReadLine
  00084	e58d03d0	 str         r0, [sp, #0x3D0]
  00088	e59d33d0	 ldr         r3, [sp, #0x3D0]
  0008c	e3530000	 cmp         r3, #0
  00090	0a000004	 beq         |$LN12@ReserveBlo|

; 445  :         {
; 446  :         // Get block number
; 447  :         lastblock = OALStringToUINT32(szInputLine);

  00094	e28d0014	 add         r0, sp, #0x14
  00098	eb000000	 bl          OALStringToUINT32
  0009c	e58d03d4	 str         r0, [sp, #0x3D4]
  000a0	e59d33d4	 ldr         r3, [sp, #0x3D4]
  000a4	e58d33c0	 str         r3, [sp, #0x3C0]
  000a8		 |$LN12@ReserveBlo|

; 448  :         }
; 449  : 
; 450  :     if (lastblock < firstblock) 

  000a8	e59d23c0	 ldr         r2, [sp, #0x3C0]
  000ac	e59d33b8	 ldr         r3, [sp, #0x3B8]
  000b0	e1520003	 cmp         r2, r3
  000b4	2a000001	 bcs         |$LN11@ReserveBlo|

; 451  :         {
; 452  :         lastblock=firstblock;

  000b8	e59d33b8	 ldr         r3, [sp, #0x3B8]
  000bc	e58d33c0	 str         r3, [sp, #0x3C0]
  000c0		 |$LN11@ReserveBlo|

; 453  :         }
; 454  : 
; 455  :     // Open FMD
; 456  :     regInfo.MemBase.Reg[0] = g_ulFlashBase;

  000c0	e59f31e0	 ldr         r3, [pc, #0x1E0]
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e58d3344	 str         r3, [sp, #0x344]

; 457  :     hFMD = FMD_Init(NULL, &regInfo, NULL);

  000cc	e3a02000	 mov         r2, #0
  000d0	e28d1034	 add         r1, sp, #0x34
  000d4	e3a00000	 mov         r0, #0
  000d8	eb000000	 bl          FMD_Init
  000dc	e58d03d8	 str         r0, [sp, #0x3D8]
  000e0	e59d33d8	 ldr         r3, [sp, #0x3D8]
  000e4	e58d33b4	 str         r3, [sp, #0x3B4]

; 458  :     if (hFMD == NULL) 

  000e8	e59d33b4	 ldr         r3, [sp, #0x3B4]
  000ec	e3530000	 cmp         r3, #0
  000f0	1a000002	 bne         |$LN10@ReserveBlo|

; 459  :         {
; 460  :         OALLog(L" Oops, can't open FMD driver\r\n");

  000f4	e59f01a8	 ldr         r0, [pc, #0x1A8]
  000f8	eb000000	 bl          NKDbgPrintfW

; 461  :         goto cleanUp;

  000fc	ea000055	 b           |$cleanUp$46903|
  00100		 |$LN10@ReserveBlo|

; 462  :         }
; 463  : 
; 464  :     if (!FMD_GetInfo(&flashInfo)) 

  00100	e28d0000	 add         r0, sp, #0
  00104	eb000000	 bl          FMD_GetInfo
  00108	e58d03dc	 str         r0, [sp, #0x3DC]
  0010c	e59d33dc	 ldr         r3, [sp, #0x3DC]
  00110	e3530000	 cmp         r3, #0
  00114	1a000002	 bne         |$LN9@ReserveBlo|

; 465  :         {
; 466  :         OALLog(L" Oops, can't get flash geometry info\r\n");

  00118	e59f0180	 ldr         r0, [pc, #0x180]
  0011c	eb000000	 bl          NKDbgPrintfW

; 467  :         goto cleanUp;

  00120	ea00004c	 b           |$cleanUp$46903|
  00124		 |$LN9@ReserveBlo|

; 468  :         }
; 469  : 
; 470  :     if (lastblock >= flashInfo.dwNumBlocks) 

  00124	e59d23c0	 ldr         r2, [sp, #0x3C0]
  00128	e59d3004	 ldr         r3, [sp, #4]
  0012c	e1520003	 cmp         r2, r3
  00130	3a000002	 bcc         |$LN8@ReserveBlo|

; 471  :         {
; 472  :         OALLog(L" Oops, too big block number\r\n");

  00134	e59f0160	 ldr         r0, [pc, #0x160]
  00138	eb000000	 bl          NKDbgPrintfW

; 473  :         goto cleanUp;

  0013c	ea000045	 b           |$cleanUp$46903|
  00140		 |$LN8@ReserveBlo|

; 474  :         }
; 475  : 
; 476  :     OALLog(L" Do you want mark as reserved block %d-%d [-/y]? ", firstblock, lastblock);

  00140	e59d23c0	 ldr         r2, [sp, #0x3C0]
  00144	e59d13b8	 ldr         r1, [sp, #0x3B8]
  00148	e59f0148	 ldr         r0, [pc, #0x148]
  0014c	eb000000	 bl          NKDbgPrintfW

; 477  : 
; 478  :     // Get key
; 479  :     key = OALBLMenuReadKey(TRUE);

  00150	e3a00001	 mov         r0, #1
  00154	eb000000	 bl          OALBLMenuReadKey
  00158	e1a03800	 mov         r3, r0, lsl #16
  0015c	e1a03823	 mov         r3, r3, lsr #16
  00160	e28dcc03	 add         r12, sp, #3, 24
  00164	e1cc3eb0	 strh        r3, [r12, #0xE0]
  00168	e28d3c03	 add         r3, sp, #3, 24
  0016c	e1d33eb0	 ldrh        r3, [r3, #0xE0]
  00170	e1cd31b0	 strh        r3, [sp, #0x10]

; 480  :     OALLog(L"%c\r\n", key);

  00174	e1dd11b0	 ldrh        r1, [sp, #0x10]
  00178	e59f0114	 ldr         r0, [pc, #0x114]
  0017c	eb000000	 bl          NKDbgPrintfW

; 481  : 
; 482  :     // Depending on result
; 483  :     if (key != L'y' && key != L'Y') 

  00180	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00184	e3530079	 cmp         r3, #0x79
  00188	0a000003	 beq         |$LN7@ReserveBlo|
  0018c	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00190	e3530059	 cmp         r3, #0x59
  00194	0a000000	 beq         |$LN7@ReserveBlo|

; 484  :         {
; 485  :         goto cleanUp;

  00198	ea00002e	 b           |$cleanUp$46903|
  0019c		 |$LN7@ReserveBlo|
  0019c		 |$LN17@ReserveBlo|
  0019c		 |$LN16@ReserveBlo|
  0019c		 |$LN6@ReserveBlo|

; 486  :         }
; 487  : 
; 488  :     while (firstblock<=lastblock)

  0019c	e59d23b8	 ldr         r2, [sp, #0x3B8]
  001a0	e59d33c0	 ldr         r3, [sp, #0x3C0]
  001a4	e1520003	 cmp         r2, r3
  001a8	8a000028	 bhi         |$LN5@ReserveBlo|

; 489  :         {
; 490  : 
; 491  :         // If block is bad, we have to offset it
; 492  :         status = FMD_GetBlockStatus(firstblock);

  001ac	e59d03b8	 ldr         r0, [sp, #0x3B8]
  001b0	eb000000	 bl          FMD_GetBlockStatus
  001b4	e58d03e4	 str         r0, [sp, #0x3E4]
  001b8	e59d33e4	 ldr         r3, [sp, #0x3E4]
  001bc	e58d33bc	 str         r3, [sp, #0x3BC]

; 493  : 
; 494  :         // Skip bad blocks
; 495  :         if ((status & BLOCK_STATUS_BAD) != 0) 

  001c0	e59d33bc	 ldr         r3, [sp, #0x3BC]
  001c4	e3130002	 tst         r3, #2
  001c8	0a000006	 beq         |$LN4@ReserveBlo|

; 496  :             {
; 497  :             OALLog(L" Skip bad block %d\r\n", firstblock);

  001cc	e59d13b8	 ldr         r1, [sp, #0x3B8]
  001d0	e59f00b8	 ldr         r0, [pc, #0xB8]
  001d4	eb000000	 bl          NKDbgPrintfW

; 498  :             // NOTE - this will cause a smaller number of blocks to actually be reserved...
; 499  :             firstblock++;

  001d8	e59d33b8	 ldr         r3, [sp, #0x3B8]
  001dc	e2833001	 add         r3, r3, #1
  001e0	e58d33b8	 str         r3, [sp, #0x3B8]

; 500  :             continue;

  001e4	eaffffec	 b           |$LN6@ReserveBlo|
  001e8		 |$LN4@ReserveBlo|

; 501  :             }
; 502  : 
; 503  :         // Skip already reserved blocks
; 504  :         if ((status & BLOCK_STATUS_RESERVED) != 0) 

  001e8	e59d33bc	 ldr         r3, [sp, #0x3BC]
  001ec	e3130008	 tst         r3, #8
  001f0	0a000006	 beq         |$LN3@ReserveBlo|

; 505  :             {
; 506  :             OALLog(L" Skip reserved block %d\r\n", firstblock);

  001f4	e59d13b8	 ldr         r1, [sp, #0x3B8]
  001f8	e59f008c	 ldr         r0, [pc, #0x8C]
  001fc	eb000000	 bl          NKDbgPrintfW

; 507  :             firstblock++;

  00200	e59d33b8	 ldr         r3, [sp, #0x3B8]
  00204	e2833001	 add         r3, r3, #1
  00208	e58d33b8	 str         r3, [sp, #0x3B8]

; 508  :             continue;

  0020c	eaffffe2	 b           |$LN16@ReserveBlo|
  00210		 |$LN3@ReserveBlo|

; 509  :             }
; 510  : 
; 511  :         // Mark block as read-only & reserved
; 512  :         if (!FMD_SetBlockStatus(firstblock, BLOCK_STATUS_READONLY|BLOCK_STATUS_RESERVED)) 

  00210	e3a0100c	 mov         r1, #0xC
  00214	e59d03b8	 ldr         r0, [sp, #0x3B8]
  00218	eb000000	 bl          FMD_SetBlockStatus
  0021c	e58d03e8	 str         r0, [sp, #0x3E8]
  00220	e59d33e8	 ldr         r3, [sp, #0x3E8]
  00224	e3530000	 cmp         r3, #0
  00228	1a000002	 bne         |$LN2@ReserveBlo|

; 513  :             {
; 514  :             OALLog(L" Oops, can't mark block %d - as reserved\r\n", firstblock);

  0022c	e59d13b8	 ldr         r1, [sp, #0x3B8]
  00230	e59f0050	 ldr         r0, [pc, #0x50]
  00234	eb000000	 bl          NKDbgPrintfW
  00238		 |$LN2@ReserveBlo|

; 515  :             }
; 516  : 
; 517  :         firstblock++;

  00238	e59d33b8	 ldr         r3, [sp, #0x3B8]
  0023c	e2833001	 add         r3, r3, #1
  00240	e58d33b8	 str         r3, [sp, #0x3B8]

; 518  :         OALLog(L".");

  00244	e59f0038	 ldr         r0, [pc, #0x38]
  00248	eb000000	 bl          NKDbgPrintfW

; 519  :         }

  0024c	eaffffd2	 b           |$LN17@ReserveBlo|
  00250		 |$LN5@ReserveBlo|

; 520  : 
; 521  :     OALLog(L" Done\r\n");

  00250	e59f0028	 ldr         r0, [pc, #0x28]
  00254	eb000000	 bl          NKDbgPrintfW
  00258		 |$cleanUp$46903|

; 522  : 
; 523  : cleanUp:
; 524  :     if (hFMD != NULL) FMD_Deinit(hFMD);

  00258	e59d33b4	 ldr         r3, [sp, #0x3B4]
  0025c	e3530000	 cmp         r3, #0
  00260	0a000001	 beq         |$LN1@ReserveBlo|
  00264	e59d03b4	 ldr         r0, [sp, #0x3B4]
  00268	eb000000	 bl          FMD_Deinit
  0026c		 |$LN1@ReserveBlo|

; 421  : {

  0026c	e59d03c4	 ldr         r0, [sp, #0x3C4]
  00270	eb000000	 bl          __security_check_cookie

; 525  :     return;
; 526  : }

  00274	e28ddffb	 add         sp, sp, #0xFB, 30
  00278	e89d6000	 ldmia       sp, {sp, lr}
  0027c	e12fff1e	 bx          lr
  00280		 |$LN21@ReserveBlo|
  00280		 |$LN22@ReserveBlo|
  00280	00000000	 DCD         |??_C@_1BA@ICKOCNOC@?$AA?5?$AAD?$AAo?$AAn?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00284		 |$LN23@ReserveBlo|
  00284	00000000	 DCD         |??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@|
  00288		 |$LN24@ReserveBlo|
  00288	00000000	 DCD         |??_C@_1FG@GECOJCBP@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAm?$AAa?$AAr?$AAk?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?9?$AA?5?$AAa?$AAs?$AA?5@|
  0028c		 |$LN25@ReserveBlo|
  0028c	00000000	 DCD         |??_C@_1DE@FDJBJKAL@?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00290		 |$LN26@ReserveBlo|
  00290	00000000	 DCD         |??_C@_1CK@FKCECPDI@?$AA?5?$AAS?$AAk?$AAi?$AAp?$AA?5?$AAb?$AAa?$AAd?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00294		 |$LN27@ReserveBlo|
  00294	00000000	 DCD         |??_C@_19DIEGALPP@?$AA?$CF?$AAc?$AA?$AN?$AA?6?$AA?$AA@|
  00298		 |$LN28@ReserveBlo|
  00298	00000000	 DCD         |??_C@_1GE@KHHGLGPF@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAm?$AAa?$AAr?$AAk?$AA?5?$AAa?$AAs?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?5?$AAb?$AAl@|
  0029c		 |$LN29@ReserveBlo|
  0029c	00000000	 DCD         |??_C@_1DM@MPGKHCCK@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  002a0		 |$LN30@ReserveBlo|
  002a0	00000000	 DCD         |??_C@_1EO@FMHOCAJM@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAg?$AAe?$AAo?$AAm?$AAe?$AAt?$AAr?$AAy?$AA?5@|
  002a4		 |$LN31@ReserveBlo|
  002a4	00000000	 DCD         |??_C@_1DO@ECBGAOKH@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAF?$AAM?$AAD?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  002a8		 |$LN32@ReserveBlo|
  002a8	00000000	 DCD         |g_ulFlashBase|
  002ac		 |$LN33@ReserveBlo|
  002ac	00000000	 DCD         |??_C@_1CO@CKBOHOON@?$AA?$AN?$AA?6?$AA?5?$AAL?$AAa?$AAs?$AAt?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?3?$AA?5?$AA?$AA@|
  002b0		 |$LN34@ReserveBlo|
  002b0	00000000	 DCD         |??_C@_1DA@LGLONGJJ@?$AA?$AN?$AA?6?$AA?5?$AAF?$AAi?$AAr?$AAs?$AAt?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?3?$AA?5?$AA?$AA@|
  002b4		 |$LN35@ReserveBlo|
  002b4	00000000	 DCD         |__security_cookie|
  002b8		 |$M47225|

			 ENDP  ; |ReserveBlock|

	EXPORT	|??_C@_15DAMPJCDE@?$AA?$CF?$AAc?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@FHJLFHFE@?$AA?5?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@CKIPGKFF@?$AA?$CF?$AA0?$AA4?$AAx?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@NEKLJOFD@?$AAR?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA1?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAO?$AAE?$AAM?$AAR?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AA0?$AA2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@JNIBIIAB@?$AA?$AN?$AA?6?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@NODDJIFB@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OOAFHGFN@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@KCBMIPD@?$AA?$AN?$AA?6?$AA?5?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@IJKIFPEH@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AAl?$AAa?$AAr?$AAg?$AAe?$AAr?$AA?5?$AAt?$AAh?$AAa?$AAn?$AA?5?$AAm@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|FMD_ReadSectorOOB|
	IMPORT	|FMD_ReadSector|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T47257| DCD	|$LN35@DumpFlash|
	DCD	0xc000fa05

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15DAMPJCDE@?$AA?$CF?$AAc?$AA?$AA@| DCB "%", 0x0, "c", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@| DCB " ", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@FHJLFHFE@?$AA?5?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AA@| DCB " ", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@CKIPGKFF@?$AA?$CF?$AA0?$AA4?$AAx?$AA?5?$AA?$AA@| DCB "%", 0x0, "0"
	DCB	0x0, "4", 0x0, "x", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@NEKLJOFD@?$AAR?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA1?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAO?$AAE?$AAM?$AAR?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AA0?$AA2@| DCB "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "r", 0x0, "v", 0x0, "e"
	DCB	0x0, "d", 0x0, "1", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, " ", 0x0, "O", 0x0, "E", 0x0, "M"
	DCB	0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "r", 0x0, "v"
	DCB	0x0, "e", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "x", 0x0, " ", 0x0, "B", 0x0, "a", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x"
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "r"
	DCB	0x0, "v", 0x0, "e", 0x0, "d", 0x0, "2", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "0", 0x0, "4", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@JNIBIIAB@?$AA?$AN?$AA?6?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "("
	DCB	0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@NODDJIFB@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "O", 0x0, "o", 0x0, "p", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OOAFHGFN@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "O", 0x0, "o", 0x0, "p", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, "o", 0x0, " ", 0x0, "b", 0x0, "i"
	DCB	0x0, "g", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "n", 0x0, "u", 0x0, "m"
	DCB	0x0, "b", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@KCBMIPD@?$AA?$AN?$AA?6?$AA?5?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?3?$AA?5?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "N", 0x0, "u", 0x0, "m"
	DCB	0x0, "b", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@IJKIFPEH@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AAl?$AAa?$AAr?$AAg?$AAe?$AAr?$AA?5?$AAt?$AAh?$AAa?$AAn?$AA?5?$AAm@| DCB " "
	DCB	0x0, "O", 0x0, "o", 0x0, "p", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "l", 0x0, "a", 0x0, "r", 0x0, "g", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "t", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, " "
	DCB	0x0, "m", 0x0, "y", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "f"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.xdata|, DATA
|$T47253| DCD	0xffffffd0
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T47253|

  00008		 |DumpFlash| PROC

; 531  : {

  00008		 |$LN35@DumpFlash|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0001	 stmdb       sp!, {r0}
  00010	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00014	e59fc3d0	 ldr         r12, [pc, #0x3D0]
  00018	e08dd00c	 add         sp, sp, r12
  0001c		 |$M47254|
  0001c	e59f33c4	 ldr         r3, [pc, #0x3C4]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d3c0c	 str         r3, [sp, #0xC0C]

; 532  :     HANDLE hFMD = NULL;

  00028	e3a03000	 mov         r3, #0
  0002c	e58d33f8	 str         r3, [sp, #0x3F8]

; 533  :     PCI_REG_INFO regInfo;
; 534  :     FlashInfo flashInfo;
; 535  :     SectorInfo sectorInfo;
; 536  :     SECTOR_ADDR sector;
; 537  :     WCHAR szInputLine[16];
; 538  :     UINT8 buffer[2048], pOob[64];
; 539  :     UINT32 i, j;
; 540  : 
; 541  :     UNREFERENCED_PARAMETER(pMenu);
; 542  : 
; 543  : 
; 544  :     // Open FMD
; 545  :     regInfo.MemBase.Reg[0] = g_ulFlashBase;

  00030	e59f33ac	 ldr         r3, [pc, #0x3AC]
  00034	e5933000	 ldr         r3, [r3]
  00038	e58d3388	 str         r3, [sp, #0x388]

; 546  :     hFMD = FMD_Init(NULL, &regInfo, NULL);

  0003c	e3a02000	 mov         r2, #0
  00040	e28d1078	 add         r1, sp, #0x78
  00044	e3a00000	 mov         r0, #0
  00048	eb000000	 bl          FMD_Init
  0004c	e58d0c14	 str         r0, [sp, #0xC14]
  00050	e59d3c14	 ldr         r3, [sp, #0xC14]
  00054	e58d33f8	 str         r3, [sp, #0x3F8]

; 547  :     if (hFMD == NULL) 

  00058	e59d33f8	 ldr         r3, [sp, #0x3F8]
  0005c	e3530000	 cmp         r3, #0
  00060	1a000002	 bne         |$LN27@DumpFlash|

; 548  :         {
; 549  :         OALLog(L" Oops, can't open FMD driver\r\n");

  00064	e59f0374	 ldr         r0, [pc, #0x374]
  00068	eb000000	 bl          NKDbgPrintfW

; 550  :         goto cleanUp;

  0006c	ea0000c2	 b           |$cleanUp$46941|
  00070		 |$LN27@DumpFlash|

; 551  :         }
; 552  : 
; 553  :     if (!FMD_GetInfo(&flashInfo)) 

  00070	e28d0044	 add         r0, sp, #0x44
  00074	eb000000	 bl          FMD_GetInfo
  00078	e58d0c18	 str         r0, [sp, #0xC18]
  0007c	e59d3c18	 ldr         r3, [sp, #0xC18]
  00080	e3530000	 cmp         r3, #0
  00084	1a000002	 bne         |$LN26@DumpFlash|

; 554  :         {
; 555  :         OALLog(L" Oops, can't get flash geometry info\r\n");

  00088	e59f034c	 ldr         r0, [pc, #0x34C]
  0008c	eb000000	 bl          NKDbgPrintfW

; 556  :         goto cleanUp;

  00090	ea0000b9	 b           |$cleanUp$46941|
  00094		 |$LN26@DumpFlash|

; 557  :         }
; 558  : 
; 559  :     if (flashInfo.wDataBytesPerSector > sizeof(buffer)) 

  00094	e1dd35b2	 ldrh        r3, [sp, #0x52]
  00098	e3530b02	 cmp         r3, #2, 22
  0009c	9a000002	 bls         |$LN25@DumpFlash|

; 560  :         {
; 561  :         OALLog(L" Oops, sector size larger than my buffer\r\n");

  000a0	e59f0330	 ldr         r0, [pc, #0x330]
  000a4	eb000000	 bl          NKDbgPrintfW

; 562  :         goto cleanUp;

  000a8	ea0000b3	 b           |$cleanUp$46941|
  000ac		 |$LN25@DumpFlash|
  000ac		 |$LN32@DumpFlash|
  000ac		 |$LN31@DumpFlash|
  000ac		 |$LN30@DumpFlash|
  000ac		 |$LN24@DumpFlash|

; 563  :         }
; 564  : 
; 565  :         for(;;)
; 566  :         {
; 567  : 
; 568  :         OALLog(L"\r\n Sector Number: ");

  000ac	e59f0320	 ldr         r0, [pc, #0x320]
  000b0	eb000000	 bl          NKDbgPrintfW

; 569  : 
; 570  :         if (OALBLMenuReadLine(szInputLine, dimof(szInputLine)) == 0) 

  000b4	e3a01010	 mov         r1, #0x10
  000b8	e28d0058	 add         r0, sp, #0x58
  000bc	eb000000	 bl          OALBLMenuReadLine
  000c0	e58d0c1c	 str         r0, [sp, #0xC1C]
  000c4	e59d3c1c	 ldr         r3, [sp, #0xC1C]
  000c8	e3530000	 cmp         r3, #0
  000cc	1a000000	 bne         |$LN22@DumpFlash|

; 571  :             {
; 572  :             break;

  000d0	ea0000a9	 b           |$LN23@DumpFlash|
  000d4		 |$LN22@DumpFlash|

; 573  :             }
; 574  : 
; 575  :         // Get sector number
; 576  :         sector = OALStringToUINT32(szInputLine);

  000d4	e28d0058	 add         r0, sp, #0x58
  000d8	eb000000	 bl          OALStringToUINT32
  000dc	e58d0c20	 str         r0, [sp, #0xC20]
  000e0	e59d3c20	 ldr         r3, [sp, #0xC20]
  000e4	e58d33fc	 str         r3, [sp, #0x3FC]

; 577  : 
; 578  :         // Check sector number
; 579  :         if (sector > flashInfo.dwNumBlocks * flashInfo.wSectorsPerBlock) 

  000e8	e1dd25b0	 ldrh        r2, [sp, #0x50]
  000ec	e59d3048	 ldr         r3, [sp, #0x48]
  000f0	e0020293	 mul         r2, r3, r2
  000f4	e59d33fc	 ldr         r3, [sp, #0x3FC]
  000f8	e1530002	 cmp         r3, r2
  000fc	9a000002	 bls         |$LN21@DumpFlash|

; 580  :             {
; 581  :             OALLog(L" Oops, too big sector number\r\n");

  00100	e59f02c8	 ldr         r0, [pc, #0x2C8]
  00104	eb000000	 bl          NKDbgPrintfW

; 582  :             continue;

  00108	eaffffe7	 b           |$LN24@DumpFlash|
  0010c		 |$LN21@DumpFlash|

; 583  :             }
; 584  : 
; 585  :         if (!FMD_ReadSector(sector, buffer, &sectorInfo, 1)) 

  0010c	e3a03001	 mov         r3, #1
  00110	e28d2b03	 add         r2, sp, #3, 22
  00114	e28d1b01	 add         r1, sp, #1, 22
  00118	e59d03fc	 ldr         r0, [sp, #0x3FC]
  0011c	eb000000	 bl          FMD_ReadSector
  00120	e58d0c24	 str         r0, [sp, #0xC24]
  00124	e59d3c24	 ldr         r3, [sp, #0xC24]
  00128	e3530000	 cmp         r3, #0
  0012c	1a000002	 bne         |$LN20@DumpFlash|

; 586  :             {
; 587  :             OALLog(L" Oops, sector read failed\r\n");

  00130	e59f0280	 ldr         r0, [pc, #0x280]
  00134	eb000000	 bl          NKDbgPrintfW

; 588  :             continue;

  00138	eaffffdb	 b           |$LN30@DumpFlash|
  0013c		 |$LN20@DumpFlash|

; 589  :             }
; 590  : 
; 591  :         OALLog(
; 592  :             L"\r\nSector %d (sector %d in block %d)\r\n", sector,
; 593  :             sector%flashInfo.wSectorsPerBlock, sector/flashInfo.wSectorsPerBlock
; 594  :         );

  0013c	e1dd05b0	 ldrh        r0, [sp, #0x50]
  00140	e59d13fc	 ldr         r1, [sp, #0x3FC]
  00144	eb000000	 bl          __rt_udiv
  00148	e1a04000	 mov         r4, r0
  0014c	e1dd05b0	 ldrh        r0, [sp, #0x50]
  00150	e59d13fc	 ldr         r1, [sp, #0x3FC]
  00154	eb000000	 bl          __rt_udiv
  00158	e1a02001	 mov         r2, r1
  0015c	e59d13fc	 ldr         r1, [sp, #0x3FC]
  00160	e59f0264	 ldr         r0, [pc, #0x264]
  00164	e1a03004	 mov         r3, r4
  00168	eb000000	 bl          NKDbgPrintfW

; 595  :         OALLog(
; 596  :             L"Reserved1: %08x OEMReserved: %02x Bad: %02x Reserved2: %04x\r\n",
; 597  :             sectorInfo.dwReserved1, sectorInfo.bOEMReserved,
; 598  :             sectorInfo.bBadBlock, sectorInfo.wReserved2
; 599  :         );

  0016c	e28d3b03	 add         r3, sp, #3, 22
  00170	e1d330b6	 ldrh        r3, [r3, #6]
  00174	e58d3000	 str         r3, [sp]
  00178	e5dd3c05	 ldrb        r3, [sp, #0xC05]
  0017c	e5dd2c04	 ldrb        r2, [sp, #0xC04]
  00180	e59d1c00	 ldr         r1, [sp, #0xC00]
  00184	e59f023c	 ldr         r0, [pc, #0x23C]
  00188	eb000000	 bl          NKDbgPrintfW

; 600  : 
; 601  :         for (i = 0; i < flashInfo.wDataBytesPerSector; i += 16) 

  0018c	e3a03000	 mov         r3, #0
  00190	e58d3054	 str         r3, [sp, #0x54]
  00194	ea000002	 b           |$LN19@DumpFlash|
  00198		 |$LN18@DumpFlash|
  00198	e59d3054	 ldr         r3, [sp, #0x54]
  0019c	e2833010	 add         r3, r3, #0x10
  001a0	e58d3054	 str         r3, [sp, #0x54]
  001a4		 |$LN19@DumpFlash|
  001a4	e1dd25b2	 ldrh        r2, [sp, #0x52]
  001a8	e59d3054	 ldr         r3, [sp, #0x54]
  001ac	e1530002	 cmp         r3, r2
  001b0	2a000042	 bcs         |$LN17@DumpFlash|

; 602  :             {
; 603  :             OALLog(L"%04x ", i);

  001b4	e59d1054	 ldr         r1, [sp, #0x54]
  001b8	e59f01f4	 ldr         r0, [pc, #0x1F4]
  001bc	eb000000	 bl          NKDbgPrintfW

; 604  :             for (j = i; j < i + 16 && j < flashInfo.wDataBytesPerSector; j++) 

  001c0	e59d3054	 ldr         r3, [sp, #0x54]
  001c4	e58d3c08	 str         r3, [sp, #0xC08]
  001c8	ea000002	 b           |$LN16@DumpFlash|
  001cc		 |$LN15@DumpFlash|
  001cc	e59d3c08	 ldr         r3, [sp, #0xC08]
  001d0	e2833001	 add         r3, r3, #1
  001d4	e58d3c08	 str         r3, [sp, #0xC08]
  001d8		 |$LN16@DumpFlash|
  001d8	e59d3054	 ldr         r3, [sp, #0x54]
  001dc	e2832010	 add         r2, r3, #0x10
  001e0	e59d3c08	 ldr         r3, [sp, #0xC08]
  001e4	e1530002	 cmp         r3, r2
  001e8	2a00000a	 bcs         |$LN14@DumpFlash|
  001ec	e1dd25b2	 ldrh        r2, [sp, #0x52]
  001f0	e59d3c08	 ldr         r3, [sp, #0xC08]
  001f4	e1530002	 cmp         r3, r2
  001f8	2a000006	 bcs         |$LN14@DumpFlash|

; 605  :                 {
; 606  :                 OALLog(L" %02x", buffer[j]);

  001fc	e28d2b01	 add         r2, sp, #1, 22
  00200	e59d3c08	 ldr         r3, [sp, #0xC08]
  00204	e0823003	 add         r3, r2, r3
  00208	e5d31000	 ldrb        r1, [r3]
  0020c	e59f019c	 ldr         r0, [pc, #0x19C]
  00210	eb000000	 bl          NKDbgPrintfW

; 607  :                 }

  00214	eaffffec	 b           |$LN15@DumpFlash|
  00218		 |$LN14@DumpFlash|

; 608  :             OALLog(L"  ");

  00218	e59f01a4	 ldr         r0, [pc, #0x1A4]
  0021c	eb000000	 bl          NKDbgPrintfW

; 609  :             for (j = i; j < i + 16 && j < flashInfo.wDataBytesPerSector; j++) 

  00220	e59d3054	 ldr         r3, [sp, #0x54]
  00224	e58d3c08	 str         r3, [sp, #0xC08]
  00228	ea000002	 b           |$LN13@DumpFlash|
  0022c		 |$LN12@DumpFlash|
  0022c	e59d3c08	 ldr         r3, [sp, #0xC08]
  00230	e2833001	 add         r3, r3, #1
  00234	e58d3c08	 str         r3, [sp, #0xC08]
  00238		 |$LN13@DumpFlash|
  00238	e59d3054	 ldr         r3, [sp, #0x54]
  0023c	e2832010	 add         r2, r3, #0x10
  00240	e59d3c08	 ldr         r3, [sp, #0xC08]
  00244	e1530002	 cmp         r3, r2
  00248	2a000019	 bcs         |$LN11@DumpFlash|
  0024c	e1dd25b2	 ldrh        r2, [sp, #0x52]
  00250	e59d3c08	 ldr         r3, [sp, #0xC08]
  00254	e1530002	 cmp         r3, r2
  00258	2a000015	 bcs         |$LN11@DumpFlash|

; 610  :                 {
; 611  :                 if (buffer[j] >= ' ' && buffer[j] < 127) 

  0025c	e28d2b01	 add         r2, sp, #1, 22
  00260	e59d3c08	 ldr         r3, [sp, #0xC08]
  00264	e0823003	 add         r3, r2, r3
  00268	e5d33000	 ldrb        r3, [r3]
  0026c	e3530020	 cmp         r3, #0x20
  00270	ba00000c	 blt         |$LN10@DumpFlash|
  00274	e28d2b01	 add         r2, sp, #1, 22
  00278	e59d3c08	 ldr         r3, [sp, #0xC08]
  0027c	e0823003	 add         r3, r2, r3
  00280	e5d33000	 ldrb        r3, [r3]
  00284	e353007f	 cmp         r3, #0x7F
  00288	aa000006	 bge         |$LN10@DumpFlash|

; 612  :                     {
; 613  :                     OALLog(L"%c", buffer[j]);

  0028c	e28d2b01	 add         r2, sp, #1, 22
  00290	e59d3c08	 ldr         r3, [sp, #0xC08]
  00294	e0823003	 add         r3, r2, r3
  00298	e5d31000	 ldrb        r1, [r3]
  0029c	e59f011c	 ldr         r0, [pc, #0x11C]
  002a0	eb000000	 bl          NKDbgPrintfW

; 614  :                     } 
; 615  :                 else 

  002a4	ea000001	 b           |$LN9@DumpFlash|
  002a8		 |$LN10@DumpFlash|

; 616  :                     {
; 617  :                     OALLog(L".");

  002a8	e59f010c	 ldr         r0, [pc, #0x10C]
  002ac	eb000000	 bl          NKDbgPrintfW
  002b0		 |$LN9@DumpFlash|

; 618  :                     }
; 619  :                 }

  002b0	eaffffdd	 b           |$LN12@DumpFlash|
  002b4		 |$LN11@DumpFlash|

; 620  :             OALLog(L"\r\n");

  002b4	e59f00f0	 ldr         r0, [pc, #0xF0]
  002b8	eb000000	 bl          NKDbgPrintfW

; 621  :             }

  002bc	eaffffb5	 b           |$LN18@DumpFlash|
  002c0		 |$LN17@DumpFlash|

; 622  : 	//dump OOB data
; 623  :         if (!FMD_ReadSectorOOB(sector, pOob)) 

  002c0	e28d1004	 add         r1, sp, #4
  002c4	e59d03fc	 ldr         r0, [sp, #0x3FC]
  002c8	eb000000	 bl          FMD_ReadSectorOOB
  002cc	e58d0c28	 str         r0, [sp, #0xC28]
  002d0	e59d3c28	 ldr         r3, [sp, #0xC28]
  002d4	e3530000	 cmp         r3, #0
  002d8	1a000002	 bne         |$LN8@DumpFlash|

; 624  :             {
; 625  :             OALLog(L" Oops, sector read failed\r\n");

  002dc	e59f00d4	 ldr         r0, [pc, #0xD4]
  002e0	eb000000	 bl          NKDbgPrintfW

; 626  :             continue;

  002e4	eaffff70	 b           |$LN31@DumpFlash|
  002e8		 |$LN8@DumpFlash|

; 627  :             }
; 628  :         for (i = 0; i < 64; i += 16) 

  002e8	e3a03000	 mov         r3, #0
  002ec	e58d3054	 str         r3, [sp, #0x54]
  002f0	ea000002	 b           |$LN7@DumpFlash|
  002f4		 |$LN6@DumpFlash|
  002f4	e59d3054	 ldr         r3, [sp, #0x54]
  002f8	e2833010	 add         r3, r3, #0x10
  002fc	e58d3054	 str         r3, [sp, #0x54]
  00300		 |$LN7@DumpFlash|
  00300	e59d3054	 ldr         r3, [sp, #0x54]
  00304	e3530040	 cmp         r3, #0x40
  00308	2a00001a	 bcs         |$LN5@DumpFlash|

; 629  :             {
; 630  :             OALLog(L"%04x ", i);

  0030c	e59d1054	 ldr         r1, [sp, #0x54]
  00310	e59f009c	 ldr         r0, [pc, #0x9C]
  00314	eb000000	 bl          NKDbgPrintfW

; 631  :             for (j = i; j < i + 16 && j < 64; j++) 

  00318	e59d3054	 ldr         r3, [sp, #0x54]
  0031c	e58d3c08	 str         r3, [sp, #0xC08]
  00320	ea000002	 b           |$LN4@DumpFlash|
  00324		 |$LN3@DumpFlash|
  00324	e59d3c08	 ldr         r3, [sp, #0xC08]
  00328	e2833001	 add         r3, r3, #1
  0032c	e58d3c08	 str         r3, [sp, #0xC08]
  00330		 |$LN4@DumpFlash|
  00330	e59d3054	 ldr         r3, [sp, #0x54]
  00334	e2832010	 add         r2, r3, #0x10
  00338	e59d3c08	 ldr         r3, [sp, #0xC08]
  0033c	e1530002	 cmp         r3, r2
  00340	2a000009	 bcs         |$LN2@DumpFlash|
  00344	e59d3c08	 ldr         r3, [sp, #0xC08]
  00348	e3530040	 cmp         r3, #0x40
  0034c	2a000006	 bcs         |$LN2@DumpFlash|

; 632  :                 {
; 633  :                 OALLog(L" %02x", pOob[j]);

  00350	e28d2004	 add         r2, sp, #4
  00354	e59d3c08	 ldr         r3, [sp, #0xC08]
  00358	e0823003	 add         r3, r2, r3
  0035c	e5d31000	 ldrb        r1, [r3]
  00360	e59f0048	 ldr         r0, [pc, #0x48]
  00364	eb000000	 bl          NKDbgPrintfW

; 634  :                 }

  00368	eaffffed	 b           |$LN3@DumpFlash|
  0036c		 |$LN2@DumpFlash|

; 635  :                 
; 636  :             OALLog(L"\r\n");

  0036c	e59f0038	 ldr         r0, [pc, #0x38]
  00370	eb000000	 bl          NKDbgPrintfW

; 637  :             }

  00374	eaffffde	 b           |$LN6@DumpFlash|
  00378		 |$LN5@DumpFlash|

; 638  : 
; 639  :         }

  00378	eaffff4b	 b           |$LN32@DumpFlash|
  0037c		 |$LN23@DumpFlash|
  0037c		 |$cleanUp$46941|

; 640  : 
; 641  : cleanUp:
; 642  : 
; 643  :     if (hFMD != NULL) 

  0037c	e59d33f8	 ldr         r3, [sp, #0x3F8]
  00380	e3530000	 cmp         r3, #0
  00384	0a000001	 beq         |$LN1@DumpFlash|

; 644  :         {
; 645  :         FMD_Deinit(hFMD);

  00388	e59d03f8	 ldr         r0, [sp, #0x3F8]
  0038c	eb000000	 bl          FMD_Deinit
  00390		 |$LN1@DumpFlash|

; 531  : {

  00390	e59d0c0c	 ldr         r0, [sp, #0xC0C]
  00394	eb000000	 bl          __security_check_cookie

; 646  :         }
; 647  : 
; 648  :     return;
; 649  : }

  00398	e3a0cb03	 mov         r12, #3, 22
  0039c	e38cc02c	 orr         r12, r12, #0x2C
  003a0	e08dd00c	 add         sp, sp, r12
  003a4	e89d6010	 ldmia       sp, {r4, sp, lr}
  003a8	e12fff1e	 bx          lr
  003ac		 |$LN36@DumpFlash|
  003ac		 |$LN37@DumpFlash|
  003ac	00000000	 DCD         |??_C@_15JNBOKNOG@?$AA?$AN?$AA?6?$AA?$AA@|
  003b0		 |$LN38@DumpFlash|
  003b0	00000000	 DCD         |??_C@_1M@FHJLFHFE@?$AA?5?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AA@|
  003b4		 |$LN39@DumpFlash|
  003b4	00000000	 DCD         |??_C@_1M@CKIPGKFF@?$AA?$CF?$AA0?$AA4?$AAx?$AA?5?$AA?$AA@|
  003b8		 |$LN40@DumpFlash|
  003b8	00000000	 DCD         |??_C@_1DI@NODDJIFB@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  003bc		 |$LN41@DumpFlash|
  003bc	00000000	 DCD         |??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@|
  003c0		 |$LN42@DumpFlash|
  003c0	00000000	 DCD         |??_C@_15DAMPJCDE@?$AA?$CF?$AAc?$AA?$AA@|
  003c4		 |$LN43@DumpFlash|
  003c4	00000000	 DCD         |??_C@_15OJKDPEFE@?$AA?5?$AA?5?$AA?$AA@|
  003c8		 |$LN44@DumpFlash|
  003c8	00000000	 DCD         |??_C@_1HM@NEKLJOFD@?$AAR?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA1?$AA?3?$AA?5?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAO?$AAE?$AAM?$AAR?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AA0?$AA2@|
  003cc		 |$LN45@DumpFlash|
  003cc	00000000	 DCD         |??_C@_1EM@JNIBIIAB@?$AA?$AN?$AA?6?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?$CI?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5@|
  003d0		 |$LN46@DumpFlash|
  003d0	00000000	 DCD         |??_C@_1DO@OOAFHGFN@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  003d4		 |$LN47@DumpFlash|
  003d4	00000000	 DCD         |??_C@_1CG@KCBMIPD@?$AA?$AN?$AA?6?$AA?5?$AAS?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?3?$AA?5?$AA?$AA@|
  003d8		 |$LN48@DumpFlash|
  003d8	00000000	 DCD         |??_C@_1FG@IJKIFPEH@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAs?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AAl?$AAa?$AAr?$AAg?$AAe?$AAr?$AA?5?$AAt?$AAh?$AAa?$AAn?$AA?5?$AAm@|
  003dc		 |$LN49@DumpFlash|
  003dc	00000000	 DCD         |??_C@_1EO@FMHOCAJM@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAg?$AAe?$AAo?$AAm?$AAe?$AAt?$AAr?$AAy?$AA?5@|
  003e0		 |$LN50@DumpFlash|
  003e0	00000000	 DCD         |??_C@_1DO@ECBGAOKH@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAF?$AAM?$AAD?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  003e4		 |$LN51@DumpFlash|
  003e4	00000000	 DCD         |g_ulFlashBase|
  003e8		 |$LN52@DumpFlash|
  003e8	00000000	 DCD         |__security_cookie|
  003ec		 |$LN53@DumpFlash|
  003ec	fffff3d4	 DCD         0xfffff3d4
  003f0		 |$M47255|

			 ENDP  ; |DumpFlash|

	EXPORT	|??_C@_1BE@MFBEDOBI@?$AA?$AN?$AA?6?$AA?5?$AAD?$AAo?$AAn?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@EPPKNNOD@?$AA?$AN?$AA?6?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]

  00000			 AREA	 |.pdata|, PDATA
|$T47285| DCD	|$LN10@SetBadBloc|
	DCD	0xc0004e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@MFBEDOBI@?$AA?$AN?$AA?6?$AA?5?$AAD?$AAo?$AAn?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@EPPKNNOD@?$AA?$AN?$AA?6?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?3?$AA?5?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, " ", 0x0, "B", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "N", 0x0, "u", 0x0, "m", 0x0, "b"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T47281| DCD	0xffffffe0
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T47281|

  00008		 |SetBadBlock| PROC

; 654  : {

  00008		 |$LN10@SetBadBloc|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0001	 stmdb       sp!, {r0}
  00010	e92d5000	 stmdb       sp!, {r12, lr}
  00014	e24ddff3	 sub         sp, sp, #0xF3, 30
  00018		 |$M47282|
  00018	e59f311c	 ldr         r3, [pc, #0x11C]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d33b8	 str         r3, [sp, #0x3B8]

; 655  :     HANDLE hFMD = NULL;

  00024	e3a03000	 mov         r3, #0
  00028	e58d33b0	 str         r3, [sp, #0x3B0]

; 656  :     PCI_REG_INFO regInfo;
; 657  :     FlashInfo flashInfo;
; 658  :     BLOCK_ID blockId;
; 659  :     WCHAR szInputLine[16];
; 660  : 
; 661  :     UNREFERENCED_PARAMETER(pMenu);
; 662  : 
; 663  :     // Open FMD
; 664  :     regInfo.MemBase.Reg[0] = g_ulFlashBase;

  0002c	e59f3104	 ldr         r3, [pc, #0x104]
  00030	e5933000	 ldr         r3, [r3]
  00034	e58d3340	 str         r3, [sp, #0x340]

; 665  :     hFMD = FMD_Init(NULL, &regInfo, NULL);

  00038	e3a02000	 mov         r2, #0
  0003c	e28d1030	 add         r1, sp, #0x30
  00040	e3a00000	 mov         r0, #0
  00044	eb000000	 bl          FMD_Init
  00048	e58d03bc	 str         r0, [sp, #0x3BC]
  0004c	e59d33bc	 ldr         r3, [sp, #0x3BC]
  00050	e58d33b0	 str         r3, [sp, #0x3B0]

; 666  :     if (hFMD == NULL) 

  00054	e59d33b0	 ldr         r3, [sp, #0x3B0]
  00058	e3530000	 cmp         r3, #0
  0005c	1a000002	 bne         |$LN5@SetBadBloc|

; 667  :         {
; 668  :         OALLog(L" Oops, can't open FMD driver\r\n");

  00060	e59f00cc	 ldr         r0, [pc, #0xCC]
  00064	eb000000	 bl          NKDbgPrintfW

; 669  :         goto cleanUp;

  00068	ea000023	 b           |$cleanUp$46993|
  0006c		 |$LN5@SetBadBloc|

; 670  :         }
; 671  : 
; 672  :     if (!FMD_GetInfo(&flashInfo)) 

  0006c	e28d0000	 add         r0, sp, #0
  00070	eb000000	 bl          FMD_GetInfo
  00074	e58d03c0	 str         r0, [sp, #0x3C0]
  00078	e59d33c0	 ldr         r3, [sp, #0x3C0]
  0007c	e3530000	 cmp         r3, #0
  00080	1a000002	 bne         |$LN4@SetBadBloc|

; 673  :         {
; 674  :         OALLog(L" Oops, can't get flash geometry info\r\n");

  00084	e59f00a4	 ldr         r0, [pc, #0xA4]
  00088	eb000000	 bl          NKDbgPrintfW

; 675  :         goto cleanUp;

  0008c	ea00001a	 b           |$cleanUp$46993|
  00090		 |$LN4@SetBadBloc|

; 676  :         }
; 677  : 
; 678  :     OALLog(L"\r\n Block Number: ");

  00090	e59f0094	 ldr         r0, [pc, #0x94]
  00094	eb000000	 bl          NKDbgPrintfW

; 679  : 
; 680  :     if (OALBLMenuReadLine(szInputLine, dimof(szInputLine)) == 0) 

  00098	e3a01010	 mov         r1, #0x10
  0009c	e28d0010	 add         r0, sp, #0x10
  000a0	eb000000	 bl          OALBLMenuReadLine
  000a4	e58d03c4	 str         r0, [sp, #0x3C4]
  000a8	e59d33c4	 ldr         r3, [sp, #0x3C4]
  000ac	e3530000	 cmp         r3, #0
  000b0	1a000000	 bne         |$LN3@SetBadBloc|

; 681  :         {
; 682  :         goto cleanUp;

  000b4	ea000010	 b           |$cleanUp$46993|
  000b8		 |$LN3@SetBadBloc|

; 683  :         }
; 684  : 
; 685  :     // Get sector number
; 686  :     blockId = OALStringToUINT32(szInputLine);

  000b8	e28d0010	 add         r0, sp, #0x10
  000bc	eb000000	 bl          OALStringToUINT32
  000c0	e58d03c8	 str         r0, [sp, #0x3C8]
  000c4	e59d33c8	 ldr         r3, [sp, #0x3C8]
  000c8	e58d33b4	 str         r3, [sp, #0x3B4]

; 687  : 
; 688  :     // Check sector number
; 689  :     if (blockId >= flashInfo.dwNumBlocks) 

  000cc	e59d23b4	 ldr         r2, [sp, #0x3B4]
  000d0	e59d3004	 ldr         r3, [sp, #4]
  000d4	e1520003	 cmp         r2, r3
  000d8	3a000002	 bcc         |$LN2@SetBadBloc|

; 690  :         {
; 691  :         OALLog(L" Oops, too big block number\r\n");

  000dc	e59f0044	 ldr         r0, [pc, #0x44]
  000e0	eb000000	 bl          NKDbgPrintfW

; 692  :         goto cleanUp;

  000e4	ea000004	 b           |$cleanUp$46993|
  000e8		 |$LN2@SetBadBloc|

; 693  :         }
; 694  : 
; 695  :     FMD_SetBlockStatus(blockId, BLOCK_STATUS_BAD);

  000e8	e3a01002	 mov         r1, #2
  000ec	e59d03b4	 ldr         r0, [sp, #0x3B4]
  000f0	eb000000	 bl          FMD_SetBlockStatus

; 696  : 
; 697  :     OALLog(L"\r\n Done\r\n");

  000f4	e59f0028	 ldr         r0, [pc, #0x28]
  000f8	eb000000	 bl          NKDbgPrintfW
  000fc		 |$cleanUp$46993|

; 698  : 
; 699  : cleanUp:
; 700  :     if (hFMD != NULL) 

  000fc	e59d33b0	 ldr         r3, [sp, #0x3B0]
  00100	e3530000	 cmp         r3, #0
  00104	0a000001	 beq         |$LN1@SetBadBloc|

; 701  :         {
; 702  :         FMD_Deinit(hFMD);

  00108	e59d03b0	 ldr         r0, [sp, #0x3B0]
  0010c	eb000000	 bl          FMD_Deinit
  00110		 |$LN1@SetBadBloc|

; 654  : {

  00110	e59d03b8	 ldr         r0, [sp, #0x3B8]
  00114	eb000000	 bl          __security_check_cookie

; 703  :         }
; 704  : 
; 705  :     return;
; 706  : }

  00118	e28ddff3	 add         sp, sp, #0xF3, 30
  0011c	e89d6000	 ldmia       sp, {sp, lr}
  00120	e12fff1e	 bx          lr
  00124		 |$LN11@SetBadBloc|
  00124		 |$LN12@SetBadBloc|
  00124	00000000	 DCD         |??_C@_1BE@MFBEDOBI@?$AA?$AN?$AA?6?$AA?5?$AAD?$AAo?$AAn?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00128		 |$LN13@SetBadBloc|
  00128	00000000	 DCD         |??_C@_1DM@MPGKHCCK@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg?$AA?5?$AAb?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAn?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  0012c		 |$LN14@SetBadBloc|
  0012c	00000000	 DCD         |??_C@_1CE@EPPKNNOD@?$AA?$AN?$AA?6?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAN?$AAu?$AAm?$AAb?$AAe?$AAr?$AA?3?$AA?5?$AA?$AA@|
  00130		 |$LN15@SetBadBloc|
  00130	00000000	 DCD         |??_C@_1EO@FMHOCAJM@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAl?$AAa?$AAs?$AAh?$AA?5?$AAg?$AAe?$AAo?$AAm?$AAe?$AAt?$AAr?$AAy?$AA?5@|
  00134		 |$LN16@SetBadBloc|
  00134	00000000	 DCD         |??_C@_1DO@ECBGAOKH@?$AA?5?$AAO?$AAo?$AAp?$AAs?$AA?0?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAF?$AAM?$AAD?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00138		 |$LN17@SetBadBloc|
  00138	00000000	 DCD         |g_ulFlashBase|
  0013c		 |$LN18@SetBadBloc|
  0013c	00000000	 DCD         |__security_cookie|
  00140		 |$M47283|

			 ENDP  ; |SetBadBlock|

	EXPORT	|??_C@_1GC@JKKDFPCG@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AAu?$AAn?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe@| [ DATA ] ; `string'
	IMPORT	|BLConfigureFlashPartitions|

  00000			 AREA	 |.pdata|, PDATA
|$T47301| DCD	|$LN6@FormatFlas|
	DCD	0x40001e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@JKKDFPCG@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AAu?$AAn?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe@| DCB " "
	DCB	0x0, "D", 0x0, "o", 0x0, " ", 0x0, "y", 0x0, "o", 0x0, "u"
	DCB	0x0, " ", 0x0, "w", 0x0, "a", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "m", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "u", 0x0, "n"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "r", 0x0, "v"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "s", 0x0, " ", 0x0, "[", 0x0, "-"
	DCB	0x0, "/", 0x0, "y", 0x0, "]", 0x0, "?", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FormatFlash| PROC

; 711  : {

  00000		 |$LN6@FormatFlas|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M47298|

; 712  :     WCHAR key;
; 713  :     
; 714  :     UNREFERENCED_PARAMETER(pMenu);
; 715  : 
; 716  :     OALLog(L" Do you want to format unreserved blocks [-/y]? ");

  00010	e59f005c	 ldr         r0, [pc, #0x5C]
  00014	eb000000	 bl          NKDbgPrintfW

; 717  : 
; 718  :     // Get key
; 719  :     key = OALBLMenuReadKey(TRUE);

  00018	e3a00001	 mov         r0, #1
  0001c	eb000000	 bl          OALBLMenuReadKey
  00020	e1a03800	 mov         r3, r0, lsl #16
  00024	e1a03823	 mov         r3, r3, lsr #16
  00028	e1cd30b2	 strh        r3, [sp, #2]
  0002c	e1dd30b2	 ldrh        r3, [sp, #2]
  00030	e1cd30b0	 strh        r3, [sp]

; 720  :     OALLog(L"%c\r\n", key);

  00034	e1dd10b0	 ldrh        r1, [sp]
  00038	e59f0030	 ldr         r0, [pc, #0x30]
  0003c	eb000000	 bl          NKDbgPrintfW

; 721  : 
; 722  :     // Depending on result
; 723  :     if (key != L'y' && key != L'Y') goto cleanUp;

  00040	e1dd30b0	 ldrh        r3, [sp]
  00044	e3530079	 cmp         r3, #0x79
  00048	0a000003	 beq         |$LN1@FormatFlas|
  0004c	e1dd30b0	 ldrh        r3, [sp]
  00050	e3530059	 cmp         r3, #0x59
  00054	0a000000	 beq         |$LN1@FormatFlas|
  00058	ea000001	 b           |$cleanUp$47007|
  0005c		 |$LN1@FormatFlas|

; 724  : 
; 725  :     BLConfigureFlashPartitions(TRUE);

  0005c	e3a00001	 mov         r0, #1
  00060	eb000000	 bl          BLConfigureFlashPartitions
  00064		 |$cleanUp$47007|

; 726  :     
; 727  : cleanUp:    
; 728  :     
; 729  :     return;
; 730  : }

  00064	e28dd004	 add         sp, sp, #4
  00068	e89d6000	 ldmia       sp, {sp, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$LN7@FormatFlas|
  00070		 |$LN8@FormatFlas|
  00070	00000000	 DCD         |??_C@_19DIEGALPP@?$AA?$CF?$AAc?$AA?$AN?$AA?6?$AA?$AA@|
  00074		 |$LN9@FormatFlas|
  00074	00000000	 DCD         |??_C@_1GC@JKKDFPCG@?$AA?5?$AAD?$AAo?$AA?5?$AAy?$AAo?$AAu?$AA?5?$AAw?$AAa?$AAn?$AAt?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AAu?$AAn?$AAr?$AAe?$AAs?$AAe?$AAr?$AAv?$AAe@|
  00078		 |$M47299|

			 ENDP  ; |FormatFlash|

	EXPORT	|??_C@_1DM@NJFEAFBO@?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AAi?$AAs?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@FEBEDMFN@?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AAi?$AAs?$AA?5?$AAd?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@POGPJPIN@?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AA?$FL?$AAy?$AA?1?$AA?9?$AA?$FN?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@LIJCOJEF@?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AA?$FL?$AAy?$AA?1?$AA?9?$AA?$FN?$AA?3?$AA?5@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47311| DCD	|$LN11@EnableFlas|
	DCD	0x40003a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@NJFEAFBO@?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AAi?$AAs?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "N", 0x0, "K", 0x0, "."
	DCB	0x0, "b", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "s"
	DCB	0x0, " ", 0x0, "e", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FEBEDMFN@?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AAi?$AAs?$AA?5?$AAd?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "N", 0x0, "K", 0x0, "."
	DCB	0x0, "b", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "s"
	DCB	0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@POGPJPIN@?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AA?$FL?$AAy?$AA?1?$AA?9?$AA?$FN?$AA?3?$AA?5?$AA?$AA@| DCB " "
	DCB	0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "N", 0x0, "K"
	DCB	0x0, ".", 0x0, "b", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "["
	DCB	0x0, "y", 0x0, "/", 0x0, "-", 0x0, "]", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@LIJCOJEF@?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AA?$FL?$AAy?$AA?1?$AA?9?$AA?$FN?$AA?3?$AA?5@| DCB " "
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, " ", 0x0, "F", 0x0, "l", 0x0, "a", 0x0, "s"
	DCB	0x0, "h", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "N"
	DCB	0x0, "K", 0x0, ".", 0x0, "b", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "[", 0x0, "y", 0x0, "/", 0x0, "-", 0x0, "]", 0x0, ":"
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EnableFlashNK| PROC

; 733  : {

  00000		 |$LN11@EnableFlas|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M47308|

; 734  :     WCHAR key;
; 735  : 
; 736  :     UNREFERENCED_PARAMETER(pMenu);
; 737  :     if (g_bootCfg.flashNKFlags & ENABLE_FLASH_NK) {

  00010	e59f30bc	 ldr         r3, [pc, #0xBC]
  00014	e5933070	 ldr         r3, [r3, #0x70]
  00018	e3130001	 tst         r3, #1
  0001c	0a000002	 beq         |$LN6@EnableFlas|

; 738  :         OALLog(L" Disable Flashing NK.bin [y/-]: ");

  00020	e59f00bc	 ldr         r0, [pc, #0xBC]
  00024	eb000000	 bl          NKDbgPrintfW

; 739  :     } else {

  00028	ea000001	 b           |$LN5@EnableFlas|
  0002c		 |$LN6@EnableFlas|

; 740  :         OALLog(L" Enable Flashing NK.bin [y/-]: ");

  0002c	e59f00ac	 ldr         r0, [pc, #0xAC]
  00030	eb000000	 bl          NKDbgPrintfW
  00034		 |$LN5@EnableFlas|

; 741  :     }    
; 742  : 
; 743  :     // Get key
; 744  :     key = OALBLMenuReadKey(TRUE);

  00034	e3a00001	 mov         r0, #1
  00038	eb000000	 bl          OALBLMenuReadKey
  0003c	e1a03800	 mov         r3, r0, lsl #16
  00040	e1a03823	 mov         r3, r3, lsr #16
  00044	e1cd30b2	 strh        r3, [sp, #2]
  00048	e1dd30b2	 ldrh        r3, [sp, #2]
  0004c	e1cd30b0	 strh        r3, [sp]

; 745  :     OALLog(L"%c\r\n", key);

  00050	e1dd10b0	 ldrh        r1, [sp]
  00054	e59f0080	 ldr         r0, [pc, #0x80]
  00058	eb000000	 bl          NKDbgPrintfW

; 746  : 
; 747  :     if (key == L'y' || key == L'Y') {

  0005c	e1dd30b0	 ldrh        r3, [sp]
  00060	e3530079	 cmp         r3, #0x79
  00064	0a000002	 beq         |$LN3@EnableFlas|
  00068	e1dd30b0	 ldrh        r3, [sp]
  0006c	e3530059	 cmp         r3, #0x59
  00070	1a000013	 bne         |$LN4@EnableFlas|
  00074		 |$LN3@EnableFlas|

; 748  :         if (g_bootCfg.flashNKFlags & ENABLE_FLASH_NK) 

  00074	e59f3058	 ldr         r3, [pc, #0x58]
  00078	e5933070	 ldr         r3, [r3, #0x70]
  0007c	e3130001	 tst         r3, #1
  00080	0a000008	 beq         |$LN2@EnableFlas|

; 749  : 		{
; 750  :             g_bootCfg.flashNKFlags &= ~ENABLE_FLASH_NK;

  00084	e59f3048	 ldr         r3, [pc, #0x48]
  00088	e5932070	 ldr         r2, [r3, #0x70]
  0008c	e3e03001	 mvn         r3, #1
  00090	e0022003	 and         r2, r2, r3
  00094	e59f3038	 ldr         r3, [pc, #0x38]
  00098	e5832070	 str         r2, [r3, #0x70]

; 751  :             OALLog(L" Flashing NK.bin is disabled\r\n");

  0009c	e59f0034	 ldr         r0, [pc, #0x34]
  000a0	eb000000	 bl          NKDbgPrintfW

; 752  :         }
; 753  : 		else 

  000a4	ea000006	 b           |$LN1@EnableFlas|
  000a8		 |$LN2@EnableFlas|

; 754  : 		{
; 755  :             g_bootCfg.flashNKFlags |= ENABLE_FLASH_NK;

  000a8	e59f3024	 ldr         r3, [pc, #0x24]
  000ac	e5933070	 ldr         r3, [r3, #0x70]
  000b0	e3832001	 orr         r2, r3, #1
  000b4	e59f3018	 ldr         r3, [pc, #0x18]
  000b8	e5832070	 str         r2, [r3, #0x70]

; 756  :             OALLog(L" Flashing NK.bin is enabled\r\n");

  000bc	e59f000c	 ldr         r0, [pc, #0xC]
  000c0	eb000000	 bl          NKDbgPrintfW
  000c4		 |$LN1@EnableFlas|
  000c4		 |$LN4@EnableFlas|

; 757  :         }    
; 758  :     }
; 759  : 
; 760  : }

  000c4	e28dd004	 add         sp, sp, #4
  000c8	e89d6000	 ldmia       sp, {sp, lr}
  000cc	e12fff1e	 bx          lr
  000d0		 |$LN12@EnableFlas|
  000d0		 |$LN13@EnableFlas|
  000d0	00000000	 DCD         |??_C@_1DM@NJFEAFBO@?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AAi?$AAs?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  000d4		 |$LN14@EnableFlas|
  000d4	00000000	 DCD         |g_bootCfg|
  000d8		 |$LN15@EnableFlas|
  000d8	00000000	 DCD         |??_C@_1DO@FEBEDMFN@?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AAi?$AAs?$AA?5?$AAd?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  000dc		 |$LN16@EnableFlas|
  000dc	00000000	 DCD         |??_C@_19DIEGALPP@?$AA?$CF?$AAc?$AA?$AN?$AA?6?$AA?$AA@|
  000e0		 |$LN17@EnableFlas|
  000e0	00000000	 DCD         |??_C@_1EA@POGPJPIN@?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AA?$FL?$AAy?$AA?1?$AA?9?$AA?$FN?$AA?3?$AA?5?$AA?$AA@|
  000e4		 |$LN18@EnableFlas|
  000e4	00000000	 DCD         |??_C@_1EC@LIJCOJEF@?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAF?$AAl?$AAa?$AAs?$AAh?$AAi?$AAn?$AAg?$AA?5?$AAN?$AAK?$AA?4?$AAb?$AAi?$AAn?$AA?5?$AA?$FL?$AAy?$AA?1?$AA?9?$AA?$FN?$AA?3?$AA?5@|
  000e8		 |$M47309|

			 ENDP  ; |EnableFlashNK|

	EXPORT	|??_C@_1GE@EJGAKBM@?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?0?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@NLFNLNJI@?$AA?5?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$FL?$AA0?$AA?$CI?$AAH?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?5?$AA1?$AAb?$AAi?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1ME@KHCPMAFG@?$AA?5?$AAT?$AAh?$AAi?$AAs?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAi?$AAs?$AA?5?$AAu?$AAs?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa@| [ DATA ] ; `string'
	IMPORT	|g_ecctype|

  00000			 AREA	 |.pdata|, PDATA
|$T47325| DCD	|$LN8@SetECCType|
	DCD	0x40003304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@EJGAKBM@?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?0?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5@| DCB " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "E", 0x0, "C", 0x0, "C", 0x0, " "
	DCB	0x0, "m", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, ",", 0x0, " "
	DCB	0x0, "s", 0x0, "e", 0x0, "t", 0x0, " ", 0x0, "E", 0x0, "C"
	DCB	0x0, "C", 0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, " ", 0x0, "a", 0x0, "s", 0x0, " ", 0x0, "H", 0x0, "a"
	DCB	0x0, "m", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "1", 0x0, "b", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@NLFNLNJI@?$AA?5?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$FL?$AA0?$AA?$CI?$AAH?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?5?$AA1?$AAb?$AAi?$AAt@| DCB " "
	DCB	0x0, "S", 0x0, "e", 0x0, "l", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "E", 0x0, "C", 0x0, "C", 0x0, " ", 0x0, "m"
	DCB	0x0, "o", 0x0, "d", 0x0, "e", 0x0, " ", 0x0, "[", 0x0, "0"
	DCB	0x0, "(", 0x0, "H", 0x0, "a", 0x0, "m", 0x0, "m", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "1", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, ")", 0x0, "/", 0x0, "1", 0x0, "(", 0x0, "B"
	DCB	0x0, "C", 0x0, "H", 0x0, " ", 0x0, "4", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, ")", 0x0, "/", 0x0, "2", 0x0, "(", 0x0, "B"
	DCB	0x0, "C", 0x0, "H", 0x0, " ", 0x0, "8", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, ")", 0x0, "]", 0x0, ":", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1ME@KHCPMAFG@?$AA?5?$AAT?$AAh?$AAi?$AAs?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAi?$AAs?$AA?5?$AAu?$AAs?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa@| DCB " "
	DCB	0x0, "T", 0x0, "h", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "u", 0x0, "s"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "t", 0x0, "e", 0x0, "m", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "a", 0x0, "r", 0x0, "i", 0x0, "l", 0x0, "y", 0x0, " "
	DCB	0x0, "c", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "g", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "E", 0x0, "C", 0x0, "C"
	DCB	0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "N", 0x0, "K", 0x0, "."
	DCB	0x0, "b", 0x0, "i", 0x0, "n", 0x0, ",", 0x0, " ", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "t", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, " ", 0x0, "p", 0x0, "u", 0x0, "r", 0x0, "p"
	DCB	0x0, "o", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "o", 0x0, "n"
	DCB	0x0, "l", 0x0, "y", 0x0, "!", 0x0, " ", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetECCType| PROC

; 763  : {

  00000		 |$LN8@SetECCType|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M47322|

; 764  :     WCHAR key;
; 765  :     UNREFERENCED_PARAMETER(pMenu);
; 766  :     OALLog(L" This command is used to temporarily changing ECC mode in NK.bin, it is for test purpose only! \r\n");

  00010	e59f00b0	 ldr         r0, [pc, #0xB0]
  00014	eb000000	 bl          NKDbgPrintfW

; 767  :     OALLog(L" Select ECC mode [0(Hamming 1bit)/1(BCH 4bit)/2(BCH 8bit)]: ");

  00018	e59f00a4	 ldr         r0, [pc, #0xA4]
  0001c	eb000000	 bl          NKDbgPrintfW

; 768  : 
; 769  :     // Get key
; 770  :     key = OALBLMenuReadKey(TRUE);

  00020	e3a00001	 mov         r0, #1
  00024	eb000000	 bl          OALBLMenuReadKey
  00028	e1a03800	 mov         r3, r0, lsl #16
  0002c	e1a03823	 mov         r3, r3, lsr #16
  00030	e1cd30b2	 strh        r3, [sp, #2]
  00034	e1dd30b2	 ldrh        r3, [sp, #2]
  00038	e1cd30b0	 strh        r3, [sp]

; 771  :     OALLog(L"%c\r\n", key);

  0003c	e1dd10b0	 ldrh        r1, [sp]
  00040	e59f0078	 ldr         r0, [pc, #0x78]
  00044	eb000000	 bl          NKDbgPrintfW

; 772  : 
; 773  :     if (key == L'0' || key == L'1' || key == L'2')

  00048	e1dd30b0	 ldrh        r3, [sp]
  0004c	e3530030	 cmp         r3, #0x30
  00050	0a000005	 beq         |$LN2@SetECCType|
  00054	e1dd30b0	 ldrh        r3, [sp]
  00058	e3530031	 cmp         r3, #0x31
  0005c	0a000002	 beq         |$LN2@SetECCType|
  00060	e1dd30b0	 ldrh        r3, [sp]
  00064	e3530032	 cmp         r3, #0x32
  00068	1a000005	 bne         |$LN3@SetECCType|
  0006c		 |$LN2@SetECCType|

; 774  :     {
; 775  :         g_bootCfg.ECCtype = (UCHAR)(key - '0');

  0006c	e1dd30b0	 ldrh        r3, [sp]
  00070	e2433030	 sub         r3, r3, #0x30
  00074	e20320ff	 and         r2, r3, #0xFF
  00078	e59f3038	 ldr         r3, [pc, #0x38]
  0007c	e5c32074	 strb        r2, [r3, #0x74]

; 776  :     }
; 777  :     else 

  00080	ea000004	 b           |$LN1@SetECCType|
  00084		 |$LN3@SetECCType|

; 778  :     {
; 779  :         g_bootCfg.ECCtype = 0;

  00084	e59f202c	 ldr         r2, [pc, #0x2C]
  00088	e3a03000	 mov         r3, #0
  0008c	e5c23074	 strb        r3, [r2, #0x74]

; 780  :         OALLog(L" Invalid ECC mode, set ECC mode as Hamming 1bit\r\n");

  00090	e59f0024	 ldr         r0, [pc, #0x24]
  00094	eb000000	 bl          NKDbgPrintfW
  00098		 |$LN1@SetECCType|

; 781  :     }    
; 782  :     g_ecctype = g_bootCfg.ECCtype;

  00098	e59f3018	 ldr         r3, [pc, #0x18]
  0009c	e5d32074	 ldrb        r2, [r3, #0x74]
  000a0	e59f300c	 ldr         r3, [pc, #0xC]
  000a4	e5c32000	 strb        r2, [r3]

; 783  : 	
; 784  : }

  000a8	e28dd004	 add         sp, sp, #4
  000ac	e89d6000	 ldmia       sp, {sp, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$LN9@SetECCType|
  000b4		 |$LN10@SetECCType|
  000b4	00000000	 DCD         |g_ecctype|
  000b8		 |$LN11@SetECCType|
  000b8	00000000	 DCD         |g_bootCfg|
  000bc		 |$LN12@SetECCType|
  000bc	00000000	 DCD         |??_C@_1GE@EJGAKBM@?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?0?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5@|
  000c0		 |$LN13@SetECCType|
  000c0	00000000	 DCD         |??_C@_19DIEGALPP@?$AA?$CF?$AAc?$AA?$AN?$AA?6?$AA?$AA@|
  000c4		 |$LN14@SetECCType|
  000c4	00000000	 DCD         |??_C@_1HK@NLFNLNJI@?$AA?5?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AA?5?$AAE?$AAC?$AAC?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$FL?$AA0?$AA?$CI?$AAH?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?5?$AA1?$AAb?$AAi?$AAt@|
  000c8		 |$LN15@SetECCType|
  000c8	00000000	 DCD         |??_C@_1ME@KHCPMAFG@?$AA?5?$AAT?$AAh?$AAi?$AAs?$AA?5?$AAc?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AA?5?$AAi?$AAs?$AA?5?$AAu?$AAs?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAt?$AAe?$AAm?$AAp?$AAo?$AAr?$AAa@|
  000cc		 |$M47323|

			 ENDP  ; |SetECCType|

	END
