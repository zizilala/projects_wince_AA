; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\BOOTLOADER\EBOOT\main.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1CK@GNCLKLEF@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAI?$AAL?$AAE?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|g_kitlEthLan911x| [ DATA ]
	EXPORT	|g_kitlUsbRndis| [ DATA ]
	EXPORT	|g_kitlDevices| [ DATA ]
	EXPORT	|g_bootDevices| [ DATA ]
	EXPORT	|DefaultMacAddress| [ DATA ]
	EXPORT	|dwEbootECCtype| [ DATA ]
	EXPORT	|g_CPUFamily| [ DATA ]
	IMPORT	|RndisMulticastList|
	IMPORT	|RndisCurrentPacketFilter|
	IMPORT	|RndisDisableInts|
	IMPORT	|RndisEnableInts|
	IMPORT	|RndisEDbgGetFrame|
	IMPORT	|RndisEDbgSendFrame|
	IMPORT	|HostMiniInit|
	IMPORT	|LAN911XMulticastList|
	IMPORT	|LAN911XCurrentPacketFilter|
	IMPORT	|LAN911XDisableInts|
	IMPORT	|LAN911XEnableInts|
	IMPORT	|LAN911XGetFrame|
	IMPORT	|LAN911XSendFrame|
	IMPORT	|LAN911XInit|

  00000			 AREA	 |.data|, DATA
	 COMMON	|g_bootCfg|, 0x7c

	 COMMON	|g_ecctype|, 0x1

	 COMMON	|g_eboot|, 0x148

	 COMMON	|gDevice_prefix|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|g_CPUFamily| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@GNCLKLEF@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAI?$AAL?$AAE?$AA?5?$AA?$AA@| DCB "N"
	DCB	0x0, "K", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o", 0x0, "m"
	DCB	0x0, " ", 0x0, "S", 0x0, "D", 0x0, "C", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, " ", 0x0, "F", 0x0, "I", 0x0, "L", 0x0, "E"
	DCB	0x0, " ", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "F", 0x0, "n", 0x0, " ", 0x0, "R"
	DCB	0x0, "N", 0x0, "D", 0x0, "I", 0x0, "S", 0x0, " ", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@| DCB "L"
	DCB	0x0, "A", 0x0, "N", 0x0, "9", 0x0, "1", 0x0, "1", 0x0, "5"
	DCB	0x0, " ", 0x0, "M", 0x0, "A", 0x0, "C", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|g_kitlEthLan911x| DCD |LAN911XInit|
	DCD	0x0
	DCD	0x0
	DCD	|LAN911XSendFrame|
	DCD	|LAN911XGetFrame|
	DCD	|LAN911XEnableInts|
	DCD	|LAN911XDisableInts|
	DCD	0x0
	DCD	0x0
	DCD	|LAN911XCurrentPacketFilter|
	DCD	|LAN911XMulticastList|
|g_kitlUsbRndis| DCD |HostMiniInit|
	DCD	0x0
	DCD	0x0
	DCD	|RndisEDbgSendFrame|
	DCD	|RndisEDbgGetFrame|
	DCD	|RndisEnableInts|
	DCD	|RndisDisableInts|
	DCD	0x0
	DCD	0x0
	DCD	|RndisCurrentPacketFilter|
	DCD	|RndisMulticastList|
|g_kitlDevices| DCD |??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@|
	DCD	0x0
	DCD	0x15000000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlEthLan911x|
	DCD	|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@|
	DCD	0x0
	DCD	0x480ab000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlUsbRndis|
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|g_bootDevices| DCD |??_C@_1BI@OOCKPHGK@?$AAL?$AAA?$AAN?$AA9?$AA1?$AA1?$AA5?$AA?5?$AAM?$AAA?$AAC?$AA?$AA@|
	DCD	0x0
	DCD	0x15000000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlEthLan911x|
	DCD	|??_C@_1BK@NKDLNHPK@?$AAU?$AAS?$AAB?$AAF?$AAn?$AA?5?$AAR?$AAN?$AAD?$AAI?$AAS?$AA?5?$AA?$AA@|
	DCD	0x0
	DCD	0x480ab000
	DCD	0x0
	DCD	0x2
	DCD	|g_kitlUsbRndis|
	DCD	|??_C@_1CK@GNCLKLEF@?$AAN?$AAK?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAS?$AAD?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAF?$AAI?$AAL?$AAE?$AA?5?$AA?$AA@|
	DCD	0x0
	DCD	0x4809c000
	DCD	0x0
	DCD	0x4
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|DefaultMacAddress| DCW 0x2020
	DCW	0x3040
	DCW	0x5060

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|dwEbootECCtype| DCD 0xffffffff
	%	4
|?ebootPinMux_37XX@?1??OEMPlatformInit@@9@9| DCW 0x52	; `OEMPlatformInit'::`2'::ebootPinMux_37XX
	%	2
	DCD	0x0
	DCW	0x53
	%	2
	DCD	0x0
	DCW	0x54
	%	2
	DCD	0x0
	DCW	0x55
	%	2
	DCD	0x0
	DCW	0x5c
	%	2
	DCD	0x0
	DCW	0x5d
	%	2
	DCD	0x0
	DCW	0x5e
	%	2
	DCD	0x0
	DCW	0x5f
	%	2
	DCD	0x0
	DCW	0x60
	%	2
	DCD	0x0
	DCW	0x61
	%	2
	DCD	0x0
	DCW	0x62
	%	2
	DCD	0x0
	DCW	0x63
	%	2
	DCD	0x0
	DCW	0x64
	%	2
	DCD	0x0
	DCW	0x65
	%	2
	DCD	0x0
	DCW	0x66
	%	2
	DCD	0x0
	DCW	0x67
	%	2
	DCD	0x0
	DCW	0x68
	%	2
	DCD	0x18
	DCW	0x69
	%	2
	DCD	0x18
	DCW	0x6a
	%	2
	DCD	0x18
	DCW	0x6b
	%	2
	DCD	0x18
	DCW	0x6c
	%	2
	DCD	0x18
	DCW	0x6d
	%	2
	DCD	0x18
	DCW	0x51b
	%	2
	DCD	0x18
	DCW	0x51c
	%	2
	DCD	0x18
	DCW	0x51e
	%	2
	DCD	0x18
	DCW	0x51f
	%	2
	DCD	0x18
	DCW	0x520
	%	2
	DCD	0x18
	DCW	0x521
	%	2
	DCD	0x18
	DCW	0xac
	%	2
	DCD	0x20
	DCW	0xa5
	%	2
	DCD	0x20
	DCW	0x4c
	%	2
	DCD	0x20
	DCW	0x82
	%	2
	DCD	0x21
	DCW	0x9a
	%	2
	DCD	0x20
	DCW	0x2d8
	%	2
	DCD	0x20
	DCW	0x2d7
	%	2
	DCD	0x20
	DCW	0x25
	%	2
	DCD	0x20
	DCW	0x28
	%	2
	DCD	0x20
	DCW	0x29
	%	2
	DCD	0x20
	DCW	0xba
	%	2
	DCD	0x7
	DCW	0xb9
	%	2
	DCD	0x1
	DCW	0xbb
	%	2
	DCD	0x1
	DCW	0xbc
	%	2
	DCD	0x1
	DCW	0xbd
	%	2
	DCD	0x1
	DCW	0xbe
	%	2
	DCD	0x1
	DCW	0xbf
	%	2
	DCD	0x1
	DCW	0xc0
	%	2
	DCD	0x1
	DCW	0xc1
	%	2
	DCD	0x1
	DCW	0xc2
	%	2
	DCD	0x1
	DCW	0xc3
	%	2
	DCD	0x1
	DCW	0xc4
	%	2
	DCD	0x1
	DCW	0xffff
	%	2
	DCD	0x0
	EXPORT	|BSPGpioInit|
	IMPORT	|Tps659xx_Gpio|
	IMPORT	|BSPInsertGpioDevice|
	IMPORT	|Omap_Gpio|
; File c:\wince600\platform\z2170p\src\bootloader\eboot\main.c

  00000			 AREA	 |.pdata|, PDATA
|$T47983| DCD	|$LN5@BSPGpioIni|
	DCD	0x40000d01
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BSPGpioInit| PROC

; 94   : {

  00000		 |$LN5@BSPGpioIni|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47980|

; 95   :    BSPInsertGpioDevice(0,&Omap_Gpio,NULL);

  00004	e3a02000	 mov         r2, #0
  00008	e59f1020	 ldr         r1, [pc, #0x20]
  0000c	e3a00000	 mov         r0, #0
  00010	eb000000	 bl          BSPInsertGpioDevice

; 96   :    BSPInsertGpioDevice(TRITON_GPIO_PINID_START,&Tps659xx_Gpio,NULL);

  00014	e3a02000	 mov         r2, #0
  00018	e59f100c	 ldr         r1, [pc, #0xC]
  0001c	e3a00c01	 mov         r0, #1, 24
  00020	eb000000	 bl          BSPInsertGpioDevice

; 97   : 
; 98   : }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$LN6@BSPGpioIni|
  0002c		 |$LN7@BSPGpioIni|
  0002c	00000000	 DCD         |Tps659xx_Gpio|
  00030		 |$LN8@BSPGpioIni|
  00030	00000000	 DCD         |Omap_Gpio|
  00034		 |$M47981|

			 ENDP  ; |BSPGpioInit|

	EXPORT	|main|
	IMPORT	|BootloaderMain|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|BSPGetDebugUARTConfig|
	IMPORT	|Get_CPUVersion|

  00000			 AREA	 |.pdata|, PDATA
|$T47994| DCD	|$LN5@main|
	DCD	0x40001c02
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |main|	 PROC

; 100  : {

  00000		 |$LN5@main|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M47991|

; 101  : 	UINT32 CpuRevision;
; 102  : 
; 103  : 	// Get CPU family
; 104  : 	g_CPUFamily = CPU_FAMILY_OMAP35XX;

  00008	e59f205c	 ldr         r2, [pc, #0x5C]
  0000c	e3a03000	 mov         r3, #0
  00010	e5823000	 str         r3, [r2]

; 105  : 	CpuRevision = Get_CPUVersion();

  00014	eb000000	 bl          Get_CPUVersion
  00018	e58d0008	 str         r0, [sp, #8]
  0001c	e59d3008	 ldr         r3, [sp, #8]
  00020	e58d3000	 str         r3, [sp]

; 106  : 	g_CPUFamily = CPU_FAMILY(CpuRevision);

  00024	e59d3000	 ldr         r3, [sp]
  00028	e1a03803	 mov         r3, r3, lsl #16
  0002c	e1a02c23	 mov         r2, r3, lsr #24
  00030	e59f3034	 ldr         r3, [pc, #0x34]
  00034	e5832000	 str         r2, [r3]

; 107  : 
; 108  :     EnableDeviceClocks(BSPGetDebugUARTConfig()->dev,TRUE);

  00038	eb000000	 bl          BSPGetDebugUARTConfig
  0003c	e58d000c	 str         r0, [sp, #0xC]
  00040	e3a01001	 mov         r1, #1
  00044	e59d300c	 ldr         r3, [sp, #0xC]
  00048	e5930000	 ldr         r0, [r3]
  0004c	eb000000	 bl          EnableDeviceClocks

; 109  :     BootloaderMain();

  00050	eb000000	 bl          BootloaderMain

; 110  : }

  00054	e3a03000	 mov         r3, #0
  00058	e58d3004	 str         r3, [sp, #4]
  0005c	e59d0004	 ldr         r0, [sp, #4]
  00060	e28dd010	 add         sp, sp, #0x10
  00064	e49de004	 ldr         lr, [sp], #4
  00068	e12fff1e	 bx          lr
  0006c		 |$LN6@main|
  0006c		 |$LN7@main|
  0006c	00000000	 DCD         |g_CPUFamily|
  00070		 |$M47992|

			 ENDP  ; |main|

	EXPORT	|??_C@_1DO@MGHPPPEE@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@OIJGKENB@?$AAE?$AAS?$AA1?$AA?4?$AA3?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_08DGJGOJCE@EVM3530?9?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_08EMFGLKEE@EVM3730?9?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@EMFEEPJF@?$AA?$AN?$AA?6?$AAT?$AAI?$AA?5?$AAO?$AAM?$AAA?$AAP?$AA?$CF?$AAx?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@FACKMDLE@?$AAE?$AAS?$AA1?$AA?4?$AA2?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@ECJPGMFK@?$AAE?$AAS?$AA1?$AA?4?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LKGLCH@?$AAE?$AAS?$AA3?$AA?4?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LIAGAMEC@?$AAE?$AAS?$AA3?$AA?4?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OPHFFOFA@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@OONAPHOG@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@MMBAGLLJ@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@HEKMAMNM@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@PKCDALDP@?$AAE?$AAS?$AA1?$AA?4?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@KJJJBEEJ@?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAZ?$AA?9?$AA2?$AA1?$AA7@| [ DATA ] ; `string'
	EXPORT	|??_C@_0M@BBBJLBGJ@Jul?519?52013?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_08COOLENIN@14?343?341?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMPlatformInit|
	IMPORT	|TWLReadIDCode|
	IMPORT	|GPIOSetMode|
	IMPORT	|GPIOClrBit|
	IMPORT	|GPIOOpen|
	IMPORT	|TWLOpen|
	IMPORT	|GPIOInit|
	IMPORT	|OALI2CInit|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|OALPAtoVA|
	IMPORT	|OALLocalAllocInit|

  00004			 AREA	 |.bss|, NOINIT
|?allocationPool@?1??OEMPlatformInit@@9@9| % 0x200	; `OEMPlatformInit'::`2'::allocationPool

  00000			 AREA	 |.pdata|, PDATA
|$T48032| DCD	|$LN39@OEMPlatfor|
	DCD	0x40012402

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@MGHPPPEE@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "P", 0x0, "S", 0x0, "6", 0x0, "5", 0x0, "9", 0x0, "X"
	DCB	0x0, "X", 0x0, " ", 0x0, "V", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "s", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@OIJGKENB@?$AAE?$AAS?$AA1?$AA?4?$AA3?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "3", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "K", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "C", 0x0, "P", 0x0, "U", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "m", 0x0, "i", 0x0, "l", 0x0, "y", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08DGJGOJCE@EVM3530?9?$AA@| DCB "EVM3530-", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08EMFGLKEE@EVM3730?9?$AA@| DCB "EVM3730-", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@EMFEEPJF@?$AA?$AN?$AA?6?$AAT?$AAI?$AA?5?$AAO?$AAM?$AAA?$AAP?$AA?$CF?$AAx?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "T", 0x0, "I", 0x0, " ", 0x0, "O", 0x0, "M"
	DCB	0x0, "A", 0x0, "P", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "V"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@FACKMDLE@?$AAE?$AAS?$AA1?$AA?4?$AA2?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "2", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@ECJPGMFK@?$AAE?$AAS?$AA1?$AA?4?$AA1?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "1", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LKGLCH@?$AAE?$AAS?$AA3?$AA?4?$AA1?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"3", 0x0, ".", 0x0, "1", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LIAGAMEC@?$AAE?$AAS?$AA3?$AA?4?$AA0?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"3", 0x0, ".", 0x0, "0", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OPHFFOFA@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| DCB "E"
	DCB	0x0, "S", 0x0, "2", 0x0, ".", 0x0, "1", 0x0, ",", 0x0, " "
	DCB	0x0, "I", 0x0, "D", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "u", 0x0, "s", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "C", 0x0, "R", 0x0, "C", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@OONAPHOG@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@| DCB "E"
	DCB	0x0, "S", 0x0, "2", 0x0, ".", 0x0, "0", 0x0, ",", 0x0, " "
	DCB	0x0, "I", 0x0, "D", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "u", 0x0, "s", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "C", 0x0, "R", 0x0, "C", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@MMBAGLLJ@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"2", 0x0, ".", 0x0, "1", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@HEKMAMNM@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"2", 0x0, ".", 0x0, "0", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@PKCDALDP@?$AAE?$AAS?$AA1?$AA?4?$AA0?$AA?$AA@| DCB "E", 0x0, "S", 0x0
	DCB	"1", 0x0, ".", 0x0, "0", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@KJJJBEEJ@?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAZ?$AA?9?$AA2?$AA1?$AA7@| DCB "Z"
	DCB	0x0, "E", 0x0, "B", 0x0, "E", 0x0, "X", 0x0, " ", 0x0, "W"
	DCB	0x0, "i", 0x0, "n", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "s"
	DCB	0x0, " ", 0x0, "C", 0x0, "E", 0x0, " ", 0x0, "E", 0x0, "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "Z", 0x0, "-", 0x0, "2", 0x0, "1"
	DCB	0x0, "7", 0x0, "0", 0x0, " ", 0x0, "p", 0x0, "l", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "B", 0x0, "r"
	DCB	0x0, "i", 0x0, "a", 0x0, "n", 0x0, 0xd, 0x0, 0xa, 0x0, "B"
	DCB	0x0, "u", 0x0, "i", 0x0, "l", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "S", 0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0M@BBBJLBGJ@Jul?519?52013?$AA@| DCB "Jul 19 2013", 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08COOLENIN@14?343?341?$AA@| DCB "14:43:41", 0x0	; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPlatformInit| PROC

; 123  : {

  00000		 |$LN39@OEMPlatfor|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd064	 sub         sp, sp, #0x64
  00008		 |$M48029|

; 124  :     OMAP_GPTIMER_REGS *pTimerRegs;
; 125  :     UINT32 CpuRevision, version;
; 126  :     HANDLE hTwl,hGPIO;
; 127  :     static UCHAR allocationPool[512];
; 128  :     /*static const PAD_INFO ebootPinMux[] = {
; 129  :             DSS_PADS
; 130  :             GPIO_PADS
; 131  : 			USBOTG_PADS
; 132  :             END_OF_PAD_ARRAY
; 133  :     };*/
; 134  :     static const PAD_INFO ebootPinMux_37XX[] = {
; 135  :             DSS_PADS_37XX
; 136  :             GPIO_PADS_37XX
; 137  : 	     	USBOTG_PADS
; 138  :             END_OF_PAD_ARRAY
; 139  :     };
; 140  :     
; 141  :     OALLocalAllocInit(allocationPool,sizeof(allocationPool));

  00008	e3a01c02	 mov         r1, #2, 24
  0000c	e59f0478	 ldr         r0, [pc, #0x478]
  00010	eb000000	 bl          OALLocalAllocInit

; 142  : 
; 143  :     // Get processor and companion chip versions
; 144  : 	g_CPUFamily = CPU_FAMILY_OMAP35XX;

  00014	e59f243c	 ldr         r2, [pc, #0x43C]
  00018	e3a03000	 mov         r3, #0
  0001c	e5823000	 str         r3, [r2]

; 145  :     CpuRevision = Get_CPUVersion();

  00020	eb000000	 bl          Get_CPUVersion
  00024	e58d0018	 str         r0, [sp, #0x18]
  00028	e59d3018	 ldr         r3, [sp, #0x18]
  0002c	e58d3000	 str         r3, [sp]

; 146  :     version = CPU_REVISION(CpuRevision);

  00030	e59d3000	 ldr         r3, [sp]
  00034	e20330ff	 and         r3, r3, #0xFF
  00038	e58d3010	 str         r3, [sp, #0x10]

; 147  :     g_CPUFamily = CPU_FAMILY(CpuRevision);

  0003c	e59d3000	 ldr         r3, [sp]
  00040	e1a03803	 mov         r3, r3, lsl #16
  00044	e1a02c23	 mov         r2, r3, lsr #24
  00048	e59f3408	 ldr         r3, [pc, #0x408]
  0004c	e5832000	 str         r2, [r3]

; 148  : 
; 149  : 	// Set GPTIMER1 regs pointer
; 150  : 	pTimerRegs = OALPAtoUA(OMAP_GPTIMER1_REGS_PA);

  00050	e3a01000	 mov         r1, #0
  00054	e3a00312	 mov         r0, #0x12, 6
  00058	e38009c6	 orr         r0, r0, #0xC6, 18
  0005c	eb000000	 bl          OALPAtoVA
  00060	e58d001c	 str         r0, [sp, #0x1C]
  00064	e59d301c	 ldr         r3, [sp, #0x1C]
  00068	e58d3004	 str         r3, [sp, #4]

; 151  : 
; 152  :     //if(g_CPUFamily == CPU_FAMILY_DM37XX)
; 153  :     //{
; 154  : 	ConfigurePadArray(ebootPinMux_37XX);

  0006c	e59f0414	 ldr         r0, [pc, #0x414]
  00070	eb000000	 bl          ConfigurePadArray

; 155  :     //}
; 156  :     //else
; 157  :     //{
; 158  :     //    ConfigurePadArray(ebootPinMux);
; 159  :     //}
; 160  : 
; 161  :     OALLog(L"ZEBEX Windows CE EBOOT for Z-2170 plus - Brian"
; 162  :         L"\r\nBuilt %S at %S\r\n", __DATE__, __TIME__ );

  00074	e59f2408	 ldr         r2, [pc, #0x408]
  00078	e59f1400	 ldr         r1, [pc, #0x400]
  0007c	e59f03f8	 ldr         r0, [pc, #0x3F8]
  00080	eb000000	 bl          NKDbgPrintfW

; 163  :     /*OALLog(
; 164  :         L"EBOOT Version %d.%d, BSP " BSP_VERSION_STRING L"\r\n", 
; 165  :         EBOOT_VERSION_MAJOR, EBOOT_VERSION_MINOR        
; 166  :         );*/
; 167  : 
; 168  :     // Soft reset GPTIMER1
; 169  :     OUTREG32(&pTimerRegs->TIOCP, SYSCONFIG_SOFTRESET);

  00084	e59d3004	 ldr         r3, [sp, #4]
  00088	e2832010	 add         r2, r3, #0x10
  0008c	e3a03002	 mov         r3, #2
  00090	e5823000	 str         r3, [r2]
  00094		 |$LN6@OEMPlatfor|

; 170  :     // While until done
; 171  :     while ((INREG32(&pTimerRegs->TISTAT) & GPTIMER_TISTAT_RESETDONE) == 0)

  00094	e59d3004	 ldr         r3, [sp, #4]
  00098	e2833014	 add         r3, r3, #0x14
  0009c	e5933000	 ldr         r3, [r3]
  000a0	e3130001	 tst         r3, #1
  000a4	1a000000	 bne         |$LN5@OEMPlatfor|

; 172  :     	;

  000a8	eafffff9	 b           |$LN6@OEMPlatfor|
  000ac		 |$LN5@OEMPlatfor|

; 173  :  
; 174  :     // Enable posted mode
; 175  :     OUTREG32(&pTimerRegs->TSICR, GPTIMER_TSICR_POSTED);

  000ac	e59d3004	 ldr         r3, [sp, #4]
  000b0	e2832040	 add         r2, r3, #0x40
  000b4	e3a03004	 mov         r3, #4
  000b8	e5823000	 str         r3, [r2]

; 176  :     // Start timer
; 177  :     OUTREG32(&pTimerRegs->TCLR, GPTIMER_TCLR_AR|GPTIMER_TCLR_ST);

  000bc	e59d3004	 ldr         r3, [sp, #4]
  000c0	e2832024	 add         r2, r3, #0x24
  000c4	e3a03003	 mov         r3, #3
  000c8	e5823000	 str         r3, [r2]

; 178  :     
; 179  : 	// Enable device clocks used by the bootloader
; 180  :     EnableDeviceClocks(OMAP_DEVICE_GPIO1,TRUE);

  000cc	e3a01001	 mov         r1, #1
  000d0	e3a00029	 mov         r0, #0x29
  000d4	eb000000	 bl          EnableDeviceClocks

; 181  :     EnableDeviceClocks(OMAP_DEVICE_GPIO2,TRUE);

  000d8	e3a01001	 mov         r1, #1
  000dc	e3a0002d	 mov         r0, #0x2D
  000e0	eb000000	 bl          EnableDeviceClocks

; 182  :     EnableDeviceClocks(OMAP_DEVICE_GPIO3,TRUE);

  000e4	e3a01001	 mov         r1, #1
  000e8	e3a0002e	 mov         r0, #0x2E
  000ec	eb000000	 bl          EnableDeviceClocks

; 183  :     EnableDeviceClocks(OMAP_DEVICE_GPIO4,TRUE);

  000f0	e3a01001	 mov         r1, #1
  000f4	e3a0002f	 mov         r0, #0x2F
  000f8	eb000000	 bl          EnableDeviceClocks

; 184  :     EnableDeviceClocks(OMAP_DEVICE_GPIO5,TRUE);

  000fc	e3a01001	 mov         r1, #1
  00100	e3a00030	 mov         r0, #0x30
  00104	eb000000	 bl          EnableDeviceClocks

; 185  :     EnableDeviceClocks(OMAP_DEVICE_GPIO6,TRUE);

  00108	e3a01001	 mov         r1, #1
  0010c	e3a00031	 mov         r0, #0x31
  00110	eb000000	 bl          EnableDeviceClocks

; 186  : 
; 187  :     // configure i2c devices
; 188  :     OALI2CInit(OMAP_DEVICE_I2C1);

  00114	e3a0000c	 mov         r0, #0xC
  00118	eb000000	 bl          OALI2CInit

; 189  :     OALI2CInit(OMAP_DEVICE_I2C2);

  0011c	e3a0000d	 mov         r0, #0xD
  00120	eb000000	 bl          OALI2CInit

; 190  :     OALI2CInit(OMAP_DEVICE_I2C3);

  00124	e3a0000e	 mov         r0, #0xE
  00128	eb000000	 bl          OALI2CInit

; 191  : 
; 192  :     GPIOInit();

  0012c	eb000000	 bl          GPIOInit

; 193  :     // Note that T2 accesses must occur after I2C initialization
; 194  :     hTwl = TWLOpen();

  00130	eb000000	 bl          TWLOpen
  00134	e58d0020	 str         r0, [sp, #0x20]
  00138	e59d3020	 ldr         r3, [sp, #0x20]
  0013c	e58d300c	 str         r3, [sp, #0xC]

; 195  :     hGPIO = GPIOOpen(); 

  00140	eb000000	 bl          GPIOOpen
  00144	e58d0024	 str         r0, [sp, #0x24]
  00148	e59d3024	 ldr         r3, [sp, #0x24]
  0014c	e58d3008	 str         r3, [sp, #8]

; 196  :     
; 197  :     
; 198  :     // Clear Reset on ethernet controller        
; 199  :     //GPIOSetBit(hGPIO,LAN9115_RESET_GPIO);            
; 200  :     //GPIOSetMode(hGPIO, LAN9115_RESET_GPIO,GPIO_DIR_OUTPUT);
; 201  : 	// test GPIO 
; 202  : 	GPIOClrBit(hGPIO,136); // VIBRATOR

  00150	e3a01088	 mov         r1, #0x88
  00154	e59d0008	 ldr         r0, [sp, #8]
  00158	eb000000	 bl          GPIOClrBit

; 203  : 	GPIOSetMode(hGPIO, 136,GPIO_DIR_OUTPUT);

  0015c	e3a02000	 mov         r2, #0
  00160	e3a01088	 mov         r1, #0x88
  00164	e59d0008	 ldr         r0, [sp, #8]
  00168	eb000000	 bl          GPIOSetMode

; 204  :     GPIOClrBit(hGPIO,16); // WLAN_EN

  0016c	e3a01010	 mov         r1, #0x10
  00170	e59d0008	 ldr         r0, [sp, #8]
  00174	eb000000	 bl          GPIOClrBit

; 205  : 	GPIOSetMode(hGPIO, 16,GPIO_DIR_OUTPUT);

  00178	e3a02000	 mov         r2, #0
  0017c	e3a01010	 mov         r1, #0x10
  00180	e59d0008	 ldr         r0, [sp, #8]
  00184	eb000000	 bl          GPIOSetMode

; 206  : 	GPIOClrBit(hGPIO,15); // BT_EN

  00188	e3a0100f	 mov         r1, #0xF
  0018c	e59d0008	 ldr         r0, [sp, #8]
  00190	eb000000	 bl          GPIOClrBit

; 207  : 	GPIOSetMode(hGPIO, 15,GPIO_DIR_OUTPUT);

  00194	e3a02000	 mov         r2, #0
  00198	e3a0100f	 mov         r1, #0xF
  0019c	e59d0008	 ldr         r0, [sp, #8]
  001a0	eb000000	 bl          GPIOSetMode

; 208  :     
; 209  : 
; 210  :     OALLog(L"\r\nTI OMAP%x Version 0x%08x (%s)\r\n", CPU_ID(CpuRevision), CPU_REVISION(CpuRevision),        
; 211  :         version == CPU_FAMILY_35XX_REVISION_ES_1_0 ? L"ES1.0" :
; 212  :         version == CPU_FAMILY_35XX_REVISION_ES_2_0 ? L"ES2.0" :
; 213  :         version == CPU_FAMILY_35XX_REVISION_ES_2_1 ? L"ES2.1" :
; 214  :         version == CPU_FAMILY_35XX_REVISION_ES_2_0_CRC ? L"ES2.0, ID determined using CRC" :
; 215  :         version == CPU_FAMILY_35XX_REVISION_ES_2_1_CRC ? L"ES2.1, ID determined using CRC" :
; 216  :         version == CPU_FAMILY_35XX_REVISION_ES_3_0 ? L"ES3.0" :
; 217  :         version == CPU_FAMILY_35XX_REVISION_ES_3_1 ? L"ES3.1" : 
; 218  :         version == CPU_FAMILY_37XX_REVISION_ES_1_0? L"ES1.0" :
; 219  :         version == CPU_FAMILY_37XX_REVISION_ES_1_1? L"ES1.1" :
; 220  :         version == CPU_FAMILY_37XX_REVISION_ES_1_2? L"ES1.2" :
; 221  :         L"Unknown" );  

  001a4	e59d3010	 ldr         r3, [sp, #0x10]
  001a8	e3530000	 cmp         r3, #0
  001ac	1a000002	 bne         |$LN27@OEMPlatfor|
  001b0	e59f3290	 ldr         r3, [pc, #0x290]
  001b4	e58d3028	 str         r3, [sp, #0x28]
  001b8	ea000049	 b           |$LN28@OEMPlatfor|
  001bc		 |$LN27@OEMPlatfor|
  001bc	e59d3010	 ldr         r3, [sp, #0x10]
  001c0	e3530001	 cmp         r3, #1
  001c4	1a000002	 bne         |$LN25@OEMPlatfor|
  001c8	e59f32a8	 ldr         r3, [pc, #0x2A8]
  001cc	e58d302c	 str         r3, [sp, #0x2C]
  001d0	ea000041	 b           |$LN26@OEMPlatfor|
  001d4		 |$LN25@OEMPlatfor|
  001d4	e59d3010	 ldr         r3, [sp, #0x10]
  001d8	e3530002	 cmp         r3, #2
  001dc	1a000002	 bne         |$LN23@OEMPlatfor|
  001e0	e59f328c	 ldr         r3, [pc, #0x28C]
  001e4	e58d3030	 str         r3, [sp, #0x30]
  001e8	ea000039	 b           |$LN24@OEMPlatfor|
  001ec		 |$LN23@OEMPlatfor|
  001ec	e59d3010	 ldr         r3, [sp, #0x10]
  001f0	e3530003	 cmp         r3, #3
  001f4	1a000002	 bne         |$LN21@OEMPlatfor|
  001f8	e59f3270	 ldr         r3, [pc, #0x270]
  001fc	e58d3034	 str         r3, [sp, #0x34]
  00200	ea000031	 b           |$LN22@OEMPlatfor|
  00204		 |$LN21@OEMPlatfor|
  00204	e59d3010	 ldr         r3, [sp, #0x10]
  00208	e3530004	 cmp         r3, #4
  0020c	1a000002	 bne         |$LN19@OEMPlatfor|
  00210	e59f3254	 ldr         r3, [pc, #0x254]
  00214	e58d3038	 str         r3, [sp, #0x38]
  00218	ea000029	 b           |$LN20@OEMPlatfor|
  0021c		 |$LN19@OEMPlatfor|
  0021c	e59d3010	 ldr         r3, [sp, #0x10]
  00220	e3530005	 cmp         r3, #5
  00224	1a000002	 bne         |$LN17@OEMPlatfor|
  00228	e59f3238	 ldr         r3, [pc, #0x238]
  0022c	e58d303c	 str         r3, [sp, #0x3C]
  00230	ea000021	 b           |$LN18@OEMPlatfor|
  00234		 |$LN17@OEMPlatfor|
  00234	e59d3010	 ldr         r3, [sp, #0x10]
  00238	e3530006	 cmp         r3, #6
  0023c	1a000002	 bne         |$LN15@OEMPlatfor|
  00240	e59f321c	 ldr         r3, [pc, #0x21C]
  00244	e58d3040	 str         r3, [sp, #0x40]
  00248	ea000019	 b           |$LN16@OEMPlatfor|
  0024c		 |$LN15@OEMPlatfor|
  0024c	e59d3010	 ldr         r3, [sp, #0x10]
  00250	e3530010	 cmp         r3, #0x10
  00254	1a000002	 bne         |$LN13@OEMPlatfor|
  00258	e59f31e8	 ldr         r3, [pc, #0x1E8]
  0025c	e58d3044	 str         r3, [sp, #0x44]
  00260	ea000011	 b           |$LN14@OEMPlatfor|
  00264		 |$LN13@OEMPlatfor|
  00264	e59d3010	 ldr         r3, [sp, #0x10]
  00268	e3530011	 cmp         r3, #0x11
  0026c	1a000002	 bne         |$LN11@OEMPlatfor|
  00270	e59f31cc	 ldr         r3, [pc, #0x1CC]
  00274	e58d3048	 str         r3, [sp, #0x48]
  00278	ea000009	 b           |$LN12@OEMPlatfor|
  0027c		 |$LN11@OEMPlatfor|
  0027c	e59d3010	 ldr         r3, [sp, #0x10]
  00280	e3530012	 cmp         r3, #0x12
  00284	1a000002	 bne         |$LN9@OEMPlatfor|
  00288	e59f31b0	 ldr         r3, [pc, #0x1B0]
  0028c	e58d304c	 str         r3, [sp, #0x4C]
  00290	ea000001	 b           |$LN10@OEMPlatfor|
  00294		 |$LN9@OEMPlatfor|
  00294	e59f319c	 ldr         r3, [pc, #0x19C]
  00298	e58d304c	 str         r3, [sp, #0x4C]
  0029c		 |$LN10@OEMPlatfor|
  0029c	e59d304c	 ldr         r3, [sp, #0x4C]
  002a0	e58d3048	 str         r3, [sp, #0x48]
  002a4		 |$LN12@OEMPlatfor|
  002a4	e59d3048	 ldr         r3, [sp, #0x48]
  002a8	e58d3044	 str         r3, [sp, #0x44]
  002ac		 |$LN14@OEMPlatfor|
  002ac	e59d3044	 ldr         r3, [sp, #0x44]
  002b0	e58d3040	 str         r3, [sp, #0x40]
  002b4		 |$LN16@OEMPlatfor|
  002b4	e59d3040	 ldr         r3, [sp, #0x40]
  002b8	e58d303c	 str         r3, [sp, #0x3C]
  002bc		 |$LN18@OEMPlatfor|
  002bc	e59d303c	 ldr         r3, [sp, #0x3C]
  002c0	e58d3038	 str         r3, [sp, #0x38]
  002c4		 |$LN20@OEMPlatfor|
  002c4	e59d3038	 ldr         r3, [sp, #0x38]
  002c8	e58d3034	 str         r3, [sp, #0x34]
  002cc		 |$LN22@OEMPlatfor|
  002cc	e59d3034	 ldr         r3, [sp, #0x34]
  002d0	e58d3030	 str         r3, [sp, #0x30]
  002d4		 |$LN24@OEMPlatfor|
  002d4	e59d3030	 ldr         r3, [sp, #0x30]
  002d8	e58d302c	 str         r3, [sp, #0x2C]
  002dc		 |$LN26@OEMPlatfor|
  002dc	e59d302c	 ldr         r3, [sp, #0x2C]
  002e0	e58d3028	 str         r3, [sp, #0x28]
  002e4		 |$LN28@OEMPlatfor|
  002e4	e59d3028	 ldr         r3, [sp, #0x28]
  002e8	e59d2000	 ldr         r2, [sp]
  002ec	e20220ff	 and         r2, r2, #0xFF
  002f0	e59d1000	 ldr         r1, [sp]
  002f4	e1a01821	 mov         r1, r1, lsr #16
  002f8	e59f0160	 ldr         r0, [pc, #0x160]
  002fc	eb000000	 bl          NKDbgPrintfW

; 222  :     /* Initialize Device Prefix */
; 223  :     if(g_CPUFamily == CPU_FAMILY_DM37XX)

  00300	e59f3150	 ldr         r3, [pc, #0x150]
  00304	e5933000	 ldr         r3, [r3]
  00308	e3530001	 cmp         r3, #1
  0030c	1a000003	 bne         |$LN4@OEMPlatfor|

; 224  :     {
; 225  :         gDevice_prefix = BSP_DEVICE_37xx_PREFIX;

  00310	e59f2144	 ldr         r2, [pc, #0x144]
  00314	e59f3130	 ldr         r3, [pc, #0x130]
  00318	e5832000	 str         r2, [r3]
  0031c	ea00000e	 b           |$LN3@OEMPlatfor|
  00320		 |$LN4@OEMPlatfor|

; 226  :     }
; 227  :     else if (g_CPUFamily == CPU_FAMILY_OMAP35XX)

  00320	e59f3130	 ldr         r3, [pc, #0x130]
  00324	e5933000	 ldr         r3, [r3]
  00328	e3530000	 cmp         r3, #0
  0032c	1a000003	 bne         |$LN2@OEMPlatfor|

; 228  :     {
; 229  :         gDevice_prefix = BSP_DEVICE_35xx_PREFIX;

  00330	e59f2118	 ldr         r2, [pc, #0x118]
  00334	e59f3110	 ldr         r3, [pc, #0x110]
  00338	e5832000	 str         r2, [r3]

; 230  :     }
; 231  :     else

  0033c	ea000006	 b           |$LN1@OEMPlatfor|
  00340		 |$LN2@OEMPlatfor|

; 232  :     {
; 233  :         OALLog(L"INFO: UnKnown CPU family:%d....\r\n", g_CPUFamily);

  00340	e59f3110	 ldr         r3, [pc, #0x110]
  00344	e5931000	 ldr         r1, [r3]
  00348	e59f0104	 ldr         r0, [pc, #0x104]
  0034c	eb000000	 bl          NKDbgPrintfW

; 234  :         gDevice_prefix = BSP_DEVICE_35xx_PREFIX;

  00350	e59f20f8	 ldr         r2, [pc, #0xF8]
  00354	e59f30f0	 ldr         r3, [pc, #0xF0]
  00358	e5832000	 str         r2, [r3]
  0035c		 |$LN1@OEMPlatfor|
  0035c		 |$LN3@OEMPlatfor|

; 235  :     }
; 236  : 
; 237  :     version = TWLReadIDCode(hTwl);

  0035c	e59d000c	 ldr         r0, [sp, #0xC]
  00360	eb000000	 bl          TWLReadIDCode
  00364	e5cd0050	 strb        r0, [sp, #0x50]
  00368	e5dd3050	 ldrb        r3, [sp, #0x50]
  0036c	e58d3010	 str         r3, [sp, #0x10]

; 238  : 
; 239  :     OALLog(L"TPS659XX Version 0x%02x (%s)\r\n", version,
; 240  :         version == 0x00 ? L"ES1.0" : 
; 241  :         version == 0x10 ? L"ES1.1" : 
; 242  :         version == 0x20 ? L"ES1.2" : 
; 243  :         version == 0x30 ? L"ES1.3" : L"Unknown" );

  00370	e59d3010	 ldr         r3, [sp, #0x10]
  00374	e3530000	 cmp         r3, #0
  00378	1a000002	 bne         |$LN35@OEMPlatfor|
  0037c	e59f30c4	 ldr         r3, [pc, #0xC4]
  00380	e58d3054	 str         r3, [sp, #0x54]
  00384	ea000019	 b           |$LN36@OEMPlatfor|
  00388		 |$LN35@OEMPlatfor|
  00388	e59d3010	 ldr         r3, [sp, #0x10]
  0038c	e3530010	 cmp         r3, #0x10
  00390	1a000002	 bne         |$LN33@OEMPlatfor|
  00394	e59f30a8	 ldr         r3, [pc, #0xA8]
  00398	e58d3058	 str         r3, [sp, #0x58]
  0039c	ea000011	 b           |$LN34@OEMPlatfor|
  003a0		 |$LN33@OEMPlatfor|
  003a0	e59d3010	 ldr         r3, [sp, #0x10]
  003a4	e3530020	 cmp         r3, #0x20
  003a8	1a000002	 bne         |$LN31@OEMPlatfor|
  003ac	e59f308c	 ldr         r3, [pc, #0x8C]
  003b0	e58d305c	 str         r3, [sp, #0x5C]
  003b4	ea000009	 b           |$LN32@OEMPlatfor|
  003b8		 |$LN31@OEMPlatfor|
  003b8	e59d3010	 ldr         r3, [sp, #0x10]
  003bc	e3530030	 cmp         r3, #0x30
  003c0	1a000002	 bne         |$LN29@OEMPlatfor|
  003c4	e59f3070	 ldr         r3, [pc, #0x70]
  003c8	e58d3060	 str         r3, [sp, #0x60]
  003cc	ea000001	 b           |$LN30@OEMPlatfor|
  003d0		 |$LN29@OEMPlatfor|
  003d0	e59f3060	 ldr         r3, [pc, #0x60]
  003d4	e58d3060	 str         r3, [sp, #0x60]
  003d8		 |$LN30@OEMPlatfor|
  003d8	e59d3060	 ldr         r3, [sp, #0x60]
  003dc	e58d305c	 str         r3, [sp, #0x5C]
  003e0		 |$LN32@OEMPlatfor|
  003e0	e59d305c	 ldr         r3, [sp, #0x5C]
  003e4	e58d3058	 str         r3, [sp, #0x58]
  003e8		 |$LN34@OEMPlatfor|
  003e8	e59d3058	 ldr         r3, [sp, #0x58]
  003ec	e58d3054	 str         r3, [sp, #0x54]
  003f0		 |$LN36@OEMPlatfor|
  003f0	e59d2054	 ldr         r2, [sp, #0x54]
  003f4	e59d1010	 ldr         r1, [sp, #0x10]
  003f8	e59f0034	 ldr         r0, [pc, #0x34]
  003fc	eb000000	 bl          NKDbgPrintfW

; 244  : 		
; 245  :     g_ecctype = (UCHAR)dwEbootECCtype;

  00400	e59f3028	 ldr         r3, [pc, #0x28]
  00404	e5933000	 ldr         r3, [r3]
  00408	e20320ff	 and         r2, r3, #0xFF
  0040c	e59f3018	 ldr         r3, [pc, #0x18]
  00410	e5c32000	 strb        r2, [r3]

; 246  : 
; 247  :     // Done
; 248  :     return TRUE;

  00414	e3a03001	 mov         r3, #1
  00418	e58d3014	 str         r3, [sp, #0x14]

; 249  : }

  0041c	e59d0014	 ldr         r0, [sp, #0x14]
  00420	e28dd064	 add         sp, sp, #0x64
  00424	e49de004	 ldr         lr, [sp], #4
  00428	e12fff1e	 bx          lr
  0042c		 |$LN40@OEMPlatfor|
  0042c		 |$LN41@OEMPlatfor|
  0042c	00000000	 DCD         |g_ecctype|
  00430		 |$LN42@OEMPlatfor|
  00430	00000000	 DCD         |dwEbootECCtype|
  00434		 |$LN43@OEMPlatfor|
  00434	00000000	 DCD         |??_C@_1DO@MGHPPPEE@?$AAT?$AAP?$AAS?$AA6?$AA5?$AA9?$AAX?$AAX?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00438		 |$LN44@OEMPlatfor|
  00438	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  0043c		 |$LN45@OEMPlatfor|
  0043c	00000000	 DCD         |??_C@_1M@OIJGKENB@?$AAE?$AAS?$AA1?$AA?4?$AA3?$AA?$AA@|
  00440		 |$LN46@OEMPlatfor|
  00440	00000000	 DCD         |??_C@_1M@FACKMDLE@?$AAE?$AAS?$AA1?$AA?4?$AA2?$AA?$AA@|
  00444		 |$LN47@OEMPlatfor|
  00444	00000000	 DCD         |??_C@_1M@ECJPGMFK@?$AAE?$AAS?$AA1?$AA?4?$AA1?$AA?$AA@|
  00448		 |$LN48@OEMPlatfor|
  00448	00000000	 DCD         |??_C@_1M@PKCDALDP@?$AAE?$AAS?$AA1?$AA?4?$AA0?$AA?$AA@|
  0044c		 |$LN49@OEMPlatfor|
  0044c	00000000	 DCD         |gDevice_prefix|
  00450		 |$LN50@OEMPlatfor|
  00450	00000000	 DCD         |??_C@_08DGJGOJCE@EVM3530?9?$AA@|
  00454		 |$LN51@OEMPlatfor|
  00454	00000000	 DCD         |??_C@_1EE@KGKCAFPP@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAU?$AAn?$AAK?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?3?$AA?$CF?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN@|
  00458		 |$LN52@OEMPlatfor|
  00458	00000000	 DCD         |g_CPUFamily|
  0045c		 |$LN53@OEMPlatfor|
  0045c	00000000	 DCD         |??_C@_08EMFGLKEE@EVM3730?9?$AA@|
  00460		 |$LN54@OEMPlatfor|
  00460	00000000	 DCD         |??_C@_1EE@EMFEEPJF@?$AA?$AN?$AA?6?$AAT?$AAI?$AA?5?$AAO?$AAM?$AAA?$AAP?$AA?$CF?$AAx?$AA?5?$AAV?$AAe?$AAr?$AAs?$AAi?$AAo?$AAn?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN@|
  00464		 |$LN55@OEMPlatfor|
  00464	00000000	 DCD         |??_C@_1M@LKGLCH@?$AAE?$AAS?$AA3?$AA?4?$AA1?$AA?$AA@|
  00468		 |$LN56@OEMPlatfor|
  00468	00000000	 DCD         |??_C@_1M@LIAGAMEC@?$AAE?$AAS?$AA3?$AA?4?$AA0?$AA?$AA@|
  0046c		 |$LN57@OEMPlatfor|
  0046c	00000000	 DCD         |??_C@_1DO@OPHFFOFA@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@|
  00470		 |$LN58@OEMPlatfor|
  00470	00000000	 DCD         |??_C@_1DO@OONAPHOG@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?0?$AA?5?$AAI?$AAD?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAr?$AAm?$AAi?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAC?$AAR?$AAC?$AA?$AA@|
  00474		 |$LN59@OEMPlatfor|
  00474	00000000	 DCD         |??_C@_1M@MMBAGLLJ@?$AAE?$AAS?$AA2?$AA?4?$AA1?$AA?$AA@|
  00478		 |$LN60@OEMPlatfor|
  00478	00000000	 DCD         |??_C@_1M@HEKMAMNM@?$AAE?$AAS?$AA2?$AA?4?$AA0?$AA?$AA@|
  0047c		 |$LN61@OEMPlatfor|
  0047c	00000000	 DCD         |??_C@_1IC@KJJJBEEJ@?$AAZ?$AAE?$AAB?$AAE?$AAX?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAZ?$AA?9?$AA2?$AA1?$AA7@|
  00480		 |$LN62@OEMPlatfor|
  00480	00000000	 DCD         |??_C@_0M@BBBJLBGJ@Jul?519?52013?$AA@|
  00484		 |$LN63@OEMPlatfor|
  00484	00000000	 DCD         |??_C@_08COOLENIN@14?343?341?$AA@|
  00488		 |$LN64@OEMPlatfor|
  00488	00000000	 DCD         |?ebootPinMux_37XX@?1??OEMPlatformInit@@9@9|
  0048c		 |$LN65@OEMPlatfor|
  0048c	00000000	 DCD         |?allocationPool@?1??OEMPlatformInit@@9@9|
  00490		 |$M48030|

			 ENDP  ; |OEMPlatformInit|

	IMPORT	|SOCSetPadConfig|
; File c:\wince600\platform\z2170p\src\inc\bsp_padcfg.h

  00000			 AREA	 |.pdata|, PDATA
|$T48065| DCD	|$LN7@ConfigureP|
	DCD	0x40002b04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ConfigurePadArray| PROC

; 577  : {

  00000		 |$LN7@ConfigureP|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M48062|

; 578  :     int i=0;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018		 |$LN2@ConfigureP|

; 579  :     while (padArray[i].padID != (UINT16) -1)

  00018	e59d1000	 ldr         r1, [sp]
  0001c	e3a03008	 mov         r3, #8
  00020	e0020391	 mul         r2, r1, r3
  00024	e59d300c	 ldr         r3, [sp, #0xC]
  00028	e0833002	 add         r3, r3, r2
  0002c	e1d330b0	 ldrh        r3, [r3]
  00030	e1a02003	 mov         r2, r3
  00034	e3a03cff	 mov         r3, #0xFF, 24
  00038	e38330ff	 orr         r3, r3, #0xFF
  0003c	e1520003	 cmp         r2, r3
  00040	0a000016	 beq         |$LN1@ConfigureP|

; 580  :     {
; 581  :         SOCSetPadConfig(padArray[i].padID,(UINT16) padArray[i].Cfg);

  00044	e59d1000	 ldr         r1, [sp]
  00048	e3a03008	 mov         r3, #8
  0004c	e0020391	 mul         r2, r1, r3
  00050	e59d300c	 ldr         r3, [sp, #0xC]
  00054	e0833002	 add         r3, r3, r2
  00058	e2833004	 add         r3, r3, #4
  0005c	e5932000	 ldr         r2, [r3]
  00060	e3a03c7f	 mov         r3, #0x7F, 24
  00064	e38330ff	 orr         r3, r3, #0xFF
  00068	e0023003	 and         r3, r2, r3
  0006c	e1a01803	 mov         r1, r3, lsl #16
  00070	e1a01821	 mov         r1, r1, lsr #16
  00074	e59d0000	 ldr         r0, [sp]
  00078	e3a03008	 mov         r3, #8
  0007c	e0020390	 mul         r2, r0, r3
  00080	e59d300c	 ldr         r3, [sp, #0xC]
  00084	e0833002	 add         r3, r3, r2
  00088	e1d300b0	 ldrh        r0, [r3]
  0008c	eb000000	 bl          SOCSetPadConfig

; 582  :         i++;

  00090	e59d3000	 ldr         r3, [sp]
  00094	e2833001	 add         r3, r3, #1
  00098	e58d3000	 str         r3, [sp]

; 583  :     }

  0009c	eaffffdd	 b           |$LN2@ConfigureP|
  000a0		 |$LN1@ConfigureP|

; 584  : }

  000a0	e28dd004	 add         sp, sp, #4
  000a4	e89d6000	 ldmia       sp, {sp, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$M48063|

			 ENDP  ; |ConfigurePadArray|

	EXPORT	|??_C@_1KM@MLNPCLLF@?$AA?$AN?$AA?6?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAF?$AAo?$AAr?$AAc?$AAi?$AAn?$AAg?$AA?5?$AAc?$AAo?$AAl?$AAd?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AA?$CI?$AAn?$AAo?$AAn?$AA?9?$AAp?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@HJKNOJA@?$AAn?$AAk?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@IFKCAMGN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAW?$AA4?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@MEIINOMM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAw?$AAa?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@IBPJNEAL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|OEMMultiBinNotify|
	EXPORT	|??_C@_1DG@MGGFAEHB@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAr?$AAe?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMPreDownload|
	IMPORT	|BLEthDownload|
	IMPORT	|BLFlashDownload|
	IMPORT	|BLSDCardDownload|
	IMPORT	|OALKitlDeviceType|
	IMPORT	|BLShowLogo|
	IMPORT	|BLMenu|
	IMPORT	|wcscpy|
	IMPORT	|memcpy|
	IMPORT	|memset|
	IMPORT	|BLReadBootCfg|
	IMPORT	|BLReserveBootBlocks|
	IMPORT	|g_pOEMMultiBINNotify|
	IMPORT	|memcpy|
; File c:\wince600\platform\z2170p\src\bootloader\eboot\main.c

  00000			 AREA	 |.pdata|, PDATA
|$T48136| DCD	|$LN91@OEMPreDown|
	DCD	0x4001ad02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@MLNPCLLF@?$AA?$AN?$AA?6?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAF?$AAo?$AAr?$AAc?$AAi?$AAn?$AAg?$AA?5?$AAc?$AAo?$AAl?$AAd?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AA?$CI?$AAn?$AAo?$AAn?$AA?9?$AAp?$AAe?$AAr@| DCB 0xd
	DCB	0x0, 0xa, 0x0, ">", 0x0, ">", 0x0, ">", 0x0, " ", 0x0, "F"
	DCB	0x0, "o", 0x0, "r", 0x0, "c", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "l", 0x0, "d", 0x0, " "
	DCB	0x0, "b", 0x0, "o", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "("
	DCB	0x0, "n", 0x0, "o", 0x0, "n", 0x0, "-", 0x0, "p", 0x0, "e"
	DCB	0x0, "r", 0x0, "s", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "o", 0x0, "t"
	DCB	0x0, "h", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "d", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, " ", 0x0, "w", 0x0, "i", 0x0, "l"
	DCB	0x0, "l", 0x0, " ", 0x0, "b", 0x0, "e", 0x0, " ", 0x0, "w"
	DCB	0x0, "i", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, ")", 0x0, " "
	DCB	0x0, "<", 0x0, "<", 0x0, "<", 0x0, " ", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@HJKNOJA@?$AAn?$AAk?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@| DCB "n", 0x0, "k"
	DCB	0x0, ".", 0x0, "b", 0x0, "i", 0x0, "n", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@IFKCAMGN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAW?$AA4?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AN?$AA?6@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "W", 0x0, "4", 0x0, " ", 0x0, "b", 0x0, "o", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@MEIINOMM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAw?$AAa?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?0?$AA?5@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "B"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, " ", 0x0, "w"
	DCB	0x0, "a", 0x0, "s", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "u", 0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "a", 0x0, "u"
	DCB	0x0, "l", 0x0, "t", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@IBPJNEAL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AN?$AA?6@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "B"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r"
	DCB	0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@MGGFAEHB@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAr?$AAe?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "P"
	DCB	0x0, "r", 0x0, "e", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, "l", 0x0, "o", 0x0, "a", 0x0, "d", 0x0, ".", 0x0, "."
	DCB	0x0, ".", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPreDownload| PROC

; 392  : {

  00000		 |$LN91@OEMPreDown|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd044	 sub         sp, sp, #0x44
  00008		 |$M48133|

; 393  :     ULONG rc = (ULONG) BL_ERROR;

  00008	e3e03000	 mvn         r3, #0
  0000c	e58d3004	 str         r3, [sp, #4]

; 394  :     BSP_ARGS *pArgs = OALCAtoUA(IMAGE_SHARE_ARGS_CA);

  00010	e3a0320a	 mov         r3, #0xA, 4
  00014	e58d300c	 str         r3, [sp, #0xC]

; 395  :     BOOL bForceBootMenu;
; 396  :     OMAP_PRCM_GLOBAL_PRM_REGS * pPrmGlobal = OALPAtoUA(OMAP_PRCM_GLOBAL_PRM_REGS_PA);

  00018	e3a01000	 mov         r1, #0
  0001c	e59f068c	 ldr         r0, [pc, #0x68C]
  00020	eb000000	 bl          OALPAtoVA
  00024	e58d0020	 str         r0, [sp, #0x20]
  00028	e59d3020	 ldr         r3, [sp, #0x20]
  0002c	e58d3010	 str         r3, [sp, #0x10]

; 397  :     ULONG dwTemp;
; 398  :     UINT32 *pStatusControlAddr = OALPAtoUA(OMAP_STATUS_CONTROL_REGS_PA);

  00030	e3a01000	 mov         r1, #0
  00034	e59f0670	 ldr         r0, [pc, #0x670]
  00038	eb000000	 bl          OALPAtoVA
  0003c	e58d0024	 str         r0, [sp, #0x24]
  00040	e59d3024	 ldr         r3, [sp, #0x24]
  00044	e58d3014	 str         r3, [sp, #0x14]

; 399  :     UINT32 dwSysBootCfg;
; 400  : 
; 401  :     OALLog(L"INFO: Predownload.......\r\n");

  00048	e59f0658	 ldr         r0, [pc, #0x658]
  0004c	eb000000	 bl          NKDbgPrintfW

; 402  : 
; 403  :     // We need to support multi bin notify
; 404  :     g_pOEMMultiBINNotify = OEMMultiBinNotify;

  00050	e59f264c	 ldr         r2, [pc, #0x64C]
  00054	e59f3644	 ldr         r3, [pc, #0x644]
  00058	e5832000	 str         r2, [r3]

; 405  : 
; 406  :     // Ensure bootloader blocks are marked as reserved
; 407  :     BLReserveBootBlocks();

  0005c	eb000000	 bl          BLReserveBootBlocks

; 408  : 
; 409  :     // Read saved configration
; 410  :     if (BLReadBootCfg(&g_bootCfg) &&
; 411  :         (g_bootCfg.signature == BOOT_CFG_SIGNATURE) &&
; 412  :         (g_bootCfg.version == BOOT_CFG_VERSION))

  00060	e59f0600	 ldr         r0, [pc, #0x600]
  00064	eb000000	 bl          BLReadBootCfg
  00068	e58d0028	 str         r0, [sp, #0x28]
  0006c	e59d3028	 ldr         r3, [sp, #0x28]
  00070	e3530000	 cmp         r3, #0
  00074	0a00000b	 beq         |$LN24@OEMPreDown|
  00078	e59f35e8	 ldr         r3, [pc, #0x5E8]
  0007c	e5932000	 ldr         r2, [r3]
  00080	e59f3608	 ldr         r3, [pc, #0x608]
  00084	e1520003	 cmp         r2, r3
  00088	1a000006	 bne         |$LN24@OEMPreDown|
  0008c	e59f35d4	 ldr         r3, [pc, #0x5D4]
  00090	e5933004	 ldr         r3, [r3, #4]
  00094	e3530002	 cmp         r3, #2
  00098	1a000002	 bne         |$LN24@OEMPreDown|

; 413  : 	{
; 414  :         OALLog(L"INFO: Boot configuration found\r\n");

  0009c	e59f05f8	 ldr         r0, [pc, #0x5F8]
  000a0	eb000000	 bl          NKDbgPrintfW

; 415  : 	}
; 416  :     else 

  000a4	ea0000b3	 b           |$LN23@OEMPreDown|
  000a8		 |$LN24@OEMPreDown|

; 417  : 	{
; 418  :         OALLog(L"WARN: Boot config wasn't found, using defaults\r\n");

  000a8	e59f05e8	 ldr         r0, [pc, #0x5E8]
  000ac	eb000000	 bl          NKDbgPrintfW

; 419  :         memset(&g_bootCfg, 0, sizeof(g_bootCfg));

  000b0	e3a0207c	 mov         r2, #0x7C
  000b4	e3a01000	 mov         r1, #0
  000b8	e59f05a8	 ldr         r0, [pc, #0x5A8]
  000bc	eb000000	 bl          memset

; 420  : 		memcpy(&g_bootCfg.mac,DefaultMacAddress,sizeof(g_bootCfg.mac));

  000c0	e3a02006	 mov         r2, #6
  000c4	e59f15c8	 ldr         r1, [pc, #0x5C8]
  000c8	e59f3598	 ldr         r3, [pc, #0x598]
  000cc	e2830066	 add         r0, r3, #0x66
  000d0	eb000000	 bl          memcpy

; 421  :         g_bootCfg.signature = BOOT_CFG_SIGNATURE;

  000d4	e59f258c	 ldr         r2, [pc, #0x58C]
  000d8	e59f35b0	 ldr         r3, [pc, #0x5B0]
  000dc	e5823000	 str         r3, [r2]

; 422  :         g_bootCfg.version = BOOT_CFG_VERSION;

  000e0	e59f2580	 ldr         r2, [pc, #0x580]
  000e4	e3a03002	 mov         r3, #2
  000e8	e5823004	 str         r3, [r2, #4]

; 423  : 
; 424  :         g_bootCfg.oalFlags = 0;

  000ec	e59f2574	 ldr         r2, [pc, #0x574]
  000f0	e3a03000	 mov         r3, #0
  000f4	e5823034	 str         r3, [r2, #0x34]

; 425  :         g_bootCfg.flashNKFlags = 0;

  000f8	e59f2568	 ldr         r2, [pc, #0x568]
  000fc	e3a03000	 mov         r3, #0
  00100	e5823070	 str         r3, [r2, #0x70]

; 426  :         g_bootCfg.ECCtype =  (UCHAR)dwEbootECCtype;

  00104	e59f3580	 ldr         r3, [pc, #0x580]
  00108	e5933000	 ldr         r3, [r3]
  0010c	e20320ff	 and         r2, r3, #0xFF
  00110	e59f3550	 ldr         r3, [pc, #0x550]
  00114	e5c32074	 strb        r2, [r3, #0x74]

; 427  :         // To make it easier to select USB or EBOOT from menus when booting from SD card,
; 428  :         // preset the kitlFlags. This has no effect if booting from SD card.
; 429  :         g_bootCfg.kitlFlags = OAL_KITL_FLAGS_DHCP|OAL_KITL_FLAGS_ENABLED;

  00118	e59f2548	 ldr         r2, [pc, #0x548]
  0011c	e3a03005	 mov         r3, #5
  00120	e5823030	 str         r3, [r2, #0x30]

; 430  :         g_bootCfg.kitlFlags |= OAL_KITL_FLAGS_VMINI;

  00124	e59f353c	 ldr         r3, [pc, #0x53C]
  00128	e5933030	 ldr         r3, [r3, #0x30]
  0012c	e3832008	 orr         r2, r3, #8
  00130	e59f3530	 ldr         r3, [pc, #0x530]
  00134	e5832030	 str         r2, [r3, #0x30]

; 431  :         g_bootCfg.kitlFlags |= OAL_KITL_FLAGS_EXTNAME;

  00138	e59f3528	 ldr         r3, [pc, #0x528]
  0013c	e5933030	 ldr         r3, [r3, #0x30]
  00140	e3832020	 orr         r2, r3, #0x20
  00144	e59f351c	 ldr         r3, [pc, #0x51C]
  00148	e5832030	 str         r2, [r3, #0x30]

; 432  : 
; 433  :         g_bootCfg.displayRes = OMAP_LCD_DEFAULT;

  0014c	e59f2514	 ldr         r2, [pc, #0x514]
  00150	e3a03000	 mov         r3, #0
  00154	e582306c	 str         r3, [r2, #0x6C]

; 434  : 
; 435  :         
; 436  :         if(g_CPUFamily == CPU_FAMILY_DM37XX)

  00158	e59f3528	 ldr         r3, [pc, #0x528]
  0015c	e5933000	 ldr         r3, [r3]
  00160	e3530001	 cmp         r3, #1
  00164	1a000003	 bne         |$LN22@OEMPreDown|

; 437  :         {
; 438  :             g_bootCfg.opp_mode = BSP_OPM_SELECT_37XX-1;

  00168	e59f24f8	 ldr         r2, [pc, #0x4F8]
  0016c	e3a03003	 mov         r3, #3
  00170	e5823078	 str         r3, [r2, #0x78]

; 439  :         }
; 440  :         else

  00174	ea000002	 b           |$LN21@OEMPreDown|
  00178		 |$LN22@OEMPreDown|

; 441  :         {
; 442  :             g_bootCfg.opp_mode = BSP_OPM_SELECT_35XX-1;

  00178	e59f24e8	 ldr         r2, [pc, #0x4E8]
  0017c	e3a03004	 mov         r3, #4
  00180	e5823078	 str         r3, [r2, #0x78]
  00184		 |$LN21@OEMPreDown|

; 443  :         }
; 444  :         // select default boot device based on boot select switch setting
; 445  :         dwSysBootCfg = INREG32(pStatusControlAddr);

  00184	e59d3014	 ldr         r3, [sp, #0x14]
  00188	e5933000	 ldr         r3, [r3]
  0018c	e58d3008	 str         r3, [sp, #8]

; 446  :         OALLog(L"INFO: SW4 boot setting: 0x%02x\r\n", dwSysBootCfg & 0x3f);

  00190	e59d3008	 ldr         r3, [sp, #8]
  00194	e203103f	 and         r1, r3, #0x3F
  00198	e59f04e4	 ldr         r0, [pc, #0x4E4]
  0019c	eb000000	 bl          NKDbgPrintfW

; 447  : 
; 448  :         switch (dwSysBootCfg & 0x3f)

  001a0	e59d3008	 ldr         r3, [sp, #8]
  001a4	e203303f	 and         r3, r3, #0x3F
  001a8	e58d302c	 str         r3, [sp, #0x2C]
  001ac	e59d302c	 ldr         r3, [sp, #0x2C]
  001b0	e353003b	 cmp         r3, #0x3B
  001b4	8a000058	 bhi         |$LN14@OEMPreDown|
  001b8	e59d202c	 ldr         r2, [sp, #0x2C]
  001bc	e1a03102	 mov         r3, r2, lsl #2
  001c0	e083300f	 add         r3, r3, pc
  001c4	e5933004	 ldr         r3, [r3, #4]
  001c8	e08ff003	 add         pc, pc, r3
  001cc		 |$LN28@OEMPreDown|
  001cc		 |$LN27@OEMPreDown|
  001cc		 |$LN29@OEMPreDown|
  001cc	00000138	 DCD         0x138
  001d0		 |$LN30@OEMPreDown|
  001d0	00000124	 DCD         0x124
  001d4		 |$LN31@OEMPreDown|
  001d4	00000138	 DCD         0x138
  001d8		 |$LN32@OEMPreDown|
  001d8	0000014c	 DCD         0x14c
  001dc		 |$LN33@OEMPreDown|
  001dc	00000138	 DCD         0x138
  001e0		 |$LN34@OEMPreDown|
  001e0	0000014c	 DCD         0x14c
  001e4		 |$LN35@OEMPreDown|
  001e4	00000110	 DCD         0x110
  001e8		 |$LN36@OEMPreDown|
  001e8	0000014c	 DCD         0x14c
  001ec		 |$LN37@OEMPreDown|
  001ec	0000014c	 DCD         0x14c
  001f0		 |$LN38@OEMPreDown|
  001f0	0000014c	 DCD         0x14c
  001f4		 |$LN39@OEMPreDown|
  001f4	0000014c	 DCD         0x14c
  001f8		 |$LN40@OEMPreDown|
  001f8	0000014c	 DCD         0x14c
  001fc		 |$LN41@OEMPreDown|
  001fc	00000124	 DCD         0x124
  00200		 |$LN42@OEMPreDown|
  00200	0000014c	 DCD         0x14c
  00204		 |$LN43@OEMPreDown|
  00204	0000014c	 DCD         0x14c
  00208		 |$LN44@OEMPreDown|
  00208	0000014c	 DCD         0x14c
  0020c		 |$LN45@OEMPreDown|
  0020c	00000138	 DCD         0x138
  00210		 |$LN46@OEMPreDown|
  00210	0000014c	 DCD         0x14c
  00214		 |$LN47@OEMPreDown|
  00214	00000110	 DCD         0x110
  00218		 |$LN48@OEMPreDown|
  00218	0000014c	 DCD         0x14c
  0021c		 |$LN49@OEMPreDown|
  0021c	0000014c	 DCD         0x14c
  00220		 |$LN50@OEMPreDown|
  00220	00000124	 DCD         0x124
  00224		 |$LN51@OEMPreDown|
  00224	00000138	 DCD         0x138
  00228		 |$LN52@OEMPreDown|
  00228	0000014c	 DCD         0x14c
  0022c		 |$LN53@OEMPreDown|
  0022c	00000110	 DCD         0x110
  00230		 |$LN54@OEMPreDown|
  00230	0000014c	 DCD         0x14c
  00234		 |$LN55@OEMPreDown|
  00234	0000014c	 DCD         0x14c
  00238		 |$LN56@OEMPreDown|
  00238	00000124	 DCD         0x124
  0023c		 |$LN57@OEMPreDown|
  0023c	0000014c	 DCD         0x14c
  00240		 |$LN58@OEMPreDown|
  00240	0000014c	 DCD         0x14c
  00244		 |$LN59@OEMPreDown|
  00244	0000014c	 DCD         0x14c
  00248		 |$LN60@OEMPreDown|
  00248	0000014c	 DCD         0x14c
  0024c		 |$LN61@OEMPreDown|
  0024c	0000014c	 DCD         0x14c
  00250		 |$LN62@OEMPreDown|
  00250	0000014c	 DCD         0x14c
  00254		 |$LN63@OEMPreDown|
  00254	0000014c	 DCD         0x14c
  00258		 |$LN64@OEMPreDown|
  00258	0000014c	 DCD         0x14c
  0025c		 |$LN65@OEMPreDown|
  0025c	000000ec	 DCD         0xec
  00260		 |$LN66@OEMPreDown|
  00260	0000014c	 DCD         0x14c
  00264		 |$LN67@OEMPreDown|
  00264	000000ec	 DCD         0xec
  00268		 |$LN68@OEMPreDown|
  00268	0000014c	 DCD         0x14c
  0026c		 |$LN69@OEMPreDown|
  0026c	0000014c	 DCD         0x14c
  00270		 |$LN70@OEMPreDown|
  00270	0000014c	 DCD         0x14c
  00274		 |$LN71@OEMPreDown|
  00274	0000014c	 DCD         0x14c
  00278		 |$LN72@OEMPreDown|
  00278	0000014c	 DCD         0x14c
  0027c		 |$LN73@OEMPreDown|
  0027c	0000014c	 DCD         0x14c
  00280		 |$LN74@OEMPreDown|
  00280	0000014c	 DCD         0x14c
  00284		 |$LN75@OEMPreDown|
  00284	0000014c	 DCD         0x14c
  00288		 |$LN76@OEMPreDown|
  00288	00000110	 DCD         0x110
  0028c		 |$LN77@OEMPreDown|
  0028c	0000014c	 DCD         0x14c
  00290		 |$LN78@OEMPreDown|
  00290	0000014c	 DCD         0x14c
  00294		 |$LN79@OEMPreDown|
  00294	0000014c	 DCD         0x14c
  00298		 |$LN80@OEMPreDown|
  00298	0000014c	 DCD         0x14c
  0029c		 |$LN81@OEMPreDown|
  0029c	0000014c	 DCD         0x14c
  002a0		 |$LN82@OEMPreDown|
  002a0	0000014c	 DCD         0x14c
  002a4		 |$LN83@OEMPreDown|
  002a4	0000014c	 DCD         0x14c
  002a8		 |$LN84@OEMPreDown|
  002a8	0000014c	 DCD         0x14c
  002ac		 |$LN85@OEMPreDown|
  002ac	0000014c	 DCD         0x14c
  002b0		 |$LN86@OEMPreDown|
  002b0	0000014c	 DCD         0x14c
  002b4		 |$LN87@OEMPreDown|
  002b4	0000014c	 DCD         0x14c
  002b8		 |$LN88@OEMPreDown|
  002b8	000000ec	 DCD         0xec
  002bc		 |$LN18@OEMPreDown|

; 449  :         {
; 450  :         case 0x24:
; 451  :         case 0x26:
; 452  :         case 0x3b:
; 453  :             // 1st boot device is USB
; 454  :             g_bootCfg.bootDevLoc.LogicalLoc = OMAP_USBHS_REGS_PA;

  002bc	e59f23a4	 ldr         r2, [pc, #0x3A4]
  002c0	e3a03312	 mov         r3, #0x12, 6
  002c4	e3833aab	 orr         r3, r3, #0xAB, 20
  002c8	e5823010	 str         r3, [r2, #0x10]

; 455  :             g_bootCfg.kitlDevLoc.LogicalLoc = OMAP_USBHS_REGS_PA;

  002cc	e59f2394	 ldr         r2, [pc, #0x394]
  002d0	e3a03312	 mov         r3, #0x12, 6
  002d4	e3833aab	 orr         r3, r3, #0xAB, 20
  002d8	e5823024	 str         r3, [r2, #0x24]

; 456  :             break;

  002dc	ea000014	 b           |$LN19@OEMPreDown|
  002e0		 |$LN17@OEMPreDown|

; 457  :     
; 458  :     	case 0x2f: // brian
; 459  :         case 0x06:
; 460  :         case 0x12:
; 461  :         case 0x18:
; 462  :             // 1st boot device is MMC1 (SD Card Boot)
; 463  :             g_bootCfg.bootDevLoc.LogicalLoc = OMAP_MMCHS1_REGS_PA;

  002e0	e59f2380	 ldr         r2, [pc, #0x380]
  002e4	e3a03312	 mov         r3, #0x12, 6
  002e8	e3833927	 orr         r3, r3, #0x27, 18
  002ec	e5823010	 str         r3, [r2, #0x10]

; 464  :             break;          

  002f0	ea00000f	 b           |$LN19@OEMPreDown|
  002f4		 |$LN16@OEMPreDown|

; 465  : 
; 466  :         case 0x01: 
; 467  :         case 0x0c: 
; 468  :         case 0x15: 
; 469  :         case 0x1b: 
; 470  :             // 1st boot device is NAND
; 471  :             g_bootCfg.bootDevLoc.LogicalLoc = BSP_NAND_REGS_PA + 0x20;

  002f4	e59f236c	 ldr         r2, [pc, #0x36C]
  002f8	e3a03302	 mov         r3, #2, 6
  002fc	e3833020	 orr         r3, r3, #0x20
  00300	e5823010	 str         r3, [r2, #0x10]

; 472  :             break;

  00304	ea00000a	 b           |$LN19@OEMPreDown|
  00308		 |$LN15@OEMPreDown|

; 473  :             
; 474  :         case 0x00:
; 475  :         case 0x02:
; 476  :         case 0x04:
; 477  :         case 0x10:
; 478  :         case 0x16:
; 479  :             // 1st boot device is ONENAND
; 480  :             g_bootCfg.bootDevLoc.LogicalLoc = BSP_ONENAND_REGS_PA + 0x20;                       

  00308	e59f2358	 ldr         r2, [pc, #0x358]
  0030c	e3a03303	 mov         r3, #3, 6
  00310	e3833020	 orr         r3, r3, #0x20
  00314	e5823010	 str         r3, [r2, #0x10]

; 481  :             break;

  00318	ea000005	 b           |$LN19@OEMPreDown|
  0031c		 |$LN14@OEMPreDown|

; 482  : 
; 483  :         default:
; 484  :             // UART,  Ethernet Boot
; 485  :             g_bootCfg.bootDevLoc.LogicalLoc = BSP_LAN9115_REGS_PA;

  0031c	e59f2344	 ldr         r2, [pc, #0x344]
  00320	e3a03415	 mov         r3, #0x15, 8
  00324	e5823010	 str         r3, [r2, #0x10]

; 486  :             g_bootCfg.kitlDevLoc.LogicalLoc = BSP_LAN9115_REGS_PA;

  00328	e59f2338	 ldr         r2, [pc, #0x338]
  0032c	e3a03415	 mov         r3, #0x15, 8
  00330	e5823024	 str         r3, [r2, #0x24]
  00334		 |$LN19@OEMPreDown|

; 487  :             break;
; 488  :         }            
; 489  :         if (g_bootCfg.kitlDevLoc.LogicalLoc == 0)

  00334	e59f332c	 ldr         r3, [pc, #0x32C]
  00338	e5933024	 ldr         r3, [r3, #0x24]
  0033c	e3530000	 cmp         r3, #0
  00340	1a000002	 bne         |$LN13@OEMPreDown|

; 490  :         {
; 491  :             g_bootCfg.kitlDevLoc.LogicalLoc = BSP_LAN9115_REGS_PA;

  00344	e59f231c	 ldr         r2, [pc, #0x31C]
  00348	e3a03415	 mov         r3, #0x15, 8
  0034c	e5823024	 str         r3, [r2, #0x24]
  00350		 |$LN13@OEMPreDown|

; 492  :         };
; 493  :         g_bootCfg.deviceID = 0;

  00350	e59f2310	 ldr         r2, [pc, #0x310]
  00354	e3a03000	 mov         r3, #0
  00358	e5823044	 str         r3, [r2, #0x44]

; 494  :         g_bootCfg.osPartitionSize = IMAGE_WINCE_CODE_SIZE;

  0035c	e59f2304	 ldr         r2, [pc, #0x304]
  00360	e3a0350a	 mov         r3, #0xA, 10
  00364	e5823048	 str         r3, [r2, #0x48]

; 495  :         wcscpy(g_bootCfg.filename, L"nk.bin");

  00368	e59f1310	 ldr         r1, [pc, #0x310]
  0036c	e59f32f4	 ldr         r3, [pc, #0x2F4]
  00370	e283004c	 add         r0, r3, #0x4C
  00374	eb000000	 bl          wcscpy
  00378		 |$LN23@OEMPreDown|

; 496  : 	}
; 497  : 
; 498  : 	// Initialize flash partitions if needed
; 499  : 	//brian    BLConfigureFlashPartitions(FALSE);
; 500  : 
; 501  :     // Initialize ARGS structure
; 502  :     if ((pArgs->header.signature != OAL_ARGS_SIGNATURE) ||
; 503  :         (pArgs->header.oalVersion != OAL_ARGS_VERSION) ||
; 504  :         (pArgs->header.bspVersion != BSP_ARGS_VERSION))

  00378	e59d300c	 ldr         r3, [sp, #0xC]
  0037c	e5932000	 ldr         r2, [r3]
  00380	e59f32f0	 ldr         r3, [pc, #0x2F0]
  00384	e1520003	 cmp         r2, r3
  00388	1a000009	 bne         |$LN11@OEMPreDown|
  0038c	e59d300c	 ldr         r3, [sp, #0xC]
  00390	e2833004	 add         r3, r3, #4
  00394	e1d330b0	 ldrh        r3, [r3]
  00398	e3530001	 cmp         r3, #1
  0039c	1a000004	 bne         |$LN11@OEMPreDown|
  003a0	e59d300c	 ldr         r3, [sp, #0xC]
  003a4	e2833006	 add         r3, r3, #6
  003a8	e1d330b0	 ldrh        r3, [r3]
  003ac	e3530001	 cmp         r3, #1
  003b0	0a000003	 beq         |$LN12@OEMPreDown|
  003b4		 |$LN11@OEMPreDown|

; 505  : 	{
; 506  : 		memset(pArgs, 0, IMAGE_SHARE_ARGS_SIZE);

  003b4	e3a02a01	 mov         r2, #1, 20
  003b8	e3a01000	 mov         r1, #0
  003bc	e59d000c	 ldr         r0, [sp, #0xC]
  003c0	eb000000	 bl          memset
  003c4		 |$LN12@OEMPreDown|

; 507  : 	}        
; 508  :     
; 509  :     // Save reset type
; 510  :     dwTemp = INREG32(&pPrmGlobal->PRM_RSTST);

  003c4	e59d3010	 ldr         r3, [sp, #0x10]
  003c8	e2833058	 add         r3, r3, #0x58
  003cc	e5933000	 ldr         r3, [r3]
  003d0	e58d3000	 str         r3, [sp]

; 511  :     if (dwTemp & (GLOBALWARM_RST /* actually SW reset */ | EXTERNALWARM_RST))

  003d4	e59d3000	 ldr         r3, [sp]
  003d8	e3130042	 tst         r3, #0x42
  003dc	0a000004	 beq         |$LN10@OEMPreDown|

; 512  :     {
; 513  :         pArgs->coldBoot = FALSE;

  003e0	e59d300c	 ldr         r3, [sp, #0xC]
  003e4	e283200c	 add         r2, r3, #0xC
  003e8	e3a03000	 mov         r3, #0
  003ec	e5823000	 str         r3, [r2]

; 514  :     }
; 515  :     else

  003f0	ea000005	 b           |$LN9@OEMPreDown|
  003f4		 |$LN10@OEMPreDown|

; 516  :     {
; 517  :         pArgs->coldBoot = TRUE;

  003f4	e59d300c	 ldr         r3, [sp, #0xC]
  003f8	e283200c	 add         r2, r3, #0xC
  003fc	e3a03001	 mov         r3, #1
  00400	e5823000	 str         r3, [r2]

; 518  :         OALLog(L"\r\n>>> Forcing cold boot (non-persistent registry and other data will be wiped) <<< \r\n");

  00404	e59f0270	 ldr         r0, [pc, #0x270]
  00408	eb000000	 bl          NKDbgPrintfW
  0040c		 |$LN9@OEMPreDown|

; 519  :     }
; 520  :     
; 521  :     // Don't force the boot menu, use default action unless user breaks
; 522  :     // into menu
; 523  :     bForceBootMenu = FALSE;

  0040c	e3a03000	 mov         r3, #0
  00410	e58d3018	 str         r3, [sp, #0x18]
  00414		 |$retryBootMenu$47664|

; 524  :     
; 525  : retryBootMenu:
; 526  : 	// Call configuration menu
; 527  :     BLMenu(bForceBootMenu);

  00414	e59d0018	 ldr         r0, [sp, #0x18]
  00418	eb000000	 bl          BLMenu

; 528  :     
; 529  :     // Update ARGS structure if necessary
; 530  :     if ((pArgs->header.signature != OAL_ARGS_SIGNATURE) ||
; 531  :         (pArgs->header.oalVersion != OAL_ARGS_VERSION) || 
; 532  :         (pArgs->header.bspVersion != BSP_ARGS_VERSION))

  0041c	e59d300c	 ldr         r3, [sp, #0xC]
  00420	e5932000	 ldr         r2, [r3]
  00424	e59f324c	 ldr         r3, [pc, #0x24C]
  00428	e1520003	 cmp         r2, r3
  0042c	1a000009	 bne         |$LN7@OEMPreDown|
  00430	e59d300c	 ldr         r3, [sp, #0xC]
  00434	e2833004	 add         r3, r3, #4
  00438	e1d330b0	 ldrh        r3, [r3]
  0043c	e3530001	 cmp         r3, #1
  00440	1a000004	 bne         |$LN7@OEMPreDown|
  00444	e59d300c	 ldr         r3, [sp, #0xC]
  00448	e2833006	 add         r3, r3, #6
  0044c	e1d330b0	 ldrh        r3, [r3]
  00450	e3530001	 cmp         r3, #1
  00454	0a00004d	 beq         |$LN8@OEMPreDown|
  00458		 |$LN7@OEMPreDown|

; 533  :         {
; 534  :         pArgs->header.signature = OAL_ARGS_SIGNATURE;

  00458	e59d200c	 ldr         r2, [sp, #0xC]
  0045c	e59f3214	 ldr         r3, [pc, #0x214]
  00460	e5823000	 str         r3, [r2]

; 535  :         pArgs->header.oalVersion = OAL_ARGS_VERSION;

  00464	e59d300c	 ldr         r3, [sp, #0xC]
  00468	e2832004	 add         r2, r3, #4
  0046c	e3a03001	 mov         r3, #1
  00470	e1c230b0	 strh        r3, [r2]

; 536  :         pArgs->header.bspVersion = BSP_ARGS_VERSION;

  00474	e59d300c	 ldr         r3, [sp, #0xC]
  00478	e2832006	 add         r2, r3, #6
  0047c	e3a03001	 mov         r3, #1
  00480	e1c230b0	 strh        r3, [r2]

; 537  :         pArgs->kitl.flags = g_bootCfg.kitlFlags;

  00484	e59d300c	 ldr         r3, [sp, #0xC]
  00488	e2832018	 add         r2, r3, #0x18
  0048c	e59f31d4	 ldr         r3, [pc, #0x1D4]
  00490	e5933030	 ldr         r3, [r3, #0x30]
  00494	e5823000	 str         r3, [r2]

; 538  :         pArgs->kitl.devLoc = g_bootCfg.kitlDevLoc;

  00498	e59d300c	 ldr         r3, [sp, #0xC]
  0049c	e283001c	 add         r0, r3, #0x1C
  004a0	e59f31c0	 ldr         r3, [pc, #0x1C0]
  004a4	e283101c	 add         r1, r3, #0x1C
  004a8	e3a02014	 mov         r2, #0x14
  004ac	eb000000	 bl          memcpy

; 539  :         pArgs->kitl.ipAddress = g_bootCfg.ipAddress;

  004b0	e59d300c	 ldr         r3, [sp, #0xC]
  004b4	e2832038	 add         r2, r3, #0x38
  004b8	e59f31a8	 ldr         r3, [pc, #0x1A8]
  004bc	e5933038	 ldr         r3, [r3, #0x38]
  004c0	e5823000	 str         r3, [r2]

; 540  :         pArgs->kitl.ipMask = g_bootCfg.ipMask;

  004c4	e59d300c	 ldr         r3, [sp, #0xC]
  004c8	e283203c	 add         r2, r3, #0x3C
  004cc	e59f3194	 ldr         r3, [pc, #0x194]
  004d0	e593303c	 ldr         r3, [r3, #0x3C]
  004d4	e5823000	 str         r3, [r2]

; 541  :         pArgs->kitl.ipRoute = g_bootCfg.ipRoute;

  004d8	e59d300c	 ldr         r3, [sp, #0xC]
  004dc	e2832040	 add         r2, r3, #0x40
  004e0	e59f3180	 ldr         r3, [pc, #0x180]
  004e4	e5933040	 ldr         r3, [r3, #0x40]
  004e8	e5823000	 str         r3, [r2]

; 542  : 		memcpy(pArgs->kitl.mac,g_bootCfg.mac,sizeof(pArgs->kitl.mac)); 

  004ec	e3a02006	 mov         r2, #6
  004f0	e59f3170	 ldr         r3, [pc, #0x170]
  004f4	e2831066	 add         r1, r3, #0x66
  004f8	e59d300c	 ldr         r3, [sp, #0xC]
  004fc	e2830030	 add         r0, r3, #0x30
  00500	eb000000	 bl          memcpy

; 543  :  	    pArgs->updateMode = FALSE;

  00504	e59d300c	 ldr         r3, [sp, #0xC]
  00508	e2832008	 add         r2, r3, #8
  0050c	e3a03000	 mov         r3, #0
  00510	e5823000	 str         r3, [r2]

; 544  :         pArgs->deviceID = g_bootCfg.deviceID;

  00514	e59d300c	 ldr         r3, [sp, #0xC]
  00518	e2832010	 add         r2, r3, #0x10
  0051c	e59f3144	 ldr         r3, [pc, #0x144]
  00520	e5933044	 ldr         r3, [r3, #0x44]
  00524	e5823000	 str         r3, [r2]

; 545  :         pArgs->oalFlags = g_bootCfg.oalFlags;

  00528	e59d300c	 ldr         r3, [sp, #0xC]
  0052c	e2832044	 add         r2, r3, #0x44
  00530	e59f3130	 ldr         r3, [pc, #0x130]
  00534	e5933034	 ldr         r3, [r3, #0x34]
  00538	e5823000	 str         r3, [r2]

; 546  :         pArgs->dispRes = g_bootCfg.displayRes;

  0053c	e59d300c	 ldr         r3, [sp, #0xC]
  00540	e2832060	 add         r2, r3, #0x60
  00544	e59f311c	 ldr         r3, [pc, #0x11C]
  00548	e593306c	 ldr         r3, [r3, #0x6C]
  0054c	e5823000	 str         r3, [r2]

; 547  :         pArgs->ECCtype = g_bootCfg.ECCtype; 

  00550	e59d300c	 ldr         r3, [sp, #0xC]
  00554	e2832064	 add         r2, r3, #0x64
  00558	e59f3108	 ldr         r3, [pc, #0x108]
  0055c	e5d33074	 ldrb        r3, [r3, #0x74]
  00560	e5823000	 str         r3, [r2]

; 548  :         pArgs->opp_mode = g_bootCfg.opp_mode;

  00564	e59d300c	 ldr         r3, [sp, #0xC]
  00568	e2832068	 add         r2, r3, #0x68
  0056c	e59f30f4	 ldr         r3, [pc, #0xF4]
  00570	e5933078	 ldr         r3, [r3, #0x78]
  00574	e5823000	 str         r3, [r2]

; 549  :         memcpy(pArgs->DevicePrefix, gDevice_prefix, sizeof(pArgs->DevicePrefix));

  00578	e3a02018	 mov         r2, #0x18
  0057c	e59f30f0	 ldr         r3, [pc, #0xF0]
  00580	e5931000	 ldr         r1, [r3]
  00584	e59d300c	 ldr         r3, [sp, #0xC]
  00588	e2830048	 add         r0, r3, #0x48
  0058c	eb000000	 bl          memcpy
  00590		 |$LN8@OEMPreDown|

; 550  :         }  
; 551  :     
; 552  :     // Initialize display
; 553  : 		BLShowLogo();

  00590	eb000000	 bl          BLShowLogo

; 554  : 
; 555  :     // Image download depends on protocol
; 556  :     g_eboot.bootDeviceType = OALKitlDeviceType(&g_bootCfg.bootDevLoc, g_bootDevices);

  00594	e59f10d0	 ldr         r1, [pc, #0xD0]
  00598	e59f30c8	 ldr         r3, [pc, #0xC8]
  0059c	e2830008	 add         r0, r3, #8
  005a0	eb000000	 bl          OALKitlDeviceType
  005a4	e58d0030	 str         r0, [sp, #0x30]
  005a8	e59d2030	 ldr         r2, [sp, #0x30]
  005ac	e59f30bc	 ldr         r3, [pc, #0xBC]
  005b0	e5832000	 str         r2, [r3]

; 557  : 
; 558  : 	switch (g_eboot.bootDeviceType)

  005b4	e59f30b4	 ldr         r3, [pc, #0xB4]
  005b8	e5933000	 ldr         r3, [r3]
  005bc	e58d3034	 str         r3, [sp, #0x34]
  005c0	e59d3034	 ldr         r3, [sp, #0x34]
  005c4	e3530002	 cmp         r3, #2
  005c8	0a000014	 beq         |$LN2@OEMPreDown|
  005cc	e59d3034	 ldr         r3, [sp, #0x34]
  005d0	e3530003	 cmp         r3, #3
  005d4	0a00000a	 beq         |$LN3@OEMPreDown|
  005d8	e59d3034	 ldr         r3, [sp, #0x34]
  005dc	e3530004	 cmp         r3, #4
  005e0	0a000000	 beq         |$LN4@OEMPreDown|
  005e4	ea000013	 b           |$LN5@OEMPreDown|
  005e8		 |$LN4@OEMPreDown|

; 559  : 	{
; 560  : 		case BOOT_SDCARD_TYPE:
; 561  :             rc = BLSDCardDownload(g_bootCfg.filename); // \PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BOOT\SDMEMORY

  005e8	e59f3078	 ldr         r3, [pc, #0x78]
  005ec	e283004c	 add         r0, r3, #0x4C
  005f0	eb000000	 bl          BLSDCardDownload
  005f4	e58d0038	 str         r0, [sp, #0x38]
  005f8	e59d3038	 ldr         r3, [sp, #0x38]
  005fc	e58d3004	 str         r3, [sp, #4]

; 562  :             break;

  00600	ea00000c	 b           |$LN5@OEMPreDown|
  00604		 |$LN3@OEMPreDown|

; 563  :         case OAL_KITL_TYPE_FLASH:
; 564  :             rc = BLFlashDownload(&g_bootCfg, g_bootDevices);

  00604	e59f1060	 ldr         r1, [pc, #0x60]
  00608	e59f0058	 ldr         r0, [pc, #0x58]
  0060c	eb000000	 bl          BLFlashDownload
  00610	e58d003c	 str         r0, [sp, #0x3C]
  00614	e59d303c	 ldr         r3, [sp, #0x3C]
  00618	e58d3004	 str         r3, [sp, #4]

; 565  :             break;

  0061c	ea000005	 b           |$LN5@OEMPreDown|
  00620		 |$LN2@OEMPreDown|

; 566  :         case OAL_KITL_TYPE_ETH:
; 567  :             rc = BLEthDownload(&g_bootCfg, g_bootDevices);

  00620	e59f1044	 ldr         r1, [pc, #0x44]
  00624	e59f003c	 ldr         r0, [pc, #0x3C]
  00628	eb000000	 bl          BLEthDownload
  0062c	e58d0040	 str         r0, [sp, #0x40]
  00630	e59d3040	 ldr         r3, [sp, #0x40]
  00634	e58d3004	 str         r3, [sp, #4]
  00638		 |$LN5@OEMPreDown|

; 568  :             break;
; 569  : 	}
; 570  :         
; 571  : 	if (rc == BL_ERROR)

  00638	e59d3004	 ldr         r3, [sp, #4]
  0063c	e3730001	 cmn         r3, #1
  00640	1a000002	 bne         |$LN1@OEMPreDown|

; 572  :     {
; 573  :         // No automatic mode now, force the boot menu to appear
; 574  :         bForceBootMenu = TRUE;

  00644	e3a03001	 mov         r3, #1
  00648	e58d3018	 str         r3, [sp, #0x18]

; 575  :         goto retryBootMenu; 

  0064c	eaffff70	 b           |$retryBootMenu$47664|
  00650		 |$LN1@OEMPreDown|

; 576  :     }   
; 577  :     
; 578  :     return rc;

  00650	e59d3004	 ldr         r3, [sp, #4]
  00654	e58d301c	 str         r3, [sp, #0x1C]

; 579  : }

  00658	e59d001c	 ldr         r0, [sp, #0x1C]
  0065c	e28dd044	 add         sp, sp, #0x44
  00660	e49de004	 ldr         lr, [sp], #4
  00664	e12fff1e	 bx          lr
  00668		 |$LN92@OEMPreDown|
  00668		 |$LN93@OEMPreDown|
  00668	00000000	 DCD         |g_bootCfg|
  0066c		 |$LN94@OEMPreDown|
  0066c	00000000	 DCD         |g_bootDevices|
  00670		 |$LN95@OEMPreDown|
  00670	00000000	 DCD         |g_eboot|
  00674		 |$LN96@OEMPreDown|
  00674	00000000	 DCD         |gDevice_prefix|
  00678		 |$LN97@OEMPreDown|
  00678	53475241	 DCD         0x53475241
  0067c		 |$LN98@OEMPreDown|
  0067c	00000000	 DCD         |??_C@_1KM@MLNPCLLF@?$AA?$AN?$AA?6?$AA?$DO?$AA?$DO?$AA?$DO?$AA?5?$AAF?$AAo?$AAr?$AAc?$AAi?$AAn?$AAg?$AA?5?$AAc?$AAo?$AAl?$AAd?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AA?$CI?$AAn?$AAo?$AAn?$AA?9?$AAp?$AAe?$AAr@|
  00680		 |$LN99@OEMPreDown|
  00680	00000000	 DCD         |??_C@_1O@HJKNOJA@?$AAn?$AAk?$AA?4?$AAb?$AAi?$AAn?$AA?$AA@|
  00684		 |$LN100@OEMPreDown|
  00684	00000000	 DCD         |??_C@_1EC@IFKCAMGN@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAW?$AA4?$AA?5?$AAb?$AAo?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAx?$AA?$AN?$AA?6@|
  00688		 |$LN101@OEMPreDown|
  00688	00000000	 DCD         |g_CPUFamily|
  0068c		 |$LN102@OEMPreDown|
  0068c	00000000	 DCD         |dwEbootECCtype|
  00690		 |$LN103@OEMPreDown|
  00690	42434647	 DCD         0x42434647
  00694		 |$LN104@OEMPreDown|
  00694	00000000	 DCD         |DefaultMacAddress|
  00698		 |$LN105@OEMPreDown|
  00698	00000000	 DCD         |??_C@_1GC@MEIINOMM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?5?$AAw?$AAa?$AAs?$AAn?$AA?8?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?0?$AA?5@|
  0069c		 |$LN106@OEMPreDown|
  0069c	00000000	 DCD         |??_C@_1EC@IBPJNEAL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAB?$AAo?$AAo?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AN?$AA?6@|
  006a0		 |$LN107@OEMPreDown|
  006a0	00000000	 DCD         |g_pOEMMultiBINNotify|
  006a4		 |$LN108@OEMPreDown|
  006a4	00000000	 DCD         |OEMMultiBinNotify|
  006a8		 |$LN109@OEMPreDown|
  006a8	00000000	 DCD         |??_C@_1DG@MGGFAEHB@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAr?$AAe?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  006ac		 |$LN110@OEMPreDown|
  006ac	480022f0	 DCD         0x480022f0
  006b0		 |$LN111@OEMPreDown|
  006b0	48307200	 DCD         0x48307200
  006b4		 |$M48134|

			 ENDP  ; |OEMPreDownload|

	EXPORT	|??_C@_1GI@OMOEGIPN@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAj?$AAu?$AAm?$AAp?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@MGHNOKAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@FFBNFJNC@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAp?$AAl?$AAa?$AAs?$AAh?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAl?$AAo?$AAg?$AAo?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@LEGMELFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAX?$AAL?$AAD?$AAR?$AA?1?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?1?$AAI?$AAP?$AAL?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@PPNIDEHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@LNJPPCBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAI?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAr?$AAo@| [ DATA ] ; `string'
	EXPORT	|OEMMapMemAddr|
	EXPORT	|??_C@_1GK@MMIDCEGF@?$AA?$CL?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	EXPORT	|OEMLaunch|
	IMPORT	|JumpTo|
	IMPORT	|OALVAtoPA|
	IMPORT	|OEMDeinitDebugSerial|
	IMPORT	|BLEthConfig|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T48192| DCD	|$LN61@OEMLaunch|
	DCD	0x4000e204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@OMOEGIPN@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAj?$AAu?$AAm?$AAp?$AAi@| DCB "L"
	DCB	0x0, "a", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "h", 0x0, " "
	DCB	0x0, "W", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "o", 0x0, "w"
	DCB	0x0, "s", 0x0, " ", 0x0, "C", 0x0, "E", 0x0, " ", 0x0, "i"
	DCB	0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, " ", 0x0, "b"
	DCB	0x0, "y", 0x0, " ", 0x0, "j", 0x0, "u", 0x0, "m", 0x0, "p"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@MGHNOKAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "i", 0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e"
	DCB	0x0, " ", 0x0, "l", 0x0, "a", 0x0, "u", 0x0, "n", 0x0, "c"
	DCB	0x0, "h", 0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, ",", 0x0, " ", 0x0, "s"
	DCB	0x0, "p", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@FFBNFJNC@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAp?$AAl?$AAa?$AAs?$AAh?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAl?$AAo?$AAg?$AAo?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "l"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, " ", 0x0, "d", 0x0, "o"
	DCB	0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a", 0x0, "d"
	DCB	0x0, "e", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "p"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@LEGMELFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAX?$AAL?$AAD?$AAR?$AA?1?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?1?$AAI?$AAP?$AAL?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?0@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "X"
	DCB	0x0, "L", 0x0, "D", 0x0, "R", 0x0, "/", 0x0, "E", 0x0, "B"
	DCB	0x0, "O", 0x0, "O", 0x0, "T", 0x0, "/", 0x0, "I", 0x0, "P"
	DCB	0x0, "L", 0x0, " ", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, "l", 0x0, "o", 0x0, "a", 0x0, "d", 0x0, "e", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "s", 0x0, "p", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@PPNIDEHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l"
	DCB	0x0, "o", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "y"
	DCB	0x0, "p", 0x0, "e", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "p"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@LNJPPCBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAI?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAr?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "m", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, " ", 0x0, "l"
	DCB	0x0, "o", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "r"
	DCB	0x0, "o", 0x0, "m", 0x0, " ", 0x0, "f", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "h", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m"
	DCB	0x0, "o", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@MMIDCEGF@?$AA?$CL?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "L", 0x0, "a", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "h", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMLaunch| PROC

; 595  : {

  00000		 |$LN61@OEMLaunch|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd05c	 sub         sp, sp, #0x5C
  00010		 |$M48189|

; 596  :     BSP_ARGS *pArgs = OALCAtoUA(IMAGE_SHARE_ARGS_CA);

  00010	e3a0320a	 mov         r3, #0xA, 4
  00014	e58d300c	 str         r3, [sp, #0xC]

; 597  : 
; 598  : 	UNREFERENCED_PARAMETER(size);
; 599  : 	UNREFERENCED_PARAMETER(pRomHeader);
; 600  : 
; 601  :     OALMSG(OAL_INFO, (L"+OEMLaunch(0x%08x, 0x%08x, 0x%08x, 0x%08x - %d/%d)\r\n", start, size,
; 602  :         launch, pRomHeader, g_eboot.bootDeviceType, g_eboot.type));

  00018	e59f3344	 ldr         r3, [pc, #0x344]
  0001c	e5933440	 ldr         r3, [r3, #0x440]
  00020	e3130008	 tst         r3, #8
  00024	0a00000f	 beq         |$LN33@OEMLaunch|
  00028	e59f3338	 ldr         r3, [pc, #0x338]
  0002c	e5933004	 ldr         r3, [r3, #4]
  00030	e58d3008	 str         r3, [sp, #8]
  00034	e59f332c	 ldr         r3, [pc, #0x32C]
  00038	e5933000	 ldr         r3, [r3]
  0003c	e58d3004	 str         r3, [sp, #4]
  00040	e59d3070	 ldr         r3, [sp, #0x70]
  00044	e58d3000	 str         r3, [sp]
  00048	e59d306c	 ldr         r3, [sp, #0x6C]
  0004c	e59d2068	 ldr         r2, [sp, #0x68]
  00050	e59d1064	 ldr         r1, [sp, #0x64]
  00054	e59f0328	 ldr         r0, [pc, #0x328]
  00058	eb000000	 bl          NKDbgPrintfW
  0005c	e3a03001	 mov         r3, #1
  00060	e58d301c	 str         r3, [sp, #0x1C]
  00064	ea000001	 b           |$LN34@OEMLaunch|
  00068		 |$LN33@OEMLaunch|
  00068	e3a03000	 mov         r3, #0
  0006c	e58d301c	 str         r3, [sp, #0x1C]
  00070		 |$LN34@OEMLaunch|

; 603  : 
; 604  :     // Depending on protocol there can be some action required
; 605  :     switch (g_eboot.bootDeviceType)

  00070	e59f32f0	 ldr         r3, [pc, #0x2F0]
  00074	e5933000	 ldr         r3, [r3]
  00078	e58d3020	 str         r3, [sp, #0x20]
  0007c	e59d3020	 ldr         r3, [sp, #0x20]
  00080	e3530002	 cmp         r3, #2
  00084	0a000038	 beq         |$LN19@OEMLaunch|
  00088	e59d3020	 ldr         r3, [sp, #0x20]
  0008c	e3530004	 cmp         r3, #4
  00090	0a000000	 beq         |$LN28@OEMLaunch|
  00094	ea000091	 b           |$LN4@OEMLaunch|
  00098		 |$LN28@OEMLaunch|

; 606  :         {
; 607  : #if BUILDING_EBOOT_SD
; 608  :         case BOOT_SDCARD_TYPE:            
; 609  :             switch (g_eboot.type)

  00098	e59f32c8	 ldr         r3, [pc, #0x2C8]
  0009c	e5933004	 ldr         r3, [r3, #4]
  000a0	e58d3024	 str         r3, [sp, #0x24]
  000a4	e59d3024	 ldr         r3, [sp, #0x24]
  000a8	e3530001	 cmp         r3, #1
  000ac	0a000003	 beq         |$LN25@OEMLaunch|
  000b0	e59d3024	 ldr         r3, [sp, #0x24]
  000b4	e3530006	 cmp         r3, #6
  000b8	0a000007	 beq         |$LN24@OEMLaunch|
  000bc	ea00001d	 b           |$LN22@OEMLaunch|
  000c0		 |$LN25@OEMLaunch|

; 610  :                 {
; 611  : #if 0
; 612  : /*
; 613  :                 case DOWNLOAD_TYPE_FLASHRAM:
; 614  :                     if (BLFlashDownload(&g_bootCfg, g_kitlDevices) != BL_JUMP)
; 615  :                         {
; 616  :                         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: "
; 617  :                             L"Image load from flash memory failed\r\n"
; 618  :                             ));
; 619  :                         goto cleanUp;
; 620  :                         }
; 621  :                     launch = g_eboot.launchAddress;
; 622  :                     break;
; 623  : */
; 624  : #endif
; 625  :                 case DOWNLOAD_TYPE_RAM:
; 626  :                     launch = (UINT32)OEMMapMemAddr(start, launch);

  000c0	e59d106c	 ldr         r1, [sp, #0x6C]
  000c4	e59d0064	 ldr         r0, [sp, #0x64]
  000c8	eb000000	 bl          OEMMapMemAddr
  000cc	e58d0028	 str         r0, [sp, #0x28]
  000d0	e59d3028	 ldr         r3, [sp, #0x28]
  000d4	e58d306c	 str         r3, [sp, #0x6C]

; 627  :                     break;

  000d8	ea000022	 b           |$LN26@OEMLaunch|
  000dc		 |$LN24@OEMLaunch|

; 628  : 					
; 629  :                 case DOWNLOAD_TYPE_FLASHNAND:
; 630  :                     if (BLFlashDownload(&g_bootCfg, g_kitlDevices) != BL_JUMP)

  000dc	e59f129c	 ldr         r1, [pc, #0x29C]
  000e0	e59f0294	 ldr         r0, [pc, #0x294]
  000e4	eb000000	 bl          BLFlashDownload
  000e8	e58d002c	 str         r0, [sp, #0x2C]
  000ec	e59d302c	 ldr         r3, [sp, #0x2C]
  000f0	e3530001	 cmp         r3, #1
  000f4	0a00000b	 beq         |$LN23@OEMLaunch|

; 631  :                         {
; 632  :                         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: "
; 633  :                             L"Image load from flash memory failed\r\n"
; 634  :                             ));

  000f8	e59f3264	 ldr         r3, [pc, #0x264]
  000fc	e5933440	 ldr         r3, [r3, #0x440]
  00100	e3130001	 tst         r3, #1
  00104	0a000004	 beq         |$LN35@OEMLaunch|
  00108	e59f0268	 ldr         r0, [pc, #0x268]
  0010c	eb000000	 bl          NKDbgPrintfW
  00110	e3a03001	 mov         r3, #1
  00114	e58d3030	 str         r3, [sp, #0x30]
  00118	ea000001	 b           |$LN36@OEMLaunch|
  0011c		 |$LN35@OEMLaunch|
  0011c	e3a03000	 mov         r3, #0
  00120	e58d3030	 str         r3, [sp, #0x30]
  00124		 |$LN36@OEMLaunch|

; 635  :                         goto cleanUp;

  00124	ea000089	 b           |$cleanUp$47704|
  00128		 |$LN23@OEMLaunch|

; 636  :                         }
; 637  :                     launch = g_eboot.launchAddress;

  00128	e59f3238	 ldr         r3, [pc, #0x238]
  0012c	e593300c	 ldr         r3, [r3, #0xC]
  00130	e58d306c	 str         r3, [sp, #0x6C]

; 638  :                     break;

  00134	ea00000b	 b           |$LN26@OEMLaunch|
  00138		 |$LN22@OEMLaunch|

; 639  : 					
; 640  : #if 0
; 641  : /*
; 642  :                 case DOWNLOAD_TYPE_EBOOT:
; 643  :                 case DOWNLOAD_TYPE_XLDR:
; 644  :                     OALMSG(OAL_INFO, (L"INFO: "
; 645  :                         L"XLDR/EBOOT/IPL downloaded, spin forever\r\n"
; 646  :                         ));
; 647  :                     while (TRUE);
; 648  :                     break;
; 649  : */
; 650  : #endif
; 651  :                 default:
; 652  :                     OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Unknown download type, spin forever\r\n"));

  00138	e59f3224	 ldr         r3, [pc, #0x224]
  0013c	e5933440	 ldr         r3, [r3, #0x440]
  00140	e3130001	 tst         r3, #1
  00144	0a000004	 beq         |$LN37@OEMLaunch|
  00148	e59f021c	 ldr         r0, [pc, #0x21C]
  0014c	eb000000	 bl          NKDbgPrintfW
  00150	e3a03001	 mov         r3, #1
  00154	e58d3034	 str         r3, [sp, #0x34]
  00158	ea000001	 b           |$LN38@OEMLaunch|
  0015c		 |$LN37@OEMLaunch|
  0015c	e3a03000	 mov         r3, #0
  00160	e58d3034	 str         r3, [sp, #0x34]
  00164		 |$LN38@OEMLaunch|
  00164		 |$LN21@OEMLaunch|

; 653  :                     for(;;);

  00164	eafffffe	 b           |$LN21@OEMLaunch|
  00168		 |$LN26@OEMLaunch|

; 654  :                     break;
; 655  :                 }
; 656  :             break;

  00168	ea00005f	 b           |$LN29@OEMLaunch|
  0016c		 |$LN19@OEMLaunch|

; 657  : 
; 658  : #endif
; 659  : 
; 660  :         case OAL_KITL_TYPE_ETH:
; 661  :             BLEthConfig(pArgs);

  0016c	e59d000c	 ldr         r0, [sp, #0xC]
  00170	eb000000	 bl          BLEthConfig

; 662  :             switch (g_eboot.type)

  00174	e59f31ec	 ldr         r3, [pc, #0x1EC]
  00178	e5933004	 ldr         r3, [r3, #4]
  0017c	e58d3038	 str         r3, [sp, #0x38]
  00180	e59d3038	 ldr         r3, [sp, #0x38]
  00184	e2433001	 sub         r3, r3, #1
  00188	e58d3038	 str         r3, [sp, #0x38]
  0018c	e59d3038	 ldr         r3, [sp, #0x38]
  00190	e3530007	 cmp         r3, #7
  00194	8a000044	 bhi         |$LN7@OEMLaunch|
  00198	e59d2038	 ldr         r2, [sp, #0x38]
  0019c	e1a03102	 mov         r3, r2, lsl #2
  001a0	e083300f	 add         r3, r3, pc
  001a4	e5933004	 ldr         r3, [r3, #4]
  001a8	e08ff003	 add         pc, pc, r3
  001ac		 |$LN50@OEMLaunch|
  001ac		 |$LN49@OEMLaunch|
  001ac		 |$LN51@OEMLaunch|
  001ac	00000078	 DCD         0x78
  001b0		 |$LN52@OEMLaunch|
  001b0	000000fc	 DCD         0xfc
  001b4		 |$LN53@OEMLaunch|
  001b4	00000094	 DCD         0x94
  001b8		 |$LN54@OEMLaunch|
  001b8	00000094	 DCD         0x94
  001bc		 |$LN55@OEMLaunch|
  001bc	000000fc	 DCD         0xfc
  001c0		 |$LN56@OEMLaunch|
  001c0	0000001c	 DCD         0x1c
  001c4		 |$LN57@OEMLaunch|
  001c4	0000001c	 DCD         0x1c
  001c8		 |$LN58@OEMLaunch|
  001c8	000000c8	 DCD         0xc8
  001cc		 |$LN16@OEMLaunch|

; 663  :                 {
; 664  : #ifdef IMGMULTIXIP
; 665  :                 case DOWNLOAD_TYPE_EXT:
; 666  : #endif					
; 667  :                 case DOWNLOAD_TYPE_FLASHNAND:
; 668  : 				case DOWNLOAD_TYPE_FLASHNOR:
; 669  :                     if (BLFlashDownload(&g_bootCfg, g_kitlDevices) != BL_JUMP)

  001cc	e59f11ac	 ldr         r1, [pc, #0x1AC]
  001d0	e59f01a4	 ldr         r0, [pc, #0x1A4]
  001d4	eb000000	 bl          BLFlashDownload
  001d8	e58d003c	 str         r0, [sp, #0x3C]
  001dc	e59d303c	 ldr         r3, [sp, #0x3C]
  001e0	e3530001	 cmp         r3, #1
  001e4	0a00000b	 beq         |$LN15@OEMLaunch|

; 670  :                         {
; 671  :                         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: "
; 672  :                             L"Image load from flash memory failed\r\n"
; 673  :                             ));

  001e8	e59f3174	 ldr         r3, [pc, #0x174]
  001ec	e5933440	 ldr         r3, [r3, #0x440]
  001f0	e3130001	 tst         r3, #1
  001f4	0a000004	 beq         |$LN39@OEMLaunch|
  001f8	e59f0178	 ldr         r0, [pc, #0x178]
  001fc	eb000000	 bl          NKDbgPrintfW
  00200	e3a03001	 mov         r3, #1
  00204	e58d3040	 str         r3, [sp, #0x40]
  00208	ea000001	 b           |$LN40@OEMLaunch|
  0020c		 |$LN39@OEMLaunch|
  0020c	e3a03000	 mov         r3, #0
  00210	e58d3040	 str         r3, [sp, #0x40]
  00214		 |$LN40@OEMLaunch|

; 674  :                         goto cleanUp;

  00214	ea00004d	 b           |$cleanUp$47704|
  00218		 |$LN15@OEMLaunch|

; 675  :                         }
; 676  :                     launch = g_eboot.launchAddress;

  00218	e59f3148	 ldr         r3, [pc, #0x148]
  0021c	e593300c	 ldr         r3, [r3, #0xC]
  00220	e58d306c	 str         r3, [sp, #0x6C]

; 677  :                     break;

  00224	ea00002c	 b           |$LN17@OEMLaunch|
  00228		 |$LN14@OEMLaunch|

; 678  : 
; 679  :                 case DOWNLOAD_TYPE_RAM:
; 680  :                     launch = (UINT32)OEMMapMemAddr(start, launch);

  00228	e59d106c	 ldr         r1, [sp, #0x6C]
  0022c	e59d0064	 ldr         r0, [sp, #0x64]
  00230	eb000000	 bl          OEMMapMemAddr
  00234	e58d0044	 str         r0, [sp, #0x44]
  00238	e59d3044	 ldr         r3, [sp, #0x44]
  0023c	e58d306c	 str         r3, [sp, #0x6C]

; 681  :                     break;

  00240	ea000025	 b           |$LN17@OEMLaunch|
  00244		 |$LN13@OEMLaunch|

; 682  : 
; 683  :                 case DOWNLOAD_TYPE_EBOOT:
; 684  :                 case DOWNLOAD_TYPE_XLDR:
; 685  :                     OALMSG(OAL_INFO, (L"INFO: "
; 686  :                         L"XLDR/EBOOT/IPL downloaded, spin forever\r\n"
; 687  :                         ));

  00244	e59f3118	 ldr         r3, [pc, #0x118]
  00248	e5933440	 ldr         r3, [r3, #0x440]
  0024c	e3130008	 tst         r3, #8
  00250	0a000004	 beq         |$LN41@OEMLaunch|
  00254	e59f0118	 ldr         r0, [pc, #0x118]
  00258	eb000000	 bl          NKDbgPrintfW
  0025c	e3a03001	 mov         r3, #1
  00260	e58d3048	 str         r3, [sp, #0x48]
  00264	ea000001	 b           |$LN42@OEMLaunch|
  00268		 |$LN41@OEMLaunch|
  00268	e3a03000	 mov         r3, #0
  0026c	e58d3048	 str         r3, [sp, #0x48]
  00270		 |$LN42@OEMLaunch|
  00270		 |$LN12@OEMLaunch|

; 688  :                     for(;;);

  00270	eafffffe	 b           |$LN12@OEMLaunch|

; 689  :                     break;

  00274	ea000018	 b           |$LN17@OEMLaunch|
  00278		 |$LN10@OEMLaunch|

; 690  : 
; 691  : 				case DOWNLOAD_TYPE_LOGO:
; 692  :                     OALMSG(OAL_INFO, (L"INFO: "
; 693  :                         L"Splashcreen logo downloaded, spin forever\r\n"
; 694  :                         ));

  00278	e59f30e4	 ldr         r3, [pc, #0xE4]
  0027c	e5933440	 ldr         r3, [r3, #0x440]
  00280	e3130008	 tst         r3, #8
  00284	0a000004	 beq         |$LN43@OEMLaunch|
  00288	e59f00e0	 ldr         r0, [pc, #0xE0]
  0028c	eb000000	 bl          NKDbgPrintfW
  00290	e3a03001	 mov         r3, #1
  00294	e58d304c	 str         r3, [sp, #0x4C]
  00298	ea000001	 b           |$LN44@OEMLaunch|
  0029c		 |$LN43@OEMLaunch|
  0029c	e3a03000	 mov         r3, #0
  002a0	e58d304c	 str         r3, [sp, #0x4C]
  002a4		 |$LN44@OEMLaunch|
  002a4		 |$LN9@OEMLaunch|

; 695  :                     for(;;);

  002a4	eafffffe	 b           |$LN9@OEMLaunch|

; 696  :                     break;

  002a8	ea00000b	 b           |$LN17@OEMLaunch|
  002ac		 |$LN7@OEMLaunch|

; 697  : 
; 698  :                 default:
; 699  :                     OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: Unknown download type, spin forever\r\n"));

  002ac	e59f30b0	 ldr         r3, [pc, #0xB0]
  002b0	e5933440	 ldr         r3, [r3, #0x440]
  002b4	e3130001	 tst         r3, #1
  002b8	0a000004	 beq         |$LN45@OEMLaunch|
  002bc	e59f00a8	 ldr         r0, [pc, #0xA8]
  002c0	eb000000	 bl          NKDbgPrintfW
  002c4	e3a03001	 mov         r3, #1
  002c8	e58d3050	 str         r3, [sp, #0x50]
  002cc	ea000001	 b           |$LN46@OEMLaunch|
  002d0		 |$LN45@OEMLaunch|
  002d0	e3a03000	 mov         r3, #0
  002d4	e58d3050	 str         r3, [sp, #0x50]
  002d8		 |$LN46@OEMLaunch|
  002d8		 |$LN6@OEMLaunch|

; 700  :                     for(;;);

  002d8	eafffffe	 b           |$LN6@OEMLaunch|
  002dc		 |$LN17@OEMLaunch|

; 701  :                     break;
; 702  :                 }
; 703  :             break;

  002dc	ea000002	 b           |$LN29@OEMLaunch|
  002e0		 |$LN4@OEMLaunch|

; 704  : 
; 705  :         default:        
; 706  :             launch = g_eboot.launchAddress;

  002e0	e59f3080	 ldr         r3, [pc, #0x80]
  002e4	e593300c	 ldr         r3, [r3, #0xC]
  002e8	e58d306c	 str         r3, [sp, #0x6C]
  002ec		 |$LN29@OEMLaunch|

; 707  :             break;
; 708  :         }
; 709  : 
; 710  : #ifndef BSP_NO_NAND_IN_SDBOOT
; 711  :     if ((g_bootCfg.flashNKFlags & ENABLE_FLASH_NK) &&       
; 712  :         /* if loading from NAND then do not need to flash NAND again */      
; 713  :         (g_eboot.bootDeviceType != OAL_KITL_TYPE_FLASH) && 
; 714  : 	    (start != (IMAGE_WINCE_CODE_CA + NAND_ROMOFFSET)) &&
; 715  : 	    (start != (IMAGE_WINCE_CODE_CA + NOR_ROMOFFSET))) {
; 716  :             if( !WriteFlashNK(start, size))
; 717  : 	            OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: "
; 718  : 	                L"Flash NK.bin failed, start=%x\r\n", start
; 719  : 	                ));
; 720  :     	}
; 721  : #endif
; 722  : 
; 723  :     // Check if we get launch address
; 724  :     if (launch == (UINT32)INVALID_HANDLE_VALUE)

  002ec	e59d306c	 ldr         r3, [sp, #0x6C]
  002f0	e3730001	 cmn         r3, #1
  002f4	1a00000b	 bne         |$LN3@OEMLaunch|

; 725  :         {
; 726  :         OALMSG(OAL_ERROR, (L"ERROR: OEMLaunch: "
; 727  :             L"Unknown image launch address, spin forever\r\n"
; 728  :             ));

  002f8	e59f3064	 ldr         r3, [pc, #0x64]
  002fc	e5933440	 ldr         r3, [r3, #0x440]
  00300	e3130001	 tst         r3, #1
  00304	0a000004	 beq         |$LN47@OEMLaunch|
  00308	e59f0050	 ldr         r0, [pc, #0x50]
  0030c	eb000000	 bl          NKDbgPrintfW
  00310	e3a03001	 mov         r3, #1
  00314	e58d3054	 str         r3, [sp, #0x54]
  00318	ea000001	 b           |$LN48@OEMLaunch|
  0031c		 |$LN47@OEMLaunch|
  0031c	e3a03000	 mov         r3, #0
  00320	e58d3054	 str         r3, [sp, #0x54]
  00324		 |$LN48@OEMLaunch|
  00324		 |$LN2@OEMLaunch|

; 729  :         for(;;);

  00324	eafffffe	 b           |$LN2@OEMLaunch|
  00328		 |$LN3@OEMLaunch|

; 730  :         }        
; 731  : 
; 732  :     // Print message, flush caches and jump to image
; 733  :     OALLog(
; 734  :         L"Launch Windows CE image by jumping to 0x%08x...\r\n\r\n", launch
; 735  :         );

  00328	e59d106c	 ldr         r1, [sp, #0x6C]
  0032c	e59f0028	 ldr         r0, [pc, #0x28]
  00330	eb000000	 bl          NKDbgPrintfW

; 736  : 
; 737  : 	OEMDeinitDebugSerial();

  00334	eb000000	 bl          OEMDeinitDebugSerial

; 738  :     OEMPlatformDeinit();

  00338	eb000000	 bl          OEMPlatformDeinit

; 739  :     JumpTo(OALVAtoPA((UCHAR*)launch));

  0033c	e59d006c	 ldr         r0, [sp, #0x6C]
  00340	eb000000	 bl          OALVAtoPA
  00344	e58d0058	 str         r0, [sp, #0x58]
  00348	e59d0058	 ldr         r0, [sp, #0x58]
  0034c	eb000000	 bl          JumpTo
  00350		 |$cleanUp$47704|

; 740  : 
; 741  : cleanUp:
; 742  :     return;
; 743  : }

  00350	e28dd05c	 add         sp, sp, #0x5C
  00354	e89d6000	 ldmia       sp, {sp, lr}
  00358	e12fff1e	 bx          lr
  0035c		 |$LN62@OEMLaunch|
  0035c		 |$LN63@OEMLaunch|
  0035c	00000000	 DCD         |??_C@_1GI@OMOEGIPN@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AAs?$AA?5?$AAC?$AAE?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAb?$AAy?$AA?5?$AAj?$AAu?$AAm?$AAp?$AAi@|
  00360		 |$LN64@OEMLaunch|
  00360	00000000	 DCD         |??_C@_1HO@MGHNOKAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5@|
  00364		 |$LN65@OEMLaunch|
  00364	00000000	 DCD         |dpCurSettings|
  00368		 |$LN66@OEMLaunch|
  00368	00000000	 DCD         |g_eboot|
  0036c		 |$LN67@OEMLaunch|
  0036c	00000000	 DCD         |??_C@_1HA@PPNIDEHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo@|
  00370		 |$LN68@OEMLaunch|
  00370	00000000	 DCD         |??_C@_1GE@FFBNFJNC@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAS?$AAp?$AAl?$AAa?$AAs?$AAh?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAl?$AAo?$AAg?$AAo?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe@|
  00374		 |$LN69@OEMLaunch|
  00374	00000000	 DCD         |??_C@_1GA@LEGMELFL@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAX?$AAL?$AAD?$AAR?$AA?1?$AAE?$AAB?$AAO?$AAO?$AAT?$AA?1?$AAI?$AAP?$AAL?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?0@|
  00378		 |$LN70@OEMLaunch|
  00378	00000000	 DCD         |??_C@_1HA@LNJPPCBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?3?$AA?5?$AAI?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAr?$AAo@|
  0037c		 |$LN71@OEMLaunch|
  0037c	00000000	 DCD         |g_bootCfg|
  00380		 |$LN72@OEMLaunch|
  00380	00000000	 DCD         |g_kitlDevices|
  00384		 |$LN73@OEMLaunch|
  00384	00000000	 DCD         |??_C@_1GK@MMIDCEGF@?$AA?$CL?$AAO?$AAE?$AAM?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  00388		 |$M48190|

			 ENDP  ; |OEMLaunch|


  00000			 AREA	 |.pdata|, PDATA
|$T48211| DCD	|$LN7@OEMPlatfor@2|
	DCD	0x40004302
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPlatformDeinit| PROC

; 256  : {

  00000		 |$LN7@OEMPlatfor@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M48208|

; 257  :     OMAP_GPTIMER_REGS *pTimerRegs = OALPAtoUA(OMAP_GPTIMER1_REGS_PA);

  00008	e3a01000	 mov         r1, #0
  0000c	e3a00312	 mov         r0, #0x12, 6
  00010	e38009c6	 orr         r0, r0, #0xC6, 18
  00014	eb000000	 bl          OALPAtoVA
  00018	e58d0004	 str         r0, [sp, #4]
  0001c	e59d3004	 ldr         r3, [sp, #4]
  00020	e58d3000	 str         r3, [sp]

; 258  : 
; 259  :     // Soft reset GPTIMER
; 260  :     OUTREG32(&pTimerRegs->TIOCP, SYSCONFIG_SOFTRESET);

  00024	e59d3000	 ldr         r3, [sp]
  00028	e2832010	 add         r2, r3, #0x10
  0002c	e3a03002	 mov         r3, #2
  00030	e5823000	 str         r3, [r2]
  00034		 |$LN2@OEMPlatfor@2|

; 261  :     // While until done
; 262  :     while ((INREG32(&pTimerRegs->TISTAT) & GPTIMER_TISTAT_RESETDONE) == 0);

  00034	e59d3000	 ldr         r3, [sp]
  00038	e2833014	 add         r3, r3, #0x14
  0003c	e5933000	 ldr         r3, [r3]
  00040	e3130001	 tst         r3, #1
  00044	1a000000	 bne         |$LN1@OEMPlatfor@2|
  00048	eafffff9	 b           |$LN2@OEMPlatfor@2|
  0004c		 |$LN1@OEMPlatfor@2|

; 263  : 
; 264  : 	// Disable device clocks that were used by the bootloader
; 265  :     EnableDeviceClocks(OMAP_DEVICE_GPIO1,FALSE);

  0004c	e3a01000	 mov         r1, #0
  00050	e3a00029	 mov         r0, #0x29
  00054	eb000000	 bl          EnableDeviceClocks

; 266  :     EnableDeviceClocks(OMAP_DEVICE_GPIO2,FALSE);

  00058	e3a01000	 mov         r1, #0
  0005c	e3a0002d	 mov         r0, #0x2D
  00060	eb000000	 bl          EnableDeviceClocks

; 267  :     EnableDeviceClocks(OMAP_DEVICE_GPIO3,FALSE);

  00064	e3a01000	 mov         r1, #0
  00068	e3a0002e	 mov         r0, #0x2E
  0006c	eb000000	 bl          EnableDeviceClocks

; 268  :     EnableDeviceClocks(OMAP_DEVICE_GPIO4,FALSE);

  00070	e3a01000	 mov         r1, #0
  00074	e3a0002f	 mov         r0, #0x2F
  00078	eb000000	 bl          EnableDeviceClocks

; 269  :     EnableDeviceClocks(OMAP_DEVICE_GPIO5,FALSE);

  0007c	e3a01000	 mov         r1, #0
  00080	e3a00030	 mov         r0, #0x30
  00084	eb000000	 bl          EnableDeviceClocks

; 270  :     EnableDeviceClocks(OMAP_DEVICE_GPIO6,FALSE);

  00088	e3a01000	 mov         r1, #0
  0008c	e3a00031	 mov         r0, #0x31
  00090	eb000000	 bl          EnableDeviceClocks

; 271  :     EnableDeviceClocks(OMAP_DEVICE_GPTIMER2,FALSE);

  00094	e3a01000	 mov         r1, #0
  00098	e3a00035	 mov         r0, #0x35
  0009c	eb000000	 bl          EnableDeviceClocks

; 272  :     EnableDeviceClocks(OMAP_DEVICE_UART1,FALSE);

  000a0	e3a01000	 mov         r1, #0
  000a4	e3a0000a	 mov         r0, #0xA
  000a8	eb000000	 bl          EnableDeviceClocks

; 273  : 	EnableDeviceClocks(OMAP_DEVICE_UART2,FALSE);

  000ac	e3a01000	 mov         r1, #0
  000b0	e3a0000b	 mov         r0, #0xB
  000b4	eb000000	 bl          EnableDeviceClocks

; 274  :     EnableDeviceClocks(OMAP_DEVICE_UART3,FALSE);

  000b8	e3a01000	 mov         r1, #0
  000bc	e3a0003d	 mov         r0, #0x3D
  000c0	eb000000	 bl          EnableDeviceClocks

; 275  :     EnableDeviceClocks(OMAP_DEVICE_MMC1,FALSE);

  000c4	e3a01000	 mov         r1, #0
  000c8	e3a00015	 mov         r0, #0x15
  000cc	eb000000	 bl          EnableDeviceClocks

; 276  :     EnableDeviceClocks(OMAP_DEVICE_MMC2,FALSE);

  000d0	e3a01000	 mov         r1, #0
  000d4	e3a00016	 mov         r0, #0x16
  000d8	eb000000	 bl          EnableDeviceClocks

; 277  :     EnableDeviceClocks(OMAP_DEVICE_I2C1,FALSE);

  000dc	e3a01000	 mov         r1, #0
  000e0	e3a0000c	 mov         r0, #0xC
  000e4	eb000000	 bl          EnableDeviceClocks

; 278  :     EnableDeviceClocks(OMAP_DEVICE_I2C2,FALSE);

  000e8	e3a01000	 mov         r1, #0
  000ec	e3a0000d	 mov         r0, #0xD
  000f0	eb000000	 bl          EnableDeviceClocks

; 279  :     EnableDeviceClocks(OMAP_DEVICE_I2C3,FALSE);

  000f4	e3a01000	 mov         r1, #0
  000f8	e3a0000e	 mov         r0, #0xE
  000fc	eb000000	 bl          EnableDeviceClocks

; 280  : }

  00100	e28dd008	 add         sp, sp, #8
  00104	e49de004	 ldr         lr, [sp], #4
  00108	e12fff1e	 bx          lr
  0010c		 |$M48209|

			 ENDP  ; |OEMPlatformDeinit|

	EXPORT	|??_C@_1CK@FDDKFJJE@?$AA?9?$AAO?$AAE?$AAM?$AAM?$AAu?$AAl?$AAt?$AAi?$AAB?$AAi?$AAn?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@JHMEBKAH@?$AAS?$AAp?$AAi?$AAn?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAr?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@FNKKGJOD@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@CJMKOEPD@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_08CMMENMPK@logo?4nb0?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@BJIBFLEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAu?$AAl?$AAt?$AAi?$AAX?$AAI?$AAP?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@NLHBBJNL@?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?3?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?5?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@MNPMBDFE@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@OFMGKCPE@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAi?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|strncmp|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T48242| DCD	|$LN47@OEMMultiBi|
	DCD	0xc0019704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@FDDKFJJE@?$AA?9?$AAO?$AAE?$AAM?$AAM?$AAu?$AAl?$AAt?$AAi?$AAB?$AAi?$AAn?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "M", 0x0, "u", 0x0, "l"
	DCB	0x0, "t", 0x0, "i", 0x0, "B", 0x0, "i", 0x0, "n", 0x0, "N"
	DCB	0x0, "o", 0x0, "t", 0x0, "i", 0x0, "f", 0x0, "y", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@JHMEBKAH@?$AAS?$AAp?$AAi?$AAn?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAr?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "p", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@FNKKGJOD@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@CJMKOEPD@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "n", 0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "d"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08CMMENMPK@logo?4nb0?$AA@| DCB "logo.nb0", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@BJIBFLEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAu?$AAl?$AAt?$AAi?$AAX?$AAI?$AAP?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i", 0x0, "X"
	DCB	0x0, "I", 0x0, "P", 0x0, " ", 0x0, "i", 0x0, "m", 0x0, "a"
	DCB	0x0, "g", 0x0, "e", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "s", 0x0, "u"
	DCB	0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@NLHBBJNL@?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?3?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?5?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA0?$AAx?$AA?$CF@| DCB "["
	DCB	0x0, "%", 0x0, "d", 0x0, "]", 0x0, ":", 0x0, " ", 0x0, "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, " ", 0x0, " ", 0x0, "L", 0x0, "e", 0x0, "n"
	DCB	0x0, "g", 0x0, "t", 0x0, "h", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, " ", 0x0, " "
	DCB	0x0, "S", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@MNPMBDFE@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@OFMGKCPE@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAi?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "m", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T48238| DCD	0xffffffb0
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T48238|

  00008		 |OEMMultiBinNotify| PROC

; 753  : {

  00008		 |$LN47@OEMMultiBi|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0001	 stmdb       sp!, {r0}
  00010	e92d5000	 stmdb       sp!, {r12, lr}
  00014	e24ddf5a	 sub         sp, sp, #0x5A, 30
  00018		 |$M48239|
  00018	e59f3640	 ldr         r3, [pc, #0x640]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3124	 str         r3, [sp, #0x124]

; 754  :     BOOL rc = FALSE;

  00024	e3a03000	 mov         r3, #0
  00028	e58d3004	 str         r3, [sp, #4]

; 755  :     UINT32 base = OALVAtoPA((UCHAR*)IMAGE_WINCE_CODE_CA);

  0002c	e3a00102	 mov         r0, #2, 2
  00030	e3800a02	 orr         r0, r0, #2, 20
  00034	eb000000	 bl          OALVAtoPA
  00038	e58d012c	 str         r0, [sp, #0x12C]
  0003c	e59d312c	 ldr         r3, [sp, #0x12C]
  00040	e58d3010	 str         r3, [sp, #0x10]

; 756  :     UINT32 start, length;
; 757  :     UINT32 ix;
; 758  : 
; 759  :     //OALMSG(OAL_INFO, (L"+OEMMultiBinNotify(0x%08x -> %d)\r\n", pInfo, pInfo->dwNumRegions));
; 760  :     OALMSG(OAL_INFO, (L"Download file information:\r\n"));

  00044	e59f35ec	 ldr         r3, [pc, #0x5EC]
  00048	e5933440	 ldr         r3, [r3, #0x440]
  0004c	e3130008	 tst         r3, #8
  00050	0a000004	 beq         |$LN27@OEMMultiBi|
  00054	e59f0600	 ldr         r0, [pc, #0x600]
  00058	eb000000	 bl          NKDbgPrintfW
  0005c	e3a03001	 mov         r3, #1
  00060	e58d3130	 str         r3, [sp, #0x130]
  00064	ea000001	 b           |$LN28@OEMMultiBi|
  00068		 |$LN27@OEMMultiBi|
  00068	e3a03000	 mov         r3, #0
  0006c	e58d3130	 str         r3, [sp, #0x130]
  00070		 |$LN28@OEMMultiBi|

; 761  :     OALMSG(OAL_INFO, (L"-----------------------------------------------------------\r\n"));

  00070	e59f35c0	 ldr         r3, [pc, #0x5C0]
  00074	e5933440	 ldr         r3, [r3, #0x440]
  00078	e3130008	 tst         r3, #8
  0007c	0a000004	 beq         |$LN29@OEMMultiBi|
  00080	e59f05cc	 ldr         r0, [pc, #0x5CC]
  00084	eb000000	 bl          NKDbgPrintfW
  00088	e3a03001	 mov         r3, #1
  0008c	e58d3134	 str         r3, [sp, #0x134]
  00090	ea000001	 b           |$LN30@OEMMultiBi|
  00094		 |$LN29@OEMMultiBi|
  00094	e3a03000	 mov         r3, #0
  00098	e58d3134	 str         r3, [sp, #0x134]
  0009c		 |$LN30@OEMMultiBi|

; 762  : 
; 763  :     // Copy information to EBOOT structure and set also save address
; 764  :     g_eboot.numRegions = pInfo->dwNumRegions;

  0009c	e59d3170	 ldr         r3, [sp, #0x170]
  000a0	e5932000	 ldr         r2, [r3]
  000a4	e59f3598	 ldr         r3, [pc, #0x598]
  000a8	e5832008	 str         r2, [r3, #8]

; 765  :     for (ix = 0; ix < pInfo->dwNumRegions; ix++)

  000ac	e3a03000	 mov         r3, #0
  000b0	e58d300c	 str         r3, [sp, #0xC]
  000b4	ea000002	 b           |$LN24@OEMMultiBi|
  000b8		 |$LN23@OEMMultiBi|
  000b8	e59d300c	 ldr         r3, [sp, #0xC]
  000bc	e2833001	 add         r3, r3, #1
  000c0	e58d300c	 str         r3, [sp, #0xC]
  000c4		 |$LN24@OEMMultiBi|
  000c4	e59d200c	 ldr         r2, [sp, #0xC]
  000c8	e59d3170	 ldr         r3, [sp, #0x170]
  000cc	e5933000	 ldr         r3, [r3]
  000d0	e1520003	 cmp         r2, r3
  000d4	2a000056	 bcs         |$LN22@OEMMultiBi|

; 766  : 	{
; 767  :         g_eboot.region[ix].start = pInfo->Region[ix].dwRegionStart;

  000d8	e59d3170	 ldr         r3, [sp, #0x170]
  000dc	e2831004	 add         r1, r3, #4
  000e0	e59d200c	 ldr         r2, [sp, #0xC]
  000e4	e3a03f43	 mov         r3, #0x43, 30
  000e8	e0030392	 mul         r3, r2, r3
  000ec	e0810003	 add         r0, r1, r3
  000f0	e59d100c	 ldr         r1, [sp, #0xC]
  000f4	e3a0300c	 mov         r3, #0xC
  000f8	e0020391	 mul         r2, r1, r3
  000fc	e59f3540	 ldr         r3, [pc, #0x540]
  00100	e2833010	 add         r3, r3, #0x10
  00104	e0832002	 add         r2, r3, r2
  00108	e5903000	 ldr         r3, [r0]
  0010c	e5823000	 str         r3, [r2]

; 768  :         g_eboot.region[ix].length = pInfo->Region[ix].dwRegionLength;

  00110	e59d3170	 ldr         r3, [sp, #0x170]
  00114	e2831004	 add         r1, r3, #4
  00118	e59d200c	 ldr         r2, [sp, #0xC]
  0011c	e3a03f43	 mov         r3, #0x43, 30
  00120	e0030392	 mul         r3, r2, r3
  00124	e0813003	 add         r3, r1, r3
  00128	e2830004	 add         r0, r3, #4
  0012c	e59d100c	 ldr         r1, [sp, #0xC]
  00130	e3a0300c	 mov         r3, #0xC
  00134	e0020391	 mul         r2, r1, r3
  00138	e59f3504	 ldr         r3, [pc, #0x504]
  0013c	e2833010	 add         r3, r3, #0x10
  00140	e0833002	 add         r3, r3, r2
  00144	e2832004	 add         r2, r3, #4
  00148	e5903000	 ldr         r3, [r0]
  0014c	e5823000	 str         r3, [r2]

; 769  :         g_eboot.region[ix].base = base;

  00150	e59d100c	 ldr         r1, [sp, #0xC]
  00154	e3a0300c	 mov         r3, #0xC
  00158	e0020391	 mul         r2, r1, r3
  0015c	e59f34e0	 ldr         r3, [pc, #0x4E0]
  00160	e2833010	 add         r3, r3, #0x10
  00164	e0833002	 add         r3, r3, r2
  00168	e2832008	 add         r2, r3, #8
  0016c	e59d3010	 ldr         r3, [sp, #0x10]
  00170	e5823000	 str         r3, [r2]

; 770  :         base += g_eboot.region[ix].length;

  00174	e59d100c	 ldr         r1, [sp, #0xC]
  00178	e3a0300c	 mov         r3, #0xC
  0017c	e0020391	 mul         r2, r1, r3
  00180	e59f34bc	 ldr         r3, [pc, #0x4BC]
  00184	e2833010	 add         r3, r3, #0x10
  00188	e0833002	 add         r3, r3, r2
  0018c	e2833004	 add         r3, r3, #4
  00190	e59d2010	 ldr         r2, [sp, #0x10]
  00194	e5933000	 ldr         r3, [r3]
  00198	e0823003	 add         r3, r2, r3
  0019c	e58d3010	 str         r3, [sp, #0x10]

; 771  :         OALMSG(OAL_INFO, (L"[%d]: Address=0x%08x  Length=0x%08x  Save=0x%08x\r\n",
; 772  :             ix, g_eboot.region[ix].start, g_eboot.region[ix].length,g_eboot.region[ix].base));

  001a0	e59f3490	 ldr         r3, [pc, #0x490]
  001a4	e5933440	 ldr         r3, [r3, #0x440]
  001a8	e3130008	 tst         r3, #8
  001ac	0a00001d	 beq         |$LN31@OEMMultiBi|
  001b0	e59d100c	 ldr         r1, [sp, #0xC]
  001b4	e3a0300c	 mov         r3, #0xC
  001b8	e0020391	 mul         r2, r1, r3
  001bc	e59f3480	 ldr         r3, [pc, #0x480]
  001c0	e2833010	 add         r3, r3, #0x10
  001c4	e0833002	 add         r3, r3, r2
  001c8	e2833008	 add         r3, r3, #8
  001cc	e5933000	 ldr         r3, [r3]
  001d0	e58d3000	 str         r3, [sp]
  001d4	e59d100c	 ldr         r1, [sp, #0xC]
  001d8	e3a0300c	 mov         r3, #0xC
  001dc	e0020391	 mul         r2, r1, r3
  001e0	e59f345c	 ldr         r3, [pc, #0x45C]
  001e4	e2833010	 add         r3, r3, #0x10
  001e8	e0833002	 add         r3, r3, r2
  001ec	e2833004	 add         r3, r3, #4
  001f0	e5933000	 ldr         r3, [r3]
  001f4	e59d000c	 ldr         r0, [sp, #0xC]
  001f8	e3a0200c	 mov         r2, #0xC
  001fc	e0010290	 mul         r1, r0, r2
  00200	e59f243c	 ldr         r2, [pc, #0x43C]
  00204	e2822010	 add         r2, r2, #0x10
  00208	e0822001	 add         r2, r2, r1
  0020c	e5922000	 ldr         r2, [r2]
  00210	e59d100c	 ldr         r1, [sp, #0xC]
  00214	e59f043c	 ldr         r0, [pc, #0x43C]
  00218	eb000000	 bl          NKDbgPrintfW
  0021c	e3a03001	 mov         r3, #1
  00220	e58d3138	 str         r3, [sp, #0x138]
  00224	ea000001	 b           |$LN32@OEMMultiBi|
  00228		 |$LN31@OEMMultiBi|
  00228	e3a03000	 mov         r3, #0
  0022c	e58d3138	 str         r3, [sp, #0x138]
  00230		 |$LN32@OEMMultiBi|

; 773  : 	}

  00230	eaffffa0	 b           |$LN23@OEMMultiBi|
  00234		 |$LN22@OEMMultiBi|

; 774  :     OALMSG(OAL_INFO, (L"-----------------------------------------------------------\r\n"));

  00234	e59f33fc	 ldr         r3, [pc, #0x3FC]
  00238	e5933440	 ldr         r3, [r3, #0x440]
  0023c	e3130008	 tst         r3, #8
  00240	0a000004	 beq         |$LN33@OEMMultiBi|
  00244	e59f0408	 ldr         r0, [pc, #0x408]
  00248	eb000000	 bl          NKDbgPrintfW
  0024c	e3a03001	 mov         r3, #1
  00250	e58d313c	 str         r3, [sp, #0x13C]
  00254	ea000001	 b           |$LN34@OEMMultiBi|
  00258		 |$LN33@OEMMultiBi|
  00258	e3a03000	 mov         r3, #0
  0025c	e58d313c	 str         r3, [sp, #0x13C]
  00260		 |$LN34@OEMMultiBi|

; 775  : 
; 776  : #ifndef IMGMULTIXIP
; 777  : 
; 778  :     //Determine type of image downloaded
; 779  :     if (g_eboot.numRegions > 1) 

  00260	e59f33dc	 ldr         r3, [pc, #0x3DC]
  00264	e5933008	 ldr         r3, [r3, #8]
  00268	e3530001	 cmp         r3, #1
  0026c	9a00000b	 bls         |$LN21@OEMMultiBi|

; 780  :     {
; 781  :         OALMSG(OAL_ERROR, (L"ERROR: MultiXIP image is not supported\r\n"));

  00270	e59f33c0	 ldr         r3, [pc, #0x3C0]
  00274	e5933440	 ldr         r3, [r3, #0x440]
  00278	e3130001	 tst         r3, #1
  0027c	0a000004	 beq         |$LN35@OEMMultiBi|
  00280	e59f03c8	 ldr         r0, [pc, #0x3C8]
  00284	eb000000	 bl          NKDbgPrintfW
  00288	e3a03001	 mov         r3, #1
  0028c	e58d3140	 str         r3, [sp, #0x140]
  00290	ea000001	 b           |$LN36@OEMMultiBi|
  00294		 |$LN35@OEMMultiBi|
  00294	e3a03000	 mov         r3, #0
  00298	e58d3140	 str         r3, [sp, #0x140]
  0029c		 |$LN36@OEMMultiBi|

; 782  :         goto cleanUp;

  0029c	ea0000c5	 b           |$cleanUp$47771|
  002a0		 |$LN21@OEMMultiBi|

; 783  :     }
; 784  : #endif
; 785  : 
; 786  :     base = g_eboot.region[0].base;

  002a0	e59f339c	 ldr         r3, [pc, #0x39C]
  002a4	e5933018	 ldr         r3, [r3, #0x18]
  002a8	e58d3010	 str         r3, [sp, #0x10]

; 787  :     start = g_eboot.region[0].start;

  002ac	e59f3390	 ldr         r3, [pc, #0x390]
  002b0	e5933010	 ldr         r3, [r3, #0x10]
  002b4	e58d3014	 str         r3, [sp, #0x14]

; 788  :     length = g_eboot.region[0].length; 

  002b8	e59f3384	 ldr         r3, [pc, #0x384]
  002bc	e5933014	 ldr         r3, [r3, #0x14]
  002c0	e58d3008	 str         r3, [sp, #8]

; 789  :     
; 790  :     if (start == IMAGE_XLDR_CODE_PA)

  002c4	e59d2014	 ldr         r2, [sp, #0x14]
  002c8	e3a03101	 mov         r3, #1, 2
  002cc	e3833602	 orr         r3, r3, #2, 12
  002d0	e1520003	 cmp         r2, r3
  002d4	1a00000b	 bne         |$LN20@OEMMultiBi|

; 791  :         {
; 792  :         g_eboot.type = DOWNLOAD_TYPE_XLDR;

  002d8	e59f2364	 ldr         r2, [pc, #0x364]
  002dc	e3a03003	 mov         r3, #3
  002e0	e5823004	 str         r3, [r2, #4]

; 793  :         memset(OALPAtoCA(base), 0xFF, length);

  002e4	e3a01001	 mov         r1, #1
  002e8	e59d0010	 ldr         r0, [sp, #0x10]
  002ec	eb000000	 bl          OALPAtoVA
  002f0	e58d0144	 str         r0, [sp, #0x144]
  002f4	e59d2008	 ldr         r2, [sp, #8]
  002f8	e3a010ff	 mov         r1, #0xFF
  002fc	e59d0144	 ldr         r0, [sp, #0x144]
  00300	eb000000	 bl          memset
  00304	ea00009c	 b           |$LN19@OEMMultiBi|
  00308		 |$LN20@OEMMultiBi|

; 794  :         } 
; 795  :     else if (start == IMAGE_EBOOT_CODE_CA)

  00308	e59d2014	 ldr         r2, [sp, #0x14]
  0030c	e3a03487	 mov         r3, #0x87, 8
  00310	e383360e	 orr         r3, r3, #0xE, 12
  00314	e1520003	 cmp         r2, r3
  00318	1a00000b	 bne         |$LN18@OEMMultiBi|

; 796  :         {
; 797  :         g_eboot.type = DOWNLOAD_TYPE_EBOOT;

  0031c	e59f2320	 ldr         r2, [pc, #0x320]
  00320	e3a03004	 mov         r3, #4
  00324	e5823004	 str         r3, [r2, #4]

; 798  :         memset(OALPAtoCA(base), 0xFF, length);

  00328	e3a01001	 mov         r1, #1
  0032c	e59d0010	 ldr         r0, [sp, #0x10]
  00330	eb000000	 bl          OALPAtoVA
  00334	e58d0148	 str         r0, [sp, #0x148]
  00338	e59d2008	 ldr         r2, [sp, #8]
  0033c	e3a010ff	 mov         r1, #0xFF
  00340	e59d0148	 ldr         r0, [sp, #0x148]
  00344	eb000000	 bl          memset
  00348	ea00008b	 b           |$LN17@OEMMultiBi|
  0034c		 |$LN18@OEMMultiBi|

; 799  :         }
; 800  :     else if (start == (IMAGE_WINCE_CODE_CA + NAND_ROMOFFSET))

  0034c	e59d2014	 ldr         r2, [sp, #0x14]
  00350	e3a03103	 mov         r3, #3, 2
  00354	e3833a02	 orr         r3, r3, #2, 20
  00358	e1520003	 cmp         r2, r3
  0035c	1a00000b	 bne         |$LN16@OEMMultiBi|

; 801  :         {
; 802  :         g_eboot.type = DOWNLOAD_TYPE_FLASHNAND;

  00360	e59f22dc	 ldr         r2, [pc, #0x2DC]
  00364	e3a03006	 mov         r3, #6
  00368	e5823004	 str         r3, [r2, #4]

; 803  :         memset(OALPAtoCA(base), 0xFF, length);

  0036c	e3a01001	 mov         r1, #1
  00370	e59d0010	 ldr         r0, [sp, #0x10]
  00374	eb000000	 bl          OALPAtoVA
  00378	e58d014c	 str         r0, [sp, #0x14C]
  0037c	e59d2008	 ldr         r2, [sp, #8]
  00380	e3a010ff	 mov         r1, #0xFF
  00384	e59d014c	 ldr         r0, [sp, #0x14C]
  00388	eb000000	 bl          memset
  0038c	ea00007a	 b           |$LN15@OEMMultiBi|
  00390		 |$LN16@OEMMultiBi|

; 804  :         } 
; 805  : #ifdef IMGMULTIXIP
; 806  :     else if (start == (IMAGE_WINCE_EXT_CA))
; 807  :         {
; 808  :         g_eboot.type = DOWNLOAD_TYPE_EXT;
; 809  :         memset(OALPAtoCA(base), 0xFF, length);
; 810  :         } 
; 811  : #endif	
; 812  :     else if (start == (IMAGE_WINCE_CODE_CA + NOR_ROMOFFSET))

  00390	e59d2014	 ldr         r2, [sp, #0x14]
  00394	e3a0320e	 mov         r3, #0xE, 4
  00398	e3833a02	 orr         r3, r3, #2, 20
  0039c	e1520003	 cmp         r2, r3
  003a0	1a00000b	 bne         |$LN14@OEMMultiBi|

; 813  :         {
; 814  :         g_eboot.type = DOWNLOAD_TYPE_FLASHNOR;

  003a4	e59f2298	 ldr         r2, [pc, #0x298]
  003a8	e3a03007	 mov         r3, #7
  003ac	e5823004	 str         r3, [r2, #4]

; 815  :         memset(OALPAtoCA(base), 0xFF, length);

  003b0	e3a01001	 mov         r1, #1
  003b4	e59d0010	 ldr         r0, [sp, #0x10]
  003b8	eb000000	 bl          OALPAtoVA
  003bc	e58d0150	 str         r0, [sp, #0x150]
  003c0	e59d2008	 ldr         r2, [sp, #8]
  003c4	e3a010ff	 mov         r1, #0xFF
  003c8	e59d0150	 ldr         r0, [sp, #0x150]
  003cc	eb000000	 bl          memset
  003d0	ea000069	 b           |$LN13@OEMMultiBi|
  003d4		 |$LN14@OEMMultiBi|

; 816  :         } 
; 817  : 	else if (start == 0) // Probably a NB0 file, let's fint out

  003d4	e59d3014	 ldr         r3, [sp, #0x14]
  003d8	e3530000	 cmp         r3, #0
  003dc	1a000063	 bne         |$LN12@OEMMultiBi|

; 818  : 		{
; 819  : 		// Convert the file name to lower case
; 820  : 		CHAR szFileName[MAX_PATH];
; 821  : 		int i = 0;

  003e0	e3a03000	 mov         r3, #0
  003e4	e58d3018	 str         r3, [sp, #0x18]

; 822  : 		int fileExtPos = 0;

  003e8	e3a03000	 mov         r3, #0
  003ec	e58d3120	 str         r3, [sp, #0x120]
  003f0		 |$LN11@OEMMultiBi|

; 823  : 
; 824  : 		while ((pInfo->Region[0].szFileName[i] != '\0') && (i < MAX_PATH))

  003f0	e59d3170	 ldr         r3, [sp, #0x170]
  003f4	e283200c	 add         r2, r3, #0xC
  003f8	e59d3018	 ldr         r3, [sp, #0x18]
  003fc	e0823003	 add         r3, r2, r3
  00400	e1d330d0	 ldrsb       r3, [r3]
  00404	e3530000	 cmp         r3, #0
  00408	0a000033	 beq         |$LN10@OEMMultiBi|
  0040c	e59d3018	 ldr         r3, [sp, #0x18]
  00410	e3530f41	 cmp         r3, #0x41, 30
  00414	aa000030	 bge         |$LN10@OEMMultiBi|

; 825  : 		{
; 826  : 			if((pInfo->Region[0].szFileName[i] >= 'A') && (pInfo->Region[0].szFileName[i] <= 'Z')) 

  00418	e59d3170	 ldr         r3, [sp, #0x170]
  0041c	e283200c	 add         r2, r3, #0xC
  00420	e59d3018	 ldr         r3, [sp, #0x18]
  00424	e0823003	 add         r3, r2, r3
  00428	e1d330d0	 ldrsb       r3, [r3]
  0042c	e3530041	 cmp         r3, #0x41
  00430	ba000014	 blt         |$LN9@OEMMultiBi|
  00434	e59d3170	 ldr         r3, [sp, #0x170]
  00438	e283200c	 add         r2, r3, #0xC
  0043c	e59d3018	 ldr         r3, [sp, #0x18]
  00440	e0823003	 add         r3, r2, r3
  00444	e1d330d0	 ldrsb       r3, [r3]
  00448	e353005a	 cmp         r3, #0x5A
  0044c	ca00000d	 bgt         |$LN9@OEMMultiBi|

; 827  : 			{
; 828  : 				szFileName[i] = (pInfo->Region[0].szFileName[i] - 'A' + 'a'); 

  00450	e59d3170	 ldr         r3, [sp, #0x170]
  00454	e283200c	 add         r2, r3, #0xC
  00458	e59d3018	 ldr         r3, [sp, #0x18]
  0045c	e0823003	 add         r3, r2, r3
  00460	e1d330d0	 ldrsb       r3, [r3]
  00464	e2433041	 sub         r3, r3, #0x41
  00468	e2831061	 add         r1, r3, #0x61
  0046c	e28d201c	 add         r2, sp, #0x1C
  00470	e59d3018	 ldr         r3, [sp, #0x18]
  00474	e0822003	 add         r2, r2, r3
  00478	e1a03c01	 mov         r3, r1, lsl #24
  0047c	e1a03c43	 mov         r3, r3, asr #24
  00480	e5c23000	 strb        r3, [r2]

; 829  : 			}
; 830  : 			else

  00484	ea000008	 b           |$LN8@OEMMultiBi|
  00488		 |$LN9@OEMMultiBi|

; 831  : 			{
; 832  : 				szFileName[i] = pInfo->Region[0].szFileName[i];

  00488	e59d3170	 ldr         r3, [sp, #0x170]
  0048c	e283200c	 add         r2, r3, #0xC
  00490	e59d3018	 ldr         r3, [sp, #0x18]
  00494	e0821003	 add         r1, r2, r3
  00498	e28d201c	 add         r2, sp, #0x1C
  0049c	e59d3018	 ldr         r3, [sp, #0x18]
  004a0	e0822003	 add         r2, r2, r3
  004a4	e1d130d0	 ldrsb       r3, [r1]
  004a8	e5c23000	 strb        r3, [r2]
  004ac		 |$LN8@OEMMultiBi|

; 833  : 			}
; 834  : 
; 835  : 			// Keep track of file extension position
; 836  : 			if (szFileName[i] == '.')

  004ac	e28d201c	 add         r2, sp, #0x1C
  004b0	e59d3018	 ldr         r3, [sp, #0x18]
  004b4	e0823003	 add         r3, r2, r3
  004b8	e1d330d0	 ldrsb       r3, [r3]
  004bc	e353002e	 cmp         r3, #0x2E
  004c0	1a000001	 bne         |$LN7@OEMMultiBi|

; 837  : 			{
; 838  : 				fileExtPos = i;

  004c4	e59d3018	 ldr         r3, [sp, #0x18]
  004c8	e58d3120	 str         r3, [sp, #0x120]
  004cc		 |$LN7@OEMMultiBi|

; 839  : 			}
; 840  : 			i++;

  004cc	e59d3018	 ldr         r3, [sp, #0x18]
  004d0	e2833001	 add         r3, r3, #1
  004d4	e58d3018	 str         r3, [sp, #0x18]

; 841  : 		}

  004d8	eaffffc4	 b           |$LN11@OEMMultiBi|
  004dc		 |$LN10@OEMMultiBi|

; 842  : 
; 843  : 		// Copy string terminator as well
; 844  : 		szFileName[i] = pInfo->Region[0].szFileName[i];

  004dc	e59d3170	 ldr         r3, [sp, #0x170]
  004e0	e283200c	 add         r2, r3, #0xC
  004e4	e59d3018	 ldr         r3, [sp, #0x18]
  004e8	e0821003	 add         r1, r2, r3
  004ec	e28d201c	 add         r2, sp, #0x1C
  004f0	e59d3018	 ldr         r3, [sp, #0x18]
  004f4	e0822003	 add         r2, r2, r3
  004f8	e1d130d0	 ldrsb       r3, [r1]
  004fc	e5c23000	 strb        r3, [r2]

; 845  : 
; 846  : 		// Check if we support this file
; 847  : 		if (strncmp(szFileName, LOGO_NB0_FILE, LOGO_NB0_FILE_LEN) == 0)

  00500	e3a02008	 mov         r2, #8
  00504	e59f1140	 ldr         r1, [pc, #0x140]
  00508	e28d001c	 add         r0, sp, #0x1C
  0050c	eb000000	 bl          strncmp
  00510	e58d0154	 str         r0, [sp, #0x154]
  00514	e59d3154	 ldr         r3, [sp, #0x154]
  00518	e3530000	 cmp         r3, #0
  0051c	1a000006	 bne         |$LN6@OEMMultiBi|

; 848  : 		{
; 849  : 			// Remap the start address to the correct NAND location of the logo
; 850  : 			g_eboot.region[0].start = IMAGE_XLDR_BOOTSEC_NAND_SIZE + IMAGE_EBOOT_BOOTSEC_NAND_SIZE;

  00520	e59f211c	 ldr         r2, [pc, #0x11C]
  00524	e3a03703	 mov         r3, #3, 14
  00528	e5823010	 str         r3, [r2, #0x10]

; 851  : 			g_eboot.type = DOWNLOAD_TYPE_LOGO;

  0052c	e59f2110	 ldr         r2, [pc, #0x110]
  00530	e3a03008	 mov         r3, #8
  00534	e5823004	 str         r3, [r2, #4]

; 852  : 		}
; 853  : 		else

  00538	ea00000b	 b           |$LN5@OEMMultiBi|
  0053c		 |$LN6@OEMMultiBi|

; 854  : 		{
; 855  : 		    OALMSG(OAL_ERROR, (L"Unsupported downloaded file\r\n"));

  0053c	e59f30f4	 ldr         r3, [pc, #0xF4]
  00540	e5933440	 ldr         r3, [r3, #0x440]
  00544	e3130001	 tst         r3, #1
  00548	0a000004	 beq         |$LN37@OEMMultiBi|
  0054c	e59f00f4	 ldr         r0, [pc, #0xF4]
  00550	eb000000	 bl          NKDbgPrintfW
  00554	e3a03001	 mov         r3, #1
  00558	e58d3158	 str         r3, [sp, #0x158]
  0055c	ea000001	 b           |$LN38@OEMMultiBi|
  00560		 |$LN37@OEMMultiBi|
  00560	e3a03000	 mov         r3, #0
  00564	e58d3158	 str         r3, [sp, #0x158]
  00568		 |$LN38@OEMMultiBi|

; 856  : 			goto cleanUp;

  00568	ea000012	 b           |$cleanUp$47771|
  0056c		 |$LN5@OEMMultiBi|

; 857  : 		}
; 858  : 		}
; 859  :     else 

  0056c	ea000002	 b           |$LN4@OEMMultiBi|
  00570		 |$LN12@OEMMultiBi|

; 860  :         {
; 861  :         g_eboot.type = DOWNLOAD_TYPE_RAM;

  00570	e59f20cc	 ldr         r2, [pc, #0xCC]
  00574	e3a03001	 mov         r3, #1
  00578	e5823004	 str         r3, [r2, #4]
  0057c		 |$LN4@OEMMultiBi|
  0057c		 |$LN13@OEMMultiBi|
  0057c		 |$LN15@OEMMultiBi|
  0057c		 |$LN17@OEMMultiBi|
  0057c		 |$LN19@OEMMultiBi|

; 862  :         }
; 863  : 
; 864  :     OALMSG(OAL_INFO, (L"Download file type: %d\r\n", g_eboot.type));

  0057c	e59f30b4	 ldr         r3, [pc, #0xB4]
  00580	e5933440	 ldr         r3, [r3, #0x440]
  00584	e3130008	 tst         r3, #8
  00588	0a000006	 beq         |$LN39@OEMMultiBi|
  0058c	e59f30b0	 ldr         r3, [pc, #0xB0]
  00590	e5931004	 ldr         r1, [r3, #4]
  00594	e59f00a4	 ldr         r0, [pc, #0xA4]
  00598	eb000000	 bl          NKDbgPrintfW
  0059c	e3a03001	 mov         r3, #1
  005a0	e58d315c	 str         r3, [sp, #0x15C]
  005a4	ea000001	 b           |$LN40@OEMMultiBi|
  005a8		 |$LN39@OEMMultiBi|
  005a8	e3a03000	 mov         r3, #0
  005ac	e58d315c	 str         r3, [sp, #0x15C]
  005b0		 |$LN40@OEMMultiBi|

; 865  :     
; 866  :     rc = TRUE;

  005b0	e3a03001	 mov         r3, #1
  005b4	e58d3004	 str         r3, [sp, #4]
  005b8		 |$cleanUp$47771|

; 867  : 
; 868  : cleanUp:
; 869  :     if (!rc) 

  005b8	e59d3004	 ldr         r3, [sp, #4]
  005bc	e3530000	 cmp         r3, #0
  005c0	1a00000b	 bne         |$LN3@OEMMultiBi|

; 870  : 	{
; 871  :         OALMSG(OAL_ERROR, (L"Spin for ever...\r\n"));

  005c4	e59f306c	 ldr         r3, [pc, #0x6C]
  005c8	e5933440	 ldr         r3, [r3, #0x440]
  005cc	e3130001	 tst         r3, #1
  005d0	0a000004	 beq         |$LN41@OEMMultiBi|
  005d4	e59f0060	 ldr         r0, [pc, #0x60]
  005d8	eb000000	 bl          NKDbgPrintfW
  005dc	e3a03001	 mov         r3, #1
  005e0	e58d3160	 str         r3, [sp, #0x160]
  005e4	ea000001	 b           |$LN42@OEMMultiBi|
  005e8		 |$LN41@OEMMultiBi|
  005e8	e3a03000	 mov         r3, #0
  005ec	e58d3160	 str         r3, [sp, #0x160]
  005f0		 |$LN42@OEMMultiBi|
  005f0		 |$LN2@OEMMultiBi|

; 872  :         for(;;);

  005f0	eafffffe	 b           |$LN2@OEMMultiBi|
  005f4		 |$LN3@OEMMultiBi|

; 873  : 	}
; 874  :     OALMSG(OAL_INFO, (L"-OEMMultiBinNotify\r\n"));

  005f4	e59f303c	 ldr         r3, [pc, #0x3C]
  005f8	e5933440	 ldr         r3, [r3, #0x440]
  005fc	e3130008	 tst         r3, #8
  00600	0a000004	 beq         |$LN43@OEMMultiBi|
  00604	e59f0028	 ldr         r0, [pc, #0x28]
  00608	eb000000	 bl          NKDbgPrintfW
  0060c	e3a03001	 mov         r3, #1
  00610	e58d3164	 str         r3, [sp, #0x164]
  00614	ea000001	 b           |$LN44@OEMMultiBi|
  00618		 |$LN43@OEMMultiBi|
  00618	e3a03000	 mov         r3, #0
  0061c	e58d3164	 str         r3, [sp, #0x164]
  00620		 |$LN44@OEMMultiBi|

; 753  : {

  00620	e59d0124	 ldr         r0, [sp, #0x124]
  00624	eb000000	 bl          __security_check_cookie

; 875  : }

  00628	e28ddf5a	 add         sp, sp, #0x5A, 30
  0062c	e89d6000	 ldmia       sp, {sp, lr}
  00630	e12fff1e	 bx          lr
  00634		 |$LN48@OEMMultiBi|
  00634		 |$LN49@OEMMultiBi|
  00634	00000000	 DCD         |??_C@_1CK@FDDKFJJE@?$AA?9?$AAO?$AAE?$AAM?$AAM?$AAu?$AAl?$AAt?$AAi?$AAB?$AAi?$AAn?$AAN?$AAo?$AAt?$AAi?$AAf?$AAy?$AA?$AN?$AA?6?$AA?$AA@|
  00638		 |$LN50@OEMMultiBi|
  00638	00000000	 DCD         |dpCurSettings|
  0063c		 |$LN51@OEMMultiBi|
  0063c	00000000	 DCD         |??_C@_1CG@JHMEBKAH@?$AAS?$AAp?$AAi?$AAn?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAe?$AAv?$AAe?$AAr?$AA?4?$AA?4?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00640		 |$LN52@OEMMultiBi|
  00640	00000000	 DCD         |??_C@_1DC@FNKKGJOD@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00644		 |$LN53@OEMMultiBi|
  00644	00000000	 DCD         |g_eboot|
  00648		 |$LN54@OEMMultiBi|
  00648	00000000	 DCD         |??_C@_1DM@CJMKOEPD@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAd?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AAe?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  0064c		 |$LN55@OEMMultiBi|
  0064c	00000000	 DCD         |??_C@_08CMMENMPK@logo?4nb0?$AA@|
  00650		 |$LN56@OEMMultiBi|
  00650	00000000	 DCD         |??_C@_1FC@BJIBFLEA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAu?$AAl?$AAt?$AAi?$AAX?$AAI?$AAP?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAu?$AAp@|
  00654		 |$LN57@OEMMultiBi|
  00654	00000000	 DCD         |??_C@_1HM@MNPMBDFE@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  00658		 |$LN58@OEMMultiBi|
  00658	00000000	 DCD         |??_C@_1GG@NLHBBJNL@?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?3?$AA?5?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AA?5?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA0?$AAx?$AA?$CF@|
  0065c		 |$LN59@OEMMultiBi|
  0065c	00000000	 DCD         |??_C@_1DK@OFMGKCPE@?$AAD?$AAo?$AAw?$AAn?$AAl?$AAo?$AAa?$AAd?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAi?$AAn?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  00660		 |$LN60@OEMMultiBi|
  00660	00000000	 DCD         |__security_cookie|
  00664		 |$M48240|

			 ENDP  ; |OEMMultiBinNotify|

	EXPORT	|??_C@_1GC@BMCFFGLH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAM?$AAa?$AAp?$AAM?$AAe?$AAm?$AAA?$AAd?$AAd?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAo@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T48276| DCD	|$LN24@OEMMapMemA|
	DCD	0x40004504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@BMCFFGLH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAM?$AAa?$AAp?$AAM?$AAe?$AAm?$AAA?$AAd?$AAd?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "M", 0x0, "a", 0x0, "p"
	DCB	0x0, "M", 0x0, "e", 0x0, "m", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "d"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMMapMemAddr| PROC

; 892  : {

  00000		 |$LN24@OEMMapMemA|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M48273|

; 893  :     UINT8 *pAddress = NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 894  : 
; 895  :     //OALMSG(OAL_INFO, (L"+OEMMapMemAddr(0x%08x, 0x%08x)\r\n", image, address));
; 896  :     
; 897  :     switch (g_eboot.type) {

  00018	e59f30ec	 ldr         r3, [pc, #0xEC]
  0001c	e5933004	 ldr         r3, [r3, #4]
  00020	e58d3008	 str         r3, [sp, #8]
  00024	e59d3008	 ldr         r3, [sp, #8]
  00028	e2433001	 sub         r3, r3, #1
  0002c	e58d3008	 str         r3, [sp, #8]
  00030	e59d3008	 ldr         r3, [sp, #8]
  00034	e3530007	 cmp         r3, #7
  00038	8a00001f	 bhi         |$LN1@OEMMapMemA|
  0003c	e59d2008	 ldr         r2, [sp, #8]
  00040	e1a03102	 mov         r3, r2, lsl #2
  00044	e083300f	 add         r3, r3, pc
  00048	e5933004	 ldr         r3, [r3, #4]
  0004c	e08ff003	 add         pc, pc, r3
  00050		 |$LN13@OEMMapMemA|
  00050		 |$LN12@OEMMapMemA|
  00050		 |$LN14@OEMMapMemA|
  00050	0000003c	 DCD         0x3c
  00054		 |$LN15@OEMMapMemA|
  00054	00000068	 DCD         0x68
  00058		 |$LN16@OEMMapMemA|
  00058	0000001c	 DCD         0x1c
  0005c		 |$LN17@OEMMapMemA|
  0005c	0000001c	 DCD         0x1c
  00060		 |$LN18@OEMMapMemA|
  00060	00000068	 DCD         0x68
  00064		 |$LN19@OEMMapMemA|
  00064	00000048	 DCD         0x48
  00068		 |$LN20@OEMMapMemA|
  00068	00000058	 DCD         0x58
  0006c		 |$LN21@OEMMapMemA|
  0006c	0000001c	 DCD         0x1c
  00070		 |$LN5@OEMMapMemA|

; 898  : 
; 899  :         
; 900  :     case DOWNLOAD_TYPE_XLDR:
; 901  :     case DOWNLOAD_TYPE_EBOOT:   
; 902  : 	case DOWNLOAD_TYPE_LOGO:
; 903  :         //  Map to scratch RAM prior to flashing
; 904  :         pAddress = (UINT8*)g_eboot.region[0].base + (address - image);

  00070	e59d201c	 ldr         r2, [sp, #0x1C]
  00074	e59d3018	 ldr         r3, [sp, #0x18]
  00078	e0422003	 sub         r2, r2, r3
  0007c	e59f3088	 ldr         r3, [pc, #0x88]
  00080	e5933018	 ldr         r3, [r3, #0x18]
  00084	e0833002	 add         r3, r3, r2
  00088	e58d3000	 str         r3, [sp]

; 905  :         break;

  0008c	ea000017	 b           |$LN6@OEMMapMemA|
  00090		 |$LN4@OEMMapMemA|

; 906  : 
; 907  :     case DOWNLOAD_TYPE_RAM:            
; 908  :         //  RAM based NK.BIN and EBOOT.BIN files are given in virtual memory addresses
; 909  :         pAddress = (UINT8*)address;

  00090	e59d301c	 ldr         r3, [sp, #0x1C]
  00094	e58d3000	 str         r3, [sp]

; 910  :         break;

  00098	ea000014	 b           |$LN6@OEMMapMemA|
  0009c		 |$LN3@OEMMapMemA|

; 911  : 
; 912  :     case DOWNLOAD_TYPE_FLASHNAND:
; 913  :         pAddress = (UINT8*) (address - NAND_ROMOFFSET);

  0009c	e59d301c	 ldr         r3, [sp, #0x1C]
  000a0	e2433101	 sub         r3, r3, #1, 2
  000a4	e58d3000	 str         r3, [sp]

; 914  :         break;

  000a8	ea000010	 b           |$LN6@OEMMapMemA|
  000ac		 |$LN2@OEMMapMemA|

; 915  : 
; 916  : 	case DOWNLOAD_TYPE_FLASHNOR:
; 917  :         pAddress = (UINT8*) (address - NOR_ROMOFFSET);

  000ac	e59d301c	 ldr         r3, [sp, #0x1C]
  000b0	e2433206	 sub         r3, r3, #6, 4
  000b4	e58d3000	 str         r3, [sp]

; 918  :         break;

  000b8	ea00000c	 b           |$LN6@OEMMapMemA|
  000bc		 |$LN1@OEMMapMemA|

; 919  : 		
; 920  : #ifdef IMGMULTIXIP
; 921  : 	case DOWNLOAD_TYPE_EXT:
; 922  :         pAddress = (UINT8*) (address);
; 923  :         break;
; 924  : #endif
; 925  : 
; 926  :     default:
; 927  :         OALMSG(OAL_ERROR, (L"ERROR: OEMMapMemAddr: " L"Invalid download type %d\r\n", g_eboot.type
; 928  :         ));

  000bc	e59f304c	 ldr         r3, [pc, #0x4C]
  000c0	e5933440	 ldr         r3, [r3, #0x440]
  000c4	e3130001	 tst         r3, #1
  000c8	0a000006	 beq         |$LN10@OEMMapMemA|
  000cc	e59f3038	 ldr         r3, [pc, #0x38]
  000d0	e5931004	 ldr         r1, [r3, #4]
  000d4	e59f002c	 ldr         r0, [pc, #0x2C]
  000d8	eb000000	 bl          NKDbgPrintfW
  000dc	e3a03001	 mov         r3, #1
  000e0	e58d300c	 str         r3, [sp, #0xC]
  000e4	ea000001	 b           |$LN11@OEMMapMemA|
  000e8		 |$LN10@OEMMapMemA|
  000e8	e3a03000	 mov         r3, #0
  000ec	e58d300c	 str         r3, [sp, #0xC]
  000f0		 |$LN11@OEMMapMemA|
  000f0		 |$LN6@OEMMapMemA|

; 929  : 
; 930  :     }
; 931  : 
; 932  :     //OALMSGS(OAL_INFO, (L"-OEMMapMemAddr(pAddress = 0x%08x)\r\n", pAddress));
; 933  :     return pAddress;

  000f0	e59d3000	 ldr         r3, [sp]
  000f4	e58d3004	 str         r3, [sp, #4]

; 934  : }

  000f8	e59d0004	 ldr         r0, [sp, #4]
  000fc	e28dd010	 add         sp, sp, #0x10
  00100	e89d6000	 ldmia       sp, {sp, lr}
  00104	e12fff1e	 bx          lr
  00108		 |$LN25@OEMMapMemA|
  00108		 |$LN26@OEMMapMemA|
  00108	00000000	 DCD         |??_C@_1GC@BMCFFGLH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAM?$AAa?$AAp?$AAM?$AAe?$AAm?$AAA?$AAd?$AAd?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAo@|
  0010c		 |$LN27@OEMMapMemA|
  0010c	00000000	 DCD         |g_eboot|
  00110		 |$LN28@OEMMapMemA|
  00110	00000000	 DCD         |dpCurSettings|
  00114		 |$M48274|

			 ENDP  ; |OEMMapMemAddr|

	EXPORT	|??_C@_1DG@FBKAGMKG@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAs?$AAF?$AAl?$AAa?$AAs?$AAh?$AAA?$AAd?$AAd?$AAr?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@JMLJAABG@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAs?$AAF?$AAl?$AAa?$AAs?$AAh?$AAA?$AAd?$AAd?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMIsFlashAddr|

  00000			 AREA	 |.pdata|, PDATA
|$T48301| DCD	|$LN22@OEMIsFlash|
	DCD	0x40004004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@FBKAGMKG@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAs?$AAF?$AAl?$AAa?$AAs?$AAh?$AAA?$AAd?$AAd?$AAr?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "s", 0x0, "F"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "A", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@JMLJAABG@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAs?$AAF?$AAl?$AAa?$AAs?$AAh?$AAA?$AAd?$AAd?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "s", 0x0, "F"
	DCB	0x0, "l", 0x0, "a", 0x0, "s", 0x0, "h", 0x0, "A", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMIsFlashAddr| PROC

; 950  : {

  00000		 |$LN22@OEMIsFlash|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M48298|

; 951  :     BOOL rc;
; 952  : 
; 953  : 	UNREFERENCED_PARAMETER(address);
; 954  : 
; 955  :     OALMSG(OAL_INFO, (L"+OEMIsFlashAddr(0x%08x)\r\n", address));

  00010	e59f30dc	 ldr         r3, [pc, #0xDC]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130008	 tst         r3, #8
  0001c	0a000005	 beq         |$LN7@OEMIsFlash|
  00020	e59d101c	 ldr         r1, [sp, #0x1C]
  00024	e59f00d0	 ldr         r0, [pc, #0xD0]
  00028	eb000000	 bl          NKDbgPrintfW
  0002c	e3a03001	 mov         r3, #1
  00030	e58d3008	 str         r3, [sp, #8]
  00034	ea000001	 b           |$LN8@OEMIsFlash|
  00038		 |$LN7@OEMIsFlash|
  00038	e3a03000	 mov         r3, #0
  0003c	e58d3008	 str         r3, [sp, #8]
  00040		 |$LN8@OEMIsFlash|

; 956  : 
; 957  :     // Depending on download type
; 958  :     switch (g_eboot.type)

  00040	e59f30b0	 ldr         r3, [pc, #0xB0]
  00044	e5933004	 ldr         r3, [r3, #4]
  00048	e58d300c	 str         r3, [sp, #0xC]
  0004c	e59d300c	 ldr         r3, [sp, #0xC]
  00050	e2433003	 sub         r3, r3, #3
  00054	e58d300c	 str         r3, [sp, #0xC]
  00058	e59d300c	 ldr         r3, [sp, #0xC]
  0005c	e3530006	 cmp         r3, #6
  00060	8a00000e	 bhi         |$LN1@OEMIsFlash|
  00064	e59d200c	 ldr         r2, [sp, #0xC]
  00068	e1a03102	 mov         r3, r2, lsl #2
  0006c	e083300f	 add         r3, r3, pc
  00070	e5933004	 ldr         r3, [r3, #4]
  00074	e08ff003	 add         pc, pc, r3
  00078		 |$LN12@OEMIsFlash|
  00078		 |$LN11@OEMIsFlash|
  00078		 |$LN13@OEMIsFlash|
  00078	00000018	 DCD         0x18
  0007c		 |$LN14@OEMIsFlash|
  0007c	00000018	 DCD         0x18
  00080		 |$LN15@OEMIsFlash|
  00080	00000024	 DCD         0x24
  00084		 |$LN16@OEMIsFlash|
  00084	00000018	 DCD         0x18
  00088		 |$LN17@OEMIsFlash|
  00088	00000018	 DCD         0x18
  0008c		 |$LN18@OEMIsFlash|
  0008c	00000018	 DCD         0x18
  00090		 |$LN19@OEMIsFlash|
  00090	00000018	 DCD         0x18
  00094		 |$LN2@OEMIsFlash|

; 959  :         {
; 960  :         case DOWNLOAD_TYPE_XLDR:
; 961  :         case DOWNLOAD_TYPE_EBOOT:
; 962  :         case DOWNLOAD_TYPE_LOGO:
; 963  :         case DOWNLOAD_TYPE_FLASHNAND:
; 964  :         case DOWNLOAD_TYPE_FLASHNOR:
; 965  :         case DOWNLOAD_TYPE_EXT:
; 966  :             rc = TRUE;

  00094	e3a03001	 mov         r3, #1
  00098	e58d3000	 str         r3, [sp]

; 967  :             break;

  0009c	ea000001	 b           |$LN3@OEMIsFlash|
  000a0		 |$LN1@OEMIsFlash|

; 968  :         default:
; 969  :             rc = FALSE;

  000a0	e3a03000	 mov         r3, #0
  000a4	e58d3000	 str         r3, [sp]
  000a8		 |$LN3@OEMIsFlash|

; 970  :             break;
; 971  :         }
; 972  : 
; 973  :     OALMSG(OAL_INFO, (L"-OEMIsFlashAddr(rc = %d)\r\n", rc));

  000a8	e59f3044	 ldr         r3, [pc, #0x44]
  000ac	e5933440	 ldr         r3, [r3, #0x440]
  000b0	e3130008	 tst         r3, #8
  000b4	0a000005	 beq         |$LN9@OEMIsFlash|
  000b8	e59d1000	 ldr         r1, [sp]
  000bc	e59f002c	 ldr         r0, [pc, #0x2C]
  000c0	eb000000	 bl          NKDbgPrintfW
  000c4	e3a03001	 mov         r3, #1
  000c8	e58d3010	 str         r3, [sp, #0x10]
  000cc	ea000001	 b           |$LN10@OEMIsFlash|
  000d0		 |$LN9@OEMIsFlash|
  000d0	e3a03000	 mov         r3, #0
  000d4	e58d3010	 str         r3, [sp, #0x10]
  000d8		 |$LN10@OEMIsFlash|

; 974  :     return rc;

  000d8	e59d3000	 ldr         r3, [sp]
  000dc	e58d3004	 str         r3, [sp, #4]

; 975  : }

  000e0	e59d0004	 ldr         r0, [sp, #4]
  000e4	e28dd014	 add         sp, sp, #0x14
  000e8	e89d6000	 ldmia       sp, {sp, lr}
  000ec	e12fff1e	 bx          lr
  000f0		 |$LN23@OEMIsFlash|
  000f0		 |$LN24@OEMIsFlash|
  000f0	00000000	 DCD         |??_C@_1DG@FBKAGMKG@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAs?$AAF?$AAl?$AAa?$AAs?$AAh?$AAA?$AAd?$AAd?$AAr?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000f4		 |$LN25@OEMIsFlash|
  000f4	00000000	 DCD         |dpCurSettings|
  000f8		 |$LN26@OEMIsFlash|
  000f8	00000000	 DCD         |g_eboot|
  000fc		 |$LN27@OEMIsFlash|
  000fc	00000000	 DCD         |??_C@_1DE@JMLJAABG@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAs?$AAF?$AAl?$AAa?$AAs?$AAh?$AAA?$AAd?$AAd?$AAr?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00100		 |$M48299|

			 ENDP  ; |OEMIsFlashAddr|

	EXPORT	|OEMReadData|
	IMPORT	|BLEthReadData|
	IMPORT	|BLSDCardReadData|

  00000			 AREA	 |.pdata|, PDATA
|$T48314| DCD	|$LN9@OEMReadDat|
	DCD	0x40002404
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMReadData| PROC

; 989  : {

  00000		 |$LN9@OEMReadDat|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M48311|

; 990  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 991  :     switch (g_eboot.bootDeviceType)

  00018	e59f306c	 ldr         r3, [pc, #0x6C]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3008	 str         r3, [sp, #8]
  00024	e59d3008	 ldr         r3, [sp, #8]
  00028	e3530002	 cmp         r3, #2
  0002c	0a00000a	 beq         |$LN1@OEMReadDat|
  00030	e59d3008	 ldr         r3, [sp, #8]
  00034	e3530004	 cmp         r3, #4
  00038	0a000000	 beq         |$LN2@OEMReadDat|
  0003c	ea00000c	 b           |$LN3@OEMReadDat|
  00040		 |$LN2@OEMReadDat|

; 992  :         {
; 993  :         #if BUILDING_EBOOT_SD
; 994  :         case BOOT_SDCARD_TYPE:
; 995  :             rc = BLSDCardReadData(size, pData);

  00040	e59d1020	 ldr         r1, [sp, #0x20]
  00044	e59d001c	 ldr         r0, [sp, #0x1C]
  00048	eb000000	 bl          BLSDCardReadData
  0004c	e58d000c	 str         r0, [sp, #0xC]
  00050	e59d300c	 ldr         r3, [sp, #0xC]
  00054	e58d3000	 str         r3, [sp]

; 996  :             break;

  00058	ea000005	 b           |$LN3@OEMReadDat|
  0005c		 |$LN1@OEMReadDat|

; 997  :         #endif
; 998  :         case OAL_KITL_TYPE_ETH:
; 999  :             rc = BLEthReadData(size, pData);

  0005c	e59d1020	 ldr         r1, [sp, #0x20]
  00060	e59d001c	 ldr         r0, [sp, #0x1C]
  00064	eb000000	 bl          BLEthReadData
  00068	e58d0010	 str         r0, [sp, #0x10]
  0006c	e59d3010	 ldr         r3, [sp, #0x10]
  00070	e58d3000	 str         r3, [sp]
  00074		 |$LN3@OEMReadDat|

; 1000 :             break;
; 1001 :         }
; 1002 :     return rc;

  00074	e59d3000	 ldr         r3, [sp]
  00078	e58d3004	 str         r3, [sp, #4]

; 1003 : }

  0007c	e59d0004	 ldr         r0, [sp, #4]
  00080	e28dd014	 add         sp, sp, #0x14
  00084	e89d6000	 ldmia       sp, {sp, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN10@OEMReadDat|
  0008c		 |$LN11@OEMReadDat|
  0008c	00000000	 DCD         |g_eboot|
  00090		 |$M48312|

			 ENDP  ; |OEMReadData|

	EXPORT	|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMShowProgress|

  00000			 AREA	 |.pdata|, PDATA
|$T48323| DCD	|$LN5@OEMShowPro@2|
	DCD	0x40000803

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@| DCB ".", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMShowProgress| PROC

; 1016 : {

  00000		 |$LN5@OEMShowPro@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M48320|

; 1017 :     UNREFERENCED_PARAMETER(packetNumber);
; 1018 :     RETAILMSG(1,(TEXT(".")));

  0000c	e59f0008	 ldr         r0, [pc, #8]
  00010	eb000000	 bl          NKDbgPrintfW

; 1019 : }

  00014	e89d6000	 ldmia       sp, {sp, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$LN6@OEMShowPro@2|
  0001c		 |$LN7@OEMShowPro@2|
  0001c	00000000	 DCD         |??_C@_13JOFGPIOO@?$AA?4?$AA?$AA@|
  00020		 |$M48321|

			 ENDP  ; |OEMShowProgress|

	EXPORT	|OALGetTickCount|

  00000			 AREA	 |.pdata|, PDATA
|$T48333| DCD	|$LN5@OALGetTick|
	DCD	0x40001202
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALGetTickCount| PROC

; 1028 : {

  00000		 |$LN5@OALGetTick|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M48330|

; 1029 :     OMAP_GPTIMER_REGS *pGPTimerRegs = OALPAtoUA(OMAP_GPTIMER1_REGS_PA);

  00008	e3a01000	 mov         r1, #0
  0000c	e3a00312	 mov         r0, #0x12, 6
  00010	e38009c6	 orr         r0, r0, #0xC6, 18
  00014	eb000000	 bl          OALPAtoVA
  00018	e58d0008	 str         r0, [sp, #8]
  0001c	e59d3008	 ldr         r3, [sp, #8]
  00020	e58d3000	 str         r3, [sp]

; 1030 :     return INREG32(&pGPTimerRegs->TCRR) >> 5;

  00024	e59d3000	 ldr         r3, [sp]
  00028	e2833028	 add         r3, r3, #0x28
  0002c	e5933000	 ldr         r3, [r3]
  00030	e1a032a3	 mov         r3, r3, lsr #5
  00034	e58d3004	 str         r3, [sp, #4]

; 1031 : }

  00038	e59d0004	 ldr         r0, [sp, #4]
  0003c	e28dd00c	 add         sp, sp, #0xC
  00040	e49de004	 ldr         lr, [sp], #4
  00044	e12fff1e	 bx          lr
  00048		 |$M48331|

			 ENDP  ; |OALGetTickCount|

	EXPORT	|OEMKitlGetSecs|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T48342| DCD	|$LN5@OEMKitlGet|
	DCD	0x40000c02
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMKitlGetSecs| PROC

; 1042 : {

  00000		 |$LN5@OEMKitlGet|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M48339|

; 1043 :     return OALGetTickCount()/1000;

  00008	eb000000	 bl          OALGetTickCount
  0000c	e58d0004	 str         r0, [sp, #4]
  00010	e59d1004	 ldr         r1, [sp, #4]
  00014	e3a00ffa	 mov         r0, #0xFA, 30
  00018	eb000000	 bl          __rt_udiv
  0001c	e58d0000	 str         r0, [sp]

; 1044 : }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd008	 add         sp, sp, #8
  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$M48340|

			 ENDP  ; |OEMKitlGetSecs|

	EXPORT	|GetDisplayResolutionFromBootArgs|

  00000			 AREA	 |.pdata|, PDATA
|$T48349| DCD	|$LN5@GetDisplay|
	DCD	0x40000a03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetDisplayResolutionFromBootArgs| PROC

; 1051 : {

  00000		 |$LN5@GetDisplay|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M48346|

; 1052 :     *pDispRes=g_bootCfg.displayRes;

  0000c	e59f3010	 ldr         r3, [pc, #0x10]
  00010	e593206c	 ldr         r2, [r3, #0x6C]
  00014	e59d3008	 ldr         r3, [sp, #8]
  00018	e5832000	 str         r2, [r3]

; 1053 : }

  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN6@GetDisplay|
  00024		 |$LN7@GetDisplay|
  00024	00000000	 DCD         |g_bootCfg|
  00028		 |$M48347|

			 ENDP  ; |GetDisplayResolutionFromBootArgs|

	EXPORT	|IsDVIMode|

  00000			 AREA	 |.pdata|, PDATA
|$T48359| DCD	|$LN7@IsDVIMode|
	DCD	0x40001102
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IsDVIMode| PROC

; 1057 : {

  00000		 |$LN7@IsDVIMode|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M48356|

; 1058 :     DWORD dispRes;    
; 1059 :     GetDisplayResolutionFromBootArgs(&dispRes);

  00008	e28d0000	 add         r0, sp, #0
  0000c	eb000000	 bl          GetDisplayResolutionFromBootArgs

; 1060 :     if (dispRes==OMAP_LCD_DEFAULT)

  00010	e59d3000	 ldr         r3, [sp]
  00014	e3530000	 cmp         r3, #0
  00018	1a000003	 bne         |$LN2@IsDVIMode|

; 1061 :         return FALSE;

  0001c	e3a03000	 mov         r3, #0
  00020	e58d3004	 str         r3, [sp, #4]
  00024	ea000002	 b           |$LN3@IsDVIMode|

; 1062 :     else

  00028	ea000001	 b           |$LN1@IsDVIMode|
  0002c		 |$LN2@IsDVIMode|

; 1063 :         return TRUE;        

  0002c	e3a03001	 mov         r3, #1
  00030	e58d3004	 str         r3, [sp, #4]
  00034		 |$LN1@IsDVIMode|
  00034		 |$LN3@IsDVIMode|

; 1064 : }

  00034	e59d0004	 ldr         r0, [sp, #4]
  00038	e28dd008	 add         sp, sp, #8
  0003c	e49de004	 ldr         lr, [sp], #4
  00040	e12fff1e	 bx          lr
  00044		 |$M48357|

			 ENDP  ; |IsDVIMode|

	EXPORT	|ConvertCAtoPA|

  00000			 AREA	 |.pdata|, PDATA
|$T48367| DCD	|$LN5@ConvertCAt|
	DCD	0x40000d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ConvertCAtoPA| PROC

; 1068 : {   

  00000		 |$LN5@ConvertCAt|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M48364|

; 1069 :     return OALVAtoPA(va);

  00010	e59d0010	 ldr         r0, [sp, #0x10]
  00014	eb000000	 bl          OALVAtoPA
  00018	e58d0004	 str         r0, [sp, #4]
  0001c	e59d3004	 ldr         r3, [sp, #4]
  00020	e58d3000	 str         r3, [sp]

; 1070 : }

  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd008	 add         sp, sp, #8
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M48365|

			 ENDP  ; |ConvertCAtoPA|

	END
