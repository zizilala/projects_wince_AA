; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\OAL\OALLIB\init.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|dwOEMDrWatsonSize| [ DATA ]
	EXPORT	|dwOEMHighSecurity| [ DATA ]
	EXPORT	|dwBank1Enabled| [ DATA ]
	EXPORT	|dwCMemDSPEnabled| [ DATA ]
	EXPORT	|dwDSP720pEnabled| [ DATA ]
	EXPORT	|g_dwCpuRevision| [ DATA ]
	EXPORT	|dwOEMSRAMStartOffset| [ DATA ]
	EXPORT	|dwOEMPRCMCLKSSetupTime| [ DATA ]
	EXPORT	|dwOEMMPUContextRestore| [ DATA ]
	EXPORT	|dwOEMMaxIdlePeriod| [ DATA ]
	EXPORT	|g_oalRetailMsgEnable| [ DATA ]
	EXPORT	|g_ResumeRTC| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|g_oalKitlEnabled|, 0x4

	 COMMON	|gDevice_prefix|, 0x4

	 COMMON	|g_dwCpuFamily|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|g_oalRetailMsgEnable| % 0x4
|g_ResumeRTC| %	0x4

  00000			 AREA	 |.data|, DATA
|g_dwCpuRevision| DCD 0xffffffff
|dwOEMSRAMStartOffset| DCD 0x8000
|dwOEMMaxIdlePeriod| DCD 0x3e8

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|dwOEMDrWatsonSize| DCD 0x4b000
|dwOEMHighSecurity| DCD 0x2
|dwBank1Enabled| DCD 0xffffffff
|dwCMemDSPEnabled| DCD 0xffffffff
|dwDSP720pEnabled| DCD 0xffffffff
|dwOEMPRCMCLKSSetupTime| DCD 0x140
|dwOEMMPUContextRestore| DCD 0x80001000
	%	4
|?gpioPads_37xx@?1??OEMInit@@9@9| DCW 0x82		; `OEMInit'::`2'::gpioPads_37xx
	%	2
	DCD	0x21
	DCW	0x9a
	%	2
	DCD	0x20
	DCW	0x2d8
	%	2
	DCD	0x20
	DCW	0x2d7
	%	2
	DCD	0x20
	DCW	0x25
	%	2
	DCD	0x20
	DCW	0x28
	%	2
	DCD	0x20
	DCW	0x29
	%	2
	DCD	0x20
	DCW	0xffff
	%	2
	DCD	0x0
	IMPORT	|SOCSetPadConfig|
; File c:\wince600\platform\z2170p\src\inc\bsp_padcfg.h

  00000			 AREA	 |.pdata|, PDATA
|$T47540| DCD	|$LN9@ConfigureP|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ConfigurePadArray| PROC

; 577  : {

  00000		 |$LN9@ConfigureP|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47537|
  00004	e1a04000	 mov         r4, r0

; 578  :     int i=0;
; 579  :     while (padArray[i].padID != (UINT16) -1)

  00008	e1d420b0	 ldrh        r2, [r4]
  0000c	e3a03cff	 mov         r3, #0xFF, 24
  00010	e38350ff	 orr         r5, r3, #0xFF
  00014	e1520005	 cmp         r2, r5
  00018	e3a06000	 mov         r6, #0
  0001c	0a00000b	 beq         |$LN1@ConfigureP|
  00020	e3a01c7f	 mov         r1, #0x7F, 24
  00024	e38170ff	 orr         r7, r1, #0xFF
  00028	e1a03004	 mov         r3, r4
  0002c		 |$LL2@ConfigureP|

; 580  :     {
; 581  :         SOCSetPadConfig(padArray[i].padID,(UINT16) padArray[i].Cfg);

  0002c	e5933004	 ldr         r3, [r3, #4]
  00030	e1a00002	 mov         r0, r2
  00034	e0031007	 and         r1, r3, r7
  00038	eb000000	 bl          SOCSetPadConfig

; 582  :         i++;

  0003c	e2866001	 add         r6, r6, #1
  00040	e0843186	 add         r3, r4, r6, lsl #3
  00044	e1d320b0	 ldrh        r2, [r3]
  00048	e1520005	 cmp         r2, r5
  0004c	1afffff6	 bne         |$LL2@ConfigureP|
  00050		 |$LN1@ConfigureP|

; 583  :     }
; 584  : }

  00050	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M47538|

			 ENDP  ; |ConfigurePadArray|

	EXPORT	|??_C@_1EI@GLIPCMCH@?$AAS?$AAy?$AAs?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAc?$AAa?$AAl?$AAi?$AAb?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?5?$AA?$DN?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@GBOCCPHF@?$AAO?$AAA?$AAL?$AAC?$AAa?$AAl?$AAi?$AAb?$AAr?$AAa?$AAt?$AAe?$AAS?$AAy?$AAs?$AAC?$AAl?$AAk?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|g_dwMeasuredSysClkFreq|
	IMPORT	|OALStall|
	IMPORT	|OALTimerGetReg|
	IMPORT	|g_pTimerRegs|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|OALPAtoVA|
	IMPORT	|GetAddressByDevice|
	IMPORT	|BSPGetGPTPerfDevice|
	IMPORT	|__rt_sdiv64by64|
; File c:\wince600\platform\z2170p\src\oal\oallib\init.c

  00000			 AREA	 |.pdata|, PDATA
|$T47564| DCD	|$LN23@OALCalibra|
	DCD	0x40005201

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@GLIPCMCH@?$AAS?$AAy?$AAs?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAc?$AAa?$AAl?$AAi?$AAb?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?5?$AA?$DN?$AA?5?$AA?$CF@| DCB "S"
	DCB	0x0, "y", 0x0, "s", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "b", 0x0, "r", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "F", 0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "n", 0x0, "c", 0x0, "y", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@GBOCCPHF@?$AAO?$AAA?$AAL?$AAC?$AAa?$AAl?$AAi?$AAb?$AAr?$AAa?$AAt?$AAe?$AAS?$AAy?$AAs?$AAC?$AAl?$AAk?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "C", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "b", 0x0, "r", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "S"
	DCB	0x0, "y", 0x0, "s", 0x0, "C", 0x0, "l", 0x0, "k", 0x0, "("
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALCalibrateSysClk| PROC

; 495  : {

  00000		 |$LN23@OALCalibra|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M47561|

; 496  :     DWORD dw32k_prev,dw32k, dw32k_diff;
; 497  :     DWORD dwSysk_prev,dwSysk, dwSys_diff;
; 498  :     DWORD dwOld;
; 499  :     OMAP_DEVICE gptPerfDevice = BSPGetGPTPerfDevice();

  00004	eb000000	 bl          BSPGetGPTPerfDevice
  00008	e1a07000	 mov         r7, r0

; 500  :     OMAP_GPTIMER_REGS   *pPerfTimer = OALPAtoUA(GetAddressByDevice(gptPerfDevice));

  0000c	eb000000	 bl          GetAddressByDevice
  00010	e3a01000	 mov         r1, #0
  00014	eb000000	 bl          OALPAtoVA
  00018	e1a04000	 mov         r4, r0

; 501  :     EnableDeviceClocks(gptPerfDevice, TRUE);

  0001c	e1a00007	 mov         r0, r7
  00020	e3a01001	 mov         r1, #1
  00024	eb000000	 bl          EnableDeviceClocks

; 502  : 
; 503  : 	OALMSG(OAL_FUNC, (L"OALCalibrateSysClk()\r\n"));

  00028	e59fb114	 ldr         r11, [pc, #0x114]
  0002c	e59b3440	 ldr         r3, [r11, #0x440]
  00030	e3130004	 tst         r3, #4
  00034	159f0104	 ldrne       r0, [pc, #0x104]
  00038	1b000000	 blne        NKDbgPrintfW

; 504  :     // configure performance timer
; 505  :     //---------------------------------------------------
; 506  :     // Soft reset GPTIMER and wait until finished
; 507  :     SETREG32(&pPerfTimer->TIOCP, SYSCONFIG_SOFTRESET);

  0003c	e5943010	 ldr         r3, [r4, #0x10]
  00040	e3833002	 orr         r3, r3, #2
  00044	e5843010	 str         r3, [r4, #0x10]
  00048		 |$LL10@OALCalibra|

; 508  :     while ((INREG32(&pPerfTimer->TISTAT) & GPTIMER_TISTAT_RESETDONE) == 0);

  00048	e5943014	 ldr         r3, [r4, #0x14]
  0004c	e3130001	 tst         r3, #1
  00050	0afffffc	 beq         |$LL10@OALCalibra|
  00054	e3a03c02	 mov         r3, #2, 24

; 509  :  
; 510  :     // Enable smart idle and autoidle
; 511  :     // Set clock activity - FCLK can be  switched off, 
; 512  :     // L4 interface clock is maintained during wkup.
; 513  :     OUTREG32(&pPerfTimer->TIOCP, 
; 514  :         0x200 | SYSCONFIG_SMARTIDLE|SYSCONFIG_ENAWAKEUP|SYSCONFIG_AUTOIDLE);

  00058	e3833015	 orr         r3, r3, #0x15
  0005c	e5843010	 str         r3, [r4, #0x10]

; 515  :         
; 516  :     // clear interrupts
; 517  :     OUTREG32(&pPerfTimer->TISR, 0x00000000);

  00060	e3a03000	 mov         r3, #0
  00064	e5843018	 str         r3, [r4, #0x18]

; 518  : 
; 519  :     //  Start the timer.  Also set for auto reload
; 520  :     SETREG32(&pPerfTimer->TCLR, GPTIMER_TCLR_ST);

  00068	e5943024	 ldr         r3, [r4, #0x24]
  0006c	e3833001	 orr         r3, r3, #1
  00070	e5843024	 str         r3, [r4, #0x24]
  00074		 |$LL8@OALCalibra|

; 521  :     while ((INREG32(&pPerfTimer->TWPS) & GPTIMER_TWPS_TCLR) != 0);

  00074	e5943034	 ldr         r3, [r4, #0x34]
  00078	e3130001	 tst         r3, #1
  0007c	1afffffc	 bne         |$LL8@OALCalibra|

; 522  :     
; 523  : #if SHOW_SYS_CLOCK_VARIATION
; 524  :     int i;
; 525  :     for (i=0; i<100;i++)
; 526  :     {
; 527  : #endif
; 528  : 
; 529  :     dwOld = OALTimerGetReg(&g_pTimerRegs->TCRR);

  00080	e59f50b4	 ldr         r5, [pc, #0xB4]
  00084	e5953000	 ldr         r3, [r5]
  00088	e2830028	 add         r0, r3, #0x28
  0008c	eb000000	 bl          OALTimerGetReg
  00090	e1a06000	 mov         r6, r0
  00094		 |$LL6@OALCalibra|

; 530  :     do 
; 531  :     {
; 532  :         dwSysk_prev = INREG32(&pPerfTimer->TCRR); 
; 533  :         dw32k_prev = OALTimerGetReg(&g_pTimerRegs->TCRR);

  00094	e5953000	 ldr         r3, [r5]
  00098	e594a028	 ldr         r10, [r4, #0x28]
  0009c	e2830028	 add         r0, r3, #0x28
  000a0	eb000000	 bl          OALTimerGetReg
  000a4	e1a08000	 mov         r8, r0

; 534  :     } while (dw32k_prev == dwOld);

  000a8	e1580006	 cmp         r8, r6
  000ac	0afffff8	 beq         |$LL6@OALCalibra|
  000b0	e3a03b61	 mov         r3, #0x61, 22

; 535  : 
; 536  :     OALStall(100000);

  000b4	e3830e2a	 orr         r0, r3, #0x2A, 28
  000b8	eb000000	 bl          OALStall

; 537  : 
; 538  :     dwOld = OALTimerGetReg(&g_pTimerRegs->TCRR);

  000bc	e5953000	 ldr         r3, [r5]
  000c0	e2830028	 add         r0, r3, #0x28
  000c4	eb000000	 bl          OALTimerGetReg
  000c8	e1a06000	 mov         r6, r0
  000cc		 |$LL3@OALCalibra|

; 539  :     do
; 540  :     {
; 541  :         dwSysk = INREG32(&pPerfTimer->TCRR);
; 542  :         dw32k = OALTimerGetReg(&g_pTimerRegs->TCRR);

  000cc	e5953000	 ldr         r3, [r5]
  000d0	e5949028	 ldr         r9, [r4, #0x28]
  000d4	e2830028	 add         r0, r3, #0x28
  000d8	eb000000	 bl          OALTimerGetReg
  000dc	e1a02000	 mov         r2, r0

; 543  :     } while (dw32k == dwOld);

  000e0	e1520006	 cmp         r2, r6
  000e4	0afffff8	 beq         |$LL3@OALCalibra|

; 544  : 
; 545  :     dw32k_diff = dw32k - dw32k_prev;
; 546  :     dwSys_diff = dwSysk - dwSysk_prev;

  000e8	e049300a	 sub         r3, r9, r10

; 547  :     
; 548  :     g_dwMeasuredSysClkFreq =  (DWORD) (((INT64)dwSys_diff * 32768) / ((INT64)dw32k_diff)) ;

  000ec	e1a00783	 mov         r0, r3, lsl #15
  000f0	e1a018a3	 mov         r1, r3, lsr #17
  000f4	e3a03000	 mov         r3, #0
  000f8	e0422008	 sub         r2, r2, r8
  000fc	eb000000	 bl          __rt_sdiv64by64

; 549  : 
; 550  :     OALMSG(OAL_FUNC,(L"SysClock calibrate Frequency = %d\r\n", g_dwMeasuredSysClkFreq)); // 26MHz

  00100	e59b2440	 ldr         r2, [r11, #0x440]
  00104	e59f302c	 ldr         r3, [pc, #0x2C]
  00108	e1a0e000	 mov         lr, r0
  0010c	e3120004	 tst         r2, #4
  00110	159f001c	 ldrne       r0, [pc, #0x1C]
  00114	11a0100e	 movne       r1, lr
  00118	e583e000	 str         lr, [r3]
  0011c	1b000000	 blne        NKDbgPrintfW

; 551  : 
; 552  : #if SHOW_SYS_CLOCK_VARIATION
; 553  :     }
; 554  : #endif
; 555  : 
; 556  :     EnableDeviceClocks(gptPerfDevice, FALSE);

  00120	e3a01000	 mov         r1, #0
  00124	e1a00007	 mov         r0, r7
  00128	eb000000	 bl          EnableDeviceClocks

; 557  : 
; 558  : }

  0012c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00130	e12fff1e	 bx          lr
  00134		 |$LN24@OALCalibra|
  00134		 |$LN25@OALCalibra|
  00134	00000000	 DCD         |??_C@_1EI@GLIPCMCH@?$AAS?$AAy?$AAs?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAc?$AAa?$AAl?$AAi?$AAb?$AAr?$AAa?$AAt?$AAe?$AA?5?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?5?$AA?$DN?$AA?5?$AA?$CF@|
  00138		 |$LN26@OALCalibra|
  00138	00000000	 DCD         |g_dwMeasuredSysClkFreq|
  0013c		 |$LN27@OALCalibra|
  0013c	00000000	 DCD         |g_pTimerRegs|
  00140		 |$LN28@OALCalibra|
  00140	00000000	 DCD         |??_C@_1CO@GBOCCPHF@?$AAO?$AAA?$AAL?$AAC?$AAa?$AAl?$AAi?$AAb?$AAr?$AAa?$AAt?$AAe?$AAS?$AAy?$AAs?$AAC?$AAl?$AAk?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00144		 |$LN29@OALCalibra|
  00144	00000000	 DCD         |dpCurSettings|
  00148		 |$M47562|

			 ENDP  ; |OALCalibrateSysClk|

	EXPORT	|OALMux_UpdateOnDeviceStateChange|

  00000			 AREA	 |.pdata|, PDATA
|$T47579| DCD	|$LN5@OALMux_Upd|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALMux_UpdateOnDeviceStateChange| PROC

; 570  : {

  00000		 |$LN5@OALMux_Upd|
  00000		 |$M47576|

; 571  :     UNREFERENCED_PARAMETER(devId);
; 572  :     UNREFERENCED_PARAMETER(oldState);
; 573  :     UNREFERENCED_PARAMETER(newState);
; 574  :     UNREFERENCED_PARAMETER(bPreStateChange);
; 575  :     return (DWORD) -1;

  00000	e3e00000	 mvn         r0, #0

; 576  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M47577|

			 ENDP  ; |OALMux_UpdateOnDeviceStateChange|

	EXPORT	|OALMux_InitMuxTable|

  00000			 AREA	 |.pdata|, PDATA
|$T47586| DCD	|$LN5@OALMux_Ini|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALMux_InitMuxTable| PROC

; 580  : {

  00000		 |$LN5@OALMux_Ini|
  00000		 |$M47583|

; 581  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M47584|

			 ENDP  ; |OALMux_InitMuxTable|

	EXPORT	|EnableDebugSerialClock|

  00000			 AREA	 |.pdata|, PDATA
|$T47598| DCD	|$LN15@EnableDebu|
	DCD	0x40002400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |EnableDebugSerialClock| PROC

; 584  : {  

  00000		 |$LN15@EnableDebu|
  00000		 |$M47595|
  00000	e3a03312	 mov         r3, #0x12, 6

; 585  : #define OMAP_PRCM_PER_CM_REGS_PA            0x48005000
; 586  : 
; 587  :     OMAP_CM_REGS* pCmRegs;
; 588  :     
; 589  :     pCmRegs = (OMAP_CM_REGS*) (OMAP_PRCM_CORE_CM_REGS_PA);

  00004	e3831c4a	 orr         r1, r3, #0x4A, 24

; 590  :    
; 591  :     switch(uart_id)

  00008	e350000a	 cmp         r0, #0xA
  0000c	0a00000f	 beq         |$LN6@EnableDebu|
  00010	e350003d	 cmp         r0, #0x3D
  00014	1a000018	 bne         |$LN4@EnableDebu|
  00018	e3a03312	 mov         r3, #0x12, 6

; 597  :             break;
; 598  : 
; 599  : /*brian        case OMAP_DEVICE_UART2:
; 600  :                 SETREG32(&pCmRegs->CM_FCLKEN1_xxx, CM_CLKEN_UART2);
; 601  :                 SETREG32(&pCmRegs->CM_ICLKEN1_xxx, CM_CLKEN_UART2);
; 602  :                 while (INREG32(&pCmRegs->CM_IDLEST1_xxx) & CM_IDLEST_ST_UART2);
; 603  :             break;*/
; 604  : 
; 605  :         case OMAP_DEVICE_UART3:
; 606  :                 pCmRegs = (OMAP_CM_REGS*) (OMAP_PRCM_PER_CM_REGS_PA);

  0001c	e3832a05	 orr         r2, r3, #5, 20

; 607  :                 SETREG32(&pCmRegs->CM_FCLKEN_xxx, CM_CLKEN_UART3);

  00020	e5923000	 ldr         r3, [r2]

; 608  :                 SETREG32(&pCmRegs->CM_ICLKEN_xxx, CM_CLKEN_UART3);

  00024	e59f1060	 ldr         r1, [pc, #0x60]
  00028	e3833b02	 orr         r3, r3, #2, 22
  0002c	e5823000	 str         r3, [r2]
  00030	e5913000	 ldr         r3, [r1]
  00034	e59f204c	 ldr         r2, [pc, #0x4C]
  00038	e3833b02	 orr         r3, r3, #2, 22
  0003c	e5813000	 str         r3, [r1]
  00040		 |$LL2@EnableDebu|

; 609  :                 while (INREG32(&pCmRegs->CM_IDLEST1_xxx) & CM_IDLEST_ST_UART3);

  00040	e5923000	 ldr         r3, [r2]
  00044	e3130b02	 tst         r3, #2, 22
  00048	1afffffc	 bne         |$LL2@EnableDebu|

; 610  :             break;	
; 611  :     	}
; 612  : }

  0004c	e12fff1e	 bx          lr
  00050		 |$LN6@EnableDebu|

; 592  :     	{
; 593  :         case OMAP_DEVICE_UART1:
; 594  :                 SETREG32(&pCmRegs->CM_FCLKEN1_xxx, CM_CLKEN_UART1);

  00050	e5913000	 ldr         r3, [r1]

; 595  :                 SETREG32(&pCmRegs->CM_ICLKEN1_xxx, CM_CLKEN_UART1);

  00054	e59f2028	 ldr         r2, [pc, #0x28]
  00058	e3833a02	 orr         r3, r3, #2, 20
  0005c	e5813000	 str         r3, [r1]
  00060	e5923000	 ldr         r3, [r2]
  00064	e3833a02	 orr         r3, r3, #2, 20
  00068	e5823000	 str         r3, [r2]
  0006c	e59f200c	 ldr         r2, [pc, #0xC]
  00070		 |$LL5@EnableDebu|

; 596  :                 while (INREG32(&pCmRegs->CM_IDLEST1_xxx) & CM_IDLEST_ST_UART1);

  00070	e5923000	 ldr         r3, [r2]
  00074	e3130a02	 tst         r3, #2, 20
  00078	1afffffc	 bne         |$LL5@EnableDebu|
  0007c		 |$LN4@EnableDebu|

; 610  :             break;	
; 611  :     	}
; 612  : }

  0007c	e12fff1e	 bx          lr
  00080		 |$LN16@EnableDebu|
  00080		 |$LN17@EnableDebu|
  00080	48004a20	 DCD         0x48004a20
  00084		 |$LN18@EnableDebu|
  00084	48004a10	 DCD         0x48004a10
  00088		 |$LN19@EnableDebu|
  00088	48005020	 DCD         0x48005020
  0008c		 |$LN20@EnableDebu|
  0008c	48005010	 DCD         0x48005010
  00090		 |$M47596|

			 ENDP  ; |EnableDebugSerialClock|

	EXPORT	|BSPGpioInit|
	EXPORT	|??_C@_1CA@MCLKGBIP@?$AAB?$AAS?$AAP?$AAG?$AAp?$AAi?$AAo?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|BSPInsertGpioDevice|
	IMPORT	|Omap_Gpio|
	IMPORT	|Tps659xx_Gpio|

  00000			 AREA	 |.pdata|, PDATA
|$T47612| DCD	|$LN7@BSPGpioIni|
	DCD	0x40001401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@MCLKGBIP@?$AAB?$AAS?$AAP?$AAG?$AAp?$AAi?$AAo?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "B"
	DCB	0x0, "S", 0x0, "P", 0x0, "G", 0x0, "p", 0x0, "i", 0x0, "o"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BSPGpioInit| PROC

; 621  : {

  00000		 |$LN7@BSPGpioIni|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47609|

; 622  : 	OALMSG(OAL_FUNC, (L"BSPGpioInit()\r\n"));

  00004	e59f3040	 ldr         r3, [pc, #0x40]
  00008	e5933440	 ldr         r3, [r3, #0x440]
  0000c	e3130004	 tst         r3, #4
  00010	159f0030	 ldrne       r0, [pc, #0x30]
  00014	1b000000	 blne        NKDbgPrintfW

; 623  : 	BSPInsertGpioDevice(0,&Omap_Gpio,NULL);

  00018	e59f1024	 ldr         r1, [pc, #0x24]
  0001c	e3a02000	 mov         r2, #0
  00020	e3a00000	 mov         r0, #0
  00024	eb000000	 bl          BSPInsertGpioDevice

; 624  : 	BSPInsertGpioDevice(TRITON_GPIO_PINID_START,&Tps659xx_Gpio,NULL);

  00028	e59f1010	 ldr         r1, [pc, #0x10]
  0002c	e3a02000	 mov         r2, #0
  00030	e3a00c01	 mov         r0, #1, 24
  00034	eb000000	 bl          BSPInsertGpioDevice

; 625  : }

  00038	e49de004	 ldr         lr, [sp], #4
  0003c	e12fff1e	 bx          lr
  00040		 |$LN8@BSPGpioIni|
  00040		 |$LN9@BSPGpioIni|
  00040	00000000	 DCD         |Tps659xx_Gpio|
  00044		 |$LN10@BSPGpioIni|
  00044	00000000	 DCD         |Omap_Gpio|
  00048		 |$LN11@BSPGpioIni|
  00048	00000000	 DCD         |??_C@_1CA@MCLKGBIP@?$AAB?$AAS?$AAP?$AAG?$AAp?$AAi?$AAo?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0004c		 |$LN12@BSPGpioIni|
  0004c	00000000	 DCD         |dpCurSettings|
  00050		 |$M47610|

			 ENDP  ; |BSPGpioInit|

	EXPORT	|MmUnmapIoSpace|

  00000			 AREA	 |.pdata|, PDATA
|$T47624| DCD	|$LN5@MmUnmapIoS|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MmUnmapIoSpace| PROC

; 631  : {

  00000		 |$LN5@MmUnmapIoS|
  00000		 |$M47621|

; 632  :     UNREFERENCED_PARAMETER(BaseAddress);
; 633  :     UNREFERENCED_PARAMETER(NumberOfBytes);
; 634  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M47622|

			 ENDP  ; |MmUnmapIoSpace|

	EXPORT	|MmMapIoSpace|

  00000			 AREA	 |.pdata|, PDATA
|$T47635| DCD	|$LN5@MmMapIoSpa|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MmMapIoSpace| PROC

; 641  : {

  00000		 |$LN5@MmMapIoSpa|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47632|

; 642  :     UNREFERENCED_PARAMETER(NumberOfBytes);
; 643  :     return OALPAtoVA(PhysicalAddress.LowPart,CacheEnable);

  00004	e1a01003	 mov         r1, r3
  00008	eb000000	 bl          OALPAtoVA

; 644  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M47633|

			 ENDP  ; |MmMapIoSpace|

	EXPORT	|HalContextUpdateDirtyRegister|
	IMPORT	|g_ffContextSaveMask|

  00000			 AREA	 |.pdata|, PDATA
|$T47643| DCD	|$LN5@HalContext|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HalContextUpdateDirtyRegister| PROC

; 649  : {

  00000		 |$LN5@HalContext|
  00000		 |$M47640|

; 650  :     g_ffContextSaveMask |= ffRegister;

  00000	e59f200c	 ldr         r2, [pc, #0xC]
  00004	e5923000	 ldr         r3, [r2]
  00008	e1833000	 orr         r3, r3, r0
  0000c	e5823000	 str         r3, [r2]

; 651  : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN6@HalContext|
  00014		 |$LN7@HalContext|
  00014	00000000	 DCD         |g_ffContextSaveMask|
  00018		 |$M47641|

			 ENDP  ; |HalContextUpdateDirtyRegister|

	EXPORT	|??_C@_1DI@EKHPOAB@?$AAO?$AAA?$AAL?$AAG?$AAP?$AAI?$AAO?$AAS?$AAe?$AAt?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAV?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|GPIOClose|
	IMPORT	|GPIOSetMode|
	IMPORT	|GPIOClrBit|
	IMPORT	|GPIOOpen|

  00000			 AREA	 |.pdata|, PDATA
|$T47653| DCD	|$LN5@OALGPIOSet|
	DCD	0x40003401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@EKHPOAB@?$AAO?$AAA?$AAL?$AAG?$AAP?$AAI?$AAO?$AAS?$AAe?$AAt?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAV?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "G", 0x0, "P", 0x0, "I", 0x0, "O"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "e", 0x0, "f"
	DCB	0x0, "a", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "V", 0x0, "a"
	DCB	0x0, "l", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALGPIOSetDefaultValues| PROC

; 654  : {

  00000		 |$LN5@OALGPIOSet|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47650|

; 655  :     HANDLE hGPIO = GPIOOpen();

  00004	eb000000	 bl          GPIOOpen
  00008	e1a04000	 mov         r4, r0

; 656  : //#ifdef BSP_EVM2
; 657  : 
; 658  : 	//OALMSG(OAL_FUNC, (L"OALGPIOSetDefaultValues()\r\n"));
; 659  : 	OALMSG(1, (L"OALGPIOSetDefaultValues()\r\n"));

  0000c	e59f00b8	 ldr         r0, [pc, #0xB8]
  00010	eb000000	 bl          NKDbgPrintfW

; 660  :     // make TPS659XX MSECURE pin low
; 661  :     //GPIOClrBit(hGPIO,TPS659XX_MSECURE_GPIO);            
; 662  :     //GPIOSetMode(hGPIO, TPS659XX_MSECURE_GPIO,GPIO_DIR_OUTPUT);
; 663  : 
; 664  :     GPIOClrBit(hGPIO,AUDIO_MUTE_GPIO); // SPK_EN GPIO_37 low_active

  00014	e3a01025	 mov         r1, #0x25
  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          GPIOClrBit

; 665  :     GPIOSetMode(hGPIO, AUDIO_MUTE_GPIO,GPIO_DIR_OUTPUT);

  00020	e3a02000	 mov         r2, #0
  00024	e3a01025	 mov         r1, #0x25
  00028	e1a00004	 mov         r0, r4
  0002c	eb000000	 bl          GPIOSetMode

; 666  : 
; 667  : 	GPIOClrBit(hGPIO,136); // VIBRATOR

  00030	e3a01088	 mov         r1, #0x88
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          GPIOClrBit

; 668  : 	GPIOSetMode(hGPIO, 136,GPIO_DIR_OUTPUT);

  0003c	e3a02000	 mov         r2, #0
  00040	e3a01088	 mov         r1, #0x88
  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          GPIOSetMode

; 669  : 	
; 670  : 	//GPIOSetBit(hGPIO,16); // WLAN_EN
; 671  : 	GPIOClrBit(hGPIO,16); // WLAN_EN

  0004c	e3a01010	 mov         r1, #0x10
  00050	e1a00004	 mov         r0, r4
  00054	eb000000	 bl          GPIOClrBit

; 672  :     GPIOSetMode(hGPIO, 16,GPIO_DIR_OUTPUT);

  00058	e3a02000	 mov         r2, #0
  0005c	e3a01010	 mov         r1, #0x10
  00060	e1a00004	 mov         r0, r4
  00064	eb000000	 bl          GPIOSetMode

; 673  :     
; 674  : 	//GPIOSetBit(hGPIO,15); // BT_EN
; 675  : 	GPIOClrBit(hGPIO,15); // BT_EN

  00068	e3a0100f	 mov         r1, #0xF
  0006c	e1a00004	 mov         r0, r4
  00070	eb000000	 bl          GPIOClrBit

; 676  :     GPIOSetMode(hGPIO, 15,GPIO_DIR_OUTPUT);

  00074	e3a02000	 mov         r2, #0
  00078	e3a0100f	 mov         r1, #0xF
  0007c	e1a00004	 mov         r0, r4
  00080	eb000000	 bl          GPIOSetMode

; 677  :     
; 678  : 	GPIOClrBit(hGPIO,34); // FM_EN

  00084	e3a01022	 mov         r1, #0x22
  00088	e1a00004	 mov         r0, r4
  0008c	eb000000	 bl          GPIOClrBit

; 679  :     GPIOSetMode(hGPIO, 34,GPIO_DIR_OUTPUT);

  00090	e3a02000	 mov         r2, #0
  00094	e3a01022	 mov         r1, #0x22
  00098	e1a00004	 mov         r0, r4
  0009c	eb000000	 bl          GPIOSetMode

; 680  :     
; 681  : 	GPIOClrBit(hGPIO,38); // ENG_PWEN

  000a0	e3a01026	 mov         r1, #0x26
  000a4	e1a00004	 mov         r0, r4
  000a8	eb000000	 bl          GPIOClrBit

; 682  :     GPIOSetMode(hGPIO, 38,GPIO_DIR_OUTPUT);

  000ac	e3a02000	 mov         r2, #0
  000b0	e3a01026	 mov         r1, #0x26
  000b4	e1a00004	 mov         r0, r4
  000b8	eb000000	 bl          GPIOSetMode

; 683  :     
; 684  :     // turn on nFULL_MODEM_EN (GPIO_55 = 0)
; 685  :     //GPIOClrBit(hGPIO,nFULL_MODEM_EN_GPIO);            
; 686  :     //GPIOSetMode(hGPIO, nFULL_MODEM_EN_GPIO,GPIO_DIR_OUTPUT);
; 687  : 
; 688  :     // route USB2 signals to transceiver (GPIO_61 = 0)
; 689  :     //GPIOClrBit(hGPIO,USB2_ROUTE_SELECT_GPIO);            
; 690  :     //GPIOSetMode(hGPIO, USB2_ROUTE_SELECT_GPIO,GPIO_DIR_OUTPUT);
; 691  : 
; 692  :     // maintain TVP in reset state (to reduce power consumption)
; 693  :     //GPIOClrBit(hGPIO, VIDEO_CAPTURE_RESET);
; 694  :     //GPIOSetMode(hGPIO, VIDEO_CAPTURE_RESET, GPIO_DIR_OUTPUT);
; 695  : 
; 696  :     // enable new EVM2 control signals (T2_GPIO2 = 0)    
; 697  :     //GPIOClrBit(hGPIO,NEW_EVM2_CTRL_GPIO);            
; 698  :     //GPIOSetMode(hGPIO, NEW_EVM2_CTRL_GPIO,GPIO_DIR_OUTPUT);
; 699  : //#endif
; 700  :     GPIOClose(hGPIO);

  000bc	e1a00004	 mov         r0, r4
  000c0	eb000000	 bl          GPIOClose

; 701  : }

  000c4	e8bd4010	 ldmia       sp!, {r4, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$LN6@OALGPIOSet|
  000cc		 |$LN7@OALGPIOSet|
  000cc	00000000	 DCD         |??_C@_1DI@EKHPOAB@?$AAO?$AAA?$AAL?$AAG?$AAP?$AAI?$AAO?$AAS?$AAe?$AAt?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AAV?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000d0		 |$M47651|

			 ENDP  ; |OALGPIOSetDefaultValues|

	EXPORT	|??_C@_1DC@LBJFKMIA@?$AAO?$AAE?$AAM?$AAE?$AAn?$AAu?$AAm?$AAE?$AAx?$AAt?$AAe?$AAn?$AAs?$AAi?$AAo?$AAn?$AAD?$AAR?$AAA?$AAM?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47669| DCD	|$LN11@OEMEnumExt|
	DCD	0x40004701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@LBJFKMIA@?$AAO?$AAE?$AAM?$AAE?$AAn?$AAu?$AAm?$AAE?$AAx?$AAt?$AAe?$AAn?$AAs?$AAi?$AAo?$AAn?$AAD?$AAR?$AAA?$AAM?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "E", 0x0, "n", 0x0, "u", 0x0, "m"
	DCB	0x0, "E", 0x0, "x", 0x0, "t", 0x0, "e", 0x0, "n", 0x0, "s"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, "D", 0x0, "R", 0x0, "A"
	DCB	0x0, "M", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMEnumExtensionDRAM| PROC

; 704  : {

  00000		 |$LN11@OEMEnumExt|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M47666|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 705  :     DWORD cSections = 0;
; 706  :     
; 707  :     OALMSG(OAL_FUNC, (L"OEMEnumExtensionDRAM()\r\n"));

  0000c	e59f3104	 ldr         r3, [pc, #0x104]
  00010	e3a04000	 mov         r4, #0
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130004	 tst         r3, #4
  0001c	159f00f0	 ldrne       r0, [pc, #0xF0]
  00020	1b000000	 blne        NKDbgPrintfW

; 708  :     // If BANK1 is enabled, give it the OS (V)
; 709  :     if ((cSections < cMemSections) && (dwBank1Enabled == 1))

  00024	e3560000	 cmp         r6, #0
  00028	0a000035	 beq         |$LN1@OEMEnumExt|
  0002c	e59f10dc	 ldr         r1, [pc, #0xDC]
  00030	e3a0e000	 mov         lr, #0
  00034	e5913000	 ldr         r3, [r1]
  00038	e3530001	 cmp         r3, #1
  0003c	03a03489	 moveq       r3, #0x89, 8

; 710  :     {
; 711  :         pMemSections[cSections].dwFlags = 0;
; 712  :         pMemSections[cSections].dwStart = IMAGE_WINCE_RAM_BANK1_CA;

  00040	0383360a	 orreq       r3, r3, #0xA, 12

; 713  :         pMemSections[cSections].dwLen = IMAGE_WINCE_RAM_BANK1_SIZE;

  00044	03a02666	 moveq       r2, #0x66, 12

; 714  :         cSections++;

  00048	03a04001	 moveq       r4, #1
  0004c	05853004	 streq       r3, [r5, #4]
  00050	0585e000	 streq       lr, [r5]
  00054	05852008	 streq       r2, [r5, #8]

; 715  :     }
; 716  :     // If DSP 720p region is not used for the DSP, give it to the OS (V)
; 717  :     if ((cSections < cMemSections) && (dwBank1Enabled == 1) && (dwDSP720pEnabled != 1))

  00058	e1540006	 cmp         r4, r6
  0005c	2a000028	 bcs         |$LN1@OEMEnumExt|
  00060	e5913000	 ldr         r3, [r1]
  00064	e3530001	 cmp         r3, #1
  00068	1a00000b	 bne         |$LN3@OEMEnumExt|
  0006c	e5913008	 ldr         r3, [r1, #8]
  00070	e3530001	 cmp         r3, #1
  00074	0a000008	 beq         |$LN3@OEMEnumExt|

; 718  :     {
; 719  :         pMemSections[cSections].dwFlags = 0;

  00078	e0843084	 add         r3, r4, r4, lsl #1
  0007c	e1a02005	 mov         r2, r5
  00080	e7a2e103	 str         lr, [r2, +r3, lsl #2]!
  00084	e3a03485	 mov         r3, #0x85, 8

; 720  :         pMemSections[cSections].dwStart = IMAGE_DSP_720P_CA;

  00088	e3833502	 orr         r3, r3, #2, 10

; 721  :         pMemSections[cSections].dwLen = IMAGE_DSP_720P_SIZE;

  0008c	e3a0061a	 mov         r0, #0x1A, 12
  00090	e5823004	 str         r3, [r2, #4]
  00094	e5820008	 str         r0, [r2, #8]

; 722  :         cSections++;

  00098	e2844001	 add         r4, r4, #1
  0009c		 |$LN3@OEMEnumExt|

; 723  :     }
; 724  :     // If CMEM region is not used for the DSP, give it to the OS (V)
; 725  :     if ((cSections < cMemSections) && (dwCMemDSPEnabled != 1))

  0009c	e1540006	 cmp         r4, r6
  000a0	2a000017	 bcs         |$LN1@OEMEnumExt|
  000a4	e5913004	 ldr         r3, [r1, #4]
  000a8	e3530001	 cmp         r3, #1
  000ac	0a000008	 beq         |$LN2@OEMEnumExt|

; 726  :     {
; 727  :         pMemSections[cSections].dwFlags = 0;

  000b0	e0843084	 add         r3, r4, r4, lsl #1
  000b4	e1a02005	 mov         r2, r5
  000b8	e7a2e103	 str         lr, [r2, +r3, lsl #2]!
  000bc	e3a03321	 mov         r3, #0x21, 6

; 728  :         pMemSections[cSections].dwStart = IMAGE_CMEM_CA;

  000c0	e3833502	 orr         r3, r3, #2, 10

; 729  :         pMemSections[cSections].dwLen = IMAGE_CMEM_SIZE;

  000c4	e3a00401	 mov         r0, #1, 8
  000c8	e5823004	 str         r3, [r2, #4]
  000cc	e5820008	 str         r0, [r2, #8]

; 730  :         cSections++;

  000d0	e2844001	 add         r4, r4, #1
  000d4		 |$LN2@OEMEnumExt|

; 731  :     }
; 732  :     // If DSP region is not used for the DSP, give it to the OS (V)
; 733  :     if ((cSections < cMemSections) && (dwCMemDSPEnabled != 1))

  000d4	e1540006	 cmp         r4, r6
  000d8	2a000009	 bcs         |$LN1@OEMEnumExt|
  000dc	e5913004	 ldr         r3, [r1, #4]
  000e0	e3530001	 cmp         r3, #1

; 734  :     {
; 735  :         pMemSections[cSections].dwFlags = 0;

  000e4	10843084	 addne       r3, r4, r4, lsl #1
  000e8	17a5e103	 strne       lr, [r5, +r3, lsl #2]!
  000ec	13a03487	 movne       r3, #0x87, 8

; 736  :         pMemSections[cSections].dwStart = IMAGE_DSP_CA;

  000f0	13833602	 orrne       r3, r3, #2, 12

; 737  :         pMemSections[cSections].dwLen = IMAGE_DSP_SIZE;

  000f4	13a0260e	 movne       r2, #0xE, 12
  000f8	15853004	 strne       r3, [r5, #4]
  000fc	15852008	 strne       r2, [r5, #8]

; 738  :         cSections++;

  00100	12844001	 addne       r4, r4, #1
  00104		 |$LN1@OEMEnumExt|

; 739  :     }    
; 740  :     
; 741  :     return cSections;
; 742  : }

  00104	e1a00004	 mov         r0, r4
  00108	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0010c	e12fff1e	 bx          lr
  00110		 |$LN12@OEMEnumExt|
  00110		 |$LN13@OEMEnumExt|
  00110	00000000	 DCD         |dwBank1Enabled|
  00114		 |$LN14@OEMEnumExt|
  00114	00000000	 DCD         |??_C@_1DC@LBJFKMIA@?$AAO?$AAE?$AAM?$AAE?$AAn?$AAu?$AAm?$AAE?$AAx?$AAt?$AAe?$AAn?$AAs?$AAi?$AAo?$AAn?$AAD?$AAR?$AAA?$AAM?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00118		 |$LN15@OEMEnumExt|
  00118	00000000	 DCD         |dpCurSettings|
  0011c		 |$M47667|

			 ENDP  ; |OEMEnumExtensionDRAM|

	EXPORT	|OEMInit|
	EXPORT	|??_C@_1BG@OFOAIMMC@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@DDKEAEKM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@POAKKMOD@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAG@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@PJJENIL@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAI?$AA2?$AAC?$AA3?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@MDDDENBF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAI?$AA2?$AAC?$AA2?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@ENLMEKPG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAI?$AA2?$AAC?$AA1?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@LGFJGPEK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@CNJHJBMI@?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@OIDINFAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@MBAMBBI@?$AAO?$AAA?$AAL?$AAV?$AAF?$AAP?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@GMBACFCE@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAP?$AAa?$AAd?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@JBFGJLCD@?$AAO?$AAA?$AAL?$AAP?$AAa?$AAd?$AAC?$AAf?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?4?$AA?4?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@FIOLGOIE@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAU?$AAn?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@LLBIDJEF@?$AAO?$AAA?$AAL?$AAC?$AAa?$AAc?$AAh?$AAe?$AAG?$AAl?$AAo?$AAb?$AAa?$AAl?$AAs?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@FBJJOHIA@?$AAO?$AAA?$AAL?$AA?3?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@GGPFFMPF@?$AAO?$AAA?$AAL?$AA?3?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAL?$AA2?$AA?5?$AAA?$AAu?$AAx?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17EIAJIHBF@?$AAE?$AAV?$AAM?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@KGLOAAMK@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_04BPMAMLNJ@EVM?9?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_1EA@KPKHFCLF@?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAu?$AAn?$AAk?$AAn?$AAo?$AAw?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAF?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@KEKEAPD@?$AAE?$AAV?$AAM?$AA3?$AA5?$AA3?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@CPMDPFBC@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AA3?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_08DGJGOJCE@EVM3530?9?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@EIGPEHIO@?$AAE?$AAV?$AAM?$AA3?$AA7?$AA3?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@KGJEKGDB@?$AAD?$AAM?$AA3?$AA7?$AA3?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_08EMFGLKEE@EVM3730?9?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@JHBBNGEC@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKForceCleanBoot|
	IMPORT	|g_oalIoCtlClockSpeed|
	IMPORT	|Get_CPUMaxSpeed|
	IMPORT	|OALArgsQuery|
	IMPORT	|KITLIoctl|
	IMPORT	|OALPerformanceTimerInit|
	IMPORT	|OALSRAMFnInit|
	IMPORT	|GPIOInit|
	IMPORT	|RequestAndConfigurePadArray|
	IMPORT	|RequestDevicePads|
	IMPORT	|BSPGetDevicePadInfo|
	IMPORT	|OALTimerInit|
	IMPORT	|OALIntrInit|
	IMPORT	|OALVFPInitialize|
	IMPORT	|OALPowerInit|
	IMPORT	|BSPGetAllPadsInfo|
	IMPORT	|OALPadCfgInit|
	IMPORT	|EnableUnalignedAccess|
	IMPORT	|OALCacheGlobalsInit|
	IMPORT	|OALSetMemoryAttributes|
	IMPORT	|OALIsProcessorFeaturePresent|
	IMPORT	|g_pOemGlobal|
	IMPORT	|OALGetL2Aux|
	IMPORT	|g_oalIoCtlProcessorName|
	IMPORT	|g_oalIoCtlPlatformName|
	IMPORT	|g_oalIoCtlPlatformType|
	IMPORT	|Get_CPUVersion|
	IMPORT	|OALLocalAllocInit|
	IMPORT	|OALLogSetZones|

  00008			 AREA	 |.bss|, NOINIT
|?allocationPool@?1??OEMInit@@9@9| % 0x800		; `OEMInit'::`2'::allocationPool
|?allocationPool@?1??OEMInit@@9@9| % 0x800		; `OEMInit'::`2'::allocationPool

  00000			 AREA	 |.pdata|, PDATA
|$T47722| DCD	|$LN61@OEMInit|
	DCD	0x40011002

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@OFOAIMMC@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@DDKEAEKM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi?$AAs@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "P", 0x0, "U"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "m", 0x0, "i", 0x0, "l"
	DCB	0x0, "y", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "i"
	DCB	0x0, "s", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@POAKKMOD@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAG@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "q"
	DCB	0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, "d", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " "
	DCB	0x0, "G", 0x0, "P", 0x0, "I", 0x0, "O", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@PJJENIL@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAI?$AA2?$AAC?$AA3?$AA?$AN@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "q"
	DCB	0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, "d", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C", 0x0, "3"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@MDDDENBF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAI?$AA2?$AAC?$AA2?$AA?$AN@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "q"
	DCB	0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, "d", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C", 0x0, "2"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@ENLMEKPG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAI?$AA2?$AAC?$AA1?$AA?$AN@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "q"
	DCB	0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, "d", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C", 0x0, "1"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@LGFJGPEK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "s", 0x0, "y", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "m"
	DCB	0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@CNJHJBMI@?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e"
	DCB	0x0, "r", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "("
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@OIDINFAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, ":", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@MBAMBBI@?$AAO?$AAA?$AAL?$AAV?$AAF?$AAP?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "V", 0x0, "F", 0x0, "P", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@GMBACFCE@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAP?$AAa?$AAd?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, "P", 0x0, "a", 0x0, "d", 0x0, "A"
	DCB	0x0, "r", 0x0, "r", 0x0, "a", 0x0, "y", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@JBFGJLCD@?$AAO?$AAA?$AAL?$AAP?$AAa?$AAd?$AAC?$AAf?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?4?$AA?4?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "P", 0x0, "a", 0x0, "d", 0x0, "C"
	DCB	0x0, "f", 0x0, "g", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ".", 0x0, ".", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@FIOLGOIE@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAU?$AAn?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "U"
	DCB	0x0, "n", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "g", 0x0, "n"
	DCB	0x0, "e", 0x0, "d", 0x0, "A", 0x0, "c", 0x0, "c", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@LLBIDJEF@?$AAO?$AAA?$AAL?$AAC?$AAa?$AAc?$AAh?$AAe?$AAG?$AAl?$AAo?$AAb?$AAa?$AAl?$AAs?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "C", 0x0, "a", 0x0, "c", 0x0, "h"
	DCB	0x0, "e", 0x0, "G", 0x0, "l", 0x0, "o", 0x0, "b", 0x0, "a"
	DCB	0x0, "l", 0x0, "s", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@FBJJOHIA@?$AAO?$AAA?$AAL?$AA?3?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "P"
	DCB	0x0, "U", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@GGPFFMPF@?$AAO?$AAA?$AAL?$AA?3?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAL?$AA2?$AA?5?$AAA?$AAu?$AAx?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "P"
	DCB	0x0, "U", 0x0, " ", 0x0, "L", 0x0, "2", 0x0, " ", 0x0, "A"
	DCB	0x0, "u", 0x0, "x", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17EIAJIHBF@?$AAE?$AAV?$AAM?$AA?$AA@| DCB "E", 0x0, "V", 0x0, "M", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@KGLOAAMK@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA?$AA@| DCB "O", 0x0, "M", 0x0
	DCB	"A", 0x0, "P", 0x0, "3", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_04BPMAMLNJ@EVM?9?$AA@| DCB "EVM-", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@KPKHFCLF@?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAu?$AAn?$AAk?$AAn?$AAo?$AAw?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAF?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "u", 0x0, "n", 0x0, "k", 0x0, "n"
	DCB	0x0, "o", 0x0, "w", 0x0, " ", 0x0, "C", 0x0, "P", 0x0, "U"
	DCB	0x0, " ", 0x0, "F", 0x0, "a", 0x0, "m", 0x0, "i", 0x0, "l"
	DCB	0x0, "y", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@KEKEAPD@?$AAE?$AAV?$AAM?$AA3?$AA5?$AA3?$AA0?$AA?$AA@| DCB "E", 0x0
	DCB	"V", 0x0, "M", 0x0, "3", 0x0, "5", 0x0, "3", 0x0, "0", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@CPMDPFBC@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AA3?$AA0?$AA?$AA@| DCB "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "3", 0x0, "5", 0x0, "3"
	DCB	0x0, "0", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08DGJGOJCE@EVM3530?9?$AA@| DCB "EVM3530-", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@EIGPEHIO@?$AAE?$AAV?$AAM?$AA3?$AA7?$AA3?$AA0?$AA?$AA@| DCB "E", 0x0
	DCB	"V", 0x0, "M", 0x0, "3", 0x0, "7", 0x0, "3", 0x0, "0", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@KGJEKGDB@?$AAD?$AAM?$AA3?$AA7?$AA3?$AA0?$AA?$AA@| DCB "D", 0x0, "M"
	DCB	0x0, "3", 0x0, "7", 0x0, "3", 0x0, "0", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_08EMFGLKEE@EVM3730?9?$AA@| DCB "EVM3730-", 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@JHBBNGEC@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMInit| PROC

; 196  : {    

  00000		 |$LN61@OEMInit|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M47719|
  00008	e3a03a0d	 mov         r3, #0xD, 20

; 197  :     BOOL	*pColdBoot;
; 198  :     BOOL	*pRetailMsgEnable;
; 199  :     UINT32	CpuRevision;	
; 200  :     static const PAD_INFO gpioPads_37xx[] = {GPIO_PADS_37XX END_OF_PAD_ARRAY};	
; 201  :     static UCHAR allocationPool[2048];
; 202  : 
; 203  :     //----------------------------------------------------------------------
; 204  :     // Initialize OAL log zones
; 205  :     //----------------------------------------------------------------------
; 206  : 
; 207  : 	OALLogSetZones( //(0xFFFF & ~((1<<OAL_LOG_CACHE)|(1<<OAL_LOG_INTR)))|
; 208  : 			(1<<OAL_LOG_VERBOSE)  |
; 209  : 			(1<<OAL_LOG_INFO)     |
; 210  : 			(1<<OAL_LOG_ERROR)    |
; 211  : 			(1<<OAL_LOG_WARN)     |
; 212  : 			(1<<OAL_LOG_IOCTL)    |
; 213  :      //		(1<<OAL_LOG_FUNC)     |
; 214  : 			(1<<OAL_LOG_INTR)         
; 215  : 			);

  0000c	e383000b	 orr         r0, r3, #0xB
  00010	eb000000	 bl          OALLogSetZones

; 216  :     OALMSG(OAL_FUNC, (L"+OEMInit\r\n"));

  00014	e59f7420	 ldr         r7, [pc, #0x420]
  00018	e5973440	 ldr         r3, [r7, #0x440]
  0001c	e3130004	 tst         r3, #4
  00020	159f0410	 ldrne       r0, [pc, #0x410]
  00024	1b000000	 blne        NKDbgPrintfW

; 217  : 
; 218  :     //----------------------------------------------------------------------
; 219  :     // Initialize the OAL memory allocation system (TI code)
; 220  :     //----------------------------------------------------------------------
; 221  :     OALLocalAllocInit(allocationPool,sizeof(allocationPool));

  00028	e59fa404	 ldr         r10, [pc, #0x404]
  0002c	e3a01b02	 mov         r1, #2, 22
  00030	e1a0000a	 mov         r0, r10
  00034	eb000000	 bl          OALLocalAllocInit

; 222  : 
; 223  :     //----------------------------------------------------------------------
; 224  :     // Determion CPU revison
; 225  :     //----------------------------------------------------------------------
; 226  :     CpuRevision = Get_CPUVersion(); // COMMON\SRC\SOC\COMMON_TI_V1\OMAP3530\OAL\CPUVER\oalcpuver.c

  00038	eb000000	 bl          Get_CPUVersion
  0003c	e1a08000	 mov         r8, r0

; 227  :     g_dwCpuRevision = CpuRevision & CPU_REVISION_MASK;
; 228  :     g_dwCpuFamily = (CpuRevision >> CPU_FAMILY_SHIFT) & CPU_REVISION_MASK;

  00040	e59f23e8	 ldr         r2, [pc, #0x3E8]
  00044	e59f93e0	 ldr         r9, [pc, #0x3E0]
  00048	e1a03808	 mov         r3, r8, lsl #16
  0004c	e1a01c23	 mov         r1, r3, lsr #24
  00050	e20830ff	 and         r3, r8, #0xFF

; 229  :     /* save CPU family names */
; 230  :     if(g_dwCpuFamily == CPU_FAMILY_DM37XX) // entry

  00054	e5823000	 str         r3, [r2]
  00058	e5891000	 str         r1, [r9]
  0005c	e3510001	 cmp         r1, #1
  00060	1a000009	 bne         |$LN17@OEMInit|

; 231  :     {
; 232  :         g_oalIoCtlPlatformType = L"EVM3730";

  00064	e59f63bc	 ldr         r6, [pc, #0x3BC]
  00068	e59fe388	 ldr         lr, [pc, #0x388]

; 233  :         g_oalIoCtlPlatformName = L"EVM3730";

  0006c	e59f4388	 ldr         r4, [pc, #0x388]

; 234  :         g_oalIoCtlProcessorName   = L"DM3730";	  

  00070	e59f53ac	 ldr         r5, [pc, #0x3AC]
  00074	e59f2384	 ldr         r2, [pc, #0x384]

; 235  :         gDevice_prefix = "EVM3730-";

  00078	e59f13a0	 ldr         r1, [pc, #0x3A0]
  0007c	e58e6000	 str         r6, [lr]
  00080	e5846000	 str         r6, [r4]
  00084	e5825000	 str         r5, [r2]
  00088	ea000011	 b           |$LN56@OEMInit|
  0008c		 |$LN17@OEMInit|

; 236  :     }
; 237  :     else if (g_dwCpuFamily == CPU_FAMILY_OMAP35XX) // xx

  0008c	e3510000	 cmp         r1, #0

; 238  :     {
; 239  :         g_oalIoCtlPlatformType = L"EVM3530";

  00090	059f5384	 ldreq       r5, [pc, #0x384]

; 240  :         g_oalIoCtlPlatformName = L"EVM3530";		
; 241  :         g_oalIoCtlProcessorName   = L"OMAP3530";	

  00094	059f437c	 ldreq       r4, [pc, #0x37C]

; 242  :         gDevice_prefix = "EVM3530-";

  00098	059f1374	 ldreq       r1, [pc, #0x374]
  0009c	0a000006	 beq         |$LN57@OEMInit|

; 243  :     }
; 244  :     else
; 245  :     {
; 246  :         OALMSG(OAL_ERROR, (L"OEMInit: unknow CPU Family %d\r\n", g_dwCpuFamily));

  000a0	e5973440	 ldr         r3, [r7, #0x440]
  000a4	e3130001	 tst         r3, #1
  000a8	159f0360	 ldrne       r0, [pc, #0x360]
  000ac	1b000000	 blne        NKDbgPrintfW

; 247  :         g_oalIoCtlPlatformType = L"EVM";

  000b0	e59f5354	 ldr         r5, [pc, #0x354]

; 248  :         g_oalIoCtlPlatformName = L"EVM";		
; 249  :         g_oalIoCtlProcessorName   = L"OMAP3";	

  000b4	e59f434c	 ldr         r4, [pc, #0x34C]

; 250  :         gDevice_prefix = "EVM-";

  000b8	e59f1344	 ldr         r1, [pc, #0x344]
  000bc		 |$LN57@OEMInit|
  000bc	e59f233c	 ldr         r2, [pc, #0x33C]
  000c0	e59fe334	 ldr         lr, [pc, #0x334]
  000c4	e59f032c	 ldr         r0, [pc, #0x32C]
  000c8	e5824000	 str         r4, [r2]
  000cc	e58e5000	 str         r5, [lr]
  000d0	e5805000	 str         r5, [r0]
  000d4		 |$LN56@OEMInit|
  000d4	e59f3318	 ldr         r3, [pc, #0x318]

; 251  : 		
; 252  :     }
; 253  :     //OALMSG(OAL_ERROR, (L"OAL: CPU revision 0x%x:%s\r\n", g_dwCpuRevision, g_oalIoCtlProcessorName));
; 254  : 	OALMSG(1, (L"OAL: CPU = %x\r\n", (CpuRevision >> CHIP_ID_SHIFT) & CHIP_ID_MASK));

  000d8	e59f0310	 ldr         r0, [pc, #0x310]
  000dc	e5831000	 str         r1, [r3]
  000e0	e1a01828	 mov         r1, r8, lsr #16
  000e4	eb000000	 bl          NKDbgPrintfW

; 255  :     OALMSG(1, (L"OAL: CPU L2 Aux register 0x%x\r\n", OALGetL2Aux()));

  000e8	eb000000	 bl          OALGetL2Aux
  000ec	e1a01000	 mov         r1, r0
  000f0	e59f02f4	 ldr         r0, [pc, #0x2F4]
  000f4	eb000000	 bl          NKDbgPrintfW

; 256  :     //----------------------------------------------------------------------
; 257  :     // Update platform specific variables
; 258  :     //----------------------------------------------------------------------
; 259  : 
; 260  :     //----------------------------------------------------------------------
; 261  :     // Update kernel variables
; 262  :     //----------------------------------------------------------------------
; 263  :     dwNKDrWatsonSize = dwOEMDrWatsonSize;

  000f8	e59f52e8	 ldr         r5, [pc, #0x2E8]
  000fc	e59f42e0	 ldr         r4, [pc, #0x2E0]
  00100	e3a01c27	 mov         r1, #0x27, 24
  00104	e5952000	 ldr         r2, [r5]
  00108	e5943000	 ldr         r3, [r4]

; 264  : 
; 265  :     // Alarm has resolution 10 seconds (actually has 1 second resolution, 
; 266  : 	// but setting alarm too close to suspend will cause problems).
; 267  :     dwNKAlarmResolutionMSec = 10000;

  0010c	e3811010	 orr         r1, r1, #0x10

; 268  : 
; 269  :     // Set extension functions
; 270  :     pOEMIsProcessorFeaturePresent = OALIsProcessorFeaturePresent;

  00110	e59f02c8	 ldr         r0, [pc, #0x2C8]
  00114	e58320a8	 str         r2, [r3, #0xA8]
  00118	e5943000	 ldr         r3, [r4]

; 271  :     pfnOEMSetMemoryAttributes     = OALSetMemoryAttributes;

  0011c	e59f22b8	 ldr         r2, [pc, #0x2B8]

; 272  :     g_pOemGlobal->pfnEnumExtensionDRAM = OEMEnumExtensionDRAM;

  00120	e59fe2b0	 ldr         lr, [pc, #0x2B0]
  00124	e58310e4	 str         r1, [r3, #0xE4]
  00128	e5943000	 ldr         r3, [r4]
  0012c	e58300c0	 str         r0, [r3, #0xC0]
  00130	e5943000	 ldr         r3, [r4]
  00134	e58320bc	 str         r2, [r3, #0xBC]
  00138	e5943000	 ldr         r3, [r4]
  0013c	e583e05c	 str         lr, [r3, #0x5C]

; 273  :     
; 274  :     //----------------------------------------------------------------------
; 275  :     // Windows Mobile backward compatibility issue...
; 276  :     //----------------------------------------------------------------------
; 277  : /*
; 278  :     switch (dwOEMTargetProject)
; 279  : 	{
; 280  :         case OEM_TARGET_PROJECT_SMARTFON:
; 281  :         case OEM_TARGET_PROJECT_WPC:
; 282  :             CEProcessorType = PROCESSOR_STRONGARM;
; 283  :             break;
; 284  : 	}
; 285  : */
; 286  :     //----------------------------------------------------------------------
; 287  :     // Initialize cache globals
; 288  :     //----------------------------------------------------------------------
; 289  : 	OALMSG(OAL_FUNC, (L"OALCacheGlobalsInit()\r\n"));

  00140	e5973440	 ldr         r3, [r7, #0x440]
  00144	e3130004	 tst         r3, #4
  00148	159f0284	 ldrne       r0, [pc, #0x284]
  0014c	1b000000	 blne        NKDbgPrintfW

; 290  :     OALCacheGlobalsInit();

  00150	eb000000	 bl          OALCacheGlobalsInit

; 291  : 	OALMSG(OAL_FUNC, (L"EnableUnalignedAccess()\r\n"));

  00154	e5973440	 ldr         r3, [r7, #0x440]
  00158	e3130004	 tst         r3, #4
  0015c	159f026c	 ldrne       r0, [pc, #0x26C]
  00160	1b000000	 blne        NKDbgPrintfW

; 292  :     EnableUnalignedAccess();

  00164	eb000000	 bl          EnableUnalignedAccess

; 293  : 
; 294  :     #ifdef DEBUG
; 295  :         OALMSG(1, (L"CPU CP15 Control Register = 0x%x\r\n", GetCp15ControlRegister()));
; 296  :         OALMSG(1, (L"CPU CP15 Auxiliary Control Register = 0x%x\r\n", GetCp15AuxiliaryControlRegister()));
; 297  :     #endif
; 298  :     //----------------------------------------------------------------------
; 299  :     // Initialize PAD cfg
; 300  :     //----------------------------------------------------------------------
; 301  :     OALMSG(OAL_FUNC, (L"OALPadCfgInit..()\r\n"));

  00168	e5973440	 ldr         r3, [r7, #0x440]
  0016c	e3130004	 tst         r3, #4
  00170	159f0254	 ldrne       r0, [pc, #0x254]
  00174	1b000000	 blne        NKDbgPrintfW

; 302  :     OALPadCfgInit();

  00178	eb000000	 bl          OALPadCfgInit

; 303  : 	
; 304  :     //----------------------------------------------------------------------
; 305  :     // configure pin mux
; 306  :     //----------------------------------------------------------------------
; 307  :     OALMSG(OAL_FUNC, (L"ConfigurePadArray()\r\n"));

  0017c	e5973440	 ldr         r3, [r7, #0x440]
  00180	e3130004	 tst         r3, #4
  00184	159f022c	 ldrne       r0, [pc, #0x22C]
  00188	1b000000	 blne        NKDbgPrintfW

; 308  :     ConfigurePadArray(BSPGetAllPadsInfo());

  0018c	eb000000	 bl          BSPGetAllPadsInfo
  00190	eb000000	 bl          ConfigurePadArray

; 309  :     
; 310  :     //----------------------------------------------------------------------
; 311  :     // Initialize Power Domains
; 312  :     //----------------------------------------------------------------------
; 313  :     OALPowerInit();

  00194	eb000000	 bl          OALPowerInit

; 314  : 
; 315  :     //----------------------------------------------------------------------
; 316  :     // Initialize Vector Floating Point co-processor
; 317  :     //----------------------------------------------------------------------
; 318  : 	OALMSG(OAL_FUNC, (L"OALVFPInitialize()\r\n"));

  00198	e5973440	 ldr         r3, [r7, #0x440]
  0019c	e3130004	 tst         r3, #4
  001a0	159f0220	 ldrne       r0, [pc, #0x220]
  001a4	1b000000	 blne        NKDbgPrintfW

; 319  :     OALVFPInitialize(g_pOemGlobal);

  001a8	e5940000	 ldr         r0, [r4]
  001ac	eb000000	 bl          OALVFPInitialize

; 320  : 
; 321  :     //----------------------------------------------------------------------
; 322  :     // Initialize interrupt
; 323  :     //----------------------------------------------------------------------
; 324  :     if (!OALIntrInit())

  001b0	eb000000	 bl          OALIntrInit

; 325  :         {
; 326  :         OALMSG(OAL_ERROR, (
; 327  :             L"ERROR: OEMInit: failed to initialize interrupts\r\n"
; 328  :             ));

  001b4	e5973440	 ldr         r3, [r7, #0x440]
  001b8	e3500000	 cmp         r0, #0
  001bc	1a000004	 bne         |$LN13@OEMInit|
  001c0	e3130001	 tst         r3, #1
  001c4	0a00006b	 beq         |$cleanUp$47293|
  001c8	e59f01f4	 ldr         r0, [pc, #0x1F4]
  001cc	eb000000	 bl          NKDbgPrintfW

; 329  :         goto cleanUp;

  001d0	ea000068	 b           |$cleanUp$47293|
  001d4		 |$LN13@OEMInit|

; 330  :         }
; 331  : 
; 332  :     //----------------------------------------------------------------------
; 333  :     // Initialize system clock
; 334  :     //----------------------------------------------------------------------
; 335  : 	OALMSG(OAL_FUNC, (L"OALTimerInit()\r\n"));

  001d4	e3130004	 tst         r3, #4
  001d8	159f01e0	 ldrne       r0, [pc, #0x1E0]
  001dc	1b000000	 blne        NKDbgPrintfW

; 336  :     if (!OALTimerInit(1, 0, 0))

  001e0	e3a02000	 mov         r2, #0
  001e4	e3a01000	 mov         r1, #0
  001e8	e3a00001	 mov         r0, #1
  001ec	eb000000	 bl          OALTimerInit
  001f0	e5973440	 ldr         r3, [r7, #0x440]
  001f4	e3500000	 cmp         r0, #0
  001f8	1a000004	 bne         |$LN12@OEMInit|

; 337  :         {
; 338  :         OALMSG(OAL_ERROR, (
; 339  :             L"ERROR: OEMInit: Failed to initialize system clock\r\n"
; 340  :             ));

  001fc	e3130001	 tst         r3, #1
  00200	0a00005c	 beq         |$cleanUp$47293|
  00204	e59f01b0	 ldr         r0, [pc, #0x1B0]
  00208	eb000000	 bl          NKDbgPrintfW
  0020c	ea000059	 b           |$cleanUp$47293|
  00210		 |$LN12@OEMInit|

; 341  :         goto cleanUp;
; 342  :         }
; 343  : 	OALMSG(OAL_FUNC, (L"ConfigurePadArray()\r\n"));

  00210	e3130004	 tst         r3, #4
  00214	159f019c	 ldrne       r0, [pc, #0x19C]
  00218	1b000000	 blne        NKDbgPrintfW

; 344  :     // Configure the pads for the DSS (to keep the splashscreen active)
; 345  :     // do not request it, it may make the DSS driver fail to load (because it will not ba able to request its pads)
; 346  :     ConfigurePadArray(BSPGetDevicePadInfo(OMAP_DEVICE_DSS)); // DSS_PADS_37XX

  0021c	e3a0003f	 mov         r0, #0x3F
  00220	eb000000	 bl          BSPGetDevicePadInfo
  00224	eb000000	 bl          ConfigurePadArray

; 347  :     //same thing for the UART3 (used for our OAL serial output
; 348  :     ConfigurePadArray(BSPGetDevicePadInfo(OMAP_DEVICE_UART1)); // barcode

  00228	e3a0000a	 mov         r0, #0xA
  0022c	eb000000	 bl          BSPGetDevicePadInfo
  00230	eb000000	 bl          ConfigurePadArray

; 349  :     ConfigurePadArray(BSPGetDevicePadInfo(OMAP_DEVICE_HSOTGUSB));

  00234	e3a00003	 mov         r0, #3
  00238	eb000000	 bl          BSPGetDevicePadInfo
  0023c	eb000000	 bl          ConfigurePadArray

; 350  : 
; 351  :     //all other pads are to be requested (GPMC is never reserved by drivers, I2C is handled by the kernel)
; 352  :     // GPIOs reservation may be split on per-GPIO basis and moved into the drivers that needs the GPIO. TBD
; 353  : 	// if (!RequestDevicePads(OMAP_DEVICE_GPMC)) OALMSG(OAL_ERROR, (TEXT("Failed to request pads for GPMC\r\n")));
; 354  :     if (!RequestDevicePads(OMAP_DEVICE_I2C1)) OALMSG(OAL_ERROR, (TEXT("Failed to request pads for I2C1\r\n")));

  00240	e3a0000c	 mov         r0, #0xC
  00244	eb000000	 bl          RequestDevicePads
  00248	e3500000	 cmp         r0, #0
  0024c	1a000003	 bne         |$LN42@OEMInit|
  00250	e5973440	 ldr         r3, [r7, #0x440]
  00254	e3130001	 tst         r3, #1
  00258	159f0154	 ldrne       r0, [pc, #0x154]
  0025c	1b000000	 blne        NKDbgPrintfW
  00260		 |$LN42@OEMInit|

; 355  :     if (!RequestDevicePads(OMAP_DEVICE_I2C2)) OALMSG(OAL_ERROR, (TEXT("Failed to request pads for I2C2\r\n")));

  00260	e3a0000d	 mov         r0, #0xD
  00264	eb000000	 bl          RequestDevicePads
  00268	e3500000	 cmp         r0, #0
  0026c	1a000003	 bne         |$LN44@OEMInit|
  00270	e5973440	 ldr         r3, [r7, #0x440]
  00274	e3130001	 tst         r3, #1
  00278	159f0130	 ldrne       r0, [pc, #0x130]
  0027c	1b000000	 blne        NKDbgPrintfW
  00280		 |$LN44@OEMInit|

; 356  :     if (!RequestDevicePads(OMAP_DEVICE_I2C3)) OALMSG(OAL_ERROR, (TEXT("Failed to request pads for I2C3\r\n")));

  00280	e3a0000e	 mov         r0, #0xE
  00284	eb000000	 bl          RequestDevicePads
  00288	e3500000	 cmp         r0, #0
  0028c	1a000003	 bne         |$LN54@OEMInit|
  00290	e5973440	 ldr         r3, [r7, #0x440]
  00294	e3130001	 tst         r3, #1
  00298	159f010c	 ldrne       r0, [pc, #0x10C]
  0029c	1b000000	 blne        NKDbgPrintfW
  002a0		 |$LN54@OEMInit|

; 357  :     if(g_dwCpuFamily == CPU_FAMILY_DM37XX)

  002a0	e5991000	 ldr         r1, [r9]
  002a4	e3510001	 cmp         r1, #1
  002a8	1a000009	 bne         |$LN8@OEMInit|

; 358  :     {
; 359  :         if (!RequestAndConfigurePadArray(gpioPads_37xx)) OALMSG(OAL_ERROR, (TEXT("Failed to request pads for the GPIOs\r\n")));

  002ac	e2850020	 add         r0, r5, #0x20
  002b0	eb000000	 bl          RequestAndConfigurePadArray
  002b4	e3500000	 cmp         r0, #0
  002b8	1a00000a	 bne         |$LN50@OEMInit|
  002bc	e5973440	 ldr         r3, [r7, #0x440]
  002c0	e3130001	 tst         r3, #1
  002c4	0a000007	 beq         |$LN50@OEMInit|
  002c8	e59f00d8	 ldr         r0, [pc, #0xD8]
  002cc	eb000000	 bl          NKDbgPrintfW

; 360  :     }
; 361  :     else if(g_dwCpuFamily == CPU_FAMILY_OMAP35XX)

  002d0	ea000004	 b           |$LN50@OEMInit|
  002d4		 |$LN8@OEMInit|
  002d4	e3510000	 cmp         r1, #0
  002d8	15973440	 ldrne       r3, [r7, #0x440]

; 362  :     {
; 363  :         //if (!RequestAndConfigurePadArray(gpioPads)) OALMSG(OAL_ERROR, (TEXT("Failed to request pads for the GPIOs\r\n")));
; 364  :     }
; 365  :     else
; 366  :     {
; 367  :         OALMSG(OAL_ERROR, (
; 368  :             L"ERROR: OEMInit: CPU family %d is not supported\r\n", g_dwCpuFamily));

  002dc	13130001	 tstne       r3, #1
  002e0	159f00bc	 ldrne       r0, [pc, #0xBC]
  002e4	1b000000	 blne        NKDbgPrintfW
  002e8		 |$LN50@OEMInit|

; 369  :     }
; 370  : 
; 371  :     GPIOInit();

  002e8	eb000000	 bl          GPIOInit

; 372  : 
; 373  :     //----------------------------------------------------------------------
; 374  :     // Set GPIOs default values (like the buffers' OE)
; 375  :     //----------------------------------------------------------------------
; 376  :     OALGPIOSetDefaultValues();

  002ec	eb000000	 bl          OALGPIOSetDefaultValues

; 377  : 
; 378  :     //----------------------------------------------------------------------
; 379  :     // Initialize SRAM Functions
; 380  :     //----------------------------------------------------------------------
; 381  :     OALSRAMFnInit();

  002f0	eb000000	 bl          OALSRAMFnInit

; 382  :     
; 383  :     //----------------------------------------------------------------------
; 384  :     // kSYS_CLK calibration
; 385  :     // Now compute the real kSYS_CLK clock value. 
; 386  :     //----------------------------------------------------------------------
; 387  :     OALCalibrateSysClk();

  002f4	eb000000	 bl          OALCalibrateSysClk

; 388  : 
; 389  :     //----------------------------------------------------------------------
; 390  :     // Initialize high performance counter and profiling function pointers
; 391  :     //----------------------------------------------------------------------
; 392  :     OALPerformanceTimerInit();

  002f8	eb000000	 bl          OALPerformanceTimerInit

; 393  :     
; 394  : #ifdef TEST_TPS65023	//xx
; 395  :     { // Temporary : test of the TPS65023 interface
; 396  :         HANDLE hTwl;
; 397  :         HANDLE hI2CADC;
; 398  :         UINT16 mvMeasured=0;
; 399  :         volatile int debug=1;
; 400  :         UINT32 mv,mv1,mv4,mv5;
; 401  :         hI2CADC = I2COpen(OMAP_DEVICE_I2C1);
; 402  :         I2CSetSlaveAddress(hI2CADC,0x41);
; 403  :         I2CSetSubAddressMode(hI2CADC,I2C_SUBADDRESS_MODE_0);
; 404  :         hTwl = TWLOpen();
; 405  :         RETAILMSG(1,(TEXT("triton ID 0x%x \r\n"),TWLReadIDCode(hTwl)));
; 406  :         TWLGetVoltage(VDCDC1,&mv1);
; 407  :         TWLGetVoltage(VLDO1,&mv4);
; 408  :         TWLGetVoltage(VLDO2,&mv5);
; 409  :         RETAILMSG(1,(TEXT("vdcdc1 %d \r\n"),mv1));
; 410  :         RETAILMSG(1,(TEXT("ldo1 %d \r\n"),mv4));
; 411  :         RETAILMSG(1,(TEXT("ldo2 %d \r\n"),mv5));
; 412  : 
; 413  :         while(debug)
; 414  :         {
; 415  :             for (mv=1200;mv<1400;mv+=25)
; 416  :             {
; 417  :                 TWLSetVoltage(VDCDC1,mv);
; 418  :                 TWLGetVoltage(VDCDC1,&mv1);
; 419  :                 //I2CRead(hI2CADC,0,&mvMeasured,2);// Not working because some resistor are not placed
; 420  :                 RETAILMSG(1,(TEXT("vdcdc1 %d 0x%x \r\n"),mv1,mvMeasured));
; 421  :                 OALStall(1000);
; 422  :             }
; 423  :             for (mv=1400;mv>=1200;mv-=25)
; 424  :             {
; 425  :                 TWLSetVoltage(VDCDC1,mv);
; 426  :                 TWLGetVoltage(VDCDC1,&mv1);
; 427  :                 //I2CRead(hI2CADC,0,&mvMeasured,2);// Not working because some resistor are not placed
; 428  :                 RETAILMSG(1,(TEXT("vdcdc1 %d 0x%x \r\n"),mv1,mvMeasured));
; 429  :                 OALStall(1000);
; 430  :             }
; 431  :         }
; 432  :     }
; 433  : #endif
; 434  : 
; 435  :     //----------------------------------------------------------------------
; 436  :     // Initialize KITL
; 437  :     //----------------------------------------------------------------------
; 438  :     g_oalKitlEnabled = KITLIoctl(IOCTL_KITL_STARTUP, NULL, 0, NULL, 0, NULL);

  002fc	e59f009c	 ldr         r0, [pc, #0x9C]
  00300	e3a0e000	 mov         lr, #0
  00304	e3a03000	 mov         r3, #0
  00308	e3a02000	 mov         r2, #0
  0030c	e3a01000	 mov         r1, #0
  00310	e58de004	 str         lr, [sp, #4]
  00314	e58de000	 str         lr, [sp]
  00318	eb000000	 bl          KITLIoctl
  0031c	e59f2078	 ldr         r2, [pc, #0x78]
  00320	e1a03000	 mov         r3, r0

; 439  : 
; 440  :     //----------------------------------------------------------------------
; 441  :     // Initialize the watchdog
; 442  :     //----------------------------------------------------------------------
; 443  : #ifdef BSP_OMAP_WATCHDOG // xx
; 444  :     OALWatchdogInit(BSP_WATCHDOG_PERIOD_MILLISECONDS,BSP_WATCHDOG_THREAD_PRIORITY);
; 445  : #endif
; 446  : 
; 447  :     //----------------------------------------------------------------------
; 448  :     // Check for retail messages enabled
; 449  :     //----------------------------------------------------------------------
; 450  :     pRetailMsgEnable = OALArgsQuery(OAL_ARGS_QUERY_OALFLAGS);

  00324	e3a00044	 mov         r0, #0x44
  00328	e5823000	 str         r3, [r2]
  0032c	eb000000	 bl          OALArgsQuery
  00330	e3500000	 cmp         r0, #0

; 451  :     if (pRetailMsgEnable && (*pRetailMsgEnable & OAL_ARGS_OALFLAGS_RETAILMSG_ENABLE))

  00334	15903000	 ldrne       r3, [r0]

; 452  :         g_oalRetailMsgEnable = TRUE;
; 453  : 
; 454  :     //----------------------------------------------------------------------
; 455  :     // Deinitialize serial debug
; 456  :     //----------------------------------------------------------------------
; 457  :     //?? if (!g_oalRetailMsgEnable)
; 458  :     //??    OEMDeinitDebugSerial();
; 459  : 
; 460  : // not available under CE6
; 461  : #if (_WINCEOSVER >= 700)
; 462  :     //----------------------------------------------------------------------
; 463  :     // Make Page Tables walk L2 cacheable. There are 2 new fields in OEMGLOBAL
; 464  :     // that we need to update:
; 465  :     // dwTTBRCacheBits - the bits to set for TTBR to change page table walk
; 466  :     //                   to be L2 cacheable. (Cortex-A8 TRM, section 3.2.31)
; 467  :     //                   Set this to be "Outer Write-Back, Write-Allocate".
; 468  :     // dwPageTableCacheBits - bits to indicate cacheability to access Level
; 469  :     //                   L2 page table. We need to set it to "inner no cache,
; 470  :     //                   outer write-back, write-allocate. i.e.
; 471  :     //                      TEX = 0b101, and C=B=0.
; 472  :     //                   (ARM1176 TRM, section 6.11.2, figure 6.7, small (4k) page)
; 473  :     //----------------------------------------------------------------------
; 474  :     g_pOemGlobal->dwTTBRCacheBits = 0x8;            // TTBR RGN set to 0b01 - outer write back, write-allocate
; 475  :     g_pOemGlobal->dwPageTableCacheBits = 0x140;     // Page table cacheability uses 1BB/AA format, where AA = 0b00 (inner non-cached)
; 476  : #endif
; 477  : 
; 478  :     g_oalIoCtlClockSpeed = Get_CPUMaxSpeed(g_dwCpuFamily); //get MPU clock rate

  00338	e5990000	 ldr         r0, [r9]
  0033c	13130001	 tstne       r3, #1
  00340	13a03001	 movne       r3, #1
  00344	158a3800	 strne       r3, [r10, #0x800]
  00348	eb000000	 bl          Get_CPUMaxSpeed
  0034c	e59f2044	 ldr         r2, [pc, #0x44]
  00350	e1a03000	 mov         r3, r0

; 479  : 
; 480  :     //----------------------------------------------------------------------
; 481  :     // Check for a clean boot of device
; 482  :     //----------------------------------------------------------------------
; 483  :     pColdBoot = OALArgsQuery(OAL_ARGS_QUERY_COLDBOOT);

  00354	e3a00040	 mov         r0, #0x40
  00358	e5823000	 str         r3, [r2]
  0035c	eb000000	 bl          OALArgsQuery
  00360	e3500000	 cmp         r0, #0

; 484  :     if ((pColdBoot == NULL)|| ((pColdBoot != NULL) && *pColdBoot))

  00364	0a000002	 beq         |$LN1@OEMInit|
  00368	e5903000	 ldr         r3, [r0]
  0036c	e3530000	 cmp         r3, #0
  00370	0a000000	 beq         |$cleanUp$47293|
  00374		 |$LN1@OEMInit|

; 485  :         NKForceCleanBoot();

  00374	eb000000	 bl          NKForceCleanBoot
  00378		 |$cleanUp$47293|

; 325  :         {
; 326  :         OALMSG(OAL_ERROR, (
; 327  :             L"ERROR: OEMInit: failed to initialize interrupts\r\n"
; 328  :             ));

  00378	e5973440	 ldr         r3, [r7, #0x440]

; 486  :     
; 487  : cleanUp:
; 488  :     OALMSG(OAL_FUNC, (L"-OEMInit\r\n"));

  0037c	e3130004	 tst         r3, #4
  00380	159f000c	 ldrne       r0, [pc, #0xC]
  00384	1b000000	 blne        NKDbgPrintfW

; 489  : }

  00388	e28dd008	 add         sp, sp, #8
  0038c	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00390	e12fff1e	 bx          lr
  00394		 |$LN62@OEMInit|
  00394		 |$LN63@OEMInit|
  00394	00000000	 DCD         |??_C@_1BG@OFOAIMMC@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  00398		 |$LN64@OEMInit|
  00398	00000000	 DCD         |g_oalIoCtlClockSpeed|
  0039c		 |$LN65@OEMInit|
  0039c	00000000	 DCD         |g_oalKitlEnabled|
  003a0		 |$LN66@OEMInit|
  003a0	01010138	 DCD         0x1010138
  003a4		 |$LN67@OEMInit|
  003a4	00000000	 DCD         |??_C@_1GC@DDKEAEKM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?5?$AA?$CF?$AAd?$AA?5?$AAi?$AAs@|
  003a8		 |$LN68@OEMInit|
  003a8	00000000	 DCD         |??_C@_1EO@POAKKMOD@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAG@|
  003ac		 |$LN69@OEMInit|
  003ac	00000000	 DCD         |??_C@_1EE@PJJENIL@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAI?$AA2?$AAC?$AA3?$AA?$AN@|
  003b0		 |$LN70@OEMInit|
  003b0	00000000	 DCD         |??_C@_1EE@MDDDENBF@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAI?$AA2?$AAC?$AA2?$AA?$AN@|
  003b4		 |$LN71@OEMInit|
  003b4	00000000	 DCD         |??_C@_1EE@ENLMEKPG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAp?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAI?$AA2?$AAC?$AA1?$AA?$AN@|
  003b8		 |$LN72@OEMInit|
  003b8	00000000	 DCD         |??_C@_1CM@GMBACFCE@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAP?$AAa?$AAd?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  003bc		 |$LN73@OEMInit|
  003bc	00000000	 DCD         |??_C@_1GI@LGFJGPEK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@|
  003c0		 |$LN74@OEMInit|
  003c0	00000000	 DCD         |??_C@_1CC@CNJHJBMI@?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  003c4		 |$LN75@OEMInit|
  003c4	00000000	 DCD         |??_C@_1GE@OIDINFAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@|
  003c8		 |$LN76@OEMInit|
  003c8	00000000	 DCD         |??_C@_1CK@MBAMBBI@?$AAO?$AAA?$AAL?$AAV?$AAF?$AAP?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  003cc		 |$LN77@OEMInit|
  003cc	00000000	 DCD         |??_C@_1CI@JBFGJLCD@?$AAO?$AAA?$AAL?$AAP?$AAa?$AAd?$AAC?$AAf?$AAg?$AAI?$AAn?$AAi?$AAt?$AA?4?$AA?4?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  003d0		 |$LN78@OEMInit|
  003d0	00000000	 DCD         |??_C@_1DE@FIOLGOIE@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAU?$AAn?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  003d4		 |$LN79@OEMInit|
  003d4	00000000	 DCD         |??_C@_1DA@LLBIDJEF@?$AAO?$AAA?$AAL?$AAC?$AAa?$AAc?$AAh?$AAe?$AAG?$AAl?$AAo?$AAb?$AAa?$AAl?$AAs?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  003d8		 |$LN80@OEMInit|
  003d8	00000000	 DCD         |OEMEnumExtensionDRAM|
  003dc		 |$LN81@OEMInit|
  003dc	00000000	 DCD         |OALSetMemoryAttributes|
  003e0		 |$LN82@OEMInit|
  003e0	00000000	 DCD         |OALIsProcessorFeaturePresent|
  003e4		 |$LN83@OEMInit|
  003e4	00000000	 DCD         |g_pOemGlobal|
  003e8		 |$LN84@OEMInit|
  003e8	00000000	 DCD         |dwOEMDrWatsonSize|
  003ec		 |$LN85@OEMInit|
  003ec	00000000	 DCD         |??_C@_1EA@GGPFFMPF@?$AAO?$AAA?$AAL?$AA?3?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAL?$AA2?$AA?5?$AAA?$AAu?$AAx?$AA?5?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  003f0		 |$LN86@OEMInit|
  003f0	00000000	 DCD         |??_C@_1CA@FBJJOHIA@?$AAO?$AAA?$AAL?$AA?3?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  003f4		 |$LN87@OEMInit|
  003f4	00000000	 DCD         |gDevice_prefix|
  003f8		 |$LN88@OEMInit|
  003f8	00000000	 DCD         |g_oalIoCtlPlatformType|
  003fc		 |$LN89@OEMInit|
  003fc	00000000	 DCD         |g_oalIoCtlPlatformName|
  00400		 |$LN90@OEMInit|
  00400	00000000	 DCD         |g_oalIoCtlProcessorName|
  00404		 |$LN91@OEMInit|
  00404	00000000	 DCD         |??_C@_04BPMAMLNJ@EVM?9?$AA@|
  00408		 |$LN92@OEMInit|
  00408	00000000	 DCD         |??_C@_1M@KGLOAAMK@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA?$AA@|
  0040c		 |$LN93@OEMInit|
  0040c	00000000	 DCD         |??_C@_17EIAJIHBF@?$AAE?$AAV?$AAM?$AA?$AA@|
  00410		 |$LN94@OEMInit|
  00410	00000000	 DCD         |??_C@_1EA@KPKHFCLF@?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAu?$AAn?$AAk?$AAn?$AAo?$AAw?$AA?5?$AAC?$AAP?$AAU?$AA?5?$AAF?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00414		 |$LN95@OEMInit|
  00414	00000000	 DCD         |??_C@_08DGJGOJCE@EVM3530?9?$AA@|
  00418		 |$LN96@OEMInit|
  00418	00000000	 DCD         |??_C@_1BC@CPMDPFBC@?$AAO?$AAM?$AAA?$AAP?$AA3?$AA5?$AA3?$AA0?$AA?$AA@|
  0041c		 |$LN97@OEMInit|
  0041c	00000000	 DCD         |??_C@_1BA@KEKEAPD@?$AAE?$AAV?$AAM?$AA3?$AA5?$AA3?$AA0?$AA?$AA@|
  00420		 |$LN98@OEMInit|
  00420	00000000	 DCD         |??_C@_08EMFGLKEE@EVM3730?9?$AA@|
  00424		 |$LN99@OEMInit|
  00424	00000000	 DCD         |??_C@_1O@KGJEKGDB@?$AAD?$AAM?$AA3?$AA7?$AA3?$AA0?$AA?$AA@|
  00428		 |$LN100@OEMInit|
  00428	00000000	 DCD         |??_C@_1BA@EIGPEHIO@?$AAE?$AAV?$AAM?$AA3?$AA7?$AA3?$AA0?$AA?$AA@|
  0042c		 |$LN101@OEMInit|
  0042c	00000000	 DCD         |g_dwCpuFamily|
  00430		 |$LN102@OEMInit|
  00430	00000000	 DCD         |g_dwCpuRevision|
  00434		 |$LN103@OEMInit|
  00434	00000000	 DCD         |?allocationPool@?1??OEMInit@@9@9|
  00438		 |$LN104@OEMInit|
  00438	00000000	 DCD         |??_C@_1BG@JHBBNGEC@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0043c		 |$LN105@OEMInit|
  0043c	00000000	 DCD         |dpCurSettings|
  00440		 |$M47720|

			 ENDP  ; |OEMInit|

	END
