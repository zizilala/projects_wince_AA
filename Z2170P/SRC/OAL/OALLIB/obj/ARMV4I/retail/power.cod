; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\OAL\OALLIB\power.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|s_mpuPowerState| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|BSPPowerOff|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|BSPGetDebugUARTConfig|
	IMPORT	|OEMDeinitDebugSerial|
	IMPORT	|g_oalRetailMsgEnable|
	IMPORT	|OALTimerStop|
	IMPORT	|g_PrcmPrm|
	IMPORT	|SmartReflex_EnableMonitor|
	IMPORT	|IsSmartReflexMonitoringEnabled|

  00004			 AREA	 |.bss|, NOINIT
|s_enableSmartReflex2| % 0x4
|s_enableSmartReflex2| % 0x4
|s_enableSmartReflex1| % 0x4
; File c:\wince600\platform\z2170p\src\oal\oallib\power.c

  00000			 AREA	 |.pdata|, PDATA
|$T47218| DCD	|$LN10@BSPPowerOf|
	DCD	0x40002e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BSPPowerOff| PROC

; 84   : {

  00000		 |$LN10@BSPPowerOf|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47215|

; 85   :     // Disable Smartreflex if enabled.
; 86   :     if (IsSmartReflexMonitoringEnabled(kSmartReflex_Channel1))

  00004	e3a00000	 mov         r0, #0
  00008	eb000000	 bl          IsSmartReflexMonitoringEnabled

; 87   : 	{
; 88   :         s_enableSmartReflex1 = TRUE;

  0000c	e59f40a0	 ldr         r4, [pc, #0xA0]
  00010	e3500000	 cmp         r0, #0
  00014	0a000005	 beq         |$LN5@BSPPowerOf|
  00018	e3a03001	 mov         r3, #1

; 89   :         SmartReflex_EnableMonitor(kSmartReflex_Channel1, FALSE);

  0001c	e3a01000	 mov         r1, #0
  00020	e3a00000	 mov         r0, #0
  00024	e5843004	 str         r3, [r4, #4]
  00028	eb000000	 bl          SmartReflex_EnableMonitor

; 90   : 	}
; 91   :     else

  0002c	ea000001	 b           |$LN4@BSPPowerOf|
  00030		 |$LN5@BSPPowerOf|

; 92   : 	{
; 93   :         s_enableSmartReflex1 = FALSE;

  00030	e3a03000	 mov         r3, #0
  00034	e5843004	 str         r3, [r4, #4]
  00038		 |$LN4@BSPPowerOf|

; 94   : 	}
; 95   : 
; 96   :     if (IsSmartReflexMonitoringEnabled(kSmartReflex_Channel2))

  00038	e3a00001	 mov         r0, #1
  0003c	eb000000	 bl          IsSmartReflexMonitoringEnabled
  00040	e3500000	 cmp         r0, #0
  00044	0a000005	 beq         |$LN3@BSPPowerOf|

; 97   : 	{
; 98   :         s_enableSmartReflex2 = TRUE;

  00048	e3a03001	 mov         r3, #1

; 99   :         SmartReflex_EnableMonitor(kSmartReflex_Channel2, FALSE);

  0004c	e3a01000	 mov         r1, #0
  00050	e3a00001	 mov         r0, #1
  00054	e5843000	 str         r3, [r4]
  00058	eb000000	 bl          SmartReflex_EnableMonitor

; 100  : 	}
; 101  :     else

  0005c	ea000001	 b           |$LN2@BSPPowerOf|
  00060		 |$LN3@BSPPowerOf|

; 102  : 	{
; 103  :         s_enableSmartReflex2 = FALSE;

  00060	e3a03000	 mov         r3, #0
  00064	e5843000	 str         r3, [r4]
  00068		 |$LN2@BSPPowerOf|

; 104  : 	}
; 105  : 
; 106  :     // clear wake-up enable capabilities for gptimer1
; 107  :     CLRREG32(&g_PrcmPrm.pOMAP_WKUP_PRM->PM_WKEN_WKUP, CM_CLKEN_GPT1);

  00068	e59f3040	 ldr         r3, [pc, #0x40]
  0006c	e5932000	 ldr         r2, [r3]
  00070	e59230a0	 ldr         r3, [r2, #0xA0]
  00074	e3c33001	 bic         r3, r3, #1
  00078	e58230a0	 str         r3, [r2, #0xA0]

; 108  : 
; 109  :     // stop GPTIMER1
; 110  :     //OUTREG32(&g_pTimerRegs->TCLR, INREG32(&g_pTimerRegs->TCLR) & ~(GPTIMER_TCLR_ST));
; 111  :     OALTimerStop();

  0007c	eb000000	 bl          OALTimerStop

; 112  :     
; 113  :     if (g_oalRetailMsgEnable)

  00080	e59f3024	 ldr         r3, [pc, #0x24]
  00084	e5933000	 ldr         r3, [r3]
  00088	e3530000	 cmp         r3, #0
  0008c	0a000004	 beq         |$LN1@BSPPowerOf|

; 114  : 	{
; 115  :         OEMDeinitDebugSerial();

  00090	eb000000	 bl          OEMDeinitDebugSerial

; 116  :         EnableDeviceClocks(BSPGetDebugUARTConfig()->dev,FALSE);

  00094	eb000000	 bl          BSPGetDebugUARTConfig
  00098	e5900000	 ldr         r0, [r0]
  0009c	e3a01000	 mov         r1, #0
  000a0	eb000000	 bl          EnableDeviceClocks
  000a4		 |$LN1@BSPPowerOf|

; 117  : 	}
; 118  : }

  000a4	e8bd4010	 ldmia       sp!, {r4, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN11@BSPPowerOf|
  000ac		 |$LN12@BSPPowerOf|
  000ac	00000000	 DCD         |g_oalRetailMsgEnable|
  000b0		 |$LN13@BSPPowerOf|
  000b0	00000000	 DCD         |g_PrcmPrm|
  000b4		 |$LN14@BSPPowerOf|
  000b4	00000000	 DCD         |s_enableSmartReflex2|
  000b8		 |$M47216|

			 ENDP  ; |BSPPowerOff|

	EXPORT	|BSPPowerOn|
	IMPORT	|g_ResumeRTC|
	IMPORT	|OEMInitDebugSerial|

  00000			 AREA	 |.pdata|, PDATA
|$T47229| DCD	|$LN8@BSPPowerOn|
	DCD	0x40002301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BSPPowerOn| PROC

; 125  : {

  00000		 |$LN8@BSPPowerOn|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47226|

; 126  :     // reset wake-up enable capabilities for gptimer1
; 127  :     SETREG32(&g_PrcmPrm.pOMAP_WKUP_PRM->PM_WKEN_WKUP, CM_CLKEN_GPT1);

  00004	e59f307c	 ldr         r3, [pc, #0x7C]

; 128  : 
; 129  :     if (s_enableSmartReflex1)

  00008	e59f4074	 ldr         r4, [pc, #0x74]
  0000c	e5931000	 ldr         r1, [r3]
  00010	e5942004	 ldr         r2, [r4, #4]
  00014	e59130a0	 ldr         r3, [r1, #0xA0]
  00018	e3520000	 cmp         r2, #0

; 130  :         {
; 131  :         SmartReflex_EnableMonitor(kSmartReflex_Channel1, TRUE);

  0001c	13a00000	 movne       r0, #0
  00020	e3833001	 orr         r3, r3, #1
  00024	e58130a0	 str         r3, [r1, #0xA0]
  00028	13a01001	 movne       r1, #1
  0002c	1b000000	 blne        SmartReflex_EnableMonitor

; 132  :         }
; 133  : 
; 134  :     if (s_enableSmartReflex2)

  00030	e5943000	 ldr         r3, [r4]
  00034	e3530000	 cmp         r3, #0

; 135  :         {
; 136  :         SmartReflex_EnableMonitor(kSmartReflex_Channel2, TRUE);

  00038	13a01001	 movne       r1, #1
  0003c	13a00001	 movne       r0, #1
  00040	1b000000	 blne        SmartReflex_EnableMonitor

; 137  :         }
; 138  : 
; 139  :     if (g_oalRetailMsgEnable)

  00044	e59f3034	 ldr         r3, [pc, #0x34]
  00048	e5933000	 ldr         r3, [r3]
  0004c	e3530000	 cmp         r3, #0
  00050	0a000004	 beq         |$LN1@BSPPowerOn|

; 140  : 	    {
; 141  :         EnableDeviceClocks(BSPGetDebugUARTConfig()->dev,TRUE);

  00054	eb000000	 bl          BSPGetDebugUARTConfig
  00058	e5900000	 ldr         r0, [r0]
  0005c	e3a01001	 mov         r1, #1
  00060	eb000000	 bl          EnableDeviceClocks

; 142  : 	    OEMInitDebugSerial();

  00064	eb000000	 bl          OEMInitDebugSerial
  00068		 |$LN1@BSPPowerOn|

; 143  :     	}
; 144  : 
; 145  :     g_ResumeRTC = TRUE;

  00068	e59f300c	 ldr         r3, [pc, #0xC]
  0006c	e3a02001	 mov         r2, #1
  00070	e5832000	 str         r2, [r3]

; 146  : }

  00074	e8bd4010	 ldmia       sp!, {r4, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN9@BSPPowerOn|
  0007c		 |$LN10@BSPPowerOn|
  0007c	00000000	 DCD         |g_ResumeRTC|
  00080		 |$LN11@BSPPowerOn|
  00080	00000000	 DCD         |g_oalRetailMsgEnable|
  00084		 |$LN12@BSPPowerOn|
  00084	00000000	 DCD         |s_enableSmartReflex2|
  00088		 |$LN13@BSPPowerOn|
  00088	00000000	 DCD         |g_PrcmPrm|
  0008c		 |$M47227|

			 ENDP  ; |BSPPowerOn|

	END
