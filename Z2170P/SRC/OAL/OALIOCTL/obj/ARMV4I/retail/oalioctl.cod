; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\Z2170P\SRC\OAL\OALIOCTL\oalioctl.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?g_pfnExtOALIoctl@@3P6AHKPAXK0KPAK@ZA| [ DATA ] ; g_pfnExtOALIoctl

  00000			 AREA	 |.bss|, NOINIT
|?g_pfnExtOALIoctl@@3P6AHKPAXK0KPAK@ZA| % 0x4		; g_pfnExtOALIoctl
	EXPORT	|IOControl|
	IMPORT	|SetLastError|
; File c:\wince600\platform\z2170p\src\oal\oalioctl\oalioctl.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T36474| DCD	|$LN15@IOControl|
	DCD	0x40007502
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IOControl| PROC

; 92   : {

  00000		 |$LN15@IOControl|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M36471|
  00008	e1a07003	 mov         r7, r3

; 93   :     BOOL fRet = FALSE;
; 94   : 
; 95   :     //
; 96   :     // By default the following ioctls are supported for user mode threads.
; 97   :     // If a new ioctl is being added to this list, make sure the corresponding
; 98   :     // data associated with that ioctl is marshalled properly to the OAL
; 99   :     // ioctl implementation. In normal cases, one doesn't need any 
; 100  :     // marshaling as first level user specified buffers are already validated 
; 101  :     // by kernel that:
; 102  :     // -- the buffers are within the user process space
; 103  :     // Check out IsValidUsrPtr() function in vmlayout.h for details on kernel
; 104  :     // validation of user specified buffers. Kernel doesn't validate that the
; 105  :     // buffers are accessible; it only checks that the buffer start and end
; 106  :     // addresses are within the user process space.
; 107  :     //
; 108  :     switch (dwIoControlCode) {     

  0000c	e59fe1bc	 ldr         lr, [pc, #0x1BC]
  00010	e3a04000	 mov         r4, #0
  00014	e150000e	 cmp         r0, lr
  00018	8a000028	 bhi         |$LN8@IOControl|
  0001c	0a000048	 beq         |$LN2@IOControl|
  00020	e59fe1a4	 ldr         lr, [pc, #0x1A4]
  00024	e150000e	 cmp         r0, lr
  00028	8a000019	 bhi         |$LN9@IOControl|
  0002c	0a00000e	 beq         |$LN3@IOControl|
  00030	e59fe190	 ldr         lr, [pc, #0x190]
  00034	e150000e	 cmp         r0, lr
  00038	0a00000b	 beq         |$LN3@IOControl|
  0003c	e59f3180	 ldr         r3, [pc, #0x180]
  00040	e1500003	 cmp         r0, r3
  00044	0a000008	 beq         |$LN3@IOControl|
  00048	e59f3170	 ldr         r3, [pc, #0x170]
  0004c	e1500003	 cmp         r0, r3
  00050	0a000005	 beq         |$LN3@IOControl|
  00054	e59f3160	 ldr         r3, [pc, #0x160]
  00058	e1500003	 cmp         r0, r3
  0005c	0a000002	 beq         |$LN3@IOControl|
  00060	e59f3150	 ldr         r3, [pc, #0x150]
  00064	e1500003	 cmp         r0, r3
  00068	1a000032	 bne         |$LN1@IOControl|
  0006c		 |$LN3@IOControl|

; 109  :         //  MSFT Standard kernel IOCTLs
; 110  :         case IOCTL_HAL_GET_CACHE_INFO:
; 111  :         case IOCTL_HAL_GET_DEVICE_INFO:
; 112  :         case IOCTL_HAL_GET_DEVICEID:
; 113  :         case IOCTL_HAL_GET_UUID:
; 114  :         case IOCTL_PROCESSOR_INFORMATION:
; 115  :         case IOCTL_HAL_REBOOT:
; 116  :         case IOCTL_HAL_ENABLE_WAKE:
; 117  :         case IOCTL_HAL_DISABLE_WAKE:
; 118  :         case IOCTL_HAL_GET_WAKE_SOURCE:
; 119  :             // request is to service the ioctl - forward the call to OAL code
; 120  :             // OAL code will set the last error if there is a failure
; 121  :             fRet = (*g_pfnExtOALIoctl)(dwIoControlCode, pInBuf, nInBufSize, pOutBuf, nOutBufSize, pBytesReturned);

  0006c	e59f3108	 ldr         r3, [pc, #0x108]
  00070	e59d4020	 ldr         r4, [sp, #0x20]
  00074	e59d501c	 ldr         r5, [sp, #0x1C]
  00078	e5936000	 ldr         r6, [r3]
  0007c	e1a03007	 mov         r3, r7
  00080	e58d4004	 str         r4, [sp, #4]
  00084	e58d5000	 str         r5, [sp]
  00088	e1a0e00f	 mov         lr, pc
  0008c	e12fff16	 bx          r6

; 122  :         break;

  00090	ea000034	 b           |$LN12@IOControl|
  00094		 |$LN9@IOControl|

; 93   :     BOOL fRet = FALSE;
; 94   : 
; 95   :     //
; 96   :     // By default the following ioctls are supported for user mode threads.
; 97   :     // If a new ioctl is being added to this list, make sure the corresponding
; 98   :     // data associated with that ioctl is marshalled properly to the OAL
; 99   :     // ioctl implementation. In normal cases, one doesn't need any 
; 100  :     // marshaling as first level user specified buffers are already validated 
; 101  :     // by kernel that:
; 102  :     // -- the buffers are within the user process space
; 103  :     // Check out IsValidUsrPtr() function in vmlayout.h for details on kernel
; 104  :     // validation of user specified buffers. Kernel doesn't validate that the
; 105  :     // buffers are accessible; it only checks that the buffer start and end
; 106  :     // addresses are within the user process space.
; 107  :     //
; 108  :     switch (dwIoControlCode) {     

  00094	e59f3118	 ldr         r3, [pc, #0x118]
  00098	e1500003	 cmp         r0, r3
  0009c	0afffff2	 beq         |$LN3@IOControl|
  000a0	e59f3108	 ldr         r3, [pc, #0x108]
  000a4	e1500003	 cmp         r0, r3
  000a8	0affffef	 beq         |$LN3@IOControl|
  000ac	e59f30f8	 ldr         r3, [pc, #0xF8]
  000b0	e1500003	 cmp         r0, r3
  000b4	0affffec	 beq         |$LN3@IOControl|
  000b8	e59f30e8	 ldr         r3, [pc, #0xE8]
  000bc	ea00001b	 b           |$LN11@IOControl|
  000c0		 |$LN8@IOControl|
  000c0	e59f30dc	 ldr         r3, [pc, #0xDC]
  000c4	e1500003	 cmp         r0, r3
  000c8	8a00000e	 bhi         |$LN10@IOControl|
  000cc	0a00001c	 beq         |$LN2@IOControl|
  000d0	e59f30c8	 ldr         r3, [pc, #0xC8]
  000d4	e1500003	 cmp         r0, r3
  000d8	0a000019	 beq         |$LN2@IOControl|
  000dc	e59f30b8	 ldr         r3, [pc, #0xB8]
  000e0	e1500003	 cmp         r0, r3
  000e4	0a000016	 beq         |$LN2@IOControl|
  000e8	e59f30a8	 ldr         r3, [pc, #0xA8]
  000ec	e1500003	 cmp         r0, r3
  000f0	0a000013	 beq         |$LN2@IOControl|
  000f4	e59f3098	 ldr         r3, [pc, #0x98]
  000f8	e1500003	 cmp         r0, r3
  000fc	0a000010	 beq         |$LN2@IOControl|
  00100	e59f3088	 ldr         r3, [pc, #0x88]
  00104	ea000009	 b           |$LN11@IOControl|
  00108		 |$LN10@IOControl|
  00108	e59f307c	 ldr         r3, [pc, #0x7C]
  0010c	e1500003	 cmp         r0, r3
  00110	0a00000b	 beq         |$LN2@IOControl|
  00114	e59f306c	 ldr         r3, [pc, #0x6C]
  00118	e1500003	 cmp         r0, r3
  0011c	0a000008	 beq         |$LN2@IOControl|
  00120	e59f305c	 ldr         r3, [pc, #0x5C]
  00124	e1500003	 cmp         r0, r3
  00128	0a000005	 beq         |$LN2@IOControl|
  0012c	e59f304c	 ldr         r3, [pc, #0x4C]
  00130		 |$LN11@IOControl|
  00130	e1500003	 cmp         r0, r3
  00134	0a000002	 beq         |$LN2@IOControl|
  00138		 |$LN1@IOControl|

; 151  :         break;
; 152  : 
; 153  :         default:
; 154  :             SetLastError(ERROR_NOT_SUPPORTED);

  00138	e3a00032	 mov         r0, #0x32
  0013c	eb000000	 bl          SetLastError

; 155  :         break;

  00140	ea000009	 b           |$LN4@IOControl|
  00144		 |$LN2@IOControl|

; 123  : 
; 124  : #if (_WINCEOSVER==700)
; 125  :         //  "Seven" specific IOCTLs
; 126  :         case IOCTL_HAL_UPDATE_MODE:
; 127  :         case IOCTL_HAL_GET_CELOG_PARAMETERS:
; 128  :         case IOCTL_HAL_GET_POWERONREASON:
; 129  :             // request is to service the ioctl - forward the call to OAL code
; 130  :             // OAL code will set the last error if there is a failure
; 131  :             fRet = (*g_pfnExtOALIoctl)(dwIoControlCode, pInBuf, nInBufSize, pOutBuf, nOutBufSize, pBytesReturned);
; 132  :         break;
; 133  : #endif
; 134  : 
; 135  :         //  OMAP35XX OAL Extension IOCTLs
; 136  :         case IOCTL_HAL_GET_NEON_STATS:            
; 137  :         case IOCTL_HAL_GET_CPUID:
; 138  :         case IOCTL_HAL_GET_DIEID:
; 139  :         case IOCTL_HAL_GET_BSP_VERSION:
; 140  :         case IOCTL_HAL_GET_DSP_INFO:
; 141  :         case IOCTL_HAL_GET_CPUFAMILY:
; 142  :         case IOCTL_HAL_GET_CPUREVISION:
; 143  :         case IOCTL_HAL_DUMP_REGISTERS:
; 144  :         case IOCTL_HAL_GET_CPUSPEED:	
; 145  :         case IOCTL_HAL_GET_DISPLAY_RES:
; 146  :         case IOCTL_HAL_CONVERT_CA_TO_PA: 
; 147  :         case IOCTL_HAL_GET_ECC_TYPE: 
; 148  :             // request is to service the ioctl - forward the call to OAL code
; 149  :             // OAL code will set the last error if there is a failure
; 150  :             fRet = (*g_pfnExtOALIoctl)(dwIoControlCode, pInBuf, nInBufSize, pOutBuf, nOutBufSize, pBytesReturned);

  00144	e59f3030	 ldr         r3, [pc, #0x30]
  00148	e59d4020	 ldr         r4, [sp, #0x20]
  0014c	e59d501c	 ldr         r5, [sp, #0x1C]
  00150	e5936000	 ldr         r6, [r3]
  00154	e1a03007	 mov         r3, r7
  00158	e58d4004	 str         r4, [sp, #4]
  0015c	e58d5000	 str         r5, [sp]
  00160	e1a0e00f	 mov         lr, pc
  00164	e12fff16	 bx          r6
  00168		 |$LN12@IOControl|
  00168	e1a04000	 mov         r4, r0
  0016c		 |$LN4@IOControl|

; 156  :     }
; 157  : 
; 158  :     return fRet;
; 159  : }

  0016c	e1a00004	 mov         r0, r4
  00170	e28dd008	 add         sp, sp, #8
  00174	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00178	e12fff1e	 bx          lr
  0017c		 |$LN16@IOControl|
  0017c		 |$LN17@IOControl|
  0017c	00000000	 DCD         |?g_pfnExtOALIoctl@@3P6AHKPAXK0KPAK@ZA|
  00180		 |$LN18@IOControl|
  00180	01013098	 DCD         0x1013098
  00184		 |$LN19@IOControl|
  00184	01013090	 DCD         0x1013090
  00188		 |$LN20@IOControl|
  00188	01013080	 DCD         0x1013080
  0018c		 |$LN21@IOControl|
  0018c	01013078	 DCD         0x1013078
  00190		 |$LN22@IOControl|
  00190	01013070	 DCD         0x1013070
  00194		 |$LN23@IOControl|
  00194	01012010	 DCD         0x1012010
  00198		 |$LN24@IOControl|
  00198	0101200c	 DCD         0x101200c
  0019c		 |$LN25@IOControl|
  0019c	01012008	 DCD         0x1012008
  001a0		 |$LN26@IOControl|
  001a0	01012004	 DCD         0x1012004
  001a4		 |$LN27@IOControl|
  001a4	01013074	 DCD         0x1013074
  001a8		 |$LN28@IOControl|
  001a8	01011130	 DCD         0x1011130
  001ac		 |$LN29@IOControl|
  001ac	01010108	 DCD         0x1010108
  001b0		 |$LN30@IOControl|
  001b0	010100a8	 DCD         0x10100a8
  001b4		 |$LN31@IOControl|
  001b4	010100a4	 DCD         0x10100a4
  001b8		 |$LN32@IOControl|
  001b8	01010064	 DCD         0x1010064
  001bc		 |$LN33@IOControl|
  001bc	01010054	 DCD         0x1010054
  001c0		 |$LN34@IOControl|
  001c0	0101003c	 DCD         0x101003c
  001c4		 |$LN35@IOControl|
  001c4	01010034	 DCD         0x1010034
  001c8		 |$LN36@IOControl|
  001c8	01010004	 DCD         0x1010004
  001cc		 |$LN37@IOControl|
  001cc	010100a0	 DCD         0x10100a0
  001d0		 |$LN38@IOControl|
  001d0	01011134	 DCD         0x1011134
  001d4		 |$M36472|

			 ENDP  ; |IOControl|

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|

  00000			 AREA	 |.pdata|, PDATA
|$T36509| DCD	|$LN9@DllMain|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllMain| PROC

; 164  : {

  00000		 |$LN9@DllMain|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36506|
  00004	e1a04002	 mov         r4, r2

; 165  :     switch (dwReason)

  00008	e3510001	 cmp         r1, #1
  0000c	1a000002	 bne         |$LN3@DllMain|

; 166  :     {
; 167  :         case DLL_PROCESS_ATTACH:
; 168  :             DisableThreadLibraryCalls((HINSTANCE)hDll);

  00010	eb000000	 bl          DisableThreadLibraryCalls

; 169  :             g_pfnExtOALIoctl = (PFN_Ioctl) lpReserved;

  00014	e59f300c	 ldr         r3, [pc, #0xC]
  00018	e5834000	 str         r4, [r3]
  0001c		 |$LN3@DllMain|

; 170  :         break;
; 171  :         case DLL_PROCESS_DETACH:
; 172  :         default:
; 173  :         break;
; 174  :     }
; 175  : 
; 176  :     return TRUE;

  0001c	e3a00001	 mov         r0, #1

; 177  : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$LN10@DllMain|
  00028		 |$LN11@DllMain|
  00028	00000000	 DCD         |?g_pfnExtOALIoctl@@3P6AHKPAXK0KPAK@ZA|
  0002c		 |$M36507|

			 ENDP  ; |DllMain|

	END
